# HG changeset patch
# User dbateman
# Date 1161333200 0
#      Fri Oct 20 08:33:20 2006 +0000
# Node ID 27fa671e5599032561fbc265d8f9682dd639d9a7
# Parent  814f20da2cdb435d37ebb6083be23285b75da9da
[project @ 2006-10-20 08:33:19 by dbateman]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2006-10-20  David Bateman  <dbateman@free.fr>
+
+	* DLD-FUNCTION/spqr.cc (dmperm_internal): New function with core
+	of Fdmperm.
+	(Fdmperm): Call dmperm_internal rather then calculating loally.
+	(Fsprank): New function to calculate the strutural rank also using
+	dmperm_internal.
+
 2006-10-19  John W. Eaton  <jwe@octave.org>
 
 	* ov-struct.cc (octave_struct::as_mxArrary):
 	Use OCTAVE_LOCAL_BUFFER to allocate tempoarary array of field names.
 
 	* mxarray.h (mxArray::persistent): Delete var and all uses.
 	(mxArray::mark_persistent, mxArray::unmark_persistent,
 	mxArray::is_persistent): Delete functions.
diff --git a/src/DLD-FUNCTIONS/spqr.cc b/src/DLD-FUNCTIONS/spqr.cc
--- a/src/DLD-FUNCTIONS/spqr.cc
+++ b/src/DLD-FUNCTIONS/spqr.cc
@@ -225,49 +225,21 @@ static RowVector
 put_int (octave_idx_type *p, octave_idx_type n)
 {
   RowVector ret (n);
   for (octave_idx_type i = 0; i < n; i++)
     ret.xelem(i) = p[i] + 1;
   return ret;
 }
 
-DEFUN_DLD (dmperm, args, nargout,
-  "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {@var{p} =} dmperm (@var{s})\n\
-@deftypefnx {Loadable Function} {[@var{p}, @var{q}, @var{r}, @var{s}] =} dmperm (@var{s})\n\
-\n\
-@cindex Dulmage-Mendelsohn decomposition\n\
-Perform a Deulmage-Mendelsohn permutation on the sparse matrix @var{s}.\n\
-With a single output argument @dfn{dmperm} performs the row permutations\n\
-@var{p} such that @code{@var{s} (@var{p},:)} has no zero elements on the\n\
-diagonal.\n\
-\n\
-Called with two or more output arguments, returns the row and column\n\
-permutations, such that @code{@var{s} (@var{p}, @var{q})} is in block\n\
-triangular form. The values of @var{r} and @var{s} define the boundaries\n\
-of the blocks. If @var{s} is square then @code{@var{r} == @var{s}}.\n\
-\n\
-The method used is described in: A. Pothen & C.-J. Fan. Computing the block\n\
-triangular form of a sparse matrix. ACM Trans. Math. Software,\n\
-16(4):303-324, 1990.\n\
-@seealso{colamd, ccolamd}\n\
-@end deftypefn")
+#if HAVE_CXSPARSE
+static octave_value_list
+dmperm_internal (bool rank, const octave_value arg, int nargout)
 {
-  int nargin = args.length();
   octave_value_list retval;
-  
-#if HAVE_CXSPARSE
-  if (nargin != 1)
-    {
-      print_usage ();
-      return retval;
-    }
-
-  octave_value arg = args(0);
   octave_idx_type nr = arg.rows ();
   octave_idx_type nc = arg.columns ();
   SparseMatrix m;
   SparseComplexMatrix cm;
   CXSPARSE_NAME () csm;
   csm.m = nr;
   csm.n = nc;
   csm.x = NULL;
@@ -285,70 +257,156 @@ 16(4):303-324, 1990.\n\
       cm = arg.sparse_complex_matrix_value ();
       csm.nzmax = cm.nnz();
       csm.p = cm.xcidx ();
       csm.i = cm.xridx ();
     }
 
   if (!error_state)
     {
-      if (nargout <= 1)
+      if (nargout <= 1 || rank)
 	{
 #if defined(CS_VER) && (CS_VER >= 2)
 	  octave_idx_type *jmatch = CXSPARSE_NAME (_maxtrans) (&csm, 0);
 #else
 	  octave_idx_type *jmatch = CXSPARSE_NAME (_maxtrans) (&csm);
 #endif
-	  retval(0) = put_int (jmatch + nr, nc);
+	  if (rank)
+	    {
+	      octave_idx_type r = 0;
+	      for (octave_idx_type i = 0; i < nc; i++)
+		if (jmatch[nr+i] >= 0)
+		  r++;
+	      retval(0) = static_cast<double>(r);
+	    }
+	  else
+	    retval(0) = put_int (jmatch + nr, nc);
 	  CXSPARSE_NAME (_free) (jmatch);
 	}
       else
 	{
 #if defined(CS_VER) && (CS_VER >= 2)
 	  CXSPARSE_NAME (d) *dm = CXSPARSE_NAME(_dmperm) (&csm, 0);
 #else
 	  CXSPARSE_NAME (d) *dm = CXSPARSE_NAME(_dmperm) (&csm);
 #endif
+
 	  //retval(5) = put_int (dm->rr, 5);
 	  //retval(4) = put_int (dm->cc, 5);
 #if defined(CS_VER) && (CS_VER >= 2)
 	  retval(3) = put_int (dm->s, dm->nb+1);
 	  retval(2) = put_int (dm->r, dm->nb+1);
 	  retval(1) = put_int (dm->q, nc);
 	  retval(0) = put_int (dm->p, nr);
 #else
 	  retval(3) = put_int (dm->S, dm->nb+1);
 	  retval(2) = put_int (dm->R, dm->nb+1);
 	  retval(1) = put_int (dm->Q, nc);
 	  retval(0) = put_int (dm->P, nr);
 #endif
 	  CXSPARSE_NAME (_dfree) (dm);
 	}
     }
+  return retval;
+}
+#endif
+
+DEFUN_DLD (dmperm, args, nargout,
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{p} =} dmperm (@var{s})\n\
+@deftypefnx {Loadable Function} {[@var{p}, @var{q}, @var{r}, @var{s}] =} dmperm (@var{s})\n\
+\n\
+@cindex Dulmage-Mendelsohn decomposition\n\
+Perform a Dulmage-Mendelsohn permutation on the sparse matrix @var{s}.\n\
+With a single output argument @dfn{dmperm} performs the row permutations\n\
+@var{p} such that @code{@var{s} (@var{p},:)} has no zero elements on the\n\
+diagonal.\n\
+\n\
+Called with two or more output arguments, returns the row and column\n\
+permutations, such that @code{@var{s} (@var{p}, @var{q})} is in block\n\
+triangular form. The values of @var{r} and @var{s} define the boundaries\n\
+of the blocks. If @var{s} is square then @code{@var{r} == @var{s}}.\n\
+\n\
+The method used is described in: A. Pothen & C.-J. Fan. Computing the block\n\
+triangular form of a sparse matrix. ACM Trans. Math. Software,\n\
+16(4):303-324, 1990.\n\
+@seealso{colamd, ccolamd}\n\
+@end deftypefn")
+{
+  int nargin = args.length();
+  octave_value_list retval;
+  
+  if (nargin != 1)
+    {
+      print_usage ();
+      return retval;
+    }
+
+#if HAVE_CXSPARSE
+  retval = dmperm_internal (false, args(0), nargout);
 #else
   error ("dmperm: not available in this version of Octave");
 #endif
 
   return retval;
 }
 
-/*
+/* 
 
 %!test
 %! n=20;
 %! a=speye(n,n);a=a(randperm(n),:);
 %! assert(a(dmperm(a),:),speye(n))
 
 %!test
 %! n=20;
 %! d=0.2;
 %! a=tril(sprandn(n,n,d),-1)+speye(n,n);
 %! a=a(randperm(n),randperm(n));
 %! [p,q,r,s]=dmperm(a);
 %! assert(tril(a(p,q),-1),sparse(n,n))
 
 */
 
+DEFUN_DLD (sprank, args, nargout,
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{p} =} sprank (@var{s})\n\
+\n\
+@cindex Structural Rank\n\
+Calculates the structural rank of a sparse matrix @var{s}. Note that\n\
+only the structure of the matrix is used in this calculation based on\n\
+a Dulmage-Mendelsohn to block triangular form. As such the numerical\n\
+rank of the matrix @var{s} is bounded by @code{sprank (@var{s}) >=\n\
+rank (@var{s})}. Ignoring floating point errors @code{sprank (@var{s}) ==\n\
+rank (@var{s})}.\n\
+@seealso{dmperm}\n\
+@end deftypefn")
+{
+  int nargin = args.length();
+  octave_value_list retval;
+  
+  if (nargin != 1)
+    {
+      print_usage ();
+      return retval;
+    }
+
+#if HAVE_CXSPARSE
+  retval = dmperm_internal (true, args(0), nargout);
+#else
+  error ("sprank: not available in this version of Octave");
+#endif
+
+  return retval;
+}
+
+/* 
+
+%!error(sprank(1,2));
+%!assert(sprank(speye(20)), 20)
+%!assert(sprank([1,0,2,0;2,0,4,0]),2)
+
+*/
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
