# HG changeset patch
# User John Donoghue
# Date 1428423179 14400
#      Tue Apr 07 12:12:59 2015 -0400
# Node ID 76c72314d9055aa9fa70e2b39fec41ebe65d9a96
# Parent  0e712de0af4d5761b46a99c5ab3bb3b5e7349473
QT Text/EditControl: support String cells (Bug 44749)

* libgui/graphics/QtHandlesUtils.cc/h
  (toCellString): New function

* libgui/graphics/EditControl.cc
  (EditControl::init): set text as string_vector
  (EditControl::updateMultiLine): set text as string_vector
  (EditControl::returnPressed): set String as cells
  (EditControl::editingFinished): set String as cells

* libgui/graphics/TextControl.cc
  (TextControl::TextControl): set text as string vector
  (TextControl::update): set text as string vector

diff --git a/libgui/graphics/EditControl.cc b/libgui/graphics/EditControl.cc
--- a/libgui/graphics/EditControl.cc
+++ b/libgui/graphics/EditControl.cc
@@ -99,18 +99,17 @@ EditControl::init (TextEdit* edit, bool 
     BaseControl::init (edit, callBase);
 
   m_multiLine = true;
   initCommon (edit);
 
   uicontrol::properties& up = properties<uicontrol> ();
 
   edit->setAcceptRichText (false);
-  // FIXME: support string_vector
-  edit->setPlainText (Utils::fromStdString (up.get_string_string ()));
+  edit->setPlainText (Utils::fromStringVector (up.get_string_vector()).join("\n"));
 
   connect (edit, SIGNAL (textChanged (void)),
            SLOT (textChanged (void)));
   connect (edit, SIGNAL (editingFinished (void)),
            SLOT (editingFinished (void)));
   connect (edit, SIGNAL (returnPressed (void)),
            SLOT (returnPressed (void)));
 }
@@ -186,17 +185,17 @@ bool
 EditControl::updateMultiLine (int pId)
 {
   uicontrol::properties& up = properties<uicontrol> ();
   TextEdit* edit = qWidget<TextEdit> ();
 
   switch (pId)
     {
     case uicontrol::properties::ID_STRING:
-      edit->setPlainText (Utils::fromStdString (up.get_string_string ()));
+      edit->setPlainText (Utils::fromStringVector (up.get_string_vector()).join("\n"));
       return true;
 
     case uicontrol::properties::ID_MIN:
     case uicontrol::properties::ID_MAX:
       if ((up.get_max () - up.get_min ()) <= 1)
         {
           QWidget* container = edit->parentWidget ();
 
@@ -222,35 +221,42 @@ void
 EditControl::returnPressed (void)
 {
   QString txt = (m_multiLine
                  ? qWidget<TextEdit> ()->toPlainText ()
                  : qWidget<QLineEdit> ()->text ());
 
   if (m_textChanged)
     {
-      gh_manager::post_set (m_handle, "string", Utils::toStdString (txt), false);
+      if (m_multiLine)
+        gh_manager::post_set (m_handle, "string", Utils::toCellString(txt.split("\n")), false);
+      else
+        gh_manager::post_set (m_handle, "string", Utils::toStdString (txt), false);
 
       m_textChanged = false;
     }
 
   if (txt.length () > 0)
     gh_manager::post_callback (m_handle, "callback");
 }
 
 void
 EditControl::editingFinished (void)
 {
   if (m_textChanged)
     {
+      uicontrol::properties& up = properties<uicontrol> ();
+
       QString txt = (m_multiLine
                      ? qWidget<TextEdit> ()->toPlainText ()
                      : qWidget<QLineEdit> ()->text ());
-
-      gh_manager::post_set (m_handle, "string", Utils::toStdString (txt), false);
+      if (m_multiLine)
+        gh_manager::post_set (m_handle, "string", Utils::toCellString(txt.split("\n")), false);
+      else
+        gh_manager::post_set (m_handle, "string", Utils::toStdString (txt), false);
       gh_manager::post_callback (m_handle, "callback");
 
       m_textChanged = false;
     }
 }
 
 }; // namespace QtHandles
 
diff --git a/libgui/graphics/QtHandlesUtils.cc b/libgui/graphics/QtHandlesUtils.cc
--- a/libgui/graphics/QtHandlesUtils.cc
+++ b/libgui/graphics/QtHandlesUtils.cc
@@ -76,16 +76,33 @@ toStringVector (const QStringList& l)
   int i = 0;
 
   foreach (const QString& s, l)
     v[i++] = toStdString (s);
 
   return v;
 }
 
+Cell toCellString (const QStringList& l)
+{
+  QStringList tmp = l;
+
+  // dont get any empty lines from end of the list
+  while ((tmp.length () > 0) && (tmp.last ().length () == 0))
+    {
+      tmp.removeLast ();
+    }
+  // no strings will be a a 1x1 cell with empty string
+  if (tmp.length () == 0)
+    tmp += "";
+
+  Cell v(toStringVector (tmp));
+  return v;
+}
+
 template <class T>
 QFont
 computeFont (const typename T::properties& props, int height)
 {
   QFont f (fromStdString (props.get_fontname ()));
 
   static std::map<std::string, QFont::Weight> weightMap;
   static std::map<std::string, QFont::Style> angleMap;
diff --git a/libgui/graphics/QtHandlesUtils.h b/libgui/graphics/QtHandlesUtils.h
--- a/libgui/graphics/QtHandlesUtils.h
+++ b/libgui/graphics/QtHandlesUtils.h
@@ -42,16 +42,18 @@ namespace QtHandles
 namespace Utils
 {
   QString fromStdString (const std::string& s);
   std::string toStdString (const QString& s);
 
   QStringList fromStringVector (const string_vector& v);
   string_vector toStringVector (const QStringList& l);
 
+  Cell toCellString (const QStringList& l);
+
   template <class T>
   QFont computeFont (const typename T::properties& props, int height = -1);
 
   QColor fromRgb (const Matrix& rgb);
   Matrix toRgb (const QColor& c);
 
   Qt::Alignment fromHVAlign (const caseless_str& halign,
                              const caseless_str& valign);
diff --git a/libgui/graphics/TextControl.cc b/libgui/graphics/TextControl.cc
--- a/libgui/graphics/TextControl.cc
+++ b/libgui/graphics/TextControl.cc
@@ -54,35 +54,33 @@ TextControl::TextControl (const graphics
 {
   uicontrol::properties& up = properties<uicontrol> ();
 
   label->setAutoFillBackground (true);
   label->setTextFormat (Qt::PlainText);
   label->setWordWrap (false);
   label->setAlignment (Utils::fromHVAlign (up.get_horizontalalignment (),
                                            up.get_verticalalignment ()));
-  // FIXME: support string_vector
-  label->setText (Utils::fromStdString (up.get_string_string ()));
+  label->setText(Utils::fromStringVector (up.get_string_vector()).join("\n"));
 }
 
 TextControl::~TextControl (void)
 {
 }
 
 void
 TextControl::update (int pId)
 {
   uicontrol::properties& up = properties<uicontrol> ();
   QLabel* label = qWidget<QLabel> ();
 
   switch (pId)
     {
     case uicontrol::properties::ID_STRING:
-      // FIXME: support string_vector
-      label->setText (Utils::fromStdString (up.get_string_string ()));
+      label->setText(Utils::fromStringVector (up.get_string_vector()).join("\n"));
       break;
 
     case uicontrol::properties::ID_HORIZONTALALIGNMENT:
     case uicontrol::properties::ID_VERTICALALIGNMENT:
       label->setAlignment (Utils::fromHVAlign (up.get_horizontalalignment (),
                                                up.get_verticalalignment ()));
       break;
 
