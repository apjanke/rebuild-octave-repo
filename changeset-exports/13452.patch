# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1302870921 -7200
#      Fri Apr 15 14:35:21 2011 +0200
# Node ID 42f522aed197f06429eb9e8ef39073de704022e9
# Parent  b3b248cbe29f7cc2b4897f5b58358d41eec8aca5
Removed some code.

diff --git a/gui//src/OctaveLink.cpp b/gui//src/OctaveLink.cpp
--- a/gui//src/OctaveLink.cpp
+++ b/gui//src/OctaveLink.cpp
@@ -163,41 +163,28 @@ int OctaveLink::setBreakpointAction (Bre
 
 /*******************************************************************************
  *******************************************************************************
  * SERVER SIDE FUNCTIONS
  *******************************************************************************
  *******************************************************************************/
 
 //*************************************************************************
-int OctaveLink::processOctaveServerData(void)
-{
-  struct timeval start, stop;
-#ifndef __WIN32__
-  gettimeofday(&start, NULL);
-#endif
-
-  QMutexLocker mutexLocker(&m_internalAccessMutex);
+int OctaveLink::processOctaveServerData(void) {
+    QMutexLocker mutexLocker(&m_internalAccessMutex);
 
-  process_breakpoint_action();
-  processBreakpointAndRemoveModify();
-  processRequestedVariables();
-  retrieveVariables();
-  setHistoryList();
-  setBreakPointList();
-
-#ifndef __WIN32__
-  gettimeofday(&stop, NULL);
-  double elapsed = stop.tv_sec - start.tv_sec + 1E-6 * (stop.tv_usec - start.tv_usec);
-  //octave_stdout << "SERVER ELAPSED: " << elapsed << std::endl;
-#endif
-  return 0;
+    process_breakpoint_action();
+    processBreakpointAndRemoveModify();
+    processRequestedVariables();
+    retrieveVariables();
+    setHistoryList();
+    setBreakPointList();
+    return 0;
 }
 
-
 //*************************************************************************
 void OctaveLink::retrieveVariables() {
     m_variableSymbolTableList.clear();
     std::list<SymbolRecord> allVariables = symbol_table::all_variables();
     std::list<SymbolRecord>::iterator iterator;
     for(iterator = allVariables.begin(); iterator != allVariables.end(); iterator++)
         m_variableSymbolTableList.append(*iterator);
 }
diff --git a/gui//src/TerminalDisplay.h b/gui//src/TerminalDisplay.h
--- a/gui//src/TerminalDisplay.h
+++ b/gui//src/TerminalDisplay.h
@@ -55,17 +55,17 @@ class ScreenWindow;
  * A widget which displays output from a terminal emulation and sends input keypresses and mouse activity
  * to the terminal.
  *
  * When the terminal emulation receives new output from the program running in the terminal, 
  * it will update the display by calling updateImage().
  *
  * TODO More documentation
  */
-class KONSOLEPRIVATE_EXPORT TerminalDisplay : public QWidget
+class TerminalDisplay : public QWidget
 {
    Q_OBJECT
 
 public:
     /** Constructs a new terminal display widget with the specified parent. */
     TerminalDisplay(QWidget *parent=0);
     virtual ~TerminalDisplay();
 
