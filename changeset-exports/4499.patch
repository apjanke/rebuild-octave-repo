# HG changeset patch
# User jwe
# Date 1062791797 0
#      Fri Sep 05 19:56:37 2003 +0000
# Node ID 55695bf737973d9d3aff14a9e694eaeed8719a09
# Parent  093e39f03506ee214603d9323c9982a6d25cda50
[project @ 2003-09-05 19:56:37 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2003-09-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-cs-list.cc (octave_cs_list::print_raw): New function.
+	* ov-cs-list.h (octave_cs_list::print_raw): Provide decl.
+
 2003-09-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-plot.cc (subplot_style::columns_ok): Allow boxes style to
 	have 2 columns as well.
 
 2003-08-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dirfns.cc (Fls): Check EAGAIN to avoid losing output.
diff --git a/src/ov-cs-list.cc b/src/ov-cs-list.cc
--- a/src/ov-cs-list.cc
+++ b/src/ov-cs-list.cc
@@ -221,27 +221,29 @@ octave_list::assign (const octave_value_
 }
 
 void
 octave_list::print (std::ostream& os, bool) const
 {
   print_raw (os);
 }
 
+#endif
+
 void
-octave_list::print_raw (std::ostream& os, bool) const
+octave_cs_list::print_raw (std::ostream& os, bool) const
 {
   unwind_protect::begin_frame ("octave_list_print");
 
   int n = lst.length ();
 
   if (n > 0)
     {
       indent (os);
-      os << "(";
+      os << "(,";
       newline (os);
 
       increment_indent_level ();
 
       for (int i = 0; i < n; i++)
 	{
 	  OSSTREAM buf;
 	  buf << "[" << i+1 << "]" << OSSTREAM_ENDS;
@@ -251,26 +253,28 @@ octave_list::print_raw (std::ostream& os
 	  val.print_with_name (os, OSSTREAM_STR (buf));
 
 	  OSSTREAM_FREEZE (buf);
 	}
 
       decrement_indent_level ();
 
       indent (os);
-      os << ")";
+      os << ",)";
     }
   else
-    os << "()";
+    os << "(,,)";
 
   newline (os);
 
   unwind_protect::run_frame ("octave_list_print");
 }
 
+#if 0
+
 bool
 octave_list::print_name_tag (std::ostream& os, const std::string& name) const
 {
   indent (os);
   if (lst.length () == 0)
     os << name << " = ";
   else
     {
diff --git a/src/ov-cs-list.h b/src/ov-cs-list.h
--- a/src/ov-cs-list.h
+++ b/src/ov-cs-list.h
@@ -89,19 +89,24 @@ public:
 #if 0
 
   bool is_list (void) const { return true; }
 
   octave_value_list list_value (void) const { return lst; }
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
+#endif
+
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
+#if 0
+
   bool print_name_tag (std::ostream& os, const std::string& name) const;
+
 #endif
 
 private:
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 
   DECLARE_OCTAVE_ALLOCATOR
 };
diff --git a/src/ov-list.h b/src/ov-list.h
--- a/src/ov-list.h
+++ b/src/ov-list.h
@@ -94,21 +94,23 @@ public:
   octave_value_list list_value (void) const { return lst; }
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
-private:
+protected:
 
   // The list of Octave values.
   octave_value_list lst;
 
+private:
+
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 
   DECLARE_OCTAVE_ALLOCATOR
 };
 
 #endif
 
 /*
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -110,17 +110,17 @@ octave_struct::subsref (const std::strin
 	      {
 		octave_value_list t_idx = idx.front ();
 
 		if (t_idx.length () == 1)
 		  {
 		    idx_vector i = t_idx(0).index_vector ();
 		    octave_value_list t = tmp.index (i);
 
-		    retval = (t.length () == 1) ? t(0) : octave_value (t);
+		    retval = (t.length () == 1) ? t(0) : octave_value (t, true);
 
 		    // We handled two index elements, so tell
 		    // next_subsref to skip both of them.
 
 		    skip++;
 		  }
 		else
 		  gripe_invalid_index ();
@@ -140,17 +140,17 @@ octave_struct::subsref (const std::strin
 	  }
       }
       break;
 
     case '.':
       {
 	octave_value_list t = dotref (idx.front ());
 
-	retval = (t.length () == 1) ? t(0) : octave_value (t);
+	retval = (t.length () == 1) ? t(0) : octave_value (t, true);
       }
       break;
 
     case '{':
       gripe_invalid_index_type (type_name (), type[0]);
       break;
 
     default:
@@ -417,17 +417,17 @@ octave_struct::print_raw (std::ostream& 
 
       int n = map.array_length ();
 
       for (Octave_map::const_iterator p = map.begin (); p != map.end (); p++)
 	{
 	  std::string key = map.key (p);
 	  octave_value_list val = map.contents (p);
 
-	  octave_value tmp = (n == 1) ? val(0) : octave_value (val);
+	  octave_value tmp = (n == 1) ? val(0) : octave_value (val, true);
 
 	  if (print_keys_only)
 	    {
 	      indent (os);
 	      os << key << ": " << tmp.type_name ();
 	      newline (os);
 	    }
 	  else
