# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1550160252 0
#      Thu Feb 14 16:04:12 2019 +0000
# Node ID cf271740922aeaa0aab420018e5f18078f9027d5
# Parent  0c18acaa8b588f28e5fe237535f0abc9d50e2bc7
allow parsing of function handles of the form @foo.bar

This change is part of a fix for bug #51709.

* lex.ll (\@ | \@{S}*{FQIDENT}): Recognize function handles including
the name at the same time as "@" character that begins a function
handle or anonymous function so that we can recognize fully qualified
names.
(base_lexer::handle_identifier): Eliminate special handling of
function handle names since that is now done when recognizing the
"\@{S}*{FQIDENT}" pattern.

* oct-parse.yy (fcn_handle): Change rule to handle new meaning of
FCN_HANDLE token.

diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1301,48 +1301,82 @@ ANY_INCLUDING_NL (.|{NL})
           {
             curr_lexer->m_looking_for_object_index = true;
 
             return curr_lexer->count_token_internal (id_tok);
           }
       }
   }
 
-"@" {
-    curr_lexer->lexer_debug ("@");
+\@ |
+\@{S}*{FQIDENT} {
+    curr_lexer->lexer_debug ("\\@|\\@{S}*{FQIDENT}");
 
     if (curr_lexer->previous_token_may_be_command ()
         &&  curr_lexer->space_follows_previous_token ())
       {
         yyless (0);
         curr_lexer->push_start_state (COMMAND_START);
       }
     else
       {
-        int tok = curr_lexer->previous_token_value ();
+        int tok_val = curr_lexer->previous_token_value ();
 
         if (curr_lexer->whitespace_is_significant ()
             && curr_lexer->space_follows_previous_token ()
-            && ! (tok == '[' || tok == '{'
+            && ! (tok_val == '[' || tok_val == '{'
                   || curr_lexer->previous_token_is_binop ()))
           {
             yyless (0);
             unput (',');
             // Adjust for comma that was not really in the input stream.
             curr_lexer->m_current_input_column--;
           }
         else
           {
-            curr_lexer->m_current_input_column++;
-
-            curr_lexer->m_looking_at_function_handle++;
-            curr_lexer->m_looking_for_object_index = false;
+            curr_lexer->m_current_input_column += yyleng;
             curr_lexer->m_at_beginning_of_statement = false;
 
-            return curr_lexer->count_token ('@');
+            std::string ident = yytext;
+
+            if (ident == "@")
+              {
+                curr_lexer->m_looking_at_function_handle++;
+                curr_lexer->m_looking_for_object_index = false;
+
+                return curr_lexer->count_token ('@');
+              }
+            else
+              {
+                ident = ident.substr (1);
+                ident.erase (std::remove_if (ident.begin (), ident.end (),
+                                             is_space_or_tab), ident.end ());
+
+                int kw_token = curr_lexer->is_keyword_token (ident);
+
+                octave::token *tok;
+
+                if (kw_token)
+                  tok = new octave::token (LEXICAL_ERROR,
+                                           "function handles may not refer to keywords",
+                                           curr_lexer->m_input_line_number,
+                                           curr_lexer->m_current_input_column);
+                else
+                  {
+                    curr_lexer->m_looking_for_object_index = true;
+
+                    tok = new octave::token (FCN_HANDLE, ident,
+                                             curr_lexer->m_input_line_number,
+                                             curr_lexer->m_current_input_column);
+                  }
+
+                curr_lexer->push_token (tok);
+
+                return curr_lexer->count_token_internal (tok->token_value ());
+              }
           }
       }
   }
 
 %{
 // A new line character.  New line characters inside matrix constants
 // are handled by the <MATRIX_START> start state code above.  If closest
 // nesting is inside parentheses, don't return a row separator.
@@ -3097,43 +3131,16 @@ namespace octave
       }
 
     // If ident is a keyword token, then is_keyword_token will set
     // m_at_beginning_of_statement.  For example, if tok is an IF
     // token, then m_at_beginning_of_statement will be false.
 
     int kw_token = is_keyword_token (ident);
 
-    if (m_looking_at_function_handle)
-      {
-        if (kw_token)
-          {
-            token *tok
-              = new token (LEXICAL_ERROR,
-                           "function handles may not refer to keywords",
-                           m_input_line_number, m_current_input_column);
-
-            push_token (tok);
-
-            return count_token_internal (LEXICAL_ERROR);
-          }
-        else
-          {
-            push_token (new token (FCN_HANDLE, ident, m_input_line_number,
-                                   m_current_input_column));
-
-            m_current_input_column += flex_yyleng ();
-            m_looking_for_object_index = true;
-
-            m_at_beginning_of_statement = false;
-
-            return FCN_HANDLE;
-          }
-      }
-
     // If we have a regular keyword, return it.
     // Keywords can be followed by identifiers.
 
     if (kw_token)
       {
         if (kw_token >= 0)
           {
             m_current_input_column += flex_yyleng ();
diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -599,21 +599,18 @@ cell_or_matrix_row
                 | arg_list ','
                   { $$ = $1; }
                 | ',' arg_list
                   { $$ = $2; }
                 | ',' arg_list ','
                   { $$ = $2; }
                 ;
 
-fcn_handle      : '@' FCN_HANDLE
-                  {
-                    $$ = parser.make_fcn_handle ($2);
-                    lexer.m_looking_at_function_handle--;
-                  }
+fcn_handle      : FCN_HANDLE
+                  { $$ = parser.make_fcn_handle ($1); }
                 ;
 
 anon_fcn_handle : '@' param_list stmt_begin expr_no_assign
                   {
                     $$ = parser.make_anon_fcn_handle ($2, $4);
                     lexer.m_nesting_level.remove ();
                   }
                 | '@' param_list stmt_begin error
