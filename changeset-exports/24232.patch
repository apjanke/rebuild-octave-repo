# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1510696362 18000
#      Tue Nov 14 16:52:42 2017 -0500
# Node ID e0bcd17ac0705992e8f0bf8010e452421851cb93
# Parent  6bd7d2eb6434696752ef1b303f3496482a8cf2e9
smart indentation for selections or current line in code editor

* file-editor.h, file-editor.cc
(file_editor::fetab_smart_indent_line_or_selected_text): New signal.
(file_editor::request_smart_indent_line_or_selected_text): New slot.
(file_editor::m_smart_indent_line_or_selection_action): New menu
action.
(file_editor::construct): Create action.
(file_editor::check_actions): Enable it.
(file_editor::set_shortcuts): Define a shortcut for it.
(file_editor::add_file_editor_tab): Connect
fetab_smart_indent_line_or_selected_text signal to
smart_indent_line_or_selected_text slot.

* file-editor-tab.h, file-editor-tab.cc
(file_editor_tab::smart_indent_line_or_selected_text): New slot.
(file_editor_tab::do_smart_indent_line_or_selected_text): New function.

* octave-qscintilla.h, octave-qscintilla.cc
(octave_qscintilla::smart_indent_line_or_selected_text): New function.

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -1203,16 +1203,25 @@ file_editor_tab::unindent_selected_text 
 {
   if (ID != this)
     return;
 
   do_indent_selected_text (false);
 }
 
 void
+file_editor_tab::smart_indent_line_or_selected_text (const QWidget *ID)
+{
+  if (ID != this)
+    return;
+
+  do_smart_indent_line_or_selected_text ();
+}
+
+void
 file_editor_tab::convert_eol (const QWidget *ID, QsciScintilla::EolMode eol_mode)
 {
   if (ID != this)
     return;
 
   _edit_area->convertEols (eol_mode);
   _edit_area->setEolMode (eol_mode);
   update_eol_indicator ();
@@ -1418,16 +1427,44 @@ file_editor_tab::do_indent_selected_text
       else
         _edit_area->unindent (cpline);
     }
 
   _edit_area->endUndoAction ();
 }
 
 void
+file_editor_tab::do_smart_indent_line_or_selected_text (void)
+{
+  _edit_area->beginUndoAction ();
+
+  int lineFrom, lineTo;
+
+  if (_edit_area->hasSelectedText ())
+    {
+      int colFrom, colTo;
+      _edit_area->getSelection (&lineFrom, &colFrom, &lineTo, &colTo);
+
+      if (colTo == 0)  // the beginning of last line is not selected
+        lineTo--;        // stop at line above
+    }
+  else
+    {
+      int col;
+      _edit_area->getCursorPosition (&lineFrom, &col);
+
+      lineTo = lineFrom;
+    }
+
+  _edit_area->smart_indent_line_or_selected_text (lineFrom, lineTo);
+
+  _edit_area->endUndoAction ();
+}
+
+void
 file_editor_tab::do_comment_selected_text (bool comment)
 {
   QString comment_str = _edit_area->comment_string ();
   _edit_area->beginUndoAction ();
 
   if (_edit_area->hasSelectedText ())
     {
       int lineFrom, lineTo, colFrom, colTo;
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -103,16 +103,17 @@ public slots:
 
   void scintilla_command (const QWidget *, unsigned int);
 
   void comment_selected_text (const QWidget *ID);
   void uncomment_selected_text (const QWidget *ID);
 
   void indent_selected_text (const QWidget *ID);
   void unindent_selected_text (const QWidget *ID);
+  void smart_indent_line_or_selected_text (const QWidget *ID);
   void convert_eol (const QWidget *ID, QsciScintilla::EolMode);
 
   void zoom_in (const QWidget *ID);
   void zoom_out (const QWidget *ID);
   void zoom_normal (const QWidget *ID);
 
   void find (const QWidget *ID, QList<QAction *>);
   void find_next (const QWidget *ID);
@@ -245,16 +246,17 @@ private:
 
   void update_lexer ();
   void update_lexer_settings ();
 
   void show_dialog (QDialog *dlg, bool modal);
   int check_file_modified ();
   void do_comment_selected_text (bool comment);
   void do_indent_selected_text (bool indent);
+  void do_smart_indent_line_or_selected_text (void);
 
   void add_breakpoint_callback (const bp_info& info);
   void remove_breakpoint_callback (const bp_info& info);
   void remove_all_breakpoints_callback (const bp_info& info);
   void check_restore_breakpoints (void);
   void center_current_line (bool always=true);
 
   void add_octave_apis (octave_value_list key_ovl);
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -258,16 +258,17 @@ file_editor::check_actions (void)
   m_edit_cmd_menu->setEnabled (have_tabs);
   m_edit_fmt_menu->setEnabled (have_tabs);
   m_edit_nav_menu->setEnabled (have_tabs);
 
   m_comment_selection_action->setEnabled (have_tabs);
   m_uncomment_selection_action->setEnabled (have_tabs);
   m_indent_selection_action->setEnabled (have_tabs);
   m_unindent_selection_action->setEnabled (have_tabs);
+  m_smart_indent_line_or_selection_action->setEnabled (have_tabs);
 
   m_context_help_action->setEnabled (have_tabs);
   m_context_doc_action->setEnabled (have_tabs);
 
   m_view_editor_menu->setEnabled (have_tabs);
   m_zoom_in_action->setEnabled (have_tabs);
   m_zoom_out_action->setEnabled (have_tabs);
   m_zoom_normal_action->setEnabled (have_tabs);
@@ -792,16 +793,22 @@ file_editor::request_indent_selected_tex
 
 void
 file_editor::request_unindent_selected_text (bool)
 {
   emit fetab_unindent_selected_text (m_tab_widget->currentWidget ());
 }
 
 void
+file_editor::request_smart_indent_line_or_selected_text ()
+{
+  emit fetab_smart_indent_line_or_selected_text (m_tab_widget->currentWidget ());
+}
+
+void
 file_editor::request_conv_eol_windows (bool)
 {
   emit fetab_convert_eol (m_tab_widget->currentWidget (),
                           QsciScintilla::EolWindows);
 }
 void
 file_editor::request_conv_eol_unix (bool)
 {
@@ -1204,16 +1211,17 @@ file_editor::set_shortcuts (void)
   shortcut_manager::set_shortcut (m_transpose_line_action, "editor_edit:transpose_line");
   shortcut_manager::set_shortcut (m_comment_selection_action, "editor_edit:comment_selection");
   shortcut_manager::set_shortcut (m_uncomment_selection_action, "editor_edit:uncomment_selection");
 
   shortcut_manager::set_shortcut (m_upper_case_action, "editor_edit:upper_case");
   shortcut_manager::set_shortcut (m_lower_case_action, "editor_edit:lower_case");
   shortcut_manager::set_shortcut (m_indent_selection_action, "editor_edit:indent_selection");
   shortcut_manager::set_shortcut (m_unindent_selection_action, "editor_edit:unindent_selection");
+  shortcut_manager::set_shortcut (m_smart_indent_line_or_selection_action, "editor_edit:smart_indent_line_or_selection");
   shortcut_manager::set_shortcut (m_completion_action, "editor_edit:completion_list");
   shortcut_manager::set_shortcut (m_goto_line_action, "editor_edit:goto_line");
   shortcut_manager::set_shortcut (m_move_to_matching_brace, "editor_edit:move_to_brace");
   shortcut_manager::set_shortcut (m_sel_to_matching_brace, "editor_edit:select_to_brace");
   shortcut_manager::set_shortcut (m_toggle_bookmark_action, "editor_edit:toggle_bookmark");
   shortcut_manager::set_shortcut (m_next_bookmark_action, "editor_edit:next_bookmark");
   shortcut_manager::set_shortcut (m_previous_bookmark_action, "editor_edit:previous_bookmark");
   shortcut_manager::set_shortcut (m_remove_bookmark_action, "editor_edit:remove_bookmark");
@@ -1839,19 +1847,23 @@ file_editor::construct (void)
   m_comment_selection_action = add_action (m_edit_fmt_menu, QIcon (),
           tr ("&Comment"), SLOT (request_comment_selected_text (bool)));
   m_uncomment_selection_action = add_action (m_edit_fmt_menu, QIcon (),
           tr ("&Uncomment"), SLOT (request_uncomment_selected_text (bool)));
 
   m_edit_fmt_menu->addSeparator ();
 
   m_indent_selection_action = add_action (m_edit_fmt_menu, QIcon (),
-          tr ("&Indent"), SLOT (request_indent_selected_text (bool)));
+          tr ("&Indent Selection Rigidly"), SLOT (request_indent_selected_text (bool)));
   m_unindent_selection_action = add_action (m_edit_fmt_menu, QIcon (),
-          tr ("&Unindent"), SLOT (request_unindent_selected_text (bool)));
+          tr ("&Unindent Selection Rigidly"), SLOT (request_unindent_selected_text (bool)));
+
+  m_smart_indent_line_or_selection_action
+    = add_action (m_edit_fmt_menu, QIcon (),
+          tr ("Indent Code"), SLOT (request_smart_indent_line_or_selected_text (void)));
 
   m_edit_fmt_menu->addSeparator ();
 
   m_conv_eol_windows_action = add_action (m_edit_fmt_menu, QIcon (),
           tr ("Convert Line Endings to &Windows (CRLF)"),
           SLOT (request_conv_eol_windows (bool)));
   m_conv_eol_unix_action = add_action (m_edit_fmt_menu, QIcon (),
           tr ("Convert Line Endings to &Unix (LF)"),
@@ -2214,16 +2226,19 @@ file_editor::add_file_editor_tab (file_e
            f, SLOT (uncomment_selected_text (const QWidget*)));
 
   connect (this, SIGNAL (fetab_indent_selected_text (const QWidget*)),
            f, SLOT (indent_selected_text (const QWidget*)));
 
   connect (this, SIGNAL (fetab_unindent_selected_text (const QWidget*)),
            f, SLOT (unindent_selected_text (const QWidget*)));
 
+  connect (this, SIGNAL (fetab_smart_indent_line_or_selected_text (const QWidget*)),
+           f, SLOT (smart_indent_line_or_selected_text (const QWidget*)));
+
   connect (this,
            SIGNAL (fetab_convert_eol (const QWidget*, QsciScintilla::EolMode)),
            f, SLOT (convert_eol (const QWidget*, QsciScintilla::EolMode)));
 
   connect (this, SIGNAL (fetab_find (const QWidget*, QList<QAction *>)),
            f, SLOT (find (const QWidget*, QList<QAction *>)));
 
   connect (this, SIGNAL (fetab_find_next (const QWidget*)),
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -168,16 +168,17 @@ signals:
   void fetab_toggle_breakpoint (const QWidget *ID);
   void fetab_next_breakpoint (const QWidget *ID);
   void fetab_previous_breakpoint (const QWidget *ID);
   void fetab_remove_all_breakpoints (const QWidget *ID);
   void fetab_comment_selected_text (const QWidget *ID);
   void fetab_uncomment_selected_text (const QWidget *ID);
   void fetab_indent_selected_text (const QWidget *ID);
   void fetab_unindent_selected_text (const QWidget *ID);
+  void fetab_smart_indent_line_or_selected_text (const QWidget *ID);
   void fetab_convert_eol (const QWidget *ID, QsciScintilla::EolMode eol_mode);
   void fetab_find (const QWidget *ID, QList<QAction *>);
   void fetab_find_next (const QWidget *ID);
   void fetab_find_previous (const QWidget *ID);
   void fetab_goto_line (const QWidget *ID, int line = -1);
   void fetab_move_match_brace (const QWidget *ID, bool select);
   void fetab_completion (const QWidget*);
   void fetab_insert_debugger_pointer (const QWidget *ID, int line = -1);
@@ -246,16 +247,17 @@ public slots:
 
   void request_comment_selected_text (bool);
   void request_uncomment_selected_text (bool);
 
   void request_upper_case (bool);
   void request_lower_case (bool);
   void request_indent_selected_text (bool);
   void request_unindent_selected_text (bool);
+  void request_smart_indent_line_or_selected_text (void);
   void request_conv_eol_windows (bool);
   void request_conv_eol_unix (bool);
   void request_conv_eol_mac (bool);
 
   void request_find (bool);
   void request_find_next (bool);
   void request_find_previous (bool);
 
@@ -372,16 +374,17 @@ private:
   QAction *m_open_action;
 
   QAction *m_upper_case_action;
   QAction *m_lower_case_action;
   QAction *m_comment_selection_action;
   QAction *m_uncomment_selection_action;
   QAction *m_indent_selection_action;
   QAction *m_unindent_selection_action;
+  QAction *m_smart_indent_line_or_selection_action;
   QAction *m_conv_eol_windows_action;
   QAction *m_conv_eol_unix_action;
   QAction *m_conv_eol_mac_action;
 
   QAction *m_copy_action;
   QAction *m_cut_action;
   QAction *m_paste_action;
   QAction *m_selectall_action;
diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -553,17 +553,79 @@ octave_qscintilla::smart_indent (bool do
         {
           unindent (line+1);
           unindent (line);
           setCursorPosition (line+1,
                                          indentation (line));
         }
       return;
     }
+}
 
+// Do smart indendation of current selection or line.
+void
+octave_qscintilla::smart_indent_line_or_selected_text (int lineFrom, int lineTo)
+{
+  QRegExp blank_line_regexp = QRegExp ("^[\t ]*$");
+
+  QRegExp begin_block_regexp
+    = QRegExp ("^([\t ]*)(if|elseif|else"
+               "|for|while|do|parfor"
+               "|switch|case|otherwise"
+               "|function"
+               "|classdef|properties|events|enumeration|methods"
+               "|unwind_protect|unwind_protect_cleanup|try|catch)"
+               "[\r\n\t #%]");
+
+  QRegExp end_block_regexp
+    = QRegExp ("^([\t ]*)(end"
+               "|end(for|function|if|parfor|switch|while"
+               "|classdef|enumeration|events|methods|properties)"
+               "|end_(try_catch|unwind_protect)"
+               "|until)"
+               "[\r\n\t #%]");
+
+  int indent_column = -1;
+  int indent_increment = indentationWidth ();
+
+  for (int line = lineFrom-1; line >= 0; line--)
+    {
+      QString line_text = text (line);
+
+      if (blank_line_regexp.indexIn (line_text) < 0)
+        {
+          // Found first non-blank line above beginning of region or
+          // current line.  Base indentation from this line, increasing
+          // indentation by indentationWidth if it looks like the
+          // beginning of a code block.
+
+          indent_column = indentation (line);
+
+          if (begin_block_regexp.indexIn (line_text) > -1)
+            indent_column += indent_increment;
+
+          break;
+        }
+    }
+
+  if (indent_column < 0)
+    indent_column = indentation (lineFrom);
+
+  for (int line = lineFrom; line <= lineTo; line++)
+    {
+      QString line_text = text (line);
+
+      if (end_block_regexp.indexIn (line_text) > -1)
+        indent_column -= indent_increment;
+
+      setIndentation (line, indent_column);
+
+      if (begin_block_regexp.indexIn (line_text) > -1)
+        indent_column += indent_increment;
+    }
 }
 
 void
 octave_qscintilla::set_word_selection (const QString& word)
 {
   m_selection = word;
 
   if (word.isEmpty ())
diff --git a/libgui/src/m-editor/octave-qscintilla.h b/libgui/src/m-editor/octave-qscintilla.h
--- a/libgui/src/m-editor/octave-qscintilla.h
+++ b/libgui/src/m-editor/octave-qscintilla.h
@@ -58,16 +58,18 @@ public:
   bool get_actual_word (void);
   void clear_selection_markers (void);
   void get_current_position (int *pos, int *line, int *col);
   QString comment_string (void);
   int get_style (int pos = -1);
   int is_style_comment (int pos = -1);
   void smart_indent (bool do_smart_indent, int do_auto_close, int line);
 
+  void smart_indent_line_or_selected_text (int lineFrom, int lineTo);
+
   void set_word_selection (const QString& word = QString ());
 
   void show_selection_markers (int line, int col, int len);
 
   void set_selection_marker_color (const QColor& c);
 
 signals:
 
