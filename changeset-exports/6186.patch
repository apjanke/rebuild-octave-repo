# HG changeset patch
# User dbateman
# Date 1164744820 0
#      Tue Nov 28 20:13:40 2006 +0000
# Node ID 237a7f535bbc0fbdda882ae18da4bd8e2f6237cc
# Parent  da5a11b3d13e3a713161661e257f2b67ee0f57e7
[project @ 2006-11-28 20:13:39 by dbateman]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,14 @@
+2006-10-03  David Bateman  <dbateman@free.fr>
+
+	* configure.in: Check for sparse header files in the sparsesuite
+	sub-directory. In the cholmod tests, include the camd libraries, as
+	this might be a dependency for cholmod.
+
 2006-11-15  John W. Eaton  <jwe@octave.org>
 
 	* run-octave.in: Don't forget LD_PRELOAD if there are args.
 
 2006-11-14  John W. Eaton  <jwe@octave.org>
 
 	* configure.in: If warning message is printed, print additional
 	final note about missing libraries.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.546 $)
+AC_REVISION($Revision: 1.547 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 OCTAVE_HOST_TYPE
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
@@ -837,17 +837,17 @@ AC_SUBST(UMFPACK_LIBS)
 AC_ARG_WITH(umfpack,
   [AS_HELP_STRING([--without-umfpack],
      [don't use UMFPACK, disable some sparse functionality])],
   with_umfpack=$withval, with_umfpack=yes)
 
 warn_umfpack="UMFPACK not found.  This will result in some lack of functionality for sparse matrices."
 if test "$with_umfpack" = yes && test "$with_amd" = yes; then
   with_umfpack=no
-  AC_CHECK_HEADERS([ufsparse/umfpack.h umfpack/umfpack.h umfpack.h], [
+  AC_CHECK_HEADERS([sparsesuite/umfpack.h ufsparse/umfpack.h umfpack/umfpack.h umfpack.h], [
     AC_CHECK_LIB(umfpack, umfpack_zi_get_determinant, [
       UMFPACK_LIBS="-lumfpack"; with_umfpack=yes], [
         ## Invalidate the cache.
 	$as_unset ac_cv_lib_umfpack_umfpack_zi_get_determinant
 	AC_CHECK_LIB(umfpack, umfpack_zi_get_determinant, [
           UMFPACK_LIBS="-lumfpack"; with_umfpack=yes], [
 
 	  ## Invalidate the cache.
@@ -878,17 +878,17 @@ AC_SUBST(COLAMD_LIBS)
 AC_ARG_WITH(colamd,
   [AS_HELP_STRING([--without-colamd],
      [don't use COLAMD, disable some sparse functionality])],
   with_colamd=$withval, with_colamd=yes)
 
 warn_colamd="COLAMD not found. This will result in some lack of functionality for sparse matrices."
 if test "$with_colamd" = yes; then
   with_colamd=no
-  AC_CHECK_HEADERS([ufsparse/colamd.h colamd/colamd.h colamd.h], [
+  AC_CHECK_HEADERS([sparsesuite/colamd.h ufsparse/colamd.h colamd/colamd.h colamd.h], [
     AC_CHECK_LIB(colamd, colamd, [COLAMD_LIBS="-lcolamd"; with_colamd=yes])
     if test "$with_colamd" = yes; then
       AC_DEFINE(HAVE_COLAMD, 1, [Define if the COLAMD library is used.])
       TEXINFO_COLAMD="@set HAVE_COLAMD"
       warn_colamd=
     fi
     break])
 fi 
@@ -904,17 +904,17 @@ AC_SUBST(CCOLAMD_LIBS)
 AC_ARG_WITH(ccolamd,
   [AS_HELP_STRING([--without-ccolamd],
      [don't use CCOLAMD, disable some sparse functionality])],
   with_ccolamd=$withval, with_ccolamd=yes)
 
 warn_ccolamd="CCOLAMD not found. This will result in some lack of functionality for sparse matrices."
 if test "$with_ccolamd" = yes; then
   with_ccolamd=no
-  AC_CHECK_HEADERS([ufsparse/ccolamd.h ccolamd/ccolamd.h ccolamd.h], [
+  AC_CHECK_HEADERS([sparsesuite/ccolamd.h ufsparse/ccolamd.h ccolamd/ccolamd.h ccolamd.h], [
     AC_CHECK_LIB(ccolamd, ccolamd, [CCOLAMD_LIBS="-lccolamd"; with_ccolamd=yes])
     if test "$with_ccolamd" = yes; then
       AC_DEFINE(HAVE_CCOLAMD, 1, [Define if the CCOLAMD library is used.])
       warn_ccolamd=
     fi
     break])
 fi 
 if test -n "$warn_ccolamd"; then
@@ -928,37 +928,37 @@ AC_ARG_WITH(cholmod,
   [AS_HELP_STRING([--without-cholmod],
      [don't use CHOLMOD, disable some sparse functionality])],
   with_cholmod=$withval, with_cholmod=yes)
 
 warn_cholmod="CHOLMOD not found. This will result in some lack of functionality for sparse matrices."
 if test "$with_cholmod" = yes && test "$with_colamd" = yes &&
 	test "$with_ccolamd" = yes && test "$with_amd" = yes; then
   with_cholmod=no
-  AC_CHECK_HEADERS([ufsparse/cholmod.h cholmod/cholmod.h cholmod.h], [
-    AC_CHECK_HEADERS([ufsparse/metis.h metis/metis.h metis.h], [
+  AC_CHECK_HEADERS([sparsesuite/cholmod.h ufsparse/cholmod.h cholmod/cholmod.h cholmod.h], [
+    AC_CHECK_HEADERS([sparsesuite/metis.h ufsparse/metis.h metis/metis.h metis.h], [
       AC_CHECK_LIB(metis, METIS_NodeND, with_metis=yes, with_metis=no)
       break],
       with_metis=no)
 
     if test "$with_metis" = yes; then
       AC_DEFINE(HAVE_METIS, 1, [Define if the METIS library is used.])
       AC_CHECK_LIB(cholmod, cholmod_start, [CHOLMOD_LIBS="-lcholmod -lmetis"; 
 	with_cholmod=yes], [
         AC_CHECK_LIB(cholmod, cholmod_start, 
 	  [CHOLMOD_LIBS="-lcholmod -cblas -lmetis"; with_cholmod=yes], [],
-          $AMD_LIBS $COLAMD_LIBS $CCOLAMD_LIBS $BLAS_LIBS $FLIBS -lmetis)],
-	$AMD_LIBS $COLAMD_LIBS $CCOLAMD_LIBS $BLAS_LIBS $FLIBS -lmetis)
+          $CAMD_LIBS $AMD_LIBS $COLAMD_LIBS $CCOLAMD_LIBS $BLAS_LIBS $FLIBS -lmetis)],
+	$CAMD_LIBS $AMD_LIBS $COLAMD_LIBS $CCOLAMD_LIBS $BLAS_LIBS $FLIBS -lmetis)
     else
       AC_CHECK_LIB(cholmod, cholmod_start, [CHOLMOD_LIBS="-lcholmod"; 
 	with_cholmod=yes], [
         AC_CHECK_LIB(cholmod, cholmod_start, [CHOLMOD_LIBS="-lcholmod -cblas"; 
 	  with_cholmod=yes], [],
-          $AMD_LIBS $COLAMD_LIBS $CCOLAMD_LIBS $BLAS_LIBS $FLIBS)],
-	$AMD_LIBS $COLAMD_LIBS $CCOLAMD_LIBS $BLAS_LIBS $FLIBS)
+          $CAMD_LIBS $AMD_LIBS $COLAMD_LIBS $CCOLAMD_LIBS $BLAS_LIBS $FLIBS)],
+	$CAMD_LIBS $AMD_LIBS $COLAMD_LIBS $CCOLAMD_LIBS $BLAS_LIBS $FLIBS)
     fi
 
     if test "$with_cholmod" = yes; then
       AC_DEFINE(HAVE_CHOLMOD, 1, [Define if the CHOLMOD library is used.])
       TEXINFO_CHOLMOD="@set HAVE_CHOLMOD"
       warn_cholmod=
     fi
     break])
@@ -975,17 +975,17 @@ AC_SUBST(CXSPARSE_LIBS)
 AC_ARG_WITH(cxsparse,
   [AS_HELP_STRING([--without-cxsparse],
      [don't use CXSparse, disable some sparse functionality])],
   with_cxsparse=$withval, with_cxsparse=yes)
 
 warn_cxsparse="CXSparse not found. This will result in some lack of functionality for sparse matrices."
 if test "$with_cxsparse" = yes; then
   with_cxsparse=no
-  AC_CHECK_HEADERS([ufsparse/cs.h cxsparse/cs.h cs.h], [
+  AC_CHECK_HEADERS([sparsesuite/cs.h ufsparse/cs.h cxsparse/cs.h cs.h], [
     AC_CHECK_LIB(cxsparse, cs_di_sqr, [CXSPARSE_LIBS="-lcxsparse"; with_cxsparse=yes])
     if test "$with_cxsparse" = yes; then
       AC_DEFINE(HAVE_CXSPARSE, 1, [Define if the CXSparse library is used.])
       warn_cxsparse=
     fi
     break])
 fi
 if test -n "$warn_cxsparse"; then
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2006-11-22  David Bateman  <dbateman@free.fr>
+
+	* oct-sparse.h: Allow sparse headers to also be in a sparsesuite
+	sub-directory.
+
 2006-11-22  David Bateman  <dbateman@free.fr>
 
         * dSparse.cc (SparseMatrix SparseMatrix::inverse(...)): Transpose
 	the matrix type as well when calling tinverse for lower
 	triangular
 	matrices
         * CSparse.cc (SparseComplexMatrix SparseComplexMatrix::inverse(...)):
         ditto.
diff --git a/liboctave/oct-sparse.h b/liboctave/oct-sparse.h
--- a/liboctave/oct-sparse.h
+++ b/liboctave/oct-sparse.h
@@ -27,65 +27,78 @@ 02110-1301, USA.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
-#if defined (HAVE_UFSPARSE_UMFPACK_H)
+#if defined (HAVE_SPARSESUITE_UMFPACK_H)
+#include <sparsesuite/umfpack.h>
+#elif defined (HAVE_UFSPARSE_UMFPACK_H)
 #include <ufsparse/umfpack.h>
 #elif defined (HAVE_UMFPACK_UMFPACK_H)
 #include <umfpack/umfpack.h>
 #elif defined (HAVE_UMFPACK_H)
 #include <umfpack.h>
 #endif
 
-#if defined (HAVE_UFSPARSE_COLAMD_H)
+#if defined (HAVE_SPARSESUITE_COLAMD_H)
+#include <sparsesuite/colamd.h>
+#elif defined (HAVE_UFSPARSE_COLAMD_H)
 #include <ufsparse/colamd.h>
 #elif defined (HAVE_COLAMD_COLAMD_H)
 #include <colamd/colamd.h>
 #elif defined (HAVE_COLAMD_H)
 #include <colamd.h>
 #endif
 
-#if defined (HAVE_UFSPARSE_CCOLAMD_H)
+#if defined (HAVE_SPARSESUITE_CCOLAMD_H)
+#include <sparsesuite/ccolamd.h>
+#elif defined (HAVE_UFSPARSE_CCOLAMD_H)
 #include <ufsparse/ccolamd.h>
 #elif defined (HAVE_CCOLAMD_CCOLAMD_H)
 #include <ccolamd/ccolamd.h>
 #elif defined (HAVE_CCOLAMD_H)
 #include <ccolamd.h>
 #endif
 
-#if defined (HAVE_UFSPARSE_METIS_H)
+#if defined (HAVE_SPARSESUITE_METIS_H)
+#include <sparsesuite/metis.h>
+#elif defined (HAVE_UFSPARSE_METIS_H)
 #include <ufsparse/metis.h>
 #elif defined (HAVE_METIS_METIS_H)
 #include <metis/metis.h>
 #elif defined (HAVE_METIS_H)
 #include <metis.h>
 #endif
 
-#if defined (HAVE_UFSPARSE_CHOLMOD_H)
+#if defined (HAVE_SPARSESUITE_CHOLMOD_H)
+#include <sparsesuite/cholmod.h>
+#elif defined (HAVE_UFSPARSE_CHOLMOD_H)
 #include <ufsparse/cholmod.h>
 #elif defined (HAVE_UMFPACK_CHOLMOD_H)
 #include <cholmod/cholmod.h>
 #elif defined (HAVE_CHOLMOD_H)
 #include <cholmod.h>
 #endif
 
-#if defined (HAVE_UFSPARSE_CS_H)
+#if defined (HAVE_SPARSESUITE_CS_H)
+#include <sparsesuite/cs.h>
+#elif defined (HAVE_UFSPARSE_CS_H)
 #include <ufsparse/cs.h>
 #elif defined (HAVE_CXSPARSE_CS_H)
 #include <cxsparse/cs.h>
 #elif defined (HAVE_CS_H)
 #include <cs.h>
 #endif
 
-#if (defined (HAVE_UFSPARSE_CHOLMOD_H) \
+#if (defined (HAVE_SPARSESUITE_CHOLMOD_H) \
+     || defined (HAVE_UFSPARSE_CHOLMOD_H) \
      || defined (HAVE_UMFPACK_CHOLMOD_H) \
      || defined (HAVE_CHOLMOD_H))
 #ifdef IDX_TYPE_LONG
 #define CHOLMOD_NAME(name) cholmod_l_ ## name
 #else
 #define CHOLMOD_NAME(name) cholmod_ ## name
 #endif
 #endif
