# HG changeset patch
# User Rik <rik@octave.org>
# Date 1444691292 25200
#      Mon Oct 12 16:08:12 2015 -0700
# Node ID d35201e5ce5d112889c407683732665c4f06826a
# Parent  27c091f4b66dc3d462eb18c947d4d752254a40f4
Fix compilation of jit broken by dd6345fd8a97 (bug #46191).

* jit-typeinfo.cc (octave_jit_compute_nelem): Use rng.numel() rather than
deprecated nelem().
* jit-typeinfo.cc (octave_jit_ginvalid_index): Call gripe_invalid_index (-1)
now that 0-argument form of function has been removed.

* jit-typeinfo.h (jit_range): Use numel() rather than nelem() for Range.

* pt-jit.cc (trip_count): Use numel() rather than nelem() for Range.

diff --git a/libinterp/corefcn/jit-typeinfo.cc b/libinterp/corefcn/jit-typeinfo.cc
--- a/libinterp/corefcn/jit-typeinfo.cc
+++ b/libinterp/corefcn/jit-typeinfo.cc
@@ -110,17 +110,17 @@ octave_jit_binary_any_any (octave_value:
   rep->grab ();
   return rep;
 }
 
 extern "C" octave_idx_type
 octave_jit_compute_nelem (double base, double limit, double inc)
 {
   Range rng = Range (base, limit, inc);
-  return rng.nelem ();
+  return rng.numel ();
 }
 
 extern "C" void
 octave_jit_release_any (octave_base_value *obv)
 {
   obv->release ();
 }
 
@@ -216,17 +216,19 @@ extern "C" void
 octave_jit_gripe_nan_to_logical_conversion (void)
 {
   gripe_nan_to_logical_conversion ();
 }
 
 extern "C" void
 octave_jit_ginvalid_index (void)
 {
-  gripe_invalid_index ();
+  // FIXME: 0-argument form of gripe_invalid_index removed in cset dd6345fd8a97 
+  //        Report -1 as the bad index for all occurrences.
+  gripe_invalid_index (-1);
 }
 
 extern "C" void
 octave_jit_gindex_range (int nd, int dim, octave_idx_type iext,
                          octave_idx_type ext)
 {
   gripe_index_out_of_range (nd, dim, iext, ext);
 }
diff --git a/libinterp/corefcn/jit-typeinfo.h b/libinterp/corefcn/jit-typeinfo.h
--- a/libinterp/corefcn/jit-typeinfo.h
+++ b/libinterp/corefcn/jit-typeinfo.h
@@ -40,17 +40,17 @@ along with Octave; see the file COPYING.
 // Operations are defined and implemented in jit_typeinfo.  Eventually they
 // should be moved elsewhere. (just like with octave_typeinfo)
 
 // jit_range is compatible with the llvm range structure
 struct
 jit_range
 {
   jit_range (const Range& from) : base (from.base ()), limit (from.limit ()),
-                                  inc (from.inc ()), nelem (from.nelem ())
+                                  inc (from.inc ()), nelem (from.numel ())
   { }
 
   operator Range () const
   {
     return Range (base, limit, inc);
   }
 
   bool all_elements_are_ints () const;
diff --git a/libinterp/corefcn/pt-jit.cc b/libinterp/corefcn/pt-jit.cc
--- a/libinterp/corefcn/pt-jit.cc
+++ b/libinterp/corefcn/pt-jit.cc
@@ -2165,17 +2165,17 @@ tree_jit::enabled (void)
 }
 
 size_t
 tree_jit::trip_count (const octave_value& bounds) const
 {
   if (bounds.is_range ())
     {
       Range rng = bounds.range_value ();
-      return rng.nelem ();
+      return rng.numel ();
     }
 
   // unsupported type
   return 0;
 }
 
 
 void
