# HG changeset patch
# User jwe
# Date 791848654 0
#      Fri Feb 03 21:57:34 1995 +0000
# Node ID 51fd9e40a7f78b658c6a222ce7eb38ec7bf1fa18
# Parent  2e10146f7f72a069db5516790e62a650650a47f8
[project @ 1995-02-03 21:57:34 by jwe]

diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -1935,18 +1935,22 @@ tree_simple_assignment_expression::eval 
   if (error_state)
     return retval;
 
   if (rhs)
     {
       tree_constant rhs_val = rhs->eval (0);
       if (error_state)
 	{
-	  if (error_state)
-	    eval_error ();
+	  eval_error ();
+	}
+      else if (rhs_val.is_undefined ())
+	{
+	  error ("value on right hand side of assignment is undefined");
+	  eval_error ();
 	}
       else if (! index)
 	{
 	  retval = lhs->assign (rhs_val);
 	  if (error_state)
 	    eval_error ();
 	}
       else
@@ -2107,18 +2111,19 @@ tree_multi_assignment_expression::eval (
 	  if (i < nargout)
 	    {
 // XXX FIXME? XXX -- this is apparently the way Matlab works, but
 // maybe we should have the option of skipping the assignment instead.
 
 	      tree_constant *tmp = 0;
 	      if (results(i).is_undefined ())
 		{
-		  Matrix m;
-		  tmp = new tree_constant (m);
+		  error ("element number %d undefined in return list", i+1);
+		  eval_error ();
+		  break;
 		}
 	      else
 		tmp = new tree_constant (results(i));
 
 	      tree_simple_assignment_expression tmp_expr
 		(lhs_expr, tmp, 1, 0, ma_line, ma_column);
 
 	      results(i) = tmp_expr.eval (0); // May change
@@ -2803,17 +2808,26 @@ tree_function::eval (int print, int narg
       {
 	traceback_error ();
 	goto abort;
       }
     
 // Copy return values out.
 
     if (ret_list)
-      retval = ret_list->convert_to_const_vector (vr_list);
+      {
+	if (nargout > 0 && user_pref.define_all_return_values)
+	  {
+	    tree_constant tmp = builtin_any_variable ("default_return_value");
+	    if (tmp.is_defined ())
+	      ret_list->initialize_undefined_elements (tmp);
+	  }
+
+	retval = ret_list->convert_to_const_vector (vr_list);
+      }
     else if (user_pref.return_last_computed_value)
       retval(0) = last_computed_value;
   }
 
  abort:
   run_unwind_frame ("func_eval");
 
   return retval;
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -290,16 +290,27 @@ tree_parameter_list::mark_as_formal_para
   for (Pix p = first (); p != 0; next (p))
     {
       tree_identifier *elt = this->operator () (p);
       elt->mark_as_formal_parameter ();
     }
 }
 
 void
+tree_parameter_list::initialize_undefined_elements (const tree_constant& val)
+{
+  for (Pix p = first (); p != 0; next (p))
+    {
+      tree_identifier *elt = this->operator () (p);
+      if (! elt->is_defined ())
+	elt->assign (val);
+    }
+}
+
+void
 tree_parameter_list::define_from_arg_vector (const Octave_object& args)
 {
   int nargin = args.length ();
 
   if (nargin <= 0)
     return;
 
   int expected_nargin = length ();
diff --git a/src/pt-misc.h b/src/pt-misc.h
--- a/src/pt-misc.h
+++ b/src/pt-misc.h
@@ -178,16 +178,18 @@ public:
     { return marked_for_varargs; }
 
   void mark_varargs_only (void)
     { marked_for_varargs = -1; }
 
   int varargs_only (void)
     { return (marked_for_varargs < 0); }
 
+  void initialize_undefined_elements (const tree_constant& val);
+
   void define_from_arg_vector (const Octave_object& args);
 
   int is_defined (void);
 
   Octave_object convert_to_const_vector (tree_va_return_list *vr_list);
 
   void print_code (ostream& os);
 
diff --git a/src/user-prefs.cc b/src/user-prefs.cc
--- a/src/user-prefs.cc
+++ b/src/user-prefs.cc
@@ -39,17 +39,17 @@ Software Foundation, 675 Mass Ave, Cambr
 user_preferences user_pref;
 
 // Initialize global user_pref structure.
 
 void
 init_user_prefs (void)
 {
   user_pref.automatic_replot = 0;
-  user_pref.whitespace_in_literal_matrix = 0;
+  user_pref.define_all_return_values = 0;
   user_pref.do_fortran_indexing = 0;
   user_pref.empty_list_elements_ok = 0;
   user_pref.ignore_function_time_stamp = 0;
   user_pref.implicit_str_to_num_ok = 0;
   user_pref.ok_to_lose_imaginary_part = 0;
   user_pref.output_max_field_width = 0;
   user_pref.output_precision = 0;
   user_pref.page_screen_output = 0;
@@ -64,16 +64,17 @@ init_user_prefs (void)
   user_pref.save_precision = 0;
   user_pref.silent_functions = 0;
   user_pref.split_long_rows = 0;
   user_pref.treat_neg_dim_as_zero = 0;
   user_pref.warn_assign_as_truth_value = 0;
   user_pref.warn_comma_in_global_decl = 0;
   user_pref.warn_divide_by_zero = 0;
   user_pref.warn_function_name_clash = 0;
+  user_pref.whitespace_in_literal_matrix = 0;
 
   user_pref.default_save_format = 0;
   user_pref.editor = 0;
   user_pref.gnuplot_binary = 0;
   user_pref.imagepath = 0;
   user_pref.info_file = 0;
   user_pref.loadpath = 0;
   user_pref.pager_binary = 0;
@@ -115,69 +116,25 @@ int
 automatic_replot (void)
 {
   user_pref.automatic_replot = check_str_pref ("automatic_replot");
 
   return 0;
 }
 
 
-// Should whitespace in a literal matrix list be automatically
-// converted to commas and semicolons?
-//
-//   user specifies   value of pref
-//   --------------   -------------
-//   "ignore"               2
-//   "traditional"          1
-//   anything else          0
-//
-// Octave will never insert a comma in a literal matrix list if the
-// user specifies "ignore".  For example, the statement [1 2] will
-// result in an error instead of being treated the same as [1, 2], and
-// the statement
-//
-//   [ 1, 2,
-//     3, 4 ]
-//
-// will result in the vector [1 2 3 4] instead of a matrix.
-//
-// Traditional behavior makes Octave convert spaces to a comma between
-// identifiers and `('.  For example, the statement
-//
-//   [eye (2)]
-//
-// will be parsed as
-//
-//   [eye, (2)]
-//
-// and will result in an error since the `eye' function will be
-// called with no arguments.  To get around this, you would have to
-// omit the space between `eye' and the `('.
-//
-// The default value is 0, which results in behavior that is the same
-// as traditional, except that Octave does not convert spaces to a
-// comma between identifiers and `('.  For example, the statement
-//
-//   [eye (2)]
-//
-// will result in a call to `eye' with the argument `2'. 
+// Should variables returned from functions have default values if
+// they are otherwise uninitialized?
 
 int
-whitespace_in_literal_matrix (void)
+define_all_return_values (void)
 {
-  int pref = 0;
-  char *val = builtin_string_variable ("whitespace_in_literal_matrix");
-  if (val)
-    {
-      if (strncmp (val, "ignore", 6) == 0)
-	pref = 2;
-      else if (strncmp (val, "traditional", 11) == 0)
-	pref = 1;
-    }
-  user_pref.whitespace_in_literal_matrix = pref;
+  user_pref.define_all_return_values =
+    check_str_pref ("define_all_return_values");
+
   return 0;
 }
 
 
 // Should we allow assignments like:
 //
 //   octave> A(1) = 3; A(2) = 5
 //
@@ -471,16 +428,74 @@ int
 warn_function_name_clash (void)
 {
   user_pref.warn_function_name_clash =
     check_str_pref ("warn_function_name_clash");
 
   return 0;
 }
 
+
+// Should whitespace in a literal matrix list be automatically
+// converted to commas and semicolons?
+//
+//   user specifies   value of pref
+//   --------------   -------------
+//   "ignore"               2
+//   "traditional"          1
+//   anything else          0
+//
+// Octave will never insert a comma in a literal matrix list if the
+// user specifies "ignore".  For example, the statement [1 2] will
+// result in an error instead of being treated the same as [1, 2], and
+// the statement
+//
+//   [ 1, 2,
+//     3, 4 ]
+//
+// will result in the vector [1 2 3 4] instead of a matrix.
+//
+// Traditional behavior makes Octave convert spaces to a comma between
+// identifiers and `('.  For example, the statement
+//
+//   [eye (2)]
+//
+// will be parsed as
+//
+//   [eye, (2)]
+//
+// and will result in an error since the `eye' function will be
+// called with no arguments.  To get around this, you would have to
+// omit the space between `eye' and the `('.
+//
+// The default value is 0, which results in behavior that is the same
+// as traditional, except that Octave does not convert spaces to a
+// comma between identifiers and `('.  For example, the statement
+//
+//   [eye (2)]
+//
+// will result in a call to `eye' with the argument `2'. 
+
+int
+whitespace_in_literal_matrix (void)
+{
+  int pref = 0;
+  char *val = builtin_string_variable ("whitespace_in_literal_matrix");
+  if (val)
+    {
+      if (strncmp (val, "ignore", 6) == 0)
+	pref = 2;
+      else if (strncmp (val, "traditional", 11) == 0)
+	pref = 1;
+    }
+  user_pref.whitespace_in_literal_matrix = pref;
+  return 0;
+}
+
+
 int
 set_output_max_field_width (void)
 {
   int status = 0;
 
   static int kludge = 0;
 
   double val;
diff --git a/src/user-prefs.h b/src/user-prefs.h
--- a/src/user-prefs.h
+++ b/src/user-prefs.h
@@ -22,17 +22,17 @@ Software Foundation, 675 Mass Ave, Cambr
 */
 
 #if !defined (octave_user_prefs_h)
 #define octave_user_prefs_h 1
 
 struct user_preferences
 {
   int automatic_replot;
-  int whitespace_in_literal_matrix;
+  int define_all_return_values;
   int do_fortran_indexing;
   int empty_list_elements_ok;
   int ignore_function_time_stamp;
   int implicit_str_to_num_ok;
   int ok_to_lose_imaginary_part;
   int output_max_field_width;
   int output_precision;
   int page_screen_output;
@@ -47,16 +47,17 @@ struct user_preferences
   int save_precision;
   int silent_functions;
   int split_long_rows;
   int treat_neg_dim_as_zero;
   int warn_assign_as_truth_value;
   int warn_comma_in_global_decl;
   int warn_divide_by_zero;
   int warn_function_name_clash;
+  int whitespace_in_literal_matrix;
 
   char *default_save_format;
   char *editor;
   char *gnuplot_binary;
   char *imagepath;
   char *info_file;
   char *loadpath;
   char *pager_binary;
@@ -66,17 +67,17 @@ struct user_preferences
   char *pwd;
 };
 
 extern user_preferences user_pref;
 
 extern void init_user_prefs (void);
 
 extern int automatic_replot (void);
-extern int whitespace_in_literal_matrix (void);
+extern int define_all_return_values (void);
 extern int do_fortran_indexing (void);
 extern int empty_list_elements_ok (void);
 extern int ignore_function_time_stamp (void);
 extern int implicit_str_to_num_ok (void);
 extern int ok_to_lose_imaginary_part (void);
 extern int page_screen_output (void);
 extern int prefer_column_vectors (void);
 extern int prefer_zero_one_indexing (void);
@@ -88,16 +89,17 @@ extern int resize_on_range_error (void);
 extern int return_last_computed_value (void);
 extern int silent_functions (void);
 extern int split_long_rows (void);
 extern int treat_neg_dim_as_zero (void);
 extern int warn_assign_as_truth_value (void);
 extern int warn_comma_in_global_decl (void);
 extern int warn_divide_by_zero (void);
 extern int warn_function_name_clash (void);
+extern int whitespace_in_literal_matrix (void);
 
 extern int set_output_max_field_width (void);
 extern int set_output_precision (void);
 extern int set_save_precision (void);
 
 extern int sv_default_save_format (void);
 extern int sv_editor (void);
 extern int sv_gnuplot_binary (void);
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -852,16 +852,37 @@ builtin_real_scalar_variable (const char
 	  d = val.double_value ();
 	  status = 0;
 	}
     }
 
   return status;
 }
 
+// Look for the given name in the global symbol table.
+
+tree_constant
+builtin_any_variable (const char *name)
+{
+  tree_constant retval;
+
+  symbol_record *sr = global_sym_tab->lookup (name, 0, 0);
+
+// It is a prorgramming error to look for builtins that aren't.
+
+  assert (sr);
+
+  tree_fvc *defn = sr->def ();
+
+  if (defn)
+    retval = defn->eval (0);
+
+  return retval;
+}
+
 // Global stuff and links to builtin variables and functions.
 
 // Make the definition of the symbol record sr be the same as the
 // definition of the global variable of the same name, creating it if
 // it doesn't already exist. 
 
 void
 link_to_global_variable (symbol_record *sr)
@@ -1479,19 +1500,21 @@ install_builtin_variables (void)
 
   DEFVAR ("ans", SBV_ans, , 0, 0, 1, 0,
     "");
 
   DEFVAR ("automatic_replot", SBV_automatic_replot, "false",
 	  0, 0, 1, automatic_replot,
     "if true, auto-insert a replot command when a plot changes");
 
-  DEFVAR ("whitespace_in_literal_matrix", SBV_whitespace_in_literal_matrix, "",
-	  0, 0, 1, whitespace_in_literal_matrix,
-    "control auto-insertion of commas and semicolons in literal matrices");
+  DEFVAR ("default_return_value", SBV_default_return_value, Matrix (),
+	  0, 0, 1, 0,
+    "the default for value for unitialized variables returned from\n\
+functions.  Only used if the variable initialize_return_values is\n\
+set to \"true\".");
 
   DEFVAR ("default_save_format", SBV_default_save_format, "ascii",
 	  0, 0, 1, sv_default_save_format,
     "default format for files created with save, may be one of\n\
 \"binary\", \"text\", or \"mat-binary\""); 
 
   DEFVAR ("do_fortran_indexing", SBV_do_fortran_indexing, "false", 0, 0,
 	  1, do_fortran_indexing,
@@ -1519,16 +1542,22 @@ install_builtin_variables (void)
 
   DEFVAR ("implicit_str_to_num_ok", SBV_implicit_str_to_num_ok, "false",
 	  0, 0, 1, implicit_str_to_num_ok,
     "allow implicit string to number conversion");
 
   DEFVAR ("inf", SBV_inf, octave_Inf, 0, 1, 1, 0,
     "infinity");
 
+  DEFVAR ("define_all_return_values", SBV_define_all_return_values,
+	  "false", 0, 0, 1, define_all_return_values,
+    "control whether values returned from functions should have a\n\
+value even if one has not been explicitly assigned.  See also\n\
+default_return_value"); 
+
   DEFVAR ("j", SBV_j, Complex (0.0, 1.0), 1, 1, 1, 0,
     "sqrt (-1)");
 
   #if defined (HAVE_ISNAN)
   DEFVAR ("nan", SBV_nan, octave_NaN, 0, 1, 1, 0,
     "not a number");
   #endif
 
@@ -1629,16 +1658,21 @@ install_builtin_variables (void)
 
   DEFVAR ("warn_divide_by_zero", SBV_warn_divide_by_zero, "true", 0, 0,
 	  1, warn_divide_by_zero,
     "on IEEE machines, allow divide by zero errors to be suppressed");
 
   DEFVAR ("warn_function_name_clash", SBV_warn_function_name_clash,
 	  "true", 0, 0, 1, warn_function_name_clash,
     "produce warning if function name conflicts with file name");
+
+  DEFVAR ("whitespace_in_literal_matrix", SBV_whitespace_in_literal_matrix, "",
+	  0, 0, 1, whitespace_in_literal_matrix,
+    "control auto-insertion of commas and semicolons in literal matrices");
+
 }
 
 // Deleting names from the symbol tables.
 
 DEFUN_TEXT ("clear", Fclear, Sclear, -1, 1,
   "clear [-x] [name ...]\n\
 \n\
 Clear symbol(s) matching a list of globbing patterns.\n\
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -67,16 +67,17 @@ extern void initialize_symbol_tables (vo
 extern int lookup (symbol_record *s, int exec_script = 1);
 
 extern symbol_record *lookup_by_name (const char *nm, int exec_script = 1);
 
 extern char *get_help_from_file (const char *f);
 
 extern char *builtin_string_variable (const char *);
 extern int builtin_real_scalar_variable (const char *, double&);
+extern tree_constant builtin_any_variable (const char *);
 
 extern void link_to_global_variable (symbol_record *sr);
 extern void link_to_builtin_variable (symbol_record *sr);
 extern void link_to_builtin_or_function (symbol_record *sr);
 
 extern void force_link_to_function (const char *s);
 
 extern int is_builtin_variable (const char *name);
