# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1206583782 14400
#      Wed Mar 26 22:09:42 2008 -0400
# Node ID 443a8f5a50fd9bec4afef1a5708ce28d1d5a9d8f
# Parent  eb7bdde776f224d646e2800bacd3c8551e43d3a8
require both subsref variants to be defined in octave_value subclasses

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,48 @@
 2008-03-26  John W. Eaton  <jwe@octave.org>
 
+	* ov-range.h (octave_range::subsref (const std::string&,
+	const std::list<octave_value_list>&, int)):
+	Forward to simple subsref.
+	* ov-base-sparse.h (octave_base_sparse<T>::subsref (const std::string&,
+	const std::list<octave_value_list>&, int)): Likewise.
+	* ov-base-scalar.h (octave_base_sparse<T>::subsref (const std::string&,
+	const std::list<octave_value_list>&, int)): Likewise.
+	* ov-base-matrix.h (octave_base_matrix<T>::subsref (const std::string&,
+	const std::list<octave_value_list>&, int)): Likewise.
+
+	* ov-struct.cc, ov-cell.h (octave_cell::subsref (const
+	std::string&, const std::list<octave_value_list>&, int)):
+	Define nargout version of subsref instead of simple version.
+	* ov-struct.cc, ov-struct.h (octave_struct::subsref (const
+	std::string&, const std::list<octave_value_list>&, int)):
+	Define nargout version of subsref instead of simple version.
+
+	* ov-builtin.h (octave_builtin::subsref (const std::string&,
+	const std::list<octave_value_list>&): Forward to nargout subsref.
+	* ov-cell.h (octave_cell::subsref (const std::string&,
+	const std::list<octave_value_list>&)):
+	* ov-class.h (octave_class::subsref (const std::string&,
+	const std::list<octave_value_list>&): Likewise.
+	* ov-fcn-handle.h (octave_fcn_handle::subsref (const std::string&,
+	const std::list<octave_value_list>&): Likewise.
+	* ov-list.h (octave_list::subsref (const std::string&,
+	const std::list<octave_value_list>&): Likewise.
+	* ov-mex-fcn.h (octave_mex_function::subsref (const std::string&,
+	const std::list<octave_value_list>&): Likewise.
+	* ov-struct.h (octave_struct::subsref (const std::string&,
+	const std::list<octave_value_list>&)):
+	* ov-usr-fcn.h (octave_user_function::subsref (const std::string&,
+	const std::list<octave_value_list>&): Likewise.
+
+	* ov.cc (octave_value::subsref): Use value of nargout instead of
+	is_constant method to decide which type of subsref method to call.
+	(octave_value::assign): Always call simple subref method here.
+
 	* DLD-FUNCTIONS/chol.cc, DLD-FUNCTIONS/det.cc,
 	DLD-FUNCTIONS/getpwent.cc, DLD-FUNCTIONS/inv.cc,
 	DLD-FUNCTIONS/qr.cc, DLD-FUNCTIONS/symrcm.cc, file-io.cc):
 	Texinfo fixes.
 
 2008-03-26  Soren Hauberg  <hauberg@gmail.com>
 
 	* DLD-FUNCTIONS/__convn__.cc (Fconvn):
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -70,22 +70,19 @@ public:
 
   size_t byte_size (void) const { return matrix.byte_size (); }
 
   octave_value squeeze (void) const { return MT (matrix.squeeze ()); }
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
-  octave_value_list subsref (const std::string&,
-			     const std::list<octave_value_list>&, int)
-    {
-      panic_impossible ();
-      return octave_value_list ();
-    }
+  octave_value_list subsref (const std::string& type,
+			     const std::list<octave_value_list>& idx, int)
+    { return subsref (type, idx); }
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   octave_value do_index_op (const octave_value_list& idx,
 			    bool resize_ok = false);
 
diff --git a/src/ov-base-scalar.h b/src/ov-base-scalar.h
--- a/src/ov-base-scalar.h
+++ b/src/ov-base-scalar.h
@@ -60,22 +60,19 @@ public:
   octave_base_value *clone (void) const { return new octave_base_scalar (*this); }
   octave_base_value *empty_clone (void) const { return new octave_base_scalar (); }
 
   octave_value squeeze (void) const { return scalar; }
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
-  octave_value_list subsref (const std::string&,
-			     const std::list<octave_value_list>&, int)
-    {
-      panic_impossible ();
-      return octave_value_list ();
-    }
+  octave_value_list subsref (const std::string& type,
+			     const std::list<octave_value_list>& idx, int)
+    { return subsref (type, idx); }
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   bool is_constant (void) const { return true; }
 
   bool is_defined (void) const { return true; }
diff --git a/src/ov-base-sparse.h b/src/ov-base-sparse.h
--- a/src/ov-base-sparse.h
+++ b/src/ov-base-sparse.h
@@ -82,22 +82,19 @@ octave_base_sparse : public octave_base_
 
   size_t byte_size (void) const { return matrix.byte_size (); }
 
   octave_value squeeze (void) const { return matrix.squeeze (); }
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
-  octave_value_list subsref (const std::string&,
-			     const std::list<octave_value_list>&, int)
-    {
-      panic_impossible ();
-      return octave_value_list ();
-    }
+  octave_value_list subsref (const std::string& type,
+			     const std::list<octave_value_list>& idx, int)
+    { return subsref (type, idx); }
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   void assign (const octave_value_list& idx, const T& rhs);
 
   dim_vector dims (void) const { return matrix.dims (); }
diff --git a/src/ov-builtin.h b/src/ov-builtin.h
--- a/src/ov-builtin.h
+++ b/src/ov-builtin.h
@@ -45,21 +45,21 @@ public:
   typedef octave_value_list (*fcn) (const octave_value_list&, int);
 
   octave_builtin (fcn ff, const std::string& nm = std::string (),
 		  const std::string& ds = std::string ())
     : octave_function (nm, ds), f (ff) { }
 
   ~octave_builtin (void) { }
 
-  octave_value subsref (const std::string&,
-			const std::list<octave_value_list>&)
+  octave_value subsref (const std::string& type,
+			const std::list<octave_value_list>& idx)
     {
-      panic_impossible ();
-      return octave_value ();
+      octave_value_list tmp = subsref (type, idx, 1);
+      return tmp.length () > 0 ? tmp(0) : octave_value ();
     }
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     int nargout);
 
   octave_function *function_value (bool = false) { return this; }
 
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -60,51 +60,52 @@ DEFINE_OCTAVE_ALLOCATOR (octave_cell);
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_cell, "cell", "cell");
 
 static void
 gripe_failed_assignment (void)
 {
   error ("assignment to cell array failed");
 }
 
-octave_value
+octave_value_list
 octave_cell::subsref (const std::string& type,
-		      const std::list<octave_value_list>& idx)
+		      const std::list<octave_value_list>& idx,
+		      int nargout)
 {
-  octave_value retval;
+  octave_value_list retval;
 
   switch (type[0])
     {
     case '(':
-      retval = do_index_op (idx.front ());
+      retval(0) = do_index_op (idx.front ());
       break;
 
     case '{':
       {
 	octave_value tmp = do_index_op (idx.front ());
 
 	if (! error_state)
 	  {
 	    Cell tcell = tmp.cell_value ();
 
 	    if (tcell.length () == 1)
-	      retval = tcell(0,0);
+	      retval(0) = tcell(0,0);
 	    else
 	      {
 		octave_idx_type n = tcell.numel ();
 
 		octave_value_list lst (n, octave_value ());
 
 		for (octave_idx_type i = 0; i < n; i++)
 		  {
 		    OCTAVE_QUIT;
 		    lst(i) = tcell(i);
 		  }
 
-		retval = octave_value (lst, true);
+		retval(0) = octave_value (lst, true);
 	      }
 	  }
       }
       break;
 
     case '.':
       {
 	std::string nm = type_name ();
@@ -116,17 +117,17 @@ octave_cell::subsref (const std::string&
       panic_impossible ();
     }
 
   // FIXME -- perhaps there should be an
   // octave_value_list::next_subsref member function?  See also
   // octave_user_function::subsref.
 
   if (idx.size () > 1)
-    retval = retval.next_subsref (type, idx);
+    retval = retval(0).next_subsref (nargout, type, idx);
 
   return retval;
 }
 
 octave_value
 octave_cell::subsasgn (const std::string& type,
 		       const std::list<octave_value_list>& idx,
 		       const octave_value& rhs)
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -65,25 +65,25 @@ public:
 
   octave_base_value *clone (void) const { return new octave_cell (*this); }
   octave_base_value *empty_clone (void) const { return new octave_cell (); }
 
 #if 0
   octave_base_value *try_narrowing_conversion (void);
 #endif
 
-  octave_value subsref (const std::string&,
-			const std::list<octave_value_list>&);
+  octave_value subsref (const std::string& type,
+			const std::list<octave_value_list>& idx)
+    {
+      octave_value_list tmp = subsref (type, idx, 1);
+      return tmp.length () > 0 ? tmp(0) : octave_value ();
+    }
 
-  octave_value_list subsref (const std::string&,
-			     const std::list<octave_value_list>&, int)
-    {
-      panic_impossible ();
-      return octave_value_list ();
-    }
+  octave_value_list subsref (const std::string& type,
+			     const std::list<octave_value_list>& idx, int);
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   size_t byte_size (void) const;
 
   bool is_matrix_type (void) const { return false; }
diff --git a/src/ov-class.h b/src/ov-class.h
--- a/src/ov-class.h
+++ b/src/ov-class.h
@@ -59,21 +59,21 @@ public:
 
   ~octave_class (void) { }
 
   octave_base_value *clone (void) const { return new octave_class (*this); }
   octave_base_value *empty_clone (void) const { return new octave_class (); }
 
   Cell dotref (const octave_value_list& idx);
 
-  octave_value subsref (const std::string&,
-			const std::list<octave_value_list>&)
+  octave_value subsref (const std::string& type,
+			const std::list<octave_value_list>& idx)
     {
-      panic_impossible ();
-      return octave_value_list ();
+      octave_value_list tmp = subsref (type, idx, 1);
+      return tmp.length () > 0 ? tmp(0) : octave_value ();
     }
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     int nargout);
 
   static octave_value numeric_conv (const Cell& val,
 				    const std::string& type);
diff --git a/src/ov-fcn-handle.h b/src/ov-fcn-handle.h
--- a/src/ov-fcn-handle.h
+++ b/src/ov-fcn-handle.h
@@ -52,21 +52,21 @@ public:
     : octave_base_value (fh), warn_reload (fh.warn_reload),
       fcn (fh.fcn), nm (fh.nm) { }
 
   ~octave_fcn_handle (void) { }
 
   octave_base_value *clone (void) const { return new octave_fcn_handle (*this); }
   octave_base_value *empty_clone (void) const { return new octave_fcn_handle (); }
 
-  octave_value subsref (const std::string&,
-			const std::list<octave_value_list>&)
+  octave_value subsref (const std::string& type,
+			const std::list<octave_value_list>& idx)
     {
-      panic_impossible ();
-      return octave_value ();
+      octave_value_list tmp = subsref (type, idx, 1);
+      return tmp.length () > 0 ? tmp(0) : octave_value ();
     }
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     int nargout);
 
   bool is_defined (void) const { return true; }
 
diff --git a/src/ov-list.h b/src/ov-list.h
--- a/src/ov-list.h
+++ b/src/ov-list.h
@@ -58,21 +58,21 @@ public:
   octave_list (const octave_list& l)
     : octave_base_value (), data (l.data) { }
 
   ~octave_list (void) { }
 
   octave_base_value *clone (void) const { return new octave_list (*this); }
   octave_base_value *empty_clone (void) const { return new octave_list (); }
 
-  octave_value subsref (const std::string&,
-			const std::list<octave_value_list>&)
+  octave_value subsref (const std::string& type,
+			const std::list<octave_value_list>& idx)
     {
-      panic_impossible ();
-      return octave_value_list ();
+      octave_value_list tmp = subsref (type, idx, 1);
+      return tmp.length () > 0 ? tmp(0) : octave_value ();
     }
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     int nargout);
 
   octave_value do_index_op (const octave_value_list& idx,
 			    bool resize_ok = false);
diff --git a/src/ov-mex-fcn.h b/src/ov-mex-fcn.h
--- a/src/ov-mex-fcn.h
+++ b/src/ov-mex-fcn.h
@@ -45,21 +45,21 @@ public:
 
   octave_mex_function (void) { }
 
   octave_mex_function (void *fptr, bool fmex, const octave_shlib& shl,
 		       const std::string& nm = std::string ());
 
   ~octave_mex_function (void);
 
-  octave_value subsref (const std::string&,
-			const std::list<octave_value_list>&)
+  octave_value subsref (const std::string& type,
+			const std::list<octave_value_list>& idx)
     {
-      panic_impossible ();
-      return octave_value ();
+      octave_value_list tmp = subsref (type, idx, 1);
+      return tmp.length () > 0 ? tmp(0) : octave_value ();
     }
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     int nargout);
 
   octave_function *function_value (bool = false) { return this; }
 
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -86,22 +86,19 @@ public:
 
   type_conv_fcn numeric_conversion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
-  octave_value_list subsref (const std::string&,
-			     const std::list<octave_value_list>&, int)
-    {
-      panic_impossible ();
-      return octave_value_list ();
-    }
+  octave_value_list subsref (const std::string& type,
+			     const std::list<octave_value_list>& idx, int)
+    { return subsref (type, idx); }
 
   octave_value do_index_op (const octave_value_list& idx,
 			    bool resize_ok = false);
 
   idx_vector index_vector (void) const { return idx_vector (range); }
 
   dim_vector dims (void) const
     { 
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -91,21 +91,22 @@ gripe_invalid_index_type (const std::str
 }
 
 static void
 gripe_failed_assignment (void)
 {
   error ("assignment to structure element failed");
 }
 
-octave_value
+octave_value_list
 octave_struct::subsref (const std::string& type,
-			const std::list<octave_value_list>& idx)
+			const std::list<octave_value_list>& idx,
+			int nargout)
 {
-  octave_value retval;
+  octave_value_list retval;
 
   int skip = 1;
 
   switch (type[0])
     {
     case '(':
       {
 	if (type.length () > 1 && type[1] == '.')
@@ -114,36 +115,36 @@ octave_struct::subsref (const std::strin
 	    octave_value_list key_idx = *++p;
 
 	    Cell tmp = dotref (key_idx);
 
 	    if (! error_state)
 	      {
 		Cell t = tmp.index (idx.front (), true);
 
-		retval = (t.length () == 1) ? t(0) : octave_value (t, true);
+		retval(0) = (t.length () == 1) ? t(0) : octave_value (t, true);
 
 		// We handled two index elements, so tell
 		// next_subsref to skip both of them.
 
 		skip++;
 	      }
 	  }
 	else
-	  retval = map.index (idx.front (), true);
+	  retval(0) = map.index (idx.front (), true);
       }
       break;
 
     case '.':
       {
 	if (map.numel() > 0)
 	  {
 	    Cell t = dotref (idx.front ());
 
-	    retval = (t.length () == 1) ? t(0) : octave_value (t, true);
+	    retval(0) = (t.length () == 1) ? t(0) : octave_value (t, true);
 	  }
       }
       break;
 
     case '{':
       gripe_invalid_index_type (type_name (), type[0]);
       break;
 
@@ -151,17 +152,17 @@ octave_struct::subsref (const std::strin
       panic_impossible ();
     }
 
   // FIXME -- perhaps there should be an
   // octave_value_list::next_subsref member function?  See also
   // octave_user_function::subsref.
 
   if (idx.size () > 1)
-    retval = retval.next_subsref (type, idx, skip);
+    retval = retval(0).next_subsref (nargout, type, idx, skip);
 
   return retval;
 }
 
 octave_value
 octave_struct::numeric_conv (const Cell& val,
 			     const std::string& type)
 {
diff --git a/src/ov-struct.h b/src/ov-struct.h
--- a/src/ov-struct.h
+++ b/src/ov-struct.h
@@ -60,26 +60,25 @@ public:
 
   ~octave_struct (void) { }
 
   octave_base_value *clone (void) const { return new octave_struct (*this); }
   octave_base_value *empty_clone (void) const { return new octave_struct (); }
 
   Cell dotref (const octave_value_list& idx);
 
-  octave_value subsref (const std::string&,
-			const std::list<octave_value_list>&);
+  octave_value subsref (const std::string& type,
+			const std::list<octave_value_list>& idx)
+    {
+      octave_value_list tmp = subsref (type, idx, 1);
+      return tmp.length () > 0 ? tmp(0) : octave_value ();
+    }
 
   octave_value_list subsref (const std::string&,
-			     const std::list<octave_value_list>&, int)
-    {
-      panic_impossible ();
-      return octave_value_list ();
-    }
-
+			     const std::list<octave_value_list>&, int);
 
   static octave_value numeric_conv (const Cell& val,
 				    const std::string& type);
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -182,21 +182,21 @@ public:
 	args_passed = octave_value_list ();
       else
 	{
 	  args_passed = saved_args.top ();
 	  saved_args.pop ();
 	}
     }
 
-  octave_value subsref (const std::string&,
-			const std::list<octave_value_list>&)
+  octave_value subsref (const std::string& type,
+			const std::list<octave_value_list>& idx)
     {
-      panic_impossible ();
-      return octave_value ();
+      octave_value_list tmp = subsref (type, idx, 1);
+      return tmp.length () > 0 ? tmp(0) : octave_value ();
     }
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     int nargout);
 
   octave_value_list
   do_multi_index_op (int nargout, const octave_value_list& args);
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -921,17 +921,17 @@ octave_value::single_subsref (const std:
 
   return rep->subsref (type, i);
 }
 
 octave_value_list
 octave_value::subsref (const std::string& type,
 		       const std::list<octave_value_list>& idx, int nargout)
 {
-  if (is_constant ())
+  if (nargout == 1)
     return rep->subsref (type, idx);
   else
     return rep->subsref (type, idx, nargout);
 }
 
 octave_value
 octave_value::next_subsref (const std::string& type,
 			    const std::list<octave_value_list>& idx,
@@ -1009,25 +1009,17 @@ octave_value::assign (assign_op op, cons
   octave_value t_rhs = rhs;
 
   if (op != op_asn_eq)
     {
       // FIXME -- only do the following stuff if we can't find
       // a specific function to call to handle the op= operation for
       // the types we have.
 
-      octave_value t;
-      if (is_constant ())
-	t = subsref (type, idx);
-      else
-	{
-	  octave_value_list tl = subsref (type, idx, 1);
-	  if (tl.length () > 0)
-	    t = tl(0);
-	}
+      octave_value t = subsref (type, idx);
 
       if (! error_state)
 	{
 	  binary_op binop = op_eq_to_binary_op (op);
 
 	  if (! error_state)
 	    t_rhs = do_binary_op (binop, t, rhs);
 	}
