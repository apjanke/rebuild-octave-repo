# HG changeset patch
# User Rik <rik@octave.org>
# Date 1456810780 28800
#      Mon Feb 29 21:39:40 2016 -0800
# Node ID 172479a97e6c1c171014b78aa478144d759df41d
# Parent  f20af4d085e95d6522de83d755d75f1f6f9c82d8
configure.ac: Remove overquoting in shell variables tests.

* configure.ac: Remove overquoting in shell variables tests.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -906,17 +906,17 @@ OCTAVE_CHECK_LIB(hdf5, HDF5,
    fi
   ])
 CPPFLAGS="$save_CPPFLAGS"
 LIBS="$save_LIBS"
 
 dnl Should we check for this now, or wait until some version of
 dnl HDF5 actually supports this feature?
 have_hdf5_int2float_conversions=no
-if test "$have_hdf5_int2float_conversions" = yes; then
+if test $have_hdf5_int2float_conversions = yes; then
   AC_DEFINE(HAVE_HDF5_INT2FLOAT_CONVERSIONS, 1,
     [Define to 1 if/when HDF5 supports automatic conversion between integer and floating-point binary data.])
 fi
 
 ### Check for FFTW library.  Default to Fortran FFTPACK if it is not available.
 
 ## Check for FFTW header and library.
 OCTAVE_CHECK_LIB(fftw3, FFTW3,
@@ -1165,17 +1165,17 @@ if test "$have_x" = yes; then
   fi
   AC_SUBST(X11_LIBS)
 fi
 
 ### Check for the Carbon framework on MacOSX systems
 OCTAVE_HAVE_FRAMEWORK([Carbon],
   [[#include <Carbon/Carbon.h>]], [[CGMainDisplayID ()]],
   [have_framework_carbon=yes], [have_framework_carbon=no])
-if test "$have_framework_carbon" = yes; then
+if test $have_framework_carbon = yes; then
   AC_DEFINE(HAVE_FRAMEWORK_CARBON, 1,
     [Define to 1 if framework CARBON is available.])
   CARBON_LIBS="-Wl,-framework -Wl,Carbon"
   AC_MSG_NOTICE([adding -Wl,-framework -Wl,Carbon to CARBON_LIBS])
   AC_SUBST(CARBON_LIBS)
 fi
 
 ### Check for list of libraries needed for OpenGL graphics renderer.
@@ -1186,17 +1186,17 @@ AC_ARG_WITH([opengl],
     [don't use OpenGL libraries, disable OpenGL graphics])],
   [if test x"$withval" = x"no"; then
      check_opengl=no
      warn_opengl="--without-opengl specified.  OpenGL graphics will be disabled."
      OCTAVE_CONFIGURE_WARNING([warn_opengl_disabled])
    fi])
 
 ## Check for OpenGL library
-if test "$check_opengl" = yes; then
+if test $check_opengl = yes; then
   OCTAVE_CHECK_LIB_OPENGL
   if test -z "$OPENGL_LIBS"; then
     warn_opengl_libs="OpenGL libs (GL and GLU) not found.  OpgnGL graphics will be disabled."
     OCTAVE_CONFIGURE_WARNING([warn_opengl_libs])
   fi
 fi
 
 ## Check for FreeType 2 library
@@ -1279,87 +1279,87 @@ win32_terminal=no
 check_qt=yes
 build_qt_gui=no
 build_qt_graphics=no
 
 AC_ARG_ENABLE([qt],
   [AS_HELP_STRING([--without-qt], [don't use Qt libraries; disable Qt GUI])],
   [if test "$enableval" = no; then check_qt=no; fi], [])
 
-if test "$check_qt" = yes; then
+if test $check_qt = yes; then
 
   warn_qt_libraries=""
   ## Check for Qt libraries
   QT_MODULES="QtCore QtGui QtNetwork QtOpenGL"
   PKG_CHECK_MODULES(QT, [$QT_MODULES],
     [],
     [check_qt=no
      warn_qt_libraries="Qt libraries not found; disabling Qt GUI"])
 
   if test -n "$warn_qt_libraries"; then
     OCTAVE_CONFIGURE_WARNING([warn_qt_libraries])
   fi
 
-  if test "$check_qt" = yes; then
+  if test $check_qt = yes; then
     ## Retrieve Qt compilation and linker flags
     QT_CPPFLAGS="`$PKG_CONFIG --cflags-only-I $QT_MODULES`"
     QT_LDFLAGS="`$PKG_CONFIG --libs-only-L $QT_MODULES`"
     QT_LIBS="`$PKG_CONFIG --libs-only-l $QT_MODULES`"
 
     case $host_os in
       *darwin*)
         ## Qt might be installed in framework
         if test -z "$QT_LIBS"; then
           QT_LDFLAGS="`$PKG_CONFIG --libs-only-other $QT_MODULES | tr ' ' '\n' | $GREP -e '-F' | uniq | tr '\n' ' '`"
           QT_LIBS="`$PKG_CONFIG --libs-only-other $QT_MODULES | tr ' ' '\n' | $GREP -v -e '-F' | uniq | tr '\n' ' '`"
           ## Enabling link_all_deps works around libtool's imperfect handling
           ## of the -F flag
           AM_CONDITIONAL([AMCOND_LINK_ALL_DEPS],
-                         [test "$link_all_deps" = yes || test -n "$QT_LDFLAGS"])
+                         [test $link_all_deps = yes || test -n "$QT_LDFLAGS"])
         fi
       ;;
     esac
 
     ## Check for Qt4
     if ! `$PKG_CONFIG --atleast-version=4.0.0 QtCore`; then
       check_qt=no
       warn_qt_version="Qt >= 4.0.0 not found; disabling Qt GUI"
       OCTAVE_CONFIGURE_WARNING([warn_qt_version])
     fi
   fi
 
-  if test "$check_qt" = yes; then
+  if test $check_qt = yes; then
     warn_qt_tools=""
     AC_CHECK_TOOLS(MOC, [moc-qt4 moc])
     AC_CHECK_TOOLS(UIC, [uic-qt4 uic])
     AC_CHECK_TOOLS(RCC, [rcc-qt4 rcc])
     AC_CHECK_TOOLS(LRELEASE, [lrelease-qt4 lrelease])
 
     if test -n "$MOC" && test -n "$UIC" && test -n "$RCC" && test -n "$LRELEASE"; then
       AC_DEFINE(HAVE_QT, 1,
         [Define to 1 if Qt is available (libraries, developer header files, utility programs (moc, uic, rcc, and lrelease))])
     else
       warn_qt_tools="Qt utility programs moc, uic, rcc, and lrelease not found; disabling Qt GUI"
       check_qt=no
       OCTAVE_CONFIGURE_WARNING([warn_qt_tools])
     fi
   fi
 
-  if test "$check_qt" = yes; then
+  if test $check_qt = yes; then
     warn_qt_setlocale=""
     AC_CHECK_FUNCS([setlocale], [],
       [check_qt=no
        warn_qt_setlocale="setlocale not found; disabling Qt GUI"])
 
     if test -n "$warn_qt_setlocale"; then
       OCTAVE_CONFIGURE_WARNING([warn_qt_setlocale])
     fi
   fi
 
-  if test "$check_qt" = yes; then
+  if test $check_qt = yes; then
     warn_qt_setvbuf=""
     warn_qt_lib_fcns=""
     case $host_os in
       mingw* | msdosmsvc*)
         AC_CHECK_FUNCS([setvbuf], [win32_terminal=yes],
           [check_qt=no
            warn_qt_setvbuf="setvbuf not found; disabling Qt GUI"])
 
@@ -1377,47 +1377,47 @@ if test "$check_qt" = yes; then
 
         if test -n "$warn_qt_lib_fcns"; then
           OCTAVE_CONFIGURE_WARNING([warn_qt_lib_fcns])
         fi
       ;;
     esac
   fi
 
-  if test "$check_qt" = yes; then
+  if test $check_qt = yes; then
     OCTAVE_CHECK_FUNC_QABSTRACTITEMMODEL_BEGINRESETMODEL
 
-    if test "$octave_cv_func_qabstractitemmodel_beginresetmodel" = no; then
+    if test $octave_cv_func_qabstractitemmodel_beginresetmodel = no; then
       check_qt=no
       warn_qt_abstract_item_model="QAbstractItemModel::beginResetModel not found; disabling Qt GUI"
       OCTAVE_CONFIGURE_WARNING([warn_qt_abstract_item_model])
     fi
   fi
 
-  if test "$check_qt" = yes; then
+  if test $check_qt = yes; then
     ## We have what we need to build the Qt GUI.  The remaining
     ## checks below are for optional features related to the Qt GUI.
     build_qt_gui=yes
   fi
 
-  if test "$check_qt" = yes; then
+  if test $check_qt = yes; then
     OCTAVE_CHECK_QFONT_MONOSPACE
     OCTAVE_CHECK_QFONT_FORCE_INTEGER_METRICS
     OCTAVE_CHECK_FUNC_QTABWIDGET_SETMOVABLE
 
     if test -n "$OPENGL_LIBS"; then
       OCTAVE_CHECK_QT_OPENGL_OK([build_qt_graphics=yes],
         [warn_qt_opengl="Qt does not work with the OpenGL libs (GL and GLU); disabling OpenGL graphics with Qt GUI"])
 
       if test -n "$warn_qt_opengl"; then
         OCTAVE_CONFIGURE_WARNING([warn_qt_opengl])
       fi
     endif
 
-      if test "$build_qt_graphics" = yes; then
+      if test $build_qt_graphics = yes; then
         AC_DEFINE(HAVE_QT_GRAPHICS, 1, [Define to 1 if Qt works with OpenGL libs (GL and GLU)])
       fi
     fi
 
     ## Check for Qscintilla library which is used in the Qt GUI editor.
     AC_CACHE_CHECK([whether Qscintilla library is installed],
       [octave_cv_lib_qscintilla],
       [save_CPPFLAGS="$CPPFLAGS"
@@ -1435,17 +1435,17 @@ if test "$check_qt" = yes; then
         octave_cv_lib_qscintilla=yes,
         octave_cv_lib_qscintilla=no)
       CPPFLAGS="$save_CPPFLAGS"
       LDFLAGS="$save_LDFLAGS"
       LIBS="$save_LIBS"
       AC_LANG_POP([C++])
     ])
 
-    if test "$octave_cv_lib_qscintilla" = no; then
+    if test $octave_cv_lib_qscintilla = no; then
       warn_qscintilla_editor="Qscintilla library not found; disabling built-in Qt GUI editor"
       OCTAVE_CONFIGURE_WARNING([warn_qscintilla])
     else
       ## Let's assume Qscintilla library is at the same location as
       ## other regular Qt libraries.
       QT_LIBS="$QT_LIBS -lqscintilla2"
       OCTAVE_CHECK_VERSION_2_6_0
       AC_DEFINE(HAVE_QSCINTILLA, 1,
@@ -1463,21 +1463,21 @@ if test "$check_qt" = yes; then
     fi
   fi
 fi
 
 AC_SUBST(QT_CPPFLAGS)
 AC_SUBST(QT_LDFLAGS)
 AC_SUBST(QT_LIBS)
 
-AM_CONDITIONAL([AMCOND_BUILD_QT_GUI], [test "$build_qt_gui" = yes])
-AM_CONDITIONAL([AMCOND_BUILD_QT_GRAPHICS], [test "$build_qt_graphics" = yes])
+AM_CONDITIONAL([AMCOND_BUILD_QT_GUI], [test $build_qt_gui = yes])
+AM_CONDITIONAL([AMCOND_BUILD_QT_GRAPHICS], [test $build_qt_graphics = yes])
 AM_CONDITIONAL([AMCOND_HAVE_QSCINTILLA],
-               [test "$octave_cv_lib_qscintilla" = yes])
-AM_CONDITIONAL([WIN32_TERMINAL], [test "$win32_terminal" = yes])
+               [test $octave_cv_lib_qscintilla = yes])
+AM_CONDITIONAL([WIN32_TERMINAL], [test $win32_terminal = yes])
 
 ## Check for FLTK (www.fltk.org) library
 
 check_fltk=yes
 AC_ARG_WITH([fltk],
   [AS_HELP_STRING([--without-fltk],
     [don't use FLTK libraries, disable OpenGL graphics with FLTK widgets])],
   [if test x"$withval" = x"no"; then
@@ -1682,17 +1682,17 @@ if test $ax_blas_ok = no; then
         AC_DEFINE(USE_BLASWRAP, 1,
           [Define to 1 if BLAS functions need to be wrapped (potentially needed for 64-bit OSX only).])
       fi
     ;;
   esac
 fi
 
 if test $ax_blas_ok = no; then
-  if test $ENABLE_64 = yes && test "$ax_blas_integer_size_ok" = no; then
+  if test $ENABLE_64 = yes && test $ax_blas_integer_size_ok = no; then
     ## Attempt to be more informative.
     AC_MSG_ERROR([BLAS doesn't seem to support 64-bit integers.  This is incompatible with --enable-64.])
   else
     AC_MSG_ERROR([A BLAS library was detected but found incompatible with your Fortran 77 compiler settings.])
   fi
 fi
 
 if test $ax_blas_ok = no || test $ax_lapack_ok = no; then
@@ -2402,23 +2402,23 @@ AC_TYPE_PID_T
 AC_TYPE_SIZE_T
 AC_TYPE_SSIZE_T
 AC_TYPE_UID_T
 AC_TYPE_UINT64_T
 AC_CHECK_TYPES([dev_t, ino_t])
 AC_CHECK_TYPES([ptrdiff_t])
 
 AC_CHECK_TYPES([long long int])
-if test "x$ac_cv_type_long_long_int" = xyes; then
+if test $ac_cv_type_long_long_int = yes; then
   AC_DEFINE(OCTAVE_HAVE_LONG_LONG_INT, 1,
     [Define to 1 if the system has the type 'long long int'.])
 fi
 
 AC_CHECK_TYPES([unsigned long long int])
-if test "x$ac_cv_type_unsigned_long_long_int" = xyes; then
+if test $ac_cv_type_unsigned_long_long_int = yes; then
   AC_DEFINE(OCTAVE_HAVE_UNSIGNED_LONG_LONG_INT, 1,
     [Define to 1 if the system has the type 'unsigned long long int'.])
 fi
 
 ## How big are ints and how are they oriented?
 ## These could probably be eliminated in favor of run-time checks.
 
 AC_CHECK_SIZEOF([short])
@@ -2669,17 +2669,17 @@ AC_CHECK_DECLS([sys_siglist], [], [],
 #endif
 ]])
 
 ### Need to disable building documentation if either gnuplot or
 ### makeinfo are missing.  Skip this warning if building docs was
 ### disabled with a configure option.
 
 if test $ENABLE_DOCS = yes; then
-  if test "$opengl_graphics" = "no" || test -n "$warn_OSMesa"; then
+  if test $opengl_graphics = no || test -n "$warn_OSMesa"; then
     if test -n "$warn_gnuplot"; then
       ENABLE_DOCS=no
       warn_docs_graphics="building documentation disabled because no suitable graphics toolkit is available; make dist will fail"
         OCTAVE_CONFIGURE_WARNING([warn_docs_graphics])
     fi
   fi
   if test -n "$warn_makeinfo"; then
     ENABLE_DOCS=no
@@ -3277,17 +3277,17 @@ if test $ENABLE_64 = yes; then
   AC_MSG_WARN([Make.  This should work automatically for gfortran.  If])
   AC_MSG_WARN([you use another compiler, you will need to set this])
   AC_MSG_WARN([variable on the configure command line.  You must also])
   AC_MSG_WARN([compile the ARPACK, BLAS, LAPACK, QRUPDATE, and SuiteSparse])
   AC_MSG_WARN([libraries to use 8 byte signed integers for array indexing.])
   warn_msg_printed=true
 fi
 
-if test "$opengl_graphics" = "no"; then
+if test $opengl_graphics = no; then
   AC_MSG_WARN([])
   AC_MSG_WARN([I didn't find the libraries needed to compile Octave])
   AC_MSG_WARN([with support for OpenGL graphics.  Creating plots is])
   AC_MSG_WARN([still possible if you have gnpulot installed.])
   warn_msg_printed=true
 fi
 
 if test $ENABLE_ATOMIC_REFCOUNT = no; then
