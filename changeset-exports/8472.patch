# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1231821692 18000
#      Mon Jan 12 23:41:32 2009 -0500
# Node ID 5451f7460ea6b81d9e8cc40291c1672f8569119b
# Parent  02de6775f1fecbca5429c8a653937ea7af55ec8f
strfns.cc (Fstrcmp, Fstrncmp): initialize all elements of output with constructor arg

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2009-01-12  John W. Eaton  <jwe@octave.org>
+
+	* strfns.cc (Fstrcmp, Fstrncmp): Simplify by initializing all
+	elements of output to false with constructor argument.
+
+2009-01-12  Thorsten Meyer  <thorsten.meyier@gmx.de>
+
+	* strfns.cc (Fstrncmp): New test.
+	
 2009-01-12  John W. Eaton  <jwe@octave.org>
 
 	* pt-stmt.h (tree_statement::is_null_statement): New function.
 	* parse.y (set_stmt_print_flag): Return list.  Remove trailing
 	null statements from list.
 	(list, simple_list): Simplify action.
 	(make_statement, make_statement_list, append_statement_list):
 	Always create statements and them to the list.
diff --git a/src/strfns.cc b/src/strfns.cc
--- a/src/strfns.cc
+++ b/src/strfns.cc
@@ -390,68 +390,59 @@ This is just the opposite of the corresp
 	      r = args(1).rows ();
 	      cell = args(0).cell_value ();
 	    }
 
 	  if (r == 0 || r == 1)
 	    {
 	      // Broadcast the string.
 
-	      boolNDArray output (cell.dimensions);
+	      boolNDArray output (cell.dimensions, false);
 
 	      std::string s = r == 0 ? std::string () : str[0];
 
 	      for (int i = 0; i < cell.length (); i++)
 		{
 		  if (cell(i).is_string ())
 		    output(i) = (cell(i).string_value () == s);
-		  else
-		    output(i) = false;
 		}
 
 	      retval = output;
 	    }
 	  else if (r > 1)
 	    {
 	      if (cell.length () == 1)
 		{
 		  // Broadcast the cell.
 
 		  const dim_vector dv (r, 1);
-		  boolNDArray output (dv);
+		  boolNDArray output (dv, false);
 
 		  if (cell(0).is_string ())
 		    {
 		      const std::string str2 = cell(0).string_value ();
 
 		      for (int i = 0; i < r; i++)
 			output(i) = (str[i] == str2);
 		    }
-		  else
-		    {
-		      for (int i = 0; i < r; i++)
-			output(i) = false;
-		    }
 
 		  retval = output;
 		}
 	      else
 		{
 		  // Must match in all dimensions.
 
-		  boolNDArray output (cell.dimensions);
+		  boolNDArray output (cell.dimensions, false);
 
 		  if (cell.length () == r)
 		    {
 		      for (int i = 0; i < r; i++)
 			{
 			  if (cell(i).is_string ())
 			    output(i) = (str[i] == cell(i).string_value ());
-			  else
-			    output(i) = false;
 			}
 
 		      retval = output;
 		    }
 		  else
 		    retval = false;
 		}
 	    }
@@ -478,40 +469,33 @@ This is just the opposite of the corresp
 	      cell1 = args(0).cell_value ();
 	      cell2 = args(1).cell_value ();
 	      r2 = cell2.length ();
 	    }
 
 	  const dim_vector size1 = cell1.dimensions;
 	  const dim_vector size2 = cell2.dimensions;
 
-	  boolNDArray output (size1);
+	  boolNDArray output (size1, false);
 
 	  if (r2 == 1)
 	    {
 	      // Broadcast cell2.
 
-	      if (! cell2(0).is_string ())
-		{
-		  for (int i = 0; i < r1; i++)
-		    output(i) = false;
-		}
-	      else
+	      if (cell2(0).is_string ())
 		{
 		  const std::string str2 = cell2(0).string_value ();
 
 		  for (int i = 0; i < r1; i++)
 		    {
 		      if (cell1(i).is_string ())
 			{
 			  const std::string str1 = cell1(i).string_value ();
 			  output(i) = (str1 == str2);
 			}
-		      else
-			output(i) = false;
 		    }
 		}
 	    }
 	  else
 	    {
 	      if (size1 != size2)
 		{
 		  error ("strcmp: nonconformant cell arrays");
@@ -521,18 +505,16 @@ This is just the opposite of the corresp
 	      for (int i = 0; i < r1; i++)
 		{
 		  if (cell1(i).is_string () && cell2(i).is_string ())
 		    {
 		      const std::string str1 = cell1(i).string_value ();
 		      const std::string str2 = cell2(i).string_value ();
 		      output(i) = (str1 == str2);
 		    }
-		  else
-		    output(i) = false;
 		}
 	    }
 
 	  retval = output;
 	}
       else
 	retval = false;
     }
@@ -684,95 +666,75 @@ This is just the opposite of the corresp
 	      c = args(1).columns ();
 	      cell = args(0).cell_value ();
 	    }
 
 	  if (r == 1)
 	    {
 	      // Broadcast the string.
 
-	      boolNDArray output (cell.dimensions);
+	      boolNDArray output (cell.dimensions, false);
 
 	      if (c < n)
 		{
 		  for (int i = 0; i < cell.length (); i++)
 		    output(i) = false;
 		}
 	      else
 		{
 		  for (int i = 0; i < cell.length (); i++)
 		    {
 		      if (cell(i).is_string ())
 			{
 			  const std::string str2 = cell(i).string_value ();
 
-			  if (str2.length() >= n) 
-			    {
-			      if (str2.compare (0, n, str[0], 0, n) == 0)
+			  if (str2.length() >= n
+			      && str2.compare (0, n, str[0], 0, n) == 0)
 				output(i) = true;
-			      else
-				output(i) = false;
-			    }
-			  else
-			    output(i) = false;
 			}
 		    }
 		}
 
 	      retval = output;
 	    }
 	  else if (r > 1)
 	    {
 	      if (cell.length () == 1)
 		{
 		  // Broadcast the cell.
 
 		  const dim_vector dv (r, 1);
-		  boolNDArray output (dv);
+		  boolNDArray output (dv, false);
 
 		  if (cell(0).is_string () && c >= n)
 		    {
 		      const std::string str2 = cell(0).string_value ();
 		      
 		      if (str2.length () >= n)
 			{
 			  for (int i = 0; i < r; i++)
 			    {
 			      if (str[i].compare (0, n, str2, 0, n) == 0)
 				output(i) = true;
-			      else
-				output(i) = false;
 			    }
 			}
-		      else
-			{
-			  for (int i = 0; i < r; i++)
-			    output(i) = false;
-			}
-		    }
-		  else
-		    {
-		      for (int i = 0; i < r; i++)
-			output(i) = false;
 		    }
 
 		  retval = output;
 		}
 	      else
 		{
 		  // Must match in all dimensions.
 
-		  boolNDArray output (cell.dimensions);
+		  boolNDArray output (cell.dimensions, false);
 
 		  if (cell.numel () == r)
 		    {
 		      for (int i = 0; i < r; i++)
 			{
-			  output(i) = false;
-
 			  if (cell(i).is_string () && c >= n)
 			    {
 			      std::string str2 = cell(i).string_value ();
 
 			      if (str2.length () >= n
 				  && str2.compare (0, n, str[i], 0, n) == 0)
 				output(i) = true;
 			    }
@@ -810,45 +772,36 @@ This is just the opposite of the corresp
 	      cell1 = args(0).cell_value ();
 	      cell2 = args(1).cell_value ();
 	      r2 = cell2.length ();
 	    }
 
 	  const dim_vector size1 = cell1.dimensions;
 	  const dim_vector size2 = cell2.dimensions;
 
-	  boolNDArray output (size1);
+	  boolNDArray output (size1, false);
 
 	  if (r2 == 1)
 	    {
 	      // Broadcast cell2.
 
-	      if (! cell2(0).is_string ())
-		{
-		  for (int i = 0; i < r1; i++)
-		    output(i) = false;
-		}
-	      else
+	      if (cell2(0).is_string ())
 		{
 		  const std::string str2 = cell2(0).string_value ();
 
 		  for (int i = 0; i < r1; i++)
 		    {
 		      if (cell1(i).is_string ())
 			{
 			  const std::string str1 = cell1(i).string_value ();
 
 			  if (str1.length () >= n && str2.length () >= n
 			      && str1.compare (0, n, str2, 0, n) == 0)
 			    output(i) = true;
-			  else
-			    output(i) = false;
 			}
-		      else
-			output(i) = false;
 		    }
 		}
 	    }
 	  else
 	    {
 	      if (size1 != size2)
 		{
 		  error ("strncmp: nonconformant cell arrays");
@@ -860,21 +813,17 @@ This is just the opposite of the corresp
 		  if (cell1(i).is_string () && cell2(i).is_string ())
 		    {
 		      const std::string str1 = cell1(i).string_value ();
 		      const std::string str2 = cell2(i).string_value ();
 
 		      if (str1.length () >= n && str2.length () >= n
 			  && str1.compare (0, n, str2, 0, n) == 0)
 			output(i) = true;
-		      else
-			output(i) = false;
 		    }
-		  else
-		    output(i) = false;
 		}
 	    }
 
 	  retval = output;
 	}
       else
 	retval = false;
     }
@@ -888,16 +837,17 @@ This is just the opposite of the corresp
 %!error <Invalid call to strncmp.*> strncmp ();
 %!error <Invalid call to strncmp.*> strncmp ("abc", "def");
 %!assert (strncmp ("abce", "abc", 3) == 1)
 %!assert (strncmp (100, 100, 1) == 0)
 %!assert (all (strncmp ("abce", {"abcd", "bca", "abc"}, 3) == [1, 0, 1]))
 %!assert (all (strncmp ("abc",  {"abcd", "bca", "abc"}, 4) == [0, 0, 0]))
 %!assert (all (strncmp ({"abcd", "bca", "abc"},"abce", 3) == [1, 0, 1]))
 %!assert (all (strncmp ({"abcd", "bca", "abc"},{"abcd", "bca", "abe"}, 3) == [1, 1, 0]))
+%!assert (all (strncmp("abc", {"abcd", 10}, 2) == [1, 0]))
 */
 
 
 DEFUN (list_in_columns, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} list_in_columns (@var{arg}, @var{width})\n\
 Return a string containing the elements of @var{arg} listed in\n\
 columns with an overall maximum width of @var{width}.  The argument\n\
