# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1327882156 -3600
#      Mon Jan 30 01:09:16 2012 +0100
# Node ID c22fa57226b2600637cee6a264ebd76118837474
# Parent  d49e99269c0ba6e3aa8b05094a5815e5aea32d6a
Fixed bug with ECHOCTL.

diff --git a/libqterminal/Emulation.cpp b/libqterminal/Emulation.cpp
--- a/libqterminal/Emulation.cpp
+++ b/libqterminal/Emulation.cpp
@@ -247,127 +247,27 @@ TODO: Character composition from the old
 */
 
 void Emulation::receiveData(const char* text, int length)
 {
 	emit stateSet(NOTIFYACTIVITY);
 
 	bufferedUpdate();
     	
-    QString unicodeText = _decoder->toUnicode(text,length);
+        QString unicodeText = _decoder->toUnicode(text,length);
 
 	//send characters to terminal emulator
-	for (int i=0;i<unicodeText.length();i++)
+        for (int i=0;i<unicodeText.length();i++)
 	{
-		receiveChar(unicodeText[i].unicode());
-	}
-
-	//look for z-modem indicator
-	//-- someone who understands more about z-modems that I do may be able to move
-	//this check into the above for loop?
-	for (int i=0;i<length;i++)
-	{
-		if (text[i] == '\030')
-    		{
-      			if ((length-i-1 > 3) && (strncmp(text+i+1, "B00", 3) == 0))
-      				emit zmodemDetected();
-    		}
+                receiveChar(unicodeText[i].unicode());
 	}
 }
 
-//OLDER VERSION
-//This version of onRcvBlock was commented out because
-//	a)  It decoded incoming characters one-by-one, which is slow in the current version of Qt (4.2 tech preview)
-//	b)  It messed up decoding of non-ASCII characters, with the result that (for example) chinese characters
-//	    were not printed properly.
-//
-//There is something about stopping the _decoder if "we get a control code halfway a multi-byte sequence" (see below)
-//which hasn't been ported into the newer function (above).  Hopefully someone who understands this better
-//can find an alternative way of handling the check.  
-
-
-/*void Emulation::onRcvBlock(const char *s, int len)
-{
-  emit notifySessionState(NOTIFYACTIVITY);
-  
-  bufferedUpdate();
-  for (int i = 0; i < len; i++)
-  {
-
-    QString result = _decoder->toUnicode(&s[i],1);
-    int reslen = result.length();
-
-    // If we get a control code halfway a multi-byte sequence
-    // we flush the _decoder and continue with the control code.
-    if ((s[i] < 32) && (s[i] > 0))
-    {
-       // Flush _decoder
-       while(!result.length())
-          result = _decoder->toUnicode(&s[i],1);
-       reslen = 1;
-       result.resize(reslen);
-       result[0] = QChar(s[i]);
-    }
-
-    for (int j = 0; j < reslen; j++)
-    {
-      if (result[j].characterategory() == QChar::Mark_NonSpacing)
-         _currentScreen->compose(result.mid(j,1));
-      else
-         onRcvChar(result[j].unicode());
-    }
-    if (s[i] == '\030')
-    {
-      if ((len-i-1 > 3) && (strncmp(s+i+1, "B00", 3) == 0))
-      	emit zmodemDetected();
-    }
-  }
-}*/
-
 // Selection --------------------------------------------------------------- --
 
-#if 0
-void Emulation::onSelectionBegin(const int x, const int y, const bool columnmode) {
-  if (!connected) return;
-  _currentScreen->setSelectionStart( x,y,columnmode);
-  showBulk();
-}
-
-void Emulation::onSelectionExtend(const int x, const int y) {
-  if (!connected) return;
-  _currentScreen->setSelectionEnd(x,y);
-  showBulk();
-}
-
-void Emulation::setSelection(const bool preserve_line_breaks) {
-  if (!connected) return;
-  QString t = _currentScreen->selectedText(preserve_line_breaks);
-  if (!t.isNull()) 
-  {
-    QListIterator< TerminalDisplay* > viewIter(_views);
-
-    while (viewIter.hasNext())    
-        viewIter.next()->setSelection(t);
-  }
-}
-
-void Emulation::testIsSelected(const int x, const int y, bool &selected)
-{
-  if (!connected) return;
-  selected=_currentScreen->isSelected(x,y);
-}
-
-void Emulation::clearSelection() {
-  if (!connected) return;
-  _currentScreen->clearSelection();
-  showBulk();
-}
-
-#endif 
-
 void Emulation::writeToStream( TerminalCharacterDecoder* _decoder , 
                                int startLine ,
                                int endLine) 
 {
   _currentScreen->writeToStream(_decoder,startLine,endLine);
 }
 
 int Emulation::lineCount()
@@ -519,12 +419,8 @@ ExtendedCharTable::~ExtendedCharTable()
     {
         iter.next();
         delete[] iter.value();
     }
 }
 
 // global instance
 ExtendedCharTable ExtendedCharTable::instance;
-
-
-//#include "moc_Emulation.cpp"
-
diff --git a/libqterminal/Emulation.h b/libqterminal/Emulation.h
--- a/libqterminal/Emulation.h
+++ b/libqterminal/Emulation.h
@@ -292,19 +292,16 @@ signals:
   /**
    * Emitted when the activity state of the emulation is set.
    *
    * @param state The new activity state, one of NOTIFYNORMAL, NOTIFYACTIVITY
    * or NOTIFYBELL
    */
   void stateSet(int state);
 
-  /** TODO Document me */
-  void zmodemDetected();
-
 
   /**
    * Requests that the color of the text used
    * to represent the tabs associated with this
    * emulation be changed.  This is a Konsole-specific
    * extension from pre-KDE 4 times.
    *
    * TODO: Document how the parameter works.
diff --git a/libqterminal/KeyboardTranslator.cpp b/libqterminal/KeyboardTranslator.cpp
--- a/libqterminal/KeyboardTranslator.cpp
+++ b/libqterminal/KeyboardTranslator.cpp
@@ -141,17 +141,16 @@ KeyboardTranslator* KeyboardTranslatorMa
     if (name.isEmpty() || !source.open(QIODevice::ReadOnly | QIODevice::Text))
         return 0;
 
     return loadTranslator(&source,name);
 }
 
 const KeyboardTranslator* KeyboardTranslatorManager::defaultTranslator()
 {
-    qDebug() << "Loading default translator from text";
     QBuffer textBuffer;
     textBuffer.setData(defaultTranslatorText,strlen(defaultTranslatorText));
 
     if (!textBuffer.open(QIODevice::ReadOnly))
         return 0;
 
     return loadTranslator(&textBuffer,"fallback");
 }
diff --git a/libqterminal/QTerminal.cpp b/libqterminal/QTerminal.cpp
--- a/libqterminal/QTerminal.cpp
+++ b/libqterminal/QTerminal.cpp
@@ -12,42 +12,35 @@
     Library General Public License for more details.
 				
     You should have received a copy of the GNU Library General Public License
     along with this library; see the file COPYING.LIB.  If not, write to
     the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
     Boston, MA 02110-1301, USA.
 */
 						
+#include <QDebug>
 
 #include "QTerminal.h"
 #include "kpty.h"
 
+#include <termios.h>
+
 QTerminal::QTerminal(QWidget *parent)
     : QWidget(parent) {
     setMinimumSize(600, 400);
-    init();
-    
-    setFocus(Qt::OtherFocusReason);
-    m_sessionView->resize(this->size());
-    
-    this->setFocusProxy(m_sessionView);
+    initialize();
 }
 
-void QTerminal::init()
+void QTerminal::initialize()
 {
-    KPty *kpty = new KPty();
-    kpty->open();
-    int fds = kpty->slaveFd();
+    m_kpty = new KPty();
+    m_kpty->open();
 
-    dup2 (fds, 0);
-    dup2 (fds, 1);
-    dup2 (fds, 2);
-
-    m_sessionModel = new TerminalModel(kpty);
+    m_sessionModel = new TerminalModel(m_kpty);
 
     m_sessionModel->setAutoClose(true);
     m_sessionModel->setCodec(QTextCodec::codecForName("UTF-8"));
     m_sessionModel->setHistoryType(HistoryTypeBuffer(1000));
     m_sessionModel->setDarkBackground(true);
     m_sessionModel->setKeyBindings("");
 
     m_sessionView = new TerminalView(this);
@@ -64,16 +57,42 @@ void QTerminal::init()
     setTerminalFont(font);  
 
     m_sessionModel->run();
     m_sessionModel->addView(m_sessionView);
     m_sessionView->setScrollBarPosition(TerminalView::ScrollBarRight);
 
     connect(m_sessionModel, SIGNAL(finished()), this, SLOT(sessionFinished()));
     setFocusProxy(m_sessionView);
+
+    setFocus(Qt::OtherFocusReason);
+    m_sessionView->resize(this->size());
+
+    connectToPty();
+}
+
+void QTerminal::connectToPty()
+{
+    int fds = m_kpty->slaveFd();
+
+    dup2 (fds, STDIN_FILENO);
+    dup2 (fds, STDOUT_FILENO);
+    dup2 (fds, STDERR_FILENO);
+
+    if(!isatty(STDIN_FILENO)) {
+        qDebug("Error: stdin is not a tty.");
+    }
+
+    if(!isatty(STDOUT_FILENO)) {
+        qDebug("Error: stdout is not a tty.");
+    }
+
+    if(!isatty(STDERR_FILENO)) {
+        qDebug("Error: stderr is not a tty.");
+    }
 }
 
 QTerminal::~QTerminal()
 {
     emit destroyed();
 }
 
 void QTerminal::setTerminalFont(QFont &font)
diff --git a/libqterminal/QTerminal.h b/libqterminal/QTerminal.h
--- a/libqterminal/QTerminal.h
+++ b/libqterminal/QTerminal.h
@@ -17,16 +17,17 @@
     Boston, MA 02110-1301, USA.
 */
 						    
 
 #ifndef Q_TERMINAL
 #define Q_TERMINAL
 
 #include <QtGui>
+#include "kpty.h"
 #include "TerminalModel.h"
 #include "TerminalView.h"
 
 class QTerminal : public QWidget
 {
     Q_OBJECT
 public:
     QTerminal(QWidget *parent = 0);
@@ -49,14 +50,17 @@ public slots:
 protected:
     void focusInEvent(QFocusEvent *focusEvent);
     virtual void resizeEvent(QResizeEvent *);
     
 protected slots:
     void sessionFinished();        
     
 private:
-    void init();
+    void initialize();
+    void connectToPty();
+
     TerminalView *m_sessionView;
     TerminalModel *m_sessionModel;
+    KPty *m_kpty;
 };
 
 #endif // Q_TERMINAL
diff --git a/libqterminal/TerminalModel.cpp b/libqterminal/TerminalModel.cpp
--- a/libqterminal/TerminalModel.cpp
+++ b/libqterminal/TerminalModel.cpp
@@ -388,17 +388,17 @@ void TerminalModel::setMonitorSilenceSec
     }
 }
 
 void TerminalModel::setAddToUtmp(bool set)
 {
     _addToUtmp = set;
 }
 
-void TerminalModel::onReceiveBlock( const char* buf, int len )
+void TerminalModel::onReceiveBlock(const char* buf, int len )
 {
     _emulation->receiveData( buf, len );
     emit receivedData( QString::fromLatin1( buf, len ) );
 }
 
 QSize TerminalModel::size()
 {
     return _emulation->imageSize();
diff --git a/libqterminal/TerminalModel.h b/libqterminal/TerminalModel.h
--- a/libqterminal/TerminalModel.h
+++ b/libqterminal/TerminalModel.h
@@ -310,17 +310,17 @@ signals:
    * @param text The text of the command.  This is a string of the form
    * "PropertyName=Value;PropertyName=Value ..."
    */
   void profileChangeCommandReceived(const QString& text);
 
 private slots:
   void done(int);
 
-  void onReceiveBlock( const char* buffer, int len );
+  void onReceiveBlock(const char* buffer, int len );
   void monitorTimerDone();
 
   void onViewSizeChange(int height, int width);
   void onEmulationSizeChange(int lines , int columns);
 
   void activityStateSet(int);
 
   //automatically detach views from sessions when view is destroyed
diff --git a/libqterminal/kpty.cpp b/libqterminal/kpty.cpp
--- a/libqterminal/kpty.cpp
+++ b/libqterminal/kpty.cpp
@@ -360,16 +360,20 @@ bool KPty::open()
   ioctl(d->slaveFd, I_PUSH, "ptem");
   ioctl(d->slaveFd, I_PUSH, "ldterm");
 #endif
 
 #endif /* HAVE_OPENPTY */
   fcntl(d->masterFd, F_SETFD, FD_CLOEXEC);
   fcntl(d->slaveFd, F_SETFD, FD_CLOEXEC);
 
+  struct ::termios t;
+  tcGetAttr(&t);
+  t.c_lflag &= ~ECHOCTL;
+  tcSetAttr(&t);
   return true;
 }
 
 void KPty::closeSlave()
 {
     Q_D(KPty);
 
     if (d->slaveFd < 0)
