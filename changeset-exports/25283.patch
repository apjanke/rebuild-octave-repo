# HG changeset patch
# User Rik <rik@octave.org>
# Date 1524113681 25200
#      Wed Apr 18 21:54:41 2018 -0700
# Node ID 172d464b62eaaf0037571697b03a204c8aea985a
# Parent  ed0c2683a316f28c237f800e617484ef55cfbd8d
doc: Update documentation for binary functions (plus, or, etc.) (bug #53684).

* data.cc (Fplus, Fmtimes, Ftimes, Fand, For): Remove phrase
"At least one argument is required." since two args are required.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -5932,17 +5932,16 @@ This function and @w{@tcode{@var{x} + @v
 
 If more arguments are given, the summation is applied
 cumulatively from left to right:
 
 @example
 (@dots{}((@var{x1} + @var{x2}) + @var{x3}) + @dots{})
 @end example
 
-At least one argument is required.
 @seealso{minus, uplus}
 @end deftypefn */)
 {
   return binary_assoc_op_defun_body (octave_value::op_add,
                                      octave_value::op_add_eq, args);
 }
 
 /*
@@ -5975,17 +5974,16 @@ Return the matrix multiplication product
 This function and @w{@tcode{@var{x} * @var{y}}} are equivalent.
 If more arguments are given, the multiplication is applied
 cumulatively from left to right:
 
 @example
 (@dots{}((@var{x1} * @var{x2}) * @var{x3}) * @dots{})
 @end example
 
-At least one argument is required.
 @seealso{times, plus, minus, rdivide, mrdivide, mldivide, mpower}
 @end deftypefn */)
 {
   return binary_assoc_op_defun_body (octave_value::op_mul,
                                      octave_value::op_mul_eq, args);
 }
 
 DEFUN (mrdivide, args, ,
@@ -6097,17 +6095,16 @@ Return the element-by-element multiplica
 This function and @w{@tcode{@var{x} .* @var{y}}} are equivalent.
 If more arguments are given, the multiplication is applied
 cumulatively from left to right:
 
 @example
 (@dots{}((@var{x1} .* @var{x2}) .* @var{x3}) .* @dots{})
 @end example
 
-At least one argument is required.
 @seealso{mtimes, rdivide}
 @end deftypefn */)
 {
   return binary_assoc_op_defun_body (octave_value::op_el_mul,
                                      octave_value::op_el_mul_eq, args);
 }
 
 DEFUN (rdivide, args, ,
@@ -6162,17 +6159,16 @@ Return the logical AND of @var{x} and @v
 This function is equivalent to the operator syntax
 @w{@code{@var{x} & @var{y}}}.  If more than two arguments are given, the
 logical AND is applied cumulatively from left to right:
 
 @example
 (@dots{}((@var{x1} & @var{x2}) & @var{x3}) & @dots{})
 @end example
 
-At least one argument is required.
 @seealso{or, not, xor}
 @end deftypefn */)
 {
   return binary_assoc_op_defun_body (octave_value::op_el_and,
                                      octave_value::op_el_and_eq, args);
 }
 
 DEFUN (or, args, ,
@@ -6184,17 +6180,16 @@ Return the logical OR of @var{x} and @va
 This function is equivalent to the operator syntax
 @w{@code{@var{x} | @var{y}}}.  If more than two arguments are given, the
 logical OR is applied cumulatively from left to right:
 
 @example
 (@dots{}((@var{x1} | @var{x2}) | @var{x3}) | @dots{})
 @end example
 
-At least one argument is required.
 @seealso{and, not, xor}
 @end deftypefn */)
 {
   return binary_assoc_op_defun_body (octave_value::op_el_or,
                                      octave_value::op_el_or_eq, args);
 }
 
 DEFUN (colon, args, ,
