# HG changeset patch
# User jwe
# Date 1062176978 0
#      Fri Aug 29 17:09:38 2003 +0000
# Node ID 819e3c2467025fdab4c9a7579d86759d190ae6b9
# Parent  96a25f032846a493eba9416149fca7ecb8f0e520
[project @ 2003-08-29 17:09:38 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2003-08-29  David Castelow  <DCastelow@Airspan.com>
+
+	* strings/dec2base.m, strings/dec2bin.m, strings/dec2hex.m:
+	Allow optional length argument.
+
 2003-08-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* polynomial/polyfit.m: Avoid calling flipud.
 	From Pascal A. Dupuis <Pascal.Dupuis@esat.kuleuven.ac.be>.
 	Return structure as second output value for improved Matlab
 	compatibility.
 
 2003-07-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/scripts/strings/dec2base.m b/scripts/strings/dec2base.m
--- a/scripts/strings/dec2base.m
+++ b/scripts/strings/dec2base.m
@@ -13,17 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} dec2base (@var{n}, @var{b})
+## @deftypefn {Function File} {} dec2base (@var{n}, @var{b}, @var{len})
 ## Return a string of symbols in base @var{b} corresponding to the
 ## the nonnegative integer @var{n}.
 ##
 ## @example
 ## dec2base (123, 3)
 ##      @result{} "11120"
 ## @end example
 ##
@@ -33,52 +33,59 @@
 ## If @var{b} is a string then the characters of @var{b} are used as
 ## the symbols for the digits of @var{n}.  Space (' ') may not be used
 ## as a symbol.
 ##
 ## @example
 ## dec2base (123, "aei")
 ##      @result{} "eeeia"
 ## @end example
+##
+## The optional third argument, @var{len}, specifies the minimum
+## number of digits in the result.
 ## @end deftypefn
 ##
 ## @seealso{base2dec, dec2bin, bin2dec, hex2dec, dec2hex}
 
 ## Author: Daniel Calvelo <dcalvelo@yahoo.com>
 ## Adapted-by: Paul Kienzle <pkienzle@kienzle.powernet.co.uk>
 
-function out = dec2base (d, base)
+function retval = dec2base (n, base, len)
 
-  if (nargin != 2)
-    usage("dec2base (n, base)");
+  if (nargin < 2 || nargin > 3)
+    usage ("dec2base (n, base [, len])");
   endif
 
-  if (prod (size (d)) != length (d))
-    error("dec2base: cannot convert matrices.");
-  elseif (any (d < 0 | d != fix (d)))
-    error("dec2base: can only convert non-negative integers.")
+  if (prod (size (n)) != length (n))
+    error ("dec2base: cannot convert matrices.");
+  elseif (any (n < 0 | n != fix (n)))
+    error ("dec2base: can only convert non-negative integers.")
   endif
 
   symbols = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
   if (isstr (base))
     symbols = base;
     base = length (symbols);
     if any (diff (sort (toascii (symbols))) == 0)
       error ("dec2base: symbols representing digits must be unique.");
     endif
   elseif (! isscalar (base))
     error ("dec2base: cannot convert from several bases at once.");
   elseif (base < 2 || base > length (symbols))
     error ("dec2base: base must be between 2 and 36 or a string of symbols");
   endif
   
   ## determine number of digits required to handle all numbers
-  maxLen = floor (log (max (max (d), 1)) ./ log (base)) + 1;
+  max_len = floor (log (max (max (n), 1)) ./ log (base)) + 1;
+
+  if (nargin == 3)
+    max_len = max (max_len, len);
+  endif
   
   ## determine digits for each number
-  power = ones (length (d), 1) * (base .^ (maxLen-1 : -1 : 0));
-  d = d(:) * ones (1, maxLen);
-  digits = floor (rem (d, base*power) ./ power);
+  power = ones (length (n), 1) * (base .^ (max_len-1 : -1 : 0));
+  n = n(:) * ones (1, max_len);
+  digits = floor (rem (n, base*power) ./ power);
 
   ## convert digits to symbols
-  out = reshape (symbols (digits+1), size (digits));
+  retval = reshape (symbols (digits+1), size (digits));
 
 endfunction
diff --git a/scripts/strings/dec2bin.m b/scripts/strings/dec2bin.m
--- a/scripts/strings/dec2bin.m
+++ b/scripts/strings/dec2bin.m
@@ -13,35 +13,40 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} dec2bin (@var{n})
+## @deftypefn {Function File} {} dec2bin (@var{n}, @var{len})
 ## Return a binary number corresponding the nonnegative decimal number
 ## @var{n}, as a string of ones and zeros.  For example,
 ##
 ## @example
 ## dec2bin (14)
 ##      @result{} "1110"
 ## @end example
 ##
 ## If @var{n} is a vector, returns a string matrix, one row per value,
 ## padded with leading zeros to the width of the largest value.
+##
+## The optional second argument, @var{len}, specifies the minimum
+## number of digits in the result.
 ## @end deftypefn
 ##
 ## @seealso{bin2dec, dec2base, base2dec, hex2dec, dec2hex}
 
 ## Author: Daniel Calvelo <dcalvelo@yahoo.com>
-## 2001-02-02 Paul Kienzle <pkienzle@kienzle.powernet.co.uk>
+## Adapted-by: Paul Kienzle <pkienzle@kienzle.powernet.co.uk>
 
-function h = dec2bin (d)
+function retval = dec2bin (n, len)
 
-  if (nargin != 1)
-    usage ("dec2bin (b)");
+  if (nargin == 1)
+    retval = dec2base (n, 2);
+  elseif (nargin == 2)
+    retval = dec2base (n, 2, len);
   else
-    h = dec2base (d, 2);
+    usage ("dec2bin (n [, len])");
   endif
 
 endfunction
diff --git a/scripts/strings/dec2hex.m b/scripts/strings/dec2hex.m
--- a/scripts/strings/dec2hex.m
+++ b/scripts/strings/dec2hex.m
@@ -13,35 +13,40 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} dec2hex (@var{n})
+## @deftypefn {Function File} {} dec2hex (@var{n}, @var{len})
 ## Return the hexadecimal string corresponding to the nonnegative 
 ## integer @var{n}.  For example,
 ##
 ## @example
 ## dec2hex (2748)
 ##      @result{} "ABC"
 ## @end example
 ##
 ## If @var{n} is a vector, returns a string matrix, one row per value,
 ## padded with leading zeros to the width of the largest value.
+##
+## The optional second argument, @var{len}, specifies the minimum
+## number of digits in the result.
 ## @end deftypefn
 ##
 ## @seealso{hex2dec, dec2base, base2dec, bin2dec, dec2bin}
 
 ## Author: Daniel Calvelo <dcalvelo@yahoo.com>
 ## Adapted-by: Paul Kienzle <pkienzle@kienzle.powernet.co.uk>
 
-function h = dec2hex (d)
+function retval = dec2hex (n, len)
 
-  if (nargin != 1)
-    usage ("dec2hex (b)");
+  if (nargin == 1)
+    retval = dec2base (n, 16);
+  elseif (nargin == 2)
+    retval = dec2base (n, 16, len);
   else
-    h = dec2base (d, 16);
+    usage ("dec2hex (n [, len])");
   endif
 
 endfunction
