# HG changeset patch
# User jwe
# Date 1152987413 0
#      Sat Jul 15 18:16:53 2006 +0000
# Node ID 13aa80fc78398dff9acc52227419f21b6b1ce8a2
# Parent  beae0c02f101cf6df44a759e413468cedad32648
[project @ 2006-07-15 18:15:58 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2006-07-15  John W. Eaton  <jwe@octave.org>
+
+	* data-conv.cc: Instantiante swap_bytes templates here.
+
+	* MatrixType.cc (MatrixType::MatrixType):
+	Use complete initializer lists in constructors.
+
 2006-07-06  John W. Eaton  <jwe@octave.org>
 
 	* str-vec.cc (string_vector::string_vector (std::list<std::string>&)):
 	New constructor.
 	* str-vec.h: Provide decl.
 
 2006-07-01  David Bateman  <dbateman@free.fr>
 
diff --git a/liboctave/MatrixType.cc b/liboctave/MatrixType.cc
--- a/liboctave/MatrixType.cc
+++ b/liboctave/MatrixType.cc
@@ -30,41 +30,42 @@ Boston, MA 02110-1301, USA.
 #include "dMatrix.h"
 #include "CMatrix.h"
 #include "dSparse.h"
 #include "CSparse.h"
 #include "oct-spparms.h"
 
 // FIXME There is a large code duplication here
 
-MatrixType::MatrixType (void) : typ (MatrixType::Unknown), full (false),
-				nperm (0)
-{
-  sp_bandden = Voctave_sparse_controls.get_key ("bandden");
-} 
+MatrixType::MatrixType (void)
+  : typ (MatrixType::Unknown),
+    sp_bandden (Voctave_sparse_controls.get_key ("bandden")),
+    bandden (0), upper_band (0), lower_band (0), dense (false),
+    full (false), nperm (0), perm (0) { }
 
-MatrixType::MatrixType (const MatrixType &a) : typ (a.typ), 
-    sp_bandden (a.sp_bandden), bandden (a.bandden), 
+MatrixType::MatrixType (const MatrixType &a)
+  : typ (a.typ), sp_bandden (a.sp_bandden), bandden (a.bandden), 
     upper_band (a.upper_band), lower_band (a.lower_band), 
     dense (a.dense), full (a.full), nperm (a.nperm)
 { 
   if (nperm != 0)
     {
       perm = new octave_idx_type [nperm];
       for (octave_idx_type i = 0; i < nperm; i++)
 	perm[i] = a.perm[i];
     }
 }
 
 MatrixType::MatrixType (const Matrix &a)
+  : typ (MatrixType::Unknown),
+    sp_bandden (0), bandden (0), upper_band (0), lower_band (0),
+    dense (false), full (true), nperm (0), perm (0)
 {
   octave_idx_type nrows = a.rows ();
   octave_idx_type ncols = a.cols ();
-  nperm = 0;
-  full = true;
 
   if (ncols == nrows)
     {
       bool upper = true;
       bool lower = true;
       bool hermitian = true;
 
       for (octave_idx_type j = 0; j < ncols; j++)
@@ -107,21 +108,22 @@ MatrixType::MatrixType (const Matrix &a)
       else if (ncols == nrows)
 	typ = MatrixType::Full;
     }
   else
     typ = MatrixType::Rectangular;
 }
 
 MatrixType::MatrixType (const ComplexMatrix &a)
+  : typ (MatrixType::Unknown),
+    sp_bandden (0), bandden (0), upper_band (0), lower_band (0),
+    dense (false), full (true), nperm (0), perm (0)
 {
   octave_idx_type nrows = a.rows ();
   octave_idx_type ncols = a.cols ();
-  nperm = 0;
-  full = true;
 
   if (ncols == nrows)
     {
       bool upper = true;
       bool lower = true;
       bool hermitian = true;
 
       for (octave_idx_type j = 0; j < ncols; j++)
@@ -168,29 +170,29 @@ MatrixType::MatrixType (const ComplexMat
       else if (ncols == nrows)
 	typ = MatrixType::Full;
     }
   else
     typ = MatrixType::Rectangular;
 }
 
 MatrixType::MatrixType (const SparseMatrix &a)
+  : typ (MatrixType::Unknown),
+    sp_bandden (0), bandden (0), upper_band (0), lower_band (0),
+    dense (false), full (false), nperm (0), perm (0)
 {
   octave_idx_type nrows = a.rows ();
   octave_idx_type ncols = a.cols ();
   octave_idx_type nm = (ncols < nrows ? ncols : nrows);
   octave_idx_type nnz = a.nzmax ();
-  full = false;
 
   if (Voctave_sparse_controls.get_key ("spumoni") != 0.)
     (*current_liboctave_warning_handler) 
       ("Calculating Sparse Matrix Type");
 
-  nperm = 0;
-
   sp_bandden = Voctave_sparse_controls.get_key ("bandden");
   bool maybe_hermitian = false;
   typ = MatrixType::Full;
 
   if (nnz == nm)
     {
       matrix_type tmp_typ = MatrixType::Diagonal;
       octave_idx_type i;
@@ -494,30 +496,30 @@ MatrixType::MatrixType (const SparseMatr
 	      else
 		typ = MatrixType::Tridiagonal_Hermitian;
 	    }
 	}
     }
 }
 
 MatrixType::MatrixType (const SparseComplexMatrix &a)
+  : typ (MatrixType::Unknown),
+    sp_bandden (0), bandden (0), upper_band (0), lower_band (0),
+    dense (false), full (false), nperm (0), perm (0)
 {
   octave_idx_type nrows = a.rows ();
   octave_idx_type ncols = a.cols ();
   octave_idx_type nm = (ncols < nrows ? ncols : nrows);
   octave_idx_type nnz = a.nzmax ();
-  full = false;
 
   if (Voctave_sparse_controls.get_key ("spumoni") != 0.)  full = true;
 
     (*current_liboctave_warning_handler) 
       ("Calculating Sparse Matrix Type");
 
-  nperm = 0;
-
   sp_bandden = Voctave_sparse_controls.get_key ("bandden");
   bool maybe_hermitian = false;
   typ = MatrixType::Full;
 
   if (nnz == nm)
     {
       matrix_type tmp_typ = MatrixType::Diagonal;
       octave_idx_type i;
@@ -819,57 +821,57 @@ MatrixType::MatrixType (const SparseComp
 	      else if (typ == MatrixType::Banded)
 		typ = MatrixType::Banded_Hermitian;
 	      else
 		typ = MatrixType::Tridiagonal_Hermitian;
 	    }
 	}
     }
 }
-MatrixType::MatrixType (const matrix_type t, bool _full) : 
-  typ (MatrixType::Unknown), nperm (0)
+MatrixType::MatrixType (const matrix_type t, bool _full)
+  : typ (MatrixType::Unknown),
+    sp_bandden (Voctave_sparse_controls.get_key ("bandden")),
+    bandden (0), upper_band (0), lower_band (0),
+    dense (false), full (_full), nperm (0), perm (0)
 {
-  sp_bandden = Voctave_sparse_controls.get_key ("bandden");
-  full = _full;
-
   if (t == MatrixType::Full || t == MatrixType::Diagonal ||
       t == MatrixType::Permuted_Diagonal || t == MatrixType::Upper ||
       t == MatrixType::Lower || t == MatrixType::Tridiagonal ||
       t == MatrixType::Tridiagonal_Hermitian || t == MatrixType::Rectangular)
     typ = t;
   else
     (*current_liboctave_warning_handler) ("Invalid matrix type");
 }
 
 MatrixType::MatrixType (const matrix_type t, const octave_idx_type np,
-			const octave_idx_type *p, bool _full) : 
-  typ (MatrixType::Unknown), nperm (0)
+			const octave_idx_type *p, bool _full)
+  : typ (MatrixType::Unknown),
+    sp_bandden (Voctave_sparse_controls.get_key ("bandden")),
+    bandden (0), upper_band (0), lower_band (0),
+    dense (false), full (_full), nperm (0), perm (0)
 {
-  sp_bandden = Voctave_sparse_controls.get_key ("bandden");
-  full = _full;
-
   if (t == MatrixType::Permuted_Upper || t == MatrixType::Permuted_Lower)
     {
       typ = t;
       nperm = np;
       perm = new octave_idx_type [nperm];
       for (octave_idx_type i = 0; i < nperm; i++)
 	perm[i] = p[i];
     }
   else
     (*current_liboctave_warning_handler) ("Invalid matrix type");
 }
 
 MatrixType::MatrixType (const matrix_type t, const octave_idx_type ku,
-			const octave_idx_type kl, bool _full) : 
-  typ (MatrixType::Unknown), nperm (0)
+			const octave_idx_type kl, bool _full)
+  : typ (MatrixType::Unknown),
+    sp_bandden (Voctave_sparse_controls.get_key ("bandden")),
+    bandden (0), upper_band (0), lower_band (0),
+    dense (false), full (_full), nperm (0), perm (0)
 {
-  sp_bandden = Voctave_sparse_controls.get_key ("bandden");
-  full = _full;
-
   if (t == MatrixType::Banded || t == MatrixType::Banded_Hermitian)
     {
       typ = t;
       upper_band = ku;
       lower_band = kl;
     }
   else
     (*current_liboctave_warning_handler) ("Invalid sparse matrix type"); 
diff --git a/liboctave/data-conv.cc b/liboctave/data-conv.cc
--- a/liboctave/data-conv.cc
+++ b/liboctave/data-conv.cc
@@ -29,16 +29,20 @@ 02110-1301, USA.
 
 #include <iostream>
 #include <vector>
 
 #include "byte-swap.h"
 #include "data-conv.h"
 #include "lo-error.h"
 
+template void swap_bytes<2> (volatile void *, int);
+template void swap_bytes<4> (volatile void *, int);
+template void swap_bytes<8> (volatile void *, int);
+
 #if defined HAVE_LONG_LONG_INT
 #define FIND_SIZED_INT_TYPE(VAL, BITS, TQ, Q) \
   do \
     { \
       int sz = BITS / CHAR_BIT; \
       if (sizeof (TQ char) == sz) \
 	VAL = oct_data_conv::dt_ ## Q ## char; \
       else if (sizeof (TQ short) == sz) \
