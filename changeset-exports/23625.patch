# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497658682 25200
#      Fri Jun 16 17:18:02 2017 -0700
# Node ID b0a2367823f594e4fc7413fb3ced7440405174dc
# Parent  65e5ddf6d05956c2132650778c308f97c88b6631
Use hypot, hypotf from C++ std library.
These functions are guaranteed to be part of C++11 standard library.

* configure.ac: Remove AC_CHECK_FUNCS for hypotf, _hypotf.

* data.cc (do_hypot): Call binmap and pass std::hypot or std::hypotf as the
function to execute.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2450,17 +2450,17 @@ OCTAVE_CHECK_FUNC_COMPLEX(acosh)
 OCTAVE_CHECK_FUNC_COMPLEX(asin)
 OCTAVE_CHECK_FUNC_COMPLEX(asinh)
 OCTAVE_CHECK_FUNC_COMPLEX(atan)
 OCTAVE_CHECK_FUNC_COMPLEX(atanh)
 
 ## Check for nonstandard, but common math functions, that we need.
 
 dnl Use multiple AC_CHECKs to avoid line continuations '\' in list
-AC_CHECK_FUNCS([erf erff erfc erfcf exp2f hypotf _hypotf log2 log2f])
+AC_CHECK_FUNCS([erf erff erfc erfcf exp2f log2 log2f])
 
 ## Check for math defines such as M_LN2 in math.h
 AC_CACHE_CHECK([for MATH DEFINES in math.h],
   [octave_cv_header_math_defines],
   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
     #include <math.h>
     ]], [[
     double x = M_LN2;]])],
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -22,16 +22,17 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <cmath>
 #include <cstddef>
 #include <cstdint>
 #include <ctime>
 
 #include <algorithm>
 #include <limits>
 #include <string>
 
@@ -61,21 +62,16 @@ along with Octave; see the file COPYING.
 #include "ovl.h"
 #include "pager.h"
 #include "parse.h"
 #include "pt-mat.h"
 #include "utils.h"
 #include "variables.h"
 #include "xnorm.h"
 
-#if ! defined (HAVE_HYPOTF) && defined (HAVE__HYPOTF)
-#  define hypotf _hypotf
-#  define HAVE_HYPOTF 1
-#endif
-
 static void
 index_error (const char *fmt, const std::string& idx, const std::string& msg)
 {
   error (fmt, idx.c_str (), msg.c_str ());
 }
 
 DEFUN (all, args, ,
        doc: /* -*- texinfo -*-
@@ -343,34 +339,34 @@ do_hypot (const octave_value& x, const o
   if (arg0.is_single_type () || arg1.is_single_type ())
     {
       if (arg0.is_scalar_type () && arg1.is_scalar_type ())
         retval = hypotf (arg0.float_value (), arg1.float_value ());
       else
         {
           FloatNDArray a0 = arg0.float_array_value ();
           FloatNDArray a1 = arg1.float_array_value ();
-          retval = binmap<float> (a0, a1, ::hypotf, "hypot");
+          retval = binmap<float> (a0, a1, std::hypotf, "hypot");
         }
     }
   else
     {
       if (arg0.is_scalar_type () && arg1.is_scalar_type ())
         retval = hypot (arg0.scalar_value (), arg1.scalar_value ());
       else if (arg0.issparse () || arg1.issparse ())
         {
           SparseMatrix m0 = arg0.sparse_matrix_value ();
           SparseMatrix m1 = arg1.sparse_matrix_value ();
-          retval = binmap<double> (m0, m1, ::hypot, "hypot");
+          retval = binmap<double> (m0, m1, std::hypot, "hypot");
         }
       else
         {
           NDArray a0 = arg0.array_value ();
           NDArray a1 = arg1.array_value ();
-          retval = binmap<double> (a0, a1, ::hypot, "hypot");
+          retval = binmap<double> (a0, a1, std::hypot, "hypot");
         }
     }
 
   return retval;
 }
 
 DEFUN (hypot, args, ,
        doc: /* -*- texinfo -*-
