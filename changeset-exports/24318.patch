# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1511811515 -3600
#      Mon Nov 27 20:38:35 2017 +0100
# Node ID a17862b28f0d8b10e0fcde4410652bcfd400ecb4
# Parent  221f1eacd66a1b2615c204c8e72a422a3bcf0e43
handle floating widgets on all platforms as done on windows (bug #52378)

* main-window.cc (set_window_layout): remove conditional compilations depending
  on the platform, fix overwriting of the geometry for floating widgets

* octave-dock-widget.cc (octave_dock_widget, make widget, make_window,
  set_title, save_settings, set_style): remove conditional compilations and
  only use the code formerly used in windows

* octave-dock-widget.h: remove conditional compilations and
  only use the code formerly used in windows, declaring internal variables
  now needed for all platforms

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -1277,37 +1277,35 @@ main_window::set_window_layout (QSetting
         {
           bool floating = settings->value
               ("DockWidgets/" + name + "Floating", false).toBool ();
           bool visible = settings->value
               ("DockWidgets/" + name + "Visible", true).toBool ();
 
           // If floating, make window from widget.
           if (floating)
-            widget->make_window ();
-          else if (! widget->parent ())  // should not be floating but is
-            widget->make_widget (false); // no docking, just reparent
-#if ! defined (Q_OS_WIN32)
-          // restore geometry
-          QVariant val = settings->value ("DockWidgets/" + name);
-          widget->restoreGeometry (val.toByteArray ());
-#endif
-          // make widget visible if desired
-          if (floating && visible)              // floating and visible
             {
-              if (settings->value ("DockWidgets/" + widget->objectName ()
-                                   + "_minimized").toBool ())
-                widget->showMinimized ();
-              else
-                widget->setVisible (true);
+              widget->make_window ();
+
+              if (visible)
+                {
+                  if (settings->value ("DockWidgets/" + widget->objectName ()
+                                      + "_minimized").toBool ())
+                    widget->showMinimized ();
+                  else
+                    widget->setVisible (true);
+                }
             }
-          else
+          else  // not floating
             {
+              if (! widget->parent ())        // should not be floating but is
+                widget->make_widget (false);  // no docking, just reparent
+
               widget->make_widget ();
-              widget->setVisible (visible);     // not floating -> show
+              widget->setVisible (visible);   // not floating -> show
             }
         }
     }
 
   restoreState (settings->value ("MainWindow/windowState").toByteArray ());
   restoreGeometry (settings->value ("MainWindow/geometry").toByteArray ());
 
   show ();
diff --git a/libgui/src/octave-dock-widget.cc b/libgui/src/octave-dock-widget.cc
--- a/libgui/src/octave-dock-widget.cc
+++ b/libgui/src/octave-dock-widget.cc
@@ -53,18 +53,17 @@ octave_dock_widget::octave_dock_widget (
   connect (p, SIGNAL (active_dock_changed (octave_dock_widget*,
                                            octave_dock_widget*)),
            this, SLOT (handle_active_dock_changed (octave_dock_widget*,
                                                    octave_dock_widget*)));
 
   QStyle *st = style ();
   m_icon_size = 0.75*st->pixelMetric (QStyle::PM_SmallIconSize);
 
-#if defined (Q_OS_WIN32)
-  // windows: add an extra title bar that persists when floating
+  // add an extra title bar that persists when floating
 
   setFeatures (QDockWidget::DockWidgetMovable); // not floatable or closeable
 
   // the custom (extra) title bar of the widget
   m_dock_action = new QAction
                    (QIcon (":/actions/icons/widget-undock.png"), "", this);
   m_dock_action-> setToolTip (tr ("Undock widget"));
   connect (m_dock_action, SIGNAL (triggered (bool)),
@@ -93,28 +92,16 @@ octave_dock_widget::octave_dock_widget (
   h_layout->addWidget (m_close_button);
   h_layout->setSpacing (0);
   h_layout->setContentsMargins (5,2,2,2);
 
   m_title_widget = new QWidget ();
   m_title_widget->setLayout (h_layout);
   setTitleBarWidget (m_title_widget);
 
-#else
-
-  // non windows: qt takes control of floating widgets
-  setFeatures (QDockWidget::DockWidgetMovable |
-               QDockWidget::DockWidgetClosable |
-               QDockWidget::DockWidgetFloatable); // floatable and closeable
-
-  connect (this, SIGNAL (topLevelChanged (bool)),
-           this, SLOT (change_floating (bool)));
-
-#endif
-
   // copy & paste handling
   connect (p, SIGNAL (copyClipboard_signal ()),
            this, SLOT (copyClipboard ()));
   connect (p, SIGNAL (pasteClipboard_signal ()),
            this, SLOT (pasteClipboard ()));
   connect (p, SIGNAL (selectAll_signal ()),
            this, SLOT (selectAll ()));
   // undo handling
@@ -133,19 +120,17 @@ octave_dock_widget::connect_visibility_c
            this, SLOT (handle_visibility (bool)));
   emit active_changed (isVisible ());  // emit once for init of window menu
 }
 
 // make the widget floating
 void
 octave_dock_widget::make_window (void)
 {
-#if defined (Q_OS_WIN32)
-
-  // windows: the widget has to be reparented (parent = 0)
+  // the widget has to be reparented (parent = 0)
 
   QSettings *settings = resource_manager::get_settings ();
 
   // save the docking area and geometry for later redocking
   // FIXME: dockWidgetArea always returns 2
   settings->setValue ("DockWidgets/" + objectName () + "_dock_area",
                       m_parent->dockWidgetArea (this));
   settings->setValue ("DockWidgets/" + objectName (), saveGeometry ());
@@ -157,39 +142,26 @@ octave_dock_widget::make_window (void)
                                 + m_icon_color + ".png"));
   m_dock_action->setToolTip (tr ("Dock widget"));
 
   // restore the last geometry when floating
   setGeometry (settings->value ("DockWidgets/" + objectName ()
                                 + "_floating_geometry",
                                 QRect (50,100,480,480)).toRect ());
 
-#else
-
-  // non windows: Just set the appripriate window flag
-  setWindowFlags (Qt::Window);
-
-  QString css = styleSheet ();
-  css.replace ("widget-undock", "widget-dock");
-  setStyleSheet (css);
-
-#endif
-
   m_floating = true;
 
   set_focus_predecessor ();  // set focus previously active widget if tabbed
 }
 
 // dock the widget
 void
 octave_dock_widget::make_widget (bool dock)
 {
-#if defined (Q_OS_WIN32)
-
-  // windows: Since floating widget has no parent, we have to read it
+  // Since floating widget has no parent, we have to read it
 
   QSettings *settings = resource_manager::get_settings ();
 
   // save last floating geometry if widget really was floating
   if (m_floating)
     settings->setValue ("DockWidgets/" + objectName () + "_floating_geometry",
                         geometry ());
   settings->sync ();
@@ -206,44 +178,28 @@ octave_dock_widget::make_widget (bool do
   else  // only reparent, no docking
     setParent (m_parent);
 
   // adjust the (un)dock icon
   m_dock_action->setIcon (QIcon (":/actions/icons/widget-undock"
                                 + m_icon_color + ".png"));
   m_dock_action->setToolTip (tr ("Undock widget"));
 
-#else
-
-  // non windows: just say we are a docked widget again
-
-  Q_UNUSED (dock);
-
-  setWindowFlags (Qt::Widget);
-
-  QString css = styleSheet ();
-  css.replace ("widget-dock", "widget-undock");
-  setStyleSheet (css);
-
-#endif
-
   m_floating = false;
 }
 
 // set the title in the dockwidgets title bar
 void
 octave_dock_widget::set_title (const QString& title)
 {
-#if defined (Q_OS_WIN32)
   QHBoxLayout *h_layout
     = static_cast<QHBoxLayout *> (titleBarWidget ()->layout ());
   QLabel *label = new QLabel (title);
   label->setStyleSheet ("background: transparent;");
   h_layout->insertWidget (0,label);
-#endif
   setWindowTitle (title);
 }
 
 // set the widget which previously had focus when tabified
 void
 octave_dock_widget::set_predecessor_widget (octave_dock_widget *prev_widget)
 {
   m_predecessor_widget = prev_widget;
@@ -332,22 +288,20 @@ octave_dock_widget::save_settings (void)
   QString name = objectName ();
   QSettings *settings = resource_manager::get_settings ();
 
   if (! settings)
     return;
 
   settings->beginGroup ("DockWidgets");
 
-#if defined (Q_OS_WIN32)
   if (m_floating) // widget is floating (windows), save actual floating geometry
     settings->setValue (name+"_floating_geometry", geometry ());
   else           // not floating save docked (normal) geometry
-#endif
-    settings->setValue (name, saveGeometry ());
+  settings->setValue (name, saveGeometry ());
 
   settings->setValue (name+"Visible", isVisible ()); // store visibility
   settings->setValue (name+"Floating", m_floating);    // store visibility
   settings->setValue (name+"_minimized", isMinimized ()); // store minimized
 
   settings->endGroup ();
   settings->sync ();
 }
@@ -435,59 +389,31 @@ octave_dock_widget::set_style (bool acti
 
       QString background =
         QString ("background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,"
                  "            stop: 0 %1, stop: 0.60 %2, stop: 0.95 %2 stop: 1.0 %3);").
         arg (bg_col_top.name ()).
         arg (bg_col.name ()).
         arg (bg_col_bottom.name ());
 
-#if defined (Q_OS_WIN32)
       css = background + QString (" color: %1 ;").arg (fg_col.name ());
-#else
-      css = QString ("QDockWidget::title { " + background +
-                     "                     text-align: " + alignment + ";"
-                     "                     padding: 0px 0px 0px 4px;}\n"
-                     "QDockWidget { color: %1 ; "
-                     "  titlebar-close-icon: url(:/actions/icons/widget-close%2.png);"
-                     "  titlebar-normal-icon: url(:/actions/icons/"+dock_icon+"%2); }"
-                     "QDockWidget::close-button,"
-                     "QDockWidget::float-button { border: 0px; icon-size: %3px; width: %3px}"
-                     ).
-                     arg (fg_col.name ()).arg (icon_col).arg (m_icon_size);
-#endif
     }
   else
     {
-#if defined (Q_OS_WIN32)
       css = QString ("");
-#else
-      css = QString ("QDockWidget::title { text-align: " + alignment + ";"
-                     "                     padding: 0px 0px 0px 4px;}"
-                     "QDockWidget {"
-                     "  titlebar-close-icon: url(:/actions/icons/widget-close.png);"
-                     "  titlebar-normal-icon: url(:/actions/icons/"+dock_icon+"); }"
-                     "QDockWidget::close-button,"
-                     "QDockWidget::float-button { border: 0px; icon-size: %1px; width: %1px}"
-                    ).arg (m_icon_size);
-#endif
     }
 
-#if defined (Q_OS_WIN32)
   m_title_widget->setStyleSheet (css);
   css_button = QString ("background: transparent; border: 0px;");
   m_dock_button->setStyleSheet (css_button);
   m_close_button->setStyleSheet (css_button);
   m_dock_action->setIcon (QIcon (":/actions/icons/" + dock_icon + icon_col +
                                 ".png"));
   m_close_action->setIcon (QIcon (":/actions/icons/widget-close" + icon_col +
                                  ".png"));
-#else
-  setStyleSheet (css);
-#endif
 }
 
 // set focus to previously active widget in tabbed widget stack
 void
 octave_dock_widget::set_focus_predecessor (void)
 {
   if (m_predecessor_widget)    // only != 0 if widget was tabbed
     m_predecessor_widget->focus ();
diff --git a/libgui/src/octave-dock-widget.h b/libgui/src/octave-dock-widget.h
--- a/libgui/src/octave-dock-widget.h
+++ b/libgui/src/octave-dock-widget.h
@@ -134,18 +134,16 @@ private:
   QColor m_bg_color;
   QColor m_bg_color_active;
   QColor m_fg_color;
   QColor m_fg_color_active;
   QString m_icon_color;
   QString m_icon_color_active;
   octave_dock_widget *m_predecessor_widget;
 
-#if defined (Q_OS_WIN32)
   QWidget *m_title_widget;
   QToolButton *m_dock_button;
   QToolButton *m_close_button;
   QAction *m_dock_action;
   QAction *m_close_action;
-#endif
 };
 
 #endif
