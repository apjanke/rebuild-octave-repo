# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498134145 14400
#      Thu Jun 22 08:22:25 2017 -0400
# Node ID e719f04a5707c06e7ec89280132986b4ac36f7fd
# Parent  f71c0195b19d0be7f700fad93d85d88be0947e1b
new output stream operator for octave::sys::time objects

* oct-time.h, oct-time.cc (time::operator <<): New operator.

diff --git a/liboctave/system/oct-time.cc b/liboctave/system/oct-time.cc
--- a/liboctave/system/oct-time.cc
+++ b/liboctave/system/oct-time.cc
@@ -22,22 +22,25 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <cmath>
 #include <ctime>
 
+#include <iomanip>
+#include <iostream>
 #include <limits>
 
 #include "lo-error.h"
 #include "lo-utils.h"
 #include "oct-locbuf.h"
 #include "oct-time.h"
+#include "octave-preserve-stream-state.h"
 #include "strftime-wrapper.h"
 #include "strptime-wrapper.h"
 #include "time-wrappers.h"
 
 namespace octave
 {
   namespace sys
   {
@@ -83,16 +86,27 @@ namespace octave
     }
 
     std::string
     time::ctime (void) const
     {
       return localtime (*this).asctime ();
     }
 
+    std::ostream&
+    operator << (std::ostream& os, const time& ot)
+    {
+      preserve_stream_state stream_state (os);
+
+      os << ot.ot_unix_time << "."
+         << std::setw (6) << std::setfill ('0') << ot.ot_usec;
+
+      return os;
+    }
+
     void
     time::stamp (void)
     {
       octave_gettimeofday_wrapper (&ot_unix_time, &ot_usec);
     }
 
     // From the mktime() manual page:
     //
diff --git a/liboctave/system/oct-time.h b/liboctave/system/oct-time.h
--- a/liboctave/system/oct-time.h
+++ b/liboctave/system/oct-time.h
@@ -21,16 +21,18 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_oct_time_h)
 #define octave_oct_time_h 1
 
 #include "octave-config.h"
 
 #include <ctime>
+
+#include <iosfwd>
 #include <string>
 
 static inline double
 as_double (time_t sec, long usec)
 {
   // Unix time will be exactly representable as a double for more than
   // 100 million years, so no worry there, and microseconds has a
   // range of 0-1e6, so we are safe there as well.
@@ -106,16 +108,18 @@ namespace octave
       }
 
       time_t unix_time (void) const { return ot_unix_time; }
 
       long usec (void) const { return ot_usec; }
 
       std::string ctime (void) const;
 
+      friend std::ostream& operator << (std::ostream& os, const time& ot);
+
     private:
 
       // Seconds since the epoch.
       time_t ot_unix_time;
 
       // Additional microseconds.
       long ot_usec;
     };
