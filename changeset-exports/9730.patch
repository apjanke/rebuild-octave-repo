# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1255594387 -7200
#      Thu Oct 15 10:13:07 2009 +0200
# Node ID dd4aa19c305375296ca363babdb69098c1f09e06
# Parent  3b7e644bb46d4e0431cac60d44aae2e473cd3b26
update docstring of lookup

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-10-15  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/lookup.cc (Flookup): Update docstring.
+
 2009-10-15  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov.h (octave_value::octave_value (octave_base_value *, bool)) : New constructor.
 	(octave_value::octave_value (octave_base_value *, int)): Deprecate.
 	* DLD-FUNCTIONS/cellfun.cc (Fcellfun): Allow the obsolete func body syntax.
 
 2009-10-15  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/DLD-FUNCTIONS/lookup.cc b/src/DLD-FUNCTIONS/lookup.cc
--- a/src/DLD-FUNCTIONS/lookup.cc
+++ b/src/DLD-FUNCTIONS/lookup.cc
@@ -137,23 +137,23 @@ DEFUN_DLD (lookup, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{idx} =} lookup (@var{table}, @var{y}, @var{opt})\n\
 Lookup values in a sorted table.  Usually used as a prelude to\n\
 interpolation.\n\
 \n\
 If table is increasing and @code{idx = lookup (table, y)}, then\n\
 @code{table(idx(i)) <= y(i) < table(idx(i+1))} for all @code{y(i)}\n\
 within the table.  If @code{y(i) < table (1)} then\n\
-@code{idx(i)} is 0. If @code{y(i) >= table(end)} then\n\
+@code{idx(i)} is 0. If @code{y(i) >= table(end)} or @code{isnan (y(i))} then\n\
 @code{idx(i)} is @code{n}.\n\
 \n\
 If the table is decreasing, then the tests are reversed.\n\
 For non-strictly monotonic tables, empty intervals are always skipped.\n\
 The result is undefined if @var{table} is not monotonic, or if\n\
-@b{any} of @var{table} or @var{y} contains a NaN.\n\
+@var{table} contains a NaN.\n\
 \n\
 The algorithm used by lookup is standard binary search, with optimizations\n\
 to speed up the case of arrays containing pre-ordered portions (sampling).\n\
 In particular, looking up a single entry is of logarithmic complexity\n\
 (unless a conversion occurs due to non-numeric or unequal types).\n\
 \n\
 @var{table} and @var{y} can also be cell arrays of strings\n\
 (or @var{y} can be a single string).  In this case, string lookup\n\
