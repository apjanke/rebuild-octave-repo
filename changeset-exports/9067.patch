# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1238303931 25200
#      Sat Mar 28 22:18:51 2009 -0700
# Node ID 8970b4b10e9f31a3480e3cec976694a4bfd42f5d
# Parent  be150a172010ce09a18edbca3273c70e320cc3df
Cleanup documentation for quad.texi and diffeq.texi

Grammarcheck input .txi files
Spellcheck .texi files

diff --git a/doc/interpreter/diffeq.txi b/doc/interpreter/diffeq.txi
--- a/doc/interpreter/diffeq.txi
+++ b/doc/interpreter/diffeq.txi
@@ -41,19 +41,21 @@ The function @code{lsode} can be used to
 $$
  {dx\over dt} = f (x, t)
 $$
 @end tex
 @end iftex
 @ifinfo
 
 @example
+@group
 dx
 -- = f (x, t)
 dt
+@end group
 @end example
 @end ifinfo
 
 @noindent
 using Hindmarsh's ODE solver @sc{Lsode}.
 
 
 
@@ -131,17 +133,17 @@ where
 @iftex
 @tex
 $\dot{x} = {dx \over dt}$
 @end tex
 @end iftex
 @ifnottex
 @math{x-dot}
 @end ifnottex
-is the derivative of @math{x}. The equation is solved using Petzold's
+is the derivative of @math{x}.  The equation is solved using Petzold's
 DAE solver @sc{Daspk}.
 
 @DOCSTRING(daspk)
 
 @DOCSTRING(daspk_options)
 
 Octave also includes @sc{Dassl}, an earlier version of @var{Daspk},
 and @var{dasrt}, which can be used to solve DAEs with constraints
diff --git a/doc/interpreter/quad.txi b/doc/interpreter/quad.txi
--- a/doc/interpreter/quad.txi
+++ b/doc/interpreter/quad.txi
@@ -46,17 +46,17 @@ These are
 @table @code
 @item quad
 Numerical integration based on Gaussian quadrature.
 
 @item quadl
 Numerical integration using an adaptive Lobatto rule.
 
 @item quadgk
-Numerical integration using an adaptive Guass-Konrod rule.
+Numerical integration using an adaptive Gauss-Konrod rule.
 
 @item quadv
 Numerical integration using an adaptive vectorized Simpson's rule.
 
 @item trapz
 Numerical integration using the trapezoidal method.
 @end table
 
@@ -171,18 +171,20 @@ at = a(2:n-1,2:n-1);
 bt = b(2:n-1,2:n-1);
 rhs = alpha * b(2:n-1,n) - a(2:n-1,n);
 @end group
 @end example
 
 Then the solution at the roots @var{r} is
 
 @example
+@group
 u = [ 0; (at - alpha * bt) \ rhs; 1]
      @result{} [ 0.00; 0.004; 0.01 0.00; 0.12; 0.62; 1.00 ]
+@end group
 @end example
 
 @node Functions of Multiple Variables
 @section Functions of Multiple Variables
 
 Octave does not have built-in functions for computing the integral of
 functions of multiple variables directly.  It is however possible to
 compute the integral of a function of multiple variables using the
@@ -208,35 +210,39 @@ The first approach creates a function th
 respect to @math{x}, and then integrates that function with respect to
 @math{y}.  Since @code{quad} is written in Fortran it cannot be called
 recursively.  This means that @code{quad} cannot integrate a function
 that calls @code{quad}, and hence cannot be used to perform the double
 integration.  It is however possible with @code{quadl}, which is what
 the following code does.
 
 @example
+@group
 function I = g(y)
   I = ones(1, length(y));
   for i = 1:length(y)
     f = @@(x) sin(pi.*x.*y(i)).*sqrt(x.*y(i));
     I(i) = quadl(f, 0, 1);
   endfor
 endfunction
 
 I = quadl("g", 0, 1)
       @result{} 0.30022
+@end group
 @end example
 
 The above process can be simplified with the @code{dblquad} and
 @code{triplequad} functions for integrals over two and three
-variables. For example
+variables.  For example
 
 @example
+@group
 I =  dblquad (@@(x, y) sin(pi.*x.*y).*sqrt(x.*y), 0, 1, 0, 1)
       @result{} 0.30022
+@end group
 @end example
 
 @DOCSTRING(dblquad)
 
 @DOCSTRING(triplequad)
 
 The above mentioned approach works but is fairly slow, and that problem
 increases exponentially with the dimensionality the problem.  Another
@@ -250,25 +256,27 @@ points by
  \int_0^1 \int_0^1 f(x,y) d x d y \approx \sum_{i=1}^n \sum_{j=1}^n q_i q_j f(r_i, r_j),
 $$
 @end tex
 @end iftex
 @ifnottex
 the sum over @code{i=1:n} and @code{j=1:n} of @code{q(i)*q(j)*f(r(i),r(j))},
 @end ifnottex
 where @math{q} and @math{r} is as returned by @code{colloc(n)}.  The
-generalisation to more than two variables is straight forward.  The
+generalization to more than two variables is straight forward.  The
 following code computes the studied integral using @math{n=7} points.
 
 @example
+@group
 f = @@(x,y) sin(pi*x*y').*sqrt(x*y');
 n = 7;
 [t, A, B, q] = colloc(n);
 I = q'*f(t,t)*q;
       @result{} 0.30022
+@end group
 @end example
 
 @noindent
 It should be noted that the number of points determines the quality
 of the approximation.  If the integration needs to be performed between
 @math{a} and @math{b} instead of 0 and 1, a change of variables is needed.
 
 
diff --git a/liboctave/DASPK-opts.in b/liboctave/DASPK-opts.in
--- a/liboctave/DASPK-opts.in
+++ b/liboctave/DASPK-opts.in
@@ -51,18 +51,20 @@ OPTION
   DOC_ITEM
 Relative tolerance.  May be either vector or scalar.  If a vector, it
 must match the dimension of the state vector, and the absolute
 tolerance must also be a vector of the same length.
 
 The local error test applied at each integration step is
 
 @example
+@group
   abs (local error in x(i))
        <= rtol(i) * abs (Y(i)) + atol(i)
+@end group
 @end example
   END_DOC_ITEM
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (1);
     $OPTVAR(0) = ::sqrt (DBL_EPSILON);
   END_INIT_BODY
@@ -89,17 +91,17 @@ one of two initialization problems:
 @enumerate
 @item Given Y_d, calculate Y_a and Y'_d
 @item Given Y', calculate Y.
 @end enumerate
 
 In either case, initial values for the given components are input, and
 initial guesses for the unknown components must also be provided as
 input.  Set this option to 1 to solve the first problem, or 2 to solve
-the second (the default default is 0, so you must provide a set of
+the second (the default is 0, so you must provide a set of
 initial conditions that are consistent).
 
 If this option is set to a nonzero value, you must also set the
 @code{\"algebraic variables\"} option to declare which variables in the
 problem are algebraic.
   END_DOC_ITEM
   TYPE = "octave_idx_type"
   INIT_VALUE = "0"
@@ -143,17 +145,17 @@ 0).
 @item STPTOL
 Minimum scaled step in linesearch algorithm (default is eps^(2/3)).
 @item EPINIT
 Swing factor in the Newton iteration convergence test.  The test is
 applied to the residual vector, premultiplied by the approximate
 Jacobian.  For convergence, the weighted RMS norm of this vector
 (scaled by the error weights) must be less than @code{EPINIT*EPCON},
 where @code{EPCON} = 0.33 is the analogous test constant used in the
-time steps. The default is @code{EPINIT} = 0.01.
+time steps.  The default is @code{EPINIT} = 0.01.
 @end table
   END_DOC_ITEM
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (6);
     $OPTVAR(0) = 5.0;
     $OPTVAR(1) = 6.0;
diff --git a/liboctave/DASRT-opts.in b/liboctave/DASRT-opts.in
--- a/liboctave/DASRT-opts.in
+++ b/liboctave/DASRT-opts.in
@@ -50,18 +50,20 @@ OPTION
   NAME = "relative tolerance"
   DOC_ITEM
 Relative tolerance.  May be either vector or scalar.  If a vector, it
 must match the dimension of the state vector, and the absolute
 tolerance must also be a vector of the same length.
 
 The local error test applied at each integration step is
 @example
+@group
   abs (local error in x(i)) <= ...
       rtol(i) * abs (Y(i)) + atol(i)
+@end group
 @end example
   END_DOC_ITEM
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (1);
     $OPTVAR(0) = ::sqrt (DBL_EPSILON);
   END_INIT_BODY
diff --git a/liboctave/DASSL-opts.in b/liboctave/DASSL-opts.in
--- a/liboctave/DASSL-opts.in
+++ b/liboctave/DASSL-opts.in
@@ -51,18 +51,20 @@ OPTION
   DOC_ITEM
 Relative tolerance.  May be either vector or scalar.  If a vector, it
 must match the dimension of the state vector, and the absolute
 tolerance must also be a vector of the same length.
 
 The local error test applied at each integration step is
 
 @example
+@group
   abs (local error in x(i))
        <= rtol(i) * abs (Y(i)) + atol(i)
+@end group
 @end example
   END_DOC_ITEM
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (1);
     $OPTVAR(0) = ::sqrt (DBL_EPSILON);
   END_INIT_BODY
diff --git a/liboctave/LSODE-opts.in b/liboctave/LSODE-opts.in
--- a/liboctave/LSODE-opts.in
+++ b/liboctave/LSODE-opts.in
@@ -49,18 +49,20 @@ OPTION
   NAME = "relative tolerance"
   DOC_ITEM
 Relative tolerance parameter.  Unlike the absolute tolerance, this
 parameter may only be a scalar.
 
 The local error test applied at each integration step is
 
 @example
+@group
   abs (local error in x(i)) <= ...
       rtol * abs (y(i)) + atol(i)
+@end group
 @end example
   END_DOC_ITEM
   TYPE = "double"
   INIT_VALUE = "::sqrt (DBL_EPSILON)"
   SET_EXPR = "(val > 0.0) ? val : ::sqrt (DBL_EPSILON)"
 END_OPTION
 
 OPTION
diff --git a/scripts/general/quadgk.m b/scripts/general/quadgk.m
--- a/scripts/general/quadgk.m
+++ b/scripts/general/quadgk.m
@@ -15,25 +15,25 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} quadgk (@var{f}, @var{a}, @var{b}, @var{abstol}, @var{trace})
 ## @deftypefnx {Function File} {} quadgk (@var{f}, @var{a}, @var{b}, @var{prop}, @var{val}, @dots{})
 ## @deftypefnx {Function File} {[@var{q}, @var{err}] =} quadgk (@dots{})
-## Numerically evaluate integral using adaptive Guass-Konrod quadrature.
+## Numerically evaluate integral using adaptive Gauss-Konrod quadrature.
 ## The formulation is based on a proposal by L.F. Shampine,
 ## @cite{"Vectorized adaptive quadrature in @sc{matlab}", Journal of
 ## Computational and Applied Mathematics, pp131-140, Vol 211, Issue 2,
-## Feb 2008} where all function evalutions at an iteration are
+## Feb 2008} where all function evaluations at an iteration are
 ## calculated with a single call to @var{f}.  Therefore the function
 ## @var{f} must be of the form @code{@var{f} (@var{x})} and accept
 ## vector values of @var{x} and return a vector of the same length
-## representing the function evalutaions at the given values of @var{x}.
+## representing the function evaluations at the given values of @var{x}.
 ## The function @var{f} can be defined in terms of a function handle,
 ## inline function or string.
 ##
 ## The bounds of the quadrature @code{[@var{a}, @var{b}]} can be finite
 ## or infinite and contain weak end singularities.  Variable
 ## transformation will be used to treat infinite intervals and weaken
 ## the singularities.  For example
 ##
@@ -44,17 +44,17 @@
 ## @noindent
 ## Note that the formulation of the integrand uses the
 ## element-by-element operator @code{./} and all user functions to
 ## @code{quadgk} should do the same.
 ##
 ## The absolute tolerance can be passed as a fourth argument in a manner
 ## compatible with @code{quadv}.  Equally the user can request that
 ## information on the convergence can be printed is the fifth argument
-## is logicallly true.
+## is logically true.
 ##
 ## Alternatively, certain properties of @code{quadgk} can be passed as
 ## pairs @code{@var{prop}, @var{val}}.  Valid properties are
 ##
 ## @table @code
 ## @item AbsTol
 ## Defines the absolute error tolerance for the quadrature.  The default
 ## absolute tolerance is 1e-10.
@@ -90,17 +90,17 @@
 ## @item Trace
 ## If logically true, then @code{quadgk} prints information on the
 ## convergence of the quadrature at each iteration.
 ##@end table
 ##
 ## If any of @var{a}, @var{b} or @var{waypoints} is complex, then the
 ## quadrature is treated as a contour integral along a piecewise
 ## continuous path defined by the above.  In this case the integral is
-## assuemd to have no edge singularities.  For example
+## assumed to have no edge singularities.  For example
 ##
 ## @example
 ## @group
 ## quadgk (@@(z) log (z), 1+1i, 1+1i, "WayPoints",
 ##         [1-1i, -1,-1i, -1+1i])
 ## @end group
 ## @end example
 ##
@@ -272,17 +272,17 @@ function [q, err] = quadgk (f, a, b, var
       endif
       h = 2;
       trans = @(t) ((b - a) ./ 4) * t .* (3 - t.^2) + (b + a) ./ 2;
       f = @(t) f((b - a) ./ 4 .* t .* (3 - t.^2) + (b + a) ./ 2) .* ...
            3 .* (b - a) ./ 4 .* (1 - t.^2);
     endif
 
     ## Split interval into at least 10 sub-interval with a 15 point
-    ## Guass-Kronrod rule giving a minimum of 150 function evaluations
+    ## Gauss-Kronrod rule giving a minimum of 150 function evaluations
     while (length (subs) < 11)
       subs = [subs' ; subs(1:end-1)' + diff(subs') ./ 2, NaN](:)(1 : end - 1);
     endwhile
     subs = [subs(1:end-1), subs(2:end)];
 
     warn_state = warning ("query", "Octave:divide-by-zero");
 
     unwind_protect
@@ -375,17 +375,17 @@ function [q, err] = quadgk (f, a, b, var
       if (strcmp (warn_state.state, "on")) 
 	warning ("on", "Octave:divide-by-zero");
       endif
     end_unwind_protect
   endif
 endfunction
 
 function [q, err] = __quadgk_eval__ (f, subs)
-  ## A (15,7) point pair of Guass-Konrod quadrature rules. The abscissa
+  ## A (15,7) point pair of Gauss-Konrod quadrature rules. The abscissa
   ## and weights are copied directly from dqk15w.f from quadpack
 
   persistent abscissa = [-0.9914553711208126e+00, -0.9491079123427585e+00, ...
 			 -0.8648644233597691e+00, -0.7415311855993944e+00, ...
 			 -0.5860872354676911e+00, -0.4058451513773972e+00, ...
 			 -0.2077849550078985e+00,  0.0000000000000000e+00, ...
 			  0.2077849550078985e+00,  0.4058451513773972e+00, ...
 			  0.5860872354676911e+00,  0.7415311855993944e+00, ...
diff --git a/src/DLD-FUNCTIONS/daspk.cc b/src/DLD-FUNCTIONS/daspk.cc
--- a/src/DLD-FUNCTIONS/daspk.cc
+++ b/src/DLD-FUNCTIONS/daspk.cc
@@ -214,17 +214,17 @@ residuals for the set of equations.  It 
 @var{res} = f (@var{x}, @var{xdot}, @var{t})\n\
 @end example\n\
 \n\
 @noindent\n\
 in which @var{x}, @var{xdot}, and @var{res} are vectors, and @var{t} is a\n\
 scalar.\n\
 \n\
 If @var{fcn} is a two-element string array or a two-element cell array\n\
-of strings, inlines, or function handles, the first element names\n\
+of strings, inline functions, or function handles, the first element names\n\
 the function @math{f} described above, and the second element names a\n\
 function to compute the modified Jacobian\n\
 @tex\n\
 $$\n\
 J = {\\partial f \\over \\partial x}\n\
   + c {\\partial f \\over \\partial \\dot{x}}\n\
 $$\n\
 @end tex\n\
diff --git a/src/DLD-FUNCTIONS/dasrt.cc b/src/DLD-FUNCTIONS/dasrt.cc
--- a/src/DLD-FUNCTIONS/dasrt.cc
+++ b/src/DLD-FUNCTIONS/dasrt.cc
@@ -257,17 +257,17 @@ residuals for the set of equations.  It 
 @var{res} = f (@var{x}, @var{xdot}, @var{t})\n\
 @end example\n\
 \n\
 @noindent\n\
 in which @var{x}, @var{xdot}, and @var{res} are vectors, and @var{t} is a\n\
 scalar.\n\
 \n\
 If @var{fcn} is a two-element string array or a two-element cell array\n\
-of strings, inlines, or function handles, the first element names\n\
+of strings, inline functions, or function handles, the first element names\n\
 the function @math{f} described above, and the second element names a\n\
 function to compute the modified Jacobian\n\
 \n\
 @tex\n\
 $$\n\
 J = {\\partial f \\over \\partial x}\n\
   + c {\\partial f \\over \\partial \\dot{x}}\n\
 $$\n\
diff --git a/src/DLD-FUNCTIONS/dassl.cc b/src/DLD-FUNCTIONS/dassl.cc
--- a/src/DLD-FUNCTIONS/dassl.cc
+++ b/src/DLD-FUNCTIONS/dassl.cc
@@ -217,17 +217,17 @@ residuals for the set of equations.  It 
 @var{res} = f (@var{x}, @var{xdot}, @var{t})\n\
 @end example\n\
 \n\
 @noindent\n\
 in which @var{x}, @var{xdot}, and @var{res} are vectors, and @var{t} is a\n\
 scalar.\n\
 \n\
 If @var{fcn} is a two-element string array or a two-element cell array\n\
-of strings, inlines, or function handles, the first element names\n\
+of strings, inline functions, or function handles, the first element names\n\
 the function @math{f} described above, and the second element names a\n\
 function to compute the modified Jacobian\n\
 \n\
 @iftex\n\
 @tex\n\
 $$\n\
 J = {\\partial f \\over \\partial x}\n\
   + c {\\partial f \\over \\partial \\dot{x}}\n\
diff --git a/src/DLD-FUNCTIONS/lsode.cc b/src/DLD-FUNCTIONS/lsode.cc
--- a/src/DLD-FUNCTIONS/lsode.cc
+++ b/src/DLD-FUNCTIONS/lsode.cc
@@ -201,17 +201,17 @@ hand sides for the set of equations.  Th
 @example\n\
 @var{xdot} = f (@var{x}, @var{t})\n\
 @end example\n\
 \n\
 @noindent\n\
 in which @var{xdot} and @var{x} are vectors and @var{t} is a scalar.\n\
 \n\
 If @var{fcn} is a two-element string array or a two-element cell array\n\
-of strings, inlines, or function handles, the first element names\n\
+of strings, inline functions, or function handles, the first element names\n\
 the function @math{f} described above, and the second element names a\n\
 function to compute the Jacobian of @math{f}.  The Jacobian function\n\
 must have the form\n\
 \n\
 @example\n\
 @var{jac} = j (@var{x}, @var{t})\n\
 @end example\n\
 \n\
