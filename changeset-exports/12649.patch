# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1304639923 25200
#      Thu May 05 16:58:43 2011 -0700
# Node ID 8579e7a6e6e0c95c560fb46d56c435bbeae8e86a
# Parent  e205ebe2ba67aeef7e62cd068df9c6e3d1632a8c
Improve performance (2X) of svds by avoiding issymmetric calculation (bug #33073)

* svds.m: Pass issym option to eigs() call.
* eigs.cc: Avoid issymetric calculation if 'issym' option given.

diff --git a/scripts/sparse/svds.m b/scripts/sparse/svds.m
--- a/scripts/sparse/svds.m
+++ b/scripts/sparse/svds.m
@@ -145,16 +145,18 @@ function [u, s, v, flag] = svds (A, k, s
       k = min ([6, m, n]);
     else
       k = min ([k, m, n]);
     endif
 
     ## Scale everything by the 1-norm to make things more stable.
     b = A / max_a;
     b_opts = opts;
+    ## Call to eigs is always a symmetric matrix by construction
+    b_opts.issym = true;
     b_opts.tol = opts.tol / max_a;
     b_sigma = sigma;
     if (!ischar (b_sigma))
       b_sigma = b_sigma / max_a;
     endif
 
     if (b_sigma == 0)
       ## Find the smallest eigenvalues
diff --git a/src/DLD-FUNCTIONS/eigs.cc b/src/DLD-FUNCTIONS/eigs.cc
--- a/src/DLD-FUNCTIONS/eigs.cc
+++ b/src/DLD-FUNCTIONS/eigs.cc
@@ -318,16 +318,17 @@ K. Maschhoff, D. Sorensen, and C. Yang. 
   SparseMatrix asmm, bsmm, bsmt;
   SparseComplexMatrix ascm, bscm, bsct;
   int b_arg = 0;
   bool have_b = false;
   bool have_a_fun = false;
   bool a_is_complex = false;
   bool b_is_complex = false;
   bool symmetric = false;
+  bool sym_tested = false;
   bool cholB = false;
   bool a_is_sparse = false;
   ColumnVector permB;
   int arg_offset = 0;
   double tol = DBL_EPSILON;
   int maxit = 300;
   int disp = 0;
   octave_idx_type p = -1;
@@ -394,37 +395,36 @@ K. Maschhoff, D. Sorensen, and C. Yang. 
           if (args(0).is_sparse_type ())
             {
               ascm = (args(0).sparse_complex_matrix_value());
               a_is_sparse = true;
             }
           else
             acm = (args(0).complex_matrix_value());
           a_is_complex = true;
-          symmetric = false; // ARAPACK doesn't special case complex symmetric
+          symmetric = false; // ARPACK doesn't special case complex symmetric
+          sym_tested = true;
         }
       else
         {
           if (args(0).is_sparse_type ())
             {
               asmm = (args(0).sparse_matrix_value());
               a_is_sparse = true;
-              symmetric = asmm.is_symmetric();
             }
           else
             {
               amm = (args(0).matrix_value());
-              symmetric = amm.is_symmetric();
             }
         }
 
     }
 
   // Note hold off reading B till later to avoid issues of double
-  // copies of the matrix if B is full/real while A is complex..
+  // copies of the matrix if B is full/real while A is complex.
   if (!error_state && nargin > 1 + arg_offset &&
       !(args(1 + arg_offset).is_real_scalar ()))
     {
       if (args(1+arg_offset).is_complex_type ())
         {
           b_arg = 1+arg_offset;
           have_b = true;
           bmat = 'G';
@@ -476,20 +476,23 @@ K. Maschhoff, D. Sorensen, and C. Yang. 
       if (args(3+arg_offset).is_map ())
         {
           octave_scalar_map map = args(3+arg_offset).scalar_map_value ();
 
           if (! error_state)
             {
               octave_value tmp;
 
-              // issym is ignored if A is not a function
+              // issym is ignored for complex matrix inputs
               tmp = map.getfield ("issym");
-              if (tmp.is_defined () && have_a_fun)
-                symmetric = tmp.double_value () != 0.;
+              if (tmp.is_defined () && !sym_tested)
+                {
+                  symmetric = tmp.double_value () != 0.;
+                  sym_tested = true;
+                }
 
               // isreal is ignored if A is not a function
               tmp = map.getfield ("isreal");
               if (tmp.is_defined () && have_a_fun)
                 a_is_complex = ! (tmp.double_value () != 0.);
 
               tmp = map.getfield ("tol");
               if (tmp.is_defined ())
@@ -538,16 +541,25 @@ K. Maschhoff, D. Sorensen, and C. Yang. 
     }
 
   if (nargin > (4+arg_offset))
     {
       error ("eigs: incorrect number of arguments");
       return retval;
     }
 
+  // Test undeclared (no issym) matrix inputs for symmetry
+  if (!sym_tested && !have_a_fun)
+    {
+      if (a_is_sparse)
+        symmetric = asmm.is_symmetric();
+      else
+        symmetric = amm.is_symmetric();
+    }
+
   if (have_b)
     {
       if (a_is_complex || b_is_complex)
         {
           if (a_is_sparse)
             bscm = args(b_arg).sparse_complex_matrix_value ();
           else
             bcm = args(b_arg).complex_matrix_value ();
