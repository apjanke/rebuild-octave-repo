# HG changeset patch
# User jwe
# Date 1074830907 0
#      Fri Jan 23 04:08:27 2004 +0000
# Node ID 9759e52e19bc20e17d05bde970f16e046ecda1b0
# Parent  ab71705f294f9703898ff66b99a41cbb822f15e7
[project @ 2004-01-23 04:08:27 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2004-01-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* error.cc (pr_where): New arg, print_code with default value true.
+	(warning): Call pr_where with second arg false.
+
 	* file-io.cc (Ffrewind): Only return value if nargout > 0.
 	(Ffprintf): Likewise.
 	(Fprintf): Likewise.
 
 	* file-io.cc (Ffrewind): Return 0 for success, -1 for failure.
 	Make docs match.
 
 	* Makefile.in (distclean): Remove DOCSTRINGS.
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -308,17 +308,17 @@ pr_where_1 (const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   pr_where_2 (fmt, args);
   va_end (args);
 }
 
 static void
-pr_where (const char *name)
+pr_where (const char *name, bool print_code = true)
 {
   if (curr_statement)
     {
       const char *f_nm = 0;
 
       if (curr_function)
 	{
 	  std::string fcn_name = curr_function->function_name ();
@@ -330,48 +330,51 @@ pr_where (const char *name)
       int l = curr_statement->line ();
       int c = curr_statement->column ();
 
       if (f_nm)
 	pr_where_1 ("%s: in %s near line %d, column %d:", name, f_nm, l, c);
       else
 	pr_where_1 ("%s: near line %d, column %d:", name, l, c);
 
-      // XXX FIXME XXX -- Note that the column number is probably not
-      // going to mean much here since the code is being reproduced
-      // from the parse tree, and we are only showing one statement
-      // even if there were multiple statements on the original source
-      // line.
+      if (print_code)
+	{
+	  // XXX FIXME XXX -- Note that the column number is probably
+	  // not going to mean much here since the code is being
+	  // reproduced from the parse tree, and we are only showing
+	  // one statement even if there were multiple statements on
+	  // the original source line.
 
-      OSSTREAM output_buf;
-
-      output_buf << std::endl;
+	  OSSTREAM output_buf;
 
-      tree_print_code tpc (output_buf, ">>> ");
+	  output_buf << std::endl;
 
-      curr_statement->accept (tpc);
+	  tree_print_code tpc (output_buf, ">>> ");
+
+	  curr_statement->accept (tpc);
 
-      output_buf << std::endl << OSSTREAM_ENDS;
+	  output_buf << std::endl << OSSTREAM_ENDS;
 
-      pr_where_1 ("%s", OSSTREAM_C_STR (output_buf));
+	  pr_where_1 ("%s", OSSTREAM_C_STR (output_buf));
 
-      OSSTREAM_FREEZE (output_buf);
+	  OSSTREAM_FREEZE (output_buf);
+	}
     }
 }
 
 void
 warning (const char *fmt, ...)
 {
   if (Vwarning_option != "off")
     {
       if (curr_sym_tab != top_level_sym_tab
 	  && Vwarning_option == "backtrace"
 	  && ! warning_state
 	  && ! discard_warning_messages)
-	pr_where ("warning");
+	pr_where ("warning", false);
 
       va_list args;
       va_start (args, fmt);
       vwarning ("warning", fmt, args);
       va_end (args);
 
       warning_state = 1;
 
