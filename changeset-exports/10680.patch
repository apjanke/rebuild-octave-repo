# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1275627131 25200
#      Thu Jun 03 21:52:11 2010 -0700
# Node ID e00de2d5263c8d398aebec117ded1f281c4eb46b
# Parent  ca6d8a38d298906cbd358bfaeaf319987f91aad7
Replace calls to obsolete chisquare_cdf with chi2cdf.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,17 @@
+2010-06-03  Alois Schl√∂gl
+
+        * signal/arch_test.m, statistics/tests/bartlett_test.m, 
+        statistics/tests/chisquare_test_homogeneity.m, 
+        statistics/tests/chisquare_test_independence.m, 
+        statistics/tests/manova.m, statistics/tests/mcnemar_test.m, 
+        statistics/tests/run_test.m, statistics/distributions/chi2pdf.m: 
+        Replace calls to obsolete chisquare_cdf with chi2cdf.
+
 2010-06-03  Rik <octave@nomad.inbox5.com>
 
 	* plot/private/__plt__.m: Add newline to usage message.
 
 2010-06-02  Rik <octave@nomad.inbox5.com>
 
 	* optimization/sqp.m: Overhaul sqp code.
         Guarantee equivalent results if sqp called with or wihout bounds 
diff --git a/scripts/signal/arch_test.m b/scripts/signal/arch_test.m
--- a/scripts/signal/arch_test.m
+++ b/scripts/signal/arch_test.m
@@ -87,11 +87,11 @@ function [pval, lm] = arch_test (y, X, p
     error ("arch_test: p must be a positive integer");
   endif
 
   [b, v_b, e] = ols (y, X);
   Z    = autoreg_matrix (e.^2, p);
   f    = e.^2 / v_b - ones (T, 1);
   f    = Z' * f;
   lm   = f' * inv (Z'*Z) * f / 2;
-  pval = 1 - chisquare_cdf (lm, p);
+  pval = 1 - chi2cdf (lm, p);
 
 endfunction
diff --git a/scripts/statistics/distributions/chi2pdf.m b/scripts/statistics/distributions/chi2pdf.m
--- a/scripts/statistics/distributions/chi2pdf.m
+++ b/scripts/statistics/distributions/chi2pdf.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} chisquare_pdf (@var{x}, @var{n})
+## @deftypefn {Function File} {} chi2pdf (@var{x}, @var{n})
 ## For each element of @var{x}, compute the probability density function
 ## (PDF) at @var{x} of the chisquare distribution with @var{n} degrees
 ## of freedom.
 ## @end deftypefn
 
 ## Author: TT <Teresa.Twaroch@ci.tuwien.ac.at>
 ## Description: PDF of the chi-square distribution
 
diff --git a/scripts/statistics/tests/bartlett_test.m b/scripts/statistics/tests/bartlett_test.m
--- a/scripts/statistics/tests/bartlett_test.m
+++ b/scripts/statistics/tests/bartlett_test.m
@@ -54,15 +54,15 @@ function [pval, chisq, df] = bartlett_te
     v(i) = var (x);
   endfor
 
   f_tot = sum (f);
   v_tot = sum (f .* v) / f_tot;
   c     = 1 + (sum (1 ./ f) - 1 / f_tot) / (3 * (k - 1));
   chisq = (f_tot * log (v_tot) - sum (f .* log (v))) / c;
   df    = k;
-  pval  = 1 - chisquare_cdf (chisq, df);
+  pval  = 1 - chi2cdf (chisq, df);
 
   if (nargout == 0)
     printf("  pval: %g\n", pval);
   endif
 
 endfunction
diff --git a/scripts/statistics/tests/chisquare_test_homogeneity.m b/scripts/statistics/tests/chisquare_test_homogeneity.m
--- a/scripts/statistics/tests/chisquare_test_homogeneity.m
+++ b/scripts/statistics/tests/chisquare_test_homogeneity.m
@@ -55,15 +55,15 @@ function [pval, chisq, df] = chisquare_t
   c     = [(reshape (c, 1, df)), Inf];
   l_x   = length (x);
   x     = reshape (x, l_x, 1);
   n_x   = sum (x * ones (1, df+1) < ones (l_x, 1) * c);
   l_y   = length (y);
   y     = reshape (y, l_y, 1);
   n_y   = sum(y * ones (1, df+1) < ones (l_y, 1) * c);
   chisq = l_x * l_y * sum ((n_x/l_x - n_y/l_y).^2 ./ (n_x + n_y));
-  pval  = 1 - chisquare_cdf (chisq, df);
+  pval  = 1 - chi2cdf (chisq, df);
 
   if (nargout == 0)
     printf("  pval: %g\n", pval);
   endif
 
 endfunction
diff --git a/scripts/statistics/tests/chisquare_test_independence.m b/scripts/statistics/tests/chisquare_test_independence.m
--- a/scripts/statistics/tests/chisquare_test_independence.m
+++ b/scripts/statistics/tests/chisquare_test_independence.m
@@ -40,15 +40,15 @@ function [pval, chisq, df] = chisquare_t
   endif
 
   [r, s] = size (X);
   df = (r - 1) * (s - 1);
   n = sum (sum (X));
   Y = sum (X')' * sum (X) / n;
   X = (X - Y) .^2 ./ Y;
   chisq = sum (sum (X));
-  pval  = 1 - chisquare_cdf (chisq, df);
+  pval  = 1 - chi2cdf (chisq, df);
 
   if (nargout == 0)
     printf("  pval: %g\n", pval);
   endif
 
 endfunction
diff --git a/scripts/statistics/tests/manova.m b/scripts/statistics/tests/manova.m
--- a/scripts/statistics/tests/manova.m
+++ b/scripts/statistics/tests/manova.m
@@ -92,17 +92,17 @@ function manova (Y, g)
 
   ## Wilks' Lambda
   ## =============
 
   Lambda = prod (1 ./ (1 + l));
 
   delta = n_w + n_b - (p + n_b + 1) / 2
   df_num = p * n_b
-  W_pval_1 = 1 - chisquare_cdf (- delta * log (Lambda), df_num);
+  W_pval_1 = 1 - chi2cdf (- delta * log (Lambda), df_num);
 
   if (p < 3)
     eta = p;
   else
     eta = sqrt ((p^2 * n_b^2 - 4) / (p^2 + n_b^2 - 5))
   endif
 
   df_den = delta * eta - df_num / 2 + 1
diff --git a/scripts/statistics/tests/mcnemar_test.m b/scripts/statistics/tests/mcnemar_test.m
--- a/scripts/statistics/tests/mcnemar_test.m
+++ b/scripts/statistics/tests/mcnemar_test.m
@@ -51,17 +51,17 @@ function [pval, chisq, df] = mcnemar_tes
   df = r * (r - 1) / 2;
   if (r == 2)
     num = max (abs (x - x') - 1, 0) .^ 2;
   else
     num = abs (x - x') .^ 2;
   endif
 
   chisq = sum (sum (triu (num ./ (x + x'), 1)));
-  pval = 1 - chisquare_cdf (chisq, df);
+  pval = 1 - chi2cdf (chisq, df);
 
   if (nargout == 0)
     printf ("  pval: %g\n", pval);
   endif
 
 endfunction
 
 
diff --git a/scripts/statistics/tests/run_test.m b/scripts/statistics/tests/run_test.m
--- a/scripts/statistics/tests/run_test.m
+++ b/scripts/statistics/tests/run_test.m
@@ -45,15 +45,15 @@ function [pval, chisq] = run_test (x)
       27892,   55789,   83685, 111580, 139476, 172860];
 
   b = [1/6; 5/24; 11/120; 19/720; 29/5040; 1/840];
 
   n = rows (x);
   r = run_count (x, 6) - n * b * ones (1, columns(x));
 
   chisq = diag (r' * A * r)' / n;
-  pval  = chisquare_cdf (chisq, 6);
+  pval  = chi2cdf (chisq, 6);
 
   if (nargout == 0)
     printf("pval: %g\n", pval);
   endif
 
 endfunction
