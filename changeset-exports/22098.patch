# HG changeset patch
# User Carlo de Falco <carlo.defalco@polimi.it>
# Date 1468341708 -7200
#      Tue Jul 12 18:41:48 2016 +0200
# Node ID d4b95a536e0b4f1fe6efba19b4b5711ce508ba63
# Parent  5ad67277b0078c794cf7a364585c3c4c6cef7ccd
style fixes in validateattributes.

* scripts/general/validateattributes.m: use 'Octave:invalid-type'
  instead of 'Octave:invalid-invalid-type' as error ID, fix style
  in BIST tests.

diff --git a/scripts/general/validateattributes.m b/scripts/general/validateattributes.m
--- a/scripts/general/validateattributes.m
+++ b/scripts/general/validateattributes.m
@@ -169,20 +169,20 @@
 ## @seealso{isa, validatestring, inputParser}
 ## @end deftypefn
 
 function validateattributes (A, cls, attr, varargin)
 
   if (nargin < 3 || nargin > 6)
     print_usage ();
   elseif (! iscellstr (cls))
-    error ("Octave:invalid-invalid-type",
+    error ("Octave:invalid-type",
            "validateattributes: CLASSES must be a cell array of strings");
   elseif (! iscell (attr))
-    error ("Octave:invalid-invalid-type",
+    error ("Octave:invalid-type",
            "validateattributes: ATTRIBUTES must be a cell array");
   endif
 
   ## Built start of error message from the extra optional arguments
   func_name = "";
   var_name  = "input";
   if (nargin > 3)
     fourth = varargin{1};
@@ -193,17 +193,17 @@ function validateattributes (A, cls, att
     else
       error ("Octave:invalid-input-arg",
              "validateattributes: 4th input argument must be ARG_IDX or FUNC_NAME");
     endif
 
     if (nargin > 4)
       var_name = varargin{2};
       if (! ischar (var_name))
-        error ("Octave:invalid-invalid-type",
+        error ("Octave:invalid-type",
                "validateattributes: VAR_NAME must be a string");
       endif
 
       if (nargin > 5)
         arg_idx = varargin{3};
         if (! valid_arg_idx (arg_idx))
           error ("Octave:invalid-input-arg",
                  "validateattributes: ARG_IDX must be a positive integer");
@@ -225,17 +225,17 @@ function validateattributes (A, cls, att
     float   = {"single" "double"};
     numeric = {integer{:} float{:}};
     cls = replace_cl_group (cls, "integer", integer);
     cls = replace_cl_group (cls, "float",   float  );
     cls = replace_cl_group (cls, "numeric", numeric);
     cls = unique (cls);
 
     classes = sprintf (" %s", cls{:});
-    error ("Octave:invalid-invalid-type",
+    error ("Octave:invalid-type",
            "%s must be of class:\n\n %s\n\nbut was of class %s",
            err_ini, classes, class (A));
   endif
 
   ## We use a while loop because some attributes require the following value
   ## in the cell array.  Also, we can't just get the boolean value for the
   ## test and check at the end the error message since some of the tests
   ## require some more complex error message.
@@ -517,205 +517,216 @@ endfunction
 %! validateattributes (eye (3), {}, {"diag"});
 %! validateattributes ([1 0 0; 0 1 0; 0 0 1], {}, {"diag"});
 %! validateattributes (zeros (3), {}, {"diag"});
 
 %!test
 %! validateattributes ([0 1 0 1], {"double", "uint8"}, {"binary", "size", [NaN 4], "nonnan"});
 
 %!test
-%! try validateattributes (ones(1,2,3), {'numeric'}, {'2d'});
+%! try validateattributes (ones(1,2,3), {"numeric"}, {"2d"});
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-2d');
+%! assert (getfield (id, "identifier"), "Octave:expected-2d");
 %! end_try_catch
 
 %!test
-%! try validateattributes (ones(1,2,3,4), {'numeric'}, {'3d'});
+%! try validateattributes (ones(1,2,3,4), {"numeric"}, {"3d"});
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-3d');
+%! assert (getfield (id, "identifier"), "Octave:expected-3d");
 %! end_try_catch
 
 %!test
-%! try validateattributes ([1 2], {'numeric'}, {'column'});
+%! try validateattributes ([1 2], {"numeric"}, {"column"});
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-column');
+%! assert (getfield (id, "identifier"), "Octave:expected-column");
 %! end_try_catch
 
 %!test
-%! try validateattributes ([1 2].', {'numeric'}, {'row'});
+%! try validateattributes ([1 2].', {"numeric"}, {"row"});
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-row');
+%! assert (getfield (id, "identifier"), "Octave:expected-row");
+%! end_try_catch
+
+%!test
+%! try validateattributes ([1 2], {"numeric"}, {"scalar"});
+%! catch id,
+%! assert (getfield (id, "identifier"), "Octave:expected-scalar");
 %! end_try_catch
 
 %!test
-%! try validateattributes ([1 2], {'numeric'}, {'scalar'});
+%! try validateattributes (ones(3), {"numeric"}, {"vector"});      
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-scalar');
+%! assert (getfield (id, "identifier"), "Octave:expected-vector");
 %! end_try_catch
 
 %!test
-%! try validateattributes (ones(3), {'numeric'}, {'vector'});      
+%! try validateattributes ([1 2], {"numeric"}, {"size", [1 1]}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-vector');
+%! assert (getfield (id, "identifier"), "Octave:incorrect-size");
 %! end_try_catch
 
 %!test
-%! try validateattributes ([1 2], {'numeric'}, {'size', [1 1]}); 
+%! try validateattributes (1, {"numeric"}, {"numel", 7}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:incorrect-size');
+%! assert (getfield (id, "identifier"), "Octave:incorrect-numel");
 %! end_try_catch
 
 %!test
-%! try validateattributes (1, {'numeric'}, {'numel',7}); 
+%! try validateattributes (1, {"numeric"}, {"ncols", 7}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:incorrect-numel');
+%! assert (getfield (id, "identifier"), "Octave:incorrect-numcols");
 %! end_try_catch
 
 %!test
-%! try validateattributes (1, {'numeric'}, {'ncols',7}); 
+%! try validateattributes (1, {"numeric"}, {"nrows", 7}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:incorrect-numcols');
+%! assert (getfield (id, "identifier"), "Octave:incorrect-numrows");
 %! end_try_catch
 
 %!test
-%! try validateattributes (1, {'numeric'}, {'nrows',7}); 
+%! try validateattributes (1, {"numeric"}, {"ndims", 5}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:incorrect-numrows');
+%! assert (getfield (id, "identifier"), "Octave:incorrect-numdims");
 %! end_try_catch
 
 %!test
-%! try validateattributes (1, {'numeric'}, {'ndims',5}); 
+%! try validateattributes ([1 2], {"numeric"}, {"square"}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:incorrect-numdims');
+%! assert (getfield (id, "identifier"), "Octave:expected-square");
 %! end_try_catch
 
 %!test
-%! try validateattributes ([1 2], {'numeric'}, {'square'}); 
+%! try validateattributes ([1 2], {"numeric"}, {"diag"}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-square');
+%! assert (getfield (id, "identifier"), "Octave:expected-diag");
 %! end_try_catch
 
 %!test
-%! try validateattributes ([1 2], {'numeric'}, {'diag'}); 
+%! try validateattributes ([], {"numeric"}, {"nonempty"}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-diag');
+%! assert (getfield (id, "identifier"), "Octave:expected-nonempty");
 %! end_try_catch
 
 %!test
-%! try validateattributes ([], {'numeric'}, {'nonempty'}); 
+%! try validateattributes (speye(2), {"numeric"}, {"nonsparse"}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-nonempty');
+%! assert (getfield (id, "identifier"), "Octave:expected-nonsparse");
 %! end_try_catch
 
 %!test
-%! try validateattributes (speye(2), {'numeric'}, {'nonsparse'}); 
+%! try validateattributes (1, {"numeric"}, {">", 3}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-nonsparse');
+%! assert (getfield (id, "identifier"), "Octave:expected-greater");
 %! end_try_catch
 
 %!test
-%! try validateattributes (1, {'numeric'}, {'>', 3}); 
+%! try validateattributes (1, {"numeric"}, {">=", 3}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-greater');
+%! assert (getfield (id, "identifier"), "Octave:expected-greater-equal");
 %! end_try_catch
 
 %!test
-%! try validateattributes (1, {'numeric'}, {'>=', 3}); 
+%! try validateattributes (1, {"numeric"}, {"<", -3}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-greater-equal');
+%! assert (getfield (id, "identifier"), "Octave:expected-less");
 %! end_try_catch
 
 %!test
-%! try validateattributes (1, {'numeric'}, {'<', -3}); 
+%! try validateattributes (1, {"numeric"}, {"<=", -3}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-less');
+%! assert (getfield (id, "identifier"), "Octave:expected-less-equal");
 %! end_try_catch
 
 %!test
-%! try validateattributes (1, {'numeric'}, {'<=', -3}); 
+%! try validateattributes (3, {"numeric"}, {"binary"}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-less-equal');
+%! assert (getfield (id, "identifier"), "Octave:expected-binary");
 %! end_try_catch
 
 %!test
-%! try validateattributes (3, {'numeric'}, {'binary'}); 
+%! try validateattributes (1, {"numeric"}, {"even"}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-binary');
+%! assert (getfield (id, "identifier"), "Octave:expected-even");
 %! end_try_catch
 
 %!test
-%! try validateattributes (1, {'numeric'}, {'even'}); 
+%! try validateattributes (2, {"numeric"}, {"odd"}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-even');
+%! assert (getfield (id, "identifier"), "Octave:expected-odd");
 %! end_try_catch
 
 %!test
-%! try validateattributes (2, {'numeric'}, {'odd'}); 
+%! try validateattributes (1.1, {"numeric"}, {"integer"}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-odd');
+%! assert (getfield (id, "identifier"), "Octave:expected-integer");
 %! end_try_catch
 
 %!test
-%! try validateattributes (1.1, {'numeric'}, {'integer'}); 
+%! try validateattributes (1+1i*2, {"numeric"}, {"real"}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-integer');
+%! assert (getfield (id, "identifier"), "Octave:expected-real");
 %! end_try_catch
 
 %!test
-%! try validateattributes (1+1i*2, {'numeric'}, {'real'}); 
+%! try validateattributes (Inf, {"numeric"}, {"finite"}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-real');
+%! assert (getfield (id, "identifier"), "Octave:expected-finite");
 %! end_try_catch
 
 %!test
-%! try validateattributes (Inf, {'numeric'}, {'finite'}); 
+%! try validateattributes (NaN, {"numeric"}, {"nonnan"}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-finite');
+%! assert (getfield (id, "identifier"), "Octave:expected-nonnan");
 %! end_try_catch
 
 %!test
-%! try validateattributes (NaN, {'numeric'}, {'nonnan'}); 
+%! try validateattributes (-1, {"numeric"}, {"nonnegative"}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-nonnan');
+%! assert (getfield (id, "identifier"), "Octave:expected-nonnegative");
 %! end_try_catch
 
 %!test
-%! try validateattributes (-1, {'numeric'}, {'nonnegative'}); 
+%! try validateattributes (0, {"numeric"}, {"nonzero"}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-nonnegative');
+%! assert (getfield (id, "identifier"), "Octave:expected-nonzero");
 %! end_try_catch
 
 %!test
-%! try validateattributes (0, {'numeric'}, {'nonzero'}); 
+%! try validateattributes (-1, {"numeric"}, {"positive"}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-nonzero');
+%! assert (getfield (id, "identifier"), "Octave:expected-positive");
 %! end_try_catch
 
 %!test
-%! try validateattributes (-1, {'numeric'}, {'positive'}); 
+%! try validateattributes ([1 2], {"numeric"}, {"decreasing"}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-positive');
+%! assert (getfield (id, "identifier"), "Octave:expected-decreasing");
 %! end_try_catch
 
 %!test
-%! try validateattributes ([1 2], {'numeric'}, {'decreasing'}); 
+%! try validateattributes ([2 1], {"numeric"}, {"increasing"}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-decreasing');
+%! assert (getfield (id, "identifier"), "Octave:expected-increasing");
 %! end_try_catch
 
 %!test
-%! try validateattributes ([2 1], {'numeric'}, {'increasing'}); 
+%! try validateattributes ([1 0], {"numeric"}, {"nondecreasing"}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-increasing');
+%! assert (getfield (id, "identifier"), "Octave:expected-nondecreasing");
 %! end_try_catch
 
 %!test
-%! try validateattributes ([1 0], {'numeric'}, {'nondecreasing'}); 
+%! try validateattributes ([1 2], {"numeric"}, {"nonincreasing"}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-nondecreasing');
+%! assert (getfield (id, "identifier"), "Octave:expected-nonincreasing");
 %! end_try_catch
 
 %!test
-%! try validateattributes ([1 2], {'numeric'}, {'nonincreasing'}); 
+%! try validateattributes (@sin, {"numeric"}, {}); 
 %! catch id,
-%! assert (getfield (id, 'identifier'), 'Octave:expected-nonincreasing');
+%! assert (getfield (id, "identifier"), "Octave:invalid-type");
 %! end_try_catch
 
+%!test
+%! try validateattributes (@sin, 1, {}); 
+%! catch id,
+%! assert (getfield (id, "identifier"), "Octave:invalid-type");
+%! end_try_catch
