# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1540760200 -3600
#      Sun Oct 28 21:56:40 2018 +0100
# Node ID 221c039aa4156983f0a4cee95d5b7802e4ccfa78
# Parent  69a160d7ab681bf1965e311f6e73c41f27a9c0db
Fix rendering of images with permuted x/ydata (bug #49756).

* gl-render.cc (opengl_renderer::draw_image): Sort xdata and ydata before
computing pixel dimensions and flip dimensions if necessary.

* genpropdoc.m: Use "[x/yfirst x/ylast]" instead of "[x/ymin x/ymax]" in
documentation for clarity.

* imshow.m: Ditto.

diff --git a/doc/interpreter/genpropdoc.m b/doc/interpreter/genpropdoc.m
--- a/doc/interpreter/genpropdoc.m
+++ b/doc/interpreter/genpropdoc.m
@@ -1145,25 +1145,25 @@ measured in degrees.";
         s.valid = "matrix";
 
       case "cdatamapping"
       case "displayname"
         s.doc = "Text for the legend entry corresponding to this image.";
         s.valid = valid_cellstring;
 
       case "xdata"
-        s.doc = "Two-element vector @code{[xmin xmax]} specifying the x \
+        s.doc = "Two-element vector @code{[xfirst xlast]} specifying the x \
 coordinates of the centers of the first and last columns of the image.\n\
 \n\
 Setting @code{xdata} to the empty matrix ([]) will restore the default value \
 of @code{[1 columns(image)]}.";
         s.valid = valid_2elvec;
 
       case "ydata"
-        s.doc = "Two-element vector @code{[ymin ymax]} specifying the y \
+        s.doc = "Two-element vector @code{[yfirst ylast]} specifying the y \
 coordinates of the centers of the first and last rows of the image.\n\
 \n\
 Setting @code{ydata} to the empty matrix ([]) will restore the default value \
 of @code{[1 rows(image)]}.";
         s.valid = valid_2elvec;
 
     endswitch
 
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -3771,20 +3771,33 @@ namespace octave
 
     Matrix x = props.get_xdata ().matrix_value ();
     Matrix y = props.get_ydata ().matrix_value ();
 
     // Someone wants us to draw an empty image?  No way.
     if (x.isempty () || y.isempty ())
       return;
 
-    if (w > 1 && x(1) == x(0))
+    // Sort x/ydata and mark flipped dimensions
+    bool xflip = false;
+    if (x(0) > x(1))
+      {
+        std::swap (x(0), x(1));
+        xflip = true;
+      }
+    else if (w > 1 && x(1) == x(0))
       x(1) = x(1) + (w-1);
-
-    if (h > 1 && y(1) == y(0))
+    
+    bool yflip = false;
+    if (y(0) > y(1))
+      {
+        std::swap (y(0), y(1));
+        yflip = true;
+      }
+    else if (h > 1 && y(1) == y(0))
       y(1) = y(1) + (h-1);
 
     const ColumnVector p0 = xform.transform (x(0), y(0), 0);
     const ColumnVector p1 = xform.transform (x(1), y(1), 0);
 
     if (math::isnan (p0(0)) || math::isnan (p0(1))
         || math::isnan (p1(0)) || math::isnan (p1(1)))
       {
@@ -3819,17 +3832,17 @@ namespace octave
         const ColumnVector p1h = xform.transform (x(1), y(1) + 1, 0);
         pix_dy = p1h(1) - p0(1);
         nor_dy = 1;
       }
 
     // OpenGL won't draw any of the image if its origin is outside the
     // viewport/clipping plane so we must do the clipping ourselves.
 
-    int j0, j1, i0, i1;
+    int j0, j1, jj, i0, i1, ii;
     j0 = 0, j1 = w;
     i0 = 0, i1 = h;
 
     float im_xmin = x(0) - nor_dx/2;
     float im_xmax = x(1) + nor_dx/2;
     float im_ymin = y(0) - nor_dy/2;
     float im_ymax = y(1) + nor_dy/2;
     if (props.is_clipping ()) // clip to axes
@@ -3867,76 +3880,116 @@ namespace octave
             const NDArray xcdata = cdata.array_value ();
 
             OCTAVE_LOCAL_BUFFER (GLfloat, a, 3*(j1-j0)*(i1-i0));
 
             for (int i = i0; i < i1; i++)
               {
                 for (int j = j0, idx = (i-i0)*(j1-j0)*3; j < j1; j++, idx += 3)
                   {
-                    a[idx]   = xcdata(i,j,0);
-                    a[idx+1] = xcdata(i,j,1);
-                    a[idx+2] = xcdata(i,j,2);
+                    if (! yflip)
+                      ii = i;
+                    else
+                      ii = h - i - 1;
+                    
+                    if (! xflip)
+                      jj = j;
+                    else
+                      jj = w - j - 1;
+                      
+                    a[idx]   = xcdata(ii,jj,0);
+                    a[idx+1] = xcdata(ii,jj,1);
+                    a[idx+2] = xcdata(ii,jj,2);
                   }
               }
 
             draw_pixels (j1-j0, i1-i0, a);
 
           }
         else if (cdata.is_single_type ())
           {
             const FloatNDArray xcdata = cdata.float_array_value ();
 
             OCTAVE_LOCAL_BUFFER (GLfloat, a, 3*(j1-j0)*(i1-i0));
 
             for (int i = i0; i < i1; i++)
               {
                 for (int j = j0, idx = (i-i0)*(j1-j0)*3; j < j1; j++, idx += 3)
                   {
-                    a[idx]   = xcdata(i,j,0);
-                    a[idx+1] = xcdata(i,j,1);
-                    a[idx+2] = xcdata(i,j,2);
+                    if (! yflip)
+                      ii = i;
+                    else
+                      ii = h - i - 1;
+                    
+                    if (! xflip)
+                      jj = j;
+                    else
+                      jj = w - j - 1;
+                      
+                    a[idx]   = xcdata(ii,jj,0);
+                    a[idx+1] = xcdata(ii,jj,1);
+                    a[idx+2] = xcdata(ii,jj,2);
                   }
               }
 
             draw_pixels (j1-j0, i1-i0, a);
 
           }
         else if (cdata.is_uint8_type ())
           {
             const uint8NDArray xcdata = cdata.uint8_array_value ();
 
             OCTAVE_LOCAL_BUFFER (GLubyte, a, 3*(j1-j0)*(i1-i0));
 
             for (int i = i0; i < i1; i++)
               {
                 for (int j = j0, idx = (i-i0)*(j1-j0)*3; j < j1; j++, idx += 3)
                   {
-                    a[idx]   = xcdata(i,j,0);
-                    a[idx+1] = xcdata(i,j,1);
-                    a[idx+2] = xcdata(i,j,2);
+                    if (! yflip)
+                      ii = i;
+                    else
+                      ii = h - i - 1;
+                    
+                    if (! xflip)
+                      jj = j;
+                    else
+                      jj = w - j - 1;
+                      
+                    a[idx]   = xcdata(ii,jj,0);
+                    a[idx+1] = xcdata(ii,jj,1);
+                    a[idx+2] = xcdata(ii,jj,2);
                   }
               }
 
             draw_pixels (j1-j0, i1-i0, a);
 
           }
         else if (cdata.is_uint16_type ())
           {
             const uint16NDArray xcdata = cdata.uint16_array_value ();
 
             OCTAVE_LOCAL_BUFFER (GLushort, a, 3*(j1-j0)*(i1-i0));
 
             for (int i = i0; i < i1; i++)
               {
                 for (int j = j0, idx = (i-i0)*(j1-j0)*3; j < j1; j++, idx += 3)
                   {
-                    a[idx]   = xcdata(i,j,0);
-                    a[idx+1] = xcdata(i,j,1);
-                    a[idx+2] = xcdata(i,j,2);
+                    if (! yflip)
+                      ii = i;
+                    else
+                      ii = h - i - 1;
+                    
+                    if (! xflip)
+                      jj = j;
+                    else
+                      jj = w - j - 1;
+                      
+                    a[idx]   = xcdata(ii,jj,0);
+                    a[idx+1] = xcdata(ii,jj,1);
+                    a[idx+2] = xcdata(ii,jj,2);
                   }
               }
 
             draw_pixels (j1-j0, i1-i0, a);
 
           }
         else
           warning ("opengl_renderer: invalid image data type (expected double, single, uint8, or uint16)");
diff --git a/scripts/image/imagesc.m b/scripts/image/imagesc.m
--- a/scripts/image/imagesc.m
+++ b/scripts/image/imagesc.m
@@ -30,18 +30,18 @@
 ## colormap.  If @code{@var{climits} = [@var{lo}, @var{hi}]} is given, then
 ## that range is set to the @qcode{"clim"} of the current axes.
 ##
 ## @var{x} and @var{y} are optional 2-element vectors, @w{@code{[min, max]}},
 ## which specify the coordinates of the centers of the corner pixels.
 ## If a range is specified as @w{@code{[max, min]}} then the image will be
 ## reversed along that axis.  For convenience, @var{x} and @var{y} may be
 ## specified as N-element vectors matching the length of the data in @var{img}.
-## However, only the first and last elements will be used to determine the axis
-## limits.
+## However, only the first and last elements will be used to determine
+## the image limits.
 ##
 ## The optional return value @var{h} is a graphics handle to the image.
 ##
 ## Calling Forms: The @code{imagesc} function can be called in two forms:
 ## High-Level and Low-Level.  When invoked with normal options, the High-Level
 ## form is used which first calls @code{newplot} to prepare the graphic figure
 ## and axes.  When the only inputs to @code{image} are property/value pairs
 ## the Low-Level form is used which creates a new instance of an image object
diff --git a/scripts/image/imshow.m b/scripts/image/imshow.m
--- a/scripts/image/imshow.m
+++ b/scripts/image/imshow.m
@@ -44,26 +44,26 @@
 ## @item @qcode{"displayrange"}
 ## @var{value1} is the display range as described above.
 ##
 ## @item @qcode{"colormap"}
 ## @var{value1} is the colormap to use when displaying an indexed image.
 ##
 ## @item @qcode{"xdata"}
 ## If @var{value1} is a 2-element vector, it must contain horizontal image
-## limits in the form [xmin, xmax], where xmin and xmax are the abscissa of
-## the centers of the corner pixels.  Otherwise @var{value1} must be a vector
-## and only the first and last elements will be used for xmin and xmax
-## respectively.
+## limits in the form [xfirst, xlast], where xfirst and xlast are the
+## abscissa of the centers of the corner pixels.  Otherwise @var{value1}
+##  must be a vector and only the first and last elements will be used
+## for xfirst and xlast respectively.
 ##
 ## @item @qcode{"ydata"}
 ## If @var{value1} is a 2-element vector, it must contain vertical image
-## limits in the form [ymin, ymax], where ymin and ymax are the ordinates of
-## the center of the corner pixels.  Otherwise @var{value1} must be a vector
-## and only the first and last elements will be used for ymin and ymax
+## limits in the form [yfirst, ylast], where yfirst and ylast are the ordinates
+## of the center of the corner pixels.  Otherwise @var{value1} must be a vector
+## and only the first and last elements will be used for yfirst and ylast
 ## respectively.
 ##
 ## @end table
 ##
 ## The optional return value @var{h} is a graphics handle to the image.
 ## @seealso{image, imagesc, colormap, gray2ind, rgb2ind}
 ## @end deftypefn
 
