# HG changeset patch
# User jwe
# Date 1191836217 0
#      Mon Oct 08 09:36:57 2007 +0000
# Node ID b5a6f5c71451948110abce7ad72d77f6d934c20d
# Parent  0a9d97cf2e13ec9e1a7bc68be5173c6f8ff970be
[project @ 2007-10-08 09:36:57 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2007-10-08  Michael Goffioul <michael.goffioul@gmail.com>
+
+	* sighandlers.h (can_interrupt): Tag with OCTINERP_API.
+	* sysdep.h (raw_mode, octave_popen, octave_pclose,
+	same_file_internal): Likewise.
+
 2007-10-06  John W. Eaton  <jwe@octave.org>
 
 	* oct-stream.cc (octave_base_stream::do_scanf):
 	Always allow MVAL to re resized if NR > 0.
 	(FINISH_CHARACTER_CONVERSION): Likewise.
 
 	* mappers.cc (install_mapper_functions): Undo previous change.
 	Fix doc string for lgamma.
diff --git a/src/sighandlers.h b/src/sighandlers.h
--- a/src/sighandlers.h
+++ b/src/sighandlers.h
@@ -90,17 +90,17 @@ octave_interrupt_handler
 #endif
 };
 
 // Nonzero means we have already printed a message for this series of
 // SIGPIPES.  We assume that the writer will eventually give up.
 extern int pipe_handler_error_count;
 
 // TRUE means we can be interrupted.
-extern bool can_interrupt;
+extern OCTINTERP_API bool can_interrupt;
 
 extern OCTINTERP_API sig_handler *octave_set_signal_handler (int, sig_handler *,
 					       bool restart_syscalls = true);
 
 extern OCTINTERP_API void install_signal_handlers (void);
 
 extern OCTINTERP_API void octave_signal_handler (void);
 
diff --git a/src/sysdep.h b/src/sysdep.h
--- a/src/sysdep.h
+++ b/src/sysdep.h
@@ -30,34 +30,34 @@ 02110-1301, USA.
 
 #include "lo-ieee.h"
 #include "lo-sysdep.h"
 
 extern void sysdep_init (void);
 
 extern void sysdep_cleanup (void);
 
-extern void raw_mode (bool, bool wait = true);
+extern OCTINTERP_API void raw_mode (bool, bool wait = true);
 
-extern FILE *octave_popen (const char *command, const char *mode);
-extern int octave_pclose (FILE *f);
+extern OCTINTERP_API FILE *octave_popen (const char *command, const char *mode);
+extern OCTINTERP_API int octave_pclose (FILE *f);
 
 extern OCTINTERP_API int octave_kbhit (bool wait = true);
 
 extern void w32_set_quiet_shutdown (void);
 
 #if defined (__WIN32__) && ! defined (_POSIX_VERSION)
 extern void MINGW_signal_cleanup (void);
 #define USE_W32_SIGINT 1
 #define MINGW_SIGNAL_CLEANUP() MINGW_signal_cleanup ()
 #else
 #define MINGW_SIGNAL_CLEANUP() do { } while (0)
 #endif
 
-extern bool same_file_internal (const std::string&, const std::string&);
+extern OCTINTERP_API bool same_file_internal (const std::string&, const std::string&);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
