# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1466198667 25200
#      Fri Jun 17 14:24:27 2016 -0700
# Node ID e9765b62d4e891907ff389a1a7f7cb6b46bfa2bd
# Parent  4b2eab5d2a6abf53a02a13df5f9e526bd33536de
Use C++11 standard complex trig functions when available (bug #44310, bug #45507)

* acinclude.m4 (OCTAVE_CHECK_FUNC_COMPLEX): New macro.
* configure.ac: Use it to test for complex variants of trig and hyperbolic
functions.

* lo-mappers.cc (octave::math::acos, octave::math::asin, octave::math::atan):
Use standard library functions when available.
* lo-specfun.cc (octave::math::acosh, octave::math::asinh, octave::math::atanh):
Likewise.

* mappers.cc: Add BIST tests for affected functions.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2573,16 +2573,25 @@ case $canonical_host_type in
   ;;
   *)
     AC_CHECK_FUNCS([finite isnan isinf signbit])
     AC_CHECK_FUNCS([_finite _isnan])
     AC_CHECK_DECLS([signbit], , , [#include <math.h>])
   ;;
 esac
 
+## Look in <complex> for C++ variants of math functions that we need.
+
+OCTAVE_CHECK_FUNC_COMPLEX(acos)
+OCTAVE_CHECK_FUNC_COMPLEX(acosh)
+OCTAVE_CHECK_FUNC_COMPLEX(asin)
+OCTAVE_CHECK_FUNC_COMPLEX(asinh)
+OCTAVE_CHECK_FUNC_COMPLEX(atan)
+OCTAVE_CHECK_FUNC_COMPLEX(atanh)
+
 ## Check for nonstandard, but common math functions, that we need.
 
 dnl Use multiple AC_CHECKs to avoid line continuations '\' in list
 AC_CHECK_FUNCS([acosh acoshf asinh asinhf atanh atanhf cbrt cbrtf])
 AC_CHECK_FUNCS([erf erff erfc erfcf exp2f hypotf _hypotf log2 log2f])
 
 ## Check for math defines such as M_LN2 in math.h
 AC_CACHE_CHECK([for MATH DEFINES in math.h],
diff --git a/libinterp/corefcn/mappers.cc b/libinterp/corefcn/mappers.cc
--- a/libinterp/corefcn/mappers.cc
+++ b/libinterp/corefcn/mappers.cc
@@ -120,16 +120,21 @@ Compute the inverse cosine in radians fo
 %! assert (obs, exp, 2*eps);
 %! rval = pi;
 %! obs = acos ([-2, -2-i*eps, -2+i*eps]);
 %! exp = [rval - ival*i, rval + ival*i, rval - ival*i];
 %! assert (obs, exp, 2*eps);
 %! assert (acos ([2 0]),  [ival*i, pi/2], 2*eps);
 %! assert (acos ([2 0i]), [ival*i, pi/2], 2*eps);
 
+## Test large magnitude arguments (bug #45507)
+%! x = [1, -1, i, -i] .* 1e150;
+%! v = [0, pi, pi/2, pi/2];
+%! assert (real (acos (x)), v);
+
 %!error acos ()
 %!error acos (1, 2)
 */
 
 DEFUN (acosh, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} acosh (@var{x})\n\
 Compute the inverse hyperbolic cosine for each element of @var{x}.\n\
@@ -159,16 +164,22 @@ Compute the inverse hyperbolic cosine fo
 %! assert (acosh (x), v, sqrt (eps ("single")));
 
 %!test
 %! re = single (2.99822295029797);
 %! im = single (pi/2);
 %! assert (acosh (single (10i)), re + i*im, 5*eps ("single"));
 %! assert (acosh (single (-10i)), re - i*im, 5*eps ("single"));
 
+## Test large magnitude arguments (bug #45507)
+%!test
+%! x = [1, -1, i, -i] .* 1e150;
+%! v = [0, pi, pi/2, -pi/2];
+%! assert (imag (acosh (x)), v);
+
 %!error acosh ()
 %!error acosh (1, 2)
 */
 
 DEFUN (angle, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} angle (@var{z})\n\
 See @code{arg}.\n\
@@ -272,16 +283,21 @@ Compute the inverse sine in radians for 
 %! exp = [rval - ival*i, rval - ival*i, rval + ival*i];
 %! assert (obs, exp, 2*eps);
 %! obs = asin ([-2, -2-i*eps, -2+i*eps]);
 %! exp = [-rval + ival*i, -rval - ival*i, -rval + ival*i];
 %! assert (obs, exp, 2*eps);
 %! assert (asin ([2 0]),  [rval - ival*i, 0], 2*eps);
 %! assert (asin ([2 0i]), [rval - ival*i, 0], 2*eps);
 
+## Test large magnitude arguments (bug #45507)
+%! x = [1, -1, i, -i] .* 1e150;
+%! v = [pi/2, -pi/2, 0, -0];
+%! assert (real (asin (x)), v);
+
 %!error asin ()
 %!error asin (1, 2)
 */
 
 DEFUN (asinh, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} asinh (@var{x})\n\
 Compute the inverse hyperbolic sine for each element of @var{x}.\n\
@@ -300,16 +316,21 @@ Compute the inverse hyperbolic sine for 
 %! x = [0, i, 0, -i];
 %! assert (asinh (x), v,  sqrt (eps));
 
 %!test
 %! v = single ([0, pi/2*i, 0, -pi/2*i]);
 %! x = single ([0, i, 0, -i]);
 %! assert (asinh (x), v,  sqrt (eps ("single")));
 
+## Test large magnitude arguments (bug #45507)
+%! x = [1, -1, i, -i] .* 1e150;
+%! v = [0, 0, pi/2, -pi/2];
+%! assert (imag (asinh (x)), v);
+
 %!error asinh ()
 %!error asinh (1, 2)
 */
 
 DEFUN (atan, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} atan (@var{x})\n\
 Compute the inverse tangent in radians for each element of @var{x}.\n\
@@ -332,16 +353,22 @@ Compute the inverse tangent in radians f
 %! x = [0, rt3/3, 1, rt3, -rt3, -1, -rt3/3, 0];
 %! assert (atan (x), v, sqrt (eps));
 
 %!test
 %! v = single ([0, pi/6, pi/4, pi/3, -pi/3, -pi/4, -pi/6, 0]);
 %! x = single ([0, rt3/3, 1, rt3, -rt3, -1, -rt3/3, 0]);
 %! assert (atan (x), v, sqrt (eps ("single")));
 
+## Test large magnitude arguments (bug #44310, bug #45507)
+%! x = [1, -1, i, -i] .* 1e150;
+%! v = [pi/2, -pi/2, pi/2, -pi/2];
+%! assert (real (atan (x)), v);
+%! assert (imag (atan (x)), [0, 0, 0, 0], eps);
+
 %!error atan ()
 %!error atan (1, 2)
 */
 
 DEFUN (atanh, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} atanh (@var{x})\n\
 Compute the inverse hyperbolic tangent for each element of @var{x}.\n\
@@ -360,16 +387,22 @@ Compute the inverse hyperbolic tangent f
 %! x = [0, 0];
 %! assert (atanh (x), v, sqrt (eps));
 
 %!test
 %! v = single ([0, 0]);
 %! x = single ([0, 0]);
 %! assert (atanh (x), v, sqrt (eps ("single")));
 
+## Test large magnitude arguments (bug #44310, bug #45507)
+%! x = [1, -1, i, -i] .* 1e150;
+%! v = [pi/2, pi/2, pi/2, -pi/2];
+%! assert (imag (atanh (x)), v);
+%! assert (real (atanh (x)), [0, 0, 0, 0], eps);
+
 %!error atanh ()
 %!error atanh (1, 2)
 */
 
 DEFUN (cbrt, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} cbrt (@var{x})\n\
 Compute the real cube root of each element of @var{x}.\n\
diff --git a/liboctave/numeric/lo-mappers.cc b/liboctave/numeric/lo-mappers.cc
--- a/liboctave/numeric/lo-mappers.cc
+++ b/liboctave/numeric/lo-mappers.cc
@@ -83,111 +83,155 @@ namespace octave
     is_NaN_or_NA (const FloatComplex& x)
     {
       return (isnan (real (x)) || isnan (imag (x)));
     }
 
     Complex
     acos (const Complex& x)
     {
+#if defined (HAVE_COMPLEX_STD_ACOS)
+      Complex y = std::acos (x);
+
+      if (imag (x) == 0.0 && real (x) > 1.0)
+        return conj (y);
+      else
+        return y;
+#else
       static Complex i (0, 1);
 
       Complex tmp;
 
       if (imag (x) == 0.0)
         {
           // If the imaginary part of X is 0, then avoid generating an
           // imaginary part of -0 for the expression 1-x*x.
           // This effectively chooses the same phase of the branch cut as Matlab.
           double xr = real (x);
           tmp = Complex (1.0 - xr*xr);
         }
       else
         tmp = 1.0 - x*x;
 
       return -i * log (x + i * sqrt (tmp));
+#endif
     }
 
     FloatComplex
     acos (const FloatComplex& x)
     {
+#if defined (HAVE_COMPLEX_STD_ACOS)
+      FloatComplex y = std::acos (x);
+
+      if (imag (x) == 0.0f && real (x) > 1.0f)
+        return conj (y);
+      else
+        return y;
+#else
       static FloatComplex i (0, 1);
 
       FloatComplex tmp;
 
       if (imag (x) == 0.0f)
         {
           // If the imaginary part of X is 0, then avoid generating an
           // imaginary part of -0 for the expression 1-x*x.
           // This effectively chooses the same phase of the branch cut as Matlab.
           float xr = real (x);
           tmp = FloatComplex (1.0f - xr*xr);
         }
       else
         tmp = 1.0f - x*x;
 
       return -i * log (x + i * sqrt (tmp));
+#endif
     }
 
     Complex
     asin (const Complex& x)
     {
+#if defined (HAVE_COMPLEX_STD_ASIN)
+      Complex y = std::asin (x);
+
+      if (imag (x) == 0.0 && real (x) > 1.0)
+        return conj (y);
+      else
+        return y;
+#else
       static Complex i (0, 1);
 
       Complex tmp;
 
       if (imag (x) == 0.0)
         {
           // If the imaginary part of X is 0, then avoid generating an
           // imaginary part of -0 for the expression 1-x*x.
           // This effectively chooses the same phase of the branch cut as Matlab.
           double xr = real (x);
           tmp = Complex (1.0 - xr*xr);
         }
       else
         tmp = 1.0 - x*x;
 
       return -i * log (i*x + sqrt (tmp));
+#endif
     }
 
     FloatComplex
     asin (const FloatComplex& x)
     {
+#if defined (HAVE_COMPLEX_STD_ASIN)
+      FloatComplex y = std::asin (x);
+
+      if (imag (x) == 0.0f && real (x) > 1.0f)
+        return conj (y);
+      else
+        return y;
+#else
       static FloatComplex i (0, 1);
 
       FloatComplex tmp;
 
       if (imag (x) == 0.0f)
         {
           // If the imaginary part of X is 0, then avoid generating an
           // imaginary part of -0 for the expression 1-x*x.
           // This effectively chooses the same phase of the branch cut as Matlab.
           float xr = real (x);
           tmp = FloatComplex (1.0f - xr*xr);
         }
       else
         tmp = 1.0f - x*x;
 
       return -i * log (i*x + sqrt (tmp));
+#endif
     }
 
     Complex
     atan (const Complex& x)
     {
+#if defined (HAVE_COMPLEX_STD_ATAN)
+      return std::atan (x);
+#else
       static Complex i (0, 1);
 
       return i * log ((i + x) / (i - x)) / 2.0;
+#endif
     }
 
     FloatComplex
     atan (const FloatComplex& x)
     {
+#if defined (HAVE_COMPLEX_STD_ATAN)
+      return std::atan (x);
+#else
       static FloatComplex i (0, 1);
 
       return i * log ((i + x) / (i - x)) / 2.0f;
+#endif
     }
 
     double log2 (double x) { return std::log2 (x); }
     float log2 (float x) { return std::log2 (x); }
 
     Complex
     log2 (const Complex& x)
     {
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -224,23 +224,31 @@ namespace octave
       F77_XFCN (xacosh, XACOSH, (x, retval));
       return retval;
 #endif
     }
 
     Complex
     acosh (const Complex& x)
     {
+#if defined (HAVE_COMPLEX_STD_ACOSH)
+      return std::acosh (x);
+#else
       return log (x + sqrt (x + 1.0) * sqrt (x - 1.0));
+#endif
     }
 
     FloatComplex
     acosh (const FloatComplex& x)
     {
+#if defined (HAVE_COMPLEX_STD_ACOSH)
+      return std::acosh (x);
+#else
       return log (x + sqrt (x + 1.0f) * sqrt (x - 1.0f));
+#endif
     }
 
     double
     asinh (double x)
     {
 #if defined (HAVE_ASINH)
       return ::asinh (x);
 #else
@@ -260,23 +268,31 @@ namespace octave
       F77_XFCN (xasinh, XASINH, (x, retval));
       return retval;
 #endif
     }
 
     Complex
     asinh (const Complex& x)
     {
+#if defined (HAVE_COMPLEX_STD_ASINH)
+      return std::asinh (x);
+#else
       return log (x + sqrt (x*x + 1.0));
+#endif
     }
 
     FloatComplex
     asinh (const FloatComplex& x)
     {
+#if defined (HAVE_COMPLEX_STD_ASINH)
+      return std::asinh (x);
+#else
       return log (x + sqrt (x*x + 1.0f));
+#endif
     }
 
     double
     atanh (double x)
     {
 #if defined (HAVE_ATANH)
       return ::atanh (x);
 #else
@@ -296,23 +312,31 @@ namespace octave
       F77_XFCN (xatanh, XATANH, (x, retval));
       return retval;
 #endif
     }
 
     Complex
     atanh (const Complex& x)
     {
+#if defined (HAVE_COMPLEX_STD_ATANH)
+      return std::atanh (x);
+#else
       return log ((1.0 + x) / (1.0 - x)) / 2.0;
+#endif
     }
 
     FloatComplex
     atanh (const FloatComplex& x)
     {
+#if defined (HAVE_COMPLEX_STD_ATANH)
+      return std::atanh (x);
+#else
       return log ((1.0f + x) / (1.0f - x)) / 2.0f;
+#endif
     }
 
     double
     erf (double x)
     {
 #if defined (HAVE_ERF)
       return ::erf (x);
 #else
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -315,16 +315,44 @@ AC_DEFUN([OCTAVE_CHECK_FUNC_CMATH], [
     AC_LANG_POP(C++)
   ])
   if eval "test \"`echo '$octave_cv_func_cmath_f'$ac_safe`\" = yes"; then
     AC_DEFINE(AS_TR_CPP([[HAVE_CMATH_][$1][F]]), 1,
       [Define to 1 if <cmath> provides float variant of $1.])
   fi
 ])
 dnl
+dnl Check whether a complex-valued function is available in <complex>.
+dnl Will define HAVE_COMPLEX_STD_FUNC if the function is available in the
+dnl std namespace and is callable on both std::complex<double> and
+dnl std::complex<float>.  The return type of the function is expected to
+dnl be of the same std::complex<T> type.
+dnl
+AC_DEFUN([OCTAVE_CHECK_FUNC_COMPLEX], [
+  ac_safe=`echo "$1" | $SED 'y% ./+-:=%___p___%'`
+
+  AC_CACHE_CHECK([for std::$1 in <complex>],
+    [octave_cv_func_complex_std_$ac_safe],
+    [AC_LANG_PUSH(C++)
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+        #include <complex>
+        ]], [[
+        std::complex<double> z = std::$1 (std::complex<double> (1.0, 1.0));
+        std::complex<float>  c = std::$1 (std::complex<float>  (1.0, 1.0));
+        ]])],
+      [eval "octave_cv_func_complex_std_$ac_safe=yes"],
+      [eval "octave_cv_func_complex_std_$ac_safe=no"])
+    AC_LANG_POP(C++)
+  ])
+  if eval "test \"`echo '$octave_cv_func_complex_std_'$ac_safe`\" = yes"; then
+    AC_DEFINE(AS_TR_CPP([[HAVE_COMPLEX_STD_][$1]]), 1,
+      [Define to 1 if <complex> provides std::$1(std::complex<T>).])
+  fi
+])
+dnl
 dnl Check whether Qscintilla has version 2.6.0 or later
 dnl FIXME: This test uses a version number.  It potentially could
 dnl        be re-written to actually call the function, but is it worth it?
 dnl
 AC_DEFUN([OCTAVE_CHECK_VERSION_2_6_0], [
   AC_CACHE_CHECK([whether Qscintilla has version 2.6.0 or later],
     [octave_cv_version_2_6_0],
     [AC_LANG_PUSH(C++)
