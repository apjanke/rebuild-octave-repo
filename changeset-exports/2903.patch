# HG changeset patch
# User jwe
# Date 862372410 0
#      Wed Apr 30 03:53:30 1997 +0000
# Node ID facd9d10e5c14ac447a193564c2dc9828050556d
# Parent  c5b7a019b9ed55c10b84fd3eb01c871d897cedc1
[project @ 1997-04-30 03:53:07 by jwe]

diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -37,16 +37,17 @@ Software Foundation, 59 Temple Place - S
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-ch-mat.h"
 #include "ov-str-mat.h"
 #include "ov-range.h"
 #include "ov-struct.h"
+#include "ov-file.h"
 #include "ov-list.h"
 #include "ov-colon.h"
 #include "ov-va-args.h"
 #include "ov-typeinfo.h"
 
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
@@ -105,47 +106,16 @@ int Vpropagate_empty_matrices;
 bool Vresize_on_range_error;
 
 // How many levels of structure elements should we print?
 int Vstruct_levels_to_print;
 
 // Allow divide by zero errors to be suppressed.
 bool Vwarn_divide_by_zero;
 
-// Indentation level for structures.
-int struct_indent = 0;
-
-// XXX FIXME XXX
-void
-increment_struct_indent (void)
-{
-  struct_indent += 2;
-}
-
-void
-decrement_struct_indent (void)
-{
-  struct_indent -= 2;
-}
-
-// Indentation level for lists.
-int list_indent = 0;
-
-void
-increment_list_indent (void)
-{
-  list_indent += 2;
-}
-
-void
-decrement_list_indent (void)
-{
-  list_indent -= 2;
-}
-
 // XXX FIXME XXX
 
 // Octave's value type.
 
 string
 octave_value::binary_op_as_string (binary_op op)
 {
   string retval;
@@ -171,16 +141,24 @@ octave_value::binary_op_as_string (binar
     case pow:
       retval = "^";
       break;
 
     case ldiv:
       retval = "\\";
       break;
 
+    case lshift:
+      retval = "<<";
+      break;
+
+    case rshift:
+      retval = ">>";
+      break;
+
     case lt:
       retval = "<";
       break;
 
     case le:
       retval = "<=";
       break;
 
@@ -257,16 +235,24 @@ octave_value::assign_op_as_string (assig
     case mul_eq:
       retval = "*=";
       break;
 
     case div_eq:
       retval = "/=";
       break;
 
+    case lshift_eq:
+      retval = "<<=";
+      break;
+
+    case rshift_eq:
+      retval = ">>=";
+      break;
+
     case el_mul_eq:
       retval = ".*=";
       break;
 
     case el_div_eq:
       retval = "./=";
       break;
 
@@ -421,16 +407,22 @@ octave_value::octave_value (const Range&
 }
 
 octave_value::octave_value (const Octave_map& m)
   : rep (new octave_struct (m))
 {
   rep->count = 1;
 }
 
+octave_value::octave_value (octave_stream *s, int n)
+  : rep (new octave_file (s, n))
+{
+  rep->count = 1;
+}
+
 octave_value::octave_value (const octave_value_list& l)
   : rep (new octave_list (l))
 {
   rep->count = 1;
 }
 
 octave_value::octave_value (octave_value::magic_colon)
   : rep (new octave_magic_colon ())
@@ -483,17 +475,17 @@ octave_value::maybe_mutate (void)
       rep = tmp;
       rep->count = 1;
     }    
 }
 
 static void
 gripe_no_conversion (const string& tn1, const string& tn2)
 {
-  error ("no suitable conversion found for assignment of %s to indexed %s",
+  error ("no suitable conversion found for assignment of `%s' to indexed `%s'",
 	 tn2.c_str (), tn1.c_str ());
 }
 
 octave_value&
 octave_value::assign (assign_op, const octave_value& rhs)
 {
   // XXX FIXME XXX -- make this work for ops other than `='.
 
@@ -530,16 +522,28 @@ octave_value::eval (int, const octave_va
 }
 
 Octave_map
 octave_value::map_value (void) const
 {
   return rep->map_value ();
 }
 
+octave_stream *
+octave_value::stream_value (void) const
+{
+  return rep->stream_value ();
+}
+
+int
+octave_value::stream_number (void) const
+{
+  return rep->stream_number ();
+}
+
 octave_value_list
 octave_value::list_value (void) const
 {
   return rep->list_value ();
 }
 
 ColumnVector
 octave_value::vector_value (bool force_string_conv,
@@ -625,80 +629,38 @@ octave_value::complex_vector_value (bool
       string tn = type_name ();
       gripe_invalid_conversion (tn.c_str (), "complex vector");
     }
 
   return retval;
 }
 
 void
-octave_value::print (bool pr_as_read_syntax)
-{
-  print (octave_stdout, pr_as_read_syntax);
-}
-
-void
-octave_value::print_with_name (const string& name, bool print_padding)
-{
-  print_with_name (octave_stdout, name, print_padding);
-}
-
-void
 octave_value::print_with_name (ostream& output_buf, const string& name,
-			       bool print_padding) 
+			       bool print_padding) const
 {
-  bool pad_after = false;
-
-  if (Vprint_answer_id_name)
-    {
-      if (print_as_scalar ())
-	output_buf << name << " = ";
-      else if (is_map ())
-	{
-	  pad_after = true;
-	  output_buf << name << " =";
-	}
-      else
-	{
-	  pad_after = true;
-	  output_buf << name << " =\n\n";
-	}
-    }
+  bool pad_after = print_name_tag (output_buf, name);
 
   print (output_buf);
 
   if (print_padding && pad_after)
-    output_buf << "\n";
-}
-
-bool
-octave_value::print_as_scalar (void)
-{
-  int nr = rows ();
-  int nc = columns ();
-
-  return (is_scalar_type ()
-	  || (is_string () && nr <= 1)
-	  || (is_matrix_type ()
-	      && ((nr == 1 && nc == 1)
-		  || nr == 0
-		  || nc == 0)));
+    newline (output_buf);
 }
 
 static void
 gripe_indexed_assignment (const string& tn1, const string& tn2)
 {
-  error ("assignment of %s to indexed %s not implemented",
+  error ("assignment of `%s' to indexed `%s' not implemented",
 	 tn2.c_str (), tn1.c_str ());
 }
 
 static void
 gripe_conversion_failed (const string& tn1, const string& tn2)
 {
-  error ("type conversion for assignment of %s to indexed %s failed",
+  error ("type conversion for assignment of `%s' to indexed `%s' failed",
 	 tn2.c_str (), tn1.c_str ());
 }
 
 bool
 octave_value::convert_and_assign (octave_value::assign_op op,
 				  const octave_value_list& idx,
 				  const octave_value& rhs)
 {
@@ -821,17 +783,17 @@ octave_value::try_assignment (octave_val
     }
 
   return retval;
 }
 
 static void
 gripe_binary_op (const string& on, const string& tn1, const string& tn2)
 {
-  error ("binary operator %s not implemented for %s by %s operations",
+  error ("binary operator `%s' not implemented for `%s' by `%s' operations",
 	 on.c_str (), tn1.c_str (), tn2.c_str ());
 }
 
 octave_value
 do_binary_op (octave_value::binary_op op, const octave_value& v1,
 	      const octave_value& v2)
 {
   octave_value retval;
@@ -881,30 +843,77 @@ do_binary_op (octave_value::binary_op op
       else
 	gripe_binary_op (octave_value::binary_op_as_string (op),
 			 v1.type_name (), v2.type_name ());
     }
 
   return retval;
 }
 
+// Current indentation.
+int octave_value::curr_print_indent_level = 0;
+
+// Nonzero means we are at the beginning of a line.
+bool octave_value::beginning_of_line = true;
+
+// Each print() function should call this before printing anything.
+//
+// This doesn't need to be fast, but isn't there a better way?
+
+void
+octave_value::indent (ostream& os) const
+{
+  assert (curr_print_indent_level >= 0);
+ 
+  if (beginning_of_line)
+    {
+      // XXX FIXME XXX -- do we need this?
+      // os << prefix;
+
+      for (int i = 0; i < curr_print_indent_level; i++)
+	os << " ";
+
+      beginning_of_line = false;
+    }
+}
+
+// All print() functions should use this to print new lines.
+
+void
+octave_value::newline (ostream& os) const
+{
+  os << "\n";
+
+  beginning_of_line = true;
+}
+
+// For ressetting print state.
+
+void
+octave_value::reset (void) const
+{
+  beginning_of_line = true;
+  curr_print_indent_level = 0;
+}
+
 void
 install_types (void)
 {
   octave_base_value::register_type ();
   octave_scalar::register_type ();
   octave_complex::register_type ();
   octave_matrix::register_type ();
   octave_complex_matrix::register_type ();
   octave_range::register_type ();
   octave_bool::register_type ();
   octave_bool_matrix::register_type ();
   octave_char_matrix::register_type ();
   octave_char_matrix_str::register_type ();
   octave_struct::register_type ();
+  octave_file::register_type ();
   octave_list::register_type ();
   octave_all_va_args::register_type ();
   octave_magic_colon::register_type ();
 }
 
 static int
 do_fortran_indexing (void)
 {
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -36,16 +36,17 @@ class ostream;
 #include "Range.h"
 #include "idx-vector.h"
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "oct-sym.h"
 #include "str-vec.h"
 
 class Octave_map;
+class octave_stream;
 class octave_value_list;
 
 // Constants.
 
 // This just provides a way to avoid infinite recursion when building
 // octave_value objects.
 
 class
@@ -78,16 +79,18 @@ public:
   enum binary_op
   {
     add,
     sub,
     mul,
     div,
     pow,
     ldiv,
+    lshift,
+    rshift,
     lt,
     le,
     eq,
     ge,
     gt,
     ne,
     el_mul,
     el_div,
@@ -102,16 +105,18 @@ public:
 
   enum assign_op
   {
     asn_eq,
     add_eq,
     sub_eq,
     mul_eq,
     div_eq,
+    lshift_eq,
+    rshift_eq,
     el_mul_eq,
     el_div_eq,
     el_and_eq,
     el_or_eq,
     num_assign_ops,
     unknown_assign_op
   };
 
@@ -137,16 +142,17 @@ public:
   octave_value (const boolMatrix& bm);
   octave_value (const char *s);
   octave_value (const string& s);
   octave_value (const string_vector& s);
   octave_value (const charMatrix& chm, bool is_string = false);
   octave_value (double base, double limit, double inc);
   octave_value (const Range& r);
   octave_value (const Octave_map& m);
+  octave_value (octave_stream *s, int n);
   octave_value (const octave_value_list& m);
   octave_value (octave_value::magic_colon);
   octave_value (octave_value::all_va_args);
 
   octave_value (octave_value *new_rep);
 
   // Copy constructor.
 
@@ -350,16 +356,20 @@ public:
   virtual string string_value (void) const
     { return rep->string_value (); }
 
   virtual Range range_value (void) const
     { return rep->range_value (); }
 
   virtual Octave_map map_value (void) const;
 
+  virtual octave_stream *stream_value (void) const;
+
+  virtual int stream_number (void) const;
+
   virtual octave_value_list list_value (void) const;
 
   virtual bool bool_value (void) const
     { return rep->bool_value (); }
 
   virtual boolMatrix bool_matrix_value (void) const
     { return rep->bool_matrix_value (); }
 
@@ -397,44 +407,60 @@ public:
   // it, and we should convert it if possible.
 
   virtual octave_value convert_to_str (void) const
     { return rep->convert_to_str (); }
 
   virtual void convert_to_row_or_column_vector (void)
     { rep->convert_to_row_or_column_vector (); }
 
-  void print (bool pr_as_read_syntax = false);
-
-  virtual void print (ostream& os, bool pr_as_read_syntax = false)
+  virtual void print (ostream& os, bool pr_as_read_syntax = false) const
     { rep->print (os, pr_as_read_syntax); }
 
-  void print_with_name (const string& name, bool print_padding = true);
+  virtual void print_raw (ostream& os, bool pr_as_read_syntax = false) const
+    { rep->print_raw (os, pr_as_read_syntax); }
+
+  virtual bool print_name_tag (ostream& os, const string& name) const
+    { return rep->print_name_tag (os, name); }
 
   void print_with_name (ostream& os, const string& name,
-			bool print_padding = true);
+			bool print_padding = true) const;
 
   virtual int type_id (void) const { return rep->type_id (); }
 
   virtual string type_name (void) const { return rep->type_name (); }
 
   // Binary and unary operations.
 
   friend octave_value do_binary_op (octave_value::binary_op,
 				    const octave_value&,
 				    const octave_value&);
 
-  // Can we make these go away?
-
-  bool print_as_scalar (void);
-
 protected:
 
   octave_value (const octave_xvalue&) : rep (0) { }
 
+  void reset_indent_level (void) const
+    { curr_print_indent_level = 0; }
+
+  void increment_indent_level (void) const
+    { curr_print_indent_level += 2; }
+
+  void decrement_indent_level (void) const
+    { curr_print_indent_level -= 2; }
+
+  int current_print_indent_level (void) const
+    { return curr_print_indent_level; }
+
+  void newline (ostream& os) const;
+
+  void indent (ostream& os) const;
+
+  void reset (void) const;
+
 private:
 
   static octave_allocator allocator;
 
   union
     {
       octave_value *rep;      // The real representation.
       int count;              // A reference count.
@@ -444,16 +470,19 @@ private:
 			   const octave_value& rhs);
 
   bool try_assignment_with_conversion (assign_op,
 				       const octave_value_list& idx,
 				       const octave_value& rhs);
 
   bool try_assignment (assign_op, const octave_value_list& idx,
 		       const octave_value& rhs);
+
+  static int curr_print_indent_level;
+  static bool beginning_of_line;
 };
 
 // If TRUE, allow assignments like
 //
 //   octave> A(1) = 3; A(2) = 5
 //
 // for A already defined and a matrix type.
 extern bool Vdo_fortran_indexing;
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -1059,17 +1059,16 @@ print_empty_matrix (ostream& os, int nr,
       else
 	os << "zeros (" << nr << ", " << nc << ")";
     }
   else
     {
       os << "[]";
       if (Vprint_empty_dimensions)
 	os << "(" << nr << "x" << nc << ")";
-      os << "\n";
     }
 }
 
 static void
 pr_col_num_header (ostream& os, int total_width, int max_width,
 		   int lim, int col, int extra_indent)
 {
   if (total_width > max_width && Vsplit_long_rows)
@@ -1082,19 +1081,16 @@ pr_col_num_header (ostream& os, int tota
       os.form ("%*s", extra_indent, "");
 
       if (num_cols == 1)
 	os << " Column " << col + 1 << ":\n";
       else if (num_cols == 2)
 	os << " Columns " << col + 1 << " and " << lim << ":\n";
       else
 	os << " Columns " << col + 1 << " through " << lim << ":\n";
-
-      if (! compact_format)
-	os << "\n";
     }
 }
 
 void
 octave_print_internal (ostream& os, double d, bool pr_as_read_syntax)
 {
   if (plus_format)
     {
@@ -1106,19 +1102,16 @@ octave_print_internal (ostream& os, doub
   else
     {
       set_format (d);
       if (free_format)
 	os << d;
       else
 	pr_float (os, d);
     }
-
-  if (! pr_as_read_syntax)
-    os << "\n";
 }
 
 void
 octave_print_internal (ostream& os, const Matrix& m, bool pr_as_read_syntax,
 		       int extra_indent)
 {
   int nr = m.rows ();
   int nc = m.columns ();
@@ -1258,19 +1251,16 @@ octave_print_internal (ostream& os, cons
   else
     {
       set_format (c);
       if (free_format)
 	os << c;
       else
 	pr_complex (os, c);
     }
-
-  if (! pr_as_read_syntax)
-    os << "\n";
 }
 
 void
 octave_print_internal (ostream& os, const ComplexMatrix& cm,
 		       bool pr_as_read_syntax, int extra_indent)
 {
   int nr = cm.rows ();
   int nc = cm.columns ();
@@ -1537,17 +1527,17 @@ octave_print_internal (ostream& os, cons
 DEFUN (disp, args, ,
   "disp (X): display value without name tag")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
-    args(0).print ();
+    args(0).print (octave_stdout);
   else
     print_usage ("disp");
 
   return retval;
 }
 
 static void
 init_format_state (void)
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -31,17 +31,16 @@ Software Foundation, 59 Temple Place - S
 #include <cctype>
 
 #include "oct-glob.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "oct-sym.h"
 #include "oct-fcn.h"
-#include "pt-const.h"
 #include "symtab.h"
 #include "utils.h"
 #include "variables.h"
 
 // Variables and functions.
 
 symbol_def::symbol_def (octave_symbol *sym, unsigned int sym_type)
 {
