# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1456439654 18000
#      Thu Feb 25 17:34:14 2016 -0500
# Node ID 06d15e4e611ab29fbbb433cd9a15d17e03850f40
# Parent  e4fc19d8c6c397b7bdbb86d29dcb51c1b4eb9ddc
move public data type macros to octave-config.h

* configure.ac: Define OCTAVE_HAVE_LONG_LONG_INT,
OCTAVE_HAVE_UNSIGNED_LONG_LONG_INT, and
OCTAVE_HAVE_OVERLOAD_CHAR_INT8_TYPES.
* mk-oct-config-h.sh: Extract them from config.h.
* oct-stream.cc, ov.cc, ov.h, Array-i.cc, data-conv.cc,
oct-inttypes.h, acinclude.m4: Use new macro names.

diff --git a/build-aux/mk-octave-config-h.sh b/build-aux/mk-octave-config-h.sh
--- a/build-aux/mk-octave-config-h.sh
+++ b/build-aux/mk-octave-config-h.sh
@@ -151,16 +151,19 @@ else
 fi
 
 grep "#\(undef\|define\) OCTAVE_ENABLE_64" $config_h_file
 grep "#\(undef\|define\) OCTAVE_ENABLE_ATOMIC_REFCOUNT" $config_h_file
 grep "#\(undef\|define\) OCTAVE_ENABLE_BOUNDS_CHECK" $config_h_file
 grep "#\(undef\|define\) OCTAVE_ENABLE_OPENMP" $config_h_file
 
 grep "#\(undef\|define\) OCTAVE_HAVE_FAST_INT_OPS" $config_h_file
+grep "#\(undef\|define\) OCTAVE_HAVE_LONG_LONG_INT" $config_h_file
+grep "#\(undef\|define\) OCTAVE_HAVE_UNSIGNED_LONG_LONG_INT" $config_h_file
+grep "#\(undef\|define\) OCTAVE_HAVE_OVERLOAD_CHAR_INT8_TYPES" $config_h_file
 
 if grep "#undef HAVE_DEV_T" $config_h_file > /dev/null; then
   cat << EOF
 
 typedef short dev_t;
 
 EOF
 else
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2214,19 +2214,30 @@ AC_TYPE_INT64_T
 AC_TYPE_MODE_T
 AC_TYPE_OFF_T
 AC_TYPE_PID_T
 AC_TYPE_SIZE_T
 AC_TYPE_SSIZE_T
 AC_TYPE_UID_T
 AC_TYPE_UINT64_T
 AC_CHECK_TYPES([dev_t, ino_t])
-AC_CHECK_TYPES([long long int, unsigned long long int])
 AC_CHECK_TYPES([ptrdiff_t])
 
+AC_CHECK_TYPES([long long int])
+if test "x$ac_cv_type_long_long_int" = xyes; then
+  AC_DEFINE(OCTAVE_HAVE_LONG_LONG_INT, 1,
+    [Define to 1 if the system has the type 'long long int'.])
+fi
+
+AC_CHECK_TYPES([unsigned long long int])
+if test "x$ac_cv_type_unsigned_long_long_int" = xyes; then
+  AC_DEFINE(OCTAVE_HAVE_UNSIGNED_LONG_LONG_INT, 1,
+    [Define to 1 if the system has the type 'unsigned long long int'.])
+fi
+
 ## How big are ints and how are they oriented?
 ## These could probably be eliminated in favor of run-time checks.
 
 AC_CHECK_SIZEOF([short])
 AC_CHECK_SIZEOF([int])
 AC_CHECK_SIZEOF([long])
 AC_CHECK_SIZEOF([long long])
 ## Check for long double type (for 64-bit integers)
@@ -2250,17 +2261,17 @@ AC_CACHE_CHECK([whether ${CXX-g++} allow
     void somefunc(int8_t x) {};
     void somefunc(uint8_t x) {};
     ]])],
     octave_cv_overload_char_int8_t=yes,
     octave_cv_overload_char_int8_t=no)
   AC_LANG_POP(C++)
   ])
 if test $octave_cv_overload_char_int8_t = yes; then
-  AC_DEFINE(HAVE_OVERLOAD_CHAR_INT8_TYPES, 1,
+  AC_DEFINE(OCTAVE_HAVE_OVERLOAD_CHAR_INT8_TYPES, 1,
     [Define to 1 if C++ allows overload of char, int8_t, and uint8_t types.])
 fi
 
 ### Check compiler characteristics.
 
 ## Check if C++ compiler can auto allocate variable sized arrays.
 OCTAVE_CXX_DYNAMIC_AUTO_ARRAYS
 
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -3855,17 +3855,17 @@ INSTANTIATE_WRITE (int8_t);
 INSTANTIATE_WRITE (uint8_t);
 INSTANTIATE_WRITE (int16_t);
 INSTANTIATE_WRITE (uint16_t);
 INSTANTIATE_WRITE (int32_t);
 INSTANTIATE_WRITE (uint32_t);
 INSTANTIATE_WRITE (int64_t);
 INSTANTIATE_WRITE (uint64_t);
 INSTANTIATE_WRITE (bool);
-#if defined (HAVE_OVERLOAD_CHAR_INT8_TYPES)
+#if defined (OCTAVE_HAVE_OVERLOAD_CHAR_INT8_TYPES)
 INSTANTIATE_WRITE (char);
 #endif
 INSTANTIATE_WRITE (float);
 INSTANTIATE_WRITE (double);
 
 octave_value
 octave_stream::scanf (const std::string& fmt, const Array<double>& size,
                       octave_idx_type& count, const std::string& who)
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -491,24 +491,24 @@ octave_value::octave_value (long int i)
 {
 }
 
 octave_value::octave_value (unsigned long int i)
   : rep (new octave_scalar (i))
 {
 }
 
-#if defined (HAVE_LONG_LONG_INT)
+#if defined (OCTAVE_HAVE_LONG_LONG_INT)
 octave_value::octave_value (long long int i)
   : rep (new octave_scalar (i))
 {
 }
 #endif
 
-#if defined (HAVE_UNSIGNED_LONG_LONG_INT)
+#if defined (OCTAVE_HAVE_UNSIGNED_LONG_LONG_INT)
 octave_value::octave_value (unsigned long long int i)
   : rep (new octave_scalar (i))
 {
 }
 #endif
 
 octave_value::octave_value (octave_time t)
   : rep (new octave_scalar (t.double_value ()))
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -180,20 +180,20 @@ public:
   octave_value (long int i);
   octave_value (unsigned long int i);
 
   // FIXME: These are kluges.  They turn into doubles internally, which will
   // break for very large values.  We just use them to store things like
   // 64-bit ino_t, etc, and hope that those values are never actually larger
   // than can be represented exactly in a double.
 
-#if defined (HAVE_LONG_LONG_INT)
+#if defined (OCTAVE_HAVE_LONG_LONG_INT)
   octave_value (long long int i);
 #endif
-#if defined (HAVE_UNSIGNED_LONG_LONG_INT)
+#if defined (OCTAVE_HAVE_UNSIGNED_LONG_LONG_INT)
   octave_value (unsigned long long int i);
 #endif
 
   octave_value (octave_time t);
   octave_value (double d);
   octave_value (float d);
   octave_value (const Array<octave_value>& a, bool is_cs_list = false);
   octave_value (const Cell& c, bool is_cs_list = false);
diff --git a/liboctave/array/Array-i.cc b/liboctave/array/Array-i.cc
--- a/liboctave/array/Array-i.cc
+++ b/liboctave/array/Array-i.cc
@@ -32,23 +32,23 @@ along with Octave; see the file COPYING.
 #include "Array.cc"
 
 #define INLINE_ASCENDING_SORT 1
 #define INLINE_DESCENDING_SORT 1
 #include "oct-sort.cc"
 
 template class OCTAVE_API octave_sort<int>;
 template class OCTAVE_API octave_sort<long>;
-#if defined (HAVE_LONG_LONG_INT)
+#if defined (OCTAVE_HAVE_LONG_LONG_INT)
 template class OCTAVE_API octave_sort<long long>;
 #endif
 
 INSTANTIATE_ARRAY (int, OCTAVE_API);
 INSTANTIATE_ARRAY (long, OCTAVE_API);
-#if defined (HAVE_LONG_LONG_INT)
+#if defined (OCTAVE_HAVE_LONG_LONG_INT)
 INSTANTIATE_ARRAY (long long, OCTAVE_API);
 #endif
 
 template class OCTAVE_API octave_sort<octave_int8>;
 template class OCTAVE_API octave_sort<octave_int16>;
 template class OCTAVE_API octave_sort<octave_int32>;
 template class OCTAVE_API octave_sort<octave_int64>;
 
diff --git a/liboctave/util/data-conv.cc b/liboctave/util/data-conv.cc
--- a/liboctave/util/data-conv.cc
+++ b/liboctave/util/data-conv.cc
@@ -32,17 +32,17 @@ along with Octave; see the file COPYING.
 #include <vector>
 
 #include "byte-swap.h"
 #include "data-conv.h"
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "oct-locbuf.h"
 
-#if defined HAVE_LONG_LONG_INT
+#if defined (OCTAVE_HAVE_LONG_LONG_INT)
 #  define FIND_SIZED_INT_TYPE(VAL, BITS, TQ, Q) \
      do \
        { \
          int sz = BITS / std::numeric_limits<unsigned char>::digits; \
          if (sizeof (TQ char) == sz) \
            VAL = oct_data_conv::dt_ ## Q ## char; \
          else if (sizeof (TQ short) == sz) \
            VAL = oct_data_conv::dt_ ## Q ## short; \
diff --git a/liboctave/util/oct-inttypes.h b/liboctave/util/oct-inttypes.h
--- a/liboctave/util/oct-inttypes.h
+++ b/liboctave/util/oct-inttypes.h
@@ -840,17 +840,17 @@ octave_int : public octave_int_base<T>
 {
 public:
   typedef T val_type;
 
   octave_int (void) : ival () { }
 
   octave_int (T i) : ival (i) { }
 
-#if defined (HAVE_OVERLOAD_CHAR_INT8_TYPES)
+#if defined (OCTAVE_HAVE_OVERLOAD_CHAR_INT8_TYPES)
   // Always treat characters as unsigned.
   octave_int (char c)
     : ival (octave_int_base<T>::truncate_int (static_cast<unsigned char> (c)))
   { }
 #endif
 
   octave_int (double d) : ival (octave_int_base<T>::convert_real (d)) { }
 
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -1554,17 +1554,17 @@ AC_DEFUN([OCTAVE_FAST_INT_OPS], [
             return sizeof (T);
 
         ]],[[
 
         DO_TEST(char)
         DO_TEST(short)
         DO_TEST(int)
         DO_TEST(long)
-        #if (defined(HAVE_LONG_LONG_INT) && defined(HAVE_UNSIGNED_LONG_LONG_INT))
+        #if (defined(OCTAVE_HAVE_LONG_LONG_INT) && defined(OCTAVE_HAVE_UNSIGNED_LONG_LONG_INT))
           DO_TEST(long long)
         #endif
       ]])],
       octave_cv_fast_int_ops=yes,
       octave_cv_fast_int_ops=no,
       octave_cv_fast_int_ops=yes)
     AC_LANG_POP(C++)
   ])
