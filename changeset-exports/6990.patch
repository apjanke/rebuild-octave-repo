# HG changeset patch
# User dbateman
# Date 1191962395 0
#      Tue Oct 09 20:39:55 2007 +0000
# Node ID 9dc99ab00c86097e8f844bd83ebbbe2cbc3d5029
# Parent  2d326000e09b1b233a25a7abed4a171c66f822ba
[project @ 2007-10-09 20:39:54 by dbateman]

diff --git a/liboctave/Array2.h b/liboctave/Array2.h
--- a/liboctave/Array2.h
+++ b/liboctave/Array2.h
@@ -51,20 +51,29 @@ public:
 
   Array2 (void) : Array<T> (dim_vector (0, 0)) { }
 
   Array2 (octave_idx_type r, octave_idx_type c) : Array<T> (dim_vector (r, c)) { }
 
   Array2 (octave_idx_type r, octave_idx_type c, const T& val)
     : Array<T> (dim_vector (r, c), val) { }
 
-  Array2 (const dim_vector& dv) : Array<T> (dv) { }
+  Array2 (const dim_vector& dv) : Array<T> (dv) 
+    { 
+      if (dv.length () != 2)
+	(*current_liboctave_error_handler) ("too many dimensions");
+    }
 
-  Array2 (const dim_vector& dv, const T& val) 
-    : Array<T> (dv) { Array<T>::fill (val); }
+  Array2 (const dim_vector& dv, const T& val) : Array<T> (dv) 
+    { 
+      if (dv.length () != 2)
+	(*current_liboctave_error_handler) ("too many dimensions");
+      else
+	Array<T>::fill (val); 
+    }
 
   Array2 (const Array2<T>& a) : Array<T> (a, a.dims ()) { }
 
   Array2 (const Array<T>& a, octave_idx_type r, octave_idx_type c)
     : Array<T> (a, dim_vector (r, c)) { }
 
   ~Array2 (void) { }
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,15 +1,19 @@
 2007-10-09  John W. Eaton  <jwe@octave.org>
 
 	* dSparse.cc (SparseMatrix::all_elements_are_zero): New function.
 	* dNDArray.cc (NDArray::all_elements_are_zero): New function.
 
 2007-10-09  David Bateman  <dbateman@free.fr>
 
+	* Array2.h (Array2<T>::Array2(const dim_vector&),
+	Array2<T>::Array(const dim_vector&, const T&)): Check that
+	dim_vector is 2 dimensional.
+
 	* Sparse.cc (Sparse<T> Sparse<T>::index (idx_vector&, idx_vector&,
 	int)): Remove a for loop in the random indexing case at the
 	expense of maintaining a set of linked lists of indices that point 
 	to the same column in the original matrix.
 	(int assign (Sparse<LT>&, Sparse<RT>)): Take a const copy of lhs
 	and use it on the RHS of expressions to avoid unnecessary calls to
 	make_unique.
 
