# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1383174255 14400
#      Wed Oct 30 19:04:15 2013 -0400
# Node ID 6da521da1c700f7de39629041fdc1fc6a7bfcf04
# Parent  1631e47a213835b0a3af5d0a21fda32a95b596b4
preserve cached mxArray_octave_value data while it's still in use (bug #40429)

* mex.cc (mxArray_octave_value::as_mxArray): Transplant cached
class_name and dims values to new mxArray object.
(mxArray_octave_value::mutate): Call as_mxArray.

diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -163,17 +163,49 @@ public:
   mxArray_octave_value (const octave_value& ov)
     : mxArray_base (), val (ov), mutate_flag (false),
       id (mxUNKNOWN_CLASS), class_name (0), ndims (-1), dims (0) { }
 
   mxArray_base *dup (void) const { return new mxArray_octave_value (*this); }
 
   mxArray *as_mxArray (void) const
   {
-    return val.as_mxArray ();
+    mxArray *retval = val.as_mxArray ();
+
+    // RETVAL is assumed to be an mxArray_matlab object.  Should we
+    // assert that condition here?
+
+    if (retval)
+      {
+        // Preserve cached values of class name and dimensions in case
+        // they will be used after we mutate.
+
+        // set_class_name will handle deleting class name that comes
+        // from as_mxArray conversion function.
+
+        if (class_name)
+          {
+            retval->set_class_name (class_name);
+
+            class_name = 0;
+          }
+
+        if (dims)
+          {
+            mwSize *xdims = retval->get_dimensions ();
+
+            mxFree (xdims);
+
+            retval->set_dimensions (dims, ndims);
+
+            dims = 0;
+          }
+      }
+
+    return retval;
   }
 
   ~mxArray_octave_value (void)
   {
     mxFree (class_name);
     mxFree (dims);
   }
 
@@ -521,17 +553,17 @@ public:
   void request_mutation (void) const
   {
     if (mutate_flag)
       panic_impossible ();
 
     mutate_flag = true;
   }
 
-  mxArray *mutate (void) const { return val.as_mxArray (); }
+  mxArray *mutate (void) const { return as_mxArray (); }
 
   octave_value as_octave_value (void) const { return val; }
 
 protected:
 
   mxArray_octave_value (const mxArray_octave_value& arg)
     : mxArray_base (arg), val (arg.val), mutate_flag (arg.mutate_flag),
       id (arg.id), class_name (mxArray::strsave (arg.class_name)),
@@ -2732,18 +2764,18 @@ void
 mxSetN (mxArray *ptr, mwSize n)
 {
   ptr->set_n (n);
 }
 
 void
 mxSetDimensions (mxArray *ptr, const mwSize *dims, mwSize ndims)
 {
-  ptr->set_dimensions (static_cast<mwSize *> (
-                         maybe_unmark (const_cast<mwSize *> (dims))),
+  ptr->set_dimensions (static_cast<mwSize *>
+                       (maybe_unmark (const_cast<mwSize *> (dims))),
                        ndims);
 }
 
 // Data extractors.
 double *
 mxGetPr (const mxArray *ptr)
 {
   return static_cast<double *> (ptr->get_data ());
