# HG changeset patch
# User Shai Ayal <shaiay@users.sourceforge.net>
# Date 1204402073 -7200
#      Sat Mar 01 22:07:53 2008 +0200
# Node ID 4dc3e0ff730a945f5656b09ae789d826f33c6f04
# Parent  002b1d8460d215a27c46ffa41ad48aaa62941f7b
Added zoombox (mouse button 1) & autoscale (button marked A and mouse button 3)

diff --git a/src/graphics/ChangeLog b/src/graphics/ChangeLog
--- a/src/graphics/ChangeLog
+++ b/src/graphics/ChangeLog
@@ -1,10 +1,17 @@
 2008-03-01  Shai Ayal  <shaiay@users.sourceforge.net>
 
+	* fltk_backend/fltk_backend.cc (OpenGL_fltk::draw_overlay,
+	OpenGL_fltk::zoom, OpenGL_fltk::set_zoom_box): Added to support
+	zoom box
+	(plot_window::handle): Added zoom box code, B-3 now does autoscale
+	(plot_window::axis_auto): New utility function to call axis("auto")
+	(plot_window::button_press): "A" button now does autoscale
+
 	* opengl/gl-render.cc (make_marker_list): Add the "+x*.^v><"
 	markers
 
 2008-02-27  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* opengl/gl-render.cc (opengl_renderer::draw(patch),
 	opengl_renderer::draw(surface)): Adapt to type change of facealpha and
 	edgealpha, using double_radio_property class.
diff --git a/src/graphics/fltk_backend/fltk_backend.cc b/src/graphics/fltk_backend/fltk_backend.cc
--- a/src/graphics/fltk_backend/fltk_backend.cc
+++ b/src/graphics/fltk_backend/fltk_backend.cc
@@ -29,20 +29,21 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 #include "gl-render.h"
 
 #include <FL/Fl.H>
 #include <FL/Fl_Window.H>
 #include <FL/Fl_Output.H>
- #include <FL/Fl_Button.H>
+#include <FL/Fl_Button.H>
 #include <FL/Fl_Gl_Window.H>
 #include <FL/fl_ask.H>
 #include <FL/fl_draw.H>
+#include <FL/gl.h>
 
 #include "oct.h"
 #include "parse.h"
 #include "graphics.h"
 
 #define FLTK_BACKEND_NAME "fltk"
 
 const char* help_text = "\
@@ -55,26 +56,35 @@ left drag - zoom\n\
 right click - unzoom\n\
 double click - copy coordinates to clipboard\
 ";
 
 class OpenGL_fltk : public Fl_Gl_Window {
 public:
   OpenGL_fltk (int x, int y, int w, int h, double num) :
     Fl_Gl_Window (x, y, w, h, 0),
-    number (num)
+    number (num),
+    in_zoom (false)
   {
     // ask for double buffering and a depth buffer
     mode(FL_DEPTH | FL_DOUBLE );
   };
   ~OpenGL_fltk () {};
 
+  void zoom (bool z) {in_zoom = z;}
+  bool zoom () {return in_zoom;}
+  void set_zoom_box (Matrix zb) {zoom_box = zb;}
+
 private:
   double number;
   opengl_renderer renderer;
+  bool in_zoom;
+
+  // (x1,y1,x2,y2)
+  Matrix zoom_box;
 
   void setup_viewport (int _w, int _h) {
     glMatrixMode(GL_PROJECTION);
     glLoadIdentity();
     glViewport (0, 0, _w, _h);
   }    
 
   void draw () {
@@ -87,16 +97,51 @@ private:
   };
 
   void resize (int _x,int _y,int _w,int _h) {
     Fl_Gl_Window::resize (_x, _y, _w, _h);
     setup_viewport (_w, _h);
     redraw ();
   };
 
+  void draw_overlay(void)
+  {
+    if(!in_zoom) return;
+ 
+    if(!valid()) {
+      valid(1);
+      setup_viewport (w (), h ());
+    }
+
+    glPushMatrix ();
+
+    glMatrixMode (GL_MODELVIEW);
+    glLoadIdentity ();
+
+    glMatrixMode (GL_PROJECTION);
+    glLoadIdentity ();
+    gluOrtho2D (0.0, w (), 0.0, h ());
+
+    glPushAttrib (GL_DEPTH_BUFFER_BIT | GL_CURRENT_BIT);
+    glDisable (GL_DEPTH_TEST);
+
+    glLineWidth (1);
+    glBegin (GL_LINE_STRIP);
+    gl_color(0);
+    glVertex2d ( zoom_box(0), h () - zoom_box(1) );
+    glVertex2d ( zoom_box(0), h () - zoom_box(3) );
+    glVertex2d ( zoom_box(2), h () - zoom_box(3) );
+    glVertex2d ( zoom_box(2), h () - zoom_box(1) );
+    glVertex2d ( zoom_box(0), h () - zoom_box(1) );
+    glEnd ();
+
+    glPopAttrib ();
+    glPopMatrix ();
+  }
+
   int handle (int event)
   {
     int retval = Fl_Gl_Window::handle (event);
 
     switch (event)
       {
       case FL_ENTER:
 	window ()->cursor (FL_CURSOR_CROSS);
@@ -205,25 +250,33 @@ private:
   }
 
   // button callbacks
   static void button_callback (Fl_Widget* w, void* data) {
     static_cast<plot_window*> (data)-> button_press (w);
   };
 
   void button_press (Fl_Widget* widg) {
-    if (widg == autoscale) std::cout << "AS " << number () << " pressed\n";
+    if (widg == autoscale) axis_auto ();
     if (widg == help) fl_message (help_text);
   }
 
   OpenGL_fltk*   canvas;
   Fl_Button*	 autoscale;
   Fl_Button*	 help;
   Fl_Output*     status;
 
+  void axis_auto () 
+  {
+    octave_value_list args;    
+    args(0) = "auto";
+    feval("axis",args);
+    mark_modified ();
+  }
+
   void pixel2pos (int px, int py, double& x, double& y) const {
     graphics_object ax = gh_manager::get_object (fp.get_currentaxes ());
     if (ax && ax.isa ("axes")) 
       {
 	axes::properties& ap = 
 	  dynamic_cast<axes::properties&> (ax.get_properties ());
 	ColumnVector pp = ap.pixel2coord (px, py);
 	x = pp(0);
@@ -288,17 +341,16 @@ private:
     Fl_Window::resize (pos(0), pos(1) , pos(2), pos(3));
 
     return Fl_Window::draw ();
   }
  
   int handle (int event) {
     static int px0,py0;
     static graphics_handle h0 = graphics_handle ();
-    static bool in_drag = false;
 
     int retval = Fl_Window::handle (event);
 
     // we only handle events which are in the canvas area
     if (Fl::event_y () >= h() - status_h)
       return retval;
 
     switch (event)
@@ -317,27 +369,35 @@ private:
 	    return 1;
 	  }
 	break;
 
       case FL_DRAG:
 	pixel2status (px0, py0, Fl::event_x (), Fl::event_y ());
 	if (Fl::event_button () == 1)
 	  {
-	    in_drag = true;
+	    canvas->zoom (true);
+	    Matrix zoom_box (1,4,0);
+	    zoom_box (0) = px0;
+	    zoom_box (1) = py0;
+	    zoom_box (2) =  Fl::event_x ();
+	    zoom_box (3) =  Fl::event_y ();
+	    canvas->set_zoom_box (zoom_box);
+	    canvas->redraw_overlay ();
 	    return 1;
 	  }
 	break;
 
       case FL_RELEASE:
 	if (Fl::event_button () == 1)
 	  {
 	    // end of drag -- zoom
-	    if (in_drag)
+	    if (canvas->zoom ())
 	      {
+		canvas->zoom (false);
 		double x0,y0,x1,y1;
 		graphics_object ax = 
 		  gh_manager::get_object (fp.get_currentaxes ());
 		if (ax && ax.isa ("axes")) 
 		  {
 		    axes::properties& ap = 
 		      dynamic_cast<axes::properties&> (ax.get_properties ());
 		    pixel2pos (px0, py0, x0, y0);
@@ -362,27 +422,30 @@ private:
 		    else
 		      {
 			pp(0) = y1;
 			pp(1) = y0;
 		      }
 		    ap.set_ylim (pp);
 		    mark_modified ();
 		  }
-		in_drag = false;
 	      }
 	    // one click -- select axes
 	    else if ( Fl::event_clicks () == 0)
 	      {
 		std::cout << "ca="<< h0.value ()<<"\n";
 		if (h0.ok ())
 		  fp.set_currentaxes (h0.value());
 		return 1;
 	      }
 	  }
+	else if (Fl::event_button () == 3)
+	  {
+	    axis_auto ();
+	  }
 	break;
       }
 
     return retval;
   }
 
 };
 
@@ -481,25 +544,24 @@ private:
   {
     int ind;
     if (clstr.find (fltk_idx_header,0) == 0)
       {
 	std::istringstream istr (clstr.substr (fltk_idx_header.size ()));
 	if (istr >> ind )
 	  return ind;
       }
-    error ("fltk_backend: could not recodnise fltk index");
+    error ("fltk_backend: could not recognize fltk index");
     return -1;
   }
 
   void idx2figprops (int idx, figure::properties& fp)
   {
     std::ostringstream ind_str;
     ind_str << fltk_idx_header << idx;
-    std::cout << ind_str.str () << "\n";
     fp.set___plot_stream__ (ind_str.str ());
   }
 
   int figprops2idx (const figure::properties& fp)
   {
     if (fp.get___backend__ () == FLTK_BACKEND_NAME)
       {
 	octave_value ps = fp.get___plot_stream__ ();
