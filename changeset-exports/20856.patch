# HG changeset patch
# User Yu Liu <yul.liuiyu@gmail.com>
# Date 1449935660 18000
#      Sat Dec 12 10:54:20 2015 -0500
# Node ID b3a18c7641613f8fae2c8c708f28c76832c2a1a6
# Parent  cdf08aacfd86602a1c17bd988ba976402c66e4c7
Code sprint 2015: Refactor print_usage() in syscalls.cc to resemble m-files

diff --git a/libinterp/corefcn/syscalls.cc b/libinterp/corefcn/syscalls.cc
--- a/libinterp/corefcn/syscalls.cc
+++ b/libinterp/corefcn/syscalls.cc
@@ -630,40 +630,38 @@ DEFUNX ("geteuid", Fgeteuid, args, ,
 Return the effective user id of the current process.\n\
 @seealso{getuid}\n\
 @end deftypefn")
 {
   octave_value retval = -1;
 
   int nargin = args.length ();
 
-  if (nargin == 0)
-    retval = octave_syscalls::geteuid ();
-  else
+  if (nargin != 0)
     print_usage ();
 
+  retval = octave_syscalls::geteuid ();
   return retval;
 }
 
 DEFUNX ("getuid", Fgetuid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {uid =} getuid ()\n\
 Return the real user id of the current process.\n\
 @seealso{geteuid}\n\
 @end deftypefn")
 {
   octave_value retval = -1;
 
   int nargin = args.length ();
 
-  if (nargin == 0)
-    retval = octave_syscalls::getuid ();
-  else
+  if (nargin != 0)
     print_usage ();
 
+  retval = octave_syscalls::getuid ();
   return retval;
 }
 
 DEFUNX ("kill", Fkill, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {[@var{err}, @var{msg}] =} kill (@var{pid}, @var{sig})\n\
 Send signal @var{sig} to process @var{pid}.\n\
 \n\
@@ -684,31 +682,29 @@ performed.\n\
 Return 0 if successful, otherwise return -1.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1;
 
-  if (args.length () == 2)
-    {
-      pid_t pid = args(0).int_value (true);
+  if (args.length () != 2)
+    print_usage ();
 
-      int sig = args(1).int_value (true);
+  pid_t pid = args(0).int_value (true);
 
-      std::string msg;
+  int sig = args(1).int_value (true);
 
-      int status = octave_syscalls::kill (pid, sig, msg);
+  std::string msg;
 
-      retval(1) = msg;
-      retval(0) = status;
-    }
-  else
-    print_usage ();
+  int status = octave_syscalls::kill (pid, sig, msg);
+
+  retval(1) = msg;
+  retval(0) = status;
 
   return retval;
 }
 
 DEFUNX ("lstat", Flstat, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {} {@var{info} =} lstat (@var{symlink})\n\
 @deftypefnx {} {[@var{info}, @var{err}, @var{msg}] =} lstat (@var{symlink})\n\
@@ -716,26 +712,24 @@ Return a structure @var{info} containing
 @var{symlink}.\n\
 \n\
 The function outputs are described in the documentation for @code{stat}.\n\
 @seealso{stat, symlink}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  if (args.length () == 1)
-    {
-      std::string fname = args(0).xstring_value ("lstat: NAME must be a string");
+  if (args.length () != 1)
+    print_usage ();
 
-      file_stat fs (fname, false);
+    std::string fname = args(0).xstring_value ("lstat: NAME must be a string");
 
-      retval = mk_stat_result (fs);
-    }
-  else
-    print_usage ();
+    file_stat fs (fname, false);
+
+    retval = mk_stat_result (fs);
 
   return retval;
 }
 
 // FIXME: This routine also exists verbatim in file-io.cc.
 //        Maybe change to be a general utility routine.
 static int
 convert (int x, int ibase, int obase)
@@ -783,40 +777,39 @@ error message.\n\
 {
   octave_value_list retval (2);
 
   retval(1) = std::string ();
   retval(0) = -1;
 
   int nargin = args.length ();
 
-  if (nargin == 2)
-    {
-      std::string name = args(0).xstring_value ("mkfifo: FILE must be a string");
-
-      int octal_mode = args(1).xint_value ("mkfifo: MODE must be an integer");
+  if (nargin != 2)
+    print_usage ();
 
-      if (octal_mode < 0)
-        error ("mkfifo: MODE must be a positive integer value");
-      else
-        {
-          int mode = convert (octal_mode, 8, 10);
+  std::string name = args(0).xstring_value ("mkfifo: FILE must be a string");
+
+  int octal_mode = args(1).xint_value ("mkfifo: MODE must be an integer");
 
-          std::string msg;
+  if (octal_mode < 0)
+    error ("mkfifo: MODE must be a positive integer value");
+  else
+    {
+      int mode = convert (octal_mode, 8, 10);
 
-          int status = octave_mkfifo (name, mode, msg);
-
-          retval(0) = status;
+      std::string msg;
 
-          if (status < 0)
-            retval(1) = msg;
-        }
+      int status = octave_mkfifo (name, mode, msg);
+
+      retval(0) = status;
+
+      if (status < 0)
+          retval(1) = msg;
     }
-  else
-    print_usage ();
+
 
   return retval;
 }
 
 /*
 
 ## Test input validation
 %!error mkfifo ()
@@ -845,44 +838,42 @@ error message.\n\
 
   retval(3) = std::string ();
   retval(2) = -1;
   retval(1) = -1;
   retval(0) = -1;
 
   int nargin = args.length ();
 
-  if (nargin == 0)
-    {
-      int fid[2];
+  if (nargin != 0)
+    print_usage ();
 
-      std::string msg;
+  int fid[2];
 
-      int status = octave_syscalls::pipe (fid, msg);
+  std::string msg;
+
+  int status = octave_syscalls::pipe (fid, msg);
 
-      if (status < 0)
-        retval(3) = msg;
-      else
-        {
-          FILE *ifile = fdopen (fid[0], "r");
-          FILE *ofile = fdopen (fid[1], "w");
-
-          octave_stream is = octave_stdiostream::create ("pipe-in", ifile,
-                                                         std::ios::in);
+  if (status < 0)
+    retval(3) = msg;
+  else
+    {
+      FILE *ifile = fdopen (fid[0], "r");
+      FILE *ofile = fdopen (fid[1], "w");
 
-          octave_stream os = octave_stdiostream::create ("pipe-out", ofile,
-                                                         std::ios::out);
+      octave_stream is = octave_stdiostream::create ("pipe-in", ifile,
+                                                       std::ios::in);
 
-          retval(2) = status;
-          retval(1) = octave_stream_list::insert (os);
-          retval(0) = octave_stream_list::insert (is);
-        }
+      octave_stream os = octave_stdiostream::create ("pipe-out", ofile,
+                                                       std::ios::out);
+
+      retval(2) = status;
+      retval(1) = octave_stream_list::insert (os);
+      retval(0) = octave_stream_list::insert (is);
     }
-  else
-    print_usage ();
 
   return retval;
 }
 
 DEFUNX ("stat", Fstat, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {} {[@var{info}, @var{err}, @var{msg}] =} stat (@var{file})\n\
 @deftypefnx {} {[@var{info}, @var{err}, @var{msg}] =} stat (@var{fid})\n\
@@ -975,215 +966,201 @@ For example:\n\
   @result{} err = 0\n\
   @result{} msg =\n\
 @end example\n\
 @seealso{lstat, ls, dir}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  if (args.length () == 1)
-    {
-      if (args(0).is_scalar_type ())
-        {
-          int fid = octave_stream_list::get_file_number (args(0));
+  if (args.length () != 1)
+    print_usage ();
 
-          file_fstat fs (fid);
+    if (args(0).is_scalar_type ())
+      {
+        int fid = octave_stream_list::get_file_number (args(0));
+
+        file_fstat fs (fid);
 
-          retval = mk_stat_result (fs);
-        }
-      else
-        {
-          std::string fname = args(0).xstring_value ("stat: NAME must be a string");
+        retval = mk_stat_result (fs);
+      }
+    else
+      {
+        std::string fname = args(0).xstring_value ("stat: NAME must be a string");
 
-          file_stat fs (fname);
+        file_stat fs (fname);
 
-          retval = mk_stat_result (fs);
-        }
-    }
-  else
-    print_usage ();
+        retval = mk_stat_result (fs);
+      }
 
   return retval;
 }
 
 DEFUNX ("S_ISREG", FS_ISREG, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} S_ISREG (@var{mode})\n\
 Return true if @var{mode} corresponds to a regular file.\n\
 \n\
 The value of @var{mode} is assumed to be returned from a call to @code{stat}.\n\
 @seealso{stat, lstat}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
-  if (args.length () == 1)
-    {
-      double mode = args(0).xdouble_value ("S_ISREG: invalid MODE value");
+  if (args.length () != 1)
+    print_usage ();
 
-      retval = file_stat::is_reg (static_cast<mode_t> (mode));
-    }
-  else
-    print_usage ();
+  double mode = args(0).xdouble_value ("S_ISREG: invalid MODE value");
+
+  retval = file_stat::is_reg (static_cast<mode_t> (mode));
 
   return retval;
 }
 
 DEFUNX ("S_ISDIR", FS_ISDIR, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} S_ISDIR (@var{mode})\n\
 Return true if @var{mode} corresponds to a directory.\n\
 \n\
 The value of @var{mode} is assumed to be returned from a call to @code{stat}.\n\
 @seealso{stat, lstat}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
-  if (args.length () == 1)
-    {
-      double mode = args(0).xdouble_value ("S_ISDIR: invalid MODE value");
+  if (args.length () != 1)
+    print_usage ();
 
-      retval = file_stat::is_dir (static_cast<mode_t> (mode));
-    }
-  else
-    print_usage ();
+  double mode = args(0).xdouble_value ("S_ISDIR: invalid MODE value");
+
+  retval = file_stat::is_dir (static_cast<mode_t> (mode));
 
   return retval;
 }
 
 DEFUNX ("S_ISCHR", FS_ISCHR, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} S_ISCHR (@var{mode})\n\
 Return true if @var{mode} corresponds to a character device.\n\
 \n\
 The value of @var{mode} is assumed to be returned from a call to @code{stat}.\n\
 @seealso{stat, lstat}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
-  if (args.length () == 1)
-    {
-      double mode = args(0).xdouble_value ("S_ISCHR: invalid MODE value");
+  if (args.length () != 1)
+    print_usage ();
 
-      retval = file_stat::is_chr (static_cast<mode_t> (mode));
-    }
-  else
-    print_usage ();
+  double mode = args(0).xdouble_value ("S_ISCHR: invalid MODE value");
+
+  retval = file_stat::is_chr (static_cast<mode_t> (mode));
+
 
   return retval;
 }
 
 DEFUNX ("S_ISBLK", FS_ISBLK, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} S_ISBLK (@var{mode})\n\
 Return true if @var{mode} corresponds to a block device.\n\
 \n\
 The value of @var{mode} is assumed to be returned from a call to @code{stat}.\n\
 @seealso{stat, lstat}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
-  if (args.length () == 1)
-    {
-      double mode = args(0).xdouble_value ("S_ISBLK: invalid MODE value");
+  if (args.length () != 1)
+    print_usage ();
 
-      retval = file_stat::is_blk (static_cast<mode_t> (mode));
-    }
-  else
-    print_usage ();
+  double mode = args(0).xdouble_value ("S_ISBLK: invalid MODE value");
+
+  retval = file_stat::is_blk (static_cast<mode_t> (mode));
 
   return retval;
 }
 
 DEFUNX ("S_ISFIFO", FS_ISFIFO, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} S_ISFIFO (@var{mode})\n\
 Return true if @var{mode} corresponds to a fifo.\n\
 \n\
 The value of @var{mode} is assumed to be returned from a call to @code{stat}.\n\
 @seealso{stat, lstat}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
-  if (args.length () == 1)
-    {
-      double mode = args(0).xdouble_value ("S_ISFIFO: invalid MODE value");
+  if (args.length () != 1)
+    print_usage ();
 
-      retval = file_stat::is_fifo (static_cast<mode_t> (mode));
-    }
-  else
-    print_usage ();
+  double mode = args(0).xdouble_value ("S_ISFIFO: invalid MODE value");
+
+  retval = file_stat::is_fifo (static_cast<mode_t> (mode));
 
   return retval;
 }
 
 DEFUNX ("S_ISLNK", FS_ISLNK, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} S_ISLNK (@var{mode})\n\
 Return true if @var{mode} corresponds to a symbolic link.\n\
 \n\
 The value of @var{mode} is assumed to be returned from a call to @code{stat}.\n\
 @seealso{stat, lstat}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
-  if (args.length () == 1)
-    {
-      double mode = args(0).xdouble_value ("S_ISLNK: invalid MODE value");
+  if (args.length () != 1)
+    print_usage ();
 
-      retval = file_stat::is_lnk (static_cast<mode_t> (mode));
-    }
-  else
-    print_usage ();
+  double mode = args(0).xdouble_value ("S_ISLNK: invalid MODE value");
+
+  retval = file_stat::is_lnk (static_cast<mode_t> (mode));
 
   return retval;
 }
 
 DEFUNX ("S_ISSOCK", FS_ISSOCK, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} S_ISSOCK (@var{mode})\n\
 Return true if @var{mode} corresponds to a socket.\n\
 \n\
 The value of @var{mode} is assumed to be returned from a call to @code{stat}.\n\
 @seealso{stat, lstat}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
-  if (args.length () == 1)
-    {
-      double mode = args(0).xdouble_value ("S_ISSOCK: invalid MODE value");
+  if (args.length () != 1)
+    print_usage ();
 
-      retval = file_stat::is_sock (static_cast<mode_t> (mode));
-    }
-  else
-    print_usage ();
+  double mode = args(0).xdouble_value ("S_ISSOCK: invalid MODE value");
+
+  retval = file_stat::is_sock (static_cast<mode_t> (mode));
+
 
   return retval;
 }
 
 DEFUN (gethostname, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} gethostname ()\n\
 Return the hostname of the system where Octave is running.\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  if (args.length () == 0)
-    retval = octave_env::get_host_name ();
-  else
+  if (args.length () != 0)
     print_usage ();
 
+  retval = octave_env::get_host_name ();
+
   return retval;
 }
 
 DEFUN (uname, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {[@var{uts}, @var{err}, @var{msg}] =} uname ()\n\
 Return system information in the structure.\n\
 \n\
@@ -1204,34 +1181,33 @@ uname ()\n\
 \n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
 Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
 system-dependent error message.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  if (args.length () == 0)
-    {
-      octave_uname sysinfo;
+  if (args.length () != 0)
+    print_usage ();
 
-      octave_scalar_map m;
+  octave_uname sysinfo;
+
+  octave_scalar_map m;
 
-      m.assign ("sysname", sysinfo.sysname ());
-      m.assign ("nodename", sysinfo.nodename ());
-      m.assign ("release", sysinfo.release ());
-      m.assign ("version", sysinfo.version ());
-      m.assign ("machine", sysinfo.machine ());
+  m.assign ("sysname", sysinfo.sysname ());
+  m.assign ("nodename", sysinfo.nodename ());
+  m.assign ("release", sysinfo.release ());
+  m.assign ("version", sysinfo.version ());
+  m.assign ("machine", sysinfo.machine ());
 
-      retval(2) = sysinfo.message ();
-      retval(1) = sysinfo.error ();
-      retval(0) = m;
-    }
-  else
-    print_usage ();
+  retval(2) = sysinfo.message ();
+  retval(1) = sysinfo.error ();
+  retval(0) = m;
+
 
   return retval;
 }
 
 DEFUNX ("unlink", Funlink, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {[@var{err}, @var{msg}] =} unlink (@var{file})\n\
 Delete the file named @var{file}.\n\
@@ -1244,29 +1220,28 @@ error message.\n\
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1;
 
   int nargin = args.length ();
 
-  if (nargin == 1)
-    {
-      std::string name = args(0).xstring_value ("unlink: FILE must be a string");
+  if (nargin != 1)
+    print_usage ();
 
-      std::string msg;
+  std::string name = args(0).xstring_value ("unlink: FILE must be a string");
 
-      int status = octave_unlink (name, msg);
+  std::string msg;
+
+  int status = octave_unlink (name, msg);
 
-      retval(1) = msg;
-      retval(0) = status;
-    }
-  else
-    print_usage ();
+  retval(1) = msg;
+  retval(0) = status;
+
 
   return retval;
 }
 
 DEFUNX ("waitpid", Fwaitpid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {[@var{pid}, @var{status}, @var{msg}] =} waitpid (@var{pid}, @var{options})\n\
 Wait for process @var{pid} to terminate.\n\
@@ -1316,60 +1291,56 @@ about the subprocess that exited.\n\
   octave_value_list retval;
 
   retval(2) = std::string ();
   retval(1) = 0;
   retval(0) = -1;
 
   int nargin = args.length ();
 
-  if (nargin == 1 || nargin == 2)
-    {
-      pid_t pid = args(0).xint_value ("waitpid: OPTIONS must be an integer");
+  if (nargin != 1 && nargin != 2)
+    print_usage ();
+
+  pid_t pid = args(0).xint_value ("waitpid: OPTIONS must be an integer");
 
-      int options = 0;
+  int options = 0;
 
-      if (args.length () == 2)
-        options = args(1).xint_value ("waitpid: PID must be an integer value");
-
-      std::string msg;
+  if (args.length () == 2)
+    options = args(1).xint_value ("waitpid: PID must be an integer value");
 
-      int status = 0;
+  std::string msg;
 
-      pid_t result = octave_syscalls::waitpid (pid, &status,
-                                               options, msg);
+  int status = 0;
 
-      retval(2) = msg;
-      retval(1) = status;
-      retval(0) = result;
-    }
-  else
-    print_usage ();
+  pid_t result = octave_syscalls::waitpid (pid, &status,
+                                           options, msg);
+
+  retval(2) = msg;
+  retval(1) = status;
+  retval(0) = result;
 
   return retval;
 }
 
 DEFUNX ("WIFEXITED", FWIFEXITED, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WIFEXITED (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
 true if the child terminated normally.\n\
 @seealso{waitpid, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
-  if (args.length () == 1)
-    {
-      int status = args(0).xint_value ("WIFEXITED: STATUS must be an integer");
+  if (args.length () != 1)
+    print_usage ();
 
-      retval = octave_wait::ifexited (status);
-    }
-  else
-    print_usage ();
+  int status = args(0).xint_value ("WIFEXITED: STATUS must be an integer");
+
+  retval = octave_wait::ifexited (status);
 
   return retval;
 }
 
 DEFUNX ("WEXITSTATUS", FWEXITSTATUS, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WEXITSTATUS (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
@@ -1396,48 +1367,46 @@ DEFUNX ("WIFSIGNALED", FWIFSIGNALED, arg
 @deftypefn {} {} WIFSIGNALED (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
 true if the child process was terminated by a signal.\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
-  if (args.length () == 1)
-    {
-      int status = args(0).xint_value ("WIFSIGNALED: STATUS must be an integer");
+  if (args.length () != 1)
+    print_usage ();
 
-      retval = octave_wait::ifsignaled (status);
-    }
-  else
-    print_usage ();
+  int status = args(0).xint_value ("WIFSIGNALED: STATUS must be an integer");
+
+  retval = octave_wait::ifsignaled (status);
+
 
   return retval;
 }
 
 DEFUNX ("WTERMSIG", FWTERMSIG, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WTERMSIG (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
 the number of the signal that caused the child process to terminate.\n\
 \n\
 This function should only be employed if @code{WIFSIGNALED} returned true.\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   octave_value retval = 0;
 
-  if (args.length () == 1)
-    {
-      int status = args(0).xint_value ("WTERMSIG: STATUS must be an integer");
+  if (args.length () != 1)
+    print_usage ();
 
-      retval = octave_wait::termsig (status);
-    }
-  else
-    print_usage ();
+  int status = args(0).xint_value ("WTERMSIG: STATUS must be an integer");
+
+  retval = octave_wait::termsig (status);
+
 
   return retval;
 }
 
 DEFUNX ("WCOREDUMP", FWCOREDUMP, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WCOREDUMP (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
@@ -1446,24 +1415,23 @@ true if the child produced a core dump.\
 This function should only be employed if @code{WIFSIGNALED} returned true.\n\
 The macro used to implement this function is not specified in POSIX.1-2001\n\
 and is not available on some Unix implementations (e.g., AIX, SunOS).\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
-  if (args.length () == 1)
-    {
-      int status = args(0).xint_value ("WCOREDUMP: STATUS must be an integer");
+  if (args.length () != 1)
+    print_usage ();
 
-      retval = octave_wait::coredump (status);
-    }
-  else
-    print_usage ();
+  int status = args(0).xint_value ("WCOREDUMP: STATUS must be an integer");
+
+  retval = octave_wait::coredump (status);
+
 
   return retval;
 }
 
 DEFUNX ("WIFSTOPPED", FWIFSTOPPED, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WIFSTOPPED (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
@@ -1471,114 +1439,110 @@ true if the child process was stopped by
 \n\
 This is only possible if the call was done using @code{WUNTRACED} or when\n\
 the child is being traced (see ptrace(2)).\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
-  if (args.length () == 1)
-    {
-      int status = args(0).xint_value ("WIFSTOPPED: STATUS must be an integer");
+  if (args.length () != 1)
+    print_usage ();
 
-      retval = octave_wait::ifstopped (status);
-    }
-  else
-    print_usage ();
+  int status = args(0).xint_value ("WIFSTOPPED: STATUS must be an integer");
+
+  retval = octave_wait::ifstopped (status);
+
 
   return retval;
 }
 
 DEFUNX ("WSTOPSIG", FWSTOPSIG, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WSTOPSIG (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
 the number of the signal which caused the child to stop.\n\
 \n\
 This function should only be employed if @code{WIFSTOPPED} returned true.\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WIFCONTINUED}\n\
 @end deftypefn")
 {
   octave_value retval = 0;
 
-  if (args.length () == 1)
-    {
-      int status = args(0).xint_value ("WSTOPSIG: STATUS must be an integer");
+  if (args.length () != 1)
+    print_usage ();
 
-        retval = octave_wait::stopsig (status);
-    }
-  else
-    print_usage ();
+  int status = args(0).xint_value ("WSTOPSIG: STATUS must be an integer");
+
+  retval = octave_wait::stopsig (status);
+
 
   return retval;
 }
 
 DEFUNX ("WIFCONTINUED", FWIFCONTINUED, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WIFCONTINUED (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
 true if the child process was resumed by delivery of @code{SIGCONT}.\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
-  if (args.length () == 1)
-    {
-      int status = args(0).xint_value ("WIFCONTINUED: STATUS must be an integer");
+  if (args.length () != 1)
+    print_usage ();
 
-      retval = octave_wait::ifcontinued (status);
-    }
-  else
-    print_usage ();
+  int status = args(0).xint_value ("WIFCONTINUED: STATUS must be an integer");
+
+  retval = octave_wait::ifcontinued (status);
+
 
   return retval;
 }
 
 DEFUNX ("canonicalize_file_name", Fcanonicalize_file_name, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {[@var{cname}, @var{status}, @var{msg}] =} canonicalize_file_name (@var{fname})\n\
 Return the canonical name of file @var{fname}.\n\
 \n\
 If the file does not exist the empty string (\"\") is returned.\n\
 @seealso{make_absolute_filename, is_absolute_filename, is_rooted_relative_filename}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  if (args.length () == 1)
-    {
-      std::string name = args(0).xstring_value ("canonicalize_file_name: NAME must be a string");
-      std::string msg;
+  if (args.length () != 1)
+    print_usage ();
 
-      std::string result = octave_canonicalize_file_name (name, msg);
+  std::string name = args(0).xstring_value ("canonicalize_file_name: NAME must be a string");
+  std::string msg;
 
-      retval(2) = msg;
-      retval(1) = msg.empty () ? 0 : -1;
-      retval(0) = result;
-    }
-  else
-    print_usage ();
+  std::string result = octave_canonicalize_file_name (name, msg);
+
+  retval(2) = msg;
+  retval(1) = msg.empty () ? 0 : -1;
+  retval(0) = result;
+
 
   return retval;
 }
 
 static octave_value
 const_value (const octave_value_list& args, int val)
 {
   octave_value retval;
 
   int nargin = args.length ();
 
-  if (nargin == 0)
-    retval = val;
-  else
+  if (nargin != 0)
     print_usage ();
 
+  retval = val;
+
   return retval;
 }
 
 #if ! defined (O_NONBLOCK) && defined (O_NDELAY)
 #define O_NONBLOCK O_NDELAY
 #endif
 
 DEFUNX ("F_DUPFD", FF_DUPFD, args, ,
@@ -1868,9 +1832,8 @@ DEFUNX ("WCONTINUE", FWCONTINUE, args, ,
 Return the numerical value of the option argument that may be\n\
 passed to @code{waitpid} to indicate that it should also return if a stopped\n\
 child has been resumed by delivery of a @code{SIGCONT} signal.\n\
 @seealso{waitpid, WNOHANG, WUNTRACED}\n\
 @end deftypefn")
 {
   return const_value (args, WCONTINUE);
 }
-
