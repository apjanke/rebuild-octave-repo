# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1452740597 -39600
#      Thu Jan 14 14:03:17 2016 +1100
# Node ID 0360ed7c39a805d65a11b51f94ec713e3ffd1a1e
# Parent  ae2c9f1427f0acec25463fb6b71a11fba0fc956c
Always print non-integer part of non-integer indices in invalid index message (bug #46859).

* lo-array-errwarn.cc (gripe_invalid_index): Detect when double value index will
be printed as an integer and show the fractional part in this case.

diff --git a/liboctave/util/lo-array-errwarn.cc b/liboctave/util/lo-array-errwarn.cc
--- a/liboctave/util/lo-array-errwarn.cc
+++ b/liboctave/util/lo-array-errwarn.cc
@@ -19,16 +19,18 @@ along with Octave; see the file COPYING.
 <https://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <cmath>
+
 #include <sstream>
 
 #include "lo-array-errwarn.h"
 #include "lo-error.h"
 
 // Text constants used to shorten code below.
 static const char *error_id_nonconformant_args = "Octave:nonconformant-args";
 
@@ -210,16 +212,21 @@ namespace octave
   }
 
   void
   err_invalid_index (double n, octave_idx_type nd, octave_idx_type dim,
                      const std::string& var)
   {
     std::ostringstream buf;
     buf << n + 1;
+    // if  n  not an integer, but would be printed as one, show diff
+    double nearest = std::floor (n + 1.5);
+    if (n + 1 != nearest && (buf.str ().find ('.') == std::string::npos))
+      buf << std::showpos << (n + 1 - nearest);
+
     err_invalid_index (buf.str (), nd, dim, var);
   }
 
   // Complain for read access beyond the bounds of an array.
 
   class out_of_range : public index_exception
   {
   public:
