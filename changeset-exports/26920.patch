# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1552632541 0
#      Fri Mar 15 06:49:01 2019 +0000
# Node ID e0111653adcf0422e855b5698fb160e233c836bf
# Parent  c33ac5ca0a7a624b4bdc2a3883e1889091c9b2d3
avoid an overloaded virtual warnings (bug #55741)

* ov-cell.h: Avoid overloaded virtual method warning for octave_cell
class that is derived from octave_base_value and that introduces two
additional assign methods.

diff --git a/libinterp/octave-value/ov-cell.h b/libinterp/octave-value/ov-cell.h
--- a/libinterp/octave-value/ov-cell.h
+++ b/libinterp/octave-value/ov-cell.h
@@ -85,16 +85,23 @@ public:
   octave_value subsref (const std::string& type,
                         const std::list<octave_value_list>& idx,
                         bool auto_add);
 
   octave_value subsasgn (const std::string& type,
                          const std::list<octave_value_list>& idx,
                          const octave_value& rhs);
 
+  // FIXME: should we import the functions from the base class and
+  // overload them here, or should we use a different name so we don't
+  // have to do this?  Without the using declaration or a name change,
+  // the base class functions will be hidden.  That may be OK, but it
+  // can also cause some confusion.
+  using octave_base_value::assign;
+
   void assign (const octave_value_list& idx, const Cell& rhs);
 
   void assign (const octave_value_list& idx, const octave_value& rhs);
 
   void delete_elements (const octave_value_list& idx);
 
   size_t byte_size (void) const;
 
