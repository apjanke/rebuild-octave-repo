# HG changeset patch
# User Rik <rik@octave.org>
# Date 1491593229 25200
#      Fri Apr 07 12:27:09 2017 -0700
# Node ID b044661132122ad0940029a6d5683069225acfd5
# Parent  3054a57a47edba3c35b44c08b2eda8098ff8856d
containers.Map: UniformValue requires values be scalars, not just equal size (bug #49559).
Display key, not encoded key, in error messages.

* Map.m (Map): Require scalars, not just size_equal(), for UniformValue type.
Adjust BIST tests and add new tests for key values that do not exist.
* Map.m (values): Switch to try/catch which is faster than checking isfield
first.  Pretty-print the key value that could not be found in error messages.
* Map.m (subsref): Pretty-print the key value that could not be found in error
messages.

diff --git a/scripts/+containers/Map.m b/scripts/+containers/Map.m
--- a/scripts/+containers/Map.m
+++ b/scripts/+containers/Map.m
@@ -197,33 +197,33 @@ classdef Map < handle
           endif
         endif
 
         ## Determine ValueType
         vt = unique (cellfun (@class, vals, "UniformOutput", false));
         if (numel (vt) == 1
             && (ischar (vals{1})
                 || ((isnumeric (vals{1}) || islogical (vals{1}))
-                    && size_equal (vals{:}))))
+                    && all (cellfun (@numel, vals) == 1))))
           this.ValueType = vt{1};
         else
           this.ValueType = "any";
         endif
 
         ## Process UniformValues option
         if (nargin == 4)
           UniformValues = varargin{4};
           if (! isscalar (UniformValues)
               || ! (islogical (UniformValues) || isnumeric (UniformValues)))
             error ("containers.Map: 'UniformValues' must be a logical scalar");
           endif
 
           if (UniformValues)
-            if (! strcmp (this.ValueType, "char")
-                && (! isscalar (vt) || ! all (cellfun (@numel, vals) == 1)))
+            if (numel (vt) > 1
+                || (strcmp (this.ValueType, "any") && isreal (vals{1})))
               error ("containers.Map: when 'UniformValues' is true, all values must be scalars of the same data type");
             endif
           else
             this.ValueType = "any";
           endif
         endif
 
         ## Check type of keys and values, and define numeric_keys
@@ -265,23 +265,25 @@ classdef Map < handle
 
     function valueSet = values (this, keySet)
       if (nargin == 1)
         valueSet = struct2cell (this.map).';
       else
         if (! iscell (keySet))
           error ("containers.Map: input argument 'keySet' must be a cell");
         endif
-        keySet = encode_keys (this, keySet);
+        enckeySet = encode_keys (this, keySet);
         valueSet = cell (size (keySet));
         for i = 1:numel (valueSet)
-          if (! isfield (this.map, keySet{i}))
-            error ("containers.Map: key <%s> does not exist", keySet{i});
-          endif
-          valueSet{i} = this.map.(keySet{i});
+          try
+            valueSet{i} = this.map.(enckeySet{i});
+          catch
+            error ("containers.Map: key <%s> does not exist",
+                   strtrim (disp (keySet{i})));
+          end_try_catch
         endfor
       endif
     endfunction
 
     function tf = isKey (this, keySet)
       if (! iscell (keySet))
         if (isnumeric (keySet) || islogical (keySet))
           keySet = num2cell (keySet);
@@ -376,21 +378,22 @@ classdef Map < handle
           endswitch
         case "()"
           key = s(1).subs{1};
           if ((! this.numeric_keys && ! ischar (key))
               || (this.numeric_keys && (! (isnumeric (key) || islogical (key))
                                         || ! isscalar (key))))
             error ("containers.Map: specified key type does not match the type of this container");
           endif
-          key = encode_keys (this, key);
-          if (! isfield (this.map, key))
-            error ("containers.Map: specified key <%s> does not exist", key);
+          enckey = encode_keys (this, key);
+          if (! isfield (this.map, enckey))
+            error ("containers.Map: specified key <%s> does not exist",
+                   strtrim (disp (key)));
           endif
-          sref = this.map.(key);
+          sref = this.map.(enckey);
         otherwise
           error ("containers.Map: only '()' indexing is supported");
       endswitch
       if (numel (s) > 1)
         sref = subsref (sref, s(2:end));
       endif
     endfunction
 
@@ -590,25 +593,30 @@ endclassdef
 %! assert (isempty (setdiff (cell2mat (k), [key, 5, key2])));
 %! v = values (m, {3, 4; 5, 6});
 %! assert (v, {"Three", "Four"; "Five", "Six"});
 %! remove (m, {3, 4});
 %! k = keys (m);
 %! assert (numel (k), 6);
 %! assert (m.isKey({1, 4; 10, 5}), [true,false; false,true]);
 
-## Test that objects of different sizes force ValueType to "any"
+## Test that non-scalar objects force ValueType to "any"
 %!test
 %! key = [2, 3, 4];
 %! val = {eye(2), eye(3), eye(4)};
 %! m = containers.Map (key, val);
 %! assert (m(3), eye (3));
 %! assert (m(2)(2,2), 1);
 %! assert (m.KeyType, "double");
 %! assert (m.ValueType, "any");
+%! key = [2, 3, 4];
+%! val = {2, 3, [4 5]};
+%! m = containers.Map (key, val);
+%! assert (m.KeyType, "double");
+%! assert (m.ValueType, "any");
 
 ## Test that mixed object types force ValueType to "any"
 %!test
 %! key = [2, 3, 4];
 %! val = {double(1), single(2), uint8(3)};
 %! m = containers.Map (key, val);
 %! assert (m.KeyType, "double");
 %! assert (m.ValueType, "any");
@@ -769,15 +777,18 @@ endclassdef
 %! m = containers.Map ();
 %! m.foobar;
 %!error <key type does not match the type of this container>
 %! m = containers.Map ("a", 1);
 %! m(1);
 %!error <specified key .b. does not exist>
 %! m = containers.Map ("a", 1);
 %! m("b");
+%!error <specified key .2. does not exist>
+%! m = containers.Map (1, 1);
+%! m(2);
 %!error <only '\(\)' indexing is supported>
 %! m = containers.Map ("a", 1);
 %! m{1};
 %!error <unsupported KeyType>
 %! m1 = containers.Map ("KeyType", "cell", "ValueType", "any");
 %!error <unsupported ValueType>
 %! m1 = containers.Map ("KeyType", "char", "ValueType", "cell");
