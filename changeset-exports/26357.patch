# HG changeset patch
# User Rik <rik@octave.org>
# Date 1546406773 28800
#      Tue Jan 01 21:26:13 2019 -0800
# Branch stable
# Node ID bba4b338757d092ddee886c09c2c7172193d57db
# Parent  768945ca2ff26f8e2d8e286a4ca00ad1d58efa29
data.cc: Fix static analyzer detected issues (bug #55347).

* data.cc (Fall, Fany): Call args(1).xint_value()
rather than incorrect version without prepended 'x'.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -96,17 +96,17 @@ If the optional argument @var{dim} is su
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   int dim = (nargin == 1 ? -1
-                         : args(1).int_value ("all: DIM must be an integer")-1);
+                         : args(1).xint_value ("all: DIM must be an integer")-1);
 
   if (dim < -1)
     error ("all: invalid dimension argument = %d", dim + 1);
 
   return ovl (args(0).all (dim));
 }
 
 /*
@@ -161,17 +161,17 @@ any (eye (2, 4), 2)
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   int dim = (nargin == 1 ? -1
-                         : args(1).int_value ("any: DIM must be an integer")-1);
+                         : args(1).xint_value ("any: DIM must be an integer")-1);
 
   if (dim < -1)
     error ("any: invalid dimension argument = %d", dim + 1);
 
   return ovl (args(0).any (dim));
 }
 
 /*
@@ -1130,25 +1130,25 @@ and @qcode{"double"}.
 
 #undef MAKE_INT_BRANCH
 
     case btyp_bool:
       if (arg.issparse ())
         {
           SparseMatrix cs = arg.sparse_matrix_value ().cumsum (dim);
           if (isnative)
-            retval = cs != 0.0;
+            retval = (cs != 0.0);
           else
             retval = cs;
         }
       else
         {
           NDArray cs = arg.array_value ().cumsum (dim);
           if (isnative)
-            retval = cs != 0.0;
+            retval = (cs != 0.0);
           else
             retval = cs;
         }
       break;
 
     default:
       err_wrong_type_arg ("cumsum", arg);
     }
