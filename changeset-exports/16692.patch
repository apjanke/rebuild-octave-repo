# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1369105150 14400
#      Mon May 20 22:59:10 2013 -0400
# Branch classdef
# Node ID b9833510355d080cff8f3cfc7e16e2757f0736db
# Parent  50c8831878d288f1812a48671892519c6a57292c
Add object array property indexing.

* libinterp/octave-value/ov-classdef.cc (cdef_object_array::subsref):
Support '.' indexing with single property name. Technically this also
applies to methods without any arguments.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1239,16 +1239,48 @@ cdef_object_array::subsref (const std::s
 
                       retval(0) = to_ov (array_obj);
                     }
                 }
             }
         }
       break;
 
+    case '.':
+      if (type.size () == 1 && idx.size () == 1)
+        {
+          Cell c (dims ());
+
+          octave_idx_type n = array.numel ();
+
+          // dummy variables
+          size_t dummy_skip;
+          cdef_class dummy_cls;
+
+          for (octave_idx_type i = 0; i < n; i++)
+            {
+              octave_value_list r = array(i).subsref (type, idx, 1, dummy_skip,
+                                                      dummy_cls);
+
+              if (! error_state)
+                {
+                  if (r.length () > 0)
+                    c(i) = r(0);
+                }
+              else
+                break;
+            }
+
+          if (! error_state)
+            retval(0) = octave_value (c, true);
+
+          break;
+        }
+      // fall through "default"
+
     default:
       ::error ("can't perform indexing operation on array of %s objects",
                class_name ().c_str ());
       break;
     }
 
   return retval;
 }
