# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1380808201 14400
#      Thu Oct 03 09:50:01 2013 -0400
# Node ID ce02743b6f2a50c7172aae6d6fc08e4461958664
# Parent  d7b55fc1b37d71bf39ee092ea36c7305ec18958b
Fix texinfo docstring syntax for all audio functions

* libinterp/dldfcn/audiodevinfo.cc, libinterp/dldfcn/audioinfo.cc,
libinterp/dldfcn/audioread.cc, libinterp/dldfcn/audiowrite.cc,
scripts/audio/@audioplayer/__get_properties__.m,
scripts/audio/@audioplayer/audioplayer.m,
scripts/audio/@audioplayer/display.m, scripts/audio/@audioplayer/get.m,
scripts/audio/@audioplayer/isplaying.m, scripts/audio/@audioplayer/pause.m,
scripts/audio/@audioplayer/play.m,
scripts/audio/@audioplayer/playblocking.m,
scripts/audio/@audioplayer/resume.m, scripts/audio/@audioplayer/set.m,
scripts/audio/@audioplayer/stop.m,
scripts/audio/@audiorecorder/audiorecorder.m,
scripts/audio/@audiorecorder/display.m, scripts/audio/@audiorecorder/get.m,
scripts/audio/@audiorecorder/getaudiodata.m,
scripts/audio/@audiorecorder/getplayer.m,
scripts/audio/@audiorecorder/isrecording.m,
scripts/audio/@audiorecorder/pause.m, scripts/audio/@audiorecorder/play.m,
scripts/audio/@audiorecorder/record.m,
scripts/audio/@audiorecorder/recordblocking.m,
scripts/audio/@audiorecorder/resume.m, scripts/audio/@audiorecorder/set.m,
scripts/audio/@audiorecorder/stop.m: Fix texinfo docstring formatting, wrap
long lines, and use consistent lowercase variable names.

diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -41,60 +41,58 @@ bits_to_format (int bits)
     return paInt32;
   else if (bits == -1)
     return paFloat32;
   else
     return 0;
 }
 
 DEFUN_DLD (audiodevinfo, args, ,
-"-*- texinfo -*-\n\
-@deftypefn{Loadable Function} @var{devinfo} = audiodevinfo\n\
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{devinfo} =} audiodevinfo ()\n\
 \n\
-Returns a structure with two fields called \"input\" and \"output\". \
-Each structure contains an array of structures with three fields called \
-\"Name\", \"DriverVersion\" and \"ID\". Each structure contains information \
+Returns a structure with two fields called \"input\" and \"output\".\n\
+Each structure contains an array of structures with three fields called\n\
+\"Name\", \"DriverVersion\" and \"ID\". Each structure contains information\n\
 about a PortAudio device.\n\
 \n\
 @end deftypefn\n\
 \n\
-@deftypefn{Loadable Function} @var{devs} = audiodevinfo (@var{IO})\n\
+@deftypefn {Loadable Function} {@var{devs} =} audiodevinfo (@var{io})\n\
 \n\
-Returns the number of input or output devices available. Set @var{IO} to 1 \
+Returns the number of input or output devices available. Set @var{io} to 1\n\
 for input devices and to 0 for output devices.\n\
 @end deftypefn\n\
 \n\
-@deftypefn{Loadable Function} @var{name} = audiodevinfo (@var{IO}, @var{ID})\n\
+@deftypefn {Loadable Function} {@var{name} =} audiodevinfo (@var{io}, @var{id})\n\
 \n\
-Returns the name of a device specified by numerical @var{ID}. Set @var{IO} \
+Returns the name of a device specified by numerical @var{id}. Set @var{io}\n\
 to 1 for input devices and to 0 for output devices.\n\
 @end deftypefn\n\
 \n\
-@deftypefn{Loadable Function} @var{id} = audiodevinfo (@var{IO}, @var{name})\n\
+@deftypefn {Loadable Function} {@var{id} =} audiodevinfo (@var{io}, @var{name})\n\
 \n\
-Returns the id of a device specified by name. Set @var{IO} \
+Returns the id of a device specified by name. Set @var{io}\n\
 to 1 for input devices and to 0 for output devices.\n\
 @end deftypefn\n\
 \n\
-@deftypefn{Loadable Function} @var{id} = audiodevinfo (@var{IO}, @var{rate},\
- @var{bits}, @var{chans})\n\
+@deftypefn {Loadable Function} {@var{id} =} audiodevinfo (@var{io}, @var{rate}, @var{bits}, @var{chans})\n\
 \n\
-Returns the id of the first device that supports playback or recording\
- using the specified sampling rate (@var{rate}), bits per sample (@var{bits})\
- and number of channels (@var{chans}). Set @var{IO} to 1 for input devices\
- ant to 0 for output devices.\
+Returns the id of the first device that supports playback or recording\n\
+using the specified sampling rate (@var{rate}), bits per sample (@var{bits})\n\
+and number of channels (@var{chans}). Set @var{io} to 1 for input devices\n\
+and to 0 for output devices.\n\
 @end deftypefn\n\
 \n\
-@deftypefn{Loadable Function} @var{supports} = audiodevinfo (@var{IO}, @var{ID},\
- @var{rate}, @var{bits}, @var{chans})\n\
+@deftypefn {Loadable Function} {@var{supports} =} audiodevinfo (@var{io}, @var{id}, @var{rate}, @var{bits}, @var{chans})\n\
 \n\
-Returns 1 if the device bearing @var{ID} supports specified sampling rate\
- (@var{rate}), bits per sample (@var{bits}) and number of channels (@var{chans}).\
- Returns 0 otherwise. Set @var{IO} to 1 for input devices and to 0 for output\
- devices.\n\
+Returns 1 if the device bearing @var{id} supports specified sampling rate\n\
+(@var{rate}), bits per sample (@var{bits}) and number of channels (@var{chans}).\n\
+Returns 0 otherwise. Set @var{io} to 1 for input devices and to 0 for output\n\
+devices.\n\
 @end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   PaError err;
   octave_scalar_map devinfo;
   octave_value_list input;
diff --git a/libinterp/dldfcn/audioinfo.cc b/libinterp/dldfcn/audioinfo.cc
--- a/libinterp/dldfcn/audioinfo.cc
+++ b/libinterp/dldfcn/audioinfo.cc
@@ -26,21 +26,19 @@ along with Octave; see the file COPYING.
 
 #include "oct.h"
 #include "ov-struct.h"
 #ifdef HAVE_SNDFILE
 #include <sndfile.h>
 #endif
 
 DEFUN_DLD (audioinfo, args, ,
-"-*- texinfo -*-\n\
-@deftypefn{Loadable Function} info = audioinfo (@var{filename})\n\
-\n\
-Return information about an audio file specified by @var{filename}.\
-\n\
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{info} =} audioinfo (@var{filename})\n\
+Return information about an audio file specified by @var{filename}.\n\
 @end deftypefn")
 {
   octave_scalar_map retval;
   if (args.length () != 1 || not args(0).is_string ())
     {
       print_usage ();
       return octave_value (retval);
     }
diff --git a/libinterp/dldfcn/audioread.cc b/libinterp/dldfcn/audioread.cc
--- a/libinterp/dldfcn/audioread.cc
+++ b/libinterp/dldfcn/audioread.cc
@@ -26,41 +26,43 @@ along with Octave; see the file COPYING.
 
 #include "oct.h"
 #include "ov-struct.h"
 #ifdef HAVE_SNDFILE
 #include <sndfile.h>
 #endif
 
 DEFUN_DLD (audioread, args, ,
-"-*- texinfo -*-\n\
-@deftypefn{Loadable Function} [@var{y}, @var{Fs}] = audioread (@var{filename})\n\
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {[@var{y}, @var{fs}] =} audioread (@var{filename})\n\
 \n\
-Load an audio file that is specified by @var{filename}. It will be loaded in to \
-a column matrix with as many rows as there are audio frames and as many columns \
-as there are channels in the file. Sampling rate will be stored in @var{Fs}. \
+Load an audio file that is specified by @var{filename}.  It will be loaded\n\
+in to a column matrix with as many rows as there are audio frames and as many\n\
+columns as there are channels in the file.  Sampling rate will be stored in\n\
+@var{fs}.\n\
 \n\
 @end deftypefn\n\
-@deftypefn{Loadable Function} [@var{y}, @var{Fs}] = audioread (@var{filename}, @var{samples})\n\
+@deftypefn {Loadable Function} {[@var{y}, @var{fs}] =} audioread (@var{filename}, @var{samples})\n\
 \n\
-Read a specified range of samples from a file specified by @var{filename}. \
-Argument @var{samples} is a vector with two values specifying starting frame \
-and ending frame. \
+Read a specified range of samples from a file specified by @var{filename}.\n\
+Argument @var{samples} is a vector with two values specifying starting frame\n\
+and ending frame.\n\
 \n\
 @end deftypefn\n\
-@deftypefn{Loadable Function} [@var{y}, @var{Fs}] = audioread (@var{filename}, @var{dataType})\n\
+@deftypefn {Loadable Function} {[@var{y}, @var{fs}] =} audioread (@var{filename}, @var{datatype})\n\
 \n\
-Read a file and return an array of specified type. If @var{dataType} is \"native\" then \
-an array of fixed width integer type will be returned depending on how data is stored \
-in the audio file. If @var{dataType} is \"double\" a double matrix will be returned. \
+Read a file and return an array of specified type.  If @var{datatype} is\n\
+@qcode{\"native\"} then an array of fixed width integer type will be returned\n\
+depending on how data is stored in the audio file.  If @var{datatype} is\n\
+@qcode{\"double\"} a double matrix will be returned.\n\
 \n\
 @end deftypefn\n\
-@deftypefn{Loadable Function} [@var{y}, @var{Fs}] = audioread (@var{filename}, @var{samples}, @var{dataType})\n\
+@deftypefn {Loadable Function} {[@var{y}, @var{fs}] =} audioread (@var{filename}, @var{samples}, @var{datatype})\n\
 \n\
-Read a file and return a specified range of frames in an array of specified type. \
+Read a file and return a specified range of frames in an array of specified type.\n\
 \n\
 @end deftypefn"
 )
 {
   octave_value_list retval;
 #ifdef HAVE_SNDFILE
   Matrix audio;
   octave_value ret_audio;
diff --git a/libinterp/dldfcn/audiowrite.cc b/libinterp/dldfcn/audiowrite.cc
--- a/libinterp/dldfcn/audiowrite.cc
+++ b/libinterp/dldfcn/audiowrite.cc
@@ -60,26 +60,27 @@ fill_extension_table (std::map<std::stri
   table["wve"] = SF_FORMAT_WVE;
   table["ogg"] = SF_FORMAT_OGG;
   table["mpc2k"] = SF_FORMAT_MPC2K;
   table["rf64"] = SF_FORMAT_RF64;
 }
 #endif
 
 DEFUN_DLD (audiowrite, args, ,
-"-*- texinfo -*-\n\
-@deftypefn{Loadable Function} audiowrite (@var{filename}, @var{y}, @var{Fs})\n\
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} audiowrite (@var{filename}, @var{y}, @var{fs})\n\
 \n\
-Write audio data from the matrix @var{y} to a file specified by @var{filename}, \
-file format will be determined by the file extension.\
+Write audio data from the matrix @var{y} to a file specified by @var{filename},\n\
+file format will be determined by the file extension.\n\
 \n\
 @end deftypefn\n\
-@deftypefn{Loadable Function} audiowrite (@var{filename}, @var{y}, @var{Fs}, @var{Name}, @var{Value})\n\
+@deftypefn {Loadable Function} {} audiowrite (@var{filename}, @var{y}, @var{fs}, @var{name}, @var{value})\n\
 \n\
-Lets you specify additional parameters when writing the file. Those parameters are given in the table below:\n\
+Lets you specify additional parameters when writing the file. Those parameters\n\
+are given in the table below:\n\
 \n\
 @table @samp\n\
 @item BitsPerSample\n\
 Number of bits per sample, valid values are 8, 16, 24 and 32. Default is 16.\n\
 @item BitRate\n\
 Valid argument name, but ignored. Left for compatibility with MATLAB.\n\
 @item Quality\n\
 Quality setting for the Ogg Vorbis compressor. Values can range between 0 and 100 with 100 being the highest quality setting. Default is 75.\n\
diff --git a/scripts/audio/@audioplayer/__get_properties__.m b/scripts/audio/@audioplayer/__get_properties__.m
--- a/scripts/audio/@audioplayer/__get_properties__.m
+++ b/scripts/audio/@audioplayer/__get_properties__.m
@@ -12,18 +12,19 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} @var{Properties} = __get_properties__ (@var{playerObj})
-## For a given audioplayer object this function gathers and returns the current values of all properties.
+## @deftypefn {Function File} {@var{properties} =} __get_properties__ (@var{player})
+## Return a struct containing all named properties of the player object
+## @var{player}.
 ## @end deftypefn
 
 function properties = __get_properties__ (player)
   properties.BitsPerSample = __player_get_nbits__ (struct (player).player);
   properties.CurrentSample = __player_get_sample_number__ (struct (player).player);
   properties.DeviceID = __player_get_id__ (struct (player).player);
   properties.NumberOfChannels = __player_get_channels__ (struct (player).player);
   if __player_isplaying__ (struct (player).player)
diff --git a/scripts/audio/@audioplayer/audioplayer.m b/scripts/audio/@audioplayer/audioplayer.m
--- a/scripts/audio/@audioplayer/audioplayer.m
+++ b/scripts/audio/@audioplayer/audioplayer.m
@@ -12,54 +12,67 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} player = audioplayer (@var{Y}, @var{Fs})
-## Create an audioplayer object that will play back data @var{Y} at sample rate @var{Fs}.
-## @end deftypefn
-## @deftypefn{Function File} player = audioplayer (@var{Y}, @var{Fs}, @var{nBytes})
-## Create an audioplayer object that will play back data @var{Y} at sample rate @var{Fs} and bit depth @var{nBytes}.
+## @deftypefn {Function File} {@var{player} =} audioplayer (@var{y}, @var{fs})
+## Create an audioplayer object that will play back data @var{y} at sample
+## rate @var{fs}.
 ## @end deftypefn
-## @deftypefn{Function File} player = audioplayer (@var{Y}, @var{Fs}, @var{nBytes}, @var{ID})
-## Create an audioplayer object that will play back data @var{Y} at sample rate @var{Fs}, bit depth @var{nBytes} and using a device with @var{ID} that you can get using the audiodevinfo function.
+## @deftypefn {Function File} {@var{player} =} audioplayer (@var{y}, @var{fs}, @var{nbits})
+## Create an audioplayer object that will play back data @var{y} at sample
+## rate @var{fs} and bit depth @var{nbits}.
 ## @end deftypefn
-## @deftypefn{Function File} player = audioplayer (@var{function}, @var{Fs})
-## Argument @var{function} is a function handle, inline function or a string value of a function name that will get called to process audio. Audio will be played at @var{Fs} sampling rate.
+## @deftypefn {Function File} {@var{player} =} audioplayer (@var{y}, @var{fs}, @var{nbits}, @var{id})
+## Create an audioplayer object that will play back data @var{y} at sample
+## rate @var{fs}, bit depth @var{nbits} and using a device with @var{id}
+## that you can get using the audiodevinfo function.
 ## @end deftypefn
-## @deftypefn{Function File} player = audioplayer (@var{function}, @var{Fs}, @var{nBytes})
-## Same as above but also allows you to specify the number of bytes per sample.
+## @deftypefn {Function File} {@var{player} =} audioplayer (@var{function}, @var{fs})
+## Argument @var{function} is a function handle, inline function or a string
+## value of a function name that will get called to process audio.  Audio
+## will be played at @var{fs} sampling rate.
 ## @end deftypefn
-## @deftypefn{Function File} player = audioplayer (@var{function}, @var{Fs}, @var{nBytes}, @var{ID})
-## Same as above but also allows you to specify device ID that will be used.
+## @deftypefn {Function File} {@var{player} =} audioplayer (@var{function}, @var{fs}, @var{nbits})
+## Same as above but also allows you to specify the number of bits per
+## sample.
 ## @end deftypefn
-## @deftypefn{Function File} player = audioplayer (@var{recorder})
-## Create an audioplayer object that will use data and other information such as sample rate from an audiorecorder object.
+## @deftypefn {Function File} {@var{player} =} audioplayer (@var{function}, @var{fs}, @var{nbits}, @var{id})
+## Same as above but also allows you to specify device @var{id} that will be
+## used.
 ## @end deftypefn
-## @deftypefn{Function File} player = audioplayer (@var{recorder}, @var{ID})
-## Create an audioplayer object that will use data and other information from an audiorecorder object and that will use a device with the given @var{ID}.
+## @deftypefn {Function File} {@var{player} =} audioplayer (@var{recorder})
+## Create an audioplayer object that will use data and other information
+## such as sample rate from an audiorecorder object.
+## @end deftypefn
+## @deftypefn {Function File} {@var{player} =} audioplayer (@var{recorder}, @var{id})
+## Create an audioplayer object that will use data and other information
+## from an audiorecorder object and that will use a device with the given @var{id}.
 ## @end deftypefn
 ##
-## The signal @var{Y} can be a vector or a two dimensional array.
+## The signal @var{y} can be a vector or a two dimensional array.
 ##
-## The following example will create an audioplayer object that will play back one second of white noise at 44100 sample rate using 8 bits per sample.
+## The following example will create an audioplayer object that will play
+## back one second of white noise at 44100 sample rate using 8 bits per
+## sample.
 ##
 ## @example
 ## @group
 ## @code{y = randn (2, 44100) - 0.5;}
 ## @code{player = audioplayer (y, 44100, 8);}
 ## @code{play (player);}
 ## @end group
 ## @end example
 ##
-## The following example will create and register a callback that generates a sine wave on both channels.
+## The following example will create and register a callback that generates
+## a sine wave on both channels.
 ##
 ## @example
 ## @group
 ## @code{function [ sound, status ] = callback_sine (frames)}
 ## @code{  global lphase = 0.0;}
 ## @code{  global rphase = 0.0;}
 ## @code{  incl = 440.0 / 44100.0;}
 ## @code{  incr = 443.0 / 44100.0;}
diff --git a/scripts/audio/@audioplayer/display.m b/scripts/audio/@audioplayer/display.m
--- a/scripts/audio/@audioplayer/display.m
+++ b/scripts/audio/@audioplayer/display.m
@@ -12,15 +12,15 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} display (@var{playerObj})
-## Display an audioplayer object.
+## @deftypefn {Function File} {} display (@var{player})
+## Display the properties of the audioplayer object @var{player}.
 ## @end deftypefn
 
 function display (player)
   disp (__get_properties__ (player));
 endfunction
diff --git a/scripts/audio/@audioplayer/get.m b/scripts/audio/@audioplayer/get.m
--- a/scripts/audio/@audioplayer/get.m
+++ b/scripts/audio/@audioplayer/get.m
@@ -12,24 +12,25 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} @var{Value} = get (@var{playerObj}, @var{Name})
-## Returns the @var{Value} of the property identified by @var{Name}.
+## @deftypefn {Function File} {@var{value} =} get (@var{player}, @var{name})
+## Returns the @var{value} of the property identified by @var{name}.
 ## @end deftypefn
-## @deftypefn{Function File} @var{Values} = get (@var{playerObj}, @{@var{Name1}, ... , @var{NameN}@})
-## Returns the @var{Values} of the properties identified by @var{Name1} to @var{NameN}.
+## @deftypefn {Function File} {@var{values} =} get (@var{player}, @{@var{name1}, @dots{}, @var{namen}@})
+## Returns the @var{values} of the properties identified by @var{name1} to
+## @var{namen}.
 ## @end deftypefn
-## @deftypefn{Function File} @var{Values} = get (@var{playerObj})
-## Returns a scalar structure with values of all properties of @var{playerObj}.
+## @deftypefn {Function File} {@var{values} =} get (@var{player})
+## Returns a scalar structure with values of all properties of @var{player}.
 ## The field names correspond to property names.
 ## @end deftypefn
 
 function result = get (varargin)
   player = varargin{1};
   properties = __get_properties__ (player);
   if nargin == 1
     result = properties;
diff --git a/scripts/audio/@audioplayer/isplaying.m b/scripts/audio/@audioplayer/isplaying.m
--- a/scripts/audio/@audioplayer/isplaying.m
+++ b/scripts/audio/@audioplayer/isplaying.m
@@ -12,16 +12,16 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} isplaying (@var{playerObj})
+## @deftypefn {Function File} {} isplaying (@var{player})
 ## Returns 1 if the audioplayer object is currently playing back audio.
 ## Returns 0 otherwise.
 ## @end deftypefn
 
 function result = isplaying (player)
   result = __player_isplaying__ (struct (player).player);
 endfunction
diff --git a/scripts/audio/@audioplayer/pause.m b/scripts/audio/@audioplayer/pause.m
--- a/scripts/audio/@audioplayer/pause.m
+++ b/scripts/audio/@audioplayer/pause.m
@@ -12,15 +12,15 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} pause (@var{playerObj})
+## @deftypefn {Function File} {} pause (@var{player})
 ## Pause the playback with the possibility of resuming it later at the same place.
 ## @end deftypefn
 
 function pause (player)
   __player_pause__ (struct (player).player);
 endfunction
diff --git a/scripts/audio/@audioplayer/play.m b/scripts/audio/@audioplayer/play.m
--- a/scripts/audio/@audioplayer/play.m
+++ b/scripts/audio/@audioplayer/play.m
@@ -12,24 +12,27 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} play (@var{playerObj})
+## @deftypefn {Function File} {} play (@var{player})
 ## Play back audio stored in an audioplayer object without blocking.
 ## @end deftypefn
-## @deftypefn{Function File} play  (@var{playerObj}, @var{start})
-## Play back audio stored in an audioplayer object starting at the time in seconds specified by @var{start}.
+## @deftypefn {Function File} {} play  (@var{player}, @var{start})
+## Play back audio stored in an audioplayer object starting at the time in
+## seconds specified by @var{start}.
 ## @end deftypefn
-## @deftypefn{Function File} play (@var{playerObj}, [@var{start}, @var{end}])
-## Play back audio stored in an audioplayer object starting at the time in seconds specified by @var{start} and ending at the time specified by @var{end}.
+## @deftypefn {Function File} {} play (@var{player}, [@var{start}, @var{end}])
+## Play back audio stored in an audioplayer object starting at the time in
+## seconds specified by @var{start} and ending at the time specified by
+## @var{end}.
 ## @end deftypefn
 
 function play (varargin)
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
   __player_play__ (struct (varargin{1}).player, varargin{2:end});
 endfunction
diff --git a/scripts/audio/@audioplayer/playblocking.m b/scripts/audio/@audioplayer/playblocking.m
--- a/scripts/audio/@audioplayer/playblocking.m
+++ b/scripts/audio/@audioplayer/playblocking.m
@@ -12,24 +12,27 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} playblocking (@var{playerObj})
+## @deftypefn {Function File} {} playblocking (@var{player})
 ## Play back audio stored in the audioplayer object with blocking.
 ## @end deftypefn
-## @deftypefn{Function File} playblocking (@var{playerObj}, @var{start})
-## Play back audio stored in the audioplayer object starting at the time in seconds specified by @var{start}.
+## @deftypefn {Function File} {} playblocking (@var{player}, @var{start})
+## Play back audio stored in the audioplayer object starting at the time in
+## seconds specified by @var{start}.
 ## @end deftypefn
-## @deftypefn{Function File} playblocking (@var{playerObj}, [@var{start}, @var{end}])
-## Play back audio stored in the audioplayer object starting at the time in seconds specified by @var{start} and ending at the time specified by @var{end}.
+## @deftypefn {Function File} {} playblocking (@var{player}, [@var{start}, @var{end}])
+## Play back audio stored in the audioplayer object starting at the time in
+## seconds specified by @var{start} and ending at the time specified by
+## @var{end}.
 ## @end deftypefn
 
 function playblocking (varargin)
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
   __player_playblocking__ (struct (varargin{1}).player, varargin{2:end});
 endfunction
diff --git a/scripts/audio/@audioplayer/resume.m b/scripts/audio/@audioplayer/resume.m
--- a/scripts/audio/@audioplayer/resume.m
+++ b/scripts/audio/@audioplayer/resume.m
@@ -12,15 +12,15 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} resume (@var{playerObj})
+## @deftypefn {Function File} {} resume (@var{player})
 ## Resume playback for a previously paused audioplayer object.
 ## @end deftypefn
 
 function resume (player)
   __player_resume__ (struct (player).player);
 endfunction
diff --git a/scripts/audio/@audioplayer/set.m b/scripts/audio/@audioplayer/set.m
--- a/scripts/audio/@audioplayer/set.m
+++ b/scripts/audio/@audioplayer/set.m
@@ -12,26 +12,29 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} set (@var{playerObj}, @var{Name}, @var{Value})
-## Set the value of property specified by @var{Name} to a given @var{Value}.
+## @deftypefn {Function File} {} set (@var{player}, @var{name}, @var{value})
+## Set the value of property specified by @var{name} to a given @var{value}.
+## @end deftypefn
+## @deftypefn {Function File} {} set (@var{player}, @var{names}, @var{values})
+## Given a cell array of property @var{names} and a cell array of @var{values},
+## set each property to a corresponding value.
 ## @end deftypefn
-## @deftypefn{Function File} set (@var{playerObj}, @var{CellOfNames}, @var{CellOfValues})
-## Given a cell array of property names and a cell array of values, set each property to a corresponding value.
+## @deftypefn {Function File} {} set (@var{player}, @var{properties})
+## Given a structure @var{properties} where fields are property names, set
+## the value of those properties for an audioplayer object to corresponding
+## values.
 ## @end deftypefn
-## @deftypefn{Function File} set (@var{playerObj}, @var{StructOfProperties})
-## Given a structure where fields are property names, set the value of those properties for an audioplayer object to corresponding values.
-## @end deftypefn
-## @deftypefn{Function File} @var{settableProperties} = set (@var{playerObj})
+## @deftypefn {Function File} {@var{properties} =} set (@var{player})
 ## Returns a structure of settable properties.
 ## @end deftypefn
 
 function settable = set (varargin)
   if nargin < 1 || nargin > 3
     print_usage ();
   endif
   player = struct (varargin{1}).player;
diff --git a/scripts/audio/@audioplayer/stop.m b/scripts/audio/@audioplayer/stop.m
--- a/scripts/audio/@audioplayer/stop.m
+++ b/scripts/audio/@audioplayer/stop.m
@@ -12,15 +12,16 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} stop (@var{playerObj})
-## Stop the playback and reset the relevant variables to their starting values.
+## @deftypefn {Function File} {} stop (@var{player})
+## Stop the playback and reset the relevant variables to their starting
+## values.
 ## @end deftypefn
 
 function stop (player)
   __player_stop__ (struct (player).player);
 endfunction
diff --git a/scripts/audio/@audiorecorder/audiorecorder.m b/scripts/audio/@audiorecorder/audiorecorder.m
--- a/scripts/audio/@audiorecorder/audiorecorder.m
+++ b/scripts/audio/@audiorecorder/audiorecorder.m
@@ -12,33 +12,43 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} recorder = audiorecorder
-## Create an audiorecorder object recording 8 bit mono audio at 8000 Hz sample rate.
+## @deftypefn {Function File} {@var{recorder} =} audiorecorder ()
+## Create an audiorecorder object recording 8 bit mono audio at 8000 Hz
+## sample rate.
 ## @end deftypefn
-## @deftypefn{Function File} recorder = audiorecorder (@var{Fs}, @var{nBytes}, @var{Channels})
-## Create an audiorecorder object recording at specified sample rate @var{Fs}, specified bit depth @var{nBytes} and specified number of @var{Channels}.
-## @end deftypefn
-## @deftypefn{Function File} recorder = audiorecorder (@var{Fs}, @var{nBytes}, @var{Channels}, @var{ID})
-## Create an audiorecorder object recording at specified sample rate @var{Fs}, specified bit depth @var{nBytes}, number of @var{Channels} and recording on the device specified by @var{ID}. You can get device IDs by using the audiodevinfo function.
+## @deftypefn {Function File} {@var{recorder} =} audiorecorder (@var{fs}, @var{nbits}, @var{channels})
+## Create an audiorecorder object recording at specified sample rate
+## @var{fs}, specified bit depth @var{nbits}, and specified number of
+## @var{channels}.
 ## @end deftypefn
-## @deftypefn{Function File} recorder = audiorecorder (@var{function}, @var{Fs})
-## Argument @var{function} is a function handle, inline function or a string value of a function name that will get called to process audio. Audio will be recorded at @var{Fs} sampling rate.
+## @deftypefn {Function File} {@var{recorder} =} audiorecorder (@var{fs}, @var{nbits}, @var{channels}, @var{id})
+## Create an audiorecorder object recording at specified sample rate @var{fs},
+## specified bit depth @var{nbits}, number of @var{channels}, and recording
+## on the device specified by @var{id}.  You can get device IDs by using the
+## audiodevinfo function.
 ## @end deftypefn
-## @deftypefn{Function File} recorder = audiorecorder (@var{function}, @var{Fs}, @var{nBytes})
-## Same as above but also allows you to specify the number of bytes per sample.
+## @deftypefn {Function File} {@var{recorder} =} audiorecorder (@var{function}, @var{fs})
+## Argument @var{function} is a function handle, inline function, or a string
+## value of a function name that will get called to process audio.  Audio
+## will be recorded at @var{fs} sampling rate.
 ## @end deftypefn
-## @deftypefn{Function File} recorder = audiorecorder (@var{function}, @var{Fs}, @var{nBytes}, @var{ID})
-## Same as above but also allows you to specify device ID that will be used.
+## @deftypefn {Function File} {@var{recorder} =} audiorecorder (@var{function}, @var{fs}, @var{nbits})
+## Same as above but also allows you to specify the number of bits per
+## sample.
+## @end deftypefn
+## @deftypefn {Function File} {@var{recorder} =} audiorecorder (@var{function}, @var{fs}, @var{nbits}, @var{id})
+## Same as above but also allows you to specify device @var{id} that will be
+## used.
 ## @end deftypefn
 
 function recorder = audiorecorder (varargin)
   if (nargin > 5)
     print_usage ();
   endif
   if nargin > 0 && ischar (varargin{1})
     varargin{1} = str2func (varargin{1});
diff --git a/scripts/audio/@audiorecorder/display.m b/scripts/audio/@audiorecorder/display.m
--- a/scripts/audio/@audiorecorder/display.m
+++ b/scripts/audio/@audiorecorder/display.m
@@ -12,15 +12,15 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} display (@var{recorderObj})
-## Display an audiorecorder object.
+## @deftypefn {Function File} {} display (@var{recorder})
+## Display the properties of the audiorecorder object @var{recorder}.
 ## @end deftypefn
 
 function display (recorder)
   disp (__get_properties__ (recorder));
 endfunction
diff --git a/scripts/audio/@audiorecorder/get.m b/scripts/audio/@audiorecorder/get.m
--- a/scripts/audio/@audiorecorder/get.m
+++ b/scripts/audio/@audiorecorder/get.m
@@ -12,24 +12,25 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} @var{Value} = get (@var{recorderObj}, @var{Name})
-## Returns the @var{Value} of the property identified by @var{Name}.
+## @deftypefn {Function File} {@var{value} =} get (@var{recorder}, @var{name})
+## Returns the @var{value} of the property identified by @var{name}.
 ## @end deftypefn
-## @deftypefn{Function File} @var{Values} = get (@var{recorderObj}, @{@var{Name1}, ... , @var{NameN}@})
-## Returns the @var{Values} of the properties identified by @var{Name1} to @var{NameN}.
+## @deftypefn {Function File} {@var{values} =} get (@var{recorder}, @{@var{name1}, @dots{}, @var{namen}@})
+## Returns the @var{values} of the properties identified by @var{name1} to
+## @var{namen}.
 ## @end deftypefn
-## @deftypefn{Function File} @var{Values} = get (@var{recorderObj})
-## Returns a scalar structure with values of all properties of @var{recorderObj}.
+## @deftypefn {Function File} {@var{values} =} get (@var{recorder})
+## Returns a scalar structure with values of all properties of @var{recorder}.
 ## The field names correspond to property names.
 ## @end deftypefn
 
 function result = get (varargin)
   recorder = varargin{1};
   properties = __get_properties__ (recorder);
   if nargin == 1
     result = properties;
diff --git a/scripts/audio/@audiorecorder/getaudiodata.m b/scripts/audio/@audiorecorder/getaudiodata.m
--- a/scripts/audio/@audiorecorder/getaudiodata.m
+++ b/scripts/audio/@audiorecorder/getaudiodata.m
@@ -12,22 +12,24 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} getaudiodata (@var{recorderObj})
-## Returns recorder audio data as a Matrix with values between -1.0 and 1.0 and with as many columns as there are channels in the recorder.
+## @deftypefn {Function File} {@var{data} =} getaudiodata (@var{recorder})
+## Returns recorder audio data as a matrix with values between -1.0 and 1.0
+## and with as many columns as there are channels in the recorder.
 ## @end deftypefn
-## @deftypefn{Function File} getaudiodata (@var{recorderObj}, @var{dataType})
-## Converts recorded data to specified @var{dataType}. It can be set to 'double',
-## 'single', 'int16', 'int8' or 'uint8'.
+## @deftypefn {Function File} {@var{data} =} getaudiodata (@var{recorder}, @var{datatype})
+## Converts recorded data to specified @var{datatype}.  It can be set to
+## @qcode{"double"}, @qcode{"single"}, @qcode{"int16"}, @qcode{"int8"} or
+## @qcode{"uint8"}.
 ## @end deftypefn
 
 function data = getaudiodata (varargin)
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
   recorder = varargin{1};
   if (nargin == 1)
diff --git a/scripts/audio/@audiorecorder/getplayer.m b/scripts/audio/@audiorecorder/getplayer.m
--- a/scripts/audio/@audiorecorder/getplayer.m
+++ b/scripts/audio/@audiorecorder/getplayer.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} getplayer (@var{recorderObj})
+## @deftypefn {Function File} {@var{player} =} getplayer (@var{recorder})
 ## Returns an audioplayer object with data recorded by the recorder.
 ## @end deftypefn
 
 function player = getplayer (varargin)
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
   recorder = varargin{1};
diff --git a/scripts/audio/@audiorecorder/isrecording.m b/scripts/audio/@audiorecorder/isrecording.m
--- a/scripts/audio/@audiorecorder/isrecording.m
+++ b/scripts/audio/@audiorecorder/isrecording.m
@@ -12,16 +12,16 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} isrecording (@var{recorderObj})
+## @deftypefn {Function File} {} isrecording (@var{recorder})
 ## Returns 1 if the audiorecorder object is currently recording audio.
 ## Returns 0 otherwise.
 ## @end deftypefn
 
 function result = isrecording (recorder)
   result = __recorder_isrecording__ (struct (recorder).recorder);
 endfunction
diff --git a/scripts/audio/@audiorecorder/pause.m b/scripts/audio/@audiorecorder/pause.m
--- a/scripts/audio/@audiorecorder/pause.m
+++ b/scripts/audio/@audiorecorder/pause.m
@@ -12,15 +12,15 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} pause (@var{recorderObj})
+## @deftypefn {Function File} {} pause (@var{recorder})
 ## Pause recording with the possibility of resuming it later.
 ## @end deftypefn
 
 function pause (recorder)
   __recorder_pause__ (struct (recorder).recorder);
 endfunction
diff --git a/scripts/audio/@audiorecorder/play.m b/scripts/audio/@audiorecorder/play.m
--- a/scripts/audio/@audiorecorder/play.m
+++ b/scripts/audio/@audiorecorder/play.m
@@ -12,24 +12,28 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} player = play (@var{recorderObj})
-## Play the audio recorded in @var{recorderObj} and return a corresponding audioplayer object.
+## @deftypefn {Function File} {@var{player} =} play (@var{recorder})
+## Play the audio recorded in @var{recorder} and return a corresponding
+## audioplayer object.
 ## @end deftypefn
-## @deftypefn{Function File} player = play (@var{recorderObj}, start)
-## Play the audio recorded in @var{recorderObj} starting from @var{start} seconds in to the recording. Returns a corresponding audioplayer object.
+## @deftypefn {Function File} {@var{player} =} play (@var{recorder}, @var{start})
+## Play the audio recorded in @var{recorder} starting from @var{start}
+## seconds in to the recording. Returns a corresponding audioplayer object.
 ## @end deftypefn
-## @deftypefn{Function File} player = play (@var{recorderObj}, [start, end])
-## Play the audio recorded in @var{recorderObj} starting from @var{start} seconds and ending at @var{end} seconds in the recording. Returns a corresponding audioplayer object.
+## @deftypefn {Function File} {@var{player} =} play (@var{recorder}, [@var{start}, @var{end}])
+## Play the audio recorded in @var{recorder} starting from @var{start}
+## seconds and ending at @var{end} seconds in the recording. Returns a
+## corresponding audioplayer object.
 ## @end deftypefn
 
 function player = play (varargin)
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
   recorder = varargin{1};
   data = getaudiodata (recorder);
diff --git a/scripts/audio/@audiorecorder/record.m b/scripts/audio/@audiorecorder/record.m
--- a/scripts/audio/@audiorecorder/record.m
+++ b/scripts/audio/@audiorecorder/record.m
@@ -12,21 +12,23 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} record (@var{recorderObj})
-## Record audio without blocking. The recording will continue until you use the stop method on @var{recorderObj}.
+## @deftypefn {Function File} {} record (@var{recorder})
+## Record audio without blocking. The recording will continue until you use
+## the stop method on @var{recorder}.
 ## @end deftypefn
-## @deftypefn{Function File} record (@var{playerObj}, @var{length})
-## Record audio without blocking. The recording will continue for @var{length} seconds.
+## @deftypefn {Function File} {} record (@var{recorder}, @var{length})
+## Record audio without blocking. The recording will continue for
+## @var{length} seconds.
 ## @end deftypefn
 
 function record (varargin)
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
   __recorder_record__ (struct (varargin{1}).recorder, varargin{2:end});
 endfunction
diff --git a/scripts/audio/@audiorecorder/recordblocking.m b/scripts/audio/@audiorecorder/recordblocking.m
--- a/scripts/audio/@audiorecorder/recordblocking.m
+++ b/scripts/audio/@audiorecorder/recordblocking.m
@@ -12,19 +12,19 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} recordblocking (@var{recorderObj}, @var{length})
-## Record audio with blocking (synchronous I/O). You must specify the number of seconds
-## that the recording will continue for.
+## @deftypefn {Function File} {} recordblocking (@var{recorder}, @var{length})
+## Record audio with blocking (synchronous I/O).  You must specify the number
+## of seconds that the recording will continue for.
 ## @end deftypefn
 
 function recordblocking (varargin)
   if (nargin != 2)
     print_usage ();
   endif
   __recorder_recordblocking__ (struct (varargin{1}).recorder, varargin{2});
 endfunction
diff --git a/scripts/audio/@audiorecorder/resume.m b/scripts/audio/@audiorecorder/resume.m
--- a/scripts/audio/@audiorecorder/resume.m
+++ b/scripts/audio/@audiorecorder/resume.m
@@ -12,15 +12,15 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} resume (@var{recorderObj})
-## Will resume recording if pause was used before on @var{recorderObj}.
+## @deftypefn {Function File} {} resume (@var{recorder})
+## Will resume recording if pause was used before on @var{recorder}.
 ## @end deftypefn
 
 function resume (recorder)
   __recorder_resume__ (struct (recorder).recorder);
 endfunction
diff --git a/scripts/audio/@audiorecorder/set.m b/scripts/audio/@audiorecorder/set.m
--- a/scripts/audio/@audiorecorder/set.m
+++ b/scripts/audio/@audiorecorder/set.m
@@ -12,26 +12,28 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} set (@var{recorderObj}, @var{Name}, @var{Value})
-## Set the value of property specified by @var{Name} to a given @var{Value}.
+## @deftypefn {Function File} {} set (@var{recorder}, @var{name}, @var{value})
+## Set the value of property specified by @var{name} to a given @var{value}.
 ## @end deftypefn
-## @deftypefn{Function File} set (@var{recorderObj}, @var{CellOfNames}, @var{CellOfValues})
-## Given a cell array of property names and a cell array of values, set each property to a corresponding value.
+## @deftypefn {Function File} {} set (@var{recorder}, @var{names}, @var{values})
+## Given a cell array of property @var{names} and a cell array of @var{values},
+## set each property to a corresponding value.
 ## @end deftypefn
-## @deftypefn{Function File} set (@var{recorderObj}, @var{StructOfProperties})
-## Given a structure where fields are property names, set the value of those properties for an audiorecorder object to corresponding values.
+## @deftypefn {Function File} {} set (@var{recorder}, @var{properties})
+## Given a structure where fields are property names, set the value of those
+## properties for an audiorecorder object to corresponding values.
 ## @end deftypefn
-## @deftypefn{Function File} @var{settableProperties} = set (@var{recorderObj})
+## @deftypefn {Function File} {@var{properties} =} set (@var{recorder})
 ## Returns a structure of settable properties.
 ## @end deftypefn
 
 function settable = set (varargin)
   if nargin < 1 || nargin > 3
     print_usage ();
   endif
   recorder = struct (varargin{1}).recorder;
diff --git a/scripts/audio/@audiorecorder/stop.m b/scripts/audio/@audiorecorder/stop.m
--- a/scripts/audio/@audiorecorder/stop.m
+++ b/scripts/audio/@audiorecorder/stop.m
@@ -12,15 +12,15 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn{Function File} stop (@var{recorderObj})
+## @deftypefn {Function File} {} stop (@var{recorder})
 ## Will stop recording, clean up any audio streams.
 ## @end deftypefn
 
 function stop (recorder)
   __recorder_stop__ (struct (recorder).recorder);
 endfunction
