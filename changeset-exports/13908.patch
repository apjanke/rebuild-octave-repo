# HG changeset patch
# User Konstantinos Poulios <logari81@googlemail.com>
# Date 1321980611 -3600
#      Tue Nov 22 17:50:11 2011 +0100
# Node ID 32a77debff75bf4cdf647f9a480f70bd402b4736
# Parent  155e9c62576123b224baacbaaf59538ae9134891
strip trailing spaces

diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -2379,17 +2379,17 @@ xcreatefcn (const graphics_handle& h)
   graphics_object obj = gh_manager::get_object (h);
   obj.get_properties ().execute_createfcn  ();
 }
 
 static void
 xinitialize (const graphics_handle& h)
 {
   graphics_object go = gh_manager::get_object (h);
-  
+
   if (go)
     go.initialize ();
 }
 
 // ---------------------------------------------------------------------
 
 void
 base_graphics_toolkit::update (const graphics_handle& h, int id)
@@ -7069,17 +7069,17 @@ uicontrol::properties::update_text_exten
 #ifdef HAVE_FREETYPE
 
   text_element *elt;
   ft_render text_renderer;
   Matrix box;
 
   // FIXME: parsed content should be cached for efficiency
   // FIXME: support multiline text
-  
+
   elt = text_parser_none ().parse (get_string_string ());
 #ifdef HAVE_FONTCONFIG
   text_renderer.set_font (get_fontname (),
                           get_fontweight (),
                           get_fontangle (),
                           get_fontsize ());
 #endif
   box = text_renderer.get_extent (elt, 0);
@@ -7100,17 +7100,17 @@ uicontrol::properties::update_text_exten
 void
 uicontrol::properties::update_units (void)
 {
   Matrix pos = get_position ().matrix_value ();
 
   graphics_object parent_obj = gh_manager::get_object (get_parent ());
   Matrix parent_bbox = parent_obj.get_properties ().get_boundingbox (true),
          parent_size = parent_bbox.extract_n (0, 2, 1, 2);
-  
+
   pos = convert_position (pos, cached_units, get_units (), parent_size);
   set_position (pos);
 
   cached_units = get_units ();
 }
 
 void
 uicontrol::properties::set_style (const octave_value& st)
@@ -7271,17 +7271,17 @@ uipanel::properties::set_units (const oc
 void
 uipanel::properties::update_units (const caseless_str& old_units)
 {
   Matrix pos = get_position ().matrix_value ();
 
   graphics_object parent_obj = gh_manager::get_object (get_parent ());
   Matrix parent_bbox = parent_obj.get_properties ().get_boundingbox (true),
          parent_size = parent_bbox.extract_n (0, 2, 1, 2);
-  
+
   pos = convert_position (pos, old_units, get_units (), parent_size);
   set_position (pos);
 }
 
 void
 uipanel::properties::set_fontunits (const octave_value& v)
 {
   if (! error_state)
@@ -7451,17 +7451,17 @@ gh_manager::do_pop_figure (const graphic
 class
 callback_event : public base_graphics_event
 {
 public:
   callback_event (const graphics_handle& h, const std::string& name,
                   const octave_value& data = Matrix ())
       : base_graphics_event (), handle (h), callback_name (name),
         callback (), callback_data (data) { }
-  
+
   callback_event (const graphics_handle& h, const octave_value& cb,
                   const octave_value& data = Matrix ())
       : base_graphics_event (), handle (h), callback_name (),
         callback (cb), callback_data (data) { }
 
   void execute (void)
     {
       if (callback.is_defined ())
@@ -7622,17 +7622,17 @@ void
 gh_manager::do_execute_listener (const graphics_handle& h,
                                  const octave_value& l)
 {
   if (octave_thread::is_octave_thread ())
     gh_manager::execute_callback (h, l, octave_value ());
   else
     {
       gh_manager::auto_lock guard;
-      
+
       do_post_event (graphics_event::create_callback_event (h, l));
     }
 }
 
 void
 gh_manager::do_execute_callback (const graphics_handle& h,
                                  const octave_value& cb_arg,
                                  const octave_value& data)
@@ -7768,19 +7768,19 @@ gh_manager::do_post_set (const graphics_
 }
 
 int
 gh_manager::do_process_events (bool force)
 {
   graphics_event e;
   bool old_Vdrawnow_requested = Vdrawnow_requested;
   unwind_protect frame;
- 
+
   static int process_events_executing = 0;
- 
+
   frame.protect_var (process_events_executing);
 
   if (++process_events_executing <= 1)
     {
       do
         {
           e = graphics_event ();
 
@@ -7829,17 +7829,17 @@ gh_manager::do_process_events (bool forc
 
           Vdrawnow_requested = false;
         }
     }
 
   return 0;
 }
 
-void 
+void
 gh_manager::do_enable_event_processing (bool enable)
 {
   gh_manager::auto_lock guard;
 
   if (enable)
     {
       event_processing++;
 
