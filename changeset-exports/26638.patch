# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1548603122 -3600
#      Sun Jan 27 16:32:02 2019 +0100
# Node ID 1945796ba8b5693d128baa7b7dd350e3a6c706ba
# Parent  436af5d2bfd69b8e20341ae880714f2ac99a9aec
# Parent  803006651db5af65e30f2a3ea101ee3ae0cd4f01
maint: merge stable to default.

diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -499,17 +499,17 @@ namespace octave
   }
 
   // Do smart indendation after if, for, ...
   void octave_qscintilla::smart_indent (bool do_smart_indent,
                                         int do_auto_close, int line)
   {
     QString prevline = text (line);
 
-    QRegExp bkey = QRegExp ("^[\t ]*(if|for|while|switch|case|otherwise"
+    QRegExp bkey = QRegExp ("^[\t ]*(if|for|while|switch"
                             "|do|function|properties|events|classdef"
                             "|unwind_protect|try"
                             "|parfor|methods)"
                             "[\r]?[\n\t #%]");
     // last word except for comments, assuming no ' or " in comment.
     // rx_end = QRegExp ("(\\w+)[ \t;\r\n]*([%#][^\"']*)?$");
 
     // last word except for comments,
@@ -544,33 +544,51 @@ namespace octave
           {
             // Do auto close
             auto_close (do_auto_close, line, prevline, first_word);
           }
 
         return;
       }
 
-    QRegExp mkey = QRegExp ("^[\t ]*(else|elseif|catch|unwind_protect_cleanup"
-                            "|case|otherwise)[\r]?[\t #%\n]");
+    QRegExp mkey = QRegExp ("^[\t ]*(else|elseif|catch|unwind_protect_cleanup)"
+                            "[\r]?[\t #%\n]");
     if (prevline.contains (mkey))
       {
         int prev_ind = indentation (line-1);
         int act_ind = indentation (line);
 
         if (prev_ind == act_ind)
           unindent (line);
         else if (prev_ind > act_ind)
           {
             setIndentation (line+1, prev_ind);
             setCursorPosition (line+1, prev_ind);
           }
         return;
       }
 
+    QRegExp case_key = QRegExp ("^[\t ]*(case|otherwise)[\r]?[\t #%\n]");
+    if (prevline.contains (case_key) && do_smart_indent)
+      {
+        QString last_line = text (line-1);
+        int act_ind = indentation (line);
+
+        if (last_line.contains ("switch"))
+          {
+            indent (line+1);
+            act_ind = indentation (line+1);
+          }
+        else
+          unindent (line);
+
+        setIndentation (line+1, act_ind);
+        setCursorPosition (line+1, act_ind);
+      }
+
     ekey = QRegExp ("^[\t ]*(end|endif|endfor|endwhile|until|endfunction"
                     "|end_try_catch|end_unwind_protect)[\r]?[\t #%\n(;]");
     if (prevline.contains (ekey))
       {
         if (indentation (line-1) <= indentation (line))
           {
             unindent (line+1);
             unindent (line);
@@ -605,56 +623,89 @@ namespace octave
     QRegExp end_block_regexp
       = QRegExp ("^([\t ]*)(end"
                  "|end(for|function|if|parfor|switch|while"
                  "|classdef|enumeration|events|methods|properties)"
                  "|end_(try_catch|unwind_protect)"
                  "|until)"
                  "[\r\n\t #%]");
 
+    QRegExp case_block_regexp
+      = QRegExp ("^([\t ]*)(case|otherwise)"
+                 "[\r\n\t #%]");
+
     int indent_column = -1;
     int indent_increment = indentationWidth ();
+    bool in_switch = false;
 
     for (int line = lineFrom-1; line >= 0; line--)
       {
         QString line_text = text (line);
 
         if (blank_line_regexp.indexIn (line_text) < 0)
           {
             // Found first non-blank line above beginning of region or
             // current line.  Base indentation from this line, increasing
             // indentation by indentationWidth if it looks like the
             // beginning of a code block.
 
             indent_column = indentation (line);
 
             if (begin_block_regexp.indexIn (line_text) > -1)
-              indent_column += indent_increment;
+              {
+                indent_column += indent_increment;
+                if (line_text.contains ("switch"))
+                  in_switch = true;
+              }
 
             break;
           }
       }
 
     if (indent_column < 0)
       indent_column = indentation (lineFrom);
 
+    QString prev_line;
     for (int line = lineFrom; line <= lineTo; line++)
       {
         QString line_text = text (line);
 
         if (end_block_regexp.indexIn (line_text) > -1)
-          indent_column -= indent_increment;
+          {
+            indent_column -= indent_increment;
+            if (line_text.contains ("endswitch"))
+              {
+                // need a double de-indent for endswitch
+                if (in_switch)
+                  indent_column -= indent_increment;
+                in_switch = false;
+              }
+          }
 
         if (mid_block_regexp.indexIn (line_text) > -1)
             indent_column -= indent_increment;
 
+        if (case_block_regexp.indexIn (line_text) > -1)
+          {
+            if (case_block_regexp.indexIn (prev_line) < 0 && !prev_line.contains("switch"))
+              indent_column -= indent_increment;
+            in_switch = true;
+          }
+
         setIndentation (line, indent_column);
 
         if (begin_block_regexp.indexIn (line_text) > -1)
-          indent_column += indent_increment;
+          {
+            indent_column += indent_increment;
+            if (line_text.contains ("switch"))
+              in_switch = true;
+          }
+
+        if (blank_line_regexp.indexIn (line_text) < 0)
+          prev_line = line_text;
       }
   }
 
   void octave_qscintilla::set_word_selection (const QString& word)
   {
     m_selection = word;
 
     if (word.isEmpty ())
diff --git a/libgui/src/shortcut-manager.cc b/libgui/src/shortcut-manager.cc
--- a/libgui/src/shortcut-manager.cc
+++ b/libgui/src/shortcut-manager.cc
@@ -681,22 +681,31 @@ namespace octave
           file = QFileDialog::getSaveFileName (this,
                                                tr ("Export shortcuts to file..."), QString (),
                                                tr ("Octave Shortcut Files (*.osc);;All Files (*)"),
                                                nullptr, QFileDialog::Option (opts));
 
         if (file.isEmpty ())
           return false;
 
-        QSettings *osc_settings = new QSettings (file, QSettings::IniFormat);
+        QSettings osc_settings (file, QSettings::IniFormat);
 
-        if (action == OSC_IMPORT)
-          import_shortcuts (osc_settings);   // import (special action)
-        else if (action == OSC_EXPORT)
-          do_write_shortcuts (osc_settings, false); // export, (save settings)
+        if (osc_settings.status () !=  QSettings::NoError)
+          {
+            qWarning () << tr ("Failed to open %1 as Octave shortcut file")
+                        .arg (file);
+            return false;
+          }
+        else
+          {
+            if (action == OSC_IMPORT)
+              import_shortcuts (&osc_settings);   // import (special action)
+            else if (action == OSC_EXPORT)
+              do_write_shortcuts (&osc_settings, false); // export, (save settings)
+          }
       }
     else
       {
         import_shortcuts (nullptr);
       }
 
     return true;
   }
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -13114,36 +13114,27 @@ The event queue is flushed and any callb
 With the optional argument @qcode{"expose"}, only graphic objects are
 updated and no other events or callbacks are processed.
 
 The third calling form of @code{drawnow} is for debugging and is
 undocumented.
 @seealso{refresh}
 @end deftypefn */)
 {
-  // Disallow recursion when using gnuplot ASCII charts, i.e., with
-  // --no-window-system option.
-
-  static bool do_recursion = octave::display_info::display_available ();
-  static bool drawnow_executing = false;
-
   if (args.length () > 3)
     print_usage ();
 
   octave::unwind_protect frame;
 
   frame.protect_var (Vdrawnow_requested, false);
-  frame.protect_var (drawnow_executing);
 
   // Redraw unless we are in the middle of a deletion.
 
-  if (! delete_executing && (do_recursion || ! drawnow_executing))
-    {
-      drawnow_executing = true;
-
+  if (! delete_executing)
+    {
       gh_manager::auto_lock guard;
 
       if (args.length () <= 1)
         {
           // First process events so that the redraw happens when all
           // objects are in their definite state.
           bool do_events = true;
 
diff --git a/libinterp/dldfcn/__init_gnuplot__.cc b/libinterp/dldfcn/__init_gnuplot__.cc
--- a/libinterp/dldfcn/__init_gnuplot__.cc
+++ b/libinterp/dldfcn/__init_gnuplot__.cc
@@ -100,19 +100,29 @@ public:
               }
             break;
           }
       }
   }
 
   void redraw_figure (const graphics_object& go) const
   {
-    octave_value_list args;
-    args(0) = go.get_handle ().as_octave_value ();
-    octave::feval ("__gnuplot_drawnow__", args);
+    static bool drawnow_executing = false;
+
+    // Prevent recursion
+    if (! drawnow_executing)
+      {
+        octave::unwind_protect frame;
+        frame.protect_var (drawnow_executing);
+
+        drawnow_executing = true;
+        octave_value_list args;
+        args(0) = go.get_handle ().as_octave_value ();
+        octave::feval ("__gnuplot_drawnow__", args);
+      }
   }
 
   void print_figure (const graphics_object& go, const std::string& term,
                      const std::string& file,
                      const std::string& debug_file) const
   {
     octave_value_list args;
     if (! debug_file.empty ())
