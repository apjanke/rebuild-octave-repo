# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1251451829 14400
#      Fri Aug 28 05:30:29 2009 -0400
# Node ID 0fcbfddaa87fc8c4adc9a82b84f8032adc6075a5
# Parent  8dc1531e214922d9d49b63b1d1dd8e62c549a253
allow abbreviated graphics property names to match, with optional warning

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2009-08-28  John W. Eaton  <jwe@octave.org>
+
+	* graphics.cc (validate_property_name): Return full name of
+	matched property value.  Issue warning if given property name is
+	abbreviated.
+	* genprops.awk: Use name returned by validate_property_name for
+	subsequent matching.
+	* octave.cc (maximum_braindamage):
+	Disable Octave:abbreviated-property-match warning.
+
 2009-08-27  John W. Eaton  <jwe@octave.org>
 
 	* graphics.cc (validate_property_name): New static function.
 	(base_properties::dynamic_property_names): New function.
 	* graphicffs.h.in (base_properties::dynamic_property_names):
 	Provide decl.
 	* genprops.awk: Generate all_property_names functions.  Use
 	all_property_names as needed to avoid duplication elsewhere.
diff --git a/src/genprops.awk b/src/genprops.awk
--- a/src/genprops.awk
+++ b/src/genprops.awk
@@ -425,21 +425,21 @@ function emit_source ()
 
     printf ("  init ();\n}\n\n") >> filename;
 
     ## set method
 
     if (base)
       printf ("void\nbase_properties::set (const caseless_str& pname, const std::string& cname, const octave_value& val)\n{\n") >> filename;
     else
-      printf ("void\n%s::properties::set (const caseless_str& pname, const octave_value& val)\n{\n",
+      printf ("void\n%s::properties::set (const caseless_str& pname_arg, const octave_value& val)\n{\n",
               class_name) >> filename;
 
     if (! base)
-      printf ("  const std::set<std::string>& pnames = all_property_names ();\n\n  validate_property_name (\"get\", pnames, pname);\n\n  if (error_state)\n    return;\n\n") >> filename;
+      printf ("  const std::set<std::string>& pnames = all_property_names ();\n\n  caseless_str pname = validate_property_name (\"get\", pnames, pname_arg);\n\n  if (error_state)\n    return;\n\n") >> filename;
 
     first = 1;
 
     for (i = 1; i <= idx; i++)
     {
       if (! readonly[i])
       {
         printf ("  %sif (pname.compare (\"%s\"))\n    set_%s (val);\n",
@@ -478,22 +478,22 @@ function emit_source ()
 
     printf ("\n  return m;\n}\n\n") >> filename;
 
     ## get "one" method
 
     if (base)
       printf ("octave_value\nbase_properties::get (const caseless_str& pname) const\n{\n") >> filename;
     else
-      printf ("octave_value\n%s::properties::get (const caseless_str& pname) const\n{\n",
+      printf ("octave_value\n%s::properties::get (const caseless_str& pname_arg) const\n{\n",
               class_name) >> filename;
     printf ("  octave_value retval;\n\n") >> filename;
 
     if (! base)
-      printf ("  const std::set<std::string>& pnames = all_property_names ();\n\n  validate_property_name (\"get\", pnames, pname);\n\n  if (error_state)\n    return retval;\n\n") >> filename;
+      printf ("  const std::set<std::string>& pnames = all_property_names ();\n\n  caseless_str pname = validate_property_name (\"get\", pnames, pname_arg);\n\n  if (error_state)\n    return retval;\n\n") >> filename;
 
     for (i = 1; i<= idx; i++)
     {
       printf ("  %sif (pname.compare (\"%s\"))\n",
               (i > 1 ? "else " : ""), name[i]) >> filename;
       printf ("    retval = get_%s ()%s;\n", name[i],
               (type[i] == "handle_property" || type[i] == "graphics_handle" ? ".as_octave_value ()" : "")) >> filename;
     }
@@ -504,21 +504,21 @@ function emit_source ()
       printf ("  else\n    retval = base_properties::get (pname);\n\n") >> filename;
     printf ("  return retval;\n}\n\n") >> filename;
 
     ## get_property method
 
     if (base)
       printf ("property\nbase_properties::get_property (const caseless_str& pname)\n{\n") >> filename;
     else
-      printf ("property\n%s::properties::get_property (const caseless_str& pname)\n{\n",
+      printf ("property\n%s::properties::get_property (const caseless_str& pname_arg)\n{\n",
               class_name) >> filename;
 
     if (! base)
-      printf ("  const std::set<std::string>& pnames = all_property_names ();\n\n  validate_property_name (\"get\", pnames, pname);\n\n  if (error_state)\n    return property ();\n\n") >> filename;
+      printf ("  const std::set<std::string>& pnames = all_property_names ();\n\n  caseless_str pname = validate_property_name (\"get\", pnames, pname_arg);\n\n  if (error_state)\n    return property ();\n\n") >> filename;
 
     for (i = 1; i<= idx; i++)
     {
       if (ptype[i])
       {
         printf ("  %sif (pname.compare (\"%s\"))\n",
                 (i > 1 ? "else " : ""), name[i]) >> filename;
         printf ("    return property (&%s, true);\n", name[i]) >> filename;
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -56,29 +56,41 @@ along with Octave; see the file COPYING.
 static octave_value xget (const graphics_handle& h, const caseless_str& name);
 
 static void
 gripe_set_invalid (const std::string& pname)
 {
   error ("set: invalid value for %s property", pname.c_str ());
 }
 
-static void
+// Check to see that PNAME matches just one of PNAMES uniquely.
+// Return the full name of the match, or an empty caseless_str object
+// if there is no match, or the match is ambiguous.
+
+static caseless_str
 validate_property_name (const std::string& who,
 			const std::set<std::string>& pnames,
 			const caseless_str& pname)
 {
   size_t len = pname.length ();
   std::set<std::string> matches;
 
   for (std::set<std::string>::const_iterator p = pnames.begin ();
        p != pnames.end (); p++)
     {
       if (pname.compare (*p, len))
-	matches.insert (*p);
+	{
+	  if (len == p->length ())
+	    {
+	      // Exact match.
+	      return pname;
+	    }
+
+	  matches.insert (*p);
+	}
     }
 
   size_t num_matches = matches.size ();
 
   if (num_matches == 0)
     {
       error ("%s: unknown property %s", who.c_str (), pname.c_str ());
     }
@@ -90,23 +102,30 @@ validate_property_name (const std::strin
 
       sv.list_in_columns (os);
 
       std::string match_list = os.str ();
 
       error ("%s: ambiguous property name %s; possible matches:\n\n%s",
 	     who.c_str (), pname.c_str (), match_list.c_str ());
     }
-  else if (num_matches == 1 && ! pname.compare (*(matches.begin ())))
+  else if (num_matches == 1)
     {
+      // Exact match was handled above.
+
       std::string possible_match = *(matches.begin ());
 
-      error ("%s: instead of %s, did you mean %s?",
-	     who.c_str (), pname.c_str (), possible_match.c_str ());
+      warning_with_id ("Octave:abbreviated-property-match",
+		       "%s: allowing %s to match %s", who.c_str (),
+		       pname.c_str (), possible_match.c_str ());
+
+      return possible_match;
     }
+
+  return caseless_str ();
 }
 
 static Matrix
 jet_colormap (void)
 {
   Matrix cmap (64, 3, 0.0);
 
   for (octave_idx_type i = 0; i < 64; i++)
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -580,16 +580,17 @@ maximum_braindamage (void)
   bind_internal_variable ("crash_dumps_octave_core", false);
   bind_internal_variable ("default_save_options", "-mat-binary");
   bind_internal_variable ("fixed_point_format", true);
   bind_internal_variable ("history_timestamp_format_string",
 			 "%%-- %D %I:%M %p --%%");
   bind_internal_variable ("page_screen_output", false);
   bind_internal_variable ("print_empty_dimensions", false);
 
+  disable_warning ("Octave:abbreviated-property-match");
   disable_warning ("Octave:fopen-file-in-path");
   disable_warning ("Octave:function-name-clash");
   disable_warning ("Octave:load-file-in-path");
 }
 
 // You guessed it.
 
 int
