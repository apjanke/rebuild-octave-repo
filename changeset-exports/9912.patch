# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1259948715 28800
#      Fri Dec 04 09:45:15 2009 -0800
# Node ID e9fe12c1b0c0bf01685647d67325404c8c08697f
# Parent  ac7606d51a3d9a4fcb7d28ed58cbcf846172acf6
Set default papersize to the desired imagesize
Set default paperorientation to landscape to stop warning message

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,19 @@
+2009-12-04  Rik <octave@nomad.inbox5.com>
+
+	* interpreter/geometryimages.m, interpreter/interpimages.m,
+	  interpreter/sparseimages.m, interpreter/plotimages.m: 
+	  Set default paperorientation to landscape to stop warning message
+
+2009-12-04  Ben Abbott <bpabbott@mac.com>
+
+	* interpreter/geometryimages.m, interpreter/interpimages.m,
+	  interpreter/sparseimages.m: Set default papersize to the desired imagesize
+
 2009-12-04  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/images.awk: Emit rules to copy PNG files to
 	octave.html directory once it is created.
 	* interpreter/Makefile.am (all-local): Depend on $(HTMLDIR_IMAGES).
 	(IMAGES): Include $(HTMLDIR_IMAGES) in the list.
 
 2009-12-04  John W. Eaton  <jwe@octave.org>
diff --git a/doc/interpreter/geometryimages.m b/doc/interpreter/geometryimages.m
--- a/doc/interpreter/geometryimages.m
+++ b/doc/interpreter/geometryimages.m
@@ -12,20 +12,22 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 function geometryimages (nm, typ)
-  bury_output ();
+  set_print_size ();
+  hide_output ();
   if (strcmp (typ, "png"))
     set (0, "defaulttextfontname", "*");
   endif
+
   if (isempty (findstr (octave_config_info ("DEFS"), "HAVE_QHULL"))
       && (strcmp (nm, "voronoi") || strcmp (nm, "griddata")
 	  || strcmp (nm, "convhull") || strcmp (nm, "delaunay")
 	  || strcmp (nm, "triplot")))
     sombreroimage (nm, typ);
   elseif (strcmp (typ, "txt"))
     image_as_txt (nm);
   elseif (strcmp (nm, "voronoi"))
@@ -85,119 +87,70 @@ function geometryimages (nm, typ)
     vy = sin (pi * [-1 : 0.1 : 1]);
     in = inpolygon (x, y, vx, vy);
     plot(vx, vy, x(in), y(in), "r+", x(!in), y(!in), "bo");
     axis ([-2, 2, -2, 2]);
     print (cstrcat (nm, ".", typ), cstrcat ("-d", typ)) 
   else
     error ("unrecognized plot requested");
   endif
-  bury_output ();
+  hide_output ();
 endfunction
 
 function [r, c] = tri2circ (tri, xx, yy)
   x = xx(tri);
   y = yy(tri);
   m = (y(1:end-1) - y(2:end)) ./ (x(1:end-1) - x(2:end));
   xc = (prod(m) .* (y(1) - y(end)) + m(end)*(x(1)+x(2)) - m(1)*(x(2)+x(3))) ...
         ./ (2 * (m(end) - m(1))); 
   yc = - (xc - (x(2) + x(3))./2) ./ m(end) + (y(2) + y(3)) / 2;
   c = [xc, yc];
   r = sqrt ((xc - x(1)).^2 + (yc - y(1)).^2);
 endfunction
 
-## Use this function before plotting commands and after every call to
-## print since print() resets output to stdout (unfortunately, gnpulot
-## can't pop output as it can the terminal type).
-function bury_output ()
-  f = figure (1);
-  set (f, "visible", "off");
-endfunction
-function geometryimages (nm, typ)
-  bury_output ();
-  if (strcmp (nm, "voronoi"))
-    rand("state",9);
-    x = rand(10,1);
-    y = rand(10,1);
-    tri = delaunay (x, y);
-    [vx, vy] = voronoi (x, y, tri);
-    triplot (tri, x, y, "b");
-    hold on;
-    plot (vx, vy, "r");
-    [r, c] = tri2circ (tri(end,:), x, y);
-    pc = [-1:0.01:1];
-    xc = r * sin(pi*pc) + c(1);
-    yc = r * cos(pi*pc) + c(2);
-    plot (xc, yc, "g-", "LineWidth", 3);
-    axis([0, 1, 0, 1]);
-    legend ("Delaunay Triangulation", "Voronoi Diagram");
-    print (cstrcat (nm, ".", typ), cstrcat ("-d", typ))    
-  elseif (strcmp (nm, "triplot"))
-    rand ("state", 2)
-    x = rand (20, 1);
-    y = rand (20, 1);
-    tri = delaunay (x, y);
-    triplot (tri, x, y);
-    print (cstrcat (nm, ".", typ), cstrcat ("-d", typ))    
-  elseif (strcmp (nm, "griddata"))
-    rand("state",1);
-    x=2*rand(1000,1)-1;
-    y=2*rand(size(x))-1;
-    z=sin(2*(x.^2+y.^2));
-    [xx,yy]=meshgrid(linspace(-1,1,32));
-    griddata(x,y,z,xx,yy);
-    print (cstrcat (nm, ".", typ), cstrcat ("-d", typ))    
-  else
-    error ("unrecognized plot requested");
-  endif
-  bury_output ();
-endfunction
-
-function [r, c] = tri2circ (tri, xx, yy)
-  x = xx(tri);
-  y = yy(tri);
-  m = (y(1:end-1) - y(2:end)) ./ (x(1:end-1) - x(2:end));
-  xc = (prod(m) .* (y(1) - y(end)) + m(end)*(x(1)+x(2)) - m(1)*(x(2)+x(3))) ...
-        ./ (2 * (m(end) - m(1))); 
-  yc = - (xc - (x(2) + x(3))./2) ./ m(end) + (y(2) + y(3)) / 2;
-  c = [xc, yc];
-  r = sqrt ((xc - x(1)).^2 + (yc - y(1)).^2);
+function set_print_size ()
+  image_size = [5.0, 3.5]; # in inches, 16:9 format
+  border = 0;              # For postscript use 50/72
+  set (0, "defaultfigurepapertype", "<custom>");
+  set (0, "defaultfigurepaperorientation", "landscape");
+  set (0, "defaultfigurepapersize", image_size + 2*border);
+  set (0, "defaultfigurepaperposition", [border, border, image_size]);
 endfunction
 
 ## Use this function before plotting commands and after every call to
 ## print since print() resets output to stdout (unfortunately, gnpulot
 ## can't pop output as it can the terminal type).
-function bury_output ()
+function hide_output ()
   f = figure (1);
   set (f, "visible", "off");
 endfunction
 
 function sombreroimage (nm, typ)
   if (strcmp (typ, "txt"))
     fid = fopen (sprintf ("%s.txt", nm), "wt");
     fputs (fid, "+-----------------------------+\n");
     fputs (fid, "| Image unavailable because   |\n");
     fputs (fid, "| of a missing QHULL library. |\n");
     fputs (fid, "+-----------------------------+\n");
     fclose (fid);
     return;
   else ## if (!strcmp (typ, "txt"))
 
-    bury_output ();
+    hide_output ();
 
     x = y = linspace (-8, 8, 41)';
     [xx, yy] = meshgrid (x, y);
     r = sqrt (xx .^ 2 + yy .^ 2) + eps;
     z = sin (r) ./ r;
     unwind_protect
       mesh (x, y, z);
       title ("Sorry, graphics not available because octave was\\ncompiled without the QHULL library.");
     unwind_protect_cleanup
       print (cstrcat (nm, ".", typ), cstrcat ("-d", typ));
-      bury_output ();
+      hide_output ();
     end_unwind_protect
   endif
 endfunction
 
 ## generate something for the texinfo @image command to process
 function image_as_txt(nm)
   fid = fopen (sprintf ("%s.txt", nm), "wt");
   fputs (fid, "\n");
diff --git a/doc/interpreter/interpimages.m b/doc/interpreter/interpimages.m
--- a/doc/interpreter/interpimages.m
+++ b/doc/interpreter/interpimages.m
@@ -12,20 +12,22 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 function interpimages (nm, typ)
-  bury_output ();
+  set_print_size ();
+  hide_output ();
   if (strcmp (typ, "png"))
     set (0, "defaulttextfontname", "*");
   endif
+
   if (strcmp (typ, "txt"))
     image_as_txt (nm);
   elseif (strcmp (nm, "interpft"))
     t = 0 : 0.3 : pi; dt = t(2)-t(1);
     n = length (t); k = 100;
     ti = t(1) + [0 : k-1]*dt*n/k;
     y = sin (4*t + 0.3) .* cos (3*t - 0.1);
     yp = sin (4*ti + 0.3) .* cos (3*ti - 0.1);
@@ -61,23 +63,32 @@ function interpimages (nm, typ)
     dti = 0.025;
     y = sign(t);
     ddys = diff(diff(interp1(t,y,ti,'spline'))./dti)./dti;
     ddyp = diff(diff(interp1(t,y,ti,'pchip'))./dti)./dti;
     plot (ti(2:end-1),ddys,'r*', ti(2:end-1),ddyp,'g+');
     legend('spline','pchip');
     print (cstrcat (nm, ".", typ), cstrcat ("-d", typ))
   endif
-  bury_output ();  
+  hide_output ();  
+endfunction
+
+function set_print_size ()
+  image_size = [5.0, 3.5]; # in inches, 16:9 format
+  border = 0;              # For postscript use 50/72
+  set (0, "defaultfigurepapertype", "<custom>");
+  set (0, "defaultfigurepaperorientation", "landscape");
+  set (0, "defaultfigurepapersize", image_size + 2*border);
+  set (0, "defaultfigurepaperposition", [border, border, image_size]);
 endfunction
 
 ## Use this function before plotting commands and after every call to
 ## print since print() resets output to stdout (unfortunately, gnpulot
 ## can't pop output as it can the terminal type).
-function bury_output ()
+function hide_output ()
   f = figure (1);
   set (f, "visible", "off");
 endfunction
 
 ## generate something for the texinfo @image command to process
 function image_as_txt(nm)
   fid = fopen (sprintf ("%s.txt", nm), "wt");
   fputs (fid, "\n");
diff --git a/doc/interpreter/plotimages.m b/doc/interpreter/plotimages.m
--- a/doc/interpreter/plotimages.m
+++ b/doc/interpreter/plotimages.m
@@ -18,16 +18,17 @@
 
 function plotimages (nm, typ)
   set_print_size ();
   hide_output ();
 
   if (strcmp (typ, "png"))
     set (0, "defaulttextfontname", "*");
   endif
+
   if (strcmp(typ , "txt"))
     image_as_txt(nm);
   elseif (strcmp (nm, "plot"))
     x = -10:0.1:10;
     plot (x, sin (x));
     print (cstrcat (nm, ".", typ), cstrcat ("-d", typ))    
   elseif (strcmp (nm, "hist"))
 	 rand ("state", 2);
@@ -72,20 +73,24 @@ function plotimages (nm, typ)
   endif
   hide_output ();
 endfunction
 
 function set_print_size ()
   image_size = [5.0, 3.5]; # in inches, 16:9 format
   border = 0;              # For postscript use 50/72
   set (0, "defaultfigurepapertype", "<custom>");
+  set (0, "defaultfigurepaperorientation", "landscape");
   set (0, "defaultfigurepapersize", image_size + 2*border);
   set (0, "defaultfigurepaperposition", [border, border, image_size]);
 endfunction
 
+## Use this function before plotting commands and after every call to
+## print since print() resets output to stdout (unfortunately, gnpulot
+## can't pop output as it can the terminal type).
 function hide_output ()
   f = figure (1);
   set (f, "visible", "off");
 endfunction
 
 ## generate something for the texinfo @image command to process
 function image_as_txt(nm)
   fid = fopen (sprintf ("%s.txt", nm), "wt");
diff --git a/doc/interpreter/sparseimages.m b/doc/interpreter/sparseimages.m
--- a/doc/interpreter/sparseimages.m
+++ b/doc/interpreter/sparseimages.m
@@ -12,16 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 function sparseimages (nm, typ)
+  set_print_size ();
   if (strcmp (typ, "png"))
     set (0, "defaulttextfontname", "*");
   endif
   if (! isempty (findstr (octave_config_info ("DEFS"), "HAVE_COLAMD"))
       && ! isempty (findstr (octave_config_info ("DEFS"), "HAVE_CHOLMOD"))
       && ! isempty (findstr (octave_config_info ("DEFS"), "HAVE_UMFPACK")))
     if (strcmp(typ,"txt"))
       txtimages (nm, 15, typ);
@@ -35,29 +36,38 @@ function sparseimages (nm, typ)
       endif
     endif
   else ## There is no sparse matrix implementation available because
        ## of missing libraries, plot sombreros instead
     sombreroimage (nm, typ);
   endif
 endfunction
 
-function bury_output ()
+function set_print_size ()
+  image_size = [5.0, 3.5]; # in inches, 16:9 format
+  border = 0;              # For postscript use 50/72
+  set (0, "defaultfigurepapertype", "<custom>");
+  set (0, "defaultfigurepaperorientation", "landscape");
+  set (0, "defaultfigurepapersize", image_size + 2*border);
+  set (0, "defaultfigurepaperposition", [border, border, image_size]);
+endfunction
+
+function hide_output ()
   f = figure (1);
   set (f, "visible", "off");
 endfunction
 
 function gplotimages (nm, typ)
-  bury_output ();
+  hide_output ();
   A = sparse ([2,6,1,3,2,4,3,5,4,6,1,5],
 	      [1,1,2,2,3,3,4,4,5,5,6,6], 1, 6, 6);
   xy = [0,4,8,6,4,2;5,0,5,7,5,7]';
   gplot (A, xy)
   print (cstrcat (nm, ".", typ), cstrcat ("-d", typ))
-  bury_output ();
+  hide_output ();
 endfunction
 
 function txtimages(nm,n,typ)
   a = 10*speye(n) + sparse(1:n,ceil([1:n]/2),1,n,n) + ...
       sparse(ceil([1:n]/2),1:n,1,n,n);
   if (strcmp (nm, "gplot") || strcmp (nm, "grid"))
     fid = fopen (sprintf ("%s.txt", nm), "wt");
     fputs (fid, "\n");
@@ -78,39 +88,39 @@ function txtimages(nm,n,typ)
 	printsparse(r2,cstrcat("spcholperm.",typ));
       endif
       ## printf("Text NNZ: Matrix %d, Chol %d, PermChol %d\n",nnz(a),nnz(r1),nnz(r2));
     endif
   endif
 endfunction
 
 function otherimages(nm,n,typ)
-  bury_output ();
+  hide_output ();
   a = 10*speye(n) + sparse(1:n,ceil([1:n]/2),1,n,n) + ...
       sparse(ceil([1:n]/2),1:n,1,n,n);
   if (strcmp (nm, "spmatrix"))
     spy(a);
     axis("ij")
     print(cstrcat("spmatrix.",typ),cstrcat("-d",typ))
-    bury_output ();
+    hide_output ();
   else
     if (!isempty(findstr(octave_config_info ("DEFS"),"HAVE_COLAMD")) &&
 	!isempty(findstr(octave_config_info ("DEFS"),"HAVE_CHOLMOD")))
       if (strcmp (nm, "spchol"))
 	r1 = chol(a);
 	spy(r1);
 	axis("ij")
 	print(cstrcat("spchol.",typ),cstrcat("-d",typ))
-	bury_output ();
+	hide_output ();
       elseif (strcmp (nm, "spcholperm"))
 	[r2,p2,q2]=chol(a);
 	spy(r2);
 	axis("ij")
 	print(cstrcat("spcholperm.",typ),cstrcat("-d",typ))
-	bury_output ();
+	hide_output ();
       endif
       ## printf("Image NNZ: Matrix %d, Chol %d, PermChol %d\n",nnz(a),nnz(r1),nnz(r2));
     endif
   endif
 endfunction
 
 function printsparse(a,nm)
   fid = fopen (nm,"wt");
@@ -146,17 +156,17 @@ function printsparse(a,nm)
     else
       fprintf(fid,"  ");
     endif
   endfor
   fclose(fid);
 endfunction
 
 function femimages (nm,typ)
-  bury_output ();
+  hide_output ();
   if (!isempty(findstr(octave_config_info ("DEFS"),"HAVE_COLAMD")) &&
       !isempty(findstr(octave_config_info ("DEFS"),"HAVE_CHOLMOD")) &&
       !isempty(findstr(octave_config_info ("DEFS"),"HAVE_UMFPACK")))
     ## build a rectangle
     node_y = [1;1.2;1.5;1.8;2]*ones(1,11);
     node_x = ones(5,1)*[1,1.05,1.1,1.2,1.3,1.5,1.7,1.8,1.9,1.95,2];
     nodes = [node_x(:), node_y(:)];
 
@@ -223,17 +233,17 @@ function femimages (nm,typ)
 
     velems = reshape( V(elemx), 4, E);
 
     sz = size(xelems,2);
 
     plot3 (xelems, yelems, velems);
     view (10, 10);
     print(cstrcat(nm,".",typ),cstrcat("-d",typ))
-    bury_output ();
+    hide_output ();
   endif
 endfunction
 
 ## There is no sparse matrix implementation available because of missing
 ## libraries, plot sombreros instead. Also plot a nice title that we are
 ## sorry about that.
 function sombreroimage (nm, typ)
   if (strcmp (typ, "txt"))
@@ -242,28 +252,28 @@ function sombreroimage (nm, typ)
     fputs (fid, "+---------------------------------------+\n");
     fputs (fid, "| Image unavailable because of a        |\n");
     fputs (fid, "| missing sparse matrix implementation. |\n");
     fputs (fid, "+---------------------------------------+\n");
     fclose (fid);
     return;
   else ## if (!strcmp (typ, "txt"))
 
-    bury_output ();
+    hide_output ();
 
     x = y = linspace (-8, 8, 41)';
     [xx, yy] = meshgrid (x, y);
     r = sqrt (xx .^ 2 + yy .^ 2) + eps;
     z = sin (r) ./ r;
     unwind_protect
       mesh (x, y, z);
       title ("Sorry, graphics not available because octave was\\ncompiled without the sparse matrix implementation.");
     unwind_protect_cleanup
       print (cstrcat (nm, ".", typ), cstrcat ("-d", typ));
-      bury_output ();
+      hide_output ();
     end_unwind_protect
   endif
 endfunction
 
 ## generate something for the texinfo @image command to process
 function image_as_txt(nm)
   fid = fopen (sprintf ("%s.txt", nm), "wt");
   fputs (fid, "\n");
