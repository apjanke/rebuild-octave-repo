# HG changeset patch
# User Rik <rik@octave.org>
# Date 1354122836 28800
#      Wed Nov 28 09:13:56 2012 -0800
# Branch stable
# Node ID ddc651eecf7a232c516d771838bbd66d420a502c
# Parent  7f4e7073b2e085d4ae55573d28f770e7534b0dea
Fix Info index for language statements (bug #37787)

* dynamic.txi, errors.txi, stmt.txi, vectorize.txi: Remove @code from all node
names, menus, and cross-references.

* octave.texi: Remove @code from menu for statements.

* ov-oncleanup.cc(Foncleanup): Remove @code from cross-reference in docstring.

diff --git a/doc/interpreter/dynamic.txi b/doc/interpreter/dynamic.txi
--- a/doc/interpreter/dynamic.txi
+++ b/doc/interpreter/dynamic.txi
@@ -1114,17 +1114,17 @@ END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_COD
 @end example
 
 The disadvantage of this is that if the foreign code allocates any
 memory internally, then this memory might be lost during an interrupt,
 without being deallocated.  Therefore, ideally Octave itself should
 allocate any memory that is needed by the foreign code, with either the
 @nospell{fortran_vec} method or the @w{@code{OCTAVE_LOCAL_BUFFER}} macro.
 
-The Octave unwind_protect mechanism (@ref{The @code{unwind_protect} Statement})
+The Octave unwind_protect mechanism (@ref{The unwind_protect Statement})
 can also be used in oct-files.  In conjunction with the exception
 handling of Octave, it is important to enforce that certain code is run
 to allow variables, etc. to be restored even if an exception occurs.  An
 example of the use of this mechanism is
 
 @example
 @EXAMPLEFILE(unwinddemo.cc)
 @end example
diff --git a/doc/interpreter/errors.txi b/doc/interpreter/errors.txi
--- a/doc/interpreter/errors.txi
+++ b/doc/interpreter/errors.txi
@@ -39,17 +39,17 @@ An error is something that occurs when a
 it doesn't make sense to continue.  An example is when a function is
 called with too few input arguments.  In this situation the function
 should abort with an error message informing the user of the lacking
 input arguments.
 
 Since an error can occur during the evaluation of a program, it is
 very convenient to be able to detect that an error occurred, so that
 the error can be fixed.  This is possible with the @code{try} statement
-described in @ref{The @code{try} Statement}.
+described in @ref{The try Statement}.
 
 @menu
 * Raising Errors::
 * Catching Errors::
 * Recovering From Errors::
 @end menu
 
 @node Raising Errors
@@ -131,17 +131,17 @@ f ()
 @DOCSTRING(beep)
 
 @DOCSTRING(beep_on_error)
 
 @node Catching Errors
 @subsection Catching Errors
 
 When an error occurs, it can be detected and handled using the
-@code{try} statement as described in @ref{The @code{try} Statement}.
+@code{try} statement as described in @ref{The try Statement}.
 As an example, the following piece of code counts the number of errors
 that occurs during a @code{for} loop.
 
 @example
 @group
 number_of_errors = 0;
 for n = 1:100
   try
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -400,25 +400,25 @@ Boolean Expressions
 
 Evaluation
 
 * Calling a Function by its Name::
 * Evaluation in a Different Context::
 
 Statements
 
-* The @code{if} Statement::            
-* The @code{switch} Statement::        
-* The @code{while} Statement::         
-* The @code{do-until} Statement::      
-* The @code{for} Statement::           
-* The @code{break} Statement::         
-* The @code{continue} Statement::      
-* The @code{unwind_protect} Statement::  
-* The @code{try} Statement::           
+* The if Statement::            
+* The switch Statement::        
+* The while Statement::         
+* The do-until Statement::      
+* The for Statement::           
+* The break Statement::         
+* The continue Statement::      
+* The unwind_protect Statement::  
+* The try Statement::           
 * Continuation Lines::          
 
 The @code{switch} Statement
 
 * Notes for the C Programmer::  
 
 The @code{for} Statement
 
diff --git a/doc/interpreter/stmt.txi b/doc/interpreter/stmt.txi
--- a/doc/interpreter/stmt.txi
+++ b/doc/interpreter/stmt.txi
@@ -41,30 +41,30 @@ but using the more specific keywords is 
 them, Octave is able to provide better diagnostics for mismatched or
 missing end tokens.
 
 The list of statements contained between keywords like @code{if} or
 @code{while} and the corresponding end statement is called the
 @dfn{body} of a control statement.
 
 @menu
-* The @code{if} Statement::            
-* The @code{switch} Statement::        
-* The @code{while} Statement::         
-* The @code{do-until} Statement::      
-* The @code{for} Statement::           
-* The @code{break} Statement::         
-* The @code{continue} Statement::      
-* The @code{unwind_protect} Statement::  
-* The @code{try} Statement::           
+* The if Statement::            
+* The switch Statement::        
+* The while Statement::         
+* The do-until Statement::      
+* The for Statement::           
+* The break Statement::         
+* The continue Statement::      
+* The unwind_protect Statement::  
+* The try Statement::           
 * Continuation Lines::          
 @end menu
 
-@node The @code{if} Statement
-@section The @code{if} Statement
+@node The if Statement
+@section The if Statement
 @cindex @code{if} statement
 @cindex @code{else} statement
 @cindex @code{elseif} statement
 @cindex @code{endif} statement
 
 The @code{if} statement is Octave's decision-making statement.  There
 are three basic forms of an @code{if} statement.  In its simplest form,
 it looks like this:
@@ -202,18 +202,18 @@ else
   endif
 @end group
 @end example
 
 @noindent
 using the indentation to show how Octave groups the statements.
 @xref{Functions and Scripts}.
 
-@node The @code{switch} Statement
-@section The @code{switch} Statement
+@node The switch Statement
+@section The switch Statement
 @cindex @code{switch} statement
 @cindex @code{case} statement
 @cindex @code{otherwise} statement
 @cindex @code{endswitch} statement
 
 It is very common to take different actions depending on the value of
 one variable.  This is possible using the @code{if} statement in the
 following way
@@ -380,18 +380,18 @@ switch (foo)
   case @{ 1, 2 @}
     doit ();
   @dots{}
 @end group
 @end example
 
 @end itemize
 
-@node The @code{while} Statement
-@section The @code{while} Statement
+@node The while Statement
+@section The while Statement
 @cindex @code{while} statement
 @cindex @code{endwhile} statement
 @cindex loop
 @cindex body of a loop
 
 In programming, a @dfn{loop} means a part of a program that is (or at least can
 be) executed two or more times in succession.
 
@@ -449,18 +449,18 @@ 10.  This is the case when @code{i} equa
 values in the sequence.  Then the @code{i++} increments the value of
 @code{i} and the loop repeats.  The loop terminates when @code{i}
 reaches 11.
 
 A newline is not required between the condition and the
 body; but using one makes the program clearer unless the body is very
 simple.
 
-@node The @code{do-until} Statement
-@section The @code{do-until} Statement
+@node The do-until Statement
+@section The do-until Statement
 @cindex @code{do-until} statement
 
 The @code{do-until} statement is similar to the @code{while} statement,
 except that it repeatedly executes a statement until a condition becomes
 true, and the test of the condition is at the end of the loop, so the
 body of the loop is always executed at least once.  As with the
 condition in an @code{if} statement, the condition in a @code{do-until}
 statement is considered true if its value is non-zero, and false if its
@@ -496,18 +496,18 @@ do
 until (i == 10)
 @end group
 @end example
 
 A newline is not required between the @code{do} keyword and the
 body; but using one makes the program clearer unless the body is very
 simple.
 
-@node The @code{for} Statement
-@section The @code{for} Statement
+@node The for Statement
+@section The for Statement
 @cindex @code{for} statement
 @cindex @code{endfor} statement
 
 The @code{for} statement makes it more convenient to count iterations of a
 loop.  The general form of the @code{for} statement looks like this:
 
 @example
 @group
@@ -653,18 +653,18 @@ The elements are not accessed in any par
 cycle through the list in a particular way, you will have to use the
 function @code{fieldnames} and sort the list yourself.
 
 The @var{key} variable may also be omitted.  If it is, the brackets are
 also optional.  This is useful for cycling through the values of all the
 structure elements when the names of the elements do not need to be
 known.
 
-@node The @code{break} Statement
-@section The @code{break} Statement
+@node The break Statement
+@section The break Statement
 @cindex @code{break} statement
 
 The @code{break} statement jumps out of the innermost @code{for} or
 @code{while} loop that encloses it.  The @code{break} statement may only
 be used within the body of a loop.  The following example finds the
 smallest divisor of a given integer, and also identifies prime numbers:
 
 @example
@@ -708,18 +708,18 @@ while (1)
   if (div*div > num)
     printf ("%d is prime\n", num);
     break;
   endif
 endwhile
 @end group
 @end example
 
-@node The @code{continue} Statement
-@section The @code{continue} Statement
+@node The continue Statement
+@section The continue Statement
 @cindex @code{continue} statement
 
 The @code{continue} statement, like @code{break}, is used only inside
 @code{for} or @code{while} loops.  It skips over the rest of the loop
 body, causing the next cycle around the loop to begin immediately.
 Contrast this with @code{break}, which jumps out of the loop altogether.
 Here is an example:
 
@@ -757,18 +757,18 @@ would probably write the loop like this:
 for x = vec
   if (rem (x, 2) == 0)
     printf ("%d\n", x);
   endif
 endfor
 @end group
 @end example
 
-@node The @code{unwind_protect} Statement
-@section The @code{unwind_protect} Statement
+@node The unwind_protect Statement
+@section The unwind_protect Statement
 @cindex @code{unwind_protect} statement
 @cindex @code{unwind_protect_cleanup}
 @cindex @code{end_unwind_protect}
 
 Octave supports a limited form of exception handling modelled after the
 unwind-protect form of Lisp.  
 
 The general form of an @code{unwind_protect} block looks like this:
@@ -808,18 +808,18 @@ end_unwind_protect
 
 @noindent
 Without @code{unwind_protect}, the value of @var{frobnosticate}
 would not be restored if an error occurs while evaluating the first part
 of the @code{unwind_protect} block because evaluation would stop at the
 point of the error and the statement to restore the value would not be
 executed.
 
-@node The @code{try} Statement
-@section The @code{try} Statement
+@node The try Statement
+@section The try Statement
 @cindex @code{try} statement
 @cindex @code{catch}
 @cindex @code{end_try_catch}
 
 In addition to unwind_protect, Octave supports another limited form of
 exception handling.
 
 The general form of a @code{try} block looks like this:
diff --git a/doc/interpreter/vectorize.txi b/doc/interpreter/vectorize.txi
--- a/doc/interpreter/vectorize.txi
+++ b/doc/interpreter/vectorize.txi
@@ -627,17 +627,17 @@ endwhile
 @end example
 
 @item Avoid calling @code{eval} or @code{feval} excessively.
 Parsing input or looking up the name of a function in the symbol table are
 relatively expensive operations.
 
 If you are using @code{eval} merely as an exception handling mechanism, and not
 because you need to execute some arbitrary text, use the @code{try}
-statement instead.  @xref{The @code{try} Statement}.
+statement instead.  @xref{The try Statement}.
 
 @item Use @code{ignore_function_time_stamp} when appropriate.
 If you are calling lots of functions, and none of them will need to change
 during your run, set the variable @code{ignore_function_time_stamp} to
 @code{"all"}.  This will stop Octave from checking the time stamp of a function
 file to see if it has been updated while the program is being run.
 @end itemize
 
diff --git a/src/ov-oncleanup.cc b/src/ov-oncleanup.cc
--- a/src/ov-oncleanup.cc
+++ b/src/ov-oncleanup.cc
@@ -192,17 +192,17 @@ octave_oncleanup::print_raw (std::ostrea
 DEFUN (onCleanup, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{c} =} onCleanup (@var{action})\n\
 Create a special object that executes a given function upon destruction.\n\
 If the object is copied to multiple variables (or cell or struct array\n\
 elements) or returned from a function, @var{action} will be executed after\n\
 clearing the last copy of the object.  Note that if multiple local onCleanup\n\
 variables are created, the order in which they are called is unspecified.\n\
-For similar functionality @xref{The @code{unwind_protect} Statement}.\n\
+For similar functionality @xref{The unwind_protect Statement}.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = octave_value (new octave_oncleanup (args(0)));
   else
     print_usage ();
