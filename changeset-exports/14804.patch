# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1340717230 -7200
#      Tue Jun 26 15:27:10 2012 +0200
# Branch gui
# Node ID a565c560e654a8ab3d1b52a43f5e3a6edea845e0
# Parent  625be3eb27c576df90dc22873265f18bb50c9a74
Replaced a lot of terminal interaction with events: Clearing, loading and saving workspace, running a file. Default location for saving a new file is now the current working directory. Fixed bad settings with a fresh installation of the GUI by providing a file with default settings and installing it when appropriate.


* default-settings: New file containing the default settings.
* file-editor-tab: Subclassed event observer and added code to send a run event.
* main-window: Sending workspace events instead of using the terminal.
* octave-event: Added new event types.
* octave-link: Added getter for the current working directory.
* octave-gui: Adjusted code, so the default settings can be loaded.
* resource-manager: Added code to handle the logic with a default settings file.

diff --git a/gui/default-settings b/gui/default-settings
new file mode 100644
--- /dev/null
+++ b/gui/default-settings
@@ -0,0 +1,37 @@
+[General]
+connectOnStartup=true
+showMessageOfTheDay=true
+showTopic=true
+autoIdentification=false
+nickServPassword=
+useCustomFileEditor=false
+customFileEditor=emacs
+showFilenames=true
+showFileSize=false
+showFileType=false
+showLastModified=false
+showHiddenFiles=false
+useAlternatingRowColors=true
+useProxyServer=false
+proxyType=
+proxyHostName=none
+proxyPort=8080
+proxyUserName=
+proxyPassword=
+
+[editor]
+showLineNumbers=true
+highlightCurrentLine=true
+codeCompletion=true
+fontName=Ubuntu Mono
+fontSize=12
+shortWindowTitle=true
+longWindowTitle=true
+
+[terminal]
+fontSize=10
+fontName=Andale Mono
+
+[MainWindow]
+geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x1\0\0\0\0\0\x31\0\0\0\x18\0\0\x4\xff\0\0\x3\xff\0\0\0\0\0\0\0\0\xff\xff\xff\xfe\xff\xff\xff\xfe\0\0\0\0\x2\0)
+windowState=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x1\0\0\0\x1\0\0\x4\xcf\0\0\x3\x91\xfc\x2\0\0\0\x1\xfc\0\0\0\x41\0\0\x3\x91\0\0\x1\xc7\0\xff\xff\xff\xfc\x1\0\0\0\x3\xfc\0\0\0\0\0\0\x1.\0\0\0R\0\xff\xff\xff\xfc\x2\0\0\0\x2\xfb\0\0\0\x1a\0W\0o\0r\0k\0s\0p\0\x61\0\x63\0\x65\0V\0i\0\x65\0w\x1\0\0\0\x41\0\0\x1\xe8\0\0\0k\0\xff\xff\xff\xfb\0\0\0\"\0H\0i\0s\0t\0o\0r\0y\0\x44\0o\0\x63\0k\0W\0i\0\x64\0g\0\x65\0t\x1\0\0\x2/\0\0\x1\xa3\0\0\0\x8c\0\xff\xff\xff\xfc\0\0\x1\x34\0\0\x2\x81\0\0\x2\x81\0\0\x2\x81\xfa\0\0\0\0\x2\0\0\0\x2\xfb\0\0\0$\0T\0\x65\0r\0m\0i\0n\0\x61\0l\0\x44\0o\0\x63\0k\0W\0i\0\x64\0g\0\x65\0t\x1\0\0\0\0\xff\xff\xff\xff\0\0\x1\xa9\0\xff\xff\xff\xfb\0\0\0\x14\0\x46\0i\0l\0\x65\0\x45\0\x64\0i\0t\0o\0r\x1\0\0\x1\xf0\0\0\x1\xe2\0\0\0j\0\xff\xff\xff\xfb\0\0\0\x1e\0\x46\0i\0l\0\x65\0s\0\x44\0o\0\x63\0k\0W\0i\0\x64\0g\0\x65\0t\x1\0\0\x3\xbb\0\0\x1\x14\0\0\0P\0\xff\xff\xff\0\0\0\0\0\0\x3\x91\0\0\0\x4\0\0\0\x4\0\0\0\b\0\0\0\b\xfc\0\0\0\x1\0\0\0\x2\0\0\0\x1\xff\xff\xff\xff\x1\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0)
diff --git a/gui/src/m-editor/file-editor-tab.cc b/gui/src/m-editor/file-editor-tab.cc
--- a/gui/src/m-editor/file-editor-tab.cc
+++ b/gui/src/m-editor/file-editor-tab.cc
@@ -12,21 +12,22 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
 #include "file-editor-tab.h"
 #include "file-editor.h"
+#include "octave-link.h"
 #include <QMessageBox>
 #include <QVBoxLayout>
 
 file_editor_tab::file_editor_tab(file_editor *fileEditor)
-  : QWidget ((QWidget*)fileEditor)
+  : QWidget ((QWidget*)fileEditor), octave_event_observer ()
 {
   QSettings *settings = resource_manager::instance ()->get_settings ();
   _file_editor = fileEditor;
   _file_name = "";
   _edit_area = new QsciScintilla (this);
   _edit_area->setLexer (fileEditor->lexer ());
 
   // markers
@@ -91,16 +92,36 @@ file_editor_tab::file_editor_tab(file_ed
 
 bool
 file_editor_tab::copy_available ()
 {
   return _copy_available;
 }
 
 void
+file_editor_tab::event_accepted (octave_event *e)
+{
+  if (dynamic_cast<octave_run_file_event*> (e))
+    {
+      // File was run successfully.
+    }
+  delete e;
+}
+
+void
+file_editor_tab::event_reject (octave_event *e)
+{
+  if (dynamic_cast<octave_run_file_event*> (e))
+    {
+      // Running file failed.
+    }
+  delete e;
+}
+
+void
 file_editor_tab::closeEvent (QCloseEvent *event)
 {
   if (_file_editor->get_main_window ()->is_closing ())
     {
       // close whole application: save file or not if modified
       check_file_modified ("Closing Octave", 0); // no cancel possible
       event->accept ();
     }
@@ -435,18 +456,25 @@ file_editor_tab::save_file (QString save
 
 bool
 file_editor_tab::save_file_as ()
 {
   QString saveFileName(_file_name);
   QFileDialog fileDialog(this);
   if (saveFileName == UNNAMED_FILE || saveFileName.isEmpty ())
     {
-      saveFileName = QDir::homePath ();
-      fileDialog.setDirectory (saveFileName);
+      QString directory = QString::fromStdString
+          (octave_link::instance ()->get_last_working_directory ());
+
+      if (directory.isEmpty ())
+        {
+          directory = QDir::homePath ();
+        }
+
+      fileDialog.setDirectory (directory);
     }
   else
     {
       fileDialog.selectFile (saveFileName);
     }
   fileDialog.setNameFilter (SAVE_FILE_FILTER);
   fileDialog.setDefaultSuffix ("m");
   fileDialog.setAcceptMode (QFileDialog::AcceptSave);
@@ -466,17 +494,19 @@ file_editor_tab::save_file_as ()
 
 void
 file_editor_tab::run_file ()
 {
   if (_edit_area->isModified ())
     save_file(_file_name);
 
   _file_editor->terminal ()->sendText (QString ("run \'%1\'\n").arg (_file_name));
-  _file_editor->terminal ()->setFocus ();
+  // TODO: Sending a run event crashes for long scripts. Find out why.
+  //  octave_link::instance ()
+  //      ->post_event (new octave_run_file_event (*this, _file_name.toStdString ()));
 }
 
 void
 file_editor_tab::file_has_changed (QString fileName)
 {
   Q_UNUSED (fileName);
   if (QFile::exists (_file_name))
     {
diff --git a/gui/src/m-editor/file-editor-tab.h b/gui/src/m-editor/file-editor-tab.h
--- a/gui/src/m-editor/file-editor-tab.h
+++ b/gui/src/m-editor/file-editor-tab.h
@@ -18,24 +18,29 @@
 #ifndef FILEEDITORTAB_H
 #define FILEEDITORTAB_H
 
 #include <Qsci/qsciscintilla.h>
 #include <QWidget>
 #include <QCloseEvent>
 #include <QFileSystemWatcher>
 
+#include "octave-event-observer.h"
+
 class file_editor;
-class file_editor_tab : public QWidget
+class file_editor_tab : public QWidget, public octave_event_observer
 {
   Q_OBJECT
 public:
   file_editor_tab (file_editor *fileEditor);
   bool copy_available ();
 
+  void event_accepted (octave_event *e);
+  void event_reject (octave_event *e);
+
 public slots:
   void update_window_title(bool modified);
   void handle_copy_available(bool enableCopy);
   void handle_margin_clicked (int line, int margin, Qt::KeyboardModifiers state);
   void comment_selected_text ();
   void uncomment_selected_text ();
   void remove_bookmark ();
   void toggle_bookmark ();
diff --git a/gui/src/main-window.cc b/gui/src/main-window.cc
--- a/gui/src/main-window.cc
+++ b/gui/src/main-window.cc
@@ -73,38 +73,40 @@ main_window::report_status_message (QStr
 }
 
 void
 main_window::handle_save_workspace_request ()
 {
   QString selectedFile =
       QFileDialog::getSaveFileName (this, tr ("Save Workspace"),
                                     resource_manager::instance ()->get_home_path ());
-  _terminal->sendText (QString ("save \'%1\'\n").arg (selectedFile));
-  _terminal->setFocus ();
+  octave_link::instance ()
+      ->post_event (new octave_save_workspace_event (*this,
+        selectedFile.toStdString()));
 }
 
 void
 main_window::handle_load_workspace_request ()
 {
   QString selectedFile =
       QFileDialog::getOpenFileName (this, tr ("Load Workspace"),
                                     resource_manager::instance ()->get_home_path ());
   if (!selectedFile.isEmpty ())
     {
-      _terminal->sendText (QString ("load \'%1\'\n").arg (selectedFile));
-      _terminal->setFocus ();
+      octave_link::instance ()
+          ->post_event (new octave_load_workspace_event (*this,
+            selectedFile.toStdString()));
     }
 }
 
 void
 main_window::handle_clear_workspace_request ()
 {
-  _terminal->sendText ("clear\n");
-  _terminal->setFocus ();
+  octave_link::instance ()
+      ->post_event (new octave_clear_workspace_event (*this));
 }
 
 void
 main_window::handle_command_double_clicked (QString command)
 {
   _terminal->sendText(command);
   _terminal->setFocus ();
 }
diff --git a/gui/src/octave-adapter/octave-event.h b/gui/src/octave-adapter/octave-event.h
--- a/gui/src/octave-adapter/octave-event.h
+++ b/gui/src/octave-adapter/octave-event.h
@@ -15,16 +15,18 @@
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef OCTAVEEVENT_H
 #define OCTAVEEVENT_H
 
 #include <string>
 #include "octave-event-observer.h"
+#include "octave/config.h"
+#include "symtab.h"
 #include "oct-env.h"
 #include "pt-eval.h"
 #include "toplev.h"
 #include "parse.h"
 #include "debug.h"
 
 #include <readline/readline.h>
 
@@ -124,33 +126,116 @@ class octave_exit_event : public octave_
     octave_exit_event (octave_event_observer& o)
       : octave_event (o)
     { }
 
     bool perform ()
     { clean_up_and_exit (0); return true; }
 };
 
-/** Implements a change directory events. */
+/** Implements an octave run file event. */
+class octave_run_file_event : public octave_event
+{
+  public:
+    /** Creates a new octave_run_file_event. */
+    octave_run_file_event (octave_event_observer& o,
+                           std::string file)
+      : octave_event (o)
+    { _file = file; }
+
+    bool perform ()
+    {
+      octave_value_list args;
+      args.append (octave_value (_file));
+      call_octave_function ("run", args);
+      finish_readline_event ();
+      return true;
+    }
+
+  private:
+    std::string _file;
+};
+
+/** Implements a change directory event. */
 class octave_change_directory_event : public octave_event
 {
   public:
     /** Creates a new octave_change_directory_event. */
     octave_change_directory_event (octave_event_observer& o,
                                    std::string directory)
       : octave_event (o)
     { _directory = directory; }
 
     bool perform ()
     { return octave_env::chdir (_directory); }
 
   private:
     std::string _directory;
 };
 
+/** Implements a clear workspace event. */
+class octave_clear_workspace_event : public octave_event
+{
+  public:
+    /** Creates a new octave_run_file_event. */
+    octave_clear_workspace_event (octave_event_observer& o)
+      : octave_event (o)
+    { }
+
+    bool perform ()
+    {
+      call_octave_function ("clear");
+      return true;
+    }
+};
+
+/** Implements a load workspace event. */
+class octave_load_workspace_event : public octave_event
+{
+  public:
+    /** Creates a new octave_change_directory_event. */
+    octave_load_workspace_event (octave_event_observer& o,
+                                 std::string file)
+      : octave_event (o)
+    { _file = file; }
+
+    bool perform ()
+    {
+      octave_value_list args;
+      args.append (octave_value (_file));
+      call_octave_function ("load", args);
+      return true;
+    }
+
+  private:
+    std::string _file;
+};
+
+/** Implements a save workspace event. */
+class octave_save_workspace_event : public octave_event
+{
+  public:
+    /** Creates a new octave_change_directory_event. */
+    octave_save_workspace_event (octave_event_observer& o,
+                                 std::string file)
+      : octave_event (o)
+    { _file = file; }
+
+    bool perform ()
+    {
+      octave_value_list args;
+      args.append (octave_value (_file));
+      call_octave_function ("save", args);
+      return true;
+    }
+
+  private:
+    std::string _file;
+};
+
 class octave_debug_step_into_event : public octave_event
 {
   public:
     /** Creates a new octave_debug_step_into_event. */
     octave_debug_step_into_event (octave_event_observer& o)
       : octave_event (o) { }
 
     bool perform ()
diff --git a/gui/src/octave-adapter/octave-link.cc b/gui/src/octave-adapter/octave-link.cc
--- a/gui/src/octave-adapter/octave-link.cc
+++ b/gui/src/octave-adapter/octave-link.cc
@@ -157,8 +157,14 @@ octave_link::performance_information
 octave_link::get_performance_information ()
 {
   performance_information p;
   _performance_information_mutex->lock ();
   p = _performance_information;
   _performance_information_mutex->unlock ();
   return p;
 }
+
+std::string
+octave_link::get_last_working_directory ()
+{
+  return _last_working_directory;
+}
diff --git a/gui/src/octave-adapter/octave-link.h b/gui/src/octave-adapter/octave-link.h
--- a/gui/src/octave-adapter/octave-link.h
+++ b/gui/src/octave-adapter/octave-link.h
@@ -102,16 +102,18 @@ public:
   void event_reject (octave_event *e);
 
   void about_to_exit ();
 
   void entered_readline_hook ();
   void finished_readline_hook ();
   performance_information get_performance_information ();
 
+  std::string get_last_working_directory ();
+
 private:
   /** Singleton. */
   octave_link ();
   ~octave_link ();
 
   octave_event_listener *_octave_event_listener;
 
   /** Thread running octave_main. */
diff --git a/gui/src/octave-gui.cc b/gui/src/octave-gui.cc
--- a/gui/src/octave-gui.cc
+++ b/gui/src/octave-gui.cc
@@ -26,65 +26,30 @@ int
 main (int argc, char *argv[])
 {
   QApplication application (argc, argv);
   while (true)
     {
       if (resource_manager::instance ()->is_first_run ())
         {
           welcome_wizard welcomeWizard;
-          int returnCode = welcomeWizard.exec ();
-
-          QSettings *settings = resource_manager::instance ()->get_settings ();
-          settings->setValue ("connectOnStartup", true);
-          settings->setValue ("showMessageOfTheDay", true);
-          settings->setValue ("showTopic", true);
-          settings->setValue ("autoIdentification", false);
-          settings->setValue ("nickServPassword", "");
-          settings->setValue ("useCustomFileEditor", false);
-          settings->setValue ("customFileEditor", "emacs");
-          settings->setValue ("editor/showLineNumbers", true);
-          settings->setValue ("editor/highlightCurrentLine", true);
-          settings->setValue ("editor/codeCompletion", true);
-          settings->setValue ("editor/fontName", "Monospace");
-          settings->setValue ("editor/fontSize", 10);
-          settings->setValue ("editor/shortWindowTitle", true);
-          settings->setValue ("showFilenames", true);
-          settings->setValue ("showFileSize", false);
-          settings->setValue ("showFileType", false);
-          settings->setValue ("showLastModified", false);
-          settings->setValue ("showHiddenFiles", false);
-          settings->setValue ("useAlternatingRowColors", true);
-          settings->setValue ("useProxyServer", false);
-          settings->setValue ("proxyType", "Sock5Proxy");
-          settings->setValue ("proxyHostName", "none");
-          settings->setValue ("proxyPort", 8080);
-          settings->setValue ("proxyUserName", "");
-          settings->setValue ("proxyPassword", "");
-          settings->sync ();
+          welcomeWizard.exec ();
           resource_manager::instance ()->reload_settings ();
-
-          application.quit ();
-          // We are in an infinite loop, so everything else than a return
-          // will cause the application to restart from the very beginning.
-          if (returnCode == QDialog::Rejected)
-            return 0;
         }
       else
         {
           QSettings *settings = resource_manager::instance ()->get_settings ();
           QString language = settings->value ("language").toString ();
 
           QString translatorFile = resource_manager::instance ()->find_translator_file (language);
           QTranslator translator;
           translator.load (translatorFile);
           application.installTranslator (&translator);
 
           resource_manager::instance ()->update_network_settings ();
           resource_manager::instance ()->load_icons ();
 
           main_window w;
           w.show ();
-          //w.activateWindow();
           return application.exec ();
         }
     }
 }
diff --git a/gui/src/resource-manager.cc b/gui/src/resource-manager.cc
--- a/gui/src/resource-manager.cc
+++ b/gui/src/resource-manager.cc
@@ -19,16 +19,17 @@
 #include <QFile>
 #include <QNetworkProxy>
 
 resource_manager resource_manager::_singleton;
 
 resource_manager::resource_manager ()
 {
   _settings = 0;
+  _first_run = false;
   reload_settings ();
 }
 
 resource_manager::~resource_manager ()
 {
   delete _settings;
 }
 
@@ -44,31 +45,33 @@ resource_manager::get_home_path ()
   return _home_path;
 }
 
 void
 resource_manager::reload_settings ()
 {
   QDesktopServices desktopServices;
   _home_path = desktopServices.storageLocation (QDesktopServices::HomeLocation);
-  set_settings(_home_path + "/.config/octave-gui/settings");
+  QString settings_file = _home_path + "/.config/octave-gui/settings";
+
+  if (!QFile::exists (settings_file))
+   {
+     QFile::copy ("../default-settings", settings_file);
+     _first_run = true;
+   }
+  else
+     _first_run = false;
+
+  set_settings (settings_file);
 }
 
 void
 resource_manager::set_settings (QString file)
 {
   delete _settings;
-
-  _first_run = false;
-  if (!QFile::exists (file))
-    _first_run = true;
-
-  // If the settings file does not exist, QSettings automatically creates it.
-  // Therefore we have to check if it exists before instantiating the settings object.
-  // That way we can detect if the user ran this application before.
   _settings = new QSettings (file, QSettings::IniFormat);
 }
 
 QString
 resource_manager::find_translator_file (QString language)
 {
   // TODO: Quick hack to be able to test language files.
   return QString("../languages/%1.qm").arg(language);
@@ -117,18 +120,16 @@ resource_manager::update_network_setting
 }
 
 void
 resource_manager::load_icons ()
 {
   _icons [resource_manager::octave] = QIcon ("../media/logo.png");
   _icons [resource_manager::terminal] = QIcon ("../media/terminal.png");
   _icons [resource_manager::documentation] = QIcon ("../media/help_index.png");
-  _icons [resource_manager::chat] = QIcon ("../media/chat.png");
-  _icons [resource_manager::chat_new_message] = QIcon ("../media/jabber_protocol.png");
 }
 
 const char*
 resource_manager::octave_keywords ()
 {
   return
       ".nargin. "
       "EDITOR "
diff --git a/gui/src/resource-manager.h b/gui/src/resource-manager.h
--- a/gui/src/resource-manager.h
+++ b/gui/src/resource-manager.h
@@ -25,19 +25,17 @@
 
 class resource_manager
 {
 public:
   enum icon
   {
     octave,
     terminal,
-    documentation,
-    chat,
-    chat_new_message
+    documentation
   };
 
   ~resource_manager ();
 
   static resource_manager *
   instance ()
   {
     return &_singleton;
