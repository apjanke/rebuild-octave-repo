# HG changeset patch
# User jwe
# Date 865193393 0
#      Sun Jun 01 19:29:53 1997 +0000
# Node ID 1aeb8869e4642444417d1a7dc93cd03deaa54bfd
# Parent  ea9af2ffa80d47347277c40efb58d7fa325a8d3d
[project @ 1997-06-01 19:24:02 by jwe]

diff --git a/src/defun.cc b/src/defun.cc
--- a/src/defun.cc
+++ b/src/defun.cc
@@ -36,37 +36,37 @@ Software Foundation, 59 Temple Place - S
 void
 install_builtin_mapper (void *mf_arg)
 {
   octave_mapper *mf = static_cast<octave_mapper *> (mf_arg);
 
   symbol_record *sym_rec = global_sym_tab->lookup (mf->name (), true);
 
   unsigned int t
-    = symbol_def::BUILTIN_FUNCTION | symbol_def::MAPPER_FUNCTION;
+    = symbol_record::BUILTIN_FUNCTION | symbol_record::MAPPER_FUNCTION;
 
   sym_rec->unprotect ();
   sym_rec->define (mf, t);
   sym_rec->document (mf->doc_string ());
   sym_rec->make_eternal ();
   sym_rec->protect ();
 }
 
 void
 install_builtin_function (void *f_arg, const string& name,
 			  const string& doc, bool is_text_fcn)
 {
   octave_builtin::fcn f = static_cast<octave_builtin::fcn> (f_arg);
 
   symbol_record *sym_rec = global_sym_tab->lookup (name, true);
 
-  unsigned int t = symbol_def::BUILTIN_FUNCTION;
+  unsigned int t = symbol_record::BUILTIN_FUNCTION;
 
   if (is_text_fcn)
-    t |= symbol_def::TEXT_FUNCTION;
+    t |= symbol_record::TEXT_FUNCTION;
 
   sym_rec->unprotect ();
   sym_rec->define (new octave_builtin (f, name, doc), t);
   sym_rec->document (doc);
   sym_rec->make_eternal ();
   sym_rec->protect ();
 }
 
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -485,24 +485,24 @@ simple_help (void)
       int count; \
       string_vector names = global_sym_tab->list (count, 0, 0, 1, type); \
       display_symtab_names (octave_stdout, names, count, msg); \
     } \
   while (0)
 
   // XXX FIXME XXX -- is this distinction needed?
 
-  LIST_SYMBOLS (symbol_def::TEXT_FUNCTION,
+  LIST_SYMBOLS (symbol_record::TEXT_FUNCTION,
 		"text functions (these names are also reserved)");
 
-  LIST_SYMBOLS (symbol_def::MAPPER_FUNCTION, "mapper functions");
+  LIST_SYMBOLS (symbol_record::MAPPER_FUNCTION, "mapper functions");
 
-  LIST_SYMBOLS (symbol_def::BUILTIN_FUNCTION, "general functions");
+  LIST_SYMBOLS (symbol_record::BUILTIN_FUNCTION, "general functions");
 
-  LIST_SYMBOLS (symbol_def::BUILTIN_VARIABLE, "builtin variables");
+  LIST_SYMBOLS (symbol_record::BUILTIN_VARIABLE, "builtin variables");
 
   // Also need to list variables and currently compiled functions from
   // the symbol table, if there are any.
 
   // Also need to search octave_path for script files.
 
   dir_path p (Vload_path);
 
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -2278,17 +2278,17 @@ do_save (ostream& os, symbol_record *sr,
 
 static int
 save_vars (ostream& os, const string& pattern, int save_builtins,
 	   load_save_format fmt, int save_as_floats)
 {
   int count;
 
   symbol_record **vars = curr_sym_tab->glob
-    (count, pattern, symbol_def::USER_VARIABLE, SYMTAB_ALL_SCOPES);
+    (count, pattern, symbol_record::USER_VARIABLE, SYMTAB_ALL_SCOPES);
 
   int saved = count;
 
   int i;
 
   for (i = 0; i < count; i++)
     {
       do_save (os, vars[i], fmt, save_as_floats);
@@ -2297,17 +2297,17 @@ save_vars (ostream& os, const string& pa
 	break;
     }
 
   delete [] vars;
 
   if (! error_state && save_builtins)
     {
       symbol_record **vars = global_sym_tab->glob
-	(count, pattern, symbol_def::BUILTIN_VARIABLE, SYMTAB_ALL_SCOPES);
+	(count, pattern, symbol_record::BUILTIN_VARIABLE, SYMTAB_ALL_SCOPES);
 
       saved += count;
 
       for (i = 0; i < count; i++)
 	{
 	  do_save (os, vars[i], fmt, save_as_floats);
 
 	  if (error_state)
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -20,16 +20,17 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cctype>
+#include <cfloat>
 
 #include "lo-mappers.h"
 
 #include "defun.h"
 #include "error.h"
 #include "ov-mapper.h"
 #include "variables.h"
 
diff --git a/src/pt-binop.h b/src/pt-binop.h
--- a/src/pt-binop.h
+++ b/src/pt-binop.h
@@ -62,17 +62,17 @@ public:
       delete op_rhs;
     }
 
   bool rvalue_ok (void) const
     { return true; }
 
   octave_value rvalue (void);
 
-  octave_value_list rvalue (int nargou);
+  octave_value_list rvalue (int nargout);
 
   void eval_error (void);
 
   string oper (void) const;
 
   tree_expression *lhs (void) { return op_lhs; }
   tree_expression *rhs (void) { return op_rhs; }
 
diff --git a/src/pt-id.h b/src/pt-id.h
--- a/src/pt-id.h
+++ b/src/pt-id.h
@@ -74,16 +74,22 @@ public:
   do_lookup (bool& script_file_executed, bool exec_script = true);
 
   void link_to_global (void);
 
   void mark_as_static (void);
 
   void mark_as_formal_parameter (void);
 
+  // We really need to know whether this symbol referst to a variable
+  // or a function, but we may not know that yet.
+
+  bool lvalue_ok (void) const
+    { return true; }
+
   octave_value rvalue (void);
 
   octave_value_list rvalue (int nargout);
 
   octave_lvalue lvalue (void);
 
   void eval_undefined_error (void);
 
diff --git a/src/pt-idx.h b/src/pt-idx.h
--- a/src/pt-idx.h
+++ b/src/pt-idx.h
@@ -58,16 +58,19 @@ public:
   string name (void) const;
 
   tree_expression *expression (void)
     { return expr; }
 
   tree_argument_list *arg_list (void)
     { return list; }
 
+  bool lvalue_ok (void) const
+    { return expr->lvalue_ok (); }
+
   bool rvalue_ok (void) const
     { return true; }
 
   octave_value rvalue (void);
 
   octave_value_list rvalue (int nargout);
 
   octave_lvalue lvalue (void);
diff --git a/src/pt-indir.h b/src/pt-indir.h
--- a/src/pt-indir.h
+++ b/src/pt-indir.h
@@ -53,17 +53,17 @@ public:
 
   ~tree_indirect_ref (void);
 
   bool is_indirect_ref (void) const
     { return true; }
 
   string name (void) const;
 
-  bool rvalue_ok (void) const
+  bool lvalue_ok (void) const
     { return true; }
 
   octave_value rvalue (void);
 
   octave_value_list rvalue (int nargout);
 
   octave_lvalue lvalue (void);
 
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -435,17 +435,17 @@ tree_print_code::visit_if_command_list (
 
 void
 tree_print_code::visit_index_expression (tree_index_expression& expr)
 {
   indent ();
 
   print_parens (expr, "(");
 
-  tree_expression *e= expr.expression ();
+  tree_expression *e = expr.expression ();
 
   if (e)
     e->accept (*this);
 
   tree_argument_list *list = expr.arg_list ();
 
   if (list)
     {
@@ -541,22 +541,16 @@ void
 tree_print_code::visit_no_op_command (tree_no_op_command& cmd)
 {
   indent ();
 
   os << cmd.original_command ();
 }
 
 void
-tree_print_code::visit_oct_obj (tree_oct_obj&)
-{
-  ::error ("visit_oct_obj: internal error");
-}
-
-void
 tree_print_code::visit_constant (tree_constant& val)
 {
   indent ();
 
   print_parens (val, "(");
 
   val.print_raw (os, true, print_original_text);
 
diff --git a/src/pt-pr-code.h b/src/pt-pr-code.h
--- a/src/pt-pr-code.h
+++ b/src/pt-pr-code.h
@@ -85,18 +85,16 @@ public:
   void visit_indirect_ref (tree_indirect_ref&);
 
   void visit_matrix (tree_matrix&);
 
   void visit_multi_assignment (tree_multi_assignment&);
 
   void visit_no_op_command (tree_no_op_command&);
 
-  void visit_oct_obj (tree_oct_obj&);
-
   void visit_constant (tree_constant&);
 
   void visit_parameter_list (tree_parameter_list&);
 
   void visit_plot_command (tree_plot_command&);
 
   void visit_plot_limits (plot_limits&);
 
diff --git a/src/pt-unop.h b/src/pt-unop.h
--- a/src/pt-unop.h
+++ b/src/pt-unop.h
@@ -91,17 +91,17 @@ public:
 
   ~tree_prefix_expression (void) { }
 
   bool rvalue_ok (void) const
     { return true; }
 
   octave_value rvalue (void);
 
-  octave_value_list rvalue (int nargou);
+  octave_value_list rvalue (int nargout);
 
   void eval_error (void);
 
   string oper (void) const;
 
   void accept (tree_walker& tw);
 
 private:
diff --git a/src/pt-walk.h b/src/pt-walk.h
--- a/src/pt-walk.h
+++ b/src/pt-walk.h
@@ -41,17 +41,16 @@ class tree_if_command_list;
 class tree_switch_case;
 class tree_switch_case_list;
 class tree_switch_command;
 class tree_index_expression;
 class tree_indirect_ref;
 class tree_matrix;
 class tree_multi_assignment;
 class tree_no_op_command;
-class tree_oct_obj;
 class tree_constant;
 class tree_parameter_list;
 class tree_plot_command;
 class plot_limits;
 class plot_range;
 class tree_postfix_expression;
 class tree_prefix_expression;
 class tree_return_command;
@@ -137,19 +136,16 @@ public:
 
   virtual void
   visit_multi_assignment (tree_multi_assignment&) = 0;
 
   virtual void
   visit_no_op_command (tree_no_op_command&) = 0;
 
   virtual void
-  visit_oct_obj (tree_oct_obj&) = 0;
-
-  virtual void
   visit_constant (tree_constant&) = 0;
 
   virtual void
   visit_parameter_list (tree_parameter_list&) = 0;
 
   virtual void
   visit_plot_command (tree_plot_command&) = 0;
 
