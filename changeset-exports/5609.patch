# HG changeset patch
# User jwe
# Date 1139452200 0
#      Thu Feb 09 02:30:00 2006 +0000
# Node ID bf96b0f9dbd772ef19672e4040f4305a44462d63
# Parent  320be6d5e0271ce7b9ad469f9ee241c088a22c92
[project @ 2006-02-09 02:29:59 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2006-02-08  John W. Eaton  <jwe@octave.org>
+
+	* parse.y (frob_function): Clear ID_NAME from top_level symbol
+	table if we are defining a function at the top-level and a
+	function with the same name is already in the top-level symbol
+	table.
+
 2006-01-31  John W. Eaton  <jwe@octave.org>
 
 	* ov-base-sparse.h (octave_base_sparse<T>::nzmax): New function.
 	* ov.h (octave_value::nzmax): New function.
 	* ov-base.cc (octave_base_value::nzmax): New function.
 	* ov-base.h: Provide decl.
 	* data.cc (Fnzmax): New function.
 	* DLD-FUNCTIONS/sparse.cc (Fnzmax): Delete.
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -2567,16 +2567,38 @@ frob_function (const std::string& fname,
   //   f ();
   //   g
   //
   // G will still refer to the variable G (with value 13) rather
   // than the function G, until the variable G is cleared.
 
   curr_sym_tab->clear (id_name);
 
+  if (! lexer_flags.parsing_nested_function
+      && symtab_context.top () == top_level_sym_tab)
+    {
+      symbol_record *sr = top_level_sym_tab->lookup (id_name);
+
+      // Only clear the existing name if it is already defined as a
+      // function.  If there is already a variable defined with the
+      // same name as a the current function, it will continue to
+      // shadow this name until the variable is cleared.  This means
+      // that for something like the following at the command line,
+      //
+      //   f = 13;
+      //   function f () 7, end
+      //   f
+      //
+      // F will still refer to the variable F (with value 13) rather
+      // than the function F, until the variable F is cleared.
+
+      if (sr && sr->is_function ())
+	top_level_sym_tab->clear (id_name);
+    }
+
   symbol_record *sr = fbi_sym_tab->lookup (id_name, true);
 
   if (sr)
     {
       fcn->stash_symtab_ptr (sr);
 
       if (lexer_flags.parsing_nested_function)
         {
