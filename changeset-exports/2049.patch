# HG changeset patch
# User jwe
# Date 828130190 0
#      Fri Mar 29 20:09:50 1996 +0000
# Node ID 468a96dd03fc7ffc492e353abd7a20547c2f611e
# Parent  88960d151be598b7d394720d6a46f2277db8e222
[project @ 1996-03-29 20:09:05 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -165,13 +165,30 @@ Array<T>::fortran_vec (void)
   if (rep->count > 1)
     {
       --rep->count;
       rep = new ArrayRep (*rep);
     }
   return rep->data;
 }
 
+template <class T>
+T
+Array<T>::range_error (void) const
+{
+  (*current_liboctave_error_handler) ("range error");
+  return T ();
+}
+
+template <class T>
+T&
+Array<T>::range_error (void)
+{
+  (*current_liboctave_error_handler) ("range error");
+  static T foo;
+  return foo;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -192,23 +192,19 @@ public:
   T& operator () (int n) { return checkelem (n); }
 #endif
 
   T Array<T>::elem (int n) const { return rep->elem (n); }
 
   T Array<T>::checkelem (int n) const
     {
       if (n < 0 || n >= rep->length ())
-	{
-	  (*current_liboctave_error_handler) ("range error");
-	  T foo;
-	  static T *bar = &foo;
-	  return foo;
-	}
-      return elem (n);
+	return range_error ();
+      else
+	return elem (n);
     }
 
 #if defined (NO_BOUNDS_CHECKING)
   T Array<T>::operator () (int n) const { return elem (n); }
 #else
   T Array<T>::operator () (int n) const { return checkelem (n); }
 #endif
 
@@ -232,16 +228,19 @@ public:
 	  rep = new ArrayRep (*rep);
 	}
 
       rep->qsort (compare);
 
       return *this;
     }
 
+  T range_error (void) const;
+  T& range_error (void);
+
 #ifdef HEAVYWEIGHT_INDEXING
   void set_max_indices (int mi) { max_indices = mi; }
 
   void clear_index (void);
 
   void set_index (const idx_vector& i);
 
   int index_count (void) const { return idx_count; }
diff --git a/liboctave/CmplxLU.cc b/liboctave/CmplxLU.cc
--- a/liboctave/CmplxLU.cc
+++ b/liboctave/CmplxLU.cc
@@ -33,17 +33,17 @@ Software Foundation, 59 Temple Place - S
 #include "lo-error.h"
 #include "mx-inlines.cc"
 
 // Instantiate the base LU class for the types we need.
 
 #include <base-lu.h>
 #include <base-lu.cc>
 
-template class base_lu <ComplexMatrix, Matrix>;
+template class base_lu <ComplexMatrix, Complex, Matrix, double>;
 
 // Define the constructor for this particular derivation.
 
 extern "C"
 {
   int F77_FCN (zgesv, ZGESV) (const int&, const int&, Complex*,
 			      const int&, int*, Complex*, const int&,
 			      int&);
diff --git a/liboctave/CmplxLU.h b/liboctave/CmplxLU.h
--- a/liboctave/CmplxLU.h
+++ b/liboctave/CmplxLU.h
@@ -27,30 +27,32 @@ Software Foundation, 59 Temple Place - S
 #pragma interface
 #endif
 
 #include "base-lu.h"
 #include "dMatrix.h"
 #include "CMatrix.h"
 
 class
-ComplexLU : public base_lu <ComplexMatrix, Matrix>
+ComplexLU : public base_lu <ComplexMatrix, Complex, Matrix, double>
 {
 public:
 
-  ComplexLU (void) : base_lu <ComplexMatrix, Matrix> () { }
+  ComplexLU (void)
+    : base_lu <ComplexMatrix, Complex, Matrix, double> () { }
 
   ComplexLU (const ComplexMatrix& a);
 
-  ComplexLU (const ComplexLU& a) : base_lu <ComplexMatrix, Matrix> (a) { }
+  ComplexLU (const ComplexLU& a)
+    : base_lu <ComplexMatrix, Complex, Matrix, double> (a) { }
 
   ComplexLU& operator = (const ComplexLU& a)
     {
       if (this != &a)
-	base_lu <ComplexMatrix, Matrix> :: operator = (a);
+	base_lu <ComplexMatrix, Complex, Matrix, double> :: operator = (a);
 
       return *this;
     }
 
   ~ComplexLU (void) { }
 };
 
 #endif
diff --git a/liboctave/NPSOL.h b/liboctave/NPSOL.h
--- a/liboctave/NPSOL.h
+++ b/liboctave/NPSOL.h
@@ -198,16 +198,22 @@ public:
 
 protected:
 
   void pass_options_to_npsol (void);
 
   void set_option (const string& key, int opt);
   void set_option (const string& key, double opt);
 
+  void set_option (const char *key, int opt)
+    { set_option (string (key), opt); }
+
+  void set_option (const char *key, double opt)
+    { set_option (string (key), opt); }
+
 private:
 
   double x_central_difference_interval;
   double x_crash_tolerance;
   double x_difference_interval;
   double x_function_precision;
   double x_infinite_bound;
   double x_infinite_step;
diff --git a/liboctave/base-lu.cc b/liboctave/base-lu.cc
--- a/liboctave/base-lu.cc
+++ b/liboctave/base-lu.cc
@@ -25,54 +25,54 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "base-lu.h"
 
-template <class lu_type, class p_type>
+template <class lu_type, class lu_elt_type, class p_type, class p_elt_type>
 lu_type
-base_lu <lu_type, p_type> :: L (void) const
+base_lu <lu_type, lu_elt_type, p_type, p_elt_type> :: L (void) const
 {
   int n = ipvt.length ();
 
-  lu_type l (n, n, 0.0);
+  lu_type l (n, n, lu_elt_type (0.0));
 
   for (int i = 0; i < n; i++)
     {
       l.xelem (i, i) = 1.0;
       for (int j = 0; j < i; j++)
 	l.xelem (i, j) = a_fact.xelem (i, j);
     }
 
   return l;
 }
 
-template <class lu_type, class p_type>
+template <class lu_type, class lu_elt_type, class p_type, class p_elt_type>
 lu_type
-base_lu <lu_type, p_type> :: U (void) const
+base_lu <lu_type, lu_elt_type, p_type, p_elt_type> :: U (void) const
 {
   int n = ipvt.length ();
 
-  lu_type u (n, n, 0.0);
+  lu_type u (n, n, lu_elt_type (0.0));
 
   for (int i = 0; i < n; i++)
     {
       for (int j = i; j < n; j++)
 	u.xelem (i, j) = a_fact.xelem (i, j);
     }
 
   return u;
 }
 
-template <class lu_type, class p_type>
+template <class lu_type, class lu_elt_type, class p_type, class p_elt_type>
 p_type
-base_lu <lu_type, p_type> :: P (void) const
+base_lu <lu_type, lu_elt_type, p_type, p_elt_type> :: P (void) const
 {
   int n = ipvt.length ();
 
   Array<int> pvt (n);
 
   for (int i = 0; i < n; i++)
     pvt.xelem (i) = i;
 
@@ -83,17 +83,17 @@ base_lu <lu_type, p_type> :: P (void) co
       if (k != i)
 	{
 	  int tmp = pvt.xelem (k);
 	  pvt.xelem (k) = pvt.xelem (i);
 	  pvt.xelem (i) = tmp;
 	}
     }
 
-  p_type p (n, n, 0.0);
+  p_type p (n, n, p_elt_type (0.0));
 
   for (int i = 0; i < n; i++)
     p.xelem (i, pvt.xelem (i)) = 1.0;
 
   return p;
 }
 
 /*
diff --git a/liboctave/base-lu.h b/liboctave/base-lu.h
--- a/liboctave/base-lu.h
+++ b/liboctave/base-lu.h
@@ -24,17 +24,17 @@ Software Foundation, 59 Temple Place - S
 #define octave_base_lu_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #include "MArray.h"
 
-template <class lu_type, class p_type>
+template <class lu_type, class lu_elt_type, class p_type, class p_elt_type>
 class base_lu
 {
 public:
 
   base_lu (void) { }
 
   base_lu (const base_lu& a) : a_fact (a.a_fact), ipvt (a.ipvt) { }
 
diff --git a/liboctave/dbleLU.cc b/liboctave/dbleLU.cc
--- a/liboctave/dbleLU.cc
+++ b/liboctave/dbleLU.cc
@@ -33,17 +33,17 @@ Software Foundation, 59 Temple Place - S
 #include "lo-error.h"
 #include "mx-inlines.cc"
 
 // Instantiate the base LU class for the types we need.
 
 #include <base-lu.h>
 #include <base-lu.cc>
 
-template class base_lu <Matrix, Matrix>;
+template class base_lu <Matrix, double, Matrix, double>;
 
 // Define the constructor for this particular derivation.
 
 extern "C"
 {
   int F77_FCN (dgesv, DGESV) (const int&, const int&, double*,
 			      const int&, int*, double&, const int&,
 			      int&);
diff --git a/liboctave/dbleLU.h b/liboctave/dbleLU.h
--- a/liboctave/dbleLU.h
+++ b/liboctave/dbleLU.h
@@ -26,30 +26,30 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #include "base-lu.h"
 #include "dMatrix.h"
 
 class
-LU : public base_lu <Matrix, Matrix>
+LU : public base_lu <Matrix, double, Matrix, double>
 {
 public:
 
-  LU (void) : base_lu <Matrix, Matrix> () { }
+  LU (void) : base_lu <Matrix, double, Matrix, double> () { }
 
   LU (const Matrix& a);
 
-  LU (const LU& a) : base_lu <Matrix, Matrix> (a) { }
+  LU (const LU& a) : base_lu <Matrix, double, Matrix, double> (a) { }
 
   LU& operator = (const LU& a)
     {
       if (this != &a)
-	base_lu <Matrix, Matrix> :: operator = (a);
+	base_lu <Matrix, double, Matrix, double> :: operator = (a);
 
       return *this;
     }
 
   ~LU (void) { }
 };
 
 #endif
