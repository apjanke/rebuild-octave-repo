# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1224514951 -3600
#      Mon Oct 20 16:02:31 2008 +0100
# Node ID ec4d9d657b175614cab50e227dc308f11130a57b
# Parent  a9d3b88ea6fb8e551fe2203ccf6a7e400390081e
Treat line style argument in stairs

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2008-10-20  David Bateman  <dbateman@free.fr>
+
+	* plot/fill.m, plot/quiver.m: Quiet the demos.
+	* plot/stair.m: Treat a line style argument correctly.
+
 2008-10-20  John W. Eaton  <jwe@octave.org>
 
 	* plot/surfnorm.m: Save and restore hold state.
 	From Daniel J. Sebald <daniel.sebald@ieee.org> and
 	Ben Abbott <bpabbott@mac.com>.
 
 2008-10-20  Ben Abbott  <bpabbott@mac.com>
 
diff --git a/scripts/plot/fill.m b/scripts/plot/fill.m
--- a/scripts/plot/fill.m
+++ b/scripts/plot/fill.m
@@ -110,9 +110,9 @@ endfunction
 %!demo
 %! close all;
 %! t1 = (1/16:1/8:1)'*2*pi;
 %! t2 = ((1/16:1/8:1)' + 1/32)*2*pi;
 %! x1 = sin(t1) - 0.8;
 %! y1 = cos(t1);
 %! x2 = sin(t2) + 0.8;
 %! y2 = cos(t2);
-%! h = fill(x1,y1,'r',x2,y2,'g')
+%! h = fill(x1,y1,'r',x2,y2,'g');
diff --git a/scripts/plot/quiver.m b/scripts/plot/quiver.m
--- a/scripts/plot/quiver.m
+++ b/scripts/plot/quiver.m
@@ -78,16 +78,16 @@ function retval = quiver (varargin)
   if (nargout > 0)
     retval = tmp;
   endif
 
 endfunction
 
 %!demo
 %! [x,y] = meshgrid(1:2:20);
-%! h = quiver(x,y,sin(2*pi*x/10),sin(2*pi*y/10))
+%! h = quiver(x,y,sin(2*pi*x/10),sin(2*pi*y/10));
 %! set (h, "maxheadsize", 0.33);
 
 %!demo
 %! axis("equal");
 %! x=linspace(0,3,80); y=sin(2*pi*x); theta=2*pi*x+pi/2;
 %! quiver(x,y,sin(theta)/10,cos(theta)/10);
 %! hold on; plot(x,y,"r"); hold off;
diff --git a/scripts/plot/stairs.m b/scripts/plot/stairs.m
--- a/scripts/plot/stairs.m
+++ b/scripts/plot/stairs.m
@@ -132,33 +132,51 @@ function [h, xs, ys] = __stairs__ (doplo
   ridx = 2:2:len-1;
   xs(ridx,:) = xtmp;
   ys(ridx,:) = y(1:nr-1,:);
 
   ridx = 3:2:len;
   xs(ridx,:) = xtmp;
   ys(ridx,:) = y(2:nr,:);
 
+  have_line_spec = false;
+  for i = 1 : nargin - 1
+    arg = varargin {i};
+    if ((ischar (arg) || iscell (arg)) && ! have_line_spec)
+      [linespec, valid] = __pltopt__ ("stairs", arg, false);
+      if (valid)
+	have_line_spec = true;
+	varargin(i) = [];
+	break;
+      endif
+    endif
+  endfor 
+
   if (doplot)
     h = [];
     unwind_protect
       hold_state = get (gca (), "nextplot");
       for i = 1 : size(y, 2)
 	hg = hggroup ();
 	h = [h; hg];
 	args = __add_datasource__ ("stairs", hg, {"x", "y"}, varargin{:});
 
 	addproperty ("xdata", hg, "data", x(:,i).');
 	addproperty ("ydata", hg, "data", y(:,i).');
 
 	addlistener (hg, "xdata", @update_data);
 	addlistener (hg, "ydata", @update_data);
 
-	tmp = line (xs(:,i).', ys(:,i).', "color", __next_line_color__ (),
-		    "parent", hg);
+	if (have_line_spec)
+	  tmp = line (xs(:,i).', ys(:,i).', "color", linespec.color,
+		      "parent", hg);
+	else
+	  tmp = line (xs(:,i).', ys(:,i).', "color", __next_line_color__ (),
+		      "parent", hg);
+	endif
 
         addproperty ("color", hg, "linecolor", get (tmp, "color"));
 	addproperty ("linewidth", hg, "linelinewidth", get (tmp, "linewidth"));
 	addproperty ("linestyle", hg, "linelinestyle", get (tmp, "linestyle"));
 
 	addproperty ("marker", hg, "linemarker", get (tmp, "marker"));
 	addproperty ("markerfacecolor", hg, "linemarkerfacecolor",
 		     get (tmp, "markerfacecolor"));
