# HG changeset patch
# User jwe
# Date 942905828 0
#      Thu Nov 18 06:17:08 1999 +0000
# Node ID d2e12e998a785e0a05d5bfe6026d0ec308bab503
# Parent  c4983fc7318f3d6deb8286f697e0ebc5a7f87260
[project @ 1999-11-18 06:17:06 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,20 +1,21 @@
 1999-11-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
-	* symtab.cc (symbol_record::symbol_def::type_as_string): New function.
+	* symtab.cc (symbol_record::type_as_string): New function.
 
 	* symtab.cc (symbol_record::which): New functions.
 	* help.cc (do_which): New functions.
 	(Fwhich): Use them.
 
 	* help.cc (help_from_symbol_table, help_from_file): New functions.
 	(builtin_help): Use them.
 
 	* help.cc (do_type): New function.
+	(symbol_record::type): New function.
 	(Ftype): Use them.
 
 	* help.cc (print_symbol_type): Delete.
 
 	* symtab.cc (symbol_table::name_list): Delete count arg.
 	(symbol_table::symbol_list): Likewise.
 	(symbol_table::glob): Likewise.  Also return Array<symbol_record *>
 	instead of symbol_record **.
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -55,17 +55,16 @@ Software Foundation, 59 Temple Place - S
 #include "help.h"
 #include "input.h"
 #include "oct-obj.h"
 #include "ov-usr-fcn.h"
 #include "pager.h"
 #include "parse.h"
 #include "pathsearch.h"
 #include "procstream.h"
-#include "pt-pr-code.h"
 #include "sighandlers.h"
 #include "symtab.h"
 #include "syswait.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 #include "version.h"
@@ -797,99 +796,17 @@ using the command @kbd{C-h}.\n\
 
 static void
 do_type (ostream& os, const string& name, bool pr_type_info,
 	 bool quiet, bool pr_orig_txt)
 {
   symbol_record *sym_rec = lookup_by_name (name, 0);
 
   if (sym_rec && sym_rec->is_defined ())
-    {
-      if (sym_rec->is_user_function ())
-	{
-	  octave_value tmp = sym_rec->def ();
-		  
-	  octave_function *defn = tmp.function_value ();
-
-	  string fn = defn ? defn->fcn_file_name () : string ();
-
-	  if (pr_orig_txt && ! fn.empty ())
-	    {
-	      ifstream fs (fn.c_str (), ios::in);
-
-	      if (fs)
-		{
-		  if (pr_type_info && ! quiet)
-		    os << name << " is the function defined from: "
-		       << fn << "\n\n";
-
-		  char ch;
-
-		  while (fs.get (ch))
-		    os << ch;
-		}
-	      else
-		os << "unable to open `" << fn << "' for reading!\n";
-	    }
-	  else
-	    {
-	      if (pr_type_info && ! quiet)
-		os << name << " is a user-defined function:\n\n";
-
-	      tree_print_code tpc (os, "", pr_orig_txt);
-
-	      defn->accept (tpc);
-	    }
-	}
-
-      // XXX FIXME XXX -- this code should be shared with
-      // Fwhich.
-
-      else if (sym_rec->is_text_function ())
-	os << name << " is a built-in text-function\n";
-      else if (sym_rec->is_builtin_function ())
-	os << name << " is a built-in function\n";
-      else if (sym_rec->is_user_variable ()
-	       || sym_rec->is_builtin_variable ()
-	       || sym_rec->is_builtin_constant ())
-	{
-	  octave_value defn = sym_rec->def ();
-
-	  int var_ok = 1;
-
-	  if (! error_state)
-	    {
-	      if (pr_type_info && ! quiet)
-		{
-		  if (var_ok)
-		    {
-		      os << name;
-
-		      if (sym_rec->is_user_variable ())
-			os << " is a user-defined variable\n";
-		      else if (sym_rec->is_builtin_variable ())
-			os << " is a built-in variable\n";
-		      else if (sym_rec->is_builtin_constant ())
-			os << " is a built-in constant\n";
-		      else
-			panic_impossible ();
-		    }
-		  else
-		    os << "type: `" << name << "' has unknown type!\n";
-		}
-
-	      defn.print_raw (os, true);
-
-	      if (pr_type_info)
-		os << "\n";
-	    }
-	}
-      else
-	error ("type: `%s' has unknown type!", name.c_str ());
-    }
+    sym_rec->type (os, pr_type_info, quiet, pr_orig_txt);
   else
     {
       string ff = fcn_file_in_path (name);
 
       if (! ff.empty ())
 	{
 	  ifstream fs (ff.c_str (), ios::in);
 
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -28,25 +28,27 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include <cassert>
 #include <cctype>
 #include <climits>
 
 #include <iomanip.h>
+#include <fstream.h>
 
 #include "glob-match.h"
 #include "str-vec.h"
 
 #include "defun.h"
 #include "error.h"
 #include "oct-lvalue.h"
 #include "ov.h"
 #include "pager.h"
+#include "pt-pr-code.h"
 #include "symtab.h"
 #include "utils.h"
 #include "variables.h"
 
 // Should variables be allowed to hide functions of the same name?  A
 // positive value means yes.  A negative value means yes, but print a
 // warning message.  Zero means it should be considered an error.
 static int Vvariables_can_hide_functions;
@@ -76,16 +78,70 @@ SYMBOL_DEF::type_as_string (void) const
   else if (is_builtin_function ())
     retval = "built-in function";
   else if (is_dld_function ())
     retval = "dynamically-linked function";
 
   return retval;
 }
 
+void
+SYMBOL_DEF::type (ostream& os, const string& name, bool pr_type_info,
+		  bool quiet, bool pr_orig_txt)
+{
+  if (is_user_function ())
+    {
+      octave_function *defn = definition.function_value ();
+
+      string fn = defn ? defn->fcn_file_name () : string ();
+
+      if (pr_orig_txt && ! fn.empty ())
+	{
+	  ifstream fs (fn.c_str (), ios::in);
+
+	  if (fs)
+	    {
+	      if (pr_type_info && ! quiet)
+		os << name << " is the " << type_as_string ()
+		   << " defined from: " << fn << "\n\n";
+
+	      char ch;
+
+	      while (fs.get (ch))
+		os << ch;
+	    }
+	  else
+	    os << "unable to open `" << fn << "' for reading!\n";
+	}
+      else
+	{
+	  if (pr_type_info && ! quiet)
+	    os << name << " is a " << type_as_string () << ":\n\n";
+
+	  tree_print_code tpc (os, "", pr_orig_txt);
+
+	  defn->accept (tpc);
+	}
+    }
+  else if (is_user_variable ()
+	   || is_builtin_variable ()
+	   || is_builtin_constant ())
+    {
+      if (pr_type_info && ! quiet)
+	os << name << " is a " << type_as_string () << "\n";
+
+      definition.print_raw (os, true);
+
+      if (pr_type_info)
+	os << "\n";
+    }
+  else
+    os << name << " is a " << type_as_string () << "\n";
+}
+
 string
 SYMBOL_DEF::which (const string& name)
 {
   string retval;
 
   if (is_user_function () || is_dld_function ())
     {
       octave_function *defn = definition.function_value ();
@@ -503,17 +559,17 @@ symbol_table::lookup (const string& nm, 
     {
       symbol_record *sr = new symbol_record (nm, table[index].next ());
 
       table[index].chain (sr);
 
       return sr;
     }
   else if (warn)
-    warning ("lookup: symbol`%s' not found", nm.c_str ());
+    warning ("lookup: symbol `%s' not found", nm.c_str ());
 
   return 0;
 }
 
 void
 symbol_table::rename (const string& old_name, const string& new_name)
 {
   unsigned int index = hash (old_name);
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -138,16 +138,19 @@ private:
 
     int rows (void) const { return definition.rows (); }
     int columns (void) const { return definition.columns (); }
 
     string type_name (void) const { return definition.type_name (); }
 
     string type_as_string (void) const;
 
+    void type (ostream& os, const string& name, bool pr_type_info,
+	       bool quiet, bool pr_orig_txt);
+
     string which (const string& name);
 
     void which (ostream& os, const string& name);
 
     void define (const octave_value& val, unsigned int sym_type)
       {
 	definition = val;
 	symbol_type = sym_type;
@@ -312,16 +315,19 @@ public:
   int rows (void) const { return definition->rows (); }
   int columns (void) const { return definition->columns (); }
 
   string type_name (void) const { return definition->type_name (); }
 
   string type_as_string (void) const
     { return definition->type_as_string (); }
 
+  void type (ostream& os, bool pr_type_info, bool quiet, bool pr_orig_txt)
+    { definition->type (os, name (), pr_type_info, quiet, pr_orig_txt); }
+
   string which (void) { return definition->which (name ()); }
 
   void which (ostream& os) { definition->which (os, name ()); }
 
   octave_value& variable_value (void);
   octave_lvalue variable_reference (void);
 
   symbol_record *next (void) const { return next_elem; }
