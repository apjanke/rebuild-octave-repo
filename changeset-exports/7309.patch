# HG changeset patch
# User jwe
# Date 1197497138 0
#      Wed Dec 12 22:05:38 2007 +0000
# Node ID 26f42a14d4f645a365fd1231b414799b2ec29b2e
# Parent  d8209a80e0932d2f52def3c04e69363a9467ca57
[project @ 2007-12-12 22:05:38 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,13 @@
 2007-12-12  John W. Eaton  <jwe@octave.org>
 
+	* linear-algebra/condest.m: Use nargin instead of size(varargin,2).	
+	Allow 6 arguments.
+
 	* plot/__go_draw_axes__.m: Handle the axes layer property.
 
 2007-12-12  David Bateman  <dbateman@free.fr>
 
 	* plot/ellipsoid.m: Port from octave-forge, editing for style.
 	* plot/Makefile.in (SOURCES): Add to the sources.
 
 2007-12-11  John W. Eaton  <jwe@octave.org>
diff --git a/scripts/linear-algebra/condest.m b/scripts/linear-algebra/condest.m
--- a/scripts/linear-algebra/condest.m
+++ b/scripts/linear-algebra/condest.m
@@ -100,57 +100,57 @@
 ##  SUCH DAMAGE.
 
 ## Author: Jason Riedy <ejr@cs.berkeley.edu>
 ## Keywords: linear-algebra norm estimation
 ## Version: 0.2
 
 function [est, v] = condest (varargin)
 
-  if size (varargin, 2) < 1 || size (varargin, 2) > 5,
+  if (nargin < 1 || nargin > 6)
     print_usage ();
   endif
 
   default_t = 5;
 
   if (ismatrix (varargin{1}))
     n = size (varargin{1}, 1);
     if (n != size (varargin{1}, 2))
       error ("condest: matrix must be square.");
     endif
     A = varargin{1};
 
-    if (size (varargin, 2) > 1)
+    if (nargin > 1)
       if (isscalar (varargin{2}))
 	t = varargin{2};
       else
-	if (size (varargin, 2) < 3)
+	if (nargin < 3)
 	  error ("condest: must supply both solve and solve_t.");
 	else
 	  solve = varargin{2};
 	  solve_t = varargin{3};
-	  if size (varargin, 2) > 3,
+	  if (nargin > 3)
 	    t = varargin{4};
 	  endif
 	endif
       endif
     endif
   else
-    if (size (varargin, 2) < 5)
+    if (nargin < 5)
       error ("condest: implicit form of condest requires at least 5 arguments.");
     endif
     apply = varargin{1};
     apply_t = varargin{2};
     solve = varargin{3};
     solve_t = varargin{4};
     n = varargin{5};
     if (! isscalar (n))
       error ("condest: dimension argument of implicit form must be scalar.");
     endif
-    if (size (varargin, 2) > 5)
+    if (nargin > 5)
       t = varargin{6};
     endif
   endif
 
   if (! exist ("t", "var"))
     t = min (n, default_t);
   endif
 
