# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1424356174 0
#      Thu Feb 19 14:29:34 2015 +0000
# Node ID 70911df8ad280ca424984228b5cb7b2f26d1617b
# Parent  95a94c98c88465aea82994d3aeac81087d7384f6
gray2ind: return uint8 when (n <= 256) instead of (n < 256) (bug #44309)

* gray2ind.m: the class of the indexed image returned by gray2ind is
dependent on the number of indices to use.  If there are 256 or less,
we return uint8, and uint16 otherwise.  Add more tests for the limits.

diff --git a/scripts/image/gray2ind.m b/scripts/image/gray2ind.m
--- a/scripts/image/gray2ind.m
+++ b/scripts/image/gray2ind.m
@@ -70,17 +70,17 @@ function [I, map] = gray2ind (I, n = 64)
     I = double (I) - low;
   else
     scale = 1;
   endif
   I *= (n-1)/scale;
 
   ## Note: no separate call to round () necessary because
   ##       type conversion does that automatically.
-  if (n < 256)
+  if (n <= 256)
     I = uint8 (I);
   else
     I = uint16 (I);
   endif
 
 endfunction
 
 
@@ -89,16 +89,25 @@ endfunction
 %!assert (gray2ind (logical ([1 0 0 1])), uint8 ([1 0 0 1]))
 %!assert (gray2ind (uint8 ([0 64 128 192 255])), uint8 ([0 16 32 47 63]))
 
 %!test
 %! i2g = ind2gray (1:100, gray (100));
 %! g2i = gray2ind (i2g, 100);
 %! assert (g2i, uint8 (0:99));
 
+%!assert (gray2ind ([0 0.25 0.5 1], 256), uint8 ([0 64 128 255]))
+%!assert (gray2ind ([0 (1/511) (1/510) 1-(1/509) 1-(1/510) 1], 256),
+%!        uint8 ([0 0 1 254 255 255]))
+
+%!test
+%! assert (class (gray2ind ([0.0 0.5 1.0], 255)), "uint8")
+%! assert (class (gray2ind ([0.0 0.5 1.0], 256)), "uint8")
+%! assert (class (gray2ind ([0.0 0.5 1.0], 257)), "uint16")
+
 %% Test input validation
 %!error gray2ind ()
 %!error gray2ind (1,2,3)
 %!error <I must be a grayscale or binary image> gray2ind ({1})
 %!error <I must be a grayscale or binary image> gray2ind ([1+i])
 %!error <I must be a grayscale or binary image> gray2ind (sparse ([1]))
 %!error <N must be a positive integer> gray2ind (1, ones (2,2))
 %!error <N must be a positive integer> gray2ind (1, 0)
