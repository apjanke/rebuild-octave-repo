# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1491769306 -7200
#      Sun Apr 09 22:21:46 2017 +0200
# Node ID 2a122c3fd80f4a1bb8b466ec695d9c30b4def75d
# Parent  2cee3976d88f44e583bfe7a270e30306da3442bc
Backed out changeset 2cee3976d88f

diff --git a/libgui/src/m-editor/external-editor-interface.cc b/libgui/src/m-editor/external-editor-interface.cc
--- a/libgui/src/m-editor/external-editor-interface.cc
+++ b/libgui/src/m-editor/external-editor-interface.cc
@@ -98,16 +98,22 @@ external_editor_interface::call_custom_e
 
   return started_ok;
 }
 
 
 // Slots for the several signals for invoking the editor
 
 void
+external_editor_interface::request_open_file (QString file, int line)
+{
+  call_custom_editor (file, line);
+}
+
+void
 external_editor_interface::request_new_file (const QString&)
 {
   call_custom_editor ();
 }
 
 void
 external_editor_interface::request_open_file (const QString& file_name,
                 const QString&, int line, bool, bool, bool, const QString&)
diff --git a/libgui/src/m-editor/external-editor-interface.h b/libgui/src/m-editor/external-editor-interface.h
--- a/libgui/src/m-editor/external-editor-interface.h
+++ b/libgui/src/m-editor/external-editor-interface.h
@@ -38,16 +38,17 @@ public:
   ~external_editor_interface () { };
 
 signals:
 
   void request_settings_dialog (const QString&);
 
 public slots:
 
+  void request_open_file (QString file, int line);
   void request_open_file (const QString& fileName,
                           const QString& encoding = QString (),
                           int line = -1, bool debug_pointer = false,
                           bool breakpoint_marker = false, bool insert = true,
                           const QString& cond = "");
   void request_new_file (const QString&);
   void handle_edit_file_request (const QString& file);
 
diff --git a/libgui/src/m-editor/file-editor-interface.h b/libgui/src/m-editor/file-editor-interface.h
--- a/libgui/src/m-editor/file-editor-interface.h
+++ b/libgui/src/m-editor/file-editor-interface.h
@@ -63,16 +63,17 @@ public:
   virtual bool check_closing (void) = 0;
 
   virtual void empty_script (bool, bool) = 0;
 
   virtual void enable_menu_shortcuts (bool enable) = 0;
 
 public slots:
   virtual void request_new_file (const QString& command = QString ()) = 0;
+  virtual void request_open_file () = 0;
   virtual void request_open_file (const QString& openFileName,
                                   const QString& encoding = QString (),
                                   int line = -1,
                                   bool debug_pointer = false,
                                   bool breakpoint_marker = false,
                                   bool insert = true,
                                   const QString& cond = "") = 0;
 //signals:
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -67,16 +67,18 @@ file_editor::file_editor (QWidget *p)
   construct ();
 
   // actions that should also be available in the find dialog
   _fetab_actions << _find_next_action;
   _fetab_actions << _find_previous_action;
 
   setVisible (false);
   setAcceptDrops (true);
+
+  _file_encoding = QString ();  // for selecting an encoding in open dialog
 }
 
 file_editor::~file_editor (void)
 {
   if (_mru_file_menu)
     delete _mru_file_menu;
 }
 
@@ -221,16 +223,79 @@ file_editor::request_new_file (const QSt
   if (fileEditorTab)
     {
       add_file_editor_tab (fileEditorTab, "");  // new tab with empty title
       fileEditorTab->new_file (commands);       // title is updated here
       focus ();                                 // focus editor and new tab
     }
 }
 
+void
+file_editor::request_open_file (void)
+{
+  // Open file isn't a file_editor_tab function since the file
+  // editor tab has yet to be created and there is no object to
+  // pass a signal to.  Hence, functionality is here.
+
+  // Create a NonModal message.
+  QFileDialog *fileDialog = new QFileDialog (this);
+  fileDialog->setNameFilter (tr ("Octave Files (*.m);;All Files (*)"));
+
+  // Giving trouble under KDE (problem is related to Qt signal handling on unix,
+  // see https://bugs.kde.org/show_bug.cgi?id=260719 ,
+  // it had/has no effect on Windows, though)
+  fileDialog->setOption (QFileDialog::DontUseNativeDialog, true);
+
+  // define a new grid layout with the extra elements
+  QGridLayout *extra = new QGridLayout (fileDialog);
+  QFrame *separator = new QFrame (fileDialog);
+  separator->setFrameShape (QFrame::HLine);   // horizontal line as separator
+  separator->setFrameStyle (QFrame::Sunken);
+
+  // combo box for encoding
+  QLabel *label_enc = new QLabel (tr ("File Encoding:"));
+  QComboBox *combo_enc = new QComboBox ();
+  resource_manager::combo_encoding (combo_enc);
+  _file_encoding = QString ();  // default, no special encoding
+
+  // track changes in the combo boxes
+  connect (combo_enc, SIGNAL (currentIndexChanged (QString)),
+           this, SLOT (handle_combo_enc_current_index (QString)));
+
+  // build the extra grid layout
+  extra->addWidget (separator,0,0,1,3);
+  extra->addWidget (label_enc,1,0);
+  extra->addWidget (combo_enc,1,1);
+  extra->addItem   (new QSpacerItem (1,20,QSizePolicy::Expanding,
+                                     QSizePolicy::Fixed), 1,2);
+
+  // and add the extra grid layout to the dialog's layout
+  QGridLayout *dialog_layout = dynamic_cast<QGridLayout*> (fileDialog->layout ());
+  dialog_layout->addLayout (extra,dialog_layout->rowCount (),0,
+                            1,dialog_layout->columnCount ());
+
+  fileDialog->setAcceptMode (QFileDialog::AcceptOpen);
+  fileDialog->setViewMode (QFileDialog::Detail);
+  fileDialog->setFileMode (QFileDialog::ExistingFiles);
+  fileDialog->setDirectory (ced);
+
+  connect (fileDialog, SIGNAL (filesSelected (const QStringList&)),
+           this, SLOT (request_open_files (const QStringList&)));
+
+  fileDialog->setWindowModality (Qt::NonModal);
+  fileDialog->setAttribute (Qt::WA_DeleteOnClose);
+  fileDialog->show ();
+}
+
+void
+file_editor::handle_combo_enc_current_index (QString new_encoding)
+{
+  _file_encoding = new_encoding;
+}
+
 // Check whether this file is already open in the editor.
 QWidget *
 file_editor::find_tab_widget (const QString& file) const
 {
   QWidget *retval = 0;
 
   for (editor_tab_map_const_iterator p = editor_tab_map.begin ();
        p != editor_tab_map.end (); p++)
@@ -254,17 +319,17 @@ file_editor::call_custom_editor (const Q
   // Check if the user wants to use a custom file editor.
   QSettings *settings = resource_manager::get_settings ();
 
   if (settings->value ("useCustomFileEditor",false).toBool ())
     {
       // use the external editor interface for handling the call
       external_editor_interface ext_editor (main_win ());
 
-      ext_editor.request_open_file (file_name, QString (), line);
+      ext_editor.request_open_file (file_name, line);
 
       if (line < 0 && ! file_name.isEmpty ())
         handle_mru_add_file (QFileInfo (file_name).canonicalFilePath (),
                              QString ());
 
       return true;
     }
 
@@ -283,16 +348,26 @@ file_editor::is_editor_console_tabbed ()
     {
       if (w_list.at (i) == console)
         return true;
     }
 
   return false;
 }
 
+// The following slot is called after files have been selected in the
+// open file dialog, possibly with a new selected encoding stored in
+// _file_encoding
+void
+file_editor::request_open_files (const QStringList& open_file_names)
+{
+  for (int i = 0; i < open_file_names.count (); i++)
+    request_open_file (open_file_names.at (i), _file_encoding);
+}
+
 // Open a file, if not already open, and mark the current execution location
 // and/or a breakpoint with condition cond.
 void
 file_editor::request_open_file (const QString& openFileName,
                                 const QString& encoding,
                                 int line, bool debug_pointer,
                                 bool breakpoint_marker, bool insert,
                                 const QString& cond)
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -200,16 +200,17 @@ signals:
 public slots:
 
   void focus (void);
   void set_focus (QWidget* fet);
   void enable_menu_shortcuts (bool);
   bool check_closing (void);
 
   void request_new_file (const QString& commands);
+  void request_open_file (void);
   void request_close_file (bool);
   void request_close_all_files (bool);
   void request_close_other_files (bool);
   void request_mru_open_file (QAction *action);
   void request_print_file (bool);
 
   void request_redo (bool);
   void request_cut (bool);
@@ -292,24 +293,27 @@ protected slots:
 
   void copyClipboard ();
   void pasteClipboard ();
   void selectAll ();
   void do_undo ();
 
 private slots:
 
+  void request_open_files (const QStringList&);
   void request_open_file (const QString& fileName,
                           const QString& encoding = QString (),
                           int line = -1, bool debug_pointer = false,
                           bool breakpoint_marker = false, bool insert = true,
                           const QString& cond = "");
   void request_preferences (bool);
   void request_styles_preferences (bool);
 
+  void handle_combo_enc_current_index (QString new_encoding);
+
   void show_line_numbers (bool);
   void show_white_space (bool);
   void show_eol_chars (bool);
   void show_indent_guides (bool);
   void show_long_line (bool);
   void show_toolbar (bool);
   void show_statusbar (bool);
   void show_hscrollbar (bool);
@@ -458,16 +462,18 @@ private:
   QList<QAction*> _fetab_actions;
 
   file_editor_tab_widget *_tab_widget;
 
   int _marker_breakpoint;
 
   bool _closed;
 
+  QString _file_encoding;
+
   enum { MaxMRUFiles = 10 };
   QMenu *_mru_file_menu;
   QAction *_mru_file_actions[MaxMRUFiles];
   QStringList _mru_files;
   QStringList _mru_files_encodings;
 };
 
 #endif
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -131,18 +131,17 @@ main_window::main_window (QWidget *p, oc
     m_main_thread (new QThread ()), _workspace_model (0), status_bar (0),
     command_window (0), history_window (0), file_browser_window (0),
     doc_browser_window (0), editor_window (0), workspace_window (0),
     _settings_dlg (0), find_files_dlg (0), release_notes_window (0),
     community_news_window (0), _octave_qt_link (0),
     _clipboard (QApplication::clipboard ()),
     _prevent_readline_conflicts (true),
     _suppress_dbg_location (true),
-    _start_gui (app_context && app_context->start_gui_p ()),
-    _file_encoding (QString ())
+    _start_gui (app_context && app_context->start_gui_p ())
 {
   if (_start_gui)
     {
       _workspace_model = new workspace_model ();
       status_bar = new QStatusBar ();
       command_window = new terminal_dock_widget (this);
       history_window = new history_dock_widget (this);
       file_browser_window = new files_dock_widget (this);
@@ -1394,99 +1393,16 @@ main_window::handle_create_filedialog (c
 
 //
 // Functions related to file editing
 //
 // These are moved from editor to here for also using them when octave
 // is built without qscintilla
 //
 void
-main_window::request_open_file (void)
-{
-  // Open file isn't a file_editor_tab or editor function since the file
-  // might be opened in an external editor. Hence, functionality is here.
-
-  QSettings *settings = resource_manager::get_settings ();
-  bool is_internal = editor_window
-                && ! settings->value ("useCustomFileEditor",false).toBool ();
-
-  // Create a NonModal message.
-  QWidget *p = this;
-  if (is_internal)
-    p = editor_window;
-  QFileDialog *fileDialog = new QFileDialog (p);
-  fileDialog->setNameFilter (tr ("Octave Files (*.m);;All Files (*)"));
-
-  // Giving trouble under KDE (problem is related to Qt signal handling on unix,
-  // see https://bugs.kde.org/show_bug.cgi?id=260719 ,
-  // it had/has no effect on Windows, though)
-  fileDialog->setOption (QFileDialog::DontUseNativeDialog, true);
-
-  // define a new grid layout with the extra elements
-  QGridLayout *extra = new QGridLayout (fileDialog);
-  QFrame *separator = new QFrame (fileDialog);
-  separator->setFrameShape (QFrame::HLine);   // horizontal line as separator
-  separator->setFrameStyle (QFrame::Sunken);
-
-  if (is_internal)
-    {
-      // combo box for encoding, only when using the internal editor
-      QLabel *label_enc = new QLabel (tr ("File Encoding:"));
-      QComboBox *combo_enc = new QComboBox ();
-      resource_manager::combo_encoding (combo_enc);
-      _file_encoding = QString ();  // default
-
-      // track changes in the combo boxes
-      connect (combo_enc, SIGNAL (currentIndexChanged (QString)),
-               this, SLOT (set_file_encoding (QString)));
-
-      // build the extra grid layout
-      extra->addWidget (separator,0,0,1,3);
-      extra->addWidget (label_enc,1,0);
-      extra->addWidget (combo_enc,1,1);
-      extra->addItem   (new QSpacerItem (1,20,QSizePolicy::Expanding,
-                                        QSizePolicy::Fixed), 1,2);
-
-      // and add the extra grid layout to the dialog's layout
-      QGridLayout *dialog_layout = dynamic_cast<QGridLayout*> (
-                                   fileDialog->layout ());
-      dialog_layout->addLayout (extra,dialog_layout->rowCount (),0,
-                                1,dialog_layout->columnCount ());
-    }
-
-  fileDialog->setAcceptMode (QFileDialog::AcceptOpen);
-  fileDialog->setViewMode (QFileDialog::Detail);
-  fileDialog->setFileMode (QFileDialog::ExistingFiles);
-  fileDialog->setDirectory (_current_directory_combo_box->itemText (0));
-
-  connect (fileDialog, SIGNAL (filesSelected (const QStringList&)),
-           this, SLOT (request_open_files (const QStringList&)));
-
-  fileDialog->setWindowModality (Qt::NonModal);
-  fileDialog->setAttribute (Qt::WA_DeleteOnClose);
-  fileDialog->show ();
-}
-
-void
-main_window::set_file_encoding (const QString& new_encoding)
-{
-  _file_encoding = new_encoding;
-}
-
-// The following slot is called after files have been selected in the
-// open file dialog., possibly with a new selected encoding stored in
-// _file_encoding
-void
-main_window::request_open_files (const QStringList& open_file_names)
-{
-  for (int i = 0; i < open_file_names.count (); i++)
-    emit open_file_signal (open_file_names.at (i), _file_encoding, -1);
-}
-
-void
 main_window::handle_edit_mfile_request (const QString& fname,
                                         const QString& ffile,
                                         const QString& curr_dir, int line)
 {
   // Is it a regular function within the search path? (Call __which__)
   octave_value_list fct = F__which__ (ovl (fname.toStdString ()),0);
   octave_map map = fct(0).map_value ();
 
@@ -2019,17 +1935,17 @@ main_window::construct_file_menu (QMenuB
     = file_menu->addAction (tr ("Save Workspace As..."));
 
   file_menu->addSeparator ();
 
   _exit_action = file_menu->addAction (tr ("Exit"));
   _exit_action->setShortcutContext (Qt::ApplicationShortcut);
 
   connect (_open_action, SIGNAL (triggered ()),
-           this, SLOT (request_open_file ()));
+           _active_editor, SLOT (request_open_file ()));
 
   connect (_load_workspace_action, SIGNAL (triggered ()),
            this, SLOT (handle_load_workspace_request ()));
 
   connect (_save_workspace_action, SIGNAL (triggered ()),
            this, SLOT (handle_save_workspace_request ()));
 
   connect (_exit_action, SIGNAL (triggered ()),
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -191,17 +191,16 @@ public slots:
   void handle_enter_debugger (void);
   void handle_exit_debugger (void);
   void debug_continue (void);
   void debug_step_into (void);
   void debug_step_over (void);
   void debug_step_out (void);
   void debug_quit (void);
 
-  void request_open_file (void);
   void request_new_script (const QString& commands = QString ());
   void request_new_function (bool triggered = true);
   void handle_edit_mfile_request (const QString& name, const QString& file,
                                   const QString& curr_dir, int line);
 
   void handle_insert_debugger_pointer_request (const QString& file, int line);
   void handle_delete_debugger_pointer_request (const QString& file, int line);
   void handle_update_breakpoint_marker_request (bool insert,
@@ -264,18 +263,16 @@ public slots:
   // get the dockwidgets
   QList<octave_dock_widget *> get_dock_widget_list ()
   { return dock_widget_list (); }
 
 private slots:
 
   void disable_menu_shortcuts (bool disable);
   void restore_create_file_setting ();
-  void set_file_encoding (const QString& new_encoding);
-  void request_open_files (const QStringList& open_file_names);
 
 protected:
   void closeEvent (QCloseEvent * closeEvent);
 
 private:
 
   void construct (void);
 
@@ -447,18 +444,16 @@ private:
 
   // the queue for the command structures
   octave_command_queue _cmd_queue;
 
   // some class global flags
   bool _prevent_readline_conflicts;
   bool _suppress_dbg_location;
   bool _start_gui;
-
-  QString _file_encoding;
 };
 
 class news_reader : public QObject
 {
   Q_OBJECT
 
 public:
 
