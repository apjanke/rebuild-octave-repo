# HG changeset patch
# User jwe
# Date 1079735485 0
#      Fri Mar 19 22:31:25 2004 +0000
# Node ID fafc79eeaebb1dc988d9d5b9aa0a49d791d354fa
# Parent  66fb9f8c66c8222b6885e986b971f0549150b82e
[project @ 2004-03-19 22:31:25 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2004-03-17  David Hoover  <jazzdaq@yahoo.com>
+
+	* DASPK.cc (DASPK::do_integrate): Always add n*n elements to the
+	work vector, not just when using a numerical Jacobian.
+
 2004-03-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* so-array.cc (SND_CMP_OP, NDS_CMP_OP, NDND_CMP_OP):
 	Omit empty result args.
 
 	* Array.cc (Array<T>::Array (const Array<T>&, const dim_vector&)):
 	Move here from Array.h, check that size of array arg is not
 	smaller than the size defined by the new dimensions.
diff --git a/liboctave/DASPK.cc b/liboctave/DASPK.cc
--- a/liboctave/DASPK.cc
+++ b/liboctave/DASPK.cc
@@ -224,19 +224,17 @@ DASPK::do_integrate (double tout)
       int eavfet = exclude_algebraic_variables_from_error_test ();
 
       liw = 40 + n;
       if (eiq == 1 || eiq == 3)
 	liw += n;
       if (ccic == 1 || eavfet == 1)
 	liw += n;
 
-      lrw = 50 + 9*n;
-      if (! user_jac)
-	lrw += n*n;
+      lrw = 50 + 9*n + n*n;
       if (eavfet == 1)
 	lrw += n;
 
       iwork.resize (liw);
       rwork.resize (lrw);
 
       piwork = iwork.fortran_vec ();
       prwork = rwork.fortran_vec ();
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2004-03-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-list.cc (octave_list::subsref): Correctly create return value.
+	Return comma-separate list if {-style indexing extracts more than
+	one value.
+
 2004-03-12  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-cell.cc (octave_cell::save_hdf5): Handle empty cells.
 	(octave_cell::load_hdf5): Likewise.
 
 2004-03-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-base-mat.cc (octave_base_matrix<MT>::subsasgn): If empty,
diff --git a/src/ov-list.cc b/src/ov-list.cc
--- a/src/ov-list.cc
+++ b/src/ov-list.cc
@@ -71,17 +71,19 @@ octave_list::subsref (const std::string&
     case '(':
       {
 	octave_value_list tmp_idx = idx.front ();
 
 	if (tmp_idx.length () == 1)
 	  {
 	    idx_vector i = tmp_idx (0).index_vector ();
 
-	    retval = octave_list (data.index (i));
+	    Cell tmp = data.index (i);
+
+	    retval = octave_value (new octave_list (tmp));
 	  }
 	else
 	  error ("only one index allowed for lists");
       }
       break;
 
     case '{':
       {
@@ -90,16 +92,18 @@ octave_list::subsref (const std::string&
 	if (tmp_idx.length () == 1)
 	  {
 	    idx_vector i = tmp_idx (0).index_vector ();
 
 	    Cell tmp = data.index (i);
 
 	    if (tmp.length () == 1)
 	      retval = tmp(0);
+	    else
+	      retval = octave_value (tmp, true);
 	  }
 	else
 	  error ("only one index allowed for lists");
       }
       break;
 
     case '.':
       {
