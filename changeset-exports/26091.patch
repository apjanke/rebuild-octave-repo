# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1542345404 18000
#      Fri Nov 16 00:16:44 2018 -0500
# Node ID fb907736f335df181f894146b3f2904ac05cfb71
# Parent  5cff527d09700c1008d2a8a43ae16580d4e10980
* syminfo.h: Derive symbol_info_list from base_list<symbol_info>.

diff --git a/libinterp/corefcn/syminfo.h b/libinterp/corefcn/syminfo.h
--- a/libinterp/corefcn/syminfo.h
+++ b/libinterp/corefcn/syminfo.h
@@ -23,16 +23,18 @@ along with Octave; see the file COPYING.
 #if ! defined (octave_syminfo_h)
 #define octave_syminfo_h 1
 
 #include "octave-config.h"
 
 #include <string>
 #include <iosfwd>
 
+#include "base-list.h"
+
 #include "ov.h"
 
 class octave_map;
 
 namespace octave
 {
   struct whos_parameter
   {
@@ -79,51 +81,38 @@ namespace octave
     octave_value m_value;
     bool m_is_automatic;
     bool m_is_complex;
     bool m_is_formal;
     bool m_is_global;
     bool m_is_persistent;
   };
 
-  class symbol_info_list
+  class symbol_info_list : public base_list<symbol_info>
   {
   public:
 
     symbol_info_list (void) = default;
 
     symbol_info_list (const symbol_info_list&) = default;
 
     symbol_info_list& operator = (const symbol_info_list&) = default;
 
     ~symbol_info_list (void) = default;
 
-    void append (const symbol_info& syminf)
-    {
-      m_lst.push_back (syminf);
-    }
-
-    size_t size (void) const { return m_lst.size (); }
-
-    bool empty (void) const { return m_lst.empty (); }
-
     octave_map map_value (const std::string& caller_function_name,
                           int nesting_level) const;
 
     // Print a line of information for a given symbol.
     void print_descriptor (std::ostream& os,
                            const std::list<whos_parameter> params) const;
 
     void display (std::ostream& os, const std::string& format);
 
     // Parse FORMAT, and return a parameter list,
     // containing all information needed to print the given
     // attributes of the symbols.
     std::list<whos_parameter>
     parse_whos_line_format (const std::string& format);
-
-  private:
-
-    std::list<symbol_info> m_lst;
   };
 }
 
 #endif
