# HG changeset patch
# User Rik <rik@octave.org>
# Date 1453599897 28800
#      Sat Jan 23 17:44:57 2016 -0800
# Node ID 623fc7d08cc68180beeca8fb5f2f6fca5c1ec947
# Parent  7cac4e7458f24d52969b231c179d5558480aa62d
maint: Clean up compile warnings in liboctave from cset 7cac4e7458f2.

* Sparse.h (range_error): Mark function with OCTAVE_NORETURN attribute.
* Sparse.h (read_sparse_matrix): "return is" at end of fcn.

* dSparse.cc (tinverse): Delete unused inverse_singular label.

* idx-vector.h (as_array, sort_idx): Mark function with OCTAVE_NORETURN.

* Quad.h (do_integrate): Mark unreachable do_integrate combinations
with OCTAVE_NORETURN.

diff --git a/liboctave/array/Sparse.h b/liboctave/array/Sparse.h
--- a/liboctave/array/Sparse.h
+++ b/liboctave/array/Sparse.h
@@ -289,24 +289,28 @@ public:
   }
 
   dim_vector dims (void) const { return dimensions; }
 
   Sparse<T> squeeze (void) const { return *this; }
 
   octave_idx_type compute_index (const Array<octave_idx_type>& ra_idx) const;
 
-  T range_error (const char *fcn, octave_idx_type n) const;
-  T& range_error (const char *fcn, octave_idx_type n);
+  OCTAVE_NORETURN T range_error (const char *fcn, octave_idx_type n) const;
+  OCTAVE_NORETURN T& range_error (const char *fcn, octave_idx_type n);
 
-  T range_error (const char *fcn, octave_idx_type i, octave_idx_type j) const;
-  T& range_error (const char *fcn, octave_idx_type i, octave_idx_type j);
+  OCTAVE_NORETURN T range_error (const char *fcn,
+                                 octave_idx_type i, octave_idx_type j) const;
+  OCTAVE_NORETURN T& range_error (const char *fcn,
+                                  octave_idx_type i, octave_idx_type j);
 
-  T range_error (const char *fcn, const Array<octave_idx_type>& ra_idx) const;
-  T& range_error (const char *fcn, const Array<octave_idx_type>& ra_idx);
+  OCTAVE_NORETURN T range_error (const char *fcn,
+                                 const Array<octave_idx_type>& ra_idx) const;
+  OCTAVE_NORETURN T& range_error (const char *fcn,
+                                  const Array<octave_idx_type>& ra_idx);
 
   // No checking, even for multiple references, ever.
 
   T& xelem (octave_idx_type n)
   {
     octave_idx_type i = n % rows ();
     octave_idx_type j = n / rows ();
     return xelem (i, j);
@@ -770,11 +774,13 @@ read_sparse_matrix (std::istream& is, Sp
 
           a.data (ii) = tmp;
           a.ridx (ii++) = itmp;
         }
 
       for (octave_idx_type j = jold; j < nc; j++)
         a.cidx (j+1) = ii;
     }
+
+  return is;
 }
 
 #endif
diff --git a/liboctave/array/dSparse.cc b/liboctave/array/dSparse.cc
--- a/liboctave/array/dSparse.cc
+++ b/liboctave/array/dSparse.cc
@@ -1138,19 +1138,16 @@ SparseMatrix::tinverse (MatrixType &matt
           if (atmp > ainvnorm)
             ainvnorm = atmp;
         }
 
       rcond = 1. / ainvnorm / anorm;
     }
 
   return retval;
-
-inverse_singular:
-  return SparseMatrix ();
 }
 
 SparseMatrix
 SparseMatrix::inverse (MatrixType &mattype, octave_idx_type& info,
                        double& rcond, int, int calc_cond) const
 {
   int typ = mattype.type (false);
   SparseMatrix ret;
diff --git a/liboctave/array/idx-vector.h b/liboctave/array/idx-vector.h
--- a/liboctave/array/idx-vector.h
+++ b/liboctave/array/idx-vector.h
@@ -98,17 +98,17 @@ private:
     virtual bool is_colon_equiv (octave_idx_type) const { return false; }
 
     // The original dimensions of object (used when subscribing by matrices).
     virtual dim_vector orig_dimensions (void) const { return dim_vector (); }
 
     // i/o
     virtual std::ostream& print (std::ostream& os) const = 0;
 
-    virtual Array<octave_idx_type> as_array (void);
+    OCTAVE_NORETURN virtual Array<octave_idx_type> as_array (void);
 
     octave_refcount<int> count;
 
     bool err;
 
   private:
 
     // No copying!
@@ -132,17 +132,17 @@ private:
 
     octave_idx_type extent (octave_idx_type n) const { return n; }
 
     idx_class_type idx_class (void) const { return class_colon; }
 
     idx_base_rep *sort_uniq_clone (bool = false)
     { count++; return this; }
 
-    idx_base_rep *sort_idx (Array<octave_idx_type>&);
+    OCTAVE_NORETURN idx_base_rep *sort_idx (Array<octave_idx_type>&);
 
     bool is_colon_equiv (octave_idx_type) const { return true; }
 
     std::ostream& print (std::ostream& os) const;
 
   private:
 
 
diff --git a/liboctave/numeric/Quad.h b/liboctave/numeric/Quad.h
--- a/liboctave/numeric/Quad.h
+++ b/liboctave/numeric/Quad.h
@@ -138,18 +138,18 @@ public:
     : Quad (fcn), lower_limit (0.0), upper_limit (1.0),
       singularities (sing) { }
 
   ~DefQuad (void) { }
 
   double do_integrate (octave_idx_type& ier, octave_idx_type& neval,
                        double& abserr);
 
-  float do_integrate (octave_idx_type& ier, octave_idx_type& neval,
-                      float& abserr);
+  OCTAVE_NORETURN float do_integrate (octave_idx_type& ier,
+                                      octave_idx_type& neval, float& abserr);
 
 private:
 
   double lower_limit;
   double upper_limit;
 
   ColumnVector singularities;
 };
@@ -168,18 +168,18 @@ public:
   IndefQuad (integrand_fcn fcn, double b, IntegralType t)
     : Quad (fcn), bound (b), type (t), integration_error (0) { }
 
   ~IndefQuad (void) { }
 
   double do_integrate (octave_idx_type& ier, octave_idx_type& neval,
                        double& abserr);
 
-  float do_integrate (octave_idx_type& ier, octave_idx_type& neval,
-                      float& abserr);
+OCTAVE_NORETURN float do_integrate (octave_idx_type& ier,
+                                    octave_idx_type& neval, float& abserr);
 
 private:
 
   double bound;
   IntegralType type;
   int integration_error;
 };
 
@@ -201,18 +201,18 @@ public:
       singularities (sing) { }
 
   FloatDefQuad (float_integrand_fcn fcn, const FloatColumnVector& sing)
     : Quad (fcn), lower_limit (0.0), upper_limit (1.0),
       singularities (sing) { }
 
   ~FloatDefQuad (void) { }
 
-  double do_integrate (octave_idx_type& ier, octave_idx_type& neval,
-                       double& abserr);
+  OCTAVE_NORETURN double do_integrate (octave_idx_type& ier,
+                                       octave_idx_type& neval, double& abserr);
 
   float do_integrate (octave_idx_type& ier, octave_idx_type& neval,
                       float& abserr);
 
 private:
 
   float lower_limit;
   float upper_limit;
@@ -231,18 +231,18 @@ public:
   FloatIndefQuad (float_integrand_fcn fcn)
     : Quad (fcn), bound (0.0), type (bound_to_inf), integration_error (0) { }
 
   FloatIndefQuad (float_integrand_fcn fcn, double b, IntegralType t)
     : Quad (fcn), bound (b), type (t), integration_error (0) { }
 
   ~FloatIndefQuad (void) { }
 
-  double do_integrate (octave_idx_type& ier, octave_idx_type& neval,
-                       double& abserr);
+  OCTAVE_NORETURN double do_integrate (octave_idx_type& ier,
+                                       octave_idx_type& neval, double& abserr);
 
   float do_integrate (octave_idx_type& ier, octave_idx_type& neval,
                       float& abserr);
 
 private:
 
   float bound;
   IntegralType type;
