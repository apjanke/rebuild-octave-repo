# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1544669076 18000
#      Wed Dec 12 21:44:36 2018 -0500
# Node ID c0ac6fc191d7074c2e728164fc16802300553870
# Parent  ff0eadb417ec2886a8ff280c0c175f33351ef933
allow inputname to return non-ID arguments (bug #55213)

* inputname.m: New optional argument, IDS_ONLY.  Default value is
true.  If false, return text of argument, even if it is not a valid
variable name.
* assert.m, test.m: Call inputname with new IDS_ONLY argument = false.

diff --git a/scripts/miscellaneous/inputname.m b/scripts/miscellaneous/inputname.m
--- a/scripts/miscellaneous/inputname.m
+++ b/scripts/miscellaneous/inputname.m
@@ -16,43 +16,49 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 ##
 ## Original version by Paul Kienzle distributed as free software in the
 ## public domain.
 
 ## -*- texinfo -*-
 ## @deftypefn {} {} inputname (@var{n})
+## @deftypefnx {} {} inputname (@var{n}, @var{ids_only})
 ## Return the name of the @var{n}-th argument to the calling function.
 ##
 ## If the argument is not a simple variable name, return an empty string.  As
 ## an example, a reference to a field in a structure such as @code{s.field} is
 ## not a simple name and will return @qcode{""}.
 ##
 ## @code{inputname} is only useful within a function.  When used at the command
 ## line it always returns an empty string.
+##
+## By default, return an empty string if the @var{n}-th argument is not
+## a valid variable name.  If the optional argument @var{ids_only} is
+## false, return the text of the argument even if it is not a valid
+## variable name.
 ## @seealso{nargin, nthargout}
 ## @end deftypefn
 
-function name = inputname (n)
+function name = inputname (n, ids_only = true)
 
-  if (nargin != 1)
+  if (nargin > 2)
     print_usage ();
   endif
 
   name = "";
   try
     name = evalin ("caller", sprintf ("__varval__ ('.argn.'){%d}", fix (n)));
   catch
     return;
   end_try_catch
 
   ## For compatibility with Matlab,
   ## return empty string if argument name is not a valid identifier.
-  if (! isvarname (name))
+  if (ids_only && ! isvarname (name))
     name = "";
   endif
 
 endfunction
 
 
 ## Warning: heap big magic in the following tests!!!
 ## The test function builds a private context for each test, with only the
diff --git a/scripts/testfun/assert.m b/scripts/testfun/assert.m
--- a/scripts/testfun/assert.m
+++ b/scripts/testfun/assert.m
@@ -83,17 +83,17 @@ function assert (cond, varargin)
       errmsg = "";
     endif
 
     if (nargin == 1 || (nargin > 1 && islogical (cond) && ischar (varargin{1})))
       if ((! isnumeric (cond) && ! islogical (cond))
           || isempty (cond) || ! all (cond(:)))
         if (nargin == 1)
           ## Perhaps, say which elements failed?
-          argin = ["(" inputname(1) ")"];
+          argin = ["(" inputname(1, false) ")"];
           error ("assert %s failed", argin);
         else
           error (varargin{:});
         endif
       endif
     else
       expected = varargin{1};
       if (nargin < 3)
@@ -398,17 +398,17 @@ function assert (cond, varargin)
         endif
 
       endif
 
       ## Print any errors
       if (! isempty (err.index))
         arg_names = cell (nargin, 1);
         for i = 1:nargin
-          arg_names{i} = inputname (i);
+          arg_names{i} = inputname (i, false);
         endfor
         argin = ["(" strjoin(arg_names, ",") ")"];
         if (! isempty (errmsg))
           errmsg = [errmsg "\n"];
         endif
         errmsg = [errmsg, pprint(argin, err)];
       endif
 
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -810,17 +810,17 @@ function [__n, __nmax, __nxfail, __nbug,
   endif
 
 endfunction
 
 
 ## Create structure with fieldnames the name of the input variables.
 function s = var2struct (varargin)
   for i = 1:nargin
-    s.(inputname (i)) = varargin{i};
+    s.(inputname (i, true)) = varargin{i};
   endfor
 endfunction
 
 ## Find [start,end] of fn in 'function [a,b] = fn'.
 function pos = function_name (def)
 
   pos = [];
 
