# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1336352778 14400
#      Sun May 06 21:06:18 2012 -0400
# Branch gui
# Node ID fa6809bbc3a6fefa356491608ec55cc5ed387522
# Parent  c8453a013000e4dc27db517f77206f09f9d2d134
Backout revision 136ee6bcadc0 (no mutexing the symbol table)

diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -35,18 +35,16 @@ along with Octave; see the file COPYING.
 
 class tree_argument_list;
 class octave_user_function;
 
 #include "oct-obj.h"
 #include "oct-refcount.h"
 #include "ov.h"
 
-#include "oct-mutex.h"
-
 class
 OCTINTERP_API
 symbol_table
 {
 public:
 
   typedef int scope_id;
   typedef size_t context_id;
@@ -2162,41 +2160,38 @@ private:
   {
     assert (!st.nest_parent);
     nest_children.push_back (&st);
     st.nest_parent = this;
   }
 
   void insert_symbol_record (const symbol_record& sr)
   {
-    octave_autolock lock (table_mutex);
     table[sr.name ()] = sr;
   }
 
   void
   do_dup_scope (symbol_table& new_symbol_table) const
   {
-	octave_autolock lock (table_mutex);
     for (table_const_iterator p = table.begin (); p != table.end (); p++)
       new_symbol_table.insert_symbol_record (p->second.dup (new_symbol_table.my_scope));
   }
 
   symbol_record do_find_symbol (const std::string& name)
   {
     table_iterator p = table.find (name);
 
     if (p == table.end ())
       return do_insert (name);
     else
       return p->second;
   }
 
   void do_inherit (symbol_table& donor_table, context_id donor_context)
   {
-    octave_autolock lock (table_mutex);
     for (table_iterator p = table.begin (); p != table.end (); p++)
       {
         symbol_record& sr = p->second;
 
         if (! (sr.is_automatic () || sr.is_formal ()))
           {
             std::string nm = sr.name ();
 
@@ -2224,17 +2219,16 @@ private:
   octave_value
   do_find (const std::string& name, const octave_value_list& args,
            bool skip_variables, bool local_funcs);
 
   octave_value do_builtin_find (const std::string& name);
 
   symbol_record& do_insert (const std::string& name)
   {
-    octave_autolock lock (table_mutex);
     table_iterator p = table.find (name);
 
     if (p == table.end ())
       {
         symbol_record parent_symbol;
 
         if (nest_parent && nest_parent->look_nonlocal (name, parent_symbol))
           return table[name] = parent_symbol;
@@ -2242,142 +2236,130 @@ private:
           return table[name] = symbol_record (my_scope, name, octave_value ());
       }
     else
       return p->second;
   }
 
   void do_force_variable (const std::string& name, context_id context)
   {
-    octave_autolock lock (table_mutex);
     table_iterator p = table.find (name);
 
     if (p == table.end ())
       {
         symbol_record& sr = do_insert (name);
 
         sr.force_variable (context);
       }
     else
       p->second.force_variable (context);
   }
 
   octave_value& do_varref (const std::string& name, context_id context)
   {
-    octave_autolock lock (table_mutex);
     table_iterator p = table.find (name);
 
     if (p == table.end ())
       {
         symbol_record& sr = do_insert (name);
 
         return sr.varref (context);
       }
     else
       return p->second.varref (context);
   }
 
   octave_value do_varval (const std::string& name, context_id context) const
   {
-    octave_autolock lock (table_mutex);
     table_const_iterator p = table.find (name);
 
     return (p != table.end ()) ? p->second.varval (context) : octave_value ();
   }
 
   octave_value& do_persistent_varref (const std::string& name)
   {
     persistent_table_iterator p = persistent_table.find (name);
 
     return (p == persistent_table.end ())
       ? persistent_table[name] : p->second;
   }
 
   octave_value do_persistent_varval (const std::string& name)
   {
-    octave_autolock lock (table_mutex);
     persistent_table_const_iterator p = persistent_table.find (name);
 
     return (p != persistent_table.end ()) ? p->second : octave_value ();
   }
 
   void do_erase_persistent (const std::string& name)
   {
-    octave_autolock lock (table_mutex);
     persistent_table_iterator p = persistent_table.find (name);
 
     if (p != persistent_table.end ())
       persistent_table.erase (p);
   }
 
   bool do_is_variable (const std::string& name) const
   {
-    octave_autolock lock (table_mutex);
     bool retval = false;
 
     table_const_iterator p = table.find (name);
 
     if (p != table.end ())
       {
         const symbol_record& sr = p->second;
 
         retval = sr.is_variable ();
       }
 
     return retval;
   }
 
   void do_push_context (void)
   {
-    octave_autolock lock (table_mutex);
     for (table_iterator p = table.begin (); p != table.end (); p++)
       p->second.push_context (my_scope);
   }
 
   void do_pop_context (void)
   {
-    octave_autolock lock (table_mutex);
     for (table_iterator p = table.begin (); p != table.end (); )
       {
         if (p->second.pop_context (my_scope) == 0)
             table.erase (p++);
         else
           p++;
       }
   }
 
   void do_clear_variables (void)
   {
-    octave_autolock lock (table_mutex);
     for (table_iterator p = table.begin (); p != table.end (); p++)
       p->second.clear (my_scope);
   }
 
   void do_clear_objects (void)
   {
-    octave_autolock lock (table_mutex);
     for (table_iterator p = table.begin (); p != table.end (); p++)
       {
         symbol_record& sr = p->second;
         octave_value& val = sr.varref ();
         if (val.is_object())
           p->second.clear (my_scope);
       }
   }
 
  void do_unmark_forced_variables (void)
   {
-    octave_autolock lock (table_mutex);
     for (table_iterator p = table.begin (); p != table.end (); p++)
       p->second.unmark_forced ();
   }
 
   void do_clear_global (const std::string& name)
   {
-    octave_autolock lock (table_mutex);
     table_iterator p = table.find (name);
 
     if (p != table.end ())
       {
         symbol_record& sr = p->second;
 
         if (sr.is_global ())
           sr.unmark_global ();
@@ -2387,26 +2369,24 @@ private:
 
     if (q != global_table.end ())
       global_table.erase (q);
 
   }
 
   void do_clear_variable (const std::string& name)
   {
-    octave_autolock lock (table_mutex);
     table_iterator p = table.find (name);
 
     if (p != table.end ())
       p->second.clear (my_scope);
   }
 
   void do_clear_global_pattern (const std::string& pat)
   {
-    octave_autolock lock (table_mutex);
     glob_match pattern (pat);
 
     for (table_iterator p = table.begin (); p != table.end (); p++)
       {
         symbol_record& sr = p->second;
 
         if (sr.is_global () && pattern.match (sr.name ()))
           sr.unmark_global ();
@@ -2423,34 +2403,32 @@ private:
           q++;
       }
 
 
   }
 
   void do_clear_variable_pattern (const std::string& pat)
   {
-    octave_autolock lock (table_mutex);
     glob_match pattern (pat);
 
     for (table_iterator p = table.begin (); p != table.end (); p++)
       {
         symbol_record& sr = p->second;
 
         if (sr.is_defined () || sr.is_global ())
           {
             if (pattern.match (sr.name ()))
               sr.clear (my_scope);
           }
       }
   }
 
   void do_clear_variable_regexp (const std::string& pat)
   {
-    octave_autolock lock (table_mutex);
     ::regexp pattern (pat);
 
     for (table_iterator p = table.begin (); p != table.end (); p++)
       {
         symbol_record& sr = p->second;
 
         if (sr.is_defined () || sr.is_global ())
           {
@@ -2473,17 +2451,16 @@ private:
   void do_mark_global (const std::string& name)
   {
     do_insert (name).mark_global ();
   }
 
   std::list<symbol_record>
   do_all_variables (context_id context, bool defined_only) const
   {
-    octave_autolock lock (table_mutex);
     std::list<symbol_record> retval;
 
     for (table_const_iterator p = table.begin (); p != table.end (); p++)
       {
         const symbol_record& sr = p->second;
 
         if (defined_only && ! sr.is_defined (context))
           continue;
@@ -2492,17 +2469,16 @@ private:
       }
 
     return retval;
   }
 
   std::list<symbol_record> do_glob (const std::string& pattern,
                                     bool vars_only = false) const
   {
-    octave_autolock lock (table_mutex);
     std::list<symbol_record> retval;
 
     glob_match pat (pattern);
 
     for (table_const_iterator p = table.begin (); p != table.end (); p++)
       {
         if (pat.match (p->first))
           {
@@ -2516,17 +2492,16 @@ private:
       }
 
     return retval;
   }
 
   std::list<symbol_record> do_regexp (const std::string& pattern,
                                       bool vars_only = false) const
   {
-    octave_autolock lock (table_mutex);
     std::list<symbol_record> retval;
 
     ::regexp pat (pattern);
 
     for (table_const_iterator p = table.begin (); p != table.end (); p++)
       {
         if (pat.is_match (p->first))
           {
@@ -2539,17 +2514,16 @@ private:
           }
       }
 
     return retval;
   }
 
   std::list<std::string> do_variable_names (void)
   {
-    octave_autolock lock (table_mutex);
     std::list<std::string> retval;
 
     for (table_const_iterator p = table.begin (); p != table.end (); p++)
       {
         if (p->second.is_variable ())
           retval.push_back (p->first);
       }
 
@@ -2575,27 +2549,25 @@ private:
           retval[nm] = tmp.second;
       }
 
     return retval;
   }
 
   bool do_is_local_variable (const std::string& name) const
   {
-    octave_autolock lock (table_mutex);
     table_const_iterator p = table.find (name);
 
     return (p != table.end ()
             && ! p->second.is_global ()
             && p->second.is_defined ());
   }
 
   bool do_is_global (const std::string& name) const
   {
-    octave_autolock lock (table_mutex);
     table_const_iterator p = table.find (name);
 
     return p != table.end () && p->second.is_global ();
   }
 
   void do_dump (std::ostream& os);
 
   void do_cache_name (const std::string& name) { table_name = name; }
