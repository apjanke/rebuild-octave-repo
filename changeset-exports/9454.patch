# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1248375473 14400
#      Thu Jul 23 14:57:53 2009 -0400
# Node ID c58b8960c7d0bb02dc3177197e8e2ff8f546b51a
# Parent  5fcf008c7c4148a2fd29a7788fedd9b1594cee66
variables.cc (symbol_exist): ignore errors when parsing functions

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-07-23  John W. Eaton  <jwe@octave.org>
+
+	* variables.cc (safe_symbol_lookup): New function.
+	(symbol_exist): Use it.
+
 2009-07-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/chol.cc (Fcholupdate,
 	Fcholinsert, Fcholdelete, Fcholshift): Replace is_matrix_type ->
 	is_numeric_type.
 
 2009-07-23  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -370,16 +370,40 @@ DEFUN (is_global, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isglobal (@var{name})\n\
 This function has been deprecated.  Use isglobal instead.\n\
 @end deftypefn")
 {
   return do_isglobal (args);
 }
 
+static octave_value
+safe_symbol_lookup (const std::string& symbol_name)
+{
+  octave_value retval;
+
+  unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
+  
+  unwind_protect::protect_var (buffer_error_messages);
+  unwind_protect::protect_var (Vdebug_on_error);
+  unwind_protect::protect_var (Vdebug_on_warning);
+
+  buffer_error_messages++;
+  Vdebug_on_error = false;
+  Vdebug_on_warning = false;
+
+  retval = symbol_table::find (symbol_name);
+
+  error_state = 0;
+
+  unwind_protect::run_frame (uwp_frame);
+
+  return retval;
+}
+
 int
 symbol_exist (const std::string& name, const std::string& type)
 {
   int retval = 0;
 
   std::string struct_elts;
   std::string symbol_name = name;
 
@@ -390,17 +414,17 @@ symbol_exist (const std::string& name, c
       struct_elts = name.substr (pos+1);
       symbol_name = name.substr (0, pos);
     }
 
   // We shouldn't need to look in the global symbol table, since any
   // name that is visible in the current scope will be in the local
   // symbol table.
 
-  octave_value val = symbol_table::find (symbol_name);
+  octave_value val = safe_symbol_lookup (symbol_name);
 
   if (val.is_defined ())
     {
       bool not_a_struct = struct_elts.empty ();
       bool var_ok = not_a_struct /* || val.is_map_element (struct_elts) */;
 
       if (! retval
 	  && var_ok
