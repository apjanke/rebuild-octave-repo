# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1362139831 18000
#      Fri Mar 01 07:10:31 2013 -0500
# Node ID c5bfdc4c09632e1a392a49e2d357040ce911e774
# Parent  34898b3fc32abd266c8c77134d9eaa8733056996
move end_of_input flag from octve_parser class to octave_lexer class

* lex.h, lex.ll, parse.h, oct-parse.yy, toplev.cc
(octave_lexer::end_of_input): Move data member from octave_parser.
Change all uses.
* lex.h, lex.ll (octave_lexer::handle_end_of_input): New function.
(<<EOF>>): Use it.
({CCHAR}, .): USe it instead of simply returning END_OF_INPUT token.
* lex.ll (octave_lexer::xunput): Don't unput EOF.

diff --git a/libinterp/interpfcn/toplev.cc b/libinterp/interpfcn/toplev.cc
--- a/libinterp/interpfcn/toplev.cc
+++ b/libinterp/interpfcn/toplev.cc
@@ -634,17 +634,17 @@ main_loop (void)
                   else
                     {
                       if (octave_completion_matches_called)
                         octave_completion_matches_called = false;
                       else
                         command_editor::increment_current_command_number ();
                     }
                 }
-              else if (curr_parser->end_of_input)
+              else if (curr_parser->curr_lexer->end_of_input)
                 break;
             }
         }
       catch (octave_interrupt_exception)
         {
           recover_from_exception ();
           octave_stdout << "\n";
           if (quitting_gracefully)
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -149,17 +149,17 @@ public:
     }
 
   private:
 
     std::stack<int> context;
   };
 
   octave_lexer (void)
-    : scanner (0), convert_spaces_to_comma (true),
+    : scanner (0), end_of_input (false), convert_spaces_to_comma (true),
       do_comma_insert (false), at_beginning_of_statement (true),
       looking_at_anon_fcn_args (false), looking_at_return_list (false),
       looking_at_parameter_list (false), looking_at_decl_list (false),
       looking_at_initializer_expression (false),
       looking_at_matrix_or_assign_lhs (false),
       looking_for_object_index (false), 
       looking_at_indirect_ref (false), parsing_class_method (false),
       maybe_classdef_get_set_method (false), parsing_classdef (false),
@@ -181,16 +181,18 @@ public:
   void reset (void);
 
   void prep_for_script_file (void);
 
   void prep_for_function_file (void);
 
   int octave_read (char *buf, unsigned int max_size);
 
+  int handle_end_of_input (void);
+
   char *flex_yytext (void);
 
   int flex_yyleng (void);
 
   void do_comma_insert_check (void);
 
   int text_yyinput (void);
 
@@ -271,16 +273,19 @@ public:
 
   void fatal_error (const char *msg);
 
   void lexer_debug (const char *pattern, const char *text);
 
   // Internal state of the flex-generated lexer.
   void *scanner;
 
+  // TRUE means that we have encountered EOF on the input stream.
+  bool end_of_input;
+
   // TRUE means that we should convert spaces to a comma inside a
   // matrix definition.
   bool convert_spaces_to_comma;
 
   // GAG.  Stupid kludge so that [[1,2][3,4]] will work.
   bool do_comma_insert;
 
   // TRUE means we are at the beginning of a statement, where a
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -607,29 +607,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
     curr_lexer->current_input_column = 1;
   }
 
 %{
 // End of file.
 %}
 
 <<EOF>> {
-    LEXER_DEBUG ("<<EOF>>");
-
-    if (curr_lexer->block_comment_nesting_level != 0)
-      {
-        warning ("block comment open at end of input");
-
-        if ((reading_fcn_file || reading_script_file || reading_classdef_file)
-            && ! curr_fcn_file_name.empty ())
-          warning ("near line %d of file '%s.m'",
-                   curr_lexer->input_line_number, curr_fcn_file_name.c_str ());
-      }
-
-    TOK_RETURN (END_OF_INPUT);
+   return curr_lexer->handle_end_of_input ();
   }
 
 %{
 // Identifiers.  Truncate the token at the first space or tab but
 // don't write directly on yytext.
 %}
 
 {IDENT}{S}* {
@@ -771,17 +759,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
     curr_lexer->looking_for_object_index = false;
 
     curr_lexer->xunput (yytext[0]);
 
     bool eof = false;
     int tok = curr_lexer->process_comment (false, eof);
 
     if (eof)
-      TOK_RETURN (END_OF_INPUT);
+      return curr_lexer->handle_end_of_input ();
     else if (tok > 0)
       COUNT_TOK_AND_RETURN (tok);
   }
 
 %{
 // Block comments.
 %}
 
@@ -970,17 +958,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
 
         error ("invalid character '%s' (ASCII %d) near line %d, column %d",
                undo_string_escape (static_cast<char> (c)), c,
                curr_lexer->input_line_number, curr_lexer->current_input_column);
 
         return LEXICAL_ERROR;
       }
     else
-      TOK_RETURN (END_OF_INPUT);
+      return curr_lexer->handle_end_of_input ();
   }
 
 %%
 
 static void
 display_character (char c)
 {
   if (isgraph (c))
@@ -1446,16 +1434,38 @@ octave_lexer::octave_read (char *buf, un
 
       if (! eof)
         fatal_error ("octave_read () in flex scanner failed");
     }
 
   return status;
 }
 
+int
+octave_lexer::handle_end_of_input (void)
+{
+  // FIXME -- we need this because of the way TOK_RETURN is defined.  DO
+  // something better than that...
+  OCTAVE_YYG;
+
+  LEXER_DEBUG ("<<EOF>>");
+
+  if (block_comment_nesting_level != 0)
+    {
+      warning ("block comment open at end of input");
+
+      if ((reading_fcn_file || reading_script_file || reading_classdef_file)
+          && ! curr_fcn_file_name.empty ())
+        warning ("near line %d of file '%s.m'",
+                 input_line_number, curr_fcn_file_name.c_str ());
+    }
+
+  TOK_RETURN (END_OF_INPUT);
+}
+
 char *
 octave_lexer::flex_yytext (void)
 {
   return yyget_text (scanner);
 }
 
 int
 octave_lexer::flex_yyleng (void)
@@ -1520,27 +1530,30 @@ octave_lexer::text_yyinput (void)
     input_line_number++;
 
   return c;
 }
 
 void
 octave_lexer::xunput (char c, char *buf)
 {
-  if (lexer_debug_flag)
+  if (c != EOF)
     {
-      std::cerr << "U: ";
-      display_character (c);
-      std::cerr << std::endl;
+      if (lexer_debug_flag)
+        {
+          std::cerr << "U: ";
+          display_character (c);
+          std::cerr << std::endl;
+        }
+
+      if (c == '\n')
+        input_line_number--;
+
+      yyunput (c, buf, scanner);
     }
-
-  if (c == '\n')
-    input_line_number--;
-
-  yyunput (c, buf, scanner);
 }
 
 void
 octave_lexer::xunput (char c)
 {
   char *yytxt = flex_yytext ();
 
   xunput (c, yytxt);
diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -337,17 +337,17 @@ input           : input1
                 | parse_error
                   { ABORT_PARSE; }
                 ;
 
 input1          : '\n'
                   { $$ = 0; }
                 | END_OF_INPUT
                   {
-                    curr_parser->end_of_input = true;
+                    curr_lexer->end_of_input = true;
                     $$ = 0;
                   }
                 | simple_list
                   { $$ = $1; }
                 | simple_list '\n'
                   { $$ = $1; }
                 | simple_list END_OF_INPUT
                   { $$ = $1; }
@@ -4296,17 +4296,17 @@ eval_string (const std::string& s, bool 
                 error ("eval: invalid use of statement list");
 
               if (error_state
                   || tree_return_command::returning
                   || tree_break_command::breaking
                   || tree_continue_command::continuing)
                 break;
             }
-          else if (curr_parser->end_of_input)
+          else if (curr_parser->curr_lexer->end_of_input)
             break;
         }
     }
   while (parse_status == 0);
 
   return retval;
 }
 
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -134,17 +134,17 @@ extern OCTINTERP_API void cleanup_statem
 extern octave_lexer *CURR_LEXER;
 
 class
 octave_parser
 {
 public:
 
   octave_parser (void)
-    : end_of_input (false), endfunction_found (false),
+    : endfunction_found (false),
       autoloading (false), fcn_file_from_relative_lookup (false),
       parsing_subfunctions (false), max_fcn_depth (0),
       curr_fcn_depth (0), primary_fcn_scope (-1),
       curr_class_name (), function_scopes (), primary_fcn_ptr (0),
       curr_lexer (new octave_lexer ()), parser_state (0)
   {
     init ();
   }
@@ -336,19 +336,16 @@ public:
   // Append a statement to an existing statement list.
   tree_statement_list *
   append_statement_list (tree_statement_list *list, char sep,
                          tree_statement *stmt, bool warn_missing_semi);
 
   // Generic error messages.
   void bison_error (const char *s);
 
-  // TRUE means that we have encountered EOF on the input stream.
-  bool end_of_input;
-
   // Have we found an explicit end to a function?
   bool endfunction_found;
 
   // TRUE means we are in the process of autoloading a function.
   bool autoloading;
 
   // TRUE means the current function file was found in a relative path
   // element.
