# HG changeset patch
# User jwe
# Date 820979813 0
#      Sun Jan 07 01:56:53 1996 +0000
# Node ID 6f5e1c4dd4cb4832986426dc006636d4c6bd68ce
# Parent  bad55bbcaf46f0af5b0d1b241a6fd72de4afa0a9
[project @ 1996-01-07 01:56:53 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -86,18 +86,16 @@ ArrayRep<T>::elem (int n) const
 // One dimensional array class.  Handles the reference counting for
 // all the derived classes.
 
 template <class T>
 Array<T>::Array (int n, const T& val)
 {
   rep = new ArrayRep<T> (n);
 
-  rep->count = 1;
-
   for (int i = 0; i < n; i++)
     rep->data[i] = val;
 
 #ifdef HEAVYWEIGHT_INDEXING
   max_indices = 1;
   idx_count = 0;
   idx = 0;
 #endif
@@ -190,17 +188,16 @@ Array<T>::resize (int n)
   if (n == length ())
     return;
 
   ArrayRep<T> *old_rep = rep;
   const T *old_data = data ();
   int old_len = length ();
 
   rep = new ArrayRep<T> (n);
-  rep->count = 1;
 
   if (old_data && old_len > 0)
     {
       int min_len = old_len < n ? old_len : n;
 
       for (int i = 0; i < min_len; i++)
 	xelem (i) = old_data[i];
     }
@@ -222,17 +219,16 @@ Array<T>::resize (int n, const T& val)
   if (n == length ())
     return;
 
   ArrayRep<T> *old_rep = rep;
   const T *old_data = data ();
   int old_len = length ();
 
   rep = new ArrayRep<T> (n);
-  rep->count = 1;
 
   int min_len = old_len < n ? old_len : n;
 
   if (old_data && old_len > 0)
     {
       for (int i = 0; i < min_len; i++)
 	xelem (i) = old_data[i];
     }
@@ -247,17 +243,16 @@ Array<T>::resize (int n, const T& val)
 template <class T>
 T *
 Array<T>::fortran_vec (void)
 {
   if (rep->count > 1)
     {
       --rep->count;
       rep = new ArrayRep<T> (*rep);
-      rep->count = 1;
     }
   return rep->data;
 }
 
 // Two dimensional array class.
 
 template <class T>
 T&
@@ -323,17 +318,16 @@ Array2<T>::resize (int r, int c)
   ArrayRep<T> *old_rep = rep;
   const T *old_data = data ();
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_len = length ();
 
   rep = new ArrayRep<T> (r*c);
-  rep->count = 1;
 
   d1 = r;
   d2 = c;
 
   if (old_data && old_len > 0)
     {
       int min_r = old_d1 < r ? old_d1 : r;
       int min_c = old_d2 < c ? old_d2 : c;
@@ -362,17 +356,16 @@ Array2<T>::resize (int r, int c, const T
 
   ArrayRep<T> *old_rep = rep;
   const T *old_data = data ();
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_len = length ();
 
   rep = new ArrayRep<T> (r*c);
-  rep->count = 1;
 
   d1 = r;
   d2 = c;
 
   int min_r = old_d1 < r ? old_d1 : r;
   int min_c = old_d2 < c ? old_d2 : c;
 
   if (old_data && old_len > 0)
@@ -575,17 +568,16 @@ DiagArray<T>::resize (int r, int c)
 
   ArrayRep<T> *old_rep = rep;
   const T *old_data = data ();
   int old_len = length ();
 
   int new_len = r < c ? r : c;
 
   rep = new ArrayRep<T> (new_len);
-  rep->count = 1;
 
   nr = r;
   nc = c;
 
   if (old_data && old_len > 0)
     {
       int min_len = old_len < new_len ? old_len : new_len;
 
@@ -612,17 +604,16 @@ DiagArray<T>::resize (int r, int c, cons
 
   ArrayRep<T> *old_rep = rep;
   const T *old_data = data ();
   int old_len = length ();
 
   int new_len = r < c ? r : c;
 
   rep = new ArrayRep<T> (new_len);
-  rep->count = 1;
 
   nr = r;
   nc = c;
 
   int min_len = old_len < new_len ? old_len : new_len;
 
   if (old_data && old_len > 0)
     {
