# HG changeset patch
# User jwe
# Date 1090526286 0
#      Thu Jul 22 19:58:06 2004 +0000
# Node ID 14027e0bafa448f6c774e5272f104e9ee41c71a2
# Parent  1242acab4246452d1c8eb486f7170077d57212d6
[project @ 2004-07-22 19:58:06 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2004-07-22  David Bateman  <dbateman@free.fr>
+
+	* oct-sort.h: Don't include oct-obj.h.
+
+	* lo-specfun.cc (is_integer_value): New function.
+	(zbesj, zbesi, zbesy): Special case negative integer or half
+	integer orders that cause overflow for small arguments.
+
 2004-07-12  John W. Eaton  <jwe@octave.org>
 
 	* oct-inttypes.h (octave_int<T>::nbits): New function.
 	(bitshift (const octave_int<T>&, int)): New function.
 
 2004-06-14  John W. Eaton  <jwe@octave.org>
 
 	* mx-base.h: Include headers for new int types.
diff --git a/liboctave/lo-specfun.cc b/liboctave/lo-specfun.cc
--- a/liboctave/lo-specfun.cc
+++ b/liboctave/lo-specfun.cc
@@ -218,16 +218,22 @@ bessel_return_value (const Complex& val,
     default:
       retval = nan_val;
       break;
     }
 
   return retval;
 }
 
+static inline bool
+is_integer_value (double x)
+{
+  return x == static_cast<double> (static_cast<long> (x));
+}
+
 static inline Complex
 zbesj (const Complex& z, double alpha, int kode, int& ierr)
 {
   Complex retval;
 
   if (alpha >= 0.0)
     {
       double yr = 0.0;
@@ -247,16 +253,25 @@ zbesj (const Complex& z, double alpha, i
 	  yi *= expz;
 	}
 
       if (zi == 0.0 && zr >= 0.0)
 	yi = 0.0;
 
       retval = bessel_return_value (Complex (yr, yi), ierr);
     }
+  else if (is_integer_value (alpha))
+    {
+      // zbesy can overflow as z->0, and cause troubles for generic case below
+      alpha = -alpha;
+      Complex tmp = zbesj (z, alpha, kode, ierr);
+      if ((static_cast <long> (alpha)) & 1) 
+	tmp = - tmp;
+      retval = bessel_return_value (tmp, ierr);
+    }
   else
     {
       alpha = -alpha;
 
       Complex tmp = cos (M_PI * alpha) * zbesj (z, alpha, kode, ierr);
 
       if (ierr == 0 || ierr == 3)
 	{
@@ -308,16 +323,25 @@ zbesy (const Complex& z, double alpha, i
 	    }
 
 	  if (zi == 0.0 && zr >= 0.0)
 	    yi = 0.0;
 	}
 
       return bessel_return_value (Complex (yr, yi), ierr);
     }
+  else if (is_integer_value (alpha - 0.5))
+    {
+      // zbesy can overflow as z->0, and cause troubles for generic case below
+      alpha = -alpha;
+      Complex tmp = zbesj (z, alpha, kode, ierr);
+      if ((static_cast <long> (alpha - 0.5)) & 1) 
+	tmp = - tmp;
+      retval = bessel_return_value (tmp, ierr);
+    }
   else
     {
       alpha = -alpha;
 
       Complex tmp = cos (M_PI * alpha) * zbesy (z, alpha, kode, ierr);
 
       if (ierr == 0 || ierr == 3)
 	{
@@ -364,18 +388,19 @@ zbesi (const Complex& z, double alpha, i
   else
     {
       alpha = -alpha;
 
       Complex tmp = zbesi (z, alpha, kode, ierr);
 
       if (ierr == 0 || ierr == 3)
 	{
-	  tmp += (2.0 / M_PI) * sin (M_PI * alpha)
-	    * zbesk (z, alpha, kode, ierr);
+	  if (! is_integer_value (alpha - 0.5))
+	    tmp += (2.0 / M_PI) * sin (M_PI * alpha)
+	      * zbesk (z, alpha, kode, ierr);
 
 	  retval = bessel_return_value (tmp, ierr);
 	}
       else
 	retval = Complex (octave_NaN, octave_NaN);
     }
 
   return retval;
diff --git a/liboctave/oct-sort.h b/liboctave/oct-sort.h
--- a/liboctave/oct-sort.h
+++ b/liboctave/oct-sort.h
@@ -81,17 +81,16 @@ The Python license is
 
 #if !defined (octave_sort_h)
 #define octave_sort_h 1
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include "oct-obj.h"
 #include "lo-mappers.h"
 #include "quit.h"
 
 /* The maximum number of entries in a MergeState's pending-runs stack.
  * This is enough to sort arrays of size up to about
  *     32 * phi ** MAX_MERGE_PENDING
  * where phi ~= 1.618.  85 is ridiculously large enough, good for an array
  * with 2**64 elements.
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,27 @@
+2004-07-22  Etienne Grossmann  <etienne@cs.uky.edu>
+
+	* general/sub2ind.m: Make reshaping index list unnecessary.
+
+2004-07-22  Paul Kienzle  <pkienzle@users.sf.net>
+
+	* miscellaneous/unix.m: Fix doc string.
+
+2004-07-22  Stefan van der Walt  <stefan@sun.ac.za>
+
+	* plot/figure.m: Clarification of documentation.
+
+	* image/imshow.m: Warn for complex images.
+	Only estimate colourmap for images in [0, 65536].
+
+2004-07-22  David Bateman  <dbateman@free.fr>
+
+	* general/num2str.m: Fix the case of an all zero input.
+
 2004-06-22  Etienne Grossmann  <etienne@cs.uky.edu>
 
 	* general/ind2sub.m: Doc fix.
 
 2004-06-08  John W. Eaton  <jwe@octave.org>
 
 	* statistics/tests/kolmogorov_smirnov_test.m: Use func2str to
 	convert function handle to string for eval.
diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -102,17 +102,21 @@ function retval = num2str (x, arg)
     if (nargin == 2)
       if (isstr (arg))
 	fmt = arg;
       else
 	fmt = sprintf ("%%.%dg", arg);
       endif
     else
       if (isnumeric (x) && round (x) == x && abs (x) < 1e10)
-	dgt = ceil(log10(max(abs(x(:)))))+ (min (real (x(:))) < 0);
+	if (max(abs(x(:))) == 0)
+	  dgt = 1;
+	else
+	  dgt = floor(log10(max(abs(x(:))))) + (min (real (x(:))) < 0) + 1;
+	endif
 	fmt = sprintf("%%%dd  ",dgt);
       elseif (isscalar (x))
 	fmt = "%.4g";
       else
 	fmt = "%11.4g";
       endif
     endif
     fmt = strcat (deblank (repmat (fmt, 1, columns (x))), "\n");
diff --git a/scripts/general/sub2ind.m b/scripts/general/sub2ind.m
--- a/scripts/general/sub2ind.m
+++ b/scripts/general/sub2ind.m
@@ -41,19 +41,19 @@ function ind = sub2ind (dims, varargin)
 	if (isnumeric (arg) && round (arg) == arg)
 	  if (i == 1)
 	    if (arg > 0 & arg <= dims(i))
 	      ind = first_arg = arg;
 	    else
 	      error ("sub2ind: index out of range");
 	    endif
 	  else
-	    if (all (size (first_arg) == size (arg)))
+            if (prod (size (first_arg)) == prod (size (arg)))
 	      if ((i > nd && arg == 1) || (arg > 0 & arg <= dims(i)))
-		ind += scale(i-1) * (arg - 1);
+		ind(:) += scale(i-1) * (arg(:) - 1);
 	      else
 		error ("sub2ind: index out of range");
 	      endif
 	    else
 	      error ("sub2ind: all index arguments must be the same size");
 	    endif
 	  endif
 	else
diff --git a/scripts/image/imshow.m b/scripts/image/imshow.m
--- a/scripts/image/imshow.m
+++ b/scripts/image/imshow.m
@@ -63,40 +63,53 @@ function imshow (varargin)
   if (mvars < 1 || mvars > 3)
     usage (usage_str);
   endif
   
   ## All except imshow (r, g, b)
 
   if (mvars != 3)
     I = varargin{1};
-    if (max (varargin{1}(:)) <= 1)
+    if iscomplex (I)
+	warning("imshow: displaying real part of complex image");
+	I = real (I);
+    endif      
+    if (max (I(:)) <= 1)
       # image in [0-1]; scale to [0-255]
       I = I * 255;
       M = gray (256);
     endif
   endif
 
   if (mvars == 1)
     ## imshow (x)
     ## Grayscale image [0-N] -- estimate gray levels.
     N = 2^ceil (log2 (max(I(:))));
-    M = gray (N);
+    if (N <= 65536)
+      M = gray (N);
+    else
+      M = gray (256);
+      I = I / max (I(:)) * 255;
+    endif
   elseif (mvars == 2)
     ## imshow (x, map) or imshow (x, N)
     M = varargin{2};
     if (isscalar (M))
       M = gray (M);
     endif
   elseif (mvars == 3)
     ## imshow (r, g, b)
     r = varargin{1};
     g = varargin{2};
     b = varargin{3};
     tmp = [r; g; b];
+    if iscomplex (tmp)
+	warning("imshow: displaying real part of complex rgb image");
+	r = real (r); g = real (g); b = real (b);
+    endif    
     if (max (tmp(:)) > 1)
       ## Normalise to [0-1].
       r = r/255;
       g = g/255;
       b = b/255;
     endif
     [I, M] = rgb2ind (r, g, b);
   endif
diff --git a/scripts/miscellaneous/unix.m b/scripts/miscellaneous/unix.m
--- a/scripts/miscellaneous/unix.m
+++ b/scripts/miscellaneous/unix.m
@@ -13,23 +13,25 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{status}, @var{text}]} isunix (@var{command})
-## @deftypefnx {Function File} {[@var{status}, @var{text}]} isunix (@var{command}, "-echo")
+## @deftypefn {Function File} {[@var{status}, @var{text}]} unix (@var{command})
+## @deftypefnx {Function File} {[@var{status}, @var{text}]} unix (@var{command}, "-echo")
 ## Execute a system command if running under a Unix-like operating
 ## system, otherwise do nothing.  Return the exit status of the program
 ## in @var{status} and any output sent to the standard output in
 ## @var{text}.  If the optional second argument @code{"-echo"} is given,
 ## then also send the output from the command to the standard output.
+## @end deftypefn
+## @seealso{isunix, ispc, system}
 
 ## Author: octave-forge ???
 ## Adapted by: jwe
 
 function [status, text] = unix (cmd, echo_arg)
 
   if (nargin < 1 || nargin > 2)
     usage ( "[status, text] = unix (cmd, '-echo')");
diff --git a/scripts/plot/figure.m b/scripts/plot/figure.m
--- a/scripts/plot/figure.m
+++ b/scripts/plot/figure.m
@@ -16,17 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} figure (@var{n})
 ## Set the current plot window to plot window @var{n}.  This function
 ## currently requires X11 and a version of gnuplot that supports multiple
-## frames.
+## frames. If N is not specified, the next available window number is
+## chosen.
 ## @end deftypefn
 
 ## Author: jwe
 
 function f = figure (n)
 
   static figure_list = create_set (0);
   static figure_called = 0;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,31 @@
+2004-07-22  Paul Kienzle  <pkienzle@users.sf.net>
+
+	* DLD-FUNCTIONS/dassl.cc (Fdassl): Fix doc string.
+	* ov-struct.cc (Fstruct): Likewise.
+	* symtab.cc (Fdebug_symtab_lookups): Likewise.
+
+2004-07-22  David Bateman  <dbateman@free.fr>
+
+	* data.cc (Fsize): Return 1 for dimensions exceeding ndim.
+
+	* ov.cc (octave_value::octave_value (const ArrayN<double>)):
+	New constructor.
+	* ov.h: Provide decl.
+	* ov-cx-mat.h (octave_complex_matrix (const ArrayN<Complex>&)):
+	New constructor.
+	* ov-re-mat.h (octave_complex_matrix (const ArrayN<double>&)):
+	New constructor.
+
+	* ov-re-mat.h (octave_matrix(const ArrayN<double>&)): New constructor
+	* pt-loop.cc (DO_ND_LOOP): New macro for use of NDArray in for loop.
+	(tree_simple_for_command::eval): Use it, and allow iteration over
+	cell arrays.
+
 2004-07-12  John W. Eaton  <jwe@octave.org>
 
 	* ov-intx.h: N-d array and scalar extractor functions take no args.
 
 	* ov.h (octave_value::int8_scalar_value,
 	octave_value::int16_scalar_value, octave_value::int32_scalar_value,
 	octave_value::int64_scalar_value, octave_value::uint8_scalar_value,
 	octave_value::uint16_scalar_value, octave_value::uint32_scalar_value,
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1231,18 +1231,23 @@ returns the number of columns in the giv
       int nd = args(1).int_value (true);
 
       if (error_state)
 	error ("size: expecting scalar as second argument");
       else
 	{
 	  dim_vector dv = args(0).dims ();
 
-	  if (nd > 0 && nd <= dv.length ())
-	    retval(0) = dv(nd-1);
+	  if (nd > 0)
+	    {
+	      if (nd <= dv.length ())
+		retval(0) = dv(nd-1);
+	      else 
+		retval(0) = 1;
+	    }
 	  else
 	    error ("size: requested dimension (= %d) out of range", nd);
 	}
     }
   else
     print_usage ("size");
 
   return retval;
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -57,16 +57,19 @@ public:
     : octave_base_matrix<ComplexNDArray> () { }
 
   octave_complex_matrix (const ComplexNDArray& m)
     : octave_base_matrix<ComplexNDArray> (m) { }
 
   octave_complex_matrix (const ComplexMatrix& m)
     : octave_base_matrix<ComplexNDArray> (m) { }
 
+  octave_complex_matrix (const ArrayN<Complex>& m)
+    : octave_base_matrix<ComplexNDArray> (ComplexNDArray (m)) { }
+
   octave_complex_matrix (const ComplexDiagMatrix& d)
     : octave_base_matrix<ComplexNDArray> (ComplexMatrix (d)) { }
 
   octave_complex_matrix (const ComplexRowVector& v)
     : octave_base_matrix<ComplexNDArray> (ComplexMatrix (v)) { }
 
   octave_complex_matrix (const ComplexColumnVector& v)
     : octave_base_matrix<ComplexNDArray> (ComplexMatrix (v)) { }
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -58,16 +58,19 @@ public:
     : octave_base_matrix<NDArray> () { }
 
   octave_matrix (const Matrix& m)
     : octave_base_matrix<NDArray> (m) { }
 
   octave_matrix (const NDArray& nda)
     : octave_base_matrix<NDArray> (nda) { }
 
+  octave_matrix (const ArrayN<double>& m)
+    : octave_base_matrix<NDArray> (NDArray (m)) { }
+
   octave_matrix (const DiagMatrix& d)
     : octave_base_matrix<NDArray> (Matrix (d)) { }
 
   octave_matrix (const RowVector& v)
     : octave_base_matrix<NDArray> (Matrix (v)) { }
 
   octave_matrix (const ColumnVector& v)
     : octave_base_matrix<NDArray> (Matrix (v)) { }
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -505,17 +505,18 @@ DEFUN (struct, args, ,
 @deftypefn {Built-in Function} {} struct (\"field\", @var{value}, \"field\", @var{value}, @dots{})\n\
 \n\
 Create a structure and initialize its value.\n\
 \n\
 If the values are cell arrays, create a structure array and initialize\n\
 its values.  The dimensions of each cell array of values must match.\n\
 Singleton cells and non-cell values are repeated so that they fill\n\
 the entire array.  If the cells are empty, create an empty structure\n\
-array with the specified field names.")
+array with the specified field names.\n\
+@end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   // struct([]) returns an empty struct.
   // XXX FIXME XXX should struct() also create an empty struct?
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -442,16 +442,23 @@ octave_value::octave_value (const Matrix
 
 octave_value::octave_value (const NDArray& a)
   : rep (new octave_matrix (a))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
+octave_value::octave_value (const ArrayN<double>& a)
+  : rep (new octave_matrix (a))
+{
+  rep->count = 1;
+  maybe_mutate ();
+}
+
 octave_value::octave_value (const DiagMatrix& d)
   : rep (new octave_matrix (d))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
 octave_value::octave_value (const RowVector& v)
@@ -484,16 +491,23 @@ octave_value::octave_value (const Comple
 
 octave_value::octave_value (const ComplexNDArray& a)
   : rep (new octave_complex_matrix (a))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
+octave_value::octave_value (const ArrayN<Complex>& a)
+  : rep (new octave_complex_matrix (a))
+{
+  rep->count = 1;
+  maybe_mutate ();
+}
+
 octave_value::octave_value (const ComplexDiagMatrix& d)
   : rep (new octave_complex_matrix (d))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
 octave_value::octave_value (const ComplexRowVector& v)
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -188,16 +188,17 @@ public:
 #endif
 
   octave_value (octave_time t);
   octave_value (double d);
   octave_value (const ArrayN<octave_value>& a, bool is_cs_list = false);
   octave_value (const Cell& c, bool is_cs_list = false);
   octave_value (const Matrix& m);
   octave_value (const NDArray& nda);
+  octave_value (const ArrayN<double>& m);
   octave_value (const DiagMatrix& d);
   octave_value (const RowVector& v);
   octave_value (const ColumnVector& v);
   octave_value (const Complex& C);
   octave_value (const ComplexMatrix& m);
   octave_value (const ComplexNDArray& cnda);
   octave_value (const ArrayN<Complex>& m);
   octave_value (const ComplexDiagMatrix& d);
diff --git a/src/pt-loop.cc b/src/pt-loop.cc
--- a/src/pt-loop.cc
+++ b/src/pt-loop.cc
@@ -236,16 +236,51 @@ tree_simple_for_command::do_for_loop_onc
 	  do_for_loop_once (ult, val, quit); \
  \
 	  if (quit) \
 	    break; \
 	} \
     } \
   while (0)
 
+#define DO_ND_LOOP(arg) \
+  do \
+    { \
+      int ndims = dv.length (); \
+      Array<idx_vector> idx; \
+      int steps = dv.numel () / dv (0);	\
+      idx.resize (ndims, idx_vector (1)); \
+      idx (0) = idx_vector (':'); \
+ \
+      for (int i = 0; i < steps; i++) \
+	{ \
+	  MAYBE_DO_BREAKPOINT; \
+ \
+	  octave_value val (arg.index(idx));	\
+ \
+	  bool quit = false; \
+ \
+	  do_for_loop_once (ult, val, quit); \
+	  quit = (i == steps - 1 ? true : quit); \
+ \
+	  if (quit) \
+	    break; \
+ \
+	  for (int j = 1; j < ndims; j++) \
+	    { \
+	      idx(j) = idx_vector (idx(j)(0) + 2);	\
+	      if (idx(j)(0) < dv(j))			\
+		break; \
+	      else \
+		idx(j) = idx_vector (1);	\
+	    } \
+	} \
+    } \
+  while (0)
+
 void
 tree_simple_for_command::eval (void)
 {
   if (error_state)
     return;
 
   unwind_protect::begin_frame ("simple_for_command::eval");
 
@@ -327,52 +362,38 @@ tree_simple_for_command::eval (void)
 
 		if (quit)
 		  break;
 	      }
 	  }
       }
     else if (rhs.is_matrix_type ())
       {
-	Matrix m_tmp;
-	ComplexMatrix cm_tmp;
-
-	int nr;
-	int steps;
+	NDArray m_tmp;
+	ComplexNDArray cm_tmp;
+	dim_vector dv;
 
 	if (rhs.is_real_type ())
 	  {
-	    m_tmp = rhs.matrix_value ();
-	    nr = m_tmp.rows ();
-	    steps = m_tmp.columns ();
+	    m_tmp = rhs.array_value ();
+	    dv = m_tmp.dims ();
 	  }
 	else
 	  {
-	    cm_tmp = rhs.complex_matrix_value ();
-	    nr = cm_tmp.rows ();
-	    steps = cm_tmp.columns ();
+	    cm_tmp = rhs.complex_array_value ();
+	    dv = cm_tmp.dims ();
 	  }
 
 	if (error_state)
 	  goto cleanup;
 
 	if (rhs.is_real_type ())
-	  {
-	    if (nr == 1)
-	      DO_LOOP (m_tmp (0, i));
-	    else
-	      DO_LOOP (m_tmp.extract (0, i, nr-1, i));
-	  }
+	  DO_ND_LOOP(m_tmp);
 	else
-	  {
-	    if (nr == 1)
-	      DO_LOOP (cm_tmp (0, i));
-	    else
-	      DO_LOOP (cm_tmp.extract (0, i, nr-1, i));
-	  }
+	  DO_ND_LOOP(cm_tmp);
       }
     else if (rhs.is_map ())
       {
 	Octave_map tmp_val (rhs.map_value ());
 
 	for (Octave_map::iterator p = tmp_val.begin ();
 	     p != tmp_val.end ();
 	     p++)
@@ -387,16 +408,22 @@ tree_simple_for_command::eval (void)
 	    bool quit = false;
 
 	    do_for_loop_once (ult, val, quit);
 
 	    if (quit)
 	      break;
 	  }
       }
+    else if (rhs.is_cell ())
+      {
+	Cell c_tmp = rhs.cell_value ();
+	dim_vector dv = c_tmp.dims ();
+	DO_ND_LOOP(c_tmp);
+      }
     else
       {
 	::error ("invalid type in for loop expression near line %d, column %d",
 		 line (), column ());
       }
   }
 
  cleanup:
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -1117,17 +1117,18 @@ If the value of this variable is nonzero
 hide previously defined functions of the same name.  A negative value\n\
 will cause Octave to print a warning, but allow the operation.\n\
 @end defvr");
 
   DEFVAR (debug_symtab_lookups, false, debug_symtab_lookups,
     "-*- texinfo -*-\n\
 @defvr debug_symtab_lookups\n\
 If the value of htis variable is nonzero, print debugging info when\n\
-searching for symbols in the symbol tables");
+searching for symbols in the symbol tables.\n\
+@end defvr");
 }
 
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
