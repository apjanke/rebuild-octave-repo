# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1237752855 25200
#      Sun Mar 22 13:14:15 2009 -0700
# Node ID 51dc9691f23f11f6fd9f62cac074bd267cff812b
# Parent  fca0dc2fb0420e214dbbfd836abf3daf4e9fc378
Cleanup documentation files errors.texi, debug.texi, io.texi

Spellcheck
Stylecheck

diff --git a/doc/interpreter/debug.txi b/doc/interpreter/debug.txi
--- a/doc/interpreter/debug.txi
+++ b/doc/interpreter/debug.txi
@@ -15,18 +15,18 @@
 @c You should have received a copy of the GNU General Public License
 @c along with Octave; see the file COPYING.  If not, see
 @c <http://www.gnu.org/licenses/>.
 
 @node Debugging
 @chapter Debugging
 
 Octave includes a built-in debugger to aid in the development of
-scripts. This can be used to interrupt the execution of an Octave script
-at a certain point, or when certain conditions are met. Once execution
+scripts.  This can be used to interrupt the execution of an Octave script
+at a certain point, or when certain conditions are met.  Once execution
 has stopped, and debug mode is entered, the symbol table at the point
 where execution has stopped can be examined and modified to check for
 errors.
 
 The normal command-line editing and history functions are available in
 debug mode.
 
 @menu
@@ -36,17 +36,17 @@ debug mode.
 * Debug Mode::
 * Call Stack::
 @end menu
 
 @node Entering Debug Mode
 @section Entering Debug Mode
 
 There are two basic means of interrupting the execution of an Octave
-script. These are breakpoints @pxref{Breakpoints}, discussed in the next
+script.  These are breakpoints @pxref{Breakpoints}, discussed in the next
 section and interruption based on some condition.
 
 Octave supports three means to stop execution based on the values set in
 the functions @code{debug_on_interrupt}, @code{debug_on_warning} and
 @code{debug_on_error}.
 
 @DOCSTRING(debug_on_interrupt)
 
@@ -75,21 +75,21 @@ result in Octave terminating normally.
 
 Breakpoints can be set in any Octave function, using the @code{dbstop}
 function.
 
 @DOCSTRING(dbstop)
 
 @noindent
 Note that breakpoints cannot be set in built-in functions
-(eg. @code{sin}, etc) or dynamically loaded function (ie. oct-files). To
+(e.g., @code{sin}, etc) or dynamically loaded function (i.e., oct-files).  To
 set a breakpoint immediately on entering a function, the breakpoint
 should be set to line 1. The leading comment block will be ignored and
 the breakpoint will be set to the first executable statement in the
-function. For example
+function.  For example
 
 @example
 @group
 dbstop ("asind", 1)
 @result{} 27
 @end group
 @end example
 
@@ -108,17 +108,17 @@ 27. The breakpoints can then be cleared 
 
 @noindent
 These functions can be used to clear all the breakpoints in a function.  For example,
 
 @example
 dbclear ("asind", dbstatus ("asind"));
 @end example
 
-A breakpoint can be set in a subfunction. For example if a file contains
+A breakpoint can be set in a subfunction.  For example if a file contains
 the functions
 
 @example
 function y = func1 (x)
   y = func2 (x);
 endfunction
 function y = func2 (x)
   y = x + 1;
@@ -141,17 +141,17 @@ subfunctions from the file containing th
 
 Another simple way of setting a breakpoint in an Octave script is the
 use of the @code{keyboard} function.
 
 @DOCSTRING(keyboard)
 
 @noindent
 The @code{keyboard} function is typically placed in a script at the
-point where the user desires that the execution is stopped. It
+point where the user desires that the execution is stopped.  It
 automatically sets the running script into the debug mode.
 
 @node Debug Mode
 @section Debug Mode
 
 There are two additional support functions that allow the user to
 interrogate where in the execution of a script Octave entered the debug
 mode and to print the code in the script surrounding the point where
diff --git a/doc/interpreter/errors.txi b/doc/interpreter/errors.txi
--- a/doc/interpreter/errors.txi
+++ b/doc/interpreter/errors.txi
@@ -100,17 +100,17 @@ When it is called with no input argument
 error.
 
 @example
 f ()
 
 Invalid call to f.  Correct usage is:
 
      @print{}  -- Function File: f (ARG1)
-     @print{}      Function help text goes here...
+     @print{}      Function help text goes here@dots{}
      @print{} 
      @print{} 
      @print{} 
      @print{} error: called from:
      @print{} error:   print_usage at line -1, column -1
      @print{} error:   /home/jwe/octave/f.m at line 7, column 5
 @end example
 
@@ -186,17 +186,17 @@ for n = 1:100
       rethrow (lasterror);
     endif
   end_try_catch
 endfor
 @end example
 
 @DOCSTRING(rethrow)
 
-@c XXX: I have no idea what the rest of the functions are used for...
+@c FIXME: I have no idea what the rest of the functions are used for...
 
 @DOCSTRING(errno)
 
 @DOCSTRING(errno_list)
 
 @node Handling Warnings
 @section Handling Warnings
 
@@ -216,28 +216,28 @@ a = 1/0
 * Issuing Warnings::
 * Enabling and Disabling Warnings::
 @end menu
 
 @node Issuing Warnings
 @subsection Issuing Warnings
 
 It is possible to issue warnings from any code using the @code{warning}
-function. In its most simple form, the @code{warning} function takes a
-string describing the warning as its input argument. As an example,
+function.  In its most simple form, the @code{warning} function takes a
+string describing the warning as its input argument.  As an example,
 the following code controls if the variable @samp{a} is non-negative,
 and if not issues a warning and sets @samp{a} to zero.
 
 @example
 a = -1;
 if (a < 0)
-  warning ("'a' must be non-negative. Setting 'a' to zero.");
+  warning ("'a' must be non-negative.  Setting 'a' to zero.");
   a = 0;
 endif
-     @print{} 'a' must be non-negative. Setting 'a' to zero.
+     @print{} 'a' must be non-negative.  Setting 'a' to zero.
 @end example
 
 Since warnings aren't fatal to a running program, it is not possible
 to catch a warning using the @code{try} statement or something similar.
 It is however possible to access the last warning as a string using the
 @code{lastwarn} function.
 
 It is also possible to assign an identification string to a warning.
@@ -258,26 +258,26 @@ are actually printed to the screen.  If 
 is called with a string argument that is either @code{"on"} or @code{"off"}
 all warnings will be enabled or disabled.
 
 It is also possible to enable and disable individual warnings through
 their string identifications.  The following code will issue a warning
 
 @example
 warning ("non-negative-variable", 
-         "'a' must be non-negative. Setting 'a' to zero.");
+         "'a' must be non-negative.  Setting 'a' to zero.");
 @end example
 
 @noindent
 while the following won't issue a warning
 
 @example
 warning ("off", "non-negative-variable");
 warning ("non-negative-variable", 
-         "'a' must be non-negative. Setting 'a' to zero.");
+         "'a' must be non-negative.  Setting 'a' to zero.");
 @end example
 
 The functions distributed with Octave can issue one of the following
 warnings.
 
 @DOCSTRING(warning_ids)
 
 
diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -216,17 +216,17 @@ separated lists.
 @end menu
 
 @node Saving Data on Unexpected Exits
 @subsubsection Saving Data on Unexpected Exits
 
 If Octave for some reason exits unexpectedly it will by default save the
 variables available in the workspace to a file in the current directory.
 By default this file is named @samp{octave-core} and can be loaded
-into memory with the @code{load} command.  While the default behaviour
+into memory with the @code{load} command.  While the default behavior
 most often is reasonable it can be changed through the following
 functions.
 
 @DOCSTRING(crash_dumps_octave_core)
 
 @DOCSTRING(sighup_dumps_octave_core)
 
 @DOCSTRING(sigterm_dumps_octave_core)
@@ -297,17 +297,17 @@ pointer to an open file that is ready to
 data has been read from or written to the opened file it should be closed.
 The @code{fclose} function does this.  The following code illustrates
 the basic pattern for writing to a file, but a very similar pattern is
 used when reading a file.
 
 @example
 filename = "myfile.txt";
 fid = fopen (filename, "w");
-# Do the actual I/O here...
+# Do the actual I/O here@dots{}
 fclose (fid);
 @end example
 
 @DOCSTRING(fopen)
 
 @DOCSTRING(fclose)
 
 @node Simple Output
diff --git a/scripts/general/rat.m b/scripts/general/rat.m
--- a/scripts/general/rat.m
+++ b/scripts/general/rat.m
@@ -15,18 +15,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{s} =} rat (@var{x}, @var{tol})
 ## @deftypefnx {Function File} {[@var{n}, @var{d}] =} rat (@var{x}, @var{tol})
 ##
-## Find a rational approximation to @var{x} within tolerance defined
-## by @var{tol} using a continued fraction expansion. E.g,
+## Find a rational approximation to @var{x} within the tolerance defined
+## by @var{tol} using a continued fraction expansion.  For example,
 ##
 ## @example
 ## rat(pi) = 3 + 1/(7 + 1/16) = 355/113
 ## rat(e) = 3 + 1/(-4 + 1/(2 + 1/(5 + 1/(-2 + 1/(-7))))) 
 ##        = 1457/536
 ## @end example
 ##
 ## Called with two arguments returns the numerator and denominator separately
diff --git a/scripts/miscellaneous/warning_ids.m b/scripts/miscellaneous/warning_ids.m
--- a/scripts/miscellaneous/warning_ids.m
+++ b/scripts/miscellaneous/warning_ids.m
@@ -31,62 +31,62 @@
 ## disabled.
 ## 
 ## @item Octave:assign-as-truth-value
 ## If the @code{Octave:assign-as-truth-value} warning is
 ## enabled, a warning is issued for statements like
 ## 
 ## @example
 ## if (s = t)
-##   ...
+##   @dots{}
 ## @end example
 ## 
 ## @noindent
 ## since such statements are not common, and it is likely that the intent
 ## was to write
 ## 
 ## @example
 ## if (s == t)
-##   ...
+##   @dots{}
 ## @end example
 ## 
 ## @noindent
 ## instead.
 ## 
 ## There are times when it is useful to write code that contains
 ## assignments within the condition of a @code{while} or @code{if}
 ## statement.  For example, statements like
 ## 
 ## @example
 ## while (c = getc())
-##   ...
+##   @dots{}
 ## @end example
 ## 
 ## @noindent
 ## are common in C programming.
 ## 
 ## It is possible to avoid all warnings about such statements by
 ## disabling the @code{Octave:assign-as-truth-value} warning,
 ## but that may also let real errors like
 ## 
 ## @example
 ## if (x = 1)  # intended to test (x == 1)!
-##   ...
+##   @dots{}
 ## @end example
 ## 
 ## @noindent
 ## slip by.
 ## 
 ## In such cases, it is possible suppress errors for specific statements by
 ## writing them with an extra set of parentheses.  For example, writing the
 ## previous example as
 ## 
 ## @example
 ## while ((c = getc()))
-##   ...
+##   @dots{}
 ## @end example
 ## 
 ## @noindent
 ## will prevent the warning from being printed for this statement, while
 ## allowing Octave to warn about other assignments used in conditional
 ## contexts.
 ## 
 ## By default, the @code{Octave:assign-as-truth-value} warning is enabled.
diff --git a/src/DLD-FUNCTIONS/dlmread.cc b/src/DLD-FUNCTIONS/dlmread.cc
--- a/src/DLD-FUNCTIONS/dlmread.cc
+++ b/src/DLD-FUNCTIONS/dlmread.cc
@@ -149,27 +149,27 @@ parse_range_spec (const octave_value& ra
 }
 
 DEFUN_DLD (dlmread, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{data} =} dlmread (@var{file})\n\
 @deftypefnx {Loadable Function} {@var{data} =} dlmread (@var{file}, @var{sep})\n\
 @deftypefnx {Loadable Function} {@var{data} =} dlmread (@var{file}, @var{sep}, @var{r0}, @var{c0})\n\
 @deftypefnx {Loadable Function} {@var{data} =} dlmread (@var{file}, @var{sep}, @var{range})\n\
-Read the matrix @var{data} from a text file. If not defined the separator\n\
-between fields is determined from the file itself. Otherwise the\n\
+Read the matrix @var{data} from a text file.  If not defined the separator\n\
+between fields is determined from the file itself.  Otherwise the\n\
 separation character is defined by @var{sep}.\n\
 \n\
 Given two scalar arguments @var{r0} and @var{c0}, these define the starting\n\
-row and column of the data to be read. These values are indexed from zero,\n\
+row and column of the data to be read.  These values are indexed from zero,\n\
 such that the first row corresponds to an index of zero.\n\
 \n\
 The @var{range} parameter must be a 4 element vector containing  the upper\n\
 left and lower right corner @code{[@var{R0},@var{C0},@var{R1},@var{C1}]} or\n\
-a spreadsheet style range such as 'A2..Q15'. The lowest index value is zero.\n\
+a spreadsheet style range such as 'A2..Q15'.  The lowest index value is zero.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 4) 
     {
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -494,17 +494,17 @@ DEFUN (dbstop, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{rline} =} dbstop (@var{func}, @var{line}, @dots{})\n\
 Set a breakpoint in a function\n\
 @table @code\n\
 @item func\n\
 String representing the function name.  When already in debug\n\
 mode this should be left out and only the line should be given.\n\
 @item line\n\
-Line number you would like the breakpoint to be set on. Multiple\n\
+Line number you would like the breakpoint to be set on.  Multiple\n\
 lines might be given as separate arguments or as a vector.\n\
 @end table\n\
 \n\
 The rline returned is the real line that the breakpoint was set at.\n\
 @seealso{dbclear, dbstatus, dbstep}\n\
 @end deftypefn")
 {
   bp_table::intmap retval;
@@ -526,21 +526,21 @@ DEFUN (dbclear, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} dbclear (@var{func}, @var{line}, @dots{})\n\
 Delete a breakpoint in a function\n\
 @table @code\n\
 @item func\n\
 String representing the function name.  When already in debug\n\
 mode this should be left out and only the line should be given.\n\
 @item line\n\
-Line number where you would like to remove the breakpoint. Multiple\n\
+Line number where you would like to remove the breakpoint.  Multiple\n\
 lines might be given as separate arguments or as a vector.\n\
 @end table\n\
 No checking is done to make sure that the line you requested is really\n\
-a breakpoint. If you get the wrong line nothing will happen.\n\
+a breakpoint.  If you get the wrong line nothing will happen.\n\
 @seealso{dbstop, dbstatus, dbwhere}\n\
 @end deftypefn")
 {
   octave_value retval;
   std::string symbol_name = "";
   bp_table::intmap lines;
 
   parse_dbfunction_params ("dbclear", args, symbol_name, lines);
@@ -989,22 +989,22 @@ If @var{n} is omitted, move down one fra
   return retval;
 }
 
 DEFUN (dbstep, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Command} {} dbstep @var{n}\n\
 @deftypefnx {Command} {} dbstep in\n\
 @deftypefnx {Command} {} dbstep out\n\
-In debugging mode, execute the next @var{n} lines of code. If @var{n} is\n\
-omitted execute the next line of code. If the next line of code is itself\n\
+In debugging mode, execute the next @var{n} lines of code.  If @var{n} is\n\
+omitted execute the next line of code.  If the next line of code is itself\n\
 defined in terms of an m-file remain in the existing function.\n\
 \n\
 Using @code{dbstep in} will cause execution of the next line to step into\n\
-any m-files defined on the next line. Using @code{dbstep out} with cause\n\
+any m-files defined on the next line.  Using @code{dbstep out} with cause\n\
 execution to continue until the current function returns.\n\
 @seealso{dbcont, dbquit}\n\
 @end deftypefn")
 {
   if (Vdebugging)
     {
       int nargin = args.length ();
       
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -775,20 +775,20 @@ handle_message (error_fun f, const char 
     }
 
   return retval;
 }
 
 DEFUN (rethrow, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} rethrow (@var{err})\n\
-Reissues a previous error as defined by @var{err}. @var{err} is a structure\n\
-that must contain at least the 'message' and 'identifier' fields. @var{err}\n\
+Reissues a previous error as defined by @var{err}.  @var{err} is a structure\n\
+that must contain at least the 'message' and 'identifier' fields.  @var{err}\n\
 can also contain a field 'stack' that gives information on the assumed\n\
-location of the error. Typically @var{err} is returned from\n\
+location of the error.  Typically @var{err} is returned from\n\
 @code{lasterror}.\n\
 @seealso{lasterror, lasterr, error}\n\
 @end deftypefn")
 {
   octave_value retval;
   int nargin = args.length();
 
   if (nargin != 1)
@@ -1368,45 +1368,45 @@ initialize_default_warning_state (void)
   disable_warning ("Octave:int-convert-overflow");
   disable_warning ("Octave:int-math-overflow");
 }
 
 DEFUN (lasterror, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{err} =} lasterror (@var{err})\n\
 @deftypefnx {Built-in Function} {} lasterror ('reset')\n\
-Returns or sets the last error message. Called without any arguments\n\
+Returns or sets the last error message.  Called without any arguments\n\
 returns a structure containing the last error message, as well as other\n\
-information related to this error. The elements of this structure are:\n\
+information related to this error.  The elements of this structure are:\n\
 \n\
 @table @asis\n\
 @item 'message'\n\
 The text of the last error message\n\
 @item 'identifier'\n\
 The message identifier of this error message\n\
 @item 'stack'\n\
-A structure containing information on where the message occurred. This might\n\
+A structure containing information on where the message occurred.  This might\n\
 be an empty structure if this in the case where this information cannot\n\
-be obtained. The fields of this structure are:\n\
+be obtained.  The fields of this structure are:\n\
 \n\
 @table @asis\n\
 @item 'file'\n\
 The name of the file where the error occurred\n\
 @item 'name'\n\
 The name of function in which the error occurred\n\
 @item 'line'\n\
 The line number at which the error occurred\n\
 @item 'column'\n\
 An optional field with the column number at which the error occurred\n\
 @end table\n\
 @end table\n\
 \n\
 The @var{err} structure may also be passed to @code{lasterror} to set the\n\
-information about the last error. The only constraint on @var{err} in that\n\
-case is that it is a scalar structure. Any fields of @var{err} that match\n\
+information about the last error.  The only constraint on @var{err} in that\n\
+case is that it is a scalar structure.  Any fields of @var{err} that match\n\
 the above are set to the value passed in @var{err}, while other fields are\n\
 set to their default values.\n\
 \n\
 If @code{lasterror} is called with the argument 'reset', all values take\n\
 their default values.\n\
 @end deftypefn")
 {
   octave_value retval;
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -749,17 +749,17 @@ 0 for success, and -1 if an error was en
 DEFUN (fseek, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} fseek (@var{fid}, @var{offset}, @var{origin})\n\
 Set the file pointer to any location within the file @var{fid}.\n\
 \n\
 The pointer is positioned @var{offset} characters from the @var{origin},\n\
 which may be one of the predefined variables @code{SEEK_CUR} (current\n\
 position), @code{SEEK_SET} (beginning), or @code{SEEK_END} (end of\n\
-file) or strings \"cof\", \"bof\" or \"eof\". If @var{origin} is omitted,\n\
+file) or strings \"cof\", \"bof\" or \"eof\".  If @var{origin} is omitted,\n\
 @code{SEEK_SET} is assumed.  The offset must be zero, or a value returned\n\
 by @code{ftell} (in which case @var{origin} must be @code{SEEK_SET}).\n\
 \n\
 Return 0 on success and -1 on error.\n\
 @seealso{ftell, fopen, fclose}\n\
 @end deftypefn")
 {
   octave_value retval = -1;
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -586,17 +586,17 @@ detect the type of file and do conversio
 formats (currently only IEEE big and little endian, though other formats\n\
 may added in the future).\n\
 \n\
 Valid options for @code{load} are listed in the following table.\n\
 \n\
 @table @code\n\
 @item -force\n\
 The @samp{-force} option is accepted but ignored for backward\n\
-compatibility. Octave now overwrites variables currently in memory with\n\
+compatibility.  Octave now overwrites variables currently in memory with\n\
 the same name as those found in the file.\n\
 \n\
 @item -ascii\n\
 Force Octave to assume the file contains columns of numbers in text format\n\
 without any header or other information.  Data in the file will be loaded\n\
 as a single numeric matrix with the name of the variable derived from the\n\
 name of the file.\n\
 \n\
@@ -1508,17 +1508,17 @@ HAVE_HDF5_HELP_STRING
 "\n\
 @item -float-hdf5\n\
 Save the data in HDF5 format but only using single precision.\n\
 You should use this format only if you know that all the\n\
 values to be saved can be represented in single precision.\n\
 \n\
 @item -zip\n\
 @itemx -z\n\
-Use the gzip algorithm to compress the file. This works equally on files that\n\
+Use the gzip algorithm to compress the file.  This works equally on files that\n\
 are compressed with gzip outside of octave, and gzip can equally be used to\n\
 convert the files for backward compatibility.\n"
 
 HAVE_ZLIB_HELP_STRING
 
 "@end table\n\
 \n\
 The list of variables to save may include wildcard patterns containing\n\
@@ -1795,17 +1795,17 @@ The default value is @code{\"octave-core
 
 DEFUN (octave_core_file_options, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{val} =} octave_core_file_options ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} octave_core_file_options (@var{new_val})\n\
 Query or set the internal variable that specifies the options used for\n\
 saving the workspace data if Octave aborts.  The value of\n\
 @code{octave_core_file_options} should follow the same format as the\n\
-options for the @code{save} function. The default value is Octave's binary\n\
+options for the @code{save} function.  The default value is Octave's binary\n\
 format.\n\
 @seealso{crash_dumps_octave_core, octave_core_file_name, octave_core_file_limit}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (octave_core_file_options);
 }
 
 DEFUN (save_header_format_string, args, nargout,
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -3185,17 +3185,17 @@ Convert @var{x} into a rational approxim
 You can convert the string back into a matrix as follows:\n\
 \n\
 @example\n\
    r = rats(hilb(4));\n\
    x = str2num(r)\n\
 @end example\n\
 \n\
 The optional second argument defines the maximum length of the string\n\
-representing the elements of @var{x}. By default @var{len} is 9.\n\
+representing the elements of @var{x}.  By default @var{len} is 9.\n\
 @seealso{format, rat}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2 || nargout > 1)
@@ -3670,17 +3670,17 @@ works for numeric types.\n\
 The same as @code{native-bit}, but always print the most significant\n\
 bits first.\n\
 @item compact\n\
 Remove extra blank space around column number labels.\n\
 @item loose\n\
 Insert blank lines above and below column number labels (this is the\n\
 default).\n\
 @item rat\n\
-Print a rational approximation. That is the values are approximated\n\
+Print a rational approximation.  That is the values are approximated\n\
 by one small integer divided by another.\n\
 @end table\n\
 \n\
 By default, Octave will try to print numbers with at least 5 significant\n\
 figures within a field that is a maximum of 10 characters wide.\n\
 \n\
 If Octave is unable to format a matrix so that columns line up on the\n\
 decimal point and all the numbers fit within the maximum field width,\n\
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -655,17 +655,17 @@ Set the value of the environment variabl
 }
 DEFALIAS (setenv, putenv);
 
 // FIXME -- perhaps kbhit should also be able to print a prompt?
 
 DEFUN (kbhit, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} kbhit ()\n\
-Read a single keystroke from the keyboard. If called with one\n\
+Read a single keystroke from the keyboard.  If called with one\n\
 argument, don't wait for a keypress.  For example,\n\
 \n\
 @example\n\
 x = kbhit ();\n\
 @end example\n\
 \n\
 @noindent\n\
 will set @var{x} to the next character typed at the keyboard as soon as\n\
