# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1258110053 -3600
#      Fri Nov 13 12:00:53 2009 +0100
# Node ID 2b29f3472e2012ca0c1b6ff92a583c80d43f572b
# Parent  8fa32b527d9acc7d3fc02b6d730ae6ab45f808c4
add a couple of useful loops

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-11-13  Jaroslav Hajek  <highegg@gmail.com>
+
+	* mx-inlines.cc (mx_inline_any_nan): Rewrite.
+	(mx_inline_all_real): New reduction loop.
+
 2009-11-12  Jaroslav Hajek  <highegg@gmail.com>
 
 	* lo-mappers.cc ( rc_acos, rc_acos, rc_acosh, rc_acosh, rc_asin,
 	rc_asin, rc_atanh, rc_atanh, rc_log, rc_log, rc_xlog2, rc_log2,
 	rc_log10, rc_log10, rc_sqrt, rc_sqrt): New mappers.
 	* lo-mappers.h: Declare them.
 
 	* lo-specfun.cc (rc_lgamma, rc_lgamma, rc_log1p, rc_log1p): New
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -176,31 +176,39 @@ inline void F (size_t n, bool *r, const 
     r[i] OP logical_value (x[i]); \
 } \
 
 DEFMXBOOLOPEQ (mx_inline_and2, &=)
 DEFMXBOOLOPEQ (mx_inline_or2, |=)
 
 template <class T> 
 inline bool 
-mx_inline_any_nan (size_t, const T*) { return false; }
+mx_inline_any_nan (size_t n, const T* x) 
+{
+  for (size_t i = 0; i < n; i++)
+    {
+      if (xisnan (x[i]))
+        return true;
+    }
 
-#define DEFMXANYNAN(T) \
-inline bool \
-mx_inline_any_nan (size_t n, const T* t) \
-{ \
-  for (size_t i = 0; i < n; i++) \
-    if (xisnan (t[i])) return true; \
-  return false; \
+  return false;
 }
 
-DEFMXANYNAN(double)
-DEFMXANYNAN(float)
-DEFMXANYNAN(Complex)
-DEFMXANYNAN(FloatComplex)
+template<class T>
+inline bool 
+mx_inline_all_real (size_t n, const std::complex<T>* x)
+{
+  for (size_t i = 0; i < n; i++)
+    {
+      if (x[i].imag () != 0)
+        return false;
+    }
+
+  return true;
+}
 
 #define DEFMXMAPPER(F, FUN) \
 template <class T> \
 inline void F (size_t n, T *r, const T *x) \
 { for (size_t i = 0; i < n; i++) r[i] = FUN (x[i]); }
 
 template<class T>
 inline void mx_inline_real (size_t n, T *r, const std::complex<T>* x)
