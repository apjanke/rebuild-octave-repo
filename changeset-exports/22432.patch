# HG changeset patch
# User Rik <rik@octave.org>
# Date 1472845457 25200
#      Fri Sep 02 12:44:17 2016 -0700
# Node ID 1e88747417e6e1e4182d6c101a2db34d5a3a42b7
# Parent  475b4cd1b789904e4ef2a4b8cf0b62a40bfc445f
Allow mixed scalar/array inputs to cart2pol, cart2sph, pol2cart, sph2cart (bug #48950).

* cart2pol.m: Use common_size() to simplify input validation and bring
inputs, including scalars, to a common size.  Don't concatenate z values
into output if z is empty.  Update BIST tests.

* cart2sph.m: Use common_size() to simplify input validation and bring
inputs, including scalars, to a common size.  Add new BIST test.

* pol2cart.m: Use common_size() to simplify input validation and bring
inputs, including scalars, to a common size.  Don't concatenate z values
into output if z is empty.  Update BIST tests.

* sph2cart.m: Use common_size() to simplify input validation and bring
inputs, including scalars, to a common size.  Add new BIST test.

diff --git a/scripts/general/cart2pol.m b/scripts/general/cart2pol.m
--- a/scripts/general/cart2pol.m
+++ b/scripts/general/cart2pol.m
@@ -54,34 +54,42 @@ function [theta, r, z] = cart2pol (x, y,
       error ("cart2pol: matrix input must have 2 or 3 columns [X, Y (, Z)]");
     endif
     if (columns (x) == 3)
       z = x(:,3);
     endif
     y = x(:,2);
     x = x(:,1);
   elseif (nargin == 2)
-    if (! ((isnumeric (x) && isnumeric (y))
-            && (size_equal (x, y) || isscalar (x) || isscalar (y))))
+    if (! isnumeric (x) || ! isnumeric (y))
+      error ("cart2pol: X, Y must be numeric arrays of the same size, or scalar");
+    endif
+    [err, x, y] = common_size (x, y);
+    if (err)
       error ("cart2pol: X, Y must be numeric arrays of the same size, or scalar");
     endif
   elseif (nargin == 3)
-    if (! ((isnumeric (x) && isnumeric (y) && isnumeric (z))
-            && (size_equal (x, y) || isscalar (x) || isscalar (y))
-            && (size_equal (x, z) || isscalar (x) || isscalar (z))
-            && (size_equal (y, z) || isscalar (y) || isscalar (z))))
+    if (! isnumeric (x) || ! isnumeric (y) || ! isnumeric (z))
+      error ("cart2pol: X, Y, Z must be numeric arrays of the same size, or scalar");
+    endif
+    [err, x, y, z] = common_size (x, y, z);
+    if (err)
       error ("cart2pol: X, Y, Z must be numeric arrays of the same size, or scalar");
     endif
   endif
 
   theta = atan2 (y, x);
   r = sqrt (x .^ 2 + y .^ 2);
 
   if (nargout <= 1)
-    theta = [theta(:), r(:), z(:)];
+    if (isempty (z))
+      theta = [theta(:), r(:)];
+    else
+      theta = [theta(:), r(:), z(:)];
+    endif
   endif
 
 endfunction
 
 
 %!test
 %! x = [0, 1, 2];
 %! y = 0;
@@ -98,44 +106,44 @@ endfunction
 
 %!test
 %! x = [0, 1, 2];
 %! y = [0, 1, 2];
 %! z = [0, 1, 2];
 %! [t, r, z2] = cart2pol (x, y, z);
 %! assert (t, [0, pi/4, pi/4], sqrt (eps));
 %! assert (r, sqrt (2)*[0, 1, 2], sqrt (eps));
-%! assert (z, z2);
+%! assert (z2, z);
 
 %!test
 %! x = [0, 1, 2];
 %! y = 0;
 %! z = 0;
 %! [t, r, z2] = cart2pol (x, y, z);
 %! assert (t, [0, 0, 0], eps);
 %! assert (r, x, eps);
-%! assert (z, z2);
+%! assert (z2, [0, 0, 0]);
 
 %!test
 %! x = 0;
 %! y = [0, 1, 2];
 %! z = 0;
 %! [t, r, z2] = cart2pol (x, y, z);
 %! assert (t, [0, 1, 1]*pi/2, eps);
 %! assert (r, y, eps);
-%! assert (z, z2);
+%! assert (z2, [0, 0, 0]);
 
 %!test
 %! x = 0;
 %! y = 0;
 %! z = [0, 1, 2];
 %! [t, r, z2] = cart2pol (x, y, z);
-%! assert (t, 0);
-%! assert (r, 0);
-%! assert (z, z2);
+%! assert (t, [0, 0, 0]);
+%! assert (r, [0, 0, 0]);
+%! assert (z2, z);
 
 %!test
 %! C = [0, 0; 1, 1; 2, 2];
 %! P = [0, 0; pi/4, sqrt(2); pi/4, 2*sqrt(2)];
 %! assert (cart2pol (C), P, sqrt (eps));
 
 %!test
 %! C = [0, 0, 0; 1, 1, 1; 2, 2, 2];
diff --git a/scripts/general/cart2sph.m b/scripts/general/cart2sph.m
--- a/scripts/general/cart2sph.m
+++ b/scripts/general/cart2sph.m
@@ -50,20 +50,21 @@ function [theta, phi, r] = cart2sph (x, 
   if (nargin == 1)
     if (! (isnumeric (x) && ismatrix (x) && columns (x) == 3))
       error ("cart2sph: matrix input must have 3 columns [X, Y, Z]");
     endif
     z = x(:,3);
     y = x(:,2);
     x = x(:,1);
   else
-    if (! ((isnumeric (x) && isnumeric (y) && isnumeric (z))
-            && (size_equal (x, y) || isscalar (x) || isscalar (y))
-            && (size_equal (x, z) || isscalar (x) || isscalar (z))
-            && (size_equal (y, z) || isscalar (y) || isscalar (z))))
+    if (! isnumeric (x) || ! isnumeric (y) || ! isnumeric (z))
+      error ("cart2sph: X, Y, Z must be numeric arrays of the same size, or scalar");
+    endif
+    [err, x, y, z] = common_size (x, y, z);
+    if (err)
       error ("cart2sph: X, Y, Z must be numeric arrays of the same size, or scalar");
     endif
   endif
 
   theta = atan2 (y, x);
   phi = atan2 (z, sqrt (x .^ 2 + y .^ 2));
   r = sqrt (x .^ 2 + y .^ 2 + z .^ 2);
 
@@ -106,16 +107,25 @@ endfunction
 %! y = [0, 1, 2];
 %! z = 0;
 %! [t, p, r] = cart2sph (x, y, z);
 %! assert (t, [0, 1, 1] * pi/4);
 %! assert (p, [0, 0, 0]);
 %! assert (r, [0, 1, 2] * sqrt (2));
 
 %!test
+%! x = 0;
+%! y = 0;
+%! z = [0, 1, 2];
+%! [t, p, r] = cart2sph (x, y, z);
+%! assert (t, [0, 0, 0]);
+%! assert (p, [0, 1, 1] * pi/2);
+%! assert (r, [0, 1, 2]);
+
+%!test
 %! C = [0, 0, 0; 1, 0, 1; 2, 0, 2];
 %! S = [0, 0, 0; 0, pi/4, sqrt(2); 0, pi/4, 2*sqrt(2)];
 %! assert (cart2sph (C), S, eps);
 
 %!test
 %! [x, y, z] = meshgrid ([0, 1], [0, 1], [0, 1]);
 %! [t, p, r] = cart2sph (x, y, z);
 %! T(:, :, 1) = [0, 0; pi/2, pi/4];
diff --git a/scripts/general/pol2cart.m b/scripts/general/pol2cart.m
--- a/scripts/general/pol2cart.m
+++ b/scripts/general/pol2cart.m
@@ -54,34 +54,42 @@ function [x, y, z] = pol2cart (theta, r,
       error ("pol2cart: matrix input must have 2 or 3 columns [THETA, R (, Z)]");
     endif
     if (columns (theta) == 3)
       z = theta(:,3);
     endif
     r = theta(:,2);
     theta = theta(:,1);
   elseif (nargin == 2)
-    if (! ((isnumeric (theta) && isnumeric (r))
-            && (size_equal (theta, r) || isscalar (theta) || isscalar (r))))
+    if (! isnumeric (theta) || ! isnumeric (r))
+      error ("pol2cart: THETA, R must be numeric arrays of the same size, or scalar");
+    endif
+    [err, theta, r] = common_size (theta, r);
+    if (err)
       error ("pol2cart: THETA, R must be numeric arrays of the same size, or scalar");
     endif
   elseif (nargin == 3)
-    if (! ((isnumeric (theta) && isnumeric (r) && isnumeric (z))
-            && (size_equal (theta, r) || isscalar (theta) || isscalar (r))
-            && (size_equal (theta, z) || isscalar (theta) || isscalar (z))
-            && (size_equal (r, z) || isscalar (r) || isscalar (z))))
+    if (! isnumeric (theta) || ! isnumeric (r) || ! isnumeric (z))
+      error ("pol2cart: THETA, R, Z must be numeric arrays of the same size, or scalar");
+    endif
+    [err, theta, r, z] = common_size (theta, r, z);
+    if (err)
       error ("pol2cart: THETA, R, Z must be numeric arrays of the same size, or scalar");
     endif
   endif
 
   x = r .* cos (theta);
   y = r .* sin (theta);
 
   if (nargout <= 1)
-    x = [x(:), y(:), z(:)];
+    if (isempty (z))
+      x = [x(:), y(:)];
+    else
+      x = [x(:), y(:), z(:)];
+    endif
   endif
 
 endfunction
 
 
 %!test
 %! t = [0, 0.5, 1] * pi;
 %! r = 1;
@@ -98,44 +106,44 @@ endfunction
 
 %!test
 %! t = [0, 1, 1] * pi/4;
 %! r = sqrt (2) * [0, 1, 2];
 %! z = [0, 1, 2];
 %! [x, y, z2] = pol2cart (t, r, z);
 %! assert (x, [0, 1, 2], sqrt (eps));
 %! assert (y, [0, 1, 2], sqrt (eps));
-%! assert (z, z2);
+%! assert (z2, z);
 
 %!test
 %! t = 0;
 %! r = [0, 1, 2];
 %! z = [0, 1, 2];
 %! [x, y, z2] = pol2cart (t, r, z);
 %! assert (x, [0, 1, 2], sqrt (eps));
 %! assert (y, [0, 0, 0], sqrt (eps));
-%! assert (z, z2);
+%! assert (z2, z);
 
 %!test
 %! t = [1, 1, 1]*pi/4;
 %! r = 1;
 %! z = [0, 1, 2];
 %! [x, y, z2] = pol2cart (t, r, z);
 %! assert (x, [1, 1, 1] / sqrt (2), eps);
 %! assert (y, [1, 1, 1] / sqrt (2), eps);
-%! assert (z, z2);
+%! assert (z2, z);
 
 %!test
 %! t = 0;
 %! r = [1, 2, 3];
 %! z = 1;
 %! [x, y, z2] = pol2cart (t, r, z);
 %! assert (x, [1, 2, 3], eps);
 %! assert (y, [0, 0, 0] / sqrt (2), eps);
-%! assert (z, z2);
+%! assert (z2, [1, 1, 1]);
 
 %!test
 %! P = [0, 0; pi/4, sqrt(2); pi/4, 2*sqrt(2)];
 %! C = [0, 0; 1, 1; 2, 2];
 %! assert (pol2cart (P), C, sqrt (eps));
 
 %!test
 %! P = [0, 0, 0; pi/4, sqrt(2), 1; pi/4, 2*sqrt(2), 2];
@@ -177,8 +185,9 @@ endfunction
 %!error <numeric arrays of the same size> pol2cart ({1,2,3}, [1,2,3])
 %!error <numeric arrays of the same size> pol2cart ([1,2,3], {1,2,3})
 %!error <numeric arrays of the same size> pol2cart (ones (3,3,3), ones (3,2,3))
 %!error <numeric arrays of the same size> pol2cart ({1,2,3}, [1,2,3], [1,2,3])
 %!error <numeric arrays of the same size> pol2cart ([1,2,3], {1,2,3}, [1,2,3])
 %!error <numeric arrays of the same size> pol2cart ([1,2,3], [1,2,3], {1,2,3})
 %!error <numeric arrays of the same size> pol2cart (ones (3,3,3), 1, ones (3,2,3))
 %!error <numeric arrays of the same size> pol2cart (ones (3,3,3), ones (3,2,3), 1)
+
diff --git a/scripts/general/sph2cart.m b/scripts/general/sph2cart.m
--- a/scripts/general/sph2cart.m
+++ b/scripts/general/sph2cart.m
@@ -50,20 +50,21 @@ function [x, y, z] = sph2cart (theta, ph
   if (nargin == 1)
     if (! (isnumeric (theta) && ismatrix (theta) && columns (theta) == 3))
       error ("sph2cart: matrix input must have 3 columns [THETA, PHI, R]");
     endif
     r = theta(:,3);
     phi = theta(:,2);
     theta = theta(:,1);
   else
-    if (! ((isnumeric (theta) && isnumeric (phi) && isnumeric (r))
-            && (size_equal (theta, phi) || isscalar (theta) || isscalar (phi))
-            && (size_equal (theta, r) || isscalar (theta) || isscalar (r))
-            && (size_equal (phi, r) || isscalar (phi) || isscalar (r))))
+    if (! isnumeric (theta) || ! isnumeric (phi) || ! isnumeric (r))
+      error ("sph2cart: THETA, PHI, R must be numeric arrays of the same size, or scalar");
+    endif
+    [err, theta, phi, r] = common_size (theta, phi, r);
+    if (err)
       error ("sph2cart: THETA, PHI, R must be numeric arrays of the same size, or scalar");
     endif
   endif
 
   x = r .* cos (phi) .* cos (theta);
   y = r .* cos (phi) .* sin (theta);
   z = r .* sin (phi);
 
@@ -106,16 +107,22 @@ endfunction
 %! p = [0, 0, 0];
 %! r = 1;
 %! [x, y, z] = sph2cart (t, p, r);
 %! assert (x, [1, 0, -1], eps);
 %! assert (y, [0, 1, 0], eps);
 %! assert (z, [0, 0, 0], eps);
 
 %!test
+%! [x, y, z] = sph2cart ([0 0 0], 0, 1);
+%! assert (x, [1, 1, 1], eps);
+%! assert (y, [0, 0, 0], eps);
+%! assert (z, [0, 0, 0], eps);
+
+%!test
 %! S = [ 0, 0, 1; 0.5*pi, 0, 1; pi, 0, 1];
 %! C = [ 1, 0, 0; 0, 1, 0; -1, 0, 0];
 %! assert (sph2cart (S), C, eps);
 
 %!test
 %! [t, p, r] = meshgrid ([0, pi/2], [0, pi/2], [0, 1]);
 %! [x, y, z] = sph2cart (t, p, r);
 %! X = zeros(2, 2, 2);
