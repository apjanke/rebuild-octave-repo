# HG changeset patch
# User jwe
# Date 1095421324 0
#      Fri Sep 17 11:42:04 2004 +0000
# Node ID f8c27dad3643214387b36b8a3e2ae7a6a8c07890
# Parent  2bcd013bc8673ce82c7142684ae53d78b9eefe37
[project @ 2004-09-17 11:42:04 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2004-09-17  John W. Eaton  <jwe@octave.org>
+
+	* ov-fcn-inline.cc (octave_fcn_inline::octave_fcn_inline):
+	Call eval_string instead of feval ("eval", ...).
+	Construct anonymous function handle to avoid going through the
+	symbol table.
+
+	* ov-fcn-handle.h (octave_fcn_handle::fcn_val): New function.
+	(octave_fcn_handle::octave_fcn_handle (const std:string&)):
+	New constructor.
+
 2004-09-16  John W. Eaton  <jwe@octave.org>
 
 	* parse.y (frob_function): Clear id_name from curr_sym_tab, not
 	top_level_sym_tab.
 
 	* symtab.cc (maybe_list): Count sizes using size_t, not int.
 
 	* variables.cc (symbol_out_of_date): Always look in LOADPATH.
diff --git a/src/ov-fcn-handle.h b/src/ov-fcn-handle.h
--- a/src/ov-fcn-handle.h
+++ b/src/ov-fcn-handle.h
@@ -41,16 +41,19 @@ Software Foundation, 59 Temple Place - S
 
 class
 octave_fcn_handle : public octave_base_value
 {
 public:
   octave_fcn_handle (void)
     : fcn (), nm () { }
 
+  octave_fcn_handle (const std::string& n)
+    : fcn (), nm (n) { }
+
   octave_fcn_handle (const octave_value& f,  const std::string& n)
     : fcn (f), nm (n) { }
 
   octave_fcn_handle (const octave_fcn_handle& fh)
     : octave_base_value (fh), fcn (fh.fcn), nm (fh.nm) { }
 
   ~octave_fcn_handle (void) { }
 
@@ -72,16 +75,18 @@ public:
 
   bool is_function_handle (void) const { return true; }
 
   octave_function *function_value (bool = false)
     { return fcn.function_value (); }
 
   octave_fcn_handle *fcn_handle_value (bool = false) { return this; }
 
+  octave_value fcn_val (void) const { return fcn; }
+
   std::string fcn_name (void) const { return nm; }
 
   bool save_ascii (std::ostream& os, bool& infnan_warned,
 		 bool strip_nan_and_inf);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
diff --git a/src/ov-fcn-inline.cc b/src/ov-fcn-inline.cc
--- a/src/ov-fcn-inline.cc
+++ b/src/ov-fcn-inline.cc
@@ -53,54 +53,49 @@ DEFINE_OCTAVE_ALLOCATOR (octave_fcn_inli
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_fcn_inline,
 				     "inline function",
 				     "inline function");
 
 octave_fcn_inline::octave_fcn_inline (const std::string& f,
 				      const string_vector& a,
 				      const std::string& n)
-  : octave_fcn_handle (0, n), iftext (f), ifargs (a)
+  : octave_fcn_handle (n), iftext (f), ifargs (a)
 {
-  // Find a function name that isn't already in the symbol table.
-  std::string fname = unique_symbol_name ("__inline_");
-
   // Form a string representing the function.
 
   OSSTREAM buf;
 
-  buf << "function __retval__ = " << fname << "(";
+  buf << "@(";
 
   for (int i = 0; i < ifargs.length (); i++)
     {
       if (i > 0)
 	buf << ", ";
 
       buf << ifargs(i);
     }
 
-  buf << ")\n  __retval__ = " << iftext << ";\nendfunction" << OSSTREAM_ENDS;
-
-  // Parse this function and create a user function.
+  buf << ") " << iftext << OSSTREAM_ENDS;
 
-  octave_value eval_args (OSSTREAM_STR (buf));
-
-  feval ("eval", eval_args, 0);
+  int parse_status;
+  octave_value anon_fcn_handle = eval_string (OSSTREAM_STR (buf), true,
+					      parse_status);
 
   OSSTREAM_FREEZE (buf);
 
-  octave_value tmp = lookup_function (fname);
-
-  if (tmp.is_function ())
+  if (parse_status == 0)
     {
-      fcn = tmp;
+      octave_fcn_handle *fh = anon_fcn_handle.fcn_handle_value ();
 
-      clear_function (fname);
+      if (fh)
+	fcn = fh->fcn_val ();
     }
-  else
+
+  if (fcn.is_undefined ())
     error ("inline: unable to define function");
 }
 
 bool
 octave_fcn_inline::save_ascii (std::ostream& os, bool&, bool)
 {
   os << "# nargs: " <<  ifargs.length () << "\n";
   for (int i = 0; i < ifargs.length (); i++)
