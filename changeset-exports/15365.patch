# HG changeset patch
# User Thorsten Liebig <thorsten.liebig@gmx.de>
# Date 1347394791 -7200
#      Tue Sep 11 22:19:51 2012 +0200
# Node ID b4c32f245da74a626f08404dbba4616eae80020f
# Parent  75f28de3a3878429750daba7897e36495b9169aa
GUI: Settings take immediate effect on the m-editor

* main-window.cc (main_window::construct): connect settings change to file-editor
* file-editor.h (file-editor::notice_settings): new notice settings method
* file-editor.cc (file-editor::notice_settings): new notice settings method
and pass-through to all file-editor-tabs
* file-editor-tab.h (file-editor::notice_settings): new notice settings method
* file-editor-tab.c (file_editor_tab::file_editor_tab): removed all settings to
file-editor::notice_settings
(file-editor::update_lexer): fix in case settings is 0 (should never happen)
(file-editor::notice_settings): all settings moved here

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -44,20 +44,16 @@ along with Octave; see the file COPYING.
 #include <QFileDialog>
 #include <QMessageBox>
 #include <QTextStream>
 #include <QVBoxLayout>
 
 file_editor_tab::file_editor_tab(file_editor *fileEditor)
   : QWidget ((QWidget*)fileEditor), octave_event_observer ()
 {
-  QSettings *settings = resource_manager::get_settings ();
-
-  // FIXME -- what should happen if settings is 0?
-
   _file_editor = fileEditor;
   _file_name = "";
   _edit_area = new QsciScintilla (this);
 
   // symbols
   _edit_area->setMarginType (1, QsciScintilla::SymbolMargin);
   _edit_area->setMarginSensitivity (1, true);
   _edit_area->markerDefine (QsciScintilla::RightTriangle, bookmark);
@@ -69,65 +65,53 @@ file_editor_tab::file_editor_tab(file_ed
   connect (_edit_area, SIGNAL (marginClicked (int, int,
                                               Qt::KeyboardModifiers)),
            this, SLOT (handle_margin_clicked (int, int,
                                               Qt::KeyboardModifiers)));
 
   // line numbers
   _edit_area->setMarginsForegroundColor(QColor(96,96,96));
   _edit_area->setMarginsBackgroundColor(QColor(232,232,220));
-  if (settings->value ("editor/showLineNumbers",true).toBool ())
-    {
-      QFont marginFont( settings->value ("editor/fontName","Courier").toString () ,
-                        settings->value ("editor/fontSize",10).toInt () );
-      _edit_area->setMarginsFont( marginFont );
-      QFontMetrics metrics(marginFont);
-      _edit_area->setMarginType (2, QsciScintilla::TextMargin);
-      _edit_area->setMarginWidth(2, metrics.width("9999"));
-      _edit_area->setMarginLineNumbers (2, true);
-    }
-
+  _edit_area->setMarginType (2, QsciScintilla::TextMargin);
+  
   // code folding
   _edit_area->setMarginType (3, QsciScintilla::SymbolMargin);
   _edit_area->setFolding (QsciScintilla::BoxedTreeFoldStyle , 3);
 
+  //highlight current line color
+  _edit_area->setCaretLineBackgroundColor(QColor(245,245,245));
+
   // other features
-  if (settings->value ("editor/highlightCurrentLine",true).toBool ())
-    {
-      _edit_area->setCaretLineVisible(true);
-      _edit_area->setCaretLineBackgroundColor(QColor(245,245,245));
-    }
   _edit_area->setBraceMatching (QsciScintilla::StrictBraceMatch);
   _edit_area->setAutoIndent (true);
   _edit_area->setIndentationWidth (2);
   _edit_area->setIndentationsUseTabs (false);
-  if (settings->value ("editor/codeCompletion",true).toBool ())
-    {
-      _edit_area->autoCompleteFromAll ();
-      _edit_area->setAutoCompletionSource(QsciScintilla::AcsAll);
-      _edit_area->setAutoCompletionThreshold (1);
-    }
+
   _edit_area->setUtf8 (true);
 
+  // auto completion
+  _edit_area->autoCompleteFromAll ();
+  _edit_area->setAutoCompletionSource(QsciScintilla::AcsAll);
+  
   QVBoxLayout *layout = new QVBoxLayout ();
   layout->addWidget (_edit_area);
   layout->setMargin (0);
   setLayout (layout);
 
   // connect modified signal
   connect (_edit_area, SIGNAL (modificationChanged (bool)),
            this, SLOT (update_window_title (bool)));
   connect (_edit_area, SIGNAL (copyAvailable (bool)),
            this, SLOT (handle_copy_available (bool)));
   connect (&_file_system_watcher, SIGNAL (fileChanged (QString)),
            this, SLOT (file_has_changed (QString)));
 
   _file_name = "";
-  _long_title = settings->value ("editor/longWindowTitle",false).toBool ();
-  update_window_title (false);
+ 
+  notice_settings ();
 }
 
 bool
 file_editor_tab::copy_available ()
 {
   return _copy_available;
 }
 
@@ -294,28 +278,27 @@ file_editor_tab::update_lexer ()
   else if (_file_name.endsWith (".diff"))
     {
       lexer = new QsciLexerDiff ();
     }
   else // Default to bash lexer.
     {
       lexer = new QsciLexerBash ();
     }
-
+  
   QSettings *settings = resource_manager::get_settings ();
-
-  // FIXME -- what should happen if settings is 0?
-
+  
   // Editor font (default or from settings)
-  lexer->setDefaultFont (QFont (
-                                settings->value ("editor/fontName",
-                                                 "Courier").toString (),
-                                settings->value ("editor/fontSize",
-                                                 10).toInt ()));
-
+  if (settings)
+    lexer->setDefaultFont (QFont (
+                             settings->value ("editor/fontName",
+                                              "Courier").toString (),
+                             settings->value ("editor/fontSize",
+                                              10).toInt ()));
+  
   // TODO: Autoindent not working as it should
   lexer->setAutoIndentStyle (QsciScintilla::AiMaintain ||
                              QsciScintilla::AiOpening  ||
                              QsciScintilla::AiClosing);
 
   _edit_area->setLexer (lexer);
 }
 
@@ -826,8 +809,45 @@ file_editor_tab::file_has_changed (const
             }
         }
       else
         {
           emit close_request ();
         }
     }
 }
+
+void
+file_editor_tab::notice_settings ()
+{
+  QSettings *settings = resource_manager::get_settings ();
+  
+  if (settings==NULL)
+    return; // this shouldn't happen!
+  
+  _edit_area->setCaretLineVisible(settings->value ("editor/highlightCurrentLine",true).toBool ());
+  
+  if (settings->value ("editor/codeCompletion",true).toBool ())
+    _edit_area->setAutoCompletionThreshold (1);
+  else
+    _edit_area->setAutoCompletionThreshold (-1);
+  
+  QFont font( settings->value ("editor/fontName","Courier").toString () ,
+              settings->value ("editor/fontSize",10).toInt () );
+  if (settings->value ("editor/showLineNumbers",true).toBool ())
+    {
+      _edit_area->setMarginLineNumbers (2, true);
+      _edit_area->setMarginsFont( font );
+      QFontMetrics metrics( font );      
+      _edit_area->setMarginWidth(2, metrics.width("9999"));
+    }      
+  else
+    {
+      _edit_area->setMarginLineNumbers (2, false);
+      _edit_area->setMarginWidth(2, 0);
+    }      
+  
+  update_lexer ();
+  
+  _long_title = settings->value ("editor/longWindowTitle",false).toBool ();
+
+  update_window_title (false);  
+}
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -69,16 +69,19 @@ public slots:
   void new_file ();
   bool save_file ();
   bool save_file (const QString& saveFileName);
   bool save_file_as();
   void run_file ();
 
   void file_has_changed (const QString& fileName);
   QString get_file_name () const {return _file_name;} 
+  
+  /** Tells the editor tab to react on changed settings. */
+  void notice_settings ();
 
 signals:
   void file_name_changed (const QString& fileName);
   void editor_state_changed ();
   void close_request ();
 
 protected:
   void closeEvent (QCloseEvent *event);
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -368,16 +368,28 @@ file_editor::handle_editor_state_changed
       bool copy_available = f->copy_available ();
       _copy_action->setEnabled (copy_available);
       _cut_action->setEnabled (copy_available);
       setFocusProxy (f);
     }
 }
 
 void
+file_editor::notice_settings ()
+{
+  for(int i = 0; i < _tab_widget->count (); i++)
+    {
+      file_editor_tab *fileEditorTab
+          = dynamic_cast <file_editor_tab*> (_tab_widget->widget (i));
+      if (fileEditorTab)
+        fileEditorTab->notice_settings ();
+    } 
+}
+
+void
 file_editor::construct ()
 {
   QWidget *widget = new QWidget (this);
   QStyle *style = QApplication::style ();
 
   _menu_bar = new QMenuBar (widget);
   _tool_bar = new QToolBar (widget);
   _tab_widget = new QTabWidget (widget);
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -88,16 +88,19 @@ public slots:
   void request_uncomment_selected_text ();
   void request_find ();
 
   void handle_file_name_changed (const QString& fileName);
   void handle_tab_close_request (int index);
   void handle_tab_close_request ();
   void active_tab_changed (int index);
   void handle_editor_state_changed ();
+  
+  /** Tells the editor to react on changed settings. */
+  void notice_settings ();
 
 private:
   void construct ();
   void add_file_editor_tab(file_editor_tab *f);
   file_editor_tab *active_editor_tab();
 
   QMenuBar *        _menu_bar;
   QToolBar *        _tool_bar;
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -828,16 +828,18 @@ main_window::construct ()
   connect (editor_action,               SIGNAL (triggered ()),
            this,                        SLOT (focus_editor ()));
   connect (documentation_action,        SIGNAL (triggered ()),
            this,                        SLOT (focus_documentation ()));
 
   connect (reset_windows_action,        SIGNAL (triggered ()),
            this,                        SLOT   (reset_windows ()));
   connect (this,                        SIGNAL (settings_changed ()),
+           _file_editor,                SLOT   (notice_settings ()));
+  connect (this,                        SIGNAL (settings_changed ()),
            _files_dock_widget,          SLOT   (notice_settings ()));
   connect (this,                        SIGNAL (settings_changed ()),
            this,                        SLOT   (notice_settings ()));
   connect (_files_dock_widget,          SIGNAL (open_file (QString)),
            this,                        SLOT   (open_file (QString)));
   connect (_files_dock_widget,          SIGNAL (displayed_directory_changed(QString)),
            this,                        SLOT   (set_current_working_directory(QString)));
   connect (_history_dock_widget,        SIGNAL (information (QString)),
