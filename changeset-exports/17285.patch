# HG changeset patch
# User Rik <rik@octave.org>
# Date 1377007011 25200
#      Tue Aug 20 06:56:51 2013 -0700
# Node ID f519560bfcb4d42ad5e5ece67df886fe53a0281f
# Parent  c8f94d9d34d00c6f1bd5c9c9618b58756e4fec34
maint: Use Octave spacing conventions in cset 79d4b6089968.

* liboctave/array/Sparse.cc: Use spacing conventions in %!tests, wrap long
lines.

* scripts/general/private/__isequal__.m: Use true/false rather than
logical(1)/logical(0) for clarity.

diff --git a/liboctave/array/Sparse.cc b/liboctave/array/Sparse.cc
--- a/liboctave/array/Sparse.cc
+++ b/liboctave/array/Sparse.cc
@@ -2789,27 +2789,31 @@ bug #35570:
 %! assert (s, sparse (magic (5)(:, [1,5])));
 
 %!test
 %! s = sparse ([], [], [], 1, 1);
 %! s(1,:) = [];
 %! assert (s, sparse ([], [], [], 0, 1));
 
 ## Test (bug #37321)
-
-%!test a=sparse (0,0); assert (all (a)==sparse ([1]))
-%!test a=sparse (0,1); assert (all (a)==sparse ([1]))
-%!test a=sparse (1,0); assert (all (a)==sparse ([1]))
-%!test a=sparse (1,0); assert (all (a,2)==sparse ([1]))
-%!test a=sparse (1,0); assert (isequal (size (all (a,1)),[1 0]))
-%!test a=sparse (1,1); assert (all (a)==sparse ([0])), assert (isequal (size (all (a)),[1 1]))
-%!test a=sparse (2,1); assert (all (a)==sparse ([0])), assert (isequal (size (all (a)),[1 1]))
-%!test a=sparse (1,2); assert (all (a)==sparse ([0])), assert (isequal (size (all (a)),[1 1]))
-%!test a=sparse (2,2); assert (isequal(all (a),sparse ([0 0])))
-
+%!test a=sparse (0,0); assert (all (a) == sparse ([1]));
+%!test a=sparse (0,1); assert (all (a) == sparse ([1]));
+%!test a=sparse (1,0); assert (all (a) == sparse ([1]));
+%!test a=sparse (1,0); assert (all (a,2) == sparse ([1]));
+%!test a=sparse (1,0); assert (size (all (a,1)), [1 0]);
+%!test a=sparse (1,1);
+%! assert (all (a) == sparse ([0]));
+%! assert (size (all (a)), [1 1]);
+%!test a=sparse (2,1);
+%! assert (all (a) == sparse ([0]));
+%! assert (size (all (a)), [1 1]);
+%!test a=sparse (1,2);
+%! assert (all (a) == sparse ([0]));
+%! assert (size (all (a)), [1 1]);
+%!test a=sparse (2,2); assert (isequal (all (a), sparse ([0 0])));
 
 */
 
 template <class T>
 void
 Sparse<T>::print_info (std::ostream& os, const std::string& prefix) const
 {
   os << prefix << "rep address: " << rep << "\n"
diff --git a/scripts/general/private/__isequal__.m b/scripts/general/private/__isequal__.m
--- a/scripts/general/private/__isequal__.m
+++ b/scripts/general/private/__isequal__.m
@@ -171,14 +171,14 @@ function t = __isequal__ (nans_compare_e
           break;
         endif
       endfor
 
     endif
   endif
 
   if (!t)
-    t=logical(0);
+    t = false;
   else
-    t=logical(1);
+    t = true;
   endif
 
 endfunction
