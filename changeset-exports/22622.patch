# HG changeset patch
# User Rik <rik@octave.org>
# Date 1476481585 25200
#      Fri Oct 14 14:46:25 2016 -0700
# Node ID 4191f8b5070c7e99b7baf2954d1a913a738aade7
# Parent  e7699adac1d0e4e08ddabfa03e456899f98ef2a5
Add '__' to start/end of hidden Octave-only graphics properties (bug #49205).

* QtHandlesUtils.cc (computeFont): get_fontsize_points ->
get___fontsize_points__.

* gl-render.cc (opengl_renderer::set_font): fontsize_points ->
__fontsize_points__.

* gl2ps-print.cc (gl2ps_renderer::set_font): fontsize_points ->
__fontsize_points__.

* graphics.cc (axes::properties::init, axes::properties::set_xlabel,
axes::properties::set_ylabel, axes::properties::set_zlabel,
axes::properties::set_title, axes::properties::set_defaults,
text::properties::update_text_extent, text::properties::request_autopos):
autopos_tag -> __autopos_tag__.
* graphics.cc (axes::properties::update_font,
text::properties::get___fontsize_points__,
uicontrol::properties::get___fontsize_points__,
uibuttongroup::properties::get___fontsize_points__,
uipanel::properties::get___fontsize_points__):
fontsize_points -> __fontsize_points__.

* graphics.in.h: fontsize_points -> __fontsize_points__.
autopos_tag -> __autopos_tag__.  fltk_label -> __fltk_label__.

* __init_fltk__.cc: fltk_label -> __fltk_label__.

* plotyy.m, hdl2struct.m, struct2hdl.m: autopos_tag -> __autopos_tag__.

diff --git a/libgui/graphics/QtHandlesUtils.cc b/libgui/graphics/QtHandlesUtils.cc
--- a/libgui/graphics/QtHandlesUtils.cc
+++ b/libgui/graphics/QtHandlesUtils.cc
@@ -119,17 +119,17 @@ namespace QtHandles
 
           angleMap[std::string ("normal")] = QFont::StyleNormal;
           angleMap[std::string ("italic")] = QFont::StyleItalic;
           angleMap[std::string ("oblique")] = QFont::StyleOblique;
 
           mapsInitialized = true;
         }
 
-      f.setPointSizeF (props.get_fontsize_points (height));
+      f.setPointSizeF (props.get___fontsize_points__ (height));
       f.setWeight (weightMap[props.get_fontweight ()]);
       f.setStyle (angleMap[props.get_fontangle ()]);
 
       return f;
     }
 
     template QFont computeFont<uicontrol> (const uicontrol::properties& props,
                                            int height);
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -3582,17 +3582,17 @@ namespace octave
   }
 
   void
   opengl_renderer::set_font (const base_properties& props)
   {
     txt_renderer.set_font (props.get ("fontname").string_value (),
                            props.get ("fontweight").string_value (),
                            props.get ("fontangle").string_value (),
-                           props.get ("fontsize_points").double_value ());
+                           props.get ("__fontsize_points__").double_value ());
   }
 
   void
   opengl_renderer::set_polygon_offset (bool on, float offset)
   {
 #if defined (HAVE_OPENGL)
 
     if (on)
diff --git a/libinterp/corefcn/gl2ps-print.cc b/libinterp/corefcn/gl2ps-print.cc
--- a/libinterp/corefcn/gl2ps-print.cc
+++ b/libinterp/corefcn/gl2ps-print.cc
@@ -673,17 +673,17 @@ namespace octave
   gl2ps_renderer::set_font (const base_properties& props)
   {
     octave::opengl_renderer::set_font (props);
 
     // Set the interpreter so that text_to_pixels can parse strings properly
     if (props.has_property ("interpreter"))
       set_interpreter (props.get ("interpreter").string_value ());
 
-    fontsize = props.get ("fontsize_points").double_value ();
+    fontsize = props.get ("__fontsize_points__").double_value ();
 
     caseless_str fn = props.get ("fontname").xtolower ().string_value ();
     bool isbold =
       (props.get ("fontweight").xtolower ().string_value () == "bold");
     bool isitalic =
       (props.get ("fontangle").xtolower ().string_value () == "italic");
 
     fontname = select_font (fn, isbold, isitalic);
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -4547,20 +4547,20 @@ axes::properties::init (void)
 
   xset (zlabel.handle_value (), "visible", "off");
 
   xset (xlabel.handle_value (), "clipping", "off");
   xset (ylabel.handle_value (), "clipping", "off");
   xset (zlabel.handle_value (), "clipping", "off");
   xset (title.handle_value (), "clipping", "off");
 
-  xset (xlabel.handle_value (), "autopos_tag", "xlabel");
-  xset (ylabel.handle_value (), "autopos_tag", "ylabel");
-  xset (zlabel.handle_value (), "autopos_tag", "zlabel");
-  xset (title.handle_value (), "autopos_tag", "title");
+  xset (xlabel.handle_value (), "__autopos_tag__", "xlabel");
+  xset (ylabel.handle_value (), "__autopos_tag__", "ylabel");
+  xset (zlabel.handle_value (), "__autopos_tag__", "zlabel");
+  xset (title.handle_value (), "__autopos_tag__", "title");
 
   adopt (xlabel.handle_value ());
   adopt (ylabel.handle_value ());
   adopt (zlabel.handle_value ());
   adopt (title.handle_value ());
 
   Matrix tlooseinset = default_axes_position ();
   tlooseinset(2) = 1-tlooseinset(0)-tlooseinset(2);
@@ -4738,59 +4738,59 @@ axes::properties::set_xlabel (const octa
 {
   set_text_child (xlabel, "xlabel", v);
   xset (xlabel.handle_value (), "positionmode", "auto");
   xset (xlabel.handle_value (), "rotationmode", "auto");
   xset (xlabel.handle_value (), "horizontalalignmentmode", "auto");
   xset (xlabel.handle_value (), "verticalalignmentmode", "auto");
   xset (xlabel.handle_value (), "clipping", "off");
   xset (xlabel.handle_value (), "color", get_xcolor ());
-  xset (xlabel.handle_value (), "autopos_tag", "xlabel");
+  xset (xlabel.handle_value (), "__autopos_tag__", "xlabel");
   update_xlabel_position ();
 }
 
 void
 axes::properties::set_ylabel (const octave_value& v)
 {
   set_text_child (ylabel, "ylabel", v);
   xset (ylabel.handle_value (), "positionmode", "auto");
   xset (ylabel.handle_value (), "rotationmode", "auto");
   xset (ylabel.handle_value (), "horizontalalignmentmode", "auto");
   xset (ylabel.handle_value (), "verticalalignmentmode", "auto");
   xset (ylabel.handle_value (), "clipping", "off");
   xset (ylabel.handle_value (), "color", get_ycolor ());
-  xset (ylabel.handle_value (), "autopos_tag", "ylabel");
+  xset (ylabel.handle_value (), "__autopos_tag__", "ylabel");
   update_ylabel_position ();
 }
 
 void
 axes::properties::set_zlabel (const octave_value& v)
 {
   set_text_child (zlabel, "zlabel", v);
   xset (zlabel.handle_value (), "positionmode", "auto");
   xset (zlabel.handle_value (), "rotationmode", "auto");
   xset (zlabel.handle_value (), "horizontalalignmentmode", "auto");
   xset (zlabel.handle_value (), "verticalalignmentmode", "auto");
   xset (zlabel.handle_value (), "clipping", "off");
   xset (zlabel.handle_value (), "color", get_zcolor ());
-  xset (zlabel.handle_value (), "autopos_tag", "zlabel");
+  xset (zlabel.handle_value (), "__autopos_tag__", "zlabel");
   update_zlabel_position ();
 }
 
 void
 axes::properties::set_title (const octave_value& v)
 {
   set_text_child (title, "title", v);
   xset (title.handle_value (), "positionmode", "auto");
   xset (title.handle_value (), "horizontalalignment", "center");
   xset (title.handle_value (), "horizontalalignmentmode", "auto");
   xset (title.handle_value (), "verticalalignment", "bottom");
   xset (title.handle_value (), "verticalalignmentmode", "auto");
   xset (title.handle_value (), "clipping", "off");
-  xset (title.handle_value (), "autopos_tag", "title");
+  xset (title.handle_value (), "__autopos_tag__", "title");
   update_title_position ();
 }
 
 void
 axes::properties::set_defaults (base_graphics_object& bgo,
                                 const std::string& mode)
 {
   // FIXME: Should this have all properties in it?
@@ -5008,20 +5008,20 @@ axes::properties::set_defaults (base_gra
 
   xset (zlabel.handle_value (), "visible", "off");
 
   xset (xlabel.handle_value (), "clipping", "off");
   xset (ylabel.handle_value (), "clipping", "off");
   xset (zlabel.handle_value (), "clipping", "off");
   xset (title.handle_value (), "clipping", "off");
 
-  xset (xlabel.handle_value (), "autopos_tag", "xlabel");
-  xset (ylabel.handle_value (), "autopos_tag", "ylabel");
-  xset (zlabel.handle_value (), "autopos_tag", "zlabel");
-  xset (title.handle_value (), "autopos_tag", "title");
+  xset (xlabel.handle_value (), "__autopos_tag__", "xlabel");
+  xset (ylabel.handle_value (), "__autopos_tag__", "ylabel");
+  xset (zlabel.handle_value (), "__autopos_tag__", "zlabel");
+  xset (title.handle_value (), "__autopos_tag__", "title");
 
   update_transform ();
   sync_positions ();
   override_defaults (bgo);
 }
 
 void
 axes::properties::delete_text_child (handle_property& hp)
@@ -6259,17 +6259,17 @@ axes::properties::update_aspectratios (v
 }
 
 void
 axes::properties::update_font (void)
 {
   txt_renderer.set_font (get ("fontname").string_value (),
                          get ("fontweight").string_value (),
                          get ("fontangle").string_value (),
-                         get ("fontsize_points").double_value ());
+                         get ("__fontsize_points__").double_value ());
 }
 
 // The INTERNAL flag defines whether position or outerposition is used.
 
 Matrix
 axes::properties::get_boundingbox (bool internal,
                                    const Matrix& parent_pix_size) const
 {
@@ -6583,17 +6583,17 @@ axes::properties::update_fontunits (cons
   double fontsz = get_fontsize ();
 
   fontsz = convert_font_size (fontsz, old_units, new_units, parent_height);
 
   set_fontsize (octave_value (fontsz));
 }
 
 double
-axes::properties::get_fontsize_points (double box_pix_height) const
+axes::properties::get___fontsize_points__ (double box_pix_height) const
 {
   double fontsz = get_fontsize ();
   double parent_height = box_pix_height;
 
   if (fontunits_is ("normalized") && parent_height <= 0)
     parent_height = get_boundingbox (true).elem (3);
 
   return convert_font_size (fontsz, get_fontunits (), "points", parent_height);
@@ -8035,17 +8035,17 @@ text::properties::update_fontunits (cons
 }
 
 void
 text::properties::update_font (void)
 {
   txt_renderer.set_font (get ("fontname").string_value (),
                          get ("fontweight").string_value (),
                          get ("fontangle").string_value (),
-                         get ("fontsize_points").double_value ());
+                         get ("__fontsize_points__").double_value ());
 
   txt_renderer.set_color (get_color_rgb ());
 }
 
 void
 text::properties::update_text_extent (void)
 {
   int halign = 0;
@@ -8077,27 +8077,27 @@ text::properties::update_text_extent (vo
                                halign, valign, get_rotation (),
                                get_interpreter ());
   // The bbox is relative to the text's position.  We'll leave it that
   // way, because get_position does not return valid results when the
   // text is first constructed.  Conversion to proper coordinates is
   // performed in get_extent.
   set_extent (bbox);
 
-  if (autopos_tag_is ("xlabel") || autopos_tag_is ("ylabel")
-      || autopos_tag_is ("zlabel") || autopos_tag_is ("title"))
+  if (__autopos_tag___is ("xlabel") || __autopos_tag___is ("ylabel")
+      || __autopos_tag___is ("zlabel") || __autopos_tag___is ("title"))
     update_autopos ("sync");
 }
 
 void
 text::properties::request_autopos (void)
 {
-  if (autopos_tag_is ("xlabel") || autopos_tag_is ("ylabel")
-      || autopos_tag_is ("zlabel") || autopos_tag_is ("title"))
-    update_autopos (get_autopos_tag ());
+  if (__autopos_tag___is ("xlabel") || __autopos_tag___is ("ylabel")
+      || __autopos_tag___is ("zlabel") || __autopos_tag___is ("title"))
+    update_autopos (get___autopos_tag__ ());
 }
 
 void
 text::properties::update_units (void)
 {
   if (! units_is ("data"))
     {
       set_xliminclude ("off");
@@ -8126,17 +8126,17 @@ text::properties::update_units (void)
       // FIXME: see above
       set_zliminclude ("off");
     }
 
   cached_units = get_units ();
 }
 
 double
-text::properties::get_fontsize_points (double box_pix_height) const
+text::properties::get___fontsize_points__ (double box_pix_height) const
 {
   double fontsz = get_fontsize ();
   double parent_height = box_pix_height;
 
   if (fontunits_is ("normalized") && parent_height <= 0)
     {
       graphics_object go (gh_manager::get_object (get___myhandle__ ()));
       graphics_object ax (go.get_ancestor ("axes"));
@@ -8858,17 +8858,17 @@ uicontrol::properties::update_fontunits 
   double fontsz = get_fontsize ();
 
   fontsz = convert_font_size (fontsz, old_units, new_units, parent_height);
 
   fontsize.set (octave_value (fontsz), true);
 }
 
 double
-uicontrol::properties::get_fontsize_points (double box_pix_height) const
+uicontrol::properties::get___fontsize_points__ (double box_pix_height) const
 {
   double fontsz = get_fontsize ();
   double parent_height = box_pix_height;
 
   if (fontunits_is ("normalized") && parent_height <= 0)
     parent_height = get_boundingbox (false).elem (3);
 
   return convert_font_size (fontsz, get_fontunits (), "points", parent_height);
@@ -8990,17 +8990,17 @@ uibuttongroup::properties::update_fontun
   double fontsz = get_fontsize ();
 
   fontsz = convert_font_size (fontsz, old_units, new_units, parent_height);
 
   set_fontsize (octave_value (fontsz));
 }
 
 double
-uibuttongroup::properties::get_fontsize_points (double box_pix_height) const
+uibuttongroup::properties::get___fontsize_points__ (double box_pix_height) const
 {
   double fontsz = get_fontsize ();
   double parent_height = box_pix_height;
 
   if (fontunits_is ("normalized") && parent_height <= 0)
     parent_height = get_boundingbox (false).elem (3);
 
   return convert_font_size (fontsz, get_fontunits (), "points", parent_height);
@@ -9161,17 +9161,17 @@ uipanel::properties::update_fontunits (c
   double fontsz = get_fontsize ();
 
   fontsz = convert_font_size (fontsz, old_units, new_units, parent_height);
 
   set_fontsize (octave_value (fontsz));
 }
 
 double
-uipanel::properties::get_fontsize_points (double box_pix_height) const
+uipanel::properties::get___fontsize_points__ (double box_pix_height) const
 {
   double fontsz = get_fontsize ();
   double parent_height = box_pix_height;
 
   if (fontunits_is ("normalized") && parent_height <= 0)
     parent_height = get_boundingbox (false).elem (3);
 
   return convert_font_size (fontsz, get_fontunits (), "points", parent_height);
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -3656,17 +3656,17 @@ public:
     const scaler& get_y_scaler (void) const { return sy; }
     const scaler& get_z_scaler (void) const { return sz; }
 
     Matrix get_boundingbox (bool internal = false,
                             const Matrix& parent_pix_size = Matrix ()) const;
     Matrix get_extent (bool with_text = false,
                        bool only_text_height=false) const;
 
-    double get_fontsize_points (double box_pix_height = 0) const;
+    double get___fontsize_points__ (double box_pix_height = 0) const;
 
     void update_boundingbox (void)
     {
       if (units_is ("normalized"))
         {
           sync_positions ();
           base_properties::update_boundingbox ();
         }
@@ -3922,31 +3922,31 @@ public:
       row_vector_property ztick mu , default_axes_tick ()
       any_property zticklabel S , ""
       radio_property zticklabelmode u , "{auto}|manual"
       double_property zticklabelrotation , 0.0
       radio_property ztickmode u , "{auto}|manual"
       // Octave-specific properties
       double_property mousewheelzoom , 0.5
       // hidden properties for alignment of subplots
-      radio_property autopos_tag h , "{none}|subplot"
+      radio_property __autopos_tag__ h , "{none}|subplot"
       // hidden properties for inset
       array_property looseinset hu , Matrix (1, 4, 0.0)
       // hidden properties for transformation computation
       array_property x_viewtransform h , Matrix (4, 4, 0.0)
       array_property x_projectiontransform h , Matrix (4, 4, 0.0)
       array_property x_viewporttransform h , Matrix (4, 4, 0.0)
       array_property x_normrendertransform h , Matrix (4, 4, 0.0)
       array_property x_rendertransform h , Matrix (4, 4, 0.0)
       // hidden properties for minor ticks
       row_vector_property xmtick h , Matrix ()
       row_vector_property ymtick h , Matrix ()
       row_vector_property zmtick h , Matrix ()
       // hidden property for text rendering
-      double_property fontsize_points hgr , 0
+      double_property __fontsize_points__ hgr , 0
    END_PROPERTIES
 
   protected:
     void init (void);
 
   private:
 
     std::string
@@ -4442,17 +4442,17 @@ public:
 // ---------------------------------------------------------------------
 
 class OCTINTERP_API text : public base_graphics_object
 {
 public:
   class OCTINTERP_API properties : public base_properties
   {
   public:
-    double get_fontsize_points (double box_pix_height = 0) const;
+    double get___fontsize_points__ (double box_pix_height = 0) const;
 
     void set_position (const octave_value& val)
     {
       octave_value new_val (val);
 
       if (new_val.numel () == 2)
         {
           dim_vector dv (1, 3);
@@ -4505,19 +4505,19 @@ public:
       bool_property xliminclude hl , "off"
       bool_property yliminclude hl , "off"
       bool_property zliminclude hl , "off"
       // hidden properties for auto-positioning
       radio_property positionmode hu , "{auto}|manual"
       radio_property rotationmode hu , "{auto}|manual"
       radio_property horizontalalignmentmode hu , "{auto}|manual"
       radio_property verticalalignmentmode hu , "{auto}|manual"
-      radio_property autopos_tag h , "{none}|xlabel|ylabel|zlabel|title"
+      radio_property __autopos_tag__ h , "{none}|xlabel|ylabel|zlabel|title"
       // hidden property for text rendering
-      double_property fontsize_points hgr , 0
+      double_property __fontsize_points__ hgr , 0
     END_PROPERTIES
 
     Matrix get_data_position (void) const;
     Matrix get_extent_matrix (void) const;
     const uint8NDArray& get_pixels (void) const { return pixels; }
 
     // Text renderer, used for calculation of text size
     octave::text_renderer txt_renderer;
@@ -5370,17 +5370,17 @@ public:
       callback_property callback , Matrix ()
       bool_property checked , "off"
       bool_property enable , "on"
       color_property foregroundcolor , color_values (0, 0, 0)
       string_property label , ""
       double_property position , 0
       bool_property separator , "off"
       // Octave-specific properties
-      string_property fltk_label h , ""
+      string_property __fltk_label__ h , ""
     END_PROPERTIES
 
   protected:
     void init (void)
     { }
   };
 
 private:
@@ -5481,17 +5481,17 @@ class OCTINTERP_API uicontrol : public b
 {
 public:
   class OCTINTERP_API properties : public base_properties
   {
   public:
     Matrix get_boundingbox (bool internal = false,
                             const Matrix& parent_pix_size = Matrix ()) const;
 
-    double get_fontsize_points (double box_pix_height = 0) const;
+    double get___fontsize_points__ (double box_pix_height = 0) const;
 
     // See the genprops.awk script for an explanation of the
     // properties declarations.
     // Programming note: Keep property list sorted if new ones are added.
 
     BEGIN_PROPERTIES (uicontrol)
       any_property __object__ h , Matrix ()
       color_property backgroundcolor , color_values (1, 1, 1)
@@ -5579,17 +5579,17 @@ class OCTINTERP_API uibuttongroup : publ
 {
 public:
   class OCTINTERP_API properties : public base_properties
   {
   public:
     Matrix get_boundingbox (bool internal = false,
                             const Matrix& parent_pix_size = Matrix ()) const;
 
-    double get_fontsize_points (double box_pix_height = 0) const;
+    double get___fontsize_points__ (double box_pix_height = 0) const;
 
     // See the genprops.awk script for an explanation of the
     // properties declarations.
     // Programming note: Keep property list sorted if new ones are added.
 
     BEGIN_PROPERTIES (uibuttongroup)
       any_property __object__ h , Matrix ()
       color_property backgroundcolor , color_values (1, 1, 1)
@@ -5664,17 +5664,17 @@ class OCTINTERP_API uipanel : public bas
 {
 public:
   class OCTINTERP_API properties : public base_properties
   {
   public:
     Matrix get_boundingbox (bool internal = false,
                             const Matrix& parent_pix_size = Matrix ()) const;
 
-    double get_fontsize_points (double box_pix_height = 0) const;
+    double get___fontsize_points__ (double box_pix_height = 0) const;
 
     // See the genprops.awk script for an explanation of the
     // properties declarations.
     // Programming note: Keep property list sorted if new ones are added.
 
     BEGIN_PROPERTIES (uipanel)
       any_property __object__ h , Matrix ()
       color_property backgroundcolor , color_values (1, 1, 1)
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -418,26 +418,26 @@ public:
     for (octave_idx_type ii = 0; ii < k; ii++)
       retval(ii) = uimenu_childs (sidx(ii));
 
     return retval;
   }
 
   void delete_entry (uimenu::properties& uimenup)
   {
-    std::string fltk_label = uimenup.get_fltk_label ();
+    std::string fltk_label = uimenup.get___fltk_label__ ();
     int idx = find_index_by_name (fltk_label.c_str ());
 
     if (idx >= 0)
       menubar->remove (idx);
   }
 
   void update_accelerator (uimenu::properties& uimenup)
   {
-    std::string fltk_label = uimenup.get_fltk_label ();
+    std::string fltk_label = uimenup.get___fltk_label__ ();
     if (! fltk_label.empty ())
       {
         Fl_Menu_Item* item = const_cast<Fl_Menu_Item*> (menubar->find_item (
                                fltk_label.c_str ()));
         if (item)
           {
             std::string acc = uimenup.get_accelerator ();
             if (acc.length () > 0)
@@ -446,17 +446,17 @@ public:
                 item->shortcut (key);
               }
           }
       }
   }
 
   void update_callback (uimenu::properties& uimenup)
   {
-    std::string fltk_label = uimenup.get_fltk_label ();
+    std::string fltk_label = uimenup.get___fltk_label__ ();
     if (! fltk_label.empty ())
       {
         Fl_Menu_Item* item = const_cast<Fl_Menu_Item*> (menubar->find_item (
                                fltk_label.c_str ()));
         if (item)
           {
             if (! uimenup.get_callback ().is_empty ())
               item->callback (static_cast<Fl_Callback*> (script_cb),
@@ -464,34 +464,34 @@ public:
             else
               item->callback (0, static_cast<void*> (0));
           }
       }
   }
 
   void update_enable (uimenu::properties& uimenup)
   {
-    std::string fltk_label = uimenup.get_fltk_label ();
+    std::string fltk_label = uimenup.get___fltk_label__ ();
     if (! fltk_label.empty ())
       {
         Fl_Menu_Item* item = const_cast<Fl_Menu_Item*> (menubar->find_item (
                                fltk_label.c_str ()));
         if (item)
           {
             if (uimenup.is_enable ())
               item->activate ();
             else
               item->deactivate ();
           }
       }
   }
 
   void update_foregroundcolor (uimenu::properties& uimenup)
   {
-    std::string fltk_label = uimenup.get_fltk_label ();
+    std::string fltk_label = uimenup.get___fltk_label__ ();
     if (! fltk_label.empty ())
       {
         Fl_Menu_Item* item = const_cast<Fl_Menu_Item*> (menubar->find_item (
                                fltk_label.c_str ()));
         if (item)
           {
             Matrix rgb = uimenup.get_foregroundcolor_rgb ();
 
@@ -504,17 +504,17 @@ public:
       }
   }
 
   void update_seperator (const uimenu::properties& uimenup)
   {
     // Matlab places the separator before the current
     // menu entry, while fltk places it after.  So we need to find
     // the previous item in this menu/submenu. (Kai)
-    std::string fltk_label = uimenup.get_fltk_label ();
+    std::string fltk_label = uimenup.get___fltk_label__ ();
     if (! fltk_label.empty ())
       {
         int itemflags = 0, idx;
         int curr_idx = find_index_by_name (fltk_label.c_str ());
 
         for (idx = curr_idx - 1; idx >= 0; idx--)
           {
             Fl_Menu_Item* item
@@ -534,17 +534,17 @@ public:
             else
               menubar->mode (idx, itemflags & (~FL_MENU_DIVIDER));
           }
       }
   }
 
   void update_visible (uimenu::properties& uimenup)
   {
-    std::string fltk_label = uimenup.get_fltk_label ();
+    std::string fltk_label = uimenup.get___fltk_label__ ();
     if (! fltk_label.empty ())
       {
         Fl_Menu_Item* item
           = const_cast<Fl_Menu_Item*> (menubar->find_item (fltk_label.c_str ()));
         if (item)
           {
             if (uimenup.is_visible ())
               item->show ();
@@ -558,17 +558,17 @@ public:
   {
     uimenup.get_property ("position").set (octave_value (static_cast<double> (pos)),
                                            true, false);
   }
 
   void add_entry (uimenu::properties& uimenup)
   {
 
-    std::string fltk_label = uimenup.get_fltk_label ();
+    std::string fltk_label = uimenup.get___fltk_label__ ();
 
     if (! fltk_label.empty ())
       {
         bool item_added = false;
         do
           {
             const Fl_Menu_Item* item
               = menubar->find_item (fltk_label.c_str ());
@@ -601,26 +601,26 @@ public:
                   flags = FL_SUBMENU;
                 if (len == 0 && uimenup.is_checked ())
                   flags += FL_MENU_TOGGLE + FL_MENU_VALUE;
                 menubar->add (fltk_label.c_str (), 0, 0, 0, flags);
                 item_added = true;
               }
           }
         while (! item_added);
-        uimenup.set_fltk_label (fltk_label);
+        uimenup.set___fltk_label__ (fltk_label);
       }
   }
 
   void add_to_menu (uimenu::properties& uimenup)
   {
     std::vector<int> delayed_menus;
     Matrix kids = find_uimenu_children (uimenup);
     int len = kids.numel ();
-    std::string fltk_label = uimenup.get_fltk_label ();
+    std::string fltk_label = uimenup.get___fltk_label__ ();
     int count = 0;
 
     add_entry (uimenup);
     update_foregroundcolor (uimenup);
     update_callback (uimenup);
     update_accelerator (uimenup);
     update_enable (uimenup);
     update_visible (uimenup);
@@ -892,17 +892,17 @@ public:
   void uimenu_update (const graphics_handle& gh, int id)
   {
     graphics_object uimenu_obj = gh_manager::get_object (gh);
 
     if (uimenu_obj.valid_object () && uimenu_obj.isa ("uimenu"))
       {
         uimenu::properties& uimenup =
           dynamic_cast<uimenu::properties&> (uimenu_obj.get_properties ());
-        std::string fltk_label = uimenup.get_fltk_label ();
+        std::string fltk_label = uimenup.get___fltk_label__ ();
         graphics_object fig = uimenu_obj.get_ancestor ("figure");
         figure::properties& figp =
           dynamic_cast<figure::properties&> (fig.get_properties ());
 
         switch (id)
           {
           case base_properties::ID_BEINGDELETED:
             uimenu->remove_from_menu (uimenup);
@@ -2213,35 +2213,35 @@ public:
       {
         octave_value ov = go.get (caseless_str ("__plot_stream__"));
 
         if (! ov.is_empty ())
           figure_manager::delete_window (ov.string_value ());
       }
   }
 
-  void uimenu_set_fltk_label (graphics_object uimenu_obj)
+  void uimenu_set___fltk_label__ (graphics_object uimenu_obj)
   {
     if (uimenu_obj.valid_object ())
       {
         uimenu::properties& uimenup =
           dynamic_cast<uimenu::properties&> (uimenu_obj.get_properties ());
         std::string fltk_label = uimenup.get_label ();
         graphics_object go = gh_manager::get_object (uimenu_obj.get_parent ());
         if (go.isa ("uimenu"))
           fltk_label = dynamic_cast<const uimenu::properties&>
-                       (go.get_properties ()).get_fltk_label ()
+                       (go.get_properties ()).get___fltk_label__ ()
                        + "/"
                        + fltk_label;
         else if (go.isa ("figure") || go.isa ("uicontextmenu"))
           ;
         else
           error ("invalid parent object\n");
 
-        uimenup.set_fltk_label (fltk_label);
+        uimenup.set___fltk_label__ (fltk_label);
       }
   }
 
   void update (const graphics_object& go, int id)
   {
     if (go.isa ("figure"))
       {
         octave_value ov = go.get (caseless_str ("__plot_stream__"));
@@ -2290,17 +2290,17 @@ public:
                 figure_manager::update_boundingbox (ov.string_value (), false);
                 break;
               }
           }
       }
     else if (go.isa ("uimenu"))
       {
         if (id == uimenu::properties::ID_LABEL)
-          uimenu_set_fltk_label (go);
+          uimenu_set___fltk_label__ (go);
 
         graphics_object fig = go.get_ancestor ("figure");
         figure_manager::uimenu_update (fig.get_handle (), go.get_handle (), id);
       }
   }
 
   void redraw_figure (const graphics_object& go) const
   {
diff --git a/scripts/plot/draw/plotyy.m b/scripts/plot/draw/plotyy.m
--- a/scripts/plot/draw/plotyy.m
+++ b/scripts/plot/draw/plotyy.m
@@ -116,18 +116,18 @@ function [ax, h1, h2] = __plotyy__ (ax, 
 
   set (gcf (), "nextplot", "add");
 
   axes (ax(2));
 
   colors = get (ax(1), "colororder");
   set (ax(2), "colororder", [colors(2:end,:); colors(1,:)]);
 
-  if (strcmp (get (ax(1), "autopos_tag"), "subplot"))
-    set (ax(2), "autopos_tag", "subplot");
+  if (strcmp (get (ax(1), "__autopos_tag__"), "subplot"))
+    set (ax(2), "__autopos_tag__", "subplot");
   else
     set (ax, "activepositionproperty", "position");
   endif
 
   ## Don't replace axis which has colororder property already modified
   if (strcmp (get (ax(1), "nextplot"), "replace"))
     set (ax(2), "nextplot", "replacechildren");
   endif
diff --git a/scripts/plot/util/hdl2struct.m b/scripts/plot/util/hdl2struct.m
--- a/scripts/plot/util/hdl2struct.m
+++ b/scripts/plot/util/hdl2struct.m
@@ -155,17 +155,17 @@ function prpstr = getprops (h)
     ii += 1;
     if (! any (strcmp (prop, forbid)))
       prpstr.(prop) = val;
     endif
     nflds -= 1;
   endwhile
 
   ## hidden properties
-  hidden = {"autopos_tag", "looseinset"};
+  hidden = {"__autopos_tag__", "looseinset"};
   for ii = 1:numel (hidden)
     if (isprop (h, hidden{ii}))
       prpstr.(hidden{ii}) = get (h, hidden{ii});
     endif
   endfor
 
 endfunction
 
diff --git a/scripts/plot/util/struct2hdl.m b/scripts/plot/util/struct2hdl.m
--- a/scripts/plot/util/struct2hdl.m
+++ b/scripts/plot/util/struct2hdl.m
@@ -176,17 +176,17 @@ function [h, pout] = struct2hdl (s, p=[]
 
 endfunction
 
 function [h, sout] = createaxes (s, p, par)
 
   if (! any (strcmpi (s.properties.tag, {"colorbar", "legend"})))
     ## regular axes
     propval = {"position", s.properties.position};
-    hid = {"autopos_tag", "looseinset"};
+    hid = {"__autopos_tag__", "looseinset"};
     for ii = 1:numel (hid)
       prop = hid{ii};
       if (isfield (s.properties, prop))
         val = s.properties.(prop);
         propval = [propval, prop, val];
       endif
     endfor
     h = axes (propval{:}, "parent", par);
@@ -641,17 +641,17 @@ function out = valcomp (x, hdls)
   else
     out = 0;
   endif
 
 endfunction
 
 function addmissingprops (h, props)
 
-  hid = {"autopos_tag", "looseinset"};
+  hid = {"__autopos_tag__", "looseinset"};
   oldfields = fieldnames (props);
   curfields = fieldnames (get (h));
   missing = ! ismember (oldfields, curfields);
   idx = find (missing);
   for ii = 1:length (idx)
     prop = oldfields{idx(ii)};
     if (! any (strcmp (prop, hid)))
       addproperty (prop, h, "any");
