# HG changeset patch
# User jwe
# Date 857499652 0
#      Tue Mar 04 18:20:52 1997 +0000
# Node ID d21505cbcc58f325b0bdc21cbd43d2916a80f3a3
# Parent  650ab15f89547bbe1e69c2993868c93436566d26
[project @ 1997-03-04 18:20:51 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+Tue Mar  4 12:19:24 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* emacs/octave-mod.el: Update from Kurt Hornik to handle switch
+	statement.
+
 Mon Mar  3 15:44:42 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dlfcn/Makefile.in (DISTFILES): Add ftp-site.
 
 Sat Mar  1 15:23:14 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Improve checks for gettimeofday.
 
diff --git a/emacs/octave-mod.el b/emacs/octave-mod.el
--- a/emacs/octave-mod.el
+++ b/emacs/octave-mod.el
@@ -95,17 +95,19 @@ All Octave abbrevs start with a grave ac
   '("for" "function" "if" "switch" "try" "unwind_protect" "while"))
 (defvar octave-else-keywords
   '("case" "catch" "else" "elseif" "otherwise" "unwind_protect_cleanup"))
 (defvar octave-end-keywords
   '("end" "endfor" "endfunction" "endif" "endswitch" "end_try_catch"
     "end_unwind_protect" "endwhile"))
 
 (defvar octave-reserved-words
-  (append octave-begin-keywords octave-else-keywords octave-end-keywords
+  (append octave-begin-keywords
+	  octave-else-keywords
+	  octave-end-keywords
 	  '("all_va_args" "break" "continue" "global" "gplot" "gsplot"
 	    "replot" "return"))
   "Reserved words in Octave.")
 
 (defvar octave-text-functions
   '("casesen" "cd" "chdir" "clear" "diary" "dir" "document" "echo"
     "edit_history" "format" "gset" "gshow" "help" "history" "hold"
     "load" "ls" "more" "run_history" "save" "set" "show" "type"
@@ -318,17 +320,17 @@ newline or semicolon after an else or en
 (defvar octave-block-begin-or-end-regexp
   (concat octave-block-begin-regexp "\\|" octave-block-end-regexp))
 (defvar octave-block-else-or-end-regexp
   (concat octave-block-else-regexp "\\|" octave-block-end-regexp))
 (defvar octave-block-match-alist
   '(("for" . ("end" "endfor"))
     ("function" . ("end" "endfunction"))
     ("if" . ("else" "elseif" "end" "endif"))
-    ("switch" . ("end" "endswitch"))
+    ("switch" . ("case" "end" "endswitch" "otherwise"))
     ("try" . ("catch" "end" "end_try_catch"))
     ("unwind_protect" . ("unwind_protect_cleanup" "end"
 			 "end_unwind_protect"))
     ("while" . ("end" "endwhile")))
   "Alist with Octave's matching block keywords.
 Has Octave's begin keywords as keys and a list of the matching else or
 end keywords as associated values.")
 
@@ -618,47 +620,58 @@ level."
 	      (octave-beginning-of-line)
 	      (back-to-indentation)
 	      (setq icol (current-column))
 	      (let ((bot (point))
 		    (eol (octave-point 'eol)))
 		(while (< (point) eol)
 		  (if (octave-not-in-string-or-comment-p)
 		      (cond
+		       ((looking-at "\\<switch\\>")
+			(setq icol (+ icol (* 2 octave-block-offset))))
 		       ((looking-at octave-block-begin-regexp)
 			(setq icol (+ icol octave-block-offset)))
 		       ((looking-at octave-block-else-regexp)
 			(if (= bot (point))
 			    (setq icol (+ icol octave-block-offset))))
 		       ((looking-at octave-block-end-regexp)
 			(if (not (= bot (point)))
-			    (setq icol (- icol octave-block-offset))))))
+			    (setq icol (- icol
+					  (octave-block-end-offset)))))))
 		  (forward-char)))
 	      (if is-continuation-line
 		  (setq icol (+ icol octave-continuation-offset)))))))
     (save-excursion
       (back-to-indentation)
       (cond
-       ((and (or (looking-at octave-block-else-regexp)
-		 (looking-at octave-block-end-regexp))
+       ((and (looking-at octave-block-else-regexp)
 	     (octave-not-in-string-or-comment-p))
 	(setq icol (- icol octave-block-offset)))
+       ((and (looking-at octave-block-end-regexp)
+	     (octave-not-in-string-or-comment-p))
+	(setq icol (- icol (octave-block-end-offset))))
        ((looking-at "\\s<\\s<\\s<\\S<")
 	(setq icol (list 0 icol)))
        ((looking-at "\\s<\\S<")
 	(setq icol (list comment-column icol)))))
     icol))
 
+(defun octave-block-end-offset ()
+  (save-excursion
+    (octave-backward-up-block 1)
+    (* octave-block-offset
+       (if (string-match (match-string 0) "switch") 2 1))))
+
 (defun octave-comment-indent ()
   (if (looking-at "\\s<\\s<\\s<")
       0
     (if (looking-at "\\s<\\s<")
 	(calculate-octave-indent)
       (skip-syntax-backward " ")
-      (max (if (bolp) 0 (+ (current-column)))
+      (max (if (bolp) 0 (+ 1 (current-column)))
 	   comment-column))))
 
 (defun octave-indent-for-comment ()
   "Maybe insert and indent an Octave comment.
 If there is no comment already on this line, create a code-level comment
 (started by two comment characters) if the line is empty, or an in-line
 comment (started by one comment character) otherwise. 
 Point is left after the start of the comment which is properly aligned."
