# HG changeset patch
# User jwe
# Date 813485534 0
#      Thu Oct 12 08:12:14 1995 +0000
# Node ID ffee86c3793172d852e8f58b9da21e03c8954528
# Parent  27a03373de4150e889934daeafba168ce4152fd0
[project @ 1995-10-12 08:08:25 by jwe]

diff --git a/liboctave/Array-idx.h b/liboctave/Array-idx.h
--- a/liboctave/Array-idx.h
+++ b/liboctave/Array-idx.h
@@ -531,23 +531,25 @@ assign (Array2<LT>& lhs, const Array2<RT
 			{
 			  int ii = idx_i.elem (i);
 			  lhs.elem (ii, jj) = rhs.elem (i, j);
 			}
 		    }
 		}
 	      else if (rhs_nr == 1 && rhs_nc == 1)
 		{
+		  RT scalar = rhs.elem (0, 0);
+
 		  for (int j = 0; j < m; j++)
 		    {
 		      int jj = idx_j.elem (j);
 		      for (int i = 0; i < n; i++)
 			{
 			  int ii = idx_i.elem (i);
-			  lhs.elem (ii, jj) = rhs.elem (0, 0);
+			  lhs.elem (ii, jj) = scalar;
 			}
 		    }
 		}
 	      else
 		{
 		  (*current_liboctave_error_handler)
     ("A(I, J) = X: X must be a scalar or the number of elements in I must");
 		  (*current_liboctave_error_handler)
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -390,16 +390,36 @@ Array2<T>::resize (int r, int c, const T
   for (int j = min_c; j < c; j++)
     for (int i = 0; i < r; i++)
       xelem (i, j) = val;
 
   if (--old_rep->count <= 0)
     delete old_rep;
 }
 
+template <class T>
+Array2<T>&
+Array2<T>::insert (const Array2<T>& a, int r, int c)
+{
+  int a_rows = a.rows ();
+  int a_cols = a.cols ();
+  if (r < 0 || r + a_rows - 1 > rows ()
+      || c < 0 || c + a_cols - 1 > cols ())
+    {
+      (*current_liboctave_error_handler) ("range error for insert");
+      return *this;
+    }
+
+  for (int j = 0; j < a_cols; j++)
+    for (int i = 0; i < a_rows; i++)
+      elem (r+i, c+j) = a.elem (i, j);
+
+  return *this;
+}
+
 // Three dimensional array class.
 
 template <class T>
 T&
 Array3<T>::checkelem (int i, int j, int k)
 {
   if (i < 0 || j < 0 || k < 0 || i >= d1 || j >= d2 || k >= d3)
     {
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -325,16 +325,18 @@ public:
 
   T elem (int i, int j) const;
   T checkelem (int i, int j) const;
   T operator () (int i, int j) const;
 
   void resize (int n, int m);
   void resize (int n, int m, const T& val);
 
+  Array2<T>& insert (const Array2<T>& a, int r, int c);
+
 #ifdef HEAVYWEIGHT_INDEXING
   void maybe_delete_elements (idx_vector& i, idx_vector& j);
 
   Array2<T> value (void);
 #endif
 };
 
 template <class LT, class RT>
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -186,28 +186,17 @@ ComplexMatrix::insert (const DiagMatrix&
     elem (r+i, c+i) = a.elem (i, i);
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::insert (const ComplexMatrix& a, int r, int c)
 {
-  int a_nr = a.rows ();
-  int a_nc = a.cols ();
-  if (r < 0 || r + a_nr - 1 > rows () || c < 0 || c + a_nc - 1 > cols ())
-    {
-      (*current_liboctave_error_handler) ("range error for insert");
-      return *this;
-    }
-
-  for (int j = 0; j < a_nc; j++)
-    for (int i = 0; i < a_nr; i++)
-      elem (r+i, c+j) = a.elem (i, j);
-
+  Array2<Complex>::insert (a, r, c);
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::insert (const ComplexRowVector& a, int r, int c)
 {
   int a_len = a.length ();
   if (r < 0 || r >= rows () || c < 0 || c + a_len - 1 > cols ())
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -106,29 +106,17 @@ int
 Matrix::operator != (const Matrix& a) const
 {
   return !(*this == a);
 }
 
 Matrix&
 Matrix::insert (const Matrix& a, int r, int c)
 {
-  int a_rows = a.rows ();
-  int a_cols = a.cols ();
-  if (r < 0 || r + a_rows - 1 > rows ()
-      || c < 0 || c + a_cols - 1 > cols ())
-    {
-      (*current_liboctave_error_handler) ("range error for insert");
-      return *this;
-    }
-
-  for (int j = 0; j < a_cols; j++)
-    for (int i = 0; i < a_rows; i++)
-      elem (r+i, c+j) = a.elem (i, j);
-
+  Array2<double>::insert (a, r, c);
   return *this;
 }
 
 Matrix&
 Matrix::insert (const RowVector& a, int r, int c)
 {
   int a_len = a.length ();
   if (r < 0 || r >= rows () || c < 0 || c + a_len - 1 > cols ())
