# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1518371891 18000
#      Sun Feb 11 12:58:11 2018 -0500
# Node ID cd25b9c5f80848fe49c43616b9ab861b51c9a423
# Parent  981990aaa93191849f64a811853d6cca529cc6db
eliminate useless public iterator typedefs in child_list class

* child-list.h, child-list.cc (child_list::iterator,
child_list::const_iterator): Delete typedefs.
(child_list::reap, child_list::wait): Use c++11 syntax for loop
iterating over all elements of list.

diff --git a/liboctave/system/child-list.cc b/liboctave/system/child-list.cc
--- a/liboctave/system/child-list.cc
+++ b/liboctave/system/child-list.cc
@@ -51,25 +51,23 @@ namespace octave
   {
     m_list.append (child (pid, f));
   }
 
   void child_list::reap (void)
   {
     // Mark the record for PID invalid.
 
-    for (iterator p = m_list.begin (); p != m_list.end (); p++)
+    for (auto& oc : m_list)
       {
         // The call to the child::child_event_handler might
         // invalidate the iterator (for example, by calling
         // child_list::remove), so we increment the iterator
         // here.
 
-        child& oc = *p;
-
         if (oc.have_status)
           {
             oc.have_status = 0;
 
             child::child_event_handler f = oc.handler;
 
             if (f && f (oc.pid, oc.status))
               oc.pid = -1;
@@ -81,20 +79,18 @@ namespace octave
   }
 
   // Wait on our children and record any changes in their status.
 
   bool child_list::wait (void)
   {
     bool retval = false;
 
-    for (iterator p = m_list.begin (); p != m_list.end (); p++)
+    for (auto& oc : m_list)
       {
-        child& oc = *p;
-
         pid_t pid = oc.pid;
 
         if (pid > 0)
           {
             int status;
 
             if (sys::waitpid (pid, &status, sys::wnohang ()) > 0)
               {
diff --git a/liboctave/system/child-list.h b/liboctave/system/child-list.h
--- a/liboctave/system/child-list.h
+++ b/liboctave/system/child-list.h
@@ -64,25 +64,20 @@ namespace octave
     // Nonzero if this child has stopped or terminated.
     sig_atomic_t have_status;
 
     // The status of this child; 0 if running, otherwise a status value
     // from waitpid.
     int status;
   };
 
-  class
-  OCTAVE_API
-  child_list
+  class OCTAVE_API child_list
   {
   public:
 
-    typedef base_list<child>::iterator iterator;
-    typedef base_list<child>::const_iterator const_iterator;
-
     child_list (void) { }
 
     void insert (pid_t pid, child::child_event_handler f);
 
     void remove (pid_t pid);
 
     void reap (void);
 
