# HG changeset patch
# User jwe
# Date 1077139226 0
#      Wed Feb 18 21:20:26 2004 +0000
# Node ID 02c748eb2ddc76ee6ed8fb2d098cab32b963bead
# Parent  fc316bde0053928962de93e48a45e38ed7bc78c9
[project @ 2004-02-18 21:20:26 by jwe]

diff --git a/scripts/control/base/dre.m b/scripts/control/base/dre.m
--- a/scripts/control/base/dre.m
+++ b/scripts/control/base/dre.m
@@ -72,22 +72,22 @@
 ## @item maxits
 ## number of refinement iterations (default=10)
 ## @end table
 ## @strong{Outputs}
 ## @table @var
 ## @item tvals
 ## time values at which @var{p}(@var{t}) is computed
 ## @item plist
-## list values of @var{p}(@var{t}); @var{plist} {  @var{ii} }
+## list values of @var{p}(@var{t}); @var{plist} @{ @var{ii} @}
 ## is @var{p}(@var{tvals}(@var{ii})).
 ##
 ## @item tvals
 ## @example
-## is selected so that || Plist{ii} - Plist{ii-1} || < Ptol
+## is selected so that || Plist@{ii@} - Plist@{ii-1@} || < Ptol
 ## for ii=2:length(tvals)
 ## @end example
 ## @end table
 ## @end deftypefn
 
 function [tvals, Plist] = dre (sys, Q, R, Qf, t0, tf, Ptol, maxits)
 
   if(nargin < 6 | nargin > 8 | nargout != 2)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2004-02-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* sighandlers.cc (my_friendly_exit): New optional arg, save_vars.
+	Only call save_user_variables if save_vars is true.
+	(sigint_handler): If interactive, offer to abort and save
+	workspace after three consecutive interrupts.
+	(sigint_handler, sigpipe_handler, sigfpe_handler):
+	Increment octave_interrupt_handler instead of setting it to 1.
+
 2004-02-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* version.h (OCTAVE_VERSION): Now 2.1.54.
 	(OCTAVE_API_VERSION): Now api-v5.
 
 	* Makefile.in (DLD_XSRC): Always include fftw_wisdom.cc.
 
 	* DLD-FUNCTIONS/fftw_wisdom.cc:
diff --git a/src/DLD-FUNCTIONS/fftn.cc b/src/DLD-FUNCTIONS/fftn.cc
--- a/src/DLD-FUNCTIONS/fftn.cc
+++ b/src/DLD-FUNCTIONS/fftn.cc
@@ -115,41 +115,41 @@ do_fftn (const octave_value_list &args, 
       gripe_wrong_type_arg (fcn, arg);
     }
 
   return retval;
 }
 
 DEFUN_DLD (fftn, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {} fftn (@var{a}, @var{siz})\n\
+@deftypefn {Loadable Function} {} fftn (@var{a}, @var{size})\n\
 Compute the N dimensional FFT of @var{a} using subroutines from\n"
 FFTSRC
-". The optional vector argument @var{siz} may be used specify the\n\
-dimensions of the array to be used. If an element of @var{siz} is\n\
+". The optional vector argument @var{size} may be used specify the\n\
+dimensions of the array to be used. If an element of @var{size} is\n\
 smaller than the corresponding dimension, then the dimension is\n\
 truncated prior to performing the FFT. Otherwise if an element\n\
-of @var{siz} is larger than the corresponding dimension @var{a}\n\
+of @var{size} is larger than the corresponding dimension @var{a}\n\
 is resized and padded with zeros.\n\
 @end deftypefn\n\
 @seealso {ifftn, fft, fft2, fftw_wisdom}")
 {
   return do_fftn (args, "fftn", 0);
 }
 
 DEFUN_DLD (ifftn, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {} ifftn (@var{a}, @var{siz})\n\
+@deftypefn {Loadable Function} {} ifftn (@var{a}, @var{size})\n\
 Compute the invesre N dimensional FFT of @var{a} using subroutines from\n"
 FFTSRC
-". The optional vector argument @var{siz} may be used specify the\n\
-dimensions of the array to be used. If an element of @var{siz} is\n\
+". The optional vector argument @var{size} may be used specify the\n\
+dimensions of the array to be used. If an element of @var{size} is\n\
 smaller than the corresponding dimension, then the dimension is\n\
 truncated prior to performing the inverse FFT. Otherwise if an element\n\
-of @var{siz} is larger than the corresponding dimension @var{a}\n\
+of @var{size} is larger than the corresponding dimension @var{a}\n\
 is resized and padded with zeros.\n\
 @end deftypefn\n\
 @seealso {fftn, ifft, ifft2, fftw_wisdom}")
 {
   return do_fftn (args, "ifftn", 1);
 }
 
 /*
diff --git a/src/DLD-FUNCTIONS/fftw_wisdom.cc b/src/DLD-FUNCTIONS/fftw_wisdom.cc
--- a/src/DLD-FUNCTIONS/fftw_wisdom.cc
+++ b/src/DLD-FUNCTIONS/fftw_wisdom.cc
@@ -103,19 +103,22 @@ Octave.\n\
       if (nargin != 1)
 	{
 	  double dval = args (1).double_value ();
 	  if (NINT (dval) != 0)
 	    overwrite = true;
 	}
 
       std::string wisdom = octave_env::make_absolute
-	(Vload_path_dir_path.find_first_of (args(0).string_value ().c_str ()),
+	(Vload_path_dir_path.find_first_of (args(0).string_value ()),
 	 octave_env::getcwd ());
 
+      // XXX FIXME XXX -- should probably protect FILE* resources with
+      // auto_ptr or similar...
+
       if (wisdom.empty () || overwrite)
 	{
 	  FILE *ofile = fopen (wisdom.c_str (), "wb");
 	  fftw_export_wisdom_to_file (ofile);
 	  fclose (ofile);
 	}
       else
 	{
@@ -185,14 +188,14 @@ Octave.\n\
 	}
       else
 	error ("fftw_wisdom: error running %s", Vfftw_wisdom_prog.c_str ());
 
     }
 
 #else
 
-  error ("fftw_wisdom: this copy of Octave was not configured to use FFTW3");
+  warning ("fftw_wisdom: this copy of Octave was not configured to use FFTW3");
 
 #endif
 
   return retval;
 }
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -41,16 +41,17 @@ Software Foundation, 59 Temple Place - S
 
 #include "defun.h"
 #include "error.h"
 #include "load-save.h"
 #include "oct-map.h"
 #include "pager.h"
 #include "pt-bp.h"
 #include "sighandlers.h"
+#include "sysdep.h"
 #include "syswait.h"
 #include "toplev.h"
 #include "utils.h"
 
 // Nonzero means we have already printed a message for this series of
 // SIGPIPES.  We assume that the writer will eventually give up.
 int pipe_handler_error_count = 0;
 
@@ -88,17 +89,18 @@ static bool Vsigterm_dumps_octave_core;
   octave_set_signal_handler (sig, SIG_ACK)
 #define ACK_USES_SIG 1
 #else
 #define MAYBE_ACK_SIGNAL(sig) \
   do { } while (0)
 #endif
 
 static void
-my_friendly_exit (const char *sig_name, int sig_number)
+my_friendly_exit (const char *sig_name, int sig_number,
+		  bool save_vars = true)
 {
   static bool been_there_done_that = false;
 
   if (been_there_done_that)
     {
 #if defined (SIGABRT)
       octave_set_signal_handler (SIGABRT, SIG_DFL);
 #endif
@@ -107,17 +109,18 @@ my_friendly_exit (const char *sig_name, 
       abort ();
     }
   else
     {
       been_there_done_that = true;
 
       std::cerr << "panic: " << sig_name << " -- stopping myself...\n";
 
-      save_user_variables ();
+      if (save_vars)
+	save_user_variables ();
 
       if (sig_number < 0)
 	exit (1);
       else
 	{
 	  octave_set_signal_handler (sig_number, SIG_DFL);
 
 #if defined (HAVE_RAISE)
@@ -230,17 +233,17 @@ sigfpe_handler (int /* sig */)
   MAYBE_REINSTALL_SIGHANDLER (SIGFPE, sigfpe_handler);
 
   std::cerr << "error: floating point exception -- trying to return to prompt\n";
 
   // XXX FIXME XXX -- will setting octave_interrupt_state really help
   // here?
 
   if (can_interrupt)
-    octave_interrupt_state = 1;
+    octave_interrupt_state++;
 
   SIGHANDLER_RETURN (0);
 }
 #endif /* defined(__alpha__) */
 #endif /* defined(SIGFPE) */
 
 #if defined (SIGHUP) || defined (SIGTERM)
 static RETSIGTYPE
@@ -298,21 +301,17 @@ sigwinch_handler (int /* sig */)
 
 // Handle SIGINT by restarting the parser (see octave.cc).
 //
 // This also has to work for SIGBREAK (on systems that have it), so we
 // use the value of sig, instead of just assuming that it is called
 // for SIGINT only.
 
 static RETSIGTYPE
-#if defined (ACK_USES_SIG) || defined (REINSTALL_USES_SIG)
 sigint_handler (int sig)
-#else
-sigint_handler (int)
-#endif
 {
   MAYBE_ACK_SIGNAL (sig);
 
   MAYBE_REINSTALL_SIGHANDLER (sig, sigint_handler);
 
   if (! octave_initialized)
     exit (1);
 
@@ -329,17 +328,57 @@ sigint_handler (int)
 	  else
 	    // Clear the flag and do normal interrupt stuff.
 	    octave_debug_on_interrupt_state = false;
 	}
 
       if (octave_interrupt_immediately)
 	octave_jump_to_enclosing_context ();
       else
-	octave_interrupt_state = 1;
+	{
+	  octave_interrupt_state++;
+
+	  if (interactive)
+	    {
+	      if (octave_interrupt_state > 3)
+		{
+		  // XXX FIXME XXX -- might want to attempt to flush
+		  // any pending input first...
+
+		  std::cerr << "abort [y/N]? ";
+
+		  int c = octave_kbhit ();
+
+		  std::cerr << static_cast<char> (c) << std::endl;
+
+		  if (c == 'y' || c == 'Y')
+		    {
+		      std::cerr << "save top-level workspace [y/N]? ";
+
+		      c = octave_kbhit ();
+
+		      std::cerr << static_cast<char> (c) << std::endl;
+
+		      my_friendly_exit (sys_siglist[sig], sig,
+					(c == 'y' || c == 'Y'));
+		    }
+		  else
+		    {
+		      // We will still eventually interrupt and jump to
+		      // the top level even if no additional interrupts
+		      // happen, but we will have to wait until it is
+		      // safe to do so.  It will take 3 more
+		      // consecutive interrupts before we offer to
+		      // abort again.
+
+		      octave_interrupt_state = 1;
+		    }
+		}
+	    }
+	}
     }
 
   SIGHANDLER_RETURN (0);
 }
 
 #ifdef SIGPIPE
 static RETSIGTYPE
 sigpipe_handler (int /* sig */)
@@ -352,17 +391,17 @@ sigpipe_handler (int /* sig */)
     std::cerr << "warning: broken pipe\n";
 
   // Don't loop forever on account of this.
 
   // XXX FIXME XXX -- will setting octave_interrupt_state really help
   // here?
 
   if (pipe_handler_error_count  > 100)
-    octave_interrupt_state = 1;
+    octave_interrupt_state++;
 
   SIGHANDLER_RETURN (0);
 }
 #endif /* defined(SIGPIPE) */
 
 octave_interrupt_handler
 octave_catch_interrupts (void)
 {
