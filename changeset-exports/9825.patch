# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1258112086 -3600
#      Fri Nov 13 12:34:46 2009 +0100
# Node ID 7483fe200fab75a05773310d21207a3f5779b342
# Parent  6631c61a4a4e13d926b9b919f9fea72630e48d8b
narrow complex values with negative zero imaginary parts

diff --git a/liboctave/CDiagMatrix.cc b/liboctave/CDiagMatrix.cc
--- a/liboctave/CDiagMatrix.cc
+++ b/liboctave/CDiagMatrix.cc
@@ -407,26 +407,17 @@ ComplexDiagMatrix::pseudo_inverse (void)
     }
 
   return retval;
 }
 
 bool
 ComplexDiagMatrix::all_elements_are_real (void) const
 {
-  octave_idx_type len = length ();
-  for (octave_idx_type i = 0; i < len; i++)
-    {
-      double ip = std::imag (elem (i, i));
-
-      if (ip != 0.0 || lo_ieee_signbit (ip))
-        return false;
-    }
-
-  return true;
+  return mx_inline_all_real (length (), data ());
 }
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
 ComplexDiagMatrix&
 ComplexDiagMatrix::operator += (const DiagMatrix& a)
 {
   octave_idx_type r = rows ();
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -3113,31 +3113,17 @@ ComplexMatrix::any_element_is_inf_or_nan
   return false;
 }
 
 // Return true if no elements have imaginary components.
 
 bool
 ComplexMatrix::all_elements_are_real (void) const
 {
-  octave_idx_type nr = rows ();
-  octave_idx_type nc = cols ();
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    {
-      for (octave_idx_type i = 0; i < nr; i++)
-	{
-	  double ip = std::imag (elem (i, j));
-
-	  if (ip != 0.0 || lo_ieee_signbit (ip))
-	    return false;
-	}
-    }
-
-  return true;
+  return mx_inline_all_real (numel (), data ());
 }
 
 // Return nonzero if any element of CM has a non-integer real or
 // imaginary part.  Also extract the largest and smallest (real or
 // imaginary) values and return them in MAX_VAL and MIN_VAL. 
 
 bool
 ComplexMatrix::all_integers (double& max_val, double& min_val) const
diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -533,27 +533,17 @@ ComplexNDArray::any_element_is_inf_or_na
   return false;
 }
 
 // Return true if no elements have imaginary components.
 
 bool
 ComplexNDArray::all_elements_are_real (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      double ip = std::imag (elem (i));
-
-      if (ip != 0.0 || lo_ieee_signbit (ip))
-	return false;
-    }
-
-  return true;
+  return mx_inline_all_real (numel (), data ());
 }
 
 // Return nonzero if any element of CM has a non-integer real or
 // imaginary part.  Also extract the largest and smallest (real or
 // imaginary) values and return them in MAX_VAL and MIN_VAL. 
 
 bool
 ComplexNDArray::all_integers (double& max_val, double& min_val) const
diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -48,16 +48,17 @@ along with Octave; see the file COPYING.
 #include "oct-sparse.h"
 #include "sparse-util.h"
 #include "SparseCmplxCHOL.h"
 #include "SparseCmplxQR.h"
 
 #include "Sparse-diag-op-defs.h"
 
 #include "Sparse-perm-op-defs.h"
+#include "mx-inlines.cc"
 
 // Define whether to use a basic QR solver or one that uses a Dulmange
 // Mendelsohn factorization to seperate the problem into under-determined,
 // well-determined and over-determined parts and solves them seperately
 #ifndef USE_QRSOLVE
 #include "sparse-dmsolve.cc"
 #endif
 
@@ -7263,27 +7264,17 @@ SparseComplexMatrix::any_element_is_inf_
   return false;
 }
 
 // Return true if no elements have imaginary components.
 
 bool
 SparseComplexMatrix::all_elements_are_real (void) const
 {
-  octave_idx_type nel = nnz ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      double ip = std::imag (data (i));
-      
-      if (ip != 0.0 || lo_ieee_signbit (ip))
-	return false;
-    }
-
-  return true;
+  return mx_inline_all_real (nnz (), data ());
 }
 
 // Return nonzero if any element of CM has a non-integer real or
 // imaginary part.  Also extract the largest and smallest (real or
 // imaginary) values and return them in MAX_VAL and MIN_VAL. 
 
 bool
 SparseComplexMatrix::all_integers (double& max_val, double& min_val) const
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,20 @@
+2009-11-13  Jaroslav Hajek  <highegg@gmail.com>
+
+	* CNDArray.cc (ComplexNDArray::all_elements_are_real): 
+	Use mx_inline_all_real.
+	* CMatrix.cc (ComplexMatrix::all_elements_are_real): Ditto.
+	* fCNDArray.cc (FloatComplexNDArray::all_elements_are_real): 
+	Use mx_inline_all_real.
+	* fCMatrix.cc (FloatComplexMatrix::all_elements_are_real): Ditto.
+	* CDiagMatrix.cc (ComplexDiagMatrix::all_elements_are_real): Ditto.
+	* fCDiagMatrix.cc (FloatComplexDiagMatrix::all_elements_are_real): Ditto.
+	* CSparse.cc (SparseComplexMatrix::all_elements_are_real): Ditto.
+
 2009-11-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* base-aepbal.h (permuting_vector): Fix lower part swapping.
 
 2009-11-13  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.am (liboctave_la_CPPFLAGS): Add @OCTAVE_DLL_DEFS@ to
 	the list of flags.
diff --git a/liboctave/fCDiagMatrix.cc b/liboctave/fCDiagMatrix.cc
--- a/liboctave/fCDiagMatrix.cc
+++ b/liboctave/fCDiagMatrix.cc
@@ -407,26 +407,17 @@ FloatComplexDiagMatrix::pseudo_inverse (
     }
 
   return retval;
 }
 
 bool
 FloatComplexDiagMatrix::all_elements_are_real (void) const
 {
-  octave_idx_type len = length ();
-  for (octave_idx_type i = 0; i < len; i++)
-    {
-      float ip = std::imag (elem (i, i));
-
-      if (ip != 0.0 || lo_ieee_signbit (ip))
-        return false;
-    }
-
-  return true;
+  return mx_inline_all_real (length (), data ());
 }
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
 FloatComplexDiagMatrix&
 FloatComplexDiagMatrix::operator += (const FloatDiagMatrix& a)
 {
   octave_idx_type r = rows ();
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -3106,31 +3106,17 @@ FloatComplexMatrix::any_element_is_inf_o
   return false;
 }
 
 // Return true if no elements have imaginary components.
 
 bool
 FloatComplexMatrix::all_elements_are_real (void) const
 {
-  octave_idx_type nr = rows ();
-  octave_idx_type nc = cols ();
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    {
-      for (octave_idx_type i = 0; i < nr; i++)
-	{
-	  float ip = std::imag (elem (i, j));
-
-	  if (ip != 0.0 || lo_ieee_signbit (ip))
-	    return false;
-	}
-    }
-
-  return true;
+  return mx_inline_all_real (numel (), data ());
 }
 
 // Return nonzero if any element of CM has a non-integer real or
 // imaginary part.  Also extract the largest and smallest (real or
 // imaginary) values and return them in MAX_VAL and MIN_VAL. 
 
 bool
 FloatComplexMatrix::all_integers (float& max_val, float& min_val) const
diff --git a/liboctave/fCNDArray.cc b/liboctave/fCNDArray.cc
--- a/liboctave/fCNDArray.cc
+++ b/liboctave/fCNDArray.cc
@@ -528,27 +528,17 @@ FloatComplexNDArray::any_element_is_inf_
   return false;
 }
 
 // Return true if no elements have imaginary components.
 
 bool
 FloatComplexNDArray::all_elements_are_real (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      float ip = std::imag (elem (i));
-
-      if (ip != 0.0 || lo_ieee_signbit (ip))
-	return false;
-    }
-
-  return true;
+  return mx_inline_all_real (numel (), data ());
 }
 
 // Return nonzero if any element of CM has a non-integer real or
 // imaginary part.  Also extract the largest and smallest (real or
 // imaginary) values and return them in MAX_VAL and MIN_VAL. 
 
 bool
 FloatComplexNDArray::all_integers (float& max_val, float& min_val) const
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2009-11-13  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-complex.cc (octave_complex::try_narrowing_conversion): Don't
+	check signbit.
+	* ov-flt-complex.cc (octave_float_complex::try_narrowing_conversion):
+	Ditto.
+	* ov-cx-mat.cc (octave_complex_matrix::try_narrowing_conversion):
+	Simplify. Don't check signbit.
+	* ov-flt-cx-mat.cc
+	(octave_float_complex_matrix::try_narrowing_conversion): Ditto.
+
 2009-11-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-re-mat.cc (do_rc_map): New static function.
 	(octave_matrix::map): Use it here.
 	* ov-flt-re-mat.cc (do_rc_map): New static function.
 	(octave_float_matrix::map): Use it here.
 
 2009-11-17  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/ov-complex.cc b/src/ov-complex.cc
--- a/src/ov-complex.cc
+++ b/src/ov-complex.cc
@@ -72,17 +72,17 @@ octave_complex::numeric_demotion_functio
 
 octave_base_value *
 octave_complex::try_narrowing_conversion (void)
 {
   octave_base_value *retval = 0;
 
   double im = std::imag (scalar);
 
-  if (im == 0.0 && ! lo_ieee_signbit (im))
+  if (im == 0.0)
     retval = new octave_scalar (std::real (scalar));
 
   return retval;
 }
 
 octave_value
 octave_complex::do_index_op (const octave_value_list& idx, bool resize_ok)
 {
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -77,38 +77,24 @@ octave_complex_matrix::numeric_demotion_
                                            octave_float_complex_matrix::static_type_id ());
 }
 
 octave_base_value *
 octave_complex_matrix::try_narrowing_conversion (void)
 {
   octave_base_value *retval = 0;
 
-  if (matrix.ndims () == 2)
+  if (matrix.numel () == 1)
     {
-      ComplexMatrix cm = matrix.matrix_value ();
-
-      octave_idx_type nr = cm.rows ();
-      octave_idx_type nc = cm.cols ();
-
-      if (nr == 1 && nc == 1)
-	{
-	  Complex c = matrix (0, 0);
+      Complex c = matrix (0);
 
-	  double im = std::imag (c);
-
-	  if (im == 0.0 && ! lo_ieee_signbit (im))
-	    retval = new octave_scalar (std::real (c));
-	  else
-	    retval = new octave_complex (c);
-	}
-      else if (nr == 0 || nc == 0)
-	retval = new octave_matrix (Matrix (nr, nc));
-      else if (cm.all_elements_are_real ())
-	retval = new octave_matrix (::real (cm));
+      if (std::imag (c) == 0.0)
+        retval = new octave_scalar (std::real (c));
+      else
+        retval = new octave_complex (c);
     }
   else if (matrix.all_elements_are_real ())
     retval = new octave_matrix (::real (matrix));
 
   return retval;
 }
 
 double
diff --git a/src/ov-flt-complex.cc b/src/ov-flt-complex.cc
--- a/src/ov-flt-complex.cc
+++ b/src/ov-flt-complex.cc
@@ -57,17 +57,17 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
 
 octave_base_value *
 octave_float_complex::try_narrowing_conversion (void)
 {
   octave_base_value *retval = 0;
 
   float im = std::imag (scalar);
 
-  if (im == 0.0 && ! lo_ieee_signbit (im))
+  if (im == 0.0)
     retval = new octave_float_scalar (std::real (scalar));
 
   return retval;
 }
 
 octave_value
 octave_float_complex::do_index_op (const octave_value_list& idx, bool resize_ok)
 {
diff --git a/src/ov-flt-cx-mat.cc b/src/ov-flt-cx-mat.cc
--- a/src/ov-flt-cx-mat.cc
+++ b/src/ov-flt-cx-mat.cc
@@ -66,38 +66,24 @@ DEFINE_OCTAVE_ALLOCATOR (octave_float_co
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_float_complex_matrix,
 				     "float complex matrix", "single");
 
 octave_base_value *
 octave_float_complex_matrix::try_narrowing_conversion (void)
 {
   octave_base_value *retval = 0;
 
-  if (matrix.ndims () == 2)
+  if (matrix.numel () == 1)
     {
-      FloatComplexMatrix cm = matrix.matrix_value ();
-
-      octave_idx_type nr = cm.rows ();
-      octave_idx_type nc = cm.cols ();
-
-      if (nr == 1 && nc == 1)
-	{
-	  FloatComplex c = matrix (0, 0);
+      FloatComplex c = matrix (0);
 
-	  float im = std::imag (c);
-
-	  if (im == 0.0 && ! lo_ieee_signbit (im))
-	    retval = new octave_float_scalar (std::real (c));
-	  else
-	    retval = new octave_float_complex (c);
-	}
-      else if (nr == 0 || nc == 0)
-	retval = new octave_float_matrix (FloatMatrix (nr, nc));
-      else if (cm.all_elements_are_real ())
-	retval = new octave_float_matrix (::real (cm));
+      if (std::imag (c) == 0.0)
+        retval = new octave_float_scalar (std::real (c));
+      else
+        retval = new octave_float_complex (c);
     }
   else if (matrix.all_elements_are_real ())
     retval = new octave_float_matrix (::real (matrix));
 
   return retval;
 }
 
 double
