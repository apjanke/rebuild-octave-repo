# HG changeset patch
# User jwe
# Date 1152331006 0
#      Sat Jul 08 03:56:46 2006 +0000
# Node ID 70b3f8f1a7939db56d890c021be88986eb74b66c
# Parent  84ca47e311b3d2fb13fd7b8bc87a6cd0bbba7107
[project @ 2006-07-08 03:54:17 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2006-07-07  John W. Eaton  <jwe@octave.org>
+
+	* miscellaneous/orderfields.m: New file.
+
 2006-06-30  John W. Eaton  <jwe@octave.org>
 
 	* time/datevec.m: Make another attempt to account for precision of
 	datenum format.
 
 2006-06-29  John W. Eaton  <jwe@octave.org>
 
 	* miscellaneous/dump_prefs.m: Remove obsolete symbols from the list.
diff --git a/scripts/miscellaneous/orderfields.m b/scripts/miscellaneous/orderfields.m
new file mode 100644
--- /dev/null
+++ b/scripts/miscellaneous/orderfields.m
@@ -0,0 +1,96 @@
+## Copyright (C) 2006  Paul Kienzle
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 2, or (at your option)
+## any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, write to the Free
+## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+## 02110-1301, USA.
+
+## -*- texinfo -*-
+## @deftypefn {Built-in Function} {[@var{t}, @var{p}] =} orderfields (@var{s1}, @var{s2})
+## Return a struct with fields arranged alphabetically or as specified
+## by @var{s2} and a corresponding permutation vector.
+##
+## Given one struct, arrange field names in @var{s1} alphabetically.
+##
+## Given two structs, arrange field names in @var{s1} as they appear
+## in @var{s2}.  The second argument may also specify the order in
+## a permutation vector or a cell array of strings.
+##
+## @seealso{getfield, rmfield, isfield, isstruct, fieldnames, struct}
+## @end deftypefn
+
+## Author: Paul Kienzle <pkienzle@users.sf.net>
+## Adapted-By: jwe
+
+function [t, p] = orderfields (s1, s2)
+
+  if (nargin == 1 || nargin == 2)
+    if (! isstruct (s1))
+      error ("orderfields: expecting argument to be a struct");
+    endif
+  else
+    print_usage ();
+  endif
+
+  if (nargin == 1)
+    ## One structure: return the fields in alphabetical order.
+    if (isstruct(s1))
+      names = sort (fieldnames (s1));
+    endif
+  elseif (nargin == 2)
+    if (isstruct(s2))
+      ## Two structures: return the fields in the order of s2.
+      names = fieldnames (s2);
+      if (! isequal (sort (fieldnames (s1)), sort (names)))
+	error ("orderfields: s1 and s2 do not have same fields");
+      endif
+    elseif (iscellstr (s2))
+      ## A structure and a list of fields: order by the list of fields.
+      t1 = sort (fieldnames (s1));
+      t2 = sort (s2(:));
+      if (! isequal (t1, t2))
+	error ("orderfields: invalid cell array of field names");
+      endif
+      names = s2;
+    elseif (isvector (s2))
+      ## A structure and a permutation vector: permute the order of s1.
+      names = fieldnames (s1);
+      t1 = sort (s2);
+      t1 = t1(:)';
+      t2 = 1:length (names);
+      if (! isequal (t1, t2))
+	error ("orderfields: invalid permutation vector");
+      endif
+      names = names(s2);
+    endif
+  endif
+
+  ## Find permutation vector which converts the original name order
+  ## into the new name order.  Note: could save a couple of sorts
+  ## in some cases, but performance isn't critical.
+
+  if (nargout == 2)
+    [oldel, oldidx] = sort (fieldnames (s1));
+    [newel, newidx] = sort (names);
+    p = oldidx(newidx);
+  endif
+
+  ## Permute the names in the structure.
+  for i = 1:length (names)
+    el = names(i);
+    t(:).(el) = s1(:).(el);
+  endfor
+
+endfunction
diff --git a/scripts/miscellaneous/setfield.m b/scripts/miscellaneous/setfield.m
--- a/scripts/miscellaneous/setfield.m
+++ b/scripts/miscellaneous/setfield.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Built-in Function} {} [@var{k1},..., @var{v1}] =
-## @code{setfield (@var{s}, 'k1',..., 'v1')} sets field members in a structure
+## @deftypefn {Built-in Function} {[@var{k1},..., @var{v1}] =} setfield (@var{s}, @var{k1}, @var{v1}, @dots{})
+## Set field members in a structure.
 ##
 ## @example
 ## @group
 ## oo(1,1).f0= 1;
 ## oo = setfield(oo,@{1,2@},'fd',@{3@},'b', 6);
 ## oo(1,2).fd(3).b == 6
 ## @result{} ans = 1
 ## @end group
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,24 @@
+2006-07-07  John W. Eaton  <jwe@octave.org>
+
+	* ov.h (octave_value::is_bool_scalar): New function.
+	* ov-base.h (octave_base_value::is_bool_scalar): New function.
+	* ov-bool.h (octave_bool::is_bool_scalar): New function.
+
+	* oct-map.cc (Octave_map::keys): Use assert.
+	(Octave_map::assign): Avoid inserting new key in map unless
+	assignment to cell succeeds.
+
+	* oct-map.h (Octave_map::del): Only touch key_list if map contains key.
+	Assert that key_list contains key.
+
+	* oct-map.h (Octave_map::maybe_add_to_key_list): For efficiency,
+	check map, not key_list.  From Paul Kienzle  <pkienzle@users.sf.net>.
+
 2006-07-06  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/__glpk__.cc (F__glpk__): Declare mrowsc volatile.
 
 	* ov-struct.cc (octave_struct::print_raw): Print keys in key_list
 	order.
 
 	* oct-map.h (Octave_map::key_list): New data member.
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -93,16 +93,18 @@ Octave_map::keys (void) const
 {
   if (length () != key_list.size ())
     {
       std::cerr << "length () = " << length () << std::endl;
       std::cerr << "key_list.size () = " << key_list.size () << std::endl;
       abort ();
     }
 
+  assert (length () == key_list.size ());
+
   return string_vector (key_list);
 }
 
 Octave_map
 Octave_map::transpose (void) const
 {
   assert (ndims () == 2);
 
@@ -178,19 +180,19 @@ Octave_map::resize (const dim_vector& dv
 
 Octave_map
 Octave_map::concat (const Octave_map& rb, const Array<octave_idx_type>& ra_idx)
 {
   Octave_map retval;
 
   if (length() == rb.length())
     {
-      for (Octave_map::const_iterator pa = begin (); pa != end (); pa++)
+      for (const_iterator pa = begin (); pa != end (); pa++)
 	{
-	  Octave_map::const_iterator pb = rb.seek (key(pa));
+	  const_iterator pb = rb.seek (key(pa));
 
 	  if (pb == rb.end ())
 	    {
 	      error ("field name mismatch in structure concatenation");
 	      break;
 	    }
 	
 	  retval.assign (key(pa),
@@ -235,17 +237,17 @@ Octave_map::maybe_delete_elements (const
   octave_idx_type len = t_keys.length ();
 
   if (len > 0)
     {
       for (octave_idx_type i = 0; i < len; i++)
 	{
 	  std::string k = t_keys[i];
 
-	  map[k] = contents (k).assign (idx, Cell());
+	  map[k] = contents(k).assign (idx, Cell());
 
 	  if (error_state)
 	    break;
 	}
 
       if (!error_state)
 	dimensions = contents(t_keys[0]).dims();
     }
@@ -309,17 +311,20 @@ common_size (const dim_vector& a, const 
 
   return retval;
 }
 
 Octave_map&
 Octave_map::assign (const octave_value_list& idx, const std::string& k,
 		    const Cell& rhs)
 {
-  Cell tmp = map[k];
+  Cell tmp;
+
+  if (contains (k))
+    tmp = map[k];
 
   octave_value fill_value = Matrix ();
 
   tmp.assign (idx, rhs, fill_value);
 
   if (! error_state)
     {
       dim_vector rhs_dims = tmp.dims ();
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -88,22 +88,27 @@ Octave_map
   // This is the number of keys.
   octave_idx_type length (void) const { return map.size (); }
 
   int empty (void) const { return map.empty (); }
 
   void del (const std::string& k)
     {
       iterator p = map.find (k);
+
       if (p != map.end ())
-	map.erase (p);
+	{
+	  map.erase (p);
 
-      key_list_iterator q = find (key_list.begin (), key_list.end (), k);
-      if (q != key_list.end ())
-	key_list.erase (q);
+	  key_list_iterator q = find (key_list.begin (), key_list.end (), k);
+
+	  assert (q != key_list.end ());
+
+	  key_list.erase (q);
+	}
     }
 
   iterator begin (void) { return iterator (map.begin ()); }
   const_iterator begin (void) const { return const_iterator (map.begin ()); }
 
   iterator end (void) { return iterator (map.end ()); }
   const_iterator end (void) const { return const_iterator (map.end ()); }
 
@@ -173,19 +178,17 @@ private:
   // are added for compatibility with you know what.
   std::list<std::string> key_list;
 
   // The current size.
   mutable dim_vector dimensions;
 
   void maybe_add_to_key_list (const std::string& k)
   {
-    key_list_iterator p = find (key_list.begin (), key_list.end (), k);
-
-    if (p == key_list.end ())
+    if (! contains (k))
       key_list.push_back (k);
   }
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -199,16 +199,18 @@ public:
   virtual bool is_real_matrix (void) const { return false; }
 
   virtual bool is_real_nd_array (void) const { return false; }
 
   virtual bool is_complex_scalar (void) const { return false; }
 
   virtual bool is_complex_matrix (void) const { return false; }
 
+  virtual bool is_bool_scalar (void) const { return false; }
+
   virtual bool is_bool_matrix (void) const { return false; }
 
   virtual bool is_char_matrix (void) const { return false; }
 
   virtual bool is_string (void) const { return false; }
 
   virtual bool is_sq_string (void) const { return false; }
 
diff --git a/src/ov-bool.h b/src/ov-bool.h
--- a/src/ov-bool.h
+++ b/src/ov-bool.h
@@ -68,16 +68,18 @@ public:
   type_conv_fcn numeric_conversion_function (void) const;
 
   octave_value do_index_op (const octave_value_list& idx, int resize_ok);
 
   idx_vector index_vector (void) const { return idx_vector (scalar); }
 
   bool is_real_scalar (void) const { return true; }
 
+  bool is_bool_scalar (void) const { return true; }
+
   bool is_bool_type (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const { return scalar; }
 
   bool valid_as_zero_index (void) const { return ! scalar; }
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -395,16 +395,19 @@ public:
     { return rep->is_real_nd_array (); }
 
   bool is_complex_scalar (void) const
     { return rep->is_complex_scalar (); }
 
   bool is_complex_matrix (void) const
     { return rep->is_complex_matrix (); }
 
+  bool is_bool_scalar (void) const
+    { return rep->is_bool_scalar (); }
+
   bool is_bool_matrix (void) const
     { return rep->is_bool_matrix (); }
 
   bool is_char_matrix (void) const
     { return rep->is_char_matrix (); }
 
   bool is_string (void) const
     { return rep->is_string (); }
