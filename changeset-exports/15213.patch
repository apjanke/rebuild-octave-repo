# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1345667455 14400
#      Wed Aug 22 16:30:55 2012 -0400
# Node ID 336f424066714e4d4a5a4d7f6364d137106f0219
# Parent  4bbd3bbb89126cff32bd1b572728a8c5c6c57d37
use numeric_limits functions instead of DBL_MIN, DBL_MAX, etc.

* __glpk__.cc, ls-mat5.cc, data.cc, ls-oct-ascii.h, pr-output.cc,
lo-utils.cc: Replace all uses of DBL_MIN, DBL_MAX, DBL_EPSILON,
FLT_MIN, FLT_MAX, and FLT_EPSILON with numeric_limits functions.

* variables.h (set_internal_variable): Use +/- octave_Inf as default
values for minval and maxval.

diff --git a/libinterp/dldfcn/__glpk__.cc b/libinterp/dldfcn/__glpk__.cc
--- a/libinterp/dldfcn/__glpk__.cc
+++ b/libinterp/dldfcn/__glpk__.cc
@@ -113,18 +113,18 @@ int IParam[NIntP] = {
 };
 
 
 double lpxRealParam[NRealP] = {
   0.07,
   1e-7,
   1e-7,
   1e-9,
-  -DBL_MAX,
-  DBL_MAX,
+  -std::numeric_limits<double>::max (),
+  std::numeric_limits<double>::max (),
   -1.0,
   0.0,
   1e-6,
   1e-7
 };
 
 int RParam[NRealP] = {
   LPX_K_RELAX,
diff --git a/libinterp/interp-core/ls-mat5.cc b/libinterp/interp-core/ls-mat5.cc
--- a/libinterp/interp-core/ls-mat5.cc
+++ b/libinterp/interp-core/ls-mat5.cc
@@ -1934,17 +1934,17 @@ save_mat5_array_length (const double* va
       if (save_as_floats)
         {
           bool too_large_for_float = false;
           for (octave_idx_type i = 0; i < nel; i++)
             {
               double tmp = val[i];
 
               if (! (xisnan (tmp) || xisinf (tmp))
-                  && fabs (tmp) > FLT_MAX)
+                  && fabs (tmp) > std::numeric_limits<float>::max ())
                 {
                   too_large_for_float = true;
                   break;
                 }
             }
 
           if (!too_large_for_float)
             size = 4;
diff --git a/libinterp/interpfcn/data.cc b/libinterp/interpfcn/data.cc
--- a/libinterp/interpfcn/data.cc
+++ b/libinterp/interpfcn/data.cc
@@ -4115,58 +4115,61 @@ either \"double\" or \"single\".\n\
 
           if (! error_state)
             {
               val = ::fabsf (val);
               if (xisnan (val) || xisinf (val))
                 retval = fill_matrix (octave_value ("single"),
                                       lo_ieee_nan_value (),
                                       lo_ieee_float_nan_value (), "eps");
-              else if (val < FLT_MIN)
+              else if (val < std::numeric_limits<float>::min ())
                 retval = fill_matrix (octave_value ("single"), 0e0,
                                       powf (2.0, -149e0), "eps");
               else
                 {
                   int expon;
                   frexpf (val, &expon);
                   val = std::pow (static_cast <float> (2.0),
                                   static_cast <float> (expon - 24));
-                  retval = fill_matrix (octave_value ("single"), DBL_EPSILON,
+                  retval = fill_matrix (octave_value ("single"),
+                                        std::numeric_limits<double>::epsilon (),
                                         val, "eps");
                 }
             }
         }
       else
         {
           double val = args(0).double_value ();
 
           if (! error_state)
             {
               val = ::fabs (val);
               if (xisnan (val) || xisinf (val))
                 retval = fill_matrix (octave_value_list (),
                                       lo_ieee_nan_value (),
                                       lo_ieee_float_nan_value (), "eps");
-              else if (val < DBL_MIN)
+              else if (val < std::numeric_limits<double>::min ())
                 retval = fill_matrix (octave_value_list (),
                                       pow (2.0, -1074e0), 0e0, "eps");
               else
                 {
                   int expon;
                   frexp (val, &expon);
                   val = std::pow (static_cast <double> (2.0),
                                   static_cast <double> (expon - 53));
                   retval = fill_matrix (octave_value_list (), val,
-                                        FLT_EPSILON, "eps");
+                                        std::numeric_limits<float>::epsilon (),
+                                        "eps");
                 }
             }
         }
     }
   else
-    retval = fill_matrix (args, DBL_EPSILON, FLT_EPSILON, "eps");
+    retval = fill_matrix (args, std::numeric_limits<double>::epsilon (),
+                          std::numeric_limits<float>::epsilon (), "eps");
 
   return retval;
 }
 
 /*
 %!assert (eps (1/2), 2^(-53))
 %!assert (eps (1), 2^(-52))
 %!assert (eps (2), 2^(-51))
@@ -4254,17 +4257,18 @@ When called with a single argument, retu
 specified.  When called with more than one scalar argument the first two\n\
 arguments are taken as the number of rows and columns and any further\n\
 arguments specify additional matrix dimensions.\n\
 The optional argument @var{class} specifies the return type and may be\n\
 either \"double\" or \"single\".\n\
 @seealso{realmin, intmax, bitmax, eps}\n\
 @end deftypefn")
 {
-  return fill_matrix (args, DBL_MAX, FLT_MAX, "realmax");
+  return fill_matrix (args, std::numeric_limits<double>::max (),
+                      std::numeric_limits<float>::max (), "realmax");
 }
 
 DEFUN (realmin, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} realmin\n\
 @deftypefnx {Built-in Function} {} realmin (@var{n})\n\
 @deftypefnx {Built-in Function} {} realmin (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} realmin (@var{n}, @var{m}, @var{k}, @dots{})\n\
@@ -4287,17 +4291,18 @@ When called with a single argument, retu
 specified.  When called with more than one scalar argument the first two\n\
 arguments are taken as the number of rows and columns and any further\n\
 arguments specify additional matrix dimensions.\n\
 The optional argument @var{class} specifies the return type and may be\n\
 either \"double\" or \"single\".\n\
 @seealso{realmax, intmin, eps}\n\
 @end deftypefn")
 {
-  return fill_matrix (args, DBL_MIN, FLT_MIN, "realmin");
+  return fill_matrix (args, std::numeric_limits<double>::min (),
+                      std::numeric_limits<float>::min (), "realmin");
 }
 
 DEFUN (I, args, ,
   "-*- texinfo -*-\n\
 @c List other forms of function in documentation index\n\
 @findex i\n\
 @findex j\n\
 @findex J\n\
diff --git a/libinterp/interpfcn/ls-oct-ascii.h b/libinterp/interpfcn/ls-oct-ascii.h
--- a/libinterp/interpfcn/ls-oct-ascii.h
+++ b/libinterp/interpfcn/ls-oct-ascii.h
@@ -33,17 +33,17 @@ along with Octave; see the file COPYING.
 #include "ls-ascii-helper.h"
 
 // Flag for cell elements
 #define CELL_ELT_TAG "<cell-element>"
 
 // Used when converting Inf to something that gnuplot can read.
 
 #ifndef OCT_RBV
-#define OCT_RBV DBL_MAX / 100.0
+#define OCT_RBV (std::numeric_limits<double>::max () / 100.0)
 #endif
 
 extern OCTINTERP_API std::string
 extract_keyword (std::istream& is, const char *keyword,
                  const bool next_only = false);
 
 extern OCTINTERP_API std::string
 read_ascii_data (std::istream& is, const std::string& filename, bool& global,
diff --git a/libinterp/interpfcn/pr-output.cc b/libinterp/interpfcn/pr-output.cc
--- a/libinterp/interpfcn/pr-output.cc
+++ b/libinterp/interpfcn/pr-output.cc
@@ -478,17 +478,17 @@ static float_format *curr_real_fmt = 0;
 static float_format *curr_imag_fmt = 0;
 
 static double
 pr_max_internal (const Matrix& m)
 {
   octave_idx_type nr = m.rows ();
   octave_idx_type nc = m.columns ();
 
-  double result = -DBL_MAX;
+  double result = -std::numeric_limits<double>::max ();
 
   bool all_inf_or_nan = true;
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
         double val = m(i,j);
         if (xisinf (val) || xisnan (val))
@@ -507,17 +507,17 @@ pr_max_internal (const Matrix& m)
 }
 
 static double
 pr_min_internal (const Matrix& m)
 {
   octave_idx_type nr = m.rows ();
   octave_idx_type nc = m.columns ();
 
-  double result = DBL_MAX;
+  double result = std::numeric_limits<double>::max ();
 
   bool all_inf_or_nan = true;
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
         double val = m(i,j);
         if (xisinf (val) || xisnan (val))
diff --git a/libinterp/interpfcn/variables.h b/libinterp/interpfcn/variables.h
--- a/libinterp/interpfcn/variables.h
+++ b/libinterp/interpfcn/variables.h
@@ -97,17 +97,18 @@ set_internal_variable (char& var, const 
 extern OCTINTERP_API octave_value
 set_internal_variable (int& var, const octave_value_list& args,
                        int nargout, const char *nm,
                        int minval = INT_MIN, int maxval = INT_MAX);
 
 extern OCTINTERP_API octave_value
 set_internal_variable (double& var, const octave_value_list& args,
                        int nargout, const char *nm,
-                       double minval = DBL_MIN, double maxval = DBL_MAX);
+                       double minval = -octave_Inf,
+                       double maxval = octave_Inf);
 
 extern OCTINTERP_API octave_value
 set_internal_variable (std::string& var, const octave_value_list& args,
                        int nargout, const char *nm, bool empty_ok = true);
 
 extern OCTINTERP_API octave_value
 set_internal_variable (int& var, const octave_value_list& args,
                        int nargout, const char *nm, const char **choices);
diff --git a/liboctave/lo-utils.cc b/liboctave/lo-utils.cc
--- a/liboctave/lo-utils.cc
+++ b/liboctave/lo-utils.cc
@@ -49,17 +49,20 @@ bool xis_int_or_inf_or_nan (double x)
 
 bool xis_one_or_zero (double x)
 { return x == 0 || x == 1; }
 
 bool xis_zero (double x)
 { return x == 0; }
 
 bool xtoo_large_for_float (double x)
-{ return (! (xisnan (x) || xisinf (x)) && fabs (x) > FLT_MAX); }
+{
+  return (! (xisnan (x) || xisinf (x))
+          && fabs (x) > std::numeric_limits<float>::max ());
+}
 
 bool xtoo_large_for_float (const Complex& x)
 {
   return (xtoo_large_for_float (x.real ())
           || xtoo_large_for_float (x.imag ()));
 }
 
 bool xis_int_or_inf_or_nan (float x)
