# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1278058694 -7200
#      Fri Jul 02 10:18:14 2010 +0200
# Node ID 3952b4c4e44a911594e9f025275662932dcdef4e
# Parent  e141bcb1befd83d6a01f98493eb3df3a617558c7
# Parent  5faf6832855a535b69f6bcd9311b204dea798740
merge with main repo

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,16 @@
+2010-07-01  Rik <octave@nomad.inbox5.com>
+
+        * refcard/refcard.tex: Fix italic macro typo for stem.
+
+2010-06-28  Rik <octave@nomad.inbox5.com>
+
+        * refcard/refcard.tex: Fix typos in refcard (bug #30260).
+
 2010-06-16  Rik <octave@nomad.inbox5.com>
 
         * ChangeLog: Correctly break lines > 80 characters.
 
 2010-06-16  Rik <octave@nomad.inbox5.com>
 
         * interpreter/intro.txi: Clarify wording.  (bug #30165).
 
diff --git a/doc/refcard/refcard.tex b/doc/refcard/refcard.tex
--- a/doc/refcard/refcard.tex
+++ b/doc/refcard/refcard.tex
@@ -528,17 +528,17 @@ ipermute ({\it arr}, {\it p})&array inve
 
 \sec ;
 shiftdim ({\it arr}, {\it s})&rotate the array dimensions.\cr
 circshift ({\it arr}, {\it s})&rotate the array elements.\cr
 \endsec
 
 \sec Sparse Matrices;
 sparse (...)&create a sparse matrix.\cr
-speye ({\it n)}&create sparse identify matrix.\cr
+speye ({\it n)}&create sparse identity matrix.\cr
 sprand ({\it n}, {\it m}, {\it d})&sparse rand matrix of density {\it d}.\cr
 spdiags (...)&sparse generalization of {\it diag}.\cr
 nnz ({\it s})&No. non-zero elements in sparse matrix.\cr
 \endsec
 
 \sec Ranges;
 {\it base} : {\it limit}\cr
 {\it base} : {\it incr} : {\it limit}\cr
@@ -570,17 +570,17 @@ nnz ({\it s})&No. non-zero elements in s
   of {\it vector}\cr
 \quad {\it range}&select rows (columns) corresponding to the elements
   of {\it range}\cr
 \quad :&select all rows (columns)\cr
 \endsec
 
 \sec Global and Persistent Variables;
 global {\it var1} ...&Declare variables global.\cr
-global {\it var1} = {\it val}&Declare variable global. Set intial value.\cr
+global {\it var1} = {\it val}&Declare variable global. Set initial value.\cr
 persistent {\it var1}&Declare a variable as static to a function.\cr
 persistent {\it var1} = {\it val}&Declare a variable as static to a 
   function and set its initial value.\cr
 \omit\hfill\vbox{\rm\vskip0.25ex
   Global variables may be accessed inside the body of a function
   without having to be passed in the function parameter list provided
   they are declared global when used.}\span\cr
 \endsec
@@ -672,17 +672,17 @@ realmin&minimum representable value\cr
 '\ \ .'&transpose\cr
 +\ \ -\ \ ++\ \ --\ \ !&unary minus, increment, logical ``not''\cr
 \char'136\ \ .\char'136&exponentiation\cr
 \endsec
 
 \vfill\eject
 
 \sec Paths and Packages;
-path&display the current Octave cunction path.\cr
+path&display the current Octave function path.\cr
 pathdef&display the default path.\cr
 addpath({\it dir})&add a directory to the path.\cr
 EXEC\_PATH&manipulate the Octave executable path.\cr
 pkg list&display installed packages.\cr
 pkg load {\it pack}&Load an installed package.\cr
 \endsec
 
 \sec Cells and Structures;
@@ -766,17 +766,17 @@ feval ({\it func}, {\it arg1}, ...)&Eval
 
 \sec Miscellaneous Functions;
 eval ({\it str})&evaluate {\it str} as a command\cr
 error ({\it message})&print message and return to top level\cr
 warning ({\it message})&print a warning message\cr
 clear {\it pattern}&clear variables matching pattern\cr
 exist ({\it str})&check existence of variable or function\cr
 who, whos&list current variables\cr
-whos {\it var}&details of the varibale {\it var}\cr
+whos {\it var}&details of the variable {\it var}\cr
 \endsec
 
 \sec Basic Matrix Manipulations;
 rows ({\it a})&return number of rows of {\it a}\cr
 columns ({\it a})&return number of columns of {\it a}\cr
 all ({\it a})&check if all elements of {\it a\/} nonzero\cr
 any ({\it a})&check if any elements of {\it a\/} nonzero\cr
 \endsec
@@ -815,17 +815,17 @@ det ({\it a})&compute the determinant of
 eig ({\it a})&eigenvalues and eigenvectors\cr
 expm ({\it a})&compute the exponential of a matrix\cr
 hess ({\it a})&compute Hessenberg decomposition\cr
 inverse ({\it a})&invert a square matrix\cr
 norm ({\it a}, {\it p})&compute the {\it p}-norm of a matrix\cr
 pinv ({\it a})&compute pseudoinverse of {\it a}\cr
 qr ({\it a})&compute the QR factorization of a matrix\cr
 rank ({\it a})&matrix rank\cr
-sprank ({\it a})&structrual matrix rank\cr
+sprank ({\it a})&structural matrix rank\cr
 schur ({\it a})&Schur decomposition of a matrix\cr
 svd ({\it a})&singular value decomposition\cr
 syl ({\it a}, {\it b}, {\it c})&solve the Sylvester equation\cr
 \endsec
 
 \vfill\eject
 
 \sec Equations, ODEs, DAEs, Quadrature;
@@ -849,18 +849,18 @@ perror ({\it nm}, {\it code})&for functi
 % \endsec
 
 \sec Signal Processing;
 fft ({\it a})&Fast Fourier Transform using FFTW\cr
 ifft ({\it a})&inverse FFT using FFTW\cr
 freqz ({\it args})&FIR filter frequency response\cr
 filter ({\it a}, {\it b}, {\it x})&filter by transfer function\cr
 conv ({\it a}, {\it b})&convolve two vectors\cr
-hamming ({\it n})&return Hamming window coefficents\cr
-hanning ({\it n})&return Hanning window coefficents\cr
+hamming ({\it n})&return Hamming window coefficients\cr
+hanning ({\it n})&return Hanning window coefficients\cr
 \endsec
 
 \altsec Image Processing;
 colormap ({\it map})&set the current colormap\cr
 gray2ind ({\it i}, {\it n})&convert gray scale to Octave image\cr
 image ({\it img}, {\it zoom})&display an Octave image matrix\cr
 imagesc ({\it img}, {\it zoom})&display scaled matrix as image\cr
 imshow ({\it img}, {\it map})&display Octave image\cr
@@ -933,17 +933,17 @@ plot ({\it args})&2D plot with linear ax
 plot3 ({\it args})&3D plot with linear axes\cr
 line ({\it args})&2D or 3D line\cr
 patch ({\it args})&2D patch\cr
 semilogx ({\it args})&2D plot with logarithmic x-axis\cr
 semilogy ({\it args})&2D plot with logarithmic y-axis\cr
 loglog ({\it args})&2D plot with logarithmic axes\cr
 bar ({\it args})&plot bar charts\cr
 stairs ({\it x}, {\it y})&plot stairsteps\cr
-stem ({\it x}, {it y})&plot a stem graph\cr
+stem ({\it x}, {\it y})&plot a stem graph\cr
 hist ({\it y}, {\it x})&plot histograms\cr
 contour ({\it x}, {\it y}, {\it z})&contour plot\cr
 title ({\it string})&set plot title\cr
 axis ({\it limits})&set axis ranges\cr
 xlabel ({\it string})&set x-axis label\cr
 ylabel ({\it string})&set y-axis label\cr
 zlabel ({\it string})&set z-axis label\cr
 text ({\it x}, {\it y}, {\it str})&add text to a plot\cr
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2010-06-16  Rik <octave@nomad.inbox5.com>
+
+        * plot/stairs.m: Add additional calling forms to documentation.
+
 2010-06-24  John W. Eaton  <jwe@octave.org>
 
 	* plot/private/__plt__.m: Replace usage message with error.
 	* plot/loglog.m, plot/plot.m, plot/polar.m, plot/semilogx.m,
 	plot/semilogy.m: Call print_usage if no args are supplied.
         Add additional calling forms to documentation.
 
 2010-06-24  Shai Ayal  <shaiay@users.sourceforge.net>
diff --git a/scripts/plot/stairs.m b/scripts/plot/stairs.m
--- a/scripts/plot/stairs.m
+++ b/scripts/plot/stairs.m
@@ -13,26 +13,29 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} stairs (@var{x}, @var{y})
+## @deftypefn  {Function File} {} stairs (@var{y})
+## @deftypefnx {Function File} {} stairs (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} stairs (@dots{}, @var{style})
 ## @deftypefnx {Function File} {} stairs (@dots{}, @var{prop}, @var{val})
 ## @deftypefnx {Function File} {} stairs (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} stairs (@dots{})
+## @deftypefnx {Function File} {[@var{xstep}, @var{ystep}] =} stairs (@dots{})
 ## Produce a stairstep plot.  The arguments may be vectors or matrices.
 ##
 ## If only one argument is given, it is taken as a vector of y-values
 ## and the x coordinates are taken to be the indices of the elements.
 ##
+## If one output argument is requested, return a graphics handle to the plot.
 ## If two output arguments are specified, the data are generated but
 ## not plotted.  For example,
 ##
 ## @example
 ## stairs (x, y);
 ## @end example
 ##
 ## @noindent
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -66,16 +66,33 @@ 2010-06-25  Jaroslav Hajek  <highegg@gma
 	octave_fields&)): New internal ctor.
 
 	* oct-map.cc (octave_map::assign): Handle no fields case.
 
 2010-06-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-struct.cc (Fcell2struct): Rewrite.
 
+2010-06-30  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-range.cc (octave_range::save_ascii): Save length rather than
+	limit when inc is zero. Adjust comment.
+	(octave_range::save_binary, octave_range::save_hdf5): Ditto.
+	(octave_range::load_ascii): Assume limit is length when increment is
+	zero.
+	(octave_range::load_binary, octave_range::load_hdf5): Ditto.
+
+
+2010-06-25  John W. Eaton  <jwe@octave.org>
+
+	* graphics.cc (reset_default_properties): New static function.
+	(root_figure::reset_default_properties,
+	figure::reset_default_properties, axes::reset_default_properties):
+	Use it to avoid duplicated code.
+
 2010-06-24  Rik <octave@nomad.inbox5.com>
 
         * octave.cc: Add [FILE] to octave usage string (bug #30258).
 
 2010-06-24  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-map.h (octave_map, octave_scalar_map): New classes.
 	* oct-map.cc (octave_map, octave_scalar_map): Implement them.
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -2620,18 +2620,18 @@ root_figure::properties::remove_child (c
   xset (0, "currentfigure", cf.value ());
   
   base_properties::remove_child (gh);
 }
 
 property_list
 root_figure::factory_properties = root_figure::init_factory_properties ();
 
-void
-root_figure::reset_default_properties (void)
+static void
+reset_default_properties (property_list& default_properties)
 {
   property_list new_defaults;
 
   for (property_list::plist_map_const_iterator p = default_properties.begin ();
        p != default_properties.end (); p++)
     {
       const property_list::pval_map_type pval_map = p->second;
       std::string prefix = p->first;
@@ -2645,19 +2645,26 @@ root_figure::reset_default_properties (v
           if (prefix == "axes" && (s == "position" || s == "units"))
             new_defaults.set (prefix + s, q->second);
           else if (prefix == "figure" && (s == "position" || s == "units" 
                                           || s == "windowstyle" 
                                           || s == "paperunits"))
             new_defaults.set (prefix + s, q->second);
         }
     }
+
   default_properties = new_defaults;
 }
 
+void
+root_figure::reset_default_properties (void)
+{
+  ::reset_default_properties (default_properties);
+}
+
 // ---------------------------------------------------------------------
 
 void
 figure::properties::set_currentaxes (const octave_value& v)
 {
   graphics_handle val (v);
 
   if (error_state)
@@ -2795,39 +2802,17 @@ figure::get_default (const caseless_str&
     }
 
   return retval;
 }
 
 void
 figure::reset_default_properties (void)
 {
-  property_list new_defaults;
-
-  for (property_list::plist_map_const_iterator p = default_properties.begin ();
-       p != default_properties.end (); p++)
-    {
-      const property_list::pval_map_type pval_map = p->second;
-      std::string prefix = p->first;
-      
-      for (property_list::pval_map_const_iterator q = pval_map.begin ();
-           q != pval_map.end ();
-           q++)
-        {
-          std::string s = q->first;
-
-          if (prefix == "axes" && (s == "position" || s == "units"))
-            new_defaults.set (prefix + s, q->second);
-          else if (prefix == "figure" && (s == "position" || s == "units" 
-                                          || s == "windowstyle" 
-                                          || s == "paperunits"))
-            new_defaults.set (prefix + s, q->second);
-        }
-    }
-  default_properties = new_defaults;
+  ::reset_default_properties (default_properties);
 }
 
 // ---------------------------------------------------------------------
 
 void
 axes::properties::init (void)
 {
   position.add_constraint (dim_vector (1, 4));
@@ -4340,39 +4325,17 @@ axes::properties::clear_zoom_stack (void
     zoom_stack.pop_front ();
 
   unzoom ();
 }
 
 void
 axes::reset_default_properties (void)
 {
-  property_list new_defaults;
-
-  for (property_list::plist_map_const_iterator p = default_properties.begin ();
-       p != default_properties.end (); p++)
-    {
-      const property_list::pval_map_type pval_map = p->second;
-      std::string prefix = p->first;
-      
-      for (property_list::pval_map_const_iterator q = pval_map.begin ();
-           q != pval_map.end ();
-           q++)
-        {
-          std::string s = q->first;
-
-          if (prefix == "axes" && (s == "position" || s == "units"))
-            new_defaults.set (prefix + s, q->second);
-          else if (prefix == "figure" && (s == "position" || s == "units" 
-                                          || s == "windowstyle" 
-                                          || s == "paperunits"))
-            new_defaults.set (prefix + s, q->second);
-        }
-    }
-  default_properties = new_defaults;
+  ::reset_default_properties (default_properties);
 }
 
 // ---------------------------------------------------------------------
 
 Matrix
 line::properties::compute_xlim (void) const
 {
   Matrix m (1, 3);
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -397,54 +397,71 @@ skip_comments (std::istream& is)
 
 bool 
 octave_range::save_ascii (std::ostream& os)
 {
   Range r = range_value ();
   double base = r.base ();
   double limit = r.limit ();
   double inc = r.inc ();
+  octave_idx_type len = r.nelem ();
 
-  os << "# base, limit, increment\n";
+  if (inc != 0)
+    os << "# base, limit, increment\n";
+  else
+    os << "# base, length, increment\n";
+
   octave_write_double (os, base);
   os << " ";
-  octave_write_double (os, limit);
+  if (inc != 0)
+    octave_write_double (os, limit);
+  else
+    os << len;
   os << " ";
   octave_write_double (os, inc);
   os << "\n";
 
   return true;
 }
 
 bool 
 octave_range::load_ascii (std::istream& is)
 {
   // # base, limit, range comment added by save ().
   skip_comments (is);
 
-  is >> range;
+  double base, limit, inc;
+  is >> base >> limit >> inc;
 
   if (!is)
     {
       error ("load: failed to load range constant");
       return false;
     }
 
+  if (inc != 0)
+    range = Range (base, limit, inc);
+  else
+    range = Range (base, inc, static_cast<octave_idx_type> (limit));
+
   return true;
 }
 
 bool 
 octave_range::save_binary (std::ostream& os, bool& /* save_as_floats */)
 {
   char tmp = LS_DOUBLE;
   os.write (reinterpret_cast<char *> (&tmp), 1);
   Range r = range_value ();
   double bas = r.base ();
   double lim = r.limit ();
   double inc = r.inc ();
+  if (inc == 0)
+    lim = r.nelem ();
+
   os.write (reinterpret_cast<char *> (&bas), 8);
   os.write (reinterpret_cast<char *> (&lim), 8);
   os.write (reinterpret_cast<char *> (&inc), 8);
 
   return true;
 }
 
 bool 
@@ -462,18 +479,21 @@ octave_range::load_binary (std::istream&
   if (! is.read (reinterpret_cast<char *> (&lim), 8))
     return false;
   if (swap)
     swap_bytes<8> (&lim);
   if (! is.read (reinterpret_cast<char *> (&inc), 8))
     return false;
   if (swap)
     swap_bytes<8> (&inc);
-  Range r (bas, lim, inc);
-  range = r;
+  if (inc != 0)
+    range = Range (bas, lim, inc);
+  else
+    range = Range (bas, inc, static_cast<octave_idx_type> (lim));
+
   return true;
 }
 
 #if defined (HAVE_HDF5)
 
 // The following subroutines creates an HDF5 representation of the way
 // we will store Octave range types (triplets of floating-point numbers). 
 // NUM_TYPE is the HDF5 numeric type to use for storage (e.g. 
@@ -520,17 +540,17 @@ octave_range::save_hdf5 (hid_t loc_id, c
       H5Sclose (space_hid);
       H5Tclose (type_hid);
       return false;
     }
   
   Range r = range_value ();
   double range_vals[3];
   range_vals[0] = r.base ();
-  range_vals[1] = r.limit ();
+  range_vals[1] = r.inc () != 0 ? r.limit () : r.nelem ();
   range_vals[2] = r.inc ();
 
   retval = H5Dwrite (data_hid, type_hid, H5S_ALL, H5S_ALL, H5P_DEFAULT,
                      range_vals) >= 0;
 
   H5Dclose (data_hid);
   H5Tclose (type_hid);
   H5Sclose (space_hid);
@@ -570,18 +590,21 @@ octave_range::load_hdf5 (hid_t loc_id, c
       return false;
     }
 
   double rangevals[3];
   if (H5Dread (data_hid, range_type, H5S_ALL, H5S_ALL, H5P_DEFAULT, 
                rangevals) >= 0)
     {
       retval = true;
-      Range r (rangevals[0], rangevals[1], rangevals[2]);
-      range = r;
+      if (rangevals[2] != 0)
+        range = Range (rangevals[0], rangevals[1], rangevals[2]);
+      else
+        range = Range (rangevals[0], rangevals[2], 
+                       static_cast<octave_idx_type> (rangevals[1]));
     }
 
   H5Tclose (range_type);
   H5Sclose (space_hid);
   H5Dclose (data_hid);
 
   return retval;
 }
