# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1224646217 -3600
#      Wed Oct 22 04:30:17 2008 +0100
# Node ID 79c874fe5100781addce975ab9a6a2f76feb409a
# Parent  dba0037e6602149261f5a44ee869ca1c6a1d1156
More plot object updates

diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -1711,43 +1711,38 @@ TO BE WRITTEN
 
 TO BE WRITTEN
 
 @node Line series
 @subsubsection Line series
 @cindex series objects
 @cindex line series
 
-line series objects are created by the @code{plot}  and @code{plot3}
-functions. Each @code{hggroup} element of the series contains a single
-line object as a child representing the stair. The properties of the
-line series are a one-to-one reflection of the children line object, and
-so the line series is only useful for its ability to add data sources to
-the group object.
-
-The properties of the line series are
+Line series objects are created by the @code{plot}  and @code{plot3}
+functions and are of the type @code{line}. The properties of the
+line series with the ability to add data sources.
 
 @table @code
 @item color
-The RGB color or color name of the line objects of the stairs. @xref{Colors}.
+The RGB color or color name of the line objects. @xref{Colors}.
 
 @item linewidth
 @itemx linestyle
-The line width and style of the line objects of the stairs. @xref{Line Styles}.
+The line width and style of the line objects. @xref{Line Styles}.
 
 @item marker
 @itemx markeredgecolor
 @itemx markerfacecolor
 @itemx markersize
-The line and fill color of the markers on the stairs. @xref{Colors}.
+The line and fill color of the markers. @xref{Colors}.
 
 @item xdata
 @itemx ydata
 @itemx zdata
-The original x, y and z data of the stairs.
+The original x, y and z data.
 
 @item xdatasource
 @itemx ydatasource
 @itemx zdatasource
 Data source variables.
 @end table
 
 @node Quiver group
@@ -1808,17 +1803,50 @@ The values of the vector field to plot.
 Data source variables.
 @end table
 
 @node Scatter group
 @subsubsection Scatter group
 @cindex group objects
 @cindex scatter group
 
-TO BE WRITTEN
+Scatter series objects are created by the @code{scatter} or @code{scatter3}
+functions. A single hggroup element contains as many children as there are
+points in the scatter plot, with each child representing one of the points.
+The properties of the stem series are
+
+@table @code
+@item linewidth
+The line width of the line objects of the points. @xref{Line Styles}.
+
+@item marker
+@itemx markeredgecolor
+@itemx markerfacecolor
+The line and fill color of the markers of the points. @xref{Colors}.
+
+@item xdata
+@itemx ydata
+@itemx zdata
+The original x, y and z data of the stems.
+
+@item cdata
+The color data for the points of the plot. Each point can have a separate
+color, or a unique color can be specified.
+
+@item sizedata
+The size data for the points of the plot. Each point can its own size or a 
+unique size can be specified.
+
+@item xdatasource
+@itemx ydatasource
+@itemx zdatasource
+@itemx cdatasource
+@itemx sizedatasource
+Data source variables.
+@end table
 
 @node Stair group
 @subsubsection Stair group
 @cindex group objects
 @cindex stair group
 
 Stair series objects are created by the @code{stair} function. Each
 @code{hggroup} element of the series contains a single line object as a
@@ -1847,24 +1875,98 @@ The original x and y data of the stairs.
 Data source variables.
 @end table
 
 @node Stem Series
 @subsubsection Stem Series
 @cindex series objects
 @cindex stem series
 
-TO BE WRITTEN
+Stem series objects are created by the @code{stem} or @code{stem3}
+functions. Each @code{hgrroup} element contains a single line object
+as a child respresenting the stems. The properties of the stem series
+are
+
+@table @code
+@item showbaseline
+@itemx baseline
+@itemx basevalue
+The property @code{showbaseline} flags whether the baseline of the
+stem series is displayed (default is "on"). The handle of the graphics
+object representing the baseline is given by the @code{baseline}
+property and the y-value (or z-value for @code{stem3}) of the baseline
+by the @code{basevalue} property.
+
+Changes to any of these property are propagated to the other members of
+the stem series and to the baseline itself. Equally changes in the
+properties of the base line itself are propagated to the members of the
+corresponding stem series.
+
+@item color
+The RGB color or color name of the line objects of the stems. @xref{Colors}.
+
+@item linewidth
+@itemx linestyle
+The line width and style of the line objects of the stems. @xref{Line Styles}.
+
+@item marker
+@itemx markeredgecolor
+@itemx markerfacecolor
+@itemx markersize
+The line and fill color of the markers on the stems. @xref{Colors}.
+
+@item xdata
+@itemx ydata
+@itemx zdata
+The original x, y and z data of the stems.
+
+@item xdatasource
+@itemx ydatasource
+@itemx zdatasource
+Data source variables.
+@end table
 
 @node Surface group
 @subsubsection Surface group
 @cindex group objects
 @cindex surface group
 
-TO BE WRITTEN
+Surface group objects are created by the @code{surf} or @code{mesh}
+functions, but are equally one of the handles returned by the @code{surfc}
+or @code{meshc} functions. The surface group is of the type @code{surface}.
+
+The properties of the surface group are
+
+@table @code
+@item edgecolor
+@item facecolor
+The RGB color or color name of the edges or faces of the surface. @xref{Colors}.
+
+@item linewidth
+@itemx linestyle
+The line width and style of the lines on the surface. @xref{Line Styles}.
+
+@item marker
+@itemx markeredgecolor
+@itemx markerfacecolor
+@itemx markersize
+The line and fill color of the markers on the surface. @xref{Colors}.
+
+@item xdata
+@itemx ydata
+@itemx zdata
+@item cdata
+The original x, y, z and c data.
+
+@item xdatasource
+@itemx ydatasource
+@itemx zdatasource
+@itemx cdatasource
+Data source variables.
+@end table
 
 @node Graphics backends
 @subsection Graphics backends
 @cindex graphics backends
 @cindex backends, graphics
 
 @DOCSTRING(backends)
 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,21 @@
+2008-10-22  David Bateman  <dbateman@free.fr>
+
+	* plot/__add_line_series__.m: Remove
+	* plot/Makefile.in (SOURCES): Remove it here too.
+	* plot/__add_datasource__.m: Allow for more than one character in
+	source name.
+	* plot/refreshdata.m: Ditto.
+	* plot/__plt2mm__.m, plot/__plt2mv__.m, plot/__plt2ss__.m, 
+	plot/__plt2sv__.m, plot/__plt2vm__.m, plot/__plt2vv__.m, 
+	plot/__plt2vs__.m, plot3.m: Remove previous line series changes.
+	* plot/__scatter__.m: Add scatter series objects and data sources.
+	* plot/legend.m: Update type in loop and remove debugging messages.
+	
 2008-10-21  Ben Abbott  <bpabbott@mac.com>
 
 	* specfun/legendre.m: Warn once on under/overflow.
 
 	* plot/clf.m: Improve Matlab compatibility.
 
 2008-10-21  John W. Eaton  <jwe@octave.org>
 
diff --git a/scripts/plot/Makefile.in b/scripts/plot/Makefile.in
--- a/scripts/plot/Makefile.in
+++ b/scripts/plot/Makefile.in
@@ -30,17 +30,16 @@ VPATH = @srcdir@
 include $(TOPDIR)/Makeconf
 
 INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 SOURCES = \
   __add_datasource__.m \
-  __add_line_series__.m \
   __area__.m \
   __axes_limits__.m \
   __axis_label__.m \
   __bar__.m \
   __bars__.m \
   __contour__.m \
   __default_plot_options__.m \
   __errcomm__.m \
diff --git a/scripts/plot/__add_datasource__.m b/scripts/plot/__add_datasource__.m
--- a/scripts/plot/__add_datasource__.m
+++ b/scripts/plot/__add_datasource__.m
@@ -32,17 +32,17 @@ function newargs = __add_datasource__ (f
     addproperty (strcat (data{i}, "datasource"), h, "string", "");
   endfor
 
   i = 0;
   newargs = {};
   while (i < numel (varargin))
     arg = varargin{++i};
     if (i != numel(varargin) && ischar (arg)
-	&& length (arg) > 1 && strcmpi (arg(2:end), "datasource"))
+	&& length (arg) > 1 && strcmpi (arg(end-9:end), "datasource"))
       arg = tolower (arg);
       val = varargin{++i};
       if (ischar (val))
 	set (h, arg, val);
       else
 	error ("%s: expecting data source to be a string", fcn);
       endif
     else
diff --git a/scripts/plot/__add_line_series__.m b/scripts/plot/__add_line_series__.m
deleted file mode 100644
--- a/scripts/plot/__add_line_series__.m
+++ /dev/null
@@ -1,64 +0,0 @@
-## Copyright (C) 2008 David Bateman
-##
-## This file is part of Octave.
-##
-## Octave is free software; you can redistribute it and/or modify it
-## under the terms of the GNU General Public License as published by
-## the Free Software Foundation; either version 3 of the License, or (at
-## your option) any later version.
-##
-## Octave is distributed in the hope that it will be useful, but
-## WITHOUT ANY WARRANTY; without even the implied warranty of
-## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-## General Public License for more details.
-##
-## You should have received a copy of the GNU General Public License
-## along with Octave; see the file COPYING.  If not, see
-## <http://www.gnu.org/licenses/>.
-
-## Undocumented internal function
-
-function  __add_line_series__ (h, hg)
-
-  obj = get(h);
-
-  addproperty ("color", hg, "linecolor", obj.color);
-  addproperty ("linewidth", hg, "linelinewidth", obj.linewidth);
-  addproperty ("linestyle", hg, "linelinestyle", obj.linestyle);
-  addproperty ("marker", hg, "linemarker", obj.marker);
-  addproperty ("markeredgecolor", hg, "linemarkerfacecolor", 
-	       obj.markeredgecolor);
-  addproperty ("markerfacecolor", hg, "linemarkerfacecolor", 
-	       obj.markerfacecolor);
-  addproperty ("markersize", hg, "linemarkersize", obj.markersize);
-      
-  addlistener (hg, "color", @update_props);
-  addlistener (hg, "linewidth", @update_props); 
-  addlistener (hg, "linestyle", @update_props); 
-  addlistener (hg, "marker", @update_props); 
-  addlistener (hg, "markeredgecolor", @update_props); 
-  addlistener (hg, "markerfacecolor", @update_props); 
-  addlistener (hg, "markersize", @update_props);
-
-  addproperty ("xdata", hg, "data", obj.xdata);
-  addproperty ("ydata", hg, "data", obj.ydata);
-  addproperty ("zdata", hg, "data", obj.zdata);
-
-  addlistener (hg, "xdata", @update_props);
-  addlistener (hg, "ydata", @update_props);
-  addlistener (hg, "zdata", @update_props);
-endfunction
-
-function update_props (h, d)
-  set (get (h, "children"), "color", get (h, "color"), 
-       "linewidth", get (h, "linewidth"),
-       "linestyle", get (h, "linestyle"),
-       "marker", get (h, "marker"),
-       "markerfacecolor", get (h, "markerfacecolor"),
-       "markeredgecolor", get (h, "markeredgecolor"),
-       "markersize", get (h, "markersize"),
-       "xdata", get (h, "xdata"),
-       "ydata", get (h, "ydata"),
-       "zdata", get (h, "zdata"));
-endfunction
-
diff --git a/scripts/plot/__plt2mm__.m b/scripts/plot/__plt2mm__.m
--- a/scripts/plot/__plt2mm__.m
+++ b/scripts/plot/__plt2mm__.m
@@ -50,29 +50,19 @@ function retval = __plt2mm__ (h, x, y, o
 	if (! isempty (tkey))
 	  set (h, "key", "on");
 	endif
 	color = options(i).color;
 	if (isempty (color))
 	  color = __next_line_color__ ();
 	endif
 
-	hg = hggroup ();
-	retval(i) = hg;
-	args = __add_datasource__ ("__plt2mm__", hg, {"x", "y", "z"}, 
-				   properties{:});
-
-	h = line (x(:,i), y(:,i), "keylabel", tkey, "color", color,
-		  "linestyle", options(i).linestyle,
-		  "marker", options(i).marker, "parent", hg);
-
-	__add_line_series__ (h, hg);
-	if (! isempty( args))
-	  set (hg, args {:});
-	endif
+	retval(i) = line (x(:,i), y(:,i), "keylabel", tkey, "color", color,
+			  "linestyle", options(i).linestyle,
+			  "marker", options(i).marker, properties{:});
       endfor
     else
       error ("__plt2mm__: arguments must be a matrices");
     endif
   else
     error ("__plt2mm__: matrix dimensions must match");
   endif
 
diff --git a/scripts/plot/__plt2mv__.m b/scripts/plot/__plt2mv__.m
--- a/scripts/plot/__plt2mv__.m
+++ b/scripts/plot/__plt2mv__.m
@@ -66,27 +66,17 @@ function retval = __plt2mv__ (h, x, y, o
       if (! isempty (tkey))
 	set (h, "key", "on");
       endif
       color = options(i).color;
       if (isempty (color))
 	color = __next_line_color__ ();
       endif
 
-      hg = hggroup ();
-      retval(i) = hg;
-      args = __add_datasource__ ("__plt2mv__", hg, {"x", "y", "z"}, 
-				 properties{:});
-
-      h = line (x(:,i), y, "keylabel", tkey, "color", color,
-		"linestyle", options(i).linestyle,
-		"marker", options(i).marker, "parent", hg);
-   
-      __add_line_series__ (h, hg);
-      if (! isempty (args))
-        set (hg, args{:});
-      endif
+      retval(i) = line (x(:,i), y, "keylabel", tkey, "color", color,
+			"linestyle", options(i).linestyle,
+			"marker", options(i).marker, properties{:});
     endfor
   else
     error ("__plt2mv__: arguments must be a matrices");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2ss__.m b/scripts/plot/__plt2ss__.m
--- a/scripts/plot/__plt2ss__.m
+++ b/scripts/plot/__plt2ss__.m
@@ -47,26 +47,16 @@ function retval = __plt2ss__ (h, x, y, o
     if (! isempty (key))
       set (h, "key", "on");
     endif
     color = options.color;
     if (isempty (color))
       color = __next_line_color__ ();
     endif
 
-    hg = hggroup ();
-    retval = hg;
-    properties = __add_datasource__ ("__plt2ss__", hg, {"x", "y", "z"}, 
-				     properties{:});
-
-    h = line (x, y, "keylabel", key, "color", color,
-	      "linestyle", options.linestyle,
-	      "marker", options.marker, "parent", hg);
-
-    __add_line_series__ (h, hg);
-    if (! isempty (properties))
-      set (hg, properties{:});
-    endif
+    retval = line (x, y, "keylabel", key, "color", color,
+		   "linestyle", options.linestyle,
+		   "marker", options.marker, properties{:});
   else
     error ("__plt2ss__: arguments must be scalars");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2sv__.m b/scripts/plot/__plt2sv__.m
--- a/scripts/plot/__plt2sv__.m
+++ b/scripts/plot/__plt2sv__.m
@@ -46,27 +46,17 @@ function retval = __plt2sv__ (h, x, y, o
       if (! isempty (tkey))
 	set (h, "key", "on");
       endif
       color = options(i).color;
       if (isempty (color))
 	color = __next_line_color__ ();
       endif
 
-      hg = hggroup ();
-      retval(i) = hg;
-      args = __add_datasource__ ("__plt2sv__", hg, {"x", "y", "z"}, 
-				 properties{:});
-
-      h = line (x, y(i), "keylabel", tkey, "color", color,
-		"linestyle", options(i).linestyle,
-		"marker", options(i).marker, "parent", hg);
-
-      __add_line_series__ (h, hg);
-      if (! isempty(args))
-        set (hg, args{:});
-      endif
+      retval(i) = line (x, y(i), "keylabel", tkey, "color", color,
+			"linestyle", options(i).linestyle,
+			"marker", options(i).marker, properties{:});
     endfor
   else
     error ("__plt2sv__: first arg must be scalar, second arg must be vector");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2vm__.m b/scripts/plot/__plt2vm__.m
--- a/scripts/plot/__plt2vm__.m
+++ b/scripts/plot/__plt2vm__.m
@@ -66,27 +66,17 @@ function retval = __plt2vm__ (h, x, y, o
       if (! isempty (tkey))
 	set (h, "key", "on");
       endif
       color = options(i).color;
       if (isempty (color))
 	color = __next_line_color__ ();
       endif
 
-      hg = hggroup ();
-      retval(i) = hg;
-      args = __add_datasource__ ("__plt2vm__", hg, {"x", "y", "z"}, 
-				 properties{:});
-
-      h = line (x, y(:,i), "keylabel", tkey, "color", color,
-		"linestyle", options(i).linestyle,
-		"marker", options(i).marker, "parent", hg);
-
-      __add_line_series__ (h, hg);
-      if (! isempty (args))
-        set (hg, args{:});
-      endif
+      retval(i) = line (x, y(:,i), "keylabel", tkey, "color", color,
+			"linestyle", options(i).linestyle,
+			"marker", options(i).marker, properties{:});
     endfor
   else
     error ("__plt2vm__: arguments must be a matrices");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2vs__.m b/scripts/plot/__plt2vs__.m
--- a/scripts/plot/__plt2vs__.m
+++ b/scripts/plot/__plt2vs__.m
@@ -46,27 +46,17 @@ function retval = __plt2vs__ (h, x, y, o
       if (! isempty (tkey))
 	set (h, "key", "on");
       endif
       color = options(i).color;
       if (isempty (color))
 	color = __next_line_color__ ();
       endif
 
-      hg = hggroup ();
-      retval(i) = hg;
-      args = __add_datasource__ ("__plt2vs__", hg, {"x", "y", "z"}, 
-				 properties{:});
-
-      h = line (x(i), y, "keylabel", tkey, "color", color,
-		"linestyle", options(i).linestyle,
-		"marker", options(i).marker, "parent", hg);
-
-      __add_line_series__ (h, hg);
-      if (! isempty (args))
-        set (hg, args{:});
-      endif
+      retval(i) = line (x(i), y, "keylabel", tkey, "color", color,
+			"linestyle", options(i).linestyle,
+			"marker", options(i).marker, properties{:});
     endfor
   else
     error ("__plt2vs__: first arg must be vector, second arg must be scalar");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2vv__.m b/scripts/plot/__plt2vv__.m
--- a/scripts/plot/__plt2vv__.m
+++ b/scripts/plot/__plt2vv__.m
@@ -61,26 +61,16 @@ function retval = __plt2vv__ (h, x, y, o
     if (! isempty (key))
       set (h, "key", "on");
     endif
     color = options.color;
     if (isempty (color))
       color = __next_line_color__ ();
     endif
 
-    hg = hggroup ();
-    retval = hg;
-    properties = __add_datasource__ ("__plt2vv__", hg, {"x", "y", "z"}, 
-				     properties{:});
-
-    h = line (x, y, "keylabel", key, "color", color,
+    retval = line (x, y, "keylabel", key, "color", color,
 	      "linestyle", options.linestyle,
-	      "marker", options.marker, "parent", hg);
-
-    __add_line_series__ (h, hg);
-    if (! isempty (properties))
-      set (hg, properties{:});
-    endif
+	      "marker", options.marker, properties{:});
   else
     error ("__plt2vv__: vector lengths must match");
   endif
 
 endfunction
diff --git a/scripts/plot/__scatter__.m b/scripts/plot/__scatter__.m
--- a/scripts/plot/__scatter__.m
+++ b/scripts/plot/__scatter__.m
@@ -13,17 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## Undocumented internal function.
 
-function h = __scatter__ (varargin)
+function hg = __scatter__ (varargin)
 
   h = varargin{1};
   nd = varargin{2};
   fcn = varargin{3};
   x = varargin{4}(:);
   y = varargin{5}(:);
   istart = 6;
 
@@ -52,75 +52,174 @@ function h = __scatter__ (varargin)
   if (istart < nargin && firstnonnumeric > istart)
     s = varargin{istart};
     if (isempty (s))
       s = 6;
     endif
   else
     s = 6;
   endif
+  if (numel (s) == 1)
+    ss = s;
+    s = repmat (s, numel(x), 1);
+  endif
 
   if (istart < nargin && firstnonnumeric > istart + 1)
     c = varargin{istart + 1};
     if (isvector (c))
-      c = c(:);
+      if (columns (c) == 3)
+	cc = c;
+	c = repmat (c, numel(x), 1);
+      else
+	c = c(:);
+      endif
     endif
   elseif (firstnonnumeric == istart + 1 && ischar (varargin{istart + 1}))
     c = varargin{istart + 1};
     firstnonnumeric++;
   else
-    c = 1 : length(x);
+    cc = __next_line_color__();
+    c = repmat (cc, numel(x), 1);
   endif
 
   newargs = {};
   filled = false;
   have_marker = false;
   marker = "o";
   iarg = firstnonnumeric;
   while (iarg <= nargin)
     arg = varargin{iarg++};
     if (ischar (arg) && strncmpi (arg, "filled", 6))
       filled = true;
     elseif ((ischar (arg) || iscell (arg)) && ! have_marker)
-      [linespec, valid] = __pltopt__ ("scatter", arg, false);
+      [linespec, valid] = __pltopt__ (fcn, arg, false);
       if (valid)
 	have_marker = true;
 	marker = linespec.marker;
 	if (strncmp (marker, "none", 4))
 	  marker = "o";
 	endif
       else
-	error ("scatter: invalid linespec");
+	error ("%s: invalid linespec", fcn);
       endif
     else
       newargs{end+1} = arg;
       if (iarg <= nargin)
 	newargs{end+1} = varagin{iarg++};
       endif
     endif
   endwhile
 
-  if (ischar (c))
-    h = patch ("faces", [1:length(x)].', "vertices", [x, y, z], "facecolor",
-	       "none", "edgecolor", c, "marker", marker, 
-	       "markersize", s, "linestyle", "none");
-    if (filled)
-      set(h, "markerfacecolor", c); 
-    endif
+  hg = hggroup ();
+  newargs = __add_datasource__ (fcn, hg, {"x", "y", "z", "c", "size"}, 
+			     newargs{:});
+
+  addproperty ("xdata", hg, "data", x);
+  addproperty ("ydata", hg, "data", y);
+  addproperty ("zdata", hg, "data", z);
+  if (exist ("cc", "var"))
+    addproperty ("cdata", hg, "data", cc);
+  else
+    addproperty ("cdata", hg, "data", c);
+  endif
+  if (exist ("ss", "var"))
+    addproperty ("sizedata", hg, "data", ss);
   else
-    h = patch ("faces", [1:length(x)].', "vertices", [x, y, z], "facecolor",
-	       "none", "edgecolor", "flat", "cdata", c, "marker", marker, 
-	       "markersize", s, "linestyle", "none");
-    if (filled)
-      set(h, "markerfacecolor", "flat"); 
-    endif
-    ax = get (h, "parent");
+    addproperty ("sizedata", hg, "data", s);
+  endif
+  addlistener (hg, "xdata", @update_data);
+  addlistener (hg, "ydata", @update_data);
+  addlistener (hg, "zdata", @update_data);
+  addlistener (hg, "cdata", @update_data);
+  addlistener (hg, "sizedata", @update_data);
+
+  if (ischar (c))
+    for i = 1 : numel (x)
+      h = __go_patch__ (hg, "xdata", x(i), "ydata", y(i), "zdata", z(i,:),
+			"faces", 1, "vertices", [x(i), y(i), z(i,:)], 
+			"facecolor", "none", "edgecolor", c, "marker", marker, 
+			"markersize", s(i), "linestyle", "none");
+      if (filled)
+	set(h, "markerfacecolor", c); 
+      endif
+    endfor
+  else
+    for i = 1 : numel (x)
+      h = __go_patch__ (hg, "xdata", x(i), "ydata", y(i), "zdata", z(i,:),
+			"faces", 1, "vertices", [x(i), y(i), z(i,:)], 
+			"facecolor", "none", "edgecolor", "flat", 
+			"cdata", c(i), "marker", marker, "markersize", s(i), 
+			"linestyle", "none");
+      if (filled)
+	set(h, "markerfacecolor", "flat"); 
+      endif
+    endfor
+    ax = get (hg, "parent");
     clim = get (ax, "clim");
     if (min(c(:)) < clim(1))
       clim(1) = min(c(:));
       set (ax, "clim", clim);
     endif
     if (max(c(:)) > clim(2))
       set (ax, "clim", [clim(1), max(c(:))]);
     endif
   endif
 
+  addproperty ("linewidth", hg, "patchlinewidth", 0.5);
+  addproperty ("marker", hg, "patchmarker", marker);
+  if (numel (x) > 0)
+    addproperty ("markerfacecolor", hg, "patchmarkerfacecolor", "none");
+    addproperty ("markeredgecolor", hg, "patchmarkeredgecolor", "none");
+  else
+    addproperty ("markerfacecolor", hg, "patchmarkerfacecolor", 
+		 get (h, "markerfacecolor"));
+    addproperty ("markeredgecolor", hg, "patchmarkeredgecolor",
+		 get (h, "edgecolor"));
+  endif
+  addlistener (hg, "linewidth", @update_props); 
+  addlistener (hg, "marker", @update_props); 
+  addlistener (hg, "markerfacecolor", @update_props); 
+  addlistener (hg, "markeredgecolor", @update_props);
+
+  if (! isempty (newargs))
+    set (hg, newargs{:})
+  endif
+
 endfunction
+
+function update_props (h, d)
+  lw = get (h, "linewidth");
+  m = get (h, "marker");
+  fc = get (h, "markerfacecolor");
+  ec = get (h, "markeredgecolor");
+  kids = get (h, "children");
+
+  for i = 1 : numel (kids)
+    set (kids (i), "linewidth", lw, "marker", m, "markerfacecolor", fc, 
+	 "edgecolor", ec)
+  endfor
+endfunction
+
+function update_data (h, d)
+  x1 = get (h, "xdata");
+  y1 = get (h, "ydata");
+  z1 = get (h, "zdata");
+  c1 = get (h, "cdata");
+  if (!ischar (c1) && rows (c1) == 1)
+    c1 = repmat (c1, numel (x1), 1);
+  endif
+  size1 = get (h, "sizedata");
+  if (numel (size1) == 1)
+    size1 = repmat (size1, numel (x1), 1);
+  endif
+  hlist = get (h, "children");
+  if (ischar (c1))
+    for i = 1 : length (hlist)
+      set (hlist(i), "vertices", [x1(i), y1(i), y2(i)], "cdata", c1,
+	   "markersize", size1(i));
+    endfor
+  else
+    for i = 1 : length (hlist)
+      set (hlist(i), "vertices", [x1(i), y1(i), y2(i)], "cdata", c1(i,:),
+	   "markersize", size1(i));
+    endfor
+  endif
+endfunction
diff --git a/scripts/plot/legend.m b/scripts/plot/legend.m
--- a/scripts/plot/legend.m
+++ b/scripts/plot/legend.m
@@ -130,16 +130,17 @@ function legend (varargin)
 	    set (ca, "key", "on", "keybox", "on");
 	  case "boxoff"
 	    set (ca, "keybox", "off");
 	  otherwise
 	    typ = get (kids (k), "type");
 	    while (k <= nkids && ! strcmp (typ, "line") &&
 		   ! strcmp (typ, "hggroup"))
 	      k++;
+	      typ = get (kids (k), "type");
 	    endwhile
 	    if (k <= nkids)
 	      turn_on_legend = true;
 	      if (strcmp (typ, "hggroup"))
 		hgkids = get (kids(k), "children");
 		for j = 1 : length (hgkids)
 		  hgobj = get (hgkids (j));
 		  if (isfield (hgobj, "keylabel"))
@@ -209,19 +210,16 @@ function legend (varargin)
 	endif
 	turn_on_legend = true;
 	k++;
       elseif (! warned)
 	warned = true;
 	warning ("legend: ignoring extra labels");
       endif
     else
-      arg
-      get(kids(k),"type")
-      k
       error ("legend: expecting argument to be a character string");
     endif
   endfor
 
   if (turn_on_legend)
     set (ca, "key", "on");
   endif
 
diff --git a/scripts/plot/plot3.m b/scripts/plot/plot3.m
--- a/scripts/plot/plot3.m
+++ b/scripts/plot/plot3.m
@@ -177,30 +177,20 @@ function retval = plot3 (varargin)
       endif
 
       for i = 1 : columns (x)
 	color = options.color;
 	if (isempty (options.color))
 	  color = __next_line_color__ ();
 	endif
 
-	hg = hggroup ();
-	tmp(++idx) = hg;
-	properties = __add_datasource__ ("plot3", hg, {"x", "y", "z"}, properties{:});
-
-	hline = line (x(:, i), y(:, i), z(:, i),  "keylabel", key,
-		      "color", color,
-		      "linestyle", options.linestyle,
-		      "marker", options.marker, "parent", hg);
-
-	__add_line_series__ (hline, hg);
-
-	if (! isempty (properties))
-	  set (hg, properties{:});
-	endif
+	tmp(++idx) = line (x(:, i), y(:, i), z(:, i),  "keylabel", key,
+			   "color", color,
+			   "linestyle", options.linestyle,
+			   "marker", options.marker, properties{:});
       endfor
 
       x_set = 0;
       y_set = 0;
       z_set = 0;
       fmt_set = 0;
       properties = {};
     elseif (! x_set)
@@ -236,30 +226,20 @@ function retval = plot3 (varargin)
       endif
 
       for i = 1 : columns (x)
 	color = options.color;
 	if (isempty (color))
 	  color = __next_line_color__ ();
 	endif
 
-	hg = hggroup ();
-	tmp(++idx) = hg;
-	properties = __add_datasource__ ("plot3", hg, {"x", "y", "z"}, properties{:});
-
-	hline = line (x(:, i), y(:, i), z(:, i),  "keylabel", key,
-		      "color", color,
-		      "linestyle", options.linestyle,
-		      "marker", options.marker, "parent", hg);
-
-	__add_line_series__ (hline, hg);
-
-	if (! isempty (properties))
-	  set (hg, properties{:});
-	endif
+	tmp(++idx) = line (x(:, i), y(:, i), z(:, i),  "keylabel", key,
+			   "color", color,
+			   "linestyle", options.linestyle,
+			   "marker", options.marker, properties{:});
       endfor
 
       x = new;
       y_set = 0;
       z_set = 0;
       fmt_set = 0;
       properties = {};
     endif
@@ -314,30 +294,20 @@ function retval = plot3 (varargin)
     endif
 
     for i = 1 : columns (x)
       color = options.color;
       if (isempty (color))
 	color = __next_line_color__ ();
       endif
 
-      hg = hggroup ();
-      tmp(++idx) = hg;
-      properties = __add_datasource__ ("plot3", hg, {"x", "y", "z"}, properties{:});
-
-      hline = line (x(:, i), y(:, i), z(:, i),  "keylabel", key, 
-		    "color", color,
-		    "linestyle", options.linestyle,
-		    "marker", options.marker, "parent", hg);
-
-      __add_line_series__ (hline, hg);
-
-      if (! isempty (properties))
-	set (hg, properties{:});
-      endif
+      tmp(++idx) = line (x(:, i), y(:, i), z(:, i),  "keylabel", key, 
+			 "color", color,
+			 "linestyle", options.linestyle,
+			 "marker", options.marker, properties{:});
     endfor
   endif
 
   set (gca (), "view", [-37.5, 30]);
 
   if (nargout > 0 && idx > 0)
     retval = tmp;
   endif
diff --git a/scripts/plot/refreshdata.m b/scripts/plot/refreshdata.m
--- a/scripts/plot/refreshdata.m
+++ b/scripts/plot/refreshdata.m
@@ -69,17 +69,17 @@ function refreshdata (h, ws)
 
   h = findall (h);
   objs = [];
   props = {};
 
   for i = 1 : numel (h)
     obj = get (h (i));
     fldnames = fieldnames (obj);
-    m = regexpi (fieldnames(obj), "^.datasource$", "match");
+    m = regexpi (fieldnames(obj), "^.+datasource$", "match");
     idx = cellfun (@(x) !isempty(x), m);
     if (any (idx))
       props = [props; {cell2mat(m(idx))}];
       objs  = [objs ; h(i)];
     endif
   endfor
 
   for i = 1 : length (objs)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2008-10-22  David Bateman  <dbateman@free.fr>
+
+	* graphics.h.in (line::properties, surface::properties): Add data
+	source properties.
+
 2008-10-21  John W. Eaton  <jwe@octave.org>
 
 	* graphics.h.in (axes::properties::delete_children): Delete decl.
 
 	* graphics.h.in (gh_manager::is_handle_visible): New function.
 	(axes::properites): Move title property after label properties.
 	(graphics_object::is_handle_visible): New function.
 	(base_properties::is_handle_visible): New function.
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -2820,16 +2820,19 @@ public:
     BEGIN_PROPERTIES (line)
       row_vector_property xdata u , default_data ()
       row_vector_property ydata u , default_data ()
       row_vector_property zdata u , Matrix ()
       row_vector_property ldata u , Matrix ()
       row_vector_property udata u , Matrix ()
       row_vector_property xldata u , Matrix ()
       row_vector_property xudata u , Matrix ()
+      string_property xdatasource , ""
+      string_property ydatasource , ""
+      string_property zdatasource , ""
       color_property color , color_values (0, 0, 0)
       radio_property linestyle , "{-}|--|:|-.|none"
       double_property linewidth , 0.5
       radio_property marker , "{none}|s|o|x|+|.|*|<|>|v|^|d|p|h"
       color_property markeredgecolor , "{auto}|none"
       color_property markerfacecolor , "auto|{none}"
       double_property markersize , 6
       string_property keylabel , ""
@@ -3196,16 +3199,20 @@ public:
     // properties declarations.
 
     BEGIN_PROPERTIES (surface)
       array_property xdata u , Matrix ()
       array_property ydata u , Matrix ()
       array_property zdata u , Matrix ()
       array_property cdata u , Matrix ()
       radio_property cdatamapping al , "{scaled}|direct"
+      string_property xdatasource , ""
+      string_property ydatasource , ""
+      string_property zdatasource , ""
+      string_property cdatasource , ""
       color_property facecolor , "{flat}|none|interp|texturemap"
       double_radio_property facealpha , double_radio_property (1.0, radio_values ("flat|interp"))
       color_property edgecolor , color_property (color_values (0, 0, 0), radio_values ("flat|none|interp"))
       radio_property linestyle , "{-}|--|:|-.|none"
       double_property linewidth , 0.5
       radio_property marker , "{none}|s|o|x|+|.|*|<|>|v|^|d|p|h"
       color_property markeredgecolor , "{auto}|none"
       color_property markerfacecolor , "auto|{none}"
