# HG changeset patch
# User jwe
# Date 831994987 0
#      Mon May 13 13:43:07 1996 +0000
# Node ID d681195167798ad83b4f631cfb391c8289974f92
# Parent  83d91aa3759bacf4a56a3253a6031a1259f4f92f
[project @ 1996-05-13 13:41:55 by jwe]

diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -186,15 +186,17 @@ private:
   lexical_feedback (const lexical_feedback&);
 
   lexical_feedback& operator = (const lexical_feedback&);
 };
 
 // Flags that need to be shared between the lexer and parser.
 extern lexical_feedback lexer_flags;
 
+extern void symbols_of_lex (void);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -30,16 +30,17 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <strstream.h>
 
 #include "Matrix.h"
 
+#include "defun.h"
 #include "error.h"
 #include "input.h"
 #include "lex.h"
 #include "oct-hist.h"
 #include "toplev.h"
 #include "pager.h"
 #include "parse.h"
 #include "pt-cmd.h"
@@ -52,16 +53,41 @@ Software Foundation, 59 Temple Place - S
 #include "pt-misc.h"
 #include "pt-plot.h"
 #include "symtab.h"
 #include "token.h"
 #include "user-prefs.h"
 #include "utils.h"
 #include "variables.h"
 
+// If TRUE, generate a warning for the assignment in things like
+//
+//   octave> if (a = 2 < n)
+//
+// but not
+//
+//   octave> if ((a = 2) < n)
+//
+static bool Vwarn_assign_as_truth_value;
+
+// If TRUE, generate a warning for the comma in things like
+//
+//   octave> global a, b = 2
+//
+static bool Vwarn_comma_in_global_decl;
+
+// If TRUE, generate warning if declared function name disagrees with
+// the name of the file in which it is defined.
+static bool Vwarn_function_name_clash;
+
+// If TRUE, generate warning if a statement in a function is not
+// terminated with a semicolon.  Useful for checking functions that
+// should only produce output using explicit printing statements.
+static bool Vwarn_missing_semicolon;
+
 // Temporary symbol table pointer used to cope with bogus function syntax.
 symbol_table *tmp_local_sym_tab = 0;
 
 // The current input line number.
 int input_line_number = 0;
 
 // The column of the current token.
 int current_input_column = 1;
@@ -621,17 +647,17 @@ global_decl2	: identifier
 		      ($1, $3, 0, 0, $2->line (), $2->column ());
 		    $$ = new tree_global (tmp_ass);
 		  }
 		;
 
 optcomma	: // empty
 		| ','
 		  {
-		    if (user_pref.warn_comma_in_global_decl)
+		    if (Vwarn_comma_in_global_decl)
 		      warning ("comma in global declaration not\
  interpreted as a command separator");
 		  }
 		;
 
 command		: plot_command
 		  { $$ = $1; }
 		| func_def
@@ -1320,17 +1346,17 @@ maybe_convert_to_ans_assign (tree_expres
 }
 
 // Maybe print a warning if an assignment expression is used as the
 // test in a logical expression.
 
 static void
 maybe_warn_assign_as_truth_value (tree_expression *expr)
 {
-  if (user_pref.warn_assign_as_truth_value
+  if (Vwarn_assign_as_truth_value
       && expr->is_assignment_expression ()
       && expr->is_in_parens () < 2)
     {
       warning ("suggest parenthesis around assignment used as truth value");
     }
 }
 
 // Create a plot command.
@@ -1943,17 +1969,17 @@ frob_function_def (tree_identifier *id, 
   // name).
 
   fcn->stash_function_name (id_name);
 
   if (reading_fcn_file)
     {
       if (curr_fcn_file_name != id_name)
 	{
-	  if (user_pref.warn_function_name_clash)
+	  if (Vwarn_function_name_clash)
 	    warning ("function name `%s' does not agree with function\
  file name `%s'", id_name.c_str (), curr_fcn_file_full_name.c_str ());
 
 	  global_sym_tab->rename (id_name, curr_fcn_file_name);
 
 	  if (error_state)
 	    return 0;
 
@@ -2053,24 +2079,74 @@ finish_matrix (tree_matrix *m)
     retval = m;
 
   return retval;
 }
 
 static void
 maybe_warn_missing_semi (tree_statement_list *t)
 {
-  if (lexer_flags.defining_func && user_pref.warn_missing_semicolon)
+  if (lexer_flags.defining_func && Vwarn_missing_semicolon)
     {
       tree_statement *tmp = t->rear();
 
       if (tmp->is_expression ())
 	warning ("missing semicolon near line %d, column %d in file `%s'",
 		 tmp->line (), tmp->column (),
 		 curr_fcn_file_full_name.c_str ());
     }
 }
 
+static int
+warn_assign_as_truth_value (void)
+{
+  Vwarn_assign_as_truth_value
+    = check_preference ("warn_assign_as_truth_value");
+
+  return 0;
+}
+
+static int
+warn_comma_in_global_decl (void)
+{
+  Vwarn_comma_in_global_decl = check_preference ("warn_comma_in_global_decl");
+
+  return 0;
+}
+
+static int
+warn_function_name_clash (void)
+{
+  Vwarn_function_name_clash = check_preference ("warn_function_name_clash");
+
+  return 0;
+}
+
+static int
+warn_missing_semicolon (void)
+{
+  Vwarn_missing_semicolon = check_preference ("warn_missing_semicolon");
+
+  return 0;
+}
+
+void
+symbols_of_parse (void)
+{
+  DEFVAR (warn_assign_as_truth_value, 1.0, 0, warn_assign_as_truth_value,
+    "produce warning for assignments used as truth values");
+
+  DEFVAR (warn_comma_in_global_decl, 1.0, 0, warn_comma_in_global_decl,
+    "produce warning for commas in global declarations");
+
+  DEFVAR (warn_function_name_clash, 1.0, 0, warn_function_name_clash,
+    "produce warning if function name conflicts with file name");
+
+  DEFVAR (warn_missing_semicolon, 0.0, 0, warn_missing_semicolon,
+    "produce a warning if a statement in a function file is not
+terminated with a semicolon");
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: text ***
 ;;; End: ***
 */
