# HG changeset patch
# User Rik <rik@octave.org>
# Date 1475005137 25200
#      Tue Sep 27 12:38:57 2016 -0700
# Node ID e0a1e8803d8c29dd2824dc56c3603be2c28133c7
# Parent  4b7ab10b5c38a9cfc64b1495ce432196c2bcce7c
Don't replace relative directory names in PATH with absolute names (bug #49184).

* load-path.cc (load_path::dir_info::update): Move warning code to top
of function.  If information for a relative path name is found in the
cache which is indexed by absolute path name, then only copy over
informational fields from the cache, but do not copy over the absolute
path name which would replace the relative name stored in dir_name.

diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -52,66 +52,74 @@ std::string load_path::command_line_path
 std::string load_path::sys_path;
 load_path::abs_dir_cache_type load_path::abs_dir_cache;
 
 void
 load_path::dir_info::update (void)
 {
   octave::sys::file_stat fs (dir_name);
 
-  if (fs)
+  if (! fs)
+    {
+      std::string msg = fs.error ();
+      warning ("load_path: %s: %s", dir_name.c_str (), msg.c_str ());
+    }
+  else
     {
       if (is_relative)
         {
           try
             {
               std::string abs_name = octave::sys::env::make_absolute (dir_name);
 
               abs_dir_cache_iterator p = abs_dir_cache.find (abs_name);
 
               if (p != abs_dir_cache.end ())
                 {
-                  // The directory is in the cache of all directories
-                  // we have visited (indexed by its absolute name).
-                  // If it is out of date, initialize it.  Otherwise,
-                  // copy the info from the cache.  By doing that, we
-                  // avoid unnecessary calls to stat that can slow
-                  // things down tremendously for large directories.
-
+                  // The directory is in the cache of all directories we have
+                  // visited (indexed by absolute name).  If it is out of date,
+                  // initialize it.  Otherwise, copy the info from the cache.
+                  // By doing that, we avoid unnecessary calls to stat that can
+                  // slow things down tremendously for large directories.
                   const dir_info& di = p->second;
 
                   if (fs.mtime () + fs.time_resolution ()
                       > di.dir_time_last_checked)
                     initialize ();
                   else
-                    *this = di;
+                    {
+                      // Copy over info from cache, but leave dir_name and
+                      // is_relative unmodified.
+                      this->abs_dir_name = di.abs_dir_name;
+                      this->dir_mtime = di.dir_mtime;
+                      this->dir_time_last_checked = di.dir_time_last_checked;
+                      this->all_files = di.all_files;
+                      this->fcn_files = di.fcn_files;
+                      this->private_file_map = di.private_file_map;
+                      this->method_file_map = di.method_file_map;
+                      this->package_dir_map = di.package_dir_map;
+                    }
                 }
               else
                 {
                   // We haven't seen this directory before.
-
                   initialize ();
                 }
             }
           catch (const octave::execution_exception&)
             {
-              // Skip updating if we don't know where we are but
-              // don't treat it as an error.
-
+              // Skip updating if we don't know where we are,
+              // but don't treat it as an error.
               recover_from_exception ();
             }
         }
+      // Absolute path, check timestamp to see whether it requires re-caching
       else if (fs.mtime () + fs.time_resolution () > dir_time_last_checked)
         initialize ();
     }
-  else
-    {
-      std::string msg = fs.error ();
-      warning ("load_path: %s: %s", dir_name.c_str (), msg.c_str ());
-    }
 }
 
 bool
 load_path::dir_info::is_package (const std::string& name) const
 {
   size_t pos = name.find ('.');
 
   if (pos == std::string::npos)
