# HG changeset patch
# User jwe
# Date 828914563 0
#      Sun Apr 07 22:02:43 1996 +0000
# Node ID 098edb40c89bc6eb574dde9a7094f483c794f387
# Parent  7e430470e098cb55c804a9571caba26c90ca46e5
[project @ 1996-04-07 21:56:15 by jwe]

diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -15,17 +15,17 @@ dnl Copyright (C) 1996 John W. Eaton
 ### ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
-AC_REVISION($Revision: 1.185 $)
+AC_REVISION($Revision: 1.186 $)
 AC_PREREQ(2.9)
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1)
 
 AC_CANONICAL_HOST
 if test -z "$host"; then
@@ -666,17 +666,17 @@ else
   AC_MSG_RESULT(no)
   AC_DEFINE(FSQP_MISSING, 1)
 fi
 
 ### Checks for functions and variables.
 
 AC_CHECK_FUNCS(setvbuf getcwd gethostname bzero bcopy rindex vfprintf vsprintf)
 AC_CHECK_FUNCS(stricmp strnicmp strcasecmp strncasecmp strerror atexit)
-AC_CHECK_FUNCS(on_exit tempnam memmove putenv)
+AC_CHECK_FUNCS(on_exit tempnam memmove putenv strdup)
 AC_CHECK_FUNCS(mkdir rmdir rename umask)
 AC_CHECK_FUNCS(sigaction sigprocmask sigpending sigsuspend)
 
 OCTAVE_SMART_PUTENV
 OCTAVE_PROGRAM_INVOCATION_NAME
 
 if test "$WITH_DL" = yes || test "$WITH_DL" = maybe; then
   AC_CHECK_LIB(dl, dlopen)
diff --git a/dlfcn/dlfcn.c b/dlfcn/dlfcn.c
--- a/dlfcn/dlfcn.c
+++ b/dlfcn/dlfcn.c
@@ -1,14 +1,26 @@
 /*
  * @(#)dlfcn.c	1.10 revision of 96/02/15  17:42:44
  * This is an unpublished work copyright (c) 1992 HELIOS Software GmbH
  * 30159 Hannover, Germany
  */
 
+/*
+ * Changes marked with `--jwe' were made on April 7 1996 by John W. Eaton
+ * <jwe@bevo.che.wisc.edu> to support g++ and/or use with Octave.
+ */
+
+/*
+ * This makes my life easier with Octave.  --jwe
+ */
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 #include <stdio.h>
 #include <errno.h>
 #include <string.h>
 #include <stdlib.h>
 #include <sys/types.h>
 #include <sys/ldr.h>
 #include <a.out.h>
 #include <ldfcn.h>
@@ -30,26 +42,30 @@ typedef struct {
  * xlC uses the following structure to list its constructors and
  * destructors. This is gleaned from the output of munch.
  */
 typedef struct {
 	void (*init)(void);		/* call static constructors */
 	void (*term)(void);		/* call static destructors */
 } Cdtor, *CdtorPtr;
 
+typedef void (*GccCDtorPtr)(void);
+
 /*
  * The void * handle returned from dlopen is actually a ModulePtr.
  */
 typedef struct Module {
 	struct Module	*next;
 	char		*name;		/* module name for refcounting */
 	int		refCnt;		/* the number of references */
 	void		*entry;		/* entry point from load */
 	struct dl_info	*info;		/* optional init/terminate functions */
 	CdtorPtr	cdtors;		/* optional C++ constructors */
+	GccCDtorPtr	gcc_ctor;	/* g++ constructors  --jwe */
+	GccCDtorPtr	gcc_dtor;	/* g++ destructors  --jwe */
 	int		nExports;	/* the number of exports found */
 	ExportPtr	exports;	/* the array of exports */
 } Module, *ModulePtr;
 
 /*
  * We keep a list of all loaded modules to be able to call the fini
  * handlers and destructors at atexit() time.
  */
@@ -57,17 +73,23 @@ static ModulePtr modList;
 
 /*
  * The last error from one of the dl* routines is kept in static
  * variables here. Each error is returned only once to the caller.
  */
 static char errbuf[BUFSIZ];
 static int errvalid;
 
+/*
+ * The `fixed' gcc header files on AIX 3.2.5 provide a prototype for
+ * strdup().  --jwe
+ */
+#ifndef HAVE_STRDUP
 extern char *strdup(const char *);
+#endif
 static void caterr(char *);
 static int readExports(ModulePtr);
 static void terminate(void);
 static void *findMain(void);
 
 void *dlopen(const char *path, int mode)
 {
 	register ModulePtr mp;
@@ -176,16 +198,25 @@ void *dlopen(const char *path, int mode)
 	 */
 	if (mp->cdtors = (CdtorPtr)dlsym(mp, "__cdtors")) {
 		CdtorPtr cp = mp->cdtors;
 		while (cp->init || cp->term) {
 			if (cp->init && cp->init != (void (*)(void))0xffffffff)
 				(*cp->init)();
 			cp++;
 		}
+	/*
+	 * If the shared object was compiled using g++, we will need
+	 * to call global constructors using the _GLOBAL__DI function,
+	 * and later, global destructors using the _GLOBAL_DD
+	 * funciton.  --jwe
+	 */
+	} else if (mp->gcc_ctor = (GccCDtorPtr)dlsym(mp, "_GLOBAL__DI")) {
+		(*mp->gcc_ctor)();
+		mp->gcc_dtor = (GccCDtorPtr)dlsym(mp, "_GLOBAL__DD"); 
 	} else
 		errvalid = 0;
 	return mp;
 }
 
 /*
  * Attempt to decipher an AIX loader error message and append it
  * to our static error message buffer.
@@ -265,16 +296,22 @@ int dlclose(void *handle)
 		(*mp->info->fini)();
 	if (mp->cdtors) {
 		CdtorPtr cp = mp->cdtors;
 		while (cp->init || cp->term) {
 			if (cp->term && cp->init != (void (*)(void))0xffffffff)
 				(*cp->term)();
 			cp++;
 		}
+	/*
+	 * If the function to handle global destructors for g++
+	 * exists, call it.  --jwe
+	 */
+	} else if (mp->gcc_dtor) {
+	        (*mp->gcc_dtor)();
 	}
 	result = unload(mp->entry);
 	if (result == -1) {
 		errvalid++;
 		strcpy(errbuf, strerror(errno));
 	}
 	if (mp->exports) {
 		register ExportPtr ep;
