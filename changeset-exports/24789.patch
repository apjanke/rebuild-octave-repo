# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1519332758 18000
#      Thu Feb 22 15:52:38 2018 -0500
# Node ID a4d4ec566fd7a0b03a3ff32f7f38bab8e56742ec
# Parent  6f04028d5d86d9427c541762c0a8004b33738b49
improve formatting of large values in pr-output functions

* pr-output.cc (make_real_format): Initialize local variables.
Switch to E format if available precision is exceeded.  Set int format
based on leading digits.
(make_complex_matrix_format): Also allow switching to E format if
printing in fixed_point_format.  Set int format based on leading
digits.
(make_real_matrix_format, make_complex_format,
make_complex_matrix_format, make_range_format):
Initialize local variables.

diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -466,17 +466,17 @@ const int pr_output_traits<float>::max_f
 template <typename T>
 static inline float_display_format
 make_real_format (int digits, bool inf_or_nan, bool int_only)
 {
   float_format fmt;
 
   int prec = std::min (output_precision (), pr_output_traits<T>::digits10);
 
-  int fw, ld, rd;
+  int fw = 0, ld = 0, rd = 0;
 
   if (rat_format)
     {
       fw = 0;
       rd = 0;
     }
   else if (bank_format)
     {
@@ -495,17 +495,22 @@ make_real_format (int digits, bool inf_o
       fw = 8 * sizeof (T);
       rd = 0;
     }
   else if (inf_or_nan || int_only)
     {
       fw = 1 + digits;
       if (inf_or_nan && fw < 4)
         fw = 4;
-      rd = fw;
+
+      if (int_only)
+        {
+          ld = digits;
+          rd = 0;
+        }
     }
   else
     {
       if (digits > 0)
         {
           ld = digits;
           rd = (prec > digits ? prec - digits : prec);
         }
@@ -517,16 +522,17 @@ make_real_format (int digits, bool inf_o
 
       fw = 1 + ld + 1 + rd;
       if (inf_or_nan && fw < 4)
         fw = 4;
     }
 
   if (! (rat_format || bank_format || hex_format || bit_format)
       && (print_e || print_g || print_eng
+          || ld + rd > pr_output_traits<T>::digits10
           || fw > pr_output_traits<T>::max_field_width))
     {
       if (print_g)
         fmt = float_format ();
       else
         {
           // e+ddd
           int ex = 5;
@@ -548,17 +554,17 @@ make_real_format (int digits, bool inf_o
               fmt = float_format (fw, ex, prec - 1, std::ios::scientific);
             }
         }
 
       if (print_big_e)
         fmt.uppercase ();
     }
   else if (! bank_format && (inf_or_nan || int_only))
-    fmt = float_format (fw, rd);
+    fmt = float_format (fw, ld);
   else
     fmt = float_format (fw, rd, std::ios::fixed);
 
   return float_display_format (fmt);
 }
 
 // Works for double and float.
 
@@ -601,17 +607,17 @@ make_real_matrix_format (int x_max, int 
 {
   T scale = ((x_max == 0 || int_or_inf_or_nan)
              ? 1 : std::pow (10.0, calc_scale_exp (x_max - 1)));
 
   float_format fmt;
 
   int prec = std::min (output_precision (), pr_output_traits<T>::digits10);
 
-  int fw, ld, rd;
+  int fw = 0, ld = 0, rd = 0;
 
   if (rat_format)
     {
       fw = 9;
       rd = 0;
     }
   else if (bank_format)
     {
@@ -772,17 +778,17 @@ static inline float_display_format
 make_complex_format (int x_max, int x_min, int r_x,
                      bool inf_or_nan, int int_only)
 {
   float_format r_fmt;
   float_format i_fmt;
 
   int prec = std::min (output_precision (), pr_output_traits<T>::digits10);
 
-  int i_fw, r_fw, ld, rd;
+  int i_fw = 0, r_fw = 0, ld = 0, rd = 0;
 
   if (rat_format)
     {
       i_fw = 0;
       r_fw = 0;
       rd = 0;
     }
   else if (bank_format)
@@ -811,17 +817,22 @@ make_complex_format (int x_max, int x_mi
       int digits = (x_max > x_min ? x_max : x_min);
       i_fw = (digits <= 0 ? 1 : digits);
       r_fw = i_fw + 1;
       if (inf_or_nan && i_fw < 3)
         {
           i_fw = 3;
           r_fw = 4;
         }
-      rd = r_fw;
+
+      if (int_only)
+        {
+          ld = digits;
+          rd = 0;
+        }
     }
   else
     {
       int ld_max, rd_max;
       if (x_max > 0)
         {
           ld_max = x_max;
           rd_max = (prec > x_max ? prec - x_max : prec);
@@ -857,20 +868,19 @@ make_complex_format (int x_max, int x_mi
         {
           i_fw = 3;
           r_fw = 4;
         }
     }
 
   if (! (rat_format || bank_format || hex_format || bit_format)
       && (print_e || print_eng || print_g
-          || (! Vfixed_point_format
-              && (ld + rd > pr_output_traits<T>::digits10
-                  || r_fw > pr_output_traits<T>::max_field_width
-                  || i_fw > pr_output_traits<T>::max_field_width))))
+          || ld + rd > pr_output_traits<T>::digits10
+          || r_fw > pr_output_traits<T>::max_field_width
+          || i_fw > pr_output_traits<T>::max_field_width))
     {
       if (print_g)
         {
           r_fmt = float_format ();
           i_fmt = float_format ();
         }
       else
         {
@@ -907,18 +917,18 @@ make_complex_format (int x_max, int x_mi
       if (print_big_e)
         {
           r_fmt.uppercase ();
           i_fmt.uppercase ();
         }
     }
   else if (! bank_format && (inf_or_nan || int_only))
     {
-      r_fmt = float_format (r_fw, rd);
-      i_fmt = float_format (i_fw, rd);
+      r_fmt = float_format (r_fw, ld);
+      i_fmt = float_format (i_fw, ld);
     }
   else
     {
       r_fmt = float_format (r_fw, rd, std::ios::fixed);
       i_fmt = float_format (i_fw, rd, std::ios::fixed);
     }
 
   return float_display_format (r_fmt, i_fmt);
@@ -987,17 +997,17 @@ make_complex_matrix_format (int x_max, i
   T scale = ((x_max == 0 || int_or_inf_or_nan)
              ? 1 : std::pow (10.0, calc_scale_exp (x_max - 1)));
 
   float_format r_fmt;
   float_format i_fmt;
 
   int prec = std::min (output_precision (), pr_output_traits<T>::digits10);
 
-  int i_fw, r_fw, ld, rd;
+  int i_fw = 0, r_fw = 0, ld = 0, rd = 0;
 
   if (rat_format)
     {
       i_fw = 9;
       r_fw = 9;
       rd = 0;
     }
   else if (bank_format)
@@ -1218,17 +1228,17 @@ make_range_format (int x_max, int x_min,
 {
   double scale = ((x_max == 0 || all_ints)
                   ? 1 : std::pow (10.0, calc_scale_exp (x_max - 1)));
 
   float_format fmt;
 
   int prec = std::min (output_precision (), pr_output_traits<T>::digits10);
 
-  int fw, ld, rd;
+  int fw = 0, ld = 0, rd = 0;
 
   if (rat_format)
     {
       fw = 9;
       rd = 0;
     }
   else if (bank_format)
     {
