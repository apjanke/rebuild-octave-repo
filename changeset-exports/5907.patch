# HG changeset patch
# User jwe
# Date 1153970463 0
#      Thu Jul 27 03:21:03 2006 +0000
# Node ID 288c341438f9a821a36f18c48cf8e75abf1c291b
# Parent  bdf16e1564e18ab8f469fb4eda4f7ab145edb3f6
[project @ 2006-07-27 03:21:02 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,21 @@
 2006-07-26  John W. Eaton  <jwe@octave.org>
 
+	* mex.cc (mxArray::as_octave_value (mxArray *)): New static function.
+	(call_mex, mexPutVariable, mexCallMATLAB,
+	mxArray_cell::as_octave_value, mxArray_struct::as_octave_value):
+	Use static version of as_octave_value here.
+	(mxArray_sparse::mxArray_sparse (const mxArray_sparse&)):
+	Check pr, ir, and jc before calling memcpy.
+	(mxArray_number::mxArray_number): Check pr before calling memcpy
+
+	* mxarray.h (mxArray::as_octave_value (mxArray *)): Provide decl.
+	(mxArray::as_octave_value): Now protected.
+
 	* file-io.cc (Ffeof, Fferror): Use DEFUNX instead of DEFUN.
 
 	* mex.cc (xfree): New function.
 	(mex::free): Use it.
 	(mxArray_struct::~mxArray_struct, mxArray_cell::~mxArray_cell):
 	Delete elements with delete, not mxDestroyArray.
 	(mex::cleanup): Don't call mex::free or mex::free_value.
 	(mex::free_value): Add debug warning.
diff --git a/src/mex.cc b/src/mex.cc
--- a/src/mex.cc
+++ b/src/mex.cc
@@ -93,18 +93,16 @@ protected:
   mxArray_base (void) : mxArray (xmxArray ()) { }
 
 public:
 
   mxArray *clone (void) const = 0;
 
   ~mxArray_base (void) { }
 
-  octave_value as_octave_value (void) const = 0;
-
   bool is_octave_value (void) const { return false; }
 
   int is_cell (void) const = 0;
 
   int is_char (void) const = 0;
 
   int is_class (const char *name_arg) const
   {
@@ -230,16 +228,18 @@ public:
   int get_element_size (void) const = 0;
 
   bool mutation_needed (void) const { return false; }
 
   mxArray *mutate (void) const { return 0; }
 
 protected:
 
+  octave_value as_octave_value (void) const = 0;
+
   mxArray_base (const mxArray_base&) : mxArray (xmxArray ()) { }
 
   void invalid_type_error (void) const
   {
     error ("invalid type for operation");
   }
 
   void error (const char *msg) const
@@ -271,18 +271,16 @@ public:
   mxArray *clone (void) const { return new mxArray_octave_value (*this); }
 
   ~mxArray_octave_value (void)
   {
     mxFree (class_name);
     mxFree (dims);
   }
 
-  octave_value as_octave_value (void) const { return val; }
-
   bool is_octave_value (void) const { return true; }
 
   int is_cell (void) const { return val.is_cell (); }
 
   int is_char (void) const { return val.is_string (); }
 
   int is_complex (void) const { return val.is_complex_type (); }
 
@@ -636,16 +634,18 @@ public:
 
     mutate_flag = true;
   }
 
   mxArray *mutate (void) const { return val.as_mxArray (); }
 
 protected:
 
+  octave_value as_octave_value (void) const { return val; }
+
   mxArray_octave_value (const mxArray_octave_value& arg)
     : mxArray_base (arg), val (arg.val), mutate_flag (arg.mutate_flag),
       id (arg.id), class_name (strsave (arg.class_name)), ndims (arg.ndims),
       dims (ndims > 0 ? static_cast<int *> (malloc (ndims * sizeof (int))) : 0)
   {
     if (dims)
       {
 	for (int i = 0; i < ndims; i++)
@@ -1118,16 +1118,69 @@ public:
   mxArray_number *clone (void) const { return new mxArray_number (*this); }
 
   ~mxArray_number (void)
   {
     mxFree (pr);
     mxFree (pi);
   }
 
+  int is_complex (void) const { return pi != 0; }
+
+  void *get_data (void) const { return pr; }
+
+  void *get_imag_data (void) const { return pi; }
+
+  void set_data (void *pr_arg) { pr = pr_arg; }
+
+  void set_imag_data (void *pi_arg) { pi = pi_arg; }
+
+  int get_string (char *buf, int buflen) const
+  {
+    int retval = 1;
+
+    int n = get_number_of_elements ();
+
+    if (n < buflen)
+      {
+	mxChar *ptr = static_cast<mxChar *> (pr);
+
+	for (int i = 0; i < n; i++)
+	  buf[i] = static_cast<char> (ptr[i]);
+
+	buf[n] = 0;
+      }
+
+    return retval;
+  }
+
+  char *array_to_string (void) const
+  {
+    // FIXME -- this is suposed to handle multi-byte character
+    // strings.
+
+    int nel = get_number_of_elements ();
+
+    char *buf = static_cast<char *> (malloc (nel + 1));
+
+    if (buf)
+      {
+	mxChar *ptr = static_cast<mxChar *> (pr);
+
+	for (int i = 0; i < nel; i++)
+	  buf[i] = static_cast<char> (ptr[i]);
+
+	buf[nel] = '\0';
+      }
+
+    return buf;
+  }
+
+protected:
+
   template <typename ELT_T, typename ARRAY_T, typename ARRAY_ELT_T>
   octave_value
   int_to_ov (const dim_vector& dv) const
   {
     octave_value retval;
 
     int nel = get_number_of_elements ();
 
@@ -1250,80 +1303,28 @@ public:
 
       default:
 	panic_impossible ();
       }    
 
     return retval;
   }
 
-  int is_complex (void) const { return pi != 0; }
-
-  void *get_data (void) const { return pr; }
-
-  void *get_imag_data (void) const { return pi; }
-
-  void set_data (void *pr_arg) { pr = pr_arg; }
-
-  void set_imag_data (void *pi_arg) { pi = pi_arg; }
-
-  int get_string (char *buf, int buflen) const
-  {
-    int retval = 1;
-
-    int n = get_number_of_elements ();
-
-    if (n < buflen)
-      {
-	mxChar *ptr = static_cast<mxChar *> (pr);
-
-	for (int i = 0; i < n; i++)
-	  buf[i] = static_cast<char> (ptr[i]);
-
-	buf[n] = 0;
-      }
-
-    return retval;
-  }
-
-  char *array_to_string (void) const
-  {
-    // FIXME -- this is suposed to handle multi-byte character
-    // strings.
-
-    int nel = get_number_of_elements ();
-
-    char *buf = static_cast<char *> (malloc (nel + 1));
-
-    if (buf)
-      {
-	mxChar *ptr = static_cast<mxChar *> (pr);
-
-	for (int i = 0; i < nel; i++)
-	  buf[i] = static_cast<char> (ptr[i]);
-
-	buf[nel] = '\0';
-      }
-
-    return buf;
-  }
-
-protected:
-
   mxArray_number (const mxArray_number& val)
     : mxArray_matlab (val),
       pr (malloc (get_number_of_elements () * get_element_size ())),
       pi (val.pi ? malloc (get_number_of_elements () * get_element_size ()) : 0)
   {
-    int ntot = get_number_of_elements () * get_element_size ();
-
-    memcpy (pr, val.pr, ntot);
+    size_t nbytes = get_number_of_elements () * get_element_size ();
+
+    if (pr)
+      memcpy (pr, val.pr, nbytes);
 
     if (pi)
-      memcpy (pi, val.pi, ntot);
+      memcpy (pi, val.pi, nbytes);
   }
 
 private:
 
   void *pr;
   void *pi;
 };
 
@@ -1348,16 +1349,42 @@ public:
   ~mxArray_sparse (void)
   {
     mxFree (pr);
     mxFree (pi);
     mxFree (ir);
     mxFree (jc);
   }
 
+  int is_complex (void) const { return pi != 0; }
+
+  int is_sparse (void) const { return 1; }
+
+  void *get_data (void) const { return pr; }
+
+  void *get_imag_data (void) const { return pi; }
+
+  void set_data (void *pr_arg) { pr = pr_arg; }
+
+  void set_imag_data (void *pi_arg) { pi = pi_arg; }
+
+  int *get_ir (void) const { return ir; }
+
+  int *get_jc (void) const { return jc; }
+
+  int get_nzmax (void) const { return nzmax; }
+
+  void set_ir (int *ir_arg) { ir = ir_arg; }
+
+  void set_jc (int *jc_arg) { jc = jc_arg; }
+
+  void set_nzmax (int nzmax_arg) { nzmax = nzmax_arg; }
+
+protected:
+
   octave_value as_octave_value (void) const
   {
     octave_value retval;
 
     dim_vector dv = dims_to_dim_vector ();
 
     switch (get_class_id ())
       {
@@ -1426,61 +1453,43 @@ public:
 
       default:
 	panic_impossible ();
       }
 
     return retval;
   }
 
-  int is_complex (void) const { return pi != 0; }
-
-  int is_sparse (void) const { return 1; }
-
-  void *get_data (void) const { return pr; }
-
-  void *get_imag_data (void) const { return pi; }
-
-  void set_data (void *pr_arg) { pr = pr_arg; }
-
-  void set_imag_data (void *pi_arg) { pi = pi_arg; }
-
-  int *get_ir (void) const { return ir; }
-
-  int *get_jc (void) const { return jc; }
-
-  int get_nzmax (void) const { return nzmax; }
-
-  void set_ir (int *ir_arg) { ir = ir_arg; }
-
-  void set_jc (int *jc_arg) { jc = jc_arg; }
-
-  void set_nzmax (int nzmax_arg) { nzmax = nzmax_arg; }
-
 private:
 
   int nzmax;
 
   void *pr;
   void *pi;
   int *ir;
   int *jc;
 
   mxArray_sparse (const mxArray_sparse& val)
     : mxArray_matlab (val), nzmax (val.nzmax),
       ir (static_cast<int *> (malloc (nzmax * sizeof (int)))),
       jc (static_cast<int *> (malloc (nzmax * sizeof (int))))
   {
-    int ntot = nzmax * get_element_size ();
-
-    memcpy (pr, val.pr, ntot);
-    memcpy (ir, val.ir, nzmax * sizeof(int));
-    memcpy (jc, val.jc, (val.get_n () + 1) * sizeof (int));
+    size_t nbytes = nzmax * get_element_size ();
+
+    if (pr)
+      memcpy (pr, val.pr, nbytes);
+
     if (pi)
-      memcpy (pi, val.pi, ntot);
+      memcpy (pi, val.pi, nbytes);
+
+    if (ir)
+      memcpy (ir, val.ir, nzmax * sizeof (int));
+
+    if (jc)
+      memcpy (jc, val.jc, (val.get_n () + 1) * sizeof (int));
   }
 };
 
 // Matlab-style struct arrays.
 
 class mxArray_struct : public mxArray_matlab
 {
 public:
@@ -1528,45 +1537,16 @@ public:
     int ntot = nfields * get_number_of_elements ();
 
     for  (int i = 0; i < ntot; i++)
       delete data[i];
 
     mxFree (data);
   }
 
-  octave_value as_octave_value (void) const
-  {
-    dim_vector dv = dims_to_dim_vector ();
-
-    string_vector keys (fields, nfields);
-
-    Octave_map m;
-
-    int ntot = nfields * get_number_of_elements ();
-
-    for (int i = 0; i < nfields; i++)
-      {
-	Cell c (dv);
-
-	octave_value *p = c.fortran_vec ();
-
-	int k = 0;
-	for (int j = i; j < ntot; j += nfields)
-	  {
-	    mxArray *t = data[j];
-	    p[k++] = t ? t->as_octave_value () : octave_value (Matrix ());
-	  }
-
-	m.assign (keys[i], c);
-      }
-
-    return m;
-  }
-
   int add_field (const char *key)
   {
     int retval = -1;
 
     if (valid_key (key))
       {
 	nfields++;
 
@@ -1695,16 +1675,44 @@ public:
 
     return retval;
   }
 
   void *get_data (void) const { return data; }
 
   void set_data (void *data_arg) { data = static_cast<mxArray **> (data_arg); }
 
+protected:
+
+  octave_value as_octave_value (void) const
+  {
+    dim_vector dv = dims_to_dim_vector ();
+
+    string_vector keys (fields, nfields);
+
+    Octave_map m;
+
+    int ntot = nfields * get_number_of_elements ();
+
+    for (int i = 0; i < nfields; i++)
+      {
+	Cell c (dv);
+
+	octave_value *p = c.fortran_vec ();
+
+	int k = 0;
+	for (int j = i; j < ntot; j += nfields)
+	  p[k++] = mxArray::as_octave_value (data[j]);
+
+	m.assign (keys[i], c);
+      }
+
+    return m;
+  }
+
 private:
 
   int nfields;
 
   char **fields;
 
   mxArray **data;
 
@@ -1748,43 +1756,42 @@ public:
     int nel = get_number_of_elements ();
 
     for  (int i = 0; i < nel; i++)
       delete data[i];
 
     mxFree (data);
   }
 
+  mxArray *get_cell (int idx) const { return data[idx]; }
+
+  void set_cell (int idx, mxArray *val) { data[idx] = val; }
+
+  void *get_data (void) const { return data; }
+
+  void set_data (void *data_arg) { data = static_cast<mxArray **> (data_arg); }
+
+protected:
+
   octave_value as_octave_value (void) const
   {
     dim_vector dv = dims_to_dim_vector ();
 
     Cell c (dv);
 
     int nel = get_number_of_elements ();
 
     octave_value *p = c.fortran_vec ();
 
     for (int i = 0; i < nel; i++)
-      {
-	mxArray *t = data[i];
-	p[i] = t ? t->as_octave_value () : octave_value (Matrix ());
-      }
+      p[i] = mxArray::as_octave_value (data[i]);
 
     return c;
   }
 
-  mxArray *get_cell (int idx) const { return data[idx]; }
-
-  void set_cell (int idx, mxArray *val) { data[idx] = val; }
-
-  void *get_data (void) const { return data; }
-
-  void set_data (void *data_arg) { data = static_cast<mxArray **> (data_arg); }
-
 private:
 
   mxArray **data;
 
   mxArray_cell (const mxArray_cell& val)
     : mxArray_matlab (val),
       data (static_cast<mxArray **> (malloc (get_number_of_elements () * sizeof (mxArray *))))
   {
@@ -1844,29 +1851,35 @@ mxArray::mxArray (int m, int n)
 
 mxArray::~mxArray (void)
 {
   mxFree (name);
 
   delete rep;
 }
 
-octave_value
-mxArray::as_octave_value (void) const
-{
-  return rep->as_octave_value ();
-}
-
 void
 mxArray::set_name (const char *name_arg)
 {
   mxFree (name);
   name = strsave (name_arg);
 }
 
+octave_value
+mxArray::as_octave_value (mxArray *ptr)
+{
+  return ptr ? ptr->as_octave_value () : octave_value (Matrix ());
+}
+
+octave_value
+mxArray::as_octave_value (void) const
+{
+  return rep->as_octave_value ();
+}
+
 void
 mxArray::maybe_mutate (void) const
 {
   if (rep->is_octave_value ())
     {
       // The mutate function returns a pointer to a complete new
       // mxArray object (or 0, if no mutation happened).  We just want
       // to replace the existing rep with the rep from the new object.
@@ -2850,23 +2863,17 @@ call_mex (callstyle cs, void *f, const o
 	{
 	  // We have something for ans.
 	  nargout = 1;
 	}
 
       retval.resize (nargout);
 
       for (int i = 0; i < nargout; i++)
-	{
-	  if (argout[i])
-	    {
-	      mxArray *t = argout[i];
-	      retval(i) = t ? t->as_octave_value () : octave_value (Matrix ());
-	    }
-	}
+	retval(i) = mxArray::as_octave_value (argout[i]);
     }
 
   // Clean up mex resources.
   unwind_protect::run_frame ("call_mex");
 
   return retval;
 }
 
@@ -2900,20 +2907,17 @@ mexCallMATLAB (int nargout, mxArray *arg
   // would say that this problem is endemic to Octave and we will
   // continue to have memory leaks after Ctrl-C until proper exception
   // handling is implemented.  longjmp() only clears the stack, so any
   // class which allocates data on the heap is going to leak.
 
   args.resize (nargin);
 
   for (int i = 0; i < nargin; i++)
-    {
-      mxArray *t = argin[i];
-      args(i) = t ? t->as_octave_value () : octave_value (Matrix ());
-    }
+    args(i) = mxArray::as_octave_value (argin[i]);
 
   octave_value_list retval = feval (fname, args, nargout);
 
   if (error_state && mex_context->trap_feval_error == 0)
     {
       // FIXME -- is this the correct way to clean up?  abort() is
       // going to trigger a long jump, so the normal class destructors
       // will not be called.  Hopefully this will reduce things to a
@@ -3077,32 +3081,32 @@ mexPutVariable (const char *space, const
 
   if (name[0] == '\0')
     name = ptr->get_name ();
 
   if (! name || name[0] == '\0')
     return 1;
 
   if (! strcmp (space, "global"))
-    set_global_value (name, ptr->as_octave_value ());
+    set_global_value (name, mxArray::as_octave_value (ptr));
   else
     {
       // FIXME -- this belongs in variables.cc.
 
       symbol_record *sr = 0;
 
       if (! strcmp (space, "caller"))
 	sr = curr_sym_tab->lookup (name, true);
       else if (! strcmp (space, "base"))
 	sr = top_level_sym_tab->lookup (name, true);
       else
 	mexErrMsgTxt ("mexPutVariable: symbol table does not exist");
 
       if (sr)
-	sr->define (ptr->as_octave_value ());
+	sr->define (mxArray::as_octave_value (ptr));
       else
 	panic_impossible ();
     }
 
   return 0;
 }
 
 void
diff --git a/src/mxarray.h b/src/mxarray.h
--- a/src/mxarray.h
+++ b/src/mxarray.h
@@ -157,18 +157,16 @@ public:
   {
     mxArray *new_rep = rep->clone ();
 
     return new mxArray (new_rep, name, persistent);
   }
 
   virtual ~mxArray (void);
 
-  virtual octave_value as_octave_value (void) const;
-
   void mark_persistent (void) const { persistent = true; }
 
   void unmark_persistent (void) const { persistent = false; }
 
   bool is_persistent (void) const { return persistent; }
 
   virtual bool is_octave_value (void) const { return rep->is_octave_value (); }
 
@@ -303,18 +301,22 @@ public:
 	int sz =  sizeof (mxChar) * (strlen (str) + 1);
 	retval = static_cast<char *> (mxArray::malloc (sz));
 	strcpy (retval, str);
       }
 
     return retval;
   }
 
+  static octave_value as_octave_value (mxArray *ptr);
+
 protected:
 
+  virtual octave_value as_octave_value (void) const;
+
   mxArray (const xmxArray&) : rep (0), name (0), persistent (false) { }
 
 private:
 
   mutable mxArray *rep;
 
   char *name;
 
