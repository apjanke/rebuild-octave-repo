# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1270723815 -7200
#      Thu Apr 08 12:50:15 2010 +0200
# Node ID 8615b55b5caf4f2fa6b69c1c1391d6717c99140e
# Parent  cb7ffe7288f0cf2a5493a26aa7f7e31efeb5c47d
fix & improve cat (bug #29465)

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2010-04-08  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dim-vector.h (dim_vector::concat): Ignore zero_by_zero, but not
+	all_zero arrays in concatenation (like Matlab).
+
 2010-04-07  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Sparse.cc (Sparse<T>::index (const idx_vector&, bool)): Use shallow
 	copy when column is indexed by colon.
 
 2010-04-07  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Sparse.cc (lblookup): Move in front of Sparse<T>::delete_elements.
diff --git a/liboctave/dim-vector.h b/liboctave/dim-vector.h
--- a/liboctave/dim-vector.h
+++ b/liboctave/dim-vector.h
@@ -468,25 +468,25 @@ public:
           new_dims.resize(k);
       }
  
     return new_dims;
   }
 
   bool concat (const dim_vector& dvb, int dim = 0)
   {
-    if (all_zero ())
+    if (dvb.zero_by_zero ())
+      return true;
+
+    if (zero_by_zero ())
       {
         *this = dvb;
         return true;
       }
 
-    if (dvb.all_zero ())
-      return true;
-
     int na = length ();
     int nb = dvb.length ();
   
     // Find the max and min value of na and nb
     int n_max = na > nb ? na : nb;
     int n_min = na < nb ? na : nb;
   
     // The elements of the dimension vectors can only differ
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2010-04-08  Jaroslav Hajek  <highegg@gmail.com>
+
+	* data.cc (SINGLE_TYPE_CONCAT, DO_SINGLE_TYPE_CONCAT): Replace by
+	templates.
+	(single_type_concat, do_single_type_concat): New static template
+	funcs. Correctly skip 0x0 matrices.
+	(Fcat): Call them here. Add tests.
+
 2010-04-07  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-parse.yy (feval): Use do_multi_index_op on handles.
 	(get_feval_args): Use array slicing functions rather than loops.
 
 2010-04-06  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base-sparse.cc (octave_base_sparse::delete_elements): Rewrite.
diff --git a/src/DLD-FUNCTIONS/conv2.cc b/src/DLD-FUNCTIONS/conv2.cc
--- a/src/DLD-FUNCTIONS/conv2.cc
+++ b/src/DLD-FUNCTIONS/conv2.cc
@@ -1,12 +1,13 @@
 /*
 
 Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008
               Andy Adler
+Copyright (C) 2010 VZLU Prague
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1340,60 +1340,59 @@ omitted, it defaults to the first non-si
 %!assert (prod (zeros (2, 0, 'single'), 1), zeros (1, 0, 'single'));
 %!assert (prod (zeros (2, 0, 'single'), 2), single([1; 1]));
 %!assert (prod (zeros (0, 2, 'single')), single([1, 1]));
 %!assert (prod (zeros (0, 2, 'single'), 1), single([1, 1]));
 %!assert (prod (zeros (0, 2, 'single'), 2), zeros(0, 1, 'single'));
 
  */
 
-#define SINGLE_TYPE_CONCAT(TYPE, EXTRACTOR) \
-  do \
-    { \
-      int dv_len = dv.length (); \
-      Array<octave_idx_type> ra_idx (dv_len > 1 ? dv_len : 2, 1, 0); \
-      \
-      for (int j = 1; j < n_args; j++) \
-        { \
-          octave_quit (); \
-          \
-          TYPE ra = args(j).EXTRACTOR ();       \
-          \
-          if (! error_state) \
-            { \
-              result.insert (ra, ra_idx); \
-              \
-              if (error_state) \
-                return retval; \
-              \
-              dim_vector dv_tmp = args (j).dims (); \
-              \
-              if (dim >= dv_len) \
-                { \
-                  if (j > 1) \
-                    error ("%s: indexing error", fname.c_str ()); \
-                  break; \
-                } \
-              else \
-                ra_idx (dim) += (dim < dv_tmp.length () ? dv_tmp (dim) : 1); \
-            } \
-        } \
-    } \
- while (0)
-
-#define DO_SINGLE_TYPE_CONCAT(TYPE, EXTRACTOR) \
-  do \
-    { \
-      TYPE result (dv); \
-      \
-      SINGLE_TYPE_CONCAT(TYPE, EXTRACTOR); \
-      \
-      retval = result; \
-    } \
- while (0)
+template<class TYPE>
+static void 
+single_type_concat (TYPE& result,
+                    const octave_value_list& args,
+                    int dim)
+{
+  int dv_len = result.ndims (), n_args = args.length ();
+  Array<octave_idx_type> ra_idx (dv_len, 1, 0);
+
+  for (int j = 1; j < n_args; j++)
+    {
+      octave_quit ();
+
+      TYPE ra = octave_value_extract<TYPE> (args(j));
+      dim_vector dvra = ra.dims ();
+      if (error_state)
+        break;
+
+      if (dvra.zero_by_zero ())
+        continue;
+
+      result.insert (ra, ra_idx);
+
+      if (error_state)
+        break;
+
+      ra_idx (dim) += (dim < dvra.length () ? dvra(dim) : 1);
+    }
+}
+
+template<class TYPE>
+static octave_value 
+do_single_type_concat (const dim_vector& dv,
+                       const octave_value_list& args,
+                       int dim)
+{
+  TYPE result (dv);
+
+  single_type_concat (result, args, dim);
+
+  return result;
+}
+
 
 static octave_value
 do_cat (const octave_value_list& args, std::string fname)
 {
   octave_value retval;
 
   int n_args = args.length (); 
 
@@ -1447,71 +1446,70 @@ do_cat (const octave_value_list& args, s
                 any_sparse_p = true;
             }
 
           if (result_type == "double")
             {
               if (any_sparse_p)
                 {           
                   if (all_real_p)
-                    DO_SINGLE_TYPE_CONCAT (SparseMatrix, sparse_matrix_value);
+                    retval = do_single_type_concat<SparseMatrix> (dv, args, dim);
                   else
-                    DO_SINGLE_TYPE_CONCAT (SparseComplexMatrix, sparse_complex_matrix_value);
+                    retval = do_single_type_concat<SparseComplexMatrix> (dv, args, dim);
                 }
               else
                 {
                   if (all_real_p)
-                    DO_SINGLE_TYPE_CONCAT (NDArray, array_value);
+                    retval = do_single_type_concat<NDArray> (dv, args, dim);
                   else
-                    DO_SINGLE_TYPE_CONCAT (ComplexNDArray, complex_array_value);
+                    retval = do_single_type_concat<ComplexNDArray> (dv, args, dim);
                 }
             }
           else if (result_type == "single")
             {
               if (all_real_p)
-                DO_SINGLE_TYPE_CONCAT (FloatNDArray, float_array_value);
+                retval = do_single_type_concat<FloatNDArray> (dv, args, dim);
               else
-                DO_SINGLE_TYPE_CONCAT (FloatComplexNDArray, 
-                                       float_complex_array_value);
+                retval = do_single_type_concat<FloatComplexNDArray> (dv, args, dim);
             }
           else if (result_type == "char")
             {
               char type = all_dq_strings_p ? '"' : '\'';
 
               maybe_warn_string_concat (all_dq_strings_p, all_sq_strings_p);
 
               charNDArray result (dv, Vstring_fill_char);
 
-              SINGLE_TYPE_CONCAT (charNDArray, char_array_value);
+              single_type_concat<charNDArray> (result, args, dim);
 
               retval = octave_value (result, type);
             }
           else if (result_type == "logical")
             {
               if (any_sparse_p)
-                DO_SINGLE_TYPE_CONCAT (SparseBoolMatrix, sparse_bool_matrix_value);
+                retval = do_single_type_concat<SparseBoolMatrix> (dv, args, dim);
               else
-                DO_SINGLE_TYPE_CONCAT (boolNDArray, bool_array_value);
+                retval = do_single_type_concat<boolNDArray> (dv, args, dim);
             }
           else if (result_type == "int8")
-            DO_SINGLE_TYPE_CONCAT (int8NDArray, int8_array_value);
+            retval = do_single_type_concat<int8NDArray> (dv, args, dim);
           else if (result_type == "int16")
-            DO_SINGLE_TYPE_CONCAT (int16NDArray, int16_array_value);
+            retval = do_single_type_concat<int16NDArray> (dv, args, dim);
           else if (result_type == "int32")
-            DO_SINGLE_TYPE_CONCAT (int32NDArray, int32_array_value);
+            retval = do_single_type_concat<int32NDArray> (dv, args, dim);
           else if (result_type == "int64")
-            DO_SINGLE_TYPE_CONCAT (int64NDArray, int64_array_value);
+            retval = do_single_type_concat<int64NDArray> (dv, args, dim);
           else if (result_type == "uint8")
-            DO_SINGLE_TYPE_CONCAT (uint8NDArray, uint8_array_value);
+            retval = do_single_type_concat<uint8NDArray> (dv, args, dim);
           else if (result_type == "uint16")
-            DO_SINGLE_TYPE_CONCAT (uint16NDArray, uint16_array_value);
+            retval = do_single_type_concat<uint16NDArray> (dv, args, dim);
           else if (result_type == "uint32")
-            DO_SINGLE_TYPE_CONCAT (uint32NDArray, uint32_array_value);
+            retval = do_single_type_concat<uint32NDArray> (dv, args, dim);
           else if (result_type == "uint64")
-            DO_SINGLE_TYPE_CONCAT (uint64NDArray, uint64_array_value);
+            retval = do_single_type_concat<uint64NDArray> (dv, args, dim);
           else
             {
               // The lines below might seem crazy, since we take a copy
               // of the first argument, resize it to be empty and then resize
               // it to be full. This is done since it means that there is no
               // recopying of data, as would happen if we used a single resize.
               // It should be noted that resize operation is also significantly 
               // slower than the do_cat_op function, so it makes sense to have
@@ -1551,23 +1549,16 @@ do_cat (const octave_value_list& args, s
                       break;
                     }
                   else
                     ra_idx (dim) += (dim < dv_tmp.length () ? 
                                      dv_tmp (dim) : 1);
                 }
               retval = tmp;
             }
-
-          if (! error_state)
-            {
-              // Reshape, chopping trailing singleton dimensions
-              dv.chop_trailing_singletons ();
-              retval = retval.reshape (dv);
-            }
         }
       else
         error ("%s: invalid dimension argument", fname.c_str ());
     }
   else
     print_usage ();
 
   return retval;
@@ -1784,16 +1775,21 @@ cat (4, ones(2, 2), zeros (2, 2))\n\
 %!assert (testcat('uint32', 'single', 'uint32', false));
 %!assert (testcat('uint32', 'uint32', 'uint32', false));
 %!assert (testcat('double', 'uint64', 'uint64', false));
 %!assert (testcat('uint64', 'double', 'uint64', false));
 %!assert (testcat('single', 'uint64', 'uint64', false));
 %!assert (testcat('uint64', 'single', 'uint64', false));
 %!assert (testcat('uint64', 'uint64', 'uint64', false));
 
+%! assert (cat (3, [], [1,2;3,4]), [1,2;3,4]);
+%! assert (cat (3, [1,2;3,4], []), [1,2;3,4]);
+%! assert (cat (3, [], [1,2;3,4], []), [1,2;3,4]);
+%! assert (cat (3, [], [], []), []);
+
 */
 
 static octave_value
 do_permute (const octave_value_list& args, bool inv)
 {
   octave_value retval;
 
   if (args.length () == 2 && args(1).length () >= args(1).ndims ())
