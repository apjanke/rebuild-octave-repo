# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1508518589 -7200
#      Fri Oct 20 18:56:29 2017 +0200
# Node ID d0cee5e0987921b75016ef1eb3fa68df0f4ba781
# Parent  c4dac7a0da7e1e957a47df126d829059968b6ef7
fix auto close for case in editor (bug #52235)

* octave_qscintilla (smart_indent): do smart indent but no autoclose for
  case and otherwise

diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -443,19 +443,19 @@ octave_qscintilla::is_style_comment (int
 
 // Do smart indendation after if, for, ...
 void
 octave_qscintilla::smart_indent (bool do_smart_indent,
                                  int do_auto_close, int line)
 {
   QString prevline = text (line);
 
-  QRegExp bkey = QRegExp ("^[\t ]*(if|for|while|switch|case|do|function"
-                          "|properties|events|classdef|unwind_protect"
-                          "|unwind_protect_cleanup|try)"
+  QRegExp bkey = QRegExp ("^[\t ]*(if|for|while|switch|case|otherwise"
+                          "|do|function|properties|events|classdef"
+                          "|unwind_protect|unwind_protect_cleanup|try)"
                           "[\r]?[\n\t #%]");
   // last word except for comments, assuming no ' or " in comment.
   // rx_end = QRegExp ("(\\w+)[ \t;\r\n]*([%#][^\"']*)?$");
 
   // last word except for comments,
   // allowing % and # in single or double quoted strings
   // FIXME This will get confused by transpose.
   QRegExp ekey = QRegExp ("(?:(?:['\"][^'\"]*['\"])?[^%#]*)*"
@@ -475,17 +475,19 @@ octave_qscintilla::smart_indent (bool do
 
       if (do_smart_indent && ! inline_end)
         {
           // Do smart indent in the current line (line+1)
           indent (line+1);
           setCursorPosition (line+1, indentation (line) + indentationWidth ());
         }
 
-      if (do_auto_close && ! inline_end)
+      if (do_auto_close
+              && ! inline_end
+              && ! first_word.contains (QRegExp ("(case|otherwise)")))
         {
           // Do auto close
           auto_close (do_auto_close, line, prevline, first_word);
         }
 
       return;
     }
 
