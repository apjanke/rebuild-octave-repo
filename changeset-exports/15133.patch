# HG changeset patch
# User Rik <rik@octave.org>
# Date 1344487883 25200
#      Wed Aug 08 21:51:23 2012 -0700
# Node ID f91eac1bc66d7295434690b477600925ac4a78f1
# Parent  3e5b00d964ad301876987a099ad656212da5347d
m4/acinclude.m4: Correct typos, use consistent style for describing macros.

* m4/acinclude.m4: Correct typos, use consistent style for describing macros.

diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -34,32 +34,30 @@ ifdef([m4_ifnblank],[],[
 m4_define([m4_ifnblank],
 [m4_if(m4_translit([[$1]],  [ ][	][
 ]), [], [$3], [$2])])])
 dnl
 dnl ----------------------------------------------------------------------
 dnl
 dnl Figure out the hardware-vendor-os info.
 dnl
-dnl OCTAVE_HOST_TYPE
 AC_DEFUN([OCTAVE_HOST_TYPE],
 [AC_CANONICAL_HOST
 if test -z "$host"; then
   host=unknown
 fi
 canonical_host_type=$host
 if test "$host" = unknown; then
   AC_MSG_WARN([configuring Octave for unknown system type
 ])
 fi
 AC_SUBST(canonical_host_type)])
 dnl
 dnl Set default value for a variable and substitute it.
 dnl
-dnl OCTAVE_SET_DEFAULT
 AC_DEFUN([OCTAVE_SET_DEFAULT],
 [ifelse($#, 2, [: ${$1=$2}
 ])dnl
 AC_MSG_RESULT([defining $1 to be $$1])
 AC_SUBST($1)])
 dnl
 dnl Check for ar.
 dnl
@@ -70,100 +68,100 @@ fi
 AC_SUBST(AR)
 
 if test -z "$ARFLAGS"; then
   ARFLAGS="rc"
 fi
 AC_SUBST(ARFLAGS)
 ])
 dnl
-dnl See if the compiler supports placement delete
+dnl Check if the compiler supports placement delete.
 dnl
 AC_DEFUN([OCTAVE_PLACEMENT_DELETE],
 [AC_CACHE_CHECK([whether <new> defines placement delete operator],
 octave_cv_placement_delete,
 [AC_LANG_PUSH(C++)
 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <new>]],
 [[operator delete((void *)0, (void *)0);]])],
 octave_cv_placement_delete=yes, octave_cv_placement_delete=no)])
 if test $octave_cv_placement_delete = yes; then
 AC_DEFINE(HAVE_PLACEMENT_DELETE,1,[Define to 1 if C++ supports operator delete(void *, void *).])
 fi
 AC_LANG_POP(C++)
 ])
 dnl
-dnl See if the compiler dynamic auto arrays
+dnl Check if the compiler dynamic auto arrays.
 dnl
 AC_DEFUN([OCTAVE_DYNAMIC_AUTO_ARRAYS],
 [AC_CACHE_CHECK([whether C++ supports dynamic auto arrays],
 octave_cv_dynamic_auto_arrays,
 [AC_LANG_PUSH(C++)
 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]],
 [[void test(char *); int length(); char x[length()]; test(x);]])],
 octave_cv_dynamic_auto_arrays=yes, octave_cv_dynamic_auto_arrays=no)])
 if test $octave_cv_dynamic_auto_arrays = yes; then
 AC_DEFINE(HAVE_DYNAMIC_AUTO_ARRAYS,1,[Define to 1 if C++ supports dynamic auto arrays.])
 fi
 AC_LANG_POP(C++)
 ])
 dnl
-dnl See if the C++ library has the bit_and, bit_or and bit_xor
+dnl Check if the C++ library has the bit_and, bit_or, and bit_xor
 dnl templates defined.
 dnl
 AC_DEFUN([OCTAVE_CXX_BITWISE_OP_TEMPLATES],
-[AC_CACHE_CHECK([whether bit_and, bit_or and bit_xor are defined in the c++ library],
+[AC_CACHE_CHECK([whether bit_and, bit_or, bit_xor are defined in the C++ library],
 octave_cv_cxx_bitwise_op_templates,
 [AC_LANG_PUSH(C++)
 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <functional>]],
 [[int x = 0;
 int y = 1;
 int z1 = std::bit_and<int>() (x, y);
 int z2 = std::bit_or<int>() (x, y);
 int z3 = std::bit_xor<int>() (x, y);]])],
 octave_cv_cxx_bitwise_op_templates=yes, octave_cv_cxx_bitwise_op_templates=no)])
 if test $octave_cv_cxx_bitwise_op_templates = yes; then
 AC_DEFINE(HAVE_CXX_BITWISE_OP_TEMPLATES,1,[Define to 1 if C++ library has templated bitwise operators.])
 fi
 AC_LANG_POP(C++)
 ])
 
 dnl
-dnl See if the C++ library has functions to set real and imaginary
+dnl Check if the C++ library has functions to set real and imaginary
 dnl parts of complex numbers independently.
 dnl
 AC_DEFUN([OCTAVE_CXX_COMPLEX_SETTERS],
 [AC_CACHE_CHECK([whether complex class can set components independently],
 octave_cv_cxx_complex_setters,
 [AC_LANG_PUSH(C++)
 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <complex>]],
 [[std::complex<double> x; x.real (1.0); x.imag (2.0);]])],
 octave_cv_cxx_complex_setters=yes, octave_cv_cxx_complex_setters=no)])
 if test $octave_cv_cxx_complex_setters = yes; then
 AC_DEFINE(HAVE_CXX_COMPLEX_SETTERS,1,[Define to 1 if C++ complex class has void real (T) and void imag (T) methods.])
 fi
 AC_LANG_POP(C++)
 ])
 dnl
-dnl See if the C++ library has functions to access real and imaginary
+dnl Check if the C++ library has functions to access real and imaginary
 dnl parts of complex numbers independently via references.
 dnl
 AC_DEFUN([OCTAVE_CXX_COMPLEX_REFERENCE_ACCESSORS],
 [AC_CACHE_CHECK([whether complex class can reference components independently],
 octave_cv_cxx_complex_reference_accessors,
 [AC_LANG_PUSH(C++)
 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <complex>]],
 [[std::complex<double> x; x.real () = 1.0; x.imag () = 1.0;]])],
 octave_cv_cxx_complex_reference_accessors=yes, octave_cv_cxx_complex_reference_accessors=no)])
 if test $octave_cv_cxx_complex_reference_accessors = yes; then
 AC_DEFINE(HAVE_CXX_COMPLEX_REFERENCE_ACCESSORS,1,[Define to 1 if C++ complex class has T& real (void) and T& imag (void) methods.])
 fi
 AC_LANG_POP(C++)
 ])
 dnl
-dnl See if the Carbon Framework defines CGDisplayBitsPerPixel.
+dnl Check if the Carbon Framework defines CGDisplayBitsPerPixel.
 dnl
 AC_DEFUN([OCTAVE_CARBON_CGDISPLAYBITSPERPIXEL],
 [AC_CACHE_CHECK([whether CGDisplayBitsPerPixel is defined in the Carbon Framework],
 octave_cv_carbon_cgdisplaybitsperpixel,
 [AC_LANG_PUSH(C++)
 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
 #include <Carbon/Carbon.h>
 ]], [[
@@ -172,24 +170,25 @@ size_t depth = CGDisplayBitsPerPixel (di
 ]])],
 octave_cv_carbon_cgdisplaybitsperpixel=yes, octave_cv_carbon_cgdisplaybitsperpixel=no)])
 if test $octave_cv_carbon_cgdisplaybitsperpixel = yes; then
 AC_DEFINE(HAVE_CARBON_CGDISPLAYBITSPERPIXEL,1,[Define to 1 if Carbon Framework has CGDisplayBitsPerPixel.])
 fi
 AC_LANG_POP(C++)
 ])
 dnl
-dnl The following test is from Karl Berry's Kpathseach library.  I'm
+dnl The following test is from Karl Berry's Kpathsearch library.  I'm
 dnl including it here in case we someday want to make the use of
 dnl kpathsea optional.
 dnl
 dnl Some BSD putenv's, e.g., FreeBSD, do malloc/free's on the environment.
 dnl This test program is due to Mike Hibler <mike@cs.utah.edu>.
 dnl We don't actually need to run this if we don't have putenv, but it
 dnl doesn't hurt.
+dnl 
 AC_DEFUN([OCTAVE_SMART_PUTENV],
 [AC_MSG_CHECKING([whether putenv uses malloc])
 AC_CACHE_VAL(octave_cv_func_putenv_malloc,
 [AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #define VAR	"YOW_VAR"
 #define STRING1 "GabbaGabbaHey"
 #define STRING2 "Yow!!"		/* should be shorter than STRING1 */
 extern char *getenv (); /* in case char* and int don't mix gracefully */
@@ -239,20 +238,19 @@ main ()
   exit (rstr1 == rstr2 ? 0 : 1);
 }]])], octave_cv_func_putenv_malloc=yes, octave_cv_func_putenv_malloc=no,
     octave_cv_func_putenv_malloc=no)])dnl
 AC_MSG_RESULT([$octave_cv_func_putenv_malloc])
 if test $octave_cv_func_putenv_malloc = yes; then
   AC_DEFINE(SMART_PUTENV,1,[To quiet autoheader.])
 fi])
 dnl
-dnl Check to see if C++ compiler needs the new friend template declaration 
+dnl Check if C++ compiler needs the new friend template declaration
 dnl syntax. 
 dnl
-dnl OCTAVE_CXX_NEW_FRIEND_TEMPLATE_DECL
 AC_DEFUN([OCTAVE_CXX_NEW_FRIEND_TEMPLATE_DECL], [
   AC_REQUIRE([AC_PROG_CXX])
   AC_MSG_CHECKING([for C++ support for new friend template declaration])
   AC_CACHE_VAL(octave_cv_cxx_new_friend_template_decl, [
     AC_LANG_PUSH(C++)
     rm -f conftest.h
     cat > conftest.h <<EOB
        struct A {
@@ -274,22 +272,20 @@ EOB
     AC_LANG_POP(C++)
   ])
   AC_MSG_RESULT([$octave_cv_cxx_new_friend_template_decl])
   if test $octave_cv_cxx_new_friend_template_decl = yes; then
     AC_DEFINE(CXX_NEW_FRIEND_TEMPLATE_DECL,1,[Define to 1 if your compiler supports `<>' stuff for template friends.])
   fi
 ])
 dnl
-dnl Check to see if C compiler handles FLAG command line option.  If
-dnl two arguments are specified, execute the second arg as shell
-dnl commands.  Otherwise, add FLAG to CFLAGS if the compiler accepts
-dnl the flag.
+dnl Check if C compiler handles FLAG command line option.  If two
+dnl arguments are specified, execute the second arg as shell commands.
+dnl Otherwise, add FLAG to CFLAGS if the compiler accepts the flag.
 dnl
-dnl OCTAVE_CC_FLAG
 AC_DEFUN([OCTAVE_CC_FLAG], [
   ac_safe=`echo "$1" | sed 'y% ./+-:=%___p___%'`
   AC_MSG_CHECKING([whether ${CC-cc} accepts $1])
   AC_CACHE_VAL(octave_cv_cc_flag_$ac_safe, [
     AC_LANG_PUSH(C)
     XCFLAGS="$CFLAGS"
     CFLAGS="$CFLAGS $1"
     AC_LINK_IFELSE([AC_LANG_PROGRAM([], [])],
@@ -304,22 +300,20 @@ AC_DEFUN([OCTAVE_CC_FLAG], [
       CFLAGS="$CFLAGS $1"
       AC_MSG_RESULT([adding $1 to CFLAGS])], [$2])
   else
     AC_MSG_RESULT(no)
     ifelse([$3], , , [$3])
   fi
 ])
 dnl
-dnl Check to see if C++ compiler handles FLAG command line option.  If
-dnl two arguments are specified, execute the second arg as shell
-dnl commands.  Otherwise, add FLAG to CXXFLAGS if the compiler accepts
-dnl the flag.
+dnl Check if C++ compiler handles FLAG command line option.  If two
+dnl arguments are specified, execute the second arg as shell commands.
+dnl Otherwise, add FLAG to CXXFLAGS if the compiler accepts the flag.
 dnl
-dnl OCTAVE_CXX_FLAG
 AC_DEFUN([OCTAVE_CXX_FLAG], [
   ac_safe=`echo "$1" | sed 'y%./+-:=%__p___%'`
   AC_MSG_CHECKING([whether ${CXX-g++} accepts $1])
   AC_CACHE_VAL(octave_cv_cxx_flag_$ac_safe, [
     AC_LANG_PUSH(C++)
     XCXXFLAGS="$CXXFLAGS"
     CXXFLAGS="$CXXFLAGS $1"
     AC_LINK_IFELSE([AC_LANG_PROGRAM([], [])],
@@ -334,22 +328,21 @@ AC_DEFUN([OCTAVE_CXX_FLAG], [
       CXXFLAGS="$CXXFLAGS $1"
       AC_MSG_RESULT([adding $1 to CXXFLAGS])], [$2])
   else
     AC_MSG_RESULT(no)
     ifelse([$3], , , [$3])
   fi
 ])
 dnl
-dnl Check to see if Fortran compiler handles FLAG command line option.  If
+dnl Check if Fortran compiler handles FLAG command line option.  If
 dnl two arguments are specified, execute the second arg as shell
 dnl commands.  Otherwise, add FLAG to FFLAGS if the compiler accepts
 dnl the flag.
 dnl
-dnl OCTAVE_F77_FLAG
 AC_DEFUN([OCTAVE_F77_FLAG], [
   ac_safe=`echo "$1" | sed 'y%./+-:=%__p___%'`
   AC_MSG_CHECKING([whether ${F77-g77} accepts $1])
   AC_CACHE_VAL(octave_cv_f77_flag_$ac_safe, [
     AC_LANG_PUSH(Fortran 77)
     XFFLAGS="$FFLAGS"
     FFLAGS="$FFLAGS $1"
     AC_LINK_IFELSE([AC_LANG_PROGRAM([], [])],
@@ -364,17 +357,17 @@ AC_DEFUN([OCTAVE_F77_FLAG], [
       FFLAGS="$FFLAGS $1"
       AC_MSG_RESULT([adding $1 to FFLAGS])], [$2])
   else
     AC_MSG_RESULT(no)
     ifelse([$3], , , [$3])
   fi
 ])
 dnl
-dnl Check to see whether Fortran compiler has the intrinsic function ISNAN.
+dnl Check if Fortran compiler has the intrinsic function ISNAN.
 dnl
 AC_DEFUN([OCTAVE_CHECK_FORTRAN_HAVE_ISNAN], [
   AC_LANG_PUSH(Fortran 77)
   AC_CACHE_CHECK([whether $F77 has the intrinsic function ISNAN],
                  [octave_cv_fortran_have_isnan],
 [AC_COMPILE_IFELSE(
 [      program foo
       implicit none
@@ -386,17 +379,17 @@ AC_DEFUN([OCTAVE_CHECK_FORTRAN_HAVE_ISNA
       if (isnan(y)) then
          print *, 'y is NaN'
       end if
       end program], [octave_cv_fortran_have_isnan=yes], [octave_cv_fortran_have_isnan=no]
 )])
   AC_LANG_POP(Fortran 77)      
 ])
 dnl
-dnl Check to see whether the default Fortran INTEGER is 64 bits wide.
+dnl Check if the default Fortran INTEGER is 64 bits wide.
 dnl
 AC_DEFUN([OCTAVE_CHECK_FORTRAN_INTEGER_SIZE], [
   octave_fintsize_save_FFLAGS="$FFLAGS"
   FFLAGS="$FFLAGS $F77_INTEGER_8_FLAG"
   AC_LANG_PUSH(Fortran 77)
   AC_CACHE_CHECK([whether $F77 generates correct size integers],
                  [octave_cv_fortran_integer_size],
 [AC_COMPILE_IFELSE(
@@ -440,39 +433,36 @@ rm -f conftest.$ac_objext fintsize.$ac_o
 ], [
   rm -f conftest.$ac_objext
   AC_MSG_FAILURE([cannot compile a simple Fortran program])
   octave_cv_fortran_integer_size=no])])
   AC_LANG_POP(Fortran 77)
   FFLAGS="$octave_fintsize_save_FFLAGS"
 ])
 dnl
-dnl
-dnl Adds warnings to final summary
+dnl Add warning to final summary.
 dnl
 AC_DEFUN([OCTAVE_CONFIGURE_WARNING], [
   AC_MSG_WARN([$][$1])
   m4_set_add([summary_warning_list], [$1])
 ])
 dnl
-dnl
-dnl Prints final summary
+dnl Print final summary.
 dnl
 AC_DEFUN([OCTAVE_CONFIGURE_WARNING_SUMMARY], [
   m4_set_foreach([summary_warning_list], [elt], [
     if test -n "[$]elt"; then
       AC_MSG_WARN([$]elt)
       warn_msg_printed=true
     fi])
 ])
 dnl
-dnl
-dnl
 dnl OCTAVE_CHECK_LIBRARY(LIBRARY, DOC-NAME, WARN-MSG, HEADER, FUNC,
 dnl                      LANG, DOC-STRING, EXTRA-CHECK)
+dnl
 AC_DEFUN([OCTAVE_CHECK_LIBRARY], [
   AC_ARG_WITH([$1-includedir],
     [AS_HELP_STRING([--with-$1-includedir=DIR],
       [look for $2 include files in DIR])],
     [m4_toupper([$1])_CPPFLAGS="-I$withval"])
   AC_SUBST(m4_toupper([$1])_CPPFLAGS)
 
   AC_ARG_WITH([$1-libdir],
@@ -540,17 +530,17 @@ AC_DEFUN([OCTAVE_CHECK_LIBRARY], [
   AC_SUBST(m4_toupper([$1])_LIBS)
   AC_SUBST([TEXINFO_]m4_toupper([$1]))
   if test -n "$warn_$1"; then
     AC_MSG_WARN([$warn_$1])
     m4_toupper([$1])_LIBS=
   fi
 ])
 dnl
-dnl Check for flex
+dnl Check for flex.
 dnl
 AC_DEFUN([OCTAVE_PROG_FLEX], [
 ### For now, don't define LEXLIB to be -lfl -- we don't use anything in
 ### it, and it might not be installed.
 ###
 ### Also make sure that we generate an interactive scanner if we are
 ### using flex.
   AC_PROG_LEX
@@ -568,17 +558,17 @@ I didn't find flex, but it's only a prob
 lex.cc, which is the case if you're building from VCS sources.
 "
       OCTAVE_CONFIGURE_WARNING([warn_flex])
     ;;
   esac
   AC_SUBST(LFLAGS)
 ])
 dnl
-dnl Check for bison
+dnl Check for bison.
 dnl
 AC_DEFUN([OCTAVE_PROG_BISON], [
   AC_PROG_YACC
   case "$YACC" in
     bison*)
     ;;
     *)
       YACC='$(top_srcdir)/build-aux/missing bison'
@@ -612,60 +602,58 @@ else
   AC_CHECK_PROGS(DEFAULT_PAGER, $octave_possible_pagers, [])
   if test -z "$DEFAULT_PAGER"; then
     warn_less="I couldn't find \`less', \`more', \`page', or \`pg'"
     OCTAVE_CONFIGURE_WARNING([warn_less])
   fi
 fi
 ])
 dnl
-dnl Does gnuplot exist?
+dnl Check for gnuplot.
 dnl
 AC_DEFUN([OCTAVE_PROG_GNUPLOT], [
 gp_names="gnuplot"
 gp_default="gnuplot"
 if test "$cross_compiling" = yes; then
   GNUPLOT="$gp_default"
   AC_MSG_RESULT([assuming $GNUPLOT exists on $canonical_host_type host])
 else
   AC_CHECK_PROGS(GNUPLOT, [$gp_names])
   if test -z "$GNUPLOT"; then
     GNUPLOT="$gp_default"
     warn_gnuplot="
 
-gnuplot not found. It isn't necessary to have gnuplot installed, but
+gnuplot not found.  It isn't necessary to have gnuplot installed, but
 without native graphics or gnuplot you won't be able to use any of
 Octave's plotting commands.
 "
     OCTAVE_CONFIGURE_WARNING([warn_gnuplot])
   fi
 fi
 AC_SUBST(GNUPLOT)
 ])
 dnl
-dnl Is gperf installed?
+dnl Check for gperf.
 dnl
-dnl OCTAVE_PROG_GPERF
 AC_DEFUN([OCTAVE_PROG_GPERF], [
   AC_CHECK_PROG(GPERF, gperf, gperf, [])
   if test -z "$GPERF"; then
     GPERF='$(top_srcdir)/build-aux/missing gperf'
     warn_gperf="
 
 I didn't find gperf, but it's only a problem if you need to
 reconstruct oct-gperf.h 
 "
     OCTAVE_CONFIGURE_WARNING([warn_gperf])
   fi
   AC_SUBST(GPERF)
 ])
 dnl
-dnl Is ghostscript installed?
+dnl Check for ghostscript.
 dnl
-dnl OCTAVE_PROG_GHOSTSCRIPT
 AC_DEFUN([OCTAVE_PROG_GHOSTSCRIPT], [
   case "$canonical_host_type" in
     *-*-mingw* | *-*-msdosmsvc)
       gs_names="gswin32c gs mgs"
     ;;
     *)
       gs_names="gs"
     ;;
@@ -680,49 +668,46 @@ will fail, and saving graphics in some o
 using Octave
 "
 
     OCTAVE_CONFIGURE_WARNING([warn_ghostscript])
   fi
   AC_SUBST(GHOSTSCRIPT)
 ])
 dnl
-dnl Find makeinfo required for reading documentation
+dnl Check for makeinfo.
 dnl
-dnl OCTAVE_PROG_MAKEINFO
 AC_DEFUN([OCTAVE_PROG_MAKEINFO],
 dnl use MKINFO, not MAKEINFO, for variable name because Automake automatically
 dnl defines a value for MAKEINFO even when it does not exist which will then
 dnl fool the 'test -z' line.
   [AC_CHECK_PROG(MKINFO, makeinfo, makeinfo, [])
    if test -z "$MKINFO"; then
      AC_MSG_ERROR([makeinfo program required for reading documentation])
    fi
 ])
 dnl
-dnl Is texi2dvi installed?
+dnl Check for texi2dvi.
 dnl
-dnl OCTAVE_PROG_TEXI2DVI
 AC_DEFUN([OCTAVE_PROG_TEXI2DVI], [
   AC_CHECK_PROG(TEXI2DVI, texi2dvi, texi2dvi, [])
   if test -z "$TEXI2DVI"; then
     TEXI2DVI='$(top_srcdir)/build-aux/missing texi2dvi'
     warn_texi2dvi="
 
 I didn't find texi2dvi, but it's only a problem if you need to
 reconstruct the DVI version of the manual
 "
     OCTAVE_CONFIGURE_WARNING([warn_texi2dvi])
   fi
   AC_SUBST(TEXI2DVI)
 ])
 dnl
-dnl Is texi2pdf installed?
+dnl Check for texi2pdf.
 dnl
-dnl OCTAVE_PROG_TEXI2PDF
 AC_DEFUN([OCTAVE_PROG_TEXI2PDF], [
   AC_REQUIRE([OCTAVE_PROG_TEXI2DVI])
   AC_CHECK_PROG(TEXI2PDF, texi2pdf, texi2pdf, [])
   if test -z "$TEXI2PDF"; then
     missing=true;
     if test -n "$TEXI2DVI"; then
       TEXI2PDF="$TEXI2DVI --pdf"
       missing=false;
@@ -737,20 +722,19 @@ AC_DEFUN([OCTAVE_PROG_TEXI2PDF], [
 I didn't find texi2pdf, but it's only a problem if you need to
 reconstruct the PDF version of the manual
 "
     OCTAVE_CONFIGURE_WARNING([warn_texi2pdf])
   fi
   AC_SUBST(TEXI2PDF)
 ])
 dnl
-dnl See if the C++ library is ISO compliant.
+dnl Check if the C++ library is ISO compliant.
 dnl FIXME: This is obviously very simplistic, and trivially fooled.
 dnl
-dnl OCTAVE_CXX_ISO_COMPLIANT_LIBRARY
 AC_DEFUN([OCTAVE_CXX_ISO_COMPLIANT_LIBRARY], [
   AC_REQUIRE([AC_PROG_CXX])
   AC_MSG_CHECKING([if C++ library is ISO compliant])
   AC_CACHE_VAL(octave_cv_cxx_iso_compliant_library, [
     AC_LANG_PUSH(C++)
     rm -f conftest.h
 ### Omitting cwctype for now, since it is broken with gcc-3.0.x and
 ### possibly other versions...
@@ -801,19 +785,17 @@ AC_DEFUN([OCTAVE_ENABLE_READLINE], [
       AC_MSG_WARN([I need GNU Readline 4.2 or later])
       AC_MSG_ERROR([this is fatal unless you specify --disable-readline])
     ])
     LIBS="$save_LIBS"
   fi
   AC_SUBST(READLINE_LIBS)
 ])
 dnl
-dnl Check to see if C++ reintrepret cast works for function pointers.
-dnl
-dnl OCTAVE_CXX_BROKEN_REINTERPRET_CAST
+dnl Check if C++ reinterpret cast works for function pointers.
 dnl
 AC_DEFUN([OCTAVE_CXX_BROKEN_REINTERPRET_CAST], [
   AC_REQUIRE([AC_PROG_CXX])
   AC_LANG_PUSH(C++)
   AC_CACHE_CHECK([for broken C++ reinterpret_cast],
     octave_cv_cxx_broken_reinterpret_cast, [
     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <cmath>]], [[
       typedef double (*fptr) (double);
@@ -822,26 +804,26 @@ AC_DEFUN([OCTAVE_CXX_BROKEN_REINTERPRET_
       psin = reinterpret_cast<fptr> (vptr);]])],
       octave_cv_cxx_broken_reinterpret_cast=no,
       octave_cv_cxx_broken_reinterpret_cast=yes)])
   if test $octave_cv_cxx_broken_reinterpret_cast = yes ; then
     AC_DEFINE(CXX_BROKEN_REINTERPRET_CAST, 1, [Define to 1 if C++ reinterpret_cast fails for function pointers.])
 fi
   AC_LANG_POP(C++)])
 dnl
-dnl Find find.
+dnl Find find program.
 dnl
 # Prefer GNU find if found.
 AN_MAKEVAR([FIND],  [OCTAVE_PROG_FIND])
 AN_PROGRAM([gfind], [OCTAVE_PROG_FIND])
 AN_PROGRAM([find],  [OCTAVE_PROG_FIND])
 AC_DEFUN([OCTAVE_PROG_FIND],
 [AC_CHECK_PROGS(FIND, gfind find, )])
 dnl
-dnl Find sed.
+dnl Find sed program.
 dnl
 # Check for a fully-functional sed program, that truncates
 # as few characters as possible and that supports "\(X\|Y\)"
 # style regular expression alternation.  Prefer GNU sed if found.
 AC_DEFUN([OCTAVE_PROG_SED],
 [AC_MSG_CHECKING([for a usable sed])
 if test -z "$SED"; then
   AC_CACHE_VAL(ac_cv_path_sed, [
@@ -897,35 +879,32 @@ if test -z "$SED"; then
   if test -z "$SED"; then
     AC_MSG_ERROR([no usable version of sed found])
   fi
 fi
 AC_SUBST(SED)
 AC_MSG_RESULT([$SED])
 ])
 dnl
-dnl Find Perl.
+dnl Find Perl program.
 dnl
-dnl OCTAVE_PROG_PERL
 AC_DEFUN([OCTAVE_PROG_PERL],
 [AC_CHECK_PROG(PERL, perl, perl, [])
   AC_SUBST(PERL)
 ])
 dnl
-dnl Find Python.
+dnl Find Python program.
 dnl
-dnl OCTAVE_PROG_PYTHON
 AC_DEFUN([OCTAVE_PROG_PYTHON],
 [AC_CHECK_PROG(PYTHON, python, python, [])
   AC_SUBST(PYTHON)
 ])
 dnl
-dnl Find desktop-file-install.
+dnl Find desktop-file-install program.
 dnl
-dnl OCTAVE_PROG_DESKTOP_FILE_INSTALL
 AC_DEFUN([OCTAVE_PROG_DESKTOP_FILE_INSTALL],
 [AC_CHECK_PROG(DESKTOP_FILE_INSTALL, desktop-file-install, desktop-file-install, [])
   AC_SUBST(DESKTOP_FILE_INSTALL)
 ])
 dnl
 dnl Check for IEEE 754 data format.
 dnl
 AC_DEFUN([OCTAVE_IEEE754_DATA_FORMAT],
@@ -957,17 +936,17 @@ else
   ## useful system, so we will abort here.  Anyone wishing to
   ## experiment with building Octave on a system without IEEE
   ## floating point should be capable of removing this check and
   ## the one in the octave_ieee_init function in liboctave/lo-ieee.cc.
   AC_MSG_ERROR([IEEE 754 data format required for building Octave])
 fi
 ])
 dnl
-dnl Check for UMFPACK seperately split complex matrix and RHS. Note
+dnl Check for UMFPACK separately split complex matrix and RHS.  Note
 dnl that as umfpack.h can be in three different places, rather than
 dnl include it, just declare the functions needed.
 dnl
 dnl Assumes that the check for umfpack has already been performed.
 dnl
 AC_DEFUN([OCTAVE_UMFPACK_SEPERATE_SPLIT],
 [AC_MSG_CHECKING([for UMFPACK seperate complex matrix and rhs split])
 AC_CACHE_VAL(octave_cv_umfpack_seperate_split,
@@ -1013,19 +992,19 @@ if test "$cross_compiling" = yes; then
 else
   AC_MSG_RESULT([$octave_cv_umfpack_seperate_split])
 fi
 if test "$octave_cv_umfpack_seperate_split" = yes; then
   AC_DEFINE(UMFPACK_SEPARATE_SPLIT, 1, [Define to 1 if the UMFPACK Complex solver allow matrix and RHS to be split independently.])
 fi
 ])
 dnl
-dnl Check whether using HDF5 DLL under Windows. This is done by
+dnl Check whether using HDF5 DLL under Windows.  This is done by
 dnl testing for a data symbol in the HDF5 library, which would
-dnl requires the definition of _HDF5USEDL_ under MSVC compiler.
+dnl require the definition of _HDF5USEDL_ under MSVC compiler.
 dnl
 AC_DEFUN([OCTAVE_HDF5_DLL], [
   AC_CACHE_CHECK([if _HDF5USEDLL_ needs to be defined],octave_cv_hdf5_dll, [
     AC_TRY_LINK([#include <hdf5.h>], [hid_t x = H5T_NATIVE_DOUBLE; return x],
       octave_cv_hdf5_dll=no, [
       save_CFLAGS="$CFLAGS"
       CFLAGS="$CFLAGS -DWIN32 -D_HDF5USEDLL_"
       save_LIBS="$LIBS"
@@ -1093,17 +1072,17 @@ AC_DEFUN([OCTAVE_CHECK_QHULL_VERSION],
 const char *tmp = qh_version;
 ]])], [octave_cv_lib_qhull_version=yes], [octave_cv_lib_qhull_version=no])])
   if test "$octave_cv_lib_qhull_version" = no; then
     AC_DEFINE(NEED_QHULL_VERSION, 1,
       [Define to 1 if the Qhull library needs a qh_version variable defined.])
   fi
 ])
 dnl
-dnl Check whether Qhull works (does not crash)
+dnl Check whether Qhull works (does not crash).
 dnl
 AC_DEFUN([OCTAVE_CHECK_QHULL_OK],
   [AC_CACHE_CHECK([whether the qhull library works],
     octave_cv_lib_qhull_ok, [
       AC_RUN_IFELSE([AC_LANG_PROGRAM([[
 #include <stdio.h>
 #if defined (HAVE_LIBQHULL_LIBQHULL_H)
 # include <libqhull/libqhull.h>
@@ -1147,21 +1126,21 @@ return qh_new_qhull (dim, n, points, ism
   [octave_cv_lib_qhull_ok=yes])])
   if test "$octave_cv_lib_qhull_ok" = "yes"; then
     $1
   else
     $2
   fi
 ])
 dnl
-dnl Check whether ARPACK works (does not crash)
+dnl Check whether ARPACK works (does not crash).
 dnl
 dnl Using a pure Fortran program doesn't seem to crash when linked
-dnl with the buggy ARPACK library but the C++ program does.  Maybe
-dnl it is the memory allocation that exposes the bug and using statically
+dnl with the buggy ARPACK library but the C++ program does.  Maybe it
+dnl is the memory allocation that exposes the bug and using statically
 dnl allocated arrays in Fortran does not?
 dnl
 AC_DEFUN([OCTAVE_CHECK_ARPACK_OK], [
   AC_LANG_PUSH(C++)
   AC_CACHE_CHECK([whether the arpack library works],
     [octave_cv_lib_arpack_ok], [
       AC_RUN_IFELSE([AC_LANG_PROGRAM([[
 // External functions from ARPACK library
@@ -1297,17 +1276,17 @@ doit (void)
   AC_LANG_POP(C++)
   if test "$octave_cv_lib_arpack_ok" = "yes"; then
     $1
   else
     $2
   fi
 ])
 dnl
-dnl Check for OpenGL.  If found, define OPENGL_LIBS
+dnl Check for OpenGL.  If found, define OPENGL_LIBS.
 dnl
 dnl FIXME: The following tests should probably check for the
 dnl libraries separately.
 dnl
 dnl FIXME: Should we allow a way to specify a directory for OpenGL
 dnl libraries and header files?
 dnl
 AC_DEFUN([OCTAVE_OPENGL], [
@@ -1372,19 +1351,18 @@ else
         AC_CHECK_LIB(GL, glEnable, OPENGL_LIBS="-lGL -lGLU")
         ;;
     esac
   fi
 fi
 AC_SUBST(OPENGL_LIBS)
 ])
 dnl
-dnl See if function gluTessCallback is called with "(...)"
+dnl Check if function gluTessCallback is called with "(...)".
 dnl
-dnl OCTAVE_GLUTESSCALLBACK_THREEDOTS
 AC_DEFUN([OCTAVE_GLUTESSCALLBACK_THREEDOTS],
 [AC_CACHE_CHECK([whether gluTessCallback is called with "(...)"],
 octave_cv_glutesscallback_threedots,
 [AC_LANG_PUSH(C++)
 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
 #ifdef HAVE_GL_GLU_H
 #include <GL/glu.h>
 #elif defined HAVE_OPENGL_GLU_H || defined HAVE_FRAMEWORK_OPENGL
@@ -1394,19 +1372,19 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
 octave_cv_glutesscallback_threedots="yes", octave_cv_glutesscallback_threedots="no")])
 AC_LANG_POP(C++)
 if test $octave_cv_glutesscallback_threedots = "yes"; then
   AC_DEFINE(HAVE_GLUTESSCALLBACK_THREEDOTS, 1, 
     [Define to 1 if gluTessCallback is called with (...).])
 fi
 ])
 dnl
-dnl Check for support of OpenMP with a given compiler flag. If
-dnl found define HAVE_OPENMP and add the compile flag to CFLAGS
-dnl and CXXFLAGS.
+dnl Check for support of OpenMP with a given compiler flag.
+dnl If found define HAVE_OPENMP and add the compile flag
+dnl to CFLAGS and CXXFLAGS.
 dnl
 AC_DEFUN([OCTAVE_CHECK_OPENMP],
 [AC_MSG_CHECKING([for support of OpenMP])
 XCFLAGS="$CFLAGS"
 CFLAGS="$CFLAGS $1"
 AC_CACHE_VAL(octave_cv_check_openmp,[
 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
 #include <omp.h>
@@ -1617,21 +1595,23 @@ appropiate for your system) is correctly
      FT2_LIBS=""
      m4_if([$3], [], [:], [$3])
    fi
 
    AC_SUBST([FT2_CFLAGS])
    AC_SUBST([FT2_LIBS])])
 dnl end of freetype2.m4
 
+dnl
 dnl Check whether a math mapper function is available in <cmath>.
 dnl Will define HAVE_CMATH_FUNC if there is a double variant and
 dnl HAVE_CMATH_FUNCF if there is a float variant.
 dnl Currently capable of checking for functions with single 
 dnl argument and returning bool/int/real.
+dnl
 AC_DEFUN([OCTAVE_CMATH_FUNC],[
 AC_MSG_CHECKING([for std::$1 in <cmath>])
 AC_LANG_PUSH(C++)
 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
 #include <cmath>
 void take_func (bool (*func) (double x));
 void take_func (int (*func) (double x));
 void take_func (double (*func) (double x));
@@ -1653,28 +1633,29 @@ void take_func (float (*func) (float x))
 take_func(std::$1);
 ]])],
 [AC_MSG_RESULT([yes])
  AC_DEFINE(HAVE_CMATH_[]AS_TR_CPP($1)F,1,[Define to 1 if <cmath> provides float variant of $1.])],
 [AC_MSG_RESULT([no])])
 AC_LANG_POP(C++)
 ])
 
+dnl
 dnl Check whether fast signed integer arithmetics using bit tricks
 dnl can be used in oct-inttypes.h.  Defines HAVE_FAST_INT_OPS if
 dnl the following conditions hold:
 dnl 1. Signed numbers are represented by twos complement
 dnl    (see <http://en.wikipedia.org/wiki/Two%27s_complement>)
 dnl 2. static_cast to unsigned int counterpart works like interpreting
 dnl    the signed bit pattern as unsigned (and is thus zero-cost).
 dnl 3. Signed addition and subtraction yield the same bit results as unsigned.
 dnl    (We use casts to prevent optimization interference, so there is no
 dnl     need for things like -ftrapv).
 dnl 4. Bit operations on signed integers work like on unsigned integers,
-dnl    except for the shifts. Shifts are arithmetic.
+dnl    except for the shifts.  Shifts are arithmetic.
 dnl
 AC_DEFUN([OCTAVE_FAST_INT_OPS],
 [AC_CACHE_CHECK([whether fast integer arithmetics is usable],
 octave_cv_fast_int_ops,
 [AC_LANG_PUSH(C++)
 AC_RUN_IFELSE([AC_LANG_PROGRAM([[
 #include <limits>
 template<class UT, class ST>
@@ -1730,17 +1711,16 @@ fi
 dnl
 dnl Check to see if the compiler and the linker can handle the flags
 dnl "-framework $1" for the given prologue $2 and the given body $3 of
 dnl a source file.  Arguments 2 and 3 optionally can also be empty.
 dnl Add options (lower case letters $1) "--with-framework-$1" and
 dnl "--without-framework-$1".  If this test is successful then perform
 dnl $4, otherwise do $5.
 dnl
-dnl OCTAVE_HAVE_FRAMEWORK
 AC_DEFUN([OCTAVE_HAVE_FRAMEWORK], [
   AC_MSG_CHECKING([whether ${LD-ld} accepts -framework $1])
   AC_CACHE_VAL(octave_cv_framework_$1, [
     XLDFLAGS="$LDFLAGS"
     LDFLAGS="$LDFLAGS -framework $1"
     AC_LANG_PUSH(C++)
     AC_LINK_IFELSE([AC_LANG_PROGRAM([$2], [$3])],
       eval "octave_cv_framework_$1=yes",
@@ -1923,15 +1903,15 @@ else
 	$1[]_CFLAGS=$pkg_cv_[]$1[]_CFLAGS
 	$1[]_LIBS=$pkg_cv_[]$1[]_LIBS
         AC_MSG_RESULT([yes])
 	ifelse([$3], , :, [$3])
 fi[]dnl
 ])# PKG_CHECK_MODULES
 
 dnl
-dnl External macros.
+dnl Include external macros.
 dnl
 
 m4_include([m4/ax_pthread.m4])
 m4_include([m4/ax_blas.m4])
 m4_include([m4/ax_blas_f77_func.m4])
 m4_include([m4/ax_lapack.m4])
