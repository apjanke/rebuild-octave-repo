# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1535429399 14400
#      Tue Aug 28 00:09:59 2018 -0400
# Node ID 8b548f2f808617252ea68343c4b2e1ae30c2d6e8
# Parent  d9d192928b45b38321e8d6602289b045d8917c68
maint: Strip trailing whitespace from source files.

diff --git a/build-aux/inplace_edit.pl b/build-aux/inplace_edit.pl
--- a/build-aux/inplace_edit.pl
+++ b/build-aux/inplace_edit.pl
@@ -11,23 +11,23 @@
 
 ## Create Perl code from first argument (-e CODE)
 eval "sub per_line_code { $ARGV[0]; }";
 shift @ARGV;
 
 ## Loop over each file
 foreach $fname (@ARGV)
 {
-  rename ($fname, "$fname.$$") or die "Rename failed:$fname:$!"; 
-  open (my $FHI, "<", "$fname.$$") or die "Open failed:$fname.$$:$!";  
-  open (my $FHO, ">", "$fname") or die "Open failed:$fname:$!";  
+  rename ($fname, "$fname.$$") or die "Rename failed:$fname:$!";
+  open (my $FHI, "<", "$fname.$$") or die "Open failed:$fname.$$:$!";
+  open (my $FHO, ">", "$fname") or die "Open failed:$fname:$!";
 
   ## Loop over each line
   while (<$FHI>)
   {
     per_line_code ();
-    print $FHO $_;      
+    print $FHO $_;
   }
 
   close ($FHI);
   close ($FHO);
   unlink "$fname.$$" or die "Delete failed:$fname.$$:$!";
 }
diff --git a/doc/interpreter/container.txi b/doc/interpreter/container.txi
--- a/doc/interpreter/container.txi
+++ b/doc/interpreter/container.txi
@@ -62,16 +62,17 @@ expressions
 @example
 @group
 x.a = 1;
 x.b = [1, 2; 3, 4];
 x.c = "string";
 @end group
 @end example
 
+@c The following line should have a trailing space.
 @opindex . @ @ @ 
 @noindent
 create a structure with three elements.  The @samp{.} character separates
 the structure name from the field name and indicates to Octave that this
 variable is a structure.  To print the value of the
 structure you can type its name, just as for any other variable:
 
 @example
diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -522,17 +522,17 @@ The @qcode{"warn"} field is set similarl
 }
 
 /*
 %!test
 %! if (isguirunning ())
 %!   orig_show_dbg = __octave_link_gui_preference__ ("editor/show_dbg_file",
 %!                                                   "0");
 %! endif
-%! unwind_protect 
+%! unwind_protect
 %!   dbclear all;   # Clear out breakpoints before test
 %!   dbstop @ftp/dir;
 %!   dbstop @audioplayer/set 70;
 %!   dbstop quantile>__quantile__;
 %!   dbstop ls;
 %!   s = dbstatus;
 %!   dbclear all;
 %!   assert (s(1).name, "@audioplayer/set>setproperty");
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -1112,17 +1112,17 @@ namespace octave
 #if defined (HAVE_OPENGL)
 
     // setup OpenGL transformation
 
     Matrix x_zlim = props.get_transform_zlim ();
 
     xZ1 = std::max (-1e6, x_zlim(0)-(x_zlim(1)-x_zlim(0))*100.0);
     xZ2 = std::min (1e6, x_zlim(1)+(x_zlim(1)-x_zlim(0))*100.0);
-    
+
     Matrix x_mat1 = props.get_opengl_matrix_1 ();
     Matrix x_mat2 = props.get_opengl_matrix_2 ();
 
 #if defined (HAVE_FRAMEWORK_OPENGL)
     GLint vw[4];
 #else
     int vw[4];
 #endif
diff --git a/libinterp/corefcn/ls-hdf5.cc b/libinterp/corefcn/ls-hdf5.cc
--- a/libinterp/corefcn/ls-hdf5.cc
+++ b/libinterp/corefcn/ls-hdf5.cc
@@ -216,17 +216,17 @@ hdf5_fstreambase::open_create (const cha
         }
 #  else
         file_id = H5Fcreate (name, H5F_ACC_TRUNC, octave_H5P_DEFAULT,
                              octave_H5P_DEFAULT);
 #  endif
     }
   if (file_id < 0)
     std::ios::setstate (std::ios::badbit);
-  
+
   return;
 
 #else
   // This shouldn't happen because construction of hdf5_fstreambase
   // objects is supposed to be impossible if HDF5 is not available.
 
   panic_impossible ();
 #endif
diff --git a/libinterp/corefcn/rand.cc b/libinterp/corefcn/rand.cc
--- a/libinterp/corefcn/rand.cc
+++ b/libinterp/corefcn/rand.cc
@@ -262,17 +262,17 @@ do_rand (const octave_value_list& args, 
               {
                 if (args(idx+1).is_string ()
                     && args(idx+1).string_value () == "reset")
                   octave::rand::reset (fcn);
                 else
                   {
                     ColumnVector s =
                       ColumnVector (args(idx+1).vector_value (false, true));
-                   
+
                     // Backwards compatibility with previous versions of
                     // Octave which mapped Inf to 0.
                     for (octave_idx_type i = 0; i < s.numel (); i++)
                       if (octave::math::isinf (s.xelem (i)))
                         s.xelem (i) = 0.0;
 
                     octave::rand::state (s, fcn);
                   }
diff --git a/libinterp/parse-tree/pt-anon-scopes.h b/libinterp/parse-tree/pt-anon-scopes.h
--- a/libinterp/parse-tree/pt-anon-scopes.h
+++ b/libinterp/parse-tree/pt-anon-scopes.h
@@ -35,17 +35,17 @@ namespace octave
   class
   tree_anon_scopes : public tree_walker
   {
   public:
 
     tree_anon_scopes (void) : scopes (), merged_tables () { }
 
     tree_anon_scopes (octave_user_function *);
-  
+
     tree_anon_scopes& operator = (tree_anon_scopes&& tas)
     {
       scopes = std::move (tas.scopes);
       merged_tables = std::move (tas.merged_tables);
       return *this;
     }
 
     typedef std::map<std::string, symbol_record> symrec_map;
diff --git a/libinterp/parse-tree/pt-pr-code.cc b/libinterp/parse-tree/pt-pr-code.cc
--- a/libinterp/parse-tree/pt-pr-code.cc
+++ b/libinterp/parse-tree/pt-pr-code.cc
@@ -755,17 +755,17 @@ namespace octave
         if (elt)
           {
             elt->accept (*this);
 
             if (p != lst.end () || lst.takes_varargs ())
               m_os << ", ";
           }
       }
- 
+
     if (lst.takes_varargs ())
       m_os << "varargin";
   }
 
   void
   tree_print_code::visit_postfix_expression (tree_postfix_expression& expr)
   {
     indent ();
diff --git a/liboctave/numeric/eigs-base.cc b/liboctave/numeric/eigs-base.cc
--- a/liboctave/numeric/eigs-base.cc
+++ b/liboctave/numeric/eigs-base.cc
@@ -53,17 +53,17 @@ warn_convergence (void)
 {
   (*current_liboctave_warning_with_id_handler)
     ("Octave:convergence",
      "eigs: 'A - sigma*B' is singular, indicating sigma is exactly "
      "an eigenvalue so convergence is not guaranteed");
 }
 
 // Conversion from error number to strings
-std::string 
+std::string
 arpack_errno2str (const octave_idx_type& errnum, const std::string& fcn_name)
 {
   std::string msg;
   std::string bug_msg = "\nThis should not happen.  Please, see https://www.gnu.org/software/octave/bugs.html, and file a bug report";
 
   switch (errnum)
     {
     case -1:
@@ -120,95 +120,95 @@ arpack_errno2str (const octave_idx_type&
 
       break;
 
     case -11:
       msg = "IPARAM(7) = 1 and BMAT = 'G' are incompatible";
       break;
 
     case -12:
-      if (fcn_name.compare ("dnaupd") == 0 || 
+      if (fcn_name.compare ("dnaupd") == 0 ||
           fcn_name.compare ("znaupd") == 0 ||
           fcn_name.compare ("dsaupd") == 0)
         msg = std::string ("IPARAM(1) must be equal to 0 or 1");
       else if (fcn_name.compare ("dneupd") == 0 ||
                fcn_name.compare ("zneupd") == 0)
         msg = "HOWMNY = 'S' not yet implemented";
       else
         msg = "NEV and WHICH = 'BE' are incompatible";
-      
+
       break;
 
     case -13:
-      if (fcn_name.compare ("dneupd") == 0 || 
+      if (fcn_name.compare ("dneupd") == 0 ||
           fcn_name.compare ("zneupd") == 0)
         msg = "HOWMNY must be one of 'A' or 'P' if RVEC = .true.";
       else if (fcn_name.compare ("dsaupd") == 0)
         msg = "NEV and WHICH = 'BE' are incompatible";
-      
+
       break;
 
     case -14:
       if (fcn_name.compare ("dneupd") == 0)
         msg = "DNAUPD did not find any eigenvalues to sufficient accuracy.";
       else if (fcn_name.compare ("zneupd") == 0)
         msg = "ZNAUPD did not find any eigenvalues to sufficient accuracy.";
       else if (fcn_name.compare ("dseupd") == 0)
         msg = "DSAUPD did not find any eigenvalues to sufficient accuracy.";
-      
+
       break;
 
     case -15:
       if (fcn_name.compare ("dseupd") == 0)
         msg = "HOWMNY must be one of 'A' or 'S' if RVEC = .true.";
-      
+
       break;
 
     case -16:
       if (fcn_name.compare ("dseupd") == 0)
         msg = "HOWMNY = 'S' not yet implemented";
-      
+
       break;
 
     case -9999:
       if (fcn_name.compare ("dnaupd") == 0)
         msg = "Could not build an Arnoldi factorization.  IPARAM(5) returns the size of the current Arnoldi factorization";
-      
+
       break;
 
     case 1:
       if (fcn_name.compare ("dneupd") == 0)
         msg = "The Schur form computed by LAPACK routine dlahqr could not be reordered by LAPACK routine dtrsen.  Re-enter subroutine DNEUPD with IPARAM(5)=NCV and increase the size of the arrays DR and DI to have dimension at least dimension NCV and allocate at least NCV columns for Z.  NOTE: Not necessary if Z and V share the same space.  Please notify the authors if this error occurs.";
-      else if (fcn_name.compare ("dnaupd") == 0 || 
+      else if (fcn_name.compare ("dnaupd") == 0 ||
                fcn_name.compare ("znaupd") == 0 ||
                fcn_name.compare ("dsaupd") == 0)
         msg = "Maximum number of iterations taken.  All possible eigenvalues of OP has been found.  IPARAM(5) returns the number of wanted converged Ritz values";
       else if (fcn_name.compare ("znaupd") == 0)
         msg = "The Schur form computed by LAPACK routine csheqr could not be reordered by LAPACK routine ztrsen.  Re-enter subroutine ZNEUPD with IPARAM(5)=NCV and increase the size of the array D to have dimension at least dimension NCV and allocate at least NCV columns for Z.  NOTE: Not necessary if Z and V share the same space.  Please notify the authors if this error occurs.";
-      
+
       break;
 
     case 2:
-      if (fcn_name.compare ("dnaupd") == 0 || 
+      if (fcn_name.compare ("dnaupd") == 0 ||
           fcn_name.compare ("znaupd") == 0 ||
           fcn_name.compare ("dsaupd") == 0)
         msg = "No longer an informational error.  Deprecated starting with release 2 of ARPACK.";
-      
+
       break;
 
     case 3:
-      if (fcn_name.compare ("dnaupd") == 0 || 
+      if (fcn_name.compare ("dnaupd") == 0 ||
           fcn_name.compare ("znaupd") == 0 ||
           fcn_name.compare ("dsaupd") == 0)
         msg = "No shifts could be applied during a cycle of the implicitly restarted Arnoldi iteration.  One possibility is to increase the size of NCV relative to NEV.";
-      
+
       break;
 
     }
-  
+
   if ((errno != -9) & (errno != -14) & (errno != -9999))
     // This is a bug in Octave interface to ARPACK
     msg.append (bug_msg);
 
   return msg;
 }
 
 template <typename M, typename SM>
@@ -975,17 +975,17 @@ EigsRealSymmetricMatrix (const M& m, con
           else if (! vector_product (m, workd + iptr(0) - 1,
                                      workd + iptr(1) - 1))
             break;
         }
       else
         {
           if (info < 0)
             (*current_liboctave_error_handler)
-              ("eigs: error in dsaupd: %s", 
+              ("eigs: error in dsaupd: %s",
                arpack_errno2str (info, "dsaupd").c_str ());
 
           break;
         }
     }
   while (1);
 
   F77_INT info2;
@@ -1060,19 +1060,19 @@ EigsRealSymmetricMatrix (const M& m, con
             }
 
           if (note3)
             eig_vec = utsolve (bt, permB, eig_vec);
         }
     }
   else
     (*current_liboctave_error_handler)
-      ("eigs: error in dseupd: %s", 
+      ("eigs: error in dseupd: %s",
        arpack_errno2str (info2, "dseupd").c_str ());
-      
+
   return ip(4);
 }
 
 template <typename M>
 octave_idx_type
 EigsRealSymmetricMatrixShift (const M& m, double sigma,
                               octave_idx_type k_arg, octave_idx_type p_arg,
                               octave_idx_type& info, Matrix& eig_vec,
@@ -1287,17 +1287,17 @@ EigsRealSymmetricMatrixShift (const M& m
               for (F77_INT i = 0; i < n; i++)
                 ip2[Q[i]] = tmp(i,0);
             }
         }
       else
         {
           if (info < 0)
             (*current_liboctave_error_handler)
-              ("eigs: error in dsaupd: %s", 
+              ("eigs: error in dsaupd: %s",
                arpack_errno2str (info, "dsaupd").c_str ());
 
           break;
         }
     }
   while (1);
 
   F77_INT info2;
@@ -1363,17 +1363,17 @@ EigsRealSymmetricMatrixShift (const M& m
 
               for (F77_INT j = 0; j < n; j++)
                 z[off2 + j] = dtmp[j];
             }
         }
     }
   else
     (*current_liboctave_error_handler)
-      ("eigs: error in dseupd: %s", 
+      ("eigs: error in dseupd: %s",
        arpack_errno2str (info2, "dseupd").c_str ());
 
   return ip(4);
 }
 
 template <typename M>
 octave_idx_type
 EigsRealSymmetricFunc (EigsFunc fun, octave_idx_type n_arg,
@@ -1660,17 +1660,17 @@ EigsRealSymmetricFunc (EigsFunc fun, oct
               for (F77_INT i = 0; i < n; i++)
                 *ip2++ = y(i);
             }
         }
       else
         {
           if (info < 0)
             (*current_liboctave_error_handler)
-              ("eigs: error in dsaupd: %s", 
+              ("eigs: error in dsaupd: %s",
                arpack_errno2str (info, "dsaupd").c_str ());
 
           break;
         }
     }
   while (1);
 
   F77_INT info2;
@@ -1744,17 +1744,17 @@ EigsRealSymmetricFunc (EigsFunc fun, oct
                 }
             }
           if (note3)
             eig_vec = utsolve (bt, permB, eig_vec);
          }
     }
   else
     (*current_liboctave_error_handler)
-      ("eigs: error in dseupd: %s", 
+      ("eigs: error in dseupd: %s",
        arpack_errno2str (info2, "dseupd").c_str ());
 
   return ip(4);
 }
 
 template <typename M>
 octave_idx_type
 EigsRealNonSymmetricMatrix (const M& m, const std::string typ,
@@ -1956,17 +1956,17 @@ EigsRealNonSymmetricMatrix (const M& m, 
           else if (! vector_product (m, workd + iptr(0) - 1,
                                      workd + iptr(1) - 1))
             break;
         }
       else
         {
           if (info < 0)
             (*current_liboctave_error_handler)
-              ("eigs: error in dnaupd: %s", 
+              ("eigs: error in dnaupd: %s",
                arpack_errno2str (info, "dnaupd").c_str ());
 
           break;
         }
     }
   while (1);
 
   F77_INT info2;
@@ -2098,17 +2098,17 @@ EigsRealNonSymmetricMatrix (const M& m, 
       if (k0 < k)
         {
           eig_val.resize (k0);
           eig_vec.resize (n, k0);
         }
     }
   else
     (*current_liboctave_error_handler)
-      ("eigs: error in dneupd: %s", 
+      ("eigs: error in dneupd: %s",
        arpack_errno2str (info2, "dneupd").c_str ());
 
   return ip(4);
 }
 
 template <typename M>
 octave_idx_type
 EigsRealNonSymmetricMatrixShift (const M& m, double sigmar,
@@ -2332,17 +2332,17 @@ EigsRealNonSymmetricMatrixShift (const M
               for (F77_INT i = 0; i < n; i++)
                 ip2[Q[i]] = tmp(i,0);
             }
         }
       else
         {
           if (info < 0)
             (*current_liboctave_error_handler)
-              ("eigs: error in dnaupd: %s", 
+              ("eigs: error in dnaupd: %s",
                arpack_errno2str (info, "dnaupd").c_str ());
 
           break;
         }
     }
   while (1);
 
   F77_INT info2;
@@ -2473,17 +2473,17 @@ EigsRealNonSymmetricMatrixShift (const M
       if (k0 < k)
         {
           eig_val.resize (k0);
           eig_vec.resize (n, k0);
         }
     }
   else
     (*current_liboctave_error_handler)
-      ("eigs: error in dneupd: %s", 
+      ("eigs: error in dneupd: %s",
        arpack_errno2str (info2, "dneupd").c_str ());
 
   return ip(4);
 }
 
 template <typename M>
 octave_idx_type
 EigsRealNonSymmetricFunc (EigsFunc fun, octave_idx_type n_arg,
@@ -2775,17 +2775,17 @@ EigsRealNonSymmetricFunc (EigsFunc fun, 
               for (F77_INT i = 0; i < n; i++)
                 *ip2++ = y(i);
             }
         }
       else
         {
           if (info < 0)
             (*current_liboctave_error_handler)
-              ("eigs: error in dnaupd: %s", 
+              ("eigs: error in dnaupd: %s",
                arpack_errno2str (info, "dnaupd").c_str ());
 
           break;
         }
     }
   while (1);
 
   F77_INT info2;
@@ -2918,17 +2918,17 @@ EigsRealNonSymmetricFunc (EigsFunc fun, 
       if (k0 < k)
         {
           eig_val.resize (k0);
           eig_vec.resize (n, k0);
         }
     }
   else
     (*current_liboctave_error_handler)
-      ("eigs: error in dneupd: %s", 
+      ("eigs: error in dneupd: %s",
        arpack_errno2str (info2, "dneupd").c_str ());
 
   return ip(4);
 }
 
 template <typename M>
 octave_idx_type
 EigsComplexNonSymmetricMatrix (const M& m, const std::string typ,
@@ -3131,17 +3131,17 @@ EigsComplexNonSymmetricMatrix (const M& 
           else if (! vector_product (m, workd + iptr(0) - 1,
                                      workd + iptr(1) - 1))
             break;
         }
       else
         {
           if (info < 0)
             (*current_liboctave_error_handler)
-              ("eigs: error in znaupd: %s", 
+              ("eigs: error in znaupd: %s",
                arpack_errno2str (info, "znaupd").c_str ());
 
           break;
         }
     }
   while (1);
 
   F77_INT info2;
@@ -3221,17 +3221,17 @@ EigsComplexNonSymmetricMatrix (const M& 
             }
 
           if (note3)
             eig_vec = utsolve (bt, permB, eig_vec);
         }
     }
   else
     (*current_liboctave_error_handler)
-      ("eigs: error in zneupd: %s", 
+      ("eigs: error in zneupd: %s",
        arpack_errno2str (info2, "zneupd").c_str ());
 
   return ip(4);
 }
 
 template <typename M>
 octave_idx_type
 EigsComplexNonSymmetricMatrixShift (const M& m, Complex sigma,
@@ -3457,17 +3457,17 @@ EigsComplexNonSymmetricMatrixShift (cons
               for (F77_INT i = 0; i < n; i++)
                 ip2[Q[i]] = tmp(i,0);
             }
         }
       else
         {
           if (info < 0)
             (*current_liboctave_error_handler)
-              ("eigs: error in znaupd: %s", 
+              ("eigs: error in znaupd: %s",
                arpack_errno2str (info, "znaupd").c_str ());
 
           break;
         }
     }
   while (1);
 
   F77_INT info2;
@@ -3544,17 +3544,17 @@ EigsComplexNonSymmetricMatrixShift (cons
 
               for (F77_INT j = 0; j < n; j++)
                 z[off2 + j] = ctmp[j];
             }
         }
     }
   else
     (*current_liboctave_error_handler)
-      ("eigs: error in zneupd: %s", 
+      ("eigs: error in zneupd: %s",
        arpack_errno2str (info2, "zneupd").c_str ());
 
   return ip(4);
 }
 
 template <typename M>
 octave_idx_type
 EigsComplexNonSymmetricFunc (EigsComplexFunc fun, octave_idx_type n_arg,
@@ -3847,17 +3847,17 @@ EigsComplexNonSymmetricFunc (EigsComplex
               for (F77_INT i = 0; i < n; i++)
                 *ip2++ = y(i);
             }
         }
       else
         {
           if (info < 0)
             (*current_liboctave_error_handler)
-              ("eigs: error in znaupd: %s", 
+              ("eigs: error in znaupd: %s",
                arpack_errno2str (info, "znaupd").c_str ());
 
           break;
         }
     }
   while (1);
 
   F77_INT info2;
@@ -3936,17 +3936,17 @@ EigsComplexNonSymmetricFunc (EigsComplex
                 z[off2 + j] = ctmp[j];
             }
           if (note3)
             eig_vec = utsolve (bt, permB, eig_vec);
         }
     }
   else
     (*current_liboctave_error_handler)
-      ("eigs: error in zneupd: %s", 
+      ("eigs: error in zneupd: %s",
        arpack_errno2str (info2, "zneupd").c_str ());
 
   return ip(4);
 }
 
 // Instantiations for the types we need.
 
 // Matrix
diff --git a/liboctave/util/oct-string.cc b/liboctave/util/oct-string.cc
--- a/liboctave/util/oct-string.cc
+++ b/liboctave/util/oct-string.cc
@@ -144,60 +144,60 @@ octave::string::strcmpi (const T& str_a,
 template<typename T>
 bool
 octave::string::strncmp (const T& str_a, const T& str_b,
                          const typename T::size_type n)
 {
   typename T::size_type neff;
   auto len_a = numel (str_a);
   auto len_b = numel (str_b);
-  neff = std::min (std::max (len_a, len_b), n); 
+  neff = std::min (std::max (len_a, len_b), n);
 
   return (len_a >= neff && len_b >= neff
           && str_data_cmp<T> (str_a.data (), str_b.data (), neff));
 }
 
 template<typename T>
 bool
 octave::string::strncmp (const T& str_a, const typename T::value_type *str_b,
                          const typename T::size_type n)
 {
   typename T::size_type neff;
   auto len_a = numel (str_a);
   auto len_b = strlen<T> (str_b);
-  neff = std::min (std::max (len_a, len_b), n); 
+  neff = std::min (std::max (len_a, len_b), n);
 
   return (len_a >= neff && len_b >= neff
           && str_data_cmp<T> (str_a.data (), str_b, neff));
 }
 
 
 template<typename T>
 bool
 octave::string::strncmpi (const T& str_a, const T& str_b,
                           const typename T::size_type n)
 {
   typename T::size_type neff;
   auto len_a = numel (str_a);
   auto len_b = numel (str_b);
-  neff = std::min (std::max (len_a, len_b), n); 
+  neff = std::min (std::max (len_a, len_b), n);
 
   return (len_a >= neff && len_b >= neff
           && str_data_cmpi<T> (str_a.data (), str_b.data (), neff));
 }
 
 template<typename T>
 bool
 octave::string::strncmpi (const T& str_a, const typename T::value_type *str_b,
                           const typename T::size_type n)
 {
   typename T::size_type neff;
   auto len_a = numel (str_a);
   auto len_b = strlen<T> (str_b);
-  neff = std::min (std::max (len_a, len_b), n); 
+  neff = std::min (std::max (len_a, len_b), n);
 
   return (len_a >= neff && len_b >= neff
           && str_data_cmpi<T> (str_a.data (), str_b, neff));
 }
 
 
 // Instantiations we need
 #define INSTANTIATE_OCTAVE_STRING(T)                                          \
diff --git a/scripts/legacy/isdir.m b/scripts/legacy/isdir.m
--- a/scripts/legacy/isdir.m
+++ b/scripts/legacy/isdir.m
@@ -22,17 +22,17 @@
 ## This function is not recommended.  Use @code{isfolder} or
 ## @code{file_in_loadpath} instead.
 ##
 ## Return true if @var{f} is a directory and false otherwise.
 ##
 ## Compatibility Note: The @sc{matlab} function of the same name will also
 ## search for @var{f} in the load path directories.  To emulate this behavior
 ## use
-## 
+##
 ## @example
 ## @var{tf} = ! isempty (file_in_loadpath (@var{f}))
 ## @end example
 ##
 ## @seealso{isfolder, file_in_loadpath, exist, stat, is_absolute_filename, is_rooted_relative_filename}
 ## @end deftypefn
 
 function retval = isdir (f)
diff --git a/scripts/miscellaneous/isfile.m b/scripts/miscellaneous/isfile.m
--- a/scripts/miscellaneous/isfile.m
+++ b/scripts/miscellaneous/isfile.m
@@ -60,14 +60,14 @@ endfunction
 %!   assert (! isfile (tmp));
 %!   save ("-text", tmp, "tmp");  # cheap way to create a file
 %!   assert (isfile (tmp));
 %!   addpath (d);
 %!   assert (! isfile (n));
 %! unwind_protect_cleanup
 %!   try, unlink (tmp); end_try_catch
 %!   try, rmpath (d); end_try_catch
-%! end_unwind_protect 
+%! end_unwind_protect
 
 ## Test input validation
 %!error isfile ()
 %!error isfile ("a", "b")
 %!error <F must be a string> isfile (1.0)
diff --git a/scripts/miscellaneous/isfolder.m b/scripts/miscellaneous/isfolder.m
--- a/scripts/miscellaneous/isfolder.m
+++ b/scripts/miscellaneous/isfolder.m
@@ -60,14 +60,14 @@ endfunction
 %!   mkdir (tmp);
 %!   assert (isfolder (tmp));
 %!   assert (! isfolder (n));
 %!   addpath (d);
 %!   assert (! isfolder (n));
 %! unwind_protect_cleanup
 %!   try, rmdir (tmp); end_try_catch
 %!   try, rmpath (d); end_try_catch
-%! end_unwind_protect 
+%! end_unwind_protect
 
 ## Test input validation
 %!error isfolder ()
 %!error isfolder ("a", "b")
 %!error <F must be a string> isfolder (1.0)
diff --git a/scripts/optimization/fminsearch.m b/scripts/optimization/fminsearch.m
--- a/scripts/optimization/fminsearch.m
+++ b/scripts/optimization/fminsearch.m
@@ -29,28 +29,28 @@
 ## The search begins at the point @var{x0} and iterates using the
 ## @nospell{Nelder & Mead} Simplex algorithm (a derivative-free method).  This
 ## algorithm is better-suited to functions which have discontinuities or for
 ## which a gradient-based search such as @code{fminunc} fails.
 ##
 ## Options for the search are provided in the parameter @var{options} using the
 ## function @code{optimset}.  Currently, @code{fminsearch} accepts the options:
 ## @qcode{"Display"}, @qcode{"FunValCheck"},@qcode{"MaxFunEvals"},
-## @qcode{"MaxIter"}, @qcode{"OutputFcn"}, @qcode{"TolFun"}, @qcode{"TolX"}. 
+## @qcode{"MaxIter"}, @qcode{"OutputFcn"}, @qcode{"TolFun"}, @qcode{"TolX"}.
 ##
 ## @qcode{"MaxFunEvals"} proscribes the maximum number of function evaluations
 ## before optimization is halted.  The default value is
 ## @code{200 * number_of_variables}, i.e., @code{200 * length (@var{x0})}.
 ## The value must be a positive integer.
 ##
 ## @qcode{"MaxIter"} proscribes the maximum number of algorithm iterations
 ## before optimization is halted.  The default value is
 ## @code{200 * number_of_variables}, i.e., @code{200 * length (@var{x0})}.
 ## The value must be a positive integer.
-## 
+##
 ## For a description of the other options, see @code{optimset}.  To initialize
 ## an options structure with default values for @code{fminsearch} use
 ## @code{options = optimset ("fminsearch")}.
 ##
 ## Additional inputs for the function @var{fun} can be passed as the fourth
 ## and higher arguments.  To pass function arguments while using the default
 ## @var{options} values, use @code{[]} for @var{options}.
 ##
@@ -73,17 +73,17 @@
 ## @item -1
 ## if the iteration is stopped by the @qcode{"OutputFcn"}.
 ## @end table
 ##
 ## The fourth output is a structure @var{output} containing runtime
 ## about the algorithm.  Fields in the structure are @code{funcCount}
 ## containing the number of function calls to @var{fun}, @code{iterations}
 ## containing the number of iteration steps, @code{algorithm} with the name of
-## the search algorithm (always: 
+## the search algorithm (always:
 ## @nospell{@qcode{"Nelder-Mead simplex direct search"}}), and @code{message}
 ## with the exit message.
 ##
 ## Example:
 ##
 ## @example
 ## fminsearch (@@(x) (x(1)-5).^2+(x(2)-8).^4, [0;0])
 ## @end example
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -167,17 +167,17 @@
 
 ## PKG_ADD: ## Discard result to avoid polluting workspace with ans at startup.
 ## PKG_ADD: [~] = __all_opts__ ("fsolve");
 
 function [x, fvec, info, output, fjac] = fsolve (fcn, x0, options = struct ())
 
   ## Get default options if requested.
   if (nargin == 1 && ischar (fcn) && strcmp (fcn, "defaults"))
-    x = optimset ("AutoScaling", "off", "ComplexEqn", "off", 
+    x = optimset ("AutoScaling", "off", "ComplexEqn", "off",
                   "FunValCheck", "off", "FinDiffType", "forward",
                   "Jacobian", "off",  "MaxFunEvals", [], "MaxIter", 400,
                   "OutputFcn", [], "Updating", "off", "TolFun", 1e-6,
                   "TolX", 1e-6, "TypicalX", []);
     return;
   endif
 
   if (nargin < 2 || nargin > 3 || ! isnumeric (x0))
diff --git a/test/pkg/pkg.tst b/test/pkg/pkg.tst
--- a/test/pkg/pkg.tst
+++ b/test/pkg/pkg.tst
@@ -42,17 +42,17 @@
 %! ## Create zip file packages of testing directories in prefix directory
 %! mfile_pkg_name = {"mfile_basic_test", "mfile_minimal_test"};
 %! mfile_pkg_zip = fullfile (prefix, strcat (mfile_pkg_name, ".zip"));
 %! for i = 1:numel (mfile_pkg_name)
 %!   zip (mfile_pkg_zip{i}, mfile_pkg_name{i});
 %! endfor
 
 ## Avoids printing to stdout when installing
-%!function silent_pkg_install (varargin) 
+%!function silent_pkg_install (varargin)
 %!  evalc (["pkg install", sprintf(" %s", varargin{:})]);
 %!endfunction
 
 ## Action install/uninstall
 %!test
 %! for i = 1:numel (mfile_pkg_name)
 %!   silent_pkg_install (mfile_pkg_zip{i});
 %!   pkg ("uninstall", mfile_pkg_name{i});
@@ -98,17 +98,17 @@
 
 # -nodeps
 ## FIXME: Need test
 
 # -verbose
 ## FIXME: Need test
 
 ## Action list
-%!test 
+%!test
 %! [user_packages, system_packages] = pkg ("list");
 
 # -forge
 #%!test
 #%! oct_forge_pkgs = pkg ("list", "-forge");
 
 ## Action describe
 %!test
