# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1463078785 14400
#      Thu May 12 14:46:25 2016 -0400
# Node ID 9467549bd5ff7690fe22f9db9e976dd66612b366
# Parent  68ab693d16e4c3e629b1ad2b9b4e11b40fe03a92
* gl-render.cc: Allow compilation without OPENGL.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -641,39 +641,43 @@ opengl_renderer::draw (const graphics_ob
     }
   else
     {
       warning ("opengl_renderer: cannot render object of type '%s'",
                props.graphics_object_name ().c_str ());
     }
 }
 
+#if defined (HAVE_OPENGL)
 static std::string
 gl_get_string (GLenum id)
 {
   // This is kind of ugly, but glGetString returns a pointer to GLubyte
   // and there is no std::string constructor that matches.  Is there a
   // better way?
 
   std::ostringstream buf;
   buf << glGetString (id);
   return std::string (buf.str ());
 }
+#endif
 
 void
 opengl_renderer::draw_figure (const figure::properties& props)
 {
   // Initialize OpenGL context
 
   init_gl_context (props.is___enhanced__ (), props.get_color_rgb ());
 
+#if defined (HAVE_OPENGL)
   props.set___gl_extensions__ (gl_get_string (GL_EXTENSIONS));
   props.set___gl_renderer__ (gl_get_string (GL_RENDERER));
   props.set___gl_vendor__ (gl_get_string (GL_VENDOR));
   props.set___gl_version__ (gl_get_string (GL_VERSION));
+#endif
 
   // Draw children
 
   draw (props.get_all_children (), false);
 }
 
 void
 opengl_renderer::draw_uipanel (const uipanel::properties& props,
