# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1237754666 -3600
#      Sun Mar 22 21:44:26 2009 +0100
# Node ID f26e0f00ce010a4d07ee3101a51c40043f0aaa5c
# Parent  17ba311ef110970c02c0dbdd5a532ab933ccf595
fix simple looping over structs

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-03-22  Jaroslav Hajek  <highegg@gmail.com>
+
+	* pt-eval.cc (tree_evaluator::visit_simple_for_command):
+	Remove struct branch, handle structs by the generic code.
+	(tree_evaluator::visit_complex_for_command):
+	Add missing const qualifiers.
+
 2009-03-21  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base-diag.cc: Add missing include.
 	* sparse-xdiv.cc: Ditto.
 	* DLD-FUNCTIONS/__glpk__.cc: Ditto.
 	* DLD-FUNCTIONS/__lin_interpn__.cc: Ditto.
 	* DLD-FUNCTIONS/__voronoi__.cc: Ditto.
 
diff --git a/src/pt-eval.cc b/src/pt-eval.cc
--- a/src/pt-eval.cc
+++ b/src/pt-eval.cc
@@ -334,18 +334,18 @@ tree_evaluator::visit_simple_for_command
 	  }
       }
     else if (rhs.is_scalar_type ())
       {
 	bool quit = false;
 
 	DO_SIMPLE_FOR_LOOP_ONCE (rhs);
       }
-    else if (rhs.is_matrix_type () 
-             || rhs.is_cell () || rhs.is_string ())
+    else if (rhs.is_matrix_type () || rhs.is_cell () || rhs.is_string ()
+             || rhs.is_map ())
       {
         // A matrix or cell is reshaped to 2 dimensions and iterated by
         // columns.
 
         bool quit = false;
 
         dim_vector dv = rhs.dims ().redim (2);
 
@@ -379,37 +379,16 @@ tree_evaluator::visit_simple_for_command
                 octave_value val = arg.do_index_op (idx);
                 DO_SIMPLE_FOR_LOOP_ONCE (val);
 
                 if (quit)
                   break;
               }
           }
       }
-    else if (rhs.is_map ())
-      {
-	Octave_map tmp_val (rhs.map_value ());
-
-	bool quit = false;
-
-	for (Octave_map::iterator p = tmp_val.begin ();
-	     p != tmp_val.end ();
-	     p++)
-	  {
-	    Cell val_lst = tmp_val.contents (p);
-
-	    octave_value val
-	      = (val_lst.length () == 1) ? val_lst(0) : octave_value (val_lst);
-
-	    DO_SIMPLE_FOR_LOOP_ONCE (val);
-
-	    if (quit)
-	      break;
-	  }
-      }
     else
       {
 	::error ("invalid type in for loop expression near line %d, column %d",
 		 cmd.line (), cmd.column ());
       }
   }
 
  cleanup:
@@ -451,25 +430,25 @@ tree_evaluator::visit_complex_for_comman
       tree_expression *elt = *p++;
 
       octave_lvalue val_ref = elt->lvalue ();
 
       elt = *p;
 
       octave_lvalue key_ref = elt->lvalue ();
 
-      Octave_map tmp_val (rhs.map_value ());
+      const Octave_map tmp_val (rhs.map_value ());
 
       tree_statement_list *loop_body = cmd.body ();
 
-      for (Octave_map::iterator q = tmp_val.begin (); q != tmp_val.end (); q++)
+      for (Octave_map::const_iterator q = tmp_val.begin (); q != tmp_val.end (); q++)
 	{
 	  octave_value key = tmp_val.key (q);
 
-	  Cell val_lst = tmp_val.contents (q);
+	  const Cell val_lst = tmp_val.contents (q);
 
 	  octave_idx_type n = tmp_val.numel ();
 
 	  octave_value val = (n == 1) ? val_lst(0) : octave_value (val_lst);
 
 	  val_ref.assign (octave_value::op_asn_eq, val);
 	  key_ref.assign (octave_value::op_asn_eq, key);
 
