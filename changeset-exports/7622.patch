# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1206131327 14400
#      Fri Mar 21 16:28:47 2008 -0400
# Node ID c195bd0a5c642ef8a31d3961675837e5f6abfe3f
# Parent  4682dda22527634f11eab8fb16623ba3f9d2697f
treat structs and cells as "constants"

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,22 @@
+2008-03-21  John W. Eaton  <jwe@octave.org>
+
+	* ov-cell.h (octave_cell::is_constant): Return true.
+	* ov-cell.h, ov-cell.cc (octave_cell::subsref (const std::string&,
+	const std::list<octave_value_list>&)): Define.
+	(octave_cell::subsref (const std::string&,
+	const std::list<octave_value_list>&, int)): Call panic_impossible.
+
+	* ov-struct.h (octave_struct::is_constant): New function.
+	* ov-struct.h, ov-struct.cc (octave_struct::subsref (const std::string&,
+	const std::list<octave_value_list>&)): Define.
+	(octave_struct::subsref (const std::string&,
+	const std::list<octave_value_list>&, int)): Call panic_impossible.
+
 2008-03-21  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/amd.cc: New file.
 	* Makefile.in (DLD_XSRC): Add amd.cc.
 
 2008-03-20  David Bateman  <dbateman@free.fr>
 
 	* Cell.cc (Cell Cell::diag (void) const): delete.
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -60,51 +60,51 @@ DEFINE_OCTAVE_ALLOCATOR (octave_cell);
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_cell, "cell", "cell");
 
 static void
 gripe_failed_assignment (void)
 {
   error ("assignment to cell array failed");
 }
 
-octave_value_list
+octave_value
 octave_cell::subsref (const std::string& type,
-		      const std::list<octave_value_list>& idx, int nargout)
+		      const std::list<octave_value_list>& idx)
 {
-  octave_value_list retval;
+  octave_value retval;
 
   switch (type[0])
     {
     case '(':
-      retval(0) = do_index_op (idx.front ());
+      retval = do_index_op (idx.front ());
       break;
 
     case '{':
       {
 	octave_value tmp = do_index_op (idx.front ());
 
 	if (! error_state)
 	  {
 	    Cell tcell = tmp.cell_value ();
 
 	    if (tcell.length () == 1)
-	      retval(0) = tcell(0,0);
+	      retval = tcell(0,0);
 	    else
 	      {
 		octave_idx_type n = tcell.numel ();
 
 		octave_value_list lst (n, octave_value ());
 
 		for (octave_idx_type i = 0; i < n; i++)
 		  {
 		    OCTAVE_QUIT;
 		    lst(i) = tcell(i);
 		  }
 
-		retval(0) = octave_value (lst, true);
+		retval = octave_value (lst, true);
 	      }
 	  }
       }
       break;
 
     case '.':
       {
 	std::string nm = type_name ();
@@ -116,17 +116,17 @@ octave_cell::subsref (const std::string&
       panic_impossible ();
     }
 
   // FIXME -- perhaps there should be an
   // octave_value_list::next_subsref member function?  See also
   // octave_user_function::subsref.
 
   if (idx.size () > 1)
-    retval = retval(0).next_subsref (nargout, type, idx);
+    retval = retval.next_subsref (type, idx);
 
   return retval;
 }
 
 octave_value
 octave_cell::subsasgn (const std::string& type,
 		       const std::list<octave_value_list>& idx,
 		       const octave_value& rhs)
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -66,39 +66,38 @@ public:
   octave_base_value *clone (void) const { return new octave_cell (*this); }
   octave_base_value *empty_clone (void) const { return new octave_cell (); }
 
 #if 0
   octave_base_value *try_narrowing_conversion (void);
 #endif
 
   octave_value subsref (const std::string&,
-			const std::list<octave_value_list>&)
+			const std::list<octave_value_list>&);
+
+  octave_value_list subsref (const std::string&,
+			     const std::list<octave_value_list>&, int)
     {
       panic_impossible ();
       return octave_value_list ();
     }
 
-  octave_value_list subsref (const std::string& type,
-			     const std::list<octave_value_list>& idx,
-			     int nargout);
-
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   size_t byte_size (void) const;
 
   bool is_matrix_type (void) const { return false; }
 
   bool is_numeric_type (void) const { return false; }
 
   bool is_defined (void) const { return true; }
 
-  bool is_constant (void) const { return false; }
+  bool is_constant (void) const { return true; }
 
   bool is_cell (void) const { return true; }
 
   bool is_cellstr (void) const { return matrix.is_cellstr (); }
 
   Cell cell_value (void) const { return matrix; }
 
   octave_value_list list_value (void) const;
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -91,22 +91,21 @@ gripe_invalid_index_type (const std::str
 }
 
 static void
 gripe_failed_assignment (void)
 {
   error ("assignment to structure element failed");
 }
 
-octave_value_list
+octave_value
 octave_struct::subsref (const std::string& type,
-			const std::list<octave_value_list>& idx,
-			int nargout)
+			const std::list<octave_value_list>& idx)
 {
-  octave_value_list retval;
+  octave_value retval;
 
   int skip = 1;
 
   switch (type[0])
     {
     case '(':
       {
 	if (type.length () > 1 && type[1] == '.')
@@ -115,36 +114,36 @@ octave_struct::subsref (const std::strin
 	    octave_value_list key_idx = *++p;
 
 	    Cell tmp = dotref (key_idx);
 
 	    if (! error_state)
 	      {
 		Cell t = tmp.index (idx.front (), true);
 
-		retval(0) = (t.length () == 1) ? t(0) : octave_value (t, true);
+		retval = (t.length () == 1) ? t(0) : octave_value (t, true);
 
 		// We handled two index elements, so tell
 		// next_subsref to skip both of them.
 
 		skip++;
 	      }
 	  }
 	else
-	  retval(0) = map.index (idx.front (), true);
+	  retval = map.index (idx.front (), true);
       }
       break;
 
     case '.':
       {
 	if (map.numel() > 0)
 	  {
 	    Cell t = dotref (idx.front ());
 
-	    retval(0) = (t.length () == 1) ? t(0) : octave_value (t, true);
+	    retval = (t.length () == 1) ? t(0) : octave_value (t, true);
 	  }
       }
       break;
 
     case '{':
       gripe_invalid_index_type (type_name (), type[0]);
       break;
 
@@ -152,17 +151,17 @@ octave_struct::subsref (const std::strin
       panic_impossible ();
     }
 
   // FIXME -- perhaps there should be an
   // octave_value_list::next_subsref member function?  See also
   // octave_user_function::subsref.
 
   if (idx.size () > 1)
-    retval = retval(0).next_subsref (nargout, type, idx, skip);
+    retval = retval.next_subsref (type, idx, skip);
 
   return retval;
 }
 
 octave_value
 octave_struct::numeric_conv (const Cell& val,
 			     const std::string& type)
 {
diff --git a/src/ov-struct.h b/src/ov-struct.h
--- a/src/ov-struct.h
+++ b/src/ov-struct.h
@@ -61,25 +61,25 @@ public:
   ~octave_struct (void) { }
 
   octave_base_value *clone (void) const { return new octave_struct (*this); }
   octave_base_value *empty_clone (void) const { return new octave_struct (); }
 
   Cell dotref (const octave_value_list& idx);
 
   octave_value subsref (const std::string&,
-			const std::list<octave_value_list>&)
+			const std::list<octave_value_list>&);
+
+  octave_value_list subsref (const std::string&,
+			     const std::list<octave_value_list>&, int)
     {
       panic_impossible ();
       return octave_value_list ();
     }
 
-  octave_value_list subsref (const std::string& type,
-			     const std::list<octave_value_list>& idx,
-			     int nargout);
 
   static octave_value numeric_conv (const Cell& val,
 				    const std::string& type);
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
@@ -108,16 +108,18 @@ public:
   octave_value reshape (const dim_vector& new_dims) const
     { return map.reshape (new_dims); }
 
   octave_value resize (const dim_vector& dv, bool = false) const
     { Octave_map tmap = map; tmap.resize (dv); return tmap; }
 
   bool is_defined (void) const { return true; }
 
+  bool is_constant (void) const { return true; }
+
   bool is_map (void) const { return true; }
 
   Octave_map map_value (void) const { return map; }
 
   string_vector map_keys (void) const { return map.keys (); }
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
