# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1424424335 18000
#      Fri Feb 20 04:25:35 2015 -0500
# Node ID bf737d9277074e027f8d810c40319a2027307e15
# Parent  42f71a450f5aae7ac69f33d6aa1c3d20a1248181
eliminate bison warnings from oct-parse.yy

* oct-parse.in.yy: Use YYUSE macro and token declarations to eliminate
warnings about unused values in bison rules.  Avoid unset value
warnings by defining $$ as needed.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -144,24 +144,26 @@ static void yyerror (octave_base_parser&
 
 %define api.pure
 %PUSH_PULL_DECL%
 %parse-param { octave_base_parser& parser }
 %lex-param { void *scanner }
 
 %union
 {
+  int dummy_type;
+
   // The type of the basic tokens returned by the lexer.
   token *tok_val;
 
   // Comment strings that we need to deal with mid-rule.
   octave_comment_list *comment_type;
 
   // Types for the nonterminals we generate.
-  char sep_type;
+  char punct_type;
   tree *tree_type;
   tree_matrix *tree_matrix_type;
   tree_cell *tree_cell_type;
   tree_expression *tree_expression_type;
   tree_constant *tree_constant_type;
   tree_fcn_handle *tree_fcn_handle_type;
   tree_funcall *tree_funcall_type;
   tree_function_def *tree_function_def_type;
@@ -232,24 +234,28 @@ static void yyerror (octave_base_parser&
 %token <tok_val> PROPERTIES METHODS EVENTS ENUMERATION
 %token <tok_val> METAQUERY
 %token <tok_val> SUPERCLASSREF
 %token <tok_val> FQ_IDENT
 %token <tok_val> GET SET
 %token <tok_val> FCN
 
 // Other tokens.
-%token END_OF_INPUT LEXICAL_ERROR
-%token INPUT_FILE
+%token<dummy_type> END_OF_INPUT LEXICAL_ERROR
+%token<dummy_type> INPUT_FILE
 // %token VARARGIN VARARGOUT
 
+%token<dummy_type> '(' ')' '[' ']' '{' '}' '.' ',' ';' '@' '\n'
+
 // Nonterminals we construct.
+%type <dummy_type> indirect_ref_op decl_param_init push_fcn_symtab
+%type <dummy_type> param_list_beg param_list_end stmt_begin parse_error
 %type <comment_type> stash_comment
 %type <tok_val> function_beg classdef_beg
-%type <sep_type> sep_no_nl opt_sep_no_nl nl opt_nl sep opt_sep
+%type <punct_type> sep_no_nl opt_sep_no_nl nl opt_nl sep opt_sep
 %type <tree_type> input
 %type <tree_constant_type> string constant magic_colon
 %type <tree_anon_fcn_handle_type> anon_fcn_handle
 %type <tree_fcn_handle_type> fcn_handle
 %type <tree_matrix_type> matrix_rows
 %type <tree_cell_type> cell_rows
 %type <tree_expression_type> matrix cell
 %type <tree_expression_type> primary_expr oper_expr power_expr
@@ -317,30 +323,29 @@ static void yyerror (octave_base_parser&
 
 // How to clean up if there is a parse error.  We handle deleting tokens
 // and comments seperately and separators are just characters.  The
 // remaining items are dynamically allocated parse tree objects that
 // must be deleted.  Use the wildcard case (<*>) to detect unhandled
 // cases (for example, a new semantic type is added but not handled
 // here).
 
-%destructor { } <sep_type>
 %destructor { } <tok_val>
+%destructor { } <punct_type>
 %destructor { } <comment_type>
-%destructor { } <dummy_type>
 %destructor { } <>
 
 %destructor { delete $$; } <tree_type>
 %destructor { delete $$; } <tree_matrix_type>
 %destructor { delete $$; } <tree_cell_type>
 %destructor { delete $$; } <tree_expression_type>
 %destructor { delete $$; } <tree_constant_type>
 %destructor { delete $$; } <tree_fcn_handle_type>
-%destructor { delete $$; } <tree_funcall>
-%destructor { delete $$; } <tree_function_def>
+%destructor { delete $$; } <tree_funcall_type>
+%destructor { delete $$; } <tree_function_def_type>
 %destructor { delete $$; } <tree_anon_fcn_handle_type>
 %destructor { delete $$; } <tree_identifier_type>
 %destructor { delete $$; } <tree_index_expression_type>
 %destructor { delete $$; } <tree_colon_expression_type>
 %destructor { delete $$; } <tree_argument_list_type>
 %destructor { delete $$; } <tree_parameter_list_type>
 %destructor { delete $$; } <tree_command_type>
 %destructor { delete $$; } <tree_if_command_type>
@@ -369,48 +374,60 @@ static void yyerror (octave_base_parser&
 %destructor { delete $$; } <tree_classdef_methods_block_type>
 %destructor { delete $$; } <tree_classdef_event_type>
 %destructor { delete $$; } <tree_classdef_events_list_type>
 %destructor { delete $$; } <tree_classdef_events_block_type>
 %destructor { delete $$; } <tree_classdef_enum_type>
 %destructor { delete $$; } <tree_classdef_enum_list_type>
 %destructor { delete $$; } <tree_classdef_enum_block_type>
 
-%destructor {
-    warning_with_id
-      ("Octave:parser-destructor",
-       "possible memory leak in cleanup following parse error");
- } <*>
+// Defining a generic destructor generates a warning if destructors are
+// already explicitly declared for all types.
+//
+// %destructor {
+//    warning_with_id
+//      ("Octave:parser-destructor",
+//       "possible memory leak in cleanup following parse error");
+// } <*>
 
 // Where to start.
 %start input
 
 %%
 
 // ==============================
 // Statements and statement lists
 // ==============================
 
 input           : simple_list '\n'
                   {
+                    $$ = 0;
                     parser.stmt_list = $1;
                     YYACCEPT;
                   }
                 | simple_list END_OF_INPUT
                   {
+                    $$ = 0;
                     lexer.end_of_input = true;
                     parser.stmt_list = $1;
                     YYACCEPT;
                   }
                 | parse_error
-                  { ABORT_PARSE; }
+                  {
+                    $$ = 0;
+                    ABORT_PARSE;
+                  }
                 ;
 
 simple_list     : opt_sep_no_nl
-                  { $$ = 0; }
+                  {
+                    YYUSE ($1);
+
+                    $$ = 0;
+                  }
                 | simple_list1 opt_sep_no_nl
                   { $$ = parser.set_stmt_print_flag ($1, $2, false); }
                 ;
 
 simple_list1    : statement
                   { $$ = parser.make_statement_list ($1); }
                 | simple_list1 sep_no_nl statement
                   { $$ = parser.append_statement_list ($1, $2, $3, false); }
@@ -601,23 +618,27 @@ primary_expr    : identifier
                 | superclass_identifier
                   { $$ = $1; }
                 | '(' expression ')'
                   { $$ = $2->mark_in_parens (); }
                 ;
 
 magic_colon     : ':'
                   {
+                    YYUSE ($1);
+
                     octave_value tmp (octave_value::magic_colon_t);
                     $$ = new tree_constant (tmp);
                   }
                 ;
 
 magic_tilde     : EXPR_NOT
                   {
+                    YYUSE ($1);
+
                     $$ = new tree_black_hole ();
                   }
                 ;
 
 arg_list        : expression
                   { $$ = new tree_argument_list ($1); }
                 | magic_colon
                   { $$ = new tree_argument_list ($1); }
@@ -636,17 +657,20 @@ arg_list        : expression
                 | arg_list ',' expression
                   {
                     $1->append ($3);
                     $$ = $1;
                   }
                 ;
 
 indirect_ref_op : '.'
-                  { lexer.looking_at_indirect_ref = true; }
+                  {
+                    $$ = 0;
+                    lexer.looking_at_indirect_ref = true;
+                  }
                 ;
 
 oper_expr       : primary_expr
                   { $$ = $1; }
                 | oper_expr PLUS_PLUS
                   { $$ = parser.make_postfix_op (PLUS_PLUS, $1, $2); }
                 | oper_expr MINUS_MINUS
                   { $$ = parser.make_postfix_op (MINUS_MINUS, $1, $2); }
@@ -791,16 +815,18 @@ power_expr      : primary_expr
 colon_expr      : colon_expr1
                   { $$ = parser.finish_colon_expression ($1); }
                 ;
 
 colon_expr1     : oper_expr
                   { $$ = new tree_colon_expression ($1); }
                 | colon_expr1 ':' oper_expr
                   {
+                    YYUSE ($2);
+
                     if (! ($$ = $1->append ($3)))
                       {
                         delete $1;
                         delete $3;
                         ABORT_PARSE;
                       }
                   }
                 ;
@@ -941,22 +967,27 @@ decl1           : decl2
                 | decl1 decl2
                   {
                     $1->append ($2);
                     $$ = $1;
                   }
                 ;
 
 decl_param_init : // empty
-                { lexer.looking_at_initializer_expression = true; }
+                  {
+                    $$ = 0;
+                    lexer.looking_at_initializer_expression = true;
+                  }
 
 decl2           : identifier
                   { $$ = new tree_decl_elt ($1); }
                 | identifier '=' decl_param_init expression
                   {
+                    YYUSE ($2);
+
                     lexer.looking_at_initializer_expression = false;
                     $$ = new tree_decl_elt ($1, $4);
                   }
                 ;
 
 // ====================
 // Selection statements
 // ====================
@@ -987,45 +1018,57 @@ if_cmd_list     : if_cmd_list1
                   {
                     $1->append ($2);
                     $$ = $1;
                   }
                 ;
 
 if_cmd_list1    : expression stmt_begin opt_sep opt_list
                   {
+                    YYUSE ($3);
+
                     $1->mark_braindead_shortcircuit ();
 
                     $$ = parser.start_if_command ($1, $4);
                   }
                 | if_cmd_list1 elseif_clause
                   {
                     $1->append ($2);
                     $$ = $1;
                   }
                 ;
 
 elseif_clause   : ELSEIF stash_comment opt_sep expression stmt_begin opt_sep opt_list
                   {
+                    YYUSE ($3);
+                    YYUSE ($6);
+
                     $4->mark_braindead_shortcircuit ();
 
                     $$ = parser.make_elseif_clause ($1, $4, $7, $2);
                   }
                 ;
 
 else_clause     : ELSE stash_comment opt_sep opt_list
-                  { $$ = new tree_if_clause ($4, $2); }
+                  {
+                    YYUSE ($1);
+                    YYUSE ($3);
+
+                    $$ = new tree_if_clause ($4, $2);
+                  }
                 ;
 
 // ================
 // Switch statement
 // ================
 
 switch_command  : SWITCH stash_comment expression opt_sep case_list END
                   {
+                    YYUSE ($4);
+
                     if (! ($$ = parser.finish_switch_command ($1, $3, $5, $6, $2)))
                       {
                         // finish_switch_command deleted $3 adn $5.
                         ABORT_PARSE;
                       }
                   }
                 ;
 
@@ -1047,72 +1090,97 @@ case_list1      : switch_case
                 | case_list1 switch_case
                   {
                     $1->append ($2);
                     $$ = $1;
                   }
                 ;
 
 switch_case     : CASE stash_comment opt_sep expression stmt_begin opt_sep opt_list
-                  { $$ = parser.make_switch_case ($1, $4, $7, $2); }
+                  {
+                    YYUSE ($3);
+                    YYUSE ($6);
+
+                    $$ = parser.make_switch_case ($1, $4, $7, $2);
+                  }
                 ;
 
 default_case    : OTHERWISE stash_comment opt_sep opt_list
                   {
+                    YYUSE ($1);
+                    YYUSE ($3);
+
                     $$ = new tree_switch_case ($4, $2);
                   }
                 ;
 
 // =======
 // Looping
 // =======
 
 loop_command    : WHILE stash_comment expression stmt_begin opt_sep opt_list END
                   {
+                    YYUSE ($5);
+
                     $3->mark_braindead_shortcircuit ();
 
                     if (! ($$ = parser.make_while_command ($1, $3, $6, $7, $2)))
                       {
                         // make_while_command deleted $3 and $6.
                         ABORT_PARSE;
                       }
                   }
                 | DO stash_comment opt_sep opt_list UNTIL expression
                   {
+                    YYUSE ($1);
+                    YYUSE ($3);
+
                     $$ = parser.make_do_until_command ($5, $4, $6, $2);
                   }
                 | FOR stash_comment assign_lhs '=' expression stmt_begin opt_sep opt_list END
                   {
+                    YYUSE ($4);
+                    YYUSE ($7);
+
                     if (! ($$ = parser.make_for_command (FOR, $1, $3, $5, 0,
                                                          $8, $9, $2)))
                       {
                         // make_for_command deleted $3, $5, and $8.
                         ABORT_PARSE;
                       }
                   }
                 | FOR stash_comment '(' assign_lhs '=' expression ')' opt_sep opt_list END
                   {
+                    YYUSE ($5);
+                    YYUSE ($8);
+
                     if (! ($$ = parser.make_for_command (FOR, $1, $4, $6, 0,
                                                          $9, $10, $2)))
                       {
                         // make_for_command deleted $4, $6, and $9.
                         ABORT_PARSE;
                       }
                   }
                 | PARFOR stash_comment assign_lhs '=' expression stmt_begin opt_sep opt_list END
                   {
+                    YYUSE ($4);
+                    YYUSE ($7);
+
                     if (! ($$ = parser.make_for_command (PARFOR, $1, $3, $5,
                                                          0, $8, $9, $2)))
                       {
                         // make_for_command deleted $3, $5, and $8.
                         ABORT_PARSE;
                       }
                   }
                 | PARFOR stash_comment '(' assign_lhs '=' expression ',' expression ')' opt_sep opt_list END
                   {
+                    YYUSE ($5);
+                    YYUSE ($10);
+
                     if (! ($$ = parser.make_for_command (PARFOR, $1, $4, $6,
                                                          $8, $11, $12, $2)))
                       {
                         // make_for_command deleted $4, $6, $8, and $11.
                         ABORT_PARSE;
                       }
                   }
                 ;
@@ -1131,47 +1199,59 @@ jump_command    : BREAK
 
 // ==========
 // Exceptions
 // ==========
 
 except_command  : UNWIND stash_comment opt_sep opt_list CLEANUP
                   stash_comment opt_sep opt_list END
                   {
+                    YYUSE ($3);
+                    YYUSE ($5);
+                    YYUSE ($7);
+
                     if (! ($$ = parser.make_unwind_command ($1, $4, $8, $9, $2, $6)))
                       {
                         // make_unwind_command deleted $4 and $8.
                         ABORT_PARSE;
                       }
                   }
                 | TRY stash_comment opt_sep opt_list CATCH stash_comment
                   opt_sep opt_list END
                   {
+                    YYUSE ($3);
+                    YYUSE ($5);
+                    YYUSE ($7);
+
                     if (! ($$ = parser.make_try_command ($1, $4, $7, $8, $9, $2, $6)))
                       {
                         // make_try_command deleted $4 and $8.
                         ABORT_PARSE;
                       }
                   }
                 | TRY stash_comment opt_sep opt_list END
                   {
+                    YYUSE ($3);
+
                     if (! ($$ = parser.make_try_command ($1, $4, 0, 0, $5, $2, 0)))
                       {
                         // make_try_command deleted $4.
                         ABORT_PARSE;
                       }
                   }
                 ;
 
 // ===========================================
 // Some 'subroutines' for function definitions
 // ===========================================
 
 push_fcn_symtab : // empty
                   {
+                    $$ = 0;
+
                     parser.curr_fcn_depth++;
 
                     if (parser.max_fcn_depth < parser.curr_fcn_depth)
                       parser.max_fcn_depth = parser.curr_fcn_depth;
 
                     lexer.symtab_context.push (symbol_table::alloc_scope ());
 
                     parser.function_scopes.push_back
@@ -1190,29 +1270,31 @@ push_fcn_symtab : // empty
                 ;
 
 // ===========================
 // List of function parameters
 // ===========================
 
 param_list_beg  : '('
                   {
+                    $$ = 0;
                     lexer.looking_at_parameter_list = true;
 
                     if (lexer.looking_at_function_handle)
                       {
                         lexer.symtab_context.push (symbol_table::alloc_scope ());
                         lexer.looking_at_function_handle--;
                         lexer.looking_at_anon_fcn_args = true;
                       }
                   }
                 ;
 
 param_list_end  : ')'
                   {
+                    $$ = 0;
                     lexer.looking_at_parameter_list = false;
                     lexer.looking_for_object_index = false;
                   }
                 ;
 
 param_list      : param_list_beg param_list1 param_list_end
                   {
                     if ($2)
@@ -1316,16 +1398,18 @@ return_list1    : identifier
                 ;
 
 // =======================
 // Script or function file
 // =======================
 
 file            : INPUT_FILE opt_nl opt_list END_OF_INPUT
                   {
+                    YYUSE ($2);
+
                     if (lexer.reading_fcn_file)
                       {
                         // Delete the dummy statement_list we created
                         // after parsing the function.  Any function
                         // definitions found in the file have already
                         // been stored in the symbol table or in
                         // octave_base_parser::primary_fcn_ptr.
 
@@ -1340,16 +1424,19 @@ file            : INPUT_FILE opt_nl opt_
 
                         parser.make_script ($3, end_of_script);
                       }
 
                     $$ = 0;
                   }
                 | INPUT_FILE opt_nl classdef opt_sep END_OF_INPUT
                   {
+                    YYUSE ($2);
+                    YYUSE ($4);
+
                     if (lexer.reading_classdef_file)
                       parser.classdef_object = $3;
 
                     $$ = 0;
                   }
                 ;
 
 // ===================
@@ -1368,16 +1455,18 @@ function_beg    : push_fcn_symtab FCN
 function        : function_beg stash_comment function1
                   {
                     $$ = parser.finish_function (0, $3, $2, $1->line (),
                                                  $1->column ());
                     parser.recover_from_parsing_function ();
                   }
                 | function_beg stash_comment return_list '=' function1
                   {
+                    YYUSE ($4);
+
                     $$ = parser.finish_function ($3, $5, $2, $1->line (),
                                                  $1->column ());
                     parser.recover_from_parsing_function ();
                   }
                 ;
 
 fcn_name        : identifier
                   {
@@ -1385,23 +1474,27 @@ fcn_name        : identifier
 
                     lexer.parsed_function_name.top () = true;
                     lexer.maybe_classdef_get_set_method = false;
 
                     $$ = $1;
                   }
                 | GET '.' identifier
                   {
+                    YYUSE ($1);
+
                     lexer.parsed_function_name.top () = true;
                     lexer.maybe_classdef_get_set_method = false;
                     lexer.parsing_classdef_get_method = true;
                     $$ = $3;
                   }
                 | SET '.' identifier
                   {
+                    YYUSE ($1);
+
                     lexer.parsed_function_name.top () = true;
                     lexer.maybe_classdef_get_set_method = false;
                     lexer.parsing_classdef_set_method = true;
                     $$ = $3;
                   }
                 ;
 
 function1       : fcn_name function2
@@ -1418,19 +1511,27 @@ function1       : fcn_name function2
                     lexer.parsing_classdef_get_method = false;
                     lexer.parsing_classdef_set_method = false;
 
                     $$ = parser.frob_function (fname, $2);
                   }
                 ;
 
 function2       : param_list opt_sep opt_list function_end
-                  { $$ = parser.start_function ($1, $3, $4); }
+                  {
+                    YYUSE ($2);
+
+                    $$ = parser.start_function ($1, $3, $4);
+                  }
                 | opt_sep opt_list function_end
-                  { $$ = parser.start_function (0, $2, $3); }
+                  {
+                    YYUSE ($1);
+
+                    $$ = parser.start_function (0, $2, $3);
+                  }
                 ;
 
 function_end    : END
                   {
                     parser.endfunction_found = true;
                     if (parser.end_token_ok ($1, token::function_end))
                       $$ = parser.make_end ("endfunction", false,
                                             $1->line (), $1->column ());
@@ -1487,26 +1588,31 @@ classdef_beg    : CLASSDEF
 
                     lexer.parsing_classdef = true;
                     $$ = $1;
                   }
                 ;
 
 classdef        : classdef_beg stash_comment opt_attr_list identifier opt_superclass_list opt_sep class_body opt_sep END
                   {
+                    YYUSE ($6);
+                    YYUSE ($8);
+
                     lexer.parsing_classdef = false;
 
                     if (! ($$ = parser.make_classdef ($1, $3, $4, $5, $7, $9, $2)))
                       {
                         // make_classdef deleted $3, $4, $5, and $7.
                         ABORT_PARSE;
                       }
                   }
                 | classdef_beg stash_comment opt_attr_list identifier opt_superclass_list opt_sep END
                   {
+                    YYUSE ($6);
+
                     lexer.parsing_classdef = false;
 
                     if (! ($$ = parser.make_classdef ($1, $3, $4, $5, 0, $7, $2)))
                       {
                         // make_classdef deleted $3, $4, and $5.
                         ABORT_PARSE;
                       }
                   }
@@ -1526,36 +1632,50 @@ attr_list       : attr
                     $$ = $1;
                   }
                 ;
 
 attr            : identifier
                   { $$ = new tree_classdef_attribute ($1); }
                 | identifier '=' decl_param_init expression
                   {
+                    YYUSE ($2);
+
                     lexer.looking_at_initializer_expression = false;
                     $$ = new tree_classdef_attribute ($1, $4);
                   }
                 | EXPR_NOT identifier
-                  { $$ = new tree_classdef_attribute ($2, false); }
+                  {
+                    YYUSE ($1);
+
+                    $$ = new tree_classdef_attribute ($2, false);
+                  }
                 ;
 
 opt_superclass_list
                 : // empty
                   { $$ = 0; }
                 | superclass_list
                   { $$ = $1; }
                 ;
 
 superclass_list : EXPR_LT
-                  { lexer.enable_fq_identifier (); }
+                  {
+                    YYUSE ($1);
+
+                    lexer.enable_fq_identifier ();
+                  }
                   superclass
                   { $$ = new tree_classdef_superclass_list ($3); }
                 | superclass_list EXPR_AND
-                  { lexer.enable_fq_identifier (); }
+                  {
+                    YYUSE ($2);
+
+                    lexer.enable_fq_identifier ();
+                  }
                   superclass
                   {
                     $1->append ($4);
                     $$ = $1;
                   }
                 ;
 
 superclass      : FQ_IDENT
@@ -1567,87 +1687,109 @@ class_body      : properties_block
                 | methods_block
                   { $$ = new tree_classdef_body ($1); }
                 | events_block
                   { $$ = new tree_classdef_body ($1); }
                 | enum_block
                   { $$ = new tree_classdef_body ($1); }
                 | class_body opt_sep properties_block
                   {
+                    YYUSE ($2);
+
                     $1->append ($3);
                     $$ = $1;
                   }
                 | class_body opt_sep methods_block
                   {
+                    YYUSE ($2);
+
                     $1->append ($3);
                     $$ = $1;
                   }
                 | class_body opt_sep events_block
                   {
+                    YYUSE ($2);
+
                     $1->append ($3);
                     $$ = $1;
                   }
                 | class_body opt_sep enum_block
                   {
+                    YYUSE ($2);
+
                     $1->append ($3);
                     $$ = $1;
                   }
                 ;
 
 properties_block
                 : PROPERTIES stash_comment opt_attr_list opt_sep property_list opt_sep END
                   {
+                    YYUSE ($4);
+                    YYUSE ($6);
+
                     if (! ($$ = parser.make_classdef_properties_block
                            ($1, $3, $5, $7, $2)))
                       {
                         // make_classdef_properties_block delete $3 and $5.
                         ABORT_PARSE;
                       }
                   }
                 | PROPERTIES stash_comment opt_attr_list opt_sep END
                   {
+                    YYUSE ($4);
+
                     if (! ($$ = parser.make_classdef_properties_block
                            ($1, $3, 0, $5, $2)))
                       {
                         // make_classdef_properties_block delete $3.
                         ABORT_PARSE;
                       }
                   }
                 ;
 
 property_list
                 : class_property
                   { $$ = new tree_classdef_property_list ($1); }
                 | property_list opt_sep class_property
                   {
+                    YYUSE ($2);
+
                     $1->append ($3);
                     $$ = $1;
                   }
                 ;
 
 class_property  : identifier
                   { $$ = new tree_classdef_property ($1); }
                 | identifier '=' decl_param_init expression ';'
                   {
+                    YYUSE ($2);
+
                     lexer.looking_at_initializer_expression = false;
                     $$ = new tree_classdef_property ($1, $4);
                   }
                 ;
 
 methods_block   : METHODS stash_comment opt_attr_list opt_sep methods_list opt_sep END
                   {
+                    YYUSE ($4);
+                    YYUSE ($6);
+
                     if (! ($$ = parser.make_classdef_methods_block
                            ($1, $3, $5, $7, $2)))
                       {
                         // make_classdef_methods_block deleted $3 and $5.
                         ABORT_PARSE;
                       }
                   }
                 | METHODS stash_comment opt_attr_list opt_sep END
                   {
+                    YYUSE ($4);
+
                     if (! ($$ = parser.make_classdef_methods_block
                            ($1, $3, 0, $5, $2)))
                       {
                         // make_classdef_methods_block deleted $3.
                         ABORT_PARSE;
                       }
                   }
                 ;
@@ -1664,16 +1806,18 @@ method_decl1    : identifier
                       ABORT_PARSE;
                   }
                 ;
 
 method_decl     : stash_comment method_decl1
                   { $$ = parser.finish_classdef_external_method ($2, 0, $1); }
                 | stash_comment return_list '='
                   {
+                    YYUSE ($3);
+
                     lexer.defining_func++;
                     lexer.parsed_function_name.push (false);
                   }
                   method_decl1
                   {
                     lexer.defining_func--;
                     lexer.parsed_function_name.pop ();
                     $$ = parser.finish_classdef_external_method ($5, $2, $1);
@@ -1691,107 +1835,130 @@ methods_list    : method
                     octave_value fcn;
                     if ($1)
                       fcn = $1->function ();
                     delete $1;
                     $$ = new tree_classdef_methods_list (fcn);
                   }
                 | methods_list opt_sep method
                   {
+                    YYUSE ($2);
+
                     octave_value fcn;
                     if ($3)
                       fcn = $3->function ();
                     delete $3;
 
                     $1->append (fcn);
                     $$ = $1;
                   }
                 ;
 
 events_block    : EVENTS stash_comment opt_attr_list opt_sep events_list opt_sep END
                   {
+                    YYUSE ($4);
+                    YYUSE ($6);
+
                     if (! ($$ = parser.make_classdef_events_block
                            ($1, $3, $5, $7, $2)))
                       {
                         // make_classdef_events_block deleted $3 and $5.
                         ABORT_PARSE;
                       }
                   }
                 | EVENTS stash_comment opt_attr_list opt_sep END
                   {
+                    YYUSE ($4);
+
                     if (! ($$ = parser.make_classdef_events_block
                            ($1, $3, 0, $5, $2)))
                       {
                         // make_classdef_events_block deleted $3.
                         ABORT_PARSE;
                       }
                   }
                 ;
 
 events_list     : class_event
                   { $$ = new tree_classdef_events_list ($1); }
                 | events_list opt_sep class_event
                   {
+                    YYUSE ($2);
+
                     $1->append ($3);
                     $$ = $1;
                   }
                 ;
 
 class_event     : identifier
                   { $$ = new tree_classdef_event ($1); }
                 ;
 
 enum_block      : ENUMERATION stash_comment opt_attr_list opt_sep enum_list opt_sep END
                   {
+                    YYUSE ($4);
+                    YYUSE ($6);
+
                     if (! ($$ = parser.make_classdef_enum_block
                            ($1, $3, $5, $7, $2)))
                       {
                         // make_classdef_enum_block deleted $3 and $5.
                         ABORT_PARSE;
                       }
                   }
                 | ENUMERATION stash_comment opt_attr_list opt_sep END
                   {
+                    YYUSE ($4);
+
                     if (! ($$ = parser.make_classdef_enum_block
                            ($1, $3, 0, $5, $2)))
                       {
                         // make_classdef_enum_block deleted $3.
                         ABORT_PARSE;
                       }
                   }
                 ;
 
 enum_list       : class_enum
                   { $$ = new tree_classdef_enum_list ($1); }
                 | enum_list opt_sep class_enum
                   {
+                    YYUSE ($2);
+
                     $1->append ($3);
                     $$ = $1;
                   }
                 ;
 
 class_enum      : identifier '(' expression ')'
                   { $$ = new tree_classdef_enum ($1, $3); }
                 ;
 
 // =============
 // Miscellaneous
 // =============
 
 stmt_begin      : // empty
-                  { lexer.at_beginning_of_statement = true; }
+                  {
+                    $$ = 0;
+                    lexer.at_beginning_of_statement = true;
+                  }
                 ;
 
 stash_comment   : // empty
                   { $$ = lexer.get_comment (); }
                 ;
 
 parse_error     : LEXICAL_ERROR
-                  { parser.bison_error ("parse error"); }
+                  {
+                    $$ = 0;
+                    parser.bison_error ("parse error");
+                  }
                 | error
+                  { $$ = 0; }
                 ;
 
 sep_no_nl       : ','
                   { $$ = ','; }
                 | ';'
                   { $$ = ';'; }
                 | sep_no_nl ','
                   { $$ = $1; }
