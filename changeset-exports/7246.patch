# HG changeset patch
# User jwe
# Date 1196783352 0
#      Tue Dec 04 15:49:12 2007 +0000
# Node ID f81e80674b9b8c1983c680bcdd7a7337227b9793
# Parent  d65670971cbc504720190f380f97c2ba3e8df15a
[project @ 2007-12-04 15:49:12 by jwe]

diff --git a/liboctave/Array-util.h b/liboctave/Array-util.h
--- a/liboctave/Array-util.h
+++ b/liboctave/Array-util.h
@@ -80,17 +80,17 @@ extern OCTAVE_API dim_vector short_freez
 
 struct
 permute_vector
 {
   octave_idx_type pidx;
   octave_idx_type iidx;
 };
 
-extern int permute_vector_compare (const void *a, const void *b);
+extern int OCTAVE_API permute_vector_compare (const void *a, const void *b);
 
 extern void OCTAVE_API gripe_nonconformant (const char *op, int op1_len, int op2_len);
 
 extern void OCTAVE_API gripe_nonconformant (const char *op, int op1_nr, int op1_nc,
 				 int op2_nr, int op2_nc);
 
 
 extern void OCTAVE_API gripe_nonconformant (const char *op, dim_vector& op1_dims,
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,21 @@
+2007-12-04  David Bateman  <dbateman@free.fr>
+
+	* Sparse.cc (assign (Sparse<LT>&,  const Sparse<RT>&)):
+	Resize matrix as well if one dimension of lhs is zero and the rhs
+	index exceeds the lhs index.
+	* Sparse.cc (assign1 (Sparse<LT>&,  const Sparse<RT>&)):
+	Don't resize to a smaller matrix for empty matrices with a max rhs
+	index smaller than the non zero lhs index.
+
+2007-12-04  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* Array-util.h: Tag permute_vector_compare with OCTAVE_API.
+
 2007-12-03  Moritz Borgmann  <octave@moriborg.de>
 
 	* Array-util.cc (permute_vector_compare): Move here from Array.cc.
 	* Array-util.h (permute_vector, permute_vector_compare): Provide decls.
 	* Array.cc (permute_vector, permute_vector_compare): Delete.
 
 2007-12-03  David Bateman  <dbateman@free.fr>
 
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -2157,17 +2157,17 @@ assign1 (Sparse<LT>& lhs, const Sparse<R
 	      if (ii < lhs_len && c_lhs.elem(ii) != LT ())
 		new_nzmx--;
 	      if (rhs.elem(rhs_idx[i]) != RT ())
 		new_nzmx++;
 	    }
 
 	  if (nr > 1)
 	    {
-	      Sparse<LT> tmp (max_idx, 1, new_nzmx);
+	      Sparse<LT> tmp ((max_idx > nr ? max_idx : nr), 1, new_nzmx);
 	      tmp.cidx(0) = 0;
 	      tmp.cidx(1) = new_nzmx;
 
 	      octave_idx_type i = 0;
 	      octave_idx_type ii = 0;
 	      if (i < nz)
 		ii = c_lhs.ridx(i);
 
@@ -2201,17 +2201,17 @@ assign1 (Sparse<LT>& lhs, const Sparse<R
 			jj = lhs_idx.elem(j);
 		    }
 		}
 
 	      lhs = tmp;
 	    }
 	  else
 	    {
-	      Sparse<LT> tmp (1, max_idx, new_nzmx);
+	      Sparse<LT> tmp (1, (max_idx > nc ? max_idx : nc), new_nzmx);
 
 	      octave_idx_type i = 0;
 	      octave_idx_type ii = 0;
 	      while (ii < nc && c_lhs.cidx(ii+1) <= i)
 		ii++;
 
 	      octave_idx_type j = 0;
 	      octave_idx_type jj = lhs_idx.elem(j);
@@ -2276,17 +2276,17 @@ assign1 (Sparse<LT>& lhs, const Sparse<R
 
 	      octave_idx_type ii = lhs_idx.elem (i);
 	      if (ii < lhs_len && c_lhs.elem(ii) != LT ())
 		new_nzmx--;
 	    }
 
 	  if (nr > 1)
 	    {
-	      Sparse<LT> tmp (max_idx, 1, new_nzmx);
+	      Sparse<LT> tmp ((max_idx > nr ? max_idx : nr), 1, new_nzmx);
 	      tmp.cidx(0) = 0;
 	      tmp.cidx(1) = new_nzmx;
 
 	      octave_idx_type i = 0;
 	      octave_idx_type ii = 0;
 	      if (i < nz)
 		ii = c_lhs.ridx(i);
 
@@ -2319,17 +2319,17 @@ assign1 (Sparse<LT>& lhs, const Sparse<R
 			jj = lhs_idx.elem(j);
 		    }
 		}
 
 	      lhs = tmp;
 	    }
 	  else
 	    {
-	      Sparse<LT> tmp (1, max_idx, new_nzmx);
+	      Sparse<LT> tmp (1, (max_idx > nc ? max_idx : nc), new_nzmx);
 
 	      octave_idx_type i = 0;
 	      octave_idx_type ii = 0;
 	      while (ii < nc && c_lhs.cidx(ii+1) <= i)
 		ii++;
 
 	      octave_idx_type j = 0;
 	      octave_idx_type jj = lhs_idx.elem(j);
@@ -2485,19 +2485,16 @@ assign (Sparse<LT>& lhs, const Sparse<RT
 	  if (rhs_nr == 0 && rhs_nc == 0)
 	    {
 	      lhs.maybe_delete_elements (idx_i, idx_j);
 	    }
 	  else
 	    {
 	      if (rhs_nr == 1 && rhs_nc == 1 && n >= 0 && m >= 0)
 		{
-		  // No need to do anything if either of the indices
-		  // are empty.
-
 		  if (n > 0 && m > 0)
 		    {
 		      idx_i.sort (true);
 		      idx_j.sort (true);
 
 		      octave_idx_type max_row_idx = idx_i_is_colon ? rhs_nr : 
 			idx_i.max () + 1;
 		      octave_idx_type max_col_idx = idx_j_is_colon ? rhs_nc : 
@@ -2592,16 +2589,41 @@ assign (Sparse<LT>& lhs, const Sparse<RT
 				  stmp.ridx(kk++) = c_lhs.ridx(i);
 				}
 			    }
 			  stmp.cidx(j+1) = kk;
 			}
 		      
 		      lhs = stmp;
 		    }
+		  else
+		    {
+		      // No need to do anything if either of the indices
+		      // are empty.
+		      if (n > 0)
+			{
+			  octave_idx_type max_row_idx = idx_i_is_colon ? 
+			    rhs_nr : idx_i.max () + 1;
+			  octave_idx_type new_nr = max_row_idx > lhs_nr ? 
+			    max_row_idx : lhs_nr;
+			  octave_idx_type new_nc = lhs_nc;
+
+			  lhs = Sparse<LT> (new_nr, new_nc);
+			}
+		      else if (m > 0)
+			{
+			  octave_idx_type max_col_idx = idx_j_is_colon ? 
+			    rhs_nc : idx_j.max () + 1;
+			  octave_idx_type new_nr = lhs_nr;
+			  octave_idx_type new_nc = max_col_idx > lhs_nc ? 
+			    max_col_idx : lhs_nc;
+
+			  lhs = Sparse<LT> (new_nr, new_nc);
+			}
+		    }
 		}
 	      else if (n == rhs_nr && m == rhs_nc)
 		{
 		  if (n > 0 && m > 0)
 		    {
 		      octave_idx_type max_row_idx = idx_i_is_colon ? rhs_nr : 
 			idx_i.max () + 1;
 		      octave_idx_type max_col_idx = idx_j_is_colon ? rhs_nc : 
