# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1518767181 18000
#      Fri Feb 16 02:46:21 2018 -0500
# Node ID 39186eac5a05cd9752a39c353441a4103d4e19bd
# Parent  e574b957b01b44e717a8edb0871cbe5695744f8d
preparing for a brave new future, use templates in some pr-output functions

* pr-output.h, pr-output.cc, pr-flt-fmt.h (class pr_engineering_float,
class pr_formatted_float, class pr_rational_float):
Define as templates.  Adapt all uses.

(union equiv, engineering_exponent, num_digits, rational_approx,
pr_any_float, pr_float, pr_imag_float, pr_complex, pr_scale_header):
Define as templates.

Use 1 and 0 instead of 1.0 and 0.0 to avoid creating double constants
unnecessrily.

diff --git a/libinterp/corefcn/pr-flt-fmt.h b/libinterp/corefcn/pr-flt-fmt.h
--- a/libinterp/corefcn/pr-flt-fmt.h
+++ b/libinterp/corefcn/pr-flt-fmt.h
@@ -23,18 +23,23 @@ along with Octave; see the file COPYING.
 #if ! defined (octave_pr_flt_fmt_h)
 #define octave_pr_flt_fmt_h 1
 
 #include "octave-config.h"
 
 #include <iomanip>
 #include <iosfwd>
 
+template <typename T>
 class pr_engineering_float;
+
+template <typename T>
 class pr_formatted_float;
+
+template <typename T>
 class pr_rational_float;
 
 extern int output_max_field_width (void);
 
 extern int output_precision (void);
 
 extern void set_output_prec_and_fw (int prec, int fw);
 
@@ -100,24 +105,27 @@ public:
 
   float_format& trailing_zeros (bool tz = true)
 
   {
     sp = (tz ? std::ios::showpoint : 0);
     return *this;
   }
 
+  template <typename T>
   friend std::ostream&
-  operator << (std::ostream& os, const pr_engineering_float& pef);
+  operator << (std::ostream& os, const pr_engineering_float<T>& pef);
 
+  template <typename T>
   friend std::ostream&
-  operator << (std::ostream& os, const pr_formatted_float& pff);
+  operator << (std::ostream& os, const pr_formatted_float<T>& pff);
 
+  template <typename T>
   friend std::ostream&
-  operator << (std::ostream& os, const pr_rational_float& prf);
+  operator << (std::ostream& os, const pr_rational_float<T>& prf);
 
   // Field width.  Zero means as wide as necessary.
   int fw;
 
   // Exponent Field width.  Zero means as wide as necessary.
   int ex;
 
   // Precision.
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -129,60 +129,65 @@ calc_scale_exp (const int& x)
 
   // ISO/IEC 14882:2003 : Programming languages -- C++. 5.6.4: ISO,
   // IEC. 2003 . "the binary % operator yields the remainder from the
   // division of the first expression by the second. .... If both
   // operands are nonnegative then the remainder is nonnegative; if not,
   // the sign of the remainder is implementation-defined".
 }
 
+template <typename T>
 static int
-engineering_exponent (double x)
+engineering_exponent (T x)
 {
   int ex = 0;
 
   if (x != 0)
     {
-      double absval = (x < 0.0 ? -x : x);
+      T absval = (x < 0 ? -x : x);
       int logabsval = static_cast<int> (std::floor (log10 (absval)));
 
       // Avoid using modulo function with negative arguments for
       // portability.  See extended comment at calc_scale_exp
 
-      if (logabsval < 0.0)
+      if (logabsval < 0)
         ex = logabsval - 2 + ((-logabsval + 2) % 3);
       else
         ex = logabsval - (logabsval % 3);
     }
 
   return ex;
 }
 
+template <typename T>
 static int
-num_digits (const double& x)
+num_digits (T x)
 {
   return 1 + (print_eng
               ? engineering_exponent (x)
               : static_cast<int> (std::floor (log10 (x))));
 }
 
+template <typename T>
 int
-pr_engineering_float::exponent (void) const
+pr_engineering_float<T>::exponent (void) const
 {
   return engineering_exponent (m_val);
 }
 
-double
-pr_engineering_float::mantissa (void) const
+template <typename T>
+T
+pr_engineering_float<T>::mantissa (void) const
 {
-  return m_val / std::pow (10.0, exponent ());
+  return m_val / std::pow (static_cast<T> (10), exponent ());
 }
 
+template <typename T>
 std::ostream&
-operator << (std::ostream& os, const pr_engineering_float& pef)
+operator << (std::ostream& os, const pr_engineering_float<T>& pef)
 {
   octave::preserve_stream_state stream_state (os);
 
   float_format real_fmt = pef.m_ff;
 
   if (real_fmt.fw >= 0)
     os << std::setw (real_fmt.fw - real_fmt.ex);
 
@@ -203,18 +208,19 @@ operator << (std::ostream& os, const pr_
   else
     os << std::setw (0) << "e+";
 
   os << std::setw (real_fmt.ex - 2) << std::setfill ('0') << ex;
 
   return os;
 }
 
+template <typename T>
 std::ostream&
-operator << (std::ostream& os, const pr_formatted_float& pff)
+operator << (std::ostream& os, const pr_formatted_float<T>& pff)
 {
   octave::preserve_stream_state stream_state (os);
 
   float_format real_fmt = pff.m_ff;
 
   if (real_fmt.fw >= 0)
     os << std::setw (real_fmt.fw);
 
@@ -224,18 +230,19 @@ operator << (std::ostream& os, const pr_
   os.flags (static_cast<std::ios::fmtflags>
             (real_fmt.fmt | real_fmt.up | real_fmt.sp));
 
   os << pff.m_val;
 
   return os;
 }
 
+template <typename T>
 static inline std::string
-rational_approx (double val, int len)
+rational_approx (T val, int len)
 {
   std::string s;
 
   if (len <= 0)
     len = 10;
 
   if (octave::math::isinf (val))
     s = "1/0";
@@ -247,37 +254,37 @@ rational_approx (double val, int len)
     {
       std::ostringstream buf;
       buf.flags (std::ios::fixed);
       buf << std::setprecision (0) << octave::math::round (val);
       s = buf.str ();
     }
   else
     {
-      double lastn = 1.;
-      double lastd = 0.;
-      double n = octave::math::round (val);
-      double d = 1.;
-      double frac = val - n;
+      T lastn = 1;
+      T lastd = 0;
+      T n = octave::math::round (val);
+      T d = 1;
+      T frac = val - n;
       int m = 0;
 
       std::ostringstream buf2;
       buf2.flags (std::ios::fixed);
       buf2 << std::setprecision (0) << static_cast<int> (n);
       s = buf2.str ();
 
-      while (1)
+      while (true)
         {
-          double flip = 1. / frac;
-          double step = octave::math::round (flip);
-          double nextn = n;
-          double nextd = d;
+          T flip = 1 / frac;
+          T step = octave::math::round (flip);
+          T nextn = n;
+          T nextd = d;
 
           // Have we converged to 1/intmax ?
-          if (std::abs (flip) > static_cast<double> (std::numeric_limits<int>::max ()))
+          if (std::abs (flip) > static_cast<T> (std::numeric_limits<int>::max ()))
             {
               lastn = n;
               lastd = d;
               break;
             }
 
           frac = flip - step;
           n = step * n + lastn;
@@ -302,17 +309,17 @@ rational_approx (double val, int len)
 
           if (std::abs (n) > std::numeric_limits<int>::max ()
               || std::abs (d) > std::numeric_limits<int>::max ())
             break;
 
           s = buf.str ();
         }
 
-      if (lastd < 0.)
+      if (lastd < 0)
         {
           // Move sign to the top
           lastd = - lastd;
           lastn = - lastn;
           std::ostringstream buf;
           buf.flags (std::ios::fixed);
           buf << std::setprecision (0) << static_cast<int> (lastn)
               << '/' << static_cast<int> (lastd);
@@ -332,18 +339,19 @@ rational_approx (double val, int len)
 %!assert (rats (123, 2), " *")
 
 %!test
 %! v = 1 / double (intmax);
 %! err = v - str2num (rats(v, 12));
 %! assert (err, 0, 4 * eps);
 */
 
+template <typename T>
 std::ostream&
-operator << (std::ostream& os, const pr_rational_float& prf)
+operator << (std::ostream& os, const pr_rational_float<T>& prf)
 {
   octave::preserve_stream_state stream_state (os);
 
   float_format real_fmt = prf.m_ff;
 
   int fw = (rat_string_len > 0 ? rat_string_len : real_fmt.fw);
   std::string s = rational_approx (prf.m_val, fw);
 
@@ -380,17 +388,17 @@ pr_max_internal (const Matrix& m)
 
         all_inf_or_nan = false;
 
         if (val > result)
           result = val;
       }
 
   if (all_inf_or_nan)
-    result = 0.0;
+    result = 0;
 
   return result;
 }
 
 static double
 pr_min_internal (const Matrix& m)
 {
   octave_idx_type nr = m.rows ();
@@ -409,17 +417,17 @@ pr_min_internal (const Matrix& m)
 
         all_inf_or_nan = false;
 
         if (val < result)
           result = val;
       }
 
   if (all_inf_or_nan)
-    result = 0.0;
+    result = 0;
 
   return result;
 }
 
 // FIXME: it would be nice to share more code among these functions,..
 
 static float_display_format
 make_real_format (int digits, bool inf_or_nan, bool int_only, int& fw)
@@ -521,19 +529,19 @@ make_format (double d, int& fw)
 {
   if (free_format)
     return float_display_format ();
 
   bool inf_or_nan = (octave::math::isinf (d) || octave::math::isnan (d));
 
   bool int_only = (! inf_or_nan && octave::math::x_nint (d) == d);
 
-  double d_abs = (d < 0.0 ? -d : d);
-
-  int digits = (inf_or_nan || d_abs == 0.0) ? 0 : num_digits (d_abs);
+  double d_abs = (d < 0 ? -d : d);
+
+  int digits = (inf_or_nan || d_abs == 0) ? 0 : num_digits (d_abs);
 
   return make_real_format (digits, inf_or_nan, int_only, fw);
 }
 
 static float_display_format
 make_real_matrix_format (int x_max, int x_min, bool inf_or_nan,
                          int int_or_inf_or_nan, int& fw)
 {
@@ -668,22 +676,22 @@ make_format (const Matrix& m, int& fw, d
   bool inf_or_nan = m.any_element_is_inf_or_nan ();
 
   bool int_or_inf_or_nan = m.all_elements_are_int_or_inf_or_nan ();
 
   Matrix m_abs = m.abs ();
   double max_abs = pr_max_internal (m_abs);
   double min_abs = pr_min_internal (m_abs);
 
-  int x_max = (max_abs == 0.0 ? 0 : num_digits (max_abs));
-
-  int x_min = (min_abs == 0.0 ? 0 : num_digits (min_abs));
-
-  scale = (x_max == 0 || int_or_inf_or_nan)
-          ? 1.0 : std::pow (10.0, calc_scale_exp (x_max - 1));
+  int x_max = (max_abs == 0 ? 0 : num_digits (max_abs));
+
+  int x_min = (min_abs == 0 ? 0 : num_digits (min_abs));
+
+  scale = ((x_max == 0 || int_or_inf_or_nan)
+           ? 1 : std::pow (10.0, calc_scale_exp (x_max - 1)));
 
   return make_real_matrix_format (x_max, x_min, inf_or_nan,
                                   int_or_inf_or_nan, fw);
 }
 
 static float_display_format
 make_complex_format (int x_max, int x_min, int r_x, bool inf_or_nan,
                      int int_only, int& r_fw, int& i_fw)
@@ -845,24 +853,24 @@ make_format (const Complex& c, int& r_fw
   double rp = c.real ();
   double ip = c.imag ();
 
   bool inf_or_nan = (octave::math::isinf (c) || octave::math::isnan (c));
 
   bool int_only = (octave::math::x_nint (rp) == rp
                    && octave::math::x_nint (ip) == ip);
 
-  double r_abs = (rp < 0.0 ? -rp : rp);
-  double i_abs = (ip < 0.0 ? -ip : ip);
+  double r_abs = (rp < 0 ? -rp : rp);
+  double i_abs = (ip < 0 ? -ip : ip);
 
   int r_x = (! octave::math::isfinite (rp)
-             || r_abs == 0.0) ? 0 : num_digits (r_abs);
+             || r_abs == 0) ? 0 : num_digits (r_abs);
 
   int i_x = (! octave::math::isfinite (ip)
-             || i_abs == 0.0) ? 0 : num_digits (i_abs);
+             || i_abs == 0) ? 0 : num_digits (i_abs);
 
   int x_max, x_min;
 
   if (r_x > i_x)
     {
       x_max = r_x;
       x_min = i_x;
     }
@@ -1059,29 +1067,29 @@ make_format (const ComplexMatrix& cm, in
   Matrix r_m_abs = rp.abs ();
   double r_max_abs = pr_max_internal (r_m_abs);
   double r_min_abs = pr_min_internal (r_m_abs);
 
   Matrix i_m_abs = ip.abs ();
   double i_max_abs = pr_max_internal (i_m_abs);
   double i_min_abs = pr_min_internal (i_m_abs);
 
-  int r_x_max = (r_max_abs == 0.0 ? 0 : num_digits (r_max_abs));
-
-  int r_x_min = (r_min_abs == 0.0 ? 0 : num_digits (r_min_abs));
-
-  int i_x_max = (i_max_abs == 0.0 ? 0 : num_digits (i_max_abs));
-
-  int i_x_min = (i_min_abs == 0.0 ? 0 : num_digits (i_min_abs));
+  int r_x_max = (r_max_abs == 0 ? 0 : num_digits (r_max_abs));
+
+  int r_x_min = (r_min_abs == 0 ? 0 : num_digits (r_min_abs));
+
+  int i_x_max = (i_max_abs == 0 ? 0 : num_digits (i_max_abs));
+
+  int i_x_min = (i_min_abs == 0 ? 0 : num_digits (i_min_abs));
 
   int x_max = (r_x_max > i_x_max ? r_x_max : i_x_max);
   int x_min = (r_x_min > i_x_min ? r_x_min : i_x_min);
 
-  scale = (x_max == 0 || int_or_inf_or_nan)
-          ? 1.0 : std::pow (10.0, calc_scale_exp (x_max - 1));
+  scale = ((x_max == 0 || int_or_inf_or_nan)
+           ? 1 : std::pow (10.0, calc_scale_exp (x_max - 1)));
 
   return make_complex_matrix_format (x_max, x_min, r_x_max, r_x_min,
                                      inf_or_nan, int_or_inf_or_nan,
                                      r_fw, i_fw);
 }
 
 static float_display_format
 make_range_format (int x_max, int x_min, int all_ints, int& fw)
@@ -1209,33 +1217,34 @@ make_format (const Range& r, int& fw, do
     {
       double tmp = r_max;
       r_max = r_min;
       r_min = tmp;
     }
 
   bool all_ints = r.all_elements_are_ints ();
 
-  double max_abs = (r_max < 0.0 ? -r_max : r_max);
-  double min_abs = (r_min < 0.0 ? -r_min : r_min);
-
-  int x_max = (max_abs == 0.0 ? 0 : num_digits (max_abs));
-
-  int x_min = (min_abs == 0.0 ? 0 : num_digits (min_abs));
-
-  scale = (x_max == 0 || all_ints)
-          ? 1.0 : std::pow (10.0, calc_scale_exp (x_max - 1));
+  double max_abs = (r_max < 0 ? -r_max : r_max);
+  double min_abs = (r_min < 0 ? -r_min : r_min);
+
+  int x_max = (max_abs == 0 ? 0 : num_digits (max_abs));
+
+  int x_min = (min_abs == 0 ? 0 : num_digits (min_abs));
+
+  scale = ((x_max == 0 || all_ints)
+           ? 1 : std::pow (10.0, calc_scale_exp (x_max - 1)));
 
   return make_range_format (x_max, x_min, all_ints, fw);
 }
 
+template <typename T>
 union equiv
 {
-  double d;
-  unsigned char i[sizeof (double)];
+  T val;
+  unsigned char i[sizeof (T)];
 };
 
 #define PRINT_CHAR_BITS(os, c)                  \
   do                                            \
     {                                           \
       unsigned char ctmp = c;                   \
       char stmp[9];                             \
       stmp[0] = (ctmp & 0x80) ? '1' : '0';      \
@@ -1264,155 +1273,161 @@ union equiv
       stmp[5] = (ctmp & 0x20) ? '1' : '0';      \
       stmp[6] = (ctmp & 0x40) ? '1' : '0';      \
       stmp[7] = (ctmp & 0x80) ? '1' : '0';      \
       stmp[8] = '\0';                           \
       os << stmp;                               \
     }                                           \
   while (0)
 
+template <typename T>
 static void
-pr_any_float (std::ostream& os, const float_format& fmt, double d, int fw = 0)
+pr_any_float (std::ostream& os, const float_format& fmt, T val, int fw = 0)
 {
   // Unless explicitly asked for, always print in big-endian format
   // for hex and bit formats.
   //
   //   {bit,hex}_format == 1: print big-endian
   //   {bit,hex}_format == 2: print native
 
   if (hex_format)
     {
       octave::preserve_stream_state stream_state (os);
 
-      equiv tmp;
-      tmp.d = d;
+      equiv<T> tmp;
+      tmp.val = val;
 
       // Unless explicitly asked for, always print in big-endian format.
 
       // FIXME: will bad things happen if we are
       // interrupted before resetting the format flags and fill
       // character?
 
       octave::mach_info::float_format flt_fmt =
         octave::mach_info::native_float_format ();
 
       os.fill ('0');
       os.flags (std::ios::right | std::ios::hex);
 
       if (hex_format > 1
           || flt_fmt == octave::mach_info::flt_fmt_ieee_big_endian)
         {
-          for (size_t i = 0; i < sizeof (double); i++)
+          for (size_t i = 0; i < sizeof (T); i++)
             os << std::setw (2) << static_cast<int> (tmp.i[i]);
         }
       else
         {
-          for (int i = sizeof (double) - 1; i >= 0; i--)
+          for (int i = sizeof (T) - 1; i >= 0; i--)
             os << std::setw (2) << static_cast<int> (tmp.i[i]);
         }
     }
   else if (bit_format)
     {
-      equiv tmp;
-      tmp.d = d;
+      equiv<T> tmp;
+      tmp.val = val;
 
       octave::mach_info::float_format flt_fmt =
         octave::mach_info::native_float_format ();
 
       if (flt_fmt == octave::mach_info::flt_fmt_ieee_big_endian)
         {
-          for (size_t i = 0; i < sizeof (double); i++)
+          for (size_t i = 0; i < sizeof (T); i++)
             PRINT_CHAR_BITS (os, tmp.i[i]);
         }
       else
         {
           if (bit_format > 1)
             {
-              for (size_t i = 0; i < sizeof (double); i++)
+              for (size_t i = 0; i < sizeof (T); i++)
                 PRINT_CHAR_BITS_SWAPPED (os, tmp.i[i]);
             }
           else
             {
-              for (int i = sizeof (double) - 1; i >= 0; i--)
+              for (int i = sizeof (T) - 1; i >= 0; i--)
                 PRINT_CHAR_BITS (os, tmp.i[i]);
             }
         }
     }
-  else if (octave::math::isna (d))
+  else if (octave::math::isna (val))
     {
       octave::preserve_stream_state stream_state (os);
 
       if (fw > 0)
         os << std::setw (fw) << "NA";
       else
         os << "NA";
     }
   else if (rat_format)
-    os << pr_rational_float (fmt, d);
-  else if (octave::math::isinf (d))
+    os << pr_rational_float<T> (fmt, val);
+  else if (octave::math::isinf (val))
     {
       octave::preserve_stream_state stream_state (os);
 
       const char *s;
-      if (d < 0.0)
+      if (val < 0)
         s = "-Inf";
       else
         s = "Inf";
 
       if (fw > 0)
         os << std::setw (fw) << s;
       else
         os << s;
     }
-  else if (octave::math::isnan (d))
+  else if (octave::math::isnan (val))
     {
       octave::preserve_stream_state stream_state (os);
 
       if (fw > 0)
         os << std::setw (fw) << "NaN";
       else
         os << "NaN";
     }
   else if (print_eng)
-    os << pr_engineering_float (fmt, d);
+    os << pr_engineering_float<T> (fmt, val);
   else
-    os << pr_formatted_float (fmt, d);
+    os << pr_formatted_float<T> (fmt, val);
 }
 
+template <typename T>
 static inline void
-pr_float (std::ostream& os, const float_display_format& fmt, double d,
-          int fw = 0, double scale = 1.0)
+pr_float (std::ostream& os, const float_display_format& fmt, T val,
+          int fw = 0, T scale = 1)
 {
-  if (Vfixed_point_format && ! print_g && scale != 1.0)
-    d /= scale;
-
-  pr_any_float (os, fmt.real_format (), d, fw);
+  if (Vfixed_point_format && ! print_g && scale != 1)
+    val /= scale;
+
+  pr_any_float (os, fmt.real_format (), val, fw);
 }
 
+template <typename T>
 static inline void
 pr_imag_float (std::ostream& os, const float_display_format& fmt,
-               double d, int fw = 0)
+               T val, int fw = 0)
 {
-  pr_any_float (os, fmt.imag_format (), d, fw);
+  pr_any_float (os, fmt.imag_format (), val, fw);
 }
 
+template <typename T>
 static void
 pr_complex (std::ostream& os, const float_display_format& fmt,
-            const Complex& c, int r_fw = 0, int i_fw = 0, double scale = 1.0)
+            const std::complex<T>& cval, int r_fw = 0, int i_fw = 0,
+            T scale = 1)
 {
-  Complex tmp
-    = (Vfixed_point_format && ! print_g && scale != 1.0) ? c / scale : c;
-
-  double r = tmp.real ();
+  std::complex<T> tmp
+    = ((Vfixed_point_format && ! print_g && scale != 1)
+       ? cval / scale : cval);
+
+  T r = tmp.real ();
 
   pr_float (os, fmt, r, r_fw);
 
   if (! bank_format)
     {
-      double i = tmp.imag ();
+      T i = tmp.imag ();
       if (! (hex_format || bit_format) && lo_ieee_signbit (i))
         {
           os << " - ";
           i = -i;
           pr_imag_float (os, fmt, i, i_fw);
         }
       else
         {
@@ -1461,20 +1476,21 @@ print_empty_nd_array (std::ostream& os, 
     {
       os << "[]";
 
       if (Vprint_empty_dimensions)
         os << '(' << dims.str () << ')';
     }
 }
 
+template <typename T>
 static void
-pr_scale_header (std::ostream& os, double scale)
+pr_scale_header (std::ostream& os, T scale)
 {
-  if (Vfixed_point_format && ! print_g && scale != 1.0)
+  if (Vfixed_point_format && ! print_g && scale != 1)
     {
       octave::preserve_stream_state stream_state (os);
 
       os << "  "
          << std::setw (8) << std::setprecision (1)
          << std::setiosflags (std::ios::scientific | std::ios::left)
          << scale
          << "*\n";
@@ -1625,17 +1641,17 @@ SPECIALIZE_UABS(long long)
   {                                                                     \
     bool isneg = false;                                                 \
     int digits = 0;                                                     \
                                                                         \
     for (octave_idx_type i = 0; i < nda.numel (); i++)                  \
       {                                                                 \
         int new_digits                                                  \
           = static_cast<int>                                            \
-          (std::floor (log10 (double (abs (nda(i).value ()))) + 1.0));  \
+          (std::floor (log10 (double (abs (nda(i).value ()))) + 1));  \
                                                                         \
         if (new_digits > digits)                                        \
           digits = new_digits;                                          \
                                                                         \
         if (! isneg)                                                    \
           isneg = (abs (nda(i).value ()) != nda(i).value ());           \
       }                                                                 \
                                                                         \
@@ -1688,17 +1704,17 @@ make_format (const FloatComplex& c)
 #define MAKE_INT_SCALAR_FORMAT(TYPE)                                    \
   template <>                                                           \
   float_display_format                                                  \
   make_format (const octave_int<TYPE>& val)                             \
   {                                                                     \
     bool isneg = false;                                                 \
     int digits                                                          \
       = static_cast<int>                                                \
-      (std::floor (log10 (double (abs (val.value ()))) + 1.0));         \
+      (std::floor (log10 (double (abs (val.value ()))) + 1));         \
                                                                         \
     isneg = (abs (val.value ()) != val.value ());                       \
                                                                         \
     return float_display_format (float_format (digits + isneg, 0, 0));  \
   }
 
 MAKE_INT_SCALAR_FORMAT (int8_t)
 MAKE_INT_SCALAR_FORMAT (uint8_t)
@@ -1791,17 +1807,17 @@ octave_print_internal (std::ostream& os,
 
           if (i < nr - 1)
             os << "\n";
         }
     }
   else
     {
       int fw = 0;
-      double scale = 1.0;
+      double scale = 1;
       float_display_format fmt = make_format (m, fw, scale);
       int column_width = fw + 2;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
       if (pr_as_read_syntax)
         max_width -= 4;
       else
@@ -1920,17 +1936,17 @@ octave_print_internal (std::ostream& os,
 
           if (i < nr - 1)
             os << "\n";
         }
     }
   else
     {
       int fw;
-      double scale = 1.0;
+      double scale = 1;
       float_display_format fmt = make_format (Matrix (m.diag ()), fw, scale);
       int column_width = fw + 2;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
       if (pr_as_read_syntax)
         max_width -= 4;
       else
@@ -2134,24 +2150,24 @@ octave_print_internal (std::ostream& os,
 
 template <>
 /* static */ inline void
 pr_plus_format<> (std::ostream& os, const Complex& c)
 {
   double rp = c.real ();
   double ip = c.imag ();
 
-  if (rp == 0.0)
+  if (rp == 0)
     {
-      if (ip == 0.0)
+      if (ip == 0)
         os << ' ';
       else
         os << 'i';
     }
-  else if (ip == 0.0)
+  else if (ip == 0)
     pr_plus_format (os, rp);
   else
     os << 'c';
 }
 
 extern void
 octave_print_internal (std::ostream& os, const float_display_format& fmt,
                        const Complex& c, bool pr_as_read_syntax)
@@ -2191,17 +2207,17 @@ octave_print_internal (std::ostream& os,
 
           if (i < nr - 1)
             os << "\n";
         }
     }
   else
     {
       int r_fw, i_fw;
-      double scale = 1.0;
+      double scale = 1;
       float_display_format fmt = make_format (cm, r_fw, i_fw, scale);
       int column_width = i_fw + r_fw;
       column_width += (rat_format || bank_format || hex_format
                        || bit_format) ? 2 : 7;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
       if (pr_as_read_syntax)
@@ -2322,17 +2338,17 @@ octave_print_internal (std::ostream& os,
 
           if (i < nr - 1)
             os << "\n";
         }
     }
   else
     {
       int r_fw, i_fw;
-      double scale = 1.0;
+      double scale = 1;
       float_display_format fmt
         = make_format (ComplexMatrix (cm.diag ()), r_fw, i_fw, scale);
       int column_width = i_fw + r_fw;
       column_width += (rat_format || bank_format || hex_format
                        || bit_format) ? 2 : 7;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
@@ -2402,17 +2418,17 @@ octave_print_internal (std::ostream& os,
             os << "\n";
 
           pr_scale_header (os, scale);
 
           // kluge.  Get the true width of a number.
           int zero_fw;
           {
             std::ostringstream tmp_oss;
-            pr_complex (tmp_oss, fmt, Complex (0.0), r_fw, i_fw, scale);
+            pr_complex (tmp_oss, fmt, Complex (0), r_fw, i_fw, scale);
             zero_fw = tmp_oss.str ().length ();
           }
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
               octave_idx_type lim = (col + inc < nc ? col + inc : nc);
 
               pr_col_num_header (os, total_width, max_width, lim, col,
@@ -2653,33 +2669,33 @@ octave_print_internal (std::ostream& os,
           double val = base + i * increment;
 
           pr_plus_format (os, val);
         }
     }
   else
     {
       int fw = 0;
-      double scale = 1.0;
+      double scale = 1;
       float_display_format fmt = make_format (r, fw, scale);
 
       if (pr_as_read_syntax)
         {
           if (free_format)
             {
               os << base << " : ";
-              if (increment != 1.0)
+              if (increment != 1)
                 os << increment << " : ";
               os << limit;
             }
           else
             {
               pr_float (os, fmt, base, fw);
               os << " : ";
-              if (increment != 1.0)
+              if (increment != 1)
                 {
                   pr_float (os, fmt, increment, fw);
                   os << " : ";
                 }
               pr_float (os, fmt, limit, fw);
             }
         }
       else
@@ -3205,17 +3221,17 @@ octave_print_internal_template (std::ost
         {
           bool isneg = false;
           int digits = 0;
 
           for (octave_idx_type i = 0; i < dims.numel (); i++)
             {
               int new_digits
                 = static_cast<int>
-                  (std::floor (log10 (double (abs (nda(i).value ()))) + 1.0));
+                  (std::floor (log10 (double (abs (nda(i).value ()))) + 1));
 
               if (new_digits > digits)
                 digits = new_digits;
 
               if (! isneg)
                 isneg = (abs (nda(i).value ()) != nda(i).value ());
             }
 
diff --git a/libinterp/corefcn/pr-output.h b/libinterp/corefcn/pr-output.h
--- a/libinterp/corefcn/pr-output.h
+++ b/libinterp/corefcn/pr-output.h
@@ -514,76 +514,82 @@ octave_print_internal (std::ostream& os,
   octave_print_internal (os, cell, pr_as_read_syntax, extra_indent,
                          pr_as_string);
 }
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const octave_value& ov,
                        bool pr_as_read_syntax = false);
 
+template <typename T>
 class
 pr_engineering_float
 {
 public:
 
   const float_format m_ff;
 
-  double m_val;
+  T m_val;
 
   int exponent (void) const;
 
-  double mantissa (void) const;
+  T mantissa (void) const;
 
-  pr_engineering_float (const float_format& ff, double val)
+  pr_engineering_float (const float_format& ff, T val)
     : m_ff (ff), m_val (val) { }
 
-  pr_engineering_float (const float_display_format& fdf, double val)
+  pr_engineering_float (const float_display_format& fdf, T val)
     : m_ff (fdf.real_format ()), m_val (val) { }
 };
 
+template <typename T>
 class
 pr_formatted_float
 {
 public:
 
   const float_format m_ff;
 
-  double m_val;
+  T m_val;
 
-  pr_formatted_float (const float_format& ff, double val)
+  pr_formatted_float (const float_format& ff, T val)
     : m_ff (ff), m_val (val) { }
 
-  pr_formatted_float (const float_display_format& fdf, double val)
+  pr_formatted_float (const float_display_format& fdf, T val)
     : m_ff (fdf.real_format ()), m_val (val) { }
 };
 
+template <typename T>
 class
 pr_rational_float
 {
 public:
 
   const float_format m_ff;
 
-  double m_val;
+  T m_val;
 
-  pr_rational_float (const float_format& ff, double val)
+  pr_rational_float (const float_format& ff, T val)
     : m_ff (ff), m_val (val) { }
 
-  pr_rational_float (const float_display_format& fdf, double val)
+  pr_rational_float (const float_display_format& fdf, T val)
     : m_ff (fdf.real_format ()), m_val (val) { }
 };
 
+template <typename T>
 extern std::ostream&
-operator << (std::ostream& os, const pr_engineering_float& pef);
+operator << (std::ostream& os, const pr_engineering_float<T>& pef);
 
+template <typename T>
 extern std::ostream&
-operator << (std::ostream& os, const pr_formatted_float& pff);
+operator << (std::ostream& os, const pr_formatted_float<T>& pff);
 
+template <typename T>
 extern std::ostream&
-operator << (std::ostream& os, const pr_rational_float& prf);
+operator << (std::ostream& os, const pr_rational_float<T>& prf);
 
 // TRUE means that the dimensions of empty objects should be printed
 // like this: x = [](2x0).
 extern bool Vprint_empty_dimensions;
 
 // TRUE means don't put empty lines in output
 extern bool Vcompact_format;
 
