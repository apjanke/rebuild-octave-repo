# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1384289219 18000
#      Tue Nov 12 15:46:59 2013 -0500
# Node ID 5c3f22dd0bbbd9a72ab9995d5505dfb74e045970
# Parent  b6d07dd90f3d1b545b6ed06f9c50d6cfd501b7b7
raise SIGINT in octave_interpreter instead of in QTerminal

* QTerminal.h (QTerminal::interrupt_signal): New signal.
(QTerminal::terminal_interrupt): New slot.

* QUnixTerminalImpl.cpp (QUnixTerminalImpl::initialize): Connect
m_terminalView::interrupt_signal to QTerminal::terminal_interrupt.

* TerminalView.h (TerminalView::interrupt_signal): New signal.
* TerminalView.cpp (TerminalView::copyClipboard): Emit
interrupt_signal instead of calling raising SIGINT signal.

* terminal-dock-widget.h, terminal-dock-widget.cc
(terminal_dock_widget::interrupt_signal): New signal.
(terminal_dock_widget::terminal_interrupt): New slot.
(terminal_dock_widget::terminal_dock_widget): Connect
terminal::interrupt_signal to
terminal_dock_widget::terminal_interrupt slot.
(terminal_dock_widget::terminal_interrupt): New function.  Emit
terminal_dock_widget::interrupt_signal.

* QWinTerminalImpl.cpp (QWinTerminalImpl::copyClipboard): Call
terminal_interrupt instead of raising SIGINT signal.

main-window.cc (main_window::construct_octave_qt_link): Connect
command_window::interrupt_signal to
_octave_qt_link::terminal_interrupt slot.

* octave-qt-link.h, octave-qt-link.cc
(octave_qt_link::terminal_interrupt): New slot.

* octave-interpreter.h, octave_interpreter.cc
(octave_interpreter::interrupt): New slot.  Raise SIGINT here.

diff --git a/libgui/qterminal/libqterminal/QTerminal.h b/libgui/qterminal/libqterminal/QTerminal.h
--- a/libgui/qterminal/libqterminal/QTerminal.h
+++ b/libgui/qterminal/libqterminal/QTerminal.h
@@ -80,16 +80,18 @@ public:
 
   virtual void setCursorColor (bool useForegroundColor,
                                const QColor& color) = 0;
 
 signals:
 
   void report_status_message (const QString&);
 
+  void interrupt_signal (void);
+
 public slots:
 
   virtual void copyClipboard (void) = 0;
 
   virtual void pasteClipboard (void) = 0;
 
   virtual void handleCustomContextMenuRequested (const QPoint& at)
   {
@@ -99,16 +101,18 @@ public slots:
     _copy_action->setEnabled (selectedText().length() > 0);
 
     _contextMenu->move (mapToGlobal (at));
     _contextMenu->show ();
   }
 
   void notice_settings (const QSettings *settings);
 
+  void terminal_interrupt (void) { emit interrupt_signal (); }
+
 protected:
 
   QTerminal (QWidget *xparent = 0) : QWidget (xparent)
   {
     setContextMenuPolicy (Qt::CustomContextMenu);
 
     _contextMenu = new QMenu (this);
 
diff --git a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
@@ -41,16 +41,19 @@ void QUnixTerminalImpl::initialize()
     m_terminalView->setTripleClickMode(TerminalView::SelectWholeLine);
     m_terminalView->setTerminalSizeStartup(true);
     m_terminalView->setSize(80, 40);
     m_terminalView->setScrollBarPosition(TerminalView::ScrollBarRight);
 
     connect(m_terminalView, SIGNAL(customContextMenuRequested(QPoint)),
             this, SLOT(handleCustomContextMenuRequested(QPoint)));
 
+    connect (m_terminalView, SIGNAL (interrupt_signal (void)),
+             this, SLOT (terminal_interrupt ()));
+
 #ifdef Q_OS_MAC
     QFont font = QFont("Monaco");
     font.setStyleHint(QFont::TypeWriter);
     font.setPointSize(11);
 #else
     QFont font = QFont("Monospace");
     font.setStyleHint(QFont::TypeWriter);
     font.setPointSize(10);
diff --git a/libgui/qterminal/libqterminal/unix/TerminalView.cpp b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
--- a/libgui/qterminal/libqterminal/unix/TerminalView.cpp
+++ b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
@@ -2269,19 +2269,17 @@ void TerminalView::setSelection(const QS
 void TerminalView::copyClipboard()
 {
   if ( !_screenWindow || !hasFocus())
     return;
 
   QString text = _screenWindow->selectedText(_preserveLineBreaks);
 
   if (text.isEmpty ())
-    {
-      ::raise (SIGINT);
-    }
+    emit interrupt_signal ();
   else
     QApplication::clipboard()->setText(text);
 }
 
 void TerminalView::pasteClipboard()
 {
   if(hasFocus ())
     {
diff --git a/libgui/qterminal/libqterminal/unix/TerminalView.h b/libgui/qterminal/libqterminal/unix/TerminalView.h
--- a/libgui/qterminal/libqterminal/unix/TerminalView.h
+++ b/libgui/qterminal/libqterminal/unix/TerminalView.h
@@ -442,16 +442,18 @@ public slots:
      */
     void setUsesMouse(bool usesMouse);
 
     /** See setUsesMouse() */
     bool usesMouse() const;
 
 signals:
 
+    void interrupt_signal (void);
+
     /**
      * Emitted when the user presses a key whilst the terminal widget has focus.
      */
     void keyPressedSignal(QKeyEvent *e);
 
     /**
      * A mouse event occurred.
      * @param button The mouse button (0 for left button, 1 for middle button, 2 for right button, 3 for release)
diff --git a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
@@ -1513,19 +1513,17 @@ void QWinTerminalImpl::copyClipboard (vo
 {
   if(!hasFocus()) return;
 
   QClipboard *clipboard = QApplication::clipboard ();
 
   QString selection = d->getSelection ();
 
   if (selection.isEmpty ())
-    {
-      ::raise (SIGINT);
-    }
+    terminal_interrupt ();
   else
     {
       clipboard->setText (selection);
 
       emit report_status_message (tr ("copied selection to clipboard"));
     }
 }
 
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -1075,16 +1075,19 @@ main_window::construct_octave_qt_link (v
            this, SLOT (handle_show_doc (const QString &)));
 
   connect (_workspace_model,
            SIGNAL (rename_variable (const QString&, const QString&)),
            this,
            SLOT (handle_rename_variable_request (const QString&,
                                                  const QString&)));
 
+  connect (command_window, SIGNAL (interrupt_signal (void)),
+           _octave_qt_link, SLOT (terminal_interrupt (void)));
+
   _octave_qt_link->execute_interpreter ();
 
   octave_link::connect_link (_octave_qt_link);
 }
 
 void
 main_window::construct_menu_bar (void)
 {
diff --git a/libgui/src/octave-interpreter.cc b/libgui/src/octave-interpreter.cc
--- a/libgui/src/octave-interpreter.cc
+++ b/libgui/src/octave-interpreter.cc
@@ -22,20 +22,28 @@ along with Octave; see the file COPYING.
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <string>
 
+#include <signal.h>
+
 #include "octave.h"
 
 #include "octave-interpreter.h"
 
 void
 octave_interpreter::execute (void)
 {
   octave_initialize_interpreter (octave_cmdline_argc, octave_cmdline_argv,
                                  octave_embedded);
 
   octave_execute_interpreter ();
 }
+
+void
+octave_interpreter::interrupt (void)
+{
+  ::raise (SIGINT);
+}
diff --git a/libgui/src/octave-interpreter.h b/libgui/src/octave-interpreter.h
--- a/libgui/src/octave-interpreter.h
+++ b/libgui/src/octave-interpreter.h
@@ -36,11 +36,13 @@ public:
 
   octave_interpreter (void) : QObject () { }
 
 public slots:
 
   // Initialize and execute the octave interpreter.
 
   void execute (void);
+
+  void interrupt (void);
 };
 
 #endif
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -543,9 +543,13 @@ octave_qt_link::do_show_preferences ()
 }
 
 void
 octave_qt_link::do_show_doc (const std::string& file)
 {
   emit show_doc_signal (QString::fromStdString (file));
 }
 
-
+void
+octave_qt_link::terminal_interrupt (void)
+{
+  command_interpreter->interrupt ();  
+}
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -179,11 +179,15 @@ signals:
                                         int line);
 
   void insert_debugger_pointer_signal (const QString&, int);
   void delete_debugger_pointer_signal (const QString&, int);
 
   void show_preferences_signal (void);
 
   void show_doc_signal (const QString &file);
+
+public slots:
+
+  void terminal_interrupt (void);
 };
 
 #endif
diff --git a/libgui/src/terminal-dock-widget.cc b/libgui/src/terminal-dock-widget.cc
--- a/libgui/src/terminal-dock-widget.cc
+++ b/libgui/src/terminal-dock-widget.cc
@@ -33,16 +33,19 @@ terminal_dock_widget::terminal_dock_widg
   terminal->setObjectName ("OctaveTerminal");
   terminal->setFocusPolicy (Qt::StrongFocus);
 
   setObjectName ("TerminalDockWidget");
   setWindowIcon (QIcon (":/actions/icons/logo.png"));
   set_title (tr ("Command Window"));
 
   setWidget (terminal);
+
+  connect (terminal, SIGNAL (interrupt_signal (void)),
+           this, SLOT (terminal_interrupt ()));
 }
 
 bool
 terminal_dock_widget::has_focus (void) const
 {
   QWidget *w = widget ();
 
   return w->hasFocus ();
@@ -54,8 +57,14 @@ terminal_dock_widget::focus (void)
   octave_dock_widget::focus ();
 
   QWidget *w = widget ();
 
   w->setFocus ();
   w->activateWindow ();
   w->raise ();
 }
+
+void
+terminal_dock_widget::terminal_interrupt (void)
+{
+  emit interrupt_signal ();
+}
diff --git a/libgui/src/terminal-dock-widget.h b/libgui/src/terminal-dock-widget.h
--- a/libgui/src/terminal-dock-widget.h
+++ b/libgui/src/terminal-dock-widget.h
@@ -36,14 +36,22 @@ class terminal_dock_widget : public octa
 public:
 
   terminal_dock_widget (QWidget *parent = 0);
 
   bool has_focus (void) const;
 
   void focus (void);
 
+signals:
+
+  void interrupt_signal (void);
+
+protected slots:
+
+  void terminal_interrupt (void);
+
 private:
 
   QTerminal *terminal;
 };
 
 #endif // TERMINALDOCKWIDGET_H
