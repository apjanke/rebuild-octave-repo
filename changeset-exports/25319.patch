# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1524793162 14400
#      Thu Apr 26 21:39:22 2018 -0400
# Branch stable
# Node ID 56201aad346295bbdbae533cbce262da53886877
# Parent  b328ff3ce0f767e6cb2a00d421184d9e2ddfd13c
avoid crash on exceptions thrown in handle class delete method

* ov-classdef (handle_cdef_object::~handle_cdef_object): Use same
technique as in octave_oncleanup::~octave_oncleanup to avoid crashes
if exceptions are thrown while executing handle class delete method
while inside C++ class destructor.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1783,18 +1783,56 @@ cdef_object_scalar::is_partially_constru
 inline void
 cdef_object_scalar::mark_as_constructed (const cdef_class& cls)
 {
   ctor_list.erase (cls);
 }
 
 handle_cdef_object::~handle_cdef_object (void)
 {
-  // Call classdef "delete()" method on object
-  get_class ().delete_object (get_class ());
+  octave::unwind_protect frame;
+
+  // Clear interrupts.
+  frame.protect_var (octave_interrupt_state);
+  octave_interrupt_state = 0;
+
+  // Disallow quit().
+  frame.protect_var (quit_allowed);
+  quit_allowed = false;
+
+  interpreter_try (frame);
+
+  try
+    {
+      // Call classdef "delete()" method on object
+      get_class ().delete_object (get_class ());
+    }
+  catch (const octave::interrupt_exception&)
+    {
+      octave::interpreter::recover_from_exception ();
+
+      warning ("interrupt occurred in handle class delete method");
+    }
+  catch (const octave::execution_exception&)
+    {
+      std::string msg = last_error_message ();
+      warning ("error caught while executing handle class delete method:\n%s\n",
+               msg.c_str ());
+
+    }
+  catch (const octave::exit_exception&)
+    {
+      // This shouldn't happen since we disabled quit above.
+      warning ("exit disabled while executing handle class delete method");
+    }
+  catch (...) // Yes, the black hole.  We're in a d-tor.
+    {
+      // This shouldn't happen, in theory.
+      warning ("internal error: unhandled exception in handle class delete method");
+    }
 
 #if DEBUG_TRACE
   std::cerr << "deleting " << get_class ().get_name ()
             << " object (handle)" << std::endl;
 #endif
 }
 
 value_cdef_object::~value_cdef_object (void)
