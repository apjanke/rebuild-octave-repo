# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1325191019 18000
#      Thu Dec 29 15:36:59 2011 -0500
# Branch stable
# Node ID 2f742be03f908ea029fab3c79ab53a0dfc68e456
# Parent  c299bb9f0ad043b2f3aa634916d27751ef52dc39
doc: mention how scalar broadcasting is a special case of broadcasting

diff --git a/doc/interpreter/vectorize.txi b/doc/interpreter/vectorize.txi
--- a/doc/interpreter/vectorize.txi
+++ b/doc/interpreter/vectorize.txi
@@ -336,16 +336,21 @@ y - y'
 @end group
 @end example
 
 @noindent
 Here the vectors of size @code{[1 3]} and @code{[3 1]} both get
 broadcast into matrices of size @code{[3 3]} before ordinary matrix
 subtraction takes place.
 
+A special case of broadcasting that may be familiar is when all
+dimensions of the array being broadcast are 1, i.e. the array is a
+scalar. Thus for example, operations like @code{x - 42} and @code{max
+(x, 2)} are basic examples of broadcasting.
+
 For a higher-dimensional example, suppose @code{img} is an RGB image of
 size @code{[m n 3]} and we wish to multiply each color by a different
 scalar.  The following code accomplishes this with broadcasting,
 
 @example
 img .*= permute ([0.8, 0.9, 1.2], [1, 3, 2]);
 @end example
 
@@ -404,25 +409,25 @@ is
 
       +=  -=  .+=  .-=  .*=  ./=  .\=  .^=  .**=  &=  |=
 @end example
 
 Beware of resorting to broadcasting if a simpler operation will suffice.
 For matrices @var{a} and @var{b}, consider the following:
 
 @example
-c = sum (permute (a, [1, 3, 2]) .* permute (b, [3, 2, 1]), 3);
+@var{c} = sum (permute (@var{a}, [1, 3, 2]) .* permute (@var{b}, [3, 2, 1]), 3);
 @end example
 
 @noindent
 This operation broadcasts the two matrices with permuted dimensions
 across each other during elementwise multiplication in order to obtain a
 larger 3-D array, and this array is then summed along the third dimension.
 A moment of thought will prove that this operation is simply the much
-faster ordinary matrix multiplication, @code{c = a*b;}.
+faster ordinary matrix multiplication, @code{@var{c} = @var{a}*@var{b};}.
 
 A note on terminology: ``broadcasting'' is the term popularized by the
 Numpy numerical environment in the Python programming language.  In other
 programming languages and environments, broadcasting may also be known
 as @emph{binary singleton expansion} (BSX, in @sc{matlab}, and the
 origin of the name of the @code{bsxfun} function), @emph{recycling} (R
 programming language), @emph{single-instruction multiple data} (SIMD),
 or @emph{replication}.
@@ -457,16 +462,20 @@ warning ("off", "Octave:broadcast");
 @noindent
 If you want to recover the old behavior and produce an error, turn this
 warning into an error:
 
 @example
 warning ("error", "Octave:broadcast");
 @end example
 
+@noindent
+For broadcasting on scalars that worked in previous versions of Octave,
+this warning will not be emitted.
+
 @node Function Application
 @section Function Application
 @cindex map
 @cindex apply
 @cindex function application
 
 As a general rule, functions should already be written with matrix
 arguments in mind and should consider whole matrix operations in a
@@ -647,17 +656,17 @@ For a vector @code{A}, the following loo
 @example
 @group
 n = length (A);
 B = zeros (n, 2);
 for i = 1:length(A)
   ## this will be two columns, the first is the difference and
   ## the second the mean of the two elements used for the diff.
   B(i,:) = [A(i+1)-A(i), (A(i+1) + A(i))/2)];
-end
+endfor
 @end group
 @end example
 
 @noindent
 can be turned into the following one-liner:
 
 @example
 B = [diff(A)(:), 0.5*(A(1:end-1)+A(2:end))(:)]
