# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1277288509 -7200
#      Wed Jun 23 12:21:49 2010 +0200
# Node ID cb3ed842bd3026ee6da3c0f1cb136ed140d8dfa0
# Parent  604e13a89c7fba2f149f6706f580fd635307ce55
make the new interface more backward compatible

diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -496,23 +496,28 @@ octave_map::reshape (const dim_vector& d
 /*
 %!# test preservation of key order by reshape
 %!test
 %!  x(1,1).d = 10; x(4,6).a = "b"; x(2,4).f = 27;
 %!  assert (fieldnames (reshape (x, 3, 8)), {"d"; "a"; "f"});
 */
 
 void
-octave_map::resize (const dim_vector& dv)
+octave_map::resize (const dim_vector& dv, bool fill)
 {
   octave_idx_type nf = nfields ();
   if (nf > 0)
     {
       for (octave_idx_type i = 0; i < nf; i++)
-        vals[i].resize (dv);
+        {
+          if (fill)
+            vals[i].resize (dv, Cell::resize_fill_value ());
+          else
+            vals[i].resize (dv);
+        }
     }
   else
     {
       // FIXME: Do it with a dummy array, to reuse error message.
       // Need (?) a better solution.
       Array<char> dummy (dimensions);
       dummy.resize (dv);
     }
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -297,28 +297,32 @@ public:
 
   // number of fields.
   octave_idx_type nfields (void) const { return keys.nfields (); }
 
   // check whether a field exists.
   bool isfield (const std::string& name) const 
     { return keys.isfield (name); }
 
+  bool contains (const std::string& name) const 
+    { return isfield (name); }
+
   string_vector fieldnames (void) const
     { return keys.fieldnames (); }
 
   // get contents of a given field. empty value if not exist.
   Cell getfield (const std::string& key) const;
 
   // set contents of a given field. add if not exist. checks for
   // correct dimensions.
   void setfield (const std::string& key, const Cell& val);
 
   // remove a given field. do nothing if not exist.
   void rmfield (const std::string& key);
+  void del (const std::string& key) { rmfield (key); }
 
   // return a copy with fields ordered, optionally along with permutation.
   octave_map orderfields (void) const;
   octave_map orderfields (Array<octave_idx_type>& perm) const;
   octave_map orderfields (const octave_map& other,
                           Array<octave_idx_type>& perm) const;
 
   // aka getfield/setfield, but the latter returns a reference.
@@ -353,33 +357,33 @@ public:
   dim_vector dims (void) const { return dimensions; }
 
   int ndims (void) const { return dimensions.length (); }
 
   octave_map transpose (void) const;
 
   octave_map reshape (const dim_vector& dv) const;
 
-  void resize (const dim_vector& dv);
+  void resize (const dim_vector& dv, bool fill = false);
 
   static octave_map
   cat (int dim, octave_idx_type n, const octave_scalar_map *map_list);
 
   static octave_map
   cat (int dim, octave_idx_type n, const octave_map *map_list);
 
-  octave_map index (const idx_vector& i, bool resize_ok) const;
+  octave_map index (const idx_vector& i, bool resize_ok = false) const;
 
   octave_map index (const idx_vector& i, const idx_vector& j,
-                    bool resize_ok) const;
+                    bool resize_ok = false) const;
 
   octave_map index (const Array<idx_vector>& ia,
-                    bool resize_ok) const;
+                    bool resize_ok = false) const;
 
-  octave_map index (const octave_value_list&, bool resize_ok) const;
+  octave_map index (const octave_value_list&, bool resize_ok = false) const;
   
   void assign (const idx_vector& i, const octave_map& rhs);
 
   void assign (const idx_vector& i, const idx_vector& j, const octave_map& rhs);
 
   void assign (const Array<idx_vector>& ia, const octave_map& rhs);
 
   void assign (const octave_value_list&, const octave_map& rhs);
