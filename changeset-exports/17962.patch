# HG changeset patch
# User John Donoghue <john.donoghue@ieee.org>
# Date 1384917581 18000
#      Tue Nov 19 22:19:41 2013 -0500
# Node ID 4a53bcc1a4aead43a341035b79821ccb2dcfa6fc
# Parent  774409d187943778af927c4c41582bb33a0fdf26
GUI: Add statusbar with line/col indicator to editor window (Bug #40626)

* libgui/src/m-editor/file-editor-tab.h
  (class file_editor_tab): Add _status_bar and row/col_indicator variables, add handle_cursor_moved slot.

* libgui/src/m-editor/file-editor-tab.cc
  (file_editor_tab::file_editor_tab): create statusbar and row / col indicator, connect edit cursorPosChange to handle_cursor_moved.
  (file_editor_tab::handle_cursor_moved): New slot.

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -75,16 +75,35 @@ file_editor_tab::file_editor_tab (const 
   // Connect signal for command execution to a slot of this tab which in turn
   // emits a signal connected to the main window.
   // Direct connection is not possible because tab's parent is null.
   connect (_edit_area,
            SIGNAL (execute_command_in_terminal_signal (const QString&)),
            this,
            SLOT (execute_command_in_terminal (const QString&)));
 
+  connect (_edit_area, 
+           SIGNAL (cursorPositionChanged (int, int)),
+           this,
+           SLOT (handle_cursor_moved (int,int)));
+
+  // create statusbar for row/col indicator
+  _status_bar = new QStatusBar (this);
+
+  _row_indicator = new QLabel ("", this);
+  _row_indicator->setMinimumSize (30,0);
+  QLabel *row_label = new QLabel (tr ("Line:"), this);
+  _col_indicator = new QLabel ("", this);
+  _col_indicator->setMinimumSize (25,0);
+  QLabel *col_label = new QLabel (tr ("Col:"), this);
+  _status_bar->addPermanentWidget (row_label, 0);
+  _status_bar->addPermanentWidget (_row_indicator, 0);
+  _status_bar->addPermanentWidget (col_label, 0);
+  _status_bar->addPermanentWidget (_col_indicator, 0);
+
   // Leave the find dialog box out of memory until requested.
   _find_dialog = 0;
   _find_dialog_is_visible = false;
 
   // symbols
   _edit_area->setMarginType (1, QsciScintilla::SymbolMargin);
   _edit_area->setMarginSensitivity (1, true);
   _edit_area->markerDefine (QsciScintilla::RightTriangle, bookmark);
@@ -116,16 +135,17 @@ file_editor_tab::file_editor_tab (const 
   _edit_area->setUtf8 (true);
 
   // auto completion
   _edit_area->autoCompleteFromAll ();
   _edit_area->setAutoCompletionSource (QsciScintilla::AcsAll);
 
   QVBoxLayout *edit_area_layout = new QVBoxLayout ();
   edit_area_layout->addWidget (_edit_area);
+  edit_area_layout->addWidget (_status_bar);
   edit_area_layout->setMargin (0);
   setLayout (edit_area_layout);
 
   // connect modified signal
   connect (_edit_area, SIGNAL (modificationChanged (bool)),
            this, SLOT (update_window_title (bool)));
 
   connect (_edit_area, SIGNAL (copyAvailable (bool)),
@@ -1449,9 +1469,16 @@ file_editor_tab::center_current_line ()
 
       int first_line = _edit_area->firstVisibleLine ();
       first_line = first_line + (line - first_line - (visible_lines-1)/2);
 
       _edit_area->SendScintilla (2613,first_line); // SCI_SETFIRSTVISIBLELINE
     }
 }
 
+void 
+file_editor_tab::handle_cursor_moved (int line, int col)
+{
+  _row_indicator->setNum (line+1);
+  _col_indicator->setNum (col+1);
+}
+
 #endif
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -24,16 +24,18 @@ along with Octave; see the file COPYING.
 #define octave_file_editor_tab_h 1
 
 #include <QWidget>
 #include <QCloseEvent>
 #include <QFileSystemWatcher>
 #include <QSettings>
 #include <QFileInfo>
 #include <Qsci/qsciapis.h>
+#include <QStatusBar>
+#include <QLabel>
 
 #include "find-dialog.h"
 #include "octave-qscintilla.h"
 
 class file_editor;
 
 class file_editor_tab : public QWidget
 {
@@ -145,16 +147,18 @@ private slots:
   void handle_save_file_as_answer_cancel ();
 
   // When apis preparation has finished and is ready to save
   void save_apis_info ();
 
   // When the numer of lines changes -> adapt width of margin
   void auto_margin_width ();
 
+  void handle_cursor_moved (int line, int col);
+
 private:
 
   enum editor_markers
   {
     bookmark,
     breakpoint,
     debugger_position
   };
@@ -186,16 +190,20 @@ private:
 
   void add_breakpoint_callback (const bp_info& info);
   void remove_breakpoint_callback (const bp_info& info);
   void remove_all_breakpoints_callback (const bp_info& info);
   void center_current_line ();
 
   octave_qscintilla *_edit_area;
 
+  QStatusBar *_status_bar;
+  QLabel *_row_indicator;
+  QLabel *_col_indicator;
+
   QString _file_name;
   QString _file_name_short;
 
   bool _long_title;
   bool _copy_available;
   bool _app_closing;
 
   QFileSystemWatcher _file_system_watcher;
