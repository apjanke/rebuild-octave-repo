# HG changeset patch
# User jwe
# Date 859335180 0
#      Wed Mar 26 00:13:00 1997 +0000
# Node ID 10a8198b17338ef3eb706c7f6835492f71ba270f
# Parent  6655bdca97fb7c5cb6a2e15b66f64b612e3725b0
[project @ 1997-03-26 00:12:41 by jwe]

diff --git a/liboctave/Array-flags.cc b/liboctave/Array-flags.cc
--- a/liboctave/Array-flags.cc
+++ b/liboctave/Array-flags.cc
@@ -27,17 +27,16 @@ Software Foundation, 59 Temple Place - S
 #include "Array.h"
 
 // These have to be defined somewhere, but only once.
 
 #if defined (HEAVYWEIGHT_INDEXING)
 
 int liboctave_dfi_flag = 0;
 int liboctave_pcv_flag = 0;
-int liboctave_pzo_flag = 0;
 int liboctave_rre_flag = 0;
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/Array-flags.h b/liboctave/Array-flags.h
--- a/liboctave/Array-flags.h
+++ b/liboctave/Array-flags.h
@@ -18,17 +18,16 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if defined (OCTAVE_SOURCE)
 extern int liboctave_dfi_flag;
 extern int liboctave_pcv_flag;
-extern int liboctave_pzo_flag;
 extern int liboctave_rre_flag;
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Array-idx.h b/liboctave/Array-idx.h
--- a/liboctave/Array-idx.h
+++ b/liboctave/Array-idx.h
@@ -73,17 +73,17 @@ Array<T>::value (void)
 template <class T>
 Array<T>
 Array<T>::index (idx_vector& idx) const
 {
   Array<T> retval;
 
   int len = length ();
 
-  int n = idx.freeze (len, "vector", liboctave_pzo_flag);
+  int n = idx.freeze (len, "vector");
 
   if (idx)
     {
       if (idx.is_colon_equiv (len))
 	{
 	  retval = *this;
 	}
       else if (n == 0)
@@ -183,18 +183,17 @@ assign (Array<LT>& lhs, const Array<RT>&
 
   idx_vector *tmp = lhs.get_idx ();
 
   idx_vector idx = tmp[0];
 
   int lhs_len = lhs.length ();
   int rhs_len = rhs.length ();
 
-  int n = idx.freeze (lhs_len, "vector", liboctave_pzo_flag,
-		      liboctave_rre_flag);
+  int n = idx.freeze (lhs_len, "vector", liboctave_rre_flag);
 
   if (n != 0)
     {
       if (liboctave_rre_flag && (rhs_len == n || rhs_len == 1))
 	{
 	  int max_idx = idx.max () + 1;
 	  if (max_idx > lhs_len)
 	    lhs.resize (max_idx, 0.0);
diff --git a/liboctave/Array2-idx.h b/liboctave/Array2-idx.h
--- a/liboctave/Array2-idx.h
+++ b/liboctave/Array2-idx.h
@@ -103,17 +103,17 @@ Array2<T>::index (idx_vector& idx) const
 	    retval = Array2<T> (tmp, 1, len);
 	}
     }
   else if (liboctave_dfi_flag)
     {
       // This code is only for indexing matrices.  The vector
       // cases are handled above.
 
-      idx.freeze (nr * nc, "matrix", liboctave_pzo_flag);
+      idx.freeze (nr * nc, "matrix");
 
       if (idx)
 	{
 	  int result_nr = idx.orig_rows ();
 	  int result_nc = idx.orig_columns ();
 
 	  if (idx.is_colon ())
 	    {
@@ -153,18 +153,18 @@ template <class T>
 Array2<T>
 Array2<T>::index (idx_vector& idx_i, idx_vector& idx_j) const
 {
   Array2<T> retval;
 
   int nr = d1;
   int nc = d2;
 
-  int n = idx_i.freeze (nr, "row", liboctave_pzo_flag);
-  int m = idx_j.freeze (nc, "column", liboctave_pzo_flag);
+  int n = idx_i.freeze (nr, "row");
+  int m = idx_j.freeze (nc, "column");
 
   if (idx_i && idx_j)
     {
       if (idx_i.orig_empty () || idx_j.orig_empty ())
 	{
 	  retval.resize (n, m);
 	}
       else if (n == 0)
@@ -372,21 +372,19 @@ assign (Array2<LT>& lhs, const Array2<RT
 
   if (n_idx == 2)
     {
       idx_vector *tmp = lhs.get_idx ();
 
       idx_vector idx_i = tmp[0];
       idx_vector idx_j = tmp[1];
 
-      int n = idx_i.freeze (lhs_nr, "row", liboctave_pzo_flag,
-			    liboctave_rre_flag);
+      int n = idx_i.freeze (lhs_nr, "row", liboctave_rre_flag);
 
-      int m = idx_j.freeze (lhs_nc, "column", liboctave_pzo_flag,
-			    liboctave_rre_flag);
+      int m = idx_j.freeze (lhs_nc, "column", liboctave_rre_flag);
 
       int idx_i_is_colon = idx_i.is_colon ();
       int idx_j_is_colon = idx_j.is_colon ();
 
       if (idx_i_is_colon)
 	n = lhs_nr > 0 ? lhs_nr : rhs_nr;
 
       if (idx_j_is_colon)
@@ -452,18 +450,17 @@ assign (Array2<LT>& lhs, const Array2<RT
       if (lhs_is_empty || (lhs_nr == 1 && lhs_nc == 1))
 	{
 	  idx_vector *tmp = lhs.get_idx ();
 
 	  idx_vector idx = tmp[0];
 
 	  int lhs_len = lhs.length ();
 
-	  int n = idx.freeze (lhs_len, 0, liboctave_pzo_flag,
-			      liboctave_rre_flag);
+	  int n = idx.freeze (lhs_len, 0, liboctave_rre_flag);
 
 	  if (idx)
 	    {
 	      if (rhs_nr == 0 && rhs_nc == 0)
 		{
 		  if (n != 0 && (lhs_nr != 0 || lhs_nc != 0))
 		    {
 		      idx_vector tmp (':');
@@ -537,18 +534,17 @@ assign (Array2<LT>& lhs, const Array2<RT
 	  // idx_vector::freeze() printed an error message for us.
 	}
       else if (lhs_nr == 1)
 	{
 	  idx_vector *tmp = lhs.get_idx ();
 
 	  idx_vector idx = tmp[0];
 
-	  idx.freeze (lhs_nc, "vector", liboctave_pzo_flag,
-		      liboctave_rre_flag);
+	  idx.freeze (lhs_nc, "vector", liboctave_rre_flag);
 
 	  if (idx)
 	    {
 	      if (rhs_nr == 0 && rhs_nc == 0)
 		{
 		  idx_vector tmp (':');
 		  lhs.maybe_delete_elements (tmp, idx);
 		}
@@ -563,18 +559,17 @@ assign (Array2<LT>& lhs, const Array2<RT
 	  // idx_vector::freeze() printed an error message for us.
 	}
       else if (lhs_nc == 1)
 	{
 	  idx_vector *tmp = lhs.get_idx ();
 
 	  idx_vector idx = tmp[0];
 
-	  idx.freeze (lhs_nr, "vector", liboctave_pzo_flag,
-		      liboctave_rre_flag);
+	  idx.freeze (lhs_nr, "vector", liboctave_rre_flag);
 
 	  if (idx)
 	    {
 	      if (rhs_nr == 0 && rhs_nc == 0)
 		{
 		  idx_vector tmp (':');
 		  lhs.maybe_delete_elements (idx, tmp);
 		}
@@ -588,18 +583,17 @@ assign (Array2<LT>& lhs, const Array2<RT
 	    }
 	  // idx_vector::freeze() printed an error message for us.
 	}
       else if (liboctave_dfi_flag)
 	{
 	  idx_vector *tmp = lhs.get_idx ();
 	  idx_vector idx = tmp[0];
 
-	  int len = idx.freeze (lhs_nr * lhs_nc, "matrix",
-				liboctave_pzo_flag);
+	  int len = idx.freeze (lhs_nr * lhs_nc, "matrix");
 
 	  if (idx)
 	    {
 	      if (len == rhs_nr * rhs_nc)
 		{
 		  int k = 0;
 		  for (int j = 0; j < rhs_nc; j++)
 		    {
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,16 @@
 Tue Mar 25 17:37:25 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* idx-vector.h (idx_vector::idx_vector_rep::freeze,
+	idx_vector::freeze): Delete prefer_zero_one arg.
+	* Array-idx.h, Array2-idx.h: Change all callers.
+
+	* Array-flags.h, Array-flags.cc (liboctave_pzo_flag): Delete.
+
 	* mx-op-defs.h: New file for operator definitions.
 	* mx-cdm-cm.h, mx-cdm-cs.h, mx-cdm-dm.h, mx-cdm-m.h, mx-cdm-s.h,
 	mx-cm-cdm.h, mx-cm-dm.h, mx-cm-m.h, mx-cm-s.h, mx-cs-cdm.h,
 	mx-cs-dm.h, mx-cs-m.h, mx-dm-cdm.h, mx-dm-cm.h, mx-dm-cs.h,
 	mx-dm-m.h, mx-dm-s.h, mx-m-cdm.h, mx-m-cm.h, mx-m-cs.h, mx-m-dm.h,
 	mx-s-cdm.h, mx-s-cm.h, mx-s-dm.h, mx-cdm-cm.cc, mx-cdm-cs.cc,
 	mx-cdm-dm.cc, mx-cdm-m.cc, mx-cdm-s.cc, mx-cm-cdm.cc, mx-cm-dm.cc,
 	mx-cm-m.cc, mx-cm-s.cc, mx-cs-cdm.cc, mx-cs-dm.cc, mx-cs-m.cc,
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -547,18 +547,17 @@ ostream&
 IDX_VEC_REP::print (ostream& os) const
 {
   for (int ii = 0; ii < len; ii++)
     os << data[ii] << "\n";
   return os;
 }
 
 int
-IDX_VEC_REP::freeze (int z_len, const char *tag,
-		     int prefer_zero_one, int resize_ok)
+IDX_VEC_REP::freeze (int z_len, const char *tag, int resize_ok)
 {
   if (frozen)
     {
       assert (frozen_at_z_len == z_len);
       return frozen_len;
     }
 
   frozen_len = -1;
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -101,18 +101,17 @@ private:
 
     int orig_rows (void) const { return orig_nr; }
     int orig_columns (void) const { return orig_nc; }
 
     // other stuff
 
     void shorten (int n); // Unsafe.  Avoid at all cost.
 
-    int freeze (int z_len, const char *tag, int prefer_zero_one,
-		int resize_ok);
+    int freeze (int z_len, const char *tag, int resize_ok);
 
     // i/o
 
     ostream& print (ostream& os) const;
 
     int *data;
     int len;
     int num_zeros;
@@ -241,19 +240,18 @@ public:
 	      && (orig_rows () == 0 || orig_columns () == 0));
     }
 
 // Unsafe.  Avoid at all cost.
   void shorten (int n) { rep->shorten (n); }
 
 // i/o
 
-  int freeze (int z_len, const char *tag, int prefer_zero_one = 0,
-	      int resize_ok = 0)
-    { return rep->freeze (z_len, tag, prefer_zero_one, resize_ok); }
+  int freeze (int z_len, const char *tag, int resize_ok = 0)
+    { return rep->freeze (z_len, tag, resize_ok); }
 
   ostream& print (ostream& os) const { return rep->print (os); }
 
   friend ostream& operator << (ostream& os, const idx_vector& a)
     { return a.print (os); }
 
   void maybe_convert_one_zero_to_idx (int z_len)
     { rep->maybe_convert_one_zero_to_idx (z_len); }
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,16 @@
 Tue Mar 25 17:17:17 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* octave.cc (maximum_braindamage): Don't bind prefer_zero_one_indexing.
+	* ov.h: Don't declare Vprefer_zero_one_indexing.
+	* ov.cc: Don't define Vprefer_zero_one_indexing.
+	(prefer_zero_one_indexing): Delete.
+	(symbols_of_value): Delete DEFVAR for prefer_zero_one_indexing.
+
 	* ov.h, ov.cc, ov-base.h, ov-base.cc: Add constructors and
 	extractors for bool and boolMatrix types. 
 	
 	* ov.cc (install_types): Register octave_bool and
 	octave_bool_matrix types.
 
 	* op-cm-cm.cc, op-cm-cs.cc, op-cm-m.cc, op-cm-s.cc, op-cs-cm.cc,
 	op-cs-m.cc, op-m-cm.cc, op-m-cs.cc, op-m-m.cc, op-m-s.cc,
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -378,17 +378,16 @@ maximum_braindamage (void)
   bind_builtin_variable ("default_save_format", "mat-binary");
   bind_builtin_variable ("define_all_return_values", 1.0);
   bind_builtin_variable ("do_fortran_indexing", 1.0);
   bind_builtin_variable ("empty_list_elements_ok", 1.0);
   bind_builtin_variable ("implicit_str_to_num_ok", 1.0);
   bind_builtin_variable ("ok_to_lose_imaginary_part", 1.0);
   bind_builtin_variable ("page_screen_output", 0.0);
   bind_builtin_variable ("prefer_column_vectors", 0.0);
-  bind_builtin_variable ("prefer_zero_one_indexing", 1.0);
   bind_builtin_variable ("print_empty_dimensions", 0.0);
   bind_builtin_variable ("treat_neg_dim_as_zero", 1.0);
   bind_builtin_variable ("warn_function_name_clash", 0.0);
   bind_builtin_variable ("whitespace_in_literal_matrix", "traditional");
 }
 
 // You guessed it.
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -84,22 +84,16 @@ int Vok_to_lose_imaginary_part;
 // If TRUE, create column vectors when doing assignments like:
 //
 //   octave> A(1) = 3; A(2) = 5
 //
 // (for A undefined).  Only matters when resize_on_range_error is also
 // TRUE.
 bool Vprefer_column_vectors;
 
-// If TRUE, prefer logical (zore-one) indexing over normal indexing
-// when there is a conflice.  For example, given a = [2, 3], the
-// expression  a ([1, 1]) would return [2 3] (instead of [2 2], which
-// would be returned if prefer_zero_one_indxing were FALSE).
-bool Vprefer_zero_one_indexing;
-
 // If TRUE, print the name along with the value.
 bool Vprint_answer_id_name;
 
 // Should operations on empty matrices return empty matrices or an
 // error?  A positive value means yes.  A negative value means yes,
 // but print a warning message.  Zero means it should be considered an
 // error.
 int Vpropagate_empty_matrices;
@@ -836,26 +830,16 @@ prefer_column_vectors (void)
     = check_preference ("prefer_column_vectors");
 
   liboctave_pcv_flag = Vprefer_column_vectors;
 
   return 0;
 }
 
 static int
-prefer_zero_one_indexing (void)
-{
-  Vprefer_zero_one_indexing = check_preference ("prefer_zero_one_indexing");
-
-  liboctave_pzo_flag = Vprefer_zero_one_indexing;
-
-  return 0;
-}
-
-static int
 print_answer_id_name (void)
 {
   Vprint_answer_id_name = check_preference ("print_answer_id_name");
 
   return 0;
 }
 
 static int
@@ -912,19 +896,16 @@ symbols_of_value (void)
     "allow implicit string to number conversion");
 
   DEFVAR (ok_to_lose_imaginary_part, "warn", 0, ok_to_lose_imaginary_part,
     "silently convert from complex to real by dropping imaginary part");
 
   DEFVAR (prefer_column_vectors, 1.0, 0, prefer_column_vectors,
     "prefer column/row vectors");
 
-  DEFVAR (prefer_zero_one_indexing, 0.0, 0, prefer_zero_one_indexing,
-    "when there is a conflict, prefer zero-one style indexing");
-
   DEFVAR (print_answer_id_name, 1.0, 0, print_answer_id_name,
     "set output style to print `var_name = ...'");
 
   DEFVAR (propagate_empty_matrices, 1.0, 0, propagate_empty_matrices,
     "operations on empty matrices return an empty matrix, not an error");
 
   DEFVAR (resize_on_range_error, 1.0, 0, resize_on_range_error,
     "enlarge matrices on assignment");
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -445,22 +445,16 @@ extern int Vok_to_lose_imaginary_part;
 // If TRUE, create column vectors when doing assignments like:
 //
 //   octave> A(1) = 3; A(2) = 5
 //
 // (for A undefined).  Only matters when resize_on_range_error is also
 // TRUE.
 extern bool Vprefer_column_vectors;
 
-// If TRUE, prefer logical (zore-one) indexing over normal indexing
-// when there is a conflice.  For example, given a = [2, 3], the
-// expression  a ([1, 1]) would return [2 3] (instead of [2 2], which
-// would be returned if prefer_zero_one_indxing were FALSE).
-extern bool Vprefer_zero_one_indexing;
-
 // If TRUE, print the name along with the value.
 extern bool Vprint_answer_id_name;
 
 // Should operations on empty matrices return empty matrices or an
 // error?  A positive value means yes.  A negative value means yes,
 // but print a warning message.  Zero means it should be considered an
 // error.
 extern int Vpropagate_empty_matrices;
