# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1531504636 14400
#      Fri Jul 13 13:57:16 2018 -0400
# Branch stable
# Node ID 959657cab84643bd29a74c07e6234f3b63237aeb
# Parent  5f63ca41eacbaa02dbb4d5de86f18bf284ab07ef
maint: Strip trailing whitespace from source files.

diff --git a/libinterp/corefcn/dot.cc b/libinterp/corefcn/dot.cc
--- a/libinterp/corefcn/dot.cc
+++ b/libinterp/corefcn/dot.cc
@@ -308,18 +308,18 @@ get_blkmm_dims (const dim_vector& dimx, 
     error ("blkmm: A and B dimensions don't match: (%s) and (%s)",
            dimx.str ().c_str (), dimy.str ().c_str ());
 }
 
 template <typename T>
 T
 do_blkmm (const octave_value& xov, const octave_value& yov)
 {
-  const T x = octave_value_extract<T> (xov); 
-  const T y = octave_value_extract<T> (yov); 
+  const T x = octave_value_extract<T> (xov);
+  const T y = octave_value_extract<T> (yov);
   F77_INT m, n, k, np;
   dim_vector dimz;
 
   get_blkmm_dims (x.dims (), y.dims (), m, n, k, np, dimz);
 
   T z (dimz);
 
   if (n != 0 && m != 0)
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -596,17 +596,17 @@ endfunction
 %! assert (norm (f) < tol);
 %! assert (norm (x - x_opt, Inf) < tol);
 
 %!test <*53991>
 %! A = @(lam) [0 1 0 0; 0 0 1 0; 0 0 0 1; 0 0 -lam^2 0];
 %! C = [1 0 0 0; 0 0 1 0];
 %! B = @(lam) [C*expm(A(lam)*0); C*expm(A(lam)*1)];
 %! detB = @(lam) det (B(lam));
-%! 
+%!
 %! [x, fvec, info] = fsolve (detB, 0);
 %! assert (x == 0);
 %! assert (fvec == -1);
 %! assert (info == -2);
 
 %!test <*53991>
 %! [x, fvec, info] = fsolve (@(x) 5*x, 0);
 %! assert (x == 0);
diff --git a/scripts/optimization/fzero.m b/scripts/optimization/fzero.m
--- a/scripts/optimization/fzero.m
+++ b/scripts/optimization/fzero.m
@@ -149,18 +149,18 @@ function [x, fval, info, output] = fzero
     fb = fun (b);
     nfev += 1;
   else
     ## Try to find a value for b which brackets a zero-crossing
 
     ## For very small values, switch to absolute rather than relative search
     ifelse (abs (a) < .001, aa = sign (a) * 0.1, aa = a);
     ## Search in an ever-widening range around the initial point.
-    for srch = [-.01 +.025 -.05 +.10 -.25 +.50 -1 +2.5 -5 +10 -50 +100 -500 +1000] 
-      b = aa + aa*srch; 
+    for srch = [-.01 +.025 -.05 +.10 -.25 +.50 -1 +2.5 -5 +10 -50 +100 -500 +1000]
+      b = aa + aa*srch;
       fb = fun (b);
       nfev += 1;
       if (sign (fa) * sign (fb) <= 0)
         break;
       endif
     endfor
   endif
 
diff --git a/scripts/plot/draw/patch.m b/scripts/plot/draw/patch.m
--- a/scripts/plot/draw/patch.m
+++ b/scripts/plot/draw/patch.m
@@ -84,17 +84,17 @@ function h = patch (varargin)
   endif
 
   [htmp, failed] = __patch__ (hax, varargin{:});
 
   if (failed)
     print_usage ();
   endif
 
-  ## FIXME: ishold called this way is very slow. 
+  ## FIXME: ishold called this way is very slow.
   if (! ishold (hax))
     ## FIXME: This is a hack to get 'layer' command to work for 2D patches
     ##        Alternative is much more complicated surgery in graphics.cc.
     ##        of get_children_limits() for 'z' axis and 'patch' object type.
     if (isempty (get (htmp, "zdata")))
       set (hax, "zlim", [-1 1]);
     endif
   endif
diff --git a/scripts/plot/draw/surface.m b/scripts/plot/draw/surface.m
--- a/scripts/plot/draw/surface.m
+++ b/scripts/plot/draw/surface.m
@@ -184,17 +184,17 @@ function [h, bad_usage] = __surface__ (a
   if (firststring < nargin)
     other_args = varargin(firststring:end);
   else
     other_args = {};  # make a default surface object.
   endif
   h = __go_surface__ (ax, "xdata", x, "ydata", y, "zdata", z, "cdata", c,
                       other_args{:});
 
-  ## FIXME: ishold called this way is very slow. 
+  ## FIXME: ishold called this way is very slow.
   if (! ishold (ax))
     set (ax, "view", [0, 90]);
   endif
 
 endfunction
 
 
 ## Functional tests for surface() are in surf.m, surfc.m, surfl.m, and pcolor.m
diff --git a/scripts/sparse/pcg.m b/scripts/sparse/pcg.m
--- a/scripts/sparse/pcg.m
+++ b/scripts/sparse/pcg.m
@@ -567,17 +567,17 @@ endfunction
 %! A = zeros (N, N);
 %! for i = 1 : N - 1  # form 1-D Laplacian matrix
 %!   A(i:i+1, i:i+1) = [2 -1; -1 2];
 %! endfor
 %! b = ones (N, 1);
 %! [x, flag, relres, iter, resvec, eigest] = pcg (A, b, [], [], A, [], b);
 %! assert (flag, 0);
 %! assert (norm (b - A*x) / norm (b), 0, 1e-6);
-%! 
+%!
 %! assert (isnan (eigest), isnan ([NaN, NaN]));
 
 %!test
 %! ## pcg detect a non-Hermitian matrix, with a considerable imaginary part.
 %! ## In this example, Matlab does not recognize the wrong type of matrix and
 %! ## makes iterations until it reaches maxit.
 %! N = 10;
 %! A = diag (1:N) + 1e-4*i;
diff --git a/scripts/testfun/speed.m b/scripts/testfun/speed.m
--- a/scripts/testfun/speed.m
+++ b/scripts/testfun/speed.m
@@ -283,17 +283,17 @@ function [__order, __test_n, __tnew, __t
     loglog (__test_n, __tnew*1000, "*-g;execution time;");
     xlabel ("test length");
     ylabel ("best execution time (ms)");
     title ({__f1, ["init: " __init]});
 
   elseif (do_display)
 
     subplot (1, 2, 1);
-    semilogx (__test_n, __tnew./__torig, "-*g", 
+    semilogx (__test_n, __tnew./__torig, "-*g",
               __test_n, __torig./__tnew, "-*r");
     legend ({[strrep(__f1, ";", ".") " / " strrep(__f2, ";", ".")],
              [strrep(__f2, ";", ".") " / " strrep(__f1, ";", ".")]},
             "location", "northwest");
     title ("Speedup Ratio");
     xlabel ("test length");
     ylabel ("speedup ratio");
 
