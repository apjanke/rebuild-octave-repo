# HG changeset patch
# User jwe
# Date 1177052129 0
#      Fri Apr 20 06:55:29 2007 +0000
# Node ID 5a5a09d7deb88790f6027159cf3111a43e0f8383
# Parent  ecc8d30fa28833ebf23b4993fb1ad7697fbee8bf
[project @ 2007-04-20 06:55:29 by jwe]

diff --git a/doc/interpreter/Makefile.in b/doc/interpreter/Makefile.in
--- a/doc/interpreter/Makefile.in
+++ b/doc/interpreter/Makefile.in
@@ -31,21 +31,21 @@ IMAGES_EPS = $(SPARSEIMAGES_EPS)
 IMAGES_PDF = $(SPARSEIMAGES_PDF)
 IMAGES_PNG = $(SPARSEIMAGES_PNG)
 IMAGES_TXT = $(SPARSEIMAGES_TXT)
 
 HTML_IMAGES_PNG = $(addprefix HTML/, $(IMAGES_PNG))
 
 IMAGES = $(IMAGES_EPS) $(IMAGES_PDF) $(IMAGES_PNG) $(IMAGES_TXT)
 
-SUB_SOURCE := arith.txi audio.txi basics.txi bugs.txi \
+SUB_SOURCE := arith.txi audio.txi basics.txi bit.txi bugs.txi \
 	container.txi control.txi cp-idx.txi data.txi \
 	debug.txi diffeq.txi emacs.txi errors.txi eval.txi \
 	expr.txi finance.txi fn-idx.txi func.txi gpl.txi \
-	grammar.txi image.txi install.txi intro.txi io.txi \
+	grammar.txi image.txi install.txi interp.txi intro.txi io.txi \
 	linalg.txi matrix.txi nonlin.txi numbers.txi \
 	op-idx.txi optim.txi package.txi plot.txi poly.txi preface.txi \
 	quad.txi quaternion.txi set.txi signal.txi sparse.txi stats.txi \
 	stmt.txi strings.txi struct.txi system.txi \
 	testfun.txi tips.txi var.txi vr-idx.txi
 
 SOURCES := $(SUB_SOURCE) $(SCRIPT_SOURCES)
 
diff --git a/doc/interpreter/audio.txi b/doc/interpreter/audio.txi
--- a/doc/interpreter/audio.txi
+++ b/doc/interpreter/audio.txi
@@ -45,8 +45,11 @@ these functions will work without modifi
 hardware are welcome.
 
 @DOCSTRING(playaudio)
 
 @DOCSTRING(record)
 
 @DOCSTRING(setaudio)
 
+@DOCSTRING(wavread)
+
+@DOCSTRING(wavwrite)
diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -289,16 +289,20 @@ via the command @kbd{help -i}.  In addit
 individual user-written functions and variables is also available via
 the @kbd{help} command.  This section describes the commands used for
 reading the manual and the documentation strings for user-supplied
 functions and variables.  @xref{Function Files}, for more information
 about how to document the functions you write.
 
 @DOCSTRING(help)
 
+@DOCSTRING(doc)
+
+@DOCSTRING(lookfor)
+
 The help command can give you information about operators, but not the
 comma and semicolons that are used as command separators.  To get help
 for those, you must type @kbd{help comma} or @kbd{help semicolon}.
 
 @DOCSTRING(info_file)
 
 @DOCSTRING(info_program)
 
diff --git a/doc/interpreter/bit.txi b/doc/interpreter/bit.txi
new file mode 100644
--- /dev/null
+++ b/doc/interpreter/bit.txi
@@ -0,0 +1,24 @@
+@c Copyright (C) 2007 John W. Eaton
+@c This is part of the Octave manual.
+@c For copying conditions, see the file gpl.texi.
+
+@node Bit Manipulations
+@chapter Bit Manipulations
+
+Octave provides the following functions for bit twiddling.
+
+@DOCSTRING(bitset)
+
+@DOCSTRING(bitget)
+
+@DOCSTRING(bitcmp)
+
+@DOCSTRING(bitshift)
+
+@DOCSTRING(bitand)
+
+@DOCSTRING(bitor)
+
+@DOCSTRING(bitxor)
+
+@DOCSTRING(bitmax)
diff --git a/doc/interpreter/data.txi b/doc/interpreter/data.txi
--- a/doc/interpreter/data.txi
+++ b/doc/interpreter/data.txi
@@ -131,18 +131,25 @@ in the @file{ov.h}, @file{ops.h}, and re
 @section Object Sizes
 
 The following functions allow you to determine the size of a variable or
 expression.  These functions are defined for all objects.  They return
 @minus{}1 when the operation doesn't make sense.  For example, Octave's
 data structure type doesn't have rows or columns, so the @code{rows} and
 @code{columns} functions return @minus{}1 for structure arguments.
 
+@DOCSTRING(ndims)
+
 @DOCSTRING(columns)
 
 @DOCSTRING(rows)
 
+@DOCSTRING(numel)
+
 @DOCSTRING(length)
 
 @DOCSTRING(size)
 
 @DOCSTRING(isempty)
 
+@DOCSTRING(sizeof)
+
+@DOCSTRING(size_equal)
diff --git a/doc/interpreter/errors.txi b/doc/interpreter/errors.txi
--- a/doc/interpreter/errors.txi
+++ b/doc/interpreter/errors.txi
@@ -11,20 +11,32 @@ when they encounter abnormal conditions,
 messages using the functions described in this chapter.
 
 @DOCSTRING(error)
 
 @DOCSTRING(beep_on_error)
 
 @DOCSTRING(warning)
 
+@DOCSTRING(print_usage)
+
 @DOCSTRING(usage)
 
+@DOCSTRING(lasterror)
+
 @DOCSTRING(lasterr)
 
 @DOCSTRING(lastwarn)
 
+@DOCSTRING(rethrow)
+
+@DOCSTRING(warning_ids)
+
+@DOCSTRING(errno)
+
+@DOCSTRING(errno_list)
+
 The following pair of functions are of limited usefulness, and may be
 removed from future versions of Octave.
 
 @DOCSTRING(perror)
 
 @DOCSTRING(strerror)
diff --git a/doc/interpreter/eval.txi b/doc/interpreter/eval.txi
--- a/doc/interpreter/eval.txi
+++ b/doc/interpreter/eval.txi
@@ -57,8 +57,12 @@ endfunction
 
 Note that this is only meant to be an example of calling user-supplied
 functions and should not be taken too seriously.  In addition to using a
 more robust algorithm, any serious code would check the number and type
 of all the arguments, ensure that the supplied function really was a
 function, etc.  See @xref{Predicates for Numeric Objects}, for example,
 for a list of predicates for numeric objects, and @xref{Status of
 Variables}, for a description of the @code{exist} function.
+
+@DOCSTRING(evalin)
+
+@DOCSTRING(assignin)
diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -148,16 +148,20 @@ for i = 1:n-1
 endfor
 @end group
 @end example
 
 @noindent
 particularly for large matrices because Octave does not have to
 repeatedly resize the result.
 
+@DOCSTRING(sub2ind)
+
+@DOCSTRING(ind2sub)
+
 @node Calling Functions
 @section Calling Functions
 
 A @dfn{function} is a name for a particular calculation.  Because it has
 a name, you can ask for it by name at any point in the program.  For
 example, the function @code{sqrt} computes the square root of a number.
 
 A fixed set of functions are @dfn{built-in}, which means they are
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -20,16 +20,17 @@ like built-in functions.
 * Variable-length Argument Lists::  
 * Variable-length Return Lists::  
 * Returning From a Function::   
 * Default Arguments::   
 * Function Files::              
 * Script Files::                
 * Dynamically Linked Functions::  
 * Function Handles and Inline::
+* Commands::
 * Organization of Functions::   
 @end menu
 
 @node Defining Functions
 @section Defining Functions
 @cindex @code{function} statement
 @cindex @code{endfunction} statement
 
@@ -586,16 +587,24 @@ If you know that your own function files
 running Octave, you can improve performance by setting the variable
 @code{ignore_function_time_stamp} to @code{"all"}, so that Octave will
 ignore the time stamps for all function files.  Setting it to
 @code{"system"} gives the default behavior.  If you set it to anything
 else, Octave will check the time stamps on all function files.
 
 @c FIXME -- note about time stamps on files in NFS environments?
 
+@DOCSTRING(mfilename)
+
+@DOCSTRING(mlock)
+
+@DOCSTRING(munlock)
+
+@DOCSTRING(mislocked)
+
 @DOCSTRING(addpath)
 
 @DOCSTRING(genpath)
 
 @DOCSTRING(rmpath)
 
 @DOCSTRING(savepath)
 
@@ -606,16 +615,22 @@ else, Octave will check the time stamps 
 @DOCSTRING(pathsep)
 
 @DOCSTRING(rehash)
 
 @DOCSTRING(file_in_loadpath)
 
 @DOCSTRING(ignore_function_time_stamp)
 
+@DOCSTRING(autoload)
+
+@DOCSTRING(builtin)
+
+@DOCSTRING(dispatch)
+
 @node Script Files
 @section Script Files
 
 A script file is a file containing (almost) any sequence of Octave
 commands.  It is read and evaluated just as if you had typed each
 command at the Octave prompt, and provides a convenient way to perform a
 sequence of commands that do not logically belong inside a function.
 
@@ -924,16 +939,22 @@ These files use the macro @code{DEFUN_DL
 dynamically loaded if the operating system does not support dynamic
 linking.  To define your own dynamically linked functions you should use
 @code{DEFUN_DLD}.
 
 There is currently no detailed description of all the functions that you
 can call in a built-in function.  For the time being, you will have to
 read the source code for Octave.
 
+@DOCSTRING(mkoctfile)
+
+@DOCSTRING(mex)
+
+@DOCSTRING(mexext)
+
 @node Function Handles and Inline
 @section Function Handles and Inline
 @cindex handle, function handles
 @cindex inline, inline functions
 
 This is a place holder for the description of function handles and
 inline functions.
 
@@ -957,16 +978,31 @@ inline functions.
 @DOCSTRING(inline)
 
 @DOCSTRING(argnames)
 
 @DOCSTRING(formula)
 
 @DOCSTRING(vectorize)
 
+@node Commands
+@section Commands
+
+@DOCSTRING(mark_as_command)
+
+@DOCSTRING(unmark_command)
+
+@DOCSTRING(iscommand)
+
+@DOCSTRING(mark_as_rawcommand)
+
+@DOCSTRING(unmark_rawcommand)
+
+@DOCSTRING(israwcommand)
+
 @node Organization of Functions
 @section Organization of Functions Distributed with Octave
 
 Many of Octave's standard functions are distributed as function files.
 They are loosely organized by topic, in subdirectories of
 @file{@var{octave-home}/lib/octave/@var{version}/m}, to make it easier
 to find them.
 
diff --git a/doc/interpreter/interp.txi b/doc/interpreter/interp.txi
new file mode 100644
--- /dev/null
+++ b/doc/interpreter/interp.txi
@@ -0,0 +1,20 @@
+@c Copyright (C) 2007 John W. Eaton
+@c This is part of the Octave manual.
+@c For copying conditions, see the file gpl.texi.
+
+@node Interpolation
+@chapter Interpolation
+
+Octave provides the following functions for interpolation.
+
+@DOCSTRING(interp1)
+
+@DOCSTRING(interp2)
+
+@DOCSTRING(interpft)
+
+@DOCSTRING(interpn)
+
+@DOCSTRING(bicubic)
+
+@DOCSTRING(lookup)
diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -30,16 +30,18 @@ immediately.
 You can select the program to run as the pager by setting the variable
 @code{PAGER}, and you can turn paging off by setting the value of the
 variable @code{page_screen_output} to 0.
 
 @DOCSTRING(more)
 
 @DOCSTRING(PAGER)
 
+@DOCSTRING(PAGER_FLAGS)
+
 @DOCSTRING(page_screen_output)
 
 @DOCSTRING(page_output_immediately)
 
 @DOCSTRING(fflush)
 
 @c FIXME -- maybe this would be a good place to describe the
 @c following message:
diff --git a/doc/interpreter/numbers.txi b/doc/interpreter/numbers.txi
--- a/doc/interpreter/numbers.txi
+++ b/doc/interpreter/numbers.txi
@@ -60,19 +60,26 @@ parse error:
   3 + 4 i
         ^
 @end group
 @end example
 
 You may also use @samp{j}, @samp{I}, or @samp{J} in place of the
 @samp{i} above.  All four forms are equivalent.
 
+@DOCSTRING(double)
+
+@DOCSTRING(single)
+
+@DOCSTRING(complex)
+
 @menu
 * Matrices::                    
 * Ranges::                      
+* Integer Data Types::
 * Logical Values::              
 * Predicates for Numeric Objects::  
 @end menu
 
 @node Matrices
 @section Matrices
 @cindex matrices
 
@@ -369,19 +376,46 @@ Octave uses floating point arithmetic to
 range.  If it is important to include the endpoints of a range and the
 number of elements is known, you should use the @code{linspace} function
 instead (@pxref{Special Utility Matrices}).
 
 When Octave parses a range expression, it examines the elements of the
 expression to determine whether they are all constants.  If they are, it
 replaces the range expression with a single range constant.
 
+@node Integer Data Types
+@section Integer Data Types
+
+@DOCSTRING(isinteger)
+
+@DOCSTRING(int8)
+
+@DOCSTRING(uint8)
+
+@DOCSTRING(int16)
+
+@DOCSTRING(uint16)
+
+@DOCSTRING(int32)
+
+@DOCSTRING(uint32)
+
+@DOCSTRING(int64)
+
+@DOCSTRING(uint64)
+
+@DOCSTRING(intmax)
+
+@DOCSTRING(intmin)
+
 @node Logical Values
 @section Logical Values
 
+@DOCSTRING(logical)
+
 @DOCSTRING(true)
 
 @DOCSTRING(false)
 
 @node Predicates for Numeric Objects
 @section Predicates for Numeric Objects
 
 @DOCSTRING(isnumeric)
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -135,26 +135,28 @@ It corresponds to GNU Octave version @va
 * Statements::                  Looping and program flow control.
 * Functions and Scripts::       
 * Error Handling::              
 * Debugging::
 * Input and Output::            
 * Plotting::                    
 * Matrix Manipulation::         
 * Arithmetic::                  
+* Bit Manipulations::
 * Linear Algebra::              
 * Nonlinear Equations::         
 * Sparse Matrices::
 * Quadrature::                  
 * Differential Equations::      
 * Optimization::                
 * Statistics::                  
 * Financial Functions::         
 * Sets::                        
 * Polynomial Manipulations::    
+* Interpolation::
 * Control Theory::              
 * Signal Processing::           
 * Image Processing::            
 * Audio Processing::            
 * Quaternions::                 
 * System Utilities::            
 * Packages::            
 * Test and Demo Functions::
@@ -235,16 +237,17 @@ Built-in Data Types
 * Numeric Objects::             
 * String Objects::              
 * Data Structure Objects::      
 
 Numeric Data Types
 
 * Matrices::                    
 * Ranges::                      
+* Integer Data Types::
 * Logical Values::              
 * Predicates for Numeric Objects::  
 
 Matrices
 
 * Empty Matrices::              
 
 Strings
@@ -456,16 +459,18 @@ Image Processing
 * Representing Images::         
 * Plotting on top of Images::   
 * Color Conversion::            
 
 System Utilities
 
 * Timing Utilities::            
 * Filesystem Utilities::        
+* File Archiving Utilities::
+* Networking Utilities::
 * Controlling Subprocesses::    
 * Process ID Information::      
 * Environment Variables::       
 * Current Working Directory::   
 * Password Database Functions::  
 * Group Database Functions::    
 * System Information::          
 
@@ -543,26 +548,28 @@ Grammar
 @include stmt.texi
 @include func.texi
 @include errors.texi
 @include debug.texi
 @include io.texi
 @include plot.texi
 @include matrix.texi
 @include arith.texi
+@include bit.texi
 @include linalg.texi
 @include nonlin.texi
 @include sparse.texi
 @include quad.texi
 @include diffeq.texi
 @include optim.texi
 @include stats.texi
 @include finance.texi
 @include set.texi
 @include poly.texi
+@include interp.texi
 @include control.texi
 @include signal.texi
 @include image.texi
 @include audio.texi
 @include quaternion.texi
 @include system.texi
 @include package.texi
 
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -108,16 +108,18 @@ The @sc{Matlab}-style two-dimensional pl
 @DOCSTRING(clf)
 
 @DOCSTRING(delete)
 
 @DOCSTRING(close)
 
 @DOCSTRING(closereq)
 
+@DOCSTRING(isfigure)
+
 @node Plot Annotations
 @section Plot Annotations
 
 @DOCSTRING(title)
 
 @DOCSTRING(legend)
 
 @DOCSTRING(text)
diff --git a/doc/interpreter/poly.txi b/doc/interpreter/poly.txi
--- a/doc/interpreter/poly.txi
+++ b/doc/interpreter/poly.txi
@@ -38,16 +38,18 @@ p(x) = @var{c}(1) x^@var{N} + ... + @var
 @end ifinfo
 
 @DOCSTRING(compan)
 
 @DOCSTRING(conv)
 
 @DOCSTRING(deconv)
 
+@DOCSTRING(conv2)
+
 @DOCSTRING(poly)
 
 @DOCSTRING(polyderiv)
 
 @DOCSTRING(polyder)
 
 @DOCSTRING(polyfit)
 
diff --git a/doc/interpreter/signal.txi b/doc/interpreter/signal.txi
--- a/doc/interpreter/signal.txi
+++ b/doc/interpreter/signal.txi
@@ -4,32 +4,36 @@
 
 @node Signal Processing
 @chapter Signal Processing
 
 @DOCSTRING(detrend)
 
 @DOCSTRING(fft)
 
+@DOCSTRING(fftw)
+
 @DOCSTRING(ifft)
 
 @DOCSTRING(fft2)
 
 @DOCSTRING(ifft2)
 
 @DOCSTRING(fftn)
 
 @DOCSTRING(ifftn)
 
 @DOCSTRING(fftconv)
 
 @DOCSTRING(fftfilt)
 
 @DOCSTRING(filter)
 
+@DOCSTRING(filter2)
+
 @DOCSTRING(freqz)
 
 @DOCSTRING(freqz_plot)
 
 @DOCSTRING(sinc)
 
 @DOCSTRING(unwrap)
 
@@ -54,24 +58,28 @@
 @DOCSTRING(blackman)
 
 @DOCSTRING(diffpara)
 
 @DOCSTRING(durbinlevinson)
 
 @DOCSTRING(fftshift)
 
+@DOCSTRING(ifftshift)
+
 @DOCSTRING(fractdiff)
 
 @DOCSTRING(hamming)
 
 @DOCSTRING(hanning)
 
 @DOCSTRING(hurst)
 
+@DOCSTRING(pchip)
+
 @DOCSTRING(periodogram)
 
 @DOCSTRING(rectangle_lw)
 
 @DOCSTRING(rectangle_sw)
 
 @DOCSTRING(sinetone)
 
diff --git a/doc/interpreter/strings.txi b/doc/interpreter/strings.txi
--- a/doc/interpreter/strings.txi
+++ b/doc/interpreter/strings.txi
@@ -179,16 +179,18 @@ Data Types}, for more information about 
 @DOCSTRING(strrep)
 
 @DOCSTRING(substr)
 
 @DOCSTRING(regexp)
 
 @DOCSTRING(regexpi)
 
+@DOCSTRING(regexprep)
+
 @node String Conversions
 @section String Conversions
 
 @DOCSTRING(bin2dec)
 
 @DOCSTRING(dec2bin)
 
 @DOCSTRING(dec2hex)
@@ -238,16 +240,18 @@ isalpha ("!Q@@WERT^Y&")
 @DOCSTRING(isascii)
 
 @DOCSTRING(iscntrl)
 
 @DOCSTRING(isdigit)
 
 @DOCSTRING(isgraph)
 
+@DOCSTRING(isletter)
+
 @DOCSTRING(islower)
 
 @DOCSTRING(isprint)
 
 @DOCSTRING(ispunct)
 
 @DOCSTRING(isspace)
 
diff --git a/doc/interpreter/system.txi b/doc/interpreter/system.txi
--- a/doc/interpreter/system.txi
+++ b/doc/interpreter/system.txi
@@ -9,16 +9,18 @@ This chapter describes the functions tha
 get information about what is happening outside of Octave, while it is
 still running, and use this information in your program.  For example,
 you can get information about environment variables, the current time,
 and even start other programs from the Octave prompt.
 
 @menu
 * Timing Utilities::            
 * Filesystem Utilities::        
+* File Archiving Utilities::
+* Networking Utilities::
 * Controlling Subprocesses::    
 * Process ID Information::      
 * Environment Variables::       
 * Current Working Directory::   
 * Password Database Functions::  
 * Group Database Functions::    
 * System Information::          
 @end menu
@@ -148,39 +150,93 @@ about the status of files.
 @DOCSTRING(rmdir)
 
 @DOCSTRING(mkfifo)
 
 @DOCSTRING(umask)
 
 @DOCSTRING(stat)
 
+@DOCSTRING(lstat)
+
+@DOCSTRING(fileattrib)
+
+@DOCSTRING(isdir)
+
 @DOCSTRING(glob)
 
 @DOCSTRING(fnmatch)
 
 @DOCSTRING(file_in_path)
 
 @DOCSTRING(tilde_expand)
 
+@DOCSTRING(canonicalize_file_name)
+
+@DOCSTRING(movefile)
+
+@DOCSTRING(copyfile)
+
+@DOCSTRING(fileparts)
+
+@DOCSTRING(filesep)
+
+@DOCSTRING(fullfile)
+
+@DOCSTRING(tempdir)
+
+@DOCSTRING(tempname)
+
+@DOCSTRING(P_tmpdir)
+
+@node File Archiving Utilities
+@section File Archiving Utilities
+
+@DOCSTRING(bunzip2)
+
+@DOCSTRING(gunzip)
+
+@DOCSTRING(tar)
+
+@DOCSTRING(untar)
+
+@DOCSTRING(zip)
+
+@DOCSTRING(unzip)
+
+@DOCSTRING(pack)
+
+@DOCSTRING(unpack)
+
+@node Networking Utilities
+@section Networking Utilities
+
+@DOCSTRING(urlread)
+
+@DOCSTRING(urlwrite)
+
 @node Controlling Subprocesses
 @section Controlling Subprocesses
 
 Octave includes some high-level commands like @code{system} and
 @code{popen} for starting subprocesses.  If you want to run another
 program to perform some task and then look at its output, you will
 probably want to use these functions.
 
 Octave also provides several very low-level Unix-like functions which
 can also be used for starting subprocesses, but you should probably only
 use them if you can't find any way to do what you need with the
 higher-level functions.
 
 @DOCSTRING(system)
 
+@DOCSTRING(unix)
+
+@DOCSTRING(dos)
+
 @DOCSTRING(popen)
 
 @DOCSTRING(pclose)
 
 @DOCSTRING(popen2)
 
 @DOCSTRING(EXEC_PATH)
 
@@ -195,16 +251,20 @@ they can be used, look at the definition
 @DOCSTRING(pipe)
 
 @DOCSTRING(dup2)
 
 @DOCSTRING(waitpid)
 
 @DOCSTRING(fcntl)
 
+@DOCSTRING(kill)
+
+@DOCSTRING(SIG)
+
 @node Process ID Information
 @section Process, Group, and User IDs
 
 @DOCSTRING(getpgrp)
 
 @DOCSTRING(getpid)
 
 @DOCSTRING(getppid)
@@ -226,16 +286,20 @@ they can be used, look at the definition
 
 @node Current Working Directory
 @section Current Working Directory
 
 @DOCSTRING(cd)
 
 @DOCSTRING(ls)
 
+@DOCSTRING(ls_command)
+
+@DOCSTRING(dir)
+
 @DOCSTRING(pwd)
 
 @node Password Database Functions
 @section Password Database Functions
 
 Octave's password database functions return information in a structure
 with the following fields.
 
@@ -308,15 +372,21 @@ referred to as a @var{grp_struct}.
 
 @DOCSTRING(endgrent)
 
 @node System Information
 @section System Information
 
 @DOCSTRING(computer)
 
+@DOCSTRING(uname)
+
+@DOCSTRING(ispc)
+
+@DOCSTRING(isunix)
+
 @DOCSTRING(isieee)
 
 @DOCSTRING(OCTAVE_VERSION)
 
 @DOCSTRING(octave_config_info)
 
 @DOCSTRING(getrusage)
diff --git a/scripts/audio/wavread.m b/scripts/audio/wavread.m
--- a/scripts/audio/wavread.m
+++ b/scripts/audio/wavread.m
@@ -25,17 +25,17 @@
 ##
 ## @deftypefnx {Function File} {[@var{y}, @var{Fs}, @var{bits}] =} wavread (@var{filename})
 ## Additionally return the sample rate (@var{fs}) in Hz and the number of bits 
 ## per sample (@var{bits}).
 ##
 ## @deftypefnx {Function File} {[@dots{}] =} wavread (@var{filename}, @var{n})
 ## Read only the first @var{n} samples from each channel.
 ##
-## @deftypefnx {Function File} {[@dots{}] =} wavread(@var{filename},[@var{n1} @var{n2}])
+## @deftypefnx {Function File} {[@dots{}] =} wavread (@var{filename},[@var{n1} @var{n2}])
 ## Read only samples @var{n1} through @var{n2} from each channel.
 ##
 ## @deftypefnx {Function File} {[@var{samples}, @var{channels}] =} wavread (@var{filename}, "size")
 ## Return the number of samples (@var{n}) and channels (@var{ch})
 ## instead of the audio data.
 ## @seealso{wavwrite}
 ## @end deftypefn
 
diff --git a/scripts/signal/filter2.m b/scripts/signal/filter2.m
--- a/scripts/signal/filter2.m
+++ b/scripts/signal/filter2.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{y} =} filter2 (@var{b, @var{x}})
-## @deftypefnx {Function File} {@var{y} =} filter2 (@var{b, @var{x}}, @var{shape})
+## @deftypefnx {Function File} {@var{y} =} filter2 (@var{b}, @var{x}, @var{shape})
 ## Apply the 2-D FIR filter @var{b} to @var{x}. If the argument
 ## @var{shape} is specified, return an array of the desired shape.
 ## Possible values are: 
 ##
 ## @table @asis
 ## @item 'full'
 ## pad @var{x} with zeros on all sides before filtering.
 ## @item 'same'
diff --git a/src/DLD-FUNCTIONS/__pchip_deriv__.cc b/src/DLD-FUNCTIONS/__pchip_deriv__.cc
--- a/src/DLD-FUNCTIONS/__pchip_deriv__.cc
+++ b/src/DLD-FUNCTIONS/__pchip_deriv__.cc
@@ -35,17 +35,17 @@ 02110-1301, USA.
 extern "C"
 {
   F77_RET_T
   F77_FUNC (dpchim, DPCHIM) (const octave_idx_type& n, double *x, double *f,
 			     double *d, const octave_idx_type &incfd,
 			     octave_idx_type *ierr);
 }
 
-DEFUN_DLD(__pchip_deriv__, args, ,
+DEFUN_DLD (__pchip_deriv__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __pchip_deriv__ (@var{x}, @var{y})\n\
 Wrapper for SLATEC/PCHIP function DPCHIM to calculate the derivates for\n\
 piecewise polynomials.  You should be using @code{pchip} function instead.\n\
 @end deftypefn")
 {
   octave_value retval;
   const int nargin = args.length ();
diff --git a/src/DLD-FUNCTIONS/regexp.cc b/src/DLD-FUNCTIONS/regexp.cc
--- a/src/DLD-FUNCTIONS/regexp.cc
+++ b/src/DLD-FUNCTIONS/regexp.cc
@@ -1020,17 +1020,17 @@ The pattern is taken literally.\n\
 
 %!assert(regexp({'asdfg-dfd';'-dfd-dfd-';'qasfdfdaq'},'-'),{6;[1,5,9];zeros(1,0)})
 %!assert(regexp({'asdfg-dfd','-dfd-dfd-','qasfdfdaq'},'-'),{6,[1,5,9],zeros(1,0)})
 %!assert(regexp({'asdfg-dfd';'-dfd-dfd-';'qasfdfdaq'},{'-';'f';'q'}),{6;[3,7];[1,9]})
 %!assert(regexp('Strings',{'t','s'}),{2,7})
 
 */
 
-DEFUN_DLD(regexpi, args, nargout,
+DEFUN_DLD (regexpi, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{s}, @var{e}, @var{te}, @var{m}, @var{t}, @var{nm}] =} regexpi (@var{str}, @var{pat})\n\
 @deftypefnx {Loadable Function} {[@dots{}] =} regexpi (@var{str}, @var{pat}, @var{opts}, @dots{})\n\
 \n\
 Case insensitive regular expression string matching. Matches @var{pat} in\n\
 @var{str} and returns the position and matching substrings or empty values\n\
 if there are none. See @code{regexp} for more details\n\
 @end deftypefn")
@@ -1383,19 +1383,19 @@ octregexprep (const octave_value_list &a
 	}
       rep.append(&buffer[from],buffer.size()-from);
     }
   
   retval = rep;
   return retval;
 }
 
-DEFUN_DLD(regexprep, args, ,
+DEFUN_DLD (regexprep, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Function File}  {@var{string} =} regexprep(@var{string}, @var{pat}, @var{repstr}, @var{options})\n\
+@deftypefn {Function File}  {@var{string} =} regexprep (@var{string}, @var{pat}, @var{repstr}, @var{options})\n\
 Replace matches of @var{pat} in  @var{string} with @var{repstr}.\n\
 \n\
 \n\
 The replacement can contain @code{$i}, which subsubstitutes\n\
 for the ith set of parentheses in the match string.  E.g.,\n\
 @example\n\
 \n\
    regexprep(\"Bill Dunn\",'(\\w+) (\\w+)','$2, $1')\n\
diff --git a/src/DLD-FUNCTIONS/urlwrite.cc b/src/DLD-FUNCTIONS/urlwrite.cc
--- a/src/DLD-FUNCTIONS/urlwrite.cc
+++ b/src/DLD-FUNCTIONS/urlwrite.cc
@@ -322,19 +322,19 @@ urlwrite ('http://www.google.com/search'
   retval(0) = "";
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (urlread, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {@var{s} =} urlread(@var{url})\n\
+@deftypefn {Loadable Function} {@var{s} =} urlread (@var{url})\n\
 @deftypefnx {Loadable Function} {[@var{s}, @var{success}] =} urlread (@var{url})\n\
-@deftypefnx {Loadable Function} {[@var{s}, @var{success}, @var{message}] =} urlread(@var{url})\n\
+@deftypefnx {Loadable Function} {[@var{s}, @var{success}, @var{message}] =} urlread (@var{url})\n\
 @deftypefnx {Loadable Function} {[@dots{}] =} urlread (@var{url}, @var{method}, @var{param})\n\
 Download a remote file specified by its @var{URL} and return its content\n\
 in string @var{s}.  For example,\n\
 \n\
 @example\n\
 s = urlread ('ftp://ftp.octave.org/pub/octave/README');\n\
 @end example\n\
 \n\
