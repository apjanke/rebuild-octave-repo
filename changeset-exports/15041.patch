# HG changeset patch
# User Jacob Dawid <jacob.dawid@gmail.com>
# Date 1343481477 -7200
#      Sat Jul 28 15:17:57 2012 +0200
# Branch gui
# Node ID 7c14e3e6fc6b61a3cfecfea41b15c9e2820569a9
# Parent  de3a318128f2defc46f60a82b093eb6317a05601
Update qterminal thanks to Jen. Removed performance information on events.

* main-window.cc: Removed timer updating performance information.
* main-window.h: Removed timer.
* octave-link.cc: Removed code that collects performance information.
* octave-link.h: Removed performance information struct.

diff --git a/.hgsubstate b/.hgsubstate
--- a/.hgsubstate
+++ b/.hgsubstate
@@ -1,2 +1,2 @@
 33f823397dbb0edb57503f2f6dad2362456bc6a9 gnulib
-186cf3960cfa0c2752b77eba18af24cd0853c12a gui/qterminal
+f91e00f96bc29f7f6395f08c828e09599f945511 gui/qterminal
diff --git a/gui/src/main-window.cc b/gui/src/main-window.cc
--- a/gui/src/main-window.cc
+++ b/gui/src/main-window.cc
@@ -363,35 +363,16 @@ main_window::debug_step_out ()
 void
 main_window::debug_quit ()
 {
   octave_link::instance ()
       ->post_event (new octave_debug_quit_event (*this));
 }
 
 void
-main_window::update_performance_information ()
-{
-  octave_link::performance_information p
-      = octave_link::instance ()->get_performance_information ();
-
-  int generate_events_msec
-    = (p.generate_events_stop - p.generate_events_start) * 1000 / CLOCKS_PER_SEC;
-
-  int process_events_msec
-    = (p.process_events_stop - p.process_events_start) * 1000 / CLOCKS_PER_SEC;
-
-  _status_bar->showMessage
-      (QString ("CPU time of the GUI in octave thread - generating rx events: ~%1 ms - processing tx events: ~%2 ms (%3 events)")
-       .arg (generate_events_msec)
-       .arg (process_events_msec)
-       .arg (p.event_queue_size));
-}
-
-void
 main_window::show_about_octave ()
 {
   QString message =
       "GNU Octave\n"
       "Copyright (C) 2009 John W. Eaton and others.\n"
       "This is free software; see the source code for copying conditions."
       "There is ABSOLUTELY NO WARRANTY; not even for MERCHANTABILITY or"
       "FITNESS FOR A PARTICULAR PURPOSE.  For details, type `warranty'.\n"
@@ -798,16 +779,10 @@ main_window::construct ()
            SIGNAL (entered_debug_mode_signal ()),
            this,
            SLOT(handle_entered_debug_mode ()));
 
   connect (_octave_qt_event_listener,
            SIGNAL (quit_debug_mode_signal ()),
            this,
            SLOT (handle_quit_debug_mode ()));
-
-  _update_performance_information_timer.setInterval (500);
-  _update_performance_information_timer.setSingleShot (false);
-  connect (&_update_performance_information_timer, SIGNAL (timeout ()),
-           this, SLOT (update_performance_information ()));
-  _update_performance_information_timer.start ();
 }
 
diff --git a/gui/src/main-window.h b/gui/src/main-window.h
--- a/gui/src/main-window.h
+++ b/gui/src/main-window.h
@@ -25,17 +25,16 @@
 #include <QMdiArea>
 #include <QStatusBar>
 #include <QToolBar>
 #include <QQueue>
 #include <QMdiSubWindow>
 #include <QCloseEvent>
 #include <QToolButton>
 #include <QComboBox>
-#include <QTimer>
 
 // Editor includes
 #include "file-editor-interface.h"
 
 // QTerminal includes
 #include "QTerminal.h"
 
 // Own includes
@@ -103,31 +102,28 @@ public slots:
   void handle_entered_debug_mode ();
   void handle_quit_debug_mode ();
   void debug_continue ();
   void debug_step_into ();
   void debug_step_over ();
   void debug_step_out ();
   void debug_quit ();
 
-  void update_performance_information ();
-
 protected:
   void closeEvent (QCloseEvent * closeEvent);
   void read_settings ();
   void write_settings ();
 
 private:
   void construct ();
   void establish_octave_link ();
 
   QTerminal *               _terminal;
   file_editor_interface *   _file_editor;
   QMenu *                   _debug_menu;
-  QTimer                    _update_performance_information_timer;
 
   QAction *                 _debug_continue;
   QAction *                 _debug_step_into;
   QAction *                 _debug_step_over;
   QAction *                 _debug_step_out;
   QAction *                 _debug_quit;
 
   // Dock widgets.
diff --git a/gui/src/octave-adapter/octave-link.cc b/gui/src/octave-adapter/octave-link.cc
--- a/gui/src/octave-adapter/octave-link.cc
+++ b/gui/src/octave-adapter/octave-link.cc
@@ -33,17 +33,16 @@ void octave_exit_hook (int status)
   octave_link::instance ()->about_to_exit ();
 }
 
 octave_link octave_link::_singleton;
 
 octave_link::octave_link ()
 {
   _event_queue_mutex = new octave_mutex ();
-  _performance_information_mutex = new octave_mutex ();
   _last_working_directory = "";
   _debugging_mode_active = false;
 }
 
 octave_link::~octave_link ()
 {
 }
 
@@ -61,17 +60,16 @@ octave_link::launch_octave ()
 
 void
 octave_link::register_event_listener (octave_event_listener *oel)
 { _octave_event_listener = oel; }
 
 void
 octave_link::generate_events ()
 {
-  _next_performance_information.generate_events_start = clock ();
   std::string current_working_directory = octave_env::get_current_directory ();
   if (current_working_directory != _last_working_directory)
     {
       _last_working_directory = current_working_directory;
       if (_octave_event_listener)
         _octave_event_listener
             ->current_directory_has_changed (_last_working_directory);
     }
@@ -82,37 +80,33 @@ octave_link::generate_events ()
       if (_octave_event_listener)
         {
           if (_debugging_mode_active)
             _octave_event_listener->entered_debug_mode ();
           else
             _octave_event_listener->quit_debug_mode ();
         }
     }
-  _next_performance_information.generate_events_stop = clock ();
 }
 
 void
 octave_link::process_events ()
 {
-  _next_performance_information.process_events_start = clock ();
   _event_queue_mutex->lock ();
-  _next_performance_information.event_queue_size = _event_queue.size ();
 
   while (_event_queue.size () > 0)
     {
       octave_event * e = _event_queue.front ();
       _event_queue.pop ();
       if (e->perform ())
         e->accept ();
       else
         e->reject ();
     }
   _event_queue_mutex->unlock ();
-  _next_performance_information.process_events_stop = clock ();
 }
 
 void
 octave_link::post_event (octave_event *e)
 {
   if (e)
     {
       _event_queue_mutex->lock ();
@@ -144,28 +138,15 @@ octave_link::about_to_exit ()
 
 void
 octave_link::entered_readline_hook ()
 { }
 
 void
 octave_link::finished_readline_hook ()
 {
-  _performance_information_mutex->lock ();
-  _performance_information = _next_performance_information;
-  _performance_information_mutex->unlock ();
-}
-
-octave_link::performance_information
-octave_link::get_performance_information ()
-{
-  performance_information p;
-  _performance_information_mutex->lock ();
-  p = _performance_information;
-  _performance_information_mutex->unlock ();
-  return p;
 }
 
 std::string
 octave_link::get_last_working_directory ()
 {
   return _last_working_directory;
 }
diff --git a/gui/src/octave-adapter/octave-link.h b/gui/src/octave-adapter/octave-link.h
--- a/gui/src/octave-adapter/octave-link.h
+++ b/gui/src/octave-adapter/octave-link.h
@@ -77,40 +77,30 @@
   * event hook, which lives in the octave thread.
   */
 class octave_link : public octave_event_observer
 {
 public:
   /** Provides a way to access the unique octave_link object. */
   static octave_link * instance () { return &_singleton; }
 
-  typedef struct
-  {
-    clock_t generate_events_start;
-    clock_t generate_events_stop;
-    clock_t process_events_start;
-    clock_t process_events_stop;
-    int     event_queue_size;
-  } performance_information;
-
   /** Starts octave. */
   void launch_octave ();
   void register_event_listener (octave_event_listener *oel);
 
   void generate_events ();
   void process_events ();
   void post_event (octave_event *e);
   void event_accepted (octave_event *e);
   void event_reject (octave_event *e);
 
   void about_to_exit ();
 
   void entered_readline_hook ();
   void finished_readline_hook ();
-  performance_information get_performance_information ();
 
   std::string get_last_working_directory ();
 
 private:
   /** Singleton. */
   octave_link ();
   ~octave_link ();
 
@@ -127,16 +117,12 @@ private:
 
   /** Stores the last known current working directory of octave. */
   std::string _last_working_directory;
   bool _debugging_mode_active;
 
   /** Semaphore to lock access to the performance information. */
   octave_mutex *_performance_information_mutex;
 
-  /** Stores performance data. */
-  performance_information _next_performance_information;
-  performance_information _performance_information;
-
   /** Unique instance. Singelton! */
   static octave_link _singleton;
 };
 #endif // OCTAVELINK_H
