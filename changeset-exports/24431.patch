# HG changeset patch
# User Rik <rik@octave.org>
# Date 1513715965 28800
#      Tue Dec 19 12:39:25 2017 -0800
# Branch stable
# Node ID 0c6cedafc71e477bb944d0d06f9c8618f0361c9b
# Parent  ceae837bc9ea8b40ea76a61c75ee5fd6658e9e45
doc: Use 'axes' rather than 'axis' appropriately in docstrings.

* voronoi.m, axis.m, box.m, caxis.m, datetick.m, grid.m, legend.m,
lighting.m, shading.m, title.m, view.m, xlabel.m, xlim.m, ylabel.m, ylim.m,
zlabel.m, zlim.m, area.m, bar.m, barh.m, colorbar.m, comet.m, comet3.m,
compass.m, contour.m, contour3.m, contourf.m, cylinder.m, ellipsoid.m,
errorbar.m, ezcontour.m, ezcontourf.m, ezmesh.m, ezmeshc.m, ezplot.m,
ezplot3.m, ezpolar.m, ezsurf.m, ezsurfc.m, feather.m, fill.m, fplot.m, hist.m,
line.m, loglog.m, loglogerr.m, mesh.m, meshc.m, meshz.m, pareto.m, patch.m,
pcolor.m, pie.m, pie3.m, plot.m, plot3.m, plotmatrix.m, plotyy.m, polar.m,
quiver.m, quiver3.m, rectangle.m, ribbon.m, rose.m, scatter.m, scatter3.m,
semilogx.m, semilogxerr.m, semilogy.m, semilogyerr.m, slice.m, sphere.m,
stairs.m, stem.m, stem3.m, surf.m, surface.m, surfc.m, surfl.m, surfnorm.m,
waterfall.m, axes.m, cla.m, gca.m, hold.m, newplot.m, subplot.m:
Use 'axes' rather than 'axis' appropriately in docstrings.

diff --git a/scripts/geometry/voronoi.m b/scripts/geometry/voronoi.m
--- a/scripts/geometry/voronoi.m
+++ b/scripts/geometry/voronoi.m
@@ -30,18 +30,18 @@
 ## The @var{options} argument, which must be a string or cell array of strings,
 ## contains options passed to the underlying qhull command.
 ## See the documentation for the Qhull library for details
 ## @url{http://www.qhull.org/html/qh-quick.htm#options}.
 ##
 ## If @qcode{"linespec"} is given it is used to set the color and line style of
 ## the plot.
 ##
-## If an axis graphics handle @var{hax} is supplied then the Voronoi diagram is
-## drawn on the specified axis rather than in a new figure.
+## If an axes graphics handle @var{hax} is supplied then the Voronoi diagram is
+## drawn on the specified axes rather than in a new figure.
 ##
 ## If a single output argument is requested then the Voronoi diagram will be
 ## plotted and a graphics handle @var{h} to the plot is returned.
 ##
 ## [@var{vx}, @var{vy}] = voronoi (@dots{}) returns the Voronoi vertices
 ## instead of plotting the diagram.
 ##
 ## @example
diff --git a/scripts/plot/appearance/axis.m b/scripts/plot/appearance/axis.m
--- a/scripts/plot/appearance/axis.m
+++ b/scripts/plot/appearance/axis.m
@@ -29,17 +29,17 @@
 ## Set axis limits and appearance.
 ##
 ## The argument @var{limits} should be a 2-, 4-, 6-, or 8-element vector.  The
 ## first and second elements specify the lower and upper limits for the
 ## x-axis.  The third and fourth specify the limits for the y-axis, the fifth
 ## and sixth specify the limits for the z-axis, and the seventh and eighth
 ## specify the limits for the color axis.  The special values -Inf and Inf may
 ## be used to indicate that the limit should be automatically computed based
-## on the data in the axis.
+## on the data in the axes.
 ##
 ## Without any arguments, @code{axis} turns autoscaling on.
 ##
 ## With one output argument, @code{@var{limits} = axis} returns the current
 ## axis limits.
 ##
 ## The vector argument specifying limits is optional, and additional string
 ## arguments may be used to specify various axis properties.
@@ -87,17 +87,17 @@
 ## @item @qcode{"label[xyz]"}
 ## Turn tick labels on for all axes, or turn them on for the specified axes
 ## and off for the remainder.
 ##
 ## @item @qcode{"nolabel"}
 ## Turn tick labels off for all axes.
 ## @end table
 ##
-## Note: If there are no tick marks for an axis then there can be no labels.
+## Note: If there are no tick marks for an axes then there can be no labels.
 ##
 ## @noindent
 ## The following options affect the direction of increasing values on the axes.
 ##
 ## @table @asis
 ## @item @qcode{"xy"}
 ## Default y-axis, larger values are near the top.
 ##
diff --git a/scripts/plot/appearance/box.m b/scripts/plot/appearance/box.m
--- a/scripts/plot/appearance/box.m
+++ b/scripts/plot/appearance/box.m
@@ -16,23 +16,23 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} box
 ## @deftypefnx {} {} box on
 ## @deftypefnx {} {} box off
 ## @deftypefnx {} {} box (@var{hax}, @dots{})
-## Control display of the axis border.
+## Control display of the axes border.
 ##
 ## The argument may be either @qcode{"on"} or @qcode{"off"}.  If it is
 ## omitted, the current box state is toggled.
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on this
-## axis rather than the current axes returned by @code{gca}.
+## axes rather than the current axes returned by @code{gca}.
 ## @seealso{axis, grid}
 ## @end deftypefn
 
 ## Author: jwe
 
 function box (varargin)
 
   [hax, varargin, nargs] = __plt_get_axis_arg__ ("box", varargin{:});
diff --git a/scripts/plot/appearance/caxis.m b/scripts/plot/appearance/caxis.m
--- a/scripts/plot/appearance/caxis.m
+++ b/scripts/plot/appearance/caxis.m
@@ -31,17 +31,17 @@
 ##
 ## If the @qcode{"auto"} option is given then automatic colormap limits are
 ## applied.  The automatic algorithm sets @var{cmin} to the minimum data value
 ## and @var{cmax} to the maximum data value.  If @qcode{"manual"} is specified
 ## then the @qcode{"climmode"} property is set to @qcode{"manual"} and the
 ## numeric values in the @qcode{"clim"} property are used for limits.
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on
-## this axis rather than the current axes returned by @code{gca}.
+## this axes rather than the current axes returned by @code{gca}.
 ##
 ## Called without arguments the current color axis limits are returned.
 ##
 ## Programming Note: The color axis affects the display of image, patch, and
 ## surface graphics objects, but @strong{only} if the @qcode{"cdata"} property
 ## has indexed data and the @qcode{"cdatamapping"} property is set to
 ## @qcode{"scaled"}.  Graphic objects with true color @code{cdata}, or
 ## @qcode{"direct"} @code{cdatamapping} are not affected.
diff --git a/scripts/plot/appearance/datetick.m b/scripts/plot/appearance/datetick.m
--- a/scripts/plot/appearance/datetick.m
+++ b/scripts/plot/appearance/datetick.m
@@ -13,31 +13,35 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} datetick ()
+## @deftypefnx {} {} datetick (@var{axis_str})
 ## @deftypefnx {} {} datetick (@var{date_format})
 ## @deftypefnx {} {} datetick (@var{axis_str}, @var{date_format})
 ## @deftypefnx {} {} datetick (@dots{}, "keeplimits")
 ## @deftypefnx {} {} datetick (@dots{}, "keepticks")
 ## @deftypefnx {} {} datetick (@var{hax}, @dots{})
-## Add date formatted tick labels to an axis.
+## Add date-formatted tick labels to an axis.
 ##
 ## The axis to apply the ticks to is determined by @var{axis_str} which can
 ## take the values @qcode{"x"}, @qcode{"y"}, or @qcode{"z"}.  The default
 ## value is @qcode{"x"}.
 ##
 ## The formatting of the labels is determined by the variable
 ## @var{date_format}, which can either be a string or positive integer that
 ## @code{datestr} accepts.
 ##
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
+## rather than the current axes returned by @code{gca}.
+##
 ## @seealso{datenum, datestr}
 ## @end deftypefn
 
 function datetick (varargin)
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ ("datetick", varargin{:});
 
   oldfig = [];
diff --git a/scripts/plot/appearance/grid.m b/scripts/plot/appearance/grid.m
--- a/scripts/plot/appearance/grid.m
+++ b/scripts/plot/appearance/grid.m
@@ -28,19 +28,19 @@
 ##
 ## The function state input may be either @qcode{"on"} or @qcode{"off"}.
 ## If it is omitted, the current grid state is toggled.
 ##
 ## When the first argument is @qcode{"minor"} all subsequent commands
 ## modify the minor grid rather than the major grid.
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on
-## this axis rather than the current axes returned by @code{gca}.
+## this axes rather than the current axes returned by @code{gca}.
 ##
-## To control the grid lines for an individual axis use the @code{set}
+## To control the grid lines for an individual axes use the @code{set}
 ## function.  For example:
 ##
 ## @example
 ## set (gca, "ygrid", "on");
 ## @end example
 ## @seealso{axis, box}
 ## @end deftypefn
 
diff --git a/scripts/plot/appearance/legend.m b/scripts/plot/appearance/legend.m
--- a/scripts/plot/appearance/legend.m
+++ b/scripts/plot/appearance/legend.m
@@ -28,17 +28,17 @@
 ## @deftypefnx {} {} legend ("@var{option}")
 ## @deftypefnx {} {[@var{hleg}, @var{hleg_obj}, @var{hplot}, @var{labels}] =} legend (@dots{})
 ##
 ## Display a legend for the current axes using the specified strings as labels.
 ##
 ## Legend entries may be specified as individual character string arguments,
 ## a character array, or a cell array of character strings.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.  If the handles,
 ## @var{hobjs}, are not specified then the legend's strings will be associated
 ## with the axes' descendants.  @code{legend} works on line graphs,
 ## bar graphs, etc.  A plot must exist before legend is called.
 ##
 ## The optional parameter @var{pos} specifies the location of the legend
 ## as follows:
 ##
diff --git a/scripts/plot/appearance/lighting.m b/scripts/plot/appearance/lighting.m
--- a/scripts/plot/appearance/lighting.m
+++ b/scripts/plot/appearance/lighting.m
@@ -31,17 +31,17 @@
 ## Draw objects with linear interpolation of the lighting effects between the
 ## vertices.
 ##
 ## @item @qcode{"none"}
 ## Draw objects without light and shadow effects.
 ## @end table
 ##
 ## If the first argument @var{hax} is an axes handle, then change the lighting
-## effects of objects in this axis, rather than the current axes returned by
+## effects of objects in this axes, rather than the current axes returned by
 ## @code{gca}.
 ##
 ## The lighting effects are only visible if at least one light object is
 ## present and visible in the same axes.
 ##
 ## @seealso{light, fill, mesh, patch, pcolor, surf, surface, shading}
 ## @end deftypefn
 
diff --git a/scripts/plot/appearance/shading.m b/scripts/plot/appearance/shading.m
--- a/scripts/plot/appearance/shading.m
+++ b/scripts/plot/appearance/shading.m
@@ -30,17 +30,17 @@
 ## @item @qcode{"faceted"}
 ## Single colored patches with black edges.
 ##
 ## @item @qcode{"interp"}
 ## Colors between patch vertices are interpolated and the patch edges are
 ## invisible.
 ## @end table
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ## @seealso{fill, mesh, patch, pcolor, surf, surface, hidden, lighting}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 
 function shading (varargin)
 
diff --git a/scripts/plot/appearance/title.m b/scripts/plot/appearance/title.m
--- a/scripts/plot/appearance/title.m
+++ b/scripts/plot/appearance/title.m
@@ -21,17 +21,17 @@
 ## @deftypefnx {} {} title (@var{string}, @var{prop}, @var{val}, @dots{})
 ## @deftypefnx {} {} title (@var{hax}, @dots{})
 ## @deftypefnx {} {@var{h} =} title (@dots{})
 ## Specify the string used as a title for the current axis.
 ##
 ## An optional list of @var{property}/@var{value} pairs can be used to change
 ## the appearance of the created title text object.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created text
 ## object.
 ## @seealso{xlabel, ylabel, zlabel, text}
 ## @end deftypefn
 
 ## Author: jwe
diff --git a/scripts/plot/appearance/view.m b/scripts/plot/appearance/view.m
--- a/scripts/plot/appearance/view.m
+++ b/scripts/plot/appearance/view.m
@@ -32,17 +32,17 @@
 ##
 ## The call @code{view (2)} sets the viewpoint to @w{@var{azimuth} = 0}
 ## and @w{@var{elevation} = 90}, which is the default for 2-D graphs.
 ##
 ## The call @code{view (3)} sets the viewpoint to @w{@var{azimuth} = -37.5}
 ## and @w{@var{elevation} = 30}, which is the default for 3-D graphs.
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on
-## this axis rather than the current axes returned by @code{gca}.
+## this axes rather than the current axes returned by @code{gca}.
 ##
 ## If no inputs are given, return the current @var{azimuth} and
 ## @var{elevation}.
 ## @end deftypefn
 
 ## Author: jwe
 
 function [azimuth, elevation] = view (varargin)
diff --git a/scripts/plot/appearance/xlabel.m b/scripts/plot/appearance/xlabel.m
--- a/scripts/plot/appearance/xlabel.m
+++ b/scripts/plot/appearance/xlabel.m
@@ -22,17 +22,17 @@
 ## @deftypefnx {} {} xlabel (@var{hax}, @dots{})
 ## @deftypefnx {} {@var{h} =} xlabel (@dots{})
 ## Specify the string used to label the x-axis of the current axis.
 ##
 ## An optional list of @var{property}/@var{value} pairs can be used to change
 ## the properties of the created text label.
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on
-## this axis rather than the current axes returned by @code{gca}.
+## this axes rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created text
 ## object.
 ## @seealso{ylabel, zlabel, datetick, title, text}
 ## @end deftypefn
 
 ## Author: jwe
 
diff --git a/scripts/plot/appearance/xlim.m b/scripts/plot/appearance/xlim.m
--- a/scripts/plot/appearance/xlim.m
+++ b/scripts/plot/appearance/xlim.m
@@ -35,17 +35,17 @@
 ## x-axis are set to these values and the mode is set to @qcode{"manual"}.
 ## The special values -Inf and Inf can be used to indicate that either
 ## the lower axis limit or upper axis limit should be automatically calculated.
 ##
 ## The current plotting mode can be changed by using either @qcode{"auto"}
 ## or @qcode{"manual"} as the argument.
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on
-## this axis rather than the current axes returned by @code{gca}.
+## this axes rather than the current axes returned by @code{gca}.
 ##
 ## Programming Note: The @code{xlim} function operates by modifying the
 ## @qcode{"xlim"} and @qcode{"xlimmode"} properties of an axes object.  These
 ## properties can be be directly inspected and altered with
 ## @code{get}/@code{set}.
 ## @seealso{ylim, zlim, axis, set, get, gca}
 ## @end deftypefn
 
diff --git a/scripts/plot/appearance/ylabel.m b/scripts/plot/appearance/ylabel.m
--- a/scripts/plot/appearance/ylabel.m
+++ b/scripts/plot/appearance/ylabel.m
@@ -24,17 +24,17 @@
 ## Specify the string used to label the y-axis of the current axis.
 ##
 ## If @var{hax} is specified then label the axis defined by @var{hax}.
 ##
 ## An optional list of @var{property}/@var{value} pairs can be used to change
 ## the properties of the created text label.
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on
-## this axis rather than the current axes returned by @code{gca}.
+## this axes rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created text
 ## object.
 ## @seealso{xlabel, zlabel, datetick, title, text}
 ## @end deftypefn
 
 ## Author: jwe
 
diff --git a/scripts/plot/appearance/ylim.m b/scripts/plot/appearance/ylim.m
--- a/scripts/plot/appearance/ylim.m
+++ b/scripts/plot/appearance/ylim.m
@@ -35,17 +35,17 @@
 ## y-axis are set to these values and the mode is set to @qcode{"manual"}.
 ## The special values -Inf and Inf can be used to indicate that either
 ## the lower axis limit or upper axis limit should be automatically calculated.
 ##
 ## The current plotting mode can be changed by using either @qcode{"auto"}
 ## or @qcode{"manual"} as the argument.
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on
-## this axis rather than the current axes returned by @code{gca}.
+## this axes rather than the current axes returned by @code{gca}.
 ##
 ## Programming Note: The @code{ylim} function operates by modifying the
 ## @qcode{"ylim"} and @qcode{"ylimmode"} properties of an axes object.  These
 ## properties can be be directly inspected and altered with
 ## @code{get}/@code{set}.
 ## @seealso{xlim, zlim, axis, set, get, gca}
 ## @end deftypefn
 
diff --git a/scripts/plot/appearance/zlabel.m b/scripts/plot/appearance/zlabel.m
--- a/scripts/plot/appearance/zlabel.m
+++ b/scripts/plot/appearance/zlabel.m
@@ -22,17 +22,17 @@
 ## @deftypefnx {} {} zlabel (@var{hax}, @dots{})
 ## @deftypefnx {} {@var{h} =} zlabel (@dots{})
 ## Specify the string used to label the z-axis of the current axis.
 ##
 ## An optional list of @var{property}/@var{value} pairs can be used to change
 ## the properties of the created text label.
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on
-## this axis rather than the current axes returned by @code{gca}.
+## this axes rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created text
 ## object.
 ## @seealso{xlabel, ylabel, datetick, title, text}
 ## @end deftypefn
 ## Author: jwe
 
 function h = zlabel (varargin)
diff --git a/scripts/plot/appearance/zlim.m b/scripts/plot/appearance/zlim.m
--- a/scripts/plot/appearance/zlim.m
+++ b/scripts/plot/appearance/zlim.m
@@ -35,17 +35,17 @@
 ## x-axis are set to these values and the mode is set to @qcode{"manual"}.
 ## The special values -Inf and Inf can be used to indicate that either
 ## the lower axis limit or upper axis limit should be automatically calculated.
 ##
 ## The current plotting mode can be changed by using either @qcode{"auto"}
 ## or @qcode{"manual"} as the argument.
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on
-## this axis rather than the current axes returned by @code{gca}.
+## this axes rather than the current axes returned by @code{gca}.
 ##
 ## Programming Note: The @code{zlim} function operates by modifying the
 ## @qcode{"zlim"} and @qcode{"zlimmode"} properties of an axes object.  These
 ## properties can be be directly inspected and altered with
 ## @code{get}/@code{set}.
 ## @seealso{xlim, ylim, axis, set, get, gca}
 ## @end deftypefn
 
diff --git a/scripts/plot/draw/area.m b/scripts/plot/draw/area.m
--- a/scripts/plot/draw/area.m
+++ b/scripts/plot/draw/area.m
@@ -32,17 +32,17 @@
 ##
 ## If the @var{x} argument is omitted it defaults to @code{1:rows (@var{y})}.
 ## A value @var{lvl} can be defined that determines where the base level of
 ## the shading under the curve should be defined.  The default level is 0.
 ##
 ## Additional property/value pairs are passed directly to the underlying patch
 ## object.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the hggroup
 ## object comprising the area patch objects.  The @qcode{"BaseValue"} property
 ## of the hggroup can be used to adjust the level where shading begins.
 ##
 ## Example: Verify identity sin^2 + cos^2 = 1
 ##
diff --git a/scripts/plot/draw/bar.m b/scripts/plot/draw/bar.m
--- a/scripts/plot/draw/bar.m
+++ b/scripts/plot/draw/bar.m
@@ -54,17 +54,17 @@
 ## @item @qcode{"histc"}
 ## Side-by-side bars with no gap between bars and left-aligned to the
 ## X-coordinate.
 ## @end table
 ##
 ## Optional property/value pairs are passed directly to the underlying patch
 ## objects.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a vector of handles to the created
 ## "bar series" hggroups with one handle per column of the variable @var{y}.
 ## This series makes it possible to change a common element in one bar series
 ## object and have the change reflected in the other "bar series".
 ## For example,
 ##
diff --git a/scripts/plot/draw/barh.m b/scripts/plot/draw/barh.m
--- a/scripts/plot/draw/barh.m
+++ b/scripts/plot/draw/barh.m
@@ -54,17 +54,17 @@
 ## @item @qcode{"histc"}
 ## Side-by-side bars with no gap between bars and left-aligned to the
 ## Y-coordinate.
 ## @end table
 ##
 ## Optional property/value pairs are passed directly to the underlying patch
 ## objects.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created
 ## bar series hggroup.  For a description of the use of the
 ## bar series, @pxref{XREFbar,,bar}.
 ## @seealso{bar, hist, pie, plot, patch}
 ## @end deftypefn
 
diff --git a/scripts/plot/draw/colorbar.m b/scripts/plot/draw/colorbar.m
--- a/scripts/plot/draw/colorbar.m
+++ b/scripts/plot/draw/colorbar.m
@@ -61,17 +61,17 @@
 ## @end table
 ##
 ## To remove a colorbar from a plot use any one of the following keywords for
 ## the @var{delete_option}: @qcode{"delete"}, @qcode{"hide"}, @qcode{"off"}.
 ##
 ## If the argument @qcode{"peer"} is given, then the following argument is
 ## treated as the axes handle in which to add the colorbar.  Alternatively,
 ## If the first argument @var{hax} is an axes handle, then the colorbar is
-## added to this axis, rather than the current axes returned by @code{gca}.
+## added to this axes, rather than the current axes returned by @code{gca}.
 ##
 ## If the first argument @var{hcb} is a handle to a colorbar object, then
 ## operate on this colorbar directly.
 ##
 ## Additional property/value pairs are passed directly to the underlying axes
 ## object.
 ##
 ## The optional return value @var{h} is a graphics handle to the created
diff --git a/scripts/plot/draw/comet.m b/scripts/plot/draw/comet.m
--- a/scripts/plot/draw/comet.m
+++ b/scripts/plot/draw/comet.m
@@ -25,17 +25,17 @@
 ## the input coordinate vectors (@var{x}, @var{y}).
 ##
 ## If @var{x} is not specified it defaults to the indices of @var{y}.
 ##
 ## The speed of the comet may be controlled by @var{p}, which represents the
 ## time each point is displayed before moving to the next one.  The default for
 ## @var{p} is 0.1 seconds.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ## @seealso{comet3}
 ## @end deftypefn
 
 ## Author: Ben Abbott bpabbott@mac.com
 ## Created: 2008-09-21
 
 function comet (varargin)
diff --git a/scripts/plot/draw/comet3.m b/scripts/plot/draw/comet3.m
--- a/scripts/plot/draw/comet3.m
+++ b/scripts/plot/draw/comet3.m
@@ -26,17 +26,17 @@
 ##
 ## If only @var{z} is specified then @var{x}, @var{y} default to the indices
 ## of @var{z}.
 ##
 ## The speed of the comet may be controlled by @var{p}, which represents the
 ## time each point is displayed before moving to the next one.  The default for
 ## @var{p} is 0.1 seconds.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ## @seealso{comet}
 ## @end deftypefn
 
 ## Author: jwe
 ## Created: 2010-12-17
 
 function comet3 (varargin)
diff --git a/scripts/plot/draw/compass.m b/scripts/plot/draw/compass.m
--- a/scripts/plot/draw/compass.m
+++ b/scripts/plot/draw/compass.m
@@ -28,17 +28,17 @@
 ##
 ## The arrow representing each vector has one end at the origin and the tip at
 ## [@var{u}(i), @var{v}(i)].  If a single complex argument @var{z} is given,
 ## then @code{@var{u} = real (@var{z})} and @code{@var{v} = imag (@var{z})}.
 ##
 ## The style to use for the plot can be defined with a line style @var{style}
 ## of the same format as the @code{plot} command.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a vector of graphics handles to the
 ## line objects representing the drawn vectors.
 ##
 ## @example
 ## @group
 ## a = toeplitz ([1;randn(9,1)], [1,randn(1,9)]);
diff --git a/scripts/plot/draw/contour.m b/scripts/plot/draw/contour.m
--- a/scripts/plot/draw/contour.m
+++ b/scripts/plot/draw/contour.m
@@ -29,17 +29,17 @@
 ## Plot level curves (contour lines) of the matrix @var{z}, using the
 ## contour matrix @var{c} computed by @code{contourc} from the same
 ## arguments; see the latter for their interpretation.
 ##
 ## The appearance of contour lines can be defined with a line style @var{style}
 ## in the same manner as @code{plot}.  Only line style and color are used;
 ## Any markers defined by @var{style} are ignored.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional output @var{c} contains the contour levels in @code{contourc}
 ## format.
 ##
 ## The optional return value @var{h} is a graphics handle to the hggroup
 ## comprising the contour lines.
 ##
diff --git a/scripts/plot/draw/contour3.m b/scripts/plot/draw/contour3.m
--- a/scripts/plot/draw/contour3.m
+++ b/scripts/plot/draw/contour3.m
@@ -34,17 +34,17 @@
 ## The level curves are taken from the contour matrix @var{c} computed by
 ## @code{contourc} for the same arguments; see the latter for their
 ## interpretation.
 ##
 ## The appearance of contour lines can be defined with a line style @var{style}
 ## in the same manner as @code{plot}.  Only line style and color are used;
 ## Any markers defined by @var{style} are ignored.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional output @var{c} are the contour levels in @code{contourc}
 ## format.
 ##
 ## The optional return value @var{h} is a graphics handle to the hggroup
 ## comprising the contour lines.
 ##
diff --git a/scripts/plot/draw/contourf.m b/scripts/plot/draw/contourf.m
--- a/scripts/plot/draw/contourf.m
+++ b/scripts/plot/draw/contourf.m
@@ -33,17 +33,17 @@
 ## The level curves are taken from the contour matrix @var{c} computed by
 ## @code{contourc} for the same arguments; see the latter for their
 ## interpretation.
 ##
 ## The appearance of contour lines can be defined with a line style @var{style}
 ## in the same manner as @code{plot}.  Only line style and color are used;
 ## Any markers defined by @var{style} are ignored.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional output @var{c} contains the contour levels in @code{contourc}
 ## format.
 ##
 ## The optional return value @var{h} is a graphics handle to the hggroup
 ## comprising the contour lines.
 ##
diff --git a/scripts/plot/draw/cylinder.m b/scripts/plot/draw/cylinder.m
--- a/scripts/plot/draw/cylinder.m
+++ b/scripts/plot/draw/cylinder.m
@@ -26,17 +26,17 @@
 ##
 ## The optional input @var{r} is a vector specifying the radius along the
 ## unit z-axis.  The default is [1 1] indicating radius 1 at @code{Z == 0}
 ## and at @code{Z == 1}.
 ##
 ## The optional input @var{n} determines the number of faces around the
 ## circumference of the cylinder.  The default value is 20.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## If outputs are requested @code{cylinder} returns three matrices in
 ## @code{meshgrid} format, such that @code{surf (@var{x}, @var{y}, @var{z})}
 ## generates a unit cylinder.
 ##
 ## Example:
 ##
diff --git a/scripts/plot/draw/ellipsoid.m b/scripts/plot/draw/ellipsoid.m
--- a/scripts/plot/draw/ellipsoid.m
+++ b/scripts/plot/draw/ellipsoid.m
@@ -24,17 +24,17 @@
 ## Plot a 3-D ellipsoid.
 ##
 ## The inputs @var{xc}, @var{yc}, @var{zc} specify the center of the ellipsoid.
 ## The inputs @var{xr}, @var{yr}, @var{zr} specify the semi-major axis lengths.
 ##
 ## The optional input @var{n} determines the number of faces around the
 ## circumference of the cylinder.  The default value is 20.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## If outputs are requested @code{ellipsoid} returns three matrices in
 ## @code{meshgrid} format, such that @code{surf (@var{x}, @var{y}, @var{z})}
 ## generates the ellipsoid.
 ## @seealso{cylinder, rectangle, sphere}
 ## @end deftypefn
 
diff --git a/scripts/plot/draw/errorbar.m b/scripts/plot/draw/errorbar.m
--- a/scripts/plot/draw/errorbar.m
+++ b/scripts/plot/draw/errorbar.m
@@ -106,17 +106,17 @@
 ##
 ## @item #
 ## Set xboxes plot style.
 ##
 ## @item #~>
 ## Set xyboxes plot style.
 ## @end table
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a handle to the hggroup object
 ## representing the data plot and errorbars.
 ##
 ## Note: For compatibility with @sc{matlab} a line is drawn through all data
 ## points.  However, most scientific errorbar plots are a scatter plot of
 ## points with errorbars.  To accomplish this, add a marker style to the
diff --git a/scripts/plot/draw/ezcontour.m b/scripts/plot/draw/ezcontour.m
--- a/scripts/plot/draw/ezcontour.m
+++ b/scripts/plot/draw/ezcontour.m
@@ -30,17 +30,17 @@
 ## @code{-2*pi <= @var{x} | @var{y} <= 2*pi} with 60 points in each dimension.
 ##
 ## If @var{dom} is a two element vector, it represents the minimum and maximum
 ## values of both @var{x} and @var{y}.  If @var{dom} is a four element vector,
 ## then the minimum and maximum values are @code{[xmin xmax ymin ymax]}.
 ##
 ## @var{n} is a scalar defining the number of points to use in each dimension.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created plot.
 ##
 ## Example:
 ##
 ## @example
 ## @group
diff --git a/scripts/plot/draw/ezcontourf.m b/scripts/plot/draw/ezcontourf.m
--- a/scripts/plot/draw/ezcontourf.m
+++ b/scripts/plot/draw/ezcontourf.m
@@ -30,17 +30,17 @@
 ## @code{-2*pi <= @var{x} | @var{y} <= 2*pi} with 60 points in each dimension.
 ##
 ## If @var{dom} is a two element vector, it represents the minimum and maximum
 ## values of both @var{x} and @var{y}.  If @var{dom} is a four element vector,
 ## then the minimum and maximum values are @code{[xmin xmax ymin ymax]}.
 ##
 ## @var{n} is a scalar defining the number of points to use in each dimension.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created plot.
 ##
 ## Example:
 ##
 ## @example
 ## @group
diff --git a/scripts/plot/draw/ezmesh.m b/scripts/plot/draw/ezmesh.m
--- a/scripts/plot/draw/ezmesh.m
+++ b/scripts/plot/draw/ezmesh.m
@@ -39,17 +39,17 @@
 ## values of both @var{x} and @var{y}.  If @var{dom} is a four element vector,
 ## then the minimum and maximum values are @code{[xmin xmax ymin ymax]}.
 ##
 ## @var{n} is a scalar defining the number of points to use in each dimension.
 ##
 ## If the argument @qcode{"circ"} is given, then the function is plotted over
 ## a disk centered on the middle of the domain @var{dom}.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created
 ## surface object.
 ##
 ## Example 1: 2-argument function
 ##
 ## @example
diff --git a/scripts/plot/draw/ezmeshc.m b/scripts/plot/draw/ezmeshc.m
--- a/scripts/plot/draw/ezmeshc.m
+++ b/scripts/plot/draw/ezmeshc.m
@@ -39,17 +39,17 @@
 ## values of both @var{x} and @var{y}.  If @var{dom} is a four element vector,
 ## then the minimum and maximum values are @code{[xmin xmax ymin ymax]}.
 ##
 ## @var{n} is a scalar defining the number of points to use in each dimension.
 ##
 ## If the argument @qcode{"circ"} is given, then the function is plotted over
 ## a disk centered on the middle of the domain @var{dom}.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a 2-element vector with a graphics
 ## handle for the created mesh plot and a second handle for the created contour
 ## plot.
 ##
 ## Example: 2-argument function
 ##
diff --git a/scripts/plot/draw/ezplot.m b/scripts/plot/draw/ezplot.m
--- a/scripts/plot/draw/ezplot.m
+++ b/scripts/plot/draw/ezplot.m
@@ -57,17 +57,17 @@
 ## If @var{dom} is a two element vector, it represents the minimum and maximum
 ## values of both @var{x} and @var{y}, or @var{t} for a parametric plot.  If
 ## @var{dom} is a four element vector, then the minimum and maximum values are
 ## @code{[xmin xmax ymin ymax]}.
 ##
 ## @var{n} is a scalar defining the number of points to use in plotting
 ## the function.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a vector of graphics handles to
 ## the created line objects.
 ##
 ## @seealso{plot, ezplot3, ezpolar, ezcontour, ezcontourf, ezmesh, ezmeshc, ezsurf, ezsurfc}
 ## @end deftypefn
 
diff --git a/scripts/plot/draw/ezplot3.m b/scripts/plot/draw/ezplot3.m
--- a/scripts/plot/draw/ezplot3.m
+++ b/scripts/plot/draw/ezplot3.m
@@ -35,17 +35,17 @@
 ## values of @var{t}.
 ##
 ## @var{n} is a scalar defining the number of points to use in plotting the
 ## function.
 ##
 ## If the @qcode{"animate"} option is given then the plotting is animated
 ## in the style of @code{comet3}.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created plot.
 ##
 ## @example
 ## @group
 ## fx = @@(t) cos (t);
 ## fy = @@(t) sin (t);
diff --git a/scripts/plot/draw/ezpolar.m b/scripts/plot/draw/ezpolar.m
--- a/scripts/plot/draw/ezpolar.m
+++ b/scripts/plot/draw/ezpolar.m
@@ -32,17 +32,17 @@
 ## with 500 points.
 ##
 ## If @var{dom} is a two element vector, it represents the minimum and maximum
 ## values of @var{theta}.
 ##
 ## @var{n} is a scalar defining the number of points to use in plotting
 ## the function.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created plot.
 ##
 ## Example:
 ##
 ## @example
 ## ezpolar (@@(t) sin (5/4 * t), [0, 8*pi]);
diff --git a/scripts/plot/draw/ezsurf.m b/scripts/plot/draw/ezsurf.m
--- a/scripts/plot/draw/ezsurf.m
+++ b/scripts/plot/draw/ezsurf.m
@@ -39,17 +39,17 @@
 ## values of both @var{x} and @var{y}.  If @var{dom} is a four element vector,
 ## then the minimum and maximum values are @code{[xmin xmax ymin ymax]}.
 ##
 ## @var{n} is a scalar defining the number of points to use in each dimension.
 ##
 ## If the argument @qcode{"circ"} is given, then the function is plotted over
 ## a disk centered on the middle of the domain @var{dom}.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created
 ## surface object.
 ##
 ## Example 1: 2-argument function
 ##
 ## @example
diff --git a/scripts/plot/draw/ezsurfc.m b/scripts/plot/draw/ezsurfc.m
--- a/scripts/plot/draw/ezsurfc.m
+++ b/scripts/plot/draw/ezsurfc.m
@@ -39,17 +39,17 @@
 ## values of both @var{x} and @var{y}.  If @var{dom} is a four element vector,
 ## then the minimum and maximum values are @code{[xmin xmax ymin ymax]}.
 ##
 ## @var{n} is a scalar defining the number of points to use in each dimension.
 ##
 ## If the argument @qcode{"circ"} is given, then the function is plotted over
 ## a disk centered on the middle of the domain @var{dom}.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a 2-element vector with a graphics
 ## handle for the created surface plot and a second handle for the created
 ## contour plot.
 ##
 ## Example:
 ##
diff --git a/scripts/plot/draw/feather.m b/scripts/plot/draw/feather.m
--- a/scripts/plot/draw/feather.m
+++ b/scripts/plot/draw/feather.m
@@ -27,17 +27,17 @@
 ## from equidistant points on the x-axis.
 ##
 ## If a single complex argument @var{z} is given, then
 ## @code{@var{u} = real (@var{z})} and @code{@var{v} = imag (@var{z})}.
 ##
 ## The style to use for the plot can be defined with a line style @var{style}
 ## of the same format as the @code{plot} command.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a vector of graphics handles to the
 ## line objects representing the drawn vectors.
 ##
 ## @example
 ## @group
 ## phi = [0 : 15 : 360] * pi/180;
diff --git a/scripts/plot/draw/fill.m b/scripts/plot/draw/fill.m
--- a/scripts/plot/draw/fill.m
+++ b/scripts/plot/draw/fill.m
@@ -37,17 +37,17 @@
 ## color each polygon (a column from matrices @var{x} and @var{y}) with a
 ## single computed color.  A matrix @var{c} of the same size as @var{x} and
 ## @var{y} will compute the color of each vertex and then interpolate the face
 ## color between the vertices.
 ##
 ## Multiple property/value pairs for the underlying patch object may be
 ## specified, but they must appear in pairs.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a vector of graphics handles to
 ## the created patch objects.
 ##
 ## Example: red square
 ##
 ## @example
diff --git a/scripts/plot/draw/fplot.m b/scripts/plot/draw/fplot.m
--- a/scripts/plot/draw/fplot.m
+++ b/scripts/plot/draw/fplot.m
@@ -39,17 +39,17 @@
 ## @var{n} is the minimum number of points to use.  When @var{n} is specified,
 ## the maximum stepsize will be @code{@var{xhi} - @var{xlo} / @var{n}}.  More
 ## than @var{n} points may still be used in order to meet the relative
 ## tolerance requirement.
 ##
 ## The @var{fmt} argument specifies the linestyle to be used by the plot
 ## command.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## With no output arguments the results are immediately plotted.  With two
 ## output arguments the 2-D plot data is returned.  The data can subsequently
 ## be plotted manually with @code{plot (@var{x}, @var{y})}.
 ##
 ## Example:
 ##
diff --git a/scripts/plot/draw/hist.m b/scripts/plot/draw/hist.m
--- a/scripts/plot/draw/hist.m
+++ b/scripts/plot/draw/hist.m
@@ -56,17 +56,17 @@
 ##
 ## @example
 ## @group
 ## hist (rand (10, 3));
 ## colormap (summer ());
 ## @end group
 ## @end example
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## With two output arguments, produce the values @var{nn} (numbers of elements)
 ## and @var{xx} (bin centers) such that @code{bar (@var{xx}, @var{nn})} will
 ## plot the histogram.
 ##
 ## @seealso{histc, bar, pie, rose}
 ## @end deftypefn
diff --git a/scripts/plot/draw/line.m b/scripts/plot/draw/line.m
--- a/scripts/plot/draw/line.m
+++ b/scripts/plot/draw/line.m
@@ -26,17 +26,17 @@
 ## @deftypefnx {} {} line (@var{hax}, @dots{})
 ## @deftypefnx {} {@var{h} =} line (@dots{})
 ## Create line object from @var{x} and @var{y} (and possibly @var{z}) and
 ## insert in the current axes.
 ##
 ## Multiple property-value pairs may be specified for the line object, but they
 ## must appear in pairs.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle (or vector of
 ## handles) to the line objects created.
 ##
 ## @seealso{image, patch, rectangle, surface, text}
 ## @end deftypefn
 
diff --git a/scripts/plot/draw/loglog.m b/scripts/plot/draw/loglog.m
--- a/scripts/plot/draw/loglog.m
+++ b/scripts/plot/draw/loglog.m
@@ -23,17 +23,17 @@
 ## @deftypefnx {} {} loglog (@var{x}, @var{y}, @var{fmt})
 ## @deftypefnx {} {} loglog (@var{hax}, @dots{})
 ## @deftypefnx {} {@var{h} =} loglog (@dots{})
 ## Produce a 2-D plot using logarithmic scales for both axes.
 ##
 ## See the documentation of @code{plot} for a description of the arguments
 ## that @code{loglog} will accept.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created plot.
 ## @seealso{plot, semilogx, semilogy}
 ## @end deftypefn
 
 ## Author: jwe
 
diff --git a/scripts/plot/draw/loglogerr.m b/scripts/plot/draw/loglogerr.m
--- a/scripts/plot/draw/loglogerr.m
+++ b/scripts/plot/draw/loglogerr.m
@@ -37,17 +37,17 @@
 ## @end example
 ##
 ## @noindent
 ## which produces a double logarithm plot of @var{y} versus @var{x}
 ## with errors in the @var{y}-scale defined by @var{ey} and the plot
 ## format defined by @var{fmt}.  @xref{XREFerrorbar,,errorbar}, for available
 ## formats and additional information.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ## @seealso{errorbar, semilogxerr, semilogyerr}
 ## @end deftypefn
 
 ## Created: 20.2.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
diff --git a/scripts/plot/draw/mesh.m b/scripts/plot/draw/mesh.m
--- a/scripts/plot/draw/mesh.m
+++ b/scripts/plot/draw/mesh.m
@@ -39,17 +39,17 @@
 ## change the colormap to control the appearance.
 ##
 ## Optionally, the color of the mesh can be specified independently of @var{z}
 ## by supplying a color matrix, @var{c}.
 ##
 ## Any property/value pairs are passed directly to the underlying surface
 ## object.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created
 ## surface object.
 ##
 ## @seealso{ezmesh, meshc, meshz, trimesh, contour, surf, surface, meshgrid, hidden, shading, colormap, caxis}
 ## @end deftypefn
 
diff --git a/scripts/plot/draw/meshc.m b/scripts/plot/draw/meshc.m
--- a/scripts/plot/draw/meshc.m
+++ b/scripts/plot/draw/meshc.m
@@ -39,17 +39,17 @@
 ## change the colormap to control the appearance.
 ##
 ## Optionally the color of the mesh can be specified independently of @var{z}
 ## by supplying a color matrix, @var{c}.
 ##
 ## Any property/value pairs are passed directly to the underlying surface
 ## object.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a 2-element vector with a graphics
 ## handle to the created surface object and to the created contour plot.
 ##
 ## @seealso{ezmeshc, mesh, meshz, contour, surfc, surface, meshgrid, hidden, shading, colormap, caxis}
 ## @end deftypefn
 
diff --git a/scripts/plot/draw/meshz.m b/scripts/plot/draw/meshz.m
--- a/scripts/plot/draw/meshz.m
+++ b/scripts/plot/draw/meshz.m
@@ -39,17 +39,17 @@
 ## change the colormap to control the appearance.
 ##
 ## Optionally the color of the mesh can be specified independently of @var{z}
 ## by supplying a color matrix, @var{c}.
 ##
 ## Any property/value pairs are passed directly to the underlying surface
 ## object.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created
 ## surface object.
 ##
 ## @seealso{mesh, meshc, contour, surf, surface, waterfall, meshgrid, hidden, shading, colormap, caxis}
 ## @end deftypefn
 
diff --git a/scripts/plot/draw/pareto.m b/scripts/plot/draw/pareto.m
--- a/scripts/plot/draw/pareto.m
+++ b/scripts/plot/draw/pareto.m
@@ -37,17 +37,17 @@
 ## the majority of the result.  Thus, targeting these "major causes" for
 ## elimination results in the most cost-effective improvement scheme.
 ##
 ## Typically only the magnitude data @var{y} is present in which case
 ## @var{x} is taken to be the range @code{1 : length (@var{y})}.  If @var{x}
 ## is given it may be a string array, a cell array of strings, or a numerical
 ## vector.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a 2-element vector with a graphics
 ## handle for the created bar plot and a second handle for the created line
 ## plot.
 ##
 ## An example of the use of @code{pareto} is
 ##
diff --git a/scripts/plot/draw/patch.m b/scripts/plot/draw/patch.m
--- a/scripts/plot/draw/patch.m
+++ b/scripts/plot/draw/patch.m
@@ -53,17 +53,17 @@
 ## @qcode{"Vertices"} matrix to identify a vertex.  The patch object
 ## can be created by directly passing the property/value pairs
 ## @qcode{"Vertices"}/@var{verts}, @qcode{"Faces"}/@var{faces} as
 ## inputs.
 ##
 ## Instead of using property/value pairs, any property can be set by passing a
 ## structure @var{propstruct} with the respective field names.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created patch
 ## object.
 ##
 ## Implementation Note: Patches are highly configurable objects.  To truly
 ## customize them requires setting patch properties directly.  Useful patch
 ## properties are: @qcode{"cdata"}, @qcode{"edgecolor"},
diff --git a/scripts/plot/draw/pcolor.m b/scripts/plot/draw/pcolor.m
--- a/scripts/plot/draw/pcolor.m
+++ b/scripts/plot/draw/pcolor.m
@@ -40,17 +40,17 @@
 ## @code{imagesc} which renders one cell for each element of @var{c}.
 ##
 ## @code{shading} modifies an attribute determining the manner by which the
 ## face color of each cell is interpolated from the values of @var{c},
 ## and the visibility of the cells' edges.  By default the attribute is
 ## @qcode{"faceted"}, which renders a single color for each cell's face with
 ## the edge visible.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created
 ## surface object.
 ##
 ## @seealso{caxis, shading, meshgrid, contour, imagesc}
 ## @end deftypefn
 
diff --git a/scripts/plot/draw/pie.m b/scripts/plot/draw/pie.m
--- a/scripts/plot/draw/pie.m
+++ b/scripts/plot/draw/pie.m
@@ -30,17 +30,17 @@
 ## @code{pct = @var{x}(i) / sum (@var{x})}.
 ##
 ## The optional input @var{explode} is a vector of the same length as @var{x}
 ## that, if nonzero, "explodes" the slice from the pie chart.
 ##
 ## The optional input @var{labels} is a cell array of strings of the same
 ## length as @var{x} specifying the label for each slice.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a list of handles to the patch
 ## and text objects generating the plot.
 ##
 ## Note: If @code{sum (@var{x}) @leq{} 1} then the elements of @var{x} are
 ## interpreted as percentages directly and are not normalized by @code{sum
 ## (x)}.  Furthermore, if the sum is less than 1 then there will be a missing
diff --git a/scripts/plot/draw/pie3.m b/scripts/plot/draw/pie3.m
--- a/scripts/plot/draw/pie3.m
+++ b/scripts/plot/draw/pie3.m
@@ -31,17 +31,17 @@
 ## @code{pct = @var{x}(i) / sum (@var{x})}.
 ##
 ## The optional input @var{explode} is a vector of the same length as @var{x}
 ## that, if nonzero, "explodes" the slice from the pie chart.
 ##
 ## The optional input @var{labels} is a cell array of strings of the same
 ## length as @var{x} specifying the label for each slice.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a list of graphics handles to the
 ## patch, surface, and text objects generating the plot.
 ##
 ## Note: If @code{sum (@var{x}) @leq{} 1} then the elements of @var{x} are
 ## interpreted as percentages directly and are not normalized by @code{sum
 ## (x)}.  Furthermore, if the sum is less than 1 then there will be a missing
diff --git a/scripts/plot/draw/plot.m b/scripts/plot/draw/plot.m
--- a/scripts/plot/draw/plot.m
+++ b/scripts/plot/draw/plot.m
@@ -187,17 +187,17 @@
 ## t = 0:0.1:6.3;
 ## plot (t, cos(t), "-;cos(t);", t, sin(t), "-b;sin(t);");
 ## @end group
 ## @end example
 ##
 ## This will plot the cosine and sine functions and label them accordingly
 ## in the legend.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a vector of graphics handles to
 ## the created line objects.
 ##
 ## To save a plot, in one of several image formats such as PostScript
 ## or PNG, use the @code{print} command.
 ##
diff --git a/scripts/plot/draw/plot3.m b/scripts/plot/draw/plot3.m
--- a/scripts/plot/draw/plot3.m
+++ b/scripts/plot/draw/plot3.m
@@ -76,17 +76,17 @@
 ## @example
 ## plot3 (@var{x1}, @var{c1}, "", @var{c2}, "", @dots{})
 ## @end example
 ##
 ## Multiple property-value pairs may be specified which will affect the line
 ## objects drawn by @code{plot3}.  If the @var{fmt} argument is supplied it
 ## will format the line objects in the same manner as @code{plot}.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created plot.
 ##
 ## Example:
 ##
 ## @example
 ## @group
diff --git a/scripts/plot/draw/plotmatrix.m b/scripts/plot/draw/plotmatrix.m
--- a/scripts/plot/draw/plotmatrix.m
+++ b/scripts/plot/draw/plotmatrix.m
@@ -39,26 +39,26 @@
 ##
 ## @noindent
 ## except that the diagonal of the set of axes will be replaced with the
 ## histogram @code{hist (@var{x}(:, i))}.
 ##
 ## The marker to use can be changed with the @var{style} argument, that is a
 ## string defining a marker in the same manner as the @code{plot} command.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} provides handles to the individual
 ## graphics objects in the scatter plots, whereas @var{ax} returns the
-## handles to the scatter plot axis objects.
+## handles to the scatter plot axes objects.
 ##
-## @var{bigax} is a hidden axis object that surrounds the other axes, such
+## @var{bigax} is a hidden axes object that surrounds the other axes, such
 ## that the commands @code{xlabel}, @code{title}, etc., will be associated
-## with this hidden axis.
+## with this hidden axes.
 ##
 ## Finally, @var{p} returns the graphics objects associated with the histogram
 ## and @var{pax} the corresponding axes objects.
 ##
 ## Example:
 ##
 ## @example
 ## plotmatrix (randn (100, 3), "g+")
diff --git a/scripts/plot/draw/plotyy.m b/scripts/plot/draw/plotyy.m
--- a/scripts/plot/draw/plotyy.m
+++ b/scripts/plot/draw/plotyy.m
@@ -32,19 +32,19 @@
 ## modified with the @var{fun} argument, in which case the plots are
 ## generated by @code{feval (@var{fun}, @var{x}, @var{y})}.  @var{fun} can be
 ## a function handle, an inline function, or a string of a function name.
 ##
 ## The function to use for each of the plots can be independently defined
 ## with @var{fun1} and @var{fun2}.
 ##
 ## If the first argument @var{hax} is an axes handle, then it defines
-## the principal axis in which to plot the @var{x1} and @var{y1} data.
+## the principal axes in which to plot the @var{x1} and @var{y1} data.
 ##
-## The return value @var{ax} is a vector with the axis handles of the two
+## The return value @var{ax} is a vector with the axes handles of the two
 ## y-axes.  @var{h1} and @var{h2} are handles to the objects generated by the
 ## plot commands.
 ##
 ## @example
 ## @group
 ## x = 0:0.1:2*pi;
 ## y1 = sin (x);
 ## y2 = exp (x - 1);
diff --git a/scripts/plot/draw/polar.m b/scripts/plot/draw/polar.m
--- a/scripts/plot/draw/polar.m
+++ b/scripts/plot/draw/polar.m
@@ -26,17 +26,17 @@
 ## Create a 2-D plot from polar coordinates @var{theta} and @var{rho}.
 ##
 ## If a single complex input @var{cplx} is given then the real part is used
 ## for @var{theta} and the imaginary part is used for @var{rho}.
 ##
 ## The optional argument @var{fmt} specifies the line format in the same way
 ## as @code{plot}.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created plot.
 ##
 ## Implementation Note: The polar axis is drawn using line and text objects
 ## encapsulated in an hggroup.  The hggroup properties are linked to the
 ## original axes object such that altering an appearance property, for example
 ## @code{fontname}, will update the polar axis.  Two new properties are
diff --git a/scripts/plot/draw/quiver.m b/scripts/plot/draw/quiver.m
--- a/scripts/plot/draw/quiver.m
+++ b/scripts/plot/draw/quiver.m
@@ -43,17 +43,17 @@
 ##
 ## The style to use for the plot can be defined with a line style @var{style}
 ## of the same format as the @code{plot} command.  If a marker is specified
 ## then the markers are drawn at the origin of the vectors (which are the grid
 ## points defined by @var{x} and @var{y}).  When a marker is specified, the
 ## arrowhead is not drawn.  If the argument @qcode{"filled"} is given then the
 ## markers are filled.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to a quiver object.
 ## A quiver object regroups the components of the quiver plot (body, arrow,
 ## and marker), and allows them to be changed together.
 ##
 ## Example:
 ##
diff --git a/scripts/plot/draw/quiver3.m b/scripts/plot/draw/quiver3.m
--- a/scripts/plot/draw/quiver3.m
+++ b/scripts/plot/draw/quiver3.m
@@ -44,17 +44,17 @@
 ##
 ## The style to use for the plot can be defined with a line style @var{style}
 ## of the same format as the @code{plot} command.  If a marker is specified
 ## then the markers are drawn at the origin of the vectors (which are the grid
 ## points defined by @var{x}, @var{y}, @var{z}).  When a marker is specified,
 ## the arrowhead is not drawn.  If the argument @qcode{"filled"} is given then
 ## the markers are filled.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to a quiver object.
 ## A quiver object regroups the components of the quiver plot (body, arrow,
 ## and marker), and allows them to be changed together.
 ##
 ## @example
 ## @group
diff --git a/scripts/plot/draw/rectangle.m b/scripts/plot/draw/rectangle.m
--- a/scripts/plot/draw/rectangle.m
+++ b/scripts/plot/draw/rectangle.m
@@ -42,17 +42,17 @@
 ## by
 ##
 ## @example
 ## min (pos(1:2)) / max (pos(1:2)) * curv
 ## @end example
 ##
 ## Additional property/value pairs are passed to the underlying patch command.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created
 ## rectangle object.
 ## @end deftypefn
 ## @seealso{patch, line, cylinder, ellipsoid, sphere}
 
 function h = rectangle (varargin)
diff --git a/scripts/plot/draw/ribbon.m b/scripts/plot/draw/ribbon.m
--- a/scripts/plot/draw/ribbon.m
+++ b/scripts/plot/draw/ribbon.m
@@ -27,17 +27,17 @@
 ## If @var{x} is omitted, a vector containing the row numbers is assumed
 ## (@code{1:rows (Y)}).  Alternatively, @var{x} can also be a vector with
 ## same number of elements as rows of @var{y} in which case the same
 ## @var{x} is used for each column of @var{y}.
 ##
 ## The optional parameter @var{width} specifies the width of a single ribbon
 ## (default is 0.75).
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a vector of graphics handles to
 ## the surface objects representing each ribbon.
 ## @seealso{surface, waterfall}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel at gmx.de>
diff --git a/scripts/plot/draw/rose.m b/scripts/plot/draw/rose.m
--- a/scripts/plot/draw/rose.m
+++ b/scripts/plot/draw/rose.m
@@ -29,17 +29,17 @@
 ## If @var{th} is a matrix then each column of @var{th} produces a separate
 ## histogram.
 ##
 ## If @var{nbins} is given and is a scalar, then the histogram is produced with
 ## @var{nbin} bins.  If @var{bins} is a vector, then the center of each bin is
 ## defined by the values in @var{bins} and the number of bins is
 ## given by the number of elements in @var{bins}.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a vector of graphics handles to the
 ## line objects representing each histogram.
 ##
 ## If two output arguments are requested then no plot is made and
 ## the polar vectors necessary to plot the histogram are returned instead.
 ##
diff --git a/scripts/plot/draw/scatter.m b/scripts/plot/draw/scatter.m
--- a/scripts/plot/draw/scatter.m
+++ b/scripts/plot/draw/scatter.m
@@ -44,17 +44,17 @@
 ## The marker to use can be changed with the @var{style} argument; it is a
 ## string defining a marker in the same manner as the @code{plot} command.
 ## If no marker is specified it defaults to @qcode{"o"} or circles.
 ## If the argument @qcode{"filled"} is given then the markers are filled.
 ##
 ## Additional property/value pairs are passed directly to the underlying
 ## patch object.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created
 ## scatter object.
 ##
 ## Example:
 ##
 ## @example
diff --git a/scripts/plot/draw/scatter3.m b/scripts/plot/draw/scatter3.m
--- a/scripts/plot/draw/scatter3.m
+++ b/scripts/plot/draw/scatter3.m
@@ -44,17 +44,17 @@
 ## The marker to use can be changed with the @var{style} argument, that is a
 ## string defining a marker in the same manner as the @code{plot} command.
 ## If no marker is specified it defaults to @qcode{"o"} or circles.
 ## If the argument @qcode{"filled"} is given then the markers are filled.
 ##
 ## Additional property/value pairs are passed directly to the underlying
 ## patch object.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the hggroup
 ## object representing the points.
 ##
 ## @example
 ## @group
 ## [x, y, z] = peaks (20);
diff --git a/scripts/plot/draw/semilogx.m b/scripts/plot/draw/semilogx.m
--- a/scripts/plot/draw/semilogx.m
+++ b/scripts/plot/draw/semilogx.m
@@ -23,17 +23,17 @@
 ## @deftypefnx {} {} semilogx (@var{x}, @var{y}, @var{fmt})
 ## @deftypefnx {} {} semilogx (@var{hax}, @dots{})
 ## @deftypefnx {} {@var{h} =} semilogx (@dots{})
 ## Produce a 2-D plot using a logarithmic scale for the x-axis.
 ##
 ## See the documentation of @code{plot} for a description of the
 ## arguments that @code{semilogx} will accept.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created plot.
 ## @seealso{plot, semilogy, loglog}
 ## @end deftypefn
 
 ## Author: jwe
 
diff --git a/scripts/plot/draw/semilogxerr.m b/scripts/plot/draw/semilogxerr.m
--- a/scripts/plot/draw/semilogxerr.m
+++ b/scripts/plot/draw/semilogxerr.m
@@ -38,17 +38,17 @@
 ## @end example
 ##
 ## @noindent
 ## which produces a semi-logarithmic plot of @var{y} versus @var{x}
 ## with errors in the @var{y}-scale defined by @var{ey} and the plot
 ## format defined by @var{fmt}.  @xref{XREFerrorbar,,errorbar}, for available
 ## formats and additional information.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## @seealso{errorbar, semilogyerr, loglogerr}
 ## @end deftypefn
 
 ## Created: 20.2.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
diff --git a/scripts/plot/draw/semilogy.m b/scripts/plot/draw/semilogy.m
--- a/scripts/plot/draw/semilogy.m
+++ b/scripts/plot/draw/semilogy.m
@@ -23,17 +23,17 @@
 ## @deftypefnx {} {} semilogy (@var{x}, @var{y}, @var{fmt})
 ## @deftypefnx {} {} semilogy (@var{h}, @dots{})
 ## @deftypefnx {} {@var{h} =} semilogy (@dots{})
 ## Produce a 2-D plot using a logarithmic scale for the y-axis.
 ##
 ## See the documentation of @code{plot} for a description of the
 ## arguments that @code{semilogy} will accept.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created plot.
 ## @seealso{plot, semilogx, loglog}
 ## @end deftypefn
 
 ## Author: jwe
 
diff --git a/scripts/plot/draw/semilogyerr.m b/scripts/plot/draw/semilogyerr.m
--- a/scripts/plot/draw/semilogyerr.m
+++ b/scripts/plot/draw/semilogyerr.m
@@ -38,17 +38,17 @@
 ## @end example
 ##
 ## @noindent
 ## which produces a semi-logarithmic plot of @var{y} versus @var{x}
 ## with errors in the @var{y}-scale defined by @var{ey} and the plot
 ## format defined by @var{fmt}.  @xref{XREFerrorbar,,errorbar}, for available
 ## formats and additional information.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## @seealso{errorbar, semilogxerr, loglogerr}
 ## @end deftypefn
 
 ## Created: 20.2.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
diff --git a/scripts/plot/draw/slice.m b/scripts/plot/draw/slice.m
--- a/scripts/plot/draw/slice.m
+++ b/scripts/plot/draw/slice.m
@@ -53,17 +53,17 @@
 ##
 ## @item @qcode{"spline"}
 ## Cubic spline interpolation---smooth first and second derivatives
 ## throughout the curve.
 ## @end table
 ##
 ## The default method is @qcode{"linear"}.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created
 ## surface object.
 ##
 ## Examples:
 ##
 ## @example
diff --git a/scripts/plot/draw/sphere.m b/scripts/plot/draw/sphere.m
--- a/scripts/plot/draw/sphere.m
+++ b/scripts/plot/draw/sphere.m
@@ -21,17 +21,17 @@
 ## @deftypefnx {} {} sphere (@var{n})
 ## @deftypefnx {} {} sphere (@var{hax}, @dots{})
 ## @deftypefnx {} {[@var{x}, @var{y}, @var{z}] =} sphere (@dots{})
 ## Plot a 3-D unit sphere.
 ##
 ## The optional input @var{n} determines the number of faces around the
 ## circumference of the sphere.  The default value is 20.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## If outputs are requested @code{sphere} returns three matrices in
 ## @code{meshgrid} format such that @code{surf (@var{x}, @var{y}, @var{z})}
 ## generates a unit sphere.
 ##
 ## Example:
 ##
diff --git a/scripts/plot/draw/stairs.m b/scripts/plot/draw/stairs.m
--- a/scripts/plot/draw/stairs.m
+++ b/scripts/plot/draw/stairs.m
@@ -32,18 +32,18 @@
 ## (@code{@var{x} = 1:numel (@var{y})}).
 ##
 ## The style to use for the plot can be defined with a line style @var{style}
 ## of the same format as the @code{plot} command.
 ##
 ## Multiple property/value pairs may be specified, but they must appear in
 ## pairs.
 ##
-## If the first argument @var{hax} is an axis handle, then plot into this axis,
-## rather than the current axis handle returned by @code{gca}.
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
+## rather than the current axes returned by @code{gca}.
 ##
 ## If one output argument is requested, return a graphics handle to the
 ## created plot.  If two output arguments are specified, the data are generated
 ## but not plotted.  For example,
 ##
 ## @example
 ## stairs (x, y);
 ## @end example
diff --git a/scripts/plot/draw/stem.m b/scripts/plot/draw/stem.m
--- a/scripts/plot/draw/stem.m
+++ b/scripts/plot/draw/stem.m
@@ -49,17 +49,17 @@
 ## @end example
 ##
 ## @noindent
 ## plots 10 stems with heights from 2 to 20 in red;
 ##
 ## Optional property/value pairs may be specified to control the appearance
 ## of the plot.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a handle to a @nospell{"stem series"}
 ## hggroup.  The single hggroup handle has all of the graphical elements
 ## comprising the plot as its children; This allows the properties of
 ## multiple graphics objects to be changed by modifying just a single
 ## property of the @nospell{"stem series"} hggroup.
 ##
diff --git a/scripts/plot/draw/stem3.m b/scripts/plot/draw/stem3.m
--- a/scripts/plot/draw/stem3.m
+++ b/scripts/plot/draw/stem3.m
@@ -32,17 +32,17 @@
 ##
 ## The line style can be altered by the @code{linespec} argument in the same
 ## manner as the @code{plot} command.  If the @qcode{"filled"} argument is
 ## present the markers at the top of the stems will be filled in.
 ##
 ## Optional property/value pairs may be specified to control the appearance
 ## of the plot.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a handle to the @nospell{"stem series"}
 ## hggroup containing the line and marker objects used for the plot.
 ## @xref{XREFstem,,stem}, for a description of the @nospell{"stem series"}
 ## object.
 ##
 ## Example:
diff --git a/scripts/plot/draw/surf.m b/scripts/plot/draw/surf.m
--- a/scripts/plot/draw/surf.m
+++ b/scripts/plot/draw/surf.m
@@ -39,17 +39,17 @@
 ## change the colormap to control the appearance.
 ##
 ## Optionally, the color of the surface can be specified independently of
 ## @var{z} by supplying a color matrix, @var{c}.
 ##
 ## Any property/value pairs are passed directly to the underlying surface
 ## object.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created
 ## surface object.
 ##
 ## Note: The exact appearance of the surface can be controlled with the
 ## @code{shading} command or by using @code{set} to control surface object
 ## properties.
diff --git a/scripts/plot/draw/surface.m b/scripts/plot/draw/surface.m
--- a/scripts/plot/draw/surface.m
+++ b/scripts/plot/draw/surface.m
@@ -32,17 +32,17 @@
 ## (@var{x}(j), @var{y}(i), @var{z}(i,j)).  Thus, columns of @var{z} correspond
 ## to different @var{x} values and rows of @var{z} correspond to different
 ## @var{y} values.  If only a single input @var{z} is given then @var{x} is
 ## taken to be @code{1:columns (@var{z})} and @var{y} is
 ## @code{1:rows (@var{z})}.
 ##
 ## Any property/value input pairs are assigned to the surface object.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created
 ## surface object.
 ## @seealso{surf, mesh, patch, line}
 ## @end deftypefn
 
 ## Author: jwe
diff --git a/scripts/plot/draw/surfc.m b/scripts/plot/draw/surfc.m
--- a/scripts/plot/draw/surfc.m
+++ b/scripts/plot/draw/surfc.m
@@ -39,17 +39,17 @@
 ## change the colormap to control the appearance.
 ##
 ## Optionally, the color of the surface can be specified independently of
 ## @var{z} by supplying a color matrix, @var{c}.
 ##
 ## Any property/value pairs are passed directly to the underlying surface
 ## object.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created
 ## surface object.
 ##
 ## Note: The exact appearance of the surface can be controlled with the
 ## @code{shading} command or by using @code{set} to control surface object
 ## properties.
diff --git a/scripts/plot/draw/surfl.m b/scripts/plot/draw/surfl.m
--- a/scripts/plot/draw/surfl.m
+++ b/scripts/plot/draw/surfl.m
@@ -55,17 +55,17 @@
 ##
 ## @item @qcode{"D"} strength of diffuse reflection
 ##
 ## @item @qcode{"SP"} strength of specular reflection
 ##
 ## @item @qcode{"EXP"} specular exponent
 ## @end table
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created
 ## surface object.
 ##
 ## Example:
 ##
 ## @example
diff --git a/scripts/plot/draw/surfnorm.m b/scripts/plot/draw/surfnorm.m
--- a/scripts/plot/draw/surfnorm.m
+++ b/scripts/plot/draw/surfnorm.m
@@ -31,17 +31,17 @@
 ## taken to be @code{1:columns (@var{z})} and @var{y} is
 ## @code{1:rows (@var{z})}.
 ##
 ## If no return arguments are requested, a surface plot with the normal
 ## vectors to the surface is plotted.
 ##
 ## Any property/value input pairs are assigned to the surface object.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## If output arguments are requested then the components of the normal
 ## vectors are returned in @var{nx}, @var{ny}, and @var{nz} and no plot is
 ## made.  The normal vectors are unnormalized (magnitude != 1).  To normalize,
 ## use
 ##
 ## @example
diff --git a/scripts/plot/draw/waterfall.m b/scripts/plot/draw/waterfall.m
--- a/scripts/plot/draw/waterfall.m
+++ b/scripts/plot/draw/waterfall.m
@@ -42,17 +42,17 @@
 ## change the colormap to control the appearance.
 ##
 ## Optionally the color of the mesh can be specified independently of @var{z}
 ## by supplying a color matrix, @var{c}.
 ##
 ## Any property/value pairs are passed directly to the underlying surface
 ## object.
 ##
-## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created
 ## surface object.
 ##
 ## @seealso{meshz, mesh, meshc, contour, surf, surface, ribbon, meshgrid, hidden, shading, colormap, caxis}
 ## @end deftypefn
 
diff --git a/scripts/plot/util/axes.m b/scripts/plot/util/axes.m
--- a/scripts/plot/util/axes.m
+++ b/scripts/plot/util/axes.m
@@ -20,24 +20,24 @@
 ## @deftypefn  {} {} axes ()
 ## @deftypefnx {} {} axes (@var{property}, @var{value}, @dots{})
 ## @deftypefnx {} {} axes (@var{hax})
 ## @deftypefnx {} {@var{h} =} axes (@dots{})
 ## Create an axes object and return a handle to it, or set the current axes
 ## to @var{hax}.
 ##
 ## Called without any arguments, or with @var{property}/@var{value} pairs,
-## construct a new axes.  For accepted properties and corresponding
-## values, @pxref{XREFset,,set}.
+## construct a new axes.  For accepted properties and corresponding values,
+## @pxref{XREFset,,set}.
 ##
 ## Called with a single axes handle argument @var{hax}, the function makes
-## @var{hax} the current axis.  It also restacks the axes in the
-## corresponding figure so that @var{hax} is the first entry in the list
-## of children.  This causes @var{hax} to be displayed on top of any other
-## axes objects (Z-order stacking).
+## @var{hax} the current axes.  It also restacks the axes in the corresponding
+## figure so that @var{hax} is the first entry in the list of children.  This
+## causes @var{hax} to be displayed on top of any other axes objects (Z-order
+## stacking).
 ##
 ## @seealso{gca, set, get}
 ## @end deftypefn
 
 ## Author: jwe
 
 function h = axes (varargin)
 
diff --git a/scripts/plot/util/cla.m b/scripts/plot/util/cla.m
--- a/scripts/plot/util/cla.m
+++ b/scripts/plot/util/cla.m
@@ -22,22 +22,22 @@
 ## @deftypefnx {} {} cla (@var{hax})
 ## @deftypefnx {} {} cla (@var{hax}, "reset")
 ## Clear the current axes.
 ##
 ## @code{cla} operates by deleting child graphic objects with visible
 ## handles (HandleVisibility = @qcode{"on"}).
 ##
 ## If the optional argument @qcode{"reset"} is specified, delete all child
-## objects including those with hidden handles and reset all axis properties
+## objects including those with hidden handles and reset all axes properties
 ## to their defaults.  However, the following properties are not reset:
 ## Position, Units.
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on
-## this axis rather than the current axes returned by @code{gca}.
+## this axes rather than the current axes returned by @code{gca}.
 ## @seealso{clf, delete, reset}
 ## @end deftypefn
 
 ## Author: Ben Abbott <bpabbott@mac.com>
 ## Created: 2008-10-03
 
 function cla (varargin)
 
diff --git a/scripts/plot/util/gca.m b/scripts/plot/util/gca.m
--- a/scripts/plot/util/gca.m
+++ b/scripts/plot/util/gca.m
@@ -13,19 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {} {@var{h} =} gca ()
-## Return a handle to the current axis object.
+## Return a handle to the current axes object.
 ##
-## The current axis is the default target for graphics output.  In the case
+## The current axes is the default target for graphics output.  In the case
 ## of a figure with multiple axes, @code{gca} returns the last created axes
 ## or the last axes that was clicked on with the mouse.
 ##
 ## If no current axes object exists, create one and return its handle.  The
 ## handle may then be used to examine or set properties of the axes.  For
 ## example,
 ##
 ## @example
@@ -34,17 +34,17 @@
 ## set (ax, "position", [0.5, 0.5, 0.5, 0.5]);
 ## @end group
 ## @end example
 ##
 ## @noindent
 ## creates an empty axes object and then changes its location and size in the
 ## figure window.
 ##
-## Note: To find the current axis without creating a new axes object if it
+## Note: To find the current axes without creating a new axes object if it
 ## does not exist, query the @qcode{"CurrentAxes"} property of a figure.
 ##
 ## @example
 ## get (gcf, "currentaxes");
 ## @end example
 ## @seealso{gcf, gco, gcbf, gcbo, get, set}
 ## @end deftypefn
 
diff --git a/scripts/plot/util/hold.m b/scripts/plot/util/hold.m
--- a/scripts/plot/util/hold.m
+++ b/scripts/plot/util/hold.m
@@ -30,25 +30,25 @@
 ## Retain plot data and settings so that subsequent plot commands are displayed
 ## on a single graph.  Line color and line style are advanced for each new plot
 ## added.
 ##
 ## @item hold all (deprecated)
 ## Equivalent to @code{hold on}.
 ##
 ## @item hold off
-## Restore default graphics settings which clear the graph and reset axis
+## Restore default graphics settings which clear the graph and reset axes
 ## properties before each new plot command.  (default).
 ##
 ## @item hold
 ## Toggle the current hold state.
 ## @end table
 ##
 ## When given the additional argument @var{hax}, the hold state is modified
-## for this axis rather than the current axes returned by @code{gca}.
+## for this axes rather than the current axes returned by @code{gca}.
 ##
 ## To query the current hold state use the @code{ishold} function.
 ## @seealso{ishold, cla, clf, newplot}
 ## @end deftypefn
 
 function hold (varargin)
 
   if (nargin > 0 && isscalar (varargin{1}) && isaxes (varargin{1}))
diff --git a/scripts/plot/util/newplot.m b/scripts/plot/util/newplot.m
--- a/scripts/plot/util/newplot.m
+++ b/scripts/plot/util/newplot.m
@@ -20,17 +20,17 @@
 ## @deftypefn  {} {} newplot ()
 ## @deftypefnx {} {} newplot (@var{hfig})
 ## @deftypefnx {} {} newplot (@var{hax})
 ## @deftypefnx {} {@var{hax} =} newplot (@dots{})
 ## Prepare graphics engine to produce a new plot.
 ##
 ## This function is called at the beginning of all high-level plotting
 ## functions.  It is not normally required in user programs.  @code{newplot}
-## queries the @qcode{"NextPlot"} field of the current figure and axis to
+## queries the @qcode{"NextPlot"} field of the current figure and axes to
 ## determine what to do.
 ##
 ## @multitable @columnfractions .25 .75
 ## @headitem Figure NextPlot @tab Action
 ## @item @qcode{"new"} @tab Create a new figure and make it the current figure.
 ##
 ## @item @qcode{"add"} (default) @tab Add new graphic objects to the current
 ## figure.
@@ -42,48 +42,48 @@
 ##
 ## @item @qcode{"replace"} @tab Delete all child objects of the figure and
 ## reset all figure properties to their defaults.  However, the following
 ## four properties are not reset: Position, Units, PaperPosition, PaperUnits.
 ## This is equivalent to @code{clf reset}.
 ## @end multitable
 ##
 ## @multitable @columnfractions .25 .75
-## @headitem Axis NextPlot @tab Action
+## @headitem Axes NextPlot @tab Action
 ## @item @qcode{"add"} @tab Add new graphic objects to the current axes.  This
 ## is equivalent to @code{hold on}.
 ##
 ## @item @qcode{"replacechildren"} @tab Delete child objects whose
-## HandleVisibility is set to @qcode{"on"}, but leave axis properties
+## HandleVisibility is set to @qcode{"on"}, but leave axes properties
 ## unmodified.  This typically clears a plot, but preserves special settings
 ## such as log scaling for axes.  This is equivalent to @code{cla}.
 ##
 ## @item @qcode{"replace"} (default) @tab Delete all child objects of the
-## axis and reset all axis properties to their defaults.  However, the
+## axes and reset all axes properties to their defaults.  However, the
 ## following properties are not reset: Position, Units.  This is equivalent
 ## to @code{cla reset}.
 ## @end multitable
 ##
 ## If the optional input @var{hfig} or @var{hax} is given then prepare the
 ## specified figure or axes rather than the current figure and axes.
 ##
 ## The optional return value @var{hax} is a graphics handle to the created
 ## axes object (not figure).
 ##
 ## @strong{Caution:} Calling @code{newplot} may change the current figure and
-## current axis.
+## current axes.
 ## @end deftypefn
 
 ## FIXME: The Matlab function takes an optional list of file handles, hsave,
 ##        which are not deleted when the figure and axes are prepared.
 ##        I'm sure there is a good reason for that, but coding such
 ##        compatibility is really tricky and doesn't serve much purpose since
 ##        newplot is nearly exclusively used by Octave's internal plotting
 ##        functions.  In Octave's case the argument is almost always null,
-##        or occasionally the axis handle to plot into.
+##        or occasionally the axes handle to plot into.
 
 function hax = newplot (hsave = [])
 
   if (nargin > 1)
     print_usage ();
   endif
 
   cf = [];
diff --git a/scripts/plot/util/subplot.m b/scripts/plot/util/subplot.m
--- a/scripts/plot/util/subplot.m
+++ b/scripts/plot/util/subplot.m
@@ -54,41 +54,41 @@
 ## +-----+-----+-----+
 ## |  4  |  5  |  6  |
 ## +-----+-----+-----+
 ## @end group
 ## @end example
 ##
 ## @end ifnottex
 ##
-## @var{index} may also be a vector.  In this case, the new axis will enclose
+## @var{index} may also be a vector.  In this case, the new axes will enclose
 ## the grid locations specified.  The first demo illustrates this:
 ##
 ## @example
 ## demo ("subplot", 1)
 ## @end example
 ##
 ## The index of the subplot to make active may also be specified by its axes
 ## handle, @var{hax}, returned from a previous @code{subplot} command.
 ##
 ## If the option @qcode{"align"} is given then the plot boxes of the subwindows
-## will align, but this may leave no room for axis tick marks or labels.
+## will align, but this may leave no room for axes tick marks or labels.
 ##
-## If the option @qcode{"replace"} is given then the subplot axis will be
-## reset, rather than just switching the current axis for plotting to the
+## If the option @qcode{"replace"} is given then the subplot axes will be
+## reset, rather than just switching the current axes for plotting to the
 ## requested subplot.
 ##
 ## The @qcode{"position"} property can be used to exactly position the subplot
 ## axes within the current figure.  The option @var{pos} is a 4-element vector
 ## [x, y, width, height] that determines the location and size of the axes.
 ## The values in @var{pos} are normalized in the range [0,1].
 ##
 ## Any property/value pairs are passed directly to the underlying axes object.
 ##
-## If the output @var{hax} is requested, subplot returns the axis handle for
+## If the output @var{hax} is requested, subplot returns the axes handle for
 ## the subplot.  This is useful for modifying the properties of a subplot
 ## using @code{set}.
 ## @seealso{axes, plot, gca, set}
 ## @end deftypefn
 
 ## Author: Vinayak Dutt <Dutt.Vinayak@mayo.EDU>
 ## Adapted-By: jwe
 
