# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1232049529 18000
#      Thu Jan 15 14:58:49 2009 -0500
# Node ID 17e0ad741fac363cfe72d8b0290a6e9bc379f4e7
# Parent  bf6befcfa70add2114d72d5bad62b6cccd6f0ef2
reshape: improve error message

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -437,17 +437,19 @@ Array<T>::reshape (const dim_vector& new
 {
   Array<T> retval;
 
   if (dimensions != new_dims)
     {
       if (dimensions.numel () == new_dims.numel ())
 	retval = Array<T> (*this, new_dims);
       else
-	(*current_liboctave_error_handler) ("reshape: size mismatch");
+	(*current_liboctave_error_handler)
+	  ("reshape: size mismatch (%s != %s)", dimensions.str (),
+	   new_dims.str ());
     }
   else
     retval = *this;
 
   return retval;
 }
 
 // Helper class for multi-d dimension permuting (generalized transpose).
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2009-01-15  John W. Eaton  <jwe@octave.org>
+
+	* Sparse.cc (Sparse<T>::reshape): Include mismatched dimensions in
+	error message.
+	* Array.cc (Array<T>::reshape): Likewise.
+	From Robert Millan <rmh@aybabtu.com>.
+
 2009-01-14  Jaroslav Hajek  <highegg@gmail.com>
 	
 	* Array.h (Array<T>::rep, Array<T>::dimensions): Make protected.
 	* Array.cc (Array<T>::make_unique): Move implementation here.
 	(Array<T>::fill): Dtto.
 	* DiagArray2.h (DiagArray2<T>): Reimplement without abusing
 	Array<T> internals.
 	(DiagArray2<T>::operator Array2<T>): New method.
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -791,17 +791,19 @@ Sparse<T>::reshape (const dim_vector& ne
 		kk = jj;
 		retval.xdata(j) = data(j);
 		retval.xridx(j) = ii;
 	      }
 	  for (octave_idx_type k = kk; k < new_nc; k++)
 	    retval.xcidx(k+1) = new_nnz;
 	}
       else
-	(*current_liboctave_error_handler) ("reshape: size mismatch");
+	(*current_liboctave_error_handler)
+	  ("reshape: size mismatch (%s != %s)", dimensions.str (),
+	   new_dims.str ());
     }
   else
     retval = *this;
 
   return retval;
 }
 
 template <class T>
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-01-15  John W. Eaton  <jwe@octave.org>
+
+	* data.cc (Freshape): Include mismatched dimensions in error message.
+	From Robert Millan <rmh@aybabtu.com>.
+
 2009-01-14  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov.cc (octave_value::maybe_economize): New method.
 	(octave_value::non_null_value): rename to storable_value.
 	(octave_value::make_non_null_value): rename to make_storable_value.
 	* ov-base.h (octave_base_value::maybe_economize): New method.
 	* ov-base-mat.h (octave_base_mat::maybe_economize): New override.
 	* oct-obj.cc (octave_value_list::normalize_null_values):
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -4532,20 +4532,22 @@ by an empty argument.\n\
 
   new_dims.resize (n);
 
   for (octave_idx_type i = 0; i < n; i++)
     new_dims(i) = new_size(i);
 
   octave_value arg = args(0);
 
-  if (new_dims.numel () == arg.numel ())
-    retval = (new_dims == arg.dims ()) ? arg : arg.reshape (new_dims);
+  dim_vector dims = arg.dims ();
+
+  if (new_dims.numel () == dims.numel ())
+    retval = (new_dims == dims) ? arg : arg.reshape (new_dims);
   else
-    error ("reshape: size mismatch");
+    error ("reshape: size mismatch (%s != %s)", dims.str (), new_dims.str ());
 
   return retval;
 }
 
 /*
 
 %!assert(size (reshape (ones (4, 4), 2, 8)), [2, 8])
 %!assert(size (reshape (ones (4, 4), 8, 2)), [8, 2])
