# HG changeset patch
# User Shai Ayal <shaiay@users.sourceforge.net>
# Date 1284031778 -10800
#      Thu Sep 09 14:29:38 2010 +0300
# Node ID 2786e3b7072eacb0aff918722f9880c47b9b2cfb
# Parent  ee9d74048827c969ab21000b1bbe261305d8ba28
gl2ps print to fid instead of filename

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2010-09-09  Shai Ayal  <shaiay@users.sourceforge.net>
+
+	* gl2ps-renderer.cc: Renders to a previously opened fid.
+	* gl2ps-renderer.h: Ditto.
+	* DLD-FUNCTIONS/fltk_backend.cc: print now accepts fid instead
+	of filename to use with above change
+
 2010-09-07  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/__magick_read__.cc (maybe_initialize_magick): New
 	helper function. Move initialization code & static variable here.
 	(F__magick_read__, F__magick_write__, F__magick_finfo__): Call it
 	here.
 
 2010-09-03  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/fltk_backend.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/fltk_backend.cc
@@ -82,17 +82,17 @@ left double click - autoscale\n\
 ";
 
 
 class OpenGL_fltk : public Fl_Gl_Window
 {
 public:
   OpenGL_fltk (int xx, int yy, int ww, int hh, double num)
     : Fl_Gl_Window (xx, yy, ww, hh, 0), number (num), renderer (),
-      in_zoom (false), zoom_box (),  print_filename ()
+      in_zoom (false), zoom_box (),  print_fid (-1)
   {
     // Ask for double buffering and a depth buffer.
     mode (FL_DEPTH | FL_DOUBLE);
   }
 
   ~OpenGL_fltk (void) { }
 
   void zoom (bool z) 
@@ -100,30 +100,30 @@ public:
     in_zoom = z;
     if (! in_zoom)
       hide_overlay ();
   }
 
   bool zoom (void) { return in_zoom; }
   void set_zoom_box (const Matrix& zb) { zoom_box = zb; }
   
-  void print (const std::string& filename, const std::string& term)
+  void print (const int fid, const std::string& term)
   {
-    print_filename  = filename;
+    print_fid  = fid;
     print_term  = term;
   }
 
 private:
   double number;
   opengl_renderer renderer;
   bool in_zoom;
   // (x1,y1,x2,y2)
   Matrix zoom_box;
 
-  std::string print_filename;
+  int print_fid;
   std::string print_term;
 
   void setup_viewport (int ww, int hh)
   {
     glMatrixMode (GL_PROJECTION);
     glLoadIdentity ();
     glViewport (0, 0, ww, hh);
   }
@@ -131,21 +131,21 @@ private:
   void draw (void)
   {
     if (! valid ())
       {
         valid (1);
         setup_viewport (w (), h ());
       }
 
-    if (! print_filename.empty ())
+    if ( print_fid > 0 )
       {
-        opengl_renderer *rend = new glps_renderer (print_filename, print_term);
+        opengl_renderer *rend = new glps_renderer (print_fid, print_term);
         rend->draw (gh_manager::lookup (number));
-        print_filename = "";
+        print_fid = -1;
         delete rend;
       }
     else
       {
         renderer.draw (gh_manager::lookup (number));
 
         if (zoom ())
           overlay ();
@@ -333,19 +333,19 @@ public:
     this->hide ();
     delete canvas;
     delete status;
   }
 
   // FIXME -- this could change.
   double number (void) { return fp.get___myhandle__ ().value (); }
 
-  void print (const std::string& fname, const std::string& term)
+  void print (const int fid, const std::string& term)
   {
-    canvas->print (fname, term);
+    canvas->print (fid, term);
 
     // Print immediately so the output file will exist when the drawnow
     // command is done.
     mark_modified ();
     Fl::wait (fltk_maxtime);
   }
 
   void mark_modified (void)
@@ -953,20 +953,20 @@ public:
     return instance_ok () ? instance->do_get_size (idx) : Matrix ();
   }
 
   static Matrix get_size (const graphics_handle& gh)
   {
     return get_size (hnd2idx (gh));
   }
 
-  static void print (const graphics_handle& gh , const std::string& filename,  const std::string& term)
+  static void print (const graphics_handle& gh , const int fid,  const std::string& term)
   {
     if (instance_ok ())
-      instance->do_print (hnd2idx(gh), filename, term);
+      instance->do_print (hnd2idx(gh), fid, term);
   }
 
 private:
 
   static figure_manager *instance;
 
   figure_manager (void) { }
 
@@ -1055,22 +1055,22 @@ private:
       {
         sz(0) = win->second->w ();
         sz(1) = win->second->h ();
       }
 
     return sz;
   }
 
-  void do_print (int idx, const std::string& filename,  const std::string& term)
+  void do_print (int idx, const int fid,  const std::string& term)
   {
     wm_iterator win;
     if ((win = windows.find (idx)) != windows.end ())
       {
-        win->second->print (filename, term);
+        win->second->print (fid, term);
       }
   }
 
   // FIXME -- default size should be configurable.
   void default_size (int& x, int& y, int& w, int& h)
   {
     x = 0;
     y = 0;
@@ -1223,18 +1223,25 @@ public:
     __fltk_redraw__ ();
   }
 
   void print_figure (const graphics_object& go,
                      const std::string& term,
                      const std::string& file, bool /*mono*/,
                      const std::string& /*debug_file*/) const 
   { 
-    figure_manager::print (go.get_handle (), file, term);
-    redraw_figure (go);
+    int fid;
+    std::istringstream istr (file);
+    if (istr >> fid)
+      {
+        figure_manager::print (go.get_handle (), fid, term);
+        redraw_figure (go);
+      }
+    else
+      error ("fltk_backend: filename should be fid");
   }
 
   Matrix get_canvas_size (const graphics_handle& fh) const
   {
     return figure_manager::get_size (fh);
   }
 
   double get_screen_resolution (void) const
diff --git a/src/gl2ps-renderer.cc b/src/gl2ps-renderer.cc
--- a/src/gl2ps-renderer.cc
+++ b/src/gl2ps-renderer.cc
@@ -38,17 +38,17 @@ void
 glps_renderer::draw (const graphics_object& go) 
 {
   static bool in_draw = false;
   
   if (!in_draw) 
     {
       in_draw = true;
 
-      FILE *fp = fopen (filename.c_str (), "wb");
+      FILE *fp = fdopen (fid, "wb");
       GLint buffsize = 0, state = GL2PS_OVERFLOW;
       GLint viewport[4];
 
       glGetIntegerv (GL_VIEWPORT, viewport);
 
       GLint gl2ps_term;
       if (term.find ("eps") != std::string::npos) gl2ps_term = GL2PS_EPS;
       else if (term.find ("pdf") != std::string::npos) gl2ps_term = GL2PS_PDF;
@@ -69,17 +69,17 @@ glps_renderer::draw (const graphics_obje
         { 
           buffsize += 1024*1024;
           gl2psBeginPage ("glps_renderer figure", "Octave", viewport,
                           gl2ps_term, GL2PS_BSP_SORT,
                           (GL2PS_SILENT | GL2PS_SIMPLE_LINE_OFFSET
                            | GL2PS_NO_BLENDING | GL2PS_OCCLUSION_CULL
                            | GL2PS_BEST_ROOT | gl2ps_text), 
                           GL_RGBA, 0, NULL, 0, 0, 0,
-                          buffsize, fp, filename.c_str () );
+                          buffsize, fp, "" );
 
           opengl_renderer::draw (go);
           state = gl2psEndPage ();
         }
 
       gnulib::fclose (fp);
 
       in_draw = 0;
diff --git a/src/gl2ps-renderer.h b/src/gl2ps-renderer.h
--- a/src/gl2ps-renderer.h
+++ b/src/gl2ps-renderer.h
@@ -26,18 +26,18 @@ along with Octave; see the file COPYING.
 #include "gl-render.h"
 #include "gl2ps.h"
 
 class 
 OCTINTERP_API
 glps_renderer : public opengl_renderer
 {
 public:
-  glps_renderer (const std::string& _filename, const std::string& _term) 
-    : opengl_renderer () , filename (_filename), term (_term) { }
+  glps_renderer (const int _fid, const std::string& _term) 
+    : opengl_renderer () , fid (_fid), term (_term) { }
 
   ~glps_renderer (void) { }
 
   virtual void draw (const graphics_object& go);
 
 protected:
 
   virtual Matrix render_text (const std::string& txt,
@@ -69,15 +69,15 @@ protected:
   }
 
   virtual void set_linewidth (float w)
   {
     gl2psLineWidth (w);
   }
 
 private:
-  std::string filename;
+  int fid;
   caseless_str term;
   double fontsize;
   std::string fontname;
 };
 
 #endif
