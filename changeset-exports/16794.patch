# HG changeset patch
# User John Donoghue <john.donoghue@ieee.org>
# Date 1371780298 14400
#      Thu Jun 20 22:04:58 2013 -0400
# Node ID 1d1f02e0f6b47b99a8c501952d457c02a9a20772
# Parent  cc1657be1ee7e1d8b191879bf12b84c71adc24bd
GUI: enable clipboard content detection for terminal window context menu

* libgui/qterminal/libqterminal/QTerminal.h, libgui/qterminal/libqterminal/QTerminal.cc
 (QTerminal::handleCustomContentMenuRequested): Use clinboard and tem window selection buffer to determine enable state of copy/paste actions.
 (QTerminal::QTerminal): save content actions for copy and paste to variables.

* libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp, libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h
 (QUnixTerminalImpl::selectedText): New function.

* libgui/qterminal/libqterminal/unix/TerminalView.cpp, libgui/qterminal/libqterminal/unix/TerminalView.h
 (TerminalView::selectedText): New function.

* libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp, libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h
 (QWinTerminalImpl::selectedText): New function.

diff --git a/libgui/qterminal/libqterminal/QTerminal.h b/libgui/qterminal/libqterminal/QTerminal.h
--- a/libgui/qterminal/libqterminal/QTerminal.h
+++ b/libgui/qterminal/libqterminal/QTerminal.h
@@ -25,36 +25,40 @@ along with Foobar.  If not, see <http://
 
 #include <QSettings>
 #include <QKeySequence>
 #include <QWidget>
 #include <QStringList>
 #include <QColor>
 #include <QList>
 #include <QMenu>
+#include <QClipboard>
+#include <QApplication>
 
 class QTerminal : public QWidget
 {
   Q_OBJECT
 
 public:
 
   static QTerminal *create (QWidget *xparent = 0);
 
   static QList<QColor> default_colors (void);
 
   static QStringList color_names (void);
 
   virtual ~QTerminal (void) { }
 
-  virtual void setTerminalFont(const QFont& font) = 0;
+  virtual void setTerminalFont (const QFont& font) = 0;
+
+  virtual void setSize (int h, int v) = 0;
 
-  virtual void setSize(int h, int v) = 0;
+  virtual void sendText (const QString& text) = 0;
 
-  virtual void sendText(const QString& text) = 0;
+  virtual QString selectedText () = 0;
 
   enum CursorType
     {
       UnderlineCursor,
       BlockCursor,
       IBeamCursor
     };
 
@@ -83,34 +87,41 @@ signals:
 public slots:
 
   virtual void copyClipboard (void) = 0;
 
   virtual void pasteClipboard (void) = 0;
 
   virtual void handleCustomContextMenuRequested (const QPoint& at)
   {
+    QClipboard * cb = QApplication::clipboard ();
+
+    _paste_action->setEnabled (cb->text().length() > 0);
+    _copy_action->setEnabled (selectedText().length() > 0);
+    
     _contextMenu->move (mapToGlobal (at));
     _contextMenu->show ();
   }
 
   void notice_settings (const QSettings *settings);
 
 protected:
 
   QTerminal (QWidget *xparent = 0) : QWidget (xparent)
   {
     setContextMenuPolicy (Qt::CustomContextMenu);
 
     _contextMenu = new QMenu (this);
 
-    _contextMenu->addAction (QIcon (":/actions/icons/editcopy.png"),
+    _copy_action = _contextMenu->addAction (
+                             QIcon (":/actions/icons/editcopy.png"),
                              tr ("Copy"), this, SLOT (copyClipboard ()));
 
-    _contextMenu->addAction (QIcon (":/actions/icons/editpaste.png"),
+    _paste_action = _contextMenu->addAction (
+                            QIcon (":/actions/icons/editpaste.png"),
                             tr ("Paste"), this, SLOT (pasteClipboard ()));
 
     _contextMenu->addSeparator ();
 
     _contextMenu->addAction (tr ("Clear All"), parent (),
                              SLOT (handle_clear_command_window_request ()));
 
     connect (this, SIGNAL (customContextMenuRequested (QPoint)),
@@ -127,11 +138,13 @@ protected:
 
     connect (xparent, SIGNAL (pasteClipboard_signal ()),
              this, SLOT (pasteClipboard ()));
   }
 
 private:
 
     QMenu *_contextMenu;
+    QAction * _copy_action;
+    QAction * _paste_action;
 };
 
 #endif // QTERMINAL_H
diff --git a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
@@ -196,8 +196,12 @@ void QUnixTerminalImpl::copyClipboard()
     m_terminalView->copyClipboard();
 }
 
 void QUnixTerminalImpl::pasteClipboard()
 {
     m_terminalView->pasteClipboard();
 }
 
+QString QUnixTerminalImpl::selectedText ()
+{
+  return m_terminalView->selectedText ();
+}
diff --git a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h
--- a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h
+++ b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h
@@ -43,16 +43,18 @@ public:
 
     void setCursorType(CursorType type, bool blinking);
 
     void setBackgroundColor (const QColor& color);
     void setForegroundColor (const QColor& color);
     void setSelectionColor (const QColor& color);
     void setCursorColor (bool useForegroundColor, const QColor& color);
 
+    QString selectedText();
+
 public slots:
     void copyClipboard();
     void pasteClipboard();
 
 protected:
     void showEvent(QShowEvent *);
     virtual void resizeEvent(QResizeEvent *);   
 
diff --git a/libgui/qterminal/libqterminal/unix/TerminalView.cpp b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
--- a/libgui/qterminal/libqterminal/unix/TerminalView.cpp
+++ b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
@@ -2693,8 +2693,14 @@ uint TerminalView::lineSpacing() const
   return _lineSpacing;
 }
 
 void TerminalView::setLineSpacing(uint i)
 {
   _lineSpacing = i;
   setVTFont(font()); // Trigger an update.
 }
+
+QString TerminalView::selectedText ()
+{
+  QString text = _screenWindow->selectedText (_preserveLineBreaks);
+  return text;
+}
diff --git a/libgui/qterminal/libqterminal/unix/TerminalView.h b/libgui/qterminal/libqterminal/unix/TerminalView.h
--- a/libgui/qterminal/libqterminal/unix/TerminalView.h
+++ b/libgui/qterminal/libqterminal/unix/TerminalView.h
@@ -318,16 +318,18 @@ public:
         /** A silent, visual bell (eg. inverting the display's colors briefly) */
         VisualBell=2,
         /** No bell effects */
         NoBell=3
     };
 
     void setSelection(const QString &t);
 
+    QString selectedText ();
+
     /**
      * Reimplemented.  Has no effect.  Use setVTFont() to change the font
      * used to draw characters in the display.
      */
     virtual void setFont(const QFont &);
 
 
     /** Returns the font used to draw characters in the display */
diff --git a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
@@ -1456,8 +1456,17 @@ void QWinTerminalImpl::copyClipboard (vo
 
 void QWinTerminalImpl::pasteClipboard (void)
 {
   QString text = QApplication::clipboard()->text (QClipboard::Clipboard);
 
   if (! text.isEmpty ())
     sendText (text);
 }
+
+
+//////////////////////////////////////////////////////////////////////////////
+
+QString QWinTerminalImpl::selectedText ()
+{
+  QString selection = d->getSelection ();
+  return selection;
+}
diff --git a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h
--- a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h
+++ b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h
@@ -55,16 +55,18 @@ public:
   void sendText (const QString& s);
   void setCursorType (CursorType type, bool blinking);
 
   void setBackgroundColor (const QColor& color);
   void setForegroundColor (const QColor& color);
   void setSelectionColor (const QColor& color);
   void setCursorColor (bool useForegoundColor, const QColor& color);
 
+  QString selectedText ();
+
 public slots:
   void copyClipboard (void);
   void pasteClipboard (void);
   void blinkCursorEvent (void);
 
 signals:
   void terminated (void);
   void titleChanged (const QString&);
