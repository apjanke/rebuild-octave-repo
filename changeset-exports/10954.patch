# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1283984128 14400
#      Wed Sep 08 18:15:28 2010 -0400
# Node ID ee9d74048827c969ab21000b1bbe261305d8ba28
# Parent  9c0b366583cb4d6b5af8ca2645316a5025e09783
Consolidate gs code into print.m.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,13 @@
 2010-09-08  Ben Abbott <bpabbott@mac.com>
 
+	* plot/__fltk_print__.m, plot/private/__ghostscript__.m,
+	plot/__gnuplot_print__.m, plot/__print_parse_opts__.m,
+	plot/print.m: Consolidate gs code into print.m.
 	* plot/colorbar.m, plot/axis.m,
 	plot/private/__actual_axis_position__.m, plot/__go_draw_axes__.m:
 	Revert treatment of activepositionproperty from the gnuplot backend.
 	* image/image.m: Fix axis limits for single dimension images, add
 	demo.
 
 2010-09-07  David Bateman  <dbateman@free.fr>
 
diff --git a/scripts/plot/__fltk_print__.m b/scripts/plot/__fltk_print__.m
--- a/scripts/plot/__fltk_print__.m
+++ b/scripts/plot/__fltk_print__.m
@@ -16,145 +16,92 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __fltk_print__ (@var{@dots{}})
 ## Undocumented internal function.
 ## @end deftypefn
 
-function __fltk_print__ (opts)
+function opts = __fltk_print__ (opts)
 
   figure (opts.figure)
   drawnow ("expose")
 
-  file2unlink = "";
-
   if (! isempty (opts.fig2dev_binary))
     fig2dev_devices = {"pstex", "mf", "emf"};
   else
     ## If no fig2dev is present, support emf using pstoedit.
     fig2dev_devices = {"pstex", "mf"};
   endif
 
-  unwind_protect
-
-    switch lower (opts.devopt)
-    case {"eps", "eps2", "epsc", "epsc2"}
-      drawnow ("eps", opts.name);
-      if (opts.tight_flag)
-        __tight_eps_bbox__ (opts, opts.name);
-      endif
-    case {"epslatex", "pslatex", "pdflatex", "epslatexstandalone", ...
-          "pslatexstandalone", "pdflatexstandalone"}
-      ## format GL2PS_TEX
-      n = find (opts.devopt == "l", 1);
-      suffix = opts.devopt(1:n-1);
-      dot = find (opts.name == ".", 1, "last");
-      if ((! isempty (dot))
-          && any (strcmpi (opts.name(dot:end), {".eps", ".ps", ".pdf", ".tex", "."})))
-        name = opts.name(1:dot-1);
-        if (dot < numel (opts.name)
-            && any (strcmpi (opts.name(dot+1:end), {"eps", "ps", "pdf"})))
-          ## If user provides eps/ps/pdf suffix, use it.
-          suffix = opts.name(dot+1:end);
-        endif
-      elseif (dot == numel (opts.name))
-        name = opts.name;
-      endif
-      drawnow (strcat (lower (suffix), "notxt"), strcat (name, ".", suffix));
-      drawnow ("tex", strcat (name, ".", suffix, ".tex"));
-      movefile (strcat (name, ".", suffix, ".tex"), strcat (name, ".tex"));
-      if (opts.tight_flag && strncmpi (opts.devopt, "eps", 3))
-        __tight_eps_bbox__ (opts, strcat (opts.name, ".eps"));
-      endif
-      if (! isempty (strfind (opts.devopt, "standalone")))
-        __latex_standalone__ (strcat (name, ".tex"));
-      endif
-    case {"tikz"}
-      ## format GL2PS_PGF
-      drawnow ("pgf", opts.name);
-    case {"ps", "ps2", "psc", "psc2", "pdf"}
-      opts.ghostscript.source = strcat (tmpnam (), ".eps");
-      file2unlink = opts.ghostscript.source;
-      if (strcmp (opts.devopt, "pdf"))
-        opts.ghostscript.device = "pdfwrite";
-      elseif (any (opts.devopt == '2'))
-        opts.ghostscript.device = "ps2write";
-      else
-        opts.ghostscript.device = "pswrite";
-      endif
-      opts.ghostscript.output = opts.name;
-      drawnow ("eps", opts.ghostscript.source);
-      if (opts.tight_flag)
-        __tight_eps_bbox__ (opts, opts.ghostscript.source);
+  switch lower (opts.devopt)
+  case {"eps", "eps2", "epsc", "epsc2"}
+    drawnow ("eps", opts.name);
+    if (opts.tight_flag)
+      __tight_eps_bbox__ (opts, opts.name);
+    endif
+  case {"epslatex", "pslatex", "pdflatex", "epslatexstandalone", ...
+        "pslatexstandalone", "pdflatexstandalone"}
+    ## format GL2PS_TEX
+    n = find (opts.devopt == "l", 1);
+    suffix = opts.devopt(1:n-1);
+    dot = find (opts.name == ".", 1, "last");
+    if ((! isempty (dot))
+        && any (strcmpi (opts.name(dot:end), ...
+                {".eps", ".ps", ".pdf", ".tex", "."})))
+      name = opts.name(1:dot-1);
+      if (dot < numel (opts.name)
+          && any (strcmpi (opts.name(dot+1:end), {"eps", "ps", "pdf"})))
+        ## If user provides eps/ps/pdf suffix, use it.
+        suffix = opts.name(dot+1:end);
       endif
-    case {"svg"}
-      ## format GL2PS_SVG
-      drawnow ("svg", opts.name);
-    case gs_based_devices ()
-      opts.ghostscript.antialiasing = true;
-      switch opts.devopt
-      case "bmp"
-        opts.ghostscript.device = "bmp32b";
-      case "png"
-        opts.ghostscript.device = "png16m";
-      case {"tiff", "tiffn"}
-        opts.ghostscript.device = "tiff24nc";
-      otherwise
-        opts.ghostscript.device = opts.devopt;
-      endswitch
-      opts.ghostscript.output = opts.name;
-      opts.ghostscript.source = strcat (tmpnam (), ".eps");
-      opts.ghostscript.epscrop = true;
-      file2unlink = opts.ghostscript.source;
-      drawnow ("eps", opts.ghostscript.source)
-      if (opts.tight_flag)
-        __tight_eps_bbox__ (opts, opts.ghostscript.source);
-      endif
-    case fig2dev_devices
-      tmp_figfile = strcat (tmpnam (), ".fig");
-      file2unlink = tmp_figfile;
-      status = __pstoedit__ (opts, "fig", tmp_figfile);
-      if (status == 0)
-        status = __fig2dev__ (opts, tmp_figfile);
-      endif
-    case {"aifm", "dxf", "emf", "fig", "hpgl"}
-      status = __pstoedit__ (opts);
-    case {"corel", "gif"}
-      error ("print:unsupporteddevice",
-             "print.m: %s output is not available for the FLTK backend.",
-             upper (opts.devopt))
-    otherwise
-      ## various ghostscript devices for printers
-      opts.ghostscript.device = opts.devopt;
-      opts.ghostscript.output = opts.name;
-      opts.ghostscript.epscrop = false;
-      opts.ghostscript.source = strcat (tmpnam (), ".eps");
-      file2unlink = opts.ghostscript.source;
-      ## Empirical observatin: "-dpxlcolor" requires a sign change.
-      opts.ghostscript.pageoffset = opts.ghostscript.pageoffset .* [1, -1];
-      drawnow ("eps", opts.ghostscript.source)
-      if (opts.tight_flag)
-        __tight_eps_bbox__ (opts, opts.ghostscript.source);
-      endif
-    endswitch
-  
-    if (! isempty (opts.ghostscript.device))
-      status = __ghostscript__ (opts.ghostscript);
+    elseif (dot == numel (opts.name))
+      name = opts.name;
+    endif
+    drawnow (strcat (lower (suffix), "notxt"), strcat (name, ".", suffix));
+    drawnow ("tex", strcat (name, ".tex"));
+    if (opts.tight_flag && strcmp (suffix, "eps"))
+      __tight_eps_bbox__ (opts, strcat (name, ".", suffix));
+    endif
+    if (! isempty (strfind (opts.devopt, "standalone")))
+      __latex_standalone__ (strcat (name, ".tex"));
     endif
-
-  unwind_protect_cleanup
-    if (! isempty (file2unlink))
-      [status, output] = unlink (file2unlink);
-      if (status != 0)
-        warning ("print.m: %s, '%s'.", output, file2unlink)
+  case {"tikz"}
+    ## format GL2PS_PGF
+    drawnow ("pgf", opts.name);
+  case {"svg"}
+    ## format GL2PS_SVG
+    drawnow ("svg", opts.name);
+  case fig2dev_devices
+    tmp_figfile = strcat (tmpnam (), ".fig");
+    opts.unlink{end+1} = tmp_figfile;
+    status = __pstoedit__ (opts, "fig", tmp_figfile);
+    if (status == 0)
+      status = __fig2dev__ (opts, tmp_figfile);
+      if (strcmp (opts.devopt, "pstex") && status == 0)
+        if (strfind (opts.name, ".ps") == numel(opts.name) - 2)
+          devfile = strcat (opts.name(1:end-2), "tex");
+        else
+          devfile = strcat (opts.name, ".tex");
+        endif
+        status = __fig2dev__ (opts, tmp_figfile, "pstex_t", devfile);
       endif
     endif
-  end_unwind_protect
+  case {"aifm"}
+    status = __pstoedit__ (opts, "ps2ai");
+  case {"dxf", "emf", "fig", "hpgl"}
+    status = __pstoedit__ (opts);
+  case {"corel", "gif"}
+    error ("print:unsupporteddevice",
+           "print.m: %s output is not available for the FLTK backend.",
+           upper (opts.devopt))
+  case opts.ghostscript.device
+    drawnow ("eps", opts.ghostscript.source);
+  endswitch
 
 endfunction
 
 function status = __fig2dev__ (opts, figfile, devopt, devfile)
   persistent warn_on_absence = true
   if (nargin < 4)
     devfile = opts.name;
   endif
@@ -244,22 +191,9 @@ function __latex_standalone__ (latexfile
              "print.m: error closing file '%s'", latexfile)
     endif
   else
     error ("print:erroropeningfile",
            "print.m: error opening file '%s'", latexfile)
   endif
 endfunction
 
-function device_list = gs_based_devices ();
-  device_list = {"bmp16", "bmp16m", "bmp256", "bmp32b", "bmpgray", ...
-                 "jpeg", "jpegcymk", "jpeggray", "pbm", "pbmraw", ...
-                 "pcx16", "pcx24b", "pcx256", "pcx2up", "pcxcmyk", ...
-                 "pcxgray", "pcxmono", "pdfwrite", "pgm", "pgmraw", ...
-                 "pgnm", "pgnmraw", "png16", "png16m", "png256", ...
-                 "png48", "pngalpha", "pnggray", "pngmono", "pnm", ...
-                 "pnmraw", "ppm", "ppmraw", "ps2write", "pswrite", ...
-                 "tiff12nc", "tiff24nc", "tiff32nc", "tiffcrle", ...
-                 "tiffg3", "tiffg32d", "tiffg4", "tiffgray", "tifflzw", ...
-                 "tiffpack", "tiffsep", "bmp", "png", "tiff", "tiffn", ...
-                 "pdf", "ps", "psc", "ps2", "psc2"};
-endfunction
 
diff --git a/scripts/plot/__gnuplot_print__.m b/scripts/plot/__gnuplot_print__.m
--- a/scripts/plot/__gnuplot_print__.m
+++ b/scripts/plot/__gnuplot_print__.m
@@ -20,19 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __gnuplot_print__ (@var{@dots{}})
 ## Undocumented internal function.
 ## @end deftypefn
 
 ## Author: Daniel Heiserer <Daniel.heiserer@physik.tu-muenchen.de>
 ## Adapted-By: jwe
 
-function __gnuplot_print__ (opts)
-
-  file2unlink = "";
+function opts = __gnuplot_print__ (opts)
 
   if (isempty (opts.fontsize))
     ## If no fontsize, determine the nominal axes fontsize.
     defaultfontsize = get (0, "defaultaxesfontsize");
     axesfontsize = get (findobj (opts.figure, "type", "axes"), "fontsize");
     if (iscell (axesfontsize))
       axesfontsize = round (median (cell2mat (axesfontsize)));
     endif
@@ -41,126 +39,66 @@ function __gnuplot_print__ (opts)
     else
       opts.fontsize = axesfontsize;
     endif
   end
   ## The axes-label and tick-label spacing is determined by
   ## the font spec given in "set terminal ..."
   gp_opts = font_spec (opts);
 
-  unwind_protect
-    switch lower (opts.devopt)
-    case {"eps", "eps2", "epsc", "epsc2"}
-      if (any (strcmp (opts.devopt, {"eps", "epsc"})))
-        gp_opts = sprintf ("%s level1", gp_opts);
-      endif
-      eps_drawnow (opts, opts.name, gp_opts);
-    case {"epslatex", "pslatex", "pstex", "epslatexstandalone"}
-      n = find (opts.devopt == "l", 1);
-      suffix = opts.devopt(1:n-1);
-      dot = find (opts.name == ".", 1, "last");
-      if ((! isempty (dot))
-          && any (strcmpi (opts.name(dot:end),
-                  {".eps", ".ps", ".pdf", ".tex", "."})))
-        name = opts.name(1:dot-1);
-        if (dot < numel (opts.name)
-            && any (strcmpi (opts.name(dot+1:end), {"eps", "ps"})))
-          ## If user provides eps/ps suffix, use it.
-          suffix = opts.name(dot+1:end);
-        endif
-      elseif (dot == numel (opts.name))
-        name = opts.name;
-      endif
-      if (strfind (opts.devopt, "standalone"))
-        term = sprintf ("%s ",
-                        strrep (opts.devopt, "standalone", " standalone"));
-      else
-        term = sprintf ("%s ", opts.devopt);
-      endif
-      local_drawnow (sprintf ("%s %s", term, gp_opts),
-               strcat (name, ".", suffix, ".tex"), opts)
-      movefile (strcat (name, ".", suffix, ".tex"), strcat (name, ".tex"));
-      if (opts.tight_flag && strncmpi (opts.devopt, "eps", 3))
-        __tight_eps_bbox__ (opts, strcat (opts.name, ".eps"));
-      endif
-    case {"tikz"}
-      local_drawnow (sprintf ("lua tikz %s", gp_opts), opts.name, opts);
-    case {"ps", "ps2", "psc", "psc2", "pdf"}
-      if (any (strcmp (opts.devopt, {"ps", "psc"})))
-        gp_opts = sprintf ("%s level1", gp_opts);
-      endif
+  switch lower (opts.devopt)
+  case {"eps", "eps2", "epsc", "epsc2"}
+    if (any (strcmp (opts.devopt, {"eps", "epsc"})))
+      gp_opts = sprintf ("%s level1", gp_opts);
+    endif
+    eps_drawnow (opts, opts.name, gp_opts);
+  case {"epslatex", "pslatex", "pstex", "epslatexstandalone"}
+    dot = find (opts.name == ".", 1, "last");
+    if ((! isempty (dot))
+        && any (strcmpi (opts.name(dot:end),
+                {".eps", ".ps", ".pdf", ".tex", "."})))
+      name = opts.name(1:dot-1);
+    endif
+    if (strfind (opts.devopt, "standalone"))
+      term = sprintf ("%s ",
+                      strrep (opts.devopt, "standalone", " standalone"));
+    else
+      term = sprintf ("%s ", opts.devopt);
+    endif
+    if (__gnuplot_has_feature__ ("epslatex_implies_eps_filesuffix"))
+      suffix = "tex";
+    else
+      %% Gnuplot 4.0 wants a ".eps" suffix.
+      suffix = "eps";
+    endif
+    local_drawnow (sprintf ("%s %s", term, gp_opts),
+                   strcat (name, ".", suffix), opts)
+    if (opts.tight_flag && strncmpi (opts.devopt, "eps", 3))
+      __tight_eps_bbox__ (opts, strcat (name, "-inc.eps"));
+    endif
+  case {"tikz"}
+    local_drawnow (sprintf ("lua tikz %s", gp_opts), opts.name, opts);
+  case {"svg"}
+    local_drawnow (sprintf ("svg dynamic %s", gp_opts), opts.name, opts);
+  case {"aifm", "corel", "eepic", "emf", "fig", "pdfcairo", "pngcairo"}
+    local_drawnow (sprintf ("%s %s", opts.devopt, gp_opts), opts.name, opts);
+  case {"canvas", "dxf", "hpgl", "mf", "gif", "pstricks", "texdraw"}
+    local_drawnow (sprintf ("%s %s", opts.devopt, gp_opts), opts.name, opts)
+  case opts.ghostscript.device
+    if (opts.formatted_for_printing)
       ## Gnuplot's BBox LLHC is located at [50,50]
       opts.ghostscript.pageoffset = opts.ghostscript.pageoffset - 50;
-      opts.ghostscript.source = strcat (tmpnam (), ".eps");
-      file2unlink = opts.ghostscript.source;
-      if (strcmp (opts.devopt, "pdf"))
-        opts.ghostscript.device = "pdfwrite";
-      elseif (any (opts.devopt == '2'))
-        opts.ghostscript.device = "ps2write";
-      else
-        opts.ghostscript.device = "pswrite";
-        opts.ghostscript.level = 1;
-      endif
-      opts.ghostscript.output = opts.name;
-      eps_drawnow (opts, opts.ghostscript.source, gp_opts);
-    case {"svg"}
-      local_drawnow (sprintf ("svg dynamic %s", gp_opts), opts.name, opts);
-    case {"aifm", "corel", "eepic", "emf", "fig", "pdfcairo", "pngcairo"}
-      local_drawnow (sprintf ("%s %s", opts.devopt, gp_opts), opts.name, opts);
-    case gs_based_devices ()
-      opts.ghostscript.antialiasing = true;
-      switch opts.devopt
-      case "bmp"
-        opts.ghostscript.device = "bmp32b";
-      case "png"
-        opts.ghostscript.device = "png16m";
-      case {"tiff", "tiffn"}
-        opts.ghostscript.device = "tiff24nc";
-      otherwise
-        opts.ghostscript.device = opts.devopt;
-      endswitch
-      opts.ghostscript.output = opts.name;
-      opts.ghostscript.source = strcat (tmpnam (), ".eps");
-      opts.ghostscript.epscrop = true;
-      file2unlink = opts.ghostscript.source;
-      eps_drawnow (opts, opts.ghostscript.source, gp_opts);
-    case {"canvas", "dxf", "hpgl", "mf", "gif", "pstricks", "texdraw"}
-      local_drawnow (sprintf ("%s %s", opts.devopt, gp_opts), opts.name, opts)
-    case {"pdflatex", "pslatexstandalone", "pdflatexstandalone"}
-      error (sprintf ("print:no%soutput", opts.devopt),
-             "print.m: %s output is not available for the GNUPLOT backend.",
-             upper (opts.devopt))
-    otherwise
-      ## various ghostscript devices for printers
-      opts.ghostscript.device = opts.devopt;
-      opts.ghostscript.output = opts.name;
-      opts.ghostscript.epscrop = false;
-      opts.ghostscript.source = strcat (tmpnam (), ".eps");
-      file2unlink = opts.ghostscript.source;
-      ## Gnuplot's BBox LLHC is located at [50,50]
-      opts.ghostscript.pageoffset = opts.ghostscript.pageoffset - 50;
-      ## Empirical observation: "-dpxlcolor" requires a sign change.
-      opts.ghostscript.pageoffset = opts.ghostscript.pageoffset .* [1, -1];
-      ## Printers are not included in gs_devices()
-      gp_opts = font_spec (opts, "devopt", "eps");
-      eps_drawnow (opts, opts.ghostscript.source, gp_opts);
-    endswitch
-  
-    if (! isempty (opts.ghostscript.device))
-      status = __ghostscript__ (opts.ghostscript);
     endif
-  
-  unwind_protect_cleanup
-    if (! isempty (file2unlink))
-      [status, output] = unlink (file2unlink);
-      if (status != 0)
-        warning ("print.m: %s, '%s'.", output, file2unlink)
-      endif
-    endif
-  end_unwind_protect
+    gp_opts = font_spec (opts, "devopt", "eps");
+    eps_drawnow (opts, opts.ghostscript.source, gp_opts);
+  otherwise
+    error (sprintf ("print:no%soutput", opts.devopt),
+           "print.m: %s output is not available for the GNUPLOT backend.",
+           upper (opts.devopt))
+  endswitch
 
 endfunction
 
 function eps_drawnow (opts, epsfile, gp_opts)
   [h, fontsize] = get_figure_text_objs (opts);
   unwind_protect
     for n = 1:numel(h)
       set (h(n), "fontsize", 2 * fontsize{n});
@@ -185,47 +123,31 @@ function local_drawnow (term, file, opts
   figure (opts.figure)
   if (isempty (opts.debug_file) || ! opts.debug)
     drawnow (term, file, mono);
   else
     drawnow (term, file, mono, opts.debug_file);
   endif
 endfunction
 
-function device_list = gs_based_devices ();
-  ## Aliases for other devices: "bmp", "png", "tiff", "tiffn", "pdf",
-  ##                            "ps", "ps2", "psc", "psc2"
-  device_list = {"bmp16", "bmp16m", "bmp256", "bmp32b", "bmpgray", ...
-                 "jpeg", "jpegcymk", "jpeggray", "pbm", "pbmraw", ...
-                 "pcx16", "pcx24b", "pcx256", "pcx2up", "pcxcmyk", ...
-                 "pcxgray", "pcxmono", "pdfwrite", "pgm", "pgmraw", ...
-                 "pgnm", "pgnmraw", "png16", "png16m", "png256", ...
-                 "png48", "pngalpha", "pnggray", "pngmono", "pnm", ...
-                 "pnmraw", "ppm", "ppmraw", "ps2write", "pswrite", ...
-                 "tiff12nc", "tiff24nc", "tiff32nc", "tiffcrle", ...
-                 "tiffg3", "tiffg32d", "tiffg4", "tiffgray", "tifflzw", ...
-                 "tiffpack", "tiffsep", "bmp", "png", "tiff", "tiffn", ...
-                 "pdf", "ps", "ps2", "psc", "psc2"};
-endfunction
-
 function f = font_spec (opts, varargin)
   for n = 1:2:numel(varargin)
     opts.(varargin{n}) = varargin{n+1};
   endfor
   f = "";
   switch opts.devopt
   case {"cgm"}
     if (! isempty (opts.font) && ! isempty (opts.fontsize))
       f = sprintf ("font ""%s,%d""", opts.font, opts.fontsize);
     elseif (! isempty (opts.font))
       f = sprintf ("font ""%s""", opts.font);
     elseif (! isempty (opts.fontsize))
       f = sprintf ("%d", opts.fontsize);
     endif
-  case {"eps", "eps2", "epsc", "epsc2", gs_based_devices(){:}}
+  case {"eps", "eps2", "epsc", "epsc2"}
     ## Gnuplot renders fonts as half their specification, which 
     ## results in a tight spacing for the axes-labels and tick-labels.
     ## Compensate for the half scale. This will produce the proper
     ## spacing for the requested fontsize.
     if (! isempty (opts.font) && ! isempty (opts.fontsize))
       f = sprintf ("font ""%s,%d""", opts.font, 2 * opts.fontsize);
     elseif (! isempty (opts.font))
       f = sprintf ("font ""%s""", opts.font);
diff --git a/scripts/plot/__print_parse_opts__.m b/scripts/plot/__print_parse_opts__.m
--- a/scripts/plot/__print_parse_opts__.m
+++ b/scripts/plot/__print_parse_opts__.m
@@ -31,32 +31,36 @@ function arg_st = __print_parse_opts__ (
   arg_st.debug = false;
   arg_st.debug_file = "octave-print-commands.log";
   arg_st.devopt = "";
   arg_st.figure = get (0, "currentfigure");
   arg_st.fig2dev_binary = __quote_path__ (__find_binary__ ("fig2dev"));
   arg_st.fontsize = "";
   arg_st.font = "";
   arg_st.force_solid = 0; # 0=default, -1=dashed, +1=solid
+  arg_st.formatted_for_printing = false;
   arg_st.ghostscript.binary = __quote_path__ (__ghostscript_binary__ ());
+  arg_st.ghostscript.debug = false;
   arg_st.ghostscript.device = "";
+  arg_st.ghostscript.epscrop = true;
+  arg_st.ghostscript.level = [];
   arg_st.ghostscript.output = "";
   arg_st.ghostscript.papersize = "";
   arg_st.ghostscript.pageoffset = [];
-  arg_st.ghostscript.debug = false;
-  arg_st.ghostscript.epscrop = false;
   arg_st.ghostscript.resolution = 150;
+  arg_st.ghostscript.antialiasing = false;
+  arg_st.loose = false;
+  arg_st.name = "";
   arg_st.orientation = "";
   arg_st.pstoedit_binary = __quote_path__ (__find_binary__ ("pstoedit"));
-  arg_st.name = "";
   arg_st.printer = "";
+  arg_st.send_to_printer = false;
   arg_st.special_flag = "textnormal";
   arg_st.tight_flag = false;
   arg_st.use_color = 0; # 0=default, -1=mono, +1=color
-  arg_st.send_to_printer = false;
   
   if (isunix ())
     arg_st.lpr_options = "-l";
   elseif (ispc ())
     arg_st.lpr_options = "-o l";
   else
     arg_st.lpr_options = "";
   endif
@@ -74,16 +78,18 @@ function arg_st = __print_parse_opts__ (
       elseif (strcmp (arg, "-solid"))
         arg_st.force_solid = 1;
       elseif (strcmp (arg, "-dashed"))
         arg_st.force_solid = -1;
       elseif (strncmp (arg, "-portrait", numel (arg)))
         arg_st.orientation = "portrait";
       elseif (strncmp (arg, "-landscape", numel (arg)))
         arg_st.orientation = "landscape";
+      elseif (strcmp (arg, "-loose"))
+        arg_st.loose = true;
       elseif (strcmp (arg, "-tight"))
         arg_st.tight_flag = true;
       elseif (strcmp (arg, "-loose"))
         arg_st.tight_flag = false;
       elseif (strcmp (arg, "-textspecial"))
         arg_st.special_flag = "textspecial";
       elseif (strncmp (arg, "-debug", 6))
         arg_st.debug = true;
@@ -93,17 +99,18 @@ function arg_st = __print_parse_opts__ (
         endif
       elseif (length (arg) > 2 && arg(1:2) == "-d")
         arg_st.devopt = tolower (arg(3:end));
       elseif (length (arg) > 2 && arg(1:2) == "-P")
         arg_st.printer = arg;
       elseif ((length (arg) > 2) && arg(1:2) == "-G")
         arg_st.ghostscript.binary = file_in_path (EXEC_PATH, arg(3:end));
         if (isempty (arg_st.ghostscript.binary))
-          error ("print: Ghostscript binary ""%s"" could not be located", arg(3:end))
+          error ("print: Ghostscript binary ""%s"" could not be located",
+                 arg(3:end))
         else
           arg_st.ghostscript_binary = __quote_path__ (arg_st.ghostscript_binary);
         endif
       elseif (length (arg) > 2 && arg(1:2) == "-F")
         idx = rindex (arg, ":");
         if (idx)
           arg_st.font = arg(3:idx-1);
           arg_st.fontsize = str2num (arg(idx+1:end));
@@ -215,16 +222,20 @@ function arg_st = __print_parse_opts__ (
   else
     default_suffix = arg_st.devopt;
   endif
 
   if (dot == 0 && ! isempty (arg_st.name))
     arg_st.name = strcat (arg_st.name, ".", default_suffix);
   endif
 
+  if (any (strcmp (arg_st.devopt, {"ps", "ps2", "psc", "psc2", "pdf"})))
+    arg_st.formatted_for_printing = true;
+  endif
+
   if (arg_st.append_to_file)
     if (isempty (arg_st.name))
       arg_st.append_to_file = false;
     elseif (any (strcmpi (arg_st.devopt, {"eps", "eps2", "epsc", "epsc2", ...
                                           "ps", "ps2", "psc", "psc2", "pdf"})))
       have_ghostscript = ! isempty (__ghostscript_binary__ ());
       if (have_ghostscript)
         file_exists = ((numel (dir (arg_st.name)) == 1) && (! isdir (arg_st.name)));
@@ -244,90 +255,118 @@ function arg_st = __print_parse_opts__ (
   if (! isempty (arg_st.printer) || isempty (arg_st.name))
     arg_st.send_to_printer = true;
     if (isempty (arg_st.name))
       arg_st.name = strcat (tmpnam (), ".", default_suffix);
       arg_st.unlink{end+1} = arg_st.name;
     endif
   endif
 
-  if (all (! strcmp (arg_st.devopt, dev_list)))
+  aliases = gs_aliases ();
+  if (any (strcmp (arg_st.devopt, fieldnames (aliases))))
+    arg_st.devopt = aliases.(arg_st.devopt);
+  endif
+
+  if (strcmp (arg_st.devopt, "pswrite"))
+    arg_st.ghostscript.level = 1;
+  elseif (strcmp (arg_st.devopt, "ps2write"))
+    arg_st.ghostscript.level = 2;
+  endif
+
+  if (any (strcmp (arg_st.devopt, gs_device_list)) &&
+      ! arg_st.formatted_for_printing)
+    ## Use ghostscript for graphic formats
     arg_st.ghostscript.device = arg_st.devopt;
     arg_st.ghostscript.output = arg_st.name;
+    arg_st.ghostscript.antialiasing = true;
+    ## pstoedit throws errors if the EPS file isn't cropped
+    arg_st.ghostscript.epscrop = true;
+  elseif (all (! strcmp (arg_st.devopt, dev_list)))
+    ## Assume we are formating output for a printer
+    arg_st.formatted_for_printing = true;
+    arg_st.ghostscript.device = arg_st.devopt;
+    arg_st.ghostscript.output = arg_st.name;
+    arg_st.ghostscript.antialiasing = false;
+    arg_st.ghostscript.epscrop = ! arg_st.loose;
   endif
 
   if (isempty (arg_st.canvas_size))
     if (isfigure (arg_st.figure))
       [arg_st.ghostscript.papersize, paperposition] = gs_papersize (arg_st.figure,
                                                              arg_st.orientation);
     else
       ## allows tests to be run
       arg_st.ghostscript.papersize = "letter";
       paperposition = [0.25, 2.50, 8.00, 6.00] * 72;
     endif
     arg_st.canvas_size = paperposition(3:4);
     arg_st.ghostscript.pageoffset = paperposition(1:2);
   else
-    ## Canvas size in points.
+    ## Convert canvas size to points from pixles.
     arg_st.canvas_size = arg_st.canvas_size * 72 / arg_st.ghostscript.resolution;
     arg_st.ghostscript.papersize = arg_st.canvas_size;
     arg_st.ghostscript.epscrop = true;
     arg_st.ghostscript.pageoffset = [0, 0];
   endif
 
+  if (arg_st.formatted_for_printing)
+    arg_st.ghostscript.resolution = [];
+  endif
+
 endfunction
 
 %!test
 %! opts = __print_parse_opts__ ();
-%! assert (opts.devopt, "psc");
+%! assert (opts.devopt, "pswrite");
 %! assert (opts.use_color, 1);
 %! assert (opts.send_to_printer, true);
 %! assert (opts.name, opts.unlink{1})
 %! assert (opts.canvas_size, [576, 432]);
-%! assert (opts.ghostscript.device, "")
+%! assert (opts.ghostscript.device, "pswrite")
 %! for n = 1:numel(opts.unlink)
 %!   unlink (opts.unlink{n});
 %! endfor
 
 %!test
 %! opts = __print_parse_opts__ ("test.pdf", "-S640,480");
 %! assert (opts.canvas_size, [307.2, 230.4], 0.1);
 
 %!test
-%! opts = __print_parse_opts__ ("-dpsc", "-append");
-%! assert (opts.devopt, "psc");
+%! opts = __print_parse_opts__ ("-dpsc", "-append", "-loose");
+%! assert (opts.devopt, "pswrite");
 %! assert (opts.name(end+(-2:0)), ".ps");
 %! assert (opts.send_to_printer, true);
 %! assert (opts.use_color, 1);
 %! assert (opts.append_to_file, false);
-%! assert (opts.ghostscript.device, "")
+%! assert (opts.ghostscript.device, "pswrite")
+%! assert (opts.ghostscript.epscrop, false);
 %! for n = 1:numel(opts.unlink)
 %!   unlink (opts.unlink{n});
 %! endfor
 
 %!test
 %! opts = __print_parse_opts__ ("-deps", "-tight");
 %! assert (opts.name, opts.unlink{1})
 %! assert (opts.tight_flag, true);
 %! assert (opts.send_to_printer, true);
 %! assert (opts.use_color, -1);
 %! assert (opts.ghostscript.device, "")
 %! for n = 1:numel(opts.unlink)
 %!   unlink (opts.unlink{n});
 %! endfor
 
 %!test
-%! opts = __print_parse_opts__ ("-djpg", "foobar", "-mono");
+%! opts = __print_parse_opts__ ("-djpg", "foobar", "-mono", "-loose");
 %! assert (opts.devopt, "jpeg")
 %! assert (opts.name, "foobar.jpg")
-%! assert (opts.ghostscript.device, "")
+%! assert (opts.ghostscript.device, "jpeg")
+%! assert (opts.ghostscript.epscrop, true);
 %! assert (opts.send_to_printer, false);
 %! assert (opts.printer, "");
 %! assert (opts.use_color, -1);
-%! assert (opts.ghostscript.device, "")
 
 %!test
 %! opts = __print_parse_opts__ ("-ddeskjet", "foobar", "-mono", "-Pmyprinter");
 %! assert (opts.ghostscript.output, "foobar.deskjet")
 %! assert (opts.ghostscript.device, "deskjet")
 %! assert (opts.devopt, "deskjet")
 %! assert (opts.send_to_printer, true);
 %! assert (opts.printer, "-Pmyprinter");
@@ -498,8 +537,39 @@ function value = convert2points (value, 
     case {"centimeters"}
       value = value * 72 / 25.4;
     case {"normalized"}
       error ("print:customnormalized",
              "print.m: papersize=='<custom>' and paperunits='normalized' may not be combined.")
     endswitch
 endfunction
 
+function device_list = gs_device_list ();
+  ## Graphics formats/languages, not priners.
+  device_list = {"bmp16"; "bmp16m"; "bmp256"; "bmp32b"; "bmpgray"; ...
+                 "jpeg"; "jpegcymk"; "jpeggray"; "pbm"; "pbmraw"; ...
+                 "pcx16"; "pcx24b"; "pcx256"; "pcx2up"; "pcxcmyk"; ...
+                 "pcxgray"; "pcxmono"; "pdfwrite"; "pgm"; "pgmraw"; ...
+                 "pgnm"; "pgnmraw"; "png16"; "png16m"; "png256"; ...
+                 "png48"; "pngalpha"; "pnggray"; "pngmono"; "pnm"; ...
+                 "pnmraw"; "ppm"; "ppmraw"; "ps2write"; "pswrite"; ...
+                 "tiff12nc"; "tiff24nc"; "tiff32nc"; "tiffcrle"; ...
+                 "tiffg3"; "tiffg32d"; "tiffg4"; "tiffgray"; "tifflzw"; ...
+                 "tiffpack"; "tiffsep"};
+endfunction
+
+function aliases = gs_aliases ();
+  ## Aliases for other devices: "bmp", "png", "tiff", "tiffn", "pdf",
+  ##                            "ps", "ps2", "psc", "psc2"
+  ##
+  ## eps, epsc, eps2, epsc2 are not included here because those are 
+  ## are generated by the backend.
+  aliases.bmp = "bmp32b";
+  aliases.pdf = "pdfwrite";
+  aliases.png = "png16m";
+  aliases.ps = "pswrite";
+  aliases.ps2 = "ps2write";
+  aliases.psc = "pswrite";
+  aliases.psc2 = "ps2write";
+  aliases.tiff = "tiff24nc";
+  aliases.tiffn = "tiff24nc";
+endfunction
+
diff --git a/scripts/plot/print.m b/scripts/plot/print.m
--- a/scripts/plot/print.m
+++ b/scripts/plot/print.m
@@ -323,18 +323,35 @@ function print (varargin)
           fontsize = str2double (opts.fontsize);
         else
           fontsize = opts.fontsize;
         endif
         set (h, "fontsize", fontsize)
       endif
     endif
 
+    if (strcmp (opts.devopt, opts.ghostscript.device))
+      opts.ghostscript.output = opts.name;
+      opts.ghostscript.source = strcat (tmpnam (), ".eps");
+      opts.unlink{end+1} = opts.ghostscript.source;
+    endif
+
     ## call the backend print script
-    feval (strcat ("__", get (opts.figure, "__backend__") , "_print__"), opts);
+    opts = feval (strcat ("__", get (opts.figure, "__backend__"), "_print__"),
+                  opts);
+
+    if (strcmp (opts.devopt, opts.ghostscript.device))
+      if (opts.tight_flag && ! opts.formatted_for_printing)
+        __tight_eps_bbox__ (opts, opts.ghostscript.source);
+      endif
+      status = __ghostscript__ (opts.ghostscript);
+      if (status != 0)
+        warning ("print.m:gsfailed", "print.m: ghostscript failure")
+      endif
+    endif
 
     ## Send to the printer
     if (opts.send_to_printer)
       if (isempty (opts.ghostscript.output))
         prn_datafile = opts.name;
       else
         prn_datafile = opts.ghostscript.output;
       endif
diff --git a/scripts/plot/private/__ghostscript__.m b/scripts/plot/private/__ghostscript__.m
--- a/scripts/plot/private/__ghostscript__.m
+++ b/scripts/plot/private/__ghostscript__.m
@@ -25,17 +25,17 @@
 function status = __ghostscript__ (varargin);
 
   opts.binary = "";
   opts.source = "";
   opts.output = "";
   opts.device = "";
   opts.epscrop = false;
   opts.antialiasing  = false;
-  opts.resolution = 150;
+  opts.resolution = [];
   opts.papersize = "";
   opts.pageoffset = [0 0];
   opts.debug = false;
   opts.level = [];
 
   offsetfile = "";
 
   args = varargin;
@@ -46,45 +46,54 @@ function status = __ghostscript__ (varar
       opts.(f{m}) = args{n}.(f{m});
     endfor
     args(n) = [];
   endif
   for n = 1:2:numel(args)
     opts.(args{n}) = args{n+1};
   endfor
 
-  gs_opts = sprintf ("-dQUIET -dNOPAUSE -dBATCH -dSAFER -sDEVICE=%s", opts.device);
+  gs_opts = sprintf ("-dQUIET -dNOPAUSE -dBATCH -dSAFER -sDEVICE=%s",
+                     opts.device);
 
   if (! isempty (opts.level) && ismember (opts.level, [1, 2, 3]))
     gs_opts = sprintf ("%s -dLanguageLevel=%d", gs_opts, round (opts.level));
   endif
 
-  if (opts.antialiasing && isempty (strfind (opts.device, "write")))
-    ## Apply anti-aliasing to all bitmap formats/devices
-    gs_opts = sprintf ("%s -dTextAlphaBits=4 -dGraphicsAlphaBits=4", gs_opts);
-    gs_opts = sprintf ("%s -r%dx%d", gs_opts, [1, 1] * opts.resolution);
+  if (isempty (strfind (opts.device, "write")))
+    ## Empirical observation: "-dpxlcolor" requires a sign change as
+    ##                        compared to pdfwrite, or pswrite output.
+    opts.pageoffset = opts.pageoffset .* [1, -1];
+    if (! isempty (opts.resolution))
+      gs_opts = sprintf ("%s -r%dx%d", gs_opts, [1, 1] * opts.resolution);
+    endif
+    if (opts.antialiasing)
+      gs_opts = sprintf ("%s -dTextAlphaBits=4 -dGraphicsAlphaBits=4", gs_opts);
+    endif
   elseif (any (strcmp (opts.device, {"pswrite", "ps2write", "pdfwrite"})))
     gs_opts = sprintf ("%s -dEmbedAllFonts=true", gs_opts);
     if (strcmp (opts.device, "pdfwrite"))
       ## Optimize for loading
       gs_opts = sprintf ("%s -dOptimize=true", gs_opts);
     endif
   endif
 
   if (opts.epscrop)
     ## papersize is specified by the eps bbox
     gs_opts = sprintf ("%s -dEPSCrop", gs_opts);
   elseif (! isempty (opts.papersize))
     if (ischar (opts.papersize))
       gs_opts = sprintf ("%s -sPAPERSIZE=%s", gs_opts, opts.papersize);
     elseif (isnumeric (opts.papersize) && numel (opts.papersize) == 2)
-      gs_opts = sprintf ("%s -dDEVICEWIDTHPOINTS=%d -dDEVICEHEIGHTPOINTS=%d", gs_opts, opts.papersize);
+      gs_opts = sprintf ("%s -dDEVICEWIDTHPOINTS=%d -dDEVICEHEIGHTPOINTS=%d",
+                         gs_opts, opts.papersize);
       if (opts.papersize(1) > opts.papersize(2))
-        ## Lanscape mode: This option will result in automatic rotation of the document page if the
-        ##                requested page size matches one of the default page sizes
+        ## Lanscape mode: This option will result in automatic rotation of the
+        ##                document page if the requested page size matches one
+        ##                of the default page sizes.
         gs_opts = sprintf ("%s -dNORANGEPAGESIZE", gs_opts);
       endif
     else
       error ("print:badpapersize", "__ghostscript__.m: invalid 'papersize'")
     endif
     gs_opts = sprintf ("%s -dFIXEDMEDIA", gs_opts);
     offsetfile = strcat (tmpnam (), ".ps");
     unwind_protect
@@ -107,17 +116,17 @@ function status = __ghostscript__ (varar
     if (opts.debug)
       [~,output] = system (sprintf ("cat %s", offsetfile));
       fprintf ("---- begin %s ----\n", offsetfile)
       disp (output)
       fprintf ("----- end %s -----\n", offsetfile)
     endif
   endif
 
-  cmd = sprintf ("%s %s -sOutputFile=%s %s %s", 
+  cmd = sprintf ("%s %s -sOutputFile=%s %s %s 2>&1", 
                  opts.binary, gs_opts,
                  opts.output, offsetfile, opts.source);
 
   if (opts.debug)
     fprintf ("Ghostscript command: %s\n", cmd);
   endif
 
   [status, output] = system (cmd);
