# HG changeset patch
# User jwe
# Date 942275352 0
#      Wed Nov 10 23:09:12 1999 +0000
# Node ID 3cfec93fd0efd4ef2f01e425d6996bcf7d4c3008
# Parent  8dd4718801fd1e1721905a638ffc3a9c86922b1e
[project @ 1999-11-10 23:09:10 by jwe]

diff --git a/doc/interpreter/control.txi b/doc/interpreter/control.txi
--- a/doc/interpreter/control.txi
+++ b/doc/interpreter/control.txi
@@ -15,46 +15,44 @@ of his students
 @item John E. Ingram @email{John.Ingram@@sea.siemans.com}, and 
 @item Kristi McGowan.  
 @end itemize
 This development was supported in part by NASA's Marshall Space Flight 
 Center as part of an in-house CACSD environment.  Additional important 
 contributions were made by Dr. Kai Mueller @email{mueller@@ifr.ing.tu-bs.de}
 and Jose Daniel Munoz Frias (@code{place.m}).
 
-An on-line menu-driven tutorial is available via @ref{DEMOcontrol}; 
+An on-line menu-driven tutorial is available via @code{DEMOcontrol};
 beginning OCST users should start with this program. 
 
+@DOCSTRING(DEMOcontrol)
+
 @menu
-* OCST demonstration/tutorial:DEMOcontrol.
-* System Data Structure:sysstruct.
-* System Construction and Interface Functions:sysinterface.
-* System display functions:sysdisp.
-* Block Diagram Manipulations:blockdiag.
-* Numerical Functions:numerical.
-* System Analysis-Properties:sysprop.
-* System Analysis-Time Domain:systime.
-* System Analysis-Frequency Domain:sysfreq.
-* Controller Design:cacsd.
-* Miscellaneous Functions:misc.
+* sysstruct::                   
+* sysinterface::                
+* sysdisp::                     
+* blockdiag::                   
+* numerical::                   
+* sysprop::                     
+* systime::                     
+* sysfreq::                     
+* cacsd::                       
+* misc::                        
 @end menu
 
-@node DEMOcontrol, sysstruct, Control Theory, Control Theory
-@unnumberedsec OCST demo program
-@DOCSTRING(DEMOcontrol)
+@node sysstruct, sysinterface, Control Theory, Control Theory
+@section System Data Structure
 
-@node sysstruct, sysinterface, DEMOcontrol, Control Theory
-@section System Data Structure
 @menu
-* Demo program:sysrepdemo.
-* Variables common to all OCST system formats:sysstructvars. 
-* tf format variables:sysstructtf.
-* zp format variables:sysstructzp.
-* ss format variables:sysstructss.
+* sysstructvars::               
+* sysstructtf::                 
+* sysstructzp::                 
+* sysstructss::                 
 @end menu
+
 The OCST stores all dynamic systems in
 a single data structure format that can represent continuous systems,
 discrete-systems, and mixed (hybrid) systems in state-space form, and
 can also represent purely continuous/discrete systems in either
 transfer function or pole-zero form. In order to
 provide more flexibility in treatment of discrete/hybrid systems, the
 OCST also keeps a record of which system outputs are sampled.
 
@@ -62,42 +60,40 @@ Octave structures are accessed with a sy
 by the C programming language.  For consistency in
 use of the data structure used in the OCST, it is recommended that
 the system structure access m-files be used (@xref{sysinterface}).
 Some elements of the data structure are absent depending on the internal
 system representation(s) used.  More than one system representation
 can be used for SISO systems; the OCST m-files ensure that all representations
 used are consistent with one another.
 
-@node sysrepdemo, sysstructvars, sysstruct, sysstruct
-@unnumberedsec System representation demo program
 @DOCSTRING(sysrepdemo)
 
-@node sysstructvars, sysstructtf, sysrepdemo, sysstruct
+@node sysstructvars, sysstructtf, sysstruct, sysstruct
 @subsection Variables common to all OCST system formats
 
 The data structure elements (and variable types) common to all  system
 representations are listed below; examples of the initialization
 and use of the system data structures are given in subsequent sections and
 in the online demo @code{DEMOcontrol}.
 @table @var
 @item n,nz
 The respective number of continuous and discrete states
 in the system (scalar)
 
 @item inname, outname
 list of name(s) of the system input, output signal(s). (list of strings)
 
 @item sys
- System status vector.  (vector)
+System status vector.  (vector)
 
-This vector indicates both what
-     representation was used to initialize the  system data structure
-     (called the primary system type) and which other representations
-     are currently up-to-date with the primary system type (@xref{sysupdate}).
+This vector indicates both what representation was used to initialize
+the system data structure (called the primary system type) and which
+other representations are currently up-to-date with the primary system
+type (@xref{structaccess}).
 
 @table @var
 
 @item sys(0)
 primary system type
 
            =0 for tf form (initialized with @code{tf2sys} or @code{fir2sys})
 
@@ -137,134 +133,113 @@ if the corresponding entry of the @code{
 
 @item den
  denominator coefficients   (vector)
 
 @end table
 
 @node sysstructzp, sysstructss, sysstructtf, sysstruct
 @subsection @code{zp} format variables
+
 @table @var
 @item zer
  system zeros   (vector)
 
 @item pol
  system poles    (vector)
 
 @item k
  leading coefficient   (scalar)
 
 @end table
 
 @node sysstructss,  , sysstructzp, sysstruct
 @subsection @code{ss} format variables
+
 @table @var
 @item a,b,c,d
 The usual state-space matrices. If a system has both
         continuous and discrete states, they are sorted so that
         continuous states come first, then discrete states
 
 @strong{Note} some functions (e.g., @code{bode}, @code{hinfsyn}) 
 will not accept systems with both discrete and continuous states/outputs
 
 @item stname
 names of system states   (list of strings)
 
 @end table
 
-@node sysinterface, sysdisp, sysstruct,  Control Theory
+@node sysinterface, sysdisp, sysstruct, Control Theory
 @section System Construction and Interface Functions
 
 Construction and manipulations of the OCST system data structure
 (@xref{sysstruct}) requires attention to many details in order
 to ensure that data structure contents remain consistent.  Users
 are strongly encouraged to use the system interface functions
 in this section.  Functions for the formatted display in of system
 data structures are given in @ref{sysdisp}.
 
 @menu
-* Finite impulse response system interface functions:fir2sys.
-* sys2fir::
-* State space system interface functions:ss2sys.
-* sys2ss::
-* Transfer function system interface functions:tf2sys.
-* sys2tf::
-* Zero-pole system interface functions:zp2sys.
-* sys2zp::
-* Data structure access functions:structaccess.
-* Data structure internal functions:structintern
+* fir2sys::                     
+* ss2sys::                      
+* tf2sys::                      
+* zp2sys::                      
+* structaccess::                
+* structintern::                
 @end menu
 
-@node fir2sys,sys2fir,sysinterface,sysinterface
+@node fir2sys, ss2sys, sysinterface, sysinterface
 @subsection Finite impulse response system interface functions
 
 @DOCSTRING(fir2sys)
 
-@node sys2fir,ss2sys,fir2sys, sysinterface
 @DOCSTRING(sys2fir)
 
-@node ss2sys, sys2ss, sys2fir, sysinterface
+@node ss2sys, tf2sys, fir2sys, sysinterface
 @subsection State space system interface functions
 
 @DOCSTRING(ss2sys)
 
-@node sys2ss,tf2sys,ss2sys,sysinterface
 @DOCSTRING(sys2ss)
 
-@node tf2sys,sys2tf,sys2ss,sysinterface
+@node tf2sys, zp2sys, ss2sys, sysinterface
 @subsection Transfer function system interface functions
+
 @DOCSTRING(tf2sys)
 
-@node sys2tf,zp2sys,tf2sys,sysinterface
 @DOCSTRING(sys2tf)
 
-@node zp2sys,sys2zp,sys2tf,sysinterface
+@node zp2sys, structaccess, tf2sys, sysinterface
 @subsection Zero-pole system interface functions
+
 @DOCSTRING(zp2sys)
 
-@node sys2zp, structaccess, zp2sys, sysinterface
 @DOCSTRING(sys2zp)
 
-@node structaccess, structintern, sys2zp, sysinterface
+@node structaccess, structintern, zp2sys, sysinterface
 @subsection Data structure access functions
 
-@menu
-* syschnames::
-* syschtsam::
-* sysdimensions::
-* sysgetsignals::
-* sysgettsam::
-* sysgettype::
-* syssetsignals::
-* sysupdate::
-@end menu
-
-@node syschnames, syschtsam, structaccess, structaccess
 @DOCSTRING(syschnames)
 
-@node syschtsam, sysdimensions, syschnames, structaccess
 @DOCSTRING(syschtsam)
 
-@node sysdimensions, sysgetsignals, syschtsam, structaccess
 @DOCSTRING(sysdimensions)
 
-@node sysgetsignals, sysgettsam, sysdimensions, structaccess
 @DOCSTRING(sysgetsignals)
 
-@node sysgettype, syssetsignals, sysgettsam, structaccess
 @DOCSTRING(sysgettype)
 
-@node syssetsignals, sysupdate, sysgettype, structaccess
 @DOCSTRING(syssetsignals)
 
-@node sysupdate, , syssetsignals, structaccess
 @DOCSTRING(sysupdate)
 
-@node structintern, , structaccess, sysinterface
+@node structintern,  , structaccess, sysinterface
 @subsection Data structure internal functions
+
 @DOCSTRING(syschnamesl)
 
 @DOCSTRING(sysdefioname)
 
 @DOCSTRING(sysdefstname)
 
 @DOCSTRING(tf2sysl)
 
@@ -276,104 +251,67 @@ data structures are given in @ref{sysdis
 @DOCSTRING(polyout)
 
 @DOCSTRING(tfout)
 
 @DOCSTRING(zpout)
 
 @DOCSTRING(outlist)
 
-@node blockdiag, numerical,  sysdisp, Control Theory
+@node blockdiag, numerical, sysdisp, Control Theory
 @section Block Diagram Manipulations
 
 @xref{systime}
 
 Unless otherwise noted, all parameters (input,output) are
 system data structures.
-@menu
-* buildssic::
-* jet707::
-* ord2::
-* parallel::
-* sysadd::
-* sysappend::
-* sysconnect::
-* syscont::
-* syscont_disc::
-* sysdisc::
-* sysdup::
-* sysgroup::
-* sysgroupn::
-* sysmult::
-* sysprune::
-* sysreorder::
-* sysscale::
-* syssub::
-@end menu
 
 @DOCSTRING(bddemo)
 
-@node buildssic, jet707, blockdiag, blockdiag
 @DOCSTRING(buildssic)
 
-@node jet707, ord2,  buildssic, blockdiag
 @DOCSTRING(jet707)
 
-@node ord2, parallel, jet707, blockdiag
 @DOCSTRING(ord2)
 
-@node sysadd, sysappend,  parallel, blockdiag
 @DOCSTRING(sysadd)
 
-@node sysappend, sysconnect, sysadd,  blockdiag
 @DOCSTRING(sysappend)
 
-@node sysconnect, syscont, sysappend,  blockdiag
 @DOCSTRING(sysconnect)
 
-@node syscont, syscont_disc,  sysconnect, blockdiag
-
 @DOCSTRING(syscont)
 
-@node syscont_disc, sysdisc,  syscont, blockdiag
 @DOCSTRING(syscont_disc)
 
-@node sysdisc, sysdup,  syscont_disc, blockdiag
 @DOCSTRING(sysdisc)
 
-@node sysdup, sysgroup,  sysdisc, blockdiag
 @DOCSTRING(sysdup) 
 
-@node sysgroup, sysgroupn,  sysdup, blockdiag
 @DOCSTRING(sysgroup)
 
-@node sysgroupn, sysmult,  sysgroup, blockdiag
 @DOCSTRING(sysgroupn)
 
-@node sysmult, sysprune,  sysgroupn, blockdiag
 @DOCSTRING(sysmult)
 
-@node sysprune, sysreorder, sysmult, blockdiag
 @DOCSTRING(sysprune)
 
-@node sysreorder, sysscale,  sysprune, blockdiag
 @DOCSTRING(sysreorder)
 
-@node sysscale, syssub,  sysreorder, blockdiag
 @DOCSTRING(sysscale)
 
-@node syssub, ,  sysscale, blockdiag
 @DOCSTRING(syssub)
 
 @DOCSTRING(ugain)
 
 @DOCSTRING(wgt1o)
 
-@node numerical,  sysprop, blockdiag, Control Theory
+@node numerical, sysprop, blockdiag, Control Theory
 @section Numerical Functions
+
 @DOCSTRING(are)
 
 @DOCSTRING(dare)
 
 @DOCSTRING(dgram)
 
 @DOCSTRING(dlyap)
 
@@ -381,35 +319,43 @@ system data structures.
 
 @DOCSTRING(lyap)
 
 @DOCSTRING(pinv)
 
 @DOCSTRING(qzval)
 
 @DOCSTRING(zgfmul)
+
 @DOCSTRING(zgfslv)
+
 @DOCSTRING(zginit)
+
 @DOCSTRING(zgpbal)
+
 @DOCSTRING(zgreduce)
+
 @DOCSTRING(zgrownorm)
+
 @DOCSTRING(zgscal)
+
 @DOCSTRING(zgsgiv)
+
 @DOCSTRING(zgshsr)
 
 References:
 @table @strong
 @item  ZGEP
  Hodel, "Computation of Zeros with Balancing," 1992, Linear Algebra
  and its Applications
 @item @strong{Generalized CG}
  Golub and Van Loan, "Matrix Computations, 2nd ed" 1989
 @end table
 
-@node sysprop, systime, numerical,  Control Theory
+@node sysprop, systime, numerical, Control Theory
 @section System Analysis-Properties
 
 @DOCSTRING(analdemo)
 
 @DOCSTRING(abcddim)
 
 @DOCSTRING(abcddims)
 
@@ -463,17 +409,17 @@ Return controller signal names based in 
 @DOCSTRING(dcgain)
 
 @DOCSTRING(impulse)
 
 @DOCSTRING(step)
 
 @DOCSTRING(stepimp)
 
-@node sysfreq, cacsd, systime,  Control Theory
+@node sysfreq, cacsd, systime, Control Theory
 @section System Analysis-Frequency Domain
 
 @strong{Demonstration/tutorial script}
 @DOCSTRING(frdemo)
 
 @DOCSTRING(bode)
 
 @DOCSTRING(bode_bounds)
@@ -564,17 +510,17 @@ See also: Ran and Rodman, "Stable Hermit
 @DOCSTRING(lqg)
 
 @DOCSTRING(lqr)
 
 @DOCSTRING(lsim)
 
 @DOCSTRING(place)
 
-@node misc, , cacsd, Control Theory
+@node misc,  , cacsd, Control Theory
 @section Miscellaneous Functions (Not yet properly filed/documented)
 
 @DOCSTRING(axis2dlim)
 
 @deftypefn {Function File } { outputs =} mb ( inputs ) 
 @format
  $Revision: 1.9 $
 
diff --git a/doc/interpreter/octave.txi b/doc/interpreter/octave.txi
--- a/doc/interpreter/octave.txi
+++ b/doc/interpreter/octave.txi
@@ -143,16 +143,17 @@ It corresponds to GNU Octave version @va
 * Grammar::                     
 * Copying::                     The GNU General Public License.
 * Concept Index::               An item for each concept.
 * Variable Index::              An item for each documented variable.
 * Function Index::              An item for each documented function.
 * Operator Index::              An item for each documented operator.
 
 
+@detailmenu
  --- The Detailed Node Listing ---
 
 Preface
 
 * Acknowledgements::            
 * How You Can Contribute to Octave::  
 * Distribution::                
 
@@ -360,16 +361,45 @@ Differential Equations
 * Differential-Algebraic Equations::  
 
 Optimization
 
 * Quadratic Programming::       
 * Nonlinear Programming::       
 * Linear Least Squares::        
 
+Control Theory
+
+* sysstruct::                   
+* sysinterface::                
+* sysdisp::                     
+* blockdiag::                   
+* numerical::                   
+* sysprop::                     
+* systime::                     
+* sysfreq::                     
+* cacsd::                       
+* misc::                        
+
+System Data Structure
+
+* sysstructvars::               
+* sysstructtf::                 
+* sysstructzp::                 
+* sysstructss::                 
+
+System Construction and Interface Functions
+
+* fir2sys::                     
+* ss2sys::                      
+* tf2sys::                      
+* zp2sys::                      
+* structaccess::                
+* structintern::                
+
 System Utilities
 
 * Timing Utilities::            
 * Filesystem Utilities::        
 * Controlling Subprocesses::    
 * Process ID Information::      
 * Environment Variables::       
 * Current Working Directory::   
@@ -417,16 +447,18 @@ Emacs Octave Support
 * Installing EOS::              
 * Using Octave Mode::           
 * Running Octave From Within Emacs::  
 * Using the Emacs Info Reader for Octave::  
 
 Grammar
 
 * Keywords::                    
+
+@end detailmenu
 @end menu
 
 @include preface.texi
 @include intro.texi
 @include basics.texi
 @include data.texi
 @include numbers.texi
 @include strings.texi
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+1999-11-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-env.cc (do_get_user_name): Reverse sense of test.
+
 1999-11-07  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-time.cc (Fstrftime): Undo previous change.
 	(octave_time::octave_time (const octave_base_tm&)): Likewise.
 
 1999-11-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dbleSVD.cc (SVD::init): Let DGESVD determine work space requirement.
diff --git a/liboctave/oct-env.cc b/liboctave/oct-env.cc
--- a/liboctave/oct-env.cc
+++ b/liboctave/oct-env.cc
@@ -375,17 +375,17 @@ octave_env::do_get_user_name (void) cons
 {
   // XXX FIXME XXX -- is it possible for this to change while Octave
   // is running?
 
   if (user_name.empty ())
     {
       octave_passwd pw = octave_passwd::getpwuid (octave_syscalls::getuid ());
 
-      user_name = pw ? string ("unknown") : pw.name ();
+      user_name = pw ? pw.name () : string ("unknown");
     }
 
   return user_name;
 }
 
 string
 octave_env::do_get_host_name (void) const
 {
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+1999-11-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Makefile.in (DISTFILES): Include DOCSTRINGS.
+
 1999-11-02  Ben Sapp <bsapp@nua.lampf.lanl.gov>
 
 	* scripts/audio/lin2mu.m: Texinfoize doc string.
 	* scripts/audio/loadaudio.m: Ditto.
 	* scripts/audio/mu2lin.m: Ditto.
 	* scripts/audio/playaudio.m: Ditto.
 	* scripts/audio/record.m: Ditto.
 	* scripts/audio/saveaudio.m: Ditto.
diff --git a/scripts/Makefile.in b/scripts/Makefile.in
--- a/scripts/Makefile.in
+++ b/scripts/Makefile.in
@@ -21,17 +21,18 @@ INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 SOURCES = # *.m
 
 ALL_M_FILES1 := $(shell find $(srcdir) -name '*.m' -print)
 ALL_M_FILES := $(patsubst $(srcdir)/%, %, $(ALL_M_FILES1))
 
 DISTFILES = Makefile.in ChangeLog $(SOURCES) configure.in \
-	configure mkinstalldirs move-if-change mkdoc gethelp.cc
+	configure mkinstalldirs move-if-change mkdoc gethelp.cc \
+	DOCSTRINGS
 
 SUBDIRS = audio control elfun finance general image io linear-algebra \
 	miscellaneous plot polynomial quaternion set signal specfun \
 	special-matrix startup statistics strings time
 
 DISTSUBDIRS = $(SUBDIRS)
 
 BINDISTSUBDIRS = $(SUBDIRS)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+1999-11-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* parse.y: Don't define warn_reload_forces_clear here.
+
+	* Makefile.in (DISTFILES): Include DOCSTRINGS.
+
 1999-11-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* sighandlers.cc (install_signal_handlers): Don't install
 	sigwinch_handler.
 
 	* oct-iostrm.h (octave_istream::eof, octave_ostream::eof): Provide
 	implementation for these.
 
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -189,17 +189,17 @@ OCTAVE_LFLAGS = -L$(TOPDIR)/liboctave -L
   -L$(TOPDIR)/src $(RLD_FLAG)
 
 OCTAVE_LIBS = $(LIBOCTINTERP) $(LIBOCTAVE) $(SPECIAL_MATH_LIB) $(LIBCRUFT) \
   $(LIBPLPLOT) $(LIBREADLINE) $(LIBKPATHSEA) $(LIBGLOB) $(LIBDLFCN)
 
 LIBS = @LIBS@
 
 DISTFILES = Makefile.in ChangeLog mkdefs mkops mkgendoc \
-	mkbuiltins mk-oct-links \
+	DOCSTRINGS mkbuiltins mk-oct-links \
 	defaults.h.in oct-conf.h.in octave.gperf oct-gperf.h \
 	octave.cc parse.cc lex.cc y.tab.h \
 	$(INCLUDES) $(DIST_SRC)
 
 ifeq ($(SHARED_LIBS), true)
   BINDISTLIBS = src/liboctinterp
   BINDISTFILES = octave $(OCT_FILES) liboctinterp.$(SHLEXT_VER)
 else
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -86,20 +86,16 @@ static bool Vwarn_function_name_clash;
 // TRUE means warn about function files that have time stamps in the future.
 bool Vwarn_future_time_stamp;
 
 // If TRUE, generate warning if a statement in a function is not
 // terminated with a semicolon.  Useful for checking functions that
 // should only produce output using explicit printing statements.
 static bool Vwarn_missing_semicolon;
 
-// TRUE means we print a warning if reloading a .oct file forces other
-// functions to be cleared.
-static bool Vwarn_reload_forces_clear;
-
 // Temporary symbol table pointer used to cope with bogus function syntax.
 symbol_table *tmp_local_sym_tab = 0;
 
 // The current input line number.
 int input_line_number = 0;
 
 // The column of the current token.
 int current_input_column = 1;
@@ -3292,24 +3288,16 @@ static int
 warn_missing_semicolon (void)
 {
   Vwarn_missing_semicolon = check_preference ("warn_missing_semicolon");
 
   return 0;
 }
 
 static int
-warn_reload_forces_clear (void)
-{
-  Vwarn_reload_forces_clear = check_preference ("warn_reload_forces_clear");
-
-  return 0;
-}
-
-static int
 warn_variable_switch_label (void)
 {
   Vwarn_variable_switch_label
     = check_preference ("warn_variable_switch_label");
 
   return 0;
 }
 
@@ -3328,20 +3316,18 @@ results of commands executed by eval() t
 
   DEFVAR (warn_future_time_stamp, 1.0, warn_future_time_stamp,
     "warn if a function file has a time stamp that is in the future");
 
   DEFVAR (warn_missing_semicolon, 0.0, warn_missing_semicolon,
     "produce a warning if a statement in a function file is not\n\
 terminated with a semicolon");
 
-  DEFVAR (warn_reload_forces_clear, 1.0, warn_reload_forces_clear,
-    "warn if reloading a .oct file forces other functions to be cleared");
-
   DEFVAR (warn_variable_switch_label, 0.0, warn_variable_switch_label,
     "produce warning for variables used as switch labels");
+
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: text ***
 ;;; End: ***
 */
