# HG changeset patch
# User jwe
# Date 863184772 0
#      Fri May 09 13:32:52 1997 +0000
# Node ID cf676ff8b702d0d6e120f9415e2e2402cd5fd4b8
# Parent  6744ac301eef60b9d2738a3ca757916f8dea3b68
[project @ 1997-05-09 13:32:46 by jwe]

diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -208,17 +208,18 @@ file_ops::tilde_expand (const string& na
   string expansion = name;
 
   // If no leading tilde, do nothing.
 
   size_t beg = name.find_first_not_of (" \t");
 
   if (beg != NPOS && name[beg] == '~')
     {
-      // If `~' or `~/', use $HOME if it exists, or `.' if it doesn't.
+      // If `~' or `~/', use the user's home directory.  If that is
+      // empty, just use ".".
 
       // If `~user' or `~user/', look up user in the passwd database.
 
       size_t len = name.length ();
 
       if (beg == len-1 || name[beg+1] == DIR_SEP_CHAR)
 	{
 	  string home = octave_env::get_home_directory ();
@@ -232,31 +233,34 @@ file_ops::tilde_expand (const string& na
 	    expansion.append (name.substr (beg+1));
 	}
       else
 	{
 	  size_t end = name.find (DIR_SEP_CHAR, beg);
 
 	  size_t len = end;
 
-	  if (len != NPOS)
+	  if (end != NPOS)
 	    len -= beg + 1;
 
 	  string user = name.substr (beg+1, len);
 
 	  octave_passwd pw = octave_passwd::getpwnam (user);
 
-	  // If no such user, just use `.'.
+	  // If no such user, just return the original string.
+
+	  if (pw)
+	    {
+	      expansion = string (" ", beg) + pw.dir ();
 
-	  string home = pw ? string (".") : pw.dir ();
-      
-	  expansion = string (" ", beg) + home;
-
-	  if (end != NPOS)
-	    expansion.append (name.substr (end));
+	      if (end != NPOS)
+		expansion.append (name.substr (end));
+	    }
+	  else
+	    expansion = name;
 	}
     }
 
   return expansion;
 }
 
 // A vector version of the above.
 
diff --git a/liboctave/oct-env.cc b/liboctave/oct-env.cc
--- a/liboctave/oct-env.cc
+++ b/liboctave/oct-env.cc
@@ -49,16 +49,17 @@ Free Software Foundation, Inc.
 #include <unistd.h>
 #endif
 
 #include "lo-error.h"
 #include "lo-sysdep.h"
 #include "lo-utils.h"
 #include "oct-env.h"
 #include "oct-passwd.h"
+#include "oct-syscalls.h"
 
 octave_env::octave_env (void)
   : follow_symbolic_links (true), verbatim_pwd (true),
     current_directory (), program_name (), program_invocation_name (),
     user_name (), host_name ()
 {
   // Get a real value for the current directory.
   do_getcwd ();
@@ -354,28 +355,35 @@ octave_env::do_getcwd ()
 // This value is not cached because it can change while Octave is
 // running.
 
 string
 octave_env::do_get_home_directory (void) const
 {
   string hd = do_getenv ("HOME");
 
-  return hd.empty () ? string ("I have no home!") : hd;
+  if (hd.empty ())
+    {
+      octave_passwd pw = octave_passwd::getpwuid (octave_syscalls::getuid ());
+
+      hd = pw ? pw.dir () : string ("I have no home!");
+    }
+
+  return hd;
 }
 
 string
 octave_env::do_get_user_name (void) const
 {
   // XXX FIXME XXX -- is it possible for this to change while Octave
   // is running?
 
   if (user_name.empty ())
     {
-      octave_passwd pw = octave_passwd::getpwuid (getuid ());
+      octave_passwd pw = octave_passwd::getpwuid (octave_syscalls::getuid ());
 
       user_name = pw ? string ("I have no name!") : pw.name ();
     }
 
   return user_name;
 }
 
 string
