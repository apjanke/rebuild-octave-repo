# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1224094773 14400
#      Wed Oct 15 14:19:33 2008 -0400
# Node ID 4e05ba66ead27b23c061e21e320563c144c04c39
# Parent  f8a885ccd5b47ed6a8f8ef08a22b8e9e257dbbf1
x/y/z-ticklabels respect axis font properties.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,18 +1,28 @@
+2008-10-14  Ben Abbott  <bpabbott@mac.com>
+
+	* plot/__go_draw_axes__.m (do_tics_1): New args, fontname and fontsize.
+	Pass fontspec for tic marks to gnuplot.
+	(do_tics): Pass axes fontname and fontsize to do_tics_1.
+	
+	* plot/newplot.m: Perserve fontangle, fontname, fontsize,
+	fontunits, fontweight, position, outerposition, and
+	activepositionproperty axes properties when replacing plot.
+
 2008-10-15  Daniel J. Sebald  <daniel.sebald@ieee.org>
 
 	* plot/__go_draw_axes__.m: Make previous change work for surface
 	plots.
 
 2008-10-14  Daniel J. Sebald  <daniel.sebald@ieee.org>
 
 	* plot/__go_draw_axes__.m: Send binary data to gnuplot.
 
-2008-10-13  Ben Abbott <bpabbott@mac.com>
+2008-10-13  Ben Abbott  <bpabbott@mac.com>
 
 	* plot/__go_draw_axes__.m: Fix concatenation of handles.
 
 2008-10-12  David Bateman  <dbateman@free.fr>
 
 	* general/colon..m: New function.
 	* general/Makefile.in (SOURCES): Add it here.
 
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -1355,61 +1355,74 @@ function __gnuplot_write_data__ (plot_st
 	endfor
       endif
     endif
   endif
 
 endfunction
 
 function do_tics (obj, plot_stream, ymirror, mono)
+  [fontname, fontsize] = get_fontname_and_size (obj);
   if (strcmpi (obj.xaxislocation, "top"))
     do_tics_1 (obj.xtickmode, obj.xtick, obj.xticklabelmode, obj.xticklabel,
 	       obj.xcolor, "x2", plot_stream, true, mono, "border",
-	       obj.tickdir);
+	       obj.tickdir, fontname, fontsize);
     do_tics_1 ("manual", [], obj.xticklabelmode, obj.xticklabel,
-	       obj.xcolor, "x", plot_stream, true, mono, "border", "");
+	       obj.xcolor, "x", plot_stream, true, mono, "border",
+	       "", fontname, fontsize);
   elseif (strcmpi (obj.xaxislocation, "zero"))
     do_tics_1 (obj.xtickmode, obj.xtick, obj.xticklabelmode, obj.xticklabel,
 	       obj.xcolor, "x", plot_stream, true, mono, "axis",
-	       obj.tickdir);
+	       obj.tickdir, fontname, fontsize);
     do_tics_1 ("manual", [], obj.xticklabelmode, obj.xticklabel,
-	       obj.xcolor, "x2", plot_stream, true, mono, "axis", "");
+	       obj.xcolor, "x2", plot_stream, true, mono, "axis",
+	       "", fontname, fontsize);
   else
     do_tics_1 (obj.xtickmode, obj.xtick, obj.xticklabelmode, obj.xticklabel,
 	       obj.xcolor, "x", plot_stream, true, mono, "border",
-	       obj.tickdir);
+	       obj.tickdir, fontname, fontsize);
     do_tics_1 ("manual", [], obj.xticklabelmode, obj.xticklabel,
-	       obj.xcolor, "x2", plot_stream, true, mono, "border", "");
+	       obj.xcolor, "x2", plot_stream, true, mono, "border",
+	       "", fontname, fontsize);
   endif
   if (strcmpi (obj.yaxislocation, "right"))
     do_tics_1 (obj.ytickmode, obj.ytick, obj.yticklabelmode, obj.yticklabel,
 	       obj.ycolor, "y2", plot_stream, ymirror, mono, "border",
-	       obj.tickdir);
+	       obj.tickdir, fontname, fontsize);
     do_tics_1 ("manual", [], obj.yticklabelmode, obj.yticklabel,
-	       obj.ycolor, "y", plot_stream, ymirror, mono, "border", "");
+	       obj.ycolor, "y", plot_stream, ymirror, mono, "border",
+	       "", fontname, fontsize);
   elseif (strcmpi (obj.xaxislocation, "zero"))
     do_tics_1 (obj.ytickmode, obj.ytick, obj.yticklabelmode, obj.yticklabel,
 	       obj.ycolor, "y", plot_stream, ymirror, mono, "axis",
-	       obj.tickdir);
+	       obj.tickdir, fontname, fontsize);
     do_tics_1 ("manual", [], obj.yticklabelmode, obj.yticklabel,
-	       obj.ycolor, "y2", plot_stream, ymirror, mono, "axis", "");
+	       obj.ycolor, "y2", plot_stream, ymirror, mono, "axis",
+	       "", fontname, fontsize);
   else
     do_tics_1 (obj.ytickmode, obj.ytick, obj.yticklabelmode, obj.yticklabel,
 	       obj.ycolor, "y", plot_stream, ymirror, mono, "border",
-	       obj.tickdir);
+	       obj.tickdir, fontname, fontsize);
     do_tics_1 ("manual", [], obj.yticklabelmode, obj.yticklabel,
-	       obj.ycolor, "y2", plot_stream, ymirror, mono, "border", "");
+	       obj.ycolor, "y2", plot_stream, ymirror, mono, "border",
+	       "", fontname, fontsize);
   endif
   do_tics_1 (obj.ztickmode, obj.ztick, obj.zticklabelmode, obj.zticklabel,
 	     obj.zcolor, "z", plot_stream, true, mono, "border",
-	     obj.tickdir);
+	     obj.tickdir, fontname, fontsize);
 endfunction
 
 function do_tics_1 (ticmode, tics, labelmode, labels, color, ax,
-		    plot_stream, mirror, mono, axispos, tickdir)
+		    plot_stream, mirror, mono, axispos, tickdir,
+		    fontname, fontsize)
+  if (strcmp (fontname, "*"))
+    fontspec = "";
+  else
+    fontspec = sprintf ("font \"%s,%d\"",  fontname, fontsize);
+  endif
   colorspec = get_text_colorspec (color, mono);
   if (strcmpi (ticmode, "manual") || strcmpi (labelmode, "manual"))
     if (isempty (tics))
       fprintf (plot_stream, "unset %stics;\n", ax);
     elseif (strcmpi (labelmode, "manual") && ! isempty (labels))
       if (ischar (labels))
 	labels = cellstr (labels);
       endif
@@ -1430,40 +1443,40 @@ function do_tics_1 (ticmode, tics, label
 	  fprintf (plot_stream, " \"%s\" %.15g", labels{k++}, tics(i));
 	  if (i < ntics)
 	    fputs (plot_stream, ", ");
 	  endif
 	  if (k > nlabels)
 	    k = 1;
 	  endif
 	endfor
-	fprintf (plot_stream, ") %s;\n", colorspec);
+	fprintf (plot_stream, ") %s %s;\n", colorspec, fontspec);
       else
 	error ("unsupported type of ticklabel");
       endif
     else
       fprintf (plot_stream, "set format %s \"%%g\";\n", ax);
       if (mirror)
 	fprintf (plot_stream, "set %stics %s %s mirror (", ax, tickdir,
 		 axispos);
       else
 	fprintf (plot_stream, "set %stics %s %s nomirror (", ax, tickdir,
 		 axispos);
       endif
       fprintf (plot_stream, " %.15g,", tics(1:end-1));
-      fprintf (plot_stream, " %.15g);\n", tics(end));
+      fprintf (plot_stream, " %.15g) %s;\n", tics(end), fontspec);
     endif
   else
     fprintf (plot_stream, "set format %s \"%%g\";\n", ax);
     if (mirror)
-      fprintf (plot_stream, "set %stics %s %s mirror %s;\n", ax, 
-	       axispos, tickdir, colorspec);
+      fprintf (plot_stream, "set %stics %s %s mirror %s %s;\n", ax, 
+	       axispos, tickdir, colorspec, fontspec);
     else
-      fprintf (plot_stream, "set %stics %s %s nomirror %s;\n", ax, 
-	       tickdir, axispos, colorspec);
+      fprintf (plot_stream, "set %stics %s %s nomirror %s %s;\n", ax, 
+	       tickdir, axispos, colorspec, fontspec);
     endif
   endif
 endfunction
 
 function colorspec = get_text_colorspec (color, mono)
   if (mono)
     colorspec = "";
   else
diff --git a/scripts/plot/newplot.m b/scripts/plot/newplot.m
--- a/scripts/plot/newplot.m
+++ b/scripts/plot/newplot.m
@@ -39,17 +39,27 @@ function newplot ()
 	error ("newplot: unrecognized nextplot property for current figure");
     endswitch
     ca = gca ();
     anp = get (ca, "nextplot");
     switch (anp)
       case "add"
       case "replacechildren"
       case "replace"
+        ## Preserve certain axes properties
+        fontprops = {"fontangle", get(ca, "fontangle"), ...
+		     "fontname", get(ca, "fontname"), ...
+		     "fontsize", get(ca, "fontsize"), ...
+		     "fontunits", get(ca, "fontunits"), ...
+		     "fontweight", get(ca, "fontweight"), ...
+		     "position", get(ca, "position"), ...
+		     "outerposition", get(ca, "outerposition"), ...
+		     "activepositionproperty", get(ca, "activepositionproperty")};
 	__go_axes_init__ (ca, "replace");
+	set (ca, fontprops{:});
 	__request_drawnow__ ();
       otherwise
 	error ("newplot: unrecognized nextplot property for current axes");
     endswitch
 
     yt = get (ca, "ylabel");
     if (! strcmp (get (yt, "type"), "text"))
       disp("BAD!!!!!");
