# HG changeset patch
# User Rik <rik@octave.org>
# Date 1342812391 25200
#      Fri Jul 20 12:26:31 2012 -0700
# Node ID 8e2a6fc55787024856c4d25181f643f07ed13b0e
# Parent  0ba7be7fed1c0f22bbc15e94df502def7c34f9e4
doc: Use 'grayscale' rather than 'gray-scale' in documentation.

* image.txi, cmunique.m, imshow.m: Use 'grayscale' rather than 'gray-scale' in
documentation.

diff --git a/doc/interpreter/image.txi b/doc/interpreter/image.txi
--- a/doc/interpreter/image.txi
+++ b/doc/interpreter/image.txi
@@ -88,25 +88,25 @@ shows the image given in the first input
 
 @DOCSTRING(image)
 
 @DOCSTRING(imagesc)
 
 @node Representing Images
 @section Representing Images
 
-In general Octave supports four different kinds of images, gray-scale
-images, RGB images, binary images, and indexed images.  A gray-scale
+In general Octave supports four different kinds of images, grayscale
+images, RGB images, binary images, and indexed images.  A grayscale
 image is represented with an M-by-N matrix in which each
 element corresponds to the intensity of a pixel.  An RGB image is
 represented with an M-by-N-by-3 array where each
 3-vector corresponds to the red, green, and blue intensities of each
 pixel.
 
-The actual meaning of the value of a pixel in a gray-scale or RGB
+The actual meaning of the value of a pixel in a grayscale or RGB
 image depends on the class of the matrix.  If the matrix is of class
 @code{double} pixel intensities are between 0 and 1, if it is of class
 @code{uint8} intensities are between 0 and 255, and if it is of class
 @code{uint16} intensities are between 0 and 65535.
 
 A binary image is an M-by-N matrix of class @code{logical}.
 A pixel in a binary image is black if it is @code{false} and white
 if it is @code{true}.
diff --git a/scripts/image/cmunique.m b/scripts/image/cmunique.m
--- a/scripts/image/cmunique.m
+++ b/scripts/image/cmunique.m
@@ -29,17 +29,17 @@
 ## eliminated.  The output image, @var{Y}, is the original input image with
 ## the indices adjusted to match the new, possibly smaller, colormap.
 ##
 ## When the input is an RGB image (an MxNx3 array), the output colormap
 ## will contain one entry for every unique color in the original image.  
 ## In the worst case the new map could have as many rows as the number of
 ## pixels in the original image.
 ##
-## When the input is a greyscale image @var{I}, the output colormap will
+## When the input is a grayscale image @var{I}, the output colormap will
 ## contain one entry for every unique intensity value in the original image.
 ## In the worst case the new map could have as many rows as the number of
 ## pixels in the original image.
 ##
 ## Implementation Details:
 ##
 ## @var{newmap} is always an Mx3 matrix, even if the input image is
 ## an intensity grayscale image @var{I} (all three RGB planes are
diff --git a/scripts/image/imshow.m b/scripts/image/imshow.m
--- a/scripts/image/imshow.m
+++ b/scripts/image/imshow.m
@@ -20,17 +20,17 @@
 ## @deftypefn  {Function File} {} imshow (@var{im})
 ## @deftypefnx {Function File} {} imshow (@var{im}, @var{limits})
 ## @deftypefnx {Function File} {} imshow (@var{im}, @var{map})
 ## @deftypefnx {Function File} {} imshow (@var{rgb}, @dots{})
 ## @deftypefnx {Function File} {} imshow (@var{filename})
 ## @deftypefnx {Function File} {} imshow (@dots{}, @var{string_param1}, @var{value1}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} imshow (@dots{})
 ## Display the image @var{im}, where @var{im} can be a 2-dimensional
-## (gray-scale image) or a 3-dimensional (RGB image) matrix.
+## (grayscale image) or a 3-dimensional (RGB image) matrix.
 ##
 ## If @var{limits} is a 2-element vector @code{[@var{low}, @var{high}]},
 ## the image is shown using a display range between @var{low} and
 ## @var{high}.  If an empty matrix is passed for @var{limits}, the
 ## display range is computed as the range between the minimal and the
 ## maximal value in the image.
 ##
 ## If @var{map} is a valid color map, the image will be shown as an indexed
