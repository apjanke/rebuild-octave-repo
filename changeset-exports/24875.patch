# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1518475996 -3600
#      Mon Feb 12 23:53:16 2018 +0100
# Node ID 7c7b60dd4d4cde2e318905baaa54f6e10ec0af29
# Parent  a4dc2ef8741ce848d9b9b43a3363b047e77556be
Generate Qt compressed help and collection files for the manual (bug #53006)

* prepare_qhelp.py: New python script to prepare XML qcollectiongenerator files

* configure.ac: Display the output of detected qcollectiongenerator

* m4/acinclude.m4: Detect qcollectiongenerator alongside with other QT tools.

* doc/interpreter/module.mk: Add rules to build octave_interpreter.qhc and .qch
  and install them in "octdocdir"

* run-octave.in: export OCTAVE_QTHELP_COLLECTION to access collection file and
  compressed help.

* Makefile.am: add doc-interpreter-install-doc-local to install-data-local
  prerequisites

* build-aux/subst-default-vals.in.sh, libinterp/corefcn/default-defs.in.h, libinterp/corefcn/defaults.cc/h, src/octave-config.in.cc: copy "octdatadir" handling
  for "octdocdir".

diff --git a/Makefile.am b/Makefile.am
--- a/Makefile.am
+++ b/Makefile.am
@@ -394,17 +394,17 @@ DIRS_TO_MAKE = \
   $(localveroctfiledir) \
   $(localarchlibdir) \
   $(localapiarchlibdir) \
   $(localverarchlibdir)
 
 installdirs-local:
 	$(MKDIR_P) $(addprefix $(DESTDIR), $(DIRS_TO_MAKE))
 
-install-data-local: installdirs-local
+install-data-local: installdirs-local doc-interpreter-install-doc-local
 
 clean-local: doc-clean
 
 distclean-local:
 	if [ "x${srcdir}" != "x." ]; then rm -f HG-ID; fi
 
 maintainer-clean-local: doc-maintainer-clean
 
diff --git a/build-aux/subst-default-vals.in.sh b/build-aux/subst-default-vals.in.sh
--- a/build-aux/subst-default-vals.in.sh
+++ b/build-aux/subst-default-vals.in.sh
@@ -56,16 +56,17 @@ infofile=`echo "@infofile@" | sed "s|^${
 localapifcnfiledir=`echo "@localapifcnfiledir@" | sed "s|^${prefix}/||"`
 localfcnfiledir=`echo "@localfcnfiledir@" | sed "s|^${prefix}/||"`
 localstartupfiledir=`echo "@localstartupfiledir@" | sed "s|^${prefix}/||"`
 localapiarchlibdir=`echo "@localapiarchlibdir@" | sed "s|^${prefix}/||"`
 localverfcnfiledir=`echo "@localverfcnfiledir@" | sed "s|^${prefix}/||"`
 man1dir=`echo "@man1dir@" | sed "s|^${prefix}/||"`
 mandir=`echo "@mandir@" | sed "s|^${prefix}/||"`
 octdatadir=`echo "@octdatadir@" | sed "s|^${prefix}/||"`
+octdatadir=`echo "@octdocdir@" | sed "s|^${prefix}/||"`
 octetcdir=`echo "@octetcdir@" | sed "s|^${prefix}/||"`
 octincludedir=`echo "@octincludedir@" | sed "s|^${prefix}/||"`
 octlocaledir=`echo "@octlocaledir@" | sed "s|^${prefix}/||"`
 octtestsdir=`echo "@octtestsdir@" | sed "s|^${prefix}/||"`
 startupfiledir=`echo "@startupfiledir@" | sed "s|^${prefix}/||"`
 texi_macros_file=`echo "@texi_macros_file@" | sed "s|^${prefix}/||"`
 
 $SED \
@@ -95,16 +96,17 @@ texi_macros_file=`echo "@texi_macros_fil
   -e "s|%OCTAVE_LOCALAPIARCHLIBDIR%|\"${localapiarchlibdir}\"|" \
   -e "s|%OCTAVE_LOCALVERARCHLIBDIR%|\"${localverarchlibdir}\"|" \
   -e "s|%OCTAVE_LOCALVERFCNFILEDIR%|\"${localverfcnfiledir}\"|" \
   -e "s|%OCTAVE_LOCALVEROCTFILEDIR%|\"${localveroctfiledir}\"|" \
   -e "s|%OCTAVE_MAN1DIR%|\"${man1dir}\"|" \
   -e "s|%OCTAVE_MAN1EXT%|\"${man1ext}\"|" \
   -e "s|%OCTAVE_MANDIR%|\"${mandir}\"|" \
   -e "s|%OCTAVE_OCTDATADIR%|\"${octdatadir}\"|" \
+  -e "s|%OCTAVE_OCTDOCDIR%|\"${octdocdir}\"|" \
   -e "s|%OCTAVE_OCTFILEDIR%|\"${octfiledir}\"|" \
   -e "s|%OCTAVE_OCTETCDIR%|\"${octetcdir}\"|" \
   -e "s|%OCTAVE_OCTINCLUDEDIR%|\"${octincludedir}\"|" \
   -e "s|%OCTAVE_OCTLIBDIR%|\"${octlibdir}\"|" \
   -e "s|%OCTAVE_OCTLOCALEDIR%|\"${octlocaledir}\"|" \
   -e "s|%OCTAVE_OCTTESTSDIR%|\"${octtestsdir}\"|" \
   -e "s|%OCTAVE_STARTUPFILEDIR%|\"${startupfiledir}\"|" \
   -e "s|%OCTAVE_PREFIX%|\"${prefix}\"|" \
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -161,16 +161,19 @@ OCTAVE_SET_DEFAULT([octtestsdir], '${oct
 OCTAVE_SET_DEFAULT([texi_macros_file], '${octetcdir}/macros.texi')
 
 ## Where Octave will search to find image files.
 OCTAVE_SET_DEFAULT([imagedir], '${datadir}/octave/${version}/imagelib')
 
 ## Where Octave will search for example data files shipped with distribution.
 OCTAVE_SET_DEFAULT([octdatadir], '${datadir}/octave/${version}/data')
 
+## Where Octave will search for Qt help files shipped with distribution.
+OCTAVE_SET_DEFAULT([octdocdir], '${datadir}/octave/${version}/doc')
+
 ## Where Octave will look for startup files.
 OCTAVE_SET_DEFAULT([startupfiledir], '${fcnfiledir}/startup')
 OCTAVE_SET_DEFAULT([localstartupfiledir], '${localfcnfiledir}/startup')
 
 ## Where Octave will look for man and info files.
 OCTAVE_SET_DEFAULT([man1dir], '${mandir}/man1')
 OCTAVE_SET_DEFAULT([man1ext], '.1')
 OCTAVE_SET_DEFAULT([infofile], '${infodir}/octave.info')
@@ -3189,16 +3192,17 @@ AC_CONFIG_COMMANDS_PRE([
   eval localverfcnfiledir="\"$localverfcnfiledir\""
   eval octetcdir="\"$octetcdir\""
   eval octlocaledir="\"$octlocaledir\""
   eval doc_cache_file="\"$doc_cache_file\""
   eval octtestsdir="\"$octtestsdir\""
   eval texi_macros_file="\"$texi_macros_file\""
   eval imagedir="\"$imagedir\""
   eval octdatadir="\"$octdatadir\""
+  eval octdocdir="\"$octdocdir\""
   eval startupfiledir="\"$startupfiledir\""
   eval localstartupfiledir="\"$localstartupfiledir\""
   eval man1dir="\"$man1dir\""
   eval man1ext="\"$man1ext\""
   eval infofile="\"$infofile\""
 
   ## Also expand MKOCTFILE_DL_LDFLAGS, because it may depend on the values
   ## of variables expanded above.
@@ -3336,16 +3340,17 @@ Octave is now configured for $canonical_
   QRUPDATE libraries:            $QRUPDATE_LIBS
   Qt CPPFLAGS:                   $QT_CPPFLAGS
   Qt LDFLAGS:                    $QT_LDFLAGS
   Qt libraries:                  $QT_LIBS
   Qt moc:                        $MOC $MOCFLAGS
   Qt uic:                        $UIC $UICFLAGS
   Qt rcc:                        $RCC $RCCFLAGS
   Qt lrelease:                   $LRELEASE $LRELEASEFLAGS
+  Qt qcollectiongenerator:       $QCOLLECTIONGENERATOR $QCOLLECTIONGENERATORFLAGS
   Qt qhelpgenerator:             $QHELPGENERATOR $QHELPGENERATORFLAGS
   READLINE libraries:            $READLINE_LIBS
   Sndfile CPPFLAGS:              $SNDFILE_CPPFLAGS
   Sndfile LDFLAGS:               $SNDFILE_LDFLAGS
   Sndfile libraries:             $SNDFILE_LIBS
   SuiteSparse config libraries:  $SUITESPARSECONFIG_LIBS
   SUNDIALS IDA CPPFLAGS:         $SUNDIALS_IDA_CPPFLAGS
   SUNDIALS IDA LDFLAGS:          $SUNDIALS_IDA_LDFLAGS
diff --git a/doc/interpreter/module.mk b/doc/interpreter/module.mk
--- a/doc/interpreter/module.mk
+++ b/doc/interpreter/module.mk
@@ -187,20 +187,29 @@ HTMLS += %reldir%/octave.html
 
 OCTAVE_HTML_DIR = %reldir%/octave.html
 OCTAVE_HTML_TMP_DIR = $(OCTAVE_HTML_DIR:.html=.htp)
 OCTAVE_HTML_STAMP = $(OCTAVE_HTML_DIR)/.octave-html-stamp
 
 OCTAVE_CSS = %reldir%/octave.css
 HTMLDIR_CSS = $(OCTAVE_HTML_DIR)/octave.css
 
+OCTAVE_QTHELP_STAMP = %reldir%/.octave-qthelp-stamp
+OCTAVE_QTHELP_FILES = %reldir%/octave_interpreter.qhc %reldir%/octave_interpreter.qch
+
 $(srcdir)/%reldir%/octave.info: $(DOC_IMAGES_TXT) $(octave_TEXINFOS)
 %reldir%/octave.dvi: $(DOC_IMAGES_EPS) $(octave_TEXINFOS)
 %reldir%/octave.pdf: $(DOC_IMAGES_PDF) $(octave_TEXINFOS)
 $(OCTAVE_HTML_STAMP): $(DOC_IMAGES_PNG) $(octave_TEXINFOS)
+$(OCTAVE_QTHELP_FILES): $(OCTAVE_QTHELP_STAMP)
+$(OCTAVE_QTHELP_STAMP): $(OCTAVE_HTML_STAMP) $(srcdir)/%reldir%/prepare_qhelp.py
+	$(AM_V_GEN) rm -f $(OCTAVE_QTHELP_FILES) && \
+	$(PYTHON) $(srcdir)/%reldir%/prepare_qhelp.py %reldir%/octave_interpreter octave.html && \
+	$(QCOLLECTIONGENERATOR) %reldir%/octave_interpreter.qhcp -o %reldir%/octave_interpreter.qhc >/dev/null && \
+	rm -f %reldir%/octave_interpreter.qhcp %reldir%/octave_interpreter.qhp
 
 $(srcdir)/%reldir%/octave.info: %reldir%/octave.texi $(srcdir)/%reldir%/version-octave.texi
 	$(AM_V_MAKEINFO)restore=: && backupdir="$(am__leading_dot)am$$$$" && \
 	am__cwd=`pwd` && $(am__cd) $(srcdir) && \
 	rm -rf $$backupdir && mkdir $$backupdir && \
 	if ($(MAKEINFO) --version) >/dev/null 2>&1; then \
 	  for f in $@ $@-[0-9] $@-[0-9][0-9] $(@:.info=).i[0-9] $(@:.info=).i[0-9][0-9]; do \
 	    if test -f $$f; then mv $$f $$backupdir; restore=mv; else :; fi; \
@@ -252,44 +261,50 @@ HTMLDIR_CSS = $(OCTAVE_HTML_DIR)/octave.
 
 DOC_TARGETS += \
   $(srcdir)/%reldir%/octave.info \
   %reldir%/doc-cache \
   %reldir%/octave.ps \
   %reldir%/octave.pdf \
   $(OCTAVE_HTML_STAMP) \
   $(HTMLDIR_IMAGES) \
-  $(HTMLDIR_CSS)
+  $(HTMLDIR_CSS) \
+  $(OCTAVE_QTHELP_FILES)
 
 ## Distribute both OCTAVE_CSS and HTMLDIR_CSS so that the rules for
 ## building HTMLDIR_CSS work properly.
 
 doc_EXTRA_DIST += \
   $(BUILT_OCTAVE_TEXI_SRC) \
   $(srcdir)/%reldir%/octave.info \
   %reldir%/TODO \
   %reldir%/doc-cache \
   %reldir%/octave.dvi \
   %reldir%/octave.ps \
   %reldir%/octave.pdf \
   %reldir%/octave.html \
   $(HTMLDIR_IMAGES) \
   $(OCTAVE_CSS) \
-  $(HTMLDIR_CSS)
+  $(HTMLDIR_CSS) \
+  $(OCTAVE_QTHELP_FILES)
 
 # Prevent packaging of distribution unless all libraries
 # necessary to create documentation are present
 doc-interpreter-dist-hook:
 	@$(GREP) '#define HAVE_COLAMD 1' $(top_builddir)/config.h > /dev/null || { echo "Documentation creation requires missing COLAMD library.  Cannot package distribution!" ; exit 1; }
 	@$(GREP) '#define HAVE_CHOLMOD 1' $(top_builddir)/config.h > /dev/null || { echo "Documentation creation requires missing CHOLMOD library.  Cannot package distribution!" ; exit 1; }
 	@$(GREP) '#define HAVE_UMFPACK 1' $(top_builddir)/config.h > /dev/null || { echo "Documentation creation requires missing UMFPACK library.  Cannot package distribution!" ; exit 1; }
 	@$(GREP) '#define HAVE_QHULL 1' $(top_builddir)/config.h > /dev/null || { echo "Documentation creation requires missing QHULL library.  Cannot package distribution!" ; exit 1; }
 
 $(MUNGED_TEXI_SRC): $(DOCSTRING_FILES)
 
+doc-interpreter-install-doc-local:
+	$(MKDIR_P) $(octdocdir)
+	cp $(OCTAVE_QTHELP_FILES) $(octdocdir)
+
 ## These two texi files have an additional dependency through the
 ## @EXAMPLEFILE macro.
 %reldir%/oop.texi: $(examples_code_SRC)
 %reldir%/external.texi: $(examples_code_SRC)
 
 %.texi : %.txi %reldir%/munge-texi.pl | %reldir%/$(octave_dirstamp)
 	$(AM_V_GEN)rm -f $@-t $@ && \
 	$(PERL) $(srcdir)/%reldir%/munge-texi.pl $(top_srcdir) $(DOCSTRING_FILES) < $< > $@-t && \
diff --git a/doc/interpreter/prepare_qhelp.py b/doc/interpreter/prepare_qhelp.py
new file mode 100644
--- /dev/null
+++ b/doc/interpreter/prepare_qhelp.py
@@ -0,0 +1,187 @@
+## Copyright (C) 2018 Pantxo Diribarne
+##
+## This file is part of Octave.
+##
+## Octave is free software: you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation, either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <https://www.gnu.org/licenses/>.
+
+## Usage: python prepare_qhelp FNAME HTMLDIR
+##
+## Create a help project file FNAME.qhp and a help collection project
+## file FNAME.qhcp after parsing index.html and Function-Index.html files
+## in directory HTMLDIR. The latter must be relative to the parent
+## directory of FNAME.
+
+import sys, os
+import lxml.html as lh
+import lxml.etree as etree
+
+if len(sys.argv) < 3:
+    sys.exit('Usage: %s fname htmldir' % sys.argv[0])
+
+# Parameters
+basedir = os.path.abspath (os.path.dirname (sys.argv[1]))
+fname = os.path.join (basedir, os.path.basename (sys.argv[1]))
+htmldir =  os.path.basename (sys.argv[2])
+
+title = 'GNU Octave Manual'
+version = '1.0'
+namespace = 'org.octave.interpreter-1.0'
+
+
+# Utility functions
+def get_toc (node):
+    toc = list ()
+    for li in node.iterchildren('li'):
+        item = dict ()
+        for a in li.iter('a'):
+            item['name'] = a.text_content ()
+            item['link'] = a.attrib['href']
+            break
+
+        for ul in li.iter('ul'):
+            item['children'] = get_toc (ul)
+            break
+
+        toc.append(item)
+    return toc
+
+def populate_toc (node, toc, hdir):
+    for item in toc:
+        selt = etree.SubElement (node, 'section')
+        selt.attrib['title'] = item['name']
+        selt.attrib['ref'] = os.path.join (hdir, item['link'])
+        if (item.has_key('children')):
+            populate_toc (selt, item['children'], hdir)
+
+def get_keywords (node):
+    out = list ()
+    keys = list ()
+    for code in node.iter('code'):
+        item = dict ()
+        a = code.getparent ()
+        key = code.text_content ()
+        # Only retain the first entry for a given keyword
+        if (key not in keys):
+            keys.append (key)
+            item['name'] = key
+            item['link'] = a.attrib['href']
+            out.append(item)
+    return out
+
+def populate_keywords (node, ref, hdir):
+    for item in ref:
+        selt = etree.SubElement (node, 'keyword')
+        selt.attrib['name'] = item['name']
+        selt.attrib['id'] = item['name']
+        selt.attrib['ref'] = os.path.join (hdir, item['link'])
+
+# Parse index.html to retrieve the table of contents
+url = os.path.join (basedir, htmldir, 'index.html')
+node = lh.parse(url).getroot ()
+for elt in node.iter('div'):
+    if (elt.attrib.has_key('class') and elt.attrib['class'] == 'contents'):
+        node = elt
+        for elt in node.iter('ul'):
+            if elt.attrib['class'] == 'no-bullet':
+                node = elt
+                break
+        break
+
+toc = get_toc (node);
+
+# Parse Function-Index.html to retrieve the function reference
+url = os.path.join (basedir, htmldir, 'Function-Index.html')
+node = lh.parse (url).getroot ()
+for elt in node.iter('table'):
+    if (elt.attrib.has_key('class') and elt.attrib['class'] == 'index-fn'):
+        node = elt
+        break
+
+ref = get_keywords (node)
+
+# Prepare Qt Help Project document
+root = etree.Element("QtHelpProject")
+root.attrib['version'] = version
+
+elt = etree.SubElement (root, 'namespace')
+elt.text = namespace
+
+elt = etree.SubElement (root, 'virtualFolder')
+elt.text = 'doc'
+
+elt = etree.SubElement (root, 'customFilter')
+elt.attrib['name'] = 'Octave Manual'
+selt = etree.SubElement (elt, 'filterAttribute')
+selt.text = 'core'
+selt = etree.SubElement (elt, 'filterAttribute')
+selt.text = 'manual'
+
+elt = etree.SubElement (root, 'customFilter')
+elt.attrib['name'] = 'Octave C++ API'
+selt = etree.SubElement (elt, 'filterAttribute')
+selt.text = 'core'
+selt = etree.SubElement (elt, 'filterAttribute')
+selt.text = 'cpp'
+
+elt = etree.SubElement (root, 'filterSection')
+selt = etree.SubElement (elt, 'filterAttribute')
+selt.text = 'core'
+selt = etree.SubElement (elt, 'filterAttribute')
+selt.text = 'manual'
+selt = etree.SubElement (elt, 'toc')
+sselt = etree.SubElement (selt, 'section')
+sselt.attrib['title'] = title
+sselt.attrib['ref'] = os.path.join (htmldir, 'index.html')
+populate_toc (sselt, toc, htmldir)
+
+selt = etree.SubElement (elt, 'keywords')
+populate_keywords (selt, ref, htmldir)
+
+selt = etree.SubElement (elt, 'files')
+sselt = etree.SubElement (selt, 'file')
+sselt.text = os.path.join (htmldir, '*.html')
+sselt = etree.SubElement (selt, 'file')
+sselt.text = os.path.join (htmldir, '*.png')
+sselt = etree.SubElement (selt, 'file')
+sselt.text = os.path.join (htmldir, '*.css')
+
+fid = open (fname + '.qhp', 'w+')
+fid.write ('<?xml version="1.0" encoding="UTF-8"?>\n')
+fid.write ('<!--DO NOT EDIT!  Generated automatically by prepare_qhelp.py-->\n')
+fid.write (etree.tostring (root, pretty_print = True))
+fid.close ()
+
+# Prepare Qt Help Collection Project document
+root = etree.Element("QHelpCollectionProject")
+root.attrib['version'] = version
+elt = etree.SubElement (root, 'docFiles')
+
+selt = etree.SubElement (elt, 'generate')
+sselt = etree.SubElement (selt, 'file')
+ssselt = etree.SubElement (sselt, 'input')
+tmp = fname + '.qhp'
+ssselt.text = tmp
+ssselt = etree.SubElement (sselt, 'output')
+ssselt.text = fname + '.qch'
+
+selt = etree.SubElement (elt, 'register')
+sselt = etree.SubElement (selt, 'file')
+sselt.text = fname + '.qch'
+
+fid = open (fname + '.qhcp', 'w+')
+fid.write ('<?xml version="1.0" encoding="UTF-8"?>\n')
+fid.write ('<!--DO NOT EDIT! Generated automatically by prepare_qhelp.py-->\n')
+fid.write (etree.tostring (root, pretty_print = True))
+fid.close ()
diff --git a/libinterp/corefcn/default-defs.in.h b/libinterp/corefcn/default-defs.in.h
--- a/libinterp/corefcn/default-defs.in.h
+++ b/libinterp/corefcn/default-defs.in.h
@@ -115,16 +115,20 @@ along with Octave; see the file COPYING.
 #if ! defined (OCTAVE_FCNFILEDIR)
 #  define OCTAVE_FCNFILEDIR %OCTAVE_FCNFILEDIR%
 #endif
 
 #if ! defined (OCTAVE_OCTDATADIR)
 #  define OCTAVE_OCTDATADIR %OCTAVE_OCTDATADIR%
 #endif
 
+#if ! defined (OCTAVE_OCTDOCDIR)
+#  define OCTAVE_OCTDOCDIR %OCTAVE_OCTDOCDIR%
+#endif
+
 #if ! defined (OCTAVE_OCTETCDIR)
 #  define OCTAVE_OCTETCDIR %OCTAVE_OCTETCDIR%
 #endif
 
 #if ! defined (OCTAVE_OCTINCLUDEDIR)
 #  define OCTAVE_OCTINCLUDEDIR %OCTAVE_OCTINCLUDEDIR%
 #endif
 
diff --git a/libinterp/corefcn/defaults.cc b/libinterp/corefcn/defaults.cc
--- a/libinterp/corefcn/defaults.cc
+++ b/libinterp/corefcn/defaults.cc
@@ -68,16 +68,17 @@ static std::string Vlocal_oct_file_dir;
 static std::string Voct_file_dir;
 
 static std::string Vlocal_ver_fcn_file_dir;
 static std::string Vlocal_api_fcn_file_dir;
 static std::string Vlocal_fcn_file_dir;
 static std::string Vfcn_file_dir;
 
 static std::string Voct_data_dir;
+static std::string Voct_doc_dir;
 static std::string Voct_etc_dir;
 static std::string Voct_include_dir;
 static std::string Voct_lib_dir;
 static std::string Voct_locale_dir;
 static std::string Voct_tests_dir;
 
 static std::string Vinfo_dir;
 
@@ -205,16 +206,17 @@ init_defaults (void)
     = octave::config::prepend_octave_home (OCTAVE_LOCALVERFCNFILEDIR);
   Vlocal_api_fcn_file_dir
     = octave::config::prepend_octave_home (OCTAVE_LOCALAPIFCNFILEDIR);
   Vlocal_fcn_file_dir
     = octave::config::prepend_octave_home (OCTAVE_LOCALFCNFILEDIR);
   Vfcn_file_dir = octave::config::prepend_octave_home (OCTAVE_FCNFILEDIR);
 
   Voct_data_dir = octave::config::prepend_octave_home (OCTAVE_OCTDATADIR);
+  Voct_doc_dir = octave::config::prepend_octave_home (OCTAVE_OCTDOCDIR);
   Voct_etc_dir = octave::config::prepend_octave_home (OCTAVE_OCTETCDIR);
   Voct_include_dir = octave::config::prepend_octave_home (OCTAVE_OCTINCLUDEDIR);
   Voct_lib_dir = octave::config::prepend_octave_exec_home (OCTAVE_OCTLIBDIR);
   Voct_locale_dir = octave::config::prepend_octave_home (OCTAVE_OCTLOCALEDIR);
   Voct_tests_dir = octave::config::prepend_octave_home (OCTAVE_OCTTESTSDIR);
 
   Vinfo_dir = octave::config::prepend_octave_home (OCTAVE_INFODIR);
 
@@ -285,16 +287,17 @@ namespace octave
     std::string oct_file_dir (void) { RETURN (Voct_file_dir); }
 
     std::string local_ver_fcn_file_dir (void) { RETURN (Vlocal_ver_fcn_file_dir); }
     std::string local_api_fcn_file_dir (void) { RETURN (Vlocal_api_fcn_file_dir); }
     std::string local_fcn_file_dir (void) { RETURN (Vlocal_fcn_file_dir); }
     std::string fcn_file_dir (void) { RETURN (Vfcn_file_dir); }
 
     std::string oct_data_dir (void) { RETURN (Voct_data_dir); }
+    std::string oct_doc_dir (void) { RETURN (Voct_doc_dir); }
     std::string oct_etc_dir (void) { RETURN (Voct_etc_dir); }
     std::string oct_include_dir (void) { RETURN (Voct_include_dir); }
     std::string oct_lib_dir (void) { RETURN (Voct_lib_dir); }
     std::string oct_locale_dir (void) { RETURN (Voct_locale_dir); }
     std::string oct_tests_dir (void) { RETURN (Voct_tests_dir); }
 
     std::string man_dir (void) { RETURN (Vman_dir); }
     std::string man1_dir (void) { RETURN (Vman1_dir); }
diff --git a/libinterp/corefcn/defaults.h b/libinterp/corefcn/defaults.h
--- a/libinterp/corefcn/defaults.h
+++ b/libinterp/corefcn/defaults.h
@@ -72,16 +72,17 @@ namespace octave
     extern OCTINTERP_API std::string oct_file_dir (void);
 
     extern OCTINTERP_API std::string local_ver_fcn_file_dir (void);
     extern OCTINTERP_API std::string local_api_fcn_file_dir (void);
     extern OCTINTERP_API std::string local_fcn_file_dir (void);
     extern OCTINTERP_API std::string fcn_file_dir (void);
 
     extern OCTINTERP_API std::string oct_data_dir (void);
+    extern OCTINTERP_API std::string oct_doc_dir (void);
     extern OCTINTERP_API std::string oct_etc_dir (void);
     extern OCTINTERP_API std::string oct_include_dir (void);
     extern OCTINTERP_API std::string oct_lib_dir (void);
     extern OCTINTERP_API std::string oct_locale_dir (void);
     extern OCTINTERP_API std::string oct_tests_dir (void);
 
     extern OCTINTERP_API std::string info_dir (void);
 
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -1916,40 +1916,52 @@ AC_DEFUN([OCTAVE_CHECK_QT_VERSION], [AC_
     if test -z "$LRELEASE_QTVER"; then
       AC_CHECK_TOOLS(LRELEASE, [lrelease])
       if test -n "$LRELEASE" && test -n "$QTCHOOSER"; then
         LRELEASEFLAGS="-qt$qt_version"
       fi
     else
       LRELEASE="$LRELEASE_QTVER"
     fi
+    
+    AC_CHECK_TOOLS(QCOLLECTIONGENERATOR_QTVER, [qcollectiongenerator-qt$qt_version])
+    if test -z "$QCOLLECTIONGENERATOR_QTVER"; then
+      AC_CHECK_TOOLS(QCOLLECTIONGENERATOR, [qcollectiongenerator])
+      if test -n "$QCOLLECTIONGENERATOR" && test -n "$QTCHOOSER"; then
+        QCOLLECTIONGENERATORFLAGS="-qt$qt_version"
+      fi
+    else
+      QCOLLECTIONGENERATOR="$QCOLLECTIONGENERATOR_QTVER"
+    fi
 
     AC_CHECK_TOOLS(QHELPGENERATOR_QTVER, [qhelpgenerator-qt$qt_version])
     if test -z "$QHELPGENERATOR_QTVER"; then
       AC_CHECK_TOOLS(QHELPGENERATOR, [qhelpgenerator])
       if test -n "$QHELPGENERATOR" && test -n "$QTCHOOSER"; then
         QHELPGENERATORFLAGS="-qt$qt_version"
       fi
     else
       QHELPGENERATOR="$QHELPGENERATOR_QTVER"
     fi
 
-    if test -z "$MOC" || test -z "$UIC" || test -z "$RCC" || test -z "$LRELEASE" || test -z "$QHELPGENERATOR"; then
+    if test -z "$MOC" || test -z "$UIC" || test -z "$RCC" || test -z "$LRELEASE" || test -z "$QCOLLECTIONGENERATOR" || test -z "$QHELPGENERATOR"; then
       warn_qt_tools="one or more of the Qt utility programs moc, uic, rcc, and lrelease not found; disabling Qt GUI"
       build_qt_gui=no
       MOC_QTVER=
       UIC_QTVER=
       RCC_QTVER=
       LRELEASE_QTVER=
+      QCOLLECTIONGENERATOR_QTVER=
       QHELPGENERATOR_QTVER=
       MOCFLAGS=
       UICFLAGS=
       RCCFLAGS=
       LRELEASEFLAGS=
       QHELPGENERATORFLAGS=
+      QCOLLECTIONGENERATORFLAGS=
       $as_unset ac_cv_prog_MOC_QTVER
       $as_unset ac_cv_prog_ac_ct_MOC_QTVER
       $as_unset ac_cv_prog_UIC_QTVER
       $as_unset ac_cv_prog_ac_ct_UIC_QTVER
       $as_unset ac_cv_prog_RCC_QTVER
       $as_unset ac_cv_prog_ac_ct_RCC_QTVER
       $as_unset ac_cv_prog_LRELEASE_QTVER
       $as_unset ac_cv_prog_ac_ct_LRELEASE_QTVER
diff --git a/run-octave.in b/run-octave.in
--- a/run-octave.in
+++ b/run-octave.in
@@ -102,16 +102,17 @@ fi
 ## in the $builddir/src directory.
 
 OCTAVE_ARCHLIBDIR="$builddir/src"; export OCTAVE_ARCHLIBDIR
 OCTAVE_BINDIR="$builddir/src"; export OCTAVE_BINDIR
 OCTAVE_DEFAULT_QT_SETTINGS="$builddir/libgui/default-qt-settings"; export OCTAVE_DEFAULT_QT_SETTINGS
 OCTAVE_FONT_DIR="$top_srcdir/etc/fonts"; export OCTAVE_FONT_DIR
 OCTAVE_JAVA_DIR="$builddir/scripts/java"; export OCTAVE_JAVA_DIR
 OCTAVE_LOCALE_DIR="$builddir/libgui/languages"; export OCTAVE_LOCALE_DIR
+OCTAVE_QTHELP_COLLECTION="$builddir/doc/interpreter/octave_interpreter.qhc"; export OCTAVE_QTHELP_COLLECTION
 OCTAVE_SITE_INITFILE="$top_srcdir/scripts/startup/site-rcfile"; export OCTAVE_SITE_INITFILE
 OCTAVE_VERSION_INITFILE="$top_srcdir/scripts/startup/version-rcfile"; export OCTAVE_VERSION_INITFILE
 
 if [ "$ADDRESS_SANITIZER_ENABLED" = yes ]; then
   ASAN_OPTIONS=symbolize=1; export ASAN_OPTIONS
 fi
 
 exec $builddir/libtool --mode=execute $driver \
diff --git a/src/octave-config.in.cc b/src/octave-config.in.cc
--- a/src/octave-config.in.cc
+++ b/src/octave-config.in.cc
@@ -72,22 +72,22 @@ static std::string help_msg =
 "                          DATAROOTDIR            LOCALVERFCNFILEDIR\n"
 "                          DEFAULT_PAGER          LOCALVEROCTFILEDIR\n"
 "                          EXEC_PREFIX            MAN1DIR\n"
 "                          EXEEXT                 MAN1EXT\n"
 "                          FCNFILEDIR             MANDIR\n"
 "                          IMAGEDIR               OCTAVE_EXEC_HOME\n"
 "                          INCLUDEDIR             OCTAVE_HOME\n"
 "                          INFODIR                OCTDATADIR\n"
-"                          INFOFILE               OCTFILEDIR\n"
-"                          LIBDIR                 OCTINCLUDEDIR\n"
-"                          LIBEXECDIR             OCTLIBDIR\n"
-"                          LOCALAPIARCHLIBDIR     STARTUPFILEDIR\n"
-"                          LOCALAPIFCNFILEDIR     VERSION\n"
-"                          LOCALAPIOCTFILEDIR\n"
+"                          INFOFILE               OCTDOCDIR\n"
+"                          LIBDIR                 OCTFILEDIR\n"
+"                          LIBEXECDIR             OCTINCLUDEDIR\n"
+"                          LOCALAPIARCHLIBDIR     OCTLIBDIR\n"
+"                          LOCALAPIFCNFILEDIR     STARTUPFILEDIR\n"
+"                          LOCALAPIOCTFILEDIR     VERSION\n"
 "\n"
 "  -v, --version         Print the Octave version number.\n"
 "\n";
 
 static void
 initialize (void)
 {
   set_octave_home ();
@@ -121,16 +121,17 @@ initialize (void)
   vars["LOCALOCTFILEDIR"] = prepend_octave_exec_home (%OCTAVE_LOCALOCTFILEDIR%);
   vars["LOCALSTARTUPFILEDIR"] = prepend_octave_home (%OCTAVE_LOCALSTARTUPFILEDIR%);
   vars["LOCALVERARCHLIBDIR"] = prepend_octave_exec_home (%OCTAVE_LOCALVERARCHLIBDIR%);
   vars["LOCALVERFCNFILEDIR"] = prepend_octave_home (%OCTAVE_LOCALVERFCNFILEDIR%);
   vars["LOCALVEROCTFILEDIR"] = prepend_octave_exec_home (%OCTAVE_LOCALVEROCTFILEDIR%);
   vars["MAN1DIR"] = prepend_octave_home (%OCTAVE_MAN1DIR%);
   vars["MANDIR"] = prepend_octave_home (%OCTAVE_MANDIR%);
   vars["OCTDATADIR"] = prepend_octave_home (%OCTAVE_OCTDATADIR%);
+  vars["OCTDOCDIR"] = prepend_octave_home (%OCTAVE_OCTDOCDIR%);
   vars["OCTFILEDIR"] = prepend_octave_exec_home (%OCTAVE_OCTFILEDIR%);
   vars["OCTINCLUDEDIR"] = prepend_octave_home (%OCTAVE_OCTINCLUDEDIR%);
   vars["OCTLIBDIR"] = prepend_octave_exec_home (%OCTAVE_OCTLIBDIR%);
   vars["STARTUPFILEDIR"] = prepend_octave_home (%OCTAVE_STARTUPFILEDIR%);
 }
 
 int
 main (int argc, char **argv)
