# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1237545565 -3600
#      Fri Mar 20 11:39:25 2009 +0100
# Node ID dc07bc4157b83e523f7cc4c376c9d637748ff2d3
# Parent  a48fba01e4ac615f7b92bda5dc8d540340f77b41
allow empty matrices in stream input operators

diff --git a/liboctave/CColVector.cc b/liboctave/CColVector.cc
--- a/liboctave/CColVector.cc
+++ b/liboctave/CColVector.cc
@@ -519,19 +519,17 @@ operator << (std::ostream& os, const Com
   return os;
 }
 
 std::istream&
 operator >> (std::istream& is, ComplexColumnVector& a)
 {
   octave_idx_type len = a.length();
 
-  if (len < 1)
-    is.clear (std::ios::badbit);
-  else
+  if (len > 0)
     {
       double tmp;
       for (octave_idx_type i = 0; i < len; i++)
         {
           is >> tmp;
           if (is)
             a.elem (i) = tmp;
           else
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -3635,19 +3635,17 @@ operator << (std::ostream& os, const Com
 }
 
 std::istream&
 operator >> (std::istream& is, ComplexMatrix& a)
 {
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
-  if (nr < 1 || nc < 1)
-    is.clear (std::ios::badbit);
-  else
+  if (nr > 0 && nc > 0)
     {
       Complex tmp;
       for (octave_idx_type i = 0; i < nr; i++)
 	for (octave_idx_type j = 0; j < nc; j++)
 	  {
 	    tmp = octave_read_complex (is);
 	    if (is)
 	      a.elem (i, j) = tmp;
diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -911,19 +911,17 @@ operator << (std::ostream& os, const Com
   return os;
 }
 
 std::istream&
 operator >> (std::istream& is, ComplexNDArray& a)
 {
   octave_idx_type nel = a.nelem ();
 
-  if (nel < 1 )
-    is.clear (std::ios::badbit);
-  else
+  if (nel > 0)
     {
       Complex tmp;
       for (octave_idx_type i = 0; i < nel; i++)
 	  {
 	    tmp = octave_read_complex (is);
 	    if (is)
 	      a.elem (i) = tmp;
 	    else
diff --git a/liboctave/CRowVector.cc b/liboctave/CRowVector.cc
--- a/liboctave/CRowVector.cc
+++ b/liboctave/CRowVector.cc
@@ -429,19 +429,17 @@ operator << (std::ostream& os, const Com
   return os;
 }
 
 std::istream&
 operator >> (std::istream& is, ComplexRowVector& a)
 {
   octave_idx_type len = a.length();
 
-  if (len < 1)
-    is.clear (std::ios::badbit);
-  else
+  if (len > 0)
     {
       Complex tmp;
       for (octave_idx_type i = 0; i < len; i++)
         {
           is >> tmp;
           if (is)
             a.elem (i) = tmp;
           else
diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -7465,19 +7465,17 @@ operator << (std::ostream& os, const Spa
 
 std::istream&
 operator >> (std::istream& is, SparseComplexMatrix& a)
 {
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
   octave_idx_type nz = a.nzmax ();
 
-  if (nr < 1 || nc < 1)
-    is.clear (std::ios::badbit);
-  else
+  if (nr > 0 && nc > 0)
     {
       octave_idx_type itmp, jtmp, jold = 0;
       Complex tmp;
       octave_idx_type ii = 0;
        
       a.cidx (0) = 0;
       for (octave_idx_type i = 0; i < nz; i++)
 	{
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2009-03-20  Jaroslav Hajek  <highegg@gmail.com>
+
+	
+	* CColVector.cc, CMatrix.cc, CNDArray.cc, CRowVector.cc, CSparse.cc,
+	boolSparse.cc, dColVector.cc, dMatrix.cc, dNDArray.cc, dRowVector.cc,
+	dSparse.cc, fCColVector.cc, fCMatrix.cc, fCNDArray.cc, fCRowVector.cc,
+	fColVector.cc, fMatrix.cc, fNDArray.cc, fRowVector.cc, intNDArray.cc:
+	Allow empty arrays in stream input operators.
+
 2009-03-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.h (Array<T>::fastmap): New method.
 	* dNDArray.cc (NDArray::isnan, NDArray::isinf, NDArray::isfinite):
 	New methods.
 	* dNDArray.h: Declare them.
 	* fNDArray.cc (FloatNDArray::isnan, FloatNDArray::isinf,
 	FloatNDArray::isfinite): New methods.
diff --git a/liboctave/boolSparse.cc b/liboctave/boolSparse.cc
--- a/liboctave/boolSparse.cc
+++ b/liboctave/boolSparse.cc
@@ -179,19 +179,17 @@ operator << (std::ostream& os, const Spa
 
 std::istream&
 operator >> (std::istream& is, SparseBoolMatrix& a)
 {
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
   octave_idx_type nz = a.nzmax ();
 
-  if (nr < 1 || nc < 1)
-    is.clear (std::ios::badbit);
-  else
+  if (nr > 0 && nc > 0)
     {
       octave_idx_type itmp, jtmp, jold = 0;
       bool tmp;
       octave_idx_type ii = 0;
        
       a.cidx (0) = 0;
       for (octave_idx_type i = 0; i < nz; i++)
 	{
diff --git a/liboctave/dColVector.cc b/liboctave/dColVector.cc
--- a/liboctave/dColVector.cc
+++ b/liboctave/dColVector.cc
@@ -316,19 +316,17 @@ operator << (std::ostream& os, const Col
   return os;
 }
 
 std::istream&
 operator >> (std::istream& is, ColumnVector& a)
 {
   octave_idx_type len = a.length();
 
-  if (len < 1)
-    is.clear (std::ios::badbit);
-  else
+  if (len > 0)
     {
       double tmp;
       for (octave_idx_type i = 0; i < len; i++)
         {
           is >> tmp;
           if (is)
             a.elem (i) = tmp;
           else
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -3053,19 +3053,17 @@ operator << (std::ostream& os, const Mat
 }
 
 std::istream&
 operator >> (std::istream& is, Matrix& a)
 {
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
-  if (nr < 1 || nc < 1)
-    is.clear (std::ios::badbit);
-  else
+  if (nr > 0 && nc > 0)
     {
       double tmp;
       for (octave_idx_type i = 0; i < nr; i++)
 	for (octave_idx_type j = 0; j < nc; j++)
 	  {
 	    tmp = octave_read_double (is);
 	    if (is)
 	      a.elem (i, j) = tmp;
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -960,19 +960,17 @@ operator << (std::ostream& os, const NDA
   return os;
 }
 
 std::istream&
 operator >> (std::istream& is, NDArray& a)
 {
   octave_idx_type nel = a.nelem ();
 
-  if (nel < 1 )
-    is.clear (std::ios::badbit);
-  else
+  if (nel > 0)
     {
       double tmp;
       for (octave_idx_type i = 0; i < nel; i++)
 	  {
 	    tmp = octave_read_double (is);
 	    if (is)
 	      a.elem (i) = tmp;
 	    else
diff --git a/liboctave/dRowVector.cc b/liboctave/dRowVector.cc
--- a/liboctave/dRowVector.cc
+++ b/liboctave/dRowVector.cc
@@ -286,19 +286,17 @@ operator << (std::ostream& os, const Row
   return os;
 }
 
 std::istream&
 operator >> (std::istream& is, RowVector& a)
 {
   octave_idx_type len = a.length();
 
-  if (len < 1)
-    is.clear (std::ios::badbit);
-  else
+  if (len > 0)
     {
       double tmp;
       for (octave_idx_type i = 0; i < len; i++)
         {
           is >> tmp;
           if (is)
             a.elem (i) = tmp;
           else
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -7583,19 +7583,17 @@ operator << (std::ostream& os, const Spa
 
 std::istream&
 operator >> (std::istream& is, SparseMatrix& a)
 {
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
   octave_idx_type nz = a.nzmax ();
 
-  if (nr < 1 || nc < 1)
-    is.clear (std::ios::badbit);
-  else
+  if (nr > 0 && nc > 0)
     {
       octave_idx_type itmp, jtmp, jold = 0;
       double tmp;
       octave_idx_type ii = 0;
        
       a.cidx (0) = 0;
       for (octave_idx_type i = 0; i < nz; i++)
 	{
diff --git a/liboctave/fCColVector.cc b/liboctave/fCColVector.cc
--- a/liboctave/fCColVector.cc
+++ b/liboctave/fCColVector.cc
@@ -519,19 +519,17 @@ operator << (std::ostream& os, const Flo
   return os;
 }
 
 std::istream&
 operator >> (std::istream& is, FloatComplexColumnVector& a)
 {
   octave_idx_type len = a.length();
 
-  if (len < 1)
-    is.clear (std::ios::badbit);
-  else
+  if (len > 0)
     {
       float tmp;
       for (octave_idx_type i = 0; i < len; i++)
         {
           is >> tmp;
           if (is)
             a.elem (i) = tmp;
           else
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -3628,19 +3628,17 @@ operator << (std::ostream& os, const Flo
 }
 
 std::istream&
 operator >> (std::istream& is, FloatComplexMatrix& a)
 {
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
-  if (nr < 1 || nc < 1)
-    is.clear (std::ios::badbit);
-  else
+  if (nr > 0 && nc > 0)
     {
       FloatComplex tmp;
       for (octave_idx_type i = 0; i < nr; i++)
 	for (octave_idx_type j = 0; j < nc; j++)
 	  {
 	    tmp = octave_read_complex (is);
 	    if (is)
 	      a.elem (i, j) = tmp;
diff --git a/liboctave/fCNDArray.cc b/liboctave/fCNDArray.cc
--- a/liboctave/fCNDArray.cc
+++ b/liboctave/fCNDArray.cc
@@ -906,19 +906,17 @@ operator << (std::ostream& os, const Flo
   return os;
 }
 
 std::istream&
 operator >> (std::istream& is, FloatComplexNDArray& a)
 {
   octave_idx_type nel = a.nelem ();
 
-  if (nel < 1 )
-    is.clear (std::ios::badbit);
-  else
+  if (nel > 0)
     {
       FloatComplex tmp;
       for (octave_idx_type i = 0; i < nel; i++)
 	  {
 	    tmp = octave_read_complex (is);
 	    if (is)
 	      a.elem (i) = tmp;
 	    else
diff --git a/liboctave/fCRowVector.cc b/liboctave/fCRowVector.cc
--- a/liboctave/fCRowVector.cc
+++ b/liboctave/fCRowVector.cc
@@ -429,19 +429,17 @@ operator << (std::ostream& os, const Flo
   return os;
 }
 
 std::istream&
 operator >> (std::istream& is, FloatComplexRowVector& a)
 {
   octave_idx_type len = a.length();
 
-  if (len < 1)
-    is.clear (std::ios::badbit);
-  else
+  if (len > 0)
     {
       FloatComplex tmp;
       for (octave_idx_type i = 0; i < len; i++)
         {
           is >> tmp;
           if (is)
             a.elem (i) = tmp;
           else
diff --git a/liboctave/fColVector.cc b/liboctave/fColVector.cc
--- a/liboctave/fColVector.cc
+++ b/liboctave/fColVector.cc
@@ -316,19 +316,17 @@ operator << (std::ostream& os, const Flo
   return os;
 }
 
 std::istream&
 operator >> (std::istream& is, FloatColumnVector& a)
 {
   octave_idx_type len = a.length();
 
-  if (len < 1)
-    is.clear (std::ios::badbit);
-  else
+  if (len > 0)
     {
       float tmp;
       for (octave_idx_type i = 0; i < len; i++)
         {
           is >> tmp;
           if (is)
             a.elem (i) = tmp;
           else
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -3052,19 +3052,17 @@ operator << (std::ostream& os, const Flo
 }
 
 std::istream&
 operator >> (std::istream& is, FloatMatrix& a)
 {
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
-  if (nr < 1 || nc < 1)
-    is.clear (std::ios::badbit);
-  else
+  if (nr > 0 && nc > 0)
     {
       float tmp;
       for (octave_idx_type i = 0; i < nr; i++)
 	for (octave_idx_type j = 0; j < nc; j++)
 	  {
 	    tmp = octave_read_float (is);
 	    if (is)
 	      a.elem (i, j) = tmp;
diff --git a/liboctave/fNDArray.cc b/liboctave/fNDArray.cc
--- a/liboctave/fNDArray.cc
+++ b/liboctave/fNDArray.cc
@@ -915,19 +915,17 @@ operator << (std::ostream& os, const Flo
   return os;
 }
 
 std::istream&
 operator >> (std::istream& is, FloatNDArray& a)
 {
   octave_idx_type nel = a.nelem ();
 
-  if (nel < 1 )
-    is.clear (std::ios::badbit);
-  else
+  if (nel > 0)
     {
       float tmp;
       for (octave_idx_type i = 0; i < nel; i++)
 	  {
 	    tmp = octave_read_float (is);
 	    if (is)
 	      a.elem (i) = tmp;
 	    else
diff --git a/liboctave/fRowVector.cc b/liboctave/fRowVector.cc
--- a/liboctave/fRowVector.cc
+++ b/liboctave/fRowVector.cc
@@ -286,19 +286,17 @@ operator << (std::ostream& os, const Flo
   return os;
 }
 
 std::istream&
 operator >> (std::istream& is, FloatRowVector& a)
 {
   octave_idx_type len = a.length();
 
-  if (len < 1)
-    is.clear (std::ios::badbit);
-  else
+  if (len > 0)
     {
       float tmp;
       for (octave_idx_type i = 0; i < len; i++)
         {
           is >> tmp;
           if (is)
             a.elem (i) = tmp;
           else
diff --git a/liboctave/intNDArray.cc b/liboctave/intNDArray.cc
--- a/liboctave/intNDArray.cc
+++ b/liboctave/intNDArray.cc
@@ -141,19 +141,17 @@ operator << (std::ostream& os, const int
 }
 
 template <class T>
 std::istream&
 operator >> (std::istream& is, intNDArray<T>& a)
 {
   octave_idx_type nel = a.nelem ();
 
-  if (nel < 1 )
-    is.clear (std::ios::badbit);
-  else
+  if (nel > 0)
     {
       T tmp;
 
       for (octave_idx_type i = 0; i < nel; i++)
 	{
 	  is >> tmp;
 
 	  if (is)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-03-20  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-re-mat.cc (octave_matrix::load_ascii): Simplify.
+	* ov-flt-re-mat.cc (octave_float_matrix::load_ascii): Simplify.
+	* ov-cx-mat.cc (octave_complex_matrix::load_ascii): Simplify.
+	* ov-flt-cx-mat.cc (octave_float_complex_matrix::load_ascii): Simplify.
+
 2009-03-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-re-mat.cc (octave_matrix::isnan, octave_matrix::isinf,
 	octave_matrix::finite): Simplify.
 	* ov-flt-re-mat.cc (octave_float_matrix::isnan,
 	octave_float_matrix::isinf, octave_float_matrix::finite): Simplify.
 	* ov-cx-mat.cc (octave_complex_matrix::isnan,
 	octave_complex_matrix::isinf, octave_complex_matrix::finite):
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -348,30 +348,25 @@ octave_complex_matrix::load_ascii (std::
 
 	      for (int i = 0; i < mdims; i++)
 		is >> dv(i);
 
 	      if (is)
 		{
 		  ComplexNDArray tmp(dv);
 
-		  if (tmp.is_empty ())
-		    matrix = tmp;
-		  else
-		    {
-		      is >> tmp;
+                  is >> tmp;
 
-		      if (is)
-			matrix = tmp;
-		      else
-			{
-			  error ("load: failed to load matrix constant");
-			  success = false;
-			}
-		    }
+                  if (is)
+                    matrix = tmp;
+                  else
+                    {
+                      error ("load: failed to load matrix constant");
+                      success = false;
+                    }
 		}
 	      else
 		{
 		  error ("load: failed to read dimensions");
 		  success = false;
 		}
 	    }
 	  else
diff --git a/src/ov-flt-cx-mat.cc b/src/ov-flt-cx-mat.cc
--- a/src/ov-flt-cx-mat.cc
+++ b/src/ov-flt-cx-mat.cc
@@ -337,30 +337,25 @@ octave_float_complex_matrix::load_ascii 
 
 	      for (int i = 0; i < mdims; i++)
 		is >> dv(i);
 
 	      if (is)
 		{
 		  FloatComplexNDArray tmp(dv);
 
-		  if (tmp.is_empty ())
-		    matrix = tmp;
-		  else
-		    {
-		      is >> tmp;
+                  is >> tmp;
 
-		      if (is)
-			matrix = tmp;
-		      else
-			{
-			  error ("load: failed to load matrix constant");
-			  success = false;
-			}
-		    }
+                  if (is)
+                    matrix = tmp;
+                  else
+                    {
+                      error ("load: failed to load matrix constant");
+                      success = false;
+                    }
 		}
 	      else
 		{
 		  error ("load: failed to read dimensions");
 		  success = false;
 		}
 	    }
 	  else
diff --git a/src/ov-flt-re-mat.cc b/src/ov-flt-re-mat.cc
--- a/src/ov-flt-re-mat.cc
+++ b/src/ov-flt-re-mat.cc
@@ -367,30 +367,25 @@ octave_float_matrix::load_ascii (std::is
 
 	      for (int i = 0; i < mdims; i++)
 		is >> dv(i);
 
 	      if (is)
 		{
 		  FloatNDArray tmp(dv);
 
-		  if (tmp.is_empty ())
-		    matrix = tmp;
-		  else
-		    {
-		      is >> tmp;
+                  is >> tmp;
 
-		      if (is)
-			matrix = tmp;
-		      else
-			{
-			  error ("load: failed to load matrix constant");
-			  success = false;
-			}
-		    }
+                  if (is)
+                    matrix = tmp;
+                  else
+                    {
+                      error ("load: failed to load matrix constant");
+                      success = false;
+                    }
 		}
 	      else
 		{
 		  error ("load: failed to read dimensions");
 		  success = false;
 		}
 	    }
 	  else
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -375,30 +375,25 @@ octave_matrix::load_ascii (std::istream&
 
 	      for (int i = 0; i < mdims; i++)
 		is >> dv(i);
 
 	      if (is)
 		{
 		  NDArray tmp(dv);
 
-		  if (tmp.is_empty ())
-		    matrix = tmp;
-		  else
-		    {
-		      is >> tmp;
+                  is >> tmp;
 
-		      if (is)
-			matrix = tmp;
-		      else
-			{
-			  error ("load: failed to load matrix constant");
-			  success = false;
-			}
-		    }
+                  if (is)
+                    matrix = tmp;
+                  else
+                    {
+                      error ("load: failed to load matrix constant");
+                      success = false;
+                    }
 		}
 	      else
 		{
 		  error ("load: failed to read dimensions");
 		  success = false;
 		}
 	    }
 	  else
