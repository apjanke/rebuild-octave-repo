# HG changeset patch
# User jwe
# Date 1026323134 0
#      Wed Jul 10 17:45:34 2002 +0000
# Node ID e0b7a493e5a8cbcda7cc9c14314541b8a29e9b6a
# Parent  10bc4c350d61c4e6934bb0e34e42bc6e2d093bba
[project @ 2002-07-10 17:45:34 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,41 @@
+2002-07-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* control/system/sysmult.m: Use varargin instead of old style varargs.
+	* control/system/sysadd.m: Likewise.
+	* control/system/sysgroup.m: Likewise.
+	* control/system/syssub.m: Likewise.
+	* elfun/gcd.m: Likewise.
+	* elfun/lcm.m: Likewise.
+	* general/common_size.m: Likewise.
+	* io/printf.m: Likewise.
+	* miscellaneous/menu.m: Likewise.
+	* miscellaneous/path.m: Likewise.
+	* plot/__errplot__.m: Likewise.
+	* plot/__plt__.m: Likewise.
+	* plot/axis.m: Likewise.
+	* plot/errorbar.m: Likewise.
+	* plot/mplot.m: Likewise.
+	* plot/loglog.m: Likewise.
+	* plot/plot.m: Likewise.
+	* plot/plot_border.m: Likewise.
+	* plot/semilogx.m: Likewise.
+	* plot/semilogy.m: Likewise.
+	* plot/xlabel.m: Likewise.
+	* plot/ylabel.m: Likewise.
+	* plot/zlabel.m: Likewise.
+	* statistics/base/ppplot.m: Likewise.
+	* statistics/base/qqplot.m: Likewise.
+	* statistics/tests/bartlett_test.m: Likewise.
+	* statistics/tests/kolmogorov_smirnov_test.m: Likewise.
+	* statistics/tests/kruskal_wallis_test.m: Likewise.
+	* strings/str2mat.m: Likewise.
+	* strings/strcat.m: Likewise.
+
 2002-06-27  Paul Kienzle <pkienzle@jazz.ncnr.nist.gov>
 
 	* statistics/distributions/gamma_pdf.m: Avoid overflow in more cases.
 
 2002-05-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* skip-autoheader: New file, for autogen.sh.
 	* Makefile.in (DISTFILES): Add it to the list.
diff --git a/scripts/control/system/sysadd.m b/scripts/control/system/sysadd.m
--- a/scripts/control/system/sysadd.m
+++ b/scripts/control/system/sysadd.m
@@ -38,27 +38,26 @@
 ## @end group
 ## @end example
 ## @end deftypefn
 
 ## Author: John Ingram <ingraje@eng.auburn.edu>
 ## Created: July 1996
 ## Updated for variable number of arguments July 1999 A. S. Hodel
 
-function sys = sysadd (...)
+function sys = sysadd (varargin)
 
   if(nargin < 1)
     usage("sysadd: sys = sysysadd(Gsys{,Hsys, ...})");
   endif
 
   ## collect all arguments
   arglist = list();
-  va_start();
   for kk=1:nargin
-    arglist(kk) = va_arg();
+    arglist(kk) = varargin{kk};
     if(!is_struct(nth(arglist,kk)))
       error("sysadd: argument %d is not a data structure",kk);
     endif
   endfor
 
   ## check system dimensions
   [n,nz,mg,pg,Gyd] = sysdimensions(nth(arglist,1));
   for kk=2:nargin
diff --git a/scripts/control/system/sysgroup.m b/scripts/control/system/sysgroup.m
--- a/scripts/control/system/sysgroup.m
+++ b/scripts/control/system/sysgroup.m
@@ -45,30 +45,29 @@
 ## on to the end of the name.
 ## @end deftypefn
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1995
 ## modified by John Ingram July 1996
 ## A. S. Hodel: modified for variable number of arguments 1999
 
-function sys = sysgroup (...)
+function sys = sysgroup (varargin)
 
   save_emp = empty_list_elements_ok;
   empty_list_elements_ok = 1;
 
   if(nargin < 1)
     usage("sys = sysgroup(Asys{,Bsys,...})");
   endif
 
   ## collect all arguments
   arglist = list();
-  va_start();
   for kk=1:nargin
-    arglist(kk) = va_arg();
+    arglist(kk) = varargin{kk};
     if(!is_struct(nth(arglist,kk)))
       error("sysgroup: argument %d is not a data structure",kk);
     endif
   endfor
 
   if(nargin == 2)
     ## the usual case; group the two systems together
     Asys = nth(arglist,1);
diff --git a/scripts/control/system/sysmult.m b/scripts/control/system/sysmult.m
--- a/scripts/control/system/sysmult.m
+++ b/scripts/control/system/sysmult.m
@@ -31,27 +31,26 @@
 ## discrete output of Bsys to a continuous state or output in @var{asys}
 ## (system data structure does not recognize discrete inputs).
 ## @end deftypefn
 
 ## Author: John Ingram <ingraje@eng.auburn.edu>
 ## Created: July 1996
 ## updated for variable number of arguments by A. S. Hodel July 1999
 
-function sys = sysmult (...)
+function sys = sysmult (varargin)
 
   if(nargin < 1)
     usage("sysmult: sys = sysmult(Asys{,Bsys,...})");
   endif
 
   ## collect all arguments
   arglist = list();
-  va_start();
   for kk=1:nargin
-    arglist(kk) = va_arg();
+    arglist(kk) = varargin{kk};
     if(!is_struct(nth(arglist,kk)))
       error("sysadd: argument %d is not a data structure",kk);
     endif
   endfor
 
   ## check system dimensions
   [n,nz,mg,pg,Gyd] = sysdimensions(nth(arglist,1));
   for kk=2:nargin
diff --git a/scripts/control/system/syssub.m b/scripts/control/system/syssub.m
--- a/scripts/control/system/syssub.m
+++ b/scripts/control/system/syssub.m
@@ -37,27 +37,26 @@
 ## @end group
 ## @end example
 ## @end deftypefn
 
 ## Author: John Ingram <ingraje@eng.auburn.edu>
 ## Created: July 1996
 ## updated for variable numbers of input arguments by July 1999 A. S. Hodel
 
-function sys = syssub (...)
+function sys = syssub (varargin)
 
   if(nargin < 1)
     usage("syssub: sys = syssub(Gsys{,Hsys,...})");
   endif
 
   ## collect all arguments
   arglist = list();
-  va_start();
   for kk=1:nargin
-    arglist(kk) = va_arg();
+    arglist(kk) = varargin{kk};
     if(!is_struct(nth(arglist,kk)))
       error("syssub: argument %d is not a data structure",kk);
     endif
   endfor
 
   ## check system dimensions
   [n,nz,mg,pg,Gyd] = sysdimensions(nth(arglist,1));
   for kk=2:nargin
diff --git a/scripts/elfun/gcd.m b/scripts/elfun/gcd.m
--- a/scripts/elfun/gcd.m
+++ b/scripts/elfun/gcd.m
@@ -41,26 +41,26 @@
 ## @end example
 ## @end deftypefn
 ## @seealso{lcm, min, max, ceil, and floor}
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Created: 16 September 1994
 ## Adapted-By: jwe
 
-function [g, v] = gcd (a, ...)
+function [g, v] = gcd (a, varargin)
 
   if (nargin == 0)
     usage ("[g, v] = gcd (a, ...)");
   endif
 
   if (nargin > 1)
-    va_start;
-    for k = 2:nargin;
-      a = [a, (va_arg ())];
+    k = 1;
+    for i = 2:nargin
+      a = [a, varargin{k++}];
     endfor
   endif
 
   if (round (a) != a)
     error ("gcd: all arguments must be integer");
   endif
 
   g = abs (a(1));
diff --git a/scripts/elfun/lcm.m b/scripts/elfun/lcm.m
--- a/scripts/elfun/lcm.m
+++ b/scripts/elfun/lcm.m
@@ -34,26 +34,26 @@
 ## @end example
 ## @end deftypefn
 ## @seealso{gcd, min, max, ceil, and floor}
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Created: 16 September 1994
 ## Adapted-By: jwe
 
-function l = lcm (a, ...)
+function l = lcm (a, varargin)
 
   if (nargin == 0)
     usage ("lcm (a, ...)");
   endif
 
   if (nargin > 1)
-    va_start;
-    for k = 2:nargin;
-      a = [a, (va_arg ())];
+    k = 1;
+    for i = 2:nargin
+      a = [a, varargin{k++}];
     endfor
   endif
 
   if (round (a) != a)
     error ("lcm: all arguments must be integer");
   endif
 
   if (any (a) == 0)
diff --git a/scripts/general/common_size.m b/scripts/general/common_size.m
--- a/scripts/general/common_size.m
+++ b/scripts/general/common_size.m
@@ -38,39 +38,33 @@
 ## This is useful for implementing functions where arguments can either
 ## be scalars or of common size.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Created: 15 October 1994
 ## Adapted-By: jwe
 
-function [errorcode, ...] = common_size (...)
+function [errorcode, varargout] = common_size (varargin)
 
   if (nargin < 2)
     error ("common_size: only makes sense if nargin >= 2");
   endif
 
-  va_start ();
-  for k = 1 : nargin
-    s(k, :) = size (va_arg ());
+  for i = 1 : nargin
+    s(i,:) = size (varargin{i});
   endfor
 
   m = max (s);
   if (any (any ((s != 1)') & any ((s != ones (nargin, 1) * m)')))
     errorcode = 1;
-    va_start ();
-    for k = 1 : nargin
-      vr_val (va_arg ());
-    endfor
+    varargout = varargin;
   else
     errorcode = 0;
-    va_start ();
-    for k = 1 : nargin
-      if (prod (s(k, :)) == 1)
-        vr_val (va_arg () * ones (m));
-      else
-        vr_val (va_arg ());
+    for i = 1 : nargin
+      varargout{i} = varargin{i};
+      if (prod (s(i,:)) == 1)
+	varargout{i} *= ones (m);
       endif
     endfor
   endif
 
 endfunction
diff --git a/scripts/io/printf.m b/scripts/io/printf.m
--- a/scripts/io/printf.m
+++ b/scripts/io/printf.m
@@ -22,19 +22,19 @@
 ## The @code{printf} function prints the optional arguments under the
 ## control of the template string @var{template} to the stream
 ## @code{stdout}.
 ## @end deftypefn
 ## @seealso{fprintf and sprintf}
 
 ## Author: jwe
 
-function retval = printf (fmt, ...)
+function retval = printf (fmt, varargin)
 
   retval = -1;
 
   if (nargin > 0)
-    retval = fprintf (stdout, fmt, all_va_args);
+    retval = fprintf (stdout, fmt, varargin{:});
   else
     usage ("printf (fmt, ...)");
   endif
 
 endfunction
diff --git a/scripts/miscellaneous/menu.m b/scripts/miscellaneous/menu.m
--- a/scripts/miscellaneous/menu.m
+++ b/scripts/miscellaneous/menu.m
@@ -25,17 +25,17 @@
 ## programs.  There is no limit to the number of options that may be passed
 ## in, but it may be confusing to present more than will fit easily on one
 ## screen.
 ## @end deftypefn
 ## @seealso{disp, printf, and input}
 
 ## Author: jwe
 
-function num = menu (t, ...)
+function num = menu (t, varargin)
 
   if (nargin < 2)
     usage ("menu (title, opt1, ...)");
   endif
 
   ## Force pending output to appear before the menu.
 
   fflush (stdout);
@@ -52,20 +52,19 @@ function num = menu (t, ...)
     if (! isempty (t))
       disp (t);
       printf ("\n");
     endif
 
     nopt = nargin - 1;
 
     while (1)
-      va_start ();
       for i = 1:nopt
         printf ("  [%2d] ", i);
-        disp (va_arg ());
+        disp (varargin{i});
       endfor
       printf ("\n");
       s = input ("pick a number, any number: ", "s");
       eval (sprintf ("num = %s;", s), "num = [];");
       if (! is_scalar (num) || num < 1 || num > nopt)
         printf ("\nerror: input invalid or out of range\n\n");
       else
         break;
diff --git a/scripts/miscellaneous/path.m b/scripts/miscellaneous/path.m
--- a/scripts/miscellaneous/path.m
+++ b/scripts/miscellaneous/path.m
@@ -31,26 +31,26 @@
 ## separating them with @code{":"}.  Set @code{LOADPATH} to the result
 ## and also return it.
 ##
 ## No checks are made for duplicate elements.
 ## @end deftypefn
 
 ## Author: jwe
 
-function p = path (...)
+function p = path (varargin)
 
   if (nargin == 0)
     if (nargout == 0)
       stdout << "\nLOADPATH contains the following directories:\n\n  ";
       stdout << strrep (LOADPATH, ":", "\n  ") << "\n\n";
     else
       p = LOADPATH;
     endif
   else
-    p = va_arg ();
+    p = varargin{1};
     for i = 2:nargin
-      p = sprintf ("%s:%s", p, va_arg ());
+      p = sprintf ("%s:%s", p, varargin{i});
     endfor
     LOADPATH = p;
   endif
 
 endfunction
diff --git a/scripts/plot/__errplot__.m b/scripts/plot/__errplot__.m
--- a/scripts/plot/__errplot__.m
+++ b/scripts/plot/__errplot__.m
@@ -28,28 +28,28 @@
 ## @end deftypefn
 ## @seealso{semilogx, semilogy, loglog, polar, mesh, contour, __pltopt__
 ## bar, stairs, errorbar, gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Created: 18.7.2000
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
-function __errplot__ (...)
+function __errplot__ (varargin)
 
   if (nargin < 3) # atleast two data arguments needed
     usage ("__errplot__ (arg1, ..., fmt)");
   endif
 
   fstr = " ";
-
   ndata = 0;
+  k = 1;
 
   while (nargin--)
-    a = va_arg ();
+    a = varargin{k++};
     if (! isstr (a))
       ndata++;
       eval (sprintf ("arg%d = a;", ndata));
     else
       fstr = a;
     endif
   endwhile
 
diff --git a/scripts/plot/__plt__.m b/scripts/plot/__plt__.m
--- a/scripts/plot/__plt__.m
+++ b/scripts/plot/__plt__.m
@@ -18,40 +18,41 @@
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __plt__ (@code{caller}, @dots{})
 ## @end deftypefn
 
 ## Author: jwe
 
-function __plt__ (caller, ...)
+function __plt__ (caller, varargin)
 
   if (nargin == 2)
 
-    __plt1__ (va_arg (), "");
+    __plt1__ (varargin{1}, "");
 
   elseif (nargin > 2)
 
     first_plot = 1;
     hold_state = ishold ();
 
     unwind_protect
 
-      x = va_arg ();
+      k = 1;
+      x = varargin{k++};
       nargin = nargin - 2;
       x_set = 1;
       y_set = 0;
 
       ## Gather arguments, decode format, and plot lines.
 
       while (nargin-- > 0)
 
         fmt = "";
-        new = va_arg ();
+        new = varargin{k++};
 
         if (isstr (new))
           if (! x_set)
             error ("plot: no data to plot");
           endif
           fmt = __pltopt__ (caller, new);
           if (! y_set)
             __plt1__ (x, fmt);
diff --git a/scripts/plot/axis.m b/scripts/plot/axis.m
--- a/scripts/plot/axis.m
+++ b/scripts/plot/axis.m
@@ -109,17 +109,17 @@
 ## Reverse y-axis, so lower values are nearer the top.
 ## @item "xy" 
 ## Restore y-axis, so higher values are nearer the top. 
 ## @end table
 ## @end deftypefn
 
 ## Author: jwe
 
-function curr_axis = axis (ax, ...)
+function curr_axis = axis (ax, varargin)
 
   ## This may not be correct if someone has used the gnuplot interface
   ## directly...
 
   global __current_axis__ = [-10, 10, -10, 10];
 
   ## To return curr_axis properly, octave needs to take control of scaling.
   ## It isn't hard to compute good axis limits:
@@ -254,17 +254,17 @@ function curr_axis = axis (ax, ...)
       eval (sprintf ("gset zrange [%g:%g];", ax (5), ax (6)));
     endif
 
   else
     error ("axis: expecting no args, or a vector with 2, 4, or 6 elements");
   endif
 
   if (nargin > 1)
-    axis(all_va_args);
+    axis (varargin{:});
   endif
 endfunction
 
 %!demo
 %! t=0:0.01:2*pi; x=sin(t);
 %!
 %! subplot(221);    title("normal plot");
 %! plot(t, x, ";;");
diff --git a/scripts/plot/errorbar.m b/scripts/plot/errorbar.m
--- a/scripts/plot/errorbar.m
+++ b/scripts/plot/errorbar.m
@@ -105,45 +105,46 @@
 ## @end deftypefn
 ## @seealso{semilogx, semilogy, loglog, polar, mesh, contour, __pltopt__,
 ## bar, stairs, gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Created: 18.7.2000
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
-function errorbar (...)
+function errorbar (varargin)
 
   if (nargin < 2)
     usage ("errorbar (...)");
   endif
 
   save_hold = ishold;
   unwind_protect
     if (! ishold)
       clg ()
     endif
     hold ("on");
+    k = 1;
     while (nargin)
-      a = va_arg ();
+      a = varargin{k++};
       nargin--;
       if (is_vector (a))
 	a = a(:);
       elseif (is_matrix (a));
 	;
       else
 	usage ("errorbar (...)");
       endif
       sz = size (a);
       ndata = 1;
       arg1 = a;
       fmt = " ";
       while (nargin)
 	nargin--;
-	a = va_arg ();
+	a = varargin{k++};
 	if (isstr (a))
 	  fmt = a;
 	  cmd = "__errplot__ (arg1";
 	  for i = 2:ndata,
 	    cmd = [cmd, sprintf(", arg%d",i)];
 	  endfor
 	  cmd = [cmd, ", fmt);"];
 	  eval (cmd);
diff --git a/scripts/plot/loglog.m b/scripts/plot/loglog.m
--- a/scripts/plot/loglog.m
+++ b/scripts/plot/loglog.m
@@ -23,21 +23,21 @@
 ## description of @code{plot} for a description of the arguments that
 ## @code{loglog} will accept.
 ## @end deftypefn
 ## @seealso{plot, semilogy, loglog, polar, mesh, contour, bar, stairs,
 ## gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Author: jwe
 
-function loglog (...)
+function loglog (varargin)
 
   ## XXX FIXME XXX -- these plot states should really just be set
   ## temporarily, probably inside an unwind_protect block, but there is
   ## no way to determine their current values.
 
   gset logscale x;
   gset logscale y;
   gset nopolar;
 
-  __plt__ ("loglog", all_va_args);
+  __plt__ ("loglog", varargin{:});
 
 endfunction
diff --git a/scripts/plot/mplot.m b/scripts/plot/mplot.m
--- a/scripts/plot/mplot.m
+++ b/scripts/plot/mplot.m
@@ -27,17 +27,17 @@
 ## after each set of arguments are processed.
 ##
 ## See the description of the @var{plot} function for the various options.
 ## @end deftypefn
 
 ## Author: Vinayak Dutt <Dutt.Vinayak@mayo.EDU>
 ## Adapted-By: jwe
 
-function mplot (...)
+function mplot (varargin)
 
   if (! gnuplot_has_multiplot)
     error ("mplot: gnuplot does not appear to support this feature");
   endif
 
   ## global variables to keep track of multiplot options
 
   global __multiplot_mode__ = 0;
@@ -46,17 +46,17 @@ function mplot (...)
   global __multiplot_xn__;
   global __multiplot_yn__;
   global __multiplot_xi__;
   global __multiplot_yi__;
 
   gset nologscale;
   gset nopolar;
 
-  __plt__ ("plot", all_va_args);
+  __plt__ ("plot", varargin{:});
 
   ## update the plot position
 
   if (__multiplot_mode__)
 
     if (__multiplot_xi__ < __multiplot_xn__)
       __multiplot_xi__++;
     else
diff --git a/scripts/plot/plot.m b/scripts/plot/plot.m
--- a/scripts/plot/plot.m
+++ b/scripts/plot/plot.m
@@ -178,20 +178,20 @@
 ## This will plot the cosine and sine functions and label them accordingly
 ## in the key.
 ## @end deftypefn
 ## @seealso{semilogx, semilogy, loglog, polar, mesh, contour, __pltopt__
 ## bar, stairs, errorbar, gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Author: jwe
 
-function plot (...)
+function plot (varargin)
 
   ## XXX FIXME XXX -- these plot states should really just be set
   ## temporarily, probably inside an unwind_protect block, but there is
   ## no way to determine their current values.
 
   gset nologscale;
   gset nopolar;
 
-  __plt__ ("plot", all_va_args);
+  __plt__ ("plot", varargin{:});
 
 endfunction
diff --git a/scripts/plot/plot_border.m b/scripts/plot/plot_border.m
--- a/scripts/plot/plot_border.m
+++ b/scripts/plot/plot_border.m
@@ -46,34 +46,34 @@
 ## The arguments may be abbreviated to single characters.  Without any
 ## arguments, @code{plot_border} turns borders off.
 ## @end deftypefn
 
 ## Author: Vinayak Dutt <Dutt.Vinayak@mayo.EDU>
 ## Created: 3 July 95
 ## Adapted-By: jwe
 
-function plot_border (...)
+function plot_border (varargin)
 
   if (! gnuplot_has_multiplot)
     error ("plot_border: gnuplot does not appear to support this feature");
   endif
 
   south = 0;
   west = 0;
   north = 0;
   east = 0;
   all = 0;
   none = 1;
 
-  va_start ();
+  k = 1;
 
   while (nargin--)
 
-    arg = va_arg ();
+    arg = varargin{k++};
 
     if (! isstr (arg))
       error ("plot_border: input not a string");
     endif
 
     ## The effect of the arguments in cumulative.  If something is found
     ## after "b", do that and ignore "b".
 
diff --git a/scripts/plot/semilogx.m b/scripts/plot/semilogx.m
--- a/scripts/plot/semilogx.m
+++ b/scripts/plot/semilogx.m
@@ -23,21 +23,21 @@
 ## the description of @code{plot} for a description of the arguments
 ## that @code{semilogx} will accept.
 ## @end deftypefn
 ## @seealso{plot, semilogy, loglog, polar, mesh, contour, bar, stairs,
 ## gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Author: jwe
 
-function semilogx (...)
+function semilogx (varargin)
 
   ## XXX FIXME XXX -- these plot states should really just be set
   ## temporarily, probably inside an unwind_protect block, but there is
   ## no way to determine their current values.
 
   gset logscale x;
   gset nologscale y;
   gset nopolar;
 
-  __plt__ ("semilogx", all_va_args);
+  __plt__ ("semilogx", varargin{:});
 
 endfunction
diff --git a/scripts/plot/semilogy.m b/scripts/plot/semilogy.m
--- a/scripts/plot/semilogy.m
+++ b/scripts/plot/semilogy.m
@@ -23,21 +23,21 @@
 ## the description of @code{plot} for a description of the arguments
 ## that @code{semilogy} will accept.
 ## @end deftypefn
 ## @seealso{plot, semilogx, loglog, polar, mesh, contour, bar, stairs,
 ## gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Author: jwe
 
-function semilogy (...)
+function semilogy (varargin)
 
   ## XXX FIXME XXX -- these plot states should really just be set
   ## temporarily, probably inside an unwind_protect block, but there is
   ## no way to determine their current values.
 
   gset nologscale x;
   gset logscale y;
   gset nopolar;
 
-  __plt__ ("semilogy", all_va_args);
+  __plt__ ("semilogy", varargin{:});
 
 endfunction
diff --git a/scripts/plot/xlabel.m b/scripts/plot/xlabel.m
--- a/scripts/plot/xlabel.m
+++ b/scripts/plot/xlabel.m
@@ -25,13 +25,13 @@
 ## displayed, use the command @code{replot} to redisplay it with the new
 ## labels.
 ## @end deftypefn
 ## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ## bar, stairs, gplot, gsplot, replot, ylabel, and title}
 
 ## Author: jwe
 
-function xlabel (...)
+function xlabel (varargin)
 
-  __axis_label__ ("xlabel", all_va_args);
+  __axis_label__ ("xlabel", varargin{:});
 
 endfunction
diff --git a/scripts/plot/ylabel.m b/scripts/plot/ylabel.m
--- a/scripts/plot/ylabel.m
+++ b/scripts/plot/ylabel.m
@@ -19,13 +19,13 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} ylabel (@var{string})
 ## See xlabel.
 ## @end deftypefn
 
 ## Author: jwe
 
-function ylabel (...)
+function ylabel (varargin)
 
-  __axis_label__ ("ylabel", all_va_args);
+  __axis_label__ ("ylabel", varargin{:});
 
 endfunction
diff --git a/scripts/plot/zlabel.m b/scripts/plot/zlabel.m
--- a/scripts/plot/zlabel.m
+++ b/scripts/plot/zlabel.m
@@ -21,13 +21,13 @@
 ## @deftypefn {Function File} {} zlabel (@var{string})
 ## See xlabel.
 ## @end deftypefn
 
 ## Author: Vinayak Dutt <Dutt.Vinayak@mayo.EDU>
 ## Created: 3 July 95
 ## Adapted-By: jwe
 
-function zlabel (...)
+function zlabel (varargin)
 
-  __axis_label__ ("zlabel", all_va_args);
+  __axis_label__ ("zlabel", varargin{:});
 
 endfunction
diff --git a/scripts/statistics/base/ppplot.m b/scripts/statistics/base/ppplot.m
--- a/scripts/statistics/base/ppplot.m
+++ b/scripts/statistics/base/ppplot.m
@@ -38,17 +38,17 @@
 ## @end example
 ##
 ## If no output arguments are given, the data are plotted directly.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description: Perform a PP-plot (probability plot)
 
-function [p, y] = ppplot (x, dist, ...)
+function [p, y] = ppplot (x, dist, varargin)
 
   if (nargin < 1)
     usage ("ppplot (x, dist, params)");
   endif
 
   if (! is_vector (x))
     error ("ppplot: x must be a vector");
   endif
@@ -59,17 +59,17 @@ function [p, y] = ppplot (x, dist, ...)
   if (nargin == 1)
     F = "stdnormal_cdf";
   else
     F = sprintf ("%s_cdf", dist);
   endif;
   if (nargin <= 2)
     y = feval (F, s);
   else
-    y = feval (F, s, all_va_args);
+    y = feval (F, s, varargin{:});
   endif
 
   if (nargout == 0)
     axis ([0, 1, 0, 1]);
     gset nokey;
     plot (p, y);
   endif
 
diff --git a/scripts/statistics/base/qqplot.m b/scripts/statistics/base/qqplot.m
--- a/scripts/statistics/base/qqplot.m
+++ b/scripts/statistics/base/qqplot.m
@@ -40,17 +40,17 @@
 ## @end example
 ##
 ## If no output arguments are given, the data are plotted directly.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description: Perform a QQ-plot (quantile plot)
 
-function [q, s] = qqplot (x, dist, ...)
+function [q, s] = qqplot (x, dist, varargin)
 
   if (nargin < 1)
     usage ("qqplot (x, dist, params)");
   endif
 
   if (! (is_vector(x)))
     error ("qqplot: x must be a vector");
   endif
@@ -62,19 +62,19 @@ function [q, s] = qqplot (x, dist, ...)
     f = "stdnormal_inv";
   else
     f = sprintf ("%s_inv", dist);
   endif;
   if (nargin <= 2)
     q = feval (f, t);
     q_label = f;
   else
-    param_string = sprintf ("%g", va_arg ());
+    param_string = sprintf ("%g", varargin{1});
     for k = 2 : (nargin - 2);
-      param_string = sprintf ("%s, %g", param_string, va_arg ())
+      param_string = sprintf ("%s, %g", param_string, varargin{k})
     endfor
     q = eval (sprintf ("%s (t, %s);", f, param_string));
     q_label = sprintf ("%s with parameter(s) %s", f, param_string);
   endif
 
   if (nargout == 0)
     xlabel (q_label);
     ylabel ("sample points");
diff --git a/scripts/statistics/tests/bartlett_test.m b/scripts/statistics/tests/bartlett_test.m
--- a/scripts/statistics/tests/bartlett_test.m
+++ b/scripts/statistics/tests/bartlett_test.m
@@ -30,28 +30,28 @@
 ## returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value is displayed.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description: Bartlett test for homogeneity of variances
 
-function [pval, chisq, df] = bartlett_test (...)
+function [pval, chisq, df] = bartlett_test (varargin)
 
   k = nargin;
   if (k < 2)
     usage ("[pval, chisq, df] = bartlett_test (x1, ...)");
   endif
 
   f = zeros (k, 1);
   v = zeros (k, 1);
-  va_start ();
+
   for i = 1 : k;
-    x = va_arg ();
+    x = varargin{i};
     if (! is_vector (x))
       error ("bartlett_test: all arguments must be vectors");
     endif
     f(i) = length (x) - 1;
     v(i) = var (x);
   endfor
 
   f_tot = sum (f);
diff --git a/scripts/statistics/tests/kolmogorov_smirnov_test.m b/scripts/statistics/tests/kolmogorov_smirnov_test.m
--- a/scripts/statistics/tests/kolmogorov_smirnov_test.m
+++ b/scripts/statistics/tests/kolmogorov_smirnov_test.m
@@ -45,17 +45,17 @@
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value is displayed.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description: One-sample Kolmogorov-Smirnov test
 
-function [pval, ks] = kolmogorov_smirnov_test (x, dist, ...)
+function [pval, ks] = kolmogorov_smirnov_test (x, dist, varargin)
 
   if (nargin < 2)
     usage ("[pval, ks] = kolmogorov_smirnov_test (x, dist,, params, alt)");
   endif
 
   if (! is_vector (x))
     error ("kolmogorov_smirnov_test: x must be a vector");
   endif
@@ -66,17 +66,17 @@ function [pval, ks] = kolmogorov_smirnov
 
   alt  = "!=";
 
   if (nargin == 2)
     z = reshape (feval (f, s), 1, n);
   else
     args = "";
     for k = 1 : (nargin-2);
-      tmp  = va_arg ();
+      tmp  = varargin{k};
       if isstr (tmp)
         alt = tmp;
       else
         args = sprintf ("%s, %g", args, tmp);
       endif
     endfor
     z = reshape (eval (sprintf ("%s(s%s);", f, args)), 1, n);
   endif
diff --git a/scripts/statistics/tests/kruskal_wallis_test.m b/scripts/statistics/tests/kruskal_wallis_test.m
--- a/scripts/statistics/tests/kruskal_wallis_test.m
+++ b/scripts/statistics/tests/kruskal_wallis_test.m
@@ -33,28 +33,28 @@
 ## returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value is displayed.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description: Kruskal-Wallis test
 
-function [pval, k, df] = kruskal_wallis_test (...)
+function [pval, k, df] = kruskal_wallis_test (varargin)
 
   m = nargin;
   if (m < 2)
     usage ("[pval, k, df] = kruskal_wallis_test (x1, ...)");
   endif
 
   n = [];
   p = [];
-  va_start;
+
   for i = 1 : m;
-    x = va_arg ();
+    x = varargin{i};
     if (! is_vector (x))
       error ("kruskal_wallis_test: all arguments must be vectors");
     endif
     l = length (x);
     n = [n, l];
     p = [p, (reshape (x, 1, l))];
   endfor
 
diff --git a/scripts/strings/str2mat.m b/scripts/strings/str2mat.m
--- a/scripts/strings/str2mat.m
+++ b/scripts/strings/str2mat.m
@@ -27,31 +27,29 @@
 ## This function is modelled after @sc{Matlab}.  In Octave, you can create
 ## a matrix of strings by @code{[@var{s_1}; @dots{}; @var{s_n}]} even if
 ## the strings are not all the same length.
 ## @end deftypefn
 
 ## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
 ## Adapted-By: jwe
 
-function retval = str2mat (...)
+function retval = str2mat (varargin)
 
   if (nargin == 0)
     usage ("str2mat (s1, ...)");
   endif
 
   nc = 0;
   nr = 0;
 
-  va_start ();
-
   nr = zeros (nargin, 1);
   nc = zeros (nargin, 1);
   for k = 1 : nargin
-    s = va_arg ();
+    s = varargin{k};
     if (! isstr (s))
       s = setstr (s);
     endif
     [nr(k), nc(k)] = size (s);
   endfor
 
   tmp = find (nr == 0);
 
@@ -59,21 +57,19 @@ function retval = str2mat (...)
     nr(tmp) = 1;
   endif
 
   retval_nr = sum (nr);
   retval_nc = max (nc);
 
   retval = setstr (ones (retval_nr, retval_nc) * toascii (" "));
 
-  va_start ();
-
   row_offset = 0;
   for k = 1 : nargin
-    s = va_arg ();
+    s = varargin{k};
     if (! isstr (s))
       s = setstr (s);
     endif
     if (nc(k) > 0)
       retval ((row_offset + 1) : (row_offset + nr(k)), 1:nc(k)) = s;
     endif
     row_offset = row_offset + nr(k);
   endfor
diff --git a/scripts/strings/strcat.m b/scripts/strings/strcat.m
--- a/scripts/strings/strcat.m
+++ b/scripts/strings/strcat.m
@@ -28,30 +28,31 @@
 ##      @result{} "ab ab ab "
 ##         "cdecdecde"
 ## @end group
 ## @end example
 ## @end deftypefn
 
 ## Author: jwe
 
-function st = strcat (s, t, ...)
+function st = strcat (s, t, varargin)
 
   if (nargin > 1)
     save_empty_list_elements_ok = empty_list_elements_ok;
     unwind_protect
       empty_list_elements_ok = 1;
       if (isstr (s) && isstr (t))
         tmpst = [s, t];
       else
         error ("strcat: all arguments must be strings");
       endif
       n = nargin - 2;
+      k = 1;
       while (n--)
-        tmp = va_arg ();
+        tmp = varargin{k++};
         if (isstr (tmp))
           tmpst = [tmpst, tmp];
         else
           error ("strcat: all arguments must be strings");
         endif
       endwhile
     unwind_protect_cleanup
       empty_list_elements_ok = save_empty_list_elements_ok;
