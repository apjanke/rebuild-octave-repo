# HG changeset patch
# User jwe
# Date 1097583002 0
#      Tue Oct 12 12:10:02 2004 +0000
# Node ID f09fd9e154e86003cb2a96394feedc3eab18ade4
# Parent  50140aa23b32f1e4a338f785725cdf746ed8fe09
[project @ 2004-10-12 12:08:54 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2004-10-12  David Bateman  <dbateman@free.fr>
+
+	* pt-mat.cc (tm_row_const::tm_row_const_rep::do_init_element,
+	tm_const::init): Dimensionality of matrices not necessarily the
+	same.  Check before comparing.
+
 2004-10-06  John W. Eaton  <jwe@octave.org>
 
 	* pt-fcn-handle.h (tree_fcn_handle::name): New function.
 
 2004-10-01  John W. Eaton  <jwe@octave.org>
 
 	* ov-range.h (octave_range::valid_as_scalar_index): Ensure int value.
 	(octave_range::valid_as_zero_index): Likewise.
@@ -130,17 +136,17 @@ 2004-09-21  David Bateman  <dbateman@fre
 2004-09-21  John W. Eaton  <jwe@octave.org>
 
 	* symtab.h (symbol_record::~symbol_record): Delete definition if
 	count goes to zero.
 	* symtab.cc (symbol_table::~symbol_table): Move here from symtab.h.
 	Call delete on each symbol record in the table instead of just
 	clearing them.
 
-2004-09-17 David Bateman <dbateman@free.fr>
+2004-09-17 David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/sort.cc (ascending_compare, descending_compare):
 	Now templates (avoids g++ 3.4.x compile problems).
 	Fix other uses of these functions to also treat them as templates.
 	(mx_sort): For unsigned EIGHT_BYTE_INT versions correct the test 
 	for the position of NaN.  Problems when mode was DESCENDING or
 	UNDEFINED.  Use static_cast<unsigned int> (dim) rather than 
 	(unsigned int) dim.
@@ -1307,17 +1313,17 @@ 2004-03-03  John W. Eaton  <jwe@bevo.che
 	Likewise.
 	* ov-re-mat.cc (octave_matrix::load_hdf5, octave_matrix::save_hdf5):
 	Likewise.
 	* ov-scalar.cc (octave_scalar::load_hdf5, octave_scalar::save_hdf5):
 	Likewise.
 	* ov-str-mat.cc (octave_char_matrix_str::load_hdf5,
 	octave_char_matrix_str::save_hdf5): Likewise.
 
-2004-03-03 David Bateman <dbateman@free.fr>
+2004-03-03 David Bateman  <dbateman@free.fr>
 
 	* ov-cell.cc (octave_cell::save_hdf5, octave_cell::load_hdf5):
 	Make N-d aware.
 
 2004-03-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* parse.y: Delete spaces surrounding = in %name-prefix directive.
 
@@ -1497,17 +1503,17 @@ 2004-02-16  John W. Eaton  <jwe@bevo.che
 	(fftw_wisdom_program): Rename from wisdom_program.
 	For simplicity, always define FFTW_WISDOM_PROGRAM even when not
 	using fftw3.
 	(set_default_wisdom_prog): Look for OCTAVE_FFTW_WISDOM_PROGRAM in
 	the environment instead of OCTAVE_WISDOM_PROGRAM.
 	(set_default_fftw_wisdom_prog): Rename from set_default_wisdom_prog.
 	* defaults.h.in (Vfftw_wisdom_prog): Provide extern decl.
 
-2004-02-16 David Bateman <dbateman@free.fr>
+2004-02-16 David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/fft.cc: Adapt for Nd arrays, combine with ifft.cc.
 	* DLD-FUNCTIONS/ifft.cc: Delete.
 	* DLD-FUNCTIONS/fft2.cc: Adapt for Nd arrays, combine with ifft.cc.
 	* DLD-FUNCTIONS/ifft2.cc: Delete.
 	* DLD-FUNCTIONS/fftn.cc: New function for Nd FFT and inverse FFT.
 	* DLD-FUNCTIONS/fft_wisdom.cc: New function to manipulate FFTW 
 	wisdom.
@@ -2913,17 +2919,17 @@ 2003-09-09  Petter Risholm  <risholm@stu
 	(octave_double_nd_array::double_nd_array_value): New function.
 	(octave_double_nd_array::double_nd_array_value): New function.
 
 	* OPERATORS/op-m-nd.cc, OPERATORS/op-nd-m.cc,
 	OPERATORS/op-nd-nd.cc, OPERATORS/op-nd-s.cc, OPERATORS/op-s-nd.cc:
 	New files.
 	* Makefile.in (OP_XSRC): Add them to the list.
 
-2003-09-09  David Bateman <dbateman@free.fr>
+2003-09-09  David Bateman  <dbateman@free.fr>
 
 	* OPERATORS/op-cs-s.cc (DEFBINOP): First arg is complex, second is
 	double.
 
 2003-09-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-cell.cc (tree_cell::rvalue): Don't assume that the number of
 	elements in a tree_argument_list is the same as the number of
@@ -3614,17 +3620,17 @@ 2003-02-18  John W. Eaton  <jwe@bevo.che
 	Add sqrtm.cc to the list.
 
 	* DLD-FUNCTIONS/log.cc: Delete.
 
 2003-02-18  Paul Kienzle <pkienzle@users.sf.net>
 
 	* DLD-FUNCTIONS/sqrtm.cc: New file.
 
-2003-02-18  David Bateman <dbateman@free.fr>
+2003-02-18  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/lu.cc (Flu): Allow non-square matrices.
 
 2003-02-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* load-save.cc (read_binary_file_header, do_load, do_save,
 	write_header): No longer static.
 	(load_save_format): Move enum decl to load-save.h.
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -193,30 +193,49 @@ tm_row_const::tm_row_const_rep::do_init_
 	    dv.elem (i) = this_elt_dv.elem (i);
 
 	  dv.elem (0) = this_elt_nr;
 
 	  dv.elem (1) = 0;
 	}
       else
 	{
+	  int len = (this_elt_dv.length () < dv.length ()
+		     ? this_elt_dv.length () : dv.length ());
+
 	  if (this_elt_nr != dv (0))
 	    {
 	      eval_error ("number of rows must match",
 			  elt->line (), elt->column (), this_elt_nr, dv (0));
 	      return false;
 	    }
-	  for (int i = 2; i < this_elt_dv.length (); i++)
+	  for (int i = 2; i < len; i++)
 	    {
 	      if (this_elt_dv (i) != dv (i))
 		{
 		  eval_error ("dimensions mismatch", elt->line (), elt->column (), this_elt_dv (i), dv (i));
 		  return false;
 		}
 	    }
+
+	  if (this_elt_dv.length () > len)
+	    for (int i = len; i < this_elt_dv.length (); i++)
+	      if (this_elt_dv (i) != 1)
+		{
+		  eval_error ("dimensions mismatch", elt->line (), elt->column (), this_elt_dv (i), 1);
+		  return false;
+		}
+
+	  if (dv.length () > len)
+	    for (int i = len; i < dv.length (); i++)
+	      if (dv (i) != 1)
+		{
+		  eval_error ("dimensions mismatch", elt->line (), elt->column (), 1, dv (i));
+		  return false;
+		}
 	}
       dv.elem (1) = dv.elem (1) + this_elt_nc;
 
     }
   else if (Vwarn_empty_list_elements)
     eval_warning ("empty matrix found in matrix list",
 		  elt->line (), elt->column ());
 
@@ -418,34 +437,54 @@ tm_const::init (const tree_matrix& tm)
 	      else if (all_str)
 		{
 		  if (this_elt_nc > cols ())
 		    dv.elem (1) = this_elt_nc;
 		}
 	      else
 		{
 		  bool get_out = false;
+		  int len = (this_elt_dv.length () < dv.length ()
+			     ? this_elt_dv.length () : dv.length ());
 
-		  for (int i = 1; i < this_elt_dv.length (); i++)
+		  for (int i = 1; i < len; i++)
 		    {
 		      if (i == 1 && this_elt_nc != dv (1))
 			{
 			  ::error ("number of columns must match (%d != %d)",
 				   this_elt_nc, dv (1));
 			  get_out = true;
 			  break;
 			}
 		      else if (this_elt_dv (i) != dv (i))
 			{
 			  ::error ("dimensions mismatch (dim = %i, %d != %d)", i+1, this_elt_dv (i), dv (i));
 			  get_out = true;
 			  break;
 			}
 		    }
 
+		  if (this_elt_dv.length () > len)
+		    for (int i = len; i < this_elt_dv.length (); i++)
+		      if (this_elt_dv (i) != 1)
+			{
+			  ::error ("dimensions mismatch (dim = %i, %d != %d)", i+1, this_elt_dv (i), 1);
+			  get_out = true;
+			  break;
+			}
+
+		  if (dv.length () > len)
+		    for (int i = len; i < dv.length (); i++)
+		      if (dv (i) != 1)
+			{
+			  ::error ("dimensions mismatch (dim = %i, %d != %d)", i+1, 1, dv(i));
+			  get_out = true;
+			  break;
+			}
+
 		  if (get_out)
 		    break;
 		}
 	      dv.elem (0) = dv.elem (0) + this_elt_nr;
 	    }
 	  else if (Vwarn_empty_list_elements)
 	    warning ("empty matrix found in matrix list");
 	}
