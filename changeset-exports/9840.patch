# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1258642113 -3600
#      Thu Nov 19 15:48:33 2009 +0100
# Node ID c0b54271904bd83e708d526a9ceb41e19700185b
# Parent  3e8b4c80ae6323d91b81b12892a93c1ed1665263
improve safe numel() calculation for arrays

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -97,17 +97,17 @@ Array<T>::clear (void)
 
 template <class T>
 void
 Array<T>::clear (const dim_vector& dv)
 {
   if (--rep->count <= 0)
     delete rep;
 
-  rep = new ArrayRep (get_size (dv));
+  rep = new ArrayRep (dv.safe_numel ());
   slice_data = rep->data;
   slice_len = rep->len;
 
   dimensions = dv;
 }
 
 template <class T>
 Array<T>
@@ -157,145 +157,16 @@ Array<T>::squeeze (void) const
 	}
 
       retval = Array<T> (*this, new_dimensions);
     }
 
   return retval;
 }
 
-// KLUGE
-
-// The following get_size functions will throw a std::bad_alloc ()
-// exception if the requested size is larger than can be indexed by
-// octave_idx_type.  This may be smaller than the actual amount of
-// memory that can be safely allocated on a system.  However, if we
-// don't fail here, we can end up with a mysterious crash inside a
-// function that is iterating over an array using octave_idx_type
-// indices.
-
-// A guess (should be quite conservative).
-#define MALLOC_OVERHEAD 1024
-
-template <class T>
-octave_idx_type
-Array<T>::get_size (octave_idx_type r, octave_idx_type c)
-{
-  static int nl;
-  static double dl
-    = frexp (static_cast<double> 
-	(std::numeric_limits<octave_idx_type>::max() - MALLOC_OVERHEAD) / sizeof (T), &nl);
-
-  int nr, nc;
-  double dr = frexp (static_cast<double> (r), &nr);   // r = dr * 2^nr
-  double dc = frexp (static_cast<double> (c), &nc);   // c = dc * 2^nc
-
-  int nt = nr + nc;
-  double dt = dr * dc;
-
-  if (dt < 0.5)
-    {
-      nt--;
-      dt *= 2;
-    }
-
-  if (nt < nl || (nt == nl && dt < dl))
-    return r * c;
-  else
-    {
-      throw std::bad_alloc ();
-      return 0;
-    }
-}
-
-template <class T>
-octave_idx_type
-Array<T>::get_size (octave_idx_type r, octave_idx_type c, octave_idx_type p)
-{
-  static int nl;
-  static double dl
-    = frexp (static_cast<double>
-	(std::numeric_limits<octave_idx_type>::max() - MALLOC_OVERHEAD) / sizeof (T), &nl);
-
-  int nr, nc, np;
-  double dr = frexp (static_cast<double> (r), &nr);
-  double dc = frexp (static_cast<double> (c), &nc);
-  double dp = frexp (static_cast<double> (p), &np);
-
-  int nt = nr + nc + np;
-  double dt = dr * dc * dp;
-
-  if (dt < 0.5)
-    {
-      nt--;
-      dt *= 2;
-
-      if (dt < 0.5)
-	{
-	  nt--;
-	  dt *= 2;
-	}
-    }
-
-  if (nt < nl || (nt == nl && dt < dl))
-    return r * c * p;
-  else
-    {
-      throw std::bad_alloc ();
-      return 0;
-    }
-}
-
-template <class T>
-octave_idx_type
-Array<T>::get_size (const dim_vector& ra_idx)
-{
-  static int nl;
-  static double dl
-    = frexp (static_cast<double>
-	(std::numeric_limits<octave_idx_type>::max() - MALLOC_OVERHEAD) / sizeof (T), &nl);
-
-  int n = ra_idx.length ();
-
-  int nt = 0;
-  double dt = 1;
-
-  for (int i = 0; i < n; i++)
-    {
-      int nra_idx;
-      double dra_idx = frexp (static_cast<double> (ra_idx(i)), &nra_idx);
-
-      nt += nra_idx;
-      dt *= dra_idx;
-
-      if (dt < 0.5)
-	{
-	  nt--;
-	  dt *= 2;
-	}
-    }
-
-  if (nt < nl || (nt == nl && dt < dl))
-    {
-      octave_idx_type retval = 1;
-
-      for (int i = 0; i < n; i++)
-	retval *= ra_idx(i);
-
-      return retval;
-    }
-  else
-    {
-      throw std::bad_alloc ();
-      return 0;
-    }
-}
-
-#undef MALLOC_OVERHEAD
-
 template <class T>
 octave_idx_type
 Array<T>::compute_index (const Array<octave_idx_type>& ra_idx) const
 {
   octave_idx_type retval = -1;
 
   int n = dimensions.length ();
 
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -133,17 +133,17 @@ protected:
   Array (T *d, octave_idx_type n)
     : rep (new typename Array<T>::ArrayRep (d, n)), dimensions (n) 
     { 
       slice_data = rep->data;
       slice_len = rep->len;
     }
 
   Array (T *d, const dim_vector& dv)
-    : rep (new typename Array<T>::ArrayRep (d, get_size (dv))),
+    : rep (new typename Array<T>::ArrayRep (d, dv.numel ())),
       dimensions (dv) 
     { 
       slice_data = rep->data;
       slice_len = rep->len;
     }
 
   // slice constructor
   Array (const Array<T>& a, const dim_vector& dv,
@@ -219,25 +219,25 @@ public:
       rep->count++;
       slice_data = a.slice_data;
       slice_len = a.slice_len;
     }
 
 public:
 
   Array (const dim_vector& dv)
-    : rep (new typename Array<T>::ArrayRep (get_size (dv))),
+    : rep (new typename Array<T>::ArrayRep (dv.safe_numel ())),
       dimensions (dv) 
     { 
       slice_data = rep->data;
       slice_len = rep->len;
     }
 
   Array (const dim_vector& dv, const T& val)
-    : rep (new typename Array<T>::ArrayRep (get_size (dv))),
+    : rep (new typename Array<T>::ArrayRep (dv.safe_numel ())),
       dimensions (dv)
     {
       slice_data = rep->data;
       slice_len = rep->len;
       fill (val);
     }
 
   // Reshape constructor.
@@ -296,20 +296,16 @@ public:
   // Return a const-reference so that dims ()(i) works efficiently.
   const dim_vector& dims (void) const { return dimensions; }
 
   Array<T> squeeze (void) const;
   
   void chop_trailing_singletons (void) 
   { dimensions.chop_trailing_singletons (); }
   
-  static octave_idx_type get_size (octave_idx_type r, octave_idx_type c);
-  static octave_idx_type get_size (octave_idx_type r, octave_idx_type c, octave_idx_type p);
-  static octave_idx_type get_size (const dim_vector& dv);
-
   octave_idx_type compute_index (const Array<octave_idx_type>& ra_idx) const;
 
   T range_error (const char *fcn, octave_idx_type n) const;
   T& range_error (const char *fcn, octave_idx_type n);
 
   T range_error (const char *fcn, octave_idx_type i, octave_idx_type j) const;
   T& range_error (const char *fcn, octave_idx_type i, octave_idx_type j);
 
diff --git a/liboctave/Array2.h b/liboctave/Array2.h
--- a/liboctave/Array2.h
+++ b/liboctave/Array2.h
@@ -38,18 +38,16 @@ class idx_vector;
 // Two dimensional array class.
 
 template <class T>
 class
 Array2 : public Array<T>
 {
 protected:
 
-  static octave_idx_type get_size (octave_idx_type r, octave_idx_type c) { return Array<T>::get_size (r, c); }
-
   Array2 (T *d, octave_idx_type r, octave_idx_type c) : Array<T> (d, dim_vector (r, c)) { }
 
 public:
 
   Array2 (void) : Array<T> (dim_vector (0, 0)) { }
 
   Array2 (octave_idx_type r, octave_idx_type c) : Array<T> (dim_vector (r, c)) { }
 
diff --git a/liboctave/Array3.h b/liboctave/Array3.h
--- a/liboctave/Array3.h
+++ b/liboctave/Array3.h
@@ -36,19 +36,16 @@ class idx_vector;
 // Three dimensional array class.
 
 template <class T>
 class
 Array3 : public Array<T>
 {
 protected:
 
-  static octave_idx_type get_size (octave_idx_type r, octave_idx_type c, octave_idx_type p)
-    { return Array<T>::get_size (r, c, p); }
-
   Array3 (T *d, octave_idx_type r, octave_idx_type c, octave_idx_type p) : Array<T> (d, dim_vector (r, c, p)) { }
 
 public:
 
   Array3 (void) : Array<T> (dim_vector (0, 0, 0)) { }
 
   Array3 (octave_idx_type r, octave_idx_type c, octave_idx_type p) : Array<T> (dim_vector (r, c, p)) { }
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2009-11-19  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dim-vector.h (dim_vector::safe_numel): New method.
+	* Array.h (Array<T>::Array (const dim_vector&),
+	Array<T>::Array (const dim_vector&, const T&),
+	Array<T>::Array (T *, const dim_vector&)): Use it here.
+	* Array.cc (Array<T>::clear (const dim_vector&)): Also here.
+	(Array<T>::get_size): Remove.
+	* Array2.h (Array2::get_size): Remove.
+	* Array3.h (Array3::get_size): Remove.
+
 2009-11-19  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.cc (Array::clear (const dim_vector&)): Use get_size.
 
 2009-11-19  Jaroslav Hajek  <highegg@gmail.com>
 
 	* lo-mappers.cc (do_erfinv): New static function.
 	(erfinv (double), erfinv (float)): New mappers.
diff --git a/liboctave/dim-vector.h b/liboctave/dim-vector.h
--- a/liboctave/dim-vector.h
+++ b/liboctave/dim-vector.h
@@ -20,16 +20,17 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if !defined (octave_dim_vector_h)
 #define octave_dim_vector_h 1
 
 #include <cassert>
+#include <limits>
 
 #include <sstream>
 #include <string>
 
 #include "lo-error.h"
 
 // Rationale: This implementation is more tricky than Array, but the big plus
 // is that dim_vector requires only one allocation instead of two.
@@ -322,16 +323,40 @@ public:
     octave_idx_type retval = 1;
 
     for (int i = n; i < n_dims; i++)
       retval *= elem (i);
 
     return retval;
   }
 
+  // The following function will throw a std::bad_alloc ()
+  // exception if the requested size is larger than can be indexed by
+  // octave_idx_type. This may be smaller than the actual amount of
+  // memory that can be safely allocated on a system.  However, if we
+  // don't fail here, we can end up with a mysterious crash inside a
+  // function that is iterating over an array using octave_idx_type
+  // indices.
+
+  octave_idx_type safe_numel (void) const
+  {
+    octave_idx_type idx_max = std::numeric_limits<octave_idx_type>::max () - 1;
+    octave_idx_type n = 1;
+    int n_dims = length ();
+    for (int i = 0; i < n_dims; i++)
+      {
+        n *= rep[i];
+        if (rep[i] != 0)
+          idx_max /= rep[i];
+        if (idx_max <= 0)
+          throw std::bad_alloc ();
+      }
+    return n;
+  }
+
   bool any_neg (void) const
   {
     int n_dims = length (), i;
     for (i = 0; i < n_dims; i++)
       if (elem (i) < 0) break;
     return i < n_dims;
   }
 
