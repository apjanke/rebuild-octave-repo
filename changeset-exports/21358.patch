# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1456498882 -3600
#      Fri Feb 26 16:01:22 2016 +0100
# Node ID f2ae78f5827f8918c98127ee9e1b0e6fd971f162
# Parent  d00efda9bb92855b9d68a1f2241772640c9c0a06
Resolve compile time issues, when octave_idx_type is long.

* libinterp/corefcn/debug.cc (bp_table::dbstop_process_map_args): Cell.index
requires idx_vector, which cannot be resolved from an integer constant.

* libinterp/dldfcn/__magick_read__.cc (read_indexed_images): Value "3" is an
integer constant, thus std::min(long int,int) is ambiguous.

diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -474,17 +474,17 @@ bp_table::dbstop_process_map_args (const
   // process errs
   // why so many levels of indirection needed?
   bool fail = false;
   Cell U = mv.contents ("errs");
   if (U.numel () != 1)
     fail = (U.numel () > 1);
   else
     {
-      Array<octave_value> W = U.index (0);
+      Array<octave_value> W = U.index (static_cast<octave_idx_type> (0));
       if (W.numel () == 0 || W(0).length () == 0)
         Vdebug_on_error = 1;    // like "dbstop if error" with no identifier
       else if (! W(0).is_cell ())
         fail = true;
       else
         {
           Cell V = W(0).cell_value ();
           for (int i = 0; i < V.numel (); i++)
@@ -500,17 +500,17 @@ bp_table::dbstop_process_map_args (const
   // process caught
   // why so many levels of indirection needed?
   fail = false;
   U = mv.contents ("caught");
   if (U.numel () != 1)
     fail = (U.numel () > 1);
   else
     {
-      Array<octave_value> W = U.index (0);
+      Array<octave_value> W = U.index (static_cast<octave_idx_type> (0));
       if (W.numel () == 0 || W(0).length () == 0)
         Vdebug_on_caught = 1;    // like "dbstop if caught error" with no ID
       else if (! W(0).is_cell ())
         fail = true;
       else
         {
           Cell V = W(0).cell_value ();
           for (int i = 0; i < V.numel (); i++)
@@ -526,17 +526,17 @@ bp_table::dbstop_process_map_args (const
   // process warn
   // why so many levels of indirection needed?
   fail = false;
   U = mv.contents ("warn");
   if (U.numel () != 1)
     fail = (U.numel () > 1);
   else
     {
-      Array<octave_value> W = U.index (0);
+      Array<octave_value> W = U.index (static_cast<octave_idx_type> (0));
       if (W.numel () == 0 || W(0).length () == 0)
         Vdebug_on_warning = 1;    // like "dbstop if warning" with no identifier
       else if (! W(0).is_cell ())
         fail = true;
       else
         {
           Cell V = W(0).cell_value ();
           for (int i = 0; i < V.numel (); i++)
diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -213,17 +213,17 @@ template <typename T>
 static octave_value_list
 read_indexed_images (const std::vector<Magick::Image>& imvec,
                      const Array<octave_idx_type>& frameidx,
                      const octave_idx_type& nargout,
                      const octave_scalar_map& options)
 {
   typedef typename T::element_type P;
 
-  octave_value_list retval (nargout > 1 ? std::min (nargout, 3) : 1);
+  octave_value_list retval (1);
 
   std::map<std::string, octave_idx_type> region = calculate_region (options);
   const octave_idx_type nFrames = frameidx.numel ();
   const octave_idx_type nRows = region["row_out"];
   const octave_idx_type nCols = region["col_out"];
 
   // imvec has all of the pages of a file, even the ones we are not
   // interested in. We will use the first image that we will be actually
