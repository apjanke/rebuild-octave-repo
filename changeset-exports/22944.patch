# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1482797731 18000
#      Mon Dec 26 19:15:31 2016 -0500
# Node ID 5126040e8f497bf292b0f98cab8560b6114ecb1b
# Parent  80ac3e38b03de7f25653469386c7904e2a661508
use F77_INT instead of octave_idx_type for liboctave svd class

* svd.h, svd.cc: Use F77_INT instead of octave_idx_type for integer
data passed to Fortran subroutines.  Use octave_f77_int_type in
public header file.

diff --git a/liboctave/cruft/misc/f77-fcn.h b/liboctave/cruft/misc/f77-fcn.h
--- a/liboctave/cruft/misc/f77-fcn.h
+++ b/liboctave/cruft/misc/f77-fcn.h
@@ -378,17 +378,16 @@ to_f77_int (octave_idx_type x)
 
   if (x < std::numeric_limits<F77_INT>::min ()
       || x > std::numeric_limits<F77_INT>::max ())
     (*current_liboctave_error_handler)
       ("integer dimension or index out of range for Fortran INTEGER type");
 
   return static_cast<F77_INT> (x);
 }
-
 #endif
 
 #if defined (__cplusplus)
 }
 #endif
 
 #endif
 
diff --git a/liboctave/numeric/svd.cc b/liboctave/numeric/svd.cc
--- a/liboctave/numeric/svd.cc
+++ b/liboctave/numeric/svd.cc
@@ -86,83 +86,81 @@ namespace octave
                      CMPLX_ARG (work.data ()),          \
                      lwork, rwork.data (), info         \
                      F77_CHAR_ARG_LEN (1)               \
                      F77_CHAR_ARG_LEN (1)))
 
     // DGESVD
     template<>
     void
-    svd<Matrix>::gesvd (char& jobu, char& jobv, octave_idx_type m,
-                        octave_idx_type n, double* tmp_data, octave_idx_type m1,
-                        double* s_vec, double* u, double* vt,
-                        octave_idx_type nrow_vt1, std::vector<double>& work,
-                        octave_idx_type& lwork, octave_idx_type& info)
+    svd<Matrix>::gesvd (char& jobu, char& jobv, F77_INT m, F77_INT n,
+                        double* tmp_data, F77_INT m1, double* s_vec,
+                        double* u, double* vt, F77_INT nrow_vt1,
+                        std::vector<double>& work, F77_INT& lwork,
+                        F77_INT& info)
     {
       GESVD_REAL_STEP (dgesvd, DGESVD);
 
-      lwork = work[0];
+      lwork = static_cast<F77_INT> (work[0]);
       work.reserve (lwork);
 
       GESVD_REAL_STEP (dgesvd, DGESVD);
     }
 
     // SGESVD
     template<>
     void
-    svd<FloatMatrix>::gesvd (char& jobu, char& jobv, octave_idx_type m,
-                             octave_idx_type n, float* tmp_data,
-                             octave_idx_type m1, float* s_vec, float* u, float* vt,
-                             octave_idx_type nrow_vt1, std::vector<float>& work,
-                             octave_idx_type& lwork, octave_idx_type& info)
+    svd<FloatMatrix>::gesvd (char& jobu, char& jobv, F77_INT m, F77_INT n,
+                             float* tmp_data, F77_INT m1, float* s_vec,
+                             float* u, float* vt, F77_INT nrow_vt1,
+                             std::vector<float>& work, F77_INT& lwork,
+                             F77_INT& info)
     {
       GESVD_REAL_STEP (sgesvd, SGESVD);
 
-      lwork = work[0];
+      lwork = static_cast<F77_INT> (work[0]);
       work.reserve (lwork);
 
       GESVD_REAL_STEP (sgesvd, SGESVD);
     }
 
     // ZGESVD
     template<>
     void
-    svd<ComplexMatrix>::gesvd (char& jobu, char& jobv, octave_idx_type m,
-                               octave_idx_type n, Complex* tmp_data,
-                               octave_idx_type m1, double* s_vec, Complex* u,
-                               Complex* vt, octave_idx_type nrow_vt1,
-                               std::vector<Complex>& work,
-                               octave_idx_type& lwork, octave_idx_type& info)
+    svd<ComplexMatrix>::gesvd (char& jobu, char& jobv, F77_INT m, F77_INT n,
+                               Complex* tmp_data, F77_INT m1, double* s_vec,
+                               Complex* u, Complex* vt, F77_INT nrow_vt1,
+                               std::vector<Complex>& work, F77_INT& lwork,
+                               F77_INT& info)
     {
       std::vector<double> rwork (5 * std::max (m, n));
 
       GESVD_COMPLEX_STEP (zgesvd, ZGESVD, F77_DBLE_CMPLX_ARG);
 
-      lwork = work[0].real ();
+      lwork = static_cast<F77_INT> (work[0].real ());
       work.reserve (lwork);
 
       GESVD_COMPLEX_STEP (zgesvd, ZGESVD, F77_DBLE_CMPLX_ARG);
     }
 
     // CGESVD
     template<>
     void
-    svd<FloatComplexMatrix>::gesvd (char& jobu, char& jobv,
-                                    octave_idx_type m, octave_idx_type n,
-                                    FloatComplex* tmp_data, octave_idx_type m1,
-                                    float* s_vec, FloatComplex* u,
-                                    FloatComplex* vt, octave_idx_type nrow_vt1,
+    svd<FloatComplexMatrix>::gesvd (char& jobu, char& jobv, F77_INT m,
+                                    F77_INT n, FloatComplex* tmp_data,
+                                    F77_INT m1, float* s_vec, FloatComplex* u,
+                                    FloatComplex* vt, F77_INT nrow_vt1,
                                     std::vector<FloatComplex>& work,
-                                    octave_idx_type& lwork, octave_idx_type& info)
+                                    F77_INT& lwork, F77_INT& info)
     {
       std::vector<float> rwork (5 * std::max (m, n));
 
       GESVD_COMPLEX_STEP (cgesvd, CGESVD, F77_CMPLX_ARG);
 
-      lwork = work[0].real ();
+      lwork = static_cast<F77_INT> (work[0].real ());
       work.reserve (lwork);
 
       GESVD_COMPLEX_STEP (cgesvd, CGESVD, F77_CMPLX_ARG);
     }
 
 #undef GESVD_REAL_STEP
 #undef GESVD_COMPLEX_STEP
 
@@ -182,133 +180,127 @@ namespace octave
                      CMPLX_ARG (vt), nrow_vt1,                  \
                      CMPLX_ARG (work.data ()), lwork,           \
                      rwork.data (), iwork, info                 \
                      F77_CHAR_ARG_LEN (1)))
 
     // DGESDD
     template<>
     void
-    svd<Matrix>::gesdd (char& jobz, octave_idx_type m, octave_idx_type n,
-                        double* tmp_data, octave_idx_type m1,
-                        double* s_vec, double* u,
-                        double* vt, octave_idx_type nrow_vt1,
-                        std::vector<double>& work, octave_idx_type& lwork,
-                        octave_idx_type* iwork, octave_idx_type& info)
+    svd<Matrix>::gesdd (char& jobz, F77_INT m, F77_INT n, double* tmp_data,
+                        F77_INT m1, double* s_vec, double* u, double* vt,
+                        F77_INT nrow_vt1, std::vector<double>& work,
+                        F77_INT& lwork, F77_INT* iwork, F77_INT& info)
     {
       GESDD_REAL_STEP (dgesdd, DGESDD);
 
-      lwork = work[0];
+      lwork = static_cast<F77_INT> (work[0]);
       work.reserve (lwork);
 
       GESDD_REAL_STEP (dgesdd, DGESDD);
     }
 
     // SGESDD
     template<>
     void
-    svd<FloatMatrix>::gesdd (char& jobz, octave_idx_type m, octave_idx_type n,
-                             float* tmp_data, octave_idx_type m1,
-                             float* s_vec, float* u,
-                             float* vt, octave_idx_type nrow_vt1,
-                             std::vector<float>& work, octave_idx_type& lwork,
-                             octave_idx_type* iwork, octave_idx_type& info)
+    svd<FloatMatrix>::gesdd (char& jobz, F77_INT m, F77_INT n, float* tmp_data,
+                             F77_INT m1, float* s_vec, float* u, float* vt,
+                             F77_INT nrow_vt1, std::vector<float>& work,
+                             F77_INT& lwork, F77_INT* iwork, F77_INT& info)
     {
       GESDD_REAL_STEP (sgesdd, SGESDD);
 
-      lwork = work[0];
+      lwork = static_cast<F77_INT> (work[0]);
       work.reserve (lwork);
 
       GESDD_REAL_STEP (sgesdd, SGESDD);
     }
 
     // ZGESDD
     template<>
     void
-    svd<ComplexMatrix>::gesdd (char& jobz, octave_idx_type m, octave_idx_type n,
-                               Complex* tmp_data, octave_idx_type m1,
-                               double* s_vec, Complex* u,
-                               Complex* vt, octave_idx_type nrow_vt1,
-                               std::vector<Complex>& work, octave_idx_type& lwork,
-                               octave_idx_type* iwork, octave_idx_type& info)
+    svd<ComplexMatrix>::gesdd (char& jobz, F77_INT m, F77_INT n,
+                               Complex* tmp_data, F77_INT m1, double* s_vec,
+                               Complex* u, Complex* vt, F77_INT nrow_vt1,
+                               std::vector<Complex>& work, F77_INT& lwork,
+                               F77_INT* iwork, F77_INT& info)
     {
 
-      octave_idx_type min_mn = std::min (m, n);
+      F77_INT min_mn = std::min (m, n);
 
-      octave_idx_type lrwork;
+      F77_INT lrwork;
       if (jobz == 'N')
         lrwork = 7*min_mn;
       else
         lrwork = 5*min_mn*min_mn + 5*min_mn;
 
       std::vector<double> rwork (lrwork);
 
       GESDD_COMPLEX_STEP (zgesdd, ZGESDD, F77_DBLE_CMPLX_ARG);
 
-      lwork = work[0].real ();
+      lwork = static_cast<F77_INT> (work[0].real ());
       work.reserve (lwork);
 
       GESDD_COMPLEX_STEP (zgesdd, ZGESDD, F77_DBLE_CMPLX_ARG);
     }
 
     // CGESDD
     template<>
     void
-    svd<FloatComplexMatrix>::gesdd (char& jobz, octave_idx_type m,
-                                    octave_idx_type n,
-                                    FloatComplex* tmp_data, octave_idx_type m1,
+    svd<FloatComplexMatrix>::gesdd (char& jobz, F77_INT m, F77_INT n,
+                                    FloatComplex* tmp_data, F77_INT m1,
                                     float* s_vec, FloatComplex* u,
-                                    FloatComplex* vt, octave_idx_type nrow_vt1,
+                                    FloatComplex* vt, F77_INT nrow_vt1,
                                     std::vector<FloatComplex>& work,
-                                    octave_idx_type& lwork, octave_idx_type* iwork,
-                                    octave_idx_type& info)
+                                    F77_INT& lwork, F77_INT* iwork,
+                                    F77_INT& info)
     {
-      octave_idx_type min_mn = std::min (m, n);
-      octave_idx_type max_mn = std::max (m, n);
+      F77_INT min_mn = std::min (m, n);
+      F77_INT max_mn = std::max (m, n);
 
-      octave_idx_type lrwork;
+      F77_INT lrwork;
       if (jobz == 'N')
         lrwork = 5*min_mn;
       else
         lrwork = min_mn * std::max (5*min_mn+7, 2*max_mn+2*min_mn+1);
       std::vector<float> rwork (lrwork);
 
       GESDD_COMPLEX_STEP (cgesdd, CGESDD, F77_CMPLX_ARG);
 
-      lwork = work[0].real ();
+      lwork = static_cast<F77_INT> (work[0].real ());
       work.reserve (lwork);
 
       GESDD_COMPLEX_STEP (cgesdd, CGESDD, F77_CMPLX_ARG);
     }
 
 #undef GESDD_REAL_STEP
 #undef GESDD_COMPLEX_STEP
 
 
     template<typename T>
     svd<T>::svd (const T& a, svd::Type type,
                  svd::Driver driver)
       : m_type (type), m_driver (driver), left_sm (), sigma (), right_sm ()
     {
-      octave_idx_type info;
+      F77_INT info;
 
-      octave_idx_type m = a.rows ();
-      octave_idx_type n = a.cols ();
+      F77_INT m = to_f77_int (a.rows ());
+      F77_INT n = to_f77_int (a.cols ());
 
       if (m == 0 || n == 0)
         {
           switch (m_type)
             {
             case svd::Type::std:
               left_sm = T (m, m, 0);
-              for (octave_idx_type i = 0; i < m; i++)
+              for (F77_INT i = 0; i < m; i++)
                 left_sm.xelem (i, i) = 1;
               sigma = DM_T (m, n);
               right_sm = T (n, n, 0);
-              for (octave_idx_type i = 0; i < n; i++)
+              for (F77_INT i = 0; i < n; i++)
                 right_sm.xelem (i, i) = 1;
               break;
 
             case svd::Type::economy:
               left_sm = T (m, 0, 0);
               sigma = DM_T (0, 0);
               right_sm = T (0, n, 0);
               break;
@@ -319,25 +311,25 @@ namespace octave
               break;
             }
           return;
         }
 
       T atmp = a;
       P* tmp_data = atmp.fortran_vec ();
 
-      octave_idx_type min_mn = m < n ? m : n;
+      F77_INT min_mn = m < n ? m : n;
 
       char jobu = 'A';
       char jobv = 'A';
 
-      octave_idx_type ncol_u = m;
-      octave_idx_type nrow_vt = n;
-      octave_idx_type nrow_s = m;
-      octave_idx_type ncol_s = n;
+      F77_INT ncol_u = m;
+      F77_INT nrow_vt = n;
+      F77_INT nrow_s = m;
+      F77_INT ncol_s = n;
 
       switch (m_type)
         {
         case svd::Type::economy:
           jobu = jobv = 'S';
           ncol_u = nrow_vt = nrow_s = ncol_s = min_mn;
           break;
 
@@ -369,33 +361,32 @@ namespace octave
 
       if (! (jobv == 'N' || jobv == 'O'))
         right_sm.resize (nrow_vt, n);
 
       P* vt = right_sm.fortran_vec ();
 
       // Query _GESVD for the correct dimension of WORK.
 
-      octave_idx_type lwork = -1;
+      F77_INT lwork = -1;
 
       std::vector<P> work (1);
 
-      octave_idx_type m1 = std::max (m, static_cast<octave_idx_type> (1));
-      octave_idx_type nrow_vt1 = std::max (nrow_vt,
-                                           static_cast<octave_idx_type> (1));
+      F77_INT m1 = std::max (m, static_cast<F77_INT> (1));
+      F77_INT nrow_vt1 = std::max (nrow_vt, static_cast<F77_INT> (1));
 
       if (m_driver == svd::Driver::GESVD)
         gesvd (jobu, jobv, m, n, tmp_data, m1, s_vec, u, vt, nrow_vt1,
                work, lwork, info);
       else if (m_driver == svd::Driver::GESDD)
         {
           assert (jobu == jobv);
           char jobz = jobu;
 
-          std::vector<octave_idx_type> iwork (8 * std::min (m, n));
+          std::vector<F77_INT> iwork (8 * std::min (m, n));
 
           gesdd (jobz, m, n, tmp_data, m1, s_vec, u, vt, nrow_vt1,
                  work, lwork, iwork.data (), info);
         }
       else
         abort ();
 
       if (! (jobv == 'N' || jobv == 'O'))
diff --git a/liboctave/numeric/svd.h b/liboctave/numeric/svd.h
--- a/liboctave/numeric/svd.h
+++ b/liboctave/numeric/svd.h
@@ -94,24 +94,25 @@ namespace octave
 
       svd::Type m_type;
       svd::Driver m_driver;
 
       T left_sm;
       DM_T sigma;
       T right_sm;
 
-      void gesvd (char& jobu, char& jobv, octave_idx_type m, octave_idx_type n,
-                  P* tmp_data, octave_idx_type m1, DM_P* s_vec, P* u, P* vt,
-                  octave_idx_type nrow_vt1, std::vector<P>& work,
-                  octave_idx_type& lwork, octave_idx_type& info);
+      void gesvd (char& jobu, char& jobv, octave_f77_int_type m,
+                  octave_f77_int_type n, P* tmp_data, octave_f77_int_type m1,
+                  DM_P* s_vec, P* u, P* vt, octave_f77_int_type nrow_vt1,
+                  std::vector<P>& work, octave_f77_int_type& lwork,
+                  octave_f77_int_type& info);
 
-      void gesdd (char& jobz, octave_idx_type m, octave_idx_type n,
-                  P* tmp_data, octave_idx_type m1, DM_P* s_vec, P* u, P* vt,
-                  octave_idx_type nrow_vt1, std::vector<P>& work,
-                  octave_idx_type& lwork,
-                  octave_idx_type* iwork, octave_idx_type& info);
+      void gesdd (char& jobz, octave_f77_int_type m, octave_f77_int_type n,
+                  P* tmp_data, octave_f77_int_type m1, DM_P* s_vec, P* u,
+                  P* vt, octave_f77_int_type nrow_vt1, std::vector<P>& work,
+                  octave_f77_int_type& lwork, octave_f77_int_type* iwork,
+                  octave_f77_int_type& info);
     };
   }
 }
 
 #endif
 
