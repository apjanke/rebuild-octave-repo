# HG changeset patch
# User jwe
# Date 941820918 0
#      Fri Nov 05 16:55:18 1999 +0000
# Node ID d8d3700fb4abff142a0e622823bab146cb480c39
# Parent  14cfc9475fe4945af8366e26fc906587545da5c3
[project @ 1999-11-05 16:55:17 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,19 @@
 1999-11-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* oct-iostrm.h (octave_istream::eof, octave_ostream::eof): Provide
+	implementation for these.
+
+	* oct-stream.cc (octave_base_stream::do_scanf):
+	The stdin stream is only special if we are interactive.
+	(octave_base_stream::scanf): Ditto.
+	(octave_base_stream::do_oscanf): Ditto.
+	(octave_base_stream::oscanf): Ditto.
+
 	* ov.h (octave_value::is_stream): New predicate.
 	* ov-file.h (octave_file::is_stream): Return true.
 	* file-io.cc (Fis_stream): New function.
 
 	* ov-file.h (class octave_file): stream is now an object instead
 	of pointer.
 	* ov-file.cc (octave_file::print_raw): Handle stream as object
 	instead of pointer.  Also print stream status.
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -684,17 +684,17 @@ more `C-like', and also compatible with 
     {
       retval (1) = 0.0;
       retval (0) = Matrix ();
 
       if (nargin == 2 || nargin == 3)
 	{
 	  octave_stream os = octave_stream_list::lookup (args(0), "fscanf");
 
-	  if (error_state)
+	  if (! error_state)
 	    {
 	      if (args(1).is_string ())
 		{
 		  string fmt = args(1).string_value ();
 
 		  int count = 0;
 
 		  Matrix size = (nargin == 3)
diff --git a/src/oct-iostrm.cc b/src/oct-iostrm.cc
--- a/src/oct-iostrm.cc
+++ b/src/oct-iostrm.cc
@@ -55,22 +55,38 @@ octave_base_iostream::eof (void) const
 }
 
 void
 octave_base_iostream::invalid_operation (void) const
 {
   ::error ("%s: invalid operation", stream_type ());
 }
 
+// Return non-zero if EOF has been reached on this stream.
+
+bool
+octave_istream::eof (void) const
+{
+  return is && is->eof ();
+}
+
 octave_stream
 octave_istream::create (istream *arg, const string& nm)
 {
   return octave_stream (new octave_istream (arg, nm));
 }
 
+// Return non-zero if EOF has been reached on this stream.
+
+bool
+octave_ostream::eof (void) const
+{
+  return os && os->eof ();
+}
+
 octave_stream
 octave_ostream::create (ostream *arg, const string& nm)
 {
   return octave_stream (new octave_ostream (arg, nm));
 }
 
 /*
 ;;; Local Variables: ***
diff --git a/src/oct-iostrm.h b/src/oct-iostrm.h
--- a/src/oct-iostrm.h
+++ b/src/oct-iostrm.h
@@ -83,16 +83,20 @@ public:
 
   octave_istream (istream *arg = 0, const string& nm = string ())
     : octave_base_iostream (nm, ios::in, oct_mach_info::native),
       is (arg) { }
 
   static octave_stream
   create (istream *arg = 0, const string& nm = string ());
 
+  // Return non-zero if EOF has been reached on this stream.
+
+  bool eof (void) const;
+
   istream *input_stream (void) { return is; }
 
   ostream *output_stream (void) { return 0; }
 
 protected:
 
   ~octave_istream (void) { }
 
@@ -116,16 +120,20 @@ public:
 
   octave_ostream (ostream *arg, const string& nm = string ())
     : octave_base_iostream (nm, ios::out, oct_mach_info::native),
       os (arg) { }
 
   static octave_stream
   create (ostream *arg, const string& nm = string ());
 
+  // Return non-zero if EOF has been reached on this stream.
+
+  bool eof (void) const;
+
   istream *input_stream (void) { return 0; }
 
   ostream *output_stream (void) { return os; }
 
 protected:
 
   ~octave_ostream (void) { }
 
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -31,16 +31,17 @@ Software Foundation, 59 Temple Place - S
 #include <strstream.h>
 
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "str-vec.h"
 
 #include "error.h"
+#include "input.h"
 #include "oct-stream.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 // Possible values for conv_err:
 //
 //   1 : not a real scalar
 //   2 : value is NaN
@@ -1266,18 +1267,18 @@ octave_base_stream::do_scanf (scanf_form
 
 		  // If it looks like we have a matching failure, then
 		  // reset the failbit in the stream state.
 
 		  if (is.rdstate () & ios::failbit)
 		    is.clear (is.rdstate () & (~ios::failbit));
 
 		  // XXX FIXME XXX -- is this the right thing to do?
-		  // What about other streams?
-		  if (name () == "stdin")
+
+		  if (interactive && name () == "stdin")
 		    {
 		      is.clear ();
 
 		      // Skip to end of line.
 
 		      bool err;
 		      do_gets (-1, err, false, "fscanf");
 		    }
@@ -1346,18 +1347,18 @@ octave_base_stream::scanf (const string&
 		    // reset the failbit in the stream state.
 
 		    if (is.rdstate () & ios::failbit)
 		      is.clear (is.rdstate () & (~ios::failbit));
 		    else
 		      error ("fscanf: read error");
 
 		    // XXX FIXME XXX -- is this the right thing to do?
-		    // What about other streams?
-		    if (name () == "stdin")
+
+		    if (interactive && name () == "stdin")
 		      {
 			is.clear ();
 
 			// Skip to end of line.
 
 			bool err;
 			do_gets (-1, err, false, "fscanf");
 		      }
@@ -1529,18 +1530,18 @@ octave_base_stream::do_oscanf (const sca
 	    }
 	}
 
       if (ok () && is.fail ())
 	{
 	  error ("fscanf: read error");
       
 	  // XXX FIXME XXX -- is this the right thing to do?
-	  // What about other streams?
-	  if (name () == "stdin")
+
+	  if (interactive && name () == "stdin")
 	    {
 	      is.clear ();
 
 	      // Skip to end of line.
 
 	      bool err;
 	      do_gets (-1, err, false, "fscanf");
 	    }
@@ -1581,22 +1582,18 @@ octave_base_stream::oscanf (const string
 
 		is.scan (elt->text);
 
 		if (! is)
 		  {
 		    error ("fscanf: read error");
 
 		    // XXX FIXME XXX -- is this the right thing to do?
-		    // Maybe.  We should probably also arrange to
-		    // flush the pending input prior to printing a
-		    // prompt.  Or maybe just blow off scanf for stdin
-		    // like the MathWorks did. What about other streams?
-
-		    if (name () == "stdin")
+
+		    if (interactive && name () == "stdin")
 		      {
 			is.clear ();
 
 			// Skip to end of line.
 
 			bool err;
 			do_gets (-1, err, false, "fscanf");
 		      }
