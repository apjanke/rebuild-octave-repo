# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1369486831 -7200
#      Sat May 25 15:00:31 2013 +0200
# Node ID cd7d08b8c928219eed84109673e4dba4e202ca68
# Parent  d4bcb38ad0560096bb9c009fa6f4fdfb2a73c775
make background colors of editor files configurable

* settings-dialog.ui: insert a short help text for lexer style configurations
* settings-dialog.cc(read_settings): insert color pickers for background colors,
  (write_changed_settings): write colors from new color pickers to settings file

diff --git a/libgui/src/settings-dialog.cc b/libgui/src/settings-dialog.cc
--- a/libgui/src/settings-dialog.cc
+++ b/libgui/src/settings-dialog.cc
@@ -216,66 +216,82 @@ settings_dialog::read_lexer_settings (Qs
   int styles[MaxLexerStyles];  // array for saving valid styles (enum is not continuous)
   int max_style = get_valid_lexer_styles (lexer, styles);
   QGridLayout *style_grid = new QGridLayout ();
   QVector<QLabel*> description (max_style);
   QVector<QFontComboBox*> select_font (max_style);
   QVector<QSpinBox*> font_size (max_style);
   QVector<QCheckBox*> attrib_font (3 * max_style);
   QVector<color_picker*> color (max_style);
+  QVector<color_picker*> bg_color (max_style);
   int default_size = 10;
   QFont default_font = QFont ();
+  QColor default_color = QColor ();
+  QColor dummy_color = QColor (255,0,255);
+
   for (int i = 0; i < max_style; i++)  // create dialog elements for all styles
     {
       QString actual_name = lexer->description (styles[i]);
       QFont   actual_font = lexer->font (styles[i]);
       description[i] = new QLabel (actual_name);
       description[i]->setWordWrap (true);
-      description[i]->setMaximumSize (180,QWIDGETSIZE_MAX);
-      description[i]->setMinimumSize (180,1);
+      description[i]->setMaximumSize (160,QWIDGETSIZE_MAX);
+      description[i]->setMinimumSize (160,1);
       select_font[i] = new QFontComboBox ();
       select_font[i]->setObjectName (actual_name+"_font");
+      select_font[i]->setMaximumSize (180,QWIDGETSIZE_MAX);
+      select_font[i]->setMinimumSize (180,1);
       font_size[i] = new QSpinBox ();
       font_size[i]->setObjectName (actual_name+"_size");
       if (styles[i] == 0) // the default
         {
           select_font[i]->setCurrentFont (actual_font);
           default_font = actual_font;
           font_size[i]->setRange (6,24);
           default_size = actual_font.pointSize ();
           font_size[i]->setValue (default_size);
+          default_color = lexer->defaultPaper ();
+          bg_color[i] = new color_picker (default_color);
         }
       else   // other styles
         {
           select_font[i]->setCurrentFont (actual_font);
           if (actual_font.family () == default_font.family ())
             select_font[i]->setEditText (lexer->description (0));
           font_size[i]->setRange (-4,4);
           font_size[i]->setValue (actual_font.pointSize ()-default_size);
-          font_size[i]->setToolTip ("Difference to the defalt size");
+          font_size[i]->setToolTip (tr ("Difference to the defalt size"));
+          if (lexer->paper (styles[i]) == default_color)
+            bg_color[i] = new color_picker (dummy_color);
+          else
+            bg_color[i] = new color_picker (lexer->paper (styles[i]));
+            bg_color[i]->setToolTip
+                  (tr ("Background color, pink (255,0,255) means default"));
         }
       attrib_font[0+3*i] = new QCheckBox (tr("b"));
       attrib_font[1+3*i] = new QCheckBox (tr("i"));
       attrib_font[2+3*i] = new QCheckBox (tr("u"));
       attrib_font[0+3*i]->setChecked(Qt::Checked && actual_font.bold ());
       attrib_font[0+3*i]->setObjectName (actual_name+"_bold");
       attrib_font[1+3*i]->setChecked(Qt::Checked && actual_font.italic ());
       attrib_font[1+3*i]->setObjectName (actual_name+"_italic");
       attrib_font[2+3*i]->setChecked(Qt::Checked && actual_font.underline ());
       attrib_font[2+3*i]->setObjectName (actual_name+"_underline");
       color[i] = new color_picker (lexer->color (styles[i]));
       color[i]->setObjectName (actual_name+"_color");
+      bg_color[i]->setObjectName (actual_name+"_bg_color");
       int column = 1;
       style_grid->addWidget (description[i],     i, column++);
       style_grid->addWidget (select_font[i],     i, column++);
       style_grid->addWidget (font_size[i],       i, column++);
       style_grid->addWidget (attrib_font[0+3*i], i, column++);
       style_grid->addWidget (attrib_font[1+3*i], i, column++);
       style_grid->addWidget (attrib_font[2+3*i], i, column++);
       style_grid->addWidget (color[i],           i, column++);
+      style_grid->addWidget (bg_color[i],        i, column++);
     }
   // place grid with elements into the tab
   QScrollArea *scroll_area = new QScrollArea ();
   QWidget *scroll_area_contents = new QWidget ();
   scroll_area_contents->setObjectName (QString (lexer->language ())+"_styles");
   scroll_area_contents->setLayout (style_grid);
   scroll_area->setWidget (scroll_area_contents);
   ui->tabs_editor_styles->addTab (scroll_area,lexer->language ());
@@ -466,27 +482,32 @@ settings_dialog::write_lexer_settings (Q
   QWidget *tab = ui->tabs_editor_styles->
             findChild <QWidget *>(QString (lexer->language ())+"_styles");
   int styles[MaxLexerStyles];  // array for saving valid styles (enum is not continuous)
   int max_style = get_valid_lexer_styles (lexer, styles);
   QFontComboBox *select_font;
   QSpinBox *font_size;
   QCheckBox *attrib_font[3];
   color_picker *color;
+  color_picker *bg_color;
   int default_size = 10;
   QFont default_font = QFont ("Courier New",10,-1,0);
+  QColor default_color = QColor ();
+  QColor dummy_color = QColor (255,0,255);
+
   for (int i = 0; i < max_style; i++)  // get dialog elements and their contents
     {
       QString actual_name = lexer->description (styles[i]);
       select_font    = tab->findChild <QFontComboBox *>(actual_name+"_font");
       font_size      = tab->findChild <QSpinBox *>(actual_name+"_size");
       attrib_font[0] = tab->findChild <QCheckBox *>(actual_name+"_bold");
       attrib_font[1] = tab->findChild <QCheckBox *>(actual_name+"_italic");
       attrib_font[2] = tab->findChild <QCheckBox *>(actual_name+"_underline");
       color          = tab->findChild <color_picker *>(actual_name+"_color");
+      bg_color       = tab->findChild <color_picker *>(actual_name+"_bg_color");
       QFont new_font = default_font;
       if (select_font)
         {
           new_font = select_font->currentFont ();
           if (styles[i] == 0)
             default_font = new_font;
           else
             if (select_font->currentText () == lexer->description (0))
@@ -508,17 +529,34 @@ settings_dialog::write_lexer_settings (Q
         new_font.setItalic (attrib_font[1]->isChecked ());
       if (attrib_font[2])
         new_font.setUnderline (attrib_font[2]->isChecked ());
       lexer->setFont (new_font,styles[i]);
       if (styles[i] == 0)
         lexer->setDefaultFont (new_font);
       if (color)
         lexer->setColor (color->color (),styles[i]);
+      if (bg_color)
+        {
+          if (styles[i] == 0)
+            {
+              default_color = bg_color->color ();
+              lexer->setPaper (default_color,styles[i]);
+              lexer->setDefaultPaper (default_color);
+            }
+          else
+            {
+              if (bg_color->color () == dummy_color)
+                lexer->setPaper (default_color,styles[i]);
+              else
+                lexer->setPaper (bg_color->color (),styles[i]);
+            }
+        }
     }
+
   lexer->writeSettings (*settings);
 
   settings->setValue (
     "settings/last_editor_styles_tab",ui->tabs_editor_styles->currentIndex ());
 }
 #endif
 
 void
diff --git a/libgui/src/settings-dialog.ui b/libgui/src/settings-dialog.ui
--- a/libgui/src/settings-dialog.ui
+++ b/libgui/src/settings-dialog.ui
@@ -478,25 +478,65 @@
         </layout>
        </item>
       </layout>
      </widget>
      <widget class="QWidget" name="tab_6">
       <attribute name="title">
        <string>Editor Styles</string>
       </attribute>
-      <widget class="QTabWidget" name="tabs_editor_styles">
+      <widget class="QWidget" name="verticalLayoutWidget_4">
        <property name="geometry">
         <rect>
-         <x>2</x>
-         <y>9</y>
-         <width>671</width>
-         <height>381</height>
+         <x>0</x>
+         <y>0</y>
+         <width>1066</width>
+         <height>401</height>
         </rect>
        </property>
+       <layout class="QVBoxLayout" name="verticalLayout_5">
+        <item>
+         <widget class="QLabel" name="label_10">
+          <property name="maximumSize">
+           <size>
+            <width>676</width>
+            <height>16777215</height>
+           </size>
+          </property>
+          <property name="frameShape">
+           <enum>QFrame::NoFrame</enum>
+          </property>
+          <property name="text">
+           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Select font, font size (as difference to the default size), font decoration (bold, italic, underline), textcolor and background color (for the latter, the color pink (255,0,255) is a placeholder for the default background color)&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+          <property name="scaledContents">
+           <bool>false</bool>
+          </property>
+          <property name="alignment">
+           <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignVCenter</set>
+          </property>
+          <property name="wordWrap">
+           <bool>true</bool>
+          </property>
+          <property name="margin">
+           <number>4</number>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QTabWidget" name="tabs_editor_styles">
+          <property name="maximumSize">
+           <size>
+            <width>676</width>
+            <height>351</height>
+           </size>
+          </property>
+         </widget>
+        </item>
+       </layout>
       </widget>
      </widget>
      <widget class="QWidget" name="tab_5">
       <attribute name="title">
        <string>Terminal</string>
       </attribute>
       <widget class="QWidget" name="horizontalLayoutWidget">
        <property name="geometry">
