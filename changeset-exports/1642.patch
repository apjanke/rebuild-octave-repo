# HG changeset patch
# User jwe
# Date 818460528 0
#      Fri Dec 08 22:08:48 1995 +0000
# Node ID 50e71230d58254cc81029c67fc70007009583a04
# Parent  1f99a54d7b52b4fd0c6ceb62b6c5b37fefe1958e
[project @ 1995-12-08 22:07:30 by jwe]

diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -59,19 +59,16 @@ Software Foundation, Inc.
 #include "statdefs.h"
 #include "unwind-prot.h"
 #include "user-prefs.h"
 #include "utils.h"
 
 // Nonzero means input is coming from temporary history file.
 int input_from_tmp_history_file = 0;
 
-// Nonzero means we are saving history lines.
-int saving_history = 1;
-
 // The number of lines to save in the history file.
 static int octave_hist_size = 1024;
 
 // The name of the history file.
 static char *octave_hist_file;
 
 // The number of hisory lines we read from the history file.
 static int history_lines_in_file = 0;
@@ -136,17 +133,17 @@ clean_up_history (void)
 {
   stifle_history (octave_hist_size);
   write_history (octave_hist_file);
 }
 
 void
 maybe_save_history (const char *s)
 {
-  if (saving_history)
+  if (user_pref.saving_history)
     {
       add_history (s);
       history_lines_this_session++;
     }
 }
 
 // Display, save, or load history.  Stolen and modified from bash.
 //
diff --git a/src/oct-hist.h b/src/oct-hist.h
--- a/src/oct-hist.h
+++ b/src/oct-hist.h
@@ -30,19 +30,16 @@ extern void maybe_save_history (const ch
 extern void do_history (int, char**);
 extern void do_edit_history (int, char**);
 extern void do_run_history (int, char**);
 extern int current_history_number (void);
 
 // Nonzero means input is coming from temporary history file.
 extern int input_from_tmp_history_file;
 
-// Nonzero means we are saving history lines.
-extern int saving_history;
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/user-prefs.cc b/src/user-prefs.cc
--- a/src/user-prefs.cc
+++ b/src/user-prefs.cc
@@ -62,16 +62,17 @@ init_user_prefs (void)
   user_pref.prefer_zero_one_indexing = 0;
   user_pref.print_answer_id_name = 0;
   user_pref.print_empty_dimensions = 0;
   user_pref.propagate_empty_matrices = 0;
   user_pref.read_only_constants = 1;
   user_pref.resize_on_range_error = 0;
   user_pref.return_last_computed_value = 0;
   user_pref.save_precision = 0;
+  user_pref.saving_history = 0;
   user_pref.silent_functions = 0;
   user_pref.split_long_rows = 0;
   user_pref.struct_levels_to_print = 0;
   user_pref.suppress_verbose_help_message = 0;
   user_pref.treat_neg_dim_as_zero = 0;
   user_pref.warn_assign_as_truth_value = 0;
   user_pref.warn_comma_in_global_decl = 0;
   user_pref.warn_divide_by_zero = 0;
@@ -404,16 +405,27 @@ return_last_computed_value (void)
 {
   user_pref.return_last_computed_value =
     check_preference ("return_last_computed_value");
 
   return 0;
 }
 
 
+// Should we save command history?
+
+int
+saving_history (void)
+{
+  user_pref.saving_history = check_preference ("saving_history");
+
+  return 0;
+}
+
+
 // Suppress printing results in called functions.
 
 int
 silent_functions (void)
 {
   user_pref.silent_functions =
     check_preference ("silent_functions");
 
