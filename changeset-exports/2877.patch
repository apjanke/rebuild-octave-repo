# HG changeset patch
# User jwe
# Date 861873013 0
#      Thu Apr 24 09:10:13 1997 +0000
# Node ID 5c1b9e545dd1d776c56d6a69aca9b05b080d1a8c
# Parent  b4a9f014a8eac82d3b6959f1056fa238f4a47a18
[project @ 1997-04-24 09:07:39 by jwe]

diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -117,72 +117,72 @@ public:
 
   ~lexical_feedback (void) { }
 
   void init (void);
 
   // Brace level count.
   int braceflag;
 
-  // Nonzero means we're in the middle of defining a loop.
+  // TRUE means we're in the middle of defining a loop.
   int looping;
 
-  // Nonzero means we think we are looking at the beginning of a
+  // TRUE means we think we are looking at the beginning of a
   // function definition.
   bool beginning_of_function;
 
   // Another context hack, this time for the plot command's `using',
   // `title', and `with' keywords.
   bool cant_be_identifier;
 
-  // Nonzero means that we should convert spaces to a comma inside a
+  // TRUE means that we should convert spaces to a comma inside a
   // matrix definition.
   bool convert_spaces_to_comma;
 
-  // Nonzero means we're in the middle of defining a function.
+  // TRUE means we're in the middle of defining a function.
   bool defining_func;
 
-  // Nonzero means we're parsing the return list for a function.
+  // TRUE means we're parsing the return list for a function.
   bool looking_at_return_list;
 
-  // Nonzero means we're parsing the parameter list for a function.
+  // TRUE means we're parsing the parameter list for a function.
   bool looking_at_parameter_list;
 
   // GAG.  Stupid kludge so that [[1,2][3,4]] will work.
   bool do_comma_insert;
 
-  // Nonzero means we think we are looking at a set command.
+  // TRUE means we think we are looking at a set command.
   bool doing_set;
 
-  // Nonzero means we're looking at the range part of a plot command.
+  // TRUE means we're looking at the range part of a plot command.
   bool in_plot_range;
 
-  // Nonzero means we're looking at the using part of a plot command.
+  // TRUE means we're looking at the using part of a plot command.
   bool in_plot_using;
 
-  // Nonzero means we're looking at the style part of a plot command.
+  // TRUE means we're looking at the style part of a plot command.
   bool in_plot_style;
 
-  // Nonzero means we're looking at an indirect reference to a
+  // TRUE means we're looking at an indirect reference to a
   // structure element.
   bool looking_at_indirect_ref;
 
-  // Nonzero means we need to do some extra lookahead to avoid being
-  // screwed by bogus function syntax.
-  bool maybe_screwed;
-
-  // Nonzero means we need to do some extra lookahead to avoid being
+  // TRUE means we need to do some extra lookahead to avoid being
   // screwed by bogus function syntax.
   int maybe_screwed_again;
 
-  // Nonzero means we've seen something that means we must be past the
+  // TRUE means that we've already seen the name of this function.
+  // Should only matter if defining_func is also TRUE.
+  bool parsed_function_name;
+
+  // TRUE means we've seen something that means we must be past the
   // range part of a plot command.
   bool past_plot_range;
 
-  // Nonzero means we're working on a plot command.
+  // TRUE means we're working on a plot command.
   bool plotting;
 
   // Return transpose or start a string?
   bool quote_is_transpose;
 
 private:
 
   lexical_feedback (const lexical_feedback&);
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -567,29 +567,29 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 {EPOW}	{ BIN_OP_RETURN (EPOW, false); }
 ".'"	{ do_comma_insert_check (); BIN_OP_RETURN (TRANSPOSE, true); }
 "++"	{ do_comma_insert_check (); BIN_OP_RETURN (PLUS_PLUS, true); }
 "--"	{ do_comma_insert_check (); BIN_OP_RETURN (MINUS_MINUS, true); }
 "<="	{ BIN_OP_RETURN (EXPR_LE, false); }
 "=="	{ BIN_OP_RETURN (EXPR_EQ, false); }
 {NOTEQ}	{ BIN_OP_RETURN (EXPR_NE, false); }
 ">="	{ BIN_OP_RETURN (EXPR_GE, false); }
+"&"	{ BIN_OP_RETURN (EXPR_AND, false); }
 "|"	{ BIN_OP_RETURN (EXPR_OR, false); }
-"&"	{ BIN_OP_RETURN (EXPR_AND, false); }
 "<"	{ BIN_OP_RETURN (EXPR_LT, false); }
 ">"	{ BIN_OP_RETURN (EXPR_GT, false); }
 "*"	{ BIN_OP_RETURN ('*', false); }
 "/"	{ BIN_OP_RETURN ('/', false); }
 "\\"	{ BIN_OP_RETURN (LEFTDIV, false); }
 ";"	{ BIN_OP_RETURN (';', true); }
 ","	{ BIN_OP_RETURN (',', true); }
 {POW}	{ BIN_OP_RETURN (POW, false); }
 "="	{ BIN_OP_RETURN ('=', true); }
+"&&"	{ BIN_OP_RETURN (EXPR_AND_AND, false); }
 "||"	{ BIN_OP_RETURN (EXPR_OR_OR, false); }
-"&&"	{ BIN_OP_RETURN (EXPR_AND_AND, false); }
 
 {NOT} {
     if (lexer_flags.plotting && ! lexer_flags.in_plot_range)
       lexer_flags.past_plot_range = true;
     BIN_OP_RETURN (EXPR_NOT, false);
   }
 
 "+" { 
@@ -622,16 +622,27 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     do_comma_insert_check ();
     return ')';
   }
 
 "." {
     TOK_RETURN ('.');
   }
 
+"+="	{ BIN_OP_RETURN (ADD_EQ, false); }
+"-="	{ BIN_OP_RETURN (SUB_EQ, false); }
+"*="	{ BIN_OP_RETURN (MUL_EQ, false); }
+"/="	{ BIN_OP_RETURN (DIV_EQ, false); }
+".+="	{ BIN_OP_RETURN (ADD_EQ, false); }
+".-="	{ BIN_OP_RETURN (SUB_EQ, false); }
+".*="	{ BIN_OP_RETURN (EMUL_EQ, false); }
+"./="	{ BIN_OP_RETURN (EDIV_EQ, false); }
+"&="	{ BIN_OP_RETURN (AND_EQ, false); }
+"|="	{ BIN_OP_RETURN (OR_EQ, false); }
+
 %{
 // Unrecognized input is a lexical error.
 %}
 
 . {
     current_input_column++;
 
     error ("invalid character `%s' near line %d, column %d",
@@ -921,17 +932,17 @@ is_plot_keyword (const string& s)
       return CLEAR;
     }
   else
     {
       return 0;
     }
 }
 
-// Handle keywords.  Could probably be more efficient...
+// Handle keywords.
 
 static int
 is_keyword (const string& s)
 {
   if (lexer_flags.plotting && lexer_flags.in_plot_style)
     {
       string sty = plot_style_token (s);
 
@@ -1043,21 +1054,26 @@ is_keyword (const string& s)
 	      else
 		error ("defining new function near line %d",
 		       input_line_number);
 
 	      return LEXICAL_ERROR;
 	    }
 	  else
 	    {
+	      // Prepare for local symbols.
+
 	      tmp_local_sym_tab = new symbol_table ();
-	      curr_sym_tab = tmp_local_sym_tab;
+
+	      promptflag--;
+
 	      lexer_flags.defining_func = true;
-	      promptflag--;
+	      lexer_flags.parsed_function_name = false;
 	      lexer_flags.beginning_of_function = true;
+
 	      if (! (reading_fcn_file || reading_script_file))
 		input_line_number = 1;
 	    }
 	  break;
 
 	default:
 	  panic_impossible ();
 	}
@@ -1763,18 +1779,24 @@ handle_identifier (const string& tok, in
   int c = yyinput ();
   yyunput (c, yytext);
   bool next_tok_is_eq = (c == '=');
   bool next_tok_is_paren = (c == '(');
 
   // Make sure we put the return values of a function in the symbol
   // table that is local to the function.
 
+  // If we are defining a function and we have not seen the function
+  // name yet and the next token is `=', then this identifier must be
+  // the only return value for the function and it belongs in the
+  // local symbol table.
+
   if (next_tok_is_eq
-      && lexer_flags.defining_func && lexer_flags.maybe_screwed)
+      && lexer_flags.defining_func
+      && ! lexer_flags.parsed_function_name)
     curr_sym_tab = tmp_local_sym_tab;
 
   // Kluge alert.
   //
   // If we are looking at a text style function, set up to gobble its
   // arguments.
   //
   // If the following token is `=', or if we are parsing a function
@@ -1806,45 +1828,27 @@ handle_identifier (const string& tok, in
 
   token_stack.push (yylval.tok_val);
 
   // After seeing an identifer, it is ok to convert spaces to a comma
   // (if needed).
 
   lexer_flags.convert_spaces_to_comma = true;
 
-  // If we are defining a function and we have not seen the parameter
-  // list yet and the next token is `=', return a token that
-  // represents the only return value for the function.  For example,
-  //
-  //   function SCREW = f (args);
-  //
-  // The variable maybe_screwed is reset in parse.y.
+  if (! next_tok_is_eq)
+    {
+      lexer_flags.quote_is_transpose = true;
 
-  if (next_tok_is_eq)
-    {
-      current_input_column += yyleng;
-      if (lexer_flags.defining_func && lexer_flags.maybe_screwed)
-	return SCREW;
-      else
-	return NAME;
+      do_comma_insert_check ();
+
+      maybe_unput_comma (spc_gobbled);
     }
 
-  // At this point, we are only dealing with identifiers that are not
-  // followed by `=' (if the next token is `=', there is no need to
-  // check to see if we should insert a comma (invalid syntax), or
-  // allow a following `'' to be treated as a transpose (the next
-  // token is `=', so it can't be `''.
+  current_input_column += yyleng;
 
-  lexer_flags.quote_is_transpose = true;
-  do_comma_insert_check ();
-
-  maybe_unput_comma (spc_gobbled);
-
-  current_input_column += yyleng;
   return NAME;
 }
 
 // Print a warning if a function file that defines a function has
 // anything other than comments and whitespace following the END token
 // that matches the FUNCTION statement.
 
 void
@@ -1900,16 +1904,17 @@ lexical_feedback::init (void)
   braceflag = 0;
 
   // Not initially inside a loop or if statement.
   looping = 0;
 
   // Not initially defining a function.
   beginning_of_function = false;
   defining_func = false;
+  parsed_function_name = false;
 
   // Not parsing a function return or parameter list.
   looking_at_return_list = false;
   looking_at_parameter_list = false;
 
   // Next token can be identifier.
   cant_be_identifier = false;
 
@@ -1925,17 +1930,16 @@ lexical_feedback::init (void)
   in_plot_using = false;
   past_plot_range = false;
   plotting = false;
 
   // Not initially looking at indirect references.
   looking_at_indirect_ref = false;
 
   // Not initially screwed by `function [...] = f (...)' syntax.
-  maybe_screwed = false;
   maybe_screwed_again = 0;
 
   // Quote marks strings intially.
   quote_is_transpose = false;
 }
 
 int
 whitespace_in_literal_matrix (void)
@@ -1955,26 +1959,13 @@ whitespace_in_literal_matrix (void)
 
 void
 symbols_of_lex (void)
 {
   DEFVAR (whitespace_in_literal_matrix, "", 0, whitespace_in_literal_matrix,
     "control auto-insertion of commas and semicolons in literal matrices");
 }
 
-// Maybe someday...
-//
-// "+="		return ADD_EQ;
-// "-="		return SUB_EQ;
-// "*="		return MUL_EQ;
-// "/="		return DIV_EQ;
-// "\\="	return LEFTDIV_EQ;
-// ".+="	return ADD_EQ;
-// ".-="	return SUB_EQ;
-// ".*="	return EMUL_EQ;
-// "./="	return EDIV_EQ;
-// ".\\="	return ELEFTDIV_EQ;
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/oct-iostrm.h b/src/oct-iostrm.h
--- a/src/oct-iostrm.h
+++ b/src/oct-iostrm.h
@@ -18,16 +18,18 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_octave_iostream_h)
 #define octave_octave_iostream_h 1
 
+#include <iostream.h>
+
 #include "oct-stream.h"
 
 class istream;
 class ostream;
 
 class
 octave_base_iostream : public octave_base_stream
 {
diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -22,20 +22,21 @@ Software Foundation, 59 Temple Place - S
 
 #if !defined (octave_oct_obj_h)
 #define octave_oct_obj_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
+class string_vector;
+
 #include <string>
 
 #include "Array.h"
-#include "str-vec.h"
 
 #include "ov.h"
 
 class
 octave_value_list
 {
 public:
 
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -31,16 +31,17 @@ Software Foundation, 59 Temple Place - S
 
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "oct-stream.h"
+#include "oct-obj.h"
 #include "utils.h"
 
 // Possible values for conv_err:
 //
 //   1 : not a real scalar
 //   2 : error extracting scalar value (should not happen)
 //   3 : value is NaN
 //   4 : value is not an integer
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -18,28 +18,31 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_octave_stream_h)
 #define octave_octave_stream_h 1
 
-#include <string>
+class Matrix;
+class string_vector;
+class octave_value;
+class octave_value_list;
 
-#include <iostream.h>
-#include <strstream.h>
+class istream;
+class ostream;
+class ostrstream;
+
+#include <string>
 
 #include "Array.h"
 #include "data-conv.h"
 #include "mach-info.h"
 
-#include "oct-obj.h"
-#include "str-vec.h"
-
 struct
 scanf_format_elt
 {
   scanf_format_elt (const char *txt = 0, int w = 0, bool d = false,
 		    char typ = '\0', char mod = '\0')
     : text (txt), width (w), discard (d), type (typ), modifier (mod) { }
 
   ~scanf_format_elt (void) { delete text; }
