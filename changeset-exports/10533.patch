# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1271683909 -7200
#      Mon Apr 19 15:31:49 2010 +0200
# Node ID f094ac9bc93e5f8cae4b0e5323acbeef5056651e
# Parent  568c7c041facce27789bba29a9a3d1a38ea7708f
reuse Array<T>::cat and Sparse<T>::cat in cat/horzcat/vertcat

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2604,30 +2604,38 @@ Array<T>::cat (int dim, octave_idx_type 
 
   dim_vector dv;
   for (octave_idx_type i = 0; i < n; i++)
     if (! dv.concat (array_list[i].dims (), dim))
       (*current_liboctave_error_handler)
         ("cat: dimension mismatch");
 
   Array<T> retval (dv);
-  Array<idx_vector> idxa (dv.length (), 1, idx_vector::colon);
+  int nidx = std::max (dv.length (), dim + 1);
+  Array<idx_vector> idxa (nidx, 1, idx_vector::colon);
   octave_idx_type l = 0;
 
   for (octave_idx_type i = 0; i < n; i++)
     {
+      if (array_list[i].dims ().zero_by_zero ())
+        continue;
+
+      octave_quit ();
+
       octave_idx_type u;
       if (dim < array_list[i].ndims ())
         u = l + array_list[i].dims ()(dim);
       else
         u = l + 1;
 
       idxa(dim) = idx_vector (l, u);
 
       retval.assign (idxa, array_list[i]);
+
+      l = u;
     }
 
   return retval;
 }
 
 template <class T>
 void
 Array<T>::print_info (std::ostream& os, const std::string& prefix) const
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2010-04-19  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.cc (Array<T>::cat): Miscellaneous fixes.
+	* Sparse.cc (Sparse<T>::cat): Ditto.
+
 2010-04-18  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.cc (Array<T>::cat): New method.
 	* Array.h: Declare it.
 	* Sparse.cc (Sparse<T>::cat): New method.
 	* Sparse.h: Declare it.
 
 2010-04-16  David Bateman  <dbateman@free.fr>
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -2397,22 +2397,27 @@ Sparse<T>::cat (int dim, octave_idx_type
 
   switch (dim)
     {
     case 0:
       {
         // sparse vertcat. This is not efficiently handled by assignment, so
         // we'll do it directly.
         octave_idx_type l = 0;
-        for (octave_idx_type j = 0; j < n; j++)
+        for (octave_idx_type j = 0; j < dv(1); j++)
           {
+            octave_quit ();
+
             octave_idx_type rcum = 0;
             for (octave_idx_type i = 0; i < n; i++)
               {
                 const Sparse<T>& spi = sparse_list[i];
+                if (spi.dims ().zero_by_zero ())
+                  continue;
+
                 octave_idx_type kl = spi.cidx(j), ku = spi.cidx(j+1);
                 for (octave_idx_type k = kl; k < ku; k++, l++)
                   {
                     retval.xridx(l) = spi.ridx(k) + rcum;
                     retval.xdata(l) = spi.data(k);
                   }
 
                 rcum += spi.rows ();
@@ -2420,22 +2425,24 @@ Sparse<T>::cat (int dim, octave_idx_type
 
             retval.xcidx(j+1) = l;
           }
 
         break;
       }
     case 1:
       {
-        octave_idx_type ccum = 0;
+        octave_idx_type l = 0;
         for (octave_idx_type i = 0; i < n; i++)
           {
-            octave_idx_type l = ccum, u = ccum + sparse_list[i].columns ();
+            octave_quit ();
+
+            octave_idx_type u = l + sparse_list[i].columns ();
             retval.assign (idx_vector::colon, idx_vector (l, u), sparse_list[i]);
-            ccum = u;
+            l = u;
           }
 
         break;
       }
     default:
       (*current_liboctave_error_handler)
         ("cat: invalid dimension for sparse concatenation");
     }
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2010-04-19  Jaroslav Hajek  <highegg@gmail.com>
+
+	* data.cc (single_type_concat, do_single_type_concat): Rewrite using
+	new liboctave facilities.
+	(do_cat): Don't compute result dims if the case can be forwarded to
+	liboctave.
+
 2010-04-13  David Bateman  <dbateman@free.fr>
 
 	* graphics.cc (void text::properties::update_text_extent (void)):
 	Don't call text_renderer.set_font if HAVE_FONTCONFIG is not set.
 
 2010-04-13  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/regexp.cc (octregexp_list): Handle repeated matches
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1340,60 +1340,68 @@ omitted, it defaults to the first non-si
 %!assert (prod (zeros (2, 0, 'single'), 1), zeros (1, 0, 'single'));
 %!assert (prod (zeros (2, 0, 'single'), 2), single([1; 1]));
 %!assert (prod (zeros (0, 2, 'single')), single([1, 1]));
 %!assert (prod (zeros (0, 2, 'single'), 1), single([1, 1]));
 %!assert (prod (zeros (0, 2, 'single'), 2), zeros(0, 1, 'single'));
 
  */
 
-template<class TYPE>
+template <class TYPE, class T>
 static void 
-single_type_concat (TYPE& result,
+single_type_concat (Array<T>& result,
+                    const octave_value_list& args,
+                    int dim)
+{
+  int n_args = args.length ();
+  OCTAVE_LOCAL_BUFFER (Array<T>, array_list, n_args - 1);
+
+  for (int j = 1; j < n_args && ! error_state; j++)
+    {
+      octave_quit ();
+
+      array_list[j-1] = octave_value_extract<TYPE> (args(j));
+    }
+
+  if (! error_state)
+    result = Array<T>::cat (dim, n_args-1, array_list);
+}
+
+template <class TYPE, class T>
+static void 
+single_type_concat (Sparse<T>& result,
                     const octave_value_list& args,
                     int dim)
 {
-  int dv_len = result.ndims (), n_args = args.length ();
-  Array<octave_idx_type> ra_idx (dv_len, 1, 0);
-
-  for (int j = 1; j < n_args; j++)
+  int n_args = args.length ();
+  OCTAVE_LOCAL_BUFFER (Sparse<T>, sparse_list, n_args-1);
+
+  for (int j = 1; j < n_args && ! error_state; j++)
     {
       octave_quit ();
 
-      TYPE ra = octave_value_extract<TYPE> (args(j));
-      dim_vector dvra = ra.dims ();
-      if (error_state)
-        break;
-
-      if (dvra.zero_by_zero ())
-        continue;
-
-      result.insert (ra, ra_idx);
-
-      if (error_state)
-        break;
-
-      ra_idx (dim) += (dim < dvra.length () ? dvra(dim) : 1);
+      sparse_list[j-1] = octave_value_extract<TYPE> (args(j));
     }
+
+  if (! error_state)
+    result = Sparse<T>::cat (dim, n_args-1, sparse_list);
 }
 
+// Dispatcher.
 template<class TYPE>
-static octave_value 
-do_single_type_concat (const dim_vector& dv,
-                       const octave_value_list& args,
-                       int dim)
+static TYPE 
+do_single_type_concat (const octave_value_list& args, int dim)
 {
-  TYPE result (dv);
-
-  single_type_concat (result, args, dim);
+  TYPE result;
+
+  single_type_concat<TYPE, typename TYPE::element_type> (result, args, dim);
 
   return result;
 }
 
-
 static octave_value
 do_cat (const octave_value_list& args, std::string fname)
 {
   octave_value retval;
 
   int n_args = args.length (); 
 
   if (n_args == 1)
@@ -1408,36 +1416,25 @@ do_cat (const octave_value_list& args, s
         {
           error ("cat: expecting first argument to be a integer");
           return retval;
         }
   
       if (dim >= 0)
         {
           
-          dim_vector  dv = args(1).dims ();
           std::string result_type = args(1).class_name ();
           
           bool all_sq_strings_p = args(1).is_sq_string ();
           bool all_dq_strings_p = args(1).is_dq_string ();
           bool all_real_p = args(1).is_real_type ();
           bool any_sparse_p = args(1).is_sparse_type();
 
           for (int i = 2; i < args.length (); i++)
             {
-              // add_dims constructs a dimension vector which holds the
-              // dimensions of the final array after concatenation.
-
-              if (! dv.concat (args(i).dims (), dim))
-                {
-                  // Dimensions do not match. 
-                  error ("cat: dimension mismatch");
-                  return retval;
-                }
-              
               result_type = 
                 get_concat_class (result_type, args(i).class_name ());
 
               if (all_sq_strings_p && ! args(i).is_sq_string ())
                 all_sq_strings_p = false;
               if (all_dq_strings_p && ! args(i).is_dq_string ())
                 all_dq_strings_p = false;
               if (all_real_p && ! args(i).is_real_type ())
@@ -1446,72 +1443,82 @@ do_cat (const octave_value_list& args, s
                 any_sparse_p = true;
             }
 
           if (result_type == "double")
             {
               if (any_sparse_p)
                 {           
                   if (all_real_p)
-                    retval = do_single_type_concat<SparseMatrix> (dv, args, dim);
+                    retval = do_single_type_concat<SparseMatrix> (args, dim);
                   else
-                    retval = do_single_type_concat<SparseComplexMatrix> (dv, args, dim);
+                    retval = do_single_type_concat<SparseComplexMatrix> (args, dim);
                 }
               else
                 {
                   if (all_real_p)
-                    retval = do_single_type_concat<NDArray> (dv, args, dim);
+                    retval = do_single_type_concat<NDArray> (args, dim);
                   else
-                    retval = do_single_type_concat<ComplexNDArray> (dv, args, dim);
+                    retval = do_single_type_concat<ComplexNDArray> (args, dim);
                 }
             }
           else if (result_type == "single")
             {
               if (all_real_p)
-                retval = do_single_type_concat<FloatNDArray> (dv, args, dim);
+                retval = do_single_type_concat<FloatNDArray> (args, dim);
               else
-                retval = do_single_type_concat<FloatComplexNDArray> (dv, args, dim);
+                retval = do_single_type_concat<FloatComplexNDArray> (args, dim);
             }
           else if (result_type == "char")
             {
               char type = all_dq_strings_p ? '"' : '\'';
 
               maybe_warn_string_concat (all_dq_strings_p, all_sq_strings_p);
 
-              charNDArray result (dv, Vstring_fill_char);
-
-              single_type_concat<charNDArray> (result, args, dim);
+              charNDArray result =  do_single_type_concat<charNDArray> (args, dim);
 
               retval = octave_value (result, type);
             }
           else if (result_type == "logical")
             {
               if (any_sparse_p)
-                retval = do_single_type_concat<SparseBoolMatrix> (dv, args, dim);
+                retval = do_single_type_concat<SparseBoolMatrix> (args, dim);
               else
-                retval = do_single_type_concat<boolNDArray> (dv, args, dim);
+                retval = do_single_type_concat<boolNDArray> (args, dim);
             }
           else if (result_type == "int8")
-            retval = do_single_type_concat<int8NDArray> (dv, args, dim);
+            retval = do_single_type_concat<int8NDArray> (args, dim);
           else if (result_type == "int16")
-            retval = do_single_type_concat<int16NDArray> (dv, args, dim);
+            retval = do_single_type_concat<int16NDArray> (args, dim);
           else if (result_type == "int32")
-            retval = do_single_type_concat<int32NDArray> (dv, args, dim);
+            retval = do_single_type_concat<int32NDArray> (args, dim);
           else if (result_type == "int64")
-            retval = do_single_type_concat<int64NDArray> (dv, args, dim);
+            retval = do_single_type_concat<int64NDArray> (args, dim);
           else if (result_type == "uint8")
-            retval = do_single_type_concat<uint8NDArray> (dv, args, dim);
+            retval = do_single_type_concat<uint8NDArray> (args, dim);
           else if (result_type == "uint16")
-            retval = do_single_type_concat<uint16NDArray> (dv, args, dim);
+            retval = do_single_type_concat<uint16NDArray> (args, dim);
           else if (result_type == "uint32")
-            retval = do_single_type_concat<uint32NDArray> (dv, args, dim);
+            retval = do_single_type_concat<uint32NDArray> (args, dim);
           else if (result_type == "uint64")
-            retval = do_single_type_concat<uint64NDArray> (dv, args, dim);
+            retval = do_single_type_concat<uint64NDArray> (args, dim);
           else
             {
+              dim_vector  dv = args(1).dims ();
+
+              for (int i = 2; i < args.length (); i++)
+                {
+                  if (! dv.concat (args(i).dims (), dim))
+                    {
+                      // Dimensions do not match. 
+                      error ("cat: dimension mismatch");
+                      return retval;
+                    }
+                }
+              
               // The lines below might seem crazy, since we take a copy
               // of the first argument, resize it to be empty and then resize
               // it to be full. This is done since it means that there is no
               // recopying of data, as would happen if we used a single resize.
               // It should be noted that resize operation is also significantly 
               // slower than the do_cat_op function, so it makes sense to have
               // an empty matrix and copy all data.
               //
