# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1204939074 18000
#      Fri Mar 07 20:17:54 2008 -0500
# Node ID 85da2ab0c6fd626a891fdcb9185ba2d80f96ca0e
# Parent  c01ff6818f4c40a0f22fa7ab7a5cad482c854dc5
logical indexing compatibility fixes

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2008-03-07  John W. Eaton  <jwe@octave.org>
+
+	* idx-vector.cc (IDX_VEC_REP::idx_vector_rep (bool),
+	IDX_VEC_REP::idx_vector_rep (const boolNDArray&)):
+	Simply perform the equivalent of "find" on the bool argument here,
+	set one_zero to 0 and orig_dims to size of resulting index vector.
+	(IDX_VEC_REP::freeze): Don't call maybe_convert_one_zero_to_idx here.
+
 2008-03-05  Jaroslav Hajek <highegg@gmail.com>
 
 	* dbleQR.cc (QR::insert_col, QR::insert_row, 
 	QR::delete_col, QR::delete_row): Use 0-based indexing.
 	* CmplxQR.cc (ComplexQR::insert_col, ComplexQR::insert_row, 
 	ComplexQR::delete_col, ComplexQR::delete_row): Likewise.
 
 	* dbleCHOL.cc: Small doc and declaration fixes.
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -244,51 +244,61 @@ IDX_VEC_REP::idx_vector_rep (char c)
     colon_equiv (0), orig_dims (0, 0)
 {
   assert (c == ':');
 
   init_state ();
 }
 
 IDX_VEC_REP::idx_vector_rep (bool b)
-  : data (0), len (1), num_zeros (0), num_ones (0), range_base (0),
+  : data (0), len (b ? 1 : 0), num_zeros (0), num_ones (0), range_base (0),
     range_step (0), max_val (0), min_val (0), count (1),
     frozen_at_z_len (0), frozen_len (0), colon (0), range(0),
-    one_zero (1), initialized (0), frozen (0), colon_equiv_checked (0),
-    colon_equiv (0), orig_dims (1, 1)
+    one_zero (0), initialized (0), frozen (0), colon_equiv_checked (0),
+    colon_equiv (0), orig_dims (len, len)
 {
-  data = new octave_idx_type [len];
-
-  data[0] = tree_to_mat_idx (b);
-
-  init_state ();
+  if (len == 0)
+    initialized = 1;
+  else
+    {
+      data = new octave_idx_type [len];
+      data[0] = 0;
+      init_state ();
+    }
 }
 
 IDX_VEC_REP::idx_vector_rep (const boolNDArray& bnda)
-  : data (0), len (bnda.length ()), num_zeros (0), num_ones (0),
+  : data (0), len (bnda.nnz ()), num_zeros (0), num_ones (0),
     range_base (0), range_step (0), max_val (0), min_val (0),
     count (1), frozen_at_z_len (0), frozen_len (0), colon (0),
-    range(0), one_zero (1), initialized (0), frozen (0),
-    colon_equiv_checked (0), colon_equiv (0), orig_dims (bnda.dims ())
+    range(0), one_zero (0), initialized (0), frozen (0),
+    colon_equiv_checked (0), colon_equiv (0), orig_dims ()
 {
   if (len == 0)
     {
+      orig_dims = dim_vector (0, 0);
       initialized = 1;
-      return;
     }
   else
     {
-      octave_idx_type k = 0;
       data = new octave_idx_type [len];
 
-      for (octave_idx_type i = 0; i < len; i++)
-	data[k++] = tree_to_mat_idx (bnda.elem (i));
+      octave_idx_type ntot = bnda.length ();
+
+      for (octave_idx_type i = 0, k = 0; i < ntot; i++, k < len)
+	if (bnda.elem (i))
+	  data[k++] = i;
+
+      dim_vector dv = bnda.dims ();
+
+      orig_dims = ((dv.length () == 2 && dv(0) == 1)
+		   ? dim_vector (1, len) : orig_dims = dim_vector (len, 1));
+
+      init_state ();
     }
-
-  init_state ();
 }
 
 IDX_VEC_REP&
 IDX_VEC_REP::operator = (const IDX_VEC_REP& a)
 {
   if (this != &a)
     {
       delete [] data;
@@ -595,18 +605,16 @@ IDX_VEC_REP::freeze (octave_idx_type z_l
   if (colon)
     frozen_len = z_len;
   else
     {
       if (len == 0)
 	frozen_len = 0;
       else
 	{
-	  maybe_convert_one_zero_to_idx (z_len);
-
 	  max_val = max ();
 	  min_val = min ();
 
 	  if (min_val < 0)
 	    {
 	      if (tag)
 		(*current_liboctave_error_handler)
 		  ("invalid %s index = %d", tag, min_val+1);
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,13 @@
+2008-03-07  John W. Eaton  <jwe@octave.org>
+
+	* test_logical-wfi-t.m, test_logical-wfi-f.m: Update tests for
+	logical indexing bug fix.
+
 2008-03-06  John W. Eaton  <jwe@octave.org>
 
 	* test_eval.m, test_diffeq.m, test_quad.m, test_signal.m:
 	Delete files with no tests.
 
 2008-02-25  Ben Abbott <bpabbott@mac.com>
 
 	* test_eval-catch.m, test_io.m, test_try.m: Use cstrcat instead of
diff --git a/test/test_logical-wfi-f.m b/test/test_logical-wfi-f.m
--- a/test/test_logical-wfi-f.m
+++ b/test/test_logical-wfi-f.m
@@ -41,18 +41,19 @@
 %! a = 2;
 %! assert(a(1) == 2);
 %! warning ("wfi.state", "Octave:fortran-indexing");
 
 %% test/octave.test/logical-wfi-f/s-4.m
 %!test
 %! wfi = warning ("query", "Octave:fortran-indexing");
 %! warning ("off", "Octave:fortran-indexing");
-%! a = 2;
-%! assert(all (a(logical ([1,1])) == [2,2]));
+%!shared a
+%!  a = 2;
+%!error <invalid vector index> a(logical ([1,1]));
 %! warning ("wfi.state", "Octave:fortran-indexing");
 
 %% test/octave.test/logical-wfi-f/v-1.m
 %!test
 %! wfi = warning ("query", "Octave:fortran-indexing");
 %! warning ("off", "Octave:fortran-indexing");
 %! a = [9,8,7,6];
 %! assert(isempty (a(logical ([0,0,0,0]))));
@@ -74,41 +75,41 @@
 %! assert(all (a(logical ([0,1,1,0])) == [8,7]));
 %! warning ("wfi.state", "Octave:fortran-indexing");
 
 %% test/octave.test/logical-wfi-f/v-4.m
 %!test
 %! wfi = warning ("query", "Octave:fortran-indexing");
 %! warning ("off", "Octave:fortran-indexing");
 %! a = [9,8,7,6];
-%! assert(all (a(logical ([1,1])) == [9,9]));
+%! assert(all (a(logical ([1,1])) == [9,8]));
 %! warning ("wfi.state", "Octave:fortran-indexing");
 
 %% test/octave.test/logical-wfi-f/m-1.m
 %!test
 %! wfi = warning ("query", "Octave:fortran-indexing");
 %! warning ("off", "Octave:fortran-indexing");
 %! a = [9,8;7,6];
 %! assert(isempty (a(logical ([0,0,0,0]))));
 %! warning ("wfi.state", "Octave:fortran-indexing");
 
 %% test/octave.test/logical-wfi-f/m-2.m
 %!test
 %! wfi = warning ("query", "Octave:fortran-indexing");
 %! warning ("off", "Octave:fortran-indexing");
 %! a = [9,8;7,6];
-%! assert(all (a(logical ([1,1,1,1])) == [9;7;8;6]));
+%! assert(all (a(logical ([1,1,1,1])) == [9,7,8,6]));
 %! warning ("wfi.state", "Octave:fortran-indexing");
 
 %% test/octave.test/logical-wfi-f/m-3.m
 %!test
 %! wfi = warning ("query", "Octave:fortran-indexing");
 %! warning ("off", "Octave:fortran-indexing");
 %! a = [9,8;7,6];
-%! assert(all (a(logical ([0,1,1,0])) == [7;8]));
+%! assert(all (a(logical ([0,1,1,0])) == [7,8]));
 %! warning ("wfi.state", "Octave:fortran-indexing");
 
 %% test/octave.test/logical-wfi-f/m-4.m
 %!test
 %! wfi = warning ("query", "Octave:fortran-indexing");
 %! warning ("off", "Octave:fortran-indexing");
 %! a = [9,8;7,6];
 %! assert(a(logical (0:1),logical (0:1)) == 6);
diff --git a/test/test_logical-wfi-t.m b/test/test_logical-wfi-t.m
--- a/test/test_logical-wfi-t.m
+++ b/test/test_logical-wfi-t.m
@@ -41,18 +41,19 @@
 %! a = 2;
 %! assert(a(1) == 2);
 %! warning ("wfi.state", "Octave:fortran-indexing");
 
 %% test/octave.test/logical-wfi-t/s-4.m
 %!test
 %! wfi = warning ("query", "Octave:fortran-indexing");
 %! warning ("on", "Octave:fortran-indexing");
+%!shared a
 %! a = 2;
-%! assert(all (a(logical ([1,1])) == [2,2]));
+%!error <invalid vector index.*> a(logical ([1,1]));
 %! warning ("wfi.state", "Octave:fortran-indexing");
 
 %% test/octave.test/logical-wfi-t/v-1.m
 %!test
 %! wfi = warning ("query", "Octave:fortran-indexing");
 %! warning ("on", "Octave:fortran-indexing");
 %! a = [9,8,7,6];
 %! assert(isempty (a(logical ([0,0,0,0]))));
@@ -74,41 +75,41 @@
 %! assert(all (a(logical ([0,1,1,0])) == [8,7]));
 %! warning ("wfi.state", "Octave:fortran-indexing");
 
 %% test/octave.test/logical-wfi-t/v-4.m
 %!test
 %! wfi = warning ("query", "Octave:fortran-indexing");
 %! warning ("on", "Octave:fortran-indexing");
 %! a = [9,8,7,6];
-%! assert(all (a(logical ([1,1])) == [9,9]));
+%! assert(all (a(logical ([1,1])) == [9,8]));
 %! warning ("wfi.state", "Octave:fortran-indexing");
 
 %% test/octave.test/logical-wfi-t/m-1.m
 %!test
 %! wfi = warning ("query", "Octave:fortran-indexing");
 %! warning ("on", "Octave:fortran-indexing");
 %! a = [9,8;7,6];
 %! isempty (a(logical ([0,0,0,0])));
 %! warning ("wfi.state", "Octave:fortran-indexing");
 
 %% test/octave.test/logical-wfi-t/m-2.m
 %!test
 %! wfi = warning ("query", "Octave:fortran-indexing");
 %! warning ("on", "Octave:fortran-indexing");
 %! a = [9,8;7,6];
-%! all (a(logical ([1,1,1,1])) == [9;7;8;6]);
+%! all (a(logical ([1,1,1,1])) == [9,7,8,6]);
 %! warning ("wfi.state", "Octave:fortran-indexing");
 
 %% test/octave.test/logical-wfi-t/m-3.m
 %!test
 %! wfi = warning ("query", "Octave:fortran-indexing");
 %! warning ("on", "Octave:fortran-indexing");
 %! a = [9,8;7,6];
-%! all (a(logical ([0,1,1,0])) == [7;8]);
+%! all (a(logical ([0,1,1,0])) == [7,8]);
 %! warning ("wfi.state", "Octave:fortran-indexing");
 
 %% test/octave.test/logical-wfi-t/m-4.m
 %!test
 %! wfi = warning ("query", "Octave:fortran-indexing");
 %! warning ("on", "Octave:fortran-indexing");
 %! a = [9,8;7,6];
 %! assert(a(logical (0:1),logical (0:1)) == 6);
