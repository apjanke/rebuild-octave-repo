# HG changeset patch
# User Ben Abbott  <bpabbott@mac.com>
# Date 1297381716 18000
#      Thu Feb 10 18:48:36 2011 -0500
# Node ID a754c2d8a13fa8b59db4ef4a062daa9bf6aae5fd
# Parent  0f21f258aa177a225e29ec12097931ffa7c1fa1d
Modify demo scripts to allow conventient conversion to Matlab compatible syntax.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2011-02-10  Ben Abbott <bpabbott@mac.com>
+
+	* plot/legend.m, plot/plotyy.m, plot/sombrero.m, plot/shading.m, 
+	plot/text.m: Modify demo scripts to allow conventient conversion
+	to Matlab compatible syntax.
+
 2011-02-08  Ben Abbott  <bpabbott@mac.com>
 
 	* plot/__go_draw_axes__.m: Properly set fontspec for legends.
 
 2011-02-08  John W. Eaton  <jwe@octave.org>
 
 	* deprecated/complement.m, deprecated/create_set.m,
 	deprecated/dmult.m, deprecated/iscommand.m,
diff --git a/scripts/plot/legend.m b/scripts/plot/legend.m
--- a/scripts/plot/legend.m
+++ b/scripts/plot/legend.m
@@ -1036,33 +1036,35 @@ endfunction
 %! clf
 %! plot(1:10, 1:10);
 %! title("a very long label can sometimes cause problems");
 %! legend("hello world", "location", "northeastoutside");
 
 %!demo
 %! clf
 %! labels = {};
+%! colororder = get (gca, "colororder");
 %! for i = 1:5
 %!   h = plot(1:100, i + rand(100,1)); hold on;
-%!   set (h, "color", get (gca, "colororder")(i,:))
+%!   set (h, "color", colororder(i,:))
 %!   labels = {labels{:}, cstrcat("Signal ", num2str(i))};
 %! endfor
 %! hold off;
 %! title("Signals with random offset and uniform noise")
 %! xlabel("Sample Nr [k]"); ylabel("Amplitude [V]");
 %! legend(labels, "location", "southoutside");
 %! legend("boxon");
 
 %!demo
 %! clf
 %! labels = {};
+%! colororder = get (gca, "colororder");
 %! for i = 1:5
 %!   h = plot(1:100, i + rand(100,1)); hold on;
-%!   set (h, "color", get (gca, "colororder")(i,:))
+%!   set (h, "color", colororder(i,:))
 %!   labels = {labels{:}, cstrcat("Signal ", num2str(i))};
 %! endfor
 %! hold off;
 %! title("Signals with random offset and uniform noise")
 %! xlabel("Sample Nr [k]"); ylabel("Amplitude [V]");
 %! legend(labels{:}, "location", "southoutside")
 %! legend("boxon")
 
diff --git a/scripts/plot/plotyy.m b/scripts/plot/plotyy.m
--- a/scripts/plot/plotyy.m
+++ b/scripts/plot/plotyy.m
@@ -217,20 +217,20 @@ endfunction
 %! x = 0:0.1:2*pi;
 %! y1 = sin (x);
 %! y2 = exp (x - 1);
 %! ax = plotyy (x, y1, x - 1, y2, @plot, @semilogy);
 %! xlabel ("X");
 %! ylabel (ax(1), "Axis 1");
 %! ylabel (ax(2), "Axis 2");
 %! axes (ax(1))
-%! text (0.5, 0.5, "Left Axis",
+%! text (0.5, 0.5, "Left Axis", ...
 %!       "color", [0 0 1], "horizontalalignment", "center")
 %! axes (ax(2))
-%! text (4.5, 80, "Right Axis",
+%! text (4.5, 80, "Right Axis", ...
 %!       "color", [0 0.5 0], "horizontalalignment", "center")
 
 %!demo
 %! clf
 %! x = linspace (-1, 1, 201);
 %! subplot (2, 2, 1)
 %! plotyy (x, sin(pi*x), x, 10*cos(pi*x))
 %! subplot (2, 2, 2)
diff --git a/scripts/plot/shading.m b/scripts/plot/shading.m
--- a/scripts/plot/shading.m
+++ b/scripts/plot/shading.m
@@ -73,24 +73,24 @@ function shading (varargin)
 
 endfunction
 
 %!demo
 %! clf
 %! colormap (jet)
 %! sombrero
 %! shading faceted
-%! title('shading "faceted"')
+%! title("shading ""faceted""")
 
 %!demo
 %! sombrero
 %! shading interp
-%! title('shading "interp"')
+%! title("shading ""interp""")
 
 %!demo
 %! pcolor (peaks ())
 %! shading faceted
-%! title('shading "faceted"')
+%! title("shading ""faceted""")
 
 %!demo
 %! pcolor (peaks ())
 %! shading interp
-%! title('shading "interp"')
+%! title("shading ""interp""")
diff --git a/scripts/plot/sombrero.m b/scripts/plot/sombrero.m
--- a/scripts/plot/sombrero.m
+++ b/scripts/plot/sombrero.m
@@ -34,17 +34,18 @@
 function [x, y, z] = sombrero (n)
 
   if (nargin == 0)
     n = 41;
   endif
 
   if (nargin < 2)
     if (n > 1)
-      tx = ty = linspace (-8, 8, n)';
+      tx = linspace (-8, 8, n)';
+      ty = tx;
       [xx, yy] = meshgrid (tx, ty);
       r = sqrt (xx .^ 2 + yy .^ 2) + eps;
       tz = sin (r) ./ r;
       if (nargout == 0)
         surf (tx, ty, tz);
         box ("off");
       else
         x = tx;
diff --git a/scripts/plot/text.m b/scripts/plot/text.m
--- a/scripts/plot/text.m
+++ b/scripts/plot/text.m
@@ -103,42 +103,42 @@ function h = text (varargin)
   endif
 
 endfunction
 
 %!demo
 %! clf
 %! ha = {"left", "center", "right"};
 %! va = {"bottom", "middle", "top"};
+%! x = [0.25 0.5 0.75];
+%! y = [0.25 0.5 0.75];
 %! for t = 0:30:359;
 %!   for nh = 1:numel(ha)
-%!     x = [0.25 0.5 0.75](nh);
 %!     for nv = 1:numel(va)
-%!       y = [0.25 0.5 0.75](nv);
-%!       text (x, y, "Hello World",
-%!                   "rotation", t,
-%!                   "horizontalalignment", ha{nh},
-%!                   "verticalalignment", va{nv})
+%!       text (x(nh), y(nv), "Hello World", ...
+%!             "rotation", t, ...
+%!             "horizontalalignment", ha{nh}, ...
+%!             "verticalalignment", va{nv})
 %!     endfor
 %!   endfor
 %! endfor
-%! set (gca, "xtick", [0.25, 0.5, 0.75],
-%!           "xticklabel", ha,
-%!           "ytick", [0.25, 0.5, 0.75],
+%! set (gca, "xtick", [0.25, 0.5, 0.75], ...
+%!           "xticklabel", ha, ...
+%!           "ytick", [0.25, 0.5, 0.75], ...
 %!           "yticklabel", va)
 %! axis ([0 1 0 1])
 %! xlabel ("horizontal alignment")
 %! ylabel ("vertical alignment")
 %! title ("text alignment and rotation (0:30:360 degrees)")
 
 %!demo
 %! clf
-%! h = mesh (peaks, "edgecolor", 0.7 * [1 1 1],
-%!                  "facecolor", "none",
+%! h = mesh (peaks, "edgecolor", 0.7 * [1 1 1], ...
+%!                  "facecolor", "none", ...
 %!                  "facealpha", 0);
 %! for t = 0:45:359;
-%!   text (25, 25, 0, "Vertical Alignment = Bottom",
-%!                    "rotation", t,
-%!                    "horizontalalignment", "left",
+%!   text (25, 25, 0, "Vertical Alignment = Bottom", ...
+%!                    "rotation", t, ...
+%!                    "horizontalalignment", "left", ...
 %!                    "verticalalignment", "bottom")
 %! endfor
 %! caxis ([-100 100])
 %! title ("Vertically Aligned at Bottom")
