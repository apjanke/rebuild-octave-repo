# HG changeset patch
# User jwe
# Date 1095727457 0
#      Tue Sep 21 00:44:17 2004 +0000
# Node ID 000cfedea91ca37ab7b57498771d0f4af343d51e
# Parent  c2bb27ada496b190db379ffafdeab1dc46cded33
[project @ 2004-09-21 00:44:17 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2004-09-17 David Bateman <dbateman@free.fr>
+
+	* DLD-FUNCTIONS/sort.cc (ascending_compare, descending_compare):
+	Now templates (avoids g++ 3.4.x compile problems).
+	Fix other uses of these functions to also treat them as templates.
+	(mx_sort): For unsigned EIGHT_BYTE_INT versions correct the test 
+	for the position of NaN.  Problems when mode was DESCENDING or
+	UNDEFINED.  Use static_cast<unsigned int> (dim) rather than 
+	(unsigned int) dim.
+	(IFloatFlip): Now static.
+
 2004-09-17  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/det.cc (Fdet): Only compute estimate of the
 	condition number if requested as output.
 
 	* DLD-FUNCTIONS/schur.cc (Fschur): Only compute unitary matrix if
 	requested as output.
 
diff --git a/src/DLD-FUNCTIONS/sort.cc b/src/DLD-FUNCTIONS/sort.cc
--- a/src/DLD-FUNCTIONS/sort.cc
+++ b/src/DLD-FUNCTIONS/sort.cc
@@ -45,16 +45,44 @@ class
 vec_index
 {
 public:
   T vec;
   int indx;
 };
 
 template <class T>
+bool 
+ascending_compare (T a, T b)
+{
+  return (a < b);
+}
+
+template <class T>
+bool 
+descending_compare (T a, T b)
+{
+  return (a > b);
+}
+
+template <class T>
+bool 
+ascending_compare (vec_index<T> *a, vec_index<T> *b)
+{
+  return (a->vec < b->vec);
+}
+
+template <class T>
+bool 
+descending_compare (vec_index<T> *a, vec_index<T> *b)
+{
+  return (a->vec > b->vec);
+}
+
+template <class T>
 static octave_value
 mx_sort (ArrayN<T> &m, int dim, sortmode mode = UNDEFINED)
 {
   octave_value retval;
 
   if (m.length () < 1)
     return retval;
 
@@ -209,45 +237,49 @@ static inline unsigned EIGHT_BYTE_INT
 FloatFlip (unsigned EIGHT_BYTE_INT f)
 {
   unsigned EIGHT_BYTE_INT mask
     = -(EIGHT_BYTE_INT)(f >> 63) | 0x8000000000000000ULL;
 
   return f ^ mask;
 }
 
-inline unsigned EIGHT_BYTE_INT
+static inline unsigned EIGHT_BYTE_INT
 IFloatFlip (unsigned EIGHT_BYTE_INT f)
 {
   unsigned EIGHT_BYTE_INT mask = ((f >> 63) - 1) | 0x8000000000000000ULL;
 
   return f ^ mask;
 }
 
+template <>
 bool
 ascending_compare (unsigned EIGHT_BYTE_INT a, 
 		   unsigned EIGHT_BYTE_INT b)
 {
   return (a < b);
 }
 
+template <>
 bool
 ascending_compare (vec_index<unsigned EIGHT_BYTE_INT> *a, 
 		   vec_index<unsigned EIGHT_BYTE_INT> *b)
 {
   return (a->vec < b->vec);
 }
 
+template <>
 bool
 descending_compare (unsigned EIGHT_BYTE_INT a, 
 		    unsigned EIGHT_BYTE_INT b)
 {
   return (a > b);
 }
 
+template <>
 bool
 descending_compare (vec_index<unsigned EIGHT_BYTE_INT> *a, 
 		    vec_index<unsigned EIGHT_BYTE_INT> *b)
 {
   return (a->vec > b->vec);
 }
 
 template class octave_sort<unsigned EIGHT_BYTE_INT>;
@@ -262,17 +294,17 @@ mx_sort (ArrayN<double> &m, int dim, sor
 
   if (m.length () < 1)
     return retval;
 
   dim_vector dv = m.dims ();
   unsigned int ns = dv(dim);
   unsigned int iter = dv.numel () / ns;
   unsigned int stride = 1;
-  for (unsigned int i = 0; i < (unsigned int)dim; i++)
+  for (unsigned int i = 0; i < static_cast<unsigned int> (dim); i++)
     stride *= dv(i);
 
   double *v = m.fortran_vec ();
 
   unsigned EIGHT_BYTE_INT *p = (unsigned EIGHT_BYTE_INT *)v;
 
   octave_sort<unsigned EIGHT_BYTE_INT> sort;
 
@@ -296,30 +328,40 @@ mx_sort (ArrayN<double> &m, int dim, sor
 	  // Flip the data out of the vector so that int compares
 	  // on IEEE754 give the correct ordering.
 
 	  for (unsigned int i = 0; i < ns; i++)
 	    p[i] = IFloatFlip (p[i]);
 
 	  // There are two representations of NaN.  One will be
 	  // sorted to the beginning of the vector and the other
-	  // to the end.  If it will be sorted to the beginning,
-	  // fix things up.
+	  // to the end.  If it will be sorted incorrectly, fix
+	  // things up.
 
-	  if ((lo_ieee_signbit (octave_NaN) && (mode == ASCENDING)) ||
-	      (! lo_ieee_signbit (octave_NaN) && (mode == DESCENDING)))
-	    {
-	      unsigned int i = 0;
-	      double *vtmp = (double *)p;
-	      while (xisnan (vtmp[i++]) && i < ns);
-	      for (unsigned int l = 0; l < ns - i + 1; l++)
-		vtmp[l] = vtmp[l+i-1];
-	      for (unsigned int l = ns - i + 1; l < ns; l++)
-		vtmp[l] = octave_NaN;
-	    }
+	  if (lo_ieee_signbit (octave_NaN))
+	    if (mode == UNDEFINED || mode == ASCENDING)
+	      {
+		unsigned int i = 0;
+		double *vtmp = (double *)p;
+		while (xisnan (vtmp[i++]) && i < ns);
+		for (unsigned int l = 0; l < ns - i + 1; l++)
+		  vtmp[l] = vtmp[l+i-1];
+		for (unsigned int l = ns - i + 1; l < ns; l++)
+		  vtmp[l] = octave_NaN;
+	      }
+	    else
+	      {
+		unsigned int i = ns;
+		double *vtmp = (double *)p;
+		while (xisnan (vtmp[--i]) && i > 0);
+		for (int l = i; l >= 0; l--)
+		  vtmp[l-i+ns-1] = vtmp[l];
+		for (unsigned int l = 0; l < ns - i - 1; l++)
+		  vtmp[l] = octave_NaN;
+	      }
 
 	  p += ns;
 	}
     }
   else
     {
       OCTAVE_LOCAL_BUFFER (unsigned EIGHT_BYTE_INT, vi, ns);
 
@@ -348,26 +390,35 @@ mx_sort (ArrayN<double> &m, int dim, sor
 	  for (unsigned int i = 0; i < ns; i++)
 	    p[i*stride + offset] = IFloatFlip (vi[i]);
 	      
 	  // There are two representations of NaN. One will be
 	  // sorted to the beginning of the vector and the other
 	  // to the end. If it will be sorted to the beginning,
 	  // fix things up.
 
-	  if ((lo_ieee_signbit (octave_NaN) && (mode == ASCENDING)) ||
-	      (! lo_ieee_signbit (octave_NaN) && (mode == DESCENDING)))
-	    {
-	      unsigned int i = 0;
-	      while (xisnan (v[i++*stride + offset]) && i < ns);
-	      for (unsigned int l = 0; l < ns - i + 1; l++)
-		v[l*stride + offset] = v[(l+i-1)*stride + offset];
-	      for (unsigned int l = ns - i + 1; l < ns; l++)
-		v[l*stride + offset] = octave_NaN;
-	    }
+	  if (lo_ieee_signbit (octave_NaN))
+	    if (mode == UNDEFINED || mode == ASCENDING)
+	      {
+		unsigned int i = 0;
+		while (xisnan (v[i++*stride + offset]) && i < ns);
+		for (unsigned int l = 0; l < ns - i + 1; l++)
+		  v[l*stride + offset] = v[(l+i-1)*stride + offset];
+		for (unsigned int l = ns - i + 1; l < ns; l++)
+		  v[l*stride + offset] = octave_NaN;
+	      }
+	    else
+	      {
+		unsigned int i = ns;
+		while (xisnan (v[--i*stride + offset]) && i > 0);
+		for (int l = i; l >= 0; l--)
+		  v[(l-i+ns-1)*stride + offset] = v[l*stride + offset];
+		for (unsigned int l = 0; l < ns - i - 1; l++)
+		  v[l*stride + offset] = octave_NaN;
+	      }
 	}
     }
 
   retval = m;
 
   return retval;
 }
 
@@ -436,63 +487,85 @@ mx_sort_indexed (ArrayN<double> &m, int 
 	  p[i*stride + offset] = IFloatFlip (vi[i]->vec);
 	  idx(i*stride + offset) = vi[i]->indx;
 	}
 
       // There are two representations of NaN.  One will be sorted
       // to the beginning of the vector and the other to the end.
       // If it will be sorted to the beginning, fix things up.
 
-      if ((lo_ieee_signbit (octave_NaN) && (mode == ASCENDING)) ||
-	  (! lo_ieee_signbit (octave_NaN) && (mode == DESCENDING)))
-	{
-	  unsigned int i = 0;
-	  while (xisnan (v[i++*stride+offset]) && i < ns);
-	  OCTAVE_LOCAL_BUFFER (double, itmp, i - 1);
-	  for (unsigned int l = 0; l < i -1; l++)
-	    itmp[l] = idx(l*stride + offset);
-	  for (unsigned int l = 0; l < ns - i + 1; l++)
-	    {
-	      v[l*stride + offset] = v[(l+i-1)*stride + offset];
-	      idx(l*stride + offset) = idx((l+i-1)*stride + offset);
-	    }
-	  for (unsigned int k = 0, l = ns - i + 1; l < ns; l++, k++)
-	    {
-	      v[l*stride + offset] = octave_NaN;
-	      idx(l*stride + offset) = itmp[k];
-	    }
-	}
+      if (lo_ieee_signbit (octave_NaN))
+	if (mode == UNDEFINED || mode == ASCENDING)
+	  {
+	    unsigned int i = 0;
+	    while (xisnan (v[i++*stride+offset]) && i < ns);
+	    OCTAVE_LOCAL_BUFFER (double, itmp, i - 1);
+	    for (unsigned int l = 0; l < i -1; l++)
+	      itmp[l] = idx(l*stride + offset);
+	    for (unsigned int l = 0; l < ns - i + 1; l++)
+	      {
+		v[l*stride + offset] = v[(l+i-1)*stride + offset];
+		idx(l*stride + offset) = idx((l+i-1)*stride + offset);
+	      }
+	    for (unsigned int k = 0, l = ns - i + 1; l < ns; l++, k++)
+	      {
+		v[l*stride + offset] = octave_NaN;
+		idx(l*stride + offset) = itmp[k];
+	      }
+	  }
+	else 
+	  {
+	    unsigned int i = ns;
+	    while (xisnan (v[--i*stride+offset]) && i > 0);
+	    OCTAVE_LOCAL_BUFFER (double, itmp, ns - i - 1);
+	    for (unsigned int l = 0; l < ns - i -1; l++)
+	      itmp[l] = idx((l+i+1)*stride + offset);
+	    for (int l = i; l >= 0; l--)
+	      {
+		v[(l-i+ns-1)*stride + offset] = v[l*stride + offset];
+		idx((l-i+ns-1)*stride + offset) = idx(l*stride + offset);
+	      }
+	    for (unsigned int k = 0, l = 0; l < ns - i - 1; l++, k++)
+	      {
+		v[l*stride + offset] = octave_NaN;
+		idx(l*stride + offset) = itmp[k];
+	      }
+	  }
     }
 
   retval(1) = idx;
   retval(0) = m;
 
   return retval;
 }
 
 #else
 
+template <>
 bool
 ascending_compare (double a, double b)
 {
   return (xisnan (b) || (a < b));
 }
 
+template <>
 bool
 ascending_compare (vec_index<double> *a, vec_index<double> *b)
 {
   return (xisnan (b->vec) || (a->vec < b->vec));
 }
 
+template <>
 bool
 descending_compare (double a, double b)
 {
   return (xisnan (a) || (a > b));
 }
 
+template <>
 bool
 descending_compare (vec_index<double> *a, vec_index<double> *b)
 {
   return (xisnan (a->vec) || (a->vec > b->vec));
 }
 
 template class octave_sort<double>;
 template class vec_index<double>;
@@ -509,25 +582,27 @@ mx_sort_indexed (ArrayN<double> &m, int 
 
 // std::abs(Inf) returns NaN!!
 static inline double
 xabs (const Complex& x)
 {
   return (xisinf (x.real ()) || xisinf (x.imag ())) ? octave_Inf : abs (x);
 }
 
+template <>
 bool
 ascending_compare (vec_index<Complex> *a, vec_index<Complex> *b)
 {
   return (xisnan (b->vec)
 	  || (xabs (a->vec) < xabs (b->vec))
 	  || ((xabs (a->vec) == xabs (b->vec))
 	      && (arg (a->vec) < arg (b->vec))));
 }
 
+template <>
 bool
 descending_compare (vec_index<Complex> *a, vec_index<Complex> *b)
 {
   return (xisnan (a->vec)
 	  || (xabs (a->vec) > xabs (b->vec))
 	  || ((xabs (a->vec) == xabs (b->vec))
 	      && (arg (a->vec) > arg (b->vec))));
 }
@@ -535,58 +610,48 @@ descending_compare (vec_index<Complex> *
 template class vec_index<Complex>;
 template class octave_sort<vec_index<Complex> *>;
 
 #if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 static octave_value_list
 mx_sort_indexed (ArrayN<Complex> &m, int dim, sortmode mode);
 #endif
 
-bool
-ascending_compare (char a, char b)
-{
-  return (a < b);
-}
-
-bool
-ascending_compare (vec_index<char> *a, vec_index<char> *b)
-{
-  return (a->vec < b->vec);
-}
-
-bool
-descending_compare (char a, char b)
-{
-  return (a > b);
-}
-
-bool
-descending_compare (vec_index<char> *a, vec_index<char> *b)
-{
-  return (a->vec > b->vec);
-}
-
 template class octave_sort<char>;
 template class vec_index<char>;
 template class octave_sort<vec_index<char> *>;
 
 #if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
+bool
+ascending_compare (char a, char b);
+
+bool
+ascending_compare (vec_index<char> *a, vec_index<char> *b);
+
+bool
+descending_compare (char a, char b);
+
+bool
+descending_compare (vec_index<char> *a, vec_index<char> *b);
+
 static octave_value_list
 mx_sort (ArrayN<char> &m, int dim, sortmode mode);
 
 static octave_value_list
 mx_sort_indexed (ArrayN<char> &m, int dim, sortmode mode);
 #endif
 
+template <>
 bool
 ascending_compare (vec_index<octave_value> *a, vec_index<octave_value> *b)
 {
   return (a->vec.string_value () < b->vec.string_value ());
 }
 
+template <>
 bool
 descending_compare (vec_index<octave_value> *a, vec_index<octave_value> *b)
 {
   return (a->vec.string_value () > b->vec.string_value ());
 }
 
 template class vec_index<octave_value>;
 template class octave_sort<vec_index<octave_value> *>;
