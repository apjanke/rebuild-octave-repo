# HG changeset patch
# User Rik <rik@octave.org>
# Date 1521660719 25200
#      Wed Mar 21 12:31:59 2018 -0700
# Node ID 371adf3760f9c47705727151f002dda262409709
# Parent  7116fc02ef3a57c7ecc425e51d735cba619a96f5
# Parent  bff4a7c7bc393fcc4250d83730af662b39f4e199
maint: merge stable to default.

diff --git a/libinterp/corefcn/bsxfun.cc b/libinterp/corefcn/bsxfun.cc
--- a/libinterp/corefcn/bsxfun.cc
+++ b/libinterp/corefcn/bsxfun.cc
@@ -20,30 +20,30 @@ along with Octave; see the file COPYING.
 <https://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <list>
 #include <string>
 #include <vector>
-#include <list>
 
 #include "lo-mappers.h"
 
-#include "oct-map.h"
 #include "defun.h"
 #include "interpreter.h"
-#include "parse.h"
-#include "variables.h"
+#include "oct-map.h"
 #include "ov-colon.h"
+#include "ov-fcn-handle.h"
+#include "parse.h"
 #include "unwind-prot.h"
-#include "ov-fcn-handle.h"
+#include "variables.h"
 
 // Optimized bsxfun operations
 enum bsxfun_builtin_op
 {
   bsxfun_builtin_plus = 0,
   bsxfun_builtin_minus,
   bsxfun_builtin_times,
   bsxfun_builtin_divide,
@@ -82,16 +82,17 @@ const char *bsxfun_builtin_names[] =
 };
 
 static bsxfun_builtin_op
 bsxfun_builtin_lookup (const std::string& name)
 {
   for (int i = 0; i < bsxfun_num_builtin_ops; i++)
     if (name == bsxfun_builtin_names[i])
       return static_cast<bsxfun_builtin_op> (i);
+
   return bsxfun_builtin_unknown;
 }
 
 typedef octave_value (*bsxfun_handler) (const octave_value&,
                                         const octave_value&);
 
 // Static table of handlers.
 bsxfun_handler bsxfun_handler_table[bsxfun_num_builtin_ops][btyp_num_types];
@@ -490,26 +491,26 @@ dimensionality as the other array.
                               result_ComplexNDArray.resize (dvc);
                             }
                         }
                       else if (result_type == "single")
                         {
                           if (tmp(0).isreal ())
                             {
                               have_FloatNDArray = true;
-                              result_FloatNDArray
-                                = tmp(0).float_array_value ();
+                              result_FloatNDArray =
+                                tmp(0).float_array_value ();
                               result_FloatNDArray.resize (dvc);
                             }
                           else
                             {
-                              have_ComplexNDArray = true;
-                              result_ComplexNDArray =
-                                tmp(0).complex_array_value ();
-                              result_ComplexNDArray.resize (dvc);
+                              have_FloatComplexNDArray = true;
+                              result_FloatComplexNDArray =
+                                tmp(0).float_complex_array_value ();
+                              result_FloatComplexNDArray.resize (dvc);
                             }
                         }
                       else if BSXINIT(boolNDArray, "logical", bool)
                       else if BSXINIT(int8NDArray, "int8", int8)
                       else if BSXINIT(int16NDArray, "int16", int16)
                       else if BSXINIT(int32NDArray, "int32", int32)
                       else if BSXINIT(int64NDArray, "int64", int64)
                       else if BSXINIT(uint8NDArray, "uint8", uint8)
@@ -527,105 +528,73 @@ dimensionality as the other array.
                       C = tmp (0);
                       C = C.resize (dvc);
                     }
                 }
               else
                 {
                   update_index (ra_idx, dvc, i);
 
-                  if (have_FloatNDArray
-                      || have_FloatComplexNDArray)
+                  if (have_NDArray)
                     {
                       if (! tmp(0).isfloat ())
                         {
-                          if (have_FloatNDArray)
-                            {
-                              have_FloatNDArray = false;
-                              C = result_FloatNDArray;
-                            }
-                          else
-                            {
-                              have_FloatComplexNDArray = false;
-                              C = result_FloatComplexNDArray;
-                            }
+                          have_NDArray = false;
+                          C = result_NDArray;
                           C = do_cat_op (C, tmp(0), ra_idx);
                         }
-                      else if (tmp(0).is_double_type ())
+                      else if (tmp(0).isreal ())
+                        result_NDArray.insert (tmp(0).array_value (), ra_idx);
+                      else
                         {
-                          if (tmp(0).iscomplex ()
-                              && have_FloatNDArray)
-                            {
-                              result_ComplexNDArray =
-                                ComplexNDArray (result_FloatNDArray);
-                              result_ComplexNDArray.insert
-                                (tmp(0).complex_array_value (), ra_idx);
-                              have_FloatComplexNDArray = false;
-                              have_ComplexNDArray = true;
-                            }
-                          else
-                            {
-                              result_NDArray =
-                                NDArray (result_FloatNDArray);
-                              result_NDArray.insert
-                                (tmp(0).array_value (), ra_idx);
-                              have_FloatNDArray = false;
-                              have_NDArray = true;
-                            }
+                          result_ComplexNDArray =
+                            ComplexNDArray (result_NDArray);
+                          result_ComplexNDArray.insert
+                            (tmp(0).complex_array_value (), ra_idx);
+                          have_NDArray = false;
+                          have_ComplexNDArray = true;
+                        }
+                    }
+                  else if (have_FloatNDArray)
+                    {
+                      if (! tmp(0).isfloat ())
+                        {
+                          have_FloatNDArray = false;
+                          C = result_FloatNDArray;
+                          C = do_cat_op (C, tmp(0), ra_idx);
                         }
                       else if (tmp(0).isreal ())
                         result_FloatNDArray.insert
                           (tmp(0).float_array_value (), ra_idx);
                       else
                         {
                           result_FloatComplexNDArray =
                             FloatComplexNDArray (result_FloatNDArray);
                           result_FloatComplexNDArray.insert
-                            (tmp(0).float_complex_array_value (),
-                             ra_idx);
+                            (tmp(0).float_complex_array_value (), ra_idx);
                           have_FloatNDArray = false;
                           have_FloatComplexNDArray = true;
                         }
                     }
-                  else if (have_NDArray)
-                    {
-                      if (! tmp(0).isfloat ())
-                        {
-                          have_NDArray = false;
-                          C = result_NDArray;
-                          C = do_cat_op (C, tmp(0), ra_idx);
-                        }
-                      else if (tmp(0).isreal ())
-                        result_NDArray.insert (tmp(0).array_value (),
-                                               ra_idx);
-                      else
-                        {
-                          result_ComplexNDArray =
-                            ComplexNDArray (result_NDArray);
-                          result_ComplexNDArray.insert
-                            (tmp(0).complex_array_value (), ra_idx);
-                          have_NDArray = false;
-                          have_ComplexNDArray = true;
-                        }
-                    }
 
 #define BSXLOOP(T, CLS, EXTRACTOR)                                      \
                   (have_ ## T)                                          \
                     {                                                   \
                       if (tmp(0).class_name () != CLS)                  \
                         {                                               \
                           have_ ## T = false;                           \
                           C = result_ ## T;                             \
                           C = do_cat_op (C, tmp(0), ra_idx);            \
                         }                                               \
                       else                                              \
                         result_ ## T .insert (tmp(0). EXTRACTOR ## _array_value (), ra_idx); \
                     }
 
                   else if BSXLOOP(ComplexNDArray, "double", complex)
+                  else if BSXLOOP(FloatComplexNDArray, "single", float_complex)
                   else if BSXLOOP(boolNDArray, "logical", bool)
                   else if BSXLOOP(int8NDArray, "int8", int8)
                   else if BSXLOOP(int16NDArray, "int16", int16)
                   else if BSXLOOP(int32NDArray, "int32", int32)
                   else if BSXLOOP(int64NDArray, "int64", int64)
                   else if BSXLOOP(uint8NDArray, "uint8", uint8)
                   else if BSXLOOP(uint16NDArray, "uint16", uint16)
                   else if BSXLOOP(uint32NDArray, "uint32", uint32)
@@ -820,9 +789,16 @@ dimensionality as the other array.
 %!assert <*47085> (rand (3, 3, 1) .+ rand (3, 3, 0), zeros (3, 3, 0))
 
 ## In-place broadcasting with zero length dimensions
 %!test <*47085>
 %! a = zeros (0, 3);
 %! a .+= [1 2 3];
 %! assert (a, zeros (0, 3));
 
+%!test <*53179>
+%! im = ones (4,4,2) + single (i);
+%! mask = true (4,4);
+%! mask(:,1:2) = false;
+%! r = bsxfun (@times, im, mask);
+%! assert (r(:,:,1), repmat (single ([0, 0, 1+i, 1+i]), [4, 1]));
+
 */
diff --git a/liboctave/numeric/bsxfun.h b/liboctave/numeric/bsxfun.h
--- a/liboctave/numeric/bsxfun.h
+++ b/liboctave/numeric/bsxfun.h
@@ -29,54 +29,54 @@ along with Octave; see the file COPYING.
 
 #include <algorithm>
 #include <string>
 
 #include "dim-vector.h"
 
 inline
 bool
-is_valid_bsxfun (const std::string& name, const dim_vector& dx,
-                 const dim_vector& dy)
+is_valid_bsxfun (const std::string& name,
+                 const dim_vector& xdv, const dim_vector& ydv)
 {
-  for (int i = 0; i < std::min (dx.ndims (), dy.ndims ()); i++)
+  for (int i = 0; i < std::min (xdv.ndims (), ydv.ndims ()); i++)
     {
-      octave_idx_type xk = dx(i);
-      octave_idx_type yk = dy(i);
+      octave_idx_type xk = xdv(i);
+      octave_idx_type yk = ydv(i);
       // Check the three conditions for valid bsxfun dims
       if (! ((xk == yk) || (xk == 1 && yk != 1) || (xk != 1 && yk == 1)))
         return false;
     }
 
   (*current_liboctave_warning_with_id_handler)
     ("Octave:language-extension", "performing `%s' automatic broadcasting",
      name.c_str ());
 
   return true;
 }
 
-// since we can't change the size of the assigned-to matrix, we cannot
-// apply singleton expansion to it, so the conditions to check are
-// different here.
+// For inplace operations the size of the resulting matrix cannot be changed.
+// Therefore we can only apply singleton expansion on the second matrix which
+// alters the conditions to check.
 inline
 bool
-is_valid_inplace_bsxfun (const std::string& name, const dim_vector& dr,
-                         const dim_vector& dx)
+is_valid_inplace_bsxfun (const std::string& name,
+                         const dim_vector& rdv, const dim_vector& xdv)
 {
-  octave_idx_type drl = dr.ndims ();
-  octave_idx_type dxl = dx.ndims ();
-  if (drl < dxl)
+  octave_idx_type r_nd = rdv.ndims ();
+  octave_idx_type x_nd = xdv.ndims ();
+  if (r_nd < x_nd)
     return false;
 
-  for (int i = 0; i < drl; i++)
+  for (int i = 0; i < r_nd; i++)
     {
-      octave_idx_type rk = dr(i);
-      octave_idx_type xk = dx(i);
+      octave_idx_type rk = rdv(i);
+      octave_idx_type xk = xdv(i);
 
-      // Only two valid canditions to check; can't stretch rk
+      // Only two valid conditions to check; can't stretch rk
       if (! ((rk == xk) || (rk != 1 && xk == 1)))
         return false;
     }
 
   (*current_liboctave_warning_with_id_handler)
     ("Octave:language-extension", "performing `%s' automatic broadcasting",
      name.c_str ());
 
