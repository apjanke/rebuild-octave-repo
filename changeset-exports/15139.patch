# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1344608852 14400
#      Fri Aug 10 10:27:32 2012 -0400
# Branch gui
# Node ID bfc220d1de673c61654203c93d89f3ad13616221
# Parent  089b98bdaebf9e9337f9481b4ecda41c9f7f6905
include gui in default Octave binary

* Makefile.am (GUIDIR): New variable.
(SUBDIRS): Use it in the list instead of @GUIDIR@.  List $(GUIDIR)
before src.
* gui/src/Makefile.am (bin_PROGRAMS): Delete.
(octlib_LTLIBRARIES): New variable.
(liboctgui_la_SOURCES): Rename from octave_gui_SOURCES.
(liboctgui_la_CPPFLAGS): Rename from octave_gui_CPPFLAGS.
(liboctgui_la_LIBADD): Rename from octave_gui_LDADD.
Don't include Octave libraries in the list.
Do include Qt libraries in the list.
(liboctgui_la_LDFLAGS): Rename from octave_gui_LDFLAGS.
Only include -L@QT_LIBDIR@ option in the list.
(moc_%.cpp): Use $(liboctgui_la_CPPFLAGS) in rules, not
$(octave_gui_CPPFLAGS).
* octave-gui.h: New file.
* octave-gui.cc: Include it.
(dissociate_terminal): In parent, wait for child process and exit with
exit status of child.
(octave_start_gui): Rename from main.
* run-octave.in: Start with GUI by default.  Rename -gui option -cli
to allow running octave-cli binary.
* main.cc, main-cli.cc: New files.
* main.c: Delete.
* src/Makefile (bin_PROGRAMS): Include octave-cli in the list.
(OCTAVE_CORE_LIBS): New variable.
(octave_cli_SOURCES, octave_cli_LDADD, octave_cli_LDFLAGS):
New variables.
(octave_SOURCES): Define to main.cc, not main.c.
(octave_CPPFLAGS): New variable.
(octave_LDFLAGS): Include -DENABLE_GUI=1 in the list.
(octave_LDADD): Use $(OCTAVE_CORE_LIBS) and link with GUI lib.
* octave.cc (force_gui_option, no_gui_option): New static variables.
(octave_starting_gui): New function.
(usage_string): Update for new options.
(FORCE_GUI_OPTION, NO_GUI_OPTION): New macros.
(long_opts): Include "force-gui" and "no-gui" options in the list.
(octave_main): Handle FORCE_GUI_OPTION and NO_GUI_OPTION cases.
Error if both --force-gui and --no-gui are used.
* octave.h (octave_starting_gui): Provide decl.

diff --git a/Makefile.am b/Makefile.am
--- a/Makefile.am
+++ b/Makefile.am
@@ -62,22 +62,22 @@ EXTRA_DIST = \
   etc/README.Windows \
   etc/README.gnuplot \
   etc/README.kpathsea \
   etc/gdbinit \
   run-octave.in
 
 include m4/module.mk
 
-# Subdirectories in which to run `make all'.
-SUBDIRS = libgnu libcruft liboctave src @GUIDIR@ scripts @DOCDIR@ examples test
+if OCTAVE_GUI
+GUIDIR = gui
+endif
 
-if OCTAVE_GUI
-SUBDIRS += gui
-endif
+# Subdirectories in which to run `make all'.
+SUBDIRS = libgnu libcruft liboctave $(GUIDIR) src scripts @DOCDIR@ examples test
 
 if ! AMCOND_BUILD_DOCS
 dist-hook:
 	echo "Documentation disabled.  Cannot package distribution!" ; exit 1;
 endif
 
 BUILT_SOURCES = run-octave
 
diff --git a/gui/src/Makefile.am b/gui/src/Makefile.am
--- a/gui/src/Makefile.am
+++ b/gui/src/Makefile.am
@@ -1,23 +1,21 @@
 SRCDIRS = m-editor qtinfo octave-adapter \
 	  ../qterminal/libqterminal/unix ../qterminal/libqterminal/win32 ../qterminal/libqterminal ../qterminal
 
 moc_%.cpp: %.h
 	test -d $(@D) || mkdir -p $(@D)
-	@MOC@ -o$@ $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(octave_gui_CPPFLAGS) $<
+	@MOC@ -o$@ $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(liboctgui_la_CPPFLAGS) $<
 
 ui_%.h: %.ui
 	@UIC@ -o $@ $<
 
 qrc_%.cpp: %.qrc
 	@RCC@ -o $@ $<
 
-bin_PROGRAMS = octave-gui
-
 octave_gui_MOC = \
 		 moc_documentation-dockwidget.cpp \
 		 moc_files-dockwidget.cpp \
 		 moc_history-dockwidget.cpp \
 		 moc_main-window.cpp \
 		 moc_octave-qt-event-listener.cpp \
 		 moc_settings-dialog.cpp \
 		 moc_terminal-dockwidget.cpp \
@@ -34,17 +32,19 @@ octave_gui_MOC = \
 		 qtinfo/moc_webinfo.cpp
 octave_gui_UI = \
 		settings-dialog.ui \
 		welcome-wizard.ui
 octave_gui_UI_H = $(patsubst %.ui,ui_%.h,$(octave_gui_UI))
 
 octave_gui_RC = qrc_resource.cpp
 
-octave_gui_SOURCES = \
+octlib_LTLIBRARIES = liboctgui.la
+
+liboctgui_la_SOURCES = \
 		     documentation-dockwidget.cc \
 		     files-dockwidget.cc \
 		     history-dockwidget.cc \
 		     main-window.cc \
 		     octave-gui.cc \
 		     octave-qt-event-listener.cc \
 		     resource-manager.cc \
 		     settings-dialog.cc \
@@ -55,43 +55,47 @@ octave_gui_SOURCES = \
 		     m-editor/file-editor.cc \
 		     m-editor/file-editor-tab.cc \
 		     m-editor/find-dialog.cc \
 		     m-editor/lexer-octave-gui.cc \
 		     octave-adapter/octave-link.cc \
 		     octave-adapter/octave-main-thread.cc \
 		     qtinfo/parser.cc \
 		     qtinfo/webinfo.cc
-nodist_octave_gui_SOURCES = $(octave_gui_MOC) $(octave_gui_RC)
+
+liboctgui_la_LIBADD = \
+  libqterminal.la \
+  -lQtCore \
+  -lQtGui \
+  -lQtNetwork \
+  -lqscintilla2
+
+nodist_liboctgui_la_SOURCES = $(octave_gui_MOC) $(octave_gui_RC)
 
-octave_gui_CPPFLAGS = -I@QT_INCDIR@ \
-                      -I@QT_INCDIR@/QtCore \
-		      -I@QT_INCDIR@/QtGui \
-		      -I@QT_INCDIR@/QtNetwork \
-		      -I$(srcdir)/../qterminal/libqterminal \
-		      -I$(srcdir)/m-editor \
-		      -I$(srcdir)/octave-adapter \
-		      -I$(srcdir)/qtinfo \
-		      -I$(srcdir)/../../libcruft/misc \
-		      -I../../liboctave \
-		      -I$(srcdir)/../../liboctave \
-		      -I../../src/interp-core \
-		      -I$(srcdir)/../../src \
-		      -I$(srcdir)/../../src/interp-core \
-		      -I$(srcdir)/../../src/interpfcn \
-		      -I$(srcdir)/../../src/octave-value \
-		      -I$(srcdir)/../../src/operators \
-		      -I$(srcdir)/../../src/parse-tree
+liboctgui_la_CPPFLAGS = \
+  -I@QT_INCDIR@ \
+  -I@QT_INCDIR@/QtCore \
+  -I@QT_INCDIR@/QtGui \
+  -I@QT_INCDIR@/QtNetwork \
+  -I$(srcdir)/../qterminal/libqterminal \
+  -I$(srcdir)/m-editor \
+  -I$(srcdir)/octave-adapter \
+  -I$(srcdir)/qtinfo \
+  -I$(srcdir)/../../libcruft/misc \
+  -I../../liboctave \
+  -I$(srcdir)/../../liboctave \
+  -I../../src/interp-core \
+  -I$(srcdir)/../../src \
+  -I$(srcdir)/../../src/interp-core \
+  -I$(srcdir)/../../src/interpfcn \
+  -I$(srcdir)/../../src/octave-value \
+  -I$(srcdir)/../../src/operators \
+  -I$(srcdir)/../../src/parse-tree
 
-octave_gui_LDADD = libqterminal.la \
-		   ../../src/liboctinterp.la \
-                   ../../liboctave/liboctave.la \
-                   ../../libcruft/libcruft.la
-
-octave_gui_LDFLAGS = -L@QT_LIBDIR@ -lQtCore -lQtGui -lQtNetwork -lqscintilla2
+liboctgui_la_LDFLAGS = -L@QT_LIBDIR@
 
 noinst_HEADERS = \
 		 documentation-dockwidget.h \
 		 files-dockwidget.h \
 		 history-dockwidget.h \
 		 main-window.h \
 		 octave-qt-event-listener.h \
 		 resource-manager.h \
diff --git a/gui/src/octave-gui.cc b/gui/src/octave-gui.cc
--- a/gui/src/octave-gui.cc
+++ b/gui/src/octave-gui.cc
@@ -16,23 +16,25 @@
  */
 
 #include <QtGui/QApplication>
 #include <QTranslator>
 #include <QSettings>
 #include "welcome-wizard.h"
 #include "resource-manager.h"
 #include "main-window.h"
+#include "octave-gui.h"
 
 // Dissociate from the controlling terminal, if any.
 
 static void
 dissociate_terminal (void)
 {
 #if ! defined (Q_OS_WIN32) || defined (Q_OS_CYGWIN)
+
   pid_t pid = fork ();
 
   if (pid < 0)
     {
       std::cerr << "fork failed!" << std::endl;;
       exit (1);
     }
   else if (pid == 0)
@@ -41,25 +43,32 @@ dissociate_terminal (void)
 
       if (setsid () < 0)
         {
           std::cerr << "setsid error" << std::endl;
           exit (1);
         }
     }
   else
-    exit (0);
+    {
+      // Parent
+
+      int status;
+
+      waitpid (pid, &status, 0);
+
+      exit (WIFEXITED (status) ? WEXITSTATUS (status) : 127);
+    }
+
 #endif
 }
 
 int
-main (int argc, char *argv[])
+octave_start_gui (int argc, char *argv[])
 {
-  octave_initialize_interpreter (argc, argv, 0);
-
   dissociate_terminal ();
 
   QApplication application (argc, argv);
 
   while (true)
     {
       if (resource_manager::instance ()->is_first_run ())
         {
diff --git a/gui/src/octave-gui.h b/gui/src/octave-gui.h
new file mode 100644
--- /dev/null
+++ b/gui/src/octave-gui.h
@@ -0,0 +1,28 @@
+/*
+
+Copyright (C) 2012 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if !defined (octave_octave_gui_h)
+#define octave_octave_gui_h 1
+
+extern int octave_start_gui (int argc, char **argv);
+
+#endif
diff --git a/run-octave.in b/run-octave.in
--- a/run-octave.in
+++ b/run-octave.in
@@ -61,18 +61,18 @@ if [ $# -gt 0 ]; then
     driver="gdb --annotate=3 --args"
     shift
   elif [ "x$1" = "x-valgrind" ]; then
     driver="valgrind --tool=memcheck"
     shift
   elif [ "x$1" = "x-strace" ]; then
     driver="strace -o octave.trace"
     shift
-  elif [ "x$1" = "x-gui" ]; then
-    octave_executable="$builddir/gui/src/octave-gui"
+  elif [ "x$1" = "x-cli" ]; then
+    octave_executable="$builddir/src/octave-cli"
     shift
   fi
 fi
 
 OCTAVE_SITE_INITFILE="$top_srcdir/scripts/startup/main-rcfile" \
   exec $builddir/libtool --mode=execute $driver \
     "$octave_executable" --no-init-path --path="$LOADPATH" \
     --image-path="$IMAGEPATH" --doc-cache-file="$DOCFILE" \
diff --git a/src/Makefile.am b/src/Makefile.am
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -35,16 +35,17 @@ AM_CPPFLAGS = \
   -I$(top_builddir)/libgnu -I$(top_srcdir)/libgnu
 
 octlib_LTLIBRARIES = liboctinterp.la
 
 if AMCOND_BUILD_COMPILED_AUX_PROGRAMS
 bin_PROGRAMS = \
   mkoctfile \
   octave \
+  octave-cli \
   octave-config
 
 mkoctfile_SOURCES =
 nodist_mkoctfile_SOURCES = mkoctfile.cc
 mkoctfile_LDADD = $(top_builddir)/libgnu/libgnu.la $(LIBS)
 
 octave_config_SOURCES =
 nodist_octave_config_SOURCES = octave-config.cc
@@ -53,17 +54,18 @@ octave_config_LDADD = \
 	$(top_builddir)/libgnu/libgnu.la \
 	$(LIBS)
 
 BUILT_SOURCES_EXTRA = \
   mkoctfile.cc \
   octave-config.cc
 else
 bin_PROGRAMS = \
-  octave
+  octave \
+  octave-cli
 
 bin_SCRIPTS = \
   mkoctfile \
   octave-config
 endif
 
 ## Order matters here.  Leave builtins.cc last, because it depends on
 ## $(DEF_FILES), and building those requires all the sources
@@ -213,28 +215,42 @@ liboctinterp_la_LDFLAGS = \
   -version-info $(liboctinterp_version_info) \
   $(NO_UNDEFINED_LDFLAG) \
   -bindir $(bindir) \
   $(LIBOCTINTERP_LINK_OPTS)
 
 ## FIXME: Does this rule need to be uncommented?
 #fft.df fft.lo fft2.df fft2.lo fftn.df fftn.lo: CPPFLAGS += $(FFTW_XCPPFLAGS)
 
-octave_SOURCES = main.c
-
-octave_LDADD = \
+OCTAVE_CORE_LIBS = \
   liboctinterp.la \
   ../liboctave/liboctave.la \
-  ../libcruft/libcruft.la \
+  ../libcruft/libcruft.la
+
+octave_cli_SOURCES = main-cli.cc
+
+octave_cli_LDADD = \
+  $(OCTAVE_CORE_LIBS)
   $(OCTAVE_LINK_DEPS)
 
-octave_LDFLAGS = \
+octave_cli_LDFLAGS = \
   $(NO_UNDEFINED_LDFLAG) \
   $(OCTAVE_LINK_OPTS)
 
+octave_SOURCES = main.cc
+
+octave_CPPFLAGS = -I$(top_srcdir)/gui/src
+
+octave_LDADD = \
+  $(OCTAVE_CORE_LIBS) \
+  ../gui/src/liboctgui.la \
+  $(OCTAVE_LINK_DEPS)
+
+octave_LDFLAGS = -DENABLE_GUI=1 $(octave_cli_LDFLAGS)
+
 ## Section for defining and creating DEF_FILES
 SRC_DEF_FILES := $(shell $(srcdir)/find-defun-files.sh "$(srcdir)" $(DIST_SRC))
 
 DLDFCN_DEF_FILES = $(DLDFCN_SRC:.cc=.df)
 
 ## builtins.cc depends on $(DEF_FILES), so DEF_FILES should only include
 ## .df files that correspond to sources included in liboctave.
 if AMCOND_ENABLE_DYNAMIC_LINKING
diff --git a/src/main-cli.cc b/src/main-cli.cc
new file mode 100644
--- /dev/null
+++ b/src/main-cli.cc
@@ -0,0 +1,35 @@
+/*
+
+Copyright (C) 2012 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <octave.h>
+
+int
+main (int argc, char **argv)
+{
+  octave_initialize_interpreter (argc, argv, 0);
+
+  return octave_execute_interpreter ();
+}
diff --git a/src/main.c b/src/main.c
deleted file mode 100644
--- a/src/main.c
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
-
-Copyright (C) 2002-2012 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 3 of the License, or (at your
-option) any later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#ifdef HAVE_CONFIG_H
-#include <config.h>
-#endif
-
-#include "f77-fcn.h"
-#include "lo-ieee.h"
-
-#include "octave.h"
-
-int
-main (int argc, char **argv)
-{
-  return octave_main (argc, argv, 0);
-}
diff --git a/src/main.cc b/src/main.cc
new file mode 100644
--- /dev/null
+++ b/src/main.cc
@@ -0,0 +1,39 @@
+/*
+
+Copyright (C) 2012 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <octave.h>
+#include <octave-gui.h>
+
+int
+main (int argc, char **argv)
+{
+  octave_initialize_interpreter (argc, argv, 0);
+
+  if (octave_starting_gui ())
+    return octave_start_gui (argc, argv);
+
+  return octave_execute_interpreter ();
+}
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -51,16 +51,17 @@ along with Octave; see the file COPYING.
 #include "defun.h"
 #include "display.h"
 #include "error.h"
 #include "file-io.h"
 #include "input.h"
 #include "lex.h"
 #include "load-path.h"
 #include "octave.h"
+#include "oct-conf.h"
 #include "oct-hist.h"
 #include "oct-map.h"
 #include "oct-mutex.h"
 #include "oct-obj.h"
 #include "ops.h"
 #include "ov.h"
 #include "ov-range.h"
 #include "toplev.h"
@@ -114,24 +115,33 @@ static bool inhibit_startup_message = fa
 // TRUE means we turn on compatibility options.
 // (--traditional)
 static bool traditional = false;
 
 // If TRUE, print verbose info in some cases.
 // (--verbose; -V)
 static bool verbose_flag = false;
 
+// If TRUE, force the GUI to start.
+// (--force-gui)
+static bool force_gui_option = false;
+
+// If TRUE don't start the GUI.
+// (--no-gui)
+static bool no_gui_option = false;
+
 // Usage message
 static const char *usage_string =
   "octave [-HVdfhiqvx] [--debug] [--echo-commands] [--eval CODE]\n\
-       [--exec-path path] [--help] [--image-path path] [--info-file file]\n\
-       [--info-program prog] [--interactive] [--line-editing]\n\
-       [--no-history] [--no-init-file] [--no-init-path] [--no-line-editing]\n\
-       [--no-site-file] [--no-window-system] [-p path] [--path path]\n\
-       [--silent] [--traditional] [--verbose] [--version] [file]";
+       [--exec-path path] [--force-gui] [--help] [--image-path path]\n\
+       [--info-file file] [--info-program prog] [--interactive]\n\
+       [--line-editing] [--no-gui] [--no-history] [--no-init-file]\n\
+       [--no-init-path] [--no-line-editing] [--no-site-file]\n\
+       [--no-window-system] [-p path] [--path path] [--silent]\n\
+       [--traditional] [--verbose] [--version] [file]";
 
 // This is here so that it's more likely that the usage message and
 // the real set of options will agree.  Note: the `+' must come first
 // to prevent getopt from permuting arguments!
 static const char *short_opts = "+HVdfhip:qvx";
 
 // The code to evaluate at startup (--eval CODE)
 static std::string code_to_eval;
@@ -139,42 +149,46 @@ static std::string code_to_eval;
 // If TRUE, don't exit after evaluating code given by --eval option.
 static bool persist = false;
 
 // Long options.  See the comments in getopt.h for the meanings of the
 // fields in this structure.
 #define DOC_CACHE_FILE_OPTION 1
 #define EVAL_OPTION 2
 #define EXEC_PATH_OPTION 3
-#define IMAGE_PATH_OPTION 4
-#define INFO_FILE_OPTION 5
-#define INFO_PROG_OPTION 6
-#define LINE_EDITING_OPTION 7
-#define NO_INIT_FILE_OPTION 8
-#define NO_INIT_PATH_OPTION 9
-#define NO_LINE_EDITING_OPTION 10
-#define NO_SITE_FILE_OPTION 11
-#define NO_WINDOW_SYSTEM_OPTION 12
-#define PERSIST_OPTION 13
-#define TEXI_MACROS_FILE_OPTION 14
-#define TRADITIONAL_OPTION 15
+#define FORCE_GUI_OPTION 4
+#define IMAGE_PATH_OPTION 5
+#define INFO_FILE_OPTION 6
+#define INFO_PROG_OPTION 7
+#define LINE_EDITING_OPTION 8
+#define NO_GUI_OPTION 9
+#define NO_INIT_FILE_OPTION 10
+#define NO_INIT_PATH_OPTION 11
+#define NO_LINE_EDITING_OPTION 12
+#define NO_SITE_FILE_OPTION 13
+#define NO_WINDOW_SYSTEM_OPTION 14
+#define PERSIST_OPTION 15
+#define TEXI_MACROS_FILE_OPTION 16
+#define TRADITIONAL_OPTION 17
 struct option long_opts[] =
   {
     { "braindead",        no_argument,       0, TRADITIONAL_OPTION },
     { "debug",            no_argument,       0, 'd' },
     { "doc-cache-file",   required_argument, 0, DOC_CACHE_FILE_OPTION },
     { "echo-commands",    no_argument,       0, 'x' },
     { "eval",             required_argument, 0, EVAL_OPTION },
     { "exec-path",        required_argument, 0, EXEC_PATH_OPTION },
+    { "force-gui",        no_argument,       0, FORCE_GUI_OPTION },
     { "help",             no_argument,       0, 'h' },
     { "image-path",       required_argument, 0, IMAGE_PATH_OPTION },
     { "info-file",        required_argument, 0, INFO_FILE_OPTION },
     { "info-program",     required_argument, 0, INFO_PROG_OPTION },
     { "interactive",      no_argument,       0, 'i' },
     { "line-editing",     no_argument,       0, LINE_EDITING_OPTION },
+    { "no-gui",           no_argument,       0, NO_GUI_OPTION },
     { "no-history",       no_argument,       0, 'H' },
     { "no-init-file",     no_argument,       0, NO_INIT_FILE_OPTION },
     { "no-init-path",     no_argument,       0, NO_INIT_PATH_OPTION },
     { "no-line-editing",  no_argument,       0, NO_LINE_EDITING_OPTION },
     { "no-site-file",     no_argument,       0, NO_SITE_FILE_OPTION },
     { "no-window-system", no_argument,       0, NO_WINDOW_SYSTEM_OPTION },
     { "norc",             no_argument,       0, 'f' },
     { "path",             required_argument, 0, 'p' },
@@ -627,26 +641,30 @@ maximum_braindamage (void)
 
   disable_warning ("Octave:abbreviated-property-match");
   disable_warning ("Octave:fopen-file-in-path");
   disable_warning ("Octave:function-name-clash");
   disable_warning ("Octave:load-file-in-path");
   disable_warning ("Octave:possible-matlab-short-circuit-operator");
 }
 
-// You guessed it.
+// EMBEDDED is declared int instead of bool because this function is
+// declared extern "C".
 
 int
 octave_main (int argc, char **argv, int embedded)
 {
   octave_initialize_interpreter (argc, argv, embedded);
 
   return octave_execute_interpreter ();
 }
 
+// EMBEDDED is declared int instead of bool because this function is
+// declared extern "C".
+
 void
 octave_initialize_interpreter (int argc, char **argv, int embedded)
 {
   octave_cmdline_argc = argc;
   octave_cmdline_argv = argv;
   octave_embedded = embedded;
 
   octave_env::set_program_name (argv[0]);
@@ -782,16 +800,20 @@ octave_initialize_interpreter (int argc,
             }
           break;
 
         case EXEC_PATH_OPTION:
           if (optarg)
             set_exec_path (optarg);
           break;
 
+        case FORCE_GUI_OPTION:
+          force_gui_option = true;
+          break;
+
         case IMAGE_PATH_OPTION:
           if (optarg)
             set_image_path (optarg);
           break;
 
         case INFO_FILE_OPTION:
           if (optarg)
             bind_internal_variable ("info_file", optarg);
@@ -805,16 +827,20 @@ octave_initialize_interpreter (int argc,
         case LINE_EDITING_OPTION:
           forced_line_editing = true;
           break;
 
         case NO_INIT_FILE_OPTION:
           read_init_files = false;
           break;
 
+        case NO_GUI_OPTION:
+          no_gui_option = true;
+          break;
+
         case NO_INIT_PATH_OPTION:
           set_initial_path = false;
           break;
 
         case NO_LINE_EDITING_OPTION:
           line_editing = false;
           break;
 
@@ -844,16 +870,22 @@ octave_initialize_interpreter (int argc,
           // options and return '?', which is handled above.  So if we
           // end up here, it is because there was an option but we
           // forgot to handle it.  That should be fatal.
           panic_impossible ();
           break;
         }
     }
 
+  if (force_gui_option && no_gui_option)
+    {
+      error ("error: only one of --force-gui and --no-gui may be used");
+      usage ();
+    }
+
   // Make sure we clean up when we exit.  Also allow users to register
   // functions.  If we don't have atexit or on_exit, we're going to
   // leave some junk files around if we exit abnormally.
 
   atexit (do_octave_atexit);
 
   // Is input coming from a terminal?  If so, we are probably
   // interactive.
@@ -977,16 +1009,46 @@ octave_execute_interpreter (void)
 
   quitting_gracefully = true;
 
   clean_up_and_exit (retval);
 
   return 0;
 }
 
+// Return int instead of bool because this function is declared
+// extern "C".
+
+int
+octave_starting_gui (void)
+{
+  if (force_gui_option)
+    return true;
+
+  if (no_gui_option)
+    return false;
+
+  if (persist)
+    return true;
+
+  if (! (interactive || forced_interactive))
+    return false;
+
+  // If we have code to eval or execute from a file, and we are going to
+  // exit immediately after executing it, don't start the gui.
+
+  int last_arg_idx = optind;
+  int remaining_args = octave_cmdline_argc - last_arg_idx;
+
+  if (! code_to_eval.empty () || remaining_args > 0)
+    return false;
+
+  return true;
+}
+
 DEFUN (argv, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} argv ()\n\
 Return the command line arguments passed to Octave.  For example,\n\
 if you invoked Octave using the command\n\
 \n\
 @example\n\
 octave --no-line-editing --silent\n\
diff --git a/src/octave.h b/src/octave.h
--- a/src/octave.h
+++ b/src/octave.h
@@ -33,13 +33,15 @@ extern OCTINTERP_API void
 octave_initialize_interpreter (int argc, char **argv, int embedded);
 
 extern OCTINTERP_API int octave_execute_interpreter (void);
 
 extern OCTINTERP_API int octave_cmdline_argc;
 extern OCTINTERP_API char **octave_cmdline_argv;
 extern OCTINTERP_API int octave_embedded;
 
+extern OCTINTERP_API int octave_starting_gui (void);
+
 #ifdef  __cplusplus
 }
 #endif
 
 #endif
