# HG changeset patch
# User jwe
# Date 1171354251 0
#      Tue Feb 13 08:10:51 2007 +0000
# Node ID a5cd8b77e892c759801ef52a2931adf6273f55a3
# Parent  2bab2360f07f0f9d1249159e0b55772a4563361a
[project @ 2007-02-13 08:08:33 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,18 @@
+2007-02-13  John W. Eaton  <jwe@octave.org>
+
+	* plot/__errcomm__.m, plot/__plr1__.m, plot/__plr2__.m,
+	plot/__plt1__.m, plot/__plt2__.m, plot/__plt2mm__.m,
+	plot/__plt2mv__.m, plot/__plt2ss__.m, plot/__plt2vm__.m,
+	plot/__plt2vv__.m, plot/__plt__.m, plot/loglog.m,
+	plot/loglogerr.m, plot/plot.m, plot/plot3.m, plot/polar.m,
+	plot/semilogx.m, plot/semilogxerr.m, plot/semilogy.m,
+	plot/semilogyerr.m: Return handles to line objects.
+
 2007-02-11  John W. Eaton  <jwe@octave.org>
 
 	* plot/__uiobject_close_all.m: New file.
 	* plot/Makefile.in (SOURCES_M): Add it to the list.
 
 2007-02-10  John W. Eaton  <jwe@octave.org>
 
 	* plot/drawnow.m: Arrange for plot streams to be close on exit.
@@ -5343,17 +5353,17 @@ Fri Nov  6 10:17:00 1998  John W. Eaton 
 	    are.m              lqe.m              syscont.m
 	    axis2dlim.m        lqg.m              syscont_disc.m
 	    bddemo.m           lqr.m              sysdefioname.m
 	    bode.m             lsim.m             sysdefstname.m
 	    bode_bounds.m      ltifr.m            sysdimensions.m
 	    bodquist.m         lyap.m             sysdisc.m
 	    buildssic.m        mb.m               sysdup.m
 	    c2d.m              minfo.m            sysgetsignals.m
-	    com2str.m,v        moddemo.m          sysgettsam.m
+	    com2str.m          moddemo.m          sysgettsam.m
 	    controldemo.m      nichols.m          sysgettype.m
 	    ctrb.m             nyquist.m          sysgroup.m
 	    d2c.m              obsv.m             sysgroupn.m
 	    damp.m             ord2.m             sysmult.m
 	    dare.m             outlist.m          sysout.m
 	    dcgain.m           packedform.m       sysprune.m
 	    demomarsyas.m      packsys.m          sysreorder.m
 	    dezero.m;          parallel.m         sysrepdemo.m
diff --git a/scripts/plot/__errcomm__.m b/scripts/plot/__errcomm__.m
--- a/scripts/plot/__errcomm__.m
+++ b/scripts/plot/__errcomm__.m
@@ -23,42 +23,43 @@
 ## semilogyerr, semilogxerr).
 ## @seealso{errorbar, semilogxerr, semilogyerr, loglogerr, __pltopt__}
 ## @end deftypefn
 
 ## Created: 20.02.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
-function __errcomm__ (caller, h, varargin)
+function retval = __errcomm__ (caller, h, varargin)
 
   if (nargin < 4)
     print_usage ();
   endif
 
   nargs = length (varargin);
 
   k = 1;
+  idx = 1;
   data = cell(6,1);
   while (k <= nargs)
     a = varargin{k++};
     if (isvector (a))
       a = a(:);
     elseif (ismatrix (a))
       ;
     else
       usage ("%s (...)", caller);
     endif
     sz = size (a);
     ndata = 1;
     data{ndata} = a;
     while (k <= nargs)
       a = varargin{k++};
       if (ischar (a) || iscellstr (a))
-	__errplot__ (a, h, data{1:ndata});
+	retval(idx++) = __errplot__ (a, h, data{1:ndata});
 	break;
       elseif (isvector (a))
 	a = a(:);
       elseif (ismatrix (a))
 	;
       else
 	error ("wrong argument types");
       endif
@@ -68,14 +69,14 @@ function __errcomm__ (caller, h, varargi
       data{++ndata} = a;
       if (ndata > 6)
 	error ("too many arguments to a plot");
       endif
     endwhile
   endwhile
 
   if (! (ischar (a) || iscellstr (a)))
-    __errplot__ ("~", h, data{1:ndata});
+    retval(idx++) = __errplot__ ("~", h, data{1:ndata});
   endif
 
   drawnow ();
 
 endfunction
diff --git a/scripts/plot/__plr1__.m b/scripts/plot/__plr1__.m
--- a/scripts/plot/__plr1__.m
+++ b/scripts/plot/__plr1__.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __plr1__ (@var{h}, @var{theta}, @var{fmt})
 ## @end deftypefn
 
 ## Author: jwe
 
-function __plr1__ (h, theta, fmt)
+function retval = __plr1__ (h, theta, fmt)
 
   if (nargin != 3)
     print_usage ();
   endif
 
   [nr, nc] = size (theta);
   if (nr == 1)
     theta = theta';
@@ -40,11 +40,11 @@ function __plr1__ (h, theta, fmt)
   if (any (theta_i))
     rho = theta_i;
     theta = real (theta);
   else
     rho = theta;
     theta = (1:nr)';
   endif
 
-  __plr2__ (h, theta, rho, fmt);
+  retval = __plr2__ (h, theta, rho, fmt);
 
 endfunction
diff --git a/scripts/plot/__plr2__.m b/scripts/plot/__plr2__.m
--- a/scripts/plot/__plr2__.m
+++ b/scripts/plot/__plr2__.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __plr2__ (@var{h}, @var{theta}, @var{rho}, @var{fmt})
 ## @end deftypefn
 
 ## Author: jwe
 
-function __plr2__ (h, theta, rho, fmt)
+function retval = __plr2__ (h, theta, rho, fmt)
 
   if (nargin != 4)
     print_usage ();
   endif
 
   if (any (imag (theta)))
     theta = real (theta);
   endif
@@ -36,34 +36,34 @@ function __plr2__ (h, theta, rho, fmt)
   if (any (imag (rho)))
     rho = real (rho);
   endif
 
   if (isscalar (theta))
     if (isscalar (rho))
       x = rho * cos (theta);
       y = rho * sin (theta);
-      __plt__ ("polar", h, x, y, fmt);
+      retval = __plt__ ("polar", h, x, y, fmt);
     else
       error ("__plr2__: invalid data for plotting");
     endif
   elseif (isvector (theta))
     if (isvector (rho))
       if (length (theta) != length (rho))
         error ("__plr2__: vector lengths must match");
       endif
       if (rows (rho) == 1)
         rho = rho';
       endif
       if (rows (theta) == 1)
         theta = theta';
       endif
       x = rho .* cos (theta);
       y = rho .* sin (theta);
-      __plt__ ("polar", h, x, y, fmt);
+      retval = __plt__ ("polar", h, x, y, fmt);
     elseif (ismatrix (rho))
       [t_nr, t_nc] = size (theta);
       if (t_nr == 1)
         theta = theta';
         tmp = t_nr;
         t_nr = t_nc;
         t_nc = tmp;
       endif
@@ -74,17 +74,17 @@ function __plr2__ (h, theta, rho, fmt)
         r_nr = r_nc;
         r_nc = tmp;
       endif
       if (t_nr != r_nr)
         error ("__plr2__: vector and matrix sizes must match");
       endif
       x = diag (cos (theta)) * rho;
       y = diag (sin (theta)) * rho;
-      __plt__ ("polar", h, x, y, fmt);
+      retval = __plt__ ("polar", h, x, y, fmt);
     else
       error ("__plr2__: invalid data for plotting")
     endif
   elseif (ismatrix (theta))
     if (isvector (rho))
       [r_nr, r_nc] = size (rho);
       if (r_nr == 1)
         rho = rho';
@@ -100,24 +100,24 @@ function __plr2__ (h, theta, rho, fmt)
         t_nc = tmp;
       endif
       if (r_nr != t_nr)
         error ("__plr2__: vector and matrix sizes must match");
       endif
       diag_r = diag (rho);
       x = diag_r * cos (theta);
       y = diag_r * sin (theta);
-      __plt__ ("polar", h, x, y, fmt);
+      retval = __plt__ ("polar", h, x, y, fmt);
     elseif (ismatrix (rho))
       if (! size_equal (rho, theta))
         error ("__plr2__: matrix dimensions must match");
       endif
       x = rho .* cos (theta);
       y = rho .* sin (theta);
-      __plt__ ("polar", h, x, y, fmt);
+      retval = __plt__ ("polar", h, x, y, fmt);
     else
       error ("__plr2__: invalid data for plotting")
     endif
   else
     error ("__plr2__: invalid data for plotting")
   endif
 
 endfunction
diff --git a/scripts/plot/__plt1__.m b/scripts/plot/__plt1__.m
--- a/scripts/plot/__plt1__.m
+++ b/scripts/plot/__plt1__.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __plt1__ (@var{h}, @var{x1}, @var{fmt}, @var{key})
 ## @end deftypefn
 
 ## Author: jwe
 
-function __plt1__ (h, x1, options)
+function retval = __plt1__ (h, x1, options)
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
   if (nargin < 3 || isempty (options))
     options = __default_plot_options__ ();
   endif
@@ -48,11 +48,11 @@ function __plt1__ (h, x1, options)
   if (any (any (x1_i)))
     x2 = x1_i;
     x1 = real (x1);
   else
     x2 = x1;
     x1 = (1:nr)';
   endif
 
-  __plt2__ (h, x1, x2, options);
+  retval = __plt2__ (h, x1, x2, options);
 
 endfunction
diff --git a/scripts/plot/__plt2__.m b/scripts/plot/__plt2__.m
--- a/scripts/plot/__plt2__.m
+++ b/scripts/plot/__plt2__.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __plt2__ (@var{h}, @var{x1}, @var{x2}, @var{options})
 ## @end deftypefn
 
 ## Author: jwe
 
-function __plt2__ (h, x1, x2, options)
+function retval = __plt2__ (h, x1, x2, options)
 
   if (nargin < 3 || nargin > 4)
     print_usage ();
   endif
 
   if (nargin < 4 || isempty (options))
     options = __default_plot_options__ ();
   endif
@@ -40,35 +40,36 @@ function __plt2__ (h, x1, x2, options)
   if (any (any (imag (x1))))
     x1 = real (x1);
   endif
 
   if (any (any (imag (x2))))
     x2 = real (x2);
   endif
 
+  h_set = false;
   if (isscalar (x1))
     if (isscalar (x2))
-      __plt2ss__ (h, x1, x2, options);
+      retval = __plt2ss__ (h, x1, x2, options);
     else
       error ("__plt2__: invalid data for plotting");
     endif
   elseif (isvector (x1))
     if (isvector (x2))
-      __plt2vv__ (h, x1, x2, options);
+      retval = __plt2vv__ (h, x1, x2, options);
     elseif (ismatrix (x2))
-      __plt2vm__ (h, x1, x2, options);
+      retval = __plt2vm__ (h, x1, x2, options);
     else
       error ("__plt2__: invalid data for plotting");
     endif
   elseif (ismatrix (x1))
     if (isvector (x2))
-      __plt2mv__ (h, x1, x2, options);
+      retval = __plt2mv__ (h, x1, x2, options);
     elseif (ismatrix (x2))
-      __plt2mm__ (h, x1, x2, options);
+      retval = __plt2mm__ (h, x1, x2, options);
     else
       error ("__plt2__: invalid data for plotting");
     endif
   elseif (isempty (x1) && isempty (x2))
     ## FIXME -- should we do nothing, or should we create a line object
     ## with empty xdata and ydata properties?
   else
     error ("__plt2__: invalid data for plotting");
diff --git a/scripts/plot/__plt2mm__.m b/scripts/plot/__plt2mm__.m
--- a/scripts/plot/__plt2mm__.m
+++ b/scripts/plot/__plt2mm__.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __plt2mm__ (@var{h}, @var{x}, @var{y}, @var{options})
 ## @end deftypefn
 
 ## Author: jwe
 
-function __plt2mm__ (h, x, y, options)
+function retval = __plt2mm__ (h, x, y, options)
 
   if (nargin < 3 || nargin > 4)
     print_usage ();
   endif
 
   if (nargin < 4 || isempty (options))
     options = __default_plot_options__ ();
   endif
@@ -37,28 +37,29 @@ function __plt2mm__ (h, x, y, options)
   [y_nr, y_nc] = size (y);
 
   k = 1;
   if (x_nr == y_nr && x_nc == y_nc)
     if (x_nc > 0)
       if (numel (options) == 1)
 	options = repmat (options(:), x_nc, 1);
       endif
+      retval = zeros (x_nc, 1);
       for i = 1:x_nc
 	tkey = options(i).key;
 	if (! isempty (tkey))
 	  set (h, "key", "on");
 	endif
 	color = options(i).color;
 	if (isempty (color))
 	  color = __next_line_color__ ();
 	endif
-	line (x(:,i), y(:,i), "keylabel", tkey, "color", color,
-	      "linestyle", options(i).linestyle,
-	      "marker", options(i).marker);
+	retval(i) = line (x(:,i), y(:,i), "keylabel", tkey, "color", color,
+			  "linestyle", options(i).linestyle,
+			  "marker", options(i).marker);
       endfor
     else
       error ("__plt2mm__: arguments must be a matrices");
     endif
   else
     error ("__plt2mm__: matrix dimensions must match");
   endif
 
diff --git a/scripts/plot/__plt2mv__.m b/scripts/plot/__plt2mv__.m
--- a/scripts/plot/__plt2mv__.m
+++ b/scripts/plot/__plt2mv__.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __plt2mv__ (@var{h}, @var{x}, @var{y}, @var{options})
 ## @end deftypefn
 
 ## Author: jwe
 
-function __plt2mv__ (h, x, y, options)
+function retval = __plt2mv__ (h, x, y, options)
 
   if (nargin < 3 || nargin > 4)
     print_usage ();
   endif
 
   if (nargin < 4 || isempty (options))
     options = __default_plot_options__ ();
   endif
@@ -53,26 +53,27 @@ function __plt2mv__ (h, x, y, options)
   else
     error ("__plt2mv__: matrix dimensions must match");
   endif
 
   if (x_nc > 0)
     if (numel (options) == 1)
       options = repmat (options(:), x_nc, 1);
     endif
+    retval = zeros (x_nc, 1);
     for i = 1:x_nc
       tkey = options(i).key;
       if (! isempty (tkey))
 	set (h, "key", "on");
       endif
       color = options(i).color;
       if (isempty (color))
 	color = __next_line_color__ ();
       endif
-      line (x(:,i), y, "keylabel", tkey, "color", color,
-	    "linestyle", options(i).linestyle,
-	    "marker", options(i).marker);
+      retval(i) = line (x(:,i), y, "keylabel", tkey, "color", color,
+			"linestyle", options(i).linestyle,
+			"marker", options(i).marker);
     endfor
   else
     error ("__plt2mv__: arguments must be a matrices");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2ss__.m b/scripts/plot/__plt2ss__.m
--- a/scripts/plot/__plt2ss__.m
+++ b/scripts/plot/__plt2ss__.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __plt2ss__ (@var{h}, @var{x}, @var{y}, @var{options})
 ## @end deftypefn
 
 ## Author: jwe
 
-function __plt2ss__ (h, x, y, options)
+function retval = __plt2ss__ (h, x, y, options)
 
   if (nargin < 3 || nargin > 4)
     print_usage ();
   endif
 
   if (nargin < 4 || isempty (options))
     options = __default_plot_options__ ();
   endif
@@ -44,17 +44,16 @@ function __plt2ss__ (h, x, y, options)
     key = options.key;
     if (! isempty (key))
       set (h, "key", "on");
     endif
     color = options.color;
     if (isempty (color))
       color = __next_line_color__ ();
     endif
-    line (x, y, "keylabel", key, "color", color,
-	  "linestyle", options.linestyle,
-	  "marker", options.marker);
-);
+    retval = line (x, y, "keylabel", key, "color", color,
+		   "linestyle", options.linestyle,
+		   "marker", options.marker);
   else
     error ("__plt2ss__: arguments must be scalars");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2vm__.m b/scripts/plot/__plt2vm__.m
--- a/scripts/plot/__plt2vm__.m
+++ b/scripts/plot/__plt2vm__.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __plt2vm__ (@var{h}, @var{x}, @var{y}, @var{options})
 ## @end deftypefn
 
 ## Author: jwe
 
-function __plt2vm__ (h, x, y, options)
+function retval = __plt2vm__ (h, x, y, options)
 
   if (nargin < 3 || nargin > 4)
     print_usage ();
   endif
 
   if (nargin < 4 || isempty (options))
     options = __default_plot_options__ ();
   endif
@@ -53,26 +53,27 @@ function __plt2vm__ (h, x, y, options)
   else
     error ("__plt2vm__: matrix dimensions must match");
   endif
 
   if (y_nc > 0)
     if (numel (options) == 1)
       options = repmat (options(:), y_nc, 1);
     endif
+    retval = zeros (y_nc, 1);
     for i = 1:y_nc
       tkey = options(i).key;
       if (! isempty (tkey))
 	set (h, "key", "on");
       endif
       color = options(i).color;
       if (isempty (color))
 	color = __next_line_color__ ();
       endif
-      line (x, y(:,i), "keylabel", tkey, "color", color,
-	    "linestyle", options(i).linestyle,
-	    "marker", options(i).marker);
+      retval(i) = line (x, y(:,i), "keylabel", tkey, "color", color,
+			"linestyle", options(i).linestyle,
+			"marker", options(i).marker);
     endfor
   else
     error ("__plt2vm__: arguments must be a matrices");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2vv__.m b/scripts/plot/__plt2vv__.m
--- a/scripts/plot/__plt2vv__.m
+++ b/scripts/plot/__plt2vv__.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __plt2vv__ (@var{h}, @var{x}, @var{y}, @var{options})
 ## @end deftypefn
 
 ## Author: jwe
 
-function __plt2vv__ (h, x, y, options)
+function retval = __plt2vv__ (h, x, y, options)
 
   if (nargin < 3 || nargin > 4)
     print_usage ();
   endif
 
   if (nargin < 4 || isempty (options))
     options = __default_plot_options__ ();
   endif
@@ -58,16 +58,16 @@ function __plt2vv__ (h, x, y, options)
     key = options.key;
     if (! isempty (key))
       set (h, "key", "on");
     endif
     color = options.color;
     if (isempty (color))
       color = __next_line_color__ ();
     endif
-    line (x, y, "keylabel", key, "color", color,
-	  "linestyle", options.linestyle,
-	  "marker", options.marker);
+    retval = line (x, y, "keylabel", key, "color", color,
+		   "linestyle", options.linestyle,
+		   "marker", options.marker);
   else
     error ("__plt2vv__: vector lengths must match");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt__.m b/scripts/plot/__plt__.m
--- a/scripts/plot/__plt__.m
+++ b/scripts/plot/__plt__.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __plt__ (@code{caller}, @dots{})
 ## @end deftypefn
 
 ## Author: jwe
 
-function __plt__ (caller, h, varargin)
+function retval = __plt__ (caller, h, varargin)
 
   nargs = nargin - 2;
 
   if (nargs > 0)
 
     k = 1;
 
     x_set = false;
@@ -46,29 +46,29 @@ function __plt__ (caller, h, varargin)
       endif
 
       nargs--;
 
       if (ischar (next_arg) || iscellstr (next_arg))
 	if (x_set)
 	  options = __pltopt__ (caller, next_arg);
 	  if (y_set)
-	    __plt2__ (h, x, y, options);
+	    retval = __plt2__ (h, x, y, options);
 	  else
-	    __plt1__ (h, x, options);
+	    retval = __plt1__ (h, x, options);
 	  endif
 	  x_set = false;
 	  y_set = false;
 	else
 	  error ("plot: no data to plot");
 	endif
       elseif (x_set)
 	if (y_set)
 	  options = __pltopt__ (caller, {""});
-	  __plt2__ (h, x, y, options);
+	  retval = __plt2__ (h, x, y, options);
 	  x = next_arg;
 	  y_set = false;
 	else
 	  y = next_arg;
 	  y_set = true;
 	endif
       else
 	x = next_arg;
diff --git a/scripts/plot/loglog.m b/scripts/plot/loglog.m
--- a/scripts/plot/loglog.m
+++ b/scripts/plot/loglog.m
@@ -23,20 +23,24 @@
 ## description of @code{plot} for a description of the arguments that
 ## @code{loglog} will accept.
 ## @seealso{plot, semilogy, loglog, polar, mesh, contour, bar, stairs,
 ## replot, xlabel, ylabel, title}
 ## @end deftypefn
 
 ## Author: jwe
 
-function loglog (varargin)
+function retval = loglog (varargin)
 
   newplot ();
 
   ## [h, varargin] = __plt_get_axis_arg__ ("loglog", varargin{:});
   h = gca ();
 
   set (h, "xscale", "log", "yscale", "log");
 
-  __plt__ ("loglog", h, varargin{:});
+  tmp = __plt__ ("loglog", h, varargin{:});
+
+  if (nargout > 0)
+    retval = tmp;
+  endif
 
 endfunction
diff --git a/scripts/plot/loglogerr.m b/scripts/plot/loglogerr.m
--- a/scripts/plot/loglogerr.m
+++ b/scripts/plot/loglogerr.m
@@ -35,20 +35,24 @@
 ## @seealso{errorbar, semilogxerr, semilogyerr, polar, mesh, contour, 
 ## __pltopt__, bar, stairs, replot, xlabel, ylabel, title}
 ## @end deftypefn
 
 ## Created: 20.2.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
-function loglogerr (varargin)
+function retval = loglogerr (varargin)
 
   newplot ();
 
   ## [h, varargin] = __plt_get_axis_arg__ ("loglog", varargin{:});
   h = gca ();
 
   set (h, "xscale", "log", "yscale", "log");
 
-  __errcomm__ ("loglogerr", h, varargin{:});
+  tmp = __errcomm__ ("loglogerr", h, varargin{:});
+
+  if (nargout > 0)
+    retval = tmp;
+  endif
 
 endfunction
diff --git a/scripts/plot/plot.m b/scripts/plot/plot.m
--- a/scripts/plot/plot.m
+++ b/scripts/plot/plot.m
@@ -166,15 +166,19 @@
 ## This will plot the cosine and sine functions and label them accordingly
 ## in the key.
 ## @seealso{semilogx, semilogy, loglog, polar, mesh, contour, __pltopt__
 ## bar, stairs, errorbar, replot, xlabel, ylabel, title, print}
 ## @end deftypefn
 
 ## Author: jwe
 
-function plot (varargin)
+function retval = plot (varargin)
 
   newplot ();
 
-  __plt__ ("plot", gca (), varargin{:});
+  tmp = __plt__ ("plot", gca (), varargin{:});
+
+  if (nargout > 0)
+    retval = tmp;
+  endif
 
 endfunction
diff --git a/scripts/plot/plot3.m b/scripts/plot/plot3.m
--- a/scripts/plot/plot3.m
+++ b/scripts/plot/plot3.m
@@ -88,22 +88,24 @@
 ##
 ## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour, __pltopt__
 ## bar, stairs, errorbar, replot, xlabel, ylabel, title, print}
 ## @end deftypefn
 
 ## Author: Paul Kienzle
 ##         (modified from __plt__.m)
 
-function plot3 (varargin)
+function retval = plot3 (varargin)
 
   x_set = 0;
   y_set = 0;
   z_set = 0;
 
+  idx = 0;
+
   ## Gather arguments, decode format, and plot lines.
   for arg = 1:nargin
     new = varargin{arg};
 
     if (ischar (new))
       if (! z_set)
 	if (! y_set)
 	  if (! x_set)
@@ -143,20 +145,20 @@ function plot3 (varargin)
 	error ("plot3: x, y, and z must have the same shape");
       endif
 
       key = options.key;
       if (! isempty (key))
 	set (gca (), "key", "on");
       endif
 
-      line (x(:), y(:), z(:), "keylabel", key,
-	    "color", options.color,
-	    "linestyle", options.linestyle,
-	    "marker", options.marker);
+      tmp(++idx) = line (x(:), y(:), z(:), "keylabel", key,
+			 "color", options.color,
+			 "linestyle", options.linestyle,
+			 "marker", options.marker);
 
       x_set = 0;
       y_set = 0;
       z_set = 0;
     elseif (! x_set)
       x = new;
       x_set = 1;
     elseif (! y_set)
@@ -177,17 +179,17 @@ function plot3 (varargin)
 	  [x, y] = meshgrid (x, y);
 	endif
       endif
 
       if (! size_equal (x, y) || ! size_equal (x, z))
 	error ("plot3: x, y, and z must have the same shape");
       endif
 
-      line (x(:), y(:), z(:));
+      tmp(++idx) = line (x(:), y(:), z(:));
 
       x = new;
       y_set = 0;
       z_set = 0;
     endif
 
   endfor
 
@@ -223,15 +225,19 @@ function plot3 (varargin)
 	[x, y] = meshgrid (x, y);
       endif
     endif
 
     if (! size_equal (x, y) || ! size_equal (x, z))
       error ("plot3: x, y, and z must have the same shape");
     endif
 
-    line (x(:), y(:), z(:));
+    tmp(++idx) = line (x(:), y(:), z(:));
 
   endif
 
   set (gca (), "view", [-37.5, 30]);
 
+  if (nargout > 0 && idx > 0)
+    retval = tmp;
+  endif
+
 endfunction
diff --git a/scripts/plot/polar.m b/scripts/plot/polar.m
--- a/scripts/plot/polar.m
+++ b/scripts/plot/polar.m
@@ -24,37 +24,41 @@
 ##
 ## The optional third argument specifies the line type.
 ## @seealso{plot, semilogx, semilogy, loglog, mesh, contour, bar,
 ## stairs, replot, xlabel, ylabel, title}
 ## @end deftypefn
 
 ## Author: jwe
 
-function polar (varargin)
+function retval = polar (varargin)
 
   newplot ();
 
   ## [h, varargin] = __plt_get_axis_arg__ ("semilogx", varargin{:});
   h = gca ();
 
   nargs = numel (varargin);
 
   if (nargs == 3)
     if (! ischar (varargin{3}))
       error ("polar: third argument must be a string");
     endif
-    __plr2__ (h, varargin{:});
+    tmp = __plr2__ (h, varargin{:});
   elseif (nargin == 2)
     if (ischar (varargin{2}))
-      __plr1__ (h, varargin{:});
+      tmp = __plr1__ (h, varargin{:});
     else
       fmt = "";
-      __plr2__ (h, varargin{:}, fmt);
+      tmp = __plr2__ (h, varargin{:}, fmt);
     endif
   elseif (nargin == 1)
     fmt = "";
-    __plr1__ (h, varargin{:}, fmt);
+    tmp = __plr1__ (h, varargin{:}, fmt);
   else
     print_usage ();
   endif
 
+  if (nargout > 0)
+    retval = tmp;
+  endif
+
 endfunction
diff --git a/scripts/plot/semilogx.m b/scripts/plot/semilogx.m
--- a/scripts/plot/semilogx.m
+++ b/scripts/plot/semilogx.m
@@ -23,20 +23,24 @@
 ## the description of @code{plot} for a description of the arguments
 ## that @code{semilogx} will accept.
 ## @seealso{plot, semilogy, loglog, polar, mesh, contour, bar, stairs,
 ## replot, xlabel, ylabel, title}
 ## @end deftypefn
 
 ## Author: jwe
 
-function semilogx (varargin)
+function retval = semilogx (varargin)
 
   newplot ();
 
   ## [h, varargin] = __plt_get_axis_arg__ ("semilogx", varargin{:});
   h = gca ();
 
   set (h, "xscale", "log");
 
-  __plt__ ("semilogx", h, varargin{:});
+  tmp = __plt__ ("semilogx", h, varargin{:});
+
+  if (nargout > 0)
+    retval = tmp;
+  endif
 
 endfunction
diff --git a/scripts/plot/semilogxerr.m b/scripts/plot/semilogxerr.m
--- a/scripts/plot/semilogxerr.m
+++ b/scripts/plot/semilogxerr.m
@@ -35,20 +35,24 @@
 ## @seealso{errorbar, loglogerr semilogyerr, polar, mesh, contour, __pltopt__, 
 ## bar, stairs, replot, xlabel, ylabel, title}
 ## @end deftypefn
 
 ## Created: 20.2.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
-function semilogxerr (varargin)
+function retval = semilogxerr (varargin)
 
   newplot ();
 
   ## [h, varargin] = __plt_get_axis_arg__ ("loglog", varargin{:});
   h = gca ();
 
   set (h, "xscale", "log");
 
-  __errcomm__ ("semilogxerr", h, varargin{:});
+  tmp = __errcomm__ ("semilogxerr", h, varargin{:});
+
+  if (nargout > 0)
+    retval = tmp;
+  endif
 
 endfunction
diff --git a/scripts/plot/semilogy.m b/scripts/plot/semilogy.m
--- a/scripts/plot/semilogy.m
+++ b/scripts/plot/semilogy.m
@@ -23,20 +23,24 @@
 ## the description of @code{plot} for a description of the arguments
 ## that @code{semilogy} will accept.
 ## @seealso{plot, semilogx, loglog, polar, mesh, contour, bar, stairs,
 ## replot, xlabel, ylabel, title}
 ## @end deftypefn
 
 ## Author: jwe
 
-function semilogy (varargin)
+function retval = semilogy (varargin)
 
   newplot ();
 
   ## [h, varargin] = __plt_get_axis_arg__ ("semilogy", varargin{:});
   h = gca ();
 
   set (h, "yscale", "log");
 
-  __plt__ ("semilogy", h, varargin{:});
+  tmp = __plt__ ("semilogy", h, varargin{:});
+
+  if (nargout > 0)
+    retval = tmp;
+  endif
 
 endfunction
diff --git a/scripts/plot/semilogyerr.m b/scripts/plot/semilogyerr.m
--- a/scripts/plot/semilogyerr.m
+++ b/scripts/plot/semilogyerr.m
@@ -35,20 +35,24 @@
 ## @seealso{errorbar, loglogerr semilogxerr, polar, mesh, contour, __pltopt__, 
 ## bar, stairs, replot, xlabel, ylabel, title}
 ## @end deftypefn
 
 ## Created: 20.2.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
-function semilogyerr (varargin)
+function retval = semilogyerr (varargin)
 
   newplot ();
 
   ## [h, varargin] = __plt_get_axis_arg__ ("loglog", varargin{:});
   h = gca ();
 
   set (h, "yscale", "log");
 
-  __errcomm__ ("semilogyerr", h, varargin{:});
+  tmp = __errcomm__ ("semilogyerr", h, varargin{:});
+
+  if (nargout > 0)
+    retval = tmp;
+  endif
 
 endfunction
