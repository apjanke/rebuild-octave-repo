# HG changeset patch
# User jwe
# Date 983219175 0
#      Mon Feb 26 20:26:15 2001 +0000
# Node ID 4f1a26a730fdc393fa286acd14c01e762c783a18
# Parent  bc61e418f20079edd34efd1625b473134bd66c01
[project @ 2001-02-26 20:26:14 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2001-02-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* parse.y (gobble_leading_white_space): Handle CRLF here too.
+	* lex.l (check_for_garbage_after_fcn_def): Likewise.
+
+	* lex.l: Add numeric value of character to error message for
+	unrecognized characters.
+
 2001-02-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/minmax.cc (EMPTY_RETURN_CHECK): For empty matrix
 	args, make Octave's min	and max behave like Matlab.
 
 2001-02-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* OPERATORS/op-s-s.cc (el_or, el_and): Return bool value.
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -583,17 +583,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 	bool begin_comment = true;
 
 	int c;
 	while ((c = yyinput ()) != EOF && c != '\n')
 	  {
 	    if (begin_comment && (c == '#' || c == '%'))
 	      ; /* Skip leading comment characters. */
 	    else
-	      buf += (char) c;
+	      buf += static_cast<char> (c);
 	  }
 
 	octave_comment_buffer::append (buf);
       }
 
     current_input_column = 1;
     lexer_flags.quote_is_transpose = false;
     lexer_flags.cant_be_identifier = false;
@@ -714,19 +714,19 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 
 %{
 // Unrecognized input is a lexical error.
 %}
 
 . {
     current_input_column++;
 
-    error ("invalid character `%s' near line %d, column %d",
-	   undo_string_escape (yytext[0]), input_line_number,
-	   current_input_column);
+    error ("invalid character `%s' (ASCII %d) near line %d, column %d",
+	   undo_string_escape (yytext[0]), static_cast<int> (yytext[0]),
+	   input_line_number, current_input_column);
 
     return LEXICAL_ERROR;
   }
 
 %%
 
 // GAG.
 //
@@ -1223,17 +1223,17 @@ grab_help_text (void)
 	      continue;
 	    }
 	  else
 	    begin_comment = false;
 	}	
 
       if (in_comment)
 	{
-	  help_buf += (char) c;
+	  help_buf += static_cast<char> (c);
 
 	  if (c == '\n')
 	    {
 	      in_comment = false;
 	      discard_space = true;
 	    }
 	}
       else
@@ -1493,59 +1493,59 @@ scan_for_comments (const char *text)
 
       switch (c)
 	{
 	case '%':
 	case '#':
 	  if (in_comment)
 	    {
 	      if (! beginning_of_comment)
-		comment_buf += (char) c;
+		comment_buf += static_cast<char> (c);
 	    }
 	  else
 	    {
 	      in_comment = true;
 	      beginning_of_comment = true;
 	    }
 	  break;
 
 	case '\n':
 	  if (in_comment)
 	    {
-	      comment_buf += (char) c;
+	      comment_buf += static_cast<char> (c);
 	      octave_comment_buffer::append (comment_buf);
 	      comment_buf.resize (0);
 	      in_comment = false;
 	      beginning_of_comment = false;
 	    }
 	  break;
 
 	case '\r':
 	  if (in_comment)
-	    comment_buf += (char) c;
+	    comment_buf += static_cast<char> (c);
 	  if (i < len)
 	    {
 	      c = text[i++];
 
 	      if (c == '\n')
 		{
 		  if (in_comment)
 		    {
-		      comment_buf += (char) c;
+		      comment_buf += static_cast<char> (c);
 		      octave_comment_buffer::append (comment_buf);
 		      in_comment = false;
 		      beginning_of_comment = false;
 		    }
 		}
 	    }
 
 	default:
 	  if (in_comment)
 	    {
-	      comment_buf += (char) c;
+	      comment_buf += static_cast<char> (c);
 	      beginning_of_comment = false;
 	    }
 	  break;
 	}
     }
 
   if (! comment_buf.empty ())
     octave_comment_buffer::append (comment_buf);
@@ -1576,83 +1576,83 @@ eat_whitespace (void)
       current_input_column++;
 
       switch (c)
 	{
 	case ' ':
 	case '\t':
 	  if (in_comment)
 	    {
-	      comment_buf += (char) c;
+	      comment_buf += static_cast<char> (c);
 	      beginning_of_comment = false;
 	    }
 	  retval |= ATE_SPACE_OR_TAB;
 	  break;
 
 	case '\n':
 	  retval |= ATE_NEWLINE;
 	  if (in_comment)
 	    {
-	      comment_buf += (char) c;
+	      comment_buf += static_cast<char> (c);
 	      octave_comment_buffer::append (comment_buf);
 	      comment_buf.resize (0);
 	      in_comment = false;
 	      beginning_of_comment = false;
 	    }
 	  current_input_column = 0;
 	  break;
 
 	case '#':
 	case '%':
 	  if (in_comment)
 	    {
 	      if (! beginning_of_comment)
-		comment_buf += (char) c;
+		comment_buf += static_cast<char> (c);
 	    }
 	  else
 	    {
 	      in_comment = true;
 	      beginning_of_comment = true;
 	    }
 	  break;
 
 	case '.':
 	  if (in_comment)
 	    {
-	      comment_buf += (char) c;
+	      comment_buf += static_cast<char> (c);
 	      beginning_of_comment = false;
 	      break;
 	    }
 	  else
 	    {
 	      if (have_ellipsis_continuation ())
 		break;
 	      else
 		goto done;
 	    }
 
 	case '\\':
 	  if (in_comment)
 	    {
-	      comment_buf += (char) c;
+	      comment_buf += static_cast<char> (c);
 	      beginning_of_comment = false;
 	      break;
 	    }
 	  else
 	    {
 	      if (have_continuation ())
 		break;
 	      else
 		goto done;
 	    }
 
 	default:
 	  if (in_comment)
 	    {
-	      comment_buf += (char) c;
+	      comment_buf += static_cast<char> (c);
 	      beginning_of_comment = false;
 	      break;
 	    }
 	  else
 	    goto done;
 	}
     }
 
@@ -1738,80 +1738,82 @@ have_continuation (bool trailing_comment
 
   bool in_comment = false;
   bool beginning_of_comment = false;
 
   int c = 0;
 
   while ((c = yyinput ()) != EOF)
     {
-      buf << (char) c;
+      buf << static_cast<char> (c);
 
       switch (c)
 	{
 	case ' ':
 	case '\t':
 	  if (in_comment)
 	    {
-	      comment_buf += (char) c;
+	      comment_buf += static_cast<char> (c);
 	      beginning_of_comment = false;
 	    }
 	  break;
 
 	case '%':
 	case '#':
 	  if (trailing_comments_ok)
 	    {
 	      if (in_comment)
 		{
 		  if (! beginning_of_comment)
-		    comment_buf += (char) c;
+		    comment_buf += static_cast<char> (c);
 		}
 	      else
 		{
 		  in_comment = true;
 		  beginning_of_comment = true;
 		}
 	    }
 	  else
 	    goto cleanup;
 	  break;
 
 	case '\n':
 	  if (in_comment)
 	    {
-	      comment_buf += (char) c;
+	      comment_buf += static_cast<char> (c);
 	      octave_comment_buffer::append (comment_buf);
 	    }
 	  current_input_column = 0;
 	  promptflag--;
 	  return true;
 
 	case '\r':
 	  if (in_comment)
-	    comment_buf += (char) c;
+	    comment_buf += static_cast<char> (c);
 	  c = yyinput ();
 	  if (c == EOF)
 	    break;
 	  else if (c == '\n')
 	    {
 	      if (in_comment)
 		{
-		  comment_buf += (char) c;
+		  comment_buf += static_cast<char> (c);
 		  octave_comment_buffer::append (comment_buf);
 		}
 	      current_input_column = 0;
 	      promptflag--;
 	      return true;
 	    }
 
+	  // Fall through...
+
 	default:
 	  if (in_comment)
 	    {
-	      comment_buf += (char) c;
+	      comment_buf += static_cast<char> (c);
 	      beginning_of_comment = false;
 	    }
 	  else
 	    goto cleanup;
 	  break;
 	}
     }
 
@@ -1889,50 +1891,50 @@ handle_string (char delim, int text_styl
   while ((c = yyinput ()) != EOF)
     {
       current_input_column++;
 
       if (c == '\\')
 	{
 	  if (escape_pending)
 	    {
-	      buf << (char) c;
+	      buf << static_cast<char> (c);
 	      escape_pending = 0;
 	    }
 	  else
 	    {
 	      if (have_continuation (false))
 		escape_pending = 0;
 	      else
 		{
-		  buf << (char) c;
+		  buf << static_cast<char> (c);
 		  escape_pending = 1;
 		}
 	    }
 	  continue;
 	}
       else if (c == '.')
 	{
 	  if (! have_ellipsis_continuation (false))
-	    buf << (char) c;
+	    buf << static_cast<char> (c);
 	}
       else if (c == '\n')
 	{
 	  error ("unterminated string constant");
 	  break;
 	}
       else if (c == delim)
 	{
 	  if (escape_pending)
-	    buf << (char) c;
+	    buf << static_cast<char> (c);
 	  else
 	    {
 	      c = yyinput ();
 	      if (c == delim)
-		buf << (char) c;
+		buf << static_cast<char> (c);
 	      else
 		{
 		  unput (c);
 		  buf << std::ends;
 		  char *t = buf.str ();
 		  std::string s = do_string_escapes (t);
 		  delete [] t;
 
@@ -1954,17 +1956,17 @@ handle_string (char delim, int text_styl
 		    gripe_single_quote_string ();
 
 		  return TEXT;
 		}
 	    }
 	}
       else
 	{
-	  buf << (char) c;
+	  buf << static_cast<char> (c);
 	}
 
       escape_pending = 0;
     }
 
   return LEXICAL_ERROR;
 }
 
@@ -2343,50 +2345,71 @@ check_for_garbage_after_fcn_def (void)
       switch (c)
 	{
 	case ' ':
 	case '\t':
 	case ';':
 	case ',':
 	  if (in_comment)
 	    {
-	      comment_buf += (char) c;
-	      beginning_of_comment = false;
-	    }
-	  break;
-
-	case '\n':
-	  if (in_comment)
-	    {
-	      comment_buf += (char) c;
-	      octave_comment_buffer::append (comment_buf);
-	      comment_buf.resize (0);
-	      in_comment = false;
+	      comment_buf += static_cast<char> (c);
 	      beginning_of_comment = false;
 	    }
 	  break;
 
 	case '%':
 	case '#':
 	  if (in_comment)
 	    {
 	      if (! beginning_of_comment)
-		comment_buf += (char) c;
+		comment_buf += static_cast<char> (c);
 	    }
 	  else
 	    {
 	      in_comment = true;
 	      beginning_of_comment = true;
 	    }
 	  break;
 
+	case '\n':
+	  if (in_comment)
+	    {
+	      comment_buf += static_cast<char> (c);
+	      octave_comment_buffer::append (comment_buf);
+	      comment_buf.resize (0);
+	      in_comment = false;
+	      beginning_of_comment = false;
+	    }
+	  break;
+
+	case '\r':
+	  if (in_comment)
+	    comment_buf += static_cast<char> (c);
+	  c = yyinput ();
+	  if (c == EOF)
+	    break;
+	  else if (c == '\n')
+	    {
+	      if (in_comment)
+		{
+		  comment_buf += static_cast<char> (c);
+		  octave_comment_buffer::append (comment_buf);
+		  comment_buf.resize (0);
+		  in_comment = false;
+		  beginning_of_comment = false;
+		}
+	      break;
+	    }
+
+	  // Fall through...
+
 	default:
 	  if (in_comment)
 	    {
-	      comment_buf += (char) c;
+	      comment_buf += static_cast<char> (c);
 	      beginning_of_comment = false;
 	      break;
 	    }
 	  else
 	    {
 	      warning ("ignoring trailing garbage after end of function\n\
          near line %d of file `%s.m'", lineno, curr_fcn_file_name.c_str ());
 	      
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -2881,21 +2881,32 @@ looks_like_octave_copyright (const std::
 // code!
 
 static std::string
 gobble_leading_white_space (FILE *ffile, bool in_parts,
 			    bool update_pos, bool save_copyright)
 {
   std::string help_txt;
 
+  // TRUE means we have already seen the first block of comments.
   bool first_comments_seen = false;
+
+  // TRUE means we are at the beginning of a comment block.
   bool begin_comment = false;
+
+  // TRUE means we have already cached the help text.
   bool have_help_text = false;
+
+  // TRUE means we are currently reading a comment block.
   bool in_comment = false;
+
+  // TRUE means we should discard the first space from the input
+  // (used to strip leading spaces from the help text).
   bool discard_space = true;
+
   int c;
 
   while ((c = getc (ffile)) != EOF)
     {
       if (update_pos)
 	current_input_column++;
 
       if (begin_comment)
@@ -2950,31 +2961,51 @@ gobble_leading_white_space (FILE *ffile,
 	  switch (c)
 	    {
 	    case ' ':
 	    case '\t':
 	      if (first_comments_seen)
 		have_help_text = true;
 	      break;
 
+	    case '%':
+	    case '#':
+	      begin_comment = true;
+	      in_comment = true;
+	      break;
+
 	    case '\n':
 	      if (first_comments_seen)
 		have_help_text = true;
 	      if (update_pos)
 		{
 		  input_line_number++;
 		  current_input_column = 0;
 		}
 	      continue;
 
-	    case '%':
-	    case '#':
-	      begin_comment = true;
-	      in_comment = true;
-	      break;
+	    case '\r':
+	      c = getc (ffile);
+	      if (update_pos)
+		current_input_column++;
+	      if (c == EOF)
+		goto done;
+	      else if (c == '\n')
+		{
+		  if (first_comments_seen)
+		    have_help_text = true;
+		  if (update_pos)
+		    {
+		      input_line_number++;
+		      current_input_column = 0;
+		    } 
+		  continue;
+		}
+
+	      // Fall through...
 
 	    default:
 	      if (update_pos)
 		current_input_column--;
 	      ungetc (c, ffile);
 	      goto done;
 	    }
 	}
