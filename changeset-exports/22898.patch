# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1481865027 18000
#      Fri Dec 16 00:10:27 2016 -0500
# Node ID 9baa19102908e9abb4dd107c8cd3dce139a7e188
# Parent  4090c32fccf81e98a1b9701b85f120bb5376a587
refactor display and disp functions (bug #49794)

* pr-output.cc (Fdisp, Ffdisp): Tag with dispatch classes.
(Fdisplay): New function.

* ov-class.cc (octave_class::print_with_name):
Simply call octave_base_value::print_with_name.
* ov-classdef.cc (octave_classdef::print): Simply call print_raw.
(octave_classdef::print_with_name):
Simply call octave_base_value::print_with_name.

* variables.cc (bind_ans): Call display function to print result.
* pt-assign.cc (tree_simple_assignment::rvalue1,
tree_multi_assignment::rvalue): Likewise.
* pt-id.cc (tree_identifier::rvalue): Likewise.

* display.m: Delete.
* scripts/general/module.mk: Update.

diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -48,16 +48,17 @@ along with Octave; see the file COPYING.
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "ovl.h"
 #include "oct-stream.h"
 #include "octave-preserve-stream-state.h"
 #include "pager.h"
+#include "parse.h"
 #include "pr-output.h"
 #include "sysdep.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 // TRUE means use a scaled fixed point format for 'format long' and
 // 'format short'.
@@ -3478,16 +3479,17 @@ If the length of the smallest possible r
           n = m + 1;
         }
     }
 
   return ovl (string_vector (lst));
 }
 
 DEFUN (disp, args, nargout,
+       classes: cell char double function_handle int8 int16 int32 int64 logical single struct uint8 uint16 uint32 uint64
        doc: /* -*- texinfo -*-
 @deftypefn {} {} disp (@var{x})
 Display the value of @var{x}.
 
 For example:
 
 @example
 @group
@@ -3521,16 +3523,17 @@ formatted output in a string.
       arg.print (buf);
       retval = octave_value (buf.str (), arg.is_dq_string () ? '"' : '\'');
     }
 
   return retval;
 }
 
 DEFUN (fdisp, args, ,
+       classes: cell char double function_handle int8 int16 int32 int64 logical single struct uint8 uint16 uint32 uint64
        doc: /* -*- texinfo -*-
 @deftypefn {} {} fdisp (@var{fid}, @var{x})
 Display the value of @var{x} on the stream @var{fid}.
 
 For example:
 
 @example
 @group
@@ -3587,16 +3590,92 @@ Note that the output from @code{fdisp} a
 %!   loose = disp (foo.(fields{f}));
 %!   format compact;
 %!   compact = disp (foo.(fields{f}));
 %!   expected = strrep (loose, "\n\n", "\n");
 %!   assert (expected, compact);
 %! endfor
 */
 
+DEFUN (display, args, ,
+       classes: cell char double function_handle int8 int16 int32 int64 logical single struct uint8 uint16 uint32 uint64
+       doc: /* -*- texinfo -*-
+@deftypefn {} {} display (@var{obj})
+Display the contents of the object @var{obj}.
+
+The Octave interpreter calls the @code{display} function whenever it needs
+to present a class on-screen.  Typically, this would be a statement which
+does not end in a semicolon to suppress output.  For example:
+
+@example
+myobj = myclass (@dots{})
+@end example
+
+User-defined classes should overload the @code{display} method so that
+something useful is printed for a class object.  Otherwise, Octave will
+report only that the object is an instance of its class.
+
+@example
+@group
+myobj = myclass (@dots{})
+  @result{} myobj = <class myclass>
+@end group
+@end example
+
+@seealso{class, subsref, subsasgn}
+@end deftypefn */)
+{
+  int nargin = args.length ();
+
+  if (nargin < 1 || nargin > 2)
+    print_usage ();
+
+  std::string name;
+
+  if (nargin == 2)
+    name = args(1).xstring_value ("CALLER must be a string");
+  else
+    {
+      string_vector names = args.name_tags ();
+      std::string tmp = names(0);
+      name = valid_identifier (tmp) ? tmp : "ans";
+    }
+
+  // Only reason we got here is that there was no overloaded display
+  // function.  Rely on built-in functions to display whatever obj is.
+
+  octave_value value = args(0);
+  bool is_scalar = value.is_scalar_type ();
+
+  octave_stdout << name << (is_scalar ? " = " : " =\n\n");
+
+  // Use feval so that dispatch will also work for disp.
+
+  feval ("disp", ovl (value));
+
+  if (! is_scalar)
+    octave_stdout << std::endl;
+
+  return ovl ();
+}
+
+/*
+%!test
+%! str = evalc ("x = 1.1; display (x)");
+%! assert (str, "x =  1.1000\n");
+
+%!test
+%! str = evalc ("display (1.1)");
+%! assert (str, " 1.1000\n");
+
+## Test input validation
+%!error display ()
+%!error display (1,2)
+*/
+
 static void
 init_format_state (void)
 {
   free_format = false;
   plus_format = false;
   rat_format = false;
   bank_format = false;
   hex_format = 0;
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -1947,17 +1947,17 @@ bind_ans (const octave_value& val, bool 
           for (octave_idx_type i = 0; i < lst.length (); i++)
             bind_ans (lst(i), print);
         }
       else
         {
           symbol_table::force_assign (ans, val);
 
           if (print)
-            val.print_with_name (octave_stdout, ans);
+            feval ("display", ovl (val, ans));
         }
     }
 }
 
 void
 bind_internal_variable (const std::string& fname, const octave_value& val)
 {
   octave_value_list args;
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -1005,41 +1005,19 @@ octave_class::print_name_tag (std::ostre
   if (! Vcompact_format)
     newline (os);
 
   return retval;
 }
 
 void
 octave_class::print_with_name (std::ostream& os, const std::string& name,
-                               bool)
+                               bool print_padding)
 {
-  octave_value fcn = symbol_table::find_method ("display", class_name ());
-
-  if (fcn.is_defined ())
-    {
-      octave_value_list args;
-
-      count++;
-      args(0) = octave_value (this);
-
-      string_vector arg_names (1);
-
-      arg_names[0] = name;
-
-      args.stash_name_tags (arg_names);
-
-      feval (fcn.function_value (), args);
-    }
-  else
-    {
-      indent (os);
-      os << name << " = <class " << class_name () << ">";
-      newline (os);
-    }
+  octave_base_value::print_with_name (os, name, print_padding);
 }
 
 // Loading a class properly requires an exemplar map entry for success.
 // If we don't have one, we attempt to create one by calling the constructor
 // with no arguments.
 bool
 octave_class::reconstruct_exemplar (void)
 {
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -938,34 +938,16 @@ octave_classdef::undef_subsasgn (const s
     return octave_base_value::undef_subsasgn (type, idx, rhs);
 
   return octave_value ();
 }
 
 void
 octave_classdef::print (std::ostream& os, bool)
 {
-  if (! called_from_builtin ())
-    {
-      cdef_method meth = object.get_class ().find_method ("disp");
-
-      if (meth.ok ())
-        {
-          octave_value_list args;
-
-          count++;
-          args(0) = octave_value (this);
-
-          indent (os);
-          meth.execute (args, 0, true, "disp");
-
-          return;
-        }
-    }
-
   print_raw (os);
 }
 
 void
 octave_classdef::print_raw (std::ostream& os, bool) const
 {
   indent (os);
   os << "<object ";
@@ -981,35 +963,17 @@ octave_classdef::print_name_tag (std::os
 {
   return octave_base_value::print_name_tag (os, name);
 }
 
 void
 octave_classdef::print_with_name (std::ostream& os, const std::string& name,
                                   bool print_padding)
 {
-  cdef_method meth = object.get_class ().find_method ("display");
-
-  if (meth.ok ())
-    {
-      octave_value_list args;
-
-      count++;
-      args(0) = octave_value (this);
-
-      string_vector arg_names (1);
-
-      arg_names[0] = name;
-      args.stash_name_tags (arg_names);
-
-      indent (os);
-      meth.execute (args, 0, true, "display");
-    }
-  else
-    octave_base_value::print_with_name (os, name, print_padding);
+  octave_base_value::print_with_name (os, name, print_padding);
 }
 
 bool
 octave_classdef::is_instance_of (const std::string& cls_name) const
 {
   cdef_class cls = lookup_class (cls_name, false, false);
 
   if (cls.ok ())
diff --git a/libinterp/parse-tree/pt-assign.cc b/libinterp/parse-tree/pt-assign.cc
--- a/libinterp/parse-tree/pt-assign.cc
+++ b/libinterp/parse-tree/pt-assign.cc
@@ -28,18 +28,19 @@ along with Octave; see the file COPYING.
 #include <set>
 
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "input.h"
 #include "ovl.h"
 #include "oct-lvalue.h"
+#include "ov.h"
 #include "pager.h"
-#include "ov.h"
+#include "parse.h"
 #include "pt-arg-list.h"
 #include "pt-bp.h"
 #include "pt-assign.h"
 #include "pt-eval.h"
 #include "pt-walk.h"
 #include "utils.h"
 #include "variables.h"
 
@@ -112,18 +113,22 @@ tree_simple_assignment::rvalue1 (int)
               // object below, instead of the indexed
               // value (which should be the same as the
               // right hand side value).
 
               ult.clear_index ();
 
               octave_value lhs_val = ult.value ();
 
-              lhs_val.print_with_name (octave_stdout,
-                                       lhs->name ());
+              octave_value_list args = ovl (lhs_val, lhs->name ());
+              string_vector name_tags (2);
+              name_tags(0) = lhs->name ();
+              name_tags(1) = "name";
+              args.stash_name_tags (name_tags);
+              feval ("display", args);
             }
         }
       catch (octave::index_exception& e)
         {
           e.set_var (lhs->name ());
           std::string msg = e.message ();
           error_with_id (e.err_id (), msg.c_str ());
         }
@@ -319,17 +324,22 @@ tree_multi_assignment::rvalue (int)
               // the new value of the referenced object below,
               // instead of the indexed value (which should be
               // the same as the right hand side value).
 
               ult.clear_index ();
 
               octave_value lhs_val = ult.value ();
 
-              lhs_val.print_with_name (octave_stdout, lhs_elt->name ());
+              octave_value_list args = ovl (lhs_val, lhs_elt->name ());
+              string_vector name_tags (2);
+              name_tags(0) = lhs_elt->name ();
+              name_tags(1) = "name";
+              args.stash_name_tags (name_tags);
+              feval ("display", args);
             }
         }
 
       // Concatenate return values.
       retval = retval_list;
     }
 
   return retval;
diff --git a/libinterp/parse-tree/pt-id.cc b/libinterp/parse-tree/pt-id.cc
--- a/libinterp/parse-tree/pt-id.cc
+++ b/libinterp/parse-tree/pt-id.cc
@@ -23,16 +23,17 @@ along with Octave; see the file COPYING.
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include "error.h"
 #include "ovl.h"
 #include "oct-lvalue.h"
 #include "pager.h"
+#include "parse.h"
 #include "pt-bp.h"
 #include "pt-const.h"
 #include "pt-eval.h"
 #include "pt-id.h"
 #include "pt-walk.h"
 #include "symtab.h"
 #include "utils.h"
 #include "variables.h"
@@ -90,17 +91,24 @@ tree_identifier::rvalue (int nargout,
           retval = (lvalue_list
                     ? val.do_multi_index_op (nargout, tmp_args, lvalue_list)
                     : val.do_multi_index_op (nargout, tmp_args));
         }
       else
         {
           if (print_result () && nargout == 0
               && octave::tree_evaluator::statement_printing_enabled ())
-            val.print_with_name (octave_stdout, name ());
+            {
+              octave_value_list args = ovl (val, name ());
+              string_vector name_tags (2);
+              name_tags(0) = name ();
+              name_tags(1) = "name";
+              args.stash_name_tags (name_tags);
+              feval ("display", args);
+            }
 
           retval = val;
         }
     }
   else if (sym->is_added_static ())
     static_workspace_error ();
   else
     eval_undefined_error ();
diff --git a/scripts/general/display.m b/scripts/general/display.m
deleted file mode 100644
--- a/scripts/general/display.m
+++ /dev/null
@@ -1,75 +0,0 @@
-## Copyright (C) 2008-2016 David Bateman
-##
-## This file is part of Octave.
-##
-## Octave is free software; you can redistribute it and/or modify it
-## under the terms of the GNU General Public License as published by
-## the Free Software Foundation; either version 3 of the License, or
-## (at your option) any later version.
-##
-## Octave is distributed in the hope that it will be useful, but
-## WITHOUT ANY WARRANTY; without even the implied warranty of
-## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-## GNU General Public License for more details.
-##
-## You should have received a copy of the GNU General Public License
-## along with Octave; see the file COPYING.  If not, see
-## <http://www.gnu.org/licenses/>.
-
-## -*- texinfo -*-
-## @deftypefn {} {} display (@var{obj})
-## Display the contents of the object @var{obj}.
-##
-## The Octave interpreter calls the @code{display} function whenever it needs
-## to present a class on-screen.  Typically, this would be a statement which
-## does not end in a semicolon to suppress output.  For example:
-##
-## @example
-## myobj = myclass (@dots{})
-## @end example
-##
-## User-defined classes should overload the @code{display} method so that
-## something useful is printed for a class object.  Otherwise, Octave will
-## report only that the object is an instance of its class.
-##
-## @example
-## @group
-## myobj = myclass (@dots{})
-##   @result{} myobj = <class myclass>
-## @end group
-## @end example
-##
-## @seealso{class, subsref, subsasgn}
-## @end deftypefn
-
-function display (obj)
-
-  if (nargin != 1)
-    print_usage ();
-  endif
-
-  ## Only reason we got here is that there was no overloaded display function.
-  ## Rely on built-in functions to display whatever obj is.
-
-  varname = inputname (1);
-  if (! isempty (varname))
-    evalin ("caller", varname);
-  else
-    disp (obj);
-  endif
-
-endfunction
-
-
-%!test
-%! str = evalc ("x = 1.1; display (x)");
-%! assert (str, "x =  1.1000\n");
-
-%!test
-%! str = evalc ("display (1.1)");
-%! assert (str, " 1.1000\n"); 
-
-## Test input validation
-%!error display ()
-%!error display (1,2)
-
diff --git a/scripts/general/module.mk b/scripts/general/module.mk
--- a/scripts/general/module.mk
+++ b/scripts/general/module.mk
@@ -25,17 +25,16 @@ scripts_general_FCN_FILES = \
   scripts/general/common_size.m \
   scripts/general/cplxpair.m \
   scripts/general/cumtrapz.m \
   scripts/general/curl.m \
   scripts/general/dblquad.m \
   scripts/general/deal.m \
   scripts/general/deg2rad.m \
   scripts/general/del2.m \
-  scripts/general/display.m \
   scripts/general/divergence.m \
   scripts/general/fieldnames.m \
   scripts/general/flip.m \
   scripts/general/flipdim.m \
   scripts/general/fliplr.m \
   scripts/general/flipud.m \
   scripts/general/grabcode.m \
   scripts/general/gradient.m \
