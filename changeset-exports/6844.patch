# HG changeset patch
# User jwe
# Date 1188434783 0
#      Thu Aug 30 00:46:23 2007 +0000
# Node ID 9ac351b05b51f9a42173479cb42be71f97ce75d4
# Parent  9adfed86501fe2c578deffd991e46694b8145dec
[project @ 2007-08-30 00:46:23 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,20 @@
 2007-08-29  John W. Eaton  <jwe@octave.org>
 
+	* graphics.cc (class root_figure::properties):
+	Rename from root_figure::root_figure_properties.
+	(class figure::properties): Rename from figure::figure_properties.
+	(class axes::properties): Rename from axes::axes_properties.
+	(class line::properties): Rename from line::line_properties.
+	(class text::properties): Rename from text::text_properties.
+	(class image::properties): Rename from image::image_properties.
+	(class patch::properties): Rename from patch::patch_properties.
+	(class surface::properties): Rename from surface::surface_properties.
+
 	* base-list.h (octave_base_list::remove): Implement our own
 	remove_if function here.
 
 2007-08-28  John W. Eaton  <jwe@octave.org>
 
 	* graphics.h (OCTAVE_GRAPHICS_PROPERTY_INTERNAL): Also define
 	set_X functions for properties.
 	(base_properties): Move class definition before definition of
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -735,18 +735,18 @@ base_properties::delete_children (void)
 {
   octave_idx_type n = children.numel ();
 
   for (octave_idx_type i = 0; i < n; i++)
     gh_manager::free (children(i));
 }
 
 void
-root_figure::root_figure_properties::set (const property_name& name,
-					  const octave_value& val)
+root_figure::properties::set (const property_name& name,
+			      const octave_value& val)
 {
   if (name.compare ("currentfigure"))
     {
       octave_value tval = empty_to_nan (val);
 
       if (is_handle (tval))
 	{
 	  currentfigure = tval.double_value ();
@@ -759,30 +759,30 @@ root_figure::root_figure_properties::set
   else if (name.compare ("children"))
     children = maybe_set_children (children, val);
   else if (name.compare ("visible"))
     visible = val;
   else
     warning ("set: invalid property `%s'", name.c_str ());
 }
 
-octave_value root_figure::root_figure_properties::get (void) const
+octave_value root_figure::properties::get (void) const
 {
   Octave_map m;
 
   m.assign ("type", type);
   m.assign ("currentfigure", nan_to_empty (currentfigure));
   m.assign ("children", children);
   m.assign ("visible", visible);
 
   return m;
 }
 
 octave_value 
-root_figure::root_figure_properties::get (const property_name& name) const
+root_figure::properties::get (const property_name& name) const
 {
   octave_value retval;
 
   if (name.compare ("type"))
     retval = type;
   else if (name.compare ("currentfigure"))
     retval = nan_to_empty (currentfigure);
   else if (name.compare ("children"))
@@ -793,35 +793,35 @@ root_figure::root_figure_properties::get
     warning ("get: invalid property `%s'", name.c_str ());
 
   return retval;
 }
 
 property_list
 root_figure::factory_properties = root_figure::init_factory_properties ();
 
-std::string root_figure::root_figure_properties::go_name ("root figure");
+std::string root_figure::properties::go_name ("root figure");
 
 // ---------------------------------------------------------------------
 
-figure::figure_properties::figure_properties (const graphics_handle& mh,
-					      const graphics_handle& p)
+figure::properties::properties (const graphics_handle& mh,
+				const graphics_handle& p)
   : base_properties (go_name, mh, p),
     __plot_stream__ (Matrix ()),
     nextplot ("replace"),
     closerequestfcn (make_fcn_handle ("closereq")),
     currentaxes (octave_NaN),
     colormap (),
     visible ("on"),
     paperorientation ("portrait")
 { }
 
 void
-figure::figure_properties::set (const property_name& name,
-				const octave_value& val)
+figure::properties::set (const property_name& name,
+			 const octave_value& val)
 {
   bool modified = true;
 
   if (name.compare ("children"))
     children = maybe_set_children (children, val);
   else if (name.compare ("__modified__"))
     {
       __modified__ = val.bool_value ();
@@ -864,17 +864,17 @@ figure::figure_properties::set (const pr
       warning ("set: invalid property `%s'", name.c_str ());
     }
 
   if (modified)
     mark_modified ();
 }
 
 octave_value
-figure::figure_properties::get (void) const
+figure::properties::get (void) const
 {
   Octave_map m;
 
   m.assign ("type", type);
   m.assign ("parent", parent);
   m.assign ("children", children);
   m.assign ("__modified__", __modified__);
   m.assign ("__plot_stream__", __plot_stream__);
@@ -884,17 +884,17 @@ figure::figure_properties::get (void) co
   m.assign ("colormap", colormap);
   m.assign ("visible", visible);
   m.assign ("paperorientation", paperorientation);
 
   return m;
 }
 
 octave_value
-figure::figure_properties::get (const property_name& name) const
+figure::properties::get (const property_name& name) const
 {
   octave_value retval;
 
   if (name.compare ("type"))
     retval = type;
   else if (name.compare ("parent"))
     retval = parent;
   else if (name.compare ("children"))
@@ -917,17 +917,17 @@ figure::figure_properties::get (const pr
     retval = paperorientation;
   else
     warning ("get: invalid property `%s'", name.c_str ());
 
   return retval;
 }
 
 void
-figure::figure_properties::close (void)
+figure::properties::close (void)
 {
   if (! __plot_stream__.is_empty ())
     {
       octave_value_list args;
       args(1) = "\nquit;\n";
       args(0) = __plot_stream__;
       feval ("fputs", args);
       args.resize (1);
@@ -936,17 +936,17 @@ figure::figure_properties::close (void)
     }
 
   gh_manager::pop_figure (__myhandle__);
 
   xset (0, "currentfigure", gh_manager::current_figure ());
 }
 
 property_list::pval_map_type
-figure::figure_properties::factory_defaults (void)
+figure::properties::factory_defaults (void)
 {
   property_list::pval_map_type m;
 
   m["nextplot"] = "replace";
   // m["closerequestfcn"] = make_fcn_handle ("closereq");
   m["colormap"] = colormap_property ();
   m["visible"] = "on";
   m["paperorientation"] = "portrait";
@@ -965,21 +965,21 @@ figure::get_default (const property_name
       graphics_object parent_obj = gh_manager::get_object (parent);
 
       retval = parent_obj.get_default (name);
     }
 
   return retval;
 }
 
-std::string figure::figure_properties::go_name ("figure");
+std::string figure::properties::go_name ("figure");
 
 // ---------------------------------------------------------------------
 
-axes::axes_properties::axes_properties (const graphics_handle& mh,
+axes::properties::properties (const graphics_handle& mh,
 					const graphics_handle& p)
   : base_properties (go_name, mh, p),
     position (Matrix ()),
     title (octave_NaN),
     box ("on"),
     key ("off"),
     keybox ("off"),
     keypos (1),
@@ -1042,17 +1042,17 @@ axes::axes_properties::axes_properties (
 
   Matrix touterposition (1, 4, 0.0);
   touterposition(2) = 1;
   touterposition(3) = 1;
   outerposition = touterposition;
 }
 
 void
-axes::axes_properties::set (const property_name& name, const octave_value& val)
+axes::properties::set (const property_name& name, const octave_value& val)
 {
   bool modified = true;
 
   if (name.compare ("parent"))
     set_parent (val);
   else if (name.compare ("children"))
     children = maybe_set_children (children, val);
   else if (name.compare ("__modified__"))
@@ -1237,17 +1237,17 @@ axes::axes_properties::set (const proper
       warning ("set: invalid property `%s'", name.c_str ());
     }
 
   if (modified)
     mark_modified ();
 }
 
 void
-axes::axes_properties::set_defaults (base_graphics_object& obj,
+axes::properties::set_defaults (base_graphics_object& obj,
 				     const std::string& mode)
 {
   position = Matrix ();
   title = octave_NaN;
   box = "on";
   key = "off";
   keybox = "off";
   keypos = 1;
@@ -1319,17 +1319,17 @@ axes::axes_properties::set_defaults (bas
   delete_children ();
 
   children = Matrix ();
 
   override_defaults (obj);
 }
 
 octave_value
-axes::axes_properties::get (void) const
+axes::properties::get (void) const
 {
   Octave_map m;
 
   if (xisnan (title))
     title = gh_manager::make_graphics_handle ("text", __myhandle__);
 
   if (xisnan (xlabel))
     xlabel = gh_manager::make_graphics_handle ("text", __myhandle__);
@@ -1393,17 +1393,17 @@ axes::axes_properties::get (void) const
   m.assign ("visible", visible);
   m.assign ("nextplot", nextplot);
   m.assign ("outerposition", outerposition);
 
   return m;
 }
 
 octave_value
-axes::axes_properties::get (const property_name& name) const
+axes::properties::get (const property_name& name) const
 {
   octave_value retval;
 
   if (name.compare ("type"))
     retval = type;
   else if (name.compare ("parent"))
     retval = parent;
   else if (name.compare ("children"))
@@ -1530,32 +1530,32 @@ axes::axes_properties::get (const proper
     retval = outerposition;
   else
     warning ("get: invalid property `%s'", name.c_str ());
 
   return retval;
 }
 
 void
-axes::axes_properties::remove_child (const graphics_handle& h)
+axes::properties::remove_child (const graphics_handle& h)
 {
   if (! xisnan (title) && h == title)
     title = gh_manager::make_graphics_handle ("text", __myhandle__);
   else if (! xisnan (xlabel) && h == xlabel)
     xlabel = gh_manager::make_graphics_handle ("text", __myhandle__);
   else if (! xisnan (ylabel) && h == ylabel)
     ylabel = gh_manager::make_graphics_handle ("text", __myhandle__);
   else if (! xisnan (zlabel) && h == zlabel)
     zlabel = gh_manager::make_graphics_handle ("text", __myhandle__);
   else
     base_properties::remove_child (h);
 }
 
 void
-axes::axes_properties::delete_children (void)
+axes::properties::delete_children (void)
 {
   base_properties::delete_children ();
 
   if (! xisnan (title))
     gh_manager::free (title);
 
   if (! xisnan (xlabel))
     gh_manager::free (xlabel);
@@ -1563,17 +1563,17 @@ axes::axes_properties::delete_children (
   if (! xisnan (ylabel))
     gh_manager::free (ylabel);
 
   if (! xisnan (zlabel))
     gh_manager::free (zlabel);
 }
 
 property_list::pval_map_type
-axes::axes_properties::factory_defaults (void)
+axes::properties::factory_defaults (void)
 {
   property_list::pval_map_type m;
 
   m["position"] = Matrix ();
   m["title"] = octave_NaN;
   m["box"] = "on";
   m["key"] = "off";
   m["keybox"] = "off";
@@ -1655,33 +1655,33 @@ axes::get_default (const property_name& 
       graphics_object parent_obj = gh_manager::get_object (parent);
 
       retval = parent_obj.get_default (name);
     }
 
   return retval;
 }
 
-std::string axes::axes_properties::go_name ("axes");
+std::string axes::properties::go_name ("axes");
 
 // ---------------------------------------------------------------------
 
 static Matrix
 default_data (void)
 {
   Matrix retval (1, 2);
 
   retval(0) = 0;
   retval(1) = 1;
 
   return retval;
 }
 
-line::line_properties::line_properties (const graphics_handle& mh,
-					const graphics_handle& p)
+line::properties::properties (const graphics_handle& mh,
+			      const graphics_handle& p)
   : base_properties (go_name, mh, p),
     xdata (default_data ()),
     ydata (default_data ()),
     zdata (Matrix ()),
     ldata (Matrix ()),
     udata (Matrix ()),
     xldata (Matrix ()),
     xudata (Matrix ()),
@@ -1691,17 +1691,17 @@ line::line_properties::line_properties (
     marker ("none"),
     markeredgecolor ("auto"),
     markerfacecolor ("none"),
     markersize (1),
     keylabel ("")
 { }
 
 void
-line::line_properties::set (const property_name& name, const octave_value& val)
+line::properties::set (const property_name& name, const octave_value& val)
 {
   bool modified = true;
 
   if (name.compare ("parent"))
     set_parent (val);
   else if (name.compare ("children"))
     children = maybe_set_children (children, val);
   else if (name.compare ("__modified__"))
@@ -1745,17 +1745,17 @@ line::line_properties::set (const proper
       warning ("set: invalid property `%s'", name.c_str ());
     }
 
   if (modified)
     mark_modified ();
 }
 
 octave_value
-line::line_properties::get (void) const
+line::properties::get (void) const
 {
   Octave_map m;
 
   m.assign ("type", type);
   m.assign ("parent", parent);
   m.assign ("children", children);
   m.assign ("__modified__", __modified__);
   m.assign ("xdata", xdata);
@@ -1773,17 +1773,17 @@ line::line_properties::get (void) const
   m.assign ("markerface", markerfacecolor);
   m.assign ("markersize", markersize);
   m.assign ("keylabel", keylabel);
 
   return m;
 }
 
 octave_value
-line::line_properties::get (const property_name& name) const
+line::properties::get (const property_name& name) const
 {
   octave_value retval;
 
   if (name.compare ("type"))
     retval = type;
   else if (name.compare ("parent"))
     retval = parent;
   else if (name.compare ("children"))
@@ -1822,17 +1822,17 @@ line::line_properties::get (const proper
     retval = keylabel;
   else
     warning ("get: invalid property `%s'", name.c_str ());
 
   return retval;
 }
 
 property_list::pval_map_type
-line::line_properties::factory_defaults (void)
+line::properties::factory_defaults (void)
 {
   property_list::pval_map_type m;
 
   m["xdata"] = default_data ();
   m["ydata"] = default_data ();
   m["zdata"] = Matrix ();
   m["ldata"] = Matrix ();
   m["udata"] = Matrix ();
@@ -1845,33 +1845,33 @@ line::line_properties::factory_defaults 
   m["markeredgecolor"] = "auto";
   m["markerfacecolor"] = "none";
   m["markersize"] = 1;
   m["keylabel"] = "";
 
   return m;
 }
 
-std::string line::line_properties::go_name ("line");
+std::string line::properties::go_name ("line");
 
 // ---------------------------------------------------------------------
 
-text::text_properties::text_properties (const graphics_handle& mh,
-					const graphics_handle& p)
+text::properties::properties (const graphics_handle& mh,
+			      const graphics_handle& p)
   : base_properties (go_name, mh, p),
     string (""),
     units ("data"),
     position (Matrix (1, 3, 0.0)),
     rotation (0),
     horizontalalignment ("left"),
     color (Matrix (1, 3, 1.0))
 { }
 
 void
-text::text_properties::set (const property_name& name, const octave_value& val)
+text::properties::set (const property_name& name, const octave_value& val)
 {
   bool modified = true;
 
   if (name.compare ("parent"))
     set_parent (val);
   else if (name.compare ("children"))
     children = maybe_set_children (children, val);
   else if (name.compare ("__modified__"))
@@ -1897,17 +1897,17 @@ text::text_properties::set (const proper
       warning ("set: invalid property `%s'", name.c_str ());
     }
 
   if (modified)
     mark_modified ();
 }
 
 octave_value
-text::text_properties::get (void) const
+text::properties::get (void) const
 {
   Octave_map m;
 
   m.assign ("type", type);
   m.assign ("parent", parent);
   m.assign ("children", children);
   m.assign ("__modified__", __modified__);
   m.assign ("string", string);
@@ -1916,17 +1916,17 @@ text::text_properties::get (void) const
   m.assign ("rotation", rotation);
   m.assign ("horizontalalignment", horizontalalignment);
   m.assign ("color", color);
 
   return m;
 }
 
 octave_value
-text::text_properties::get (const property_name& name) const
+text::properties::get (const property_name& name) const
 {
   octave_value retval;
 
   if (name.compare ("type"))
     retval = type;
   else if (name.compare ("parent"))
     retval = parent;
   else if (name.compare ("children"))
@@ -1947,45 +1947,45 @@ text::text_properties::get (const proper
     retval = color;
   else
     warning ("get: invalid property `%s'", name.c_str ());
 
   return retval;
 }
 
 property_list::pval_map_type
-text::text_properties::factory_defaults (void)
+text::properties::factory_defaults (void)
 {
   property_list::pval_map_type m;
 
   m["string"] = "";
   m["units"] = "data";
   m["position"] = Matrix (1, 3, 0.0);
   m["rotation"] = 0;
   m["horizontalalignment"] = "left";
   m["color"] = Matrix (1, 3, 1.0);
 
   return m;
 }
 
-std::string text::text_properties::go_name ("text");
+std::string text::properties::go_name ("text");
 
 // ---------------------------------------------------------------------
 
-image::image_properties::image_properties (const graphics_handle& mh,
-					   const graphics_handle& p)
+image::properties::properties (const graphics_handle& mh,
+			       const graphics_handle& p)
   : base_properties (go_name, mh, p),
     cdata (Matrix ()),
     xdata (Matrix ()),
     ydata (Matrix ())
 { }
 
 void
-image::image_properties::set (const property_name& name,
-			      const octave_value& val)
+image::properties::set (const property_name& name,
+			const octave_value& val)
 {
   bool modified = true;
 
   if (name.compare ("parent"))
     set_parent (val);
   else if (name.compare ("children"))
     children = maybe_set_children (children, val);
   else if (name.compare ("__modified__"))
@@ -2005,33 +2005,33 @@ image::image_properties::set (const prop
       warning ("set: invalid property `%s'", name.c_str ());
     }
 
   if (modified)
     mark_modified ();
 }
 
 octave_value
-image::image_properties::get (void) const
+image::properties::get (void) const
 {
   Octave_map m;
 
   m.assign ("type", type);
   m.assign ("parent", parent);
   m.assign ("children", children);
   m.assign ("__modified__", __modified__);
   m.assign ("cdata", cdata);
   m.assign ("xdata", xdata);
   m.assign ("ydata", ydata);
 
   return m;
 }
 
 octave_value
-image::image_properties::get (const property_name& name) const
+image::properties::get (const property_name& name) const
 {
   octave_value retval;
 
   if (name.compare ("type"))
     retval = type;
   else if (name.compare ("parent"))
     retval = parent;
   else if (name.compare ("children"))
@@ -2046,33 +2046,33 @@ image::image_properties::get (const prop
     retval = ydata;
   else
     warning ("get: invalid property `%s'", name.c_str ());
 
   return retval;
 }
 
 property_list::pval_map_type
-image::image_properties::factory_defaults (void)
+image::properties::factory_defaults (void)
 {
   property_list::pval_map_type m;
 
   m["cdata"] = Matrix ();
   m["xdata"] = Matrix ();
   m["ydata"] = Matrix ();
 
   return m;
 }
 
-std::string image::image_properties::go_name ("image");
+std::string image::properties::go_name ("image");
 
 // ---------------------------------------------------------------------
 
-patch::patch_properties::patch_properties (const graphics_handle& mh,
-					   const graphics_handle& p)
+patch::properties::properties (const graphics_handle& mh,
+			       const graphics_handle& p)
   : base_properties (go_name, mh, p),
     cdata (Matrix ()),
     xdata (Matrix ()),
     ydata (Matrix ()),
     zdata (Matrix ()),
     facecolor (radio_values("{flat}|none|interp")),
     facealpha (1.0),
     edgecolor (color_values(0, 0, 0), radio_values("flat|none|interp")),
@@ -2080,18 +2080,18 @@ patch::patch_properties::patch_propertie
     linewidth (0.5),
     marker ("none"),
     markeredgecolor ("auto"),
     markerfacecolor ("none"),
     markersize (1)
 { }
 
 void
-patch::patch_properties::set (const property_name& name,
-			      const octave_value& val)
+patch::properties::set (const property_name& name,
+			const octave_value& val)
 {
   bool modified = true;
 
   if (name.compare ("parent"))
     set_parent (val);
   else if (name.compare ("children"))
     children = maybe_set_children (children, val);
   else if (name.compare ("__modified__"))
@@ -2132,17 +2132,17 @@ patch::patch_properties::set (const prop
       warning ("set: invalid property `%s'", name.c_str ());
     }
 
   if (modified)
     mark_modified ();
 }
 
 octave_value
-patch::patch_properties::get (void) const
+patch::properties::get (void) const
 {
   Octave_map m;
 
   m.assign ("type", type);
   m.assign ("parent", parent);
   m.assign ("children", children);
   m.assign ("__modified__", __modified__);
   m.assign ("cdata", cdata);
@@ -2158,17 +2158,17 @@ patch::patch_properties::get (void) cons
   m.assign ("markeredgecolor", markeredgecolor);
   m.assign ("markerface", markerfacecolor);
   m.assign ("markersize", markersize);
 
   return m;
 }
 
 octave_value
-patch::patch_properties::get (const property_name& name) const
+patch::properties::get (const property_name& name) const
 {
   octave_value retval;
 
   if (name.compare ("type"))
     retval = type;
   else if (name.compare ("parent"))
     retval = parent;
   else if (name.compare ("children"))
@@ -2203,17 +2203,17 @@ patch::patch_properties::get (const prop
     retval = markersize;
   else
     warning ("get: invalid property `%s'", name.c_str ());
 
   return retval;
 }
 
 property_list::pval_map_type
-patch::patch_properties::factory_defaults (void)
+patch::properties::factory_defaults (void)
 {
   property_list::pval_map_type m;
 
   m["cdata"] = Matrix ();
   m["xdata"] = Matrix ();
   m["ydata"] = Matrix ();
   m["zdata"] = Matrix ();
   m["facecolor"] = color_property();
@@ -2225,32 +2225,32 @@ patch::patch_properties::factory_default
   m["markeredgecolor"] = "auto";
   m["markerfacecolor"] = "none";
   m["markersize"] = 1;
 
 
   return m;
 }
 
-std::string patch::patch_properties::go_name ("patch");
+std::string patch::properties::go_name ("patch");
 
 // ---------------------------------------------------------------------
 
-surface::surface_properties::surface_properties (const graphics_handle& mh,
-						 const graphics_handle& p)
+surface::properties::properties (const graphics_handle& mh,
+				 const graphics_handle& p)
   : base_properties (go_name, mh, p),
     xdata (Matrix ()),
     ydata (Matrix ()),
     zdata (Matrix ()),
     keylabel ("")
 { }
 
 void
-surface::surface_properties::set (const property_name& name,
-				  const octave_value& val)
+surface::properties::set (const property_name& name,
+			  const octave_value& val)
 {
   bool modified = true;
 
   if (name.compare ("parent"))
     set_parent (val);
   else if (name.compare ("children"))
     children = maybe_set_children (children, val);
   else if (name.compare ("__modified__"))
@@ -2272,34 +2272,34 @@ surface::surface_properties::set (const 
       warning ("set: invalid property `%s'", name.c_str ());
     }
 
   if (modified)
     mark_modified ();
 }
 
 octave_value
-surface::surface_properties::get (void) const
+surface::properties::get (void) const
 {
   Octave_map m;
 
   m.assign ("type", type);
   m.assign ("parent", parent);
   m.assign ("children", children);
   m.assign ("__modified__", __modified__);
   m.assign ("xdata", xdata);
   m.assign ("ydata", ydata);
   m.assign ("zdata", zdata);
   m.assign ("keylabel", keylabel);
 
   return m;
 }
 
 octave_value
-surface::surface_properties::get (const property_name& name) const
+surface::properties::get (const property_name& name) const
 {
   octave_value retval;
 
   if (name.compare ("type"))
     retval = type;
   else if (name.compare ("parent"))
     retval = parent;
   else if (name.compare ("children"))
@@ -2316,29 +2316,29 @@ surface::surface_properties::get (const 
     retval = keylabel;
   else
     warning ("get: invalid property `%s'", name.c_str ());
 
   return retval;
 }
 
 property_list::pval_map_type
-surface::surface_properties::factory_defaults (void)
+surface::properties::factory_defaults (void)
 {
   property_list::pval_map_type m;
 
   m["xdata"] = Matrix ();
   m["ydata"] = Matrix ();
   m["zdata"] = Matrix ();
   m["keylabel"] = "";
 
   return m;
 }
 
-std::string surface::surface_properties::go_name ("surface");
+std::string surface::properties::go_name ("surface");
 
 // ---------------------------------------------------------------------
 
 octave_value
 base_graphics_object::get_default (const property_name& name) const
 {
   graphics_handle parent = get_parent ();
   graphics_object parent_obj = gh_manager::get_object (parent);
@@ -2424,23 +2424,23 @@ gh_manager::do_pop_figure (const graphic
     }
 }
 
 property_list::plist_map_type
 root_figure::init_factory_properties (void)
 {
   property_list::plist_map_type plist_map;
 
-  plist_map["figure"] = figure::figure_properties::factory_defaults ();
-  plist_map["axes"] = axes::axes_properties::factory_defaults ();
-  plist_map["line"] = line::line_properties::factory_defaults ();
-  plist_map["text"] = text::text_properties::factory_defaults ();
-  plist_map["image"] = image::image_properties::factory_defaults ();
-  plist_map["patch"] = patch::patch_properties::factory_defaults ();
-  plist_map["surface"] = surface::surface_properties::factory_defaults ();
+  plist_map["figure"] = figure::properties::factory_defaults ();
+  plist_map["axes"] = axes::properties::factory_defaults ();
+  plist_map["line"] = line::properties::factory_defaults ();
+  plist_map["text"] = text::properties::factory_defaults ();
+  plist_map["image"] = image::properties::factory_defaults ();
+  plist_map["patch"] = patch::properties::factory_defaults ();
+  plist_map["surface"] = surface::properties::factory_defaults ();
 
   return plist_map;
 }
 
 // ---------------------------------------------------------------------
 
 DEFUN (ishandle, args, ,
   "-*- texinfo -*-\n\
@@ -2893,18 +2893,18 @@ DEFUN (doit, args, , "")
 	  h = gh_manager::lookup (val);
 
 	  if (! xisnan (h))
 	    {
 	      graphics_object obj = gh_manager::get_object (h);
 
 	      if (obj.isa ("line"))
 		{
-		  line::line_properties& lp
-		    = dynamic_cast<line::line_properties&> (obj.get_properties ());
+		  line::properties& lp
+		    = dynamic_cast<line::properties&> (obj.get_properties ());
 		  retval = lp.get_xdata ();
 		  Matrix m (1, 5);
 		  m(0) = 0;
 		  m(1) = 1;
 		  m(2) = 2;
 		  m(3) = 3;
 		  m(4) = 4;
 		  lp.set_xdata (m);
diff --git a/src/graphics.h b/src/graphics.h
--- a/src/graphics.h
+++ b/src/graphics.h
@@ -696,26 +696,26 @@ private:
   base_graphics_object *rep;
 };
 
 // ---------------------------------------------------------------------
 
 class root_figure : public base_graphics_object
 {
 public:
-  class root_figure_properties : public base_properties
+  class properties : public base_properties
   {
   public:
-    root_figure_properties (void)
+    properties (void)
       : base_properties ("root figure", 0, octave_NaN),
 	currentfigure (octave_NaN),
 	visible ("on")
     { }
 
-    ~root_figure_properties (void) { }
+    ~properties (void) { }
 
     void set (const property_name& name, const octave_value& val);
 
     octave_value get (void) const;
 
     octave_value get (const property_name& name) const;
 
     std::string graphics_object_name (void) const { return go_name; }
@@ -723,69 +723,69 @@ public:
   private:
     OCTAVE_GRAPHICS_PROPERTY (graphics_handle, currentfigure);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, visible);
 
     static std::string go_name;
   };
 
 private:
-  root_figure_properties properties;
+  properties xproperties;
 
 public:
 
-  root_figure (void) : properties (), default_properties () { }
+  root_figure (void) : xproperties (), default_properties () { }
 
-  ~root_figure (void) { properties.delete_children (); }
+  ~root_figure (void) { xproperties.delete_children (); }
 
-  std::string type (void) const { return properties.graphics_object_name (); }
+  std::string type (void) const { return xproperties.graphics_object_name (); }
 
   void mark_modified (void) { }
 
   void override_defaults (base_graphics_object& obj)
   {
     // Now override with our defaults.  If the default_properties
     // list includes the properties for all defaults (line,
     // surface, etc.) then we don't have to know the type of OBJ
     // here, we just call its set function and let it decide which
     // properties from the list to use.
     obj.set_from_list (default_properties);
   }
 
   void set_from_list (property_list& plist)
   {
-    properties.set_from_list (*this, plist);
+    xproperties.set_from_list (*this, plist);
   }
 
   void set (const property_name& name, const octave_value& value)
   {
     if (name.compare ("default", 7))
       // strip "default", pass rest to function that will
       // parse the remainder and add the element to the
       // default_properties map.
       default_properties.set (name.substr (7), value);
     else
-      properties.set (name, value);
+      xproperties.set (name, value);
   }
 
   octave_value get (void) const
   {
-    return properties.get ();
+    return xproperties.get ();
   }
 
   octave_value get (const property_name& name) const
   {
     octave_value retval;
 
     if (name.compare ("default", 7))
       return get_default (name.substr (7));
     else if (name.compare ("factory", 7))
       return get_factory_default (name.substr (7));
     else
-      retval = properties.get (name);
+      retval = xproperties.get (name);
 
     return retval;
   }
 
   octave_value get_default (const property_name& name) const
   {
     octave_value retval = default_properties.lookup (name);
 
@@ -810,47 +810,47 @@ public:
     return default_properties.as_struct ("default");
   }
 
   octave_value get_factory_defaults (void) const
   {
     return factory_properties.as_struct ("factory");
   }
 
-  graphics_handle get_parent (void) const { return properties.get_parent (); }
+  graphics_handle get_parent (void) const { return xproperties.get_parent (); }
 
-  void remove_child (const graphics_handle& h) { properties.remove_child (h); }
+  void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
 
-  void adopt (const graphics_handle& h) { properties.adopt (h); }
+  void adopt (const graphics_handle& h) { xproperties.adopt (h); }
 
-  void reparent (const graphics_handle& np) { properties.reparent (np); }
+  void reparent (const graphics_handle& np) { xproperties.reparent (np); }
 
-  base_properties& get_properties (void) { return properties; }
+  base_properties& get_properties (void) { return xproperties; }
 
   bool valid_object (void) const { return true; }
 
 private:
   property_list default_properties;
 
   static property_list factory_properties;
 
   static property_list::plist_map_type init_factory_properties (void);
 };
 
 // ---------------------------------------------------------------------
 
 class figure : public base_graphics_object
 {
 public:
-  class figure_properties : public base_properties
+  class properties : public base_properties
   {
   public:
-    figure_properties (const graphics_handle& mh, const graphics_handle& p);
+    properties (const graphics_handle& mh, const graphics_handle& p);
 
-    ~figure_properties (void) { }
+    ~properties (void) { }
 
     void set (const property_name& name, const octave_value& val);
 
     octave_value get (void) const;
 
     octave_value get (const property_name& name) const;
 
     void close (void);
@@ -867,116 +867,116 @@ public:
     OCTAVE_GRAPHICS_PROPERTY (colormap_property, colormap);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, visible);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, paperorientation);
 
     static std::string go_name;
   };
 
 private:
-  figure_properties properties;
+  properties xproperties;
 
 public:
   figure (const graphics_handle& mh, const graphics_handle& p)
-    : base_graphics_object (), properties (mh, p), default_properties ()
+    : base_graphics_object (), xproperties (mh, p), default_properties ()
   {
-    properties.override_defaults (*this);
+    xproperties.override_defaults (*this);
   }
 
   ~figure (void)
   {
-    properties.delete_children ();
-    properties.close ();
+    xproperties.delete_children ();
+    xproperties.close ();
   }
 
-  std::string type (void) const { return properties.graphics_object_name (); }
+  std::string type (void) const { return xproperties.graphics_object_name (); }
 
-  void mark_modified (void) { properties.mark_modified (); }
+  void mark_modified (void) { xproperties.mark_modified (); }
 
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (root figure) to override first (properties knows how
     // to find the parent object).
-    properties.override_defaults (obj);
+    xproperties.override_defaults (obj);
 
     // Now override with our defaults.  If the default_properties
     // list includes the properties for all defaults (line,
     // surface, etc.) then we don't have to know the type of OBJ
     // here, we just call its set function and let it decide which
     // properties from the list to use.
     obj.set_from_list (default_properties);
   }
 
   void set_from_list (property_list& plist)
   {
-    properties.set_from_list (*this, plist);
+    xproperties.set_from_list (*this, plist);
   }
 
   void set (const property_name& name, const octave_value& value)
   {
     if (name.compare ("default", 7))
       // strip "default", pass rest to function that will
       // parse the remainder and add the element to the
       // default_properties map.
       default_properties.set (name.substr (7), value);
     else
-      properties.set (name, value);
+      xproperties.set (name, value);
   }
 
   octave_value get (void) const
   {
-    return properties.get ();
+    return xproperties.get ();
   }
 
   octave_value get (const property_name& name) const
   {
     octave_value retval;
 
     if (name.compare ("default", 7))
       retval = get_default (name.substr (7));
     else
-      retval = properties.get (name);
+      retval = xproperties.get (name);
 
     return retval;
   }
 
   octave_value get_default (const property_name& name) const;
 
   octave_value get_defaults (void) const
   {
     return default_properties.as_struct ("default");
   }
 
-  graphics_handle get_parent (void) const { return properties.get_parent (); }
+  graphics_handle get_parent (void) const { return xproperties.get_parent (); }
 
-  void remove_child (const graphics_handle& h) { properties.remove_child (h); }
+  void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
 
-  void adopt (const graphics_handle& h) { properties.adopt (h); }
+  void adopt (const graphics_handle& h) { xproperties.adopt (h); }
 
-  void reparent (const graphics_handle& np) { properties.reparent (np); }
+  void reparent (const graphics_handle& np) { xproperties.reparent (np); }
 
-  base_properties& get_properties (void) { return properties; }
+  base_properties& get_properties (void) { return xproperties; }
 
   bool valid_object (void) const { return true; }
 
 private:
   property_list default_properties;
 };
 
 // ---------------------------------------------------------------------
 
 class axes : public base_graphics_object
 {
 public:
-  class axes_properties : public base_properties
+  class properties : public base_properties
   {
   public:
-    axes_properties (const graphics_handle& mh, const graphics_handle& p);
+    properties (const graphics_handle& mh, const graphics_handle& p);
 
-    ~axes_properties (void) { }
+    ~properties (void) { }
 
     void set (const property_name& name, const octave_value& val);
 
     void set_defaults (base_graphics_object& obj, const std::string& mode);
 
     octave_value get (void) const;
 
     octave_value get (const property_name& name) const;
@@ -1039,118 +1039,118 @@ public:
     OCTAVE_GRAPHICS_PROPERTY (octave_value, visible);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, nextplot);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, outerposition);
 
     static std::string go_name;
   };
 
 private:
-  axes_properties properties;
+  properties xproperties;
 
 public:
   axes (const graphics_handle& mh, const graphics_handle& p)
-    : base_graphics_object (), properties (mh, p), default_properties ()
+    : base_graphics_object (), xproperties (mh, p), default_properties ()
   {
-    properties.override_defaults (*this);
+    xproperties.override_defaults (*this);
   }
 
-  ~axes (void) { properties.delete_children (); }
+  ~axes (void) { xproperties.delete_children (); }
 
-  std::string type (void) const { return properties.graphics_object_name (); }
+  std::string type (void) const { return xproperties.graphics_object_name (); }
 
-  void mark_modified (void) { properties.mark_modified (); }
+  void mark_modified (void) { xproperties.mark_modified (); }
 
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (figure) to override first (properties knows how
     // to find the parent object).
-    properties.override_defaults (obj);
+    xproperties.override_defaults (obj);
 
     // Now override with our defaults.  If the default_properties
     // list includes the properties for all defaults (line,
     // surface, etc.) then we don't have to know the type of OBJ
     // here, we just call its set function and let it decide which
     // properties from the list to use.
     obj.set_from_list (default_properties);
   }
 
   void set_from_list (property_list& plist)
   {
-    properties.set_from_list (*this, plist);
+    xproperties.set_from_list (*this, plist);
   }
 
   void set (const property_name& name, const octave_value& value)
   {
     if (name.compare ("default", 7))
       // strip "default", pass rest to function that will
       // parse the remainder and add the element to the
       // default_properties map.
       default_properties.set (name.substr (7), value);
     else
-      properties.set (name, value);
+      xproperties.set (name, value);
   }
 
   void set_defaults (const std::string& mode)
   {
-    properties.set_defaults (*this, mode);
+    xproperties.set_defaults (*this, mode);
   }
 
   octave_value get (void) const
   {
-    return properties.get ();
+    return xproperties.get ();
   }
 
   octave_value get (const property_name& name) const
   {
     octave_value retval;
 
     // FIXME -- finish this.
     if (name.compare ("default", 7))
       retval = get_default (name.substr (7));
     else
-      retval = properties.get (name);
+      retval = xproperties.get (name);
 
     return retval;
   }
 
   octave_value get_default (const property_name& name) const;
 
   octave_value get_defaults (void) const
   {
     return default_properties.as_struct ("default");
   }
 
-  graphics_handle get_parent (void) const { return properties.get_parent (); }
+  graphics_handle get_parent (void) const { return xproperties.get_parent (); }
 
-  void remove_child (const graphics_handle& h) { properties.remove_child (h); }
+  void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
 
-  void adopt (const graphics_handle& h) { properties.adopt (h); }
+  void adopt (const graphics_handle& h) { xproperties.adopt (h); }
 
-  void reparent (const graphics_handle& np) { properties.reparent (np); }
+  void reparent (const graphics_handle& np) { xproperties.reparent (np); }
 
-  base_properties& get_properties (void) { return properties; }
+  base_properties& get_properties (void) { return xproperties; }
 
   bool valid_object (void) const { return true; }
 
 private:
   property_list default_properties;
 };
 
 // ---------------------------------------------------------------------
 
 class line : public base_graphics_object
 {
 public:
-  class line_properties : public base_properties
+  class properties : public base_properties
   {
   public:
-    line_properties (const graphics_handle& mh, const graphics_handle& p);
+    properties (const graphics_handle& mh, const graphics_handle& p);
 
-    ~line_properties (void) { }
+    ~properties (void) { }
 
     void set (const property_name& name, const octave_value& val);
 
     octave_value get (void) const;
 
     octave_value get (const property_name& name) const;
 
     std::string graphics_object_name (void) const { return go_name; }
@@ -1173,82 +1173,82 @@ public:
     OCTAVE_GRAPHICS_PROPERTY (octave_value, markerfacecolor);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, markersize);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, keylabel);
 
     static std::string go_name;
   };
 
 private:
-  line_properties properties;
+  properties xproperties;
 
 public:
   line (const graphics_handle& mh, const graphics_handle& p)
-    : base_graphics_object (), properties (mh, p)
+    : base_graphics_object (), xproperties (mh, p)
   {
-    properties.override_defaults (*this);
+    xproperties.override_defaults (*this);
   }
 
-  ~line (void) { properties.delete_children (); }
+  ~line (void) { xproperties.delete_children (); }
 
-  std::string type (void) const { return properties.graphics_object_name (); }
+  std::string type (void) const { return xproperties.graphics_object_name (); }
 
-  void mark_modified (void) { properties.mark_modified (); }
+  void mark_modified (void) { xproperties.mark_modified (); }
 
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (figure) to override first (properties knows how
     // to find the parent object).
-    properties.override_defaults (obj);
+    xproperties.override_defaults (obj);
   }
 
   void set_from_list (property_list& plist)
   {
-    properties.set_from_list (*this, plist);
+    xproperties.set_from_list (*this, plist);
   }
 
   void set (const property_name& name, const octave_value& val)
   {
-    properties.set (name, val);
+    xproperties.set (name, val);
   }
 
   octave_value get (void) const
   {
-    return properties.get ();
+    return xproperties.get ();
   }
 
   octave_value get (const property_name& name) const
   {
-    return properties.get (name);
+    return xproperties.get (name);
   }
 
-  graphics_handle get_parent (void) const { return properties.get_parent (); }
+  graphics_handle get_parent (void) const { return xproperties.get_parent (); }
 
-  void remove_child (const graphics_handle& h) { properties.remove_child (h); }
+  void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
 
-  void adopt (const graphics_handle& h) { properties.adopt (h); }
+  void adopt (const graphics_handle& h) { xproperties.adopt (h); }
 
-  void reparent (const graphics_handle& h) { properties.reparent (h); }
+  void reparent (const graphics_handle& h) { xproperties.reparent (h); }
 
-  base_properties& get_properties (void) { return properties; }
+  base_properties& get_properties (void) { return xproperties; }
 
   bool valid_object (void) const { return true; }
 };
 
 // ---------------------------------------------------------------------
 
 class text : public base_graphics_object
 {
 public:
-  class text_properties : public base_properties
+  class properties : public base_properties
   {
   public:
-    text_properties (const graphics_handle& mh, const graphics_handle& p);
+    properties (const graphics_handle& mh, const graphics_handle& p);
 
-    ~text_properties (void) { }
+    ~properties (void) { }
 
     void set (const property_name& name, const octave_value& val);
 
     octave_value get (void) const;
 
     octave_value get (const property_name& name) const;
 
     std::string graphics_object_name (void) const { return go_name; }
@@ -1262,82 +1262,82 @@ public:
     octave_value rotation;
     octave_value horizontalalignment;
     octave_value color;
 
     static std::string go_name;
   };
 
 private:
-  text_properties properties;
+  properties xproperties;
 
 public:
   text (const graphics_handle& mh, const graphics_handle& p)
-    : base_graphics_object (), properties (mh, p)
+    : base_graphics_object (), xproperties (mh, p)
   {
-    properties.override_defaults (*this);
+    xproperties.override_defaults (*this);
   }
 
-  ~text (void) { properties.delete_children (); }
+  ~text (void) { xproperties.delete_children (); }
 
-  std::string type (void) const { return properties.graphics_object_name (); }
+  std::string type (void) const { return xproperties.graphics_object_name (); }
 
-  void mark_modified (void) { properties.mark_modified (); }
+  void mark_modified (void) { xproperties.mark_modified (); }
 
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (figure) to override first (properties knows how
     // to find the parent object).
-    properties.override_defaults (obj);
+    xproperties.override_defaults (obj);
   }
 
   void set_from_list (property_list& plist)
   {
-    properties.set_from_list (*this, plist);
+    xproperties.set_from_list (*this, plist);
   }
 
   void set (const property_name& name, const octave_value& val)
   {
-    properties.set (name, val);
+    xproperties.set (name, val);
   }
 
   octave_value get (void) const
   {
-    return properties.get ();
+    return xproperties.get ();
   }
 
   octave_value get (const property_name& name) const
   {
-    return properties.get (name);
+    return xproperties.get (name);
   }
 
-  graphics_handle get_parent (void) const { return properties.get_parent (); }
+  graphics_handle get_parent (void) const { return xproperties.get_parent (); }
 
-  void remove_child (const graphics_handle& h) { properties.remove_child (h); }
+  void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
 
-  void adopt (const graphics_handle& h) { properties.adopt (h); }
+  void adopt (const graphics_handle& h) { xproperties.adopt (h); }
 
-  void reparent (const graphics_handle& h) { properties.reparent (h); }
+  void reparent (const graphics_handle& h) { xproperties.reparent (h); }
 
-  base_properties& get_properties (void) { return properties; }
+  base_properties& get_properties (void) { return xproperties; }
 
   bool valid_object (void) const { return true; }
 };
 
 // ---------------------------------------------------------------------
 
 class image : public base_graphics_object
 {
 public:
-  class image_properties : public base_properties
+  class properties : public base_properties
   {
   public:
-    image_properties (const graphics_handle& mh, const graphics_handle& p);
+    properties (const graphics_handle& mh, const graphics_handle& p);
 
-    ~image_properties (void) { }
+    ~properties (void) { }
 
     void set (const property_name& name, const octave_value& val);
 
     octave_value get (void) const;
 
     octave_value get (const property_name& name) const;
 
     std::string graphics_object_name (void) const { return go_name; }
@@ -1348,82 +1348,82 @@ public:
     OCTAVE_GRAPHICS_PROPERTY (octave_value, cdata);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, xdata);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, ydata);
 
     static std::string go_name;
   };
 
 private:
-  image_properties properties;
+  properties xproperties;
 
 public:
   image (const graphics_handle& mh, const graphics_handle& p)
-    : base_graphics_object (), properties (mh, p)
+    : base_graphics_object (), xproperties (mh, p)
   {
-    properties.override_defaults (*this);
+    xproperties.override_defaults (*this);
   }
 
-  ~image (void) { properties.delete_children (); }
+  ~image (void) { xproperties.delete_children (); }
 
-  std::string type (void) const { return properties.graphics_object_name (); }
+  std::string type (void) const { return xproperties.graphics_object_name (); }
 
-  void mark_modified (void) { properties.mark_modified (); }
+  void mark_modified (void) { xproperties.mark_modified (); }
 
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (figure) to override first (properties knows how
     // to find the parent object).
-    properties.override_defaults (obj);
+    xproperties.override_defaults (obj);
   }
 
   void set_from_list (property_list& plist)
   {
-    properties.set_from_list (*this, plist);
+    xproperties.set_from_list (*this, plist);
   }
 
   void set (const property_name& name, const octave_value& val)
   {
-    properties.set (name, val);
+    xproperties.set (name, val);
   }
 
   octave_value get (void) const
   {
-    return properties.get ();
+    return xproperties.get ();
   }
 
   octave_value get (const property_name& name) const
   {
-    return properties.get (name);
+    return xproperties.get (name);
   }
 
-  graphics_handle get_parent (void) const { return properties.get_parent (); }
+  graphics_handle get_parent (void) const { return xproperties.get_parent (); }
 
-  void remove_child (const graphics_handle& h) { properties.remove_child (h); }
+  void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
 
-  void adopt (const graphics_handle& h) { properties.adopt (h); }
+  void adopt (const graphics_handle& h) { xproperties.adopt (h); }
 
-  void reparent (const graphics_handle& h) { properties.reparent (h); }
+  void reparent (const graphics_handle& h) { xproperties.reparent (h); }
 
-  base_properties& get_properties (void) { return properties; }
+  base_properties& get_properties (void) { return xproperties; }
 
   bool valid_object (void) const { return true; }
 };
 
 // ---------------------------------------------------------------------
 
 class patch : public base_graphics_object
 {
 public:
-  class patch_properties : public base_properties
+  class properties : public base_properties
   {
   public:
-    patch_properties (const graphics_handle& mh, const graphics_handle& p);
+    properties (const graphics_handle& mh, const graphics_handle& p);
 
-    ~patch_properties (void) { }
+    ~properties (void) { }
 
     void set (const property_name& name, const octave_value& val);
 
     octave_value get (void) const;
 
     octave_value get (const property_name& name) const;
 
     std::string graphics_object_name (void) const { return go_name; }
@@ -1444,82 +1444,82 @@ public:
     OCTAVE_GRAPHICS_PROPERTY (octave_value, markeredgecolor);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, markerfacecolor);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, markersize);
 
     static std::string go_name;
   };
 
 private:
-  patch_properties properties;
+  properties xproperties;
 
 public:
   patch (const graphics_handle& mh, const graphics_handle& p)
-    : base_graphics_object (), properties (mh, p)
+    : base_graphics_object (), xproperties (mh, p)
   {
-    properties.override_defaults (*this);
+    xproperties.override_defaults (*this);
   }
 
-  ~patch (void) { properties.delete_children (); }
+  ~patch (void) { xproperties.delete_children (); }
 
-  std::string type (void) const { return properties.graphics_object_name (); }
+  std::string type (void) const { return xproperties.graphics_object_name (); }
 
-  void mark_modified (void) { properties.mark_modified (); }
+  void mark_modified (void) { xproperties.mark_modified (); }
 
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (figure) to override first (properties knows how
     // to find the parent object).
-    properties.override_defaults (obj);
+    xproperties.override_defaults (obj);
   }
 
   void set_from_list (property_list& plist)
   {
-    properties.set_from_list (*this, plist);
+    xproperties.set_from_list (*this, plist);
   }
 
   void set (const property_name& name, const octave_value& val)
   {
-    properties.set (name, val);
+    xproperties.set (name, val);
   }
 
   octave_value get (void) const
   {
-    return properties.get ();
+    return xproperties.get ();
   }
 
   octave_value get (const property_name& name) const
   {
-    return properties.get (name);
+    return xproperties.get (name);
   }
 
-  graphics_handle get_parent (void) const { return properties.get_parent (); }
+  graphics_handle get_parent (void) const { return xproperties.get_parent (); }
 
-  void remove_child (const graphics_handle& h) { properties.remove_child (h); }
+  void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
 
-  void adopt (const graphics_handle& h) { properties.adopt (h); }
+  void adopt (const graphics_handle& h) { xproperties.adopt (h); }
 
-  void reparent (const graphics_handle& h) { properties.reparent (h); }
+  void reparent (const graphics_handle& h) { xproperties.reparent (h); }
 
-  base_properties& get_properties (void) { return properties; }
+  base_properties& get_properties (void) { return xproperties; }
 
   bool valid_object (void) const { return true; }
 };
 
 // ---------------------------------------------------------------------
 
 class surface : public base_graphics_object
 {
 public:
-  class surface_properties : public base_properties
+  class properties : public base_properties
   {
   public:
-    surface_properties (const graphics_handle& mh, const graphics_handle& p);
+    properties (const graphics_handle& mh, const graphics_handle& p);
 
-    ~surface_properties (void) { }
+    ~properties (void) { }
 
     void set (const property_name& name, const octave_value& val);
 
     octave_value get (void) const;
 
     octave_value get (const property_name& name) const;
 
     std::string graphics_object_name (void) const { return go_name; }
@@ -1531,67 +1531,67 @@ public:
     OCTAVE_GRAPHICS_PROPERTY (octave_value, ydata);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, zdata);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, keylabel);
 
     static std::string go_name;
   };
 
 private:
-  surface_properties properties;
+  properties xproperties;
 
 public:
   surface (const graphics_handle& mh, const graphics_handle& p)
-    : base_graphics_object (), properties (mh, p)
+    : base_graphics_object (), xproperties (mh, p)
   {
-    properties.override_defaults (*this);
+    xproperties.override_defaults (*this);
   }
 
-  ~surface (void) { properties.delete_children (); }
+  ~surface (void) { xproperties.delete_children (); }
 
-  std::string type (void) const { return properties.graphics_object_name (); }
+  std::string type (void) const { return xproperties.graphics_object_name (); }
 
-  void mark_modified (void) { properties.mark_modified (); }
+  void mark_modified (void) { xproperties.mark_modified (); }
 
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (figure) to override first (properties knows how
     // to find the parent object).
-    properties.override_defaults (obj);
+    xproperties.override_defaults (obj);
   }
 
   void set_from_list (property_list& plist)
   {
-    properties.set_from_list (*this, plist);
+    xproperties.set_from_list (*this, plist);
   }
 
   void set (const property_name& name, const octave_value& val)
   {
-    properties.set (name, val);
+    xproperties.set (name, val);
   }
 
   octave_value get (void) const
   {
-    return properties.get ();
+    return xproperties.get ();
   }
 
   octave_value get (const property_name& name) const
   {
-    return properties.get (name);
+    return xproperties.get (name);
   }
 
-  graphics_handle get_parent (void) const { return properties.get_parent (); }
+  graphics_handle get_parent (void) const { return xproperties.get_parent (); }
 
-  void remove_child (const graphics_handle& h) { properties.remove_child (h); }
+  void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
 
-  void adopt (const graphics_handle& h) { properties.adopt (h); }
+  void adopt (const graphics_handle& h) { xproperties.adopt (h); }
 
-  void reparent (const graphics_handle& h) { properties.reparent (h); }
+  void reparent (const graphics_handle& h) { xproperties.reparent (h); }
 
-  base_properties& get_properties (void) { return properties; }
+  base_properties& get_properties (void) { return xproperties; }
 
   bool valid_object (void) const { return true; }
 };
 
 octave_value
 get_property_from_handle (double handle, const std::string &property,
 			  const std::string &func);
 bool
