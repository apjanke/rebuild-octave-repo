# HG changeset patch
# User Rik <rik@octave.org>
# Date 1480006820 28800
#      Thu Nov 24 09:00:20 2016 -0800
# Node ID c88f8829678963c40d11a74368e2f49ff247dc6a
# Parent  bab05fcd38cb237abd8a535272f666014a76db31
normest.m: Overhaul function.

* normest.m: Match variable names to documentation names.  Recode input
validation for clarity.  Make BIST tests for input validation stricter.

diff --git a/scripts/linear-algebra/normest.m b/scripts/linear-algebra/normest.m
--- a/scripts/linear-algebra/normest.m
+++ b/scripts/linear-algebra/normest.m
@@ -30,23 +30,23 @@
 ## @var{tol} is the tolerance to which the 2-norm is calculated.  By default
 ## @var{tol} is 1e-6.
 ##
 ## The optional output @var{iter} returns the number of iterations that were
 ## required for @code{normest} to converge.
 ## @seealso{normest1, norm, cond, condest}
 ## @end deftypefn
 
-function [n, c] = normest (A, tol = 1e-6)
+function [nest, iter] = normest (A, tol = 1e-6)
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
 
-  if (! (isnumeric (A) && ndims (A) == 2))
+  if (! isnumeric (A) || ndims (A) != 2)
     error ("normest: A must be a numeric 2-D matrix");
   endif
 
   if (! (isscalar (tol) && isreal (tol)))
     error ("normest: TOL must be a real scalar");
   endif
 
   if (! isfloat (A))
@@ -55,31 +55,31 @@ function [n, c] = normest (A, tol = 1e-6
 
   tol = max (tol, eps (class (A)));
   ## Set random number generator to depend on target matrix
   v = rand ("state");
   rand ("state", full (trace (A)));
   ncols = columns (A);
   ## Randomize y to avoid bad guesses for important matrices.
   y = rand (ncols, 1);
-  c = 0;
-  n = 0;
+  iter = 0;
+  nest = 0;
   do
-    n0 = n;
+    n0 = nest;
     x = A * y;
     normx = norm (x);
     if (normx == 0)
       x = rand (ncols, 1);
     else
       x /= normx;
     endif
     y = A' * x;
-    n = norm (y);
-    c += 1;
-  until (abs (n - n0) <= tol * n)
+    nest = norm (y);
+    iter += 1;
+  until (abs (nest - n0) <= tol * nest)
 
   rand ("state", v);    # restore state of random number generator
 
 endfunction
 
 
 %!test
 %! A = toeplitz ([-2,1,0,0]);
@@ -87,13 +87,13 @@ endfunction
 
 %!test
 %! A = rand (10);
 %! assert (normest (A), norm (A), 1e-6);
 
 ## Test input validation
 %!error normest ()
 %!error normest (1, 2, 3)
-%!error normest ([true true])
-%!error normest (ones (3,3,3))
-%!error normest (1, [1, 2])
-%!error normest (1, 1+1i)
+%!error <A must be a numeric .* matrix> normest ([true true])
+%!error <A must be .* 2-D matrix> normest (ones (3,3,3))
+%!error <TOL must be a real scalar> normest (1, [1, 2])
+%!error <TOL must be a real scalar> normest (1, 1+1i)
 
