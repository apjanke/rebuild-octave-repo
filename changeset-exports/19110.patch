# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1411247816 14400
#      Sat Sep 20 17:16:56 2014 -0400
# Node ID fa48651fbb8ab62486dc82e8b412bd8750d2e242
# Parent  e90bfaadb489469338b86c594425949ce2ff9cd7
isstruct for classdef objects should not return true.

* ov.h (octave_value::is_classdef_object): New method.
* ov-base.h (octave_base_value::is_classdef_object): Likewise.
* ov-classdef.h (octave_classdef::is_classdef_object): Likewise.
(octave_classdef::is_map): Return false.
* variables.cc (generate_struct_completions): Do auto-completion for
classdef objects too.

diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -278,17 +278,18 @@ generate_struct_completions (const std::
 
           discard_error_messages = true;
           discard_warning_messages = true;
 
           octave_value tmp = eval_string (prefix, true, parse_status);
 
           frame.run ();
 
-          if (tmp.is_defined () && (tmp.is_map () || tmp.is_java ()))
+          if (tmp.is_defined () &&
+              (tmp.is_map () || tmp.is_java () || tmp.is_classdef_object ()))
             names = tmp.map_keys ();
         }
     }
 
   return names;
 }
 
 // FIXME: this will have to be much smarter to work "correctly".
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -361,16 +361,18 @@ public:
   virtual bool is_sq_string (void) const { return false; }
 
   virtual bool is_range (void) const { return false; }
 
   virtual bool is_map (void) const { return false; }
 
   virtual bool is_object (void) const { return false; }
 
+  virtual bool is_classdef_object (void) const { return false; }
+
   virtual bool is_java (void) const { return false; }
 
   virtual bool is_cs_list (void) const { return false; }
 
   virtual bool is_magic_colon (void) const { return false; }
 
   virtual bool is_all_va_args (void) const { return false; }
 
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -1404,20 +1404,22 @@ public:
     { return new octave_classdef (object.empty_clone ()); }
 
   cdef_object get_object (void) const { return object; }
 
   cdef_object& get_object_ref (void) { return object; }
 
   bool is_defined (void) const { return true; }
 
-  bool is_map (void) const { return true; }
+  bool is_map (void) const { return false; }
 
   bool is_object (void) const { return true; }
 
+  bool is_classdef_object (void) const { return true; }
+
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
   void print_with_name (std::ostream& os, const std::string& name,
                         bool print_padding = true);
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -567,16 +567,19 @@ public:
   { return rep->is_range (); }
 
   bool is_map (void) const
   { return rep->is_map (); }
 
   bool is_object (void) const
   { return rep->is_object (); }
 
+  bool is_classdef_object (void) const
+  { return rep->is_classdef_object (); }
+
   bool is_java (void) const
   { return rep->is_java (); }
 
   bool is_cs_list (void) const
   { return rep->is_cs_list (); }
 
   bool is_magic_colon (void) const
   { return rep->is_magic_colon (); }
