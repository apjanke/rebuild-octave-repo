# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1458404346 14400
#      Sat Mar 19 12:19:06 2016 -0400
# Node ID 20bf0ec536e240dd7c202b1227f3bcf3a1afd9c8
# Parent  7a19c5678f91200c8d88f0ab1dc1d0d5835370ea
integrate textscan more completely with octave_stream class

* oct-stream.h, oct-stream.cc (octave_stream::textscan,
octave_base_stream::do_textscan): New functions.

* oct-stream.cc (textscan): Move class declaration here.
* oct-stream.h: From here.

* oct-stream.cc (textscan_format_list, textscan):
New data member for error reporting.

* file-io.cc (Ftextscan): Parse format and ntimes arguments here.
Call octave_stream::textscan.

diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -1452,61 +1452,88 @@ Data columns are not padded; textscan re
 The second output, @var{position}, provides the position, in characters\n\
 from the beginning of the file or string, at which the processing stopped.\n\
 \n\
 @seealso{dlmread, fscanf, load, strread, textread}\n\
 @end deftypefn")
 {
   static std::string who = "textscan";
 
-  octave_value_list retval;
-
   if (args.length () < 1)
     print_usage ();
 
-  octave_value_list tmp_args = args.splice (0, 1);
+  std::string fmt;
+
+  // First argument must be FID or a character string.
+  int nskip = 1;
+
+  if (args.length () == 1)
+    {
+      // ommited format = %f.  explicit "" = width from file
+      fmt = "%f";
+    }
+  else if (args(1).is_string ())
+    {
+      fmt = args(1).string_value ();
+
+      if (args(1).is_sq_string ())
+        fmt = do_string_escapes (fmt);
+
+      nskip++;
+    }
+  else
+    error ("%s: FORMAT must be a string", who.c_str ());
+
+  octave_idx_type ntimes = -1;
+
+  if (args.length () > 2)
+    {
+      if (args(2).is_numeric_type ())
+        {
+          ntimes = args(2).idx_type_value ();
+
+          if (ntimes < args(2).double_value ())
+            error ("textscan: REPEAT = %g is too large",
+                   args(2).double_value ());
+
+          nskip++;
+        }
+    }
+
+  octave_value_list options = args.splice (0, nskip);
 
   octave_idx_type count = 0;
 
-  textscan tscanner;
-
   if (args(0).is_string ())
     {
       std::string data = args(0).string_value ();
 
       octave_stream os = octave_istrstream::create (data);
 
       if (! os.is_valid ())
         error ("%s: unable to create temporary input buffer", who.c_str ());
 
-      std::istream *isp = os.input_stream ();
-
-      octave_value result = tscanner.scan (*isp, tmp_args, count);
+      octave_value result = os.textscan (fmt, ntimes, options, "textscan",
+                                         count);
 
       std::string errmsg = os.error ();
 
       return ovl (result, count, errmsg);
     }
   else
     {
       octave_stream os = octave_stream_list::lookup (args(0), who);
 
-      std::istream *isp = os.input_stream ();
-
-      if (! isp)
-        error ("internal error: textscan called with invalid istream");
-
-      octave_value result = tscanner.scan (*isp, tmp_args, count);
+      octave_value result = os.textscan (fmt, ntimes, options, "textscan",
+                                         count);
 
       std::string errmsg = os.error ();
 
       return ovl (result, count, errmsg);
     }
-
-  return retval;
 }
 
 /*
 %!test
 %! str = "1,  2,  3,  4\n 5,  ,  ,  8\n 9, 10, 11, 12";
 %! fmtstr = "%f %d %f %s";
 %! c = textscan (str, fmtstr, 2, "delimiter", ",", "emptyvalue", -Inf);
 %! assert (isequal (c{1}, [1;5]));
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -1644,26 +1644,27 @@ public:
 
   // TRUE if we are not storing the result of this conversion.
   bool discard;
 
   // TRUE if the type is 'd', 'u', 'f', 'n'
   bool numeric;
 };
 
+// The (parsed) sequence of format specifiers.
+
 class textscan;
 
-// The (parsed) sequence of format specifiers.
-
 class
 textscan_format_list
 {
 public:
 
-  textscan_format_list (const std::string& fmt = std::string ());
+  textscan_format_list (const std::string& fmt = std::string (),
+                        const std::string& who = "textscan");
 
   ~textscan_format_list (void);
 
   octave_idx_type num_conversions (void) const { return nconv; }
 
   // The length can be different than the number of conversions.
   // For example, "x %d y %d z" has 2 conversions but the length of
   // the list is 3 because of the characters that appear after the
@@ -1698,16 +1699,19 @@ public:
   }
 
   void printme (void) const;
 
   bool ok (void) const { return (nconv >= 0); }
 
   operator const void* (void) const { return ok () ? this : 0; }
 
+  // What function name should be shown when reporting errors.
+  std::string who;
+
   // True if number of %f to be set from data file.
   bool set_from_first;
 
   // At least one conversion specifier is s,q,c, or [...].
   bool has_string;
 
   int read_first_row (delimited_stream& is, textscan& ts);
 
@@ -1733,31 +1737,186 @@ private:
 
   void add_elt_to_list (unsigned int width, int prec, int bitwidth,
                         octave_value val_type, bool discard,
                         char type,
                         const std::string& char_class = std::string ());
 
   void process_conversion (const std::string& s, size_t& i, size_t n);
 
+  std::string parse_char_class (const std::string& pattern) const;
+
   int finish_conversion (const std::string& s, size_t& i, size_t n,
                          unsigned int& width, int& prec, int& bitwidth,
                          octave_value& val_type,
                          bool discard, char& type);
   // No copying!
 
   textscan_format_list (const textscan_format_list&);
 
   textscan_format_list& operator = (const textscan_format_list&);
 };
 
-
-textscan_format_list::textscan_format_list (const std::string& s)
-  : set_from_first (false), has_string (false), nconv (0), curr_idx (0),
-    fmt_elts (), buf (0)
+// Main class to implement textscan.  Read data and parse it
+// according to a format.
+//
+// The calling sequence is
+//
+//   textscan scanner ();
+//   scanner.scan (...);
+
+class
+OCTINTERP_API
+textscan
+{
+public:
+
+  textscan (const std::string& who_arg = "textscan");
+
+  ~textscan (void) { }
+
+  octave_value scan (std::istream& isp, const std::string& fmt,
+                     octave_idx_type ntimes,
+                     const octave_value_list& options,
+                     octave_idx_type& read_count);
+
+private:
+
+  friend class textscan_format_list;
+
+  // What function name should be shown when reporting errors.
+  std::string who;
+
+  std::string buf;
+
+  // Three cases for delim_table and delim_list
+  // 1. delim_table empty, delim_list empty:  whitespace delimiters
+  // 2. delim_table = look-up table of delim chars, delim_list empty.
+  // 3. delim_table non-empty, delim_list = Cell array of delim strings
+
+  std::string whitespace_table;
+
+  // delim_table[i] == '\0' if i is not a delimiter.
+  std::string delim_table;
+
+  // String of delimiter characters.
+  std::string delims;
+
+  Cell comment_style;
+
+  // How far ahead to look to detect an open comment.
+  int comment_len;
+
+  // First character of open comment.
+  int comment_char;
+
+  octave_idx_type buffer_size;
+
+  std::string date_locale;
+
+  // 'inf' and 'nan' for formatted_double.
+  Cell inf_nan;
+
+  // Array of strings of delimiters.
+  Cell delim_list;
+
+  // Longest delimiter.
+  int delim_len;
+
+  octave_value empty_value;
+  std::string exp_chars;
+  int header_lines;
+  Cell treat_as_empty;
+
+  // Longest string to treat as "N/A".
+  int treat_as_empty_len;
+
+  std::string whitespace;
+
+  short eol1;
+  short eol2;
+  short return_on_error;
+
+  bool collect_output;
+  bool multiple_delims_as_one;
+  bool default_exp;
+  bool numeric_delim;
+
+  octave_idx_type lines;
+
+  octave_value do_scan (std::istream& isp, textscan_format_list& fmt_list,
+                        octave_idx_type ntimes);
+
+  void parse_options (const octave_value_list& args,
+                      textscan_format_list& fmt_list);
+
+  int read_format_once (delimited_stream& isp, textscan_format_list& fmt_list,
+                        std::list<octave_value>& retval,
+                        Array<octave_idx_type> row, int& done_after);
+
+  void scan_one (delimited_stream& is, const textscan_format_elt& fmt,
+                 octave_value& ov, Array<octave_idx_type> row);
+
+  // Methods to process a particular conversion specifier.
+  double read_double (delimited_stream& is,
+                      const textscan_format_elt& fmt) const;
+
+  void scan_complex (delimited_stream& is, const textscan_format_elt& fmt,
+                     Complex& val) const;
+
+  int scan_bracket (delimited_stream& is, const std::string& pattern,
+                    std::string& val) const;
+
+  int scan_caret (delimited_stream& is, const std::string& pattern,
+                  std::string& val) const;
+
+  void scan_string (delimited_stream& is, const textscan_format_elt& fmt,
+                    std::string& val) const;
+
+  void scan_cstring (delimited_stream& is, const textscan_format_elt& fmt,
+                     std::string& val) const;
+
+  void scan_qstring (delimited_stream& is, const textscan_format_elt& fmt,
+                     std::string& val);
+
+  // Helper methods.
+  std::string read_until (delimited_stream& is, const Cell& delimiters,
+                          const std::string& ends) const;
+
+  int lookahead (delimited_stream& is, const Cell& targets, int max_len,
+                 bool case_sensitive = true) const;
+
+  bool match_literal (delimited_stream& isp, const textscan_format_elt& elem);
+
+  int skip_whitespace (delimited_stream& is, bool EOLstop = false);
+
+  int skip_delim (delimited_stream& is);
+
+  bool is_delim (unsigned char ch) const
+  {
+    return ((delim_table.empty () && (isspace (ch) || ch == eol1 || ch == eol2))
+            || delim_table[ch] != '\0');
+  }
+
+  bool isspace (unsigned int ch) const { return whitespace_table[ch & 0xff]; }
+
+  // True if the only delimiter is whitespace.
+  bool whitespace_delim (void) const { return delim_table.empty (); }
+
+  // No copying!
+
+  textscan (const textscan&);
+
+  textscan& operator = (const textscan&);
+};
+
+textscan_format_list::textscan_format_list (const std::string& s,
+                                            const std::string& who_arg)
+  : who (who_arg), set_from_first (false), has_string (false),
+    nconv (0), curr_idx (0), fmt_elts (), buf (0)
 {
   size_t n = s.length ();
 
   size_t i = 0;
 
   unsigned int width = -1;              // Unspecified width = max (except %c)
   int prec = -1;
   int bitwidth = 0;
@@ -2046,17 +2205,18 @@ textscan_format_list::process_conversion
 
             if (finish_conversion (s, i, n, width, prec, bitwidth, val_type,
                                    discard, type) == 0)
               return;
           }
           break;
 
         default:
-          error ("textscan: '%%%c' is not a valid format specifier", s[i]);
+          error ("%s: '%%%c' is not a valid format specifier",
+                 who.c_str (), s[i]);
         }
 
       if (nconv < 0)
         break;
     }
 
   nconv = -1;
 }
@@ -2068,18 +2228,18 @@ textscan_format_list::process_conversion
 // unless both start and end characters are from the same class (upper
 // case, lower case, numeric), or this is not the first '-' in the
 // pattern.
 //
 // Keep both a running list of characters and a mask of which chars have
 // occurred.  The first is efficient for patterns with few characters.
 // The latter is efficient for [^...] patterns.
 
-static std::string
-textscan_char_class (const std::string& pattern)
+std::string
+textscan_format_list::parse_char_class (const std::string& pattern) const
 {
   int len = pattern.length ();
   if (len == 0)
     return "";
 
   std::string retval (256, '\0');
   std::string mask   (256, '\0');       // number of times chr has been seen
 
@@ -2128,22 +2288,24 @@ textscan_char_class (const std::string& 
             }
         }
       if (! was_range)
         {
           if (mask[ch]++ == 0)
             retval[out++] = ch;
           else if (ch != '-')
             warning_with_id ("octave:textscan-pattern",
-                             "textscan: [...] contains two '%c's", ch);
+                             "%s: [...] contains two '%c's",
+                             who.c_str (), ch);
 
           if (prev == '-' && mask['-'] >= 2)
-            warning_with_id ("octave:textscan-pattern",
-                             "textscan: [...] contains two '-'s "
-                             "outside range expressions");
+            warning_with_id
+              ("octave:textscan-pattern",
+               "%s: [...] contains two '-'s outside range expressions",
+               who.c_str ());
         }
       prev = ch;
       prev_prev_was_range = prev_was_range;
       prev_was_range = was_range;
     }
 
   if (flip)                             // [^...]
     {
@@ -2210,18 +2372,18 @@ textscan_format_list::finish_conversion 
           if (s[i-1] != ']')
             retval = nconv = -1;
         }
     }
 
   if (nconv >= 0)
     {
       if (beg_idx != std::string::npos && end_idx != std::string::npos)
-        char_class = textscan_char_class (s.substr (beg_idx,
-                                                    end_idx - beg_idx + 1));
+        char_class = parse_char_class (s.substr (beg_idx,
+                                                 end_idx - beg_idx + 1));
 
       add_elt_to_list (width, prec, bitwidth, val_type, discard, type,
                        char_class);
     }
 
   return retval;
 }
 
@@ -2346,92 +2508,47 @@ textscan_format_list::read_first_row (de
 
   // Create fmt_list now that the size is known
   for (octave_idx_type i = 1; i < nconv; i++)
     fmt_elts.push_back (new textscan_format_elt (*fmt_elts[0]));
 
   return retval;             // May have returned 4 above.
 }
 
-// Perform actual textscan: read data from stream, and create cell array.
-
 static Cell
 init_inf_nan (void)
 {
   Cell retval (dim_vector (1, 2));
 
   retval(0) = Cell (octave_value ("inf"));
   retval(1) = Cell (octave_value ("nan"));
 
   return retval;
 }
 
-textscan::textscan (void)
-  : buf (), whitespace_table (), delim_table (), delims (),
-    comment_style (), comment_len (0), comment_char (-2),
+textscan::textscan (const std::string& who_arg)
+  : who (who_arg), buf (), whitespace_table (), delim_table (),
+    delims (), comment_style (), comment_len (0), comment_char (-2),
     buffer_size (0), date_locale (), inf_nan (init_inf_nan ()),
     empty_value (octave_NaN), exp_chars ("edED"),
     header_lines (0), treat_as_empty (), treat_as_empty_len (0),
     whitespace (" \b\t"), eol1 ('\r'), eol2 ('\n'),
     return_on_error (2), collect_output (false),
     multiple_delims_as_one (false), default_exp (true),
     numeric_delim (false), lines (0)
 { }
 
 octave_value
-textscan::scan (std::istream& isp, const octave_value_list& args)
-{
-  octave_idx_type count = 0;
-
-  return scan (isp, args, count);
-}
-
-octave_value
-textscan::scan (std::istream& isp, const octave_value_list& args,
+textscan::scan (std::istream& isp, const std::string& fmt,
+                octave_idx_type ntimes, const octave_value_list& options,
                 octave_idx_type& count)
 {
-  std::string format;
-  int params = 0;
-
-  if (args.length () == 0)
-    format = "%f";      // ommited format = %f.  explicit "" = width from file
-  else if (args(0).is_string ())
-    {
-      format = args(0).string_value ();
-
-      if (args(0).is_sq_string ())
-        format = do_string_escapes (format);
-
-      params++;
-    }
-  else
-    error ("textscan: FORMAT must be a string, not <%s>",
-           args(0).class_name ().c_str ());
-
-  octave_idx_type ntimes = -1;
-
-  if (args.length () > 1)
-    {
-      if (args(1).is_numeric_type ())
-        {
-          ntimes = args(1).idx_type_value ();
-
-          if (ntimes < args(1).double_value ())
-            error ("textscan: REPEAT = %g is too large",
-                   args(1).double_value ());
-
-          params++;
-        }
-    }
-
-  octave_value_list tmp_args = args.splice (0, params);
-
-  textscan_format_list fmt_list (format);
-
-  parse_options (tmp_args, fmt_list);
+  textscan_format_list fmt_list (fmt);
+
+  parse_options (options, fmt_list);
 
   octave_value result = do_scan (isp, fmt_list, ntimes);
 
   // FIXME: this is probably not the best way to get count.  The
   // position could easily be larger than octave_idx_type when using
   // 32-bit indexing.
 
   std::ios::iostate state = isp.rdstate ();
@@ -2444,20 +2561,20 @@ textscan::scan (std::istream& isp, const
 
 octave_value
 textscan::do_scan (std::istream& isp, textscan_format_list& fmt_list,
                    octave_idx_type ntimes)
 {
   octave_value retval;
 
   if (fmt_list.num_conversions () == -1)
-    error ("textscan: invalid format specified");
+    error ("%s: invalid format specified", who.c_str ());
 
   if (fmt_list.num_conversions () == 0)
-    error ("textscan: no valid format conversion specifiers\n");
+    error ("%s: no valid format conversion specifiers", who.c_str ());
 
   // skip the first header_lines
   std::string dummy;
   for (int i = 0; i < header_lines && isp; i++)
     getline (isp, dummy, static_cast<char> (eol2));
 
   // Create our own buffered stream, for fast get/putback/tell/seek.
 
@@ -2529,17 +2646,17 @@ textscan::do_scan (std::istream& isp, te
 
           prev_type = col->type_id ();
         }
     }
 
   // This should be caught by earlier code, but this avoids a possible
   // infinite loop below.
   if (fmt_list.num_conversions () == 0)
-    error ("textscan: No conversions specified");
+    error ("%s: No conversions specified", who.c_str ());
 
   // Read the data.  This is the main loop.
   if (! err)
     {
       for (/* row set ~30 lines above */; row < ntimes || ntimes == -1; row++)
         {
           if (row == 0 || row >= size)
             {
@@ -2553,17 +2670,17 @@ textscan::do_scan (std::istream& isp, te
           err = read_format_once (is, fmt_list, out, row_idx, done_after);
 
           if (err > 0 || ! is || (lines >= ntimes && ntimes > -1))
             break;
         }
     }
 
   if ((err & 4) && ! return_on_error)
-    error ("textscan: Read error in field %d of row %d",
+    error ("%s: Read error in field %d of row %d", who.c_str (),
            done_after + 1, row + 1);
 
   // If file does not end in EOL, do not pad columns with NaN.
   bool uneven_columns = false;
   if (err & 4)
     uneven_columns = true;
   else if (isp.eof ())
     {
@@ -3350,18 +3467,18 @@ textscan::read_format_once (delimited_st
 
       // Clear fail of previous numeric conversions.
       is.clear ();
 
       switch (elem->type)
         {
         case 'C':
         case 'D':
-          std::cerr << "textscan: Conversion %" << elem->type
-                    << " not yet implemented\n";
+          warning ("%s: conversion %c not yet implemented",
+                   who.c_str (), elem->type);
           break;
 
         case 'u':
         case 'd':
         case 'f':
         case 'n':
         case 's':
         case '[':
@@ -3442,25 +3559,26 @@ textscan::read_format_once (delimited_st
 void
 textscan::parse_options (const octave_value_list& args,
                          textscan_format_list& fmt_list)
 {
   int last = args.length ();
   int n = last;
 
   if (n & 1)
-    error ("textscan: %d parameters given, but only %d values", n-n/2, n/2);
+    error ("%s: %d parameters given, but only %d values",
+           who.c_str (), n-n/2, n/2);
 
   delim_len = 1;
   bool have_delims = false;
   for (int i = 0; i < last; i += 2)
     {
       if (! args(i).is_string ())
-        error ("textscan: Invalid paramter type <%s> for parameter %d",
-               args(i).type_name ().c_str (), i/2 + 1);
+        error ("%s: Invalid paramter type <%s> for parameter %d",
+               who.c_str (), args(i).type_name ().c_str (), i/2 + 1);
 
       std::string param = args(i).string_value ();
       std::transform (param.begin (), param.end (),
                       param.begin (), ::tolower);
       if (param == "delimiter")
         {
           bool invalid = true;
           if (args(i+1).is_string ())
@@ -3484,39 +3602,38 @@ textscan::parse_options (const octave_va
                     {
                       octave_idx_type len = delim_list(j).string_value ()
                                                          .length ();
                       delim_len = std::max (static_cast<int> (len), delim_len);
                     }
                 }
             }
           if (invalid)
-            error ("textscan:  Delimiters must be either a string or "
-                   "cell array of strings");
+            error ("%s: Delimiters must be either a string or cell array of strings",
+                   who.c_str ());
         }
       else if (param == "commentstyle")
         {
           if (args(i+1).is_string ())
             {   // check here for names like "C++", "C", "shell", ...?
               comment_style = Cell (args(i+1));
             }
           else if (args(i+1).is_cell ())
             {
               comment_style = args(i+1).cell_value ();
               int len = comment_style.numel ();
               if ((len >= 1 && ! comment_style (0).is_string ())
                   || (len >= 2 && ! comment_style (1).is_string ())
                   || (len >= 3))
-                error ("textscan: CommentStyle must be either a string or "
-                       "cell array of one or two strings");
+                error ("%s: CommentStyle must be either a string or cell array of one or two strings",
+                       who.c_str ());
             }
           else
-            error ("textscan:  CommentStyle must be either a string"
-                   " or cell array of one or two strings, not <%s>",
-                   args(i+1).class_name ().c_str ());
+            error ("%s: CommentStyle must be either a string or cell array of one or two strings",
+                   who.c_str ());
 
           // How far ahead do we need to look to detect an open comment
           // and which character do we look for?
           if (comment_style.numel () >= 1)
             {
               comment_len  = comment_style (0).string_value ().size ();
               comment_char = comment_style (0).string_value ()[0];
             }
@@ -3538,87 +3655,88 @@ textscan::parse_options (const octave_va
                 else
                   {
                     int k = treat_as_empty (j).string_value ().size ();
                     if (k > treat_as_empty_len)
                       treat_as_empty_len = k;
                   }
             }
           if (invalid)
-            error ("textscan:  TreatAsEmpty must be either a string or "
-                   "cell array of one or two strings");
+            error ("%s: TreatAsEmpty must be either a string or cell array of one or two strings",
+                   who.c_str ());
 
           // FIXME Ensure none is a prefix of a later one. Sort by length?
         }
       else if (param == "collectoutput")
         {
           if (args(i+1).is_numeric_type ())
             collect_output = args(i+1).bool_value ();
           else
-            error ("textscan:  CollectOutput must be logical or numeric");
+            error ("%s: CollectOutput must be logical or numeric",
+                   who.c_str ());
         }
       else if (param == "emptyvalue")
         {
           if (args(i+1).is_numeric_type ())
             empty_value = args(i+1).scalar_value ();
           else
-            error ("textscan: EmptyValue must be numeric, not <%s>",
-                   args(i+1).class_name ().c_str ());
+            error ("%s: EmptyValue must be numeric", who.c_str ());
         }
       else if (param == "headerlines")
         {
           if (args(i+1).is_numeric_type ())
             header_lines = args(i+1).scalar_value ();
           else
-            error ("textscan: HeaderLines must be numeric");
+            error ("%s: HeaderLines must be numeric", who.c_str ());
         }
       else if (param == "bufsize")
         {
           if (args(i+1).is_numeric_type ())
             buffer_size = args(i+1).scalar_value ();
           else
-            error ("textscan: BufSize must be numeric");
+            error ("%s: BufSize must be numeric", who.c_str ());
         }
       else if (param == "multipledelimsasone")
         {
           if (args(i+1).is_numeric_type ())
             {
               if (args(i+1).bool_value ())
                 multiple_delims_as_one = true;
             }
           else
-            error ("textscan: MultipleDimsAsOne must be logical or numeric");
+            error ("%s: MultipleDimsAsOne must be logical or numeric",
+                   who.c_str ());
         }
       else if (param == "returnonerror")
         {
           if (args(i+1).is_numeric_type ())
             return_on_error = args(i+1).bool_value ();
           else if (args(i+1).is_string ()
                    && args(i+1).string_value () == "continue")
             return_on_error = 2;
           else
-            error ("textscan: ReturnOnError must be logical or "
-                   "numeric, or 'continue'");
+            error ("%s: ReturnOnError must be logical or numeric, or 'continue'",
+                   who.c_str ());
         }
       else if (param == "whitespace")
         {
           if (args(i+1).is_string ())
             whitespace = args(i+1).string_value ();
           else
-            error ("textscan: Whitespace must be a character string");
+            error ("%s: Whitespace must be a character string", who.c_str ());
         }
       else if (param == "expchars")
         {
           if (args(i+1).is_string ())
             {
               exp_chars = args(i+1).string_value ();
               default_exp = false;
             }
           else
-            error ("textscan: ExpChars must be a character string");
+            error ("%s: ExpChars must be a character string", who.c_str ());
         }
       else if (param == "endofline")
         {
           bool valid = true;
           if (args(i+1).is_string ())
             {
               std::string s = args(i+1).string_value ();
               if (args(i+1).is_sq_string ())
@@ -3636,21 +3754,21 @@ textscan::parse_options (const octave_va
                     valid = false;
                 }
               else
                 valid = false;
             }
           else
             valid = false;
           if (! valid)
-            error ("textscan: EndOfLine must be at most one character "
-                   "or '\\r\\n'");
+            error ("%s: EndOfLine must be at most one character or '\\r\\n'",
+                   who.c_str ());
         }
       else
-        error ("textscan: Unrecognised option '%s'", param.c_str ());
+        error ("%s: unrecognised option '%s'", who.c_str (), param.c_str ());
     }
 
   whitespace_table = std::string (256, '\0');
   for (unsigned int i = 0; i < whitespace.length (); i++)
     whitespace_table[whitespace[i]] = '1';
 
   // For Matlab compatibility, add 0x20 to whitespace, unless
   // whitespace is explicitly ignored.
@@ -5139,16 +5257,43 @@ octave_base_stream::oscanf (const std::s
               do_oscanf (elt, tmp, who);
             }
         }
     }
 
   return retval;
 }
 
+octave_value
+octave_base_stream::do_textscan (const std::string& fmt,
+                                 octave_idx_type ntimes,
+                                 const octave_value_list& options,
+                                 const std::string& who,
+                                 octave_idx_type& read_count)
+{
+  if (interactive && file_number () == 0)
+    ::error ("%s: unable to read from stdin while running interactively",
+             who.c_str ());
+
+  octave_value retval = Cell (dim_vector (1, 1), Matrix (0, 1));
+
+  std::istream *isp = input_stream ();
+
+  if (! isp)
+    invalid_operation (who, "reading");
+  else
+    {
+      textscan scanner (who);
+
+      retval = scanner.scan (*isp, fmt, ntimes, options, read_count);
+    }
+
+  return retval;
+}
+
 // Functions that are defined for all output streams
 // (output streams are those that define os).
 
 int
 octave_base_stream::flush (void)
 {
   int retval = -1;
 
@@ -6922,16 +7067,26 @@ octave_stream::oscanf (const octave_valu
     {
       // Note: error is member fcn from octave_stream, not ::error.
       error (who + ": format must be a string");
     }
 
   return retval;
 }
 
+octave_value
+octave_stream::textscan (const std::string& fmt, octave_idx_type ntimes,
+                         const octave_value_list& options,
+                         const std::string& who, octave_idx_type& count)
+{
+  return (stream_ok ()
+          ? rep->do_textscan (fmt, ntimes, options, who, count)
+          : octave_value ());
+}
+
 int
 octave_stream::printf (const std::string& fmt, const octave_value_list& args,
                        const std::string& who)
 {
   int retval = -1;
 
   if (stream_ok ())
     retval = rep->printf (fmt, args, who);
diff --git a/libinterp/corefcn/oct-stream.h b/libinterp/corefcn/oct-stream.h
--- a/libinterp/corefcn/oct-stream.h
+++ b/libinterp/corefcn/oct-stream.h
@@ -34,183 +34,29 @@ along with Octave; see the file COPYING.
 // are also treated as private.
 
 class scanf_format_elt;
 class scanf_format_list;
 
 class printf_format_elt;
 class printf_format_list;
 
-class delimited_stream;
-class textscan_format_elt;
-class textscan_format_list;
-
 // These only appear as reference arguments or return values.
 
 template <typename T> class Array;
+class Cell;
 class octave_value_list;
 class string_vector;
 
 #include "data-conv.h"
 #include "mach-info.h"
 #include "oct-refcount.h"
 
-#include "Cell.h"
 #include "ov.h"
 
-// Main class to implement textscan.  Read data and parse it
-// according to a format.
-//
-// The calling sequence is
-//
-//   textscan scanner ();
-//   scanner.scan (...);
-
-class
-OCTINTERP_API
-textscan
-{
-public:
-
-  textscan (void);
-
-  ~textscan (void) { }
-
-  octave_value scan (std::istream& isp, const octave_value_list& args);
-
-  octave_value scan (std::istream& isp, const octave_value_list& args,
-                     octave_idx_type& count);
-
-private:
-
-  friend class textscan_format_list;
-
-  std::string buf;
-
-  // Three cases for delim_table and delim_list
-  // 1. delim_table empty, delim_list empty:  whitespace delimiters
-  // 2. delim_table = look-up table of delim chars, delim_list empty.
-  // 3. delim_table non-empty, delim_list = Cell array of delim strings
-
-  std::string whitespace_table;
-
-  // delim_table[i] == '\0' if i is not a delimiter.
-  std::string delim_table;
-
-  // String of delimiter characters.
-  std::string delims;
-
-  Cell comment_style;
-
-  // How far ahead to look to detect an open comment.
-  int comment_len;
-
-  // First character of open comment.
-  int comment_char;
-
-  octave_idx_type buffer_size;
-
-  std::string date_locale;
-
-  // 'inf' and 'nan' for formatted_double.
-  Cell inf_nan;
-
-  // Array of strings of delimiters.
-  Cell delim_list;
-
-  // Longest delimiter.
-  int delim_len;
-
-  octave_value empty_value;
-  std::string exp_chars;
-  int header_lines;
-  Cell treat_as_empty;
-
-  // Longest string to treat as "N/A".
-  int treat_as_empty_len;
-
-  std::string whitespace;
-
-  short eol1;
-  short eol2;
-  short return_on_error;
-
-  bool collect_output;
-  bool multiple_delims_as_one;
-  bool default_exp;
-  bool numeric_delim;
-
-  octave_idx_type lines;
-
-  octave_value do_scan (std::istream& isp, textscan_format_list& fmt_list,
-                        octave_idx_type ntimes);
-
-  void parse_options (const octave_value_list& args,
-                      textscan_format_list& fmt_list);
-
-  int read_format_once (delimited_stream& isp, textscan_format_list& fmt_list,
-                        std::list<octave_value>& retval,
-                        Array<octave_idx_type> row, int& done_after);
-
-  void scan_one (delimited_stream& is, const textscan_format_elt& fmt,
-                 octave_value& ov, Array<octave_idx_type> row);
-
-  // Methods to process a particular conversion specifier.
-  double read_double (delimited_stream& is,
-                      const textscan_format_elt& fmt) const;
-
-  void scan_complex (delimited_stream& is, const textscan_format_elt& fmt,
-                     Complex& val) const;
-
-  int scan_bracket (delimited_stream& is, const std::string& pattern,
-                    std::string& val) const;
-
-  int scan_caret (delimited_stream& is, const std::string& pattern,
-                  std::string& val) const;
-
-  void scan_string (delimited_stream& is, const textscan_format_elt& fmt,
-                    std::string& val) const;
-
-  void scan_cstring (delimited_stream& is, const textscan_format_elt& fmt,
-                     std::string& val) const;
-
-  void scan_qstring (delimited_stream& is, const textscan_format_elt& fmt,
-                     std::string& val);
-
-  // Helper methods.
-  std::string read_until (delimited_stream& is, const Cell& delimiters,
-                          const std::string& ends) const;
-
-  int lookahead (delimited_stream& is, const Cell& targets, int max_len,
-                 bool case_sensitive = true) const;
-
-  bool match_literal (delimited_stream& isp, const textscan_format_elt& elem);
-
-  int skip_whitespace (delimited_stream& is, bool EOLstop = false);
-
-  int skip_delim (delimited_stream& is);
-
-  bool is_delim (unsigned char ch) const
-  {
-    return ((delim_table.empty () && (isspace (ch) || ch == eol1 || ch == eol2))
-            || delim_table[ch] != '\0');
-  }
-
-  bool isspace (unsigned int ch) const { return whitespace_table[ch & 0xff]; }
-
-  // True if the only delimiter is whitespace.
-  bool whitespace_delim (void) const { return delim_table.empty (); }
-
-  // No copying!
-
-  textscan (const textscan&);
-
-  textscan& operator = (const textscan&);
-};
-
 // Provide an interface for Octave streams.
 
 class
 OCTINTERP_API
 octave_base_stream
 {
   friend class octave_stream;
 
@@ -352,16 +198,20 @@ private:
                       octave_idx_type& count, const std::string& who /* = "scanf" */);
 
   bool do_oscanf (const scanf_format_elt *elt, octave_value&,
                   const std::string& who /* = "scanf" */);
 
   octave_value_list oscanf (const std::string& fmt,
                             const std::string& who /* = "scanf" */);
 
+  octave_value do_textscan (const std::string& fmt, octave_idx_type ntimes,
+                            const octave_value_list& options,
+                            const std::string& who, octave_idx_type& count);
+
   // Functions that are defined for all output streams (output streams
   // are those that define os).
 
   int flush (void);
 
   int do_numeric_printf_conv (std::ostream& os, const printf_format_elt *elt,
                               int nsa, int sa_1, int sa_2,
                               const octave_value& val,
@@ -456,16 +306,20 @@ public:
                       octave_idx_type& count, const std::string& who /* = "scanf" */);
 
   octave_value_list oscanf (const std::string& fmt,
                             const std::string& who /* = "scanf" */);
 
   octave_value_list oscanf (const octave_value& fmt,
                             const std::string& who /* = "scanf" */);
 
+  octave_value textscan (const std::string& fmt, octave_idx_type ntimes,
+                         const octave_value_list& options,
+                         const std::string& who, octave_idx_type& count);
+
   int printf (const std::string& fmt, const octave_value_list& args,
               const std::string& who /* = "printf" */);
 
   int printf (const octave_value& fmt, const octave_value_list& args,
               const std::string& who /* = "printf" */);
 
   int puts (const std::string& s, const std::string& who /* = "puts" */);
   int puts (const octave_value& s, const std::string& who /* = "puts" */);
