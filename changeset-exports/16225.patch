# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1362766569 18000
#      Fri Mar 08 13:16:09 2013 -0500
# Node ID 28be9be86240bedb763b2bf51c0f9c7b1757fa7b
# Parent  4a848eb52de2b3ec3dfcaf10aa8f81edc9a16913
better diagnostic when reading compressed fields in mat files (bug #38488)

* ls-mat5.cc (read_mat5_binary_element): Give an #else to the
  HAVE_ZLIB conditional compilation and give an error message there.

diff --git a/libinterp/interp-core/ls-mat5.cc b/libinterp/interp-core/ls-mat5.cc
--- a/libinterp/interp-core/ls-mat5.cc
+++ b/libinterp/interp-core/ls-mat5.cc
@@ -509,19 +509,19 @@ read_mat5_binary_element (std::istream& 
     flt_fmt = oct_mach_info::flt_fmt_ieee_little_endian;
 
   // element type and length
   int32_t type = 0;
   int32_t element_length;
   if (read_mat5_tag (is, swap, type, element_length))
     return retval;                      // EOF
 
-#ifdef HAVE_ZLIB
   if (type == miCOMPRESSED)
     {
+#ifdef HAVE_ZLIB
       // If C++ allowed us direct access to the file descriptor of an
       // ifstream in a uniform way, the code below could be vastly
       // simplified, and additional copies of the data in memory
       // wouldn't be needed.
 
       OCTAVE_LOCAL_BUFFER (char, inbuf, element_length);
       is.read (inbuf, element_length);
 
@@ -593,16 +593,18 @@ read_mat5_binary_element (std::istream& 
               retval = read_mat5_binary_element (gz_is, filename,
                                                  swap, global, tc);
             }
         }
       else
         error ("load: error probing size of compressed data element");
 
       return retval;
+#else // HAVE_ZLIB
+      error ("load: zlib unavailable, cannot read compressed data element");
     }
 #endif
 
   std::streampos pos;
 
   if (type != miMATRIX)
     {
       pos = is.tellg ();
