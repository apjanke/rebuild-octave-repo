# HG changeset patch
# User Rik <rik@octave.org>
# Date 1448414507 28800
#      Tue Nov 24 17:21:47 2015 -0800
# Branch stable
# Node ID fdffc955b4ed32ebfca754721d68f045fed50ee1
# Parent  ab0d9d7f479c5f3cf7f150d326f5debbbf05bda6
doc: Clarify how if statement determines true or false for a matrix input.

* stmt.txi: Clarify how if statement determines true or false for a matrix
input.

diff --git a/doc/interpreter/stmt.txi b/doc/interpreter/stmt.txi
--- a/doc/interpreter/stmt.txi
+++ b/doc/interpreter/stmt.txi
@@ -81,18 +81,24 @@ endif
 @var{condition} is an expression that controls what the rest of the
 statement will do.  The @var{then-body} is executed only if
 @var{condition} is true.
 
 The condition in an @code{if} statement is considered true if its value
 is nonzero, and false if its value is zero.  If the value of the
 conditional expression in an @code{if} statement is a vector or a
 matrix, it is considered true only if it is non-empty and @emph{all}
-of the elements are nonzero.
+of the elements are nonzero.  The conceptually equivalent code when
+@var{condition} is a matrix is shown below.
 
+@example
+if (@var{matrix}) @equiv{} if (all (@var{matrix}(:)))
+@end example
+
+@noindent
 The second form of an if statement looks like this:
 
 @example
 @group
 if (@var{condition})
   @var{then-body}
 else
   @var{else-body}
@@ -584,19 +590,18 @@ a = [1,3;2,4]; c = cat (3, a, 2*a);
 for i = c
   i
 endfor
 @end group
 @end example
 
 @noindent
 In the above case, the multi-dimensional matrix @var{c} is reshaped to a
-two-dimensional matrix as @code{reshape (c, rows (c),
-prod (size (c)(2:end)))} and then the same behavior as a loop over a two
-dimensional matrix is produced.
+two-dimensional matrix as @code{reshape (c, rows (c), prod (size (c)(2:end)))}
+and then the same behavior as a loop over a two dimensional matrix is produced.
 
 Although it is possible to rewrite all @code{for} loops as @code{while}
 loops, the Octave language has both statements because often a
 @code{for} loop is both less work to type and more natural to think of.
 Counting the number of iterations is very common in loops and it can be
 easier to think of this counting as part of looping rather than as
 something to do inside the loop.
 
