# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1262149311 -3600
#      Wed Dec 30 06:01:51 2009 +0100
# Node ID 7fbdeaa9b0e0f15aeec937fbba2d48b4bf35e013
# Parent  b7915ebe8acf4525c00c6710e8b12df57986ee84
fix common_size optimization

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-12-30  Jaroslav Hajek  <highegg@gmail.com>
+
+	* general/common_size.m: Use named function rather than a handle.
+
 2009-12-29  Jaroslav Hajek  <highegg@gmail.com>
 
 	* set/complement.m: Deprecate.
 
 2009-12-28  Jaroslav Hajek  <highegg@gmail.com>
 
 	* strings/strcat.m: Further simplify.
 
diff --git a/scripts/general/common_size.m b/scripts/general/common_size.m
--- a/scripts/general/common_size.m
+++ b/scripts/general/common_size.m
@@ -72,14 +72,14 @@ function [errorcode, varargout] = common
         varargout = varargin;
         if (any (nscal))
           ## This could also be achieved by cellfun (@repmat, ...), but repmat is an
           ## m-function and hence still carries interpreter overhead. Further,
           ## cellfun is slightly optimized for the case used below.
           uo = "uniformoutput";
           dims = size (varargin{find (nscal, 1)});
           subs = substruct ("()", arrayfun (@ones, 1, dims, uo, false));
-          varargout(scal) = cellfun (@subsref, varargin(scal), {subs}, uo, false);
+          varargout(scal) = cellfun ("subsref", varargin(scal), {subs}, uo, false);
         endif
       endif
     endif
   endif
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-12-30  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/cellfun.cc (Fcellfun): Fix tests.
+
 2009-12-28  Thomas Treichl  <Thomas.Treichl@gmx.net>
 
 	* DLD-FUNCTIONS/md5sum.cc, DLD-FUNCTIONS/lookup.cc: Include
 	config.h before another header file.
 
 2009-12-27  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.am (xgl2ps.c): New file.
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -378,22 +378,22 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
               retval(0) = result;
             }
           else
             error ("not enough arguments for `isclass'");
         }
       else if (name == "subsref" && nargin == 5 && nargout == 1
                && args(2).numel () == 1 && args(2).is_cell () 
                && args(3).is_string ()
-               && args(3).xtoupper ().string_value () == "uniformoutput"
-               && args(4).bool_value () && ! error_state)
+               && args(3).xtolower ().string_value () == "uniformoutput"
+               && ! args(4).bool_value () && ! error_state)
         {
           // This optimizes the case of applying the same index expression to
           // multiple values. We decode the subscript just once. uniformoutput must
-          // be requested as well.
+          // be set to false.
 
           const Cell tmpc = args(2).cell_value ();
           octave_value subs = tmpc(0);
 
           std::string type;
           std::list<octave_value_list> idx;
           decode_subscripts ("subsref", subs, type, idx);
 
