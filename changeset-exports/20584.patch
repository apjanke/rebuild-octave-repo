# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1444416216 14400
#      Fri Oct 09 14:43:36 2015 -0400
# Node ID eef93a493ce3abb70a3a8484fbcec2d43c0e5128
# Parent  e5986cba4ca820d0c2e17bda566e6a79f0da55b3
use new cell_value method to handle value extraction errors

* cellfun.cc, ov-class.cc, ov-struct.cc, ov-usr-fcn.cc:
Use new cell_value method.

diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -2458,34 +2458,29 @@ endfor\n\
 @end example\n\
 @seealso{cellslices, cellfun}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () >= 1)
     {
-      if (args(0).is_cell ())
-        {
-          const Cell x = args(0).cell_value ();
-          NoAlias<Cell> y(x.dims ());
-          octave_idx_type nel = x.numel ();
-          octave_value_list idx = args.slice (1, args.length () - 1);
+      const Cell x = args(0).cell_value ("cellindexmat: X must be a cell");
+      NoAlias<Cell> y(x.dims ());
+      octave_idx_type nel = x.numel ();
+      octave_value_list idx = args.slice (1, args.length () - 1);
 
-          for (octave_idx_type i = 0; i < nel; i++)
-            {
-              octave_quit ();
-
-              octave_value tmp = x(i);
+      for (octave_idx_type i = 0; i < nel; i++)
+        {
+          octave_quit ();
 
-              y(i) = tmp.do_index_op (idx);
-            }
+          octave_value tmp = x(i);
 
-          retval = y;
+          y(i) = tmp.do_index_op (idx);
         }
-      else
-        error ("cellindexmat: X must be a cell");
+
+      retval = y;
     }
   else
     print_usage ();
 
   return retval;
 }
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -1296,23 +1296,17 @@ octave_class::load_ascii (std::istream& 
 
                   // recurse to read cell elements
                   std::string nm
                     = read_text_data (is, std::string (), dummy, t2, j);
 
                   if (! is)
                     break;
 
-                  Cell tcell = t2.is_cell () ? t2.cell_value () : Cell (t2);
-
-                  if (error_state)
-                    {
-                      error ("load: internal error loading class elements");
-                      return false;
-                    }
+                  Cell tcell = t2.is_cell () ? t2.cell_value ("load: internal error loading class elements") : Cell (t2);
 
                   m.assign (nm, tcell);
                 }
 
               if (is)
                 {
                   c_name = classname;
                   reconstruct_exemplar ();
@@ -1439,23 +1433,17 @@ octave_class::load_binary (std::istream&
 
           // recurse to read cell elements
           std::string nm = read_binary_data (is, swap, fmt, std::string (),
                                              dummy, t2, doc);
 
           if (! is)
             break;
 
-          Cell tcell = t2.is_cell () ? t2.cell_value () : Cell (t2);
-
-          if (error_state)
-            {
-              error ("load: internal error loading class elements");
-              return false;
-            }
+          Cell tcell = t2.is_cell () ? t2.cell_value ("load: internal error loading class elements") : Cell (t2);
 
           m.assign (nm, tcell);
         }
 
       if (is)
         {
           map = m;
 
@@ -1679,23 +1667,17 @@ octave_class::load_hdf5 (octave_hdf5_id 
   H5Gclose (subgroup_hid);
 
   while (current_item < static_cast<int> (num_obj)
          && (retval2 = H5Giterate (group_hid, name, &current_item,
                                    hdf5_read_next_data, &dsub)) > 0)
     {
       octave_value t2 = dsub.tc;
 
-      Cell tcell = t2.is_cell () ? t2.cell_value () : Cell (t2);
-
-      if (error_state)
-        {
-          error ("load: internal error loading class elements");
-          return false;
-        }
+      Cell tcell = t2.is_cell () ? t2.cell_value ("load: internal error loading class elements") : Cell (t2);
 
       m.assign (dsub.name, tcell);
 
     }
 
   if (retval2 >= 0)
     {
       map = m;
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -794,23 +794,17 @@ octave_struct::load_ascii (std::istream&
 
               // recurse to read cell elements
               std::string nm
                 = read_text_data (is, std::string (), dummy, t2, j);
 
               if (!is)
                 break;
 
-              Cell tcell = t2.is_cell () ? t2.cell_value () : Cell (t2);
-
-              if (error_state)
-                {
-                  error ("load: internal error loading struct elements");
-                  return false;
-                }
+              Cell tcell = t2.is_cell () ? t2.cell_value ("load: internal error loading struct elements") : Cell (t2);
 
               m.setfield (nm, tcell);
             }
 
           if (is)
             map = m;
           else
             {
@@ -922,23 +916,17 @@ octave_struct::load_binary (std::istream
 
           // recurse to read cell elements
           std::string nm = read_binary_data (is, swap, fmt, std::string (),
                                              dummy, t2, doc);
 
           if (!is)
             break;
 
-          Cell tcell = t2.is_cell () ? t2.cell_value () : Cell (t2);
-
-          if (error_state)
-            {
-              error ("load: internal error loading struct elements");
-              return false;
-            }
+          Cell tcell = t2.is_cell () ? t2.cell_value ("load: internal error loading struct elements") : Cell (t2);
 
           m.setfield (nm, tcell);
         }
 
       if (is)
         map = m;
       else
         {
@@ -1025,23 +1013,17 @@ octave_struct::load_hdf5 (octave_hdf5_id
   // Why is that happening?
 
   while (current_item < static_cast<int> (num_obj)
          && (retval2 = H5Giterate (loc_id, name, &current_item,
                                    hdf5_read_next_data, &dsub)) > 0)
     {
       octave_value t2 = dsub.tc;
 
-      Cell tcell = t2.is_cell () ? t2.cell_value () : Cell (t2);
-
-      if (error_state)
-        {
-          error ("load: internal error loading struct elements");
-          return false;
-        }
+      Cell tcell = t2.is_cell () ? t2.cell_value ("load: internal error loading struct elements") : Cell (t2);
 
       m.setfield (dsub.name, tcell);
 
     }
 
   if (retval2 >= 0)
     {
       map = m;
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -630,22 +630,17 @@ octave_user_function::do_multi_index_op 
 
       Cell varargout;
 
       if (ret_list->takes_varargs ())
         {
           octave_value varargout_varval = symbol_table::varval ("varargout");
 
           if (varargout_varval.is_defined ())
-            {
-              varargout = varargout_varval.cell_value ();
-
-              if (error_state)
-                error ("expecting varargout to be a cell array object");
-            }
+            varargout = varargout_varval.cell_value ("expecting varargout to be a cell array object");
         }
 
       retval = ret_list->convert_to_const_vector (nargout, varargout);
     }
 
   return retval;
 }
 
