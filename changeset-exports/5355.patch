# HG changeset patch
# User jwe
# Date 1116416618 0
#      Wed May 18 11:43:38 2005 +0000
# Node ID cf44c749ba5215825d90981efc494eebb112e256
# Parent  d33c3ef151cfcd11b9ee90778ce86bd4cec0cb65
[project @ 2005-05-18 11:43:37 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2005-05-18  John W. Eaton  <jwe@octave.org>
+
+	* general/num2str.m: Return early if X is a character string.
+
 2005-05-11  John W. Eaton  <jwe@octave.org>
 
 	* strings/findstr.m: Allow non-string arguments for compatiblity.
 	From Tom Holroyd <tomh@kurage.nimh.nih.gov>.
 
 	* plot/polar.m: Don't call __pltopt__ here.
 
 2005-05-02  John W. Eaton  <jwe@octave.org>
diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -33,16 +33,17 @@
 function retval = num2str (x, arg)
 
   if (nargin != 1 && nargin != 2)
     usage ("num2str (x) or num2str (x, precision) or num2str (x, fmt)");
   endif
 
   if (isstr (x))
     retval = x;
+    return;
   endif
 
   if (iscomplex (x))
     if (nargin == 2)
       if (isstr (arg))
 	fmt = strcat (arg, "%-+", arg(2:end), "i");
       else
 	if (isnumeric (x) && round (x) == x && abs (x) < (10 .^ arg))
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2005-05-18  John W. Eaton  <jwe@octave.org>
+
+	* ov-base-sparse.cc (octave_base_sparse<T>::print_raw):
+	Make spacing of output consistent with other parts of Octave.
+
+	* DLD-FUNCTIONS/rand.cc (do_rand): Chop trailing singelton
+	dimensions before generating array.
+
 2005-05-17  John W. Eaton  <jwe@octave.org>
 
 	* ov.cc (install_types): Don't call octave_stream::register_type.
 	* ov.h, ov.cc (octave_value::octave_value (const octave_stream&,
 	int): Delete constructor.
 	(octave_value::is_stream, octave_value::stream_value,
 	octave_value::stream_number): Delete functions.
 	* ov-base.h (octave_base_value::is_stream): Delete function.
diff --git a/src/DLD-FUNCTIONS/rand.cc b/src/DLD-FUNCTIONS/rand.cc
--- a/src/DLD-FUNCTIONS/rand.cc
+++ b/src/DLD-FUNCTIONS/rand.cc
@@ -214,16 +214,18 @@ do_rand (const octave_value_list& args, 
     }
 
  done:
 
   return retval;
 
  gen_matrix:
 
+  dims.chop_trailing_singletons ();
+
   return octave_rand::nd_array (dims);
 }
 
 DEFUN_DLD (rand, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} rand (@var{x})\n\
 @deftypefnx {Loadable Function} {} rand (@var{n}, @var{m})\n\
 @deftypefnx {Loadable Function} {} rand (@code{\"seed\"}, @var{x})\n\
diff --git a/src/ov-base-sparse.cc b/src/ov-base-sparse.cc
--- a/src/ov-base-sparse.cc
+++ b/src/ov-base-sparse.cc
@@ -238,40 +238,52 @@ octave_base_sparse<T>::print_info (std::
 				   const std::string& prefix) const
 {
   matrix.print_info (os, prefix);
 }
 
 template <class T>
 void
 octave_base_sparse<T>::print_raw (std::ostream& os,
-				      bool pr_as_read_syntax) const
+				  bool pr_as_read_syntax) const
 {
   octave_idx_type nr = matrix.rows ();
   octave_idx_type nc = matrix.cols ();
   octave_idx_type nz = nonzero ();
 
-  os << "Compressed Column Sparse (rows=" << nr <<
-    ", cols=" << nc <<
-    ", nnz=" << nz << ")";
+  // XXX FIXME XXX -- this should probably all be handled by a
+  // separate octave_print_internal function that can handle format
+  // compact, loose, etc.
+
+  os << "Compressed Column Sparse (rows = " << nr
+     << ", cols = " << nc
+     << ", nnz = " << nz << ")\n";
 
   // add one to the printed indices to go from
   //  zero-based to one-based arrays
 
   if (nz != 0)
     {
       for (octave_idx_type j = 0; j < nc; j++)
 	{
 	  OCTAVE_QUIT;
+
+	  // XXX FIXME XXX -- is there an easy way to get the max row
+	  // and column indices so we can set the width appropriately
+	  // and line up the columns here?  Similarly, we should look
+	  // at all the nonzero values and display them with the same
+	  // formatting rules that apply to columns of a matrix.
+
 	  for (octave_idx_type i = matrix.cidx(j); i < matrix.cidx(j+1); i++)
 	    {
 	      os << "\n";
 	      os << "  (" << matrix.ridx(i)+1 <<
-		" , "  << j+1 << ") -> ";
-	      octave_print_internal( os, matrix.data(i), pr_as_read_syntax);
+		", "  << j+1 << ") -> ";
+
+	      octave_print_internal (os, matrix.data(i), pr_as_read_syntax);
 	    }
 	}
     }
 }
 
 template <class T>
 bool
 octave_base_sparse<T>::save_ascii (std::ostream& os, bool&, bool)
