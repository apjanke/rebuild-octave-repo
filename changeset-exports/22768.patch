# HG changeset patch
# User Rik <rik@octave.org>
# Date 1479170058 28800
#      Mon Nov 14 16:34:18 2016 -0800
# Node ID a75a0900e216a413b9a76e6e315498b1122f6f34
# Parent  212333a97d8d89ece12b45387418461100c9517e
maint: Match documentation names and variable names in more m-files.

* runge_kutta_23.m: Rename documentation variable 'k_vals_in' to 'k_vals' to
match function prototype.  Rename function variable 'f' to 'fun' to match
documentation.

* runge_kutta_45_dorpri.m: Add additional calling forms to docstring.
Add seventh input 't_next' to documentation and describe it.
Rename function variable 'f' to 'fun' to match documentation.

* starting_stepsize.m: Add additional argument 'args' to documentation.

* bicgstab.m: Rename function variable 'tol' to 'rtol' to match documentation.

diff --git a/scripts/ode/private/runge_kutta_23.m b/scripts/ode/private/runge_kutta_23.m
--- a/scripts/ode/private/runge_kutta_23.m
+++ b/scripts/ode/private/runge_kutta_23.m
@@ -15,18 +15,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {[@var{t_next}, @var{x_next}] =} runge_kutta_23 (@var{fun}, @var{t}, @var{x}, @var{dt})
 ## @deftypefnx {} {[@var{t_next}, @var{x_next}] =} runge_kutta_23 (@var{fun}, @var{t}, @var{x}, @var{dt}, @var{options})
-## @deftypefnx {} {[@var{t_next}, @var{x_next}] =} runge_kutta_23 (@var{fun}, @var{t}, @var{x}, @var{dt}, @var{options}, @var{k_vals_in})
-## @deftypefnx {} {[@var{t_next}, @var{x_next}] =} runge_kutta_23 (@var{fun}, @var{t}, @var{x}, @var{dt}, @var{options}, @var{k_vals_in}, @var{t_next})
+## @deftypefnx {} {[@var{t_next}, @var{x_next}] =} runge_kutta_23 (@var{fun}, @var{t}, @var{x}, @var{dt}, @var{options}, @var{k_vals})
+## @deftypefnx {} {[@var{t_next}, @var{x_next}] =} runge_kutta_23 (@var{fun}, @var{t}, @var{x}, @var{dt}, @var{options}, @var{k_vals}, @var{t_next})
 ## @deftypefnx {} {[@var{t_next}, @var{x_next}, @var{x_est}] =} runge_kutta_23 (@dots{})
 ## @deftypefnx {} {[@var{t_next}, @var{x_next}, @var{x_est}, @var{k_vals_out}] =} runge_kutta_23 (@dots{})
 ##
 ## This function can be used to integrate a system of ODEs with a given initial
 ## condition @var{x} from @var{t} to @var{t+dt}, with the Bogacki-Shampine
 ## method of third order.  For the definition of this method see
 ## @url{http://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods}.
 ##
@@ -55,17 +55,17 @@
 ##
 ## Optionally the functions can also return @var{x_est}, a lower order solution
 ## for the estimation of the error, and @var{k_vals_out}, a matrix containing
 ## the Runge-Kutta evaluations to use in a FSAL scheme or for dense output.
 ##
 ## @seealso{runge_kutta_45_dorpri}
 ## @end deftypefn
 
-function [t_next, x_next, x_est, k] = runge_kutta_23 (f, t, x, dt,
+function [t_next, x_next, x_est, k] = runge_kutta_23 (fun, t, x, dt,
                                                       options = [],
                                                       k_vals = [],
                                                       t_next = t + dt)
 
   persistent a = [0   0   0;
                   1/2 0   0;
                   0   3/4 0];
   persistent b = [0, 1/2, 3/4, 1];
@@ -81,28 +81,28 @@ function [t_next, x_next, x_est, k] = ru
     args = options.funarguments;
   else
     args = {};
   endif
 
   if (! isempty (k_vals))    # k values from previous step are passed
     k(:,1) = k_vals(:,end);  # FSAL property
   else
-    k(:,1) = feval (f, t, x, args{:});
+    k(:,1) = feval (fun, t, x, args{:});
   endif
 
-  k(:,2) = feval (f, s(2), x + k(:,1) * aa(2, 1).', args{:});
-  k(:,3) = feval (f, s(3), x + k(:,2) * aa(3, 2).', args{:});
+  k(:,2) = feval (fun, s(2), x + k(:,1) * aa(2, 1).', args{:});
+  k(:,3) = feval (fun, s(3), x + k(:,2) * aa(3, 2).', args{:});
 
   ## compute new time and new values for the unknowns
   ## t_next = t + dt;
   x_next = x + k(:,1:3) * cc(:);  # 3rd order approximation
 
   ## if the estimation of the error is required
   if (nargout >= 3)
     ## new solution to be compared with the previous one
-    k(:,4) = feval (f, t_next, x_next, args{:});
+    k(:,4) = feval (fun, t_next, x_next, args{:});
     cc_prime = dt * c_prime;
     x_est = x + k * cc_prime(:);
   endif
 
 endfunction
 
diff --git a/scripts/ode/private/runge_kutta_45_dorpri.m b/scripts/ode/private/runge_kutta_45_dorpri.m
--- a/scripts/ode/private/runge_kutta_45_dorpri.m
+++ b/scripts/ode/private/runge_kutta_45_dorpri.m
@@ -13,19 +13,22 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {} {[@var{t_next}, @var{x_next}] =} runge_kutta_45_dorpri (@var{@@fun}, @var{t}, @var{x}, @var{dt}, @var{options}, @var{k_vals_in})
-## @deftypefnx {} {[@var{t_next}, @var{x_next}, @var{x_est}] =} runge_kutta_45_dorpri (@var{@@fun}, @var{t}, @var{x}, @var{dt}, @var{options}, @var{k_vals_in})
-## @deftypefnx {} {[@var{t_next}, @var{x_next}, @var{x_est}, @var{k_vals_out}] =} runge_kutta_45_dorpri (@var{@@fun}, @var{t}, @var{x}, @var{dt}, @var{options}, @var{k_vals_in})
+## @deftypefn  {} {[@var{t_next}, @var{x_next}] =} runge_kutta_45_dorpri (@var{@@fun}, @var{t}, @var{x}, @var{dt})
+## @deftypefn  {} {[@var{t_next}, @var{x_next}] =} runge_kutta_45_dorpri (@var{@@fun}, @var{t}, @var{x}, @var{dt}, @var{options})
+## @deftypefn  {} {[@var{t_next}, @var{x_next}] =} runge_kutta_45_dorpri (@var{@@fun}, @var{t}, @var{x}, @var{dt}, @var{options}, @var{k_vals})
+## @deftypefn  {} {[@var{t_next}, @var{x_next}] =} runge_kutta_45_dorpri (@var{@@fun}, @var{t}, @var{x}, @var{dt}, @var{options}, @var{k_vals}, @var{t_next})
+## @deftypefnx {} {[@var{t_next}, @var{x_next}, @var{x_est}] =} runge_kutta_45_dorpri (@dots{})
+## @deftypefnx {} {[@var{t_next}, @var{x_next}, @var{x_est}, @var{k_vals_out}] =} runge_kutta_45_dorpri (@dots{})
 ##
 ## This function can be used to integrate a system of ODEs with a given initial
 ## condition @var{x} from @var{t} to @var{t+dt} with the Dormand-Prince method.
 ## For the definition of this method see
 ## @url{http://en.wikipedia.org/wiki/Dormand%E2%80%93Prince_method}.
 ##
 ## First input argument is the function describing the system of ODEs to be
 ## integrated.
@@ -38,29 +41,32 @@
 ## integration interval.
 ##
 ## Fifth input parameter is optional and describes a set of options useful to
 ## adapt the computation to what is needed.
 ##
 ## Sixth input parameter is optional and describes the Runge-Kutta evaluations
 ## of the previous step to use in an FSAL scheme.
 ##
+## Seventh input parameter is optional and is the time (@var{t_next}) to
+## integrate to.  The default is @code{@var{t} + @var{dt}}.
+##
 ## First output argument is the final integration time value.
 ##
 ## Second output parameter is the higher order computed solution at time
 ## @var{t_next} (local extrapolation).
 ##
 ## Third output parameter is a lower order solution for the estimation of the
 ## error.
 ##
 ## Fourth output parameter is matrix containing the Runge-Kutta evaluations
 ## to use in an FSAL scheme or for dense output.
 ## @end deftypefn
 
-function [t_next, x_next, x_est, k] = runge_kutta_45_dorpri (f, t, x, dt,
+function [t_next, x_next, x_est, k] = runge_kutta_45_dorpri (fun, t, x, dt,
                                                              options = [],
                                                              k_vals = [],
                                                              t_next = t + dt)
 
   ## Reference: Hairer, Ernst; NÃ¸rsett, Syvert Paul; Wanner, Gerhard (2008),
   ## Solving ordinary differential equations I: Nonstiff problems,
   ## Berlin, New York: Springer-Verlag, ISBN 978-3-540-56670-0
   persistent a = [0           0          0           0        0          0;
@@ -83,31 +89,31 @@ function [t_next, x_next, x_est, k] = ru
     args = options.funarguments;
   else
     args = {};
   endif
 
   if (! isempty (k_vals))    # k values from previous step are passed
     k(:,1) = k_vals(:,end);  # FSAL property
   else
-    k(:,1) = feval (f, t, x, args{:});
+    k(:,1) = feval (fun, t, x, args{:});
   endif
 
-  k(:,2) = feval (f, s(2), x + k(:,1)   * aa(2, 1).'  , args{:});
-  k(:,3) = feval (f, s(3), x + k(:,1:2) * aa(3, 1:2).', args{:});
-  k(:,4) = feval (f, s(4), x + k(:,1:3) * aa(4, 1:3).', args{:});
-  k(:,5) = feval (f, s(5), x + k(:,1:4) * aa(5, 1:4).', args{:});
-  k(:,6) = feval (f, s(6), x + k(:,1:5) * aa(6, 1:5).', args{:});
+  k(:,2) = feval (fun, s(2), x + k(:,1)   * aa(2, 1).'  , args{:});
+  k(:,3) = feval (fun, s(3), x + k(:,1:2) * aa(3, 1:2).', args{:});
+  k(:,4) = feval (fun, s(4), x + k(:,1:3) * aa(4, 1:3).', args{:});
+  k(:,5) = feval (fun, s(5), x + k(:,1:4) * aa(5, 1:4).', args{:});
+  k(:,6) = feval (fun, s(6), x + k(:,1:5) * aa(6, 1:5).', args{:});
 
   ## compute new time and new values for the unknowns
   ## t_next = t + dt;
   x_next = x + k(:,1:6) * cc(:);  # 5th order approximation
 
   ## if the estimation of the error is required
   if (nargout >= 3)
     ## new solution to be compared with the previous one
-    k(:,7) = feval (f, t_next, x_next, args{:});
+    k(:,7) = feval (fun, t_next, x_next, args{:});
     cc_prime = dt * c_prime;
     x_est = x + k * cc_prime(:);
   endif
 
 endfunction
 
diff --git a/scripts/ode/private/starting_stepsize.m b/scripts/ode/private/starting_stepsize.m
--- a/scripts/ode/private/starting_stepsize.m
+++ b/scripts/ode/private/starting_stepsize.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {} {@var{h} =} starting_stepsize (@var{order}, @var{func}, @var{t0}, @var{x0}, @var{AbsTol}, @var{RelTol}, @var{normcontrol})
+## @deftypefn {} {@var{h} =} starting_stepsize (@var{order}, @var{func}, @var{t0}, @var{x0}, @var{AbsTol}, @var{RelTol}, @var{normcontrol}, @var{args})
 ##
 ## Determine a good initial timestep for an ODE solver of order @var{order}
 ## using the algorithm described in reference [1].
 ##
 ## The input argument @var{func}, is the function describing the differential
 ## equations, @var{t0} is the initial time, and @var{x0} is the initial
 ## condition.  @var{AbsTol} and @var{RelTol} are the absolute and relative
 ## tolerance on the ODE integration taken from an ode options structure.
diff --git a/scripts/sparse/bicgstab.m b/scripts/sparse/bicgstab.m
--- a/scripts/sparse/bicgstab.m
+++ b/scripts/sparse/bicgstab.m
@@ -64,35 +64,35 @@
 ## @item @var{resvec} is a vector containing the relative residual at each
 ## iteration.
 ## @end itemize
 ##
 ## @seealso{bicg, cgs, gmres, pcg, qmr}
 ##
 ## @end deftypefn
 
-function [x, flag, relres, iter, resvec] = bicgstab (A, b, tol, maxit,
+function [x, flag, relres, iter, resvec] = bicgstab (A, b, rtol, maxit,
                                                      M1, M2, x0)
 
   if (nargin < 2 || nargin > 7 || ! isvector (full (b)))
     print_usage ();
   endif
 
   if (ischar (A))
     A = str2func (A);
   elseif (isnumeric(A) && issquare (A))
     Ax = @(x) A  * x;
   elseif (isa (A, "function_handle"))
     Ax = @(x) feval (A, x);
   else
     error ("bicgstab: A must be a square matrix or function");
   endif
 
-  if (nargin < 3 || isempty (tol))
-    tol = 1e-6;
+  if (nargin < 3 || isempty (rtol))
+    rtol = 1e-6;
   endif
 
   if (nargin < 4 || isempty (maxit))
     maxit = min (rows (b), 20);
   endif
 
   if (nargin < 5 || isempty (M1))
     M1m1x = @(x) x;
@@ -134,17 +134,17 @@ function [x, flag, relres, iter, resvec]
   norm_b = norm (b);
 
   res = b - Ax (x);
   rr = res;
 
   ## Vector of the residual norms for each iteration.
   resvec = norm (res) / norm_b;
 
-  ## Default behavior we don't reach tolerance tol within maxit iterations.
+  ## Default behavior we don't reach tolerance rtol within maxit iterations.
   flag = 1;
 
   for iter = 1:maxit
     rho_1 = rr' * res;
 
     if (iter == 1)
       p = res;
     else
@@ -164,40 +164,40 @@ function [x, flag, relres, iter, resvec]
     omega = (s' * t) / (t' * t);
     x += alpha * phat + omega * shat;
     res = s - omega * t;
     rho_2 = rho_1;
 
     relres = norm (res) / norm_b;
     resvec = [resvec; relres];
 
-    if (relres <= tol)
-      ## We reach tolerance tol within maxit iterations.
+    if (relres <= rtol)
+      ## We reach tolerance rtol within maxit iterations.
       flag = 0;
       break;
     elseif (resvec(end) == resvec(end - 1))
       ## The method stagnates.
       flag = 3;
       break;
     endif
   endfor
 
   if (nargout < 2)
     if (flag == 0)
       printf ("bicgstab converged at iteration %i ", iter);
       printf ("to a solution with relative residual %e\n", relres);
     elseif (flag == 3)
       printf ("bicgstab stopped at iteration %i ", iter);
-      printf ("without converging to the desired tolerance %e\n", tol);
+      printf ("without converging to the desired tolerance %e\n", rtol);
       printf ("because the method stagnated.\n");
       printf ("The iterate returned (number %i) ", iter);
       printf ("has relative residual %e\n", relres);
     else
       printf ("bicgstab stopped at iteration %i ", iter);
-      printf ("without converging to the desired toleranc %e\n", tol);
+      printf ("without converging to the desired toleranc %e\n", rtol);
       printf ("because the maximum number of iterations was reached.\n");
       printf ("The iterate returned (number %i) ", iter);
       printf ("has relative residual %e\n", relres);
     endif
   endif
 
 endfunction
 
@@ -209,42 +209,42 @@ endfunction
 %! [x, flag, relres, iter, resvec] = bicgstab (A, b)
 
 %!shared A, b, n, M1, M2
 %!
 %!test
 %! n = 100;
 %! A = spdiags ([-2*ones(n,1) 4*ones(n,1) -ones(n,1)], -1:1, n, n);
 %! b = sum (A, 2);
-%! tol = 1e-8;
+%! rtol = 1e-8;
 %! maxit = 15;
 %! M1 = spdiags ([ones(n,1)/(-2) ones(n,1)],-1:0, n, n);
 %! M2 = spdiags ([4*ones(n,1) -ones(n,1)], 0:1, n, n);
-%! [x, flag, relres, iter, resvec] = bicgstab (A, b, tol, maxit, M1, M2);
+%! [x, flag, relres, iter, resvec] = bicgstab (A, b, rtol, maxit, M1, M2);
 %! assert (x, ones (size (b)), 1e-7);
 %!
 %!test
 %!function y = afun (x, a)
 %!  y = a * x;
 %!endfunction
 %!
-%! tol = 1e-8;
+%! rtol = 1e-8;
 %! maxit = 15;
 %!
 %! [x, flag, relres, iter, resvec] = bicgstab (@(x) afun (x, A), b,
-%!                                             tol, maxit, M1, M2);
+%!                                             rtol, maxit, M1, M2);
 %! assert (x, ones (size (b)), 1e-7);
 
 %!test
 %! n = 100;
-%! tol = 1e-8;
+%! rtol = 1e-8;
 %! a = sprand (n, n, .1);
 %! A = a'*a + 100 * eye (n);
 %! b = sum (A, 2);
-%! [x, flag, relres, iter, resvec] = bicgstab (A, b, tol, [], diag (diag (A)));
+%! [x, flag, relres, iter, resvec] = bicgstab (A, b, rtol, [], diag (diag (A)));
 %! assert (x, ones (size (b)), 1e-7);
 
 %!test
 %! A = [1 + 1i, 1 + 1i; 2 - 1i, 2 + 1i];
 %! b = A * [1; 1];
 %! [x, flag, relres, iter, resvec] = bicgstab (A, b);
 %! assert (x, [1; 1], 1e-6);
 
