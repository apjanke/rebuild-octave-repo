# HG changeset patch
# User Rik <rik@octave.org>
# Date 1344526190 25200
#      Thu Aug 09 08:29:50 2012 -0700
# Node ID edae65062740af4158e64a0e2328f0f56c05ad11
# Parent  f91eac1bc66d7295434690b477600925ac4a78f1
build: Move unordered_map header tests to acinclude.m4 and add caching of results.

* configure.ac: Remove unordered_map header tests

* m4/acinclude.m4: New OCTAVE_UNORDERED_MAP_HEADERS macro which checks
and caches results of undordered_map and tr1_namespace checks.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1766,37 +1766,20 @@ esac
 AC_CHECK_HEADERS(curses.h direct.h dlfcn.h floatingpoint.h grp.h \
   ieeefp.h inttypes.h locale.h memory.h ncurses.h poll.h pthread.h \
   pwd.h sunmath.h sys/ioctl.h sys/param.h sys/poll.h sys/resource.h \
   sys/select.h sys/utsname.h termcap.h)
 
 ## C++ headers
 
 AC_LANG_PUSH(C++)
+
 AC_CHECK_HEADERS(sstream)
-AC_CHECK_HEADERS([unordered_map], [], [
-  AC_CHECK_HEADERS([tr1/unordered_map])])
-AC_MSG_CHECKING([whether unordered_map requires tr1 namespace])
-unordered_map_requires_tr1_namespace=no
-if test "$ac_cv_header_unordered_map" = "yes"; then
-  ## Have <unordered_map>, but still have to check whether
-  ## tr1 namespace is required (like MSVC, for instance).
-  AC_COMPILE_IFELSE([
-    AC_LANG_PROGRAM([
-      #include <unordered_map>
-    ], [
-      std::unordered_map<int,int> m;
-    ])], [], [unordered_map_requires_tr1_namespace=yes])
-elif test "$ac_cv_header_tr1_unordered_map" = "yes"; then
-  unordered_map_requires_tr1_namespace=yes
-fi
-if test "$unordered_map_requires_tr1_namespace" = "yes"; then
-  AC_DEFINE(USE_UNORDERED_MAP_WITH_TR1, 1, [Define to 1 if unordered_map requires the use of tr1 namespace.])
-fi
-AC_MSG_RESULT([$unordered_map_requires_tr1_namespace])
+OCTAVE_UNORDERED_MAP_HEADERS
+
 AC_LANG_POP(C++)
 
 ## Find a termio header to include.
 
 have_termios_h=no
 AC_CHECK_HEADERS(termios.h, have_termios_h=yes)
 AC_CHECK_HEADERS(termio.h, have_termio_h=yes, have_termio_h=no)
 AC_CHECK_HEADERS(sgtty.h, have_sgtty_h=yes, have_sgtty_h=no)
@@ -1833,20 +1816,18 @@ AC_CHECK_SIZEOF(short)
 AC_CHECK_SIZEOF(int)
 AC_CHECK_SIZEOF(long)
 AC_CHECK_SIZEOF(long long)
 ## Check for long double type (for 64-bit integers)
 AC_CHECK_SIZEOF(long double)
 
 ### Check structures and existence of necessary members
 
-AC_CHECK_MEMBERS([struct stat.st_blksize, struct stat.st_blocks, struct stat.st_rdev, struct group.gr_passwd])
-#AC_CHECK_MEMBERS([struct stat.st_blksize, struct stat.st_blocks, struct stat.st_rdev])
-#AC_CHECK_MEMBERS(struct group.gr_passwd)
-#AC_CHECK_MEMBERS(struct group.gr_passwd)
+AC_CHECK_MEMBERS([struct stat.st_blksize, struct stat.st_blocks, struct stat.st_rdev])
+AC_CHECK_MEMBERS([struct group.gr_passwd])
 
 AC_STRUCT_TIMEZONE
 
 ### Check compiler characteristics.
 
 ## Does compiler have support for new friend template declarations?
 OCTAVE_CXX_NEW_FRIEND_TEMPLATE_DECL
 
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -68,16 +68,44 @@ fi
 AC_SUBST(AR)
 
 if test -z "$ARFLAGS"; then
   ARFLAGS="rc"
 fi
 AC_SUBST(ARFLAGS)
 ])
 dnl
+dnl Check for unordered map headers and whether tr1 namespace is
+dnl required.
+dnl
+AC_DEFUN([OCTAVE_UNORDERED_MAP_HEADERS], [
+AC_CHECK_HEADERS([unordered_map], [], [
+  AC_CHECK_HEADERS([tr1/unordered_map])])
+AC_CACHE_CHECK([whether unordered_map requires tr1 namespace],
+  [octave_cv_header_require_tr1_namespace],
+  [AC_LANG_PUSH(C++)
+  octave_cv_header_require_tr1_namespace=no
+  if test "$ac_cv_header_unordered_map" = "yes"; then
+    ## Have <unordered_map>, but still have to check whether
+    ## tr1 namespace is required (like MSVC, for instance).
+    AC_COMPILE_IFELSE([
+      AC_LANG_PROGRAM([
+        #include <unordered_map>
+      ], [
+        std::unordered_map<int,int> m;
+      ])], octave_cv_header_require_tr1_namespace=no, octave_cv_header_require_tr1_namespace=yes)
+  elif test "$ac_cv_header_tr1_unordered_map" = "yes"; then
+    octave_cv_header_require_tr1_namespace=yes
+  fi
+  AC_LANG_POP(C++)])
+  if test "$octave_cv_header_require_tr1_namespace" = "yes"; then
+    AC_DEFINE(USE_UNORDERED_MAP_WITH_TR1, 1, [Define to 1 if unordered_map requires the use of tr1 namespace.])
+  fi
+])
+dnl
 dnl Check if the compiler supports placement delete.
 dnl
 AC_DEFUN([OCTAVE_PLACEMENT_DELETE],
 [AC_CACHE_CHECK([whether <new> defines placement delete operator],
 octave_cv_placement_delete,
 [AC_LANG_PUSH(C++)
 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <new>]],
 [[operator delete((void *)0, (void *)0);]])],
@@ -117,17 +145,16 @@ int z1 = std::bit_and<int>() (x, y);
 int z2 = std::bit_or<int>() (x, y);
 int z3 = std::bit_xor<int>() (x, y);]])],
 octave_cv_cxx_bitwise_op_templates=yes, octave_cv_cxx_bitwise_op_templates=no)])
 if test $octave_cv_cxx_bitwise_op_templates = yes; then
 AC_DEFINE(HAVE_CXX_BITWISE_OP_TEMPLATES,1,[Define to 1 if C++ library has templated bitwise operators.])
 fi
 AC_LANG_POP(C++)
 ])
-
 dnl
 dnl Check if the C++ library has functions to set real and imaginary
 dnl parts of complex numbers independently.
 dnl
 AC_DEFUN([OCTAVE_CXX_COMPLEX_SETTERS],
 [AC_CACHE_CHECK([whether complex class can set components independently],
 octave_cv_cxx_complex_setters,
 [AC_LANG_PUSH(C++)
