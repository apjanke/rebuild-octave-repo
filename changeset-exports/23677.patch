# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498158509 14400
#      Thu Jun 22 15:08:29 2017 -0400
# Node ID 66c4d224f7cb46b97c315df952580949d201edc0
# Parent  e719f04a5707c06e7ec89280132986b4ac36f7fd
use generic template for construction from standard containers

* Cell.h (Cell (const C<V>& container))): New constructor.
* Cell.h, Cell.cc (Cell (std::list<std::string>&)): Delete.

diff --git a/libinterp/corefcn/Cell.cc b/libinterp/corefcn/Cell.cc
--- a/libinterp/corefcn/Cell.cc
+++ b/libinterp/corefcn/Cell.cc
@@ -56,32 +56,16 @@ Cell::Cell (const string_vector& sv, boo
               s = (pos == std::string::npos) ? "" : s.substr (0, pos+1);
             }
 
           elem(i,0) = s;
         }
     }
 }
 
-Cell::Cell (const std::list<std::string>& lst)
-  : Array<octave_value> ()
-{
-  size_t n = lst.size ();
-
-  if (n > 0)
-    {
-      resize (dim_vector (n, 1));
-
-      octave_idx_type i = 0;
-
-      for (const auto& str : lst)
-        elem(i++,0) = str;
-    }
-}
-
 Cell::Cell (const Array<std::string>& sa)
   : Array<octave_value> (sa.dims ())
 {
   octave_idx_type n = sa.numel ();
 
   octave_value *dst = fortran_vec ();
   const std::string *src = sa.data ();
 
diff --git a/libinterp/corefcn/Cell.h b/libinterp/corefcn/Cell.h
--- a/libinterp/corefcn/Cell.h
+++ b/libinterp/corefcn/Cell.h
@@ -58,17 +58,35 @@ public:
   Cell (const Array<octave_value>& c)
     : Array<octave_value> (c) { }
 
   Cell (const Array<octave_value>& c, octave_idx_type nr, octave_idx_type nc)
     : Array<octave_value> (c, dim_vector (nr, nc)) { }
 
   Cell (const string_vector& sv, bool trim = false);
 
-  Cell (const std::list<std::string>& lst);
+  // Constructor for standard containers.  V must be convertible to an
+  // octave_value object.
+  template <typename V, template <typename...> class C>
+  explicit
+  Cell (const C<V>& container)
+    : Array<octave_value> ()
+  {
+    size_t n = container.size ();
+
+    if (n > 0)
+      {
+        resize (dim_vector (n, 1));
+
+        octave_idx_type i = 0;
+
+        for (const auto& val : container)
+          elem(i++,0) = val;
+      }
+  }
 
   Cell (const Array<std::string>& sa);
 
   Cell (const dim_vector& dv, const string_vector& sv, bool trim = false);
 
   Cell (const Cell& c)
     : Array<octave_value> (c) { }
 
