# HG changeset patch
# User dbateman
# Date 1190976009 0
#      Fri Sep 28 10:40:09 2007 +0000
# Node ID 8065a1bc0358845c789f4da0fad498d65dbb13a6
# Parent  ead14c5050960215f535d4e4292a2ef4d7ed10cc
[project @ 2007-09-28 10:40:08 by dbateman]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2007-09-28  David Bateman  <dbateman@free.fr>
+
+	* ov-range.h (int8_array_value, int16_array_value, int32_array_value,
+	int64_array_value, uint8_array_value, uint16_array_value, 
+	int32_array_value, uint64_array_value): New methods
+
 2007-09-28  Kai Habel  <kai.habel@gmx.de>
 
 	* graphics.h.in (color_property::colormap_property (const Matrix&)):
 	Use floating point math in calculation of colormap.
 
 2007-09-26  David Bateman  <dbateman@free.fr>
 
 	* graphics.cc (color_values::str2rgb): accept upper, lower and
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -158,16 +158,40 @@ public:
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const
     { return range.matrix_value (); }
 
   NDArray array_value (bool = false) const
     { return range.matrix_value (); }
 
+  int8NDArray
+  int8_array_value (void) const { return int8NDArray (array_value ()); }
+
+  int16NDArray
+  int16_array_value (void) const { return int16NDArray (array_value ()); }
+
+  int32NDArray
+  int32_array_value (void) const { return int32NDArray (array_value ()); }
+
+  int64NDArray
+  int64_array_value (void) const { return int64NDArray (array_value ()); }
+
+  uint8NDArray
+  uint8_array_value (void) const { return uint8NDArray (array_value ()); }
+
+  uint16NDArray
+  uint16_array_value (void) const { return uint16NDArray (array_value ()); }
+
+  uint32NDArray
+  uint32_array_value (void) const { return uint32NDArray (array_value ()); }
+
+  uint64NDArray
+  uint64_array_value (void) const { return uint64NDArray (array_value ()); }
+
   SparseMatrix sparse_matrix_value (bool = false) const
     { return SparseMatrix (range.matrix_value ()); }
 
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const
     { return SparseComplexMatrix (sparse_matrix_value ()); }
 
   Complex complex_value (bool = false) const;
 
