# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1542312336 18000
#      Thu Nov 15 15:05:36 2018 -0500
# Node ID 7656fcd0ff9f3ae6ee8bc023fc133c83833634d8
# Parent  9a58d7e0554ea6cc4cd3c74ed9c4a1d62cc01747
move whos_line_format to evaluator

* variables.h, variables.cc (Vwhos_line_format): Delete.
(symbol_info_list::parse_whos_line_format, symbol_info_list::display):
Accept format as argument.  Change all uses.

* pt-eval.h, pt-eval.cc (tree_evaluator::m_whos_line_format,
tree_evaluator::whos_line_format): New data member and functions.
(Fwhos_line_format): Move here from variables.cc.  Adapt to use class
member variable.

diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -60,20 +60,16 @@ along with Octave; see the file COPYING.
 #include "ov-usr-fcn.h"
 #include "pager.h"
 #include "parse.h"
 #include "symtab.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
-// Defines layout for the whos/who -long command
-static std::string Vwhos_line_format
-  = "  %a:4; %ln:6; %cs:16:6:1;  %rb:12;  %lc:-1;\n";
-
 // Attributes of variables and functions.
 
 // Is this octave_value a valid function?
 
 octave_function *
 is_valid_function (const std::string& fcn_name,
                    const std::string& warn_for, bool warn)
 {
@@ -1166,24 +1162,24 @@ public:
     info.assign ("sparse", sparse_info);
     info.assign ("complex", complex_info);
     info.assign ("nesting", nesting_info);
     info.assign ("persistent", persistent_info);
 
     return info;
   }
 
-  void display (std::ostream& os)
+  void display (std::ostream& os, const std::string& format)
   {
     if (! m_lst.empty ())
       {
         size_t bytes = 0;
         size_t elements = 0;
 
-        std::list<whos_parameter> params = parse_whos_line_format ();
+        std::list<whos_parameter> params = parse_whos_line_format (format);
 
         print_descriptor (os, params);
 
         octave_stdout << "\n";
 
         for (const auto& syminfo : m_lst)
           {
             syminfo.display_line (os, params);
@@ -1196,23 +1192,23 @@ public:
 
         os << "\nTotal is " << elements
            << (elements == 1 ? " element" : " elements")
            << " using " << bytes << (bytes == 1 ? " byte" : " bytes")
            << "\n";
       }
   }
 
-  // Parse the string whos_line_format, and return a parameter list,
+  // Parse FORMAT, and return a parameter list,
   // containing all information needed to print the given
   // attributes of the symbols.
-  std::list<whos_parameter> parse_whos_line_format (void)
+  std::list<whos_parameter> parse_whos_line_format (const std::string& format)
   {
     int idx;
-    size_t format_len = Vwhos_line_format.length ();
+    size_t format_len = format.length ();
     char garbage;
     std::list<whos_parameter> params;
 
     size_t bytes1;
     int elements1;
 
     std::string param_string = "abcenst";
     Array<int> param_length (dim_vector (param_string.length (), 1));
@@ -1277,51 +1273,51 @@ public:
       }
 
     idx = 0;
     while (static_cast<size_t> (idx) < format_len)
       {
         whos_parameter param;
         param.command = '\0';
 
-        if (Vwhos_line_format[idx] == '%')
+        if (format[idx] == '%')
           {
             bool error_encountered = false;
             param.modifier = 'r';
             param.parameter_length = 0;
 
             int a = 0;
             int b = -1;
             int balance = 1;
             unsigned int items;
             size_t pos;
             std::string cmd;
 
-            // Parse one command from whos_line_format
-            cmd = Vwhos_line_format.substr (idx, Vwhos_line_format.length ());
+            // Parse one command from format
+            cmd = format.substr (idx, format.length ());
             pos = cmd.find (';');
             if (pos == std::string::npos)
-              error ("parameter without ; in whos_line_format");
+              error ("parameter without ; in format");
 
             cmd = cmd.substr (0, pos+1);
 
             idx += cmd.length ();
 
             // FIXME: use iostream functions instead of sscanf!
 
             if (cmd.find_first_of ("crl") != 1)
               items = sscanf (cmd.c_str (), "%c%c:%d:%d:%d;",
                               &garbage, &param.command, &a, &b, &balance);
             else
               items = sscanf (cmd.c_str (), "%c%c%c:%d:%d:%d;",
                               &garbage, &param.modifier, &param.command,
                               &a, &b, &balance) - 1;
 
             if (items < 2)
-              error ("whos_line_format: parameter structure without command in whos_line_format");
+              error ("whos_line_format: found parameter structure without command");
 
             // Exception case of bare class command 'c' without modifier 'l/r'
             if (param.modifier == 'c'
                 && param_string.find (param.command) == std::string::npos)
               {
                 param.modifier = 'r';
                 param.command = 'c';
               }
@@ -1381,17 +1377,17 @@ public:
                     param.parameter_length = total;
                     param.first_parameter_length = 0;
                   }
               }
             else if (param.modifier == 'c')
               error ("whos_line_format: modifier 'c' not available for command '%c'",
                      param.command);
 
-            // What happens if whos_line_format contains negative numbers
+            // What happens if format contains negative numbers
             // at param_length positions?
             param.balance = (b < 0 ? 0 : param.balance);
             param.first_parameter_length = (b < 0
                                             ? 0
                                             : param.first_parameter_length);
             param.parameter_length = (a < 0
                                       ? 0
                                       : (param.parameter_length
@@ -1403,17 +1399,17 @@ public:
             if (! error_encountered)
               params.push_back (param);
           }
         else
           {
             // Text string, to be printed as it is ...
             std::string text;
             size_t pos;
-            text = Vwhos_line_format.substr (idx, Vwhos_line_format.length ());
+            text = format.substr (idx, format.length ());
             pos = text.find ('%');
             if (pos != std::string::npos)
               text = text.substr (0, pos);
 
             // Push parameter into list ...
             idx += text.length ();
             param.text=text;
             param.line.assign (text.length (), ' ');
@@ -1433,16 +1429,17 @@ private:
 static octave_value
 do_who_two (octave::interpreter& interp, const string_vector& pats,
             bool global_only, bool have_regexp, bool return_list,
             bool verbose = false, std::string msg = "")
 {
   symbol_info_list symbol_stats;
   std::list<std::string> symbol_names;
 
+  octave::tree_evaluator& tw = interp.get_evaluator ();
   octave::symbol_table& symtab = interp.get_symbol_table ();
 
   octave::symbol_scope scope = symtab.current_scope ();
 
   octave::symbol_record::context_id context = scope.current_context ();
 
   octave_idx_type npats = pats.numel ();
 
@@ -1501,17 +1498,17 @@ do_who_two (octave::interpreter& interp,
         if (global_only)
           octave_stdout << "Global variables:\n\n";
         else
           octave_stdout << "Variables in the current scope:\n\n";
       else
         octave_stdout << msg;
 
       if (verbose)
-        symbol_stats.display (octave_stdout);
+        symbol_stats.display (octave_stdout, tw.whos_line_format ());
       else
         {
           string_vector names (symbol_names);
 
           names.list_in_columns (octave_stdout);
         }
 
       octave_stdout << "\n";
@@ -2299,93 +2296,16 @@ without the dash as well.
                 }
             }
         }
     }
 
   return ovl ();
 }
 
-DEFUN (whos_line_format, args, nargout,
-       doc: /* -*- texinfo -*-
-@deftypefn  {} {@var{val} =} whos_line_format ()
-@deftypefnx {} {@var{old_val} =} whos_line_format (@var{new_val})
-@deftypefnx {} {} whos_line_format (@var{new_val}, "local")
-Query or set the format string used by the command @code{whos}.
-
-A full format string is:
-@c Set example in small font to prevent overfull line
-
-@smallexample
-%[modifier]<command>[:width[:left-min[:balance]]];
-@end smallexample
-
-The following command sequences are available:
-
-@table @code
-@item %a
-Prints attributes of variables (g=global, p=persistent, f=formal parameter,
-a=automatic variable).
-
-@item %b
-Prints number of bytes occupied by variables.
-
-@item %c
-Prints class names of variables.
-
-@item %e
-Prints elements held by variables.
-
-@item %n
-Prints variable names.
-
-@item %s
-Prints dimensions of variables.
-
-@item %t
-Prints type names of variables.
-@end table
-
-Every command may also have an alignment modifier:
-
-@table @code
-@item l
-Left alignment.
-
-@item r
-Right alignment (default).
-
-@item c
-Column-aligned (only applicable to command %s).
-@end table
-
-The @code{width} parameter is a positive integer specifying the minimum
-number of columns used for printing.  No maximum is needed as the field will
-auto-expand as required.
-
-The parameters @code{left-min} and @code{balance} are only available when
-the column-aligned modifier is used with the command @samp{%s}.
-@code{balance} specifies the column number within the field width which
-will be aligned between entries.  Numbering starts from 0 which indicates
-the leftmost column.  @code{left-min} specifies the minimum field width to
-the left of the specified balance column.
-
-The default format is:
-
-@qcode{"  %a:4; %ln:6; %cs:16:6:1;  %rb:12;  %lc:-1;@xbackslashchar{}n"}
-
-When called from inside a function with the @qcode{"local"} option, the
-variable is changed locally for the function and any subroutines it calls.
-The original variable value is restored when exiting the function.
-@seealso{whos}
-@end deftypefn */)
-{
-  return SET_INTERNAL_VARIABLE (whos_line_format);
-}
-
 static std::string Vmissing_function_hook = "__unimplemented__";
 
 DEFUN (missing_function_hook, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{val} =} missing_function_hook ()
 @deftypefnx {} {@var{old_val} =} missing_function_hook (@var{new_val})
 @deftypefnx {} {} missing_function_hook (@var{new_val}, "local")
 Query or set the internal variable that specifies the function to call when
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -3330,16 +3330,23 @@ namespace octave
   tree_evaluator::max_recursion_depth (const octave_value_list& args,
                                        int nargout)
   {
     return set_internal_variable (m_max_recursion_depth, args, nargout,
                                   "max_recursion_depth", 0);
   }
 
   octave_value
+  tree_evaluator::whos_line_format (const octave_value_list& args, int nargout)
+  {
+    return set_internal_variable (m_whos_line_format, args, nargout,
+                                  "whos_line_format");
+  }
+
+  octave_value
   tree_evaluator::silent_functions (const octave_value_list& args, int nargout)
   {
     return set_internal_variable (m_silent_functions, args, nargout,
                                   "silent_functions");
   }
 
   octave_value
   tree_evaluator::string_fill_char (const octave_value_list& args, int nargout)
@@ -3738,16 +3745,95 @@ The original variable value is restored 
 %! assert (orig_val, old_val);
 %! assert (max_recursion_depth (), 2*orig_val);
 %! max_recursion_depth (orig_val);
 %! assert (max_recursion_depth (), orig_val);
 
 %!error (max_recursion_depth (1, 2))
 */
 
+DEFMETHOD (whos_line_format, interp, args, nargout,
+           doc: /* -*- texinfo -*-
+@deftypefn  {} {@var{val} =} whos_line_format ()
+@deftypefnx {} {@var{old_val} =} whos_line_format (@var{new_val})
+@deftypefnx {} {} whos_line_format (@var{new_val}, "local")
+Query or set the format string used by the command @code{whos}.
+
+A full format string is:
+@c Set example in small font to prevent overfull line
+
+@smallexample
+%[modifier]<command>[:width[:left-min[:balance]]];
+@end smallexample
+
+The following command sequences are available:
+
+@table @code
+@item %a
+Prints attributes of variables (g=global, p=persistent, f=formal parameter,
+a=automatic variable).
+
+@item %b
+Prints number of bytes occupied by variables.
+
+@item %c
+Prints class names of variables.
+
+@item %e
+Prints elements held by variables.
+
+@item %n
+Prints variable names.
+
+@item %s
+Prints dimensions of variables.
+
+@item %t
+Prints type names of variables.
+@end table
+
+Every command may also have an alignment modifier:
+
+@table @code
+@item l
+Left alignment.
+
+@item r
+Right alignment (default).
+
+@item c
+Column-aligned (only applicable to command %s).
+@end table
+
+The @code{width} parameter is a positive integer specifying the minimum
+number of columns used for printing.  No maximum is needed as the field will
+auto-expand as required.
+
+The parameters @code{left-min} and @code{balance} are only available when
+the column-aligned modifier is used with the command @samp{%s}.
+@code{balance} specifies the column number within the field width which
+will be aligned between entries.  Numbering starts from 0 which indicates
+the leftmost column.  @code{left-min} specifies the minimum field width to
+the left of the specified balance column.
+
+The default format is:
+
+@qcode{"  %a:4; %ln:6; %cs:16:6:1;  %rb:12;  %lc:-1;@xbackslashchar{}n"}
+
+When called from inside a function with the @qcode{"local"} option, the
+variable is changed locally for the function and any subroutines it calls.
+The original variable value is restored when exiting the function.
+@seealso{whos}
+@end deftypefn */)
+{
+  octave::tree_evaluator& tw = interp.get_evaluator ();
+
+  return tw.whos_line_format (args, nargout);
+}
+
 DEFMETHOD (silent_functions, interp, args, nargout,
            doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{val} =} silent_functions ()
 @deftypefnx {} {@var{old_val} =} silent_functions (@var{new_val})
 @deftypefnx {} {} silent_functions (@var{new_val}, "local")
 Query or set the internal variable that controls whether internal
 output from a function is suppressed.
 
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -127,16 +127,17 @@ namespace octave
 
     tree_evaluator (interpreter& interp)
       : m_interpreter (interp), m_statement_context (SC_OTHER),
         m_result_type (RT_UNDEFINED), m_expr_result_value (),
         m_expr_result_value_list (), m_lvalue_list_stack (),
         m_nargout_stack (), m_bp_table (*this), m_call_stack (interp),
         m_profiler (), m_current_frame (0), m_debug_mode (false),
         m_quiet_breakpoint_flag (false), m_max_recursion_depth (256),
+        m_whos_line_format ("  %a:4; %ln:6; %cs:16:6:1;  %rb:12;  %lc:-1;\n"),
         m_silent_functions (false), m_string_fill_char (' '),
         m_PS4 ("+ "), m_dbstep_flag (0), m_echo (ECHO_OFF),
         m_echo_state (false), m_echo_file_name (), m_echo_file_pos (1),
         m_echo_files (), m_in_loop_command (false),
         m_breaking (0), m_continuing (0), m_returning (0),
         m_indexed_object (nullptr), m_index_position (0), m_num_indices (0)
     { }
 
@@ -402,16 +403,27 @@ namespace octave
 
     bool silent_functions (bool b)
     {
       int val = m_silent_functions;
       m_silent_functions = b;
       return val;
     }
 
+    octave_value whos_line_format (const octave_value_list& args, int nargout);
+
+    std::string whos_line_format (void) const { return m_whos_line_format; }
+
+    std::string whos_line_format (const std::string& s)
+    {
+      std::string val = m_whos_line_format;
+      m_whos_line_format = s;
+      return val;
+    }
+
     octave_value
     silent_functions (const octave_value_list& args, int nargout);
 
     size_t current_frame (void) const { return m_current_frame; }
 
     size_t current_frame (size_t n)
     {
       size_t val = m_current_frame;
@@ -579,16 +591,19 @@ namespace octave
     bool m_debug_mode;
 
     bool m_quiet_breakpoint_flag;
 
     // Maximum nesting level for functions, scripts, or sourced files
     // called recursively.
     int m_max_recursion_depth;
 
+    // Defines layout for the whos/who -long command
+    std::string m_whos_line_format;
+
     // If TRUE, turn off printing of results in functions (as if a
     // semicolon has been appended to each statement).
     bool m_silent_functions;
 
     // The character to fill with when creating string arrays.
     char m_string_fill_char;
 
     // String printed before echoed commands (enabled by --echo-commands).
