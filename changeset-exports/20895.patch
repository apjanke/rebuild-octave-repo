# HG changeset patch
# User Rik <rik@octave.org>
# Date 1450131777 28800
#      Mon Dec 14 14:22:57 2015 -0800
# Node ID 7697a3433e377b4c7c5534775850368a650ff8ba
# Parent  e528d7ab1cad94ade5801e398ffefd3b6ce56b3e
doc: Remove class of function from docstring from generated C++ files.

* mk-opts.pl, lex.ll, oct-parse.in.yy: Remove class of function from
@deftypefn.

diff --git a/build-aux/mk-opts.pl b/build-aux/mk-opts.pl
--- a/build-aux/mk-opts.pl
+++ b/build-aux/mk-opts.pl
@@ -902,19 +902,19 @@ show_$CLASS_NAME (const std::string& key
   return retval;\n}\n\n|;
 }
 
 sub emit_options_function
 {
   print <<"_END_EMIT_OPTIONS_FUNCTION_HDR_";
 DEFUN ($OPT_FCN_NAME, args, ,
   "-*- texinfo -*-\\n\\
-\@deftypefn  {Built-in Function} {} $OPT_FCN_NAME ()\\n\\
-\@deftypefnx {Built-in Function} {val =} $OPT_FCN_NAME (\@var{opt})\\n\\
-\@deftypefnx {Built-in Function} {} $OPT_FCN_NAME (\@var{opt}, \@var{val})\\n\\
+\@deftypefn  {} {} $OPT_FCN_NAME ()\\n\\
+\@deftypefnx {} {val =} $OPT_FCN_NAME (\@var{opt})\\n\\
+\@deftypefnx {} {} $OPT_FCN_NAME (\@var{opt}, \@var{val})\\n\\
 $DOC_STRING\\n\\
 \\n\\
 Options include\\n\\
 \\n\\
 \@table \@code\\n\\
 _END_EMIT_OPTIONS_FUNCTION_HDR_
 # FIXME: Add extra newline above
 
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1897,18 +1897,18 @@ is_keyword (const std::string& s)
   // the language, so omit them from the list of possible keywords.
 
   return (octave_kw_hash::in_word_set (s.c_str (), s.length ()) != 0
           && ! (s == "set" || s == "get"));
 }
 
 DEFUN (iskeyword, args, ,
   "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {} iskeyword ()\n\
-@deftypefnx {Built-in Function} {} iskeyword (@var{name})\n\
+@deftypefn  {} {} iskeyword ()\n\
+@deftypefnx {} {} iskeyword (@var{name})\n\
 Return true if @var{name} is an Octave keyword.\n\
 \n\
 If @var{name} is omitted, return a list of keywords.\n\
 @seealso{isvarname, exist}\n\
 @end deftypefn")
 {
   octave_value retval;
 
@@ -1957,39 +1957,39 @@ If @var{name} is omitted, return a list 
 
 %!error iskeyword ("A", "B")
 %!error <NAME must be a string> iskeyword (1)
 
 */
 
 DEFUN (__display_tokens__, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} __display_tokens__ ()\n\
+@deftypefn {} {} __display_tokens__ ()\n\
 Query or set the internal variable that determines whether Octave's\n\
 lexer displays tokens as they are read.\n\
 @seealso{__lexer_debug_flag__, __token_count__}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (display_tokens);
 }
 
 DEFUN (__token_count__, , ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} __token_count__ ()\n\
+@deftypefn {} {} __token_count__ ()\n\
 Return the number of language tokens processed since Octave startup.\n\
 @seealso{__lexer_debug_flag__, __display_tokens__}\n\
 @end deftypefn")
 {
   return octave_value (Vtoken_count);
 }
 
 DEFUN (__lexer_debug_flag__, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {@var{val} =} __lexer_debug_flag__ ()\n\
-@deftypefnx {Built-in Function} {@var{old_val} =} __lexer_debug_flag__ (@var{new_val})\n\
+@deftypefn  {} {@var{val} =} __lexer_debug_flag__ ()\n\
+@deftypefnx {} {@var{old_val} =} __lexer_debug_flag__ (@var{new_val})\n\
 Query or set the internal flag that determines whether Octave's lexer prints\n\
 debug information as it processes an expression.\n\
 @seealso{__display_tokens__, __token_count__, __parse_debug_flag__}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   retval = set_internal_variable (lexer_debug_flag, args, nargout,
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4308,19 +4308,19 @@ load_fcn_from_file (const std::string& f
         }
     }
 
   return retval;
 }
 
 DEFUN (autoload, args, ,
   "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {@var{autoload_map} =} autoload ()\n\
-@deftypefnx {Built-in Function} {} autoload (@var{function}, @var{file})\n\
-@deftypefnx {Built-in Function} {} autoload (@dots{}, \"remove\")\n\
+@deftypefn  {} {@var{autoload_map} =} autoload ()\n\
+@deftypefnx {} {} autoload (@var{function}, @var{file})\n\
+@deftypefnx {} {} autoload (@dots{}, \"remove\")\n\
 Define @var{function} to autoload from @var{file}.\n\
 \n\
 The second argument, @var{file}, should be an absolute filename or a file\n\
 name in the same directory as the function or script from which the autoload\n\
 command was run.  @var{file} @emph{should not} depend on the Octave load\n\
 path.\n\
 \n\
 Normally, calls to @code{autoload} appear in PKG_ADD script files that are\n\
@@ -4531,19 +4531,19 @@ source_file (const std::string& file_nam
         std::cout << "done." << std::endl;
 
       delete fcn;
     }
 }
 
 DEFUN (mfilename, args, ,
   "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {} mfilename ()\n\
-@deftypefnx {Built-in Function} {} mfilename (\"fullpath\")\n\
-@deftypefnx {Built-in Function} {} mfilename (\"fullpathext\")\n\
+@deftypefn  {} {} mfilename ()\n\
+@deftypefnx {} {} mfilename (\"fullpath\")\n\
+@deftypefnx {} {} mfilename (\"fullpathext\")\n\
 Return the name of the currently executing file.\n\
 \n\
 When called from outside an m-file return the empty string.\n\
 \n\
 Given the argument @qcode{\"fullpath\"}, include the directory part of the\n\
 filename, but not the extension.\n\
 \n\
 Given the argument @qcode{\"fullpathext\"}, include the directory part of\n\
@@ -4592,17 +4592,17 @@ the filename and the extension.\n\
         retval = (dpos != std::string::npos) ? fname.substr (dpos+1) : fname;
     }
 
   return retval;
 }
 
 DEFUN (source, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} source (@var{file})\n\
+@deftypefn {} {} source (@var{file})\n\
 Parse and execute the contents of @var{file}.\n\
 \n\
 This is equivalent to executing commands from a script file, but without\n\
 requiring the file to be named @file{@var{file}.m}.\n\
 @seealso{run}\n\
 @end deftypefn")
 {
   octave_value_list retval;
@@ -4706,17 +4706,17 @@ feval (const octave_value_list& args, in
         error ("feval: first argument must be a string, inline function or a function handle");
     }
 
   return retval;
 }
 
 DEFUN (feval, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} feval (@var{name}, @dots{})\n\
+@deftypefn {} {} feval (@var{name}, @dots{})\n\
 Evaluate the function named @var{name}.\n\
 \n\
 Any arguments after the first are passed as inputs to the named function.\n\
 For example,\n\
 \n\
 @example\n\
 @group\n\
 feval (\"acos\", -1)\n\
@@ -4752,17 +4752,17 @@ instead.\n\
   if (args.length () == 0)
     print_usage ();
 
   return feval (args, nargout);
 }
 
 DEFUN (builtin, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {[@dots{}] =} builtin (@var{f}, @dots{})\n\
+@deftypefn {} {[@dots{}] =} builtin (@var{f}, @dots{})\n\
 Call the base function @var{f} even if @var{f} is overloaded to another\n\
 function for the given type signature.\n\
 \n\
 This is normally useful when doing object-oriented programming and there is\n\
 a requirement to call one of Octave's base functions rather than the\n\
 overloaded one of a new class.\n\
 \n\
 A trivial example which redefines the @code{sin} function to be the\n\
@@ -4895,18 +4895,18 @@ cleanup_statement_list (tree_statement_l
     {
       delete *lst;
       *lst = 0;
     }
 }
 
 DEFUN (eval, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {} eval (@var{try})\n\
-@deftypefnx {Built-in Function} {} eval (@var{try}, @var{catch})\n\
+@deftypefn  {} {} eval (@var{try})\n\
+@deftypefnx {} {} eval (@var{try}, @var{catch})\n\
 Parse the string @var{try} and evaluate it as if it were an Octave\n\
 program.\n\
 \n\
 If execution fails, evaluate the optional string @var{catch}.\n\
 \n\
 The string @var{try} is evaluated in the current context, so any results\n\
 remain available after @code{eval} returns.\n\
 \n\
@@ -5030,17 +5030,17 @@ the security considerations that the eva
 %!test
 %! [a,] = gcd (1,2);
 %! [a,b,] = gcd (1, 2);
 
 */
 
 DEFUN (assignin, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} assignin (@var{context}, @var{varname}, @var{value})\n\
+@deftypefn {} {} assignin (@var{context}, @var{varname}, @var{value})\n\
 Assign @var{value} to @var{varname} in context @var{context}, which\n\
 may be either @qcode{\"base\"} or @qcode{\"caller\"}.\n\
 @seealso{evalin}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () != 3)
@@ -5066,18 +5066,18 @@ may be either @qcode{\"base\"} or @qcode
   else
     error ("assignin: invalid variable name in argument VARNAME");
 
   return retval;
 }
 
 DEFUN (evalin, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {} evalin (@var{context}, @var{try})\n\
-@deftypefnx {Built-in Function} {} evalin (@var{context}, @var{try}, @var{catch})\n\
+@deftypefn  {} {} evalin (@var{context}, @var{try})\n\
+@deftypefnx {} {} evalin (@var{context}, @var{try}, @var{catch})\n\
 Like @code{eval}, except that the expressions are evaluated in the context\n\
 @var{context}, which may be either @qcode{\"caller\"} or @qcode{\"base\"}.\n\
 @seealso{eval, assignin}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
@@ -5146,18 +5146,18 @@ Like @code{eval}, except that the expres
         octave_throw_execution_exception ();
     }
 
   return retval;
 }
 
 DEFUN (__parser_debug_flag__, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {@var{val} =} __parser_debug_flag__ ()\n\
-@deftypefnx {Built-in Function} {@var{old_val} =} __parser_debug_flag__ (@var{new_val})\n\
+@deftypefn  {} {@var{val} =} __parser_debug_flag__ ()\n\
+@deftypefnx {} {@var{old_val} =} __parser_debug_flag__ (@var{new_val})\n\
 Query or set the internal flag that determines whether Octave's parser prints\n\
 debug information as it processes an expression.\n\
 @seealso{__lexer_debug_flag__}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   bool debug_flag = octave_debug;
@@ -5167,17 +5167,17 @@ debug information as it processes an exp
 
   octave_debug = debug_flag;
 
   return retval;
 }
 
 DEFUN (__parse_file__, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} __parse_file__ (@var{file}, @var{verbose})\n\
+@deftypefn {} {} __parse_file__ (@var{file}, @var{verbose})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
