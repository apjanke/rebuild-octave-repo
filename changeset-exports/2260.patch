# HG changeset patch
# User jwe
# Date 832805085 0
#      Wed May 22 22:44:45 1996 +0000
# Node ID 8b60a00802b9b3a25440e02a9d7d611f13932cac
# Parent  22893e3c7fbf9550a3379d3a085f74b90b279c5b
[project @ 1996-05-22 22:44:45 by jwe]

diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -2044,17 +2044,17 @@ OCT_VAL_REP::make_numeric (bool force_st
 	if (! flag)
 	  flag = Vimplicit_str_to_num_ok;
 
 	if (flag < 0)
 	  warn_implicit_conversion ("string", "char matrix");
 
 	if (flag)
 	  {
-	    retval = *char_matrix;
+	    retval = octave_value (*char_matrix, true);
 	    retval.force_numeric (force_string_conv);
 	  }
 	else
 	  gripe_invalid_conversion ("string", "char matrix");
       }
       break;
 
     case range_constant:
@@ -2425,22 +2425,30 @@ do_binary_op (octave_value& a, octave_va
 	warning ("binary operation on empty matrix");
       else if (flag == 0)
 	{
 	  ::error ("invalid binary operation on empty matrix");
 	  return retval;
 	}
     }
 
-  octave_value tmp_a = a.make_numeric ();
+  int force = (a.is_string () && b.is_string ()
+	       && (t == tree_expression::cmp_lt
+		   || t == tree_expression::cmp_le
+		   || t == tree_expression::cmp_eq
+		   || t == tree_expression::cmp_ge
+		   || t == tree_expression::cmp_gt
+		   || t == tree_expression::cmp_ne));
+
+  octave_value tmp_a = a.make_numeric (force);
 
   if (error_state)
     return retval;
 
-  octave_value tmp_b = b.make_numeric ();
+  octave_value tmp_b = b.make_numeric (force);
 
   if (error_state)
     return retval;
 
   OCT_VAL_REP::constant_type a_type = tmp_a.const_type ();
   OCT_VAL_REP::constant_type b_type = tmp_b.const_type ();
 
   double d1, d2;
