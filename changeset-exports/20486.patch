# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1441817032 -7200
#      Wed Sep 09 18:43:52 2015 +0200
# Node ID 4bb41929286b32bf0c22c5027324a10790786952
# Parent  f515bac7c7c185407f3a77b940da806639187a36
Deprecate bitmax.

* NEWS: Announce deprecation and replacement functions.

* scripts/deprecated/bitmax.m: New function.  Add deprecation message to
docstring.  Add deprecation warning to m-file.

* scripts/deprecated/module.mk: Add deprecated versions to build system.

* libinterp/corefcn/bitfcns.cc: Remove build-in function.  Remove function
from docstrings.

* libinterp/corefcn/data.cc: Remove function from docstrings.

* scripts/general/bitcmp.m: Replace bitmax function calls with flintmax.
Remove function from docstrings.

* scripts/general/bitget.m: Replace bitmax function calls with flintmax.
Remove function from docstrings.

* scripts/general/bitset.m: Replace bitmax function calls with flintmax.
Remove function from docstrings.

* scripts/specfun/factor.m: Replace bitmax function calls with flintmax.
Remove function from docstrings.

* scripts/statistics/distributions/unidpdf.m: Remove function from docstrings.

* scripts/general/num2str.m: Replaced function in comment.

* doc/interpreter/doccheck/aspell-octave.en.pws: Remove functions from list.

* doc/interpreter/numbers.txi: Remove function from manual.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -41,16 +41,17 @@ Summary of important user-visible change
  ** Deprecated functions.
 
     The following functions have been deprecated in Octave 4.2 and will
     be removed from Octave 4.6 (or whatever version is the second major
     release after 4.2):
 
       Function             | Replacement
       ---------------------|------------------
+      bitmax               | flintmax
       wavread              | audioread
       wavwrite             | audiowrite
 
  ** The following functions were deprecated in Octave 3.8 and have been
     removed from Octave 4.2.
 
       default_save_options    java_new
       gen_doc_cache           java_unsigned_conversion
diff --git a/doc/interpreter/doccheck/aspell-octave.en.pws b/doc/interpreter/doccheck/aspell-octave.en.pws
--- a/doc/interpreter/doccheck/aspell-octave.en.pws
+++ b/doc/interpreter/doccheck/aspell-octave.en.pws
@@ -69,17 +69,16 @@ BiConjugate
 bigtriangledown
 bincoeff
 binocdf
 binoinv
 binopdf
 binornd
 Biomathematics
 bitmapped
-bitmax
 bitwise
 bivariate
 Blackman
 blas
 bmp
 bof
 boolean
 boolMatrix
diff --git a/doc/interpreter/numbers.txi b/doc/interpreter/numbers.txi
--- a/doc/interpreter/numbers.txi
+++ b/doc/interpreter/numbers.txi
@@ -614,22 +614,17 @@ bitget (100 * ones (1, 8), 8:-1:1)
 It should be noted that all values passed to the bit manipulation
 functions of Octave are treated as integers.  Therefore, even though the
 example for @code{bitset} above passes the floating point value
 @code{10}, it is treated as the bits @code{[1, 0, 1, 0]} rather than the
 bits of the native floating point format representation of @code{10}.
 
 As the maximum value that can be represented by a number is important
 for bit manipulation, particularly when forming masks, Octave supplies
-the function @code{bitmax}.
-
-@DOCSTRING(bitmax)
-
-This is the double precision version of the function @code{intmax},
-previously discussed.
+two functions 'flintmax' for floating point integers, and 'intmax'.
 
 Octave also includes the basic bitwise 'and', 'or', and 'exclusive or'
 operators.
 
 @DOCSTRING(bitand)
 
 @DOCSTRING(bitor)
 
diff --git a/libinterp/corefcn/bitfcns.cc b/libinterp/corefcn/bitfcns.cc
--- a/libinterp/corefcn/bitfcns.cc
+++ b/libinterp/corefcn/bitfcns.cc
@@ -363,42 +363,40 @@ bitop (const std::string& fname, const o
   return retval;
 }
 
 DEFUN (bitand, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} bitand (@var{x}, @var{y})\n\
 Return the bitwise AND of non-negative integers.\n\
 \n\
-@var{x}, @var{y} must be in the range [0,bitmax]\n\
-@seealso{bitor, bitxor, bitset, bitget, bitcmp, bitshift, bitmax}\n\
+@var{x}, @var{y} must be in the range [0,intmax]\n\
+@seealso{bitor, bitxor, bitset, bitget, bitcmp, bitshift, intmax, flintmax}\n\
 @end deftypefn")
 {
   return bitop ("bitand", args);
 }
 
 DEFUN (bitor, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} bitor (@var{x}, @var{y})\n\
-Return the bitwise OR of non-negative integers.\n\
+Return the bitwise OR of non-negative integers @var{x} and @var{y}.\n\
 \n\
-@var{x}, @var{y} must be in the range [0,bitmax]\n\
-@seealso{bitor, bitxor, bitset, bitget, bitcmp, bitshift, bitmax}\n\
+@seealso{bitor, bitxor, bitset, bitget, bitcmp, bitshift, intmax, flintmax}\n\
 @end deftypefn")
 {
   return bitop ("bitor", args);
 }
 
 DEFUN (bitxor, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} bitxor (@var{x}, @var{y})\n\
-Return the bitwise XOR of non-negative integers.\n\
+Return the bitwise XOR of non-negative integers @var{x} and @var{y}.\n\
 \n\
-@var{x}, @var{y} must be in the range [0,bitmax]\n\
-@seealso{bitand, bitor, bitset, bitget, bitcmp, bitshift, bitmax}\n\
+@seealso{bitand, bitor, bitset, bitget, bitcmp, bitshift, intmax, flintmax}\n\
 @end deftypefn")
 {
   return bitop ("bitxor", args);
 }
 
 /*
 %!assert (bitand (true, false), false)
 %!assert (bitor  (true, false), true)
@@ -541,18 +539,18 @@ bitshift (float a, int n, int64_t mask)
 DEFUN (bitshift, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} bitshift (@var{a}, @var{k})\n\
 @deftypefnx {Built-in Function} {} bitshift (@var{a}, @var{k}, @var{n})\n\
 Return a @var{k} bit shift of @var{n}-digit unsigned integers in @var{a}.\n\
 \n\
 A positive @var{k} leads to a left shift; A negative value to a right shift.\n\
 \n\
-If @var{n} is omitted it defaults to log2(bitmax)+1.\n\
-@var{n} must be in the range [1,log2(bitmax)+1] usually [1,33].\n\
+If @var{n} is omitted it defaults to 64.\n\
+@var{n} must be in the range [1,64].\n\
 \n\
 @example\n\
 @group\n\
 bitshift (eye (3), 1)\n\
 @result{}\n\
 @group\n\
 2 0 0\n\
 0 2 0\n\
@@ -563,17 +561,17 @@ bitshift (10, [-2, -1, 0, 1, 2])\n\
 @result{} 2   5  10  20  40\n\
 @c FIXME: restore this example when third arg is allowed to be an array.\n\
 @c\n\
 @c\n\
 @c bitshift ([1, 10], 2, [3,4])\n\
 @c @result{} 4  8\n\
 @end group\n\
 @end example\n\
-@seealso{bitand, bitor, bitxor, bitset, bitget, bitcmp, bitmax}\n\
+@seealso{bitand, bitor, bitxor, bitset, bitget, bitcmp, intmax, flintmax}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 2 || nargin == 3)
     {
@@ -673,65 +671,28 @@ bitshift (10, [-2, -1, 0, 1, 2])\n\
 %!assert (bitshift (uint8 (255), 1), uint8 (254))
 
 %!error <expecting integer as second argument> bitshift (16, 1.5)
 %!error bitshift (16, {1})
 %!error <N must be a scalar integer> bitshift (10, [-2 -1 0 1 2], [1 1 1 1 1])
 %!error <N must be positive> bitshift (10, [-2 -1 0 1 2], -1)
 */
 
-DEFUN (bitmax, args, ,
-       "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {} bitmax ()\n\
-@deftypefnx {Built-in Function} {} bitmax (\"double\")\n\
-@deftypefnx {Built-in Function} {} bitmax (\"single\")\n\
-Return the largest integer that can be represented within a floating point\n\
-value.\n\
-\n\
-The default class is @qcode{\"double\"}, but @qcode{\"single\"} is a\n\
-valid option.  On IEEE 754 compatible systems, @code{bitmax} is\n\
-@w{@math{2^{53} - 1}} for @qcode{\"double\"} and @w{@math{2^{24} -1}} for\n\
-@qcode{\"single\"}.\n\
-@seealso{flintmax, intmax, realmax, realmin}\n\
-@end deftypefn")
-{
-  octave_value retval;
-  std::string cname = "double";
-  int nargin = args.length ();
-
-  if (nargin == 1 && args(0).is_string ())
-    cname = args(0).string_value ();
-  else if (nargin != 0)
-    {
-      print_usage ();
-      return retval;
-    }
-
-  if (cname == "double")
-    retval = (static_cast<double> (max_mantissa_value<double> ()));
-  else if (cname == "single")
-    retval = (static_cast<float> (max_mantissa_value<float> ()));
-  else
-    error ("bitmax: not defined for class '%s'", cname.c_str ());
-
-  return retval;
-}
-
 DEFUN (flintmax, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} flintmax ()\n\
 @deftypefnx {Built-in Function} {} flintmax (\"double\")\n\
 @deftypefnx {Built-in Function} {} flintmax (\"single\")\n\
 Return the largest integer that can be represented consecutively in a\n\
 floating point value.\n\
 \n\
 The default class is @qcode{\"double\"}, but @qcode{\"single\"} is a valid\n\
 option.  On IEEE 754 compatible systems, @code{flintmax} is @w{@math{2^{53}}}\n\
 for @qcode{\"double\"} and @w{@math{2^{24}}} for @qcode{\"single\"}.\n\
-@seealso{bitmax, intmax, realmax, realmin}\n\
+@seealso{intmax, realmax, realmin}\n\
 @end deftypefn")
 {
   octave_value retval;
   std::string cname = "double";
   int nargin = args.length ();
 
   if (nargin == 1 && args(0).is_string ())
     cname = args(0).string_value ();
@@ -780,17 +741,17 @@ unsigned 16-bit integer.\n\
 @item uint32\n\
 unsigned 32-bit integer.\n\
 \n\
 @item uint64\n\
 unsigned 64-bit integer.\n\
 @end table\n\
 \n\
 The default for @var{type} is @code{int32}.\n\
-@seealso{intmin, flintmax, bitmax}\n\
+@seealso{intmin, flintmax}\n\
 @end deftypefn")
 {
   octave_value retval;
   std::string cname = "int32";
   int nargin = args.length ();
 
   if (nargin == 1 && args(0).is_string ())
     cname = args(0).string_value ();
@@ -851,17 +812,17 @@ unsigned 16-bit integer.\n\
 @item uint32\n\
 unsigned 32-bit integer.\n\
 \n\
 @item uint64\n\
 unsigned 64-bit integer.\n\
 @end table\n\
 \n\
 The default for @var{type} is @code{int32}.\n\
-@seealso{intmax, flintmax, bitmax}\n\
+@seealso{intmax, flintmax}\n\
 @end deftypefn")
 {
   octave_value retval;
   std::string cname = "int32";
   int nargin = args.length ();
 
   if (nargin == 1 && args(0).is_string ())
     cname = args(0).string_value ();
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -4714,17 +4714,17 @@ When called with no arguments, return a 
 \n\
 Given a single argument @var{x}, return the distance between @var{x} and the\n\
 next largest value.\n\
 \n\
 When called with more than one argument the first two arguments are taken as\n\
 the number of rows and columns and any further arguments specify additional\n\
 matrix dimensions.  The optional argument @var{class} specifies the return\n\
 type and may be either @qcode{\"double\"} or @qcode{\"single\"}.\n\
-@seealso{realmax, realmin, intmax, bitmax}\n\
+@seealso{realmax, realmin, intmax, flintmax}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
   octave_value retval;
 
   if (nargin == 1 && ! args(0).is_string ())
     {
       if (args(0).is_single_type ())
@@ -4887,17 +4887,17 @@ When called with a single argument, retu
 specified.\n\
 \n\
 When called with more than one scalar argument the first two arguments are\n\
 taken as the number of rows and columns and any further arguments specify\n\
 additional matrix dimensions.\n\
 \n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
-@seealso{realmin, intmax, bitmax, eps}\n\
+@seealso{realmin, intmax, flintmax, eps}\n\
 @end deftypefn")
 {
   return fill_matrix (args, std::numeric_limits<double>::max (),
                       std::numeric_limits<float>::max (), "realmax");
 }
 
 DEFUN (realmin, args, ,
        "-*- texinfo -*-\n\
diff --git a/scripts/deprecated/bitmax.m b/scripts/deprecated/bitmax.m
new file mode 100644
--- /dev/null
+++ b/scripts/deprecated/bitmax.m
@@ -0,0 +1,52 @@
+## Copyright (C) 2004-2015 John W. Eaton
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {@var{r} =} bitmax (@var{precision})
+##
+## @code{bitmax} is deprecated and will be removed in Octave version 4.4.
+## Use @code{flintmax (precision) - 1} for the equivalent functionality.
+##
+## Return the largest integer @var{r} that can be represented within a
+## floating point value.
+##
+## The default class is @qcode{"double"}, but @qcode{"single"} is a valid
+## option.  On IEEE 754 compatible systems, @code{bitmax} is
+## @w{@math{2^{53} - 1}} for @qcode{"double"} and @w{@math{2^{24} - 1}} for
+## @qcode{"single"}.
+##
+## @seealso{flintmax, intmax, realmax, realmin}
+## @end deftypefn
+
+## Deprecated in version 4.2
+
+function r = bitmax (precision)
+
+  persistent warned = false;
+  if (! warned)
+    warned = true;
+    warning ("Octave:deprecated-function",
+             "bitmax is obsolete and will be removed from a future version of Octave, please use flintmax instead");
+  endif
+
+  if (nargin == 0)
+    precision = "double";
+  endif
+  r = flintmax (precision) - 1;
+
+endfunction
diff --git a/scripts/deprecated/module.mk b/scripts/deprecated/module.mk
--- a/scripts/deprecated/module.mk
+++ b/scripts/deprecated/module.mk
@@ -1,12 +1,13 @@
 FCN_FILE_DIRS += scripts/deprecated
 
 scripts_deprecated_FCN_FILES = \
   scripts/deprecated/bicubic.m \
+  scripts/deprecated/bitmax.m \
   scripts/deprecated/delaunay3.m \
   scripts/deprecated/dump_prefs.m \
   scripts/deprecated/find_dir_in_path.m \
   scripts/deprecated/finite.m \
   scripts/deprecated/fmod.m \
   scripts/deprecated/fnmatch.m \
   scripts/deprecated/gmap40.m \
   scripts/deprecated/isstr.m \
diff --git a/scripts/general/bitcmp.m b/scripts/general/bitcmp.m
--- a/scripts/general/bitcmp.m
+++ b/scripts/general/bitcmp.m
@@ -15,49 +15,49 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} bitcmp (@var{A}, @var{k})
 ## Return the @var{k}-bit complement of integers in @var{A}.
 ##
-## If @var{k} is omitted @code{k = log2 (bitmax) + 1} is assumed.
+## If @var{k} is omitted @code{k = log2 (flintmax) + 1} is assumed.
 ##
 ## @example
 ## @group
 ## bitcmp (7,4)
 ##   @result{} 8
 ## dec2bin (11)
 ##   @result{} 1011
 ## dec2bin (bitcmp (11, 6))
 ##   @result{} 110100
 ## @end group
 ## @end example
 ##
-## @seealso{bitand, bitor, bitxor, bitset, bitget, bitcmp, bitshift, bitmax}
+## @seealso{bitand, bitor, bitxor, bitset, bitget, bitcmp, bitshift, flintmax}
 ## @end deftypefn
 
 ## Liberally based on the version by Kai Habel from octave-forge
 
 function C = bitcmp (A, k)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
   if (nargin == 2 && (! isscalar (k) || (floor (k) != k)))
     error ("bitcmp: K must be a scalar integer");
   endif
 
   if (isa (A, "double"))
-    bmax = bitmax;
+    bmax = flintmax - 1;
     amax = ceil (log2 (bmax));
   elseif (isa (A, "single"))
-    bmax = bitmax ("single");
+    bmax = flintmax ("single") - 1;
     amax = ceil (log2 (bmax));
   elseif (isinteger (A))
     amax = sizeof (ones (1, class (A))) * 8;
     bmax = bitpack (true (amax, 1), class (A));
   else
     error ("bitcmp: invalid class %s", class (A));
   endif
 
@@ -71,24 +71,24 @@ function C = bitcmp (A, k)
     mask = bitshift (bmax, k - amax);
     C = bitxor (bitand (A, mask), mask);
   endif
 endfunction
 
 
 %!test
 %! Amax = 53;
-%! Bmax = bitmax;
+%! Bmax = flintmax - 1;
 %! A = bitshift (Bmax,-2);
 %! assert (bitcmp (A,Amax),bitor (bitshift (1,Amax-1), bitshift (1,Amax-2)));
 %! assert (bitcmp (A,Amax-1), bitshift (1,Amax-2));
 %! assert (bitcmp (A,Amax-2), 0);
 %!test
 %! Amax = 24;
-%! Bmax = bitmax ("single");
+%! Bmax = flintmax ("single") - 1;
 %! A = bitshift (Bmax,-2);
 %! assert (bitcmp (A,Amax),bitor (bitshift (single (1),Amax-1), bitshift (single (1),Amax-2)));
 %! assert (bitcmp (A,Amax-1), bitshift (single (1),Amax-2));
 %! assert (bitcmp (A,Amax-2), single (0));
 %!test
 %! Amax = 8;
 %! Bmax = intmax ("uint8");
 %! A = bitshift (Bmax,-2);
diff --git a/scripts/general/bitget.m b/scripts/general/bitget.m
--- a/scripts/general/bitget.m
+++ b/scripts/general/bitget.m
@@ -23,32 +23,32 @@
 ## The least significant bit is @var{n} = 1.
 ##
 ## @example
 ## @group
 ## bitget (100, 8:-1:1)
 ## @result{} 0  1  1  0  0  1  0  0
 ## @end group
 ## @end example
-## @seealso{bitand, bitor, bitxor, bitset, bitcmp, bitshift, bitmax}
+## @seealso{bitand, bitor, bitxor, bitset, bitcmp, bitshift, intmax, flintmax}
 ## @end deftypefn
 
 ## Liberally based of the version by Kai Habel from octave-forge
 
 function C = bitget (A, n)
 
   if (nargin != 2)
     print_usage ();
   endif
 
   if (isa (A, "double"))
-    Amax = ceil (log2 (bitmax));
+    Amax = ceil (log2 (flintmax));
     _conv = @double;
   elseif (isa (A, "single"))
-    Amax = ceil (log2 (bitmax ("single")));
+    Amax = ceil (log2 (flintmax ("single")));
     _conv = @single;
   else
     if (isa (A, "uint8"))
       Amax = 8;
       _conv = @uint8;
     elseif (isa (A, "uint16"))
       Amax = 16;
       _conv = @uint16;
diff --git a/scripts/general/bitset.m b/scripts/general/bitset.m
--- a/scripts/general/bitset.m
+++ b/scripts/general/bitset.m
@@ -27,17 +27,17 @@
 ## size or scalars.
 ##
 ## @example
 ## @group
 ## dec2bin (bitset (10, 1))
 ##   @result{} 1011
 ## @end group
 ## @end example
-## @seealso{bitand, bitor, bitxor, bitget, bitcmp, bitshift, bitmax}
+## @seealso{bitand, bitor, bitxor, bitget, bitcmp, bitshift, intmax, flintmax}
 ## @end deftypefn
 
 function C = bitset (A, n, val)
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
@@ -49,17 +49,17 @@ function C = bitset (A, n, val)
 
   if (nargin == 2)
     val = true (sz);
   endif
 
   cl = class (A);
 
   if (isfloat (A) && isreal (A))
-    Bmax = bitmax (cl);
+    Bmax = flintmax (cl);
     Amax = ceil (log2 (Bmax));
   elseif (isinteger (A))
     Bmax = intmax (cl);
     Amax = ceil (log2 (Bmax));
   else
     error ("bitset: invalid class %s", cl);
   endif
 
diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -199,17 +199,17 @@ endfunction
 %!assert (num2str (complex(1,Inf)), "1+Infi")
 %!assert (num2str (nan), "NaN")
 %!assert (num2str (complex (NaN, 1)), "NaN+1i")
 %!assert (num2str (complex (1, NaN)), "1+NaNi")
 %!assert (num2str (NA), "NA")
 %!assert (num2str (complex (NA, 1)), "NA+1i")
 %!assert (num2str (complex (1, NA)), "1+NAi")
 
-## FIXME: Integers greater than bitmax() should be masked to show just
+## FIXME: Integers greater than flintmax() - 1 should be masked to show just
 ##        16 digits of precision.
 %!xtest
 %! assert (num2str (1e23), "100000000000000000000000");
 
 ## Test for bug #44864, extra rows generated from newlines in format
 %!assert (rows (num2str (magic (3), '%3d %3d %3d\n')), 3)
 
 ## Test for bug #45174
diff --git a/scripts/specfun/factor.m b/scripts/specfun/factor.m
--- a/scripts/specfun/factor.m
+++ b/scripts/specfun/factor.m
@@ -24,17 +24,17 @@
 ## The prime factorization is defined as @code{prod (@var{pf}) == @var{q}}
 ## where every element of @var{pf} is a prime number.  If @code{@var{q} == 1},
 ## return 1.
 ##
 ## With two output arguments, return the unique prime factors @var{pf} and
 ## their multiplicities.  That is, @code{prod (@var{pf} .^ @var{n}) == @var{q}}.
 ##
 ## Implementation Note: The input @var{q} must be less than
-## @code{bitmax} (9.0072e+15) in order to factor correctly.
+## @code{flintmax} (9.0072e+15) in order to factor correctly.
 ## @seealso{gcd, lcm, isprime, primes}
 ## @end deftypefn
 
 ## Author: Paul Kienzle
 
 ## 2002-01-28 Paul Kienzle
 ## * remove recursion; only check existing primes for multiplicity > 1
 ## * return multiplicity as suggested by Dirk Laurie
@@ -77,17 +77,17 @@ function [pf, n] = factor (q)
     q /= prod (p);
   endwhile
   pf = sort (pf);
 
   ## Verify algorithm was succesful
   q = prod (pf);
   if (q != qorig)
     error ("factor: Q too large to factor");
-  elseif (q > bitmax)
+  elseif (q >= flintmax ())
     warning ("factor: Q too large.  Answer is unreliable");
   endif
 
   ## Determine muliplicity.
   if (nargout > 1)
     idx = find ([0, pf] != [pf, 0]);
     pf = pf(idx(1:length (idx)-1));
     n = diff (idx);
diff --git a/scripts/statistics/distributions/unidpdf.m b/scripts/statistics/distributions/unidpdf.m
--- a/scripts/statistics/distributions/unidpdf.m
+++ b/scripts/statistics/distributions/unidpdf.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} unidpdf (@var{x}, @var{n})
 ## For each element of @var{x}, compute the probability density function (PDF)
 ## at @var{x} of a discrete uniform distribution which assumes
 ## the integer values 1--@var{n} with equal probability.
 ##
 ## Warning: The underlying implementation uses the double class and will only
-## be accurate for @var{n} @leq{} @code{bitmax} (@w{@math{2^{53} - 1}} on
+## be accurate for @var{n} < @code{flintmax} (@w{@math{2^{53}}}) on
 ## IEEE 754 compatible systems).
 ## @end deftypefn
 
 function pdf = unidpdf (x, n)
 
   if (nargin != 2)
     print_usage ();
   endif
