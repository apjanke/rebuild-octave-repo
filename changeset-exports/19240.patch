# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1412885249 14400
#      Thu Oct 09 16:07:29 2014 -0400
# Branch gui-release
# Node ID 536dadff0226da29bf9e39c1418bab2cc6298699
# Parent  b8ffcb88d77cee47f1ebed585efed8db7cfc6fa4
# Parent  c766a1f63c4059c2386212f7bab0a7340a15d87e
maint: Periodic merge of stable to gui-release.

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -94,19 +94,25 @@ file_editor_tab::file_editor_tab (const 
            this,
            SLOT (handle_cursor_moved (int,int)));
 
   connect (_edit_area, SIGNAL (create_context_menu_signal (QMenu*)),
            this, SLOT (create_context_menu (QMenu*)));
   connect (_edit_area, SIGNAL (context_menu_edit_signal (const QString&)),
            this, SLOT (handle_context_menu_edit (const QString&)));
 
-  // create statusbar for row/col indicator
+  // create statusbar for row/col indicator and eol mode
   _status_bar = new QStatusBar (this);
 
+  // eol mode
+  _eol_indicator = new QLabel ("",this);
+  _eol_indicator->setMinimumSize (35,0);
+  _status_bar->addPermanentWidget (_eol_indicator, 0);
+
+  // row- and col-indicator
   _row_indicator = new QLabel ("", this);
   _row_indicator->setMinimumSize (30,0);
   QLabel *row_label = new QLabel (tr ("Line:"), this);
   _col_indicator = new QLabel ("", this);
   _col_indicator->setMinimumSize (25,0);
   QLabel *col_label = new QLabel (tr ("Col:"), this);
   _status_bar->addPermanentWidget (row_label, 0);
   _status_bar->addPermanentWidget (_row_indicator, 0);
@@ -1299,32 +1305,103 @@ file_editor_tab::load_file (const QStrin
   QFile file (file_to_load);
   if (!file.open (QFile::ReadOnly))
     return file.errorString ();
 
   QTextStream in (&file);
   in.setCodec("UTF-8");
   QApplication::setOverrideCursor (Qt::WaitCursor);
   _edit_area->setText (in.readAll ());
+  _edit_area->setEolMode (detect_eol_mode ());
   QApplication::restoreOverrideCursor ();
 
   _copy_available = false;     // no selection yet available
   set_file_name (file_to_load);
   update_window_title (false); // window title (no modification)
   _edit_area->setModified (false); // loaded file is not modified yet
 
+  update_eol_indicator ();
+
   return QString ();
 }
 
+QsciScintilla::EolMode
+file_editor_tab::detect_eol_mode ()
+{
+  char *text = _edit_area->text ().toAscii ().data ();
+  int text_size = _edit_area->text ().length ();
+
+  char eol_lf = 0x0a;
+  char eol_cr = 0x0d;
+
+  int count_lf = 0;
+  int count_cr = 0;
+  int count_crlf = 0;
+
+  for (int i = 0; i < text_size; i++)
+    {
+      if (text[i] == eol_lf)
+        {
+          count_lf++;
+        }
+      else
+        {
+          if (text[i] == eol_cr)
+            {
+              if ((i < text_size -1) && text[i+1] == eol_lf)
+                {
+                  count_crlf++;
+                  i++;
+                }
+              else
+                count_cr++;
+            }
+        }
+    }
+
+  QsciScintilla::EolMode eol_mode = QsciScintilla::EolUnix;
+  int count_max = count_lf;
+
+  if (count_cr > count_max)
+    {
+      eol_mode = QsciScintilla::EolMac;
+      count_max = count_cr;
+    }
+  if (count_crlf > count_max)
+    {
+      eol_mode = QsciScintilla::EolWindows;
+    }
+
+  return eol_mode;
+}
+
+void
+file_editor_tab::update_eol_indicator ()
+{
+  switch (_edit_area->eolMode ())
+    {
+      case QsciScintilla::EolWindows:
+        _eol_indicator->setText ("CRLF");
+        break;
+      case QsciScintilla::EolMac:
+        _eol_indicator->setText ("CR");
+        break;
+      case QsciScintilla::EolUnix:
+        _eol_indicator->setText ("LF");
+        break;
+    }
+}
+
 void
 file_editor_tab::new_file (const QString &commands)
 {
   update_window_title (false); // window title (no modification)
   _edit_area->setText (commands);
   _edit_area->setModified (false); // new file is not modified yet
+  update_eol_indicator ();
 }
 
 void
 file_editor_tab::save_file (const QString& saveFileName, bool remove_on_success)
 {
   // If it is a new file with no name, signal that saveFileAs
   // should be performed.
   if (! valid_file_name (saveFileName))
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -206,21 +206,25 @@ private:
   void add_breakpoint_callback (const bp_info& info);
   void remove_breakpoint_callback (const bp_info& info);
   void remove_all_breakpoints_callback (const bp_info& info);
   void center_current_line ();
 
   void add_octave_apis (octave_value_list key_ovl);
   QString get_function_name ();
 
+  QsciScintilla::EolMode detect_eol_mode ();
+  void update_eol_indicator ();
+
   octave_qscintilla *_edit_area;
 
   QStatusBar *_status_bar;
   QLabel *_row_indicator;
   QLabel *_col_indicator;
+  QLabel *_eol_indicator;
 
   QString _file_name;
   QString _file_name_short;
 
   bool _long_title;
   bool _copy_available;
   bool _app_closing;
   bool _is_octave_file;
