# HG changeset patch
# User Carlo de Falco <carlo.defalco@polimi.it>
# Date 1475782767 -7200
#      Thu Oct 06 21:39:27 2016 +0200
# Branch stable
# Node ID 177e0c71bcc0c5e2e4f98cd1d4581810ed399042
# Parent  610f88ed2b789f9f9bdb648a47460fa980a64dbb
make sure the additional function arguments are always passed to odefun.

* scripts/ode/ode23.m : pass additional function arguments to odefun
* scripts/ode/ode45.m : pass additional function arguments to odefun
* scripts/ode/private/integrate_adaptive.m : do not use odeget but assume
  all required option fields exist
* scripts/ode/private/starting_stepsize.m : add default value for additional
  function arguments to odefun

diff --git a/scripts/ode/ode23.m b/scripts/ode/ode23.m
--- a/scripts/ode/ode23.m
+++ b/scripts/ode/ode23.m
@@ -206,17 +206,17 @@ function varargout = ode23 (fun, trange,
   endif
 
   if (isempty (odeopts.InitialStep))
     odeopts.InitialStep = odeopts.direction * ...
                           starting_stepsize (order, fun, trange(1),
                                              init, odeopts.AbsTol,
                                              odeopts.RelTol,
                                              strcmp (odeopts.NormControl,
-                                             "on"));
+                                             "on"), odeopts.funarguments);
   endif
 
 
   if (! isempty (odeopts.Mass) && isnumeric (odeopts.Mass))
     havemasshandle = false;
     mass = odeopts.Mass;    # constant mass
   elseif (isa (odeopts.Mass, "function_handle"))
     havemasshandle = true;  # mass defined by a function handle
diff --git a/scripts/ode/ode45.m b/scripts/ode/ode45.m
--- a/scripts/ode/ode45.m
+++ b/scripts/ode/ode45.m
@@ -190,17 +190,17 @@ function varargout = ode45 (fun, trange,
   endif
 
   if (isempty (odeopts.InitialStep))
     odeopts.InitialStep = odeopts.direction * ...
                           starting_stepsize (order, fun, trange(1),
                                              init, odeopts.AbsTol,
                                              odeopts.RelTol,
                                              strcmp (odeopts.NormControl,
-                                             "on"));
+                                             "on"), odeopts.funarguments);
   endif 
 
 
   if (! isempty (odeopts.Mass) && isnumeric (odeopts.Mass))
     havemasshandle = false;
     mass = odeopts.Mass;  # constant mass
   elseif (isa (odeopts.Mass, "function_handle"))
     havemasshandle = true;    # mass defined by a function handle
diff --git a/scripts/ode/private/integrate_adaptive.m b/scripts/ode/private/integrate_adaptive.m
--- a/scripts/ode/private/integrate_adaptive.m
+++ b/scripts/ode/private/integrate_adaptive.m
@@ -68,23 +68,23 @@ function solution = integrate_adaptive (
                                         options)
 
   fixed_times = numel (tspan) > 2;
 
   t_new = t_old = t = tspan(1);
   x_new = x_old = x = x0(:);
 
   ## Get first initial timestep
-  dt = odeget (options, "InitialStep", [], "fast");
+  dt = options.InitialStep;
   if (isempty (dt))
     dt = starting_stepsize (order, func, t, x, options.AbsTol, options.RelTol,
                             strcmp (options.NormControl, "on"), options.funarguments);
   endif
 
-  dir = odeget (options, "direction", [], "fast");
+  dir = options.direction;
   dt = dir * min (abs (dt), options.MaxStep);
 
   options.comp = 0.0;
 
   ## Factor multiplying the stepsize guess
   facmin = 0.8;
   facmax = 1.5;
   fac = 0.38^(1/(order+1));  # formula taken from Hairer
diff --git a/scripts/ode/private/starting_stepsize.m b/scripts/ode/private/starting_stepsize.m
--- a/scripts/ode/private/starting_stepsize.m
+++ b/scripts/ode/private/starting_stepsize.m
@@ -31,17 +31,18 @@
 ## [1] E. Hairer, S.P. Norsett and G. Wanner,
 ## @cite{Solving Ordinary Differential Equations I: Nonstiff Problems},
 ## Springer.
 ## @end deftypefn
 ##
 ## @seealso{odepkg}
 
 function h = starting_stepsize (order, func, t0, x0,
-                                AbsTol, RelTol, normcontrol, args)
+                                AbsTol, RelTol, normcontrol,
+                                args = {})
 
   ## compute norm of initial conditions
   d0 = AbsRel_Norm (x0, x0, AbsTol, RelTol, normcontrol);
 
   ## compute norm of the function evaluated at initial conditions
   y = func (t0, x0, args{:});
   if (iscell (y))
     y = y{1};
