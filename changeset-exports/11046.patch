# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1285746636 14400
#      Wed Sep 29 03:50:36 2010 -0400
# Node ID 14993c9e857e83b311814fd84b969446bff37606
# Parent  cc3aad9dd3ef3b8d35f26d7edf23b0c6451b700a
amd.cc, cellfun.cc: use octave_scalar_map instead of Octave_map

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-09-29  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/amd.cc (Famd): Use octave_scalar_map instead of
+	Octave_map.
+	* DLD-FUNCTIONS/cellfun.cc (get_output_list): Likewise.
+
 2010-09-29  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/dispatch.cc (Fdispatch): Use octave_scalar_map
 	instead of Octave_map.
 	* DLD-FUNCTIONS/fltk_backend.cc (plot_window::handle): Likewise.
 	* DLD-FUNCTIONS/regexp.cc (octregexp): Likewise.
 
 2010-09-29  John W. Eaton  <jwe@octave.org>
diff --git a/src/DLD-FUNCTIONS/amd.cc b/src/DLD-FUNCTIONS/amd.cc
--- a/src/DLD-FUNCTIONS/amd.cc
+++ b/src/DLD-FUNCTIONS/amd.cc
@@ -133,37 +133,32 @@ The author of the code itself is Timothy
         error ("amd: input matrix must be square");
 
       if (!error_state)
         {
           OCTAVE_LOCAL_BUFFER (double, Control, AMD_CONTROL);
           AMD_NAME (_defaults) (Control) ;
           if (nargin > 1)
             {
-              Octave_map arg1 = args(1).map_value ();
+              octave_scalar_map arg1 = args(1).scalar_map_value ();
           
               if (!error_state)
                 {
-                  if (arg1.contains ("dense"))
-                    {
-                      Cell c = arg1.contents ("dense");
-                      if (c.length() == 1)
-                        Control[AMD_DENSE] = c.elem(0).double_value ();
-                      else
-                        error ("amd: invalid options structure");
-                    }
-                  if (arg1.contains ("aggressive"))
-                    {
-                      Cell c = arg1.contents ("aggressive");
-                      if (c.length() == 1)
-                        Control[AMD_AGGRESSIVE] = c.elem(0).double_value ();
-                      else
-                        error ("amd: invalid options structure");
-                    }
+                  octave_value tmp;
+
+                  tmp = arg1.contents ("dense");
+                  if (tmp.is_defined ())
+                    Control[AMD_DENSE] = tmp.double_value ();
+
+                  tmp = arg1.contents ("aggressive");
+                  if (tmp.is_defined ())
+                    Control[AMD_AGGRESSIVE] = tmp.double_value ();
                 }
+              else
+                error ("amd: options argument must be a scalar structure");
             }
 
           if (!error_state)
             {
               OCTAVE_LOCAL_BUFFER (octave_idx_type, P, n_col);
               Matrix xinfo (AMD_INFO, 1);
               double *Info = xinfo.fortran_vec ();
 
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -65,20 +65,20 @@ get_output_list (octave_idx_type count, 
                  octave_value& error_handler)
 {
   octave_value_list tmp = func.do_multi_index_op (nargout, inputlist);
 
   if (error_state)
     {
       if (error_handler.is_defined ())
         {
-          Octave_map msg;
+          octave_scalar_map msg;
           msg.assign ("identifier", last_error_id ());
           msg.assign ("message", last_error_message ());
-          msg.assign ("index", octave_value(double (count + static_cast<octave_idx_type>(1))));
+          msg.assign ("index", static_cast<double> (count + static_cast<octave_idx_type>(1)));
           octave_value_list errlist = inputlist;
           errlist.prepend (msg);
           buffer_error_messages--;
           error_state = 0;
           tmp = error_handler.do_multi_index_op (nargout, errlist);
           buffer_error_messages++;
 
           if (error_state)
