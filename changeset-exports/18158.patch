# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1386973497 18000
#      Fri Dec 13 17:24:57 2013 -0500
# Node ID bf638abc95de8ff0e55cb71231bd953f4731b4ed
# Parent  1c22f0465c741bdbfffa372f621f18e9c896f870
eliminate constant folding in parser

* oct-parse.in.yy (fold): Delete functions and all uses.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -1935,105 +1935,16 @@ octave_base_parser::maybe_warn_variable_
       else
         warning_with_id
           ("Octave:variable-switch-label",
            "variable switch label near line %d, column %d in file '%s'",
            expr->line (), expr->column (), lexer.fcn_file_full_name.c_str ());
     }
 }
 
-static tree_expression *
-fold (tree_binary_expression *e)
-{
-  tree_expression *retval = e;
-
-  unwind_protect frame;
-
-  frame.protect_var (error_state);
-  frame.protect_var (warning_state);
-
-  frame.protect_var (discard_error_messages);
-  frame.protect_var (discard_warning_messages);
-
-  discard_error_messages = true;
-  discard_warning_messages = true;
-
-  tree_expression *op1 = e->lhs ();
-  tree_expression *op2 = e->rhs ();
-
-  if (op1->is_constant () && op2->is_constant ())
-    {
-      octave_value tmp = e->rvalue1 ();
-
-      if (! (error_state || warning_state))
-        {
-          tree_constant *tc_retval
-            = new tree_constant (tmp, op1->line (), op1->column ());
-
-          std::ostringstream buf;
-
-          tree_print_code tpc (buf);
-
-          e->accept (tpc);
-
-          tc_retval->stash_original_text (buf.str ());
-
-          delete e;
-
-          retval = tc_retval;
-        }
-    }
-
-  return retval;
-}
-
-static tree_expression *
-fold (tree_unary_expression *e)
-{
-  tree_expression *retval = e;
-
-  unwind_protect frame;
-
-  frame.protect_var (error_state);
-  frame.protect_var (warning_state);
-
-  frame.protect_var (discard_error_messages);
-  frame.protect_var (discard_warning_messages);
-
-  discard_error_messages = true;
-  discard_warning_messages = true;
-
-  tree_expression *op = e->operand ();
-
-  if (op->is_constant ())
-    {
-      octave_value tmp = e->rvalue1 ();
-
-      if (! (error_state || warning_state))
-        {
-          tree_constant *tc_retval
-            = new tree_constant (tmp, op->line (), op->column ());
-
-          std::ostringstream buf;
-
-          tree_print_code tpc (buf);
-
-          e->accept (tpc);
-
-          tc_retval->stash_original_text (buf.str ());
-
-          delete e;
-
-          retval = tc_retval;
-        }
-    }
-
-  return retval;
-}
-
 // Finish building a range.
 
 tree_expression *
 octave_base_parser::finish_colon_expression (tree_colon_expression *e)
 {
   tree_expression *retval = e;
 
   unwind_protect frame;
@@ -2079,18 +1990,16 @@ octave_base_parser::finish_colon_express
                 }
             }
         }
       else
         {
           e->preserve_base ();
           delete e;
 
-          // FIXME -- need to attempt constant folding here
-          // too (we need a generic way to do that).
           retval = base;
         }
     }
 
   return retval;
 }
 
 // Make a constant.
@@ -2293,20 +2202,17 @@ octave_base_parser::make_binary_op (int 
     default:
       panic_impossible ();
       break;
     }
 
   int l = tok_val->line ();
   int c = tok_val->column ();
 
-  tree_binary_expression *e
-    = maybe_compound_binary_expression (op1, op2, l, c, t);
-
-  return fold (e);
+  return maybe_compound_binary_expression (op1, op2, l, c, t);
 }
 
 // Build a boolean expression.
 
 tree_expression *
 octave_base_parser::make_boolean_op (int op, tree_expression *op1,
                                      token *tok_val, tree_expression *op2)
 {
@@ -2325,20 +2231,17 @@ octave_base_parser::make_boolean_op (int
     default:
       panic_impossible ();
       break;
     }
 
   int l = tok_val->line ();
   int c = tok_val->column ();
 
-  tree_boolean_expression *e
-    = new tree_boolean_expression (op1, op2, l, c, t);
-
-  return fold (e);
+  return new tree_boolean_expression (op1, op2, l, c, t);
 }
 
 // Build a prefix expression.
 
 tree_expression *
 octave_base_parser::make_prefix_op (int op, tree_expression *op1,
                                     token *tok_val)
 {
@@ -2369,20 +2272,17 @@ octave_base_parser::make_prefix_op (int 
     default:
       panic_impossible ();
       break;
     }
 
   int l = tok_val->line ();
   int c = tok_val->column ();
 
-  tree_prefix_expression *e
-    = new tree_prefix_expression (op1, l, c, t);
-
-  return fold (e);
+  return new tree_prefix_expression (op1, l, c, t);
 }
 
 // Build a postfix expression.
 
 tree_expression *
 octave_base_parser::make_postfix_op (int op, tree_expression *op1,
                                      token *tok_val)
 {
@@ -2409,20 +2309,17 @@ octave_base_parser::make_postfix_op (int
     default:
       panic_impossible ();
       break;
     }
 
   int l = tok_val->line ();
   int c = tok_val->column ();
 
-  tree_postfix_expression *e
-    = new tree_postfix_expression (op1, l, c, t);
-
-  return fold (e);
+  return new tree_postfix_expression (op1, l, c, t);
 }
 
 // Build an unwind-protect command.
 
 tree_command *
 octave_base_parser::make_unwind_command (token *unwind_tok,
                                          tree_statement_list *body,
                                          tree_statement_list *cleanup_stmts,
