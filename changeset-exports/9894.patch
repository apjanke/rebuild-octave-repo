# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1259660512 -3600
#      Tue Dec 01 10:41:52 2009 +0100
# Node ID 83bd7f34f9dadc54f9cecc4602282ee1527ba2ba
# Parent  609726a258772fd32fe6e3c92843e75442dd2d43
improve idx_vector->octave_value conversion

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2009-12-01  Jaroslav Hajek  <highegg@gmail.com>
+
+	* idx-vector.cc (idx_vector::idx_range_rep::unconvert,
+	idx_vector::idx_scalar_rep::unconvert,
+	idx_vector::idx_vector_rep::unconvert,
+	idx_vector::idx_mask_rep::unconvert): New methods.
+	(idx_vector::unconvert): Use them here. Add mask output.
+	* idx-vector.h: Update decls.
+
 2009-11-28  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dim-vector.h (dim_vector::zero_by_zero): New method.
 	* idx-vector.h (idx_vector::idx_mask_rep::is_colon_equiv): Fix.
 	* Array.cc (Array<T>::assign): Minor tweaks. Optimize 
 	A = []; A(1:m,1:n,1:k) = X for all cases. Use a shallow copy
 	for all colon-equivalent indices.
 
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -163,16 +163,23 @@ idx_vector::idx_range_rep::sort_uniq_clo
 
 std::ostream& 
 idx_vector::idx_range_rep::print (std::ostream& os) const
 {
   os << start << ':' << step << ':' << start + len*step;
   return os;
 }
 
+Range
+idx_vector::idx_range_rep::unconvert (void) const
+{
+  return Range (static_cast<double> (start+1), 
+                static_cast<double> (step), len);
+}
+
 inline octave_idx_type
 convert_index (octave_idx_type i, bool& conv_error, 
                octave_idx_type& ext)
 {
   if (i <= 0) 
     conv_error = true;
   if (ext < i) ext = i;
   return i - 1;
@@ -230,16 +237,22 @@ idx_vector::idx_scalar_rep::checkelem (o
   return data;
 }
 
 std::ostream& idx_vector::idx_scalar_rep::print (std::ostream& os) const
 {
   return os << data;
 }
 
+double
+idx_vector::idx_scalar_rep::unconvert (void) const
+{
+  return data + 1;
+}
+
 DEFINE_OCTAVE_ALLOCATOR(idx_vector::idx_vector_rep);
 
 template <class T>
 idx_vector::idx_vector_rep::idx_vector_rep (const Array<T>& nda)
   : data (0), len (nda.numel ()), ext (0), aowner (0), orig_dims (nda.dims ())
 {
   if (len != 0)
     {
@@ -389,16 +402,25 @@ idx_vector::idx_vector_rep::print (std::
   os << '[';
   for (octave_idx_type ii = 0; ii < len - 1; ii++)
     os << data[ii] << ',' << ' ';
   if (len > 0) os << data[len-1]; os << ']';
 
   return os;
 }
 
+Array<double>
+idx_vector::idx_vector_rep::unconvert (void) const
+{
+  Array<double> retval (orig_dims);
+  for (octave_idx_type i = 0; i < len; i++)
+    retval.xelem (i) = data[i] + 1;
+  return retval;
+}
+
 DEFINE_OCTAVE_ALLOCATOR(idx_vector::idx_mask_rep);
 
 idx_vector::idx_mask_rep::idx_mask_rep (bool b)
   : data (0), len (b ? 1 : 0), ext (0), lsti (-1), lste (-1),
     aowner (0), orig_dims (len, len)
 {
   if (len != 0)
     {
@@ -476,16 +498,30 @@ idx_vector::idx_mask_rep::print (std::os
   os << '[';
   for (octave_idx_type ii = 0; ii < ext - 1; ii++)
     os << data[ii] << ',' << ' ';
   if (ext > 0) os << data[ext-1]; os << ']';
 
   return os;
 }
 
+Array<bool>
+idx_vector::idx_mask_rep::unconvert (void) const
+{
+  if (aowner)
+    return *aowner;
+  else
+    {
+      Array<bool> retval (orig_dims);
+      for (octave_idx_type i = 0; i < len; i++)
+        retval.xelem (i) = data[i];
+      return retval;
+    }
+}
+
 const idx_vector idx_vector::colon (new idx_vector::idx_colon_rep ());
 
 idx_vector::idx_vector (const Array<bool>& bnda)
   : rep (0)
 {
   // Convert only if it means saving at least half the memory.
   static const int factor = (2 * sizeof (octave_idx_type));
   octave_idx_type nnz = bnda.nnz ();
@@ -828,52 +864,46 @@ idx_vector::unmask (void) const
       ext = len > 0 ? idata[len - 1] : 0;
       return new idx_vector_rep (idata, len, ext, r->orig_dimensions (), DIRECT);
     }
   else
     return *this;
 }
 
 void idx_vector::unconvert (idx_class_type& iclass,
-                            double& scalar, Range& range, Array<double>& array)
+                            double& scalar, Range& range, 
+                            Array<double>& array, Array<bool>& mask) const
 {
   iclass = idx_class ();
   switch (iclass)
     {
     case class_colon:
       break;
     case class_range:
         {
           idx_range_rep * r = dynamic_cast<idx_range_rep *> (rep);
-          double start = r->get_start (), step = r->get_step ();
-          range = Range (start+1, step, r->length (0));
+          range = r->unconvert ();
         }
       break;
     case class_scalar:
         {
           idx_scalar_rep * r = dynamic_cast<idx_scalar_rep *> (rep);
-          scalar = r->get_data () + 1;
+          scalar = r->unconvert ();
         }
       break;
     case class_vector:
         {
           idx_vector_rep * r = dynamic_cast<idx_vector_rep *> (rep);
-          const octave_idx_type *data = r->get_data ();
-          array = Array<double> (r->orig_dimensions ());
-          octave_idx_type len = r->length (0);
-          for (octave_idx_type i = 0; i < len; i++)
-            array.xelem (i) = data[i] + 1;
+          array = r->unconvert ();
         }
       break;
     case class_mask:
         {
-          // This is done because we don't want a logical index be cached for a
-          // numeric array.
-          *this = unmask ();
-          unconvert (iclass, scalar, range, array);
+          idx_mask_rep * r = dynamic_cast<idx_mask_rep *> (rep);
+          mask = r->unconvert ();
         }
       break;
     default:
       assert (false);
       break;
     }
 }
 
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -190,16 +190,18 @@ private:
       { return dim_vector (1, len); }
 
     octave_idx_type get_start (void) const { return start; }
 
     octave_idx_type get_step (void) const { return step; }
 
     std::ostream& print (std::ostream& os) const;
 
+    Range unconvert (void) const;
+
   private:
 
     DECLARE_OCTAVE_ALLOCATOR
 
     // No copying!
     idx_range_rep (const idx_range_rep& idx);
 
     octave_idx_type start, len, step;
@@ -243,16 +245,18 @@ private:
 
     dim_vector orig_dimensions (void) const
       { return dim_vector (1, 1); }
 
     octave_idx_type get_data (void) const { return data; }
 
     std::ostream& print (std::ostream& os) const;
 
+    double unconvert (void) const;
+
   private:
 
     DECLARE_OCTAVE_ALLOCATOR
 
     // No copying!
     idx_scalar_rep (const idx_scalar_rep& idx);
 
     octave_idx_type data;
@@ -303,16 +307,18 @@ private:
 
     dim_vector orig_dimensions (void) const
       { return orig_dims; }
 
     const octave_idx_type *get_data (void) const { return data; }
 
     std::ostream& print (std::ostream& os) const;
 
+    Array<double> unconvert (void) const;
+
   private:
 
     DECLARE_OCTAVE_ALLOCATOR
 
     // No copying!
     idx_vector_rep (const idx_vector_rep& idx);
 
     const octave_idx_type *data;
@@ -368,16 +374,18 @@ private:
 
     bool is_colon_equiv (octave_idx_type n) const
       { return len == n && ext == n; }
 
     const bool *get_data (void) const { return data; }
 
     std::ostream& print (std::ostream& os) const;
 
+    Array<bool> unconvert (void) const;
+
   private:
 
     DECLARE_OCTAVE_ALLOCATOR
 
     // No copying!
     idx_mask_rep (const idx_mask_rep& idx);
 
     const bool *data;
@@ -922,20 +930,20 @@ public:
   bool is_permutation (octave_idx_type n) const;
 
   // Copies all the indices to a given array. Not allowed for colons.
   void copy_data (octave_idx_type *data) const;
 
   // If the index is a mask, convert it to index vector.
   idx_vector unmask (void) const;
 
-  // Unconverts the index to a scalar, Range or double array.
-  // Note that the index class can be changed, if it's a mask index.
+  // Unconverts the index to a scalar, Range, double array or a mask.
   void unconvert (idx_class_type& iclass,
-                  double& scalar, Range& range, Array<double>& array);
+                  double& scalar, Range& range, 
+                  Array<double>& array, Array<bool>& mask) const;
     
   // FIXME -- these are here for compatibility.  They should be removed
   // when no longer in use.
 
   octave_idx_type elem (octave_idx_type n) const 
     { return (*this) (n); }
 
   bool is_colon_equiv (octave_idx_type n, int) const
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2009-12-01  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-bool-mat.h (octave_bool_matrix::octave_bool_matrix (const
+	boolNDArray&, const idx_vector&)): New constructor.
+	* ov-re-mat.h (octave_bool_matrix::octave_bool_matrix (const
+	NDArray&, const idx_vector&)): Simplify.
+	 * ov.cc (octave_value::octave_value (const idx_vector&)): Allow the
+	 mask case.
+	 * DLD-FUNCTIONS/find.cc (Ffind): Explicitly call unmask ().
+
 2009-11-30  Kacper Kowalik <xarthisius.kk@gmail.com>
 
 	* oct-hdf5.h: Drop force the use of the v1.6 API
 	* ls-hdf5.cc, ov-base-int.cc, ov-bool-mat.cc, ov-bool-sparse.cc,
 	ov-bool.cc, ov-cell.cc, ov-class.cc, ov-complex.cc, ov-cx-mat.cc,
 	ov-cx-sparse.cc, ov-fcn-handle.cc, ov-fcn-inline.cc, ov-float.cc,
 	ov-flt-complex.cc, ov-flt-cx-mat.cc, ov-flt-re-mat.cc, ov-list.cc,
 	ov-range.cc, ov-re-mat.cc, ov-re-sparse.cc, ov-scalar.cc,
diff --git a/src/DLD-FUNCTIONS/find.cc b/src/DLD-FUNCTIONS/find.cc
--- a/src/DLD-FUNCTIONS/find.cc
+++ b/src/DLD-FUNCTIONS/find.cc
@@ -478,18 +478,18 @@ b = sparse(i, j, v, sz(1), sz(2));\n\
 
 	  if (! error_state)
 	    retval = find_nonzero_elem_idx (v, nargout, 
 					    n_to_find, direction);
         }
       else if (nargout <= 1 && n_to_find == -1 && direction == 1)
         {
           // This case is equivalent to extracting indices from a logical
-          // matrix. Try to reuse the possibly cached index vector.
-          retval(0) = arg.index_vector ();
+          // matrix. Try to reuse the possibly cached index vector. 
+          retval(0) = arg.index_vector ().unmask ();
         }
       else
         {
           boolNDArray v = arg.bool_array_value ();
 
 	  if (! error_state)
 	    retval = find_nonzero_elem_idx (v, nargout, 
 					    n_to_find, direction);
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -60,16 +60,22 @@ public:
     : octave_base_matrix<boolNDArray> (bnda) { }
 
   octave_bool_matrix (const boolMatrix& bm)
     : octave_base_matrix<boolNDArray> (bm) { }
 
   octave_bool_matrix (const boolMatrix& bm, const MatrixType& t)
     : octave_base_matrix<boolNDArray> (bm, t) { }
 
+  octave_bool_matrix (const boolNDArray& bm, const idx_vector& cache)
+    : octave_base_matrix<boolNDArray> (bm) 
+    { 
+      set_idx_cache (cache);
+    }
+
   octave_bool_matrix (const octave_bool_matrix& bm)
     : octave_base_matrix<boolNDArray> (bm) { }
 
   ~octave_bool_matrix (void) { }
 
   octave_base_value *clone (void) const { return new octave_bool_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_bool_matrix (); }
 
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -88,17 +88,17 @@ public:
       // Auto-create cache to speed up subsequent indexing.
       if (zero_based && cache_index)
         set_idx_cache (idx_vector (idx));
     }
 
   octave_matrix (const NDArray& nda, const idx_vector& cache)
     : octave_base_matrix<NDArray> (nda) 
     { 
-      set_idx_cache (idx_vector (cache));
+      set_idx_cache (cache);
     }
 
   ~octave_matrix (void) { }
 
   octave_base_value *clone (void) const { return new octave_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_matrix (); }
 
   type_conv_info numeric_demotion_function (void) const;
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1046,34 +1046,37 @@ octave_value::octave_value (const Array<
 }
 
 octave_value::octave_value (const idx_vector& idx)
   : rep ()
 {
   double scalar;
   Range range;
   NDArray array;
+  boolNDArray mask;
   idx_vector::idx_class_type idx_class;
 
-  idx_vector jdx = idx; // Unconvert may potentially modify the class.
-  jdx.unconvert (idx_class, scalar, range, array);
+  idx.unconvert (idx_class, scalar, range, array, mask);
 
   switch (idx_class)
     {
     case idx_vector::class_colon:
       rep = new octave_magic_colon ();
       break;
     case idx_vector::class_range:
-      rep = new octave_range (range, jdx);
+      rep = new octave_range (range, idx);
       break;
     case idx_vector::class_scalar:
       rep = new octave_scalar (scalar);
       break;
     case idx_vector::class_vector:
-      rep = new octave_matrix (array, jdx);
+      rep = new octave_matrix (array, idx);
+      break;
+    case idx_vector::class_mask:
+      rep = new octave_bool_matrix (mask, idx);
       break;
     default:
       assert (false);
       break;
     }
 
   // FIXME: needed?
   maybe_mutate ();
