# HG changeset patch
# User jwe
# Date 1171610629 0
#      Fri Feb 16 07:23:49 2007 +0000
# Node ID a3a2580435c2ad0b443c01c09edb9fe046e7807c
# Parent  cf52583fe055b6ee2f5294ee75781e815c7ced20
[project @ 2007-02-16 07:23:49 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2007-02-16  Muthiah Annamalai  <muthuspost@gmail.com>
+
+	* specfun/nchoosek.m: Check nargin.
+
 2007-02-15  John W. Eaton  <jwe@octave.org>
 
 	* path/addpath.m, path/rmpath.m: Delete
 	* path/Makefile.in (SOURCES): Remove them from the list.
 
 	* plot/__uiobject_axes_init__.in, plot/__uiobject_axes_setr__.m:
 	Delete title, xlabel, ylabel, and zlabel properties before
 	reassigning.
diff --git a/scripts/specfun/nchoosek.m b/scripts/specfun/nchoosek.m
--- a/scripts/specfun/nchoosek.m
+++ b/scripts/specfun/nchoosek.m
@@ -44,35 +44,39 @@
 ## @end example
 ## @end ifinfo
 ##
 ## If @var{n} is a vector generate all combinations of the elements
 ## of @var{n}, taken @var{k} at a time, one row per combination. The 
 ## resulting @var{c} has size @code{[nchoosek (length (@var{n}), 
 ## @var{k}), @var{k}]}.
 ##
+## @seealso{bincoeff}
 ## @end deftypefn
 
-##AUTHORS Rolf Fabian  <fabian@tu-cottbus.de>
-##        Paul Kienzle <pkienzle@users.sf.net>
+## Author: Rolf Fabian  <fabian@tu-cottbus.de>
+## Author: Paul Kienzle <pkienzle@users.sf.net>
 
-## XXX FIXME XXX This function is identical to bincoeff for scalar
+## FIXME -- This function is identical to bincoeff for scalar
 ## values, and so should probably be combined with bincoeff.
 
 function A = nchoosek (v, k)
 
-  n = length (v);
-
-  if (n == 1)
-     A = round (exp (sum (log (k+1:v)) - sum (log (2:v-k))));
-  elseif (k == 0)
-    A = [];
-  elseif (k == 1)
-    A = v(:);
-  elseif (k == n)
-     A = v(:).';
+  if (nargin == 2)
+    n = length (v);
+    if (n == 1)
+       A = round (exp (sum (log (k+1:v)) - sum (log (2:v-k))));
+    elseif (k == 0)
+      A = [];
+    elseif (k == 1)
+      A = v(:);
+    elseif (k == n)
+       A = v(:).';
+    else
+      m = round (exp (sum (log (k:n-1)) - sum (log (2:n-k))));
+      A = [v(1)*ones(m,1), nchoosek(v(2:n),k-1);
+	   nchoosek(v(2:n),k)];
+    endif
   else
-    m = round (exp (sum (log (k:n-1)) - sum (log (2:n-k))));
-    A = [v(1)*ones(m,1), nchoosek(v(2:n),k-1);
-	 nchoosek(v(2:n),k)];
+    print_usage ();
   endif
 
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2007-02-16  John W. Eaton  <jwe@octave.org>
+
+	* toplev.cc (wait_for_input): New function.
+	(run_command_and_return_output): Use it instead of napping.
+
+	* oct-procbuf.h (octave_procbuf::pid): Now const.
+	* procstream.h (procstreambase::pid): Now const.
+	(procstreambase::file_number): New function.
+
 2007-02-15  John W. Eaton  <jwe@octave.org>
 
 	* mxarray.h (mxChar): Use char instead of unsigned short.
 
 	* toplev.cc (Foctave_config_info): Remove
 	OCTAVE_CONF_MKOCTFILE_INCFLAGS and OCTAVE_CONF_MKOCTFILE_LFLAGS
 	from the list.
 	* oct-conf.h.in (OCTAVE_CONF_MKOCTFILE_INCFLAGS,
diff --git a/src/oct-procbuf.h b/src/oct-procbuf.h
--- a/src/oct-procbuf.h
+++ b/src/oct-procbuf.h
@@ -51,17 +51,17 @@ public:
   octave_procbuf *open (const char *command, int mode);
 
   octave_procbuf *close (void);
 
   int wait_status (void) const { return wstatus; }
 
   bool is_open (void) const { return open_p; }
 
-  pid_t pid (void) { return proc_pid; }
+  pid_t pid (void) const { return proc_pid; }
 
 protected:
 
   int wstatus;
 
   bool open_p;
 
   pid_t proc_pid;
diff --git a/src/procstream.h b/src/procstream.h
--- a/src/procstream.h
+++ b/src/procstream.h
@@ -51,17 +51,19 @@ public:
     { open (name.c_str (), mode); }
 
   void open (const char *name, int mode);
 
   int is_open (void) const { return pb.is_open (); }
 
   int close (void);
 
-  pid_t pid (void) { return pb.pid (); }
+  pid_t pid (void) const { return pb.pid (); }
+
+  int file_number (void) const { return pb.file_number (); }
 
 private:
 
   octave_procbuf pb;
 
   void pb_init (void) { init (&pb); }
 
   procstreambase (const procstreambase&);
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -392,52 +392,69 @@ cleanup_iprocstream (void *p)
 {
   iprocstream *cmd = static_cast<iprocstream *> (p);
 
   octave_child_list::remove (cmd->pid ());
 
   delete cmd;
 }
 
+static int
+wait_for_input (int fid)
+{
+  int retval = -1;
+
+#if defined (HAVE_SELECT)
+  if (fid >= 0)
+    {
+      fd_set set;
+
+      FD_ZERO (&set);
+      FD_SET (fid, &set);
+
+      retval = select (FD_SETSIZE, &set, 0, 0, 0);
+    }
+#else
+  retval = 1;
+#endif
+
+  return retval;
+}
+
 static octave_value_list
 run_command_and_return_output (const std::string& cmd_str)
 {
   octave_value_list retval;
 
   iprocstream *cmd = new iprocstream (cmd_str.c_str ());
 
   if (cmd)
     {
       unwind_protect::add (cleanup_iprocstream, cmd);
 
       if (*cmd)
 	{
-	  std::ostringstream output_buf;
+	  int fid = cmd->file_number ();
 
-	  // FIXME -- Perhaps we should read more than one
-	  // character at a time and find a way to avoid the call to
-	  // octave_usleep as well?
-
-	  // This is a bit of a kluge...
-
-	  octave_usleep (100);
+	  std::ostringstream output_buf;
 
 	  char ch;
 
 	  for (;;)
 	    {
 	      if (cmd->get (ch))
 		output_buf.put (ch);
 	      else
 		{
 		  if (! cmd->eof () && errno == EAGAIN)
 		    {
 		      cmd->clear ();
 
-		      octave_usleep (100);
+		      if (wait_for_input (fid) != 1)
+			break;			
 		    }
 		  else
 		    break;
 		}
 	    }
 
 	  int cmd_status = cmd->close ();
 
