# HG changeset patch
# User Rik <rik@octave.org>
# Date 1529959714 25200
#      Mon Jun 25 13:48:34 2018 -0700
# Branch stable
# Node ID b3c35a130f945fa6ef1cbb17dad7ee03e92481d8
# Parent  c29a2107c559a1ba246a6329cbf2caabe5aa396b
fsolve.m: Return info=1 when initial guess (x0) is correct (bug #53991).

* fsolve.m: Return success (info=1) when initial guess is correct.
Add BIST test for this occurrence.

diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -347,17 +347,19 @@ function [x, fvec, info, output, fjac] =
       endif
 
       ## Update delta.
       if (ratio < min (max (0.1, 0.8*lastratio), 0.9))
         nsuc = 0;
         nfail += 1;
         delta *= decfac;
         decfac ^= 1.4142;
-        if (delta <= 1e1*macheps*xn)
+        if (fn <= tolf*n*xn)
+          info = 1;
+        elseif (delta <= 1e1*macheps*xn)
           ## Trust region became uselessly small.
           info = -3;
           break;
         endif
       else
         lastratio = ratio;
         decfac = 0.5;
         nfail = 0;
@@ -600,16 +602,22 @@ endfunction
 %! B = @(lam) [C*expm(A(lam)*0); C*expm(A(lam)*1)];
 %! detB = @(lam) det (B(lam));
 %! 
 %! [x, fvec, info] = fsolve (detB, 0);
 %! assert (x == 0);
 %! assert (fvec == -1);
 %! assert (info == -2);
 
+%!test <*53991>
+%! [x, fvec, info] = fsolve (@(x) 5*x, 0);
+%! assert (x == 0);
+%! assert (fvec == 0);
+%! assert (info == 1);
+
 ## Solve the double dogleg trust-region least-squares problem:
 ## Minimize norm(r*x-b) subject to the constraint norm(d.*x) <= delta,
 ## x being a convex combination of the gauss-newton and scaled gradient.
 
 ## FIXME: error checks
 ## FIXME: handle singularity, or leave it up to mldivide?
 
 function x = __dogleg__ (r, b, d, delta)
