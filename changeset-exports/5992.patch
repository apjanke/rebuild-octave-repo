# HG changeset patch
# User jwe
# Date 1158352158 0
#      Fri Sep 15 20:29:18 2006 +0000
# Node ID 4289ed95dde81e90aea9f6925e73505ae89bb4ce
# Parent  265723390e7b3a87428be390eb21f7d65e209b70
[project @ 2006-09-15 20:29:18 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2353,17 +2353,17 @@ Array<T>::index (idx_vector& idx_i, idx_
 
   // idx_vector::freeze() printed an error message for us.
 
   return retval;
 }
 
 template <class T>
 Array<T>
-Array<T>::index (Array<idx_vector>& ra_idx, int resize_ok, const T&) const
+Array<T>::index (Array<idx_vector>& ra_idx, int resize_ok, const T& rfv) const
 {
   // This function handles all calls with more than one idx.
   // For (3x3x3), the call can be A(2,5), A(2,:,:), A(3,2,3) etc.
 
   Array<T> retval;
 
   int n_dims = dimensions.length ();
 
@@ -2376,24 +2376,27 @@ Array<T>::index (Array<idx_vector>& ra_i
   for (octave_idx_type j = ra_idx_len; j > n_dims; j--)
     {
       idx_vector iidx = ra_idx (ra_idx_len-1);
       if (iidx.capacity () == 1 && trim_trailing_singletons)
 	ra_idx_len--;
       else
 	trim_trailing_singletons = false;
 
-      for (octave_idx_type i = 0; i < iidx.capacity (); i++)
-	if (iidx (i) != 0)
-	  {
-	    (*current_liboctave_error_handler)
-	      ("index exceeds N-d array dimensions");
-	    
-	    return retval;
-	  }
+      if (! resize_ok)
+	{
+	  for (octave_idx_type i = 0; i < iidx.capacity (); i++)
+	    if (iidx (i) != 0)
+	      {
+		(*current_liboctave_error_handler)
+		  ("index exceeds N-d array dimensions");
+
+		return retval;
+	      }
+	}
     }
 
   ra_idx.resize (ra_idx_len);
 
   dim_vector new_dims = dims ();
   dim_vector frozen_lengths;
 
   if (! any_orig_empty (ra_idx) && ra_idx_len < n_dims)
@@ -2432,19 +2435,18 @@ Array<T>::index (Array<idx_vector>& ra_i
 	  Array<octave_idx_type> elt_idx;
 
 	  for (octave_idx_type i = 0; i < n; i++)
 	    {
 	      elt_idx = get_elt_idx (ra_idx, result_idx);
 
 	      octave_idx_type numelem_elt = get_scalar_idx (elt_idx, new_dims);
 
-	      if (numelem_elt > length () || numelem_elt < 0)
-		(*current_liboctave_error_handler)
-		  ("invalid N-d array index");
+	      if (numelem_elt >= length () || numelem_elt < 0)
+		retval.elem (i) = rfv;
 	      else
 		retval.elem (i) = elem (numelem_elt);
 
 	      increment_index (result_idx, frozen_lengths);
 
 	    }
 	}
     }
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2006-09-15  John W. Eaton  <jwe@octave.org>
+
+	* Array.cc (Array<T>::index (Array<idx_vector>&, int, const T&) const): 
+	Handle resizing.
+
+	* intNDArray.h (intNDArray<T>:elt_type): New typedef.
+
 2006-09-11  John W. Eaton  <jwe@octave.org>
 
 	* dMatrix.cc (operator * (const Matrix&, const Matrix&))):
 	Handle M*v and rv*cv special cases. 
 	* CMatrix.cc (operator * (const ComplexMatrix&, const
 	ComplexMatrix&))): Likewise.
 	From Luis F. Ortiz <lortiz@interactivesupercomputing.com>.
 
diff --git a/liboctave/intNDArray.h b/liboctave/intNDArray.h
--- a/liboctave/intNDArray.h
+++ b/liboctave/intNDArray.h
@@ -27,16 +27,18 @@ 02110-1301, USA.
 #include "MArrayN.h"
 #include "boolNDArray.h"
 
 template <class T>
 class
 intNDArray : public MArrayN<T>
 {
 public:
+
+  typedef T elt_type;
   
   intNDArray (void) : MArrayN<T> () { }
 
   intNDArray (T val) : MArrayN<T> (dim_vector (1, 1), val) { }
 
   intNDArray (const dim_vector& dv) : MArrayN<T> (dv) { }
   
   intNDArray (const dim_vector& dv, T val)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2006-09-15  John W. Eaton  <jwe@octave.org>
+
+	* ops.h (DEFSTRDBLCONVFN): New arg, TFROM.
+	* OPERATORS/op-double-conv.cc: Declare and install sq_string
+	conversions too.
+
+	* ov-base-int.cc (octave_base_int_scalar<T>::convert_to_str_internal,
+	octave_base_int_matrix<T>::convert_to_str_internal):
+	New functions.
+	* ov-base-int.h: Provide decls.
+
 2006-09-15  Soren Hauberg  <soren@hauberg.org>.
 
 	* data.cc (Fsize): If nargout > ndims, fill with 1.
 
 2006-09-15  John W. Eaton  <jwe@octave.org>
 
 	* octave.cc: Fix xerbla decl.
 
diff --git a/src/OPERATORS/op-double-conv.cc b/src/OPERATORS/op-double-conv.cc
--- a/src/OPERATORS/op-double-conv.cc
+++ b/src/OPERATORS/op-double-conv.cc
@@ -72,17 +72,18 @@ DEFDBLCONVFN (uint64_scalar_to_double_ma
 DEFDBLCONVFN (bool_matrix_to_double_matrix, bool_matrix, bool_array)
 DEFDBLCONVFN (bool_scalar_to_double_matrix, bool, bool_array)
 
 DEFDBLCONVFN (sparse_matrix_to_double_matrix, sparse_matrix, array)
 DEFDBLCONVFN (sparse_bool_matrix_to_double_matrix, sparse_bool_matrix, array)
 
 DEFDBLCONVFN (range_to_double_matrix, range, array)
 
-DEFSTRDBLCONVFN(char_matrix_str_to_double_matrix)
+DEFSTRDBLCONVFN(char_matrix_str_to_double_matrix, char_matrix_str)
+DEFSTRDBLCONVFN(char_matrix_sq_str_to_double_matrix, char_matrix_sq_str)
 
 DEFDBLCONVFN (double_scalar_to_double_matrix, scalar, array)
 
 void
 install_double_conv_ops (void)
 {
   INSTALL_CONVOP (octave_int8_matrix, octave_matrix, int8_matrix_to_double_matrix);
   INSTALL_CONVOP (octave_int16_matrix, octave_matrix, int16_matrix_to_double_matrix);
@@ -108,16 +109,17 @@ install_double_conv_ops (void)
   INSTALL_CONVOP (octave_bool, octave_matrix, bool_scalar_to_double_matrix);
 
   INSTALL_CONVOP (octave_sparse_matrix, octave_matrix, sparse_matrix_to_double_matrix);
   INSTALL_CONVOP (octave_sparse_bool_matrix, octave_matrix, sparse_bool_matrix_to_double_matrix);
 
   INSTALL_CONVOP (octave_range, octave_matrix, range_to_double_matrix);
 
   INSTALL_CONVOP (octave_char_matrix_str, octave_matrix, char_matrix_str_to_double_matrix);
+  INSTALL_CONVOP (octave_char_matrix_sq_str, octave_matrix, char_matrix_sq_str_to_double_matrix);
 
   INSTALL_CONVOP (octave_scalar, octave_matrix, double_scalar_to_double_matrix);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ops.h b/src/ops.h
--- a/src/ops.h
+++ b/src/ops.h
@@ -213,18 +213,18 @@ extern void install_ops (void);
     CAST_CONV_ARG (const octave_ ## ovtfrom&); \
  \
     return new octave_matrix (NDArray (v.e ## _value ())); \
   }
 
 #define DEFSTRINTCONVFN(name, tto) \
   DEFCONVFNX(name, char_matrix_str, tto ## _matrix, tto, char_)
 
-#define DEFSTRDBLCONVFN(name) \
-  DEFCONVFNX(name, char_matrix_str, matrix, , char_)
+#define DEFSTRDBLCONVFN(name, tfrom) \
+  DEFCONVFNX(name, tfrom, matrix, , char_)
 
 #define DEFCONVFN(name, tfrom, tto) \
   DEFCONVFNX (name, tfrom, tto ## _matrix, tto, )
 
 #define DEFCONVFN2(name, tfrom, sm, tto) \
   DEFCONVFNX (name, tfrom ## _ ## sm, tto ## _matrix, tto, tfrom ## _)
 
 #define UNOPDECL(name, a) \
diff --git a/src/ov-base-int.cc b/src/ov-base-int.cc
--- a/src/ov-base-int.cc
+++ b/src/ov-base-int.cc
@@ -64,16 +64,58 @@ octave_base_int_matrix<T>::try_narrowing
 
   if (this->matrix.nelem () == 1)
     retval = new typename octave_value_int_traits<T>::scalar_type (this->matrix (0));
 
   return retval;
 }
 
 template <class T>
+octave_value
+octave_base_int_matrix<T>::convert_to_str_internal (bool, bool, char type) const
+{
+  octave_value retval;
+  dim_vector dv = this->dims ();
+  octave_idx_type nel = dv.numel ();
+
+  charNDArray chm (dv);
+
+  bool warned = false;
+
+  for (octave_idx_type i = 0; i < nel; i++)
+    {
+      OCTAVE_QUIT;
+
+      typename T::elt_type tmp = this->matrix(i);
+
+      typename T::elt_type::val_type ival = tmp.value ();
+
+      if (ival < 0 || ival > UCHAR_MAX)
+	{
+	  // FIXME -- is there something better we could do?
+
+	  ival = 0;
+
+	  if (! warned)
+	    {
+
+	      ::warning ("range error for conversion to character value");
+	      warned = true;
+	    }
+	}
+      else
+	chm (i) = static_cast<char> (ival);
+    }
+
+  retval = octave_value (chm, true, type);
+
+  return retval;
+}
+
+template <class T>
 bool
 octave_base_int_matrix<T>::save_ascii (std::ostream& os, bool&)
 {
   dim_vector d = this->dims ();
 
   os << "# ndims: " << d.length () << "\n";
 
   for (int i = 0; i < d.length (); i++)
@@ -325,16 +367,40 @@ void
 octave_base_int_matrix<T>::print_raw (std::ostream& os,
 				      bool pr_as_read_syntax) const
 {
   octave_print_internal (os, this->matrix, pr_as_read_syntax,
    			 this->current_print_indent_level ());
 }
 
 template <class T>
+octave_value
+octave_base_int_scalar<T>::convert_to_str_internal (bool, bool, char type) const
+{
+  octave_value retval;
+
+  T tmp = this->scalar;
+
+  typename T::val_type ival = tmp.value ();
+
+  if (ival < 0 || ival > UCHAR_MAX)
+    {
+      // FIXME -- is there something better we could do?
+
+      ival = 0;
+
+      ::warning ("range error for conversion to character value");
+    }
+  else
+    retval = octave_value (std::string (1, static_cast<char> (ival)), type);
+
+  return retval;
+}
+
+template <class T>
 bool
 octave_base_int_scalar<T>::save_ascii (std::ostream& os, bool&)
 {
   os << this->scalar << "\n";
   return true;
 }
 
 template <class T>
diff --git a/src/ov-base-int.h b/src/ov-base-int.h
--- a/src/ov-base-int.h
+++ b/src/ov-base-int.h
@@ -62,16 +62,18 @@ public:
   bool is_real_type (void) const { return true; }
 
   //  void increment (void) { matrix += 1; }
 
   //  void decrement (void) { matrix -= 1; }
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
+  octave_value convert_to_str_internal (bool, bool, char type) const;
+
   bool save_ascii (std::ostream& os, bool& infnan_warned);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& );
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format );
@@ -103,16 +105,18 @@ public:
   octave_base_value *try_narrowing_conversion (void) { return 0; }
 
   bool is_real_type (void) const { return true; }
 
   //  void increment (void) { scalar += 1; }
 
   //  void decrement (void) { scalar -= 1; }
 
+  octave_value convert_to_str_internal (bool, bool, char type) const;
+
   bool save_ascii (std::ostream& os, bool&);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& );
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format );
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -159,17 +159,17 @@ octave_cell::subsasgn (const std::string
 	  {
 	    octave_value tmp = do_index_op (idx.front (), true);
 
 	    if (! tmp.is_defined ())
 	      tmp = octave_value::empty_conv (type.substr (1), rhs);
 
 	    if (! error_state)
 	      {
-		Cell tcell = tmp.cell_value ();
+		const Cell tcell = tmp.cell_value ();
 
 		if (! error_state && tcell.length () == 1)
 		  {
 		    tmp = tcell(0,0);
 
 		    std::list<octave_value_list> next_idx (idx);
 
 		    next_idx.erase (next_idx.begin ());
