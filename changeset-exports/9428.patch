# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1247168487 14400
#      Thu Jul 09 15:41:27 2009 -0400
# Node ID b317debeb8284b8f0dda54ec06b971c626bae3ee
# Parent  7b74a7fd4761a1949721a84789cc94d3dc694f3b
data.cc (Fones, Fzeros, Ftrue, Ffalse): update docstring

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-07-09  John W. Eaton  <jwe@octave.org>
+
+	* data.cc (Fones, Fzeros, Ftrue, Ffalse): Update docstrings.
+
 2009-07-08  John W. Eaton  <jwe@octave.org>
 
 	* graphics.cc (convert_cdata): Return NaN for NaN values in cdata.
 
 	* pt-assign.cc (maybe_warn_former_built_in_variable): Improve message.
 
 2009-07-04  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1,12 +1,12 @@
 /*
 
 Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
-              2003, 2004, 2005, 2006, 2007, 2008 John W. Eaton
+              2003, 2004, 2005, 2006, 2007, 2008, 2009 John W. Eaton
 Copyright (C) 2009 Jaroslav Hajek
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
@@ -3603,17 +3603,20 @@ fill_matrix (const octave_value_list& ar
 
 DEFUN (ones, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ones (@var{x})\n\
 @deftypefnx {Built-in Function} {} ones (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} ones (@var{n}, @var{m}, @var{k}, @dots{})\n\
 @deftypefnx {Built-in Function} {} ones (@dots{}, @var{class})\n\
 Return a matrix or N-dimensional array whose elements are all 1.\n\
-The arguments are handled the same as the arguments for @code{eye}.\n\
+If invoked with a single scalar integer argument, return a square\n\
+matrix of the specified size.  If invoked with two or more scalar\n\
+integer arguments, or a vector of integer values, return an array with\n\
+given dimensions.\n\
 \n\
 If you need to create a matrix whose values are all the same, you should\n\
 use an expression like\n\
 \n\
 @example\n\
 val_matrix = val * ones (n, m)\n\
 @end example\n\
 \n\
@@ -3649,17 +3652,17 @@ val = ones (n,m, \"uint8\")\n\
 
 DEFUN (zeros, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} zeros (@var{x})\n\
 @deftypefnx {Built-in Function} {} zeros (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} zeros (@var{n}, @var{m}, @var{k}, @dots{})\n\
 @deftypefnx {Built-in Function} {} zeros (@dots{}, @var{class})\n\
 Return a matrix or N-dimensional array whose elements are all 0.\n\
-The arguments are handled the same as the arguments for @code{eye}.\n\
+The arguments are handled the same as the arguments for @code{ones}.\n\
 \n\
 The optional argument @var{class}, allows @code{zeros} to return an array of\n\
 the specified type, for example\n\
 \n\
 @example\n\
 val = zeros (n,m, \"uint8\")\n\
 @end example\n\
 @end deftypefn")
@@ -4126,29 +4129,29 @@ either \"double\" or \"single\".\n\
  */
 
 DEFUN (false, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} false (@var{x})\n\
 @deftypefnx {Built-in Function} {} false (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} false (@var{n}, @var{m}, @var{k}, @dots{})\n\
 Return a matrix or N-dimensional array whose elements are all logical 0.\n\
-The arguments are handled the same as the arguments for @code{eye}.\n\
+The arguments are handled the same as the arguments for @code{ones}.\n\
 @end deftypefn")
 {
   return fill_matrix (args, false, "false");
 }
 
 DEFUN (true, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} true (@var{x})\n\
 @deftypefnx {Built-in Function} {} true (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} true (@var{n}, @var{m}, @var{k}, @dots{})\n\
 Return a matrix or N-dimensional array whose elements are all logical 1.\n\
-The arguments are handled the same as the arguments for @code{eye}.\n\
+The arguments are handled the same as the arguments for @code{ones}.\n\
 @end deftypefn")
 {
   return fill_matrix (args, true, "true");
 }
 
 template <class MT>
 octave_value
 identity_matrix (int nr, int nc)
