# HG changeset patch
# User jwe
# Date 861873902 0
#      Thu Apr 24 09:25:02 1997 +0000
# Node ID 55cca18e943a025df0f07eaedbf56ecb4f8c76ce
# Parent  5c1b9e545dd1d776c56d6a69aca9b05b080d1a8c
[project @ 1997-04-24 09:19:43 by jwe]

diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -35,27 +35,28 @@ Software Foundation, 59 Temple Place - S
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
 #include "error.h"
 #include "input.h"
 #include "oct-obj.h"
+#include "ov.h"
 #include "pager.h"
-#include "toplev.h"
 #include "pt-cmd.h"
+#include "pt-const.h"
 #include "pt-exp.h"
 #include "pt-fcn.h"
 #include "pt-fvc.h"
 #include "pt-misc.h"
 #include "pt-mvr.h"
+#include "pt-pr-code.h"
 #include "pt-walk.h"
-#include "pt-pr-code.h"
-#include "ov.h"
+#include "toplev.h"
 #include "variables.h"
 
 // Nonzero means we're breaking out of a loop or function body.
 extern int breaking;
 
 // Nonzero means we're jumping to the end of a loop.
 extern int continuing;
 
@@ -209,16 +210,25 @@ tree_statement_list::eval (bool print, i
 }
 
 void
 tree_statement_list::accept (tree_walker& tw)
 {
   tw.visit_statement_list (*this);
 }
 
+tree_argument_list::~tree_argument_list (void)
+{
+  while (! empty ())
+    {
+      tree_expression *t = remove_front ();
+      delete t;
+    }
+}
+
 octave_value_list
 tree_argument_list::convert_to_const_vector (void)
 {
   int len = length ();
 
   // XXX FIXME XXX -- would be nice to know in advance how largs args
   // needs to be even when we have a list containing an all_va_args
   // token.
@@ -307,17 +317,17 @@ void
 tree_parameter_list::initialize_undefined_elements (octave_value& val)
 {
   for (Pix p = first (); p != 0; next (p))
     {
       tree_identifier *elt = this->operator () (p);
       if (! elt->is_defined ())
 	{
 	  octave_variable_reference tmp (elt);
-	  tmp.assign (val);
+	  tmp.assign (octave_value::asn_eq, val);
 	}
     }
 }
 
 void
 tree_parameter_list::define_from_arg_vector (const octave_value_list& args)
 {
   int nargin = args.length ();
diff --git a/src/pt-misc.h b/src/pt-misc.h
--- a/src/pt-misc.h
+++ b/src/pt-misc.h
@@ -51,18 +51,16 @@ class tree_if_clause;
 class tree_if_command_list;
 class tree_switch_case;
 class tree_switch_case_list;
 
 class tree_walker;
 
 #include <SLList.h>
 
-#include "pt-base.h"
-
 // A statement is either a command to execute or an expression to
 // evaluate.
 
 class
 tree_statement
 {
 friend class tree_statement_list;
 
@@ -160,24 +158,17 @@ tree_argument_list : public SLList<tree_
 public:
 
   tree_argument_list (void)
     : SLList<tree_expression *> () { }
 
   tree_argument_list (tree_expression *t)
     : SLList<tree_expression *> () { append (t); }
 
-  ~tree_argument_list (void)
-    {
-      while (! empty ())
-	{
-	  tree_expression *t = remove_front ();
-	  delete t;
-	}
-    }
+  ~tree_argument_list (void);
 
   octave_value_list convert_to_const_vector (void);
 
   void accept (tree_walker& tw);
 };
 
 // Parameter lists.  Used to hold the list of input and output
 // parameters in a function definition.  Elements are identifiers
diff --git a/src/pt-mvr.h b/src/pt-mvr.h
--- a/src/pt-mvr.h
+++ b/src/pt-mvr.h
@@ -24,29 +24,26 @@ Software Foundation, 59 Temple Place - S
 #define octave_tree_mvr2_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
-class octave_value_list;
-
 class tree_argument_list;
 class tree_identifier;
 class tree_index_expression;
 class tree_indirect_ref;
 class tree_return_list;
 
 class tree_walker;
 
 #include <string>
 
-#include "ov.h"
 #include "pt-mvr-base.h"
 #include "oct-obj.h"
 
 // Used internally.
 
 class
 tree_oct_obj : public tree_multi_val_ret
 {
diff --git a/src/pt-plot.h b/src/pt-plot.h
--- a/src/pt-plot.h
+++ b/src/pt-plot.h
@@ -25,17 +25,17 @@ Software Foundation, 59 Temple Place - S
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 class ostrstream;
 
-class tree_command;
+class tree_expression;
 class tree_plot_command;
 class plot_limits;
 class plot_range;
 class subplot_using;
 class subplot_style;
 class subplot;
 class subplot_list;
 
@@ -44,19 +44,17 @@ class tree_walker;
 #include <csignal>
 
 #include <string>
 
 #include <SLList.h>
 
 #include "dColVector.h"
 
-#include "idx-vector.h"
 #include "pt-cmd.h"
-#include "pt-exp.h"
 
 class
 tree_plot_command : public tree_command
 {
 public:
 
   tree_plot_command (subplot_list *plt = 0, plot_limits *rng = 0, int nd = 0)
     : tree_command (), ndim (nd), range (rng), plot_list (plt) { }
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -27,16 +27,25 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
 #include "error.h"
 #include "pr-output.h"
+#include "pt-cmd.h"
+#include "pt-const.h"
+#include "pt-exp.h"
+#include "pt-fcn.h"
+#include "pt-fvc.h"
+#include "pt-mat.h"
+#include "pt-misc.h"
+#include "pt-mvr.h"
+#include "pt-plot.h"
 #include "pt-pr-code.h"
 
 void
 tree_print_code::visit_argument_list (tree_argument_list& lst)
 {
   Pix p = lst.first ();
 
   while (p)
@@ -772,17 +781,17 @@ tree_print_code::visit_simple_assignment
 
       if (index)
 	{
 	  os << " (";
 	  index->accept (*this);
 	  os << ")";
 	}
 
-      os << " = ";
+      os << " " << expr.oper () << " ";
     }
 
   tree_expression *rhs = expr.right_hand_side ();
 
   if (rhs)
     rhs->accept (*this);
 
   if (in_parens)
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -759,20 +759,22 @@ symbol_record_info::symbol_record_info (
     const_type ()
 {
   if (sr.is_variable () && sr.is_defined ())
     {
       // Would be nice to avoid this cast.  XXX FIXME XXX
 
       tree_constant *tmp = static_cast<tree_constant *> (sr.def ());
 
-      const_type = tmp->type_name ();
+      octave_value vtmp = tmp->value ();
 
-      nr = tmp->rows ();
-      nc = tmp->columns ();
+      const_type = vtmp.type_name ();
+
+      nr = vtmp.rows ();
+      nc = vtmp.columns ();
 
       symbol_def *sr_def = sr.definition;
       symbol_def *hidden_def = sr_def->next_elem;
 
       if (hidden_def)
 	{
 	  if (hidden_def->is_user_function ())
 	    hides = SR_INFO_USER_FUNCTION;
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -121,39 +121,41 @@ octave_variable_reference::octave_variab
   if (indir->is_identifier_only ())
     {
       id = indir->ident ();
       indir = 0;
     }
 }
 
 void
-octave_variable_reference::assign (const octave_value& rhs)
+octave_variable_reference::assign (octave_value::assign_op op,
+				   const octave_value& rhs)
 {
   if (id)
-    id->assign (rhs);
+    id->assign (op, rhs);
   else if (indir)
     {
       octave_value& ult = indir->reference ();
-      ult = rhs;
+      ult.assign (op, rhs);
     }
   else
     panic_impossible ();
 }
 
 void
-octave_variable_reference::assign (const octave_value_list& idx,
+octave_variable_reference::assign (octave_value::assign_op op,
+				   const octave_value_list& idx,
 				   const octave_value& rhs)
 {
   if (id)
-    id->assign (idx, rhs);
+    id->assign (op, idx, rhs);
   else if (indir)
     {
       octave_value& ult = indir->reference ();
-      ult.assign (idx, rhs);
+      ult.assign (op, idx, rhs);
     }
   else
     panic_impossible ();
 }
 
 octave_value
 octave_variable_reference::value (void)
 {
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -63,19 +63,20 @@ octave_variable_reference
 public:
 
   octave_variable_reference (tree_identifier *i) : id (i), indir (0) { }
 
   octave_variable_reference (tree_indirect_ref *i);
 
   ~octave_variable_reference (void) { }
 
-  void assign (const octave_value&);
+  void assign (octave_value::assign_op, const octave_value&);
 
-  void assign (const octave_value_list&, const octave_value&);
+  void assign (octave_value::assign_op, const octave_value_list&,
+	       const octave_value&);
 
   octave_value value (void);
 
 private:
 
   tree_identifier *id;
 
   tree_indirect_ref *indir;
