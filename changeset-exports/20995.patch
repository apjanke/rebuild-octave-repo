# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1451317450 -3600
#      Mon Dec 28 16:44:10 2015 +0100
# Node ID aab7a3c7168e8d176eae14fd817b48d068726671
# Parent  dd1dcef1ee335b52afba081179b745a3a662ef97
edit a file from an error message in the terminal (bug #35619)

* QTerminal.cc (handleCustomContextMenuRequested): move slot for the context
  menu from header file, detect an error location by regular expressions;
  (edit_file): slot context menu entry for editing a file in an error message

* QTerminal.h: new signal for editing a file from an error message,
  slot handleCustomContextMenuRequested moved into QTerminal.cc, new edit
  action in the context menu, new slot for context menu entry, connect
  new edit signal to related slot in the main window

* file-editor-tab.cc (handle_context_menu_edit): only keep searching for an
  embedded function, move the rest of the search into the editor, called
  via a new signal;
  (goto_line): center the new line in all cases

* file-editor-tab.h: new signal for editing an m-file

* file-editor.cc (handle_edit_mfile_request): partly moved from file-editor-tab;
  (construct): connect new signals from file-editor-tab and from main window
  to the new slot for searching and editing an m-file

* file-editor.h: new slot for searching and editing an m-file

* main-window.cc (edit_mfile): new slot for editing an m-file, just emitting
  the signal for the editor

* main-window.h: new slot and new signal for editing an m-file

diff --git a/libgui/qterminal/libqterminal/QTerminal.cc b/libgui/qterminal/libqterminal/QTerminal.cc
--- a/libgui/qterminal/libqterminal/QTerminal.cc
+++ b/libgui/qterminal/libqterminal/QTerminal.cc
@@ -84,16 +84,63 @@ QTerminal::set_global_shortcuts (bool fo
       {
         _interrupt_action->setShortcut (
               QKeySequence (Qt::ControlModifier + Qt::Key_C));
         _nop_action->setShortcut (
               QKeySequence (Qt::ControlModifier + Qt::Key_D));
       }
   }
 
+// slot for the terminal's context menu
+void
+QTerminal::handleCustomContextMenuRequested (const QPoint& at)
+  {
+    QClipboard * cb = QApplication::clipboard ();
+    QString selected_text = selectedText();
+    bool has_selected_text = ! selected_text.isEmpty ();
+
+    _edit_action->setVisible (false);
+
+    if (has_selected_text)
+      {
+        QRegExp file ("(?:[ \\t]+)(\\S+) at line (\\d+) column (?:\\d+)");
+
+        int pos = file.indexIn (selected_text);
+
+        if (pos > -1)
+          {
+            QString file_name = file.cap (1);
+            QString line = file.cap (2);
+
+            _edit_action->setVisible (true);
+            _edit_action->setText (tr ("Edit %1 at line %2")
+                                   .arg (file_name).arg (line));
+
+            QStringList data;
+            data << file_name << line;
+            _edit_action->setData (data);
+          }
+      }
+
+    _paste_action->setEnabled (cb->text().length() > 0);
+    _copy_action->setEnabled (has_selected_text);
+
+    _contextMenu->exec (mapToGlobal (at));
+  }
+
+// slot for edit files in error messages
+void
+QTerminal::edit_file ()
+{
+  QString file = _edit_action->data ().toStringList ().at (0);
+  int line = _edit_action->data ().toStringList ().at (1).toInt ();
+
+  emit edit_mfile_request (file,line);
+}
+
 void
 QTerminal::notice_settings (const QSettings *settings)
 {
   // QSettings pointer is checked before emitting.
 
   // Set terminal font:
   QFont term_font = QFont ();
   term_font.setStyleHint (QFont::TypeWriter);
diff --git a/libgui/qterminal/libqterminal/QTerminal.h b/libgui/qterminal/libqterminal/QTerminal.h
--- a/libgui/qterminal/libqterminal/QTerminal.h
+++ b/libgui/qterminal/libqterminal/QTerminal.h
@@ -89,42 +89,38 @@ public:
   virtual void setScrollBufferSize(int value=1000) = 0;
 
 signals:
 
   void report_status_message (const QString&);
 
   void interrupt_signal (void);
 
+  void edit_mfile_request (const QString&, int);
+
 public slots:
 
   virtual void copyClipboard (void) = 0;
 
   virtual void pasteClipboard (void) = 0;
 
   virtual void selectAll (void) = 0;
 
-  virtual void handleCustomContextMenuRequested (const QPoint& at)
-  {
-    QClipboard * cb = QApplication::clipboard ();
-
-    _paste_action->setEnabled (cb->text().length() > 0);
-    _copy_action->setEnabled (selectedText().length() > 0);
-
-    _contextMenu->exec (mapToGlobal (at));
-  }
+  virtual void handleCustomContextMenuRequested (const QPoint& at);
 
   void notice_settings (const QSettings *settings);
 
   virtual void init_terminal_size (void) { }
 
   void terminal_interrupt (void) { emit interrupt_signal (); }
 
   void set_global_shortcuts (bool focus_out);
 
+  void edit_file (void);
+
 protected:
 
   QTerminal (QWidget *xparent = 0) : QWidget (xparent)
   {
     // context menu
     setContextMenuPolicy (Qt::CustomContextMenu);
 
     _contextMenu = new QMenu (this);
@@ -137,28 +133,33 @@ protected:
                      resource_manager::icon ("edit-paste"),
                       tr ("Paste"), this, SLOT (pasteClipboard ()));
 
     _contextMenu->addSeparator ();
 
     _selectall_action = _contextMenu->addAction (
                       tr ("Select All"), this, SLOT (selectAll ()));
 
+    _edit_action = _contextMenu->addAction (
+                      tr (""), this, SLOT (edit_file ()));
 
     _contextMenu->addSeparator ();
 
     _contextMenu->addAction (tr ("Clear Window"), parent (),
                              SLOT (handle_clear_command_window_request ()));
 
     connect (this, SIGNAL (customContextMenuRequested (QPoint)),
              this, SLOT (handleCustomContextMenuRequested (QPoint)));
 
     connect (this, SIGNAL (report_status_message (const QString&)),
              xparent, SLOT (report_status_message (const QString&)));
 
+    connect (this, SIGNAL (edit_mfile_request (const QString&, int)),
+             xparent, SLOT (edit_mfile (const QString&, int)));
+
     connect (xparent, SIGNAL (settings_changed (const QSettings *)),
              this, SLOT (notice_settings (const QSettings *)));
 
     connect (xparent, SIGNAL (init_terminal_size_signal ()),
              this, SLOT (init_terminal_size ()));
 
     connect (xparent, SIGNAL (copyClipboard_signal ()),
              this, SLOT (copyClipboard ()));
@@ -188,14 +189,15 @@ protected:
   }
 
 private:
 
   QMenu *_contextMenu;
   QAction * _copy_action;
   QAction * _paste_action;
   QAction * _selectall_action;
+  QAction * _edit_action;
 
   QAction *_interrupt_action;
   QAction *_nop_action;
 };
 
 #endif // QTERMINAL_H
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -279,89 +279,19 @@ file_editor_tab::handle_context_menu_edi
 
   if (pos_fct > -1)
     { // reg expr. found: it is an internal function
       _edit_area->setCursorPosition (line, pos_fct);
       _edit_area->SendScintilla (2613, line); // SCI_SETFIRSTVISIBLELINE
       return;
     }
 
-  // Is it a regular function within the search path? (Call __which__)
-  octave_value_list fct = F__which__ (ovl (word_at_cursor.toStdString ()),0);
-  octave_map map = fct(0).map_value ();
-
-  QString type = QString::fromStdString (
-                         map.contents ("type").data ()[0].string_value ());
-  QString name = QString::fromStdString (
-                         map.contents ("name").data ()[0].string_value ());
-
-  QString message = QString ();
-  QString filename = QString ();
-
-  if (type == QString("built-in function"))
-    { // built in function: can't edit
-      message = tr ("%1 is a built-in function");
-    }
-  else if (type.isEmpty ())
-    {
-      // function not known to octave -> try directory of edited file
-      // get directory
-      QDir dir;
-      if (_file_name.isEmpty ())
-        dir = _ced;
-      else
-        dir = QDir (QFileInfo (_file_name).canonicalPath ());
-
-      // function not known to octave -> try directory of edited file
-      QFileInfo file = QFileInfo (dir, word_at_cursor + ".m");
+  emit edit_mfile_request (word_at_cursor, _file_name, _ced, -1);
+}
 
-      if (file.exists ())
-        {
-          filename = file.canonicalFilePath (); // local file exists
-        }
-      else
-        { // local file does not exist -> try private directory
-          file = QFileInfo (_file_name);
-          file = QFileInfo (QDir (file.canonicalPath () + "/private"),
-                            word_at_cursor + ".m");
-
-          if (file.exists ())
-            {
-              filename = file.canonicalFilePath ();  // private function exists
-            }
-          else
-            {
-              message = tr ("Can not find function %1");  // no file found
-            }
-        }
-    }
-
-  if (! message.isEmpty ())
-    {
-      QMessageBox *msgBox
-          = new QMessageBox (QMessageBox::Critical,
-                             tr ("Octave Editor"),
-                             message.arg (name),
-                             QMessageBox::Ok, this);
-
-      msgBox->setWindowModality (Qt::NonModal);
-      msgBox->setAttribute (Qt::WA_DeleteOnClose);
-      msgBox->show ();
-      return;
-    }
-
-  if ( filename.isEmpty ())
-    filename = QString::fromStdString (
-                           map.contents ("file").data ()[0].string_value ());
-
-  if (! filename.endsWith (".m"))
-    filename.append (".m");
-
-  emit request_open_file (filename);
-}
 
 void
 file_editor_tab::set_file_name (const QString& fileName)
 {
   // update tracked file if we really have a file on disk
   QStringList trackedFiles = _file_system_watcher.files ();
   if (! trackedFiles.isEmpty ())
     _file_system_watcher.removePath (_file_name);
@@ -1119,23 +1049,22 @@ file_editor_tab::goto_line (const QWidge
     {
       bool ok = false;
       int index;
       _edit_area->getCursorPosition (&line, &index);
       line = QInputDialog::getInt (_edit_area, tr ("Goto line"),
                                    tr ("Line number"), line+1, 1,
                                    _edit_area->lines (), 1, &ok);
       if (ok)
-        {
-          _edit_area->setCursorPosition (line-1, 0);
-          center_current_line ();
-        }
+        _edit_area->setCursorPosition (line-1, 0);
     }
   else  // go to given line without dialog
     _edit_area->setCursorPosition (line-1, 0);
+
+  center_current_line ();
 }
 
 void
 file_editor_tab::move_match_brace (const QWidget *ID, bool select)
 {
   if (ID != this)
     return;
 
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -136,16 +136,18 @@ signals:
   void editor_state_changed (bool copy_available, bool is_octave_file);
   void tab_remove_request ();
   void add_filename_to_list (const QString&, const QString&, QWidget *);
   void mru_add_file (const QString& file_name, const QString& encoding);
   void editor_check_conflict_save (const QString& saveFileName,
                                    bool remove_on_success);
   void run_file_signal (const QFileInfo& info);
   void request_open_file (const QString&);
+  void  edit_mfile_request (const QString&, const QString&,
+                            const QString&, int);
 
 protected:
 
   void closeEvent (QCloseEvent *event);
   void set_file_name (const QString& fileName);
 
 private slots:
 
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -41,16 +41,17 @@ along with Octave; see the file COPYING.
 #include <QTabBar>
 #include <QProcess>
 #include <QInputDialog>
 #include <Qsci/qscicommandset.h>
 
 #include "octave-link.h"
 #include "utils.h"
 #include "main-window.h"
+#include <oct-map.h>
 
 file_editor::file_editor (QWidget *p)
   : file_editor_interface (p)
 {
   // Set current editing directory before construct because loaded
   // files will change ced accordingly.
   ced = QDir::currentPath ();
 
@@ -618,16 +619,100 @@ file_editor::check_conflict_save (const 
       return;
     }
 
   // Can save without conflict, have the file editor tab do so.
   emit fetab_save_file (saveFileWidget, saveFileName, remove_on_success);
 }
 
 void
+file_editor::handle_edit_mfile_request (const QString& fname,
+                                        const QString& ffile,
+                                        const QString& curr_dir, int line)
+{
+  // Is it a regular function within the search path? (Call __which__)
+  octave_value_list fct = F__which__ (ovl (fname.toStdString ()),0);
+  octave_map map = fct(0).map_value ();
+
+  QString type = QString::fromStdString (
+                         map.contents ("type").data ()[0].string_value ());
+  QString name = QString::fromStdString (
+                         map.contents ("name").data ()[0].string_value ());
+
+  QString message = QString ();
+  QString filename = QString ();
+
+  if (type == QString("built-in function"))
+    { // built in function: can't edit
+      message = tr ("%1 is a built-in function");
+    }
+  else if (type.isEmpty ())
+    {
+      // function not known to octave -> try directory of edited file
+      // get directory
+      QDir dir;
+      if (ffile.isEmpty ())
+        {
+          if (curr_dir.isEmpty ())
+            dir = QDir (ced);
+          else
+            dir = QDir (curr_dir);
+        }
+      else
+        dir = QDir (QFileInfo (ffile).canonicalPath ());
+
+      // function not known to octave -> try directory of edited file
+      QFileInfo file = QFileInfo (dir, fname + ".m");
+
+      if (file.exists ())
+        {
+          filename = file.canonicalFilePath (); // local file exists
+        }
+      else
+        { // local file does not exist -> try private directory
+          file = QFileInfo (ffile);
+          file = QFileInfo (QDir (file.canonicalPath () + "/private"),
+                            fname + ".m");
+
+          if (file.exists ())
+            {
+              filename = file.canonicalFilePath ();  // private function exists
+            }
+          else
+            {
+              message = tr ("Can not find function %1");  // no file found
+            }
+        }
+    }
+
+  if (! message.isEmpty ())
+    {
+      QMessageBox *msgBox
+          = new QMessageBox (QMessageBox::Critical,
+                             tr ("Octave Editor"),
+                             message.arg (name),
+                             QMessageBox::Ok, this);
+
+      msgBox->setWindowModality (Qt::NonModal);
+      msgBox->setAttribute (Qt::WA_DeleteOnClose);
+      msgBox->show ();
+      return;
+    }
+
+  if ( filename.isEmpty ())
+    filename = QString::fromStdString (
+                           map.contents ("file").data ()[0].string_value ());
+
+  if (! filename.endsWith (".m"))
+    filename.append (".m");
+
+  request_open_file (filename, QString (), line);  // default encoding
+}
+
+void
 file_editor::handle_insert_debugger_pointer_request (const QString& file,
                                                      int line)
 {
   request_open_file (file, QString (), line, true); // default encoding
 }
 
 void
 file_editor::handle_delete_debugger_pointer_request (const QString& file,
@@ -1712,16 +1797,21 @@ file_editor::construct (void)
            SLOT (process_settings_dialog_request (const QString&)));
 
   connect (main_win (), SIGNAL (new_file_signal (const QString&)),
            this, SLOT (request_new_file (const QString&)));
 
   connect (main_win (), SIGNAL (open_file_signal (const QString&)),
            this, SLOT (request_open_file (const QString&)));
 
+  connect (main_win (), SIGNAL (edit_mfile_request (const QString&,
+                                       const QString&, const QString&, int)),
+           this, SLOT (handle_edit_mfile_request (const QString&,
+                                       const QString&, const QString&, int)));
+
   connect (_mru_file_menu, SIGNAL (triggered (QAction *)),
            this, SLOT (request_mru_open_file (QAction *)));
 
   mru_menu_update ();
 
   connect (_tab_widget, SIGNAL (tabCloseRequested (int)),
            this, SLOT (handle_tab_close_request (int)));
 
@@ -1824,16 +1914,21 @@ file_editor::add_file_editor_tab (file_e
            this, SLOT (handle_mru_add_file (const QString&, const QString&)));
 
   connect (f, SIGNAL (run_file_signal (const QFileInfo&)),
            main_win (), SLOT (run_file_in_terminal (const QFileInfo&)));
 
   connect (f, SIGNAL (request_open_file (const QString&)),
            this, SLOT (request_open_file (const QString&)));
 
+  connect (f, SIGNAL (edit_mfile_request (const QString&, const QString&,
+                                          const QString&, int)),
+           this, SLOT (edit_mfile_request (const QString&, const QString&,
+                                           const QString&, int)));
+
   // Signals from the file_editor non-trivial operations
   connect (this, SIGNAL (fetab_settings_changed (const QSettings *)),
            f, SLOT (notice_settings (const QSettings *)));
 
   connect (this, SIGNAL (fetab_change_request (const QWidget*)),
            f, SLOT (change_editor_state (const QWidget*)));
 
   connect (this, SIGNAL (fetab_file_name_query (const QWidget*)),
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -230,16 +230,18 @@ public slots:
   void handle_editor_state_changed (bool enableCopy, bool is_octave_file);
   void handle_mru_add_file (const QString& file_name, const QString& encoding);
   void check_conflict_save (const QString& fileName, bool remove_on_success);
 
   void handle_insert_debugger_pointer_request (const QString& file, int line);
   void handle_delete_debugger_pointer_request (const QString& file, int line);
   void handle_update_breakpoint_marker_request (bool insert,
                                                 const QString& file, int line);
+  void handle_edit_mfile_request (const QString& name, const QString& file,
+                                  const QString& curr_dir, int line);
 
   void handle_edit_file_request (const QString& file);
 
   // Tells the editor to react on changed settings.
   void notice_settings (const QSettings *settings);
 
   void set_shortcuts ();
 
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -235,16 +235,22 @@ main_window::new_file (const QString& co
   emit new_file_signal (commands);
 }
 
 void
 main_window::open_file (const QString& file_name)
 {
   emit open_file_signal (file_name);
 }
+void
+
+main_window::edit_mfile (const QString& name, int line)
+{
+  emit edit_mfile_request (name, QString (), QString (), line);
+}
 
 void
 main_window::report_status_message (const QString& statusMessage)
 {
   status_bar->showMessage (statusMessage, 1000);
 }
 
 void
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -87,16 +87,17 @@ signals:
 
   void active_dock_changed (octave_dock_widget *, octave_dock_widget *);
   void editor_focus_changed (bool);
 
   void settings_changed (const QSettings *);
   void init_terminal_size_signal (void);
   void new_file_signal (const QString&);
   void open_file_signal (const QString&);
+  void edit_mfile_request (const QString&, const QString&, const QString&, int);
 
   void show_doc_signal (const QString&);
 
   void insert_debugger_pointer_signal (const QString& file, int line);
   void delete_debugger_pointer_signal (const QString& file, int line);
   void update_breakpoint_marker_signal (bool insert, const QString& file,
                                         int line);
 
@@ -118,16 +119,17 @@ public slots:
   void handle_clear_command_window_request (void);
   void handle_clear_workspace_request (void);
   void handle_clear_history_request (void);
   void handle_rename_variable_request (const QString& old_name,
                                        const QString& new_name);
   void handle_undo_request (void);
   void new_file (const QString& commands = QString ());
   void open_file (const QString& file_name = QString ());
+  void edit_mfile (const QString&, int);
   void open_online_documentation_page (void);
   void display_release_notes (void);
   void load_and_display_community_news (int serial = -1);
   void display_community_news (const QString& news);
   void open_bug_tracker_page (void);
   void open_octave_packages_page (void);
   void open_agora_page (void);
   void open_contribute_page (void);
