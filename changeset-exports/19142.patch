# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1411330105 14400
#      Sun Sep 21 16:08:25 2014 -0400
# Node ID b8bd0b55af45883fa7e6df46ce5716afe943335a
# Parent  25ab600d16fd69ac0e8e86a47bcbd83262945c86
codesprint: Add tests to time handling functions

* time.cc: Add tests and input validation for time, mktime, strftime, and
strptime.

diff --git a/libinterp/corefcn/time.cc b/libinterp/corefcn/time.cc
--- a/libinterp/corefcn/time.cc
+++ b/libinterp/corefcn/time.cc
@@ -118,16 +118,18 @@ value returned by @code{time} was 856163
   else
     print_usage ();
 
   return retval;
 }
 
 /*
 %!assert (time () > 0)
+
+%!error time (1)
 */
 
 DEFUN (gmtime, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{tm_struct} =} gmtime (@var{t})\n\
 Given a value returned from @code{time}, or any non-negative integer,\n\
 return a time structure corresponding to CUT (Coordinated Universal Time).\n\
 For example:\n\
@@ -294,17 +296,19 @@ mktime (localtime (time ()))\n\
 
 ## These tests fail on systems with mktime functions of limited
 ## intelligence:
 %!assert (datestr (datenum (1969, 1, 1), 0), "01-Jan-1969 00:00:00")
 %!assert (datestr (datenum (1901, 1, 1), 0), "01-Jan-1901 00:00:00")
 %!assert (datestr (datenum (1795, 1, 1), 0), "01-Jan-1795 00:00:00")
 
 %!error mktime ()
+%!error mktime (1)
 %!error mktime (1, 2, 3)
+%!error mktime (struct ("year", "foo"))
 */
 
 DEFUN (strftime, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} strftime (@var{fmt}, @var{tm_struct})\n\
 Format the time structure @var{tm_struct} in a flexible way using the\n\
 format string @var{fmt} that contains @samp{%} substitutions\n\
 similar to those in @code{printf}.  Except where noted, substituted\n\
@@ -489,16 +493,18 @@ Year (1970-).\n\
 /*
 %!assert (ischar (strftime ("%%%n%t%H%I%k%l", localtime (time ()))));
 %!assert (ischar (strftime ("%M%p%r%R%s%S%T", localtime (time ()))));
 %!assert (ischar (strftime ("%X%Z%z%a%A%b%B", localtime (time ()))));
 %!assert (ischar (strftime ("%c%C%d%e%D%h%j", localtime (time ()))));
 %!assert (ischar (strftime ("%m%U%w%W%x%y%Y", localtime (time ()))));
 
 %!error strftime ()
+%!error strftime ("foo", 1)
+%!error strftime ("foo", struct ("year", "foo"))
 %!error strftime ("foo", localtime (time ()), 1)
 */
 
 DEFUN (strptime, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{tm_struct}, @var{nchars}] =} strptime (@var{str}, @var{fmt})\n\
 Convert the string @var{str} to the time structure @var{tm_struct} under\n\
 the control of the format string @var{fmt}.\n\
@@ -532,8 +538,28 @@ you're absolutely sure the date string w
       else
         error ("strptime: argument STR must be a string");
     }
   else
     print_usage ();
 
   return retval;
 }
+
+/*
+%!test
+%! fmt = "%Y-%m-%d %H:%M:%S";
+%! s = strftime (fmt, localtime (time ()));
+%! ts = strptime  (s, fmt);
+%! assert (isstruct (ts));
+%! assert (isfield (ts, "usec"));
+%! assert (isfield (ts, "year"));
+%! assert (isfield (ts, "mon"));
+%! assert (isfield (ts, "mday"));
+%! assert (isfield (ts, "sec"));
+%! assert (isfield (ts, "min"));
+%! assert (isfield (ts, "wday"));
+%! assert (isfield (ts, "hour"));
+%! assert (isfield (ts, "isdst"));
+%! assert (isfield (ts, "yday"));
+
+%!error strptime ()
+*/
