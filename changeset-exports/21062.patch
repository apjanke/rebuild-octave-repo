# HG changeset patch
# User Rik <rik@octave.org>
# Date 1452753010 28800
#      Wed Jan 13 22:30:10 2016 -0800
# Node ID d9c1884d1aaab0322570e7f19c75d4724b4af106
# Parent  220506787b9388de99bbb1c76bbec63aebfc41f3
maint: Eliminate space between variable and decrement '--' operator.

* data.cc, dlmread.cc, sparse.cc:
 Eliminate space between variable and decrement '--' operator.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -1233,17 +1233,17 @@ See @code{sum} for an explanation of the
 
       if (str == "native")
         isnative = true;
       else if (str == "double")
         isdouble = true;
       else
         error ("cumsum: unrecognized string argument");
 
-      nargin --;
+      nargin--;
     }
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   int dim = -1;
   if (nargin == 2)
     {
@@ -1519,17 +1519,17 @@ in double precision even for single prec
 
       if (str == "native")
         isnative = true;
       else if (str == "double")
         isdouble = true;
       else
         error ("prod: unrecognized type argument '%s'", str.c_str ());
 
-      nargin --;
+      nargin--;
     }
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   octave_value retval;
 
   octave_value arg = args(0);
@@ -2996,17 +2996,17 @@ inputs, @qcode{\"extra\"} is the same as
         isnative = true;
       else if (str == "double")
         isdouble = true;
       else if (str == "extra")
         isextra = true;
       else
         error ("sum: unrecognized type argument '%s'", str.c_str ());
 
-      nargin --;
+      nargin--;
     }
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   int dim = -1;
   if (nargin == 2)
     {
@@ -5619,17 +5619,17 @@ compute the norms of each column and ret
       else if (str == "fro")
         strflag = sffrob;
       else if (str == "inf")
         strflag = sfinf;
       else
         error ("norm: unrecognized option: %s", str.c_str ());
 
       // we've handled the last parameter, so act as if it was removed
-      nargin --;
+      nargin--;
     }
 
   octave_value p_arg = (nargin > 1) ? args(1) : octave_value (2);
 
   if (p_arg.is_empty ())
     p_arg = octave_value (2);
   else if (p_arg.is_string ())
     {
diff --git a/libinterp/corefcn/dlmread.cc b/libinterp/corefcn/dlmread.cc
--- a/libinterp/corefcn/dlmread.cc
+++ b/libinterp/corefcn/dlmread.cc
@@ -60,22 +60,22 @@ read_cell_spec (std::istream& is, octave
             {
               char ch = is.get ();
               col *= 26;
               if (ch >= 'a')
                 col += ch - 'a' + 1;
               else
                 col += ch - 'A' + 1;
             }
-          col --;
+          col--;
 
           if (is)
             {
               is >> row;
-              row --;
+              row--;
               if (is)
                 stat = true;
             }
         }
     }
 
   return stat;
 }
diff --git a/libinterp/corefcn/sparse.cc b/libinterp/corefcn/sparse.cc
--- a/libinterp/corefcn/sparse.cc
+++ b/libinterp/corefcn/sparse.cc
@@ -174,17 +174,17 @@ Compressed Column Sparse (rows = 3, cols
           nargin -= 1;
         }
 
       octave_idx_type m, n, nzmax;
       m = n = nzmax = -1;
       if (nargin == 6)
         {
           nzmax = args(5).idx_type_value ();
-          nargin --;
+          nargin--;
         }
 
       if (nargin == 5)
         {
           get_dimensions (args(3), args(4), "sparse", m, n);
 
           if (m < 0 || n < 0)
             error ("sparse: dimensions must be non-negative");
