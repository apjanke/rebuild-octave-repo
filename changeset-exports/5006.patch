# HG changeset patch
# User jwe
# Date 1095389993 0
#      Fri Sep 17 02:59:53 2004 +0000
# Node ID 2bcd013bc8673ce82c7142684ae53d78b9eefe37
# Parent  62da6b854fdb0c03837189e8dd4d71e2db909fb2
[project @ 2004-09-17 02:59:53 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2004-09-16  John W. Eaton  <jwe@octave.org>
 
+	* parse.y (frob_function): Clear id_name from curr_sym_tab, not
+	top_level_sym_tab.
+
 	* symtab.cc (maybe_list): Count sizes using size_t, not int.
 
 	* variables.cc (symbol_out_of_date): Always look in LOADPATH.
 
 2004-09-15  John W. Eaton  <jwe@octave.org>
 
 	* OPERATORS/op-int-conv.cc: Define and install bool to int
 	conversions.
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -2710,17 +2710,31 @@ frob_function (const std::string& fname,
 	   && curr_fcn_file_name == id_name)
     {
       warning ("function `%s' defined within script file `%s'",
 	       id_name.c_str (), curr_fcn_file_full_name.c_str ());
     }
 
   fcn->stash_function_name (id_name);
 
-  top_level_sym_tab->clear (id_name);
+  // Enter the new function in fbi_sym_tab.  If there is already a
+  // variable of the same name in the current symbol table, we won't
+  // find the new function when we try to call it, so we need to clear
+  // the old symbol from the current symbol table.  Note that this
+  // means that for things like
+  //
+  //   function f () eval ("function g () 1, end"); end
+  //   g = 13;
+  //   f ();
+  //   g
+  //
+  // G will still refer to the variable G (with value 13) rather
+  // than the function G, until the variable G is cleared.
+
+  curr_sym_tab->clear (id_name);
 
   symbol_record *sr = fbi_sym_tab->lookup (id_name, true);
 
   if (sr)
     {
       fcn->stash_symtab_ptr (sr);
 
       if (lexer_flags.parsing_nested_function)
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -1549,19 +1549,19 @@ symbol_table::maybe_list (const char *he
 	  for (int j = 0; j < len; j++)
 	    {
 	      symbols(j)->print_symbol_info_line (os, params);
 	      elements += symbols(j)->numel ();
 	      bytes += symbols(j)->byte_size ();
 	    }
 
 	  os << "\nTotal is "
-	     << elements << (elements > 1 ? " elements" : "element")
+	     << elements << (elements == 1 ? " element" : " elements")
 	     << " using "
-	     << bytes << (bytes > 1 ? " bytes" : "byte")
+	     << bytes << (bytes == 1 ? " byte" : " bytes")
 	     << "\n";
 
 	  status = 1;
 	}
     }
   else
     {
       string_vector symbols = name_list (argv, 1, type, scope);
