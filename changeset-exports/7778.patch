# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1211232939 14400
#      Mon May 19 17:35:39 2008 -0400
# Node ID 97b7ba81e1c301c1e43e7a98a00c40891220ddc1
# Parent  221fe75ac5c95c52d574e5166611d09aa30c0969
isa.m: fnumeric -> numeric

diff --git a/scripts/general/isa.m b/scripts/general/isa.m
--- a/scripts/general/isa.m
+++ b/scripts/general/isa.m
@@ -33,17 +33,17 @@ function retval = isa (x, cname)
   persistent float_classes = {"double", "single"};
 
   persistent fnum_classes = {"double", "single", ...
 			     "uint8", "uint16", "uint32", "uint64", ...
 			     "int8", "int16", "int32", "int64"};
 
   if (strcmp (cname, "float"))
     retval = any (strcmp (class (x), float_classes));
-  elseif (strcmp (cname, "fnumeric"))
+  elseif (strcmp (cname, "numeric"))
     retval = any (strcmp (class (x), fnum_classes));
   else
     retval = strcmp (class (x), cname);
   endif
 
 endfunction
 
 %!assert (isa ("char", "float"), false)
@@ -52,19 +52,19 @@ endfunction
 %!assert (isa (int8 (13), "float"), false)
 %!assert (isa (int16 (13), "float"), false)
 %!assert (isa (int32 (13), "float"), false)
 %!assert (isa (int64 (13), "float"), false)
 %!assert (isa (uint8 (13), "float"), false)
 %!assert (isa (uint16 (13), "float"), false)
 %!assert (isa (uint32 (13), "float"), false)
 %!assert (isa (uint64 (13), "float"), false)
-%!assert (isa ("char", "fnumeric"), false)
-%!assert (isa (double (13), "fnumeric"), true)
-%!assert (isa (single (13), "fnumeric"), true)
-%!assert (isa (int8 (13), "fnumeric"), true)
-%!assert (isa (int16 (13), "fnumeric"), true)
-%!assert (isa (int32 (13), "fnumeric"), true)
-%!assert (isa (int64 (13), "fnumeric"), true)
-%!assert (isa (uint8 (13), "fnumeric"), true)
-%!assert (isa (uint16 (13), "fnumeric"), true)
-%!assert (isa (uint32 (13), "fnumeric"), true)
-%!assert (isa (uint64 (13), "fnumeric"), true)
+%!assert (isa ("char", "numeric"), false)
+%!assert (isa (double (13), "numeric"), true)
+%!assert (isa (single (13), "numeric"), true)
+%!assert (isa (int8 (13), "numeric"), true)
+%!assert (isa (int16 (13), "numeric"), true)
+%!assert (isa (int32 (13), "numeric"), true)
+%!assert (isa (int64 (13), "numeric"), true)
+%!assert (isa (uint8 (13), "numeric"), true)
+%!assert (isa (uint16 (13), "numeric"), true)
+%!assert (isa (uint32 (13), "numeric"), true)
+%!assert (isa (uint64 (13), "numeric"), true)
