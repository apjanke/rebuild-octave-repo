# HG changeset patch
# User Dildar Sk <dildarsk101010@gmail.com>
# Date 1521846225 14400
#      Fri Mar 23 19:03:45 2018 -0400
# Node ID 27e6b38571d3ff66da5452a64be711dc58e0a1a6
# Parent  b02d5a4c7452aa1d44ea09d09ffc661af0fbc572
magic.m: Issue an error if input N is negative (bug #53441).

* magic.m: Check for negative N and call error() if found.
Add BIST test to check new code.

diff --git a/scripts/special-matrix/magic.m b/scripts/special-matrix/magic.m
--- a/scripts/special-matrix/magic.m
+++ b/scripts/special-matrix/magic.m
@@ -31,20 +31,20 @@
 
 function A = magic (n)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   n = fix (n);
-  if (n < 1)
-
+  if (n < 0)
+    error ("magic: N must be non-negative");
+  elseif (n < 1)
     A = [];
-
   elseif (mod (n, 2) == 1)
 
     shift = floor ((0:n*n-1)/n);
     c = mod ([1:n*n] - shift + (n-3)/2, n);
     r = mod ([n*n:-1:1] + 2*shift, n);
     A(c*n+r+1) = 1:n*n;
     A = reshape (A, n, n);
 
@@ -86,19 +86,18 @@ endfunction
 %! endfor
 
 ## Not a magic square but we must return something (bug #46672).
 ## While one day we may change the actual return of magic (2),
 ## this properties still must be true.
 %!test <*46672>
 %! m = magic (2);
 %! assert (size (m), [2 2]);
-%! assert (unique (m), [1; 2; 3; 4]);
+%! assert (m, [4 3; 1 2]);
 
-%!assert (magic (2), [4 3; 1 2])
-%!assert (isempty (magic (-1)))
 %!assert (isempty (magic (0)))
 %!assert (magic (1), 1)
 %!assert (magic (1.5), 1)
 
 ## Test input validation
 %!error magic ()
 %!error magic (1, 2)
+%!error <N must be non-negative> magic (-5)
