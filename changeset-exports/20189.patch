# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1431615653 25200
#      Thu May 14 08:00:53 2015 -0700
# Node ID b2532deba721b1138b73e2d0b340e1a29d84c6c7
# Parent  89616a98b02e0f9cff77601f4ed9b5c58b755a3c
Return copy of class object when using null indexing (bug #44940).

* ov-classdef.cc (cdef_object_scalar::subsref): Check index expression and
return octave_value of this_obj if empty.

* ov-classdef.cc (cdef_object_array::subsref): Remove error when index
expression is empty.  If expression is empty then return cdef_object of this.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1471,27 +1471,36 @@ cdef_object_scalar::subsref (const std::
             else
               error ("subsref: unknown method or property: %s", name.c_str ());
           }
         break;
       }
 
     case '(':
       {
+        const octave_value_list& ival = idx.front ();
+
         refcount++;
-
         cdef_object this_obj (this);
 
-        Array<cdef_object> arr (dim_vector (1, 1), this_obj);
-
-        cdef_object new_obj = cdef_object (new cdef_object_array (arr));
-
-        new_obj.set_class (get_class ());
-
-        retval = new_obj.subsref (type, idx, nargout, skip, cls, auto_add);
+        if (ival.empty ())
+          {
+            skip++;
+            retval(0) = to_ov (this_obj);
+          }
+        else
+          {
+            Array<cdef_object> arr (dim_vector (1, 1), this_obj);
+
+            cdef_object new_obj = cdef_object (new cdef_object_array (arr));
+
+            new_obj.set_class (get_class ());
+
+            retval = new_obj.subsref (type, idx, nargout, skip, cls, auto_add);
+          }
       }
       break;
 
     default:
       error ("object cannot be indexed with `%c'", type[0]);
       break;
     }
 
@@ -1621,26 +1630,27 @@ cdef_object_array::subsref (const std::s
 
   skip = 1;
 
   switch (type[0])
     {
     case '(':
       {
         const octave_value_list& ival = idx.front ();
-        bool is_scalar = true;
-        Array<idx_vector> iv (dim_vector (1, ival.length ()));
 
         if (ival.empty ())
           {
-            ::error ("can't index %s object(s) with empty parentheses",
-                     class_name ().c_str ());
+            refcount++;
+            retval(0) = to_ov (cdef_object (this));
             break;
           }
 
+        bool is_scalar = true;
+        Array<idx_vector> iv (dim_vector (1, ival.length ()));
+
         for (int i = 0; ! error_state && i < ival.length (); i++)
           {
             iv(i) = ival(i).index_vector ();
             if (! error_state)
               is_scalar = is_scalar && iv(i).is_scalar ();
           }
 
         if (! error_state)
