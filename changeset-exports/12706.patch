# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@gmail.com>
# Date 1307381895 18000
#      Mon Jun 06 12:38:15 2011 -0500
# Branch stable
# Node ID 7c8b50cd4fb40e26bc7e741cb3998361b035cf7b
# Parent  d326be468b13878b8c17f11365538d8a80e9abc8
Backout 12700:9843b3b055e0 from stable branch

diff --git a/src/DLD-FUNCTIONS/filter.cc b/src/DLD-FUNCTIONS/filter.cc
--- a/src/DLD-FUNCTIONS/filter.cc
+++ b/src/DLD-FUNCTIONS/filter.cc
@@ -451,20 +451,29 @@ H(z) = {\\displaystyle\\sum_{k=0}^M d_{k
                   for (int i = dim; i > 0; i--)
                     si_dims(i) = si_dims(i-1);
                   si_dims(0) = si_len;
 
                   si.resize (si_dims, 0.0);
                 }
               else
                 {
+                  dim_vector si_dims = args (3).dims ();
+                  bool si_is_vector = true;
+                  for (int i = 0; i < si_dims.length (); i++)
+                    if (si_dims(i) != 1 && si_dims(i) < si_dims.numel ())
+                      {
+                        si_is_vector = false;
+                        break;
+                      }
+
                   si = args(3).float_complex_array_value ();
 
-                  if (si.is_vector () && x.is_vector ())
-                    si = si.reshape (dim_vector (si.numel (), 1));
+                  if (si_is_vector)
+                    si = si.reshape (dim_vector (1, si.numel ()));
                 }
 
               if (! error_state)
                 {
                   FloatComplexNDArray y (filter (b, a, x, si, dim));
 
                   if (nargout == 2)
                     retval(1) = si;
@@ -499,20 +508,29 @@ H(z) = {\\displaystyle\\sum_{k=0}^M d_{k
                   for (int i = dim; i > 0; i--)
                     si_dims(i) = si_dims(i-1);
                   si_dims(0) = si_len;
 
                   si.resize (si_dims, 0.0);
                 }
               else
                 {
+                  dim_vector si_dims = args (3).dims ();
+                  bool si_is_vector = true;
+                  for (int i = 0; i < si_dims.length (); i++)
+                    if (si_dims(i) != 1 && si_dims(i) < si_dims.numel ())
+                      {
+                        si_is_vector = false;
+                        break;
+                      }
+
                   si = args(3).complex_array_value ();
 
-                  if (si.is_vector () && x.is_vector ())
-                    si = si.reshape (dim_vector (si.numel (), 1));
+                  if (si_is_vector)
+                    si = si.reshape (dim_vector (1, si.numel ()));
                 }
 
               if (! error_state)
                 {
                   ComplexNDArray y (filter (b, a, x, si, dim));
 
                   if (nargout == 2)
                     retval(1) = si;
@@ -550,20 +568,29 @@ H(z) = {\\displaystyle\\sum_{k=0}^M d_{k
                   for (int i = dim; i > 0; i--)
                     si_dims(i) = si_dims(i-1);
                   si_dims(0) = si_len;
 
                   si.resize (si_dims, 0.0);
                 }
               else
                 {
+                  dim_vector si_dims = args (3).dims ();
+                  bool si_is_vector = true;
+                  for (int i = 0; i < si_dims.length (); i++)
+                    if (si_dims(i) != 1 && si_dims(i) < si_dims.numel ())
+                      {
+                        si_is_vector = false;
+                        break;
+                      }
+
                   si = args(3).float_array_value ();
 
-                  if (si.is_vector () && x.is_vector ())
-                    si = si.reshape (dim_vector (si.numel (), 1));
+                  if (si_is_vector)
+                    si = si.reshape (dim_vector (1, si.numel ()));
                 }
 
               if (! error_state)
                 {
                   FloatNDArray y (filter (b, a, x, si, dim));
 
                   if (nargout == 2)
                     retval(1) = si;
@@ -598,20 +625,29 @@ H(z) = {\\displaystyle\\sum_{k=0}^M d_{k
                   for (int i = dim; i > 0; i--)
                     si_dims(i) = si_dims(i-1);
                   si_dims(0) = si_len;
 
                   si.resize (si_dims, 0.0);
                 }
               else
                 {
+                  dim_vector si_dims = args (3).dims ();
+                  bool si_is_vector = true;
+                  for (int i = 0; i < si_dims.length (); i++)
+                    if (si_dims(i) != 1 && si_dims(i) < si_dims.numel ())
+                      {
+                        si_is_vector = false;
+                        break;
+                      }
+
                   si = args(3).array_value ();
 
-                  if (si.is_vector () && x.is_vector ())
-                    si = si.reshape (dim_vector (si.numel (), 1));
+                  if (si_is_vector)
+                    si = si.reshape (dim_vector (1, si.numel ()));
                 }
 
               if (! error_state)
                 {
                   NDArray y (filter (b, a, x, si, dim));
 
                   if (nargout == 2)
                     retval(1) = si;
@@ -708,18 +744,13 @@ filter (MArray<FloatComplex>&, MArray<Fl
 %!  a = [1,1]; b=[1,1];
 %!  x = zeros (4,4,2); x(1,1:4,1) = +1; x(1,1:4,2) = -1;
 %!  y0 = zeros (4,4,2); y0(1:2,1:4,1) = +1; y0(1:2,1:4,2) = -1;
 %!  y = filter (b, [1], x);
 %!  assert(y, y0);
 %!
 %!assert(filter (1, ones(10,1)/10, []), []);
 %!assert(filter (1, ones(10,1)/10, zeros(0,10)), zeros(0,10));
+%!assert(filter([1, 3], [1], [1 2; 3 4; 5 6], [4, 5]), [5 7; 6 10; 14 18]);
 %!assert(filter (1, ones(10,1)/10, single (1:5)), repmat (single (10), 1, 5));
-%% Test using initial conditions
-%!assert(filter([1, 1, 1], [1, 1], [1 2], [1, 1]), [2 2]);
-%!assert(filter([1, 1, 1], [1, 1], [1 2], [1, 1]'), [2 2]);
-%!assert(filter([1, 3], [1], [1 2; 3 4; 5 6], [4, 5]), [5 7; 6 10; 14 18]);
-%!error (filter([1, 3], [1], [1 2; 3 4; 5 6], [4, 5]'));
-%!assert(filter([1, 3, 2], [1], [1 2; 3 4; 5 6], [1 0 0; 1 0 0], 2), [2 6; 3 13; 5 21]);
 %%  Should put some tests of the "DIM" parameter in here.
 
 */
