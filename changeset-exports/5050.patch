# HG changeset patch
# User jwe
# Date 1098172714 0
#      Tue Oct 19 07:58:34 2004 +0000
# Node ID d54d44f2f29ad13a8fea6734e6dd54d20cff00ef
# Parent  b65ec179786f90dfe74cecbbe0275004776ec11c
[project @ 2004-10-19 07:58:34 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2004-10-18  John W. Eaton  <jwe@octave.org>
+
+	* symtab.cc (symbol_record::dimensions_string_req_first_space,
+	symbol_record::make_dimensions_string): Use dims() for all objects.
+
 2004-10-18  Oyvind Kristiansen  <oyvinkri@stud.ntnu.no>
 
 	* symtab.cc (symbol_table::parse_whos_line_format): Handle
 	size-of-parameter and center-specific format specifiers.
 
 2004-10-18  John W. Eaton  <jwe@octave.org>
 
 	* pt-plot.cc (handle_plot_data): If plotting data from file,
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -420,33 +420,24 @@ symbol_record::pop_context (void)
 // the dimensions string.  For example,
 //
 //   mat is a 12x3 matrix
 //            ^^  => 2 columns
 
 int
 symbol_record::dimensions_string_req_first_space (int print_dims) const
 {
-  long dim = 0;
   int first_param_space = 0;
 
   // Calculating dimensions.
 
   std::string dim_str = "";
   std::stringstream ss;
-  dim_vector dimensions;
-
-  if (is_variable ())
-    {
-      if (is_matrix_type ())
-        {
-	  dimensions = dims ();
-	  dim = dimensions.length ();
-	}
-    }
+  dim_vector dimensions = dims ();
+  long dim = dimensions.length ();
 
   first_param_space = (first_param_space >= 1 ? first_param_space : 1);
 
   // Preparing dimension string.
 
   if ((dim <= print_dims || print_dims < 0) && print_dims != 0)
     {
       // Dimensions string must be printed like this: 2x3x4x2.
@@ -474,51 +465,45 @@ symbol_record::dimensions_string_req_fir
   return first_param_space;
 }
 
 // Calculate how much space needs to be reserved for the the
 // dimensions string.  For example,
 //
 //   mat is a 12x3 matrix
 //            ^^^^ => 4 columns
+//
+// XXX FIXME XXX -- why not just use the dim_vector::str () method?
 
 int
 symbol_record::dimensions_string_req_total_space (int print_dims) const
 {
   std::string dim_str = "";
   std::stringstream ss;
 
   ss << make_dimensions_string (print_dims);
   dim_str = ss.str ();
 
   return dim_str.length ();
 }
 
 // Make the dimensions-string.  For example: mat is a 2x3 matrix.
 //                                                    ^^^
+//
+// XXX FIXME XXX -- why not just use the dim_vector::str () method?
 
 std::string
 symbol_record::make_dimensions_string (int print_dims) const
 {
-  long dim = 0;
-
   // Calculating dimensions.
 
   std::string dim_str = "";
   std::stringstream ss;
-  dim_vector dimensions;
-
-  if (is_variable ())
-    {
-      if (is_matrix_type ())
-        {
-	  dimensions = dims ();
-	  dim = dimensions.length ();
-	}
-    }
+  dim_vector dimensions = dims ();
+  long dim = dimensions.length ();
 
   // Preparing dimension string.
 
   if ((dim <= print_dims || print_dims < 0) && print_dims != 0)
     {
       // Only printing the dimension string as: axbxc...
 
       if (dim == 0)
@@ -1451,24 +1436,24 @@ symbol_table::parse_whos_line_format (Ar
 	      // because it depends on dimensions to be shown. That is why it is
 	      // recalculated for each Size-command
 	      int j, first, rest = 0, total;
 	      param.dimensions = c;
 	      first = param.first_parameter_length;
 	      total = param.parameter_length;
 	     
 	      for (j = 0; j < len; j++)
-	      {
-		int first1 = symbols(j)->dimensions_string_req_first_space (param.dimensions);
-		int total1 = symbols(j)->dimensions_string_req_total_space (param.dimensions);
-		int rest1 = total1 - first1;
-		rest = (rest1 > rest ? rest1 : rest);
-		first = (first1 > first ? first1 : first);
-		total = (total1 > total ? total1 : total);
-	      }
+		{
+		  int first1 = symbols(j)->dimensions_string_req_first_space (param.dimensions);
+		  int total1 = symbols(j)->dimensions_string_req_total_space (param.dimensions);
+		  int rest1 = total1 - first1;
+		  rest = (rest1 > rest ? rest1 : rest);
+		  first = (first1 > first ? first1 : first);
+		  total = (total1 > total ? total1 : total);
+		}
 
 	      if (param.modifier == 'c')
 	        {
 		  if (first < balance)
 		    first += balance - first;
 		  if (rest + balance < param.parameter_length)
 		    rest += param.parameter_length - rest - balance;
 
