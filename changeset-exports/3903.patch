# HG changeset patch
# User jwe
# Date 1019533225 0
#      Tue Apr 23 03:40:25 2002 +0000
# Node ID 1dbe160ea0d187904ffceaad9e7fb5bc254c95c8
# Parent  3aa0e187901c8ef0a0908c7a2e463d54c354f81f
[project @ 2002-04-23 03:40:25 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2002-04-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* parse.y (save_symtab): New non-terminal.  Save current symbol
+	table context here.
+	(function_beg): Use it.
+	(symtab_context): New file-scope variable.
+	(recover_from_parsing_function): Restore symbol table context here.
+
 2002-04-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* load-save.cc (get_lines_and_columns): Handle CRLF as line
 	separator in addition to LF.
 
 2002-04-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* load-save.cc (hdf5_ofstream::hdf5_ofstream):
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -122,16 +122,19 @@ bool input_from_startup_file = false;
 // the command line.
 bool input_from_command_line_file = true;
 
 // TRUE means that we are in the process of evaluating a function
 // body.  The parser might be called in that case if we are looking at
 // an eval() statement.
 bool evaluating_function_body = false;
 
+// Keep track of symbol table information when parsing functions.
+static symbol_table *symtab_context = 0;
+
 // Forward declarations for some functions defined at the bottom of
 // the file.
 
 // Generic error messages.
 static void
 yyerror (const char *s);
 
 // Error mesages for mismatched end tokens.
@@ -1044,16 +1047,25 @@ except_command	: UNWIND stash_comment op
 		      ABORT_PARSE;
 		  }
 		;
 
 // ===========================================
 // Some `subroutines' for function definitions
 // ===========================================
 
+save_symtab	: // empty
+		  {
+		    if (symtab_context)
+		      panic_impossible ();
+
+		    symtab_context = curr_sym_tab;
+		  }
+		;
+		   
 global_symtab	: // empty
 		  { curr_sym_tab = global_sym_tab; }
 		;
 
 local_symtab	: // empty
 		  { curr_sym_tab = tmp_local_sym_tab; }
 		;
 
@@ -1168,18 +1180,18 @@ return_list1	: identifier
 
 return_list_end	: global_symtab ']'
 		;
 
 // ===================
 // Function definition
 // ===================
 
-function_beg	: FCN stash_comment global_symtab
-		  { $$ = $2; }
+function_beg	: save_symtab FCN stash_comment global_symtab
+		  { $$ = $3; }
 		;
 
 function	: function_beg function2
 		  {
 		    $2->stash_leading_comment ($1);
 		    recover_from_parsing_function ();
 		    $$ = 0;
 		  }
@@ -2533,17 +2545,21 @@ finish_function (tree_parameter_list *re
   fcn->stash_leading_comment (lc);
 
   return fcn->define_ret_list (ret_list);
 }
 
 static void
 recover_from_parsing_function (void)
 {
-  curr_sym_tab = top_level_sym_tab;
+  if (! symtab_context)
+    panic_impossible ();
+
+  curr_sym_tab = symtab_context;
+  symtab_context = 0;
 
   lexer_flags.defining_func = false;
   lexer_flags.beginning_of_function = false;
   lexer_flags.parsed_function_name = false;
   lexer_flags.looking_at_return_list = false;
   lexer_flags.looking_at_parameter_list = false;
 }
 
