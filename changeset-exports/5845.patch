# HG changeset patch
# User jwe
# Date 1149703884 0
#      Wed Jun 07 18:11:24 2006 +0000
# Node ID 8b4a99ae3b5e7a0f0f279f20f2ff2fc8f8dad58d
# Parent  034cdbd34c0aca2a17b3880fe32882d23bc447ea
[project @ 2006-06-07 18:11:24 by jwe]

diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,12 @@
+2006-06-07  John W. Eaton  <jwe@octave.org>
+
+	* fntests.m: Keep track of files with tests and report total.
+
 2006-06-01  John W. Eaton  <jwe@octave.org>
 
 	* fntests.m (print_test_file_name, print_pass_fail): New functions.
 	(runtestdir, runtestscript): Use them.  Print info for each file
 	with tests.  Print info about files without tests to log file.
 	(run_test_dir): Rename from runtestdir.  Change all uses.
 	(run_test_script): Rename from runtestscript.  Change all uses.
 	Handle page_screen_output as a function instead of a built-in
diff --git a/test/fntests.m b/test/fntests.m
--- a/test/fntests.m
+++ b/test/fntests.m
@@ -1,11 +1,12 @@
 clear all;
 
 global files_with_no_tests = {};
+global files_with_tests = {};
 global topsrcdir;
 
 currdir = canonicalize_file_name (".");
 
 if (nargin == 1)
   xdir = argv(){1};
 else
   xdir = ".";
@@ -44,38 +45,42 @@ function y = hastests (f)
   fid = fopen (f);
   str = fscanf (fid, "%s");
   fclose (fid);
   y = (findstr (str, "%!test") || findstr (str, "%!assert")
        || findstr (str, "%!error") || findstr (str, "%!warning"));
 endfunction
 
 function [dp, dn] = run_test_dir (fid, d);
+  global files_with_tests;
   global files_with_no_tests;
   lst = dir (d);
   dp = dn = 0;
   for i = 1:length (lst)
     nm = lst(i).name;
     if (length (nm) > 5 && strcmp (nm(1:5), "test_")
 	&& strcmp (nm((end-1):end), ".m"))
       p = n = 0;
-      if (hastests (fullfile (d, nm)))
+      ffnm = fullfile (d, nm);
+      if (hastests (ffnm))
 	print_test_file_name (nm);
 	[p, n] = test (nm(1:(end-2)), "quiet", fid);
 	print_pass_fail (n, p);
+	files_with_tests(end+1) = ffnm;
       else
-	files_with_no_tests(end+1) = fullfile (d, nm);
+	files_with_no_tests(end+1) = ffnm;
       endif
       dp += p;
       dn += n;
     endif
   endfor
 endfunction
 
 function [dp, dn] = run_test_script (fid, d);
+  global files_with_tests;
   global files_with_no_tests;
   global topsrcdir;
   lst = dir (d);
   dp = dn = 0;
   for i = 1:length (lst)
     nm = lst(i).name;
     if (lst(i).isdir && ! strcmp (nm, ".") && ! strcmp (nm, "..")
 	&& ! strcmp (nm, "CVS"))
@@ -92,16 +97,17 @@ function [dp, dn] = run_test_script (fid
       p = n = 0;
       ## Only run if it contains %!test, %!assert %!error or %!warning
       if (hastests (f))
 	print_test_file_name (strrep (f, [topsrcdir, "/"], ""));
 	[p, n] = test (f, "quiet", fid);
 	print_pass_fail (n, p);
 	dp += p;
 	dn += n;
+	files_with_tests(end+1) = f;
       else
 	files_with_no_tests(end+1) = f;
       endif
     endif
   endfor 
   ##  printf("%s%s -> passes %d of %d tests\n", ident, d, dp, dn);
 endfunction
 
@@ -143,17 +149,19 @@ try
   for i = 1:length (testdirs)
     [p, n] = run_test_dir (fid, testdirs{i});
     dp += p;
     dn += n;
   endfor
   printf ("\nSummary:\n\n  PASS %6d\n", dp);
   nfail = dn - dp;
   printf ("  FAIL %6d\n", nfail);
-  printf ("\n%d files have no tests\n", length (files_with_no_tests));
+  n_files_with_no_tests = length (files_with_no_tests);
+  n_files = n_files_with_no_tests + length (files_with_tests);
+  printf ("\n%d (of %d) files have no tests\n", n_files_with_no_tests, n_files);
   fprintf (fid, "\nFiles with no tests:\n\n%s",
 	  list_in_columns (files_with_no_tests, 80));
   fclose (fid);
   page_screen_output (pso);
   warning (warn_state.state, "quiet");
 catch
   page_screen_output (pso);
   warning (warn_state.state, "quiet");
