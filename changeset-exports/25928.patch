# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1539331884 -7200
#      Fri Oct 12 10:11:24 2018 +0200
# Node ID a533a7c4d2ccd5ef58a271e11e422afc09bc3d48
# Parent  d6581134daaa1a3cd3e633e93b9a5393aff70a11
Emit an error when utility matrices (zeros, ones, rand, etc.) are given a fractional dimension in a dimension vector (bug #54781).

* data.cc (Fones, Fzeros, Feye): Add BIST tests with a fractional dimensions.

* utils.cc (get_dimensions): Call "octave_idx_type_vector_value (true)" and
"idx_type_value (true)" to enable input validation.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -4283,16 +4283,21 @@ val = ones (m,n, "uint8")
 %!assert (size (ones (3, 4, 5, "single")), [3, 4, 5])
 
 %!assert (ones (3, "int8"), int8 ([1, 1, 1; 1, 1, 1; 1, 1, 1]))
 %!assert (ones (2, 3, "int8"), int8 ([1, 1, 1; 1, 1, 1]))
 %!assert (ones (3, 2, "int8"), int8 ([1, 1; 1, 1; 1, 1]))
 %!assert (size (ones (3, 4, 5, "int8")), [3, 4, 5])
 
 %!assert (size (ones (1, -2, 2)), [1, 0, 2])
+
+## Test input validation
+%!error <conversion of 1.1 .*failed> ones (1.1)
+%!error <conversion of 1.1 .*failed> ones (1, 1.1)
+%!error <conversion of 1.1 .*failed> ones ([1, 1.1])
 */
 
 /*
 ## Tests for bug #47298
 ## Matlab requires the size to be a row vector.  In that logic, it supports
 ## n to be a 1x0 vector (returns 0x0) but not a 0x1 vector.  Octave supports
 ## any vector and therefore must support 0x1, 1x0, and 0x0x1 (but not 0x1x1).
 %!test <*47298>
@@ -4300,22 +4305,16 @@ val = ones (m,n, "uint8")
 %! for idx = 1:numel (funcs)
 %!   func = funcs{idx};
 %!   assert (func (zeros (1, 0)), zeros (0, 0));
 %!   assert (func (zeros (0, 1)), zeros (0, 0));
 %!   assert (func (zeros (0, 1, 1)), zeros (0, 0));
 %!   fail ([func2str(func) " ([])"]);
 %!   fail ([func2str(func) " (zeros (0, 0, 1))"]);
 %! endfor
-
-## Test input validation
-%!error <invalid data type specified> zeros (1, 1, "foobar")
-%!error <conversion of 1.1 .*failed> zeros (1, 1.1, 2)
-%!error <conversion of 1.1 .*failed> zeros ([1, 1.1, 2])
-
 */
 
 DEFUN (zeros, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} zeros (@var{n})
 @deftypefnx {} {} zeros (@var{m}, @var{n})
 @deftypefnx {} {} zeros (@var{m}, @var{n}, @var{k}, @dots{})
 @deftypefnx {} {} zeros ([@var{m} @var{n} @dots{}])
@@ -4350,16 +4349,24 @@ val = zeros (m,n, "uint8")
 %!assert (zeros (2, 3, "single"), single ([0, 0, 0; 0, 0, 0]))
 %!assert (zeros (3, 2, "single"), single ([0, 0; 0, 0; 0, 0]))
 %!assert (size (zeros (3, 4, 5, "single")), [3, 4, 5])
 
 %!assert (zeros (3, "int8"), int8 ([0, 0, 0; 0, 0, 0; 0, 0, 0]))
 %!assert (zeros (2, 3, "int8"), int8 ([0, 0, 0; 0, 0, 0]))
 %!assert (zeros (3, 2, "int8"), int8 ([0, 0; 0, 0; 0, 0]))
 %!assert (size (zeros (3, 4, 5, "int8")), [3, 4, 5])
+
+## Test input validation
+%!error <invalid data type specified> zeros (1, 1, "foobar")
+%!error <conversion of 1.1 .*failed> zeros (1.1)
+%!error <conversion of 1.1 .*failed> zeros (1, 1.1)
+%!error <conversion of 1.1 .*failed> zeros ([1, 1.1])
+%!error <conversion of 1.1 .*failed> zeros (1, 1.1, 2)
+%!error <conversion of 1.1 .*failed> zeros ([1, 1.1, 2])
 */
 
 DEFUN (Inf, args, ,
        doc: /* -*- texinfo -*-
 @c List other form of function in documentation index
 @findex inf
 
 @deftypefn  {} {} Inf
@@ -5082,17 +5089,21 @@ definitions are for compatibility with @
 %!assert (full (eye (2, 3)), [1, 0, 0; 0, 1, 0])
 
 %!assert (full (eye (3,"single")), single ([1, 0, 0; 0, 1, 0; 0, 0, 1]))
 %!assert (full (eye (2, 3,"single")), single ([1, 0, 0; 0, 1, 0]))
 
 %!assert (eye (3, "int8"), int8 ([1, 0, 0; 0, 1, 0; 0, 0, 1]))
 %!assert (eye (2, 3, "int8"), int8 ([1, 0, 0; 0, 1, 0]))
 
+## Test input validation
 %!error eye (1, 2, 3)
+%!error <conversion of 1.1 .*failed> eye (1.1)
+%!error <conversion of 1.1 .*failed> eye (1, 1.1)
+%!error <conversion of 1.1 .*failed> eye ([1, 1.1])
 */
 
 template <typename MT>
 static octave_value
 do_linspace (const octave_value& base, const octave_value& limit,
              octave_idx_type n)
 {
   typedef typename MT::column_vector_type CVT;
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -1105,42 +1105,40 @@ namespace octave
     octave::check_dimensions (dim, warn_for);
   }
 
   void get_dimensions (const octave_value& a, const char *warn_for,
                        octave_idx_type& nr, octave_idx_type& nc)
   {
     if (a.is_scalar_type ())
       {
-        nr = nc = a.idx_type_value ();
+        nr = nc = a.idx_type_value (true);
       }
     else
       {
         nr = a.rows ();
         nc = a.columns ();
 
         if ((nr != 1 || nc != 2) && (nr != 2 || nc != 1))
           error ("%s (A): use %s (size (A)) instead", warn_for, warn_for);
 
-        Array<double> v = a.vector_value ();
-        nr = static_cast<octave_idx_type> (math::fix (v(0)));
-        nc = static_cast<octave_idx_type> (math::fix (v(1)));
+        Array<octave_idx_type> v = a.octave_idx_type_vector_value (true);
+        nr = v(0);
+        nc = v(1);
       }
 
     octave::check_dimensions (nr, nc, warn_for);
   }
 
   void get_dimensions (const octave_value& a, const octave_value& b,
                        const char *warn_for, octave_idx_type& nr,
                        octave_idx_type& nc)
   {
-    nr = a.isempty ()
-      ? 0 : a.idx_type_value ("%s: row dimension must be a scalar", warn_for);
-    nc = b.isempty ()
-      ? 0 : b.idx_type_value ("%s: column dimension must be a scalar", warn_for);
+    nr = (a.isempty () ? 0 : a.idx_type_value (true));
+    nc = (b.isempty () ? 0 : b.idx_type_value (true));
 
     octave::check_dimensions (nr, nc, warn_for);
   }
 
   octave_idx_type dims_to_numel (const dim_vector& dims,
                                  const octave_value_list& idx_arg)
   {
     octave_idx_type retval;
