# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1528497266 14400
#      Fri Jun 08 18:34:26 2018 -0400
# Node ID 47a3e4b9b6fef6721880e659b0447bdec903cfa6
# Parent  143007dad8648fe2510f85db3daabab6d47f6f22
tmp-parser-namespace-fixes

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -2221,93 +2221,90 @@ namespace octave
     delete m_stmt_list;
     m_stmt_list = nullptr;
 
     m_lexer.reset ();
 
     yypstate_delete (static_cast<yypstate *> (m_parser_state));
     m_parser_state = yypstate_new ();
   }
-}
-
-// Error mesages for mismatched end tokens.
-
-static std::string
-end_token_as_string (octave::token::end_tok_type ettype)
-{
-  std::string retval = "<unknown>";
-
-  switch (ettype)
-    {
-    case octave::token::simple_end:
-      retval = "end";
-      break;
-
-    case octave::token::classdef_end:
-      retval = "endclassdef";
-      break;
-
-    case octave::token::enumeration_end:
-      retval = "endenumeration";
-      break;
-
-    case octave::token::events_end:
-      retval = "endevents";
-      break;
-
-    case octave::token::for_end:
-      retval = "endfor";
-      break;
-
-    case octave::token::function_end:
-      retval = "endfunction";
-      break;
-
-    case octave::token::if_end:
-      retval = "endif";
-      break;
-
-    case octave::token::methods_end:
-      retval = "endmethods";
-      break;
-
-    case octave::token::parfor_end:
-      retval = "endparfor";
-      break;
-
-    case octave::token::properties_end:
-      retval = "endproperties";
-      break;
-
-    case octave::token::switch_end:
-      retval = "endswitch";
-      break;
-
-    case octave::token::try_catch_end:
-      retval = "end_try_catch";
-      break;
-
-    case octave::token::unwind_protect_end:
-      retval = "end_unwind_protect";
-      break;
-
-    case octave::token::while_end:
-      retval = "endwhile";
-      break;
-
-    default:
-      panic_impossible ();
-      break;
-    }
-
-  return retval;
-}
-
-namespace octave
-{
+
+  // Error mesages for mismatched end tokens.
+
+  static std::string
+  end_token_as_string (token::end_tok_type ettype)
+  {
+    std::string retval = "<unknown>";
+
+    switch (ettype)
+      {
+      case token::simple_end:
+        retval = "end";
+        break;
+
+      case token::classdef_end:
+        retval = "endclassdef";
+        break;
+
+      case token::enumeration_end:
+        retval = "endenumeration";
+        break;
+
+      case token::events_end:
+        retval = "endevents";
+        break;
+
+      case token::for_end:
+        retval = "endfor";
+        break;
+
+      case token::function_end:
+        retval = "endfunction";
+        break;
+
+      case token::if_end:
+        retval = "endif";
+        break;
+
+      case token::methods_end:
+        retval = "endmethods";
+        break;
+
+      case token::parfor_end:
+        retval = "endparfor";
+        break;
+
+      case token::properties_end:
+        retval = "endproperties";
+        break;
+
+      case token::switch_end:
+        retval = "endswitch";
+        break;
+
+      case token::try_catch_end:
+        retval = "end_try_catch";
+        break;
+
+      case token::unwind_protect_end:
+        retval = "end_unwind_protect";
+        break;
+
+      case token::while_end:
+        retval = "endwhile";
+        break;
+
+      default:
+        panic_impossible ();
+        break;
+      }
+
+    return retval;
+  }
+
   void
   base_parser::end_token_error (token *tok, token::end_tok_type expected)
   {
     std::string msg = ("'" + end_token_as_string (expected)
                        + "' command matched by '"
                        + end_token_as_string (tok->ettype ()) + "'");
 
     bison_error (msg, tok->line (), tok->column ());
@@ -4469,141 +4466,137 @@ namespace octave
       }
     while (status == YYPUSH_MORE);
 
     if (status != 0)
       parse_error ("%s", m_parse_error_msg.c_str ());
 
     return status;
   }
-}
-
-static void
-safe_fclose (FILE *f)
-{
-  if (f)
-    fclose (static_cast<FILE *> (f));
-}
-
-static octave_value
-parse_fcn_file (const std::string& full_file, const std::string& file,
-                const std::string& dir_name, const std::string& dispatch_type,
-                const std::string& package_name, bool require_file,
-                bool force_script, bool autoload, bool relative_lookup,
-                const std::string& warn_for)
-{
-  octave_value retval;
-
-  octave::unwind_protect frame;
-
-  octave_function *fcn_ptr = nullptr;
-
-  // Open function file and parse.
-
-  FILE *in_stream = octave::command_editor::get_input_stream ();
-
-  frame.add_fcn (octave::command_editor::set_input_stream, in_stream);
-
-  frame.add_fcn (octave::command_history::ignore_entries,
-                 octave::command_history::ignoring_entries ());
-
-  octave::command_history::ignore_entries ();
-
-  FILE *ffile = nullptr;
-
-  if (! full_file.empty ())
-    ffile = std::fopen (full_file.c_str (), "rb");
-
-  if (ffile)
-    {
-      frame.add_fcn (safe_fclose, ffile);
-
-      octave::interpreter& interp
-        = octave::__get_interpreter__ ("parse_fcn_file");
-
-      octave::parser parser (ffile, interp);
-
-      parser.m_curr_class_name = dispatch_type;
-      parser.m_curr_package_name = package_name;
-      parser.m_autoloading = autoload;
-      parser.m_fcn_file_from_relative_lookup = relative_lookup;
-
-      parser.m_lexer.m_force_script = force_script;
-      parser.m_lexer.prep_for_file ();
-      parser.m_lexer.m_parsing_class_method = ! dispatch_type.empty ();
-
-      parser.m_lexer.m_fcn_file_name = file;
-      parser.m_lexer.m_fcn_file_full_name = full_file;
-      parser.m_lexer.m_dir_name = dir_name;
-      parser.m_lexer.m_package_name = package_name;
-
-      int status = parser.run ();
-
-      fcn_ptr = parser.m_primary_fcn_ptr;
-
-      if (status == 0)
-        {
-          if (parser.m_lexer.m_reading_classdef_file
-              && parser.m_classdef_object)
-            {
-              // Convert parse tree for classdef object to
-              // meta.class info (and stash it in the symbol
-              // table?).  Return pointer to constructor?
-
-              if (fcn_ptr)
-                panic_impossible ();
-
-              bool is_at_folder = ! dispatch_type.empty ();
-
-              try
-                {
-                  fcn_ptr = parser.m_classdef_object->make_meta_class (interp, is_at_folder);
-                }
-              catch (const octave::execution_exception&)
-                {
-                  delete parser.m_classdef_object;
-                  throw;
-                }
-
-              if (fcn_ptr)
+
+  static void
+  safe_fclose (FILE *f)
+  {
+    if (f)
+      fclose (static_cast<FILE *> (f));
+  }
+
+  static octave_value
+  parse_fcn_file (const std::string& full_file, const std::string& file,
+                  const std::string& dir_name, const std::string& dispatch_type,
+                  const std::string& package_name, bool require_file,
+                  bool force_script, bool autoload, bool relative_lookup,
+                  const std::string& warn_for)
+  {
+    octave_value retval;
+
+    unwind_protect frame;
+
+    octave_function *fcn_ptr = nullptr;
+
+    // Open function file and parse.
+
+    FILE *in_stream = command_editor::get_input_stream ();
+
+    frame.add_fcn (command_editor::set_input_stream, in_stream);
+
+    frame.add_fcn (command_history::ignore_entries,
+                   command_history::ignoring_entries ());
+
+    command_history::ignore_entries ();
+
+    FILE *ffile = nullptr;
+
+    if (! full_file.empty ())
+      ffile = std::fopen (full_file.c_str (), "rb");
+
+    if (ffile)
+      {
+        frame.add_fcn (safe_fclose, ffile);
+
+        interpreter& interp = __get_interpreter__ ("parse_fcn_file");
+
+        parser parser (ffile, interp);
+
+        parser.m_curr_class_name = dispatch_type;
+        parser.m_curr_package_name = package_name;
+        parser.m_autoloading = autoload;
+        parser.m_fcn_file_from_relative_lookup = relative_lookup;
+
+        parser.m_lexer.m_force_script = force_script;
+        parser.m_lexer.prep_for_file ();
+        parser.m_lexer.m_parsing_class_method = ! dispatch_type.empty ();
+
+        parser.m_lexer.m_fcn_file_name = file;
+        parser.m_lexer.m_fcn_file_full_name = full_file;
+        parser.m_lexer.m_dir_name = dir_name;
+        parser.m_lexer.m_package_name = package_name;
+
+        int status = parser.run ();
+
+        fcn_ptr = parser.m_primary_fcn_ptr;
+
+        if (status == 0)
+          {
+            if (parser.m_lexer.m_reading_classdef_file
+                && parser.m_classdef_object)
+              {
+                // Convert parse tree for classdef object to
+                // meta.class info (and stash it in the symbol
+                // table?).  Return pointer to constructor?
+
+                if (fcn_ptr)
+                  panic_impossible ();
+
+                bool is_at_folder = ! dispatch_type.empty ();
+
+                try
+                  {
+                    fcn_ptr = parser.m_classdef_object->make_meta_class (interp, is_at_folder);
+                  }
+                catch (const execution_exception&)
+                  {
+                    delete parser.m_classdef_object;
+                    throw;
+                  }
+
+                if (fcn_ptr)
+                  retval = octave_value (fcn_ptr);
+
+                delete parser.m_classdef_object;
+
+                parser.m_classdef_object = nullptr;
+              }
+            else if (fcn_ptr)
+              {
                 retval = octave_value (fcn_ptr);
 
-              delete parser.m_classdef_object;
-
-              parser.m_classdef_object = nullptr;
-            }
-          else if (fcn_ptr)
-            {
-              retval = octave_value (fcn_ptr);
-
-              fcn_ptr->maybe_relocate_end ();
-
-              if (parser.m_parsing_subfunctions)
-                {
-                  if (! parser.m_endfunction_found)
-                    parser.m_subfunction_names.reverse ();
-
-                  fcn_ptr->stash_subfunction_names (parser.m_subfunction_names);
-                }
-            }
-        }
-      else
-        error ("parse error while reading file %s", full_file.c_str ());
-    }
-  else if (require_file)
-    error ("no such file, '%s'", full_file.c_str ());
-  else if (! warn_for.empty ())
-    error ("%s: unable to open file '%s'", warn_for.c_str (),
-           full_file.c_str ());
-
-  return retval;
-}
-
-namespace octave
-{
+                fcn_ptr->maybe_relocate_end ();
+
+                if (parser.m_parsing_subfunctions)
+                  {
+                    if (! parser.m_endfunction_found)
+                      parser.m_subfunction_names.reverse ();
+
+                    fcn_ptr->stash_subfunction_names (parser.m_subfunction_names);
+                  }
+              }
+          }
+        else
+          error ("parse error while reading file %s", full_file.c_str ());
+      }
+    else if (require_file)
+      error ("no such file, '%s'", full_file.c_str ());
+    else if (! warn_for.empty ())
+      error ("%s: unable to open file '%s'", warn_for.c_str (),
+             full_file.c_str ());
+
+    return retval;
+  }
+
   std::string
   get_help_from_file (const std::string& nm, bool& symbol_found,
                       std::string& full_file)
   {
     std::string retval;
 
     full_file = fcn_file_in_path (nm);
 
@@ -5246,26 +5239,23 @@ namespace octave
       {
         return feval (val.string_value (), args, nargout);
       }
     else
       error ("feval: first argument must be a string, inline function, or a function handle");
 
     return ovl ();
   }
-}
-
-static octave_value_list
-get_feval_args (const octave_value_list& args)
-{
-  return args.slice (1, args.length () - 1, true);
-}
-
-namespace octave
-{
+
+  static octave_value_list
+  get_feval_args (const octave_value_list& args)
+  {
+    return args.slice (1, args.length () - 1, true);
+  }
+
   //! Evaluate an Octave function (built-in or interpreted) and return
   //! the list of result values.
   //!
   //! @param args The first element of @c args is the function to call.
   //!             It may be the name of the function as a string, a function
   //!             handle, or an inline function.  The remaining arguments are
   //!             passed to the function.
   //! @param nargout The number of output arguments expected.
@@ -5970,13 +5960,13 @@ Undocumented internal function.
           file = file.substr (pos+1);
         }
     }
 
   if (nargin == 2)
     octave_stdout << "parsing " << full_file << std::endl;
 
   octave_value ov_fcn
-    = parse_fcn_file (full_file, file, dir_name, "", "", true, false,
-                      false, false, "__parse_file__");
+    = octave::parse_fcn_file (full_file, file, dir_name, "", "", true, false,
+                              false, false, "__parse_file__");
 
   return retval;
 }
