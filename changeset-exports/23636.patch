# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497746500 25200
#      Sat Jun 17 17:41:40 2017 -0700
# Node ID 563a9fc1ef232e38db4333faf605d6eda0cfb567
# Parent  b5a9cd6de1b8f18ecc1af1c24f74530ecafc9442
Use exp2, exp2f from C++ std library.
These functions are guaranteed to be part of C++11 standard library.

* configure.ac: Remove AC_CHECK_DECL, AC_CHECK_FUNCS for log2.
Remove AC_CHECK_FUNCS for log2f.

* lo-mappers.cc: Delegate to std::exp2 or std::exp2f for exp2.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2417,25 +2417,22 @@ AC_CHECK_FUNCS([umask waitpid])
 AC_CHECK_FUNCS([_getch _kbhit])
 
 dnl There are no workarounds in the code for missing these functions.
 AC_CHECK_FUNCS([modf pow sqrt sqrtf], [],
                [AC_MSG_ERROR([Missing function required to build Octave])])
 
 ## exp2, round, tgamma function checks
 AC_LANG_PUSH(C++)
-AC_CHECK_DECLS([exp2, round, tgamma], [], [], [[#include <cmath>]])
-AC_CHECK_FUNCS([exp2 round tgamma])
+AC_CHECK_DECLS([round, tgamma], [], [], [[#include <cmath>]])
+AC_CHECK_FUNCS([round tgamma])
 AH_VERBATIM([Z_FUNCS_AND_DECLS], [
 #if defined (__cplusplus)
 extern "C" {
 #endif
-#if HAVE_EXP2 && ! HAVE_DECL_EXP2
-double exp2 (double);
-#endif
 #if HAVE_ROUND && ! HAVE_DECL_ROUND
 double round (double);
 #endif
 #if HAVE_TGAMMA && ! HAVE_DECL_TGAMMA
 double tgamma (double);
 #endif
 #if defined (__cplusplus)
 }
@@ -2447,21 +2444,16 @@ AC_LANG_POP(C++)
 
 OCTAVE_CHECK_FUNC_COMPLEX(acos)
 OCTAVE_CHECK_FUNC_COMPLEX(acosh)
 OCTAVE_CHECK_FUNC_COMPLEX(asin)
 OCTAVE_CHECK_FUNC_COMPLEX(asinh)
 OCTAVE_CHECK_FUNC_COMPLEX(atan)
 OCTAVE_CHECK_FUNC_COMPLEX(atanh)
 
-## Check for nonstandard, but common math functions, that we need.
-
-dnl Use multiple AC_CHECKs to avoid line continuations '\' in list
-AC_CHECK_FUNCS([exp2f])
-
 ## Check for math defines such as M_LN2 in math.h
 AC_CACHE_CHECK([for MATH DEFINES in math.h],
   [octave_cv_header_math_defines],
   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
     #include <math.h>
     ]], [[
     double x = M_LN2;]])],
     octave_cv_header_math_defines=yes,
diff --git a/liboctave/numeric/lo-mappers.cc b/liboctave/numeric/lo-mappers.cc
--- a/liboctave/numeric/lo-mappers.cc
+++ b/liboctave/numeric/lo-mappers.cc
@@ -269,47 +269,18 @@ namespace octave
     FloatComplex
     log2 (const FloatComplex& x, int& exp)
     {
       float ax = std::abs (x);
       float lax = log2 (ax, exp);
       return (ax != lax) ? (x / ax) * lax : x;
     }
 
-    double
-    exp2 (double x)
-    {
-#if defined (HAVE_EXP2)
-      return ::exp2 (x);
-#else
-#  if defined (M_LN2)
-      static double ln2 = M_LN2;
-#  else
-      static double ln2 = std::log (2.0);
-#  endif
-      return exp (x * ln2);
-#endif
-    }
-
-    float
-    exp2 (float x)
-    {
-#if defined (HAVE_EXP2F)
-      return exp2f (x);
-#elif defined (HAVE_EXP2)
-      return ::exp2 (x);
-#else
-#  if defined (M_LN2)
-      static float ln2 = M_LN2;
-#  else
-      static float ln2 = log2 (2.0f);
-#  endif
-      return exp (x * ln2);
-#endif
-    }
+    double exp2 (double x) { return std::exp2 (x); }
+    float exp2 (float x) { return std::exp2f (x); }
 
     double copysign (double x, double y) { return std::copysign (x, y); }
     float copysign (float x, float y) { return std::copysign (x, y); }
 
     double signbit (double x) { return std::signbit (x); }
     float signbit (float x) { return std::signbit (x); }
 
     bool negative_sign (double x) { return __lo_ieee_signbit (x); }
