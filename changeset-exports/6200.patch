# HG changeset patch
# User jwe
# Date 1165341912 0
#      Tue Dec 05 18:05:12 2006 +0000
# Node ID 1ec9de3cd12cde07bfcc3a5ff8b4895e232a9eaa
# Parent  7f7f612eac06cc879d0bb0e815ed845107b7ad25
[project @ 2006-12-05 18:05:11 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2006-12-05  John W. Eaton  <jwe@octave.org>
+
+	* pt-mat.cc (tm_row_const::empty): New function.
+	(tm_const::init): Don't append anything if tmp tm_row_const object
+	is empty.
+	(tree_matrix::rvalue): Default return value is Matrix().
+	Don't do anything if tmp tm_const object is empty.
+
+	* dirfns.cc (Fmkdir): Fix thinko in previous change.
+
 2006-12-05  Paul Kienzle  <pkienzle@users.sf.net>
 
 	* DLD-FUNCTIONS/rand.cc: Test for Poisson generator with lambda > 1e8.
 
 2006-12-04  David Bateman  <dbateman@free.fr>
 
 	* data.cc (Fdata): If ndims is greater than nargout and
 	nargout is greater than 1, then collect size of trailing
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -232,33 +232,33 @@ message identifier.\n\
       if (error_state)
 	{
 	  gripe_wrong_type_arg ("mkdir", args(0));
 	  return retval;
 	}
       else
 	dirname = parent + file_ops::dir_sep_char + dir;
     }
-  else
+  else if (nargin == 1)
     {
       dirname = args(0).string_value ();
 
       if (error_state)
 	{
 	  gripe_wrong_type_arg ("mkdir", args(0));
 	  return retval;
 	}
     }
 
   if (nargin == 1 || nargin == 2)
     {
       std::string msg;
 
       int status = file_ops::mkdir (file_ops::tilde_expand (dirname),
-					0777, msg);
+				    0777, msg);
 
       if (status < 0)
 	{
 	  retval(2) = "mkdir";
 	  retval(1) = msg;
 	}
       else
 	retval(0) = true;
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -151,16 +151,18 @@ public:
   {
     if (rep && --rep->count == 0)
       delete rep;
   }
 
   octave_idx_type rows (void) { return rep->dv(0); }
   octave_idx_type cols (void) { return rep->dv(1); }
 
+  bool empty (void) const { return rep->empty (); }
+
   dim_vector dims (void) { return rep->dv; }
 
   bool all_strings_p (void) const { return rep->all_str; }
   bool all_sq_strings_p (void) const { return rep->all_sq_str; }
   bool all_dq_strings_p (void) const { return rep->all_dq_str; }
   bool some_strings_p (void) const { return rep->some_str; }
   bool all_real_p (void) const { return rep->all_real; }
   bool all_complex_p (void) const { return rep->all_cmplx; }
@@ -506,17 +508,17 @@ tm_const::init (const tree_matrix& tm)
   for (tree_matrix::const_iterator p = tm.begin (); p != tm.end (); p++)
     {
       OCTAVE_QUIT;
 
       tree_argument_list *elt = *p;
 
       tm_row_const tmp (*elt);
 
-      if (tmp)
+      if (tmp && ! tmp.empty ())
 	{
 	  if (all_str && ! tmp.all_strings_p ())
 	    all_str = false;
 
 	  if (all_sq_str && ! tmp.all_sq_strings_p ())
 	    all_sq_str = false;
 
 	  if (all_dq_str && ! tmp.all_dq_strings_p ())
@@ -753,30 +755,30 @@ maybe_warn_string_concat (bool all_dq_st
  \
       retval = result; \
     } \
   while (0)
 
 octave_value
 tree_matrix::rvalue (void)
 {
-  octave_value retval;
+  octave_value retval = Matrix ();
 
   bool all_strings_p = false;
   bool all_sq_strings_p = false;
   bool all_dq_strings_p = false;
   bool all_empty_p = false;
   bool all_real_p = false;
   bool all_complex_p = false;
   bool any_sparse_p = false;
   bool frc_str_conv = false;
 
   tm_const tmp (*this);
 
-  if (tmp)
+  if (tmp && ! tmp.empty ())
     {
       dim_vector dv = tmp.dims ();
       all_strings_p = tmp.all_strings_p ();
       all_sq_strings_p = tmp.all_sq_strings_p ();
       all_dq_strings_p = tmp.all_dq_strings_p ();
       all_empty_p = tmp.all_empty_p ();
       all_real_p = tmp.all_real_p ();
       all_complex_p = tmp.all_complex_p ();
diff --git a/test/test_system.m b/test/test_system.m
--- a/test/test_system.m
+++ b/test/test_system.m
@@ -234,17 +234,17 @@
 %! e3 = rmdir (nm);
 %! [s4, e4] = stat (nm);
 %! assert((e1 && strcmp (s2.modestr(1), "d") && e3 && e4 < 0));
 
 %% test/octave.test/system/mkdir-1.m
 %!error <Invalid call to mkdir.*> mkdir ();
 
 %% test/octave.test/system/mkdir-2.m
-%!error <Invalid call to mkdir.*> mkdir ("foo", 1);
+%!error <Invalid call to mkdir.*> mkdir ("foo", 1, 2);
 
 %% test/octave.test/system/rmdir-1.m
 %!error <Invalid call to rmdir.*> rmdir ();
 
 %% test/octave.test/system/rmdir-2.m
 %!test
 %! crr = confirm_recursive_rmdir;
 %! confirm_recursive_rmdir = 0;
