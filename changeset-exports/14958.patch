# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1340126144 18000
#      Tue Jun 19 12:15:44 2012 -0500
# Node ID 4b98b3f66e465bed96d69687ce8b0a6167d8f000
# Parent  9d60ee38c6e28a4ced90d9174cd988dd3ba38668
Rename jit_break to jit_branch and jit_cond_break to jit_cond_branch

* src/pt-jit.h (jit_break): Rename to jit_branch.
  (jit_cond_break): Rename to jit_cond_branch.
  (jit_break::print): Print branch instead of break.
  (jit_cond_break::print): Print cond_branch instead of cond_break.
  (JIT_VISIT_IR_NOTEMPLATE): Rename break to branch.

* src/pt-jit.cc (jit_convert::jit_convert, jit_convert::visit_simple_for_command,
  jit_convert::visit_if_command_list,  jit_convert::finish_breaks,
  jit_convert::llvm::convert::visit): Rename break to branch.

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -1501,17 +1501,17 @@ jit_convert::jit_convert (llvm::Module *
   block = entry_block;
   visit (tee);
 
   // FIXME: Remove if we no longer only compile loops
   assert (! breaking);
   assert (breaks.empty ());
   assert (continues.empty ());
 
-  block->append (create<jit_break> (final_block));
+  block->append (create<jit_branch> (final_block));
   add_block (final_block);
   
   for (vmap_t::iterator iter = vmap.begin (); iter != vmap.end (); ++iter)
        
     {
       jit_variable *var = iter->second;
       const std::string& name = var->name ();
       if (name.size () && name[0] != '#')
@@ -1706,17 +1706,17 @@ jit_convert::visit_simple_for_command (t
   // do control expression, iter init, and condition check in prev_block (block)
   jit_value *control = visit (cmd.control_expr ());
   jit_call *init_iter = create<jit_call> (jit_typeinfo::for_init, control);
   block->append (init_iter);
   block->append (create<jit_assign> (iterator, init_iter));
   
   jit_value *check = block->append (create<jit_call> (jit_typeinfo::for_check,
                                                       control, iterator));
-  block->append (create<jit_cond_break> (check, body, tail));
+  block->append (create<jit_cond_branch> (check, body, tail));
   block = body;
 
   // compute the syntactical iterator
   jit_call *idx_rhs = create<jit_call> (jit_typeinfo::for_index, control, iterator);
   block->append (idx_rhs);
   do_assign (lhs_name, idx_rhs, false);
   
   // do loop
@@ -1733,28 +1733,28 @@ jit_convert::visit_simple_for_command (t
       return;
     }
 
   // check our condition, continues jump to this block
   jit_block *check_block = create<jit_block> ("for_check");
   add_block (check_block);
 
   if (! breaking)
-    block->append (create<jit_break> (check_block));
+    block->append (create<jit_branch> (check_block));
   finish_breaks (check_block, continues);
 
   block = check_block;
   const jit_function& add_fn = jit_typeinfo::binary_op (octave_value::op_add);
   jit_value *one = create<jit_const_index> (1);
   jit_call *iter_inc = create<jit_call> (add_fn, iterator, one);
   block->append (iter_inc);
   block->append (create<jit_assign> (iterator, iter_inc));
   check = block->append (create<jit_call> (jit_typeinfo::for_check, control,
                                            iterator));
-  block->append (create<jit_cond_break> (check, body, tail));
+  block->append (create<jit_cond_branch> (check, body, tail));
 
   // breaks will go to our tail
   add_block (tail);
   finish_breaks (tail, breaks);
   block = tail;
 }
 
 void
@@ -1865,32 +1865,32 @@ jit_convert::visit_if_command_list (tree
           jit_block *next = create<jit_block> (block->name ());
           add_block (next);
           block->append (create<jit_check_error> (check, next, final_block));
           block = next;
 
           jit_block *body = create<jit_block> (i == 0 ? "if_body" : "ifelse_body");
           add_block (body);
 
-          jit_instruction *br = create<jit_cond_break> (check, body,
+          jit_instruction *br = create<jit_cond_branch> (check, body,
                                                         entry_blocks[i + 1]);
           block->append (br);
           block = body;
         }
 
       tree_statement_list *stmt_lst = tic->commands ();
       assert (stmt_lst); // jwe: Can this be null?
       stmt_lst->accept (*this);
 
       if (breaking)
         breaking = false;
       else
         {
           ++num_incomming;
-          block->append (create<jit_break> (tail));
+          block->append (create<jit_branch> (tail));
         }
     }
 
   if (num_incomming || ! last_else)
     {
       add_block (tail);
       block = tail;
     }
@@ -2338,17 +2338,17 @@ jit_convert::remove_dead ()
         {
           // FIXME: A special case for jit_check_error, if we generalize to
           // we will need to change!
           jit_terminator *term = b->terminator ();
           if (term && term->successor_count () == 2 && ! term->alive (0))
             {
               jit_block *succ = term->successor (1);
               term->remove ();
-              jit_break *abreak = b->append (create<jit_break> (succ));
+              jit_branch *abreak = b->append (create<jit_branch> (succ));
               abreak->infer ();
             }
 
           ++biter;
         }
       else
         {
           jit_terminator *term = b->terminator ();
@@ -2368,17 +2368,17 @@ jit_convert::place_releases (void)
 
 void
 jit_convert::finish_breaks (jit_block *dest, const block_list& lst)
 {
   for (block_list::const_iterator iter = lst.begin (); iter != lst.end ();
        ++iter)
     {
       jit_block *b = *iter;
-      b->append (create<jit_break> (dest));
+      b->append (create<jit_branch> (dest));
     }
 }
 
 // -------------------- jit_convert::release_placer --------------------
 void
 jit_convert::release_placer::operator() (jit_block& block)
 {
   for (jit_block::iterator iter = block.begin (); iter != block.end (); ++iter)
@@ -2600,23 +2600,23 @@ jit_convert::convert_llvm::visit (jit_bl
 {
   llvm::BasicBlock *block = b.to_llvm ();
   builder.SetInsertPoint (block);
   for (jit_block::iterator iter = b.begin (); iter != b.end (); ++iter)
     visit (*iter);
 }
 
 void
-jit_convert::convert_llvm::visit (jit_break& b)
+jit_convert::convert_llvm::visit (jit_branch& b)
 {
   b.stash_llvm (builder.CreateBr (b.successor_llvm ()));
 }
 
 void
-jit_convert::convert_llvm::visit (jit_cond_break& cb)
+jit_convert::convert_llvm::visit (jit_cond_branch& cb)
 {
   llvm::Value *cond = cb.cond_llvm ();
   llvm::Value *br;
   br = builder.CreateCondBr (cond, cb.successor_llvm (0), cb.successor_llvm (1));
   cb.stash_llvm (br);
 }
 
 void
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -695,18 +695,18 @@ private:
 };
 
 // The low level octave jit ir
 // this ir is close to llvm, but contains information for doing type inference.
 // We convert the octave parse tree to this IR directly.
 
 #define JIT_VISIT_IR_NOTEMPLATE                 \
   JIT_METH(block);                              \
-  JIT_METH(break);                              \
-  JIT_METH(cond_break);                         \
+  JIT_METH(branch);                             \
+  JIT_METH(cond_branch);                        \
   JIT_METH(call);                               \
   JIT_METH(extract_argument);                   \
   JIT_METH(store_argument);                     \
   JIT_METH(phi);                                \
   JIT_METH(variable);                           \
   JIT_METH(check_error);                        \
   JIT_METH(assign)                              \
   JIT_METH(argument)
@@ -1655,37 +1655,37 @@ public:
 protected:
   virtual bool check_alive (size_t) const { return true; }
 private:
   std::vector<bool> malive;
   std::vector<llvm::BasicBlock *> mbranch_llvm;
 };
 
 class
-jit_break : public jit_terminator
+jit_branch : public jit_terminator
 {
 public:
-  jit_break (jit_block *succ) : jit_terminator (1, succ) {}
+  jit_branch (jit_block *succ) : jit_terminator (1, succ) {}
 
   virtual size_t successor_count (void) const { return 1; }
 
   virtual std::ostream& print (std::ostream& os, size_t indent = 0) const
   {
-    print_indent (os, indent) << "break: ";
+    print_indent (os, indent) << "branch: ";
     return print_successor (os);
   }
 
   JIT_VALUE_ACCEPT;
 };
 
 class
-jit_cond_break : public jit_terminator
+jit_cond_branch : public jit_terminator
 {
 public:
-  jit_cond_break (jit_value *c, jit_block *ctrue, jit_block *cfalse)
+  jit_cond_branch (jit_value *c, jit_block *ctrue, jit_block *cfalse)
     : jit_terminator (2, ctrue, cfalse, c) {}
 
   jit_value *cond (void) const { return argument (2); }
 
   std::ostream& print_cond (std::ostream& os) const
   {
     return cond ()->short_print (os);
   }
@@ -1694,17 +1694,17 @@ public:
   {
     return cond ()->to_llvm ();
   }
 
   virtual size_t successor_count (void) const { return 2; }
 
   virtual std::ostream& print (std::ostream& os, size_t indent = 0) const
   {
-    print_indent (os, indent) << "cond_break: ";
+    print_indent (os, indent) << "cond_branch: ";
     print_cond (os) << ", ";
     print_successor (os, 0) << ", ";
     return print_successor (os, 1);
   }
 
   JIT_VALUE_ACCEPT;
 };
 
