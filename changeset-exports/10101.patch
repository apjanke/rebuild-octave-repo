# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1263439908 18000
#      Wed Jan 13 22:31:48 2010 -0500
# Node ID b51848e95e4bf98f0526b331e12eefc6133baf35
# Parent  dd4d4b14b340182f830bc738b0e8d4aaebb81506
cleanups to avoid valgrind warnings

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2010-01-13  John W. Eaton  <jwe@octave.org>
+
+	* idx-vector.cc (idx_vector::idx_scalar_rep::idx_scalar_rep (T x)):
+	Initialize dummy variable.
+
 2010-01-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.cc (Array<T>::compute_index): Generalize to the case of
 	unequal lengths.
 
 2010-01-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dim-vector.h (dim_vector::chop_trailing_singletons): Only uniquify
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -210,17 +210,17 @@ convert_index (octave_int<T> x, bool& co
   return convert_index (i, conv_error, ext);
 }
 
 DEFINE_OCTAVE_ALLOCATOR(idx_vector::idx_scalar_rep);
 
 template <class T>
 idx_vector::idx_scalar_rep::idx_scalar_rep (T x)
 {
-  octave_idx_type dummy;
+  octave_idx_type dummy = 0;
   data = convert_index (x, err, dummy);
   if (err) gripe_invalid_index ();
 }
 
 idx_vector::idx_scalar_rep::idx_scalar_rep (octave_idx_type i) 
   : data (i)
 {
   if (data < 0) 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2010-01-13  John W. Eaton  <jwe@octave.org>
+
+	* ov-fcn.h (octave_function (const std::string&, const std::string&)):
+	Explicitly initialize all data members.
+
+	* ov-builtin.h (octave_builtin::octave_builtin):
+	Explicitly initialize base class object and data member.
+
 2010-01-13  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/__magick_read__.cc (read_indexed_images):
 	No need to explicitly call chop_trailing_singletons now.
 
 2010-01-13  John W. Eaton  <jwe@octave.org>
 
 	* oct-obj.cc (octave_value_list::any_cell): Avoid assignment in
diff --git a/src/ov-builtin.h b/src/ov-builtin.h
--- a/src/ov-builtin.h
+++ b/src/ov-builtin.h
@@ -35,17 +35,17 @@ class octave_value_list;
 // Builtin functions.
 
 class
 OCTINTERP_API
 octave_builtin : public octave_function
 {
 public:
 
-  octave_builtin (void) { }
+  octave_builtin (void) : octave_function (), f (0) { }
 
   typedef octave_value_list (*fcn) (const octave_value_list&, int);
 
   octave_builtin (fcn ff, const std::string& nm = std::string (),
 		  const std::string& ds = std::string ())
     : octave_function (nm, ds), f (ff) { }
 
   ~octave_builtin (void) { }
diff --git a/src/ov-fcn.h b/src/ov-fcn.h
--- a/src/ov-fcn.h
+++ b/src/ov-fcn.h
@@ -136,17 +136,18 @@ public:
   virtual void unload (void) { }
 
   virtual void accept (tree_walker&) { }
 
 protected:
 
   octave_function (const std::string& nm,
 		   const std::string& ds = std::string ())
-    : relative (false), my_name (nm), doc (ds) { }
+    : relative (false), locked (false), private_function (false),
+      xdispatch_class (), my_name (nm), my_dir_name (), doc (ds) { }
 
   // TRUE if this function was found from a relative path element.
   bool relative;
 
   // TRUE if this function is tagged so that it can't be cleared.
   bool locked;
 
   // TRUE means this is a private function.
