# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1471248599 -7200
#      Mon Aug 15 10:09:59 2016 +0200
# Node ID bc2a5db96754f625747cf3be36f2b57e0ac459f1
# Parent  8b18f46f642754504f580d54069a9937d87fc3a0
Resolve compile time issues, when octave_idx_type is long int.

* libinterp/octave-value/ov-classdef.cc: static_cast of ambiguous constants.

* libinterp/octave-value/ov-typeinfo.cc: static_cast of ambiguous constants.

* liboctave/numeric/gsvd.cc: use F77_INT* rather than int*.

* liboctave/numeric/svd.cc: static_cast of ambiguous constants.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1647,17 +1647,18 @@ cdef_object_array::subsasgn (const std::
           retval = to_ov (cdef_object (this));
         }
       else
         {
           const octave_value_list& ival = idx.front ();
 
           bool is_scalar = true;
 
-          Array<idx_vector> iv (dim_vector (1, std::max (ival.length (), 2)));
+          Array<idx_vector> iv (dim_vector (1, std::max (ival.length (), 
+            static_cast<octave_idx_type> (2))));
 
           for (int i = 0; i < ival.length (); i++)
             {
               try
                 {
                   iv(i) = ival(i).index_vector ();
                 }
               catch (index_exception& e)
@@ -1673,17 +1674,17 @@ cdef_object_array::subsasgn (const std::
                 error ("subsasgn: invalid indexing for object array assignment"
                        ", the index must reference a single object in the "
                        "array.");
             }
 
           // Fill in trailing singleton dimensions so that
           // array.index doesn't create a new blank entry (bug #46660).
           for (int i = ival.length (); i < 2; i++)
-            iv(i) = 1;
+            iv(i) = static_cast<octave_idx_type> (1);
 
           Array<cdef_object> a = array.index (iv, true);
 
           if (a.numel () != 1)
             error ("subsasgn: invalid indexing for object array assignment");
 
           cdef_object obj = a(0);
 
diff --git a/libinterp/octave-value/ov-typeinfo.cc b/libinterp/octave-value/ov-typeinfo.cc
--- a/libinterp/octave-value/ov-typeinfo.cc
+++ b/libinterp/octave-value/ov-typeinfo.cc
@@ -700,17 +700,18 @@ as_bool_nd_array (const Array<void *>& x
   return retval;
 }
 
 octave_scalar_map
 octave_value_typeinfo::unary_ops_map (void) const
 {
   octave_scalar_map retval;
 
-  int len = std::min (non_const_unary_ops.columns (), num_types);
+  int len = std::min (static_cast<int> (non_const_unary_ops.columns ()),
+    num_types);
 
   dim_vector tab_dims (1, len);
 
   for (int j = 0; j < octave_value::num_unary_ops; j++)
     {
       boolNDArray tab (tab_dims);
 
       for (int i = 0; i < len; i++)
@@ -724,17 +725,18 @@ octave_value_typeinfo::unary_ops_map (vo
   return retval;
 }
 
 octave_scalar_map
 octave_value_typeinfo::non_const_unary_ops_map (void) const
 {
   octave_scalar_map retval;
 
-  int len = std::min (non_const_unary_ops.columns (), num_types);
+  int len = std::min (static_cast<int> (non_const_unary_ops.columns ()),
+    num_types);
 
   dim_vector tab_dims (1, len);
 
   for (int j = 0; j < octave_value::num_unary_ops; j++)
     {
       boolNDArray tab (tab_dims);
 
       for (int i = 0; i < len; i++)
@@ -748,17 +750,17 @@ octave_value_typeinfo::non_const_unary_o
   return retval;
 }
 
 octave_scalar_map
 octave_value_typeinfo::binary_ops_map (void) const
 {
   octave_scalar_map retval;
 
-  int len = std::min (binary_ops.columns (), num_types);
+  int len = std::min (static_cast<int> (binary_ops.columns ()), num_types);
 
   dim_vector tab_dims (len, len);
 
   for (int k = 0; k < octave_value::num_binary_ops; k++)
     {
       boolNDArray tab (tab_dims);
 
       for (int j = 0; j < len; j++)
@@ -773,17 +775,18 @@ octave_value_typeinfo::binary_ops_map (v
   return retval;
 }
 
 octave_scalar_map
 octave_value_typeinfo::compound_binary_ops_map (void) const
 {
   octave_scalar_map retval;
 
-  int len = std::min (compound_binary_ops.columns (), num_types);
+  int len = std::min (static_cast<int> (compound_binary_ops.columns ()),
+    num_types);
 
   dim_vector tab_dims (len, len);
 
   for (int k = 0; k < octave_value::num_compound_binary_ops; k++)
     {
       boolNDArray tab (tab_dims);
 
       for (int j = 0; j < len; j++)
@@ -798,17 +801,17 @@ octave_value_typeinfo::compound_binary_o
   return retval;
 }
 
 octave_scalar_map
 octave_value_typeinfo::assign_ops_map (void) const
 {
   octave_scalar_map retval;
 
-  int len = std::min (assign_ops.columns (), num_types);
+  int len = std::min (static_cast<int> (assign_ops.columns ()), num_types);
 
   dim_vector tab_dims (len, len);
 
   for (int k = 0; k < octave_value::num_assign_ops; k++)
     {
       boolNDArray tab (tab_dims);
 
       for (int j = 0; j < len; j++)
@@ -823,17 +826,17 @@ octave_value_typeinfo::assign_ops_map (v
   return retval;
 }
 
 octave_scalar_map
 octave_value_typeinfo::assignany_ops_map (void) const
 {
   octave_scalar_map retval;
 
-  int len = std::min (assignany_ops.columns (), num_types);
+  int len = std::min (static_cast<int> (assignany_ops.columns ()), num_types);
 
   dim_vector tab_dims (1, len);
 
   for (int j = 0; j < octave_value::num_assign_ops; j++)
     {
       boolNDArray tab (tab_dims);
 
       for (int i = 0; i < len; i++)
diff --git a/liboctave/numeric/gsvd.cc b/liboctave/numeric/gsvd.cc
--- a/liboctave/numeric/gsvd.cc
+++ b/liboctave/numeric/gsvd.cc
@@ -49,17 +49,17 @@ extern "C"
      F77_DBLE*,                 // BETA    (output) DOUBLE PRECISION array, dimension (N)
      F77_DBLE*,                 // U       (output) DOUBLE PRECISION array, dimension (LDU,M)
      const F77_INT&,            // LDU     (input) INTEGER
      F77_DBLE*,                 // V       (output) DOUBLE PRECISION array, dimension (LDV,P)
      const F77_INT&,            // LDV     (input) INTEGER
      F77_DBLE*,                 // Q       (output) DOUBLE PRECISION array, dimension (LDQ,N)
      const F77_INT&,            // LDQ     (input) INTEGER
      F77_DBLE*,                 // WORK    (workspace) DOUBLE PRECISION array
-     int*,                      // IWORK   (workspace/output) INTEGER array, dimension (N)
+     F77_INT*,                  // IWORK   (workspace/output) INTEGER array, dimension (N)
      F77_INT&                   // INFO    (output)INTEGER
      F77_CHAR_ARG_LEN_DECL
      F77_CHAR_ARG_LEN_DECL
      F77_CHAR_ARG_LEN_DECL
      );
 
   F77_RET_T
   F77_FUNC (zggsvd, ZGGSVD)
@@ -81,17 +81,17 @@ extern "C"
      F77_DBLE_CMPLX*,           // U       (output) COMPLEX*16 array, dimension (LDU,M)
      const F77_INT&,            // LDU     (input) INTEGER
      F77_DBLE_CMPLX*,           // V       (output) COMPLEX*16 array, dimension (LDV,P)
      const F77_INT&,            // LDV     (input) INTEGER
      F77_DBLE_CMPLX*,           // Q       (output) COMPLEX*16 array, dimension (LDQ,N)
      const F77_INT&,            // LDQ     (input) INTEGER
      F77_DBLE_CMPLX*,           // WORK    (workspace) COMPLEX*16 array
      F77_DBLE*,                 // RWORK   (workspace) DOUBLE PRECISION array
-     int*,                      // IWORK   (workspace/output) INTEGER array, dimension (N)
+     F77_INT*,                  // IWORK   (workspace/output) INTEGER array, dimension (N)
      F77_INT&                   // INFO    (output)INTEGER
      F77_CHAR_ARG_LEN_DECL
      F77_CHAR_ARG_LEN_DECL
      F77_CHAR_ARG_LEN_DECL
      );
 }
 
 template <>
diff --git a/liboctave/numeric/svd.cc b/liboctave/numeric/svd.cc
--- a/liboctave/numeric/svd.cc
+++ b/liboctave/numeric/svd.cc
@@ -456,18 +456,19 @@ svd<T>::svd (const T& a, svd::Type type,
   P* vt = right_sm.fortran_vec ();
 
   // Query _GESVD for the correct dimension of WORK.
 
   octave_idx_type lwork = -1;
 
   std::vector<P> work (1);
 
-  octave_idx_type m1 = std::max (m, 1);
-  octave_idx_type nrow_vt1 = std::max (nrow_vt, 1);
+  octave_idx_type m1 = std::max (m, static_cast<octave_idx_type> (1));
+  octave_idx_type nrow_vt1 = std::max (nrow_vt,
+    static_cast<octave_idx_type> (1));
 
   if (m_driver == svd::Driver::GESVD)
     gesvd (jobu, jobv, m, n, tmp_data, m1, s_vec, u, vt, nrow_vt1,
            work, lwork, info);
   else if (m_driver == svd::Driver::GESDD)
     {
       assert (jobu == jobv);
       char jobz = jobu;
