# HG changeset patch
# User Rik <rik@octave.org>
# Date 1439584110 25200
#      Fri Aug 14 13:28:30 2015 -0700
# Node ID 610c7474851861c4d1a07a75cb9f9f9eaecf74fd
# Parent  b22528fd3debca1b2ca744529be08b14595b0143
maint: Clean up code based on static analysis suggestions.

* __dispatch__.cc (F__dispatch__): Eliminate unnecessary double check on
(nargin > 0).

* cellfun.cc (Fnum2cell): Eliminate duplicate else-if branch for
array.is_object().

* load-save.cc: Eliminate unreachable else branch.  Simplify else-if to simple
else since condition is always true at this point.

* matrix_type.cc (Fmatrix_type): Eliminate unnecessary check on 'str_type ==
upper' and just mark matrix as permuted when permutation matrix was given as
input.

* kpse.cc (set_end): remove unused variable and its usage in conditional.

diff --git a/libinterp/corefcn/__dispatch__.cc b/libinterp/corefcn/__dispatch__.cc
--- a/libinterp/corefcn/__dispatch__.cc
+++ b/libinterp/corefcn/__dispatch__.cc
@@ -45,25 +45,22 @@ DEFUN (__dispatch__, args, nargout,
   octave_value retval;
 
   int nargin = args.length ();
 
   std::string f, r, t;
 
   if (nargin > 0 && nargin < 4)
     {
-      if (nargin > 0)
-        {
-          f = args(0).string_value ();
+      f = args(0).string_value ();
 
-          if (error_state)
-            {
-              error ("__dispatch__: first argument must be a function name");
-              return retval;
-            }
+      if (error_state)
+        {
+          error ("__dispatch__: first argument must be a function name");
+          return retval;
         }
 
       if (nargin > 1)
         {
           r = args(1).string_value ();
 
           if (error_state)
             {
diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -1954,18 +1954,16 @@ num2cell ([1,2;3,4],1)\n\
             }
         }
       else if (array.is_object ())
         retval = do_object2cell (array, dimv);
       else if (array.is_map ())
         retval = do_num2cell (array.map_value (), dimv);
       else if (array.is_cell ())
         retval = do_num2cell (array.cell_value (), dimv);
-      else if (array.is_object ())
-        retval = do_num2cell (array.cell_value (), dimv);
       else
         gripe_wrong_type_arg ("num2cell", array);
     }
 
   return retval;
 }
 
 /*
diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -395,17 +395,17 @@ do_load (std::istream& stream, const std
 
         default:
           gripe_unrecognized_data_fmt ("load");
           break;
         }
 
       if (error_state || stream.eof () || name.empty ())
         break;
-      else if (! error_state && ! name.empty ())
+      else
         {
           if (tc.is_defined ())
             {
               if (format == LS_MAT_ASCII && argv_idx < argc)
                 warning ("load: loaded ASCII file '%s' -- ignoring extra args",
                          orig_fname.c_str ());
 
               if (format == LS_MAT_ASCII
@@ -450,24 +450,16 @@ do_load (std::istream& stream, const std
               // Only attempt to read one item from a headless text file.
 
               if (format == LS_MAT_ASCII)
                 break;
             }
           else
             error ("load: unable to load variable '%s'", name.c_str ());
         }
-      else
-        {
-          if (count == 0)
-            error ("load: are you sure '%s' is an Octave data file?",
-                   orig_fname.c_str ());
-
-          break;
-        }
     }
 
   if (list_only && count)
     {
       if (verbose)
         {
           std::string msg = output_buf.str ();
 
diff --git a/libinterp/corefcn/matrix_type.cc b/libinterp/corefcn/matrix_type.cc
--- a/libinterp/corefcn/matrix_type.cc
+++ b/libinterp/corefcn/matrix_type.cc
@@ -301,20 +301,17 @@ LU@tie{}factorization.  Once the matrix 
                                 {
                                   OCTAVE_LOCAL_BUFFER (octave_idx_type, p, len);
 
                                   for (octave_idx_type i = 0; i < len; i++)
                                     p[i] = static_cast<octave_idx_type>
                                            (perm (i))
                                            - 1;
 
-                                  if (str_typ == "upper")
-                                    mattyp.mark_as_permuted (len, p);
-                                  else
-                                    mattyp.mark_as_permuted (len, p);
+                                  mattyp.mark_as_permuted (len, p);
                                 }
                             }
                         }
                       else if (nargin != 2
                                && str_typ != "banded positive definite"
                                && str_typ != "banded")
                         error ("matrix_type: Invalid number of arguments");
 
@@ -474,20 +471,17 @@ LU@tie{}factorization.  Once the matrix 
                                 {
                                   OCTAVE_LOCAL_BUFFER (octave_idx_type, p, len);
 
                                   for (octave_idx_type i = 0; i < len; i++)
                                     p[i] = static_cast<octave_idx_type>
                                            (perm (i))
                                            - 1;
 
-                                  if (str_typ == "upper")
-                                    mattyp.mark_as_permuted (len, p);
-                                  else
-                                    mattyp.mark_as_permuted (len, p);
+                                  mattyp.mark_as_permuted (len, p);
                                 }
                             }
                         }
                       else if (nargin != 2)
                         error ("matrix_type: Invalid number of arguments");
 
                       if (! error_state)
                         {
diff --git a/liboctave/util/kpse.cc b/liboctave/util/kpse.cc
--- a/liboctave/util/kpse.cc
+++ b/liboctave/util/kpse.cc
@@ -480,19 +480,17 @@ private:
     if (e == len)
       ; /* OK, we have found the last element.  */
     else if (e > len)
       b = e = std::string::npos;
     else
       {
         /* Find the next colon not enclosed by braces (or the end of
            the path).  */
-
-        int brace_level = 0;
-        while (e < len && ! (brace_level == 0 && kpse_is_env_sep (path[e])))
+        while (e < len && ! kpse_is_env_sep (path[e]))
           e++;
       }
   }
 
   void next (void)
   {
     b = e + 1;
 
