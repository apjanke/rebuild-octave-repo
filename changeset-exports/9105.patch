# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1239247085 14400
#      Wed Apr 08 23:18:05 2009 -0400
# Node ID 9b12ed1fbbbd4387e24b2fa69b275654095127d6
# Parent  e0250e2b60ed4af469e0f4a11158dd9cc1230336
force rehash if path, addpath, or rmpath modify path

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-04-08  John W. Eaton  <jwe@octave.org>
+
+	* load-path.cc (rehash_internal): New function.
+	(Frehash): Use it.
+	(Fpath, Faddpath, Frmpath): Call rehash_internal if path is modified.
+
 2009-04-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* xpow.cc (elem_xpow (double, const Range&),
 	elem_xpow (const Complex&, const Range&)): New functions.
 	* xpow.h: Declare them.
 	* OPERATORS/op-range.cc: Define scalar .^ range and complex .^ range &
 	install them.
 
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -1812,31 +1812,37 @@ Return a path constructed from @var{dir}
 	error ("genpath: expecting argument to be a character string");
     }
   else
     print_usage ();
 
   return retval;
 }
 
+static void
+rehash_internal (void)
+{
+  load_path::update ();
+
+  // FIXME -- maybe we should rename this variable since it is being
+  // used for more than keeping track of the prompt time.
+
+  // This will force updated functions to be found.
+  Vlast_prompt_time.stamp ();
+}
+
 DEFUN (rehash, , ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} rehash ()\n\
 Reinitialize Octave's load path directory cache.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  load_path::update ();
-
-  // FIXME -- maybe we should rename this variable since it is being
-  // used for more than keeping track of the prompt time.
-
-  // This will force updated functions to be found.
-  Vlast_prompt_time.stamp ();
+  rehash_internal ();
 
   return retval;
 }
 
 DEFUN (command_line_path, , ,
     "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} command_line_path (@dots{})\n\
 Return the command line path variable.\n\
@@ -1904,16 +1910,18 @@ No checks are made for duplicate element
       if (argc > 1)
 	{
 	  std::string path = argv[1];
 
 	  for (int i = 2; i < argc; i++)
 	    path += dir_path::path_sep_str () + argv[i];
 
 	  load_path::set (path, true);
+
+	  rehash_internal ();
 	}
 
       if (nargout > 0)
 	retval = load_path::path ();
       else if (argc == 1 && nargout == 0)
 	{
 	  octave_stdout << "\nOctave's search path contains the following directories:\n\n";
 
@@ -1986,16 +1994,18 @@ Directories added to the path must exist
 	    }
 	  else
 	    {
 	      error ("addpath: expecting final argument to be 1 or 0");
 	      return retval;
 	    }
 	}
 
+      bool need_to_update = false;
+
       for (int i = 0; i < nargin; i++)
 	{
 	  std::string arg = args(i).string_value ();
 
 	  if (! error_state)
 	    {
 	      std::list<std::string> dir_elts = split_path (arg);
 
@@ -2007,21 +2017,26 @@ Directories added to the path must exist
 
 		  //dir = regexprep (dir_elts{j}, "//+", "/");
 		  //dir = regexprep (dir, "/$", "");
 
 		  if (append)
 		    load_path::append (dir, true);
 		  else
 		    load_path::prepend (dir, true);
+
+		  need_to_update = true;
 		}
 	    }
 	  else
 	    error ("addpath: expecting all args to be character strings");
 	}
+
+      if (need_to_update)
+	rehash_internal ();
     }
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN (rmpath, args, nargout,
@@ -2039,16 +2054,18 @@ Remove @var{dir1}, @dots{} from the curr
 
   if (nargout > 0)
     retval = load_path::path ();
 
   int nargin = args.length ();
 
   if (nargin > 0)
     {
+      bool need_to_update = false;
+
       for (int i = 0; i < nargin; i++)
 	{
 	  std::string arg = args(i).string_value ();
 
 	  if (! error_state)
 	    {
 	      std::list<std::string> dir_elts = split_path (arg);
 
@@ -2058,21 +2075,26 @@ Remove @var{dir1}, @dots{} from the curr
 		{
 		  std::string dir = *p;
 
 		  //dir = regexprep (dir_elts{j}, "//+", "/");
 		  //dir = regexprep (dir, "/$", "");
 
 		  if (! load_path::remove (dir))
 		    warning ("rmpath: %s: not found", dir.c_str ());
+		  else
+		    need_to_update = true;
 		}
 	    }
 	  else
 	    error ("addpath: expecting all args to be character strings");
 	}
+
+      if (need_to_update)
+	rehash_internal ();
     }
   else
     print_usage ();
 
   return retval;
 }
 
 /*
