# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1460386398 14400
#      Mon Apr 11 10:53:18 2016 -0400
# Node ID d7a268e68e69efb8eccf58dfa9981ae3bc2f42cb
# Parent  37cbdf7bffa94ff655a3ec3e4468eed4521a870d
maint: Strip trailing whitespace from source files.

diff --git a/doc/interpreter/testfun.txi b/doc/interpreter/testfun.txi
--- a/doc/interpreter/testfun.txi
+++ b/doc/interpreter/testfun.txi
@@ -381,17 +381,17 @@ For example,
 @end group
 @end example
 
 @noindent
 but
 
 @example
 @group
-## test block with normal Octave code 
+## test block with normal Octave code
 %!test
 %! assert (sin (0), 0);
 @end group
 @end example
 
 You can also create test scripts for built-in functions and your own C++
 functions.  To do so, put a file with the bare function name (no .m
 extension) in a directory in the load path and it will be discovered by
diff --git a/libinterp/corefcn/__ilu__.cc b/libinterp/corefcn/__ilu__.cc
--- a/libinterp/corefcn/__ilu__.cc
+++ b/libinterp/corefcn/__ilu__.cc
@@ -238,17 +238,17 @@ void ilu_crout (octave_matrix_t& sm_l, o
   OCTAVE_LOCAL_BUFFER (T, w_data_l, n);
   OCTAVE_LOCAL_BUFFER (T, w_data_u, n);
   OCTAVE_LOCAL_BUFFER (octave_idx_type, Ufirst, n);
   OCTAVE_LOCAL_BUFFER (octave_idx_type, Lfirst, n);
   OCTAVE_LOCAL_BUFFER (T, cr_sum, n);
 
   T zero = T (0);
 
-  // Initialize working arrays 
+  // Initialize working arrays
   cidx_u[0] = cidx_in_u[0];
   cidx_l[0] = cidx_in_l[0];
   for (i = 0; i < n; i++)
     {
       w_data_u[i] = zero;
       w_data_l[i] = zero;
       cr_sum[i] = zero;
     }
@@ -604,17 +604,17 @@ void ilu_tp (octave_matrix_t& sm, octave
   std::set <octave_idx_type> iw_l;
   std::set <octave_idx_type> iw_u;
   std::set <octave_idx_type>::iterator it, it2;
   OCTAVE_LOCAL_BUFFER (T, w_data, n);
   OCTAVE_LOCAL_BUFFER (octave_idx_type, iperm, n);
   octave_idx_type* perm = perm_vec.fortran_vec ();
   OCTAVE_LOCAL_BUFFER (octave_idx_type, uptr, n);
 
-  // Initialize working and permutation arrays 
+  // Initialize working and permutation arrays
   cidx_l[0] = cidx_in[0];
   cidx_u[0] = cidx_in[0];
   for (i = 0; i < n; i++)
     {
       w_data[i] = 0;
       perm[i] = i;
       iperm[i] = i;
     }
diff --git a/libinterp/corefcn/max.cc b/libinterp/corefcn/max.cc
--- a/libinterp/corefcn/max.cc
+++ b/libinterp/corefcn/max.cc
@@ -134,17 +134,17 @@ do_minmax_red_op<boolNDArray> (const oct
           // any/all don't have indexed versions, so do it via a conversion.
           retval = do_minmax_red_op<int8NDArray> (arg, nargout, dim, ismin);
 
           retval(0) = retval(0).bool_array_value ();
         }
     }
   else
     {
-      // Sparse: Don't use any/all trick, as full matrix could exceed memory. 
+      // Sparse: Don't use any/all trick, as full matrix could exceed memory.
       // Instead, convert to double.
       retval = do_minmax_red_op<SparseMatrix> (arg, nargout, dim, ismin);
 
       retval(0) = retval(0).sparse_bool_matrix_value ();
     }
 
   return retval;
 }
diff --git a/libinterp/corefcn/syscalls.cc b/libinterp/corefcn/syscalls.cc
--- a/libinterp/corefcn/syscalls.cc
+++ b/libinterp/corefcn/syscalls.cc
@@ -467,17 +467,17 @@ The call to @code{fork} failed for some 
 action.  A system dependent error message will be waiting in @var{msg}.\n\
 @end table\n\
 @end deftypefn")
 {
   if (args.length () != 0)
     print_usage ();
 
   if (symbol_table::at_top_level ())
-    error ("fork: cannot be called from command line"); 
+    error ("fork: cannot be called from command line");
 
   std::string msg;
 
   pid_t pid = octave_syscalls::fork (msg);
 
   return ovl (pid, msg);
 }
 
diff --git a/libinterp/dldfcn/__glpk__.cc b/libinterp/dldfcn/__glpk__.cc
--- a/libinterp/dldfcn/__glpk__.cc
+++ b/libinterp/dldfcn/__glpk__.cc
@@ -283,17 +283,17 @@ glpk (int sense, int n, int m, double *c
 
       *time = (clock () - t_start) / CLOCKS_PER_SEC;
     }
 
   glp_delete_prob (lp);
   // Request that GLPK free all memory resources.
   // This prevents reported memory leaks, but isn't strictly necessary.
   // The memory blocks use are allocated once and don't grow with further
-  // calls to glpk so they would be reclaimed anyways when Octave exits. 
+  // calls to glpk so they would be reclaimed anyways when Octave exits.
   glp_free_env ();
 
   return errnum;
 }
 
 #endif
 
 #define OCTAVE_GLPK_GET_REAL_PARAM(NAME, VAL) \
diff --git a/libinterp/dldfcn/__init_gnuplot__.cc b/libinterp/dldfcn/__init_gnuplot__.cc
--- a/libinterp/dldfcn/__init_gnuplot__.cc
+++ b/libinterp/dldfcn/__init_gnuplot__.cc
@@ -1,9 +1,9 @@
-/*, , 
+/*
 
 Copyright (C) 2007-2015 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
diff --git a/libinterp/dldfcn/ccolamd.cc b/libinterp/dldfcn/ccolamd.cc
--- a/libinterp/dldfcn/ccolamd.cc
+++ b/libinterp/dldfcn/ccolamd.cc
@@ -303,17 +303,17 @@ ccolamd, csymamd, amd, colamd, symamd, a
 
   // return the permutation vector
   NDArray out_perm (dim_vector (1, n_col));
   for (octave_idx_type i = 0; i < n_col; i++)
     out_perm(i) = p[i] + 1;
 
   retval(0) = out_perm;
 
-  // print stats if spumoni > 0  
+  // print stats if spumoni > 0
   if (spumoni > 0)
     CCOLAMD_NAME (_report) (stats);
 
   // Return the stats vector
   if (nargout == 2)
     {
       NDArray out_stats (dim_vector (1, CCOLAMD_STATS));
       for (octave_idx_type i = 0 ; i < CCOLAMD_STATS ; i++)
diff --git a/libinterp/dldfcn/symbfact.cc b/libinterp/dldfcn/symbfact.cc
--- a/libinterp/dldfcn/symbfact.cc
+++ b/libinterp/dldfcn/symbfact.cc
@@ -105,17 +105,17 @@ Cholesky@tie{}factorization as determine
 #ifdef HAVE_CHOLMOD
 
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
 
   octave_value_list retval;
- 
+
   double dummy;
   cholmod_sparse Astore;
   cholmod_sparse *A = &Astore;
   A->packed = true;
   A->sorted = true;
   A->nz = 0;
 #if defined (OCTAVE_ENABLE_64)
   A->itype = CHOLMOD_LONG;
@@ -392,24 +392,24 @@ cleanup:
 
 %!testif HAVE_CHOLMOD
 %! ## Test MODE "lower"
 %! A = sparse (magic (3));
 %! [~, ~, ~, ~, l] = symbfact (A, "sym", "lower");
 %! assert (l, sparse (tril (true (3))));
 
 %!testif HAVE_CHOLMOD
-%! ## Bug #42587, singular matrix 
+%! ## Bug #42587, singular matrix
 %! A = sparse ([1 0 8;0 1 8;8 8 1]);
 %! [count, h, parent, post, r] = symbfact (A);
 
 ## Test input validation
 %!testif HAVE_CHOLMOD
 %! fail ("symbfact ()");
 %! fail ("symbfact (1,2,3,4)");
 %! fail ("symbfact ({1})", "wrong type argument 'cell'");
 %! fail ("symbfact (sparse (1), {1})", "TYP must be a string");
-%! fail ("symbfact (sparse (1), 'foobar')", 'unrecognized TYP "foobar"'); 
+%! fail ("symbfact (sparse (1), 'foobar')", 'unrecognized TYP "foobar"');
 %! fail ("symbfact (sparse (1), 'sym', {'L'})", "MODE must be a string");
-%! fail ('symbfact (sparse (1), "sym", "foobar")', 'unrecognized MODE "foobar"'); 
+%! fail ('symbfact (sparse (1), "sym", "foobar")', 'unrecognized MODE "foobar"');
 %! fail ("symbfact (sparse ([1, 2; 3, 4; 5, 6]))", "S must be a square matrix");
 
 */
diff --git a/liboctave/util/data-conv.cc b/liboctave/util/data-conv.cc
--- a/liboctave/util/data-conv.cc
+++ b/liboctave/util/data-conv.cc
@@ -69,17 +69,17 @@ along with Octave; see the file COPYING.
            VAL = oct_data_conv::dt_ ## Q ## int; \
          else if (sizeof (TQ long) == sz) \
            VAL = oct_data_conv::dt_ ## Q ## long; \
          else \
            VAL = oct_data_conv::dt_unknown; \
        } \
      while (0)
 #endif
-   
+
 #define FIND_SIZED_FLOAT_TYPE(VAL, BITS) \
   do \
     { \
       int sz = BITS / std::numeric_limits<unsigned char>::digits; \
       if (sizeof (float) == sz) \
         VAL = oct_data_conv::dt_float; \
       else if (sizeof (double) == sz) \
         VAL = oct_data_conv::dt_double; \
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -1513,17 +1513,17 @@ dnl can be used in oct-inttypes.h.
 dnl
 dnl Defines OCTAVE_HAVE_FAST_INT_OPS if the following conditions hold:
 dnl
 dnl   1. Signed numbers are represented by twos complement (see
 dnl      <http://en.wikipedia.org/wiki/Two%27s_complement>)
 dnl
 dnl   2. static_cast to unsigned int counterpart works like
 dnl      interpreting the signed bit pattern as unsigned (and is thus
-dnl      zero-cost). 
+dnl      zero-cost).
 dnl
 dnl   3. Signed addition and subtraction yield the same bit results
 dnl      as unsigned.  (We use casts to prevent optimization
 dnl      interference, so there is no need for things like -ftrapv).
 dnl
 dnl   4. Bit operations on signed integers work like on unsigned
 dnl      integers, except for the shifts.  Shifts are arithmetic.
 dnl
diff --git a/scripts/miscellaneous/version.m b/scripts/miscellaneous/version.m
--- a/scripts/miscellaneous/version.m
+++ b/scripts/miscellaneous/version.m
@@ -116,12 +116,12 @@ endfunction
 %! assert (d, __octave_config_info__ ("release_date"));
 
 %!assert (version ("-date"), __octave_config_info__ ("release_date"))
 
 ## Test input validation
 %!error version ("-date", "-release")
 %!error [v, d] = version ("-date")
 %!error version (1)
-%!warning <option '-blas' not implemented> version ("-blas"); 
-%!warning <option '-lapack' not implemented> version ("-lapack"); 
+%!warning <option '-blas' not implemented> version ("-blas");
+%!warning <option '-lapack' not implemented> version ("-lapack");
 %!error <invalid FEATURE> version ("-foobar")
 
diff --git a/scripts/ode/ode45.m b/scripts/ode/ode45.m
--- a/scripts/ode/ode45.m
+++ b/scripts/ode/ode45.m
@@ -403,17 +403,17 @@ endfunction
 %! ## Estimate order numerically
 %! p = diff (log (err)) ./ diff (log (h))
 %!
 %! ## Estimate order visually
 %! figure ();
 %! loglog (h, tol, "-ob",
 %!         h, err, "-b"
 %!         h, (h/h(end)) .^ 4 .* tol(end), "k--",
-%!         h, (h/h(end)) .^ 5 .* tol(end), "k-") 
+%!         h, (h/h(end)) .^ 5 .* tol(end), "k-")
 %! axis tight
 %! xlabel ("h");
 %! ylabel ("err(h)");
 %! title ("Convergence plot for ode45");
 %! legend ("imposed tolerance", "ode45 (relative) error",
 %!         "order 4", "order 5", "location", "northwest");
 
 ## We are using the "Van der Pol" implementation for all tests that are done
diff --git a/scripts/plot/draw/private/__scatter__.m b/scripts/plot/draw/private/__scatter__.m
--- a/scripts/plot/draw/private/__scatter__.m
+++ b/scripts/plot/draw/private/__scatter__.m
@@ -365,17 +365,17 @@ function update_data (h, d)
   endif
   c = get (h, "cdata");
   one_explicit_color = ischar (c) || isequal (size (c), [1, 3]);
   if (! one_explicit_color)
     if (rows (c) == 1)
       c = repmat (c, numel (x), 1);
     endif
   endif
-  filled = ! strcmp (get (h, "markerfacecolor"), "none"); 
+  filled = ! strcmp (get (h, "markerfacecolor"), "none");
   s = get (h, "sizedata");
   if (numel (s) == 1)
     s = repmat (s, numel (x), 1);
   endif
   hlist = get (h, "children");
 
   if (one_explicit_color)
     if (filled)
diff --git a/scripts/polynomial/padecoef.m b/scripts/polynomial/padecoef.m
--- a/scripts/polynomial/padecoef.m
+++ b/scripts/polynomial/padecoef.m
@@ -81,17 +81,17 @@
 ## @end group
 ## @end smallexample
 ## @end deftypefn
 
 function [num, den] = padecoef (T, N = 1)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
-  endif 
+  endif
 
   if (! (isscalar (T) && isnumeric (T) && T >= 0))
     error ("padecoef: T must be a non-negative scalar");
   elseif (! (isscalar (N) && isnumeric (N) && N >= 0))
     error ("padecoef: N must be a non-negative scalar");
   endif
 
   N = round (N);
diff --git a/scripts/statistics/base/mode.m b/scripts/statistics/base/mode.m
--- a/scripts/statistics/base/mode.m
+++ b/scripts/statistics/base/mode.m
@@ -53,20 +53,20 @@ function [m, f, c] = mode (x, dim)
     (dim = find (sz > 1, 1)) || (dim = 1);
   else
     if (! (isscalar (dim) && dim == fix (dim) && dim > 0))
       error ("mode: DIM must be an integer and a valid dimension");
     endif
   endif
 
   if (dim > nd)
-    ## Special case of mode over non-existent dimension 
+    ## Special case of mode over non-existent dimension.
     m = x;
     f = ones (size (x));
-    c = num2cell (x);    
+    c = num2cell (x);
     return;
   endif
 
   sz2 = sz;
   sz2(dim) = 1;
   sz3 = ones (1, nd);
   sz3(dim) = sz(dim);
 
