# HG changeset patch
# User jwe
# Date 880078280 0
#      Fri Nov 21 02:11:20 1997 +0000
# Node ID fe2d1ae8926b519bc23808968bc03b39af13cc2b
# Parent  fcb2f5063e7f96380e38dcbaa5a368820a147009
[project @ 1997-11-21 02:11:19 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,31 @@
+Thu Nov 20 15:16:22 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* octave.cc (maximum_braindamage): Bind implicit_num_to_str_ok to 1.
+	* pt-mat.cc (Vimplicit_num_to_str_ok): New static variable.
+	(implicit_num_to_str_ok): New function.
+	(symbols_of_pt_mat): DEFVAR implicit_num_to_str_ok.
+	(tm_row_const::some_str): New data member.
+	(tm_row_const::some_strings_p): New function.
+	(tm_row_const::init): Set some_str.
+	(tm_const::some_str): New data member.
+	(tm_const::some_strings_p): New function.
+	(tm_const::init): Set some_str.
+	(tree_matrix::eval): If Vimplicit_num_to_str_ok is true and some
+	of the elements are strings, force a string conversion before
+	returning.
+
+	* parse.y (fold, finish_colon_expression, finish_matrix):
+	If an error occurs, return the original expression.
+	Use unwind_protect to restore error_state.
+
+	* ov-ch-mat.h (octave_char_matrix::convert_to_str): Result is
+	char_matrix_str, not just char_matrix.
+
 Wed Nov 19 02:05:40 1997  Mumit Khan <khan@dhaka.xraylith.wisc.edu>
 
 	* DLD-FUNCTIONS/filter.cc: Don't include extern template decls if
 	CXX_NEW_FRIEND_TEMPLATE_DECL is defined.
 	* ov-cx-mat.cc: Likewise.
 	* ov-re-mat.cc: Likewise.
 	* ov-str-mat.cc: Likewise.
 
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -327,16 +327,17 @@ maximum_braindamage (void)
   bind_builtin_variable ("PS2", "");
   bind_builtin_variable ("beep_on_error", 1.0);
   bind_builtin_variable ("default_eval_print_flag", 0.0);
   bind_builtin_variable ("default_save_format", "mat-binary");
   bind_builtin_variable ("define_all_return_values", 1.0);
   bind_builtin_variable ("do_fortran_indexing", 1.0);
   bind_builtin_variable ("empty_list_elements_ok", 1.0);
   bind_builtin_variable ("fixed_point_format", 1.0);
+  bind_builtin_variable ("implicit_num_to_str_ok", 1.0);
   bind_builtin_variable ("implicit_str_to_num_ok", 1.0);
   bind_builtin_variable ("ok_to_lose_imaginary_part", 1.0);
   bind_builtin_variable ("page_screen_output", 0.0);
   bind_builtin_variable ("prefer_column_vectors", 0.0);
   bind_builtin_variable ("print_empty_dimensions", 0.0);
   bind_builtin_variable ("treat_neg_dim_as_zero", 1.0);
   bind_builtin_variable ("warn_function_name_clash", 0.0);
   bind_builtin_variable ("whitespace_in_literal_matrix", "traditional");
diff --git a/src/ov-ch-mat.h b/src/ov-ch-mat.h
--- a/src/ov-ch-mat.h
+++ b/src/ov-ch-mat.h
@@ -113,17 +113,17 @@ public:
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const { return matrix; }
 
   charMatrix char_matrix_value (bool = false) const { return matrix; }
 
   octave_value convert_to_str (void) const
-    { return octave_value (matrix); }
+    { return octave_value (matrix, true); }
 
   octave_value transpose (void) const
     { return octave_value (matrix.transpose ()); }
 
   octave_value hermitian (void) const
     { return octave_value (matrix.transpose ()); }
 
   void print (ostream& os, bool pr_as_read_syntax = false) const;
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1484,17 +1484,26 @@ make_plot_command (token *tok, plot_limi
   lexer_flags.in_plot_style = false;
   
   return new tree_plot_command (list, range, tok->pttype ());
 }
 
 static tree_expression *
 fold (tree_binary_expression *e)
 {
-  tree_expression *retval = 0;
+  tree_expression *retval = e;
+
+  unwind_protect::begin_frame ("fold");
+
+  unwind_protect_int (error_state);
+
+  unwind_protect_bool (buffer_error_messages);
+  buffer_error_messages = true;
+
+  unwind_protect::add (clear_global_error_variable, 0);
 
   tree_expression *op1 = e->lhs ();
   tree_expression *op2 = e->rhs ();
 
   if (op1->is_constant () && op2->is_constant ())
     {
       octave_value tmp = e->rvalue ();
 
@@ -1515,31 +1524,38 @@ fold (tree_binary_expression *e)
 	  tc_retval->stash_original_text (s);
 
 	  delete [] s;
 
 	  delete e;
 
 	  retval = tc_retval;
 	}
-      else
-	delete e;
     }
-  else
-    retval = e;
+
+  unwind_protect::run_frame ("fold");
 
   return retval;
 }
 
 // Finish building a range.
 
 static tree_expression *
 finish_colon_expression (tree_colon_expression *e)
 {
-  tree_expression *retval = 0;
+  tree_expression *retval = e;
+
+  unwind_protect::begin_frame ("finish_colon_expression");
+
+  unwind_protect_int (error_state);
+
+  unwind_protect_bool (buffer_error_messages);
+  buffer_error_messages = true;
+
+  unwind_protect::add (clear_global_error_variable, 0);
 
   tree_expression *base = e->base ();
   tree_expression *limit = e->limit ();
   tree_expression *incr = e->increment ();
 
   if (base)
     {
       if (limit)
@@ -1566,33 +1582,31 @@ finish_colon_expression (tree_colon_expr
 		  tc_retval->stash_original_text (s);
 
 		  delete [] s;
 
 		  delete e;
 
 		  retval = tc_retval;
 		}
-	      else
-		delete e;
 	    }
-	  else
-	    retval = e;
 	}
       else
 	{
 	  e->preserve_base ();
 	  delete e;
 
 	  // XXX FIXME XXX -- need to attempt constant folding here
 	  // too (we need a generic way to do that).
 	  retval = base;
 	}
     }
 
+  unwind_protect::run_frame ("finish_colon_expression");
+
   return retval;
 }
 
 // Make a constant.
 
 static tree_constant *
 make_constant (int op, token *tok_val)
 {
@@ -1798,16 +1812,18 @@ make_prefix_op (int op, tree_expression 
     default:
       panic_impossible ();
       break;
     }
 
   int l = tok_val->line ();
   int c = tok_val->column ();
 
+  // XXX FIXME XXX -- what about constant folding here?
+
   return new tree_prefix_expression (t, op1, l, c);
 }
 
 // Build a postfix expression.
 
 static tree_expression *
 make_postfix_op (int op, tree_expression *op1, token *tok_val)
 {
@@ -1834,16 +1850,18 @@ make_postfix_op (int op, tree_expression
     default:
       panic_impossible ();
       break;
     }
 
   int l = tok_val->line ();
   int c = tok_val->column ();
 
+  // XXX FIXME XXX -- what about constant folding here?
+
   return new tree_postfix_expression (t, op1, l, c);
 }
 
 // Build an unwind-protect command.
 
 static tree_command *
 make_unwind_command (token *unwind_tok, tree_statement_list *body,
 		     tree_statement_list *cleanup, token *end_tok)
@@ -2315,17 +2333,26 @@ make_decl_command (int tok, token *tok_v
   return retval;
 }
 
 // Finish building a matrix list.
 
 static tree_expression *
 finish_matrix (tree_matrix *m)
 {
-  tree_expression *retval = 0;
+  tree_expression *retval = m;
+
+  unwind_protect::begin_frame ("finish_matrix");
+
+  unwind_protect_int (error_state);
+
+  unwind_protect_bool (buffer_error_messages);
+  buffer_error_messages = true;
+
+  unwind_protect::add (clear_global_error_variable, 0);
 
   if (m->all_elements_are_constant ())
     {
       octave_value tmp = m->rvalue ();
 
       if (! error_state)
 	{
 	  tree_constant *tc_retval = new tree_constant (tmp);
@@ -2343,21 +2370,19 @@ finish_matrix (tree_matrix *m)
 	  tc_retval->stash_original_text (s);
 
 	  delete [] s;
 
 	  delete m;
 
 	  retval = tc_retval;
 	}
-      else
-	delete m;
     }
-  else
-    retval = m;
+
+  unwind_protect::run_frame ("finish_matrix");
 
   return retval;
 }
 
 static void
 maybe_warn_missing_semi (tree_statement_list *t)
 {
   if (lexer_flags.defining_func && Vwarn_missing_semicolon)
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -43,16 +43,19 @@ Software Foundation, 59 Temple Place - S
 #include "variables.h"
 
 // Are empty elements in a matrix list ok?  For example, is the empty
 // matrix in an expression like `[[], 1]' ok?  A positive value means
 // yes.  A negative value means yes, but print a warning message.
 // Zero means it should be considered an error.
 static int Vempty_list_elements_ok;
 
+// Should `[97, 98, 99, "123"]' be a string?
+static bool Vimplicit_num_to_str_ok;
+
 // The character to fill with when creating string arrays.
 static char Vstring_fill_char;
 
 // General matrices.  This list type is much more work to handle than
 // constant matrices, but it allows us to construct matrices from
 // other matrices, variables, and functions.
 
 // But first, some internal classes that make our job much easier.
@@ -64,31 +67,34 @@ private:
 
   class
   tm_row_const_rep : public SLList<octave_value>
   {
   public:
 
     tm_row_const_rep (void)
       : SLList<octave_value> (), count (1), nr (0), nc (0),
-	all_str (false), is_cmplx (false), all_mt (true), ok (false) { }
+	all_str (false), some_str (false), is_cmplx (false),
+	all_mt (true), ok (false) { }
 
     tm_row_const_rep (const tree_argument_list& row)
       : SLList<octave_value> (), count (1), nr (0), nc (0),
-	all_str (false), is_cmplx (false), all_mt (true), ok (false)
-        { init (row); }
+	all_str (false), some_str (false), is_cmplx (false),
+	all_mt (true), ok (false)
+    { init (row); }
 
     ~tm_row_const_rep (void) { }
 
     int count;
 
     int nr;
     int nc;
 
     bool all_str;
+    bool some_str;
     bool is_cmplx;
     bool all_mt;
 
     bool ok;
 
     void init (const tree_argument_list&);
 
   private:
@@ -138,16 +144,17 @@ public:
     if (rep && --rep->count == 0)
       delete rep;
   }
 
   int rows (void) { return rep->nr; }
   int cols (void) { return rep->nc; }
 
   bool all_strings_p (void) const { return rep->all_str; }
+  bool some_strings_p (void) const { return rep->some_str; }
   bool complex_p (void) const { return rep->is_cmplx; }
   bool all_empty_p (void) const { return rep->all_mt; }
 
   octave_value& operator () (Pix p) { return rep->operator () (p); }
 
   const octave_value& operator () (Pix p) const
     { return rep->operator () (p); }
 
@@ -217,16 +224,19 @@ tm_row_const::tm_row_const_rep::init (co
 	      nc += this_elt_nc;
 
 	      append (tmp);
 	    }
 
 	  if (all_str && ! tmp.is_string ())
 	    all_str = false;
 
+	  if (! some_str && tmp.is_string ())
+	    some_str = true;
+
 	  if (! is_cmplx && tmp.is_complex_type ())
 	    is_cmplx = true;
 	}
     }
 
   ok = ! error_state;
 }
 
@@ -257,38 +267,41 @@ template class SLNode<tm_row_const>;
 template class SLList<tm_row_const>;
 
 class
 tm_const : public SLList<tm_row_const>
 {
 public:
 
   tm_const (const tree_matrix& tm)
-    : SLList<tm_row_const> (), nr (0), nc (0), all_str (false),
-      is_cmplx (false), all_mt (true), ok (false)
+    : SLList<tm_row_const> (), nr (0), nc (0),
+      all_str (false), some_str (false), is_cmplx (false),
+      all_mt (true), ok (false)
       { init (tm); }
 
   ~tm_const (void) { }
 
   int rows (void) const { return nr; }
   int cols (void) const { return nc; }
 
   bool all_strings_p (void) const { return all_str; }
+  bool some_strings_p (void) const { return some_str; }
   bool complex_p (void) const { return is_cmplx; }
   bool all_empty_p (void) const { return all_mt; }
 
   operator void* () const
     { return ok ? static_cast<void *> (-1) : static_cast<void *> (0); }
 
 private:
 
   int nr;
   int nc;
 
   bool all_str;
+  bool some_str;
   bool is_cmplx;
   bool all_mt;
 
   bool ok;
 
   tm_const (void);
 
   tm_const (const tm_const&);
@@ -316,16 +329,19 @@ tm_const::init (const tree_matrix& tm)
 
       tm_row_const tmp (*elt);
 
       if (tmp)
 	{
 	  if (all_str && ! tmp.all_strings_p ())
 	    all_str = false;
 
+	  if (! some_str && tmp.some_strings_p ())
+	    some_str = true;
+
 	  if (! is_cmplx && tmp.complex_p ())
 	    is_cmplx = true;
 
 	  if (all_mt && ! tmp.all_empty_p ())
 	    all_mt = false;
 
 	  append (tmp);
 	}
@@ -424,35 +440,41 @@ tree_matrix::rvalue (int nargout)
 octave_value
 tree_matrix::rvalue (void)
 {
   octave_value retval;
 
   tm_const tmp (*this);
 
   bool all_strings_p = false;
+  bool some_strings_p = false;
   bool all_empty_p = false;
 
+  bool frc_str_conv = false;
+
   if (tmp)
     {
       int nr = tmp.rows ();
       int nc = tmp.cols ();
 
       Matrix m;
       ComplexMatrix cm;
       charMatrix chm;
 
       // Now, extract the values from the individual elements and
       // insert them in the result matrix.
 
       bool found_complex = tmp.complex_p ();
 
       all_strings_p = tmp.all_strings_p ();
+      some_strings_p = tmp.some_strings_p ();
       all_empty_p = tmp.all_empty_p ();
 
+      frc_str_conv = Vimplicit_num_to_str_ok && some_strings_p;
+
       if (all_strings_p)
 	chm.resize (nr, nc, Vstring_fill_char);
       else if (found_complex)
 	cm.resize (nr, nc, 0.0);
       else
 	m.resize (nr, nc, 0.0);
 
       int put_row = 0;
@@ -495,17 +517,17 @@ tree_matrix::rvalue (void)
 
 		      if (error_state)
 			goto done;
 
 		      chm.insert (chm_elt, put_row, put_col);
 		    }
 		  else
 		    {
-		      Matrix m_elt = elt.matrix_value ();
+		      Matrix m_elt = elt.matrix_value (frc_str_conv);
 
 		      if (error_state)
 			goto done;
 
 		      m.insert (m_elt, put_row, put_col);
 		    }
 		}
 
@@ -520,22 +542,27 @@ tree_matrix::rvalue (void)
 	    }
 
 	  put_row += row.rows ();
 	}
     }
 
 done:
 
-  if (! error_state && retval.is_undefined () && all_empty_p)
+  if (! error_state)
     {
-      if (all_strings_p)
-	retval = "";
-      else
-	retval = Matrix ();
+      if (retval.is_undefined () && all_empty_p)
+	{
+	  if (all_strings_p)
+	    retval = "";
+	  else
+	    retval = Matrix ();
+	}
+      else if (frc_str_conv && ! retval.is_string ())
+	retval = retval.convert_to_str ();
     }
 
   return retval;
 }
 
 void
 tree_matrix::accept (tree_walker& tw)
 {
@@ -546,16 +573,24 @@ static int
 empty_list_elements_ok (void)
 {
   Vempty_list_elements_ok = check_preference ("empty_list_elements_ok");
 
   return 0;
 }
 
 static int
+implicit_num_to_str_ok (void)
+{
+  Vimplicit_num_to_str_ok = check_preference ("implicit_num_to_str_ok");
+
+  return 0;
+}
+
+static int
 string_fill_char (void)
 {
   int status = 0;
 
   string s = builtin_string_variable ("string_fill_char");
 
   switch (s.length ())
     {
@@ -577,16 +612,19 @@ string_fill_char (void)
 }
 
 void
 symbols_of_pt_mat (void)
 {
   DEFVAR (empty_list_elements_ok, "warn", 0, empty_list_elements_ok,
     "ignore the empty element in expressions like `a = [[], 1]'");
 
+  DEFVAR (implicit_num_to_str_ok, 0.0, 0, implicit_num_to_str_ok,
+    "make the result of things like `[97, 98, 99, \"123\"]' be a string");
+
   DEFVAR (string_fill_char, " ", 0, string_fill_char,
     "the character to fill with when creating string arrays.");
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
