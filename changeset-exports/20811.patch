# HG changeset patch
# User Rik <rik@octave.org>
# Date 1449357049 28800
#      Sat Dec 05 15:10:49 2015 -0800
# Node ID 5979314bb15aa73133e19114ca01abbdc5cf7826
# Parent  dc90391637607dfed87849dabd7273a76a3be2aa
Fix BIST tests for rows.

* data.cc (Frows): Fix BIST tests.
* data.cc (do_accumarray_minmax_fun): Fix typos in error() message.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -1909,19 +1909,19 @@ do_class_concat (const octave_value_list
   return retval;
 }
 
 static octave_value
 do_cat (const octave_value_list& xargs, int dim, std::string fname)
 {
   octave_value retval;
 
-  // We may need to convert elements of the list to cells, so make a
-  // copy.  This should be efficient, it is done mostly by incrementing
-  // reference counts.
+  // We may need to convert elements of the list to cells, so make a copy.
+  // This should be efficient, it is done mostly by incrementing reference
+  // counts.
   octave_value_list args = xargs;
 
   int n_args = args.length ();
 
   if (n_args == 0)
     retval = Matrix ();
   else if (n_args == 1)
     retval = args(0);
@@ -2901,34 +2901,34 @@ Return the number of rows of @var{a}.\n\
     print_usage ();
 
   return octave_value (args(0).rows ());
 }
 
 /*
 %!assert (rows (ones (2,5)), 2)
 %!assert (rows (ones (5,2)), 5)
-%!assert (rows (ones (5,4,3,2)), 2)
+%!assert (rows (ones (5,4,3,2)), 5)
 %!assert (rows (ones (3,4,5,2)), 3)
 
 %!assert (rows (cell (2,5)), 2)
 %!assert (rows (cell (5,2)), 5)
-%!assert (rows (cell (5,4,3,2)), 2)
+%!assert (rows (cell (5,4,3,2)), 5)
 %!assert (rows (cell (3,4,5,2)), 3)
 
 %!test
 %! x(2,5,3).a = 1;
 %! assert (rows (x), 2);
 %! y(5,4,3).b = 2;
 %! assert (rows (y), 5);
 
 %!assert (rows ("Hello World"), 1)
 
 %!assert (rows ([]), 0)
-%!assert (rows (zeros (2,0), 2)
+%!assert (rows (zeros (2,0), 2))
 
 ## Test input validation
 %!error rows ()
 %!error rows (1,2)
 */
 
 DEFUN (columns, args, ,
        "-*- texinfo -*-\n\
@@ -7117,17 +7117,17 @@ do_accumarray_minmax_fun (const octave_v
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin < 3 && nargin > 4)
     print_usage ();
 
   if (! args(0).is_numeric_type ())
-    error ("addumarray: first agument must be numeric");
+    error ("accumarray: first argument must be numeric");
 
   try
     {
       idx_vector idx = args(0).index_vector ();
       octave_idx_type n = -1;
       if (nargin == 4)
         n = args(3).idx_type_value (true);
 
