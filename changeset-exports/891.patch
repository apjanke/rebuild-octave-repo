# HG changeset patch
# User jwe
# Date 784328408 0
#      Tue Nov 08 21:00:08 1994 +0000
# Node ID 9e6bdfdfcf8667068227faa556d7bee30ec2b634
# Parent  2bd199f3f86581540aa159039ad06ec6bae9193c
[project @ 1994-11-08 20:59:39 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2478,38 +2478,64 @@ ComplexMatrix::diag (int k) const
 	}
     }
   else
     cerr << "diag: requested diagonal out of range\n";
 
   return d;
 }
 
+// XXX FIXME XXX -- it would be nice to share some code among all the
+// min/max functions below.  It would also be nice to combine the
+// min/max and min_loc/max_loc functions.
+
 ComplexColumnVector
 ComplexMatrix::row_min (void) const
 {
   ComplexColumnVector result;
 
   int nr = rows ();
   int nc = cols ();
   if (nr > 0 && nc > 0)
     {
       result.resize (nr);
 
       for (int i = 0; i < nr; i++)
 	{
-	  Complex res = elem (i, 0);
-	  double absres = abs (res);
-	  for (int j = 1; j < nc; j++)
-	    if (abs (elem (i, j)) < absres)
+	  int row_is_real_only = 1;
+	  for (int j = 0; j < nc; j++)
+	    if (imag (elem (i, j)) != 0.0)
 	      {
-		res = elem (i, j);
-		absres = abs (res);
+		row_is_real_only = 0;
+		break;
 	      }
-	  result.elem (i) = res;
+	      
+	  if (row_is_real_only)
+	    {
+	      double res = real (elem (i, 0));
+	      for (int j = 1; j < nc; j++)
+		{
+		  double tmp = real (elem (i, j));
+		  if (tmp < res)
+		    res = tmp;
+		}
+	      result.elem (i) = res;
+	    }
+	  else
+	    {
+	      Complex res = elem (i, 0);
+	      double absres = abs (res);
+	      for (int j = 1; j < nc; j++)
+		if (abs (elem (i, j)) < absres)
+		  {
+		    res = elem (i, j);
+		    absres = abs (res);
+		  }
+	      result.elem (i) = res;
+	    }
 	}
     }
 
   return result;
 }
 
 ComplexColumnVector
 ComplexMatrix::row_min_loc (void) const
@@ -2520,25 +2546,46 @@ ComplexMatrix::row_min_loc (void) const
   int nc = cols ();
 
   if (nr > 0 && nc > 0)
     {
       result.resize (nr);
 
       for (int i = 0; i < nr; i++)
         {
-          Complex res = 0;
-          double absres = abs (elem (i, 0));
-          for (int j = 0; j < nc; j++)
-            if (abs (elem (i, j)) < absres)
-              {
-                res = j;
-                absres = abs (elem (i, j));
-              }
-          result.elem (i) = res + 1;
+	  int column_is_real_only = 1;
+	  for (int j = 0; j < nc; j++)
+	    if (imag (elem (i, j)) != 0.0)
+	      {
+		column_is_real_only = 0;
+		break;
+	      }
+	      
+	  if (column_is_real_only)
+	    {
+	      double res = 0;
+	      double tmp = real (elem (i, 0));
+	      for (int j = 1; j < nc; j++)
+		if (real (elem (i, j)) < tmp)
+		  res = j;
+
+	      result.elem (i) = res + 1;
+	    }
+	  else
+	    {
+	      Complex res = 0;
+	      double absres = abs (elem (i, 0));
+	      for (int j = 1; j < nc; j++)
+		if (abs (elem (i, j)) < absres)
+		  {
+		    res = j;
+		    absres = abs (elem (i, j));
+		  }
+	      result.elem (i) = res + 1;
+	    }
         }
     }
 
   return result;
 }
 
 ComplexColumnVector
 ComplexMatrix::row_max (void) const
@@ -2549,25 +2596,47 @@ ComplexMatrix::row_max (void) const
   int nc = cols ();
 
   if (nr > 0 && nc > 0)
     {
       result.resize (nr);
 
       for (int i = 0; i < nr; i++)
 	{
-	  Complex res = elem (i, 0);
-	  double absres = abs (res);
-	  for (int j = 1; j < nc; j++)
-	    if (abs (elem (i, j)) > absres)
+	  int row_is_real_only = 1;
+	  for (int j = 0; j < nc; j++)
+	    if (imag (elem (i, j)) != 0.0)
 	      {
-		res = elem (i, j);
-		absres = abs (res);
+		row_is_real_only = 0;
+		break;
 	      }
-	  result.elem (i) = res;
+	      
+	  if (row_is_real_only)
+	    {
+	      double res = real (elem (i, 0));
+	      for (int j = 1; j < nc; j++)
+		{
+		  double tmp = real (elem (i, j));
+		  if (tmp > res)
+		    res = tmp;
+		}
+	      result.elem (i) = res;
+	    }
+	  else
+	    {
+	      Complex res = elem (i, 0);
+	      double absres = abs (res);
+	      for (int j = 1; j < nc; j++)
+		if (abs (elem (i, j)) > absres)
+		  {
+		    res = elem (i, j);
+		    absres = abs (res);
+		  }
+	      result.elem (i) = res;
+	    }
 	}
     }
 
   return result;
 }
 
 ComplexColumnVector
 ComplexMatrix::row_max_loc (void) const
@@ -2578,25 +2647,46 @@ ComplexMatrix::row_max_loc (void) const
   int nc = cols ();
 
   if (nr > 0 && nc > 0)
     {
       result.resize (nr);
 
       for (int i = 0; i < nr; i++)
         {
-          Complex res = 0;
-          double absres = abs (elem (i, 0));
-          for (int j = 0; j < nc; j++)
-            if (abs (elem (i, j)) > absres)
-              {
-                res = j;
-                absres = abs (elem (i, j));
-              }
-          result.elem (i) = res + 1;
+	  int column_is_real_only = 1;
+	  for (int j = 0; j < nc; j++)
+	    if (imag (elem (i, j)) != 0.0)
+	      {
+		column_is_real_only = 0;
+		break;
+	      }
+	      
+	  if (column_is_real_only)
+	    {
+	      double res = 0;
+	      double tmp = real (elem (i, 0));
+	      for (int j = 1; j < nc; j++)
+		if (real (elem (i, j)) > tmp)
+		  res = j;
+
+	      result.elem (i) = res + 1;
+	    }
+	  else
+	    {
+	      Complex res = 0;
+	      double absres = abs (elem (i, 0));
+	      for (int j = 1; j < nc; j++)
+		if (abs (elem (i, j)) > absres)
+		  {
+		    res = j;
+		    absres = abs (elem (i, j));
+		  }
+	      result.elem (i) = res + 1;
+	    }
         }
     }
 
   return result;
 }
 
 ComplexRowVector
 ComplexMatrix::column_min (void) const
@@ -2607,25 +2697,47 @@ ComplexMatrix::column_min (void) const
   int nc = cols ();
 
   if (nr > 0 && nc > 0)
     {
       result.resize (nc);
 
       for (int j = 0; j < nc; j++)
 	{
-	  Complex res = elem (0, j);
-	  double absres = abs (res);
-	  for (int i = 1; i < nr; i++)
-	    if (abs (elem (i, j)) < absres)
+	  int column_is_real_only = 1;
+	  for (int i = 0; i < nr; i++)
+	    if (imag (elem (i, j)) != 0.0)
 	      {
-		res = elem (i, j);
-		absres = abs (res);
+		column_is_real_only = 0;
+		break;
 	      }
-	  result.elem (j) = res;
+	      
+	  if (column_is_real_only)
+	    {
+	      double res = real (elem (0, j));
+	      for (int i = 1; i < nr; i++)
+		{
+		  double tmp = real (elem (i, j));
+		  if (tmp < res)
+		    res = tmp;
+		}
+	      result.elem (j) = res;
+	    }
+	  else
+	    {
+	      Complex res = elem (0, j);
+	      double absres = abs (res);
+	      for (int i = 1; i < nr; i++)
+		if (abs (elem (i, j)) < absres)
+		  {
+		    res = elem (i, j);
+		    absres = abs (res);
+		  }
+	      result.elem (j) = res;
+	    }
 	}
     }
 
   return result;
 }
 
 ComplexRowVector
 ComplexMatrix::column_min_loc (void) const
@@ -2636,25 +2748,46 @@ ComplexMatrix::column_min_loc (void) con
   int nc = cols ();
 
   if (nr > 0 && nc > 0)
     {
       result.resize (nc);
 
       for (int j = 0; j < nc; j++)
         {
-          Complex res = 0;
-          double absres = abs (elem (0, j));
-          for (int i = 0; i < nr; i++)
-            if (abs (elem (i, j)) < absres)
-              {
-                res = i;
-                absres = abs (elem (i, j));
-              }
-          result.elem (j) = res + 1;
+	  int column_is_real_only = 1;
+	  for (int i = 0; i < nr; i++)
+	    if (imag (elem (i, j)) != 0.0)
+	      {
+		column_is_real_only = 0;
+		break;
+	      }
+	      
+	  if (column_is_real_only)
+	    {
+	      double res = 0;
+	      double tmp = real (elem (i, j));
+	      for (int i = 1; i < nr; i++)
+		if (real (elem (i, j)) < tmp)
+		  res = i;
+
+	      result.elem (j) = res + 1;
+	    }
+	  else
+	    {
+	      Complex res = 0;
+	      double absres = abs (elem (0, j));
+	      for (int i = 1; i < nr; i++)
+		if (abs (elem (i, j)) < absres)
+		  {
+		    res = i;
+		    absres = abs (elem (i, j));
+		  }
+	      result.elem (j) = res + 1;
+	    }
         }
     }
 
   return result;
 }
 
 ComplexRowVector
 ComplexMatrix::column_max (void) const
@@ -2665,25 +2798,47 @@ ComplexMatrix::column_max (void) const
   int nc = cols ();
 
   if (nr > 0 && nc > 0)
     {
       result.resize (nc);
 
       for (int j = 0; j < nc; j++)
 	{
-	  Complex res = elem (0, j);
-	  double absres = abs (res);
-	  for (int i = 1; i < nr; i++)
-	    if (abs (elem (i, j)) > absres)
+	  int column_is_real_only = 1;
+	  for (int i = 0; i < nr; i++)
+	    if (imag (elem (i, j)) != 0.0)
 	      {
-		res = elem (i, j);
-		absres = abs (res);
+		column_is_real_only = 0;
+		break;
 	      }
-	  result.elem (j) = res;
+	      
+	  if (column_is_real_only)
+	    {
+	      double res = real (elem (0, j));
+	      for (int i = 1; i < nr; i++)
+		{
+		  double tmp = real (elem (i, j));
+		  if (tmp > res)
+		    res = tmp;
+		}
+	      result.elem (j) = res;
+	    }
+	  else
+	    {
+	      Complex res = elem (0, j);
+	      double absres = abs (res);
+	      for (int i = 1; i < nr; i++)
+		if (abs (elem (i, j)) > absres)
+		  {
+		    res = elem (i, j);
+		    absres = abs (res);
+		  }
+	      result.elem (j) = res;
+	    }
 	}
     }
 
   return result;
 }
 
 ComplexRowVector
 ComplexMatrix::column_max_loc (void) const
@@ -2694,25 +2849,46 @@ ComplexMatrix::column_max_loc (void) con
   int nc = cols ();
 
   if (nr > 0 && nc > 0)
     {
       result.resize (nc);
 
       for (int j = 0; j < nc; j++)
         {
-          Complex res = 0;
-          double absres = abs (elem (0, j));
-          for (int i = 0; i < nr; i++)
-            if (abs (elem (i, j)) > absres)
-              {
-                res = i;
-                absres = abs (elem (i, j));
-              }
-          result.elem (j) = res + 1;
+	  int column_is_real_only = 1;
+	  for (int i = 0; i < nr; i++)
+	    if (imag (elem (i, j)) != 0.0)
+	      {
+		column_is_real_only = 0;
+		break;
+	      }
+	      
+	  if (column_is_real_only)
+	    {
+	      double res = 0;
+	      double tmp = real (elem (i, j));
+	      for (int i = 1; i < nr; i++)
+		if (real (elem (i, j)) > tmp)
+		  res = i;
+
+	      result.elem (j) = res + 1;
+	    }
+	  else
+	    {
+	      Complex res = 0;
+	      double absres = abs (elem (0, j));
+	      for (int i = 1; i < nr; i++)
+		if (abs (elem (i, j)) > absres)
+		  {
+		    res = i;
+		    absres = abs (elem (i, j));
+		  }
+	      result.elem (j) = res + 1;
+	    }
         }
     }
 
   return result;
 }
 
 // i/o
 
diff --git a/src/minmax.cc b/src/minmax.cc
--- a/src/minmax.cc
+++ b/src/minmax.cc
@@ -36,18 +36,18 @@ Software Foundation, 675 Mass Ave, Cambr
 #ifndef MAX
 #define MAX(a,b) ((a) > (b) ? (a) : (b))
 #endif
 
 #ifndef MIN
 #define MIN(a,b) ((a) < (b) ? (a) : (b))
 #endif
 
-// This file could probably be condensed quite a bit by an appropriate
-// amount of C preprocessor abuse.
+// XXX FIXME XXX -- it would be nice to share code among the min/max
+// functions below.
 
 static Matrix
 min (double d, const Matrix& m)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
   Matrix result (nr, nc);
@@ -86,24 +86,26 @@ min (const Complex& c, const ComplexMatr
   int nr = m.rows ();
   int nc = m.columns ();
 
   ComplexMatrix result (nr, nc);
 
   double abs_c = abs (c);
 
   for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      {
-	double abs_m_elem = abs (m.elem (i, j));
-	if (abs_c < abs_m_elem)
-	  result.elem (i, j) = c;
-	else
-	  result.elem (i, j) = m.elem (i, j);
-      }
+    {
+      for (int i = 0; i < nr; i++)
+	{
+	  double abs_m_elem = abs (m.elem (i, j));
+	  if (abs_c < abs_m_elem)
+	    result.elem (i, j) = c;
+	  else
+	    result.elem (i, j) = m.elem (i, j);
+	}
+    }
 
   return result;
 }
 
 static ComplexMatrix
 min (const ComplexMatrix& m, const Complex& c)
 {
   int nr = m.rows ();
@@ -159,25 +161,50 @@ min (const ComplexMatrix& a, const Compl
     {
       error ("two-arg min expecting args of same size");
       return ComplexMatrix ();
     }
 
   ComplexMatrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      {
-	double abs_a_elem = abs (a.elem (i, j));
-	double abs_b_elem = abs (b.elem (i, j));
-	if (abs_a_elem < abs_b_elem)
-	  result.elem (i, j) = a.elem (i, j);
-	else
-	  result.elem (i, j) = b.elem (i, j);
-      }
+    {
+      int columns_are_real_only = 1;
+      for (int i = 0; i < nr; i++)
+	if (imag (a.elem (i, j)) != 0.0 && imag (b.elem (i, j)) != 0.0)
+	  {
+	    columns_are_real_only = 0;
+	    break;
+	  }
+
+      if (columns_are_real_only)
+	{
+	  for (int i = 0; i < nr; i++)
+	    {
+	      double a_elem = real (a.elem (i, j));
+	      double b_elem = real (b.elem (i, j));
+	      if (a_elem < b_elem)
+		result.elem (i, j) = a_elem;
+	      else
+		result.elem (i, j) = b_elem;
+	    }
+	}
+      else
+	{
+	  for (int i = 0; i < nr; i++)
+	    {
+	      double abs_a_elem = abs (a.elem (i, j));
+	      double abs_b_elem = abs (b.elem (i, j));
+	      if (abs_a_elem < abs_b_elem)
+		result.elem (i, j) = a.elem (i, j);
+	      else
+		result.elem (i, j) = b.elem (i, j);
+	    }
+	}
+    }
 
   return result;
 }
 
 static Matrix
 max (double d, const Matrix& m)
 {
   int nr = m.rows ();
@@ -292,25 +319,50 @@ max (const ComplexMatrix& a, const Compl
     {
       error ("two-arg max expecting args of same size");
       return ComplexMatrix ();
     }
 
   ComplexMatrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      {
-	double abs_a_elem = abs (a.elem (i, j));
-	double abs_b_elem = abs (b.elem (i, j));
-	if (abs_a_elem > abs_b_elem)
-	  result.elem (i, j) = a.elem (i, j);
-	else
-	  result.elem (i, j) = b.elem (i, j);
-      }
+    {
+      int columns_are_real_only = 1;
+      for (int i = 0; i < nr; i++)
+	if (imag (a.elem (i, j)) != 0.0 && imag (b.elem (i, j)) != 0.0)
+	  {
+	    columns_are_real_only = 0;
+	    break;
+	  }
+
+      if (columns_are_real_only)
+	{
+	  for (int i = 0; i < nr; i++)
+	    {
+	      double a_elem = real (a.elem (i, j));
+	      double b_elem = real (b.elem (i, j));
+	      if (a_elem > b_elem)
+		result.elem (i, j) = a_elem;
+	      else
+		result.elem (i, j) = b_elem;
+	    }
+	}
+      else
+	{
+	  for (int i = 0; i < nr; i++)
+	    {
+	      double abs_a_elem = abs (a.elem (i, j));
+	      double abs_b_elem = abs (b.elem (i, j));
+	      if (abs_a_elem > abs_b_elem)
+		result.elem (i, j) = a.elem (i, j);
+	      else
+		result.elem (i, j) = b.elem (i, j);
+	    }
+	}
+    }
 
   return result;
 }
 
 DEFUN_DLD_BUILTIN ("min", Fmin, Smin, 3, 2,
   "min (X): minimum value(s) of a vector (matrix)")
 {
   Octave_object retval;
