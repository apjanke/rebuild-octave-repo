# HG changeset patch
# User Julien Bect <jbect@users.sourceforge.net>
# Date 1546441726 -3600
#      Wed Jan 02 16:08:46 2019 +0100
# Branch stable
# Node ID ea25fc64c2751b2641119033f983e175c487a819
# Parent  7a77eb39c7f0ad8b342a4c99060a8fd383a75c65
jit: configure: Check if llvm::createAlwaysInlinerPass exists

* m4/acinclude.m4: New macro to check if llvm::createAlwaysInlinerPass exists.
* configure.ac: Call the new macro.
* libinterp/parse-tree/pt-jit.cc: Skip pass if it does not exist.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1439,16 +1439,17 @@ if test $ENABLE_JIT = yes; then
     AC_CHECK_HEADERS([llvm/Transforms/Scalar/GVN.h])
 
     OCTAVE_LLVM_FUNCTION_ADDATTRIBUTE_API
     OCTAVE_LLVM_FUNCTION_ADDFNATTR_API
     OCTAVE_LLVM_CALLINST_ADDATTRIBUTE_API
     OCTAVE_LLVM_RAW_FD_OSTREAM_API
     OCTAVE_LLVM_LEGACY_PASSMANAGER_API
     OCTAVE_LLVM_IRBUILDER_API
+    OCTAVE_LLVM_HAS_CREATEALWAYSINLINERPASS
     AC_LANG_POP(C++)
     CPPFLAGS="$save_CPPFLAGS"
     LDFLAGS="$save_LDFLAGS"
   fi
 
   if test -z "$warn_llvm"; then
     AC_DEFINE(HAVE_LLVM, 1, [Define to 1 if LLVM is available.])
   else
diff --git a/libinterp/parse-tree/pt-jit.cc b/libinterp/parse-tree/pt-jit.cc
--- a/libinterp/parse-tree/pt-jit.cc
+++ b/libinterp/parse-tree/pt-jit.cc
@@ -2416,18 +2416,22 @@ namespace octave
     if (Vdebug_jit)
       llvm::verifyModule (*m_module);
 
     // DOCUMENT-ME: Why do we need two separate pass managers?
 
     jit::PassManager *module_pass_manager = new jit::PassManager ();
     jit::FunctionPassManager *pass_manager = new jit::FunctionPassManager (m_module);
 
+#if defined (LLVM_HAS_CREATEALWAYSINLINERPASS)
+    // This pass has been removed from LLVM's C++ API after 3.9.0
+    // FIXME: Provide a meaningful replacement instead of simply skipping it?
     module_pass_manager->add (llvm::createAlwaysInlinerPass ());
-
+#endif
+    
     // In 3.6, a pass was inserted in the pipeline to make the DataLayout accessible:
     //    MyPassManager->add(new DataLayoutPass(MyTargetMachine->getDataLayout()));
     // In 3.7, you donâ€™t need a pass, you set the DataLayout on the Module:
     //    MyModule->setDataLayout(MyTargetMachine->createDataLayout());
     //
     // FIXME: autoconf to support <= 3.6
     //
     // #if defined (HAVE_LLVM_DATALAYOUT)
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -2783,16 +2783,39 @@ AC_DEFUN([OCTAVE_LLVM_IRBUILDER_API], [
     AC_LANG_POP(C++)
   ])
   if test $octave_cv_llvm_irbuilder_has_two_template_args = yes; then
     AC_DEFINE(LLVM_IRBUILDER_HAS_TWO_TEMPLATE_ARGS, 1,
       [Define to 1 if llvm::IRBuilder has two template arguments.])
   fi
 ])
 dnl
+dnl Check for llvm::createAlwaysInlinerPass
+dnl
+AC_DEFUN([OCTAVE_LLVM_HAS_CREATEALWAYSINLINERPASS], [
+  AC_CACHE_CHECK([check if llvm::createAlwaysInlinerPass exists],
+    [octave_cv_llvm_has_createalwaysinlinerpass],
+    [AC_LANG_PUSH(C++)
+      AC_COMPILE_IFELSE(
+        [AC_LANG_PROGRAM([[
+          #include <llvm/Transforms/IPO.h>
+          ]], [[
+          llvm::Pass *p;
+          p = llvm::createAlwaysInlinerPass ();
+        ]])],
+        octave_cv_llvm_has_createalwaysinlinerpass=yes,
+        octave_cv_llvm_has_createalwaysinlinerpass=no)
+    AC_LANG_POP(C++)
+  ])
+  if test $octave_cv_llvm_has_createalwaysinlinerpass = yes; then
+    AC_DEFINE(LLVM_HAS_CREATEALWAYSINLINERPASS, 1,
+      [Define to 1 if llvm::createAlwaysInlinerPass exists.])
+  fi
+])
+dnl
 dnl OCTAVE_CHECK_FORTRAN_SYMBOL_AND_CALLING_CONVENTIONS
 dnl
 dnl Set variables related to Fortran symbol names (append underscore,
 dnl use uppercase names, etc.) and calling convention (mostly used for
 dnl determining how character strings are passed).
 dnl
 AC_DEFUN([OCTAVE_CHECK_FORTRAN_SYMBOL_AND_CALLING_CONVENTIONS], [
   F77_TOLOWER=yes
