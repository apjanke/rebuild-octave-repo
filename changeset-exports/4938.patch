# HG changeset patch
# User jwe
# Date 1092082919 0
#      Mon Aug 09 20:21:59 2004 +0000
# Node ID 703d97b8950757d6a846adb4f13c9deda8a2ec21
# Parent  4cf211c831585ee9dd964f1887655b65a87e1724
[project @ 2004-08-09 20:21:59 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2004-08-09  John W. Eaton  <jwe@octave.org>
+
+	* idx-vector.h (idx_vector::idx_vector_rep::tree_to_mat_idx
+	(const octave_int<U>&)): New member function. 
+	(idx_vector::idx_vector_rep::tree_to_mat_idx (double, bool&),
+	idx_vector::idx_vector_rep::tree_to_mat_idx (int)):
+	Now member functions instead of static in idx-vector.cc.
+	(idx_vector::idx_vector_rep::idx_vector_rep (const octave_int<U>&),
+	idx_vector::idx_vector_rep::idx_vector_rep (const intNDArray<U>&)):
+	New template constructors.
+
 2004-08-05  John W. Eaton  <jwe@octave.org>
 
 	* EIG.cc (EIG::init): Add volatile qualifier to nvr decl.
 
 	* intNDArray.cc (intNDArray<T>::operator !, intNDArray<T>::all,
 	intNDArray<T>::any): Sprinkle with this-> as needed.
 	* mx-inlines.cc (MX_ND_REDUCTION, MX_ND_CUMULATIVE_OP): Likewise.
 
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -54,18 +54,18 @@ IDX_VEC_REP::idx_vector_rep (const IDX_V
   if (len > 0)
     {
       data = new int [len];
       for (int i = 0; i < len; i++)
 	data[i] = a.data[i];
     }
 }
 
-static inline int
-tree_to_mat_idx (double x, bool& conversion_error)
+int
+IDX_VEC_REP::tree_to_mat_idx (double x, bool& conversion_error)
 {
   int retval = -1;
 
   conversion_error = false;
 
   if (D_NINT (x) != x)
     {
       (*current_liboctave_error_handler)
@@ -74,22 +74,16 @@ tree_to_mat_idx (double x, bool& convers
       conversion_error = true;
     }
   else
     retval = static_cast<int> (x - 1);
 
   return retval;
 }
 
-static inline int
-tree_to_mat_idx (int i)
-{
-  return i - 1;
-}
-
 static inline bool
 idx_is_inf_or_nan (double x)
 {
   bool retval = false;
 
   if (xisnan (x))
     {
       (*current_liboctave_error_handler) ("NaN invalid as index");
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -25,16 +25,18 @@ Software Foundation, 59 Temple Place - S
 
 #if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma interface
 #endif
 
 #include <iostream>
 
 #include "dim-vector.h"
+#include "oct-inttypes.h"
+#include "intNDArray.h"
 
 class ColumnVector;
 class boolNDArray;
 class NDArray;
 class Range;
 
 class
 idx_vector
@@ -51,26 +53,70 @@ private:
 	min_val (0), count (1), frozen_at_z_len (0), frozen_len (0),
 	colon (0), one_zero (0), initialized (0), frozen (0),
 	colon_equiv_checked (0), colon_equiv (0), orig_dims () { }
 
     idx_vector_rep (const ColumnVector& v);
 
     idx_vector_rep (const NDArray& nda);
 
+    template <class U>
+    idx_vector_rep (const intNDArray<U>& inda)
+      : data (0), len (inda.length ()), num_zeros (0), num_ones (0),
+	max_val (0), min_val (0), count (1), frozen_at_z_len (0),
+	frozen_len (0), colon (0), one_zero (0), initialized (0),
+	frozen (0), colon_equiv_checked (0), colon_equiv (0),
+	orig_dims (inda.dims ())
+    {
+      if (len == 0)
+	{
+	  initialized = 1;
+	  return;
+	}
+      else
+	{
+	  data = new int [len];
+
+	  bool conversion_error = false;
+
+	  for (int i = 0; i < len; i++)
+	    data[i] = tree_to_mat_idx (inda.elem (i), conversion_error);
+
+	  if (conversion_error)
+	    return;
+	}
+
+      init_state ();
+    }
+
     idx_vector_rep (const Range& r);
 
     idx_vector_rep (double d);
 
     idx_vector_rep (int i);
 
     idx_vector_rep (char c);
 
     idx_vector_rep (bool b);
 
+    template <class U>
+    idx_vector_rep (const octave_int<U>& i)
+      : data (0), len (1), num_zeros (0), num_ones (0),
+	max_val (0), min_val (0), count (1), frozen_at_z_len (0),
+	frozen_len (0), colon (0), one_zero (0), initialized (0),
+	frozen (0), colon_equiv_checked (0), colon_equiv (0),
+	orig_dims (1, 1)
+    {
+      data = new int [len];
+
+      data[0] = tree_to_mat_idx (i);
+
+      init_state ();
+    }
+
     idx_vector_rep (const boolNDArray& bnda);
 
     idx_vector_rep (const idx_vector_rep& a);
 
     ~idx_vector_rep (void) { delete [] data; }
 
     idx_vector_rep& operator = (const idx_vector_rep& a);
 
@@ -129,16 +175,23 @@ private:
     unsigned int colon_equiv_checked : 1;
     unsigned int colon_equiv : 1;
 
     dim_vector orig_dims;
  
     void init_state (void);
 
     void maybe_convert_one_zero_to_idx (int z_len);
+
+    int tree_to_mat_idx (double x, bool& conversion_error);
+
+    int tree_to_mat_idx (int i) { return i - 1; }
+
+    template <class U> int tree_to_mat_idx (const octave_int<U>& i)
+      { return i.value () - 1; }
   };
 
 public:
 
   idx_vector (void)
     {
       rep = new idx_vector_rep ();
       rep->count = 1;
@@ -151,16 +204,23 @@ public:
     }
 
   idx_vector (const NDArray& nda)
     {
       rep = new idx_vector_rep (nda);
       rep->count = 1;
     }
 
+  template <class U>
+  idx_vector (const intNDArray<U>& inda)
+    {
+      rep = new idx_vector_rep (inda);
+      rep->count = 1;
+    }
+
   idx_vector (const Range& r)
     {
       rep = new idx_vector_rep (r);
       rep->count = 1;
     }
 
   idx_vector (double d)
     {
@@ -181,16 +241,23 @@ public:
     }
 
   idx_vector (bool b)
     {
       rep = new idx_vector_rep (b);
       rep->count = 1;
     }
 
+  template <class U>
+  idx_vector (const octave_int<U>& i)
+    {
+      rep = new idx_vector_rep (i);
+      rep->count = 1;
+    }
+
   idx_vector (const boolNDArray& bnda)
     {
       rep = new idx_vector_rep (bnda);
       rep->count = 1;
     }
 
   idx_vector (const idx_vector& a)
     {
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2004-08-09  John W. Eaton  <jwe@octave.org>
+
+	* ov-intx.h (OCTAVE_VALUE_INT_MATRIX_T::index_vector,
+	OCTAVE_VALUE_INT_SCALAR_T::index_vector): New functions.
+
 2004-08-06  David Bateman  <dbateman@free.fr>
 
 	* OPERATORS/op-struct.cc: New file.
 	* ov-struct.h (octave_struct::resize (const dim_vector&)):
 	New function.
 	* oct-map.h (Octave_map::resize (const dim_vector&)): New function.
 	* ov-map.cc (Octave_map::reshape):
 	Correct return for same sized reshape.
diff --git a/src/ov-intx.h b/src/ov-intx.h
--- a/src/ov-intx.h
+++ b/src/ov-intx.h
@@ -66,16 +66,18 @@ public:
     { 
       NDArray retval (matrix.dims ()); 
       int nel = matrix.numel ();
       for (int i = 0; i < nel; i++)
         retval (i) = double (matrix(i));
       return retval;
     }
 
+  idx_vector index_vector (void) const { return idx_vector (matrix); }
+
 private:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 class
@@ -114,16 +116,18 @@ public:
   NDArray
   array_value (bool = false) const
     { 
       NDArray retval (dim_vector (1,1)); 
       retval (0) = double (scalar);
       return retval;
     }
 
+  idx_vector index_vector (void) const { return idx_vector (scalar); }
+
 private:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 /*
