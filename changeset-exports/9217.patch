# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1242805923 -7200
#      Wed May 20 09:52:03 2009 +0200
# Node ID ee7cf4d963f3681de8025e075dff35102f7f3b78
# Parent  9d4b84b14bf0bde8b888537da5e97d19718b6c7c
smarter handling of quit()

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2009-05-20  Jaroslav Hajek  <highegg@gmail.com>
+
+	* toplev.h (octave_quit_exception): New class.
+	(octave_exit): New global variable.
+	* toplev.cc (octave_exit): Initialize to ::exit.
+	(clean_up_and_exit): Call octave_exit if set.
+	(Fquit): Raise octave_quit_exception to quit.
+	(main_loop): Catch octave_quit_exception.
+	* octave.cc (execute_command_line_file): Ditto.
+	(execute_eval_option_code): Ditto.
+
 2009-05-19  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/fltk_backend.cc (F__fltk_redraw__): New function.
 	(F__init_fltk__): Call add_input_event_hook with feval to add
 	__fltk_redraw__ to the list of even hook functions to call.
 	Call mlock when initializing.
 	(F__remove_fltk__): Call remove_input_event_hook with feval to
 	remove __fltk_redraw__ from the list of event hook functions.
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -406,16 +406,21 @@ execute_eval_option_code (const std::str
   interactive = false;
 
   int parse_status = 0;
 
   try
     {
       eval_string (code, false, parse_status, 0);
     }
+  catch (octave_quit_exception e)
+    {
+      unwind_protect::run_frame ("execute_eval_option_code");
+      clean_up_and_exit (e.status);
+    }
   catch (octave_interrupt_exception)
     {
       recover_from_exception ();
       octave_stdout << "\n";
     }
   catch (std::bad_alloc)
     {
       std::cerr << "error: memory exhausted or requested size too large for range of Octave's index type -- eval failed"
@@ -473,16 +478,21 @@ execute_command_line_file (const std::st
   try
     {
       std::string context;
       bool verbose = false;
       bool require_file = true;
 
       source_file (fname, context, verbose, require_file, "octave");
     }
+  catch (octave_quit_exception e)
+    {
+      unwind_protect::run_frame ("execute_command_line_file");
+      clean_up_and_exit (e.status);
+    }
   catch (octave_interrupt_exception)
     {
       recover_from_exception ();
       octave_stdout << "\n";
     }
   catch (std::bad_alloc)
     {
       std::cerr << "error: memory exhausted or requested size too large for range of Octave's index type -- execution of "
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -74,16 +74,18 @@ along with Octave; see the file COPYING.
 #include "sysdep.h"
 #include "syswait.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 #include <version.h>
 
+void (*octave_exit) (int) = ::exit;
+
 // TRUE means we are exiting via the builtin exit or quit functions.
 static bool quitting_gracefully = false;
 
 // TRUE means we are ready to interpret commands, but not everything
 // is ready for interactive use.
 bool octave_interpreter_ready = false;
 
 // TRUE means we've processed all the init code and we are good to go.
@@ -593,16 +595,21 @@ main_loop (void)
 		      else
 			command_editor::increment_current_command_number ();
 		    }
 		}
 	      else if (parser_end_of_input)
 		break;
 	    }
 	}
+      catch (octave_quit_exception e)
+        {
+          unwind_protect::run_all ();
+          clean_up_and_exit (e.status);
+        }
       catch (octave_interrupt_exception)
 	{
 	  recover_from_exception ();
 	  octave_stdout << "\n";
 	}
       catch (octave_execution_exception)
 	{
 	  recover_from_exception ();
@@ -627,17 +634,18 @@ main_loop (void)
 
 void
 clean_up_and_exit (int retval)
 {
   do_octave_atexit ();
 
   sysdep_cleanup ();
 
-  exit (retval == EOF ? 0 : retval);
+  if (octave_exit)
+    (*octave_exit) (retval == EOF ? 0 : retval);
 }
 
 DEFUN (quit, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} exit (@var{status})\n\
 @deftypefnx {Built-in Function} {} quit (@var{status})\n\
 Exit the current Octave session.  If the optional integer value\n\
 @var{status} is supplied, pass that value to the operating system as the\n\
@@ -655,17 +663,17 @@ Octave's exit status.  The default value
       if (args.length () > 0)
 	{
 	  int tmp = args(0).nint_value ();
 
 	  if (! error_state)
 	    exit_status = tmp;
 	}
 
-      clean_up_and_exit (exit_status);
+      throw octave_quit_exception (exit_status);
     }
   else
     error ("quit: invalid number of output arguments");
 
   return retval;
 }
 
 DEFALIAS (exit, quit);
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -32,21 +32,36 @@ along with Octave; see the file COPYING.
 class octave_value;
 class octave_value_list;
 class octave_function;
 class octave_user_script;
 class tree_statement;
 class tree_statement_list;
 class charMatrix;
 
+#include "quit.h"
+
 #include "input.h"
 #include "oct-map.h"
 
+
+extern void (*octave_exit) (int);
+
+// quit is a lot like an interrupt, so we subclass it to simplify possible
+// handling.
+class octave_quit_exception 
+: public octave_interrupt_exception
+{
+public:
+  int status;
+  octave_quit_exception (int s) : status (s) { }
+};
+
 extern OCTINTERP_API void
-clean_up_and_exit (int) GCC_ATTR_NORETURN;
+clean_up_and_exit (int);
 
 extern OCTINTERP_API void recover_from_exception (void);
 
 extern int main_loop (void);
 
 extern OCTINTERP_API void
 do_octave_atexit (void);
 
