# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1500658219 14400
#      Fri Jul 21 13:30:19 2017 -0400
# Node ID d891b6a16a4d844a56177873b17fd6b0e5e8318c
# Parent  96e36ba3be65a8002e076e0a705e653560a6788b
* pt-eval.cc: Expand on comment introduced in previous change.

diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -1330,19 +1330,27 @@ namespace octave
                   }
               }
           }
       }
 
     if (base_expr_val.is_undefined ())
       base_expr_val = evaluate (expr);
 
-    bool indexing_object = base_expr_val.isobject () || base_expr_val.isjava ()
-                           || base_expr_val.is_classdef_meta ();
-                           // ^ this check is for static methods on class name
+    // If we are indexing an object or looking at something like
+    //
+    //   classname.static_function (args, ...);
+    //
+    // then we'll just build a complete index list for one big subsref
+    // call.  If the expression we are indexing is a classname, then
+    // base_expr_val will be an octave_classdef_meta object.
+
+    bool indexing_object
+      = (base_expr_val.isobject () || base_expr_val.isjava ()
+         || base_expr_val.is_classdef_meta ());
 
     std::list<octave_value_list> idx;
 
     octave_value partial_expr_val = base_expr_val;
 
     for (int i = beg; i < n; i++)
       {
         if (i > beg)
@@ -1370,22 +1378,30 @@ namespace octave
                         if (partial_expr_val.is_cs_list ())
                           err_indexed_cs_list ();
 
                         retval = partial_expr_val;
 
                         beg = i;
                         idx.clear ();
 
-                        if (partial_expr_val.isobject () || partial_expr_val.isjava ())
+                        if (partial_expr_val.isobject ()
+                            || partial_expr_val.isjava ())
                           {
                             // Found an object, so now we'll build up
                             // complete index list for one big subsref
                             // call from this point on.
 
+                            // FIXME: is is also possible to have a
+                            // static method call buried somewhere in
+                            // the depths of a complex indexing
+                            // expression so that we would also need to
+                            // check for an octave_classdef_meta object
+                            // here?
+
                             indexing_object = true;
                           }
                       }
                   }
                 catch (index_exception& e)
                   {
                     final_index_error (e, expr);
                   }
