# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1216670817 14400
#      Mon Jul 21 16:06:57 2008 -0400
# Branch release-3-0-x
# Node ID db5518a14ea47c5c5c408c86faa8dede18b0bfc2
# Parent  70f6c0b493bc4dadd1c8003852d1c14735fce949
allow empty matrix by cell (or struct) concatentation
(transplanted from a73b80cd1f10556e1e4641e5174aaf4ad60cfcb4)

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,13 +1,19 @@
 2008-07-24  John W. Eaton  <jwe@octave.org>
 
 	* dirfns.cc (Fmkdir): If directory already exists, return status =
 	true, but also set error message.
 
+2008-07-21  John W. Eaton  <jwe@octave.org>
+
+	* OPERATORS/op-struct.cc: Define concatenation operators for
+	struct/matrix concatenation (valid if matrix is empty).
+	* OPERATORS/op-cell.cc (install_cell_ops): Likewise, for cells.
+
 2008-06-25  David Bateman  <dbateman@free.fr>
 
 	* pr-output.cc (Frats): Print usage if nargin == 0.
 	
 2008-06-20  Jaroslav Hajek <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/regexp.cc (octregexp_list): Make "once" an output
 	argument.
diff --git a/src/OPERATORS/op-cell.cc b/src/OPERATORS/op-cell.cc
--- a/src/OPERATORS/op-cell.cc
+++ b/src/OPERATORS/op-cell.cc
@@ -45,26 +45,59 @@ DEFUNOP (transpose, cell)
       return octave_value ();
     }
   else
     return octave_value (Cell (v.cell_value().transpose ()));
 }
 
 DEFCATOP_FN (c_c, cell, cell, concat)
 
+static octave_value
+oct_catop_cell_matrix (octave_base_value& a1, const octave_base_value& a2,
+			 const Array<octave_idx_type>&)
+{
+  octave_value retval;
+  CAST_BINOP_ARGS (const octave_cell&, const octave_matrix&);
+  NDArray tmp = v2.array_value ();
+  dim_vector dv = tmp.dims ();
+  if (dv.all_zero ())
+    retval = octave_value (v1.cell_value ());
+  else
+    error ("invalid concatenation of cell array with matrix");
+  return retval;
+}
+
+static octave_value
+oct_catop_matrix_cell (octave_base_value& a1, const octave_base_value& a2,
+			 const Array<octave_idx_type>&)
+{
+  octave_value retval;
+  CAST_BINOP_ARGS (const octave_cell&, const octave_matrix&);
+  NDArray tmp = v1.array_value ();
+  dim_vector dv = tmp.dims ();
+  if (dv.all_zero ())
+    retval = octave_value (v2.cell_value ());
+  else
+    error ("invalid concatenation of cell array with matrix");
+  return retval;
+}
+
 DEFASSIGNANYOP_FN (assign, cell, assign);
 
 void
 install_cell_ops (void)
 {
   INSTALL_UNOP (op_transpose, octave_cell, transpose);
   INSTALL_UNOP (op_hermitian, octave_cell, transpose);
 
   INSTALL_CATOP (octave_cell, octave_cell, c_c);
 
+  INSTALL_CATOP (octave_cell, octave_matrix, cell_matrix);
+  INSTALL_CATOP (octave_matrix, octave_cell, matrix_cell);
+
   INSTALL_ASSIGNANYOP (op_asn_eq, octave_cell, assign);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-struct.cc b/src/OPERATORS/op-struct.cc
--- a/src/OPERATORS/op-struct.cc
+++ b/src/OPERATORS/op-struct.cc
@@ -22,16 +22,17 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov.h"
+#include "ov-re-mat.h"
 #include "ov-struct.h"
 #include "ov-typeinfo.h"
 #include "ops.h"
 
 // struct ops.
 
 DEFUNOP (transpose, cell)
 {
@@ -43,22 +44,54 @@ DEFUNOP (transpose, cell)
       return octave_value ();
     }
   else
     return octave_value (v.map_value().transpose ());
 }
 
 DEFNDCATOP_FN (struct_struct, struct, struct, map, map, concat)
 
+static octave_value
+oct_catop_struct_matrix (octave_base_value& a1, const octave_base_value& a2,
+			 const Array<octave_idx_type>&)
+{
+  octave_value retval;
+  CAST_BINOP_ARGS (const octave_struct&, const octave_matrix&);
+  NDArray tmp = v2.array_value ();
+  dim_vector dv = tmp.dims ();
+  if (dv.all_zero ())
+    retval = octave_value (v1.map_value ());
+  else
+    error ("invalid concatenation of structure with matrix");
+  return retval;
+}
+
+static octave_value
+oct_catop_matrix_struct (octave_base_value& a1, const octave_base_value& a2,
+			 const Array<octave_idx_type>&)
+{
+  octave_value retval;
+  CAST_BINOP_ARGS (const octave_struct&, const octave_matrix&);
+  NDArray tmp = v1.array_value ();
+  dim_vector dv = tmp.dims ();
+  if (dv.all_zero ())
+    retval = octave_value (v2.map_value ());
+  else
+    error ("invalid concatenation of structure with matrix");
+  return retval;
+}
+
 void
 install_struct_ops (void)
 {
   INSTALL_UNOP (op_transpose, octave_struct, transpose);
   INSTALL_UNOP (op_hermitian, octave_struct, transpose);
 
   INSTALL_CATOP (octave_struct, octave_struct, struct_struct);
+  INSTALL_CATOP (octave_struct, octave_matrix, struct_matrix);
+  INSTALL_CATOP (octave_matrix, octave_struct, matrix_struct);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -217,17 +217,31 @@ Octave_map::concat (const Octave_map& rb
 	      break;
 	    }
 	
 	  retval.assign (key(pa),
 			 contents(pa).insert (rb.contents(pb), ra_idx));
 	}
     }
   else
-    error ("field name mismatch in structure concatenation");
+    {
+      dim_vector dv = dims ();
+
+      if (dv.all_zero ())
+	retval = rb;
+      else
+	{
+	  dv = rb.dims ();
+
+	  if (dv.all_zero ())
+	    retval = *this;
+	  else
+	    error ("invalid structure concatenation");
+	}
+    }
 
   return retval;
 }
 
 static bool
 keys_ok (const Octave_map& a, const Octave_map& b, string_vector& keys)
 {
   bool retval = false;
