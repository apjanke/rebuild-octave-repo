# HG changeset patch
# User Rik <rik@octave.org>
# Date 1463786170 25200
#      Fri May 20 16:16:10 2016 -0700
# Node ID b002b4331a12700149add8da99553ae227c9674f
# Parent  ffad2baa90f719f6d5c8b78fb1ef4f62b8d7db96
maint: Use two newlines after endfunction and start of BIST tests.

diff --git a/scripts/deprecated/md5sum.m b/scripts/deprecated/md5sum.m
--- a/scripts/deprecated/md5sum.m
+++ b/scripts/deprecated/md5sum.m
@@ -56,19 +56,21 @@ function r = md5sum (str, opt)
   elseif ((nargin == 2) && isbool (opt) && isscalar (opt) && (opt == true))
     r = hash ("md5", str);
   else
     print_usage ();
   endif
 
 endfunction
 
+
 %!assert (md5sum ("abc\0", true), "147a664a2ca9410911e61986d3f0d52a")
 
 %!test
 %! tfile = tempname ();
 %! fid = fopen (tfile, "wb");
 %! fwrite (fid, "abc\0");
 %! fclose (fid);
 %! assert (md5sum (tfile), "147a664a2ca9410911e61986d3f0d52a");
 %! unlink (tfile);
 
 %!error md5sum ()
+
diff --git a/scripts/deprecated/sleep.m b/scripts/deprecated/sleep.m
--- a/scripts/deprecated/sleep.m
+++ b/scripts/deprecated/sleep.m
@@ -39,13 +39,15 @@ function sleep (seconds)
   if (nargin == 1)
     pause (seconds);
   else
     print_usage ();
   endif
 
 endfunction
 
+
 %!test
 %! sleep (1);
 
 %!error (sleep ())
 %!error (sleep (1, 2))
+
diff --git a/scripts/deprecated/usleep.m b/scripts/deprecated/usleep.m
--- a/scripts/deprecated/usleep.m
+++ b/scripts/deprecated/usleep.m
@@ -40,13 +40,15 @@ function usleep (microseconds)
   if (nargin == 1)
     pause (microseconds / 1e6);
   else
     print_usage ();
   endif
 
 endfunction
 
+
 %!test
 %! usleep (1000);
 
 %!error (usleep ())
 %!error (usleep (1, 2))
+
diff --git a/scripts/geometry/rectint.m b/scripts/geometry/rectint.m
--- a/scripts/geometry/rectint.m
+++ b/scripts/geometry/rectint.m
@@ -70,16 +70,17 @@ function dists = rectint (a, b)
 
   ## We get a 3d matrix where each dimension is in the 3rd dimension
   dists = bsxfun (@min , a_end, b_end) - bsxfun (@max, a_start, b_start);
   dists(dists < 0) = 0;
   dists = prod (dists, 3);
 
 endfunction
 
+
 ## Exactly overlapping
 %!assert (rectint ([0 0 1 1], [0 0 1 1]), 1)
 ## rect2 completely enclosed by rect1
 %!assert (rectint ([-1 -1 3 3], [0 0 1 1]), 1)
 ## rect1 completely enclosed by rect2
 %!assert (rectint ([0 0 1 1], [-1 -1 3 3]), 1)
 ## rect1 right and top in rect2
 %!assert (rectint ([-1 -1 1.5 1.5], [0 0 1 1]), 0.25)
diff --git a/scripts/gui/msgbox.m b/scripts/gui/msgbox.m
--- a/scripts/gui/msgbox.m
+++ b/scripts/gui/msgbox.m
@@ -113,13 +113,16 @@ function retval = msgbox (msg, varargin)
   else
     disp (sprintf ("\n%s:\t%s\n\t%s\n", upper (box_icon), box_title,
       strrep (msg, "\n", "\n\t")));
     retval = 1;
   endif
 
 endfunction
 
-%!error<narginchk> msgbox (1, 2, 3, 4, 5)
-%!error<MSG must be a character string> msgbox (1)
-%!error<TITLE must be a character string> msgbox ("msg", 1)
-%!error<ICON is not a valid type> msgbox ("msg", "title", 1)
-%!error<CREATEMODE is not a valid> msgbox ("msg", "title", "help", "wrong")
+
+## Test input validation
+%!error <narginchk> msgbox (1, 2, 3, 4, 5)
+%!error <MSG must be a character string> msgbox (1)
+%!error <TITLE must be a character string> msgbox ("msg", 1)
+%!error <ICON is not a valid type> msgbox ("msg", "title", 1)
+%!error <CREATEMODE is not a valid> msgbox ("msg", "title", "help", "wrong")
+
diff --git a/scripts/image/hsv2rgb.m b/scripts/image/hsv2rgb.m
--- a/scripts/image/hsv2rgb.m
+++ b/scripts/image/hsv2rgb.m
@@ -93,16 +93,17 @@ function rgb = hsv2rgb (hsv)
   rgb += f .* (6 * (hue < 1/6) .* hue
                + (hue >= 1/6 & hue < 1/2)
                + (hue >= 1/2 & hue < 2/3) .* (4 - 6 * hue));
 
   rgb = colorspace_conversion_revert (rgb, sz, is_im, is_nd);
 
 endfunction
 
+
 ## Test pure colors
 %!assert (hsv2rgb ([0 0 1]), [1 1 1])
 %!assert (hsv2rgb ([1 1 0]), [0 0 0])
 %!assert (hsv2rgb ([0 1 1]), [1 0 0])
 %!assert (hsv2rgb ([1 1 1]), [1 0 0])
 %!assert (hsv2rgb ([1/3 1 1]), [0 1 0])
 %!assert (hsv2rgb ([2/3 1 1]), [0 0 1])
 
diff --git a/scripts/image/rgb2hsv.m b/scripts/image/rgb2hsv.m
--- a/scripts/image/rgb2hsv.m
+++ b/scripts/image/rgb2hsv.m
@@ -77,16 +77,17 @@ function hsv = rgb2hsv (rgb)
   s(! notgray) = 0;
   s(notgray) = 1 - s(notgray) ./ v(notgray);
 
   hsv = [h, s, v];
   hsv = colorspace_conversion_revert (hsv, sz, is_im, is_nd);
 
 endfunction
 
+
 ## Test pure colors and gray
 %!assert (rgb2hsv ([1 0 0]), [0 1 1])
 %!assert (rgb2hsv ([0 1 0]), [1/3 1 1])
 %!assert (rgb2hsv ([0 0 1]), [2/3 1 1])
 %!assert (rgb2hsv ([1 1 0]), [1/6 1 1])
 %!assert (rgb2hsv ([0 1 1]), [1/2 1 1])
 %!assert (rgb2hsv ([1 0 1]), [5/6 1 1])
 %!assert (rgb2hsv ([0.5 0.5 0.5]), [0 0 0.5])
diff --git a/scripts/image/rgb2ind.m b/scripts/image/rgb2ind.m
--- a/scripts/image/rgb2ind.m
+++ b/scripts/image/rgb2ind.m
@@ -94,16 +94,17 @@ function [x, map] = rgb2ind (R, G, B)
   elseif (rows (map) < 65536)
     x = uint16 (x - 1);
   else
     ## leave it as double
   endif
 
 endfunction
 
+
 ## Test input validation
 %!error rgb2ind ()
 %!error rgb2ind (1,2,3,4,5,6,7)
 %!error <RGB> rgb2ind (rand (10, 10, 4))
 
 ## FIXME: the following tests simply make sure that rgb2ind and ind2rgb
 ##        reverse each other.  We should have better tests for this.
 
diff --git a/scripts/image/rgb2ntsc.m b/scripts/image/rgb2ntsc.m
--- a/scripts/image/rgb2ntsc.m
+++ b/scripts/image/rgb2ntsc.m
@@ -64,16 +64,17 @@ function yiq = rgb2ntsc (rgb)
   ## Note that if the input is of class single, we also return an image
   ## of class single.  This is Matlab incompatible by design, since
   ## Matlab always returning class double, is a Matlab bug (see patch #8709)
 
   yiq = colorspace_conversion_revert (yiq, sz, is_im, is_nd);
 
 endfunction
 
+
 ## Test pure RED, GREEN, BLUE colors
 %!assert (rgb2ntsc ([1 0 0]), [.299  .596  .211])
 %!assert (rgb2ntsc ([0 1 0]), [.587 -.274 -.523])
 %!assert (rgb2ntsc ([0 0 1]), [.114 -.322  .312])
 
 %!test
 %! rgb_map = rand (64, 3);
 %! assert (ntsc2rgb (rgb2ntsc (rgb_map)), rgb_map, 1e-3);
diff --git a/scripts/ode/private/runge_kutta_interpolate.m b/scripts/ode/private/runge_kutta_interpolate.m
--- a/scripts/ode/private/runge_kutta_interpolate.m
+++ b/scripts/ode/private/runge_kutta_interpolate.m
@@ -123,8 +123,9 @@ function x_out = hermite_cubic_interpola
   dt = (t(2) - t(1));
   s = (t_out - t(1)) / dt;
   x_out = ((1 + 2*s) .* (1-s).^2) .* x(:,1) + ...
           (s .* (1-s).^2 * dt   ) .* der(:,1) + ...
           ((3-2*s) .* s.^2      ) .* x(:,2) + ...
           ((s-1) .* s.^2   * dt ) .* der(:,2);
 
 endfunction
+
diff --git a/scripts/optimization/fminbnd.m b/scripts/optimization/fminbnd.m
--- a/scripts/optimization/fminbnd.m
+++ b/scripts/optimization/fminbnd.m
@@ -241,18 +241,17 @@ function [x, fval, info, output] = fminb
 
   output.iterations = niter;
   output.funcCount = nfev;
   output.bracket = [a, b];
   ## FIXME: bracketf possibly unavailable.
 
 endfunction
 
-## An assistant function that evaluates a function handle and checks for
-## bad results.
+## A helper function that evaluates a function and checks for bad results.
 function fx = guarded_eval (fun, x)
   fx = fun (x);
   fx = fx(1);
   if (! isreal (fx))
     error ("fminbnd:notreal", "fminbnd: non-real value encountered");
   elseif (isnan (fx))
     error ("fminbnd:isnan", "fminbnd: NaN value encountered");
   endif
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -437,18 +437,17 @@ function [x, fvec, info, output, fjac] =
   fvec = reshape (fvec, fsiz);
 
   output.iterations = niter;
   output.successful = nsuciter;
   output.funcCount = nfev;
 
 endfunction
 
-## An assistant function that evaluates a function handle and checks for
-## bad results.
+## A helper function that evaluates a function and checks for bad results.
 function [fx, jx] = guarded_eval (fun, x, complexeqn)
 
   if (nargout > 1)
     [fx, jx] = fun (x);
   else
     fx = fun (x);
     jx = [];
   endif
diff --git a/scripts/optimization/fzero.m b/scripts/optimization/fzero.m
--- a/scripts/optimization/fzero.m
+++ b/scripts/optimization/fzero.m
@@ -351,18 +351,17 @@ function [x, fval, info, output] = fzero
 
   output.iterations = niter;
   output.funcCount = nfev;
   output.bracketx = [a, b];
   output.brackety = [fa, fb];
 
 endfunction
 
-## An assistant function that evaluates a function handle and checks for
-## bad results.
+## A helper function that evaluates a function and checks for bad results.
 function fx = guarded_eval (fun, x)
   fx = fun (x);
   fx = fx(1);
   if (! isreal (fx))
     error ("fzero:notreal", "fzero: non-real value encountered");
   elseif (isnan (fx))
     error ("fzero:isnan", "fzero: NaN value encountered");
   endif
diff --git a/scripts/pkg/private/configure_make.m b/scripts/pkg/private/configure_make.m
--- a/scripts/pkg/private/configure_make.m
+++ b/scripts/pkg/private/configure_make.m
@@ -94,18 +94,19 @@ function configure_make (desc, packdir, 
         disp (output);
         error ("pkg: error running `make' for the %s package.", desc.name);
       endif
     endif
   endif
 
 endfunction
 
-## Executes a shell command.  In the end it calls system() but in case of
-## windows will first check if sh.exe works.
+## Executes a shell command.
+## In the end it calls system(), but in the case of MS Windows it will first
+## check if sh.exe works.
 ##
 ## If VERBOSE is true, it will prints the output to STDOUT in real time and
 ## the second output argument will be an empty string.  Otherwise, it will
 ## contain the output of the execeuted command.
 function [status, output] = shell (cmd, verbose)
   persistent have_sh;
 
   cmd = strrep (cmd, "\\", "/");
diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -739,30 +739,29 @@ function latex_standalone (opts)
   prepend = {"\\documentclass{minimal}";
              packages;
              papersize;
              "\\begin{document}";
              "\\centering"};
   postpend = {"\\end{document}"};
 
   fid = fopen (latexfile, "r");
-  if (fid >= 0)
-    latex = fscanf (fid, "%c", Inf);
-    status = fclose (fid);
-    if (status != 0)
-      error ("print:errorclosingfile",
-             "print.m: error closing file '%s'", latexfile);
-    endif
-    ## FIXME: should this be fixed in GL2PS?
-    latex = strrep (latex, "\\includegraphics{}",
-                    sprintf ("\\includegraphics{%s}", graphicsfile));
-  else
+  if (fid < 0)
     error ("print:erroropeningfile",
            "print.m: error opening file '%s'", latexfile);
   endif
+  latex = fscanf (fid, "%c", Inf);
+  status = fclose (fid);
+  if (status != 0)
+    error ("print:errorclosingfile",
+           "print.m: error closing file '%s'", latexfile);
+  endif
+  ## FIXME: should this be fixed in GL2PS?
+  latex = strrep (latex, "\\includegraphics{}",
+                  sprintf ("\\includegraphics{%s}", graphicsfile));
 
   fid = fopen (latexfile, "w");
   if (fid >= 0)
     fprintf (fid, "%s\n", prepend{:});
     fprintf (fid, "%s", latex);
     fprintf (fid, "%s\n", postpend{:});
     status = fclose (fid);
     if (status != 0)
diff --git a/scripts/plot/util/private/__print_parse_opts__.m b/scripts/plot/util/private/__print_parse_opts__.m
--- a/scripts/plot/util/private/__print_parse_opts__.m
+++ b/scripts/plot/util/private/__print_parse_opts__.m
@@ -388,16 +388,17 @@ function arg_st = __print_parse_opts__ (
         warning ("print:missing_pstoedit", "print.m: pstoedit binary is not available.\nSome output formats are not available.");
       endif
     endif
     warn_on_missing_binary = false;
   endif
 
 endfunction
 
+
 ## Test blocks are not allowed (and not needed) for private functions
 #%!test
 %! opts = __print_parse_opts__ ();
 %! assert (opts.devopt, "pswrite");
 %! assert (opts.use_color, 1);
 %! assert (opts.send_to_printer, true);
 %! assert (opts.canvas_size, [576, 432]);
 %! assert (opts.ghostscript.device, "pswrite");
diff --git a/scripts/plot/util/rotate.m b/scripts/plot/util/rotate.m
--- a/scripts/plot/util/rotate.m
+++ b/scripts/plot/util/rotate.m
@@ -161,16 +161,17 @@ function rotate (h, direction, alpha, or
 
     if (! is_image(i))
       set (h(i), "zdata", zr);
     endif
   endfor
 
 endfunction
 
+
 ## Test input validation
 %!shared h1, h2, o1, o2, o3
 %! h1 = figure ("visible", "off");
 %! o1 = line ();
 %! h2 = figure ("visible", "off");
 %! o2 = line ();
 %! o3 = text (0, 0, "foobar");
 %!error rotate ()
diff --git a/scripts/special-matrix/gallery.m b/scripts/special-matrix/gallery.m
--- a/scripts/special-matrix/gallery.m
+++ b/scripts/special-matrix/gallery.m
@@ -2895,27 +2895,29 @@ function B = qmult (A)
   ## Tidy up signs
   for i = 1:n-1
     A(i,:) = d(i)*A(i,:);
   endfor
   A(n,:) = A(n,:) * sign (randn);
   B = A;
 endfunction
 
+
 ## BIST testing for just a few functions to verify that the main gallery
 ## dispatch function works.
 %!assert (gallery ("clement", 3), [0 1 0; 2 0 2; 0 1 0])
 %!assert (gallery ("invhess", 2), [1 -1; 1 2])
 
 ## Test input validation of main dispatch function only
 %!error gallery ()
 %!error <NAME must be a string> gallery (123)
 %!error <matrix binomial not implemented> gallery ("binomial")
 %!error <unknown matrix with NAME foobar> gallery ("foobar")
 
+## BIST testing for individual gallery functions
 %!assert (gallery ("minij", 4), [1 1 1 1; 1 2 2 2; 1 2 3 3; 1 2 3 4])
 %!assert (gallery ("minij", 1), 1)
 %!assert (gallery ("minij", 0), [])
 %!assert (gallery ("minij", -1), [])
 
 %!assert (size (gallery ("cauchy", 5)), [5 5])
 %!assert (size (gallery ("cauchy", 2:5, 5:8)), [4 4])
 
@@ -3074,8 +3076,9 @@ endfunction
 %!assert (size (gallery ("uniformdata", [5 3 4], 3)), [5 3 4])
 
 %!assert (size (gallery ("wathen", 2, 3)), [29 29])
 
 %!assert (cellfun (@rows, nthargout (1:2, @gallery, "wilk", 3)), [3 3])
 %!assert (cellfun (@rows, nthargout (1:2, @gallery, "wilk", 4)), [4 4])
 %!assert (size (gallery ("wilk", 5)), [5 5])
 %!assert (size (gallery ("wilk", 21)), [21 21])
+
