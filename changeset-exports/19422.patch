# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1419343440 -3600
#      Tue Dec 23 15:04:00 2014 +0100
# Branch gui-release
# Node ID 476032040df940a3e405e95b85c2a089b7883dca
# Parent  ed0df431631bd15c81e2031dfdaca9430b81b401
determining the active dock from focus changes in the gui

* main-window.cc (focus_changed): new slot for qApp::focusChagned signal,
  determining the active dock to which the new focus-widget belongs and
  emitting a signal indicating a change of the active dock;
  (constructor): connect focusChagned signal to the new slot

* main-window.h: new slot, new signal, and new class variable for active dock

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -98,16 +98,17 @@ main_window::main_window (QWidget *p)
     _dbg_queue_mutex (),
     _prevent_readline_conflicts (true)
 {
   QSettings *settings = resource_manager::get_settings ();
 
   bool connect_to_web = true;
   QDateTime last_checked;
   int serial = 0;
+  _active_dock = 0;
 
   if (settings)
     {
       connect_to_web
         = settings->value ("news/allow_web_connection", true).toBool ();
 
       last_checked
         = settings->value ("news/last_time_checked", QDateTime ()).toDateTime ();
@@ -153,16 +154,37 @@ main_window::~main_window (void)
     {
       delete community_news_window;
       community_news_window = 0;
     }
   delete _octave_qt_link;
   delete _cmd_queue;
 }
 
+// catch focus changes and determine the active dock widget
+void
+main_window::focus_changed (QWidget *, QWidget *w_new)
+{
+  octave_dock_widget* dock = 0;
+  while (w_new && w_new != _main_tool_bar)
+    {
+      dock = qobject_cast <octave_dock_widget *> (w_new);
+      if (dock)
+        break; // its a QDockWidget
+      w_new = qobject_cast <QWidget *> (w_new->previousInFocusChain ());
+    }
+
+  // if new dock has focus, emit signal and store active focus
+  if (dock != _active_dock)
+    {
+      emit active_dock_changed (_active_dock, dock);
+      _active_dock = dock;
+    }
+}
+
 bool
 main_window::command_window_has_focus (void) const
 {
   return command_window->has_focus ();
 }
 
 void
 main_window::focus_command_window (void)
@@ -1274,16 +1296,19 @@ main_window::construct (void)
     win_y = 720;
 
   setGeometry (0, 0, win_x, win_y);
 
   setStatusBar (status_bar);
 
   construct_octave_qt_link ();
 
+  connect (qApp, SIGNAL (focusChanged (QWidget*, QWidget*)),
+           this, SLOT(focus_changed (QWidget*, QWidget*)));
+
 #ifdef HAVE_QSCINTILLA
   connect (this,
            SIGNAL (insert_debugger_pointer_signal (const QString&, int)),
            editor_window,
            SLOT (handle_insert_debugger_pointer_request (const QString&, int)));
 
   connect (this,
            SIGNAL (delete_debugger_pointer_signal (const QString&, int)),
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -75,16 +75,19 @@ public:
 
   ~main_window (void);
 
   bool command_window_has_focus (void) const;
 
   void focus_command_window (void);
 
 signals:
+
+  void active_dock_changed (octave_dock_widget *, octave_dock_widget *);
+
   void settings_changed (const QSettings *);
   void init_terminal_size_signal (void);
   void new_file_signal (const QString&);
   void open_file_signal (const QString&);
 
   void show_doc_signal (const QString&);
 
   void insert_debugger_pointer_signal (const QString& file, int line);
@@ -93,16 +96,19 @@ signals:
                                         int line);
 
   void copyClipboard_signal (void);
   void pasteClipboard_signal (void);
   void selectAll_signal (void);
 
 public slots:
 
+  void focus_changed (QWidget *w_old, QWidget *w_new);
+
+
   void report_status_message (const QString& statusMessage);
   void handle_save_workspace_request (void);
   void handle_load_workspace_request (const QString& file = QString ());
   void handle_clear_command_window_request (void);
   void handle_clear_workspace_request (void);
   void handle_clear_history_request (void);
   void handle_rename_variable_request (const QString& old_name,
                                        const QString& new_name);
@@ -306,16 +312,17 @@ private:
     list.append (static_cast<octave_dock_widget *> (file_browser_window));
     list.append (static_cast<octave_dock_widget *> (doc_browser_window));
 #ifdef HAVE_QSCINTILLA
     list.append (static_cast<octave_dock_widget *> (editor_window));
 #endif
     list.append (static_cast<octave_dock_widget *> (workspace_window));
     return list;
   }
+  octave_dock_widget *_active_dock;
 
   QString _release_notes_icon;
 
   QToolBar *_main_tool_bar;
 
   QDockWidget *_warning_bar;
   QPushButton *_gui_info_button;
 
