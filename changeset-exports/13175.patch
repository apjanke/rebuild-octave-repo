# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1316547504 14400
#      Tue Sep 20 15:38:24 2011 -0400
# Node ID 8aaaef4a69aa256324cc758cc31470ac4e7a7b34
# Parent  536c6a5ab70582b2f79a1d8bb18fbda18cf8e6b8
# Parent  bd2cd4fd3edf77902fcde6a0130a98222e3f4c33
maint: periodic merge of stable to default

diff --git a/scripts/general/accumarray.m b/scripts/general/accumarray.m
--- a/scripts/general/accumarray.m
+++ b/scripts/general/accumarray.m
@@ -46,17 +46,17 @@
 ## By default @code{accumarray} returns a full matrix.  If
 ## @var{issparse} is logically true, then a sparse matrix is returned
 ## instead.
 ##
 ## The following @code{accumarray} example constructs a frequency table
 ## that in the first column counts how many occurrences each number in
 ## the second column has, taken from the vector @var{x}. Note the usage
 ## of @code{unique}  for assigning to all repeated elements of @var{x}
-## the same index (@xref{doc-unique}).
+## the same index (@pxref{doc-unique}).
 ##
 ## @example
 ## @group
 ## x = [91, 92, 90, 92, 90, 89, 91, 89, 90, 100, 100, 100];
 ## [u, ~, j] = unique (x);
 ## [accumarray(j', 1), u']
 ## @result{} 2    89
 ##    3    90
diff --git a/scripts/miscellaneous/getappdata.m b/scripts/miscellaneous/getappdata.m
--- a/scripts/miscellaneous/getappdata.m
+++ b/scripts/miscellaneous/getappdata.m
@@ -35,17 +35,17 @@ function val = getappdata (h, name)
     appdata = struct();
     for nh = 1:numel(h)
       try
         appdata = get (h(nh), "__appdata__");
       catch
         appdata.(name) = [];
       end_try_catch
       val(nh) = {appdata.(name)};
-    end
+    endfor
     if (nh == 1)
       val = val{1};
     endif
   elseif (ishandle (h) && numel (h) == 1 && nargin == 1)
     try
       val = get (h, "__appdata__");
     catch
       val = struct ();
diff --git a/scripts/miscellaneous/setappdata.m b/scripts/miscellaneous/setappdata.m
--- a/scripts/miscellaneous/setappdata.m
+++ b/scripts/miscellaneous/setappdata.m
@@ -28,17 +28,17 @@ function setappdata (h, varargin)
 
   if (! (all (ishandle (h)) && mod (numel (varargin), 2) == 0))
     error ("setappdata: invalid input");
   endif
 
   for nh = 1:numel(h)
     if (! isfield (get (h(nh)), "__appdata__"))
       addproperty ("__appdata__", h(nh), "any", struct ());
-    end
+    endif
     appdata = get (h(nh), "__appdata__");
     for narg = 1:2:numel(varargin)
       if (iscellstr (varargin{narg}))
         ## Handle cell arrays like set() does.
         set (h(nh), "__appdata__", appdata);
         setappdata (h(nh), vertcat (varargin{narg}', varargin{narg+1}'){:});
         appdata = get (h(nh), "__appdata__");
       elseif (ischar (varargin{narg}))
diff --git a/scripts/plot/axis.m b/scripts/plot/axis.m
--- a/scripts/plot/axis.m
+++ b/scripts/plot/axis.m
@@ -316,17 +316,17 @@ function lims = __get_tight_lims__ (ca, 
   if (isempty (kids))
     ## Return the current limits.
     lims = get (ca, strcat (ax, "lim"));
   else
     data = get (kids, strcat (ax, "data"));
     scale = get (ca, strcat (ax, "scale"));
     if (strcmp (scale, "log") && any (data > 0))
       data(data<=0) = NaN;
-    end
+    endif
     if (iscell (data))
       data = data (find (! cellfun ("isempty", data)));
       if (! isempty (data))
         lims_min = min (cellfun ("min", cellfun ("min", data, 'uniformoutput', false)(:)));
         lims_max = max (cellfun ("max", cellfun ("max", data, 'uniformoutput', false)(:)));
         lims = [lims_min, lims_max];
       else
         lims = [0, 1];
diff --git a/scripts/sparse/gmres.m b/scripts/sparse/gmres.m
--- a/scripts/sparse/gmres.m
+++ b/scripts/sparse/gmres.m
@@ -64,17 +64,17 @@
 ##
 ## @seealso{bicg, bicgstab, cgs, pcg}
 ## @end deftypefn
 
 function [x, flag, presn, it] = gmres (A, b, restart, rtol, maxit, M1, M2, x0)
 
   if (nargin < 2 || nargin > 8)
     print_usage ();
-  end
+  endif
 
   if (ischar (A))
     Ax = str2func (A);
   elseif (ismatrix (A))
     Ax = @(x) A*x;
   elseif (isa (A, "function_handle"))
     Ax = A;
   else
