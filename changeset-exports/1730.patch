# HG changeset patch
# User jwe
# Date 821189925 0
#      Tue Jan 09 12:18:45 1996 +0000
# Node ID a744f4d0ba5927b80bfacdc64e69471a5b3f0000
# Parent  227706b05144702b59c0b35fdd05c57d7d3ebffd
[project @ 1996-01-09 12:16:29 by jwe]

diff --git a/liboctave/CmplxAEPBAL.cc b/liboctave/CmplxAEPBAL.cc
--- a/liboctave/CmplxAEPBAL.cc
+++ b/liboctave/CmplxAEPBAL.cc
@@ -24,16 +24,18 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <string>
+
 #include "CmplxAEPBAL.h"
 #include "dMatrix.h"
 #include "f77-uscore.h"
 
 extern "C"
 {
   int F77_FCN (zgebal, ZGEBAL) (const char*, const int&, Complex*,
 				const int&, int&, int&, double*, int&,
@@ -41,43 +43,52 @@ extern "C"
  
   int F77_FCN (zgebak, ZGEBAK) (const char*, const char*, const int&,
 				const int&, const int&, double*, const
 				int&, Complex*, const int&, int&,
 				long, long);
 }
 
 int
-ComplexAEPBALANCE::init (const ComplexMatrix& a, const char *balance_job)
+ComplexAEPBALANCE::init (const ComplexMatrix& a, const string& balance_job)
 {
+  int a_nc = a.cols ();
 
-  int n = a.cols ();
+  if (a.rows () != a_nc)
+    {
+      (*current_liboctave_error_handler) ("AEPBALANCE requires square matrix");
+      return -1;
+    }
+
+  int n = a_nc;
 
   // Parameters for balance call.
 
   int info;
   int ilo;
   int ihi;
   double *scale = new double [n];
 
   // Copy matrix into local structure.
 
   balanced_mat = a;
 
-  F77_FCN (zgebal, ZGEBAL) (balance_job, n,
+  char bal_job = balance_job[0];
+
+  F77_FCN (zgebal, ZGEBAL) (&bal_job, n,
 			    balanced_mat.fortran_vec (), n, ilo, ihi,
 			    scale, info, 1L, 1L);
 
   // Initialize balancing matrix to identity.
 
   balancing_mat = Matrix (n, n, 0.0);
   for (int i = 0; i < n; i++)
     balancing_mat (i, i) = 1.0;
 
-  F77_FCN (zgebak, ZGEBAK) (balance_job, "R", n, ilo, ihi, scale, n, 
+  F77_FCN (zgebak, ZGEBAK) (&bal_job, "R", n, ilo, ihi, scale, n, 
 			    balancing_mat.fortran_vec (), n, info, 1L,
 			    1L);
 
   delete [] scale;
 
   return info;
 }
 
diff --git a/liboctave/CmplxAEPBAL.h b/liboctave/CmplxAEPBAL.h
--- a/liboctave/CmplxAEPBAL.h
+++ b/liboctave/CmplxAEPBAL.h
@@ -25,27 +25,29 @@ Software Foundation, 59 Temple Place - S
 #define octave_ComplexAEPBALANCE_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
+#include <string>
+
 #include "CMatrix.h"
 
 class ComplexAEPBALANCE
 {
 friend class ComplexMatrix;
 
 public:
 
   ComplexAEPBALANCE (void) { }
 
-  ComplexAEPBALANCE (const ComplexMatrix& a, const char * balance_job)
+  ComplexAEPBALANCE (const ComplexMatrix& a, const string& balance_job)
     {
       init (a, balance_job); 
     }
 
   ComplexAEPBALANCE (const ComplexAEPBALANCE& a)
     {
       balanced_mat = a.balanced_mat;
       balancing_mat = a.balancing_mat;
@@ -62,17 +64,17 @@ public:
   ComplexMatrix balanced_matrix (void) const { return balanced_mat; }
 
   ComplexMatrix balancing_matrix (void) const { return balancing_mat; }
 
   friend ostream& operator << (ostream& os, const ComplexAEPBALANCE& a);
 
 private:
 
-  int init (const ComplexMatrix& a, const char * balance_job);
+  int init (const ComplexMatrix& a, const string& balance_job);
 
   ComplexMatrix balanced_mat;
   ComplexMatrix balancing_mat;
 };
 
 #endif
 
 /*
diff --git a/liboctave/dbleAEPBAL.cc b/liboctave/dbleAEPBAL.cc
--- a/liboctave/dbleAEPBAL.cc
+++ b/liboctave/dbleAEPBAL.cc
@@ -24,35 +24,38 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <string>
+
 #include "dbleAEPBAL.h"
 #include "f77-uscore.h"
 
 extern "C"
 {
   int F77_FCN (dgebal, DGEBAL) (const char*, const int&, double*,
 				const int&, int&, int&, double*,
 				int&, long, long);
 
   int F77_FCN (dgebak, DGEBAK) (const char*, const char*, const int&,
 				const int&, const int&, double*,
 				const int&, double*, const int&,
 				int&, long, long);
 }
 
 int
-AEPBALANCE::init (const Matrix& a, const char *balance_job)
+AEPBALANCE::init (const Matrix& a, const string& balance_job)
 {
   int a_nc = a.cols ();
+
   if (a.rows () != a_nc)
     {
       (*current_liboctave_error_handler) ("AEPBALANCE requires square matrix");
       return -1;
     }
 
   int n = a_nc;
 
@@ -62,27 +65,29 @@ AEPBALANCE::init (const Matrix& a, const
   int ilo;
   int ihi;
   double *scale = new double [n];
 
   // Copy matrix into local structure.
 
   balanced_mat = a;
 
-  F77_FCN (dgebal, DGEBAL) (balance_job, n,
+  char bal_job = balance_job[0];
+
+  F77_FCN (dgebal, DGEBAL) (&bal_job, n,
 			    balanced_mat.fortran_vec (), n, ilo, ihi,
 			    scale, info, 1L, 1L);
 
   // Initialize balancing matrix to identity.
 
   balancing_mat = Matrix (n, n, 0.0);
   for (int i = 0; i < n; i++)
     balancing_mat.elem (i ,i) = 1.0;
 
-  F77_FCN (dgebak, DGEBAK) (balance_job, "R", n, ilo, ihi, scale, n,
+  F77_FCN (dgebak, DGEBAK) (&bal_job, "R", n, ilo, ihi, scale, n,
 			    balancing_mat.fortran_vec (), n, info, 1L,
 			    1L);
 
   delete [] scale;
 
   return info;
 }
 
diff --git a/liboctave/dbleAEPBAL.h b/liboctave/dbleAEPBAL.h
--- a/liboctave/dbleAEPBAL.h
+++ b/liboctave/dbleAEPBAL.h
@@ -25,27 +25,29 @@ Software Foundation, 59 Temple Place - S
 #define octave_AEPBALANCE_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
+#include <string>
+
 #include "dMatrix.h"
 
 class AEPBALANCE
 {
 friend class Matrix;
 
 public:
 
   AEPBALANCE (void) { }
 
-  AEPBALANCE (const Matrix& a,const char * balance_job)
+  AEPBALANCE (const Matrix& a,const string& balance_job)
     {
       init (a, balance_job); 
     }
 
   AEPBALANCE (const AEPBALANCE& a)
     {
       balanced_mat = a.balanced_mat;
       balancing_mat = a.balancing_mat;
@@ -62,17 +64,17 @@ public:
   Matrix balanced_matrix (void) const { return balanced_mat; }
 
   Matrix balancing_matrix (void) const { return balancing_mat; }
 
   friend ostream& operator << (ostream& os, const AEPBALANCE& a);
 
 private:
 
-  int init (const Matrix& a, const char * balance_job);
+  int init (const Matrix& a, const string& balance_job);
 
   Matrix balanced_mat;
   Matrix balancing_mat;
 };
 
 #endif
 
 /*
diff --git a/liboctave/dbleGEPBAL.cc b/liboctave/dbleGEPBAL.cc
--- a/liboctave/dbleGEPBAL.cc
+++ b/liboctave/dbleGEPBAL.cc
@@ -26,16 +26,18 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cmath>
 
+#include <string>
+
 #include "dbleGEPBAL.h"
 #include "f77-uscore.h"
 
 extern "C"
 {
   int F77_FCN (dgebak, DGEBAK) (const char*, const char*, const int&,
 				const int&, const int&, double*,
 				const int&, double*, const int&, int&,
@@ -51,21 +53,22 @@ extern "C"
 				double*);
 
   int F77_FCN (gradeq, GRADEQ) (const int&, const int&, double*,
 				const int&, double*, int&, int&,
 				double*, double*);
 }
 
 int
-GEPBALANCE::init (const Matrix& a, const Matrix& b, const char *balance_job)
+GEPBALANCE::init (const Matrix& a, const Matrix& b, const string& balance_job)
 {
   int a_nr = a.rows ();
   int a_nc = a.cols ();
   int b_nr = b.rows ();
+
   if (a_nr != a_nc || a_nr != b_nr || b_nr != b.cols ())
     {
       (*current_liboctave_error_handler)
 	("GEPBALANCE requires square matrices of the same size");
       return -1;
     }
 
   int n = a_nc;
@@ -104,33 +107,35 @@ GEPBALANCE::init (const Matrix& a, const
   left_balancing_mat = Matrix (n, n, 0.0);
   for (int i = 0; i < n; i++)
     left_balancing_mat (i, i) = 1.0;
 
   right_balancing_mat = left_balancing_mat;
 
   // Check for permutation option.
 
-  if (*balance_job == 'P' || *balance_job == 'B')
+  char bal_job = balance_job[0];
+
+  if (bal_job == 'P' || bal_job == 'B')
     {
       F77_FCN (reduce, REDUCE) (n, n, balanced_a_mat.fortran_vec (),
 				n, balanced_b_mat.fortran_vec (), ilo,
 				ihi, cscale, wk.fortran_vec ());
     }
   else
     {
       // Set up for scaling later.
 
       ilo = 1;
       ihi = n;
     }
 
   // Check for scaling option.
 
-  if ((*balance_job == 'S' || *balance_job == 'B') && ilo != ihi)
+  if ((bal_job == 'S' || bal_job == 'B') && ilo != ihi)
     {
       F77_FCN (scaleg, SCALEG) (n, n, balanced_a_mat.fortran_vec (), 
 				n, balanced_b_mat.fortran_vec (), ilo,
 				ihi, cscale, cperm, wk.fortran_vec ());
     }
   else
     {
       // Set scaling data to 0's.
@@ -147,33 +152,33 @@ GEPBALANCE::init (const Matrix& a, const
   for (int tmp = ilo-1; tmp < ihi; tmp++)
     {
       cscale[tmp] = pow (2.0, cscale[tmp]);
       wk.elem (tmp, 0) = pow (2.0, -wk.elem (tmp, 0));
     }
 
   // Column permutations/scaling.
 
-  F77_FCN (dgebak, DGEBAK) (balance_job, "R", n, ilo, ihi, cscale, n, 
+  F77_FCN (dgebak, DGEBAK) (&bal_job, "R", n, ilo, ihi, cscale, n, 
 			    right_balancing_mat.fortran_vec (), n,
 			    info, 1L, 1L);
     
   // Row permutations/scaling.
 
-  F77_FCN (dgebak, DGEBAK) (balance_job, "L", n, ilo, ihi,
+  F77_FCN (dgebak, DGEBAK) (&bal_job, "L", n, ilo, ihi,
 			    wk.fortran_vec (), n,
 			    left_balancing_mat.fortran_vec (), n,
 			    info, 1L, 1L);
 
   // XXX FIXME XXX --- these four lines need to be added and
   // debugged.  GEPBALANCE::init will work without them, though, so
   // here they are.
 
 #if 0
-  if ((*balance_job == 'P' || *balance_job == 'B') && ilo != ihi)
+  if ((bal_job == 'P' || bal_job == 'B') && ilo != ihi)
     {
       F77_FCN (gradeq, GRADEQ) (n, n, balanced_a_mat.fortran_vec (),
 				n, balanced_b_mat.fortran_vec (), ilo,
 				ihi, cperm, wk.fortran_vec ());
     }
 #endif
 
   // Transpose for aa = cc*a*dd convention...
diff --git a/liboctave/dbleGEPBAL.h b/liboctave/dbleGEPBAL.h
--- a/liboctave/dbleGEPBAL.h
+++ b/liboctave/dbleGEPBAL.h
@@ -25,27 +25,29 @@ Software Foundation, 59 Temple Place - S
 #define octave_GEPBALANCE_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
+#include <string>
+
 #include "dMatrix.h"
 
 class GEPBALANCE
 {
 friend class Matrix;
 
 public:
 
   GEPBALANCE (void) { }
 
-  GEPBALANCE (const Matrix& a, const Matrix& b, const char * balance_job)
+  GEPBALANCE (const Matrix& a, const Matrix& b, const string& balance_job)
     {
       init (a, b, balance_job); 
     }
 
   GEPBALANCE (const GEPBALANCE& a)
     {
       balanced_a_mat = a.balanced_a_mat;
       balanced_b_mat = a.balanced_b_mat;
@@ -68,17 +70,17 @@ public:
 
   Matrix left_balancing_matrix (void) const { return left_balancing_mat; }
   Matrix right_balancing_matrix (void) const { return right_balancing_mat; }
 
   friend ostream& operator << (ostream& os, const GEPBALANCE& a);
 
 private:
 
-  int init (const Matrix& a, const Matrix& b, const char * balance_job);
+  int init (const Matrix& a, const Matrix& b, const string& balance_job);
 
   Matrix balanced_a_mat;
   Matrix balanced_b_mat;
   Matrix left_balancing_mat;
   Matrix right_balancing_mat;
 };
 
 #endif
diff --git a/src/balance.cc b/src/balance.cc
--- a/src/balance.cc
+++ b/src/balance.cc
@@ -69,27 +69,25 @@ where OPT is an optional single characte
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 3 || nargout < 0 || nargout > 4)
     {
       print_usage ("balance");
       return retval;
     }
 
-  const char *bal_job;
-  string tstr;
+  string bal_job;
   int my_nargin;		// # args w/o optional string arg
 
   // Determine if balancing option is listed.  Set my_nargin to the
   // number of matrix inputs.
 
   if (args(nargin-1).is_string ())
     {
-      tstr = args(nargin-1).string_value ();
-      bal_job = tstr.c_str ();
+      bal_job = args(nargin-1).string_value ();
       my_nargin = nargin-1;
     }
   else
     {
       bal_job = "B";
       my_nargin = nargin;
     }
 
