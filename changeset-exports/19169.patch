# HG changeset patch
# User Rik <rik@octave.org>
# Date 1411850517 25200
#      Sat Sep 27 13:41:57 2014 -0700
# Node ID 1faae07afbd8e01934abde27237883ef9f8da60c
# Parent  9163a6e9b09631c4eed76aef23883a45e541ec15
Overhaul givens and planerot functions.

* givens.cc (Fgivens): Redo docstring.  Remove useless default to detect
nargout > 2 in switch statements.

* planerot.m: Redo docstring.  Add input validation.  Add BIST tests for input validation.

diff --git a/libinterp/corefcn/givens.cc b/libinterp/corefcn/givens.cc
--- a/libinterp/corefcn/givens.cc
+++ b/libinterp/corefcn/givens.cc
@@ -27,44 +27,56 @@ along with Octave; see the file COPYING.
 #endif
 
 #include "defun.h"
 #include "error.h"
 #include "oct-obj.h"
 
 DEFUN (givens, args, nargout,
        "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {@var{g} =} givens (@var{x}, @var{y})\n\
+@deftypefn  {Built-in Function} {@var{G} =} givens (@var{x}, @var{y})\n\
 @deftypefnx {Built-in Function} {[@var{c}, @var{s}] =} givens (@var{x}, @var{y})\n\
+Compute the Givens rotation matrix @var{G}.\n\
+\n\
 @tex\n\
-Return a $2\\times 2$ orthogonal matrix\n\
+The Givens matrix is a $2\\times 2$ orthogonal matrix\n\
 $$\n\
  G = \\left[\\matrix{c & s\\cr -s'& c\\cr}\\right]\n\
 $$\n\
 such that\n\
 $$\n\
  G \\left[\\matrix{x\\cr y}\\right] = \\left[\\matrix{\\ast\\cr 0}\\right]\n\
 $$\n\
 with $x$ and $y$ scalars.\n\
 @end tex\n\
 @ifnottex\n\
-Return a 2 by 2 orthogonal matrix\n\
-@code{@var{g} = [@var{c} @var{s}; -@var{s}' @var{c}]} such that\n\
-@code{@var{g} [@var{x}; @var{y}] = [*; 0]} with @var{x} and @var{y} scalars.\n\
+The Givens matrix is a 2 by 2 orthogonal matrix\n\
+\n\
+@code{@var{g} = [@var{c} @var{s}; -@var{s}' @var{c}]}\n\
+\n\
+such that\n\
+\n\
+@code{@var{g} [@var{x}; @var{y}] = [*; 0]}\n\
+\n\
+with @var{x} and @var{y} scalars.\n\
 @end ifnottex\n\
 \n\
+If two output arguments are requested, return the factors @var{c} and\n\
+@var{s} rather than the Givens rotation matrix.\n\
+\n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 givens (1, 1)\n\
    @result{}   0.70711   0.70711\n\
        -0.70711   0.70711\n\
 @end group\n\
 @end example\n\
+@seealso{planerot}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin != 2 || nargout > 2)
     {
@@ -92,20 +104,16 @@ givens (1, 1)\n\
                         case 1:
                           retval(0) = result;
                           break;
 
                         case 2:
                           retval(1) = result (0, 1);
                           retval(0) = result (0, 0);
                           break;
-
-                        default:
-                          error ("givens: invalid number of output arguments");
-                          break;
                         }
                     }
                 }
             }
           else
             {
               float x = args(0).float_value ();
               float y = args(1).float_value ();
@@ -122,20 +130,16 @@ givens (1, 1)\n\
                         case 1:
                           retval(0) = result;
                           break;
 
                         case 2:
                           retval(1) = result (0, 1);
                           retval(0) = result (0, 0);
                           break;
-
-                        default:
-                          error ("givens: invalid number of output arguments");
-                          break;
                         }
                     }
                 }
             }
         }
       else
         {
           if (args(0).is_complex_type () || args(1).is_complex_type ())
@@ -155,20 +159,16 @@ givens (1, 1)\n\
                         case 1:
                           retval(0) = result;
                           break;
 
                         case 2:
                           retval(1) = result (0, 1);
                           retval(0) = result (0, 0);
                           break;
-
-                        default:
-                          error ("givens: invalid number of output arguments");
-                          break;
                         }
                     }
                 }
             }
           else
             {
               double x = args(0).double_value ();
               double y = args(1).double_value ();
@@ -185,20 +185,16 @@ givens (1, 1)\n\
                         case 1:
                           retval(0) = result;
                           break;
 
                         case 2:
                           retval(1) = result (0, 1);
                           retval(0) = result (0, 0);
                           break;
-
-                        default:
-                          error ("givens: invalid number of output arguments");
-                          break;
                         }
                     }
                 }
             }
         }
     }
 
   return retval;
@@ -206,9 +202,10 @@ givens (1, 1)\n\
 
 /*
 %!assert (givens (1,1), [1, 1; -1, 1] / sqrt (2), 2*eps)
 %!assert (givens (1,0), eye (2))
 %!assert (givens (0,1), [0, 1; -1 0])
 
 %!error givens ()
 %!error givens (1)
+%!error [a,b,c] = givens (1, 1)
 */
diff --git a/scripts/linear-algebra/planerot.m b/scripts/linear-algebra/planerot.m
--- a/scripts/linear-algebra/planerot.m
+++ b/scripts/linear-algebra/planerot.m
@@ -12,37 +12,46 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{g}, @var{y}] =} planerot (@var{x})
-## Given a two-element column vector, returns the
+## @deftypefn {Function File} {[@var{G}, @var{y}] =} planerot (@var{x})
+## Given a two-element column vector, return the
 ## @tex
 ## $2 \times 2$ orthogonal matrix
 ## @end tex
 ## @ifnottex
 ## 2 by 2 orthogonal matrix
 ## @end ifnottex
 ## @var{G} such that
 ## @code{@var{y} = @var{g} * @var{x}} and @code{@var{y}(2) = 0}.
 ## @seealso{givens}
 ## @end deftypefn
 
 function [G, y] = planerot (x)
+
+  if (nargin != 1)
+    print_usage ();
+  elseif (! (isvector (x) && numel (x) == 2))
+    error ("planerot: X must be a 2-element vector");
+  endif
+
   G = givens (x(1), x(2));
   y = G * x(:);
+
 endfunction
 
 
 %!test
 %! x = [3 4];
 %! [g y] = planerot (x);
 %! assert (g, [x(1) x(2); -x(2) x(1)] / sqrt (x(1)^2 + x(2)^2), 2e-8);
 %! assert (y(2), 0, 2e-8);
 
-%!error planerot ([0])
-%!error planerot ([0 0 0])
 %!error planerot ()
+%!error planerot (1,2)
+%!error <X must be a 2-element vector> planerot (ones (2,2))
+%!error <X must be a 2-element vector> planerot ([0 0 0])
 
