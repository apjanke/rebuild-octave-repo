# HG changeset patch
# User Rik <rik@octave.org>
# Date 1437971384 25200
#      Sun Jul 26 21:29:44 2015 -0700
# Node ID 905fc6b85b4c7654d295cf5395522c9ddbe88af2
# Parent  755ba248fb4ada6b6ad46033b516d1f18cf0456a
build: Consolidate __errcomm__.m and __errplot__.m to one file.


* __errplot__.m: Incorporate __errcomm__ into file as __errplot__().
Rename existing __errplot__ to __do_errplot__.

* scripts/plot/draw/private/__errcomm__.m: Delete file.

* scripts/plot/draw/module.mk: Remove __errcomm__.m from build system.

* errorbar.m, loglogerr.m, semilogxerr.m, semilogyerr.m: Call __errplot__
instead of __errcomm__.

* __pltopt__.m: Check for __do_errplot__ caller rather than __errplot__.

diff --git a/scripts/plot/draw/errorbar.m b/scripts/plot/draw/errorbar.m
--- a/scripts/plot/draw/errorbar.m
+++ b/scripts/plot/draw/errorbar.m
@@ -173,17 +173,17 @@ function h = errorbar (varargin)
 
   oldfig = [];
   if (! isempty (hax))
     oldfig = get (0, "currentfigure");
   endif
   unwind_protect
     hax = newplot (hax);
 
-    htmp = __errcomm__ ("errorbar", hax, varargin{:});
+    htmp = __errplot__ ("errorbar", hax, varargin{:});
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
   if (nargout > 0)
     h = htmp;
diff --git a/scripts/plot/draw/loglogerr.m b/scripts/plot/draw/loglogerr.m
--- a/scripts/plot/draw/loglogerr.m
+++ b/scripts/plot/draw/loglogerr.m
@@ -61,17 +61,17 @@ function h = loglogerr (varargin)
   endif
   unwind_protect
     hax = newplot (hax);
 
     set (hax, "xscale", "log", "yscale", "log");
     if (! ishold (hax))
       set (hax, "xminortick", "on", "yminortick", "on");
     endif
-    htmp = __errcomm__ ("loglogerr", hax, varargin{:});
+    htmp = __errplot__ ("loglogerr", hax, varargin{:});
 
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
   if (nargout > 0)
diff --git a/scripts/plot/draw/module.mk b/scripts/plot/draw/module.mk
--- a/scripts/plot/draw/module.mk
+++ b/scripts/plot/draw/module.mk
@@ -1,17 +1,16 @@
 FCN_FILE_DIRS += \
   scripts/plot/draw \
   scripts/plot/draw/private
 
 scripts_plot_draw_PRIVATE_FCN_FILES = \
   scripts/plot/draw/private/__add_datasource__.m \
   scripts/plot/draw/private/__bar__.m \
   scripts/plot/draw/private/__contour__.m \
-  scripts/plot/draw/private/__errcomm__.m \
   scripts/plot/draw/private/__errplot__.m \
   scripts/plot/draw/private/__ezplot__.m \
   scripts/plot/draw/private/__interp_cube__.m \
   scripts/plot/draw/private/__line__.m \
   scripts/plot/draw/private/__marching_cube__.m \
   scripts/plot/draw/private/__patch__.m \
   scripts/plot/draw/private/__pie__.m \
   scripts/plot/draw/private/__plt__.m \
diff --git a/scripts/plot/draw/private/__errcomm__.m b/scripts/plot/draw/private/__errcomm__.m
deleted file mode 100644
--- a/scripts/plot/draw/private/__errcomm__.m
+++ /dev/null
@@ -1,80 +0,0 @@
-## Copyright (C) 2001-2015 Teemu Ikonen
-##
-## This file is part of Octave.
-##
-## Octave is free software; you can redistribute it and/or modify it
-## under the terms of the GNU General Public License as published by
-## the Free Software Foundation; either version 3 of the License, or (at
-## your option) any later version.
-##
-## Octave is distributed in the hope that it will be useful, but
-## WITHOUT ANY WARRANTY; without even the implied warranty of
-## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-## General Public License for more details.
-##
-## You should have received a copy of the GNU General Public License
-## along with Octave; see the file COPYING.  If not, see
-## <http://www.gnu.org/licenses/>.
-
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __errcomm__ (@var{caller}, @var{hax}, @dots{})
-## Undocumented internal function.
-## @end deftypefn
-
-## Created: 20.02.2001
-## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
-## Keywords: errorbar, plotting
-
-function retval = __errcomm__ (caller, hax, varargin)
-
-  if (nargin < 4)
-    print_usage (caller);
-  endif
-
-  retval = [];
-  data = cell (6,1);
-  nargs = numel (varargin);
-  k = 1;
-  while (k <= nargs)
-    arg = varargin{k++};
-    if (! isnumeric (arg))
-      error ("%s: data argument %d must be numeric", caller, k-1);
-    endif
-    if (isvector (arg))
-      arg = arg(:);
-    endif
-    sz = size (arg);
-    ndata = 1;
-    data{ndata} = arg;
-    while (k <= nargs)
-      arg = varargin{k++};
-      if (ischar (arg) || iscellstr (arg))
-        retval(end+1,1) = __errplot__(arg, hax, data{1:ndata});
-        break;
-      endif
-      if (! isnumeric (arg))
-        error ("%s: data argument %d must be numeric", caller, k-1);
-      endif
-      if (isvector (arg))
-        arg = arg(:);
-      endif
-      if (! isscalar (arg) && ((isvector (arg) && numel (arg) != prod (sz))
-          || any (size (arg) != sz)))
-        error ("%s: size of argument %d does not match others", caller, k-1);
-      endif
-      data{++ndata} = arg;
-      if (ndata > 6)
-        error ("%s: too many arguments to plot", caller);
-      endif
-    endwhile
-  endwhile
-
-  ## No format code found, use yerrorbar
-  if (! (ischar (arg) || iscellstr (arg)))
-    retval = [retval; __errplot__("~", hax, data{1:ndata})];
-  endif
-
-  drawnow ();
-
-endfunction
-
diff --git a/scripts/plot/draw/private/__errplot__.m b/scripts/plot/draw/private/__errplot__.m
--- a/scripts/plot/draw/private/__errplot__.m
+++ b/scripts/plot/draw/private/__errplot__.m
@@ -19,20 +19,72 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{h} =} __errplot__ (@var{fstr}, @var{hax}, @dots{})
 ## Undocumented internal function.
 ## @end deftypefn
 
 ## Created: 18.7.2000
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
+function retval = __errplot__ (caller, hax, varargin)
 
-function h = __errplot__ (fstr, hax, varargin)
+  if (nargin < 4)
+    print_usage (caller);
+  endif
 
-  fmt = __pltopt__ ("__errplot__", fstr);
+  retval = [];
+  data = cell (6,1);
+  nargs = numel (varargin);
+  k = 1;
+  while (k <= nargs)
+    arg = varargin{k++};
+    if (! isnumeric (arg))
+      error ("%s: data argument %d must be numeric", caller, k-1);
+    endif
+    if (isvector (arg))
+      arg = arg(:);
+    endif
+    sz = size (arg);
+    ndata = 1;
+    data{ndata} = arg;
+    while (k <= nargs)
+      arg = varargin{k++};
+      if (ischar (arg) || iscellstr (arg))
+        retval(end+1,1) = __do_errplot__(arg, hax, data{1:ndata});
+        break;
+      endif
+      if (! isnumeric (arg))
+        error ("%s: data argument %d must be numeric", caller, k-1);
+      endif
+      if (isvector (arg))
+        arg = arg(:);
+      endif
+      if (! isscalar (arg) && ((isvector (arg) && numel (arg) != prod (sz))
+          || any (size (arg) != sz)))
+        error ("%s: size of argument %d does not match others", caller, k-1);
+      endif
+      data{++ndata} = arg;
+      if (ndata > 6)
+        error ("%s: too many arguments to plot", caller);
+      endif
+    endwhile
+  endwhile
+
+  ## No format code found, use yerrorbar
+  if (! (ischar (arg) || iscellstr (arg)))
+    retval = [retval; __do_errplot__("~", hax, data{1:ndata})];
+  endif
+
+  drawnow ();
+
+endfunction
+
+function h = __do_errplot__ (fstr, hax, varargin)
+
+  fmt = __pltopt__ ("__do_errplot__", fstr);
 
   ## Set the plot type based on linestyle.
   switch (fmt.errorstyle)
     case "~"
       ifmt = "yerr";
     case ">"
       ifmt = "xerr";
     case "~>"
@@ -61,17 +113,17 @@ function h = __errplot__ (fstr, hax, var
     else
       ls = fmt.linestyle;
       mk = fmt.marker;
     endif
 
     ## Must occur after __next_line_color__ in order to work correctly.
     hg = hggroup ("parent", hax);
     h = [h; hg];
-    args = __add_datasource__ ("__errplot__", hg,
+    args = __add_datasource__ ("__do_errplot__", hg,
                                {"x", "y", "l", "u", "xl", "xu"});
 
     hl = [(__line__ (hg, "color", lc, "linestyle", "-", "marker", "none")),
           (__line__ (hg, "color", lc, "linestyle", ls, "marker", mk))];
 
     switch (numel (varargin))
       case 2
         ydata = varargin{1}(:,i);
diff --git a/scripts/plot/draw/semilogxerr.m b/scripts/plot/draw/semilogxerr.m
--- a/scripts/plot/draw/semilogxerr.m
+++ b/scripts/plot/draw/semilogxerr.m
@@ -64,17 +64,17 @@ function h = semilogxerr (varargin)
   unwind_protect
     hax = newplot (hax);
 
     set (hax, "xscale", "log");
     if (! ishold (hax))
       set (hax, "xminortick", "on");
     endif
 
-    htmp = __errcomm__ ("semilogxerr", hax, varargin{:});
+    htmp = __errplot__ ("semilogxerr", hax, varargin{:});
 
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
   if (nargout > 0)
diff --git a/scripts/plot/draw/semilogyerr.m b/scripts/plot/draw/semilogyerr.m
--- a/scripts/plot/draw/semilogyerr.m
+++ b/scripts/plot/draw/semilogyerr.m
@@ -64,17 +64,17 @@ function h = semilogyerr (varargin)
   unwind_protect
     hax = newplot (hax);
 
     set (hax, "yscale", "log");
     if (! ishold (hax))
       set (hax, "yminortick", "on");
     endif
 
-    htmp = __errcomm__ ("semilogyerr", hax, varargin{:});
+    htmp = __errplot__ ("semilogyerr", hax, varargin{:});
 
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
   if (nargout > 0)
diff --git a/scripts/plot/util/__pltopt__.m b/scripts/plot/util/__pltopt__.m
--- a/scripts/plot/util/__pltopt__.m
+++ b/scripts/plot/util/__pltopt__.m
@@ -121,17 +121,17 @@ function [options, valid] = __pltopt1__ 
 
   options = __default_plot_options__ ();
   valid = true;
 
   have_linestyle = false;
   have_marker = false;
 
   ## If called by __errplot__, extract the linestyle before proceeding.
-  if (strcmp (caller, "__errplot__"))
+  if (strcmp (caller, "__do_errplot__"))
     if (strncmp (opt, "#~>", 3))
       n = 3;
     elseif (strncmp (opt, "#~", 2) || strncmp (opt, "~>", 2))
       n = 2;
     elseif (strncmp (opt, "~", 1) || strncmp (opt, ">", 1)
             || strncmp (opt, "#", 1))
       n = 1;
     else
@@ -253,17 +253,17 @@ endfunction
 %! assert (opts.marker, "s");
 %!test
 %! opts = __pltopt__ ("abc", ";Title;");
 %! assert (opts.key, "Title");
 %! assert (opts.color, []);
 %! assert (opts.linestyle, []);
 %! assert (opts.marker, []);
 %!test
-%! opts = __pltopt__ ("__errplot__", "~>r");
+%! opts = __pltopt__ ("__do_errplot__", "~>r");
 %! assert (opts.errorstyle, "~>");
 %! assert (opts.color, [1 0 0 ]);
 %! assert (opts.linestyle, []);
 %! assert (opts.marker, []);
 
 ## Test input validation
 %!error <argument must be a character string or cell array> __pltopt__ ("abc", 1)
 %!error <unfinished key label> __pltopt__ ("abc", "rx;my_title", true)
