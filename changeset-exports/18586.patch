# HG changeset patch
# User Rik <rik@octave.org>
# Date 1395520901 25200
#      Sat Mar 22 13:41:41 2014 -0700
# Node ID 3985333e13fa4627f3d2b4d4cc05efcdbb680237
# Parent  70cff922a42dfe472b09f6ac3e0c605fec587fe8
# Parent  e7b347dcfc635b1daab33942eb2bb8e88bde275e
maint: Periodic merge of gui-release to default.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -240,24 +240,24 @@ AC_ARG_ENABLE([octave-allocator],
     [use the obsolete octave_allocator class for many of Octave's objects (mostly octave_value types).  You probably do NOT want to enable this feature.])],
   [if test "$enableval" = yes; then USE_OCTAVE_ALLOCATOR=yes; fi], [])
 if test $USE_OCTAVE_ALLOCATOR = yes; then
   AC_DEFINE(USE_OCTAVE_ALLOCATOR, 1,
     [Define to 1 to use octave_allocator class.])
 fi
 
 ### Use atomic operations for internal reference counting.  This is required
-### for thread-safe behavior but incurs a significant slowdown, and is thus
-### disabled by default.
-
-USE_ATOMIC_REFCOUNT=no
+### for thread-safe behavior (Qt Handles) but incurs a significant slowdown.
+### Enabled by default until a higher performing solution can be found.
+
+USE_ATOMIC_REFCOUNT=yes
 AC_ARG_ENABLE([atomic-refcount],
-  [AS_HELP_STRING([--enable-atomic-refcount],
-    [use atomic operations for internal reference counting.  This is required for thread-safe behavior but does not by itself make Octave internals thread safe.])],
-  [if test "$enableval" = yes; then USE_ATOMIC_REFCOUNT=yes; fi], [])
+  [AS_HELP_STRING([--disable-atomic-refcount],
+    [Do not use atomic operations for internal reference counting.  This option is required for thread-safe behavior as used in the GUI's Qt plotting toolkit.  Performance for CLI-only builds is improved by disabling this feature.])],
+  [if test "$enableval" = no; then USE_ATOMIC_REFCOUNT=no; fi], [])
 if test $USE_ATOMIC_REFCOUNT = yes; then
   AC_DEFINE(USE_ATOMIC_REFCOUNT, 1,
     [Define to 1 to use atomic operations for reference counting.])
 fi
 
 ### Disable running Make in the doc directory.
 ### This is useful, for example, when building Octave on systems without TeX.
 
@@ -3070,27 +3070,29 @@ if test -n "$warn_gnuplot"; then
   AC_MSG_WARN([at the Octave prompt.])
   AC_MSG_WARN([])
   AC_MSG_WARN([Setting default value to $GNUPLOT])
   AC_MSG_WARN([])
 
   warn_msg_printed=true
 fi
 
-if test $USE_ATOMIC_REFCOUNT = yes; then
+if test $USE_ATOMIC_REFCOUNT = no; then
   AC_MSG_WARN([])
-  AC_MSG_WARN([Using atomic reference counting.])
+  AC_MSG_WARN([atomic reference counting disabled.])
   AC_MSG_WARN([This feature allows access to Octave data safely from])
-  AC_MSG_WARN([another thread, for instance from a GUI.  However this])
-  AC_MSG_WARN([results in a small performance penalty in the Octave])
-  AC_MSG_WARN([interpreter.])
+  AC_MSG_WARN([another thread, and is required when using the GUI's Qt toolkit])
+  AC_MSG_WARN([for plotting.])
   AC_MSG_WARN([])
+fi
+if test $USE_ATOMIC_REFCOUNT = yes; then
   if test $USE_OCTAVE_ALLOCATOR = yes; then
-    AC_MSG_WARN([Thread-safe behavior is not guaranteed unless you also])
-    AC_MSG_WARN([disable the use of the octave_allocator class.])
+    AC_MSG_WARN([Using atomic reference counting.])
+    AC_MSG_WARN([Thread-safe behavior is not guaranteed unless the])
+    AC_MSG_WARN([octave_allocator class is also disabled.])
     AC_MSG_WARN([])
   fi
   warn_msg_printed=true
 fi
 
 if $warn_msg_printed; then
   AC_MSG_NOTICE([])
   AC_MSG_NOTICE([NOTE: Libraries or auxiliary programs may be skipped if they are])
diff --git a/doc/interpreter/contributors.in b/doc/interpreter/contributors.in
--- a/doc/interpreter/contributors.in
+++ b/doc/interpreter/contributors.in
@@ -68,16 +68,17 @@ Pieter Eendebak
 Paul Eggert
 Stephen Eglen
 Peter Ekberg
 Rolf Fabian
 Gunnar FarnebÃ¤ck
 Stephen Fegan
 Ramon Garcia Fernandez
 Torsten Finke
+Colin Foster
 Jose Daniel Munoz Frias
 Brad Froehle
 Castor Fu
 Eduardo Gallestey
 Walter Gautschi
 Klaus Gebhardt
 Driss Ghaddab
 Eugenio Gianniti 
diff --git a/scripts/gui/listdlg.m b/scripts/gui/listdlg.m
--- a/scripts/gui/listdlg.m
+++ b/scripts/gui/listdlg.m
@@ -89,31 +89,31 @@ function [sel, ok] = listdlg (varargin)
   initialvalue = 1;
   name = "";
   prompt = {};
   okstring = "OK";
   cancelstring = "Cancel";
 
   ## handle key, value pairs
   for i = 1:2:nargin-1
-    if (strcmp (varargin{i}, "ListString"))
+    if (strcmpi (varargin{i}, "ListString"))
       listcell = varargin{i+1};
-    elseif (strcmp (varargin{i}, "SelectionMode"))
+    elseif (strcmpi (varargin{i}, "SelectionMode"))
       selmode = varargin{i+1};
-    elseif (strcmp (varargin{i}, "ListSize"))
+    elseif (strcmpi (varargin{i}, "ListSize"))
       listsize = varargin{i+1};
-    elseif (strcmp (varargin{i}, "InitialValue"))
+    elseif (strcmpi (varargin{i}, "InitialValue"))
       initialvalue = varargin{i+1};
-    elseif (strcmp (varargin{i}, "Name"))
+    elseif (strcmpi (varargin{i}, "Name"))
       name = varargin{i+1};
-    elseif (strcmp (varargin{i}, "PromptString"))
+    elseif (strcmpi (varargin{i}, "PromptString"))
       prompt = varargin{i+1};
-    elseif (strcmp (varargin{i}, "OKString"))
+    elseif (strcmpi (varargin{i}, "OKString"))
       okstring = varargin{i+1};
-    elseif (strcmp (varargin{i}, "CancelString"))
+    elseif (strcmpi (varargin{i}, "CancelString"))
       cancelstring = varargin{i+1};
     endif
   endfor
 
   ## make sure prompt strings are a cell array
   if (! iscell (prompt))
     prompt = {prompt};
   endif
@@ -125,36 +125,40 @@ function [sel, ok] = listdlg (varargin)
 
   ## make sure valid selection mode
   if (! strcmp (selmode, "Multiple") && ! strcmp (selmode, "Single"))
     error ("invalid SelectionMode");
   endif
 
   if (__octave_link_enabled__ ())
     [sel, ok] = __octave_link_list_dialog__ (listcell, selmode, listsize,
-                                            initialvalue, name, prompt,
-                                            okstring, cancelstring);
+                                             initialvalue, name, prompt,
+                                             okstring, cancelstring);
   elseif (__have_feature__ ("JAVA"))
     ## transform matrices to cell arrays of strings
     ## swap width and height to correct calling format for JDialogBox
     listsize = {num2str(listsize(2)), num2str(listsize(1))};
     initialvalue = arrayfun (@num2str, initialvalue, "UniformOutput", false);
     if (isempty (prompt))
       prompt = {""};
     endif
 
     ret = javaMethod ("listdlg", "org.octave.JDialogBox", listcell,
                       selmode, listsize, initialvalue, name, prompt,
                       okstring, cancelstring);
 
     if (numel (ret) > 0)
-      sel = ret;
+      sel = zeros (1, numel (ret));
+      ## for loop needed to convert Java array ret into Octave double sel
+      for i = 1:numel (ret)
+        sel(i) = ret(i);
+      endfor
       ok = 1;
     else
-      sel = {};
+      sel = [];
       ok = 0;
     endif
   else
     error ("listdlg is not available in this version of Octave");
   endif
 
 endfunction
 
diff --git a/scripts/gui/waitbar.m b/scripts/gui/waitbar.m
--- a/scripts/gui/waitbar.m
+++ b/scripts/gui/waitbar.m
@@ -125,19 +125,17 @@ function h = waitbar (varargin)
     ## Cache the axes and patch handles.
     set (hf, "__guidata__", [ax hp]);
 
     if (! (ischar (msg) || iscellstr (msg)))
       msg = "Please wait...";
     endif
     title (ax, msg);
 
-    if (! isempty (cf))
-      set (0, "currentfigure", cf);
-    endif
+    set (0, "currentfigure", cf);
   endif
 
   drawnow ();
 
   if (nargout > 0)
     h = hf;
   endif
 
diff --git a/scripts/io/textscan.m b/scripts/io/textscan.m
--- a/scripts/io/textscan.m
+++ b/scripts/io/textscan.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2010-2013 Ben Abbott
+## Copyright (C) 2010-2014 Ben Abbott
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -130,16 +130,17 @@ function [C, position] = textscan (fid, 
   else
     ## Check if there's at least one string format specifier
     has_str_fmt = regexp (format, '%[*]?\d*s', "once");
     ## If there is a string format AND whitespace value = empty,
     ## don't add a space (char(32)) to whitespace
     if (! (isempty (args{ipos+1}) && has_str_fmt))
       args{ipos+1} = unique ([" ", args{ipos+1}]);
     endif
+    whitespace = args{ipos+1};
   endif
 
   if (! any (strcmpi (args, "delimiter")))
     ## Matlab says default delimiter = whitespace.
     ## strread() will pick this up further
     args(end+1:end+2) = {'delimiter', ""};
     delimiter = "";
   else
@@ -656,8 +657,12 @@ endfunction
 %! msg1 = "textscan: character value required for EndOfLine";
 %! try
 %! A = textscan (fid, "%f", "EndOfLine", 33);
 %! end_try_catch;
 %! fclose (fid);
 %! unlink (f);
 %! assert (msg1, lasterr);
 
+%% Bug #41824
+%!test
+%! assert (textscan ("123", "", "whitespace", " "){:}, 123);
+
diff --git a/scripts/java/org/octave/JDialogBox.java b/scripts/java/org/octave/JDialogBox.java
--- a/scripts/java/org/octave/JDialogBox.java
+++ b/scripts/java/org/octave/JDialogBox.java
@@ -1,10 +1,11 @@
 /*
 
+Copyright (C) 2014 Colin Foster
 Copyright (C) 2010, 2013 Martin Hepperle
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 3 of the License, or (at
 your option) any later version.
@@ -546,34 +547,38 @@ public class JDialogBox
           }
 
         String lst[] = new String[list.length];
 
         for (int i = 0; i < list.length; i++)
           {
             lst[i] = theTranslator.replace (list[i]);
           }
+
+        JScrollPane scrollPane = new JScrollPane();
         m_List = new JList (lst);
+        scrollPane.setViewportView(m_List);
+
 
         // replace ugly monospaced font
-        m_List.setFont (p.getFont ());
+        scrollPane.setFont (p.getFont ());
 
-        m_List.setMinimumSize (new Dimension (Math.max (1,
-                                                        Integer.parseInt (RowsCols[0].toString ())),
-                                              Math.max (1,
-                                                        Integer.parseInt (RowsCols[1].toString ()))));
-        m_List.setPreferredSize (new Dimension (Math.max (1,
-                                                          Integer.parseInt (RowsCols[1].toString ())),
-                                                Math.max (1,
-                                                          Integer.parseInt (RowsCols[0].toString ()))));
-        m_List.setBorder (new javax.swing.border.EtchedBorder ());
+        scrollPane.setMinimumSize (
+          new Dimension (
+            Math.max (1, Integer.parseInt (RowsCols[0].toString ())),
+            Math.max (1, Integer.parseInt (RowsCols[1].toString ()))));
+        scrollPane.setPreferredSize (
+          new Dimension (
+            Math.max (1, Integer.parseInt (RowsCols[1].toString ())),
+            Math.max (1, Integer.parseInt (RowsCols[0].toString ()))));
+        scrollPane.setBorder (new javax.swing.border.EtchedBorder ());
 
         gbc.gridy = message.length;
         gbc.fill = GridBagConstraints.HORIZONTAL;
-        p.add (m_List, gbc);
+        p.add (scrollPane, gbc);
 
         if (on.toLowerCase ().equals ("single"))
           {
             // single selection list
             m_List.setSelectionMode (ListSelectionModel.SINGLE_SELECTION);
 
             m_List.setSelectedIndex (Integer.parseInt (
                                                        defaults[0].toString ()) - 1);
