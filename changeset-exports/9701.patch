# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1254906534 -7200
#      Wed Oct 07 11:08:54 2009 +0200
# Node ID 531280b07625a9cdd5632b5985289a4c42170009
# Parent  95a30d00f7798c47e466da88db8d2490735176d2
implement fskipl

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2009-10-07  Jaroslav Hajek  <highegg@gmail.com>
+
+	* interpreter/io.txi: Add reference to fskipl.
+
 2009-09-30  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/data.txi (Built-in Data Types):
 	Document bitpack and bitunpack.
 	* interpreter/plot.txi: Delete spurious {}.  Update menus.  Fix
 	cross-referencing.
 	* interpreter/octave.texi: Update plotting sub-menus in detailed menu.
 
diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -364,16 +364,18 @@ fclose (fid);
 @noindent
 This of course assumes that the file @samp{free.txt} exists and contains
 the line @samp{Free Software is needed for Free Science}.
 
 @DOCSTRING(fgetl)
 
 @DOCSTRING(fgets)
 
+@DOCSTRING(fskipl)
+
 @node Formatted Output
 @subsection Formatted Output
 
 This section describes how to call @code{printf} and related functions.
 
 The following functions are available for formatted output.  They are
 modelled after the C language functions of the same name, but they
 interpret the format template differently in order to improve the
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2009-10-07  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-stream.cc (octave_base_stream::skipl,
+	octave_stream::skipl (long, ...), octave_stream::skipl (const
+	octave_value&, ...)): New methods.
+	* oct-stream.h: Declare them.
+	* file-io.cc (Ffskipl): New DEFUN.
+
 2009-10-07  John W. Eaton  <jwe@octave.org>
 
 	* OPERATORS/op-str-str.cc (DEFUNOP (transpose, char_matrix_str)):
 	Update for octave_value constructor changes.
 
 2009-10-05  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov.cc (octave_value::assign): Do not gripe "assignment failed" if
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -391,16 +391,57 @@ If there are no more characters to read,
 	}
     }
   else
     print_usage ();
 
   return retval;
 }
 
+DEFUN (fskipl, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} fskipl (@var{fid}, @var{count})\n\
+Skips a given number of lines, i.e. discards characters until an end-of-line\n\
+is met exactly @var{count}-times, or end-of-file occurs.\n\
+Returns the number of lines skipped (end-of-line sequences encountered).\n\
+If @var{count} is omitted, it defaults to 1. @var{count} may also be\n\
+@code{Inf}, in which case lines are skipped to the end of file.\n\
+This form is suitable for counting lines in a file.\n\
+@seealso{fgetl, fgets}\n\
+@end deftypefn")
+{
+  static std::string who = "fskipl";
+
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1 || nargin == 2)
+    {
+      octave_stream os = octave_stream_list::lookup (args(0), who);
+
+      if (! error_state)
+	{
+	  octave_value count_arg = (nargin == 2) ? args(1) : octave_value ();
+
+	  bool err = false;
+
+	  long tmp = os.skipl (count_arg, err, who);
+
+	  if (! (error_state || err))
+            retval = tmp;
+	}
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
+
 static octave_stream
 do_stream_open (const std::string& name, const std::string& mode,
 		const std::string& arch, int& fid)
 {
   octave_stream retval;
 
   fid = -1;
 
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -1065,16 +1065,75 @@ octave_base_stream::getl (octave_idx_typ
 }
 
 std::string
 octave_base_stream::gets (octave_idx_type max_len, bool& err, const std::string& who)
 {
   return do_gets (max_len, err, false, who);
 }
 
+long
+octave_base_stream::skipl (long num, bool& err, const std::string& who)
+{
+  long cnt = -1;
+
+  if ((interactive || forced_interactive) && file_number () == 0)
+    {
+      ::error ("%s: unable to read from stdin while running interactively",
+	       who.c_str ());
+	     
+      return count;
+    }
+
+  err = false;
+
+  std::istream *isp = input_stream ();
+
+  if (isp)
+    {
+      std::istream& is = *isp;
+
+      int c = 0, lastc = -1;
+      cnt = 0;
+
+      while (is && (c = is.get ()) != EOF)
+        {
+          // Handle CRLF, CR, or LF as line ending.
+
+          if (c == '\r' || (c == '\n' && lastc != '\r'))
+            {
+              if (++cnt == num)
+                break;
+            }
+
+          lastc = c;
+        }
+
+      // Maybe eat the following \n if \r was just met.
+      if (c == '\r' && is.peek () == '\n')
+       is.get ();
+
+      if (is.bad ())
+        {
+          err = true;
+          error (who, "read error");
+        }
+
+      if (err)
+        cnt = -1;
+    }
+  else
+    {
+      err = true;
+      invalid_operation (who, "reading");
+    }
+
+  return cnt;
+}
+
 #define OCTAVE_SCAN(is, fmt, arg) octave_scan (is, fmt, arg)
 
 template <class T>
 std::istream&
 octave_scan_1 (std::istream& is, const scanf_format_elt& fmt, T* valptr)
 {
   T& ref = *valptr;
 
@@ -2913,16 +2972,60 @@ octave_stream::gets (const octave_value&
     }
 
   if (! error_state)
     retval = gets (max_len, err, who);
 
   return retval;
 }
 
+long
+octave_stream::skipl (long count, bool& err, const std::string& who)
+{
+  long retval = -1;
+
+  if (stream_ok ())
+    retval = rep->skipl (count, err, who);
+
+  return retval;
+}
+
+long
+octave_stream::skipl (const octave_value& tc_count, bool& err, const std::string& who)
+{
+  long retval = -1;
+
+  err = false;
+
+  int conv_err = 0;
+
+  int count = 1;
+
+  if (tc_count.is_defined ())
+    {
+      if (tc_count.is_scalar_type () && xisinf (tc_count.scalar_value ()))
+        count = -1;
+      else
+        {
+          count = convert_to_valid_int (tc_count, conv_err);
+
+          if (conv_err || count < 0)
+            {
+              err = true;
+              ::error ("%s: invalid number of lines specified", who.c_str ());
+            }
+        }
+    }
+
+  if (! error_state)
+    retval = skipl (count, err, who);
+
+  return retval;
+}
+
 int
 octave_stream::seek (long offset, int origin)
 {
   int status = -1;
 
   if (stream_ok ())
     {
       clearerr ();
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -433,16 +433,17 @@ private:
   // Functions that are defined for all input streams (input streams
   // are those that define is).
 
   std::string do_gets (octave_idx_type max_len, bool& err, bool strip_newline,
 		       const std::string& who /* = "gets" */);
 
   std::string getl (octave_idx_type max_len, bool& err, const std::string& who /* = "getl" */);
   std::string gets (octave_idx_type max_len, bool& err, const std::string& who /* = "gets" */);
+  long skipl (long count, bool& err, const std::string& who /* = "skipl" */);
 
   octave_value do_scanf (scanf_format_list& fmt_list, octave_idx_type nr, octave_idx_type nc,
 			 bool one_elt_size_spec, octave_idx_type& count,
 			 const std::string& who /* = "scanf" */);
 
   octave_value scanf (const std::string& fmt, const Array<double>& size,
 		      octave_idx_type& count, const std::string& who /* = "scanf" */);
 
@@ -496,16 +497,19 @@ public:
   std::string getl (octave_idx_type max_len, bool& err, const std::string& who /* = "getl" */);
   std::string getl (const octave_value& max_len, bool& err,
 		    const std::string& who /* = "getl" */);
 
   std::string gets (octave_idx_type max_len, bool& err, const std::string& who /* = "gets" */);
   std::string gets (const octave_value& max_len, bool& err,
 		    const std::string& who /* = "gets" */);
 
+  long skipl (long count, bool& err, const std::string& who /* = "skipl" */);
+  long skipl (const octave_value& count, bool& err, const std::string& who /* = "skipl" */);
+
   int seek (long offset, int origin);
   int seek (const octave_value& offset, const octave_value& origin);
 
   long tell (void);
 
   int rewind (void);
 
   bool is_open (void) const;
