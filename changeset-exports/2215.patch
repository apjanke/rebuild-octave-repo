# HG changeset patch
# User jwe
# Date 832262200 0
#      Thu May 16 15:56:40 1996 +0000
# Node ID ab0e1fd337f5df3900e1554103ada2510de2aa28
# Parent  b5c7309168f360c567490dc78b0cc41e36784e13
[project @ 1996-05-16 15:56:40 by jwe]

diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -587,137 +587,214 @@ matrix A.  SIZE is optional.  If present
              (unless doing all character conversions, in which case a\n\
              string is returned)\n\
         NR : read as much as possible, returning a matrix with NR rows\n\
   [NR, NC] : read up to NR x NC elements, returning a matrix with NR rows\n\
  [NR, Inf] : same as NR\n\
 \n\
 If it is omitted, a value of Inf is assumed.\n\
 \n\
-The number of items successfully read is returned in COUNT")
+The number of items successfully read is returned in COUNT.\n\
+\n\
+[A, B, ...] = fscanf (FILENUM, FORMAT, \"C\")\n\
+\n\
+Read from FILENUM according to FORMAT, with each conversion specifier\n\
+in FORMAT corresponding to a single scalar return value.  This form is\n\
+more `C-like', and also compatible with previous versions of Octave")
 {
   octave_value_list retval;
 
-  retval (1) = 0.0;
-  retval (0) = Matrix ();
-
   int nargin = args.length ();
 
-  if (nargin == 2 || nargin == 3)
+  if (nargin == 3 && args(2).is_string ())
     {
       octave_stream *os = octave_stream_list::lookup (args(0));
 
       if (os)
 	{
 	  if (args(1).is_string ())
 	    {
 	      string fmt = args(1).string_value ();
 
-	      int count = 0;
-
-	      Matrix size = (nargin == 3)
-		? args(2).matrix_value () : Matrix (1, 1, octave_Inf);
-
-	      if (! error_state)
-		{
-		  octave_value tmp = os->scanf (fmt, size, count);
-
-		  retval(1) = (double) count;
-		  retval(0) = tmp;
-		}
+	      retval = os->oscanf (fmt);
 	    }
 	  else
 	    ::error ("fscanf: format must be a string");
 	}
       else
 	gripe_invalid_file_id ("fscanf");
     }
   else
-    print_usage ("fscanf");
+    {
+      retval (1) = 0.0;
+      retval (0) = Matrix ();
+
+      if (nargin == 2 || nargin == 3)
+	{
+	  octave_stream *os = octave_stream_list::lookup (args(0));
+
+	  if (os)
+	    {
+	      if (args(1).is_string ())
+		{
+		  string fmt = args(1).string_value ();
+
+		  int count = 0;
+
+		  Matrix size = (nargin == 3)
+		    ? args(2).matrix_value () : Matrix (1, 1, octave_Inf);
+
+		  if (! error_state)
+		    {
+		      octave_value tmp = os->scanf (fmt, size, count);
+
+		      retval(1) = (double) count;
+		      retval(0) = tmp;
+		    }
+		}
+	      else
+		::error ("fscanf: format must be a string");
+	    }
+	  else
+	    gripe_invalid_file_id ("fscanf");
+	}
+      else
+	print_usage ("fscanf");
+    }
 
   return retval;
 }
 
 DEFUN (sscanf, args, ,
   "[A, COUNT, ERRMSG, INDEX] = sscanf (STRING, FORMAT, SIZE)\n\
 \n\
-Read from FILENUM according to FORMAT, returning the result in the\n\
+Read from STRING according to FORMAT, returning the result in the\n\
 matrix A.  SIZE is optional.  If present, it can be one of\n\
 \n\
        Inf : read as much as possible, returning a column vector\n\
              (unless doing all character conversions, in which case a\n\
              string is returned)\n\
         NR : read as much as possible, returning a matrix with NR rows\n\
   [NR, NC] : read up to NR x NC elements, returning a matrix with NR rows\n\
  [NR, Inf] : same as NR\n\
 \n\
 If it is omitted, a value of Inf is assumed.\n\
 \n\
 The number of items successfully read is returned in COUNT.  If an\n\
 error occurs, ERRMSG contains the text of the corresponding error\n\
 message.  INDEX contains the index of the next character to be read\n\
-from STRING")
+from STRING\n\
+\n\
+[A, B, ...] = sscanf (STRING, FORMAT, \"C\")\n\
+\n\
+Read from STRING according to FORMAT, with each conversion specifier\n\
+in FORMAT corresponding to a single scalar return value.  This form is\n\
+more `C-like', and also compatible with previous versions of Octave")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
-  if (nargin == 2 || nargin == 3)
+  if (nargin == 3 && args(2).is_string ())
     {
-      retval(3) = -1.0;
-      retval(2) = "unknown error";
-      retval(1) = 0.0;
-      retval(0) = Matrix ();
-
       if (args(0).is_string ())
 	{
 	  string data = args(0).string_value ();
 
 	  octave_istrstream istr (data);
 
 	  octave_stream os (&istr, true);
 
 	  if (os)
 	    {
 	      if (args(1).is_string ())
 		{
 		  string fmt = args(1).string_value ();
 
-		  int count = 0;
-
-		  Matrix size = (nargin == 3)
-		    ? args(2).matrix_value () : Matrix (1, 1, octave_Inf);
-
-		  octave_value tmp = os.scanf (fmt, size, count);
-
-		  // XXX FIXME XXX -- is this the right thing to do?
-		  // Extract error message first, because getting
-		  // position will clear it.
-		  string errmsg = os.error ();
-
-		  retval(3) = (double) (os.tell () + 1);
-		  retval(2) = errmsg;
-		  retval(1) = (double) count;
-		  retval(0) = tmp;
+		  retval = os.oscanf (fmt);
 		}
 	      else
 		::error ("sscanf: format must be a string");
 	    }
 	  else
 	    ::error ("sscanf: unable to create temporary input buffer");
 	}
       else
 	::error ("sscanf: first argument must be a string");
     }
   else
-    print_usage ("sscanf");
+    {
+      if (nargin == 2 || nargin == 3)
+	{
+	  retval(3) = -1.0;
+	  retval(2) = "unknown error";
+	  retval(1) = 0.0;
+	  retval(0) = Matrix ();
+
+	  if (args(0).is_string ())
+	    {
+	      string data = args(0).string_value ();
+
+	      octave_istrstream istr (data);
+
+	      octave_stream os (&istr, true);
+
+	      if (os)
+		{
+		  if (args(1).is_string ())
+		    {
+		      string fmt = args(1).string_value ();
+
+		      int count = 0;
+
+		      Matrix size = (nargin == 3)
+			? args(2).matrix_value () : Matrix (1, 1, octave_Inf);
+
+		      octave_value tmp = os.scanf (fmt, size, count);
+
+		      // XXX FIXME XXX -- is this the right thing to do?
+		      // Extract error message first, because getting
+		      // position will clear it.
+		      string errmsg = os.error ();
+
+		      retval(3) = (double) (os.tell () + 1);
+		      retval(2) = errmsg;
+		      retval(1) = (double) count;
+		      retval(0) = tmp;
+		    }
+		  else
+		    ::error ("sscanf: format must be a string");
+		}
+	      else
+		::error ("sscanf: unable to create temporary input buffer");
+	    }
+	  else
+	    ::error ("sscanf: first argument must be a string");
+	}
+      else
+	print_usage ("sscanf");
+    }
 
   return retval;
 }
 
+DEFUN (scanf, args, nargout,
+  "scanf (FORMAT) is equivalent to fscanf (stdin, FORMAT)")
+{
+  int nargin = args.length ();
+
+  octave_value_list tmp_args (nargin+1, octave_value ());
+
+  tmp_args (0) = 0.0;
+  for (int i = 0; i < nargin; i++)
+    tmp_args (i+1) = args (i);
+
+  return Ffscanf (tmp_args, nargout);
+}
+
 static octave_value
 do_fread (octave_stream& os, const octave_value& size_arg,
 	  const octave_value& prec_arg, const octave_value& skip_arg,
 	  const octave_value& arch_arg, int& count)
 {
   octave_value retval;
 
   count = -1;
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -19,16 +19,18 @@ along with Octave; see the file COPYING.
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <cstring>
+
 #include <iomanip.h>
 #include <strstream.h>
 
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "str-vec.h"
 
@@ -144,51 +146,54 @@ scanf_format_list::scanf_format_list (co
   : nconv (0), curr_idx (0), list (16), buf (0)
 {
   int num_elts = 0;
 
   int n = s.length ();
 
   int i = 0;
 
+  int width = 0;
   bool discard = false;
   char modifier = '\0';
   char type = '\0';
 
   bool have_more = true;
 
   while (i < n)
     {
       have_more = true;
 
       if (! buf)
 	buf = new ostrstream ();
 
       if (s[i] == '%')
 	{
-	  process_conversion (s, i, n, discard, type, modifier, num_elts);
+	  process_conversion (s, i, n, width, discard, type, modifier,
+			      num_elts);
 	  have_more = (buf != 0);
 	}
       else
 	{
+	  width = 0;
 	  discard = false;
 	  modifier = '\0';
 	  type = '\0';
 	  *buf << s[i++];
 	}
 
       if (nconv < 0)
 	{
 	  have_more = false;
 	  break;
 	}
     }
 
   if (have_more)
-    add_elt_to_list (discard, type, modifier, num_elts);
+    add_elt_to_list (width, discard, type, modifier, num_elts);
 
   list.resize (num_elts);
 
   delete buf;
 }
 
 scanf_format_list::~scanf_format_list (void)
 {
@@ -197,31 +202,31 @@ scanf_format_list::~scanf_format_list (v
   for (int i = 0; i < n; i++)
     {
       scanf_format_elt *elt = list.elem (i);
       delete elt;
     }	
 }
 
 void
-scanf_format_list::add_elt_to_list (bool discard, char type,
+scanf_format_list::add_elt_to_list (int width, bool discard, char type,
 				    char modifier, int& num_elts)
 {
   if (buf)
     {
       *buf << ends;
 
       char *text = buf->str ();
 
       if (text)
 	{
 	  if (*text)
 	    {
 	      scanf_format_elt *elt
-		= new scanf_format_elt (text, discard, type, modifier);
+		= new scanf_format_elt (text, width, discard, type, modifier);
 
 	      if (num_elts == list.length ())
 		list.resize (2 * num_elts);
 
 	      list.elem (num_elts++) = elt;
 	    }
 	  else
 	    delete [] text;
@@ -229,20 +234,21 @@ scanf_format_list::add_elt_to_list (bool
 
       delete buf;
       buf = 0;
     }
 }
 
 void
 scanf_format_list::process_conversion (const string& s, int& i, int n,
-				       bool& discard, char& type,
+				       int& width, bool& discard, char& type,
 				       char& modifier, int& num_elts)
 
 {
+  width = 0;
   discard = false;
   modifier = '\0';
   type = '\0';
 
   *buf << s[i++];
 
   bool have_width = false;
 
@@ -261,20 +267,26 @@ scanf_format_list::process_conversion (c
 	  break;
 
 	case '0': case '1': case '2': case '3': case '4':
 	case '5': case '6': case '7': case '8': case '9':
 	  if (have_width)
 	    nconv = -1;
 	  else
 	    {
+	      char c = s[i++];
+	      width = width * 10 + c - '0';
 	      have_width = true;
-	      *buf << s[i++];
+	      *buf << c;
 	      while (i < n && isdigit (s[i]))
-		*buf << s[i++];
+		{
+		  c = s[i++];
+		  width = width * 10 + c - '0';
+		  *buf << c;
+		}
 	    }
 	  break;
 
 	case 'h': case 'l': case 'L':
 	  if (modifier != '\0')
 	    nconv = -1;
 	  else
 	    {
@@ -304,17 +316,17 @@ scanf_format_list::process_conversion (c
 	    {
 	      nconv = -1;
 	      break;
 	    }
 	  goto fini;
 
 	fini:
 	  {
-	    if (finish_conversion (s, i, n, discard, type,
+	    if (finish_conversion (s, i, n, width, discard, type,
 				   modifier, num_elts) == 0)
 	      return;
 	  }
 	  break;
 
 	default:
 	  nconv = -1;
 	  break;
@@ -324,17 +336,17 @@ scanf_format_list::process_conversion (c
 	break;
     }
 
   nconv = -1;
 }
 
 int
 scanf_format_list::finish_conversion (const string& s, int& i, int n,
-				      bool discard, char& type,
+				      int& width, bool discard, char& type,
 				      char modifier, int& num_elts)
 {
   int retval = 0;
 
   if (s[i] == '%')
     *buf << s[i++];
   else
     {
@@ -360,48 +372,38 @@ scanf_format_list::finish_conversion (co
 
 	  if (i < n && s[i] == ']')
 	    *buf << s[i++];
 
 	  if (s[i-1] != ']')
 	    retval = nconv = -1;
 	}
       else
-	{
-	  // XXX FIXME XXX -- this is a kludge, and probably not the
-	  // right thing to do here.
-
-	  if (type == 's')
-	    {
-	      *buf << 'c';
-	      i++;
-	    }
-	  else
-	    *buf << s[i++];
-	}
+	*buf << s[i++];
 
       nconv++;
 
       if (nconv > 0)
-	add_elt_to_list (discard, type, modifier, num_elts);
+	add_elt_to_list (width, discard, type, modifier, num_elts);
     }
 
   return retval;
 }
 
 void
 scanf_format_list::printme (void) const
 {
   int n = list.length ();
 
   for (int i = 0; i < n; i++)
     {
       scanf_format_elt *elt = list.elem (i);
 
-      cerr << elt->discard << "\t"
+      cerr << elt->width << "\t"
+	   << elt->discard << "\t"
 	   << elt->type << "\t"
 	   << elt->modifier << "\t"
 	   << undo_string_escapes (elt->text) << "\n";
     }
 }
 
 bool
 scanf_format_list::all_character_conversions (void)
@@ -737,17 +739,17 @@ octave_base_stream::do_gets (int max_len
   string retval;
 
   err = false;
 
   istream *isp = input_stream ();
 
   if (isp)
     {
-      istream is = *isp;
+      istream& is = *isp;
 
       // XXX FIXME XXX -- this should probably be converted to use
       // sstream when that is available.
       ostrstream buf;
 
       int c = 0;
       int count = 0;
       int newline_stripped = 0;
@@ -862,17 +864,17 @@ octave_base_stream::do_read (int nr, int
     {
       mval.resize (32, 1, 0.0);
       data = mval.fortran_vec ();
       max_size = 32;
     }
 
   if (isp)
     {
-      istream is = *isp;
+      istream& is = *isp;
 
       for (;;)
 	{
 	  // XXX FIXME XXX -- maybe there should be a special case for
 	  // skip == 0.
 
 	  if (is)
 	    {
@@ -1032,18 +1034,16 @@ octave_base_stream::read (const Matrix& 
     invalid_operation ("fread", "reading");
 
   return retval;
 }
 
 #define do_scanf_conv(is, fmt, valptr, mval, data, idx, max_size, discard) \
   do \
     { \
-      is.clear (); \
- \
       is.scan (fmt, valptr); \
  \
       if (is) \
 	{ \
 	  if (idx == max_size && ! discard) \
 	    { \
 	      max_size *= 2; \
  \
@@ -1099,29 +1099,24 @@ octave_base_stream::do_scanf (scanf_form
     {
       mval.resize (32, 1, 0.0);
       data = mval.fortran_vec ();
       max_size = 32;
     }
 
   if (isp)
     {
-      istream is = *isp;
+      istream& is = *isp;
 
       const scanf_format_elt *elt = fmt_list.first ();
 
       ios::fmtflags flags = is.flags ();
 
       for (;;)
 	{
-	  // Restore format flags in case we had to change them (note
-	  // 'c' conversion below).
-
-	  is.setf (flags);
-
 	  if (elt)
 	    {
 	      if (nr > 0 && nc > 0 && count == max_size)
 		{
 		  final_nr = nr;
 		  final_nc = nc;
 
 		  break;
@@ -1132,18 +1127,17 @@ octave_base_stream::do_scanf (scanf_form
 	      bool discard = elt->discard;
 
 	      switch (elt->type)
 		{
 		case '%':
 		  {
 		    int dummy;
 
-		    do_scanf_conv (is, fmt, &dummy, mval, data, count,
-				   max_size, discard);
+		    is.scan (fmt, &dummy);
 		  }
 		  break;
 
 		case 'd': case 'i': case 'o': case 'u': case 'x':
 		  {
 		    int tmp;
 
 		    do_scanf_conv (is, fmt, &tmp, mval, data, count,
@@ -1171,25 +1165,65 @@ octave_base_stream::do_scanf (scanf_form
 		  break;
 
 		case 'c':
 		  is.unsetf (ios::skipws);
 		  // Fall through...
 
 		case 's':
 		  {
-		    char tmp;
-
-		    do_scanf_conv (is, fmt, &tmp, mval, data, count,
-				   max_size, discard);
+		    int len = strlen (fmt);
+		    char *tmp_fmt = new char [len+1];
+		    strcpy (tmp_fmt, fmt);
+		    if (tmp_fmt[len-1] == 's')
+		      tmp_fmt[len-1] = 'c';
+
+		    int width = elt->width ? elt->width : 1;
+
+		    char *tmp = new char [width+1];
+
+		    is.scan (tmp_fmt, tmp);
+
+		    delete [] tmp_fmt;
+
+		    tmp[width] = '\0';
+
+		    if (is)
+		      {
+			int i = 0;
+
+			if (! discard)
+			  {
+			    while (i < width && tmp[i] != '\0')
+			      {
+				if (count == max_size)
+				  {
+				    max_size *= 2;
+
+				    if (nr > 0)
+				      mval.resize (nr, max_size / nr, 0.0);
+				    else
+				      mval.resize (max_size, 1, 0.0);
+
+				    data = mval.fortran_vec ();
+				  }
+
+				data[count++] = tmp[i++];
+			      }
+			  }
+		      }
+
+		    delete [] tmp;
+
+		    is.setf (flags);
 		  }
 		  break;
 
 		case 'p': case '[':
-		  error ("fscanf: unrecognized format specifier");
+		  error ("fscanf: unsupported format specifier");
 		  break;
 
 		default:
 		  error ("fscanf: internal format error");
 		  break;
 		}
 
 	      if (! ok ())
@@ -1268,29 +1302,25 @@ octave_base_stream::do_scanf (scanf_form
 
   return retval;
 }
 
 octave_value
 octave_base_stream::scanf (const string& fmt, const Matrix& size,
 			   int& count)
 {
-  // XXX FIXME XXX -- is this the right thing to do?
-  if (name () == "stdin")
-    fail = false;
-
   octave_value retval = Matrix ();
 
   count = 0;
 
   istream *isp = input_stream ();
 
   if (isp)
     {
-      istream is = *isp;
+      istream& is = *isp;
 
       scanf_format_list fmt_list (fmt);
 
       switch (fmt_list.num_conversions ())
 	{
 	case -1:
 	  ::error ("fscanf: invalid format specified");
 	  break;
@@ -1305,16 +1335,231 @@ octave_base_stream::scanf (const string&
 
 		is.scan (elt->text);
 
 		if (! is)
 		  {
 		    error ("fscanf: read error");
 
 		    // XXX FIXME XXX -- is this the right thing to do?
+
+		    if (name () == "stdin")
+		      {
+			is.clear ();
+
+			// Skip to end of line.
+
+			bool err;
+			do_gets (-1, err, false, "fscanf");
+		      }
+		  }
+	      }
+	  }
+	  break;
+
+	default:
+	  {
+	    int nr = -1;
+	    int nc = -1;
+
+	    get_size (size, nr, nc, "fscanf");
+
+	    if (! error_state)
+	      retval = do_scanf (fmt_list, nr, nc, count);
+	  }
+	  break;
+	}
+    }
+  else
+    invalid_operation ("fscanf", "writing");
+
+  return retval;
+}
+
+#define do_oscanf_num_conv(is, fmt, valptr) \
+  do \
+    { \
+      streambuf *isb = is.rdbuf (); \
+ \
+      if (isb->scan (fmt, valptr) > 0) \
+	{ \
+	  if (! discard && is) \
+	    retval = (double) (*valptr); \
+	} \
+      else \
+	error ("fscanf: conversion failed"); \
+    } \
+  while (0)
+
+#define do_oscanf_str_conv(is, fmt, sptr, maxlen) \
+  do \
+    { \
+      streambuf *isb = is.rdbuf (); \
+ \
+      if (isb->scan (fmt, sptr) > 0) \
+	{ \
+	  if (! discard && is) \
+	    { \
+	      sptr[maxlen] = '\0'; \
+	      retval = sptr; \
+	    } \
+	} \
+      else \
+	error ("fscanf: conversion failed"); \
+    } \
+  while (0)
+
+octave_value
+octave_base_stream::do_oscanf (const scanf_format_elt *elt)
+{
+  octave_value retval = Matrix ();
+
+  istream *isp = input_stream ();
+
+  if (isp)
+    {
+      istream& is = *isp;
+
+      ios::fmtflags flags = is.flags ();
+
+      if (elt)
+	{
+	  const char *fmt = elt->text;
+
+	  bool discard = elt->discard;
+
+	  switch (elt->type)
+	    {
+	    case '%':
+	      {
+		int dummy;
+
+		is.scan (fmt, &dummy);
+	      }
+	      break;
+
+	    case 'd': case 'i': case 'o': case 'u': case 'x':
+	      {
+		int tmp;
+
+		do_oscanf_num_conv (is, fmt, &tmp);
+	      }
+	      break;
+
+	    case 'e': case 'f': case 'g':
+	      {
+		if (elt->modifier == 'l')
+		  {
+		    double tmp;
+
+		    do_oscanf_num_conv (is, fmt, &tmp);
+		  }
+		else
+		  {
+		    float tmp;
+
+		    do_oscanf_num_conv (is, fmt, &tmp);
+		  }
+	      }
+	      break;
+
+	    case 'c':
+	      {
+		is.unsetf (ios::skipws);
+
+		int width = elt->width ? elt->width : 1;
+
+		char *tmp = new char[width + 1];
+
+		do_oscanf_str_conv (is, fmt, tmp, width);
+
+		is.setf (flags);
+
+		delete [] tmp;
+	      }
+	      break;
+
+	    case 's':
+	      {
+		// XXX FIXME XXX -- this must be fixed!
+
+		int width = 65535;
+		char *tmp = new char [width+1];
+		do_oscanf_str_conv (is, fmt, tmp, width);
+		delete [] tmp;
+	      }
+	      break;
+
+	    case 'p': case '[':
+	      error ("fscanf: unsupported format specifier");
+	      break;
+
+	    default:
+	      error ("fscanf: internal format error");
+	      break;
+	    }
+	}
+
+      if (ok () && is.fail ())
+	{
+	  error ("fscanf: read error");
+      
+	  // XXX FIXME XXX -- is this the right thing to do?
+	  // What about other streams?
+	  if (name () == "stdin")
+	    {
+	      is.clear ();
+
+	      // Skip to end of line.
+
+	      bool err;
+	      do_gets (-1, err, false, "fscanf");
+	    }
+	}
+    }
+
+  return retval;
+}
+
+octave_value_list
+octave_base_stream::oscanf (const string& fmt)
+{
+  octave_value_list retval;
+
+  istream *isp = input_stream ();
+
+  if (isp)
+    {
+      istream& is = *isp;
+
+      scanf_format_list fmt_list (fmt);
+
+      int nconv = fmt_list.num_conversions ();
+
+      switch (nconv)
+	{
+	case -1:
+	  ::error ("fscanf: invalid format specified");
+	  break;
+
+	case 0:
+	  {
+	    const scanf_format_elt *elt = fmt_list.first ();
+
+	    if (elt)
+	      {
+		is.clear ();
+
+		is.scan (elt->text);
+
+		if (! is)
+		  {
+		    error ("fscanf: read error");
+
+		    // XXX FIXME XXX -- is this the right thing to do?
 		    // Maybe.  We should probably also arrange to
 		    // flush the pending input prior to printing a
 		    // prompt.  Or maybe just blow off scanf for stdin
 		    // like the MathWorks did. What about other streams?
 
 		    if (name () == "stdin")
 		      {
 			is.clear ();
@@ -1326,23 +1571,35 @@ octave_base_stream::scanf (const string&
 		      }
 		  }
 	      }
 	  }
 	  break;
 
 	default:
 	  {
-	    int nr = -1;
-	    int nc = -1;
-
-	    get_size (size, nr, nc, "fscanf");
-
-	    if (! error_state)
-	      retval = do_scanf (fmt_list, nr, nc, count);
+	    int len = fmt_list.length ();
+
+	    retval.resize (nconv, Matrix ());
+
+	    const scanf_format_elt *elt = fmt_list.first ();
+
+	    for (int i = 0; i < nconv; i++)
+	      {
+		retval (i) = do_oscanf (elt);
+
+		if (! ok ())
+		  break;
+
+		elt = fmt_list.next ();
+	      }
+
+	    // Pick up any trailing stuff.
+	    if (ok () && len > nconv)
+	      do_oscanf (elt);
 	  }
 	  break;
 	}
     }
   else
     invalid_operation ("fscanf", "writing");
 
   return retval;
@@ -1388,17 +1645,17 @@ octave_base_stream::do_write (const doub
   int retval = -1;
 
   int count = 0;
 
   ostream *osp = output_stream ();
 
   if (osp)
     {
-      ostream os = *osp;
+      ostream& os = *osp;
 
       // XXX FIXME XXX -- maybe there should be a special case for
       // skip == 0.
 
       for (int i = 0; i < n; i++)
 	{
 	  if (os)
 	    {
@@ -1709,17 +1966,17 @@ octave_base_stream::do_printf (printf_fo
 			       const octave_value_list& args)
 {
   int retval = -1;
 
   ostream *osp = output_stream ();
 
   if (osp)
     {
-      ostream os = *osp;
+      ostream& os = *osp;
 
       const printf_format_elt *elt = fmt_list.first ();
 
       printf_value_cache val_cache (args);
 
       for (;;)
 	{
 	  if (elt)
@@ -1839,17 +2096,17 @@ int
 octave_base_stream::printf (const string& fmt, const octave_value_list& args)
 {
   int retval = -1;
 
   ostream *osp = output_stream ();
 
   if (osp)
     {
-      ostream os = *osp;
+      ostream& os = *osp;
 
       printf_format_list fmt_list (fmt);
 
       switch (fmt_list.num_conversions ())
 	{
 	case -1:
 	  ::error ("fprintf: invalid format specified");
 	  break;
@@ -1890,17 +2147,17 @@ int
 octave_base_stream::puts (const string& s)
 {
   int retval = -1;
 
   ostream *osp = output_stream ();
 
   if (osp)
     {
-      ostream os = *osp;
+      ostream& os = *osp;
 
       os << s;
 
       if (os)
 	{
 	  // XXX FIXME XXX -- why does this seem to be necessary?
 	  // Without it, output from a loop like
 	  //
@@ -2141,16 +2398,27 @@ octave_stream::scanf (const string& fmt,
   octave_value retval;
 
   if (stream_ok ("fscanf"))
     retval = rep->scanf (fmt, size, count);
 
   return retval;
 }
 
+octave_value_list
+octave_stream::oscanf (const string& fmt)
+{
+  octave_value_list retval;
+
+  if (stream_ok ("fscanf"))
+    retval = rep->oscanf (fmt);
+
+  return retval;
+}
+
 int
 octave_stream::printf (const string& fmt, const octave_value_list& args)
 {
   int retval = -1;
 
   if (stream_ok ("fprintf"))
     retval = rep->printf (fmt, args);
 
@@ -2200,18 +2468,16 @@ octave_stream::eof (void) const
 string
 octave_stream::error (bool clear, int& errno)
 {
   string retval;
 
   if (stream_ok ("ferror", false))
     retval = rep->error (clear, errno);
 
-  cerr << retval;
-
   return retval;
 }
 
 string
 octave_stream::name (void)
 {
   string retval;
 
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -31,39 +31,47 @@ Software Foundation, 59 Temple Place - S
 #include "Array.h"
 
 #include "oct-obj.h"
 #include "str-vec.h"
 
 struct
 scanf_format_elt
 {
-  scanf_format_elt (const char *txt = 0, bool d = false,
+  scanf_format_elt (const char *txt = 0, int w = 0, bool d = false,
 		    char typ = '\0', char mod = '\0')
-    : text (txt), discard (d), type (typ), modifier (mod) { }
+    : text (txt), width (w), discard (d), type (typ), modifier (mod) { }
 
   ~scanf_format_elt (void) { delete text; }
 
   const char *text;
+  int width;
   bool discard;
   char type;
   char modifier;
 };
 
 class
 scanf_format_list
 {
 public:
 
   scanf_format_list (const string& fmt = string ());
 
   ~scanf_format_list (void);
 
   int num_conversions (void) { return nconv; }
 
+  // The length can be different than the number of conversions.
+  // For example, "x %d y %d z" has 2 conversions but the length of
+  // the list is 3 because of the characters that appear after the
+  // last conversion.
+
+  int length (void) { return list.length (); }
+
   const scanf_format_elt *first (void)
     {
       curr_idx = 0;
       return current ();
     }
 
   const scanf_format_elt *current (void) const
     { return list.length () > 0 ? list.elem (curr_idx) : 0; }
@@ -96,24 +104,26 @@ private:
   int curr_idx;
 
   // List of format elements.
   Array<scanf_format_elt*> list;
 
   // Temporary buffer.
   ostrstream *buf;
 
-  void add_elt_to_list (bool discard, char type, char modifier,
+  void add_elt_to_list (int width, bool discard, char type, char modifier,
 			int& num_elts);
 
-  void process_conversion (const string& s, int& i, int n, bool& discard,
-			   char& type, char& modifier, int& num_elts);
+  void process_conversion (const string& s, int& i, int n, int& width,
+			   bool& discard, char& type, char& modifier,
+			   int& num_elts);
 
-  int finish_conversion (const string& s, int& i, int n, bool discard,
-			 char& type, char modifier, int& num_elts);
+  int finish_conversion (const string& s, int& i, int n, int& width,
+			 bool discard, char& type, char modifier,
+			 int& num_elts);
   // No copying!
 
   scanf_format_list (const scanf_format_list&);
 
   scanf_format_list& operator = (const scanf_format_list&);
 };
 
 struct
@@ -321,16 +331,20 @@ private:
   octave_value do_real_scanf (scanf_format_list& fmt_list,
 			      int nr, int nc, int& count);
 
   octave_value do_scanf (scanf_format_list& fmt_list, int nr, int nc,
 			 int& count);
 
   octave_value scanf (const string& fmt, const Matrix& size, int& count);
 
+  octave_value do_oscanf (const scanf_format_elt *elt);
+
+  octave_value_list oscanf (const string& fmt);
+
   // Functions that are defined for all output streams (output streams
   // are those that define os).
 
   int flush (void);
 
   int do_write (const double *d, int n, data_type dt, int skip,
 		arch_type at);
 
@@ -392,16 +406,18 @@ public:
 		     int& count);
 
   int write (const octave_value& data,
 	     octave_base_stream::data_type dt, int skip,
 	     octave_base_stream::arch_type at);
 
   octave_value scanf (const string& fmt, const Matrix& size, int& count);
 
+  octave_value_list oscanf (const string& fmt);
+
   int printf (const string& fmt, const octave_value_list& args);
 
   int puts (const string& s);
   int puts (const octave_value& s);
 
   bool eof (void) const;
 
   string error (bool clear, int& errno);
