# HG changeset patch
# User jwe
# Date 1041655571 0
#      Sat Jan 04 04:46:11 2003 +0000
# Node ID 52ce979331fefc0be1c11fbc95d4bcd02dbbee24
# Parent  e0f687d372ef8d72d82f66f89daa010e990f5bdc
[project @ 2003-01-04 04:46:11 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,13 @@
 2003-01-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* dMatrix.cc (read_int, write_int): Avoid warnings about
+	unreachable code.
+
 	* oct-alloc.h (DECLARE_OCTAVE_ALLOCATOR): Define operator delete
 	to correspond to placement new operator.
 
 	* dbleDET.cc (DET::value_will_overflow): We want det[1], not det[2].
 	(DET::value_will_underflow): Likewise.
 	* CmplxDET.cc (ComplexDET::value_will_overflow): Likewise.
 	(ComplexDET::value_will_underflow): Likewise.
 
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2285,23 +2285,22 @@ operator >> (std::istream& is, Matrix& a
 }
 
 template <class T>
 void
 read_int (std::istream& is, bool swap_bytes, T& val)
 {
   is.read (X_CAST (char *, &val), sizeof (T));
 
-  if (swap_bytes)
+  int t = sizeof (T);
+
+  if (swap_bytes && t > 1)
     {
-      switch (sizeof (T))
+      switch (t)
 	{
-	case 1:
-	  break;
-
 	case 2:
 	  swap_2_bytes (X_CAST (char *, &val));
 	  break;
 
 	case 4:
 	  swap_4_bytes (X_CAST (char *, &val));
 	  break;
 
@@ -2581,23 +2580,22 @@ Matrix::read (std::istream& is, int nr, 
 
   return retval;
 }
 
 template <class T>
 void
 write_int (std::ostream& os, bool swap_bytes, T val)
 {
-  if (swap_bytes)
+  int t = sizeof (T);
+
+  if (swap_bytes && t > 1)
     {
-      switch (sizeof (T))
+      switch (t)
 	{
-	case 1:
-	  break;
-
 	case 2:
 	  swap_2_bytes (X_CAST (char *, &val));
 	  break;
 
 	case 4:
 	  swap_4_bytes (X_CAST (char *, &val));
 	  break;
 
