# HG changeset patch
# User Robert T. Short <octave@phaselockedsystems.com>
# Date 1242941207 25200
#      Thu May 21 14:26:47 2009 -0700
# Node ID f27a8c07f0b2e7736ad3a3bdf4faf1dcd7b6d340
# Parent  f29db0a0aa85f4db02c4b93b242c2e3a8c4fa039
    clear -classes and support.
    * ov-class.h   (octave_class::clear_exemplar_map): New function.
    * ov-class.cc  (octave_class::clear_exemplar_map): New function.
    * symtab.h     (symbol_record::clear_objects): New function
    * symtab.h     (symbol_record::do_clear_objects): New function
    * variables.cc (do_matlab_compatible_clear, clear): Added classes option

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2009-05-22  Robert T. Short  <octave@phaselockedsystems.com>
+
+        clear -classes and support.
+	* ov-class.h   (octave_class::clear_exemplar_map): New function.
+	* ov-class.cc  (octave_class::clear_exemplar_map): New function.
+	* symtab.h     (symbol_record::clear_objects): New function
+        * symtab.h     (symbol_record::do_clear_objects): New function
+        * variables.cc (do_matlab_compatible_clear, clear): Added classes option	
+
 2009-05-22  Jaroslav Hajek  <highegg@gmail.com>
 
 	* src/ov-base-mat.cc (octave_base_matrix<MT>::assign (const
 	octave_value_list, typename MT::element_type)): Avoid out of bounds
 	assignments.
 
 2009-05-21  Michael Goffioul  <michael.goffioul@gmail.com>
 
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -841,16 +841,22 @@ octave_class::reconstruct_exemplar (void
 	}
       else
 	warning ("no constructor for class %s", c_name.c_str ());
     }
 
   return retval;
 }
 
+void
+octave_class::clear_exemplar_map (void)
+{
+  exemplar_map.clear ();
+}
+
 //  Load/save does not provide enough information to reconstruct the
 //  class inheritance structure.  reconstruct_parents () attempts to
 //  do so.  If successful, a "true" value is returned.
 //
 //  Note that we don't check the loaded object structure against the
 //  class structure here so the user's loadobj method has a chance
 //  to do its magic.
 bool
diff --git a/src/ov-class.h b/src/ov-class.h
--- a/src/ov-class.h
+++ b/src/ov-class.h
@@ -141,16 +141,18 @@ public:
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
   void print_with_name (std::ostream& os, const std::string& name, 
 			bool print_padding = true) const;
 
   bool reconstruct_exemplar (void);
 
+  static void clear_exemplar_map (void);
+
   bool reconstruct_parents (void);
 
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -1313,16 +1313,24 @@ public:
   static void clear_variables (scope_id scope = xcurrent_scope)
   {
     symbol_table *inst = get_instance (scope);
 
     if (inst)
       inst->do_clear_variables ();
   }
 
+  static void clear_objects (scope_id scope = xcurrent_scope)
+  {
+    symbol_table *inst = get_instance (scope);
+
+    if (inst)
+      inst->do_clear_objects ();
+  }
+
   static void unmark_forced_variables (scope_id scope = xcurrent_scope)
   {
     symbol_table *inst = get_instance (scope);
 
     if (inst)
       inst->do_unmark_forced_variables ();
   }
 
@@ -2091,17 +2099,28 @@ private:
   }
 
   void do_clear_variables (void)
   {
     for (table_iterator p = table.begin (); p != table.end (); p++)
       p->second.clear ();
   }
 
-  void do_unmark_forced_variables (void)
+  void do_clear_objects (void)
+  {
+    for (table_iterator p = table.begin (); p != table.end (); p++)
+      {
+	symbol_record& sr = p->second;
+	octave_value& val = sr.varref ();
+	if (val.is_object())
+	  p->second.clear ();
+      }
+  }
+
+ void do_unmark_forced_variables (void)
   {
     for (table_iterator p = table.begin (); p != table.end (); p++)
       p->second.unmark_forced ();
   }
 
   void do_clear_global (const std::string& name)
   {
     table_iterator p = table.find (name);
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -47,16 +47,17 @@ along with Octave; see the file COPYING.
 #include "gripes.h"
 #include "help.h"
 #include "input.h"
 #include "lex.h"
 #include "load-path.h"
 #include "oct-map.h"
 #include "oct-obj.h"
 #include "ov.h"
+#include "ov-class.h"
 #include "ov-usr-fcn.h"
 #include "pager.h"
 #include "parse.h"
 #include "symtab.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
@@ -1988,16 +1989,22 @@ do_matlab_compatible_clear (const string
 	{
 	  do_clear_globals (argv, argc, ++idx);
 	}
       else if (argv[idx] == "variables"
 	       && ! symbol_table::is_local_variable ("variables"))
 	{
 	  symbol_table::clear_variables ();
 	}
+      else if (argv[idx] == "classes"
+	       && ! symbol_table::is_local_variable ("classes"))
+	{
+	  symbol_table::clear_objects ();
+	  octave_class::clear_exemplar_map ();
+	}
       else
 	{
 	  symbol_table::clear_symbol_pattern (argv[idx]);
 	}
     }
 }
 
 #define CLEAR_OPTION_ERROR(cond) \
@@ -2061,16 +2068,18 @@ from the symbol table.\n\
 Clears the variables that don't match the following pattern.\n\
 \n\
 @item -functions, -f\n\
 Clears the function names and the built-in symbols names.\n\
 @item -global, -g\n\
 Clears the global symbol names.\n\
 @item -variables, -v\n\
 Clears the local variable names.\n\
+@item -classes, -c\n\
+Clears the class structure table and clears all objects.\n\
 @item -regexp, -r\n\
 The arguments are treated as regular expressions as any variables that\n\
 match will be cleared.\n\
 @end table\n\
 With the exception of @code{exclusive}, all long options can be used \n\
 without the dash as well.\n\
 @end deffn")
 {
@@ -2089,16 +2098,17 @@ without the dash as well.\n\
       else
 	{
 	  int idx = 0;
 
 	  bool clear_all = false;
 	  bool clear_functions = false;
 	  bool clear_globals = false;
 	  bool clear_variables = false;
+          bool clear_objects = false;
 	  bool exclusive = false;
 	  bool have_regexp = false;
 	  bool have_dash_option = false;
 
 	  while (++idx < argc)
 	    {
 	      if (argv[idx] == "-all" || argv[idx] == "-a")
 		{
@@ -2128,16 +2138,23 @@ without the dash as well.\n\
 		}
 	      else if (argv[idx] == "-variables" || argv[idx] == "-v")
 		{
 		  CLEAR_OPTION_ERROR (have_dash_option && ! exclusive);
 
 		  have_dash_option = true;
 		  clear_variables = true;
 		}
+	      else if (argv[idx] == "-classes" || argv[idx] == "-c")
+		{
+		  CLEAR_OPTION_ERROR (have_dash_option && ! exclusive);
+
+		  have_dash_option = true;
+		  clear_objects = true;
+		}
 	      else if (argv[idx] == "-regexp" || argv[idx] == "-r")
 		{
 		  CLEAR_OPTION_ERROR (have_dash_option && ! exclusive);
 
 		  have_dash_option = true;
 		  have_regexp = true;
 		}
 	      else
@@ -2173,16 +2190,21 @@ without the dash as well.\n\
 		  else if (clear_globals)
 		    {
 		      do_clear_globals (argv, argc, idx, exclusive);
 		    }
 		  else if (clear_variables)
 		    {
 		      do_clear_variables (argv, argc, idx, exclusive);
 		    }
+		  else if (clear_objects)
+		    {
+		      symbol_table::clear_objects ();
+		      octave_class::clear_exemplar_map ();
+		    }
 		  else
 		    {
 		      do_clear_symbols (argv, argc, idx, exclusive);
 		    }
 		}
 	    }
 	}
     }
