# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1367653048 -7200
#      Sat May 04 09:37:28 2013 +0200
# Node ID a1f613e5066d4cd442732e1c24ccb38c6154480f
# Parent  6f7940e363227e9f231f4f7b1fc402b1aae44ac1
workspace view colors based upon variable scope (derived from Dan's patch #8013)

* resource-manager.cc/.h(storage_class_names): function returning scope names
  (storage_class_colors): function returning default colors for scopes
  (storage_class_chars): function returning the ident. characters of the scopes

* color-picker.cc(constructor): prevent focus for the colored pushbutton

* settings-dialog.cc/.h(read_workspace_colors): function reading the colors from
  the setitngs and creating a table with color-pickers in the settings dialog
  (write_wirkspace_colors): function getting the states of the color-pickers
  and writing them into the settings files
* settings-dialog.cc(constructor): call read_workspace_colors
  (write_changed_settings): call write_workspace_colors

* settings-dialog.ui: new tab for workspace settings with a box for the colors

* workspace_model.cc/.h(notice_settings): reading colors from the settings
* workspace-model.cc(constructor): initialize list of colors
  (data): reorganize determining the appropriate data and take background
  color role into consideration
* workspace-model.h(storage_class_color): returns the color for a specific scope

* workspace-view.cc/.h(notice_settings): create tool tip with color key
  (setModel): not inline anymore, actual model is stored in _model

diff --git a/libgui/src/color-picker.cc b/libgui/src/color-picker.cc
--- a/libgui/src/color-picker.cc
+++ b/libgui/src/color-picker.cc
@@ -24,16 +24,17 @@
 
 #include "color-picker.h"
 
 // constuctor with initial color as parameter
 color_picker::color_picker (QColor old_color, QWidget* p) : QPushButton (p)
 {
   _color = old_color;
   setFlat (true);
+  setFocusPolicy(Qt::NoFocus);  // no focus, would changes the color
   update_button ();
   connect(this, SIGNAL (clicked ()), SLOT (select_color ()));
 }
 
 // slot for bitton clicked: selct a new color using QColorDialog
 void
 color_picker::select_color ()
 {
diff --git a/libgui/src/resource-manager.cc b/libgui/src/resource-manager.cc
--- a/libgui/src/resource-manager.cc
+++ b/libgui/src/resource-manager.cc
@@ -190,16 +190,38 @@ resource_manager::do_update_network_sett
   proxy.setHostName (settings->value ("proxyHostName").toString ());
   proxy.setPort (settings->value ("proxyPort",80).toInt ());
   proxy.setUser (settings->value ("proxyUserName").toString ());
   proxy.setPassword (settings->value ("proxyPassword").toString ());
 
   QNetworkProxy::setApplicationProxy (proxy);
 }
 
+QStringList 
+resource_manager::storage_class_names (void)
+{
+  return QStringList () << QObject::tr ("automatic")
+                        << QObject::tr ("function")
+                        << QObject::tr ("global")
+                        << QObject::tr ("hidden")
+                        << QObject::tr ("inherited")
+                        << QObject::tr ("persistent");
+}
+
+QList<QColor>
+resource_manager::storage_class_default_colors (void)
+{
+  return QList<QColor> () << QColor(190,255,255)
+                          << QColor(220,255,220)
+                          << QColor(220,220,255)
+                          << QColor(255,255,190)
+                          << QColor(255,220,220)
+                          << QColor(255,190,255);
+}
+
 const char*
 resource_manager::octave_keywords (void)
 {
   return
       ".nargin. "
       "EDITOR "
       "EXEC_PATH "
       "F_DUPFD "
diff --git a/libgui/src/resource-manager.h b/libgui/src/resource-manager.h
--- a/libgui/src/resource-manager.h
+++ b/libgui/src/resource-manager.h
@@ -77,16 +77,20 @@ public:
   }
 
   static bool is_first_run (void)
   {
     return instance_ok () ? instance->do_is_first_run () : true;
   }
 
   static const char *octave_keywords (void);
+  
+  static QString storage_class_chars (void) { return "afghip"; }
+  static QStringList storage_class_names (void);
+  static QList<QColor> storage_class_default_colors (void);
 
 private:
 
   static resource_manager *instance;
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
   // No copying!
diff --git a/libgui/src/settings-dialog.cc b/libgui/src/settings-dialog.cc
--- a/libgui/src/settings-dialog.cc
+++ b/libgui/src/settings-dialog.cc
@@ -20,16 +20,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "resource-manager.h"
+#include "workspace-model.h"
 #include "settings-dialog.h"
 #include "ui-settings-dialog.h"
 #include <QSettings>
 #include <QDir>
 #include <QFileInfo>
 
 #ifdef HAVE_QSCINTILLA
 #include <QScrollArea>
@@ -120,16 +121,19 @@ settings_dialog::settings_dialog (QWidge
       currentIndex++;
       ui->proxyType->setCurrentIndex (currentIndex);
     }
 
   ui->proxyPort->setText (settings->value ("proxyPort").toString ());
   ui->proxyUserName->setText (settings->value ("proxyUserName").toString ());
   ui->proxyPassword->setText (settings->value ("proxyPassword").toString ());
 
+  // qorkspace colors
+  read_workspace_colors (settings);
+
 #ifdef HAVE_QSCINTILLA
   // editor styles: create lexer, read settings, and create dialog elements
   QsciLexer *lexer;
   lexer = new lexer_octave_gui ();
   read_lexer_settings (lexer,settings);
   delete lexer;
   lexer = new QsciLexerCPP ();
   read_lexer_settings (lexer,settings);
@@ -238,16 +242,54 @@ settings_dialog::read_lexer_settings (Qs
   QWidget *scroll_area_contents = new QWidget ();
   scroll_area_contents->setObjectName (QString (lexer->language ())+"_styles");
   scroll_area_contents->setLayout (style_grid);
   scroll_area->setWidget (scroll_area_contents);
   ui->tabs_editor_styles->addTab (scroll_area,lexer->language ());
 }
 #endif  
 
+void
+settings_dialog::read_workspace_colors (QSettings *settings)
+{
+
+  QList<QColor> default_colors = resource_manager::storage_class_default_colors ();
+  QStringList class_names = resource_manager::storage_class_names ();
+  QString class_chars = resource_manager::storage_class_chars ();
+  int nr_of_classes = class_chars.length ();
+
+  QGridLayout *style_grid = new QGridLayout ();
+  QLabel *description[nr_of_classes];
+  color_picker *color[nr_of_classes];
+
+  int column = 0;
+  int row = 0;
+  for (int i = 0; i < nr_of_classes; i++)
+    {
+      description[i] = new QLabel (class_names.at (i));
+      description[i]->setAlignment (Qt::AlignRight);
+      QVariant default_var = default_colors.at (i);
+      QColor setting_color = settings->value ("workspaceview/color_"+class_chars.mid (i,1),
+                                              default_var).value<QColor> ();
+      color[i] = new color_picker (setting_color);
+      color[i]->setObjectName ("color_"+class_chars.mid (i,1));
+      color[i]->setMinimumSize (30,10);
+      style_grid->addWidget (description[i], row,3*column);
+      style_grid->addWidget (color[i],       row,3*column+1);
+      if (++column == 3)
+        {
+          row++;
+          column = 0;
+        }
+    }
+
+  // place grid with elements into the tab
+  ui->workspace_colors_box->setLayout (style_grid);
+}
+
 
 void
 settings_dialog::write_changed_settings ()
 {
   QSettings *settings = resource_manager::get_settings ();
   // FIXME -- what should happen if settings is 0?
 
   // the icon set
@@ -317,16 +359,18 @@ settings_dialog::write_changed_settings 
   delete lexer;
   lexer = new QsciLexerDiff ();
   write_lexer_settings (lexer,settings);
   delete lexer;
   lexer = new QsciLexerBash ();
   write_lexer_settings (lexer,settings);
   delete lexer;
 #endif
+
+  write_workspace_colors (settings);
 }
 
 #ifdef HAVE_QSCINTILLA
 void
 settings_dialog::write_lexer_settings (QsciLexer *lexer, QSettings *settings)
 {
   QWidget *tab = ui->tabs_editor_styles->
             findChild <QWidget *>(QString (lexer->language ())+"_styles");
@@ -377,8 +421,26 @@ settings_dialog::write_lexer_settings (Q
       if (styles[i] == 0)
         lexer->setDefaultFont (new_font);
       if (color)
         lexer->setColor (color->color (),styles[i]);
     }
   lexer->writeSettings (*settings);
 }
 #endif
+
+void
+settings_dialog::write_workspace_colors (QSettings *settings)
+{
+
+  QString class_chars = resource_manager::storage_class_chars ();
+  color_picker *color;
+
+  for (int i = 0; i < class_chars.length (); i++)
+    {
+      color = ui->workspace_colors_box->findChild <color_picker *>(
+                            "color_"+class_chars.mid (i,1));
+      if (color)
+        settings->setValue ("workspaceview/color_"+class_chars.mid (i,1),
+                            color->color ());
+    }
+  settings->sync ();
+}
diff --git a/libgui/src/settings-dialog.h b/libgui/src/settings-dialog.h
--- a/libgui/src/settings-dialog.h
+++ b/libgui/src/settings-dialog.h
@@ -44,11 +44,14 @@ private:
   Ui::settings_dialog * ui;
 #ifdef HAVE_QSCINTILLA
   void read_lexer_settings (QsciLexer *lexer, QSettings *settings);
   void write_lexer_settings (QsciLexer *lexer, QSettings *settings);
   int  get_valid_lexer_styles (QsciLexer *lexer, int styles[]);
   enum { MaxLexerStyles = 64,
          MaxStyleNumber = 128 };
 #endif
+
+  void read_workspace_colors (QSettings *settings);
+  void write_workspace_colors (QSettings *settings);
 };
 
 #endif // SETTINGSDIALOG_H
diff --git a/libgui/src/settings-dialog.ui b/libgui/src/settings-dialog.ui
--- a/libgui/src/settings-dialog.ui
+++ b/libgui/src/settings-dialog.ui
@@ -495,16 +495,34 @@
            <width>20</width>
            <height>360</height>
           </size>
          </property>
         </spacer>
        </item>
       </layout>
      </widget>
+     <widget class="QWidget" name="tab_workspace">
+      <attribute name="title">
+       <string>Workspace</string>
+      </attribute>
+      <widget class="QGroupBox" name="workspace_colors_box">
+       <property name="geometry">
+        <rect>
+         <x>19</x>
+         <y>19</y>
+         <width>631</width>
+         <height>81</height>
+        </rect>
+       </property>
+       <property name="title">
+        <string>Storage Class Colors</string>
+       </property>
+      </widget>
+     </widget>
      <widget class="QWidget" name="tab_3">
       <attribute name="title">
        <string>Network</string>
       </attribute>
       <layout class="QVBoxLayout" name="verticalLayout_4">
        <item>
         <widget class="QCheckBox" name="useProxyServer">
          <property name="text">
diff --git a/libgui/src/workspace-model.cc b/libgui/src/workspace-model.cc
--- a/libgui/src/workspace-model.cc
+++ b/libgui/src/workspace-model.cc
@@ -21,39 +21,44 @@ along with Octave; see the file COPYING.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <QTreeWidget>
+#include <QSettings>
 
 #include "utils.h"
-
+#include "resource-manager.h"
 #include "workspace-model.h"
 
 workspace_model::workspace_model (QObject *p)
   : QAbstractTableModel (p)
 {
   _columnNames.append (tr ("Name"));
   _columnNames.append (tr ("Class"));
   _columnNames.append (tr ("Dimension"));
   _columnNames.append (tr ("Value"));
   _columnNames.append (tr ("Storage Class"));
+
+  for (int i = 0; i < resource_manager::storage_class_chars ().length (); i++)
+    _storage_class_colors.append (QColor (Qt::white));
+
 }
 
 int
-workspace_model::rowCount(const QModelIndex& p) const
+workspace_model::rowCount (const QModelIndex&) const
 {
   return _symbols.size ();
 }
 
 int
-workspace_model::columnCount (const QModelIndex& p) const
+workspace_model::columnCount (const QModelIndex&) const
 {
   return _columnNames.size ();
 }
 
 Qt::ItemFlags
 workspace_model::flags (const QModelIndex& idx) const
 {
   Qt::ItemFlags retval = 0;
@@ -79,63 +84,66 @@ workspace_model::headerData (int section
     return QVariant();
 }
 
 QVariant
 workspace_model::data (const QModelIndex& idx, int role) const
 {
   QVariant retval;
 
-  if (idx.isValid ()
-      && (role == Qt::DisplayRole
-          || (idx.column () == 0 && (role == Qt::EditRole
-                                     || role == Qt::ToolTipRole))))
+  if (idx.isValid ())
     {
-      switch (idx.column ())
+      if (role == Qt::BackgroundColorRole)
         {
-        case 0:
-          if (role == Qt::ToolTipRole)
-            retval = QVariant (tr ("Right click to copy, rename, or display"));
+          QString class_chars = resource_manager::storage_class_chars ();
+          int actual_class = class_chars.indexOf (_scopes[idx.row()].toAscii ());
+          if (actual_class >= 0)
+            return QVariant (_storage_class_colors.at (actual_class));
           else
-            retval = QVariant (_symbols[idx.row()]);
-          break;
+            return retval;
+        }
 
-        case 1:
-          retval = QVariant (_class_names[idx.row()]);
-          break;
-
-        case 2:
-          retval = QVariant (_dimensions[idx.row()]);
-          break;
+      if (role == Qt::DisplayRole
+          || (idx.column () == 0 && role == Qt::EditRole)
+          || (idx.column () == 0 && role == Qt::ToolTipRole) )
+        {
+          switch (idx.column ())
+            {
+            case 0:
+              if (role == Qt::ToolTipRole)
+                retval = QVariant (tr ("Right click to copy, rename, or display"));
+              else
+                retval = QVariant (_symbols[idx.row()]);
+              break;
 
-        case 3:
-          retval = QVariant (_values[idx.row()]);
-          break;
+            case 1:
+              retval = QVariant (_class_names[idx.row()]);
+              break;
 
-        case 4:
-          {
-            QChar c = _scopes[idx.row()];
+            case 2:
+              retval = QVariant (_dimensions[idx.row()]);
+              break;
+
+            case 3:
+              retval = QVariant (_values[idx.row()]);
+              break;
 
-            if (c == 'g')
-              retval = QVariant (tr ("global"));
-            else if (c == 'p')
-              retval = QVariant (tr ("persistent"));
-            else if (c == 'a')
-              retval = QVariant (tr ("automatic"));
-            else if (c == 'f')
-              retval = QVariant (tr ("function parameter"));
-            else if (c == 'h')
-              retval = QVariant (tr ("hidden"));
-            else if (c == 'i')
-              retval = QVariant (tr ("inherited"));
+            case 4:
+              retval = QVariant ();
+              QString class_chars = resource_manager::storage_class_chars ();
+              int actual_class = class_chars.indexOf (_scopes[idx.row()].toAscii ());
+              if (actual_class >= 0)
+                {
+                  QStringList class_names = resource_manager::storage_class_names ();
+                  retval = QVariant (class_names.at (actual_class));
+                }
+              break;
+
           }
-
-        default:
-          break;
-        }
+      }
     }
 
   return retval;
 }
 
 bool
 workspace_model::setData (const QModelIndex& idx, const QVariant& value,
                           int role)
@@ -208,8 +216,23 @@ workspace_model::update_table (void)
   beginResetModel();
 
   // Nothing to do except tell the world to recalc.
 
   endResetModel ();
 
   emit model_changed ();
 }
+
+void
+workspace_model::notice_settings (const QSettings *settings)
+{
+  QList<QColor> default_colors = resource_manager::storage_class_default_colors ();
+  QString class_chars = resource_manager::storage_class_chars ();
+
+  for (int i = 0; i < class_chars.length (); i++)
+    {
+      QVariant default_var = default_colors.at (i);
+      QColor setting_color = settings->value ("workspaceview/color_"+class_chars.mid (i,1),
+                                             default_var).value<QColor> ();
+      _storage_class_colors.replace (i,setting_color);
+    }
+}
diff --git a/libgui/src/workspace-model.h b/libgui/src/workspace-model.h
--- a/libgui/src/workspace-model.h
+++ b/libgui/src/workspace-model.h
@@ -23,16 +23,19 @@ along with Octave; see the file COPYING.
 
 #if !defined (workspace_model_h)
 #define workspace_model_h 1
 
 #include <QAbstractTableModel>
 #include <QVector>
 #include <QSemaphore>
 #include <QStringList>
+#include <QChar>
+#include <QColor>
+#include <QSettings>
 
 class workspace_model
   : public QAbstractTableModel
 {
   Q_OBJECT
 
 public:
 
@@ -51,27 +54,31 @@ public:
                        int role = Qt::DisplayRole) const;
 
   int rowCount (const QModelIndex& parent = QModelIndex ()) const;
 
   int columnCount (const QModelIndex& parent = QModelIndex ()) const;
 
   bool is_top_level (void) const { return _top_level; }
 
+  QColor storage_class_color (int s_class) { return _storage_class_colors.at (s_class); }
+
 public slots:
 
   void set_workspace (bool top_level,
                       const QString& scopes,
                       const QStringList& symbols,
                       const QStringList& class_names,
                       const QStringList& dimensions,
                       const QStringList& values);
 
   void clear_workspace (void);
 
+  void notice_settings (const QSettings *);
+
 signals:
 
   void model_changed (void);
 
   void rename_variable (const QString& old_name, const QString& new_name);
 
 private:
 
@@ -81,11 +88,14 @@ private:
   bool _top_level;
   QString _scopes;
   QStringList _symbols;
   QStringList _class_names;
   QStringList _dimensions;
   QStringList _values;
 
   QStringList _columnNames;
+
+  QList<QColor>  _storage_class_colors;
+
 };
 
 #endif
diff --git a/libgui/src/workspace-view.cc b/libgui/src/workspace-view.cc
--- a/libgui/src/workspace-view.cc
+++ b/libgui/src/workspace-view.cc
@@ -72,28 +72,38 @@ workspace_view::workspace_view (QWidget 
 
   // Connect signals and slots.
 
   connect (view, SIGNAL (customContextMenuRequested (const QPoint&)),
            this, SLOT(contextmenu_requested (const QPoint&)));
 
   connect (this, SIGNAL (command_requested (const QString&)),
            p, SLOT (execute_command_in_terminal (const QString&)));
+
+  connect (parent (), SIGNAL (settings_changed (const QSettings *)),
+           this, SLOT (notice_settings (const QSettings *)));
+
 }
 
 workspace_view::~workspace_view (void)
 {
   QSettings *settings = resource_manager::get_settings ();
 
   settings->setValue("workspaceview/column_state",
                      view->horizontalHeader ()->saveState ());
 
   settings->sync ();
 }
 
+void workspace_view::setModel (workspace_model *model)
+{
+  view->setModel (model);
+  _model = model;
+}
+
 void
 workspace_view::closeEvent (QCloseEvent *e)
 {
   emit active_changed (false);
   QDockWidget::closeEvent (e);
 }
 
 void
@@ -237,8 +247,25 @@ workspace_view::handle_model_changed (vo
   // the whole list.  For-loop test will handle when number of rows reduced.
   QFontMetrics fm = view->fontMetrics ();
   int row_height =  fm.height ();
   int new_row_count = view->model ()->rowCount ();
   for (int i = view_previous_row_count; i < new_row_count; i++)
     view->setRowHeight (i, row_height);
   view_previous_row_count = new_row_count;
 }
+
+void
+workspace_view::notice_settings (const QSettings *settings)
+{
+  _model->notice_settings (settings); // update colors of model first
+
+  QString tool_tip;
+  tool_tip  =  QString (tr ("View the variables in the active workspace.<br>"));
+  tool_tip +=  QString (tr ("Colors for the storage class:"));
+  for (int i = 0; i < resource_manager::storage_class_chars ().length (); i++)
+    {
+      tool_tip +=  QString ("<div style=\"background-color:%1;color:#000000\">%2</div>")
+               .arg (_model->storage_class_color (i).name ())
+               .arg (resource_manager::storage_class_names ().at (i));
+    }
+  setToolTip (tool_tip);
+}
diff --git a/libgui/src/workspace-view.h b/libgui/src/workspace-view.h
--- a/libgui/src/workspace-view.h
+++ b/libgui/src/workspace-view.h
@@ -36,19 +36,21 @@ class workspace_view : public octave_doc
   Q_OBJECT
 
 public:
 
   workspace_view (QWidget *parent = 0);
 
   ~workspace_view (void);
 
-public:
+public slots:
 
-  void setModel (workspace_model *model) { view->setModel (model); }
+  void notice_settings (const QSettings *);
+
+  void setModel (workspace_model *model);
 
 signals:
 
   /** signal that user had requested a command on a variable */
   void command_requested (const QString& cmd);
 
 protected:
 
@@ -68,11 +70,12 @@ protected slots:
   void handle_model_changed (void);
 
 private:
 
   void relay_contextmenu_command (const QString& cmdname);
 
   QTableView *view;
   int view_previous_row_count;
+  workspace_model *_model;
 };
 
 #endif
