# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1454872003 18000
#      Sun Feb 07 14:06:43 2016 -0500
# Node ID ddf0a5f3a967705f8b6168a94789dc0a1a2e086b
# Parent  2bb4e5a6290db17e6d57a8c16f067dd7f1eccfe9
split interface and implementation for dmsolve

* sparse-dmsolve.h: New file.  Provide dmsolve declaration only.
* liboctave/numeric/module.mk: Update.
* sparse-dmsolve.cc: Explicitly instantiate template types we need.
* CSparse.cc, dSparse.cc: Include sparse-dmsolve.h instead of
sparse-dmsolve.cc.

diff --git a/liboctave/array/CSparse.cc b/liboctave/array/CSparse.cc
--- a/liboctave/array/CSparse.cc
+++ b/liboctave/array/CSparse.cc
@@ -61,18 +61,18 @@ along with Octave; see the file COPYING.
 
 #include "Sparse-diag-op-defs.h"
 
 #include "Sparse-perm-op-defs.h"
 
 // Define whether to use a basic QR solver or one that uses a Dulmange
 // Mendelsohn factorization to seperate the problem into under-determined,
 // well-determined and over-determined parts and solves them seperately
-#ifndef USE_QRSOLVE
-#  include "sparse-dmsolve.cc"
+#if ! defined (USE_QRSOLVE)
+#  include "sparse-dmsolve.h"
 #endif
 
 // Fortran functions we call.
 extern "C"
 {
   F77_RET_T
   F77_FUNC (zgbtrf, ZGBTRF) (const octave_idx_type&, const octave_idx_type&,
                              const octave_idx_type&, const octave_idx_type&,
diff --git a/liboctave/array/dSparse.cc b/liboctave/array/dSparse.cc
--- a/liboctave/array/dSparse.cc
+++ b/liboctave/array/dSparse.cc
@@ -56,18 +56,18 @@ along with Octave; see the file COPYING.
 
 #include "Sparse-diag-op-defs.h"
 
 #include "Sparse-perm-op-defs.h"
 
 // Define whether to use a basic QR solver or one that uses a Dulmange
 // Mendelsohn factorization to seperate the problem into under-determined,
 // well-determined and over-determined parts and solves them seperately
-#ifndef USE_QRSOLVE
-#  include "sparse-dmsolve.cc"
+#if ! defined (USE_QRSOLVE)
+#  include "sparse-dmsolve.h"
 #endif
 
 // Fortran functions we call.
 extern "C"
 {
   F77_RET_T
   F77_FUNC (dgbtrf, DGBTRF) (const octave_idx_type&, const octave_idx_type&,
                              const octave_idx_type&, const octave_idx_type&,
diff --git a/liboctave/numeric/module.mk b/liboctave/numeric/module.mk
--- a/liboctave/numeric/module.mk
+++ b/liboctave/numeric/module.mk
@@ -76,16 +76,17 @@ NUMERIC_INC = \
   liboctave/numeric/oct-fftw.h \
   liboctave/numeric/oct-norm.h \
   liboctave/numeric/oct-rand.h \
   liboctave/numeric/oct-spparms.h \
   liboctave/numeric/randgamma.h \
   liboctave/numeric/randmtzig.h \
   liboctave/numeric/randpoisson.h \
   liboctave/numeric/sparse-chol.h \
+  liboctave/numeric/sparse-dmsolve.h \
   liboctave/numeric/sparse-lu.h \
   liboctave/numeric/sparse-qr.h
 
 NUMERIC_C_SRC = \
   liboctave/numeric/randgamma.c \
   liboctave/numeric/randmtzig.c \
   liboctave/numeric/randpoisson.c
 
@@ -139,25 +140,25 @@ NUMERIC_SRC = \
   liboctave/numeric/lo-mappers.cc \
   liboctave/numeric/lo-specfun.cc \
   liboctave/numeric/oct-convn.cc \
   liboctave/numeric/oct-fftw.cc \
   liboctave/numeric/oct-norm.cc \
   liboctave/numeric/oct-rand.cc \
   liboctave/numeric/oct-spparms.cc \
   liboctave/numeric/sparse-chol.cc \
+  liboctave/numeric/sparse-dmsolve.cc \
   liboctave/numeric/sparse-lu.cc \
   liboctave/numeric/sparse-qr.cc \
   $(NUMERIC_C_SRC)
 
 LIBOCTAVE_TEMPLATE_SRC += \
   liboctave/numeric/base-lu.cc \
   liboctave/numeric/base-qr.cc \
-  liboctave/numeric/bsxfun-defs.cc \
-  liboctave/numeric/sparse-dmsolve.cc
+  liboctave/numeric/bsxfun-defs.cc
 
 ## Special rules for sources which must be built before rest of compilation.
 $(LIBOCTAVE_OPT_INC) : %.h : %.in
 	$(AM_V_GEN)rm -f $@-t $@ && \
 	$(PERL) $(top_srcdir)/build-aux/mk-opts.pl --opt-class-header $< > $@-t && \
 	mv $@-t $@
 
 $(LIBOCTAVE_OPT_INC) : $(top_srcdir)/build-aux/mk-opts.pl
diff --git a/liboctave/numeric/sparse-dmsolve.cc b/liboctave/numeric/sparse-dmsolve.cc
--- a/liboctave/numeric/sparse-dmsolve.cc
+++ b/liboctave/numeric/sparse-dmsolve.cc
@@ -470,8 +470,42 @@ dmsolve (const ST &a, const T &b, octave
 
 #else
 
   (*current_liboctave_error_handler)
     ("support for CXSparse was unavailable or disabled when liboctave was built");
 
 #endif
 }
+
+// Instantiations we need.
+
+template ComplexMatrix
+dmsolve<ComplexMatrix, SparseComplexMatrix, Matrix>
+  (const SparseComplexMatrix&, const Matrix&, octave_idx_type&);
+
+template SparseComplexMatrix
+dmsolve<SparseComplexMatrix, SparseComplexMatrix, SparseMatrix>
+  (const SparseComplexMatrix&, const SparseMatrix&, octave_idx_type&);
+
+template ComplexMatrix
+dmsolve<ComplexMatrix, SparseComplexMatrix, ComplexMatrix>
+  (const SparseComplexMatrix&, const ComplexMatrix&, octave_idx_type&);
+
+template SparseComplexMatrix
+dmsolve<SparseComplexMatrix, SparseComplexMatrix, SparseComplexMatrix>
+  (const SparseComplexMatrix&, const SparseComplexMatrix&, octave_idx_type&);
+
+template Matrix
+dmsolve<Matrix, SparseMatrix, Matrix>
+  (const SparseMatrix&, const Matrix&, octave_idx_type&);
+
+template SparseMatrix
+dmsolve<SparseMatrix, SparseMatrix, SparseMatrix>
+  (const SparseMatrix&, const SparseMatrix&, octave_idx_type&);
+
+template ComplexMatrix
+dmsolve<ComplexMatrix, SparseMatrix, ComplexMatrix>
+  (const SparseMatrix&, const ComplexMatrix&, octave_idx_type&);
+
+template SparseComplexMatrix
+dmsolve<SparseComplexMatrix, SparseMatrix, SparseComplexMatrix>
+  (const SparseMatrix&, const SparseComplexMatrix&, octave_idx_type&);
diff --git a/liboctave/numeric/sparse-dmsolve.h b/liboctave/numeric/sparse-dmsolve.h
new file mode 100644
--- /dev/null
+++ b/liboctave/numeric/sparse-dmsolve.h
@@ -0,0 +1,31 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+Copyright (C) 2006-2015 David Bateman
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_sparse_dmsolve_h)
+#define octave_sparse_dmsolve_h 1
+
+template <typename RT, typename ST, typename T>
+RT
+dmsolve (const ST& a, const T& b, octave_idx_type& info);
+
+#endif
