# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1374329144 -7200
#      Sat Jul 20 16:05:44 2013 +0200
# Node ID 62d5f73e840c89dd21579578f736f164b2d0dc88
# Parent  1b549a0c3ca43e33bfe38b2f493e4a72ac4c99b1
axes.m: reorder figure children after setting the currentaxes (bug #39539).

* scripts/plot/axes.m:

diff --git a/scripts/plot/axes.m b/scripts/plot/axes.m
--- a/scripts/plot/axes.m
+++ b/scripts/plot/axes.m
@@ -15,48 +15,68 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} axes ()
 ## @deftypefnx {Function File} {} axes (@var{property}, @var{value}, @dots{})
 ## @deftypefnx {Function File} {} axes (@var{h})
-## Create an axes object and return a handle to it.
+## @deftypefnx {Function File} {@var{h} =} axes (@dots{})
+## Create an axes object and return a handle to it, or set the current
+## axes to @var{h}.
+##
+## Called without any arguments, or with @var{property}/@var{value} pairs,
+## contruct a new axes.  For accepted properties and corresponding
+## values, see @code{set} function.
+##
+## Called with a single axes handle argument @var{h}, the function makes
+## @var{h} the current axis.  It also restacks the axes in the
+## corresponding figure so that @var{h} is the first entry in the list
+## of children.  This causes @var{h} to be displayed on top of any other
+## axes objects (Z-order stacking).
+## 
+## @seealso {gca, set, get}
 ## @end deftypefn
 
 ## Author: jwe
 
 function h = axes (varargin)
 
   if (nargin == 0 || nargin > 1)
     ## Create an axes object.
     idx = find (strcmpi (varargin(1:2:end), "parent"), 1, "first");
     if (! isempty (idx) && length (varargin) >= 2*idx)
       cf = varargin{2*idx};
       varargin([2*idx-1, 2*idx]) = [];
     else
       cf = gcf ();
     endif
-    tmp = __go_axes__ (cf, varargin{:});
-    if (__is_handle_visible__ (tmp))
-      set (ancestor (cf, "figure"), "currentaxes", tmp);
+    htmp = __go_axes__ (cf, varargin{:});
+    if (__is_handle_visible__ (htmp))
+      set (ancestor (cf, "figure"), "currentaxes", htmp);
     endif
   else
-    ## arg is axes handle.
-    tmp = varargin{1};
-    if (length (tmp) == 1 && ishandle (tmp)
-        && strcmp (get (tmp, "type"), "axes"))
-      if (__is_handle_visible__ (tmp))
-        parent = ancestor (tmp, "figure");
+    ## ARG is axes handle.
+    htmp = varargin{1};
+    if (isscalar (htmp) && ishandle (htmp)
+        && strcmp (get (htmp, "type"), "axes"))
+      if (__is_handle_visible__ (htmp))
+        parent = ancestor (htmp, "figure");
         set (0, "currentfigure", parent);
-        set (parent, "currentaxes", tmp);
+        set (parent, "currentaxes", htmp);
+
+        ## restack
+        ch = get (parent, "children")(:);
+        idx = (ch == htmp);
+        ch = [ch(idx); ch(!idx)];
+        set (parent, "children", ch);
       endif
     else
-      error ("axes: expecting argument to be a scalar axes handle");
+      error ("axes: H must be a scalar axes handle");
     endif
   endif
 
   if (nargout > 0)
-    h = tmp;
+    h = htmp;
   endif
 
 endfunction
