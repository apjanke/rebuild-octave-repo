# HG changeset patch
# User jwe
# Date 949403108 0
#      Tue Feb 01 11:05:08 2000 +0000
# Node ID 5a2c5361dbf1d94a4a57c4b92a97de7460020ecf
# Parent  5eef8a2294bdd2ecab22f526f3a8389aad44f766
[project @ 2000-02-01 11:04:15 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,14 @@
 2000-02-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* oct-getopt.h, oct-getopt.c: New files for interface to getopt.
+
+	* oct-kpse.h, oct-kpse.c: New files for interface to kpathsearch.
+
 	* dMatrix.cc (write_int, read_int): No longer declared static.
 
 	* CDiagMatrix.h: Delete decls for friend operators that are
 	handled by MDiagArray2 class.  Move others outside class decl and
 	strip friend status.
 	* dDiagMatrix.h: Likewise.
 
 	* MArray.h: Delete decls for friend operators inside class decl.
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -42,19 +42,20 @@ MX_OP_INC := mx-cdm-cm.h mx-cdm-cs.h mx-
 
 INCLUDES := Bounds.h CollocWt.h DAE.h DAEFunc.h DASSL.h FEGrid.h \
 	LinConst.h LP.h LPsolve.h LSODE.h NLConst.h NLEqn.h NLFunc.h \
 	NLP.h ODE.h ODEFunc.h Objective.h QP.h Quad.h Range.h base-de.h \
 	base-min.h byte-swap.h cmd-edit.h cmd-hist.h data-conv.h \
 	dir-ops.h file-ops.h file-stat.h getopt.h glob-match.h \
 	idx-vector.h lo-ieee.h lo-mappers.h lo-specfun.h lo-sysdep.h \
 	lo-utils.h mach-info.h oct-alloc.h oct-cmplx.h oct-env.h \
-	oct-group.h oct-passwd.h oct-shlib.h oct-syscalls.h oct-time.h \
-	pathlen.h pathsearch.h prog-args.h statdefs.h str-vec.h sun-utils.h \
-	sysdir.h systime.h syswait.h \
+	oct-getopt.h oct-group.h oct-kpse.h oct-passwd.h \
+	oct-shlib.h oct-syscalls.h oct-time.h pathlen.h pathsearch.h \
+	prog-args.h statdefs.h str-vec.h sun-utils.h sysdir.h systime.h \
+	syswait.h \
 	$(MATRIX_INC) \
 	$(MX_OP_INC)
 
 TEMPLATE_SRC := Array.cc Array2.cc Array3.cc DiagArray2.cc \
 	MArray.cc MArray2.cc MDiagArray2.cc base-lu.cc
 
 TI_SRC := Array-C.cc Array-b.cc Array-ch.cc Array-i.cc Array-d.cc \
 	Array-s.cc Array-str.cc \
@@ -75,19 +76,20 @@ MX_OP_SRC := mx-cdm-cm.cc mx-cdm-cs.cc m
 	mx-m-cs.cc mx-m-dm.cc mx-s-cdm.cc mx-s-cm.cc mx-s-dm.cc
 
 SOURCES := Bounds.cc CollocWt.cc DAE.cc DASSL.cc FEGrid.cc LinConst.cc \
 	LPsolve.cc LSODE.cc NLEqn.cc Quad.cc Range.cc cmd-edit.cc \
 	cmd-hist.cc data-conv.cc dir-ops.cc f2c-main.c file-ops.cc \
 	file-stat.cc filemode.c getopt.c getopt1.c glob-match.cc \
 	idx-vector.cc lo-ieee.cc lo-mappers.cc lo-specfun.cc \
 	lo-sysdep.cc lo-utils.cc mach-info.cc mkdir.c oct-alloc.cc \
-	oct-env.cc oct-group.cc oct-passwd.cc oct-shlib.cc oct-syscalls.cc \
-	oct-time.cc pathsearch.cc prog-args.cc rename.c rmdir.c \
-	strftime.c strptime.c str-vec.cc tempname.c tempnam.c \
+	oct-env.cc oct-getopt.c oct-group.cc oct-kpse.c oct-passwd.cc \
+	oct-shlib.cc oct-syscalls.cc oct-time.cc \
+	pathsearch.cc prog-args.cc rename.c rmdir.c strftime.c \
+	strptime.c str-vec.cc tempname.c tempnam.c \
 	$(TEMPLATE_SRC) \
 	$(TI_SRC) \
 	$(MATRIX_SRC) \
 	$(MX_OP_SRC)
 
 EXTRAS := mx-inlines.cc
 
 INCLUDES_FOR_INSTALL := $(INCLUDES) $(TEMPLATE_SRC) $(EXTRAS)
diff --git a/liboctave/oct-getopt.c b/liboctave/oct-getopt.c
new file mode 100644
--- /dev/null
+++ b/liboctave/oct-getopt.c
@@ -0,0 +1,47 @@
+/*
+
+Copyright (C) 2000 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "getopt.h"
+
+int
+octave_getopt (int argc, char *const *argv, const char *optstring)
+{
+  return getopt (argc, argv, optstring);
+}
+
+int
+octave_getopt_long (int argc, char *const *argv, const char *options,
+		    const struct option *long_options, int *opt_index)
+{
+  return getopt_long (argc, argv, options, long_options, opt_index);
+}
+
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/liboctave/oct-getopt.h b/liboctave/oct-getopt.h
new file mode 100644
--- /dev/null
+++ b/liboctave/oct-getopt.h
@@ -0,0 +1,43 @@
+/*
+
+Copyright (C) 2000 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#if !defined (octave_getopt_h)
+#define octave_getopt_h 1
+
+extern int
+octave_getopt (int, char *const *, const char *);
+
+extern int
+octave_getopt_long (int, char *const *, const char *,
+		    const struct option *, int *);
+
+extern char *optarg;
+
+extern int optind;
+
+#endif
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/liboctave/oct-kpse.c b/liboctave/oct-kpse.c
new file mode 100644
--- /dev/null
+++ b/liboctave/oct-kpse.c
@@ -0,0 +1,88 @@
+/*
+
+Copyright (C) 2000 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <kpathsea/default.h>
+#include <kpathsea/expand.h>
+#include <kpathsea/pathsearch.h>
+#include <kpathsea/progname.h>
+
+#define OCTAVE_KPSE_SKIP_STRUCT_DECLS
+#include "oct-kpse.h"
+#undef OCTAVE_KPSE_SKIP_STRUCT_DECLS
+
+str_llist_type *
+octave_kpse_element_dirs (const char *elt)
+{
+  return kpse_element_dirs (elt);
+}
+
+char *
+octave_kpse_path_search (const char *path, const char *name, int must_exist)
+{
+  return kpse_path_search (path, name, must_exist);
+}
+
+char **
+octave_kpse_all_path_search (const char *path, const char *name)
+{
+  return kpse_all_path_search (path, name);
+}
+
+void
+octave_kpse_set_progname (const char *name)
+{
+  octave_kpse_set_progname (name);
+}
+
+void
+octave_kpse_clear_dir_cache (void)
+{
+  kpse_clear_dir_cache ();
+}
+
+char *
+octave_kpse_expand_default (const char *path, const char *dflt)
+{
+  return kpse_expand_default (path, dflt);
+}
+
+char *
+octave_kpse_path_expand (const char *path)
+{
+  return kpse_path_expand (path);
+}
+
+char *
+octave_kpse_path_element (const char *path)
+{
+  return kpse_path_element (path);
+}
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/liboctave/oct-kpse.h b/liboctave/oct-kpse.h
new file mode 100644
--- /dev/null
+++ b/liboctave/oct-kpse.h
@@ -0,0 +1,74 @@
+/*
+
+Copyright (C) 2000 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#if !defined (octave_kpse_h)
+#define octave_kpse_h 1
+
+#if !defined (OCTAVE_KPSE_SKIP_STRUCT_DECLS)
+struct str_llist_elt
+{
+  char *str;
+  int moved;
+  struct str_llist_elt *next;
+};
+typedef struct str_llist_elt str_llist_elt_type;
+typedef struct str_llist_elt *str_llist_type;
+
+#define STR_LLIST(sl) ((sl).str)
+#define STR_LLIST_MOVED(sl) ((sl).moved)
+#define STR_LLIST_NEXT(sl) ((sl).next)
+#endif
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+
+extern unsigned int kpathsea_debug;
+
+extern str_llist_type *octave_kpse_element_dirs (const char *);
+
+extern char *octave_kpse_path_search (const char *, const char *, int);
+
+extern char **octave_kpse_all_path_search (const char *, const char *);
+
+extern void octave_kpse_set_progname (const char *);
+
+extern void octave_kpse_clear_dir_cache (void);
+
+extern char *octave_kpse_expand_default (const char *, const char *);
+
+extern char *octave_kpse_path_expand (const char *);
+
+extern char *octave_kpse_path_element (const char *);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/liboctave/pathsearch.cc b/liboctave/pathsearch.cc
--- a/liboctave/pathsearch.cc
+++ b/liboctave/pathsearch.cc
@@ -24,36 +24,21 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include <cstdlib>
 
 #include <string>
 
 #include "lo-utils.h"
+#include "oct-kpse.h"
 #include "pathsearch.h"
 #include "str-vec.h"
 #include "str-vec.h"
 
-extern "C"
-{
-// Have to redefine these because they conflict with new C++ keywords
-// or otherwise cause trouble...
-#define string kpse_string
-
-#include <kpathsea/default.h>
-#include <kpathsea/expand.h>
-#include <kpathsea/pathsearch.h>
-#include <kpathsea/progname.h>
-
-extern unsigned int kpathsea_debug;
-
-#undef string
-}
-
 static bool octave_kpathsea_initialized = false;
 
 string_vector
 dir_path::elements (void)
 {
   return initialized ? pv : string_vector ();
 }
 
@@ -68,17 +53,18 @@ dir_path::all_directories (void)
       int len = pv.length ();
 
       int nmax = len > 32 ? len : 32;
 
       retval.resize (len);
 
       for (int i = 0; i < len; i++)
 	{
-	  str_llist_type *elt_dirs = kpse_element_dirs (pv[i].c_str ());
+	  str_llist_type *elt_dirs
+	    = ::octave_kpse_element_dirs (pv[i].c_str ());
 
 	  if (elt_dirs)
 	    {
 	      str_llist_elt_type *dir;
 
 	      for (dir = *elt_dirs; dir; dir = STR_LLIST_NEXT (*dir))
 		{
 		  char *elt_dir = STR_LLIST (*dir);
@@ -104,17 +90,17 @@ dir_path::all_directories (void)
 
 std::string
 dir_path::find_first (const std::string& nm)
 {
   std::string retval;
 
   if (initialized)
     {
-      char *tmp = kpse_path_search (p.c_str (), nm.c_str (), true);
+      char *tmp = ::octave_kpse_path_search (p.c_str (), nm.c_str (), true);
       if (tmp)
 	{
 	  retval = tmp;
 	  free (tmp);
 	}
     }
 
   return retval;
@@ -122,94 +108,95 @@ dir_path::find_first (const std::string&
 
 string_vector
 dir_path::find_all (const std::string& nm)
 {
   string_vector retval;
 
   if (initialized)
     {
-      kpse_string *tmp = kpse_all_path_search (p.c_str (), nm.c_str ());
+      char **tmp = ::octave_kpse_all_path_search (p.c_str (), nm.c_str ());
 
       if (tmp)
 	{
 	  int count = 0;
-	  kpse_string *ptr = tmp;
+	  char **ptr = tmp;
 	  while (*ptr++)
 	    count++;
 
 	  retval.resize (count);
 
 	  for (int i = 0; i < count; i++)
 	    retval[i] = tmp[i];
 	}
     }
 
   return retval;
 }
 
 void
 dir_path::set_program_name (const std::string& nm)
 {
-  kpse_set_progname (nm.c_str ());
+  ::octave_kpse_set_progname (nm.c_str ());
 }
 
 void
 dir_path::init (void)
 {
   if (! octave_kpathsea_initialized)
     {
       char *s = getenv ("KPATHSEA_DEBUG");
 
       if (s)
 	kpathsea_debug |= atoi (s);
 
       octave_kpathsea_initialized = true;
     }
 
-  kpse_clear_dir_cache ();
+  ::octave_kpse_clear_dir_cache ();
 
   char *t1 = 0;
 
   if (p_default.empty ())
-    t1 = kpse_path_expand (p_orig.c_str ());
+    t1 = ::octave_kpse_path_expand (p_orig.c_str ());
   else
     {
-      char *t2 = kpse_expand_default (p_orig.c_str (), p_default.c_str ());
+      char *t2
+	= ::octave_kpse_expand_default (p_orig.c_str (), p_default.c_str ());
 
-      t1 = kpse_path_expand (t2);
+      t1 = ::octave_kpse_path_expand (t2);
 
       if (t2)
 	free (t2);
     }
 
   if (t1)
     {
       p = t1;
       free (t1);
     }
   else
     p = std::string ();
 
   int count = 0;
-  char *path_elt = kpse_path_element (p.c_str ());
+  char *path_elt = ::octave_kpse_path_element (p.c_str ());
   while (path_elt)
     {
-      path_elt = kpse_path_element (0);
+      path_elt = ::octave_kpse_path_element (0);
       count++;
     }
 
   pv.resize (count);
 
-  path_elt = kpse_path_element (p.c_str ());
+  path_elt = ::octave_kpse_path_element (p.c_str ());
 
   for (int i = 0; i < count; i++)
     {
       pv[i] = path_elt;
-      path_elt = kpse_path_element (0);
+      path_elt = ::octave_kpse_path_element (0);
     }
 
   initialized = true;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/prog-args.cc b/liboctave/prog-args.cc
--- a/liboctave/prog-args.cc
+++ b/liboctave/prog-args.cc
@@ -19,28 +19,28 @@ along with Octave; see the file COPYING.
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include "getopt.h"
+#include "oct-getopt.h"
 
 #include "prog-args.h"
 
 int
 prog_args::getopt (void)
 {
   if (long_opts)
-    return ::getopt_long (xargc, xargv, short_opts,
-			  X_CAST (const struct option *, long_opts), 0);
+    return ::octave_getopt_long (xargc, xargv, short_opts,
+				 X_CAST (const struct option *, long_opts), 0);
   else
-    return ::getopt (xargc, xargv, short_opts);
+    return ::octave_getopt (xargc, xargv, short_opts);
 }
 
 const char *
 prog_args::optarg (void)
 {
   return ::optarg;
 }
 
