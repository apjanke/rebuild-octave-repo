# HG changeset patch
# User jwe
# Date 845144673 0
#      Sat Oct 12 18:24:33 1996 +0000
# Node ID 170053c0f75efbe671684687f96257026cf72e4f
# Parent  d9147efd1a9348370ead28b3f97db21903b05460
[project @ 1996-10-12 18:23:01 by jwe]

diff --git a/liboctave/dDiagMatrix.cc b/liboctave/dDiagMatrix.cc
--- a/liboctave/dDiagMatrix.cc
+++ b/liboctave/dDiagMatrix.cc
@@ -33,26 +33,26 @@ Software Foundation, 59 Temple Place - S
 
 #include "lo-error.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
 #include "oct-cmplx.h"
 
 // Diagonal Matrix class.
 
-int
+bool
 DiagMatrix::operator == (const DiagMatrix& a) const
 {
   if (rows () != a.rows () || cols () != a.cols ())
     return 0;
 
   return equal (data (), a.data (), length ());
 }
 
-int
+bool
 DiagMatrix::operator != (const DiagMatrix& a) const
 {
   return !(*this == a);
 }
 
 DiagMatrix&
 DiagMatrix::fill (double val)
 {
@@ -304,20 +304,23 @@ DiagMatrix::inverse (int &info) const
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
 DiagMatrix&
 DiagMatrix::operator += (const DiagMatrix& a)
 {
   int nr = rows ();
   int nc = cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix += operation attempted");
+      gripe_nonconformant ("operator +=", nr, nc, a_nr, a_nc);
       return *this;
     }
 
   if (nc == 0 || nr == 0)
     return *this;
 
   double *d = fortran_vec (); // Ensures only one reference to my privates!
 
@@ -325,20 +328,23 @@ DiagMatrix::operator += (const DiagMatri
   return *this;
 }
 
 DiagMatrix&
 DiagMatrix::operator -= (const DiagMatrix& a)
 {
   int nr = rows ();
   int nc = cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix -= operation attempted");
+      gripe_nonconformant ("operator -=", nr, nc, a_nr, a_nc);
       return *this;
     }
 
   if (nr == 0 || nc == 0)
     return *this;
 
   double *d = fortran_vec (); // Ensures only one reference to my privates!
 
@@ -348,22 +354,23 @@ DiagMatrix::operator -= (const DiagMatri
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
 DiagMatrix
 operator * (const DiagMatrix& a, const DiagMatrix& b)
 {
   int nr_a = a.rows ();
   int nc_a = a.cols ();
+
   int nr_b = b.rows ();
   int nc_b = b.cols ();
+
   if (nc_a != nr_b)
     {
-      (*current_liboctave_error_handler)
-        ("nonconformant matrix multiplication attempted");
+      gripe_nonconformant ("operaotr *", nr_a, nc_a, nr_b, nc_b);
       return DiagMatrix ();
     }
 
   if (nr_a == 0 || nc_a == 0 || nc_b == 0)
     return DiagMatrix (nr_a, nc_a, 0.0);
 
   DiagMatrix c (nr_a, nc_b);
 
diff --git a/liboctave/dDiagMatrix.h b/liboctave/dDiagMatrix.h
--- a/liboctave/dDiagMatrix.h
+++ b/liboctave/dDiagMatrix.h
@@ -50,18 +50,18 @@ public:
   DiagMatrix (const DiagMatrix& a) : MDiagArray2<double> (a) { }
 
   DiagMatrix& operator = (const DiagMatrix& a)
     {
       MDiagArray2<double>::operator = (a);
       return *this;
     }
 
-  int operator == (const DiagMatrix& a) const;
-  int operator != (const DiagMatrix& a) const;
+  bool operator == (const DiagMatrix& a) const;
+  bool operator != (const DiagMatrix& a) const;
 
   DiagMatrix& fill (double val);
   DiagMatrix& fill (double val, int beg, int end);
   DiagMatrix& fill (const ColumnVector& a);
   DiagMatrix& fill (const RowVector& a);
   DiagMatrix& fill (const ColumnVector& a, int beg);
   DiagMatrix& fill (const RowVector& a, int beg);
 
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -138,26 +138,26 @@ Matrix::Matrix (const DiagMatrix& a)
 Matrix::Matrix (const charMatrix& a)
   : MArray2<double> (a.rows (), a.cols ())
 {
   for (int i = 0; i < a.rows (); i++)
     for (int j = 0; j < a.cols (); j++)
       elem (i, j) = a.elem (i, j);
 }
 
-int
+bool
 Matrix::operator == (const Matrix& a) const
 {
   if (rows () != a.rows () || cols () != a.cols ())
-    return 0;
+    return false;
 
   return equal (data (), a.data (), length ());
 }
 
-int
+bool
 Matrix::operator != (const Matrix& a) const
 {
   return !(*this == a);
 }
 
 Matrix&
 Matrix::insert (const Matrix& a, int r, int c)
 {
@@ -1413,20 +1413,23 @@ Matrix::expm (void) const
   return retval * exp (trshift);
 }
 
 Matrix&
 Matrix::operator += (const Matrix& a)
 {
   int nr = rows ();
   int nc = cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix += operation attempted");
+      gripe_nonconformant ("operator +=", nr, nc, a_nr, a_nc);
       return *this;
     }
 
   if (nr == 0 || nc == 0)
     return *this;
 
   double *d = fortran_vec (); // Ensures only one reference to my privates!
 
@@ -1435,56 +1438,69 @@ Matrix::operator += (const Matrix& a)
   return *this;
 }
 
 Matrix&
 Matrix::operator -= (const Matrix& a)
 {
   int nr = rows ();
   int nc = cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix -= operation attempted");
+      gripe_nonconformant ("operator -=", nr, nc, a_nr, a_nc);
       return *this;
     }
 
   if (nr == 0 || nc == 0)
     return *this;
 
   double *d = fortran_vec (); // Ensures only one reference to my privates!
 
   subtract2 (d, a.data (), length ());
 
   return *this;
 }
 
 Matrix&
 Matrix::operator += (const DiagMatrix& a)
 {
-  if (rows () != a.rows () || cols () != a.cols ())
+  int nr = rows ();
+  int nc = cols ();
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix += operation attempted");
+      gripe_nonconformant ("operator +=", nr, nc, a_nr, a_nc);
       return *this;
     }
 
   for (int i = 0; i < a.length (); i++)
     elem (i, i) += a.elem (i, i);
 
   return *this;
 }
 
 Matrix&
 Matrix::operator -= (const DiagMatrix& a)
 {
-  if (rows () != a.rows () || cols () != a.cols ())
+  int nr = rows ();
+  int nc = cols ();
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix += operation attempted");
+      gripe_nonconformant ("operator -=", nr, nc, a_nr, a_nc);
       return *this;
     }
 
   for (int i = 0; i < a.length (); i++)
     elem (i, i) -= a.elem (i, i);
 
   return *this;
 }
@@ -1512,18 +1528,17 @@ Matrix
 operator * (const ColumnVector& v, const RowVector& a)
 {
   Matrix retval;
 
   int len = v.length ();
   int a_len = a.length ();
 
   if (len != a_len)
-    (*current_liboctave_error_handler)
-      ("nonconformant vector multiplication attempted");
+    gripe_nonconformant ("operator *", len, 1, 1, a_len);
   else
     {
       if (len != 0)
 	{
 	  retval.resize (len, a_len);
 	  double *c = retval.fortran_vec ();
 
 	  F77_XFCN (dgemm, DGEMM, ("N", "N", len, a_len, 1, 1.0,
@@ -1573,20 +1588,23 @@ operator - (double s, const DiagMatrix& 
 
 // matrix by diagonal matrix -> matrix operations
 
 Matrix
 operator + (const Matrix& m, const DiagMatrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix addition attempted");
+      gripe_nonconformant ("operator +", nr, nc, a_nr, a_nc);
       return Matrix ();
     }
 
   if (nr == 0 || nc == 0)
     return Matrix (nr, nc);
 
   Matrix result (m);
   int a_len = a.length ();
@@ -1596,20 +1614,23 @@ operator + (const Matrix& m, const DiagM
   return result;
 }
 
 Matrix
 operator - (const Matrix& m, const DiagMatrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix subtraction attempted");
+      gripe_nonconformant ("operator -", nr, nc, a_nr, a_nc);
       return Matrix ();
     }
 
   if (nr == 0 || nc == 0)
     return Matrix (nr, nc);
 
   Matrix result (m);
   int a_len = a.length ();
@@ -1626,18 +1647,17 @@ operator * (const Matrix& m, const DiagM
 
   int nr = m.rows ();
   int nc = m.cols ();
 
   int a_nr = a.rows ();
   int a_nc = a.cols ();
 
   if (nc != a_nr)
-    (*current_liboctave_error_handler)
-      ("nonconformant matrix multiplication attempted");
+    gripe_nonconformant ("operator *", nr, nc, a_nr, a_nc);
   else
     {
       if (nr == 0 || nc == 0 || a_nc == 0)
 	retval.resize (nr, a_nc, 0.0);
       else
 	{
 	  retval.resize (nr, a_nc);
 	  double *c = retval.fortran_vec ();
@@ -1681,20 +1701,23 @@ operator * (const Matrix& m, const DiagM
 
 // diagonal matrix by matrix -> matrix operations
 
 Matrix
 operator + (const DiagMatrix& m, const Matrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix addition attempted");
+      gripe_nonconformant ("operator +", nr, nc, a_nr, a_nc);
       return Matrix ();
     }
 
   if (nr == 0 || nc == 0)
     return Matrix (nr, nc);
 
   Matrix result (a);
   for (int i = 0; i < m.length (); i++)
@@ -1703,20 +1726,23 @@ operator + (const DiagMatrix& m, const M
   return result;
 }
 
 Matrix
 operator - (const DiagMatrix& m, const Matrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix subtraction attempted");
+      gripe_nonconformant ("operator -", nr, nc, a_nr, a_nc);
       return Matrix ();
     }
 
   if (nr == 0 || nc == 0)
     return Matrix (nr, nc);
 
   Matrix result (-a);
   for (int i = 0; i < m.length (); i++)
@@ -1729,18 +1755,17 @@ Matrix
 operator * (const DiagMatrix& m, const Matrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
   int a_nr = a.rows ();
   int a_nc = a.cols ();
   if (nc != a_nr)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix multiplication attempted");
+      gripe_nonconformant ("operator *", nr, nc, a_nr, a_nc);
       return Matrix ();
     }
 
   if (nr == 0 || nc == 0 || a_nc == 0)
     return Matrix (nr, a_nc, 0.0);
 
   Matrix c (nr, a_nc);
 
@@ -1782,18 +1807,17 @@ operator * (const Matrix& m, const Matri
 
   int nr = m.rows ();
   int nc = m.cols ();
 
   int a_nr = a.rows ();
   int a_nc = a.cols ();
 
   if (nc != a_nr)
-    (*current_liboctave_error_handler)
-      ("nonconformant matrix multiplication attempted");
+    gripe_nonconformant ("operator *", nr, nc, a_nr, a_nc);
   else
     {
       if (nr == 0 || nc == 0 || a_nc == 0)
 	retval.resize (nr, a_nc, 0.0);
       else
 	{
 	  int ld  = nr;
 	  int lda = a_nr;
@@ -1840,66 +1864,117 @@ void
 Matrix::map (d_d_Mapper f)
 {
   double *d = fortran_vec (); // Ensures only one reference to my privates!
 
   for (int i = 0; i < length (); i++)
     d[i] = f (d[i]);
 }
 
+bool
+Matrix::any_element_is_negative (void) const
+{
+  int nr = rows ();
+  int nc = cols ();
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      if (elem (i, j) < 0.0)
+	return true;
+
+  return false;
+}
+
+
+bool
+Matrix::any_element_is_inf_or_nan (void) const
+{
+  int nr = rows ();
+  int nc = cols ();
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      {
+	double val = elem (i, j);
+	if (xisinf (val) || xisnan (val))
+	  return 1;
+      }
+  return 0;
+}
+
+bool
+Matrix::all_elements_are_int_or_inf_or_nan (void) const
+{
+  int nr = rows ();
+  int nc = cols ();
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      {
+	double val = elem (i, j);
+	if (xisnan (val) || D_NINT (val) == val)
+	  continue;
+	else
+	  return false;
+      }
+
+  return true;
+}
+
 // Return nonzero if any element of M is not an integer.  Also extract
 // the largest and smallest values and return them in MAX_VAL and MIN_VAL.
 
-int
+bool
 Matrix::all_integers (double& max_val, double& min_val) const
 {
   int nr = rows ();
   int nc = cols ();
 
   if (nr > 0 && nc > 0)
     {
       max_val = elem (0, 0);
       min_val = elem (0, 0);
     }
   else
-    return 0;
+    return false;
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       {
 	double val = elem (i, j);
 
 	if (val > max_val)
 	  max_val = val;
 
 	if (val < min_val)
 	  min_val = val;
 
 	if (D_NINT (val) != val)
-	  return 0;
+	  return false;
       }
-  return 1;
+
+  return true;
 }
 
-int
+bool
 Matrix::too_large_for_float (void) const
 {
   int nr = rows ();
-  int nc = columns ();
+  int nc = cols ();
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       {
 	double val = elem (i, j);
 
 	if (val > FLT_MAX || val < FLT_MIN)
-	  return 1;
+	  return true;
       }
 
-  return 0;
+  return false;
 }
 
 // XXX FIXME XXX Do these really belong here?  They should maybe be
 // cleaned up a bit, no?  What about corresponding functions for the
 // Vectors?
 
 Matrix
 Matrix::all (void) const
@@ -2244,16 +2319,31 @@ Matrix::sumsq (void) const
 	      double d = elem (i, j);
 	      retval.elem (0, j) += d * d;
 	    }
 	}
     }
   return retval;
 }
 
+Matrix
+Matrix::abs (void) const
+{
+  int nr = rows ();
+  int nc = cols ();
+
+  Matrix retval (nr, nc);
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      retval (i, j) = fabs (elem (i, j));
+
+  return retval;
+}
+
 ColumnVector
 Matrix::diag (void) const
 {
   return diag (0);
 }
 
 ColumnVector
 Matrix::diag (int k) const
@@ -3191,17 +3281,17 @@ Qzval (const Matrix& a, const Matrix& b)
 		  retval = cx;
 		}
 	      else
 		(*current_liboctave_error_handler)
 		  ("qzval: trouble in qzit, info = %d", info);
 	    }
 	}
       else
-	(*current_liboctave_error_handler) ("nonconformant matrices");
+	gripe_nonconformant ("qzval", a_nr, a_nc, b_nr, b_nc);
     }
   else
     (*current_liboctave_error_handler) ("qzval: square matrices required");
 
   return retval;
 }
 
 /*
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -63,18 +63,18 @@ public:
   Matrix (const charMatrix& a);
 
   Matrix& operator = (const Matrix& a)
     {
       MArray2<double>::operator = (a);
       return *this;
     }
 
-  int operator == (const Matrix& a) const;
-  int operator != (const Matrix& a) const;
+  bool operator == (const Matrix& a) const;
+  bool operator != (const Matrix& a) const;
 
   // destructive insert/delete/reorder operations
 
   Matrix& insert (const Matrix& a, int r, int c);
   Matrix& insert (const RowVector& a, int r, int c);
   Matrix& insert (const ColumnVector& a, int r, int c);
   Matrix& insert (const DiagMatrix& a, int r, int c);
 
@@ -168,17 +168,17 @@ public:
   Matrix& operator -= (const DiagMatrix& a);
 
   // unary operations
 
   Matrix operator ! (void) const;
 
   // column vector by row vector -> matrix operations
 
-  friend Matrix operator * (const ColumnVector& a, const RowVector& a);
+  friend Matrix operator * (const ColumnVector& a, const RowVector& b);
 
   // diagonal matrix by scalar -> matrix operations
 
   friend Matrix operator + (const DiagMatrix& a, double s);
   friend Matrix operator - (const DiagMatrix& a, double s);
 
   // scalar by diagonal matrix -> matrix operations
 
@@ -202,27 +202,31 @@ public:
   friend Matrix operator * (const Matrix& a, const Matrix& b);
 
   // other operations
 
   friend Matrix map (d_d_Mapper f, const Matrix& a);
   friend Matrix map (d_c_Mapper f, const ComplexMatrix& a);
   void map (d_d_Mapper f);
 
-  int all_integers (double& max_val, double& min_val) const;
-  int too_large_for_float (void) const;
+  bool any_element_is_negative (void) const;
+  bool any_element_is_inf_or_nan (void) const;
+  bool all_elements_are_int_or_inf_or_nan (void) const;
+  bool all_integers (double& max_val, double& min_val) const;
+  bool too_large_for_float (void) const;
  
   Matrix all (void) const;
   Matrix any (void) const;
 
   Matrix cumprod (void) const;
   Matrix cumsum (void) const;
   Matrix prod (void) const;
   Matrix sum (void) const;
   Matrix sumsq (void) const;
+  Matrix abs (void) const;
 
   ColumnVector diag (void) const;
   ColumnVector diag (int k) const;
 
   ColumnVector row_min (void) const;
   ColumnVector row_max (void) const;
 
   ColumnVector row_min (Array<int>& index) const;
