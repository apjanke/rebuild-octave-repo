# HG changeset patch
# User Rik <rik@octave.org>
# Date 1501864624 25200
#      Fri Aug 04 09:37:04 2017 -0700
# Node ID 01899bdd2a3a8cbc48c689da030fe8e4795b82be
# Parent  9ceb1916eadf9cdd8ac25197b2822c7516099d29
Eliminate unnecessary std::string ("...") constructor calls when "..." suffices.

* Backend.cc, KeyMap.cc, QtHandlesUtils.cc, error.cc, help.cc, oct-hist.cc,
pr-output.cc, urlwrite.cc, utils.cc, variables.cc, __voronoi__.cc,
ov-classdef.cc, ov-fcn-handle.cc, pt-funcall.cc, pt-pr-code.cc, pt-tm-const.cc,
DASPK.cc, DASRT.cc, DASSL.cc, LSODE.cc, oct-env.cc, kpse.cc:
Eliminate unnecessary std::string ("...") constructor calls when "..."
suffices.

diff --git a/libgui/graphics/Backend.cc b/libgui/graphics/Backend.cc
--- a/libgui/graphics/Backend.cc
+++ b/libgui/graphics/Backend.cc
@@ -47,26 +47,26 @@ along with Octave; see the file COPYING.
 
 namespace QtHandles
 {
 
   static std::string
   toolkitObjectProperty (const graphics_object& go)
   {
     if (go.isa ("figure"))
-      return std::string ("__plot_stream__");
+      return "__plot_stream__";
     else if (go.isa ("uicontrol")
              || go.isa ("uipanel")
              || go.isa ("uibuttongroup")
              || go.isa ("uimenu")
              || go.isa ("uicontextmenu")
              || go.isa ("uitoolbar")
              || go.isa ("uipushtool")
              || go.isa ("uitoggletool"))
-      return std::string ("__object__");
+      return "__object__";
     else
       qCritical ("QtHandles::Backend: no __object__ property known for object "
                  "of type %s", go.type ().c_str ());
 
     return "";
   }
 
   Backend::Backend (void)
diff --git a/libgui/graphics/KeyMap.cc b/libgui/graphics/KeyMap.cc
--- a/libgui/graphics/KeyMap.cc
+++ b/libgui/graphics/KeyMap.cc
@@ -245,14 +245,14 @@ namespace QtHandles
           keyMapper[Qt::Key_Udiaeresis] = "udiaeresis";
           keyMapper[Qt::Key_Yacute] = "yacute";
           keyMapper[Qt::Key_THORN] = "thorn";
           keyMapper[Qt::Key_ssharp] = "ssharp";
           keyMapper[Qt::Key_division] = "division";
           keyMapper[Qt::Key_ydiaeresis] = "ydiaeresis";
         }
 
-      return keyMapper.value (key, std::string ("<unknown key>"));
+      return keyMapper.value (key, "<unknown key>");
     }
 
   }
 
 }
diff --git a/libgui/graphics/QtHandlesUtils.cc b/libgui/graphics/QtHandlesUtils.cc
--- a/libgui/graphics/QtHandlesUtils.cc
+++ b/libgui/graphics/QtHandlesUtils.cc
@@ -107,24 +107,24 @@ namespace QtHandles
       QFont f (fromStdString (props.get_fontname ()));
 
       static std::map<std::string, QFont::Weight> weightMap;
       static std::map<std::string, QFont::Style> angleMap;
       static bool mapsInitialized = false;
 
       if (! mapsInitialized)
         {
-          weightMap[std::string ("normal")] = QFont::Normal;
-          weightMap[std::string ("light")] = QFont::Light;
-          weightMap[std::string ("demi")] = QFont::DemiBold;
-          weightMap[std::string ("bold")] = QFont::Bold;
+          weightMap["normal"] = QFont::Normal;
+          weightMap["light"] = QFont::Light;
+          weightMap["demi"] = QFont::DemiBold;
+          weightMap["bold"] = QFont::Bold;
 
-          angleMap[std::string ("normal")] = QFont::StyleNormal;
-          angleMap[std::string ("italic")] = QFont::StyleItalic;
-          angleMap[std::string ("oblique")] = QFont::StyleOblique;
+          angleMap["normal"] = QFont::StyleNormal;
+          angleMap["italic"] = QFont::StyleItalic;
+          angleMap["oblique"] = QFont::StyleOblique;
 
           mapsInitialized = true;
         }
 
       f.setPointSizeF (props.get___fontsize_points__ (height));
       f.setWeight (weightMap[props.get_fontweight ()]);
       f.setStyle (angleMap[props.get_fontangle ()]);
 
@@ -165,46 +165,46 @@ namespace QtHandles
 
       return rgb;
     }
 
     std::string
     figureSelectionType (QMouseEvent *event, bool isDoubleClick)
     {
       if (isDoubleClick)
-        return std::string ("open");
+        return "open";
       else
         {
           Qt::MouseButtons buttons = event->buttons ();
           Qt::KeyboardModifiers mods = event->modifiers ();
 
           if (mods == Qt::NoModifier)
             {
               if (buttons == Qt::LeftButton)
-                return std::string ("normal");
+                return "normal";
               else if (buttons == Qt::RightButton)
-                return std::string ("alt");
+                return "alt";
 #if defined (Q_WS_WIN)
               else if (buttons == (Qt::LeftButton | Qt::RightButton))
-                return std::string ("extend");
+                return "extend";
 #elif defined (Q_WS_X11)
               else if (buttons == Qt::MidButton)
-                return std::string ("extend");
+                return "extend";
 #endif
             }
           else if (buttons == Qt::LeftButton)
             {
               if (mods == Qt::ShiftModifier)
-                return std::string ("extend");
+                return "extend";
               else if (mods == Qt::ControlModifier)
-                return std::string ("alt");
+                return "alt";
             }
         }
 
-      return std::string ("normal");
+      return "normal";
     }
 
     /*
        Two figureCurrentPoint() routines are required:
        1) Used for QMouseEvents where cursor position data is in callback from Qt.
        2) Used for QKeyEvents where cursor position must be determined.
     */
     Matrix
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -204,17 +204,17 @@ verror (bool save_last_error, std::ostre
                   || base_msg.compare (0, cfn.length (), cfn) != 0)
                 {
                   msg_string += cfn + ' ';
                 }
             }
         }
     }
 
-  msg_string += base_msg + "\n";
+  msg_string += base_msg + '\n';
 
   if (save_last_error)
     {
       // This is the first error in a possible series.
 
       Vlast_error_id = id;
       Vlast_error_message = base_msg;
 
@@ -406,17 +406,17 @@ vwarning (const char *name, const char *
   //        message, not the traceback information.
 
   std::string base_msg = output_buf.str ();
   std::string msg_string;
 
   if (name)
     msg_string = std::string (name) + ": ";
 
-  msg_string += base_msg + "\n";
+  msg_string += base_msg + '\n';
 
   Vlast_warning_id = id;
   Vlast_warning_message = base_msg;
 
   if (! Vquiet_warning)
     {
       octave_diary << msg_string;
 
diff --git a/libinterp/corefcn/help.cc b/libinterp/corefcn/help.cc
--- a/libinterp/corefcn/help.cc
+++ b/libinterp/corefcn/help.cc
@@ -281,18 +281,17 @@ namespace octave
                       type = "command-line function";
                     else
                       {
                         file = fcn->src_file_name ();
                         type = "built-in function";
                       }
                   }
                 else
-                  type = val.is_user_script ()
-                    ? std::string ("script") : std::string ("function");
+                  type = val.is_user_script () ? "script" : "function";
               }
           }
         else
           {
             // We might find a file that contains only a doc string.
 
             load_path& lp = m_interpreter.get_load_path ();
 
diff --git a/libinterp/corefcn/oct-hist.cc b/libinterp/corefcn/oct-hist.cc
--- a/libinterp/corefcn/oct-hist.cc
+++ b/libinterp/corefcn/oct-hist.cc
@@ -103,17 +103,17 @@ default_history_size (void)
 
   return size;
 }
 
 static std::string
 default_history_timestamp_format (void)
 {
   return
-    std::string ("# Octave " OCTAVE_VERSION ", %a %b %d %H:%M:%S %Y %Z <")
+    "# Octave " OCTAVE_VERSION ", %a %b %d %H:%M:%S %Y %Z <"
     + octave::sys::env::get_user_name ()
     + '@'
     + octave::sys::env::get_host_name ()
     + '>';
 }
 
 // The format of the timestamp marker written to the history file when
 // Octave exits.
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -3921,17 +3921,17 @@ set_format_style (int argc, const string
         }
       else
         error ("format: unrecognized format state '%s'", arg.c_str ());
     }
   else
     {
       init_format_state ();
       set_output_prec_and_fw (5, 10);
-      format = std::string ("short");
+      format = "short";
     }
 
   format_string = format;
 }
 
 DEFUN (format, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} format
diff --git a/libinterp/corefcn/urlwrite.cc b/libinterp/corefcn/urlwrite.cc
--- a/libinterp/corefcn/urlwrite.cc
+++ b/libinterp/corefcn/urlwrite.cc
@@ -282,17 +282,17 @@ Undocumented internal function
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
 
   std::string host = args(0).xstring_value ("__ftp__: HOST must be a string");
 
   std::string user = (nargin > 1)
     ? args(1).xstring_value ("__ftp__: USER must be a string")
-    : std::string ("anonymous");
+    : "anonymous";
 
   std::string passwd = (nargin > 2)
     ? args(2).xstring_value ("__ftp__: PASSWD must be a string")
     : "";
 
   octave::url_handle_manager& uhm = interp.get_url_handle_manager ();
 
   octave::url_handle uh = uhm.make_url_handle (host, user, passwd,
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -515,23 +515,22 @@ fcn_file_in_path (const std::string& nam
 // See if there is a directory called "name" in the path and if it
 // contains a Contents.m file.  If so, return the full path to this file.
 
 std::string
 contents_file_in_path (const std::string& dir)
 {
   std::string retval;
 
-  if (dir.length () > 0)
+  if (! dir.empty ())
     {
       octave::load_path& lp = octave::__get_load_path__ ("contents_in_file_path");
 
       std::string tcontents
-        = octave::sys::file_ops::concat (lp.find_dir (dir),
-                                         std::string ("Contents.m"));
+        = octave::sys::file_ops::concat (lp.find_dir (dir), "Contents.m");
 
       octave::sys::file_stat fs (tcontents);
 
       if (fs.exists ())
         retval = octave::sys::env::make_absolute (tcontents);
     }
 
   return retval;
@@ -830,17 +829,17 @@ undo_string_escape (char c)
     case '\\': // backslash
       return R"(\\)";
 
     case '"': // double quote
       return R"(\")";
 
     default:
       {
-        static char retval[2] = "\0";
+        static char retval[2] {'\0', '\0'};
 
         retval[0] = c;
         return retval;
       }
     }
 }
 
 std::string
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -1646,18 +1646,17 @@ do_who (octave::interpreter& interp, int
 
           cs.push (&tmp_scope, 0);
           frame.add_method (cs, &octave::call_stack::pop);
 
           frame.add_method (tmp_scope, &octave::symbol_table::scope::clear_variables);
 
           octave::feval ("load", octave_value (nm), 0);
 
-          std::string newmsg = std::string ("Variables in the file ")
-                               + nm + ":\n\n";
+          std::string newmsg = "Variables in the file " + nm + ":\n\n";
 
           retval = do_who (interp, i, argv, return_list, verbose, newmsg);
 
           return retval;
         }
       else if (argv[i] == "-regexp")
         have_regexp = true;
       else if (argv[i] == "global")
diff --git a/libinterp/dldfcn/__voronoi__.cc b/libinterp/dldfcn/__voronoi__.cc
--- a/libinterp/dldfcn/__voronoi__.cc
+++ b/libinterp/dldfcn/__voronoi__.cc
@@ -338,17 +338,17 @@ Undocumented internal function.
 
 #else
 
   octave_unused_parameter (args);
 
   std::string caller
     = (args.length () > 0
        ? args(0).xstring_value ("__voronoi__: CALLER must be a string")
-       : std::string ("__voronoi__"));
+       : "__voronoi__");
 
   err_disabled_feature (caller, "Qhull");
 
 #endif
 }
 
 /*
 ## No test needed for internal helper function.
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -2517,17 +2517,17 @@ template <typename T>
 static std::string
 attribute_value_to_string (T *t, octave_value v)
 {
   if (v.is_string ())
     return v.string_value ();
   else if (t->expression ())
     return t->expression ()->original_text ();
   else
-    return std::string ("true");
+    return "true";
 }
 
 cdef_class
 cdef_class::make_meta_class (octave::interpreter& interp,
                              octave::tree_classdef *t, bool is_at_folder)
 {
   cdef_class retval;
   std::string class_name, full_class_name;
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -686,20 +686,20 @@ octave_fcn_handle::load_binary (std::ist
             success = false;
         }
     }
   else
     {
       std::string octaveroot;
       std::string fpath;
 
-      if (nm.find_first_of ("\n") != std::string::npos)
+      if (nm.find_first_of ('\n') != std::string::npos)
         {
-          size_t pos1 = nm.find_first_of ("\n");
-          size_t pos2 = nm.find_first_of ("\n", pos1 + 1);
+          size_t pos1 = nm.find_first_of ('\n');
+          size_t pos2 = nm.find_first_of ('\n', pos1 + 1);
           octaveroot = nm.substr (pos1 + 1, pos2 - pos1 - 1);
           fpath = nm.substr (pos2 + 1);
           nm = nm.substr (0, pos1);
         }
 
       success = set_fcn (octaveroot, fpath);
     }
 
diff --git a/libinterp/parse-tree/pt-funcall.cc b/libinterp/parse-tree/pt-funcall.cc
--- a/libinterp/parse-tree/pt-funcall.cc
+++ b/libinterp/parse-tree/pt-funcall.cc
@@ -45,17 +45,17 @@ namespace octave
   {
     if (pr_orig_text)
       {
         os << original_text ();
       }
     else
       {
         octave_function *fp = fcn.function_value ();
-        std::string nm = (fp ? fp->name () : std::string ("<invalid-function>"));
+        std::string nm = (fp ? fp->name () : "<invalid-function>");
 
         os << nm << " (";
 
         octave_idx_type n = args.length ();
         for (octave_idx_type i = 0; i < n; i++)
           {
             args(i).print_raw (os, pr_as_read_syntax);
 
diff --git a/libinterp/parse-tree/pt-pr-code.cc b/libinterp/parse-tree/pt-pr-code.cc
--- a/libinterp/parse-tree/pt-pr-code.cc
+++ b/libinterp/parse-tree/pt-pr-code.cc
@@ -370,17 +370,17 @@ namespace octave
             os << ']';
           }
 
         os << " = ";
       }
 
     std::string fcn_name = fcn.name ();
 
-    os << (fcn_name.empty () ? std::string ("(empty)") : fcn_name) << ' ';
+    os << (fcn_name.empty () ? "(empty)" : fcn_name) << ' ';
 
     tree_parameter_list *param_list = fcn.parameter_list ();
 
     if (param_list)
       {
         bool takes_varargs = fcn.takes_varargs ();
 
         int len = param_list->length ();
@@ -439,17 +439,17 @@ namespace octave
   void
   tree_print_code::visit_identifier (tree_identifier& id)
   {
     indent ();
 
     print_parens (id, "(");
 
     std::string nm = id.name ();
-    os << (nm.empty () ? std::string ("(empty)") : nm);
+    os << (nm.empty () ? "(empty)" : nm);
 
     print_parens (id, ")");
   }
 
   void
   tree_print_code::visit_if_clause (tree_if_clause& cmd)
   {
     tree_expression *expr = cmd.condition ();
diff --git a/libinterp/parse-tree/pt-tm-const.cc b/libinterp/parse-tree/pt-tm-const.cc
--- a/libinterp/parse-tree/pt-tm-const.cc
+++ b/libinterp/parse-tree/pt-tm-const.cc
@@ -58,18 +58,18 @@ eval_error (const char *msg, const dim_v
 }
 
 namespace octave
 {
   void
   tm_row_const::tm_row_const_rep::do_init_element (const octave_value& val,
                                                    bool& first_elem)
   {
-    std::string this_elt_class_nm
-      = val.isobject () ? std::string ("class") : val.class_name ();
+    std::string this_elt_class_nm = val.isobject () ? "class"
+                                                    : val.class_name ();
 
     class_nm = get_concat_class (class_nm, this_elt_class_nm);
 
     dim_vector this_elt_dv = val.dims ();
 
     if (! this_elt_dv.zero_by_zero ())
       {
         all_mt = false;
diff --git a/liboctave/numeric/DASPK.cc b/liboctave/numeric/DASPK.cc
--- a/liboctave/numeric/DASPK.cc
+++ b/liboctave/numeric/DASPK.cc
@@ -718,71 +718,68 @@ DASPK::error_message (void) const
       retval = "integration to tout completed by stepping past TOUT";
       break;
 
     case 4:
       retval = "initial condition calculation completed successfully";
       break;
 
     case -1:
-      retval = std::string ("a large amount of work has been expended (t =")
-               + t_curr + ')';
+      retval = "a large amount of work has been expended (t =" + t_curr + ')';
       break;
 
     case -2:
       retval = "the error tolerances are too stringent";
       break;
 
     case -3:
-      retval = std::string ("error weight became zero during problem. (t = ")
-               + t_curr
-               + "; solution component i vanished, and atol or atol(i) == 0)";
+      retval = "error weight became zero during problem. (t = " + t_curr +
+               "; solution component i vanished, and atol or atol(i) == 0)";
       break;
 
     case -6:
-      retval = std::string ("repeated error test failures on the last attempted step (t = ")
+      retval = "repeated error test failures on the last attempted step (t = "
                + t_curr + ')';
       break;
 
     case -7:
-      retval = std::string ("the corrector could not converge (t = ")
-               + t_curr + ')';
+      retval = "the corrector could not converge (t = " + t_curr + ')';
       break;
 
     case -8:
-      retval = std::string ("the matrix of partial derivatives is singular (t = ")
-               + t_curr + ')';
+      retval = "the matrix of partial derivatives is singular (t = " + t_curr +
+               ')';
       break;
 
     case -9:
-      retval = std::string ("the corrector could not converge (t = ")
-               + t_curr + "; repeated test failures)";
+      retval = "the corrector could not converge (t = " + t_curr +
+               "; repeated test failures)";
       break;
 
     case -10:
-      retval = std::string ("corrector could not converge because IRES was -1 (t = ")
+      retval = "corrector could not converge because IRES was -1 (t = "
                + t_curr + ')';
       break;
 
     case -11:
-      retval = std::string ("return requested in user-supplied function (t = ")
-               + t_curr + ')';
+      retval = "return requested in user-supplied function (t = " + t_curr +
+               ')';
       break;
 
     case -12:
       retval = "failed to compute consistent initial conditions";
       break;
 
     case -13:
-      retval = std::string ("unrecoverable error encountered inside user's PSOL function (t = ")
+      retval = "unrecoverable error encountered inside user's PSOL function (t = "
                + t_curr + ')';
       break;
 
     case -14:
-      retval = std::string ("the Krylov linear system solver failed to converge (t = ")
+      retval = "the Krylov linear system solver failed to converge (t = "
                + t_curr + ')';
       break;
 
     case -33:
       retval = "unrecoverable error (see printed message)";
       break;
 
     default:
diff --git a/liboctave/numeric/DASRT.cc b/liboctave/numeric/DASRT.cc
--- a/liboctave/numeric/DASRT.cc
+++ b/liboctave/numeric/DASRT.cc
@@ -581,58 +581,55 @@ DASRT::error_message (void) const
       retval = "integration to tout completed by stepping past TOUT";
       break;
 
     case 4:
       retval = "integration completed by finding one or more roots of G at T";
       break;
 
     case -1:
-      retval = std::string ("a large amount of work has been expended (t =")
-               + t_curr + ')';
+      retval = "a large amount of work has been expended (t =" + t_curr + ')';
       break;
 
     case -2:
       retval = "the error tolerances are too stringent";
       break;
 
     case -3:
-      retval = std::string ("error weight became zero during problem. (t = ")
-               + t_curr
-               + "; solution component i vanished, and atol or atol(i) == 0)";
+      retval = "error weight became zero during problem. (t = " + t_curr +
+               "; solution component i vanished, and atol or atol(i) == 0)";
       break;
 
     case -6:
-      retval = std::string ("repeated error test failures on the last attempted step (t = ")
+      retval = "repeated error test failures on the last attempted step (t = "
                + t_curr + ')';
       break;
 
     case -7:
-      retval = std::string ("the corrector could not converge (t = ")
-               + t_curr + ')';
+      retval = "the corrector could not converge (t = " + t_curr + ')';
       break;
 
     case -8:
-      retval = std::string ("the matrix of partial derivatives is singular (t = ")
-               + t_curr + ')';
+      retval = "the matrix of partial derivatives is singular (t = " + t_curr +
+               ')';
       break;
 
     case -9:
-      retval = std::string ("the corrector could not converge (t = ")
-               + t_curr + "; repeated test failures)";
+      retval = "the corrector could not converge (t = " + t_curr +
+               "; repeated test failures)";
       break;
 
     case -10:
-      retval = std::string ("corrector could not converge because IRES was -1 (t = ")
+      retval = "corrector could not converge because IRES was -1 (t = "
                + t_curr + ')';
       break;
 
     case -11:
-      retval = std::string ("return requested in user-supplied function (t = ")
-               + t_curr + ')';
+      retval = "return requested in user-supplied function (t = " + t_curr +
+               ')';
       break;
 
     case -12:
       retval = "failed to compute consistent initial conditions";
       break;
 
     case -33:
       retval = "unrecoverable error (see printed message)";
diff --git a/liboctave/numeric/DASSL.cc b/liboctave/numeric/DASSL.cc
--- a/liboctave/numeric/DASSL.cc
+++ b/liboctave/numeric/DASSL.cc
@@ -519,58 +519,55 @@ DASSL::error_message (void) const
       retval = "integration completed by stepping exactly to TOUT";
       break;
 
     case 3:
       retval = "integration to tout completed by stepping past TOUT";
       break;
 
     case -1:
-      retval = std::string ("a large amount of work has been expended (t =")
-               + t_curr + ')';
+      retval = "a large amount of work has been expended (t =" + t_curr + ')';
       break;
 
     case -2:
       retval = "the error tolerances are too stringent";
       break;
 
     case -3:
-      retval = std::string ("error weight became zero during problem. (t = ")
-               + t_curr
-               + "; solution component i vanished, and atol or atol(i) == 0)";
+      retval = "error weight became zero during problem. (t = " + t_curr +
+               "; solution component i vanished, and atol or atol(i) == 0)";
       break;
 
     case -6:
-      retval = std::string ("repeated error test failures on the last attempted step (t = ")
+      retval = "repeated error test failures on the last attempted step (t = "
                + t_curr + ')';
       break;
 
     case -7:
-      retval = std::string ("the corrector could not converge (t = ")
-               + t_curr + ')';
+      retval = "the corrector could not converge (t = " + t_curr + ')';
       break;
 
     case -8:
-      retval = std::string ("the matrix of partial derivatives is singular (t = ")
-               + t_curr + ')';
+      retval = "the matrix of partial derivatives is singular (t = " + t_curr +
+               ')';
       break;
 
     case -9:
-      retval = std::string ("the corrector could not converge (t = ")
-               + t_curr + "; repeated test failures)";
+      retval = "the corrector could not converge (t = " + t_curr +
+               "; repeated test failures)";
       break;
 
     case -10:
-      retval = std::string ("corrector could not converge because IRES was -1 (t = ")
+      retval = "corrector could not converge because IRES was -1 (t = "
                + t_curr + ')';
       break;
 
     case -11:
-      retval = std::string ("return requested in user-supplied function (t = ")
-               + t_curr + ')';
+      retval = "return requested in user-supplied function (t = " + t_curr +
+               ')';
       break;
 
     case -12:
       retval = "failed to compute consistent initial conditions";
       break;
 
     case -33:
       retval = "unrecoverable error (see printed message)";
diff --git a/liboctave/numeric/LSODE.cc b/liboctave/numeric/LSODE.cc
--- a/liboctave/numeric/LSODE.cc
+++ b/liboctave/numeric/LSODE.cc
@@ -328,43 +328,41 @@ LSODE::error_message (void) const
       retval = "successful exit";
       break;
 
     case 3:
       retval = "prior to continuation call with modified parameters";
       break;
 
     case -1:
-      retval = std::string ("excess work on this call (t = ")
-               + t_curr + "; perhaps wrong integration method)";
+      retval = "excess work on this call (t = " + t_curr +
+               "; perhaps wrong integration method)";
       break;
 
     case -2:
       retval = "excess accuracy requested (tolerances too small)";
       break;
 
     case -3:
       retval = "invalid input detected (see printed message)";
       break;
 
     case -4:
-      retval = std::string ("repeated error test failures (t = ")
-               + t_curr + "; check all inputs)";
+      retval = "repeated error test failures (t = " + t_curr +
+               "; check all inputs)";
       break;
 
     case -5:
-      retval = std::string ("repeated convergence failures (t = ")
-               + t_curr
-               + "; perhaps bad Jacobian supplied or wrong choice of integration method or tolerances)";
+      retval = "repeated convergence failures (t = " + t_curr +
+               "; perhaps bad Jacobian supplied or wrong choice of integration method or tolerances)";
       break;
 
     case -6:
-      retval = std::string ("error weight became zero during problem. (t = ")
-               + t_curr
-               + "; solution component i vanished, and atol or atol(i) == 0)";
+      retval = "error weight became zero during problem. (t = " + t_curr +
+               "; solution component i vanished, and atol or atol(i) == 0)";
       break;
 
     case -13:
       retval = "return requested in user-supplied function (t = "
                + t_curr + ')';
       break;
 
     default:
diff --git a/liboctave/system/oct-env.cc b/liboctave/system/oct-env.cc
--- a/liboctave/system/oct-env.cc
+++ b/liboctave/system/oct-env.cc
@@ -502,17 +502,17 @@ namespace octave
     std::string
     env::do_get_user_name (void) const
     {
       if (user_name.empty ())
         {
           sys::password pw = sys::password::getpwuid (
                                        sys::getuid ());
 
-          user_name = (pw ? pw.name () : std::string ("unknown"));
+          user_name = (pw ? pw.name () : "unknown");
         }
 
       return user_name;
     }
 
     std::string
     env::do_get_host_name (void) const
     {
@@ -531,18 +531,18 @@ namespace octave
     std::string
     env::do_getenv (const std::string& name) const
     {
       char *value = ::getenv (name.c_str ());
 
       return value ? value : "";
     }
 
-    // Do the work of changing to the directory NEWDIR.  Handle symbolic
-    // link following, etc.
+    // Do the work of changing to the directory NEWDIR.
+    // Handle symbolic link following, etc.
 
     bool
     env::do_chdir (const std::string& newdir)
     {
       bool retval = false;
 
       std::string tmp;
 
diff --git a/liboctave/util/kpse.cc b/liboctave/util/kpse.cc
--- a/liboctave/util/kpse.cc
+++ b/liboctave/util/kpse.cc
@@ -709,17 +709,17 @@ kpse_tilde_expand (const std::string& na
 
       std::string user = name.substr (1, c-1);
 
       /* We only need the cast here for (deficient) systems
          which do not declare 'getpwnam' in <pwd.h>.  */
       octave::sys::password p = octave::sys::password::getpwnam (user);
 
       /* If no such user, just use '.'.  */
-      std::string home = (p ? p.dir () : std::string ("."));
+      std::string home = (p ? p.dir () : ".");
 
       if (home.empty ())
         home = ".";
 
       /* handle leading // */
       if (home.length () > 1 && IS_DIR_SEP (home[0]) && IS_DIR_SEP (home[1]))
         home = home.substr (1);
 
