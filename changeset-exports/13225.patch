# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1316995939 14400
#      Sun Sep 25 20:12:19 2011 -0400
# Node ID 359153d26cc13f53ae387c69f10bfc3796ff33ea
# Parent  931d4b7dc205217f0fa86a5b5934500313aea536
eliminate DO_SIMPLE_FOR_LOOP_ONCE macro

* pt-eval.cc (tree_evaluator::visit_simple_for_command):
Eliminate DO_SIMPLE_FOR_LOOP_ONCE macro.

diff --git a/src/pt-eval.cc b/src/pt-eval.cc
--- a/src/pt-eval.cc
+++ b/src/pt-eval.cc
@@ -342,27 +342,34 @@ tree_evaluator::visit_simple_for_command
             //   tmp_val += increment
             //
             // to avoid problems with limited precision.  Also, this
             // is consistent with the way Range::matrix_value is
             // implemented.
 
             octave_value val (b + i * increment);
 
-            DO_SIMPLE_FOR_LOOP_ONCE (val);
+            ult.assign (octave_value::op_asn_eq, val);
 
-            if (quit)
+            if (! error_state && loop_body)
+              loop_body->accept (*this);
+
+            if (quit_loop_now ())
               break;
           }
       }
     else if (rhs.is_scalar_type ())
       {
-        bool quit = false;
+        ult.assign (octave_value::op_asn_eq, rhs);
 
-        DO_SIMPLE_FOR_LOOP_ONCE (rhs);
+        if (! error_state && loop_body)
+          loop_body->accept (*this);
+
+        // Maybe decrement break and continue states.
+        quit_loop_now ();
       }
     else if (rhs.is_matrix_type () || rhs.is_cell () || rhs.is_string ()
              || rhs.is_map ())
       {
         // A matrix or cell is reshaped to 2 dimensions and iterated by
         // columns.
 
         bool quit = false;
@@ -392,19 +399,23 @@ tree_evaluator::visit_simple_for_command
                 iidx = 1;
               }
 
             for (octave_idx_type i = 1; i <= steps; i++)
               {
                 // do_index_op expects one-based indices.
                 idx(iidx) = i;
                 octave_value val = arg.do_index_op (idx);
-                DO_SIMPLE_FOR_LOOP_ONCE (val);
+
+                ult.assign (octave_value::op_asn_eq, val);
 
-                if (quit)
+                if (! error_state && loop_body)
+                  loop_body->accept (*this);
+
+                if (quit_loop_now ())
                   break;
               }
           }
       }
     else
       {
         ::error ("invalid type in for loop expression near line %d, column %d",
                  cmd.line (), cmd.column ());
