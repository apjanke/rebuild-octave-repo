# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1215615697 14400
#      Wed Jul 09 11:01:37 2008 -0400
# Node ID c350329da645ed0589aefb142e6a2843b7694620
# Parent  b3becd212f3fe2fa1ea098351d9995d4d8fb86a6
Implement basic line antialiasing

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,18 @@
 2008-07-09  Michael Goffioul  <michael.goffioul@gmail.com>
 
+	* gl-render.cc (opengl_renderer::draw(figure)): Enable line smoothing
+	according to __enhanced__ property.
+	(opengl_renderer::draw_marker): Only draw markers with valid call
+	lists ID.
+	(opengl_renderer::make_marker_list): Do not produce filled marker call
+	list for non-fillable markers.
+	(opengl_renderer::draw(axes)): Do not antialias axes system.
+
 	* gl-render.cc (opengl_renderer::set_polygon_offset): Also enable
 	polygon offseting in GL_LINE mode.
 	(opengl_renderer::draw_marker): Offset markers foward instead of
 	backward (to draw them above lines).
 
 	* Makefile.in: new substituted variables GL_RENDER_SRC and
 	FLTK_BACKEND_SRC.
 
diff --git a/src/gl-render.cc b/src/gl-render.cc
--- a/src/gl-render.cc
+++ b/src/gl-render.cc
@@ -547,16 +547,27 @@ opengl_renderer::draw (const figure::pro
 
   // Initialize OpenGL context
 
   glEnable (GL_DEPTH_TEST);
   glDepthFunc (GL_LEQUAL);
   glBlendFunc (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
   glEnable (GL_NORMALIZE);
 
+  if (props.is___enhanced__ ())
+    {
+      glEnable (GL_BLEND);
+      glEnable (GL_LINE_SMOOTH);
+    }
+  else
+    {
+      glDisable (GL_BLEND);
+      glDisable (GL_LINE_SMOOTH);
+    }
+
   // Clear background
 
   Matrix c = props.get_color_rgb ();
 
   if (c.length() >= 3)
     {
       glClearColor (c(0), c(1), c(2), 1);
       glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
@@ -594,16 +605,20 @@ opengl_renderer::draw (const axes::prope
 
   glClear (GL_DEPTH_BUFFER_BIT);
 
   // store axes transformation data
 
   xform = props.get_transform ();
   
   // draw axes object
+
+  GLboolean antialias;
+  glGetBooleanv (GL_LINE_SMOOTH, &antialias);
+  glDisable (GL_LINE_SMOOTH);
   
   Matrix xlim = xform.xscale (props.get_xlim ().matrix_value ());
   Matrix ylim = xform.yscale (props.get_ylim ().matrix_value ());
   Matrix zlim = xform.zscale (props.get_zlim ().matrix_value ());
   double x_min = xlim(0), x_max = xlim(1);
   double y_min = ylim(0), y_max = ylim(1);
   double z_min = zlim(0), z_max = zlim(1);
   
@@ -1504,16 +1519,19 @@ opengl_renderer::draw (const axes::prope
           (x_zlim(0)+x_zlim(1))/2, true);
       title_props.set_position (p.extract_n(0, 3).transpose ());
     }
 
   set_clipbox (x_min, x_max, y_min, y_max, z_min, z_max);
 
   // Children
 
+  if (antialias == GL_TRUE)
+    glEnable (GL_LINE_SMOOTH);
+
   Matrix children = props.get_children ();
   std::list<graphics_object> obj_list;
   std::list<graphics_object>::iterator it;
 
   // 1st pass: draw light objects
 
   for (int i = 0; i < children.numel (); i++)
     {
@@ -1673,17 +1691,17 @@ opengl_renderer::draw (const line::prope
       for (int i = 0; i < n; i++)
         {
           if (clip[i] == clip_ok)
             draw_marker (x(i), y(i), (has_z ? z(i) : 0), lc, fc);
         }
 
       end_marker ();
     }
-
+  
   set_clipping (props.is_clipping ());
 }
 
 void
 opengl_renderer::draw (const surface::properties& props)
 {
   Matrix x = xform.xscale (props.get_xdata ().matrix_value ());
   Matrix y = xform.yscale (props.get_ydata ().matrix_value ());
@@ -2644,45 +2662,48 @@ void
 opengl_renderer::draw_marker (double x, double y, double z,
 			      const Matrix& lc, const Matrix& fc)
 {
   ColumnVector tmp = xform.transform (x, y, z, false);
   
   glLoadIdentity ();
   glTranslated (tmp(0), tmp(1), -tmp(2));
 
-  if (fc.numel () > 0)
+  if (filled_marker_id > 0 && fc.numel () > 0)
     {
       glColor3dv (fc.data ());
       set_polygon_offset (true, -1.0);
       glCallList (filled_marker_id);
       if (lc.numel () > 0)
 	{
 	  glColor3dv (lc.data ());
 	  glPolygonMode (GL_FRONT_AND_BACK, GL_LINE);
 	  glEdgeFlag (GL_TRUE);
 	  set_polygon_offset (true, -2.0);
 	  glCallList (filled_marker_id);
 	  glPolygonMode (GL_FRONT_AND_BACK, GL_FILL);
 	}
       set_polygon_offset (false);
-      return;
     }
-
-  if (lc.numel () > 0)
+  else if (marker_id > 0 && lc.numel () > 0)
     {
       glColor3dv (lc.data ());
       glCallList (marker_id);
     }
 }
 
 unsigned int
 opengl_renderer::make_marker_list (const std::string& marker, double size,
 				   bool filled) const
 {
+  char c = marker[0];
+
+  if (filled && (c == '+' || c == 'x' || c == '*' || c == '.'))
+    return 0;
+
   unsigned int ID = glGenLists (1);
   double sz = size * backend.get_screen_resolution () / 72.0;
 
   // constants for the * marker
   const double sqrt2d4 = 0.35355339059327;
   double tt = sz*sqrt2d4;
 
   glNewList (ID, GL_COMPILE);
