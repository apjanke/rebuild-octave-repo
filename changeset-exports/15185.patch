# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1344974083 14400
#      Tue Aug 14 15:54:43 2012 -0400
# Node ID 82d51d6e470c23c748a53a6fd8b82c3d5e7e1614
# Parent  0b29c16a264553cb88ed2ae001d21c57b1928e5f
Proceed with the sparse Choleski computation when requested (bug #37095)

* chol.cc (Fchol): Pass nargout in the info paramter to the sparse
  Choleski objects.

* sparse-base-chol.h (sparse_base_chol_rep::sparse_base_chol_rep):
  Pass the info (=nargout) paramter to the init function.
  (sparse_base_chol_rep::init): New nargout parameter

* sparse-base-chol.cc (sparse_base_chol_rep::init): Also check for
  nargout to decide if should proceed with the cholmod computations or
  not.

* sparse-util.cc (SparseCholError): Don't warn about CHOLMOD_NOT_POSDEF.

diff --git a/liboctave/sparse-base-chol.cc b/liboctave/sparse-base-chol.cc
--- a/liboctave/sparse-base-chol.cc
+++ b/liboctave/sparse-base-chol.cc
@@ -75,17 +75,17 @@ sparse_base_chol<chol_type, chol_elt, p_
     }
   Sp[ncol] = pdest;
 }
 #endif
 
 template <class chol_type, class chol_elt, class p_type>
 octave_idx_type
 sparse_base_chol<chol_type, chol_elt, p_type>::sparse_base_chol_rep::init
-  (const chol_type& a, bool natural)
+  (const chol_type& a, bool natural, octave_idx_type nargout)
 {
   volatile octave_idx_type info = 0;
 #ifdef HAVE_CHOLMOD
   octave_idx_type a_nr = a.rows ();
   octave_idx_type a_nc = a.cols ();
 
   if (a_nr != a_nc)
     {
@@ -165,17 +165,17 @@ sparse_base_chol<chol_type, chol_elt, p_
   BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
   Lfactor = CHOLMOD_NAME(analyze) (ac, cm);
   CHOLMOD_NAME(factorize) (ac, Lfactor, cm);
   END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 
   is_pd = cm->status == CHOLMOD_OK;
   info = (is_pd ? 0 : cm->status);
 
-  if (is_pd)
+  if (is_pd || nargout > 1)
     {
       BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
       cond = CHOLMOD_NAME(rcond) (Lfactor, cm);
       END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 
       minor_p = Lfactor->minor;
 
       BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
diff --git a/liboctave/sparse-base-chol.h b/liboctave/sparse-base-chol.h
--- a/liboctave/sparse-base-chol.h
+++ b/liboctave/sparse-base-chol.h
@@ -48,17 +48,17 @@ protected:
         init (a, natural);
       }
 
     sparse_base_chol_rep (const chol_type& a, octave_idx_type& info,
                           const bool natural)
       : count (1), Lsparse (0), Common (), is_pd (false), minor_p (0),
         perms (), cond (0)
       {
-        info = init (a, natural);
+        info = init (a, natural, info);
       }
 
     ~sparse_base_chol_rep (void)
       {
         if (is_pd)
           CHOLMOD_NAME (free_sparse) (&Lsparse, &Common);
       }
 
@@ -88,17 +88,18 @@ protected:
     bool is_pd;
 
     octave_idx_type minor_p;
 
     ColumnVector perms;
 
     double cond;
 
-    octave_idx_type init (const chol_type& a, bool natural = true);
+    octave_idx_type init (const chol_type& a, bool natural = true,
+                          octave_idx_type nargout = 1);
 
     void drop_zeros (const cholmod_sparse* S);
 
     // No copying!
 
     sparse_base_chol_rep (const sparse_base_chol_rep&);
 
     sparse_base_chol_rep& operator = (const sparse_base_chol_rep&);
@@ -108,22 +109,26 @@ protected:
   {
   public:
     sparse_base_chol_rep (void)
       : count (1), is_pd (false), minor_p (0), perms (), cond (0) { }
 
     sparse_base_chol_rep (const chol_type& a,
                           const bool natural)
       : count (1), is_pd (false), minor_p (0), perms (), cond (0)
-      { init (a, natural); }
+      {
+        init (a, natural);
+      }
 
     sparse_base_chol_rep (const chol_type& a, octave_idx_type& info,
                           const bool natural)
       : count (1), is_pd (false), minor_p (0), perms (), cond (0)
-      { info = init (a, natural); }
+      {
+        info = init (a, natural, info);
+      }
 
     ~sparse_base_chol_rep (void) { }
 
     octave_idx_type P (void) const { return 0; }
 
     ColumnVector perm (void) const { return perms + 1; }
 
     p_type Q (void) const;
@@ -138,17 +143,18 @@ protected:
     bool is_pd;
 
     octave_idx_type minor_p;
 
     ColumnVector perms;
 
     double cond;
 
-    octave_idx_type init (const chol_type& a, bool natural = true);
+    octave_idx_type init (const chol_type& a, bool natural = true,
+                          octave_idx_type nargout = 0);
 
     // No copying!
 
     sparse_base_chol_rep (const sparse_base_chol_rep&);
 
     sparse_base_chol_rep& operator = (const sparse_base_chol_rep&);
   };
 #endif
diff --git a/liboctave/sparse-util.cc b/liboctave/sparse-util.cc
--- a/liboctave/sparse-util.cc
+++ b/liboctave/sparse-util.cc
@@ -23,32 +23,38 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <stdio.h>
 #include <stdarg.h>
 #include "lo-error.h"
+#include "oct-sparse.h"
 #include "sparse-util.h"
 
 // FIXME this overload is here due to API change in SuiteSparse (3.1 -> 3.2)
 void
 SparseCholError (int status, char *file, int line, char *message)
 {
   SparseCholError (status, file, line, message);
 }
 
 void
 SparseCholError (int status, const char *file, int line, const char *message)
 {
-  (*current_liboctave_warning_handler)("warning %i, at line %i in file %s",
-                                     status, line, file);
+  // Ignore CHOLMOD_NOT_POSDEF, since we handle that in Fchol as an
+  // error or exit status.
+  if (status != CHOLMOD_NOT_POSDEF)
+    {
+      (*current_liboctave_warning_handler)("warning %i, at line %i in file %s",
+                                           status, line, file);
 
-  (*current_liboctave_warning_handler)(message);
+      (*current_liboctave_warning_handler)(message);
+    }
 }
 
 int
 SparseCholPrint (const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   int ret = gnulib::vfprintf (stderr, fmt, args);
diff --git a/src/dldfcn/chol.cc b/src/dldfcn/chol.cc
--- a/src/dldfcn/chol.cc
+++ b/src/dldfcn/chol.cc
@@ -192,17 +192,17 @@ sparse matrices.\n\
       if (arg.is_sparse_type ())
         {
           if (arg.is_real_type ())
             {
               SparseMatrix m = arg.sparse_matrix_value ();
 
               if (! error_state)
                 {
-                  octave_idx_type info;
+                  octave_idx_type info = nargout;
                   SparseCHOL fact (m, info, natural);
                   if (nargout == 3)
                     {
                       if (vecout)
                         retval(2) = fact.perm ();
                       else
                         retval(2) = fact.Q ();
                     }
@@ -220,17 +220,17 @@ sparse matrices.\n\
                 }
             }
           else if (arg.is_complex_type ())
             {
               SparseComplexMatrix m = arg.sparse_complex_matrix_value ();
 
               if (! error_state)
                 {
-                  octave_idx_type info;
+                  octave_idx_type info = nargout;
                   SparseComplexCHOL fact (m, info, natural);
 
                   if (nargout == 3)
                     {
                       if (vecout)
                         retval(2) = fact.perm ();
                       else
                         retval(2) = fact.Q ();
