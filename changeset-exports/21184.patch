# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1454537715 18000
#      Wed Feb 03 17:15:15 2016 -0500
# Node ID 3db899f1d54cd89e8041ce69627ebbd0757d65e3
# Parent  e7fda94aec6b967aa2756bc9b6c15da42ca36d01
use istream::traits_type::eof () instead of EOF

* c-file-ptr-stream.cc, oct-stream.cc, lo-utils.cc:
Use istream::traits_type::eof () instead of EOF.

diff --git a/libinterp/corefcn/c-file-ptr-stream.cc b/libinterp/corefcn/c-file-ptr-stream.cc
--- a/libinterp/corefcn/c-file-ptr-stream.cc
+++ b/libinterp/corefcn/c-file-ptr-stream.cc
@@ -148,17 +148,17 @@ c_file_ptr_buf::sync (void)
   flush ();
 
   return 0;
 }
 
 int
 c_file_ptr_buf::flush (void)
 {
-  return f ? gnulib::fflush (f) : EOF;
+  return f ? gnulib::fflush (f) : traits_type::eof ();
 }
 
 int
 c_file_ptr_buf::buf_close (void)
 {
   int retval = -1;
 
   flush ();
@@ -295,17 +295,17 @@ c_zfile_ptr_buf::sync (void)
 
 int
 c_zfile_ptr_buf::flush (void)
 {
   // FIXME: do we need something more complex here, passing
   // something other than 0 for the second argument to gzflush and
   // checking the return value, etc.?
 
-  return f ? gzflush (f, 0) : EOF;
+  return f ? gzflush (f, 0) : traits_type::eof ();
 }
 
 int
 c_zfile_ptr_buf::buf_close (void)
 {
   int retval = -1;
 
   flush ();
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -965,29 +965,29 @@ octave_base_stream::do_gets (octave_idx_
 
       std::ostringstream buf;
 
       int c = 0;
       int char_count = 0;
 
       if (max_len != 0)
         {
-          while (is && (c = is.get ()) != EOF)
+          while (is && (c = is.get ()) != std::istream::traits_type::eof ())
             {
               char_count++;
 
               // Handle CRLF, CR, or LF as line ending.
               if (c == '\r')
                 {
                   if (! strip_newline)
                     buf << static_cast<char> (c);
 
                   c = is.get ();
 
-                  if (c != EOF)
+                  if (c != std::istream::traits_type::eof ())
                     {
                       if (c == '\n')
                         {
                           char_count++;
 
                           if (! strip_newline)
                             buf << static_cast<char> (c);
                         }
@@ -1073,17 +1073,17 @@ octave_base_stream::skipl (off_t num, bo
   else
     {
       std::istream& is = *isp;
 
       int c = 0;
       int lastc = -1;
       cnt = 0;
 
-      while (is && (c = is.get ()) != EOF)
+      while (is && (c = is.get ()) != std::istream::traits_type::eof ())
         {
           // Handle CRLF, CR, or LF as line ending.
           if (c == '\r' || (c == '\n' && lastc != '\r'))
             {
               if (++cnt == num)
                 break;
             }
 
@@ -1120,22 +1120,23 @@ octave_scan_1 (std::istream& is, const s
       break;
 
     case 'x':
       is >> std::hex >> ref >> std::dec;
       break;
 
     case 'i':
       {
-        int c1 = EOF;
-
-        while (is && (c1 = is.get ()) != EOF && isspace (c1))
+        int c1 = std::istream::traits_type::eof ();
+
+        while (is && (c1 = is.get ()) != std::istream::traits_type::eof ()
+               && isspace (c1))
           ; // skip whitespace
 
-        if (c1 != EOF)
+        if (c1 != std::istream::traits_type::eof ())
           {
             if (c1 == '0')
               {
                 int c2 = is.peek ();
 
                 if (c2 == 'x' || c2 == 'X')
                   {
                     is.ignore ();
@@ -1220,22 +1221,23 @@ octave_scan<> (std::istream& is, const s
   double& ref = *valptr;
 
   switch (fmt.type)
     {
     case 'e':
     case 'f':
     case 'g':
       {
-        int c1 = EOF;
-
-        while (is && (c1 = is.get ()) != EOF && isspace (c1))
+        int c1 = std::istream::traits_type::eof ();
+
+        while (is && (c1 = is.get ()) != std::istream::traits_type::eof ()
+               && isspace (c1))
           ; // skip whitespace
 
-        if (c1 != EOF)
+        if (c1 != std::istream::traits_type::eof ())
           {
             is.putback (c1);
 
             ref = octave_read_value<double> (is);
           }
       }
       break;
 
@@ -1281,35 +1283,36 @@ do_scanf_conv (std::istream& is, const s
 template void
 do_scanf_conv (std::istream&, const scanf_format_elt&, double*,
                Matrix&, double*, octave_idx_type&, octave_idx_type&,
                octave_idx_type, octave_idx_type, bool);
 
 #define DO_WHITESPACE_CONVERSION() \
   do \
     { \
-      int c = EOF; \
+      int c = std::istream::traits_type::eof (); \
  \
-      while (is && (c = is.get ()) != EOF && isspace (c)) \
+      while (is && (c = is.get ()) != std::istream::traits_type::eof () \
+             && isspace (c)) \
         { /* skip whitespace */ } \
  \
-      if (c != EOF) \
+      if (c != std::istream::traits_type::eof ()) \
         is.putback (c); \
     } \
   while (0)
 
 #define DO_LITERAL_CONVERSION() \
   do \
     { \
-      int c = EOF; \
+      int c = std::istream::traits_type::eof (); \
  \
       int n = strlen (fmt); \
       int i = 0; \
  \
-      while (i < n && is && (c = is.get ()) != EOF) \
+      while (i < n && is && (c = is.get ()) != std::istream::traits_type::eof ()) \
         { \
           if (c == static_cast<unsigned char> (fmt[i])) \
             { \
               i++; \
               continue; \
             } \
           else \
             { \
@@ -1323,17 +1326,17 @@ do_scanf_conv (std::istream&, const scan
     } \
   while (0)
 
 #define DO_PCT_CONVERSION() \
   do \
     { \
       int c = is.get (); \
  \
-      if (c != EOF) \
+      if (c != std::istream::traits_type::eof ()) \
         { \
           if (c != '%') \
             { \
               is.putback (c); \
               is.setstate (std::ios::failbit); \
             } \
         } \
       else \
@@ -1343,23 +1346,23 @@ do_scanf_conv (std::istream&, const scan
 
 #define BEGIN_C_CONVERSION() \
   is.unsetf (std::ios::skipws); \
  \
   int width = elt->width ? elt->width : 1; \
  \
   std::string tmp (width, '\0'); \
  \
-  int c = EOF; \
+  int c = std::istream::traits_type::eof (); \
   int n = 0; \
  \
-  while (is && n < width && (c = is.get ()) != EOF) \
+  while (is && n < width && (c = is.get ()) != std::istream::traits_type::eof ()) \
     tmp[n++] = static_cast<char> (c); \
  \
-  if (n > 0 && c == EOF) \
+  if (n > 0 && c == std::istream::traits_type::eof ()) \
     is.clear (); \
  \
   tmp.resize (n)
 
 // For a '%s' format, skip initial whitespace and then read until the
 // next whitespace character or until WIDTH characters have been read.
 #define BEGIN_S_CONVERSION() \
   int width = elt->width; \
@@ -1367,41 +1370,42 @@ do_scanf_conv (std::istream&, const scan
   std::string tmp; \
  \
   do \
     { \
       if (width) \
         { \
           tmp = std::string (width, '\0'); \
  \
-          int c = EOF; \
+          int c = std::istream::traits_type::eof (); \
  \
           int n = 0; \
  \
-          while (is && (c = is.get ()) != EOF) \
+          while (is && (c = is.get ()) != std::istream::traits_type::eof ()) \
             { \
               if (! isspace (c)) \
                 { \
                   tmp[n++] = static_cast<char> (c); \
                   break; \
                 } \
             } \
  \
-          while (is && n < width && (c = is.get ()) != EOF) \
+          while (is && n < width \
+                 && (c = is.get ()) != std::istream::traits_type::eof ()) \
             { \
               if (isspace (c)) \
                 { \
                   is.putback (c); \
                   break; \
                 } \
               else \
                 tmp[n++] = static_cast<char> (c); \
             } \
  \
-          if (n > 0 && c == EOF) \
+          if (n > 0 && c == std::istream::traits_type::eof ()) \
             is.clear (); \
  \
           tmp.resize (n); \
         } \
       else \
         { \
           is >> std::ws >> tmp; \
         } \
@@ -1418,41 +1422,44 @@ do_scanf_conv (std::istream&, const scan
     { \
       if (! width) \
         width = std::numeric_limits<int>::max (); \
  \
       std::ostringstream buf; \
  \
       std::string char_class = elt->char_class; \
  \
-      int c = EOF; \
+      int c = std::istream::traits_type::eof (); \
  \
       if (elt->type == '[') \
         { \
           int chars_read = 0; \
-          while (is && chars_read++ < width && (c = is.get ()) != EOF \
+          while (is && chars_read++ < width \
+                 && (c = is.get ()) != std::istream::traits_type::eof () \
                  && char_class.find (c) != std::string::npos) \
             buf << static_cast<char> (c); \
         } \
       else \
         { \
           int chars_read = 0; \
-          while (is && chars_read++ < width && (c = is.get ()) != EOF \
+          while (is && chars_read++ < width \
+                 && (c = is.get ()) != std::istream::traits_type::eof () \
                  && char_class.find (c) == std::string::npos) \
             buf << static_cast<char> (c); \
         } \
  \
-      if (width == std::numeric_limits<int>::max () && c != EOF) \
+      if (width == std::numeric_limits<int>::max () \
+          && c != std::istream::traits_type::eof ()) \
         is.putback (c); \
  \
       tmp = buf.str (); \
  \
       if (tmp.empty ()) \
         is.setstate (std::ios::failbit); \
-      else if (c == EOF) \
+      else if (c == std::istream::traits_type::eof ()) \
         is.clear (); \
  \
     } \
   while (0)
 
 #define FINISH_CHARACTER_CONVERSION() \
   do \
     { \
diff --git a/liboctave/util/lo-utils.cc b/liboctave/util/lo-utils.cc
--- a/liboctave/util/lo-utils.cc
+++ b/liboctave/util/lo-utils.cc
@@ -234,17 +234,17 @@ read_inf_nan_na (std::istream& is, char 
         if (c1 == 'a' || c1 == 'A')
           {
             char c2 = is.get ();
             if (c2 == 'n' || c2 == 'N')
               val = std::numeric_limits<T>::quiet_NaN ();
             else
               {
                 val = octave_numeric_limits<T>::NA ();
-                if (c2 != EOF)
+                if (c2 != std::istream::traits_type::eof ())
                   is.putback (c2);
               }
           }
         else
           is.setstate (std::ios::failbit);
       }
       break;
 
