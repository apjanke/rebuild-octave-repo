# HG changeset patch
# User jwe
# Date 1033146619 0
#      Fri Sep 27 17:10:19 2002 +0000
# Node ID 3827a03c72f0057df546e850177e315f4449a908
# Parent  e0e95e9aad7bc6bbd89e35d1d024e03f0fa6482c
[project @ 2002-09-27 17:10:19 by jwe]

diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,13 @@
+2002-09-27  Paul Kienzle <pkienzle@users.sf.net>
+
+	* qr-7.m: Remove randomness from complex matrix generator.
+	Increase tolerance on rosser matrix test.
+
 2002-09-26  Paul Kienzle <pkienzle@users.sf.net>
 
 	* octave.test/linalg/qr-7.m: Replace large random matrix tests 
 	of economy QR decomposition with small predictable tests.
 	Include numerically sensitive rosser matrix test.  Don't
 	report the measured norms. 
 
 2002-04-24  Bill Lash  <lash@tellabs.com>
diff --git a/test/octave.test/linalg/qr-7.m b/test/octave.test/linalg/qr-7.m
--- a/test/octave.test/linalg/qr-7.m
+++ b/test/octave.test/linalg/qr-7.m
@@ -23,42 +23,42 @@ j = 1;
 
 if 0 # eliminate big matrix tests
 a = rand(5000,20);
 [q,r]=qr(a,0); t(j++) = testqr(q,r,a);
 [q,r]=qr(a',0); t(j++) = testqr(q,r,a');
 [q,r,p]=qr(a,0); t(j++) = testqr(q,r,a,p);
 [q,r,p]=qr(a',0); t(j++) = testqr(q,r,a',p);
 
-a = a+1i*randn(size(a))*sqrt(eps);
+a = a+1i*eps;
 [q,r]=qr(a,0); t(j++) = testqr(q,r,a);
 [q,r]=qr(a',0); t(j++) = testqr(q,r,a');
 [q,r,p]=qr(a,0); t(j++) = testqr(q,r,a,p);
 [q,r,p]=qr(a',0); t(j++) = testqr(q,r,a',p);
 endif
 
 a = [ ones(1,15); sqrt(eps)*eye(15) ];
 [q,r]=qr(a); t(j++) = testqr(q,r,a);
 [q,r]=qr(a'); t(j++) = testqr(q,r,a');
 [q,r,p]=qr(a); t(j++) = testqr(q,r,a,p);
 [q,r,p]=qr(a'); t(j++) = testqr(q,r,a',p);
 
-a = a+1i*randn(size(a))*sqrt(eps);
+a = a+1i*eps;
 [q,r]=qr(a); t(j++) = testqr(q,r,a);
 [q,r]=qr(a'); t(j++) = testqr(q,r,a');
 [q,r,p]=qr(a); t(j++) = testqr(q,r,a,p);
 [q,r,p]=qr(a'); t(j++) = testqr(q,r,a',p);
 
 a = [ ones(1,15); sqrt(eps)*eye(15) ];
 [q,r]=qr(a,0); t(j++) = testqr(q,r,a);
 [q,r]=qr(a',0); t(j++) = testqr(q,r,a');
 [q,r,p]=qr(a,0); t(j++) = testqr(q,r,a,p);
 [q,r,p]=qr(a',0); t(j++) = testqr(q,r,a',p);
 
-a = a+1i*randn(size(a))*sqrt(eps);
+a = a+1i*eps;
 [q,r]=qr(a,0); t(j++) = testqr(q,r,a);
 [q,r]=qr(a',0); t(j++) = testqr(q,r,a');
 [q,r,p]=qr(a,0); t(j++) = testqr(q,r,a,p);
 [q,r,p]=qr(a',0); t(j++) = testqr(q,r,a',p);
 
 a = [
    611   196  -192   407    -8   -52   -49    29
    196   899   113  -192   -71   -43    -8   -44
@@ -66,9 +66,9 @@ a = [
    407  -192   196   611     8    44    59   -23
     -8   -71    61     8   411  -599   208   208
    -52   -43    49    44  -599   411   208   208
    -49    -8     8    59   208   208    99  -911
     29   -44    52   -23   208   208  -911    99
 ];
 [q,r] = qr(a);
 
-all (t) && norm(q*r-a) < 2000*eps
+all (t) && norm(q*r-a) < 5000*eps
