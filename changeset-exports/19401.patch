# HG changeset patch
# User Rik <rik@octave.org>
# Date 1418706105 28800
#      Mon Dec 15 21:01:45 2014 -0800
# Node ID 9035a36736af1bfa3d2ce28a6515b304a3185f32
# Parent  9e5b64b3c1fe59eb05d5717209b570070b7dc6af
# Parent  9887a930465fe500aeb8cd1ea19d221c9fb6d966
maint: Periodic merge of gui-release to default.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -1925,16 +1925,17 @@ do_cat (const octave_value_list& xargs, 
   if (n_args == 0)
     retval = Matrix ();
   else if (n_args == 1)
     retval = args(0);
   else if (n_args > 1)
     {
       std::string result_type;
 
+      bool all_strings_p = true;
       bool all_sq_strings_p = true;
       bool all_dq_strings_p = true;
       bool all_real_p = true;
       bool all_cmplx_p = true;
       bool any_sparse_p = false;
       bool any_cell_p = false;
       bool any_class_p = false;
 
@@ -1946,16 +1947,18 @@ do_cat (const octave_value_list& xargs, 
             {
               result_type = args(i).class_name ();
 
               first_elem_is_struct = args(i).is_map ();
             }
           else
             result_type = get_concat_class (result_type, args(i).class_name ());
 
+          if (all_strings_p && ! args(i).is_string ())
+            all_strings_p = false;
           if (all_sq_strings_p && ! args(i).is_sq_string ())
             all_sq_strings_p = false;
           if (all_dq_strings_p && ! args(i).is_dq_string ())
             all_dq_strings_p = false;
           if (all_real_p && ! args(i).is_real_type ())
             all_real_p = false;
           if (all_cmplx_p && ! (args(i).is_complex_type ()
               || args(i).is_real_type ()))
@@ -2004,19 +2007,23 @@ do_cat (const octave_value_list& xargs, 
             retval = do_single_type_concat<FloatNDArray> (args, dim);
           else
             retval = do_single_type_concat<FloatComplexNDArray> (args, dim);
         }
       else if (result_type == "char")
         {
           char type = all_dq_strings_p ? '"' : '\'';
 
-          maybe_warn_string_concat (all_dq_strings_p, all_sq_strings_p);
-
-          charNDArray result =  do_single_type_concat<charNDArray> (args, dim);
+          if (! all_strings_p)
+            gripe_implicit_conversion ("Octave:num-to-str",
+                                       "numeric", result_type);
+          else
+            maybe_warn_string_concat (all_dq_strings_p, all_sq_strings_p);
+
+          charNDArray result = do_single_type_concat<charNDArray> (args, dim);
 
           retval = octave_value (result, type);
         }
       else if (result_type == "logical")
         {
           if (any_sparse_p)
             retval = do_single_type_concat<SparseBoolMatrix> (args, dim);
           else
diff --git a/libinterp/corefcn/module.mk b/libinterp/corefcn/module.mk
--- a/libinterp/corefcn/module.mk
+++ b/libinterp/corefcn/module.mk
@@ -71,17 +71,17 @@ COREFCN_INC = \
   corefcn/ls-mat-ascii.h \
   corefcn/ls-mat4.h \
   corefcn/ls-mat5.h \
   corefcn/ls-oct-ascii.h \
   corefcn/ls-oct-binary.h \
   corefcn/ls-utils.h \
   corefcn/mex.h \
   corefcn/mexproto.h \
-  corefcn/mxarray.in.h \
+  corefcn/mxarray.h \
   corefcn/oct-errno.h \
   corefcn/oct-fstrm.h \
   corefcn/oct-handle.h \
   corefcn/oct-hdf5.h \
   corefcn/oct-hist.h \
   corefcn/oct-iostrm.h \
   corefcn/oct-lvalue.h \
   corefcn/oct-map.h \
diff --git a/libinterp/parse-tree/pt-mat.cc b/libinterp/parse-tree/pt-mat.cc
--- a/libinterp/parse-tree/pt-mat.cc
+++ b/libinterp/parse-tree/pt-mat.cc
@@ -27,16 +27,17 @@ along with Octave; see the file COPYING.
 #include <iostream>
 
 #include "oct-locbuf.h"
 #include "quit.h"
 
 #include "data.h"
 #include "defun.h"
 #include "error.h"
+#include "gripes.h"
 #include "oct-obj.h"
 #include "pt-arg-list.h"
 #include "pt-bp.h"
 #include "pt-exp.h"
 #include "pt-mat.h"
 #include "pt-walk.h"
 #include "utils.h"
 #include "ov.h"
@@ -931,29 +932,31 @@ do_class_concat (tm_const& tmc)
   return retval;
 }
 
 octave_value
 tree_matrix::rvalue1 (int)
 {
   octave_value retval = Matrix ();
 
+  bool all_strings_p = false;
   bool all_sq_strings_p = false;
   bool all_dq_strings_p = false;
   bool all_empty_p = false;
   bool all_real_p = false;
   bool any_sparse_p = false;
   bool any_class_p = false;
   bool frc_str_conv = false;
 
   tm_const tmp (*this);
 
   if (tmp && ! tmp.empty ())
     {
       dim_vector dv = tmp.dims ();
+      all_strings_p = tmp.all_strings_p ();
       all_sq_strings_p = tmp.all_sq_strings_p ();
       all_dq_strings_p = tmp.all_dq_strings_p ();
       all_empty_p = tmp.all_empty_p ();
       all_real_p = tmp.all_real_p ();
       any_sparse_p = tmp.any_sparse_p ();
       any_class_p = tmp.any_class_p ();
       frc_str_conv = tmp.some_strings_p ();
 
@@ -988,17 +991,21 @@ tree_matrix::rvalue1 (int)
             retval = do_single_type_concat<FloatNDArray> (dv, tmp);
           else
             retval = do_single_type_concat<FloatComplexNDArray> (dv, tmp);
         }
       else if (result_type == "char")
         {
           char type = all_dq_strings_p ? '"' : '\'';
 
-          maybe_warn_string_concat (all_dq_strings_p, all_sq_strings_p);
+          if (! all_strings_p)
+            gripe_implicit_conversion ("Octave:num-to-str",
+                                       "numeric", result_type);
+          else
+            maybe_warn_string_concat (all_dq_strings_p, all_sq_strings_p);
 
           charNDArray result (dv, Vstring_fill_char);
 
           single_type_concat<charNDArray> (result, tmp);
 
           retval = octave_value (result, type);
         }
       else if (result_type == "logical")
