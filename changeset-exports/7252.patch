# HG changeset patch
# User jwe
# Date 1196794966 0
#      Tue Dec 04 19:02:46 2007 +0000
# Node ID d35fa45980c60718fefb310af08354448a633b2e
# Parent  ace1030cbe367d5c0de4c1182c5b80d3232c546d
[project @ 2007-12-04 19:02:46 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,12 @@
 2007-12-04  John W. Eaton  <jwe@octave.org>
 
+	* error.cc (Ferror): Handle error id.
+
 	* load-save.cc (Fsave, Fload): Doc fixes.
 	From Marco Caliari <caliari@sci.univr.it>.
 
 2007-12-04  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* graphics.h.in (base_properties::get_type
         base_properties::get___modified__,
 	base_properties::get___myhandle__): New functions.
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -958,16 +958,17 @@ location of the error. Typically @var{er
 	}
     }
   return retval;
 }
 
 DEFUN (error, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} error (@var{template}, @dots{})\n\
+@deftypefnx {Built-in Function} {} error (@var{id}, @var{template}, @dots{})\n\
 Format the optional arguments under the control of the template string\n\
 @var{template} using the same rules as the @code{printf} family of\n\
 functions (@pxref{Formatted Output}) and print the resulting message\n\
 on the @code{stderr} stream.  The message is prefixed by the character\n\
 string @samp{error: }.\n\
 \n\
 Calling @code{error} also sets Octave's internal error state such that\n\
 control will return to the top level without evaluating any more\n\
@@ -1011,28 +1012,53 @@ a single message:\n\
 @group\n\
 function h () nargin == 1 || error (\"nargin != 1\\n\"); end\n\
 f ()\n\
 error: nargin != 1\n\
 @end group\n\
 @end example\n\
 @end deftypefn")
 {
-  // FIXME -- need to extract and pass message id to
-  // handle_message.
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  octave_value_list nargs = args;
+
+  std::string id;
+
+  if (nargin > 1)
+    {
+      std::string arg1 = args(0).string_value ();
 
-  octave_value_list retval;
-  handle_message (error_with_id, "", "unspecified error", args);
+      if (! error_state)
+	{
+	  if (arg1.find ('%') == NPOS)
+	    {
+	      id = arg1;
+
+	      nargs.resize (nargin-1);
+
+	      for (int i = 1; i < nargin; i++)
+		nargs(i-1) = args(i);
+	    }
+	}
+      else
+	return retval;
+    }
+
+  handle_message (error_with_id, id.c_str (), "unspecified error", nargs);
+
   return retval;
 }
 
 DEFCMD (warning, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} warning (@var{template}, @dots{})\n\
-@deftypefnx {Built-in Function} {} warning (@var{id}, @var{template})\n\
+@deftypefnx {Built-in Function} {} warning (@var{id}, @var{template}, @dots{})\n\
 Format the optional arguments under the control of the template string\n\
 @var{template} using the same rules as the @code{printf} family of\n\
 functions (@pxref{Formatted Output}) and print the resulting message\n\
 on the @code{stderr} stream.  The message is prefixed by the character\n\
 string @samp{warning: }.\n\
 You should use this function when you want to notify the user\n\
 of an unusual condition, but only when it makes sense for your program\n\
 to go on.\n\
@@ -1338,18 +1364,16 @@ warning named by @var{id} is handled as 
 		  for (int i = 1; i < nargin; i++)
 		    nargs(i-1) = args(i);
 		}
 	    }
 	  else
 	    return retval;
 	}
 
-      // handle_message.
-
       std::string prev_msg = Vlast_warning_message;
 
       std::string curr_msg = handle_message (warning_with_id, id.c_str (),
 					     "unspecified warning", nargs);
 
       if (nargout > 0)
 	retval = prev_msg;
     }
