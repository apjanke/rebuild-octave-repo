# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1385344888 18000
#      Sun Nov 24 21:01:28 2013 -0500
# Node ID 8fb87d3f0581c789866d658d1859393cc686fc18
# Parent  f794cefc2372dc2347a7a6148d0301d8356e2244
Allow calls to the system function to be interrupted (bug #37672).

* thread-manager.cc (pthead_thread_manager::interrupt): Use kill to
generate signal instead of pthread_kill.

diff --git a/libgui/src/thread-manager.cc b/libgui/src/thread-manager.cc
--- a/libgui/src/thread-manager.cc
+++ b/libgui/src/thread-manager.cc
@@ -66,17 +66,29 @@ public:
   {
     my_thread = pthread_self ();
     initialized = true;
   }
 
   void interrupt (void)
   {
     if (initialized)
-      pthread_kill (my_thread, SIGINT);
+      {
+        // Send SIGINT to all other processes in our process group.
+        // This is needed to interrupt calls to system (), for example.
+
+        // FIXME: What happens if some code inside a
+        // {BEGIN,END}_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE block starts
+        // additional threads and one of those happens to catch this signal?
+        // Would the interrupt handler and the subsequent longjmp and exception
+        // all be executed in the wrong thread?  If so, is there any way to
+        // prevent that from happening?
+
+        kill (0, SIGINT);
+      }
   }
 
 private:
 
   pthread_t my_thread;
 
   bool initialized;
 };
