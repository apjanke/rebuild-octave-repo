# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1465685047 14400
#      Sat Jun 11 18:44:07 2016 -0400
# Node ID 0cdfd6d230e66df668904576288378e128f432e9
# Parent  297d4fc3c5631d50ba8a15d616b0014f1ed9ef50
use std::list<std::string> instead of string_vector in pathsearch functions

* kpse.cc, pathsearch.cc, pathsearch.h: Use std::list<std::string>
  instead of string_vector in pathsearch functions.

* ls-mat5.cc, utils.cc, ov-fcn-handle.cc: Update to match.

diff --git a/libinterp/corefcn/ls-mat5.cc b/libinterp/corefcn/ls-mat5.cc
--- a/libinterp/corefcn/ls-mat5.cc
+++ b/libinterp/corefcn/ls-mat5.cc
@@ -894,20 +894,20 @@ read_mat5_binary_element (std::istream& 
 
                             tc = octave_value (new octave_fcn_handle (tmp,
                                                                       fname));
                           }
                       }
                     else
                       {
                         // Next just search for it anywhere in the system path
-                        string_vector names(3);
-                        names(0) = fname + ".oct";
-                        names(1) = fname + ".mex";
-                        names(2) = fname + ".m";
+                        std::list<std::string> names;
+                        names.push_back (fname + ".oct");
+                        names.push_back (fname + ".mex");
+                        names.push_back (fname + ".m");
 
                         octave::directory_path p (load_path::system_path ());
 
                         str =
                           octave::sys::env::make_absolute (p.find_first_of (names));
 
                         size_t xpos
                           = str.find_last_of (octave::sys::file_ops::dir_sep_chars ());
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -247,27 +247,27 @@ empty_arg (const char * /* name */, octa
 
 // See if the given file is in the path.
 
 std::string
 search_path_for_file (const std::string& path, const string_vector& names)
 {
   octave::directory_path p (path);
 
-  return octave::sys::env::make_absolute (p.find_first_of (names));
+  return octave::sys::env::make_absolute (p.find_first_of (names.std_list ()));
 }
 
 // Find all locations of the given file in the path.
 
 string_vector
 search_path_for_all_files (const std::string& path, const string_vector& names)
 {
   octave::directory_path p (path);
 
-  string_vector sv = p.find_all_first_of (names);
+  string_vector sv = p.find_all_first_of (names.std_list ());
 
   octave_idx_type len = sv.numel ();
 
   for (octave_idx_type i = 0; i < len; i++)
     sv[i] = octave::sys::env::make_absolute (sv[i]);
 
   return sv;
 }
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -22,16 +22,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <iostream>
+#include <list>
 #include <sstream>
 #include <vector>
 
 #include "file-ops.h"
 #include "oct-locbuf.h"
 
 #include "defun.h"
 #include "error.h"
@@ -282,20 +283,20 @@ octave_fcn_handle::set_fcn (const std::s
 
           octave_value tmp (xfcn);
 
           fcn = octave_value (new octave_fcn_handle (tmp, nm));
         }
       else
         {
           // Next just search for it anywhere in the system path
-          string_vector names(3);
-          names(0) = nm + ".oct";
-          names(1) = nm + ".mex";
-          names(2) = nm + ".m";
+          std::list<std::string> names;
+          names.push_back (nm + ".oct");
+          names.push_back (nm + ".mex");
+          names.push_back (nm + ".m");
 
           octave::directory_path p (load_path::system_path ());
 
           str = octave::sys::env::make_absolute (p.find_first_of (names));
 
           size_t xpos = str.find_last_of (octave::sys::file_ops::dir_sep_chars ());
 
           std::string dir_name = str.substr (0, xpos);
diff --git a/liboctave/util/kpse.cc b/liboctave/util/kpse.cc
--- a/liboctave/util/kpse.cc
+++ b/liboctave/util/kpse.cc
@@ -564,17 +564,17 @@ kpse_absolute_p (const std::string& file
    configuration files.  */
 static bool first_search = true;
 
 /* This function is called after every search (except the first, since
    we definitely want to allow enabling the logging in texmf.cnf) to
    record the filename(s) found in $TEXMFLOG.  */
 
 static void
-log_search (const string_vector& filenames)
+log_search (const std::list<std::string>& filenames)
 {
   static FILE *log_file = 0;
   static bool first_time = true; /* Need to open the log file?  */
 
   if (first_time)
     {
       first_time = false;
 
@@ -588,20 +588,18 @@ log_search (const string_vector& filenam
           if (! log_file)
             perror (log_name.c_str ());
         }
     }
 
   if (KPSE_DEBUG_P (KPSE_DEBUG_SEARCH) || log_file)
     {
       /* FILENAMES should never be null, but safety doesn't hurt.  */
-      for (int e = 0; e < filenames.numel () && ! filenames[e].empty (); e++)
+      for (const auto &filename : filenames)
         {
-          std::string filename = filenames[e];
-
           /* Only record absolute filenames, for privacy.  */
           if (log_file && kpse_absolute_p (filename.c_str (), false))
             gnulib::fprintf (log_file, "%lu %s\n",
                              static_cast<unsigned long> (time (0)),
                              filename.c_str ());
 
           /* And show them online, if debugging.  We've already started
              the debugging line in 'search', where this is called, so
@@ -617,77 +615,77 @@ log_search (const string_vector& filenam
    regular file.  Else continue to search for more.  In any case, if
    none, return a list containing just NULL.
 
    We keep a single buffer for the potential filenames and reallocate
    only when necessary.  I'm not sure it's noticeably faster, but it
    does seem cleaner.  (We do waste a bit of space in the return
    value, though, since we don't shrink it to the final size returned.)  */
 
-static string_vector
+static std::list<std::string>
 dir_list_search (str_llist_type *dirs, const std::string& name,
                  bool search_all)
 {
   str_llist_elt_type *elt;
-  string_vector ret;
+  std::list<std::string> ret;
 
   for (elt = *dirs; elt; elt = STR_LLIST_NEXT (*elt))
     {
       const std::string dir = STR_LLIST (*elt);
 
       std::string potential = dir + name;
 
       std::string tmp = kpse_readable_file (potential);
 
       if (! tmp.empty ())
         {
-          ret.append (potential);
+          ret.push_back (potential);
 
           /* Move this element towards the top of the list.  */
           str_llist_float (dirs, elt);
 
           if (! search_all)
             return ret;
         }
     }
 
   return ret;
 }
 
 /* This is called when NAME is absolute or explicitly relative; if it's
    readable, return (a list containing) it; otherwise, return NULL.  */
 
-static string_vector
+static std::list<std::string>
 absolute_search (const std::string& name)
 {
-  string_vector ret_list;
+  std::list<std::string> ret_list;
   std::string found = kpse_readable_file (name);
 
   /* Add 'found' to the return list even if it's null; that tells
      the caller we didn't find anything.  */
-  ret_list.append (found);
+  ret_list.push_back (found);
 
   return ret_list;
 }
 
 /* This is the hard case -- look for NAME in PATH.  If ALL is false,
    return the first file found.  Otherwise, search all elements of PATH.  */
 
-static string_vector
+static std::list<std::string>
 path_search (const std::string& path, const std::string& name,
              bool /* must_exist */, bool all)
 {
-  string_vector ret_list;
+  std::list<std::string> ret_list;
   bool done = false;
 
   for (kpse_path_iterator pi (path); ! done && pi != std::string::npos; pi++)
     {
       std::string elt = *pi;
 
-      string_vector found;
+      std::list<std::string> found;
 
       /* Do not touch the device if present */
       if (NAME_BEGINS_WITH_DEVICE (elt))
         {
           while (elt.length () > 3
                  && IS_DIR_SEP (elt[2]) && IS_DIR_SEP (elt[3]))
             {
               elt[2] = elt[1];
@@ -701,57 +699,57 @@ path_search (const std::string& path, co
           while (elt.length () > 1
                  && IS_DIR_SEP (elt[0]) && IS_DIR_SEP (elt[1]))
             elt = elt.substr (1);
         }
 
       /* Try ls-R, unless we're searching for texmf.cnf.  Our caller
          (search), also tests first_search, and does the resetting.  */
       if (first_search)
-        found = string_vector ();
+        found = std::list<std::string> ();
 
       /* Search the filesystem.  */
 
       if (found.empty ())
         {
           str_llist_type *dirs = kpse_element_dirs (elt);
 
           if (dirs && *dirs)
             found = dir_list_search (dirs, name, all);
         }
 
       /* Did we find anything anywhere?  */
       if (! found.empty ())
         {
           if (all)
-            ret_list.append (found);
+            ret_list.splice (ret_list.end (), found);
           else
             {
-              ret_list.append (found[0]);
+              ret_list.push_back (found.front ());
               done = true;
             }
         }
     }
 
   return ret_list;
 }
 
 /* Search PATH for ORIGINAL_NAME.  If ALL is false, or ORIGINAL_NAME is
    absolute_p, check ORIGINAL_NAME itself.  Otherwise, look at each
    element of PATH for the first readable ORIGINAL_NAME.
 
    Always return a list; if no files are found, the list will
    contain just NULL.  If ALL is true, the list will be
    terminated with NULL.  */
 
-static string_vector
+static std::list<std::string>
 search (const std::string& path, const std::string& original_name,
         bool must_exist, bool all)
 {
-  string_vector ret_list;
+  std::list<std::string> ret_list;
   bool absolute_p;
 
   /* Make a leading ~ count as an absolute filename, and expand $FOO's.  */
   std::string name = kpse_expand (original_name);
 
   /* If the first name is absolute or explicitly relative, no need to
      consider PATH at all.  */
   absolute_p = kpse_absolute_p (name, true);
@@ -800,51 +798,52 @@ search (const std::string& path, const s
    do this once, in advance, instead of for every search using it.
 
    In any case, return the complete filename if found, otherwise NULL.  */
 
 static std::string
 kpse_path_search (const std::string& path, const std::string& name,
                   bool must_exist)
 {
-  string_vector ret_list = search (path, name, must_exist, false);
-
-  return ret_list.empty () ? "" : ret_list[0];
+  std::list<std::string> ret_list = search (path, name, must_exist, false);
+
+  return ret_list.empty () ? "" : ret_list.front ();
 }
 
 /* Search all elements of PATH for files named NAME.  Not sure if it's
    right to assert 'must_exist' here, but it suffices now.  */
 
 /* Like 'kpse_path_search' with MUST_EXIST true, but return a list of
    all the filenames (or NULL if none), instead of taking the first.  */
 
-static string_vector
+static std::list<std::string>
 kpse_all_path_search (const std::string& path, const std::string& name)
 {
   return search (path, name, true, true);
 }
 
 /* This is the hard case -- look in each element of PATH for each
    element of NAMES.  If ALL is false, return the first file found.
    Otherwise, search all elements of PATH.  */
 
-static string_vector
-path_find_first_of (const std::string& path, const string_vector& names,
+static std::list<std::string>
+path_find_first_of (const std::string& path,
+                    const std::list<std::string>& names,
                     bool /* must_exist */, bool all)
 {
-  string_vector ret_list;
+  std::list<std::string> ret_list;
   bool done = false;
 
   for (kpse_path_iterator pi (path); ! done && pi != std::string::npos; pi++)
     {
       std::string elt = *pi;
 
       str_llist_type *dirs;
       str_llist_elt_type *dirs_elt;
-      string_vector found;
+      std::list<std::string> found;
 
       /* Do not touch the device if present */
 
       if (NAME_BEGINS_WITH_DEVICE (elt))
         {
           while (elt.length () > 3
                  && IS_DIR_SEP (elt[2]) && IS_DIR_SEP (elt[3]))
             {
@@ -862,26 +861,25 @@ path_find_first_of (const std::string& p
         }
 
       /* We have to search one directory at a time.  */
       dirs = kpse_element_dirs (elt);
       for (dirs_elt = *dirs; dirs_elt; dirs_elt = STR_LLIST_NEXT (*dirs_elt))
         {
           const std::string dir = STR_LLIST (*dirs_elt);
 
-          int len = names.numel ();
-          for (int i = 0; i < len && ! done; i++)
+          for (auto it = names.cbegin (); it != names.cend () && ! done; it++)
             {
-              std::string name = names[i];
+              std::string name = *it;
 
               /* Try ls-R, unless we're searching for texmf.cnf.  Our caller
                  (find_first_of), also tests first_search, and does the
                  resetting.  */
               if (first_search)
-                found = string_vector ();
+                found = std::list<std::string> ();
 
               /* Search the filesystem.  */
 
               if (found.empty ())
                 {
                   static str_llist_type *tmp = 0;
 
                   if (! tmp)
@@ -895,58 +893,54 @@ path_find_first_of (const std::string& p
 
                   found = dir_list_search (tmp, name, all);
                 }
 
               /* Did we find anything anywhere?  */
               if (! found.empty ())
                 {
                   if (all)
-                    ret_list.append (found);
+                    ret_list.splice (ret_list.end (), found);
                   else
                     {
-                      ret_list.append (found[0]);
+                      ret_list.push_back (found.front ());
                       done = true;
                     }
                 }
             }
         }
     }
 
   return ret_list;
 }
 
-static string_vector
-find_first_of (const std::string& path, const string_vector& names,
+static std::list<std::string>
+find_first_of (const std::string& path, const std::list<std::string>& names,
                bool must_exist, bool all)
 {
-  string_vector ret_list;
+  std::list<std::string> ret_list;
 
   if (KPSE_DEBUG_P (KPSE_DEBUG_SEARCH))
     {
       gnulib::fputs ("start find_first_of ((", stderr);
 
-      int len = names.numel ();
-
-      for (int i = 0; i < len; i++)
+      for (auto p = names.cbegin (); p != names.cend (); p++)
         {
-          if (i == 0)
-            gnulib::fputs (names[i].c_str (), stderr);
+          if (p == names.cbegin ())
+            gnulib::fputs (p->c_str (), stderr);
           else
-            gnulib::fprintf (stderr, ", %s", names[i].c_str ());
+            gnulib::fprintf (stderr, ", %s", p->c_str ());
         }
 
       gnulib::fprintf (stderr, "), path=%s, must_exist=%d).\n",
                        path.c_str (), must_exist);
     }
 
-  for (int i = 0; i < names.numel (); i++)
+  for (const auto &name : names)
     {
-      std::string name = names[i];
-
       if (kpse_absolute_p (name, true))
         {
           /* If the name is absolute or explicitly relative, no need
              to consider PATH at all.  If we find something, then we
              are done.  */
 
           ret_list = absolute_search (name);
 
@@ -968,24 +962,22 @@ find_first_of (const std::string& path, 
     {
       /* Record the filenames we found, if desired.  And wrap them in a
          debugging line if we're doing that.  */
 
       if (KPSE_DEBUG_P (KPSE_DEBUG_SEARCH))
         {
           gnulib::fputs ("find_first_of (", stderr);
 
-          int len = names.numel ();
-
-          for (int i = 0; i < len; i++)
+          for (auto p = names.cbegin (); p != names.cend (); p++)
             {
-              if (i == 0)
-                gnulib::fputs (names[i].c_str (), stderr);
+              if (p == names.cbegin ())
+                gnulib::fputs (p->c_str (), stderr);
               else
-                gnulib::fprintf (stderr, ", %s", names[i].c_str ());
+                gnulib::fprintf (stderr, ", %s", p->c_str ());
             }
 
           gnulib::fputs (") =>", stderr);
         }
 
       log_search (ret_list);
 
       if (KPSE_DEBUG_P (KPSE_DEBUG_SEARCH))
@@ -997,34 +989,36 @@ find_first_of (const std::string& path, 
 
 /* Search each element of PATH for each element of NAMES.  Return the
    first one found.  */
 
 /* Search each element of PATH for each element in the list of NAMES.
    Return the first one found.  */
 
 static std::string
-kpse_path_find_first_of (const std::string& path, const string_vector& names,
+kpse_path_find_first_of (const std::string& path,
+                         const std::list<std::string>& names,
                          bool must_exist)
 {
-  string_vector ret_list = find_first_of (path, names, must_exist, false);
-
-  return ret_list.empty () ? "" : ret_list[0];
+  std::list<std::string> ret_list
+    = find_first_of (path, names, must_exist, false);
+
+  return ret_list.empty () ? "" : ret_list.front ();
 }
 
 /* Search each element of PATH for each element of NAMES and return a
    list containing everything found, in the order found.  */
 
 /* Like 'kpse_path_find_first_of' with MUST_EXIST true, but return a
    list of all the filenames (or NULL if none), instead of taking the
    first.  */
 
-static string_vector
+static std::list<std::string>
 kpse_all_path_find_first_of (const std::string& path,
-                             const string_vector& names)
+                             const std::list<std::string>& names)
 {
   return find_first_of (path, names, true, true);
 }
 
 /* General expansion.  Some of this file (the brace-expansion
    code from bash) is covered by the GPL; this is the only GPL-covered
    code in kpathsea.  The part of the file that I wrote (the first
    couple of functions) is covered by the LGPL.  */
@@ -1127,17 +1121,17 @@ kpse_tilde_expand (const std::string& na
 static std::string
 kpse_expand (const std::string& s)
 {
   std::string var_expansion = kpse_var_expand (s);
   return kpse_tilde_expand (var_expansion);
 }
 
 /* Forward declarations of functions from the original expand.c  */
-static string_vector brace_expand (const std::string&);
+static std::list<std::string> brace_expand (const std::string&);
 
 /* If $KPSE_DOT is defined in the environment, prepend it to any relative
    path components. */
 
 static std::string
 kpse_expand_kpse_dot (const std::string& path)
 {
   std::string ret;
@@ -1178,24 +1172,24 @@ kpse_expand_kpse_dot (const std::string&
    variable definition contained braces (e.g., $TEXMF).  Return a
    string comprising all of the results separated by ENV_SEP_STRING.  */
 
 static std::string
 kpse_brace_expand_element (const std::string& elt)
 {
   std::string ret;
 
-  string_vector expansions = brace_expand (elt);
-
-  for (int i = 0; i < expansions.numel (); i++)
+  std::list<std::string> expansions = brace_expand (elt);
+
+  for (const auto &expanded_elt : expansions)
     {
       /* Do $ and ~ expansion on each element.  */
-      std::string x = kpse_expand (expansions[i]);
-
-      if (x != expansions[i])
+      std::string x = kpse_expand (expanded_elt);
+
+      if (x != elt)
         {
           /* If we did any expansions, do brace expansion again.  Since
              recursive variable definitions are not allowed, this recursion
              must terminate.  (In practice, it's unlikely there will ever be
              more than one level of recursion.)  */
           x = kpse_brace_expand_element (x);
         }
 
@@ -1343,70 +1337,65 @@ kpse_path_expand (const std::string& pat
    the result so far.  */
 
 /* Return a new array of strings which is the result of appending each
    string in ARR2 to each string in ARR1.  The resultant array is
    len (arr1) * len (arr2) long.  For convenience, ARR1 (and its contents)
    are free ()'ed.  ARR1 can be NULL, in that case, a new version of ARR2
    is returned. */
 
-static string_vector
-array_concat (const string_vector& arr1, const string_vector& arr2)
+static std::list<std::string>
+array_concat (const std::list<std::string>& arr1,
+              const std::list<std::string>& arr2)
 {
-  string_vector result;
+  std::list<std::string> result;
 
   if (arr1.empty ())
     result = arr2;
   else if (arr2.empty ())
     result = arr1;
   else
     {
-      int len1 = arr1.numel ();
-      int len2 = arr2.numel ();
-
-      result = string_vector (len1 * len2);
-
-      int k = 0;
-      for (int i = 0; i < len2; i++)
-        for (int j = 0; j < len1; j++)
-          result[k++] = arr1[j] + arr2[i];
+      for (const auto &elt_2 : arr2)
+        for (const auto &elt_1 : arr1)
+          result.push_back (elt_1 + elt_2);
     }
 
   return result;
 }
 
 static int brace_gobbler (const std::string&, int&, int);
-static string_vector expand_amble (const std::string&);
+static std::list<std::string> expand_amble (const std::string&);
 
 /* Return an array of strings; the brace expansion of TEXT. */
-static string_vector
+static std::list<std::string>
 brace_expand (const std::string& text)
 {
   /* Find the text of the preamble. */
   int i = 0;
   int c = brace_gobbler (text, i, '{');
 
   std::string preamble = text.substr (0, i);
 
-  string_vector result = string_vector (preamble);
+  std::list<std::string> result (1, preamble);
 
   if (c == '{')
     {
       /* Find the amble.  This is the stuff inside this set of braces. */
       int start = ++i;
       c = brace_gobbler (text, i, '}');
 
       /* What if there isn't a matching close brace? */
       if (! c)
         {
           (*current_liboctave_warning_with_id_handler)
             ("Octave:pathsearch-syntax",
              "%s: Unmatched {", text.c_str ());
 
-          result = string_vector (text);
+          result = std::list<std::string> (1, text);
         }
       else
         {
           std::string amble = text.substr (start, i-start);
           result = array_concat (result, expand_amble (amble));
 
           std::string postamble = text.substr (i+1);
           result = array_concat (result, brace_expand (postamble));
@@ -1418,42 +1407,42 @@ brace_expand (const std::string& text)
 
 /* The character which is used to separate arguments. */
 static int brace_arg_separator = ',';
 
 /* Expand the text found inside of braces.  We simply try to split the
    text at BRACE_ARG_SEPARATORs into separate strings.  We then brace
    expand each slot which needs it, until there are no more slots which
    need it. */
-static string_vector
+static std::list<std::string>
 expand_amble (const std::string& text)
 {
-  string_vector result;
+  std::list<std::string> result;
 
   size_t text_len = text.length ();
   size_t start;
   int i, c;
 
   for (start = 0, i = 0, c = 1; c && start < text_len; start = ++i)
     {
       int i0 = i;
       int c0 = brace_gobbler (text, i0, brace_arg_separator);
       int i1 = i;
       int c1 = brace_gobbler (text, i1, ENV_SEP);
       c = c0 | c1;
       i = (i0 < i1 ? i0 : i1);
 
       std::string tem = text.substr (start, i-start);
 
-      string_vector partial = brace_expand (tem);
+      std::list<std::string> partial = brace_expand (tem);
 
       if (result.empty ())
         result = partial;
       else
-        result.append (partial);
+        result.splice (result.end (), partial);
     }
 
   return result;
 }
 
 /* Start at INDEX, and skip characters in TEXT.  Set INDEX to the
    index of the character matching SATISFY.  This understands about
    quoting.  Return the character that caused us to stop searching;
diff --git a/liboctave/util/pathsearch.cc b/liboctave/util/pathsearch.cc
--- a/liboctave/util/pathsearch.cc
+++ b/liboctave/util/pathsearch.cc
@@ -27,17 +27,16 @@ along with Octave; see the file COPYING.
 #include <cstdlib>
 
 #include <string>
 
 #include "lo-utils.h"
 #include "oct-env.h"
 #include "pathsearch.h"
 #include "singleton-cleanup.h"
-#include "str-vec.h"
 
 #include "kpse.cc"
 
 namespace octave
 {
   directory_path::static_members *directory_path::static_members::instance = 0;
 
   directory_path::static_members::static_members (void)
@@ -58,91 +57,78 @@ namespace octave
 
     if (! instance)
       (*current_liboctave_error_handler)
         ("unable to create directory_path::static_members object!");
 
     return retval;
   }
 
-  string_vector
+  std::list<std::string>
   directory_path::elements (void)
   {
-    return initialized ? pv : string_vector ();
+    return m_initialized ? m_path_elements : std::list<std::string> ();
   }
 
-  string_vector
+  std::list<std::string>
   directory_path::all_directories (void)
   {
-    int count = 0;
-    string_vector retval;
-
-    if (initialized)
-      {
-        int len = pv.numel ();
+    std::list<std::string> retval;
 
-        int nmax = len > 32 ? len : 32;
-
-        retval.resize (len);
-
-        for (int i = 0; i < len; i++)
+    if (m_initialized)
+      {
+        for (const auto& elt : m_path_elements)
           {
-            str_llist_type *elt_dirs = kpse_element_dirs (pv[i]);
+            str_llist_type *elt_dirs = kpse_element_dirs (elt);
 
             if (elt_dirs)
               {
                 str_llist_elt_type *dir;
 
                 for (dir = *elt_dirs; dir; dir = STR_LLIST_NEXT (*dir))
                   {
                     const std::string elt_dir = STR_LLIST (*dir);
 
                     if (! elt_dir.empty ())
-                      {
-                        if (count == nmax)
-                          nmax *= 2;
-
-                        retval.resize (nmax);
-
-                        retval[count++] = elt_dir;
-                      }
+                      retval.push_back (elt_dir);
                   }
               }
           }
-
-        retval.resize (count);
       }
 
     return retval;
   }
 
   std::string
   directory_path::find_first (const std::string& nm)
   {
-    return initialized ? kpse_path_search (p, nm, true) : "";
+    return m_initialized ? kpse_path_search (m_expanded_path, nm, true) : "";
   }
 
-  string_vector
+  std::list<std::string>
   directory_path::find_all (const std::string& nm)
   {
-    return initialized ? kpse_all_path_search (p, nm) : string_vector ();
+    return (m_initialized
+            ? kpse_all_path_search (m_expanded_path, nm)
+            : std::list<std::string> ());
   }
 
   std::string
-  directory_path::find_first_of (const string_vector& names)
+  directory_path::find_first_of (const std::list<std::string>& names)
   {
-    return initialized
-      ? kpse_path_find_first_of (p, names, true) : "";
+    return (m_initialized
+            ? kpse_path_find_first_of (m_expanded_path, names, true) : "");
   }
 
-  string_vector
-  directory_path::find_all_first_of (const string_vector& names)
+  std::list<std::string>
+  directory_path::find_all_first_of (const std::list<std::string>& names)
   {
-    return initialized
-      ? kpse_all_path_find_first_of (p, names) : string_vector ();
+    return (m_initialized
+            ? kpse_all_path_find_first_of (m_expanded_path, names)
+            : std::list<std::string> ());
   }
 
   void
   directory_path::init (void)
   {
     static bool octave_kpathsea_initialized = false;
 
     if (! octave_kpathsea_initialized)
@@ -150,25 +136,19 @@ namespace octave
         std::string val = octave::sys::env::getenv ("KPATHSEA_DEBUG");
 
         if (! val.empty ())
           kpathsea_debug |= atoi (val.c_str ());
 
         octave_kpathsea_initialized = true;
       }
 
-    p = kpse_path_expand (p_default.empty ()
-                          ? p_orig : kpse_expand_default (p_orig, p_default));
-
-    int count = 0;
-    for (kpse_path_iterator pi (p); pi != std::string::npos; pi++)
-      count++;
+    m_expanded_path
+      = kpse_path_expand (m_default_path.empty ()
+                          ? m_orig_path
+                          : kpse_expand_default (m_orig_path, m_default_path));
 
-    pv.resize (count);
-
-    kpse_path_iterator pi (p);
+    for (kpse_path_iterator pi (m_expanded_path); pi != std::string::npos; pi++)
+      m_path_elements.push_back (*pi);
 
-    for (int i = 0; i < count; i++)
-      pv[i] = *pi++;
-
-    initialized = true;
+    m_initialized = true;
   }
 }
diff --git a/liboctave/util/pathsearch.h b/liboctave/util/pathsearch.h
--- a/liboctave/util/pathsearch.h
+++ b/liboctave/util/pathsearch.h
@@ -20,73 +20,84 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_pathsearch_h)
 #define octave_pathsearch_h 1
 
 #include "octave-config.h"
 
+#include <list>
 #include <string>
 
-#include "str-vec.h"
-
 namespace octave
 {
   class
   OCTAVE_API
   directory_path
   {
   public:
 
     directory_path (const std::string& s = "", const std::string& d = "")
-      : p_orig (s), p_default (d), initialized (false), p (), pv ()
+      : m_orig_path (s), m_default_path (d), m_initialized (false),
+        m_expanded_path (), m_path_elements ()
       {
-        if (! p_orig.empty ())
+        if (! m_orig_path.empty ())
           init ();
       }
 
     directory_path (const directory_path& dp)
-      : p_orig (dp.p_orig), p_default (dp.p_default),
-        initialized (dp.initialized), p (dp.p), pv (dp.pv)
+      : m_orig_path (dp.m_orig_path),
+        m_default_path (dp.m_default_path),
+        m_initialized (dp.m_initialized),
+        m_expanded_path (dp.m_expanded_path),
+        m_path_elements (dp.m_path_elements)
       { }
 
     directory_path& operator = (const directory_path& dp)
       {
-        p_orig = dp.p_orig;
-        p_default = dp.p_default;
-        initialized = dp.initialized;
-        p = dp.p;
-        pv = dp.pv;
+        if (this != &dp)
+          {
+            m_orig_path = dp.m_orig_path;
+            m_default_path = dp.m_default_path;
+            m_initialized = dp.m_initialized;
+            m_expanded_path = dp.m_expanded_path;
+            m_path_elements = dp.m_path_elements;
+          }
+
         return *this;
       }
 
     ~directory_path (void) { }
 
     void set (const std::string& s)
     {
-      initialized = false;
-      p_orig = s;
+      m_initialized = false;
+      m_orig_path = s;
       init ();
     }
 
-    string_vector elements (void);
-    string_vector all_directories (void);
+    std::list<std::string> elements (void);
+
+    std::list<std::string> all_directories (void);
 
     std::string find_first (const std::string&);
+
     std::string find (const std::string& nm) { return find_first (nm); }
 
-    string_vector find_all (const std::string&);
+    std::list<std::string> find_all (const std::string&);
 
-    std::string find_first_of (const string_vector& names);
-    string_vector find_all_first_of (const string_vector& names);
+    std::string find_first_of (const std::list<std::string>& names);
+
+    std::list<std::string>
+    find_all_first_of (const std::list<std::string>& names);
 
     void rehash (void)
     {
-      initialized = false;
+      m_initialized = false;
       init ();
     }
 
     static char path_sep_char (void)
     {
       return static_members::path_sep_char ();
     }
 
@@ -100,31 +111,31 @@ namespace octave
       return static_members::path_sep_str ();
     }
 
     static bool is_path_sep (char c) { return c == path_sep_char (); }
 
   private:
 
     // The colon separated list that we were given.
-    std::string p_orig;
+    std::string m_orig_path;
 
     // The default path.  If specified, replaces leading, trailing, or
     // doubled colons in p_orig.
-    std::string p_default;
+    std::string m_default_path;
 
-    // TRUE means we've unpacked p.
-    bool initialized;
+    // TRUE means we've unpacked the path p.
+    bool m_initialized;
 
     // A version of the colon separate list on which we have performed
     // tilde, variable, and possibly default path expansion.
-    std::string p;
+    std::string m_expanded_path;
 
     // The elements of the list.
-    string_vector pv;
+    std::list<std::string> m_path_elements;
 
     void init (void);
 
     // Use a singleton class for these data members instead of just
     // making them static members of the directory_path class so that
     // we can ensure proper initialization.
 
     class OCTAVE_API static_members
