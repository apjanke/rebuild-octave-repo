# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1431590565 14400
#      Thu May 14 04:02:45 2015 -0400
# Branch stable
# Node ID e679dc89e64b897917497a8cb7119829f2de35e7
# Parent  998881b6cdefc97b594dacf75a4934d0484fb166
allow keywords as structure fields again (bug #45092)

* lex.ll (handle_identifier): Don't throw error if structure field is
a keyword.  Don't abort if at_beginning_of_statement is true.

diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -2888,52 +2888,38 @@ octave_base_lexer::handle_fq_identifier 
 
 int
 octave_base_lexer::handle_identifier (void)
 {
   char *yytxt = flex_yytext ();
 
   std::string tok = yytxt;
 
-  // If tok is a keyword token, then is_keyword_token will set
-  // at_beginning_of_statement.  For example, if tok is an IF
-  // token, then at_beginning_of_statement will be false.
-
-  int kw_token = is_keyword_token (tok);
-
   // If we are expecting a structure element, avoid recognizing
   // keywords and other special names and return STRUCT_ELT, which is
-  // a string that is also a valid identifier.  But first, we have to
-  // decide whether to insert a comma.
+  // a string that is also a valid identifier.
 
   if (looking_at_indirect_ref)
     {
       push_token (new token (STRUCT_ELT, tok, input_line_number,
                              current_input_column));
 
       looking_for_object_index = true;
 
       current_input_column += flex_yyleng ();
 
-      if (kw_token)
-        {
-          error ("structure fields may not be keywords");
-          return LEXICAL_ERROR;
-        }
-
-      if (at_beginning_of_statement)
-        {
-          error ("invalid syntax for structure reference");
-
-          return LEXICAL_ERROR;
-        }
-
       return STRUCT_ELT;
     }
 
+  // If tok is a keyword token, then is_keyword_token will set
+  // at_beginning_of_statement.  For example, if tok is an IF
+  // token, then at_beginning_of_statement will be false.
+
+  int kw_token = is_keyword_token (tok);
+
   if (looking_at_function_handle)
     {
       if (kw_token)
         {
           error ("function handles may not refer to keywords");
 
           return LEXICAL_ERROR;
         }
