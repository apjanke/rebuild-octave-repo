# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1444878979 14400
#      Wed Oct 14 23:16:19 2015 -0400
# Node ID 48fedd8fbff72bad75aaea5b610e146b07652b4b
# Parent  ec003232f7aae3a37f1c99149ca82eef33af8999
maint: Apply Octave coding style to Cholesky classes

* CmplxCHOL.cc, dbleCHOL.cc, fCmplxCHOL.cc, floatCHOL.cc: Remove braces from
one-line if-else blocks.  Fix corresponding indentation.  Don't use space
between variable and parenthesis when indexing.

diff --git a/liboctave/numeric/CmplxCHOL.cc b/liboctave/numeric/CmplxCHOL.cc
--- a/liboctave/numeric/CmplxCHOL.cc
+++ b/liboctave/numeric/CmplxCHOL.cc
@@ -100,54 +100,44 @@ ComplexCHOL::init (const ComplexMatrix& 
 
   octave_idx_type n = a_nc;
   octave_idx_type info;
 
   is_upper = upper;
 
   chol_mat.clear (n, n);
   if (is_upper)
-    {
-      for (octave_idx_type j = 0; j < n; j++)
-        {
-          for (octave_idx_type i = 0; i <= j; i++)
-            chol_mat.xelem (i, j) = a (i, j);
-          for (octave_idx_type i = j + 1; i < n; i++)
-            chol_mat.xelem (i, j) = 0.0;
-        }
-     }
+    for (octave_idx_type j = 0; j < n; j++)
+      {
+        for (octave_idx_type i = 0; i <= j; i++)
+          chol_mat.xelem (i, j) = a(i, j);
+        for (octave_idx_type i = j+1; i < n; i++)
+          chol_mat.xelem (i, j) = 0.0;
+      }
   else
-    {
-      for (octave_idx_type j = 0; j < n; j++)
-        {
-          for (octave_idx_type i = 0; i < j; i++)
-            chol_mat.xelem (i, j) = 0.0;
-          for (octave_idx_type i = j; i < n; i++)
-            chol_mat.xelem (i, j) = a (i, j);
-        }
-    }
+    for (octave_idx_type j = 0; j < n; j++)
+      {
+        for (octave_idx_type i = 0; i < j; i++)
+          chol_mat.xelem (i, j) = 0.0;
+        for (octave_idx_type i = j; i < n; i++)
+          chol_mat.xelem (i, j) = a(i, j);
+      }
   Complex *h = chol_mat.fortran_vec ();
 
   // Calculate the norm of the matrix, for later use.
   double anorm = 0;
   if (calc_cond)
     anorm = xnorm (a, 1);
 
   if (is_upper)
-    {
-      F77_XFCN (zpotrf, ZPOTRF, (F77_CONST_CHAR_ARG2 ("U", 1),
-                                 n, h, n, info
-                                 F77_CHAR_ARG_LEN (1)));
-    }
+    F77_XFCN (zpotrf, ZPOTRF, (F77_CONST_CHAR_ARG2 ("U", 1), n, h, n, info
+                               F77_CHAR_ARG_LEN (1)));
   else
-    {
-      F77_XFCN (zpotrf, ZPOTRF, (F77_CONST_CHAR_ARG2 ("L", 1),
-                                 n, h, n, info
-                                 F77_CHAR_ARG_LEN (1)));
-    }
+    F77_XFCN (zpotrf, ZPOTRF, (F77_CONST_CHAR_ARG2 ("L", 1), n, h, n, info
+                               F77_CHAR_ARG_LEN (1)));
 
   xrcond = 0.0;
   if (info > 0)
     chol_mat.resize (info - 1, info - 1);
   else if (calc_cond)
     {
       octave_idx_type zpocon_info = 0;
 
@@ -178,45 +168,37 @@ chol2inv_internal (const ComplexMatrix& 
   if (r_nr == r_nc)
     {
       octave_idx_type n = r_nc;
       octave_idx_type info;
 
       ComplexMatrix tmp = r;
 
       if (is_upper)
-        {
-          F77_XFCN (zpotri, ZPOTRI, (F77_CONST_CHAR_ARG2 ("U", 1), n,
-                                     tmp.fortran_vec (), n, info
-                                     F77_CHAR_ARG_LEN (1)));
-        }
+        F77_XFCN (zpotri, ZPOTRI, (F77_CONST_CHAR_ARG2 ("U", 1), n,
+                                   tmp.fortran_vec (), n, info
+                                   F77_CHAR_ARG_LEN (1)));
       else
-        {
-          F77_XFCN (zpotri, ZPOTRI, (F77_CONST_CHAR_ARG2 ("L", 1), n,
-                                     tmp.fortran_vec (), n, info
-                                     F77_CHAR_ARG_LEN (1)));
-        }
+        F77_XFCN (zpotri, ZPOTRI, (F77_CONST_CHAR_ARG2 ("L", 1), n,
+                                   tmp.fortran_vec (), n, info
+                                   F77_CHAR_ARG_LEN (1)));
 
       // If someone thinks of a more graceful way of doing this (or
       // faster for that matter :-)), please let me know!
 
       if (n > 1)
         {
           if (is_upper)
-            {
-              for (octave_idx_type j = 0; j < r_nc; j++)
-                for (octave_idx_type i = j+1; i < r_nr; i++)
-                  tmp.xelem (i, j) = tmp.xelem (j, i);
-            }
+            for (octave_idx_type j = 0; j < r_nc; j++)
+              for (octave_idx_type i = j+1; i < r_nr; i++)
+                tmp.xelem (i, j) = tmp.xelem (j, i);
           else
-            {
-              for (octave_idx_type j = 0; j < r_nc; j++)
-                for (octave_idx_type i = j+1; i < r_nr; i++)
-                  tmp.xelem (j, i) = tmp.xelem (i, j);
-            }
+            for (octave_idx_type j = 0; j < r_nc; j++)
+              for (octave_idx_type i = j+1; i < r_nr; i++)
+                tmp.xelem (j, i) = tmp.xelem (i, j);
         }
 
       retval = tmp;
     }
   else
     (*current_liboctave_error_handler) ("chol2inv requires square matrix");
 
   return retval;
diff --git a/liboctave/numeric/dbleCHOL.cc b/liboctave/numeric/dbleCHOL.cc
--- a/liboctave/numeric/dbleCHOL.cc
+++ b/liboctave/numeric/dbleCHOL.cc
@@ -100,79 +100,65 @@ CHOL::init (const Matrix& a, bool upper,
 
   octave_idx_type n = a_nc;
   octave_idx_type info;
 
   is_upper = upper;
 
   chol_mat.clear (n, n);
   if (is_upper)
-    {
-      for (octave_idx_type j = 0; j < n; j++)
-        {
-          for (octave_idx_type i = 0; i <= j; i++)
-            chol_mat.xelem (i, j) = a (i, j);
-          for (octave_idx_type i = j + 1; i < n; i++)
-            chol_mat.xelem (i, j) = 0.0;
-        }
-     }
+    for (octave_idx_type j = 0; j < n; j++)
+      {
+        for (octave_idx_type i = 0; i <= j; i++)
+          chol_mat.xelem (i, j) = a(i, j);
+        for (octave_idx_type i = j+1; i < n; i++)
+          chol_mat.xelem (i, j) = 0.0;
+      }
   else
-    {
-      for (octave_idx_type j = 0; j < n; j++)
-        {
-          for (octave_idx_type i = 0; i < j; i++)
-            chol_mat.xelem (i, j) = 0.0;
-          for (octave_idx_type i = j; i < n; i++)
-            chol_mat.xelem (i, j) = a (i, j);
-        }
-    }
+    for (octave_idx_type j = 0; j < n; j++)
+      {
+        for (octave_idx_type i = 0; i < j; i++)
+          chol_mat.xelem (i, j) = 0.0;
+        for (octave_idx_type i = j; i < n; i++)
+          chol_mat.xelem (i, j) = a(i, j);
+      }
   double *h = chol_mat.fortran_vec ();
 
   // Calculate the norm of the matrix, for later use.
   double anorm = 0;
   if (calc_cond)
     anorm = xnorm (a, 1);
 
   if (is_upper)
-    {
-      F77_XFCN (dpotrf, DPOTRF, (F77_CONST_CHAR_ARG2 ("U", 1),
-                                 n, h, n, info
-                                 F77_CHAR_ARG_LEN (1)));
-    }
+    F77_XFCN (dpotrf, DPOTRF, (F77_CONST_CHAR_ARG2 ("U", 1), n, h, n, info
+                               F77_CHAR_ARG_LEN (1)));
   else
-    {
-      F77_XFCN (dpotrf, DPOTRF, (F77_CONST_CHAR_ARG2 ("L", 1),
-                                 n, h, n, info
-                                 F77_CHAR_ARG_LEN (1)));
-    }
+    F77_XFCN (dpotrf, DPOTRF, (F77_CONST_CHAR_ARG2 ("L", 1), n, h, n, info
+                               F77_CHAR_ARG_LEN (1)));
 
   xrcond = 0.0;
   if (info > 0)
     chol_mat.resize (info - 1, info - 1);
   else if (calc_cond)
     {
       octave_idx_type dpocon_info = 0;
 
       // Now calculate the condition number for non-singular matrix.
       Array<double> z (dim_vector (3*n, 1));
       double *pz = z.fortran_vec ();
       Array<octave_idx_type> iz (dim_vector (n, 1));
       octave_idx_type *piz = iz.fortran_vec ();
       if (is_upper)
-        {
-          F77_XFCN (dpocon, DPOCON, (F77_CONST_CHAR_ARG2 ("U", 1), n, h,
-                                     n, anorm, xrcond, pz, piz, dpocon_info
-                                     F77_CHAR_ARG_LEN (1)));
-        }
+        F77_XFCN (dpocon, DPOCON, (F77_CONST_CHAR_ARG2 ("U", 1), n, h,
+                                   n, anorm, xrcond, pz, piz, dpocon_info
+                                   F77_CHAR_ARG_LEN (1)));
       else
-        {
-          F77_XFCN (dpocon, DPOCON, (F77_CONST_CHAR_ARG2 ("L", 1), n, h,
-                                     n, anorm, xrcond, pz, piz, dpocon_info
-                                     F77_CHAR_ARG_LEN (1)));
-        }
+        F77_XFCN (dpocon, DPOCON, (F77_CONST_CHAR_ARG2 ("L", 1), n, h,
+                                   n, anorm, xrcond, pz, piz, dpocon_info
+                                   F77_CHAR_ARG_LEN (1)));
 
       if (dpocon_info != 0)
         info = -1;
     }
 
   return info;
 }
 
@@ -190,45 +176,37 @@ chol2inv_internal (const Matrix& r, bool
       octave_idx_type info = 0;
 
       Matrix tmp = r;
       double *v = tmp.fortran_vec ();
 
       if (info == 0)
         {
           if (is_upper)
-            {
-              F77_XFCN (dpotri, DPOTRI, (F77_CONST_CHAR_ARG2 ("U", 1), n,
-                                         v, n, info
-                                         F77_CHAR_ARG_LEN (1)));
-            }
+            F77_XFCN (dpotri, DPOTRI, (F77_CONST_CHAR_ARG2 ("U", 1), n,
+                                       v, n, info
+                                       F77_CHAR_ARG_LEN (1)));
           else
-            {
-              F77_XFCN (dpotri, DPOTRI, (F77_CONST_CHAR_ARG2 ("L", 1), n,
-                                         v, n, info
-                                         F77_CHAR_ARG_LEN (1)));
-            }
+            F77_XFCN (dpotri, DPOTRI, (F77_CONST_CHAR_ARG2 ("L", 1), n,
+                                       v, n, info
+                                       F77_CHAR_ARG_LEN (1)));
 
           // If someone thinks of a more graceful way of doing this (or
           // faster for that matter :-)), please let me know!
 
           if (n > 1)
             {
               if (is_upper)
-                {
-                  for (octave_idx_type j = 0; j < r_nc; j++)
-                    for (octave_idx_type i = j+1; i < r_nr; i++)
-                      tmp.xelem (i, j) = tmp.xelem (j, i);
-                }
+                for (octave_idx_type j = 0; j < r_nc; j++)
+                  for (octave_idx_type i = j+1; i < r_nr; i++)
+                    tmp.xelem (i, j) = tmp.xelem (j, i);
               else
-                {
-                  for (octave_idx_type j = 0; j < r_nc; j++)
-                    for (octave_idx_type i = j+1; i < r_nr; i++)
-                      tmp.xelem (j, i) = tmp.xelem (i, j);
-                }
+                for (octave_idx_type j = 0; j < r_nc; j++)
+                  for (octave_idx_type i = j+1; i < r_nr; i++)
+                    tmp.xelem (j, i) = tmp.xelem (i, j);
             }
 
           retval = tmp;
         }
     }
   else
     (*current_liboctave_error_handler) ("chol2inv requires square matrix");
 
diff --git a/liboctave/numeric/fCmplxCHOL.cc b/liboctave/numeric/fCmplxCHOL.cc
--- a/liboctave/numeric/fCmplxCHOL.cc
+++ b/liboctave/numeric/fCmplxCHOL.cc
@@ -180,24 +180,26 @@ chol2inv_internal (const FloatComplexMat
         F77_XFCN (cpotri, CPOTRI, (F77_CONST_CHAR_ARG2 ("L", 1), n,
                                    tmp.fortran_vec (), n, info
                                    F77_CHAR_ARG_LEN (1)));
 
       // If someone thinks of a more graceful way of doing this (or
       // faster for that matter :-)), please let me know!
 
       if (n > 1)
-        if (is_upper)
-          for (octave_idx_type j = 0; j < r_nc; j++)
-            for (octave_idx_type i = j+1; i < r_nr; i++)
-              tmp.xelem (i, j) = tmp.xelem (j, i);
-        else
-          for (octave_idx_type j = 0; j < r_nc; j++)
-            for (octave_idx_type i = j+1; i < r_nr; i++)
-              tmp.xelem (j, i) = tmp.xelem (i, j);
+        {
+          if (is_upper)
+            for (octave_idx_type j = 0; j < r_nc; j++)
+              for (octave_idx_type i = j+1; i < r_nr; i++)
+                tmp.xelem (i, j) = tmp.xelem (j, i);
+          else
+            for (octave_idx_type j = 0; j < r_nc; j++)
+              for (octave_idx_type i = j+1; i < r_nr; i++)
+                tmp.xelem (j, i) = tmp.xelem (i, j);
+        }
 
       retval = tmp;
     }
   else
     (*current_liboctave_error_handler) ("chol2inv requires square matrix");
 
   return retval;
 }
diff --git a/liboctave/numeric/floatCHOL.cc b/liboctave/numeric/floatCHOL.cc
--- a/liboctave/numeric/floatCHOL.cc
+++ b/liboctave/numeric/floatCHOL.cc
@@ -100,81 +100,65 @@ FloatCHOL::init (const FloatMatrix& a, b
 
   octave_idx_type n = a_nc;
   octave_idx_type info;
 
   is_upper = upper;
 
   chol_mat.clear (n, n);
   if (is_upper)
-    {
-      for (octave_idx_type j = 0; j < n; j++)
-        {
-          for (octave_idx_type i = 0; i <= j; i++)
-            chol_mat.xelem (i, j) = a(i, j);
-          for (octave_idx_type i = j+1; i < n; i++)
-            chol_mat.xelem (i, j) = 0.0f;
-        }
-    }
+    for (octave_idx_type j = 0; j < n; j++)
+      {
+        for (octave_idx_type i = 0; i <= j; i++)
+          chol_mat.xelem (i, j) = a(i, j);
+        for (octave_idx_type i = j+1; i < n; i++)
+          chol_mat.xelem (i, j) = 0.0f;
+      }
   else
-    {
-      for (octave_idx_type j = 0; j < n; j++)
-        {
-          for (octave_idx_type i = 0; i < j; i++)
-            chol_mat.xelem (i, j) = 0.0f;
-          for (octave_idx_type i = j; i < n; i++)
-            chol_mat.xelem (i, j) = a(i, j);
-        }
-    }
-
+    for (octave_idx_type j = 0; j < n; j++)
+      {
+        for (octave_idx_type i = 0; i < j; i++)
+          chol_mat.xelem (i, j) = 0.0f;
+        for (octave_idx_type i = j; i < n; i++)
+          chol_mat.xelem (i, j) = a(i, j);
+      }
   float *h = chol_mat.fortran_vec ();
 
   // Calculate the norm of the matrix, for later use.
   float anorm = 0;
   if (calc_cond)
     anorm = xnorm (a, 1);
 
   if (is_upper)
-    {
-      F77_XFCN (spotrf, SPOTRF, (F77_CONST_CHAR_ARG2 ("U", 1),
-                                 n, h, n, info
-                                 F77_CHAR_ARG_LEN (1)));
-    }
+    F77_XFCN (spotrf, SPOTRF, (F77_CONST_CHAR_ARG2 ("U", 1), n, h, n, info
+                               F77_CHAR_ARG_LEN (1)));
   else
-    {
-      F77_XFCN (spotrf, SPOTRF, (F77_CONST_CHAR_ARG2 ("L", 1),
-                                 n, h, n, info
-                                 F77_CHAR_ARG_LEN (1)));
-    }
+    F77_XFCN (spotrf, SPOTRF, (F77_CONST_CHAR_ARG2 ("L", 1), n, h, n, info
+                               F77_CHAR_ARG_LEN (1)));
 
   xrcond = 0.0;
   if (info > 0)
     chol_mat.resize (info - 1, info - 1);
   else if (calc_cond)
     {
       octave_idx_type spocon_info = 0;
 
       // Now calculate the condition number for non-singular matrix.
       Array<float> z (dim_vector (3*n, 1));
       float *pz = z.fortran_vec ();
       Array<octave_idx_type> iz (dim_vector (n, 1));
       octave_idx_type *piz = iz.fortran_vec ();
       if (is_upper)
-        {
-          F77_XFCN (spocon, SPOCON, (F77_CONST_CHAR_ARG2 ("U", 1), n, h,
-                                     n, anorm, xrcond, pz, piz, spocon_info
-                                     F77_CHAR_ARG_LEN (1)));
-        }
+        F77_XFCN (spocon, SPOCON, (F77_CONST_CHAR_ARG2 ("U", 1), n, h,
+                                   n, anorm, xrcond, pz, piz, spocon_info
+                                   F77_CHAR_ARG_LEN (1)));
       else
-        {
-          F77_XFCN (spocon, SPOCON, (F77_CONST_CHAR_ARG2 ("L", 1), n, h,
-                                     n, anorm, xrcond, pz, piz, spocon_info
-                                     F77_CHAR_ARG_LEN (1)));
-        }
-
+        F77_XFCN (spocon, SPOCON, (F77_CONST_CHAR_ARG2 ("L", 1), n, h,
+                                   n, anorm, xrcond, pz, piz, spocon_info
+                                   F77_CHAR_ARG_LEN (1)));
 
       if (spocon_info != 0)
         info = -1;
     }
 
   return info;
 }
 
@@ -192,45 +176,37 @@ chol2inv_internal (const FloatMatrix& r,
       octave_idx_type info = 0;
 
       FloatMatrix tmp = r;
       float *v = tmp.fortran_vec ();
 
       if (info == 0)
         {
           if (is_upper)
-            {
-              F77_XFCN (spotri, SPOTRI, (F77_CONST_CHAR_ARG2 ("U", 1), n,
-                                         v, n, info
-                                         F77_CHAR_ARG_LEN (1)));
-            }
+            F77_XFCN (spotri, SPOTRI, (F77_CONST_CHAR_ARG2 ("U", 1), n,
+                                       v, n, info
+                                       F77_CHAR_ARG_LEN (1)));
           else
-            {
-              F77_XFCN (spotri, SPOTRI, (F77_CONST_CHAR_ARG2 ("L", 1), n,
-                                         v, n, info
-                                         F77_CHAR_ARG_LEN (1)));
-            }
+            F77_XFCN (spotri, SPOTRI, (F77_CONST_CHAR_ARG2 ("L", 1), n,
+                                       v, n, info
+                                       F77_CHAR_ARG_LEN (1)));
 
           // If someone thinks of a more graceful way of doing this (or
           // faster for that matter :-)), please let me know!
 
           if (n > 1)
             {
               if (is_upper)
-                {
-                  for (octave_idx_type j = 0; j < r_nc; j++)
-                    for (octave_idx_type i = j+1; i < r_nr; i++)
-                      tmp.xelem (i, j) = tmp.xelem (j, i);
-                }
+                for (octave_idx_type j = 0; j < r_nc; j++)
+                  for (octave_idx_type i = j+1; i < r_nr; i++)
+                    tmp.xelem (i, j) = tmp.xelem (j, i);
               else
-                {
-                  for (octave_idx_type j = 0; j < r_nc; j++)
-                    for (octave_idx_type i = j+1; i < r_nr; i++)
-                      tmp.xelem (j, i) = tmp.xelem (i, j);
-                }
+                for (octave_idx_type j = 0; j < r_nc; j++)
+                  for (octave_idx_type i = j+1; i < r_nr; i++)
+                    tmp.xelem (j, i) = tmp.xelem (i, j);
             }
 
           retval = tmp;
         }
     }
   else
     (*current_liboctave_error_handler) ("chol2inv requires square matrix");
 
