# HG changeset patch
# User jwe
# Date 981734180 0
#      Fri Feb 09 15:56:20 2001 +0000
# Node ID 74c2fc84f0cfe6adc4399d2baf731b5a8e5373d4
# Parent  c1c532a0acb207fa58bc298cf3092fc5312e3ec3
[project @ 2001-02-09 15:56:19 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,26 @@
+2001-02-09  David Livings  <david.livings@asa.co.uk>
+
+	* statistics/tests/welch_test.m: Fix typo.
+
+	* statistics/distributions/chisquare_cdf.m:
+	Don't restrict inputs to be only positive integers.
+	* statistics/distributions/chisquare_inv.m: Likewise.
+	* statistics/distributions/chisquare_pdf.m: Likewise.
+	* statistics/distributions/chisquare_rnd.m: Likewise.
+	* statistics/distributions/f_cdf.m: Likewise.
+	* statistics/distributions/f_inv.m: Likewise.
+	* statistics/distributions/f_pdf.m: Likewise.
+	* statistics/distributions/f_rnd.m: Likewise.
+	* statistics/distributions/t_cdf.m: Likewise.
+	* statistics/distributions/t_inv.m: Likewise.
+	* statistics/distributions/t_pdf.m: Likewise.
+	* statistics/distributions/t_rnd.m: Likewise.
+
 2001-02-08  Paul Kienzle  <pkienzle@kienzle.powernet.co.uk>
 
 	* strings/dec2base.m: New file.
 	* strings/base2dec.m: New file.
 	* strings/strjust.m: New file.
 	* strings/dec2hex.m: Replace with version that just calls 2dec2base.
 	* strings/dec2bin.m: Likewise.
 	* strings/hex2dec.m: Replace with version that just calls base2dec.
diff --git a/scripts/statistics/distributions/chisquare_cdf.m b/scripts/statistics/distributions/chisquare_cdf.m
--- a/scripts/statistics/distributions/chisquare_cdf.m
+++ b/scripts/statistics/distributions/chisquare_cdf.m
@@ -32,19 +32,9 @@ function cdf = chisquare_cdf (x, n)
 
   [retval, x, n] = common_size (x, n);
   if (retval > 0)
     error ("chisquare_cdf: x and n must be of common size or scalar");
   endif
 
   cdf = gamma_cdf (x, n / 2, 1 / 2);
 
-  ## should we really only allow for positive integer n?
-  k = find (n != round (n));
-  if (any (k))
-    warning ("chisquare_cdf: n should be positive integer");
-    [r, c] = size (x);
-    cdf = reshape (cdf, 1, r * c);
-    cdf(k) = NaN * ones (1, length (k));
-    cdf = reshape (cdf, r, c);
-  endif
-
 endfunction
diff --git a/scripts/statistics/distributions/chisquare_inv.m b/scripts/statistics/distributions/chisquare_inv.m
--- a/scripts/statistics/distributions/chisquare_inv.m
+++ b/scripts/statistics/distributions/chisquare_inv.m
@@ -32,19 +32,9 @@ function inv = chisquare_inv (x, n)
 
   [retval, x, n] = common_size (x, n);
   if (retval > 0)
     error ("chisquare_inv: x and n must be of common size or scalar");
   endif
 
   inv = gamma_inv (x, n / 2, 1 / 2);
 
-  ## Allow only for (positive) integer n.
-  k = find (n != round (n));
-  if (any (k))
-    warning ("chisquare_inv: n should be positive integer");
-    [r, c] = size (x);
-    inv = reshape (inv, 1, r * c);
-    inv(k) = NaN * ones (1, length (k));
-    inv = reshape (inv, r, c);
-  endif
-
 endfunction
diff --git a/scripts/statistics/distributions/chisquare_pdf.m b/scripts/statistics/distributions/chisquare_pdf.m
--- a/scripts/statistics/distributions/chisquare_pdf.m
+++ b/scripts/statistics/distributions/chisquare_pdf.m
@@ -32,19 +32,9 @@ function pdf = chisquare_pdf (x, n)
 
   [retval, x, n] = common_size (x, n);
   if (retval > 0)
     error ("chisquare_pdf: x and n must be of common size or scalar");
   endif
 
   pdf = gamma_pdf (x, n / 2, 1 / 2);
 
-  ## should we really only allow for positive integer n?
-  k = find (n != round (n));
-  if (any (k))
-    warning ("chisquare_pdf: n should be positive integer");
-    [r, c] = size (x);
-    pdf = reshape (pdf, 1, r * c);
-    pdf(k) = NaN * ones (1, length (k));
-    pdf = reshape (pdf, r, c);
-  endif
-
 endfunction
diff --git a/scripts/statistics/distributions/chisquare_rnd.m b/scripts/statistics/distributions/chisquare_rnd.m
--- a/scripts/statistics/distributions/chisquare_rnd.m
+++ b/scripts/statistics/distributions/chisquare_rnd.m
@@ -44,21 +44,21 @@ function rnd = chisquare_rnd (n, r, c)
     usage ("chisquare_rnd (n, r, c)");
   endif
 
   [r, c] = size (n);
   s = r * c;
   n = reshape (n, 1, s);
   rnd = zeros (1, s);
 
-  k = find (!(n > 0) | !(n < Inf) | !(n == round (n)));
+  k = find (!(n > 0) | !(n < Inf));
   if (any (k))
     rnd(k) = NaN * ones (1, length (k));
   endif
 
-  k = find ((n > 0) & (n < Inf) & (n == round (n)));
+  k = find ((n > 0) & (n < Inf));
   if (any (k))
     rnd(k) = chisquare_inv (rand (1, length (k)), n(k));
   endif
 
   rnd = reshape (rnd, r, c);
 
 endfunction
diff --git a/scripts/statistics/distributions/f_cdf.m b/scripts/statistics/distributions/f_cdf.m
--- a/scripts/statistics/distributions/f_cdf.m
+++ b/scripts/statistics/distributions/f_cdf.m
@@ -52,18 +52,11 @@ function cdf = f_cdf (x, m, n)
     cdf(k) = ones (1, length (k));
   endif
 
   k = find ((x > 0) & (x < Inf) & (m > 0) & (n > 0));
   if (any (k))
     cdf(k) = 1 - betai (n(k) / 2, m(k) / 2, 1 ./ (1 + m(k) .* x(k) ./ n(k)));
   endif
 
-  ## should we really only allow for positive integer m, n?
-  k = find ((m != round (m)) | (n != round (n)));
-  if (any (k))
-    warning ("f_cdf: m and n should be positive integers");
-    cdf(k) = NaN * ones (1, length (k));
-  endif
-
   cdf = reshape (cdf, r, c);
 
 endfunction
diff --git a/scripts/statistics/distributions/f_inv.m b/scripts/statistics/distributions/f_inv.m
--- a/scripts/statistics/distributions/f_inv.m
+++ b/scripts/statistics/distributions/f_inv.m
@@ -53,18 +53,11 @@ function inv = f_inv (x, m, n)
   endif
 
   k = find ((x > 0) & (x < 1) & (m > 0) & (n > 0));
   if (any (k))
     inv(k) = ((1 ./ beta_inv (1 - x(k), n(k) / 2, m(k) / 2) - 1)
 	      .* n(k) ./ m(k));
   endif
 
-  ## should we really only allow for positive integer m, n?
-  k = find ((m != round (m)) | (n != round (n)));
-  if (any (k))
-    warning ("f_inv: m and n should be positive integers");
-    inv(k) = NaN * ones (1, length (k));
-  endif
-
   inv = reshape (inv, r, c);
 
 endfunction
\ No newline at end of file
diff --git a/scripts/statistics/distributions/f_pdf.m b/scripts/statistics/distributions/f_pdf.m
--- a/scripts/statistics/distributions/f_pdf.m
+++ b/scripts/statistics/distributions/f_pdf.m
@@ -50,18 +50,11 @@ function pdf = f_pdf (x, m, n)
   k = find ((x > 0) & (x < Inf) & (m > 0) & (n > 0));
   if (any (k))
     tmp = m(k) .* x(k) ./ n(k);
     pdf(k) = (exp ((m(k) / 2 - 1) .* log (tmp)
 		   - ((m(k) + n(k)) / 2) .* log (1 + tmp))
 	      .* (m(k) ./ n(k)) ./ beta (m(k) / 2, n(k) / 2));
   endif
 
-  ## should we really only allow for positive integer m, n?
-  k = find ((m != round (m)) | (n != round (n)));
-  if (any (k))
-    warning ("f_pdf: m and n should be positive integers");
-    pdf(k) = NaN * ones (1, length (k));
-  endif
-
   pdf = reshape (pdf, r, c);
 
 endfunction
diff --git a/scripts/statistics/distributions/f_rnd.m b/scripts/statistics/distributions/f_rnd.m
--- a/scripts/statistics/distributions/f_rnd.m
+++ b/scripts/statistics/distributions/f_rnd.m
@@ -50,23 +50,23 @@ function rnd = f_rnd (m, n, r, c)
   endif
 
   [r, c] = size (m);
   s = r * c;
   m = reshape (m, 1, s);
   n = reshape (n, 1, s);
   rnd = zeros (1, s);
 
-  k = find (!(m > 0) | !(m < Inf) | !(m == round (m)) |
-            !(n > 0) | !(n < Inf) | !(n == round (n)));
+  k = find (!(m > 0) | !(m < Inf) |
+            !(n > 0) | !(n < Inf));
   if (any (k))
     rnd(k) = NaN * ones (1, length (k));
   endif
 
-  k = find ((m > 0) & (m < Inf) & (m == round (m)) &
-            (n > 0) & (n < Inf) & (n == round (n)));
+  k = find ((m > 0) & (m < Inf) &
+            (n > 0) & (n < Inf));
   if (any (k))
     rnd(k) = f_inv (rand (1, length (k)), m(k), n(k));
   endif
 
   rnd = reshape (rnd, r, c);
 
 endfunction
\ No newline at end of file
diff --git a/scripts/statistics/distributions/t_cdf.m b/scripts/statistics/distributions/t_cdf.m
--- a/scripts/statistics/distributions/t_cdf.m
+++ b/scripts/statistics/distributions/t_cdf.m
@@ -55,18 +55,11 @@ function cdf = t_cdf (x, n)
   if (any (k))
     cdf(k) = betai (n(k) / 2, 1 / 2, 1 ./ (1 + x(k) .^ 2 ./ n(k))) / 2;
     ind = find (x(k) > 0);
     if (any (ind))
       cdf(k(ind)) = 1 - cdf(k(ind));
     endif
   endif
 
-  ## should we really only allow for positive integer n?
-  k = find (n != round (n));
-  if (any (k))
-    warning ("t_cdf: n should be positive integer");
-    cdf(k) = NaN * ones (1, length (k));
-  endif
-
   cdf = reshape (cdf, r, c);
 
 endfunction
diff --git a/scripts/statistics/distributions/t_inv.m b/scripts/statistics/distributions/t_inv.m
--- a/scripts/statistics/distributions/t_inv.m
+++ b/scripts/statistics/distributions/t_inv.m
@@ -68,18 +68,11 @@ function inv = t_inv (x, n)
   endif
 
   ## For large n, use the quantiles of the standard normal
   k = find ((x > 0) & (x < 1) & (n >= 10000));
   if (any (k))
     inv(k) = stdnormal_inv (x(k));
   endif
 
-  ## should we really only allow for positive integer n?
-  k = find (n != round (n));
-  if (any (k))
-    warning ("t_inv: n should be positive integer");
-    inv(k) = NaN * ones (1, length (k));
-  endif
-
   inv = reshape (inv, r, c);
 
 endfunction
\ No newline at end of file
diff --git a/scripts/statistics/distributions/t_pdf.m b/scripts/statistics/distributions/t_pdf.m
--- a/scripts/statistics/distributions/t_pdf.m
+++ b/scripts/statistics/distributions/t_pdf.m
@@ -47,18 +47,11 @@ function pdf = t_pdf (x, n)
   endif
 
   k = find (!isinf (x) & !isnan (x) & (n > 0) & (n < Inf));
   if (any (k))
     pdf(k) = (exp (- (n(k) + 1) .* log (1 + x(k) .^ 2 ./ n(k))/2)
 	      ./ (sqrt (n(k)) .* beta (n(k)/2, 1/2)));
   endif
 
-  ## should we really only allow for positive integer n?
-  k = find (n != round (n));
-  if (any (k))
-    warning ("t_pdf: n should be positive integer");
-    pdf(k) = NaN * ones (1, length (k));
-  endif
-
   pdf = reshape (pdf, r, c);
 
 endfunction
diff --git a/scripts/statistics/distributions/t_rnd.m b/scripts/statistics/distributions/t_rnd.m
--- a/scripts/statistics/distributions/t_rnd.m
+++ b/scripts/statistics/distributions/t_rnd.m
@@ -44,21 +44,21 @@ function rnd = t_rnd (n, r, c)
     usage ("t_rnd (n, r, c)");
   endif
 
   [r, c] = size (n);
   s = r * c;
   n = reshape (n, 1, s);
   rnd = zeros (1, s);
 
-  k = find (!(n > 0) | !(n < Inf) | !(n == round (n)));
+  k = find (!(n > 0) | !(n < Inf));
   if (any (k))
     rnd(k) = NaN * ones (1, length (k));
   endif
 
-  k = find ((n > 0) & (n < Inf) & (n == round (n)));
+  k = find ((n > 0) & (n < Inf));
   if (any (k))
     rnd(k) = t_inv (rand (1, length (k)), n(k));
   endif
 
   rnd = reshape (rnd, r, c);
 
 endfunction
diff --git a/scripts/statistics/tests/welch_test.m b/scripts/statistics/tests/welch_test.m
--- a/scripts/statistics/tests/welch_test.m
+++ b/scripts/statistics/tests/welch_test.m
@@ -48,17 +48,17 @@ function [pval, t, df] = welch_test (x, 
     error ("welch_test: both x and y must be vectors");
   endif
 
   n_x  = length (x);
   n_y  = length (y);
   mu_x = sum (x) / n_x;
   mu_y = sum (y) / n_y;
   v_x  = sumsq (x - mu_x) / (n_x * (n_x - 1));
-  v_y  = sumsq (x - mu_y) / (n_y * (n_y - 1));
+  v_y  = sumsq (y - mu_y) / (n_y * (n_y - 1));
   c    = v_x / (v_x + v_y);
   df   = 1 / (c^2 / (n_x - 1) + (1 - c)^2 / (n_y - 1));
   t    = (mu_x - mu_y) / sqrt (v_x + v_y);
   cdf  = t_cdf (t, df);
 
   if (nargin == 2)
     alt  = "!=";
   endif
