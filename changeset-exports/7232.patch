# HG changeset patch
# User jwe
# Date 1196449774 0
#      Fri Nov 30 19:09:34 2007 +0000
# Node ID 41680961da9be260b63cc1b66249b59de679ec44
# Parent  2eb392d058bb0c2702342c7c51a7d6e0eb3bf4d9
[project @ 2007-11-30 19:09:34 by jwe]

diff --git a/src/DLD-FUNCTIONS/sort.cc b/src/DLD-FUNCTIONS/sort.cc
--- a/src/DLD-FUNCTIONS/sort.cc
+++ b/src/DLD-FUNCTIONS/sort.cc
@@ -62,31 +62,31 @@ template <class T>
 bool 
 descending_compare (T a, T b)
 {
   return (a > b);
 }
 
 template <class T>
 bool 
-ascending_compare (const vec_index<T> *a, const vec_index<T> *b)
+ascending_compare (vec_index<T> *a, vec_index<T> *b)
 {
   return (a->vec < b->vec);
 }
 
 template <class T>
 bool 
-descending_compare (const vec_index<T> *a, const vec_index<T> *b)
+descending_compare (vec_index<T> *a, vec_index<T> *b)
 {
   return (a->vec > b->vec);
 }
 
 template <class T>
 static octave_value
-mx_sort (ArrayN<T>& m, int dim, sortmode mode = UNDEFINED)
+mx_sort (ArrayN<T> &m, int dim, sortmode mode = UNDEFINED)
 {
   octave_value retval;
 
   dim_vector dv = m.dims ();
 
   if (m.length () < 1)
     return ArrayN<T> (dv);
 
@@ -138,17 +138,17 @@ mx_sort (ArrayN<T>& m, int dim, sortmode
 
   retval = m;
 
   return retval;
 }
 
 template <class T>
 static octave_value_list
-mx_sort_indexed (ArrayN<T>& m, int dim, sortmode mode = UNDEFINED)
+mx_sort_indexed (ArrayN<T> &m, int dim, sortmode mode = UNDEFINED)
 {
   octave_value_list retval;
 
   dim_vector dv = m.dims ();
 
   if (m.length () < 1)
     {
       retval(1) = NDArray (dv);
@@ -232,17 +232,17 @@ mx_sort_indexed (ArrayN<T>& m, int dim, 
   retval(1) = idx;
   retval(0) = octave_value (m);
 
   return retval;
 }
 
 template <class T>
 static octave_value
-mx_sort_sparse (Sparse<T>& m, int dim, sortmode mode = UNDEFINED)
+mx_sort_sparse (Sparse<T> &m, int dim, sortmode mode = UNDEFINED)
 {
   octave_value retval;
 
   octave_idx_type nr = m.rows ();
   octave_idx_type nc = m.columns ();
 
   if (m.length () < 1)
     return Sparse<T> (nr, nc);
@@ -297,17 +297,17 @@ mx_sort_sparse (Sparse<T>& m, int dim, s
 
   retval = m;
 
   return retval;
 }
 
 template <class T>
 static octave_value_list
-mx_sort_sparse_indexed (Sparse<T>& m, int dim, sortmode mode = UNDEFINED)
+mx_sort_sparse_indexed (Sparse<T> &m, int dim, sortmode mode = UNDEFINED)
 {
   octave_value_list retval;
 
   octave_idx_type nr = m.rows ();
   octave_idx_type nc = m.columns ();
 
   if (m.length () < 1)
     {
@@ -437,49 +437,53 @@ IFloatFlip (uint64_t f)
 {
   uint64_t mask = ((f >> 63) - 1) | 0x8000000000000000ULL;
 
   return f ^ mask;
 }
 
 template <>
 bool
-ascending_compare (uint64_t a, uint64_t b)
+ascending_compare (uint64_t a, 
+		   uint64_t b)
 {
   return (a < b);
 }
 
 template <>
 bool
-ascending_compare (const vec_index<uint64_t> *a, const vec_index<uint64_t> *b)
+ascending_compare (vec_index<uint64_t> *a, 
+		   vec_index<uint64_t> *b)
 {
   return (a->vec < b->vec);
 }
 
 template <>
 bool
-descending_compare (uint64_t a, uint64_t b)
+descending_compare (uint64_t a, 
+		    uint64_t b)
 {
   return (a > b);
 }
 
 template <>
 bool
-descending_compare (const vec_index<uint64_t> *a, const vec_index<uint64_t> *b)
+descending_compare (vec_index<uint64_t> *a, 
+		    vec_index<uint64_t> *b)
 {
   return (a->vec > b->vec);
 }
 
 template class octave_sort<uint64_t>;
 template class vec_index<uint64_t>;
 template class octave_sort<vec_index<uint64_t> *>;
 
 template <>
 octave_value
-mx_sort (ArrayN<double>& m, int dim, sortmode mode)
+mx_sort (ArrayN<double> &m, int dim, sortmode mode)
 {
   octave_value retval;
 
   dim_vector dv = m.dims ();
 
   if (m.length () < 1)
     return ArrayN<double> (dv);
 
@@ -611,17 +615,17 @@ mx_sort (ArrayN<double>& m, int dim, sor
   retval = m;
 
   return retval;
 }
 
 // Should other overloaded functions have their static keywords removed?
 template <>
 octave_value_list
-mx_sort_indexed (ArrayN<double>& m, int dim, sortmode mode)
+mx_sort_indexed (ArrayN<double> &m, int dim, sortmode mode)
 {
   octave_value_list retval;
 
   dim_vector dv = m.dims ();
 
   if (m.length () < 1)
     {
       retval(1) = NDArray (dv);
@@ -767,104 +771,104 @@ descending_compare (vec_index<double> *a
 }
 
 template class octave_sort<double>;
 template class vec_index<double>;
 template class octave_sort<vec_index<double> *>;
 
 #if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 static octave_value_list
-mx_sort (ArrayN<double>& m, int dim, sortmode mode);
+mx_sort (ArrayN<double> &m, int dim, sortmode mode);
 
 static octave_value_list
-mx_sort_indexed (ArrayN<double>& m, int dim, sortmode mode);
+mx_sort_indexed (ArrayN<double> &m, int dim, sortmode mode);
 #endif
 #endif
 
 #if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 static octave_value_list
-mx_sort_sparse (Sparse<double>& m, int dim, sortmode mode);
+mx_sort_sparse (Sparse<double> &m, int dim, sortmode mode);
 
 static octave_value_list
-mx_sort_sparse_indexed (Sparse<double>& m, int dim, sortmode mode);
+mx_sort_sparse_indexed (Sparse<double> &m, int dim, sortmode mode);
 #endif
 
 // std::abs(Inf) returns NaN!!
 static inline double
 xabs (const Complex& x)
 {
   return (xisinf (x.real ()) || xisinf (x.imag ())) ? octave_Inf : abs (x);
 }
 
 template <>
 bool
-ascending_compare (const Complex& a, const Complex& b)
+ascending_compare (Complex a, Complex b)
 {
-  return (xisnan (b) || (xabs (a) < xabs (b))
-	  || ((xabs (a) == xabs (b)) && (arg (a) < arg (b))));
+  return (xisnan (b) || (xabs (a) < xabs (b)) || ((xabs (a) == xabs (b))
+	      && (arg (a) < arg (b))));
 }
 
-static inline bool
-operator < (const Complex& a, const Complex& b)
+bool
+operator < (const Complex a, const Complex b)
 {
-  return (xisnan (b) || (xabs (a) < xabs (b))
-	  || ((xabs (a) == xabs (b)) && (arg (a) < arg (b))));
+  return (xisnan (b) || (xabs (a) < xabs (b)) || ((xabs (a) == xabs (b))
+	      && (arg (a) < arg (b))));
 }
 
 template <>
 bool
-descending_compare (const Complex& a, const Complex& b)
+descending_compare (Complex a, Complex b)
 {
-  return (xisnan (a) || (xabs (a) > xabs (b))
-	  || ((xabs (a) == xabs (b)) && (arg (a) > arg (b))));
+  return (xisnan (a) || (xabs (a) > xabs (b)) || ((xabs (a) == xabs (b))
+	      && (arg (a) > arg (b))));
 }
 
 bool
-operator > (const Complex& a, const Complex& b)
+operator > (const Complex a, const Complex b)
 {
-  return (xisnan (a) || (xabs (a) > xabs (b))
-	  || ((xabs (a) == xabs (b)) && (arg (a) > arg (b))));
+  return (xisnan (a) || (xabs (a) > xabs (b)) || ((xabs (a) == xabs (b))
+	      && (arg (a) > arg (b))));
 }
 
 template <>
 bool
-ascending_compare (const vec_index<Complex> *a, const vec_index<Complex> *b)
+ascending_compare (vec_index<Complex> *a, vec_index<Complex> *b)
 {
   return (xisnan (b->vec)
 	  || (xabs (a->vec) < xabs (b->vec))
 	  || ((xabs (a->vec) == xabs (b->vec))
 	      && (arg (a->vec) < arg (b->vec))));
 }
 
 template <>
 bool
-descending_compare (const vec_index<Complex> *a, const vec_index<Complex> *b)
+descending_compare (vec_index<Complex> *a, vec_index<Complex> *b)
 {
   return (xisnan (a->vec)
 	  || (xabs (a->vec) > xabs (b->vec))
 	  || ((xabs (a->vec) == xabs (b->vec))
 	      && (arg (a->vec) > arg (b->vec))));
 }
 
 template class octave_sort<Complex>;
 template class vec_index<Complex>;
 template class octave_sort<vec_index<Complex> *>;
 
 #if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 static octave_value_list
-mx_sort (ArrayN<Complex>& m, int dim, sortmode mode);
+mx_sort (ArrayN<Complex> &m, int dim, sortmode mode);
 
 static octave_value_list
-mx_sort_indexed (ArrayN<Complex>& m, int dim, sortmode mode);
+mx_sort_indexed (ArrayN<Complex> &m, int dim, sortmode mode);
 
 static octave_value_list
-mx_sort_sparse (Sparse<Complex>& m, int dim, sortmode mode);
+mx_sort_sparse (Sparse<Complex> &m, int dim, sortmode mode);
 
 static octave_value_list
-mx_sort_sparse_indexed (Sparse<Complex>& m, int dim, sortmode mode);
+mx_sort_sparse_indexed (Sparse<Complex> &m, int dim, sortmode mode);
 #endif
 
 template class octave_sort<char>;
 template class vec_index<char>;
 template class octave_sort<vec_index<char> *>;
 
 #if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 bool
@@ -875,20 +879,20 @@ ascending_compare (vec_index<char> *a, v
 
 bool
 descending_compare (char a, char b);
 
 bool
 descending_compare (vec_index<char> *a, vec_index<char> *b);
 
 static octave_value_list
-mx_sort (ArrayN<char>& m, int dim, sortmode mode);
+mx_sort (ArrayN<char> &m, int dim, sortmode mode);
 
 static octave_value_list
-mx_sort_indexed (ArrayN<char>& m, int dim, sortmode mode);
+mx_sort_indexed (ArrayN<char> &m, int dim, sortmode mode);
 #endif
 
 template class octave_sort<octave_int8>;
 template class vec_index<octave_int8>;
 template class octave_sort<vec_index<octave_int8> *>;
 
 #if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 bool
@@ -899,20 +903,20 @@ ascending_compare (vec_index<octave_int8
 
 bool
 descending_compare (octave_int8 a, octave_int8 b);
 
 bool
 descending_compare (vec_index<octave_int8> *a, vec_index<octave_int8> *b);
 
 static octave_value_list
-mx_sort (ArrayN<octave_int8>& m, int dim, sortmode mode);
+mx_sort (ArrayN<octave_int8> &m, int dim, sortmode mode);
 
 static octave_value_list
-mx_sort_indexed (ArrayN<octave_int8>& m, int dim, sortmode mode);
+mx_sort_indexed (ArrayN<octave_int8> &m, int dim, sortmode mode);
 #endif
 
 template class octave_sort<octave_uint8>;
 template class vec_index<octave_uint8>;
 template class octave_sort<vec_index<octave_uint8> *>;
 
 #if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 bool
@@ -923,20 +927,20 @@ ascending_compare (vec_index<octave_uint
 
 bool
 descending_compare (octave_uint8 a, octave_uint8 b);
 
 bool
 descending_compare (vec_index<octave_uint8> *a, vec_index<octave_uint8> *b);
 
 static octave_value_list
-mx_sort (ArrayN<octave_uint8>& m, int dim, sortmode mode);
+mx_sort (ArrayN<octave_uint8> &m, int dim, sortmode mode);
 
 static octave_value_list
-mx_sort_indexed (ArrayN<octave_uint8>& m, int dim, sortmode mode);
+mx_sort_indexed (ArrayN<octave_uint8> &m, int dim, sortmode mode);
 #endif
 
 template class octave_sort<octave_int16>;
 template class vec_index<octave_int16>;
 template class octave_sort<vec_index<octave_int16> *>;
 
 #if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 bool
@@ -947,20 +951,20 @@ ascending_compare (vec_index<octave_int1
 
 bool
 descending_compare (octave_int16 a, octave_int16 b);
 
 bool
 descending_compare (vec_index<octave_int16> *a, vec_index<octave_int16> *b);
 
 static octave_value_list
-mx_sort (ArrayN<octave_int16>& m, int dim, sortmode mode);
+mx_sort (ArrayN<octave_int16> &m, int dim, sortmode mode);
 
 static octave_value_list
-mx_sort_indexed (ArrayN<octave_int16>& m, int dim, sortmode mode);
+mx_sort_indexed (ArrayN<octave_int16> &m, int dim, sortmode mode);
 #endif
 
 template class octave_sort<octave_uint16>;
 template class vec_index<octave_uint16>;
 template class octave_sort<vec_index<octave_uint16> *>;
 
 #if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 bool
@@ -971,20 +975,20 @@ ascending_compare (vec_index<octave_uint
 
 bool
 descending_compare (octave_uint16 a, octave_uint16 b);
 
 bool
 descending_compare (vec_index<octave_uint16> *a, vec_index<octave_uint16> *b);
 
 static octave_value_list
-mx_sort (ArrayN<octave_uint16>& m, int dim, sortmode mode);
+mx_sort (ArrayN<octave_uint16> &m, int dim, sortmode mode);
 
 static octave_value_list
-mx_sort_indexed (ArrayN<octave_uint16>& m, int dim, sortmode mode);
+mx_sort_indexed (ArrayN<octave_uint16> &m, int dim, sortmode mode);
 #endif
 
 template class octave_sort<octave_int32>;
 template class vec_index<octave_int32>;
 template class octave_sort<vec_index<octave_int32> *>;
 
 #if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 bool
@@ -995,20 +999,20 @@ ascending_compare (vec_index<octave_int3
 
 bool
 descending_compare (octave_int32 a, octave_int32 b);
 
 bool
 descending_compare (vec_index<octave_int32> *a, vec_index<octave_int32> *b);
 
 static octave_value_list
-mx_sort (ArrayN<octave_int32>& m, int dim, sortmode mode);
+mx_sort (ArrayN<octave_int32> &m, int dim, sortmode mode);
 
 static octave_value_list
-mx_sort_indexed (ArrayN<octave_int32>& m, int dim, sortmode mode);
+mx_sort_indexed (ArrayN<octave_int32> &m, int dim, sortmode mode);
 #endif
 
 template class octave_sort<octave_uint32>;
 template class vec_index<octave_uint32>;
 template class octave_sort<vec_index<octave_uint32> *>;
 
 #if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 bool
@@ -1019,20 +1023,20 @@ ascending_compare (vec_index<octave_uint
 
 bool
 descending_compare (octave_uint32 a, octave_uint32 b);
 
 bool
 descending_compare (vec_index<octave_uint32> *a, vec_index<octave_uint32> *b);
 
 static octave_value_list
-mx_sort (ArrayN<octave_uint32>& m, int dim, sortmode mode);
+mx_sort (ArrayN<octave_uint32> &m, int dim, sortmode mode);
 
 static octave_value_list
-mx_sort_indexed (ArrayN<octave_uint32>& m, int dim, sortmode mode);
+mx_sort_indexed (ArrayN<octave_uint32> &m, int dim, sortmode mode);
 #endif
 
 template class octave_sort<octave_int64>;
 template class vec_index<octave_int64>;
 template class octave_sort<vec_index<octave_int64> *>;
 
 #if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 bool
@@ -1043,20 +1047,20 @@ ascending_compare (vec_index<octave_int6
 
 bool
 descending_compare (octave_int64 a, octave_int64 b);
 
 bool
 descending_compare (vec_index<octave_int64> *a, vec_index<octave_int64> *b);
 
 static octave_value_list
-mx_sort (ArrayN<octave_int64>& m, int dim, sortmode mode);
+mx_sort (ArrayN<octave_int64> &m, int dim, sortmode mode);
 
 static octave_value_list
-mx_sort_indexed (ArrayN<octave_int64>& m, int dim, sortmode mode);
+mx_sort_indexed (ArrayN<octave_int64> &m, int dim, sortmode mode);
 #endif
 
 template class octave_sort<octave_uint64>;
 template class vec_index<octave_uint64>;
 template class octave_sort<vec_index<octave_uint64> *>;
 
 #if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 bool
@@ -1067,20 +1071,20 @@ ascending_compare (vec_index<octave_uint
 
 bool
 descending_compare (octave_uint64 a, octave_uint64 b);
 
 bool
 descending_compare (vec_index<octave_uint64> *a, vec_index<octave_uint64> *b);
 
 static octave_value_list
-mx_sort (ArrayN<octave_uint64>& m, int dim, sortmode mode);
+mx_sort (ArrayN<octave_uint64> &m, int dim, sortmode mode);
 
 static octave_value_list
-mx_sort_indexed (ArrayN<octave_uint64>& m, int dim, sortmode mode);
+mx_sort_indexed (ArrayN<octave_uint64> &m, int dim, sortmode mode);
 #endif
 
 template <>
 bool
 ascending_compare (vec_index<octave_value> *a, vec_index<octave_value> *b)
 {
   return (a->vec.string_value () < b->vec.string_value ());
 }
@@ -1092,17 +1096,17 @@ descending_compare (vec_index<octave_val
   return (a->vec.string_value () > b->vec.string_value ());
 }
 
 template class vec_index<octave_value>;
 template class octave_sort<vec_index<octave_value> *>;
 
 #if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 static octave_value_list
-mx_sort_indexed (ArrayN<octave_value>& m, int dim, sortmode mode);
+mx_sort_indexed (ArrayN<octave_value> &m, int dim, sortmode mode);
 #endif
 
 DEFUN_DLD (sort, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{s}, @var{i}] =} sort (@var{x})\n\
 @deftypefnx {Loadable Function} {[@var{s}, @var{i}] =} sort (@var{x}, @var{dim})\n\
 @deftypefnx {Loadable Function} {[@var{s}, @var{i}] =} sort (@var{x}, @var{mode})\n\
 @deftypefnx {Loadable Function} {[@var{s}, @var{i}] =} sort (@var{x}, @var{dim}, @var{mode})\n\
