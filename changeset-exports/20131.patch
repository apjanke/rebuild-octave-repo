# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1429982282 14400
#      Sat Apr 25 13:18:02 2015 -0400
# Node ID 0d56160e346d5d1fe7cac15ce6feed19655a3106
# Parent  0aed244dbdb33bb5f99250e7c88c46eee951051d
make printf of lazy-index object work again (bug #44864)

* ov-lazy-idx.h, ov-lazy-idx.cc
(octave_lazy_index::fast_elem_extract): New function.

diff --git a/libinterp/octave-value/ov-lazy-idx.cc b/libinterp/octave-value/ov-lazy-idx.cc
--- a/libinterp/octave-value/ov-lazy-idx.cc
+++ b/libinterp/octave-value/ov-lazy-idx.cc
@@ -65,16 +65,22 @@ octave_lazy_index::try_narrowing_convers
     default:
       break;
     }
 
   return retval;
 }
 
 octave_value
+octave_lazy_index::fast_elem_extract (octave_idx_type n) const
+{
+  return double (index.checkelem (n) + 1);
+}
+
+octave_value
 octave_lazy_index::reshape (const dim_vector& new_dims) const
 {
   return idx_vector (index.as_array ().reshape (new_dims),
                      index.extent (0));
 }
 
 octave_value
 octave_lazy_index::permute (const Array<int>& vec, bool inv) const
diff --git a/libinterp/octave-value/ov-lazy-idx.h b/libinterp/octave-value/ov-lazy-idx.h
--- a/libinterp/octave-value/ov-lazy-idx.h
+++ b/libinterp/octave-value/ov-lazy-idx.h
@@ -48,16 +48,18 @@ public:
   octave_base_value *clone (void) const
   { return new octave_lazy_index (*this); }
   octave_base_value *empty_clone (void) const { return new octave_matrix (); }
 
   type_conv_info numeric_conversion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
+  octave_value fast_elem_extract (octave_idx_type n) const;
+
   size_t byte_size (void) const { return numel () * sizeof (octave_idx_type); }
 
   octave_value squeeze (void) const;
 
   octave_value full_value (void) const { return make_value (); }
 
   idx_vector index_vector (bool /* require_integers */ = false) const { return index; }
 
