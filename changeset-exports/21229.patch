# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1454970629 18000
#      Mon Feb 08 17:30:29 2016 -0500
# Node ID a83e7a384ee0b9c8cbd8313d798c8e4751016a8a
# Parent  77a622392714aefdff6bc3cffe1ab5d0c43ba88a
create and install a subset of config.h in octave-config.h

* mk-octave-config-h.sh: New file.
* Makefile.am (EXTRA_DIST): Add mk-octave-config.h.sh to the list.
(octinclude_HEADERS): Add octave-config.h to the list.
(octave-config.h): New rule.
* common.mk (do_subst_config_vals, do_subst_cross_config_vals):
Don't substitute unused ENABLE options.
* configure.ac: Note the reason for using oct-conf-post.in.h.
Add OCTAVE_ prefix to ENABLE_BOUNDS_CHECK ENABLE_ATOMIC_REFCOUNT,
ENABLE_64, ENABLE_OPENMP, and ENABLE_FLOAT_TRUNCATE in calls to
AC_DEFINE.  Change all uses.
* oct-conf-post.in.h: Define HAVE_OCTAVE_DEPRECATED_ATTR instead of
HAVE_ATTR_DEPRECATED.  Likewise for HAVE_ATTR_NORETURN and
HAVE_ATTR_UNUSED.  Change all uses.

diff --git a/Makefile.am b/Makefile.am
--- a/Makefile.am
+++ b/Makefile.am
@@ -42,16 +42,17 @@ BUILT_DISTFILES += \
 EXTRA_DIST += \
   CITATION \
   COPYING \
   INSTALL \
   NEWS \
   README \
   build-aux/OctJavaQry.class \
   build-aux/find-files-with-tests.sh \
+  build-aux/mk-octave-config-h.sh \
   build-aux/mk-opts.pl \
   build-aux/move-if-change \
   build-aux/stl_algo.h-fixed \
   run-octave.in \
   $(BUILT_DISTFILES)
 
 DIRSTAMP_FILES =
 
@@ -86,16 +87,17 @@ GEN_FCN_FILES =
 PKG_ADD_FILES =
 SCRIPTS_IMAGES =
 JAR_FILES =
 DOCSTRING_FILES =
 
 bin_PROGRAMS =
 archlib_PROGRAMS =
 noinst_HEADERS =
+nodist_noinst_HEADERS =
 OCTAVE_VERSION_LINKS =
 OCTAVE_CROSS_TOOLS =
 OCTAVE_INTERPRETER_TARGETS =
 
 octlib_LTLIBRARIES =
 noinst_LTLIBRARIES =
 
 octinclude_HEADERS =
@@ -164,32 +166,36 @@ DISTCLEANFILES += \
   $(DIRSTAMP_FILES)
 
 MAINTAINERCLEANFILES += \
   ChangeLog \
   $(BUILT_DISTFILES)
 
 CONFIG_FILES = @ac_config_headers@ @ac_config_files@
 
-octinclude_HEADERS += oct-conf-post.h
+octinclude_HEADERS += octave-config.h oct-conf-post.h
 nodist_octinclude_HEADERS += config.h
 
 all-local: $(ALL_LOCAL_TARGETS) $(noinst_SCRIPTS) $(DIST_INFO_FILES) .gdbinit $(DOC_TARGETS)
 	@echo ""
 	@echo "Octave successfully built.  Now choose from the following:"
 	@echo ""
 	@echo "   ./run-octave    - to run in place to test before installing"
 	@echo "   make check      - to run the tests"
 	@echo "   make install    - to install (PREFIX=$(prefix))"
 	@echo ""
 
 run-octave: run-octave.in Makefile
 	$(AM_V_GEN)$(do_subst_script_vals) && \
 	chmod a+rx "$@"
 
+octave-config.h: config.h build-aux/mk-octave-config-h.sh
+	$(AM_V_GEN)$(top_srcdir)/build-aux/mk-octave-config-h.sh $< > $@-t && \
+	mv $@-t $@
+
 bits/stl_algo.h: build-aux/stl_algo.h-fixed
 	$(AM_V_GEN)$(MKDIR_P) bits && \
 	$(INSTALL_HEADER) $< $@
 
 ## If we aren't trying to fix stl_algo.h, then try to ensure that
 ## there isn't a stray copy sitting in the build tree.
 
 nonexistent-file:
diff --git a/build-aux/common.mk b/build-aux/common.mk
--- a/build-aux/common.mk
+++ b/build-aux/common.mk
@@ -555,23 +555,16 @@ define do_subst_config_vals
     -e "s|%OCTAVE_CONF_CXXPICFLAG%|\"${CXXPICFLAG}\"|" \
     -e "s|%OCTAVE_CONF_DEFAULT_PAGER%|\"${DEFAULT_PAGER}\"|" \
     -e "s|%OCTAVE_CONF_DEFS%|\"${DEFS}\"|" \
     -e "s|%OCTAVE_CONF_DEPEND_FLAGS%|\"${DEPEND_FLAGS}\"|" \
     -e "s|%OCTAVE_CONF_DEPEND_EXTRA_SED_PATTERN%|\"${DEPEND_EXTRA_SED_PATTERN}\"|" \
     -e "s|%OCTAVE_CONF_DL_LD%|\"${DL_LD}\"|" \
     -e "s|%OCTAVE_CONF_DL_LDFLAGS%|\"${DL_LDFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_DL_LIBS%|\"${DL_LIBS}\"|" \
-    -e "s|%OCTAVE_CONF_ENABLE_64%|\"${ENABLE_64}\"|" \
-    -e "s|%OCTAVE_CONF_ENABLE_BOUNDS_CHECK%|\"${ENABLE_BOUNDS_CHECK}\"|" \
-    -e "s|%OCTAVE_CONF_ENABLE_DOCS%|\"${ENABLE_DOCS}\"|" \
-    -e "s|%OCTAVE_CONF_ENABLE_DYNAMIC_LINKING%|\"${ENABLE_DYNAMIC_LINKING}\"|" \
-    -e "s|%OCTAVE_CONF_ENABLE_FLOAT_TRUNCATE%|\"${ENABLE_FLOAT_TRUNCATE}\"|" \
-    -e "s|%OCTAVE_CONF_ENABLE_JIT%|\"${ENABLE_JIT}\"|" \
-    -e "s|%OCTAVE_CONF_ENABLE_OPENMP%|\"${ENABLE_OPENMP}\"|" \
     -e "s|%OCTAVE_CONF_EXEEXT%|\"${EXEEXT}\"|" \
     -e "s|%OCTAVE_CONF_GCC_VERSION%|\"${GCC_VERSION}\"|" \
     -e "s|%OCTAVE_CONF_GXX_VERSION%|\"${GXX_VERSION}\"|" \
     -e "s|%OCTAVE_CONF_F77%|\"${F77}\"|" \
     -e "s|%OCTAVE_CONF_F77_FLOAT_STORE_FLAG%|\"${F77_FLOAT_STORE_FLAG}\"|" \
     -e "s|%OCTAVE_CONF_F77_INTEGER_8_FLAG%|\"${F77_INTEGER_8_FLAG}\"|" \
     -e "s|%OCTAVE_CONF_FFLAGS%|\"${FFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_FFTW3_CPPFLAGS%|\"${FFTW3_CPPFLAGS}\"|" \
@@ -729,23 +722,16 @@ define do_subst_cross_config_vals
     -e "s|%OCTAVE_CONF_CXXPICFLAG%|\"${CXXPICFLAG}\"|" \
     -e "s|%OCTAVE_CONF_DEFAULT_PAGER%|\"${DEFAULT_PAGER}\"|" \
     -e "s|%OCTAVE_CONF_DEFS%|\"${DEFS}\"|" \
     -e "s|%OCTAVE_CONF_DEPEND_FLAGS%|\"${DEPEND_FLAGS}\"|" \
     -e "s|%OCTAVE_CONF_DEPEND_EXTRA_SED_PATTERN%|\"${DEPEND_EXTRA_SED_PATTERN}\"|" \
     -e "s|%OCTAVE_CONF_DL_LD%|\"${DL_LD}\"|" \
     -e "s|%OCTAVE_CONF_DL_LDFLAGS%|\"${DL_LDFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_DL_LIBS%|\"${DL_LIBS}\"|" \
-    -e "s|%OCTAVE_CONF_ENABLE_64%|\"${ENABLE_64}\"|" \
-    -e "s|%OCTAVE_CONF_ENABLE_BOUNDS_CHECK%|\"${ENABLE_BOUNDS_CHECK}\"|" \
-    -e "s|%OCTAVE_CONF_ENABLE_DOCS%|\"${ENABLE_DOCS}\"|" \
-    -e "s|%OCTAVE_CONF_ENABLE_DYNAMIC_LINKING%|\"${ENABLE_DYNAMIC_LINKING}\"|" \
-    -e "s|%OCTAVE_CONF_ENABLE_FLOAT_TRUNCATE%|\"${ENABLE_FLOAT_TRUNCATE}\"|" \
-    -e "s|%OCTAVE_CONF_ENABLE_JIT%|\"${ENABLE_JIT}\"|" \
-    -e "s|%OCTAVE_CONF_ENABLE_OPENMP%|\"${ENABLE_OPENMP}\"|" \
     -e "s|%OCTAVE_CONF_EXEEXT%|\"${EXEEXT}\"|" \
     -e "s|%OCTAVE_CONF_GCC_VERSION%|\"${GCC_VERSION}\"|" \
     -e "s|%OCTAVE_CONF_GXX_VERSION%|\"${GXX_VERSION}\"|" \
     -e "s|%OCTAVE_CONF_F77%|\"${F77}\"|" \
     -e "s|%OCTAVE_CONF_F77_FLOAT_STORE_FLAG%|\"${F77_FLOAT_STORE_FLAG}\"|" \
     -e "s|%OCTAVE_CONF_F77_INTEGER_8_FLAG%|\"${F77_INTEGER_8_FLAG}\"|" \
     -e "s|%OCTAVE_CONF_FFLAGS%|\"${FFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_FFTW3_CPPFLAGS%|\"${FFTW3_CPPFLAGS}\"|" \
diff --git a/build-aux/mk-octave-config-h.sh b/build-aux/mk-octave-config-h.sh
new file mode 100755
--- /dev/null
+++ b/build-aux/mk-octave-config-h.sh
@@ -0,0 +1,178 @@
+#! /bin/sh
+#
+# Copyright (C) 2016 John W. Eaton
+#
+# This file is part of Octave.
+#
+# Octave is free software; you can redistribute it and/or modify it
+# under the terms of the GNU General Public License as published by the
+# Free Software Foundation; either version 3 of the License, or (at
+# your option) any later version.
+#
+# Octave is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+# for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Octave; see the file COPYING.  If not, see
+# <http://www.gnu.org/licenses/>.
+
+if [ $# -ne 1 ]; then
+  echo "usage: mk-octave-config-h.sh CONFIG-FILE" 1>&2
+  exit 1
+fi
+
+config_h_file=$1
+
+cat << EOF
+/* DO NOT EDIT!  Generated by mk-octave-config-h.sh.  */
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_octave_config_h)
+#define octave_octave_config_h 1
+
+#include <stdint.h>
+
+#if defined (__GNUC__)
+#  define OCTAVE_DEPRECATED(msg) __attribute__ ((__deprecated__ (msg)))
+#  define OCTAVE_NORETURN __attribute__ ((__noreturn__))
+#  define OCTAVE_UNUSED __attribute__ ((__unused__))
+
+#  define HAVE_OCTAVE_DEPRECATED_ATTR 1
+#  define HAVE_OCTAVE_NORETURN_ATTR 1
+#  define HAVE_OCTAVE_UNUSED_ATTR 1
+#else
+#  define OCTAVE_DEPRECATED(msg)
+#  define OCTAVE_NORETURN
+#  define OCTAVE_UNUSED
+
+/* #  undef HAVE_OCTAVE_DEPRECATED_ATTR */
+/* #  undef HAVE_OCTAVE_NORETURN_ATTR */
+/* #  undef HAVE_OCTAVE_UNUSED_ATTR */
+#endif
+
+#if defined (_MSC_VER)
+#  define OCTAVE_API __declspec(dllimport)
+#  define OCTINTERP_API __declspec(dllimport)
+#else
+#  define OCTAVE_API
+#  define OCTINTERP_API
+#endif
+
+#include <stdint.h>
+EOF
+
+octave_idx_type="`sed -n 's/#define OCTAVE_IDX_TYPE \([_a-zA-Z][_a-zA-Z0-9]*\)/\1/p' $config_h_file`"
+
+if test -z "$octave_idx_type"; then
+  echo "mk-octave-config-h.sh: failed to find OCTAVE_IDX_TYPE in $config_h_file" 1>&2
+  exit 1
+fi
+
+cat << EOF
+
+typedef octave_idx_type $octave_idx_type;
+
+EOF
+
+if grep "#define OCTAVE_ENABLE_FLOAT_TRUNCATE 1" $config_h_file > /dev/null;
+then
+  echo "#define OCTAVE_FLOAT_TRUNCATE volatile"
+else
+  echo "#define OCTAVE_FLOAT_TRUNCATE"
+fi
+
+grep "#\(undef\|define\) OCTAVE_ENABLE_64" $config_h_file
+grep "#\(undef\|define\) OCTAVE_ENABLE_ATOMIC_REFCOUNT" $config_h_file
+grep "#\(undef\|define\) OCTAVE_ENABLE_BOUNDS_CHECK" $config_h_file
+grep "#\(undef\|define\) OCTAVE_ENABLE_OPENMP" $config_h_file
+
+if grep "#undef HAVE_DEV_T" $config_h_file > /dev/null;
+then
+  cat << EOF
+
+typedef short dev_t;
+
+EOF
+else
+  cat << EOF
+
+/* typedef short dev_t; */
+
+EOF
+fi
+
+if grep "#undef HAVE_INO_T" $config_h_file > /dev/null;
+then
+    cat << EOF
+
+typedef unsigned long ino_t;
+
+EOF
+else
+    cat << EOF
+
+/* typedef unsigned long ino_t; */
+
+EOF
+fi
+
+have_roundl=no
+if grep "#define HAVE_ROUNDL" $config_h_file > /dev/null;
+then
+  have_roundl=yes
+fi
+
+sizeof_long_double="`sed -n 's/#define SIZEOF_LONG_DOUBLE \([0-9]*\)/\1/p' $config_h_file`"
+
+if test -z "$sizeof_long_double"; then
+  echo "mk-octave-config-h.sh: failed to find SIZEOF_LONG_DOUBLE in $config_h_file" 1>&2
+  exit 1
+fi
+
+if test $sizeof_long_double -ge 10 && test $have_roundl = yes; then
+  echo "#define OCTAVE_INT_USE_LONG_DOUBLE 1"
+  if test $sizeof_long_double -lt 16; then
+    cat << EOF
+
+#if (defined (__i386__) || defined (__x86_64__)) && defined (__GNUC__)
+#  define OCTAVE_ENSURE_LONG_DOUBLE_OPERATIONS_ARE_NOT_TRUNCATED 1
+#endif
+EOF
+  else
+    cat << EOF
+/* #undef OCTAVE_ENSURE_LONG_DOUBLE_OPERATIONS_ARE_NOT_TRUNCATED */
+EOF
+  fi
+else
+  cat << EOF
+/* #undef OCTAVE_INT_USE_LONG_DOUBLE */
+/* #undef OCTAVE_ENSURE_LONG_DOUBLE_OPERATIONS_ARE_NOT_TRUNCATED */
+EOF
+fi
+
+cat << EOF
+
+#endif
+EOF
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -231,30 +231,30 @@ AC_DEFINE_UNQUOTED([SHELL_PATH], ["$SHEL
 ### by default.
 
 ENABLE_BOUNDS_CHECK=no
 AC_ARG_ENABLE([bounds-check],
   [AS_HELP_STRING([--enable-bounds-check],
     [enable bounds checking for indexing in internal array classes])],
   [if test "$enableval" = yes; then ENABLE_BOUNDS_CHECK=yes; fi], [])
 if test $ENABLE_BOUNDS_CHECK = yes; then
-  AC_DEFINE(ENABLE_BOUNDS_CHECK, 1, [Define to 1 to use internal bounds checking.])
+  AC_DEFINE(OCTAVE_ENABLE_BOUNDS_CHECK, 1, [Define to 1 to use internal bounds checking.])
 fi
 
 ### Use atomic operations for internal reference counting.  This is required
 ### for thread-safe behavior (Qt Handles) but incurs a significant slowdown.
 ### Enabled by default until a higher performing solution can be found.
 
 ENABLE_ATOMIC_REFCOUNT=yes
 AC_ARG_ENABLE([atomic-refcount],
   [AS_HELP_STRING([--disable-atomic-refcount],
     [Do not use atomic operations for internal reference counting.  This option is required for thread-safe behavior as used in the GUI's Qt plotting toolkit.  Performance for CLI-only builds is improved by disabling this feature.])],
   [if test "$enableval" = no; then ENABLE_ATOMIC_REFCOUNT=no; fi], [])
 if test $ENABLE_ATOMIC_REFCOUNT = yes; then
-  AC_DEFINE(ENABLE_ATOMIC_REFCOUNT, 1,
+  AC_DEFINE(OCTAVE_ENABLE_ATOMIC_REFCOUNT, 1,
     [Define to 1 to use atomic operations for reference counting.])
 fi
 
 ### Disable running Make in the doc directory.
 ### This is useful, for example, when building Octave on systems without TeX.
 
 ENABLE_DOCS=yes
 AC_ARG_ENABLE([docs],
@@ -285,17 +285,17 @@ if test $ENABLE_64 = yes; then
     OCTAVE_CONFIGURE_WARNING([warn_64_bit])
     ENABLE_64=no
   fi
 fi
 AC_SUBST(OCTAVE_IDX_TYPE)
 AC_DEFINE_UNQUOTED(OCTAVE_IDX_TYPE, [$OCTAVE_IDX_TYPE],
   [Define to the type of octave_idx_type (64 or 32 bit signed integer).])
 if test $ENABLE_64 = yes; then
-  AC_DEFINE(ENABLE_64, 1,
+  AC_DEFINE(OCTAVE_ENABLE_64, 1,
     [Define to 1 if using 64-bit integers for array dimensions and indexing.])
 fi
 AC_SUBST(ENABLE_64)
 
 ### It seems that there are some broken inline assembly functions in
 ### the GNU libc.  Since I'm not sure how to test whether we are using
 ### GNU libc, just disable them for all platforms.
 
@@ -446,17 +446,17 @@ if test $check_for_openmp = yes; then
   AC_LANG_POP(C)
   AC_LANG_PUSH(C++)
   AX_OPENMP([XTRA_CXXFLAGS="$XTRA_CXXFLAGS $OPENMP_CXXFLAGS"; ENABLE_OPENMP=yes], [])
   AC_LANG_POP(C++)
 fi
 dnl Define here since it is skipped if the first argument to
 dnl AX_OPENMP is not empty.
 if test $ENABLE_OPENMP = yes; then
-  AC_DEFINE(ENABLE_OPENMP, 1, [Define if OpenMP is enabled.])
+  AC_DEFINE(OCTAVE_ENABLE_OPENMP, 1, [Define if OpenMP is enabled.])
 fi
 ## Set these for any other tests that may require them.  They will be
 ## reset before output files are generated.
 CFLAGS="$CFLAGS $OPENMP_CFLAGS"
 CXXFLAGS="$CXXFLAGS $OPENMP_CXXFLAGS"
 
 ### When compiling math for x87, problems may arise in some code comparing
 ### floating-point intermediate results.  The root cause is the extra precision
@@ -469,17 +469,17 @@ CXXFLAGS="$CXXFLAGS $OPENMP_CXXFLAGS"
 ### and Cygwin platforms and for GCC compilers >= 5.0.  It should not be
 ### necessary for non-x87 targets or when using modern SSE math.
 ENABLE_FLOAT_TRUNCATE=yes
 AC_ARG_ENABLE([float-truncate],
   [AS_HELP_STRING([--disable-float-truncate],
     [truncate intermediate FP results])],
   [if test "$enableval" = no; then ENABLE_FLOAT_TRUNCATE=no; fi], [])
 if test $ENABLE_FLOAT_TRUNCATE = yes; then
-  AC_DEFINE(ENABLE_FLOAT_TRUNCATE, 1,
+  AC_DEFINE(OCTAVE_ENABLE_FLOAT_TRUNCATE, 1,
     [Define to 1 if you need to truncate intermediate FP results.])
 fi
 
 ### Determine extra CFLAGS that may be necessary for Octave.
 
 ## On Intel systems with gcc, we may need to compile with -mieee-fp
 ## to get full support for IEEE floating point.
 ##
@@ -3055,16 +3055,19 @@ AH_BOTTOM([#include "oct-conf-post.h"])
 
 AC_OUTPUT_MAKE_DEFS
 
 ### Do the substitutions in all the Makefiles.
 
 AC_SUBST(ac_config_files)
 AC_SUBST(ac_config_headers)
 
+dnl We use a .in.h file for oct-conf-post.h simply to copy it to
+dnl the build tree and so that we don't have to add the -I$(top_srcdir)
+dnl to any CPPFLAGS variables.
 AC_CONFIG_FILES([
   oct-conf-post.h:oct-conf-post.in.h
   Makefile
   doc/doxyhtml/Doxyfile
   libgnu/Makefile
   liboctave/cruft/mkf77def])
 
 AC_OUTPUT
diff --git a/libinterp/corefcn/oct-hdf5.h b/libinterp/corefcn/oct-hdf5.h
--- a/libinterp/corefcn/oct-hdf5.h
+++ b/libinterp/corefcn/oct-hdf5.h
@@ -26,17 +26,17 @@ along with Octave; see the file COPYING.
 #if defined (HAVE_HDF5)
 
 #  if defined (HAVE_HDF5_H)
 #    include <hdf5.h>
 #  endif
 
 #  include "oct-hdf5-types.h"
 
-#  if defined (ENABLE_64)
+#  if defined (OCTAVE_ENABLE_64)
 #    define H5T_NATIVE_IDX H5T_NATIVE_INT64
 #  else
 #    define H5T_NATIVE_IDX H5T_NATIVE_INT
 #  endif
 
 #endif
 
 #endif
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -1270,29 +1270,29 @@ specified option.\n\
     const char *key;
     const char *val;
   };
 
   static const conf_info_struct conf_info[] =
     {
       { false, "DEFAULT_PAGER", OCTAVE_DEFAULT_PAGER },
 
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
       { false, "ENABLE_64", "yes" },
 #else
       { false, "ENABLE_64", "no" },
 #endif
 
-#if defined (ATOMIC_REFCOUNT)
+#if defined (OCTAVE_ENABLE_ATOMIC_REFCOUNT)
       { false, "ENABLE_ATOMIC_REFCOUNT", "yes" },
 #else
       { false, "ENABLE_ATOMIC_REFCOUNT", "no" },
 #endif
 
-#if defined (ENABLE_BOUNDS_CHECK)
+#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
       { false, "ENABLE_BOUNDS_CHECK", "yes" },
 #else
       { false, "ENABLE_BOUNDS_CHECK", "no" },
 #endif
 
 #if defined (ENABLE_DOCS)
       { false, "ENABLE_DOCS", "yes" },
 #else
@@ -1300,29 +1300,29 @@ specified option.\n\
 #endif
 
 #if defined (ENABLE_DYNAMIC_LINKING)
       { false, "ENABLE_DYNAMIC_LINKING", "yes" },
 #else
       { false, "ENABLE_DYNAMIC_LINKING", "no" },
 #endif
 
-#if defined (ENABLE_FLOAT_TRUNCATE)
+#if defined (OCTAVE_ENABLE_FLOAT_TRUNCATE)
       { false, "ENABLE_FLOAT_TRUNCATE", "yes" },
 #else
       { false, "ENABLE_FLOAT_TRUNCATE", "no" },
 #endif
 
 #if defined (ENABLE_JIT)
       { false, "ENABLE_JIT", "yes" },
 #else
       { false, "ENABLE_JIT", "no" },
 #endif
 
-#if defined (ENABLE_OPENMP)
+#if defined (OCTAVE_ENABLE_OPENMP)
       { false, "ENABLE_OPENMP", "yes" },
 #else
       { false, "ENABLE_OPENMP", "no" },
 #endif
 
       { false, "api_version", OCTAVE_API_VERSION },
       { true, "archlibdir", OCTAVE_ARCHLIBDIR },
       { true, "bindir", OCTAVE_BINDIR },
diff --git a/libinterp/dldfcn/amd.cc b/libinterp/dldfcn/amd.cc
--- a/libinterp/dldfcn/amd.cc
+++ b/libinterp/dldfcn/amd.cc
@@ -40,17 +40,17 @@ along with Octave; see the file COPYING.
 
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 #include "oct-map.h"
 
 #include "oct-sparse.h"
 #include "oct-locbuf.h"
 
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
 #  define AMD_NAME(name) amd_l ## name
 #else
 #  define AMD_NAME(name) amd ## name
 #endif
 
 DEFUN_DLD (amd, args, nargout,
            "-*- texinfo -*-\n\
 @deftypefn  {} {@var{p} =} amd (@var{S})\n\
diff --git a/libinterp/dldfcn/ccolamd.cc b/libinterp/dldfcn/ccolamd.cc
--- a/libinterp/dldfcn/ccolamd.cc
+++ b/libinterp/dldfcn/ccolamd.cc
@@ -39,17 +39,17 @@ along with Octave; see the file COPYING.
 #include "ov-re-mat.h"
 
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 
 #include "oct-sparse.h"
 #include "oct-locbuf.h"
 
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
 #  define CCOLAMD_NAME(name) ccolamd_l ## name
 #  define CSYMAMD_NAME(name) csymamd_l ## name
 #else
 #  define CCOLAMD_NAME(name) ccolamd ## name
 #  define CSYMAMD_NAME(name) csymamd ## name
 #endif
 
 DEFUN_DLD (ccolamd, args, nargout,
diff --git a/libinterp/dldfcn/colamd.cc b/libinterp/dldfcn/colamd.cc
--- a/libinterp/dldfcn/colamd.cc
+++ b/libinterp/dldfcn/colamd.cc
@@ -40,17 +40,17 @@ along with Octave; see the file COPYING.
 #include "ov-re-mat.h"
 
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 
 #include "oct-sparse.h"
 #include "oct-locbuf.h"
 
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
 #  define COLAMD_NAME(name) colamd_l ## name
 #  define SYMAMD_NAME(name) symamd_l ## name
 #else
 #  define COLAMD_NAME(name) colamd ## name
 #  define SYMAMD_NAME(name) symamd ## name
 #endif
 
 // The symmetric column elimination tree code take from the Davis LDL code.
diff --git a/libinterp/dldfcn/dmperm.cc b/libinterp/dldfcn/dmperm.cc
--- a/libinterp/dldfcn/dmperm.cc
+++ b/libinterp/dldfcn/dmperm.cc
@@ -31,17 +31,17 @@ along with Octave; see the file COPYING.
 #include "ovl.h"
 #include "utils.h"
 
 #include "oct-sparse.h"
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 #include "sparse-qr.h"
 
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
 #  define CXSPARSE_NAME(name) cs_dl ## name
 #else
 #  define CXSPARSE_NAME(name) cs_di ## name
 #endif
 
 static RowVector
 put_int (octave_idx_type *p, octave_idx_type n)
 {
diff --git a/libinterp/dldfcn/symbfact.cc b/libinterp/dldfcn/symbfact.cc
--- a/libinterp/dldfcn/symbfact.cc
+++ b/libinterp/dldfcn/symbfact.cc
@@ -126,17 +126,17 @@ factorization as determined by @var{typ}
   SUITESPARSE_ASSIGN_FPTR2 (hypot_func, cm->hypotenuse, hypot);
 
   double dummy;
   cholmod_sparse Astore;
   cholmod_sparse *A = &Astore;
   A->packed = true;
   A->sorted = true;
   A->nz = 0;
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
   A->itype = CHOLMOD_LONG;
 #else
   A->itype = CHOLMOD_INT;
 #endif
   A->dtype = CHOLMOD_DOUBLE;
   A->stype = 1;
   A->x = &dummy;
 
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -1516,17 +1516,17 @@ octave_value::is_equal (const octave_val
 }
 
 // Define the idx_type_value function here instead of in ov.h to avoid
 // needing definitions for the SIZEOF_X macros in ov.h.
 
 octave_idx_type
 octave_value::idx_type_value (bool req_int, bool frc_str_conv) const
 {
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
   return int64_value (req_int, frc_str_conv);
 #else
   return int_value (req_int, frc_str_conv);
 #endif
 }
 
 Cell
 octave_value::cell_value (void) const
diff --git a/liboctave/array/Array.cc b/liboctave/array/Array.cc
--- a/liboctave/array/Array.cc
+++ b/liboctave/array/Array.cc
@@ -253,44 +253,44 @@ Array<T>::checkelem (const Array<octave_
   return elem (compute_index (ra_idx));
 }
 
 template <typename T>
 Array<T>
 Array<T>::column (octave_idx_type k) const
 {
   octave_idx_type r = dimensions(0);
-#ifdef ENABLE_BOUNDS_CHECK
+#ifdef OCTAVE_ENABLE_BOUNDS_CHECK
   if (k < 0 || k > dimensions.numel (1))
     err_index_out_of_range (2, 2, k+1, dimensions.numel (1), dimensions);
 #endif
 
   return Array<T> (*this, dim_vector (r, 1), k*r, k*r + r);
 }
 
 template <typename T>
 Array<T>
 Array<T>::page (octave_idx_type k) const
 {
   octave_idx_type r = dimensions(0);
   octave_idx_type c = dimensions(1);
   octave_idx_type p = r*c;
-#ifdef ENABLE_BOUNDS_CHECK
+#ifdef OCTAVE_ENABLE_BOUNDS_CHECK
   if (k < 0 || k > dimensions.numel (2))
     err_index_out_of_range (3, 3, k+1, dimensions.numel (2), dimensions);
 #endif
 
   return Array<T> (*this, dim_vector (r, c), k*p, k*p + p);
 }
 
 template <typename T>
 Array<T>
 Array<T>::linear_slice (octave_idx_type lo, octave_idx_type up) const
 {
-#ifdef ENABLE_BOUNDS_CHECK
+#ifdef OCTAVE_ENABLE_BOUNDS_CHECK
   if (lo < 0)
     err_index_out_of_range (1, 1, lo+1, numel (), dimensions);
   if (up > numel ())
     err_index_out_of_range (1, 1, up, numel (), dimensions);
 #endif
   if (up < lo) up = lo;
   return Array<T> (*this, dim_vector (up - lo, 1), lo, up);
 }
diff --git a/liboctave/array/Array.h b/liboctave/array/Array.h
--- a/liboctave/array/Array.h
+++ b/liboctave/array/Array.h
@@ -391,17 +391,17 @@ public:
   T& elem (octave_idx_type i, octave_idx_type j) { return elem (dim1 ()*j+i); }
 
   T& elem (octave_idx_type i, octave_idx_type j, octave_idx_type k)
   { return elem (i, dim2 ()*k+j); }
 
   T& elem (const Array<octave_idx_type>& ra_idx)
   { return Array<T>::elem (compute_index_unchecked (ra_idx)); }
 
-#if defined (ENABLE_BOUNDS_CHECK)
+#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
   T& operator () (octave_idx_type n) { return checkelem (n); }
   T& operator () (octave_idx_type i, octave_idx_type j)
   { return checkelem (i, j); }
   T& operator () (octave_idx_type i, octave_idx_type j, octave_idx_type k)
   { return checkelem (i, j, k); }
   T& operator () (const Array<octave_idx_type>& ra_idx)
   { return checkelem (ra_idx); }
 #else
@@ -425,17 +425,17 @@ public:
   { return xelem (i, j); }
 
   crefT elem (octave_idx_type i, octave_idx_type j, octave_idx_type k) const
   { return xelem (i, j, k); }
 
   crefT elem (const Array<octave_idx_type>& ra_idx) const
   { return Array<T>::xelem (compute_index_unchecked (ra_idx)); }
 
-#if defined (ENABLE_BOUNDS_CHECK)
+#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
   crefT operator () (octave_idx_type n) const { return checkelem (n); }
   crefT operator () (octave_idx_type i, octave_idx_type j) const
   { return checkelem (i, j); }
   crefT operator () (octave_idx_type i, octave_idx_type j,
                      octave_idx_type k) const
   { return checkelem (i, j, k); }
   crefT operator () (const Array<octave_idx_type>& ra_idx) const
   { return checkelem (ra_idx); }
@@ -447,17 +447,17 @@ public:
                      octave_idx_type k) const
   { return elem (i, j, k); }
   crefT operator () (const Array<octave_idx_type>& ra_idx) const
   { return elem (ra_idx); }
 #endif
 
   // Fast extractors. All of these produce shallow copies.
   // Warning: none of these do check bounds, unless
-  // ENABLE_BOUNDS_CHECK is defined!
+  // OCTAVE_ENABLE_BOUNDS_CHECK is defined!
 
   //! Extract column: A(:,k+1).
   Array<T> column (octave_idx_type k) const;
   //! Extract page: A(:,:,k+1).
   Array<T> page (octave_idx_type k) const;
 
   //! Extract a slice from this array as a column vector: A(:)(lo+1:up).
   //! Must be 0 <= lo && up <= numel. May be up < lo.
diff --git a/liboctave/array/CSparse.cc b/liboctave/array/CSparse.cc
--- a/liboctave/array/CSparse.cc
+++ b/liboctave/array/CSparse.cc
@@ -5596,17 +5596,17 @@ SparseComplexMatrix::fsolve (MatrixType 
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_COMPLEX;
 
@@ -5842,17 +5842,17 @@ SparseComplexMatrix::fsolve (MatrixType 
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_COMPLEX;
 
@@ -5866,17 +5866,17 @@ SparseComplexMatrix::fsolve (MatrixType 
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->p = b.cidx ();
           B->i = b.ridx ();
           B->nzmax = b.nnz ();
           B->packed = true;
           B->sorted = true;
           B->nz = 0;
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
           B->itype = CHOLMOD_LONG;
 #else
           B->itype = CHOLMOD_INT;
 #endif
           B->dtype = CHOLMOD_DOUBLE;
           B->stype = 0;
           B->xtype = CHOLMOD_REAL;
 
@@ -6136,17 +6136,17 @@ SparseComplexMatrix::fsolve (MatrixType 
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_COMPLEX;
 
@@ -6361,17 +6361,17 @@ SparseComplexMatrix::fsolve (MatrixType 
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_COMPLEX;
 
@@ -6385,17 +6385,17 @@ SparseComplexMatrix::fsolve (MatrixType 
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->p = b.cidx ();
           B->i = b.ridx ();
           B->nzmax = b.nnz ();
           B->packed = true;
           B->sorted = true;
           B->nz = 0;
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
           B->itype = CHOLMOD_LONG;
 #else
           B->itype = CHOLMOD_INT;
 #endif
           B->dtype = CHOLMOD_DOUBLE;
           B->stype = 0;
           B->xtype = CHOLMOD_COMPLEX;
 
diff --git a/liboctave/array/DiagArray2.h b/liboctave/array/DiagArray2.h
--- a/liboctave/array/DiagArray2.h
+++ b/liboctave/array/DiagArray2.h
@@ -128,32 +128,32 @@ public:
 
   T checkelem (octave_idx_type r, octave_idx_type c) const
   {
     return check_idx (r, c) ? elem (r, c) : T (0);
   }
 
   T operator () (octave_idx_type r, octave_idx_type c) const
   {
-#if defined (ENABLE_BOUNDS_CHECK)
+#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
     return checkelem (r, c);
 #else
     return elem (r, c);
 #endif
   }
 
   T& checkelem (octave_idx_type r, octave_idx_type c)
   {
     static T zero (0);
     return check_idx (r, c) ? elem (r, c) : zero;
   }
 
   T& operator () (octave_idx_type r, octave_idx_type c)
   {
-#if defined (ENABLE_BOUNDS_CHECK)
+#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
     return checkelem (r, c);
 #else
     return elem (r, c);
 #endif
   }
 
   // No checking.
 
diff --git a/liboctave/array/MArray-i.cc b/liboctave/array/MArray-i.cc
--- a/liboctave/array/MArray-i.cc
+++ b/liboctave/array/MArray-i.cc
@@ -27,29 +27,29 @@ along with Octave; see the file COPYING.
 #include "oct-inttypes.h"
 
 // Instantiate MArrays of int values.
 
 #include "MArray.h"
 #include "MArray.cc"
 
 template class OCTAVE_API MArray<int>;
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
 template class OCTAVE_API MArray<int64_t>;
 #endif
 
 // Explicit instantiation, as this seems to be required by weird compilers
 // like MSVC. This should be harmless on other compilers.
 template int xmin<int> (int, int);
 template int xmax<int> (int, int);
 template long xmin<long> (long, long);
 template long xmax<long> (long, long);
 
 INSTANTIATE_MARRAY_FRIENDS (int, OCTAVE_API)
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
 INSTANTIATE_MARRAY_FRIENDS (int64_t, OCTAVE_API)
 #endif
 
 template class OCTAVE_API MArray<octave_int8>;
 template class OCTAVE_API MArray<octave_int16>;
 template class OCTAVE_API MArray<octave_int32>;
 template class OCTAVE_API MArray<octave_int64>;
 
diff --git a/liboctave/array/PermMatrix.h b/liboctave/array/PermMatrix.h
--- a/liboctave/array/PermMatrix.h
+++ b/liboctave/array/PermMatrix.h
@@ -84,17 +84,17 @@ public:
   }
 
   octave_idx_type
   checkelem (octave_idx_type i, octave_idx_type j) const;
 
   octave_idx_type
   operator () (octave_idx_type i, octave_idx_type j) const
   {
-#if defined (ENABLE_BOUNDS_CHECK)
+#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
     return checkelem (i, j);
 #else
     return elem (i, j);
 #endif
   }
 
   // These are, in fact, super-fast.
   PermMatrix transpose (void) const;
diff --git a/liboctave/array/Range.cc b/liboctave/array/Range.cc
--- a/liboctave/array/Range.cc
+++ b/liboctave/array/Range.cc
@@ -82,17 +82,17 @@ Range::checkelem (octave_idx_type i) con
     return rng_base + i * rng_inc;
   else
     return rng_limit;
 }
 
 double
 Range::elem (octave_idx_type i) const
 {
-#if defined (ENABLE_BOUNDS_CHECK)
+#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
   return checkelem (i);
 #else
   if (i == 0)
     return rng_base;
   else if (i < rng_numel - 1)
     return rng_base + i * rng_inc;
   else
     return rng_limit;
diff --git a/liboctave/array/Sparse.h b/liboctave/array/Sparse.h
--- a/liboctave/array/Sparse.h
+++ b/liboctave/array/Sparse.h
@@ -381,17 +381,17 @@ public:
   {
     make_unique ();
     return xelem (i, j);
   }
 
   T& elem (const Array<octave_idx_type>& ra_idx)
   { return Sparse<T>::elem (compute_index (ra_idx)); }
 
-#if defined (ENABLE_BOUNDS_CHECK)
+#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
   T& operator () (octave_idx_type n)
   {
     return checkelem (n);
   }
 
   T& operator () (octave_idx_type i, octave_idx_type j)
   {
     return checkelem (i, j);
@@ -448,17 +448,17 @@ public:
 
   T elem (octave_idx_type n) const { return xelem (n); }
 
   T elem (octave_idx_type i, octave_idx_type j) const { return xelem (i, j); }
 
   T elem (const Array<octave_idx_type>& ra_idx) const
   { return Sparse<T>::elem (compute_index (ra_idx)); }
 
-#if defined (ENABLE_BOUNDS_CHECK)
+#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
   T operator () (octave_idx_type n) const { return checkelem (n); }
   T operator () (octave_idx_type i, octave_idx_type j) const
   {
     return checkelem (i, j);
   }
 
   T operator () (const Array<octave_idx_type>& ra_idx) const
   {
diff --git a/liboctave/array/dSparse.cc b/liboctave/array/dSparse.cc
--- a/liboctave/array/dSparse.cc
+++ b/liboctave/array/dSparse.cc
@@ -5789,17 +5789,17 @@ SparseMatrix::fsolve (MatrixType &mattyp
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_REAL;
 
@@ -6009,17 +6009,17 @@ SparseMatrix::fsolve (MatrixType &mattyp
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_REAL;
 
@@ -6033,17 +6033,17 @@ SparseMatrix::fsolve (MatrixType &mattyp
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->p = b.cidx ();
           B->i = b.ridx ();
           B->nzmax = b.nnz ();
           B->packed = true;
           B->sorted = true;
           B->nz = 0;
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
           B->itype = CHOLMOD_LONG;
 #else
           B->itype = CHOLMOD_INT;
 #endif
           B->dtype = CHOLMOD_DOUBLE;
           B->stype = 0;
           B->xtype = CHOLMOD_REAL;
 
@@ -6274,17 +6274,17 @@ SparseMatrix::fsolve (MatrixType &mattyp
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_REAL;
 
@@ -6511,17 +6511,17 @@ SparseMatrix::fsolve (MatrixType &mattyp
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_REAL;
 
@@ -6535,17 +6535,17 @@ SparseMatrix::fsolve (MatrixType &mattyp
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->p = b.cidx ();
           B->i = b.ridx ();
           B->nzmax = b.nnz ();
           B->packed = true;
           B->sorted = true;
           B->nz = 0;
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
           B->itype = CHOLMOD_LONG;
 #else
           B->itype = CHOLMOD_INT;
 #endif
           B->dtype = CHOLMOD_DOUBLE;
           B->stype = 0;
           B->xtype = CHOLMOD_COMPLEX;
 
diff --git a/liboctave/array/dim-vector.h b/liboctave/array/dim-vector.h
--- a/liboctave/array/dim-vector.h
+++ b/liboctave/array/dim-vector.h
@@ -233,26 +233,26 @@ public:
   //! @see dim_vector(octave_idx_type d0, octave_idx_type d1)
   DIM_VECTOR_CTOR (7)
 
 #undef ASSIGN_REP
 #undef DIM_VECTOR_CTOR
 
   octave_idx_type& elem (int i)
   {
-#ifdef ENABLE_BOUNDS_CHECK
+#ifdef OCTAVE_ENABLE_BOUNDS_CHECK
     assert (i >= 0 && i < ndims ());
 #endif
     make_unique ();
     return rep[i];
   }
 
   octave_idx_type elem (int i) const
   {
-#ifdef ENABLE_BOUNDS_CHECK
+#ifdef OCTAVE_ENABLE_BOUNDS_CHECK
     assert (i >= 0 && i < ndims ());
 #endif
     return rep[i];
   }
 
   void chop_trailing_singletons (void)
   {
     int l = ndims ();
diff --git a/liboctave/array/idx-vector.h b/liboctave/array/idx-vector.h
--- a/liboctave/array/idx-vector.h
+++ b/liboctave/array/idx-vector.h
@@ -557,17 +557,17 @@ public:
   octave_idx_type xelem (octave_idx_type n) const
   { return rep->xelem (n); }
 
   octave_idx_type checkelem (octave_idx_type n) const
   { return rep->checkelem (n); }
 
   octave_idx_type operator () (octave_idx_type n) const
   {
-#if defined (ENABLE_BOUNDS_CHECK)
+#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
     return rep->checkelem (n);
 #else
     return rep->xelem (n);
 #endif
   }
 
   operator bool (void) const
   { return ! rep->err; }
diff --git a/liboctave/cruft/misc/f77-fcn.h b/liboctave/cruft/misc/f77-fcn.h
--- a/liboctave/cruft/misc/f77-fcn.h
+++ b/liboctave/cruft/misc/f77-fcn.h
@@ -160,17 +160,17 @@ not returning a value from a function de
    that is supposed to act like a Fortran subroutine.  */
 #define F77_RET_T int
 
 /* Use these macros to return from C-language functions that are
    supposed to act like Fortran subroutines.  F77_NORETURN is intended
    to be used as the last statement of such a function that has been
    tagged with a "noreturn" attribute.  */
 #define F77_RETURN(retval) return retval;
-#if defined (HAVE_ATTR_NORETURN)
+#if defined (HAVE_OCTAVE_NORETURN_ATTR)
 #  define F77_NORETURN(retval)
 #else
 #  define F77_NORETURN(retval) return retval;
 #endif
 
 /* FIXME: These should work for SV1 or Y-MP systems but will
           need to be changed for others.  */
 
@@ -258,17 +258,17 @@ octave_make_cray_const_ftn_ch_dsc (const
 #define F77_CONST_CHAR_ARG_DEF(s, len) const char *s
 #define F77_CHAR_ARG_LEN_DEF(len) , long len
 #define F77_CHAR_ARG_USE(s) s
 #define F77_CHAR_ARG_LEN_USE(s, len) len
 
 #define F77_RET_T int
 
 #define F77_RETURN(retval) return retval;
-#if defined (HAVE_ATTR_NORETURN)
+#if defined (HAVE_OCTAVE_NORETURN_ATTR)
 #  define F77_NORETURN(retval)
 #else
 #  define F77_NORETURN(retval) return retval;
 #endif
 
 #endif
 
 
diff --git a/liboctave/numeric/sparse-chol.cc b/liboctave/numeric/sparse-chol.cc
--- a/liboctave/numeric/sparse-chol.cc
+++ b/liboctave/numeric/sparse-chol.cc
@@ -248,17 +248,17 @@ sparse_chol<chol_type>::sparse_chol_rep:
   ac->ncol = a_nc;
 
   ac->p = a.cidx ();
   ac->i = a.ridx ();
   ac->nzmax = a.nnz ();
   ac->packed = true;
   ac->sorted = true;
   ac->nz = 0;
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
   ac->itype = CHOLMOD_LONG;
 #else
   ac->itype = CHOLMOD_INT;
 #endif
   ac->dtype = CHOLMOD_DOUBLE;
   ac->stype = 1;
   ac->xtype = get_xtype<chol_elt> ();
 
diff --git a/liboctave/util/lo-array-errwarn.cc b/liboctave/util/lo-array-errwarn.cc
--- a/liboctave/util/lo-array-errwarn.cc
+++ b/liboctave/util/lo-array-errwarn.cc
@@ -167,17 +167,17 @@ public:
 
   invalid_index (const std::string& value, octave_idx_type ndim,
                  octave_idx_type dimen)
     : index_exception (value, ndim, dimen)
   { }
 
   std::string details (void) const
   {
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
     return "subscripts must be either integers 1 to (2^63)-1 or logicals";
 #else
     return "subscripts must be either integers 1 to (2^31)-1 or logicals";
 #endif
   }
 
   // ID of error to throw
   const char *err_id (void) const
diff --git a/liboctave/util/lo-array-gripes.cc b/liboctave/util/lo-array-gripes.cc
--- a/liboctave/util/lo-array-gripes.cc
+++ b/liboctave/util/lo-array-gripes.cc
@@ -111,17 +111,17 @@ public:
 
   invalid_index (const std::string& value, octave_idx_type ndim,
                  octave_idx_type dimen)
     : index_exception (value, ndim, dimen)
   { }
 
   std::string details (void) const
   {
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
     return "subscripts must be either integers 1 to (2^63)-1 or logicals";
 #else
     return "subscripts must be either integers 1 to (2^31)-1 or logicals";
 #endif
   }
 
   // ID of error to throw
   const char *err_id (void) const
diff --git a/liboctave/util/oct-refcount.h b/liboctave/util/oct-refcount.h
--- a/liboctave/util/oct-refcount.h
+++ b/liboctave/util/oct-refcount.h
@@ -22,17 +22,17 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_oct_refcount_h)
 #define octave_oct_refcount_h 1
 
 #ifndef OCTAVE_CONFIG_INCLUDED
 #  error "The file <octave/config.h> must be included before oct-refcount.h."
 #endif
 
-#if defined (ENABLE_ATOMIC_REFCOUNT) && (defined (_MSC_VER) || defined (__GNUC__))
+#if defined (OCTAVE_ENABLE_ATOMIC_REFCOUNT) && (defined (_MSC_VER) || defined (__GNUC__))
 #  if defined (_MSC_VER)
 #    include <intrin.h>
 #    define OCTREFCOUNT_ATOMIC_INCREMENT(x) _InterlockedIncrement((long*)x)
 #    define OCTREFCOUNT_ATOMIC_DECREMENT(x) _InterlockedDecrement((long*)x)
 #    define OCTREFCOUNT_ATOMIC_INCREMENT_POST(x) _InterlockedExchangeAdd((long*)x,  1)
 #    define OCTREFCOUNT_ATOMIC_DECREMENT_POST(x) _InterlockedExchangeAdd((long*)x, -1)
 #  elif defined (__GNUC__)
 #    define OCTREFCOUNT_ATOMIC_INCREMENT(x) __sync_add_and_fetch(x,  1)
diff --git a/liboctave/util/oct-sparse.h b/liboctave/util/oct-sparse.h
--- a/liboctave/util/oct-sparse.h
+++ b/liboctave/util/oct-sparse.h
@@ -82,17 +82,17 @@ along with Octave; see the file COPYING.
 #elif defined (HAVE_CS_H)
 #  include <cs.h>
 #endif
 
 #if (defined (HAVE_SUITESPARSE_CHOLMOD_H) \
      || defined (HAVE_UFSPARSE_CHOLMOD_H) \
      || defined (HAVE_CHOLMOD_CHOLMOD_H) \
      || defined (HAVE_CHOLMOD_H))
-#  if defined (ENABLE_64)
+#  if defined (OCTAVE_ENABLE_64)
 #    define CHOLMOD_NAME(name) cholmod_l_ ## name
 #  else
 #    define CHOLMOD_NAME(name) cholmod_ ## name
 #  endif
 #endif
 
 // Cope with new SuiteSparse versions
 
@@ -103,27 +103,27 @@ along with Octave; see the file COPYING.
 #    define SUITESPARSE_ASSIGN_FPTR2(f_name, f_var, f_assign) (SuiteSparse_config.f_name = SUITESPARSE_NAME (f_assign))
 #  else
 #    define SUITESPARSE_ASSIGN_FPTR(f_name, f_var, f_assign) (f_var = f_assign)
 #    define SUITESPARSE_ASSIGN_FPTR2(f_name, f_var, f_assign) (f_var = CHOLMOD_NAME (f_assign))
 #  endif
 #endif
 
 #if defined (HAVE_CXSPARSE)
-#  if defined (ENABLE_64)
+#  if defined (OCTAVE_ENABLE_64)
 #    define CXSPARSE_DNAME(name) cs_dl ## name
 #    define CXSPARSE_ZNAME(name) cs_cl ## name
 #  else
 #    define CXSPARSE_DNAME(name) cs_di ## name
 #    define CXSPARSE_ZNAME(name) cs_ci ## name
 #  endif
 #endif
 
 #if defined (HAVE_UMFPACK)
-#  if defined (ENABLE_64)
+#  if defined (OCTAVE_ENABLE_64)
 #    define UMFPACK_DNAME(name) umfpack_dl_ ## name
 #    define UMFPACK_ZNAME(name) umfpack_zl_ ## name
 #  else
 #    define UMFPACK_DNAME(name) umfpack_di_ ## name
 #    define UMFPACK_ZNAME(name) umfpack_zi_ ## name
 #  endif
 #endif
 
diff --git a/oct-conf-post.in.h b/oct-conf-post.in.h
--- a/oct-conf-post.in.h
+++ b/oct-conf-post.in.h
@@ -32,23 +32,23 @@ along with Octave; see the file COPYING.
    mechanisms.  As compilers evolve, the underlying implementation can
    be changed with the macro definitions below.  FIXME: Update macros
    to use C++ standard attribute syntax when Octave moves to C++ 2011
    standard.  */
 
 #if defined (__GNUC__)
    /* The following attributes are used with gcc and clang compilers.  */
 #  define OCTAVE_DEPRECATED(msg) __attribute__ ((__deprecated__ (msg)))
-#  define HAVE_ATTR_DEPRECATED 1
+#  define HAVE_OCTAVE_DEPRECATED_ATTR 1
 
 #  define OCTAVE_NORETURN __attribute__ ((__noreturn__))
-#  define HAVE_ATTR_NORETURN 1
+#  define HAVE_OCTAVE_NORETURN_ATTR 1
 
 #  define OCTAVE_UNUSED __attribute__ ((__unused__))
-#  define HAVE_ATTR_UNUSED 1
+#  define HAVE_OCTAVE_UNUSED_ATTR 1
 #else
 #  define OCTAVE_DEPRECATED(msg)
 #  define OCTAVE_NORETURN
 #  define OCTAVE_UNUSED
 #endif
 
 #if ! defined (HAVE_DEV_T)
 typedef short dev_t;
@@ -95,17 +95,17 @@ typedef unsigned long ino_t;
 #if defined (_UNICOS)
 #  define F77_USES_CRAY_CALLING_CONVENTION
 #endif
 
 #if 0
 #  define F77_USES_VISUAL_FORTRAN_CALLING_CONVENTION
 #endif
 
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
 #  define SIZEOF_OCTAVE_IDX_TYPE SIZEOF_INT64_T
 #else
 #  define SIZEOF_OCTAVE_IDX_TYPE SIZEOF_INT
 #endif
 
 /* To be able to use long doubles for 64-bit mixed arithmetics, we need
    them at least 80 bits wide and we need roundl declared in math.h.
    FIXME: Maybe substitute this by a more precise check in the future?  */
@@ -156,29 +156,29 @@ typedef unsigned long ino_t;
 #if defined (OCTGUI_DLL)
 #  define OCTGUI_API OCTAVE_EXPORT
 #else
 #  define OCTGUI_API OCTAVE_IMPORT
 #endif
 
 /* Backward compatibility */
 
-#if defined (ENABLE_ATOMIC_REFCOUNT)
+#if defined (OCTAVE_ENABLE_ATOMIC_REFCOUNT)
 #  define USE_ATOMIC_REFCOUNT 1
 #endif
 
-#if defined (ENABLE_64)
+#if defined (OCTAVE_ENABLE_64)
 #  define USE_64_BIT_IDX_T 1
 #endif
 
-#if defined (ENABLE_OPENMP)
+#if defined (OCTAVE_ENABLE_OPENMP)
 #  define HAVE_OPENMP 1
 #endif
 
-#if defined (ENABLE_FLOAT_TRUNCATE)
+#if defined (OCTAVE_ENABLE_FLOAT_TRUNCATE)
 #  define OCTAVE_FLOAT_TRUNCATE volatile
 #else
 #  define OCTAVE_FLOAT_TRUNCATE
 #endif
 
 /* oct-types.h */
 
 #include <stdint.h>
