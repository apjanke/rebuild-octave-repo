# HG changeset patch
# User jwe
# Date 1069830162 0
#      Wed Nov 26 07:02:42 2003 +0000
# Node ID 334a27c8f4537d87ad9b15f9b030a5822c77e628
# Parent  7849788ca4bd8a63a00a2829df33614bc0cb6096
[project @ 2003-11-26 07:02:42 by jwe]

diff --git a/liboctave/Array-util.cc b/liboctave/Array-util.cc
--- a/liboctave/Array-util.cc
+++ b/liboctave/Array-util.cc
@@ -20,16 +20,18 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "Array-util.h"
+#include "dim-vector.h"
+#include "lo-error.h"
 
 bool
 index_in_bounds (const Array<int>& ra_idx, const dim_vector& dimensions)
 {
   bool retval = true;
 
   int n = ra_idx.length ();
 
@@ -526,13 +528,42 @@ calc_permutated_idx (const Array<int>& o
 	retval(perm_vec(i)-1) = old_idx(i);
       else
 	retval(i) = old_idx(perm_vec(i)-1);
     }
 
   return retval;
 }
 
+void
+gripe_nonconformant (const char *op, int op1_len, int op2_len)
+{
+  (*current_liboctave_error_handler)
+    ("%s: nonconformant arguments (op1 len: %d, op2 len: %d)",
+     op, op1_len, op2_len);
+}
+
+void
+gripe_nonconformant (const char *op, int op1_nr, int op1_nc,
+		     int op2_nr, int op2_nc)
+{
+  (*current_liboctave_error_handler)
+    ("%s: nonconformant arguments (op1 is %dx%d, op2 is %dx%d)",
+     op, op1_nr, op1_nc, op2_nr, op2_nc);
+}
+
+void
+gripe_nonconformant (const char *op, dim_vector& op1_dims,
+		     dim_vector& op2_dims)
+{
+  std::string op1_dims_str = op1_dims.str ();
+  std::string op2_dims_str = op2_dims.str ();
+
+  (*current_liboctave_error_handler)
+    ("%s: nonconformant arguments (op1 is %s, op2 is %s)",
+     op, op1_dims_str.c_str (), op2_dims_str.c_str ());
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Array-util.h b/liboctave/Array-util.h
--- a/liboctave/Array-util.h
+++ b/liboctave/Array-util.h
@@ -84,15 +84,25 @@ extern int number_of_elements (const dim
 extern Array<int> get_ra_idx (int idx, const dim_vector& dims);
 
 extern dim_vector short_freeze (Array<idx_vector>& ra_idx,
 				const dim_vector& dimensions,
 				int resize_ok);
 
 extern Array<int> calc_permutated_idx (const Array<int>& old_idx, 
 				       const Array<int>& perm_vec, bool inv);
+
+extern void gripe_nonconformant (const char *op, int op1_len, int op2_len);
+
+extern void gripe_nonconformant (const char *op, int op1_nr, int op1_nc,
+				 int op2_nr, int op2_nc);
+
+
+extern void gripe_nonconformant (const char *op, dim_vector& op1_dims,
+				 dim_vector& op2_dims);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/CColVector.cc b/liboctave/CColVector.cc
--- a/liboctave/CColVector.cc
+++ b/liboctave/CColVector.cc
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
 
+#include "Array-util.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
 #include "oct-cmplx.h"
 
 // Fortran functions we call.
 
diff --git a/liboctave/CDiagMatrix.cc b/liboctave/CDiagMatrix.cc
--- a/liboctave/CDiagMatrix.cc
+++ b/liboctave/CDiagMatrix.cc
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
 
+#include "Array-util.h"
 #include "lo-error.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
 #include "oct-cmplx.h"
 
 // Complex Diagonal Matrix class
 
 ComplexDiagMatrix::ComplexDiagMatrix (const DiagMatrix& a)
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -33,16 +33,17 @@ Software Foundation, 59 Temple Place - S
 
 #include <iostream>
 
 // XXX FIXME XXX
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 
+#include "Array-util.h"
 #include "CMatrix.h"
 #include "CmplxAEPBAL.h"
 #include "CmplxDET.h"
 #include "CmplxSCHUR.h"
 #include "CmplxSVD.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "lo-ieee.h"
diff --git a/liboctave/CRowVector.cc b/liboctave/CRowVector.cc
--- a/liboctave/CRowVector.cc
+++ b/liboctave/CRowVector.cc
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
 
+#include "Array-util.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
 #include "oct-cmplx.h"
 
 // Fortran functions we call.
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,26 @@
+2003-11-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* boolNDArray.cc: Define BOOL ops.  Define mixed CMP ops.
+	* boolNDArray.h: Declare BOOL ops.  Declare mixed CMP ops.
+
+2003-11-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* mk-ops.awk: Also emit #include "Array-util.h".
+
+	* mx-ops: Add bool, boolMatrix, and boolNDarray types.
+	Add bnda x bnda, b x bnda, and bnda x b ops.
+
+	* MArray-misc.cc: Delete.
+	* Makefile.in (MATRIX_SRC): Remove it from the list.
+
+	* Array-util.h, Array-util.cc (gripe_nonconformant): Move here from
+	MArray.h, MArray2.h, MArrayN.h, and MArray-misc.cc.
+
 2003-11-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dbleQR.cc (QR::init): Use separate pwork pointers.
 	* CmplxQR.cc (ComplexQR::init): Likewise.
 
 	* oct-group.cc (octave_group::getgrnam): Pass correct args to
 	two-arg getgrnam version.
 
diff --git a/liboctave/MArray-misc.cc b/liboctave/MArray-misc.cc
deleted file mode 100644
--- a/liboctave/MArray-misc.cc
+++ /dev/null
@@ -1,66 +0,0 @@
-/*
-
-Copyright (C) 1996, 1997 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 2, or (at your option) any
-later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, write to the Free
-Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-
-*/
-
-#ifdef HAVE_CONFIG_H
-#include <config.h>
-#endif
-
-#include "MArray.h"
-#include "MArray2.h"
-#include "dim-vector.h"
-#include "lo-error.h"
-
-void
-gripe_nonconformant (const char *op, int op1_len, int op2_len)
-{
-  (*current_liboctave_error_handler)
-    ("%s: nonconformant arguments (op1 len: %d, op2 len: %d)",
-     op, op1_len, op2_len);
-}
-
-void
-gripe_nonconformant (const char *op, int op1_nr, int op1_nc,
-		     int op2_nr, int op2_nc)
-{
-  (*current_liboctave_error_handler)
-    ("%s: nonconformant arguments (op1 is %dx%d, op2 is %dx%d)",
-     op, op1_nr, op1_nc, op2_nr, op2_nc);
-}
-
-void
-gripe_nonconformant (const char *op, dim_vector& op1_dims,
-		     dim_vector& op2_dims)
-{
-  std::string op1_dims_str = op1_dims.str ();
-  std::string op2_dims_str = op2_dims.str ();
-
-  (*current_liboctave_error_handler)
-    ("%s: nonconformant arguments (op1 is %s, op2 is %s)",
-     op, op1_dims_str.c_str (), op2_dims_str.c_str ());
-}
-
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/MArray.cc b/liboctave/MArray.cc
--- a/liboctave/MArray.cc
+++ b/liboctave/MArray.cc
@@ -24,16 +24,17 @@ Software Foundation, 59 Temple Place - S
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "MArray.h"
+#include "Array-util.h"
 #include "lo-error.h"
 
 #include "MArray-defs.h"
 
 // One dimensional array with math ops.
 
 // Element by element MArray by scalar ops.
 
diff --git a/liboctave/MArray.h b/liboctave/MArray.h
--- a/liboctave/MArray.h
+++ b/liboctave/MArray.h
@@ -67,19 +67,15 @@ public:
     }
 
   // Currently, the OPS functions don't need to be friends, but that
   // may change.
 
   // MARRAY_OPS_FRIEND_DECLS (MArray)
 };
 
-// XXX FIXME XXX -- there must be a better place for this...
-extern void
-gripe_nonconformant (const char *op, int op1_len, int op2_len);
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/MArray2.cc b/liboctave/MArray2.cc
--- a/liboctave/MArray2.cc
+++ b/liboctave/MArray2.cc
@@ -24,16 +24,17 @@ Software Foundation, 59 Temple Place - S
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "MArray2.h"
+#include "Array-util.h"
 #include "lo-error.h"
 
 #include "MArray-defs.h"
 
 // Two dimensional array with math ops.
 
 // Element by element MArray2 by scalar ops.
 
diff --git a/liboctave/MArray2.h b/liboctave/MArray2.h
--- a/liboctave/MArray2.h
+++ b/liboctave/MArray2.h
@@ -75,19 +75,15 @@ public:
   MArray2<T> transpose (void) const { return Array2<T>::transpose (); }
 
   // Currently, the OPS functions don't need to be friends, but that
   // may change.
 
   // MARRAY_OPS_FRIEND_DECLS (MArray2)
 };
 
-extern void
-gripe_nonconformant (const char *op, int op1_nr, int op1_nc,
-		     int op2_nr, int op2_nc);
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/MArrayN.cc b/liboctave/MArrayN.cc
--- a/liboctave/MArrayN.cc
+++ b/liboctave/MArrayN.cc
@@ -24,16 +24,17 @@ Software Foundation, 59 Temple Place - S
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "MArrayN.h"
+#include "Array-util.h"
 #include "ArrayN-idx.h"
 #include "lo-error.h"
 
 #include "MArray-defs.h"
 
 // N-dimensional array with math ops.
 
 // Element by element MArrayN by scalar ops.
diff --git a/liboctave/MArrayN.h b/liboctave/MArrayN.h
--- a/liboctave/MArrayN.h
+++ b/liboctave/MArrayN.h
@@ -66,18 +66,15 @@ public:
 
   MArrayN<T>& operator = (const MArrayN<T>& a)
     {
       ArrayN<T>::operator = (a);
       return *this;
     }
 };
 
-extern void
-gripe_nonconformant (const char *op, dim_vector& op1_dims, dim_vector& op2_dims);
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/MDiagArray2.cc b/liboctave/MDiagArray2.cc
--- a/liboctave/MDiagArray2.cc
+++ b/liboctave/MDiagArray2.cc
@@ -24,16 +24,17 @@ Software Foundation, 59 Temple Place - S
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "MDiagArray2.h"
+#include "Array-util.h"
 #include "lo-error.h"
 
 #include "MArray-defs.h"
 
 // Some functions return a reference to this object after a failure.
 template <class T> MDiagArray2<T> MDiagArray2<T>::nil_array;
 
 // Two dimensional diagonal array with math ops.
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -72,21 +72,21 @@ TEMPLATE_SRC := Array.cc ArrayN.cc DiagA
 TI_SRC := Array-C.cc Array-b.cc Array-ch.cc Array-i.cc Array-d.cc \
 	Array-s.cc Array-so.cc Array-str.cc Array-idx-vec.cc \
 	MArray-C.cc MArray-ch.cc MArray-i.cc MArray-d.cc MArray-s.cc
 
 MATRIX_SRC := Array-flags.cc Array-util.cc CColVector.cc \
 	CDiagMatrix.cc CMatrix.cc CNDArray.cc CRowVector.cc \
 	CmplxAEPBAL.cc CmplxCHOL.cc CmplxDET.cc CmplxHESS.cc \
 	CmplxLU.cc CmplxQR.cc CmplxQRP.cc CmplxSCHUR.cc CmplxSVD.cc \
-	EIG.cc MArray-misc.cc boolMatrix.cc \
-	boolNDArray.cc chMatrix.cc chNDArray.cc dColVector.cc \
-	dDiagMatrix.cc dMatrix.cc dNDArray.cc dRowVector.cc \
-	dbleAEPBAL.cc dbleCHOL.cc dbleDET.cc dbleHESS.cc dbleLU.cc \
-	dbleQR.cc dbleQRP.cc dbleSCHUR.cc dbleSVD.cc
+	EIG.cc boolMatrix.cc boolNDArray.cc chMatrix.cc \
+	chNDArray.cc dColVector.cc  dDiagMatrix.cc dMatrix.cc \
+	dNDArray.cc dRowVector.cc dbleAEPBAL.cc dbleCHOL.cc \
+	dbleDET.cc dbleHESS.cc dbleLU.cc dbleQR.cc dbleQRP.cc \
+	dbleSCHUR.cc dbleSVD.cc
 
 MX_OP_SRC := $(shell $(AWK) -f $(srcdir)/mk-ops.awk prefix=mx list_cc_files=1 $(srcdir)/mx-ops)
 
 VX_OP_SRC := $(shell $(AWK) -f $(srcdir)/mk-ops.awk prefix=vx list_cc_files=1 $(srcdir)/vx-ops)
 
 LIBOCTAVE_CXX_SOURCES := Bounds.cc CollocWt.cc \
 	DASPK.cc DASRT.cc DASSL.cc FEGrid.cc LinConst.cc \
 	LPsolve.cc LSODE.cc NLEqn.cc ODES.cc ODESSA.cc \
diff --git a/liboctave/boolMatrix.cc b/liboctave/boolMatrix.cc
--- a/liboctave/boolMatrix.cc
+++ b/liboctave/boolMatrix.cc
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
 
+#include "Array-util.h"
 #include "lo-error.h"
 #include "str-vec.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
 
 // boolMatrix class.
 
 bool
diff --git a/liboctave/boolNDArray.cc b/liboctave/boolNDArray.cc
--- a/liboctave/boolNDArray.cc
+++ b/liboctave/boolNDArray.cc
@@ -98,15 +98,22 @@ boolNDArray::increment_index (Array<int>
 
 int
 boolNDArray::compute_index (Array<int>& ra_idx,
 			    const dim_vector& dimensions)
 {
   return ::compute_index (ra_idx, dimensions);
 }
 
+NDND_BOOL_OPS (boolNDArray, boolNDArray, false)
 NDND_CMP_OPS (boolNDArray, , boolNDArray, )
 
+NDS_BOOL_OPS (boolNDArray, bool, false)
+NDS_CMP_OPS (boolNDArray, , bool, )
+
+SND_BOOL_OPS (bool, boolNDArray, false)
+SND_CMP_OPS (bool, , boolNDArray, )
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/boolNDArray.h b/liboctave/boolNDArray.h
--- a/liboctave/boolNDArray.h
+++ b/liboctave/boolNDArray.h
@@ -94,17 +94,24 @@ public:
   //  bool all_elements_are_real (void) const;
   //  bool all_integers (double& max_val, double& min_val) const;
 
 private:
 
   boolNDArray (bool *d, dim_vector& dv) : ArrayN<bool> (d, dv) { }
 };
 
+NDND_BOOL_OP_DECLS (boolNDArray, boolNDArray)
 NDND_CMP_OP_DECLS (boolNDArray, boolNDArray)
 
+NDS_BOOL_OP_DECLS (boolNDArray, bool)
+NDS_CMP_OP_DECLS (boolNDArray, bool)
+
+SND_BOOL_OP_DECLS (bool, boolNDArray)
+SND_CMP_OP_DECLS (bool, boolNDArray)
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/dColVector.cc b/liboctave/dColVector.cc
--- a/liboctave/dColVector.cc
+++ b/liboctave/dColVector.cc
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
 
+#include "Array-util.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
 #include "oct-cmplx.h"
 
 // Fortran functions we call.
 
diff --git a/liboctave/dDiagMatrix.cc b/liboctave/dDiagMatrix.cc
--- a/liboctave/dDiagMatrix.cc
+++ b/liboctave/dDiagMatrix.cc
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
 
+#include "Array-util.h"
 #include "lo-error.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
 #include "oct-cmplx.h"
 
 // Diagonal Matrix class.
 
 bool
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -28,16 +28,17 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cfloat>
 
 #include <iostream>
 
+#include "Array-util.h"
 #include "byte-swap.h"
 #include "dMatrix.h"
 #include "dbleAEPBAL.h"
 #include "dbleDET.h"
 #include "dbleSCHUR.h"
 #include "dbleSVD.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
diff --git a/liboctave/dRowVector.cc b/liboctave/dRowVector.cc
--- a/liboctave/dRowVector.cc
+++ b/liboctave/dRowVector.cc
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
 
+#include "Array-util.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
 #include "oct-cmplx.h"
 
 // Fortran functions we call.
 
diff --git a/liboctave/mk-ops.awk b/liboctave/mk-ops.awk
--- a/liboctave/mk-ops.awk
+++ b/liboctave/mk-ops.awk
@@ -146,16 +146,18 @@ BEGIN {
 
 
 	  print "// DO NOT EDIT -- generated by mk-ops" > cc_file;
 
 	  print "#ifdef HAVE_CONFIG_H" >> cc_file;
 	  print "#include <config.h>" >> cc_file;
 	  print "#endif" >> cc_file;
 
+	  print "#include \"Array-util.h\"" >> cc_file;
+
 	  printf ("#include \"%s\"\n", h_file) >> cc_file;
 
 	  for (i in bool_headers)
 	    {
 	      printf ("#include \"%s\"\n", bool_headers[i]) >> cc_file;
 	      delete bool_headers[i];
 	    }
 
diff --git a/liboctave/mx-ops b/liboctave/mx-ops
--- a/liboctave/mx-ops
+++ b/liboctave/mx-ops
@@ -1,18 +1,24 @@
 # types
+b bool S NONE NO
+bm boolMatrix ND boolMatrix.h YES
+bnda boolNDArray ND boolNDArray.h YES
 cdm ComplexDiagMatrix DM CDiagMatrix.h YES
 cm ComplexMatrix M CMatrix.h YES
 cnda ComplexNDArray ND CNDArray.h YES
 cs Complex S oct-cmplx.h NO
 dm DiagMatrix DM dDiagMatrix.h YES
 m Matrix M dMatrix.h YES
 nda NDArray ND dNDArray.h YES
 s double S NONE NO
 # ops
+bnda bnda bnda L false
+bnda b bnda L false
+bnda bnda b L false
 cdm cdm dm B
 cdm dm cdm B
 cm cs cdm B
 cm cs dm B
 cm cs m BCL real NONE 0.0 boolMatrix.h
 cnda cs nda BCL real NONE 0.0 boolMatrix.h boolNDArray.h
 cm cdm cs B
 cm cdm cm B 0.0
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,15 @@
 2003-11-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* OPERATORS/op-b-bm.cc: New file.
+
+	* OPERATORS/op-bm-b.cc (op_el_and, op_el_or): Define and install.
+	* OPERATORS/op-bm-bm.cc (op_el_and, op_el_or, assign): Likewise.
+
 	* ov-str-mat.cc (CHAR_MATRIX_CONV): New macro.
 	* ov-str-mat.h (octave_char_matrix_str::double_value,
 	octave_char_matrix_str::matrix_value,
 	octave_char_matrix_str::array_value,
 	octave_char_matrix_str::complex_value,
 	octave_char_matrix_str::complex_matrix_value,
 	(octave_char_matrix_str::complex_array_value): Use it.
 
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -90,18 +90,18 @@ INCLUDES := Cell.h base-list.h c-file-pt
 	parse.h pr-output.h procstream.h sighandlers.h siglist.h \
 	symtab.h sysdep.h token.h toplev.h unwind-prot.h utils.h \
 	variables.h version.h xdiv.h xpow.h $(OV_INCLUDES) $(PT_INCLUDES)
 
 TI_XSRC := Array-oc.cc Array-os.cc Array-sym.cc Array-tc.cc
 
 TI_SRC := $(addprefix TEMPLATE-INST/, $(TI_XSRC))
 
-OP_XSRC := op-b-b.cc op-bm-b.cc op-bm-bm.cc op-cell.cc \
-	op-chm.cc op-cm-cm.cc op-cm-cs.cc op-cm-m.cc \
+OP_XSRC := op-b-b.cc op-b-bm.cc op-bm-b.cc op-bm-bm.cc \
+	op-cell.cc op-chm.cc op-cm-cm.cc op-cm-cs.cc op-cm-m.cc \
 	op-cm-s.cc op-cs-cm.cc op-cs-cs.cc op-cs-m.cc \
 	op-cs-s.cc op-fil-b.cc op-fil-bm.cc op-fil-cm.cc \
 	op-fil-cs.cc op-fil-m.cc op-fil-s.cc op-fil-lis.cc \
 	op-fil-rec.cc op-fil-str.cc op-list.cc op-m-cm.cc \
 	op-m-cs.cc op-m-m.cc op-m-s.cc op-range.cc op-s-cm.cc \
 	op-s-cs.cc op-s-m.cc op-s-s.cc op-str-m.cc \
 	op-str-s.cc op-str-str.cc op-streamoff.cc op-fcn-handle.cc
 
diff --git a/src/OPERATORS/op-b-bm.cc b/src/OPERATORS/op-b-bm.cc
new file mode 100644
--- /dev/null
+++ b/src/OPERATORS/op-b-bm.cc
@@ -0,0 +1,57 @@
+/*
+
+Copyright (C) 2003 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
+#pragma implementation
+#endif
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "gripes.h"
+#include "oct-obj.h"
+#include "ov.h"
+#include "ov-bool.h"
+#include "ov-bool-mat.h"
+#include "ov-typeinfo.h"
+#include "ops.h"
+#include "xdiv.h"
+#include "xpow.h"
+
+// bool matrix by bool ops.
+
+DEFNDBINOP_FN (el_and, bool, bool_matrix, bool, bool_array, mx_el_and)
+DEFNDBINOP_FN (el_or, bool, bool_matrix, bool, bool_array, mx_el_or)
+
+void
+install_b_bm_ops (void)
+{
+  INSTALL_BINOP (op_el_and, octave_bool, octave_bool_matrix, el_and);
+  INSTALL_BINOP (op_el_or, octave_bool, octave_bool_matrix, el_or);
+}
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/src/OPERATORS/op-bm-b.cc b/src/OPERATORS/op-bm-b.cc
--- a/src/OPERATORS/op-bm-b.cc
+++ b/src/OPERATORS/op-bm-b.cc
@@ -35,21 +35,27 @@ Software Foundation, 59 Temple Place - S
 #include "ov-bool-mat.h"
 #include "ov-typeinfo.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // bool matrix by bool ops.
 
+DEFNDBINOP_FN (el_and, bool_matrix, bool, bool_array, bool, mx_el_and)
+DEFNDBINOP_FN (el_or, bool_matrix, bool, bool_array, bool, mx_el_or)
+
 DEFASSIGNOP_FN (assign, bool_matrix, bool, assign)
 
 void
 install_bm_b_ops (void)
 {
+  INSTALL_BINOP (op_el_and, octave_bool_matrix, octave_bool, el_and);
+  INSTALL_BINOP (op_el_or, octave_bool_matrix, octave_bool, el_or);
+
   INSTALL_ASSIGNOP (op_asn_eq, octave_bool_matrix, octave_bool, assign);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-bm-bm.cc b/src/OPERATORS/op-bm-bm.cc
--- a/src/OPERATORS/op-bm-bm.cc
+++ b/src/OPERATORS/op-bm-bm.cc
@@ -48,24 +48,37 @@ DEFUNOP (transpose, bool_matrix)
   return octave_value (v.bool_matrix_value().transpose ());
 }
 
 // bool matrix by bool matrix ops.
 
 DEFNDBINOP_FN (eq, bool_matrix, bool_matrix, bool_array, bool_array, mx_el_eq)
 DEFNDBINOP_FN (ne, bool_matrix, bool_matrix, bool_array, bool_array, mx_el_ne)
 
+DEFNDBINOP_FN (el_and, bool_matrix, bool_matrix, bool_array, bool_array,
+	       mx_el_and)
+
+DEFNDBINOP_FN (el_or,  bool_matrix, bool_matrix, bool_array, bool_array,
+	       mx_el_or)
+
+DEFASSIGNOP_FN (assign, bool_matrix, bool_matrix, assign)
+
 void
 install_bm_bm_ops (void)
 {
   INSTALL_UNOP (op_not, octave_bool_matrix, not);
   INSTALL_UNOP (op_transpose, octave_bool_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_bool_matrix, transpose);
 
   INSTALL_BINOP (op_eq, octave_bool_matrix, octave_bool_matrix, eq);
   INSTALL_BINOP (op_ne, octave_bool_matrix, octave_bool_matrix, ne);
+
+  INSTALL_BINOP (op_el_and, octave_bool_matrix, octave_bool_matrix, el_and);
+  INSTALL_BINOP (op_el_or, octave_bool_matrix, octave_bool_matrix, el_or);
+
+  INSTALL_ASSIGNOP (op_asn_eq, octave_bool_matrix, octave_bool_matrix, assign);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ops.h b/src/ops.h
--- a/src/ops.h
+++ b/src/ops.h
@@ -18,16 +18,18 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_ops_h)
 #define octave_ops_h 1
 
+#include "Array-util.h"
+
 extern void install_ops (void);
 
 #define INSTALL_UNOP(op, t, f) \
   octave_value_typeinfo::register_unary_op \
     (octave_value::op, t::static_type_id (), oct_unop_ ## f);
 
 #define INSTALL_NCUNOP(op, t, f) \
   octave_value_typeinfo::register_non_const_unary_op \
diff --git a/src/xdiv.cc b/src/xdiv.cc
--- a/src/xdiv.cc
+++ b/src/xdiv.cc
@@ -21,16 +21,17 @@ Software Foundation, 59 Temple Place - S
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cassert>
 
+#include "Array-util.h"
 #include "CMatrix.h"
 #include "dMatrix.h"
 #include "CNDArray.h"
 #include "dNDArray.h"
 #include "oct-cmplx.h"
 #include "quit.h"
 
 #include "error.h"
diff --git a/src/xpow.cc b/src/xpow.cc
--- a/src/xpow.cc
+++ b/src/xpow.cc
@@ -22,16 +22,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cassert>
 #include <climits>
 
+#include "Array-util.h"
 #include "CColVector.h"
 #include "CDiagMatrix.h"
 #include "CMatrix.h"
 #include "EIG.h"
 #include "dDiagMatrix.h"
 #include "dMatrix.h"
 #include "mx-cm-cdm.h"
 #include "oct-cmplx.h"
