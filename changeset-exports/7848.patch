# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1204145112 -3600
#      Wed Feb 27 21:45:12 2008 +0100
# Node ID 6bb2bbc2bf4514c55e4db149eb6a9be3625b1530
# Parent  40b16e04172a4e62ad86ab60c16f8e730fc015ea
Remove data_property, replace with array_property or row_vector_property.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -22,16 +22,43 @@ 2008-06-04  Shai Ayal  <shaiay@users.sou
 
 	* graphics.h.in (axes::properties::update_xlim): call the new
 	axes::properties::calc_ticks_and_lims method
 	(axes::properties::update_ylim): ditto
 	(axes::properties::update_zlim): ditto
 
 2008-06-04  Michael Goffioul <michael.goffioul@gmail.com>
 
+	* genprops.awk (emit_get_data): Remove.
+	(emit_declarations): Treat row_vector_property as array_property and
+	remove data_property references.
+	* graphics.h.in (array_property::array_property(array_property)): Add
+	copy constructor.
+	(class data_property): Remove (replaced by array_property).
+	(class base_graphics_backend, class graphics_backend): Replace
+	data_property references with array_property.
+	(line::properties::xdata, line::properties::ydata,
+	line::properties::zdata, line::properties::ldata,
+	line::properties::udata, line::properties::xldata,
+	line::properties::xudata): Turn into row_vector_property.
+	(image::properties::xdata, image::properties::ydata): Likewise.
+	(image::properties::init): Add length constraints for xdata and ydata.
+	(patch::properties::xdata, patch::properties::ydata,
+	patch::properties::zdata, patch::properties::facevertexalphadata):
+	Turn into array_property.
+	(surface::properties::xdata, surface::properties::ydata,
+	surface::properties::zdata): Likewise.
+	(patch::properties::init): Add size constraints for xdata, ydata,
+	zdata and facevertexalphadata.
+	(surface::properties::init): Add size constraints for xdata, ydata and
+	zdata.
+	* graphics.cc (check_limit_vals): Remove override with data_property.
+	(axes::update_axis_limits): Replace data_property references with
+	array_property.
+
 	* graphics.h.in (root_figure::get_default): Use factory defaults when
 	no explicit default value exists.
 	(figure::properties::set___backend__): Reset __plot_stream__ to empty
 	value.
 	* graphics.cc (gh_manager::gh_manager): Call
 	graphics_backend::default_backend to make sure the default backend is
 	initialized.
 
diff --git a/src/genprops.awk b/src/genprops.awk
--- a/src/genprops.awk
+++ b/src/genprops.awk
@@ -219,26 +219,16 @@ function emit_get_callback (i)
   if (emit_get[i] == "definition")
     printf (" { %s.execute (data); }\n", name[i]);
   else
     printf (";\n");
 
   emit_get_accessor(i, "octave_value", "get");
 }
 
-## data_property
-
-function emit_get_data (i)
-{
-  emit_get_accessor(i, "NDArray", "array_value");
-
-  printf ("  data_property get_%s_property (void) const { return %s; }\n",
-          name[i], name[i]);
-}
-
 ## array_property
 
 function emit_get_array (i)
 {
   emit_get_accessor(i, "octave_value", "get");
 
   printf ("  array_property get_%s_property (void) const { return %s; }\n",
           name[i], name[i]);
@@ -282,18 +272,16 @@ function emit_declarations ()
       else if (type[i] == "handle_property")
         emit_get_accessor(i, "graphics_handle", "handle_value");
       else if (type[i] == "string_property")
         emit_get_accessor(i, "std::string", "string_value");
       else if (type[i] == "double_property")
         emit_get_accessor(i, "double", "double_value");
       else if (type[i] == "double_radio_property")
         emit_get_double_radio(i);
-      else if (type[i] == "data_property")
-        emit_get_data(i);
       else if (type[i] == "array_property" \
 	       || type[i] == "row_vector_property")
         emit_get_array(i);
       else if (type[i] == "bool_property")
         emit_get_bool(i);
       else if (type[i] == "radio_property")
         emit_get_radio(i);
       else if (type[i] == "color_property")
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -2457,33 +2457,16 @@ axes::get_default (const caseless_str& n
       graphics_object parent_obj = gh_manager::get_object (parent);
 
       retval = parent_obj.get_default (name);
     }
 
   return retval;
 }
 
-// FIXME: Remove in case all data_property are converted into
-// array_property
-static void
-check_limit_vals (double& min_val, double& max_val, double& min_pos,
-		  const data_property& data)
-{
-  double val = data.min_val ();
-  if (! (xisinf (val) || xisnan (val)) && val < min_val)
-    min_val = val;
-  val = data.max_val ();
-  if (! (xisinf (val) || xisnan (val)) && val > max_val)
-    max_val = val;
-  val = data.min_pos ();
-  if (! (xisinf (val) || xisnan (val)) && val > 0 && val < min_pos)
-    min_pos = val;
-}
-
 // FIXME: Maybe this should go into array_property class?
 static void
 check_limit_vals (double& min_val, double& max_val, double& min_pos,
 		  const array_property& data)
 {
   double val = data.min_val ();
   if (! (xisinf (val) || xisnan (val)) && val < min_val)
     min_val = val;
@@ -2697,24 +2680,24 @@ axes::update_axis_limits (const std::str
 	{
 	  for (octave_idx_type i = 0; i < n; i++)
 	    {
 	      graphics_object obj = gh_manager::get_object (kids(i));
 
 	      if (obj.isa ("line") || obj.isa ("image")
 		  || obj.isa ("patch") || obj.isa ("surface"))
 		{
-		  data_property xdata = obj.get_xdata_property ();
+		  array_property xdata = obj.get_xdata_property ();
 
 		  check_limit_vals (min_val, max_val, min_pos, xdata);
 
 		  if (obj.isa ("line"))
 		    {
-		      data_property xldata = obj.get_xldata_property ();
-		      data_property xudata = obj.get_xudata_property ();
+		      array_property xldata = obj.get_xldata_property ();
+		      array_property xudata = obj.get_xudata_property ();
 
 		      check_limit_vals (min_val, max_val, min_pos, xldata);
 		      check_limit_vals (min_val, max_val, min_pos, xudata);
 		    }
 		}
 	    }
 
 	  limits = xproperties.get_axis_limits (min_val, max_val, min_pos,
@@ -2731,24 +2714,24 @@ axes::update_axis_limits (const std::str
 	{
 	    for (octave_idx_type i = 0; i < n; i++)
 	    {
 	      graphics_object obj = gh_manager::get_object (kids(i));
 
 	      if (obj.isa ("line") || obj.isa ("image")
 		|| obj.isa ("patch") || obj.isa ("surface"))
 		{
-		  data_property ydata = obj.get_ydata_property ();
+		  array_property ydata = obj.get_ydata_property ();
 
 		  check_limit_vals (min_val, max_val, min_pos, ydata);
 
 		  if (obj.isa ("line"))
 		    {
-		      data_property ldata = obj.get_ldata_property ();
-		      data_property udata = obj.get_udata_property ();
+		      array_property ldata = obj.get_ldata_property ();
+		      array_property udata = obj.get_udata_property ();
 
 		      check_limit_vals (min_val, max_val, min_pos, ldata);
 		      check_limit_vals (min_val, max_val, min_pos, udata);
 		    }
 		}
 	    }
 
 	  limits = xproperties.get_axis_limits (min_val, max_val, min_pos,
@@ -2763,17 +2746,17 @@ axes::update_axis_limits (const std::str
       if (xproperties.zlimmode_is ("auto"))
 	{
 	  for (octave_idx_type i = 0; i < n; i++)
 	    {
 	      graphics_object obj = gh_manager::get_object (kids(i));
 
 	      if (obj.isa ("line") || obj.isa ("patch") || obj.isa ("surface"))
 		{
-		  data_property zdata = obj.get_zdata_property ();
+		  array_property zdata = obj.get_zdata_property ();
 
 		  check_limit_vals (min_val, max_val, min_pos, zdata);
 		}
 	    }
 
 	  limits = xproperties.get_axis_limits (min_val, max_val, min_pos,
 						xproperties.zscale_is ("log"));
 
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -798,16 +798,23 @@ public:
 
   array_property (const std::string& nm, const graphics_handle& h,
                   const octave_value& m)
       : base_property (nm, h), data (m)
     {
       get_data_limits ();
     }
 
+  // This copy constructor is only intended to be used
+  // internally to access min/max values; no need to
+  // copy constraints.
+  array_property (const array_property& p)
+    : base_property (p), data (p.data),
+      xmin (p.xmin), xmax (p.xmax), xminp (p.xminp) { }
+
   octave_value get (void) const { return data; }
 
   void set (const octave_value& v)
     {
       if (validate (v))
 	{
 	  data = v;
 
@@ -904,104 +911,16 @@ public:
   }
 
 private:
   OCTINTERP_API bool validate (const octave_value& v);
 };
 
 // ---------------------------------------------------------------------
 
-class data_property : public base_property
-{
-public:
-  data_property (void)
-    : base_property ("", graphics_handle ()) { }
-
-  data_property (const std::string& nm, const graphics_handle& h,
-                 const NDArray& m = NDArray ())
-    : base_property (nm, h),
-      data (m), xmin (octave_Inf), xmax (-octave_Inf), xminp (octave_Inf)
-  {
-    get_data_limits ();
-  }
-
-  data_property (const std::string& nm, const graphics_handle& h,
-                 const Matrix& m)
-    : base_property (nm, h),
-      data (m), xmin (octave_Inf), xmax (-octave_Inf), xminp (octave_Inf)
-  {
-    get_data_limits ();
-  }
-
-  data_property (const data_property& p)
-    : base_property (p), data (p.data),
-      xmin (p.xmin), xmax (p.xmax), xminp (p.xminp) { }
-
-  void set (const octave_value& val)
-  {
-    data = val.array_value ();
-
-    get_data_limits ();
-  }
-
-  octave_value get (void) const { return data; }
-
-  NDArray array_value (void) const { return data; }
-
-  Matrix matrix_value (void) const { return data.matrix_value (); }
-
-  double min_val (void) const { return xmin; }
-  double max_val (void) const { return xmax; }
-  double min_pos (void) const { return xminp; }
-
-  data_property& operator = (const octave_value& val)
-    {
-      set (val);
-      return *this;
-    }
-
-private:
-  NDArray data;
-  double xmin;
-  double xmax;
-  double xminp;
-
-  void get_data_limits (void)
-  {
-    octave_idx_type nel = data.numel ();
-
-    xmin = xminp = octave_Inf;
-    xmax = -octave_Inf;
-
-    if (nel > 0)
-      {
-	const double *d = data.data ();
-
-	for (octave_idx_type i = 0; i < nel; i++)
-	  {
-	    double val = d[i];
-
-	    if (! (xisinf (val) || xisnan (val)))
-	      {
-		if (val < xmin)
-		  xmin = val;
-
-		if (val > xmax)
-		  xmax = val;
-
-		if (val > 0 && val < xminp)
-		  xminp = val;
-	      }
-	  }
-      }
-  }
-};
-
-// ---------------------------------------------------------------------
-
 class bool_property : public radio_property
 {
 public:
   bool_property (const std::string& nm, const graphics_handle& h,
                  bool val)
     : radio_property (nm, h, radio_values (val ? "{on}|off" : "on|{off}"))
     { }
 
@@ -1203,19 +1122,16 @@ public:
     { return *(dynamic_cast<radio_property*> (rep)); }
 
   const color_property& as_color_property (void) const
     { return *(dynamic_cast<color_property*> (rep)); }
 
   const double_property& as_double_property (void) const
     { return *(dynamic_cast<double_property*> (rep)); }
 
-  const data_property& as_data_property (void) const
-    { return *(dynamic_cast<data_property*> (rep)); }
-  
   const bool_property& as_bool_property (void) const
     { return *(dynamic_cast<bool_property*> (rep)); }
   
   const handle_property& as_handle_property (void) const
     { return *(dynamic_cast<handle_property*> (rep)); }
     */
 
 private:
@@ -1705,56 +1621,56 @@ public:
   virtual void delete_children (void);
 
   Matrix get_children (void) const { return children; }
 
   // FIXME -- these functions should be generated automatically by the
   // genprops.awk script.
   //
   // EMIT_BASE_PROPERTIES_GET_FUNCTIONS
-  virtual data_property get_xdata_property (void) const
+  virtual array_property get_xdata_property (void) const
   {
     error ("get: invalid property \"xdata\"");
-    return data_property ();
+    return array_property ();
   }
 
-  virtual data_property get_ydata_property (void) const
+  virtual array_property get_ydata_property (void) const
   {
     error ("get: invalid property \"ydata\"");
-    return data_property ();
+    return array_property ();
   }
 
-  virtual data_property get_zdata_property (void) const
+  virtual array_property get_zdata_property (void) const
   {
     error ("get: invalid property \"zdata\"");
-    return data_property ();
+    return array_property ();
   }
 
-  virtual data_property get_ldata_property (void) const
+  virtual array_property get_ldata_property (void) const
   {
     error ("get: invalid property \"ldata\"");
-    return data_property ();
+    return array_property ();
   }
 
-  virtual data_property get_udata_property (void) const
+  virtual array_property get_udata_property (void) const
   {
     error ("get: invalid property \"udata\"");
-    return data_property ();
+    return array_property ();
   }
 
-  virtual data_property get_xldata_property (void) const
+  virtual array_property get_xldata_property (void) const
   {
     error ("get: invalid property \"xldata\"");
-    return data_property ();
+    return array_property ();
   }
 
-  virtual data_property get_xudata_property (void) const
+  virtual array_property get_xudata_property (void) const
   {
     error ("get: invalid property \"xudata\"");
-    return data_property ();
+    return array_property ();
   }
 
   virtual array_property get_cdata_property (void) const
   {
     error ("get: invalid property \"cdata\"");
     return array_property ();
   }
 
@@ -2080,53 +1996,53 @@ public:
   bool valid_object (void) const { return rep->valid_object (); }
 
   operator bool (void) const { return rep->valid_object (); }
 
   // FIXME -- these functions should be generated automatically by the
   // genprops.awk script.
   //
   // EMIT_GRAPHICS_OBJECT_GET_FUNCTIONS
-  data_property get_xdata_property (void) const
+  array_property get_xdata_property (void) const
   {
     const base_properties& props = get_properties ();
     return props.get_xdata_property ();
   }
 
-  data_property get_ydata_property (void) const
+  array_property get_ydata_property (void) const
   {
     const base_properties& props = get_properties ();
     return props.get_ydata_property ();
   }
 
-  data_property get_zdata_property (void) const
+  array_property get_zdata_property (void) const
   {
     const base_properties& props = get_properties ();
     return props.get_zdata_property ();
   }
 
-  data_property get_ldata_property (void) const
+  array_property get_ldata_property (void) const
   {
     const base_properties& props = get_properties ();
     return props.get_ldata_property ();
   }
 
-  data_property get_udata_property (void) const
+  array_property get_udata_property (void) const
   {
     const base_properties& props = get_properties ();
     return props.get_udata_property ();
   }
 
-  data_property get_xldata_property (void) const
+  array_property get_xldata_property (void) const
   {
     const base_properties& props = get_properties ();
     return props.get_xldata_property ();
   }
 
-  data_property get_xudata_property (void) const
+  array_property get_xudata_property (void) const
   {
     const base_properties& props = get_properties ();
     return props.get_xudata_property ();
   }
 
   array_property get_cdata_property (void) const
   {
     const base_properties& props = get_properties ();
@@ -2846,23 +2762,23 @@ public:
   public:
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     // properties which are not in matlab:
     // ldata, udata, xldata, xudata, keylabel, interpreter
 
     BEGIN_PROPERTIES(line)
-      data_property xdata l , default_data ()
-      data_property ydata l , default_data ()
-      data_property zdata l , Matrix ()
-      data_property ldata l , Matrix ()
-      data_property udata l , Matrix ()
-      data_property xldata l , Matrix ()
-      data_property xudata l , Matrix ()
+      row_vector_property xdata l , default_data ()
+      row_vector_property ydata l , default_data ()
+      row_vector_property zdata l , Matrix ()
+      row_vector_property ldata l , Matrix ()
+      row_vector_property udata l , Matrix ()
+      row_vector_property xldata l , Matrix ()
+      row_vector_property xudata l , Matrix ()
       color_property color , color_values (0, 0, 0)
       radio_property linestyle , "{-}|--|:|-.|none"
       double_property linewidth , 0.5
       radio_property marker , "{none}|s|o|x|+|.|*|<|>|v|^|d|p|h"
       color_property markeredgecolor , "{auto}|none"
       color_property markerfacecolor , "auto|{none}"
       double_property markersize , 6
       string_property keylabel , ""
@@ -2959,25 +2875,27 @@ class OCTINTERP_API image : public base_
 public:
   class OCTINTERP_API properties : public base_properties
   {
   public:
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES(image)
-      data_property xdata l , Matrix ()
-      data_property ydata l , Matrix ()
+      row_vector_property xdata l , Matrix ()
+      row_vector_property ydata l , Matrix ()
       array_property cdata l , Matrix ()
       radio_property cdatamapping a , "{scaled}|direct"
     END_PROPERTIES
 
   protected:
     void init (void)
       {
+	xdata.add_constraint (2);
+	ydata.add_constraint (2);
 	cdata.add_constraint ("double");
 	cdata.add_constraint ("uint8");
 	cdata.add_constraint (dim_vector (-1, -1));
 	cdata.add_constraint (dim_vector (-1, -1, 3));
       }
   };
 
 private:
@@ -3008,23 +2926,23 @@ public:
   {
   public:
     octave_value get_color_data (void) const;
     
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES(patch)
-      data_property xdata l , Matrix ()
-      data_property ydata l , Matrix ()
-      data_property zdata l , Matrix ()
+      array_property xdata l , Matrix ()
+      array_property ydata l , Matrix ()
+      array_property zdata l , Matrix ()
       array_property cdata l , Matrix ()
       radio_property cdatamapping , "{scaled}|direct"
       array_property faces , Matrix ()
-      data_property facevertexalphadata , Matrix ()
+      array_property facevertexalphadata , Matrix ()
       array_property facevertexcdata , Matrix ()
       array_property vertices , Matrix ()
       array_property vertexnormals , Matrix ()
       radio_property normalmode , "{auto}|manual"
       color_property facecolor , "{flat}|none|interp"
       double_radio_property facealpha , double_radio_property (1.0, radio_values ("flat|interp"))
       radio_property facelighting , "flat|{none}|gouraud|phong"
       color_property edgecolor , color_property (color_values (0, 0, 0), radio_values ("flat|none|interp"))
@@ -3045,22 +2963,26 @@ public:
       double_property markersize , 6
       string_property keylabel , ""
       radio_property interpreter , "{tex}|none|latex"
     END_PROPERTIES
 
   protected:
     void init (void)
       {
+	xdata.add_constraint (dim_vector (-1, -1));
+	ydata.add_constraint (dim_vector (-1, -1));
+	zdata.add_constraint (dim_vector (-1, -1));
         vertices.add_constraint (dim_vector (-1, 2));
         vertices.add_constraint (dim_vector (-1, 3));
 	cdata.add_constraint (dim_vector (-1, -1));
 	cdata.add_constraint (dim_vector (-1, -1, 3));
 	facevertexcdata.add_constraint (dim_vector (-1, 1));
 	facevertexcdata.add_constraint (dim_vector (-1, 3));
+	facevertexalphadata.add_constraint (dim_vector (-1, 1));
       }
   };
 
 private:
   properties xproperties;
 
 public:
   patch (const graphics_handle& mh, const graphics_handle& p)
@@ -3087,19 +3009,19 @@ public:
   {
   public:
     octave_value get_color_data (void) const;
 
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES(surface)
-      data_property xdata lu , Matrix ()
-      data_property ydata lu , Matrix ()
-      data_property zdata lu , Matrix ()
+      array_property xdata lu , Matrix ()
+      array_property ydata lu , Matrix ()
+      array_property zdata lu , Matrix ()
       array_property cdata l , Matrix ()
       radio_property cdatamapping a , "{scaled}|direct"
       color_property facecolor , "{flat}|none|interp|texturemap"
       double_radio_property facealpha , double_radio_property (1.0, radio_values ("flat|interp"))
       color_property edgecolor , color_property (color_values (0, 0, 0), radio_values ("flat|none|interp"))
       radio_property linestyle , "{-}|--|:|-.|none"
       double_property linewidth , 0.5
       radio_property marker , "{none}|s|o|x|+|.|*|<|>|v|^|d|p|h"
@@ -3123,16 +3045,19 @@ public:
       double_property specularexponent , 10
       double_property specularstrength , 0.9
       array_property vertexnormals u , Matrix ()
     END_PROPERTIES
 
   protected:
     void init (void)
       {
+	xdata.add_constraint (dim_vector (-1, -1));
+	ydata.add_constraint (dim_vector (-1, -1));
+	zdata.add_constraint (dim_vector (-1, -1));
 	alphadata.add_constraint ("double");
 	alphadata.add_constraint ("uint8");
 	alphadata.add_constraint (dim_vector (-1, -1));
 	vertexnormals.add_constraint (dim_vector (-1, -1, 3));
 	cdata.add_constraint ("double");
 	cdata.add_constraint ("uint8");
 	cdata.add_constraint (dim_vector (-1, -1));
 	cdata.add_constraint (dim_vector (-1, -1, 3));
