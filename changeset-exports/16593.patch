# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1367271641 14400
#      Mon Apr 29 17:40:41 2013 -0400
# Node ID e13051d7a4729812cf80d82c4b9729ac65073cad
# Parent  d70f61485e5f39b909c43b1551f0127753b49ea0
allow GUI window layout to be restored

* main-window.h, main-window.cc (main_window::set_window_layout):
New function.
(main_window::read_settings): Call set_window_layout for current
settings.
(main_window::reset_windows): Call set_window_layout for default
settings.
(main_window::construct_window_menu): Enable reset_windows_action.
* resource-manager.h, resource-manager.cc (default_qt_settings_file):
Return QString instead of std::string.  Change all callers.
(resource_manager::default_settings): New member variable.
(resource_manager::resource_manager): Initialize default_settings.
(resource_manager::~resource_manager): Delete default_settings.
(resource_manager::get_default_settings,
resource_manager::do_get_default_settings): New functions.
(resource_manager::do_is_first_run, resource_manager::do_get_settings,
resource_manager::do_get_home_path): Now const.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -321,19 +321,21 @@ main_window::prepare_to_exit (void)
 
 void
 main_window::exit (int status)
 {
   qApp->exit (status);
 }
 
 void
-main_window::reset_windows ()
+main_window::reset_windows (void)
 {
-  // TODO: Implement.
+  QSettings *settings = resource_manager::get_default_settings ();
+
+  set_window_layout (settings);
 }
 
 void
 main_window::change_directory (const QString& dir)
 {
   // Remove existing entry, if any, then add new directory at top and
   // mark it as the current directory.  Finally, update the file list
   // widget.
@@ -515,52 +517,70 @@ main_window::closeEvent (QCloseEvent *e)
   e->ignore ();
   octave_link::post_event (this, &main_window::exit_callback);
 }
 
 void
 main_window::read_settings (void)
 {
   QSettings *settings = resource_manager::get_settings ();
+
   if (!settings)
     {
       qDebug("Error: QSettings pointer from resource manager is NULL.");
       return;
     }
 
-  restoreState (settings->value ("MainWindow/windowState").toByteArray ());
-  settings->beginGroup ("DockWidgets");
-  // restoring the geometry of all dock-widgets
-  foreach (QObject *obj, children ())
-    {
-      QString name = obj->objectName ();
-      if (obj->inherits ("QDockWidget") && ! name.isEmpty ())
-        {
-          QDockWidget *widget = qobject_cast<QDockWidget *> (obj);
-          QVariant val = settings->value (name);
-          widget->restoreGeometry (val.toByteArray ());
-          bool floating = settings->value (name+"Floating", false).toBool ();
-          bool visible = settings->value (name+"Visible", true).toBool ();
-          if (floating)
-            widget->setWindowFlags (Qt::Window); // if floating, make window from widget
-          widget->setVisible (visible);          // make widget visible if desired (setWindowFlags hides widget)
-        }
-    }
-  settings->endGroup();
-  restoreGeometry (settings->value ("MainWindow/geometry").toByteArray ());
+  set_window_layout (settings);
+
   // restore the list of the last directories
   QStringList curr_dirs = settings->value ("MainWindow/current_directory_list").toStringList ();
   for (int i=0; i < curr_dirs.size (); i++)
     {
       _current_directory_combo_box->addItem (curr_dirs.at (i));
     }
   emit settings_changed (settings);
 }
 
 void
+main_window::set_window_layout (QSettings *settings)
+{
+  restoreState (settings->value ("MainWindow/windowState").toByteArray ());
+
+  settings->beginGroup ("DockWidgets");
+
+  // Restore the geometry of all dock-widgets
+  foreach (QObject *obj, children ())
+    {
+      QString name = obj->objectName ();
+
+      if (obj->inherits ("QDockWidget") && ! name.isEmpty ())
+        {
+          QDockWidget *widget = qobject_cast<QDockWidget *> (obj);
+          QVariant val = settings->value (name);
+
+          widget->restoreGeometry (val.toByteArray ());
+
+          // If floating, make window from widget.
+          bool floating = settings->value (name+"Floating", false).toBool ();
+          if (floating)
+            widget->setWindowFlags (Qt::Window);
+
+          // make widget visible if desired (setWindowFlags hides widget).
+          bool visible = settings->value (name+"Visible", true).toBool ();
+          widget->setVisible (visible);
+        }
+    }
+
+  settings->endGroup ();
+
+  restoreGeometry (settings->value ("MainWindow/geometry").toByteArray ());
+}
+
+void
 main_window::write_settings (void)
 {
   QSettings *settings = resource_manager::get_settings ();
   if (!settings)
     {
       qDebug("Error: QSettings pointer from resource manager is NULL.");
       return;
     }
@@ -1189,19 +1209,17 @@ main_window::construct_window_menu (QMen
     (window_menu, tr ("Editor"), false, ctrl + Qt::Key_4);
 
   QAction *documentation_action = construct_window_menu_item
     (window_menu, tr ("Documentation"), false, ctrl + Qt::Key_5);
 
   window_menu->addSeparator ();
 
   QAction *reset_windows_action
-    = window_menu->addAction (tr ("Reset Windows"));
-
-  reset_windows_action->setEnabled (false); // TODO: Make this work.
+    = window_menu->addAction (tr ("Reset Default Window Layout"));
 
   connect (show_command_window_action, SIGNAL (toggled (bool)),
            command_window, SLOT (setVisible (bool)));
 
   connect (command_window, SIGNAL (active_changed (bool)),
            show_command_window_action, SLOT (setChecked (bool)));
 
   connect (show_workspace_action, SIGNAL (toggled (bool)),
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -130,16 +130,17 @@ public slots:
   void debug_quit (void);
 
   void handle_insert_debugger_pointer_request (const QString& file, int line);
   void handle_delete_debugger_pointer_request (const QString& file, int line);
   void handle_update_breakpoint_marker_request (bool insert,
                                                 const QString& file, int line);
 
   void read_settings (void);
+  void set_window_layout (QSettings *settings);
   void write_settings (void);
   void connect_visibility_changed (void);
 
   void connect_uiwidget_links ();
 
   void handle_create_dialog (const QString& message, const QString& title,
                              const QString& icon, const QStringList& button,
                              const QString& defbutton,
diff --git a/libgui/src/resource-manager.cc b/libgui/src/resource-manager.cc
--- a/libgui/src/resource-manager.cc
+++ b/libgui/src/resource-manager.cc
@@ -37,25 +37,40 @@ along with Octave; see the file COPYING.
 #include "singleton-cleanup.h"
 
 #include "defaults.h"
 
 #include "resource-manager.h"
 
 resource_manager *resource_manager::instance = 0;
 
+static QString
+default_qt_settings_file (void)
+{
+  std::string dsf = octave_env::getenv ("OCTAVE_DEFAULT_QT_SETTINGS");
+
+  if (dsf.empty ())
+    dsf = Voct_etc_dir + file_ops::dir_sep_str () + "default-qt-settings";
+
+  return QString::fromStdString (dsf);
+}
+
 resource_manager::resource_manager (void)
   : settings (0), home_path (), first_run (false)
 {
   do_reload_settings ();
+
+  default_settings = new QSettings (default_qt_settings_file (),
+                                    QSettings::IniFormat);
 }
 
 resource_manager::~resource_manager (void)
 {
   delete settings;
+  delete default_settings;
 }
 
 
 QString
 resource_manager::get_gui_translation_dir (void)
 {
   // get environment variable for the locale dir (e.g. from run-octave)
   std::string dldir = octave_env::getenv ("OCTAVE_LOCALE_DIR");
@@ -99,68 +114,62 @@ resource_manager::instance_ok (void)
 
       retval = false;
     }
 
   return retval;
 }
 
 QSettings *
-resource_manager::do_get_settings (void)
+resource_manager::do_get_settings (void) const
 {
   return settings;
 }
 
-QString
-resource_manager::do_get_home_path (void)
+QSettings *
+resource_manager::do_get_default_settings (void) const
 {
-  return home_path;
+  return default_settings;
 }
 
-static std::string
-default_qt_settings_file (void)
+QString
+resource_manager::do_get_home_path (void) const
 {
-  std::string dsf = octave_env::getenv ("OCTAVE_DEFAULT_QT_SETTINGS");
-
-  if (dsf.empty ())
-    dsf = Voct_etc_dir + file_ops::dir_sep_str () + "default-qt-settings";
-
-  return dsf;
+  return home_path;
 }
 
 void
 resource_manager::do_reload_settings (void)
 {
   QDesktopServices desktopServices;
   home_path = desktopServices.storageLocation (QDesktopServices::HomeLocation);
   QString settings_path = home_path + "/.config/octave/";
   QString settings_file = settings_path + "qt-settings";
 
   if (!QFile::exists (settings_file))
     {
       QDir("/").mkpath (settings_path);
-      QFile::copy (QString::fromStdString (default_qt_settings_file ()),
-                   settings_file);
+      QFile::copy (default_qt_settings_file (), settings_file);
       first_run = true;
     }
   else
     first_run = false;
 
   do_set_settings (settings_file);
 }
 
 void
 resource_manager::do_set_settings (const QString& file)
 {
   delete settings;
   settings = new QSettings (file, QSettings::IniFormat);
 }
 
 bool
-resource_manager::do_is_first_run (void)
+resource_manager::do_is_first_run (void) const
 {
   return first_run;
 }
 
 void
 resource_manager::do_update_network_settings (void)
 {
   QNetworkProxy::ProxyType proxyType = QNetworkProxy::NoProxy;
diff --git a/libgui/src/resource-manager.h b/libgui/src/resource-manager.h
--- a/libgui/src/resource-manager.h
+++ b/libgui/src/resource-manager.h
@@ -39,16 +39,21 @@ public:
 
   ~resource_manager ();
 
   static QSettings *get_settings (void)
   {
     return instance_ok () ? instance->do_get_settings () : 0;
   }
 
+  static QSettings *get_default_settings (void)
+  {
+    return instance_ok () ? instance->do_get_default_settings () : 0;
+  }
+
   static QString get_home_path (void)
   {
     return instance_ok () ? instance->do_get_home_path () : QString ();
   }
 
   static void reload_settings (void)
   {
     if (instance_ok ())
@@ -89,27 +94,31 @@ private:
   resource_manager (const resource_manager&);
 
   resource_manager& operator = (const resource_manager&);
 
   static bool instance_ok (void);
 
   QSettings *settings;
 
+  QSettings *default_settings;
+
   QString home_path;
 
   bool first_run;
 
-  QSettings *do_get_settings (void);
+  QSettings *do_get_settings (void) const;
 
-  QString do_get_home_path (void);
+  QSettings *do_get_default_settings (void) const;
+
+  QString do_get_home_path (void) const;
 
   void do_reload_settings (void);
 
   void do_set_settings (const QString& file);
 
   void do_update_network_settings (void);
 
-  bool do_is_first_run (void);
+  bool do_is_first_run (void) const;
 
 };
 
 #endif // RESOURCEMANAGER_H
