# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1466088207 14400
#      Thu Jun 16 10:43:27 2016 -0400
# Node ID 6f62bd2489196693f9c197b09fd8b5b732e23691
# Parent  24215a16f3b21ece1bae8b1b0157a2d83eb811d1
use wrapper functions for mkoctfile and main

* unistd-wrappers.c, unistd-wrappers.h (octave_ctermid_wrapper,
octave_setsid_wrapper): New functions.

* main.in.cc, mkoctfile.in.cc: Use unistd and wait wrappers.

* src/module.mk (src_mkoctfile_LDADD): Also link with libwrappers.la.

diff --git a/liboctave/wrappers/unistd-wrappers.c b/liboctave/wrappers/unistd-wrappers.c
--- a/liboctave/wrappers/unistd-wrappers.c
+++ b/liboctave/wrappers/unistd-wrappers.c
@@ -71,23 +71,39 @@ octave_chdir_wrapper (const char *nm)
 }
 
 int
 octave_close_wrapper (int fd)
 {
   return close (fd);
 }
 
+const char *
+octave_ctermid_wrapper (void)
+{
+#if defined (HAVE_CTERMID)
+  return ctermid (0);
+#else
+  return "/dev/tty";
+#endif
+}
+
 int
 octave_dup2_wrapper (int fd1, int fd2)
 {
   return dup2 (fd1, fd2);
 }
 
 int
+octave_execv_wrapper (const char *file, char *const *argv)
+{
+  return execv (file, argv);
+}
+
+int
 octave_execvp_wrapper (const char *file, char *const *argv)
 {
   return execvp (file, argv);
 }
 
 pid_t
 octave_fork_wrapper (void)
 {
@@ -173,16 +189,22 @@ octave_pipe_wrapper (int *fd)
 }
 
 int
 octave_rmdir_wrapper (const char *nm)
 {
   return rmdir (nm);
 }
 
+pid_t
+octave_setsid_wrapper (void)
+{
+  return setsid ();
+}
+
 int
 octave_stdin_fileno (void)
 {
   return STDIN_FILENO;
 }
 
 int
 octave_stdout_fileno (void)
diff --git a/liboctave/wrappers/unistd-wrappers.h b/liboctave/wrappers/unistd-wrappers.h
--- a/liboctave/wrappers/unistd-wrappers.h
+++ b/liboctave/wrappers/unistd-wrappers.h
@@ -36,18 +36,22 @@ extern int octave_access_w_ok (void);
 extern int octave_access_x_ok (void);
 
 extern int octave_access_wrapper (const char *nm, int mode);
 
 extern int octave_chdir_wrapper (const char *nm);
 
 extern int octave_close_wrapper (int fd);
 
+extern const char *octave_ctermid_wrapper (void);
+
 extern int octave_dup2_wrapper (int fd1, int fd2);
 
+extern int octave_execv_wrapper (const char *file, char *const *argv);
+
 extern int octave_execvp_wrapper (const char *file, char *const *argv);
 
 extern pid_t octave_fork_wrapper (void);
 
 extern int octave_ftruncate_wrapper (int fd, off_t sz);
 
 extern char *octave_getcwd_wrapper (char *nm, size_t len);
 
@@ -70,16 +74,18 @@ extern uid_t octave_getuid_wrapper (void
 extern int octave_isatty_wrapper (int fd);
 
 extern int octave_link_wrapper (const char *nm1, const char *nm2);
 
 extern int octave_pipe_wrapper (int *fd);
 
 extern int octave_rmdir_wrapper (const char *nm);
 
+extern pid_t octave_setsid_wrapper (void);
+
 extern int octave_stdin_fileno (void);
 
 extern int octave_stdout_fileno (void);
   
 extern int octave_symlink_wrapper (const char *nm1, const char *nm2);
 
 extern int octave_unlink_wrapper (const char *nm);
 
diff --git a/src/main.in.cc b/src/main.in.cc
--- a/src/main.in.cc
+++ b/src/main.in.cc
@@ -34,19 +34,18 @@ along with Octave; see the file COPYING.
 
 #include <cstdlib>
 #include <cstring>
 
 #include <algorithm>
 #include <iostream>
 #include <string>
 
-#include <sys/types.h>
-#include <unistd.h>
-
+#include "fcntl-wrappers.h"
+#include "unistd-wrappers.h"
 #include "wait-wrappers.h"
 
 #if ! defined (OCTAVE_VERSION)
 #  define OCTAVE_VERSION %OCTAVE_VERSION%
 #endif
 
 #if ! defined (OCTAVE_ARCHLIBDIR)
 #  define OCTAVE_ARCHLIBDIR %OCTAVE_ARCHLIBDIR%
@@ -58,23 +57,20 @@ along with Octave; see the file COPYING.
 
 #if ! defined (OCTAVE_PREFIX)
 #  define OCTAVE_PREFIX %OCTAVE_PREFIX%
 #endif
 
 #include "display-available.h"
 #include "shared-fcns.h"
 
-#include <cstdlib>
-
 #if (defined (HAVE_OCTAVE_QT_GUI) \
      && ! defined (__WIN32__) || defined (__CYGWIN__))
 
 #include <signal.h>
-#include <fcntl.h>
 
 typedef void sig_handler (int);
 
 // Forward signals to the GUI process.
 
 static pid_t gui_pid = 0;
 
 static int caught_signal = -1;
@@ -223,27 +219,23 @@ install_signal_handlers (void)
 
 }
 
 static bool
 have_controlling_terminal (void)
 {
   int retval = false;
 
-#if defined (HAVE_CTERMID)
-  const char *ctty = ctermid (0);
-#else
-  const char *ctty = "/dev/tty";
-#endif
+  const char *ctty = octave_ctermid_wrapper ();
 
-  int fd = gnulib::open (ctty, O_RDWR, 0);
+  int fd = octave_open_wrapper (ctty, octave_o_rdwr_wrapper (), 0);
 
   if (fd >= 0)
     {
-      gnulib::close (fd);
+      octave_close_wrapper (fd);
 
       retval = true;
     }
 
   return retval;
 }
 
 #endif
@@ -395,17 +387,17 @@ prepare_spawn (char **argv)
 
 static int
 octave_exec (const std::string& file, char **argv)
 {
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
   argv = prepare_spawn (argv);
   return _spawnv (_P_WAIT, file.c_str (), argv);
 #else
-  execv (file.c_str (), argv);
+  octave_execv_wrapper (file.c_str (), argv);
 
   std::cerr << "octave: failed to exec '" << file << "'" << std::endl;
 
   return 1;
 #endif
 }
 
 static char *
@@ -535,29 +527,29 @@ main (int argc, char **argv)
 
 #if (defined (HAVE_OCTAVE_QT_GUI) \
      && ! defined (__WIN32__) || defined (__CYGWIN__))
 
   if (gui_libs && start_gui && have_controlling_terminal ())
     {
       install_signal_handlers ();
 
-      gui_pid = fork ();
+      gui_pid = octave_fork_wrapper ();
 
       if (gui_pid < 0)
         {
           std::cerr << "octave: fork failed!" << std::endl;
 
           retval = 1;
         }
       else if (gui_pid == 0)
         {
           // Child.
 
-          if (setsid () < 0)
+          if (octave_setsid_wrapper () < 0)
             {
               std::cerr << "octave: error calling setsid!" << std::endl;
 
               retval = 1;
             }
           else
             retval = octave_exec (file, new_argv);
         }
diff --git a/src/mkoctfile.in.cc b/src/mkoctfile.in.cc
--- a/src/mkoctfile.in.cc
+++ b/src/mkoctfile.in.cc
@@ -30,34 +30,18 @@ along with Octave; see the file COPYING.
 #include <map>
 #include <list>
 #include <algorithm>
 #include <iostream>
 #include <fstream>
 #include <vector>
 #include <cstdlib>
 
-#include <sys/types.h>
-#include <unistd.h>
-
-// This mess suggested by the autoconf manual.
-
-#include <sys/types.h>
-
-#if defined HAVE_SYS_WAIT_H
-#  include <sys/wait.h>
-#endif
-
-#if ! defined (WIFEXITED)
-#  define WIFEXITED(stat_val) (((stat_val) & 255) == 0)
-#endif
-
-#if ! defined (WEXITSTATUS)
-#  define WEXITSTATUS(stat_val) (static_cast<unsigned> (stat_val) >> 8)
-#endif
+#include "unistd-wrappers.h"
+#include "wait-wrappers.h"
 
 static std::map<std::string, std::string> vars;
 
 #if ! defined (OCTAVE_VERSION)
 #  define OCTAVE_VERSION %OCTAVE_CONF_VERSION%
 #endif
 
 #if ! defined (OCTAVE_PREFIX)
@@ -359,18 +343,18 @@ ends_with (const std::string& s, const s
 static int
 run_command (const std::string& cmd)
 {
   if (debug)
     std::cout << cmd << std::endl;
 
   int result = system (cmd.c_str ());
 
-  if (WIFEXITED (result))
-    result = WEXITSTATUS (result);
+  if (octave_wifexited_wrapper (result))
+    result = octave_wexitstatus_wrapper (result);
 
   return result;
 }
 
 bool
 is_true (const std::string& s)
 {
   return (s == "yes" || s == "true");
@@ -588,17 +572,17 @@ main (int argc, char **argv)
   std::list<std::string>::const_iterator it;
 
   if (depend)
     {
       for (it = cfiles.begin (); it != cfiles.end (); ++it)
         {
           std::string f = *it, dfile = basename (f, true) + ".d", line;
 
-          gnulib::unlink (dfile.c_str ());
+          octave_unlink_wrapper (dfile.c_str ());
           std::string cmd = vars["CC"] + " "
                             + vars["DEPEND_FLAGS"] + " "
                             + vars["CPPFLAGS"] + " "
                             + vars["ALL_CFLAGS"] + " "
                             + incflags  + " " + defs + " " + quote_path (f);
 
           FILE *fd = popen (cmd.c_str (), "r");
           std::ofstream fo (dfile.c_str ());
@@ -622,17 +606,17 @@ main (int argc, char **argv)
           pclose (fd);
           fo.close ();
         }
 
       for (it = ccfiles.begin (); it != ccfiles.end (); ++it)
         {
           std::string f = *it, dfile = basename (f, true) + ".d", line;
 
-          gnulib::unlink (dfile.c_str ());
+          octave_unlink_wrapper (dfile.c_str ());
           std::string cmd = vars["CC"] + " "
                             + vars["DEPEND_FLAGS"] + " "
                             + vars["CPPFLAGS"] + " "
                             + vars["ALL_CXXFLAGS"] + " "
                             + incflags  + " " + defs + " " + quote_path (f);
 
           FILE *fd = popen (cmd.c_str (), "r");
           std::ofstream fo (dfile.c_str ());
diff --git a/src/module.mk b/src/module.mk
--- a/src/module.mk
+++ b/src/module.mk
@@ -134,16 +134,17 @@ src_octave_gui_CXXFLAGS = \
   $(AM_CXXFLAGS) \
   $(WARN_CXXFLAGS)
 
 src_mkoctfile_SOURCES =
 
 nodist_src_mkoctfile_SOURCES = src/mkoctfile.cc
 
 src_mkoctfile_LDADD = \
+  liboctave/wrappers/libwrappers.la \
   libgnu/libgnu.la $(LIBS)
 
 src_mkoctfile_CPPFLAGS = \
   $(SRC_DIR_CPPFLAGS) \
   $(OCTAVE_CPPFLAGS)
 
 src_mkoctfile_CXXFLAGS = \
   $(AM_CXXFLAGS) \
