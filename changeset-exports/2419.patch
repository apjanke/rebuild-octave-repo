# HG changeset patch
# User jwe
# Date 845487972 0
#      Wed Oct 16 17:46:12 1996 +0000
# Node ID 015cbef2b75f29499bb5f3bad4b38bed7dbe1106
# Parent  25a26fe3f1d491353021267889b5e465c270686c
[project @ 1996-10-16 17:46:12 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,15 @@
 Wed Oct 16 12:00:11 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* pt-mat.cc (tm_row_const::tm_row_const_rep::eval_error,
+	tm_row_const::tm_row_const_rep::eval_warning): New functions.
+	(tm_row_const::tm_row_const (const tree_matrix_row&): Use them to
+	give better error messages.
+
 	* pt-fvc.cc (tree_identifier::eval): Avoid dereferencing null
 	object_to_eval.
 
 Tue Oct 15 11:35:51 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* op-cs-cm.cc, op-cs-cs.cc, op-cs-m.cc, op-cs-s.cc
 	(complex_matrix_conv): New functions.
 	Install preferred assignment conversion and widening ops.
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -93,16 +93,21 @@ private:
     void init (const tree_matrix_row&);
 
   private:
 
     tm_row_const_rep (const tm_row_const_rep&);
 
     tm_row_const_rep& operator =
       (const tm_row_const_rep&);
+
+
+    void eval_error (const char *msg, int l, int c) const;
+
+    void eval_warning (const char *msg, int l, int c) const;
   };
 
 public:
 
   tm_row_const (void) : rep (0) { }
 
   tm_row_const (const tree_matrix_row& mr)
     : rep (new tm_row_const_rep (mr)) { }
@@ -177,34 +182,37 @@ tm_row_const::tm_row_const_rep::init (co
       else
 	{
 	  int this_elt_nr = tmp.rows ();
 	  int this_elt_nc = tmp.columns ();
 
 	  if (this_elt_nr == 0 || this_elt_nc == 0)
 	    {
 	      if (Vempty_list_elements_ok < 0)
-		warning ("empty matrix found in matrix list");
+		eval_warning ("empty matrix found in matrix list",
+			      elt->line (), elt->column ());
 	      else if (Vempty_list_elements_ok == 0)
 		{
-		  ::error ("empty matrix found in matrix list");
+		  eval_error ("empty matrix found in matrix list",
+			      elt->line (), elt->column ());
 		  break;
 		}
 	    }
 	  else
 	    {
 	      if (first_elem)
 		{
 		  first_elem = false;
 
 		  nr = this_elt_nr;
 		}
 	      else if (this_elt_nr != nr)
 		{
-		  ::error ("number of rows must match");
+		  eval_error ("number of rows must match",
+			      elt->line (), elt->column ());
 		  break;
 		}
 
 	      nc += this_elt_nc;
 
 	      append (tmp);
 	    }
 
@@ -214,16 +222,36 @@ tm_row_const::tm_row_const_rep::init (co
 	  if (! is_cmplx && tmp.is_complex_type ())
 	    is_cmplx = true;
 	}
     }
 
   ok = ! error_state;
 }
 
+void
+tm_row_const::tm_row_const_rep::eval_error (const char *msg, int l,
+					    int c) const
+{
+  if (l == -1 && c == -1)
+    ::error ("%s", msg);
+  else
+    ::error ("%s near line %d, column %d", msg, l, c);
+}
+
+void
+tm_row_const::tm_row_const_rep::eval_warning (const char *msg, int l,
+					      int c) const
+{
+  if (l == -1 && c == -1)
+    ::warning ("%s", msg);
+  else
+    ::warning ("%s near line %d, column %d", msg, l, c);
+}
+
 template class SLNode<tm_row_const>;
 template class SLList<tm_row_const>;
 
 class
 tm_const : public SLList<tm_row_const>
 {
 public:
 
