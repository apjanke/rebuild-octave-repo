# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1366181680 14400
#      Wed Apr 17 02:54:40 2013 -0400
# Node ID 7ca7e7d5eb916c4a4f805df3a037fc028661f0ed
# Parent  faccc20d5f3923028ceec3317db8530dd2507a85
remove breakpoints when clearing function

* pt-stmt.h, pt-stmt.cc (tree_statement_list::add_breakpoint,
tree_statement_list::remove_all_breakpoints): New functions.
* debug.cc (bp_table::do_add_breakpoint):
Call cmds->remove_all_breakpoints.
(bp_table::do_remove_all_breakpoints_in_file):
Call cmds->remove_all_breakpoints.
* ov-usr-fcn.cc (octave_user_script::~octave_user_script,
octave_user_function::~octave_user_function):
Call cmd_list->remove_all_breakpoints.

diff --git a/libinterp/interpfcn/debug.cc b/libinterp/interpfcn/debug.cc
--- a/libinterp/interpfcn/debug.cc
+++ b/libinterp/interpfcn/debug.cc
@@ -275,48 +275,26 @@ bp_table::instance_ok (void)
 }
 
 bp_table::intmap
 bp_table::do_add_breakpoint (const std::string& fname,
                              const bp_table::intmap& line)
 {
   intmap retval;
 
-  octave_idx_type len = line.size ();
-
   octave_user_code *dbg_fcn = get_user_code (fname);
 
   if (dbg_fcn)
     {
       tree_statement_list *cmds = dbg_fcn->body ();
 
-      if (cmds)
-        {
-          for (int i = 0; i < len; i++)
-            {
-              const_intmap_iterator p = line.find (i);
-
-              if (p != line.end ())
-                {
-                  int lineno = p->second;
-
-                  retval[i] = cmds->set_breakpoint (lineno);
+      std::string file = dbg_fcn->fcn_file_name ();
 
-                  if (retval[i] != 0)
-                    {
-                      bp_set.insert (fname);
-
-                      std::string file = dbg_fcn->fcn_file_name ();
-
-                      if (! file.empty ())
-                        octave_link::update_breakpoint (true, file, retval[i]);
-                    }
-                }
-            }
-        }
+      if (cmds)
+        retval = cmds->add_breakpoint (file, line);
     }
   else
     error ("add_breakpoint: unable to find the requested function\n");
 
   tree_evaluator::debug_mode = bp_table::have_breakpoints () || Vdebugging;
 
   return retval;
 }
@@ -340,16 +318,18 @@ bp_table::do_remove_breakpoint (const st
       octave_user_code *dbg_fcn = get_user_code (fname);
 
       if (dbg_fcn)
         {
           std::string file = dbg_fcn->fcn_file_name ();
 
           tree_statement_list *cmds = dbg_fcn->body ();
 
+          // FIXME -- move the operation on cmds to the
+          // tree_statement_list class?
           if (cmds)
             {
               octave_value_list results = cmds->list_breakpoints ();
 
               if (results.length () > 0)
                 {
                   for (int i = 0; i < len; i++)
                     {
@@ -397,27 +377,17 @@ bp_table::do_remove_all_breakpoints_in_f
   if (dbg_fcn)
     {
       std::string file = dbg_fcn->fcn_file_name ();
 
       tree_statement_list *cmds = dbg_fcn->body ();
 
       if (cmds)
         {
-          octave_value_list bkpts = cmds->list_breakpoints ();
-
-          for (int i = 0; i < bkpts.length (); i++)
-            {
-              int lineno = static_cast<int> (bkpts(i).int_value ());
-              cmds->delete_breakpoint (lineno);
-              retval[i] = lineno;
-
-              if (! file.empty ())
-                octave_link::update_breakpoint (false, file, lineno);
-            }
+          retval = cmds->remove_all_breakpoints (file);
 
           bp_set_iterator it = bp_set.find (fname);
           if (it != bp_set.end ())
             bp_set.erase (it);
         }
     }
   else if (! silent)
     error ("remove_all_breakpoint_in_file: "
@@ -468,16 +438,18 @@ bp_table::do_get_breakpoint_list (const 
           || do_find_bkpt_list (fname_list, *it) != "")
         {
           octave_user_code *f = get_user_code (*it);
 
           if (f)
             {
               tree_statement_list *cmds = f->body ();
 
+              // FIXME -- move the operation on cmds to the
+              // tree_statement_list class?
               if (cmds)
                 {
                   octave_value_list bkpts = cmds->list_breakpoints ();
                   octave_idx_type len = bkpts.length ();
 
                   if (len > 0)
                     {
                       bp_table::intmap bkpts_vec;
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -92,16 +92,19 @@ octave_user_script::octave_user_script (
   : octave_user_code (nm, ds), cmd_list (0), file_name (fnm),
     t_parsed (static_cast<time_t> (0)),
     t_checked (static_cast<time_t> (0)),
     call_depth (-1)
 { }
 
 octave_user_script::~octave_user_script (void)
 {
+  if (cmd_list)
+    cmd_list->remove_all_breakpoints (file_name);
+
   delete cmd_list;
 }
 
 octave_value_list
 octave_user_script::subsref (const std::string&,
                              const std::list<octave_value_list>&, int)
 {
   octave_value_list retval;
@@ -202,16 +205,19 @@ octave_user_function::octave_user_functi
     cmd_list->mark_as_function_body ();
 
   if (local_scope >= 0)
     symbol_table::set_curr_fcn (this, local_scope);
 }
 
 octave_user_function::~octave_user_function (void)
 {
+  if (cmd_list)
+    cmd_list->remove_all_breakpoints (file_name);
+
   delete param_list;
   delete ret_list;
   delete cmd_list;
   delete lead_comm;
   delete trail_comm;
 
 #ifdef HAVE_LLVM
   delete jit_info;
diff --git a/libinterp/parse-tree/pt-stmt.cc b/libinterp/parse-tree/pt-stmt.cc
--- a/libinterp/parse-tree/pt-stmt.cc
+++ b/libinterp/parse-tree/pt-stmt.cc
@@ -27,16 +27,17 @@ along with Octave; see the file COPYING.
 #include <typeinfo>
 
 #include "quit.h"
 
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "ov.h"
+#include "octave-link.h"
 #include "oct-lvalue.h"
 #include "input.h"
 #include "pager.h"
 #include "pt-bp.h"
 #include "pt-cmd.h"
 #include "pt-id.h"
 #include "pt-idx.h"
 #include "pt-jump.h"
@@ -186,16 +187,70 @@ octave_value_list
 tree_statement_list::list_breakpoints (void)
 {
   tree_breakpoint tbp (0, tree_breakpoint::list);
   accept (tbp);
 
   return tbp.get_list ();
 }
 
+bp_table::intmap
+tree_statement_list::add_breakpoint (const std::string& file,
+                                     const bp_table::intmap& line)
+{
+  bp_table::intmap retval;
+
+  octave_idx_type len = line.size ();
+
+  for (int i = 0; i < len; i++)
+    {
+      const_intmap_iterator p = line.find (i);
+
+      if (p != line.end ())
+        {
+          int lineno = p->second;
+
+          retval[i] = set_breakpoint (lineno);
+
+          if (retval[i] != 0)
+            {
+              bp_set.insert (fname);
+
+              if (! file.empty ())
+                octave_link::update_breakpoint (true, file, retval[i]);
+            }
+        }
+    }
+
+  return retval;
+}
+
+bp_table::intmap
+tree_statement_list::remove_all_breakpoints (const std::string& file)
+{
+  bp_table::intmap retval;
+
+  octave_value_list bkpts = list_breakpoints ();
+
+  for (int i = 0; i < bkpts.length (); i++)
+    {
+      int lineno = static_cast<int> (bkpts(i).int_value ());
+
+      delete_breakpoint (lineno);
+
+      retval[i] = lineno;
+
+      if (! file.empty ())
+        octave_link::update_breakpoint (false, file, lineno);
+    }
+
+  return retval;
+}
+
+
 tree_statement_list *
 tree_statement_list::dup (symbol_table::scope_id scope,
                           symbol_table::context_id context) const
 {
   tree_statement_list *new_list = new tree_statement_list ();
 
   new_list->function_body = function_body;
 
diff --git a/libinterp/parse-tree/pt-stmt.h b/libinterp/parse-tree/pt-stmt.h
--- a/libinterp/parse-tree/pt-stmt.h
+++ b/libinterp/parse-tree/pt-stmt.h
@@ -29,16 +29,17 @@ class tree_command;
 class tree_expression;
 
 class tree_walker;
 
 #include <deque>
 
 #include "base-list.h"
 #include "comment-list.h"
+#include "debug.h"
 #include "symtab.h"
 #include "pt.h"
 
 // A statement is either a command to execute or an expression to
 // evaluate.
 
 class
 tree_statement : public tree
@@ -155,16 +156,21 @@ public:
   bool is_script_body (void) const { return script_body; }
 
   int set_breakpoint (int line);
 
   void delete_breakpoint (int line);
 
   octave_value_list list_breakpoints (void);
 
+  bp_table::intmap add_breakpoint (const std::string& file,
+                                   const bp_table::intmap& line);
+
+  bp_table::intmap remove_all_breakpoints (const std::string& file);
+
   tree_statement_list *dup (symbol_table::scope_id scope,
                             symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // Does this list of statements make up the body of a function?
