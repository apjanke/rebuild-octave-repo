# HG changeset patch
# User Rik <rik@octave.org>
# Date 1459398951 25200
#      Wed Mar 30 21:35:51 2016 -0700
# Node ID 3d25f9f4a62b58be2072f21902dd080e1bfd7393
# Parent  02826fb0f261f4ab231a40f24d35c068aa0495e4
maint: Eliminate Britishicisms in the code.

* oct-stream.cc, __magick_read__.cc, Array.h, flag.m, lines.m, prism.m,
__contour__.m: Use 'optimize' and 'color' rather than British spellings.

diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -1164,17 +1164,17 @@ printf_format_list::printme (void) const
         << "width:    " << elt->fw << "\n"
         << "prec:     " << elt->prec << "\n"
         << "type:     '" << elt->type << "'\n"
         << "modifier: '" << elt->modifier << "'\n"
         << "text:     '" << undo_string_escapes (elt->text) << "'\n\n";
     }
 }
 
-// Delimited stream, optimised to read strings of characters separated
+// Delimited stream, optimized to read strings of characters separated
 // by single-character delimiters.
 //
 // The reason behind this class is that octstream doesn't provide
 // seek/tell, but the opportunity has been taken to optimise for the
 // textscan workload.
 //
 // The function reads chunks into a 4kiB buffer, and marks where the
 // last delimiter occurs.  Reads up to this delimiter can be fast.
@@ -1189,17 +1189,17 @@ public:
 
   delimited_stream (std::istream& is, const std::string& delimiters,
         int longest_lookahead, octave_idx_type bsize = 4096);
 
   delimited_stream (std::istream& is, const delimited_stream& ds);
 
   ~delimited_stream (void);
 
-  // Called when optimised sequence of get is finished.  Ensures that
+  // Called when optimized sequence of get is finished.  Ensures that
   // there is a remaining delimiter in buf, or loads more data in.
   void field_done (void)
   {
     if (idx >= last)
       refresh_buf ();
   }
 
   // Load new data into buffer, and set eob, last, idx.
@@ -3090,17 +3090,17 @@ textscan::scan_complex (delimited_stream
 
 // Return in VAL the run of characters from IS NOT contained in PATTERN.
 
 int
 textscan::scan_caret (delimited_stream& is, const std::string& pattern,
                       std::string& val) const
 {
   int c1 = std::istream::traits_type::eof ();
-  std::ostringstream obuf;              // Is this optimised for growing?
+  std::ostringstream obuf;              // Is this optimized for growing?
 
   while (is && ((c1 = (is && ! is.eof ())
                  ? is.get_undelim ()
                  : std::istream::traits_type::eof ())
                 != std::istream::traits_type::eof ())
          && pattern.find (c1) == std::string::npos)
     obuf << static_cast<char> (c1);
 
@@ -3197,17 +3197,17 @@ textscan::scan_string (delimited_stream&
 
 // Return in VAL the run of characters from IS contained in PATTERN.
 
 int
 textscan::scan_bracket (delimited_stream& is, const std::string& pattern,
                         std::string& val) const
 {
   int c1 = std::istream::traits_type::eof ();
-  std::ostringstream obuf;              // Is this optimised for growing?
+  std::ostringstream obuf;              // Is this optimized for growing?
 
   while (is && pattern.find (c1 = is.get_undelim ()) != std::string::npos)
     obuf << static_cast<char> (c1);
 
   val = obuf.str ();
   if (c1 != std::istream::traits_type::eof ())
     is.putback (c1);
   return c1;
@@ -3568,17 +3568,17 @@ textscan::parse_options (const octave_va
   if (n & 1)
     error ("%s: %d parameters given, but only %d values",
            who.c_str (), n-n/2, n/2);
 
   delim_len = 1;
   bool have_delims = false;
   for (int i = 0; i < last; i += 2)
     {
-      std::string param = args(i).xstring_value ("%s: Invalid paramter type <%s> for parameter %d",
+      std::string param = args(i).xstring_value ("%s: Invalid parameter type <%s> for parameter %d",
                                                  who.c_str (),
                                                  args(i).type_name ().c_str (),
                                                  i/2 + 1);
       std::transform (param.begin (), param.end (), param.begin (), ::tolower);
 
       if (param == "delimiter")
         {
           bool invalid = true;
@@ -3728,17 +3728,17 @@ textscan::parse_options (const octave_va
           else
             valid = false;
 
           if (! valid)
             error ("%s: EndOfLine must be at most one character or '\\r\\n'",
                    who.c_str ());
         }
       else
-        error ("%s: unrecognised option '%s'", who.c_str (), param.c_str ());
+        error ("%s: unrecognized option '%s'", who.c_str (), param.c_str ());
     }
 
   whitespace_table = std::string (256, '\0');
   for (unsigned int i = 0; i < whitespace.length (); i++)
     whitespace_table[whitespace[i]] = '1';
 
   // For Matlab compatibility, add 0x20 to whitespace, unless
   // whitespace is explicitly ignored.
diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -434,17 +434,17 @@ read_images (std::vector<Magick::Image>&
 
         default:
           // Do nothing other than silencing warnings about enumeration
           // values not being handled in switch.
           ;
         }
     }
 
-  const octave_idx_type colour_stride = nRows * nCols;
+  const octave_idx_type color_stride = nRows * nCols;
   switch (type)
     {
     case Magick::BilevelType:           // Monochrome bi-level image
     case Magick::GrayscaleType:         // Grayscale image
       {
         img = T (dim_vector (nRows, nCols, 1, nFrames));
         P *img_fvec = img.fortran_vec ();
 
@@ -501,28 +501,28 @@ read_images (std::vector<Magick::Image>&
       }
 
     case Magick::PaletteType:           // Indexed color (palette) image
     case Magick::TrueColorType:         // Truecolor image
       {
         img = T (dim_vector (nRows, nCols, 3, nFrames));
         P *img_fvec = img.fortran_vec ();
 
-        const octave_idx_type frame_stride  = colour_stride * 3;
+        const octave_idx_type frame_stride = color_stride * 3;
         for (octave_idx_type frame = 0; frame < nFrames; frame++)
           {
             OCTAVE_QUIT;
             const Magick::PixelPacket *pix
               = imvec[frameidx(frame)].getConstPixels (col_start, row_start,
                                                        col_cache, row_cache);
 
             octave_idx_type idx = 0;
             P *rbuf   = img_fvec;
-            P *gbuf   = img_fvec + colour_stride;
-            P *bbuf   = img_fvec + colour_stride * 2;
+            P *gbuf   = img_fvec + color_stride;
+            P *bbuf   = img_fvec + color_stride * 2;
 
             for (octave_idx_type col = 0; col < nCols; col++)
               {
                 for (octave_idx_type row = 0; row < nRows; row++)
                   {
                     rbuf[idx] = pix->red   / divisor;
                     gbuf[idx] = pix->green / divisor;
                     bbuf[idx] = pix->blue  / divisor;
@@ -539,32 +539,32 @@ read_images (std::vector<Magick::Image>&
     case Magick::PaletteMatteType:    // Indexed color image with opacity
     case Magick::TrueColorMatteType:  // Truecolor image with opacity
       {
         img   = T (dim_vector (nRows, nCols, 3, nFrames));
         T alpha   (dim_vector (nRows, nCols, 1, nFrames));
         P *img_fvec = img.fortran_vec ();
         P *a_fvec   = alpha.fortran_vec ();
 
-        const octave_idx_type frame_stride  = colour_stride * 3;
+        const octave_idx_type frame_stride = color_stride * 3;
 
         // Unlike the index for the other channels, this one won't need
         // to be reset on each frame since it's a separate matrix.
         octave_idx_type a_idx = 0;
         for (octave_idx_type frame = 0; frame < nFrames; frame++)
           {
             OCTAVE_QUIT;
             const Magick::PixelPacket *pix
               = imvec[frameidx(frame)].getConstPixels (col_start, row_start,
                                                        col_cache, row_cache);
 
             octave_idx_type idx = 0;
             P *rbuf   = img_fvec;
-            P *gbuf   = img_fvec + colour_stride;
-            P *bbuf   = img_fvec + colour_stride * 2;
+            P *gbuf   = img_fvec + color_stride;
+            P *bbuf   = img_fvec + color_stride * 2;
 
             for (octave_idx_type col = 0; col < nCols; col++)
               {
                 for (octave_idx_type row = 0; row < nRows; row++)
                   {
                     rbuf[idx]     = pix->red     / divisor;
                     gbuf[idx]     = pix->green   / divisor;
                     bbuf[idx]     = pix->blue    / divisor;
@@ -580,29 +580,29 @@ read_images (std::vector<Magick::Image>&
         break;
       }
 
     case Magick::ColorSeparationType:  // Cyan/Magenta/Yellow/Black (CMYK) image
       {
         img   = T (dim_vector (nRows, nCols, 4, nFrames));
         P *img_fvec = img.fortran_vec ();
 
-        const octave_idx_type frame_stride  = colour_stride * 4;
+        const octave_idx_type frame_stride = color_stride * 4;
         for (octave_idx_type frame = 0; frame < nFrames; frame++)
           {
             OCTAVE_QUIT;
             const Magick::PixelPacket *pix
               = imvec[frameidx(frame)].getConstPixels (col_start, row_start,
                                                        col_cache, row_cache);
 
             octave_idx_type idx = 0;
             P *cbuf   = img_fvec;
-            P *mbuf   = img_fvec + colour_stride;
-            P *ybuf   = img_fvec + colour_stride * 2;
-            P *kbuf   = img_fvec + colour_stride * 3;
+            P *mbuf   = img_fvec + color_stride;
+            P *ybuf   = img_fvec + color_stride * 2;
+            P *kbuf   = img_fvec + color_stride * 3;
 
             for (octave_idx_type col = 0; col < nCols; col++)
               {
                 for (octave_idx_type row = 0; row < nRows; row++)
                   {
                     cbuf[idx] = pix->red     / divisor;
                     mbuf[idx] = pix->green   / divisor;
                     ybuf[idx] = pix->blue    / divisor;
@@ -620,17 +620,17 @@ read_images (std::vector<Magick::Image>&
     // Cyan, magenta, yellow, and black with alpha (opacity) channel
     case Magick::ColorSeparationMatteType:
       {
         img   = T (dim_vector (nRows, nCols, 4, nFrames));
         T alpha   (dim_vector (nRows, nCols, 1, nFrames));
         P *img_fvec = img.fortran_vec ();
         P *a_fvec   = alpha.fortran_vec ();
 
-        const octave_idx_type frame_stride  = colour_stride * 4;
+        const octave_idx_type frame_stride = color_stride * 4;
 
         // Unlike the index for the other channels, this one won't need
         // to be reset on each frame since it's a separate matrix.
         octave_idx_type a_idx = 0;
         for (octave_idx_type frame = 0; frame < nFrames; frame++)
           {
             OCTAVE_QUIT;
             const Magick::PixelPacket *pix
@@ -638,19 +638,19 @@ read_images (std::vector<Magick::Image>&
                                                        col_cache, row_cache);
             // Note that for CMYKColorspace + matte (CMYKA), the opacity is
             // stored in the assocated IndexPacket.
             const Magick::IndexPacket *apix
               = imvec[frameidx(frame)].getConstIndexes ();
 
             octave_idx_type idx = 0;
             P *cbuf   = img_fvec;
-            P *mbuf   = img_fvec + colour_stride;
-            P *ybuf   = img_fvec + colour_stride * 2;
-            P *kbuf   = img_fvec + colour_stride * 3;
+            P *mbuf   = img_fvec + color_stride;
+            P *ybuf   = img_fvec + color_stride * 2;
+            P *kbuf   = img_fvec + color_stride * 3;
 
             for (octave_idx_type col = 0; col < nCols; col++)
               {
                 for (octave_idx_type row = 0; row < nRows; row++)
                   {
                     cbuf[idx]     = pix->red     / divisor;
                     mbuf[idx]     = pix->green   / divisor;
                     ybuf[idx]     = pix->blue    / divisor;
@@ -1396,17 +1396,17 @@ Use @code{imwrite} instead.\n\
 
   maybe_initialize_magick ();
 
   const std::string filename = args(0).string_value ();
   const std::string ext = args(1).string_value ();
 
   const octave_scalar_map options = args(4).xscalar_map_value ("__magick_write__: OPTIONS must be a struct");
 
-  const octave_value img  = args(2);
+  const octave_value img = args(2);
   const Matrix cmap = args(3).xmatrix_value ("__magick_write__: invalid MAP");
 
   std::vector<Magick::Image> imvec;
 
   if (cmap.is_empty ())
     {
       const octave_value alpha = options.getfield ("alpha");
       if (img.is_bool_type ())
diff --git a/liboctave/array/Array.h b/liboctave/array/Array.h
--- a/liboctave/array/Array.h
+++ b/liboctave/array/Array.h
@@ -656,17 +656,17 @@ public:
   //! Concatenation along a specified (0-based) dimension, equivalent
   //! to cat(). dim = -1 corresponds to dim = 0 and dim = -2
   //! corresponds to dim = 1, but apply the looser matching rules of
   //! vertcat/horzcat.
   static Array<T>
   cat (int dim, octave_idx_type n, const Array<T> *array_list);
 
   //! Apply function fcn to each element of the Array<T>. This function
-  //! is optimised with a manually unrolled loop.
+  //! is optimized with a manually unrolled loop.
   template <typename U, typename F>
   Array<U>
   map (F fcn) const
   {
     octave_idx_type len = numel ();
 
     const T *m = data ();
 
diff --git a/scripts/image/flag.m b/scripts/image/flag.m
--- a/scripts/image/flag.m
+++ b/scripts/image/flag.m
@@ -49,13 +49,13 @@ function map = flag (n = rows (colormap 
     map = zeros (0, 3);
   endif
 
 endfunction
 
 
 %!demo
 %! ## Show the 'flag' colormap profile and as an image
-%! cmap = flag (12);  # 4 colours, therefore cycle 3 times
+%! cmap = flag (12);  # 4 colors, therefore cycle 3 times
 %! subplot (2, 1, 1);
 %! rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
 %! rgbplot (cmap);
diff --git a/scripts/image/lines.m b/scripts/image/lines.m
--- a/scripts/image/lines.m
+++ b/scripts/image/lines.m
@@ -49,13 +49,13 @@ function map = lines (n = rows (colormap
     map = zeros (0, 3);
   endif
 
 endfunction
 
 
 %!demo
 %! ## Show the 'lines' colormap profile and as an image
-%! cmap = lines (21); # default has 7 colours, therefore cycle 3 times
+%! cmap = lines (21); # default has 7 colors, therefore cycle 3 times
 %! subplot (2, 1, 1);
 %! rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
 %! rgbplot (cmap);
diff --git a/scripts/image/prism.m b/scripts/image/prism.m
--- a/scripts/image/prism.m
+++ b/scripts/image/prism.m
@@ -49,13 +49,13 @@ function map = prism (n = rows (colormap
     map = zeros (0, 3);
   endif
 
 endfunction
 
 
 %!demo
 %! ## Show the 'prism' colormap profile and as an image
-%! cmap = prism (18); # 6 colours, therefore cycle 3 times
+%! cmap = prism (18); # 6 colors, therefore cycle 3 times
 %! subplot (2, 1, 1);
 %! rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
 %! rgbplot (cmap);
diff --git a/scripts/plot/draw/private/__contour__.m b/scripts/plot/draw/private/__contour__.m
--- a/scripts/plot/draw/private/__contour__.m
+++ b/scripts/plot/draw/private/__contour__.m
@@ -239,17 +239,17 @@ function add_patch_children (hg)
       cont_idx(ncont) = i+1;
       ii = i + (1:cont_len(ncont));
       cont_area(ncont) = polyarea (c(1, ii), c(2, ii));
       i += cont_len(ncont) + 1;
     endwhile
 
     ## Handle for each level the case where we have (a) hole(s) in a patch.
     ## Those are to be filled with the color of level below or with the
-    ## background colour.
+    ## background color.
     for k = 1:numel (lev)
       lvl_idx = find (abs (cont_lev - lev(k)) < lvl_eps);
       len = numel (lvl_idx);
       if (len > 1)
         mark = false (size (lvl_idx));
         a = 1;
         while (a < len)
           ## take 1st patch
@@ -263,17 +263,17 @@ function add_patch_children (hg)
           next_ct_pt_vec = c(:, cont_idx(lvl_idx(b_vec)));
           in = inpolygon (next_ct_pt_vec(1,:), next_ct_pt_vec(2,:),
                           curr_ct(1, :), curr_ct(2, :));
           mark(b_vec(in)) = ! mark(b_vec(in));
           a += 1;
         endwhile
         if (numel (mark) > 0)
           ## All marked contours describe a hole in a larger contour of
-          ## the same level and must be filled with colour of level below.
+          ## the same level and must be filled with color of level below.
           ma_idx = lvl_idx(mark);
           if (k > 1)
             ## Find color of level below.
             tmp = find (abs (cont_lev - lev(k - 1)) < lvl_eps);
             lvl_bel_idx = tmp(1);
             ## Set color of patches found.
             cont_lev(ma_idx) = cont_lev(lvl_bel_idx);
           else
