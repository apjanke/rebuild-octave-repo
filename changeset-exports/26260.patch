# HG changeset patch
# User Rik <rik@octave.org>
# Date 1545098591 28800
#      Mon Dec 17 18:03:11 2018 -0800
# Node ID 9d3c22f7fff12a9dfe189f17805c6eadaf07d3f9
# Parent  3a8094a7019352cdfde41312bf457cf606d22096
movfun.m: Make Texinfo documentation prettier by marking some items as non-breakable.

* movfun.m: Make Texinfo documentation prettier by marking some items as non-breakable.

diff --git a/scripts/signal/movfun.m b/scripts/signal/movfun.m
--- a/scripts/signal/movfun.m
+++ b/scripts/signal/movfun.m
@@ -23,48 +23,49 @@
 ## @deftypefn  {} {@var{y} =} movfun (@var{fcn}, @var{x}, @var{wlen})
 ## @deftypefnx {} {@var{y} =} movfun (@var{fcn}, @var{x}, @var{[@var{nb}, @var{na}}])
 ## @deftypefnx {} {@var{y} =} movfun (@dots{}, @var{property}, @var{value})
 ## Apply function @var{fcn} to a moving window of length @var{wlen} on data
 ## @var{x}.
 ##
 ## If @var{wlen} is a scalar, the function @var{fcn} is applied to a moving
 ## window of length @var{wlen}.  When @var{wlen} is an odd number the window is
-## symmetric and includes @code{(@var{wlen} - 1) / 2} elements on either side
-## of the central element.  For example, when calculating the output at index 5
-## with a window length of 3, @code{movfun} uses data elements
-## @code{[4, 5, 6]}.  If @var{wlen} is an even number, the window is asymmetric
-## and has @code{@var{wlen}/2} elements to the left of the central element
-## and @code{@var{wlen}/2 - 1} elements to the right of the central element.
+## symmetric and includes @w{@code{(@var{wlen} - 1) / 2}} elements on either
+## side of the central element.  For example, when calculating the output at
+## index 5 with a window length of 3, @code{movfun} uses data elements
+## @w{@code{[4, 5, 6]}}.  If @var{wlen} is an even number, the window is
+## asymmetric and has @w{@code{@var{wlen}/2}} elements to the left of the
+## central element
+## and @w{@code{@var{wlen}/2 - 1}} elements to the right of the central element.
 ## For example, when calculating the output at index 5 with a window length of
-## 4, @code{movfun} uses data elements @code{[3, 4, 5, 6]}.
+## 4, @code{movfun} uses data elements @w{@code{[3, 4, 5, 6]}}.
 ##
 ## If @var{wlen} is an array with two elements @w{@code{[@var{nb}, @var{na}]}},
 ## the function is applied to a moving window @code{-@var{nb}:@var{na}}.  This
 ## window includes @var{nb} number of elements @strong{before} the current
 ## element and @var{na} number of elements @strong{after} the current element.
 ## The current element is always included.  For example, given
-## @code{@var{wlen} = [3, 0]}, the data used to calculate index 5 is
-## @code{[2, 3, 4, 5]}.
+## @w{@code{@var{wlen} = [3, 0]}}, the data used to calculate index 5 is
+## @w{@code{[2, 3, 4, 5]}}.
 ##
 ## During calculations the data input @var{x} is reshaped into a 2-dimensional
 ## @var{wlen}-by-@var{N} matrix and @var{fcn} is called on this new matrix.
 ## Therefore, @var{fcn} must accept an array input argument and apply the
 ## computation along dimension 1, i.e., down the columns of the array.
 ##
 ## When applied to an array (possibly multi-dimensional) with @var{n} columns,
 ## @var{fcn} may return a result in either of two formats: @w{Format 1)}
 ## an array of size 1-by-@var{n}-by-@var{dim3}-by-@dots{}-by-@var{dimN}.  This
 ## is the typical output format from Octave core functions.  Type
 ## @code{demo ("movfun", 5)} for an example of this use case.
 ## @w{Format 2)} a row vector of length
 ## @code{@var{n} * @var{numel_higher_dims}} where @var{numel_higher_dims} is
 ## @w{@code{prod (size (@var{x})(3:end))}}.  The output of @var{fcn} for the
 ## i-th input column must be found in the output at indices
-## @code{i:@var{n}:(@var{n}*@var{numel_higher_dims})}.
+## @w{@code{i:@var{n}:(@var{n}*@var{numel_higher_dims})}}.
 ## This format is useful when concatenating functions into arrays, or when
 ## using @code{nthargout}.  Type @code{demo ("movfun", 6)} for an example of
 ## this case.
 ##
 ## The calculation can be controlled by specifying @var{property}/@var{value}
 ## pairs.  Valid properties are
 ##
 ## @table @asis
@@ -84,19 +85,20 @@
 ## elements for which there is no source data.  For example, with a window of
 ## length 3, @code{@var{y}(1) = @var{fcn} (@var{x}(1:2))}, and
 ## @code{@var{y}(end) = @var{fcn} (@var{x}(end-1:end))}.
 ##
 ## @item @qcode{"discard"}
 ## Any @var{y} values that use a window extending beyond the original
 ## data array are deleted.  For example, with a 10-element data vector and a
 ## window of length 3, the output will contain only 8 elements.  The first
-## element would require calculating the function over indices @code{[0, 1, 2]}
-## and is therefore discarded.  The last element would require calculating the
-## function over indices @code{[9, 10, 11]} and is therefore discarded.
+## element would require calculating the function over indices
+## @w{@code{[0, 1, 2]}} and is therefore discarded.  The last element would
+## require calculating the function over indices @w{@code{[9, 10, 11]}} and is
+## therefore discarded.
 ##
 ## @item @qcode{"fill"}
 ## Any window elements outside the data array are replaced by @code{NaN}.  For
 ## example, with a window of length 3,
 ## @code{@var{y}(1) = @var{fcn} ([NaN, @var{x}(1:2)])}, and
 ## @code{@var{y}(end) = @var{fcn} ([@var{x}(end-1:end), NaN])}.
 ## This option usually results in @var{y} having @code{NaN} values at the
 ## boundaries, although it is influenced by how @var{fcn} handles @code{NaN},
@@ -132,17 +134,17 @@
 ## Controls whether @code{NaN} or @code{NA} values should be included (value:
 ## @qcode{"includenan"}), or excluded (value: @qcode{"omitnan"}), from the data
 ## passed to @var{fcn}.  The default is @qcode{"includenan"}.  Caution:
 ## The @qcode{"omitnan"} option is not yet implemented.
 ##
 ## @item @qcode{"outdim"}
 ## A row vector that selects which dimensions of the calculation will appear
 ## in the output @var{y}.  This is only useful when @var{fcn} returns an
-## N-dimensinoal array in @w{Format 1}.  The default is to return all output
+## N-dimensional array in @w{Format 1}.  The default is to return all output
 ## dimensions.
 ##
 ## @end table
 ##
 ## Programming Note: The property @qcode{"outdim"} can be used to save memory
 ## when the output of @var{fcn} has many dimensions, or when a wrapper to the
 ## base function that selects the desired outputs is too costly.  When memory
 ## is not an issue, the easiest way to select output dimensions is to first
@@ -305,16 +307,19 @@ endfunction
 ## Function is not applied to any window elements outside the original data.
 function y = shrink_bc (fcn, x, idxp, win, wlen, odim)
   N   = length (x);
   idx = idxp + win;
   tf  = (idx > 0) & (idx <= N);  # idx inside boundaries
 
   n   = length (idxp);
   y   = zeros (n, odim);
+  ## FIXME: This nested for loop accounts for 70% of running time.
+  ##        Given that "shrink" is the default Endpoint value this
+  ##        code needs to be reworked
   for i = 1:n
     k      = idx(tf(:,i),i);
     y(i,:) = fcn (x(k));
   endfor
 endfunction
 
 ## Apply replacement value boundary conditions
 ## Window is padded at beginning and end with user-specified value.
