# HG changeset patch
# User Nir Krakauer <nkrakauer@ccny.cuny.edu>
# Date 1417806456 28800
#      Fri Dec 05 11:07:36 2014 -0800
# Branch stable
# Node ID ef649fe230f569f234d9d04646f4f94e4b527218
# Parent  7759e4d62f048221b3152d9c96ac21170c8ce161
interp1.m: Fix shape of output matrix when there are extrapolated values (bug #43745).

* interp1.m: reshape interpolated values to original shape before outlier
processing.  Add BIST tests to check behavior.

diff --git a/scripts/general/interp1.m b/scripts/general/interp1.m
--- a/scripts/general/interp1.m
+++ b/scripts/general/interp1.m
@@ -324,25 +324,27 @@ function yi = interp1 (x, y, varargin)
   endswitch
 
   if (! ispp && ! ischar (extrap))
     ## determine which values are out of range and set them to extrap,
     ## unless extrap == "extrap".
     minx = min (x(1), x(nx));
     maxx = max (x(1), x(nx));
 
+    xi = reshape (xi, szx);
     outliers = xi < minx | ! (xi <= maxx); # this even catches NaNs
     if (size_equal (outliers, yi))
       yi(outliers) = extrap;
       yi = reshape (yi, szx);
     elseif (! isvector (yi))
       yi(outliers, :) = extrap;
     else
       yi(outliers.') = extrap;
     endif
+
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! xf = 0:0.05:10;  yf = sin (2*pi*xf/5);
@@ -607,16 +609,18 @@ endfunction
 %!        interp1 (xp,yp,xi,style,"extrap"),10*eps)
 %!error interp1 (1,1,1, style)
 ## ENDBLOCK
 ## ENDBLOCKTEST
 
 ## test extrapolation (linear)
 %!assert (interp1 ([1:5],[3:2:11],[0,6],"linear","extrap"), [1, 13], eps)
 %!assert (interp1 (xp, yp, [-1, max(xp)+1],"linear",5), [5, 5])
+%!assert (interp1 ([0,1],[1,0],[0.1,0.9;0.2,1.1]), [0.9 0.1; 0.8 NA], eps)
+%!assert (interp1 ([0,1],[1,0],[0.1,0.9;0.2,1]), [0.9 0.1; 0.8 0], eps)
 
 ## Basic sanity checks
 %!assert (interp1 (1:2,1:2,1.4,"nearest"), 1)
 %!assert (interp1 (1:2,1:2,1.4,"linear"), 1.4)
 %!assert (interp1 (1:4,1:4,1.4,"cubic"), 1.4)
 %!assert (interp1 (1:2,1:2,1.1,"spline"), 1.1)
 %!assert (interp1 (1:3,1:3,1.4,"spline"), 1.4)
 
