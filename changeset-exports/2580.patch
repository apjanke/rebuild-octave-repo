# HG changeset patch
# User jwe
# Date 850199631 0
#      Tue Dec 10 06:33:51 1996 +0000
# Node ID fa7dd5fc7c59a0c4445e0a7946bc03bc4817e8c9
# Parent  6e1d6e02fd8cbf74de57300bc26274c27ced96e0
[project @ 1996-12-10 06:30:41 by jwe]

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -4,23 +4,29 @@ Summary of changes for version 2.0:
   * The set and show commands for setting and displaying gnuplot
     parameters have been replaced by gset and gshow.  This change will
     probably break lots of things, but it is necessary to allow for
     compatibility with the Matlab graphics and GUI commands in a
     future version of Octave.  (For now, the old set and show commands
     do work, but they print an annoying warning message to try to get
     people to switch to using gset.)
 
+  * Dynamic linking works on more systems using dlopen() and friends
+    (most modern Unix systems) or shl_load() and friends (HP/UX
+    systems).  A simple example is provided in examples/hello.cc.
+    For this feature to work, you must configure Octave with
+    --enable-shared.  You may also need to have a shared-library
+    version of libg++ and libstdc++.
+
   * New data types can be added to Octave by writing a C++ class.  On
     systems that support dynamic linking, new data types can be added
     to an already running Octave binary.  A simple example appears in
     the file examples/make_int.cc.  Other examples are the standard
     Octave data types defined in the files src/ov*.{h,cc} and
-    src/op-*.cc.  [This feature should be better documented by the
-    time 2.0 is released].
+    src/op-*.cc.
 
   * The configure option --enable-bounds-check turns on bounds
     checking on element references for Octave's internal array and
     matrix classes.  It's enabled by default.  To disable this
     feature, configure Octave with --disable-bounds-check.
 
   * The C-style I/O functions (fopen, fprintf, etc.) have been
     rewritten to be more compatible with Matlab.  The fputs function
diff --git a/README b/README
--- a/README
+++ b/README
@@ -1,13 +1,13 @@
 Octave -- a high-level language for numerical computations.
 
 Copyright (C) 1996 John W. Eaton
 
-Last updated: Thu Nov  7 17:17:25 1996
+Last updated: Tue Dec 10 00:20:31 1996
 
 Overview
 --------
 
 Octave is a high-level language, primarily intended for numerical
 computations.  It provides a convenient command line interface for
 solving linear and nonlinear problems numerically.
 
@@ -31,46 +31,47 @@ available.
 
 Installation and Bugs
 ---------------------
 
 Octave requires approximately 125MB of disk storage to unpack and
 compile from source (significantly less if you don't compile with
 debugging symbols or create shared libraries).  Once installed, Octave
 requires approximately 65MB of disk space (again, considerably less if
-the binaries and libraries do not include debugging symbols).
+you don't build shared libraries or the binaries and libraries do not
+include debugging symbols).
 
 In order to build Octave, you will need a current version of g++,
-libg++, and GNU make.
+libg++, and GNU make.  Recommended versions are
+
+  g++ 2.7.2 or 2.7.2.1
+  libg++ 2.7.1 or 2.7.2
+  make 3.75
 
 YOU MUST HAVE GNU MAKE TO COMPILE OCTAVE.  Octave's Makefiles use
 features of GNU Make that are not present in other versions of make.
 GNU Make is very portable and easy to install.
 
-As of version 2.0, you must have G++ 2.7.2 or later to compile
-Octave.
-
 See the notes in the files INSTALL and INSTALL.OCTAVE for more
 specific installation instructions, including directions for
 installing Octave from a binary distribution.
 
 The file BUGS contains a recommended procedure for reporting bugs, as
 well as a list of known problems and possible fixes.
 
-Binary Distributions
---------------------
+Documentation
+-------------
 
-Binary copies of Octave are now distributed for several popular Unix
-systems.  To save disk space, the complete source code for Octave is
-not included in the binary distributions, but should be available in
-the same place as the binaries.  If not, please contact
-bug-octave@bevo.che.wisc.edu.
-
-The file INSTALL.OCTAVE contains specific installation instructions,
-for installing Octave from a binary distribution.
+Octave's manual has been revised for version 2.0, but it is lagging a
+bit behind the development of the software.  In particular, there is
+currently no complete documentation of the C++ class libraries or the
+support for dynamic linking and user-defined data types.  If you
+notice ommissions or inconsistencies, please report them as bugs to
+bug-octave@bevo.che.wisc.edu.  Specific suggestions for ways to
+improve Octave and its documentation are always welcome.
 
 Implemenation
 -------------
 
 Octave is being developed with the Free Software Foundation's make,
 bison (a replacement for YACC), flex (a replacement for lex), gcc/g++,
 and libg++ on an Intel Pentium 133 system running Debian Linux/GNU.
 It should be possible to install it on any machine that runs GCC/G++.
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+Tue Dec 10 00:31:13 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* SLList-expr.cc SLList-misc.cc SLList-plot.cc SLList-str.cc
+	SLList-tc.cc SLList-tm.cc SLList.h SLStack-i.cc SLStack-pc.cc
+	SLStack-str.cc SLStack-sym.cc SLStack-tok.cc SLStack-ue.cc
+	SLStack-ui.cc, pt-mat.cc: Include Stack.h, Stack.cc, SLStack.cc,
+	and SLList.cc as necessary.
+
+	* Stack.cc, SLStack.cc, SLList.cc: New files.
+	* Makefile.in (SOURCES): Add them to the list.
+
 Mon Dec  9 12:03:45 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (install-bin): Use $(EXE) suffix so install will
 	find the right file on cygwin32 systems.
 
 	* ov.h: Declare proper form of do_binary_op as friend to
 	octave_value class.
 
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -85,34 +85,34 @@ INCLUDES := builtins.h data.h defun.h de
 	ov-range.h ov-complex.h ov-va-args.h ov-colon.h ov-base.h \
 	ov-str-mat.h ov.h ov-typeinfo.h ops.h \
 	op-cm-cm.h op-cm-cs.h op-cm-m.h op-cm-s.h op-cs-cm.h \
 	op-cs-cs.h op-cs-m.h op-cs-s.h op-m-cm.h op-m-cs.h \
 	op-m-m.h op-m-s.h op-s-cm.h op-s-cs.h op-s-m.h op-s-s.h \
 	op-str-str.h
 
 TI_SRC := Array-oc.cc Array-os.cc Array-tc.cc Map-fnc.cc Map-tc.cc \
-	SLList-expr.cc SLList-misc.cc SLList-plot.cc SLList-str.cc \
-	SLList-tc.cc SLList-tm.cc SLStack-i.cc SLStack-pc.cc \
-	SLStack-str.cc SLStack-sym.cc SLStack-tok.cc SLStack-ue.cc \
-	SLStack-ui.cc
+	SLList-expr.cc SLList-misc.cc SLList-plot.cc SLList-tc.cc \
+	SLList-tm.cc SLStack-i.cc SLStack-pc.cc SLStack-str.cc \
+	SLStack-sym.cc SLStack-tok.cc SLStack-ue.cc SLStack-ui.cc
 
 TI_OBJ := $(patsubst %.cc, %.o, $(TI_SRC))
 
 TI_PICOBJ := $(TI_OBJ)
 ifeq ($(SHARED_LIBS), true)
   ifdef CXXPICFLAG
     TI_PICOBJ := $(addprefix pic/, $(TI_OBJ))
   endif
 endif
 
-SOURCES := BaseSLList.cc Map.cc data.cc defaults.cc \
-	dirfns.cc dynamic-ld.cc error.cc file-io.cc fn-cache.cc gripes.cc \
-	help.cc input.cc lex.l load-save.cc mappers.cc oct-fstrm.cc \
-	oct-hist.cc oct-iostrm.cc oct-map.cc oct-obj.cc oct-prcstrm.cc \
+SOURCES := BaseSLList.cc Map.cc SLList.cc SLStack.cc Stack.cc \
+	data.cc defaults.cc dirfns.cc dynamic-ld.cc error.cc \
+	file-io.cc fn-cache.cc gripes.cc help.cc input.cc lex.l \
+	load-save.cc mappers.cc oct-fstrm.cc oct-hist.cc \
+	oct-iostrm.cc oct-map.cc oct-obj.cc oct-prcstrm.cc \
 	oct-procbuf.cc oct-stdstrm.cc oct-stream.cc oct-strstrm.cc \
 	pager.cc parse.y pr-output.cc procstream.cc pt-base.cc \
 	pt-cmd.cc pt-const.cc pt-exp-base.cc pt-exp.cc pt-fcn.cc \
 	pt-fvc-base.cc pt-fvc.cc pt-mat.cc pt-misc.cc pt-mvr-base.cc \
 	pt-mvr.cc pt-plot.cc pt-pr-code.cc \
 	sighandlers.cc strcasecmp.c strncase.c strfns.cc strftime.c \
 	symtab.cc syscalls.cc sysdep.cc token.cc toplev.cc \
 	unwind-prot.cc utils.cc variables.cc xdiv.cc xpow.cc \
diff --git a/src/SLList-expr.cc b/src/SLList-expr.cc
--- a/src/SLList-expr.cc
+++ b/src/SLList-expr.cc
@@ -22,16 +22,17 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Lists of various values.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "SLList.h"
+#include "SLList.cc"
 
 #include "pt-exp.h"
 #include "pt-fvc.h"
 #include "pt-mvr.h"
 
 template class SLNode<tree_expression *>;
 template class SLList<tree_expression *>;
 
diff --git a/src/SLList-misc.cc b/src/SLList-misc.cc
--- a/src/SLList-misc.cc
+++ b/src/SLList-misc.cc
@@ -22,16 +22,17 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Lists of various values.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "SLList.h"
+#include "SLList.cc"
 
 #include "pt-exp.h"
 #include "ov.h"
 #include "pt-misc.h"
 
 template class SLNode<tree_statement *>;
 template class SLList<tree_statement *>;
 
diff --git a/src/SLList-plot.cc b/src/SLList-plot.cc
--- a/src/SLList-plot.cc
+++ b/src/SLList-plot.cc
@@ -22,16 +22,17 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Lists of various values.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "SLList.h"
+#include "SLList.cc"
 
 #include "pt-plot.h"
 
 template class SLNode<subplot *>;
 template class SLList<subplot *>;
 
 /*
 ;;; Local Variables: ***
diff --git a/src/SLList-str.cc b/src/SLList-str.cc
--- a/src/SLList-str.cc
+++ b/src/SLList-str.cc
@@ -22,16 +22,17 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Lists of strings.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "SLList.h"
+#include "SLList.cc"
 
 #include <string>
 
 template class SLNode<string>;
 template class SLList<string>;
 
 /*
 ;;; Local Variables: ***
diff --git a/src/SLList-tc.cc b/src/SLList-tc.cc
--- a/src/SLList-tc.cc
+++ b/src/SLList-tc.cc
@@ -22,16 +22,17 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Lists of various values.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "SLList.h"
+#include "SLList.cc"
 
 #include "ov.h"
 
 template class SLNode<octave_value>;
 template class SLList<octave_value>;
 
 /*
 ;;; Local Variables: ***
diff --git a/src/SLList-tm.cc b/src/SLList-tm.cc
--- a/src/SLList-tm.cc
+++ b/src/SLList-tm.cc
@@ -22,16 +22,17 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Stacks of tree_matrix* values.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "SLList.h"
+#include "SLList.cc"
 
 #include "pt-mat.h"
 
 template class SLNode<tree_matrix_row *>;
 template class SLList<tree_matrix_row *>;
 
 template class SLNode<tree_matrix *>;
 template class SLList<tree_matrix *>;
diff --git a/src/SLList.h b/src/SLList.h
--- a/src/SLList.h
+++ b/src/SLList.h
@@ -14,16 +14,20 @@ PURPOSE.  See the GNU Library General Pu
 You should have received a copy of the GNU Library General Public
 License along with this library; if not, write to the Free Software
 Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */
 
 #ifndef _SLList_h
 #define _SLList_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 #include <Pix.h>
 #include <BaseSLList.h>
 
 template<class T>
 class SLNode : public BaseSLNode
 {
   public:
     T                    hd; // Data part of node
@@ -42,17 +46,17 @@ class SLList : public BaseSLList
 	{ return new SLNode<T>(*(const T*)datum); }
     virtual void copy_item(void *dst, void *src) { *(T*)dst = *(T*)src; }
 
 public:
     SLList() : BaseSLList() { }
     SLList(const SLList<T>& a) : BaseSLList() { copy(a); }
     SLList<T>&            operator = (const SLList<T>& a)
 	{ BaseSLList::operator=((const BaseSLList&) a); return *this; }
-  ~SLList (void) { clear (); }
+    ~SLList (void);
 
     Pix prepend(const T& item) {return BaseSLList::prepend(&item);}
     Pix append(const T& item) {return BaseSLList::append(&item);}
     Pix prepend(SLNode<T>* node) {return BaseSLList::prepend(node);}
     Pix append(SLNode<T>* node) {return BaseSLList::append(node);}
 
     T& operator () (Pix p) {
 	if (p == 0) error("null Pix");
diff --git a/src/SLStack-i.cc b/src/SLStack-i.cc
--- a/src/SLStack-i.cc
+++ b/src/SLStack-i.cc
@@ -22,22 +22,28 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Stacks of int values.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "SLList.h"
+#include "SLList.cc"
+
+#include "Stack.h"
+#include "Stack.cc"
 
 #include "SLStack.h"
+#include "SLStack.cc"
 
 template class SLNode<int>;
 template class SLList<int>;
 
 template class Stack<int>;
+
 template class SLStack<int>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/SLStack-pc.cc b/src/SLStack-pc.cc
--- a/src/SLStack-pc.cc
+++ b/src/SLStack-pc.cc
@@ -22,22 +22,28 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Stacks of char* values.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "SLList.h"
+#include "SLList.cc"
+
+#include "Stack.h"
+#include "Stack.cc"
 
 #include "SLStack.h"
+#include "SLStack.cc"
 
 template class SLNode<char*>;
 template class SLList<char*>;
 
 template class Stack<char*>;
+
 template class SLStack<char*>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/SLStack-str.cc b/src/SLStack-str.cc
--- a/src/SLStack-str.cc
+++ b/src/SLStack-str.cc
@@ -21,24 +21,31 @@ Software Foundation, 59 Temple Place - S
 */
 
 // Instantiate Stacks of string values.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "SLList.h"
+#include "SLList.cc"
+
+#include "Stack.h"
+#include "Stack.cc"
+
 #include "SLStack.h"
+#include "SLStack.cc"
 
 #include <string>
 
-// We already have SLList<string>, so we don't need to make them here.
+template class SLNode<string>;
+template class SLList<string>;
 
-// template class SLNode<string>;
-// template class SLList<string>;
 template class Stack<string>;
+
 template class SLStack<string>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/SLStack-sym.cc b/src/SLStack-sym.cc
--- a/src/SLStack-sym.cc
+++ b/src/SLStack-sym.cc
@@ -22,30 +22,37 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Stacks of symbol_def* values.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "SLList.h"
+#include "SLList.cc"
+
+#include "Stack.h"
+#include "Stack.cc"
 
 #include "SLStack.h"
+#include "SLStack.cc"
 
 #include "symtab.h"
 
 extern template class SLNode<unsigned>;
 extern template class SLList<unsigned>;
 
 extern template class Stack<unsigned>;
+
 extern template class SLStack<unsigned>;
 
 template class SLNode<symbol_def *>;
 template class SLList<symbol_def *>;
 
 template class Stack<symbol_def *>;
+
 template class SLStack<symbol_def *>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/SLStack-tok.cc b/src/SLStack-tok.cc
--- a/src/SLStack-tok.cc
+++ b/src/SLStack-tok.cc
@@ -22,24 +22,30 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Stacks of token* values.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "SLList.h"
+#include "SLList.cc"
+
+#include "Stack.h"
+#include "Stack.cc"
 
 #include "SLStack.h"
+#include "SLStack.cc"
 
 #include "token.h"
 
 template class SLNode<token *>;
 template class SLList<token *>;
 
 template class Stack<token *>;
+
 template class SLStack<token *>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/SLStack-ue.cc b/src/SLStack-ue.cc
--- a/src/SLStack-ue.cc
+++ b/src/SLStack-ue.cc
@@ -22,24 +22,30 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Stacks of unwind_elem values.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "SLList.h"
+#include "SLList.cc"
+
+#include "Stack.h"
+#include "Stack.cc"
 
 #include "SLStack.h"
+#include "SLStack.cc"
 
 #include "unwind-prot.h"
 
 template class SLNode<unwind_elem>;
 template class SLList<unwind_elem>;
 
 template class Stack<unwind_elem>;
+
 template class SLStack<unwind_elem>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/SLStack-ui.cc b/src/SLStack-ui.cc
--- a/src/SLStack-ui.cc
+++ b/src/SLStack-ui.cc
@@ -22,22 +22,28 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Stacks of unsigned values.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "SLList.h"
+#include "SLList.cc"
+
+#include "Stack.h"
+#include "Stack.cc"
 
 #include "SLStack.h"
+#include "SLStack.cc"
 
 template class SLNode<unsigned>;
 template class SLList<unsigned>;
 
 template class Stack<unsigned>;
+
 template class SLStack<unsigned>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/SLStack.cc b/src/SLStack.cc
--- a/src/SLStack.cc
+++ b/src/SLStack.cc
@@ -22,16 +22,17 @@ Foundation, 59 Temple Place - Suite 330,
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "SLStack.h"
 
 template <class T>
+SLStack<T>&
 SLStack<T>::operator = (const SLStack<T>& s)
 {
   if (this != &s)
     p = s.p;
 
   return *this;
 }
 
diff --git a/src/SLStack.h b/src/SLStack.h
--- a/src/SLStack.h
+++ b/src/SLStack.h
@@ -31,16 +31,20 @@ of SLStack from libg++, originally:
 and distributed under the terms of the GNU Library General Public
 License as published by the Free Software Foundation.
 
 */
 
 #if !defined (_SLStack_h)
 #define _SLStack_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 #include "SLList.h"
 #include "Stack.h"
 
 template <class T>
 class
 SLStack : public Stack<T>
 {
 private:
@@ -50,21 +54,17 @@ private:
 public:
 
   SLStack (void) : p () { }
 
   SLStack (const SLStack<T>& s) : p (s.p) { }
 
   ~SLStack (void) { }
 
-  SLStack<T>& operator = (const SLStack<T>& s)
-  {
-    p = s.p;
-    return *this;
-  }
+  SLStack<T>& operator = (const SLStack<T>& s);
 
   void push (const T& item) { p.prepend (item); }
 
   T pop (void) { return p.remove_front (); }
 
   T& top (void) { return p.front (); }
 
   void del_top (void) { p.del_front (); }
diff --git a/src/Stack.h b/src/Stack.h
--- a/src/Stack.h
+++ b/src/Stack.h
@@ -31,16 +31,20 @@ of Stack from libg++, originally:
 and distributed under the terms of the GNU Library General Public
 License as published by the Free Software Foundation.
 
 */
 
 #if !defined (_Stack_h)
 #define _Stack_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 template <class T>
 class
 Stack
 {
  public:
   inline Stack (void) { }
   inline virtual ~Stack (void) { }
 
@@ -53,12 +57,13 @@ Stack
 
   virtual int empty (void) = 0;
   virtual int full (void) = 0;
   virtual int length (void) = 0;
 
   virtual void clear (void) = 0;
 
   void error (const char *msg);
+
   virtual int OK (void) = 0;
 };
 
 #endif
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -242,16 +242,19 @@ tm_row_const::tm_row_const_rep::eval_war
 					      int c) const
 {
   if (l == -1 && c == -1)
     ::warning ("%s", msg);
   else
     ::warning ("%s near line %d, column %d", msg, l, c);
 }
 
+#include "SLList.h"
+#include "SLList.cc"
+
 template class SLNode<tm_row_const>;
 template class SLList<tm_row_const>;
 
 class
 tm_const : public SLList<tm_row_const>
 {
 public:
 
