# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1486323299 0
#      Sun Feb 05 19:34:59 2017 +0000
# Node ID b36a7bcf417089fcae196ceb829b343cba48cc5e
# Parent  619eb53521bdb2fd97dbaab94069a9ebf2efb06b
# Parent  80a2434ba83ca1dad20ecf4e43c6ec3c069962f1
maint: merge away accidental extra head.

diff --git a/libgui/src/qtinfo/parser.cc b/libgui/src/qtinfo/parser.cc
--- a/libgui/src/qtinfo/parser.cc
+++ b/libgui/src/qtinfo/parser.cc
@@ -137,19 +137,18 @@ parser::is_ref (const QString& node)
 {
   if (_ref_map.contains (node))
     {
       node_position ref = _ref_map [node];
 
       return ref.pos-_node_map [ref._node_name].pos;
     }
   if (_node_map.contains (node))
-    {
-      return 0;  // node: show from the beginning
-    }
+    return 0;  // node: show from the beginning
+
   return -1;
 }
 
 QString
 parser::search_node (const QString& node_arg)
 {
   QString node = node_arg;
 
@@ -166,45 +165,39 @@ parser::search_node (const QString& node
     {
       int pos = _node_map [node].pos;
       int realPos;
 
       real_position (pos, file_info, realPos);
 
       QIODevice *io = open_file (file_info);
       if (! io)
-        {
-          return QString ();
-        }
+        return QString ();
 
       seek (io, realPos);
 
       QString text = get_next_node (io);
       if (! text.isEmpty ())
-        {
-          return text;
-        }
+        return text;
 
       io->close ();
       delete io;
     }
 
   return QString ();
 }
 
 QString
 parser::search_node (const QString& node, QIODevice *io)
 {
   while (! io->atEnd ())
     {
       QString text = get_next_node (io);
       if (node == get_node_name (text))
-        {
-          return text;
-        }
+        return text;
     }
 
   return QString ();
 }
 
 QString
 parser::get_next_node (QIODevice *io)
 {
@@ -222,62 +215,54 @@ parser::get_next_node (QIODevice *io)
           io->ungetChar (c);
           line = io->readLine ();
         }
       else
         {
           // 0 was read -> image -> text length changes
           line_buffer = io->readLine ();  // image tag that is not needed
           line = io->readLine ();         // firsts line of text message
-          for (i=1; i<line_buffer.size ()+6; i++)  // correct the size
+          for (i = 1; i < line_buffer.size ()+6; i++)  // correct the size
             line.insert (line.size ()-1,QByteArray (" "));  // by adding blanks
         }
 
       if (line.at (0) == '"' && line.size () == 5)  // end of image construct
         line = " ";
 
       if (line.at(0) == 31)
-        {
-          break;
-        }
+        break;
       else
-        {
-          text.append (QString::fromUtf8 (line));
-        }
+        text.append (QString::fromUtf8 (line));
     }
   return text;
 }
 
 static QString
 get_first_line (const QString& text)
 {
   int n = text.indexOf ("\n");
 
   if (n < 0)
-    {
-      return QString ();
-    }
+    return QString ();
 
   QString first_line = text.left (n);
   return first_line;
 }
 
 static QString
 parser_node (const QString& text, const QString& node_name)
 {
   QString firstLine = get_first_line (text);
   QStringList nodes = firstLine.split (",");
   for (int i = 0; i < nodes.size (); i++)
     {
       QString node = nodes.at (i).trimmed ();
 
       if (node.startsWith (node_name))
-        {
-          return node.remove (0, node_name.size ()).trimmed ();
-        }
+        return node.remove (0, node_name.size ()).trimmed ();
     }
   return QString ();
 }
 
 QString
 parser::get_node_name (const QString& text)
 {
   return parser_node (text, "Node:");
@@ -302,76 +287,74 @@ parser::get_node_prev (const QString& te
 }
 
 static void
 replace_links (QString& text)
 {
   QRegExp re ("(\\*[N|n]ote|\n\\*)([ |\n]+)([^:]+):([^:\\.,]*)([:,\\.]+)");
   int i = 0, f;
 
-  while ((i = re.indexIn (text,i)) != -1)
+  while ((i = re.indexIn (text, i)) != -1)
     {
       QString type     = re.cap (1);
       QString note     = re.cap (3);
       QString url_link = re.cap (4);
       QString term     = re.cap (5);
 
       if (url_link.isEmpty ())
-        {
-          url_link = note;
-        }
+        url_link = note;
 
       term.replace (":","");
       note.replace (":","");
-      note.replace (QRegExp ("`([^']+)'"),"\\1");   // no extra format in links
+      note.replace (QRegExp ("`([^']+)'"),"\\1");  // no extra format in links
 
       QRegExp re_break ("(\n[ ]*)");
 
       if (note == "fig" || note == "tab")
         url_link.prepend ("#");
 
       QString href;
       if (type == "\n*")
-        href="\n";
+        href = "\n";
 
       if (re_break.indexIn (url_link) != -1)
         term += re_break.cap (1);
       else if (re_break.indexIn (re.cap (2)) != -1)
         href = re_break.cap (1) + " ";
       else if (re_break.indexIn (note) != -1)
         term += re_break.cap (1);
       note.replace (re_break,"&nbsp;");
 
       url_link = url_link.trimmed ();
       url_link.replace ("\n"," ");
       url_link.replace (QRegExp ("  +")," ");
       url_link.replace ("<b>","");
       url_link.replace ("</b>","");
 
       href += "<font style=\"color:DarkGray; font-weight:bold;\">&raquo;</font>";
-      href +=  "&nbsp;<a href='" + url_link + "'>" + note + "</a>" + term;
+      href += "&nbsp;<a href='" + url_link + "'>" + note + "</a>" + term;
       f = re.matchedLength ();
-      text.replace (i,f,href);
+      text.replace (i, f, href);
       i += href.size ();
     }
 }
 
 static void
 replace_colons (QString& text)
 {
   QRegExp re ("`([^']+)'");
   int i = 0, f;
   while ((i = re.indexIn (text, i)) != -1)
     {
       QString t = re.cap (1);
       QString bold = "<font style=\"color:SteelBlue;font-weight:bold\">" + t +
                      "</font>";
 
       f = re.matchedLength ();
-      text.replace (i,f,bold);
+      text.replace (i, f, bold);
       i += bold.size ();
     }
 }
 
 static void
 info_to_html (QString& text)
 {
   text.replace ("&", "&amp;");
@@ -446,22 +429,20 @@ parser::parse_info_map ()
   int foundCount = 0;
 
   for (int i = 0; i < _info_files.size (); i++)
     {
       QFileInfo fileInfo = _info_files.at (i);
 
       QIODevice *io = open_file (fileInfo);
       if (! io)
-        {
-          continue;
-        }
+        continue;
 
       QString nodeText;
-      while (! (nodeText=get_next_node (io)).isEmpty () && foundCount < 2)
+      while (! (nodeText = get_next_node (io)).isEmpty () && foundCount < 2)
         {
           QString first_line = get_first_line (nodeText);
           if (first_line.startsWith ("Tag"))
             {
               foundCount++;
               int pos = 0;
               QString last_node;
 
@@ -508,17 +489,16 @@ parser::parse_info_map ()
                           item.file_info = info;
                           break;
                         }
                     }
                   item.real_size = index;
                   _info_file_real_size_list.append (item);
                   pos += re_files.matchedLength ();
                 }
-
             }
         }
       io->close ();
       delete io;
     }
 }
 
 void
@@ -559,77 +539,70 @@ parser::seek (QIODevice *io, int pos)
 
 static void
 replace (QString& text, const QRegExp& re, const QString& after)
 {
   int pos = 0;
 
   while ((pos = re.indexIn (text, pos)) != -1)
     {
-      QString cap = text.mid (pos,re.matchedLength ());
+      QString cap = text.mid (pos, re.matchedLength ());
       QString a (after);
       a = a.arg (cap);
       text.remove (pos, re.matchedLength ());
       text.insert (pos, a);
       pos += a.size ();
     }
 }
 
 QString
 parser::global_search (const QString& text, int max_founds)
 {
   QString results;
-  QStringList words = text.split (" ",QString::SkipEmptyParts);
+  QStringList words = text.split (" ", QString::SkipEmptyParts);
 
   QString re_program ("(" + QRegExp::escape (words.at (0)));
   for (int i = 1; i < words.size (); i++)
-    {
-      re_program += "|" + QRegExp::escape (words.at (i));
-    }
+    re_program += "|" + QRegExp::escape (words.at (i));
   re_program += ")";
 
   QRegExp re (re_program, Qt::CaseInsensitive);
 
   results.append ("<html><body>\n<h1>Search results</h1>\n<b>Results for:</b> ");
   results.append (text);
   results.append ("<br>\n");
 
   for (int i = 0; i < _info_files.size (); i++)
     {
       QFileInfo file_info = _info_files.at (i);
       QIODevice *io = open_file (file_info);
       if (! io)
-        {
-          continue;
-        }
+        continue;
 
       QString node_text;
       while (! (node_text = get_next_node (io)).isEmpty ())
         {
           QString firstLine = get_first_line (node_text);
           QString node = get_node_name (node_text);
           if (node.isEmpty ())
-            {
-              continue;
-            }
+            continue;
 
           int n = node_text.indexOf ("\n");
           node_text.remove (0, n);
 
           int pos = 0;
           int founds = 0;
 
           for (; founds < words.size ()
                  && node_text.indexOf (words.at (founds)) >= 0; founds++)
             { }
 
-          if (founds<words.size ())
-            {
-              continue;
-            }
+          if (founds < words.size ())
+            continue;
+
           founds = 0;
 
           while ((pos = re.indexIn (node_text, pos)) != -1
                  && founds < max_founds)
             {
               int line_start, line_end;
               line_start = node_text.lastIndexOf ("\n", pos);
               line_end = node_text.indexOf ("\n", pos);
@@ -662,34 +635,34 @@ parser::global_search (const QString& te
   return results;
 }
 
 QString
 parser::find_ref (const QString &ref_name)
 {
   QString text = "";
 
-  QHash<QString,node_position>::iterator it;
-  for (it=_ref_map.begin (); it!=_ref_map.end (); ++it)
+  QHash<QString, node_position>::iterator it;
+  for (it = _ref_map.begin (); it != _ref_map.end (); ++it)
     {
       QString k = it.key ();
       node_position p = it.value ();
 
       if (k == "XREF" + ref_name)
         {
           // found ref, so return its name
           text = "XREF" + ref_name;
           break;
         }
     }
 
   if (text.isEmpty ())  // try the statement-nodes
     {
       QHash<QString, node_map_item>::iterator itn;
-      for (itn=_node_map.begin (); itn!=_node_map.end (); ++itn)
+      for (itn = _node_map.begin (); itn != _node_map.end (); ++itn)
         {
           QString k = itn.key ();
           if (k == "The " + ref_name + " Statement")
             {
               // found ref, so return its name
               text = k;
               break;
             }
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -1472,58 +1472,73 @@ AC_DEFUN([OCTAVE_CHECK_QT_VERSION], [AC_
       if ! `$PKG_CONFIG --atleast-version=4.0.0 QtCore`; then
         build_qt_gui=no
         warn_qt_version="Qt >= 4.0.0 not found; disabling Qt GUI"
       fi
     fi
   fi
 
   if test $build_qt_gui = yes; then
-    AC_CHECK_TOOLS(MOC_QTVER, [moc-qt$qt_version])
-    AC_CHECK_TOOLS(UIC_QTVER, [uic-qt$qt_version])
-    AC_CHECK_TOOLS(RCC_QTVER, [rcc-qt$qt_version])
-    AC_CHECK_TOOLS(LRELEASE_QTVER, [lrelease-qt$qt_version])
-
-    if test -z "$MOC_QTVER" || test -z "$UIC_QTVER" || test -z "$RCC_QTVER" || test -z "$LRELEASE_QTVER"; then
-      AC_CHECK_TOOLS(QTCHOOSER, [qtchooser])
+    AC_CHECK_TOOLS(QTCHOOSER, [qtchooser])
 
-      if test -z "$MOC"; then
-        AC_CHECK_TOOLS(MOC, [moc])
-        if test -n "$QTCHOOSER"; then
-          MOCFLAGS="-qt$qt_version"
-        fi
-      fi
-      if test -z "$UIC"; then
-        AC_CHECK_TOOLS(UIC, [uic])
-        if test -n "$QTCHOOSER"; then
-          UICFLAGS="-qt$qt_version"
-        fi
-      fi
-      if test -z "$RCC"; then
-        AC_CHECK_TOOLS(RCC, [rcc])
-        if test -n "$QTCHOOSER"; then
-          RCCFLAGS="-qt$qt_version"
-        fi
-      fi
-      if test -z "$LRELEASE"; then
-        AC_CHECK_TOOLS(LRELEASE, [lrelease])
-        if test -n "$QTCHOOSER"; then
-          LRELEASEFLAGS="-qt$qt_version"
-        fi
+    AC_CHECK_TOOLS(MOC_QTVER, [moc-qt$qt_version])
+    if test -z "$MOC_QTVER"; then
+      AC_CHECK_TOOLS(MOC, [moc])
+      if test -n "$MOC" && test -n "$QTCHOOSER"; then
+        MOCFLAGS="-qt$qt_version"
       fi
     else
       MOC="$MOC_QTVER"
+    fi
+      
+    AC_CHECK_TOOLS(UIC_QTVER, [uic-qt$qt_version])
+    if test -z "$UIC_QTVER"; then
+      AC_CHECK_TOOLS(UIC, [uic])
+      if test -n "$UIC" && test -n "$QTCHOOSER"; then
+        UICFLAGS="-qt$qt_version"
+      fi
+    else
       UIC="$UIC_QTVER"
+    fi
+
+    AC_CHECK_TOOLS(RCC_QTVER, [rcc-qt$qt_version])
+    if test -z "$RCC_QTVER"; then
+      AC_CHECK_TOOLS(RCC, [rcc])
+      if test -n "$RCC" && test -n "$QTCHOOSER"; then
+        RCCFLAGS="-qt$qt_version"
+      fi
+    else
       RCC="$RCC_QTVER"
+    fi
+
+    AC_CHECK_TOOLS(LRELEASE_QTVER, [lrelease-qt$qt_version])
+    if test -z "$LRELEASE_QTVER"; then
+      AC_CHECK_TOOLS(LRELEASE, [lrelease])
+      if test -n "$LRELEASE" && test -n "$QTCHOOSER"; then
+        LRELEASEFLAGS="-qt$qt_version"
+      fi
+    else
       LRELEASE="$LRELEASE_QTVER"
     fi
 
     if test -z "$MOC" || test -z "$UIC" || test -z "$RCC" || test -z "$LRELEASE"; then
       warn_qt_tools="one or more of the Qt utility programs moc, uic, rcc, and lrelease not found; disabling Qt GUI"
       build_qt_gui=no
+      MOC_QTVER=
+      UIC_QTVER=
+      RCC_QTVER=
+      LRELEASE_QTVER=
+      MOC_FLAGS=
+      UIC_FLAGS=
+      RCC_FLAGS=
+      LRELEASE_FLAGS=
+      $as_unset ac_cv_prog_MOC_QTVER
+      $as_unset ac_cv_prog_UIC_QTVER
+      $as_unset ac_cv_prog_RCC_QTVER
+      $as_unset ac_cv_prog_LRELEASE_QTVER
     fi
   fi
 
   if test $build_qt_gui = yes; then
     AC_CHECK_FUNCS([setlocale], [],
       [build_qt_gui=no
        warn_qt_setlocale="setlocale not found; disabling Qt GUI"])
   fi
