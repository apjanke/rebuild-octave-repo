# HG changeset patch
# User Rik <rik@octave.org>
# Date 1542824164 28800
#      Wed Nov 21 10:16:04 2018 -0800
# Node ID 05dfcb24ef12659976c04be5d58aee5a1a6d9325
# Parent  5b527588b4892523e5d7435f5d4e9d2a8abfb149
Supply missing arguments to variable length *printf functions (bug #55046).

* data.cc (Frem, Fmod): Change arg in format string from '%d' to '%s' because
class name is a string.

* graphics.in.h (double_radio_property::current_value): Supply name of property
to match '%s' argument in error format string.

* variables.cc (set_internal_variable): Supply name of variable to match '%s'
argument in error format string.

* bp-table.cc (bp_table::parse_dbfunction_params): Supply name of calling
function to '%s' argument in error format string.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -612,17 +612,17 @@ periodic, @code{mod} is a better choice.
       builtin_type_t btyp0 = args(0).builtin_type ();
       builtin_type_t btyp1 = args(1).builtin_type ();
       if (btyp0 == btyp_double || btyp0 == btyp_float)
         btyp0 = btyp1;
       if (btyp1 == btyp_double || btyp1 == btyp_float)
         btyp1 = btyp0;
 
       if (btyp0 != btyp1)
-        error ("rem: cannot combine %s and %d",
+        error ("rem: cannot combine %s and %s",
                args(0).class_name ().c_str (),
                args(1).class_name ().c_str ());
 
       switch (btyp0)
         {
 #define MAKE_INT_BRANCH(X)                                              \
           case btyp_ ## X:                                              \
             {                                                           \
@@ -791,17 +791,17 @@ negative numbers or when the values are 
       builtin_type_t btyp0 = args(0).builtin_type ();
       builtin_type_t btyp1 = args(1).builtin_type ();
       if (btyp0 == btyp_double || btyp0 == btyp_float)
         btyp0 = btyp1;
       if (btyp1 == btyp_double || btyp1 == btyp_float)
         btyp1 = btyp0;
 
       if (btyp0 != btyp1)
-        error ("mod: cannot combine %s and %d",
+        error ("mod: cannot combine %s and %s",
                args(0).class_name ().c_str (),
                args(1).class_name ().c_str ());
 
       switch (btyp0)
         {
 #define MAKE_INT_BRANCH(X)                                              \
           case btyp_ ## X:                                              \
             {                                                           \
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -1321,17 +1321,17 @@ public:
       error ("%s: property has no double", get_name ().c_str ());
 
     return dval;
   }
 
   const std::string& current_value (void) const
   {
     if (current_type != radio_t)
-      error ("%s: property has no radio value");
+      error ("%s: property has no radio value", get_name ().c_str ());
 
     return current_val;
   }
 
   double_radio_property& operator = (const octave_value& val)
   {
     set (val);
     return *this;
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -693,19 +693,19 @@ set_internal_variable (double& var, cons
   if (nargin > 1)
     print_usage ();
 
   if (nargin == 1)
     {
       double dval = args(0).xscalar_value ("%s: argument must be a scalar value", nm);
 
       if (dval < minval)
-        error ("%s: argument must be greater than %g", minval);
+        error ("%s: argument must be greater than %g", nm, minval);
       if (dval > maxval)
-        error ("%s: argument must be less than or equal to %g", maxval);
+        error ("%s: argument must be less than or equal to %g", nm, maxval);
 
       var = dval;
     }
 
   return retval;
 }
 
 octave_value
diff --git a/libinterp/parse-tree/bp-table.cc b/libinterp/parse-tree/bp-table.cc
--- a/libinterp/parse-tree/bp-table.cc
+++ b/libinterp/parse-tree/bp-table.cc
@@ -327,31 +327,31 @@ namespace octave
             pos++;
             break;
 
           case dbstop_at:
             if (seen_at)
               error ("%s: Only one 'at' clause is allowed -- %s",
                      who, args(pos).string_value ().c_str ());
             else if (seen_if)
-              error ("%s: line number must come before 'if' clause\n");
+              error ("%s: line number must come before 'if' clause\n", who);
             seen_at = true;
 
             if (! seen_in)
               {
                 // It was a line number.  Get function name from debugger.
                 if (Vdebugging)
                   symbol_name = m_evaluator.get_user_code ()->profiler_name ();
                 else
                   error ("%s: function name must come before line number "
                          "and 'if'", who);
                 seen_in = true;
               }
             else if (seen_if)
-              error ("%s: line number must come before 'if' clause\n");
+              error ("%s: line number must come before 'if' clause\n", who);
 
             // Read a list of line numbers (or arrays thereof)
             for ( ; pos < nargin; pos++)
               {
                 if (args(pos).is_string ())
                   {
                     int line = atoi (args(pos).string_value ().c_str ());
 
@@ -364,17 +364,17 @@ namespace octave
                   {
                     const NDArray arg = args(pos).array_value ();
 
                     for (octave_idx_type j = 0; j < arg.numel (); j++)
                       lines[list_idx++] = static_cast<int> (arg.elem (j));
                   }
                 else
                   error ("%s: Invalid argument type %s",
-                         args(pos).type_name ().c_str ());
+                         who, args(pos).type_name ().c_str ());
               }
             break;
 
           case dbstop_if:
             if (seen_in)    // conditional breakpoint
               {
                 cond = "";  // remaining arguments form condition
                 for (; pos < nargin; pos++)
