# HG changeset patch
# User jwe
# Date 845142775 0
#      Sat Oct 12 17:52:55 1996 +0000
# Node ID 09652906683810a66c702920daf52fe1423e17f3
# Parent  58e5955495d7b0dc473e9a50a1602c2c4d132d6b
[project @ 1996-10-12 17:50:47 by jwe]

diff --git a/liboctave/MArray.cc b/liboctave/MArray.cc
--- a/liboctave/MArray.cc
+++ b/liboctave/MArray.cc
@@ -57,35 +57,35 @@ operator -= (MArray<T>& a, const T& s)
 
 template <class T>
 MArray<T>&
 operator += (MArray<T>& a, const MArray<T>& b)
 {
   int l = a.length ();
   if (l > 0)
     {
-      if (l != b.length ())
-	(*current_liboctave_error_handler) \
-	  ("nonconformant += array operation attempted"); \
+      int bl = b.length ();
+      if (l != bl)
+	gripe_nonconformant ("operator +=", l, bl);
       else
 	DO_VV_OP2 (+=);
     }
   return a;
 }
 
 template <class T>
 MArray<T>&
 operator -= (MArray<T>& a, const MArray<T>& b)
 {
   int l = a.length ();
   if (l > 0)
     {
-      if (l != b.length ())
-	(*current_liboctave_error_handler) \
-	  ("nonconformant -= array operation attempted"); \
+      int bl = b.length ();
+      if (l != bl)
+	gripe_nonconformant ("operator -=", l, bl);
       else
 	DO_VV_OP2 (-=);
     }
   return a;
 }
 
 // Element by element MArray by scalar ops.
 
@@ -116,38 +116,38 @@ MARRAY_AS_OP (/)
 
 MARRAY_SA_OP(+)
 MARRAY_SA_OP(-)
 MARRAY_SA_OP(*)
 MARRAY_SA_OP(/)
 
 // Element by element MArray by MArray ops.
 
-#define MARRAY_AA_OP(FCN, OP, OP_STR) \
+#define MARRAY_AA_OP(FCN, OP) \
   template <class T> \
   MArray<T> \
   FCN (const MArray<T>& a, const MArray<T>& b) \
   { \
     int l = a.length (); \
-    if (l != b.length ()) \
+    int bl = b.length (); \
+    if (l != bl) \
       { \
-	(*current_liboctave_error_handler) \
-	  ("nonconformant array " OP_STR " attempted"); \
+	gripe_nonconformant (#FCN, l, bl); \
 	return MArray<T> (); \
       } \
     if (l == 0) \
       return MArray<T> (); \
     DO_VV_OP (OP); \
     return MArray<T> (result, l); \
   }
 
-MARRAY_AA_OP (operator +, +, "addition")
-MARRAY_AA_OP (operator -, -, "subtraction")
-MARRAY_AA_OP (product,    *, "multiplication")
-MARRAY_AA_OP (quotient,   /, "division")
+MARRAY_AA_OP (operator +, +)
+MARRAY_AA_OP (operator -, -)
+MARRAY_AA_OP (product,    *)
+MARRAY_AA_OP (quotient,   /)
 
 // Unary MArray ops.
 
 template <class T>
 MArray<T>
 operator - (const MArray<T>& a)
 {
   NEG_V;
diff --git a/liboctave/MArray2.cc b/liboctave/MArray2.cc
--- a/liboctave/MArray2.cc
+++ b/liboctave/MArray2.cc
@@ -56,21 +56,20 @@ operator -= (MArray2<T>& a, const T& s)
 // Element by element MArray2 by MArray2 ops.
 
 template <class T>
 MArray2<T>&
 operator += (MArray2<T>& a, const MArray2<T>& b)
 {
   int r = a.rows ();
   int c = a.cols ();
-  if (r != b.rows () || c != b.cols ())
-    {
-      (*current_liboctave_error_handler)
-	("nonconformant += array operation attempted");
-    }
+  int br = b.rows ();
+  int bc = b.cols ();
+  if (r != br || c != bc)
+    gripe_nonconformant ("operator +=", r, c, br, bc);
   else
     {
       if (r > 0 && c > 0)
 	{
 	  int l = a.length ();
 	  DO_VV_OP2 (+=);
 	}
     }
@@ -78,21 +77,20 @@ operator += (MArray2<T>& a, const MArray
 }
 
 template <class T>
 MArray2<T>&
 operator -= (MArray2<T>& a, const MArray2<T>& b)
 {
   int r = a.rows ();
   int c = a.cols ();
-  if (r != b.rows () || c != b.cols ())
-    {
-      (*current_liboctave_error_handler)
-	("nonconformant -= array operation attempted");
-    }
+  int br = b.rows ();
+  int bc = b.cols ();
+  if (r != br || c != bc)
+    gripe_nonconformant ("operator -=", r, c, br, bc);
   else
     {
       if (r > 0 && c > 0)
 	{
 	  int l = a.length ();
 	  DO_VV_OP2 (-=);
 	}
     }
@@ -128,40 +126,41 @@ MARRAY_A2S_OP (/)
 
 MARRAY_SA2_OP (+)
 MARRAY_SA2_OP (-)
 MARRAY_SA2_OP (*)
 MARRAY_SA2_OP (/)
 
 // Element by element MArray2 by MArray2 ops.
 
-#define MARRAY_A2A2_OP(FCN, OP, OP_STR) \
+#define MARRAY_A2A2_OP(FCN, OP) \
   template <class T> \
   MArray2<T> \
   FCN (const MArray2<T>& a, const MArray2<T>& b) \
   { \
     int r = a.rows (); \
     int c = a.cols (); \
-    if (r != b.rows () || c != b.cols ()) \
+    int br = b.rows (); \
+    int bc = b.cols (); \
+    if (r != br || c != bc) \
       { \
-	(*current_liboctave_error_handler) \
-	  ("nonconformant array " OP_STR " attempted"); \
+        gripe_nonconformant (#FCN, r, c, br, bc); \
 	return MArray2<T> (); \
       } \
     if (r == 0 || c == 0) \
       return MArray2<T> (); \
     int l = a.length (); \
     DO_VV_OP (OP); \
     return MArray2<T> (result, r, c); \
   }
 
-MARRAY_A2A2_OP (operator +, +, "addition")
-MARRAY_A2A2_OP (operator -, -, "subtraction")
-MARRAY_A2A2_OP (product,    *, "product")
-MARRAY_A2A2_OP (quotient,   /, "quotient")
+MARRAY_A2A2_OP (operator +, +)
+MARRAY_A2A2_OP (operator -, -)
+MARRAY_A2A2_OP (product,    *)
+MARRAY_A2A2_OP (quotient,   /)
 
 // Unary MArray2 ops.
 
 template <class T>
 MArray2<T>
 operator - (const MArray2<T>& a)
 {
   NEG_V;
diff --git a/liboctave/MDiagArray2.cc b/liboctave/MDiagArray2.cc
--- a/liboctave/MDiagArray2.cc
+++ b/liboctave/MDiagArray2.cc
@@ -38,20 +38,23 @@ Software Foundation, 59 Temple Place - S
 // Element by element MDiagArray2 by MDiagArray2 ops.
 
 template <class T>
 MDiagArray2<T>&
 operator += (MDiagArray2<T>& a, const MDiagArray2<T>& b)
 {
   int r = a.rows ();
   int c = a.cols ();
-  if (r != b.rows () || c != b.cols ())
+
+  int b_nr = b.rows ();
+  int b_nc = b.cols ();
+
+  if (r != b_nr || c != b_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant array operator += attempted");
+      gripe_nonconformant ("operator +=", r, c, b_nr, b_nc);
       static MDiagArray2<T> foo;
       return foo;
     }
   else
     {
       int l = a.length ();
       DO_VV_OP2 (+=);
     }
@@ -59,20 +62,23 @@ operator += (MDiagArray2<T>& a, const MD
 }
 
 template <class T>
 MDiagArray2<T>&
 operator -= (MDiagArray2<T>& a, const MDiagArray2<T>& b)
 {
   int r = a.rows ();
   int c = a.cols ();
-  if (r != b.rows () || c != b.cols ())
+
+  int b_nr = b.rows ();
+  int b_nc = b.cols ();
+
+  if (r != b_nr || c != b_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant array operator -= attempted");
+      gripe_nonconformant ("operator -=", r, c, b_nr, b_nc);
       static MDiagArray2<T> foo;
       return foo;
     }
   else
     {
       int l = a.length ();
       DO_VV_OP2 (-=);
     }
@@ -100,39 +106,40 @@ MDiagArray2<T>
 operator * (const T& s, const MDiagArray2<T>& a)
 {
   DO_SV_OP (*);
   return MDiagArray2<T> (result, a.rows (), a.cols ());
 }
 
 // Element by element MDiagArray2 by MDiagArray2 ops.
 
-#define MARRAY_DADA_OP(FCN, OP, OP_STR) \
+#define MARRAY_DADA_OP(FCN, OP) \
   template <class T> \
   MDiagArray2<T> \
   FCN (const MDiagArray2<T>& a, const MDiagArray2<T>& b) \
   { \
     int r = a.rows (); \
     int c = a.cols (); \
-    if (r != b.rows () || c != b.cols ()) \
+    int b_nr = b.rows (); \
+    int b_nc = b.cols (); \
+    if (r != b_nr || c != b_nc) \
       { \
-	(*current_liboctave_error_handler) \
-	  ("nonconformant diagonal array " OP_STR " attempted"); \
+        gripe_nonconformant (#FCN, r, c, b_nr, b_nc); \
 	return MDiagArray2<T> (); \
       } \
     if (c == 0 || r == 0) \
       return MDiagArray2<T> (); \
     int l = a.length (); \
     DO_VV_OP (OP); \
     return MDiagArray2<T> (result, r, c); \
   }
 
-MARRAY_DADA_OP (operator +, +, "addition")
-MARRAY_DADA_OP (operator -, -, "subtraction")
-MARRAY_DADA_OP (product,    *, "product")
+MARRAY_DADA_OP (operator +, +)
+MARRAY_DADA_OP (operator -, -)
+MARRAY_DADA_OP (product,    *)
 
 // Unary MDiagArray2 ops.
 
 template <class T>
 MDiagArray2<T>
 operator - (const MDiagArray2<T>& a)
 {
   NEG_V;
diff --git a/liboctave/Range.cc b/liboctave/Range.cc
--- a/liboctave/Range.cc
+++ b/liboctave/Range.cc
@@ -31,16 +31,29 @@ Software Foundation, 59 Temple Place - S
 #include <cfloat>
 #include <climits>
 #include <cmath>
 
 #include <iostream.h>
 
 #include "Range.h"
 #include "dMatrix.h"
+#include "lo-mappers.h"
+#include "lo-utils.h"
+
+bool
+Range::all_elements_are_ints (void) const
+{
+  // If the base and increment are ints, the final value in the range
+  // will also be an integer, even if the limit is not.
+
+  return (! (xisnan (rng_base) || xisnan (rng_inc))
+	  && (double) NINT (rng_base) == rng_base
+	  && (double) NINT (rng_inc) == rng_inc);
+}
 
 Matrix
 Range::matrix_value (void) const
 {
   Matrix retval;
 
   if (rng_nelem > 0)
     {
diff --git a/liboctave/Range.h b/liboctave/Range.h
--- a/liboctave/Range.h
+++ b/liboctave/Range.h
@@ -51,28 +51,29 @@ Range
     : rng_base (b), rng_limit (l), rng_inc (i),
       rng_nelem (nelem_internal ()) { }
 
   double base (void) const { return rng_base;  }
   double limit (void) const { return rng_limit; }
   double inc (void) const { return rng_inc;   }
   int nelem (void) const { return rng_nelem; }
 
+  bool all_elements_are_ints (void) const;
+
   Matrix matrix_value (void) const;
 
   double min (void) const;
   double max (void) const;
 
   void sort (void);
 
   void set_base (double b) { rng_base = b;  }
   void set_limit (double l) { rng_limit = l; }
   void set_inc (double i) { rng_inc = i;   }
 
-
   friend ostream& operator << (ostream& os, const Range& r);
   friend istream& operator >> (istream& is, Range& r);
 
   void print_range (void);
 
  private:
 
   double rng_base;
