# HG changeset patch
# User jwe
# Date 1156439358 0
#      Thu Aug 24 17:09:18 2006 +0000
# Node ID b3478d7a0486dbbda250a24b7d3c0577db51c02d
# Parent  2289cafef60d6083756fbda21f5d5c9737ea12cb
[project @ 2006-08-24 17:09:18 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,17 +1,20 @@
 2006-08-24  John W. Eaton  <jwe@octave.org>
 
 	* image/saveimage.m: Use logical indexing instead of
 	indices computed by calling find on the logical index.
 
 2006-08-24  Søren Hauberg  <soren@hauberg.org>
 
-	* miscellaneous/bincoeff.m: Use logical indexing instead of
-	indices computed by calling find on the logical index.
+	* miscellaneous/bincoeff.m, set/setdiff.m, specfun/factorial.m:
+	Use logical indexing instead of indices computed by calling find
+	on the logical index.
+
+	* linear-algebra/krylov.m: Delete unused local var nzidx.
 
 2006-08-23  Quentin Spencer  <qspencer@ieee.org>
 
 	* control/system/tf2zp.m: Simplify gain calculation.
 
 2006-08-23  John W. Eaton  <jwe@octave.org>
 
 	* plot/__plt__.m: Insert using clauses for all plots.
diff --git a/scripts/linear-algebra/krylov.m b/scripts/linear-algebra/krylov.m
--- a/scripts/linear-algebra/krylov.m
+++ b/scripts/linear-algebra/krylov.m
@@ -90,17 +90,16 @@ function [Uret, H, nu] = krylov (A, V, k
     Uret = [];
     H = [];
     nu = 0;
     return;
   endif
 
   # identify trivial null space
   abm = max (abs ([A, V]'));
-  nzidx = find (abm != 0);
   zidx = find (abm == 0);
 
   # set up vector of pivot points
   pivot_vec = 1:na;
 
   iter = 0;
   alpha = [];
   nh = 0;
diff --git a/scripts/set/setdiff.m b/scripts/set/setdiff.m
--- a/scripts/set/setdiff.m
+++ b/scripts/set/setdiff.m
@@ -51,27 +51,27 @@ function c = setdiff (a, b, byrows)
   if (byrows)
     c = unique (a, "rows");
     if (! isempty (c) && ! isempty (b))
       ## Form a and b into combined set.
       b = unique (b, "rows");
       [dummy, idx] = sortrows ([c; b]);
       ## Eliminate those elements of a that are the same as in b.
       n = length (dummy);
-      c(idx(find (dummy(1:n-1) == dummy(2:n))), :) = [];
+      c(idx(dummy(1:n-1) == dummy(2:n)), :) = [];
     endif
   else
     c = unique (a);
     if (! isempty (c) && ! isempty (b))
       ## Form a and b into combined set.
       b = unique (b);
       [dummy, idx] = sort ([c(:); b(:)]);
       ## Eliminate those elements of a that are the same as in b.
       n = length (dummy);
-      c(idx(find (dummy(1:n-1) == dummy(2:n)))) = [];
+      c(idx(dummy(1:n-1) == dummy(2:n))) = [];
       ## Reshape if necessary.
       if (size (c, 1) != 1 && size (b, 1) == 1)
 	c = c.';
       endif
     endif
   endif
   
 endfunction
diff --git a/scripts/specfun/factorial.m b/scripts/specfun/factorial.m
--- a/scripts/specfun/factorial.m
+++ b/scripts/specfun/factorial.m
@@ -26,14 +26,14 @@
 
 function x = factorial (n)
   if (any (n(:) < 0))
     error ("factorial: n be be a scalar or array of positive integers");
   endif
   if (isscalar (n))
     x = prod (2:n);
   else
-    n (find (n < 1)) = 1;
+    n (n < 1) = 1;
     m = max (n(:));
     c = cumprod (1:m);
     x = c(floor (n));
   endif
 endfunction
