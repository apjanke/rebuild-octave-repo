# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1318472701 14400
#      Wed Oct 12 22:25:01 2011 -0400
# Node ID 348857854c5231edbf122a0a3e128d93b542e8fa
# Parent  441af0aa125afea36aa51bb410f48261a4cd53e5
correctly handle multidimensional objects in num2cell

* cellfun.cc (get_object_dims, do_object2cell): New functions.
(Fnum2cell): Call do_object2cell to handle class objects.
* ov-class.cc (octave_class::size): Return dims when size method
is not available.
* test_classes.m: Delete tests for concatenation and num2cell.

diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -1707,16 +1707,76 @@ do_num2cell (const NDA& array, const Arr
         {
           retval.xelem (i) = NDA (parray.column (i).reshape (arraydv));
         }
 
       return retval;
     }
 }
 
+// FIXME -- this is a mess, but if a size method for the object exists,
+// we have to call it to get the size of the object instead of using the
+// internal dims method.
+
+static dim_vector
+get_object_dims (octave_value& obj)
+{
+  dim_vector retval;
+
+  Matrix m = obj.size ();
+
+  int n = m.numel ();
+
+  retval.resize (n);
+
+  for (int i = 0; i < n; i++)
+    retval(i) = m(i);
+
+  return retval;
+}
+
+static Cell
+do_object2cell (const octave_value& obj, const Array<int>& dimv)
+{
+  Cell retval;
+
+  // FIXME -- this copy is only needed because the octave_value::size
+  // method is not const.
+  octave_value array = obj;
+
+  if (dimv.is_empty ())
+    {
+      dim_vector dv = get_object_dims (array);
+
+      if (! error_state)
+        {
+          retval.resize (dv);
+
+          octave_value_list idx (1);
+
+          for (octave_idx_type i = 0; i < dv.numel (); i++)
+            {
+              octave_quit ();
+
+              idx(0) = double (i+1);
+
+              retval.xelem(i) = array.single_subsref ("(", idx);
+
+              if (error_state)
+                break;
+            }
+        }
+    }
+  else
+    {
+      error ("num2cell (A, dim) not implemented for class objects");
+    }
+
+  return retval;
+}
 
 DEFUN_DLD (num2cell, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{C} =} num2cell (@var{A})\n\
 @deftypefnx {Loadable Function} {@var{C} =} num2cell (@var{A}, @var{dim})\n\
 Convert the numeric matrix @var{A} to a cell array.  If @var{dim} is\n\
 defined, the value @var{C} is of dimension 1 in this dimension and the\n\
 elements of @var{A} are placed into @var{C} in slices.  For example:\n\
@@ -1796,32 +1856,20 @@ num2cell([1,2;3,4],1)\n\
           else
             {
               if (array.is_single_type ())
                 retval = do_num2cell (array.float_array_value (), dimv);
               else
                 retval = do_num2cell (array.array_value (), dimv);
             }
         }
-      else if (array.is_map () || array.is_object ())
-        {
-          Cell tmp = do_num2cell (array.map_value (), dimv);
-
-          if (array.is_object ())
-            {
-              std::string cname = array.class_name ();
-              std::list<std::string> parents = array.parent_class_name_list ();
-
-              for (octave_idx_type i = 0; i < tmp.numel (); i++)
-                tmp(i) = octave_value (new octave_class (tmp(i).map_value (),
-                                                         cname, parents));
-            }
-
-          retval = tmp;
-        }
+      else if (array.is_object ())
+        retval = do_object2cell (array, dimv);
+      else if (array.is_map ())
+        retval = do_num2cell (array.map_value (), dimv);
       else if (array.is_cell ())
         retval = do_num2cell (array.cell_value (), dimv);
       else if (array.is_object ())
         retval = do_num2cell (array.cell_value (), dimv);
       else
         gripe_wrong_type_arg ("num2cell", array);
     }
 
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -317,16 +317,27 @@ octave_class::size (void)
       octave_value_list args (1, octave_value (this));
 
       octave_value_list lv = feval (meth.function_value (), args, 1);
       if (lv.length () > 0 && lv(0).is_matrix_type () && lv(0).dims ().is_vector ())
         retval = lv(0).matrix_value ();
       else
         error ("@%s/size: invalid return value", class_name ().c_str ());
     }
+  else
+    {
+      dim_vector dv = dims ();
+
+      int nel = dv.numel ();
+
+      retval.resize (1, nel);
+
+      for (int i = 0; i < nel; i++)
+        retval(i) = dv(i);
+    }
 
   return retval;
 }
 
 octave_idx_type
 octave_class::numel (const octave_value_list& idx)
 {
   if (in_class_method () || called_from_builtin ())
diff --git a/test/classes/test_classes.m b/test/classes/test_classes.m
--- a/test/classes/test_classes.m
+++ b/test/classes/test_classes.m
@@ -194,19 +194,8 @@
 %!  assert(class(cork(grk)),'Cork')
 %!  assert(class(grk),'Gork')
 %!  assert(isa(grk,'Gork'))
 %!  assert(isa(grk,'Dork'))
 %!  assert(isa(grk,'Pork'))
 %!  assert(isa(grk,'Blork'))
 %!  assert(isa(grk,'Snork'))
 %!  assert(isa(grk,'Spork'))
-
-%!test
-%! d = Dork ();
-%! x = [d,d];
-%! assert (size (x), [1, 2])
-%! assert (class (x), "Dork")
-
-%!test
-%! d = Dork ();
-%! x = [d,d];
-%! assert (num2cell (x), {d, d});
