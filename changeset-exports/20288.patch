# HG changeset patch
# User Rik <rik@octave.org>
# Date 1435333065 25200
#      Fri Jun 26 08:37:45 2015 -0700
# Node ID 494a5ed628b5baad2fbac27a5084d2444d77d3d1
# Parent  cdb382f1de79f096e795493cab41b9fb6a59197b
Fix segfault when zooming in on logscale axes (bug #45412).

* graphics.cc (axes::properties::calc_ticks_and_lims): When adjusting ticks to
to fit within existing manual limits, make sure that upper tick remains greater
than or equal to lower tick.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -7109,17 +7109,17 @@ axes::properties::calc_ticks_and_lims (a
   else
     tick_sep = calc_tick_sep (lo, hi);
 
   int i1 = static_cast<int> (gnulib::floor (lo / tick_sep));
   int i2 = static_cast<int> (std::ceil (hi / tick_sep));
 
   if (limmode_is_auto)
     {
-      // Adjust limits to include min and max tics
+      // Adjust limits to include min and max ticks
       Matrix tmp_lims (1,2);
       tmp_lims(0) = std::min (tick_sep * i1, lo);
       tmp_lims(1) = std::max (tick_sep * i2, hi);
 
       if (is_logscale)
         {
           tmp_lims(0) = std::pow (10., tmp_lims(0));
           tmp_lims(1) = std::pow (10., tmp_lims(1));
@@ -7131,20 +7131,20 @@ axes::properties::calc_ticks_and_lims (a
               tmp_lims(0) = -tmp_lims(1);
               tmp_lims(1) = -tmp;
             }
         }
       lims = tmp_lims;
     }
   else
     {
-      // adjust min and max tics to be within limits
+      // adjust min and max ticks to be within limits
       if (i1*tick_sep < lo)
         i1++;
-      if (i2*tick_sep > hi)
+      if (i2*tick_sep > hi && i2 > i1)
         i2--;
     }
 
   Matrix tmp_ticks (1, i2-i1+1);
   for (int i = 0; i <= i2-i1; i++)
     {
       tmp_ticks(i) = tick_sep * (i+i1);
       if (is_logscale)
