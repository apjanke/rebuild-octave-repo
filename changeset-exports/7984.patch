# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1217252860 -7200
#      Mon Jul 28 15:47:40 2008 +0200
# Node ID bbaa5d7d0143db7d13baf2a027ffd823488cf1cc
# Parent  91d020444da7d1b52003a4b5f7432639cd6917ae
Some documentation updates

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,10 +1,35 @@
 2008-07-28  David Bateman  <dbateman@free.fr>
 
+	* interpreter/arith.txi: Document reallog, realpow and realsqrt.
+	* interpreter/dbug.txi: Document the means of setting a breakpoint
+	in a sub-function
+	* interpreter/func.txi: Document nargoutchk and symvar.
+	* interpreter/geometry.txi: Document rectint.
+	* interpreter/image.txi: Document contrast.
+	* interpreter/interp.txi: Document interp1q.
+	* interpreter/linalg.txi: Document planerot, rcond and subspace.
+	* interpreter/numbers.txi: Document data type demotion and single
+	precision data type.
+	* interpreter/plot.txi: Document ginput, gtext,
+	waitforbuttonpress, ezcontour, ezcontourf, ezpolar, ezplot3,
+	ezmesh, ezmeshc, ezsurf, ezsurfc, allchild, findobj and findall
+	functions.
+	* interpreter/quad.txi: Document quadv, quadgk, dblquad and
+	triplequad functions.
+	* interpreter/strings.txi: Document validstring, regexptranslate
+	and isstrprop functions.
+	* interpreter/system.txi: Document addtodate, filemarker and perl
+	functions.
+	* interpreter/var.txi: Document the genvarname and namelengthmax
+	functions.
+	* interpreter/octave.texi: Update table of contents for the above
+	changes.
+
 	* interpreter/plot.txi: Document contourf.
 
 	* interpreter/plot.txi: Clarify the description of OuterPosition
 	axes property.
 
 2008-05-20  David Bateman  <dbateman@free.fr>
 
 	* interpreter/debug.txi: Uodate documentation for multiline
diff --git a/doc/interpreter/arith.txi b/doc/interpreter/arith.txi
--- a/doc/interpreter/arith.txi
+++ b/doc/interpreter/arith.txi
@@ -85,16 +85,22 @@ each element of the matrix.
 @DOCSTRING(nextpow2)
 
 @DOCSTRING(nthroot)
 
 @DOCSTRING(pow2)
 
 @DOCSTRING(primes)
 
+@DOCSTRING(reallog)
+
+@DOCSTRING(realpow)
+
+@DOCSTRING(realsqrt)
+
 @DOCSTRING(rem)
 
 @DOCSTRING(round)
 
 @DOCSTRING(roundb)
 
 @DOCSTRING(sign)
 
diff --git a/doc/interpreter/debug.txi b/doc/interpreter/debug.txi
--- a/doc/interpreter/debug.txi
+++ b/doc/interpreter/debug.txi
@@ -109,16 +109,42 @@ 27. The breakpoints can then be cleared 
 @noindent
 To clear all of the breakpoints in a function the recommended means,
 following the above example, is then
 
 @example
 dbclear ("asind", dbstatus ("asind"));
 @end example
 
+A breakpoint can be set in a subfunction. For example if a file contains
+the functions
+
+@example
+function y = func1 (x)
+  y = func2 (x);
+endfunction
+function y = func2 (x)
+  y = x + 1;
+endfunction
+@end example
+
+@noindent
+then a breakpoint can be set at the start of the subfunction directly
+with
+
+@example
+@group
+dbstop (["func1", filemarker(), "func2"])
+@result{} 5
+@end group
+@end example
+
+Note that @code{filemarker} returns a character that marks the
+subfunctions from the file containing them.
+
 Another simple means of setting a breakpoint in an Octave script is the
 use of the @code{keyboard} function.
 
 @DOCSTRING(keyboard)
 
 @noindent
 The @code{keyboard} function is typically placed in a script at the
 point where the user desires that the execution is stopped. It
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -329,16 +329,18 @@ c = 2
 
 @noindent
 along with a warning.
 
 @DOCSTRING(nargout)
 
 @DOCSTRING(nargchk)
 
+@DOCSTRING(nargoutchk)
+
 @node Variable-length Argument Lists
 @section Variable-length Argument Lists
 @cindex variable-length argument lists
 @cindex @code{...}
 Sometimes the number of input arguments is not known when the function
 is defined.  As an example think of a function that returns the smallest
 of all its input arguments.  For example,
 
@@ -1058,16 +1060,18 @@ writing @code{f(x)}.
 @DOCSTRING(inline)
 
 @DOCSTRING(argnames)
 
 @DOCSTRING(formula)
 
 @DOCSTRING(vectorize)
 
+@DOCSTRING(symvar)
+
 @node Commands
 @section Commands
 
 Commands are a special class of functions that only accept string
 input arguments. A command can be called as an ordinary function, but
 it can also be called without the parentheses like the following example
 shows
 
diff --git a/doc/interpreter/geometry.txi b/doc/interpreter/geometry.txi
--- a/doc/interpreter/geometry.txi
+++ b/doc/interpreter/geometry.txi
@@ -331,17 +331,21 @@ y = rand (10, 1);
 [c, f] = voronoin ([x, y]);
 af = zeros (size(f));
 for i = 1 : length (f)
   af(i) = polyarea (c (f @{i, :@}, 1), c (f @{i, :@}, 2));
 endfor
 @end group
 @end example
 
-Facets of the Voronoi diagram with a vertex at infinity have infinity area.
+Facets of the Voronoi diagram with a vertex at infinity have infinity
+area. A simplified version of @code{polyarea} for rectangles is
+available with @code{rectint}
+
+@DOCSTRING(rectint)
 
 @DOCSTRING(inpolygon)
 
 An example of the use of @code{inpolygon} might be
 
 @example
 @group
 randn ("state", 2);
diff --git a/doc/interpreter/image.txi b/doc/interpreter/image.txi
--- a/doc/interpreter/image.txi
+++ b/doc/interpreter/image.txi
@@ -147,16 +147,18 @@ between 0 and 1.
 @DOCSTRING(spring)
 
 @DOCSTRING(summer)
 
 @DOCSTRING(white)
 
 @DOCSTRING(winter)
 
+@DOCSTRING(contrast)
+
 An additional colormap is @code{gmap40}. This code map contains only
 colors with integer values of the red, green and blue components. This
 workaround a limitation on gnuplot 4.0, that does not allow the color of
 line or patch objects to be set, and so @code{gmap40} is useful for
 gnuplot 4.0 users, and in particular in conjunction with the @var{bar},
 @var{barh} or @var{contour} functions.
 
 @DOCSTRING(gmap40)
diff --git a/doc/interpreter/interp.txi b/doc/interpreter/interp.txi
--- a/doc/interpreter/interp.txi
+++ b/doc/interpreter/interp.txi
@@ -77,16 +77,22 @@ step function}
 
 @float Figure,fig:interpderiv2
 @image{interpderiv2,8cm}
 @caption{Comparison of the second derivate of the 'phcip' and 'spline' 
 interpolation methods for a step function}
 @end float
 @end ifnotinfo
 
+A simplified version of @code{interp1} that performs only linear
+interpolation is available in @code{interp1q}. This argument is slightly
+faster than @code{interp1} as to performs little error checking.
+
+@DOCSTRING(interp1q)
+
 Fourier interpolation, is a resampling technique where a signal is
 converted to the frequency domain, padded with zeros and then
 reconverted to the time domain.
 
 @DOCSTRING(interpft)
 
 There are two significant limitations on Fourier interpolation. Firstly,
 the function signal is assumed to be periodic, and so non periodic
diff --git a/doc/interpreter/linalg.txi b/doc/interpreter/linalg.txi
--- a/doc/interpreter/linalg.txi
+++ b/doc/interpreter/linalg.txi
@@ -90,30 +90,34 @@ flag a non-Hermitian matrix.
 @DOCSTRING(dmult)
 
 @DOCSTRING(dot)
 
 @DOCSTRING(eig)
 
 @DOCSTRING(givens)
 
+@DOCSTRING(planerot)
+
 @DOCSTRING(inv)
 
 @DOCSTRING(matrix_type)
 
 @DOCSTRING(norm)
 
 @DOCSTRING(null)
 
 @DOCSTRING(orth)
 
 @DOCSTRING(pinv)
 
 @DOCSTRING(rank)
 
+@DOCSTRING(rcond)
+
 @DOCSTRING(trace)
 
 @DOCSTRING(rref)
 
 @node Matrix Factorizations
 @section Matrix Factorizations
 
 @DOCSTRING(chol)
@@ -137,16 +141,18 @@ flag a non-Hermitian matrix.
 @DOCSTRING(qrdelete)
 
 @DOCSTRING(qz)
 
 @DOCSTRING(qzhess)
 
 @DOCSTRING(schur)
 
+@DOCSTRING(subspace)
+
 @DOCSTRING(svd)
 
 @c FIXME -- should there be a new section here?
 
 @DOCSTRING(housh)
 
 @DOCSTRING(krylov)
 
diff --git a/doc/interpreter/numbers.txi b/doc/interpreter/numbers.txi
--- a/doc/interpreter/numbers.txi
+++ b/doc/interpreter/numbers.txi
@@ -79,26 +79,26 @@ parse error:
 @end example
 
 @noindent
 You may also use @samp{j}, @samp{I}, or @samp{J} in place of the
 @samp{i} above.  All four forms are equivalent.
 
 @DOCSTRING(double)
 
-@DOCSTRING(single)
-
 @DOCSTRING(complex)
 
 @menu
-* Matrices::                    
-* Ranges::                      
+* Matrices::
+* Ranges::
+* Single Precision Data Types::
 * Integer Data Types::
 * Bit Manipulations::
-* Logical Values::              
+* Logical Values:: 
+* Promotion and Demotion of Data Types::
 * Predicates for Numeric Objects::  
 @end menu
 
 @node Matrices
 @section Matrices
 @cindex matrices
 
 @opindex [
@@ -394,16 +394,52 @@ Octave uses floating point arithmetic to
 range.  If it is important to include the endpoints of a range and the
 number of elements is known, you should use the @code{linspace} function
 instead (@pxref{Special Utility Matrices}).
 
 When Octave parses a range expression, it examines the elements of the
 expression to determine whether they are all constants.  If they are, it
 replaces the range expression with a single range constant.
 
+@node Single Precision Data Types
+@section Single Precision Data Types
+
+Octave includes support for single precision data types, and most of the
+functions in Octave accept single precision values and return single
+precion answers. A single precision variable is created with the
+@code{sample} function.
+
+@DOCSTRING(single)
+
+for example
+
+@example
+sngl = single (rand (2, 2))
+    @result{} sngl = 0.37569   0.92982
+               0.11962   0.50876
+class (sngl)
+    @result{} single
+@end example
+
+Many functions can also return single precision values directly. For
+example
+
+@example
+ones (2, 2, "single")
+zeros (2, 2, "single")
+eye (2, 2,  "single")
+rand (2, 2, "single")
+NaN (2, 2, "single")
+NA (2, 2, "single")
+Inf (2, 2, "single")
+@end example
+
+@noindent
+will all return single precision matrices.
+
 @node Integer Data Types
 @section Integer Data Types
 
 Octave supports integer matrices as an alternative to using double
 precision. It is possible to use both signed and unsigned integers
 represented by 8, 16, 32, or 64 bits. It should be noted that most
 computations require floating point data, meaning that integers will
 often change type when involved in numeric computations. For this
@@ -477,16 +513,18 @@ unsigned integers. Octave makes sure tha
 computations is the integer that is closest to the true result. So, the
 result of @math{10 - 20} when using unsigned integers is zero.
 
 When doing integer division Octave will round the result to the nearest
 integer. This is different from most programming languages, where the
 result is often floored to the nearest integer. So, the result of
 @code{int32(5)./int32(8)} is @code{1}.
 
+@DOCSTRING(idivide)
+
 @node Bit Manipulations
 @section Bit Manipulations
 
 Octave provides a number of functions for the manipulation of numeric
 values on a bit by bit basis. The basic functions to set and obtain the
 values of individual bits are @code{bitset} and @code{bitget}.
 
 @DOCSTRING(bitset)
@@ -601,16 +639,86 @@ casting numeric objects to logical value
 or @code{false} functions.
 
 @DOCSTRING(logical)
 
 @DOCSTRING(true)
 
 @DOCSTRING(false)
 
+@node Promotion and Demotion of Data Types
+@section Promotion and Demotion of Data Types
+
+Many operators and functions can work with mixed data types. For example
+
+@example
+uint8 (1) + 1
+    @result{} 2
+@end example
+
+@noindent
+where the above operator works with an 8-bit integer and a double precision
+value and returns an 8-bit integer value. Note that the type is demoted
+to an 8-bit integer, rather than promoted to a double precision value as
+might be expected. The reason is that if Octave promoted values in
+expressions like the above with all numerical constants would need to be
+explicitly cast to the appropriate data type type like
+
+@example
+uint8 (1) + uint8 (1)
+    @result{} 2
+@end example
+
+@noindent
+which becomes difficult for the user to apply uniformly and might allow
+hard to find bugs to be introduced. The same applies to single precision
+values where a mixed operation such as
+
+@example
+single (1) + 1
+    @result{} 2
+@end example
+
+@noindent
+returns a single precision value. The mixed operations that are valid
+and their returned data types are
+
+@multitable @columnfraction .2 .3 .3 .2
+@item @tab Mixed Operation @tab  Result @tab 
+@item @tab double OP single @tab single @tab
+@item @tab double OP integer @tab integer @tab
+@item @tab double OP char @tab double @tab
+@item @tab double OP logical @tab double @tab
+@item @tab single OP integer @tab integer @tab
+@item @tab single OP char @tab single @tab
+@item @tab single OP logical @tab single @tab
+
+The same logic applies to functions with mixed arguments such as
+
+@example
+min (single (1), 0)
+   @result 0
+@end example
+
+@noindent
+where the returned value is single precision.
+
+In the case of mixed type indexed assignments, the type is not
+changed. For example
+
+@example
+x = ones (2, 2);
+x (1, 1) = single (2)
+    @result{} x = 2   1
+            1   1
+@end example
+
+@noindent
+where @code{x} remains of the double precision. 
+
 @node Predicates for Numeric Objects
 @section Predicates for Numeric Objects
 
 Since the type of a variable may change during the execution of a
 program, it can be necessary to type checking at run-time. Doing this
 also allows you to change the behaviour of a function depending on the
 type of the input. As an example, this naive implementation of @code{abs}
 returns the absolute value of the input if it is a real number, and the
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -259,21 +259,23 @@ Data Types
 Built-in Data Types
 
 * Numeric Objects::             
 * String Objects::              
 * Data Structure Objects::      
 
 Numeric Data Types
 
-* Matrices::                    
-* Ranges::                      
+* Matrices::
+* Ranges::
+* Single Precision Data Types::
 * Integer Data Types::
 * Bit Manipulations::
-* Logical Values::              
+* Logical Values:: 
+* Promotion and Demotion of Data Types::
 * Predicates for Numeric Objects::  
 
 Matrices
 
 * Empty Matrices::              
 
 Strings
 
diff --git a/doc/interpreter/optim.txi b/doc/interpreter/optim.txi
--- a/doc/interpreter/optim.txi
+++ b/doc/interpreter/optim.txi
@@ -132,8 +132,9 @@ Gaussian noise.  If the noise is assumed
 can be solved using the @samp{\} or @samp{/} operators, or the @code{ols}
 function.  In the general case where the noise is assumed to be anisotropic
 the @code{gls} is needed.
 
 @DOCSTRING(ols)
 
 @DOCSTRING(gls)
 
+@DOCSTRING(lsqnonneg)
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -37,16 +37,17 @@ If you need finer control over graphics,
 
 @menu
 * Two-Dimensional Plots::       
 * Three-Dimensional Plotting::  
 * Plot Annotations::            
 * Multiple Plots on One Page::  
 * Multiple Plot Windows::       
 * Printing Plots::              
+* Interacting with plots::
 * Test Plotting Functions::     
 @end menu
 
 @node Two-Dimensional Plots
 @subsection Two-Dimensional Plots
 
 The @code{plot} function allows you to create simple x-y plots with
 linear axes.  For example,
@@ -62,34 +63,18 @@ plot (x, sin (x));
 displays a sine wave shown in @ref{fig:plot}.  On most systems, this
 command will open a separate plot window to display the graph.
 
 @float Figure,fig:plot
 @image{plot,8cm}
 @caption{Simple Two-Dimensional Plot.}
 @end float
 
-The function @code{fplot} also generates two-dimensional plots with
-linear axes using a function name and limits for the range of the
-x-coordinate instead of the x and y data.  For example,
-
-@example
-@group
-fplot (@@sin, [-10, 10], 201);
-@end group
-@end example
-
-@noindent
-produces a plot that is equivalent to the one above, but also includes a
-legend displaying the name of the plotted function.
-
 @DOCSTRING(plot)
 
-@DOCSTRING(fplot)
-
 The functions @code{semilogx}, @code{semilogy}, and @code{loglog} are
 similar to the @code{plot} function, but produce plots in which one or
 both of the axes use log scales.
 
 @DOCSTRING(semilogx)
 
 @DOCSTRING(semilogy)
 
@@ -191,16 +176,47 @@ plot.
 
 @DOCSTRING(axis)
 
 Similarly the axis limits of the colormap can be changed with the caxis
 function.
 
 @DOCSTRING(caxis)
 
+@node Two-dimensional Function Plotting
+@subsubsection Two-dimensional Function Plotting
+
+Octave can plot a function from a function handle inline function or
+string defining the function without the user needing to explicitly
+create the data to be plotted. The function @code{fplot} also generates
+two-dimensional plots with linear axes using a function name and limits
+for the range of the x-coordinate instead of the x and y data.  For
+example,
+
+@example
+@group
+fplot (@@sin, [-10, 10], 201);
+@end group
+@end example
+
+@noindent
+produces a plot that is equivalent to the one above, but also includes a
+legend displaying the name of the plotted function.
+
+@DOCSTRING(fplot)
+
+Other functions that can create two-dimensional plots directly from a
+function include @code{ezcontour}, @code{ezcontourf} and @code{ezpolar}.
+
+@DOCSTRING(ezcontour)
+
+@DOCSTRING(ezcontourf)
+
+@DOCSTRING(ezpolar)
+
 @node Three-Dimensional Plotting
 @subsection Three-Dimensional Plotting
 
 The function @code{mesh} produces mesh surface plots.  For example,
 
 @example
 @group
 tx = ty = linspace (-8, 8, 41)';
@@ -263,16 +279,29 @@ three-dimensional plots.
 @DOCSTRING(ndgrid)
 
 @DOCSTRING(plot3)
 
 @DOCSTRING(view)
 
 @DOCSTRING(shading)
 
+@node Two-dimensional Function Plotting
+@subsubsection Two-dimensional Function Plotting
+
+@DOCSTRING(ezplot3)
+
+@DOCSTRING(ezmesh)
+
+@DOCSTRING(ezmeshc)
+
+@DOCSTRING(ezsurf)
+
+@DOCSTRING(ezsurfc)
+
 @node Plot Annotations
 @subsection Plot Annotations
 
 You can add titles, axis labels, legends, and arbitrary text to an
 existing plot.  For example,
 
 @example
 @group
@@ -360,16 +389,29 @@ print -deps foo.eps
 @noindent
 writes the current figure to an encapsulated PostScript file called
 @file{foo.eps}.
 
 @DOCSTRING(print)
 
 @DOCSTRING(orient)
 
+@node Interacting with plots
+@subsection Interacting with plots
+
+The user can select points on a plot with the @code{ginput} function or
+selction the position at which to place text on the plot with the
+@code{gtext} function using the mouse.
+
+@DOCSTRING(ginput)
+
+@DOCSTRING(waitforbuttonpress)
+
+@DOCSTRING(gtext)
+
 @node Test Plotting Functions
 @subsection Test Plotting Functions
 
 The functions @code{sombrero} and @code{peaks} provide a way to check
 that plotting is working.  Typing either @code{sombrero} or @code{peaks}
 at the Octave prompt should display a three dimensional plot.
 
 @DOCSTRING(sombrero)
@@ -501,16 +543,18 @@ returns a structure containing the defau
 objects.
 
 @DOCSTRING(get)
 
 @DOCSTRING(set)
 
 @DOCSTRING(ancestor)
 
+@DOCSTRING(allchild)
+
 You can create axes, line, and patch objects directly using the
 @code{axes}, @code{line}, and @code{patch} functions.  These objects
 become children of the current axes object.
 
 @DOCSTRING(axes)
 
 @DOCSTRING(line)
 
@@ -574,16 +618,17 @@ figure window, call the @code{close} fun
 * Root Figure Properties::      
 * Figure Properties::           
 * Axes Properties::             
 * Line Properties::             
 * Text Properties::             
 * Image Properties::            
 * Patch Properties::            
 * Surface Properties::          
+* Seacrhing Properties::
 @end menu
 
 @node Root Figure Properties
 @subsubsection Root Figure Properties
 
 @table @code
 @item currentfigure
 Index to graphics object for the current figure.
@@ -1133,16 +1178,24 @@ The data determining the surface.  The @
 elements are vectors and @code{zdata} must be a matrix.
 
 @item keylabel
 The text of the legend entry corresponding to this surface.  Note that
 this property is not compatible with @sc{Matlab} and may be removed in a
 future version of Octave.
 @end table
 
+@node Seacrhing Properties
+@subsubsection Seacrhing Properties
+
+@DOCSTRING(findobj)
+
+@DOCSTRING(findall)
+
+
 @node Managing Default Properties
 @subsection Managing Default Properties
 
 Object properties have two classes of default values, @dfn{factory
 defaults} (the initial values) and @dfn{user-defined defaults}, which
 may override the factory defaults.
 
 Although default values may be set for any object, they are set in
diff --git a/doc/interpreter/quad.txi b/doc/interpreter/quad.txi
--- a/doc/interpreter/quad.txi
+++ b/doc/interpreter/quad.txi
@@ -45,16 +45,22 @@ These are
 
 @table @code
 @item quad
 Numerical integration based on Gaussian quadrature.
 
 @item quadl
 Numerical integration using an adaptive Lobatto rule.
 
+@item quadgk
+Numerical integration using an adaptive Guass-Konrod rule.
+
+@item quadv
+Numerical integration using an adaptive vectorized Simpson's rule.
+
 @item trapz
 Numerical integration using the trapezoidal method.
 @end table
 
 @noindent
 Besides these functions Octave also allows you to perform cumulative
 numerical integration using the trapezoidal method through the
 @code{cumtrapz} function.
@@ -113,16 +119,20 @@ Then we simply call quad:
 @end example
 
 Although @code{quad} returns a nonzero value for @var{ier}, the result
 is reasonably accurate (to see why, examine what happens to the result
 if you move the lower bound to 0.1, then 0.01, then 0.001, etc.).
 
 @DOCSTRING(quadl)
 
+@DOCSTRING(quadgk)
+
+@DOCSTRING(quadv)
+
 @DOCSTRING(trapz)
 
 @DOCSTRING(cumtrapz)
 
 @node Orthogonal Collocation
 @section Orthogonal Collocation
 
 @DOCSTRING(colloc)
@@ -168,20 +178,20 @@ Then the solution at the roots @var{r} i
 @example
 u = [ 0; (at - alpha * bt) \ rhs; 1]
      @result{} [ 0.00; 0.004; 0.01 0.00; 0.12; 0.62; 1.00 ]
 @end example
 
 @node Functions of Multiple Variables
 @section Functions of Multiple Variables
 
-Octave does not have built-in functions for computing the integral
-of functions of multiple variables.  It is however possible to compute
-the integral of a function of multiple variables using the functions
-for one-dimensional integrals.
+Octave does not have built-in functions for computing the integral of
+functions of multiple variables directly.  It is however possible to
+compute the integral of a function of multiple variables using the
+functions for one-dimensional integrals.
 
 To illustrate how the integration can be performed, we will integrate
 the function
 @iftex
 @tex
 $$
   f(x, y) = \sin(\pi x y)\sqrt{x y}
 $$
@@ -210,16 +220,29 @@ function I = g(y)
     I(i) = quadl(f, 0, 1);
   endfor
 endfunction
 
 I = quadl("g", 0, 1)
       @result{} 0.30022
 @end example
 
+The above process can be simplified with the @code{dblquad} and
+@code{triplequad} functions for integrals over two and three
+variables. For example
+
+@example
+I =  dblquad (@(x, y) sin(pi.*x.*y).*sqrt(x.*y), 0, 1, 0, 1)
+      @result{} 0.30022
+@end example
+
+@DOCSTRING(dblquad)
+
+@DOCSTRING(triplequad)
+
 The above mentioned approach works but is fairly slow, and that problem
 increases exponentially with the dimensionality the problem.  Another
 possible solution is to use Orthogonal Collocation as described in the
 previous section.  The integral of a function @math{f(x,y)} for
 @math{x} and @math{y} between 0 and 1 can be approximated using @math{n}
 points by
 @iftex
 @tex
@@ -245,9 +268,8 @@ I = q'*f(t,t)*q;
 
 @noindent
 It should be noted that the number of points determines the quality
 of the approximation.  If the integration needs to be performed between
 @math{a} and @math{b} instead of 0 and 1, a change of variables is needed.
 
 
 
-
diff --git a/doc/interpreter/strings.txi b/doc/interpreter/strings.txi
--- a/doc/interpreter/strings.txi
+++ b/doc/interpreter/strings.txi
@@ -223,16 +223,18 @@ functions exist for doing case-insensiti
 @DOCSTRING(strcmp)
 
 @DOCSTRING(strcmpi)
 
 @DOCSTRING(strncmp)
 
 @DOCSTRING(strncmpi)
 
+@DOCSTRING(validstring)
+
 @node Manipulating Strings
 @section Manipulating Strings
 
 Octave supports a wide range of functions for manipulating strings.
 Since a string is just a matrix, simple manipulations can be accomplished
 using standard operators. The following example shows how to replace
 all blank characters with underscores.
 
@@ -268,16 +270,18 @@ general regular expressions, the followi
 @DOCSTRING(substr)
 
 @DOCSTRING(regexp)
 
 @DOCSTRING(regexpi)
 
 @DOCSTRING(regexprep)
 
+@DOCSTRING(regexptranslate)
+
 @node String Conversions
 @section String Conversions
 
 Octave supports various kinds of conversions between strings and
 numbers. As an example, it is possible to convert a string containing
 a hexadecimal number to a floating point number.
 
 @example
@@ -353,8 +357,10 @@ isalpha ("!Q@@WERT^Y&")
 
 @DOCSTRING(ispunct)
 
 @DOCSTRING(isspace)
 
 @DOCSTRING(isupper)
 
 @DOCSTRING(isxdigit)
+
+@DOCSTRING(isstrprop)
diff --git a/doc/interpreter/system.txi b/doc/interpreter/system.txi
--- a/doc/interpreter/system.txi
+++ b/doc/interpreter/system.txi
@@ -124,22 +124,24 @@ useful.
 @DOCSTRING(tic)
 
 @DOCSTRING(pause)
 
 @DOCSTRING(sleep)
 
 @DOCSTRING(usleep)
 
-@DOCSTRING(  datenum)
+@DOCSTRING(datenum)
 
 @DOCSTRING(datestr)
 
 @DOCSTRING(datevec)
 
+@DOCSTRING(addtodate)
+
 @DOCSTRING(calendar)
 
 @DOCSTRING(weekday)
 
 @DOCSTRING(eomday)
 
 @node Filesystem Utilities
 @section Filesystem Utilities
@@ -191,16 +193,18 @@ about the status of files.
 @DOCSTRING(movefile)
 
 @DOCSTRING(copyfile)
 
 @DOCSTRING(fileparts)
 
 @DOCSTRING(filesep)
 
+@DOCSTRING(filemarker)
+
 @DOCSTRING(fullfile)
 
 @DOCSTRING(tempdir)
 
 @DOCSTRING(tempname)
 
 @DOCSTRING(P_tmpdir)
 
@@ -246,16 +250,18 @@ use them if you can't find any way to do
 higher-level functions.
 
 @DOCSTRING(system)
 
 @DOCSTRING(unix)
 
 @DOCSTRING(dos)
 
+@DOCSTRING(perl)
+
 @DOCSTRING(popen)
 
 @DOCSTRING(pclose)
 
 @DOCSTRING(popen2)
 
 @DOCSTRING(EXEC_PATH)
 
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -65,16 +65,20 @@ are also used or changed automatically b
 
 Variables in Octave do not have fixed types, so it is possible to first
 store a numeric value in a variable and then to later use the same name
 to hold a string value in the same program.  Variables may not be used
 before they have been given a value.  Doing so results in an error.
 
 @DOCSTRING(isvarname)
 
+@DOCSTRING(genvarname)
+
+@DOCSTRING(namelengthmax)
+
 @menu
 * Global Variables::            
 * Persistent Variables::        
 * Status of Variables::         
 * Summary of Built-in Variables::  
 * Defaults from the Environment::  
 @end menu
 
