# HG changeset patch
# User jwe
# Date 1063208888 0
#      Wed Sep 10 15:48:08 2003 +0000
# Node ID 65f47f8a92a2e07466a047ccf532571b614c4c70
# Parent  3c82fc8f822cb14c06b937d6cb22a2f38a63fa86
[project @ 2003-09-10 15:48:02 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2003-09-10  Petter Risholm  <risholm@stud.ntnu.no>
+
+	* mx-base.h: Include NDArray.h, not ArrayN.h.
+
+	* MArrayN.cc, MArrayN.h, NDArray.h, NDArray.cc: New files.
+	* Makefile.in: Add them to the appropriate lists.
+
 2003-09-09  David Bateman <dbateman@free.fr>
 
 	* lo-specfun.cc (zbesj, zbesy, zbesi, zbesk, zbesh1, zbesh2, airy,
 	biry): Always request scaled results from AMOS functions and
 	perform reverse scaling on results if scaled result not requested
 	by user.
 
 2003-09-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -22,18 +22,18 @@ ifeq ($(INCLUDE_LINK_DEPS), true)
   LINK_DEPS = \
     -L../libcruft -L../glob -L. $(RLD_FLAG) \
     $(LIBCRUFT) $(BLAS_LIBS) $(FFTW_LIBS) $(LIBREADLINE) \
     -lglob $(LIBS) $(FLIBS)
 endif
 
 MATRIX_INC := Array.h Array2.h Array3.h ArrayN.h DiagArray2.h \
 	Array-flags.h Array-idx.h Array2-idx.h Array3-idx.h \
-	ArrayN-idx.h ArrayN-inlines.h MArray-defs.h \
-	MArray.h MArray2.h MDiagArray2.h Matrix.h \
+	ArrayN-idx.h ArrayN-inlines.h MArray-defs.h MArray.h \
+	MArray2.h MDiagArray2.h Matrix.h MArrayN.h NDArray.h \
 	base-lu.h mx-base.h mx-op-defs.h mx-ops.h mx-defs.h mx-ext.h \
 	CColVector.h CDiagMatrix.h CMatrix.h CRowVector.h CmplxAEPBAL.h \
 	CmplxCHOL.h CmplxDET.h CmplxHESS.h CmplxLU.h CmplxQR.h \
 	CmplxQRP.h CmplxSCHUR.h CmplxSVD.h EIG.h boolMatrix.h chMatrix.h \
 	dColVector.h dDiagMatrix.h dMatrix.h dRowVector.h dbleAEPBAL.h \
 	dbleCHOL.h dbleDET.h dbleHESS.h dbleLU.h dbleQR.h \
 	dbleQRP.h dbleSCHUR.h dbleSVD.h
 
@@ -77,17 +77,18 @@ TEMPLATE_SRC := Array.cc Array2.cc Array
 
 TI_SRC := Array-C.cc Array-b.cc Array-ch.cc Array-i.cc Array-d.cc \
 	Array-s.cc Array-str.cc Array-idx-vec.cc \
 	MArray-C.cc MArray-ch.cc MArray-i.cc MArray-d.cc MArray-s.cc
 
 MATRIX_SRC := Array-flags.cc CColVector.cc CDiagMatrix.cc CMatrix.cc \
 	CRowVector.cc CmplxAEPBAL.cc CmplxCHOL.cc CmplxDET.cc \
 	CmplxHESS.cc CmplxLU.cc CmplxQR.cc CmplxQRP.cc CmplxSCHUR.cc \
-	CmplxSVD.cc EIG.cc MArray-misc.cc boolMatrix.cc chMatrix.cc \
+	CmplxSVD.cc EIG.cc MArray-misc.cc MArrayN.cc NDArray.cc \
+	boolMatrix.cc chMatrix.cc \
 	dColVector.cc dDiagMatrix.cc dMatrix.cc dRowVector.cc \
 	dbleAEPBAL.cc dbleCHOL.cc dbleDET.cc dbleHESS.cc dbleLU.cc \
 	dbleQR.cc dbleQRP.cc dbleSCHUR.cc dbleSVD.cc
 
 MX_OP_SRC := mx-cdm-cm.cc mx-cdm-cs.cc mx-cdm-dm.cc mx-cdm-m.cc \
 	mx-cdm-s.cc mx-cm-cdm.cc mx-cm-dm.cc mx-cm-m.cc mx-cm-s.cc \
 	mx-cs-cdm.cc mx-cs-dm.cc mx-cs-m.cc mx-dm-cdm.cc mx-dm-cm.cc \
 	mx-dm-cs.cc mx-dm-m.cc mx-dm-s.cc mx-m-cdm.cc mx-m-cm.cc \
diff --git a/liboctave/mx-base.h b/liboctave/mx-base.h
--- a/liboctave/mx-base.h
+++ b/liboctave/mx-base.h
@@ -42,17 +42,17 @@ Software Foundation, 59 Temple Place - S
 
 // Diagonal Matrix classes.
 
 #include "dDiagMatrix.h"
 #include "CDiagMatrix.h"
 
 // N-dimensional Array classes.
 
-#include "ArrayN.h"
+#include "NDArray.h"
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2003-09-10  Petter Risholm  <risholm@stud.ntnu.no>
+
+	* data.cc, ov-base.cc, ov-base.h, ov.h, ov.cc, ov-re-mat.h,
+	ov-scalar.h, ov-re-nd-array.h, ov-re-nd-array.cc: Use NDArray, not
+	ArrayN<double>.
+
 2003-09-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov.h (octave_value::double_nd_array_value): New function.
 	(octave_value::is_real_nd_array): New function.
 
 	* ov-base.cc (octave_base_value::double_nd_array_value): New function.
 	* ov-base.h: Provide decl.
 	(octave_base_value::is_real_nd_array): New function.
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -999,17 +999,17 @@ fill_matrix (const octave_value_list& ar
 	      retval = Matrix (dims(0), dims(0), val);
 	      break;
 
 	    case 2:
 	      retval = Matrix (dims(0), dims(1), val);
 	      break;
 
 	    default:
-	      retval =  ArrayN<double> (dims, val);
+	      retval =  NDArray (dims, val);
 	      break;
 	    }
 	}
     }
 
   return retval;
 }
 
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -286,20 +286,20 @@ octave_base_value::cell_value () const
 Matrix
 octave_base_value::matrix_value (bool) const
 {
   Matrix retval;
   gripe_wrong_type_arg ("octave_base_value::matrix_value()", type_name ());
   return retval;
 }
 
-ArrayN<double>
+NDArray
 octave_base_value::double_nd_array_value (bool) const
 {
-  ArrayN<double> retval;
+  NDArray retval;
   gripe_wrong_type_arg ("octave_base_value::double_nd_array_value()",
 			type_name ());
   return retval;
 }
 
 Complex
 octave_base_value::complex_value (bool) const
 {
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -186,17 +186,17 @@ public:
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Cell cell_value (void) const;
 
   Matrix matrix_value (bool = false) const;
 
-  ArrayN<double> double_nd_array_value (bool frc_str_conv = false) const;
+  NDArray double_nd_array_value (bool frc_str_conv = false) const;
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const;
 
   charMatrix char_matrix_value (bool = false) const;
 
   string_vector all_strings (bool pad = false, bool force = false) const;
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -93,18 +93,18 @@ public:
 
   Matrix matrix_value (bool = false) const { return matrix; }
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return ComplexMatrix (matrix); }
 
-  ArrayN<double> double_nd_array_value (bool = false) const
-    { return ArrayN<double> (matrix); }
+  NDArray double_nd_array_value (bool = false) const
+    { return NDArray (matrix); }
 
   void increment (void) { matrix += 1.0; }
 
   void decrement (void) { matrix -= 1.0; }
 
   octave_value convert_to_str_internal (bool pad, bool force) const;
 
 private:
diff --git a/src/ov-re-nd-array.cc b/src/ov-re-nd-array.cc
--- a/src/ov-re-nd-array.cc
+++ b/src/ov-re-nd-array.cc
@@ -42,17 +42,17 @@ Software Foundation, 59 Temple Place - S
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "ov-base-nd-array.h"
 #include "ov-base-nd-array.cc"
 #include "ov-re-nd-array.h"
 #include "pr-output.h"
 #include "variables.h"
 
-template class octave_base_nd_array<ArrayN<double> >;
+template class octave_base_nd_array<NDArray>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_double_nd_array);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_double_nd_array,
 				     "double-nd-array");
 
 octave_value *
 octave_double_nd_array::try_narrowing_conversion (void)
@@ -78,17 +78,17 @@ octave_double_nd_array::try_narrowing_co
 
 
 
   return retval;
 }
 
 void
 octave_double_nd_array::assign (const octave_value_list& idx,
-				const ArrayN<double>& rhs)
+				const NDArray& rhs)
 {
   int len = idx.length ();
 
   if ( len < 0)
     {
       error ("invalid number of indices (%d) for indexed matrix assignment",
 	     len);
       return;
diff --git a/src/ov-re-nd-array.h b/src/ov-re-nd-array.h
--- a/src/ov-re-nd-array.h
+++ b/src/ov-re-nd-array.h
@@ -40,56 +40,56 @@ Software Foundation, 59 Temple Place - S
 #include "ov-base-nd-array.h"
 #include "ov-typeinfo.h"
 
 class octave_value_list;
 
 // Real N-dimensional array values.
 
 class
-octave_double_nd_array : public octave_base_nd_array<ArrayN<double> >
+octave_double_nd_array : public octave_base_nd_array<NDArray>
 {
 public:
 
   octave_double_nd_array (void)
-    : octave_base_nd_array<ArrayN<double> > () { }
+    : octave_base_nd_array<NDArray> () { }
 
-  octave_double_nd_array (const ArrayN<double>& a)
-    : octave_base_nd_array<ArrayN<double> > (a) { }
+  octave_double_nd_array (const NDArray& a)
+    : octave_base_nd_array<NDArray> (a) { }
 
   octave_double_nd_array (const octave_double_nd_array& a)
-    : octave_base_nd_array<ArrayN<double> > (a) { }
+    : octave_base_nd_array<NDArray> (a) { }
 
   ~octave_double_nd_array (void) { }
 
   octave_value *clone (void) const
     { return new octave_double_nd_array (*this); }
 
   octave_value *empty_clone (void) const
     { return new octave_double_nd_array (); }
 
   octave_value *try_narrowing_conversion (void);
 
-  void assign (const octave_value_list& idx, const ArrayN<double>& rhs);
+  void assign (const octave_value_list& idx, const NDArray& rhs);
 
-  // Need to implement idx_vector (ArrayN<double>) for this one.
+  // Need to implement idx_vector (NDArray) for this one.
   //
   // idx_vector index_vector (void) const { return idx_vector (array); }
 
   bool is_real_nd_array (void) const { return true; }
 
   bool is_real_matrix (void) const { return false; }
 
   bool is_real_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const;
 
   double double_value (bool = false) const;
 
-  ArrayN<double> double_nd_array_value (bool = false) const { return array; }
+  NDArray double_nd_array_value (bool = false) const { return array; }
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const;
 
   Complex complex_value (bool = false) const;
 
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -84,18 +84,19 @@ public:
 
   double double_value (bool = false) const { return scalar; }
 
   double scalar_value (bool = false) const { return scalar; }
 
   Matrix matrix_value (bool = false) const
     { return Matrix (1, 1, scalar); }
 
-  ArrayN<double> double_nd_array_value (bool = false) const
-    { return ArrayN<double> (Array<int> (1, 1), scalar); }
+  NDArray double_nd_array_value (bool = false) const
+  { Array<int> temp (1, 1);
+      return NDArray (temp, double_value ()); }
 
   Complex complex_value (bool = false) const { return scalar; }
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return  ComplexMatrix (1, 1, Complex (scalar)); }
 
   octave_value convert_to_str_internal (bool pad, bool force) const;
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -402,17 +402,17 @@ octave_value::octave_value (const Cell& 
 
 octave_value::octave_value (const Matrix& m)
   : rep (new octave_matrix (m))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
-octave_value::octave_value (const ArrayN<double>& a)
+octave_value::octave_value (const NDArray& a)
   : rep (new octave_double_nd_array (a))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
 octave_value::octave_value (const DiagMatrix& d)
   : rep (new octave_matrix (d))
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -28,17 +28,17 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <cstdlib>
 
 #include <iostream>
 #include <string>
 #include <list>
 
-#include "ArrayN.h"
+
 #include "Range.h"
 #include "idx-vector.h"
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "oct-time.h"
 #include "str-vec.h"
 
 class Cell;
@@ -179,17 +179,17 @@ public:
 #if defined (HAVE_UNSIGNED_LONG_LONG_INT)
   octave_value (unsigned long long int i);
 #endif
 
   octave_value (octave_time t);
   octave_value (double d);
   octave_value (const Cell& m);
   octave_value (const Matrix& m);
-  octave_value (const ArrayN<double>& m);
+  octave_value (const NDArray& m);
   octave_value (const DiagMatrix& d);
   octave_value (const RowVector& v);
   octave_value (const ColumnVector& v);
   octave_value (const Complex& C);
   octave_value (const ComplexMatrix& m);
   octave_value (const ArrayN<Complex>& m);
   octave_value (const ComplexDiagMatrix& d);
   octave_value (const ComplexRowVector& v);
@@ -470,17 +470,17 @@ public:
   virtual double scalar_value (bool frc_str_conv = false) const
     { return rep->scalar_value (frc_str_conv); }
 
   virtual Cell cell_value (void) const;
 
   virtual Matrix matrix_value (bool frc_str_conv = false) const
     { return rep->matrix_value (frc_str_conv); }
 
-  virtual ArrayN<double> double_nd_array_value (bool frc_str_conv = false) const
+  virtual NDArray double_nd_array_value (bool frc_str_conv = false) const
     { return rep->double_nd_array_value (frc_str_conv); }
 
   virtual Complex complex_value (bool frc_str_conv = false) const
     { return rep->complex_value (frc_str_conv); }
 
   virtual ComplexMatrix complex_matrix_value (bool frc_str_conv = false) const
     { return rep->complex_matrix_value (frc_str_conv); }
 
