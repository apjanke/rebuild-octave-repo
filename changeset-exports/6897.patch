# HG changeset patch
# User jwe
# Date 1189710836 0
#      Thu Sep 13 19:13:56 2007 +0000
# Node ID 935d23e169517e552a60f595467b9cd8d684914c
# Parent  5c9c49c51302f6ec8d220ae665055580b59c156b
[project @ 2007-09-13 19:13:56 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2007-09-13  John W. Eaton  <jwe@octave.org>
+
+	* lo-utils.cc (read_inf_nan_na, octave_read_double,
+	octave_read_complex): Use istream::get instead of >> to read
+	individual characters.
+
 2007-09-10  John W. Eaton  <jwe@octave.org>
 
 	* Array.cc (assign1): Don't call make_unique for invalid assignment.
 
 2007-09-10  David Bateman  <dbateman@free.fr>
 
 	* Array.h (Array<T>::make_unique): Make public so that the
 	::assign functions can access it directly.
diff --git a/liboctave/lo-utils.cc b/liboctave/lo-utils.cc
--- a/liboctave/lo-utils.cc
+++ b/liboctave/lo-utils.cc
@@ -212,36 +212,36 @@ static inline double
 read_inf_nan_na (std::istream& is, char c, char sign = '+')
 {
   double d = 0.0;
 
   switch (c)
     {
     case 'i': case 'I':
       {
-	is >> c;
+	c = is.get ();
 	if (c == 'n' || c == 'N')
 	  {
-	    is >> c;
+	    c = is.get ();
 	    if (c == 'f' || c == 'F')
 	      d = sign == '-' ? -octave_Inf : octave_Inf;
 	    else
 	      is.putback (c);
 	  }
 	else
 	  is.putback (c);
       }
       break;
 
     case 'n': case 'N':
       {
-	is >> c;
+	c = is.get ();
 	if (c == 'a' || c == 'A')
 	  {
-	    is >> c;
+	    c = is.get ();
 	    if (c == 'n' || c == 'N')
 	      d = octave_NaN;
 	    else
 	      {
 		is.putback (c);
 		d = octave_NA;
 	      }
 	  }
@@ -259,38 +259,38 @@ read_inf_nan_na (std::istream& is, char 
 
 double
 octave_read_double (std::istream& is)
 {
   double d = 0.0;
 
   char c1 = 0;
 
-  is >> c1;
+  c1 = is.get ();
   switch (c1)
     {
     case '-':
       {
 	char c2 = 0;
-	is >> c2;
+	c2 = is.get ();
 	if (c2 == 'i' || c2 == 'I')
 	  d = read_inf_nan_na (is, c2, c1);
 	else
 	  {
 	    is.putback (c2);
 	    is.putback (c1);
 	    is >> d;
 	  }
       }
       break;
 
     case '+':
       {
 	char c2 = 0;
-	is >> c2;
+	c2 = is.get ();
 	if (c2 == 'i' || c2 == 'I')
 	  d = read_inf_nan_na (is, c2, c1);
 	else
 	  {
 	    is.putback (c2);
 	    is.putback (c1);
 	    is >> d;
 	  }
@@ -314,27 +314,27 @@ Complex
 octave_read_complex (std::istream& is)
 {
   double re = 0.0, im = 0.0;
 
   Complex cx = 0.0;
 
   char ch = 0;
 
-  is >> ch;
+  ch = is.get ();
 
   if (ch == '(')
     {
       re = octave_read_double (is);
-      is >> ch;
+      ch = is.get ();
 
       if (ch == ',')
 	{
 	  im = octave_read_double (is);
-	  is >> ch;
+	  ch = is.get ();
 
 	  if (ch == ')')
 	    cx = Complex (re, im);
 	  else
 	    is.setstate (std::ios::failbit);
 	}
       else if (ch == ')')
 	cx = re;
