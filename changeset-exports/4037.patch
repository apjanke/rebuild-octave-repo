# HG changeset patch
# User jwe
# Date 1029204146 0
#      Tue Aug 13 02:02:26 2002 +0000
# Node ID 7e0c73f17a5dd1c7707c452e3fe78f8680c49dbf
# Parent  1432e11733d19608b892facdb2f2090a66566e10
[project @ 2002-08-13 02:02:26 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,21 @@
 2002-08-12  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* lex.l: Warn for various Matlab-incompatibilities.
+	No longer accept <> for NOTEQ.
+	(gripe_matlab_incompatible): New function.
+	(maybe_gripe_matlab_incompatible_comment): Likewise.
+	(gripe_matlab_incompatible_continuation): Likewise.
+	(gripe_matlab_incompatible_operator): Likewise.
+	(warn_matlab_incompatible): New function.
+	(Vwarn_matlab_incompatible): New static variable.
+	(symbols_of_lex): Add a DEFVAR for it.
+	
+
 	* file-io.cc (fopen_mode_to_ios_mode): Default value is std::ios::in.
 	Return std::ios::openmode instead of int.
 
 2002-08-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/dasrt.cc (DASRT_ABORT1, DASRT_ABORT2):
 	"##" pastes tokens, not strings.
 
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -77,16 +77,24 @@ Software Foundation, 59 Temple Place - S
       current_input_column += yyleng; \
       lexer_flags.quote_is_transpose = false; \
       lexer_flags.cant_be_identifier = true; \
       lexer_flags.convert_spaces_to_comma = convert; \
       return (tok); \
     } \
   while (0)
 
+#define XBIN_OP_RETURN(tok, convert) \
+  do \
+    { \
+	gripe_matlab_incompatible_operator (yytext); \
+        BIN_OP_RETURN (tok, convert); \
+    } \
+  while (0)
+
 // XXX FIXME XXX -- these input buffer things should be members of an
 // parser input stream class.
 
 typedef struct yy_buffer_state *YY_BUFFER_STATE;
 
 // Associate a buffer with a new file to read.
 extern YY_BUFFER_STATE create_buffer (FILE *f);
 
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -161,16 +161,18 @@ static bracket_brace_paren_nesting_level
 // comma between identifiers and `('.  For example, the statement
 //
 //   [eye (2)]
 //
 // will result in a call to `eye' with the argument `2'.
 
 static int Vwhitespace_in_literal_matrix;
 
+static bool Vwarn_matlab_incompatible = false;
+
 static bool Vwarn_separator_insert = false;
 
 static bool Vwarn_single_quote_string = false;
 
 // Forward declarations for functions defined at the bottom of this
 // file.
 
 static void fixup_column_count (char *s);
@@ -191,34 +193,37 @@ static int handle_close_bracket (int spc
 static int handle_identifier (void);
 static bool have_continuation (bool trailing_comments_ok = true);
 static bool have_ellipsis_continuation (bool trailing_comments_ok = true);
 static void scan_for_comments (const char *);
 static yum_yum eat_whitespace (void);
 static yum_yum eat_continuation (void);
 static void maybe_warn_separator_insert (char sep);
 static void gripe_single_quote_string (void);
+static void gripe_matlab_incompatible (const std::string& msg);
+static void maybe_gripe_matlab_incompatible_comment (char c);
+static void gripe_matlab_incompatible_continuation (void);
+static void gripe_matlab_incompatible_operator (const std::string& op);
 
 %}
 
 D	[0-9]
 S	[ \t]
 NL	((\n)|(\r\n))
 SNL	({S}|{NL})
 EL	(\.\.\.)
 BS	(\\)
 CONT	({EL}|{BS})
 Im	[iIjJ]
 CCHAR	[#%]
 COMMENT	({CCHAR}.*{NL})
 SNLCMT	({SNL}|{COMMENT})
-NOTEQ	((~=)|(!=)|(<>))
-POW	((\*\*)|(\^))
-EPOW	(\.{POW})
 NOT	((\~)|(\!))
+POW     ((\*\*)|(\^))
+EPOW    (\.{POW})
 IDENT	([_a-zA-Z][_a-zA-Z0-9]*)
 EXPON	([DdEe][+-]?{D}+)
 NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EXPON}?)|(0[xX][0-9a-fA-F]+))
 %%
 
 %{
 // Help and other text-style functions are a pain in the ass.  This
 // stuff needs to be simplified.  May require some changes in the
@@ -464,16 +469,18 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
   }
 
 %{
 // Continuation lines.  Allow comments after continuations.
 %}
 
 {CONT}{S}*{NL} |
 {CONT}{S}*{COMMENT} {
+    if (yytext[0] == '\\')
+      gripe_matlab_incompatible_continuation ();
     scan_for_comments (yytext);
     promptflag--;
     current_input_column = 1;
   }
 
 %{
 // An ellipsis not at the end of a line is not a continuation, but
 // does have another meaning.
@@ -520,18 +527,19 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 {NL} {
     current_input_column = 1;
     lexer_flags.quote_is_transpose = false;
     lexer_flags.cant_be_identifier = false;
     lexer_flags.convert_spaces_to_comma = true;
 
     if (nesting_level.none ())
       return '\n';
-
-    if (nesting_level.is_bracket ())
+    else if (nesting_level.is_paren ())
+      gripe_matlab_incompatible ("bare newline inside parentheses");
+    else if (nesting_level.is_bracket ())
       return LEXICAL_ERROR;
   }
 
 %{
 // Single quote can either be the beginning of a string or a transpose
 // operator. 
 %}
 
@@ -604,59 +612,68 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 	octave_comment_buffer::append (buf);
       }
 
     current_input_column = 1;
     lexer_flags.quote_is_transpose = false;
     lexer_flags.cant_be_identifier = false;
     lexer_flags.convert_spaces_to_comma = true;
 
+    maybe_gripe_matlab_incompatible_comment (yytext[0]);
+
     if (nesting_level.none ())
       return '\n';
     else if (nesting_level.is_bracket ())
       return ';';
   }
 
 %{
 // Other operators.
 %}
 
-".+"	{ BIN_OP_RETURN (EPLUS, false); }
-".-"	{ BIN_OP_RETURN (EMINUS, false); }
+".+"	{ XBIN_OP_RETURN (EPLUS, false); }
+".-"	{ XBIN_OP_RETURN (EMINUS, false); }
 ".*"	{ BIN_OP_RETURN (EMUL, false); }
 "./"	{ BIN_OP_RETURN (EDIV, false); }
 ".\\"	{ BIN_OP_RETURN (ELEFTDIV, false); }
-{EPOW}	{ BIN_OP_RETURN (EPOW, false); }
+".^"	{ BIN_OP_RETURN (EPOW, false); }
+".**"	{ XBIN_OP_RETURN (EPOW, false); }
 ".'"	{ do_comma_insert_check (); BIN_OP_RETURN (TRANSPOSE, true); }
-"++"	{ do_comma_insert_check (); BIN_OP_RETURN (PLUS_PLUS, true); }
-"--"	{ do_comma_insert_check (); BIN_OP_RETURN (MINUS_MINUS, true); }
+"++"	{ do_comma_insert_check (); XBIN_OP_RETURN (PLUS_PLUS, true); }
+"--"	{ do_comma_insert_check (); XBIN_OP_RETURN (MINUS_MINUS, true); }
 "<="	{ BIN_OP_RETURN (EXPR_LE, false); }
 "=="	{ BIN_OP_RETURN (EXPR_EQ, false); }
-{NOTEQ}	{ BIN_OP_RETURN (EXPR_NE, false); }
+"~="	{ BIN_OP_RETURN (EXPR_NE, false); }
+"!="	{ XBIN_OP_RETURN (EXPR_NE, false); }
 ">="	{ BIN_OP_RETURN (EXPR_GE, false); }
 "&"	{ BIN_OP_RETURN (EXPR_AND, false); }
 "|"	{ BIN_OP_RETURN (EXPR_OR, false); }
 "<"	{ BIN_OP_RETURN (EXPR_LT, false); }
 ">"	{ BIN_OP_RETURN (EXPR_GT, false); }
 "*"	{ BIN_OP_RETURN ('*', false); }
 "/"	{ BIN_OP_RETURN ('/', false); }
 "\\"	{ BIN_OP_RETURN (LEFTDIV, false); }
 ";"	{ BIN_OP_RETURN (';', true); }
 ","	{ BIN_OP_RETURN (',', true); }
-{POW}	{ BIN_OP_RETURN (POW, false); }
+"^"	{ BIN_OP_RETURN (POW, false); }
+"**"	{ XBIN_OP_RETURN (POW, false); }
 "="	{ BIN_OP_RETURN ('=', true); }
 "&&"	{ BIN_OP_RETURN (EXPR_AND_AND, false); }
 "||"	{ BIN_OP_RETURN (EXPR_OR_OR, false); }
-"<<"	{ BIN_OP_RETURN (LSHIFT, false); }
-">>"	{ BIN_OP_RETURN (RSHIFT, false); }
+"<<"	{ XBIN_OP_RETURN (LSHIFT, false); }
+">>"	{ XBIN_OP_RETURN (RSHIFT, false); }
 
 {NOT} {
     if (lexer_flags.plotting && ! lexer_flags.in_plot_range)
       lexer_flags.past_plot_range = true;
-    BIN_OP_RETURN (EXPR_NOT, false);
+
+    if (yytext[0] == '~')
+      BIN_OP_RETURN (EXPR_NOT, false);
+    else
+      XBIN_OP_RETURN (EXPR_NOT, false);
   }
 
 "+" { 
     if (lexer_flags.plotting && ! lexer_flags.in_plot_range)
       lexer_flags.past_plot_range = true;
     BIN_OP_RETURN ('+', false);
   }
 
@@ -692,32 +709,32 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 "@" {
     current_input_column++;
     lexer_flags.cant_be_identifier = false;
     lexer_flags.quote_is_transpose = false;
     lexer_flags.convert_spaces_to_comma = false;
     return '@';
   }
 
-"+="	{ BIN_OP_RETURN (ADD_EQ, false); }
-"-="	{ BIN_OP_RETURN (SUB_EQ, false); }
-"*="	{ BIN_OP_RETURN (MUL_EQ, false); }
-"/="	{ BIN_OP_RETURN (DIV_EQ, false); }
-"\\="	{ BIN_OP_RETURN (LEFTDIV_EQ, false); }
-".+="	{ BIN_OP_RETURN (ADD_EQ, false); }
-".-="	{ BIN_OP_RETURN (SUB_EQ, false); }
-".*="	{ BIN_OP_RETURN (EMUL_EQ, false); }
-"./="	{ BIN_OP_RETURN (EDIV_EQ, false); }
-".\\="	{ BIN_OP_RETURN (ELEFTDIV_EQ, false); }
-{POW}=  { BIN_OP_RETURN (POW_EQ, false); }
-{EPOW}= { BIN_OP_RETURN (EPOW_EQ, false); }
-"&="	{ BIN_OP_RETURN (AND_EQ, false); }
-"|="	{ BIN_OP_RETURN (OR_EQ, false); }
-"<<="	{ BIN_OP_RETURN (LSHIFT_EQ, false); }
-">>="	{ BIN_OP_RETURN (RSHIFT_EQ, false); }
+"+="	{ XBIN_OP_RETURN (ADD_EQ, false); }
+"-="	{ XBIN_OP_RETURN (SUB_EQ, false); }
+"*="	{ XBIN_OP_RETURN (MUL_EQ, false); }
+"/="	{ XBIN_OP_RETURN (DIV_EQ, false); }
+"\\="	{ XBIN_OP_RETURN (LEFTDIV_EQ, false); }
+".+="	{ XBIN_OP_RETURN (ADD_EQ, false); }
+".-="	{ XBIN_OP_RETURN (SUB_EQ, false); }
+".*="	{ XBIN_OP_RETURN (EMUL_EQ, false); }
+"./="	{ XBIN_OP_RETURN (EDIV_EQ, false); }
+".\\="	{ XBIN_OP_RETURN (ELEFTDIV_EQ, false); }
+{POW}=  { XBIN_OP_RETURN (POW_EQ, false); }
+{EPOW}= { XBIN_OP_RETURN (EPOW_EQ, false); }
+"&="	{ XBIN_OP_RETURN (AND_EQ, false); }
+"|="	{ XBIN_OP_RETURN (OR_EQ, false); }
+"<<="	{ XBIN_OP_RETURN (LSHIFT_EQ, false); }
+">>="	{ XBIN_OP_RETURN (RSHIFT_EQ, false); }
 
 "{" {
     nesting_level.brace ();
     promptflag--;
     TOK_RETURN ('{');
   }
 
 "}" {
@@ -1270,18 +1287,19 @@ grab_help_text (void)
 	      in_comment = false;
 	      discard_space = true;
 	    }
 	}
       else
 	{
 	  switch (c)
 	    {
+	    case '#':
 	    case '%':
-	    case '#':
+	      maybe_gripe_matlab_incompatible_comment (yytext[0]);
 	      in_comment = true;
 	      begin_comment = true;
 	      break;
 
 	    case ' ':
 	    case '\t':
 	      break;
 
@@ -1532,16 +1550,17 @@ scan_for_comments (const char *text)
 	case '#':
 	  if (in_comment)
 	    {
 	      if (! beginning_of_comment)
 		comment_buf += static_cast<char> (c);
 	    }
 	  else
 	    {
+	      maybe_gripe_matlab_incompatible_comment (c);
 	      in_comment = true;
 	      beginning_of_comment = true;
 	    }
 	  break;
 
 	case '\n':
 	  if (in_comment)
 	    {
@@ -1639,16 +1658,17 @@ eat_whitespace (void)
 	case '%':
 	  if (in_comment)
 	    {
 	      if (! beginning_of_comment)
 		comment_buf += static_cast<char> (c);
 	    }
 	  else
 	    {
+	      maybe_gripe_matlab_incompatible_comment (c);
 	      in_comment = true;
 	      beginning_of_comment = true;
 	    }
 	  break;
 
 	case '.':
 	  if (in_comment)
 	    {
@@ -1797,32 +1817,34 @@ have_continuation (bool trailing_comment
 	    {
 	      if (in_comment)
 		{
 		  if (! beginning_of_comment)
 		    comment_buf += static_cast<char> (c);
 		}
 	      else
 		{
+		  maybe_gripe_matlab_incompatible_comment (c);
 		  in_comment = true;
 		  beginning_of_comment = true;
 		}
 	    }
 	  else
 	    goto cleanup;
 	  break;
 
 	case '\n':
 	  if (in_comment)
 	    {
 	      comment_buf += static_cast<char> (c);
 	      octave_comment_buffer::append (comment_buf);
 	    }
 	  current_input_column = 0;
 	  promptflag--;
+	  gripe_matlab_incompatible_continuation ();
 	  return true;
 
 	case '\r':
 	  if (in_comment)
 	    comment_buf += static_cast<char> (c);
 	  c = yyinput ();
 	  if (c == EOF)
 	    break;
@@ -1830,16 +1852,17 @@ have_continuation (bool trailing_comment
 	    {
 	      if (in_comment)
 		{
 		  comment_buf += static_cast<char> (c);
 		  octave_comment_buffer::append (comment_buf);
 		}
 	      current_input_column = 0;
 	      promptflag--;
+	      gripe_matlab_incompatible_continuation ();
 	      return true;
 	    }
 
 	  // Fall through...
 
 	default:
 	  if (in_comment)
 	    {
@@ -1985,17 +2008,19 @@ handle_string (char delim, int text_styl
 		      lexer_flags.quote_is_transpose = true;
 		      lexer_flags.cant_be_identifier = true;
 		      lexer_flags.convert_spaces_to_comma = true;
 		    }
 
 		  yylval.tok_val = new token (s, bos_line, bos_col);
 		  token_stack.push (yylval.tok_val);
 
-		  if (delim == '\'')
+		  if (delim == '"')
+		    gripe_matlab_incompatible ("\" used as string delimiter");
+		  else if (delim == '\'')
 		    gripe_single_quote_string ();
 
 		  return TEXT;
 		}
 	    }
 	}
       else
 	{
@@ -2406,16 +2431,17 @@ check_for_garbage_after_fcn_def (void)
 	case '#':
 	  if (in_comment)
 	    {
 	      if (! beginning_of_comment)
 		comment_buf += static_cast<char> (c);
 	    }
 	  else
 	    {
+	      maybe_gripe_matlab_incompatible_comment (c);
 	      in_comment = true;
 	      beginning_of_comment = true;
 	    }
 	  break;
 
 	case '\n':
 	  if (in_comment)
 	    {
@@ -2545,16 +2571,54 @@ gripe_single_quote_string (void)
 	warning ("single quote delimited string near line %d",
 		 input_line_number);
       else
 	warning ("single quote delimited string near line %d of file %s",
 		 input_line_number, nm.c_str ());
     }
 }
 
+static void
+gripe_matlab_incompatible (const std::string& msg)
+{
+  if (Vwarn_matlab_incompatible)
+    warning ("potential Matlab compatibility problem: %s", msg.c_str ());
+}
+
+static void
+maybe_gripe_matlab_incompatible_comment (char c)
+{
+  if (c == '#')
+    gripe_matlab_incompatible ("# used as comment character");
+}
+
+static void
+gripe_matlab_incompatible_continuation (void)
+{
+  gripe_matlab_incompatible ("\\ used as line continuation marker");
+}
+
+static void
+gripe_matlab_incompatible_operator (const std::string& op)
+{
+  std::string t = op;
+  int n = t.length ();
+  if (t[n-1] == '\n')
+    t.resize (n-1);
+  gripe_matlab_incompatible (t + " used as operator");
+}
+
+static int
+warn_matlab_incompatible (void)
+{
+  Vwarn_matlab_incompatible = check_preference ("warn_matlab_incompatible");
+
+  return 0;
+}
+
 static int
 warn_separator_insert (void)
 {
   Vwarn_separator_insert = check_preference ("warn_separator_insert");
 
   return 0;
 }
 
@@ -2584,16 +2648,23 @@ whitespace_in_literal_matrix (void)
   Vwhitespace_in_literal_matrix = pref;
 
   return 0;
 }
 
 void
 symbols_of_lex (void)
 {
+  DEFVAR (warn_matlab_incompatible, 0.0, warn_matlab_incompatible,
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} warn_matlab_incompatible\n\
+Print warnings for Octave language features that may cause\n\
+compatibility problems with Matlab.\n\
+@end defvr");
+
   DEFVAR (warn_separator_insert, 0.0, warn_separator_insert,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} warn_separator_insert\n\
 Print warning if commas or semicolons might be inserted\n\
 automatically in literal matrices.\n\
 @end defvr");
 
   DEFVAR (warn_single_quote_string, 0.0, warn_single_quote_string,
