# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1314129232 -7200
#      Tue Aug 23 21:53:52 2011 +0200
# Node ID 3d4f5cf3ca3481eb2b71437555d11ab102e203e1
# Parent  bfac3c49cfd04c391cfff4ea5e477e5ad201d085
# Parent  b93bfa9486ad6892a1fceffd420596b655da7479
Merge.

diff --git a/gui/src/FileEditorMdiSubWindow.cpp b/gui/src/FileEditorMdiSubWindow.cpp
--- a/gui/src/FileEditorMdiSubWindow.cpp
+++ b/gui/src/FileEditorMdiSubWindow.cpp
@@ -88,24 +88,26 @@ FileEditorMdiSubWindow::handleCopyAvaila
 
 void
 FileEditorMdiSubWindow::openFile ()
 {
     if (checkFileModified ("Open File")==QMessageBox::Cancel)
       {
         return; // existing file not saved and opening another file canceled by user
       }
-    QString openFileName =
-        QFileDialog::getOpenFileName (this, "Open File", QDir::homePath(), SAVE_FILE_FILTER);
-    if (openFileName.isEmpty ())
+    QString openFileName;
+    QFileDialog dlg(this);
+    dlg.setNameFilter(SAVE_FILE_FILTER);
+    dlg.setAcceptMode(QFileDialog::AcceptOpen);
+    dlg.setViewMode(QFileDialog::Detail);
+    if ( dlg.exec() )
       {
-        return;
-      }
-    else
-      {
+        openFileName = dlg.selectedFiles().at(0);
+        if (openFileName.isEmpty ())
+          return;
         loadFile(openFileName);
       }
 }
 
 void
 FileEditorMdiSubWindow::loadFile (QString fileName)
 {
   QFile file (fileName);
@@ -173,41 +175,26 @@ FileEditorMdiSubWindow::checkFileModifie
 
 void
 FileEditorMdiSubWindow::saveFile ()
 {
   saveFile(m_fileName);
 }
 
 void
-FileEditorMdiSubWindow::saveFile (QString fileName)
+FileEditorMdiSubWindow::saveFile (QString saveFileName)
 {
   // it is a new file with the name "<unnamed>" -> call saveFielAs
-  if (fileName==UNNAMED_FILE)
+  if (saveFileName==UNNAMED_FILE || saveFileName.isEmpty ())
     {
       saveFileAs();
       return;
     }
 
-  // check for a valid file name to save the contents
-  QString saveFileName;
-  if (fileName.isEmpty ())
-    {
-      saveFileName = QFileDialog::getSaveFileName (this, "Save File", fileName,SAVE_FILE_FILTER);
-      if (saveFileName.isEmpty ())
-        return;
-      if(!saveFileName.endsWith(".m"))
-        saveFileName.append(".m");
-    }
-  else
-    {
-    saveFileName = fileName;
-    }
-
-  // open the file
+  // open the file for writing
   QFile file (saveFileName);
   if (!file.open (QFile::WriteOnly))
     {
       QMessageBox::warning (this, tr ("File Editor"),
 			    tr ("Cannot write file %1:\n%2.").
           arg (saveFileName).arg (file.errorString ()));
       return;
     }
@@ -221,36 +208,56 @@ FileEditorMdiSubWindow::saveFile (QStrin
   setWindowTitle(m_fileName);    // set the window title to actual file name
   m_statusBar->showMessage (tr ("File %1 saved").arg(m_fileName), 2000);
   m_editor->setModified (false); // files is save -> not modified
 }
 
 void
 FileEditorMdiSubWindow::saveFileAs ()
 {
-  QString saveDir(m_fileName);
-  if (saveDir==UNNAMED_FILE)
-    saveDir = QDir::homePath();
-  QString saveFileName = QFileDialog::getSaveFileName(
-        this, "Save File As", saveDir,SAVE_FILE_FILTER);
-  if(saveFileName.isEmpty())
-    return;
-  saveFile(saveFileName);
+  QString saveFileName(m_fileName);
+  QFileDialog dlg(this);
+  if (saveFileName==UNNAMED_FILE || saveFileName.isEmpty ())
+    {
+      saveFileName = QDir::homePath();
+      dlg.setDirectory(saveFileName);
+    }
+  else
+    {
+      dlg.selectFile(saveFileName);
+    }
+  dlg.setNameFilter(SAVE_FILE_FILTER);
+  dlg.setDefaultSuffix("m");
+  dlg.setAcceptMode(QFileDialog::AcceptSave);
+  dlg.setViewMode(QFileDialog::Detail);
+  if ( dlg.exec() )
+    {
+      saveFileName = dlg.selectedFiles().at(0);
+      if (saveFileName.isEmpty ())
+        return;
+      saveFile(saveFileName);
+    }
 }
 
 // handle the run command
 void
 FileEditorMdiSubWindow::runFile ()
 {
   if (m_editor->isModified ())
     saveFile(m_fileName);
   m_terminalEmulation->transmitText (QString ("run \'%1\'\n").arg (m_fileName));
   //m_terminalEmulation->setFocus ();
 }
 
+// remove bookmarks
+void
+FileEditorMdiSubWindow::removeBookmark ()
+{
+  m_editor->markerDeleteAll(MARKER_BOOKMARK);
+}
 // toggle bookmark
 void
 FileEditorMdiSubWindow::toggleBookmark ()
 {
   int line,cur;
   m_editor->getCursorPosition(&line,&cur);
   if ( m_editor->markersAtLine (line) && (1 << MARKER_BOOKMARK) )
     m_editor->markerDelete(line,MARKER_BOOKMARK);
@@ -402,16 +409,17 @@ FileEditorMdiSubWindow::construct ()
         QIcon::fromTheme("edit-redo",style->standardIcon (QStyle::SP_ArrowRight)),
         tr("&Redo"), m_toolBar);
   m_copyAction = new QAction (QIcon::fromTheme("edit-copy"),tr("&Copy"),m_toolBar);
   m_cutAction = new QAction (QIcon::fromTheme("edit-cut"),tr("Cu&t"),m_toolBar);
   QAction *pasteAction = new QAction (QIcon::fromTheme("edit-paste"),tr("&Paste"),m_toolBar);
   QAction *nextBookmarkAction = new QAction (tr("&Next Bookmark"),m_toolBar);
   QAction *prevBookmarkAction = new QAction (tr("Pre&vious Bookmark"),m_toolBar);
   QAction *toggleBookmarkAction = new QAction (tr("Toggle &Bookmark"),m_toolBar);
+  QAction *removeBookmarkAction = new QAction (tr("&Remove All &Bookmarks"),m_toolBar);
   QAction *runAction = new QAction (
         QIcon::fromTheme("media-play",style->standardIcon (QStyle::SP_MediaPlay)),
         tr("&Run File"), m_toolBar);
 
   // some actions are disabled from the beginning
   m_copyAction->setEnabled(false);
   m_cutAction->setEnabled(false);
   connect(m_editor,SIGNAL(copyAvailable(bool)),this,SLOT(handleCopyAvailable(bool)));
@@ -424,17 +432,17 @@ FileEditorMdiSubWindow::construct ()
   undoAction->setShortcut(QKeySequence::Undo);
   redoAction->setShortcut(QKeySequence::Redo);
   m_copyAction->setShortcut(QKeySequence::Copy);
   m_cutAction->setShortcut(QKeySequence::Cut);
   pasteAction->setShortcut(QKeySequence::Paste);
   runAction->setShortcut(Qt::Key_F5);
   nextBookmarkAction->setShortcut(Qt::Key_F2);
   prevBookmarkAction->setShortcut(Qt::SHIFT + Qt::Key_F2);
-  toggleBookmarkAction->setShortcut(Qt::CTRL + Qt::Key_F2);
+  toggleBookmarkAction->setShortcut(Qt::Key_F7);
 
   // toolbar
   m_toolBar->setIconSize(QSize(16,16)); // smaller icons (make configurable in user settings?)
   m_toolBar->addAction (closeAction);
   m_toolBar->addAction (newAction);
   m_toolBar->addAction (openAction);
   m_toolBar->addAction (saveAction);
   m_toolBar->addAction (saveAsAction);
@@ -462,16 +470,17 @@ FileEditorMdiSubWindow::construct ()
   editMenu->addSeparator();
   editMenu->addAction(m_copyAction);
   editMenu->addAction(m_cutAction);
   editMenu->addAction(pasteAction);
   editMenu->addSeparator();
   editMenu->addAction(toggleBookmarkAction);
   editMenu->addAction(nextBookmarkAction);
   editMenu->addAction(prevBookmarkAction);
+  editMenu->addAction(removeBookmarkAction);
   m_menuBar->addMenu(editMenu);
   QMenu *runMenu = new QMenu(tr("&Run"),m_menuBar);
   runMenu->addAction(runAction);
   m_menuBar->addMenu(runMenu);
 
 
   QVBoxLayout *layout = new QVBoxLayout ();
   layout->addWidget (m_menuBar);
@@ -490,16 +499,17 @@ FileEditorMdiSubWindow::construct ()
   connect (m_cutAction, SIGNAL (triggered ()), m_editor, SLOT (cut ()));
   connect (pasteAction, SIGNAL (triggered ()), m_editor, SLOT (paste ()));
   connect (saveAction, SIGNAL (triggered ()), this, SLOT (saveFile ()));
   connect (saveAsAction, SIGNAL (triggered ()), this, SLOT (saveFileAs ()));
   connect (runAction, SIGNAL (triggered ()), this, SLOT (runFile ()));
   connect (toggleBookmarkAction, SIGNAL (triggered ()), this, SLOT (toggleBookmark ()));
   connect (nextBookmarkAction, SIGNAL (triggered ()), this, SLOT (nextBookmark ()));
   connect (prevBookmarkAction, SIGNAL (triggered ()), this, SLOT (prevBookmark ()));
+  connect (removeBookmarkAction, SIGNAL (triggered ()), this, SLOT (removeBookmark ()));
 
   // TODO: Do we still need tool tips in the status bar? Tool tips are now
   //       shown directly at the theme icons
   connect (newAction, SIGNAL (hovered ()), this, SLOT (showToolTipNew ()));
   connect (openAction, SIGNAL (hovered ()), this, SLOT (showToolTipOpen ()));
   connect (undoAction, SIGNAL (hovered ()), this, SLOT (showToolTipUndo ()));
   connect (redoAction, SIGNAL (hovered ()), this, SLOT (showToolTipRedo ()));
   connect (saveAction, SIGNAL (hovered ()), this, SLOT (showToolTipSave ()));
diff --git a/gui/src/FileEditorMdiSubWindow.h b/gui/src/FileEditorMdiSubWindow.h
--- a/gui/src/FileEditorMdiSubWindow.h
+++ b/gui/src/FileEditorMdiSubWindow.h
@@ -27,17 +27,17 @@
 #include <QStatusBar>
 #include <QCloseEvent>
 #include <Qsci/qsciscintilla.h>
 // Not available in the Debian repos yet!
 // #include <Qsci/qscilexeroctave.h>
 #include "lexer/lexeroctavegui.h"
 
 const char UNNAMED_FILE[]     = "<unnamed>";
-const char SAVE_FILE_FILTER[] = "Octave Files  *.m(*.m);;All Files   *.*(*.*)";
+const char SAVE_FILE_FILTER[] = "Octave Files (*.m);;All Files (*.*)";
 enum MARKER
   {
     MARKER_BOOKMARK,
     MARKER_BREAKPOINT
   };
 
 class FileEditorMdiSubWindow:public QMdiSubWindow
 {
@@ -80,15 +80,16 @@ private:
   int m_markerBookmark;
   bool m_modified;
 
 private slots:
   void handleModificationChanged(bool modified);
   void handleMarginClicked(int line, int margin, Qt::KeyboardModifiers state);
   void handleCopyAvailable(bool enableCopy);
   void runFile();
+  void removeBookmark ();
   void toggleBookmark ();
   void nextBookmark();
   void prevBookmark();
 
 };
 
 #endif // FILEEDITORMDISUBWINDOW_H
