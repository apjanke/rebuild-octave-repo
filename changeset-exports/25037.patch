# HG changeset patch
# User Rik <rik@octave.org>
# Date 1522259717 25200
#      Wed Mar 28 10:55:17 2018 -0700
# Branch stable
# Node ID 1c077d652c577ebdca81e877dd187ebeb240cc32
# Parent  fa2f8ffd088e2b80bb3ff5af5dbcf7ca803feefd
Add new warning ID and message when lu is called with sparse input incorrectly (bug #53390).

* lu.cc (Flu): Add new warning_with_id call with ID "Octave:lu:sparse_input" if
lu is called with sparse input and less than 4 output arguments.

* warning_ids.m: Document new warning ID "Octave:lu:sparse_input".

diff --git a/libinterp/corefcn/lu.cc b/libinterp/corefcn/lu.cc
--- a/libinterp/corefcn/lu.cc
+++ b/libinterp/corefcn/lu.cc
@@ -191,20 +191,24 @@ permutation information.
         return octave_value_list (5, SparseMatrix ());
 
       if (arg.isreal ())
         {
           SparseMatrix m = arg.sparse_matrix_value ();
 
           if (nargout < 4)
             {
+              warning_with_id ("Octave:lu:sparse_input",
+                               "lu: function may fail when called with less than 4 output arguments and a sparse input");
+
               ColumnVector Qinit (nc);
               for (octave_idx_type i = 0; i < nc; i++)
                 Qinit(i) = i;
-              octave::math::sparse_lu<SparseMatrix> fact (m, Qinit, thres, false, true);
+              octave::math::sparse_lu<SparseMatrix> fact (m, Qinit, thres,
+                                                          false, true);
 
               if (nargout < 2)
                 retval(0) = fact.Y ();
               else
                 {
                   retval.resize (nargout == 3 ? 3 : 2);
                   retval(1)
                     = octave_value (
@@ -256,16 +260,19 @@ permutation information.
             }
         }
       else if (arg.iscomplex ())
         {
           SparseComplexMatrix m = arg.sparse_complex_matrix_value ();
 
           if (nargout < 4)
             {
+              warning_with_id ("Octave:lu:sparse_input",
+                               "lu: function may fail when called with less than 4 output arguments and a sparse input");
+
               ColumnVector Qinit (nc);
               for (octave_idx_type i = 0; i < nc; i++)
                 Qinit(i) = i;
               octave::math::sparse_lu<SparseComplexMatrix> fact (m, Qinit,
                                                                  thres, false,
                                                                  true);
 
               if (nargout < 2)
@@ -294,17 +301,18 @@ permutation information.
                       else
                         retval(2) = P;
                     }
                 }
             }
           else
             {
               retval.resize (scale ? 5 : 4);
-              octave::math::sparse_lu<SparseComplexMatrix> fact (m, thres, scale);
+              octave::math::sparse_lu<SparseComplexMatrix> fact (m, thres,
+                                                                 scale);
 
               retval(0) = octave_value (fact.L (),
                                         MatrixType (MatrixType::Lower));
               retval(1) = octave_value (fact.U (),
                                         MatrixType (MatrixType::Upper));
 
               if (vecout)
                 {
@@ -525,31 +533,34 @@ permutation information.
 %! assert (p, single ([2;1]), sqrt (eps ("single")));
 
 %!test
 %! [l u p] = lu (single ([1, 2; 3, 4; 5, 6]));
 %! assert (l, single ([1, 0; 1/5, 1; 3/5, 1/2]), sqrt (eps ("single")));
 %! assert (u, single ([5, 6; 0, 4/5]), sqrt (eps ("single")));
 %! assert (p(:,:), single ([0, 0, 1; 1, 0, 0; 0 1 0]), sqrt (eps ("single")));
 
-%!error lu ()
-%!error <can not define pivoting threshold> lu ([1, 2; 3, 4], 2)
-
 %!testif HAVE_UMFPACK
 %! Bi = [1 2 3 4 5 2 3 6 7 8 4 5 7 8 9];
 %! Bj = [1 3 4 5 6 7 8 9 11 12 13 14 15 16 17];
 %! Bv = [1 1 1 1 1 1 -1 1 1 1 1 -1 1 -1 1];
 %! B = sparse (Bi, Bj, Bv);
+%! warning ("off", "Octave:lu:sparse_input", "local");
 %! [L, U] = lu (B);
 %! assert (L*U, B);
 %! [L, U, P] = lu(B);
 %! assert (P'*L*U, B);
 %! [L, U, P, Q] = lu (B);
 %! assert (P'*L*U*Q', B);
 
+%!error lu ()
+%!warning <function may fail>
+%! [l,u] = lu (sparse (magic (3)));
+%!error <can not define pivoting threshold> lu ([1, 2; 3, 4], 2)
+
 */
 
 static
 bool check_lu_dims (const octave_value& l, const octave_value& u,
                     const octave_value& p)
 {
   octave_idx_type m = l.rows ();
   octave_idx_type k = u.rows ();
diff --git a/scripts/help/warning_ids.m b/scripts/help/warning_ids.m
--- a/scripts/help/warning_ids.m
+++ b/scripts/help/warning_ids.m
@@ -209,16 +209,23 @@
 ## Octave may also be of use, @pxref{Command Line Options}.
 ##
 ## @item Octave:load-file-in-path
 ## By default, the @code{Octave:load-file-in-path} warning is enabled.
 ##
 ## @item Octave:logical-conversion
 ## By default, the @code{Octave:logical-conversion} warning is enabled.
 ##
+## @item Octave:lu:sparse_input
+## If the @code{Octave:lu:sparse_input} warning is enabled, Octave
+## will warn when the lu function is called with a sparse input and less than
+## four output arguments.  In this case, sparsity-preserving column
+## permutations are not performed and the result may be inaccurate.
+## By default, the @code{Octave:lu:sparse_input} warning is enabled.
+##
 ## @item Octave:missing-glyph
 ## By default, the @code{Octave:missing-glyph} warning is enabled.
 ##
 ## @item Octave:missing-semicolon
 ## If the @code{Octave:missing-semicolon} warning is enabled, Octave
 ## will warn when statements in function definitions don't end in
 ## semicolons.
 ## By default the @code{Octave:missing-semicolon} warning is disabled.
