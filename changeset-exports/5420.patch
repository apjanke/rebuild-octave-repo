# HG changeset patch
# User jwe
# Date 1122327171 0
#      Mon Jul 25 21:32:51 2005 +0000
# Node ID f608ac74f92ce2639e742693b1af74f49529b51c
# Parent  cbcd2009c4be9254d3a22df24a6054facc004e53
[project @ 2005-07-25 21:32:51 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2005-07-25   Erik de Castro Lopo  <erikd@zip.com.au>
+
+	* oct-inttypes.h (OCTAVE_S_US_FTR): Compare <= 0 instead of < 0 to
+	avoid warnings for unsigned types.
+
 2005-07-07  John W. Eaton  <jwe@octave.org>
 
 	* dSparse.cc (SparseMatrix::factorize): Initialize Numeric to 0.
 	* CSparse.cc (SparseComplexMatrix::factorize:) Likewise.
 
 2005-06-15  John W. Eaton  <jwe@octave.org>
 
 	* oct-rl-edit.c (flush_stdout): Rename from no_redisplay.
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -170,17 +170,17 @@ OCTAVE_US_S_FTR_FCNS (unsigned long long
 // type).  The upper limit will be enforced correctly by converting to
 // the new type, even if the type of X is wider than the new type.
 
 #define OCTAVE_S_US_FTR(T1, T2) \
   template <> \
   inline T2 \
   octave_int_fit_to_range<T1, T2> (const T1& x, const T2&, const T2&) \
   { \
-    return x < 0 ? 0 : x; \
+    return x <= 0 ? 0 : x; \
   }
 
 #define OCTAVE_S_US_FTR_FCNS(T) \
   OCTAVE_S_US_FTR (T, unsigned char) \
   OCTAVE_S_US_FTR (T, unsigned short) \
   OCTAVE_S_US_FTR (T, unsigned int) \
   OCTAVE_S_US_FTR (T, unsigned long) \
   OCTAVE_S_US_FTR (T, unsigned long long)
