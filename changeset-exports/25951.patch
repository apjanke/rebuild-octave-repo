# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1539967081 14400
#      Fri Oct 19 12:38:01 2018 -0400
# Branch stable
# Node ID 7a507e71d922b5def277e58de8a33f8c73197449
# Parent  c2bf210ac94f639b176101ae2ecec57506e2ecad
style fixes

* Canvas.cc, Figure.cc, dialog.cc, octave-qscintilla.cc, tab-bar.cc,
variable-editor.cc, gl-render.cc, graphics.cc, load-path.cc,
oct-stream.cc, variables.cc, jit-typeinfo.cc:
Break long lines before && and || operators.

diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -518,18 +518,18 @@ namespace QtHandles
     else if (m_mouseMode == NoMode)
       {
         graphics_object obj = gh_manager::get_object (m_handle);
 
         if (obj.valid_object ())
           {
             graphics_object figObj (obj.get_ancestor ("figure"));
 
-            if (figObj.valid_object () &&
-                ! figObj.get ("windowbuttonmotionfcn").isempty ())
+            if (figObj.valid_object ()
+                && ! figObj.get ("windowbuttonmotionfcn").isempty ())
               {
                 updateCurrentPoint (figObj, obj, event);
                 gh_manager::post_callback (figObj.get_handle (),
                                            "windowbuttonmotionfcn");
               }
           }
       }
 
diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -88,18 +88,18 @@ namespace QtHandles
     gh_manager::auto_lock lock;
 
     Matrix kids = fp.get_all_children ();
 
     for (int i = 0; i < kids.numel (); i++)
       {
         graphics_object go (gh_manager::get_object (kids(i)));
 
-        if (go && go.isa ("uimenu") &&
-            go.get ("visible").string_value () == "on")
+        if (go && go.isa ("uimenu")
+            && go.get ("visible").string_value () == "on")
           return true;
       }
 
     return false;
   }
 
   static QRect
   boundingBoxToRect (const Matrix& bb)
@@ -136,19 +136,19 @@ namespace QtHandles
     // Status bar
     m_statusBar = win->statusBar ();
     int boffset = 0;
 
     // Toolbar and menubar
     createFigureToolBarAndMenuBar ();
     int toffset = 0;
 
-    if (fp.toolbar_is ("figure") ||
-        (fp.toolbar_is ("auto") && fp.menubar_is ("figure") &&
-         ! hasUiControlChildren (fp)))
+    if (fp.toolbar_is ("figure")
+        || (fp.toolbar_is ("auto") && fp.menubar_is ("figure")
+            && ! hasUiControlChildren (fp)))
       {
         toffset += m_figureToolBar->sizeHint ().height ();
         boffset += m_statusBar->sizeHint ().height ();
       }
     else
       {
         m_figureToolBar->hide ();
         m_statusBar->hide ();
@@ -486,18 +486,18 @@ namespace QtHandles
         break;
 
       case figure::properties::ID_TOOLBAR:
         if (fp.toolbar_is ("none"))
           showFigureToolBar (false);
         else if (fp.toolbar_is ("figure"))
           showFigureToolBar (true);
         else // "auto"
-          showFigureToolBar (! hasUiControlChildren (fp) &&
-                             fp.menubar_is ("figure"));
+          showFigureToolBar (! hasUiControlChildren (fp)
+                             && fp.menubar_is ("figure"));
         break;
 
       case figure::properties::ID_MENUBAR:
         showMenuBar (fp.menubar_is ("figure"));
         if (fp.toolbar_is ("auto"))
           showFigureToolBar (fp.menubar_is ("figure"));
         break;
 
diff --git a/libgui/src/dialog.cc b/libgui/src/dialog.cc
--- a/libgui/src/dialog.cc
+++ b/libgui/src/dialog.cc
@@ -508,25 +508,20 @@ namespace octave
   void FileDialog::acceptSelection (void)
   {
     QStringList string_result;
     QString path;
     int idx = 1;
 
     string_result = selectedFiles ();
 
-    if (testOption (QFileDialog::ShowDirsOnly)  == true &&
-        string_result.size () > 0)
-      {
-        path = string_result[0];
-      }
+    if (testOption (QFileDialog::ShowDirsOnly) && string_result.size () > 0)
+      path = string_result[0];
     else
-      {
-        path = directory ().absolutePath ();
-      }
+      path = directory ().absolutePath ();
 
     // Matlab expects just the filename, whereas the file dialog gave us
     // full path names, so fix it.
 
     for (int i = 0; i < string_result.size (); i++)
       string_result[i] = QFileInfo (string_result[i]).fileName ();
 
     // if not showing only dirs, add end slash for the path component
diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -181,29 +181,29 @@ namespace octave
     // Octave interprets Cmd key as Meta whereas Qscintilla interprets it
     // as Ctrl. We thus invert Meta/Ctrl in Qscintilla's shortcuts list.
     QList< QsciCommand * > cmd_list_mac = cmd_set->commands ();
     for (int i = 0; i < cmd_list_mac.length (); i++)
       {
         // Primary key
         int key = cmd_list_mac.at (i)->key ();
 
-        if (static_cast<int> (key | Qt::META) == key &&
-            static_cast<int> (key | Qt::CTRL) != key)
+        if (static_cast<int> (key | Qt::META) == key
+            && static_cast<int> (key | Qt::CTRL) != key)
           key = (key ^ Qt::META) | Qt::CTRL;
         else if (static_cast<int> (key | Qt::CTRL) == key)
           key = (key ^ Qt::CTRL) | Qt::META;
 
         cmd_list_mac.at (i)->setKey (key);
 
         // Alternate key
         key = cmd_list_mac.at (i)->alternateKey ();
 
-        if (static_cast<int> (key | Qt::META) == key &&
-            static_cast<int> (key | Qt::CTRL) != key)
+        if (static_cast<int> (key | Qt::META) == key
+            && static_cast<int> (key | Qt::CTRL) != key)
           key = (key ^ Qt::META) | Qt::CTRL;
         else if (static_cast<int> (key | Qt::CTRL) == key)
           key = (key ^ Qt::CTRL) | Qt::META;
 
         cmd_list_mac.at (i)->setAlternateKey (key);
       }
 #endif
 
diff --git a/libgui/src/tab-bar.cc b/libgui/src/tab-bar.cc
--- a/libgui/src/tab-bar.cc
+++ b/libgui/src/tab-bar.cc
@@ -107,34 +107,34 @@ namespace octave
           }
       }
 
     // If a tab was clicked
     if (clicked_idx >= 0)
       {
         int current_idx = currentIndex ();
         // detect the mouse click
-        if ((me->type () == QEvent::MouseButtonDblClick &&
-             me->button() == Qt::LeftButton) ||
-            (me->type () != QEvent::MouseButtonDblClick &&
-             me->button() == Qt::MidButton))
+        if ((me->type () == QEvent::MouseButtonDblClick
+             && me->button() == Qt::LeftButton)
+            || (me->type () != QEvent::MouseButtonDblClick
+                && me->button() == Qt::MidButton))
           {
             // Middle click or double click -> close the tab
             // Make the clicked tab the current one and close it
             setCurrentIndex (clicked_idx);
             emit close_current_tab_signal (true);
             // Was the closed tab before or after the previously current tab?
             // According to the result, use previous index or reduce it by one
             if (current_idx - clicked_idx > 0)
               setCurrentIndex (current_idx - 1);
             else if (current_idx - clicked_idx < 0)
               setCurrentIndex (current_idx);
           }
-        else if (me->type () != QEvent::MouseButtonDblClick &&
-                 me->button() == Qt::RightButton)
+        else if (me->type () != QEvent::MouseButtonDblClick
+                 && me->button() == Qt::RightButton)
           {
             // Right click, show context menu
             setCurrentIndex (clicked_idx);
             if (! m_context_menu->exec (click_pos))
               {
                 // No action selected, back to previous tab
                 setCurrentIndex (current_idx);
               }
diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -922,18 +922,18 @@ namespace octave
   {
     installEventFilter (this);
   }
 
   bool HoverToolButton::eventFilter (QObject *obj, QEvent *ev)
   {
     if (ev->type () == QEvent::HoverEnter)
       emit hovered_signal ();
-    else if (ev->type () == QEvent::MouseButtonPress ||
-             ev->type () == QEvent::MouseButtonPress)
+    else if (ev->type () == QEvent::MouseButtonPress
+             || ev->type () == QEvent::MouseButtonPress)
       emit popup_shown_signal ();
 
     return QToolButton::eventFilter (obj, ev);
   }
 
   ReturnFocusToolButton::ReturnFocusToolButton (QWidget *parent)
     : HoverToolButton (parent)
   {
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -3457,19 +3457,19 @@ namespace octave
 #if defined (HAVE_OPENGL)
 
     if (props.get_string ().isempty ())
       return;
 
     Matrix pos = xform.scale (props.get_data_position ());
 
     // Handle clipping manually when drawing text background
-    if (! props.is_clipping () ||
-        (clip_code (pos(0), pos(1), pos.numel () > 2 ? pos(2) : 0.0) ==
-         octave_uint8 (0x40)))
+    if (! props.is_clipping ()
+        || (clip_code (pos(0), pos(1), pos.numel () > 2 ? pos(2) : 0.0)
+            == octave_uint8 (0x40)))
       {
         set_clipping (false);
         draw_text_background (props);
         set_clipping (props.is_clipping ());
       }
 
     set_font (props);
 
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -1079,18 +1079,18 @@ lookup_object_name (const caseless_str& 
                               pfx = name.substr (0, 12);
 
                               if (pfx.compare ("uitoggletool"))
                                 offset = 12;
                               else if (len >= 13)
                                 {
                                   pfx = name.substr (0, 13);
 
-                                  if (pfx.compare ("uicontextmenu") ||
-                                      pfx.compare ("uibuttongroup"))
+                                  if (pfx.compare ("uicontextmenu")
+                                      || pfx.compare ("uibuttongroup"))
                                     offset = 13;
                                 }
                             }
                         }
                     }
                 }
             }
         }
@@ -5881,29 +5881,29 @@ axes::properties::update_axes_layout (vo
 
   // 2D mode
   x2Dtop = false;
   y2Dright = false;
   layer2Dtop = false;
   if (xstate == AXE_HORZ_DIR && ystate == AXE_VERT_DIR)
     {
       Matrix ylimits = get_ylim ().matrix_value ();
-      if (xaxislocation_is ("top") ||
-          (yscale_is ("log") && xaxislocation_is ("origin")
-           && (ylimits(1) < 0.)))
+      if (xaxislocation_is ("top")
+          || (yscale_is ("log") && xaxislocation_is ("origin")
+              && (ylimits(1) < 0.)))
         {
           std::swap (yPlane, yPlaneN);
           x2Dtop = true;
         }
       ypTick = yPlaneN;
       ypTickN = yPlane;
       Matrix xlimits = get_xlim ().matrix_value ();
-      if (yaxislocation_is ("right") ||
-          (xscale_is ("log") && yaxislocation_is ("origin")
-           && (xlimits(1) < 0.)))
+      if (yaxislocation_is ("right")
+          || (xscale_is ("log") && yaxislocation_is ("origin")
+              && (xlimits(1) < 0.)))
         {
           std::swap (xPlane, xPlaneN);
           y2Dright = true;
         }
       xpTick = xPlaneN;
       xpTickN = xPlane;
       if (layer_is ("top"))
         {
@@ -7196,18 +7196,18 @@ axes::properties::check_axis_limits (Mat
   double max_val = -octave::numeric_limits<double>::Inf ();
   double min_pos = octave::numeric_limits<double>::Inf ();
   double max_neg = -octave::numeric_limits<double>::Inf ();
   double eps = std::numeric_limits<double>::epsilon ();
   bool do_update = false;
   bool have_children_limits = false;
 
   // check whether we need to get children limits
-  if (! octave::math::isfinite (limits(0)) ||
-      ! octave::math::isfinite (limits(1)))
+  if (! octave::math::isfinite (limits(0))
+      || ! octave::math::isfinite (limits(1)))
     {
       get_children_limits (min_val, max_val, min_pos, max_neg, kids,
                            update_type);
       have_children_limits = true;
     }
   if (! octave::math::isfinite (limits(0)))
     {
       limits(0) = min_val;
@@ -9407,18 +9407,18 @@ uicontextmenu::~uicontextmenu (void)
 {
   std::list<graphics_handle> lst = xproperties.get_dependent_obj_list ();
   std::list<graphics_handle>::const_iterator it;
 
   for (it = lst.begin (); it != lst.end (); it++)
     {
       graphics_object go = gh_manager::get_object (*it);
 
-      if (go.valid_object () &&
-          go.get ("uicontextmenu") == xproperties.get___myhandle__ ())
+      if (go.valid_object ()
+          && go.get ("uicontextmenu") == xproperties.get___myhandle__ ())
         go.set ("uicontextmenu", Matrix ());
     }
 }
 
 /*
 ## Test deletion/reset of uicontextmenu
 %!test
 %! hf = figure ("visible", "off");
diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -2439,22 +2439,22 @@ For each directory that is added, and th
       for (auto dir : dir_elts)
         {
           // Remove duplicate directory separators
           std::string::iterator it_start = dir.begin ();
 #if defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM)
           // In Windows, start check at second character (for UNC paths).
           it_start++;
 #endif
-          dir.erase (std::unique (it_start, dir.end (),
-                                  [](char l, char r)
-                                  {
-                                    return l == r &&
-                                           octave::sys::file_ops::is_dir_sep (l);
-                                  }),
+          dir.erase (std::unique
+                     (it_start, dir.end (),
+                      [] (char l, char r)
+                      {
+                        return l == r && octave::sys::file_ops::is_dir_sep (l);
+                      }),
                      dir.end ());
 
           auto pos = dir.find_last_of (octave::sys::file_ops::dir_sep_chars ());
           if (pos == std::string::npos)
             {
               if (! dir.empty () && dir[0] == '+')
                 warning_with_id ("Octave:addpath-pkg",
                                  "addpath: package directories should not be added to path: %s\n", dir.c_str ());
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -3753,19 +3753,19 @@ namespace octave
         if (c1 == comment_char)           // see if we match an open comment
           {
             // save stream state in case we have to restore it
             char *pos = is.tellg ();
             std::ios::iostate state = is.rdstate ();
 
             std::string tmp (comment_len, '\0');
             char *look = is.read (&tmp[0], comment_len-1, pos); // already read first char
-            if (is && comment_style.numel () > 0 &&
-                ! strncmp (comment_style(0).string_value ().substr (1).c_str (),
-                           look, comment_len-1))
+            if (is && comment_style.numel () > 0
+                && ! strncmp (comment_style(0).string_value ().substr (1).c_str (),
+                              look, comment_len-1))
               {
                 found_comment = true;
 
                 std::string dummy;
                 if (comment_style.numel () == 1)  // skip to end of line
                   {
                     std::string eol (3, '\0');
                     eol[0] = eol1;
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -376,18 +376,18 @@ symbol_exist (octave::interpreter& inter
 
   bool search_any = type == "any";
   bool search_var = type == "var";
   bool search_dir = type == "dir";
   bool search_file = type == "file";
   bool search_builtin = type == "builtin";
   bool search_class = type == "class";
 
-  if (! (search_any || search_var || search_dir || search_file ||
-         search_builtin || search_class))
+  if (! (search_any || search_var || search_dir || search_file
+         || search_builtin || search_class))
     error (R"(exist: unrecognized type argument "%s")", type.c_str ());
 
   octave::symbol_table& symtab = interp.get_symbol_table ();
 
   if (search_any || search_var)
     {
       octave::symbol_scope scope = symtab.current_scope ();
 
diff --git a/libinterp/parse-tree/jit-typeinfo.cc b/libinterp/parse-tree/jit-typeinfo.cc
--- a/libinterp/parse-tree/jit-typeinfo.cc
+++ b/libinterp/parse-tree/jit-typeinfo.cc
@@ -2014,18 +2014,18 @@ namespace octave
 
   jit_type*
   jit_typeinfo::do_register_new_type (const std::string& name,
                                       jit_type *parent,
                                       llvm::Type *llvm_type,
                                       bool skip_paren)
   {
     // FIXME: Currently our types do *not* form a lattice
-    assert ((name == "any") || (name == "any_ptr") ||
-            (name == "scalar_ptr") || (parent != nullptr));
+    assert ((name == "any") || (name == "any_ptr")
+            || (name == "scalar_ptr") || (parent != nullptr));
 
     jit_type *ret = new jit_type (name, parent, llvm_type, skip_paren,
                                   m_next_id++);
     m_id_to_type.push_back (ret);
 
     m_casts.push_back (jit_operation ("(" + name + ")"));
     m_identities.push_back (jit_function ());
 
