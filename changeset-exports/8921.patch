# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1236441859 18000
#      Sat Mar 07 11:04:19 2009 -0500
# Node ID b672260d14e732945f0191cc66d46a0054f9907f
# Parent  eb63fbe60fab75cdd53b74ba393fb8a2bbcfe769
update PROJECTS file

diff --git a/PROJECTS b/PROJECTS
--- a/PROJECTS
+++ b/PROJECTS
@@ -1,41 +1,41 @@
 <html>
 <pre>
 Octave PROJECTS                                          -*- text -*-
 ===============
 
-Check with maintainers@octave.org for a possibly more current copy.
-Also, if you start working steadily on a project, please let
-maintainers@octave.org know.  We might have information that could
-help you; we'd also like to send you the GNU coding standards.
+Look in the Octave source archive on Savannah for a possibly more
+current copy.  Also, if you start working steadily on a project,
+please let maintainers@octave.org know.  We might have information
+that could help you.  You should also read the Contributing Guidelines
+chapter in the Octave manual.
 
 This list is not exclusive -- there are many other things that might
-be good projects, but it might instead be something we already have,
-so check with maintainers@octave.org before you start.
+be good projects, but it might instead be something we already have.
+Also, some of the following items may not actually be considered good
+ideas now.  So please check with maintainers@octave.org before you
+start working on some large project.
+
 
 ---------
 Numerical:
 ---------
 
   * Improve logm, and sqrtm.
 
   * Improve complex mapper functions.  See W. Kahan, ``Branch Cuts for
     Complex Elementary Functions, or Much Ado About Nothing's Sign
     Bit'' (in The State of the Art in Numerical Analysis, eds. Iserles
     and Powell, Clarendon Press, Oxford, 1987) for explicit
     trigonometric formulae.
 
   * Make functions like gamma() return the right IEEE Inf or NaN
     values for extreme args or other undefined cases.
 
-  * Handle complex values in fread and fwrite.
-
-  * Support for lp_solve for linear programming problems.
-
   * Improve sqp.
 
   * Fix CollocWt to handle Laguerre polynomials.  Make it easy to
     extend it to other polynomial types.
 
   * Add optional arguments to colloc so that it's not restricted to
     Legendre polynomials.
 
@@ -43,131 +43,109 @@ Numerical:
     problem, and to solve for eigenvalues and eigenvectors without
     performing a balancing step first.
 
   * Move rand, eye, xpow, xdiv, etc., functions to the matrix classes.
 
   * Use octave_allocator for memory management in Array classes once
     g++ supports static member templates.
 
-  * When constructing NLConst (and other) objects, make sure that
-    there are sufficient checks to ensure that the dimensions all
-    conform.
-
   * Improve design of ODE, DAE, classes.
 
-  * Extend meaning of .* to include v .* M or M .* v (where v is a
-    column vector with the same number of rows as M) to scale rows of
-    M by elements of v.  Similarly, if w is a row vector with as many
-    columns as M, then either w .* M or M .* w scales the columns of
-    M.
-
   * Make QR more memory efficient for large matrices when not all the
     columns of Q are required (apparently this is not handled by the
     lapack code yet).
 
-  * Consider making the behavior of the / and \ operators for
-    non-square systems compatible with Matlab.  Currently, they return
-    the minimum norm solution from DGELSD, which behaves differently.
-
 ---------------
 Sparse Matrices:
 ---------------
 
   * Improve QR factorization functions, using idea based on CSPARSE
     cs_dmsol.m 
 
   * Implement fourth argument to the sprand and sprandn, and addition
     arguments to sprandsym that the leading brand implements.
 
   * Sparse logical indexing in idx_vector class so that something like
     "a=sprandn(1e6,1e6,1e-6); a(a<1) = 0" won't cause a memory overflow.
 
-  * Make spalloc(r,c,n) actually create an empty sparse with n non-zero 
-    elements? This allows something like
+  * Make spalloc (r, c, n) actually create an empty sparse with n
+    non-zero elements?  This allows something like
 
-    sm = spalloc (r,c,n)
+    sm = spalloc (r, c, n)
     for j=1:c
       for i=1:r
         tmp = foo (i,j);
         if (tmp != 0.)
           sm (i,j) = tmp;
         endif
       endfor
     endfor
 
     actually make sense. Otherwise the above will cause massive amounts
     of memory reallocation.
 
     The fact is that this doesn't make sense in any case as the assign
     function makes another copy of the sparse matrix. So although spalloc
     might easily be made to have the correct behaviour, the first assign
-    will cause the matrix to be resized !!! There seems to be no simple
+    will cause the matrix to be resized!  There seems to be no simple
     way to treat this but a complete rewrite of the sparse assignment
     functions...
 
   * Other missing Functions
       - symmmd      Superseded by symamd
       - colmmd      Superseded by colamd
-      - treelayout
       - cholinc
       - bicg        Can this be taken from octave-forge?
-      - bicgstab
       - cgs
       - gmres
       - lsqr
       - minres
       - qmr
       - symmlq 
 
 -------
 Strings:
 -------
 
   * Improve performance of string functions, particularly for
     searching and replacing.
 
-  * Convert string functions to work on string arrays.
-
   * Make find work for strings.
 
   * Consider making octave_print_internal() print some sort of text
     representation for unprintable characters instead of sending them
     directly to the terminal.  (But don't do this for fprintf!)
 
   * Consider changing the default value of `string_fill_char' from SPC
     to NUL.
 
 ----------------
 Other Data Types:
 ----------------
 
   * Template functions for mixed-type ops.
 
   * Convert other functions for use with the floating point type
-  including quad, dasrt, daspk, etc.
+    including quad, dasrt, daspk, etc.
 
 ------------
 Input/Output:
 ------------
 
   * Make fread and fwrite work for complex data.  Iostreams based
     versions of these functions would also be nice, and if you are
     working on them, it would be good to support other size
     specifications (integer*2, etc.).
 
   * Move some pr-output stuff to liboctave.
 
   * Make the cutoff point for changing to packed storage a
     user-preference variable with default value 8192.
 
-  * Make it possible to load other image formats (ppm, pbm, etc. would
-    probably be best since there are already filters to convert to
-    these formats from others.)
-
   * Complain if there is not enough disk space available (I think
     there is simply not enough error checking in the code that handles
     writing data).
 
   * Make it possible to tie arbitrary input and output streams
     together, similar to the way iostreams can be tied together.
 
 -----------
@@ -260,20 +238,16 @@ Interpreter:
   * Attempt to recognize common subexpressions in the parser.
 
   * Consider making it possible to specify an empty matrix with a
     syntax like [](e1, e2).  Of course at least one of the expressions
     must be zero...
 
   * Is Matrix::fortran_vec() really necessary?
 
-  * Add a command that works like bash's `builtin' command.
-
-  * It would be nice to have an interactive debugger.
-
   * Rewrite whos and the symbol_record_info class.  Write a built-in
     function that gives all the basic information, then write who and
     whos as M-files.
 
   * On systems that support matherr(), make it possible for users to
     enable the printing of warning messages.
 
   * Make it possible to mark variables and functions as read-only.
@@ -303,37 +277,35 @@ History:
 
   * Fix history problems -- core dump if multiple processes are
     writing to the same history file?
 
 ------------------------------
 Configuration and Installation:
 ------------------------------
 
-  * Add an --enable-pathsearch option to configure to make it possible
-    to configure and run without kpathsea. 
+  * Split config.h into a part for Octave-specific configuration
+  things (this part can be installed) and the generic HAVE_X type of
+  configure information that should not be installed.
 
   * Makefile changes:
       -- eliminate for loops
       -- define shell commands or eliminate them
-      -- verify distclean
       -- consolidate targets
 
   * Make it possible to configure so that installed binaries and
     shared libraries are stripped.
 
   * Create a docs-only distribution?
 
 ------------------------------
 Documentation and On-Line Help:
 ------------------------------
 
   * Document new features.
-      -- history-search-{back,for}ward.
-      -- Other stuff mentioned in the NEWS file.
 
   * Improve the Texinfo Documentation for the interpreter.  It would
     be useful to have lots more examples, to not have so many forward
     references, and to not have very many simple lists of functions.
 
   * The docs should mention something about efficiency and that using
     array operations is almost always a good idea for speed.
 
@@ -342,33 +314,16 @@ Documentation and On-Line Help:
   * Make index entries more consistent to improve behavior of `help -i'.
 
   * Make `help -i' try to find a whole word match first.
 
   * Clean up help stuff.
 
   * Demo files.
 
-  * As the number of m-files with octave grows perhaps a 'Contents.m'
-    file for each toolbox (directory) would be appropriate so one
-    knows exactly what functions are in a toolbox with a quick look.
-    It would be best to generate information for each function directly
-    from the M-files, so that the information doesn't have to be
-    duplicated, and will remain current if the M-files change.  It
-    would also be best to do as much of this as possible in an M-file,
-    though I wouldn't mind adding some basic support for listing the
-    names of all the directories in the load path, and the names of all
-    the M-files in a given directory if that is needed.
-
-    Also make it possible to recursively search for Contents files:
-
-      help dir        -- Contents from dir
-      help dir//      -- Contents from dir and all its subdirectories
-      help dir1/dir2  -- Contents from dir2 which is under dir1
-
 -----
 Tests:
 -----
 
   * Improved set of tests:
 
       -- Tests for various functions.  Would be nice to have a test file
 	 corresponding to every function.
@@ -389,16 +344,18 @@ Tests:
 	   o resizing
 
   * Tests for all internal functions.
 
 -----------
 Programming:
 -----------
 
+  * C++ namespace for Octave library functions.
+
   * Better error messages for missing operators?
 
   * Eliminate duplicate enums in pt-exp.cc, pt-const.cc, and ov.cc.
 
   * Handle octave_print_internal() stuff at the liboctave level.  Then
     the octave_value classes could just call on the print() methods
     for the underlying classes.
 
