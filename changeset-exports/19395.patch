# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1418253303 -3600
#      Thu Dec 11 00:15:03 2014 +0100
# Node ID fb09907f4e49023bfc7f1cdc0349128c04af9296
# Parent  b39cbe9f3bb0a08a968c203f88c548d3cf6a0dbd
Remove single line makro INSTANTIATE_ARRAY_SORT.

* Array.cc: removed makro INSTANTIATE_ARRAY_SORT definition.
* Array-*.cc: replaced makro INSTANTIATE_ARRAY_SORT with definition.

diff --git a/liboctave/array/Array-C.cc b/liboctave/array/Array-C.cc
--- a/liboctave/array/Array-C.cc
+++ b/liboctave/array/Array-C.cc
@@ -83,17 +83,17 @@ safe_comparator (sortmode mode, const Ar
         result = nan_ascending_compare;
       else if (mode == DESCENDING)
         result = nan_descending_compare;
     }
 
   return result;
 }
 
-INSTANTIATE_ARRAY_SORT (Complex);
+template class OCTAVE_API octave_sort<Complex>;
 
 INSTANTIATE_ARRAY (Complex, OCTAVE_API);
 
 template OCTAVE_API std::ostream& operator << (std::ostream&,
                                                const Array<Complex>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
diff --git a/liboctave/array/Array-b.cc b/liboctave/array/Array-b.cc
--- a/liboctave/array/Array-b.cc
+++ b/liboctave/array/Array-b.cc
@@ -99,17 +99,17 @@ octave_sort<bool>::sort (bool *data, oct
 template <> template <>
 void
 octave_sort<bool>::sort (bool *data, octave_idx_type *idx, octave_idx_type nel,
                          std::greater<bool>)
 {
   do_bool_partition<true> (data, idx, nel);
 }
 
-INSTANTIATE_ARRAY_SORT (bool);
+template class OCTAVE_API octave_sort<bool>;
 
 INSTANTIATE_ARRAY (bool, OCTAVE_API);
 
 template OCTAVE_API std::ostream& operator << (std::ostream&,
                                                const Array<bool>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
diff --git a/liboctave/array/Array-ch.cc b/liboctave/array/Array-ch.cc
--- a/liboctave/array/Array-ch.cc
+++ b/liboctave/array/Array-ch.cc
@@ -27,17 +27,17 @@ along with Octave; see the file COPYING.
 // Instantiate Arrays of char values.
 
 #include "Array.h"
 #include "Array.cc"
 #define INLINE_ASCENDING_SORT
 #define INLINE_DESCENDING_SORT
 #include "oct-sort.cc"
 
-INSTANTIATE_ARRAY_SORT (char);
+template class OCTAVE_API octave_sort<char>;
 
 INSTANTIATE_ARRAY (char, OCTAVE_API);
 
 template OCTAVE_API std::ostream& operator << (std::ostream&,
                                                const Array<char>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
diff --git a/liboctave/array/Array-d.cc b/liboctave/array/Array-d.cc
--- a/liboctave/array/Array-d.cc
+++ b/liboctave/array/Array-d.cc
@@ -150,17 +150,17 @@ Array<double>::is_sorted (sortmode mode)
                 }
             }
         }
     }
 
   return mode;
 }
 
-INSTANTIATE_ARRAY_SORT (double);
+template class OCTAVE_API octave_sort<double>;
 
 INSTANTIATE_ARRAY (double, OCTAVE_API);
 
 template OCTAVE_API std::ostream& operator << (std::ostream&,
                                                const Array<double>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
diff --git a/liboctave/array/Array-f.cc b/liboctave/array/Array-f.cc
--- a/liboctave/array/Array-f.cc
+++ b/liboctave/array/Array-f.cc
@@ -150,17 +150,17 @@ Array<float>::is_sorted (sortmode mode) 
                 }
             }
         }
     }
 
   return mode;
 }
 
-INSTANTIATE_ARRAY_SORT (float);
+template class OCTAVE_API octave_sort<float>;
 
 INSTANTIATE_ARRAY (float, OCTAVE_API);
 
 template OCTAVE_API std::ostream& operator << (std::ostream&,
                                                const Array<float>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
diff --git a/liboctave/array/Array-fC.cc b/liboctave/array/Array-fC.cc
--- a/liboctave/array/Array-fC.cc
+++ b/liboctave/array/Array-fC.cc
@@ -83,17 +83,17 @@ safe_comparator (sortmode mode, const Ar
         result = nan_ascending_compare;
       else if (mode == DESCENDING)
         result = nan_descending_compare;
     }
 
   return result;
 }
 
-INSTANTIATE_ARRAY_SORT (FloatComplex);
+template class OCTAVE_API octave_sort<FloatComplex>;
 
 INSTANTIATE_ARRAY (FloatComplex, OCTAVE_API);
 
 template OCTAVE_API std::ostream& operator << (std::ostream&,
                                                const Array<FloatComplex>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
diff --git a/liboctave/array/Array-i.cc b/liboctave/array/Array-i.cc
--- a/liboctave/array/Array-i.cc
+++ b/liboctave/array/Array-i.cc
@@ -30,42 +30,42 @@ along with Octave; see the file COPYING.
 
 #include "Array.h"
 #include "Array.cc"
 
 #define INLINE_ASCENDING_SORT
 #define INLINE_DESCENDING_SORT
 #include "oct-sort.cc"
 
-INSTANTIATE_ARRAY_SORT (int);
-INSTANTIATE_ARRAY_SORT (long);
+template class OCTAVE_API octave_sort<int>;
+template class OCTAVE_API octave_sort<long>;
 #if defined (HAVE_LONG_LONG_INT)
-INSTANTIATE_ARRAY_SORT (long long);
+template class OCTAVE_API octave_sort<long long>;
 #endif
 
 INSTANTIATE_ARRAY (int, OCTAVE_API);
 INSTANTIATE_ARRAY (long, OCTAVE_API);
 #if defined (HAVE_LONG_LONG_INT)
 INSTANTIATE_ARRAY (long long, OCTAVE_API);
 #endif
 
-INSTANTIATE_ARRAY_SORT (octave_int8);
-INSTANTIATE_ARRAY_SORT (octave_int16);
-INSTANTIATE_ARRAY_SORT (octave_int32);
-INSTANTIATE_ARRAY_SORT (octave_int64);
+template class OCTAVE_API octave_sort<octave_int8>;
+template class OCTAVE_API octave_sort<octave_int16>;
+template class OCTAVE_API octave_sort<octave_int32>;
+template class OCTAVE_API octave_sort<octave_int64>;
 
 INSTANTIATE_ARRAY (octave_int8, OCTAVE_API);
 INSTANTIATE_ARRAY (octave_int16, OCTAVE_API);
 INSTANTIATE_ARRAY (octave_int32, OCTAVE_API);
 INSTANTIATE_ARRAY (octave_int64, OCTAVE_API);
 
-INSTANTIATE_ARRAY_SORT (octave_uint8);
-INSTANTIATE_ARRAY_SORT (octave_uint16);
-INSTANTIATE_ARRAY_SORT (octave_uint32);
-INSTANTIATE_ARRAY_SORT (octave_uint64);
+template class OCTAVE_API octave_sort<octave_uint8>;
+template class OCTAVE_API octave_sort<octave_uint16>;
+template class OCTAVE_API octave_sort<octave_uint32>;
+template class OCTAVE_API octave_sort<octave_uint64>;
 
 INSTANTIATE_ARRAY (octave_uint8, OCTAVE_API);
 INSTANTIATE_ARRAY (octave_uint16, OCTAVE_API);
 INSTANTIATE_ARRAY (octave_uint32, OCTAVE_API);
 INSTANTIATE_ARRAY (octave_uint64, OCTAVE_API);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
diff --git a/liboctave/array/Array-s.cc b/liboctave/array/Array-s.cc
--- a/liboctave/array/Array-s.cc
+++ b/liboctave/array/Array-s.cc
@@ -28,16 +28,16 @@ along with Octave; see the file COPYING.
 
 #include "Array.h"
 #include "Array.cc"
 
 #define INLINE_ASCENDING_SORT
 #define INLINE_DESCENDING_SORT
 #include "oct-sort.cc"
 
-INSTANTIATE_ARRAY_SORT (short);
+template class OCTAVE_API octave_sort<short>;
 
 INSTANTIATE_ARRAY (short, OCTAVE_API);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 template class DiagArray2<short>;
diff --git a/liboctave/array/Array-str.cc b/liboctave/array/Array-str.cc
--- a/liboctave/array/Array-str.cc
+++ b/liboctave/array/Array-str.cc
@@ -27,11 +27,11 @@ along with Octave; see the file COPYING.
 #include <string>
 
 // Instantiate Arrays of strings.
 
 #include "Array.h"
 #include "Array.cc"
 #include "oct-sort.cc"
 
-INSTANTIATE_ARRAY_SORT (std::string);
+template class OCTAVE_API octave_sort<std::string>;
 
 INSTANTIATE_ARRAY (std::string, OCTAVE_API);
diff --git a/liboctave/array/Array.cc b/liboctave/array/Array.cc
--- a/liboctave/array/Array.cc
+++ b/liboctave/array/Array.cc
@@ -2473,19 +2473,16 @@ Array<T>::nth_element (const idx_vector&
           if (offset == stride-1)
             v += nn*stride;
         }
     }
 
   return m;
 }
 
-
-#define INSTANTIATE_ARRAY_SORT(T) template class OCTAVE_API octave_sort<T>;
-
 #define NO_INSTANTIATE_ARRAY_SORT(T) \
  \
 template <> Array<T>  \
 Array<T>::sort (int, sortmode) const { return *this; } \
  \
 template <> Array<T>  \
 Array<T>::sort (Array<octave_idx_type> &sidx, int, sortmode) const \
 { sidx = Array<octave_idx_type> (); return *this; } \
