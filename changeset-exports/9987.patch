# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1260867938 -3600
#      Tue Dec 15 10:05:38 2009 +0100
# Node ID bb30843c49291763758539af81bcff5eebc23b77
# Parent  672e1b49e01e39dbb326a9d3697761569cfe97fe
fix subscripting of vectors by N-d arrays

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -762,21 +762,21 @@ Array<T>::index (const idx_vector& i) co
       //   b(zeros(0,m)) gives zeros(0,m)
       //   b(zeros(m,0)) gives zeros(m,0)
       //   b(1:2) gives ones(2,1)
       //   b(ones(2)) gives ones(2) etc.
       //
       // As you can see, the behaviour is weird, but the tests end up pretty
       // simple.  Nah, I don't want to suggest that this is ad hoc :)
 
-      if (ndims () == 2 && n != 1)
+      if (ndims () == 2 && n != 1 && rd.is_vector ())
         {
-          if (columns () == 1 && rd(0) == 1)
+          if (columns () == 1)
             rd = dim_vector (il, 1);
-          else if (rows () == 1 && rd(1) == 1)
+          else if (rows () == 1)
             rd = dim_vector (1, il);
         }
 
       octave_idx_type l, u;
       if (il != 0 && i.is_cont_range (n, l, u))
         // If suitable, produce a shallow slice.
         retval = Array<T> (*this, rd, l, u);
       else
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-12-15  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.cc (Array<T>::index (const idx_vector&)): Fix determining of
+	result dimensions.
+
 2009-12-15  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Range.cc (Range::elem, Range::checkelem, Range::index):
 	New methods.
 	* Range.h: Declare them.
 
 2009-12-15  Jaroslav Hajek  <highegg@gmail.com>
 
