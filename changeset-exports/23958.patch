# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1503908426 -7200
#      Mon Aug 28 10:20:26 2017 +0200
# Node ID 36e86c8150ccad51a3e0d8c9fc6a87056d3b8c24
# Parent  382cc01a60e12f09c32d80c90ecbda1c27b277ed
Fix warning in quadgk with zero size interval (bug #51867)

* quadgk.m: set q = err = 0 when the interval has size zero.
New test.

diff --git a/scripts/general/quadgk.m b/scripts/general/quadgk.m
--- a/scripts/general/quadgk.m
+++ b/scripts/general/quadgk.m
@@ -429,20 +429,21 @@ function [q, err, too_close] = __quadgk_
              0.3818300505051889e+00,  0.2797053914892767e+00, ...
              0.1294849661688697e+00]);
 
   halfwidth = diff (subs, [], 2) ./ 2;
   center = sum (subs, 2) ./ 2;
   t = (halfwidth * abscissa) + center;
   x = trans ([t(:,1), t(:,end)]);
 
-  ## Shampine suggests 100 * eps1.
-  ## FIXME: reference for suggestion?
+  ## Shampine suggests 100 * eps1, beginning of section 6.
   if (any (abs (diff (x, [], 2) ./ max (abs (x), [], 2))) < 100 * eps1)
     too_close = true;
+    q = 0;
+    err = 0;
     return;
   endif
 
   too_close = false;
   y = reshape (f (t(:)), size (t));
 
   ## This is faster than using bsxfun as the * operator can use a
   ## single BLAS call, rather than rows (sub) calls to the @times function.
@@ -458,16 +459,17 @@ function t = __quadgk_finite_waypoint__ 
 endfunction
 
 
 %!assert (quadgk (@sin,-pi,pi), 0, 1e-6)
 %!assert (quadgk (inline ("sin"),-pi,pi), 0, 1e-6)
 %!assert (quadgk ("sin",-pi,pi), 0, 1e-6)
 %!assert (quadgk (@sin,-pi,pi, "waypoints", 0, "MaxIntervalCount", 100, "reltol", 1e-3, "abstol", 1e-6, "trace", false), 0, 1e-6)
 %!assert (quadgk (@sin,-pi,pi, 1e-6,false), 0, 1e-6)
+%!assert <51867> (quadgk (@(x) x, 0, 0), 0, 0)
 
 %!assert (quadgk (@sin,-pi,0), -2, 1e-6)
 %!assert (quadgk (@sin,0,pi), 2, 1e-6)
 %!assert (quadgk (@(x) 1./sqrt (x),0,1), 2, 1e-6)
 %!assert (quadgk (@(x) abs (1 - x.^2),0,2, "Waypoints", 1), 2, 1e-6)
 %!assert (quadgk (@(x) 1./(sqrt (x) .* (x+1)),0,Inf), pi, 1e-6)
 %!assert (quadgk (@(z) log (z),1+1i,1+1i, "WayPoints", [1-1i, -1,-1i, -1+1i]), -pi * 1i, 1e-6)
 %!assert (quadgk (@(x) exp (-x .^ 2),-Inf,Inf), sqrt (pi), 1e-6)
