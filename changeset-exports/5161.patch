# HG changeset patch
# User jwe
# Date 1109177099 0
#      Wed Feb 23 16:44:59 2005 +0000
# Node ID 3cdcddfab90ba47602925a6ec906ca212de3c1c9
# Parent  6b9c4cf05a6a5a0fe16c5ba65e2f37319d853dc6
[project @ 2005-02-23 16:44:59 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2005-02-23  John W. Eaton  <jwe@octave.org>
+
+	* parse.y (fold (tree_binary_expression*)): Skip constant folding
+	for some expressions to preserve warnings.
+	(Vwarn_associativity_change): New static variable.
+	(warn_associativity_change): New function.
+	(symbols_of_parse): DEFVAR warn_associativity_change.
+	(maybe_warn_associativity_change): New function.
+	(make_binary_op): Use it.
+
 2005-02-22  John W. Eaton  <jwe@octave.org>
 
 	* parse.y (POW, EPOW): Use %left associativity for compatibility.
 
 	* ov-base-int.cc (octave_baes_int_matrix<T>::load_binary):
 	Handle arrays with only one dimension.
 	* ov-bool-mat.cc (octave_bool_matrix::load_binary): Likewise.
 	* ov-cell.cc (octave_cell::load_binary): Likewise.
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -75,18 +75,20 @@ Software Foundation, 59 Temple Place - S
 //   octave> if (a = 2 < n)
 //
 // but not
 //
 //   octave> if ((a = 2) < n)
 //
 static bool Vwarn_assign_as_truth_value;
 
-// If TRUE, generate a warning for variable swich labels.
-static bool Vwarn_variable_switch_label;
+// If TRUE, generate warning about the meaning of code changing due to
+// changes in associativity for various ops (typically for Matlab
+// compatibility).
+static bool Vwarn_associativity_change;
 
 // If TRUE, generate warning if declared function name disagrees with
 // the name of the file in which it is defined.
 static bool Vwarn_function_name_clash;
 
 // TRUE means warn about function files that have time stamps in the future.
 bool Vwarn_future_time_stamp;
 
@@ -95,16 +97,19 @@ bool Vwarn_future_time_stamp;
 // should only produce output using explicit printing statements.
 static bool Vwarn_missing_semicolon;
 
 // If TRUE, generate warning about the meaning of code changing due to
 // changes in precedence levels for various ops (typically for Matlab
 // compatibility).
 static bool Vwarn_precedence_change;
 
+// If TRUE, generate a warning for variable switch labels.
+static bool Vwarn_variable_switch_label;
+
 // Temporary symbol table pointer used to cope with bogus function syntax.
 symbol_table *tmp_local_sym_tab = 0;
 
 // The current input line number.
 int input_line_number = 0;
 
 // The column of the current token.
 int current_input_column = 1;
@@ -1575,17 +1580,23 @@ fold (tree_binary_expression *e)
   unwind_protect_bool (discard_warning_messages);
 
   discard_error_messages = true;
   discard_warning_messages = true;
 
   tree_expression *op1 = e->lhs ();
   tree_expression *op2 = e->rhs ();
 
-  if (op1->is_constant () && op2->is_constant ())
+  octave_value::binary_op op_type = e->op_type ();
+
+  if (op1->is_constant () && op2->is_constant ()
+      && (! ((Vwarn_associativity_change
+	      && (op_type == POW || op_type == EPOW))
+	     || (Vwarn_precedence_change
+		 && (op_type == EXPR_OR || op_type == EXPR_OR_OR)))))
     {
       octave_value tmp = e->rvalue ();
 
       if (! (error_state || warning_state))
 	{
 	  tree_constant *tc_retval = new tree_constant (tmp);
 
 	  OSSTREAM buf;
@@ -1835,32 +1846,55 @@ make_anon_fcn_handle (tree_parameter_lis
 
   octave_value fh (new octave_fcn_handle (fcn, "@<anonymous>"));
 
   tree_constant *retval = new tree_constant (fh, l, c);
 
   return retval;
 }
 
+static void
+maybe_warn_associativity_change (tree_expression *op)
+{
+  if (Vwarn_associativity_change
+      && op->paren_count () == 0 && op->is_binary_expression ())
+    {
+      tree_binary_expression *e
+	= dynamic_cast<tree_binary_expression *> (op);
+
+      octave_value::binary_op op_type = e->op_type ();
+
+      if (op_type == octave_value::op_pow
+	  || op_type == octave_value::op_el_pow)
+	{
+	  std::string op_str = octave_value::binary_op_as_string (op_type);
+
+	  warning ("meaning may have changed due to change in associativity for %s operator", op_str.c_str ());
+        }
+    }
+}
+
 // Build a binary expression.
 
 static tree_expression *
 make_binary_op (int op, tree_expression *op1, token *tok_val,
 		tree_expression *op2)
 {
   octave_value::binary_op t = octave_value::unknown_binary_op;
 
   switch (op)
     {
     case POW:
       t = octave_value::op_pow;
+      maybe_warn_associativity_change (op1);
       break;
 
     case EPOW:
       t = octave_value::op_el_pow;
+      maybe_warn_associativity_change (op1);
       break;
 
     case '+':
       t = octave_value::op_add;
       break;
 
     case '-':
       t = octave_value::op_sub;
@@ -3843,16 +3877,24 @@ warn_assign_as_truth_value (void)
 {
   Vwarn_assign_as_truth_value
     = check_preference ("warn_assign_as_truth_value");
 
   return 0;
 }
 
 static int
+warn_associativity_change (void)
+{
+  Vwarn_associativity_change = check_preference ("warn_associativity_change");
+
+  return 0;
+}
+
+static int
 warn_function_name_clash (void)
 {
   Vwarn_function_name_clash = check_preference ("warn_function_name_clash");
 
   return 0;
 }
 
 static int
@@ -3950,16 +3992,25 @@ while ((c = getc()))\n\
 @noindent\n\
 will prevent the warning from being printed for this statement, while\n\
 allowing Octave to warn about other assignments used in conditional\n\
 contexts.\n\
 \n\
 The default value of @code{warn_assign_as_truth_value} is 1.\n\
 @end defvr");
 
+  DEFVAR (warn_associativity_change, true, warn_associativity_change,
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} warn_associativity_change\n\
+If the value of this variable is nonzero, Octave will warn about\n\
+possible changes in the meaning of some code due to changes in\n\
+associativity for some operators.  Associativity changes have typically\n\
+been made for Matlab compatibility.  The default value is 1.\n\
+@end defvr");
+
   DEFVAR (warn_function_name_clash, true, warn_function_name_clash,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} warn_function_name_clash\n\
 If the value of @code{warn_function_name_clash} is nonzero, a warning is\n\
 issued when Octave finds that the name of a function defined in a\n\
 function file differs from the name of the file.  (If the names\n\
 disagree, the name declared inside the file is ignored.)  If the value\n\
 is 0, the warning is omitted.  The default value is 1.\n\
