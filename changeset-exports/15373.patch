# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1347552388 14400
#      Thu Sep 13 12:06:28 2012 -0400
# Node ID b5d0a47c171ce8027bf2e76341a1c741215ceb28
# Parent  bff950876af5ae954751068629b6eec654a5aae1
* mex.cc (mexCallMATLAB): Remove stray const added in 93dff6435fe1 (bug #37342).

diff --git a/libinterp/interp-core/mex.cc b/libinterp/interp-core/mex.cc
--- a/libinterp/interp-core/mex.cc
+++ b/libinterp/interp-core/mex.cc
@@ -3005,17 +3005,17 @@ call_mex (bool have_fmex, void *f, const
 const char *
 mexFunctionName (void)
 {
   return mex_context ? mex_context->function_name () : "unknown";
 }
 
 int
 mexCallMATLAB (int nargout, mxArray *argout[], int nargin,
-               const mxArray *argin[], const char *fname)
+               mxArray *argin[], const char *fname)
 {
   octave_value_list args;
 
   // FIXME -- do we need unwind protect to clean up args?  Off hand, I
   // would say that this problem is endemic to Octave and we will
   // continue to have memory leaks after Ctrl-C until proper exception
   // handling is implemented.  longjmp() only clears the stack, so any
   // class which allocates data on the heap is going to leak.
