# HG changeset patch
# User jwe
# Date 857718069 0
#      Fri Mar 07 07:01:09 1997 +0000
# Node ID f81117f4754d490fde557e91b838e1661a5f7679
# Parent  74bc1ede3c3d507faf4661601faec73523303f65
[project @ 1997-03-07 07:01:08 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,24 @@
+Fri Mar  7 00:56:16 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dassl.cc (show_dassl_option): For values that are determined
+	automatically, return a string instead of a magic value (-1.0).
+	* fsolve.cc (show_fsolve_option): Likewise.
+	* lsode.cc (show_lsode_option): Likewise.
+	* npsol.cc (show_npsol_option): Likewise.
+	* qpsol.cc (show_qpsol_option): Likewise.
+
+	* variables.cc (extract_function): New function.
+	* dassl.cc (Fdassl): Use it instead of is_valid_function.
+	* fsolve.cc (Ffsolve): Likewise.
+	* npsol.cc (Fnpsol): Likewise.
+	* qpsol.cc (Fqpsol): Likewise.
+	* quad.cc (Fquad): Likewise.
+
 Thu Mar  6 20:07:24 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* sighandlers.cc (my_friendly_exit, octave_new_handler,
 	sigfpe_handler, sigpipe_handler): Don't all error() or warning().
 
 	* pager.cc (pager_death_handler): Don't try to clear pager, just
 	print message to cerr.
 	(do_sync): If the status of the pager is bad or it looks like it
diff --git a/src/dassl.cc b/src/dassl.cc
--- a/src/dassl.cc
+++ b/src/dassl.cc
@@ -121,17 +121,21 @@ where x, xdot, and res are vectors, and 
   int nargin = args.length ();
 
   if (nargin < 4 || nargin > 5)
     {
       print_usage ("dassl");
       return retval;
     }
 
-  dassl_fcn = is_valid_function (args(0), "dassl", 1);
+  dassl_fcn = extract_function
+    (args(0), "dassl", "__dassl_fcn__",
+     "function res = __dassl_fcn__ (x, xdot, t) res = ",
+     "; endfunction");
+
   if (! dassl_fcn)
     return retval;
 
   ColumnVector state = args(1).vector_value ();
 
   if (error_state)
     {
       error ("dassl: expecting state vector as second argument");
@@ -295,26 +299,32 @@ set_dassl_option (const string& keyword,
     }
 
   warning ("dassl_options: no match for `%s'", keyword.c_str ());
 }
 
 static octave_value_list
 show_dassl_option (const string& keyword)
 {
-  octave_value_list retval;
+  octave_value retval;
 
   DASSL_OPTIONS *list = dassl_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
-	  return (dassl_opts.*list->d_get_fcn) ();
+	  double val = (dassl_opts.*list->d_get_fcn) ();
+	  if (val < 0.0)
+	    retval = "computed automatically";
+	  else
+	    retval = val;
+
+	  return retval;
 	}
       list++;
     }
 
   warning ("dassl_options: no match for `%s'", keyword.c_str ());
 
   return retval;
 }
diff --git a/src/fsolve.cc b/src/fsolve.cc
--- a/src/fsolve.cc
+++ b/src/fsolve.cc
@@ -138,17 +138,19 @@ where y and x are vectors.")
   int nargin = args.length ();
 
   if (nargin != 2 || nargout > 3)
     {
       print_usage ("fsolve");
       return retval;
     }
 
-  fsolve_fcn = is_valid_function (args(0), "fsolve", 1);
+  fsolve_fcn = extract_function (args(0), "fsolve", "__fsolve_fcn__",
+				"function y = __fsolve_fcn__ (x) y = ",
+				"; endfunction");
   if (! fsolve_fcn)
     return retval;
 
   ColumnVector x = args(1).vector_value ();
 
   if (error_state)
     {
       error ("fsolve: expecting vector as second argument");
@@ -256,26 +258,32 @@ set_fsolve_option (const string& keyword
     }
 
   warning ("fsolve_options: no match for `%s'", keyword.c_str ());
 }
 
 static octave_value_list
 show_fsolve_option (const string& keyword)
 {
-  octave_value_list retval;
+  octave_value retval;
 
   NLEQN_OPTIONS *list = fsolve_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
-	  return (fsolve_opts.*list->d_get_fcn) ();
+	  double val = (fsolve_opts.*list->d_get_fcn) ();
+	  if (val < 0.0)
+	    retval = "computed automatically";
+	  else
+	    retval = val;
+
+	  return retval;
 	}
       list++;
     }
 
   warning ("fsolve_options: no match for `%s'", keyword.c_str ());
 
   return retval;
 }
diff --git a/src/lsode.cc b/src/lsode.cc
--- a/src/lsode.cc
+++ b/src/lsode.cc
@@ -53,17 +53,17 @@ lsode_user_function (const ColumnVector&
   int nstates = x.capacity ();
 
   octave_value_list args;
   args(1) = t;
 
   if (nstates > 1)
     {
       Matrix m (nstates, 1);
-      for (int i = 0; i < nstates; i++)
+     for (int i = 0; i < nstates; i++)
 	m (i, 0) = x (i);
       octave_value state (m);
       args(0) = state;
     }
   else
     {
       double d = x (0);
       octave_value state (d);
@@ -109,17 +109,21 @@ where xdot and x are vectors and t is a 
   int nargin = args.length ();
 
   if (nargin < 3 || nargin > 4 || nargout > 1)
     {
       print_usage ("lsode");
       return retval;
     }
 
-  lsode_fcn = is_valid_function (args(0), "lsode", 1);
+  lsode_fcn = extract_function
+    (args(0), "lsode", "__lsode_fcn__",
+     "function xdot = __lsode_fcn__ (x, t) xdot = ",
+     "; endfunction");
+
   if (! lsode_fcn)
     return retval;
 
   ColumnVector state = args(1).vector_value ();
 
   if (error_state)
     {
       error ("lsode: expecting state vector as second argument");
@@ -275,26 +279,32 @@ set_lsode_option (const string& keyword,
     }
 
   warning ("lsode_options: no match for `%s'", keyword.c_str ());
 }
 
 static octave_value_list
 show_lsode_option (const string& keyword)
 {
-  octave_value_list retval;
+  octave_value retval;
 
   LSODE_OPTIONS *list = lsode_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
-	  return (lsode_opts.*list->d_get_fcn) ();
+	  double val = (lsode_opts.*list->d_get_fcn) ();
+	  if (val < 0.0)
+	    retval = "computed automatically";
+	  else
+	    retval = val;
+
+	  return retval;
 	}
       list++;
     }
 
   warning ("lsode_options: no match for `%s'", keyword.c_str ());
 
   return retval;
 }
diff --git a/src/npsol.cc b/src/npsol.cc
--- a/src/npsol.cc
+++ b/src/npsol.cc
@@ -300,17 +300,21 @@ Handle all of the following:
   ColumnVector x = args(0).vector_value ();
 
   if (error_state || x.capacity () == 0)
     {
       error ("npsol: expecting vector as first argument");
       return retval;
     }
 
-  npsol_objective = is_valid_function (args(1), "npsol", 1);
+  npsol_objective = extract_function
+    (args(1), "npsol", "__npsol_obj__",
+     "function phi = __npsol_obj__ (x) phi = ",
+     "; endfunction");
+
   if (! npsol_objective)
     return retval;
 
   Objective func (npsol_objective_function);
 
   ColumnVector soln;
 
   Bounds bounds;
@@ -357,17 +361,20 @@ Handle all of the following:
       nlp.set_options (npsol_opts);
       soln = nlp.minimize (objf, inform, lambda);
 
       goto solved;
     }
 
   npsol_constraints = 0;
   if (nargin == 5 || nargin == 7 || nargin == 8 || nargin == 10)
-    npsol_constraints = is_valid_function (args(nargin-2), "npsol", 0);
+    npsol_constraints = extract_function
+      (args(nargin-2), "npsol", "__npsol_constr__",
+       "function y = __npsol_constr__ (x) y = ",
+       "; endfunction");
 
   if (nargin == 7 || nargin == 5)
     {
       if (! npsol_constraints)
 	{
 	  ColumnVector lub = args(nargin-1).vector_value ();
 	  ColumnVector llb = args(nargin-3).vector_value ();
 
@@ -740,29 +747,43 @@ set_npsol_option (const string& keyword,
     }
 
   warning ("npsol_options: no match for `%s'", keyword.c_str ());
 }
 
 static octave_value_list
 show_npsol_option (const string& keyword)
 {
-  octave_value_list retval;
+  octave_value retval;
 
   NPSOL_OPTIONS *list = npsol_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
 	  if (list->d_get_fcn)
-	    return (npsol_opts.*list->d_get_fcn) ();
+	    {
+	      double val = (npsol_opts.*list->d_get_fcn) ();
+	      if (val < 0.0)
+		retval = "computed automatically";
+	      else
+		retval = val;
+	    }
 	  else
-	    return (double) (npsol_opts.*list->i_get_fcn) ();
+	    {
+	      int val = (npsol_opts.*list->i_get_fcn) ();
+	      if (val < 0)
+		retval = "depends on problem size";
+	      else
+		retval = val;
+	    }
+
+	  return retval;
 	}
       list++;
     }
 
   warning ("npsol_options: no match for `%s'", keyword.c_str ());
 
   return retval;
 }
diff --git a/src/qpsol.cc b/src/qpsol.cc
--- a/src/qpsol.cc
+++ b/src/qpsol.cc
@@ -381,29 +381,43 @@ set_qpsol_option (const string& keyword,
     }
 
   warning ("qpsol_options: no match for `%s'", keyword.c_str ());
 }
 
 static octave_value_list
 show_qpsol_option (const string& keyword)
 {
-  octave_value_list retval;
+  octave_value retval;
 
   QPSOL_OPTIONS *list = qpsol_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
 	  if (list->d_get_fcn)
-	    return (qpsol_opts.*list->d_get_fcn) ();
+	    {
+	      double val = (qpsol_opts.*list->d_get_fcn) ();
+	      if (val < 0.0)
+		retval = "computed automatically";
+	      else
+		retval = val;
+	    }
 	  else
-	    return (double) (qpsol_opts.*list->i_get_fcn) ();
+	    {
+	      int val = (qpsol_opts.*list->i_get_fcn) ();
+	      if (val < 0)
+		retval = "depends on problem size";
+	      else
+		retval = val;
+	    }
+
+	  return retval;
 	}
       list++;
     }
 
   warning ("qpsol_options: no match for `%s'", keyword.c_str ());
 
   return retval;
 }
diff --git a/src/quad.cc b/src/quad.cc
--- a/src/quad.cc
+++ b/src/quad.cc
@@ -115,17 +115,19 @@ integrand is singular.")
   int nargin = args.length ();
 
   if (nargin < 3 || nargin > 5 || nargout > 4)
     {
       print_usage ("quad");
       return retval;
     }
 
-  quad_fcn = is_valid_function (args(0), "quad", 1);
+  quad_fcn = extract_function (args(0), "quad", "__quad_fcn__",
+			       "function y = __quad_fcn__ (x) y = ",
+			       "; endfunction");
   if (! quad_fcn)
     return retval;
 
   double a = args(1).double_value ();
 
   if (error_state)
     {
       error ("quad: expecting second argument to be a scalar");
@@ -332,17 +334,17 @@ set_quad_option (const string& keyword, 
     }
 
   warning ("quad_options: no match for `%s'", keyword.c_str ());
 }
 
 static octave_value_list
 show_quad_option (const string& keyword)
 {
-  octave_value_list retval;
+  octave_value retval;
 
   QUAD_OPTIONS *list = quad_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
