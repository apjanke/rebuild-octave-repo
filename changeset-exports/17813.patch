# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1383200747 14400
#      Thu Oct 31 02:25:47 2013 -0400
# Node ID 0a887758d1ccaf78fd32ca4670fb7ac937955ac6
# Parent  fffd0c0ca2dc99d8ebc0ecb43b923104522b4dc7
fix compilation of main.cc on Windows

* main.in.cc: Do use ifdefs.  We can't compile some of this code on
Windows systems.  Correct test for Cygwin.

diff --git a/src/main.in.cc b/src/main.in.cc
--- a/src/main.in.cc
+++ b/src/main.in.cc
@@ -34,24 +34,18 @@ along with Octave; see the file COPYING.
 
 #include <cstdlib>
 #include <cstring>
 
 #include <algorithm>
 #include <iostream>
 #include <string>
 
-// From gnulib, so OK for Windows too.
 #include <sys/types.h>
 #include <unistd.h>
-#include <fcntl.h>
-
-// This is a liboctave header, but it doesn't include any other Octave
-// headers or declare any functions that are defined in liboctave.
-#include "syswait.h"
 
 #if defined (__WIN32__) && ! defined (_POSIX_VERSION)
 
 #define WIN32_LEAN_AND_MEAN
 #include <tlhelp32.h>
 
 static std::string
 w32_get_octave_home (void)
@@ -103,19 +97,24 @@ w32_get_octave_home (void)
         retval = bin_dir.substr (0, pos);
     }
 
   return retval;
 }
 
 #endif
 
-#if ! defined (__WIN32__) && ! defined (__CYGWIN__)
+#if ! defined (__WIN32__) || defined (__CYGWIN__)
 
 #include <signal.h>
+#include <fcntl.h>
+
+// This is a liboctave header, but it doesn't include any other Octave
+// headers or declare any functions that are defined in liboctave.
+#include "syswait.h"
 
 typedef void sig_handler (int);
 
 // Forward signals to the GUI process.
 
 static pid_t gui_pid = 0;
 
 static void
@@ -136,22 +135,19 @@ octave_set_signal_handler (int sig, sig_
   gnulib::sigemptyset (&act.sa_mask);
   gnulib::sigemptyset (&oact.sa_mask);
 
   gnulib::sigaction (sig, &act, &oact);
 
   return oact.sa_handler;
 }
 
-#endif
-
 static void
 install_signal_handlers (void)
 {
-#if ! defined (__WIN32__) && ! defined (__CYGWIN__)
 
 #ifdef SIGINT
   octave_set_signal_handler (SIGINT, gui_driver_sig_handler);
 #endif
 
 #ifdef SIGBREAK
   octave_set_signal_handler (SIGBREAK, gui_driver_sig_handler);
 #endif
@@ -258,47 +254,43 @@ install_signal_handlers (void)
 #ifdef SIGXCPU
   octave_set_signal_handler (SIGXCPU, gui_driver_sig_handler);
 #endif
 
 #ifdef SIGXFSZ
   octave_set_signal_handler (SIGXFSZ, gui_driver_sig_handler);
 #endif
 
-#endif
 }
 
-
 static bool
 have_controlling_terminal (void)
 {
   int retval = false;
 
-#if ! defined (__WIN32__) && ! defined (__CYGWIN__)
-
 #if defined (HAVE_CTERMID)
   const char *ctty = ctermid (0);
 #else
   const char *ctty = "/dev/tty";
 #endif
 
   int fd = gnulib::open (ctty, O_RDWR, 0);
 
   if (fd >= 0)
     {
       gnulib::close (fd);
 
       retval = true;
     }
 
-#endif
-
   return retval;
 }
 
+#endif
+
 #ifndef OCTAVE_BINDIR
 #define OCTAVE_BINDIR %OCTAVE_BINDIR%
 #endif
 
 #ifndef OCTAVE_PREFIX
 #define OCTAVE_PREFIX %OCTAVE_PREFIX%
 #endif
 
@@ -393,64 +385,67 @@ strsave (const char *s)
   return tmp;
 }
 
 int
 main (int argc, char **argv)
 {
   int retval = 0;
 
-#if defined (HAVE_OCTAVE_GUI)
+#if (defined (HAVE_OCTAVE_GUI) \
+     && (! defined (__WIN32__) || defined (__CYGWIN__)))
   bool start_gui = true;
   bool gui_libs = true;
-#else
-  bool start_gui = false;
-  bool gui_libs = false;
 #endif
 
   std::string octave_bindir = get_octave_bindir ();
 
-  std::string file = octave_bindir + dir_sep_char
-    + (gui_libs ? "octave-gui" : "octave-cli");
+  std::string file = octave_bindir + dir_sep_char + "octave-gui";
 
   char **new_argv = new char * [argc + 1];
 
   int k = 0;
   new_argv[k++] = strsave ("octave");
 
   for (int i = 1; i < argc; i++)
     {
       if (! strcmp (argv[i], "--no-gui-libs"))
         {
           // Run the version of Octave that is not linked with any GUI
           // libraries.  It may not be possible to do plotting or any
           // ui* calls, but it will be a little faster to start and
           // require less memory.  Don't pass the --no-gui-libs option
           // on as that option is not recognized by Octave.
 
+#if ! defined (__WIN32__) || defined (__CYGWIN__)
           gui_libs = false;
+#endif
           file = octave_bindir + dir_sep_char + "octave-cli";
         }
       else if (! strcmp (argv[i], "--no-gui"))
         {
           // If we see this option, then we can just exec octave; we
           // don't have to create a child process and wait for it to
           // exit.  But do exec "octave", not "octave-cli", because even
           // if the --no-gui option is given, we may be asked to do some
           // plotting or ui* calls.
 
+#if ! defined (__WIN32__) || defined (__CYGWIN__)
           start_gui = false;
+#endif
           new_argv[k++] = argv[i];
         }
       else
         new_argv[k++] = argv[i];
     }
 
   new_argv[k] = 0;
 
+#if ! defined (__WIN32__) || defined (__CYGWIN__)
+
   if (gui_libs && start_gui && have_controlling_terminal ())
     {
       install_signal_handlers ();
 
       gui_pid = fork ();
 
       if (gui_pid < 0)
         {
@@ -489,16 +484,22 @@ main (int argc, char **argv)
                   break;
                 }
             }
         }
     }
   else
     retval = octave_exec (file, new_argv);
 
+#else
+
+  retval = octave_exec (file, new_argv);
+
+#endif
+
   return retval;
 }
 
 /*!
 @mainpage Source code documentation for GNU Octave
 
 GNU Octave is a high-level language, primarily intended for numerical
 computations.  It provides a convenient interactive command line
