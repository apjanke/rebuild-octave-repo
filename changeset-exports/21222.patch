# HG changeset patch
# User Colin Macdonald <cbm@m.fsf.org>
# Date 1454992529 28800
#      Mon Feb 08 20:35:29 2016 -0800
# Branch stable
# Node ID 732ec49d1ec5c5dd5332f8d2364f010514b4c5c2
# Parent  5cff92d32ee78dae4177f9d9fe644b275049d622
Fix regressions caused by ismatrix definition change (partial fix bug #47036).

* gray2ind.m: Simplify input checks.  Add BIST test.

* inpolygon.m: Replace ismatrix with isnumeric in input validation.
Add BIST tests.  Update copyright date.

* __stem__.m: Validate single input is a not an N-D array.

* stem.m: Add BIST test for an N-D array input.

diff --git a/scripts/geometry/inpolygon.m b/scripts/geometry/inpolygon.m
--- a/scripts/geometry/inpolygon.m
+++ b/scripts/geometry/inpolygon.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2006-2015 Frederick (Rick) A Niles
+## Copyright (C) 2006-2016 Frederick (Rick) A Niles
 ##               and SÃ¸ren Hauberg
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
@@ -43,19 +43,19 @@
 ## and is credited to Randolph Franklin.
 
 function [in, on] = inpolygon (x, y, xv, yv)
 
   if (nargin != 4)
     print_usage ();
   endif
 
-  if (! (isreal (x) && isreal (y) && ismatrix (y) && ismatrix (y)
+  if (! (isreal (x) && isreal (y) && isnumeric (x) && isnumeric (y)
          && size_equal (x, y)))
-    error ("inpolygon: X and Y must be real matrices of the same size");
+    error ("inpolygon: X and Y must be real arrays of the same size");
   elseif (! (isreal (xv) && isreal (yv) && isvector (xv) && isvector (yv)
              && size_equal (xv, yv)))
     error ("inpolygon: XV and YV must be real vectors of the same size");
   endif
 
   npol = length (xv);
 
   in = on = false (size (x));
@@ -135,20 +135,37 @@ endfunction
 %! disp ("Green points are inside polygon, magenta are outside,");
 %! disp ("and blue are on boundary.");
 
 %!test
 %! [in, on] = inpolygon ([1, 0, 2], [1, 0, 0], [-1, -1, 1, 1], [-1, 1, 1, -1]);
 %! assert (in, [true, true, false]);
 %! assert (on, [true, false, false]);
 
+## 3D array input
+%!test
+%! x = zeros (2, 2, 2);
+%! x(1, 1, 1) = 1;
+%! x(2, 2, 2) = 2;
+%! y = zeros (2, 2, 2);
+%! y(1, 1, 1) = 1;
+%! y(2, 2, 2) = -1;
+%! [in, on] = inpolygon (x, y, [-1, -1, 1, 1], [-1, 1, 1, -1]);
+%! IN = true (2, 2, 2);
+%! IN(2, 2, 2) = false;
+%! ON = false (2, 2, 2);
+%! ON(1, 1, 1) = true;
+%! assert (in, IN);
+%! assert (on, ON);
+
 ## Test input validation
 %!error inpolygon ()
 %!error inpolygon (1, 2)
 %!error inpolygon (1, 2, 3)
 %!error inpolygon (1, 2, 3, 4, 5)
-%!error <X and Y must be real matrices> inpolygon (1i, 1, [3, 4], [5, 6])
-%!error <X and Y must be real matrices> inpolygon (1, {1}, [3, 4], [5, 6])
+%!error <X and Y must be real> inpolygon (1i, 1, [3, 4], [5, 6])
+%!error <X and Y must be real> inpolygon (1, {1}, [3, 4], [5, 6])
 %!error <X and Y must be .* the same size> inpolygon (1, [1,2], [3, 4], [5, 6])
+%!error <X and Y must be .* the same size> inpolygon (1, ones (1,1,2), [3, 4], [5, 6])
 %!error <XV and YV must be real vectors> inpolygon (1, 1, [3i, 4], [5, 6])
 %!error <XV and YV must be real vectors> inpolygon (1, 1, [3, 4], {5, 6})
 %!error <XV and YV must .* the same size> inpolygon ([1,2], [3, 4], [5, 6], 1)
 
diff --git a/scripts/image/gray2ind.m b/scripts/image/gray2ind.m
--- a/scripts/image/gray2ind.m
+++ b/scripts/image/gray2ind.m
@@ -1,9 +1,9 @@
-## Copyright (C) 1994-2015 John W. Eaton
+## Copyright (C) 1994-2016 John W. Eaton
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -36,22 +36,20 @@
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
 function [I, map] = gray2ind (I, n = 64)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
-  elseif (! isreal (I) || issparse (I))
+  elseif (! isreal (I) || issparse (I) || ! ismatrix(I))
     error ("gray2ind: I must be a grayscale or binary image");
   elseif (! isscalar (n) || n < 1 || n > 65536)
     error ("gray2ind: N must be a positive integer in the range [1, 65536]");
-  elseif (! ismatrix (I) || ndims (I) < 2)
-    error ("gray2ind: I must be a grayscale or binary image");
   endif
 
   ## default n is different if image is logical
   if (nargin == 1 && islogical (I))
     n = 2;
   endif
 
   cls = class (I);
@@ -105,15 +103,16 @@ endfunction
 %! assert (class (gray2ind ([0.0 0.5 1.0], 257)), "uint16")
 
 ## Test input validation
 %!error gray2ind ()
 %!error gray2ind (1,2,3)
 %!error <I must be a grayscale or binary image> gray2ind ({1})
 %!error <I must be a grayscale or binary image> gray2ind ([1+i])
 %!error <I must be a grayscale or binary image> gray2ind (sparse ([1]))
+%!error <I must be a grayscale or binary image> gray2ind (ones (2,2,3))
 %!error <N must be a positive integer> gray2ind (1, ones (2,2))
 %!error <N must be a positive integer> gray2ind (1, 0)
 %!error <N must be a positive integer> gray2ind (1, 65537)
 %!error <invalid data type> gray2ind (uint32 (1))
 %!error <values between 0 and 1> gray2ind (-1)
 %!error <values between 0 and 1> gray2ind (2)
 
diff --git a/scripts/plot/draw/private/__stem__.m b/scripts/plot/draw/private/__stem__.m
--- a/scripts/plot/draw/private/__stem__.m
+++ b/scripts/plot/draw/private/__stem__.m
@@ -245,16 +245,18 @@ function [x, y, z, dofill, lc, ls, mc, m
       error ("stem3: X, Y, and Z must be numeric");
     endif
   else
     if (isempty (x))
       if (isvector (y))
         x = 1:length (y);
       elseif (ismatrix (y))
         x = 1:rows (y);
+      else
+        error ("stem: Y must be a vector or 2-D array");
       endif
     endif
     if (! (isnumeric (x) || islogical (x))
         || ! (isnumeric (y) || islogical (y)))
       error ("stem: X and Y must be numeric");
     endif
   endif
 
diff --git a/scripts/plot/draw/stem.m b/scripts/plot/draw/stem.m
--- a/scripts/plot/draw/stem.m
+++ b/scripts/plot/draw/stem.m
@@ -199,32 +199,34 @@ endfunction
 %! set (gca (), 'xlim', [1, N-1], 'ylim', [0, 1]);
 %! title ('stem plot data modified through hggroup handle');
 %! for k=2:N
 %!   set (hs, 'xdata', x(1:k), 'ydata', y(1:k))
 %!   drawnow ();
 %!   pause (0.2);
 %! end
 
-%!error stem ()
-%!error <can not define Z for 2-D stem plot> stem (1,2,3)
-%!error <X and Y must be numeric> stem ({1})
-%!error <X and Y must be numeric> stem (1, {1})
-%!error <inconsistent sizes for X and Y> stem (1:2, 1:3)
-%!error <inconsistent sizes for X and Y> stem (1:2, ones (3,3))
-%!error <inconsistent sizes for X and Y> stem (ones (2,2), ones (3,3))
-%!error <No value specified for property "FOO"> stem (1, "FOO")
-
 %!test
 %! ## stemseries share the same baseline and basevalue
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   h = stem ([1 2; 1.5 2.5], [1 1;2 2]);
 %!   assert (get (h(1), "baseline"), get (h(2), "baseline"))
 %!   bv = 0.3;
 %!   set (h(1), "basevalue", bv)
 %!   assert (get (get (h(1), "baseline"), "basevalue"), bv)
 %!   assert (get (h(1), "basevalue"), bv)
 %!   assert (get (h(2), "basevalue"), bv)
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
+## Test input validation
+%!error stem ()
+%!error <can not define Z for 2-D stem plot> stem (1,2,3)
+%!error <Y must be a vector or 2-D array> stem (ones (2,2,2))
+%!error <X and Y must be numeric> stem ({1})
+%!error <X and Y must be numeric> stem (1, {1})
+%!error <inconsistent sizes for X and Y> stem (1:2, 1:3)
+%!error <inconsistent sizes for X and Y> stem (1:2, ones (3,3))
+%!error <inconsistent sizes for X and Y> stem (ones (2,2), ones (3,3))
+%!error <No value specified for property "FOO"> stem (1, "FOO")
+
