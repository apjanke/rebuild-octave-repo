# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1422569229 18000
#      Thu Jan 29 17:07:09 2015 -0500
# Node ID 61cc00ebac60024d32a6bc7b38f27e7ddad98b9f
# Parent  3da4b083e0b8df8c27191ecbf06ba87503ca8b51
move opengl printing code from __init_fltk__.cc to gl2ps-renderer.cc

* gl2ps-renderer.h, gl2ps-renderer.cc (gl2ps_print): New function.
* __init_fltk__.cc (OpenGL_fltk::print): Use it.

diff --git a/libinterp/corefcn/gl2ps-renderer.cc b/libinterp/corefcn/gl2ps-renderer.cc
--- a/libinterp/corefcn/gl2ps-renderer.cc
+++ b/libinterp/corefcn/gl2ps-renderer.cc
@@ -25,19 +25,21 @@ along with Octave; see the file COPYING.
 #endif
 
 #ifdef HAVE_GL2PS_H
 
 #include <cstdio>
 
 #include "lo-mappers.h"
 #include "oct-locbuf.h"
+#include "unwind-prot.h"
 
 #include "gl2ps-renderer.h"
 #include "gl2ps.h"
+#include "sysdep.h"
 
 void
 glps_renderer::draw (const graphics_object& go, const std::string print_cmd)
 {
   static bool in_draw = false;
   static std::string old_print_cmd;
 
   if (!in_draw)
@@ -261,9 +263,39 @@ glps_renderer::draw_text (const text::pr
   string_vector sv = string_prop.all_strings ();
 
   std::string s = sv.join ("\n");
 
   gl2psTextOpt (s.c_str (), fontname.c_str (), fontsize,
                 alignment_to_mode (halign, valign), props.get_rotation ());
 }
 
+static void
+safe_pclose (FILE *f)
+{
+  if (f)
+    octave_pclose (f);
+}
+
 #endif
+
+void
+gl2ps_print (const graphics_object& fig, const std::string& cmd,
+             const std::string& term)
+{
+#ifdef HAVE_GL2PS_H
+
+  unwind_protect frame;
+
+  FILE *fp = octave_popen (cmd.c_str (), "w");
+
+  frame.add_fcn (safe_pclose, fp);
+
+  glps_renderer rend (fp, term);
+
+  rend.draw (fig, cmd);
+
+#else
+
+  error ("print: printing not available without gl2ps library");
+
+#endif
+}
diff --git a/libinterp/corefcn/gl2ps-renderer.h b/libinterp/corefcn/gl2ps-renderer.h
--- a/libinterp/corefcn/gl2ps-renderer.h
+++ b/libinterp/corefcn/gl2ps-renderer.h
@@ -81,9 +81,13 @@ private:
   FILE *fp;
   caseless_str term;
   double fontsize;
   std::string fontname;
 };
 
 #endif  // HAVE_GL2PS_H
 
+extern OCTINTERP_API void
+gl2ps_print (const graphics_object& fig, const std::string& cmd,
+             const std::string& term);
+
 #endif
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -78,21 +78,19 @@ To initialize:
 #undef Complex
 
 #include "cmd-edit.h"
 #include "lo-ieee.h"
 #include "oct-env.h"
 
 #include "display.h"
 #include "file-ops.h"
-#include "gl-render.h"
 #include "gl2ps-renderer.h"
 #include "graphics.h"
 #include "parse.h"
-#include "sysdep.h"
 #include "toplev.h"
 #include "variables.h"
 
 #define FLTK_GRAPHICS_TOOLKIT_NAME "fltk"
 
 const char* help_text = "\
 Keyboard Shortcuts\n\
 a - autoscale\n\
@@ -128,25 +126,18 @@ public:
   }
 
   bool zoom (void) { return in_zoom; }
   void set_zoom_box (const Matrix& zb) { zoom_box = zb; }
 
   void print (const std::string& cmd, const std::string& term)
   {
     //std::cout << "OpenGL_fltk::print(cmd=" << cmd << ", term=" << term << ") canvas size = " << w () << "x" << h () << std::endl;
-#ifdef HAVE_GL2PS_H
-    FILE *fp;
-    fp = octave_popen (cmd.c_str (), "w");
-    glps_renderer rend (fp, term);
-    rend.draw (gh_manager::get_object (number), cmd);
-    octave_pclose (fp);
-#else
-    error ("fltk: printing not available without gl2ps library");
-#endif
+
+    gl2ps_print (gh_manager::get_object (number), cmd, term);
   }
 
   void resize (int xx, int yy, int ww, int hh)
   {
     Fl_Gl_Window::resize (xx, yy, ww, hh);
   }
 
   bool renumber (double new_number)
