# HG changeset patch
# User jwe
# Date 1113339879 0
#      Tue Apr 12 21:04:39 2005 +0000
# Node ID fe23ec6763b76ad60f1d19373b9a8025b8d3f874
# Parent  b1f1338f7931e72665c3b7a0c70babc01b61ae57
[project @ 2005-04-12 21:04:39 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2005-04-11  John W. Eaton  <jwe@octave.org>
+
+	* lo-specfun.cc: Use F77_XFCN instead of F77_FUNC for calls to
+	fortran code that could end up calling XSTOPX.
+
 2005-04-10  David Bateman  <dbateman@free.fr>
 
 	* Makefile.in: include oct-types in INCLUDES so that it is 
 	installed
 	
 2005-04-08  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in (clean): Use exact filenames instead of *.xxx.
diff --git a/liboctave/lo-specfun.cc b/liboctave/lo-specfun.cc
--- a/liboctave/lo-specfun.cc
+++ b/liboctave/lo-specfun.cc
@@ -105,80 +105,80 @@ extern "C"
   F77_FUNC (dlgams, DLGAMS) (const double&, double&, double&);
 }
 
 #if !defined (HAVE_ACOSH)
 double
 acosh (double x)
 {
   double retval;
-  F77_FUNC (xdacosh, XDACOSH) (x, retval);
+  F77_XFCN (xdacosh, XDACOSH, (x, retval));
   return retval;
 }
 #endif
 
 #if !defined (HAVE_ASINH)
 double
 asinh (double x)
 {
   double retval;
-  F77_FUNC (xdasinh, XDASINH) (x, retval);
+  F77_XFCN (xdasinh, XDASINH, (x, retval));
   return retval;
 }
 #endif
 
 #if !defined (HAVE_ATANH)
 double
 atanh (double x)
 {
   double retval;
-  F77_FUNC (xdatanh, XDATANH) (x, retval);
+  F77_XFCN (xdatanh, XDATANH, (x, retval));
   return retval;
 }
 #endif
 
 #if !defined (HAVE_ERF)
 double
 erf (double x)
 {
   double retval;
-  F77_FUNC (xderf, XDERF) (x, retval);
+  F77_XFCN (xderf, XDERF, (x, retval));
   return retval;
 }
 #endif
 
 #if !defined (HAVE_ERFC)
 double
 erfc (double x)
 {
   double retval;
-  F77_FUNC (xderfc, XDERFC) (x, retval);
+  F77_XFCN (xderfc, XDERFC, (x, retval));
   return retval;
 }
 #endif
 
 double
 xgamma (double x)
 {
   double result;
-  F77_FUNC (xdgamma, XDGAMMA) (x, result);
+  F77_XFCN (xdgamma, XDGAMMA, (x, result));
   return result;
 }
 
 double
 xlgamma (double x)
 {
   double result;
   double sgngam;
 
   if (x < 0)
     (*current_liboctave_error_handler)
       ("xlgamma: argument must be nonnegative");
 
-  F77_FUNC (dlgams, DLGAMS) (x, result, sgngam);
+  F77_XFCN (dlgams, DLGAMS, (x, result, sgngam));
 
   return result;
 }
 
 static inline Complex
 zbesj (const Complex& z, double alpha, int kode, octave_idx_type& ierr);
 
 static inline Complex
@@ -1237,17 +1237,17 @@ gammainc (double x, double a, bool& err)
   if (a < 0.0 || x < 0.0)
     {
       (*current_liboctave_error_handler)
 	("gammainc: A and X must be non-negative");
 
       err = true;
     }
   else
-    F77_FUNC (xgammainc, XGAMMAINC) (a, x, retval);
+    F77_XFCN (xgammainc, XGAMMAINC, (a, x, retval));
 
   return retval;
 }
 
 Matrix
 gammainc (double x, const Matrix& a)
 {
   octave_idx_type nr = a.rows ();
