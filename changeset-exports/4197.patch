# HG changeset patch
# User jwe
# Date 1037904985 0
#      Thu Nov 21 18:56:25 2002 +0000
# Node ID 40f76ce7a0514416767c1e63496af1d3463a7b58
# Parent  f874c6c6884532a77b67aeb4f1ad87335c9373a6
[project @ 2002-11-21 18:56:25 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2002-11-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-map.h (Octave_map::operator[]): New const version.
+	* oct-map.cc (equiv_keys): New function.
+	(assign (const idx_vector&, const Octave_map&)): New function.
+	* ov-struct.cc (octave_struct::subsasgn): Use it.
+
 2002-11-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* version.h (OCTAVE_VERSION): Now 2.1.40.
 
 	* p-b-b.cc, op-bm-bm.cc, op-chm.cc, op-cm-cm.cc, op-cm-cs.cc,
 	op-cm-m.cc, op-cm-s.cc, op-cs-cm.cc, op-cs-cs.cc, op-cs-m.cc,
 	op-cs-s.cc, op-fil-b.cc, op-fil-bm.cc, op-fil-cm.cc, op-fil-cs.cc,
 	op-fil-lis.cc, op-fil-m.cc, op-fil-rec.cc, op-fil-s.cc,
diff --git a/src/DLD-FUNCTIONS/fsolve.cc b/src/DLD-FUNCTIONS/fsolve.cc
--- a/src/DLD-FUNCTIONS/fsolve.cc
+++ b/src/DLD-FUNCTIONS/fsolve.cc
@@ -224,19 +224,19 @@ the function @math{f} described above, a
 a function of the form @code{j (@var{x})} to compute the Jacobian\n\
 matrix with elements\n\
 @tex\n\
 $$ J = {\\partial f_i \\over \\partial x_j} $$\n\
 @end tex\n\
 @ifinfo\n\
 \n\
 @example\n\
-      df_i
-jac = ----
-      dx_j
+           df_i\n\
+jac(i,j) = ----\n\
+           dx_j\n\
 @end example\n\
 @end ifinfo\n\
 \n\
 You can use the function @code{fsolve_options} to set optional\n\
 parameters for @code{fsolve}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -29,16 +29,24 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "error.h"
 #include "str-vec.h"
 
 #include "oct-map.h"
 #include "utils.h"
 
+octave_value_list
+Octave_map::operator [] (const std::string& key) const
+{
+  Pix p = map.seek (key);
+
+  return p ? map.contents (p) : octave_value_list ();
+}
+
 string_vector
 Octave_map::keys (void) const
 {
   int len = length ();
 
   string_vector names (len);
 
   int i = 0;
@@ -55,16 +63,68 @@ Octave_map::array_length (void) const
     {
       Pix p = first ();
       array_len = contents(p).length ();
     }
 
   return array_len;
 }
 
+static string_vector
+equiv_keys (const Octave_map& a, const Octave_map& b)
+{
+  string_vector retval;
+
+  string_vector a_keys = a.keys().qsort ();
+  string_vector b_keys = b.keys().qsort ();
+
+  int a_len = a_keys.length ();
+  int b_len = b_keys.length ();
+
+  if (a_len == b_len)
+    {
+      for (int i = 0; i < a_len; i++)
+	{
+	  if (a_keys[i] != b_keys[i])
+	    return retval;
+	}
+
+      retval = a_keys;
+    }
+  
+  return retval;
+}
+
+Octave_map&
+Octave_map::assign (const idx_vector& idx, const Octave_map& rhs)
+{
+  string_vector t_keys = empty () ? rhs.keys () : equiv_keys (*this, rhs);
+
+  if (! t_keys.empty ())
+    {
+      int len = t_keys.length ();
+
+      for (int i = 0; i < len; i++)
+	{
+	  std::string key = t_keys[i];
+
+	  octave_value_list t_rhs = rhs[key];
+
+	  assign (idx, key, t_rhs);
+
+	  if (error_state)
+	    break;
+	}
+    }
+  else
+    error ("field name mismatch in structure assignment");
+
+  return *this;
+}
+
 Octave_map&
 Octave_map::assign (const idx_vector& idx, const std::string& key,
 		    const octave_value_list& rhs)
 {
   octave_value_list tmp = map[key];
 
   tmp.assign (idx, rhs);
 
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -62,16 +62,18 @@ Octave_map
 
   // This is the number of keys.
   int length (void) const { return map.length (); }
 
   int empty (void) const { return map.empty (); }
 
   octave_value_list& operator [] (const std::string& key) { return map[key]; }
 
+  octave_value_list operator [] (const std::string& key) const;
+
   void del (const std::string& key) { map.del (key); }
 
   Pix first (void) const { return map.first (); }
   void next (Pix& i) const { map.next (i); }
 
   std::string key (Pix p) const { return map.key (p); }
 
   octave_value_list& contents (Pix p) const { return map.contents (p); }
@@ -81,16 +83,18 @@ Octave_map
   int contains (const std::string& key) const { return map.contains (key); }
 
   void clear (void) { map.clear (); }
 
   string_vector keys (void) const;
 
   int array_length () const;
 
+  Octave_map& assign (const idx_vector& idx, const Octave_map& rhs);
+
   Octave_map& assign (const idx_vector& idx, const std::string& key,
 		      const octave_value_list& rhs);
 
   Octave_map& assign (const std::string& key, const octave_value_list& rhs);
 
   Octave_map index (idx_vector& idx);
 
 private:
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -326,17 +326,38 @@ octave_struct::subsasgn (const std::stri
 		      }
 		    else
 		      gripe_invalid_index_for_assignment ();
 		  }
 		else
 		  gripe_failed_assignment ();
 	      }
 	    else
-	      gripe_invalid_index_for_assignment ();
+	      {
+		octave_value_list t_idx = idx.front ();
+
+		if (t_idx.length () == 1)
+		  {
+		    idx_vector i = t_idx(0).index_vector ();
+
+		    Octave_map rhs_map = t_rhs.map_value ();
+
+		    if (! error_state)
+		      {
+			map.assign (i, rhs_map);
+
+			if (! error_state)
+			  retval = octave_value (this, count + 1);
+			else
+			  gripe_failed_assignment ();
+		      }
+		    else
+		      error ("invalid structure assignment");
+		  }
+	      }
 	  }
 	  break;
 
 	case '.':
 	  {
 	    octave_value_list key_idx = idx.front ();
 
 	    assert (key_idx.length () == 1);
