# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1492093723 14400
#      Thu Apr 13 10:28:43 2017 -0400
# Branch stable
# Node ID 7ca04e85f9e3194b721c4a7e1371d61105617955
# Parent  43f549ac6dac00105f604f7f779c6c7745c7fe32
maint: Strip trailing whitespace from source files.

diff --git a/doc/interpreter/genpropdoc.m b/doc/interpreter/genpropdoc.m
--- a/doc/interpreter/genpropdoc.m
+++ b/doc/interpreter/genpropdoc.m
@@ -456,17 +456,17 @@ units (ex: @code{\"inches\"}) and @code{
         s.doc = "Specify the position and size of the figure canvas.  \
 The four elements of the vector are the coordinates of the lower left corner \
 and width and height of the figure.  \
 @xref{XREFfigureunits, , @w{units property}}.";
         s.valid = valid_4elvec;
 
       case "renderer"
         s.doc = doc_unused;
-        
+
       case "renderermode"
         s.doc = doc_unused;
 
       case "resize"
         s.doc = doc_unused;
 
       case "resizefcn"
         s.doc = "__prop__ is deprecated.  Use @code{sizechangedfcn} instead.";
@@ -690,17 +690,17 @@ objects (ticks, labels, etc.@: covered b
         s.valid = "scalar in the range (0, 1)";
 
       case "nextplot"
         s.doc = "__prop__ is used by high level plotting functions to \
 decide what to do with graphics objects already present in the axes.  \
 @xref{XREFnewplot, , @w{newplot function}}.  The state of __prop__ \
 is typically controlled using the @code{hold} function.  \
 @xref{XREFhold, , @w{hold function}}.";
-        
+
       case "outerposition"
         s.doc = "Specify the position of the plot including titles, \
 axes, and legend.  The four elements of the vector are the \
 coordinates of the lower left corner and width and height of the \
 plot, in units normalized to the width and height of the plot \
 window.  For example, @code{[0.2, 0.3, 0.4, 0.5]} sets the lower \
 left corner of the axes at @math{(0.2, 0.3)} and the width and \
 height to be 0.4 and 0.5 respectively.  \
@@ -708,17 +708,17 @@ height to be 0.4 and 0.5 respectively.  
         s.valid = valid_4elvec;
 
       case "pickableparts"
         s.doc = doc_unused;
 
       case "plotboxaspectratio"
         s.doc = "@xref{XREFpbaspect, , pbaspect function}.  \
 __modemsg__.";
-        
+
       case "plotboxaspectratiomode"
       case "position"
         s.doc = "Specify the position of the plot excluding titles, \
 axes, and legend.  The four elements of the vector are the \
 coordinates of the lower left corner and width and height of the \
 plot, in units normalized to the width and height of the plot \
 window.  For example, @code{[0.2, 0.3, 0.4, 0.5]} sets the lower \
 left corner of the axes at @math{(0.2, 0.3)} and the width and \
@@ -746,52 +746,52 @@ box or \"out\".  __modemsg__.";
         s.doc = "Two-element vector @code{[2Dlen 3Dlen]} specifying the \
 length of the tickmarks relative to the longest visible axis.";
         s.valid = valid_2elvec;
 
       case "tightinset"
         s.doc = "Size of the @code{[left bottom right top]} margins \
 around the axes that enclose labels and title annotations.";
         s.valid = valid_4elvec;
-        
+
       case "title"
         s.doc = "Graphics handle of the title text object.";
         s.valid = valid_handle;
 
       case "titlefontsizemultiplier"
         s.doc = "Ratio between the title fontsize and the tick \
 label fontsize";
         s.valid = "positive scalar";
 
       case "titlefontweight"
         s.doc = "Control variant of base font used for the axes title.";
 
       case "units"
         s.doc = "Units used to interpret the @qcode{\"position\"}, \
-@qcode{\"outerposition\"}, and @qcode{\"tightinset\"} properties."; 
+@qcode{\"outerposition\"}, and @qcode{\"tightinset\"} properties.";
 
       case "view"
         s.doc = "Two-element vector @code{[azimuth elevation]} specifying \
 the viewpoint for three-dimensional plots";
         s.valid = valid_2elvec;
 
       case "xaxislocation"
         s.doc = "Control the x axis location.";
-        
+
       case "xcolor"
         s.doc = "Color of the x-axis.  @xref{Colors, , colorspec}.  \
 __modemsg__.";
         s.valid = packopt ({markdef(valid_color), "@qcode{\"none\"}"});
 
       case "xcolormode"
 
       case "xdir"
         s.doc = "Direction of the x axis: @qcode{\"normal\"} is left \
 to right.";
-        
+
       case "xgrid"
         s.doc = "Control whether major x grid lines are displayed.";
 
       case "xlabel"
         s.doc = "Graphics handle of the x label text object.";
         s.valid = valid_handle;
 
       case "xlim"
@@ -799,34 +799,34 @@ to right.";
 for the x-axis.  __modemsg__.   @xref{XREFxlim, , @w{xlim function}}.";
         s.valid = valid_2elvec;
 
       case "xlimmode"
       case "xminorgrid"
         s.doc = "Control whether minor x grid lines are displayed.";
 
       case "xminortick"
-      case "xscale"        
+      case "xscale"
       case "xtick"
         s.doc = "Position of x tick marks.  __modemsg__.";
         s.valid = "vector";
         s.printdefault = false;
 
       case "xticklabel"
         s.doc = "Labels of x tick marks.  __modemsg__.";
         s.valid = valid_cellstring;
 
       case "xticklabelmode"
       case "xticklabelrotation"
         s.doc = doc_unused;
 
       case "xtickmode"
       case "yaxislocation"
         s.doc = "Control the y-axis location.";
-        
+
       case "ycolor"
         s.doc = "Color of the y-axis.  @xref{Colors, , colorspec}.";
         s.valid = packopt ({markdef(valid_color), "@qcode{\"none\"}"});
 
       case "ycolormode"
 
       case "ydir"
         s.doc = "Direction of the y-axis: @qcode{\"normal\"} is bottom \
@@ -1000,17 +1000,17 @@ z data.";
 
       case "editing"
         s.doc = doc_unused;
 
       case "extent"
         s.doc = "Vector @code{[x0 y0 width height]} indicating the size \
 and location of the text string.";
         s.valid = valid_4elvec;
-        
+
       case "fontangle"
         s.doc = "Control whether the font is italic or normal.  \
 @code{fontangle} is currently unused.";
 
       case "fontname"
         s.doc = "The font used for the text.";
         s.valid = valid_string;
 
diff --git a/libgui/graphics/Canvas.h b/libgui/graphics/Canvas.h
--- a/libgui/graphics/Canvas.h
+++ b/libgui/graphics/Canvas.h
@@ -103,17 +103,17 @@ namespace QtHandles
     void updateCurrentPoint (const graphics_object& fig,
                              const graphics_object& obj, QMouseEvent *event);
     void updateCurrentPoint (const graphics_object& fig,
                              const graphics_object& obj);
 
     void annotation_callback (const octave_value_list& args);
     void select_object (graphics_object obj, QMouseEvent* event,
                         graphics_object &currentObj, graphics_object &axesObj,
-                        bool axes_only = false, 
+                        bool axes_only = false,
                         std::vector<std::string> omit = std::vector<std::string> ());
 
   private:
     graphics_handle m_handle;
     bool m_redrawBlocked;
     MouseMode m_mouseMode;
     bool m_clickMode;              // True: ZoomIn, False: ZoomOut
     QPoint m_mouseAnchor;
diff --git a/libinterp/corefcn/dlmread.cc b/libinterp/corefcn/dlmread.cc
--- a/libinterp/corefcn/dlmread.cc
+++ b/libinterp/corefcn/dlmread.cc
@@ -264,17 +264,17 @@ such as text, are also replaced by the @
         {
           r0 = args(2).idx_type_value ();
           c0 = args(3).idx_type_value ();
         }
 
       if (r0 < 0 || c0 < 0)
         error ("dlmread: left & top must be positive");
 
-      // Short-circuit and return if range is empty 
+      // Short-circuit and return if range is empty
       if (r1 < r0 || c1 < c0)
         return ovl (Matrix (0,0));
     }
 
   octave_idx_type i = 0;
   octave_idx_type j = 0;
   octave_idx_type r = 1;
   octave_idx_type c = 1;
diff --git a/scripts/plot/appearance/datetick.m b/scripts/plot/appearance/datetick.m
--- a/scripts/plot/appearance/datetick.m
+++ b/scripts/plot/appearance/datetick.m
@@ -215,17 +215,17 @@ function __datetick__ (varargin)
                           floor(rangemonth), ...
                           tickdays]);
       else
         sep = __calc_tick_sep__ (minyear, maxyear);
         minyear = sep * floor (minyear / sep);
         maxyear = sep * ceil (maxyear / sep);
         rangeyear = (minyear:sep:maxyear)';
         tickmonth = round (1 + 12*mod (rangeyear, 1));
-        ticks = datenum ([floor(rangeyear), ... 
+        ticks = datenum ([floor(rangeyear), ...
                           tickmonth, ...
                           ones(rows (rangeyear), 1)]);
       endif
     endif
   endif
 
   if (isempty (form))
     r = max (ticks) - min (ticks);
diff --git a/scripts/time/datenum.m b/scripts/time/datenum.m
--- a/scripts/time/datenum.m
+++ b/scripts/time/datenum.m
@@ -160,17 +160,17 @@ function [days, secs] = datenum (year, m
   day += monthstart(mod (month-1,12) + 1) + 60;
 
   ## Treat fractional years, by converting the fraction to days
   if (any (year != fix (year)))
     fracyear = year - floor (year);
     year = floor (year);
     day += fracyear .* (365 + is_leap_year (year+1));
   endif
-  
+
   ## Add number of days to the start of the current year.  Correct
   ## for leap year every 4 years except centuries not divisible by 400.
   day += 365*year + floor (year/4) - floor (year/100) + floor (year/400);
 
   if (do_reshape)
     day = reshape (day, sz_reshape);
   endif
 
