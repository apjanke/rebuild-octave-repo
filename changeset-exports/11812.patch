# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1219169364 14400
#      Tue Aug 19 14:09:24 2008 -0400
# Branch release-3-0-x
# Node ID 1695e4627d2b2c5ba56dfee02d05f923d104263d
# Parent  c51deec2faf19fcbc10a64053b8ae7c4e3e5beee
check for obsolete built-in variable assignment at first execution rather than parse time

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,20 @@
 2008-08-19  Jaroslav Hajek <highegg@gmail.com>
 
+	* pt-assign.h (tree_simple_assignment::first_execution): New
+	member field.
+	(tree_simple_assignment::first_execution): Dtto.
+	* pt-assign.cc (tree_simple_assignment::tree_simple_assignment):
+	Initialize first_execution.
+	(tree_multi_assignment::tree_multi_assignment): Dtto.
+	(tree_simple_assignment::rvalue): Check for obsolete built-in
+	variables only at first execution.
+	(tree_multi_assignment::rvalue): Dtto.
+
 	* DLD-FUNCTIONS/__glpk__.cc (F__glpk__): Checks whether LB and UB are
 	of proper size.
 
 	* oct-obj.cc, oct-obj.h (octave_value_list::make_argv): 
 	Allow calling without fcn_name.
 	* load-save.cc (parse_save_options (const string_vector&, ...)): 
 	Return string_vector with parsed arguments removed instead.
 	(parse_save_options (const std::string&, ...)):	Dtto.
diff --git a/src/pt-assign.cc b/src/pt-assign.cc
--- a/src/pt-assign.cc
+++ b/src/pt-assign.cc
@@ -39,16 +39,19 @@ along with Octave; see the file COPYING.
 #include "pt-bp.h"
 #include "pt-assign.h"
 #include "pt-walk.h"
 #include "utils.h"
 #include "variables.h"
 
 // Simple assignment expressions.
 
+// FIXME -- the following variable and the function that uses it
+// should be removed from some future version of Octave.
+
 static const char *former_built_in_variables[] =
 {
   "DEFAULT_EXEC_PATH",
   "DEFAULT_LOADPATH",
   "EDITOR",
   "EXEC_PATH",
   "FFTW_WISDOM_PROGRAM",
   "IMAGEPATH",
@@ -153,20 +156,17 @@ maybe_warn_former_built_in_variable (con
 		     "%s is no longer a built-in variable; please read the NEWS file or type `news' for details",
 		     nm.c_str ());
 }
 
 tree_simple_assignment::tree_simple_assignment
   (tree_expression *le, tree_expression *re,
    bool plhs, int l, int c, octave_value::assign_op t)
     : tree_expression (l, c), lhs (le), rhs (re), preserve (plhs), etype (t)
-{
-  if (lhs)
-    maybe_warn_former_built_in_variable (lhs->name ());
-}
+      first_execution (true) { }
 
 tree_simple_assignment::~tree_simple_assignment (void)
 {
   if (! preserve)
     delete lhs;
 
   delete rhs;
 }
@@ -189,16 +189,19 @@ tree_simple_assignment::rvalue (int narg
 // FIXME -- this works, but it would look a little better if
 // it were broken up into a couple of separate functions.
 
 octave_value
 tree_simple_assignment::rvalue (void)
 {
   octave_value retval;
 
+  if (first_execution && lhs)
+    maybe_warn_former_built_in_variable (lhs->name ());
+
   if (error_state)
     return retval;
 
   if (rhs)
     {
       octave_value_list tmp = rhs->rvalue ();
 
       if (! (error_state || tmp.empty ()))
@@ -253,16 +256,18 @@ tree_simple_assignment::rvalue (void)
 		    eval_error ();
 		}
 	    }
 	}
       else
 	eval_error ();
     }
 
+  first_execution = false;
+
   return retval;
 }
 
 void
 tree_simple_assignment::eval_error (void)
 {
   int l = line ();
   int c = column ();
@@ -298,25 +303,17 @@ tree_simple_assignment::accept (tree_wal
 }
 
 // Multi-valued assignment expressions.
 
 tree_multi_assignment::tree_multi_assignment
   (tree_argument_list *lst, tree_expression *r,
    bool plhs, int l, int c, octave_value::assign_op t)
     : tree_expression (l, c), lhs (lst), rhs (r), preserve (plhs), etype (t)
-{
-  for (tree_argument_list::iterator p = lhs->begin (); p != lhs->end (); p++)
-    {
-      tree_expression *lhs_expr = *p;
-
-      if (lhs_expr)
-	maybe_warn_former_built_in_variable (lhs_expr->name ());
-    }
-}
+      first_execution (true) { }
 
 tree_multi_assignment::~tree_multi_assignment (void)
 {
   if (! preserve)
     delete lhs;
 
   delete rhs;
 }
@@ -340,16 +337,27 @@ tree_multi_assignment::rvalue (void)
 octave_value_list
 tree_multi_assignment::rvalue (int)
 {
   octave_value_list retval;
 
   if (error_state)
     return retval;
 
+  if (first_execution)
+    {
+      for (tree_argument_list::iterator p = lhs->begin (); p != lhs->end (); p++)
+        {
+          tree_expression *lhs_expr = *p;
+
+          if (lhs_expr)
+            maybe_warn_former_built_in_variable (lhs_expr->name ());
+        }
+    }
+
   if (rhs)
     {
       std::list<octave_lvalue> lvalue_list = lhs->lvalue_list ();
 
       if (error_state)
 	return retval;
 
       int n_out = 0;
@@ -481,16 +489,18 @@ tree_multi_assignment::rvalue (int)
 		break;
 
 	    }
 	}
     }
   else
     eval_error ();
 
+  first_execution = false;
+
   return retval;
 }
 
 void
 tree_multi_assignment::eval_error (void)
 {
   int l = line ();
   int c = column ();
diff --git a/src/pt-assign.h b/src/pt-assign.h
--- a/src/pt-assign.h
+++ b/src/pt-assign.h
@@ -41,17 +41,18 @@ class octave_lvalue;
 
 class
 tree_simple_assignment : public tree_expression
 {
 public:
 
   tree_simple_assignment (bool plhs = false, int l = -1, int c = -1,
 			  octave_value::assign_op t = octave_value::op_asn_eq)
-    : tree_expression (l, c), lhs (0), rhs (0), preserve (plhs), etype (t) { }
+    : tree_expression (l, c), lhs (0), rhs (0), preserve (plhs), etype (t),
+      first_execution (true) { }
 
   tree_simple_assignment (tree_expression *le, tree_expression *re,
 			  bool plhs = false, int l = -1, int c = -1,
 			  octave_value::assign_op t = octave_value::op_asn_eq);
 
   ~tree_simple_assignment (void);
 
   bool has_magic_end (void) const { return (rhs && rhs->has_magic_end ()); }
@@ -95,33 +96,37 @@ private:
   bool preserve;
 
   // True if this is an assignment to the automatic variable ans.
   bool ans_ass;
 
   // The type of the expression.
   octave_value::assign_op etype;
 
+  // true only on first rvalue() call.
+  bool first_execution;
+
   // No copying!
 
   tree_simple_assignment (const tree_simple_assignment&);
 
   tree_simple_assignment& operator = (const tree_simple_assignment&);
 };
 
 // Multi-valued assignment expressions.
 
 class
 tree_multi_assignment : public tree_expression
 {
 public:
 
   tree_multi_assignment (bool plhs = false, int l = -1, int c = -1,
 			 octave_value::assign_op t = octave_value::op_asn_eq)
-    : tree_expression (l, c), lhs (0), rhs (0), preserve (plhs), etype(t) { }
+    : tree_expression (l, c), lhs (0), rhs (0), preserve (plhs), etype(t),
+      first_execution (true) { }
 
   tree_multi_assignment (tree_argument_list *lst, tree_expression *r,
 			 bool plhs = false, int l = -1, int c = -1,
 			 octave_value::assign_op t = octave_value::op_asn_eq);
 
   ~tree_multi_assignment (void);
 
   bool has_magic_end (void) const { return (rhs && rhs->has_magic_end ()); }
@@ -157,16 +162,19 @@ private:
   tree_expression *rhs;
 
   // True if we should not delete the lhs.
   bool preserve;
 
   // The type of the expression.
   octave_value::assign_op etype;
 
+  // true only on first rvalue() call.
+  bool first_execution;
+
   // No copying!
 
   tree_multi_assignment (const tree_multi_assignment&);
 
   tree_multi_assignment& operator = (const tree_multi_assignment&);
 };
 
 #endif
