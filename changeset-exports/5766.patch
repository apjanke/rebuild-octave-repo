# HG changeset patch
# User jwe
# Date 1145373502 0
#      Tue Apr 18 15:18:22 2006 +0000
# Node ID f3be83cff1531a34a098c157279245652dd0a8a3
# Parent  7ba9ad1fec11d72a8d72472c866819f068441ffb
[project @ 2006-04-18 15:17:34 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2006-04-18  John W. Eaton  <jwe@octave.org>
+
+	* randmtzig.c (randmt, randi53, randi54, randi64, randu32, randu53):
+	Omit inline from decl.
+
+	* Sparse.cc (Sparse<T>::index): Use std::vector<bool> to avoid
+	local array with variable dimension.
+
 2006-04-16  John W. Eaton  <jwe@octave.org>
 
 	* lo-sstream.h: Delete.
 	* Makefile.in (INCLUDES): Remove it from the list.
 
 	* dim-vector.h (dim_vector::str): Use std::ostringstream directly.
 	* Sparse.cc (Sparse::range_error): Likewise.
 	* DASSL.cc (DASSL::error_message): Likewise.
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -1889,19 +1889,17 @@ Sparse<T>::index (idx_vector& idx_i, idx
 		}
 
 	      if (permutation)
 		{
 		  // Special case permutation like indexing for speed
 		  retval = Sparse<T> (n, m, nnz ());
 		  octave_idx_type *ri = retval.xridx ();
 	      
-		  // Can't use OCTAVE_LOCAL_BUFFER with bool, and so 
-		  // can't with T either
-		  T X [n];
+		  std::vector<T> X (n);
 		  for (octave_idx_type i = 0; i < nr; i++)
 		    itmp [i] = -1;
 		  for (octave_idx_type i = 0; i < n; i++)
 		    itmp[idx_i.elem(i)] = i;
 
 		  octave_idx_type kk = 0;
 		  retval.xcidx(0) = 0;
 		  for (octave_idx_type j = 0; j < m; j++)
diff --git a/liboctave/randmtzig.c b/liboctave/randmtzig.c
--- a/liboctave/randmtzig.c
+++ b/liboctave/randmtzig.c
@@ -93,25 +93,25 @@
    All generators share the same state vector.
 
    === Mersenne Twister ===
    void oct_init_by_int(uint32_t s)           32-bit initial state
    void oct_init_by_array(uint32_t k[],int m) m*32-bit initial state
    void oct_init_by_entropy(void)             random initial state
    void oct_get_state(uint32_t save[MT_N+1])  saves state in array
    void oct_set_state(uint32_t save[MT_N+1])  restores state from array
-   static inline uint32_t randmt(void)           returns 32-bit unsigned int
+   static uint32_t randmt(void)               returns 32-bit unsigned int
 
    === inline generators ===
-   static inline uint32_t randi32(void)   returns 32-bit unsigned int
-   static inline uint64_t randi53(void)   returns 53-bit unsigned int
-   static inline uint64_t randi54(void)   returns 54-bit unsigned int
-   static inline uint64_t randi64(void)   returns 64-bit unsigned int
-   static inline double randu32(void)     returns 32-bit uniform in (0,1)
-   static inline double randu53(void)     returns 53-bit uniform in (0,1)
+   static uint32_t randi32(void)   returns 32-bit unsigned int
+   static uint64_t randi53(void)   returns 53-bit unsigned int
+   static uint64_t randi54(void)   returns 54-bit unsigned int
+   static uint64_t randi64(void)   returns 64-bit unsigned int
+   static double randu32(void)     returns 32-bit uniform in (0,1)
+   static double randu53(void)     returns 53-bit uniform in (0,1)
 
    double oct_randu(void)       returns M-bit uniform in (0,1)
    double oct_randn(void)       returns M-bit standard normal
    double oct_rande(void)       returns N-bit standard exponential
 
    === Array generators ===
    void oct_fill_randi32(octave_idx_type, uint32_t [])
    void oct_fill_randi64(octave_idx_type, uint64_t [])
@@ -298,17 +298,17 @@ next_state (void)
 
   for (j = MT_M; --j; p++) 
     *p = p[MT_M-MT_N] ^ TWIST(p[0], p[1]);
 
   *p = p[MT_M-MT_N] ^ TWIST(p[0], state[0]);
 }
 
 /* generates a random number on [0,0xffffffff]-interval */
-static inline uint32_t
+static uint32_t
 randmt (void)
 {
   register uint32_t y;
 
   if (--left == 0) 
     next_state();
   y = *next++;
 
@@ -319,74 +319,74 @@ randmt (void)
   return (y ^ (y >> 18));
 }
 
 /* ===== Uniform generators ===== */
 
 /* Select which 32 bit generator to use */
 #define randi32 randmt
 
-static inline uint64_t 
+static uint64_t 
 randi53 (void)
 {
   const uint32_t lo = randi32();
   const uint32_t hi = randi32()&0x1FFFFF;
 #if HAVE_X86_32
   uint64_t u;
   uint32_t *p = (uint32_t *)&u;
   p[0] = lo;
   p[1] = hi;
   return u;
 #else
   return (((uint64_t)hi<<32)|lo);
 #endif
 }
 
-static inline uint64_t 
+static uint64_t 
 randi54 (void)
 {
   const uint32_t lo = randi32();
   const uint32_t hi = randi32()&0x3FFFFF;
 #if HAVE_X86_32
   uint64_t u;
   uint32_t *p = (uint32_t *)&u;
   p[0] = lo;
   p[1] = hi;
   return u;
 #else
   return (((uint64_t)hi<<32)|lo);
 #endif
 }
 
-static inline uint64_t 
+static uint64_t 
 randi64 (void)
 {
   const uint32_t lo = randi32();
   const uint32_t hi = randi32();
 #if HAVE_X86_32
   uint64_t u;
   uint32_t *p = (uint32_t *)&u;
   p[0] = lo;
   p[1] = hi;
   return u;
 #else
   return (((uint64_t)hi<<32)|lo);
 #endif
 }
 
 /* generates a random number on (0,1)-real-interval */
-static inline double
+static double
 randu32 (void)
 {
   return ((double)randi32() + 0.5) * (1.0/4294967296.0); 
   /* divided by 2^32 */
 }
 
 /* generates a random number on (0,1) with 53-bit resolution */
-static inline double
+static double
 randu53 (void) 
 { 
   const uint32_t a=randi32()>>5;
   const uint32_t b=randi32()>>6; 
   return(a*67108864.0+b+0.4) * (1.0/9007199254740992.0);
 } 
 
 /* Determine mantissa for uniform doubles */
