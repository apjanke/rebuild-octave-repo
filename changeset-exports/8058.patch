# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1219771407 14400
#      Tue Aug 26 13:23:27 2008 -0400
# Node ID ca39c21fa4b88701efcc11599d75212734b8c4c6
# Parent  7670cd2966873e73061a3855aeeb37e28d4c106d
[mq]: generic_octave_to_backend_nofitication

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+2008-08-26  Maciek Gajewski <maciej.gajewski0@gmail.com>
+
+	* graphics.h.in (base_property::set): Remove inline implementation.
+	(base_graphics_backend::property_changed,
+	base_graphics_backend::object_created,
+	base_graphics_backend::object_destroyed): New method.
+	(graphics_backend::property_changed, graphics_backend::object_created,
+	graphics_backend::object_destroyed): Likewise.
+	* graphics.cc (base_property::set): Moved from header file.
+	(gh_manager::do_free): Add backend notification.
+	(gh_manager::do_make_graphics_handle): Likewise.
+	(gh_manager::do_make_figure_handle): Likewise.
+
 2008-08-25  Thomas L. Scofield  <scofield@calvin.edu>
 
 	* DLD-FUNCTIONS/__magick_read__.cc: Untabify.
 	(jpg_settings, encode_bool_image, encode_uint_image, encode_map):
 	New functions.
 	(write_image): Use them to handle various image types.
 
 2008-08-25  David Bateman  <dbateman@free.fr>
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -454,16 +454,36 @@ make_graphics_object_from_type (const ca
     go = new hggroup (h, p);
 
   return go;
 }
 
 // ---------------------------------------------------------------------
 
 void
+base_property::set (const octave_value& v, bool do_run )
+{
+  do_set (v);
+
+  // notify backend
+  graphics_object go = gh_manager::get_object (parent);
+  if (go)
+    {
+      graphics_backend backend = go.get_backend();
+      if (backend)
+        backend.property_changed (parent, name);
+    }
+  
+  // run listeners
+  if (do_run && ! error_state)
+    run_listeners (POSTSET);
+}
+
+
+void
 base_property::run_listeners (listener_mode mode)
 {
   const octave_value_list& l = listeners[mode];
 
   for (int i = 0; i < l.length (); i++)
     {
       gh_manager::execute_callback (parent, l(i), octave_value ());
 
@@ -1167,16 +1187,23 @@ gh_manager::do_free (const graphics_hand
 	{
 	  iterator p = handle_map.find (h);
 
 	  if (p != handle_map.end ())
 	    {
 	      p->second.get_properties ().set_beingdeleted (true);
 	      p->second.get_properties ().execute_deletefcn ();
 
+	      // notify backend
+	      graphics_backend backend = p->second.get_backend ();
+	      if (backend)
+                backend.object_destroyed (h);
+                 // note - this will be valid only for first explicitly deleted object.
+                 // All his children will have unknown backend then.
+                 
 	      handle_map.erase (p);
 
 	      if (h.value () < 0)
 		handle_free_list.insert (h);
 	    }
 	  else
 	    error ("graphics_handle::free: invalid object %g", h.value ());
 	}
@@ -3519,31 +3546,42 @@ gh_manager::do_make_graphics_handle (con
 
   go = make_graphics_object_from_type (go_name, h, p);
   
   if (go)
     {
       handle_map[h] = graphics_object (go);
       if (do_createfcn)
         go->get_properties ().execute_createfcn ();
+
+      // notify backend
+      graphics_backend backend = go->get_backend ();
+      if (backend)
+        backend.object_created (h);
     }
   else
     error ("gh_manager::do_make_graphics_handle: invalid object type `%s'",
 	   go_name.c_str ());
 
   return h;
 }
 
 graphics_handle
 gh_manager::do_make_figure_handle (double val)
 {
   graphics_handle h = val;
 
-  handle_map[h] = graphics_object (new figure (h, 0));
-
+  base_graphics_object* go = new figure (h, 0);
+  handle_map[h] = graphics_object (go);
+
+  // notify backend
+  graphics_backend backend = go->get_backend ();
+  if (backend)
+    backend.object_created (h);
+  
   return h;
 }
 
 void
 gh_manager::do_push_figure (const graphics_handle& h)
 {
   do_pop_figure (h);
 
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -367,24 +367,20 @@ public:
   graphics_handle get_parent (void) const { return parent; }
 
   void set_parent (const graphics_handle &h) { parent = h; }
 
   bool is_hidden (void) const { return hidden; }
 
   void set_hidden (bool flag) { hidden = flag; }
 
-  void set (const octave_value& v, bool do_run = true)
-    {
-      do_set (v);
-
-      if (do_run && ! error_state)
-	run_listeners (POSTSET);
-    }
-
+  // Sets property value, notifies backend.
+  // If do_run is true, runs associated listeners.
+  void set (const octave_value& v, bool do_run = true);
+  
   virtual octave_value get (void) const
     {
       error ("get: invalid property \"%s\"", name.c_str ());
       return octave_value ();
     }
 
   base_property& operator = (const octave_value& val)
     {
@@ -1346,16 +1342,28 @@ public:
     {
       gripe_invalid ("get_screen_size");
       return Matrix (1, 2, 0.0);
     }
 
   virtual void set_figure_position (const graphics_handle&, const Matrix&) const
     { gripe_invalid ("set_figure_position"); }
 
+  // Called when graphics object using this backend changes it's property.
+  virtual void property_changed (const graphics_handle&, const std::string&)
+    { gripe_invalid ("property_changed"); }
+  
+  // Called when new object using this backend is created.
+  virtual void object_created (const graphics_handle&)
+    { gripe_invalid ("object_created"); }
+
+  // Called when object using this backend is destroyed.
+  virtual void object_destroyed (const graphics_handle&)
+    { gripe_invalid ("object_destroyed"); }
+
 private:
   std::string name;
   int count;
 
 private:
   void gripe_invalid (const std::string& fname) const
     {
       if (! is_valid ())
@@ -1425,17 +1433,31 @@ public:
   double get_screen_resolution (void) const
     { return rep->get_screen_resolution (); }
 
   Matrix get_screen_size (void) const
     { return rep->get_screen_size (); }
 
   void set_figure_position (const graphics_handle& h, const Matrix& pos) const
     { rep->set_figure_position (h, pos); }
-
+  
+  // Notifies backend that object't property has changed.
+  void property_changed (const graphics_handle& h, const std::string& prop)
+    { rep->property_changed (h, prop); }
+
+  // Notifies backend that new object was created.
+  void object_created (const graphics_handle& h)
+    { rep->object_created (h); }
+  
+  // Notifies backend that object was destroyed.
+  // This is called only for explicitly deleted object. Children are
+  // deleted implicitly and backend isn't notified.
+  void object_destroyed (const graphics_handle& h)
+    { rep->object_destroyed (h); }
+  
   OCTINTERP_API static graphics_backend default_backend (void);
 
   static void register_backend (const graphics_backend& b)
     { available_backends[b.get_name ()] = b; }
 
   static void unregister_backend (const std::string& name)
     { available_backends.erase (name); }
 
