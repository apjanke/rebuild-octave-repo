# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1316138638 14400
#      Thu Sep 15 22:03:58 2011 -0400
# Node ID c99f24c10ca3688e4ad7b830a8d590481c18f0dd
# Parent  bda7b080f2053d2c58de1f6e5e3bc88664ccefc0
fix vertical concatenation involving cell arrays

* pt-mat.cc (tm_row_const::tm_row_const_rep::cellify): New function.
(tm_row_const::tm_row_const_rep::init): Use it.  Call octave_quit in
all loops.
(tm_row_const::cellify): New function.
(tm_row_const::first_elem_struct_p): New function.
(tm_const::any_cell): New data member.  Adjust constructor
initialization lists.
(tm_const::any_cell_p): New function.
(tm_const::init): Handle concatenation of cells.

* pt-mat.cc: Additional test for concatentation with cell arrays.

diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -103,16 +103,18 @@ private:
     std::string class_nm;
 
     bool ok;
 
     void do_init_element (const octave_value&, bool&);
 
     void init (const tree_argument_list&);
 
+    void cellify (void);
+
   private:
 
     tm_row_const_rep (const tm_row_const_rep&);
 
     tm_row_const_rep& operator = (const tm_row_const_rep&);
 
     void eval_warning (const char *msg, int l, int c) const;
   };
@@ -172,19 +174,22 @@ public:
   bool some_strings_p (void) const { return rep->some_str; }
   bool all_real_p (void) const { return rep->all_real; }
   bool all_complex_p (void) const { return rep->all_cmplx; }
   bool all_empty_p (void) const { return rep->all_mt; }
   bool any_cell_p (void) const { return rep->any_cell; }
   bool any_sparse_p (void) const { return rep->any_sparse; }
   bool any_class_p (void) const { return rep->any_class; }
   bool all_1x1_p (void) const { return rep->all_1x1; }
+  bool first_elem_struct_p (void) const { return rep->first_elem_is_struct; }
 
   std::string class_name (void) const { return rep->class_nm; }
 
+  void cellify (void) { rep->cellify (); }
+
   operator bool () const { return (rep && rep->ok); }
 
   iterator begin (void) { return rep->begin (); }
   const_iterator begin (void) const { return rep->begin (); }
 
   iterator end (void) { return rep->end (); }
   const_iterator end (void) const { return rep->end (); }
 
@@ -371,28 +376,24 @@ tm_row_const::tm_row_const_rep::init (co
                 }
             }
           else
             do_init_element (tmp, first_elem);
         }
     }
 
   if (any_cell && ! any_class && ! first_elem_is_struct)
-    {
-      for (iterator p = begin (); p != end (); p++)
-        {
-          if (! p->is_cell ())
-            *p = Cell (*p);
-        }
-    }
+    cellify ();
 
   first_elem = true;
 
   for (iterator p = begin (); p != end (); p++)
     {
+      octave_quit ();
+
       octave_value val = *p;
 
       dim_vector this_elt_dv = val.dims ();
 
       if (! this_elt_dv.zero_by_zero ())
         {
           all_mt = false;
 
@@ -408,16 +409,62 @@ tm_row_const::tm_row_const_rep::init (co
             }
         }
     }
 
   ok = ! error_state;
 }
 
 void
+tm_row_const::tm_row_const_rep::cellify (void)
+{
+  bool elt_changed = false;
+
+  for (iterator p = begin (); p != end (); p++)
+    {
+      octave_quit ();
+
+      if (! p->is_cell ())
+        {
+          elt_changed = true;
+
+          *p = Cell (*p);
+        }
+    }
+
+  if (elt_changed)
+    {
+      bool first_elem = true;
+
+      for (iterator p = begin (); p != end (); p++)
+        {
+          octave_quit ();
+
+          octave_value val = *p;
+
+          dim_vector this_elt_dv = val.dims ();
+
+          if (! this_elt_dv.zero_by_zero ())
+            {
+              if (first_elem)
+                {
+                  first_elem = false;
+                  dv = this_elt_dv;
+                }
+              else if (! dv.hvcat (this_elt_dv, 1))
+                {
+                  eval_error ("horizontal dimensions mismatch", dv, this_elt_dv);
+                  break;
+                }
+            }
+        }
+    }
+}
+
+void
 tm_row_const::tm_row_const_rep::eval_warning (const char *msg, int l,
                                               int c) const
 {
   if (l == -1 && c == -1)
     warning_with_id ("Octave:empty-list-elements", "%s", msg);
   else
     warning_with_id ("Octave:empty-list-elements",
                      "%s near line %d, column %d", msg, l, c);
@@ -426,34 +473,35 @@ tm_row_const::tm_row_const_rep::eval_war
 class
 tm_const : public octave_base_list<tm_row_const>
 {
 public:
 
   tm_const (const tree_matrix& tm)
     : dv (0, 0), all_str (false), all_sq_str (false), all_dq_str (false),
       some_str (false), all_real (false), all_cmplx (false),
-      all_mt (true), any_sparse (false), any_class (false),
-      class_nm (), ok (false)
+      all_mt (true), any_cell (false), any_sparse (false),
+      any_class (false), class_nm (), ok (false)
   { init (tm); }
 
   ~tm_const (void) { }
 
   octave_idx_type rows (void) const { return dv.elem (0); }
   octave_idx_type cols (void) const { return dv.elem (1); }
 
   dim_vector dims (void) const { return dv; }
 
   bool all_strings_p (void) const { return all_str; }
   bool all_sq_strings_p (void) const { return all_sq_str; }
   bool all_dq_strings_p (void) const { return all_dq_str; }
   bool some_strings_p (void) const { return some_str; }
   bool all_real_p (void) const { return all_real; }
   bool all_complex_p (void) const { return all_cmplx; }
   bool all_empty_p (void) const { return all_mt; }
+  bool any_cell_p (void) const { return any_cell; }
   bool any_sparse_p (void) const { return any_sparse; }
   bool any_class_p (void) const { return any_class; }
   bool all_1x1_p (void) const { return all_1x1; }
 
   std::string class_name (void) const { return class_nm; }
 
   operator bool () const { return ok; }
 
@@ -463,16 +511,17 @@ private:
 
   bool all_str;
   bool all_sq_str;
   bool all_dq_str;
   bool some_str;
   bool all_real;
   bool all_cmplx;
   bool all_mt;
+  bool any_cell;
   bool any_sparse;
   bool any_class;
   bool all_1x1;
 
   std::string class_nm;
 
   bool ok;
 
@@ -488,35 +537,44 @@ private:
 void
 tm_const::init (const tree_matrix& tm)
 {
   all_str = true;
   all_sq_str = true;
   all_dq_str = true;
   all_real = true;
   all_cmplx = true;
+  any_cell = false;
   any_sparse = false;
   any_class = false;
   all_1x1 = ! empty ();
 
   bool first_elem = true;
+  bool first_elem_is_struct = false;
 
   // Just eval and figure out if what we have is complex or all
   // strings.  We can't check columns until we know that this is a
   // numeric matrix -- collections of strings can have elements of
   // different lengths.
 
   for (tree_matrix::const_iterator p = tm.begin (); p != tm.end (); p++)
     {
       octave_quit ();
 
       tree_argument_list *elt = *p;
 
       tm_row_const tmp (*elt);
 
+      if (first_elem)
+        {
+          first_elem_is_struct = tmp.first_elem_struct_p ();
+
+          first_elem = false;
+        }
+
       if (tmp && ! tmp.empty ())
         {
           if (all_str && ! tmp.all_strings_p ())
             all_str = false;
 
           if (all_sq_str && ! tmp.all_sq_strings_p ())
             all_sq_str = false;
 
@@ -530,32 +588,49 @@ tm_const::init (const tree_matrix& tm)
             all_real = false;
 
           if (all_cmplx && ! tmp.all_complex_p ())
             all_cmplx = false;
 
           if (all_mt && ! tmp.all_empty_p ())
             all_mt = false;
 
+          if (!any_cell && tmp.any_cell_p ())
+            any_cell = true;
+
           if (!any_sparse && tmp.any_sparse_p ())
             any_sparse = true;
 
           if (!any_class && tmp.any_class_p ())
             any_class = true;
 
           all_1x1 = all_1x1 && tmp.all_1x1_p ();
 
           append (tmp);
         }
       else
         break;
     }
 
   if (! error_state)
     {
+      iterator p = begin ();
+
+      if (any_cell && ! any_class && ! first_elem_is_struct)
+        {
+          for (iterator p = begin (); p != end (); p++)
+            {
+              octave_quit ();
+
+              p->cellify ();
+            }
+        }
+
+      first_elem = true;
+
       for (iterator p = begin (); p != end (); p++)
         {
           octave_quit ();
 
           tm_row_const elt = *p;
 
           octave_idx_type this_elt_nr = elt.rows ();
           octave_idx_type this_elt_nc = elt.cols ();
@@ -1156,16 +1231,20 @@ tree_matrix::accept (tree_walker& tw)
   tw.visit_matrix (*this);
 }
 
 /*
 %% test concatenation with all zero matrices
 %!assert([ '' 65*ones(1,10) ], 'AAAAAAAAAA');
 %!assert([ 65*ones(1,10) '' ], 'AAAAAAAAAA');
 
+%!test
+%! c = {'foo'; 'bar'; 'bazoloa'};
+%! assert ([c; 'a'; 'bc'; 'def'], {'foo'; 'bar'; 'bazoloa'; 'a'; 'bc'; 'def'});
+
 %!assert (class ([int64(1), int64(1)]), 'int64')
 %!assert (class ([int64(1), int32(1)]), 'int64')
 %!assert (class ([int64(1), int16(1)]), 'int64')
 %!assert (class ([int64(1), int8(1)]), 'int64')
 %!assert (class ([int64(1), uint64(1)]), 'int64')
 %!assert (class ([int64(1), uint32(1)]), 'int64')
 %!assert (class ([int64(1), uint16(1)]), 'int64')
 %!assert (class ([int64(1), uint8(1)]), 'int64')
