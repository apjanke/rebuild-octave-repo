# HG changeset patch
# User Rik <rik@octave.org>
# Date 1381772678 25200
#      Mon Oct 14 10:44:38 2013 -0700
# Node ID b0f529c3671dc94f0fb0856567400d8346568013
# Parent  a09511ebf7efea3a3cb783880a26d9889f8f03bf
gl-render.cc: Replace custom min function with std::min.

* libinterp/corefcn/gl-render.cc(xmin): Delete custom function and replace
calling occurrences with std::min.  Use standard indent of 2 spaces for
constructors.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -39,38 +39,32 @@ along with Octave; see the file COPYING.
 
 // Win32 API requires the CALLBACK attributes for
 // GLU callback functions. Define it to empty on
 // other platforms.
 #ifndef CALLBACK
 #define CALLBACK
 #endif
 
-static octave_idx_type
-xmin (octave_idx_type x, octave_idx_type y)
-{
-  return x < y ? x : y;
-}
-
 class
 opengl_texture
 {
 protected:
   class texture_rep
   {
   public:
     texture_rep (void)
       : id (), w (), h (), tw (), th (), tx (), ty (),
         valid (false), count (1)
     { }
 
     texture_rep (GLuint id_arg, int w_arg, int h_arg, int tw_arg, int th_arg)
-        : id (id_arg), w (w_arg), h (h_arg), tw (tw_arg), th (th_arg),
-          tx (double(w)/tw), ty (double(h)/th), valid (true),
-          count (1) { }
+      : id (id_arg), w (w_arg), h (h_arg), tw (tw_arg), th (th_arg),
+        tx (double(w)/tw), ty (double(h)/th), valid (true),
+        count (1) { }
 
     ~texture_rep (void)
       {
         if (valid)
           glDeleteTextures (1, &id);
       }
 
     void bind (int mode) const
@@ -91,17 +85,17 @@ protected:
 
 private:
   opengl_texture (texture_rep *_rep) : rep (_rep) { }
 
 public:
   opengl_texture (void) : rep (new texture_rep ()) { }
 
   opengl_texture (const opengl_texture& tx)
-      : rep (tx.rep)
+    : rep (tx.rep)
     {
       rep->count++;
     }
 
   ~opengl_texture (void)
     {
       if (--rep->count == 0)
         delete rep;
@@ -146,18 +140,18 @@ opengl_texture::create (const octave_val
 {
   opengl_texture retval;
 
   dim_vector dv (data.dims ());
 
   // Expect RGB data
   if (dv.length () == 3 && dv(2) == 3)
     {
-      // FIXME -- dim_vectors hold octave_idx_type values.  Should we
-      // check for dimensions larger than intmax?
+      // FIXME: dim_vectors hold octave_idx_type values.
+      //        Should we check for dimensions larger than intmax?
       int h = dv(0), w = dv(1), tw, th;
       GLuint id;
       bool ok = true;
 
       tw = next_power_of_2 (w);
       th = next_power_of_2 (w);
 
       glGenTextures (1, &id);
@@ -174,18 +168,17 @@ opengl_texture::create (const octave_val
               for (int j = 0, idx = i*tw*3; j < w; j++, idx += 3)
                 {
                   a[idx]   = xdata(i,j,0);
                   a[idx+1] = xdata(i,j,1);
                   a[idx+2] = xdata(i,j,2);
                 }
             }
 
-          glTexImage2D (GL_TEXTURE_2D, 0, 3, tw, th, 0,
-                        GL_RGB, GL_FLOAT, a);
+          glTexImage2D (GL_TEXTURE_2D, 0, 3, tw, th, 0, GL_RGB, GL_FLOAT, a);
         }
       else if (data.is_uint8_type ())
         {
           const uint8NDArray xdata = data.uint8_array_value ();
 
           OCTAVE_LOCAL_BUFFER (octave_uint8, a, (3*tw*th));
 
           for (int i = 0; i < h; i++)
@@ -261,20 +254,20 @@ public:
   void add_vertex (double *loc, void *data) const
     { gluTessVertex (glu_tess, loc, data); }
 
 protected:
   virtual void begin (GLenum /*type*/) { }
 
   virtual void end (void) { }
 
-  virtual void vertex (void */*data*/) { }
-
-  virtual void combine (GLdouble /*c*/[3], void */*data*/[4],
-                        GLfloat /*w*/[4], void **/*out_data*/) { }
+  virtual void vertex (void * /*data*/) { }
+
+  virtual void combine (GLdouble [3] /*c*/, void * [4] /*data*/,
+                        GLfloat  [4] /*w*/, void ** /*out_data*/) { }
 
   virtual void edge_flag (GLboolean /*flag*/) { }
 
   virtual void error (GLenum err)
     { ::error ("OpenGL tesselation error (%d)", err); }
 
   virtual void init (void)
     {
@@ -348,19 +341,19 @@ public:
     octave_refcount<int> count;
 
     vertex_data_rep (void)
       : coords (), color (), normal (), alpha (),
         ambient (), diffuse (), specular (), specular_exp (),count (1) { }
 
     vertex_data_rep (const Matrix& c, const Matrix& col, const Matrix& n,
                      double a, float as, float ds, float ss, float se)
-        : coords (c), color (col), normal (n), alpha (a),
-          ambient (as), diffuse (ds), specular (ss), specular_exp (se),
-          count (1) { }
+      : coords (c), color (col), normal (n), alpha (a),
+        ambient (as), diffuse (ds), specular (ss), specular_exp (se),
+        count (1) { }
   };
 
 private:
   vertex_data_rep *rep;
 
   vertex_data_rep *nil_rep (void) const
     {
       static vertex_data_rep *nr = new vertex_data_rep ();
@@ -372,21 +365,21 @@ public:
   vertex_data (void) : rep (nil_rep ())
     { rep->count++; }
 
   vertex_data (const vertex_data& v) : rep (v.rep)
     { rep->count++; }
 
   vertex_data (const Matrix& c, const Matrix& col, const Matrix& n,
                double a, float as, float ds, float ss, float se)
-      : rep (new vertex_data_rep (c, col, n, a, as, ds, ss, se))
+    : rep (new vertex_data_rep (c, col, n, a, as, ds, ss, se))
     { }
 
   vertex_data (vertex_data_rep *new_rep)
-      : rep (new_rep) { }
+    : rep (new_rep) { }
 
   ~vertex_data (void)
     {
       if (--rep->count == 0)
         delete rep;
     }
 
   vertex_data& operator = (const vertex_data& v)
@@ -403,19 +396,19 @@ public:
   vertex_data_rep *get_rep (void) const { return rep; }
 };
 
 class
 opengl_renderer::patch_tesselator : public opengl_tesselator
 {
 public:
   patch_tesselator (opengl_renderer *r, int cmode, int lmode, int idx = 0)
-      : opengl_tesselator (), renderer (r),
-        color_mode (cmode), light_mode (lmode), index (idx),
-        first (true), tmp_vdata ()
+    : opengl_tesselator (), renderer (r),
+      color_mode (cmode), light_mode (lmode), index (idx),
+      first (true), tmp_vdata ()
   { }
 
 protected:
   void begin (GLenum type)
     {
       //printf ("patch_tesselator::begin (%d)\n", type);
       first = true;
 
@@ -1429,17 +1422,17 @@ opengl_renderer::draw_axes (const axes::
 void
 opengl_renderer::draw_line (const line::properties& props)
 {
   Matrix x = xform.xscale (props.get_xdata ().matrix_value ());
   Matrix y = xform.yscale (props.get_ydata ().matrix_value ());
   Matrix z = xform.zscale (props.get_zdata ().matrix_value ());
 
   bool has_z = (z.numel () > 0);
-  int n = static_cast<int> (::xmin (::xmin (x.numel (), y.numel ()), (has_z ? z.numel () : std::numeric_limits<int>::max ())));
+  int n = static_cast<int> (std::min (std::min (x.numel (), y.numel ()), (has_z ? z.numel () : std::numeric_limits<int>::max ())));
   octave_uint8 clip_mask = (props.is_clipping () ? 0x7F : 0x40), clip_ok (0x40);
 
   std::vector<octave_uint8> clip (n);
 
   if (has_z)
     for (int i = 0; i < n; i++)
       clip[i] = (clip_code (x(i), y(i), z(i)) & clip_mask);
   else
