# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1278106119 25200
#      Fri Jul 02 14:28:39 2010 -0700
# Node ID a4b8364e04c77f6b75c467135e691d5493c398a5
# Parent  5faf6832855a535b69f6bcd9311b204dea798740
wavread.m: Correctly handle non-word aligned chunks (bug #30309).

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-07-02  Rik <octave@nomad.inbox5.com>
+
+        * audio/wavread.m: Correctly handle non-word aligned data chunks.
+        (bug #30309).
+
 2010-06-16  Rik <octave@nomad.inbox5.com>
 
         * plot/stairs.m: Add additional calling forms to documentation.
 
 2010-06-24  John W. Eaton  <jwe@octave.org>
 
 	* plot/private/__plt__.m: Replace usage message with error.
 	* plot/loglog.m, plot/plot.m, plot/polar.m, plot/semilogx.m,
diff --git a/scripts/audio/wavread.m b/scripts/audio/wavread.m
--- a/scripts/audio/wavread.m
+++ b/scripts/audio/wavread.m
@@ -24,17 +24,17 @@
 ##
 ## @deftypefnx {Function File} {[@var{y}, @var{Fs}, @var{bits}] =} wavread (@var{filename})
 ## Additionally return the sample rate (@var{fs}) in Hz and the number of bits 
 ## per sample (@var{bits}).
 ##
 ## @deftypefnx {Function File} {[@dots{}] =} wavread (@var{filename}, @var{n})
 ## Read only the first @var{n} samples from each channel.
 ##
-## @deftypefnx {Function File} {[@dots{}] =} wavread (@var{filename},[@var{n1} @var{n2}])
+## @deftypefnx {Function File} {[@dots{}] =} wavread (@var{filename}, [@var{n1} @var{n2}])
 ## Read only samples @var{n1} through @var{n2} from each channel.
 ##
 ## @deftypefnx {Function File} {[@var{samples}, @var{channels}] =} wavread (@var{filename}, "size")
 ## Return the number of samples (@var{n}) and channels (@var{ch})
 ## instead of the audio data.
 ## @seealso{wavwrite}
 ## @end deftypefn
 
@@ -47,17 +47,17 @@ function [y, samples_per_sec, bits_per_s
   FORMAT_IEEE_FLOAT = 0x0003;   # IEEE float (32/64 bit)
   BYTEORDER         = "ieee-le";
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
   if (! ischar (filename))
-    error ("wavread: expecting filename to be a character string");
+    error ("wavread: FILENAME must be a character string");
   endif
 
   # Open file for binary reading.
   [fid, msg] = fopen (filename, "rb");
   if (fid < 0)
     error ("wavread: %s", msg);
   endif
 
@@ -152,30 +152,31 @@ function [y, samples_per_sec, bits_per_s
                bits_per_sample);
     endswitch
   endif
   
   ## Parse arguments.
   if (nargin == 1)
     length = 8 * data_size / bits_per_sample;
   else
-    if (size (param, 2) == 1)
+    nparams = size (param, 2);
+    if (nparams == 1)
       ## Number of samples is given.
       length = param * channels;
-    elseif (size (param, 2) == 2)
+    elseif (nparams == 2)
       ## Sample range is given.
       if (fseek (fid, (param(1)-1) * channels * (bits_per_sample/8), "cof") < 0)
         warning ("wavread: seeking failed");
       endif
       length = (param(2)-param(1)+1) * channels;
-    elseif (size (param, 2) == 4 && char (param) == "size")
+    elseif (nparams == 4 && char (param) == "size")
       ## Size of the file is requested.
       fclose (fid);
       y = [data_size/channels/(bits_per_sample/8), channels];
-      return
+      return;
     else
       fclose (fid);
       error ("wavread: invalid argument 2");
     endif
   endif
 
   ## Read samples and close file.
   if (bits_per_sample == 24)
@@ -199,17 +200,17 @@ function [y, samples_per_sec, bits_per_s
   if (format_tag == FORMAT_PCM)
     ## Normalize samples.
     switch (bits_per_sample)
       case 8
         yi = (yi - 128)/127;
       case 16
         yi /= 32767;
       case 24
-                yi /= 8388607;
+        yi /= 8388607;
       case 32
         yi /= 2147483647;
     endswitch
   endif
   
   ## Deinterleave.
   nr = numel (yi) / channels;
   y = reshape (yi, channels, nr)';
@@ -225,14 +226,16 @@ function chunk_size = find_chunk (fid, c
   id = "";
   offset = 8;
   chunk_size = 0;
 
   while (! strcmp (id, chunk_id) && (offset < size))
     fseek (fid, chunk_size, "cof");
     id = char (fread (fid, 4))';
     chunk_size = fread (fid, 1, "uint32", 0, "ieee-le");
+    ## Chunk sizes must be word-aligned (2 byte)
+    chunk_size += rem (chunk_size, 2);  
     offset = offset + 8 + chunk_size;
   endwhile
   if (! strcmp (id, chunk_id))
     chunk_size = -1;
   endif
 endfunction
