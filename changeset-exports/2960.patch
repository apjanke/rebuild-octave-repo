# HG changeset patch
# User jwe
# Date 863398444 0
#      Mon May 12 00:54:04 1997 +0000
# Node ID 194b50e4725bb26dcb48e275ae06112f59db8c9b
# Parent  5d1b71cd39f721c2ef241a193c7e719491a8d227
[project @ 1997-05-12 00:43:54 by jwe]

diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -136,24 +136,20 @@ static tree_expression *make_binary_op
 	 (int op, tree_expression *op1,	token *tok_val, tree_expression *op2);
 
 // Build a boolean expression.
 static tree_expression *make_boolean_op
 	 (int op, tree_expression *op1,	token *tok_val, tree_expression *op2);
 
 // Build a prefix expression.
 static tree_expression *make_prefix_op
-	 (int op, tree_identifier *op1, token *tok_val);
+	 (int op, tree_expression *op1, token *tok_val);
 
 // Build a postfix expression.
 static tree_expression *make_postfix_op
-	 (int op, tree_identifier *op1, token *tok_val);
-
-// Build a binary expression.
-static tree_expression *make_unary_op
 	 (int op, tree_expression *op1, token *tok_val);
 
 // Build an unwind-protect command.
 static tree_command *make_unwind_command
 	 (token *unwind_tok, tree_statement_list *body,
 	  tree_statement_list *cleanup, token *end_tok);
 
 // Build a try-catch command.
@@ -338,17 +334,17 @@ static void set_stmt_print_flag (tree_st
 %token ELLIPSIS
 %token ALL_VA_ARGS
 %token END_OF_INPUT
 %token USING TITLE WITH COLON OPEN_BRACE CLOSE_BRACE CLEAR
 
 // Nonterminals we construct.
 %type <sep_type> sep_no_nl opt_sep_no_nl sep opt_sep
 %type <tree_type> input
-%type <tree_constant_type> magic_colon
+%type <tree_constant_type> constant magic_colon
 %type <tree_matrix_type> rows rows1
 %type <tree_matrix_row_type> matrix_row matrix_row1
 %type <tree_expression_type> expression simple_expr simple_expr1
 %type <tree_expression_type> ans_expression title matrix
 %type <tree_identifier_type> identifier
 %type <tree_indirect_ref_type> indirect_ref indirect_ref1
 %type <octave_user_function_type> function1 function2 function3
 %type <tree_index_expression_type> variable word_list_cmd
@@ -768,49 +764,50 @@ expression	: simple_expr
 
 simple_expr	: simple_expr1
 		  {
 		    if (! ($$ = $1))
 		      ABORT_PARSE;
 		  }
 		;
 
-simple_expr1	: NUM
+constant	: NUM
 		  { $$ = make_constant (NUM, $1); }
 		| IMAG_NUM
 		  { $$ = make_constant (IMAG_NUM, $1); }
 		| TEXT
 		  { $$ = make_constant (TEXT, $1); }
+		;
+
+simple_expr1	: constant
+		  { $$ = $1; }
 		| '(' simple_expr ')'
-		  {
-		    $2->mark_in_parens ();
-		    $$ = $2;
-		  }
+		  { $$ = $2->mark_in_parens (); }
 		| word_list_cmd
 		  { $$ = $1; }
 		| variable
 		  { $$ = $1; }
 		| colon_expr
 		  { $$ = finish_colon_expression ($1); }
 		| matrix
 		  { $$ = $1; }
 		| '[' ']'
 		  { $$ = new tree_constant (octave_value (Matrix ())); }
 		| '[' ';' ']'
 		  { $$ = new tree_constant (octave_value (Matrix ())); }
-		| PLUS_PLUS identifier %prec UNARY
+		| PLUS_PLUS simple_expr %prec UNARY
 		  { $$ = make_prefix_op (PLUS_PLUS, $2, $1); }
-		| MINUS_MINUS identifier %prec UNARY
+		| MINUS_MINUS simple_expr %prec UNARY
 		  { $$ = make_prefix_op (MINUS_MINUS, $2, $1); }
-		| EXPR_NOT simple_expr
-		  { $$ = make_unary_op (EXPR_NOT, $2, $1); }
+		| EXPR_NOT simple_expr %prec UNARY
+		  { $$ = make_prefix_op (EXPR_NOT, $2, $1); }
 		| '+' simple_expr %prec UNARY
 		  { $$ = $2; }
 		| '-' simple_expr %prec UNARY
-		  { $$ = make_unary_op ('-', $2, $1); }
+		  { $$ = make_prefix_op ('-', $2, $1); }
 		| variable '=' simple_expr
 		  { $$ = make_assign_op ('=', $1, $2, $3); }
 		| variable ADD_EQ simple_expr
 		  { $$ = make_assign_op (ADD_EQ, $1, $2, $3); }
 		| variable SUB_EQ simple_expr
 		  { $$ = make_assign_op (SUB_EQ, $1, $2, $3); }
 		| variable MUL_EQ simple_expr
 		  { $$ = make_assign_op (MUL_EQ, $1, $2, $3); }
@@ -824,28 +821,25 @@ simple_expr1	: NUM
 		  { $$ = make_assign_op (EMUL_EQ, $1, $2, $3); }
 		| variable EDIV_EQ simple_expr
 		  { $$ = make_assign_op (EDIV_EQ, $1, $2, $3); }
 		| variable AND_EQ simple_expr
 		  { $$ = make_assign_op (AND_EQ, $1, $2, $3); }
 		| variable OR_EQ simple_expr
 		  { $$ = make_assign_op (OR_EQ, $1, $2, $3); }
 		| '[' screwed_again matrix_row SCREW_TWO '=' simple_expr
-		  {
-		    if (! ($$ = make_multi_val_ret ($3, $6, $5)))
-		      ABORT_PARSE;
-		  }
-		| identifier PLUS_PLUS
+		  { $$ = make_multi_val_ret ($3, $6, $5); }
+		| simple_expr PLUS_PLUS
 		  { $$ = make_postfix_op (PLUS_PLUS, $1, $2); }
-		| identifier MINUS_MINUS
+		| simple_expr MINUS_MINUS
 		  { $$ = make_postfix_op (MINUS_MINUS, $1, $2); }
 		| simple_expr QUOTE
-		  { $$ = make_unary_op (QUOTE, $1, $2); }
+		  { $$ = make_postfix_op (QUOTE, $1, $2); }
 		| simple_expr TRANSPOSE
-		  { $$ = make_unary_op (TRANSPOSE, $1, $2); }
+		  { $$ = make_postfix_op (TRANSPOSE, $1, $2); }
 		| simple_expr POW simple_expr
 		  { $$ = make_binary_op (POW, $1, $2, $3); }
 		| simple_expr EPOW simple_expr
 		  { $$ = make_binary_op (EPOW, $1, $2, $3); }
 		| simple_expr '+' simple_expr
 		  { $$ = make_binary_op ('+', $1, $2, $3); }
 		| simple_expr '-' simple_expr
 		  { $$ = make_binary_op ('-', $1, $2, $3); }
@@ -1516,58 +1510,16 @@ fold (tree_binary_expression *e)
 	delete e;
     }
   else
     retval = e;
 
   return retval;
 }
 
-static tree_expression *
-fold (tree_unary_expression *e)
-{
-  tree_expression *retval = 0;
-
-  tree_expression *op1 = e->operand ();
-
-  if (op1->is_constant ())
-    {
-      octave_value tmp = e->eval ();
-
-      if (! error_state)
-	{
-	  tree_constant *tc_retval = new tree_constant (tmp);
-
-	  ostrstream buf;
-
-	  tree_print_code tpc (buf);
-
-	  e->accept (tpc);
-
-	  buf << ends;
-
-	  char *s = buf.str ();
-
-	  tc_retval->stash_original_text (s);
-
-	  delete [] s;
-
-	  delete e;
-
-	  retval = tc_retval;
-	}
-      else
-	delete e;
-    }
-  else
-    retval = e;
-
-  return retval;
-}
-
 // Finish building a range.
 
 static tree_expression *
 finish_colon_expression (tree_colon_expression *e)
 {
   tree_expression *retval = 0;
 
   tree_expression *base = e->base ();
@@ -1787,106 +1739,83 @@ make_boolean_op (int op, tree_expression
     = new tree_boolean_expression (op1, op2, l, c, t);
 
   return fold (e);
 }
 
 // Build a prefix expression.
 
 static tree_expression *
-make_prefix_op (int op, tree_identifier *op1, token *tok_val)
+make_prefix_op (int op, tree_expression *op1, token *tok_val)
 {
   tree_prefix_expression::type t;
 
   switch (op)
     {
+    case EXPR_NOT:
+      t = tree_prefix_expression::unot;
+      break;
+
+    case '-':
+      t = tree_prefix_expression::uminus;
+      break;
+
     case PLUS_PLUS:
       t = tree_prefix_expression::increment;
       break;
 
     case MINUS_MINUS:
       t = tree_prefix_expression::decrement;
       break;
 
     default:
       panic_impossible ();
       break;
     }
 
   int l = tok_val->line ();
   int c = tok_val->column ();
 
-  return new tree_prefix_expression (op1, l, c, t);
+  return new tree_prefix_expression (t, op1, l, c);
 }
 
 // Build a postfix expression.
 
 static tree_expression *
-make_postfix_op (int op, tree_identifier *op1, token *tok_val)
+make_postfix_op (int op, tree_expression *op1, token *tok_val)
 {
   tree_postfix_expression::type t;
 
   switch (op)
     {
+    case QUOTE:
+      t = tree_postfix_expression::hermitian;
+      break;
+
+    case TRANSPOSE:
+      t = tree_postfix_expression::transpose;
+      break;
+
     case PLUS_PLUS:
       t = tree_postfix_expression::increment;
       break;
 
     case MINUS_MINUS:
       t = tree_postfix_expression::decrement;
       break;
 
     default:
       panic_impossible ();
       break;
     }
 
   int l = tok_val->line ();
   int c = tok_val->column ();
 
-  return new tree_postfix_expression (op1, l, c, t);
-}
-
-// Build a unary expression.
-
-static tree_expression *
-make_unary_op (int op, tree_expression *op1, token *tok_val)
-{
-  tree_unary_expression::type t;
-
-  switch (op)
-    {
-    case QUOTE:
-      t = tree_unary_expression::hermitian;
-      break;
-
-    case TRANSPOSE:
-      t = tree_unary_expression::transpose;
-      break;
-
-    case EXPR_NOT:
-      t = tree_unary_expression::unot;
-      break;
-
-    case '-':
-      t = tree_unary_expression::uminus;
-      break;
-
-    default:
-      panic_impossible ();
-      break;
-    }
-
-  int l = tok_val->line ();
-  int c = tok_val->column ();
-
-  tree_unary_expression *e
-    = new tree_unary_expression (op1, l, c, t);
-
-  return fold (e);
+  return new tree_postfix_expression (t, op1, l, c);
 }
 
 // Build an unwind-protect command.
 
 static tree_command *
 make_unwind_command (token *unwind_tok, tree_statement_list *body,
 		     tree_statement_list *cleanup, token *end_tok)
 {
diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -66,17 +66,17 @@ tree_constant::eval (bool print_result)
     val.print (octave_stdout);
 
   return val;
 }
 
 octave_value_list
 tree_constant::eval (bool, int, const octave_value_list& idx)
 {
-  return (idx.length () > 0) ? index (idx) : val;
+  return (idx.length () > 0) ? val.do_index_op (idx) : val;
 }
 
 void
 tree_constant::accept (tree_walker& tw)
 {
   tw.visit_constant (*this);
 }
 
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -68,21 +68,16 @@ public:
     }
 
   void *operator new (size_t size)
     { return allocator.alloc (size); }
 
   void operator delete (void *p, size_t size)
     { allocator.free (p, size); }
 
-  // Indexed assignment.
-
-  octave_value index (const octave_value_list& idx) const
-    { return val.index (idx); }
-
   // Type.  It would be nice to eliminate the need for this.
 
   bool is_constant (void) const { return true; }
 
   void maybe_mutate (void)
     { val.maybe_mutate (); }
 
   void print (ostream& os, bool pr_as_read_syntax = false,
diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -30,16 +30,17 @@ Software Foundation, 59 Temple Place - S
 
 #include <string>
 
 #include <iostream.h>
 #include <strstream.h>
 
 #include "error.h"
 #include "pager.h"
+#include "oct-var-ref.h"
 #include "ov.h"
 #include "pt-exp-base.h"
 
 // Expressions.
 
 bool
 tree_expression::is_logically_true (const char *warn_for)
 {
@@ -69,16 +70,23 @@ tree_expression::mark_for_possible_ans_a
 
 octave_value
 tree_expression::eval (bool /* print */)
 {
   panic ("invalid evaluation of generic expression");
   return octave_value ();
 }
 
+octave_variable_reference
+tree_expression::reference (void)
+{
+  panic ("invalid attempt to convert generic expression to lvalue");
+  return octave_variable_reference ();
+}
+
 string
 tree_expression::original_text (void) const
 {
   return string ();
 }
 
 /*
 ;;; Local Variables: ***
diff --git a/src/pt-exp-base.h b/src/pt-exp-base.h
--- a/src/pt-exp-base.h
+++ b/src/pt-exp-base.h
@@ -25,38 +25,29 @@ Software Foundation, 59 Temple Place - S
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #include <string>
 
 class octave_value;
+class octave_variable_reference;
 
 #include "pt-base.h"
 
 // A base class for expressions.
 
 class
 tree_expression : public tree
 {
 public:
 
-  enum type
-    {
-      unknown,
-      assignment,
-      simple_assignment,
-      multi_assignment,
-      colon,
-      index
-   };
-
-  tree_expression (int l = -1, int c = -1, type et = unknown)
-    : tree (l, c), in_parens (0), etype (et) { }
+  tree_expression (int l = -1, int c = -1)
+    : tree (l, c), in_parens (0) { }
 
   virtual ~tree_expression (void) { }
 
   virtual bool is_constant (void) const
     { return false; }
 
   virtual bool is_matrix_constant (void) const
     { return false; }
@@ -76,35 +67,34 @@ public:
   virtual bool is_assignment_expression (void) const
     { return false; }
 
   virtual bool is_prefix_expression (void) const
     { return false; }
 
   virtual bool is_logically_true (const char *);
 
-  virtual void mark_in_parens (void) { in_parens++; }
-
   virtual bool is_in_parens (void) { return in_parens; }
 
   virtual void mark_for_possible_ans_assign (void);
 
   virtual octave_value eval (bool print = false) = 0;
 
+  virtual octave_variable_reference reference (void);
+
   virtual string oper (void) const { return "<unknown>"; }
 
   virtual string original_text (void) const;
 
+  expression *mark_in_parens (void) { in_parens++; return this; }
+
 protected:
 
   // Nonzero if this expression appears inside parentheses.
   int in_parens;
-
-  // The type of this expression.
-  type etype;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-exp.cc b/src/pt-exp.cc
--- a/src/pt-exp.cc
+++ b/src/pt-exp.cc
@@ -57,70 +57,74 @@ extern int returning;
 extern int breaking;
 
 // TRUE means print the right hand side of an assignment instead of
 // the left.
 static bool Vprint_rhs_assign_val;
 
 // Prefix expressions.
 
-tree_prefix_expression::~tree_prefix_expression (void)
-{
-  delete id;
-}
-
 octave_value
-tree_prefix_expression::eval (bool print)
+tree_prefix_expression::eval (bool)
 {
   octave_value retval;
 
   if (error_state)
     return retval;
 
-  if (id)
+  if (op)
     {
-      switch (etype)
+      if (etype == unot || etype == uminus)
 	{
-	case increment:
-	  id->increment ();
-	  break;
-
-	case decrement:
-	  id->decrement ();
-	  break;
+	  octave_value val = op->eval ();
 
-	default:
-	  error ("prefix operator %d not implemented", etype);
-	  break;
-	}
-
-
-      if (error_state)
-	eval_error ();
-      else
-	{
-	  retval = id->eval (print);
-	  if (error_state)
+	  if (! error_state)
 	    {
-	      retval = octave_value ();
-	      if (error_state)
-		eval_error ();
+	      if (etype == unot)
+		retval = val.not ();
+	      else
+		retval = val.uminus ();
 	    }
 	}
+      else if (etype == increment || etype == decrement)
+	{
+	  octave_variable_reference ref = op->reference ();
+
+	  if (! error_state)
+	    {
+	      if (etype == increment)
+		ref.increment ();
+	      else
+		ref.decrement ();
+
+	      retval = ref.value ();
+	    }
+	}
+      else
+	error ("prefix operator %d not implemented", etype);
     }
+
   return retval;
 }
 
 string
 tree_prefix_expression::oper (void) const
 {
   string retval = "<unknown>";
 
   switch (etype)
     {
+    case unot:
+      retval = "!";
+      break;
+
+    case uminus:
+      retval = "-";
+      break;
+
     case increment:
       retval = "++";
       break;
 
     case decrement:
       retval = "--";
       break;
 
@@ -142,65 +146,74 @@ tree_prefix_expression::eval_error (void
 void
 tree_prefix_expression::accept (tree_walker& tw)
 {
   tw.visit_prefix_expression (*this);
 }
 
 // Postfix expressions.
 
-tree_postfix_expression::~tree_postfix_expression (void)
-{
-  delete id;
-}
-
 octave_value
-tree_postfix_expression::eval (bool print)
+tree_postfix_expression::eval (bool)
 {
   octave_value retval;
 
   if (error_state)
     return retval;
 
-  if (id)
+  if (op)
     {
-      retval = id->eval (print);
-
-      switch (etype)
+      if (etype == transpose || etype == hermitian)
 	{
-	case increment:
-	  id->increment ();
-	  break;
+	  octave_value val = op->eval ();
 
-	case decrement:
-	  id->decrement ();
-	  break;
-
-	default:
-	  error ("postfix operator %d not implemented", etype);
-	  break;
+	  if (! error_state)
+	    {
+	      if (etype == transpose)
+		retval = val.transpose ();
+	      else
+		retval = val.hermitian ();
+	    }
 	}
-
-      if (error_state)
+      else if (etype == increment || etype == decrement)
 	{
-	  retval = octave_value ();
-	  if (error_state)
-	    eval_error ();
+	  octave_variable_reference ref = op->reference ();
+
+	  if (! error_state)
+	    {
+	      retval = ref.value ();
+
+	      if (etype == increment)
+		ref.increment ();
+	      else
+		ref.decrement ();
+	    }
 	}
+      else
+	error ("postfix operator %d not implemented", etype);
     }
+
   return retval;
 }
 
 string
 tree_postfix_expression::oper (void) const
 {
   string retval = "<unknown>";
 
   switch (etype)
     {
+    case transpose:
+      retval = ".'";
+      break;
+
+    case hermitian:
+      retval = "'";
+      break;
+
     case increment:
       retval = "++";
       break;
 
     case decrement:
       retval = "--";
       break;
 
@@ -220,112 +233,16 @@ tree_postfix_expression::eval_error (voi
 }
 
 void
 tree_postfix_expression::accept (tree_walker& tw)
 {
   tw.visit_postfix_expression (*this);
 }
 
-// Unary expressions.
-
-octave_value
-tree_unary_expression::eval (bool /* print */)
-{
-  octave_value retval;
-
-  if (error_state)
-    return retval;
-
-  if (op)
-    {
-      octave_value u = op->eval ();
-
-      if (error_state)
-	eval_error ();
-      else if (u.is_defined ())
-	{
-	  switch (etype)
-	    {
-	    case unot:
-	      retval = u.not ();
-	      break;
-
-	    case uminus:
-	      retval = u.uminus ();
-	      break;
-
-	    case transpose:
-	      retval = u.transpose ();
-	      break;
-
-	    case hermitian:
-	      retval = u.hermitian ();
-	      break;
-
-	    default:
-	      ::error ("unary operator %d not implemented", etype);
-	      break;
-	    }
-
-	  if (error_state)
-	    {
-	      retval = octave_value ();
-	      eval_error ();
-	    }
-	}
-    }
-
-  return retval;
-}
-
-string
-tree_unary_expression::oper (void) const
-{
-  string retval = "<unknown>";
-
-  switch (etype)
-    {
-    case unot:
-      retval = "!";
-      break;
-
-    case uminus:
-      retval = "-";
-      break;
-
-    case transpose:
-      retval = ".'";
-      break;
-
-    case hermitian:
-      retval = "'";
-      break;
-
-    default:
-      break;
-    }
-
-  return retval;
-}
-
-void
-tree_unary_expression::eval_error (void)
-{
-  if (error_state > 0)
-    ::error ("evaluating unary operator `%s' near line %d, column %d",
-	     oper () . c_str (), line (), column ());
-}
-
-void
-tree_unary_expression::accept (tree_walker& tw)
-{
-  tw.visit_unary_expression (*this);
-}
-
 // Binary expressions.
  
 octave_value
 tree_binary_expression::eval (bool /* print */)
 {
   octave_value retval;
 
   if (error_state)
diff --git a/src/pt-exp.h b/src/pt-exp.h
--- a/src/pt-exp.h
+++ b/src/pt-exp.h
@@ -37,146 +37,113 @@ class tree_argument_list;
 class tree_walker;
 
 class octave_value;
 class octave_value_list;
 class octave_variable_reference;
 
 #include "pt-exp-base.h"
 
+// Unary expressions.
+
+class
+tree_unary_expression : public tree_expression
+{
+public:
+
+  tree_unary_expression (int l = -1, int c = -1)
+    : tree_expression (l, c), op (0)  { }
+
+  tree_unary_expression (tree_expression *e, int l = -1, int c = -1)
+    : tree_expression (l, c), op (e) { }
+
+  ~tree_unary_expression (void) { delete op; }
+
+  tree_expression *operand (void) { return op; }
+
+protected:
+
+  // The operand for the expression.
+  tree_expression *op;
+};
+
 // Prefix expressions.
 
 class
-tree_prefix_expression : public tree_expression
+tree_prefix_expression : public tree_unary_expression
 {
 public:
 
   enum type
     {
       unknown,
+      unot,
+      uminus,
       increment,
       decrement
     };
 
-  tree_prefix_expression (int l = -1, int c = -1, type t = unknown)
-    : tree_expression (l, c), id (0), etype (t) { }
+  tree_prefix_expression (int l = -1, int c = -1)
+    : tree_unary_expression (l, c), etype (unknown) { }
 
-  tree_prefix_expression (tree_identifier *i, int l = -1, int c = -1,
-			  type t = unknown)
-    : tree_expression (l, c), id (i), etype (t) { }
+  tree_prefix_expression (type t = unknown, tree_expression *e,
+			  int l = -1, int c = -1)
+    : tree_unary_expression (e, l, c), etype (t) { }
 
-  ~tree_prefix_expression (void);
+  ~tree_prefix_expression (void) { }
 
   octave_value eval (bool print = false);
 
   void eval_error (void);
 
-  bool is_prefix_expression (void) const
-    { return true; }
-
   string oper (void) const;
 
-  tree_identifier *ident (void) { return id; }
-
   void accept (tree_walker& tw);
 
 private:
 
-  // Currently, a prefix expression can only apply to an identifier.
-  tree_identifier *id;
-
   // The type of the expression.
   type etype;
 };
 
 // Postfix expressions.
 
 class
-tree_postfix_expression : public tree_expression
+tree_postfix_expression : public tree_unary_expression
 {
 public:
 
   enum type
     {
       unknown,
+      hermitian,
+      transpose,
       increment,
       decrement
     };
 
-  tree_postfix_expression (int l = -1, int c = -1, type t = unknown)
-    : tree_expression (l, c), id (0), etype (t) { }
+  tree_postfix_expression (int l = -1, int c = -1)
+    : tree_unary_expression (l, c), etype (unknown) { }
 
-  tree_postfix_expression (tree_identifier *i, int l = -1, int c = -1,
-			   type t = unknown)
-    : tree_expression (l, c), id (i), etype (t) { }
+  tree_postfix_expression (type t = unknown, tree_expression *e,
+			   int l = -1, int c = -1)
+    : tree_unary_expression (e, l, c), etype (t) { }
 
-  ~tree_postfix_expression (void);
+  ~tree_postfix_expression (void) { }
 
   octave_value eval (bool print = false);
 
   void eval_error (void);
 
   string oper (void) const;
 
-  tree_identifier *ident (void) { return id; }
-
   void accept (tree_walker& tw);
 
 private:
 
-  // Currently, a prefix expression can only apply to an identifier.
-  tree_identifier *id;
-
-  // The type of the expression.
-  type etype;
-};
-
-// Unary expressions.
-
-class
-tree_unary_expression : public tree_expression
-{
-public:
-
-  enum type
-    {
-      unknown,
-      unot,
-      uminus,
-      hermitian,
-      transpose
-    };
-
-  tree_unary_expression (int l = -1, int c = -1, type t = unknown)
-    : tree_expression (l, c), op (0), etype (t) { }
-
-  tree_unary_expression (tree_expression *a, int l = -1, int c = -1,
-			 type t = unknown)
-    : tree_expression (l, c), op (a), etype (t) { }
-
-  ~tree_unary_expression (void)
-    { delete op; }
-
-  octave_value eval (bool print = false);
-
-  void eval_error (void);
-
-  string oper (void) const;
-
-  bool is_prefix_op (void) { return (etype == unot || etype == uminus); }
-
-  tree_expression *operand (void) { return op; }
-
-  void accept (tree_walker& tw);
-
-private:
-
-  // The operand for the expression.
-  tree_expression *op;
-
   // The type of the expression.
   type etype;
 };
 
 // Binary expressions.
 
 class
 tree_binary_expression : public tree_expression
@@ -349,23 +316,21 @@ private:
 // Colon expressions.
 
 class
 tree_colon_expression : public tree_expression
 {
 public:
 
   tree_colon_expression (int l = -1, int c = -1)
-    : tree_expression (l, c, tree_expression::colon),
-      op_base (0), op_limit (0), op_increment (0) { }
+    : tree_expression (l, c), op_base (0), op_limit (0), op_increment (0) { }
 
   tree_colon_expression (tree_expression *a, tree_expression *b,
 			 int l = -1, int c = -1)
-    : tree_expression (l, c, tree_expression::colon),
-      op_base (a), op_limit (b), op_increment (0) { }
+    : tree_expression (l, c), op_base (a), op_limit (b), op_increment (0) { }
 
   ~tree_colon_expression (void)
     {
       delete op_base;
       delete op_limit;
       delete op_increment;
     }
 
diff --git a/src/pt-id.cc b/src/pt-id.cc
--- a/src/pt-id.cc
+++ b/src/pt-id.cc
@@ -68,44 +68,16 @@ tree_identifier::document (const string&
 
 bool
 tree_identifier::is_defined (void)
 {
   return (sym && sym->is_defined ());
 }
 
 void
-tree_identifier::increment (void)
-{
-  if (sym)
-    {
-      if (sym->is_read_only ())
-	::error ("can't redefined read-only variable `%s'", name ().c_str ());
-      else if (sym->is_defined () && sym->is_variable ())
-	reference () . increment ();
-      else
-	::error ("can only increment variables");
-    }
-}
-
-void
-tree_identifier::decrement (void)
-{
-  if (sym)
-    {
-      if (sym->is_read_only ())
-	::error ("can't redefined read-only variable `%s'", name ().c_str ());
-      else if (sym->is_defined () && sym->is_variable ())
-	reference () . decrement ();
-      else
-	::error ("can only decrement variables");
-    }
-}
-
-void
 tree_identifier::eval_undefined_error (void)
 {
   int l = line ();
   int c = column ();
 
   if (l == -1 && c == -1)
     ::error ("`%s' undefined", name ().c_str ());
   else
diff --git a/src/pt-id.h b/src/pt-id.h
--- a/src/pt-id.h
+++ b/src/pt-id.h
@@ -64,20 +64,16 @@ public:
   string name (void) const;
 
   tree_identifier *define (octave_function *f, unsigned int sym_type);
 
   void document (const string& s);
 
   bool is_defined (void);
 
-  void increment (void);
-
-  void decrement (void);
-
   octave_symbol *do_lookup (bool& script_file_executed, bool
 			    exec_script = true);
 
   void link_to_global (void);
 
   void mark_as_static (void);
 
   void mark_as_formal_parameter (void);
diff --git a/src/pt-mvr-base.h b/src/pt-mvr-base.h
--- a/src/pt-mvr-base.h
+++ b/src/pt-mvr-base.h
@@ -34,21 +34,18 @@ class octave_value_list;
 
 // A base class for objects that can be return multiple values
 
 class
 tree_multi_val_ret : public tree_expression
 {
 public:
 
-  tree_multi_val_ret (int l = -1, int c = -1) : tree_expression (l, c) { }
-
-  // XXX FIXME XXX -- this can't be right!
-  tree_multi_val_ret (int l = -1, int c = -1, tree_expression::type et)
-    : tree_expression (l, c, et) { }
+  tree_multi_val_ret (int l = -1, int c = -1)
+    : tree_expression (l, c) { }
 
   ~tree_multi_val_ret (void) { }
 
   bool is_multi_val_ret_expression (void) const
     { return true; }
 
   octave_value eval (bool print = false);
 
diff --git a/src/pt-mvr.cc b/src/pt-mvr.cc
--- a/src/pt-mvr.cc
+++ b/src/pt-mvr.cc
@@ -269,18 +269,16 @@ tree_multi_assignment_expression::eval (
 
   return retval;
 }
 
 octave_value_list
 tree_multi_assignment_expression::eval (bool print, int nargout,
 					const octave_value_list&)
 {
-  assert (etype == tree_expression::multi_assignment);
-
   if (error_state || ! rhs)
     return octave_value_list ();
 
   nargout = lhs->length ();
   octave_value_list tmp_args;
   octave_value_list results = rhs->eval (false, nargout, tmp_args);
 
   if (error_state)
diff --git a/src/pt-mvr.h b/src/pt-mvr.h
--- a/src/pt-mvr.h
+++ b/src/pt-mvr.h
@@ -128,25 +128,23 @@ private:
 // Multi-valued assignment expressions.
 
 class
 tree_multi_assignment_expression : public tree_multi_val_ret
 {
 public:
 
   tree_multi_assignment_expression (bool plhs = false, int l = -1, int c = -1)
-    : tree_multi_val_ret (l, c, tree_expression::multi_assignment),
-      preserve (plhs), lhs (0), rhs (0) { }
+    : tree_multi_val_ret (l, c), preserve (plhs), lhs (0), rhs (0) { }
 
   tree_multi_assignment_expression (tree_return_list *lst,
 				    tree_multi_val_ret *r,
 				    bool plhs = false,
 				    int l = -1, int c = -1)
-    : tree_multi_val_ret (l, c, tree_expression::multi_assignment),
-      preserve (plhs), lhs (lst), rhs (r) { }
+    : tree_multi_val_ret (l, c), preserve (plhs), lhs (lst), rhs (r) { }
 
   ~tree_multi_assignment_expression (void);
 
   octave_value eval (bool print = false);
 
   octave_value_list
   eval (bool print, int nargout, const octave_value_list& args);
 
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -687,20 +687,20 @@ tree_print_code::visit_postfix_expressio
 {
   indent ();
 
   bool in_parens = expr.is_in_parens ();
 
   if (in_parens)
     os << "(";
 
-  tree_identifier *id = expr.ident ();
+  tree_expression *e = expr.operand ();
 
-  if (id)
-    id->accept (*this);
+  if (e)
+    e->accept (*this);
 
   os << expr.oper ();
 
   if (in_parens)
     os << ")";
 }
 
 void
@@ -710,20 +710,20 @@ tree_print_code::visit_prefix_expression
 
   bool in_parens = expr.is_in_parens ();
 
   if (in_parens)
     os << "(";
 
   os << expr.oper ();
 
-  tree_identifier *id = expr.ident ();
+  tree_expression *e = expr.operand ();
 
-  if (id)
-    id->accept (*this);
+  if (e)
+    e->accept (*this);
 
   if (in_parens)
     os << ")";
 }
 
 void
 tree_print_code::visit_return_command (tree_return_command&)
 {
@@ -1041,47 +1041,16 @@ tree_print_code::visit_try_catch_command
     }
 
   indent ();
 
   os << "end_try_catch";
 }
 
 void
-tree_print_code::visit_unary_expression (tree_unary_expression& expr)
-{
-  indent ();
-
-  bool in_parens = expr.is_in_parens ();
-
-  if (in_parens)
-    os << "(";
-
-  tree_expression *op = expr.operand ();
-
-  if (expr.is_prefix_op ())
-    {
-      os << expr.oper ();
-
-      if (op)
-	op->accept (*this);
-    }
-  else
-    {
-      if (op)
-	op->accept (*this);
-
-      os << expr.oper ();
-    }
-
-  if (in_parens)
-    os << ")";
-}
-
-void
 tree_print_code::visit_unwind_protect_command
   (tree_unwind_protect_command& cmd)
 {
   indent ();
 
   os << "unwind_protect";
 
   newline ();
diff --git a/src/pt-pr-code.h b/src/pt-pr-code.h
--- a/src/pt-pr-code.h
+++ b/src/pt-pr-code.h
@@ -125,18 +125,16 @@ public:
   void visit_switch_case (tree_switch_case&);
 
   void visit_switch_case_list (tree_switch_case_list&);
 
   void visit_switch_command (tree_switch_command&);
 
   void visit_try_catch_command (tree_try_catch_command&);
 
-  void visit_unary_expression (tree_unary_expression&);
-
   void visit_unwind_protect_command (tree_unwind_protect_command&);
 
   void visit_while_command (tree_while_command&);
 
 private:
 
   ostream& os;
 
diff --git a/src/pt-walk.h b/src/pt-walk.h
--- a/src/pt-walk.h
+++ b/src/pt-walk.h
@@ -59,17 +59,16 @@ class tree_return_list;
 class tree_simple_assignment_expression;
 class tree_statement;
 class tree_statement_list;
 class subplot;
 class subplot_list;
 class subplot_style;
 class subplot_using;
 class tree_try_catch_command;
-class tree_unary_expression;
 class tree_unwind_protect_command;
 class tree_while_command;
 
 class
 tree_walker
 {
 public:
 
@@ -192,19 +191,16 @@ public:
 
   virtual void
   visit_subplot_using (subplot_using&) = 0;
 
   virtual void
   visit_try_catch_command (tree_try_catch_command&) = 0;
 
   virtual void
-  visit_unary_expression (tree_unary_expression&) = 0;
-
-  virtual void
   visit_unwind_protect_command (tree_unwind_protect_command&) = 0;
 
   virtual void
   visit_while_command (tree_while_command&) = 0;
 
 protected:
 
   tree_walker (void) { }
