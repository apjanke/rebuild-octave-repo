# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1429514773 -7200
#      Mon Apr 20 09:26:13 2015 +0200
# Node ID 8eb72c4ed457bb0c15faff9bc9aa29fa50253144
# Parent  ddc5c766332956347948b5efc8f983ec795b6d24
Add uicontextmenu to annotation objects

* Canvas.cc (Canvas::canvasMousePressEvent): Allow searching in axes that have hidden handles so that annotations objects can be picked by mouse events.
* Canvas.cc (Canvas::canvasMousePressEvent): later disallow manipulating hidden axes in pan/zoomin/zoomout/rotate modes

* annotation.m: add context menu to manipulate annotation properties
* annotation.m: fix wrong position of textbox when position has negative width/height

diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -467,17 +467,17 @@ Canvas::canvasMousePressEvent (QMouseEve
   bool isdblclick = (event->type () == QEvent::MouseButtonDblClick);
 
   if (obj.valid_object ())
     {
       graphics_object figObj (obj.get_ancestor ("figure"));
       graphics_object currentObj, axesObj;
       QList<graphics_object> axesList;
 
-      Matrix children = obj.get_properties ().get_children ();
+      Matrix children = obj.get_properties ().get_all_children ();
       octave_idx_type num_children = children.numel ();
 
       for (int i = 0; i < num_children; i++)
         {
           graphics_object childObj (gh_manager::get_object (children(i)));
 
           if (childObj.isa ("axes"))
             axesList.append (childObj);
@@ -513,17 +513,17 @@ Canvas::canvasMousePressEvent (QMouseEve
                 {
                   Matrix bb = it->get_properties ().get_boundingbox (true);
                   QRectF r (bb(0), bb(1), bb(2), bb(3));
 
                   if (r.contains (event->posF ()))
                     axesObj = *it;
                 }
 
-              if (axesObj)
+              if (axesObj && currentObj)
                 break;
             }
 
           if (axesObj)
             {
               if (axesObj.get_properties ().handlevisibility_is ("on"))
                 Utils::properties<figure> (figObj)
                   .set_currentaxes (axesObj.get_handle ().as_octave_value ());
@@ -599,17 +599,17 @@ Canvas::canvasMousePressEvent (QMouseEve
               }
           }
           break;
 
         case PanMode:
         case RotateMode:
         case ZoomInMode:
         case ZoomOutMode:
-          if (axesObj)
+          if (axesObj && axesObj.get_properties ().handlevisibility_is ("on"))
             {
               bool redraw_figure = true;
 
               if (isdblclick)
                 {
                   if (event->button () == Qt::LeftButton)
                     {
                       axes::properties& ap = Utils::properties<axes> (axesObj);
diff --git a/scripts/plot/appearance/annotation.m b/scripts/plot/appearance/annotation.m
--- a/scripts/plot/appearance/annotation.m
+++ b/scripts/plot/appearance/annotation.m
@@ -301,28 +301,36 @@ function update_figsize_points (hf, dumm
 
 endfunction
 
 function h = buildannot (hax, objtype, pos)
 
   ## Base hggroup
   h = hggroup ("parent", hax);
 
+  ## Base context menu
+  hui = uicontextmenu (get (hax, "parent"));
+
   ## Add common properties
   if (strcmp (graphics_toolkit (), "gnuplot"))
     ## FIXME: this is a workaround for bug #39394 (gnuplot toolkit)
     defprops = {"position", "axesposition", [0.3 0.3 0.1 0.1], ...
                 "units", "textunits", "data"};
   else
     defprops = {"position", "axesposition", [0.3 0.3 0.1 0.1], ...
                 "units", "axesunits", "normalized"};
   endif
   addbaseprops (h, defprops);
   setappdata (h, "__former_units__", "normalized");
 
+  ## Add common menus
+  prop = "units";
+  vals = set (h, prop);
+  addbasemenu (hui, h, prop, vals, "Units");
+
   ## Common updaters
   listener = {@update_position, h, true};
 
   addlistener (hax, "figsize_points", listener);
 
   delfcn = @() dellistener (hax, "figsize_points", listener);
   set (h, "deletefcn", delfcn);
 
@@ -352,47 +360,64 @@ function h = buildannot (hax, objtype, p
 
       ## create line
       hli = line ([pos(1); (pos(1) + pos(3))],
                   [pos(2); (pos(2) + pos(4))],
                   "parent", h, "color", get (h, "color"),
                   "linestyle", get (h, "linestyle"),
                   "linewidth", get (h, "linewidth"));
 
+      linemenu (hui, h);
+      set (hli, "uicontextmenu", hui);
+      
       ## create patch(s) and text
       if (strcmp (objtype, "arrow"))
         [x, y] = arrowcoordinates (h);
         hpa = patch (x, y, get (h, "color"), "parent", h,
                     "edgecolor",  get (h, "color"));
         update_arrow (h, {}, "position", hpa);
+        
+        arrowmenu (hui, h);
+        set (hpa, "uicontextmenu", hui);
+        
       elseif (strcmp (objtype, "doublearrow"))
         [x, y] = arrowcoordinates (h, 1);
         hpa = patch (x, y, get (h, "color"), "parent", h,
                     "edgecolor",  get (h, "color"));
 
         [x, y] = arrowcoordinates (h, 2);
         hpa(2) = patch (x, y, get (h, "color"), "parent", h,
                     "edgecolor",  get (h, "color"));
 
         update_arrow (h, {}, "position", hpa);
+        
+        dblarrowmenu (hui, h);
+        set (hpa, "uicontextmenu", hui);
+        
       elseif (strcmp (objtype, "textarrow"))
         [x, y] = arrowcoordinates (h);
         hpa = patch (x, y, get (h, "color"), "parent", h,
                     "edgecolor",  get (h, "color"));
         update_arrow (h, {}, "position", hpa);
 
         hte = text (get (h, "position")(1), ...
                    get (h, "position")(2), ...
                    get (h, "string"), "parent", h, ...
                    "color", get (h, "color"));
         propnames = textprops ("names");
         for ii = 1:numel (propnames)
           update_text (h, {}, propnames{ii}, hte);
         endfor
         update_text (h, {}, "position", hte);
+
+        arrowmenu (hui, h);
+        textmenu (hui, h);
+        set (hpa, "uicontextmenu", hui);
+        set (hte, "uicontextmenu", hui);
+        
       endif
 
       ## updaters
       addlistener (h, "color", {@update_line, "color", hli});
       addlistener (h, "linestyle", {@update_line, "linestyle", hli});
       addlistener (h, "linewidth", {@update_line, "linewidth", hli});
       addlistener (h, "x", {@update_line, "x", hli});
       addlistener (h, "y", {@update_line, "y", hli});
@@ -458,16 +483,19 @@ function h = buildannot (hax, objtype, p
 
       hr = patch (x, y, "parent", h);
 
       propnames = rectprops ("names");
       for ii = 1:numel (propnames)
         update_rect (h, {}, propnames{ii}, hr, objtype);
       endfor
 
+      rectmenu (hui, h);
+      set (hr, "uicontextmenu", hui);
+
       ## Updaters
       addlistener (h, "position", {@update_rect, "position", hr, objtype});
       for ii = 1:numel (propnames)
         addlistener (h, propnames{ii},
                      {@update_rect, propnames{ii}, hr, objtype});
       endfor
 
     case "textbox"
@@ -480,16 +508,20 @@ function h = buildannot (hax, objtype, p
       hte = text (pos(1), pos(2), get (h, "string"), "parent", h, ...
                  "color", get (h, "color"));
       update_textbox (h, {}, "position", [hte hpa]);
 
       propnames = textboxprops ("names");
       for ii = 1:numel (propnames)
         update_textbox (h, {}, propnames{ii}, [hte hpa]);
       endfor
+      
+      textboxmenu (hui, h);
+      set (hpa, "uicontextmenu", hui);
+      set (hte, "uicontextmenu", hui);
 
       ## Updaters
       addlistener (h, "position", {@update_textbox, "position", [hte hpa]});
       for ii = 1:numel (propnames)
         addlistener (h, propnames{ii},
                      {@update_textbox, propnames{ii}, [hte hpa]});
       endfor
       addlistener (h, "horizontalalignment",
@@ -497,47 +529,100 @@ function h = buildannot (hax, objtype, p
       addlistener (h, "verticalalignment",
                    {@update_textbox, "position", [hte hpa]});
 
   endswitch
 
 endfunction
 
 function props = lineprops (varargin)
+  ## FIXME: Use "axesx(y)lim" instead of "linex(y)data" 
   props = {"color", "color", [0 0 0], ...
            "linestyle",  "linelinestyle", "-", ...
            "linewidth", "linelinewidth", 0.5, ...
            "x", "linexdata", [0.3 0.4], ...
            "y", "lineydata", [0.3 0.4]};
   if (strcmp (varargin, "names"))
     props = props(1:3:end);
   endif
 endfunction
 
+function col = basecolors ()
+  col = {"blue", "black", "cyan", "green", "magenta", "red", ...
+         "white", "yellow", "none"};
+endfunction
+
+function linemenu (hui, hpar)
+  hm = uimenu ("parent", hui, "label", "Line");
+  
+  ## Color
+  vals = basecolors ();
+  addbasemenu (hm, hpar, "Color", vals);
+  
+
+  ## Linestyle
+  vals = set (hpar, "linestyle");
+  addbasemenu (hm, hpar, "Linestyle", vals);
+
+  ## Linewidth
+  vals = [0.5 1 1.5 2];
+  addbasemenu (hm, hpar, "Linewidth", vals);
+endfunction
+
 function props = arrowprops (varargin)
   props = {"headlength", "data", 10, ...
            "headstyle",  "radio", "diamond|ellipse|none|plain|rectangle|vback1|{vback2}|vback3", ...
            "headwidth",  "data", 10};
   if (strcmp (varargin, "names"))
     props = props(1:3:end);
   endif
 endfunction
 
+function arrowmenu (hui, hpar)
+  hm = uimenu ("parent", hui, "label", "Arrowhead");
+  
+  ## Headlength/width
+  vals = 6:2:16;
+  addbasemenu (hm, hpar, "headlength", vals, "Length");
+  addbasemenu (hm, hpar, "headwidth", vals, "Width");
+
+  ## Headstyle
+  vals = set (hpar, "headstyle");
+  addbasemenu (hm, hpar, "Headstyle", vals);
+endfunction
+
 function props = dblarrowprops (varargin)
   props = {"head1length", "data", 10, ...
            "head1style",  "radio", "diamond|ellipse|none|plain|rectangle|vback1|{vback2}|vback3", ...
            "head1width",  "data", 10, ...
            "head2length", "data", 10, ...
            "head2style",  "radio", "diamond|ellipse|none|plain|rectangle|vback1|{vback2}|vback3", ...
            "head2width", "data", 10};
   if (strcmp (varargin, "names"))
     props = props(1:3:end);
   endif
 endfunction
 
+function dblarrowmenu (hui, hpar)
+  hm1 = uimenu ("parent", hui, "label", "Arrowhead #1");
+  hm2 = uimenu ("parent", hui, "label", "Arrowhead #2");
+  
+  ## Headlength/width
+  vals = 6:2:16;
+  addbasemenu (hm1, hpar, "head1length", vals, "Length");
+  addbasemenu (hm1, hpar, "head1width", vals, "Width");
+  addbasemenu (hm2, hpar, "head2length", vals, "Length");
+  addbasemenu (hm2, hpar, "head2width", vals, "Width");
+
+  ## Headstyle
+  vals = set (hpar, "head1style");
+  addbasemenu (hm1, hpar, "head1style", vals, "Headstyle");
+  addbasemenu (hm2, hpar, "head2style", vals, "Headstyle");
+endfunction
+
 function props = textprops (varargin)
   props = {"fontangle", "textfontangle", "normal", ...
            "fontname",  "textfontname", "Helvetica", ...
            "fontsize", "textfontsize", 10, ...
            "fontunits", "textfontunits", "points", ...
            "fontweight",  "textfontweight", "normal", ...
            "horizontalalignment", "texthorizontalalignment", "left", ...
            "interpreter", "textinterpreter", "tex", ...
@@ -549,16 +634,75 @@ function props = textprops (varargin)
            "textmargin", "textmargin", 5, ...
            "textrotation", "textrotation", 0, ...
            "verticalalignment", "textverticalalignment", "middle"};
   if (strcmp (varargin, "names"))
     props = props(1:3:end);
   endif
 endfunction
 
+function stringdlg (hpar, prop)
+  def = get (hpar, prop);
+  if (iscell (def))
+    prompt = arrayfun (@(n) sprintf ("Line #%d:", n), 1:numel (def),
+                       "uniformoutput", false);
+  else
+    prompt = "";
+    def = {def};
+  endif
+  
+  cstr = inputdlg (prompt, prop, 1, def);
+  
+  if (! isempty (cstr))
+    set (hpar, prop, cstr)
+  endif
+endfunction
+
+function textmenu (hui, hpar)
+  hm = uimenu ("parent", hui, "label", "Text");
+
+  ## String;
+  prop = "String";
+  fcn = @() stringdlg (hpar, prop);
+  uimenu (hm, "label", prop, "callback", fcn);
+  
+  ## Font properties
+  prop = "textcolor";
+  vals = basecolors ();
+  addbasemenu (hm, hpar, prop, vals, "Color");
+  prop = "fontsize";
+  vals = 8:2:20;
+  addbasemenu (hm, hpar, prop, vals, "Size");
+  prop = "fontangle";
+  vals = set (hpar, prop);
+  addbasemenu (hm, hpar, prop, vals, "Angle");
+  prop = "fontweight";
+  vals = set (hpar, prop);
+  addbasemenu (hm, hpar, prop, vals, "Weight");
+  prop = "textrotation";
+  vals = 0:90:270;
+  addbasemenu (hm, hpar, prop, vals, "Rotation");
+  
+  prop = "horizontalalignment";
+  vals = set (hpar, prop);
+  addbasemenu (hm, hpar, prop, vals, "Horizontal Alignment", ...
+               "separator", "on");
+  prop = "verticalalignment";
+  vals = set (hpar, prop);
+  addbasemenu (hm, hpar, prop, vals, "Vertical Alignment");
+
+  ## FIXME: Add text background properties when they are supported
+  
+  prop = "interpreter";
+  vals = set (hpar, prop);
+  addbasemenu (hm, hpar, prop, vals, "Interpreter", ...
+               "separator", "on");
+
+endfunction
+
 function props = textboxprops (varargin)
   props = {"backgroundcolor", "patchfacecolor", "none", ...
            "color", "textcolor", [0 0 0], ...
            "edgecolor", "patchedgecolor", [0 0 0], ...
            "facealpha", "patchfacealpha", 1, ...
            "fontangle", "textfontangle", "normal", ...
            "fontname",  "textfontname", "Helvetica", ...
            "fontsize", "textfontsize", 10, ...
@@ -572,32 +716,141 @@ function props = textboxprops (varargin)
            "fitboxtotext", "radio","{on}|off", ...
            "margin", "data", 5, ...
            "verticalalignment", "textverticalalignment",  "middle"};
   if (strcmp (varargin, "names"))
     props = props(1:3:end);
   endif
 endfunction
 
+function textboxmenu (hui, hpar)
+  ## Text properties
+  hm1 = uimenu ("parent", hui, "label", "Text");
+  
+  prop = "String";
+  fcn = @() stringdlg (hpar, prop);
+  uimenu (hm1, "label", prop, "callback", fcn);
+  
+  prop = "Color";
+  vals = basecolors ();
+  addbasemenu (hm1, hpar, prop, vals);
+  prop = "fontsize";
+  vals = 8:2:20;
+  addbasemenu (hm1, hpar, prop, vals, "Size");
+  prop = "fontangle";
+  vals = set (hpar, prop);
+  addbasemenu (hm1, hpar, prop, vals, "Angle");
+  prop = "fontweight";
+  vals = set (hpar, prop);
+  addbasemenu (hm1, hpar, prop, vals, "Weight");
+  
+  prop = "horizontalalignment";
+  vals = set (hpar, prop);
+  addbasemenu (hm1, hpar, prop, vals, "Horizontal Alignment", ...
+               "separator", "on");
+  prop = "verticalalignment";
+  vals = set (hpar, prop);
+  addbasemenu (hm1, hpar, prop, vals, "Vertical Alignment");
+  prop = "Margin";
+  vals = 2:2:10;
+  addbasemenu (hm1, hpar, prop, vals);
+  
+  prop = "interpreter";
+  vals = set (hpar, prop);
+  addbasemenu (hm1, hpar, prop, vals, "Interpreter", ...
+               "separator", "on");
+
+  ## Background properties
+  hm2 = uimenu ("parent", hui, "label", "Background");
+  
+  prop = "fitboxtotext";
+  vals = set (hpar, prop);
+  addbasemenu (hm2, hpar, prop, vals, "Fit box to text");
+  prop = "backgroundcolor";
+  vals = basecolors ();
+  addbasemenu (hm2, hpar, prop, vals, "Face Color");
+  prop = "edgecolor";
+  vals = basecolors ();
+  addbasemenu (hm2, hpar, prop, vals, "Edge Color");
+  prop = "linestyle";
+  vals = set (hpar, prop);
+  addbasemenu (hm2, hpar, prop, vals, "Line Style");
+  prop = "linewidth";
+  vals = 0.5:.5:2;
+  addbasemenu (hm2, hpar, prop, vals, "Line Width");
+endfunction
+
 function props = rectprops (varargin)
   props = {"edgecolor", "patchedgecolor", "k", ...
            "facealpha", "patchfacealpha", 1, ...
            "facecolor", "patchfacecolor", "none", ...
            "linestyle", "patchlinestyle", "-", ...
            "linewidth", "patchlinewidth", 0.5};
   if (strcmp (varargin, "names"))
     props = props(1:3:end);
   endif
 endfunction
 
+function rectmenu (hui, hpar)
+  prop = "facecolor";
+  vals = basecolors ();
+  addbasemenu (hui, hpar, prop, vals, "Face Color");
+  prop = "edgecolor";
+  vals = basecolors ();
+  addbasemenu (hui, hpar, prop, vals, "Edge Color");
+  prop = "linestyle";
+  vals = set (hpar, prop);
+  addbasemenu (hui, hpar, prop, vals, "Line Style");
+  prop = "linewidth";
+  vals = 0.5:.5:2;
+  addbasemenu (hui, hpar, prop, vals, "Line Width");
+endfunction
+
 function addbaseprops (h, proptable)
   cellfun (@(pname, ptype, parg) addproperty (pname, h, ptype, parg),
            proptable(1:3:end), proptable(2:3:end), proptable(3:3:end));
 endfunction
 
+function addbasemenu (hm, hpar, pname, vals, mainlabel = "" )
+  if (isempty (mainlabel))
+    mainlabel = pname;
+  endif
+  
+  h = uimenu ("parent", hm, "label", mainlabel);
+
+  is_numeric = ! iscell (vals);
+  nv = numel (vals);
+  htmp = zeros (1, nv);
+  for ii = 1:nv
+    if (! is_numeric)
+      val = label = vals{ii};
+    else
+      val = vals(ii);
+      label = num2str (val);
+    endif
+    
+    fcn = @() set (hpar, pname, val);
+    htmp(ii) = uimenu (h, "label", label, "callback", fcn);
+  endfor
+  handle_check (hpar, {}, htmp, pname, is_numeric);
+  addlistener (hpar, pname, {@handle_check, htmp, pname, is_numeric})
+endfunction
+
+function handle_check (h, dummy, hmenus, prop, is_numeric)
+  vals = get (hmenus, "label");
+  current = get (h, prop);
+  if (is_numeric)
+    current = num2str (current);
+  endif
+  
+  idx = strcmp (vals, current);
+  set (hmenus(idx), "checked", "on");
+  set (hmenus(! idx), "checked", "off");
+endfunction
+
 function update_position (h1, dummy, h, force = false)
   if (! force)
     pos = convertposition (h, getappdata (h, "__former_units__"),
                            get (h, "units"));
     setappdata (h, "__former_units__", get (h, "units"));
     set (h, "position", pos);
   else
     ## FIXME: Inefficient trick to force all objects to be redrawn
@@ -794,17 +1047,17 @@ function update_textbox (h, dummy, prop,
       otherwise
         if (! any (strcmp (prop, {"fitboxtotext", "position"})))
           set (hte, prop, get (h, prop));
         endif
 
         pos = getnormpos (h);
 
         if (strcmp (get (h, "fitboxtotext"), "on"))
-          pos(3:4) = get (hte, "extent")(3:4);
+          pos(3:4) = get (hte, "extent")(3:4) .* sign (pos(3:4));
         endif
 
         [x, y] = pos2rect (pos);
         set (hpa, "xdata", x', "ydata", y');
 
         switch (get (h, "horizontalalignment"))
           case "left"
             x = x(1);
@@ -990,16 +1243,20 @@ function update_rect (h, dummy, prop, hr
   endif
 endfunction
 
 
 ## FIXME: the additionnal regular axes is necessary for fltk to draw the
 ##        annotation axes.
 %!demo
 %! clf; axes ('visible', 'off');
+%! annotation ('textbox', [.25 .9 .5 .09], 'string', ...
+%!             {'Right Click on annotation objects', ...
+%!              'to customize their appearance'}, ...
+%!             'horizontalalignment', 'center', 'fitboxtotext', 'off');
 %! annotation ('ellipse', [.2 .2 .6 .6], 'linewidth', 4)
 %! ang = pi/2:-pi/2:-pi;
 %! lab = {'N', 'W', 'S', 'E'};
 %! x0 = 0.5;
 %! y0 = 0.5;
 %! r = 0.3;
 %! for ii = 1:4
 %!   x = r * cos (ang(ii)) + x0;
