# HG changeset patch
# User John Donoghue <john.donoghue@ieee.org>
# Date 1420836408 18000
#      Fri Jan 09 15:46:48 2015 -0500
# Node ID 0d3e67f27d57d8e5b02710afebd05d1849a5cb89
# Parent  e75df9e43e6303cacb78b24ede938e4cb0c6ab2c
* audiodevinfo.cc: Avoid conflict with enum names.

diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -430,17 +430,17 @@ or recording using those parameters.\n\
 %! endfor
 %! for i = 1:nin,
 %!   assert (devinfo.input(i).ID, audiodevinfo (1, devinfo.input(i).Name))
 %! endfor
 */
 
 #ifdef HAVE_PORTAUDIO
 
-enum audio_type { INT8, UINT8, INT16, DOUBLE };
+enum audio_type { TYPE_INT8, TYPE_UINT8, TYPE_UINT16, TYPE_DOUBLE };
 
 class audioplayer : public octave_base_value
 {
 public:
   audioplayer (void);
   ~audioplayer (void) {};
 
   // Overloaded base functions
@@ -651,17 +651,17 @@ portaudio_play_callback (const void *, v
   // callback.
 
   const RowVector sound_l = player->get_left ();
   const RowVector sound_r = player->get_right ();
 
   const double *pl = sound_l.data ();
   const double *pr = sound_l.data ();
 
-  if (player->get_type () == DOUBLE)
+  if (player->get_type () == TYPE_DOUBLE)
     {
       switch (player->get_nbits ())
         {
         case 8:
           {
             static double scale_factor = std::pow (2.0, 7) - 1.0;
 
             int8_t *buffer = static_cast<int8_t *> (output);
@@ -746,17 +746,17 @@ portaudio_play_callback (const void *, v
           }
           break;
 
         default:
           error ("invalid player bit depth in callback function");
           break;
         }
     }
-  else if (player->get_type () == INT8)
+  else if (player->get_type () == TYPE_INT8)
     {
       int8_t *buffer = static_cast<int8_t *> (output);
 
       for (unsigned long j = 0; j < frames; j++)
         {
           unsigned int sample_number = player->get_sample_number ();
 
           if (sample_number >= player->get_end_sample ())
@@ -765,17 +765,17 @@ portaudio_play_callback (const void *, v
           unsigned long offset = j * 2;
 
           buffer[offset+0] = pl[sample_number];
           buffer[offset+1] = pr[sample_number];
 
           player->set_sample_number (sample_number + 1);
         }
     }
-  else if (player->get_type () == UINT8)
+  else if (player->get_type () == TYPE_UINT8)
     {
       uint8_t *buffer = static_cast<uint8_t *> (output);
 
       for (unsigned long j = 0; j < frames; j++)
         {
           unsigned int sample_number = player->get_sample_number ();
 
           if (sample_number >= player->get_end_sample ())
@@ -784,17 +784,17 @@ portaudio_play_callback (const void *, v
           unsigned long offset = j * 2;
 
           buffer[offset+0] = pl[sample_number];
           buffer[offset+1] = pr[sample_number];
 
           player->set_sample_number (sample_number + 1);
         }
     }
-  else if (player->get_type () == INT16)
+  else if (player->get_type () == TYPE_UINT16)
     {
       int16_t *buffer = static_cast<int16_t *> (output);
 
       for (unsigned long j = 0; j < frames; j++)
         {
           unsigned int sample_number = player->get_sample_number ();
 
           if (sample_number >= player->get_end_sample ())
@@ -883,40 +883,40 @@ audioplayer::init (void)
   int device = get_id ();
 
   if (device == -1)
     device = Pa_GetDefaultOutputDevice ();
 
   output_parameters.device = device;
   output_parameters.channelCount = 2;
 
-  if (type == DOUBLE)
+  if (type == TYPE_DOUBLE)
     output_parameters.sampleFormat = bits_to_format (get_nbits ());
-  else if (type == INT8)
+  else if (type == TYPE_INT8)
     output_parameters.sampleFormat = paInt8;
-  else if (type == UINT8)
+  else if (type == TYPE_UINT8)
     output_parameters.sampleFormat = paUInt8;
-  else if (type == INT16)
+  else if (type == TYPE_UINT16)
     output_parameters.sampleFormat = paInt16;
 
   output_parameters.suggestedLatency = Pa_GetDeviceInfo (device)->defaultHighOutputLatency;
   output_parameters.hostApiSpecificStreamInfo = 0;
 }
 
 void
 audioplayer::set_y (const octave_value& y_arg)
 {
   if (y_arg.is_int8_type ())
-    type = INT8;
+    type = TYPE_INT8;
   else if (y_arg.is_uint8_type ())
-    type = UINT8;
+    type = TYPE_UINT8;
   else if (y_arg.is_int16_type ())
-    type = INT16;
+    type = TYPE_UINT16;
   else
-    type = DOUBLE;
+    type = TYPE_DOUBLE;
 
   y = y_arg.matrix_value ();
 
   if (y.rows () > 2)
     y = y.transpose ();
 
   channels = y.rows ();
   left = y.row (0);
