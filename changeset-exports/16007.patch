# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1360167415 18000
#      Wed Feb 06 11:16:55 2013 -0500
# Node ID a60b6911842cf4d9f5e32f425cfce766bfab5f8d
# Parent  9978c44ab12cce04c56bb2fae704e6ac6daacad8
# Parent  1045790f9be4a33d0a23224def855e0295f13c05
Merge in Michael's changes

diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -1136,17 +1136,18 @@ arrayfun (@@str2num, [1234],\n\
 @end deftypefn")
 {
   octave_value_list retval;
   int nargin = args.length ();
   int nargout1 = (nargout < 1 ? 1 : nargout);
 
   if (nargin < 2)
     {
-      error ("arrayfun: function requires at least 2 arguments");
+      error_with_id ("Octave:invalid-fun-call", 
+                           "arrayfun: function requires at least 2 arguments");
       print_usage ();
       return retval;
     }
 
   octave_value func = args(0);
   bool symbol_table_lookup = false;
 
   if (func.is_string ())
@@ -1167,17 +1168,18 @@ arrayfun (@@str2num, [1234],\n\
           if (ptr_func && ! error_state)
             func = octave_value (ptr_func, true);
         }
       else
         {
           func = symbol_table::find_function (name);
 
           if (func.is_undefined ())
-            error ("arrayfun: invalid function NAME: %s", name.c_str ());
+            error_with_id ("Octave:invalid-input-arg",
+                         "arrayfun: invalid function NAME: %s", name.c_str ());
 
           symbol_table_lookup = true;
         }
 
       if (error_state)
         return retval;
     }
 
@@ -1245,17 +1247,18 @@ arrayfun (@@str2num, [1234],\n\
             {
               fdims = inputs[j].dims ();
               k = inputs[j].numel ();
 
               for (int i = j+1; i < nargin; i++)
                 {
                   if (mask[i] && inputs[i].dims () != fdims)
                     {
-                      error ("arrayfun: dimensions mismatch");
+                      error_with_id ("Octave:invalid-input-arg", 
+                                              "arrayfun: dimensions mismatch");
                       return retval;
                     }
                 }
               break;
             }
         }
 
 
@@ -1292,17 +1295,18 @@ arrayfun (@@str2num, [1234],\n\
                 = get_output_list (count, nargout, inputlist, func,
                                    error_handler);
 
               if (error_state)
                 return retval;
 
               if (nargout > 0 && tmp.length () < nargout)
                 {
-                  error ("arrayfun: function returned fewer than nargout values");
+                  error_with_id ("Octave:invalid-fun-call", 
+                      "arrayfun: function returned fewer than nargout values");
                   return retval;
                 }
 
               if  (nargout > 0
                    || (nargout == 0
                        && tmp.length () > 0 && tmp(0).is_defined ()))
                 {
                   int num_to_copy = tmp.length ();
@@ -1317,17 +1321,18 @@ arrayfun (@@str2num, [1234],\n\
                           if (tmp(j).is_defined ())
                             {
                               octave_value val = tmp(j);
 
                               if (val.numel () == 1)
                                 retv[j] = val.resize (fdims);
                               else
                                 {
-                                  error ("arrayfun: all values must be scalars when UniformOutput = true");
+                                  error_with_id ("Octave:invalid-fun-call",
+             "arrayfun: all values must be scalars when UniformOutput = true");
                                   break;
                                 }
                             }
                         }
                     }
                   else
                     {
                       for (int j = 0; j < num_to_copy; j++)
@@ -1344,17 +1349,18 @@ arrayfun (@@str2num, [1234],\n\
                                       retv[j].assign (octave_value::op_asn_eq,
                                                       idx_type, idx_list, val);
 
                                       if (error_state)
                                         break;
                                     }
                                   else
                                     {
-                                      error ("arrayfun: all values must be scalars when UniformOutput = true");
+                                      error_with_id ("Octave:invalid-fun-call",
+              "arrayfun: all values must be scalars when UniformOutput = true");
                                       break;
                                     }
                                 }
                             }
                         }
                     }
                 }
 
@@ -1402,17 +1408,18 @@ arrayfun (@@str2num, [1234],\n\
                 = get_output_list (count, nargout, inputlist, func,
                                    error_handler);
 
               if (error_state)
                 return retval;
 
               if (nargout > 0 && tmp.length () < nargout)
                 {
-                  error ("arrayfun: function returned fewer than nargout values");
+                  error_with_id ("Octave:invalid-fun-call", 
+                      "arrayfun: function returned fewer than nargout values");
                   return retval;
                 }
 
               if  (nargout > 0
                    || (nargout == 0
                        && tmp.length () > 0 && tmp(0).is_defined ()))
                 {
                   int num_to_copy = tmp.length ();
@@ -1433,17 +1440,18 @@ arrayfun (@@str2num, [1234],\n\
               retval.resize (nargout1);
 
               for (int j = 0; j < nargout1; j++)
                 retval(j) = results[j];
             }
         }
     }
   else
-    error ("arrayfun: argument NAME must be a string or function handle");
+    error_with_id ("Octave:invalid-fun-call", 
+                "arrayfun: argument NAME must be a string or function handle");
 
   return retval;
 }
 
 /*
 %!function r = __f11 (x)
 %!  global __arrayfun_test_num_outputs__;
 %!  __arrayfun_test_num_outputs__ = nargout;
diff --git a/scripts/plot/legend.m b/scripts/plot/legend.m
--- a/scripts/plot/legend.m
+++ b/scripts/plot/legend.m
@@ -869,16 +869,17 @@ function [hlegend2, hobjects2, hplot2, t
                "orientation", orientation, "textposition", textpos);
         else
           set (hlegend, "location", position, "orientation", orientation,
                "textposition", textpos);
         endif
         if (addprops)
           addlistener (hlegend, "edgecolor", @updatelegendtext);
           addlistener (hlegend, "textcolor", @updatelegendtext);
+          addlistener (hlegend, "fontsize", @updatelegendtext);
           addlistener (hlegend, "interpreter", @updatelegendtext);
           addlistener (hlegend, "location", @updatelegend);
           addlistener (hlegend, "orientation", @updatelegend);
           addlistener (hlegend, "string", @updatelegend);
           addlistener (hlegend, "textposition", @updatelegend);
         endif
       unwind_protect_cleanup
         set (fig, "currentaxes", curaxes);
@@ -910,17 +911,20 @@ function updatelegend (h, d)
 endfunction
 
 function updatelegendtext (h, d)
   hax = get (h, "userdata").handle;
   kids = get (h, "children");
   text_kids = findobj (kids, "-property", "interpreter", "type", "text");
   interpreter = get (h, "interpreter");
   textcolor = get (h, "textcolor");
-  set (text_kids, "interpreter", interpreter, "color", textcolor);
+  fontsize = get (h, "fontsize");
+  set (text_kids, "interpreter", interpreter,
+                  "fontsize", fontsize,
+                  "color", textcolor);
 endfunction
 
 function hideshowlegend (h, d, ca, pos1, pos2)
   isvisible = strcmp (get (h, "visible"), "off");
   if (! isvisible)
     kids = get (h, "children");
     for i = 1 : numel (kids)
       if (! strcmp (get (kids(i), "visible"), "off"))
diff --git a/scripts/plot/private/__go_draw_axes__.m b/scripts/plot/private/__go_draw_axes__.m
--- a/scripts/plot/private/__go_draw_axes__.m
+++ b/scripts/plot/private/__go_draw_axes__.m
@@ -1586,17 +1586,29 @@ function __go_draw_axes__ (h, plot_strea
           pos = "";
       endswitch
       if (__gnuplot_has_feature__ ("key_has_font_properties"))
         [fontname, fontsize] = get_fontname_and_size (hlgnd);
         fontspec = create_fontspec (fontname, fontsize, gnuplot_term);
       else
         fontspec = "";
       endif
-      colorspec = get_text_colorspec (hlgnd.textcolor, mono);
+      textcolors = get (findobj (hlgnd.children, "type", "text"), "color");
+      if (iscell (textcolors))
+        textcolors = cell2mat (textcolors);
+        textcolors = unique (textcolors, "rows");
+      endif
+      if (rows (textcolors) > 1)
+        ## Gnuplot is unable to assign arbitrary colors to each text entry
+        ## for the key/legend.  But, the text color can be set to match the
+        ## color of the plot object.
+        colorspec = "textcolor variable";
+      else
+        colorspec = get_text_colorspec (textcolors, mono);
+      endif
       fprintf (plot_stream, "set key %s %s;\nset key %s %s %s %s %s;\n",
                inout, pos, box, reverse, horzvert, fontspec, colorspec);
     else
       fputs (plot_stream, "unset key;\n");
     endif
     fputs (plot_stream, "set style data lines;\n");
 
     cmap = [cmap; addedcmap];
@@ -2345,17 +2357,17 @@ function str = no_super_sub_scripts (str
     str = char (labels);
   endif
 endfunction
 
 function str = __tex2enhanced__ (str, fnt, it, bld)
   persistent sym = __setup_sym_table__ ();
   persistent flds = fieldnames (sym);
 
-  [s, e, m] = regexp (str,'\\\\([a-zA-Z]+|0)','start','end','matches');
+  [s, e, m] = regexp (str, "\\\\([a-zA-Z]+|0)", "start", "end", "matches");
 
   for i = length (s) : -1 : 1
     ## special case for "\0"  and replace with "{/Symbol \306}'
     if (strncmp (m{i}, '\0', 2))
       str = cstrcat (str(1:s(i) - 1), '{/Symbol \306}', str(s(i) + 2:end));
     else
       f = m{i}(2:end);
       if (isfield (sym, f))
