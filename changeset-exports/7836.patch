# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1203597904 -3600
#      Thu Feb 21 13:45:04 2008 +0100
# Node ID 4fb2db9c87dd83dc77f621636f8a287060a340a7
# Parent  ca8b97bb952cb49c70cfd4f4479bf66eb1ec8c22
Turn cdata properties into array_property. Add min/max computation to array_property.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -14,16 +14,42 @@ 2008-06-04  Shai Ayal  <shaiay@users.sou
 
 	* graphics.h.in (axes::properties::update_xlim): call the new
 	axes::properties::calc_ticks_and_lims method
 	(axes::properties::update_ylim): ditto
 	(axes::properties::update_zlim): ditto
 
 2008-06-04  Michael Goffioul <michael.goffioul@gmail.com>
 
+	* graphics.h.in (array_property::array_property(void)): New default
+	constructor.
+	(array_property::xmin, array_property:xmax, array_property::xminp,
+	array_property::min_val, array_property::max_val,
+	array_property::min_pos): New fields and accessors to hold min/max
+	values of the array data.
+	(array_property::get_data_limits): New method to compute min/max
+	values of the array data.
+	(base_properties::get_cdata_property,
+	graphics_object::get_cdata_property): Return array_property.
+	(image::properties::cdata, surface::properties::cdata,
+	patch::properties::cdata, patch::properties::facevertexcdata): Turn
+	into array_property type.
+	(image::properties::init, surface::properties::init,
+	patch::properties::init): Add constraint initialization for cdata and
+	facevertexcdata (patch only).
+	* genprops.awk (emit_get_array): New function to emit accessor for
+	array_property.
+	(emit_declarations): Use it.
+	* graphics.cc (get_array_limits): New template function to compute
+	min/max values of an Array<T> object.
+	(array_property::get_data_limits): New method to compute min/max
+	values of the array data, using get_array_limits.
+	(check_limit_vals): Overridden function with array_property.
+	(axes::update_axis_limits): Turn cdata property into array_property.
+
 	* graphics.h.in (patch::properties::get_color_data): New utility
 	function to retrieve actual color data.
 	* graphics.cc (patch::properties::get_color_data): Likewise.
 
 	* graphics.h.in (base_scaler::is_linear, lin_scaler::is_linear,
 	scaler::is_linear): New method to detect linear scales.
 	(graphics_xform::scale(Matrix)): New method to scale 2D/3D coordinates
 	directly.
diff --git a/src/genprops.awk b/src/genprops.awk
--- a/src/genprops.awk
+++ b/src/genprops.awk
@@ -206,16 +206,26 @@ function emit_get_callback (i)
 function emit_get_data (i)
 {
   emit_get_accessor(i, "NDArray", "array_value");
 
   printf ("  data_property get_%s_property (void) const { return %s; }\n",
           name[i], name[i]);
 }
 
+## array_property
+
+function emit_get_array (i)
+{
+  emit_get_accessor(i, "octave_value", "get");
+
+  printf ("  array_property get_%s_property (void) const { return %s; }\n",
+          name[i], name[i]);
+}
+
 ## common section
 
 function emit_common_declarations ()
 {
   printf ("public:\n");
   printf ("  properties (const graphics_handle& mh, const graphics_handle& p);\n\n");
   printf ("  ~properties (void) { }\n\n");
   printf ("  void set (const caseless_str& pname, const octave_value& val);\n\n");
@@ -239,28 +249,29 @@ function emit_declarations ()
 
   if (idx > 0)
     print "\npublic:\n";
 
   for (i = 1; i <= idx; i++)
   {
     if (emit_get[i])
     {
-      if (type[i] == "array_property" \
-	  || type[i] == "row_vector_property" \
-	  || type[i] == "any_property")
+      if (type[i] == "any_property")
         emit_get_accessor(i, "octave_value", "get");
       else if (type[i] == "handle_property")
         emit_get_accessor(i, "graphics_handle", "handle_value");
       else if (type[i] == "string_property")
         emit_get_accessor(i, "std::string", "string_value");
       else if (type[i] == "double_property")
         emit_get_accessor(i, "double", "double_value");
       else if (type[i] == "data_property")
         emit_get_data(i);
+      else if (type[i] == "array_property" \
+	       || type[i] == "row_vector_property")
+        emit_get_array(i);
       else if (type[i] == "bool_property")
         emit_get_bool(i);
       else if (type[i] == "radio_property")
         emit_get_radio(i);
       else if (type[i] == "color_property")
         emit_get_color(i);
       else if (type[i] == "callback_property")
         emit_get_callback(i);
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -423,16 +423,42 @@ convert_cdata (const base_properties& pr
       av[i]       = cmapv[idx];
       av[i+lda]   = cmapv[idx+nc];
       av[i+2*lda] = cmapv[idx+2*nc];
     }
 
   return octave_value (a);
 }
 
+template<class T>
+static void
+get_array_limits (const Array<T>& m, double& emin, double& emax,
+		  double& eminp)
+{
+  const T *data = m.data ();
+  int n = m.numel ();
+
+  for (int i = 0; i < n; i++)
+    {
+      double e = double (data[i]);
+
+      if (! (xisinf (e) || xisnan (e)))
+	{
+	  if (e < emin)
+	    emin = e;
+
+	  if (e > emax)
+	    emax = e;
+
+	  if (e >= 0 && e < eminp)
+	    eminp = e;
+	}
+    }
+}
+
 // ---------------------------------------------------------------------
 
 radio_values::radio_values (const std::string& opt_string)
 {
   size_t beg = 0;
   size_t len = opt_string.length ();
   bool done = len == 0;
 
@@ -564,17 +590,17 @@ array_property::validate (const octave_v
   if (v.is_empty () && v.is_double_type ())
     return true;
 
   // check value type
   if (type_constraints.size () > 0)
     {
       for (std::list<std::string>::const_iterator it = type_constraints.begin ();
            ! xok && it != type_constraints.end (); ++it)
-        if ((*it) == v.type_name ())
+        if ((*it) == v.class_name ())
           xok = true;
     }
   else
     xok = v.is_double_type ();
 
   if (xok)
     {
       dim_vector vdims = v.dims ();
@@ -601,16 +627,48 @@ array_property::validate (const octave_v
       else
         return true;
     }
 
   return xok;
 }
 
 void
+array_property::get_data_limits (void)
+{
+  xmin = xminp = octave_Inf;
+  xmax = -octave_Inf;
+
+  if (! data.is_empty ())
+    {
+      if (data.is_integer_type ())
+	{
+	  if (data.is_int8_type ())
+	    get_array_limits (data.int8_array_value (), xmin, xmax, xminp);
+	  else if (data.is_uint8_type ())
+	    get_array_limits (data.uint8_array_value (), xmin, xmax, xminp);
+	  else if (data.is_int16_type ())
+	    get_array_limits (data.int16_array_value (), xmin, xmax, xminp);
+	  else if (data.is_uint16_type ())
+	    get_array_limits (data.uint16_array_value (), xmin, xmax, xminp);
+	  else if (data.is_int32_type ())
+	    get_array_limits (data.int32_array_value (), xmin, xmax, xminp);
+	  else if (data.is_uint32_type ())
+	    get_array_limits (data.uint32_array_value (), xmin, xmax, xminp);
+	  else if (data.is_int64_type ())
+	    get_array_limits (data.int64_array_value (), xmin, xmax, xminp);
+	  else if (data.is_uint64_type ())
+	    get_array_limits (data.uint64_array_value (), xmin, xmax, xminp);
+	}
+      else
+	get_array_limits (data.array_value (), xmin, xmax, xminp);
+    }
+}
+
+void
 handle_property::set (const octave_value& v)
 {
   double dv = v.double_value ();
 
   if (! error_state)
     {
       graphics_handle gh = gh_manager::lookup (dv);
 
@@ -2373,31 +2431,49 @@ axes::get_default (const caseless_str& n
       graphics_object parent_obj = gh_manager::get_object (parent);
 
       retval = parent_obj.get_default (name);
     }
 
   return retval;
 }
 
+// FIXME: Remove in case all data_property are converted into
+// array_property
 static void
 check_limit_vals (double& min_val, double& max_val, double& min_pos,
 		  const data_property& data)
 {
   double val = data.min_val ();
   if (! (xisinf (val) || xisnan (val)) && val < min_val)
     min_val = val;
   val = data.max_val ();
   if (! (xisinf (val) || xisnan (val)) && val > max_val)
     max_val = val;
   val = data.min_pos ();
   if (! (xisinf (val) || xisnan (val)) && val > 0 && val < min_pos)
     min_pos = val;
 }
 
+// FIXME: Maybe this should go into array_property class?
+static void
+check_limit_vals (double& min_val, double& max_val, double& min_pos,
+		  const array_property& data)
+{
+  double val = data.min_val ();
+  if (! (xisinf (val) || xisnan (val)) && val < min_val)
+    min_val = val;
+  val = data.max_val ();
+  if (! (xisinf (val) || xisnan (val)) && val > max_val)
+    max_val = val;
+  val = data.min_pos ();
+  if (! (xisinf (val) || xisnan (val)) && val > 0 && val < min_pos)
+    min_pos = val;
+}
+
 // magform(x) Returns (a, b), where x = a * 10^b, a >= 1., and b is
 // integral.
 
 static void magform (double x, double& a, int& b)
 {
   if (x == 0)
     {
       a = 0;
@@ -2676,17 +2752,17 @@ axes::update_axis_limits (const std::str
       if (xproperties.climmode_is ("auto"))
 	{
 	  for (octave_idx_type i = 0; i < n; i++)
 	    {
 	      graphics_object obj = gh_manager::get_object (kids(i));
 
 	      if (obj.isa ("image") || obj.isa ("patch") || obj.isa ("surface"))
 		{
-		  data_property cdata = obj.get_cdata_property ();
+		  array_property cdata = obj.get_cdata_property ();
 
 		  check_limit_vals (min_val, max_val, min_pos, cdata);
 		}
 	    }
 
 	  if (min_val == max_val)
 	    max_val = min_val + 1;
 
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -712,48 +712,70 @@ private:
   double current_val;
 };
 
 // ---------------------------------------------------------------------
 
 class array_property : public base_property
 {
 public:
+  array_property (void)
+      : base_property ("", graphics_handle ()), data (Matrix ())
+    {
+      get_data_limits ();
+    }
+
   array_property (const std::string& nm, const graphics_handle& h,
                   const octave_value& m)
-    : base_property (nm, h), data (m) { }
+      : base_property (nm, h), data (m)
+    {
+      get_data_limits ();
+    }
 
   octave_value get (void) const { return data; }
 
   void set (const octave_value& v)
     {
       if (validate (v))
-        data = v;
+	{
+	  data = v;
+
+	  get_data_limits ();
+	}
       else
         error ("invalid value for array property \"%s\"",
                get_name ().c_str ());
     }
 
   void add_constraint (const std::string& type)
     { type_constraints.push_back (type); }
 
   void add_constraint (const dim_vector& dims)
     { size_constraints.push_back (dims); }
 
+  double min_val (void) const { return xmin; }
+  double max_val (void) const { return xmax; }
+  double min_pos (void) const { return xminp; }
+
   array_property& operator = (const octave_value& val)
     {
       set (val);
       return *this;
     }
 
 private:
   OCTINTERP_API bool validate (const octave_value& v);
 
+  OCTINTERP_API void get_data_limits (void);
+
 protected:
   octave_value data;
+  double xmin;
+  double xmax;
+  double xminp;
   std::list<std::string> type_constraints;
   std::list<dim_vector> size_constraints;
 };
 
 class row_vector_property : public array_property
 {
 public:
   row_vector_property (const std::string& nm, const graphics_handle& h,
@@ -1652,20 +1674,20 @@ public:
   }
 
   virtual data_property get_xudata_property (void) const
   {
     error ("get: invalid property \"xudata\"");
     return data_property ();
   }
 
-  virtual data_property get_cdata_property (void) const
+  virtual array_property get_cdata_property (void) const
   {
     error ("get: invalid property \"cdata\"");
-    return data_property ();
+    return array_property ();
   }
 
 protected:
   // properties common to all objects
   bool_property beingdeleted;
   radio_property busyaction;
   callback_property buttondownfcn;
   // FIXME: use a property class for children
@@ -2027,17 +2049,17 @@ public:
   }
 
   data_property get_xudata_property (void) const
   {
     const base_properties& props = get_properties ();
     return props.get_xudata_property ();
   }
 
-  data_property get_cdata_property (void) const
+  array_property get_cdata_property (void) const
   {
     const base_properties& props = get_properties ();
     return props.get_cdata_property ();
   }
 
   graphics_backend get_backend (void) const { return rep->get_backend (); }
 
 private:
@@ -2852,23 +2874,27 @@ public:
   {
   public:
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES(image)
       data_property xdata l , Matrix ()
       data_property ydata l , Matrix ()
-      data_property cdata l , Matrix ()
+      array_property cdata l , Matrix ()
       radio_property cdatamapping a , "{scaled}|direct"
     END_PROPERTIES
 
   protected:
     void init (void)
       {
+	cdata.add_constraint ("double");
+	cdata.add_constraint ("uint8");
+	cdata.add_constraint (dim_vector (-1, -1));
+	cdata.add_constraint (dim_vector (-1, -1, 3));
       }
   };
 
 private:
   properties xproperties;
 
 public:
   image (const graphics_handle& mh, const graphics_handle& p)
@@ -2898,21 +2924,21 @@ public:
     
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES(patch)
       data_property xdata l , Matrix ()
       data_property ydata l , Matrix ()
       data_property zdata l , Matrix ()
-      data_property cdata l , Matrix ()
+      array_property cdata l , Matrix ()
       radio_property cdatamapping , "{scaled}|direct"
       array_property faces , Matrix ()
       data_property facevertexalphadata , Matrix ()
-      data_property facevertexcdata , Matrix ()
+      array_property facevertexcdata , Matrix ()
       array_property vertices , Matrix ()
       array_property vertexnormals , Matrix ()
       radio_property normalmode , "{auto}|manual"
       color_property facecolor , "{flat}|none|interp"
       double_property facealpha , 1.0
       radio_property facelighting , "flat|{none}|gouraud|phong"
       color_property edgecolor , color_property (color_values (0, 0, 0), radio_values ("flat|none|interp"))
       double_property edgealpha , 1.0
@@ -2934,16 +2960,20 @@ public:
       radio_property interpreter , "{tex}|none|latex"
     END_PROPERTIES
 
   protected:
     void init (void)
       {
         vertices.add_constraint (dim_vector (-1, 2));
         vertices.add_constraint (dim_vector (-1, 3));
+	cdata.add_constraint (dim_vector (-1, -1));
+	cdata.add_constraint (dim_vector (-1, -1, 3));
+	facevertexcdata.add_constraint (dim_vector (-1, 1));
+	facevertexcdata.add_constraint (dim_vector (-1, 3));
       }
   };
 
 private:
   properties xproperties;
 
 public:
   patch (const graphics_handle& mh, const graphics_handle& p)
@@ -2973,18 +3003,17 @@ public:
 
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES(surface)
       data_property xdata lu , Matrix ()
       data_property ydata lu , Matrix ()
       data_property zdata lu , Matrix ()
-      // FIXME: cdata can be of type "double" or "uint8"
-      data_property cdata l , Matrix ()
+      array_property cdata l , Matrix ()
       radio_property cdatamapping a , "{scaled}|direct"
       color_property facecolor , "{flat}|none|interp|texturemap"
       // FIXME: should be a double-radio property
       double_property facealpha , 1.0
       color_property edgecolor , color_property (color_values (0, 0, 0), radio_values ("flat|none|interp"))
       radio_property linestyle , "{-}|--|:|-.|none"
       double_property linewidth , 0.5
       radio_property marker , "{none}|s|o|x|+|.|*|<|>|v|^|d|p|h"
@@ -3013,21 +3042,20 @@ public:
 
   protected:
     void init (void)
       {
 	alphadata.add_constraint ("double");
 	alphadata.add_constraint ("uint8");
 	alphadata.add_constraint (dim_vector (-1, -1));
 	vertexnormals.add_constraint (dim_vector (-1, -1, 3));
-	// FIXME: uncomment this when cdata has the right type
-	//cdata.add_constraint ("double");
-	//cdata.add_constraint ("double");
-	//cdata.add_constraint (dim_vector (-1, -1));
-	//cdata.add_constraint (dim_vector (-1, -1, 3));
+	cdata.add_constraint ("double");
+	cdata.add_constraint ("uint8");
+	cdata.add_constraint (dim_vector (-1, -1));
+	cdata.add_constraint (dim_vector (-1, -1, 3));
       }
 
   private:
     void update_normals (void);
 
     void update_xdata (void) { update_normals (); }
     void update_ydata (void) { update_normals (); }
     void update_zdata (void) { update_normals (); }
