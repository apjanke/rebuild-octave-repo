# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1267473745 18000
#      Mon Mar 01 15:02:25 2010 -0500
# Node ID 60acc47c203fe59bad62bfda22f11a91e3dee590
# Parent  f578e6468d0c7707fb9593851931e2325a5f8fc8
configure checks for complex element setter/reference accessor methods

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,14 @@
+2010-03-01  John W. Eaton  <jwe@octave.org>
+
+	* acinclude.m4 (OCTAVE_CXX_COMPLEX_REFERENCE_ACCESSORS,
+	OCTAVE_CXX_COMPLEX_SETTERS): New macros.
+	* configure.ac: Use them.
+
 2010-02-25  John W. Eaton  <jwe@octave.org>
 
 	* gdbinit: New file.
 	* Makefile.am (EXTRA_DIST): Add it to the list.
 	(all-local): Depend on .gdbinit.
 	(.gdbinit): New rule.
 
 2010-02-22  John W. Eaton  <jwe@octave.org>
diff --git a/acinclude.m4 b/acinclude.m4
--- a/acinclude.m4
+++ b/acinclude.m4
@@ -101,16 +101,48 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]],
 [[void test(char *); int length(); char x[length()]; test(x);]])],
 octave_cv_dynamic_auto_arrays=yes, octave_cv_dynamic_auto_arrays=no)])
 if test $octave_cv_dynamic_auto_arrays = yes; then
 AC_DEFINE(HAVE_DYNAMIC_AUTO_ARRAYS,1,[Define if C++ supports dynamic auto arrays])
 fi
 AC_LANG_POP(C++)
 ])
 dnl
+dnl See if the C++ library has functions to set real and imaginary
+dnl parts of complex numbers independently.
+dnl
+AC_DEFUN([OCTAVE_CXX_COMPLEX_SETTERS],
+[AC_CACHE_CHECK([whether complex class can set components independently],
+octave_cv_cxx_complex_setters,
+[AC_LANG_PUSH(C++)
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <complex>]],
+[[std::complex<double> x; x.real (1.0); x.imag (2.0);]])],
+octave_cv_cxx_complex_setters=yes, octave_cv_cxx_complex_setters=no)])
+if test $octave_cv_cxx_complex_setters = yes; then
+AC_DEFINE(HAVE_CXX_COMPLEX_SETTERS,1,[Define if C++ complex class has void real (T) and void imag (T) methods])
+fi
+AC_LANG_POP(C++)
+])
+dnl
+dnl See if the C++ library has functions to access real and imaginary
+dnl parts of complex numbers independently via references.
+dnl
+AC_DEFUN([OCTAVE_CXX_COMPLEX_REFERENCE_ACCESSORS],
+[AC_CACHE_CHECK([whether complex class can reference components independently],
+octave_cv_cxx_complex_reference_accessors,
+[AC_LANG_PUSH(C++)
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <complex>]],
+[[std::complex<double> x; x.real () = 1.0; x.imag () = 1.0;]])],
+octave_cv_cxx_complex_reference_accessors=yes, octave_cv_cxx_complex_reference_accessors=no)])
+if test $octave_cv_cxx_complex_reference_accessors = yes; then
+AC_DEFINE(HAVE_CXX_COMPLEX_REFERENCE_ACCESSORS,1,[Define if C++ complex class has T& real (void) and T& imag (void) methods])
+fi
+AC_LANG_POP(C++)
+])
+dnl
 dnl The following test is from Karl Berry's Kpathseach library.  I'm
 dnl including it here in case we someday want to make the use of
 dnl kpathsea optional.
 dnl
 dnl Some BSD putenv's, e.g., FreeBSD, do malloc/free's on the environment.
 dnl This test program is due to Mike Hibler <mike@cs.utah.edu>.
 dnl We don't actually need to run this if we don't have putenv, but it
 dnl doesn't hurt.
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -602,16 +602,19 @@ AC_SUBST(FC)
 OCTAVE_F77_FLAG(-ffloat-store, [
 AC_MSG_RESULT([setting F77_FLOAT_STORE_FLAG to -ffloat-store])
 F77_FLOAT_STORE_FLAG=-ffloat-store
 AC_SUBST(F77_FLOAT_STORE_FLAG)
 ])
 
 OCTAVE_IEEE754_DATA_FORMAT
 
+OCTAVE_CXX_COMPLEX_SETTERS
+OCTAVE_CXX_COMPLEX_REFERENCE_ACCESSORS
+
 ### Check for the QHull library
 
 OCTAVE_CHECK_LIBRARY(qhull, QHull,
   [Qhull library not found -- this will result in loss of functionality of some geometry functions.],
   [qhull/qhull_a.h], [qh_qhull], [], [],
   [warn_qhull=
    OCTAVE_CHECK_QHULL_VERSION
    OCTAVE_CHECK_QHULL_OK([TEXINFO_QHULL="@set HAVE_QHULL"
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-03-01  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/str2double.cc (set_component): Use autoconf
+	macros instead of checking predefined compiler macros.
+	(str2double1): Pass val to set_component, not c.
+
 2010-03-01  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/str2double.cc (set_component): New helper func.
 	(str2double1): Use it here.
 
 2010-03-01  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/str2double.cc (str2double1): Use ISO-conformant code
diff --git a/src/DLD-FUNCTIONS/str2double.cc b/src/DLD-FUNCTIONS/str2double.cc
--- a/src/DLD-FUNCTIONS/str2double.cc
+++ b/src/DLD-FUNCTIONS/str2double.cc
@@ -134,22 +134,26 @@ extract_num (std::istringstream& is, dou
     num = -num;
 
   return is;
 }
 
 static inline void
 set_component (Complex& c, double num, bool imag)
 {
-  // FIXME: this is C++-0x.
-#if defined (__GNUC__) || defined (__MSVC__)
+#if defined (HAVE_CXX_COMPLEX_SETTERS)
   if (imag)
-    c.imag (r);
+    c.imag (num);
   else
-    c.real (r);
+    c.real (num);
+#elif defined (HAVE_CXX_COMPLEX_REFERENCE_ACCESSORS)
+  if (imag)
+    c.imag () = num;
+  else
+    c.real () = num;
 #else
   if (imag)
     c = Complex (c.real (), num);
   else
     c = Complex (num, c.imag ());
 #endif
 }
 
@@ -168,24 +172,24 @@ str2double1 (std::string str)
   bool i1, i2, s1, s2;
 
   if (is.eof ())
     val = octave_NaN;
   else if (! extract_num (is, num, i1, s1))
     val = octave_NaN;
   else
     {
-      set_component (c, num, i1);
+      set_component (val, num, i1);
 
       if (! is.eof ())
         {
           if (! extract_num (is, num, i2, s2) || i1 == i2 || ! s2)
             val = octave_NaN;
           else
-            set_component (c, num, i2);
+            set_component (val, num, i2);
         }
     }
 
   return val;
 }
 
 DEFUN_DLD (str2double, args, ,
   "-*- texinfo -*-\n\
