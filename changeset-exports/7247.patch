# HG changeset patch
# User jwe
# Date 1196787092 0
#      Tue Dec 04 16:51:32 2007 +0000
# Node ID b689a67dbe884f09e4e5178413b8be9b8dcd94d2
# Parent  f81e80674b9b8c1983c680bcdd7a7337227b9793
[project @ 2007-12-04 16:51:32 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2007-12-04  John W. Eaton  <jwe@octave.org>
+
+	* load-save.cc (Fsave, Fload): Doc fixes.
+	From Marco Caliari <caliari@sci.univr.it>.
+
 2007-12-03  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/luinc.cc: Make tests conditional on HAVE_UMFPACK.
 	* DLD-FUNCTIONS/spqr.cc: Make tests conditional on HAVE_CXSPARSE.
 
 	* DLD-FUNCTIONS/regexp.cc: Use "%!testif" blocks for conditional
 	tests on PCRE.
 
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -653,29 +653,30 @@ find_file_to_load (const std::string& na
 #define HAVE_HDF5_HELP_STRING "\n\
 HDF5 load and save are not available, as this Octave executable was\n\
 not linked with the HDF5 library."
 #endif /* ! HAVE HDF5 */
 
 DEFCMD (load, args, nargout,
   "-*- texinfo -*-\n\
 @deffn {Command} load options file v1 v2 @dots{}\n\
-Load the named variables from the file @var{file}.  As with @code{save},\n\
-you may specify a list of variables and @code{load} will only extract\n\
-those variables with names that match.  For example, to restore the\n\
-variables saved in the file @file{data}, use the command\n\
+Load the named variables @var{v1}, @var{v2}, @dots{}, from the file\n\
+@var{file}.  As with @code{save}, you may specify a list of variables\n\
+and @code{load} will only extract\n\ those variables with names that\n\
+match.  For example, to restore the variables saved in the file\n\
+@file{data}, use the command\n\
 \n\
 @example\n\
 load data\n\
 @end example\n\
 \n\
 If load is invoked using the functional form\n\
 \n\
 @example\n\
-load (\"-text\", \"file.txt\", \"a\")\n\
+load (\"-option1\", @dots{}, \"file\", \"v1\", @dots{})\n\
 @end example\n\
 \n\
 @noindent\n\
 then the @var{options}, @var{file}, and variable name arguments\n\
 (@var{v1}, @dots{}) must be specified as character strings.\n\
 \n\
 If a variable that is not marked as global is loaded from a file when a\n\
 global symbol with the same name already exists, it is loaded in the\n\
@@ -1472,33 +1473,33 @@ dump_octave_core (void)
 #define HAVE_ZLIB_HELP_STRING "\n\
 This option is not available, as this Octave executable was not linked with\n\
 the zlib library."
 #endif /* ! HAVE ZLIB */
 
 DEFCMD (save, args, ,
   "-*- texinfo -*-\n\
 @deffn {Command} save options file @var{v1} @var{v2} @dots{}\n\
-Save the named variables @var{v1}, @var{v2}, @dots{} in the file\n\
+Save the named variables @var{v1}, @var{v2}, @dots{}, in the file\n\
 @var{file}.  The special filename @samp{-} can be used to write the\n\
 output to your terminal.  If no variable names are listed, Octave saves\n\
 all the variables in the current scope.  Valid options for the\n\
 @code{save} command are listed in the following table.  Options that\n\
 modify the output format override the format specified by\n\
 @code{default_save_options}.\n\
 \n\
 If save is invoked using the functional form\n\
 \n\
 @example\n\
-save (\"-text\", \"file.txt\", \"a\")\n\
+save (\"-option1\", @dots{}, \"file\", \"v1\", @dots{})\n\
 @end example\n\
 \n\
 @noindent\n\
 then the @var{options}, @var{file}, and variable name arguments\n\
-(@var{vname1}, @dots{}) must be specified as character strings.\n\
+(@var{v1}, @dots{}) must be specified as character strings.\n\
 \n\
 @table @code\n\
 @item -ascii\n\
 Save a single matrix in a text file.\n\
 \n\
 @item -binary\n\
 Save the data in Octave's binary data format.\n\
 \n\
