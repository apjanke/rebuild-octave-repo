# HG changeset patch
# User Carlo de Falco <carlo.defalco@polimi.it>
# Date 1449931120 -3600
#      Sat Dec 12 15:38:40 2015 +0100
# Node ID 56d36905893f53bb5469fd5761675af8977c1307
# Parent  f2cd811f0f9ea7914dbd55c047bc13383d9fec7f
# Parent  ddc18b909ec77bd7b0376b41198a0965b80d8cf6
codesprint: merge unwanted new head

diff --git a/scripts/ode/private/integrate_adaptive.m b/scripts/ode/private/integrate_adaptive.m
--- a/scripts/ode/private/integrate_adaptive.m
+++ b/scripts/ode/private/integrate_adaptive.m
@@ -145,18 +145,18 @@ function solution = integrate_adaptive (
                          & (dir * tspan(iout:end) <= dir * t_new));
         t_caught = t_caught + iout - 1;
 
         if (! isempty (t_caught))
           t(t_caught) = tspan(t_caught);
           iout = max (t_caught);
           x(:, t_caught) = ...
             runge_kutta_interpolate (order, [t_old t_new], [x_old x_new],
-                                     tspan(t_caught), new_k_vals, dt,
-                                     options.funarguments{:});
+                                     tspan(t_caught), new_k_vals, dt, func,
+                                     options.funarguments);
 
           istep += 1;
 
           ## Call Events function only if a valid result has been found.
           ## Stop integration if eventbreak is true.
           if (options.haveeventfunction)
             break_loop = false;
             for idenseout = 1:numel (t_caught)
diff --git a/scripts/ode/private/runge_kutta_interpolate.m b/scripts/ode/private/runge_kutta_interpolate.m
--- a/scripts/ode/private/runge_kutta_interpolate.m
+++ b/scripts/ode/private/runge_kutta_interpolate.m
@@ -12,42 +12,44 @@
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
-function u_interp = runge_kutta_interpolate (order, z, u, t, k_vals, dt, args)
+function u_interp = runge_kutta_interpolate (order, z, u, t, k_vals, dt, func, args)
 
   switch (order)
 
     ## FIXME: Can interpolations for orders 1-4 simply be deleted? 2015-10-14.
-    #{
+
     case 1
-      u_interp = linear_interpolation (z, u, t);
+      u_interp = interp1 (z, u', t, 'linear');
+
     case 2
       if (! isempty (k_vals))
         der = k_vals(:,1);
       else
         der = feval (func, z(1) , u(:,1), args);
       endif
       u_interp = quadratic_interpolation (z, u, der, t);
+
+    #{
     case 3
       u_interp = ...
       hermite_cubic_interpolation (z, u, k_vals, t);
     case 4
       ## if ode45 is used without local extrapolation this function
       ## doesn't require a new function evaluation.
       u_interp = dorpri_interpolation ([z(i-1) z(i)],
                                        [u(:,i-1) u(:,i)],
                                        k_vals, tspan(counter));
     #}
-
     case 5
       ## ode45 with Dormand-Prince scheme:
       u_interp = hermite_quartic_interpolation (z, u, k_vals, t);
 
       ## it is also possible to do a new function evaluation and use
       ## the quintic hermite interpolator
       ## f_half = feval (func, t+1/2*dt, u_half,
       ##                 options.funarguments{:});
@@ -64,16 +66,29 @@ function u_interp = runge_kutta_interpol
       der(:,1) = feval (func, z(1), u(:,1), args);
       der(:,2) = feval (func, z(2), u(:,2), args);
       u_interp = hermite_cubic_interpolation (z, u, der, t);
 
   endswitch
 
 endfunction
 
+## The function below can be used in an ODE solver to interpolate the solution
+## at the time t_out using 2th order hermite interpolation.
+function x_out = quadratic_interpolation (t, x, der, t_out)
+
+  # coefficients of the parabola
+  a = -(x(:,1) - x(:,2) - der(:).*(t(1)-t(2))) / (t(1) - t(2))^2;
+  b = der(:) - 2*t(1).*a;
+  c = x(:,1) - a*t(1)^2 - b*t(1);
+
+  # evauate in t_out
+  x_out = a*t_out.^2 + b*t_out + c;
+
+endfunction
 
 ## The function below can be used in an ODE solver to interpolate the solution
 ## at the time t_out using 4th order hermite interpolation.
 function x_out = hermite_quartic_interpolation (t, x, der, t_out)
 
   persistent coefs_u_half = ...
   [(6025192743/30085553152), 0, (51252292925/65400821598), ...
    (-2691868925/45128329728), (187940372067/1594534317056), ...
diff --git a/scripts/ode/private/starting_stepsize.m b/scripts/ode/private/starting_stepsize.m
--- a/scripts/ode/private/starting_stepsize.m
+++ b/scripts/ode/private/starting_stepsize.m
@@ -38,31 +38,37 @@
 function h = starting_stepsize (order, func, t0, x0,
                                 AbsTol, RelTol, normcontrol)
 
   ## compute norm of initial conditions
   d0 = AbsRel_Norm (x0, x0, AbsTol, RelTol, normcontrol);
 
   ## compute norm of the function evaluated at initial conditions
   y = func (t0, x0);
+  if (iscell (y))
+    y = y{1};
+  endif
   d1 = AbsRel_Norm (y, y, AbsTol, RelTol, normcontrol);
 
   if (d0 < 1e-5 || d1 < 1e-5)
     h0 = 1e-6;
   else
     h0 = .01 * (d0 / d1);
   endif
 
   ## compute one step of Explicit-Euler
   x1 = x0 + h0 * y;
 
   ## approximate the derivative norm
+  yh = func (t0+h0, x1);
+  if (iscell (yh))
+    yh = yh{1};
+  endif
   d2 = (1 / h0) * ...
-       AbsRel_Norm (func (t0+h0, x1) - y,
-                    func (t0+h0, x1) - y, AbsTol, RelTol, normcontrol);
+       AbsRel_Norm (yh - y, yh - y, AbsTol, RelTol, normcontrol);
 
   if (max (d1, d2) <= 1e-15)
     h1 = max (1e-6, h0*1e-3);
   else
     h1 = (1e-2 / max (d1, d2)) ^(1 / (order+1));
   endif
 
   h = min (100*h0, h1);
