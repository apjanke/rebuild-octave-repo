# HG changeset patch
# User Alexander Barth <barth.alexander@gmail.com>
# Date 1245904594 -7200
#      Thu Jun 25 06:36:34 2009 +0200
# Branch release-3-2-x
# Node ID 2e4cec91015a002ee9b6d91cda26bdd14049fe29
# Parent  ec3e4825350302aab209aae109bd09e5e6d269e8
eigs-base.cc: use octave_idx_type for Fortran LOGICAL values

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2009-06-24  Alexander Barth  <barth.alexander@gmail.com>
+
+	* eigs-base.cc (EigsRealSymmetricMatrix,
+	EigsRealSymmetricMatrixShift, EigsRealSymmetricFunc,
+	EigsRealNonSymmetricMatrix, EigsRealNonSymmetricMatrixShift,
+	EigsRealNonSymmetricFunc, EigsComplexNonSymmetricMatrix,
+	EigsComplexNonSymmetricMatrixShift, EigsComplexNonSymmetricFunc):
+	Use octave_idx_type for parameters of type LOGICAL in ARPACK.
+
 2009-06-22  Jaroslav Hajek  <highegg@gmail.com>
 
 	* chMatrix.cc (charMatrix::charMatrix (const string_vector&)):
 	Optimize w.r.t. COW of std::string.
 
 2009-06-18  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dMatrix.cc (xgemm): Replace resize() with uninitialized allocations
diff --git a/liboctave/eigs-base.cc b/liboctave/eigs-base.cc
--- a/liboctave/eigs-base.cc
+++ b/liboctave/eigs-base.cc
@@ -59,17 +59,17 @@ extern "C"
 			     double*, const octave_idx_type&, double*,
 			     const octave_idx_type&, octave_idx_type*,
 			     octave_idx_type*, double*, double*, 
 			     const octave_idx_type&, octave_idx_type&
 			     F77_CHAR_ARG_LEN_DECL F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (dseupd, DSEUPD) (const int&, F77_CONST_CHAR_ARG_DECL,
-			     int*, double*, double*,
+			     octave_idx_type*, double*, double*,
 			     const octave_idx_type&, const double&,
 			     F77_CONST_CHAR_ARG_DECL, const octave_idx_type&, 
 			     F77_CONST_CHAR_ARG_DECL, const octave_idx_type&, 
 			     const double&, double*, const octave_idx_type&, 
 			     double*, const octave_idx_type&, octave_idx_type*,
 			     octave_idx_type*, double*, double*, 
 			     const octave_idx_type&, octave_idx_type&
 			     F77_CHAR_ARG_LEN_DECL F77_CHAR_ARG_LEN_DECL
@@ -82,17 +82,17 @@ extern "C"
 			     double*, const octave_idx_type&, double*,
 			     const octave_idx_type&, octave_idx_type*,
 			     octave_idx_type*, double*, double*, 
 			     const octave_idx_type&, octave_idx_type&
 			     F77_CHAR_ARG_LEN_DECL F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (dneupd, DNEUPD) (const int&, F77_CONST_CHAR_ARG_DECL,
-			     int*, double*, double*,
+			     octave_idx_type*, double*, double*,
 			     double*, const octave_idx_type&, const double&,
 			     const double&, double*, F77_CONST_CHAR_ARG_DECL, 
 			     const octave_idx_type&, F77_CONST_CHAR_ARG_DECL, 
 			     octave_idx_type&, const double&, double*, 
 			     const octave_idx_type&, double*, 
 			     const octave_idx_type&, octave_idx_type*, 
 			     octave_idx_type*, double*, double*, 
 			     const octave_idx_type&, octave_idx_type&
@@ -106,17 +106,17 @@ extern "C"
 			     Complex*, const octave_idx_type&, Complex*,
 			     const octave_idx_type&, octave_idx_type*,
 			     octave_idx_type*, Complex*, Complex*, 
 			     const octave_idx_type&, double *, octave_idx_type&
 			     F77_CHAR_ARG_LEN_DECL F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (zneupd, ZNEUPD) (const int&, F77_CONST_CHAR_ARG_DECL,
-			     int*, Complex*, Complex*, 
+			     octave_idx_type*, Complex*, Complex*, 
 			     const octave_idx_type&, const Complex&,
 			     Complex*, F77_CONST_CHAR_ARG_DECL,
 			     const octave_idx_type&, F77_CONST_CHAR_ARG_DECL, 
 			     const octave_idx_type&, const double&,
 			     Complex*, const octave_idx_type&, Complex*,
 			     const octave_idx_type&, octave_idx_type*,
 			     octave_idx_type*, Complex*, Complex*, 
 			     const octave_idx_type&, double *, octave_idx_type&
@@ -979,24 +979,24 @@ EigsRealSymmetricMatrix (const M& m, con
 	}
     } 
   while (1);
 
   octave_idx_type info2;
 
   // We have a problem in that the size of the C++ bool 
   // type relative to the fortran logical type. It appears 
-  // that fortran uses 4-bytes per logical and C++ 1-byte 
+  // that fortran uses 4- or 8-bytes per logical and C++ 1-byte 
   // per bool, though this might be system dependent. As 
   // long as the HOWMNY arg is not "S", the logical array
   // is just workspace for ARPACK, so use int type to 
   // avoid problems.
-  Array<int> s (p);
-  int *sel = s.fortran_vec ();
-			
+  Array<octave_idx_type> s (p);
+  octave_idx_type *sel = s.fortran_vec ();
+
   eig_vec.resize (n, k);
   double *z = eig_vec.fortran_vec ();
 
   eig_val.resize (k);
   double *d = eig_val.fortran_vec ();
 
   F77_FUNC (dseupd, DSEUPD) 
     (rvec, F77_CONST_CHAR_ARG2 ("A", 1), sel, d, z, n, sigma, 
@@ -1316,23 +1316,23 @@ EigsRealSymmetricMatrixShift (const M& m
 	}
     } 
   while (1);
 
   octave_idx_type info2;
 
   // We have a problem in that the size of the C++ bool 
   // type relative to the fortran logical type. It appears 
-  // that fortran uses 4-bytes per logical and C++ 1-byte 
+  // that fortran uses 4- or 8-bytes per logical and C++ 1-byte 
   // per bool, though this might be system dependent. As 
   // long as the HOWMNY arg is not "S", the logical array
   // is just workspace for ARPACK, so use int type to 
   // avoid problems.
-  Array<int> s (p);
-  int *sel = s.fortran_vec ();
+  Array<octave_idx_type> s (p);
+  octave_idx_type *sel = s.fortran_vec ();
 			
   eig_vec.resize (n, k);
   double *z = eig_vec.fortran_vec ();
 
   eig_val.resize (k);
   double *d = eig_val.fortran_vec ();
 
   F77_FUNC (dseupd, DSEUPD) 
@@ -1574,23 +1574,23 @@ EigsRealSymmetricFunc (EigsFunc fun, oct
 	}
     } 
   while (1);
 
   octave_idx_type info2;
 
   // We have a problem in that the size of the C++ bool 
   // type relative to the fortran logical type. It appears 
-  // that fortran uses 4-bytes per logical and C++ 1-byte 
+  // that fortran uses 4- or 8-bytes per logical and C++ 1-byte 
   // per bool, though this might be system dependent. As 
   // long as the HOWMNY arg is not "S", the logical array
   // is just workspace for ARPACK, so use int type to 
   // avoid problems.
-  Array<int> s (p);
-  int *sel = s.fortran_vec ();
+  Array<octave_idx_type> s (p);
+  octave_idx_type *sel = s.fortran_vec ();
 			
   eig_vec.resize (n, k);
   double *z = eig_vec.fortran_vec ();
 
   eig_val.resize (k);
   double *d = eig_val.fortran_vec ();
 
   F77_FUNC (dseupd, DSEUPD) 
@@ -1893,23 +1893,23 @@ EigsRealNonSymmetricMatrix (const M& m, 
 	}
     } 
   while (1);
 
   octave_idx_type info2;
 
   // We have a problem in that the size of the C++ bool 
   // type relative to the fortran logical type. It appears 
-  // that fortran uses 4-bytes per logical and C++ 1-byte 
+  // that fortran uses 4- or 8-bytes per logical and C++ 1-byte 
   // per bool, though this might be system dependent. As 
   // long as the HOWMNY arg is not "S", the logical array
   // is just workspace for ARPACK, so use int type to 
   // avoid problems.
-  Array<int> s (p);
-  int *sel = s.fortran_vec ();
+  Array<octave_idx_type> s (p);
+  octave_idx_type *sel = s.fortran_vec ();
 
   Matrix eig_vec2 (n, k + 1);
   double *z = eig_vec2.fortran_vec ();
 
   OCTAVE_LOCAL_BUFFER (double, dr, k + 1);
   OCTAVE_LOCAL_BUFFER (double, di, k + 1);
   OCTAVE_LOCAL_BUFFER (double, workev, 3 * p);
   for (octave_idx_type i = 0; i < k+1; i++)
@@ -2272,23 +2272,23 @@ EigsRealNonSymmetricMatrixShift (const M
 	}
     } 
   while (1);
 
   octave_idx_type info2;
 
   // We have a problem in that the size of the C++ bool 
   // type relative to the fortran logical type. It appears 
-  // that fortran uses 4-bytes per logical and C++ 1-byte 
+  // that fortran uses 4- or 8-bytes per logical and C++ 1-byte 
   // per bool, though this might be system dependent. As 
   // long as the HOWMNY arg is not "S", the logical array
   // is just workspace for ARPACK, so use int type to 
   // avoid problems.
-  Array<int> s (p);
-  int *sel = s.fortran_vec ();
+  Array<octave_idx_type> s (p);
+  octave_idx_type *sel = s.fortran_vec ();
 			
   Matrix eig_vec2 (n, k + 1);
   double *z = eig_vec2.fortran_vec ();
 
   OCTAVE_LOCAL_BUFFER (double, dr, k + 1);
   OCTAVE_LOCAL_BUFFER (double, di, k + 1);
   OCTAVE_LOCAL_BUFFER (double, workev, 3 * p);
   for (octave_idx_type i = 0; i < k+1; i++)
@@ -2577,23 +2577,23 @@ EigsRealNonSymmetricFunc (EigsFunc fun, 
 	}
     } 
   while (1);
 
   octave_idx_type info2;
 
   // We have a problem in that the size of the C++ bool 
   // type relative to the fortran logical type. It appears 
-  // that fortran uses 4-bytes per logical and C++ 1-byte 
+  // that fortran uses 4- or 8-bytes per logical and C++ 1-byte 
   // per bool, though this might be system dependent. As 
   // long as the HOWMNY arg is not "S", the logical array
   // is just workspace for ARPACK, so use int type to 
   // avoid problems.
-  Array<int> s (p);
-  int *sel = s.fortran_vec ();
+  Array<octave_idx_type> s (p);
+  octave_idx_type *sel = s.fortran_vec ();
 
   Matrix eig_vec2 (n, k + 1);
   double *z = eig_vec2.fortran_vec ();
 
   OCTAVE_LOCAL_BUFFER (double, dr, k + 1);
   OCTAVE_LOCAL_BUFFER (double, di, k + 1);
   OCTAVE_LOCAL_BUFFER (double, workev, 3 * p);
   for (octave_idx_type i = 0; i < k+1; i++)
@@ -2940,23 +2940,23 @@ EigsComplexNonSymmetricMatrix (const M& 
 	}
     } 
   while (1);
 
   octave_idx_type info2;
 
   // We have a problem in that the size of the C++ bool 
   // type relative to the fortran logical type. It appears 
-  // that fortran uses 4-bytes per logical and C++ 1-byte 
+  // that fortran uses 4- or 8-bytes per logical and C++ 1-byte 
   // per bool, though this might be system dependent. As 
   // long as the HOWMNY arg is not "S", the logical array
   // is just workspace for ARPACK, so use int type to 
   // avoid problems.
-  Array<int> s (p);
-  int *sel = s.fortran_vec ();
+  Array<octave_idx_type> s (p);
+  octave_idx_type *sel = s.fortran_vec ();
 
   eig_vec.resize (n, k);
   Complex *z = eig_vec.fortran_vec ();
 
   eig_val.resize (k+1);
   Complex *d = eig_val.fortran_vec ();
 
   OCTAVE_LOCAL_BUFFER (Complex, workev, 2 * p);
@@ -3280,23 +3280,23 @@ EigsComplexNonSymmetricMatrixShift (cons
 	}
     } 
   while (1);
 
   octave_idx_type info2;
 
   // We have a problem in that the size of the C++ bool 
   // type relative to the fortran logical type. It appears 
-  // that fortran uses 4-bytes per logical and C++ 1-byte 
+  // that fortran uses 4- or 8-bytes per logical and C++ 1-byte 
   // per bool, though this might be system dependent. As 
   // long as the HOWMNY arg is not "S", the logical array
   // is just workspace for ARPACK, so use int type to 
   // avoid problems.
-  Array<int> s (p);
-  int *sel = s.fortran_vec ();
+  Array<octave_idx_type> s (p);
+  octave_idx_type *sel = s.fortran_vec ();
 
   eig_vec.resize (n, k);
   Complex *z = eig_vec.fortran_vec ();
 
   eig_val.resize (k+1);
   Complex *d = eig_val.fortran_vec ();
 
   OCTAVE_LOCAL_BUFFER (Complex, workev, 2 * p);
@@ -3544,23 +3544,23 @@ EigsComplexNonSymmetricFunc (EigsComplex
 	}
     } 
   while (1);
 
   octave_idx_type info2;
 
   // We have a problem in that the size of the C++ bool 
   // type relative to the fortran logical type. It appears 
-  // that fortran uses 4-bytes per logical and C++ 1-byte 
+  // that fortran uses 4- or 8-bytes per logical and C++ 1-byte 
   // per bool, though this might be system dependent. As 
   // long as the HOWMNY arg is not "S", the logical array
   // is just workspace for ARPACK, so use int type to 
   // avoid problems.
-  Array<int> s (p);
-  int *sel = s.fortran_vec ();
+  Array<octave_idx_type> s (p);
+  octave_idx_type *sel = s.fortran_vec ();
 
   eig_vec.resize (n, k);
   Complex *z = eig_vec.fortran_vec ();
 
   eig_val.resize (k+1);
   Complex *d = eig_val.fortran_vec ();
 
   OCTAVE_LOCAL_BUFFER (Complex, workev, 2 * p);
