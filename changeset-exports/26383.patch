# HG changeset patch
# User Rik <rik@octave.org>
# Date 1546473519 28800
#      Wed Jan 02 15:58:39 2019 -0800
# Branch stable
# Node ID 5455de7c8566b1a3b7aaf53653e553e26cc96d15
# Parent  2408f3b6a6db7b637b8db30da3dcc4299b714985
graphics.h: Fix static analyzer detected issues (bug #55347).

* graphics.in.h (scaler::operator =): Check that new object is not the same as
this object before doing assignment.
* graphics.in.h (children_property::do_set): Remove useless conditional on
is_ok which is always true.  Re-indent code.

diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -219,24 +219,27 @@ public:
   double unscale (double d) const
   { return rep->unscale (d); }
 
   bool is_linear (void) const
   { return rep->is_linear (); }
 
   scaler& operator = (const scaler& s)
   {
-    if (rep)
+    if (&s != this)
       {
-        delete rep;
-        rep = nullptr;
+        if (rep)
+          {
+            delete rep;
+            rep = nullptr;
+          }
+
+        rep = s.rep->clone ();
       }
 
-    rep = s.rep->clone ();
-
     return *this;
   }
 
   scaler& operator = (const std::string& s)
   {
     if (rep)
       {
         delete rep;
@@ -1816,32 +1819,28 @@ protected:
           add_hidden = false;
       }
     else
       is_ok = false;
 
     if (! is_ok)
       error ("set: new children must be a permutation of existing children");
 
-    if (is_ok)
-      {
-        Matrix tmp = new_kids_column;
-
-        if (add_hidden)
-          tmp.stack (get_hidden ());
-
-        children_list.clear ();
-
-        // Don't use do_init_children here, as that reverses the
-        // order of the list, and we don't want to do that if setting
-        // the child list directly.
-
-        for (octave_idx_type i = 0; i < tmp.numel (); i++)
-          children_list.push_back (tmp.xelem (i));
-      }
+    Matrix tmp = new_kids_column;
+
+    if (add_hidden)
+      tmp.stack (get_hidden ());
+
+    children_list.clear ();
+
+    // Don't use do_init_children here, as that reverses the
+    // order of the list, and we don't want to do that if setting
+    // the child list directly.
+    for (octave_idx_type i = 0; i < tmp.numel (); i++)
+      children_list.push_back (tmp.xelem (i));
 
     return is_ok;
   }
 
 private:
   void do_init_children (const Matrix& val)
   {
     children_list.clear ();
