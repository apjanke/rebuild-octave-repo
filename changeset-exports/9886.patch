# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1259477475 -3600
#      Sun Nov 29 07:51:15 2009 +0100
# Node ID cddd5c3d5f04014f0b927938b2ee6dc2f66cbdcc
# Parent  dd3fc8ba479692b7562d8b9509e4585ce2b8e244
fix & extend special-case optimizations for indexed assignment

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1175,35 +1175,35 @@ template <class T>
 void
 Array<T>::assign (const idx_vector& i, const Array<T>& rhs, const T& rfv)
 {
   octave_idx_type n = numel (), rhl = rhs.numel ();
 
   if (rhl == 1 || i.length (n) == rhl)
     {
       octave_idx_type nx = i.extent (n);
+      bool colon = i.is_colon_equiv (nx);
       // Try to resize first if necessary. 
       if (nx != n)
         {
           // Optimize case A = []; A(1:n) = X with A empty. 
-          if (rows () == 0 && columns () == 0 && ndims () == 2
-              && i.is_colon_equiv (nx))
+          if (dimensions.zero_by_zero () && colon)
             {
               if (rhl == 1)
                 *this = Array<T> (dim_vector (1, nx), rhs(0));
               else
                 *this = Array<T> (rhs, dim_vector (1, nx));
               return;
             }
 
           resize_fill (nx, rfv);      
           n = numel ();
         }
 
-      if (i.is_colon ())
+      if (colon)
         {
           // A(:) = X makes a full fill or a shallow copy.
           if (rhl == 1)
             fill (rhs(0));
           else
             *this = rhs.reshape (dimensions);
         }
       else
@@ -1244,35 +1244,36 @@ Array<T>::assign (const idx_vector& i, c
   octave_idx_type il = i.length (rdv(0)), jl = j.length (rdv(1));
   rhdv.chop_all_singletons ();
   bool match = (isfill
 		|| (rhdv.length () == 2 && il == rhdv(0) && jl == rhdv(1)));
   match = match || (il == 1 && jl == rhdv(0) && rhdv(1) == 1);
 
   if (match)
     {
+      bool all_colons = (i.is_colon_equiv (rdv(0)) 
+                         && j.is_colon_equiv (rdv(1)));
       // Resize if requested.
       if (rdv != dv)
         {
           // Optimize case A = []; A(1:m, 1:n) = X
-          if (dv.all_zero () && i.is_colon_equiv (rdv(0))
-              && j.is_colon_equiv (rdv(1)))
+          if (dv.zero_by_zero () && all_colons)
             {
               if (isfill)
                 *this = Array<T> (rdv, rhs(0));
               else
                 *this = Array<T> (rhs, rdv);
               return;
             }
 
           resize (rdv, rfv);
           dv = dimensions;
         }
 
-      if (i.is_colon () && j.is_colon ())
+      if (all_colons)
         {
           // A(:,:) = X makes a full fill or a shallow copy
           if (isfill)
             fill (rhs(0));
           else
             *this = rhs.reshape (dimensions);
         }
       else
@@ -1348,30 +1349,41 @@ Array<T>::assign (const Array<idx_vector
 
       // Check whether LHS and RHS match, up to singleton dims.
       bool match = true, all_colons = true, isfill = rhs.numel () == 1;
 
       rhdv.chop_all_singletons ();
       int j = 0, rhdvl = rhdv.length ();
       for (int i = 0; i < ial; i++)
         {
-          all_colons = all_colons && ia(i).is_colon ();
+          all_colons = all_colons && ia(i).is_colon_equiv (rdv(i));
           octave_idx_type l = ia(i).length (rdv(i));
           if (l == 1) continue;
           match = match && j < rhdvl && l == rhdv(j++);
         }
 
       match = match && (j == rhdvl || rhdv(j) == 1);
       match = match || isfill;
             
       if (match)
         {
           // Resize first if necessary.
           if (rdv != dv)
             {
+              // Optimize case A = []; A(1:m, 1:n) = X
+              if (dv.zero_by_zero () && all_colons)
+                {
+                  rdv.chop_trailing_singletons ();
+                  if (isfill)
+                    *this = Array<T> (rdv, rhs(0));
+                  else
+                    *this = Array<T> (rhs, rdv);
+                  return;
+                }
+
               resize_fill (rdv, rfv);
               dv = dimensions;
               chop_trailing_singletons ();
             }
 
           if (all_colons)
             {
               // A(:,:,...,:) = X makes a full fill or a shallow copy.
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2009-11-28  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dim-vector.h (dim_vector::zero_by_zero): New method.
+	* idx-vector.h (idx_vector::idx_mask_rep::is_colon_equiv): Fix.
+	* Array.cc (Array<T>::assign): Minor tweaks. Optimize 
+	A = []; A(1:m,1:n,1:k) = X for all cases. Use a shallow copy
+	for all colon-equivalent indices.
+
 2009-11-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* idx-vector.h (idx_vector::index_class): New member: class_mask.
 	(idx_vector::idx_mask_rep): New class.
 	(idx_vector::idx_vector (bool)): Construct idx_mask_rep.
 	(idx_vector::unmask): New method decl.
 	* idx-vector.cc (idx_vector::idx_vector (const boolNDArray&)):
 	Construct idx_mask_rep conditionally.
diff --git a/liboctave/dim-vector.h b/liboctave/dim-vector.h
--- a/liboctave/dim-vector.h
+++ b/liboctave/dim-vector.h
@@ -273,16 +273,21 @@ public:
 	    retval = false;
 	    break;
 	  }
       }
 
     return retval;
   }
 
+  bool zero_by_zero (void) const
+  {
+    return length () == 2 && elem (0) == 0 && elem (1) == 0;
+  }
+
   bool any_zero (void) const
   {
     bool retval = false;
 
     for (int i = 0; i < length (); i++)
       {
 	if (elem (i) == 0)
 	  {
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -362,17 +362,17 @@ private:
 
     idx_base_rep *sort_uniq_clone (bool = false) 
       { count++; return this; }
 
     dim_vector orig_dimensions (void) const
       { return orig_dims; }
 
     bool is_colon_equiv (octave_idx_type n) const
-      { return count == n && ext == n; }
+      { return len == n && ext == n; }
 
     const bool *get_data (void) const { return data; }
 
     std::ostream& print (std::ostream& os) const;
 
   private:
 
     DECLARE_OCTAVE_ALLOCATOR
