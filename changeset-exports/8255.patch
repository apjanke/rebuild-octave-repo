# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1224638249 14400
#      Tue Oct 21 21:17:29 2008 -0400
# Node ID 3f1199ad212f32fbcfae2163dfd4320ddaee3e9a
# Parent  8c29549c66deaa521c283e93e7ab60799ed95bc0
legendre.m: Warn once on under/overflow.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,12 @@
 2008-10-21  Ben Abbott  <bpabbott@mac.com>
 
+	* specfun/legendre.m: Warn once on under/overflow.
+
 	* plot/clf.m: Improve Matlab compatibility.
 
 2008-10-21  John W. Eaton  <jwe@octave.org>
 
 	* plot/quiver3.m: Turn hold off after demo.
 
 	* plot/newplot.m: Delete stray debugging code.
 
diff --git a/scripts/specfun/legendre.m b/scripts/specfun/legendre.m
--- a/scripts/specfun/legendre.m
+++ b/scripts/specfun/legendre.m
@@ -106,16 +106,18 @@
 ## @end group
 ## @end example
 ## @end deftypefn
 
 ## Author: Marco Caliari <marco.caliari@univr.it>
 
 function retval = legendre (n, x, normalization)
 
+  persistent warned_overflow = false;
+
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
   if (nargin == 3)
     normalization = lower (normalization);
   else
     normalization = "unnorm";
@@ -135,30 +137,42 @@ function retval = legendre (n, x, normal
     case "sch"
       scale = sqrt (2);
     case "unnorm"
       scale = 1;
     otherwise
       error ("legendre: expecting normalization option to be \"norm\", \"sch\", or \"unnorm\"");
   endswitch
 
+  scale = scale * ones (1, numel (x));
+
   ## Based on the recurrence relation below
   ##            m                 m              m
   ## (n-m+1) * P (x) = (2*n+1)*x*P (x)  - (n+1)*P (x)
   ##            n+1               n              n-1
   ## http://en.wikipedia.org/wiki/Associated_Legendre_function
 
+  overflow = false;
   for m = 1:n
     lpm1 = scale;
     lpm2 = (2*m-1) .* x .* scale;      
     lpm3 = lpm2;
     for k = m+1:n
-      lpm3 = ((2*k-1) .* x .* lpm2 - (k+m-2) .* lpm1)/(k-m+1);
+      lpm3a = (2*k-1) .* x .* lpm2;
+      lpm3b = (k+m-2) .* lpm1;
+      lpm3 = (lpm3a - lpm3b)/(k-m+1);
       lpm1 = lpm2;
       lpm2 = lpm3;
+      if (! warned_overflow)
+        if (any (abs (lpm3a) > realmax)
+            || any (abs (lpm3b) > realmax)
+            || any (abs (lpm3)  > realmax))
+          overflow = true;
+        endif
+      endif
     endfor
     retval(m,:) = lpm3;
     if (strcmp (normalization, "unnorm"))
       scale = -scale * (2*m-1);
     else
       ## normalization == "sch" or normalization == "norm"
       scale = scale / sqrt ((n-m+1)*(n+m))*(2*m-1);
     endif
@@ -166,16 +180,21 @@ function retval = legendre (n, x, normal
   endfor
 
   retval(n+1,:) = scale;
 
   if (strcmp (normalization, "sch"))
     retval(1,:) = retval(1,:) / sqrt (2);
   endif
 
+  if (overflow && ! warned_overflow)
+    warning ("legendre: overflow - results may be unstable for high orders.");
+    warned_overflow = true;
+  endif
+
 endfunction
 
 %!test
 %! result = legendre (3, [-1.0 -0.9 -0.8]);
 %! expected = [
 %!    -1.00000  -0.47250  -0.08000
 %!     0.00000  -1.99420  -1.98000
 %!     0.00000  -2.56500  -4.32000
@@ -208,9 +227,11 @@ endfunction
 %! ## Don't compare to "-Inf" since it would fail on 64 bit systems.
 %! assert (result(end) < -1.7976e308 && all (isfinite (result(1:end-1))));
 
 %!test
 %! result = legendre (150, 0);
 %! ## This agrees with Matlab's result.
 %! assert (result(end), 3.7532741115719e+306, 0.0000000000001e+306)
 
-
+%!test
+%! result = legendre (0, 0:0.1:1);
+%! assert (result, ones(1,11))
