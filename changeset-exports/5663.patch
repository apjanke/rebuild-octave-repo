# HG changeset patch
# User jwe
# Date 1142285407 0
#      Mon Mar 13 21:30:07 2006 +0000
# Node ID 775e065f7dc404487593ff7edd977c5421d174c8
# Parent  1c334f7e7bef1d5e91ac367a2ff18bce7c4d8d3e
[project @ 2006-03-13 21:30:06 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2006-03-13  John W. Eaton  <jwe@octave.org>
+
+	* variables.cc (fcn_out_of_date): No longer static.
+	* ov-fcn-handle.cc (warn_reload): New function.
+	(octave_fcn_handle::subsref): Implement basic logic for updating
+	when pointed-to function changes.
+
 2006-03-10  John W. Eaton  <jwe@octave.org>
 
 	* xpow.cc (elem_xpow): Only use complex pow if really necessary.
 
 	* symtab.cc (symbol_table::glob, symbol_table::symbol_list,
 	symbol_table::subsymbol_list): Force result to be a column
 	vector.
 
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -26,16 +26,17 @@ 02110-1301, USA.
 #endif
 
 #include <iostream>
 #include <vector>
 
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
+#include "input.h"
 #include "oct-map.h"
 #include "ov-base.h"
 #include "ov-fcn-handle.h"
 #include "ov-usr-fcn.h"
 #include "pr-output.h"
 #include "pt-pr-code.h"
 #include "pt-misc.h"
 #include "pt-stmt.h"
@@ -51,43 +52,70 @@ 02110-1301, USA.
 #include "ls-utils.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_fcn_handle);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_fcn_handle,
 				     "function handle",
 				     "function handle");
 
+void
+octave_fcn_handle::reload_warning (const std::string& fcn_type) const
+{
+  if (warn_reload)
+    {
+      warn_reload = false;
+
+      warning ("reloading %s functions referenced by function handles is not implemented",
+	       fcn_type.c_str ());
+    }
+}
+
 octave_value_list
 octave_fcn_handle::subsref (const std::string& type,
 			    const std::list<octave_value_list>& idx,
 			    int nargout)
 {
   octave_value_list retval;
 
   switch (type[0])
     {
     case '(':
       {
 	octave_function *f = function_value ();
 
-	// XXX FIXME XXX -- need to check to see if the function has a
-	// new definition.  The following does not work for function
-	// handles that refer to subfunctions or functions defined on
-	// the command line.
-	//
-	// if (function_out_of_date (f))
-	//   {
-	//     octave_value tmp = lookup_function (fcn_name ());
-	//
-	//     octave_function *ftmp = tmp.function_value (true);
-	//
-	//     if (ftmp)
-	//       f = ftmp;
-	//   }
+	if (f && f->time_checked () < Vlast_prompt_time)
+	  {
+	    std::string ff_nm = f->fcn_file_name ();
+
+	    time_t tp = f->time_parsed ();
+
+	    if (ff_nm.empty ())
+	      {
+		// XXX FIXME XXX -- need to handle inline and
+		// command-line functions here.
+	      }
+	    else
+	      {
+		if (fcn_out_of_date (f, ff_nm, tp))
+		  {
+		    // XXX FIXME XXX -- there is currently no way to
+		    // parse a .m file or reload a .oct file that
+		    // leaves the fbi symbol table untouched.  We need
+		    // a function that will parse the file and return
+		    // a pointer to the new function definition
+		    // without altering the symbol table.
+
+		    if (f->is_nested_function ())
+		      reload_warning ("nested");
+		    else
+		      reload_warning ("functions");
+		  }
+	      }
+	  }
 
 	if (f)
 	  retval = f->subsref (type, idx, nargout);
 	else
 	  error ("invalid function handle");
       }
       break;
 
diff --git a/src/ov-fcn-handle.h b/src/ov-fcn-handle.h
--- a/src/ov-fcn-handle.h
+++ b/src/ov-fcn-handle.h
@@ -36,26 +36,27 @@ 02110-1301, USA.
 
 // Function handles.
 
 class
 octave_fcn_handle : public octave_base_value
 {
 public:
   octave_fcn_handle (void)
-    : fcn (), nm () { }
+    : warn_reload (true), fcn (), nm () { }
 
   octave_fcn_handle (const std::string& n)
-    : fcn (), nm (n) { }
+    : warn_reload (true), fcn (), nm (n) { }
 
   octave_fcn_handle (const octave_value& f,  const std::string& n)
-    : fcn (f), nm (n) { }
+    : warn_reload (true), fcn (f), nm (n) { }
 
   octave_fcn_handle (const octave_fcn_handle& fh)
-    : octave_base_value (fh), fcn (fh.fcn), nm (fh.nm) { }
+    : octave_base_value (fh), warn_reload (fh.warn_reload),
+      fcn (fh.fcn), nm (fh.nm) { }
 
   ~octave_fcn_handle (void) { }
 
   octave_value *clone (void) const { return new octave_fcn_handle (*this); }
   octave_value *empty_clone (void) const { return new octave_fcn_handle (); }
 
   octave_value subsref (const std::string&,
 			const std::list<octave_value_list>&)
@@ -104,16 +105,23 @@ public:
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
 private:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 
+  // If TRUE, print a warning if the pointed-to fucntion is out of
+  // date.  This variable may be removed when updating is properly
+  // implemented.
+  mutable bool warn_reload;
+
+  void reload_warning (const std::string& fcn_type) const;
+
 protected:
 
   // The function we are handling.
   octave_value fcn;
 
   // The name of the handle, including the "@".
   std::string nm;
 };
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -975,17 +975,17 @@ same_file (const std::string& f, const s
   std::string c_g = file_ops::canonicalize_file_name (g);
 
   file_stat f_fs (c_f);
   file_stat g_fs (c_g);
 
   return (f_fs.ino () == g_fs.ino () && f_fs.dev () == g_fs.dev ());
 }
 
-static bool
+bool
 fcn_out_of_date (octave_function *fcn, const std::string& ff, time_t tp)
 {
   bool retval = false;
 
   fcn->mark_fcn_file_up_to_date (octave_time ());
 
   if (! (Vignore_function_time_stamp == 2
 	 || (Vignore_function_time_stamp && fcn->is_system_fcn_file ())))
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -77,16 +77,19 @@ extern bool
 looks_like_struct (const std::string& text);
 
 extern int
 symbol_exist (const std::string& name, const std::string& type = "any");
 
 extern std::string
 unique_symbol_name (const std::string& basename);
 
+extern bool
+fcn_out_of_date (octave_function *fcn, const std::string& ff, time_t tp);
+
 extern bool lookup (symbol_record *s, bool exec_script = true);
 
 extern symbol_record *
 lookup_by_name (const std::string& nm, bool exec_script = true);
 
 extern octave_value lookup_function (const std::string& nm);
 
 extern octave_value lookup_user_function (const std::string& nm);
