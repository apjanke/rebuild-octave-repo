# HG changeset patch
# User Rik <rik@octave.org>
# Date 1480596148 28800
#      Thu Dec 01 04:42:28 2016 -0800
# Node ID 76fcce30dd32928bf7cc78f6357340d6256fc6df
# Parent  1d242ae7224012b78dd114c780c3396b8beb6e27
# Parent  efdb5d9dface516eeb6dcf6e6d370304c3b397f1
maint: Periodic merge of stable to default.

diff --git a/doc/interpreter/intro.txi b/doc/interpreter/intro.txi
--- a/doc/interpreter/intro.txi
+++ b/doc/interpreter/intro.txi
@@ -15,25 +15,27 @@
 @c You should have received a copy of the GNU General Public License
 @c along with Octave; see the file COPYING.  If not, see
 @c <http://www.gnu.org/licenses/>.
 
 @node Introduction
 @chapter A Brief Introduction to Octave
 @cindex introduction
 
-GNU Octave is a high-level language, primarily intended for numerical
+GNU Octave is a high-level language primarily intended for numerical
 computations.  It is typically used for such problems as solving
 linear and nonlinear equations, numerical linear algebra, statistical
 analysis, and for performing other numerical experiments.  It may also
 be used as a batch-oriented language for automated data processing.
 
-Until recently GNU Octave provided a command-line interface only with
-graphical plots displayed in separate windows.  However, by default
-the current version runs with a graphical user interface.
+The current version of Octave executes in a graphical user interface
+(GUI).  The GUI hosts an Integrated Development Environment (IDE)
+which includes a code editor with syntax highlighting, built-in
+debugger, documentation browser, as well as the interpreter for the
+language itself.  A command-line interface for Octave is also available.
 
 GNU Octave is freely redistributable software.  You may redistribute
 it and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation.  The GPL is included in
 this manual, @pxref{Copying}.
 
 This manual provides comprehensive documentation on how to install,
 run, use, and extend GNU Octave.  Additional chapters describe how
@@ -46,22 +48,23 @@ This document corresponds to Octave vers
 * Simple Examples::
 * Conventions::
 @end menu
 
 @node Running Octave
 @section Running Octave
 
 On most systems, Octave is started with the shell command @samp{octave}.
-This starts the graphical user interface (GUI).  The central window in
-the GUI is the Octave command-line interface.  In this window Octave
-displays an initial message and then a prompt indicating it is ready to
-accept input.  If you have chosen the traditional command-line interface
-then only the command prompt appears in the same window that was running
-a shell.  In any case, you can immediately begin typing Octave commands.
+This starts the graphical user interface.  The central window in the GUI
+is the Octave command-line interface.  In this window Octave displays an
+initial message and then a prompt indicating it is ready to accept
+input.  If you have chosen the traditional command-line interface then
+only the command prompt appears in the same window that was running
+a shell.  In either case, you can immediately begin typing Octave
+commands.
 
 If you get into trouble, you can usually interrupt Octave by typing
 @kbd{Control-C} (written @kbd{C-c} for short).  @kbd{C-c} gets
 its name from the fact that you type it by holding down @key{CTRL} and
 then pressing @key{c}.  Doing this will normally return you to Octave's
 prompt.
 
 @cindex exiting octave
@@ -74,19 +77,19 @@ it a @code{SIGTSTP} signal, usually by t
 @node Simple Examples
 @section Simple Examples
 
 The following chapters describe all of Octave's features in detail, but
 before doing that, it might be helpful to give a sampling of some of its
 capabilities.
 
 If you are new to Octave, we recommend that you try these examples to
-begin learning Octave by using it.  Lines marked like so, @samp{octave:13>},
-are lines you type, ending each with a carriage return.  Octave will
-respond with an answer, or by displaying a graph.
+begin learning Octave by using it.  Lines marked like so,
+@samp{octave:13>}, are lines you type, ending each with a carriage
+return.  Octave will respond with an answer, or by displaying a graph.
 
 @subsection Elementary Calculations
 
 Octave can easily be used for basic numerical calculations.  Octave
 knows about arithmetic operations (+,-,*,/), exponentiation (^),
 natural logarithms/exponents (log, exp), and the trigonometric
 functions (sin, cos, @dots{}).  Moreover, Octave calculations work
 on real or imaginary numbers (i,j).  In addition, some mathematical
@@ -111,19 +114,19 @@ type the following which will evaluate t
 tolerance of the calculation.
 
 @example
 octave:1> exp (i*pi)
 @end example
 
 @subsection Creating a Matrix
 
-Vectors and matrices are the basic building blocks for numerical analysis.
-To create a new matrix and store it in a variable so that you can
-refer to it later, type the command
+Vectors and matrices are the basic building blocks for numerical
+analysis.  To create a new matrix and store it in a variable so that you
+can refer to it later, type the command
 
 @example
 octave:1> A = [ 1, 1, 2; 3, 5, 8; 13, 21, 34 ]
 @end example
 
 @noindent
 Octave will respond by printing the matrix in neatly aligned columns.
 Octave uses a comma or space to separate entries in a row, and a
@@ -144,19 +147,20 @@ variable at the prompt.  For example, to
 matrix @code{B}, type the command
 
 @example
 octave:3> B
 @end example
 
 @subsection Matrix Arithmetic
 
-Octave has a convenient operator notation for performing matrix
-arithmetic.  For example, to multiply the matrix @code{A} by a scalar
-value, type the command
+Octave uses standard mathematical notation with the advantage over
+low-level languages that operators may act on scalars, vector, matrices,
+or N-dimensional arrays.  For example, to multiply the matrix @code{A}
+by a scalar value, type the command
 
 @example
 octave:4> 2 * A
 @end example
 
 @noindent
 To multiply the two matrices @code{A} and @code{B}, type the command
 
@@ -343,18 +347,17 @@ 1983, pages 55--64.
 To display the solution of the previous example graphically, use the
 command
 
 @example
 octave:1> plot (t, x)
 @end example
 
 @noindent
-If you are using a graphical user interface, Octave will automatically create
-a separate window to display the plot.
+Octave will automatically create a separate window to display the plot.
 
 To save a plot once it has been displayed on the screen, use the print
 command.  For example,
 
 @example
 print -dpdf foo.pdf
 @end example
 
@@ -365,30 +368,16 @@ the current plot in Portable Document Fo
 @example
 help print
 @end example
 
 @noindent
 explains more options for the @code{print} command and provides a list
 of additional output file formats.
 
-@subsection Editing What You Have Typed
-
-At the Octave prompt, you can recall, edit, and reissue previous
-commands using Emacs- or vi-style editing commands.  The default
-keybindings use Emacs-style commands.  For example, to recall the
-previous command, press @kbd{Control-p} (written @kbd{C-p} for
-short).  Doing this will normally bring back the previous line of input.
-@kbd{C-n} will bring up the next line of input, @kbd{C-b} will move
-the cursor backward on the line, @kbd{C-f} will move the cursor forward
-on the line, etc.
-
-A complete description of the command line editing capability is given
-in this manual, @pxref{Command Line Editing}.
-
 @subsection Help and Documentation
 
 Octave has an extensive help facility.  The same documentation that is
 available in printed form is also available from the Octave prompt,
 because both forms of the documentation are created from the same input
 file.
 
 In order to get good help you first need to know the name of the command
@@ -415,16 +404,30 @@ pager like @code{less} or @code{more}.  
 line, a @key{SPC} to advance one page, and @key{q} to quit the pager.
 
 The part of Octave's help facility that allows you to read the complete
 text of the printed manual from within Octave normally uses a separate
 program called Info.  When you invoke Info you will be put into a menu
 driven program that contains the entire Octave manual.  Help for using
 Info is provided in this manual, @pxref{Getting Help}.
 
+@subsection Editing What You Have Typed
+
+At the Octave prompt, you can recall, edit, and reissue previous
+commands using Emacs- or vi-style editing commands.  The default
+keybindings use Emacs-style commands.  For example, to recall the
+previous command, press @kbd{Control-p} (written @kbd{C-p} for
+short).  Doing this will normally bring back the previous line of input.
+@kbd{C-n} will bring up the next line of input, @kbd{C-b} will move
+the cursor backward on the line, @kbd{C-f} will move the cursor forward
+on the line, etc.
+
+A complete description of the command line editing capability is given
+in this manual, @pxref{Command Line Editing}.
+
 @node Conventions
 @section Conventions
 
 This section explains the notation conventions that are used in this
 manual.  You may want to skip this section and refer back to it later.
 
 @menu
 * Fonts::
@@ -433,22 +436,22 @@ manual.  You may want to skip this secti
 * Error Messages::
 * Format of Descriptions::
 @end menu
 
 @node Fonts
 @subsection Fonts
 @cindex documentation fonts
 
-Examples of Octave code appear in this font or form: @code{svd (a)}.
-Names that represent variables or function arguments appear
-in this font or form: @var{first-number}.  Commands that you type at the
-shell prompt appear in this font or form: @samp{octave --no-init-file}.
-Commands that you type at the Octave prompt sometimes appear in this font
-or form: @kbd{foo --bar --baz}.  Specific keys on your keyboard appear
+Examples of Octave code appear in this font or form: @w{@code{svd (a)}}.
+Names that represent variables or function arguments appear in this font
+or form: @var{first-number}.  Commands that you type at the shell prompt
+appear in this font or form: @w{@samp{octave --no-init-file}}.  Commands
+that you type at the Octave prompt sometimes appear in this font or
+form: @w{@kbd{foo --bar --baz}}.  Specific keys on your keyboard appear
 in this font or form: @key{RET}.
 
 @node Evaluation Notation
 @subsection Evaluation Notation
 @cindex evaluation notation
 @cindex documentation notation
 
 In the examples in this manual, results from expressions that you
@@ -484,39 +487,39 @@ eye (3)
          0  1  0
          0  0  1
 @end group
 @end example
 
 @noindent
 in order to clearly show the structure of the result.
 
-Sometimes to help describe one expression, another expression is
-shown that produces identical results.  The exact equivalence of
-expressions is indicated with @samp{@equiv{}}.  For example:
+Sometimes to help describe one expression, another expression is shown
+that produces identical results.  The exact equivalence of expressions
+is indicated with @samp{@equiv{}}.  For example:
 
 @example
 @group
 rot90 ([1, 2; 3, 4], -1)
 @equiv{}
 rot90 ([1, 2; 3, 4], 3)
 @equiv{}
 rot90 ([1, 2; 3, 4], 7)
 @end group
 @end example
 
 @node Printing Notation
 @subsection Printing Notation
 @cindex printing notation
 
-Many of the examples in this manual print text when they are
-evaluated.  In this manual the printed text resulting from an example
-is indicated by @samp{@print{}}.  The value that is returned by
-evaluating the expression is displayed with @samp{@result{}}
-(@code{1} in the next example) and follows on a separate line.
+Many of the examples in this manual print text when they are evaluated.
+In this manual the printed text resulting from an example is indicated
+by @samp{@print{}}.  The value that is returned by evaluating the
+expression is displayed with @samp{@result{}} (@code{1} in the next
+example) and follows on a separate line.
 
 @example
 @group
 printf ("foo %s\n", "bar")
      @print{} foo bar
      @result{} 1
 @end group
 @end example
@@ -535,21 +538,20 @@ fieldnames ([1, 2; 3, 4])
 error: fieldnames: Invalid input argument
 @end group
 @end example
 
 @node Format of Descriptions
 @subsection Format of Descriptions
 @cindex description format
 
-Functions and commands are described in this manual in a
-uniform format.  The first line of a description contains the name of
-the item followed by its arguments, if any.
-If there are multiple ways to invoke the function then each allowable
-form is listed.
+Functions and commands are described in this manual in a uniform format.
+The first line of a description contains the name of the item followed
+by its arguments, if any.  If there are multiple ways to invoke the
+function then each allowable form is listed.
 
 The description follows on succeeding lines, sometimes with examples.
 
 @menu
 * A Sample Function Description::
 * A Sample Command Description::
 @end menu
 
@@ -570,20 +572,22 @@ examples of function usage, notes about 
 to related functions.
 
 Here is a description of an imaginary function @code{foo}:
 
 @need 4000
 @deftypefn  {} {} foo (@var{x})
 @deftypefnx {} {} foo (@var{x}, @var{y})
 @deftypefnx {} {} foo (@var{x}, @var{y}, @dots{})
-The function @code{foo} subtracts @var{x} from @var{y}, then adds the
-remaining arguments to the result.
+Subtract @var{x} from @var{y}, then add any remaining arguments to the
+result.
 
-If @var{y} is not supplied, then the number 19 is used by default.
+The input @var{x} must be a numeric scalar, vector, or array.
+
+The optional input @var{y} defaults to 19 if it is not supplied.
 
 Example:
 
 @example
 @group
 foo (1, [3, 5], 3, 9)
      @result{} [ 14, 16 ]
 foo (5)
@@ -607,45 +611,16 @@ foo (@var{w}, @var{x}, @var{y}, @dots{})
 Any parameter whose name contains the name of a type (e.g.,
 @var{integer} or @var{matrix}) is expected to be of that
 type.  Parameters named @var{object} may be of any type.  Parameters
 with other sorts of names (e.g., @var{new_file}) are discussed
 specifically in the description of the function.  In some sections,
 features common to parameters of several functions are described at the
 beginning.
 
-Functions in Octave may be defined in several different ways:
-
-@table @asis
-@item Function File
-@cindex function file
-The function described is defined using Octave commands stored in a text
-file.  @xref{Function Files}.
-
-@item Built-in Function
-@cindex built-in function
-The function described is written in a language like C++, C, or Fortran,
-and is part of the compiled Octave binary.
-
-@item Loadable Function
-@cindex loadable function
-The function described is written in a language like C++, C, or Fortran.
-On systems that support dynamic linking of user-supplied functions, it
-may be automatically linked while Octave is running, but only if it is
-needed.  @xref{External Code Interface}.
-
-@item Mapping Function
-@cindex mapping function
-The function described works element-by-element for matrix and vector
-arguments.
-@end table
-
-Use @code{which} or @code{exist} to determine the category of a function
-and where it resides.
-
 @node A Sample Command Description
 @subsubsection A Sample Command Description
 @cindex command descriptions
 
 Commands are functions that may be called without surrounding their arguments
 in parentheses.  Command descriptions have a format similar to function
 descriptions.  For example, here is the description for Octave's @code{diary}
 command:
@@ -668,10 +643,11 @@ current working directory.
 @item off
 Stop recording the session in the diary file.
 
 @item @var{filename}
 Record the session in the file named @var{filename}.
 @end table
 
 With no arguments, @code{diary} toggles the current diary state.
-@seealso{history}
+@seealso{history, evalc}
 @end deftypefn
+
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -2634,17 +2634,17 @@ Example 3: number of output arguments ==
     @result{} nc = 2
 @end group
 @end example
 
 Example 4: number of output arguments != number of dimensions
 
 @example
 @group
-[nr, remainder] = size (ones (2, 3, 4, 5)
+[nr, remainder] = size (ones (2, 3, 4, 5))
     @result{} nr = 2
     @result{} remainder = 60
 @end group
 @end example
 
 @seealso{numel, ndims, length, rows, columns, size_equal, common_size}
 @end deftypefn */)
 {
diff --git a/libinterp/corefcn/sub2ind.cc b/libinterp/corefcn/sub2ind.cc
--- a/libinterp/corefcn/sub2ind.cc
+++ b/libinterp/corefcn/sub2ind.cc
@@ -59,42 +59,56 @@ get_dim_vector (const octave_value& val,
 }
 
 DEFUN (sub2ind, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{ind} =} sub2ind (@var{dims}, @var{i}, @var{j})
 @deftypefnx {} {@var{ind} =} sub2ind (@var{dims}, @var{s1}, @var{s2}, @dots{}, @var{sN})
 Convert subscripts to linear indices.
 
-Assume the following 3-by-3 matrices.  The left matrix contains the
-subscript tuples for each matrix element.  Those are converted to
-linear indices shown in the right matrix.  The matrices are linearly
-indexed moving from one column to next, filling up all rows in each
-column.
+The input @var{dims} is a dimension vector where each element is the size of
+the array in the respective dimension (@pxref{XREFsize,,size}).  The remaining
+inputs are scalars or vectors of subscripts to be converted.
+
+The output vector @var{ind} contains the converted linear indices.
+
+Background: Array elements can be specified either by a linear index which
+starts at 1 and runs through the number of elements in the array, or they may
+be specified with subscripts for the row, column, page, etc.  The functions
+@code{ind2sub} and @code{sub2ind} interconvert between the two forms.
+
+The linear index traverses dimension 1 (rows), then dimension 2 (columns), then
+dimension 3 (pages), etc. until it has numbered all of the elements.  Consider
+the following 3-by-3 matrices:
 
 @example
 @group
 [(1,1), (1,2), (1,3)]     [1, 4, 7]
 [(2,1), (2,2), (2,3)] ==> [2, 5, 8]
 [(3,1), (3,2), (3,3)]     [3, 6, 9]
 @end group
 @end example
 
+@noindent
+The left matrix contains the subscript tuples for each matrix element.  The
+right matrix shows the linear indices for the same matrix.
+
 The following example shows how to convert the two-dimensional indices
-@code{(2,1)} and @code{(2,3)} of a 3-by-3 matrix to a linear index.
+@code{(2,1)} and @code{(2,3)} of a 3-by-3 matrix to linear indices with a
+single call to @code{sub2ind}.
 
 @example
 @group
 s1 = [2, 2];
 s2 = [1, 3];
 ind = sub2ind ([3, 3], s1, s2)
-@result{} ind =  2   8
+    @result{} ind =  2   8
 @end group
 @end example
-@seealso{ind2sub}
+@seealso{ind2sub, size}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin < 2)
     print_usage ();
 
   dim_vector dv = get_dim_vector (args(0), "sub2ind").redim (nargin - 1);
@@ -169,62 +183,80 @@ ind = sub2ind ([3, 3], s1, s2)
 %!error <index \(_,1.5\)> sub2ind ([10 10], 1, 1.5)
 */
 
 DEFUN (ind2sub, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn {} {[@var{s1}, @var{s2}, @dots{}, @var{sN}] =} ind2sub (@var{dims}, @var{ind})
 Convert linear indices to subscripts.
 
-Assume the following 3-by-3 matrices.  The left matrix contains
-the linear indices @var{ind} for each matrix element.  Those are
-converted to subscript tuples shown in the right matrix.  The
-matrices are linearly indexed moving from one column to next,
-filling up all rows in each column.
+The input @var{dims} is a dimension vector where each element is the size of
+the array in the respective dimension (@pxref{XREFsize,,size}).  The second
+input @var{ind} contains linear indies to be converted.
+
+The outputs @var{s1}, @dots{}, @var{sN} contain the converted subscripts.
+
+Background: Array elements can be specified either by a linear index which
+starts at 1 and runs through the number of elements in the array, or they may
+be specified with subscripts for the row, column, page, etc.  The functions
+@code{ind2sub} and @code{sub2ind} interconvert between the two forms.
+
+The linear index traverses dimension 1 (rows), then dimension 2 (columns), then
+dimension 3 (pages), etc. until it has numbered all of the elements.  Consider
+the following 3-by-3 matrices:
 
 @example
 @group
 [1, 4, 7]     [(1,1), (1,2), (1,3)]
 [2, 5, 8] ==> [(2,1), (2,2), (2,3)]
 [3, 6, 9]     [(3,1), (3,2), (3,3)]
 @end group
 @end example
 
-The following example shows how to convert the linear indices
-@code{2} and @code{8} in a 3-by-3 matrix into a subscripts.
+@noindent
+The left matrix contains the linear indices for each matrix element.  The right
+matrix shows the subscript tuples for the same matrix.
+
+The following example shows how to convert the two-dimensional indices
+@code{(2,1)} and @code{(2,3)} of a 3-by-3 matrix to linear indices with a
+single call to @code{sub2ind}.
+
+The following example shows how to convert the linear indices @code{2} and
+@code{8} in a 3-by-3 matrix into subscripts.
 
 @example
 @group
 ind = [2, 8];
 [r, c] = ind2sub ([3, 3], ind)
     @result{} r =  2   2
     @result{} c =  1   3
 @end group
 @end example
 
-If the number of subscripts exceeds the number of dimensions, the
-exceeded dimensions are treated as @code{1}.  On the other hand,
-if less subscripts than dimensions are provided, the exceeding
-dimensions are merged.  For clarity see the following examples:
+If the number of output subscripts exceeds the number of dimensions, the
+exceeded dimensions are set to @code{1}.  On the other hand, if fewer
+subscripts than dimensions are provided, the exceeding dimensions are merged
+into the final requested dimension.  For clarity, consider the following
+examples:
 
-@example
+@example%
 @group
-ind = [2, 8];
+ind  = [2, 8];
 dims = [3, 3];
-% same as dims = [3, 3, 1]
+## same as dims = [3, 3, 1]
 [r, c, s] = ind2sub (dims, ind)
     @result{} r =  2   2
     @result{} c =  1   3
     @result{} s =  1   1
-% same as dims = 9
+## same as dims = [9]
 r = ind2sub (dims, ind)
     @result{} r =  2   8
 @end group
 @end example
-@seealso{sub2ind}
+@seealso{ind2sub, size}
 @end deftypefn */)
 {
   if (args.length () != 2)
     print_usage ();
 
   octave_value_list retval;
 
   // Redimension to provided number of subscripts.
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -910,17 +910,17 @@ will cause @code{nargout} to return 0 in
 @end example
 
 @noindent
 will cause @code{nargout} to return 2 inside the function @code{f}.
 
 In the second usage,
 
 @example
-nargout (@@histc) \% or nargout ("histc")
+nargout (@@histc)   # or nargout ("histc") using a string input
 @end example
 
 @noindent
 will return 2, because @code{histc} has two outputs, whereas
 
 @example
 nargout (@@imread)
 @end example
diff --git a/scripts/miscellaneous/open.m b/scripts/miscellaneous/open.m
--- a/scripts/miscellaneous/open.m
+++ b/scripts/miscellaneous/open.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {} {@var{output} =} open @var{file}
+## @deftypefn  {} {} open @var{file}
 ## @deftypefnx {} {@var{output} =} open (@var{file})
 ## Open the file @var{file} in Octave or in an external application based on
 ## the file type as determined by the filename extension.
 ##
 ## Recognized file types are
 ##
 ## @table @code
 ## @item .m
diff --git a/scripts/prefs/setpref.m b/scripts/prefs/setpref.m
--- a/scripts/prefs/setpref.m
+++ b/scripts/prefs/setpref.m
@@ -13,17 +13,17 @@
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} setpref ("@var{group}", "@var{pref}", @var{val})
-## @deftypefnx {} {} addpref ("@var{group}", @{"@var{pref1}", "@var{pref2}", @dots{}@}, @{@var{val1}, @var{val2}, @dots{}@})
+## @deftypefnx {} {} setpref ("@var{group}", @{"@var{pref1}", "@var{pref2}", @dots{}@}, @{@var{val1}, @var{val2}, @dots{}@})
 ## Set the preference @var{pref} to the given @var{val} in the named preference
 ## group @var{group}.
 ##
 ## The named preference group must be a string.
 ##
 ## The preference @var{pref} may be a string or a cell array of strings.
 ##
 ## The corresponding value @var{val} may be any Octave value, .e.g., double,
