# HG changeset patch
# User CarnÃ« Draug <carandraug+dev@gmail.com>
# Date 1373675597 -3600
#      Sat Jul 13 01:33:17 2013 +0100
# Node ID 4660d047955e21ed170fcb8afba688ad3c6268c9
# Parent  badc46a0a2307a451c6c81bef84e1c51391720ab
Make use of gripe_disabled_feature() for image IO functions.

* __magick_read__.cc: use gripe_disabled_feature() instead of error()
  to fail due to missing features. Comment code instead of CPP "#if 0".
  Enclose maybe_initialize_magick() in the more general #ifdef HAVE_MAGICK.
  It was the only function outside it, instead having a separate condition
  inside the function causing a warning about empty function in systems
  without Magick++.

diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -146,31 +146,29 @@ read_indexed_images (std::vector<Magick:
     }
 
   Matrix map = Matrix (mapsize, 3);
   Matrix alpha;
 
   switch (type)
     {
     case Magick::PaletteMatteType:
-#if 0
-      warning ("palettematte");
-      Matrix map (mapsize, 3);
-      Matrix alpha (mapsize, 1);
-      for (i = 0; i < mapsize; i++)
-        {
-          warning ("%d", i);
-          Magick::ColorRGB c = imvec[0].colorMap (i);
-          map(i,0) = c.red ();
-          map(i,1) = c.green ();
-          map(i,2) = c.blue ();
-          alpha(i,1) = c.alpha ();
-        }
-      break;
-#endif
+//      warning ("palettematte");
+//      Matrix map (mapsize, 3);
+//      Matrix alpha (mapsize, 1);
+//      for (i = 0; i < mapsize; i++)
+//        {
+//          warning ("%d", i);
+//          Magick::ColorRGB c = imvec[0].colorMap (i);
+//          map(i,0) = c.red ();
+//          map(i,1) = c.green ();
+//          map(i,2) = c.blue ();
+//          alpha(i,1) = c.alpha ();
+//        }
+//      break;
 
     case Magick::PaletteType:
       alpha = Matrix (0, 0);
       for (i = 0; i < mapsize; i++)
         {
           Magick::ColorRGB c = imvec[0].colorMap (i);
           map(i,0) = c.red ();
           map(i,1) = c.green ();
@@ -367,23 +365,19 @@ read_images (const std::vector<Magick::I
       return retval;
     }
 
   retval(0) = im;
 
   return retval;
 }
 
-#endif
-
 static void
 maybe_initialize_magick (void)
 {
-#ifdef HAVE_MAGICK
-
   static bool initialized = false;
 
   if (! initialized)
     {
       // Save locale as GraphicsMagick might change this (depending on version)
       const char *static_locale = setlocale (LC_ALL, NULL);
       const std::string locale (static_locale);
 
@@ -395,32 +389,34 @@ maybe_initialize_magick (void)
       setlocale (LC_ALL, locale.c_str ());
 
       if (QuantumDepth < 32)
         warning ("your version of %s limits images to %d bits per pixel",
                  MagickPackageName, QuantumDepth);
 
       initialized = true;
     }
+}
 #endif
-}
 
 DEFUN_DLD (__magick_read__, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{m} =} __magick_read__ (@var{fname}, @var{index})\n\
 @deftypefnx {Loadable Function} {[@var{m}, @var{colormap}] =} __magick_read__ (@var{fname}, @var{index})\n\
 @deftypefnx {Loadable Function} {[@var{m}, @var{colormap}, @var{alpha}] =} __magick_read__ (@var{fname}, @var{index})\n\
 Read images with ImageMagick++.  In general you should not be using this\n\
 function.  Instead use @code{imread}.\n\
 @seealso{imread}\n\
 @end deftypefn")
 {
   octave_value_list output;
 
-#ifdef HAVE_MAGICK
+#ifndef HAVE_MAGICK
+  gripe_disabled_feature ("imread", "Image IO");
+#else
 
   maybe_initialize_magick ();
 
   if (args.length () > 3 || args.length () < 1 || ! args(0).is_string ()
       || nargout > 3)
     {
       print_usage ();
       return output;
@@ -520,22 +516,18 @@ function.  Instead use @code{imread}.\n\
           break;
 
         case 32:
         case 64:
         default:
           error ("__magick_read__: image depths greater than 16-bit are not supported");
         }
     }
-#else
-
-  error ("imread: image reading capabilities were disabled when Octave was compiled");
 
 #endif
-
   return output;
 }
 
 /*
 ## No test needed for internal helper function.
 %!assert (1)
 */
 
@@ -877,17 +869,20 @@ DEFUN_DLD (__magick_write__, args, ,
 @deftypefnx {Loadable Function} {} __magick_write__ (@var{fname}, @var{fmt}, @var{img}, @var{map})\n\
 Write images with ImageMagick++.  In general you should not be using this\n\
 function.  Instead use @code{imwrite}.\n\
 @seealso{imread}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-#ifdef HAVE_MAGICK
+#ifndef HAVE_MAGICK
+  gripe_disabled_feature ("imwrite", "Image IO");
+#else
+
   maybe_initialize_magick ();
 
   int nargin = args.length ();
 
   if (nargin > 2)
     {
       std::string filename = args(0).string_value ();
 
@@ -910,23 +905,19 @@ function.  Instead use @code{imwrite}.\n
           else
             error ("__magick_write__: FMT must be string");
         }
       else
         error ("__magick_write__: FNAME must be a string");
     }
   else
     print_usage ();
-#else
-
-  error ("__magick_write__: not available in this version of Octave");
 
 #endif
-
-return retval;
+  return retval;
 }
 
 /*
 ## No test needed for internal helper function.
 %!assert (1)
 */
 
 #ifdef HAVE_MAGICK
@@ -1012,17 +1003,19 @@ DEFUN_DLD (__magick_finfo__, args, ,
 @deftypefn {Loadable Function} {} __magick_finfo__ (@var{fname})\n\
 Read image information with GraphicsMagick++.  In general you should\n\
 not be using this function.  Instead use @code{imfinfo}.\n\
 @seealso{imfinfo, imread}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-#ifdef HAVE_MAGICK
+#ifndef HAVE_MAGICK
+  gripe_disabled_feature ("imfinfo", "Image IO");
+#else
 
   maybe_initialize_magick ();
 
   if (args.length () < 1 || ! args (0).is_string ())
     {
       print_usage ();
       return retval;
     }
@@ -1132,23 +1125,17 @@ not be using this function.  Instead use
     {
       warning ("Magick++ coder error: %s", e.what ());
     }
   catch (Magick::Exception& e)
     {
       error ("Magick++ exception: %s", e.what ());
       return retval;
     }
-
-#else
-
-  error ("imfinfo: not available in this version of Octave");
-
 #endif
-
   return retval;
 }
 
 /*
 ## No test needed for internal helper function.
 %!assert (1)
 */
 
