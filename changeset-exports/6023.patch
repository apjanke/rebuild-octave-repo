# HG changeset patch
# User jwe
# Date 1159841661 0
#      Tue Oct 03 02:14:21 2006 +0000
# Node ID 75a828280d68b38c9b4f6dcfbc6aa9e55d3158e1
# Parent  abd750456740adc3e268ed2e9d571dfd0a3c07fd
[project @ 2006-10-03 02:14:21 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2006-10-02  Bill Denney  <denney@seas.upenn.edu>
+
+	* strings/deblank.m, strings/upper.m, strings/lower.m,
+	general/__isequal__.m: Minimize looping using cellfun.
+
 2006-10-02  David Bateman  <dbateman@free.fr>
 
 	* pkg/pkg.m (copy_files): always create installation directory.
 
 2006-10-02  Thomas Weber  <thomas.weber.mail@gmail.com>
 
 	* miscellaneous/doc.m: Swap file and directory args to info.
 
diff --git a/scripts/general/__isequal__.m b/scripts/general/__isequal__.m
--- a/scripts/general/__isequal__.m
+++ b/scripts/general/__isequal__.m
@@ -49,21 +49,20 @@ function t = __isequal__ (nans_compare_e
   endif
 
   l_v = nargin - 2;
 
   if (isstruct (x))
 
     n_x = length (fieldnames (x));
 
-    t = true;
-    for argn = 1:l_v
-      y = varargin{argn};
-      t = t && isstruct (y) && (n_x == length (fieldnames (y)));
-    endfor
+    t = all (cellfun (@isstruct, varargin)) && ...
+	all (n_x == cellfun (@length,
+			     cellfun (@fieldnames, varargin,
+				      "UniformOutput", false))); 
     if (!t)
       return;
     endif
 
     for argn = 1:l_v
       y = varargin{argn};
       for [v, k] = x
 	if (iscell (k))
@@ -74,26 +73,23 @@ function t = __isequal__ (nans_compare_e
         t = t && struct_contains (y, k) \
               && __isequal__ (nans_compare_equal, v, fld);
       endfor
       if (!t)
         return;
       endif
     endfor
 
-  elseif ((iscell (x)) || (islist (x)))
+  elseif (iscell (x) || islist (x))
 
     x = x(:);
     l_x = length (x);
 
-    t = true;
-    for argn = 1:l_v
-      y = varargin{argn}(:);
-      t = t && (iscell (y) || islist (y)) && (l_x == length (y));
-    endfor
+    t = all ((cellfun (@iscell, varargin) | cellfun (@islist, varargin)) && ...
+             all (l_x == cellfun (@length, varargin)));
     if (!t)
       return;
     endif
 
     for argn = 1:l_v
       y = varargin{argn}(:);
       for p = 1:l_x
         t = t && __isequal__ (nans_compare_equal, x{p}, y{p});
diff --git a/scripts/strings/deblank.m b/scripts/strings/deblank.m
--- a/scripts/strings/deblank.m
+++ b/scripts/strings/deblank.m
@@ -40,17 +40,15 @@ function s = deblank (s)
     if (isempty (s) || isempty (k))
       s = "";
     else
       s = s(:,1:ceil (max (k) / rows (s)));
     endif
 
   elseif (iscell(s))
 
-    for i = 1:numel (s)
-      s{i} = deblank (s{i});
-    endfor
+    s = cellfun (@deblank, s, "UniformOutput", false);
 
   else
     error ("deblank: expecting string argument");
   endif
 
 endfunction
diff --git a/scripts/strings/lower.m b/scripts/strings/lower.m
--- a/scripts/strings/lower.m
+++ b/scripts/strings/lower.m
@@ -30,17 +30,14 @@ function retval = lower (s)
 
   if (nargin != 1)
     usage ("lower (s)");
   endif
 
   if (ischar (s))
     retval = tolower (s);
   elseif (iscellstr (s))
-    retval = cell (size (s));
-    for i = 1:(numel (s))
-      retval{i} = tolower(s{i});
-    endfor
+    retval = cellfun (@tolower, s, "UniformOutput", false);
   else
     error ("lower: `s' must be a string or cell array of strings");
   endif
 
 endfunction
diff --git a/scripts/strings/upper.m b/scripts/strings/upper.m
--- a/scripts/strings/upper.m
+++ b/scripts/strings/upper.m
@@ -30,17 +30,14 @@ function retval = upper (s)
 
   if (nargin != 1)
     usage ("upper (s)");
   endif
 
   if (ischar (s))
     retval = toupper (s);
   elseif (iscellstr (s))
-    retval = cell (size (s));
-    for i = 1:(numel (s))
-      retval{i} = toupper(s{i});
-    endfor
+    retval = cellfun (@toupper, s, "UniformOutput", false);
   else
     error ("upper: `s' must be a string or cell array of strings");
   endif
 
 endfunction
