# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1502486798 14400
#      Fri Aug 11 17:26:38 2017 -0400
# Node ID 75eff5b667b3cdbcf8d107b25477f9b536a89a88
# Parent  142a9c7e403abeac7dca1b488f1c3b1072d1f355
new mxSetProperty function for MEX API

* mex.cc, mexproto.h (mxSetProperty): New function.

* mex.cc (mxArray_octave_value::get_property): Forward to
octave_classdef::get_property to do the real work.

* mxarray.in.h, mex.cc (mxArray_octave_value::set_property): New function.

* mxarray.in.h (mxArray::set_property): New virtual function.

* mxarray.in.h (mxArray::as_octave_value): Now public.

* ov-classdef.h (cdef_object::set_property, cdef_object::set_property,
cdef_object_array::set_property, cdef_object_array::set_property,
cdef_object_scalar::set_property, cdef_object_scalar::set_property):
New functions.
(cdef_object_rep::set_property, cdef_object_rep::set_property):
New virtual functions.

diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -372,41 +372,49 @@ public:
       }
 
     return class_name;
   }
 
   // Not allowed.
   void set_class_name (const char * /*name_arg*/) { request_mutation (); }
 
-  mxArray * get_property (mwIndex idx, const char *name) const
+  mxArray * get_property (mwIndex idx, const char *pname) const
   {
     mxArray *retval = nullptr;
 
     if (val.is_classdef_object ())
       {
         octave_classdef *ov_cdef = val.classdef_object_value ();
 
         if (ov_cdef)
           {
-            cdef_object& cdef = ov_cdef->get_object_ref ();
-
-            if (cdef.is_array ())
-              cdef = cdef.array_value ().elem (idx);
-
-            octave_value prop_val = cdef.get (name);
-
-            if (prop_val.is_defined())
-              retval = new mxArray (prop_val);
+            octave_value pval = ov_cdef->get_property (idx, pname);
+
+            if (val.is_defined())
+              retval = new mxArray (pval);
           }
       }
 
     return retval;
   }
 
+  void set_property (mwIndex idx, const char *pname, const mxArray *pval)
+  {
+    if (val.is_classdef_object ())
+      {
+        octave_classdef *ov_cdef = val.classdef_object_value ();
+
+        if (ov_cdef)
+          ov_cdef->set_property (idx, pname, pval->as_octave_value ());
+      }
+    else
+      err_invalid_type ();
+  }
+
   mxArray * get_cell (mwIndex /*idx*/) const
   {
     request_mutation ();
     return nullptr;
   }
 
   // Not allowed.
   void set_cell (mwIndex /*idx*/, mxArray * /*val*/) { request_mutation (); }
@@ -2970,16 +2978,23 @@ mxGetClassName (const mxArray *ptr)
 }
 
 void
 mxSetClassName (mxArray *ptr, const char *name)
 {
   ptr->set_class_name (name);
 }
 
+void
+mxSetProperty (mxArray *ptr, mwIndex idx, const char *property_name,
+               const mxArray *property_value)
+{
+  ptr->set_property (idx, property_name, property_value);
+}
+
 mxArray *
 mxGetProperty (const mxArray *ptr, mwIndex idx, const char *property_name)
 {
   return ptr->get_property (idx, property_name);
 }
 
 // Cell support.
 mxArray *
diff --git a/libinterp/corefcn/mexproto.h b/libinterp/corefcn/mexproto.h
--- a/libinterp/corefcn/mexproto.h
+++ b/libinterp/corefcn/mexproto.h
@@ -240,16 +240,19 @@ extern OCTINTERP_API void mxSetData (mxA
 extern OCTINTERP_API void mxSetImagData (mxArray *ptr, void *pi);
 
 /* Classes.  */
 extern OCTINTERP_API mxClassID mxGetClassID (const mxArray *ptr);
 extern OCTINTERP_API const char * mxGetClassName (const mxArray *ptr);
 extern OCTINTERP_API void mxSetClassName (mxArray *ptr, const char *name);
 extern OCTINTERP_API mxArray * mxGetProperty (const mxArray *ptr, mwIndex idx,
                                               const char *property_name);
+extern OCTINTERP_API void mxSetProperty (mxArray *ptr, mwIndex idx,
+                                         const char *property_name,
+                                         const mxArray *property_value);
 
 /* Cell support.  */
 extern OCTINTERP_API mxArray * mxGetCell (const mxArray *ptr, mwIndex idx);
 
 extern OCTINTERP_API void mxSetCell (mxArray *ptr, mwIndex idx, mxArray *val);
 
 /* Sparse support.  */
 extern OCTINTERP_API mwIndex * mxGetIr (const mxArray *ptr);
diff --git a/libinterp/corefcn/mxarray.in.h b/libinterp/corefcn/mxarray.in.h
--- a/libinterp/corefcn/mxarray.in.h
+++ b/libinterp/corefcn/mxarray.in.h
@@ -219,23 +219,33 @@ public:
   virtual bool is_scalar (void) const = 0;
 
   virtual mxClassID get_class_id (void) const = 0;
 
   virtual const char * get_class_name (void) const = 0;
 
   virtual void set_class_name (const char *name_arg) = 0;
 
-  virtual mxArray * get_property (mwIndex /*idx*/, const char * /*name*/) const
+  // The following functions aren't pure virtual becuase they are only
+  // valid for one type.  Making them pure virtual would mean tha they
+  // have to be implemented for all derived types, and all of those
+  // would need to throw errors instead of just doing it once here.
+
+  virtual mxArray *
+  get_property (mwIndex /*idx*/, const char * /*pname*/) const
   {
     return nullptr;
   }
 
-  // FIXME: Why not just have this '= 0' as the others?
-  // Could then eliminate err_invalid_type function and #include "error.h".
+  virtual void set_property (mwIndex /*idx*/, const char * /*pname*/,
+                             const mxArray * /*pval*/)
+  {
+    err_invalid_type ();
+  }
+
   virtual mxArray * get_cell (mwIndex /*idx*/) const
   {
     err_invalid_type ();
   }
 
   virtual void set_cell (mwIndex idx, mxArray *val) = 0;
 
   virtual double get_scalar (void) const = 0;
@@ -440,19 +450,22 @@ public:
 
   const char * get_name (void) const { return name; }
 
   void set_name (const char *name_arg);
 
   mxClassID get_class_id (void) const { return rep->get_class_id (); }
 
   const char * get_class_name (void) const { return rep->get_class_name (); }
-  
-  mxArray * get_property (mwIndex idx, const char * propNm) const
-  { return rep->get_property (idx, propNm); }
+
+  mxArray * get_property (mwIndex idx, const char *pname) const
+  { return rep->get_property (idx, pname); }
+
+  void set_property (mwIndex idx, const char *pname, const mxArray *pval)
+  { rep->set_property (idx, pname, pval); }
 
   void set_class_name (const char *name_arg)
   { DO_VOID_MUTABLE_METHOD (set_class_name (name_arg)); }
 
   mxArray * get_cell (mwIndex idx) const
   { DO_MUTABLE_METHOD (mxArray *, get_cell (idx)); }
 
   void set_cell (mwIndex idx, mxArray *val)
@@ -529,18 +542,16 @@ public:
         strcpy (retval, str);
       }
 
     return retval;
   }
 
   static octave_value as_octave_value (const mxArray *ptr);
 
-protected:
-
   octave_value as_octave_value (void) const;
 
 private:
 
   mutable mxArray_base *rep;
 
   char *name;
 
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -105,16 +105,27 @@ public:
   virtual void put (const std::string&, const octave_value&)
   { err_invalid_object ("put"); }
 
   virtual octave_value get (const std::string&) const
   {
     err_invalid_object ("get");
   }
 
+  virtual void set_property (octave_idx_type, const std::string&,
+                             const octave_value&)
+  {
+    err_invalid_object ("set_property");
+  }
+
+  virtual octave_value get_property (octave_idx_type, const std::string&) const
+  {
+    err_invalid_object ("get_property");
+  }
+
   virtual octave_value_list
   subsref (const std::string&, const std::list<octave_value_list>&,
            int, size_t&, const cdef_class&, bool)
   {
     err_invalid_object ("subsref");
   }
 
   virtual octave_value
@@ -253,16 +264,24 @@ public:
   Array<cdef_object> array_value (void) const { return rep->array_value (); }
 
   void put (const std::string& pname, const octave_value& val)
   { rep->put (pname, val); }
 
   octave_value get (const std::string& pname) const
   { return rep->get (pname); }
 
+  void set_property (octave_idx_type idx, const std::string& pname,
+                     const octave_value& pval)
+  { return rep->set_property (idx, pname, pval); }
+
+  octave_value
+  get_property (octave_idx_type idx, const std::string& pname) const
+  { return rep->get_property (idx, pname); }
+
   octave_value_list
   subsref (const std::string& type, const std::list<octave_value_list>& idx,
            int nargout, size_t& skip, const cdef_class& context,
            bool auto_add = false)
   { return rep->subsref (type, idx, nargout, skip, context, auto_add); }
 
   octave_value
   subsasgn (const std::string& type, const std::list<octave_value_list>& idx,
@@ -376,16 +395,32 @@ public:
   subsref (const std::string& type, const std::list<octave_value_list>& idx,
            int nargout, size_t& skip, const cdef_class& context,
            bool auto_add);
 
   octave_value
   subsasgn (const std::string& type, const std::list<octave_value_list>& idx,
             const octave_value& rhs);
 
+  void set_property (octave_idx_type idx, const std::string& pname,
+                     const octave_value& pval)
+  {
+    cdef_object& tmp = array.elem (idx);
+
+    return tmp.put (pname, pval);
+  }
+
+  octave_value
+  get_property (octave_idx_type idx, const std::string& pname) const
+  {
+    cdef_object tmp = array.elem (idx);
+
+    return tmp.get (pname);
+  }
+
 private:
   Array<cdef_object> array;
 
   void fill_empty_values (void) { fill_empty_values (array); }
 
   void fill_empty_values (Array<cdef_object>& arr);
 
   // Private copying!
@@ -414,16 +449,34 @@ public:
     Cell val = map.contents (pname);
 
     if (val.numel () < 1)
       error ("get: unknown slot: %s", pname.c_str ());
 
     return val(0, 0);
   }
 
+  void set_property (octave_idx_type idx, const std::string& pname,
+                     const octave_value& pval)
+  {
+    if (idx != 0)
+      error ("invalid index");  // FIXME
+
+    put (pname, pval);
+  }
+
+  octave_value
+  get_property (octave_idx_type idx, const std::string& pname) const
+  {
+    if (idx != 0)
+      error ("invalid index");  // FIXME
+
+    return get (pname);
+  }
+
   octave_value_list
   subsref (const std::string& type, const std::list<octave_value_list>& idx,
            int nargout, size_t& skip, const cdef_class& context,
            bool auto_add);
 
   octave_value
   subsasgn (const std::string& type, const std::list<octave_value_list>& idx,
             const octave_value& rhs);
@@ -1448,16 +1501,28 @@ public:
                   const octave_value& rhs);
 
   string_vector map_keys (void) const { return object.map_keys (); }
 
   octave_map map_value (void) const { return object.map_value (); }
 
   dim_vector dims (void) const { return object.dims (); }
 
+  void set_property (octave_idx_type idx, const std::string& name,
+                     const octave_value& pval)
+  {
+    object.set_property (idx, name, pval);
+  }
+
+  octave_value
+  get_property (octave_idx_type idx, const std::string& name) const
+  {
+    return object.get_property (idx, name);
+  }
+
 public:
   int type_id (void) const { return t_id; }
   std::string type_name (void) const { return t_name; }
   std::string class_name (void) const { return object.class_name (); }
 
   static int static_type_id (void) { return t_id; }
   static std::string static_type_name (void) { return t_name; }
   static std::string static_class_name (void) { return "<unknown>"; }
