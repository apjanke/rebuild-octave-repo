# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1240517152 14400
#      Thu Apr 23 16:05:52 2009 -0400
# Node ID d8f9588c6ba1d6fdbedf783847092fedad8397e1
# Parent  e716cafee800a2d80d19f73c0da689664643f360
object exemplars

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,29 @@
+2009-04-23  John W. Eaton  <jwe@octave.org>
+
+	* ov-class.cc (Fclass): Check newly constructed classes against
+	the first constructed object of the class.
+
+	* ov-class.h, ov-class.cc (octave_class::exmplar_info): New class.
+	(exemplar_map): New static data member.
+	(exemplar_iterator, exemplar_const_iterator): New typedefs.
+
+	* ov-class.h (octave_class::nparents,
+	octave_class::parent_class_name_list): New functions.
+	* ov.h (octave_base_value::nparents,
+	octave_base_value::parent_class_name_list): New functions.
+	* ov-base.h, ov-base.cc (octave_base_value::nparents,
+	octave_base_value::parent_class_name_list): New functions.
+	(parent_class_names): Error if called for wrong type argument.
+
+	* symtab.cc (load_out_of_date_fcn): New arg, dispatch_type.
+	(out_of_date_check_internal): Pass dispatch type to
+	load_out_of_date_fcn.
+
 2009-04-22  John W. Eaton  <jwe@octave.org>
 
 	* ov-base-int.cc (octave_base_int_helper<T, false,
 	false>::char_value_out_of_range): Correct result for specialization.
 
 	* ov-class.cc (octave_class::dotref, octave_class::subsasgn):
 	Protect against possibly invalid octave_value -> string conversions.
 
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -846,16 +846,42 @@ octave_base_value::map_value (void) cons
 string_vector
 octave_base_value::map_keys (void) const
 {
   string_vector retval;
   gripe_wrong_type_arg ("octave_base_value::map_keys()", type_name ());
   return retval;
 }
 
+size_t
+octave_base_value::nparents (void) const
+{
+  size_t retval = 0;
+  gripe_wrong_type_arg ("octave_base_value::nparents()", type_name ());
+  return retval;
+}
+
+std::list<std::string>
+octave_base_value::parent_class_name_list (void) const
+{
+  std::list<std::string> retval;
+  gripe_wrong_type_arg ("octave_base_value::parent_class_name_list()",
+			type_name ());
+  return retval;
+}
+
+string_vector
+octave_base_value::parent_class_names (void) const
+{
+  string_vector retval;
+  gripe_wrong_type_arg ("octave_base_value::parent_class_names()",
+			type_name ());
+  return retval;
+}
+
 octave_function *
 octave_base_value::function_value (bool silent)
 {
   octave_function *retval = 0;
 
   if (! silent)
     gripe_wrong_type_arg ("octave_base_value::function_value()",
 			  type_name ());
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -447,18 +447,21 @@ public:
   virtual Array<std::string> cellstr_value (void) const;
 
   virtual Range range_value (void) const;
 
   virtual Octave_map map_value (void) const;
 
   virtual string_vector map_keys (void) const;
 
-  virtual string_vector parent_class_names (void) const
-    { return string_vector (); }
+  virtual size_t nparents (void) const;
+
+  virtual std::list<std::string> parent_class_name_list (void) const;
+
+  virtual string_vector parent_class_names (void) const;
 
   // FIXME -- should this warn if called for a non-class type?
   virtual octave_base_value *find_parent_class (const std::string&)
     { return 0; }
 
   virtual octave_function *function_value (bool silent = false);
 
   virtual const octave_function *function_value (bool silent = false) const;
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -1279,16 +1279,97 @@ octave_class::in_class_method (void) con
 
   return (fcn
 	  && (fcn->is_class_method ()
 	      || fcn->is_class_constructor ()
 	      || fcn->is_private_function_of_class (class_name ()))
 	  && fcn->dispatch_class () == class_name ());
 }
 
+octave_class::exemplar_info::exemplar_info (const octave_value& obj)
+  : field_names (), parent_class_names ()
+{
+  if (obj.is_object ())
+    {
+      Octave_map m = obj.map_value ();
+      field_names = m.keys ();
+
+      parent_class_names = obj.parent_class_name_list ();
+    }
+  else
+    error ("invalid call to exmplar_info constructor");
+}
+
+
+// A map from class names to lists of fields.
+std::map<std::string, octave_class::exemplar_info> octave_class::exemplar_map;
+
+bool
+octave_class::exemplar_info::compare (const octave_value& obj) const
+{
+  bool retval = true;
+
+  if (obj.is_object ())
+    {
+      if (nfields () == obj.nfields ())
+	{
+	  Octave_map obj_map = obj.map_value ();
+	  string_vector obj_fnames = obj_map.keys ();
+	  string_vector fnames = fields ();
+
+	  for (octave_idx_type i = 0; i < nfields (); i++)
+	    {
+	      if (obj_fnames[i] != fnames[i])
+		{
+		  retval = false;
+		  error ("mismatch in field names");
+		  break;
+		}
+	    }
+
+	  if (nparents () == obj.nparents ())
+	    {
+	      std::list<std::string> obj_parents
+		= obj.parent_class_name_list ();
+	      std::list<std::string> pnames = parents ();
+
+	      std::list<std::string>::const_iterator p = obj_parents.begin ();
+	      std::list<std::string>::const_iterator q = pnames.begin ();
+
+	      while (p != obj_parents.end ())
+		{
+		  if (*p++ != *q++)
+		    {
+		      retval = false;
+		      error ("mismatch in parent classes");
+		      break;
+		    }
+		}
+	    }
+	  else
+	    {
+	      retval = false;
+	      error ("mismatch in number of parent classes");
+	    }
+	}
+      else
+	{
+	  retval = false;
+	  error ("mismatch in number of fields");
+	}
+    }
+  else
+    {
+      retval = false;
+      error ("inavlid comparison of class exemplar to non-class object");
+    }
+
+  return retval;
+}
+
 DEFUN (class, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} class (@var{expr})\n\
 @deftypefnx {Built-in Function} {} class (@var{s}, @var{id})\n\
 @deftypefnx {Built-in Function} {} class (@var{s}, @var{id}, @var{p}, @dots{})\n\
 Return the class of the expression @var{expr} or create a class with\n\
 fields from structure @var{s} and name (string) @var{id}.  Additional\n\
 arguments name a list of parent classes from which the new class is\n\
@@ -1320,16 +1401,28 @@ derived.\n\
 		  if (nargin == 2)
 		    retval = octave_value (new octave_class (m, id));
 		  else
 		    {
 		      octave_value_list parents = args.slice (2, nargin-2);
 
 		      retval = octave_value (new octave_class (m, id, parents));
 		    }
+
+		  if (! error_state)
+		    {
+		      octave_class::exemplar_const_iterator it
+			= octave_class::exemplar_map.find (id);
+
+		      if (it == octave_class::exemplar_map.end ())
+			octave_class::exemplar_map[id]
+			  = octave_class::exemplar_info (retval);
+		      else if (! it->second.compare (retval))
+			error ("class: object of class `%s' does not match previously constructed objects", id.c_str ());
+		    }
 		}
 	      else
 		error ("class: invalid call from outside class constructor");
 	    }
 	  else
 	    error ("class: expecting character string as second argument");
 	}
       else
diff --git a/src/ov-class.h b/src/ov-class.h
--- a/src/ov-class.h
+++ b/src/ov-class.h
@@ -104,32 +104,37 @@ public:
   octave_idx_type numel (void) const
   {
     dim_vector dv = dims ();
     return dv.numel ();
   }
 
   octave_idx_type nfields (void) const { return map.nfields (); }
 
+  size_t nparents (void) const { return parent_list.size (); }
+
   octave_value reshape (const dim_vector& new_dims) const
     { return map.reshape (new_dims); }
 
   octave_value resize (const dim_vector& dv, bool = false) const
     { Octave_map tmap = map; tmap.resize (dv); return tmap; }
 
   bool is_defined (void) const { return true; }
 
   bool is_map (void) const { return false; }
 
   bool is_object (void) const { return true; }
 
   Octave_map map_value (void) const { return map; }
 
   string_vector map_keys (void) const;
 
+  std::list<std::string> parent_class_name_list (void) const
+    { return parent_list; }
+
   string_vector parent_class_names (void) const
     { return string_vector (parent_list); }
 
   octave_base_value *find_parent_class (const std::string&);
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
@@ -175,16 +180,63 @@ public:
 private:
   static int t_id;
 
   static const std::string t_name;
   std::string c_name;
   std::list<std::string> parent_list;
 
   bool in_class_method (void) const;
+
+public:
+  // The list of field names and parent classes defines a class.  We
+  // keep track of each class that has been created so that we know
+  class exemplar_info
+  {
+  public:
+
+    exemplar_info (void) : field_names (), parent_class_names () { }
+
+    exemplar_info (const octave_value& obj);
+
+    exemplar_info (const exemplar_info& x)
+      : field_names (x.field_names),
+	parent_class_names (x.parent_class_names) { }
+
+    exemplar_info& operator = (const exemplar_info& x)
+    {
+      if (&x != this)
+	{
+	  field_names = x.field_names;
+	  parent_class_names = x.parent_class_names;
+	}
+      return *this;
+    }
+
+    octave_idx_type nfields (void) const { return field_names.length (); }
+
+    size_t nparents (void) const { return parent_class_names.size (); }
+
+    string_vector fields (void) const { return field_names; }
+
+    std::list<std::string> parents (void) const { return parent_class_names; }
+
+    bool compare (const octave_value& obj) const;
+
+  private:
+
+    string_vector field_names;
+    std::list<std::string> parent_class_names;
+  };
+
+  // A map from class names to lists of fields.
+  static std::map<std::string, exemplar_info> exemplar_map;
+
+  typedef std::map<std::string, exemplar_info>::iterator exemplar_iterator;
+  typedef std::map<std::string, exemplar_info>::const_iterator exemplar_const_iterator;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -825,16 +825,22 @@ public:
   Range range_value (void) const
     { return rep->range_value (); }
 
   Octave_map map_value (void) const;
 
   string_vector map_keys (void) const
     { return rep->map_keys (); }
 
+  size_t nparents (void) const
+    { return rep->nparents (); }
+
+  std::list<std::string> parent_class_name_list (void) const
+    { return rep->parent_class_name_list (); }
+
   string_vector parent_class_names (void) const
     { return rep->parent_class_names (); }
 
   octave_base_value *
   find_parent_class (const std::string& parent_class_name)
     { return rep->find_parent_class (parent_class_name); }
 
   octave_function *function_value (bool silent = false);
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -127,21 +127,22 @@ symbol_table::symbol_record::find (tree_
 // since the last time the function was loaded/parsed).
 //
 // FIXME -- perhaps this should be done for all loaded functions when
 // the prompt is printed or the directory has changed, and then we
 // would not check for it when finding symbol definitions.
 
 static inline bool
 load_out_of_date_fcn (const std::string& ff, const std::string& dir_name,
-		      octave_value& function)
+		      octave_value& function,
+		      const std::string& dispatch_type = std::string ())
 {
   bool retval = false;
 
-  octave_function *fcn = load_fcn_from_file (ff, dir_name);
+  octave_function *fcn = load_fcn_from_file (ff, dir_name, dispatch_type);
 
   if (fcn)
     {
       retval = true;
 
       function = octave_value (fcn);
     }
   else
@@ -224,17 +225,18 @@ out_of_date_check_internal (octave_funct
 			{
 			  file_stat fs (ff);
 
 			  if (fs)
 			    {
 			      if (fs.is_newer (tp))
 				{
 				  retval = load_out_of_date_fcn (ff, dir_name,
-								 function);
+								 function,
+								 dispatch_type);
 
 				  clear_breakpoints = true;
 				}
 			    }
 			  else
 			    {
 			      function = octave_value ();
 
@@ -242,17 +244,18 @@ out_of_date_check_internal (octave_funct
 			    }
 			}
 		    }
 		  else
 		    {
 		      // Not the same file, so load the new file in
 		      // place of the old.
 
-		      retval = load_out_of_date_fcn (file, dir_name, function);
+		      retval = load_out_of_date_fcn (file, dir_name, function,
+						     dispatch_type);
 
 		      clear_breakpoints = true;
 		    }
 
 		  // If the function has been replaced then clear any 
 		  // breakpoints associated with it
 		  if (clear_breakpoints)
 		    bp_table::remove_all_breakpoints_in_file (nm, true);
