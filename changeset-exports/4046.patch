# HG changeset patch
# User jwe
# Date 1029435461 0
#      Thu Aug 15 18:17:41 2002 +0000
# Node ID 7787c144d5d9ccc2d79c3adcec49c63a79532495
# Parent  b908aaa4080a2d9f93243799c797f196360ebfb5
[project @ 2002-08-15 18:17:41 by jwe]

diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -276,71 +276,67 @@ get_user_input (void)
   return retval;
 }
 
 int
 octave_read (char *buf, unsigned max_size)
 {
   // XXX FIXME XXX -- is this a safe way to buffer the input?
 
+  static const char * const eol = "\n";
   static std::string input_buf;
   static const char *pos = 0;
   static size_t chars_left = 0;
 
   int status = 0;
-
-  if (input_buf.empty ())
+  if (chars_left == 0)
     {
       pos = 0;
 
       input_buf = get_user_input ();
 
       chars_left = input_buf.length ();
 
       pos = input_buf.c_str ();
     }
 
   if (chars_left > 0)
     {
-      buf[0] = '\0';
-
-      size_t len = max_size > 2 ? max_size - 2 : 0;
-
+      size_t len = max_size > chars_left ? chars_left : max_size;
       assert (len > 0);
 
-      strncpy (buf, pos, len);
+      memcpy (buf, pos, len);
 
-      if (chars_left > len)
-	{
-	  chars_left -= len;
+      chars_left -= len;
+      pos += len;
 
-	  pos += len;
-
-	  buf[len] = '\0';
-
-	  status = len;
+      // Make sure input ends with a new line character.
+      if (chars_left == 0 && buf[len-1] != '\n')
+	{
+	  if (len < max_size) 
+	    {
+	      // There is enough room to plug the newline character in
+	      // the buffer.
+	      buf[len++] = '\n';
+	    }
+	  else
+	    {
+	      // There isn't enough room to plug the newline character
+	      // in the buffer so make sure it is returned on the next
+	      // octave_read call.
+	      pos = eol;
+	      chars_left = 1;
+	    }
 	}
-      else
-	{
-	  input_buf = "";
-
-	  len = chars_left;
 
-	  if (buf[len-1] != '\n')
-	    buf[len++] = '\n';
+      status = len;
 
-	  buf[len] = '\0';
-
-	  status = len;
-	}
     }
   else if (chars_left == 0)
     {
-      input_buf = "";
-
       status = 0;
     }
   else    
     status = -1;
 
   return status;
 }
 
diff --git a/test/octave.test/io/io.exp b/test/octave.test/io/io.exp
--- a/test/octave.test/io/io.exp
+++ b/test/octave.test/io/io.exp
@@ -37,16 +37,20 @@ do_test sscanf-2.m
 set test sscanf-3
 set prog_output "error:.*"
 do_test sscanf-3.m
 
 set test sscanf-4
 set prog_output "\n... sscanf:.*"
 do_test sscanf-4.m
 
+set test sscanf-5
+set prog_output "ans = 1"
+do_test sscanf-5.m
+
 set test printf-1
 set prog_output "test: 1\nans = 8"
 do_test printf-1.m
 
 set test printf-2
 set prog_output "error:.*"
 do_test printf-2.m
 
diff --git a/test/octave.test/linalg/qr-7.m b/test/octave.test/linalg/qr-7.m
--- a/test/octave.test/linalg/qr-7.m
+++ b/test/octave.test/linalg/qr-7.m
@@ -1,15 +1,15 @@
 function retval = testqr (q, r, a, p)
   tol = 512*eps;
   retval = 0;
   if (nargin == 3)
-    n1 = norm (q*r-a)
-    n2 = norm (q'*q-eye(columns(q)))
-    retval = (n1 < tol && n2 < tol)
+    n1 = norm (q*r-a);
+    n2 = norm (q'*q-eye(columns(q)));
+    retval = (n1 < tol && n2 < tol);
   else
     n1 = norm (q'*q-eye(columns(q)))
     retval = (n1 < tol);
     if (isvector (p))
       n2 = norm (q*r-a(:,p))
       retval = (retval && n2 < tol);
     else
       n2 = norm (q*r - a*p)
