# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1492271673 14400
#      Sat Apr 15 11:54:33 2017 -0400
# Node ID e0c20a22da7ecfe24fa7be1fc009d408e9f5b585
# Parent  b5ee9b985a820571d72e41c2e4152780ef7fdf80
eliminate some errors exposed by -fsanitize=undefined

* graphics.in.h (axes::properties): Initialize non-property members.

* Array.h (Array<T>::ArrayRep::ArrayRep): Always use new to initialize
data member.

* Sparse.h (Sparse<T>::SparseRep::SparseRep): Initialize d and r
data members.

* idx-vector.cc, idx-vector.h: Explicitly mention idx_base_rep in
constructor initialization lists.
(idx_vector::idx_vector_rep::as_array): Avoid passing null pointer to
memcpy.
(idx_vector::idx_colon_rep::idx_colon_rep): Use default for trivial
constructor.
(idx_vector::idx_range_rep::idx_range_rep): Delete trivial construtor.
(idx_vector::idx_scalar_rep::idx_scalar_rep): Likewise.
(idx_vector::idx_mask_rep::idx_mask_rep): Likewise.

* Container.cc (Container::childEvent): Only set mouse tracking for
child widgets as they are added.

diff --git a/libgui/graphics/Container.cc b/libgui/graphics/Container.cc
--- a/libgui/graphics/Container.cc
+++ b/libgui/graphics/Container.cc
@@ -101,14 +101,26 @@ namespace QtHandles
               }
           }
       }
   }
 
   void
   Container::childEvent (QChildEvent* xevent)
   {
-    if (xevent->child ()->isWidgetType ())
-      qobject_cast<QWidget*> (xevent->child ())->setMouseTracking (
-        hasMouseTracking ());
+    // Enable mouse tracking in child widgets as they are added if the
+    // container also has mouse tracking enabled.  There is no need to
+    // do this when child objects are removed.
+
+    if (xevent->added ())
+      {
+        QObject *obj = xevent->child ();
+
+        if (obj && obj->isWidgetType ())
+          {
+            QWidget *widget = qobject_cast<QWidget*> (obj);
+
+            if (widget)
+              widget->setMouseTracking (hasMouseTracking ());
+          }
+      }
   }
-
 }
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -3876,31 +3876,70 @@ public:
     void push_zoom_stack (void);
     void clear_zoom_stack (bool do_unzoom = true);
 
     void update_units (const caseless_str& old_units);
 
     void update_fontunits (const caseless_str& old_fontunits);
 
   private:
-    scaler sx, sy, sz;
-    Matrix x_render, x_render_inv;
-    Matrix x_gl_mat1, x_gl_mat2;
-    Matrix x_zlim;
-    std::list<octave_value> zoom_stack;
+
+    scaler sx = scaler ();
+    scaler sy = scaler ();
+    scaler sz = scaler ();
+
+    Matrix x_render = Matrix ();
+    Matrix x_render_inv = Matrix ();
+    Matrix x_gl_mat1 = Matrix ();
+    Matrix x_gl_mat2 = Matrix ();
+    Matrix x_zlim = Matrix ();
+
+    std::list<octave_value> zoom_stack = std::list<octave_value> ();
 
     // Axes layout data
-    int xstate, ystate, zstate;
-    double xPlane, xPlaneN, yPlane, yPlaneN, zPlane, zPlaneN;
-    double xpTick, xpTickN, ypTick, ypTickN, zpTick, zpTickN;
-    double fx, fy, fz;
-    double xticklen, yticklen, zticklen;
-    double xtickoffset, ytickoffset, ztickoffset;
-    bool x2Dtop, y2Dright, layer2Dtop, is2D;
-    bool xySym, xyzSym, zSign, nearhoriz;
+    int xstate = 0;
+    int ystate = 0;
+    int zstate = 0;
+
+    double xPlane = 0.0;
+    double yPlane = 0.0;
+    double zPlane = 0.0;
+
+    double xPlaneN = 0.0;
+    double yPlaneN = 0.0;
+    double zPlaneN = 0.0;
+
+    double xpTick = 0.0;
+    double ypTick = 0.0;
+    double zpTick = 0.0;
+
+    double xpTickN = 0.0;
+    double ypTickN = 0.0;
+    double zpTickN = 0.0;
+
+    double fx = 0.0;
+    double fy = 0.0;
+    double fz = 0.0;
+
+    double xticklen = 0.0;
+    double yticklen = 0.0;
+    double zticklen = 0.0;
+
+    double xtickoffset = 0.0;
+    double ytickoffset = 0.0;
+    double ztickoffset = 0.0;
+
+    bool x2Dtop = false;
+    bool y2Dright = false;
+    bool layer2Dtop = false;
+    bool is2D = false;
+    bool xySym = false;
+    bool xyzSym = false;
+    bool zSign = false;
+    bool nearhoriz = false;
 
     // Text renderer, used for calculation of text (tick labels) size
     octave::text_renderer txt_renderer;
 
     void set_text_child (handle_property& h, const std::string& who,
                          const octave_value& v);
 
     void delete_text_child (handle_property& h);
diff --git a/liboctave/array/Array.h b/liboctave/array/Array.h
--- a/liboctave/array/Array.h
+++ b/liboctave/array/Array.h
@@ -145,17 +145,20 @@ protected:
 
     template <typename U>
     ArrayRep (U *d, octave_idx_type l)
       : data (new T [l]), len (l), count (1)
     {
       std::copy (d, d+l, data);
     }
 
-    ArrayRep (void) : data (0), len (0), count (1) { }
+    // Use new instead of setting data to 0 so that fortran_vec and
+    // data always return valid addresses, even for zero-size arrays.
+
+    ArrayRep (void) : data (new T [0]), len (0), count (1) { }
 
     explicit ArrayRep (octave_idx_type n)
       : data (new T [n]), len (n), count (1) { }
 
     explicit ArrayRep (octave_idx_type n, const T& val)
       : data (new T [n]), len (n), count (1)
     {
       std::fill_n (data, n, val);
diff --git a/liboctave/array/Sparse.h b/liboctave/array/Sparse.h
--- a/liboctave/array/Sparse.h
+++ b/liboctave/array/Sparse.h
@@ -88,16 +88,22 @@ protected:
     }
 
     SparseRep (octave_idx_type nr, octave_idx_type nc, octave_idx_type nz = 0)
       : d (nz > 0 ? new T [nz] : 0),
         r (nz > 0 ? new octave_idx_type [nz] : 0),
         c (new octave_idx_type [nc+1]), nzmx (nz), nrows (nr),
         ncols (nc), count (1)
     {
+      for (octave_idx_type i = 0; i < nz; i++)
+        d[i] = T ();
+
+      for (octave_idx_type i = 0; i < nz; i++)
+        r[i] = 0;
+
       for (octave_idx_type i = 0; i < nc + 1; i++)
         c[i] = 0;
     }
 
     SparseRep (const SparseRep& a)
       : d (new T [a.nzmx]), r (new octave_idx_type [a.nzmx]),
         c (new octave_idx_type [a.ncols + 1]),
         nzmx (a.nzmx), nrows (a.nrows), ncols (a.ncols), count (1)
diff --git a/liboctave/array/idx-vector.cc b/liboctave/array/idx-vector.cc
--- a/liboctave/array/idx-vector.cc
+++ b/liboctave/array/idx-vector.cc
@@ -75,16 +75,17 @@ idx_vector::idx_base_rep::as_array (void
   (*current_liboctave_error_handler)
     ("internal error: as_array not allowed for this index class");
 
   // Never actually executed, but required to silence compiler warning
   return Array<octave_idx_type> ();
 }
 
 idx_vector::idx_colon_rep::idx_colon_rep (char c)
+  : idx_base_rep ()
 {
   if (c != ':')
     {
       (*current_liboctave_error_handler)
         ("internal error: invalid character converted to idx_vector; must be ':'");
       // FIXME: this is unreachable now.
       err = true;
     }
@@ -110,32 +111,32 @@ std::ostream&
 idx_vector::idx_colon_rep::print (std::ostream& os) const
 {
   return os << ":";
 }
 
 idx_vector::idx_range_rep::idx_range_rep (octave_idx_type _start,
                                           octave_idx_type _limit,
                                           octave_idx_type _step)
-  : start(_start),
+  : idx_base_rep (), start(_start),
     len (_step ? std::max ((_limit - _start) / _step,
                            static_cast<octave_idx_type> (0))
                : -1),
     step (_step)
 {
   if (len < 0)
     err_invalid_range ();
   if (start < 0)
     octave::err_invalid_index (start);
   if (step < 0 && start + (len-1)*step < 0)
     octave::err_invalid_index (start + (len-1)*step);
 }
 
 idx_vector::idx_range_rep::idx_range_rep (const Range& r)
-  : start (0), len (r.numel ()), step (1)
+  : idx_base_rep (), start (0), len (r.numel ()), step (1)
 {
   if (len < 0)
     err_invalid_range ();
 
   if (len > 0)
     {
       if (r.all_elements_are_ints ())
         {
@@ -258,25 +259,25 @@ convert_index (octave_int<T> x, bool& co
 {
   octave_idx_type i = octave_int<octave_idx_type> (x).value ();
 
   return convert_index (i, conv_error, ext);
 }
 
 template <typename T>
 idx_vector::idx_scalar_rep::idx_scalar_rep (T x)
-  : data (0)
+  : idx_base_rep (), data (0)
 {
   octave_idx_type dummy = 0;
 
   data = convert_index (x, err, dummy);
 }
 
 idx_vector::idx_scalar_rep::idx_scalar_rep (octave_idx_type i)
-  : data (i)
+  : idx_base_rep (), data (i)
 {
   if (data < 0)
     octave::err_invalid_index (data);
 }
 
 octave_idx_type
 idx_vector::idx_scalar_rep::checkelem (octave_idx_type i) const
 {
@@ -309,33 +310,34 @@ idx_vector::idx_scalar_rep::unconvert (v
 Array<octave_idx_type>
 idx_vector::idx_scalar_rep::as_array (void)
 {
   return Array<octave_idx_type> (dim_vector (1, 1), data);
 }
 
 template <typename T>
 idx_vector::idx_vector_rep::idx_vector_rep (const Array<T>& nda)
-  : data (0), len (nda.numel ()), ext (0), aowner (0), orig_dims (nda.dims ())
+  : idx_base_rep (), data (0), len (nda.numel ()), ext (0),
+    aowner (0), orig_dims (nda.dims ())
 {
   if (len != 0)
     {
       std::unique_ptr<octave_idx_type []> d (new octave_idx_type [len]);
 
       for (octave_idx_type i = 0; i < len; i++)
         d[i] = convert_index (nda.xelem (i), err, ext);
 
       data = d.release ();
     }
 }
 
 // Note that this makes a shallow copy of the index array.
 
 idx_vector::idx_vector_rep::idx_vector_rep (const Array<octave_idx_type>& inda)
-  : data (inda.data ()), len (inda.numel ()), ext (0),
+  : idx_base_rep (), data (inda.data ()), len (inda.numel ()), ext (0),
     aowner (new Array<octave_idx_type> (inda)), orig_dims (inda.dims ())
 {
   if (len != 0)
     {
       octave_idx_type max = -1;
       for (octave_idx_type i = 0; i < len; i++)
         {
           octave_idx_type k = inda.xelem (i);
@@ -349,46 +351,47 @@ idx_vector::idx_vector_rep::idx_vector_r
         }
 
       ext = max + 1;
     }
 }
 
 idx_vector::idx_vector_rep::idx_vector_rep (const Array<octave_idx_type>& inda,
                                             octave_idx_type _ext, direct)
-  : data (inda.data ()), len (inda.numel ()), ext (_ext),
+  : idx_base_rep (), data (inda.data ()), len (inda.numel ()), ext (_ext),
     aowner (new Array<octave_idx_type> (inda)), orig_dims (inda.dims ())
 {
   // No checking.
   if (ext < 0)
     {
       octave_idx_type max = -1;
       for (octave_idx_type i = 0; i < len; i++)
         if (data[i] > max)
           max = data[i];
 
       ext = max + 1;
     }
 }
 
 idx_vector::idx_vector_rep::idx_vector_rep (bool b)
-  : data (0), len (b ? 1 : 0), ext (0), aowner (0), orig_dims (len, len)
+  : idx_base_rep (), data (0), len (b ? 1 : 0), ext (0), aowner (0),
+    orig_dims (len, len)
 {
   if (len != 0)
     {
       octave_idx_type *d = new octave_idx_type [1];
       d[0] = 0;
       data = d;
       ext = 1;
     }
 }
 
 idx_vector::idx_vector_rep::idx_vector_rep (const Array<bool>& bnda,
                                             octave_idx_type nnz)
-  : data (0), len (nnz), ext (0), aowner (0), orig_dims ()
+  : idx_base_rep (), data (0), len (nnz), ext (0), aowner (0), orig_dims ()
 {
   if (nnz < 0)
     len = bnda.nnz ();
 
   const dim_vector dv = bnda.dims ();
 
   orig_dims = dv.make_nd_vector (len);
 
@@ -405,17 +408,18 @@ idx_vector::idx_vector_rep::idx_vector_r
 
       data = d;
 
       ext = d[k-1] + 1;
     }
 }
 
 idx_vector::idx_vector_rep::idx_vector_rep (const Sparse<bool>& bnda)
-  : data (0), len (bnda.nnz ()), ext (0), aowner (0), orig_dims ()
+  : idx_base_rep (), data (0), len (bnda.nnz ()), ext (0), aowner (0),
+    orig_dims ()
 {
   const dim_vector dv = bnda.dims ();
 
   orig_dims = dv.make_nd_vector (len);
 
   if (len != 0)
     {
       octave_idx_type *d = new octave_idx_type [len];
@@ -615,42 +619,48 @@ idx_vector::idx_vector_rep::unconvert (v
 Array<octave_idx_type>
 idx_vector::idx_vector_rep::as_array (void)
 {
   if (aowner)
     return *aowner;
   else
     {
       Array<octave_idx_type> retval (orig_dims);
-      std::memcpy (retval.fortran_vec (), data, len*sizeof (octave_idx_type));
-      // Delete the old copy and share the data instead to save memory.
-      delete [] data;
+
+      if (data)
+        {
+          std::memcpy (retval.fortran_vec (), data, len*sizeof (octave_idx_type));
+          // Delete the old copy and share the data instead to save memory.
+          delete [] data;
+        }
+
       data = retval.fortran_vec ();
       aowner = new Array<octave_idx_type> (retval);
+
       return retval;
     }
 }
 
 idx_vector::idx_mask_rep::idx_mask_rep (bool b)
-  : data (0), len (b ? 1 : 0), ext (0), lsti (-1), lste (-1),
-    aowner (0), orig_dims (len, len)
+  : idx_base_rep (), data (0), len (b ? 1 : 0), ext (0),
+    lsti (-1), lste (-1), aowner (0), orig_dims (len, len)
 {
   if (len != 0)
     {
       bool *d = new bool [1];
       d[0] = true;
       data = d;
       ext = 1;
     }
 }
 
 idx_vector::idx_mask_rep::idx_mask_rep (const Array<bool>& bnda,
                                         octave_idx_type nnz)
-  : data (0), len (nnz), ext (bnda.numel ()), lsti (-1), lste (-1),
-    aowner (0), orig_dims ()
+  : idx_base_rep (), data (0), len (nnz), ext (bnda.numel ()),
+    lsti (-1), lste (-1), aowner (0), orig_dims ()
 {
   if (nnz < 0)
     len = bnda.nnz ();
 
   // We truncate the extent as much as possible.  For Matlab
   // compatibility, but maybe it's not a bad idea anyway.
   while (ext > 0 && ! bnda(ext-1))
     ext--;
diff --git a/liboctave/array/idx-vector.h b/liboctave/array/idx-vector.h
--- a/liboctave/array/idx-vector.h
+++ b/liboctave/array/idx-vector.h
@@ -67,16 +67,17 @@ public:
 
   template <typename T, typename D> friend class std::unique_ptr;
 
 private:
 
   class OCTAVE_API idx_base_rep
   {
   public:
+
     idx_base_rep (void) : count (1), err (false) { }
 
     // No copying!
 
     idx_base_rep (const idx_base_rep&) = delete;
 
     idx_base_rep& operator = (const idx_base_rep&) = delete;
 
@@ -117,17 +118,18 @@ private:
 
     bool err;
   };
 
   // The magic colon index.
   class OCTAVE_API idx_colon_rep : public idx_base_rep
   {
   public:
-    idx_colon_rep (void) { }
+
+    idx_colon_rep (void) = default;
 
     idx_colon_rep (char c);
 
     // No copying!
 
     idx_colon_rep (const idx_colon_rep& idx) = delete;
 
     idx_colon_rep& operator = (const idx_colon_rep& idx) = delete;
@@ -154,35 +156,35 @@ private:
 
   // To distinguish the "direct" constructors that blindly trust the data.
   enum direct { DIRECT };
 
   // The integer range index.
   class OCTAVE_API idx_range_rep : public idx_base_rep
   {
   public:
-    idx_range_rep (void)
-      : start(0), len(0), step(1) { }
+
+    idx_range_rep (void) = delete;
 
     idx_range_rep (octave_idx_type _start, octave_idx_type _len,
                    octave_idx_type _step, direct)
       : idx_base_rep (), start(_start), len(_len), step(_step) { }
 
+    // Zero-based constructor.
+    idx_range_rep (octave_idx_type _start, octave_idx_type _limit,
+                   octave_idx_type _step);
+
+    idx_range_rep (const Range&);
+
     // No copying!
 
     idx_range_rep (const idx_range_rep& idx) = delete;
 
     idx_range_rep& operator = (const idx_range_rep& idx) = delete;
 
-    // Zero-based constructor.
-    idx_range_rep (octave_idx_type _start, octave_idx_type _limit,
-                   octave_idx_type _step);
-
-    idx_range_rep (const Range&);
-
     octave_idx_type xelem (octave_idx_type i) const
     { return start + i * step; }
 
     octave_idx_type checkelem (octave_idx_type i) const;
 
     octave_idx_type length (octave_idx_type) const { return len; }
 
     octave_idx_type extent (octave_idx_type n) const
@@ -217,21 +219,21 @@ private:
 
     octave_idx_type start, len, step;
   };
 
   // The integer scalar index.
   class OCTAVE_API idx_scalar_rep : public idx_base_rep
   {
   public:
-    idx_scalar_rep (void)
-      : data (0) { }
+
+    idx_scalar_rep (void) = delete;
 
     idx_scalar_rep (octave_idx_type i, direct)
-      : data (i) { }
+      : idx_base_rep (), data (i) { }
 
     // No copying!
 
     idx_scalar_rep (const idx_scalar_rep& idx) = delete;
 
     idx_scalar_rep& operator = (const idx_scalar_rep& idx) = delete;
 
     // Zero-based constructor.
@@ -273,24 +275,27 @@ private:
 
     octave_idx_type data;
   };
 
   // The integer vector index.
   class OCTAVE_API idx_vector_rep : public idx_base_rep
   {
   public:
+
     idx_vector_rep (void)
       : data (0), len (0), ext (0), aowner (0), orig_dims ()
     { }
 
     // Direct constructor.
     idx_vector_rep (octave_idx_type *_data, octave_idx_type _len,
                     octave_idx_type _ext, const dim_vector& od, direct)
-      : data (_data), len (_len), ext (_ext), aowner (0), orig_dims (od) { }
+      : idx_base_rep (), data (_data), len (_len), ext (_ext),
+        aowner (0), orig_dims (od)
+    { }
 
     // Zero-based constructor.
     idx_vector_rep (const Array<octave_idx_type>& inda);
 
     idx_vector_rep (const Array<octave_idx_type>& inda,
                     octave_idx_type _ext, direct);
 
     template <typename T>
@@ -352,26 +357,25 @@ private:
 
     dim_vector orig_dims;
   };
 
   // The logical mask index.
   class OCTAVE_API idx_mask_rep : public idx_base_rep
   {
   public:
-    idx_mask_rep (void)
-      : data (0), len (0), ext (0), lsti (-1), lste (-1), aowner (0),
-        orig_dims ()
-    { }
+
+    idx_mask_rep (void) = delete;
 
     // Direct constructor.
     idx_mask_rep (bool *_data, octave_idx_type _len,
                   octave_idx_type _ext, const dim_vector& od, direct)
-      : data (_data), len (_len), ext (_ext), lsti (-1), lste (-1),
-        aowner (0), orig_dims (od) { }
+      : idx_base_rep (), data (_data), len (_len), ext (_ext),
+        lsti (-1), lste (-1), aowner (0), orig_dims (od)
+    { }
 
     idx_mask_rep (bool);
 
     idx_mask_rep (const Array<bool>&, octave_idx_type = -1);
 
     // No copying!
 
     idx_mask_rep (const idx_mask_rep& idx) = delete;
