# HG changeset patch
# User Ben Abbott  <bpabbott@mac.com>
# Date 1376254023 14400
#      Sun Aug 11 16:47:03 2013 -0400
# Node ID 283422a219a2ef2b2a214b01fd180ce77aeaa80c
# Parent  7c06875c2dccbd4090af43fae2e5683443484abb
Update axes position/outerpostion prior to calcuating tightinset.

* libinterp/corefcn/graphics.cc (sync_positions ()): Update the position or
outerposition prior to calculating the tightinset.  Change expected failure to
expected pass. (Bug # 39650)

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -4050,54 +4050,52 @@ axes::properties::calc_tightbox (const M
     pos(3) = ext(1)+ext(3)-pos(1);
   return pos;
 }
 
 void
 axes::properties::sync_positions (void)
 {
   // First part is equivalent to `update_tightinset ()'
+  if (activepositionproperty.is ("position"))
+    update_position ();
+  else
+    update_outerposition ();
   caseless_str old_units = get_units ();
   set_units ("normalized");
   Matrix pos = position.get ().matrix_value ();
   Matrix outpos = outerposition.get ().matrix_value ();
   Matrix tightpos = calc_tightbox (pos);
   Matrix tinset (1, 4, 1.0);
   tinset(0) = pos(0)-tightpos(0);
   tinset(1) = pos(1)-tightpos(1);
   tinset(2) = tightpos(0)+tightpos(2)-pos(0)-pos(2);
   tinset(3) = tightpos(1)+tightpos(3)-pos(1)-pos(3);
   tightinset = tinset;
   set_units (old_units);
   update_transform ();
-  // Changes to tightinset may result in changes to the inactive
-  // position property
-  if (activepositionproperty.is ("position"))
-    update_position ();
-  else
-    update_outerposition ();
 }
 
 /*
-%!xtest
+%!test
 %! hf = figure ("visible", "off");
 %! graphics_toolkit (hf, "fltk");
 %! unwind_protect
 %!   subplot(2,1,1); plot(rand(10,1)); subplot(2,1,2); plot(rand(10,1));
 %!   hax = findall (gcf (), "type", "axes");
 %!   positions = cell2mat (get (hax, "position"));
 %!   outerpositions = cell2mat (get (hax, "outerposition"));
 %!   looseinsets = cell2mat (get (hax, "looseinset"));
 %!   tightinsets = cell2mat (get (hax, "tightinset"));
 %!   subplot(2,1,1); plot(rand(10,1)); subplot(2,1,2); plot(rand(10,1));
 %!   hax = findall (gcf (), "type", "axes");
-%!   assert (cell2mat (get (hax, "position")), positions);
-%!   assert (cell2mat (get (hax, "outerposition")), outerpositions);
-%!   assert (cell2mat (get (hax, "looseinset")), looseinsets);
-%!   assert (cell2mat (get (hax, "tightinset")), tightinsets);
+%!   assert (cell2mat (get (hax, "position")), positions, 1e-4);
+%!   assert (cell2mat (get (hax, "outerposition")), outerpositions, 1e-4);
+%!   assert (cell2mat (get (hax, "looseinset")), looseinsets, 1e-4);
+%!   assert (cell2mat (get (hax, "tightinset")), tightinsets, 1e-4);
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 */
 
 void
 axes::properties::set_text_child (handle_property& hp,
                                   const std::string& who,
