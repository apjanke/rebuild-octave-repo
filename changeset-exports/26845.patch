# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1551762078 0
#      Tue Mar 05 05:01:18 2019 +0000
# Node ID 6322d51c655cca2e68e1d81feae1cbf39f837f56
# Parent  d8712d26d086b12eb7c0432b31c326ced9969344
allow function search in arbitrary scope

* fcn-info.h, fcn-info.cc (fcn_info::builtin_find, fcn_info::find,
fcn_info::find_function, fcn_info::fcn_info_rep::builtin_find,
fcn_info::fcn_info_rep::find, fcn_info::fcn_info_rep::find_function,
fcn_info::fcn_info_rep::xfind,
fcn_info::fcn_info_rep::x_builtin_find):
Pass scope as argument.
(fcn_info::find, fcn_info::builtin_find): If given scope is valid, use
it, otherwise default to current scope).
(fcn_info::fcn_info_rep::xfind): Also search for subfunctions.

* symtab.h, symtab.cc (symbol_table::builtin_find,
symbol_table::fcn_table_find, symbol_table::find_function):
Pass scope as argument.

(symbol_table::find_function): Don't search for subfunctions.

* symscope.h (symbol_scope::function,
symbol_scope:symbol_scope_rep::function): Now const.

diff --git a/libinterp/corefcn/fcn-info.cc b/libinterp/corefcn/fcn-info.cc
--- a/libinterp/corefcn/fcn-info.cc
+++ b/libinterp/corefcn/fcn-info.cc
@@ -328,77 +328,82 @@ namespace octave
   get_dispatch_type (const octave_value_list& args)
   {
     builtin_type_t builtin_type;
     return get_dispatch_type (args, builtin_type);
   }
 
   // Find function definition according to the following precedence list:
   //
+  //   nested functions (and subfunctions)
+  //   local functions in the current file
   //   private function
   //   class method
   //   class constructor
   //   command-line function
   //   autoload function
-  //   function on the path
+  //   functions on the load_path (current directory is always first)
+  //   package (FIXME: does this belong here?)
   //   built-in function
-  //
-  // Matlab documentation states that constructors have higher precedence
-  // than methods, but that does not seem to be the case.
 
   octave_value
-  fcn_info::fcn_info_rep::find (const octave_value_list& args)
+  fcn_info::fcn_info_rep::find (const octave_value_list& args,
+                                const symbol_scope& scope)
   {
-    octave_value retval = xfind (args);
+    symbol_scope search_scope
+      = (scope
+         ? scope : __get_current_scope__("fcn_info::fcn_info_rep::find"));
+
+    octave_value retval = xfind (args, search_scope);
 
     if (retval.is_undefined ())
       {
         // It is possible that the user created a file on the fly since
         // the last prompt or chdir, so try updating the load path and
         // searching again.
 
         load_path& lp = __get_load_path__ ("fcn_info::fcn_info_rep::find");
 
         lp.update ();
 
-        retval = xfind (args);
+        retval = xfind (args, search_scope);
       }
 
     return retval;
   }
 
   octave_value
-  fcn_info::fcn_info_rep::xfind (const octave_value_list& args)
+  fcn_info::fcn_info_rep::xfind (const octave_value_list& args,
+                                 const symbol_scope& search_scope)
   {
-    symbol_scope curr_scope
-      = __get_current_scope__ ("fcn_info::fcn_info_rep::xfind");
+    octave_user_function *current_fcn
+      = search_scope ? search_scope.function () : nullptr;
+
+    // Subfunction.  I think it only makes sense to check for
+    // subfunctions if we are currently executing a function defined
+    // from a .m file.
 
-    octave_user_function *current_fcn
-      = curr_scope ? curr_scope.function () : nullptr;
+    if (search_scope)
+      {
+        octave_value fcn = search_scope.find_subfunction (name);
+
+        if (fcn.is_defined ())
+          return fcn;
+      }
 
     // Local function.
 
     if (current_fcn)
       {
         std::string fcn_file = current_fcn->fcn_file_name ();
 
         // For anonymous functions we look at the parent scope so that if
         // they were defined within class methods and use local functions
         // (helper functions) we can still use those anonymous functions
 
-#if 0
-        if (current_fcn->is_anonymous_function ())
-          {
-            if (fcn_file.empty ()
-                && curr_scope.parent_scope ()
-                && curr_scope.parent_scope ()->function () != nullptr)
-              fcn_file
-                = curr_scope.parent_scope ()->function ()->fcn_file_name();
-          }
-#endif
         if (! fcn_file.empty ())
           {
             auto r = local_functions.find (fcn_file);
 
             if (r != local_functions.end ())
               {
                 // We shouldn't need an out-of-date check here since
                 // local functions may ultimately be called only from
@@ -533,38 +538,42 @@ namespace octave
   // searches for "built-in" functions.  In Matlab, "builtin" only
   // returns functions that are actually built-in to the interpreter.
   // But since the list of built-in functions is different in Octave and
   // Matlab, we also search up the precedence list until we find
   // something that matches.  Note that we are only searching by name,
   // so class methods and constructors are skipped.
 
   octave_value
-  fcn_info::fcn_info_rep::builtin_find (void)
+  fcn_info::fcn_info_rep::builtin_find (const symbol_scope& scope)
   {
-    octave_value retval = x_builtin_find ();
+    symbol_scope search_scope
+      = (scope
+         ? scope : __get_current_scope__("fcn_info::fcn_info_rep::find"));
+
+    octave_value retval = x_builtin_find (search_scope);
 
     if (! retval.is_defined ())
       {
         // It is possible that the user created a file on the fly since
         // the last prompt or chdir, so try updating the load path and
         // searching again.
 
         load_path& lp = __get_load_path__ ("fcn_info::fcn_info_rep::builtin_find");
 
         lp.update ();
 
-        retval = x_builtin_find ();
+        retval = x_builtin_find (search_scope);
       }
 
     return retval;
   }
 
   octave_value
-  fcn_info::fcn_info_rep::x_builtin_find (void)
+  fcn_info::fcn_info_rep::x_builtin_find (const symbol_scope& search_scope)
   {
     // Built-in function.
     if (built_in_function.is_defined ())
       return built_in_function;
 
     // Function on the path.
 
     octave_value fcn = find_user_function ();
@@ -581,21 +590,18 @@ namespace octave
 
     // Command-line function.
 
     if (cmdline_function.is_defined ())
       return cmdline_function;
 
     // Private function.
 
-    symbol_scope curr_scope
-      = __get_current_scope__ ("fcn_info::fcn_info_rep::x_builtin_find");
-
-    octave_user_function *current_fcn = curr_scope ? curr_scope.function ()
-                                                   : nullptr;
+    octave_user_function *current_fcn
+      = search_scope ? search_scope.function () : nullptr;
 
     if (current_fcn)
       {
         std::string dir_name = current_fcn->dir_name ();
 
         if (! dir_name.empty ())
           {
             auto q = private_functions.find (dir_name);
@@ -647,19 +653,19 @@ namespace octave
               }
           }
       }
 
     // Subfunction.  I think it only makes sense to check for
     // subfunctions if we are currently executing a function defined
     // from a .m file.
 
-    if (curr_scope)
+    if (search_scope)
       {
-        octave_value val = curr_scope.find_subfunction (name);
+        octave_value val = search_scope.find_subfunction (name);
 
         if (val.is_defined ())
           return val;
       }
 
     return octave_value ();
   }
 
diff --git a/libinterp/corefcn/fcn-info.h b/libinterp/corefcn/fcn-info.h
--- a/libinterp/corefcn/fcn-info.h
+++ b/libinterp/corefcn/fcn-info.h
@@ -28,16 +28,17 @@ along with Octave; see the file COPYING.
 
 #include <list>
 #include <map>
 #include <memory>
 #include <string>
 
 #include "ov.h"
 #include "ovl.h"
+#include "symscope.h"
 
 namespace octave
 {
   class fcn_info
   {
   public:
 
     typedef std::map<std::string, octave_value>::const_iterator
@@ -74,19 +75,20 @@ namespace octave
       ~fcn_info_rep (void) = default;
 
       octave_value load_private_function (const std::string& dir_name);
 
       octave_value load_class_constructor (void);
 
       octave_value load_class_method (const std::string& dispatch_type);
 
-      octave_value find (const octave_value_list& args);
+      octave_value find (const octave_value_list& args,
+                         const symbol_scope& search_scope);
 
-      octave_value builtin_find (void);
+      octave_value builtin_find (const symbol_scope& search_scope);
 
       octave_value find_method (const std::string& dispatch_type);
 
       octave_value find_autoload (void);
 
       octave_value find_package (void);
 
       octave_value find_user_function (void);
@@ -96,19 +98,20 @@ namespace octave
         return function_on_path.is_defined ();
       }
 
       bool is_package_defined (void) const
       {
         return package.is_defined ();
       }
 
-      octave_value find_function (const octave_value_list& args)
+      octave_value find_function (const octave_value_list& args,
+                                  const symbol_scope& search_scope)
       {
-        return find (args);
+        return find (args, search_scope);
       }
 
       void install_cmdline_function (const octave_value& f)
       {
         cmdline_function = f;
       }
 
       void install_local_function (const octave_value& f,
@@ -224,40 +227,43 @@ namespace octave
       octave_value function_on_path;
 
       octave_value package;
 
       octave_value built_in_function;
 
     private:
 
-      octave_value xfind (const octave_value_list& args);
+      octave_value xfind (const octave_value_list& args,
+                          const symbol_scope& search_scope);
 
-      octave_value x_builtin_find (void);
+      octave_value x_builtin_find (const symbol_scope& search_scope);
     };
 
   public:
 
     fcn_info (const std::string& nm = "")
       : m_rep (new fcn_info_rep (nm)) { }
 
     fcn_info (const fcn_info&) = default;
 
     fcn_info& operator = (const fcn_info&) = default;
 
     ~fcn_info (void) = default;
 
-    octave_value find (const octave_value_list& args = octave_value_list ())
+    octave_value find (const octave_value_list& args = octave_value_list (),
+                       const symbol_scope& search_scope = symbol_scope ())
     {
-      return m_rep->find (args);
+      return m_rep->find (args, search_scope);
     }
 
-    octave_value builtin_find (void)
+    octave_value
+    builtin_find (const symbol_scope& search_scope = symbol_scope ())
     {
-      return m_rep->builtin_find ();
+      return m_rep->builtin_find (search_scope);
     }
 
     octave_value find_method (const std::string& dispatch_type) const
     {
       return m_rep->find_method (dispatch_type);
     }
 
     octave_value find_built_in_function (void) const
@@ -270,35 +276,37 @@ namespace octave
       return m_rep->cmdline_function;
     }
 
     octave_value find_autoload (void)
     {
       return m_rep->find_autoload ();
     }
 
+    // FIXME: find_function_on_path might be a better name?
     octave_value find_user_function (void)
     {
       return m_rep->find_user_function ();
     }
 
     bool is_user_function_defined (void) const
     {
       return m_rep->is_user_function_defined ();
     }
 
     bool is_package_defined (void) const
     {
       return m_rep->is_package_defined ();
     }
 
-    octave_value find_function (const octave_value_list& args
-                                = octave_value_list ())
+    octave_value
+    find_function (const octave_value_list& args = octave_value_list (),
+                   const symbol_scope& search_scope = symbol_scope ())
     {
-      return m_rep->find_function (args);
+      return m_rep->find_function (args, search_scope);
     }
 
     void install_cmdline_function (const octave_value& f)
     {
       m_rep->install_cmdline_function (f);
     }
 
     void install_local_function (const octave_value& f,
diff --git a/libinterp/corefcn/symscope.h b/libinterp/corefcn/symscope.h
--- a/libinterp/corefcn/symscope.h
+++ b/libinterp/corefcn/symscope.h
@@ -239,17 +239,17 @@ namespace octave
     }
 
     octave_value dump (void) const;
 
     std::string name (void) const { return m_name; }
 
     void cache_name (const std::string& name) { m_name = name; }
 
-    octave_user_function *function (void) { return m_fcn; }
+    octave_user_function *function (void) const { return m_fcn; }
 
     void set_function (octave_user_function *fcn) { m_fcn = fcn; }
 
     void set_parent (const std::shared_ptr<symbol_scope_rep>& parent);
 
     void set_primary_parent (const std::shared_ptr<symbol_scope_rep>& parent);
 
     bool is_relative (const std::shared_ptr<symbol_scope_rep>& scope) const;
@@ -522,17 +522,17 @@ namespace octave
     }
 
     void cache_name (const std::string& name)
     {
       if (m_rep)
         m_rep->cache_name (name);
     }
 
-    octave_user_function * function (void)
+    octave_user_function * function (void) const
     {
       return m_rep ? m_rep->function () : nullptr;
     }
 
     void set_function (octave_user_function *fcn)
     {
       if (m_rep)
         m_rep->set_function (fcn);
diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -124,66 +124,69 @@ namespace octave
       return octave_value ();
 
     auto p = m_fcn_table.find (name);
 
     return (p != m_fcn_table.end ()
             ? p->second.find_autoload () : octave_value ());
   }
 
-  octave_value symbol_table::builtin_find (const std::string& name)
+  octave_value symbol_table::builtin_find (const std::string& name,
+                                           const symbol_scope& search_scope)
   {
     if (name.empty ())
       return octave_value ();
 
     fcn_table_iterator p = m_fcn_table.find (name);
 
     if (p != m_fcn_table.end ())
-      return p->second.builtin_find ();
+      return p->second.builtin_find (search_scope);
     else
       {
         fcn_info finfo (name);
 
-        octave_value fcn = finfo.builtin_find ();
+        octave_value fcn = finfo.builtin_find (search_scope);
 
         if (fcn.is_defined ())
           m_fcn_table[name] = finfo;
 
         return fcn;
       }
 
     return octave_value ();
   }
 
   octave_value symbol_table::fcn_table_find (const std::string& name,
-                                             const octave_value_list& args)
+                                             const octave_value_list& args,
+                                             const symbol_scope& search_scope)
   {
     if (name.empty ())
       return octave_value ();
 
     fcn_table_iterator p = m_fcn_table.find (name);
 
     if (p != m_fcn_table.end ())
-      return p->second.find (args);
+      return p->second.find (args, search_scope);
     else
       {
         fcn_info finfo (name);
 
-        octave_value fcn = finfo.find (args);
+        octave_value fcn = finfo.find (args, search_scope);
 
         if (fcn.is_defined ())
           m_fcn_table[name] = finfo;
 
         return fcn;
       }
 
     return octave_value ();
   }
 
-  octave_value symbol_table::find_function (const std::string& name)
+  octave_value symbol_table::find_function (const std::string& name,
+                                            const symbol_scope& search_scope)
   {
     if (name.empty ())
       return octave_value ();
 
     if (name[0] == '@')
       {
         size_t pos = name.find_first_of ('/');
 
@@ -191,41 +194,31 @@ namespace octave
           return octave_value ();
 
         std::string method = name.substr (pos+1);
         std::string dispatch_type = name.substr (1, pos-1);
 
         return find_method (method, dispatch_type);
       }
     else
-      return find_function (name, ovl ());
+      return find_function (name, ovl (), search_scope);
   }
 
   octave_value symbol_table::find_function (const std::string& name,
-                                            const octave_value_list& args)
+                                            const octave_value_list& args,
+                                            const symbol_scope& scope_arg)
   {
     if (name.empty ())
       return octave_value ();
 
-    octave_value fcn;
-
-    symbol_scope curr_scope = current_scope ();
-
-    if (curr_scope)
-      {
-        fcn = curr_scope.find_subfunction (name);
-
-        if (fcn.is_defined ())
-          return fcn;
-      }
-
-    return fcn_table_find (name, args);
+    return fcn_table_find (name, args, scope_arg);
   }
 
-  octave_value symbol_table::find_user_function (const std::string& name)
+  octave_value
+  symbol_table::find_user_function (const std::string& name)
   {
     if (name.empty ())
       return octave_value ();
 
     auto p = m_fcn_table.find (name);
 
     return (p != m_fcn_table.end ()
             ? p->second.find_user_function () : octave_value ());
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -71,36 +71,44 @@ namespace octave
     // classdef methods.
     octave_value find_method (const std::string& name,
                               const std::string& dispatch_type);
 
     octave_value find_built_in_function (const std::string& name);
 
     octave_value find_autoload (const std::string& name);
 
-    octave_value builtin_find (const std::string& name);
+    octave_value
+    builtin_find (const std::string& name,
+                  const symbol_scope& search_scope = symbol_scope ());
 
-    octave_value fcn_table_find (const std::string& name,
-                                 const octave_value_list& args = ovl ());
+    octave_value
+    fcn_table_find (const std::string& name,
+                    const octave_value_list& args = ovl (),
+                    const symbol_scope& search_scope = symbol_scope ());
 
     // If NAME is of the form @CLASS/FUNCTION, call
     //
     //   find_method (FUNCTION, CLASS)
     //
     // otherwise call
     //
-    //   function_function (NAME, ovl ())
+    //   find_function (NAME, ovl ())
 
-    octave_value find_function (const std::string& name);
+    octave_value
+    find_function (const std::string& name,
+                   const symbol_scope& search_scope = symbol_scope ());
 
     // NAME should just be function name; dispatch type determined
     // from types of ARGS.
 
-    octave_value find_function (const std::string& name,
-                                const octave_value_list& args);
+    octave_value
+    find_function (const std::string& name,
+                   const octave_value_list& args,
+                   const symbol_scope& search_scope = symbol_scope ());
 
     octave_value find_user_function (const std::string& name);
 
     octave_value find_cmdline_function (const std::string& name);
 
     void install_cmdline_function (const std::string& name,
                                    const octave_value& fcn);
 
