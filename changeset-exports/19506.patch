# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1420051545 18000
#      Wed Dec 31 13:45:45 2014 -0500
# Node ID fdb8a62ef17a25ade69002d1e09e0a8c847573d7
# Parent  ce02743b6f2a50c7172aae6d6fc08e4461958664
fix docstring style in .m files

* @audioplayer/__get_properties__.m, @audioplayer/audioplayer.m,
@audioplayer/get.m, @audioplayer/isplaying.m, @audioplayer/pause.m,
@audioplayer/play.m, @audioplayer/playblocking.m,
@audioplayer/resume.m, @audioplayer/set.m, @audioplayer/stop.m,
@audiorecorder/audiorecorder.m,@audiorecorder/get.m,
@audiorecorder/getaudiodata.m, @audiorecorder/getplayer.m,
@audiorecorder/isrecording.m, @audiorecorder/pause.m,
@audiorecorder/play.m, @audiorecorder/record.m,
@audiorecorder/recordblocking.m, @audiorecorder/resume.m,
@audiorecorder/set.m, @audiorecorder/stop.m: Fix docstring style.

diff --git a/scripts/audio/@audioplayer/__get_properties__.m b/scripts/audio/@audioplayer/__get_properties__.m
--- a/scripts/audio/@audioplayer/__get_properties__.m
+++ b/scripts/audio/@audioplayer/__get_properties__.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{properties} =} __get_properties__ (@var{player})
-## Return a struct containing all named properties of the player object
-## @var{player}.
+## Return a struct containing all named properties of the audioplayer
+## object @var{player}.
 ## @end deftypefn
 
 function properties = __get_properties__ (player)
   properties.BitsPerSample = __player_get_nbits__ (struct (player).player);
   properties.CurrentSample = __player_get_sample_number__ (struct (player).player);
   properties.DeviceID = __player_get_id__ (struct (player).player);
   properties.NumberOfChannels = __player_get_channels__ (struct (player).player);
   if __player_isplaying__ (struct (player).player)
diff --git a/scripts/audio/@audioplayer/audioplayer.m b/scripts/audio/@audioplayer/audioplayer.m
--- a/scripts/audio/@audioplayer/audioplayer.m
+++ b/scripts/audio/@audioplayer/audioplayer.m
@@ -13,87 +13,67 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{player} =} audioplayer (@var{y}, @var{fs})
-## Create an audioplayer object that will play back data @var{y} at sample
-## rate @var{fs}.
-## @end deftypefn
-## @deftypefn {Function File} {@var{player} =} audioplayer (@var{y}, @var{fs}, @var{nbits})
-## Create an audioplayer object that will play back data @var{y} at sample
-## rate @var{fs} and bit depth @var{nbits}.
-## @end deftypefn
-## @deftypefn {Function File} {@var{player} =} audioplayer (@var{y}, @var{fs}, @var{nbits}, @var{id})
+## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{y}, @var{fs}, @var{nbits})
+## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{y}, @var{fs}, @var{nbits}, @var{id})
+## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{function}, @dots{})
+## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{recorder})
+## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{recorder}, @var{id})
 ## Create an audioplayer object that will play back data @var{y} at sample
-## rate @var{fs}, bit depth @var{nbits} and using a device with @var{id}
-## that you can get using the audiodevinfo function.
-## @end deftypefn
-## @deftypefn {Function File} {@var{player} =} audioplayer (@var{function}, @var{fs})
-## Argument @var{function} is a function handle, inline function or a string
-## value of a function name that will get called to process audio.  Audio
-## will be played at @var{fs} sampling rate.
-## @end deftypefn
-## @deftypefn {Function File} {@var{player} =} audioplayer (@var{function}, @var{fs}, @var{nbits})
-## Same as above but also allows you to specify the number of bits per
-## sample.
-## @end deftypefn
-## @deftypefn {Function File} {@var{player} =} audioplayer (@var{function}, @var{fs}, @var{nbits}, @var{id})
-## Same as above but also allows you to specify device @var{id} that will be
-## used.
-## @end deftypefn
-## @deftypefn {Function File} {@var{player} =} audioplayer (@var{recorder})
-## Create an audioplayer object that will use data and other information
-## such as sample rate from an audiorecorder object.
-## @end deftypefn
-## @deftypefn {Function File} {@var{player} =} audioplayer (@var{recorder}, @var{id})
-## Create an audioplayer object that will use data and other information
-## from an audiorecorder object and that will use a device with the given @var{id}.
+## rate @var{fs}.  The optional arguments @var{nbits}, and @var{id}
+## specify the bit depth and player device id, respectively.  Device IDs
+## may be found using the audiodevinfo function.
+## Given a function handle, use that function to process the audio.
+## Given an audioplayer object, use the data from the object to
+## initialize the player.
 ## @end deftypefn
 ##
 ## The signal @var{y} can be a vector or a two dimensional array.
 ##
 ## The following example will create an audioplayer object that will play
 ## back one second of white noise at 44100 sample rate using 8 bits per
 ## sample.
 ##
 ## @example
 ## @group
-## @code{y = randn (2, 44100) - 0.5;}
-## @code{player = audioplayer (y, 44100, 8);}
-## @code{play (player);}
+## y = randn (2, 44100) - 0.5;
+## player = audioplayer (y, 44100, 8);
+## play (player);
 ## @end group
 ## @end example
 ##
 ## The following example will create and register a callback that generates
 ## a sine wave on both channels.
 ##
 ## @example
 ## @group
-## @code{function [ sound, status ] = callback_sine (frames)}
-## @code{  global lphase = 0.0;}
-## @code{  global rphase = 0.0;}
-## @code{  incl = 440.0 / 44100.0;}
-## @code{  incr = 443.0 / 44100.0;}
-## @code{  nl = incl * frames;}
-## @code{  nr = incr * frames;}
-## @code{  left = sin (2.0 * pi * [lphase:incl:lphase+nl]);}
-## @code{  right = sin (2.0 * pi * [rphase:incr:rphase+nr]);}
-## @code{  sound = [left', right'];}
-## @code{  status = 0;}
-## @code{  lphase = lphase + nl;}
-## @code{  rphase = rphase + nr;}
-## @code{endfunction}
-## @code{player = audioplayer (@@callback_sine, 44100);}
-## @code{play (player);}
-## @code{# play for as long as you want}
-## @code{stop (player);}
+## function [ sound, status ] = callback_sine (frames)
+##   global lphase = 0.0;
+##   global rphase = 0.0;
+##   incl = 440.0 / 44100.0;
+##   incr = 443.0 / 44100.0;
+##   nl = incl * frames;
+##   nr = incr * frames;
+##   left = sin (2.0 * pi * [lphase:incl:lphase+nl]);
+##   right = sin (2.0 * pi * [rphase:incr:rphase+nr]);
+##   sound = [left', right'];
+##   status = 0;
+##   lphase = lphase + nl;
+##   rphase = rphase + nr;
+## endfunction
+## player = audioplayer (@@callback_sine, 44100);
+## play (player);
+## # play for as long as you want
+## stop (player);
 ## @end group
 ## @end example
 
 function player = audioplayer (varargin)
   if (nargin < 1 || nargin > 4)
     print_usage ();
   endif
   if ((isa (varargin{1}, "function_handle") || ischar (varargin{1})) && nargin < 2)
diff --git a/scripts/audio/@audioplayer/get.m b/scripts/audio/@audioplayer/get.m
--- a/scripts/audio/@audioplayer/get.m
+++ b/scripts/audio/@audioplayer/get.m
@@ -13,25 +13,23 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{value} =} get (@var{player}, @var{name})
-## Returns the @var{value} of the property identified by @var{name}.
-## @end deftypefn
-## @deftypefn {Function File} {@var{values} =} get (@var{player}, @{@var{name1}, @dots{}, @var{namen}@})
-## Returns the @var{values} of the properties identified by @var{name1} to
-## @var{namen}.
-## @end deftypefn
-## @deftypefn {Function File} {@var{values} =} get (@var{player})
-## Returns a scalar structure with values of all properties of @var{player}.
-## The field names correspond to property names.
+## @deftypefnx {Function File} {@var{values} =} get (@var{player})
+## Return the @var{value} of the property identified by @var{name}.
+## If @var{name} is a cell array return the values of of the properties
+## identified by the elements of the cell array.  Given only the
+## player object, return a scalar structure with values of all
+## properties of @var{player}.  The field names of the structure
+## correspond to property names.
 ## @end deftypefn
 
 function result = get (varargin)
   player = varargin{1};
   properties = __get_properties__ (player);
   if nargin == 1
     result = properties;
   elseif nargin == 2
diff --git a/scripts/audio/@audioplayer/isplaying.m b/scripts/audio/@audioplayer/isplaying.m
--- a/scripts/audio/@audioplayer/isplaying.m
+++ b/scripts/audio/@audioplayer/isplaying.m
@@ -13,15 +13,15 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isplaying (@var{player})
-## Returns 1 if the audioplayer object is currently playing back audio.
-## Returns 0 otherwise.
+## Return 1 if the audioplayer object @var{player}is currently playing
+## back audio and 0 otherwise.
 ## @end deftypefn
 
 function result = isplaying (player)
   result = __player_isplaying__ (struct (player).player);
 endfunction
diff --git a/scripts/audio/@audioplayer/pause.m b/scripts/audio/@audioplayer/pause.m
--- a/scripts/audio/@audioplayer/pause.m
+++ b/scripts/audio/@audioplayer/pause.m
@@ -13,14 +13,14 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} pause (@var{player})
-## Pause the playback with the possibility of resuming it later at the same place.
+## Pause the audioplayer @var{player}.
 ## @end deftypefn
 
 function pause (player)
   __player_pause__ (struct (player).player);
 endfunction
diff --git a/scripts/audio/@audioplayer/play.m b/scripts/audio/@audioplayer/play.m
--- a/scripts/audio/@audioplayer/play.m
+++ b/scripts/audio/@audioplayer/play.m
@@ -13,26 +13,23 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} play (@var{player})
-## Play back audio stored in an audioplayer object without blocking.
-## @end deftypefn
-## @deftypefn {Function File} {} play  (@var{player}, @var{start})
-## Play back audio stored in an audioplayer object starting at the time in
-## seconds specified by @var{start}.
-## @end deftypefn
-## @deftypefn {Function File} {} play (@var{player}, [@var{start}, @var{end}])
-## Play back audio stored in an audioplayer object starting at the time in
-## seconds specified by @var{start} and ending at the time specified by
-## @var{end}.
+## @deftypefnx {Function File} {} play  (@var{player}, @var{start})
+## @deftypefnx {Function File} {} play (@var{player}, @var{limits})
+## Play audio stored in the audioplayer object @var{player} without blocking.
+## Given optional argument start, begin playing at @var{start} seconds
+## in the recording.  Given a two-element vector @var{limits}, begin and
+## end playing at the number of seconds specified by the elements of the
+## vector.
 ## @end deftypefn
 
 function play (varargin)
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
   __player_play__ (struct (varargin{1}).player, varargin{2:end});
 endfunction
diff --git a/scripts/audio/@audioplayer/playblocking.m b/scripts/audio/@audioplayer/playblocking.m
--- a/scripts/audio/@audioplayer/playblocking.m
+++ b/scripts/audio/@audioplayer/playblocking.m
@@ -13,26 +13,23 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} playblocking (@var{player})
-## Play back audio stored in the audioplayer object with blocking.
-## @end deftypefn
-## @deftypefn {Function File} {} playblocking (@var{player}, @var{start})
-## Play back audio stored in the audioplayer object starting at the time in
-## seconds specified by @var{start}.
-## @end deftypefn
-## @deftypefn {Function File} {} playblocking (@var{player}, [@var{start}, @var{end}])
-## Play back audio stored in the audioplayer object starting at the time in
-## seconds specified by @var{start} and ending at the time specified by
-## @var{end}.
+## @deftypefnx {Function File} {} playblocking (@var{player}, @var{start})
+## @deftypefnx {Function File} {} playblocking (@var{player}, @var{limits})
+## Play audio stored in the audioplayer object @var{player} with blocking.
+## Given optional argument start, begin playing at @var{start} seconds
+## in the recording.  Given a two-element vector @var{limits}, begin and
+## end playing at the number of seconds specified by the elements of the
+## vector.
 ## @end deftypefn
 
 function playblocking (varargin)
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
   __player_playblocking__ (struct (varargin{1}).player, varargin{2:end});
 endfunction
diff --git a/scripts/audio/@audioplayer/resume.m b/scripts/audio/@audioplayer/resume.m
--- a/scripts/audio/@audioplayer/resume.m
+++ b/scripts/audio/@audioplayer/resume.m
@@ -13,14 +13,14 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} resume (@var{player})
-## Resume playback for a previously paused audioplayer object.
+## Resume playback for the paused audioplayer object @var{player}.
 ## @end deftypefn
 
 function resume (player)
   __player_resume__ (struct (player).player);
 endfunction
diff --git a/scripts/audio/@audioplayer/set.m b/scripts/audio/@audioplayer/set.m
--- a/scripts/audio/@audioplayer/set.m
+++ b/scripts/audio/@audioplayer/set.m
@@ -13,29 +13,24 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} set (@var{player}, @var{name}, @var{value})
+## @deftypefnx {Function File} {} set (@var{player}, @var{properties})
+## @deftypefnx {Function File} {@var{properties} =} set (@var{player})
 ## Set the value of property specified by @var{name} to a given @var{value}.
-## @end deftypefn
-## @deftypefn {Function File} {} set (@var{player}, @var{names}, @var{values})
-## Given a cell array of property @var{names} and a cell array of @var{values},
-## set each property to a corresponding value.
-## @end deftypefn
-## @deftypefn {Function File} {} set (@var{player}, @var{properties})
-## Given a structure @var{properties} where fields are property names, set
-## the value of those properties for an audioplayer object to corresponding
-## values.
-## @end deftypefn
-## @deftypefn {Function File} {@var{properties} =} set (@var{player})
-## Returns a structure of settable properties.
+## If @var{name} and @var{value} are cell arrays, set each property to the
+## corresponding value.  Given a structure of @var{properties} with
+## fields corresponding to property names, set the value of those
+## properties to the field values.  Given only the audioplayer object,
+## return a structure of settable properties.
 ## @end deftypefn
 
 function settable = set (varargin)
   if nargin < 1 || nargin > 3
     print_usage ();
   endif
   player = struct (varargin{1}).player;
   if nargin == 1
diff --git a/scripts/audio/@audioplayer/stop.m b/scripts/audio/@audioplayer/stop.m
--- a/scripts/audio/@audioplayer/stop.m
+++ b/scripts/audio/@audioplayer/stop.m
@@ -13,15 +13,15 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} stop (@var{player})
-## Stop the playback and reset the relevant variables to their starting
-## values.
+## Stop the playback for the audioplayer @var{player} and reset the
+## relevant variables to their starting values.
 ## @end deftypefn
 
 function stop (player)
   __player_stop__ (struct (player).player);
 endfunction
diff --git a/scripts/audio/@audiorecorder/audiorecorder.m b/scripts/audio/@audiorecorder/audiorecorder.m
--- a/scripts/audio/@audiorecorder/audiorecorder.m
+++ b/scripts/audio/@audiorecorder/audiorecorder.m
@@ -13,42 +13,25 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{recorder} =} audiorecorder ()
+## @deftypefnx {Function File} {@var{recorder} =} audiorecorder (@var{fs}, @var{nbits}, @var{channels})
+## @deftypefnx {Function File} {@var{recorder} =} audiorecorder (@var{fs}, @var{nbits}, @var{channels}, @var{id})
+## @deftypefnx {Function File} {@var{recorder} =} audiorecorder (@var{function}, @dots{})
 ## Create an audiorecorder object recording 8 bit mono audio at 8000 Hz
-## sample rate.
-## @end deftypefn
-## @deftypefn {Function File} {@var{recorder} =} audiorecorder (@var{fs}, @var{nbits}, @var{channels})
-## Create an audiorecorder object recording at specified sample rate
-## @var{fs}, specified bit depth @var{nbits}, and specified number of
-## @var{channels}.
-## @end deftypefn
-## @deftypefn {Function File} {@var{recorder} =} audiorecorder (@var{fs}, @var{nbits}, @var{channels}, @var{id})
-## Create an audiorecorder object recording at specified sample rate @var{fs},
-## specified bit depth @var{nbits}, number of @var{channels}, and recording
-## on the device specified by @var{id}.  You can get device IDs by using the
-## audiodevinfo function.
-## @end deftypefn
-## @deftypefn {Function File} {@var{recorder} =} audiorecorder (@var{function}, @var{fs})
-## Argument @var{function} is a function handle, inline function, or a string
-## value of a function name that will get called to process audio.  Audio
-## will be recorded at @var{fs} sampling rate.
-## @end deftypefn
-## @deftypefn {Function File} {@var{recorder} =} audiorecorder (@var{function}, @var{fs}, @var{nbits})
-## Same as above but also allows you to specify the number of bits per
-## sample.
-## @end deftypefn
-## @deftypefn {Function File} {@var{recorder} =} audiorecorder (@var{function}, @var{fs}, @var{nbits}, @var{id})
-## Same as above but also allows you to specify device @var{id} that will be
-## used.
+## sample rate.  The optional arguments @var{fs}, @var{nbits},
+## @var{channels}, and @var{id} specify the sample rate, bit depth,
+## number of channels and recording device id, respectively.  Device IDs
+## may be found using the audiodevinfo function.
+## Given a function handle, use that function to process the audio.
 ## @end deftypefn
 
 function recorder = audiorecorder (varargin)
   if (nargin > 5)
     print_usage ();
   endif
   if nargin > 0 && ischar (varargin{1})
     varargin{1} = str2func (varargin{1});
diff --git a/scripts/audio/@audiorecorder/get.m b/scripts/audio/@audiorecorder/get.m
--- a/scripts/audio/@audiorecorder/get.m
+++ b/scripts/audio/@audiorecorder/get.m
@@ -13,25 +13,23 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{value} =} get (@var{recorder}, @var{name})
-## Returns the @var{value} of the property identified by @var{name}.
-## @end deftypefn
-## @deftypefn {Function File} {@var{values} =} get (@var{recorder}, @{@var{name1}, @dots{}, @var{namen}@})
-## Returns the @var{values} of the properties identified by @var{name1} to
-## @var{namen}.
-## @end deftypefn
-## @deftypefn {Function File} {@var{values} =} get (@var{recorder})
-## Returns a scalar structure with values of all properties of @var{recorder}.
-## The field names correspond to property names.
+## @deftypefnx {Function File} {@var{values} =} get (@var{recorder})
+## Return the @var{value} of the property identified by @var{name}.
+## If @var{name} is a cell array, return the values of the properties
+## corresponding to the elements of the cell array.  Given only the
+## recorder object, return a scalar structure with values of all
+## properties of @var{recorder}.  The field names of the structure
+## correspond to property names.
 ## @end deftypefn
 
 function result = get (varargin)
   recorder = varargin{1};
   properties = __get_properties__ (recorder);
   if nargin == 1
     result = properties;
   elseif nargin == 2
diff --git a/scripts/audio/@audiorecorder/getaudiodata.m b/scripts/audio/@audiorecorder/getaudiodata.m
--- a/scripts/audio/@audiorecorder/getaudiodata.m
+++ b/scripts/audio/@audiorecorder/getaudiodata.m
@@ -13,23 +13,22 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{data} =} getaudiodata (@var{recorder})
-## Returns recorder audio data as a matrix with values between -1.0 and 1.0
+## @deftypefnx {Function File} {@var{data} =} getaudiodata (@var{recorder}, @var{datatype})
+## Return recorder audio data as a matrix with values between -1.0 and 1.0
 ## and with as many columns as there are channels in the recorder.
-## @end deftypefn
-## @deftypefn {Function File} {@var{data} =} getaudiodata (@var{recorder}, @var{datatype})
-## Converts recorded data to specified @var{datatype}.  It can be set to
-## @qcode{"double"}, @qcode{"single"}, @qcode{"int16"}, @qcode{"int8"} or
-## @qcode{"uint8"}.
+## Given the optional argument @var{datatype}, convert the recorded data
+## to the specified type, which may be one of @qcode{"double"},
+## @qcode{"single"}, @qcode{"int16"}, @qcode{"int8"} or @qcode{"uint8"}.
 ## @end deftypefn
 
 function data = getaudiodata (varargin)
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
   recorder = varargin{1};
   if (nargin == 1)
diff --git a/scripts/audio/@audiorecorder/getplayer.m b/scripts/audio/@audiorecorder/getplayer.m
--- a/scripts/audio/@audiorecorder/getplayer.m
+++ b/scripts/audio/@audiorecorder/getplayer.m
@@ -13,17 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{player} =} getplayer (@var{recorder})
-## Returns an audioplayer object with data recorded by the recorder.
+## Return an audioplayer object with data recorded by the audiorecorder
+## object @var{recorder}.
 ## @end deftypefn
 
 function player = getplayer (varargin)
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
   recorder = varargin{1};
   data = getaudiodata (recorder);
diff --git a/scripts/audio/@audiorecorder/isrecording.m b/scripts/audio/@audiorecorder/isrecording.m
--- a/scripts/audio/@audiorecorder/isrecording.m
+++ b/scripts/audio/@audiorecorder/isrecording.m
@@ -13,15 +13,15 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isrecording (@var{recorder})
-## Returns 1 if the audiorecorder object is currently recording audio.
-## Returns 0 otherwise.
+## Return 1 if the audiorecorder object @var{recorder} is currently
+## recording audio and 0 otherwise.
 ## @end deftypefn
 
 function result = isrecording (recorder)
   result = __recorder_isrecording__ (struct (recorder).recorder);
 endfunction
diff --git a/scripts/audio/@audiorecorder/pause.m b/scripts/audio/@audiorecorder/pause.m
--- a/scripts/audio/@audiorecorder/pause.m
+++ b/scripts/audio/@audiorecorder/pause.m
@@ -13,14 +13,14 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} pause (@var{recorder})
-## Pause recording with the possibility of resuming it later.
+## Pause recording with audiorecorder object @var{recorder}.
 ## @end deftypefn
 
 function pause (recorder)
   __recorder_pause__ (struct (recorder).recorder);
 endfunction
diff --git a/scripts/audio/@audiorecorder/play.m b/scripts/audio/@audiorecorder/play.m
--- a/scripts/audio/@audiorecorder/play.m
+++ b/scripts/audio/@audiorecorder/play.m
@@ -13,27 +13,23 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{player} =} play (@var{recorder})
+## @deftypefnx {Function File} {@var{player} =} play (@var{recorder}, @var{start})
+## @deftypefnx {Function File} {@var{player} =} play (@var{recorder}, [@var{start}, @var{end}])
 ## Play the audio recorded in @var{recorder} and return a corresponding
-## audioplayer object.
-## @end deftypefn
-## @deftypefn {Function File} {@var{player} =} play (@var{recorder}, @var{start})
-## Play the audio recorded in @var{recorder} starting from @var{start}
-## seconds in to the recording. Returns a corresponding audioplayer object.
-## @end deftypefn
-## @deftypefn {Function File} {@var{player} =} play (@var{recorder}, [@var{start}, @var{end}])
-## Play the audio recorded in @var{recorder} starting from @var{start}
-## seconds and ending at @var{end} seconds in the recording. Returns a
-## corresponding audioplayer object.
+## audioplayer object.  If the optional argument @var{start} is
+## provided, begin playing @var{start} seconds in to the recording.
+## If the optional argument @var{end} is provided, stop playing at
+## @var{end} seconds in the recording.
 ## @end deftypefn
 
 function player = play (varargin)
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
   recorder = varargin{1};
   data = getaudiodata (recorder);
diff --git a/scripts/audio/@audiorecorder/record.m b/scripts/audio/@audiorecorder/record.m
--- a/scripts/audio/@audiorecorder/record.m
+++ b/scripts/audio/@audiorecorder/record.m
@@ -13,22 +13,21 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} record (@var{recorder})
-## Record audio without blocking. The recording will continue until you use
-## the stop method on @var{recorder}.
-## @end deftypefn
-## @deftypefn {Function File} {} record (@var{recorder}, @var{length})
-## Record audio without blocking. The recording will continue for
-## @var{length} seconds.
+## @deftypefnx {Function File} {} record (@var{recorder}, @var{length})
+## Record audio without blocking using the audiorecorder object
+## @var{recorder} until stopped or paused by the @var{stop} or
+## @var{pause} method.  Given the optional argument @var{length}, record
+## for @var{length} seconds.
 ## @end deftypefn
 
 function record (varargin)
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
   __recorder_record__ (struct (varargin{1}).recorder, varargin{2:end});
 endfunction
diff --git a/scripts/audio/@audiorecorder/recordblocking.m b/scripts/audio/@audiorecorder/recordblocking.m
--- a/scripts/audio/@audiorecorder/recordblocking.m
+++ b/scripts/audio/@audiorecorder/recordblocking.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} recordblocking (@var{recorder}, @var{length})
-## Record audio with blocking (synchronous I/O).  You must specify the number
-## of seconds that the recording will continue for.
+## Record audio with blocking (synchronous I/O).  You must specify the
+## length of the recording in seconds.
 ## @end deftypefn
 
 function recordblocking (varargin)
   if (nargin != 2)
     print_usage ();
   endif
   __recorder_recordblocking__ (struct (varargin{1}).recorder, varargin{2});
 endfunction
diff --git a/scripts/audio/@audiorecorder/resume.m b/scripts/audio/@audiorecorder/resume.m
--- a/scripts/audio/@audiorecorder/resume.m
+++ b/scripts/audio/@audiorecorder/resume.m
@@ -13,14 +13,14 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} resume (@var{recorder})
-## Will resume recording if pause was used before on @var{recorder}.
+## Resume recording with the paused audiorecorder object @var{recorder}.
 ## @end deftypefn
 
 function resume (recorder)
   __recorder_resume__ (struct (recorder).recorder);
 endfunction
diff --git a/scripts/audio/@audiorecorder/set.m b/scripts/audio/@audiorecorder/set.m
--- a/scripts/audio/@audiorecorder/set.m
+++ b/scripts/audio/@audiorecorder/set.m
@@ -13,28 +13,25 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} set (@var{recorder}, @var{name}, @var{value})
+## @deftypefnx {Function File} {} set (@var{recorder}, @var{properties})
+## @deftypefnx {Function File} {@var{properties} =} set (@var{recorder})
 ## Set the value of property specified by @var{name} to a given @var{value}.
-## @end deftypefn
-## @deftypefn {Function File} {} set (@var{recorder}, @var{names}, @var{values})
-## Given a cell array of property @var{names} and a cell array of @var{values},
+## If @var{name} and @var{value} are cell arrays of the same size,
 ## set each property to a corresponding value.
-## @end deftypefn
-## @deftypefn {Function File} {} set (@var{recorder}, @var{properties})
-## Given a structure where fields are property names, set the value of those
-## properties for an audiorecorder object to corresponding values.
-## @end deftypefn
-## @deftypefn {Function File} {@var{properties} =} set (@var{recorder})
-## Returns a structure of settable properties.
+## Given a structure with fields corresponding to property names, set
+## the value of those properties to the corresponding field values.
+## Given a only the recorder object, return a structure of settable
+## properties.
 ## @end deftypefn
 
 function settable = set (varargin)
   if nargin < 1 || nargin > 3
     print_usage ();
   endif
   recorder = struct (varargin{1}).recorder;
   if nargin == 1
diff --git a/scripts/audio/@audiorecorder/stop.m b/scripts/audio/@audiorecorder/stop.m
--- a/scripts/audio/@audiorecorder/stop.m
+++ b/scripts/audio/@audiorecorder/stop.m
@@ -13,14 +13,15 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} stop (@var{recorder})
-## Will stop recording, clean up any audio streams.
+## Stop the audiorecorder object @var{recorder} and clean up any audio
+## streams.
 ## @end deftypefn
 
 function stop (recorder)
   __recorder_stop__ (struct (recorder).recorder);
 endfunction
