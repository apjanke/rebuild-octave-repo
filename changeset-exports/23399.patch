# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1492192841 14400
#      Fri Apr 14 14:00:41 2017 -0400
# Node ID 5e0350f5e2ddeefd19f952e3ef4d4f0a16f7cd39
# Parent  d4ef04757ead7031ed3016fe391b1988a69a97c0
always return valid address for local buffers

* oct-locbuf.h, oct-locbuf.cc (local_buffer::local_buffer):
Always allocate, even for zero-size buffers.
(chunk_buffer::chunk_buffer): Likewise.

diff --git a/liboctave/util/oct-locbuf.cc b/liboctave/util/oct-locbuf.cc
--- a/liboctave/util/oct-locbuf.cc
+++ b/liboctave/util/oct-locbuf.cc
@@ -52,20 +52,21 @@ namespace octave
     // Alignment mask.  The size of double or long int, whichever is
     // greater.  All data will be aligned to this size.  If it's not
     // enough for a type, that type should not be declared as POD.
 
     static const size_t align_mask = (sizeof (long) < sizeof (double)
                                       ? sizeof (double)
                                       : sizeof (long)) - 1;
 
-    active++;
+    // Always allocate, even for zero-size buffers so that local buffers
+    // always have valid addresses, same as for directly using operator
+    // new.
 
-    if (! size)
-      return;
+    active++;
 
     // Align size.  Note that size_t is unsigned, so size-1 must correctly
     // wrap around.
 
     size = ((size - 1) | align_mask) + 1;
 
     if (size > left)
       {
diff --git a/liboctave/util/oct-locbuf.h b/liboctave/util/oct-locbuf.h
--- a/liboctave/util/oct-locbuf.h
+++ b/liboctave/util/oct-locbuf.h
@@ -33,22 +33,22 @@ namespace octave
   // The default local buffer simply encapsulates an *array* pointer
   // that gets deleted automatically.  For common POD types, we provide
   // specializations.
 
   template <typename T>
   class local_buffer
   {
   public:
-    local_buffer (size_t size)
-      : data (0)
-    {
-      if (size)
-        data = new T [size];
-    }
+
+    // Always allocate, even for zero-size buffers so that local
+    // buffers always have valid addresses, same as for directly using
+    // operator new.
+
+    local_buffer (size_t size) : data (new T [size]) { }
 
     // No copying!
 
     local_buffer (const local_buffer&) = delete;
 
     local_buffer& operator = (const local_buffer&) = delete;
 
     ~local_buffer (void) { delete [] data; }
