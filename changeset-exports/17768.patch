# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1382822430 -7200
#      Sat Oct 26 23:20:30 2013 +0200
# Node ID 271c0cce0f6459e1f5ab1aa7111e5e296da566ee
# Parent  26992c04d5dc635bc93c20045be5ea2582044d09
remove XREF from the links in the docuemntation

* parser.cc(replace_links): remove "XREF" and ":" from the strings that is
  shown in the links of the documentation; mark links to a figure (anchor)
  with # in order to prevent opening a new tab;
  (node_text_to_html) color for current section;
  (info_to_html): color for title "Menu" of table of contents

* webinfo.cc(link_clicked): only load tab when link does not start with #,
  scroll to desired anchor instead

diff --git a/libgui/src/qtinfo/parser.cc b/libgui/src/qtinfo/parser.cc
--- a/libgui/src/qtinfo/parser.cc
+++ b/libgui/src/qtinfo/parser.cc
@@ -267,31 +267,34 @@ QString
 parser::get_node_prev (const QString& text)
 {
   return parser_node (text, "Prev:");
 }
 
 static void
 replace_links (QString& text)
 {
-  QRegExp re ("(\\*[N|n]ote|\n\\*)([ |\n]+)([^:]+):([^:\\.,]*)([:,\\.])");
+  QRegExp re ("(\\*[N|n]ote|\n\\*)([ |\n]+)([^:]+):([^:\\.,]*)([:,\\.]+)");
   int i = 0, f;
 
   while ( (i = re.indexIn (text,i)) != -1)
     {
       QString type     = re.cap (1);
       QString note     = re.cap (3);
       QString url_link = re.cap (4);
-      QString link     = re.cap (4) + re.cap(5);
-      QString spaces = QString("");
-      QRegExp re_linebreak ("\n([ ]*)([^ ]*)([ ]*)");
-      if (re_linebreak.indexIn (link,0) != -1)
+      QString link     = re.cap (4);
+      QString term     = re.cap (5);
+
+      QRegExp regexp_link = QRegExp("([\\s]*)XREF([^\\s]*)");
+      if (regexp_link.indexIn (link) != -1)
         {
-          link.replace (re_linebreak,"&nbsp;"+re_linebreak.cap (2)+"\n");   // prevent line breaks in links
-          spaces = re_linebreak.cap (1);
+          int ix = regexp_link.cap (1).indexOf ("\n");
+          if (ix  != -1)
+            term = term + "\n"
+                   + QString (regexp_link.cap (1).size () - ix -1,' ');
         }
 
       if (url_link.isEmpty ())
         {
           url_link = note;
         }
 
       url_link = url_link.trimmed ();
@@ -305,47 +308,54 @@ replace_links (QString& text)
       if (type=="\n*")
         {
           href="\n<img src=':/actions/icons/bookmark.png' width=10/>";
         }
       else
         {
           href="<img src=':/actions/icons/bookmark.png' width=10/>";
         }
-      href += re.cap(2) + "<a href='" + url_link + "'>" + note + ":" + link + "</a>" + spaces;
+
+      term.replace(":","");
+      note.replace(":","");
+
+      if (note == "fig")
+        url_link.prepend("#");
+
+      href +=  "&nbsp;<a href='" + url_link + "'>" + note + "</a>" + term;
       f = re.matchedLength ();
       text.replace (i,f,href);
       i += href.size ();
     }
 }
 
 static void
 replace_colons (QString& text)
 {
   QRegExp re ("`([^']+)'");
   int i = 0, f;
   while ( (i = re.indexIn (text, i)) != -1)
     {
       QString t = re.cap (1);
-      QString bold = "<font style=\"color:Blue;font-weight:bold\">" + t + "</font>";
+      QString bold = "<font style=\"color:#00AA00;font-weight:bold\">" + t + "</font>";
 
       f = re.matchedLength ();
       text.replace (i,f,bold);
       i += bold.size ();
     }
 }
 
 static void
 info_to_html (QString& text)
 {
   text.replace ("&", "&amp;");
   text.replace ("<", "&lt;");
   text.replace (">", "&gt;");
 
-  text.replace ("\n* Menu:", "\n<font style=\"text-decoration:underline;font-weight:bold\">Menu:</font>");
+  text.replace ("\n* Menu:", "\n<font style=\"color:DarkRed;font-weight:bold\">Menu:</font>");
   text.replace ("See also:", "<font style=\"color:DarkRed;font-style:italic;font-weight:bold\">See also:</font>");
   replace_colons (text);
   replace_links (text);
 }
 
 QString
 parser::node_text_to_html (const QString& text_arg, int anchorPos,
                            const QString& anchor)
@@ -375,30 +385,29 @@ parser::node_text_to_html (const QString
   else
     {
       int n = text.indexOf ("\n");
       text.remove (0, n);
       info_to_html (text);
     }
 
   QString navigationLinks = QString (
-        "<b>Section:</b> %1<br>"
+        "<b>Section:</b> <font style=\"color:DarkRed\">%1</font><br>"
         "<img src=':/actions/icons/arrow_left.png'/> <b>Previous Section:</b> <a href='%2'>%3</a><br>"
         "<img src=':/actions/icons/arrow_right.png'/> <b>Next Section:</b> <a href='%4'>%5</a><br>"
         "<img src=':/actions/icons/arrow_up.png'/> <b>Up:</b> <a href='%6'>%7</a><br>\n"
         )
       .arg (nodeName)
       .arg (QString (QUrl::toPercentEncoding (nodePrev, "", "'")))
       .arg (nodePrev)
       .arg (QString (QUrl::toPercentEncoding (nodeNext, "", "'")))
       .arg (nodeNext)
       .arg (QString (QUrl::toPercentEncoding (nodeUp, "", "'")))
       .arg (nodeUp);
 
-
   text.prepend ("<hr>\n<pre style=\"font-family:monospace\">");
   text.append ("</pre>\n<hr><hr>\n");
   text.prepend (navigationLinks);
   text.append (navigationLinks);
   text.prepend ("<html><body>\n");
   text.append ("</body></html>\n");
 
   return text;
diff --git a/libgui/src/qtinfo/webinfo.cc b/libgui/src/qtinfo/webinfo.cc
--- a/libgui/src/qtinfo/webinfo.cc
+++ b/libgui/src/qtinfo/webinfo.cc
@@ -129,17 +129,20 @@ webinfo::load_node (const QString& node_
       _text_browser->scrollToAnchor ("anchor");
     }
 }
 
 void
 webinfo::link_clicked (const QUrl & link)
 {
   QString node = link.toString ();
-  load_node (node);
+  if (node.at (0) != '#')
+    load_node (node);
+  else
+    _text_browser->scrollToAnchor (node);
 }
 
 void
 webinfo::current_tab_changed (int index)
 {
   QVariant tab_data = _tab_bar->tabData (index);
   _text_browser = static_cast<QTextBrowser*> (tab_data.value<void*> ());
 
