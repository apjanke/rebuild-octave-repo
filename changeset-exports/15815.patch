# HG changeset patch
# User Rik <rik@octave.org>
# Date 1355859564 28800
#      Tue Dec 18 11:39:24 2012 -0800
# Node ID f28b3dcbaa9ad6c5819740f7ddd04f7871ff1374
# Parent  1eee8d8c59fd5d340b09c2fed794d8645607d537
Add autoconversion between java.lang.Character class and Octave string class.

* libinterp/octave-value/ov-java.cc(box): Add test for java.lang.Character
class and convert to Octave string class.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -962,16 +962,28 @@ box (JNIEnv* jni_env, jobject jobj, jcla
       cls = jni_env->FindClass ("java/lang/String");
 
       if (jni_env->IsInstanceOf (jobj, cls))
         {
           retval = jstring_to_string (jni_env, jobj);
         }
     }
 
+  if (retval.is_undefined ())
+    {
+      cls = jni_env->FindClass ("java/lang/Character");
+
+      if (jni_env->IsInstanceOf (jobj, cls))
+        {
+          jmethodID m = jni_env->GetMethodID (cls, "charValue", "()C");
+          retval = jni_env->CallCharMethod (jobj, m);
+          retval = retval.convert_to_str (false, true); 
+        }
+    }
+
   if (retval.is_undefined () && Vjava_matrix_autoconversion)
     {
       cls = find_octave_class (jni_env, "org/octave/Matrix");
 
       if (jni_env->IsInstanceOf (jobj, cls))
         {
           jmethodID mID = jni_env->GetMethodID (cls, "getDims", "()[I");
           jintArray_ref iv (jni_env, reinterpret_cast<jintArray> (jni_env->CallObjectMethod (jobj, mID)));
