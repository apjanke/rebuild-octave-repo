# HG changeset patch
# User Rik <rik@octave.org>
# Date 1553712974 25200
#      Wed Mar 27 11:56:14 2019 -0700
# Node ID ce405303267c06cb9379719d9849cf01766834d2
# Parent  87c5b3ba466416e3d1794fa58dfdd205af07e6cc
# Parent  1e5dde93eb26d83457c45dbfa75b8bc2551aa266
maint: merge stable to default.

diff --git a/scripts/plot/appearance/shading.m b/scripts/plot/appearance/shading.m
--- a/scripts/plot/appearance/shading.m
+++ b/scripts/plot/appearance/shading.m
@@ -72,21 +72,28 @@ function shading (varargin)
     parents = kids(strcmp (types, "axes"));
     hglist = kids(strcmp (types, "hggroup"));
     for i = 1 : numel (hglist)
       props = get (hglist(i));
       if (! isfield (props, "levelstep"))
         parents(end+1) = hglist(i);
       endif
     endfor
-    kids = get (parents, "children");
+    if (numel (parents) <= 1)
+      kids = get (parents, "children");
+    else
+      ## See bug #55993 where multiple hggroups caused failure.
+      kids = get (parents, "children");
+      kids = [kids{:}](:);  # convert cell array to column vector of handles
+    endif
+
   endwhile
 
-  ## FIXME: This is the old, simple code.
-  ##        Unfortunately, it also shades contour plots which is not desirable.
+  ## NOTE: This is the old, simple code.
+  ##       Unfortunately, it also shades contour plots which is not desirable.
   ##hp = findobj (hax, "type", "patch");
   ##hs = findobj (hax, "type", "surface");
   ##hlist = [hp(:); hs(:)];
 
   if (isempty (hlist))
     return;
   endif
 
diff --git a/scripts/strings/dec2base.m b/scripts/strings/dec2base.m
--- a/scripts/strings/dec2base.m
+++ b/scripts/strings/dec2base.m
@@ -107,17 +107,17 @@ function retval = dec2base (d, base, len
   retval = reshape (symbols(digits+1), size (digits));
 
   ## Check if the first element is the zero symbol.  It seems possible
   ## that LEN is provided, and is less than the computed MAX_LEN and
   ## MAX_LEN is computed to be one larger than necessary, so we would
   ## have a leading zero to remove.  But if LEN >= MAX_LEN, we should
   ## not remove any leading zeros.
   if ((nargin == 2 || (nargin == 3 && max_len > len))
-      && length (retval) != 1 && ! any (retval(:,1) != symbols(1)))
+      && columns (retval) != 1 && ! any (retval(:,1) != symbols(1)))
     retval = retval(:,2:end);
   endif
 
 endfunction
 
 
 %!test
 %! s0 = "";
@@ -151,16 +151,18 @@ endfunction
 %!assert (dec2base (uint64 (2)^63-1, 16), "7FFFFFFFFFFFFFFF")
 %!assert (dec2base ([1, 2; 3, 4], 2, 3), ["001"; "011"; "010"; "100"])
 %!assert (dec2base ({1, 2; 3, 4}, 2, 3), ["001"; "011"; "010"; "100"])
 
 %!test
 %! a = 0:3;
 %! assert (dec2base (! a, 2, 1), ["1"; "0"; "0"; "0"]);
 
+%!assert <*56005> (dec2base ([0, 0], 16), ["0"; "0"])
+
 ## Test input validation
 %!error dec2base ()
 %!error dec2base (1)
 %!error dec2base (1, 2, 3, 4)
 %!error dec2base ("A")
 %!error dec2base (2i)
 %!error dec2base (-1)
 %!error dec2base (1.1)
