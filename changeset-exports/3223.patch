# HG changeset patch
# User jwe
# Date 911590456 0
#      Fri Nov 20 19:34:16 1998 +0000
# Node ID 3ee04ff37b3e9ec8b0499d8f4a63743794c3d8f3
# Parent  dae85431bade49e113914c7a597073a0a917eedd
[project @ 1998-11-20 19:34:15 by jwe]

diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -59,19 +59,19 @@ ifeq ($(OCTAVE_LITE), true)
   endif
   ifeq ($(WITH_DYNAMIC_LINKING), false)
     DLD_STATIC_OBJ := $(DLD_OBJ)
   endif
 else
   DLD_STATIC_OBJ := $(DLD_OBJ)
 endif
 
-OV_INCLUDES := ov-re-mat.h ov-cx-mat.h ov-ch-mat.h \
-	ov-list.h ov-struct.h ov-scalar.h ov-range.h \
-	ov-complex.h ov-va-args.h ov-colon.h ov-base.h ov-base-mat.h \
+OV_INCLUDES := ov-re-mat.h ov-cx-mat.h ov-ch-mat.h ov-list.h \
+	ov-struct.h ov-scalar.h ov-range.h ov-complex.h ov-va-args.h \
+	ov-colon.h ov-base.h ov-base-mat.h ov-base-scalar.h \
 	ov-str-mat.h ov-bool-mat.h ov-bool.h ov-file.h ov.h \
 	ov-fcn.h ov-builtin.h ov-mapper.h ov-usr-fcn.h ov-typeinfo.h
 
 PT_INCLUDES := pt.h pt-all.h pt-arg-list.h pt-assign.h pt-binop.h \
 	pt-check.h pt-cmd.h pt-colon.h pt-const.h pt-decl.h \
 	pt-except.h pt-exp.h pt-id.h pt-idx.h pt-indir.h \
 	pt-jump.h pt-loop.h pt-mat.h pt-misc.h pt-plot.h \
 	pt-pr-code.h pt-select.h pt-stmt.h pt-unop.h pt-walk.h
@@ -99,20 +99,20 @@ OP_XSRC := op-b-b.cc op-bm-bm.cc op-chm.
 	op-cs-s.cc op-fil-b.cc op-fil-bm.cc op-fil-cm.cc op-fil-cs.cc \
 	op-fil-m.cc op-fil-s.cc op-fil-lis.cc op-fil-rec.cc \
 	op-fil-str.cc op-list.cc op-m-cm.cc op-m-cs.cc op-m-m.cc \
 	op-m-s.cc op-range.cc op-s-cm.cc op-s-cs.cc op-s-m.cc \
 	op-s-s.cc op-str-str.cc
 
 OP_SRC := $(addprefix OPERATORS/, $(OP_XSRC))
 
-OV_SRC := ov-base.cc ov-base-mat.cc ov-ch-mat.cc ov-list.cc ov-re-mat.cc \
-	ov-cx-mat.cc ov-range.cc ov-scalar.cc ov-complex.cc \
-	ov-str-mat.cc ov-struct.cc ov-va-args.cc ov-colon.cc \
-	ov-bool-mat.cc ov-bool.cc ov-file.cc ov.cc ov-fcn.cc \
+OV_SRC := ov-base.cc ov-base-mat.cc ov-base-scalar.cc ov-ch-mat.cc \
+	ov-list.cc ov-re-mat.cc ov-cx-mat.cc ov-range.cc ov-scalar.cc \
+	ov-complex.cc ov-str-mat.cc ov-struct.cc ov-va-args.cc \
+	ov-colon.cc ov-bool-mat.cc ov-bool.cc ov-file.cc ov.cc ov-fcn.cc \
 	ov-builtin.cc ov-mapper.cc ov-usr-fcn.cc ov-typeinfo.cc
 
 PT_SRC := pt.cc pt-arg-list.cc pt-assign.cc pt-binop.cc pt-check.cc \
 	pt-cmd.cc pt-colon.cc pt-const.cc pt-decl.cc pt-except.cc \
 	pt-exp.cc pt-id.cc pt-idx.cc pt-indir.cc pt-jump.cc \
 	pt-loop.cc pt-mat.cc pt-misc.cc pt-plot.cc pt-pr-code.cc \
 	pt-select.cc pt-stmt.cc pt-unop.cc
 
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -42,17 +42,18 @@ class ostream;
 
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
 
 // Real matrix values.
 
-template <class MT> class
+template <class MT>
+class
 octave_base_matrix : public octave_base_value
 {
 public:
 
   octave_base_matrix (void)
     : octave_base_value () { }
 
   octave_base_matrix (const MT& m)
diff --git a/src/ov-bool.cc b/src/ov-bool.cc
--- a/src/ov-bool.cc
+++ b/src/ov-bool.cc
@@ -31,20 +31,25 @@ Software Foundation, 59 Temple Place - S
 #include <iostream.h>
 
 #include "mx-base.h"
 
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ops.h"
 #include "ov-bool.h"
+#include "ov-base.h"
+#include "ov-base-scalar.h"
+#include "ov-base-scalar.cc"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "pr-output.h"
 
+template class octave_base_scalar<bool>;
+
 DEFINE_OCTAVE_ALLOCATOR (octave_bool);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_bool, "bool");
 
 static octave_value *
 default_numeric_conversion_function (const octave_value& a)
 {
   CAST_CONV_ARG (const octave_bool&);
@@ -102,35 +107,13 @@ octave_bool::convert_to_str (void) const
 {
   char s[2];
   s[0] = (char) scalar;
   s[1] = '\0';
 
   return octave_value (s);
 }
 
-void
-octave_bool::print (ostream& os, bool pr_as_read_syntax) const
-{
-  print_raw (os, pr_as_read_syntax);
-  newline (os);
-}
-
-void
-octave_bool::print_raw (ostream& os, bool pr_as_read_syntax) const
-{
-  indent (os);
-  octave_print_internal (os, scalar, pr_as_read_syntax);
-}
-
-bool
-octave_bool::print_name_tag (ostream& os, const string& name) const
-{
-  indent (os);
-  os << name << " = ";
-  return false;    
-}
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-bool.h b/src/ov-bool.h
--- a/src/ov-bool.h
+++ b/src/ov-bool.h
@@ -34,71 +34,56 @@ Software Foundation, 59 Temple Place - S
 class ostream;
 
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "ov-base.h"
+#include "ov-base-scalar.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
 
 // Real scalar values.
 
 class
-octave_bool : public octave_base_value
+octave_bool : public octave_base_scalar<bool>
 {
 public:
 
   octave_bool (void)
-    : octave_base_value (), scalar (false) { }
+    : octave_base_scalar<bool> (false) { }
 
   octave_bool (bool b)
-    : octave_base_value (), scalar (b) { }
+    : octave_base_scalar<bool> (b) { }
 
   octave_bool (const octave_bool& s)
-    : octave_base_value (), scalar (s.scalar) { }
+    : octave_base_scalar<bool> (s) { }
 
   ~octave_bool (void) { }
 
   octave_value *clone (void) { return new octave_bool (*this); }
 
   type_conv_fcn numeric_conversion_function (void) const;
 
   octave_value do_index_op (const octave_value_list& idx);
 
   idx_vector index_vector (void) const { return idx_vector (scalar); }
 
-  int rows (void) const { return 1; }
-  int columns (void) const { return 1; }
-
-  int length (void) const { return 1; }
-
-  bool is_defined (void) const { return true; }
-
-  bool is_constant (void) const { return true; }
-
   bool is_real_scalar (void) const { return true; }
 
-  octave_value all (void) const { return scalar; }
-  octave_value any (void) const { return scalar; }
-
   bool is_bool_type (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
-  bool is_scalar_type (void) const { return true; }
-
-  bool is_numeric_type (void) const { return true; }
-
   bool valid_as_scalar_index (void) const { return scalar; }
 
   bool valid_as_zero_index (void) const { return ! scalar; }
 
   bool is_true (void) const { return scalar; }
 
   double double_value (bool = false) const { return scalar; }
 
@@ -114,27 +99,18 @@ public:
 
   bool bool_value (void) const { return scalar; }
 
   boolMatrix bool_matrix_value (void) const
     { return boolMatrix (1, 1, scalar); }
 
   octave_value convert_to_str (void) const;
 
-  void print (ostream& os, bool pr_as_read_syntax = false) const;
-
-  void print_raw (ostream& os, bool pr_as_read_syntax = false) const;
-
-  bool print_name_tag (ostream& os, const string& name) const;
-
 private:
 
-  // The value of this scalar.
-  bool scalar;
-
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 
   DECLARE_OCTAVE_ALLOCATOR
 };
 
 #endif
 
 /*
diff --git a/src/ov-complex.cc b/src/ov-complex.cc
--- a/src/ov-complex.cc
+++ b/src/ov-complex.cc
@@ -30,21 +30,26 @@ Software Foundation, 59 Temple Place - S
 
 #include <iostream.h>
 
 #include "lo-ieee.h"
 
 #include "oct-obj.h"
 #include "ops.h"
 #include "ov-complex.h"
+#include "ov-base.h"
+#include "ov-base-scalar.h"
+#include "ov-base-scalar.cc"
 #include "ov-cx-mat.h"
 #include "ov-scalar.h"
 #include "gripes.h"
 #include "pr-output.h"
 
+template class octave_base_scalar<Complex>;
+
 DEFINE_OCTAVE_ALLOCATOR (octave_complex);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_complex, "complex scalar");
 
 octave_value *
 octave_complex::try_narrowing_conversion (void)
 {
   octave_value *retval = 0;
@@ -144,35 +149,13 @@ octave_complex::complex_value (bool) con
 
 
 ComplexMatrix
 octave_complex::complex_matrix_value (bool) const
 {
   return ComplexMatrix (1, 1, scalar);
 }
 
-void
-octave_complex::print (ostream& os, bool pr_as_read_syntax) const
-{
-  print_raw (os, pr_as_read_syntax);
-  newline (os);
-}
-
-void
-octave_complex::print_raw (ostream& os, bool pr_as_read_syntax) const
-{
-  indent (os);
-  octave_print_internal (os, scalar, pr_as_read_syntax);
-}
-
-bool
-octave_complex::print_name_tag (ostream& os, const string& name) const
-{
-  indent (os);
-  os << name << " = ";
-  return false;    
-}
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -34,104 +34,73 @@ Software Foundation, 59 Temple Place - S
 class ostream;
 
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "ov-base.h"
+#include "ov-base-scalar.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
 
 // Complex scalar values.
 
 class
-octave_complex : public octave_base_value
+octave_complex : public octave_base_scalar<Complex>
 {
 public:
 
   octave_complex (void)
-    : octave_base_value () { }
+    : octave_base_scalar<Complex> () { }
 
   octave_complex (const Complex& c)
-    : octave_base_value (), scalar (c) { }
+    : octave_base_scalar<Complex> (c) { }
 
   octave_complex (const octave_complex& c)
-    : octave_base_value (), scalar (c.scalar) { }
+    : octave_base_scalar<Complex> (c) { }
 
   ~octave_complex (void) { }
 
   octave_value *clone (void) { return new octave_complex (*this); }
 
   octave_value *try_narrowing_conversion (void);
 
   octave_value do_index_op (const octave_value_list& idx);
 
-  int rows (void) const { return 1; }
-  int columns (void) const { return 1; }
-
-  int length (void) const
-  {
-    int r = rows ();
-    int c = columns ();
-
-    return r > c ? r : c;
-  }
-
-  bool is_defined (void) const { return true; }
-
-  bool is_constant (void) const { return true; }
-
   bool is_complex_scalar (void) const { return true; }
 
-  octave_value all (void) const { return (scalar != 0.0); }
-  octave_value any (void) const { return (scalar != 0.0); }
-
   bool is_complex_type (void) const { return true; }
 
-  bool is_scalar_type (void) const { return true; }
-
-  bool is_numeric_type (void) const { return true; }
-
   // XXX FIXME XXX ???
   bool valid_as_scalar_index (void) const { return false; }
   bool valid_as_zero_index (void) const { return false; }
 
-  bool is_true (void) const { return (scalar != 0.0); }
-
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const;
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const;
 
   void increment (void) { scalar += 1.0; }
 
   void decrement (void) { scalar -= 1.0; }
 
-  void print (ostream& os, bool pr_as_read_syntax = false) const;
-
-  void print_raw (ostream& os, bool pr_as_read_syntax = false) const;
-
-  bool print_name_tag (ostream& os, const string& name) const;
-
 private:
 
-  Complex scalar;
-
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 
   DECLARE_OCTAVE_ALLOCATOR
 };
 
 #endif
 
 /*
diff --git a/src/ov-scalar.cc b/src/ov-scalar.cc
--- a/src/ov-scalar.cc
+++ b/src/ov-scalar.cc
@@ -29,22 +29,27 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <iostream.h>
 
 #include "defun.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov-scalar.h"
+#include "ov-base.h"
+#include "ov-base-scalar.h"
+#include "ov-base-scalar.cc"
 #include "ov-re-mat.h"
 #include "ov-typeinfo.h"
 #include "pr-output.h"
 #include "xdiv.h"
 #include "xpow.h"
 
+template class octave_base_scalar<double>;
+
 DEFINE_OCTAVE_ALLOCATOR (octave_scalar);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_scalar, "scalar");
 
 static inline bool
 valid_scalar_indices (const octave_value_list& args)
 {
   int nargin = args.length ();
@@ -99,35 +104,13 @@ octave_scalar::convert_to_str (void) con
       s[0] = (char) i;
       s[1] = '\0';
       retval = octave_value (s);
     }
 
   return retval;
 }
 
-void
-octave_scalar::print (ostream& os, bool pr_as_read_syntax) const
-{
-  print_raw (os, pr_as_read_syntax);
-  newline (os);
-}
-
-void
-octave_scalar::print_raw (ostream& os, bool pr_as_read_syntax) const
-{
-  indent (os);
-  octave_print_internal (os, scalar, pr_as_read_syntax);
-}
-
-bool
-octave_scalar::print_name_tag (ostream& os, const string& name) const
-{
-  indent (os);
-  os << name << " = ";
-  return false;    
-}
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -35,102 +35,78 @@ class ostream;
 
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "ov-base.h"
+#include "ov-base-scalar.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
 
 // Real scalar values.
 
 class
-octave_scalar : public octave_base_value
+octave_scalar : public octave_base_scalar<double>
 {
 public:
 
   octave_scalar (void)
-    : octave_base_value (), scalar (0.0) { }
+    : octave_base_scalar<double> (0.0) { }
 
   octave_scalar (double d)
-    : octave_base_value (), scalar (d) { }
+    : octave_base_scalar<double> (d) { }
 
   octave_scalar (const octave_scalar& s)
-    : octave_base_value (), scalar (s.scalar) { }
+    : octave_base_scalar<double> (s) { }
 
   ~octave_scalar (void) { }
 
   octave_value *clone (void) { return new octave_scalar (*this); }
 
   octave_value do_index_op (const octave_value_list& idx);
 
   idx_vector index_vector (void) const { return idx_vector (scalar); }
 
-  int rows (void) const { return 1; }
-  int columns (void) const { return 1; }
-
-  int length (void) const { return 1; }
-
-  bool is_constant (void) const { return true; }
-
-  bool is_defined (void) const { return true; }
-
   bool is_real_scalar (void) const { return true; }
 
-  octave_value all (void) const { return (scalar != 0.0); }
-  octave_value any (void) const { return (scalar != 0.0); }
-
   bool is_real_type (void) const { return true; }
-  bool is_scalar_type (void) const { return true; }
-  bool is_numeric_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const
     { return (! xisnan (scalar) && NINT (scalar) == 1); }
 
   bool valid_as_zero_index (void) const
     { return (! xisnan (scalar) && NINT (scalar) == 0); }
 
-  bool is_true (void) const { return (scalar != 0.0); }
-
   double double_value (bool = false) const { return scalar; }
 
   double scalar_value (bool = false) const { return scalar; }
 
   Matrix matrix_value (bool = false) const
     { return Matrix (1, 1, scalar); }
 
   Complex complex_value (bool = false) const { return scalar; }
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return  ComplexMatrix (1, 1, Complex (scalar)); }
 
+  octave_value convert_to_str (void) const;
+
   void increment (void) { ++scalar; }
 
   void decrement (void) { --scalar; }
 
-  octave_value convert_to_str (void) const;
-
-  void print (ostream& os, bool pr_as_read_syntax = false) const;
-
-  void print_raw (ostream& os, bool pr_as_read_syntax = false) const;
-
-  bool print_name_tag (ostream& os, const string& name) const;
-
 private:
 
-  // The value of this scalar.
-  double scalar;
-
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 
   DECLARE_OCTAVE_ALLOCATOR
 };
 
 #endif
 
 /*
