# HG changeset patch
# User Rik <code@nomad.inbox5.com>
# Date 1272046428 25200
#      Fri Apr 23 11:13:48 2010 -0700
# Node ID 479536c5bb105b1548ad477aa56b968b957bfd95
# Parent  af55e4a499e442f458f27e58d04c6649661ba3b5
Replace lowercase nan with NaN for visual cue in scripts

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-04-23  Rik <octave@nomad.inbox5.com>
+
+   * scripts/geometry/griddata.m, scripts/geometry/griddatan.m, 
+     scripts/geometry/tsearchn.m: Replace nan with NaN for nice visual cue
+
 2010-04-23  Rik <octave@nomad.inbox5.com>
 
 	* optimization/gplot.m: Eliminate parsing error for NaN inside of matrix 
    declaration.
 
 2010-04-22  Rik <octave@nomad.inbox5.com>
 
 	* optimization/sqp.m: Return correct value (101) on succes.  Fixes bug #29577
diff --git a/scripts/geometry/griddata.m b/scripts/geometry/griddata.m
--- a/scripts/geometry/griddata.m
+++ b/scripts/geometry/griddata.m
@@ -63,17 +63,17 @@ function [rx, ry, rz] = griddata (x, y, 
   [nr, nc] = size (xi);
   
   x = x(:);
   y = y(:);
   z = z(:);
 
   ## Triangulate data.
   tri = delaunay (x, y);
-  zi = nan (size (xi));
+  zi = NaN (size (xi));
   
   if (strcmp (method, "cubic"))
     error ("griddata: cubic interpolation not yet implemented");
 
   elseif (strcmp (method, "nearest"))
     ## Search index of nearest point.
     idx = dsearch (x, y, tri, xi, yi);
     valid = !isnan (idx);
diff --git a/scripts/geometry/griddatan.m b/scripts/geometry/griddatan.m
--- a/scripts/geometry/griddatan.m
+++ b/scripts/geometry/griddatan.m
@@ -49,17 +49,17 @@ function yi = griddatan (x, y, xi, metho
   if (n != ni || size (y, 1) != m || size (y, 2) != 1)
     error ("griddatan: dimensional mismatch");
   endif
 
   ## triangulate data
   ## tri = delaunayn(x, varargin{:});
   tri = delaunayn (x);
 
-  yi = nan (mi, 1);
+  yi = NaN (mi, 1);
   
   if (strcmp (method, "nearest"))
     ## search index of nearest point
     idx = dsearchn (x, tri, xi);
     valid = !isnan (idx);
     yi(valid) = y(idx(valid));
 
   elseif (strcmp (method, "linear"))
diff --git a/scripts/geometry/tsearchn.m b/scripts/geometry/tsearchn.m
--- a/scripts/geometry/tsearchn.m
+++ b/scripts/geometry/tsearchn.m
@@ -29,18 +29,18 @@
 function [idx, p] = tsearchn (x, t, xi)
   if (nargin != 3)
     print_usage ();
   endif
 
   nt = size (t, 1);
   [m, n] = size (x);
   mi = size (xi, 1);
-  idx = nan (mi, 1);
-  p = nan (mi, n + 1);
+  idx = NaN (mi, 1);
+  p = NaN (mi, n + 1);
 
   ni = [1:mi].';
   for i = 1 : nt
     ## Only calculate the Barycentric coordinates for points that have not
     ## already been found in a triangle.
     b = cart2bary (x (t (i, :), :), xi(ni,:));
 
     ## Our points xi are in the current triangle if
