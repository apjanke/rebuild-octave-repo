# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1263848649 18000
#      Mon Jan 18 16:04:09 2010 -0500
# Node ID 0c3609dd34cf0bdc50d8cb82bbe3c1681e1fc24a
# Parent  ab80681c44d9cc1c3cb82689260690a9f1a2c48b
oct-parse.yy (eval_string): save and set reading_{script,fcn,classdef}_file vars

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,11 +1,15 @@
+2010-01-18  John W. Eaton  <jwe@octave.org>
+
+	* testfun/test.m: Undo previous change.
+
 2010-01-18  David Grundberg  <davidg@cs.umu.se>
 
-	* testfun/test.m: Fix !function test blocks.
+	* testfun/test.m: Append endfunction to function test blocks.
 
 2010-01-17  Thorsten Meyer  <thorsten.meyier@gmx.de>
 
 	* general/celldisp.m: Add example, add demo.
 
 	* general/structfun.m, miscellaneous/getfield.m,
 	miscellaneous/orderfields.m, miscellaneous/setfield.m,
 	miscellaneous/substruct.m: Update documentation string. 
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -343,17 +343,17 @@ function [__ret1, __ret2, __ret3, __ret4
       persistent __fn = 0;
       __name_position = function_name (__block);
       if (isempty (__name_position))
         __success = 0;
         __msg = sprintf ("%stest failed: missing function name\n",
 			 __signal_fail);
       else
         __name = __block(__name_position(1):__name_position(2));
-        __code = [__block "\nendfunction"];
+        __code = __block;
         try
           eval(__code); ## Define the function
           __clear = sprintf ("%sclear %s;\n", __clear, __name);
         catch
           __success = 0;
           __msg = sprintf ("%stest failed: syntax error\n%s",
 			   __signal_fail, __error_text__);
         end_try_catch
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2010-01-18  John W. Eaton  <jwe@octave.org>
+
+	* oct-parse.yy (fcn_end): Allow EOF as end of function if
+	reading from eval string.
+	(eval_string): Protect and set reading_fcn_file,
+	reading_script_file, and reading_classdef_file.
+
 2010-01-18  Jaroslav Hajek  <highegg@gmail.com>
 
 	* xpow.cc (xpow (const NDArray&, double), xpow (const FloatNDArray&,
 	float)): Optimize also the x.^3 case.
 
 2010-01-18  David Grundberg  <davidg@cs.umu.se>
 
 	* mex.cc (mexPrintf): Change signature.
diff --git a/src/oct-parse.yy b/src/oct-parse.yy
--- a/src/oct-parse.yy
+++ b/src/oct-parse.yy
@@ -1394,17 +1394,18 @@ function_end	: END
 		    if (endfunction_found)
 		      {
 			yyerror ("inconsistent function endings -- "
 				 "if one function is explicitly ended, "
 				 "so must all the others");
 			YYABORT;
 		      }
 
-		    if (! reading_fcn_file && ! reading_script_file)
+		    if (! (reading_fcn_file || reading_script_file
+                           || get_input_from_eval_string))
 		      {
 			yyerror ("function body open at end of input");
 			YYABORT;
 		      }
 
 		    if (reading_classdef_file)
 		      {
 		        yyerror ("classdef body open at end of input");
@@ -4162,27 +4163,33 @@ eval_string (const std::string& s, bool 
   frame.protect_var (input_from_eval_string_pending);
   frame.protect_var (parser_end_of_input);
   frame.protect_var (line_editing);
   frame.protect_var (current_eval_string);
   frame.protect_var (current_function_depth);
   frame.protect_var (max_function_depth);
   frame.protect_var (parsing_subfunctions);
   frame.protect_var (endfunction_found);
+  frame.protect_var (reading_fcn_file);
+  frame.protect_var (reading_script_file);
+  frame.protect_var (reading_classdef_file);
 
   input_line_number = 1;
   current_input_column = 1;
   get_input_from_eval_string = true;
   input_from_eval_string_pending = true;
   parser_end_of_input = false;
   line_editing = false;
   current_function_depth = 0;
   max_function_depth = 0;
   parsing_subfunctions = false;
   endfunction_found = false;
+  reading_fcn_file = false;
+  reading_script_file = false;
+  reading_classdef_file = false;
 
   current_eval_string = s;
 
   YY_BUFFER_STATE old_buf = current_buffer ();
   YY_BUFFER_STATE new_buf = create_buffer (0);
 
   frame.add_fcn (switch_to_buffer, old_buf);
   frame.add_fcn (delete_buffer, new_buf);
