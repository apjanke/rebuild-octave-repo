# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1248374276 -7200
#      Thu Jul 23 20:37:56 2009 +0200
# Node ID 5fcf008c7c4148a2fd29a7788fedd9b1594cee66
# Parent  deb668d53e608f77d60c35a06a1ce5c58f78e5ad
fix Cholesky updating with scalars

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-07-23  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/chol.cc (Fcholupdate,
+	Fcholinsert, Fcholdelete, Fcholshift): Replace is_matrix_type ->
+	is_numeric_type.
+
 2009-07-23  John W. Eaton  <jwe@octave.org>
 
 	* toplev.cc (IGNORE_EXCEPTION, SAFE_CALL): New macros.
 	(clean_up_and_exit, do_octave_atexit): Use SAFE_CALL to handle
 	exceptions while preparing to exit.
 
 2009-07-23  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/DLD-FUNCTIONS/chol.cc b/src/DLD-FUNCTIONS/chol.cc
--- a/src/DLD-FUNCTIONS/chol.cc
+++ b/src/DLD-FUNCTIONS/chol.cc
@@ -614,17 +614,17 @@ If @var{info} is not present, an error m
     {
       print_usage ();
       return retval;
     }
 
   octave_value argr = args(0);
   octave_value argu = args(1);
 
-  if (argr.is_matrix_type () && argu.is_matrix_type ()
+  if (argr.is_numeric_type () && argu.is_numeric_type ()
       && (nargin < 3 || args(2).is_string ()))
     {
       octave_idx_type n = argr.rows ();
 
       std::string op = (nargin < 3) ? "+" : args(2).string_value ();
 
       bool down = op == "-";
 
@@ -825,17 +825,17 @@ If @var{info} is not present, an error m
       print_usage ();
       return retval;
     }
 
   octave_value argr = args(0);
   octave_value argj = args(1);
   octave_value argu = args(2);
 
-  if (argr.is_matrix_type () && argu.is_matrix_type ()
+  if (argr.is_numeric_type () && argu.is_numeric_type ()
       && argj.is_real_scalar ())
     {
       octave_idx_type n = argr.rows ();
       octave_idx_type j = argj.scalar_value ();
 
       if (argr.columns () == n && argu.rows () == n+1 && argu.columns () == 1)
         {
           if (j > 0 && j <= n+1)
@@ -998,17 +998,17 @@ return the Cholesky@tie{}factorization o
     {
       print_usage ();
       return retval;
     }
 
   octave_value argr = args(0);
   octave_value argj = args(1);
 
-  if (argr.is_matrix_type () && argj.is_real_scalar ())
+  if (argr.is_numeric_type () && argj.is_real_scalar ())
     {
       octave_idx_type n = argr.rows ();
       octave_idx_type j = argj.scalar_value ();
 
       if (argr.columns () == n)
         {
           if (j > 0 && j <= n)
             {
@@ -1136,17 +1136,17 @@ return the Cholesky@tie{}factorization o
       print_usage ();
       return retval;
     }
 
   octave_value argr = args(0);
   octave_value argi = args(1);
   octave_value argj = args(2);
 
-  if (argr.is_matrix_type () && argi.is_real_scalar () && argj.is_real_scalar ())
+  if (argr.is_numeric_type () && argi.is_real_scalar () && argj.is_real_scalar ())
     {
       octave_idx_type n = argr.rows ();
       octave_idx_type i = argi.scalar_value ();
       octave_idx_type j = argj.scalar_value ();
 
       if (argr.columns () == n)
         {
           if (j > 0 && j <= n+1 && i > 0 && i <= n+1)
