# HG changeset patch
# User Rik <rik@octave.org>
# Date 1482863539 28800
#      Tue Dec 27 10:32:19 2016 -0800
# Node ID 5a8999b1c5f3ff618e8d12d177ccb316c26c67b1
# Parent  0e9606b04ae0727692db27ebf14c3ca7cf3a0528
# Parent  fba8a6c742c6346261ca4e1735f903f59ce0772f
maint: Periodic merge of stable to default.

diff --git a/doc/interpreter/image.txi b/doc/interpreter/image.txi
--- a/doc/interpreter/image.txi
+++ b/doc/interpreter/image.txi
@@ -147,16 +147,20 @@ between 0 and 1.
 @DOCSTRING(gray2ind)
 
 @DOCSTRING(ind2gray)
 
 @DOCSTRING(rgb2ind)
 
 @DOCSTRING(ind2rgb)
 
+@DOCSTRING(frame2im)
+
+@DOCSTRING(im2frame)
+
 @DOCSTRING(colormap)
 
 @DOCSTRING(rgbplot)
 
 @DOCSTRING(autumn)
 
 @DOCSTRING(bone)
 
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -236,20 +236,16 @@ produces the spiral plot shown in @ref{f
 @DOCSTRING(area)
 
 @DOCSTRING(fill)
 
 @DOCSTRING(comet)
 
 @DOCSTRING(comet3)
 
-@DOCSTRING(frame2im)
-
-@DOCSTRING(im2frame)
-
 @node Axis Configuration
 @subsubsection Axis Configuration
 
 The axis function may be used to change the axis limits of an existing
 plot and various other axis properties, such as the aspect ratio and the
 appearance of tic marks.
 
 @DOCSTRING(axis)
diff --git a/scripts/plot/util/frame2im.m b/scripts/image/frame2im.m
rename from scripts/plot/util/frame2im.m
rename to scripts/image/frame2im.m
--- a/scripts/plot/util/frame2im.m
+++ b/scripts/image/frame2im.m
@@ -44,31 +44,31 @@ function [x, map] = frame2im (frame)
   n = numel (frame);
   if (n == 0)
     error ("frame2im: FRAME is empty");
   else
     x   = [frame.cdata];
     map = frame(1).colormap;
   endif
 
-  ## support for N dimensional images if we receive a struct array
+  ## support for N-dimensional images if we receive a struct array
   if (n > 1)
     x = reshape (x, rows (x), columns (x) / n, n, size (frame(1).cdata, 3));
     x = permute (x, [1 2 4 3]);
   endif
 
 endfunction
 
 
 %!function f = make_rgb_f ()
 %!  f = randi ([0 255], 10, 20, 3);
 %!endfunction
 
 %!function f = make_ind_f ()
-%!  f = randi ([1 100], 10, 20, 3);
+%!  f = randi ([1 100], 10, 20, 2);
 %!endfunction
 
 %!test
 %! x = make_ind_f ();
 %! cmap = jet (100);
 %! frame = struct ("cdata", x, "colormap", cmap);
 %! [rx, rcmap] = frame2im (frame);
 %! assert (rx, x);
diff --git a/scripts/plot/util/im2frame.m b/scripts/image/im2frame.m
rename from scripts/plot/util/im2frame.m
rename to scripts/image/im2frame.m
--- a/scripts/plot/util/im2frame.m
+++ b/scripts/image/im2frame.m
@@ -29,17 +29,17 @@
 ## along the fourth dimension.  In such cases, the returned value is a struct
 ## array.
 ##
 ## @seealso{frame2im}
 ## @end deftypefn
 
 ## Author: CarnÃ« Draug <carandraug@octave.org>
 
-function [frame] = im2frame (x, map = [])
+function frame = im2frame (x, map = [])
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   elseif (ndims (x) > 4)
     error ("im2frame: X and RGB must be a single image");
   endif
 
   ## Matlab documentation is incorrect.  Singleton 3rd dimension will error
@@ -53,32 +53,32 @@ function [frame] = im2frame (x, map = []
     if (nargin < 2)
       error ("im2frame: MAP required for indexed images");
     endif
     [x, map] = ind2x ("im2frame", x, map);
   else
     error ("im2frame: first argument must be indexed or RGB image");
   endif
 
-  ## support N dimensional images and return a struct array
+  ## support N-dimensional images and return a struct array
   if (ndims (x) == 4)
     x = reshape (num2cell (x, [1 2 3]), 1, size (x, 4));
   endif
 
   frame = struct ("cdata", x, "colormap", map);
 
 endfunction
 
 
 %!function f = make_rgb_f ()
 %!  f = randi ([0 255], 10, 20, 3);
 %!endfunction
 
 %!function f = make_ind_f ()
-%!  f = randi ([1 100], 10, 20, 3);
+%!  f = randi ([1 100], 10, 20, 1);
 %!endfunction
 
 %!test
 %! rgb = make_rgb_f ();
 %! assert (im2frame (rgb), struct ("cdata", rgb, "colormap", []));
 
 %!test
 %! ind = make_ind_f ();
diff --git a/scripts/optimization/fminsearch.m b/scripts/optimization/fminsearch.m
--- a/scripts/optimization/fminsearch.m
+++ b/scripts/optimization/fminsearch.m
@@ -324,30 +324,40 @@ function [x, fmax, nf] = nmsmax (fun, x,
 
 endfunction
 
 ## A helper function that evaluates a function and checks for bad results.
 function y = guarded_eval (fun, x)
 
   y = fun (x);
 
-  if (! (isreal (f)))
+  if (! (isreal (y)))
     error ("fminsearch:notreal", "fminsearch: non-real value encountered");
-  elseif (any (isnan (f(:))))
+  elseif (any (isnan (y(:))))
     error ("fminsearch:isnan", "fminsearch: NaN value encountered");
-  elseif (any (isinf (f(:))))
+  elseif (any (isinf (y(:))))
     error ("fminsearch:isinf", "fminsearch: Inf value encountered");
   endif
 
 endfunction
 
 
 %!demo
-%! fcn = @(x) (x(1)-5).^2 + (x(2)-8).^4
+%! fcn = @(x) (x(1)-5).^2 + (x(2)-8).^4;
 %! x0 = [0;0];
 %! [xmin, fval] = fminsearch (fcn, x0)
 
-%!assert (fminsearch (@sin, 3, optimset ("MaxIter", 3)), 4.8750, 1e-4)
-%!assert (fminsearch (@sin, 3, optimset ("MaxIter", 30)), 4.7124, 1e-4)
-%!shared c
+%!assert (fminsearch (@sin, 3, optimset ("MaxIter", 30)), 3*pi/2, 1e-4)
+%!test
 %! c = 1.5;
-%!assert (fminsearch (@(x) x(1).^2+c*x(2).^2,[1;1]), [0;0], 1e-4)
+%! assert (fminsearch (@(x) x(1).^2+c*x(2).^2,[1;1]), [0;0], 1e-4);
+
+%!error fminsearch ()
+%!error fminsearch (1)
 
+## Tests for guarded_eval
+%!error <non-real value encountered>
+%! fminsearch (@(x) ([0 2i]), 0, optimset ("FunValCheck", "on"));
+%!error <NaN value encountered>
+%! fminsearch (@(x) (NaN), 0, optimset ("FunValCheck", "on"));
+%!error <Inf value encountered>
+%! fminsearch (@(x) (Inf), 0, optimset ("FunValCheck", "on"));
+
