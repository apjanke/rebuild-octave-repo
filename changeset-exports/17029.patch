# HG changeset patch
# User John Donoghue <john.donoghue@ieee.org>
# Date 1374372831 14400
#      Sat Jul 20 22:13:51 2013 -0400
# Node ID 359c5ca795cd15b80302391a64608deec640cdba
# Parent  89acf2cd914993cda09c8fcc9e1fd657d80734b5
Display doc info pages using documentation browser when in GUI mode (Bug #39451)

* scripts/help/doc.m: call __octave_link_show_doc if in gui mode.

* libinterp/corefcn/octave-link.h, libinterp/corefcn/octave-link.cc
  (octave_link::show_doc): New function.
  (octave_link::do_show_doc): New virtual function.
  (__octave_link_show_doc__): New function.

* libgui/src/octave-qt-link.h
  (octave_qt_link::show_doc_signal): New signal.
  (octave_qt_link::do_show_doc): New function.

* libgui/src/documentation-dock-widget.cc, libgui/src/documentation-dock-widget.h
  (documentation_dock_widget::showDoc): New function.

* libgui/src/main-window.cc, libgui/src/main-window.h
  (main_window::construct_octave_qt_link): connect handle_show_doc.
  (main_window::handle_show_doc): New function.
  (main_window::show_doc_signal): New signal.

* libgui/src/qtinfo/parser.cc, libgui/src/qtinfo/parser.h
  (parser::find_ref): New function.

* libgui/src/qtinfo/webinfo.cc, libgui/src/qtinfo/webinfo.h
  (webinfo::load_ref): New function.

diff --git a/libgui/src/documentation-dock-widget.cc b/libgui/src/documentation-dock-widget.cc
--- a/libgui/src/documentation-dock-widget.cc
+++ b/libgui/src/documentation-dock-widget.cc
@@ -31,20 +31,28 @@ documentation_dock_widget::documentation
 {
   setObjectName ("DocumentationDockWidget");
   setWindowIcon (QIcon (":/actions/icons/logo.png"));
   set_title (tr ("Documentation"));
   setStatusTip (tr ("See the documentation for help."));
 
   _webinfo = new webinfo (this);
   setWidget (_webinfo);
+
+  connect (p, SIGNAL(show_doc_signal(const QString &)),
+   this, SLOT(showDoc(const QString &)));
 }
 
 void
 documentation_dock_widget::copyClipboard ()
 {
   _webinfo->copyClipboard ();
 }
 void
 documentation_dock_widget::pasteClipboard ()
 {
   _webinfo->pasteClipboard ();
 }
+void
+documentation_dock_widget::showDoc (const QString &name)
+{
+  _webinfo->load_ref (name);
+}
diff --git a/libgui/src/documentation-dock-widget.h b/libgui/src/documentation-dock-widget.h
--- a/libgui/src/documentation-dock-widget.h
+++ b/libgui/src/documentation-dock-widget.h
@@ -34,14 +34,15 @@ class documentation_dock_widget : public
 public:
 
   documentation_dock_widget (QWidget *parent = 0);
 
 protected slots:
   void copyClipboard ();
   void pasteClipboard ();
 
+  void showDoc (const QString & name);
 private:
 
   webinfo *_webinfo;
 };
 
 #endif // DOCUMENTATIONDOCKWIDGET_H
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -933,16 +933,20 @@ main_window::construct_octave_qt_link (v
            this,
            SLOT (handle_delete_debugger_pointer_request (const QString&, int)));
 
   connect (_octave_qt_link,
            SIGNAL (update_breakpoint_marker_signal (bool, const QString&, int)),
            this,
            SLOT (handle_update_breakpoint_marker_request (bool, const QString&, int)));
 
+  connect (_octave_qt_link,
+           SIGNAL (show_doc_signal (const QString &)),
+           this, SLOT (handle_show_doc (const QString &)));
+
   connect (_workspace_model,
            SIGNAL (rename_variable (const QString&, const QString&)),
            this,
            SLOT (handle_rename_variable_request (const QString&,
                                                  const QString&)));
 
   _octave_qt_link->execute_interpreter ();
 
@@ -1607,8 +1611,17 @@ main_window::set_global_shortcuts (bool 
       _exit_action->setShortcut (no_key);
 
       _find_files_action->setShortcut (no_key);
 
     }
 
   emit set_widget_shortcuts_signal (set_shortcuts);
 }
+
+void
+main_window::handle_show_doc (const QString& file)
+{
+  doc_browser_window->setVisible (true);
+  emit show_doc_signal (file);
+}
+
+
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -77,16 +77,18 @@ public:
 
   void focus_command_window (void);
 
 signals:
   void settings_changed (const QSettings *);
   void new_file_signal (const QString&);
   void open_file_signal (const QString&);
 
+  void show_doc_signal (const QString&);
+
   void insert_debugger_pointer_signal (const QString& file, int line);
   void delete_debugger_pointer_signal (const QString& file, int line);
   void update_breakpoint_marker_signal (bool insert, const QString& file,
                                         int line);
 
   void copyClipboard_signal (void);
   void pasteClipboard_signal (void);
 
@@ -166,16 +168,18 @@ public slots:
                                   const QFloatList&, const QFloatList&,
                                   const QStringList&);
 
   void handle_create_filedialog (const QStringList &filters, 
                                  const QString& title, const QString& filename, 
                                  const QString &dirname,
                                  const QString& multimode);
 
+  void handle_show_doc (const QString &file);
+
   // find files dialog 
   void find_files(const QString &startdir=QDir::currentPath());
   void find_files_finished(int);
 
   // setting global shortcuts
   void set_global_shortcuts (bool enable);
 
 protected:
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -493,9 +493,15 @@ octave_qt_link::file_in_path (const std:
 }
 
 void
 octave_qt_link::do_show_preferences ()
 {
   emit show_preferences_signal ();
 }
 
+void
+octave_qt_link::do_show_doc (const std::string& file)
+{
+  emit show_doc_signal (QString::fromStdString (file));
+}
 
+
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -117,16 +117,18 @@ public:
   void do_update_breakpoint (bool insert, const std::string& file, int line);
 
   void do_set_default_prompts (std::string& ps1, std::string& ps2,
                                std::string& ps4);
 
   static bool file_in_path (const std::string& file, const std::string& dir);
 
   void do_show_preferences (void);
+
+  void do_show_doc (const std::string& file);
 private:
 
   // No copying!
 
   octave_qt_link (const octave_qt_link&);
 
   octave_qt_link& operator = (const octave_qt_link&);
 
@@ -164,11 +166,13 @@ signals:
 
   void update_breakpoint_marker_signal (bool insert, const QString& file,
                                         int line);
 
   void insert_debugger_pointer_signal (const QString&, int);
   void delete_debugger_pointer_signal (const QString&, int);
 
   void show_preferences_signal (void);
+
+  void show_doc_signal (const QString &file);
 };
 
 #endif
diff --git a/libgui/src/qtinfo/parser.cc b/libgui/src/qtinfo/parser.cc
--- a/libgui/src/qtinfo/parser.cc
+++ b/libgui/src/qtinfo/parser.cc
@@ -587,8 +587,29 @@ parser::global_search (const QString& te
         }
       io->close ();
       delete io;
     }
 
   results.append ("</body></html>");
   return results;
 }
+
+QString 
+parser::find_ref (const QString &ref_name)
+{
+  QString text = "";
+
+  QHash<QString,node_position>::iterator it;
+  for (it=_ref_map.begin ();it!=_ref_map.end ();++it)
+    {
+      QString k = it.key ();
+      node_position p = it.value ();
+
+      if (k == "docX" + ref_name)
+        {
+          // found ref, so return its name
+          text = "docX" + ref_name;
+        }
+    }
+  return text;
+}
+
diff --git a/libgui/src/qtinfo/parser.h b/libgui/src/qtinfo/parser.h
--- a/libgui/src/qtinfo/parser.h
+++ b/libgui/src/qtinfo/parser.h
@@ -52,16 +52,18 @@ class parser
 
 public:
   parser (QObject *parent = 0);
   void set_info_path (const QString& _info_path);
   QString get_info_path ();
   QString search_node (const QString& node);
   QString global_search (const QString& text, int maxFounds);
 
+  QString find_ref (const QString &name);
+
   /** Checks if this node is reference. If node is reference, it will be returned its position
     * in text, else  it will be returned -1.
     */
   int is_ref (const QString& node);
 
   /**Translates text of node to Html. If anchorPos is not -1, then anchor is inserted in that
     * position.
     */
diff --git a/libgui/src/qtinfo/webinfo.cc b/libgui/src/qtinfo/webinfo.cc
--- a/libgui/src/qtinfo/webinfo.cc
+++ b/libgui/src/qtinfo/webinfo.cc
@@ -88,16 +88,17 @@ webinfo::webinfo (QWidget *p)
   connect (_tab_bar, SIGNAL (currentChanged (int)), this, SLOT (current_tab_changed (int)));
   connect (_zoom_in_button, SIGNAL (clicked ()), this, SLOT (zoom_in ()));
   connect (_zoom_out_button, SIGNAL (clicked ()), this, SLOT (zoom_out ()));
   connect (_search_line_edit, SIGNAL (returnPressed ()), this, SLOT (search ()));
 
   resize (500, 300);
 
   set_info_path (QString::fromStdString (Vinfo_file));
+
 }
 
 void
 webinfo::set_info_path (const QString& info_path)
 {
   _parser.set_info_path (info_path);
   load_node ("Top");
 }
@@ -185,16 +186,31 @@ webinfo::close_tab (int index)
       _stacked_widget->removeWidget (w);
       delete w;
 
       _tab_bar->removeTab (index);
     }
 }
 
 void
+webinfo::load_ref (const QString &ref_name)
+{
+  QString text = _parser.find_ref (ref_name);
+  if (text.length () > 0)
+    {
+      load_node (text);
+    }
+  else
+    {
+      // not found
+     load_node("Top");
+    }
+}
+
+void
 webinfo::search ()
 {
   if (_search_check_box->isChecked ())
     {
       // Global search
       QString results = _parser.global_search (_search_line_edit->text (), 5);
       _text_browser=addNewTab ("Results for: " + _search_line_edit->text ());
       _text_browser->setHtml (results);
diff --git a/libgui/src/qtinfo/webinfo.h b/libgui/src/qtinfo/webinfo.h
--- a/libgui/src/qtinfo/webinfo.h
+++ b/libgui/src/qtinfo/webinfo.h
@@ -35,16 +35,18 @@ along with Octave; see the file COPYING.
 
 class webinfo : public QWidget
 {
   Q_OBJECT
 public:
   webinfo (QWidget *parent = 0);
   void set_info_path (const QString& info_path);
   void load_node (const QString& node_name);
+ 
+  void load_ref (const QString &ref_name); 
 
 public slots:
   void link_clicked (const QUrl& link);
   void current_tab_changed (int index);
   void close_tab (int index);
   void search ();
   void zoom_in ();
   void zoom_out ();
diff --git a/libinterp/corefcn/octave-link.cc b/libinterp/corefcn/octave-link.cc
--- a/libinterp/corefcn/octave-link.cc
+++ b/libinterp/corefcn/octave-link.cc
@@ -411,9 +411,27 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
   retval = octave_link::show_preferences ();
 
   return retval;
 }
 
+DEFUN (__octave_link_show_doc__, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} __octave_link_show_doc__ ( @var{filename} )\n\
+Undocumented internal function.\n\
+@end deftypefn")
+{
+  octave_value retval;
+  std::string file;
 
+  if (args.length () >= 1)
+    file = args(0).string_value();
+
+  retval = octave_link::show_doc (file);
+
+  return retval;
+}
+
+
+
diff --git a/libinterp/corefcn/octave-link.h b/libinterp/corefcn/octave-link.h
--- a/libinterp/corefcn/octave-link.h
+++ b/libinterp/corefcn/octave-link.h
@@ -314,16 +314,29 @@ public:
       { 
         instance->do_show_preferences ();
         return true;
       }
     else
       return false;
   }
 
+  static bool 
+  show_doc (const std::string & file)
+  {
+    if (enabled ())
+      { 
+        instance->do_show_doc (file);
+        return true;
+      }
+    else
+      return false;
+ 
+  }
+
 private:
 
   static octave_link *instance;
 
   // No copying!
 
   octave_link (const octave_link&);
 
@@ -434,11 +447,13 @@ protected:
 
   virtual void do_update_breakpoint (bool insert,
                                      const std::string& file, int line) = 0;
 
   virtual void do_set_default_prompts (std::string& ps1, std::string& ps2,
                                        std::string& ps4) = 0;
 
   virtual void do_show_preferences (void) = 0;
+
+  virtual void do_show_doc (const std::string &file) = 0;
 };
 
 #endif // OCTAVELINK_H
diff --git a/scripts/help/doc.m b/scripts/help/doc.m
--- a/scripts/help/doc.m
+++ b/scripts/help/doc.m
@@ -48,63 +48,70 @@ function retval = doc (fname)
         ftype = exist (fname);
       else
         error ("doc: expecting argument to be a character string");
       endif
     else
       fname = "";
     endif
 
-    if (ftype == 2 || ftype == 3)
-      ffile = which (fname);
-    else
-      ffile = "";
-    endif
-
-    if (isempty (ffile))
-      info_dir = octave_config_info ("infodir");
+    # if GUI is running, let it display the function
+    if isguirunning ()
+      __octave_link_show_doc__ (fname);
     else
-      info_dir = fileparts (ffile);
-    endif
-
-    ## Determine if a file called doc.info exist in the same
-    ## directory as the function.
+  
+      if (ftype == 2 || ftype == 3)
+        ffile = which (fname);
+      else
+        ffile = "";
+      endif
 
-    info_file_name = fullfile (info_dir, "doc.info");
-
-    [stat_info, err] = stat (info_file_name);
+      if (isempty (ffile))
+        info_dir = octave_config_info ("infodir");
+      else
+        info_dir = fileparts (ffile);
+      endif
 
-    if (err < 0)
-      info_file_name = info_file ();
-    endif
+      ## Determine if a file called doc.info exist in the same
+      ## directory as the function.
+
+      info_file_name = fullfile (info_dir, "doc.info");
+
+      [stat_info, err] = stat (info_file_name);
 
-    ## FIXME -- don't change the order of the arguments below because
-    ## the info-emacs-info script currently expects --directory DIR as
-    ## the third and fourth arguments.  Someone should fix that.
+      if (err < 0)
+        info_file_name = info_file ();
+      endif
+
+      ## FIXME -- don't change the order of the arguments below because
+      ## the info-emacs-info script currently expects --directory DIR as
+      ## the third and fourth arguments.  Someone should fix that.
+
+      cmd = sprintf ("\"%s\" --file \"%s\" --directory \"%s\"",
+                     info_program (), info_file_name, info_dir);
+
+      have_fname = ! isempty (fname);
 
-    cmd = sprintf ("\"%s\" --file \"%s\" --directory \"%s\"",
-                   info_program (), info_file_name, info_dir);
+      if (have_fname)
+        status = system (sprintf ("%s --index-search \"%s\"", cmd, fname));
+      endif
+   
 
-    have_fname = ! isempty (fname);
+      if (! (have_fname && status == 0))
+        status = system (cmd);
+        if (status == 127)
+          warning ("unable to find info program '%s'", info_program ());
+        endif
+      endif
 
-    if (have_fname)
-      status = system (sprintf ("%s --index-search \"%s\"", cmd, fname));
+      if (nargout > 0)
+        retval = status;
+      endif
+
     endif
-
-    if (! (have_fname && status == 0))
-      status = system (cmd);
-      if (status == 127)
-        warning ("unable to find info program '%s'", info_program ());
-      endif
-    endif
-
-    if (nargout > 0)
-      retval = status;
-    endif
-
   else
     print_usage ();
   endif
 
 endfunction
 
 
 %!test
