# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1423320108 -3600
#      Sat Feb 07 15:41:48 2015 +0100
# Node ID e7df12f37f7166c827faa2d64f2b2373dc54774e
# Parent  409d82472aee386c887851cfad95bf91c064a088
Freset: avoid multiple reseting of properties (bug #43960)

* graphics.in.h (base_graphics_object::get_defaults_list): new method
* graphics.in.h (base_graphics_object::build_user_defaults_map): declare new method
* graphics.in.h (graphics_object::get_defaults_list): new method
* graphics.in.h (graphics_object::build_user_defaults_map): new method
* graphics.in.h (root_figure::get_defaults_list, figure::get_defaults_list, axes::get_defaults_list, uitoolbar::get_defaults_list): new methods

* graphics.cc (base_graphics_object::build_user_defaults_map): build a list of all local and ancestor defaults.
* graphics.cc (xreset_default_properties): use build_user_defaults_map method to replace factory defaults by those defined in user defaults map
* graphics.cc (base_graphics_object::reset_default_properties, root_figure::reset_default_properties, figure::reset_default_properties): remove override_default.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -2782,18 +2782,29 @@ base_graphics_toolkit::finalize (const g
 }
 
 static void
 xreset_default_properties (graphics_handle gh,
                            property_list::pval_map_type factory_pval)
 {
   graphics_object obj = gh_manager::get_object (gh);
 
+  // Replace factory defaults by user defined ones
+  std::string go_name = obj.get_properties ().graphics_object_name ();
   property_list::pval_map_type pval;
-
+  obj.build_user_defaults_map (pval, go_name);
+
+  for (property_list::pval_map_const_iterator p = pval.begin ();
+       p != pval.end (); p++)
+    {
+      factory_pval[p->first] = p->second;
+    }
+
+
+  // Reset defaults
   for (property_list::pval_map_const_iterator it = factory_pval.begin ();
        it != factory_pval.end (); it++)
     {
       std::string pname = it->first;
 
       // Don't reset internal properties and handle_properties
       if (! obj.has_readonly_property (pname) &&
           pname.find ("__") != 0 && pname.find ("current") != 0 &&
@@ -3155,28 +3166,52 @@ base_graphics_object::remove_all_listene
 
       property p = get_properties ().get_property (pa->first);
 
       if (! error_state && p.ok ())
         p.delete_listener ();
     }
 }
 
+void 
+base_graphics_object::build_user_defaults_map (property_list::pval_map_type &def, const std::string go_name) const
+{
+  property_list local_defaults = get_defaults_list ();
+  property_list::plist_map_const_iterator p = 
+    local_defaults.find (go_name);
+  
+  if (p != local_defaults.end ())
+    {
+      property_list::pval_map_type pval = p->second;
+      for (property_list::pval_map_const_iterator q = pval.begin ();
+           q != pval.end (); q++)
+        {
+          std::string pname = q->first;
+          if (def.find (pname) == def.end ())
+            def[pname] = q->second;
+        }
+    }
+
+  graphics_object parent_obj = gh_manager::get_object (get_parent ());
+
+  if (parent_obj)
+    parent_obj.build_user_defaults_map (def, go_name);
+
+}
+
 void
 base_graphics_object::reset_default_properties (void)
   {
     if (valid_object ())
       {
         property_list::pval_map_type factory_pval =
           gh_manager::get_object (0).get_factory_defaults_list ()
           .find (type ())->second;
 
         xreset_default_properties (get_handle (), factory_pval);
-
-        override_defaults (*this);
       }
   }
 
 std::string
 base_graphics_object::values_as_string (void)
 {
   std::string retval;
 
@@ -4563,24 +4598,18 @@ figure::reset_default_properties (void)
 
   property_list::pval_map_type plist = xproperties.factory_defaults ();
   plist.erase ("units");
   plist.erase ("position");
   plist.erase ("outerposition");
   plist.erase ("paperunits");
   plist.erase ("paperposition");
   plist.erase ("windowstyle");
+
   xreset_default_properties (get_handle (), plist);
-
-  // FIXME: the following short sleep is needed in order
-  //        to avoid a crash when using qt toolkit
-  Fsleep (octave_value (0.001));
-
-  // override with parents' defaults
-  override_defaults (*this);
 }
 
 // ---------------------------------------------------------------------
 
 void
 axes::properties::init (void)
 {
   position.add_constraint (dim_vector (1, 4));
@@ -8963,19 +8992,16 @@ uitoolbar::get_default (const caseless_s
 void
 uitoolbar::reset_default_properties (void)
 {
   // empty list of local defaults
   default_properties = property_list ();
 
   xreset_default_properties (get_handle (),
                              xproperties.factory_defaults ());
-
-  // override with parents' defaults
-  override_defaults (*this);
 }
 
 // ---------------------------------------------------------------------
 
 octave_value
 base_graphics_object::get_default (const caseless_str& name) const
 {
   graphics_handle parent = get_parent ();
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -2699,16 +2699,19 @@ public:
 
   virtual void override_defaults (base_graphics_object& obj)
   {
     if (valid_object ())
       get_properties ().override_defaults (obj);
     else
       error ("base_graphics_object::override_defaults: invalid graphics object");
   }
+  
+  void build_user_defaults_map (property_list::pval_map_type &def,
+                                const std::string go_name) const;
 
   virtual void set_from_list (property_list& plist)
   {
     if (valid_object ())
       get_properties ().set_from_list (*this, plist);
     else
       error ("base_graphics_object::set_from_list: invalid graphics object");
   }
@@ -2752,16 +2755,23 @@ public:
 
   virtual octave_value get_factory_default (const caseless_str&) const;
 
   virtual octave_value get_defaults (void) const
   {
     error ("base_graphics_object::get_defaults: invalid graphics object");
     return octave_value ();
   }
+  
+  virtual property_list get_defaults_list (void) const
+  {
+    if (! valid_object ())
+      error ("base_graphics_object::get_defaults_list: invalid graphics object");
+    return property_list ();
+  }
 
   virtual octave_value get_factory_defaults (void) const
   {
     error ("base_graphics_object::get_factory_defaults: invalid graphics object");
     return octave_value ();
   }
 
   virtual property_list get_factory_defaults_list (void) const
@@ -2978,16 +2988,22 @@ public:
 
   void mark_modified (void) { rep->mark_modified (); }
 
   void override_defaults (base_graphics_object& obj)
   {
     rep->override_defaults (obj);
   }
 
+  void build_user_defaults_map (property_list::pval_map_type &def,
+                                const std::string go_name) const
+  {
+    rep->build_user_defaults_map (def, go_name);
+  }
+
   void set_from_list (property_list& plist) { rep->set_from_list (plist); }
 
   void set (const caseless_str& name, const octave_value& val)
   {
     rep->set (name, val);
   }
 
   void set (const octave_value_list& args);
@@ -3029,16 +3045,21 @@ public:
 
   octave_value get_factory_default (const caseless_str& name) const
   {
     return rep->get_factory_default (name);
   }
 
   octave_value get_defaults (void) const { return rep->get_defaults (); }
 
+  property_list get_defaults_list (void) const
+  {
+    return rep->get_defaults_list ();
+  }
+
   octave_value get_factory_defaults (void) const
   {
     return rep->get_factory_defaults ();
   }
 
   property_list get_factory_defaults_list (void) const
   {
     return rep->get_factory_defaults_list ();
@@ -3283,16 +3304,21 @@ public:
     return retval;
   }
 
   octave_value get_defaults (void) const
   {
     return default_properties.as_struct ("default");
   }
 
+  property_list get_defaults_list (void) const
+  {
+    return default_properties;
+  }
+
   octave_value get_factory_defaults (void) const
   {
     return factory_properties.as_struct ("factory");
   }
 
   property_list get_factory_defaults_list (void) const
   {
     return factory_properties;
@@ -3539,16 +3565,21 @@ public:
 
   octave_value get_default (const caseless_str& name) const;
 
   octave_value get_defaults (void) const
   {
     return default_properties.as_struct ("default");
   }
 
+  property_list get_defaults_list (void) const
+  {
+    return default_properties;
+  }
+
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
 
   void reset_default_properties (void);
 
@@ -4278,16 +4309,21 @@ public:
 
   octave_value get_default (const caseless_str& name) const;
 
   octave_value get_defaults (void) const
   {
     return default_properties.as_struct ("default");
   }
 
+  property_list get_defaults_list (void) const
+  {
+    return default_properties;
+  }
+
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   void update_axis_limits (const std::string& axis_type);
 
   void update_axis_limits (const std::string& axis_type,
                            const graphics_handle& h);
@@ -5590,16 +5626,21 @@ public:
 
   octave_value get_default (const caseless_str& name) const;
 
   octave_value get_defaults (void) const
   {
     return default_properties.as_struct ("default");
   }
 
+  property_list get_defaults_list (void) const
+  {
+    return default_properties;
+  }
+
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
 
   void reset_default_properties (void);
 
