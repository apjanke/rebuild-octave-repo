# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1205202289 14400
#      Mon Mar 10 22:24:49 2008 -0400
# Node ID 7ebdc99a0babb6a33a585337b9e5165801c383ae
# Parent  d20a2f261306cf26375717c45d40736fb1c0a1ac
new isfloat function

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,21 @@
 2008-03-10  John W. Eaton  <jwe@octave.org>
 
+	* data.cc (Fisfloat): New function.
+	* ov.h (octave_value::is_float_type): Ditto.
+	* ov-base.h (octave_base_value::is_float_type): Ditto.
+	* ov-complex.h (octave_complex): Ditto.
+	* ov-cx-mat.h (octave_complex_matrix): Ditto.
+	* ov-cx-sparse.h (octave_sparse_complex_matrix): Ditto.
+	* ov-range.h (octave_range): Ditto.
+	* ov-re-mat.h (octave_matrix): Ditto.
+	* ov-re-sparse.h (octave_sparse_matrix): Ditto.
+	* ov-scalar.h (octave_scalar): Ditto.
+
 	* mxarray.h.in (mxLogical): Use unsigned char instead of int.
 	From Antwerpen, G. (Gert) van <gert.vanantwerpen@tno.nl>.
 
 2008-03-07  John W. Eaton  <jwe@octave.org>
 
 	* ov-struct.cc (octave_struct::print_raw): Don't print contents fo
 	struct arrays that have more than one element.
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1865,16 +1865,32 @@ Return true if @var{x} is a complex-valu
   if (args.length () == 1)
     retval = args(0).is_complex_type ();
   else
     print_usage ();
 
   return retval;
 }
 
+DEFUN (isfloat, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} isfloat (@var{x})\n\
+Return true if @var{x} is a floating-point numeric object.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 1)
+    retval = args(0).is_float_type ();
+  else
+    print_usage ();
+
+  return retval;
+}
+
 // FIXME -- perhaps this should be implemented with an
 // octave_value member function?
 
 DEFUN (complex, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} complex (@var{val})\n\
 @deftypefnx {Built-in Function} {} complex (@var{re}, @var{im})\n\
 Convert @var{x} to a complex value.\n\
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -237,16 +237,18 @@ public:
   virtual octave_value all (int = 0) const;
 
   virtual octave_value any (int = 0) const;
 
   virtual bool is_double_type (void) const { return false; }
 
   virtual bool is_single_type (void) const { return false; }
 
+  virtual bool is_float_type (void) const { return false; }
+
   virtual bool is_int8_type (void) const { return false; }
 
   virtual bool is_int16_type (void) const { return false; }
 
   virtual bool is_int32_type (void) const { return false; }
 
   virtual bool is_int64_type (void) const { return false; }
 
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -86,16 +86,18 @@ public:
     }
 
   bool is_complex_scalar (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
+  bool is_float_type (void) const { return true; }
+
   // FIXME ???
   bool valid_as_scalar_index (void) const { return false; }
   bool valid_as_zero_index (void) const { return false; }
 
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -93,16 +93,18 @@ public:
   void assign (const octave_value_list& idx, const NDArray& rhs);
 
   bool is_complex_matrix (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
+  bool is_float_type (void) const { return true; }
+
   bool valid_as_scalar_index (void) const;
 
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const;
diff --git a/src/ov-cx-sparse.h b/src/ov-cx-sparse.h
--- a/src/ov-cx-sparse.h
+++ b/src/ov-cx-sparse.h
@@ -99,16 +99,18 @@ public:
   void assign (const octave_value_list& idx, const SparseMatrix& rhs);
 
   bool is_complex_matrix (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
+  bool is_float_type (void) const { return true; }
+
   bool valid_as_scalar_index (void) const;
 
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const;
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -138,16 +138,18 @@ public:
   octave_value sort (Array<octave_idx_type>& sidx, octave_idx_type dim = 0,
 		     sortmode mode = ASCENDING) const
     { return range.sort (sidx, dim, mode); }
 
   bool is_real_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
+  bool is_float_type (void) const { return true; }
+
   bool valid_as_scalar_index (void) const
     {
       double b = range.base ();
       return (range.nelem () == 1
 	      && ! xisnan (b) && D_NINT (b) == b && NINTbig (b) == 1);
     }
 
   bool valid_as_zero_index (void) const
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -92,16 +92,18 @@ public:
   idx_vector index_vector (void) const { return idx_vector (matrix); }
 
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
+  bool is_float_type (void) const { return true; }
+
   bool valid_as_scalar_index (void) const;
 
   int8NDArray
   int8_array_value (void) const { return int8NDArray (matrix); }
 
   int16NDArray
   int16_array_value (void) const { return int16NDArray (matrix); }
 
diff --git a/src/ov-re-sparse.h b/src/ov-re-sparse.h
--- a/src/ov-re-sparse.h
+++ b/src/ov-re-sparse.h
@@ -95,16 +95,18 @@ public:
   idx_vector index_vector (void) const;
 
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
+  bool is_float_type (void) const { return true; }
+
   bool valid_as_scalar_index (void) const;
 
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const;
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -82,16 +82,18 @@ public:
     { return (scalar != 0 && ! lo_ieee_isnan (scalar)); }
 
   bool is_real_scalar (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
+  bool is_float_type (void) const { return true; }
+
   bool valid_as_scalar_index (void) const
     {
       return (! xisnan (scalar)
 	      && D_NINT (scalar) == scalar
 	      && NINTbig (scalar) == 1);
     }
 
   bool valid_as_zero_index (void) const
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -477,16 +477,19 @@ public:
   // Floating point types.
 
   bool is_double_type (void) const
     { return rep->is_double_type (); }
 
   bool is_single_type (void) const
     { return rep->is_single_type (); }
 
+  bool is_float_type (void) const
+    { return rep->is_float_type (); }
+
   // Integer types.
 
   bool is_int8_type (void) const
     { return rep->is_int8_type (); }
 
   bool is_int16_type (void) const
     { return rep->is_int16_type (); }
 
