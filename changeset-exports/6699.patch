# HG changeset patch
# User jwe
# Date 1181681283 0
#      Tue Jun 12 20:48:03 2007 +0000
# Node ID 3f4ccca056124f14ab541141cf29eeb2bc6a54ca
# Parent  6d366791e1325f0f5c8d405cb08e9eb20799e0ae
[project @ 2007-06-12 20:48:02 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2614,16 +2614,19 @@ static double padec [] =
 
 ComplexMatrix
 ComplexMatrix::expm (void) const
 {
   ComplexMatrix retval;
 
   ComplexMatrix m = *this;
 
+  if (numel () == 1)
+    return ComplexMatrix (1, 1, exp (m(0)));
+
   octave_idx_type nc = columns ();
 
   // Preconditioning step 1: trace normalization to reduce dynamic
   // range of poles, but avoid making stable eigenvalues unstable.
 
   // trace shift value
   Complex trshift = 0.0;
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,11 +1,12 @@
-2007-06-04  David Bateman  <dbateman@free.fr>
-
-	* file-ops.cc: Typo.
+2007-06-12  John W. Eaton  <jwe@octave.org>
+
+	* dMatrix.cc (Matrix::expm): Special case for scalar arg.
+	* CMatrix.cc (ComplexMatrix::expm): Likewise.
 
 2007-06-06  Michael Goffioul  <michael.goffioul@swing.be>
 
 	* file-ops.cc: Include sys/stat.h, fcntl.h, and utime.h or
 	sys/utime.h if they are available.
 	If _chmod is available but chmod is not, define chmod to _chmod
 	and define HAVE_CHMOD.  Likewise for utime and utimbuf.
 	If _S_IFMT is defined but S_IFMT is not, define S_IFMT to _S_IFMT.
@@ -13,16 +14,18 @@ 2007-06-06  Michael Goffioul  <michael.g
 	(tilde_find_suffix, isolate_tilde_prefix, tilde_expand_word):
 	Use file_ops::is_dir_sep instead of comparing with
 	file_ops::dir_sep_char.
 
 	* MArray-C.cc: Sprinkle with OCTINTERP_API as needed.
 
 2007-06-04  David Bateman  <dbateman@free.fr>
 
+	* file-ops.cc: Typo.
+
 	* Sparse.cc (Sparse<T> Sparse<T>::reshape): If length of new
 	dimensions is greater than 2, collapse to 2-D.
 
 2007-06-02  David Bateman  <dbateman@free.fr>
 
 	* SparseCmplxQR.cc: Changes to support CXSparse 2.2.0.
 
 2007-05-31  John W. Eaton  <jwe@octave.org>
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2247,16 +2247,19 @@ static double padec [] =
 
 Matrix
 Matrix::expm (void) const
 {
   Matrix retval;
 
   Matrix m = *this;
 
+  if (numel () == 1)
+    return Matrix (1, 1, exp (m(0)));
+
   octave_idx_type nc = columns ();
 
   // Preconditioning step 1: trace normalization to reduce dynamic
   // range of poles, but avoid making stable eigenvalues unstable.
 
   // trace shift value
   volatile double trshift = 0.0;
 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2007-06-12  Søren Hauberg  <soren@hauberg.org>
+
+	* plot/fplot.m: If function is inline, vectorize it.
+
 2007-06-10  David Bateman  <dbateman@free.fr>
 
 	* pkg/pkg.m (pkg:installed_packages): truncate start of package
 	directory if need to, so that it fits on a line.
 	
 2007-06-07  David Bateman  <dbateman@free.fr>
 
 	* pkg/pkg.m (pkg): For rebuild target, force package order in
diff --git a/scripts/plot/fplot.m b/scripts/plot/fplot.m
--- a/scripts/plot/fplot.m
+++ b/scripts/plot/fplot.m
@@ -15,48 +15,54 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} fplot (@var{fn}, @var{limits})
 ## @deftypefnx {Function File} {} fplot (@var{fn}, @var{limits}, @var{n})
-## Plots a function @var{fn}, within the defined limits. @var{fn}
+## Plot a function @var{fn}, within the defined limits.  @var{fn}
 ## an be either a string, a function handle or an inline function.
 ## The limits of the plot are given by @var{limits} of the form
 ## @code{[@var{xlo}, @var{xhi}]} or @code{[@var{xlo}, @var{xhi},
 ## @var{ylo}, @var{yhi}]}. @var{n} is the number of points to use and
 ## defaults to 100. 
 ##
 ## @example
-##    fplot('cos',[0,2*pi])
-##    fplot('[cos(x),sin(x)]',[0,2*pi])
+##    fplot ("cos", [0, 2*pi])
+##    fplot ("[cos(x), sin(x)]", [0, 2*pi])
 ## @end example
 ## @end deftypefn
 
 function fplot (fn, limits, n)
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
   if (nargin < 3) 
     n = 100; 
   endif
 
   x = linspace (limits(1), limits(2), n)';
 
-  if (isa (fn, "inline function") || isa (fn, "function_handle"))
+  nam = fn;
+  if (strcmp (typeinfo (fn), "inline function"))
+    fn = vectorize (fn);
     y = fn (x);
+    nam = formula (fn);
+  elseif (isa (fn, "function_handle"))
+    y = fn (x);
+    nam = func2str (fn);
   elseif (all (isalnum (fn)))
     y = feval (fn, x);
   else
-    finl = inline (fn);
+    finl = vectorize (inline (fn));
     y = finl (x);
   endif
 
   if (length (limits) > 2) 
     axis (limits);
   endif
 
-  plot (x, y, [";", fn, ";"]);
+  plot (x, y, [";", nam, ";"]);
 
 endfunction
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,12 @@
+2007-06-06  John W. Eaton  <jwe@octave.org>
+
+	* test_signal.m: Rename internal assert function to xassert.
+
 2007-04-26  David Bateman  <dbateman@free.fr>
 
 	* test_for.m: Add tests for multi-dimensional matrices and cell
 	arrays.
 
 2007-04-04  Rafael Laboissiere  <rafael@debian.org>
 
 	* Makefile.in (clean): Also remove a.wav file created by
diff --git a/test/test_signal.m b/test/test_signal.m
--- a/test/test_signal.m
+++ b/test/test_signal.m
@@ -118,17 +118,17 @@
 %! 
 %! S = kron(fft(sx)',fft(sy));
 %! answer=kron(sx',sy);
 %! s = ifft2(S);
 %! 
 %! assert(all( all( abs(s-answer) < 30*eps ) ));
 
 %% test/octave.test/signal/unwrap-1.m
-%!function t = assert(a,b,tol)
+%!function t = xassert(a,b,tol)
 %!  if (nargin == 1)
 %!    t = all(a(:));
 %!  else
 %!    if (nargin == 2)
 %!      tol = 0;
 %!    endif
 %!    if (any (size(a) != size(b)))
 %!      t = 0;
@@ -143,23 +143,23 @@
 %! 
 %! i = 0;
 %! t = [];
 %! 
 %! r = [0:100];                        # original vector
 %! w = r - 2*pi*floor((r+pi)/(2*pi));  # wrapped into [-pi,pi]
 %! tol = 1e3*eps;                      # maximum expected deviation
 %! 
-%! t(++i) = assert(r, unwrap(w), tol);               #unwrap single row
-%! t(++i) = assert(r', unwrap(w'), tol);             #unwrap single column
-%! t(++i) = assert([r',r'], unwrap([w',w']), tol);   #unwrap 2 columns
-%! t(++i) = assert([r;r], unwrap([w;w],[],2), tol);  #verify that dim works
-%! t(++i) = assert(r+10, unwrap(10+w), tol);         #verify that r(1)>pi works
+%! t(++i) = xassert(r, unwrap(w), tol);               #unwrap single row
+%! t(++i) = xassert(r', unwrap(w'), tol);             #unwrap single column
+%! t(++i) = xassert([r',r'], unwrap([w',w']), tol);   #unwrap 2 columns
+%! t(++i) = xassert([r;r], unwrap([w;w],[],2), tol);  #verify that dim works
+%! t(++i) = xassert(r+10, unwrap(10+w), tol);         #verify that r(1)>pi works
 %! 
-%! t(++i) = assert(w', unwrap(w',[],2));  #unwrap col by rows should not change it
-%! t(++i) = assert(w, unwrap(w,[],1));    #unwrap row by cols should not change it
-%! t(++i) = assert([w;w], unwrap([w;w])); #unwrap 2 rows by cols should not change them
+%! t(++i) = xassert(w', unwrap(w',[],2));  #unwrap col by rows should not change it
+%! t(++i) = xassert(w, unwrap(w,[],1));    #unwrap row by cols should not change it
+%! t(++i) = xassert([w;w], unwrap([w;w])); #unwrap 2 rows by cols should not change them
 %! 
 %! ## verify that setting tolerance too low will cause bad results.
-%! t(++i) = assert(any(abs(r - unwrap(w,0.8)) > 100));
+%! t(++i) = xassert(any(abs(r - unwrap(w,0.8)) > 100));
 %! 
 %! assert(all(t));
 
