# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1482814127 18000
#      Mon Dec 26 23:48:47 2016 -0500
# Node ID 92c9f8ec46879e7dec250471f816637e66d038e3
# Parent  f9e6259c5fc1bfefc01a25a287ea6aef52a1847d
fix compilation of __pchip_deriv__.cc

* __pcup_deriv__.cc: Use F77_INT in calls to Fortran subroutines.
* lo-slatec-proto.h (dpchim, pchim): Correct declarations.

diff --git a/libinterp/corefcn/__pchip_deriv__.cc b/libinterp/corefcn/__pchip_deriv__.cc
--- a/libinterp/corefcn/__pchip_deriv__.cc
+++ b/libinterp/corefcn/__pchip_deriv__.cc
@@ -50,78 +50,78 @@ Undocumented internal function.
 
   if (nargin >= 2)
     {
       if (args(0).is_single_type () || args(1).is_single_type ())
         {
           FloatColumnVector xvec (args(0).float_vector_value ());
           FloatMatrix ymat (args(1).float_matrix_value ());
 
-          octave_idx_type nx = xvec.numel ();
+          F77_INT nx = to_f77_int (xvec.numel ());
 
           if (nx < 2)
             error ("__pchip_deriv__: X must be at least of length 2");
 
           octave_idx_type nyr = ymat.rows ();
           octave_idx_type nyc = ymat.columns ();
 
           if (nx != (rows ? nyc : nyr))
             error ("__pchip_deriv__: X and Y dimension mismatch");
 
           FloatMatrix dmat (nyr, nyc);
 
-          octave_idx_type ierr;
-          const octave_idx_type incfd = rows ? nyr : 1;
+          F77_INT ierr;
+          const F77_INT incfd = rows ? to_f77_int (nyr) : 1;
           volatile const octave_idx_type inc = rows ? 1 : nyr;
           volatile octave_idx_type k = 0;
 
           for (volatile octave_idx_type i = (rows ? nyr : nyc); i > 0; i--)
             {
               F77_XFCN (pchim, PCHIM, (nx, xvec.data (),
                                        ymat.data () + k * inc,
                                        dmat.fortran_vec () + k * inc,
-                                       incfd, &ierr));
+                                       incfd, ierr));
 
               k++;
 
               if (ierr < 0)
                 error ("__pchip_deriv__: PCHIM failed with ierr = %i", ierr);
             }
 
           retval = dmat;
         }
       else
         {
           ColumnVector xvec (args(0).vector_value ());
           Matrix ymat (args(1).matrix_value ());
 
-          octave_idx_type nx = xvec.numel ();
+          F77_INT nx = to_f77_int (xvec.numel ());
 
           if (nx < 2)
             error ("__pchip_deriv__: X must be at least of length 2");
 
           octave_idx_type nyr = ymat.rows ();
           octave_idx_type nyc = ymat.columns ();
 
           if (nx != (rows ? nyc : nyr))
             error ("__pchip_deriv__: X and Y dimension mismatch");
 
           Matrix dmat (nyr, nyc);
 
-          octave_idx_type ierr;
+          F77_INT ierr;
           const octave_idx_type incfd = rows ? nyr : 1;
           volatile const octave_idx_type inc = rows ? 1 : nyr;
           volatile octave_idx_type k = 0;
 
           for (volatile octave_idx_type i = (rows ? nyr : nyc); i > 0; i--)
             {
               F77_XFCN (dpchim, DPCHIM, (nx, xvec.data (),
                                          ymat.data () + k * inc,
                                          dmat.fortran_vec () + k * inc,
-                                         incfd, &ierr));
+                                         incfd, ierr));
               k++;
 
               if (ierr < 0)
                 error ("__pchip_deriv__: DPCHIM failed with ierr = %i", ierr);
             }
 
           retval = dmat;
         }
diff --git a/liboctave/numeric/lo-slatec-proto.h b/liboctave/numeric/lo-slatec-proto.h
--- a/liboctave/numeric/lo-slatec-proto.h
+++ b/liboctave/numeric/lo-slatec-proto.h
@@ -101,24 +101,24 @@ extern "C"
   F77_FUNC (algams, ALGAMS) (const F77_REAL&, F77_REAL&, F77_REAL&);
 
   F77_RET_T
   F77_FUNC (dlgams, DLGAMS) (const F77_DBLE&, F77_DBLE&, F77_DBLE&);
 
   // PCHIM
 
   F77_RET_T
-  F77_FUNC (dpchim, DPCHIM) (const F77_INT& n, const F77_DBLE& x,
-                             const F77_DBLE& f, F77_DBLE& d,
-                             const F77_INT &incfd,
+  F77_FUNC (dpchim, DPCHIM) (const F77_INT& n, const F77_DBLE *x,
+                             const F77_DBLE *f, F77_DBLE *d,
+                             const F77_INT& incfd,
                              F77_INT& ierr);
 
   F77_RET_T
-  F77_FUNC (pchim, PCHIM) (const F77_INT& n, const F77_REAL& x,
-                           const F77_REAL& f, F77_REAL& d,
+  F77_FUNC (pchim, PCHIM) (const F77_INT& n, const F77_REAL *x,
+                           const F77_REAL *f, F77_REAL *d,
                            const F77_INT& incfd,
                            F77_INT& ierr);
 
   // PSIFN
 
   F77_RET_T
   F77_FUNC (psifn, PSIFN) (const F77_REAL&, const F77_INT&,
                            const F77_INT&, const F77_INT&,
