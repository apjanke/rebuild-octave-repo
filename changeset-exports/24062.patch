# HG changeset patch
# User Rik <rik@octave.org>
# Date 1505928196 25200
#      Wed Sep 20 10:23:16 2017 -0700
# Node ID 6570fdb7d3a00fb95f71030c7254885411afca53
# Parent  a1801e80bb115597df8f7cc2cc0dbdba31254253
integral.m: Pass tolerances to underlying integrators, correct precision in BIST tests (bug #42037).

* integral.m: Pass correct default AbsTol to quadv if necessary.  Use correct
tolerances in assert statements of BIST tests (positive for absolute, negative
for relative).

diff --git a/scripts/general/integral.m b/scripts/general/integral.m
--- a/scripts/general/integral.m
+++ b/scripts/general/integral.m
@@ -77,17 +77,17 @@ function q = integral (f, a, b, varargin
     print_usage ();
   endif
 
   if (nargin == 3)
     ## Pass the simplest case directly to general integrator.
     ## Let quadgk function handle input checks on function and limits.
     q = quadgk (f, a, b);
   else
-    ## Parse options to determine how to call integrator
+    ## Parse options to determine how to call integrator.
     abstol = [];
     reltol = [];
     waypoints = [];
     arrayvalued = false;
 
     idx = 1;
     while (idx < nargin - 3)
       prop = varargin{idx++};
@@ -104,101 +104,98 @@ function q = integral (f, a, b, varargin
           waypoints = varargin{idx++}(:);
         case "arrayvalued"
           arrayvalued = varargin{idx++};
         otherwise
           error ("integral: unknown property '%s'", prop);
       endswitch
     endwhile
 
-    if (arrayvalued)
-      ## FIXME: replace warning with arrayfun(?) call to quadgk
+    if (! arrayvalued)
+      ## quadgk will accept empty values of optional parameters.
+      q = quadgk (f, a, b,
+                  "AbsTol", abstol, "RelTol", reltol, "WayPoints", waypoints);
+    else
+      ## FIXME: Replace warning with array compatible call to quadgk
       if (! isempty (waypoints))
         warning(["integral: array-valued quadrature routine currently ", ...
                  "unable to handle WayPoints.  WayPoints are ignored."]);
       endif
 
-      ## FIXME: remove warning once we have reltol compatible arrayval'd
-      ## quad or arrayfun call to quadgk.
+      ## FIXME: Remove warning once we have reltol compatible arrayval'd
+      ##        quad or arrayfun call to quadgk.
       if (! isempty (reltol))
         warning(["integral: array-valued quadrature only accepts AbsTol.", ...
                  "  RelTol ignored."]);
       endif
 
-      ## quadv accepts empty abstol input.
-      q = quadv (f, a, b, abstol);
+      if (isempty (abstol))
+        issingle = isa (a, "single") || isa (b, "single");
+        abstol = ifelse (issingle, 1e-5, 1e-10);
+      endif
 
-    else
-      ## quadgk will accept empty values of optional parameters
-      q = quadgk (f, a, b, "AbsTol", abstol, "RelTol", reltol, ...
-                  "WayPoints", waypoints);
-
+      q = quadv (f, a, b, abstol);
     endif
   endif
 
 endfunction
 
 
 ## Matlab compatibility tests
 %!test
 %! f = @(x) exp (-x.^2) .* log (x).^2;
 %! emgamma = 0.57721566490153286;
 %! exact = (sqrt (pi)*(8*log (2)^2+8*emgamma*log (2)+pi^2+2*emgamma^2))/16;
-%! assert (integral (f, 0, Inf), exact, 1e-6);
-%! assert (integral (f, 0, Inf, "RelTol", 1e-12), exact, 1e-12);
+%! assert (integral (f, 0, Inf), exact, -1e-6);
+%! assert (integral (f, 0, Inf, "RelTol", 1e-12), exact, -1e-12);
 
 %!test  # with parameter
 %! f = @(x, c) 1 ./ (x.^3 - 2*x - c);
-%! assert (integral (@(x) f(x,5), 0, 2), -0.4605015338467329, 1e-12);
+%! assert (integral (@(x) f(x,5), 0, 2), -0.4605015338467329, 1e-10);
 
 %!test  # with tolerances
 %! f = @(x) log(x);
 %! assert (integral (@(x) f(x), 0, 1, "AbsTol", 1e-6), -1, 1e-6);
 
 %!test  # waypoints
 %! f = @(x) 1./(2.*x-1);
-%! assert (integral (f, 0, 0, "Waypoints", [1+1i, 1-1i]), -pi*1i, 1e-12);
+%! assert (integral (f, 0, 0, "Waypoints", [1+1i, 1-1i]), -pi*1i, 1e-10);
 
 %!test  # test array function
 %! f = @(x) sin ((1:5)*x);
 %! assert (integral (f, 0, 1, "ArrayValued", true), 1./[1:5]-cos(1:5)./[1:5],
 %!         1e-10);
 
 %!test
 %! f = @(x) x.^5 .* exp (-x) .* sin (x);
-%! assert (integral (f, 0, inf, "RelTol", 1e-8, "AbsTol", 1e-12), -15, 2e-12);
+%! assert (integral (f, 0, inf, "RelTol", 1e-8, "AbsTol", 1e-12), -15, -1e-8);
 
 ## tests from quadgk
-%!test
-%!assert (integral (@sin,-pi,pi), 0, 1e-6);
-%!assert (integral (inline ("sin"),-pi,pi), 0, 1e-6);
-%!assert (integral ("sin",-pi,pi), 0, 1e-6);
-%!assert (integral (@sin,-pi,pi), 0, 1e-6);
-
-%!assert (integral (@sin,-pi,0), -2, 1e-6);
-%!assert (integral (@sin,0,pi), 2, 1e-6);
-%!assert (integral (@(x) 1./sqrt (x),0,1), 2, 1e-6);
-%!assert (integral (@(x) abs (1 - x.^2),0,2, "Waypoints", 1), 2, 1e-6);
-%!assert (integral (@(x) 1./(sqrt (x) .* (x+1)),0,Inf), pi, 1e-6);
-%!assert (integral (@(z) log (z),1+i,1+i, "WayPoints", [1-i, -1,-i, -1+i]), ...
-%!        -pi * 1i, 1e-6);
-%!assert (integral (@(x) exp (-x .^ 2),-Inf,Inf), sqrt (pi), 1e-6);
-%!assert (integral (@(x) exp (-x .^ 2),-Inf,0), sqrt (pi)/2, 1e-6);
+%!assert (integral (inline ("sin"),-pi,pi), 0, 1e-10);
+%!assert (integral ("sin",-pi,pi), 0, 1e-10);
+%!assert (integral (@sin,-pi,pi), 0, 1e-10);
+%!assert (integral (@sin,-pi,0), -2, 1e-10);
+%!assert (integral (@sin,0,pi), 2, 1e-10);
+%!assert (integral (@(x) 1./sqrt (x), 0, 1), 2, 1e-10);
+%!assert (integral (@(x) abs (1 - x.^2), 0, 2, "Waypoints", 1), 2, 1e-10);
+%!assert (integral (@(x) 1./(sqrt (x) .* (x+1)),0,Inf), pi, 1e-10);
+%!assert (integral (@(z) log (z),1+i,1+i, "WayPoints", [1-i, -1,-i, -1+i]),
+%!        -pi * 1i, 1e-10);
+%!assert (integral (@(x) exp (-x .^ 2),-Inf,Inf), sqrt (pi), -1e-6);
+%!assert (integral (@(x) exp (-x .^ 2),-Inf,0), sqrt (pi)/2, -1e-6);
 
 ## tests from quadv
 ## Test vector-valued functions
-%!assert (integral (@(x) [(sin (x)), (sin (2*x))], 0, pi, "ArrayValued", 1), ...
-%!        [2, 0], 1e-5);
+%!assert (integral (@(x) [(sin (x)), (sin (2*x))], 0, pi, "ArrayValued", 1),
+%!        [2, 0], 1e-10);
 
 ## Test matrix-valued functions
 %!test
-%! warning ("off", "Octave:divide-by-zero", "local");
-%! assert (integral (@(x) [x, x, x; x, 1./sqrt(x), x; x, x, x], 0, 1, ...
-%!                   "ArrayValued", 1), ...
-%!         [0.5, 0.5, 0.5; 0.5, 2, 0.5; 0.5, 0.5, 0.5], 1e-5);
+%! assert (integral (@(x) [x,x,x; x,exp(x),x; x,x,x], 0, 1, "ArrayValued", 1),
+%!         [0.5,0.5,0.5; 0.5,(exp (1) - 1),0.5; 0.5,0.5,0.5], 1e-10);
 
 ## Test input validation
 %!error integral (@sin)
 %!error integral (@sin, 0)
 %!error integral (@sin, 0, 1, 1e-6, true, 4)
 %!error integral (@sin, 0, 1, "DummyArg")
 %!error <property PROP must be a string> integral (@sin, 0, 1, 2, 3)
 %!error <unknown property 'foo'> integral (@sin, 0, 1, "foo", 3)
