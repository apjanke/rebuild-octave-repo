# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1345930999 21600
#      Sat Aug 25 15:43:19 2012 -0600
# Node ID c27a1e131b16b7c2a1a3b2149921362377239780
# Parent  2c0259dc1a8216e077aa060ad7f87b6c579b023c
pt-jit.cc (jit_convert::visit_simple_for_command): Fix block order

diff --git a/libinterp/interp-core/pt-jit.cc b/libinterp/interp-core/pt-jit.cc
--- a/libinterp/interp-core/pt-jit.cc
+++ b/libinterp/interp-core/pt-jit.cc
@@ -238,34 +238,34 @@ jit_convert::visit_simple_for_command (t
 
   // we need a variable for our iterator, because it is used in multiple blocks
   std::string iter_name = next_iterator ();
   jit_variable *iterator = factory.create<jit_variable> (iter_name);
   factory.create<jit_variable> (iter_name);
   vmap[iter_name] = iterator;
 
   jit_block *body = factory.create<jit_block> ("for_body");
-  blocks.push_back (body);
-
   jit_block *tail = factory.create<jit_block> ("for_tail");
 
   // do control expression, iter init, and condition check in prev_block (block)
   // if we are the top level for loop, the bounds is an input argument.
   jit_value *control = find_variable (next_for_bounds ());
   if (! control)
     control = visit (cmd.control_expr ());
   jit_call *init_iter = factory.create<jit_call> (jit_typeinfo::for_init,
                                                   control);
   block->append (init_iter);
   block->append (factory.create<jit_assign> (iterator, init_iter));
 
   jit_call *check = factory.create<jit_call> (jit_typeinfo::for_check, control,
                                               iterator);
   block->append (check);
   block->append (factory.create<jit_cond_branch> (check, body, tail));
+
+  blocks.push_back (body);
   block = body;
 
   // compute the syntactical iterator
   jit_call *idx_rhs = factory.create<jit_call> (jit_typeinfo::for_index,
                                                 control, iterator);
   block->append (idx_rhs);
   do_assign (cmd.left_hand_side (), idx_rhs);
 
@@ -2019,9 +2019,27 @@ Test some simple cases that compile.
 %!    x = a;
 %!    break;
 %!  endwhile
 %!endfunction
 
 %!assert (test_overload (1), 1);
 %!assert (test_overload ([1 2]), [1 2]);
 
+%!function a = bubble (a = [3 2 1])
+%!  swapped = 1;
+%!  n = length (a);
+%!  while (swapped)
+%!    swapped = 0;
+%!    for i = 1:n-1
+%!      if a(i) > a(i + 1)
+%!        swapped = 1;
+%!        temp = a(i);
+%!        a(i) = a(i + 1);
+%!        a(i + 1) = temp;
+%!      endif
+%!    endfor
+%!  endwhile
+%!endfunction
+
+%!assert (bubble (), [1 2 3]);
+
 */
