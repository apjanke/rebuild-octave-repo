# HG changeset patch
# User ttl <ttl@justmail.de>
# Date 1315928674 -7200
#      Tue Sep 13 17:44:34 2011 +0200
# Node ID c9501268a194f97c33143a5f362a620444b3ee2a
# Parent  c6dc85026aa695408dd57627f3a3caf44c5f23d4
filename with or without full path in tabs of the editor

diff --git a/gui/src/FileEditorMdiSubWindow.cpp b/gui/src/FileEditorMdiSubWindow.cpp
--- a/gui/src/FileEditorMdiSubWindow.cpp
+++ b/gui/src/FileEditorMdiSubWindow.cpp
@@ -64,25 +64,30 @@ FileEditorMdiSubWindow::handleMarginClic
       if (mask && (1 << MARKER_BOOKMARK))
         m_editor->markerDelete(line,MARKER_BOOKMARK);
       else
         m_editor->markerAdd(line,MARKER_BOOKMARK);
     }
 }
 
 void
-FileEditorMdiSubWindow::handleModificationChanged(bool modified)
+FileEditorMdiSubWindow::newWindowTitle(bool modified)
 {
+  QString title(m_fileName);
+  if ( !m_longTitle )
+    {
+      QFileInfo file(m_fileName);
+      title = file.fileName();
+    }
   if ( modified )
     {
-      QString title(m_fileName);
       setWindowTitle(title.prepend("* "));
     }
   else
-     setWindowTitle (m_fileName);
+     setWindowTitle (title);
 }
 
 void
 FileEditorMdiSubWindow::handleCopyAvailable(bool enableCopy)
 {
   m_copyAction->setEnabled(enableCopy);
   m_cutAction->setEnabled(enableCopy);
 }
@@ -122,30 +127,30 @@ FileEditorMdiSubWindow::loadFile (QStrin
     }
 
   QTextStream in (&file);
   QApplication::setOverrideCursor (Qt::WaitCursor);
   m_editor->setText (in.readAll ());
   QApplication::restoreOverrideCursor ();
 
   m_fileName = fileName;
-  setWindowTitle (fileName);
+  newWindowTitle (false); // window title (no modification)
   m_statusBar->showMessage (tr ("File loaded."), 2000);
   m_editor->setModified (false); // loaded file is not modified yet
 }
 
 void
 FileEditorMdiSubWindow::newFile ()
 {
     if (checkFileModified ("Create New File",QMessageBox::Cancel)==QMessageBox::Cancel)
       {
         return; // existing file not saved and creating new file canceled by user
       }
     m_fileName = UNNAMED_FILE;
-    setWindowTitle (m_fileName);
+    newWindowTitle (false); // window title (no modification)
     m_editor->setText ("");
     m_editor->setModified (false); // new file is not modified yet
 }
 
 int
 FileEditorMdiSubWindow::checkFileModified (QString msg, int cancelButton)
 {
   int decision = QMessageBox::Yes;
@@ -203,18 +208,18 @@ FileEditorMdiSubWindow::saveFile (QStrin
       return;
     }
 
   // save the contents into the file
   QTextStream out (&file);
   QApplication::setOverrideCursor (Qt::WaitCursor);
   out << m_editor->text ();
   QApplication::restoreOverrideCursor ();
-  m_fileName = saveFileName;     // save file name for later use
-  setWindowTitle(m_fileName);    // set the window title to actual file name
+  m_fileName = saveFileName;  // save file name for later use
+  newWindowTitle(false);      // set the window title to actual file name (not modified)
   m_statusBar->showMessage (tr ("File %1 saved").arg(m_fileName), 2000);
   m_editor->setModified (false); // files is save -> not modified
 }
 
 void
 FileEditorMdiSubWindow::saveFileAs ()
 {
   QString saveFileName(m_fileName);
@@ -274,18 +279,18 @@ FileEditorMdiSubWindow::doCommentSelecte
         lineTo--;        // stop at line above
       m_editor->beginUndoAction ();
       for ( i=lineFrom; i<=lineTo; i++ )
         {
           if ( comment )
             m_editor->insertAt("%",i,0);
           else
             {
-              QString line(m_editor->text(i));
-              if ( line.startsWith("%") )
+               QString line(m_editor->text(i));
+               if ( line.startsWith("%") )
                 {
                   m_editor->setSelection(i,0,i,1);
                   m_editor->removeSelectedText();
                 }
             }
         }
       m_editor->endUndoAction ();
     }
@@ -435,16 +440,17 @@ FileEditorMdiSubWindow::construct ()
   m_editor->setIndentationsUseTabs (false);
   if ( settings->value ("editor/codeCompletion",true).toBool () )
     {
       m_editor->autoCompleteFromAll();
       m_editor->setAutoCompletionSource(QsciScintilla::AcsAPIs);
       m_editor->setAutoCompletionThreshold (3);
     }
   m_editor->setUtf8 (true);
+  m_longTitle = settings->value ("editor/longWindowTitle",true).toBool ();
 
   // The Actions
 
   // Theme icons with QStyle icons as fallback
   QAction *closeAction = new QAction (
         QIcon::fromTheme("window-close",style->standardIcon (QStyle::SP_DialogCloseButton)),
         tr("&Close File"), m_toolBar);
   QAction *newAction = new QAction (
@@ -577,15 +583,15 @@ FileEditorMdiSubWindow::construct ()
   connect (newAction, SIGNAL (hovered ()), this, SLOT (showToolTipNew ()));
   connect (openAction, SIGNAL (hovered ()), this, SLOT (showToolTipOpen ()));
   connect (undoAction, SIGNAL (hovered ()), this, SLOT (showToolTipUndo ()));
   connect (redoAction, SIGNAL (hovered ()), this, SLOT (showToolTipRedo ()));
   connect (saveAction, SIGNAL (hovered ()), this, SLOT (showToolTipSave ()));
   connect (saveAsAction, SIGNAL (hovered ()), this,SLOT (showToolTipSaveAs ()));
 
   // connect modified signal
-  connect (m_editor, SIGNAL (modificationChanged(bool)), this, SLOT (handleModificationChanged(bool)) );
+  connect (m_editor, SIGNAL (modificationChanged(bool)), this, SLOT (newWindowTitle(bool)) );
 
   m_fileName = "";
-  setWindowTitle (m_fileName);
+  newWindowTitle (false);
   setWindowIcon(QIcon::fromTheme("accessories-text-editor",style->standardIcon (QStyle::SP_FileIcon)));
   show ();
 }
diff --git a/gui/src/FileEditorMdiSubWindow.h b/gui/src/FileEditorMdiSubWindow.h
--- a/gui/src/FileEditorMdiSubWindow.h
+++ b/gui/src/FileEditorMdiSubWindow.h
@@ -73,25 +73,27 @@ private:
   int checkFileModified (QString msg, int cancelButton);
   void construct ();
   void doCommentSelectedText (bool comment);
   QMenuBar *m_menuBar;
   QToolBar *m_toolBar;
   QsciScintilla *m_editor;
   QStatusBar *m_statusBar;
   QString m_fileName;
+  QString m_fileNameShort;
   TerminalEmulation* m_terminalEmulation;
   QAction* m_copyAction;
   QAction* m_cutAction;
   MainWindow* m_mainWindow;
   int m_markerBookmark;
   bool m_modified;
+  bool m_longTitle;
 
 private slots:
-  void handleModificationChanged(bool modified);
+  void newWindowTitle(bool modified);
   void handleMarginClicked(int line, int margin, Qt::KeyboardModifiers state);
   void handleCopyAvailable(bool enableCopy);
   void runFile();
   void removeBookmark ();
   void toggleBookmark ();
   void nextBookmark();
   void prevBookmark();
   void commentSelectedText();
diff --git a/gui/src/OctaveGUI.cpp b/gui/src/OctaveGUI.cpp
--- a/gui/src/OctaveGUI.cpp
+++ b/gui/src/OctaveGUI.cpp
@@ -43,16 +43,17 @@ main (int argc, char *argv[])
           settings->setValue ("nickServPassword", "");
           settings->setValue ("useCustomFileEditor", false);
           settings->setValue ("customFileEditor", "emacs");
           settings->setValue ("editor/showLineNumbers", true);
           settings->setValue ("editor/highlightActualLine", true);
           settings->setValue ("editor/codeCompletion", true);
           settings->setValue ("editor/fontName", "Monospace");
           settings->setValue ("editor/fontSize", 10);
+          settings->setValue ("editor/shortWindowTitle", true);
           settings->setValue ("showFilenames", true);
           settings->setValue ("showFileSize", false);
           settings->setValue ("showFileType", false);
           settings->setValue ("showLastModified", false);
           settings->setValue ("showHiddenFiles", false);
           settings->setValue ("useAlternatingRowColors", true);
           settings->setValue ("useProxyServer", false);
           settings->setValue ("proxyType", "Sock5Proxy");
diff --git a/gui/src/SettingsDialog.cpp b/gui/src/SettingsDialog.cpp
--- a/gui/src/SettingsDialog.cpp
+++ b/gui/src/SettingsDialog.cpp
@@ -16,16 +16,17 @@ QDialog (parent), ui (new Ui::SettingsDi
   ui->nickServPassword->setText (settings->value ("nickServPassword").toString ());
   ui->useCustomFileEditor->setChecked (settings->value ("useCustomFileEditor").toBool ());
   ui->customFileEditor->setText (settings->value ("customFileEditor").toString ());
   ui->editor_showLineNumbers->setChecked (settings->value ("editor/showLineNumbers",true).toBool () );
   ui->editor_highlightActualLine->setChecked (settings->value ("editor/highlightActualLine",true).toBool () );
   ui->editor_codeCompletion->setChecked (settings->value ("editor/codeCompletion",true).toBool () );
   ui->editor_fontName->setCurrentFont (QFont (settings->value ("editor/fontName","Courier").toString()) );
   ui->editor_fontSize->setValue (settings->value ("editor/fontSize",10).toInt ());
+  ui->editor_longWindowTitle->setChecked (settings->value ("editor/longWindowTitle",true).toBool ());
   ui->showFilenames->setChecked (settings->value ("showFilenames").toBool());
   ui->showFileSize->setChecked (settings->value ("showFileSize").toBool());
   ui->showFileType->setChecked (settings->value ("showFileType").toBool());
   ui->showLastModified->setChecked (settings->value ("showLastModified").toBool());
   ui->showHiddenFiles->setChecked (settings->value ("showHiddenFiles").toBool());
   ui->useAlternatingRowColors->setChecked (settings->value ("useAlternatingRowColors").toBool());
   ui->useProxyServer->setChecked (settings->value ("useProxyServer").toBool ());
   ui->proxyHostName->setText (settings->value ("proxyHostName").toString ());
@@ -53,16 +54,17 @@ SettingsDialog::~SettingsDialog ()
   settings->setValue ("nickServPassword", ui->nickServPassword->text ());
   settings->setValue ("useCustomFileEditor", ui->useCustomFileEditor->isChecked ());
   settings->setValue ("customFileEditor", ui->customFileEditor->text ());
   settings->setValue ("editor/showLineNumbers", ui->editor_showLineNumbers->isChecked ());
   settings->setValue ("editor/highlightActualLine", ui->editor_highlightActualLine->isChecked ());
   settings->setValue ("editor/codeCompletion", ui->editor_codeCompletion->isChecked ());
   settings->setValue ("editor/fontName", ui->editor_fontName->currentFont().family());
   settings->setValue ("editor/fontSize", ui->editor_fontSize->value());
+  settings->setValue ("editor/longWindowTitle", ui->editor_longWindowTitle->isChecked());
   settings->setValue ("showFilenames", ui->showFilenames->isChecked ());
   settings->setValue ("showFileSize", ui->showFileSize->isChecked ());
   settings->setValue ("showFileType", ui->showFileType->isChecked ());
   settings->setValue ("showLastModified", ui->showLastModified->isChecked ());
   settings->setValue ("showHiddenFiles", ui->showHiddenFiles->isChecked ());
   settings->setValue ("useAlternatingRowColors", ui->useAlternatingRowColors->isChecked ());
   settings->setValue ("useProxyServer", ui->useProxyServer->isChecked ());
   settings->setValue ("proxyType", ui->proxyType->currentText ());
diff --git a/gui/src/SettingsDialog.ui b/gui/src/SettingsDialog.ui
--- a/gui/src/SettingsDialog.ui
+++ b/gui/src/SettingsDialog.ui
@@ -27,17 +27,17 @@
   </property>
   <property name="windowTitle">
    <string>Settings</string>
   </property>
   <layout class="QVBoxLayout" name="verticalLayout_2">
    <item>
     <widget class="QTabWidget" name="tabWidget">
      <property name="currentIndex">
-      <number>0</number>
+      <number>1</number>
      </property>
      <widget class="QWidget" name="chatTab">
       <attribute name="title">
        <string>Chat</string>
       </attribute>
       <layout class="QGridLayout" name="gridLayout_2">
        <item row="0" column="0">
         <layout class="QVBoxLayout" name="verticalLayout">
@@ -198,16 +198,23 @@
            <property name="text">
             <string>Code completion</string>
            </property>
            <property name="checked">
             <bool>false</bool>
            </property>
           </widget>
          </item>
+         <item>
+          <widget class="QCheckBox" name="editor_longWindowTitle">
+           <property name="text">
+            <string>Show complete path in window title</string>
+           </property>
+          </widget>
+         </item>
         </layout>
        </item>
        <item row="2" column="0">
         <layout class="QHBoxLayout" name="horizontalLayout_4">
          <item>
           <widget class="QLabel" name="label_8">
            <property name="text">
             <string>Font</string>
diff --git a/gui/src/WelcomeWizard.ui b/gui/src/WelcomeWizard.ui
--- a/gui/src/WelcomeWizard.ui
+++ b/gui/src/WelcomeWizard.ui
@@ -24,17 +24,17 @@
   </property>
   <property name="windowTitle">
    <string>Welcome to GNU Octave</string>
   </property>
   <layout class="QVBoxLayout" name="verticalLayout_2">
    <item>
     <widget class="QStackedWidget" name="stackedWidget">
      <property name="currentIndex">
-      <number>0</number>
+      <number>4</number>
      </property>
      <widget class="QWidget" name="page">
       <layout class="QVBoxLayout" name="verticalLayout">
        <item>
         <widget class="QLabel" name="label">
          <property name="text">
           <string>It appears that you have launched Octave GUI for the first time on this computer, since no configuration file could be found at '~/.octave-gui'. This wizard will guide you through the essential settings you should make before you can start using Octave GUI. If you want to transfer your settings you have previously made just close this dialog and copy over the settings file to your home folder. The presence of that file will automatically be detected and will skip this wizard. IMPORTANT: This wizard is not fully functional yet. Just click your way to the end and it will create a standard settings file.</string>
          </property>
