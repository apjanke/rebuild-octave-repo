# HG changeset patch
# User jwe
# Date 1129225879 0
#      Thu Oct 13 17:51:19 2005 +0000
# Node ID b2e882e8b68b449dd86387a044d6226eabb7b8c3
# Parent  179096e8e57fcb58c6e39491afbfd81e349e7693
[project @ 2005-10-13 17:51:19 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,28 @@
+2005-10-13  John W. Eaton  <jwe@octave.org>
+
+	* plot/__plt__.m, plot/__errplot__.m, plot/replot.m:
+	If in multiplot mode, clear plot before issuing new plot command.
+
+	* plot/__setup_plot__.m: New function.
+	* plot/__plt__.m, plot__errplot__.m: Use it.
+	Handle multiplot data and offsets here.
+
+	* plot/__plot_globals__.m: Also keep track of multiplot options.
+	Move initialization to __setup_plot__.m.
+
+	* plot/subplot.m: Multiplot globals now in __plot_globals__.m.
+	Don't reset gnuplot_command_replot.
+
+	* plot/replot.m: Handle multiplot data and offsets here.
+	* plot__axis_label__.m, plot/axis.m, plot/grid.m,
+	plot/plot_border.m, plot/plot.m, plot/plot_title.m,
+	plot/top_title.m: Call replot, not __gnuplot_replot__.
+
 2005-10-12  John W. Eaton  <jwe@octave.org>
 
 	* plot/figure.m: Handle __current_figure__, not gnuplot details.
 
 2005-10-04  Rafael Laboissiere  <rafael@debian.org>
 
 	* binoinv.m, chi2pdf.m, frnd.m, poissinv.m, tinv.m, trnd.m,
 	weibrnd.m: Removed calls and references to deprecated _pdf and
diff --git a/scripts/plot/__axis_label__.m b/scripts/plot/__axis_label__.m
--- a/scripts/plot/__axis_label__.m
+++ b/scripts/plot/__axis_label__.m
@@ -28,18 +28,17 @@ function h = __axis_label__ (caller, tex
 
   if (nargin == 0)
     usage ("__axis_label__ (caller, text)");
   elseif (nargin == 2)
     if (ischar (text))
       __gnuplot_raw__ (sprintf ("set %s \"%s\";\n", caller,
 				undo_string_escapes (text)));
       if (automatic_replot)
-	## No semicolon (see replot.m).
-	__gnuplot_replot__
+	replot ();
       endif
     else
       error ("%s: text must be a string", caller);
     endif
   else
     usage ("%s (text)", caller);
   endif
 
diff --git a/scripts/plot/__errplot__.m b/scripts/plot/__errplot__.m
--- a/scripts/plot/__errplot__.m
+++ b/scripts/plot/__errplot__.m
@@ -33,21 +33,23 @@
 ## Created: 18.7.2000
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
 function __errplot__ (fstr, a1, a2, a3, a4, a5, a6)
 
   __plot_globals__;
 
+  __setup_plot__;
+
   if (nargin < 3 || nargin > 7) # at least three data arguments needed
     usage ("__errplot__ (fmt, arg1, ...)");
   endif
 
-  j = __plot_data_offset__(__current_figure__);
+  j = __plot_data_offset__{__current_figure__}(__multiplot_xi__,__multiplot_yi__);
 
   fmt = __pltopt__ ("__errplot__", fstr);
 
   nplots = size (a1, 2);
   len = size (a1, 1);
   for i = 1:nplots
     ifmt = fmt(1+mod(i,size(fmt,1)), :);
     switch (nargin - 1)
@@ -67,27 +69,30 @@ function __errplot__ (fstr, a1, a2, a3, 
 	error ("error plot requires 2, 3, 4 or 6 columns");
 	## tmp = [a1(:,i), a2(:,i), a3(:,i), a4(:,i), a5(:,i)];
       case 6
 	tmp = [a1(:,i), a2(:,i), ...
 	       a1(:,i)-a3(:,i), a1(:,i)+a4(:,i), ...
 	       a2(:,i)-a5(:,i), a2(:,i)+a6(:,i)];
     endswitch
 
-    __plot_data__{__current_figure__}{j} = tmp;
+    __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j} = tmp;
 
-    __plot_command__{__current_figure__} \
-	= sprintf ("%s%s __plot_data__{__current_figure__}{%d} %s",
-		   __plot_command__{__current_figure__},
+    __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} \
+	= sprintf ("%s%s __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{%d} %s",
+		   __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__},
 		   __plot_command_sep__, j, ifmt);
     __plot_command_sep__ = ",\\\n";
 
     j++;
 
   endfor
 
-  __plot_data_offset__(__current_figure__) = j;
+  __plot_data_offset__{__current_figure__}(__multiplot_xi__,__multiplot_yi__) = j;
 
-  if (! isempty (__plot_command__{__current_figure__}))
-    eval (__plot_command__{__current_figure__});
+  if (! isempty (__plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}))
+      if (__multiplot_mode__)
+	__gnuplot_raw__ ("clear\n");
+      endif
+    eval (__plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__});
   endif
 
 endfunction
diff --git a/scripts/plot/__plot_globals__.m b/scripts/plot/__plot_globals__.m
--- a/scripts/plot/__plot_globals__.m
+++ b/scripts/plot/__plot_globals__.m
@@ -14,44 +14,56 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## This is a script file shared by __plt__ and __errplot__.
 
+## global variables to keep track of multiplot options
+
+global __multiplot_mode__ = 0;
+global __multiplot_xsize__;
+global __multiplot_ysize__;
+global __multiplot_xn__;
+global __multiplot_yn__;
+global __multiplot_xi__;
+global __multiplot_yi__;
+global __multiplot_scale__;
+
+if (isempty (__multiplot_scale__))
+  __multiplot_scale__ = [1, 1];
+endif
+
+if (isempty (__multiplot_xi__))
+  __multiplot_xi__ = 1;
+endif
+
+if (isempty (__multiplot_yi__))
+  __multiplot_yi__ = 1;
+endif
+
 global __current_figure__;
 global __plot_data_offset__;
 global __plot_command__;
 global __plot_command_sep__;
 global __plot_data__;
 
 if (isempty (__current_figure__))
   __current_figure__ = 1;
 endif
 
-if (length (__plot_data_offset__) < __current_figure__)
-  __plot_data_offset__(__current_figure__) = 1;
-endif
+if (length (__plot_data_offset__) < __current_figure__
+    || any (size (__plot_data_offset__{__current_figure__}) != [__multiplot_xi__, __multiplot_yi__]))
 
-if (length (__plot_command__) < __current_figure__)
-  __plot_command__{__current_figure__} = "";
-endif
-
-if (length (__plot_data__) < __current_figure__)
-  __plot_data__{__current_figure__} = [];
+  __plot_data_offset__{__current_figure__}(__multiplot_xi__,__multiplot_yi__) = 1;
 endif
 
-if (ishold ())
-  if (isempty (__plot_command__{__current_figure__}))
-    __plot_command__{__current_figure__} = "__gnuplot_plot__";
-    __plot_command_sep__ = "";
-  else
-    gp_cmd = __plot_command__{__current_figure__};
-    __plot_command_sep__ = ",\\\n";
-  endif
-else
-  __plot_command__{__current_figure__} = "__gnuplot_plot__";
-  __plot_command_sep__ = "";
-  __plot_data__{__current_figure__} = [];
-  __plot_data_offset__(__current_figure__) = 1;
+if (length (__plot_command__) < __current_figure__
+    || any (size (__plot_command__{__current_figure__}) != [__multiplot_xi__, __multiplot_yi__]))
+  __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} = "";
 endif
+
+if (length (__plot_data__) < __current_figure__
+    || any (size (__plot_data__{__current_figure__}) != [__multiplot_xi__, __multiplot_yi__]))
+  __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} = [];
+endif
diff --git a/scripts/plot/__plt__.m b/scripts/plot/__plt__.m
--- a/scripts/plot/__plt__.m
+++ b/scripts/plot/__plt__.m
@@ -22,22 +22,24 @@
 ## @end deftypefn
 
 ## Author: jwe
 
 function __plt__ (caller, varargin)
 
   __plot_globals__;
 
+  __setup_plot__;
+
   nargs = nargin ();
 
   if (nargs > 1)
 
     k = 1;
-    j = __plot_data_offset__(__current_figure__);
+    j = __plot_data_offset__{__current_figure__}(__multiplot_xi__,__multiplot_yi__);
 
     x_set = false;
     y_set = false;
 
     ## Gather arguments, decode format, gather plot strings, and plot lines.
 
     while (--nargs > 0 || x_set)
 
@@ -49,67 +51,70 @@ function __plt__ (caller, varargin)
       endif
 
       have_data = false;
 
       if (ischar (next_arg))
 	if (x_set)
 	  fmt = __pltopt__ (caller, next_arg);
 	  if (y_set)
-	    [__plot_data__{__current_figure__}{j}, fmtstr] = __plt2__ (x, y, fmt);
+	    [__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j}, fmtstr] = __plt2__ (x, y, fmt);
 	  else
-	    [__plot_data__{__current_figure__}{j}, fmtstr] = __plt1__ (x, fmt);
+	    [__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j}, fmtstr] = __plt1__ (x, fmt);
 	  endif
 	  have_data = true;
 	  x_set = false;
 	  y_set = false;
 	else
 	  error ("plot: no data to plot");
 	endif
       elseif (x_set)
 	if (y_set)
 	  fmt = __pltopt__ (caller, "");
-	  [__plot_data__{__current_figure__}{j}, fmtstr] = __plt2__ (x, y, fmt);
+	  [__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j}, fmtstr] = __plt2__ (x, y, fmt);
 	  have_data = true;
 	  x = next_arg;
 	  y_set = false;
 	else
 	  y = next_arg;
 	  y_set = true;
 	endif
       else
 	x = next_arg;
 	x_set = true;
       endif
 
       if (have_data)
-	if (iscell (__plot_data__{__current_figure__}{j}))
-	  for i = 1:length (__plot_data__{__current_figure__}{j})
-	    __plot_command__{__current_figure__} \
-		= sprintf ("%s%s __plot_data__{__current_figure__}{%d}{%d} %s",
-			   __plot_command__{__current_figure__},
+	if (iscell (__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j}))
+	  for i = 1:length (__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j})
+	    __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} \
+		= sprintf ("%s%s __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{%d}{%d} %s",
+			   __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__},
 			   __plot_command_sep__, j, i, fmtstr{i});
 	    __plot_command_sep__ = ",\\\n";
 	  endfor
 	else
-	  __plot_command__{__current_figure__} \
-	    = sprintf ("%s%s __plot_data__{__current_figure__}{%d} %s",
-		       __plot_command__{__current_figure__},
+	  __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} \
+	    = sprintf ("%s%s __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{%d} %s",
+		       __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__},
 		       __plot_command_sep__, j, fmtstr);
 	  __plot_command_sep__ = ",\\\n";
 	endif
 	j++;
       endif
 
     endwhile
 
-    __plot_data_offset__(__current_figure__) = j;
+    __plot_data_offset__{__current_figure__}(__multiplot_xi__,__multiplot_yi__) = j;
 
-    if (! isempty (__plot_command__{__current_figure__}))
-      eval (__plot_command__{__current_figure__});
+    if (! isempty (__plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}))
+      if (__multiplot_mode__)
+	__gnuplot_raw__ ("clear\n");
+      endif
+      eval (__plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__});
     endif
 
   else
     msg = sprintf ("%s (y)\n", caller);
     msg = sprintf ("%s       %s (x, y, ...)\n", msg, caller);
     msg = sprintf ("%s       %s (x, y, fmt, ...)", msg, caller);
     usage (msg);
   endif
diff --git a/scripts/plot/__setup_plot__.m b/scripts/plot/__setup_plot__.m
new file mode 100644
--- /dev/null
+++ b/scripts/plot/__setup_plot__.m
@@ -0,0 +1,32 @@
+## Copyright (C) 2005 John W. Eaton
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 2, or (at your option)
+## any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, write to the Free
+## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+## 02110-1301, USA.
+
+if (ishold ())
+  if (isempty (__plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}))
+    __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} = "__gnuplot_plot__";
+    __plot_command_sep__ = "";
+  else
+    __plot_command_sep__ = ",\\\n";
+  endif
+else
+  __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} = "__gnuplot_plot__";
+  __plot_command_sep__ = "";
+  __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} = [];
+  __plot_data_offset__{__current_figure__}(__multiplot_xi__,__multiplot_yi__) = 1;
+endif
diff --git a/scripts/plot/axis.m b/scripts/plot/axis.m
--- a/scripts/plot/axis.m
+++ b/scripts/plot/axis.m
@@ -165,17 +165,17 @@ function curr_axis = axis (ax, varargin)
       endif
     elseif (strcmp (ax, "manual"))
       ## fixes the axis limits, like axis(axis) should;
       __gnuplot_raw__ ("set xrange [] writeback;\n");
       __gnuplot_raw__ ("set yrange [] writeback;\n");
       __gnuplot_raw__ ("set zrange [] writeback;\n");
       ## XXX FIXME XXX if writeback were set in plot, no need to replot here.
       ## No semicolon (see replot.m).
-      __gnuplot_replot__
+      replot ();
       __gnuplot_raw__ ("set noautoscale x;\n");
       __gnuplot_raw__ ("set noautoscale y;\n");
       __gnuplot_raw__ ("set noautoscale z;\n");
     elseif (strcmp (ax, "tight"))
       ## XXX FIXME XXX if tight, plot must set ranges to limits of the
       ## all the data on the current plot, even if from a previous call.
       ## Instead, just let gnuplot do as it likes.
       __gnuplot_raw__ ("set autoscale;\n");
@@ -260,18 +260,17 @@ function curr_axis = axis (ax, varargin)
 
   else
     error ("axis: expecting no args, or a vector with 2, 4, or 6 elements");
   endif
 
   if (nargin > 1)
     axis (varargin{:});
   elseif (automatic_replot)
-    ## No semicolon (see replot.m).
-    __gnuplot_replot__
+    replot ();
   endif
 endfunction
 
 %!demo
 %! t=0:0.01:2*pi; x=sin(t);
 %!
 %! subplot(221);    title("normal plot");
 %! plot(t, x, ";;");
diff --git a/scripts/plot/grid.m b/scripts/plot/grid.m
--- a/scripts/plot/grid.m
+++ b/scripts/plot/grid.m
@@ -54,13 +54,12 @@ function grid (x)
     else
       error ("grid: argument must be a string");
     endif
   else
     usage (usage_msg);
   endif
 
   if (do_replot && automatic_replot)
-    ## No semicolon (see replot.m).
-    __gnuplot_replot__
+    replot ();
   endif
 
 endfunction
diff --git a/scripts/plot/plot_border.m b/scripts/plot/plot_border.m
--- a/scripts/plot/plot_border.m
+++ b/scripts/plot/plot_border.m
@@ -106,13 +106,12 @@ function plot_border (varargin)
       border = 15;
     else
       border = south + west + north + east;
     endif
     __gnuplot_raw__ (sprintf ("set border %d;\n", border));
   endif
 
   if (automatic_replot)
-    ## No semicolon (see replot.m).
-    __gnuplot_replot__
+    replot ();
   endif
 
 endfunction
diff --git a/scripts/plot/replot.m b/scripts/plot/replot.m
--- a/scripts/plot/replot.m
+++ b/scripts/plot/replot.m
@@ -21,17 +21,22 @@
 ## @deftypefn {Function File} {} replot ()
 ## Refressh the plot window.
 ## @end deftypefn
 
 ## Author: jwe
 
 function replot ()
 
+  __plot_globals__;
+
   if (nargin == 0)
-    ## No semicolon following the __gnuplot_replot__ line unless you
-    ## also fix gplot.l to allow it.
-    __gnuplot_replot__
+    if (! isempty (__plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}))
+      if (__multiplot_mode__)
+	__gnuplot_raw__ ("clear\n");
+      endif
+      eval (__plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__});
+    endif
   else
     usage ("replot ()");
   endif
 
 endfunction
diff --git a/scripts/plot/shg.m b/scripts/plot/shg.m
--- a/scripts/plot/shg.m
+++ b/scripts/plot/shg.m
@@ -31,11 +31,11 @@
 ## Author: jwe
 
 function shg ()
 
   if (nargin != 0)
     warning ("shg: ignoring extra arguments");
   endif
 
-  __gnuplot_replot__ 
+  replot ();
 
 endfunction
diff --git a/scripts/plot/subplot.m b/scripts/plot/subplot.m
--- a/scripts/plot/subplot.m
+++ b/scripts/plot/subplot.m
@@ -77,30 +77,17 @@
 ## @end ifinfo
 ## @end deftypefn
 
 ## Author: Vinayak Dutt <Dutt.Vinayak@mayo.EDU>
 ## Adapted-By: jwe
 
 function subplot (rows, columns, index)
 
-  ## global variables to keep track of multiplot options
-
-  global __multiplot_mode__ = 0;
-  global __multiplot_xsize__;
-  global __multiplot_ysize__;
-  global __multiplot_xn__;
-  global __multiplot_yn__;
-  global __multiplot_xi__;
-  global __multiplot_yi__;
-  global __multiplot_scale__;
-
-  if (isempty (__multiplot_scale__))
-    __multiplot_scale__ = [1, 1];
-  endif
+  __plot_globals__;
 
   if (nargin != 3 && nargin != 1)
     usage ("subplot (rows, columns, index) or subplot (rcn)");
   endif
 
   if (nargin == 1)
 
     if (! (isscalar (rows) && rows >= 0))
@@ -150,18 +137,16 @@ function subplot (rows, columns, index)
         || __multiplot_yn__ != rows)
 
       __multiplot_mode__ = 1;
       __multiplot_xn__ = columns;
       __multiplot_yn__ = rows;
       __multiplot_xsize__ = __multiplot_scale__(1) ./ columns;
       __multiplot_ysize__ = __multiplot_scale__(2) ./ rows;
 
-      gnuplot_command_replot = "cle;rep";
-
       __gnuplot_raw__ ("set multiplot;\n");
 
       __gnuplot_raw__ (sprintf ("set size %g, %g;\n",
 				__multiplot_xsize__, __multiplot_ysize__));
     endif
 
     ## get the sub plot location
 
diff --git a/scripts/plot/title.m b/scripts/plot/title.m
--- a/scripts/plot/title.m
+++ b/scripts/plot/title.m
@@ -32,18 +32,17 @@ function h = title (text)
   if (nargin != 1)
     usage ("title (text)");
   endif
 
   if (ischar (text))
     __gnuplot_raw__ (sprintf ("set title \"%s\";\n",
 			      undo_string_escapes (text)));
     if (automatic_replot)
-      ## No semicolon (see replot.m).
-      __gnuplot_replot__
+      replot ();
     endif
   else
     error ("title: text must be a string");
   endif
 
   ## XXX FIXME XXX -- eventually, we will return a graphics handle.  For
   ## now, return something, so that calls that expect a handle won't
   ## fail (at least immediately).
diff --git a/scripts/plot/top_title.m b/scripts/plot/top_title.m
--- a/scripts/plot/top_title.m
+++ b/scripts/plot/top_title.m
@@ -34,16 +34,15 @@ function top_title (text)
   endif
 
   if (ischar (text))
     __gnuplot_raw__ ("set bottom_title;\n")
     __gnuplot_raw__ ("set title;\n")
     __gnuplot_raw__ (sprintf ("set top_title \"%s\";\n",
 			      undo_string_escapes (text)));
     if (automatic_replot)
-      ## No semicolon (see replot.m).
-      __gnuplot_replot__
+      replot ();
     endif
   else
     error ("error: top_title: text must be a string");
   endif
 
 endfunction
