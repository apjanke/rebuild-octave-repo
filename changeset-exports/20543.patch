# HG changeset patch
# User Carlo de Falco <carlo.defalco@polimi.it>
# Date 1443850370 -7200
#      Sat Oct 03 07:32:50 2015 +0200
# Node ID 3339c9bdfe6a6b5cbb1c4048f36367f812fc6fac
# Parent  dd6345fd8a976c2487ee1fbc62c63353d45f1132
Activate FSAL property in dorpri timestepper

* scripts/ode/private/runge_kutta_45_dorpri.m: don't compute
   first stage if values from previous iteration are passed.

* scripts/ode/private/integrate_adaptive.m: do not update
   cmputed stages if timestep is rejected.

diff --git a/scripts/ode/ode45.m b/scripts/ode/ode45.m
--- a/scripts/ode/ode45.m
+++ b/scripts/ode/ode45.m
@@ -101,18 +101,18 @@ function [varargout] = ode45 (vfun, vslo
   endif
 
   if (~isvector (vslot) || ~isnumeric (vslot))
     error ("OdePkg:InvalidArgument", ...
            "second input argument must be a valid vector");
   endif
 
   if (length (vslot) < 2 && ...
-     (isempty (vodeoptions.TimeStepSize) ...
-      || isempty (vodeoptions.TimeStepNumber)))
+      (isempty (vodeoptions.TimeStepSize) ...
+       || isempty (vodeoptions.TimeStepNumber)))
     error ("OdePkg:InvalidArgument", ...
            "second input argument must be a valid vector");
   elseif (vslot(2) == vslot(1))
     error ("OdePkg:InvalidArgument", ...
            "second input argument must be a valid vector");
   else
     vodeoptions.vdirection = sign (vslot(2) - vslot(1));
   endif
@@ -246,18 +246,18 @@ function [varargout] = ode45 (vfun, vslo
 
   ## Implementation of the option Stats has been finished. This option
   ## can be set by the user to another value than default value.
 
   ## Implementation of the option InitialStep has been finished. This
   ## option can be set by the user to another value than default value.
   if (isempty (vodeoptions.InitialStep) && strcmp (integrate_func, "adaptive"))
     vodeoptions.InitialStep = vodeoptions.vdirection* ...
-      starting_stepsize (vorder, vfun, vslot(1), vinit, vodeoptions.AbsTol, ...
-                         vodeoptions.RelTol, vodeoptions.vnormcontrol);
+                              starting_stepsize (vorder, vfun, vslot(1), vinit, vodeoptions.AbsTol, ...
+                                                 vodeoptions.RelTol, vodeoptions.vnormcontrol);
     warning ("OdePkg:InvalidArgument", ...
              "option ''InitialStep'' not set, estimated value %f is used", ...
              vodeoptions.InitialStep);
   elseif(isempty (vodeoptions.InitialStep))
     vodeoptions.InitialStep = odeget (vodeoptions, "TimeStepSize");
   endif
 
   ## Implementation of the option MaxStep has been finished. This option
@@ -354,21 +354,21 @@ function [varargout] = ode45 (vfun, vslo
 
   ## Starting the initialisation of the core solver ode45
   SubOpts = vodeoptions;
   
   if (vhavemasshandle)   ## Handle only the dynamic mass matrix,
     if (vmassdependence) ## constant mass matrices have already
       vmass = @(t,x) vodeoptions.Mass (t, x, vodeoptions.vfunarguments{:});
       vfun = @(t,x) vmass (t, x, vodeoptions.vfunarguments{:}) ...
-        \ vfun (t, x, vodeoptions.vfunarguments{:});
+             \ vfun (t, x, vodeoptions.vfunarguments{:});
     else                 ## if (vmassdependence == false)
       vmass = @(t) vodeoptions.Mass (t, vodeoptions.vfunarguments{:});
       vfun = @(t,x) vmass (t, vodeoptions.vfunarguments{:}) ...
-        \ vfun (t, x, vodeoptions.vfunarguments{:});
+             \ vfun (t, x, vodeoptions.vfunarguments{:});
     endif
   endif
 
   switch integrate_func
     case "adaptive"
       solution = integrate_adaptive (@runge_kutta_45_dorpri, ...
                                      vorder, vfun, vslot, vinit, SubOpts);
     case "n_steps"
@@ -380,21 +380,21 @@ function [varargout] = ode45 (vfun, vslo
       solution = integrate_const (@runge_kutta_45_dorpri, ...
                                   vfun, vslot, vinit, ...
                                   vodeoptions.TimeStepSize, SubOpts);
   endswitch
 
   ## Postprocessing, do whatever when terminating integration algorithm
   if (vodeoptions.vhaveoutputfunction) ## Cleanup plotter
     feval (vodeoptions.OutputFcn, solution.t(end), ...
-      solution.x(end,:)', "done", vodeoptions.vfunarguments{:});
+           solution.x(end,:)', "done", vodeoptions.vfunarguments{:});
   endif
   if (vodeoptions.vhaveeventfunction)  ## Cleanup event function handling
     odepkg_event_handle (vodeoptions.Events, solution.t(end), ...
-      solution.x(end,:)', "done", vodeoptions.vfunarguments{:});
+                         solution.x(end,:)', "done", vodeoptions.vfunarguments{:});
   endif
 
   ## Print additional information if option Stats is set
   if (strcmp (vodeoptions.Stats, "on"))
     vhavestats = true;
     vnsteps    = solution.vcntloop-2;                    ## vcntloop from 2..end
     vnfailed   = (solution.vcntcycles-1)-(solution.vcntloop-2)+1; ## vcntcycl from 1..end
     vnfevals   = 7*(solution.vcntcycles-1);              ## number of ode evaluations
diff --git a/scripts/ode/private/integrate_adaptive.m b/scripts/ode/private/integrate_adaptive.m
--- a/scripts/ode/private/integrate_adaptive.m
+++ b/scripts/ode/private/integrate_adaptive.m
@@ -64,17 +64,17 @@
 
 function solution = integrate_adaptive (stepper, order, func, tspan, x0, options)
 
   solution = struct;
 
   ## first values for time and solution
   t = tspan(1);
   x = x0(:);
-
+  
   ## get first initial timestep
   dt = odeget (options, "InitialStep",
                starting_stepsize (order, func, t, x, options.AbsTol,
                                   options.RelTol, options.vnormcontrol),
                "fast_not_empty");
   vdirection = odeget (options, "vdirection", [], "fast");
   if (sign (dt) != vdirection)
     dt = -dt;
@@ -115,58 +115,65 @@ function solution = integrate_adaptive (
   solution.vcntcycles = 1;
   vcntiter = 0;
   solution.vunhandledtermination = true;
   solution.vcntsave = 2;
   
   z = t;
   u = x;
 
-  k_vals = feval (func, t , x, options.vfunarguments{:});
-
+  k_vals = []; 
+  
   while (counter <= k)
     facmax = 1.5;
 
     ## compute integration step from t to t+dt
-    [s, y, y_est, k_vals] = stepper (func, z(end), u(:,end),
-                                     dt, options, k_vals);
-
+    if (isempty (k_vals))
+      [s, y, y_est, new_k_vals] = stepper (func, z(end), u(:,end),
+                                           dt, options);
+    else
+      [s, y, y_est, new_k_vals] = stepper (func, z(end), u(:,end),
+                                           dt, options, k_vals);
+    endif
+    
     if (options.vhavenonnegative)
       x(options.NonNegative,end) = abs (x(options.NonNegative,end));
       y(options.NonNegative,end) = abs (y(options.NonNegative,end));
       y_est(options.NonNegative,end) = abs (y_est(options.NonNegative,end));
     endif
 
     if (options.vhaveoutputfunction && options.vhaverefine)
       vSaveVUForRefine = u(:,end);
     endif
 
     err = AbsRel_Norm (y(:,end), u(:,end), options.AbsTol, options.RelTol,
                        options.vnormcontrol, y_est(:,end));
-
+    
     ## solution accepted only if the error is less or equal to 1.0
     if (err <= 1)
-
+      
       [tk, comp] = kahan (tk, comp, dt);
       options.comp = comp;
       s(end) = tk;
 
       ## values on this interval for time and solution
-      z = [z(end);s];
-      u = [u(:,end),y];
-
+      z = [z(end); s];
+      u = [u(:,end), y];
+      k_vals = new_k_vals;
+      
       ## if next tspan value is caught, update counter
       if ((z(end) == tspan(counter))
           || (abs (z(end) - tspan(counter)) /
               (max (abs (z(end)), abs (tspan(counter)))) < 8*eps) )
         counter++;
-  
-      ## if there is an element in time vector at which the solution is required
-      ## the program must compute this solution before going on with next steps
+        
+        ## if there is an element in time vector at which the solution is required
+        ## the program must compute this solution before going on with next steps
       elseif (vdirection * z(end) > vdirection * tspan(counter))
+
         ## initialize counter for the following cycle
         i = 2;
         while (i <= length (z))
 
           ## if next tspan value is caught, update counter
           if ((counter <= k)
               && ((z(i) == tspan(counter))
                   || (abs (z(i) - tspan(counter)) /
@@ -174,35 +181,35 @@ function solution = integrate_adaptive (
             counter++;
           endif
           ## else, loop until there are requested values inside this subinterval
           while ((counter <= k)
                  && (vdirection * z(i) > vdirection * tspan(counter)))
             ## choose interpolation scheme according to order of the solver
             switch order
               case 1
-               u_interp = linear_interpolation ([z(i-1) z(i)],
-                                                [u(:,i-1) u(:,i)],
-                                                tspan(counter));
+                u_interp = linear_interpolation ([z(i-1) z(i)],
+                                                 [u(:,i-1) u(:,i)],
+                                                 tspan(counter));
               case 2
                 if (! isempty (k_vals))
                   der = k_vals(:,1);
                 else
                   der = feval (func, z(i-1) , u(:,i-1),
                                options.vfunarguments{:});
                 endif
                 u_interp = quadratic_interpolation ([z(i-1) z(i)],
                                                     [u(:,i-1) u(:,i)],
                                                     der, tspan(counter));
               case 3
                 u_interp = ...
-                  hermite_cubic_interpolation ([z(i-1) z(i)],
-                                               [u(:,i-1) u(:,i)],
-                                               [k_vals(:,1) k_vals(:,end)],
-                                               tspan(counter));
+                hermite_cubic_interpolation ([z(i-1) z(i)],
+                                             [u(:,i-1) u(:,i)],
+                                             [k_vals(:,1) k_vals(:,end)],
+                                             tspan(counter));
               case 4
                 ## if ode45 is used without local extrapolation this function
                 ## doesn't require a new function evaluation.
                 u_interp = dorpri_interpolation ([z(i-1) z(i)],
                                                  [u(:,i-1) u(:,i)],
                                                  k_vals, tspan(counter));
               case 5
                 ## ode45 with Dormand-Prince scheme:
@@ -212,20 +219,20 @@ function solution = integrate_adaptive (
                 u_half = u(:,i-1) ...
                          + 1/2*dt*((6025192743/30085553152) * k_vals(:,1)
                                    + (51252292925/65400821598) * k_vals(:,3)
                                    - (2691868925/45128329728) * k_vals(:,4)
                                    + (187940372067/1594534317056) * k_vals(:,5)
                                    - (1776094331/19743644256) * k_vals(:,6)
                                    + (11237099/235043384) * k_vals(:,7));
                 u_interp = ...
-                  hermite_quartic_interpolation ([z(i-1) z(i)],
-                                                 [u(:,i-1) u_half u(:,i)],
-                                                 [k_vals(:,1) k_vals(:,end)],
-                                                 tspan(counter));
+                hermite_quartic_interpolation ([z(i-1) z(i)],
+                                               [u(:,i-1) u_half u(:,i)],
+                                               [k_vals(:,1) k_vals(:,end)],
+                                               tspan(counter));
 
                 ## it is also possible to do a new function evaluation and use
                 ## the quintic hermite interpolator
                 ## f_half = feval (func, t+1/2*dt, u_half,
                 ##                 options.vfunarguments{:});
                 ## u_interp =
                 ##   hermite_quintic_interpolation ([z(i-1) z(i)],
                 ##                                  [u(:,i-1) u_half u(:,i)],
@@ -234,26 +241,26 @@ function solution = integrate_adaptive (
               otherwise
                 warning ("High order interpolation not yet implemented: ",
                          "using cubic iterpolation instead");
                 der(:,1) = feval (func, z(i-1) , u(:,i-1),
                                   options.vfunarguments{:});
                 der(:,2) = feval (func, z(i) , u(:,i),
                                   options.vfunarguments{:});
                 u_interp = ...
-                  hermite_cubic_interpolation ([z(i-1) z(i)],
-                                               [u(:,i-1) u(:,i)],
-                                               der, tspan(counter));
+                hermite_cubic_interpolation ([z(i-1) z(i)],
+                                             [u(:,i-1) u(:,i)],
+                                             der, tspan(counter));
             endswitch
 
             ## add the interpolated value of the solution
             u = [u(:,1:i-1), u_interp, u(:,i:end)];
             
             ## add the time requested
-            z = [z(1:i-1);tspan(counter);z(i:end)];
+            z = [z(1:i-1); tspan(counter); z(i:end)];
 
             ## update counters
             counter++;
             i++;
           endwhile
 
           ## if new time requested is not out of this interval
           if ((counter <= k)
@@ -305,34 +312,36 @@ function solution = integrate_adaptive (
         endif
       endif
       
       ## Call event only if a valid result has been found, therefore this
       ## code fragment has moved here. Stop integration if veventbreak is
       ## true
       if (options.vhaveeventfunction)
         solution.vevent = odepkg_event_handle (options.Events, t(end),
-            x(:,end), [], options.vfunarguments{:});
+                                               x(:,end), [], options.vfunarguments{:});
         if (! isempty (solution.vevent{1})
             && solution.vevent{1} == 1)
           t(solution.vcntloop-1,:) = solution.vevent{3}(end,:);
           x(:,solution.vcntloop-1) = solution.vevent{4}(end,:)';
           solution.vunhandledtermination = false; 
           break
         endif
       endif
       
     else
+      
       facmax = 1.0;
+      
     endif
     
     ## Compute next timestep, formula taken from Hairer
     err += eps;    # adding an eps to avoid divisions by zero
-    dt = dt * min (facmax, max (facmin,
-                                fac * (1 / err)^(1 / (order + 1))));
+    dt = dt * min (facmax,
+                   max (facmin, fac * (1 / err)^(1 / (order + 1))));
     dt = vdirection * min (abs (dt), options.MaxStep);
     
     ## Update counters that count the number of iteration cycles
     solution.vcntcycles = solution.vcntcycles + 1; # Needed for cost statistics
     vcntiter = vcntiter + 1; # Needed to find iteration problems
 
     ## Stop solving because in the last 1000 steps no successful valid
     ## value has been found
@@ -378,12 +387,8 @@ function solution = integrate_adaptive (
   d = vdirection * t((end-(j-1)):end) > vdirection * tspan(end)*ones (j, 1);
   f = sum (d);
 
   ## Remove not-requested values of time and solution
   solution.t = t(1:end-f);
   solution.x = x(:,1:end-f)';
   
 endfunction
-
-## Local Variables: ***
-## mode: octave ***
-## End: ***
diff --git a/scripts/ode/private/runge_kutta_45_dorpri.m b/scripts/ode/private/runge_kutta_45_dorpri.m
--- a/scripts/ode/private/runge_kutta_45_dorpri.m
+++ b/scripts/ode/private/runge_kutta_45_dorpri.m
@@ -58,17 +58,18 @@
 ## to adapt the computation to what is needed.
 ##
 ## Sixth input parameter is optional and describes the Runge-Kutta evaluations
 ## of the previous step to use in a FSAL scheme.
 ## @end deftypefn
 ##
 ## @seealso{odepkg}
 
-function varargout = runge_kutta_45_dorpri (f, t, x, dt, varargin)
+function [t_out, x_out, x_est, k] = ...
+         runge_kutta_45_dorpri (f, t, x, dt, varargin)
 
   persistent a = [0           0          0           0        0          0;
                   1/5         0          0           0        0          0;
                   3/40        9/40       0           0        0          0;
                   44/45      -56/15      32/9        0        0          0;
                   19372/6561 -25360/2187 64448/6561 -212/729  0          0;
                   9017/3168  -355/33     46732/5247  49/176  -5103/18656 0;
                   35/384      0          500/1113    125/192 -2187/6784  11/84];
@@ -78,40 +79,41 @@ function varargout = runge_kutta_45_dorp
   ## persistent c_prime = [(1951/21600) 0 (22642/50085) (451/720), ...
   ##                       (-12231/42400) (649/6300) (1/60)];
   persistent c_prime = [(5179/57600) 0 (7571/16695) (393/640), ...
                         (-92097/339200) (187/2100)  (1/40)];
 
   s = t + dt * b;
   cc = dt * c;
   aa = dt * a;
-  
-  args = varargin{1}.vfunarguments;
   k = zeros (rows (x), 7);
 
-  if (nargin == 5) # only the options are passed
-    k(:,1) = feval (f, t, x, args{:});
-  elseif (nargin == 6) # both the options and the k values are passed
-    k(:,1) = varargin{2}(:,end); # FSAL property
+  if (nargin >= 5) # options are passed
+    args = varargin{1}.vfunarguments;
+    if (nargin >= 6) # both the options and the k values are passed
+      k(:,1) = varargin{2}(:,end); # FSAL property
+    else      
+      k(:,1) = feval (f, t, x, args{:});
+    endif
+  else
+    args = {};
   endif
-  
-  k(:,1) = feval (f, s(1), x, args{:});
+
   k(:,2) = feval (f, s(2), x + k(:,1) * aa(2, 1).', args{:});
   k(:,3) = feval (f, s(3), x + k(:,1:2) * aa(3, 1:2).', args{:});
   k(:,4) = feval (f, s(4), x + k(:,1:3) * aa(4, 1:3).', args{:});
   k(:,5) = feval (f, s(5), x + k(:,1:4) * aa(5, 1:4).', args{:});
   k(:,6) = feval (f, s(6), x + k(:,1:5) * aa(6, 1:5).', args{:});
 
   ## compute new time and new values for the unkwnowns
-  varargout{1} = t + dt;
-  varargout{2} = x + k(:,1:6) * cc(:); # 5th order approximation
+  t_out = t + dt;
+  x_out = x + k(:,1:6) * cc(:); # 5th order approximation
 
   ## if the estimation of the error is required
   if (nargout >= 3)
     ## new solution to be compared with the previous one
-    k(:,7) = feval (f, t + dt, varargout{2}, args{:});
+    k(:,7) = feval (f, t + dt, x_out, args{:});
     cc_prime = dt * c_prime;
-    varargout{3} = x + k * cc_prime(:); # x_est
-    varargout{4} = k;
+    x_est = x + k * cc_prime(:); # x_est
   endif
   
 endfunction
 
