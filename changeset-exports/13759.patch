# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1319689412 25200
#      Wed Oct 26 21:23:32 2011 -0700
# Node ID c4b6ea833fa5dfd15d9298a2c39f9b6a4833a6b2
# Parent  9586dc4e838b034077e2a08b70752f2194c2791c
Fix infinite loop with null patterns in regexp (Bug #34101, Bug #33258)

* regexp.cc: For zero length matches, move to next character and
keep processing unless end of string is reached.

diff --git a/src/DLD-FUNCTIONS/regexp.cc b/src/DLD-FUNCTIONS/regexp.cc
--- a/src/DLD-FUNCTIONS/regexp.cc
+++ b/src/DLD-FUNCTIONS/regexp.cc
@@ -417,19 +417,22 @@ octregexp_list (const octave_value_list 
                      nm.c_str (), matches);
               pcre_free (re);
               return 0;
             }
           else if (matches == PCRE_ERROR_NOMATCH)
             break;
           else if (ovector[1] <= ovector[0])
             {
-              // FIXME: Zero sized match!! Is this the right thing to do?
+              // Zero sized match.  Skip to next char.
               idx = ovector[0] + 1;
-              continue;
+              if (idx < buffer.length ())
+                continue;
+              else
+                break;
             }
           else
             {
               int pos_match = 0;
               Matrix te (matches-1, 2);
 
               for (int i = 1; i < matches; i++)
                 {
@@ -1035,16 +1038,18 @@ Alternatively, use (?x) in the pattern.\
 %!   warning("off");
 %!   regexp(s, '(\s*-*\d+[.]*\d*\s*)+\n');
 %! unwind_protect_cleanup
 %!   warning(ws);
 %! end_unwind_protect
 
 ## seg-fault test
 %!assert(regexp("abcde","."),[1,2,3,4,5])
+## Infinite loop test
+%!assert (isempty (regexp("abcde", "")))
 
 ## Check that anchoring of pattern works correctly
 %!assert(regexp('abcabc','^abc'),1);
 %!assert(regexp('abcabc','abc$'),4);
 %!assert(regexp('abcabc','^abc$'),zeros(1,0));
 
 %!test
 %! [s, e, te, m, t] = regexp(' No Match ', 'f(.*)uck');
