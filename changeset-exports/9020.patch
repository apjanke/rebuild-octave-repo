# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1238033098 14400
#      Wed Mar 25 22:04:58 2009 -0400
# Node ID 728e7943752d09ec7547169446403818db6c0eac
# Parent  12ca81f1fa9951c06c895f1ad7fe4b170fdbe006
EIG.cc: avoid volatile decl for tmp variable

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,14 @@
 2009-03-25  John W. Eaton  <jwe@octave.org>
 
+	* EIG.cc (EIG::init (const Matrix&, bool),
+	EIG::init (const Matrix&, const Matrix&, bool)):
+	Avoid volaatile declaration for tmp variable.
+
 	* Makefile.in (MATRIX_INC): Add Sparse-diag-op-defs.h and
 	Sparse-perm-op-defs.h to the list.
 
 2009-03-25  Jaroslav Hajek  <highegg@gmail.com>
 	
 	* oct-inttypes.cc (INT_DOUBLE_BINOP_DECL (*, uint64),
 	INT_DOUBLE_BINOP_DECL (*, int64)): x -> y where appropriate.
 
diff --git a/liboctave/EIG.cc b/liboctave/EIG.cc
--- a/liboctave/EIG.cc
+++ b/liboctave/EIG.cc
@@ -156,18 +156,18 @@ EIG::init (const Matrix& a, bool calc_ev
   double *tmp_data = atmp.fortran_vec ();
 
   Array<double> wr (n);
   double *pwr = wr.fortran_vec ();
 
   Array<double> wi (n);
   double *pwi = wi.fortran_vec ();
 
-  volatile octave_idx_type nvr = calc_ev ? n : 0;
-  Matrix vr (nvr, nvr);
+  octave_idx_type tnvr = calc_ev ? n : 0;
+  Matrix vr (tnvr, tnvr);
   double *pvr = vr.fortran_vec ();
 
   octave_idx_type lwork = -1;
   double dummy_work;
 
   double *dummy = 0;
   octave_idx_type idummy = 1;
 
@@ -199,16 +199,17 @@ EIG::init (const Matrix& a, bool calc_ev
 
       if (info > 0)
 	{
 	  (*current_liboctave_error_handler) ("dgeev failed to converge");
 	  return info;
 	}
 
       lambda.resize (n);
+      octave_idx_type nvr = calc_ev ? n : 0;
       v.resize (nvr, nvr);
 
       for (octave_idx_type j = 0; j < n; j++)
 	{
 	  if (wi.elem (j) == 0.0)
 	    {
 	      lambda.elem (j) = Complex (wr.elem (j));
 	      for (octave_idx_type i = 0; i < nvr; i++)
@@ -502,18 +503,18 @@ EIG::init (const Matrix& a, const Matrix
   double *par = ar.fortran_vec ();
 
   Array<double> ai (n);
   double *pai = ai.fortran_vec ();
 
   Array<double> beta (n);
   double *pbeta = beta.fortran_vec ();
 
-  volatile octave_idx_type nvr = calc_ev ? n : 0;
-  Matrix vr (nvr, nvr);
+  octave_idx_type tnvr = calc_ev ? n : 0;
+  Matrix vr (tnvr, tnvr);
   double *pvr = vr.fortran_vec ();
 
   octave_idx_type lwork = -1;
   double dummy_work;
 
   double *dummy = 0;
   octave_idx_type idummy = 1;
 
@@ -549,16 +550,17 @@ EIG::init (const Matrix& a, const Matrix
 
       if (info > 0)
 	{
 	  (*current_liboctave_error_handler) ("dggev failed to converge");
 	  return info;
 	}
 
       lambda.resize (n);
+      octave_idx_type nvr = calc_ev ? n : 0;
       v.resize (nvr, nvr);
 
       for (octave_idx_type j = 0; j < n; j++)
 	{
 	  if (ai.elem (j) == 0.0)
 	    {
 	      lambda.elem (j) = Complex (ar.elem (j) / beta.elem (j));
 	      for (octave_idx_type i = 0; i < nvr; i++)
