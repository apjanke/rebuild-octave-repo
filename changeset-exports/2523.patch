# HG changeset patch
# User jwe
# Date 848104404 0
#      Sat Nov 16 00:33:24 1996 +0000
# Node ID 007e977442b8b18718613c9b909635e55495141b
# Parent  4f095783ee437ca51676c44d7e2dfcb8f8e2865d
[project @ 1996-11-16 00:33:22 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+Fri Nov 15 18:13:00 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* plot/__plt__.m: Add explicit replot after last command is
+	issued, to force all lines to be displayed.  Hmm.
+
 Thu Nov 14 00:06:34 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* plot/axis.m, plot/bottom_title.m, plot/contour.m,
 	plot/figure.m, plot/grid.m, plot/loglog.m, plot/mesh.m,
 	plot/mplot.m, plot/multiplot.m, plot/oneplot.m, plot/plot.m,
 	plot/plot_border.m, plot/polar.m, plot/semilogx.m,
 	plot/semilogy.m, plot/subplot.m, plot/subwindow.m, plot/title.m,
 	plot/top_title.m, plot/xlabel.m, plot/ylabel.m, plot/zlabel.m:
diff --git a/scripts/plot/__plt__.m b/scripts/plot/__plt__.m
--- a/scripts/plot/__plt__.m
+++ b/scripts/plot/__plt__.m
@@ -23,17 +23,17 @@ function __plt__ (caller, ...)
 
   if (nargin == 2)
 
     __plt1__ (va_arg (), "");
 
   elseif (nargin > 2)
 
     first_plot = 1;
-    hold_state = ishold;
+    hold_state = ishold ();
 
     unwind_protect
 
       x = va_arg ();
       nargin = nargin - 2;
       x_set = 1;
       y_set = 0;
 
@@ -79,16 +79,22 @@ function __plt__ (caller, ...)
       if  (x_set)
 	if (y_set)
 	  __plt2__ (x, y, fmt);
 	else
 	  __plt1__ (x, fmt);
 	endif
       endif
 
+      ## Something fishy is going on.  I don't think this should be
+      ## necessary, but without it, sometimes not all the lines from a
+      ## given plot command appear on the screen.
+
+      replot;
+
     unwind_protect_cleanup
 
       if (! hold_state)
         hold off;
       endif
 
     end_unwind_protect
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,12 @@
 Fri Nov 15 13:48:02 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* pt-plot.cc: Put semicolons at the ends of all plot commands.
+
 	* defaults.cc (subst_octave_home): Start subsequent searchs from
 	the end of the replaced text.
 
 	* pr-output.cc (pr_any_float): Kluge for SCO systems.
 
 	* pr-output.cc (pr_any_float, pr_complex): Don't declare inline.
 
 	* mappers.cc: Include lo-ieee.h, for isinf and isnan on SCO
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -97,38 +97,42 @@ static SLStack <string> tmp_files;
 static oprocstream *plot_stream = 0;
 
 // ID of the plotter process.
 static pid_t plot_stream_pid = 0;
 
 // Use shortest possible abbreviations to minimize trouble caused by
 // gnuplot's fixed-length command line buffer.
 
-#ifndef GNUPLOT_COMMAND_PLOT  
-#define GNUPLOT_COMMAND_PLOT   "pl"
+#ifndef GPLOT_CMD_PLOT  
+#define GPLOT_CMD_PLOT   "pl"
 #endif
 
-#ifndef GNUPLOT_COMMAND_REPLOT 
-#define GNUPLOT_COMMAND_REPLOT "rep"
+#ifndef GPLOT_CMD_REPLOT 
+#define GPLOT_CMD_REPLOT "rep"
+#endif
+
+#ifndef GPLOT_CMD_SPLOT 
+#define GPLOT_CMD_SPLOT  "sp"
 #endif
 
-#ifndef GNUPLOT_COMMAND_SPLOT 
-#define GNUPLOT_COMMAND_SPLOT  "sp"
+#ifndef GPLOT_CMD_USING
+#define GPLOT_CMD_USING  "u"
 #endif
 
-#ifndef GNUPLOT_COMMAND_USING
-#define GNUPLOT_COMMAND_USING  "u"
+#ifndef GPLOT_CMD_WITH 
+#define GPLOT_CMD_WITH   "w"
 #endif
 
-#ifndef GNUPLOT_COMMAND_WITH 
-#define GNUPLOT_COMMAND_WITH   "w"
+#ifndef GPLOT_CMD_TITLE
+#define GPLOT_CMD_TITLE  "t"
 #endif
 
-#ifndef GNUPLOT_COMMAND_TITLE
-#define GNUPLOT_COMMAND_TITLE  "t"
+#ifndef GPLOT_CMD_END
+#define GPLOT_CMD_END ";\n"
 #endif
 
 static void
 plot_stream_death_handler (pid_t pid, int)
 {
   close_plot_stream ();
 
   warning ("connection to external plotter (pid = %d) lost --", pid);
@@ -194,49 +198,49 @@ open_plot_stream (void)
     }
 
   if (! error_state && plot_stream && *plot_stream && ! initialized)
     {
       initialized = true;
       *plot_stream << "set data style lines\n";
 
       if (gnuplot_terminal_type)
-	*plot_stream << "set term " << gnuplot_terminal_type << "\n";
+	*plot_stream << "set term " << gnuplot_terminal_type << GPLOT_CMD_END;
     }
 }
 
 static int
 send_to_plot_stream (const char *cmd)
 {
   if (! (plot_stream && *plot_stream))
     {
       open_plot_stream ();
 
       if (error_state)
 	return -1;
     }
 
-  int replot_len = strlen (GNUPLOT_COMMAND_REPLOT);
-  int splot_len = strlen (GNUPLOT_COMMAND_SPLOT);
-  int plot_len = strlen (GNUPLOT_COMMAND_PLOT);
+  int replot_len = strlen (GPLOT_CMD_REPLOT);
+  int splot_len = strlen (GPLOT_CMD_SPLOT);
+  int plot_len = strlen (GPLOT_CMD_PLOT);
 
-  bool is_replot = (strncmp (cmd, GNUPLOT_COMMAND_REPLOT, replot_len) == 0);
-  bool is_splot = (strncmp (cmd, GNUPLOT_COMMAND_SPLOT, splot_len) == 0);
-  bool is_plot = (strncmp (cmd, GNUPLOT_COMMAND_PLOT, plot_len) == 0);
+  bool is_replot = (strncmp (cmd, GPLOT_CMD_REPLOT, replot_len) == 0);
+  bool is_splot = (strncmp (cmd, GPLOT_CMD_SPLOT, splot_len) == 0);
+  bool is_plot = (strncmp (cmd, GPLOT_CMD_PLOT, plot_len) == 0);
 
   if (plot_line_count == 0 && is_replot)
     error ("replot: no previous plot");
   else
     {
       *plot_stream << cmd;
 
       if (! (is_replot || is_splot || is_plot)
 	  && plot_line_count > 0
 	  && Vautomatic_replot)
-	*plot_stream << GNUPLOT_COMMAND_REPLOT << "\n";
+	*plot_stream << GPLOT_CMD_REPLOT << GPLOT_CMD_END;
 
       plot_stream->flush ();
     }
 
   return 0;
 }
 
 // Plotting, eh?
@@ -258,45 +262,45 @@ tree_plot_command::eval (void)
   ostrstream plot_buf;
 
   switch (ndim)
     {
     case 1:
       if (plot_line_count == 0)
 	{
 	  if (plot_list)
-	    plot_buf << GNUPLOT_COMMAND_PLOT;
+	    plot_buf << GPLOT_CMD_PLOT;
 	  else
 	    {
 	      ::error ("replot: must have something to plot");
 	      return;
 	    }
 	}
       else
-	plot_buf << GNUPLOT_COMMAND_REPLOT;
+	plot_buf << GPLOT_CMD_REPLOT;
       break;
 
     case 2:
       if (clear_before_plotting || plot_line_count == 0)
 	{
 	  plot_line_count = 0;
-	  plot_buf << GNUPLOT_COMMAND_PLOT;
+	  plot_buf << GPLOT_CMD_PLOT;
 	}
       else
-	plot_buf << GNUPLOT_COMMAND_REPLOT;
+	plot_buf << GPLOT_CMD_REPLOT;
       break;
 
     case 3:
       if (clear_before_plotting || plot_line_count == 0)
 	{
 	  plot_line_count = 0;
-	  plot_buf << GNUPLOT_COMMAND_SPLOT;
+	  plot_buf << GPLOT_CMD_SPLOT;
 	}
       else
-	plot_buf << GNUPLOT_COMMAND_REPLOT;
+	plot_buf << GPLOT_CMD_REPLOT;
       break;
 
     default:
       gripe_2_or_3_dim_plot ();
       return;
     }
 
   if (range)
@@ -314,17 +318,17 @@ tree_plot_command::eval (void)
   if (plot_list)
     {
       int status = plot_list->print (ndim, plot_buf);
 
       if (error_state || status < 0)
 	return;
     }
 
-  plot_buf << "\n" << ends;
+  plot_buf << GPLOT_CMD_END << ends;
 
   // Just testing...
   //  char *message = plot_buf.str ();
   //  cout << "[*]" << message << "[*]\n";
 
   if (parametric_plot && ndim == 2)
     {
       warning ("can't make 2D parametric plot -- setting noparametric...");
@@ -513,17 +517,17 @@ subplot_using::print (int ndim, int n_ma
   int status = eval (ndim, n_max);
 
   if (status < 0)
     return -1;
 
   for (int i = 0; i < qual_count; i++)
     {
       if (i == 0)
-	plot_buf << " " << GNUPLOT_COMMAND_USING << " ";
+	plot_buf << " " << GPLOT_CMD_USING << " ";
       else
 	plot_buf << ":";
 
       plot_buf << val (i);
     }
 
   return 0;
 }
@@ -540,17 +544,17 @@ subplot_style::~subplot_style (void)
   delete sp_pointtype;
 }
 
 int
 subplot_style::print (ostrstream& plot_buf)
 {
   if (! sp_style.empty ())
     {
-      plot_buf << " " << GNUPLOT_COMMAND_WITH << " " << sp_style;
+      plot_buf << " " << GPLOT_CMD_WITH << " " << sp_style;
 
       if (sp_linetype)
 	{
 	  octave_value tmp = sp_linetype->eval (false);
 	  if (! error_state && tmp.is_defined ())
 	    {
 	      double val = tmp.double_value ();
 	      if (xisnan (val))
@@ -748,27 +752,27 @@ subplot::print (int ndim, ostrstream& pl
 
   if (status < 0)
     return -1;
 
   if (sp_title_clause)
     {
       octave_value tmp = sp_title_clause->eval (false);
       if (! error_state && tmp.is_string ())
-	plot_buf << " " << GNUPLOT_COMMAND_TITLE << " "
+	plot_buf << " " << GPLOT_CMD_TITLE << " "
 	  << '"' << tmp.string_value () << '"';
       else
 	{
 	  warning ("line title must be a string");
-	  plot_buf << " " << GNUPLOT_COMMAND_TITLE << " "
+	  plot_buf << " " << GPLOT_CMD_TITLE << " "
 	    << '"' << "line " << plot_line_count << '"';
 	}
     }
   else
-    plot_buf << " " << GNUPLOT_COMMAND_TITLE << " "
+    plot_buf << " " << GPLOT_CMD_TITLE << " "
       << '"' << "line " << plot_line_count << '"';
 
   if (sp_style_clause)
     {
       int status = sp_style_clause->print (plot_buf);
       if (status < 0)
 	return -1;
     }
@@ -887,17 +891,17 @@ close_plot_stream (void)
 }
 
 void
 do_external_plotter_cd (const string& newdir)
 {
   if (plot_stream && *plot_stream)
     {
       ostrstream plot_buf;
-      plot_buf << "cd \"" << newdir << "\"\n" << ends;
+      plot_buf << "cd \"" << newdir << "\"" GPLOT_CMD_END << ends;
       char *message = plot_buf.str ();
       send_to_plot_stream (message);
       delete [] message;
     }
 }
 
 DEFUN (clearplot, , ,
   "clearplot (): clear the plot window")
@@ -1010,25 +1014,25 @@ set plotting options for gnuplot")
       else if (almost_match ("noparametric", argv[1], 5))
 	parametric_plot = false;
       else if (almost_match ("term", argv[1], 1))
 	{
 	  delete [] gnuplot_terminal_type;
 	  ostrstream buf;
 	  for (int i = 2; i < argc; i++)
 	    buf << argv[i] << " ";
-	  buf << "\n" << ends;
+	  buf << GPLOT_CMD_END << ends;
 	  gnuplot_terminal_type = buf.str ();
 	}
     }
 
   for (int i = 0; i < argc; i++)
     plot_buf << argv[i] << " ";
 
-  plot_buf << "\n" << ends;
+  plot_buf << GPLOT_CMD_END << ends;
 
   char *plot_command = plot_buf.str ();
   send_to_plot_stream (plot_command);
 
   delete [] plot_command;
 
   return retval;
 }
@@ -1054,17 +1058,17 @@ show plotting options")
   if (error_state)
     return retval;
 
   ostrstream plot_buf;
 
   for (int i = 0; i < argc; i++)
     plot_buf << argv[i] << " ";
 
-  plot_buf << "\n" << ends;
+  plot_buf << GPLOT_CMD_END << ends;
 
   char *plot_command = plot_buf.str ();
   send_to_plot_stream (plot_command);
 
   delete [] plot_command;
 
   return retval;
 }
