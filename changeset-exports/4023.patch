# HG changeset patch
# User jwe
# Date 1028703281 0
#      Wed Aug 07 06:54:41 2002 +0000
# Node ID ef3caf27cb9ceee58d756fb385732d0aaf9ea547
# Parent  789c4112a37dbebe259d9bcadfb5bb29bf982b2a
[project @ 2002-08-07 06:54:41 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,24 @@
+2002-08-07  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pt-binop.h (tree_binary_expression::is_binary_expression):
+	New function, return true.
+	(tree_boolean_expression::is_boolean_expression): New function,
+	return true.
+	* pt-exp.h (tree_expression::is_binary_expression): New function.
+	(tree_expression::is_boolean_expression): Likewise.
+	* parse.y (EXPR_OR_OR): Now lower precedence than EXPR_AND_AND.
+	(EXPR_OR): Now lower precedence than EXPR_AND.
+	(make_boolean_op): Maybe warn about change in precedence.
+	(make_binary_op): Likewise.
+	(Vwarn_precedence_change): New static variable.
+	(warn_precedence_change): New function.
+	(Vwarn_precedence_change): New DEFVAR.
+
 2002-08-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* data.cc (ANY_ALL): Improve arg checks.
 
 2002-08-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov.h (octave_value::assign_op): New enum values, op_pow_eq and
 	op_el_pow_eq.
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -89,16 +89,21 @@ static bool Vwarn_function_name_clash;
 // TRUE means warn about function files that have time stamps in the future.
 bool Vwarn_future_time_stamp;
 
 // If TRUE, generate warning if a statement in a function is not
 // terminated with a semicolon.  Useful for checking functions that
 // should only produce output using explicit printing statements.
 static bool Vwarn_missing_semicolon;
 
+// If TRUE, generate warning about the meaning of code changing due to
+// changes in precedence levels for various ops (typically for Matlab
+// compatibility).
+static bool Vwarn_precedence_change;
+
 // Temporary symbol table pointer used to cope with bogus function syntax.
 symbol_table *tmp_local_sym_tab = 0;
 
 // The current input line number.
 int input_line_number = 0;
 
 // The column of the current token.
 int current_input_column = 1;
@@ -440,18 +445,20 @@ set_stmt_print_flag (tree_statement_list
 %type <plot_range_type> ranges1 
 %type <subplot_using_type> using using1 
 %type <subplot_style_type> style
 %type <subplot_axes_type> axes
 
 // Precedence and associativity.
 %left ';' ',' '\n'
 %right '=' ADD_EQ SUB_EQ MUL_EQ DIV_EQ LEFTDIV_EQ POW_EQ EMUL_EQ EDIV_EQ ELEFTDIV_EQ EPOW_EQ OR_EQ AND_EQ LSHIFT_EQ RSHIFT_EQ
-%left EXPR_AND_AND EXPR_OR_OR
-%left EXPR_AND EXPR_OR
+%left EXPR_OR_OR
+%left EXPR_AND_AND
+%left EXPR_OR
+%left EXPR_AND
 %left EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
 %left LSHIFT RSHIFT
 %left ':'
 %left '-' '+' EPLUS EMINUS
 %left '*' '/' LEFTDIV EMUL EDIV ELEFTDIV
 %left QUOTE TRANSPOSE
 %left UNARY PLUS_PLUS MINUS_MINUS EXPR_NOT
 %right POW EPOW
@@ -1958,16 +1965,25 @@ make_binary_op (int op, tree_expression 
       break;
 
     case EXPR_AND:
       t = octave_value::op_el_and;
       break;
 
     case EXPR_OR:
       t = octave_value::op_el_or;
+      if (Vwarn_precedence_change
+          && op1->paren_count () == 0 && op2->is_binary_expression ())
+        {
+	  tree_binary_expression *e
+	    = dynamic_cast<tree_binary_expression *> (op2);
+
+	  if (e->op_type () == octave_value::op_el_and)
+	    warning ("meaning may have changed due to change in precedence for & and | operators");
+        }
       break;
 
     default:
       panic_impossible ();
       break;
     }
 
   int l = tok_val->line ();
@@ -1990,16 +2006,25 @@ make_boolean_op (int op, tree_expression
   switch (op)
     {
     case EXPR_AND_AND:
       t = tree_boolean_expression::bool_and;
       break;
 
     case EXPR_OR_OR:
       t = tree_boolean_expression::bool_or;
+      if (Vwarn_precedence_change
+          && op1->paren_count () == 0 && op2->is_boolean_expression ())
+        {
+	  tree_boolean_expression *e
+	    = dynamic_cast<tree_boolean_expression *> (op2);
+
+	  if (e->op_type () == tree_boolean_expression::bool_and)
+	    warning ("meaning may have changed due to change in precedence for && and || operators");
+        }
       break;
 
     default:
       panic_impossible ();
       break;
     }
 
   int l = tok_val->line ();
@@ -3666,16 +3691,24 @@ static int
 warn_missing_semicolon (void)
 {
   Vwarn_missing_semicolon = check_preference ("warn_missing_semicolon");
 
   return 0;
 }
 
 static int
+warn_precedence_change (void)
+{
+  Vwarn_precedence_change = check_preference ("warn_precedence_change");
+
+  return 0;
+}
+
+static int
 warn_variable_switch_label (void)
 {
   Vwarn_variable_switch_label
     = check_preference ("warn_variable_switch_label");
 
   return 0;
 }
 
@@ -3774,16 +3807,25 @@ if it finds a function file with a time 
   DEFVAR (warn_missing_semicolon, 0.0, warn_missing_semicolon,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} warn_missing_semicolon\n\
 If the value of this variable is nonzero, Octave will warn when\n\
 statements in function definitions don't end in semicolons.  The default\n\
 value is 0.\n\
 @end defvr");
 
+  DEFVAR (warn_precedence_change, 1.0, warn_precedence_change,
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} warn_precedence_change\n\
+If the value of this variable is nonzero, Octave will warn about\n\
+possible changes in the meaning of some code due to changes in\n\
+precedence for some operators.  Precedence changes have typically\n\
+been made for Matlab compatibility.  The default value is 1.\n\
+@end defvr");
+
   DEFVAR (warn_variable_switch_label, 0.0, warn_variable_switch_label,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} warn_variable_switch_label\n\
 If the value of this variable is nonzero, Octave will print a warning if\n\
 a switch label is not a constant or constant expression\n\
 @end defvr");
 
 }
diff --git a/src/pt-binop.h b/src/pt-binop.h
--- a/src/pt-binop.h
+++ b/src/pt-binop.h
@@ -57,26 +57,30 @@ public:
     : tree_expression (l, c), op_lhs (a), op_rhs (b), etype (t) { }
 
   ~tree_binary_expression (void)
     {
       delete op_lhs;
       delete op_rhs;
     }
 
+  bool is_binary_expression (void) const { return true; }
+
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue (void);
 
   octave_value_list rvalue (int nargout);
 
   void eval_error (void);
 
   std::string oper (void) const;
 
+  octave_value::binary_op op_type (void) const { return etype; }
+
   tree_expression *lhs (void) { return op_lhs; }
   tree_expression *rhs (void) { return op_rhs; }
 
   void accept (tree_walker& tw);
 
 protected:
 
   // The operands for the expression.
@@ -113,24 +117,28 @@ public:
     : tree_binary_expression (l, c), etype (t) { }
 
   tree_boolean_expression (tree_expression *a, tree_expression *b,
 			   int l = -1, int c = -1, type t = unknown)
     : tree_binary_expression (a, b, l, c), etype (t) { }
 
   ~tree_boolean_expression (void) { }
 
+  bool is_boolean_expression (void) const { return true; }
+
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue (void);
 
   octave_value_list rvalue (int nargout);
 
   std::string oper (void) const;
 
+  type op_type (void) const { return etype; }
+
 private:
 
   // The type of the expression.
   type etype;
 
   // No copying!
 
   tree_boolean_expression (const tree_boolean_expression&);
diff --git a/src/pt-exp.h b/src/pt-exp.h
--- a/src/pt-exp.h
+++ b/src/pt-exp.h
@@ -54,16 +54,20 @@ public:
   virtual bool is_identifier (void) const { return false; }
 
   virtual bool is_index_expression (void) const { return false; }
 
   virtual bool is_assignment_expression (void) const { return false; }
 
   virtual bool is_prefix_expression (void) const { return false; }
 
+  virtual bool is_binary_expression (void) const { return false; }
+
+  virtual bool is_boolean_expression (void) const { return false; }
+
   virtual bool is_logically_true (const char *);
 
   virtual bool lvalue_ok (void) const { return false; }
 
   virtual bool rvalue_ok (void) const { return false; }
 
   virtual octave_value rvalue (void);
 
