# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1446436752 28800
#      Sun Nov 01 19:59:12 2015 -0800
# Node ID 3d8aee0b74158db18b235d2ad70c6b11371580c2
# Parent  7ae6bbf0a5670476f8795292e02055424767a5f7
Allow assigning row vector to column of Sparse array (bug #45589).

* Sparse.cc (assign): Check for case where a row vector or column vector is
assigned to a column or row index respectively.  Transpose the right-hand side
argument before assignment.  Add BIST test for bug #45589.

diff --git a/liboctave/array/Sparse.cc b/liboctave/array/Sparse.cc
--- a/liboctave/array/Sparse.cc
+++ b/liboctave/array/Sparse.cc
@@ -2208,16 +2208,20 @@ Sparse<T>::assign (const idx_vector& idx
     {
       n = idx_i.length (nr);
       m = idx_j.length (nc);
       if (rhs.nnz () != 0)
         assign (idx_i, idx_j, Sparse<T> (n, m, rhs.data (0)));
       else
         assign (idx_i, idx_j, Sparse<T> (n, m));
     }
+  else if (idx_i.length (nr) == m && idx_j.length (nc) == n && (n==1 || m==1))
+    {
+      assign (idx_i, idx_j, rhs.transpose ());
+    }
   else
     gripe_nonconformant  ("=", idx_i.length (nr), idx_j.length (nc), n, m);
 }
 
 // Can't use versions of these in Array.cc due to duplication of the
 // instantiations for Array<double and Sparse<double>, etc
 template <class T>
 bool
@@ -2891,16 +2895,24 @@ bug #35570:
 %!test a=sparse (2,1);
 %! assert (all (a) == sparse ([0]));
 %! assert (size (all (a)), [1 1]);
 %!test a=sparse (1,2);
 %! assert (all (a) == sparse ([0]));
 %! assert (size (all (a)), [1 1]);
 %!test a=sparse (2,2); assert (isequal (all (a), sparse ([0 0])));
 
+## Test assigning row to a column slice (bug #45589)
+%!test
+%! a = sparse (magic (3));
+%! b = a;
+%! a(1,:) = 1:3;
+%! b(1,:) = (1:3)';
+%! assert (a, b);
+
 */
 
 template <class T>
 void
 Sparse<T>::print_info (std::ostream& os, const std::string& prefix) const
 {
   os << prefix << "rep address: " << rep << "\n"
      << prefix << "rep->nzmx:   " << rep->nzmx  << "\n"
