# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1238342984 -7200
#      Sun Mar 29 18:09:44 2009 +0200
# Node ID 2da105bf2507729c5cccbfad3eeaf0d67dc20c14
# Parent  8b263623d0f3dacd89a036ea4dc93ef49372e117
remove redundant checks from Array<T>::index

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1267,34 +1267,30 @@ Array<T>::assign (const idx_vector& i, c
                 *this = Array<T> (rhs, dim_vector (1, nx));
               return;
             }
 
           resize_fill (nx, rfv);      
           n = numel ();
         }
 
-      // If the resizing was ambiguous, resize has already griped.
-      if (nx == n)
+      if (i.is_colon ())
         {
-          if (i.is_colon ())
-            {
-              // A(:) = X makes a full fill or a shallow copy.
-              if (rhl == 1)
-                fill (rhs(0));
-              else
-                *this = rhs.reshape (dimensions);
-            }
+          // A(:) = X makes a full fill or a shallow copy.
+          if (rhl == 1)
+            fill (rhs(0));
           else
-            {
-              if (rhl == 1)
-                i.fill (rhs(0), n, fortran_vec ());
-              else
-                i.assign (rhs.data (), n, fortran_vec ());
-            }
+            *this = rhs.reshape (dimensions);
+        }
+      else
+        {
+          if (rhl == 1)
+            i.fill (rhs(0), n, fortran_vec ());
+          else
+            i.assign (rhs.data (), n, fortran_vec ());
         }
     }
   else
     gripe_invalid_assignment_size ();
 }
 
 template <class T>
 void
@@ -1340,61 +1336,55 @@ Array<T>::assign (const idx_vector& i, c
                 *this = Array<T> (rhs, rdv);
               return;
             }
 
           resize (rdv, rfv);
           dv = dimensions;
         }
 
-      // If the resizing was invalid, resize has already griped.
-      if (dv == rdv)
+      if (i.is_colon () && j.is_colon ())
+        {
+          // A(:,:) = X makes a full fill or a shallow copy
+          if (isfill)
+            fill (rhs(0));
+          else
+            *this = rhs.reshape (dimensions);
+        }
+      else
         {
-          if (i.is_colon () && j.is_colon ())
+          // The actual work.
+          octave_idx_type n = numel (), r = dv (0), c = dv (1);
+          idx_vector ii (i);
+
+          const T* src = rhs.data ();
+          T *dest = fortran_vec ();
+
+          // Try reduction first.
+          if (ii.maybe_reduce (r, j, c))
             {
-              // A(:,:) = X makes a full fill or a shallow copy
               if (isfill)
-                fill (rhs(0));
+                ii.fill (*src, n, dest);
               else
-                *this = rhs.reshape (dimensions);
+                ii.assign (src, n, dest);
             }
           else
             {
-              // The actual work.
-              octave_idx_type n = numel (), r = dv (0), c = dv (1);
-              idx_vector ii (i);
-
-              const T* src = rhs.data ();
-              T *dest = fortran_vec ();
-
-              // Try reduction first.
-              if (ii.maybe_reduce (r, j, c))
+              if (isfill)
                 {
-                  if (isfill)
-                    ii.fill (*src, n, dest);
-                  else
-                    ii.assign (src, n, dest);
+                  for (octave_idx_type k = 0; k < jl; k++)
+                    i.fill (*src, r, dest + r * j.xelem (k));
                 }
               else
                 {
-                  if (isfill)
-                    {
-                      for (octave_idx_type k = 0; k < jl; k++)
-                        i.fill (*src, r, dest + r * j.xelem (k));
-                    }
-                  else
-                    {
-                      for (octave_idx_type k = 0; k < jl; k++)
-                        src += i.assign (src, r, dest + r * j.xelem (k));
-                    }
+                  for (octave_idx_type k = 0; k < jl; k++)
+                    src += i.assign (src, r, dest + r * j.xelem (k));
                 }
             }
-          
         }
-
     }
   else
     gripe_assignment_dimension_mismatch ();
 }
 
 template <class T>
 void
 Array<T>::assign (const Array<idx_vector>& ia,
@@ -1451,40 +1441,36 @@ Array<T>::assign (const Array<idx_vector
           // Resize first if necessary.
           if (rdv != dv)
             {
               resize_fill (rdv, rfv);
               dv = dimensions;
               chop_trailing_singletons ();
             }
 
-          // If the resizing was invalid, resize has already griped.
-          if (dv == rdv)
+          if (all_colons)
             {
-              if (all_colons)
-                {
-                  // A(:,:,...,:) = X makes a full fill or a shallow copy.
-                  if (isfill)
-                    fill (rhs(0));
-                  else
-                    *this = rhs.reshape (dimensions);
-                }
+              // A(:,:,...,:) = X makes a full fill or a shallow copy.
+              if (isfill)
+                fill (rhs(0));
               else
-                {
-                  // Do the actual work.
-
-                  // Prepare for recursive indexing
-                  rec_index_helper rh (dv, ia);
-
-                  // Do it.
-                  if (isfill)
-                    rh.fill (rhs(0), fortran_vec ());
-                  else
-                    rh.assign (rhs.data (), fortran_vec ());
-                }
+                *this = rhs.reshape (dimensions);
+            }
+          else
+            {
+              // Do the actual work.
+
+              // Prepare for recursive indexing
+              rec_index_helper rh (dv, ia);
+
+              // Do it.
+              if (isfill)
+                rh.fill (rhs(0), fortran_vec ());
+              else
+                rh.assign (rhs.data (), fortran_vec ());
             }
         }
       else 
         gripe_assignment_dimension_mismatch ();
     }
 }
 
 template <class T>
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-03-29  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.cc (Array<T>::assign): Remove redundant checks after invalid
+	resize.
+
 2009-03-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.cc (Array<T>::find): Reshape result for Matlab compatibility.
 	* Array.h (Array<T>): Add friend template declaration.
 
 2009-03-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* idx-vector.cc (idx_vector::idx_vector_rep::idx_vector_rep (const
