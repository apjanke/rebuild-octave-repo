# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1420182978 18000
#      Fri Jan 02 02:16:18 2015 -0500
# Node ID ef6875adb053c7862d9dec2e6a54e16c470268aa
# Parent  4cb4210bd392ca25b5a3a0d9386ce3379f3bbfa6
* audiodevinfo.cc: Avoid warnings about comparision operations.

diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -530,34 +530,34 @@ octave_play_callback (const void *, void
   retval = feval (player->octave_callback_function, args, 1);
   RowVector sound_l, sound_r;
   Matrix sound = retval(0).matrix_value ();
   int return_status = retval(1).int_value ();
   sound_l.resize (frames);
   sound_r.resize (frames);
   if (sound.cols () == 1)
     {
-      for (int i = 0; i < frames; i++)
+      for (unsigned long i = 0; i < frames; i++)
         {
           sound_l(i) = sound(i, 0);
           sound_r(i) = sound(i, 0);
         }
     }
   else if (sound.cols () == 2)
     {
-      for (int i = 0; i < frames; i++)
+      for (unsigned long i = 0; i < frames; i++)
         {
           sound_l(i) = sound(i, 0);
           sound_r(i) = sound(i, 1);
         }
     }
   else
     return paAbort;
 
-  for (int i = 0; i < frames; i++)
+  for (unsigned long i = 0; i < frames; i++)
     {
       if (player->get_nbits () == 8)
         {
           int8_t *buffer = static_cast<int8_t *> (output);
           buffer[2 * i] = sound_l.elem (i) * (pow (2.0, 7) - 1);
           buffer[2 * i + 1] = sound_r.elem (i) * (pow (2.0, 7) - 1);
         }
       else if (player->get_nbits () == 16)
@@ -598,17 +598,17 @@ portaudio_play_callback (const void *, v
   RowVector *sound_l = player->get_left ();
   RowVector *sound_r;
 
   if (channels > 1)
     sound_r = player->get_right ();
   else
     sound_r = sound_l;
 
-  for (int j = 0, k = 0; j < frames; j++, k += 2)
+  for (unsigned long j = 0, k = 0; j < frames; j++, k += 2)
     {
       unsigned int sample_number = player->get_sample_number ();
       if (sample_number > player->get_end_sample ())
         return paAbort;
 
       if (player->get_type () == DOUBLE)
         {
           if (player->get_nbits () == 8)
@@ -947,17 +947,17 @@ audioplayer::playblocking (void)
     {
       error ("audioplayer: Error starting audio playback stream");
       return;
     }
 
   unsigned int start, end;
   start = this->get_sample_number ();
   end = this->get_end_sample ();
-  for (int i = start; i < end; i += BUFFER_SIZE)
+  for (unsigned int i = start; i < end; i += BUFFER_SIZE)
     {
       if (this->octave_callback_function != 0)
         octave_play_callback (0, buffer, BUFFER_SIZE, 0, 0, this);
       else
         portaudio_play_callback (0, buffer, BUFFER_SIZE, 0, 0, this);
 
       err = Pa_WriteStream (stream, buffer, BUFFER_SIZE);
     }
@@ -1175,43 +1175,43 @@ octave_record_callback (const void *inpu
   audiorecorder *recorder = static_cast<audiorecorder *> (data);
   int channels = recorder->get_channels ();
   float sample_l, sample_r;
   Matrix sound;
   sound.resize (frames, 2);
   if (recorder->get_nbits () == 8)
     {
       const int8_t *input8 = static_cast<const int8_t *> (input);
-      for (int i = 0; i < frames; i++)
+      for (unsigned long i = 0; i < frames; i++)
         {
           sample_l = input8[i * channels] / (pow (2.0, 7) - 1.0);
           sample_r = input8[i * channels + (channels - 1)] / (pow (2.0, 7) - 1.0);
           sound(i, 0) = sample_l;
           sound(i, 1) = sample_r;
         }
       }
   else if (recorder->get_nbits () == 16)
     {
       const int16_t *input16 = static_cast<const int16_t *> (input);
-      for (int i = 0; i < frames; i++)
+      for (unsigned long i = 0; i < frames; i++)
         {
           sample_l = input16[i * channels] / (pow (2.0, 15) - 1.0);
           sample_r = input16[i * channels + (channels - 1)] / (pow (2.0, 15) - 1.0);
           sound(i, 0) = sample_l;
           sound(i, 1) = sample_r;
         }
     }
   else if (recorder->get_nbits () == 24)
     {
       // FIXME: Is there a better way?
       const uint8_t *input24 = static_cast<const uint8_t *> (input);
       int32_t sample_l32, sample_r32;
       uint8_t *_sample_l = reinterpret_cast<uint8_t *> (&sample_l);
       uint8_t *_sample_r = reinterpret_cast<uint8_t *> (&sample_r);
-      for (int i = 0; i < frames; i++)
+      for (unsigned long i = 0; i < frames; i++)
         {
           for (int j = 0; j < 3; j++)
             {
               _sample_l[j] = input24[i * channels * 3 + j];
                _sample_r[j] = input24[i * channels * 3 + (channels - 1) * 3 + j];
             }
           if (sample_l32 & 0x00800000)
             sample_l32 |= 0xff000000;
@@ -1234,41 +1234,41 @@ portaudio_record_callback (const void *i
                            PaStreamCallbackFlags, void *data)
 {
   audiorecorder *recorder = static_cast<audiorecorder *> (data);
   int channels = recorder->get_channels ();
   float sample_l, sample_r;
   if (recorder->get_nbits () == 8)
     {
       const int8_t *input8 = static_cast<const int8_t *> (input);
-      for (int i = 0; i < frames; i++)
+      for (unsigned long i = 0; i < frames; i++)
         {
           sample_l = input8[i * channels] / (pow (2.0, 7) - 1.0);
           sample_r = input8[i * channels + (channels - 1)] / (pow (2.0, 7) - 1.0);
           recorder->append (sample_l, sample_r);
         }
     }
   else if (recorder->get_nbits () == 16)
     {
       const int16_t *input16 = static_cast<const int16_t *> (input);
-      for (int i = 0; i < frames; i++)
+      for (unsigned long i = 0; i < frames; i++)
         {
           sample_l = input16[i * channels] / (pow (2.0, 15) - 1.0);
           sample_r = input16[i * channels + (channels - 1)] / (pow (2.0, 15) - 1.0);
           recorder->append (sample_l, sample_r);
         }
     }
   else if (recorder->get_nbits () == 24)
     {
       // FIXME: Is there a better way?
       const uint8_t *input24 = static_cast<const uint8_t *> (input);
       int32_t sample_l32, sample_r32;
       uint8_t *_sample_l = reinterpret_cast<uint8_t *> (&sample_l);
       uint8_t *_sample_r = reinterpret_cast<uint8_t *> (&sample_r);
-      for (int i = 0; i < frames; i++)
+      for (unsigned long i = 0; i < frames; i++)
         {
           for (int j = 0; j < 3; j++)
             {
               _sample_l[j] = input24[i * channels * 3 + j];
               _sample_r[j] = input24[i * channels * 3 + (channels - 1) * 3 + j];
             }
           if (sample_l32 & 0x00800000)
             sample_l32 |= 0xff000000;
@@ -1458,17 +1458,17 @@ audiorecorder::get_userdata (void)
 {
   return this->userdata;
 }
 
 octave_value
 audiorecorder::getaudiodata (void)
 {
   Matrix audio (2, this->left.size ());
-  for (int i = 0; i < this->left.size (); i++)
+  for (unsigned int i = 0; i < this->left.size (); i++)
     {
       audio(0, i) = this->left[i];
       audio(1, i) = this->right[i];
     }
   return octave_value (audio);
 }
 
 audioplayer *
@@ -1555,17 +1555,17 @@ audiorecorder::recordblocking (float sec
   if (err != paNoError)
     {
       error ("audiorecorder: Error starting audio recording stream");
       return;
     }
 
   unsigned int frames = seconds * this->get_fs ();
   uint8_t buffer[BUFFER_SIZE * 2 * 3];
-  for (int i = 0; i < frames / BUFFER_SIZE; i++)
+  for (unsigned long i = 0; i < frames / BUFFER_SIZE; i++)
     {
       Pa_ReadStream (this->get_stream (), buffer, BUFFER_SIZE);
       if (this->octave_callback_function != 0)
         octave_record_callback (buffer, NULL, BUFFER_SIZE, 0, 0, this);
       else
         portaudio_record_callback (buffer, NULL, BUFFER_SIZE, 0, 0, this);
     }
 }
@@ -2329,27 +2329,27 @@ Undocumented internal function.\n\
     {
       audioplayer *player = get_player (args(0));
       if (args(1).is_matrix_type ())
         {
           unsigned int start, end;
           RowVector range = args(1).row_vector_value ();
           start = range.elem (0) - 1;
           end = range.elem (1) - 1;
-          if (start < 0 or start > player->get_total_samples () or
-              start > end or end < 0 or end > player->get_total_samples ())
+          if (start > player->get_total_samples () or
+              start > end or end > player->get_total_samples ())
             error ("audioplayer: invalid range specified for playback");
           player->set_sample_number (start);
           player->set_end_sample (end);
         }
       else
         {
           unsigned int start;
           start = args(1).int_value () - 1;
-          if (start < 0 or start > player->get_total_samples ())
+          if (start > player->get_total_samples ())
             error ("audioplayer: invalid range specified for playback");
           player->set_sample_number (start);
         }
       player->playblocking ();
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
@@ -2376,27 +2376,27 @@ Undocumented internal function.\n\
     {
       audioplayer *player = get_player (args(0));
       if (args(1).is_matrix_type ())
         {
           unsigned int start, end;
           RowVector range = args(1).row_vector_value ();
           start = range.elem (0) - 1;
           end = range.elem (1) - 1;
-          if (start < 0 or start > player->get_total_samples () or
-              start > end or end < 0 or end > player->get_total_samples ())
+          if (start > player->get_total_samples () or
+              start > end or end > player->get_total_samples ())
             error ("audioplayer: invalid range specified for playback");
           player->set_sample_number (start);
           player->set_end_sample (end);
         }
       else
         {
           unsigned int start;
           start = args(1).int_value () - 1;
-          if (start < 0 or start > player->get_total_samples ())
+          if (start > player->get_total_samples ())
             error ("audioplayer: invalid range specified for playback");
           player->set_sample_number (start);
         }
       player->play ();
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
