# HG changeset patch
# User Rik <rik@octave.org>
# Date 1546789068 28800
#      Sun Jan 06 07:37:48 2019 -0800
# Node ID 04e7b115e69d6bcf29293c6dbdfcd86486e8b2b6
# Parent  7471f3831aa02386a63ebc9613b24838221014f9
# Parent  dd40f9650821ec269b9735cf9bce652e198bbb6e
maint: merge stable to default.

diff --git a/libgui/src/m-editor/find-dialog.cc b/libgui/src/m-editor/find-dialog.cc
--- a/libgui/src/m-editor/find-dialog.cc
+++ b/libgui/src/m-editor/find-dialog.cc
@@ -117,17 +117,18 @@ namespace octave
 
     _extension = new QWidget (this);
     _whole_words_check_box = new QCheckBox (tr ("&Whole words"));
     _regex_check_box = new QCheckBox (tr ("Regular E&xpressions"));
     _backward_check_box = new QCheckBox (tr ("Search &backward"));
     _search_selection_check_box = new QCheckBox (tr ("Search se&lection"));
 #if defined (HAVE_QSCI_FINDSELECTION)
     _search_selection_check_box->setCheckable (true);
-    _search_selection_check_box->setEnabled (edit_area->hasSelectedText ());
+    if (edit_area)
+      _search_selection_check_box->setEnabled (edit_area->hasSelectedText ());
 #else
     _search_selection_check_box->setCheckable (false);
     _search_selection_check_box->setEnabled (false);
 #endif
 
     _edit_area = edit_area;
     connect (_find_next_button,   SIGNAL (clicked ()),
              this,                SLOT (find_next ()));
@@ -240,17 +241,17 @@ namespace octave
   }
 #else
   void find_dialog::handle_selection_changed (bool /* has_selected */) { }
 #endif
 
   // initialize search text with selected text if this is in one single line
   void find_dialog::init_search_text (void)
   {
-    if (_edit_area->hasSelectedText ())
+    if (_edit_area && _edit_area->hasSelectedText ())
       {
         int lbeg, lend, cbeg, cend;
         _edit_area->getSelection (&lbeg,&cbeg,&lend,&cend);
         if (lbeg == lend)
           _search_line_edit->setText (_edit_area->selectedText ());
       }
 
     // set focus to "Find what" and select all text
@@ -269,16 +270,19 @@ namespace octave
 
   void find_dialog::find_prev (void)
   {
     find (_backward_check_box->isChecked ());
   }
 
   void find_dialog::find (bool forward)
   {
+    if (! _edit_area)
+      return;
+
     int line, col;
     line = col = -1;
     bool do_wrap = _wrap_check_box->isChecked ();
     bool do_forward = forward;
 
     if (_rep_all)
       {
         if (_rep_all == 1)
@@ -321,68 +325,69 @@ namespace octave
                 currpos -= (_search_line_edit->text ().length ());
                 if (currpos < 0)
                   currpos = 0;
                 _edit_area->lineIndexFromPosition (currpos, &line,&col);
               }
           }
       }
 
-    if (_edit_area)
+    if (_edit_area->hasSelectedText ()
+        && _search_selection_check_box->isChecked ())
       {
-        if (_edit_area->hasSelectedText ()
-            && _search_selection_check_box->isChecked ())
-          {
 #if defined (HAVE_QSCI_FINDSELECTION)
-            if (_find_result_available)
-              _find_result_available = _edit_area->findNext ();
-            else
-              _find_result_available
-                = _edit_area->findFirstInSelection (
-                                                    _search_line_edit->text (),
-                                                    _regex_check_box->isChecked (),
-                                                    _case_check_box->isChecked (),
-                                                    _whole_words_check_box->isChecked (),
-                                                    do_forward,
-                                                    true
+        if (_find_result_available)
+          _find_result_available = _edit_area->findNext ();
+        else
+          _find_result_available
+            = _edit_area->findFirstInSelection (
+                                                _search_line_edit->text (),
+                                                _regex_check_box->isChecked (),
+                                                _case_check_box->isChecked (),
+                                                _whole_words_check_box->isChecked (),
+                                                do_forward,
+                                                true
 #if defined (HAVE_QSCI_VERSION_2_6_0)
-                                                    , true
+                                                , true
 #endif
-                                                   );
+                                               );
 #endif
-          }
-        else
-          {
-            _find_result_available
-              = _edit_area->findFirst (_search_line_edit->text (),
-                                       _regex_check_box->isChecked (),
-                                       _case_check_box->isChecked (),
-                                       _whole_words_check_box->isChecked (),
-                                       do_wrap,
-                                       do_forward,
-                                       line,col,
-                                       true
+      }
+    else
+      {
+        _find_result_available
+          = _edit_area->findFirst (_search_line_edit->text (),
+                                   _regex_check_box->isChecked (),
+                                   _case_check_box->isChecked (),
+                                   _whole_words_check_box->isChecked (),
+                                   do_wrap,
+                                   do_forward,
+                                   line,col,
+                                   true
 #if defined (HAVE_QSCI_VERSION_2_6_0)
-                                       , true
+                                    , true
 #endif
-                                      );
-          }
+                                  );
       }
 
+
     if (_find_result_available)
       _from_start_check_box->setChecked (0);
     else if (! _rep_all)
       no_matches_message ();
   }
 
   void find_dialog::do_replace (void)
   {
-    _rep_active = true;  // changes in selection not made by the user
-    _edit_area->replace (_replace_line_edit->text ());
-    _rep_active = false;
+    if (_edit_area)
+      {
+        _rep_active = true;  // changes in selection not made by the user
+        _edit_area->replace (_replace_line_edit->text ());
+        _rep_active = false;
+      }
   }
 
   void find_dialog::replace (void)
   {
     if (_edit_area)
       {
         // The following line is a workaround for the issue that when replacing
         // a text with a new one with different size within the selection,
diff --git a/libgui/src/octave-dock-widget.cc b/libgui/src/octave-dock-widget.cc
--- a/libgui/src/octave-dock-widget.cc
+++ b/libgui/src/octave-dock-widget.cc
@@ -441,17 +441,17 @@ namespace octave
     if (r+g+b < 400)
       m_icon_color_active = "-light";
     else
       m_icon_color_active = "";
 
     QRect available_size = QApplication::desktop ()->availableGeometry (m_parent);
     int x1, y1, x2, y2;
     available_size.getCoords (&x1, &y1, &x2, &y2);
-    QRect default_size = QRect (x1, y1, x2/3, y2/2);
+    QRect default_size = QRect (x1+16, y1+32, x2/3, 2*y2/3);
 
     m_recent_float_geom = settings->value ("DockWidgets/" + objectName ()
                                            + "_floating_geometry",
                                            default_size).toRect ();
 
     QWidget dummy;
     dummy.setGeometry (m_recent_float_geom);
 
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -51,17 +51,17 @@ along with Octave; see the file COPYING.
 #include "resource-manager.h"
 
 Q_DECLARE_METATYPE (octave_value)
 Q_DECLARE_METATYPE (octave::symbol_info_list)
 
 namespace octave
 {
   octave_qt_link::octave_qt_link (void)
-    : octave_link ()
+    : octave_link (), m_shutdown_confirm_result (false)
   {
     qRegisterMetaType<octave_value> ("octave_value");
     qRegisterMetaType<symbol_info_list> ("symbol_info_list");
   }
 
   bool octave_qt_link::do_confirm_shutdown (void)
   {
     // Lock the mutex before emitting signal.
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -2391,23 +2391,23 @@ namespace octave
     const Matrix z = xform.zscale (props.get_zdata ().matrix_value ());
 
     int zr = z.rows ();
     int zc = z.columns ();
 
     NDArray c;
     const NDArray vn = props.get_vertexnormals ().array_value ();
     dim_vector vn_dims = vn.dims ();
-    bool has_vertex_normals = ((vn_dims(0) == z.rows ()) &&
-                               (vn_dims(1) == z.columns ()) &&
+    bool has_vertex_normals = ((vn_dims(0) == zr) &&
+                               (vn_dims(1) == zc) &&
                                (vn_dims(2) == 3));
     const NDArray fn = props.get_facenormals ().array_value ();
     dim_vector fn_dims = fn.dims ();
-    bool has_face_normals = ((fn_dims(0) == z.rows () - 1) &&
-                             (fn_dims(1) == z.columns () - 1) &&
+    bool has_face_normals = ((fn_dims(0) == zr - 1) &&
+                             (fn_dims(1) == zc - 1) &&
                              (fn_dims(2) == 3));
 
     // FIXME: handle transparency
     Matrix a;
 
     int fc_mode = (props.facecolor_is_rgb () ? 0 :
                    (props.facecolor_is ("flat") ? 1 :
                     (props.facecolor_is ("interp") ? 2 :
@@ -2784,18 +2784,22 @@ namespace octave
                                 m_glfcns.glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                                 for (int k = 0; k < 3; k++)
                                   cb[k] = ss * (scr + (1-scr) * c(j-1, i, k));
                                 m_glfcns.glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                               }
                           }
                         if (el_mode > 0)
-                          set_normal (bfl_mode, (el_mode == GOURAUD ? vn : fn),
-                                      j-1, i);
+                          {
+                            if (el_mode == GOURAUD)
+                              set_normal (bfl_mode, vn, j-1, i);
+                            else
+                              set_normal (bfl_mode, fn, j-1, std::min (i, zc-2));
+                          }
 
                         m_glfcns.glVertex3d (x(j1,i), y(j-1,i2), z(j-1,i));
 
                         // Vertex 2
                         if (ec_mode == INTERP)
                           {
                             for (int k = 0; k < 3; k++)
                               cb[k] = c(j, i, k);
@@ -2882,18 +2886,22 @@ namespace octave
                                 m_glfcns.glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                                 for (int k = 0; k < 3; k++)
                                   cb[k] = ss * (scr + (1-scr) * c(j, i-1, k));
                                 m_glfcns.glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                               }
                           }
                         if (el_mode > 0)
-                          set_normal (bfl_mode, (el_mode == GOURAUD ? vn : fn),
-                                      j, i-1);
+                          {
+                            if (el_mode == GOURAUD)
+                              set_normal (bfl_mode, vn, j, i-1);
+                            else
+                              set_normal (bfl_mode, fn, std::min (j, zr-2), i-1);
+                          }
 
                         m_glfcns.glVertex3d (x(j2,i-1), y(j,i1), z(j,i-1));
 
                         // Vertex 2
                         if (ec_mode == INTERP)
                           {
                             for (int k = 0; k < 3; k++)
                               cb[k] = c(j, i, k);
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -9446,17 +9446,17 @@ patch::properties::update_data (void)
   if (fcmax > 3 && vert.columns () > 2)
     {
       for (octave_idx_type jj = 0; jj < idx.columns (); jj++)
         {
           if (! octave::math::isnan (idx(3,jj)))
             {
               // find first element that is NaN to get number of corners
               octave_idx_type nc = 3;
-              while (! octave::math::isnan (idx(nc,jj)) && nc < fcmax)
+              while (nc < fcmax && ! octave::math::isnan (idx(nc,jj)))
                 nc++;
 
               std::list<octave_idx_type> coplanar_ends;
 
               octave_idx_type i_start = 1;
               octave_idx_type i_end = 2;
               while (i_end < nc - 1)
                 {
@@ -9864,48 +9864,42 @@ surface::properties::update_face_normals
       x2m1 = x0m3 = y1m0 = y3m2 = 0;
       x1m0 = y2m1 = 1;
       x0p3 = y1p0 = 0;
       x1p0 = x3p2 = y2p1 = y0p3 = 1;
       x2p1 = y3p2 = 2;
 
       for (int i = 0; i < p-1; i++)
         {
-          if (y_mat)
-            {
-              i1 = i;
-              i2 = i + 1;
-            }
+          i1 = i;
+          i2 = i + 1;
 
           for (int j = 0; j < q-1; j++)
             {
-              if (x_mat)
-                {
-                  j1 = j;
-                  j2 = j + 1;
-                }
+              j1 = j;
+              j2 = j + 1;
 
               if (x_mat || y_mat)
                 {
-                  x0 = x(j1,i1);
-                  x1 = x(j1,i2);
-                  x2 = x(j2,i2);
-                  x3 = x(j2,i1);
+                  x0 = x(x_mat?j1:0,y_mat?i1:0);
+                  x1 = x(x_mat?j1:0,y_mat?i2:0);
+                  x2 = x(x_mat?j2:0,y_mat?i2:0);
+                  x3 = x(x_mat?j2:0,y_mat?i1:0);
                   x1m0 = x1 - x0;
                   x2m1 = x2 - x1;
                   x3m2 = x3 - x2;
                   x0m3 = x0 - x3;
                   x1p0 = x1 + x0;
                   x2p1 = x2 + x1;
                   x3p2 = x3 + x2;
                   x0p3 = x0 + x3;
-                  y0 = y(j1,i1);
-                  y1 = y(j1,i2);
-                  y2 = y(j2,i2);
-                  y3 = y(j2,i1);
+                  y0 = y(x_mat?j1:0,y_mat?i1:0);
+                  y1 = y(x_mat?j1:0,y_mat?i2:0);
+                  y2 = y(x_mat?j2:0,y_mat?i2:0);
+                  y3 = y(x_mat?j2:0,y_mat?i1:0);
                   y1m0 = y1 - y0;
                   y2m1 = y2 - y1;
                   y3m2 = y3 - y2;
                   y0m3 = y0 - y3;
                   y1p0 = y1 + y0;
                   y2p1 = y2 + y1;
                   y3p2 = y3 + y2;
                   y0p3 = y0 + y3;
diff --git a/libinterp/corefcn/ls-mat-ascii.cc b/libinterp/corefcn/ls-mat-ascii.cc
--- a/libinterp/corefcn/ls-mat-ascii.cc
+++ b/libinterp/corefcn/ls-mat-ascii.cc
@@ -265,68 +265,61 @@ read_mat_ascii_data (std::istream& is, c
   octave_quit ();
 
   if (nr <= 0 || nc <= 0)
     error ("load: unable to extract matrix size from file '%s'",
            filename.c_str ());
 
   Matrix tmp (nr, nc);
 
-  if (nr < 1 || nc < 1)
-    is.clear (std::ios::badbit);
-  else
+  double d;
+  for (octave_idx_type i = 0; i < nr; i++)
     {
-      double d;
-      for (octave_idx_type i = 0; i < nr; i++)
-        {
-          std::string buf = get_mat_data_input_line (is);
+      std::string buf = get_mat_data_input_line (is);
+
+      std::istringstream tmp_stream (buf);
 
-          std::istringstream tmp_stream (buf);
-
-          for (octave_idx_type j = 0; j < nc; j++)
-            {
-              octave_quit ();
+      for (octave_idx_type j = 0; j < nc; j++)
+        {
+          octave_quit ();
 
-              d = octave_read_value<double> (tmp_stream);
+          d = octave_read_value<double> (tmp_stream);
 
-              if (! tmp_stream && ! tmp_stream.eof ())
-                error ("load: failed to read matrix from file '%s'",
-                       filename.c_str ());
+          if (! tmp_stream && ! tmp_stream.eof ())
+            error ("load: failed to read matrix from file '%s'",
+                   filename.c_str ());
 
-              tmp.elem (i, j) = d;
-              total_count++;
+          tmp.elem (i, j) = d;
+          total_count++;
 
-              // Skip whitespace and commas.
-              char c;
-              while (1)
-                {
-                  tmp_stream >> c;
+          // Skip whitespace and commas.
+          char c;
+          while (1)
+            {
+              tmp_stream >> c;
 
-                  if (! tmp_stream)
-                    break;
+              if (! tmp_stream)
+                break;
 
-                  if (! (c == ' ' || c == '\t' || c == ','))
-                    {
-                      tmp_stream.putback (c);
-                      break;
-                    }
+              if (! (c == ' ' || c == '\t' || c == ','))
+                {
+                  tmp_stream.putback (c);
+                  break;
                 }
+            }
 
-              if (tmp_stream.eof ())
-                break;
-            }
+          if (tmp_stream.eof ())
+            break;
         }
     }
 
   if (! is && ! is.eof ())
-    error ("load: failed to read matrix from file '%s'",
-           filename.c_str ());
+    error ("load: failed to read matrix from file '%s'", filename.c_str ());
 
   // FIXME: not sure this is best, but it works.
-
   if (is.eof ())
     is.clear ();
 
   octave_idx_type expected = nr * nc;
 
   if (expected != total_count)
     error ("load: expected %" OCTAVE_IDX_TYPE_FORMAT " elements, found "
            "%" OCTAVE_IDX_TYPE_FORMAT, expected, total_count);
diff --git a/libinterp/corefcn/ls-mat5.cc b/libinterp/corefcn/ls-mat5.cc
--- a/libinterp/corefcn/ls-mat5.cc
+++ b/libinterp/corefcn/ls-mat5.cc
@@ -2005,17 +2005,17 @@ save_mat5_array_length (const float* /* 
       //     else if (max_val < 32768 && min_val >= -32768)
       //       size = 2;
       //     else if (max_val <= 2147483647L && min_val >= -2147483647L)
       //       size = 4;
       //
 
       // Round nel up to nearest even number of elements.
       // Take into account short tags for 4 byte elements.
-      return PAD ((nel > 0 && nel * size <= 4 ? 4 : 8) + nel * size);
+      return PAD ((nel * size <= 4 ? 4 : 8) + nel * size);
     }
   else
     return 8;
 }
 
 int
 save_mat5_array_length (const Complex *val, octave_idx_type nel,
                         bool save_as_floats)
@@ -2174,18 +2174,17 @@ save_mat5_element_length (const octave_v
     }
   else if (tc.isstruct () || tc.is_inline_function () || tc.isobject ())
     {
       int fieldcnt = 0;
       const octave_map m = tc.map_value ();
       octave_idx_type nel = m.numel ();
 
       if (tc.is_inline_function ())
-        // length of "inline" is 6
-        ret += 8 + PAD (6 > max_namelen ? max_namelen : 6);
+        ret += 8 + PAD (6);  // length of "inline" is 6
       else if (tc.isobject ())
         {
           size_t classlen = tc.class_name ().length ();
 
           ret += 8 + PAD (classlen > max_namelen ? max_namelen : classlen);
         }
 
       for (auto i = m.begin (); i != m.end (); i++)
diff --git a/libinterp/corefcn/ls-oct-text.cc b/libinterp/corefcn/ls-oct-text.cc
--- a/libinterp/corefcn/ls-oct-text.cc
+++ b/libinterp/corefcn/ls-oct-text.cc
@@ -348,18 +348,16 @@ save_text_data_for_plotting (std::ostrea
 
 // If TC is matrix, save it on stream OS in a format useful for
 // making a 3-D plot with gnuplot.  If PARAMETRIC is TRUE,
 // assume a parametric 3-D plot will be generated.
 
 bool
 save_three_d (std::ostream& os, const octave_value& tc, bool parametric)
 {
-  bool fail = false;
-
   octave_idx_type nr = tc.rows ();
   octave_idx_type nc = tc.columns ();
 
   if (! tc.is_real_matrix ())
     error ("for now, I can only save real matrices in 3-D format");
 
   os << "# 3-D data...\n"
      << "# type: matrix\n"
@@ -395,17 +393,17 @@ save_three_d (std::ostream& os, const oc
           os << tmp.extract (0, i, nr-1, i);
           if (i+1 < nc)
             os << "\n";
         }
     }
 
   os.precision (old_precision);
 
-  return (os && ! fail);
+  return (static_cast<bool> (os));
 }
 
 DEFUN (save_precision, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{val} =} save_precision ()
 @deftypefnx {} {@var{old_val} =} save_precision (@var{new_val})
 @deftypefnx {} {} save_precision (@var{new_val}, "local")
 Query or set the internal variable that specifies the number of digits to
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -2407,18 +2407,17 @@ cdef_class::cdef_class_rep::meta_subsref
 
         if (meth.ok ())
           {
             if (! meth.is_static ())
               error ("method `%s' is not static", nm.c_str ());
 
             octave_value_list args;
 
-            if (type.length () > 1 && idx.size () > 1
-                && type[1] == '(')
+            if (type.length () > 1 && idx.size () > 1 && type[1] == '(')
               {
                 args = *(++(idx.begin ()));
                 skip++;
               }
 
             retval = meth.execute (args, (type.length () > skip
                                           ? 1 : nargout), true,
                                    "meta.class");
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -1980,18 +1980,17 @@ octave_fcn_binder::maybe_binder (const o
                        ? cmd_list->front ()->expression () : nullptr);
         }
     }
 
   if (body_expr && body_expr->is_index_expression ()
       && ! (param_list && param_list->takes_varargs ()))
     {
       // It's an index expression.
-      octave::tree_index_expression *idx_expr = dynamic_cast<octave::tree_index_expression *>
-                                        (body_expr);
+      octave::tree_index_expression *idx_expr = dynamic_cast<octave::tree_index_expression *> (body_expr);
       octave::tree_expression *head_expr = idx_expr->expression ();
       std::list<octave::tree_argument_list *> arg_lists = idx_expr->arg_lists ();
       std::string type_tags = idx_expr->type_tags ();
 
       if (type_tags.length () == 1 && type_tags[0] == '('
           && head_expr->is_identifier ())
         {
           assert (arg_lists.size () == 1);
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -853,17 +853,17 @@ ANY_INCLUDING_NL (.|{NL})
       }
   }
 
 <DQ_STRING_START>\\[0-7]{1,3} {
     curr_lexer->lexer_debug ("<DQ_STRING_START>\\\\[0-7]{1,3}");
 
     curr_lexer->m_current_input_column += yyleng;
 
-    int result;
+    unsigned int result;
     sscanf (yytext+1, "%o", &result);
 
     if (result > 0xff)
       {
         octave::token *tok
           = new octave::token (LEXICAL_ERROR,
                                "invalid octal escape sequence in character string",
                                curr_lexer->m_input_line_number,
@@ -877,17 +877,17 @@ ANY_INCLUDING_NL (.|{NL})
       curr_lexer->m_string_text += static_cast<unsigned char> (result);
   }
 
 <DQ_STRING_START>\\x[0-9a-fA-F]+ {
     curr_lexer->lexer_debug ("<DQ_STRING_START>\\\\x[0-9a-fA-F]+");
 
     curr_lexer->m_current_input_column += yyleng;
 
-    int result;
+    unsigned int result;
     sscanf (yytext+2, "%x", &result);
 
     // Truncate the value silently instead of checking the range like
     // we do for octal above.  This is to match C/C++ where any number
     // of digits is allowed but the value is implementation-defined if
     // it exceeds the range of the character type.
     curr_lexer->m_string_text += static_cast<unsigned char> (result);
   }
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -2990,18 +2990,17 @@ namespace octave
                 err.assign ("message", last_error_message ());
                 err.assign ("identifier", last_error_id ());
                 err.assign ("stack", last_error_stack ());
 
                 ult.assign (octave_value::op_asn_eq, err);
               }
 
             // perform actual "catch" block
-            if (catch_code)
-              catch_code->accept (*this);
+            catch_code->accept (*this);
           }
       }
   }
 
   void
   tree_evaluator::do_unwind_protect_cleanup_code (tree_statement_list *list)
   {
     unwind_protect frame;
diff --git a/liboctave/array/Sparse.cc b/liboctave/array/Sparse.cc
--- a/liboctave/array/Sparse.cc
+++ b/liboctave/array/Sparse.cc
@@ -2489,17 +2489,17 @@ Sparse<T>::diag (octave_idx_type k) cons
 
           octave_idx_type nr = 0;
           octave_idx_type nc = 1;
           octave_idx_type nz = 0;
 
           d = Sparse<T> (nr, nc, nz);
         }
     }
-  else if (nnr != 0 && nnc != 0)
+  else  // one of dimensions == 1 (vector)
     {
       octave_idx_type roff = 0;
       octave_idx_type coff = 0;
       if (k > 0)
         {
           roff = 0;
           coff = k;
         }
diff --git a/liboctave/util/oct-rl-hist.c b/liboctave/util/oct-rl-hist.c
--- a/liboctave/util/oct-rl-hist.c
+++ b/liboctave/util/oct-rl-hist.c
@@ -272,31 +272,37 @@ octave_history_list (int limit, int numb
       int beg = 0;
       int end = 0;
       while (hlist[end])
         end++;
 
       beg = (limit < 0 || end < limit) ? 0 : (end - limit);
 
       retval = malloc ((size_t) (end - beg + 1) * sizeof (char **));
-
+      // FIXME: Should this call current_liboctave_error_handler instead?
+      if (! retval)
+        return retval;
+      
       k = 0;
       for (i = beg; i < end; i++)
         {
           char *line = hlist[i]->line;
           size_t len = line ? strlen (line) : 0;
           char *tmp = malloc (len + 64);
 
-          if (number_lines)
-            sprintf (tmp, "%5d %s", i + history_base,
-                     line ? line : "");
-          else
-            strcpy (tmp, line ? line : "");
+          if (tmp)
+            {
+              if (number_lines)
+                sprintf (tmp, "%5d %s", i + history_base,
+                         line ? line : "");
+              else
+                strcpy (tmp, line ? line : "");
 
-          retval[k++] = tmp;
+              retval[k++] = tmp;
+            }
         }
 
       retval[k] = 0;
     }
 
   return retval;
 }
 
