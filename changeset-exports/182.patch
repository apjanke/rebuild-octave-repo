# HG changeset patch
# User jwe
# Date 751416694 0
#      Sat Oct 23 22:51:34 1993 +0000
# Node ID 2db13bf4f3e2901b05f6c6e58f7d242de9991135
# Parent  91ec95436dca088cf0b641af9d6103f1444c10ef
[project @ 1993-10-23 22:51:34 by jwe]

diff --git a/liboctave/Matrix-ext.cc b/liboctave/Matrix-ext.cc
--- a/liboctave/Matrix-ext.cc
+++ b/liboctave/Matrix-ext.cc
@@ -224,16 +224,79 @@ GEPBALANCE::init (const Matrix& a, const
 
   delete [] cscale;
   delete [] cperm;
 
   return info;
 }
 
 /*
+ * CHOL stuff
+ */
+
+int
+CHOL::init (const Matrix& a)
+{
+  if (a.nr != a.nc)
+    FAIL;
+
+  char uplo = 'U';
+
+  int n = a.nc;
+  int info;
+
+  double *h = dup (a.data, a.len);
+
+  F77_FCN (dpotrf) (&uplo, &n, h, &n, &info, 1L);
+
+  chol_mat = Matrix (h, n, n);
+
+// If someone thinks of a more graceful way of doing this (or faster for
+// that matter :-)), please let me know!
+
+  if (n > 1)
+    for (int j = 0; j < a.nc; j++)
+      for (int i = j+1; i < a.nr; i++)
+        chol_mat.elem (i, j) = 0.0;
+
+
+  return info;
+}
+
+
+int
+ComplexCHOL::init (const ComplexMatrix& a)
+{
+   if (a.nr != a.nc)
+     FAIL;
+
+   char uplo = 'U';
+
+   int n = a.nc;
+   int info;
+
+   Complex *h = dup (a.data, a.len);
+
+   F77_FCN (zpotrf) (&uplo, &n, h, &n, &info, 1L);
+
+   chol_mat = ComplexMatrix (h, n, n);
+
+// If someone thinks of a more graceful way of doing this (or faster for
+// that matter :-)), please let me know!
+
+  if (n > 1)
+    for (int j = 0; j < a.nc; j++)
+      for (int i = j+1; i < a.nr; i++)
+        chol_mat.elem (i, j) = 0.0;
+
+   return info;
+}
+
+
+/*
  * HESS stuff
  */
 
 int
 HESS::init (const Matrix& a)
 {
   if (a.nr != a.nc)
     FAIL;
diff --git a/liboctave/Matrix.h b/liboctave/Matrix.h
--- a/liboctave/Matrix.h
+++ b/liboctave/Matrix.h
@@ -134,16 +134,19 @@ extern "C"
 			double*, const int*, double*, const int*,
 			double*, const int*, int*, long, long);
 
   int F77_FCN (dgelss) (const int*, const int*, const int*, double*,
 			const int*, double*, const int*, double*,
 			const double*, int*, double*, const int*,
 			int*);
 
+  int F77_FCN (dpotrf) (const char*, const int*, double*, const int*,
+			int*, long);
+
 //
 // fortran functions for generalized eigenvalue problems
 //
   int F77_FCN (reduce) (const int*, const int*, double*,
 	   	        const int*, double*,
 			int*, int*, double*, double*);
 
   int F77_FCN (scaleg) (const int*, const int*, double*,
@@ -234,16 +237,20 @@ extern "C"
 			Complex*, const int*, Complex*, const int*,
 			Complex*, const int*, double*, int*, long, long);
 
   int F77_FCN (zgelss) (const int*, const int*, const int*, Complex*,
 			const int*, Complex*, const int*, double*,
 			const double*, int*, Complex*, const int*,
 			double*, int*);
 
+  int F77_FCN (zpotrf) (const char*, const int*, Complex*, const int*,
+			int*, long);
+
+
 // Note that the original complex fft routines were not written for
 // double complex arguments.  They have been modified by adding an
 // implicit double precision (a-h,o-z) statement at the beginning of
 // each subroutine.
 
   int F77_FCN (cffti) (const int*, Complex*);
 
   int F77_FCN (cfftf) (const int*, Complex*, Complex*);
@@ -260,16 +267,18 @@ class RowVector;
 class DiagMatrix;
 class ComplexMatrix;
 class ComplexColumnVector;
 class ComplexRowVector;
 class ComplexDiagMatrix;
 class AEPBALANCE;
 class ComplexAEPBALANCE;
 class GEPBALANCE;
+class CHOL;
+class ComplexCHOL;
 class DET;
 class ComplexDET;
 class EIG;
 class HESS;
 class ComplexHESS;
 class SCHUR;
 class ComplexSCHUR;
 class SVD;
@@ -285,16 +294,17 @@ class ComplexQR;
 
 class Matrix
 {
 friend class RowVector;
 friend class DiagMatrix;
 friend class ComplexMatrix;
 friend class ComplexDiagMatrix;
 friend class AEPBALANCE;
+friend class CHOL;
 friend class EIG;
 friend class GEPBALANCE;
 friend class HESS;
 friend class SCHUR;
 friend class SVD;
 friend class LU;
 friend class QR;
 
@@ -509,17 +519,17 @@ public:
 
 // i/o
 
   friend ostream& operator << (ostream& os, const Matrix& a);
   friend istream& operator >> (istream& is, Matrix& a);
 
 // conversions
 
-  double *fortran_vec (void);
+  double *fortran_vec (void) const;
 
 private:
   int nr;
   int nc;
   int len;
   double *data;
 
   Matrix (double *d, int r, int c);
@@ -561,17 +571,17 @@ inline double Matrix::checkelem (int r, 
 #endif
 
   return elem (r, c);
 }
 
 inline double Matrix::operator () (int r, int c) const
   { return checkelem (r, c); }
 
-inline double *Matrix::fortran_vec (void) { return data; }
+inline double *Matrix::fortran_vec (void) const { return data; }
 
 /*
  * Column Vector class
  */
 
 class ColumnVector
 {
 friend class Matrix;
@@ -676,17 +686,17 @@ public:
   double max (void) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const ColumnVector& a);
 
 // conversions
 
-  double *fortran_vec (void);
+  double *fortran_vec (void) const;
 
 private:
   int len;
   double *data;
 
   ColumnVector (double *d, int l);
 };
 
@@ -722,17 +732,17 @@ ColumnVector::checkelem (int n) const
     FAIL;
 #endif
 
   return elem (n);
 }
 
 inline double ColumnVector::operator () (int n) const { return checkelem (n); }
 
-inline double *ColumnVector::fortran_vec (void) { return data; }
+inline double *ColumnVector::fortran_vec (void) const { return data; }
 
 /*
  * Row Vector class
  */
 
 class RowVector
 {
 friend class Matrix;
@@ -843,17 +853,17 @@ public:
   double max (void) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const RowVector& a);
 
 // conversions
 
-  double *fortran_vec (void);
+  double *fortran_vec (void) const;
 
 private:
   int len;
   double *data;
 
   RowVector (double *d, int l);
 };
 
@@ -889,17 +899,17 @@ RowVector::checkelem (int n) const
     FAIL;
 #endif
 
   return elem (n);
 }
 
 inline double RowVector::operator () (int n) const { return checkelem (n); }
 
-inline double *RowVector::fortran_vec (void) { return data; }
+inline double *RowVector::fortran_vec (void) const { return data; }
 
 /*
  * Diagonal Matrix class
  */
 
 class DiagMatrix
 {
 friend class Matrix;
@@ -1095,16 +1105,17 @@ inline double DiagMatrix::operator () (i
 
 class ComplexMatrix
 {
 friend class Matrix;
 friend class DiagMatrix;
 friend class ComplexRowVector;
 friend class ComplexDiagMatrix;
 friend class ComplexAEPBALANCE;
+friend class ComplexCHOL;
 friend class EIG;
 friend class ComplexHESS;
 friend class ComplexSVD;
 friend class ComplexSCHUR;
 friend class ComplexLU;
 friend class ComplexQR;
 
 public:
@@ -1345,17 +1356,17 @@ public:
 
 // i/o
 
   friend ostream& operator << (ostream& os, const ComplexMatrix& a);
   friend istream& operator >> (istream& is, ComplexMatrix& a);
 
 // conversions
 
-  Complex *fortran_vec (void);
+  Complex *fortran_vec (void) const;
 
 private:
   int nr;
   int nc;
   int len;
   Complex *data;
 
   ComplexMatrix (Complex *d, int r, int c);
@@ -1399,17 +1410,17 @@ inline Complex ComplexMatrix::checkelem 
 #endif
 
   return elem (r, c);
 }
 
 inline Complex ComplexMatrix::operator () (int r, int c) const
   { return checkelem (r, c); }
 
-inline Complex *ComplexMatrix::fortran_vec (void) { return data; }
+inline Complex *ComplexMatrix::fortran_vec (void) const { return data; }
 
 /*
  * Complex Column Vector class
  */
 
 class ComplexColumnVector
 {
 friend class DiagMatrix;
@@ -1543,17 +1554,17 @@ public:
   Complex max (void) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const ComplexColumnVector& a);
 
 // conversions
 
-  Complex *fortran_vec (void);
+  Complex *fortran_vec (void) const;
 
 private:
   int len;
   Complex *data;
 
   ComplexColumnVector (Complex *d, int l);
 };
 
@@ -1593,17 +1604,17 @@ ComplexColumnVector::checkelem (int n) c
 #endif
 
   return elem (n);
 }
 
 inline Complex ComplexColumnVector::operator () (int n) const
   { return checkelem (n); }
 
-inline Complex *ComplexColumnVector::fortran_vec (void) { return data; }
+inline Complex *ComplexColumnVector::fortran_vec (void) const { return data; }
 
 /*
  * Complex Row Vector class
  */
 
 class ComplexRowVector
 {
 friend class RowVector;
@@ -1739,17 +1750,17 @@ public:
   Complex max (void) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const ComplexRowVector& a);
 
 // conversions
 
-  Complex *fortran_vec (void);
+  Complex *fortran_vec (void) const;
 
 private:
   int len;
   Complex *data;
 
   ComplexRowVector (Complex *d, int l);
 };
 
@@ -1787,17 +1798,17 @@ ComplexRowVector::checkelem (int n) cons
 #endif
 
   return elem (n);
 }
 
 inline Complex ComplexRowVector::operator () (int n) const
   { return checkelem (n); }
 
-inline Complex *ComplexRowVector::fortran_vec (void) { return data; }
+inline Complex *ComplexRowVector::fortran_vec (void) const { return data; }
 
 /*
  * Complex Diagonal Matrix class
  */
 
 class ComplexDiagMatrix
 {
 friend class Matrix;
@@ -2283,17 +2294,100 @@ inline Matrix GEPBALANCE::balanced_b_mat
 
 inline Matrix GEPBALANCE::left_balancing_matrix (void) const 
   { return left_balancing_mat; }
 
 inline Matrix GEPBALANCE::right_balancing_matrix (void) const 
   { return right_balancing_mat; }
 
 /*
- * Result of a Hessenbug Decomposition
+ * Result of a Cholesky Factorization
+ */
+
+class CHOL
+{
+friend class Matrix;
+
+public:
+  CHOL (void) {}
+
+  CHOL (const Matrix& a);
+  CHOL (const Matrix& a, int& info);
+
+  CHOL (const CHOL& a);
+
+  CHOL& operator = (const CHOL& a);
+  Matrix chol_matrix (void) const;
+  friend ostream& operator << (ostream& os, const CHOL& a);
+
+private:
+  int init (const Matrix& a);
+
+  Matrix chol_mat;
+};
+
+inline CHOL::CHOL (const Matrix& a) {init (a); }
+inline CHOL::CHOL (const Matrix& a, int& info) { info = init (a); }
+inline CHOL::CHOL (const CHOL& a) { chol_mat = a.chol_mat; }
+
+inline CHOL&
+CHOL::operator = (const CHOL& a)
+{
+  chol_mat = a.chol_mat;
+
+  return *this;
+}
+
+inline Matrix CHOL::chol_matrix (void) const { return chol_mat; }
+
+/*
+ * Result of a Cholesky Factorization
+ */
+
+class ComplexCHOL
+{
+friend class ComplexMatrix;
+
+public:
+  ComplexCHOL (void) {}
+  ComplexCHOL (const ComplexMatrix& a);
+  ComplexCHOL (const ComplexMatrix& a, int& info);
+  ComplexCHOL (const ComplexCHOL& a);
+  ComplexCHOL& operator = (const ComplexCHOL& a);
+  ComplexMatrix chol_matrix (void) const;
+
+  friend ostream& operator << (ostream& os, const ComplexCHOL& a);
+
+private:
+  int init (const ComplexMatrix& a);
+
+  ComplexMatrix chol_mat;
+};
+
+inline ComplexCHOL::ComplexCHOL (const ComplexMatrix& a) { init (a); }
+inline ComplexCHOL::ComplexCHOL (const ComplexMatrix& a, int& info)
+  { info = init (a); }
+
+inline ComplexCHOL::ComplexCHOL (const ComplexCHOL& a)
+  { chol_mat = a.chol_mat; }
+
+inline ComplexCHOL&
+ComplexCHOL::operator = (const ComplexCHOL& a)
+{
+  chol_mat = a.chol_mat;
+
+  return *this;
+}
+
+inline ComplexMatrix ComplexCHOL::chol_matrix (void) const
+  { return chol_mat; }
+
+  
+/*
+ * Result of a Hessenberg Decomposition
  */
 
 class HESS
 {
 friend class Matrix;
 
 public:
   HESS (void) {}
@@ -2312,34 +2406,37 @@ private:
   int init (const Matrix& a);
 
   Matrix hess_mat;
   Matrix unitary_hess_mat;
 };
 
 inline HESS::HESS (const Matrix& a) {init (a); }
 inline HESS::HESS (const Matrix& a, int& info) { info = init(a); }
+
 inline HESS::HESS (const HESS& a)
 {
   hess_mat = a.hess_mat;
   unitary_hess_mat = a.unitary_hess_mat;
 }
+
 inline HESS&
 HESS::operator = (const HESS& a)
 {
   hess_mat = a.hess_mat;
   unitary_hess_mat = a.unitary_hess_mat;
 
   return *this;
 }
+
 inline Matrix HESS::hess_matrix (void) const { return hess_mat; }
 inline Matrix HESS::unitary_hess_matrix (void) const {return unitary_hess_mat;}
 
 /*
- * Result of a Hessenburg Decomposition
+ * Result of a Hessenberg Decomposition
  */
 
 class ComplexHESS
 {
 friend class ComplexMatrix;
 
 public:
   ComplexHESS (void) {}
@@ -2410,17 +2507,16 @@ public:
 private:
   int init (const Matrix& a, const char *ord);
 
   Matrix schur_mat;
   Matrix unitary_mat;
 };
 
 inline SCHUR::SCHUR (const Matrix& a, const char *ord) { init (a, ord); }
-
 inline SCHUR::SCHUR (const Matrix& a, const char *ord, int& info) 
   { info = init (a, ord); }
 
 inline SCHUR::SCHUR (const SCHUR& a, const char *ord)
 {
   schur_mat = a.schur_mat;
   unitary_mat = a.unitary_mat;
 }
@@ -2483,16 +2579,17 @@ inline ComplexSCHUR::ComplexSCHUR (const
 inline ComplexSCHUR&
 ComplexSCHUR::operator = (const ComplexSCHUR& a, const char *ord)
 {
   schur_mat = a.schur_mat;
   unitary_mat = a.unitary_mat;
 
   return *this;
 }
+
 inline ComplexMatrix ComplexSCHUR::schur_matrix (void) const
   { return schur_mat; }
 
 inline ComplexMatrix ComplexSCHUR::unitary_matrix (void) const
   { return unitary_mat; }
 
 
 /*
@@ -2523,17 +2620,16 @@ private:
   int init (const Matrix& a);
 
   DiagMatrix sigma;
   Matrix left_sm;
   Matrix right_sm;
 };
 
 inline SVD::SVD (const Matrix& a) { init (a); }
-
 inline SVD::SVD (const Matrix& a, int& info) { info = init (a); }
 
 inline SVD::SVD (const SVD& a)
 {
   sigma = a.sigma;
   left_sm = a.left_sm;
   right_sm = a.right_sm;
 }
