# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1482862794 18000
#      Tue Dec 27 13:19:54 2016 -0500
# Node ID 0e9606b04ae0727692db27ebf14c3ca7cf3a0528
# Parent  0d1422cb7e936ddeef09f72781e9f0c72a1116c2
use F77_INT instead of octave_idx_type for libinterp ordschur function

* ordschur.cc: Use F77_INT instead of octave_idx_type for integer data
passed to Fortran subroutines.

diff --git a/libinterp/corefcn/ordschur.cc b/libinterp/corefcn/ordschur.cc
--- a/libinterp/corefcn/ordschur.cc
+++ b/libinterp/corefcn/ordschur.cc
@@ -72,50 +72,58 @@ is in the upper left corner, by doing:
 @end example
 
 @seealso{schur}
 @end deftypefn */)
 {
   if (args.length () != 3)
     print_usage ();
 
-  const Array<octave_idx_type> sel = args(2).octave_idx_type_vector_value ("ordschur: SELECT must be an array of integers");
+  const Array<octave_idx_type> sel_arg = args(2).octave_idx_type_vector_value ("ordschur: SELECT must be an array of integers");
 
-  const octave_idx_type n = sel.numel ();
+  const octave_idx_type sel_n = sel_arg.numel ();
 
   const dim_vector dimU = args(0).dims ();
   const dim_vector dimS = args(1).dims ();
 
-  if (n != dimU(0))
+  if (sel_n != dimU(0))
     error ("ordschur: SELECT must have same length as the sides of U and S");
-  else if (n != dimU(0) || n != dimS(0) || n != dimU(1) || n != dimS(1))
+  else if (sel_n != dimU(0) || sel_n != dimS(0) || sel_n != dimU(1)
+           || sel_n != dimS(1))
     error ("ordschur: U and S must be square and of equal sizes");
 
   octave_value_list retval;
 
   const bool double_type  = args(0).is_double_type ()
                             || args(1).is_double_type ();
   const bool complex_type = args(0).is_complex_type ()
                             || args(1).is_complex_type ();
 
 #define PREPARE_ARGS(TYPE, TYPE_M, TYPE_COND)                           \
-  TYPE ## Matrix U = args(0).x ## TYPE_M ## _value ("ordschur: U and S must be real or complex floating point matrices"); \
-  TYPE ## Matrix S = args(1).x ## TYPE_M ## _value ("ordschur: U and S must be real or complex floating point matrices"); \
+  TYPE ## Matrix U = args(0).x ## TYPE_M ## _value                      \
+    ("ordschur: U and S must be real or complex floating point matrices"); \
+  TYPE ## Matrix S = args(1).x ## TYPE_M ## _value                      \
+    ("ordschur: U and S must be real or complex floating point matrices"); \
   TYPE ## Matrix w (dim_vector (n, 1));                                 \
   TYPE ## Matrix work (dim_vector (n, 1));                              \
-  octave_idx_type m;                                                    \
-  octave_idx_type info;                                                 \
+  F77_INT m;                                                            \
+  F77_INT info;                                                         \
   TYPE_COND cond1, cond2;
 
 #define PREPARE_OUTPUT()                        \
   if (info != 0)                                \
     error ("ordschur: trsen failed");           \
                                                 \
   retval = ovl (U, S);
 
+  F77_INT n = to_f77_int (sel_n);
+  Array<F77_INT> sel (dim_vector (n, 1));
+  for (F77_INT i = 0; i < n; i++)
+    sel.xelem (i) = to_f77_int (sel_arg.xelem (i));
+
   if (double_type)
     {
       if (complex_type)
         {
           PREPARE_ARGS (Complex, complex_matrix, double)
 
           F77_XFCN (ztrsen, ztrsen,
                     (F77_CONST_CHAR_ARG ("N"), F77_CONST_CHAR_ARG ("V"),
@@ -126,17 +134,17 @@ is in the upper left corner, by doing:
                      info));
 
           PREPARE_OUTPUT()
         }
       else
         {
           PREPARE_ARGS (, matrix, double)
           Matrix wi (dim_vector (n, 1));
-          Array<octave_idx_type> iwork (dim_vector (n, 1));
+          Array<F77_INT> iwork (dim_vector (n, 1));
 
           F77_XFCN (dtrsen, dtrsen,
                     (F77_CONST_CHAR_ARG ("N"), F77_CONST_CHAR_ARG ("V"),
                      sel.data (), n, S.fortran_vec (), n, U.fortran_vec (), n,
                      w.fortran_vec (), wi.fortran_vec (), m, cond1, cond2,
                      work.fortran_vec (), n, iwork.fortran_vec (), n, info));
 
           PREPARE_OUTPUT ()
@@ -157,17 +165,17 @@ is in the upper left corner, by doing:
                      info));
 
           PREPARE_OUTPUT ()
         }
       else
         {
           PREPARE_ARGS (Float, float_matrix, float)
           FloatMatrix wi (dim_vector (n, 1));
-          Array<octave_idx_type> iwork (dim_vector (n, 1));
+          Array<F77_INT> iwork (dim_vector (n, 1));
 
           F77_XFCN (strsen, strsen,
                     (F77_CONST_CHAR_ARG ("N"), F77_CONST_CHAR_ARG ("V"),
                      sel.data (), n, S.fortran_vec (), n, U.fortran_vec (), n,
                      w.fortran_vec (), wi.fortran_vec (), m, cond1, cond2,
                      work.fortran_vec (), n, iwork.fortran_vec (), n, info));
 
           PREPARE_OUTPUT ()
