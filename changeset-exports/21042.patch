# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1452167399 18000
#      Thu Jan 07 06:49:59 2016 -0500
# Node ID 0967e239338608afa2679aafbab76c070eda6918
# Parent  63374982750bea68d4a1e42e716860755d8ae371
* ov-java.h, ov-java.cc: Style fixes.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -55,24 +55,26 @@ along with Octave; see the file COPYING.
 #include "oct-env.h"
 #include "oct-shlib.h"
 #include "ov-java.h"
 #include "parse.h"
 #include "variables.h"
 
 typedef jint (JNICALL *JNI_CreateJavaVM_t) (JavaVM **pvm, JNIEnv **penv,
                                             void *args);
+
 typedef jint (JNICALL *JNI_GetCreatedJavaVMs_t) (JavaVM **pvm, jsize bufLen,
                                                  jsize *nVMs);
 
 extern "C"
 {
   JNIEXPORT jboolean JNICALL
   Java_org_octave_Octave_call (JNIEnv *, jclass, jstring, jobjectArray,
                                jobjectArray);
+
   JNIEXPORT void JNICALL
   Java_org_octave_OctaveReference_doFinalize (JNIEnv *, jclass, jint);
 
   JNIEXPORT void JNICALL
   Java_org_octave_Octave_doInvoke (JNIEnv *, jclass, jint, jobjectArray);
 
   JNIEXPORT void JNICALL
   Java_org_octave_Octave_doEvalString (JNIEnv *, jclass, jstring);
@@ -108,17 +110,17 @@ public:
     vm_args.ignoreUnrecognized = false;
   }
 
   ~JVMArgs (void)
   {
     clean ();
   }
 
-  JavaVMInitArgs* to_args ()
+  JavaVMInitArgs *to_args ()
   {
     update ();
     return &vm_args;
   }
 
   void add (const std::string& opt)
   {
     java_opts.push_back (opt);
@@ -130,32 +132,34 @@ public:
 
     if (! js.bad () && ! js.fail ())
       {
         std::string line;
 
         while (! js.eof () && ! js.fail ())
           {
             std::getline (js, line);
+
             if (line.find ("-") == 0)
               java_opts.push_back (line);
             else if (line.length () > 0 && Vdebug_java)
               std::cerr << "invalid JVM option, skipping: " << line << std::endl;
           }
       }
   }
 
 private:
 
   void clean (void)
   {
     if (vm_args.options != 0)
       {
         for (int i = 0; i < vm_args.nOptions; i++)
           delete [] vm_args.options[i].optionString;
+
         delete [] vm_args.options;
 
         vm_args.options = 0;
         vm_args.nOptions = 0;
       }
   }
 
   void update (void)
@@ -163,35 +167,38 @@ private:
     clean ();
 
     if (java_opts.size () > 0)
       {
         int index = 0;
 
         vm_args.nOptions = java_opts.size ();
         vm_args.options = new JavaVMOption [vm_args.nOptions];
+
         for (std::list<std::string>::const_iterator it = java_opts.begin ();
              it != java_opts.end (); ++it)
           {
             if (Vdebug_java)
               std::cout << *it << std::endl;
             vm_args.options[index++].optionString = strsave ((*it).c_str ());
           }
+
         java_opts.clear ();
       }
   }
 
 private:
 
   JavaVMInitArgs vm_args;
 
   std::list<std::string> java_opts;
 };
 
 #ifdef __WIN32__
+
 static std::string
 read_registry_string (const std::string& key, const std::string& value)
 {
   HKEY hkey;
   DWORD len;
 
   std::string retval;
 
@@ -216,30 +223,31 @@ static std::string
 get_module_filename (HMODULE hMod)
 {
   int n = 1024;
   std::string retval (n, '\0');
   bool found = false;
 
   while (n < 65536)
     {
-      int status = GetModuleFileName(hMod, &retval[0], n);
+      int status = GetModuleFileName (hMod, &retval[0], n);
 
       if (status < n)
         {
           retval.resize (n);
           found = true;
           break;
         }
       else
         {
           n *= 2;
           retval.resize (n);
         }
     }
+
   return (found ? retval : "");
 }
 
 static void
 set_dll_directory (const std::string& dir = "")
 {
   typedef BOOL (WINAPI *dllfcn_t) (LPCTSTR path);
 
@@ -252,16 +260,17 @@ set_dll_directory (const std::string& di
       dllfcn = reinterpret_cast<dllfcn_t> (GetProcAddress (hKernel32,
                                            "SetDllDirectoryA"));
       first = false;
     }
 
   if (dllfcn)
     dllfcn (dir.empty () ? 0 : dir.c_str ());
 }
+
 #endif
 
 static std::string
 initial_java_dir (void)
 {
   static std::string java_dir;
 
   if (java_dir.empty ())
@@ -418,16 +427,17 @@ initial_class_path (void)
 #define _FPU_DEFAULT 0
 #endif
 #endif
 
 static void
 restore_fpu_state (void)
 {
   fpucw_t cw = GET_FPUCW ();
+
   if (cw != _FPU_DEFAULT)
     SET_FPUCW (_FPU_DEFAULT);
 }
 
 static void
 initialize_jvm (void)
 {
   // Most of the time JVM already exists and has been initialized.
@@ -628,32 +638,32 @@ terminate_jvm (void)
       if (jvm_lib)
         jvm_lib.close ();
 
       restore_fpu_state ();
     }
 }
 
 std::string
-jstring_to_string (JNIEnv* jni_env, jstring s)
+jstring_to_string (JNIEnv *jni_env, jstring s)
 {
   std::string retval;
 
   if (jni_env)
     {
       const char *cstr = jni_env->GetStringUTFChars (s, 0);
       retval = cstr;
       jni_env->ReleaseStringUTFChars (s, cstr);
     }
 
   return retval;
 }
 
 std::string
-jstring_to_string (JNIEnv* jni_env, jobject obj)
+jstring_to_string (JNIEnv *jni_env, jobject obj)
 {
   std::string retval;
 
   if (jni_env && obj)
     {
       jclass_ref cls (jni_env, jni_env->FindClass ("java/lang/String"));
       if (cls)
         {
@@ -687,25 +697,25 @@ octave_java::is_instance_of (const std::
 
   std::string cls_cpp = cls_name;
   std::replace (cls_cpp.begin (), cls_cpp.end (), '.', '/');
 
   if (current_env && java_object)
     {
       jclass_ref cls (current_env, current_env->FindClass (cls_cpp.c_str ()));
       if (current_env->ExceptionCheck ())
-        current_env->ExceptionClear();
+        current_env->ExceptionClear ();
       else
         return current_env->IsInstanceOf (java_object, cls);
     }
   return false;
 }
 
 static octave_value
-check_exception (JNIEnv* jni_env)
+check_exception (JNIEnv *jni_env)
 {
   octave_value retval;
 
   jthrowable_ref ex (jni_env, jni_env->ExceptionOccurred ());
 
   if (ex)
     {
       if (Vdebug_java)
@@ -786,17 +796,17 @@ find_octave_class (JNIEnv *jni_env, cons
           jcls = reinterpret_cast<jclass> (jni_env->CallStaticObjectMethod (uiClass, mID, jstring (js)));
         }
     }
 
   return jcls;
 }
 
 static dim_vector
-compute_array_dimensions (JNIEnv* jni_env, jobject obj)
+compute_array_dimensions (JNIEnv *jni_env, jobject obj)
 {
   jobjectArray_ref jobj (jni_env, reinterpret_cast<jobjectArray> (obj));
   jclass_ref jcls (jni_env, jni_env->GetObjectClass (obj));
   jclass_ref ccls (jni_env, jni_env->GetObjectClass (jcls));
   jmethodID isArray_ID = jni_env->GetMethodID (ccls, "isArray", "()Z");
   jmethodID getComponentType_ID = jni_env->GetMethodID (ccls, "getComponentType", "()Ljava/lang/Class;");
 
   dim_vector dv (1, 1);
@@ -815,17 +825,17 @@ compute_array_dimensions (JNIEnv* jni_en
     }
 
   restore_fpu_state ();
 
   return dv;
 }
 
 static jobject
-make_java_index (JNIEnv* jni_env, const octave_value_list& idx)
+make_java_index (JNIEnv *jni_env, const octave_value_list& idx)
 {
   jclass_ref ocls (jni_env, jni_env->FindClass ("[I"));
   jobjectArray retval = jni_env->NewObjectArray (idx.length (), ocls, 0);
 
   for (int i = 0; i < idx.length (); i++)
     try
       {
         idx_vector v = idx(i).index_vector ();
@@ -847,17 +857,17 @@ make_java_index (JNIEnv* jni_env, const 
         e.set_pos_if_unset (idx.length (), i+1);
         throw;
       }
 
   return retval;
 }
 
 static octave_value
-get_array_elements (JNIEnv* jni_env, jobject jobj,
+get_array_elements (JNIEnv *jni_env, jobject jobj,
                     const octave_value_list& idx)
 {
   octave_value retval;
   jobject_ref resObj (jni_env);
   jobject_ref java_idx (jni_env, make_java_index (jni_env, idx));
 
   jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
   jmethodID mID = jni_env->GetStaticMethodID (helperClass, "arraySubsref", "(Ljava/lang/Object;[[I)Ljava/lang/Object;");
@@ -869,17 +879,17 @@ get_array_elements (JNIEnv* jni_env, job
     retval = check_exception (jni_env);
 
   restore_fpu_state ();
 
   return retval;
 }
 
 static octave_value
-set_array_elements (JNIEnv* jni_env, jobject jobj,
+set_array_elements (JNIEnv *jni_env, jobject jobj,
                     const octave_value_list& idx, const octave_value& rhs)
 {
   octave_value retval;
 
   jclass_ref rhsCls (jni_env);
   jobject_ref resObj (jni_env);
   jobject_ref rhsObj (jni_env);
   jobject_ref java_idx (jni_env, make_java_index (jni_env, idx));
@@ -899,17 +909,17 @@ set_array_elements (JNIEnv* jni_env, job
     retval = check_exception (jni_env);
 
   restore_fpu_state ();
 
   return retval;
 }
 
 static string_vector
-get_invoke_list (JNIEnv* jni_env, jobject jobj)
+get_invoke_list (JNIEnv *jni_env, jobject jobj)
 {
   std::list<std::string> name_list;
 
   if (jni_env)
     {
       jclass_ref cls (jni_env, jni_env->GetObjectClass (jobj));
       jclass_ref ccls (jni_env, jni_env->GetObjectClass (cls));
       jmethodID getMethods_ID = jni_env->GetMethodID (ccls, "getMethods", "()[Ljava/lang/reflect/Method;");
@@ -997,17 +1007,17 @@ convert_to_string (JNIEnv *jni_env, jobj
     }
 
   return retval;
 }
 
 #define TO_JAVA(obj) dynamic_cast<octave_java*> ((obj).internal_rep ())
 
 octave_value
-box (JNIEnv* jni_env, jobject jobj, jclass jcls)
+box (JNIEnv *jni_env, jobject jobj, jclass jcls)
 {
   octave_value retval;
   jclass_ref cls (jni_env);
 
   if (! jobj)
     retval = Matrix ();
 
   while (retval.is_undefined ())
@@ -1048,17 +1058,17 @@ box (JNIEnv* jni_env, jobject jobj, jcla
 
 #define BOX_PRIMITIVE_ARRAY(JAVA_TYPE, JAVA_ID, JAVA_TYPE_CAP, OCTAVE_ID) \
       cls = jni_env->FindClass (JAVA_ID); \
       if (jni_env->IsInstanceOf (jobj, cls)) \
         { \
           const JAVA_TYPE ## Array jarr = reinterpret_cast<JAVA_TYPE ## Array> (jobj); \
           const jsize len = jni_env->GetArrayLength (jarr); \
           OCTAVE_ID ## NDArray d (dim_vector (len, 1)); \
-          JAVA_TYPE * buffer = reinterpret_cast<JAVA_TYPE *> (d.fortran_vec ()); \
+          JAVA_TYPE *buffer = reinterpret_cast<JAVA_TYPE *> (d.fortran_vec ()); \
           jni_env->Get ## JAVA_TYPE_CAP ## ArrayRegion (jarr, 0, len, buffer); \
           retval = d; \
           break; \
         }
 
       BOX_PRIMITIVE_ARRAY (jdouble,  "[D", Double,  )
       BOX_PRIMITIVE_ARRAY (jboolean, "[Z", Boolean, bool)
       BOX_PRIMITIVE_ARRAY (jfloat,   "[F", Float,   Float)
@@ -1162,17 +1172,17 @@ box (JNIEnv* jni_env, jobject jobj, jcla
       retval = octave_value (new octave_java (jobj, jcls));
       break;
     }
 
   return retval;
 }
 
 octave_value
-box_more (JNIEnv* jni_env, jobject jobj, jclass jcls)
+box_more (JNIEnv *jni_env, jobject jobj, jclass jcls)
 {
   octave_value retval = box (jni_env, jobj, jcls);
 
   if (retval.is_java ())
     {
       retval = octave_value ();
 
       jclass_ref cls (jni_env);
@@ -1256,17 +1266,17 @@ box_more (JNIEnv* jni_env, jobject jobj,
     retval = octave_value (new octave_java (jobj, jcls));
 
   restore_fpu_state ();
 
   return retval;
 }
 
 bool
-unbox (JNIEnv* jni_env, const octave_value& val, jobject_ref& jobj,
+unbox (JNIEnv *jni_env, const octave_value& val, jobject_ref& jobj,
        jclass_ref& jcls)
 {
   bool found = true;
 
   if (val.is_java ())
     {
       octave_java *ovj = TO_JAVA (val);
       jobj = ovj->to_java ();
@@ -1279,82 +1289,116 @@ unbox (JNIEnv* jni_env, const octave_val
 
       jobj = jni_env->NewStringUTF (s.c_str ());
       jcls = jni_env->GetObjectClass (jobj);
     }
   else if (val.is_cellstr ())
     {
       const Array<std::string> str_arr = val.cellstr_value ();
       const octave_idx_type n = str_arr.numel ();
+
       jclass_ref scls (jni_env, jni_env->FindClass ("java/lang/String"));
       jobjectArray array = jni_env->NewObjectArray (n, scls, NULL);
+
       for (octave_idx_type i = 0; i < n; i++)
         {
           jstring_ref jstr (jni_env, jni_env->NewStringUTF (str_arr(i).c_str ()));
           jni_env->SetObjectArrayElement (array, i, jstr);
         }
+
       jobj = array;
       jcls = jni_env->GetObjectClass (jobj);
     }
   else if (val.numel () > 1 && val.dims ().is_vector ())
     {
-#define IF_UNBOX_PRIMITIVE_ARRAY(CHECK_TYPE, METHOD_TYPE, OCTAVE_TYPE, JAVA_TYPE, JAVA_TYPE_CAP) \
-      if (val.is_ ## CHECK_TYPE ## _type ()) \
-        { \
-          const OCTAVE_TYPE ## NDArray v = val.METHOD_TYPE ## array_value (); \
-          JAVA_TYPE ## Array jarr = jni_env->New ## JAVA_TYPE_CAP ## Array (v.numel ()); \
-          const JAVA_TYPE* jv = reinterpret_cast<const JAVA_TYPE*> (v.data ()); \
-          jni_env->Set ## JAVA_TYPE_CAP ## ArrayRegion (jarr, 0, v.numel (), jv); \
-          jobj = reinterpret_cast<jobject> (jarr); \
-          jcls = jni_env->GetObjectClass (jobj); \
-        }
+      // FIXME: Is there any way to avoid code duplication here without
+      // using a macro?
+
+#define UNBOX_PRIMITIVE_ARRAY(METHOD_T, OCTAVE_T, JAVA_T, JAVA_T_CAP) \
+  do \
+    { \
+      const OCTAVE_T ## NDArray v = val.METHOD_T ## array_value (); \
+      JAVA_T ## Array jarr = jni_env->New ## JAVA_T_CAP ## Array (v.numel ()); \
+      const JAVA_T *jv = reinterpret_cast<const JAVA_T*> (v.data ()); \
+      jni_env->Set ## JAVA_T_CAP ## ArrayRegion (jarr, 0, v.numel (), jv); \
+      jobj = reinterpret_cast<jobject> (jarr); \
+      jcls = jni_env->GetObjectClass (jobj); \
+    } \
+  while (0)
 
       // Note that we do NOT handle char here because they are unboxed
       // into a String[], not into a char array
-           IF_UNBOX_PRIMITIVE_ARRAY(double,      ,       ,   jdouble,  Double)
-      else IF_UNBOX_PRIMITIVE_ARRAY(bool,   bool_,   bool,   jboolean, Boolean)
-      else IF_UNBOX_PRIMITIVE_ARRAY(float,  float_,  Float,  jfloat,   Float)
-      else IF_UNBOX_PRIMITIVE_ARRAY(int8,   int8_,   int8,   jbyte,    Byte)
-      else IF_UNBOX_PRIMITIVE_ARRAY(uint8,  uint8_,  uint8,  jbyte,    Byte)
-      else IF_UNBOX_PRIMITIVE_ARRAY(int16,  int16_,  int16,  jshort,   Short)
-      else IF_UNBOX_PRIMITIVE_ARRAY(uint16, uint16_, uint16, jshort,   Short)
-      else IF_UNBOX_PRIMITIVE_ARRAY(int32,  int32_,  int32,  jint,     Int)
-      else IF_UNBOX_PRIMITIVE_ARRAY(uint32, uint32_, uint32, jint,     Int)
-      else IF_UNBOX_PRIMITIVE_ARRAY(int64,  int64_,  int64,  jlong,    Long)
-      else IF_UNBOX_PRIMITIVE_ARRAY(uint64, uint64_, uint64, jlong,    Long)
-
-#undef IF_UNBOX_PRIMITIVE_ARRAY
+
+      if (val.is_double_type ())
+        UNBOX_PRIMITIVE_ARRAY ( , , jdouble,  Double);
+      else if (val.is_bool_type ())
+        UNBOX_PRIMITIVE_ARRAY (bool_, bool, jboolean, Boolean);
+      else if (val.is_float_type ())
+        UNBOX_PRIMITIVE_ARRAY (float_, Float, jfloat, Float);
+      else if (val.is_int8_type ())
+        UNBOX_PRIMITIVE_ARRAY (int8_, int8, jbyte, Byte);
+      else if (val.is_uint8_type ())
+        UNBOX_PRIMITIVE_ARRAY (uint8_, uint8, jbyte, Byte);
+      else if (val.is_int16_type ())
+        UNBOX_PRIMITIVE_ARRAY (int16_, int16, jshort, Short);
+      else if (val.is_uint16_type ())
+        UNBOX_PRIMITIVE_ARRAY (uint16_, uint16, jshort, Short);
+      else if (val.is_int32_type ())
+        UNBOX_PRIMITIVE_ARRAY (int32_, int32, jint, Int);
+      else if (val.is_uint32_type ())
+        UNBOX_PRIMITIVE_ARRAY (uint32_, uint32, jint, Int);
+      else if (val.is_int64_type ())
+        UNBOX_PRIMITIVE_ARRAY (int64_, int64, jlong, Long);
+      else if (val.is_uint64_type ())
+        UNBOX_PRIMITIVE_ARRAY (uint64_, uint64, jlong, Long);
+
+#undef UNBOX_PRIMITIVE_ARRAY
     }
   else if (val.is_real_scalar () || val.is_bool_scalar ())
     {
-#define IF_UNBOX_PRIMITIVE_SCALAR(CHECK_TYPE, OCTAVE_TYPE, METHOD_TYPE, JAVA_TYPE, JAVA_CON) \
-      if (val.is_ ## CHECK_TYPE ## _type ()) \
-        { \
-          const OCTAVE_TYPE ov = val.METHOD_TYPE ## _value (); \
-          jclass_ref dcls (jni_env, jni_env->FindClass (JAVA_TYPE)); \
-          const jfieldID fid = jni_env->GetStaticFieldID (dcls, "TYPE", "Ljava/lang/Class;"); \
-          const jmethodID mid = jni_env->GetMethodID (dcls, "<init>", JAVA_CON); \
-          jcls = reinterpret_cast<jclass> (jni_env->GetStaticObjectField (dcls, fid)); \
-          jobj = jni_env->NewObject (dcls, mid, ov); \
-         }
-
-           IF_UNBOX_PRIMITIVE_SCALAR(double, double,   double,        "java/lang/Double",  "(D)V")
-      else IF_UNBOX_PRIMITIVE_SCALAR(bool,   bool,     bool,          "java/lang/Boolean", "(Z)V")
-      else IF_UNBOX_PRIMITIVE_SCALAR(float,  float,    float,         "java/lang/Float",   "(F)V")
-      else IF_UNBOX_PRIMITIVE_SCALAR(int8,   int8_t,   int8_scalar,   "java/lang/Byte",    "(B)V")
-      else IF_UNBOX_PRIMITIVE_SCALAR(uint8,  uint8_t,  uint8_scalar,  "java/lang/Byte",    "(B)V")
-      else IF_UNBOX_PRIMITIVE_SCALAR(int16,  int16_t,  int16_scalar,  "java/lang/Short",   "(S)V")
-      else IF_UNBOX_PRIMITIVE_SCALAR(uint16, uint16_t, uint16_scalar, "java/lang/Short",   "(S)V")
-      else IF_UNBOX_PRIMITIVE_SCALAR(int32,  int32_t,  int32_scalar,  "java/lang/Int",     "(I)V")
-      else IF_UNBOX_PRIMITIVE_SCALAR(uint32, uint32_t, uint32_scalar, "java/lang/Int",     "(I)V")
-      else IF_UNBOX_PRIMITIVE_SCALAR(int64,  int64_t,  int64_scalar,  "java/lang/Long",    "(L)V")
-      else IF_UNBOX_PRIMITIVE_SCALAR(uint64, uint64_t, uint64_scalar, "java/lang/Long",    "(L)V")
-
-#undef IF_UNBOX_PRIMITIVE_SCALAR
-    }
+      // FIXME: Is there any way to avoid code duplication here without
+      // using a macro?
+
+#define UNBOX_PRIMITIVE_SCALAR(OCTAVE_T, METHOD_T, JAVA_T, JAVA_CON)    \
+  do \
+    { \
+      const OCTAVE_T ov = val.METHOD_T ## _value (); \
+      jclass_ref dcls (jni_env, jni_env->FindClass (JAVA_T)); \
+      const jfieldID fid = jni_env->GetStaticFieldID (dcls, "TYPE", "Ljava/lang/Class;"); \
+      const jmethodID mid = jni_env->GetMethodID (dcls, "<init>", JAVA_CON); \
+      jcls = reinterpret_cast<jclass> (jni_env->GetStaticObjectField (dcls, fid)); \
+      jobj = jni_env->NewObject (dcls, mid, ov); \
+     } \
+   while (0)
+
+      if (val.is_double_type ())
+        UNBOX_PRIMITIVE_SCALAR (double, double, "java/lang/Double", "(D)V");
+      else if (val.is_bool_type ())
+        UNBOX_PRIMITIVE_SCALAR (bool, bool, "java/lang/Boolean", "(Z)V");
+      else if (val.is_float_type ())
+        UNBOX_PRIMITIVE_SCALAR (float, float, "java/lang/Float", "(F)V");
+      else if (val.is_int8_type ())
+        UNBOX_PRIMITIVE_SCALAR (int8_t, int8_scalar, "java/lang/Byte", "(B)V");
+      else if (val.is_uint8_type ())
+        UNBOX_PRIMITIVE_SCALAR (uint8_t, uint8_scalar, "java/lang/Byte", "(B)V");
+      else if (val.is_int16_type ())
+        UNBOX_PRIMITIVE_SCALAR (int16_t, int16_scalar, "java/lang/Short", "(S)V");
+      else if (val.is_uint16_type ())
+        UNBOX_PRIMITIVE_SCALAR (uint16_t, uint16_scalar, "java/lang/Short", "(S)V");
+      else if (val.is_int32_type ())
+        UNBOX_PRIMITIVE_SCALAR (int32_t, int32_scalar, "java/lang/Int", "(I)V");
+      else if (val.is_uint32_type ())
+        UNBOX_PRIMITIVE_SCALAR (uint32_t, uint32_scalar, "java/lang/Int", "(I)V");
+      else if (val.is_int64_type ())
+        UNBOX_PRIMITIVE_SCALAR (int64_t, int64_scalar, "java/lang/Long", "(L)V");
+      else if (val.is_uint64_type ())
+        UNBOX_PRIMITIVE_SCALAR (uint64_t, uint64_scalar, "java/lang/Long", "(L)V");
+
+#undef UNBOX_PRIMITIVE_SCALAR
+      }
   else if (val.is_empty ())
     {
       jobj = 0;
       jcls = 0;
       //jcls = jni_env->FindClass ("java/lang/Object");
     }
   else if (! Vjava_matrix_autoconversion
            && ((val.is_real_matrix ()
@@ -1437,17 +1481,17 @@ unbox (JNIEnv* jni_env, const octave_val
       jcls = rcls;
       octave_ref_map[ID] = val;
     }
 
   return found;
 }
 
 bool
-unbox (JNIEnv* jni_env, const octave_value_list& args,
+unbox (JNIEnv *jni_env, const octave_value_list& args,
        jobjectArray_ref& jobjs, jobjectArray_ref& jclss)
 {
   bool found = true;
 
   jclass_ref ocls (jni_env, jni_env->FindClass ("java/lang/Object"));
   jclass_ref ccls (jni_env, jni_env->FindClass ("java/lang/Class"));
 
   if (! jobjs)
@@ -1861,17 +1905,17 @@ octave_java::save_hdf5 (octave_hdf5_id /
 bool
 octave_java::load_hdf5 (octave_hdf5_id /* loc_id */, const char * /* name */)
 {
   // Silently skip object that was not saved
   return true;
 }
 
 octave_value
-octave_java::do_javaMethod (JNIEnv* jni_env, const std::string& name,
+octave_java::do_javaMethod (JNIEnv *jni_env, const std::string& name,
                             const octave_value_list& args)
 {
   octave_value retval;
 
   if (jni_env)
     {
       jobjectArray_ref arg_objs (jni_env), arg_types (jni_env);
       if (unbox (jni_env, args, arg_objs, arg_types))
@@ -1890,17 +1934,17 @@ octave_java::do_javaMethod (JNIEnv* jni_
 
       restore_fpu_state ();
     }
 
   return retval;
 }
 
 octave_value
-octave_java:: do_javaMethod (JNIEnv* jni_env,
+octave_java:: do_javaMethod (JNIEnv *jni_env,
                              const std::string& class_name,
                              const std::string& name,
                              const octave_value_list& args)
 {
   octave_value retval;
 
   if (jni_env)
     {
@@ -1922,17 +1966,17 @@ octave_java:: do_javaMethod (JNIEnv* jni
 
       restore_fpu_state ();
     }
 
   return retval;
 }
 
 octave_value
-octave_java::do_javaObject (JNIEnv* jni_env, const std::string& name,
+octave_java::do_javaObject (JNIEnv *jni_env, const std::string& name,
                             const octave_value_list& args)
 {
   octave_value retval;
 
   if (jni_env)
     {
       jobjectArray_ref arg_objs (jni_env), arg_types (jni_env);
 
@@ -1953,17 +1997,17 @@ octave_java::do_javaObject (JNIEnv* jni_
 
       restore_fpu_state ();
     }
 
   return retval;
 }
 
 octave_value
-octave_java::do_java_get (JNIEnv* jni_env, const std::string& name)
+octave_java::do_java_get (JNIEnv *jni_env, const std::string& name)
 {
   octave_value retval;
 
   if (jni_env)
     {
       jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
       jmethodID mID = jni_env->GetStaticMethodID (helperClass, "getField",
           "(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;");
@@ -1978,17 +2022,17 @@ octave_java::do_java_get (JNIEnv* jni_en
 
       restore_fpu_state ();
     }
 
   return retval;
 }
 
 octave_value
-octave_java::do_java_get (JNIEnv* jni_env, const std::string& class_name,
+octave_java::do_java_get (JNIEnv *jni_env, const std::string& class_name,
                           const std::string& name)
 {
   octave_value retval;
 
   if (jni_env)
     {
       jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
       jmethodID mID = jni_env->GetStaticMethodID (helperClass, "getStaticField",
@@ -2004,17 +2048,17 @@ octave_java::do_java_get (JNIEnv* jni_en
 
       restore_fpu_state ();
     }
 
   return retval;
 }
 
 octave_value
-octave_java::do_java_set (JNIEnv* jni_env, const std::string& name,
+octave_java::do_java_set (JNIEnv *jni_env, const std::string& name,
                           const octave_value& val)
 {
   octave_value retval;
 
   if (jni_env)
     {
       jobject_ref jobj (jni_env);
       jclass_ref jcls (jni_env);
@@ -2031,17 +2075,17 @@ octave_java::do_java_set (JNIEnv* jni_en
 
       restore_fpu_state ();
     }
 
   return retval;
 }
 
 octave_value
-octave_java::do_java_set (JNIEnv* jni_env, const std::string& class_name,
+octave_java::do_java_set (JNIEnv *jni_env, const std::string& class_name,
                           const std::string& name, const octave_value& val)
 {
   octave_value retval;
 
   if (jni_env)
     {
       jobject_ref jobj (jni_env);
       jclass_ref jcls (jni_env);
@@ -2058,27 +2102,73 @@ octave_java::do_java_set (JNIEnv* jni_en
         }
 
       restore_fpu_state ();
     }
 
   return retval;
 }
 
+void
+octave_java::init (jobject jobj, jclass jcls)
+{
+  JNIEnv *current_env = thread_jni_env ();
+
+  if (current_env)
+    {
+      if (jobj)
+        java_object = current_env->NewGlobalRef (jobj);
+
+      if (jcls)
+        java_class = reinterpret_cast<jclass> (current_env->NewGlobalRef (jcls));
+      else if (java_object)
+        {
+          jclass_ref ocls (current_env, current_env->GetObjectClass (java_object));
+          java_class = reinterpret_cast<jclass> (current_env->NewGlobalRef (jclass (ocls)));
+        }
+
+      if (java_class)
+        {
+          jclass_ref clsCls (current_env, current_env->GetObjectClass (java_class));
+          jmethodID mID = current_env->GetMethodID (clsCls, "getCanonicalName", "()Ljava/lang/String;");
+          jobject_ref resObj (current_env, current_env->CallObjectMethod (java_class, mID));
+          java_classname = jstring_to_string (current_env, resObj);
+        }
+    }
+}
+
+void
+octave_java::release (void)
+{
+  JNIEnv *current_env = thread_jni_env ();
+
+  if (current_env)
+    {
+      if (java_object)
+        current_env->DeleteGlobalRef (java_object);
+
+      if (java_class)
+        current_env->DeleteGlobalRef (java_class);
+
+      java_object = 0;
+      java_class = 0;
+    }
+}
+
 #endif
 
 // DEFUN blocks below must be outside of HAVE_JAVA block so that
 // documentation strings are always available, even when functions are not.
 
 DEFUN (__java_init__, , ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} __java_init__ ()\n\
 Internal function used @strong{only} when debugging Java interface.\n\
 \n\
-Function will directly call initialize_java() to create an instance of a JVM.\n\
+Function will directly call initialize_java to create an instance of a JVM.\n\
 @end deftypefn")
 {
 
 #ifdef HAVE_JAVA
   octave_value retval;
 
   retval = 0;
 
@@ -2092,17 +2182,17 @@ Function will directly call initialize_j
 #endif
 }
 
 DEFUN (__java_exit__, , ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} __java_exit__ ()\n\
 Internal function used @strong{only} when debugging Java interface.\n\
 \n\
-Function will directly call terminate_jvm() to destroy the current JVM\n\
+Function will directly call terminate_jvm to destroy the current JVM\n\
 instance.\n\
 @end deftypefn")
 {
 #ifdef HAVE_JAVA
   terminate_jvm ();
 
   return ovl ();
 
@@ -2151,19 +2241,20 @@ x = javaObject (\"java.lang.StringBuffer
 #else
 
   error ("javaObject: Octave was not compiled with Java interface");
 
 #endif
 }
 
 /*
-## The tests below merely check if javaObject() works at all.  Whether it works
-## properly, i.e., creates the right values, is a matter of Java itself.
-## Create a Short and check if it really is a short, i.e., whether it overflows.
+## The tests below merely check if javaObject works at all.  Whether
+## it works properly, i.e., creates the right values, is a matter of
+## Java itself.  Create a Short and check if it really is a short, i.e.,
+## whether it overflows.
 %!testif HAVE_JAVA
 %! assert (javaObject ("java.lang.Short", 40000).doubleValue < 0);
 */
 
 DEFUN (javaMethod, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {} {@var{ret} =} javaMethod (@var{methodname}, @var{obj})\n\
 @deftypefnx {} {@var{ret} =} javaMethod (@var{methodname}, @var{obj}, @var{arg1}, @dots{})\n\
diff --git a/libinterp/octave-value/ov-java.h b/libinterp/octave-value/ov-java.h
--- a/libinterp/octave-value/ov-java.h
+++ b/libinterp/octave-value/ov-java.h
@@ -36,21 +36,23 @@ public:
   java_local_ref (JNIEnv *_env)
     : jobj (0), detached (false), env (_env) { }
 
   java_local_ref (JNIEnv *_env, T obj)
     : jobj (obj), detached (false), env (_env) { }
 
   ~java_local_ref (void) { release (); }
 
-  T& operator= (T obj)
+  T& operator = (T obj)
   {
     release ();
+
     jobj = obj;
     detached = false;
+
     return jobj;
   }
 
   operator bool () const { return (jobj != 0); }
   operator T () { return jobj; }
 
   void detach (void) { detached = true; }
 
@@ -64,16 +66,17 @@ private:
     jobj = 0;
   }
 
   java_local_ref (void)
     : jobj (0), detached (false), env (0)
   { }
 
 protected:
+
   T jobj;
   bool detached;
   JNIEnv *env;
 };
 
 typedef java_local_ref<jobject> jobject_ref;
 typedef java_local_ref<jclass> jclass_ref;
 typedef java_local_ref<jstring> jstring_ref;
@@ -193,28 +196,28 @@ public:
   static JNIEnv* thread_jni_env (void);
 
   octave_value do_javaMethod (JNIEnv* jni_env, const std::string& name,
                               const octave_value_list& args);
 
   octave_value
   do_javaMethod (const std::string& name, const octave_value_list& args)
   {
-    return do_javaMethod(thread_jni_env (), name, args);
+    return do_javaMethod (thread_jni_env (), name, args);
   }
 
   static octave_value
   do_javaMethod (JNIEnv* jni_env, const std::string& class_name,
                  const std::string& name, const octave_value_list& args);
 
   static octave_value
   do_javaMethod (const std::string& class_name, const std::string& name,
                  const octave_value_list& args)
   {
-    return do_javaMethod(thread_jni_env (), class_name, name, args);
+    return do_javaMethod (thread_jni_env (), class_name, name, args);
   }
 
   static octave_value
   do_javaObject (JNIEnv* jni_env, const std::string& name,
                  const octave_value_list& args);
 
   static octave_value
   do_javaObject (const std::string& name, const octave_value_list& args)
@@ -255,77 +258,38 @@ public:
   do_java_set (const std::string& class_name, const std::string& name,
                const octave_value& val)
   {
     return do_java_set (thread_jni_env (), class_name, name, val);
   }
 
 private:
 
-  void init (jobject jobj, jclass jcls)
-  {
-    JNIEnv *current_env = thread_jni_env ();
-
-    if (current_env)
-      {
-        if (jobj)
-          java_object = current_env->NewGlobalRef (jobj);
-
-        if (jcls)
-          java_class = reinterpret_cast<jclass> (current_env->NewGlobalRef (jcls));
-        else if (java_object)
-          {
-            jclass_ref ocls (current_env, current_env->GetObjectClass (java_object));
-            java_class = reinterpret_cast<jclass> (current_env->NewGlobalRef (jclass (ocls)));
-          }
+  void init (jobject jobj, jclass jcls);
 
-        if (java_class)
-          {
-            jclass_ref clsCls (current_env, current_env->GetObjectClass (java_class));
-            jmethodID mID = current_env->GetMethodID (clsCls, "getCanonicalName", "()Ljava/lang/String;");
-            jobject_ref resObj (current_env, current_env->CallObjectMethod (java_class, mID));
-            java_classname = jstring_to_string (current_env, resObj);
-          }
-      }
-  }
-
-  void release (void)
-  {
-    JNIEnv *current_env = thread_jni_env ();
-
-    if (current_env)
-      {
-        if (java_object)
-          current_env->DeleteGlobalRef (java_object);
-
-        if (java_class)
-          current_env->DeleteGlobalRef (java_class);
-
-        java_object = 0;
-        java_class = 0;
-      }
-  }
+  void release (void);
 
 private:
 
   jobject java_object;
 
   jclass java_class;
 
   std::string java_classname;
 
+public:
 
-public:
   int type_id (void) const { return t_id; }
   std::string type_name (void) const { return t_name; }
   std::string class_name (void) const { return java_classname; }
 
   static int static_type_id (void) { return t_id; }
   static std::string static_type_name (void) { return t_name; }
   static std::string static_class_name (void) { return "<unknown>"; }
   static void register_type (void);
 
 private:
+
   static int t_id;
   static const std::string t_name;
 };
 
 #endif
