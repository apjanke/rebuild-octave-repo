# HG changeset patch
# User jwe
# Date 809316961 0
#      Fri Aug 25 02:16:01 1995 +0000
# Node ID 52a3f38cbfeb41f9714fc304eec7401022622274
# Parent  33d5c2471c09b3f625daa141697dd1e61c8aac5c
[project @ 1995-08-25 02:00:18 by jwe]

diff --git a/scripts/control/c2d.m b/scripts/control/c2d.m
--- a/scripts/control/c2d.m
+++ b/scripts/control/c2d.m
@@ -44,14 +44,14 @@ function [Ad, Bd] = c2d (Ac, Bc, T)
   if (ma != na)
     error ("c2d: Ac must be square");
   endif
 
   if (ma != mb)
     error ("c2d: Ac and Bc must have the same number of rows");
   endif
 
-  matexp = expm ([[Ac, Bc] * T; zeros (nb, na+nb)]);
+  matexp = expm ([[Ac, Bc] * T; (zeros (nb, na+nb))]);
 
   Ad = matexp (1:na, 1:na);
   Bd = matexp (1:na, na+1:na+nb);
 
 endfunction
diff --git a/scripts/control/dare.m b/scripts/control/dare.m
--- a/scripts/control/dare.m
+++ b/scripts/control/dare.m
@@ -94,18 +94,18 @@ function x = dare (a, b, c, r, opt)
     if ((m1 = is_square (r)) == 0)
       warning ("dare: r is not square");
     elseif (m1 != m)
       warning ("b,r are not conformable");
     endif
 
     brb = (b/r)*b';
     atc = a'\c;
-    [d, sy] = balance ([a + brb*atc, -brb/(a'); -atc, inv (a')], opt);
-    [u, s] = schur(sy,'D');
+    [d, sy] = balance ([a + brb*atc, -brb/(a'); -atc, (inv (a'))], opt);
+    [u, s] = schur (sy, 'D');
     u = d*u;
     n1 = n+1;
     n2 = 2*n;
     x = u (n1:n2, 1:n)/u(1:n, 1:n);
   else
     usage ("x = dare (a, b, c, r {,opt})");
   endif
 
diff --git a/scripts/control/tzero.m b/scripts/control/tzero.m
--- a/scripts/control/tzero.m
+++ b/scripts/control/tzero.m
@@ -36,28 +36,28 @@ function zr = tzero (a, b, c, d, bal)
 
   [n, m, p] = abcddim (a, b, c, d);
 
   if (n > 0 && m > 0 && p > 0)
     if (m != p)
       warning ("tzero: number of inputs,outputs differ.  squaring up");
       if (p > m)
 	warning ("       by padding b and d with zeros.");
-	b = [b, zeros (n, p-m)];
-	d = [d, zeros (p, p-m)];
+	b = [b, (zeros (n, p-m))];
+	d = [d, (zeros (p, p-m))];
 	m = p;
       else
 	warning ("       by padding c and d with zeros.");
-	c = [c; zeros (m-p, n)];
-	d = [d; zeros (m-p, m)];
+	c = [c; (zeros (m-p, n))];
+	d = [d; (zeros (m-p, m))];
 	p = m;
       endif
       warning ("This is a kludge.  Try again with SISO system.");
     endif
     ab = [-a, -b; c, d];
-    bb = [eye (n), zeros (n, m); zeros (p, n), zeros (p, m)];
-    [ab,bb] = balance (ab, bb);
+    bb = [(eye (n)), (zeros (n, m)); (zeros (p, n)), (zeros (p, m))];
+    [ab, bb] = balance (ab, bb);
     zr = -qzval (ab, bb);
   else
     error ("tzero: a, b, c, d not compatible");
   endif
 
 endfunction
diff --git a/scripts/elfun/gcd.m b/scripts/elfun/gcd.m
--- a/scripts/elfun/gcd.m
+++ b/scripts/elfun/gcd.m
@@ -26,32 +26,32 @@ function [g, v] = gcd (a, ...)
 #
 # [g [, v]] = gcd (a1, ..., ak) is the same with a = [a1, ..., ak].
   
 # Written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Sep 16, 1994.
 
   if (nargin > 1)
     va_start;
     for k = 2:nargin;
-      a = [a, va_arg ()];
+      a = [a, (va_arg ())];
     endfor
   endif
   
   if (round (a) != a)
     error ("gcd: all arguments must be integer");
   endif
   
   g = abs (a(1));
   v = sign (a(1));
   for k = 1:(length (a) - 1)
     x = [g, 1, 0];
-    y = [abs (a(k+1)), 0, 1];
+    y = [(abs (a(k+1))), 0, 1];
     while (y(1) > 0)
       r = x - y * floor (x(1) / y(1));
       x = y;
       y = r;
     endwhile
     g = x(1);
-    v = [x(2) * v, x(3) * sign (a(k+1))];
+    v = [x(2) * v, x(3) * (sign (a(k+1)))];
   endfor
     
 endfunction
     
\ No newline at end of file
diff --git a/scripts/elfun/lcm.m b/scripts/elfun/lcm.m
--- a/scripts/elfun/lcm.m
+++ b/scripts/elfun/lcm.m
@@ -24,17 +24,17 @@ function l = lcm (a, ...)
 # integer vector a.
 # lcm (a1, ..., ak) is the same as lcm([a1, ..., ak]).
   
 # Written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Sep 16, 1994.
 
   if (nargin > 1)
     va_start;
     for k = 2:nargin;
-      a = [a, va_arg ()];
+      a = [a, (va_arg ())];
     endfor
   endif
   
   if (round (a) != a)
     error ("lcm:  all arguments must be integer");
   endif
   
   if (any (a) == 0)
diff --git a/scripts/general/postpad.m b/scripts/general/postpad.m
--- a/scripts/general/postpad.m
+++ b/scripts/general/postpad.m
@@ -1,43 +1,46 @@
-function y = postpad(x,l,c)
+function y = postpad (x, l, c)
 
-# postpad(x,l)
+# postpad (x, l)
+#
 # Appends zeros to the vector x until it is of length l.
-# postpad(x,l,c) appends the constant c instead of zero.
+# postpad (x, l, c) appends the constant c instead of zero.
 #
-# If length(x) > l, elements from the end of x are removed
+# If length (x) > l, elements from the end of x are removed
 # until a vector of length l is obtained.
 
 # Author:
 #  Tony Richardson
 #  amr@mpl.ucsd.edu
 #  June 1994
 
-  if(nargin == 2)
+  if (nargin == 2)
     c = 0;
-  elseif(nargin<2 || nargin>3)
-    usage ("postpad(x,l) or postpad(x,l,c)");
+  elseif (nargin < 2 || nargin > 3)
+    usage ("postpad (x, l) or postpad (x, l, c)");
   endif
 
-  if(is_matrix(x))
-    error("first argument must be a vector");
-  elseif(!is_scalar(l))
-    error("second argument must be a scaler");
+  if (is_matrix (x))
+    error ("first argument must be a vector");
+  elseif (! is_scalar (l))
+    error ("second argument must be a scaler");
   endif
 
-  if(l<0)
-    error("second argument must be non-negative");
+  if (l < 0)
+    error ("second argument must be non-negative");
   endif
 
-  lx = length(x);
+  lx = length (x);
 
-  if(lx >= l)
+  if (lx >= l)
     y = x(1:l);
   else
-    if(rows(x)>1)
-      y = [ x; c*ones(l-lx,1) ];
+    if (rows (x) > 1)
+      tmp = c * ones (l-lx, 1);
+      y = [x; tmp];
     else
-      y = [ x c*ones(1,l-lx) ];
+      tmp = c * ones (1, l-lx);
+      y = [x, tmp];
     endif
   endif
 
 endfunction
diff --git a/scripts/general/prepad.m b/scripts/general/prepad.m
--- a/scripts/general/prepad.m
+++ b/scripts/general/prepad.m
@@ -1,43 +1,46 @@
-function y = prepad(x,l,c)
-#prepad(x,l)
-#Prepends zeros to the vector x until it is of length l.
-#prepad(x,l,c) prepends the constant c instead of zero.
+function y = prepad (x, l, c)
+
+# prepad (x, l)
 #
-#If length(x) > l, elements from the beginning of x are removed
-#until a vector of length l is obtained.
+# Prepends zeros to the vector x until it is of length l.
+# prepad(x,l,c) prepends the constant c instead of zero.
+#
+# If length (x) > l, elements from the beginning of x are removed
+# until a vector of length l is obtained.
 
 # Author:
 #  Tony Richardson
 #  amr@mpl.ucsd.edu
 #  June 1994
 
-
-  if(nargin == 2)
+  if (nargin == 2)
     c = 0;
-  elseif(nargin<2 || nargin>3)
-    usage ("prepad(x,l) or prepad(x,l,c)");
+  elseif (nargin < 2 || nargin > 3)
+    usage ("prepad (x, l) or prepad (x, l, c)");
   endif
 
-  if(is_matrix(x))
-    error("first argument must be a vector");
-  elseif(!is_scalar(l))
-    error("second argument must be a scaler");
+  if (is_matrix (x))
+    error ("first argument must be a vector");
+  elseif (! is_scalar (l))
+    error ("second argument must be a scaler");
   endif
 
-  if(l<0)
-    error("second argument must be non-negative");
+  if (l < 0)
+    error ("second argument must be non-negative");
   endif
 
-  lx = length(x);
+  lx = length (x);
 
-  if(lx >= l)
+  if (lx >= l)
     y = x(lx-l+1:lx);
   else
-    if(rows(x)>1)
-      y = [ c*ones(l-lx,1); x ];
+    if (rows (x) > 1)
+      tmp = c * ones (l-lx, 1);
+      y = [tmp; x];
     else
-      y = [ c*ones(1,l-lx) x ];
+      tmp = c * ones (1, l-lx);
+      y = [tmp, x];
     endif
   endif
 
 endfunction
diff --git a/scripts/linear-algebra/kron.m b/scripts/linear-algebra/kron.m
--- a/scripts/linear-algebra/kron.m
+++ b/scripts/linear-algebra/kron.m
@@ -31,25 +31,27 @@ function x = kron (a, b)
 
     [m, n] = size (b);
     [ma, na] = size (a);
 
 # Do 1st column.
 
     x = a (1, 1) * b;
     for ii = 2:ma
-      x = [x; a (ii, 1)*b];
+      tmp = a (ii, 1) * b
+      x = [x; tmp];
     endfor
 
 # Do remaining columns.
 
     for jj = 2:na
-      tmp = a (1, jj)*b;
+      tmp = a (1, jj) * b;
       for ii = 2:ma
-	tmp = [tmp; a (ii, jj)*b];
+        pmt = a (ii, jj) * b;
+	tmp = [tmp; pmt];
       endfor
       x = [x, tmp];
     endfor
 
   else
     usage ("kron (a, b)");
   endif
 
diff --git a/scripts/miscellaneous/etime.m b/scripts/miscellaneous/etime.m
--- a/scripts/miscellaneous/etime.m
+++ b/scripts/miscellaneous/etime.m
@@ -33,17 +33,17 @@ function secs = etime (t1, t0)
 
     if (t1 (1) != t0 (1))
       error ("etime: can't handle timings over year boundaries yet")
     endif
 
 # XXX FIXME XXX -- could check here to ensure that t1 and t0 really do
 # make sense as vectors returned from clock().
 
-    days_in_months = [31, 28, 31, 30, 31, 30 31, 31, 30, 31, 30, 31];
+    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
 
     if (is_leap_year (t1 (1)))
       days_in_months (2) = days_in_months (2) + 1;
     endif
 
     d1 = sum (days_in_months (1:(t1 (2) - 1))) + t1 (3);
     d0 = sum (days_in_months (1:(t0 (2) - 1))) + t0 (3);
 
diff --git a/scripts/polynomial/conv.m b/scripts/polynomial/conv.m
--- a/scripts/polynomial/conv.m
+++ b/scripts/polynomial/conv.m
@@ -51,23 +51,23 @@ function y = conv (a, b)
   endif
   if (rows (b) > 1)
     b = reshape (b, 1, lb);
   endif
 
   # Use the shortest vector as the coefficent vector to filter.
   if (la < lb)
     if (ly > lb)
-      x = [b, zeros (1, ly - lb)];
+      x = [b, (zeros (1, ly - lb))];
     else
       x = b;
     endif
     y = filter (a, 1, x);
   else
     if(ly > la)
-      x = [a, zeros (1, ly - la)];
+      x = [a, (zeros (1, ly - la))];
     else
       x = a;
     endif
     y = filter (b, 1, x);
   endif
 
 endfunction
diff --git a/scripts/polynomial/deconv.m b/scripts/polynomial/deconv.m
--- a/scripts/polynomial/deconv.m
+++ b/scripts/polynomial/deconv.m
@@ -43,27 +43,27 @@ function [b, r] = deconv (y, a)
   endif
 
   la = length (a);
   ly = length (y);
 
   lb = ly - la + 1;
 
   if (ly > la)
-    b = filter (y, a, [1 zeros (1, ly - la)]);
+    b = filter (y, a, [1, (zeros (1, ly - la))]);
   elseif (ly == la)
     b = filter (y, a, 1);
   else
     b = 0;
   endif
 
   b = polyreduce (b);
 
   lc = la + length (b) - 1;
   if (ly == lc)
     r = y - conv (a, b);
   else
-    r = [ zeros(1, lc - ly) y] - conv (a, b);
+    r = [(zeros (1, lc - ly)), y] - conv (a, b);
   endif
 
   r = polyreduce (r);
 
 endfunction
diff --git a/scripts/polynomial/roots.m b/scripts/polynomial/roots.m
--- a/scripts/polynomial/roots.m
+++ b/scripts/polynomial/roots.m
@@ -44,17 +44,17 @@ function r = roots (v)
   if (m > 0)
     v = v (f(1):f(m));
     l = max (size (v));
     if (l > 1)
       A = diag (ones (1, l-2), -1);
       A (1, :) = -v (2:l) ./ v (1);
       r = eig (A);    
       if (f (m) < n)
-	r = [r; zeros(n - f(m), 1)];
+	r = [r; (zeros(n - f(m), 1))];
       endif
     else
       r = zeros (n - f(m), 1);
     endif
   else
     usage ("roots (v), where v is a nonzero vector");
   endif
   
diff --git a/scripts/signal/fftfilt.m b/scripts/signal/fftfilt.m
--- a/scripts/signal/fftfilt.m
+++ b/scripts/signal/fftfilt.m
@@ -36,17 +36,17 @@ function y = fftfilt (b, x, N)
 # one blocks, but if the user knows better ...
   
   if (nargin < 2 || nargin > 3)
     usage (" fftfilt (b, x [, N])");
   endif
   
   [r_x, c_x] = size (x);
   [r_b, c_b] = size (b);
-  if (! (min ([r_x c_x]) == 1 || min ([r_b c_b]) == 1))
+  if (! (min ([r_x, c_x]) == 1 || min ([r_b, c_b]) == 1))
     error ("fftfilt: both x and b should be vectors");
   endif
   l_x  = r_x * c_x;
   l_b  = r_b * c_b;
 
   if ((l_x == 1) && (l_b == 1))
     y = b * x;  
     return;
@@ -60,17 +60,17 @@ function y = fftfilt (b, x, N)
 # length (b) - 1 as number of points ...
     N    = 2^(ceil (log (l_x + l_b - 1) / log(2)));
     y    = ifft (fft (x, N) .* fft(b, N));
   else
 # Use overlap-add method ...
     if !(is_scalar (N))
       error ("fftfilt: N has to be a scalar");
     endif
-    N = 2^(ceil (log (max ([N l_b])) / log(2)));
+    N = 2^(ceil (log (max ([N, l_b])) / log(2)));
     L = N - l_b + 1;
     B = fft (b, N);
     R = ceil (l_x / L);
     y = zeros (1, l_x);
     for r = 1:R;
       lo  = (r - 1) * L + 1;
       hi  = min (r * L, l_x);
       tmp = ifft (fft (x(lo:hi), N) .* B);
diff --git a/scripts/signal/filter.m b/scripts/signal/filter.m
--- a/scripts/signal/filter.m
+++ b/scripts/signal/filter.m
@@ -51,17 +51,17 @@ function [y, w] = filter(b,a,x,w)
   if(is_matrix(a) || is_matrix(b) || is_matrix(x))
     error("Argument must be a vector.");
   endif
 
   N = length(a);
   M = length(b);
   L = length(x);
 
-  MN = max([N M]);
+  MN = max([N, M]);
   lw = MN - 1;
 
   # It's convenient to pad the coefficient vectors to the same length.
   b = postpad(b,MN);
 
   # Ensure that all vectors have the assumed dimension.
   if(columns(a) > 1)
     a = reshape(a,N,1);
diff --git a/scripts/signal/freqz.m b/scripts/signal/freqz.m
--- a/scripts/signal/freqz.m
+++ b/scripts/signal/freqz.m
@@ -38,17 +38,17 @@ function [h, w] = freqz(b,...)
     region = va_arg();     
   endif
 
   la = length(a);
   a = reshape(a,1,la);
   lb = length(b);
   b = reshape(b,1,lb);
 
-  k = max([la lb]);
+  k = max([la, lb]);
 
   if( n >= k)
     if (strcmp(region,"whole"))
       h = fft(postpad(b,n)) ./ fft(postpad(a,n));
       w = 2*pi*[0:(n-1)]/n;
     else
       h = fft(postpad(b,2*n)) ./ fft(postpad(a,2*n));
       h = h(1:n);
