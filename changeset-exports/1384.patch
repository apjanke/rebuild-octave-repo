# HG changeset patch
# User jwe
# Date 810981120 0
#      Wed Sep 13 08:32:00 1995 +0000
# Node ID 083787534e181c5f6a64006b6ddcfd4b189578c9
# Parent  d0bdfca51b425cd9ba8208d75d02ae77b477c3eb
[project @ 1995-09-13 08:25:37 by jwe]

diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -15,17 +15,17 @@ dnl Copyright (C) 1992, 1993, 1994, 1995
 ### ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
-AC_REVISION($Revision: 1.131 $)
+AC_REVISION($Revision: 1.132 $)
 AC_PREREQ(2.0)
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1)
 
 AC_CANONICAL_HOST
 if test -z "$host"; then
@@ -635,21 +635,20 @@ case "$canonical_host_type" in
   *)
     AC_CHECK_LIB(m, main)
   ;;
 esac
 
 XCFLAGS="$CFLAGS"
 CFLAGS="$CFLAGS $GCC_IEEE_FP_FLAG"
 
-### Inf and NaN don't work with gcc on the Alpha yet.  I am also told
-### that they don't work on m68k HP sytems either.
+### I am told that Inf and NaN don't work on m68k HP sytems.
 
 case "$canonical_host_type" in
-  alpha-dec-osf* | m68k-hp-hpux*)
+  m68k-hp-hpux*)
   ;;
   *)
     AC_CHECK_FUNCS(finite isnan isinf infinity quiet_nan)
   ;;
 esac
 
 ### Check for nonstandard but common math functions that we need.
 
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -162,17 +162,17 @@ xisnan (double x)
 double
 xfinite (double x)
 {
 #if defined (HAVE_FINITE)
   return (double) finite (x);
 #elif defined (HAVE_ISINF) && defined (HAVE_ISNAN)
   return (double) (! isinf (x) && ! isnan (x));
 #else
-  return (double) (x > -DBL_MAX && x < DBL_MAX);
+  return 1;
 #endif
 }
 
 double
 xgamma (double x)
 {
   return F77_FCN (dgamma, DGAMMA) (x);
 }
@@ -180,17 +180,17 @@ xgamma (double x)
 double
 xisinf (double x)
 {
 #if defined (HAVE_ISINF)
   return (double) isinf (x);
 #elif defined (HAVE_FINITE) && defined (HAVE_ISNAN)
   return (double) (! (finite (x) || isnan (x)));
 #else
-  return (double) (x == DBL_MAX || x == -DBL_MAX);
+  return 0;
 #endif
 }
 
 double
 xlgamma (double x)
 {
   double result;
   double sgngam;
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -173,35 +173,31 @@ octave_ieee_init (void)
     {
       octave_Inf *= 1e+10;
       if (octave_Inf == tmp)
 	break;
       tmp = octave_Inf;
     }
 #endif
 
+#endif
+
+#if defined (HAVE_ISNAN)
+
 #if defined (HAVE_QUIET_NAN)
   octave_NaN = (double) quiet_nan ();
 #elif defined (linux)
   octave_NaN = NAN;
 #elif defined (__alpha__)
   extern unsigned int DQNAN[2];
   octave_NaN = (*((double *) (DQNAN)));
 #else
   octave_NaN = octave_Inf / octave_Inf;
 #endif
 
-#else
-
-  // This is sort of cheesy, but what can we do, other than blowing it
-  // off completely, or writing an entire IEEE emulation package?
-
-  octave_Inf = DBL_MAX;
-  octave_NaN = DBL_MAX;
-
 #endif
 
   float_params fp[5];
 
   INIT_FLT_PAR (fp[0], OCTAVE_IEEE_BIG,
 		   1048576,  0,
 		2146435071, -1,
 		1017118720,  0,
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1503,20 +1503,18 @@ install_builtin_variables (void)
     "infinity");
 
   DEFVAR ("INFO_FILE", SBV_INFO_FILE, info_file, 0, 0, 1, sv_info_file,
     "name of the Octave info file");
 
   DEFVAR ("J", SBV_J, Complex (0.0, 1.0), 0, 1, 1, 0,
     "sqrt (-1)");
 
-  #if defined (HAVE_ISNAN)
   DEFVAR ("NaN", SBV_NaN, octave_NaN, 0, 1, 1, 0,
     "not a number");
-  #endif
 
   DEFVAR ("LOADPATH", SBV_LOADPATH, load_path, 0, 0, 1, sv_loadpath,
     "colon separated list of directories to search for scripts");
 
   DEFVAR ("IMAGEPATH", SBV_IMAGEPATH, OCTAVE_IMAGEPATH, 0, 0, 1,
 	  sv_imagepath,
     "colon separated list of directories to search for image files");
 
@@ -1604,20 +1602,18 @@ set to \"true\".");
 	  "false", 0, 0, 1, define_all_return_values,
     "control whether values returned from functions should have a\n\
 value even if one has not been explicitly assigned.  See also\n\
 default_return_value"); 
 
   DEFVAR ("j", SBV_j, Complex (0.0, 1.0), 1, 1, 1, 0,
     "sqrt (-1)");
 
-  #if defined (HAVE_ISNAN)
   DEFVAR ("nan", SBV_nan, octave_NaN, 0, 1, 1, 0,
     "not a number");
-  #endif
 
   DEFVAR ("ok_to_lose_imaginary_part", SBV_ok_to_lose_imaginary_part,
 	  "warn", 0, 0, 1, ok_to_lose_imaginary_part,
     "silently convert from complex to real by dropping imaginary part");
 
   DEFVAR ("output_max_field_width", SBV_output_max_field_width, 10.0, 0,
 	  0, 1, set_output_max_field_width,
     "maximum width of an output field for numeric output");
