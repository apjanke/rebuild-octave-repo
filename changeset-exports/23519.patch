# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1495224303 14400
#      Fri May 19 16:05:03 2017 -0400
# Node ID 4fe410bd918d9d7a6de12ac8d1efa58d13d4e60f
# Parent  8744d4ed8fb4eab0e4e6b534bc930126136884dc
use DEFMETHOD for some built-in functions

* load-path.cc (Fcommand_line_path, Frestoredefaultpath,
F__pathorig__, Fpath, Faddpath, Frmpath, F__dump_load_path__):
Use DEFMETHOD.

* utils.cc (Ffile_in_loadpath, Fdir_in_loadpath): Use DEFMETHOD.

* ov-class.cc (Fismethod, F__methods__): Use DEFMETHOD.

diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -2211,70 +2211,70 @@ DEFUN (rehash, , ,
 Reinitialize Octave's load path directory cache.
 @end deftypefn */)
 {
   rehash_internal ();
 
   return ovl ();
 }
 
-DEFUN (command_line_path, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (command_line_path, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {} command_line_path ()
 Return the command line path variable.
 
 @seealso{path, addpath, rmpath, genpath, pathdef, savepath, pathsep}
 @end deftypefn */)
 {
   if (! args.empty ())
     print_usage ();
 
-  octave::load_path& lp = octave::__get_load_path__ ("command_line_path");
+  octave::load_path& lp = interp.get_load_path ();
 
   return ovl (lp.get_command_line_path ());
 }
 
-DEFUN (restoredefaultpath, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (restoredefaultpath, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {} restoredefaultpath ()
 Restore Octave's path to its initial state at startup.
 
 @seealso{path, addpath, rmpath, genpath, pathdef, savepath, pathsep}
 @end deftypefn */)
 {
   if (! args.empty ())
     print_usage ();
 
-  octave::load_path& lp = octave::__get_load_path__ ("restoredefaultpath");
+  octave::load_path& lp = interp.get_load_path ();
 
   lp.initialize (true);
 
   return ovl (lp.system_path ());
 }
 
 // Return Octave's original default list of directories in which to
 // search for function files.  This corresponds to the path that
 // exists prior to running the system's octaverc file or the user's
 // ~/.octaverc file
 
-DEFUN (__pathorig__, , ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (__pathorig__, interp, , ,
+          doc: /* -*- texinfo -*-
 @deftypefn {} {@var{val} =} __pathorig__ ()
 Undocumented internal function.
 @end deftypefn */)
 {
-  octave::load_path& lp = octave::__get_load_path__ ("__pathorig__");
+  octave::load_path& lp = interp.get_load_path ();
 
   lp.initialize (true);
 
   return ovl (lp.system_path ());
 }
 
-DEFUN (path, args, nargout,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (path, interp, args, nargout,
+           doc: /* -*- texinfo -*-
 @deftypefn  {} {} path ()
 @deftypefnx {} {@var{str} =} path ()
 @deftypefnx {} {@var{str} =} path (@var{path1}, @dots{})
 Modify or display Octave's load path.
 
 If @var{nargin} and @var{nargout} are zero, display the elements of
 Octave's load path in an easy to read format.
 
@@ -2288,17 +2288,17 @@ to the result and return it.
 No checks are made for duplicate elements.
 @seealso{addpath, rmpath, genpath, pathdef, savepath, pathsep}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   string_vector argv = args.make_argv ("path");
 
-  octave::load_path& lp = octave::__get_load_path__ ("path");
+  octave::load_path& lp = interp.get_load_path ();
 
   if (nargin > 0)
     {
       std::string path = argv[1];
 
       for (int i = 2; i <= nargin; i++)
         path += octave::directory_path::path_sep_str () + argv[i];
 
@@ -2319,18 +2319,18 @@ No checks are made for duplicate element
       dirs.list_in_columns (octave_stdout);
 
       octave_stdout << "\n";
     }
 
   return ovl ();
 }
 
-DEFUN (addpath, args, nargout,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (addpath, interp, args, nargout,
+           doc: /* -*- texinfo -*-
 @deftypefn  {} {} addpath (@var{dir1}, @dots{})
 @deftypefnx {} {} addpath (@var{dir1}, @dots{}, @var{option})
 Add named directories to the function search path.
 
 If @var{option} is @qcode{"-begin"} or 0 (the default), prepend the
 directory name to the current path.  If @var{option} is @qcode{"-end"}
 or 1, append the directory name to the current path.
 Directories added to the path must exist.
@@ -2352,17 +2352,17 @@ For each directory that is added, and th
   // Originally written by Bill Denney and Etienne Grossman.
   // Heavily modified and translated to C++ by jwe.
 
   int nargin = args.length ();
 
   if (nargin == 0)
     print_usage ();
 
-  octave::load_path& lp = octave::__get_load_path__ ("addpath");
+  octave::load_path& lp = interp.get_load_path ();
 
   octave_value retval;
 
   if (nargout > 0)
     retval = lp.path ();
 
   bool append = false;
 
@@ -2431,18 +2431,18 @@ For each directory that is added, and th
     }
 
   if (need_to_update)
     rehash_internal ();
 
   return retval;
 }
 
-DEFUN (rmpath, args, nargout,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (rmpath, interp, args, nargout,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {} rmpath (@var{dir1}, @dots{})
 Remove @var{dir1}, @dots{} from the current function search path.
 
 In addition to accepting individual directory arguments, lists of
 directory names separated by @code{pathsep} are also accepted.  For example:
 
 @example
 rmpath ("dir1:/dir2:~/dir3")
@@ -2460,17 +2460,17 @@ and runs it if it exists.
 
   int nargin = args.length ();
 
   if (nargin == 0)
     print_usage ();
 
   octave_value retval;
 
-  octave::load_path& lp = octave::__get_load_path__ ("rmpath");
+  octave::load_path& lp = interp.get_load_path ();
 
   if (nargout > 0)
     retval = lp.path ();
 
   bool need_to_update = false;
 
   for (int i = 0; i < nargin; i++)
     {
@@ -2490,20 +2490,20 @@ and runs it if it exists.
     }
 
   if (need_to_update)
     rehash_internal ();
 
   return retval;
 }
 
-DEFUN (__dump_load_path__, , ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (__dump_load_path__, interp, , ,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {} __dump_load_path__ ()
 Undocumented internal function.
 @end deftypefn */)
 {
-  octave::load_path& lp = octave::__get_load_path__ ("__dump_load_path__");
+  octave::load_path& lp = interp.get_load_path ();
 
   lp.display (octave_stdout);
 
   return ovl ();
 }
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -277,18 +277,18 @@ make_absolute (const string_vector& sv)
   string_vector retval (len);
 
   for (octave_idx_type i = 0; i < len; i++)
     retval[i] = octave::sys::env::make_absolute (sv[i]);
 
   return retval;
 }
 
-DEFUN (file_in_loadpath, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (file_in_loadpath, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn  {} {} file_in_loadpath (@var{file})
 @deftypefnx {} {} file_in_loadpath (@var{file}, "all")
 
 Return the absolute name of @var{file} if it can be found in
 the list of directories specified by @code{path}.
 
 If no file is found, return an empty character string.
 
@@ -307,17 +307,17 @@ If no files are found, return an empty c
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   string_vector names = args(0).xstring_vector_value ("file_in_loadpath: FILE argument must be a string");
 
   if (names.empty ())
     error ("file_in_loadpath: FILE argument must not be empty");
 
-  octave::load_path& lp = octave::__get_load_path__ ("file_in_loadpath");
+  octave::load_path& lp = interp.get_load_path ();
 
   if (nargin == 1)
     return ovl (octave::sys::env::make_absolute (lp.find_first_of (names)));
   else
     {
       std::string opt = args(1).xstring_value ("file_in_loadpath: optional second argument must be a string");
 
       if (opt != "all")
@@ -977,18 +977,18 @@ No check is done for the existence of @v
 
 /*
 ## FIXME: We need system-dependent tests here.
 
 %!error make_absolute_filename ()
 %!error make_absolute_filename ("foo", "bar")
 */
 
-DEFUN (dir_in_loadpath, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (dir_in_loadpath, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn  {} {} dir_in_loadpath (@var{dir})
 @deftypefnx {} {} dir_in_loadpath (@var{dir}, "all")
 Return the full name of the path element matching @var{dir}.
 
 The match is performed at the end of each path element.  For example, if
 @var{dir} is @qcode{"foo/bar"}, it matches the path element
 @nospell{@qcode{"/some/dir/foo/bar"}}, but not
 @nospell{@qcode{"/some/dir/foo/bar/baz"}}
@@ -1003,17 +1003,17 @@ all name matches rather than just the fi
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   std::string dir;
 
   dir = args(0).xstring_value ("dir_in_loadpath: DIR must be a directory name");
 
-  octave::load_path& lp = octave::__get_load_path__ ("dir_in_loadpath");
+  octave::load_path& lp = interp.get_load_path ();
 
   if (nargin == 1)
     return ovl (lp.find_dir (dir));
   else
     return ovl (Cell (lp.find_matching_dirs (dir)));
 }
 
 /*
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -1896,18 +1896,18 @@ Return true if @var{x} is a class object
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   return ovl (args(0).is_object ());
 }
 
-DEFUN (ismethod, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (ismethod, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn  {} {} ismethod (@var{obj}, @var{method})
 @deftypefnx {} {} ismethod (@var{clsname}, @var{method})
 Return true if the string @var{method} is a valid method of the object
 @var{obj} or of the class @var{clsname}.
 @seealso{isprop, isobject}
 @end deftypefn */)
 {
   if (args.length () != 2)
@@ -1921,26 +1921,26 @@ Return true if the string @var{method} i
     class_name = arg.class_name ();
   else if (arg.is_string ())
     class_name = arg.string_value ();
   else
     error ("ismethod: first argument must be object or class name");
 
   std::string method = args(1).string_value ();
 
-  octave::load_path& lp = octave::__get_load_path__ ("ismethod");
+  octave::load_path& lp = interp.get_load_path ();
 
   if (lp.find_method (class_name, method) != "")
     return ovl (true);
   else
     return ovl (false);
 }
 
-DEFUN (__methods__, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (__methods__, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn  {} {} __methods__ (@var{x})
 @deftypefnx {} {} __methods__ ("classname")
 Internal function.
 
 Implements @code{methods} for Octave class objects and classnames.
 @seealso{methods}
 @end deftypefn */)
 {
@@ -1949,17 +1949,17 @@ Implements @code{methods} for Octave cla
 
   std::string class_name;
 
   if (arg.is_object ())
     class_name = arg.class_name ();
   else if (arg.is_string ())
     class_name = arg.string_value ();
 
-  octave::load_path& lp = octave::__get_load_path__ ("__methods__");
+  octave::load_path& lp = interp.get_load_path ();
 
   string_vector sv = lp.methods (class_name);
 
   return ovl (Cell (sv));
 }
 
 static bool
 is_built_in_class (const std::string& cn)
