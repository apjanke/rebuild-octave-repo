# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1208398095 14400
#      Wed Apr 16 22:08:15 2008 -0400
# Node ID 87eda1f8faaa7bf03d5ee85bfe893cb6bd4756f3
# Parent  62279ce5654c95c7ce32dcea8b45b444fbd877ef
octave_user_code: new base class for octave_user_script and octave_user_function

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,50 @@
 2008-04-16  John W. Eaton  <jwe@octave.org>
 
+	* parse.y (Fautoload, Fmfilename): Call
+	octave_call_stack::caller_user_code, not
+	octave_call_stack::caller_user_script_or_function.
+	* toplev.cc, toplev.h (octave_call_stack::caller_user_code):
+	Rename from octave_call_stack::caller_user_script_or_function.
+	(octave_call_stack::do_caller_user_code): Rename from
+	octave_call_stack::do_caller_user_script_or_function.
+	* ov-usr-fcn.h (class octave_user_code): New class, derived from
+	octave_fucntion.
+	(class octave_user_function, class octave_user_script): Derive
+	from octave_user_code, not octave_function.
+	(octave_user_script::user_code_value,
+	octave_user_function::user_code_value): New functions.
+	* ov.cc (octave_value::user_script_value,
+	octave_value::user_code_value): New functions.
+	* ov.h: Provide decls.
+	(octave_value::is_user_code, octave_value::is_user_script):
+	New functions.
+	* ov-base.cc (octave_base_value::user_script_value,
+	octave_base_value::user_code_value): New virutal functions.
+	* ov-base.h: Provide decls.
+	(octave_base_value::is_user_script, octave_base_value::is_user_code):
+	New virtual functions.
+	* error.cc (verror, pr_where, error_2, warning_1):
+	Call octave_call_stack::caller_user_code instead of
+	octave_call_stack::caller_user_script_or_function
+	* input.cc (get_user_input): Likewise.
+	* debug.h (bp_table::breakpoint_map): Use pointer to
+	octave_user_code instead of octave_user_function.
+	* debug.cc (get_user_code): Rename from get_user_function.
+	Return pointer to octave_user_code instead of octave_user_function.
+	Change all uses.
+	(bp_table::do_add_breakpoint, bp_table::do_remove_breakpoint,
+	bp_table::do_remove_all_breakpoints_in_file,
+	bp_table::do_get_breakpoint_list):
+	Avoid dereferencing invalid pointers.
+	(parse_dbfunction_params): Call
+	octave_call_stack::caller_user_code, not
+	octave_call_stack::caller_user_script_or_function. 
+
 	* load-save.cc (Fsave): Fix continuation character in doc string.
 
 	* pt-walk.h (tree_walker::visit_function_def): New function.
 	* pt-pr-code.cc (tree_print_code::visit_function_def): New function.
 	* pt-pr-code.h: Provide decl.
 	* pt-bp.cc (tree_breakpoint::visit_function_def): New function.
 	* pt-bp.h: Provide decl.
 	* pt-check.cc (tree_checker::visit_function_def): New function.
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -57,29 +57,29 @@ along with Octave; see the file COPYING.
 
 // Initialize the singleton object
 bp_table *bp_table::instance = 0;
 
 // Return a pointer to the user-defined function FNAME.  If FNAME is
 // empty, search backward for the first user-defined function in the
 // current call stack.
 
-static octave_user_function *
-get_user_function (const std::string& fname = std::string ())
+static octave_user_code *
+get_user_code (const std::string& fname = std::string ())
 {
-  octave_user_function *dbg_fcn = 0;
+  octave_user_code *dbg_fcn = 0;
 
   if (fname.empty ())
     dbg_fcn = octave_call_stack::caller_user_function ();
   else
     {
       octave_value fcn = symbol_table::find_function (fname);
 
       if (fcn.is_defined ())
-	dbg_fcn = fcn.user_function_value ();
+	dbg_fcn = fcn.user_code_value ();
     }
 
   return dbg_fcn;
 }
 
 static void
 parse_dbfunction_params (const char *who, const octave_value_list& args, 
 			 std::string& symbol_name, bp_table::intmap& lines)
@@ -89,20 +89,20 @@ parse_dbfunction_params (const char *who
   int list_idx = 0;
   symbol_name = std::string ();
   lines = bp_table::intmap ();
 
   if (args.length () == 0)
     return;
 
   // If we are already in a debugging function.
-  if (octave_call_stack::caller_user_function ())
+  if (octave_call_stack::caller_user_code ())
     {
       idx = 0;
-      symbol_name = get_user_function ()->name ();
+      symbol_name = get_user_code ()->name ();
     }
   else if (args(0).is_map ())
     {
       // Problem because parse_dbfunction_params() can only pass out a
       // single function
     }
   else if (args(0).is_string())
     {
@@ -149,34 +149,37 @@ parse_dbfunction_params (const char *who
 bp_table::intmap
 bp_table::do_add_breakpoint (const std::string& fname, 
 			     const bp_table::intmap& line)
 {
   intmap retval;
 
   octave_idx_type len = line.size ();
 
-  octave_user_function *dbg_fcn = get_user_function (fname);
+  octave_user_code *dbg_fcn = get_user_code (fname);
 
   if (dbg_fcn)
     {
       tree_statement_list *cmds = dbg_fcn->body ();
 
-      for (int i = 0; i < len; i++)
+      if (cmds)
 	{
-	  const_intmap_iterator p = line.find (i);
-
-	  if (p != line.end ())
+	  for (int i = 0; i < len; i++)
 	    {
-	      int lineno = p->second;
+	      const_intmap_iterator p = line.find (i);
+
+	      if (p != line.end ())
+		{
+		  int lineno = p->second;
 
-	      retval[i] = cmds->set_breakpoint (lineno);
+		  retval[i] = cmds->set_breakpoint (lineno);
 
-	      if (retval[i] != 0)
-		bp_map[fname] = dbg_fcn;
+		  if (retval[i] != 0)
+		    bp_map[fname] = dbg_fcn;
+		}
 	    }
 	}
     }
   else
     error ("add_breakpoint: unable to find the function requested\n");
 
   return retval;
 }
@@ -192,69 +195,81 @@ bp_table::do_remove_breakpoint (const st
 
   if (len == 0)
     {
       intmap results = remove_all_breakpoints_in_file (fname);
       retval = results.size ();
     }
   else
     {
-      octave_user_function *dbg_fcn = get_user_function (fname);
+      octave_user_code *dbg_fcn = get_user_code (fname);
+
       if (dbg_fcn)
 	{
 	  tree_statement_list *cmds = dbg_fcn->body ();
-	  octave_value_list results = cmds->list_breakpoints ();
-	  if (results.length () > 0)
+
+	  if (cmds)
 	    {
-	      for (int i = 0; i < len; i++)
+	      octave_value_list results = cmds->list_breakpoints ();
+
+	      if (results.length () > 0)
 		{
-		  const_intmap_iterator p = line.find (i);
-		  
-		  if (p != line.end ())
-		    cmds->delete_breakpoint (p->second);
-		}
-	      results = cmds->list_breakpoints ();
+		  for (int i = 0; i < len; i++)
+		    {
+		      const_intmap_iterator p = line.find (i);
+
+		      if (p != line.end ())
+			cmds->delete_breakpoint (p->second);
+		    }
 
-	      breakpoint_map_iterator it = bp_map.find (fname);
-	      if (results.length () == 0 && it != bp_map.end ())
-		bp_map.erase (it);
+		  results = cmds->list_breakpoints ();
+
+		  breakpoint_map_iterator it = bp_map.find (fname);
+
+		  if (results.length () == 0 && it != bp_map.end ())
+		    bp_map.erase (it);
+		}
+
+	      retval = results.length ();
 	    }
-
-	  retval = results.length ();
 	}
       else
 	error ("remove_breakpoint: unable to find the function requested\n");
     }
   return retval;
 }
 
 
 bp_table::intmap
 bp_table::do_remove_all_breakpoints_in_file (const std::string& fname)
 {
   intmap retval;
 
-  octave_user_function *dbg_fcn = get_user_function (fname);
+  octave_user_code *dbg_fcn = get_user_code (fname);
   
   if (dbg_fcn)
     {
       tree_statement_list *cmds = dbg_fcn->body ();
 
-      octave_value_list bkpts = cmds->list_breakpoints ();
-
-      for (int i = 0; i < bkpts.length (); i++)
+      if (cmds)
 	{
-	  int lineno = static_cast<int> (bkpts(i).int_value ());
-	  cmds->delete_breakpoint (lineno);
-	  retval[i] = lineno;
+	  octave_value_list bkpts = cmds->list_breakpoints ();
+
+	  for (int i = 0; i < bkpts.length (); i++)
+	    {
+	      int lineno = static_cast<int> (bkpts(i).int_value ());
+	      cmds->delete_breakpoint (lineno);
+	      retval[i] = lineno;
+	    }
+
+	  breakpoint_map_iterator it = bp_map.find (fname);
+
+	  if (it != bp_map.end ())
+	    bp_map.erase (it);
 	}
-      
-      breakpoint_map_iterator it = bp_map.find (fname);
-      if (it != bp_map.end ())
-	bp_map.erase (it);
     }
   else
     error ("remove_all_breakpoint_in_file: "
 	   "unable to find the function requested\n");
 
   return retval;
 }
 
@@ -292,26 +307,33 @@ bp_table::do_get_breakpoint_list (const 
   // Iterate through each of the files in the map and get the 
   // name and list of breakpoints.
 
   for (breakpoint_map_iterator it = bp_map.begin (); it != bp_map.end (); it++)
     {
       if (fname_list.length () == 0
 	  || do_find_bkpt_list (fname_list, it->first) != "")
 	{
-	  octave_value_list bkpts = it->second->body ()->list_breakpoints ();
+	  octave_user_code *f = it->second;
+
+	  tree_statement_list *cmds = f->body ();
 
-	  octave_idx_type len = bkpts.length (); 
+	  if (cmds)
+	    {
+	      octave_value_list bkpts = cmds->list_breakpoints ();
 
-	  bp_table::intmap bkpts_vec;
+	      octave_idx_type len = bkpts.length (); 
+
+	      bp_table::intmap bkpts_vec;
 
-	  for (int i = 0; i < len; i++)
-	    bkpts_vec[i] = bkpts (i).double_value ();
+	      for (int i = 0; i < len; i++)
+		bkpts_vec[i] = bkpts (i).double_value ();
 
-	  retval[it->first] = bkpts_vec;
+	      retval[it->first] = bkpts_vec;
+	    }
 	}
     }
 
   return retval;
 }
 
 static octave_value
 intmap_to_ov (const bp_table::intmap& line) 
@@ -427,17 +449,17 @@ mode this should be left out.\n\
 	  fcn_list(0) = symbol_name;
 	  bp_list = bp_table::get_breakpoint_list (fcn_list);
 	}
       else
 	gripe_wrong_type_arg ("dbstatus", args(0));
     }
   else
     {
-       octave_user_function *dbg_fcn = get_user_function ();
+       octave_user_code *dbg_fcn = get_user_code ();
        if (dbg_fcn)
 	 {
 	   symbol_name = dbg_fcn->name ();
 	   fcn_list(0) = symbol_name;
 	 }
 
        bp_list = bp_table::get_breakpoint_list (fcn_list);
     }
@@ -493,17 +515,17 @@ DEFCMD (dbwhere, , ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} dbwhere ()\n\
 Show where we are in the code\n\
 @seealso{dbclear, dbstatus, dbstop}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  octave_user_function *dbg_fcn = get_user_function ();
+  octave_user_code *dbg_fcn = get_user_code ();
 
   if (dbg_fcn)
     {
       std::string name = dbg_fcn->name ();
 
       octave_stdout << name << ":";
 
       const tree *dbg_stmt = tree::break_statement;
@@ -568,42 +590,42 @@ do_dbtype (std::ostream& os, const std::
 DEFCMD (dbtype, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} dbtype ()\n\
 List script file with line numbers.\n\
 @seealso{dbclear, dbstatus, dbstop}\n\
 @end deftypefn")
 {
   octave_value retval;
-  octave_user_function *dbg_fcn;
+  octave_user_code *dbg_fcn;
 
   int nargin = args.length ();
   string_vector argv = args.make_argv ("dbtype");
 
   if (! error_state)
     {
       switch (nargin)
 	{
 	case 0: // dbtype
-	  dbg_fcn = get_user_function ();
+	  dbg_fcn = get_user_code ();
 
 	  if (dbg_fcn)
 	    do_dbtype (octave_stdout, dbg_fcn->name (), 0, INT_MAX);
 	  else
 	    error ("dbtype: must be in a user function to give no arguments to dbtype\n");
 	  break;
 
 	case 1: // (dbtype func) || (dbtype start:end)
-	  dbg_fcn = get_user_function (argv[1]);
+	  dbg_fcn = get_user_code (argv[1]);
 
 	  if (dbg_fcn)
 	    do_dbtype (octave_stdout, dbg_fcn->name (), 0, INT_MAX);
 	  else
 	    {
-	      dbg_fcn = get_user_function ();
+	      dbg_fcn = get_user_code ();
 
 	      if (dbg_fcn)
 		{
 		  std::string arg = argv[1];
 
 		  size_t ind = arg.find (':');
 
 		  if (ind != NPOS)
@@ -624,17 +646,17 @@ List script file with line numbers.\n\
 		    }
 		  else
 		    error ("dbtype: line specification must be `start:end'");
 		}
 	    }
 	  break;
 
 	case 2: // (dbtype func start:end) , (dbtype func start)
-	  dbg_fcn = get_user_function (argv[1]);
+	  dbg_fcn = get_user_code (argv[1]);
 
 	  if (dbg_fcn)
 	    {
 	      std::string arg = argv[2];
 	      int start = 0;
 	      int end = 0;
 	      size_t ind = arg.find (':');
 
diff --git a/src/debug.h b/src/debug.h
--- a/src/debug.h
+++ b/src/debug.h
@@ -23,17 +23,17 @@ along with Octave; see the file COPYING.
 #if !defined (octave_debug_h)
 #define octave_debug_h 1
 
 #include <map>
 #include "ov.h"
 #include "dRowVector.h"
 
 class octave_value_list;
-class octave_user_function;
+class octave_user_code;
 
 // Interface to breakpoints,.
 
 class bp_table
 {
 private:
 
   bp_table (void) { }
@@ -106,17 +106,17 @@ public:
     return instance_ok ()
       ? instance->do_get_breakpoint_list (fname_list) : fname_line_map ();
   }
 
 private:
 
   // Map from function names to function objects for functions
   // containing at least one breakpoint.
-  typedef std::map<std::string, octave_user_function *> breakpoint_map;
+  typedef std::map<std::string, octave_user_code *> breakpoint_map;
 
   typedef breakpoint_map::const_iterator const_breakpoint_map_iterator;
   typedef breakpoint_map::iterator breakpoint_map_iterator;
 
   breakpoint_map bp_map;
 
   static bp_table *instance;
 
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -229,18 +229,17 @@ verror (bool save_last_error, std::ostre
 
       Vlast_error_line = -1;
       Vlast_error_column = -1;
       Vlast_error_name = std::string ();
       Vlast_error_file = std::string ();
 
       if (tree_statement_stack::current ())
 	{
-	  octave_function *fcn
-	    = octave_call_stack::caller_user_script_or_function ();
+	  octave_user_code *fcn = octave_call_stack::caller_user_code ();
 
 	  if (fcn)
 	    {
 	      Vlast_error_file = fcn->fcn_file_name ();
 	      Vlast_error_name = fcn->name();
 	      Vlast_error_line = tree_statement_stack::current_line ();
 	      Vlast_error_column = tree_statement_stack::current_column ();
 	    }
@@ -424,18 +423,17 @@ pr_where (const char *name, bool print_c
 {
   if (tree_statement_stack::current ())
     {
       std::string nm;
 
       int l = -1;
       int c = -1;
 
-      octave_function *fcn
-	= octave_call_stack::caller_user_script_or_function ();
+      octave_user_code *fcn = octave_call_stack::caller_user_code ();
 
       if (fcn)
 	{
 	  nm = fcn->fcn_file_name ();
 
 	  if (nm.empty ())
 	    nm = fcn->name ();
 
@@ -489,17 +487,17 @@ static void
 error_2 (const char *id, const char *fmt, va_list args)
 {
   int init_state = error_state;
 
   error_1 (std::cerr, "error", id, fmt, args);
 
   if ((interactive || forced_interactive)
       && Vdebug_on_error && init_state == 0
-      && octave_call_stack::caller_user_script_or_function ())
+      && octave_call_stack::caller_user_code ())
     {
       unwind_protect_bool (Vdebug_on_error);
       Vdebug_on_error = false;
 
       pr_where ("error");
 
       error_state = 0;
 
@@ -650,17 +648,17 @@ warning_1 (const char *id, const char *f
 	pr_where ("warning", false);
 
       vwarning ("warning", id, fmt, args);
 
       warning_state = 1;
 
       if ((interactive || forced_interactive)
 	  && Vdebug_on_warning
-	  && octave_call_stack::caller_user_script_or_function ())
+	  && octave_call_stack::caller_user_code ())
 	{
 	  unwind_protect_bool (Vdebug_on_warning);
 	  Vdebug_on_warning = false;
 
 	  do_keyboard (octave_value_list ());
 
 	  unwind_protect::run ();
 	}
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -593,18 +593,17 @@ get_user_input (const octave_value_list&
   if (nargin == 2)
     read_as_string++;
 
   std::string nm;
   int line = -1;
 
   if (debug)
     {
-      octave_function *caller
-	= octave_call_stack::caller_user_script_or_function ();
+      octave_user_code *caller = octave_call_stack::caller_user_code ();
 
       if (caller)
 	{
 	  nm = caller->fcn_file_name ();
 
 	  if (nm.empty ())
 	    nm = caller->name ();
 
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -777,16 +777,38 @@ octave_base_value::user_function_value (
   octave_user_function *retval = 0;
 
   if (! silent)
     gripe_wrong_type_arg ("octave_base_value::user_function_value()",
 			  type_name ());
   return retval;
 }
 
+octave_user_script *
+octave_base_value::user_script_value (bool silent)
+{
+  octave_user_script *retval = 0;
+
+  if (! silent)
+    gripe_wrong_type_arg ("octave_base_value::user_script_value()",
+			  type_name ());
+  return retval;
+}
+
+octave_user_code *
+octave_base_value::user_code_value (bool silent)
+{
+  octave_user_code *retval = 0;
+
+  if (! silent)
+    gripe_wrong_type_arg ("octave_base_value::user_code_value()",
+			  type_name ());
+  return retval;
+}
+
 octave_fcn_handle *
 octave_base_value::fcn_handle_value (bool silent)
 {
   octave_fcn_handle *retval = 0;
 
   if (! silent)
     gripe_wrong_type_arg ("octave_base_value::fcn_handle_value()",
 			  type_name ());
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -46,16 +46,18 @@ class Cell;
 class streamoff_array;
 class Octave_map;
 class octave_value;
 class octave_value_list;
 class octave_stream;
 class octave_streamoff;
 class octave_function;
 class octave_user_function;
+class octave_user_script;
+class octave_user_code;
 class octave_fcn_handle;
 class octave_fcn_inline;
 class octave_value_list;
 class octave_lvalue;
 
 class tree_walker;
 
 // T_ID is the type id of struct objects, set by register_type().
@@ -291,16 +293,18 @@ public:
   virtual bool is_inline_function (void) const { return false; }
 
   virtual bool is_function (void) const { return false; }
 
   virtual bool is_user_script (void) const { return false; }
 
   virtual bool is_user_function (void) const { return false; }
 
+  virtual bool is_user_code (void) const { return false; }
+
   virtual bool is_builtin_function (void) const { return false; }
 
   virtual bool is_dld_function (void) const { return false; }
 
   virtual bool is_mex_function (void) const { return false; }
 
   virtual short int short_value (bool = false, bool = false) const;
 
@@ -394,16 +398,20 @@ public:
   virtual std::streamoff streamoff_value (void) const;
 
   virtual streamoff_array streamoff_array_value (void) const;
 
   virtual octave_function *function_value (bool silent = false);
 
   virtual octave_user_function *user_function_value (bool silent = false);
 
+  virtual octave_user_script *user_script_value (bool silent = false);
+
+  virtual octave_user_code *user_code_value (bool silent = false);
+
   virtual octave_fcn_handle *fcn_handle_value (bool silent = false);
 
   virtual octave_fcn_inline *fcn_inline_value (bool silent = false);
 
   virtual octave_value_list list_value (void) const;
 
   virtual octave_value convert_to_str (bool pad = false, bool force = false,
 				       char type = '"') const;
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -163,17 +163,17 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
 				     "user-defined function");
 
 // Ugh.  This really needs to be simplified (code/data?
 // extrinsic/intrinsic state?).
 
 octave_user_function::octave_user_function
   (symbol_table::scope_id sid, tree_parameter_list *pl,
    tree_parameter_list *rl, tree_statement_list *cl)
-  : octave_function (std::string (), std::string ()),
+  : octave_user_code (std::string (), std::string ()),
     param_list (pl), ret_list (rl), cmd_list (cl),
     lead_comm (), trail_comm (), file_name (),
     parent_name (), t_parsed (static_cast<time_t> (0)),
     t_checked (static_cast<time_t> (0)),
     system_fcn_file (false), call_depth (0),
     num_named_args (param_list ? param_list->length () : 0),
     nested_function (false), inline_function (false),
     class_constructor (false), class_method (false), xdispatch_class (),
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -38,41 +38,71 @@ along with Octave; see the file COPYING.
 class string_vector;
 
 class octave_value;
 class tree_parameter_list;
 class tree_statement_list;
 class tree_va_return_list;
 class tree_walker;
 
+class 
+octave_user_code : public octave_function
+{
+public:
+  octave_user_code (void)
+    : octave_function () { }
+
+  ~octave_user_code (void) { }
+
+  bool is_user_code (void) const { return true; }
+
+  virtual tree_statement_list *body (void) = 0;
+
+protected:
+
+  octave_user_code (const std::string& nm,
+		    const std::string& ds = std::string ())
+    : octave_function (nm, ds) { }
+
+private:
+
+  // No copying!
+
+  octave_user_code (const octave_user_code& f);
+
+  octave_user_code& operator = (const octave_user_code& f);
+};
+
 // Scripts.
 
 class
-octave_user_script : public octave_function
+octave_user_script : public octave_user_code
 {
 public:
 
   octave_user_script (void)
-    : octave_function (), cmd_list (0), file_name () { }
+    : octave_user_code (), cmd_list (0), file_name () { }
 
   octave_user_script (const std::string& fnm, const std::string& nm,
 		      tree_statement_list *cmds,
 		      const std::string& ds = std::string ())
-    : octave_function (nm, ds), cmd_list (cmds), file_name (fnm) { }
+    : octave_user_code (nm, ds), cmd_list (cmds), file_name (fnm) { }
 
   octave_user_script (const std::string& fnm, const std::string& nm,
 		      const std::string& ds = std::string ())
-    : octave_function (nm, ds), cmd_list (0), file_name (fnm) { }
+    : octave_user_code (nm, ds), cmd_list (0), file_name (fnm) { }
 
   ~octave_user_script (void);
 
   octave_function *function_value (bool = false) { return this; }
 
   octave_user_script *user_script_value (bool = false) { return this; }
 
+  octave_user_code *user_code_value (bool = false) { return this; }
+
   // Scripts and user functions are both considered "scripts" because
   // they are written in Octave's scripting language.
 
   bool is_user_script (void) const { return true; }
 
   void stash_fcn_file_name (const std::string& nm) { file_name = nm; }
 
   void mark_fcn_file_up_to_date (const octave_time& t) { t_checked = t; }
@@ -136,31 +166,33 @@ private:
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 // User-defined functions.
 
 class
-octave_user_function : public octave_function
+octave_user_function : public octave_user_code
 {
 public:
 
   octave_user_function (symbol_table::scope_id sid = -1,
 			tree_parameter_list *pl = 0,
 			tree_parameter_list *rl = 0,
 			tree_statement_list *cl = 0);
 
   ~octave_user_function (void);
 
   octave_function *function_value (bool = false) { return this; }
 
   octave_user_function *user_function_value (bool = false) { return this; }
 
+  octave_user_code *user_code_value (bool = false) { return this; }
+
   octave_user_function *define_param_list (tree_parameter_list *t);
 
   octave_user_function *define_ret_list (tree_parameter_list *t);
 
   void stash_fcn_file_name (const std::string& nm);
 
   void stash_parent_fcn_name (const std::string& p) { parent_name = p; }
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1146,16 +1146,28 @@ octave_value::function_value (bool silen
 }
 
 octave_user_function *
 octave_value::user_function_value (bool silent)
 {
   return rep->user_function_value (silent);
 }
 
+octave_user_script *
+octave_value::user_script_value (bool silent)
+{
+  return rep->user_script_value (silent);
+}
+
+octave_user_code *
+octave_value::user_code_value (bool silent)
+{
+  return rep->user_code_value (silent);
+}
+
 octave_fcn_handle *
 octave_value::fcn_handle_value (bool silent)
 {
   return rep->fcn_handle_value (silent);
 }
 
 octave_fcn_inline *
 octave_value::fcn_inline_value (bool silent)
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -566,16 +566,19 @@ public:
     { return rep->is_function (); }
 
   bool is_user_script (void) const
     { return rep->is_user_script (); }
 
   bool is_user_function (void) const
     { return rep->is_user_function (); }
 
+  bool is_user_code (void) const
+    { return rep->is_user_code (); }
+
   bool is_builtin_function (void) const
     { return rep->is_builtin_function (); }
 
   bool is_dld_function (void) const
     { return rep->is_dld_function (); }
 
   bool is_mex_function (void) const
     { return rep->is_mex_function (); }
@@ -734,16 +737,20 @@ public:
   std::streamoff streamoff_value (void) const;
 
   streamoff_array streamoff_array_value (void) const;
 
   octave_function *function_value (bool silent = false);
 
   octave_user_function *user_function_value (bool silent = false);
 
+  octave_user_script *user_script_value (bool silent = false);
+
+  octave_user_code *user_code_value (bool silent = false);
+
   octave_fcn_handle *fcn_handle_value (bool silent = false);
 
   octave_fcn_inline *fcn_inline_value (bool silent = false);
 
   octave_value_list list_value (void) const;
 
   ColumnVector column_vector_value (bool frc_str_conv = false,
 			     bool frc_vec_conv = false) const;
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3342,29 +3342,31 @@ With no arguments, return a structure co
       string_vector argv = args.make_argv ("autoload");
 
       if (! error_state)
         {
 	  std::string nm = argv[2];
 
 	  if (! octave_env::absolute_pathname (nm))
 	    {
-	      octave_function *fcn = 
-		octave_call_stack::caller_user_script_or_function ();
+	      octave_user_code *fcn = octave_call_stack::caller_user_code ();
+
 	      bool found = false;
+
 	      if (fcn)
 		{
 		  std::string fname = fcn->fcn_file_name ();
+
 		  if (! fname.empty ())
 		    {
-		      fname = octave_env::make_absolute (fname,
-			octave_env::getcwd ());
-		      fname = fname.substr (0, 
-			fname.find_last_of (file_ops::dir_sep_str) + 1);
+		      fname = octave_env::make_absolute (fname, octave_env::getcwd ());
+		      fname = fname.substr (0, fname.find_last_of (file_ops::dir_sep_str) + 1);
+
 		      file_stat fs (fname + nm);
+
 		      if (fs.exists ())
 			{
 			  nm = fname + nm;
 			  found = true;
 			}
 		    }
 		}
 	      if (! found)
@@ -3474,17 +3476,17 @@ of the file name and the extension.\n\
 	{
 	  error ("mfilename: expecting argument to be a character string");
 	  return retval;
 	}
     }
 
   std::string fname;
 
-  octave_function *fcn = octave_call_stack::caller_user_script_or_function ();
+  octave_user_code *fcn = octave_call_stack::caller_user_code ();
 
   if (fcn)
     {
       fname = fcn->fcn_file_name ();
 
       if (fname.empty ())
         fname = fcn->name ();
     }
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -128,28 +128,28 @@ octave_call_stack::do_caller_user_functi
 	  retval = dynamic_cast<octave_user_function *> (f);
 	  break;
 	}
     }
 
   return retval;
 }
 
-octave_function *
-octave_call_stack::do_caller_user_script_or_function (void)
+octave_user_code *
+octave_call_stack::do_caller_user_code (void)
 {
-  octave_function *retval = 0;
+  octave_user_code *retval = 0;
 
   for (iterator p = cs.begin (); p != cs.end (); p++)
     {
       octave_function *f = *p;
 
-      if (f && (f->is_user_script () || f->is_user_function ()))
+      if (f && f->is_user_code ())
 	{
-	  retval = f;
+	  retval = dynamic_cast<octave_user_code *> (f);
 	  break;
 	}
     }
 
   return retval;
 }
 
 void
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -117,19 +117,19 @@ public:
 
   // First user-defined function on the stack.
   static octave_user_function *caller_user_function (void)
   {
     return instance_ok () ? instance->do_caller_user_function () : 0;
   }
 
   // First user-defined function on the stack.
-  static octave_function *caller_user_script_or_function (void)
+  static octave_user_code *caller_user_code (void)
   {
-    return instance_ok () ? instance->do_caller_user_script_or_function () : 0;
+    return instance_ok () ? instance->do_caller_user_code () : 0;
   }
 
   static void push (octave_function *f)
   {
     if (instance_ok ())
       instance->do_push (f);
   }
 
@@ -166,17 +166,17 @@ private:
   static octave_call_stack *instance;
 
   octave_function *do_element (size_t n) { return cs.size () > n ? cs[n] : 0; }
 
   octave_user_script *do_caller_user_script (void);
 
   octave_user_function *do_caller_user_function (void);
 
-  octave_function *do_caller_user_script_or_function (void);
+  octave_user_code *do_caller_user_code (void);
 
   void do_push (octave_function *f) { cs.push_front (f); }
 
   octave_function *do_top (void) { return cs.empty () ? 0 : cs.front (); }
 
   void do_pop (void)
   {
     if (! cs.empty ())
