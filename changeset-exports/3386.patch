# HG changeset patch
# User jwe
# Date 945298563 0
#      Wed Dec 15 22:56:03 1999 +0000
# Node ID a5288b88446f3453a719364371ab7d7ec3c7de6d
# Parent  10f21f7ccc7f458531d395a21fb2913783c502da
[project @ 1999-12-15 22:56:00 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,18 @@
 1999-12-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* control/bddemo.m: Make it more likely to work with
+	whitespace_in_literal_matrix = "ignore".
+	* control/analdemo.m: Ditto.
+	* control/dgkfdemo.m: Ditto.
+	* control/frdemo.m: Ditto.
+	* control/sysrepdemo.m: Ditto.
+	* control/moddemo.m: Ditto.
+
 	* control/dezero.m: Use toascii to convert string to ASCII value
 	instead of multiplying it by 1.
 
 	* control/zp2sys.m: Don't save and restore implicit_str_to_num_ok.
 	* control/zpout.m: Ditto.
 	* control/tfout.m: Ditto.
 	* control/tf2sys.m: Ditto.
 	* control/syssub.m: Ditto.
diff --git a/scripts/control/analdemo.m b/scripts/control/analdemo.m
--- a/scripts/control/analdemo.m
+++ b/scripts/control/analdemo.m
@@ -42,19 +42,19 @@ function analdemo ()
     if (k == 1)
       clc
       help dgram
       prompt
 
       clc 
       disp("System Grammians: (see Moore, IEEE T-AC, 1981) \n");
       disp("Example #1, consider the discrete time state space system:\n");
-      a=[1 5 -8.4;1.2 -3 5;1 7 9]
-      b=[1 5;2 6;-4.4 5]
-      c=[1 -1.5 2;6 -9.8 1]
+      a=[1, 5, -8.4; 1.2, -3, 5; 1, 7, 9]
+      b=[1, 5; 2, 6; -4.4, 5]
+      c=[1 -1.5, 2; 6, -9.8, 1]
       d=0
       prompt
       disp("\nThe discrete controllability grammian is computed as follows:");
       cmd = "grammian = dgram(a, b);";
       run_cmd;
       disp("Results:\n");
       grammian = dgram(a,b)
       disp("Variable Description:\n");
@@ -64,19 +64,19 @@ function analdemo ()
       prompt
       clc
 
       help gram
       prompt
       clc
 
       disp("Example #2, consider the continuous state space system:\n");
-      a=[1 3 -10.2;3.7 -2 9;1 3 7]
-      b=[1 12;6 2;-3.8 7]
-      c=[1 -1.1 7;3 -9.8 2]
+      a=[1, 3, -10.2; 3.7, -2, 9; n1, 3, 7]
+      b=[1, 12; 6, 2; -3.8, 7]
+      c=[1, -1.1, 7; 3, -9.8, 2]
       d=0
       prompt
       disp("\nThe continuous controllability grammian is computed as follows:");
       cmd = "grammian = gram(a, b);";
       run_cmd;
       disp("Results:\n");
       grammian = gram(a,b)
       disp("Variable Description:\n");
@@ -89,19 +89,19 @@ function analdemo ()
       
     elseif (k == 2)
       clc
       help tzero
       prompt
 
       disp("System zeros (tzero) example\n");
       disp("Example #1, consider the state space system:\n");
-      a=[0 1 0;-10 -2 0;-10 0 -8]
-      b=[0;1;9]
-      c=[-10 0 -4]
+      a=[0, 1, 0; -10, -2, 0; -10, 0, -8]
+      b=[0; 1; 9]
+      c=[-10, 0, -4]
       d=1
       prompt
       disp("\nTo compute the zeros of this system, enter the following command:\n");
       cmd = "zer = tzero(a,b,c,d);";
       run_cmd;
       disp("Results:\n");
       zer = tzero(a,b,c,d)
       disp("Variable Description:\n");
@@ -130,17 +130,17 @@ function analdemo ()
     elseif (k == 3)
       clc
       help c2d
       prompt
 
       clc
       disp("Continuous => Discrete and Discrete => Continuous conversions (c2d,d2c)");
       disp("\nExample #1, consider the following continuous state space system");
-      cmd = "sys_cont = ss2sys([-11 6;-15 8], [1;2], [2 -1], 0);";
+      cmd = "sys_cont = ss2sys([-11, 6; -15, 8], [1; 2], [2, -1], 0);";
       eval(cmd);
       disp(cmd);
       disp("Examine the poles and zeros of the continuous system:");
       sysout(sys_cont,"all");
       disp("\nTo convert this to a discrete system, a sampling time is needed:");
       cmd = "Tsam = 0.5;";
       run_cmd;
       disp("\nNow convert to a discrete system with the command:");
@@ -165,19 +165,19 @@ function analdemo ()
       clc
       help are
       prompt
       clc
 
       disp("Algebraic Riccati Equation (are, dare)");
 
       disp("\nExample #1, consider the continuous state space system:\n");
-      a=[1 3 -10.2;3.7 -2 9;1 3 7]
-      b=[1 12;6 2;-3.8 7]
-      c=[1 -1.1 7;3 -9.8 2]
+      a=[1, 3, -10.2; 3.7, -2, 9; 1, 3, 7]
+      b=[1, 12; 6, 2; -3.8, 7]
+      c=[1, -1.1, 7; 3, -9.8, 2]
       d=0
       prompt
       disp("\nThe solution to the continuous algebraic riccati equation");
       disp("is computed as follows:");
       cmd = "x_cont = are(a, b, c);";
       run_cmd;
       disp("Results:\n")
       x_cont = are(a,b,c)
@@ -187,19 +187,19 @@ function analdemo ()
       prompt
 
       clc
       help dare
       prompt
       clc
 
       disp("Example #2, consider the discrete time state space system:\n");
-      a=[1 5 -8.4;1.2 -3 5;1 7 9]
-      b=[1 5;2 6;-4.4 5]
-      c=[1 -1.5 2;6 -9.8 1]
+      a=[1, 5, -8.4; 1.2, -3, 5; 1, 7, 9]
+      b=[1, 5; 2, 6; -4.4, 5]
+      c=[1, -1.5, 2; 6, -9.8, 1]
       d=0
       r=eye(columns(b))
       prompt
       disp("\nThe solution to the continuous algebraic riccati equation");
       disp("is computed as follows:");
       cmd = "x_disc = dare(a, b, c, r);";
       run_cmd;
       disp("Results:\n")
@@ -211,26 +211,26 @@ function analdemo ()
       clc
 
     elseif (k == 5)
       disp("--- Balanced realization: not yet implemented")
     elseif (k == 6)
       disp("--- Open loop balanced truncation: not yet implemented")
     elseif (k == 7)
       disp("SISO pole placement example:")
-      cmd = "sys=tf2sys(1,[1 -2 1]);";
+      cmd = "sys=tf2sys(1, [1, -2, 1]);";
       run_cmd
       disp("System in zero-pole form is:")
       cmd = "sysout(sys,\"zp\");";
       run_cmd
       disp("and in state space form:")
       cmd = "sysout(sys,\"ss\");";
       run_cmd
       disp("Desired poles at -1, -1");
-      cmd = "K=place(sys,[-1 -1])";
+      cmd = "K=place(sys, [-1, -1])";
       run_cmd
       disp("Check results:")
       cmd = "[A,B] = sys2ss(sys);";
       run_cmd
       cmd = "poles=eig(A-B*K)";
       run_cmd
       prompt
     elseif (k == 8)
diff --git a/scripts/control/bddemo.m b/scripts/control/bddemo.m
--- a/scripts/control/bddemo.m
+++ b/scripts/control/bddemo.m
@@ -90,17 +90,17 @@ function bddemo ()
       disp("the two systems are both SISO, they both have the same poles,")
       disp("and at least one of them has  tf for its primary system type.");
       prompt
     elseif (k == 2)
       disp("sysappend: add new inputs and/or outputs to a system")
       help sysappend
       prompt
       disp("Consider a double-integrator system:")
-      sys = tf2sys(1,[1 0 0]);
+      sys = tf2sys(1, [1, 0, 0]);
       sys=sysupdate(sys,"ss");
       sysout(sys,"ss");
       disp("We add a velocity disturbance input as follows:")
       cmd = "sys1=sysappend(sys,[1;0]);";
       run_cmd
       sysout(sys1,"ss");
       disp("Names of inputs can be included as follows:")
       cmd = "sys1=sysappend(sys,[1;0], [],[],[],\"Disturb\");";
@@ -140,18 +140,18 @@ function bddemo ()
       disp("sysconnect is demonstrated fully in the design examples (option 13)");
       prompt
     elseif (k == 5)
       disp("syscont and sysdisc: ")
       disp("Example block diagram 1:")
       disp("        ------------------     ---------------------");
       disp(" u_in ->| Discrete system |--->| Continuous system | ---> y_out");
       disp("        ------------------     ---------------------");
-      sys1 = tf2sys([1 2],[1 2 1], 1,"u_in","y_disc");
-      sys2 = tf2sys([1 0],[1 -3 -2],0,"c_in","y_out");
+      sys1 = tf2sys([1, 2],[1, 2, 1], 1,"u_in","y_disc");
+      sys2 = tf2sys([1, 0],[1, -3, -2],0,"c_in","y_out");
       sys = sysmult(sys2,sys1);
       disp("Consider the hybrid system")
       sysout(sys);
       prompt
       help syscont
       disp("The continuous part of the system can be extracted with syscont")
       cmd = "[csys,Acd,Ccd] = syscont(sys);";
       run_cmd
@@ -164,34 +164,34 @@ function bddemo ()
       disp("The discrete part of the system can be extracted with sysdisc")
       cmd = "[dsys,Adc,Cdc] = sysdisc(sys)";
       run_cmd
       disp("The resulting dsys is")
       sysout(dsys);
       disp("sysdisc returns dsys=empty since sys has no discrete outputs.");
       prompt
       disp("Example block diagram 2:")
-      sys1 = tf2sys([1 2],[1 2 1], 1,"u_in","y_disc");
-      sys2 = tf2sys([1 0],[1 -3 -2],0,"c_in","y_out");
+      sys1 = tf2sys([1, 2],[1, 2, 1], 1,"u_in","y_disc");
+      sys2 = tf2sys([1, 0],[1, -3, -2],0,"c_in","y_out");
       disp("             ---------------------")
       disp(" u_in -->o-->| Discrete system   | --------> y_disc")
       disp("         ^   ---------------------    |")  
       disp("         |                            | ");
       disp("         -----------------------------|---")
       disp("                                      |  |")
       disp("         ------------------------------  |")
       disp("         |                               |")
       disp("         v   ---------------------       |")
       disp(" c_in -->o-->| continuous system | --------> y_out")
       disp("             ---------------------")
       disp("repeat the above example with sys=")
       sys = sysgroup(sys1, sys2);
       sysout(sys)
       prompt
-      sys = sysconnect(sys,[1 2],[2 1]);
+      sys = sysconnect(sys,[1, 2],[2, 1]);
       sysout(sys);
       cmd = "[csys,Acd,Bcd] = syscont(sys);";
       run_cmd
       cmd = "[dsys,Acd,Bcd] = sysdisc(sys);";
       run_cmd
       disp("csys is now")
       sysout(csys)
       disp("dsys is now")
@@ -203,19 +203,19 @@ function bddemo ()
       disp("********* N O T E *********")
       disp("sysdup is fully demonstrated in the design examples (option 13)")
       prompt
     elseif (k == 7)
       help sysgroup
       disp(" ")
       prompt
       disp("Example: combine two SISO systems together:")
-      cmd = "sys_a=tf2sys([1 2],[3 4]);";
+      cmd = "sys_a=tf2sys([1, 2],[3, 4]);";
       run_cmd
-      cmd = "sys_b=tf2sys([5 6],[7 8],1);";
+      cmd = "sys_b=tf2sys([5, 6],[7, 8],1);";
       run_cmd
       cmd = "sys_g=sysgroup(sys_a,sys_b);";
       run_cmd
       disp("Notice that sysgroup warns you when you join a purely continuous")
       disp("system to a purely discrete system.  sysgroup also warns when")
       disp("you join two systems that have common state, input, or output names.")
       cmd = "sysout(sys_g)";
       run_cmd
@@ -229,32 +229,32 @@ function bddemo ()
       help sysmult
       disp("sysmult performs a series connection of two systems.")
       disp("Example 1")
       disp(" ")
       disp("         ----------     ----------")
       disp("   u --->|  Bsys  |---->|  Asys  |---> y")
       disp("         ----------     ----------")
       disp(" ")
-      Asys = tf2sys(1,[1 2 1],0,"a_in","a_out");
-      Bsys = tf2sys([2 3],[1 3 2],0,"b_in","b_out");
+      Asys = tf2sys(1,[1, 2, 1],0,"a_in","a_out");
+      Bsys = tf2sys([2, 3],[1, 3, 2],0,"b_in","b_out");
       disp("Asys=")
       sysout(Asys);
       disp("Bsys=");
       sysout(Bsys);
       cmd = "sys = sysmult(Asys,Bsys);";
       run_cmd
       disp("sys =")
       sysout(sys);
       disp("Notice that sysmult automatically transforms to state space")
       disp("internal representation.  This is to avoid numerical problems")
       disp("when multiplying polynomials");
       prompt
       disp("Example 2: same system, except that Bsys is discrete-time");
-      Bsys = tf2sys([2 3],[1 3 2],1e-2,"b_in","b_out");
+      Bsys = tf2sys([2, 3],[1, 3, 2],1e-2,"b_in","b_out");
       sysout(Bsys);
       cmd = "sys = sysmult(Asys,Bsys);";
       run_cmd
       disp("sys =")
       sysout(sys);
       prompt
     elseif (k == 9)
       help sysprune
@@ -268,36 +268,36 @@ function bddemo ()
       prompt
       disp("********* N O T E *********")
       disp("See the design examples (option 13) for use of sysscale.")
       prompt
     elseif ( k == 11)
       help parallel
       disp("parallel operates by making a call to sysgroup and sysscale.")
       disp("Example:")
-      sys1 = tf2sys(1,[1 1],0,"in1","out1");
-      sys2 = tf2sys(2,[1 2],0,"in2","out2");
+      sys1 = tf2sys(1,[1, 1],0,"in1","out1");
+      sys2 = tf2sys(2,[1, 2],0,"in2","out2");
       disp("sys1=")
       sysout(sys1);
       disp("sys2=")
       sysout(sys2);
       cmd = "sysp = parallel(sys1,sys2);";
       run_cmd
       disp("sysp=")
       sysout(sysp);
       prompt
       disp("parallel can be used for multiple input systems as well:")
 
       in1 = list("u1.1","u1.2");
       in2 = list("u2.1","u2.2");
       out1 = list("y1.1","y1.2");
       out2 = list("y2.1","y2.2");
 
-      sys1 = ss2sys([-1,0;0 -2],eye(2),eye(2),[]);
-      sys2 = ss2sys([-2,0;0 -4],eye(2),eye(2),[]);
+      sys1 = ss2sys([-1, 0; 0, -2],eye(2),eye(2),[]);
+      sys2 = ss2sys([-2, 0; 0, -4],eye(2),eye(2),[]);
 
       sys1 = syssetsignals(sys1,"in",in1);
       sys1 = syssetsignals(sys1,"out",out1);
 
       sys2 = syssetsignals(sys2,"in",in2);
       sys2 = syssetsignals(sys2,"out",out2);
      
       disp("sys1=")
@@ -356,21 +356,21 @@ function bddemo ()
       disp("             |                            |");
       disp("             ------------------------------");
       disp(" ")
       disp("where P(s) is the plant, K(s) is the controller.")
       prompt
       disp("Simple example: P(s) is a first order lag, K(s) is a PI ")
       disp("controller")
       nump = 1;
-      denp = [1  1];
+      denp = [1, 1];
       disp("P(s)=")
       tfout(nump,denp)
-      numk = [1 1];
-      denk = [1 0];
+      numk = [1, 1];
+      denk = [1, 0];
       disp("\nK(s)=")
       tfout(numk,denk);
       prompt
       disp("We'll show three approaches.  ")
       P = tf2sys(nump,denp,0,"plant input","plant output");
       K = tf2sys(numk, denk,0,"controller input","controller output");
 
       meth = 0;
@@ -440,28 +440,28 @@ function bddemo ()
           prompt
           cmd = "PK = sysdup(PK,[],2);";
           run_cmd
           disp("PK=")
           sysout(PK);
           disp("Notice that PK now has three inputs (input 3 is a duplicate ");
           prompt("of input 2).  Press return to go on")
           disp("Step 3b: scale input 3 by -1")
-          cmd = "PK = sysscale(PK,[],diag([1,1,-1]));";
+          cmd = "PK = sysscale(PK,[],diag([1, 1, -1]));";
           run_cmd
           disp("PK=")
           sysout(PK);
           prompt
           disp("Step 4: connect:")
           disp("   y(t) (output 1) to the negative sum junction (input 3)")
           disp("   u(t) (output 2) to plant input (input 1)")
           disp("and prune extraneous inputs/outputs (retain input 2, output 1)")
           prompt
-          out_connect = [1 2]
-          in_connect = [3 1]
+          out_connect = [1, 2]
+          in_connect = [3, 1]
           cmd = "PK0 = sysconnect(PK,out_connect,in_connect);"; 
           run_cmd
           prompt
           disp("Notice that sysconnect detects the possibility of algebraic") 
           disp("connections when connecting inputs.  Option 2 (Method 1 ")
           disp("without algebraic loops) shows how to avoid this warning")
           disp("by performing connections one at a time.")
           prompt
@@ -531,17 +531,17 @@ function bddemo ()
           disp("         +          --------    --------");
           disp("  r(t) ---> (+) --->| K(s) |--->| P(s) | ----> y(t)");
           disp("            -^      --------    --------  |");
           disp("             |                            |");
           disp("             ------------------------------");
           disp(" ")
       disp("Step 1: We've already created systems P and K.  Create a sum ")
       disp("block as follows:")
-      cmd = "S = ss2sys([],[],[],[1 -1],0,0,0,[],list(""r(t)"",""y(t)""),""e(t)"");";
+      cmd = "S = ss2sys([],[],[],[1, -1],0,0,0,[],list(""r(t)"",""y(t)""),""e(t)"");";
       run_cmd
       disp("(You may wish to look at help ss2sys to see what the above does)");
       disp("S=")
       sysout(S)
       disp("notice that this is just a gain block that outputs e = r - y")
       prompt
       disp("Step 2: series connections of P, K, and S")
       cmd = "PKS = sysmult(P,sysmult(K,S));";
@@ -565,17 +565,17 @@ function bddemo ()
           disp("         +          --------    --------");
           disp("  r(t) ---> (+) --->| K(s) |--->| P(s) | ----> y(t)");
           disp("            -^      --------    --------  |");
           disp("             |                            |");
           disp("             ------------------------------");
           disp(" ")
       disp("Step 1: We've already created systems P and K.")
       disp("        Let us call buildssic:")
-      disp("   PKcl = buildssic([1 2;2 -1],[],[1],[2],P,K)")
+      disp("   PKcl = buildssic([1, 2; 2, -1],[],[1],[2],P,K)")
       disp(" ")
       disp("                         ^      ^  ^   ^  ^ ^")
       disp("                         |      |  |   |  | |")
       disp("     Connection list ----+      |  |   |  | |")
       disp(" internal input list -----------+  |   |  | +-- controller")
       disp("         output list --------------+   |  |")
       disp("          input list ------------------+  +---- plant")
       disp(" ")
@@ -584,17 +584,17 @@ function bddemo ()
       disp(" ")
       disp("  int. inp. list: do not append internal inputs")
       disp("                  (e.g. the internal input of K (r-y))")
       disp(" ")
       disp("     output list: the only output is 1 (P), positive")
       disp(" ")
       disp("      input list: the only input is 2 (K), positive")
       disp(" ")
-      cmd = "PKcl = buildssic([1 2;2 -1],[],[1],[2],P,K);"
+      cmd = "PKcl = buildssic([1, 2; 2, -1],[],[1],[2],P,K);"
       run_cmd
       sysout(PKcl)
       prompt
       disp("The transfer function form of PKcl is:")
       sysout(PKcl,"tf");
       disp("You can check this: PKcl = PK / (1 + PK), as expected")
       prompt
       elseif(meth != 5)
diff --git a/scripts/control/dgkfdemo.m b/scripts/control/dgkfdemo.m
--- a/scripts/control/dgkfdemo.m
+++ b/scripts/control/dgkfdemo.m
@@ -43,133 +43,133 @@ function dgkfdemo ()
 	    'Return to main demo menu');
     endwhile
     if (menuopt == 1)
       disp('Linear/Quadratic regulator design:')
       disp('Compute optimal state feedback via the lqr command...')
       help lqr
       disp(' ')
       disp('Example:')
-      A = [0 1; -2 -1]
+      A = [0, 1; -2, -1]
       B = [0; 1]
-      Q = [1 0; 0 0]
+      Q = [1, 0; 0, 0]
       R = 1
       disp("Q = state penalty matrix; R = input penalty matrix")
       prompt
       disp('Compute state feedback gain k, ARE solution P, and closed-loop')
       disp('poles as follows:');
-      cmd = "[k p e] = lqr(A,B,Q,R)";
+      cmd = "[k, p, e] = lqr(A,B,Q,R)";
       run_cmd
       prompt
       disp("A similar approach can be used for LTI discrete-time systems")
       disp("by using the dlqr command in place of lqr (see LQG example).")
     elseif (menuopt == 2)
       disp('Linear/Gaussian estimator design:')
       disp('Compute optimal state estimator via the lqe command...')
       help lqe
       disp(' ')
       disp('Example:')
-      A = [0 1; -2 -1]
+      A = [0, 1; -2, -1]
       disp("disturbance entry matrix G")
       G = eye(2)
       disp("Output measurement matrix C")
-      C = [0  1]
-      SigW = [1 0; 0 1]
+      C = [0, 1]
+      SigW = [1, 0; 0, 1]
       SigV = 1
       disp("SigW = input disturbance intensity matrix;")
       disp("SigV = measurement noise intensity matrix")
       prompt
       disp('Compute estimator feedback gain k, ARE solution P, and estimator')
       disp('poles via the command: ')
-      cmd = "[k p e] = lqe(A,G,C,SigW,SigV)";
+      cmd = "[k, p, e] = lqe(A,G,C,SigW,SigV)";
       run_cmd
       disp("A similar approach can be used for LTI discrete-time systems")
       disp("by using the dlqe command in place of lqe (see LQG example).")
     elseif (menuopt == 3)
       disp('LQG optimal controller of a system:')
       disp('Input accepted as either A,B,C matrices or in system data structure form')
       disp('in both discrete and continuous time.')
       disp("Example 1: continuous time design:")
       prompt
       help lqg
       disp("Example system")
-      A = [0 1; .5 .5];
-      B = [0 ; 2];
+      A = [0, 1; .5, .5];
+      B = [0; 2];
       G = eye(2)
-      C = [1 1];
-      sys = ss2sys(A,[B G],C);
+      C = [1, 1];
+      sys = ss2sys(A, [B, G], C);
       sys = syssetsignals(sys,"in", ...
 		       ["control input"; "disturbance 1"; "disturbance 2"]);
       sysout(sys)
       prompt
       disp("Filtering/estimator parameters:")
       SigW = eye(2)
       SigV = 1
       prompt
       disp("State space (LQR) parameters Q and R are:")
       Q = eye(2)
       R = 1
       cmd = "[K,Q1,P1,Ee,Er] = lqg(sys,SigW,SigV,Q,R,1);";
       run_cmd
       disp("Check: closed loop system A-matrix is")
-      disp(" [A      B*Cc]")
-      disp(" [Bc*C   Ac  ]")
-      cmd = "[Ac,Bc,Cc] = sys2ss(K);";
+      disp(" [A,      B*Cc]")
+      disp(" [Bc*C,   Ac  ]")
+      cmd = "[Ac, Bc, Cc] = sys2ss(K);";
       run_cmd
-      cmd = "Acl = [A , B*Cc ; Bc*C  Ac]";
+      cmd = "Acl = [A, B*Cc; Bc*C, Ac]";
       run_cmd
       disp("Check: poles of Acl:")
       Acl_poles = sortcom(eig(Acl))
       disp("Predicted poles from design = union(Er,Ee)")
-      cmd = "pred_poles = sortcom([Er;Ee])";
+      cmd = "pred_poles = sortcom([Er; Ee])";
       run_cmd
       disp("Example 2: discrete-time example")
-      cmd1 = "Dsys = ss2sys(A,[G B],C,[0 0 0],1);";
+      cmd1 = "Dsys = ss2sys(A, [G, B], C, [0, 0, 0], 1);";
       cmd2 = "[K,Q1,P1,Ee,Er] = lqg(Dsys,SigW, SigV,Q,R);";
       disp("Run commands:")
       cmd = cmd1;
       run_cmd
       cmd = cmd2;
       run_cmd
       prompt
       disp("Check: closed loop system A-matrix is")
-      disp(" [A      B*Cc]")
-      disp(" [Bc*C   Ac  ]")
+      disp(" [A,      B*Cc]")
+      disp(" [Bc*C,   Ac  ]")
       [Ac,Bc,Cc] = sys2ss(K);
-      Acl = [A , B*Cc ; Bc*C  Ac]
+      Acl = [A, B*Cc; Bc*C, Ac]
       prompt
       disp("Check: poles of Acl:")
       Acl_poles = sortcom(eig(Acl))
       disp("Predicted poles from design = union(Er,Ee)")
       pred_poles = sortcom([Er;Ee])
     elseif (menuopt == 4)
       disp('H2 gain of a system: (Energy in impulse response)')
       disp('Example 1: Stable plant:')
-      cmd = "A = [0 1; -2 -1]; B = [0 ; 1]; C = [1 0]; sys_poles = eig(A)";
+      cmd = "A = [0, 1; -2, -1]; B = [0; 1]; C = [1, 0]; sys_poles = eig(A)";
       run_cmd
       disp("Put into Packed system form:")
       cmd = "Asys = ss2sys(A,B,C);";
       run_cmd
       disp("Evaluate system 2-norm (impulse response energy):");
       cmd = "AsysH2 = h2norm(Asys)";
       run_cmd
       disp("Compare with a plot of the system impulse response:")
       tt = 0:0.1:20;
       for ii=1:length(tt)
         ht(ii) = C*expm(A*tt(ii))*B;
       endfor
       plot(tt,ht)
       title("impulse response of example plant")
       prompt
       disp('Example 2: unstable plant')
-      cmd = "A = [0 1; 2 1]";
+      cmd = "A = [0, 1; 2, 1]";
       eval(cmd);
-      cmd = "B = [0 ; 1]";
+      cmd = "B = [0; 1]";
       eval(cmd);
-      cmd = "C = [1 0]";
+      cmd = "C = [1, 0]";
       eval(cmd);
       cmd = "sys_poles = eig(A)";
       run_cmd
       prompt
       disp('Put into system data structure form:')
       cmd="Bsys = ss2sys(A,B,C);";
       run_cmd
       disp('Evaluate 2-norm:')
@@ -190,32 +190,32 @@ function dgkfdemo ()
       disp("       -------------------->y2");
       disp("       |   _________");
       disp("u(t)-->o-->| 1/s^2 |-->o-> y1");
       disp("       ^   ---------   ^");
       disp("       |               |");
       disp("      w1(t)           w2(t)");
       disp(" ")
       disp("w enters the system through B1, u through B2")
-      disp("z = [y1 ; y2] is obtained through C1, y=y1 through C2");
+      disp("z = [y1; y2] is obtained through C1, y=y1 through C2");
       disp(" ")
-      cmd = "A = [0 1; 0 0];  B1 = [0 0;1 0]; B2 = [0;1];";
+      cmd = "A = [0, 1; 0, 0];  B1 = [0, 0; 1, 0]; B2 = [0; 1];";
       disp(cmd)
       eval(cmd);
-      cmd = "C1 = [1 0; 0 0]; C2 = [1 0];    D11 = zeros(2);";
+      cmd = "C1 = [1, 0; 0, 0]; C2 = [1, 0];    D11 = zeros(2);";
       disp(cmd)
       eval(cmd);
-      cmd = "D12 = [0;1];    D21 = [0 1];    D22 = 0; D = [D11 D12; D21 D22];";
+      cmd = "D12 = [0; 1];  D21 = [0, 1];  D22 = 0; D = [D11, D12; D21, D22];";
       disp(cmd)
       eval(cmd);
       disp("Design objective: compute U(s)=K(s)Y1(s) to minimize the closed")
       disp("loop impulse response from w(t) =[w1; w2] to z(t) = [y1; y2]");
       prompt
       disp("First: pack system:")
-      cmd="Asys = ss2sys(A,[B1 B2], [C1;C2] , D);";
+      cmd="Asys = ss2sys(A, [B1, B2], [C1; C2], D);";
       run_cmd
       disp("Open loop multivariable Bode plot: (will take a moment)")
       cmd="bode(Asys);";
       run_cmd
       prompt("Press a key to close plot and continue");
       closeplot
       disp("Controller design command: (only need 1st two output arguments)")
       cmd="[K,gain, Kc, Kf, Pc,  Pf] = h2syn(Asys,1,1);";
@@ -240,17 +240,17 @@ function dgkfdemo ()
       cmd="bode(Kcl);";
       run_cmd
       prompt
       disp("Related functions: is_dgkf, is_controllable, is_stabilizable,")
       disp("                is_observable, is_detectable")
     elseif (menuopt == 6)
       disp('Hinfinity gain of a system: (max gain over all j-omega)')
       disp('Example 1: Stable plant:')
-      cmd = "A = [0 1; -2 -1]; B = [0 ; 1]; C = [1 0]; sys_poles = eig(A)";
+      cmd = "A = [0, 1; -2, -1]; B = [0; 1]; C = [1, 0]; sys_poles = eig(A)";
       run_cmd
       disp('Pack into system format:')
       cmd = "Asys = ss2sys(A,B,C);";
       run_cmd
       disp('The infinity norm must be computed iteratively by')
       disp('binary search.  For this example, we select tolerance tol = 0.01, ')
       disp('min gain gmin = 1e-2, max gain gmax=1e4.')
       disp('Search quits when upper bound <= (1+tol)*lower bound.')
@@ -264,17 +264,17 @@ function dgkfdemo ()
       ylabel('|Asys(j omega)| ')
       grid();
       semilogx(w,M);
       disp(["Max magnitude is ",num2str(max(M)), ...
 	", compared with gmin=",num2str(gmin)," and gmax=", ...
         num2str(gmax),"."])
       prompt
       disp('Example 2: unstable plant')
-      cmd = "A = [0 1; 2 1]; B = [0 ; 1]; C = [1 0]; sys_poles = eig(A)";
+      cmd = "A = [0, 1; 2, 1]; B = [0; 1]; C = [1, 0]; sys_poles = eig(A)";
       run_cmd
       disp("Pack into system format:")
       cmd = "Bsys = ss2sys(A,B,C);";
       run_cmd
       disp('Evaluate with BsysH2 = hinfnorm(Bsys,tol,gmin,gmax)')
       BsysH2 = hinfnorm(Bsys,tol,gmin,gmax)
       disp(' ')
       disp('NOTICE: program returns a value without an error signal.')
@@ -282,29 +282,29 @@ function dgkfdemo ()
 
     elseif (menuopt == 7)
       disp('Hinfinity optimal controller of a system: command = hinfsyn:')
       prompt
       help hinfsyn
       prompt
       disp("Example system: double integrator with output noise and")
       disp("input disturbance:")
-      A = [0 1; 0 0]
-      B1 = [0 0;1 0]
-      B2 = [0;1]
-      C1 = [1 0; 0 0]
-      C2 = [1 0]
+      A = [0, 1; 0, 0]
+      B1 = [0, 0; 1, 0]
+      B2 = [0; 1]
+      C1 = [1, 0; 0, 0]
+      C2 = [1, 0]
       D11 = zeros(2);
-      D12 = [0;1];
-      D21 = [0 1];
+      D12 = [0; 1];
+      D21 = [0, 1];
       D22 = 0;
-      D = [D11 D12; D21 D22]
+      D = [D11, D12; D21, D22]
       prompt
       disp("First: pack system:")
-      cmd="Asys = ss2sys(A,[B1 B2], [C1;C2] , D);";
+      cmd="Asys = ss2sys(A, [B1, B2], [C1; C2], D);";
       run_cmd
       prompt
       disp("Open loop multivariable Bode plot: (will take a moment)")
       cmd="bode(Asys);";
       run_cmd
       prompt
       disp("Controller design command: (only need 1st two output arguments)")
       gmax = 1000
diff --git a/scripts/control/frdemo.m b/scripts/control/frdemo.m
--- a/scripts/control/frdemo.m
+++ b/scripts/control/frdemo.m
@@ -52,17 +52,17 @@ function frdemo ()
                   'Return to frdemo menu');
        
         if( k1 == 1 )
           disp(" ")
           clc  
           disp("\nContinuous system bode analysis\n");
           disp("Example #1:")
           disp("\nConsider the system sys1=");
-          sys1=tf2sys([1 1],[1 0 -1]);
+          sys1=tf2sys([1, 1], [1, 0, -1]);
           sysout(sys1);
           disp("\nPole-zero form can be obtained as follows:")
           cmd = "sysout(sys1,""zp"");";
           run_cmd;
           disp("The systems bode plot is obtained as follows:");
           cmd = "bode(sys1);";
           run_cmd;  
           disp("\nNotice that bode automatically labels the plots according to")
@@ -82,31 +82,31 @@ function frdemo ()
           disp("\n[Mag,Phase,w] = bode(sys);");
           disp("\nThis will return three vectors containing the magnitude,");
           disp("phase and frequency.\n");
           prompt;
 
           disp("")
           clc
           disp("Example #2, sys2=")
-          cmd = "sys2=zp2sys([1],[-1 -5],10);";
+          cmd = "sys2=zp2sys(1, [-1, -5], 10);";
           eval(cmd);
           cmd = "sysout(sys2);";
           eval(cmd);
           disp("\nThe bode plot command is identical to the tf form:")
           cmd = "bode(sys2);";
           run_cmd;  
           disp("\nThe internal representation of the system is not important;")
           disp("bode automatically sorts it out internally.")
           prompt;
  
           disp("")
           clc
           disp("Example #3, Consider the following state space system sys3=:\n");
-          cmd = "sys3=ss2sys([0 1; -1000 -1001], [0;1], [0 -891], 1);";
+          cmd = "sys3=ss2sys([0, 1; -1000, -1001], [0; 1], [0, -891], 1);";
           eval(cmd);
           cmd = "sysout(sys3);";
           eval(cmd);
           disp("\nOnce again, the bode plot command is the same:");
           cmd = "bode(sys3);";
           run_cmd;
           disp("\nSuppose the user is interested in the response of the system");
           disp("defined over the input frequency range of 1 - 1000 rad/s.\n");
@@ -170,17 +170,17 @@ function frdemo ()
 
         elseif( k1 == 2 )
           disp("")
           clc
           disp("\nDiscrete system bode analysis\n");
           disp("Display bode plots of a discrete SISO system (dbode)\n")
       	  disp("Example #1, Consider the following discrete transfer");
           disp(" function:\n");
-          cmd = "sys1 = tf2sys([0.00100502 -0.00099502],[1 -2 1],0.001);";
+          cmd = "sys1 = tf2sys([0.00100502, -0.00099502], [1, -2, 1], 0.001);";
           disp(cmd);
           eval(cmd);
  	  cmd = "sysout(sys1)";
           disp(cmd);
           eval(cmd);
       	  disp("\nTo examine open loop zeros and poles of the system,");
           disp("use the command:\n")
           cmd = "sysout(sys1,""zp"");";
@@ -227,17 +227,17 @@ function frdemo ()
           disp("Notice that the bode command is the same in both of the previous");
           disp("examples.  The bode command is also the same for the continuous case.");
           disp("The function, dbode, is no longer used.");
 
           prompt
           disp("")
           clc
           disp("\nExample #3, Now consider the following state space system:\n");
-          cmd = "sys3 = ss2sys([.857 .0011;0 .99930],[1;1],[-.6318 .0057096],5.2, .001);";
+          cmd = "sys3 = ss2sys([.857, .0011; 0, .99930],[1;1],[-.6318, .0057096],5.2, .001);";
           disp(cmd);
           eval(cmd);
           cmd = "sysout(sys3);";
           disp(cmd);
           eval(cmd);
           disp("\nTo view the system's bode plots, execute the following command:\n")
       	  cmd = "bode(sys3);";
        	  run_cmd;
@@ -318,17 +318,17 @@ function frdemo ()
                   'Return to frdemo menu');
 
         if( k2 == 1 )
           disp("")
           clc
  	  disp("\nContinuous system nyquist analysis\n");
       	  disp("Display Nyquist plots of a SISO system (nyquist)\n")
       	  disp("Example #1, Consider the following transfer function:\n")
-          cmd = "sys1 = tf2sys([1],[1 0.8 1]);";
+          cmd = "sys1 = tf2sys(1, [1, 0.8, 1]);";
           disp(cmd);
           eval(cmd);
           disp("To examine the transfer function, use the command:");
           cmd = "sysout(sys1);";
           disp(cmd);
           eval(cmd);
           disp("\nTo examine the open loop zeros and poles, use the command:");
           cmd = "sysout(sys1,""zp"");";
@@ -371,17 +371,17 @@ function frdemo ()
           disp("command:\n")
       	  cmd = "nyquist(sys2);";
           run_cmd;
           prompt
 
           disp("")
           clc
           disp("\nExample #3, Consider the following state space system:\n")
-          cmd = "sys3 = ss2sys([0 1 0 0;0 0 1 0;0 0 0 1;0 0 -20 -12],[0;0;0;1],[50 100 0 0],0);";
+          cmd = "sys3 = ss2sys([0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; 0, 0, -20, -12],[0;0;0;1],[50, 100, 0, 0],0);";
           disp(cmd);
           eval(cmd); 
           disp("\nTo examine the state-space system, use the command:");
           cmd = "sysout(sys3)";
           disp(cmd);
           eval(cmd); 	 
           disp("\nTo examine the poles and zeros, use the command:");
           cmd = "sysout(sys3,""zp"")";
@@ -444,17 +444,17 @@ function frdemo ()
           clc 
           disp("\nDiscrete system nyquist analysis\n");
       	  disp("Display Nyquist plots of a discrete SISO system (nyquist)\n")
           disp("We will first define a sampling time, T");
           cmd = "T = 0.01;";
           disp(cmd); 
           eval(cmd);
       	  disp("\nExample #1, Consider the following transfer function:\n")
-      	  cmd = "sys1 = tf2sys([2 -3.4 1.5],[1 -1.6 0.8],T);";
+      	  cmd = "sys1 = tf2sys([2, -3.4, 1.5],[1, -1.6, 0.8],T);";
           disp(cmd); 
           eval(cmd);
           disp("To examine the transfer function, use the command:");
           cmd = "sysout(sys1);";
           disp(cmd);
           eval(cmd);
           disp("\nTo examine the open loop zeros and poles, use the command:");
           cmd = "sysout(sys1,""zp"")";
@@ -486,17 +486,17 @@ function frdemo ()
       	  disp("wrange => optional vector of frequencies")
       	  disp("          if wrange is entered in the argument list, the");
           disp("	  system will be evaluated at these specific");
           prompt
 
           disp("")
           clc
           disp("\nExample #2, Consider the following set of poles and zeros:\n")
-       	  cmd = "sys2 = zp2sys([0.98025 + 0.01397i;0.98025 - 0.01397i],[0.96079;0.99005],1,T);";
+       	  cmd = "sys2 = zp2sys([0.98025 + 0.01397i; 0.98025 - 0.01397i],[0.96079;0.99005],1,T);";
           disp(cmd); 
           eval(cmd);
           disp("\nTo examine the open loop zeros and poles, use the command:");
           cmd = "sysout(sys2)";
           disp(cmd); 
           eval(cmd); 
       	  disp("\nTo view the system's nyquist plot between the frequencies");
           disp("0.01 - 100 rad/s, execute the following commands:\n")
@@ -509,17 +509,17 @@ function frdemo ()
         
           disp("")
           clc
           disp("\nExample #3, Consider the following discrete state space");
           disp("system:\n");
           disp("This example will use the same system used in the third");
           disp("example in the continuous nyquist demo.  First, that system");
           disp("will have to be re-entered useing the following commands:\n");
-          cmd = "sys3 = ss2sys([0 1 0 0;0 0 1 0;0 0 0 1;0 0 -20 -12],[0;0;0;1],[50 100 0 0],0);";
+          cmd = "sys3 = ss2sys([0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; 0, 0, -20, -12],[0;0;0;1],[50, 100, 0, 0],0);";
           disp(cmd); 
           eval(cmd); 
           disp("\nTo examine the state-space system, use the command:");
           cmd = "sysout(sys3)";
           disp(cmd); 
           eval(cmd);
           disp("\nTo examine the poles and zeros, use the command:");
           cmd = "sysout(sys3,""zp"")";
diff --git a/scripts/control/moddemo.m b/scripts/control/moddemo.m
--- a/scripts/control/moddemo.m
+++ b/scripts/control/moddemo.m
@@ -45,19 +45,19 @@ function moddemo ()
     k=6;
     while(k > 5 || k < 1)
       k = input('Please enter a number:');
     endwhile
     if (k == 1)
       clc
       disp('Perform continuous to discrete time conversion (c2d)\n')
       disp('Example #1, Consider the following continuous time state space system:\n')
-      a=[0 1;-25 -4]
-      b=[0;1]
-      c=[1 1]
+      a=[0, 1; -25, -4]
+      b=[0; 1]
+      c=[1, 1]
       d=1
       prompt
       disp('\nTo convert this to a discrete time system (using a zero order hold),')
       disp('use the following commands:\n')
       cmd="sys=ss2sys(a,b,c,d);";
       run_cmd
       cmd="dsys = c2d(sys,0.2);";
       run_cmd
@@ -79,19 +79,19 @@ function moddemo ()
       run_cmd
       disp("The error is on the order of roundoff noise, so we're o.k.")
       prompt
       clc
     elseif (k == 2)
       clc
       disp('Convert from state space to zero / pole form (ss2zp)\n')
       disp('Example #1, Consider the following state space system:\n')
-      a=[0 3 1;-2 -4 5;5 8 2]
-      b=[0;5;2.5]
-      c=[6 -1.9 2]
+      a=[0, 3, 1; -2, -4, 5; 5, 8, 2]
+      b=[0; 5; 2.5]
+      c=[6, -1.9, 2]
       d=[-20]
       prompt
       disp(' ')
       disp('\nTo find the poles and zeros of this sytstem, use the following command:\n')
       disp('\n[zer, pol] = ss2zp(a, b, c, d)\n')
       prompt
       disp('Results:\n')
       [zer, pol] = ss2zp(a, b, c, d)
@@ -124,19 +124,19 @@ function moddemo ()
       disp('error = sort(eig(a)) - sort(eig(na))\n')
       error = sort(eig(a)) - sort(eig(na))
       prompt
       clc
     elseif (k == 3)
       clc
       disp('Convert from state space to transfer function (ss2tf)\n')
       disp('Example #1, Consider the following state space system:\n')
-      a=[0 1;-2 -3]
-      b=[1;1]
-      c=[1 9]
+      a=[0, 1; -2, -3]
+      b=[1; 1]
+      c=[1, 9]
       d=[1]
       prompt
       disp('\nTo find an equivalent transfer function for this system, use')
       disp('the following command:\n')
       disp('[num, den] = ss2tf(a, b, c, d)\n')
       prompt
       disp('Results:\n')
       [num,den] = ss2tf(a, b, c, d)
@@ -162,18 +162,18 @@ function moddemo ()
       disp('num, den => numerator and denominator of transfer function that is equivalent')
       disp('            to the state space system\n')
       prompt
       clc
     elseif (k == 4)
       clc
       disp('Convert from transfer function to zero / pole form (tf2zp)\n')
       disp('Example #1, Consider the following transfer function:\n')
-      num=[1 2 3 4 5 ]
-      den=[1 2 3 4 5 6 7]
+      num=[1, 2, 3, 4, 5, ]
+      den=[1, 2, 3, 4, 5, 6, 7]
       prompt
       disp('\nTo find the zeros and poles of this system, use the following command:\n')
       disp('[zer,pol] = tf2zp(num,den)\n')
       prompt
       disp('Results:\n')
       [zer,pol] = tf2zp(num,den)
       disp('Variable Description:\n')
       disp('zer,pol => zeros and poles of the transfer function')
diff --git a/scripts/control/sysrepdemo.m b/scripts/control/sysrepdemo.m
--- a/scripts/control/sysrepdemo.m
+++ b/scripts/control/sysrepdemo.m
@@ -27,18 +27,18 @@
 function sysrepdemo ()
 
 
 
   save_val = page_screen_output;
   page_screen_output = 1;
 
   disp('System representation demo:')
-  num = [5 -1];
-  denom = [1 -2 6];
+  num = [5, -1];
+  denom = [1, -2, 6];
   a = b = c = [];
   syschoice = -1;
   ch_init = 2;
   ch_extract = ch_init+1;
   ch_update = ch_extract+1;
   ch_view = ch_update+1;
   ch_details = ch_view+1;
   ch_quit = ch_details+1;
@@ -129,21 +129,21 @@ function sysrepdemo ()
 		"Double delay (discrete-time) example", ...
 		"Summing junction (D-matrix only) example", ...
 		"ss2sys details (help ss2sys)", ...
 		"return to system initialization menu", ...
 		"return to system representation main menu");
             if(ssopt == 1)
               disp("Example: construct a system representation of a")
               disp("double integrator via state-space form")
-              cmd = "a = [0 1; 0 0];";
+              cmd = "a = [0, 1; 0, 0];";
               run_cmd
-              cmd = "b = [0 ; 1];";
+              cmd = "b = [0; 1];";
               run_cmd
-              cmd = "c = [1 0];";
+              cmd = "c = [1, 0];";
               run_cmd
               cmd = "sys = ss2sys(a,b,c);";
               run_cmd
               disp("The state space form of the system is seen via sysout:")
               cmd = "sysout(sys)";
               run_cmd
               disp("Notice that the Octave controls  toolbox automatically")
               disp("assigns names to the states, inputs and outputs,")
@@ -152,21 +152,21 @@ function sysrepdemo ()
               cmd = "sysout(sys,""tf"")";
               run_cmd
               prompt
             elseif(ssopt == 2)
               disp("Example: discrete-time double-delay:")
               disp("This example is identical to the double-integrator,")
               disp("except that it is a discrete-time system, and so has")
               disp("a sampling interval.  We arbitrarily select T=1e-3.");
-              cmd = "a = [0 1; 0 0];";
+              cmd = "a = [0, 1; 0, 0];";
               run_cmd
-              cmd = "b = [0 ; 1];";
+              cmd = "b = [0; 1];";
               run_cmd
-              cmd = "c = [1 0];";
+              cmd = "c = [1, 0];";
               run_cmd
               cmd = "sys=ss2sys(a,b,c,[],1e-3);";
               run_cmd
               cmd = "sysout(sys)";
               run_cmd
               disp("Notice that the D matrix was filled in automatically.")
               disp("This is done if D is input as the empty matrix.")
 	      disp(" ")
@@ -193,17 +193,17 @@ function sysrepdemo ()
 	      disp("or D matrices unless there are corresponding discrete")
               disp("outputs or states.  The OCST provides warning messages when")
 	      disp("if this convention is violated.")
 	      prompt
             elseif(ssopt == 3)
               disp("A summing junction that computes e(t) = r(t) - y(t) may be");
               disp("constructed as follows:");
               disp("First, we set the matrix D:")
-              cmd = "D = [1 -1];";
+              cmd = "D = [1, -1];";
               run_cmd
               disp("ss2sys allows the initialization of signal and state names")
               disp("(see option 4), so we initialize these as follows:")
               cmd = "inname = list(\"r(t)\",\"y(t)\");";
               run_cmd;
               cmd = "outname = \"e(t)\";";
 	      run_cmd
               disp("Since the system is continous time and without states,")
@@ -246,61 +246,61 @@ function sysrepdemo ()
 		"Return to system initialization menu", ...
 		"Return to system representation main menu");
             if(tfopt == 1) # continuous time
               disp("A transfer function is represented by vectors of the")
               disp("coefficients of the numerator and denominator polynomials");
               disp(" ")
               disp("For example: the transfer function");
               disp(" ");
-              num = [5 -1];
-              denom = [1 -2 6];
+              num = [5, -1];
+              denom = [1, -2, 6];
               tfout(num,denom);
               disp(" ")
               disp("is generated by the following commands:")
-              cmd = "num = [5 -1]";
+              cmd = "num = [5, -1]";
               run_cmd
-              cmd = "denom = [1 -2 6]";
+              cmd = "denom = [1, -2, 6]";
               run_cmd
               cmd = "sys = tf2sys(num,denom);";
               run_cmd
 	      disp("alternatively, the system can be generated in a single command:");
-	      cmd = "sys = tf2sys([5 -1],[1 -2 6]);";
+	      cmd = "sys = tf2sys([5, -1], [1, -2, 6]);";
               run_cmd
               disp("Notice the output of sys: it is an Octave data structure.")
               disp("The details of its member variables are explained under")
               disp("System Representation Menu option 5 (the details of system form)")
 	      disp(" ");
               disp("The data structure can be observed with the sysout command:")
               cmd = "sysout(sys)";
               run_cmd
               disp("Notice that Octave assigns names to inputs and outputs.")
 	      disp("The user may manually select input and output names; see option 3");
 	      prompt
             elseif(tfopt == 2) # discrete time
               disp("A transfer function is represented by vectors of the")
               disp("coefficients of the numerator and denominator polynomials");
               disp("Discrete-time transfer functions require ")
               disp("the additional parameter of a sampling period:")
-              cmd = "sys=tf2sys([5 -1],[1 2 -6],1e-3);";
+              cmd = "sys=tf2sys([5, -1], [1, 2, -6], 1e-3);";
               run_cmd
               cmd = "sysout(sys)";
               run_cmd
 	      disp("The OCST recognizes discrete-time transfer functions and")
 	      disp("accordingly prints them with the frequency domain variable z.");
               disp("Notice that Octave assigns names to inputs and outputs.")
 	      disp("The user may set input and output names; see option 3");
             elseif(tfopt == 3) # user specified names
               disp("The OCST requires all signals to have names.  The OCST assigned default");
 	      disp("names to the signals in the other examples.  We may initialize a transfer");
 	      disp("function with user-specified names as follows: Consider a simple ")
 	      disp("double-integrator model of aircraft roll dynamics with ")
 	      disp("input \"aileron angle\" and output \"theta\".  A ")
 	      disp("system for this model is generated by the command")
-	      cmd = "aircraft=tf2sys(1,[1 0 0],0,\"aileron angle\",\"theta\");";	      run_cmd
+	      cmd = "aircraft=tf2sys(1, [1, 0, 0], 0,\"aileron angle\",\"theta\");";	      run_cmd
 	      disp("The sampling  time parameter 0 indicates that the system")
 	      disp("is continuous time.  A positive sampling time indicates a")
 	      disp("discrete-time system (or sampled data system).")
 	      cmd = "sysout(aircraft)";
 	      run_cmd
 	      disp("Notice that the user-selected signal names are listed.")
 	      disp("These signal names are used in OCST plots and design functions.");
 	      disp("(Run the frequency response demo to see an example of the use of ");
@@ -325,63 +325,63 @@ function sysrepdemo ()
 		"Return to system representation main menu");
             if(zpopt == 1) # continuous time
               disp("A zero-pole form representation of a system includes vectors")
               disp("of the system poles and zeros and a scalar leading coefficient.");
               disp(" ")
               disp("For example: the transfer function");
               disp(" ");
               k = 5;
-              num = [5 -1];
-              denom = [1 -2 6];
+              num = [5, -1];
+              denom = [1, -2, 6];
               zpout(num,denom,k);
               disp(" ")
               disp("is generated by the following commands:")
-              cmd = "num = [5 -1]";
+              cmd = "num = [5, -1]";
               run_cmd
-              cmd = "denom = [1 -2 6]";
+              cmd = "denom = [1, -2, 6]";
               run_cmd
 	      cmd = "k = 5";
 	      run_cmd
               cmd = "sys = zp2sys(num,denom,k);";
               run_cmd
 	      disp("alternatively, the system can be generated in a single command:");
-	      cmd = "sys = zp2sys([5 -1],[1 -2 6],5);";
+	      cmd = "sys = zp2sys([5, -1],[1, -2, 6],5);";
               run_cmd
               disp("Notice the output of sys: it is an Octave data structure.")
               disp("The details of its member variables are explained under")
               disp("System Representation Menu option 5 (the details of system form)")
 	      disp(" ");
               disp("The data structure can be observed with the sysout command:")
               cmd = "sysout(sys)";
               run_cmd
               disp("Notice that Octave assigns names to inputs and outputs.")
 	      disp("The user may manually select input and output names; see option 3");
 	      prompt
             elseif(zpopt == 2) # discrete time
               disp("A zero-pole form representation of a system includes vectors")
               disp("of the system poles and zeros and a scalar leading coefficient.");
               disp(" ")
               disp("Discrete-time systems require the additional parameter of a sampling period:")
-              cmd = "sys=zp2sys([5 -1],[1 2 -6],5,1e-3);";
+              cmd = "sys=zp2sys([5, -1],[1, 2, -6],5,1e-3);";
               run_cmd
               cmd = "sysout(sys)";
               run_cmd
 	      disp("The OCST recognizes discrete-time transfer functions and")
 	      disp("accordingly prints them with the frequency domain variable z.");
               disp("Notice that Octave assigns names to inputs and outputs.")
 	      disp("The user may set input and output names; see option 3");
             elseif(zpopt == 3) # user specified names
               disp("The OCST requires all signals to have names.  The OCST assigned default");
 	      disp("names to the signals in the other examples.  We may initialize a transfer");
 	      disp("function with user-specified names as follows: Consider a simple ")
 	      disp("double-integrator model of aircraft roll dynamics with ")
 	      disp("input \"aileron angle\" and output \"theta\".  A ")
 	      disp("system for this model is generated by the command")
-	      cmd = "aircraft=zp2sys([],[0 0],1,0,\"aileron angle\",\"theta\");";	      run_cmd
+	      cmd = "aircraft=zp2sys([],[0, 0],1,0,\"aileron angle\",\"theta\");";	      run_cmd
 	      disp("The sampling  time parameter 0 indicates that the system")
 	      disp("is continuous time.  A positive sampling time indicates a")
 	      disp("discrete-time system (or sampled data system).")
 	      cmd = "sysout(aircraft)";
 	      run_cmd
 	      disp("Notice that the user-selected signal names are listed.")
 	      disp("These signal names are used in OCST plots and design functions.");
 	      disp("(Run the frequency response demo to see an example of the use of ");
@@ -450,17 +450,17 @@ function sysrepdemo ()
         elseif(formopt == 7)
           help sysgettype
 	endif
 	prompt
       endwhile
     elseif(syschoice== ch_update)
       disp("The OCST system data structure format will store a system in the same format")
       disp("as that with which it was initialized.  For example, consider the following:")
-      cmd = "sys=zp2sys([1 2],[3 4 5],6)";
+      cmd = "sys=zp2sys([1, 2],[3, 4, 5],6)";
       run_cmd
       disp(" ")
       disp("Notice the internal variables in the structure include zer, pol, and k,")
       disp("the required variables for zero-pole form.  We can update the system")
       disp("to include state-space form as follows:")
       cmd = "sys = sysupdate(sys,\"ss\")";
       run_cmd
       disp(" ")
@@ -468,17 +468,17 @@ function sysrepdemo ()
       disp("the default state names stname.  sysupdate is usually used internally in")
       disp("the OCST, but can be used manually if desired.  A full description of")
       disp("sysupdate is as follows:")
       help sysupdate
       prompt
     elseif(syschoice == ch_view)
       disp("The sysout command can be used to view a system in any desired format.")
       disp("For example, consider the system created as follows:")
-      cmd = "aircraft=zp2sys(1,[0 0],1,0,\"aileron angle\",\"theta\");";	      run_cmd
+      cmd = "aircraft=zp2sys(1,[0, 0],1,0,\"aileron angle\",\"theta\");";	      run_cmd
       disp("The system may be viewed in its default format (zero-pole) as follows")
       cmd = "sysout(aircraft)";
       run_cmd
       disp(" ")
       disp("The system may be viewed in state-space or transfer function form as well:")
       cmd = "sysout(aircraft,\"ss\")";
       run_cmd
       cmd = "sysout(aircraft,\"tf\")";
