# HG changeset patch
# User jwe
# Date 1173207943 0
#      Tue Mar 06 19:05:43 2007 +0000
# Node ID a192de8c0ead167a6066494db6ea774779158010
# Parent  c2eb95ca0e2b7bca495e2d0e39833e7d8675bf94
[project @ 2007-03-06 19:05:43 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2007-03-06  David Bateman  <dbateman@free.fr>
+	    John W. Eaton  <jwe@octave.org>
+
+	* set/setdiff.m: Ignore "rows" for cell array args.
+	Handle cellstr args.
+
 2007-03-05  John W. Eaton  <jwe@octave.org>
 
 	* optimization/sqp.m: Defer first call to obj_hess until after
 	calling obj_fun.
 
 2007-03-02  Bob Weigel <rweigel@gmu.edu>
 
 	* specfun/nchoosek.m: Fix nargin check.
diff --git a/scripts/set/setdiff.m b/scripts/set/setdiff.m
--- a/scripts/set/setdiff.m
+++ b/scripts/set/setdiff.m
@@ -27,30 +27,32 @@
 ## Given the optional third argument @samp{"rows"}, return the rows in
 ## @var{a} that are not in @var{b}, sorted in ascending order by rows.
 ## @seealso{unique, union, intersect, setxor, ismember}
 ## @end deftypefn
 
 ## Author: Paul Kienzle
 ## Adapted-by: jwe
 
-function c = setdiff (a, b, byrows)
+function c = setdiff (a, b, byrows_arg)
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
+  byrows = false;
+
   if (nargin == 3)
-    if (! strcmpi (byrows, "rows"))
+    if (! strcmpi (byrows_arg, "rows"))
       error ("expecting third argument to be \"rows\"");
+    elseif (iscell (a) || iscell (b))
+      warning ("setdiff: \"rows\" not valid for cell arrays");
     else
       byrows = true;
     endif
-  else
-    byrows = false;
   endif
 
   if (byrows)
     c = unique (a, "rows");
     if (! isempty (c) && ! isempty (b))
       ## Form a and b into combined set.
       b = unique (b, "rows");
       [dummy, idx] = sortrows ([c; b]);
@@ -61,23 +63,29 @@ function c = setdiff (a, b, byrows)
   else
     c = unique (a);
     if (! isempty (c) && ! isempty (b))
       ## Form a and b into combined set.
       b = unique (b);
       [dummy, idx] = sort ([c(:); b(:)]);
       ## Eliminate those elements of a that are the same as in b.
       n = length (dummy);
-      c(idx(find (dummy(1:n-1) == dummy(2:n)))) = [];
+      if (iscellstr (dummy))
+	c(idx(find (strcmp (dummy(1:n-1), dummy(2:n))))) = [];
+      else
+	c(idx(find (dummy(1:n-1) == dummy(2:n)))) = [];
+      endif
       ## Reshape if necessary.
       if (size (c, 1) != 1 && size (b, 1) == 1)
 	c = c.';
       endif
     endif
   endif
   
 endfunction
   
 %!assert(setdiff(["bb";"zz";"bb";"zz"],["bb";"cc";"bb"],"rows"), "zz")
 %!assert(setdiff(["b";"z";"b";"z"],["b";"c";"b"],"rows"), "z")
 %!assert(setdiff(["b";"z";"b";"z"],["b";"c";"b"]), "z")
 %!assert(setdiff([1, 1; 2, 2; 3, 3; 4, 4], [1, 1; 2, 2; 4, 4], "rows"), [3 3])
 %!assert(setdiff([1; 2; 3; 4], [1; 2; 4], "rows"), 3)
+%!assert(setdiff([1, 2; 3, 4], [1, 2; 3, 6], "rows"), [3, 6])
+%!assert(setdiff({"one","two";"three","four"},{"one","two";"three","six"}), {"four"})
