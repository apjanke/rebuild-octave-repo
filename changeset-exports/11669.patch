# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1204592417 18000
#      Mon Mar 03 20:00:17 2008 -0500
# Branch release-3-0-x
# Node ID a6e08ecb405003da4e4fcf2ab1a205e029437f8e
# Parent  8ac2994e45966f5bf3af201ad3f15621dee23a30
Treat repeated indices in the sparse assignments

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2008-03-03  David Bateman  <dbateman@free.fr>
+
+	* Sparse.cc (assign1, assign1): Take care of repeated index
+	values. Adapt the test code to check for these cases.
+
 2008-03-03  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dMatrix.cc (Matrix::lssolve): Also avoid dgelsd lwork query bug
 	in lssolve method that accepts column vector argument.  Correct
 	calculation of nlvl.
 	* CMatrix.cc (ComplexMatrix::lssolve): Likewise, for zgelsd.
 
 2008-02-26  John W. Eaton  <jwe@octave.org>
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -2146,16 +2146,18 @@ assign1 (Sparse<LT>& lhs, const Sparse<R
 	      rhs_idx[i] = i;
 
 	  // First count the number of non-zero elements
 	  for (octave_idx_type i = 0; i < n; i++)
 	    {
 	      OCTAVE_QUIT;
 
 	      octave_idx_type ii = lhs_idx.elem (i);
+	      if (i < n - 1 && lhs_idx.elem (i + 1) == ii)
+		continue;
 	      if (ii < lhs_len && c_lhs.elem(ii) != LT ())
 		new_nzmx--;
 	      if (rhs.elem(rhs_idx[i]) != RT ())
 		new_nzmx++;
 	    }
 
 	  if (nr > 1)
 	    {
@@ -2258,16 +2260,17 @@ assign1 (Sparse<LT>& lhs, const Sparse<R
 	    }
 	}
       else if (rhs_len == 1)
 	{
 	  octave_idx_type new_nzmx = lhs.nnz ();
 	  RT scalar = rhs.elem (0);
 	  bool scalar_non_zero = (scalar != RT ());
 	  lhs_idx.sort (true);
+	  n = lhs_idx.length (n);
 
 	  // First count the number of non-zero elements
 	  if (scalar != RT ())
 	    new_nzmx += n;
 	  for (octave_idx_type i = 0; i < n; i++)
 	    {
 	      OCTAVE_QUIT;
 
@@ -2289,16 +2292,22 @@ assign1 (Sparse<LT>& lhs, const Sparse<R
 
 	      octave_idx_type j = 0;
 	      octave_idx_type jj = lhs_idx.elem(j);
 
 	      octave_idx_type kk = 0;
 
 	      while (j < n || i < nz)
 		{
+		  if (j < n - 1 && lhs_idx.elem (j + 1) == jj)
+		    {
+		      j++;
+		      jj = lhs_idx.elem (j);
+		      continue;
+		    }
 		  if (j == n || (i < nz && ii < jj))
 		    {
 		      tmp.xdata (kk) = c_lhs.data (i);
 		      tmp.xridx (kk++) = ii;
 		      if (++i < nz)
 			ii = c_lhs.ridx(i);
 		    }
 		  else
@@ -2331,16 +2340,22 @@ assign1 (Sparse<LT>& lhs, const Sparse<R
 	      octave_idx_type j = 0;
 	      octave_idx_type jj = lhs_idx.elem(j);
 
 	      octave_idx_type kk = 0;
 	      octave_idx_type ic = 0;
 
 	      while (j < n || i < nz)
 		{
+		  if (j < n - 1 && lhs_idx.elem (j + 1) == jj)
+		    {
+		      j++;
+		      jj = lhs_idx.elem (j);
+		      continue;
+		    }
 		  if (j == n || (i < nz && ii < jj))
 		    {
 		      while (ic <= ii)
 			tmp.xcidx (ic++) = kk;
 		      tmp.xdata (kk) = c_lhs.data (i);
 		      i++;
 		      while (ii < nc && c_lhs.cidx(ii+1) <= i)
 			ii++;
@@ -2485,17 +2500,19 @@ assign (Sparse<LT>& lhs, const Sparse<RT
 	    }
 	  else
 	    {
 	      if (rhs_nr == 1 && rhs_nc == 1 && n >= 0 && m >= 0)
 		{
 		  if (n > 0 && m > 0)
 		    {
 		      idx_i.sort (true);
+		      n = idx_i.length (n);
 		      idx_j.sort (true);
+		      m = idx_j.length (m);
 
 		      octave_idx_type max_row_idx = idx_i_is_colon ? rhs_nr : 
 			idx_i.max () + 1;
 		      octave_idx_type max_col_idx = idx_j_is_colon ? rhs_nc : 
 			idx_j.max () + 1;
 		      octave_idx_type new_nr = max_row_idx > lhs_nr ? 
 			max_row_idx : lhs_nr;
 		      octave_idx_type new_nc = max_col_idx > lhs_nc ? 
@@ -2748,16 +2765,24 @@ assign (Sparse<LT>& lhs, const Sparse<RT
 						     c_lhs.cidx(j));
 			      octave_idx_type pp = (ppp < ppi ? 
 						c_lhs.ridx(c_lhs.cidx(j)+ppp) :
 						new_nr);
 			      while (ppp < ppi || iii < n)
 				{
 				  if (iii < n && ii <= pp)
 				    {
+				      if (iii < n - 1 && 
+					  idx_i.elem (iii + 1) == ii)
+					{
+					  iii++;
+					  ii = idx_i.elem(iii);
+					  continue;
+					}
+
 				      RT rtmp = rhs.elem (rhs_idx_i[iii], 
 							  rhs_idx_j[jji]);
 				      if (rtmp != RT ())
 					{
 					  stmp.data(kk) = rtmp;
 					  stmp.ridx(kk++) = ii;
 					}
 				      if (ii == pp)
@@ -2956,16 +2981,18 @@ assign (Sparse<LT>& lhs, const Sparse<RT
 		      rhs_idx[i] = i;
 
 		  // First count the number of non-zero elements
 		  for (octave_idx_type i = 0; i < len; i++)
 		    {
 		      OCTAVE_QUIT;
 		      
 		      octave_idx_type ii = idx_i.elem (i);
+		      if (i < len - 1 && idx_i.elem (i + 1) == ii)
+			continue;
 		      if (ii < lhs_len && c_lhs.elem(ii) != LT ())
 			new_nzmx--;
 		      if (rhs.elem(rhs_idx[i]) != RT ())
 			new_nzmx++;
 		    }
 
 		  Sparse<LT> stmp (lhs_nr, lhs_nc, new_nzmx);
 
@@ -3034,16 +3061,17 @@ assign (Sparse<LT>& lhs, const Sparse<RT
 
 		  lhs = stmp;
 		}
 	      else if (rhs_nr == 1 && rhs_nc == 1)
 		{
 		  RT scalar = rhs.elem (0, 0);
 		  octave_idx_type new_nzmx = lhs_nz;
 		  idx_i.sort (true);
+		  len = idx_i.length (len);
 
 		  // First count the number of non-zero elements
 		  if (scalar != RT ())
 		    new_nzmx += len;
 		  for (octave_idx_type i = 0; i < len; i++)
 		    {
 		      OCTAVE_QUIT;
 		      octave_idx_type ii = idx_i.elem (i);
@@ -3068,16 +3096,25 @@ assign (Sparse<LT>& lhs, const Sparse<RT
 		  octave_idx_type jr = jj % lhs_nr;
 		  octave_idx_type jc = (jj - jr) / lhs_nr;
 
 		  octave_idx_type kk = 0;
 		  octave_idx_type kc = 0;
 
 		  while (j < len || i < lhs_nz)
 		    {
+		      if (j < len - 1 && idx_i.elem (j + 1) == jj)
+			{
+			  j++;
+			  jj = idx_i.elem (j);
+			  jr = jj % lhs_nr;
+			  jc = (jj - jr) / lhs_nr;
+			  continue;
+			}
+
 		      if (j == len || (i < lhs_nz && ii < jj))
 			{
 			  while (kc <= ic)
 			    stmp.xcidx (kc++) = kk;
 			  stmp.xdata (kk) = c_lhs.data (i);
 			  stmp.xridx (kk++) = c_lhs.ridx (i);
 			  i++;
 			  while (ic < lhs_nc && i >= c_lhs.cidx(ic+1))
