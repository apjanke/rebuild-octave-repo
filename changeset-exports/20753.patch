# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1448475251 -3600
#      Wed Nov 25 19:14:11 2015 +0100
# Node ID 7d6f385419020d6f243edb5517eaeebb15db3e85
# Parent  c5e8863858b476499f2b5fe23e66eefaa9221813
default encoding for editor on non windows systems is utf-8 (bug #45597)

* file-editor-tab.cc (load_file, save_file): default encoding is SYSTEM
  on on windows and UTF-8 otherwise

* settings-dialog.cc (write_changed_settings): write current text from combo
  box into settings file without further checking for system;
  (init_combo_encoding): default is SYSTEM on windows and UTF-8 otherwise
  when reading from settings file, defaults are prepended to the top
  of the combo box

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -1354,18 +1354,23 @@ file_editor_tab::load_file (const QStrin
   QFile file (file_to_load);
   if (!file.open (QFile::ReadOnly))
     return file.errorString ();
 
   // read the file
   QTextStream in (&file);
   // set the desired codec
   QSettings *settings = resource_manager::get_settings ();
+#if defined (Q_OS_WIN32)
   QString encoding = settings->value ("editor/default_encoding","SYSTEM")
                                .toString ();
+#else
+  QString encoding = settings->value ("editor/default_encoding","UTF-8")
+                               .toString ();
+#endif
   QTextCodec *codec = QTextCodec::codecForName (encoding.toAscii ());
   in.setCodec(codec);
 
   QApplication::setOverrideCursor (Qt::WaitCursor);
   _edit_area->setText (in.readAll ());
   _edit_area->setEolMode (detect_eol_mode ());
   QApplication::restoreOverrideCursor ();
 
@@ -1515,18 +1520,23 @@ file_editor_tab::save_file (const QStrin
       return;
     }
 
   // save the contents into the file
   QTextStream out (&file);
 
   // set the desired codec
   QSettings *settings = resource_manager::get_settings ();
+#if defined (Q_OS_WIN32)
   QString encoding = settings->value ("editor/default_encoding","SYSTEM")
                                .toString ();
+#else
+  QString encoding = settings->value ("editor/default_encoding","UTF-8")
+                               .toString ();
+#endif
   QTextCodec *codec = QTextCodec::codecForName (encoding.toAscii ());
   out.setCodec(codec);
 
   QApplication::setOverrideCursor (Qt::WaitCursor);
   out << _edit_area->text ();
   out.flush ();
   QApplication::restoreOverrideCursor ();
   file.flush ();
diff --git a/libgui/src/settings-dialog.cc b/libgui/src/settings-dialog.cc
--- a/libgui/src/settings-dialog.cc
+++ b/libgui/src/settings-dialog.cc
@@ -798,20 +798,18 @@ settings_dialog::write_changed_settings 
   settings->setValue ("editor/show_white_space_indent",
                       ui->editor_ws_indent_checkbox->isChecked ());
   settings->setValue ("editor/show_eol_chars",
                       ui->cb_show_eol->isChecked ());
   settings->setValue ("editor/show_hscroll_bar",
                       ui->cb_show_hscrollbar->isChecked ());
   settings->setValue ("editor/default_eol_mode",
                       ui->combo_eol_mode->currentIndex ());
-  QString encoding = ui->editor_combo_encoding->currentText ();
-  if (encoding == tr ("System default"))
-    encoding = "SYSTEM";
-  settings->setValue ("editor/default_encoding", encoding);
+  settings->setValue ("editor/default_encoding",
+                      ui->editor_combo_encoding->currentText ());
   settings->setValue ("editor/auto_indent",
                       ui->editor_auto_ind_checkbox->isChecked ());
   settings->setValue ("editor/tab_indents_line",
                       ui->editor_tab_ind_checkbox->isChecked ());
   settings->setValue ("editor/backspace_unindents_line",
                       ui->editor_bs_unind_checkbox->isChecked ());
   settings->setValue ("editor/show_indent_guides",
                       ui->editor_ind_guides_checkbox->isChecked ());
@@ -1033,36 +1031,35 @@ settings_dialog::init_combo_encoding (QS
   QStringList all_codecs;
   foreach (int mib, all_mibs)
     {
       QTextCodec *c = QTextCodec::codecForMib (mib);
       all_codecs << c->name ().toUpper ();
     }
   all_codecs.removeDuplicates ();
 
-  // remove the "system" entry
-  int idx = all_codecs.indexOf ("SYSTEM");
-  if (idx >= 0)
-    all_codecs.removeAt (idx);
-
   // sort and prepend meaningfull text for system's default codec
+#if defined (Q_OS_WIN32)
+  QString def_enc = "SYSTEM";
+#else
+  QString def_enc = "UTF-8";
+#endif
   qSort (all_codecs);
-  all_codecs.prepend (tr ("System default"));
+  ui->editor_combo_encoding->insertSeparator (0);
+  ui->editor_combo_encoding->insertItem (0, def_enc);
 
   // get the value from the settings file (system is default)
-  QString encoding = settings->value ("editor/default_encoding","SYSTEM")
+  QString encoding = settings->value ("editor/default_encoding",def_enc)
                                .toString ();
-  if (encoding == "SYSTEM")
-    encoding = tr ("System default");
 
   // fill the combo box and select the current item or system if
   // current item from the settings file can not be found
   foreach (QString c, all_codecs)
     ui->editor_combo_encoding->addItem (c);
-  idx = ui->editor_combo_encoding->findText (encoding);
+  int idx = ui->editor_combo_encoding->findText (encoding);
   if (idx >= 0)
     ui->editor_combo_encoding->setCurrentIndex (idx);
   else
     ui->editor_combo_encoding->setCurrentIndex (0);
 
   ui->editor_combo_encoding->setMaxVisibleItems (12);
 }
 
