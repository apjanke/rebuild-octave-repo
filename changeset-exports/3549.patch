# HG changeset patch
# User jwe
# Date 949541402 0
#      Thu Feb 03 01:30:02 2000 +0000
# Node ID 03025e79d8b9c1151c97f81550f96e7d337790a2
# Parent  ab7fa5a8f23fff6c56482ad70ccc2ea4d013d3f3
[project @ 2000-02-03 01:28:24 by jwe]

diff --git a/src/DLD-FUNCTIONS/besselj.cc b/src/DLD-FUNCTIONS/besselj.cc
--- a/src/DLD-FUNCTIONS/besselj.cc
+++ b/src/DLD-FUNCTIONS/besselj.cc
@@ -378,20 +378,20 @@ derivatives.\n\
   K   Function   Scale factor (if a third argument is supplied)\n\
  ---  --------   ----------------------------------------------\n\
   0   Ai (Z)     exp ((2/3) * Z * sqrt (Z))\n\
   1   dAi(Z)/dZ  exp ((2/3) * Z * sqrt (Z))\n\
   2   Bi (Z)     exp (-abs (real ((2/3) * Z *sqrt (Z))))\n\
   3   dBi(Z)/dZ  exp (-abs (real ((2/3) * Z *sqrt (Z))))\n\
 @end example\n\
 \n\
-The function call @code{airy (@var{z})} is equivalent to
+The function call @code{airy (@var{z})} is equivalent to\n\
 @code{airy (0, @var{z})}.\n\
 \n\
-The result is the same size as @var{z}.
+The result is the same size as @var{z}.\n\
 \n\
 If requested, @var{ierr} contains the following status information and\n\
 is the same size as the result.\n\
 \n\
 @enumerate 0\n\
 @item\n\
 Normal return.\n\
 @item\n\
diff --git a/src/DLD-FUNCTIONS/log.cc b/src/DLD-FUNCTIONS/log.cc
--- a/src/DLD-FUNCTIONS/log.cc
+++ b/src/DLD-FUNCTIONS/log.cc
@@ -148,17 +148,17 @@ needs to be improved to be more robust.\
     {
       gripe_wrong_type_arg ("logm", arg);
     }
 
   return retval;
 }
 
 DEFUN_DLD (sqrtm, args, ,
- "-*- texinfo -*-
+ "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} sqrtm (@var{a})\n\
 Compute the matrix square root of the square matrix @var{a}.  Note that\n\
 this is currently implemented in terms of an eigenvalue expansion and\n\
 needs to be improved to be more robust.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
diff --git a/src/unwind-prot.cc b/src/unwind-prot.cc
--- a/src/unwind-prot.cc
+++ b/src/unwind-prot.cc
@@ -119,17 +119,17 @@ saved_variable::saved_variable (int *p, 
   size = sizeof (int);  // Is this necessary?
 }
 
 saved_variable::saved_variable (std::string *p, const std::string& v)
 {
   type_tag = string_type;
   gen_ptr = p;
   str_value = new std::string (v);
-  size = sizeof (string);  // Is this necessary?
+  size = sizeof (std::string);  // Is this necessary?
 }
 
 saved_variable::saved_variable (void **p, void *v)
 {
   type_tag = generic_ptr;
   ptr_to_gen_ptr = p;
   gen_ptr_value = v;
   size = sizeof (void *);
