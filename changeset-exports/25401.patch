# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1526964795 14400
#      Tue May 22 00:53:15 2018 -0400
# Node ID 6f6479125d80f5f3c0b2d28df1d9d9aecea69aab
# Parent  d423ce60f5c835013032221a0098c0aa342f3a5b
eliminate some globals from tree_evaluator class

* pt-eval.cc (tree_evaluator::m_statement_context): New member
variable, replaces static data member statement_context.  Change all uses.

diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -62,24 +62,22 @@ along with Octave; see the file COPYING.
 namespace octave
 {
   size_t tree_evaluator::current_frame = 0;
 
   bool tree_evaluator::debug_mode = false;
 
   bool tree_evaluator::quiet_breakpoint_flag = false;
 
-  tree_evaluator::stmt_list_type tree_evaluator::statement_context
-    = tree_evaluator::other;
-
   // Normal evaluator.
 
   void
   tree_evaluator::reset (void)
   {
+    m_statement_context = SC_OTHER;
     m_result_type = RT_UNDEFINED;
     m_expr_result_value = octave_value ();
     m_expr_result_value_list = octave_value_list ();
     m_lvalue_list_stack.clear ();
     m_nargout_stack.clear ();
   }
 
   void
@@ -423,18 +421,18 @@ namespace octave
 
     if (m_in_loop_command)
       tree_continue_command::continuing = 1;
   }
 
   bool
   tree_evaluator::statement_printing_enabled (void)
   {
-    return ! (m_silent_functions && (statement_context == function
-                                     || statement_context == script));
+    return ! (m_silent_functions && (m_statement_context == SC_FUNCTION
+                                     || m_statement_context == SC_SCRIPT));
   }
 
   void
   tree_evaluator::reset_debug_state (void)
   {
     debug_mode = m_bp_table.have_breakpoints () || Vdebugging;
 
     m_dbstep_flag = 0;
@@ -1198,17 +1196,17 @@ namespace octave
 
     std::string file_name = user_script.fcn_file_name ();
 
     if (args.length () != 0 || nargout != 0)
       error ("invalid call to script %s", file_name.c_str ());
 
     tree_statement_list *cmd_list = user_script.body ();
 
-    if (cmd_list)
+    if (! cmd_list)
       return retval;
 
     unwind_protect frame;
 
     // XXX FIXME
     frame.add_method (user_script, &octave_user_script::set_call_depth,
                       user_script.call_depth ());
     user_script.increment_call_depth ();
@@ -1223,18 +1221,18 @@ namespace octave
     // This is *not* intended as a general-purpose on-cleanup mechanism,
 
     frame.add_method (m_call_stack, &call_stack::pop);
 
     // Update line number even if debugging.
     frame.protect_var (Vtrack_line_num);
     Vtrack_line_num = true;
 
-    frame.protect_var (tree_evaluator::statement_context);
-    tree_evaluator::statement_context = tree_evaluator::script;
+    frame.protect_var (m_statement_context);
+    m_statement_context = SC_SCRIPT;
 
     profiler::enter<octave_user_script> block (m_profiler, user_script);
 
     symbol_scope script_scope = user_script.scope ();
     frame.add_method (script_scope, &symbol_scope::unbind_script_symbols);
     script_scope.bind_script_symbols (get_current_scope ());
 
     if (echo ())
@@ -1393,18 +1391,18 @@ namespace octave
                                        nargout,
                                        user_function.all_va_args (args));
 
     frame.add_method (&user_function,
                       &octave_user_function::restore_warning_states);
 
     // Evaluate the commands that make up the function.
 
-    frame.protect_var (tree_evaluator::statement_context);
-    tree_evaluator::statement_context = tree_evaluator::function;
+    frame.protect_var (m_statement_context);
+    m_statement_context = SC_FUNCTION;
 
     {
       profiler::enter<octave_user_function> block (m_profiler, user_function);
 
       if (echo ())
         push_echo_state (frame, tree_evaluator::ECHO_FUNCTIONS,
                          user_function.fcn_file_name ());
 
@@ -1575,17 +1573,18 @@ namespace octave
 
   void
   tree_evaluator::visit_if_command_list (tree_if_command_list& lst)
   {
     for (tree_if_clause *tic : lst)
       {
         tree_expression *expr = tic->condition ();
 
-        if (statement_context == function || statement_context == script)
+        if (m_statement_context == SC_FUNCTION
+            || m_statement_context == SC_SCRIPT)
           m_call_stack.set_location (tic->line (), tic->column ());
 
         if (debug_mode && ! tic->is_else_clause ())
           do_breakpoint (tic->is_breakpoint (true));
 
         if (tic->is_else_clause () || is_logically_true (expr, "if"))
           {
             tree_statement_list *stmt_lst = tic->commands ();
@@ -2363,17 +2362,18 @@ namespace octave
     // Act like dbcont.
 
     if (Vdebugging && m_call_stack.current_frame () == current_frame)
       {
         Vdebugging = false;
 
         reset_debug_state ();
       }
-    else if (statement_context == function || statement_context == script
+    else if (m_statement_context == SC_FUNCTION
+             || m_statement_context == SC_SCRIPT
              || m_in_loop_command)
       tree_return_command::returning = 1;
   }
 
   void
   tree_evaluator::visit_return_list (tree_return_list&)
   {
     panic_impossible ();
@@ -2462,17 +2462,18 @@ namespace octave
   void
   tree_evaluator::visit_statement (tree_statement& stmt)
   {
     tree_command *cmd = stmt.command ();
     tree_expression *expr = stmt.expression ();
 
     if (cmd || expr)
       {
-        if (statement_context == function || statement_context == script)
+        if (m_statement_context == SC_FUNCTION
+            || m_statement_context == SC_SCRIPT)
           {
             // Skip commands issued at a debug> prompt to avoid disturbing
             // the state of the program we are debugging.
 
             if (Vtrack_line_num)
               m_call_stack.set_location (stmt.line (), stmt.column ());
           }
 
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -121,20 +121,20 @@ namespace octave
     private:
 
       std::stack<T> m_stack;
     };
 
     typedef void (*decl_elt_init_fcn) (tree_decl_elt&);
 
     tree_evaluator (interpreter& interp)
-      : m_interpreter (interp), m_result_type (RT_UNDEFINED),
-        m_expr_result_value (), m_expr_result_value_list (),
-        m_lvalue_list_stack (), m_nargout_stack (),
-        m_bp_table (*this), m_call_stack (interp),
+      : m_interpreter (interp), m_statement_context (SC_OTHER),
+        m_result_type (RT_UNDEFINED), m_expr_result_value (),
+        m_expr_result_value_list (), m_lvalue_list_stack (),
+        m_nargout_stack (), m_bp_table (*this), m_call_stack (interp),
         m_profiler (), m_max_recursion_depth (256),
         m_silent_functions (false), m_string_fill_char (' '),
         m_PS4 ("+ "), m_dbstep_flag (0), m_echo (ECHO_OFF),
         m_echo_state (false), m_echo_file_name (), m_echo_file_pos (1),
         m_echo_files (), m_in_loop_command (false),
         m_indexed_object (nullptr), m_index_position (0), m_num_indices (0)
     { }
 
@@ -262,24 +262,21 @@ namespace octave
 
     static bool debug_mode;
 
     static bool quiet_breakpoint_flag;
 
     // Possible types of evaluation contexts.
     enum stmt_list_type
     {
-      function,  // function body
-      script,    // script file
-      other      // command-line input or eval string
+      SC_FUNCTION,  // function body
+      SC_SCRIPT,    // script file
+      SC_OTHER      // command-line input or eval string
     };
 
-    // The context for the current evaluation.
-    static stmt_list_type statement_context;
-
     Matrix ignored_fcn_outputs (void) const;
 
     bool isargout (int nargout, int iout) const;
 
     void isargout (int nargout, int nout, bool *isargout) const;
 
     const std::list<octave_lvalue> * lvalue_list (void) const
     {
@@ -507,16 +504,19 @@ namespace octave
     bool echo_this_file (const std::string& file, int type) const;
 
     void echo_code (size_t line);
 
     void final_index_error (index_exception& e, const tree_expression *expr);
 
     interpreter& m_interpreter;
 
+    // The context for the current evaluation.
+    stmt_list_type m_statement_context;
+
     result_type m_result_type;
     octave_value m_expr_result_value;
     octave_value_list m_expr_result_value_list;
 
     value_stack<const std::list<octave_lvalue>*> m_lvalue_list_stack;
 
     value_stack<int> m_nargout_stack;
 
