# HG changeset patch
# User jwe
# Date 939841238 0
#      Wed Oct 13 19:00:38 1999 +0000
# Node ID 518ea57df2c44afd91f00d318d1548e86392d3b8
# Parent  aaaa20d31a5feb4d9f9ffa0a5efa4e4851160faf
[project @ 1999-10-13 19:00:38 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+1999-10-13  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* control/bode.m: Allow optional 5th arg to specify plot style.
+
 Wed Sep 22 22:12:03 1999 A. Scottedward Hodel <a.s.hodel@eng.auburn.edu>
 
 	* linear-algebra/krylov.m: Correctly handle case of V having full
 	rank when V has more columns than rows.
 
 Mon Sep 20 23:04:57 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* general/linspace.m, linear-algebra/pinv.m: Delete.
diff --git a/scripts/control/bode.m b/scripts/control/bode.m
--- a/scripts/control/bode.m
+++ b/scripts/control/bode.m
@@ -11,18 +11,18 @@
 # ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 # FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
 # for more details.
 # 
 # You should have received a copy of the GNU General Public License 
 # along with Octave; see the file COPYING.  If not, write to the Free 
 # Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. 
  
-function [mag,phase,w] = bode(sys,w,outputs,inputs)
-# [mag,phase,w] = bode(sys[,w,outputs,inputs])
+function [mag,phase,w] = bode(sys,w,outputs,inputs,plot_style)
+# [mag,phase,w] = bode(sys[,w,outputs,inputs,plot_style])
 # Produce Bode plots of a system
 #
 # Compute the frequency response of a system.
 # inputs:
 #   sys: system data structure (must be either purely continuous or discrete;
 #	 see is_digital)
 #   w: frequency values for evaluation.
 #      if sys is continuous, then bode evaluates G(jw)
@@ -35,16 +35,20 @@ function [mag,phase,w] = bode(sys,w,outp
 #             range based on the breakpoint locations of the frequencies.
 #          (2) if sys is discrete time, the frequency range is limited
 #              to jwT in [0,2p*pi]
 #          (3) A "smoothing" routine is used to ensure that the plot phase does
 #              not change excessively from point to point and that singular
 #              points (e.g., crossovers from +/- 180) are accurately shown.
 #   outputs, inputs: the indices of the output(s) and input(s) to be used in
 #     the frequency response; see sysprune.
+#   plot_style: An optional argument specifying the type of plot to
+#               produce (if plotting is being done).  Valid values are
+#               "dB" or "mag".  If omitted, "dB" is assumed.
+#
 # outputs:
 #    mag, phase: the magnitude and phase of the frequency response
 #       G(jw) or G(exp(jwT)) at the selected frequency values.
 #    w: the vector of frequency values used
 # If no output arguments are given, bode plots the results to the screen.
 # Descriptive labels are automatically placed.  See xlabel, ylable, title,
 # and replot.
 #
@@ -54,28 +58,39 @@ function [mag,phase,w] = bode(sys,w,outp
 # Written by John Ingram  July 10th, 1996
 # Based on previous code
 # By R. Bruce Tenison, July 13, 1994
 # Modified by David Clem November 13, 1994
 # again by A. S. Hodel July 1995 (smart plot range, etc.)
 # Modified by Kai P. Mueller September 28, 1997 (multiplot mode)
 
   # check number of input arguments given
-  if (nargin < 1 | nargin > 4)
-    usage("[mag,phase,w] = bode(sys[,w,outputs,inputs])");
+  if (nargin < 1 | nargin > 5)
+    usage("[mag,phase,w] = bode(sys[,w,outputs,inputs,plot_style])");
   endif
   if(nargin < 2)
     w = [];
   endif
   if(nargin < 3)
     outputs = [];
   endif
   if(nargin < 4)
     inputs = [];
   endif
+  if(nargin < 5)
+    plot_style = "dB";
+  endif
+
+  if (strcmp (plot_style, "dB"))
+    do_db_plot = 1;
+  elseif (strcmp (plot_style, "mag"))
+    do_db_plot = 0;
+  else
+    error ("bode: invalid value of plot_style specified");
+  endif
 
   [f, w] = bodquist(sys,w,outputs,inputs,"bode");
 
   [stname,inname,outname] = sysgetsignals(sys);
   systsam = sysgettsam(sys);
 
   # Get the magnitude and phase of f.
   mag = abs(f);
@@ -108,29 +123,33 @@ function [mag,phase,w] = bode(sys,w,outp
     else
       title([ "||Y(", tistr, ")/U(", tistr, ")||"]);
       disp("MIMO plot from")
       disp(outlist(inname,"	"));
       disp("to")
       disp(outlist(outname,"	"));
     endif
     wv = [min(w), max(w)];
-    if(max(mag) > 0)
+    if(do_db_plot && max(mag) > 0)
       ylabel("Gain in dB");
       md = 20*log10(mag);
     else
       ylabel("Gain |Y/U|")
       md = mag;
     endif
 
     axvec = axis2dlim([vec(w),vec(md)]);
     axvec(1:2) = wv;
     axis(axvec);
     grid("on");
-    semilogx(w,md);
+    if (do_db_plot)
+      semilogx(w,md);
+    else
+      loglog(w,md);
+    endif
     if (is_siso(sys))
       if (gnuplot_has_multiplot)
         subplot(2,1,2);
       else
         prompt('Press any key for phase plot');
       endif
       axvec = axis2dlim([vec(w),vec(phase)]);
       axvec(1:2) = wv;
