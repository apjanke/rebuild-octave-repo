# HG changeset patch
# User Rik <rik@octave.org>
# Date 1519756761 28800
#      Tue Feb 27 10:39:21 2018 -0800
# Node ID daf61c7dfcae34d6d6c70ee139ea92ceb1f9094b
# Parent  2dc04b6e1740ca9d01e89eac598c8482596c4333
Change default status of pager to "off" (bug #53217).

* NEWS: Announce change, and workaround for users who want pager enabled.

* pager.cc (Vpage_screen_output): Change static variable initialization to false.

* intro.txi: Delete paragraph mentioning that output is always sent through
pager.

* io.txi: Rewrite section on Paging Screen Output.

* file-io.cc (Fstdout): Change documentation to say that stream MAY be filtered
through a pager.

* toplev.cc (Fsystem): Rewrite documentation showing how to use system command
with a pager.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -38,17 +38,17 @@ Summary of important user-visible change
     but would always return a column vector.
 
  ** The "names" option used in regular expressions now returns a struct
     array, rather than a struct with a cell array for each field.  This
     change was made for Matlab compatibility.
 
  ** The quadcc function now uses both absolute tolerance and relative
     tolerance to determine the stopping criteria for an integration.
-    To be compatible with other quadXXX functions such as quadgk the
+    To be compatible with other quadXXX functions, such as quadgk, the
     calling syntax has changed to
 
       quadcc (f, a, b, [AbsTol, [RelTol]])
 
     To update existing code, change instances of RelTol to [0, RelTol].
 
       quadcc (f, a, b, tol) => quadcc (f, a, b, [0, tol])
 
@@ -61,16 +61,22 @@ Summary of important user-visible change
 
  ** The qr function now returns a standard factorization unless
     explicitly instructed to perform an economy factorization by using a
     final argument of 0.
 
  ** The Qt graphics toolkit now supports offscreen printing without osmesa
     if Octave was built with Qt >= 5.1.
 
+ ** The built-in pager for display of large data is now disabled by
+    default.  To re-enable it for every Octave session add the following
+    to your .octaverc file:
+
+      more on;
+
  ** The FLTK toolkit is no longer prioritized for development.  The
     number of Octave Maintainers is too small to support three different
     graphic toolkits.  New development will target the Qt toolkit.
     While no longer prioritized, the FLTK toolkit is not deprecated and
     there is no schedule for its removal.
 
  ** The graphic object property "PickableParts" has been implemented
     which controls whether an object can accept mouse clicks.
diff --git a/doc/interpreter/intro.txi b/doc/interpreter/intro.txi
--- a/doc/interpreter/intro.txi
+++ b/doc/interpreter/intro.txi
@@ -394,20 +394,16 @@ For example,
 
 @example
 help plot
 @end example
 
 @noindent
 will display the help text for the @code{plot} function.
 
-Octave sends output that is too long to fit on one screen through a
-pager like @code{less} or @code{more}.  Type a @key{RET} to advance one
-line, a @key{SPC} to advance one page, and @key{q} to quit the pager.
-
 The part of Octave's help facility that allows you to read the complete
 text of the printed manual from within Octave normally uses a separate
 program called Info.  When you invoke Info you will be put into a menu
 driven program that contains the entire Octave manual.  Help for using
 Info is provided in this manual, @pxref{Getting Help}.
 
 @subsection Editing What You Have Typed
 
diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -74,35 +74,34 @@ values with @code{disp} and through the 
 
 @menu
 * Paging Screen Output::
 @end menu
 
 @node Paging Screen Output
 @subsubsection Paging Screen Output
 
-When running interactively, Octave normally sends any output intended
-for your terminal that is more than one screen long to a paging program,
-such as @code{less} or @code{more}.  This avoids the problem of having a
-large volume of output stream by before you can read it.  With
-@code{less} (and some versions of @code{more}) you can also scan forward
-and backward, and search for specific items.
+When running interactively, Octave normally sends all output directly to the
+Command Window.  However, when using the CLI version of Octave this can create
+a problem because large volumes of data will stream by before you can read
+them.  In such cases, it is better to use a paging program such as @code{less}
+or @code{more} which displays just one screenful at a time.  With @code{less}
+(and some versions of @code{more}) you can also scan forward and backward, and
+search for specific items.  The pager is enabled by the command @code{more on}.
 
-Normally, no output is displayed by the pager until just before Octave
-is ready to print the top level prompt, or read from the standard input
-(for example, by using the @code{fscanf} or @code{scanf} functions).
-This means that there may be some delay before any output appears on
-your screen if you have asked Octave to perform a significant amount of
-work with a single command statement.  The function @code{fflush} may be
-used to force output to be sent to the pager (or any other stream)
-immediately.
+Normally, no output is displayed by the pager until just before Octave is ready
+to print the top level prompt, or read from the standard input (for example, by
+using the @code{fscanf} or @code{scanf} functions).  This means that there may
+be some delay before any output appears on your screen if you have asked Octave
+to perform a significant amount of work with a single command statement.  The
+function @code{fflush} may be used to force output to be sent to the pager (or
+any other stream) immediately.
 
-You can select the program to run as the pager using the @env{PAGER}
-function, and you can turn paging off by using the function
-@code{more}.
+You can select the program to run as the pager with the @code{PAGER} function,
+and configure the pager itself with the @code{PAGER_FLAGS} function.
 
 @DOCSTRING(more)
 
 @DOCSTRING(PAGER)
 
 @DOCSTRING(PAGER_FLAGS)
 
 @DOCSTRING(page_screen_output)
diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -3157,18 +3157,18 @@ line editing functions.
   return const_value ("stdin", args, streams.stdin_file ());
 }
 
 DEFMETHODX ("stdout", Fstdout, interp, args, ,
             doc: /* -*- texinfo -*-
 @deftypefn {} {} stdout ()
 Return the numeric value corresponding to the standard output stream.
 
-Data written to the standard output is normally filtered through the pager.
-@seealso{stdin, stderr}
+Data written to the standard output may be filtered through the pager.
+@seealso{stdin, stderr, page_screen_output}
 @end deftypefn */)
 {
   octave::stream_list& streams = interp.get_stream_list ();
 
   return const_value ("stdout", args, streams.stdout_file ());
 }
 
 DEFMETHODX ("stderr", Fstderr, interp, args, ,
diff --git a/libinterp/corefcn/pager.cc b/libinterp/corefcn/pager.cc
--- a/libinterp/corefcn/pager.cc
+++ b/libinterp/corefcn/pager.cc
@@ -80,17 +80,17 @@ static std::string VPAGER_FLAGS;
 
 // TRUE means that if output is going to the pager, it is sent as soon
 // as it is available.  Otherwise, it is buffered and only sent to the
 // pager when it is time to print another prompt.
 static bool Vpage_output_immediately = false;
 
 // TRUE means all output intended for the screen should be passed
 // through the pager.
-static bool Vpage_screen_output = true;
+static bool Vpage_screen_output = false;
 
 static bool really_flush_to_pager = false;
 
 static bool flushing_output_to_pager = false;
 
 static void
 clear_external_pager (void)
 {
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -170,25 +170,29 @@ optional argument @var{return_output} is
 synchronously, then the output from the command is returned as a variable.
 Otherwise, if the subprocess is executed synchronously, its output is sent
 to the standard output.  To send the output of a command executed with
 @code{system} through the pager, use a command like
 
 @example
 @group
 [~, text] = system ("cmd");
+more on;
 disp (text);
 @end group
 @end example
 
 @noindent
 or
 
 @example
+@group
+more on;
 printf ("%s\n", nthargout (2, "system", "cmd"));
+@end group
 @end example
 
 The @code{system} function can return two values.  The first is the
 exit status of the command and the second is any output from the
 command that was written to the standard output stream.  For example,
 
 @example
 [status, output] = system ("echo foo & exit 2");
