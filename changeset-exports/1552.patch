# HG changeset patch
# User jwe
# Date 813194907 0
#      Sun Oct 08 23:28:27 1995 +0000
# Node ID d1ddf54a79c2960f7b1c11f44b56a0557286b925
# Parent  8f63ee44726ca8fff4d69b8c4f90276ad5e790b9
[project @ 1995-10-08 23:28:05 by jwe]

diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -268,34 +268,34 @@ idx_vector::convert_one_zero_to_idx (voi
 
 	  if (data[i] < min_val)
 	    min_val = data[i];
 	}
       while (++i < len);
     }
 }
 
-static inline int
-intcmp (int *i, int *j)
-{
-  return (*i - *j);
-}
-
 int
 idx_vector::checkelem (int n) const
 {
   if (n < 0 || n >= len)
     {
       ::error ("idx-vector: index out of range");
       return 0;
     }
 
   return elem (n);
 }
 
+static inline int
+intcmp (int *i, int *j)
+{
+  return (*i - *j);
+}
+
 void
 idx_vector::sort (void)
 {
   qsort ((void *) data, len, sizeof (int),
 	 (int (*)(const void*, const void*)) intcmp); 
 }
 
 void
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -62,17 +62,17 @@ public:
     {
       return initialized ? (void *) 1 : (void *) 0;
     }
 
   int idx_vector::capacity (void) const { return len; }
   int idx_vector::length (void) const { return len; }
 
   int idx_vector::elem (int n) const { return data[n]; }
-
+  int idx_vector::checkelem (int n) const;
   int idx_vector::operator () (int n) const { return checkelem (n); }
 
   int idx_vector::max (void) const { return max_val; }
   int idx_vector::min (void) const { return min_val; }
 
   int idx_vector::one_zero_only (void) const { return one_zero; }
   int idx_vector::zeros_count (void) const { return num_zeros; }
   int idx_vector::ones_count (void) const { return num_ones; }
