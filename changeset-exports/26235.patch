# HG changeset patch
# User Guillaume Flandin <guillaume.offline@gmail.com>
# Date 1544806969 28800
#      Fri Dec 14 09:02:49 2018 -0800
# Node ID 00924e6e513e83d4cf4377c40f888ea41694e605
# Parent  23b56a61c91880516c33bacf7c7a9209add11e7d
ismember.m: Handle mixed char/numeric inputs in Matlab compatible way (bug #53924).

* ismember.m: If inputs are a mix of char and numeric, convert char input
to double.  Add BIST tests for behavior.

diff --git a/scripts/set/ismember.m b/scripts/set/ismember.m
--- a/scripts/set/ismember.m
+++ b/scripts/set/ismember.m
@@ -103,16 +103,23 @@ function [tf, s_idx] = ismember (a, s, v
     s = uint8 (s);
   endif
 
   ## Matlab-compatible behavior (R2016b).  See bug #51187.
   if (ischar (a) && rows (a) == 1 && iscell (s))
     a = {a};
   endif
 
+  ## Another Matlab-compatible behavior.  See bug #53924.
+  if (isnumeric (a) && ischar (s))
+    s = double (s);
+  elseif (ischar (a) && isnumeric (s))
+    a = double (a);
+  endif
+
   [a, s] = validsetargs ("ismember", a, s, varargin{:});
 
   by_rows = nargin == 3;
 
   if (! by_rows)
     s = s(:);
     ## Check sort status, because we expect the array will often be sorted.
     if (issorted (s))
@@ -160,22 +167,25 @@ function [tf, s_idx] = ismember (a, s, v
 
 endfunction
 
 
 %!assert (ismember ({""}, {"abc", "def"}), false)
 %!assert (ismember ("abc", {"abc", "def"}), true)
 %!assert (isempty (ismember ([], [1, 2])), true)
 %!assert (isempty (ismember ({}, {'a', 'b'})), true)
+%!assert (isempty (ismember ([], 'a')), true)
 %!assert (ismember ("", {"abc", "def"}), false)
+%!assert (ismember (1, 'abc'), false)
+%!assert (ismember ("abc", 1), [false false false])
+%!assert (ismember ("abc", 99), [false false true])
 %!fail ("ismember ([], {1, 2})")
 %!fail ("ismember ({[]}, {1, 2})")
 %!fail ("ismember ({}, {1, 2})")
 %!fail ("ismember ({1}, {'1', '2'})")
-%!fail ("ismember (1, 'abc')")
 %!fail ("ismember ({'1'}, {'1' '2'},'rows')")
 %!fail ("ismember ([1 2 3], [5 4 3 1], 'rows')")
 %!assert (ismember ({"foo", "bar"}, {"foobar"}), [false false])
 %!assert (ismember ({"foo"}, {"foobar"}), false)
 %!assert (ismember ({"bar"}, {"foobar"}), false)
 %!assert (ismember ({"bar"}, {"foobar", "bar"}), true)
 %!assert (ismember ({"foo", "bar"}, {"foobar", "bar"}), [false true])
 %!assert (ismember ({"xfb", "f", "b"}, {"fb", "b"}), [false false true])
