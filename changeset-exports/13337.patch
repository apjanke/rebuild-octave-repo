# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1302030620 -7200
#      Tue Apr 05 21:10:20 2011 +0200
# Node ID e19200da9a45affe7fbfdce2838a67d353bfecf7
# Parent  45fa9f4247377c5262bb333eabd2c260579ae6ec
Removed unused code.

diff --git a/gui//client.cpp b/gui//client.cpp
--- a/gui//client.cpp
+++ b/gui//client.cpp
@@ -2,17 +2,16 @@
 
 Client::Client(QString command)
     : QObject(),
       m_command(command) {
     m_thread.start();
     moveToThread(&m_thread);
 
     m_process.start(m_command, QProcess::ReadWrite);
-    connect(&m_process, SIGNAL(stateChanged(QProcess::ProcessState)), this, SLOT(handleProcessStatusChange(QProcess::ProcessState)));
     connect(&m_process, SIGNAL(finished(int,QProcess::ExitStatus)), this, SLOT(handleProcessFinished(int,QProcess::ExitStatus)));
     connect(&m_process, SIGNAL(readyReadStandardOutput()), this, SLOT(reemitDataAvailable()));
     connect(&m_process, SIGNAL(readyReadStandardError()), this, SLOT(reemitErrorAvailable()));
 }
 
 void Client::send(QString content) {
     m_process.write(content.toLocal8Bit());
 }
@@ -23,19 +22,8 @@ void Client::reemitDataAvailable() {
 
 void Client::reemitErrorAvailable() {
     emit errorAvailable(m_process.readAllStandardError());
 }
 
 void Client::handleProcessFinished(int exitCode, QProcess::ExitStatus exitStatus) {
     m_process.start(m_command, QProcess::ReadWrite);
 }
-
-void Client::handleProcessStatusChange(QProcess::ProcessState processState) {
-    switch(processState) {
-        case QProcess::NotRunning:
-            break;
-        case QProcess::Starting:
-            break;
-        case QProcess::Running:
-            break;
-    };
-}
diff --git a/gui//client.h b/gui//client.h
--- a/gui//client.h
+++ b/gui//client.h
@@ -20,17 +20,16 @@ signals:
 
 protected:
     Client(QString command);
 
 private slots:
     void reemitDataAvailable();
     void reemitErrorAvailable();
     void handleProcessFinished(int exitCode, QProcess::ExitStatus exitStatus);
-    void handleProcessStatusChange(QProcess::ProcessState processState);
 
 private:
     QString m_command;
     QProcess m_process;
     QThread m_thread;
 };
 
 #endif // CLIENT_H
