# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1552127111 0
#      Sat Mar 09 10:25:11 2019 +0000
# Node ID a2aed4b49be36c13be033d82d5595f8b1bde7a40
# Parent  6e019db9c0a6105e900e55e63a11cd95d41491b7
fix const-ness of feval arguments

* parse.h, oct-parse.yy (feval (const char *...)): New overload.
(feval (const octave_value&...)): Declare first arg const.

diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -5165,16 +5165,22 @@ namespace octave
   //!
   //! @param name The name of the function to call.
   //! @param args The arguments to the function.
   //! @param nargout The number of output arguments expected.
   //! @return A list of output values.  The length of the list is not
   //!         necessarily the same as @c nargout.
 
   octave_value_list
+  feval (const char *name, const octave_value_list& args, int nargout)
+  {
+    return feval (std::string (name), args, nargout);
+  }
+
+  octave_value_list
   feval (const std::string& name, const octave_value_list& args, int nargout)
   {
     octave_value_list retval;
 
     symbol_table& symtab = __get_symbol_table__ ("feval");
 
     octave_value fcn = symtab.find_function (name, args);
 
@@ -5203,31 +5209,38 @@ namespace octave
 
         retval = fcn->call (tw, nargout, args);
       }
 
     return retval;
   }
 
   octave_value_list
-  feval (octave_value& val, const octave_value_list& args, int nargout)
+  feval (const octave_value& val, const octave_value_list& args, int nargout)
   {
     if (val.is_function ())
       {
         return feval (val.function_value (), args, nargout);
       }
     else if (val.is_function_handle ())
       {
         // This covers function handles, inline functions, and anonymous
         //  functions.
 
         std::list<octave_value_list> arg_list;
         arg_list.push_back (args);
 
-        return val.subsref ("(", arg_list, nargout);
+        // FIXME: could we make octave_value::subsref a const method?
+        // It would be difficult because there are instances of
+        // incrementing the reference count inside subsref methods,
+        // which means they can't be const with the current way of
+        // handling reference counting.
+
+        octave_value xval = val;
+        return xval.subsref ("(", arg_list, nargout);
       }
     else if (val.is_string ())
       {
         return feval (val.string_value (), args, nargout);
       }
     else
       error ("feval: first argument must be a string, inline function, or a function handle");
 
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -559,27 +559,32 @@ namespace octave
 
   extern OCTINTERP_API void
   source_file (const std::string& file_name,
                const std::string& context = "",
                bool verbose = false, bool require_file = true,
                const std::string& warn_for = "");
 
   extern OCTINTERP_API octave_value_list
+  feval (const char *name,
+         const octave_value_list& args = octave_value_list (),
+         int nargout = 0);
+
+  extern OCTINTERP_API octave_value_list
   feval (const std::string& name,
          const octave_value_list& args = octave_value_list (),
          int nargout = 0);
 
   extern OCTINTERP_API octave_value_list
   feval (octave_function *fcn,
          const octave_value_list& args = octave_value_list (),
          int nargout = 0);
 
   extern OCTINTERP_API octave_value_list
-  feval (octave_value& val,
+  feval (const octave_value& val,
          const octave_value_list& args = octave_value_list (),
          int nargout = 0);
 
   extern OCTINTERP_API octave_value_list
   feval (const octave_value_list& args, int nargout = 0);
 
   OCTAVE_DEPRECATED (5, "use 'octave::interpreter::eval_string' instead")
   extern OCTINTERP_API octave_value_list
