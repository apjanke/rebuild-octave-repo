# HG changeset patch
# User Rik <rik@octave.org>
# Date 1451847495 28800
#      Sun Jan 03 10:58:15 2016 -0800
# Node ID e3b3bb522d626b2700e1d7f2713f34ef6acf1da4
# Parent  4a7d9c335402d0cf818c80b642cd02fd8a5853c0
maint: Move GCC_ attributes to start of declaration for future compatibility.

* error.cc, error.h, gripes.h, jit-typeinfo.cc, load-save.cc, oct-stream.cc,
symtab.h, variables.h, ov-base.cc, ov-class.cc, ov-classdef.cc, ov-classdef.h,
ov.cc, pt-mat.cc, dSparse.h, f77-fcn.h, lo-error.h, quit.h, lo-array-gripes.h:
Move GCC_ attributes to start of declaration for future compatibility.

diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -388,35 +388,30 @@ void
 message_with_id (const char *name, const char *id, const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   vmessage_with_id (name, id, fmt, args);
   va_end (args);
 }
 
-static void
-usage_1 (octave_execution_exception& e, const char *id,
-         const char *fmt, va_list args) GCC_ATTR_NORETURN;
-
-static void
+GCC_ATTR_NORETURN static
+void
 usage_1 (octave_execution_exception& e, const char *id,
          const char *fmt, va_list args)
 {
   verror (true, std::cerr, "usage", id, fmt, args);
 
   maybe_enter_debugger (e);
 
   throw e;
 }
 
-static void
-usage_1 (const char *id, const char *fmt, va_list args) GCC_ATTR_NORETURN;
-
-static void
+GCC_ATTR_NORETURN static
+void
 usage_1 (const char *id, const char *fmt, va_list args)
 {
   octave_execution_exception e = make_execution_exception ("usage");
 
   usage_1 (e, id, fmt, args);
 }
 
 void
@@ -444,25 +439,21 @@ void
 usage_with_id (const char *id, const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   vusage_with_id (id, fmt, args);
   va_end (args);
 }
 
-static void
+GCC_ATTR_NORETURN static
+void
 error_1 (octave_execution_exception& e, std::ostream& os,
          const char *name, const char *id, const char *fmt,
-         va_list args, bool with_cfn = false) GCC_ATTR_NORETURN;
-
-static void
-error_1 (octave_execution_exception& e, std::ostream& os,
-         const char *name, const char *id, const char *fmt,
-         va_list args, bool with_cfn)
+         va_list args, bool with_cfn = false)
 {
   bool show_stack_trace = false;
 
   if (fmt)
     {
       if (*fmt)
         {
           size_t len = strlen (fmt);
@@ -496,24 +487,20 @@ error_1 (octave_execution_exception& e, 
   else
     panic ("error_1: invalid format");
 
   maybe_enter_debugger (e, show_stack_trace);
 
   throw e;
 }
 
-static void
+GCC_ATTR_NORETURN static
+void
 error_1 (std::ostream& os, const char *name, const char *id,
-         const char *fmt, va_list args,
-         bool with_cfn = false) GCC_ATTR_NORETURN;
-
-static void
-error_1 (std::ostream& os, const char *name, const char *id,
-         const char *fmt, va_list args, bool with_cfn)
+         const char *fmt, va_list args, bool with_cfn = false)
 {
   octave_execution_exception e = make_execution_exception ("error");
 
   error_1 (e, os, name, id, fmt, args, with_cfn);
 }
 
 void
 verror (const char *fmt, va_list args)
diff --git a/libinterp/corefcn/error.h b/libinterp/corefcn/error.h
--- a/libinterp/corefcn/error.h
+++ b/libinterp/corefcn/error.h
@@ -38,74 +38,85 @@ extern OCTINTERP_API void reset_error_ha
 
 extern OCTINTERP_API int warning_enabled (const std::string& id);
 
 extern OCTINTERP_API void
 vmessage (const char *name, const char *fmt, va_list args);
 
 extern OCTINTERP_API void message (const char *name, const char *fmt, ...);
 
-GCC_ATTR_DEPRECATED extern OCTINTERP_API void vusage (const char *fmt, va_list args) GCC_ATTR_NORETURN;
-GCC_ATTR_DEPRECATED extern OCTINTERP_API void usage (const char *fmt, ...) GCC_ATTR_NORETURN;
+GCC_ATTR_DEPRECATED GCC_ATTR_NORETURN OCTINTERP_API extern
+void vusage (const char *fmt, va_list args);
+
+GCC_ATTR_DEPRECATED GCC_ATTR_NORETURN OCTINTERP_API extern
+void usage (const char *fmt, ...);
 
 extern OCTINTERP_API void vwarning (const char *fmt, va_list args);
 extern OCTINTERP_API void warning (const char *fmt, ...);
 
-extern OCTINTERP_API void verror (const char *fmt, va_list args) GCC_ATTR_NORETURN;
-extern OCTINTERP_API void error (const char *fmt, ...) GCC_ATTR_NORETURN;
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void verror (const char *fmt, va_list args);
+
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void error (const char *fmt, ...);
 
-extern OCTINTERP_API void verror (octave_execution_exception&,
-                                  const char *fmt, va_list args) GCC_ATTR_NORETURN;
-extern OCTINTERP_API void error (octave_execution_exception&,
-                                 const char *fmt, ...) GCC_ATTR_NORETURN;
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void verror (octave_execution_exception&, const char *fmt, va_list args);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void error (octave_execution_exception&, const char *fmt, ...);
 
-extern OCTINTERP_API void verror_with_cfn (const char *fmt, va_list args) GCC_ATTR_NORETURN;
-extern OCTINTERP_API void error_with_cfn (const char *fmt, ...) GCC_ATTR_NORETURN;
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void verror_with_cfn (const char *fmt, va_list args);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void error_with_cfn (const char *fmt, ...);
 
-extern OCTINTERP_API void vparse_error (const char *fmt, va_list args) GCC_ATTR_NORETURN;
-extern OCTINTERP_API void parse_error (const char *fmt, ...) GCC_ATTR_NORETURN;
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void vparse_error (const char *fmt, va_list args);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void parse_error (const char *fmt, ...);
 
 extern OCTINTERP_API void
 vmessage_with_id (const char *id, const char *name,
                   const char *fmt, va_list args);
 
 extern OCTINTERP_API void
 message_with_id (const char *id, const char *name, const char *fmt, ...);
 
-extern OCTINTERP_API void
-vusage_with_id (const char *id, const char *fmt, va_list args) GCC_ATTR_NORETURN;
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void vusage_with_id (const char *id, const char *fmt, va_list args);
 
-extern OCTINTERP_API void
-usage_with_id (const char *id, const char *fmt, ...) GCC_ATTR_NORETURN;
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void usage_with_id (const char *id, const char *fmt, ...);
 
 extern OCTINTERP_API void
 vwarning_with_id (const char *id, const char *fmt, va_list args);
 
 extern OCTINTERP_API void
 warning_with_id (const char *id, const char *fmt, ...);
 
-extern OCTINTERP_API void
-verror_with_id (const char *id, const char *fmt, va_list args) GCC_ATTR_NORETURN;
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void verror_with_id (const char *id, const char *fmt, va_list args);
 
-extern OCTINTERP_API void
-error_with_id (const char *id, const char *fmt, ...) GCC_ATTR_NORETURN;
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void error_with_id (const char *id, const char *fmt, ...);
 
-extern OCTINTERP_API void
-verror_with_id_cfn (const char *id, const char *fmt, va_list args) GCC_ATTR_NORETURN;
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void verror_with_id_cfn (const char *id, const char *fmt, va_list args);
 
-extern OCTINTERP_API void
-error_with_id_cfn (const char *id, const char *fmt, ...) GCC_ATTR_NORETURN;
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void error_with_id_cfn (const char *id, const char *fmt, ...);
+
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void vparse_error_with_id (const char *id, const char *fmt, va_list args);
 
-extern OCTINTERP_API void
-vparse_error_with_id (const char *id, const char *fmt, va_list args) GCC_ATTR_NORETURN;
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void parse_error_with_id (const char *id, const char *fmt, ...);
 
-extern OCTINTERP_API void
-parse_error_with_id (const char *id, const char *fmt, ...) GCC_ATTR_NORETURN;
-
-extern OCTINTERP_API void panic (const char *fmt, ...) GCC_ATTR_NORETURN;
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void panic (const char *fmt, ...);
 
 // Helper function for print_usage defined in defun.cc.
 extern OCTINTERP_API void defun_usage_message (const std::string& msg);
 
 extern OCTINTERP_API octave_value_list
 set_warning_state (const std::string& id, const std::string& state);
 
 extern OCTINTERP_API octave_value_list
diff --git a/libinterp/corefcn/gripes.h b/libinterp/corefcn/gripes.h
--- a/libinterp/corefcn/gripes.h
+++ b/libinterp/corefcn/gripes.h
@@ -29,96 +29,97 @@ along with Octave; see the file COPYING.
 
 class octave_value;
 class octave_execution_exception;
 
 ////////////////////////////////////////////////////////////////////////////////
 // Alphabetized list of gripes.
 ////////////////////////////////////////////////////////////////////////////////
 
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_2_or_3_dim_plot (void);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void gripe_2_or_3_dim_plot (void);
 
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_data_conversion (const char *from, const char *to);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void gripe_data_conversion (const char *from, const char *to);
 
 extern OCTINTERP_API void
 gripe_data_file_in_path (const std::string& fcn, const std::string& file);
 
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_disabled_feature (const std::string& func, const std::string& feature,
-                        const std::string& pkg="Octave");
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void gripe_disabled_feature (const std::string& func,
+                             const std::string& feature,
+                             const std::string& pkg="Octave");
 
 extern OCTINTERP_API void
 gripe_divide_by_zero (void);
 
 extern OCTINTERP_API void
 gripe_empty_arg (const char *name, bool is_error);
 
 extern OCTINTERP_API void
 gripe_implicit_conversion (const char *id, const char *from, const char *to);
 
 extern OCTINTERP_API void
 gripe_implicit_conversion (const std::string& id, const std::string& from,
                            const std::string& to);
 
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_indexed_cs_list (void);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void gripe_indexed_cs_list (void);
 
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_invalid_conversion (const std::string& from, const std::string& to);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void gripe_invalid_conversion (const std::string& from, const std::string& to);
 
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_invalid_inquiry_subscript (void);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void gripe_invalid_inquiry_subscript (void);
 
 extern OCTINTERP_API void
 gripe_invalid_value_specified (const char *name);
 
 extern OCTINTERP_API void
 gripe_logical_conversion (void);
 
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_nonbraced_cs_list_assignment (void);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void gripe_nonbraced_cs_list_assignment (void);
 
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_nonconformant (void);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void gripe_nonconformant (void);
 
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_nonconformant (octave_idx_type r1, octave_idx_type c1,
-                     octave_idx_type r2, octave_idx_type c2);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void gripe_nonconformant (octave_idx_type r1, octave_idx_type c1,
+                          octave_idx_type r2, octave_idx_type c2);
 
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_not_implemented (const char *);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void gripe_not_implemented (const char *);
 
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_not_supported (const char *);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void gripe_not_supported (const char *);
 
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_range_invalid (void);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void gripe_range_invalid (void);
 
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_square_matrix_required (const char *name);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void gripe_square_matrix_required (const char *name);
 
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_string_invalid (void);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void gripe_string_invalid (void);
 
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_unrecognized_data_fmt (const char *warn_for);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void gripe_unrecognized_data_fmt (const char *warn_for);
 
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_unrecognized_float_fmt (void);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void gripe_unrecognized_float_fmt (void);
 
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_user_returned_invalid (const char *name);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void gripe_user_returned_invalid (const char *name);
 
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_user_supplied_eval (const char *name);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void gripe_user_supplied_eval (const char *name);
 
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_user_supplied_eval (octave_execution_exception& e, const char *name);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void gripe_user_supplied_eval (octave_execution_exception& e, const char *name);
 
 extern OCTINTERP_API void
 gripe_warn_complex_cmp (void);
 
 extern OCTINTERP_API void
 gripe_wrong_type_arg (const char *name, const char *s,
                       bool is_error = true);
 
@@ -176,15 +177,15 @@ extern OCTINTERP_API void
 gripe_wrong_type_arg (const octave_value& tc,
                       bool is_error = true);
 
 extern OCTINTERP_API void
 gripe_wrong_type_arg (octave_execution_exception& e,
                       const octave_value& tc,
                       bool is_error = true);
 
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_wrong_type_arg_for_binary_op (const octave_value& op);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void gripe_wrong_type_arg_for_binary_op (const octave_value& op);
 
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_wrong_type_arg_for_unary_op (const octave_value& op);
+GCC_ATTR_NORETURN OCTINTERP_API extern
+void gripe_wrong_type_arg_for_unary_op (const octave_value& op);
 
 #endif
diff --git a/libinterp/corefcn/jit-typeinfo.cc b/libinterp/corefcn/jit-typeinfo.cc
--- a/libinterp/corefcn/jit-typeinfo.cc
+++ b/libinterp/corefcn/jit-typeinfo.cc
@@ -434,17 +434,18 @@ octave_jit_pow_scalar_complex (double lh
 }
 
 extern "C" void
 octave_jit_print_matrix (jit_matrix *m)
 {
   std::cout << *m << std::endl;
 }
 
-static void GCC_ATTR_NORETURN
+GCC_ATTR_NORETURN static
+void
 gripe_bad_result (void)
 {
   error ("incorrect type information given to the JIT compiler");
 }
 
 // FIXME: Add support for multiple outputs
 extern "C" octave_base_value *
 octave_jit_call (octave_builtin::fcn fn, size_t nargin,
diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -121,17 +121,18 @@ default_save_header_format (void)
     + std::string (">");
 }
 
 // The format string for the comment line at the top of text-format
 // save files.  Passed to strftime.  Should begin with '#' and contain
 // no newline characters.
 static std::string Vsave_header_format_string = default_save_header_format ();
 
-static void GCC_ATTR_NORETURN
+GCC_ATTR_NORETURN static
+void
 gripe_file_open (const std::string& fcn, const std::string& file)
 {
   if (fcn == "load")
     error ("%s: unable to open input file '%s'", fcn.c_str (), file.c_str ());
   else if (fcn == "save")
     error ("%s: unable to open output file '%s'", fcn.c_str (), file.c_str ());
   else
     error ("%s: unable to open file '%s'", fcn.c_str (), file.c_str ());
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -4150,20 +4150,18 @@ octave_stream_list::do_insert (octave_st
   if (list.size () >= list.max_size ())
     ::error ("could not create file id");
 
   list[stream_number] = os;
 
   return stream_number;
 }
 
-static void
-gripe_invalid_file_id (int fid, const std::string& who) GCC_ATTR_NORETURN;
-
-static void
+GCC_ATTR_NORETURN static
+void
 gripe_invalid_file_id (int fid, const std::string& who)
 {
   if (who.empty ())
     ::error ("invalid stream number = %d", fid);
   else
     ::error ("%s: invalid stream number = %d", who.c_str (), fid);
 }
 
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -1335,20 +1335,20 @@ public:
 
     symbol_table *inst = get_instance (scope);
 
     if (inst)
       inst->do_assign (name, value, context, force_add);
   }
 
   // Use assign (name, value, scope, context, force_add) instead.
-  GCC_ATTR_DEPRECATED static octave_value&
+  GCC_ATTR_DEPRECATED static
+  octave_value&
   varref (const std::string& name, scope_id scope = xcurrent_scope,
           context_id context = xdefault_context, bool force_add = false)
-          
   {
     static octave_value foobar;
 
     symbol_table *inst = get_instance (scope);
 
     return inst ? inst->do_varref (name, context, force_add) : foobar;
   }
 
@@ -1359,17 +1359,18 @@ public:
                             const octave_value& value = octave_value (),
                             scope_id scope = xcurrent_scope,
                             context_id context = xdefault_context)
   {
     assign (name, value, scope, context, true);
   }
 
   // Use force_assign (name, value, scope, context) instead.
-  GCC_ATTR_DEPRECATED static octave_value&
+  GCC_ATTR_DEPRECATED static
+  octave_value&
   force_varref (const std::string& name, scope_id scope = xcurrent_scope,
                 context_id context = xdefault_context)
   {
     static octave_value foobar;
 
     symbol_table *inst = get_instance (scope);
 
     return inst ? inst->do_varref (name, context, true) : foobar;
@@ -1393,17 +1394,18 @@ public:
 
     if (p == global_table.end ())
       global_table[name] = value;
     else
       p->second = value;
   }
 
   // Use global_assign (name, value) instead.
-  GCC_ATTR_DEPRECATED static octave_value&
+  GCC_ATTR_DEPRECATED static
+  octave_value&
   global_varref (const std::string& name)
 
   {
     global_table_iterator p = global_table.find (name);
 
     return (p == global_table.end ()) ? global_table[name] : p->second;
   }
 
@@ -1418,17 +1420,18 @@ public:
   static void
   top_level_assign (const std::string& name,
                     const octave_value& value = octave_value ())
   {
     assign (name, value, top_scope (), 0);
   }
 
   // Use top_level_assign (name, value) instead.
-  GCC_ATTR_DEPRECATED static octave_value&
+  GCC_ATTR_DEPRECATED static
+  octave_value&
   top_level_varref (const std::string& name)
   {
     static octave_value foobar;
 
     symbol_table *inst = get_instance (top_scope ());
 
     return inst ? inst->do_varref (name, 0, true) : foobar;
   }
@@ -1445,17 +1448,18 @@ public:
   {
     symbol_table *inst = get_instance (xcurrent_scope);
 
     if (inst)
       inst->do_persistent_assign (name, value);
   }
 
   // Use persistent_assign (name, value) instead.
-  GCC_ATTR_DEPRECATED static octave_value&
+  GCC_ATTR_DEPRECATED static
+  octave_value&
   persistent_varref (const std::string& name)
   {
     static octave_value foobar;
 
     symbol_table *inst = get_instance (xcurrent_scope);
 
     return inst ? inst->do_persistent_varref (name) : foobar;
   }
diff --git a/libinterp/corefcn/variables.h b/libinterp/corefcn/variables.h
--- a/libinterp/corefcn/variables.h
+++ b/libinterp/corefcn/variables.h
@@ -132,19 +132,18 @@ set_internal_variable (int& var, const o
 
 extern OCTINTERP_API std::string builtin_string_variable (const std::string&);
 extern OCTINTERP_API int builtin_real_scalar_variable (const std::string&,
                                                        double&);
 extern OCTINTERP_API octave_value builtin_any_variable (const std::string&);
 
 extern OCTINTERP_API void bind_ans (const octave_value& val, bool print);
 
-GCC_ATTR_DEPRECATED extern OCTINTERP_API void
-bind_internal_variable (const std::string& fname,
-                        const octave_value& val);
+GCC_ATTR_DEPRECATED OCTINTERP_API extern
+void bind_internal_variable (const std::string& fname, const octave_value& val);
 
 extern OCTINTERP_API void mlock (void);
 extern OCTINTERP_API void munlock (const std::string&);
 extern OCTINTERP_API bool mislocked (const std::string&);
 
 extern OCTINTERP_API void clear_function (const std::string& nm);
 extern OCTINTERP_API void clear_variable (const std::string& nm);
 extern OCTINTERP_API void clear_symbol (const std::string& nm);
diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -1292,31 +1292,34 @@ octave_base_value::dump (std::ostream& o
 {
   dim_vector dv = this->dims ();
 
   os << "class: " << this->class_name ()
      << " type: " << this->type_name ()
      << " dims: " << dv.str ();
 }
 
-static void GCC_ATTR_NORETURN
+GCC_ATTR_NORETURN static
+void
 gripe_indexed_assignment (const std::string& tn1, const std::string& tn2)
 {
   error ("assignment of '%s' to indexed '%s' not implemented",
          tn2.c_str (), tn1.c_str ());
 }
 
-static void GCC_ATTR_NORETURN
+GCC_ATTR_NORETURN static
+void
 gripe_assign_conversion_failed (const std::string& tn1, const std::string& tn2)
 {
   error ("type conversion for assignment of '%s' to indexed '%s' failed",
          tn2.c_str (), tn1.c_str ());
 }
 
-static void GCC_ATTR_NORETURN
+GCC_ATTR_NORETURN static
+void
 gripe_no_conversion (const std::string& on, const std::string& tn1,
                      const std::string& tn2)
 {
   error ("operator %s: no conversion for assignment of '%s' to indexed '%s'",
          on.c_str (), tn2.c_str (), tn1.c_str ());
 }
 
 octave_value
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -233,29 +233,32 @@ octave_class::get_current_method_class (
       // for any class, not specifically this one.
       if (fcn && (fcn->is_class_method () || fcn->is_class_constructor ()))
         retval = fcn->dispatch_class ();
     }
 
   return retval;
 }
 
-static void GCC_ATTR_NORETURN
+GCC_ATTR_NORETURN static
+void
 gripe_invalid_index1 (void)
 {
   error ("invalid index for class");
 }
 
-static void GCC_ATTR_NORETURN
+GCC_ATTR_NORETURN static
+void
 gripe_invalid_index_for_assignment (void)
 {
   error ("invalid index for class assignment");
 }
 
-static void GCC_ATTR_NORETURN 
+GCC_ATTR_NORETURN static
+void
 gripe_invalid_index_type (const std::string& nm, char t)
 {
   error ("%s cannot be indexed with %c", nm.c_str (), t);
 }
 
 Cell
 octave_class::dotref (const octave_value_list& idx)
 {
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -42,40 +42,35 @@ along with Octave; see the file COPYING.
 #include "singleton-cleanup.h"
 #include "symtab.h"
 #include "toplev.h"
 
 #include "Array.cc"
 
 // Define to 1 to enable debugging statements.
 #define DEBUG_TRACE 0
-static void
-gripe_method_access (const std::string& from,
-                     const cdef_method& meth) GCC_ATTR_NORETURN;
-
-static void
+
+GCC_ATTR_NORETURN static
+void
 gripe_method_access (const std::string& from, const cdef_method& meth)
 {
   octave_value acc = meth.get ("Access");
   std::string acc_s;
 
   if (acc.is_string ())
     acc_s = acc.string_value ();
   else
     acc_s = "class-restricted";
 
   error ("%s: method `%s' has %s access and cannot be run in this context",
          from.c_str (), meth.get_name ().c_str (), acc_s.c_str ());
 }
 
-static void
-gripe_property_access (const std::string& from, const cdef_property& prop,
-                       bool is_set) GCC_ATTR_NORETURN;
-
-static void
+GCC_ATTR_NORETURN static
+void
 gripe_property_access (const std::string& from, const cdef_property& prop,
                        bool is_set = false)
 {
   octave_value acc = prop.get (is_set ? "SetAccess" : "GetAccess");
   std::string acc_s;
 
   if (acc.is_string ())
     acc_s = acc.string_value ();
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -170,17 +170,17 @@ protected:
   // Restricted copying
   cdef_object_rep (const cdef_object_rep&)
     : refcount (1) { }
 
 private:
   // No assignment
   cdef_object_rep& operator = (const cdef_object_rep& );
 
-  void GCC_ATTR_NORETURN gripe_invalid_object (const char *who) const
+  GCC_ATTR_NORETURN void gripe_invalid_object (const char *who) const
   { error ("%s: invalid object", who); }
 };
 
 class
 cdef_object
 {
 public:
   // FIXME: use a null object
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -2310,24 +2310,26 @@ do_binary_op (octave_value::compound_bin
         retval = f (*v1.rep, *v2.rep);
       else
         retval = decompose_binary_op (op, v1, v2);
     }
 
   return retval;
 }
 
-static void GCC_ATTR_NORETURN
+GCC_ATTR_NORETURN static
+void
 gripe_cat_op (const std::string& tn1, const std::string& tn2)
 {
   error ("concatenation operator not implemented for '%s' by '%s' operations",
          tn1.c_str (), tn2.c_str ());
 }
 
-static void GCC_ATTR_NORETURN
+GCC_ATTR_NORETURN static
+void
 gripe_cat_op_conv (void)
 {
   error ("type conversion failed for concatenation operator");
 }
 
 octave_value
 do_cat_op (const octave_value& v1, const octave_value& v2,
            const Array<octave_idx_type>& ra_idx)
diff --git a/libinterp/parse-tree/pt-mat.cc b/libinterp/parse-tree/pt-mat.cc
--- a/libinterp/parse-tree/pt-mat.cc
+++ b/libinterp/parse-tree/pt-mat.cc
@@ -268,21 +268,18 @@ get_concat_class (const std::string& c1,
         retval = c2;
       else if (c1_is_logical && c2_is_logical)
         retval = c1;
     }
 
   return retval;
 }
 
-static void
-eval_error (const char *msg, const dim_vector& x,
-            const dim_vector& y) GCC_ATTR_NORETURN;
-
-static void
+GCC_ATTR_NORETURN static
+void
 eval_error (const char *msg, const dim_vector& x, const dim_vector& y)
 {
   error ("%s (%s vs %s)", msg, x.str ().c_str (), y.str ().c_str ());
 }
 
 void
 tm_row_const::tm_row_const_rep::do_init_element (const octave_value& val,
                                                  bool& first_elem)
diff --git a/liboctave/array/dSparse.h b/liboctave/array/dSparse.h
--- a/liboctave/array/dSparse.h
+++ b/liboctave/array/dSparse.h
@@ -116,24 +116,24 @@ public:
   SparseMatrix concat (const SparseMatrix& rb,
                        const Array<octave_idx_type>& ra_idx);
   SparseComplexMatrix concat (const SparseComplexMatrix& rb,
                               const Array<octave_idx_type>& ra_idx);
 
   friend OCTAVE_API SparseMatrix real (const SparseComplexMatrix& a);
   friend OCTAVE_API SparseMatrix imag (const SparseComplexMatrix& a);
 
-  friend GCC_ATTR_DEPRECATED OCTAVE_API
-    SparseMatrix atan2 (const double& x, const SparseMatrix& y);
+  GCC_ATTR_DEPRECATED OCTAVE_API friend 
+  SparseMatrix atan2 (const double& x, const SparseMatrix& y);
 
-  friend GCC_ATTR_DEPRECATED OCTAVE_API
-    SparseMatrix atan2 (const SparseMatrix& x, const double& y);
+  GCC_ATTR_DEPRECATED OCTAVE_API friend 
+  SparseMatrix atan2 (const SparseMatrix& x, const double& y);
 
-  friend GCC_ATTR_DEPRECATED OCTAVE_API
-    SparseMatrix atan2 (const SparseMatrix& x, const SparseMatrix& y);
+  GCC_ATTR_DEPRECATED OCTAVE_API friend 
+  SparseMatrix atan2 (const SparseMatrix& x, const SparseMatrix& y);
 
   SparseMatrix transpose (void) const
   {
     return MSparse<double>::transpose ();
   }
   SparseMatrix hermitian (void) const { return transpose (); }
 
   // extract row or column i.
diff --git a/liboctave/cruft/misc/f77-fcn.h b/liboctave/cruft/misc/f77-fcn.h
--- a/liboctave/cruft/misc/f77-fcn.h
+++ b/liboctave/cruft/misc/f77-fcn.h
@@ -278,17 +278,18 @@ octave_make_cray_const_ftn_ch_dsc (const
    Needs to include <cstring> and <vector>.  */
 
 #define F77_CSTRING(s, len, cs) \
  OCTAVE_LOCAL_BUFFER (char, cs, F77_CHAR_ARG_LEN_USE (s, len) + 1); \
  memcpy (cs, F77_CHAR_ARG_USE (s), F77_CHAR_ARG_LEN_USE (s, len)); \
  cs[F77_CHAR_ARG_LEN_USE(s, len)] = '\0'
 
 
-extern CRUFT_API F77_RET_T
+GCC_ATTR_NORETURN CRUFT_API extern
+F77_RET_T 
 F77_FUNC (xstopx, XSTOPX) (F77_CONST_CHAR_ARG_DECL
-                           F77_CHAR_ARG_LEN_DECL) GCC_ATTR_NORETURN;
+                           F77_CHAR_ARG_LEN_DECL);
 
 #ifdef __cplusplus
 }
 #endif
 
 #endif
diff --git a/liboctave/cruft/misc/lo-error.h b/liboctave/cruft/misc/lo-error.h
--- a/liboctave/cruft/misc/lo-error.h
+++ b/liboctave/cruft/misc/lo-error.h
@@ -22,27 +22,28 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_lo_error_h)
 #define octave_lo_error_h 1
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
-extern void liboctave_fatal (const char *fmt, ...) GCC_ATTR_NORETURN;
+GCC_ATTR_NORETURN extern void liboctave_fatal (const char *fmt, ...);
 
-extern void liboctave_fatal_with_id (const char *id, const char *fmt, ...) GCC_ATTR_NORETURN;
+GCC_ATTR_NORETURN extern
+void liboctave_fatal_with_id (const char *id, const char *fmt, ...);
 
 extern void liboctave_warning (const char *fmt, ...);
 
 extern void liboctave_warning_with_id (const char *id, const char *fmt, ...);
 
-typedef void (*liboctave_error_handler) (const char *, ...) GCC_ATTR_NORETURN;
+typedef GCC_ATTR_NORETURN void (*liboctave_error_handler) (const char *, ...);
 
-typedef void (*liboctave_error_with_id_handler) (const char *, const char *, ...) GCC_ATTR_NORETURN;
+typedef GCC_ATTR_NORETURN void (*liboctave_error_with_id_handler) (const char *, const char *, ...);
 
 typedef void (*liboctave_warning_handler) (const char *, ...);
 
 typedef void (*liboctave_warning_with_id_handler) (const char *, const char *, ...);
 
 /* Would be nice to make these pointers private, but we want to share
    them among all the liboctave classes. */
 CRUFT_API extern liboctave_error_handler current_liboctave_error_handler;
diff --git a/liboctave/cruft/misc/quit.h b/liboctave/cruft/misc/quit.h
--- a/liboctave/cruft/misc/quit.h
+++ b/liboctave/cruft/misc/quit.h
@@ -61,17 +61,17 @@ typedef jmp_buf octave_jmp_buf;
 #endif
 
 CRUFT_API extern octave_jmp_buf current_context;
 
 CRUFT_API extern void octave_save_current_context (void *);
 
 CRUFT_API extern void octave_restore_current_context (void *);
 
-CRUFT_API extern void octave_jump_to_enclosing_context (void) GCC_ATTR_NORETURN;
+GCC_ATTR_NORETURN CRUFT_API extern void octave_jump_to_enclosing_context (void);
 
 CRUFT_API extern void octave_save_signal_mask (void);
 
 CRUFT_API extern void octave_restore_signal_mask (void);
 
 #ifdef __cplusplus
 class
 octave_execution_exception
@@ -136,21 +136,21 @@ CRUFT_API extern sig_atomic_t octave_int
 CRUFT_API extern sig_atomic_t octave_interrupt_state;
 
 CRUFT_API extern sig_atomic_t octave_exception_state;
 
 CRUFT_API extern volatile sig_atomic_t octave_signal_caught;
 
 CRUFT_API extern void octave_handle_signal (void);
 
-CRUFT_API extern void octave_throw_interrupt_exception (void) GCC_ATTR_NORETURN;
+GCC_ATTR_NORETURN CRUFT_API extern void octave_throw_interrupt_exception (void);
 
-CRUFT_API extern void octave_throw_execution_exception (void) GCC_ATTR_NORETURN;
+GCC_ATTR_NORETURN CRUFT_API extern void octave_throw_execution_exception (void);
 
-CRUFT_API extern void octave_throw_bad_alloc (void) GCC_ATTR_NORETURN;
+GCC_ATTR_NORETURN CRUFT_API extern void octave_throw_bad_alloc (void);
 
 CRUFT_API extern void octave_rethrow_exception (void);
 
 #ifdef __cplusplus
 inline void octave_quit (void)
 {
   if (octave_signal_caught)
     {
diff --git a/liboctave/util/lo-array-gripes.h b/liboctave/util/lo-array-gripes.h
--- a/liboctave/util/lo-array-gripes.h
+++ b/liboctave/util/lo-array-gripes.h
@@ -104,66 +104,64 @@ extern OCTAVE_API const char *error_id_n
 extern OCTAVE_API const char *error_id_index_out_of_bounds;
 
 extern OCTAVE_API const char *error_id_invalid_index;
 
 extern OCTAVE_API const char *warning_id_nearly_singular_matrix;
 
 extern OCTAVE_API const char *warning_id_singular_matrix;
 
-extern void OCTAVE_API
-gripe_nan_to_logical_conversion (void) GCC_ATTR_NORETURN;
+GCC_ATTR_NORETURN OCTAVE_API extern void 
+gripe_nan_to_logical_conversion (void);
 
-extern void OCTAVE_API
-gripe_nan_to_character_conversion (void) GCC_ATTR_NORETURN;
+GCC_ATTR_NORETURN OCTAVE_API extern void 
+gripe_nan_to_character_conversion (void);
 
-extern void OCTAVE_API
+GCC_ATTR_NORETURN OCTAVE_API extern void 
 gripe_nonconformant (const char *op,
                      octave_idx_type op1_len,
-                     octave_idx_type op2_len) GCC_ATTR_NORETURN;
+                     octave_idx_type op2_len);
 
-extern void OCTAVE_API
+GCC_ATTR_NORETURN OCTAVE_API extern void 
 gripe_nonconformant (const char *op,
                      octave_idx_type op1_nr, octave_idx_type op1_nc,
-                     octave_idx_type op2_nr, octave_idx_type op2_nc)
-                    GCC_ATTR_NORETURN;
+                     octave_idx_type op2_nr, octave_idx_type op2_nc);
 
 
-extern void OCTAVE_API
+GCC_ATTR_NORETURN OCTAVE_API extern void 
 gripe_nonconformant (const char *op, const dim_vector& op1_dims,
-                     const dim_vector& op2_dims) GCC_ATTR_NORETURN;
+                     const dim_vector& op2_dims);
 
-extern void OCTAVE_API
+GCC_ATTR_NORETURN OCTAVE_API extern void 
 gripe_index_out_of_range (int nd, int dim,
                           octave_idx_type iext, octave_idx_type ext,
-                          const dim_vector& d) GCC_ATTR_NORETURN;
+                          const dim_vector& d);
 
-extern void OCTAVE_API
+GCC_ATTR_NORETURN OCTAVE_API extern void 
 gripe_index_out_of_range (int nd, int dim,
-                          octave_idx_type iext, octave_idx_type ext)
-                         GCC_ATTR_NORETURN;
+                          octave_idx_type iext, octave_idx_type ext);
 
-extern void OCTAVE_API
+GCC_ATTR_NORETURN OCTAVE_API extern void 
 gripe_del_index_out_of_range (bool is1d, octave_idx_type iext,
-                              octave_idx_type ext) GCC_ATTR_NORETURN;
+                              octave_idx_type ext);
 
-extern void OCTAVE_API
+GCC_ATTR_NORETURN OCTAVE_API extern void 
 gripe_invalid_index (double, octave_idx_type nd = 0,
                      octave_idx_type dim = 0,
-                     const std::string& var = "") GCC_ATTR_NORETURN;
+                     const std::string& var = "");
 
-extern void OCTAVE_API
+GCC_ATTR_NORETURN OCTAVE_API extern void 
 gripe_invalid_index (octave_idx_type n, octave_idx_type nd = 0,
                      octave_idx_type dim = 0,
-                     const std::string& var = "") GCC_ATTR_NORETURN;
+                     const std::string& var = "");
 
-extern void OCTAVE_API
+GCC_ATTR_NORETURN OCTAVE_API extern void 
 gripe_invalid_index (const std::string& idx, octave_idx_type nd = 0,
                      octave_idx_type dim = 0,
-                     const std::string& var = "") GCC_ATTR_NORETURN;
+                     const std::string& var = "");
 
-extern void OCTAVE_API
-gripe_invalid_resize (void) GCC_ATTR_NORETURN;
+GCC_ATTR_NORETURN OCTAVE_API extern void
+gripe_invalid_resize (void);
 
 extern void OCTAVE_API
 gripe_singular_matrix (double rcond = 0.0);
 
 #endif
