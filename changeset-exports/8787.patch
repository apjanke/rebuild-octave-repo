# HG changeset patch
# User Olaf Till  <olaf.till@uni-jena.de>
# Date 1234935029 18000
#      Wed Feb 18 00:30:29 2009 -0500
# Node ID 5b23faa8113c9d1a284542853d1453a57c816af9
# Parent  dbd428efbf5645e2643c8623ab6a3be02e076117
Documentation fixes.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-02-17  Olaf Till  <olaf.till@uni-jena.de>
+
+	* DLD-FUNCTIONS/lsode.cc, DLD-FUNCTIONS/daspk.cc, 
+	DLD-FUNCTIONS/dassl.cc, DLD-FUNCTIONS/dasrt.cc: Documentation fixes.
+
 2009-02-17  Kai Habel  <kai.habel@gmx.de>
 
 	* DLD-FUNCTIONS/convhulln.cc (Fconvhulln): Compute convex hull
 	volume and return it as second output.  New tests.
 
 2009-02-17  John W. Eaton  <jwe@octave.org>
 
 	* ov-fcn.h (octave_function::octave_function): Initialize data members.
diff --git a/src/DLD-FUNCTIONS/daspk.cc b/src/DLD-FUNCTIONS/daspk.cc
--- a/src/DLD-FUNCTIONS/daspk.cc
+++ b/src/DLD-FUNCTIONS/daspk.cc
@@ -201,32 +201,32 @@ x(t_0) = x_0, xdot(t_0) = xdot_0\n\
 The solution is returned in the matrices @var{x} and @var{xdot},\n\
 with each row in the result matrices corresponding to one of the\n\
 elements in the vector @var{t}.  The first element of @var{t}\n\
 should be @math{t_0} and correspond to the initial state of the\n\
 system @var{x_0} and its derivative @var{xdot_0}, so that the first\n\
 row of the output @var{x} is @var{x_0} and the first row\n\
 of the output @var{xdot} is @var{xdot_0}.\n\
 \n\
-The first argument, @var{fcn}, is a string or a two element cell array\n\
-of strings, inline or function handle, that names the function, to call\n\
-to compute the vector of residuals for the set of equations. It must\n\
-have the form\n\
+The first argument, @var{fcn}, is a string, inline, or function handle\n\
+that names the function @math{f} to call to compute the vector of\n\
+residuals for the set of equations.  It must have the form\n\
 \n\
 @example\n\
 @var{res} = f (@var{x}, @var{xdot}, @var{t})\n\
 @end example\n\
 \n\
 @noindent\n\
 in which @var{x}, @var{xdot}, and @var{res} are vectors, and @var{t} is a\n\
 scalar.\n\
 \n\
-If @var{fcn} is a two-element string array, the first element names\n\
-the function @math{f} described above, and the second element names\n\
-a function to compute the modified Jacobian\n\
+If @var{fcn} is a two-element string array or a two-element cell array\n\
+of strings, inlines, or function handles, the first element names\n\
+the function @math{f} described above, and the second element names a\n\
+function to compute the modified Jacobian\n\
 @tex\n\
 $$\n\
 J = {\\partial f \\over \\partial x}\n\
   + c {\\partial f \\over \\partial \\dot{x}}\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
diff --git a/src/DLD-FUNCTIONS/dasrt.cc b/src/DLD-FUNCTIONS/dasrt.cc
--- a/src/DLD-FUNCTIONS/dasrt.cc
+++ b/src/DLD-FUNCTIONS/dasrt.cc
@@ -244,31 +244,32 @@ row of the output @var{x} is @var{x_0} a
 of the output @var{xdot} is @var{xdot_0}.\n\
 \n\
 The vector @var{t} provides an upper limit on the length of the\n\
 integration.  If the stopping condition is met, the vector\n\
 @var{t_out} will be shorter than @var{t}, and the final element of\n\
 @var{t_out} will be the point at which the stopping condition was met,\n\
 and may not correspond to any element of the vector @var{t}.\n\
 \n\
-The first argument, @var{fcn}, is a string, or cell array of strings or\n\
-inline or function handles, that names the function to call to compute\n\
-the vector of residuals for the set of equations. It must have the form\n\
+The first argument, @var{fcn}, is a string, inline, or function handle\n\
+that names the function @math{f} to call to compute the vector of\n\
+residuals for the set of equations.  It must have the form\n\
 \n\
 @example\n\
 @var{res} = f (@var{x}, @var{xdot}, @var{t})\n\
 @end example\n\
 \n\
 @noindent\n\
 in which @var{x}, @var{xdot}, and @var{res} are vectors, and @var{t} is a\n\
 scalar.\n\
 \n\
-If @var{fcn} is a two-element string array, or two element cell array,\n\
-the first element names the function @math{f} described above, and the\n\
-second element names a function to compute the modified Jacobian\n\
+If @var{fcn} is a two-element string array or a two-element cell array\n\
+of strings, inlines, or function handles, the first element names\n\
+the function @math{f} described above, and the second element names a\n\
+function to compute the modified Jacobian\n\
 \n\
 @tex\n\
 $$\n\
 J = {\\partial f \\over \\partial x}\n\
   + c {\\partial f \\over \\partial \\dot{x}}\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
diff --git a/src/DLD-FUNCTIONS/dassl.cc b/src/DLD-FUNCTIONS/dassl.cc
--- a/src/DLD-FUNCTIONS/dassl.cc
+++ b/src/DLD-FUNCTIONS/dassl.cc
@@ -204,32 +204,32 @@ x(t_0) = x_0, xdot(t_0) = xdot_0\n\
 The solution is returned in the matrices @var{x} and @var{xdot},\n\
 with each row in the result matrices corresponding to one of the\n\
 elements in the vector @var{t}.  The first element of @var{t}\n\
 should be @math{t_0} and correspond to the initial state of the\n\
 system @var{x_0} and its derivative @var{xdot_0}, so that the first\n\
 row of the output @var{x} is @var{x_0} and the first row\n\
 of the output @var{xdot} is @var{xdot_0}.\n\
 \n\
-The first argument, @var{fcn}, is a string or a two element cell array\n\
-of strings, inline or function handle, that names the function, to call\n\
-to compute the vector of residuals for the set of equations. It must\n\
-have the form\n\
+The first argument, @var{fcn}, is a string, inline, or function handle\n\
+that names the function @math{f} to call to compute the vector of\n\
+residuals for the set of equations.  It must have the form\n\
 \n\
 @example\n\
 @var{res} = f (@var{x}, @var{xdot}, @var{t})\n\
 @end example\n\
 \n\
 @noindent\n\
 in which @var{x}, @var{xdot}, and @var{res} are vectors, and @var{t} is a\n\
 scalar.\n\
 \n\
-If @var{fcn} is a two-element string array, the first element names\n\
-the function @math{f} described above, and the second element names\n\
-a function to compute the modified Jacobian\n\
+If @var{fcn} is a two-element string array or a two-element cell array\n\
+of strings, inlines, or function handles, the first element names\n\
+the function @math{f} described above, and the second element names a\n\
+function to compute the modified Jacobian\n\
 \n\
 @iftex\n\
 @tex\n\
 $$\n\
 J = {\\partial f \\over \\partial x}\n\
   + c {\\partial f \\over \\partial \\dot{x}}\n\
 $$\n\
 @end tex\n\
diff --git a/src/DLD-FUNCTIONS/lsode.cc b/src/DLD-FUNCTIONS/lsode.cc
--- a/src/DLD-FUNCTIONS/lsode.cc
+++ b/src/DLD-FUNCTIONS/lsode.cc
@@ -187,32 +187,32 @@ x(t_0) = x_0\n\
 \n\
 @end ifnottex\n\
 The solution is returned in the matrix @var{x}, with each row\n\
 corresponding to an element of the vector @var{t}.  The first element\n\
 of @var{t} should be @math{t_0} and should correspond to the initial\n\
 state of the system @var{x_0}, so that the first row of the output\n\
 is @var{x_0}.\n\
 \n\
-The first argument, @var{fcn}, is a string, or cell array of strings,\n\
-inline or function handles, that names the function to call to compute\n\
-the vector of right hand sides for the set of equations. The function\n\
-must have the form\n\
+The first argument, @var{fcn}, is a string, inline, or function handle\n\
+that names the function @math{f} to call to compute the vector of right\n\
+hand sides for the set of equations.  The function must have the form\n\
 \n\
 @example\n\
 @var{xdot} = f (@var{x}, @var{t})\n\
 @end example\n\
 \n\
 @noindent\n\
 in which @var{xdot} and @var{x} are vectors and @var{t} is a scalar.\n\
 \n\
-If @var{fcn} is a two-element string array, the first element names the\n\
-function @math{f} described above, and the second element names a function\n\
-to compute the Jacobian of @math{f}.  The Jacobian function must have the\n\
-form\n\
+If @var{fcn} is a two-element string array or a two-element cell array\n\
+of strings, inlines, or function handles, the first element names\n\
+the function @math{f} described above, and the second element names a\n\
+function to compute the Jacobian of @math{f}.  The Jacobian function\n\
+must have the form\n\
 \n\
 @example\n\
 @var{jac} = j (@var{x}, @var{t})\n\
 @end example\n\
 \n\
 in which @var{jac} is the matrix of partial derivatives\n\
 @tex\n\
 $$ J = {\\partial f_i \\over \\partial x_j} = \\left[\\matrix{\n\
