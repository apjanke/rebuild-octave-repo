# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1208381616 -7200
#      Wed Apr 16 23:33:36 2008 +0200
# Node ID ff918ee1a9830e3f23c4f281bf02f6945faa4bce
# Parent  9c15f385811c578b8354f389e8af1c948fb12176
Delete idx in Sparse<T> and Array<T> operator =

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -58,16 +58,38 @@ Array<T>::~Array (void)
 {
   if (--rep->count <= 0)
     delete rep;
 
   delete [] idx;
 }
 
 template <class T>
+Array<T>&
+Array<T>::operator = (const Array<T>& a)
+{
+  if (this != &a)
+    {
+      if (--rep->count <= 0)
+	delete rep;
+
+      rep = a.rep;
+      rep->count++;
+
+      dimensions = a.dimensions;
+
+      delete [] idx;
+      idx_count = 0;
+      idx = 0;
+    }
+
+  return *this;
+}
+
+template <class T>
 Array<T>
 Array<T>::squeeze (void) const
 {
   Array<T> retval = *this;
 
   if (ndims () > 2)
     {
       bool dims_changed = false;
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -225,34 +225,17 @@ public:
     {
       fill (val);
     }
 
   Array (const Array<T>& a, const dim_vector& dv);
 
   virtual ~Array (void);
 
-  Array<T>& operator = (const Array<T>& a)
-    {
-      if (this != &a)
-	{
-	  if (--rep->count <= 0)
-	    delete rep;
-
-	  rep = a.rep;
-	  rep->count++;
-
-	  dimensions = a.dimensions;
-
-	  idx_count = 0;
-	  idx = 0;
-	}
-
-      return *this;
-    }
+  Array<T>& operator = (const Array<T>& a);
 
   void fill (const T& val) { make_unique (val); }
 
   octave_idx_type capacity (void) const { return rep->length (); }
   octave_idx_type length (void) const { return capacity (); }
   octave_idx_type nelem (void) const { return capacity (); }
   octave_idx_type numel (void) const { return nelem (); }
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2008-04-16  David Bateman  <dbateman@free.fr>
+
+	* Sparse.h (Sparse<T>& operator = (Sparse<T>&)): Move definition
+	of the operator for here
+	* Sparse.cc (Sparse<T>& Sparse<T>::operator = (Sparse<T>&)): To
+	here. Also delete idx.
+	* Array.h (Array<T>& operator = (Array<T>&)): Move definition
+	of the operator for here
+	* Array.cc (Array<T>& Array<T>::operator = (Array<T>&)): To
+	here. Also delete idx.
+
 2008-04-09  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* lo-mappers.cc (xround): Avoid floating-point overflow when input
 	value is equal to bitmax implementation taken from gnulib).
 
 	* file-stat.cc (file_stat::update_internal): Do not strip trailing
 	file separator when path length is equal to 1 (handle case '\') under
 	__WIN32__ platforms.
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -610,16 +610,38 @@ Sparse<T>::~Sparse (void)
 {
   if (--rep->count <= 0)
     delete rep;
 
   delete [] idx;
 }
 
 template <class T>
+Sparse<T>&
+Sparse<T>::operator = (const Sparse<T>& a)
+{
+  if (this != &a)
+    {
+      if (--rep->count <= 0)
+	delete rep;
+
+      rep = a.rep;
+      rep->count++;
+
+      dimensions = a.dimensions;
+
+      delete [] idx;
+      idx_count = 0;
+      idx = 0;
+    }
+
+  return *this;
+}
+
+template <class T>
 octave_idx_type
 Sparse<T>::compute_index (const Array<octave_idx_type>& ra_idx) const
 {
   octave_idx_type retval = -1;
 
   octave_idx_type n = dimensions.length ();
 
   if (n > 0 && n == ra_idx.length ())
diff --git a/liboctave/Sparse.h b/liboctave/Sparse.h
--- a/liboctave/Sparse.h
+++ b/liboctave/Sparse.h
@@ -217,34 +217,17 @@ public:
 	  octave_idx_type nr, octave_idx_type nc, bool sum_terms);
 
   // Sparsify a normal matrix
   Sparse (const Array2<T>& a);
   Sparse (const Array<T>& a);
 
   virtual ~Sparse (void);
 
-  Sparse<T>& operator = (const Sparse<T>& a)
-    {
-      if (this != &a)
-	{
-	  if (--rep->count <= 0)
-	    delete rep;
-
-	  rep = a.rep;
-	  rep->count++;
-
-	  dimensions = a.dimensions;
-	}
-
-      idx_count = 0;
-      idx = 0;
-
-      return *this;
-    }
+  Sparse<T>& operator = (const Sparse<T>& a);
 
   // Note that nzmax and capacity are the amount of storage for
   // non-zero elements, while nnz is the actual number of non-zero
   // terms.
   octave_idx_type nzmax (void) const { return rep->length (); }
   octave_idx_type capacity (void) const { return nzmax (); }
   octave_idx_type nnz (void) const { return rep->nnz (); }
 
