# HG changeset patch
# User jwe
# Date 1120575692 0
#      Tue Jul 05 15:01:32 2005 +0000
# Node ID c7e3cf2fce3efb0145e1cf70515ec1a23181093b
# Parent  db34dff199473f37bdc7383c45e9303a09688d11
[project @ 2005-07-05 15:01:32 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,16 @@
+2005-07-05  cctsim  <cctsim@yahoo.co.uk>
+
+	* strings/dec2base.m: Don't remove all leading zeros if result is zero.
+
+2005-07-05  John W. Eaton  <jwe@octave.org>
+
+	* strings/findstr.m: Return [] for no matches.
+
 2005-06-17  Keith Goodman  <kwgoodman@gmail.com>
 
 	* miscellaneous/tic.m: Fix doc string.
 
 2005-06-15  John W. Eaton  <jwe@octave.org>
 
 	* polynomial/polyfit.m: Force return value to be a row vector.
 
diff --git a/scripts/strings/dec2base.m b/scripts/strings/dec2base.m
--- a/scripts/strings/dec2base.m
+++ b/scripts/strings/dec2base.m
@@ -90,17 +90,17 @@ function retval = dec2base (n, base, len
   retval = reshape (symbols (digits+1), size (digits));
 
   ## Check if the first element is the zero symbol. It seems possible
   ## that LEN is provided, and is less than the computed MAX_LEN and
   ## MAX_LEN is computed to be one larger than necessary, so we would
   ## have a leading zero to remove.  But if LEN >= MAX_LEN, we should
   ## not remove any leading zeros.
   if ((nargin == 2 || (nargin == 3 && max_len > len))
-      && all (retval(:,1) == symbols(1)))
+      && all (retval(:,1) == symbols(1)) && length (retval) != 1)
     retval = retval(:,2:end);
   endif
 
 endfunction
 
 %!test
 %! s0='';
 %! for n=1:13
diff --git a/scripts/strings/findstr.m b/scripts/strings/findstr.m
--- a/scripts/strings/findstr.m
+++ b/scripts/strings/findstr.m
@@ -112,15 +112,19 @@ function v = findstr (s, t, overlap)
 	  keep(idx) = 0;
 	endif
       endfor
     endif
     if (! isempty (v))
       v = v(find (keep));
     endif
   endif
-  
+
+  if (isempty (v))
+    v = [];
+  endif
+
   ## Always return a column vector, because that's what the old one did
   if (rows (v) > 1) 
     v = v.';
   endif
 
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2005-07-05  John W. Eaton  <jwe@octave.org>
+
+	* ov-str-mat.cc (octave_char_matrix_str::do_index_op_internal):
+	Rename from char_matrix_str::do_index_op.  New arg, type.
+	ov-str-mat.h (octave_char_matrix_str::do_index_op): Define using
+	do_index_op_internal.
+	(octave_char_matrix_sq_str::do_index_op): New function.
+
+2005-07-01  John W. Eaton  <jwe@octave.org>
+
+	* parse.y (end_error): Also handle end_try_catch case.
+
 2005-06-17  John W. Eaton  <jwe@octave.org>
 
 	* help.cc (help_from_list, help_from_symbol_table, 
 	help_from_file): New arg, symbol_found.
 	(builtin_help): Use symbol_found arg to determine whether help
 	text is empty or symbol is not available.
 
 	* symtab.cc (symbol_record::print_info): Print more info.
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -76,56 +76,56 @@ default_numeric_conversion_function (con
 
 type_conv_fcn
 octave_char_matrix_str::numeric_conversion_function (void) const
 {
   return default_numeric_conversion_function;
 }
 
 octave_value
-octave_char_matrix_str::do_index_op (const octave_value_list& idx,
-				     int resize_ok)
+octave_char_matrix_str::do_index_op_internal (const octave_value_list& idx,
+					      int resize_ok, char type)
 {
   octave_value retval;
 
   octave_idx_type len = idx.length ();
 
   switch (len)
     {
     case 2:
       {
 	idx_vector i = idx (0).index_vector ();
 	idx_vector j = idx (1).index_vector ();
 
 	if (! error_state)
 	  retval = octave_value (charNDArray (matrix.index (i, j, resize_ok)),
-				 true);
+				 true, type);
       }
       break;
 
     case 1:
       {
 	idx_vector i = idx (0).index_vector ();
 
 	if (! error_state)
 	  retval = octave_value (charNDArray (matrix.index (i, resize_ok)),
-				 true);
+				 true, type);
       }
       break;
 
     default:
       {
 	Array<idx_vector> idx_vec (len);
 
 	for (octave_idx_type i = 0; i < len; i++)
 	  idx_vec(i) = idx(i).index_vector ();
 
 	if (! error_state)
 	  retval = octave_value (charNDArray (matrix.index (idx_vec, resize_ok)),
-				 true);
+				 true, type);
       }
       break;
     }
 
   return retval;
 }
 
 void
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -80,17 +80,18 @@ public:
 
   ~octave_char_matrix_str (void) { }
 
   octave_value *clone (void) const { return new octave_char_matrix_str (*this); }
   octave_value *empty_clone (void) const { return new octave_char_matrix_str (); }
 
   type_conv_fcn numeric_conversion_function (void) const;
 
-  octave_value do_index_op (const octave_value_list& idx, int resize_ok);
+  octave_value do_index_op (const octave_value_list& idx, int resize_ok)
+    { return do_index_op_internal (idx, resize_ok); }
 
   void assign (const octave_value_list& idx, const charMatrix& rhs);
 
   octave_value reshape (const dim_vector& new_dims) const
     { return octave_value (charNDArray (matrix.reshape (new_dims)), true); }
 
   bool is_string (void) const { return true; }
 
@@ -138,16 +139,21 @@ public:
   bool load_hdf5 (hid_t loc_id, const char *name, bool have_h5giterate_bug);
 #endif
 
   int write (octave_stream& os, int block_size,
 	     oct_data_conv::data_type output_type, int skip,
 	     oct_mach_info::float_format flt_fmt) const
     { return os.write (matrix, block_size, output_type, skip, flt_fmt); }
 
+protected:
+
+  octave_value do_index_op_internal (const octave_value_list& idx,
+				     int resize_ok, char type = '"');
+
 private:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 typedef octave_char_matrix_str octave_char_matrix_dq_str;
@@ -186,16 +192,19 @@ public:
 
   ~octave_char_matrix_sq_str (void) { }
 
   octave_value *clone (void) const { return new octave_char_matrix_sq_str (*this); }
   octave_value *empty_clone (void) const { return new octave_char_matrix_sq_str (); }
 
   bool is_sq_string (void) const { return true; }
 
+  octave_value do_index_op (const octave_value_list& idx, int resize_ok)
+    { return do_index_op_internal (idx, resize_ok, '\''); }
+
 private:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1473,16 +1473,20 @@ end_error (const char *type, token::end_
     case token::switch_end:
       error (fmt, type, "endswitch", l, c); 
       break;
 
     case token::while_end:
       error (fmt, type, "endwhile", l, c); 
       break;
 
+    case token::try_catch_end:
+      error (fmt, type, "end_try_catch", l, c); 
+      break;
+
     case token::unwind_protect_end:
       error (fmt, type, "end_unwind_protect", l, c); 
       break;
 
     default:
       panic_impossible ();
       break;
     }
