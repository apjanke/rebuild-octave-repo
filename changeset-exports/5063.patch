# HG changeset patch
# User jwe
# Date 1099584910 0
#      Thu Nov 04 16:15:10 2004 +0000
# Node ID 1c4a00f4bfb9b0701fcf1096760684372cd88031
# Parent  4114f428d68287d4dfd8dc74257403ec1f9dd3b8
[project @ 2004-11-04 16:15:10 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2004-11-04  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/inv.cc (Finv): Declare rcond volatile and check	value.
+	* DLD-FUNCTIONS/det.cc (Fdet): Likewise.
+	
 2004-11-03  John W. Eaton  <jwe@octave.org>
 
 	* data.cc (Fsize): Return 1 if requested dimension is larger than
 	the number of dimensions of the given object.
 
 2004-11-01  Claude Lacoursiere  <claude@hpc2n.umu.se>a
 
 	* ls-hdf5.cc (read_hdf5_data): Expect num_obj to be in distinct group.
diff --git a/src/DLD-FUNCTIONS/det.cc b/src/DLD-FUNCTIONS/det.cc
--- a/src/DLD-FUNCTIONS/det.cc
+++ b/src/DLD-FUNCTIONS/det.cc
@@ -75,51 +75,55 @@ of the reciprocal condition number if re
 
   if (arg.is_real_type ())
     {
       Matrix m = arg.matrix_value ();
 
       if (! error_state)
 	{
 	  int info;
-	  double rcond = 0.0;
+	  volatile double rcond = 0.0;
 
 
 	  if (nargout > 1)
 	    {
 	      DET det = m.determinant (info, rcond);
 	      retval(1) = rcond;
-	      retval(0) = (info == -1 ? 0.0 : det.value ());
+	      retval(0) = ((info == -1 || 1.0 + rcond == 1.0)
+			   ? 0.0 : det.value ());
 	    }
 	  else
 	    {
 	      DET det = m.determinant (info);
-	      retval(0) = (info == -1 ? 0.0 : det.value ());
+	      retval(0) = ((info == -1 || 1.0 + rcond == 1.0)
+			   ? 0.0 : det.value ());
 	    }
 	}
     }
   else if (arg.is_complex_type ())
     {
       ComplexMatrix m = arg.complex_matrix_value ();
 
       if (! error_state)
 	{
 	  int info;
-	  double rcond = 0.0;
+	  volatile double rcond = 0.0;
 
 	  if (nargout > 1)
 	    {
 	      ComplexDET det = m.determinant (info, rcond);
 	      retval(1) = rcond;
-	      retval(0) = (info == -1 ? Complex (0.0) : det.value ());
+	      retval(0) = ((info == -1 || 1.0 + rcond == 1.0)
+			   ? Complex (0.0) : det.value ());
 	    }
 	  else
 	    {
 	      ComplexDET det = m.determinant (info);
-	      retval(0) = (info == -1 ? Complex (0.0) : det.value ());
+	      retval(0) = ((info == -1 | 1.0 + rcond == 1.0)
+			   ? Complex (0.0) : det.value ());
 	    }
 	}
     }
   else
     {
       gripe_wrong_type_arg ("det", arg);
     }
 
diff --git a/src/DLD-FUNCTIONS/inv.cc b/src/DLD-FUNCTIONS/inv.cc
--- a/src/DLD-FUNCTIONS/inv.cc
+++ b/src/DLD-FUNCTIONS/inv.cc
@@ -69,47 +69,47 @@ ill-conditioned matrix if the reciprocal
 
   if (arg.is_real_type ())
     {
       Matrix m = arg.matrix_value ();
 
       if (! error_state)
 	{
 	  int info;
-	  double rcond = 0.0;
+	  volatile double rcond = 0.0;
 
 	  Matrix result = m.inverse (info, rcond, 1);
 
 	  if (nargout > 1)
 	    retval(1) = rcond;
 
 	  retval(0) = result;
 
-	  if (nargout < 2 && info == -1)
+	  if (nargout < 2 && (info == -1 || 1.0 + rcond == 1.0))
 	    warning ("inverse: matrix singular to machine precision,\
  rcond = %g", rcond);
 	}
     }
   else if (arg.is_complex_type ())
     {
       ComplexMatrix m = arg.complex_matrix_value ();
 
       if (! error_state)
 	{
 	  int info;
-	  double rcond = 0.0;
+	  volatile double rcond = 0.0;
 
 	  ComplexMatrix result = m.inverse (info, rcond, 1);
 
 	  if (nargout > 1)
 	    retval(1) = rcond;
 
 	  retval(0) = result;
 
-	  if (nargout < 2 && info == -1)
+	  if (nargout < 2 && (info == -1 || 1.0 + rcond == 1.0))
 	    warning ("inverse: matrix singular to machine precision,\
  rcond = %g", rcond);
 	}
     }
   else
     {
       gripe_wrong_type_arg ("inv", arg);
     }
