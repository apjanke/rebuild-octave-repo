# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1391445903 18000
#      Mon Feb 03 11:45:03 2014 -0500
# Branch stable
# Node ID 93c019f00e595b0e839f543584a885a56a1f316f
# Parent  807e21ebddd550aad0b8f605bf6b9eff5502bfe4
maint: whitespace fixes for libinterp/corefcn/lu.cc

diff --git a/libinterp/corefcn/lu.cc b/libinterp/corefcn/lu.cc
--- a/libinterp/corefcn/lu.cc
+++ b/libinterp/corefcn/lu.cc
@@ -206,39 +206,39 @@ information.\n\
       else if (arg_is_empty > 0)
         return octave_value_list (5, SparseMatrix ());
 
       if (arg.is_real_type ())
         {
 
           SparseMatrix m = arg.sparse_matrix_value ();
 
-          if ( nargout < 4 ) 
+          if ( nargout < 4 )
             {
 
               ColumnVector Qinit;
               Qinit.resize (nc);
               for (octave_idx_type i = 0; i < nc; i++)
                 Qinit (i) = i;
               SparseLU fact (m, Qinit, thres, false, true);
 
-              if ( nargout < 2 ) 
+              if ( nargout < 2 )
                   retval(0) = fact.Y ();
               else
                 {
 
                   retval(1)
                     = octave_value (
                         fact.U () * fact.Pc_mat ().transpose (),                    
                         MatrixType (MatrixType::Permuted_Upper,
                                     nc, fact.col_perm ()));
 
                   PermMatrix P = fact.Pr_mat ();
                   SparseMatrix L = fact.L ();
-                  if ( nargout < 3 )  
+                  if ( nargout < 3 )
                       retval(0)
                         = octave_value ( P.transpose () * L,
                             MatrixType (MatrixType::Permuted_Lower,
                                         nr, fact.row_perm ()));
                   else
                     {
                       retval(0) = L;
                       if ( vecout )
@@ -274,41 +274,41 @@ information.\n\
                                           MatrixType (MatrixType::Lower));
             }
 
         }
       else if (arg.is_complex_type ())
         {
           SparseComplexMatrix m = arg.sparse_complex_matrix_value ();
 
-          if ( nargout < 4 ) 
+          if ( nargout < 4 )
             {
 
               ColumnVector Qinit;
               Qinit.resize (nc);
               for (octave_idx_type i = 0; i < nc; i++)
                 Qinit (i) = i;
               SparseComplexLU fact (m, Qinit, thres, false, true);
 
-              if ( nargout < 2 ) 
+              if ( nargout < 2 )
 
                   retval(0) = fact.Y ();
 
               else
                 {
 
                   retval(1)
                     = octave_value (
                         fact.U () * fact.Pc_mat ().transpose (),                    
                         MatrixType (MatrixType::Permuted_Upper,
                                     nc, fact.col_perm ()));
 
                   PermMatrix P = fact.Pr_mat ();
                   SparseComplexMatrix L = fact.L ();
-                  if ( nargout < 3 )  
+                  if ( nargout < 3 )
                       retval(0)
                         = octave_value ( P.transpose () * L,
                             MatrixType (MatrixType::Permuted_Lower,
                                         nr, fact.row_perm ()));
                   else
                     {
                       retval(0) = L;
                       if ( vecout )
@@ -338,17 +338,17 @@ information.\n\
                     retval(3) = fact.Pc_mat ();
                     retval(2) = fact.Pr_mat ();
                   }
                 retval(1) = octave_value (fact.U (),
                                           MatrixType (MatrixType::Upper));
                 retval(0) = octave_value (fact.L (),
                                           MatrixType (MatrixType::Lower));
             }
-            
+
         }
       else
         gripe_wrong_type_arg ("lu", arg);
     }
   else
     {
       if (arg_is_empty < 0)
         return retval;
@@ -573,22 +573,22 @@ information.\n\
 
 %!error lu ()
 %!error <can not define pivoting threshold> lu ([1, 2; 3, 4], 2)
 
 %!test
 %! Bi = [1 2 3 4 5 2 3 6 7 8 4 5 7 8 9];
 %! Bj = [1 3 4 5 6 7 8 9 11 12 13 14 15 16 17];
 %! Bv = [1 1 1 1 1 1 -1 1 1 1 1 -1 1 -1 1];
-%! B = sparse (Bi,Bj,Bv);
-%! [L,U] = lu (B);
+%! B = sparse (Bi, Bj, Bv);
+%! [L, U] = lu (B);
 %! assert (L*U, B);
-%! [L,U,P] = lu(B);
+%! [L, U, P] = lu(B);
 %! assert (P'*L*U, B);
-%! [L,U,P,Q] = lu (B);
+%! [L, U, P, Q] = lu (B);
 %! assert (P'*L*U*Q', B);
 
 */
 
 static
 bool check_lu_dims (const octave_value& l, const octave_value& u,
                     const octave_value& p)
 {
