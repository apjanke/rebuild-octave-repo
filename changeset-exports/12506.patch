# HG changeset patch
# User Konstantinos Poulios <logari81@gmail.com>
# Date 1299785235 -3600
#      Thu Mar 10 20:27:15 2011 +0100
# Node ID 0dda50ae4997442e3452651e88864d149e770ab1
# Parent  6a1fe83fe1296d19767c54fdd9114a7a3e29a6f0
add a persistent mode for listeners

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2011-03-10  Konstantinos Poulios  <logari81@googlemail.com>
+
+	* graphics.h.in: Add PERSISTENT mode to listener_mode.
+	(base_property::delete_listener): Take into account persistent
+	mode of a listener.
+	* graphics.cc (addlistener, dellistener): Accept a new optional
+	argument for persistent listeners.
+
 2011-03-07  Konstantinos Poulios  <logari81@googlemail.com>
 
 	Bug #32482.
 
 	* graphics.h.in (axes::properties::update_yaxislocation,
 	axes::properties::update_yaxislocation):
 	Hook update_ylabel_position and update_xlabel_position
 	respectively.
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -7763,33 +7763,40 @@ addlistener (gcf, \"position\", @{@@my_l
 @end example\n\
 \n\
 @end deftypefn")
 {
   gh_manager::autolock guard;
 
   octave_value retval;
 
-  if (args.length () == 3)
+  if (args.length () >= 3 && args.length () <= 4)
     {
       double h = args(0).double_value ();
 
       if (! error_state)
         {
           std::string pname = args(1).string_value ();
 
           if (! error_state)
             {
               graphics_handle gh = gh_manager::lookup (h);
 
               if (gh.ok ())
                 {
                   graphics_object go = gh_manager::get_object (gh);
 
                   go.add_property_listener (pname, args(2), POSTSET);
+
+                  if (args.length () == 4)
+                    {
+                      caseless_str persistent = args(3).string_value ();
+                      if (persistent.compare ("persistent"))
+                        go.add_property_listener (pname, args(2), PERSISTENT);
+                    }
                 }
               else
                 error ("addlistener: invalid graphics object (= %g)",
                        h);
             }
           else
             error ("addlistener: invalid property name, expected a string value");
         }
@@ -7847,17 +7854,26 @@ dellistener (gcf, \"position\", c);\n\
 
               if (gh.ok ())
                 {
                   graphics_object go = gh_manager::get_object (gh);
 
                   if (args.length () == 2)
                     go.delete_property_listener (pname, octave_value (), POSTSET);
                   else
-                    go.delete_property_listener (pname, args(2), POSTSET);
+                    {
+                      caseless_str persistent = args(2).string_value ();
+                      if (persistent.compare ("persistent"))
+                        {
+                          go.delete_property_listener (pname, octave_value (), PERSISTENT);
+                          go.delete_property_listener (pname, octave_value (), POSTSET);
+                        }
+                      else
+                        go.delete_property_listener (pname, args(2), POSTSET);
+                    }
                 }
               else
                 error ("dellistener: invalid graphics object (= %g)",
                        h);
             }
           else
             error ("dellistener: invalid property name, expected a string value");
         }
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -313,17 +313,17 @@ public:
 private:
   base_scaler *rep;
 };
 
 // ---------------------------------------------------------------------
 
 class property;
 
-enum listener_mode { POSTSET };
+enum listener_mode { POSTSET, PERSISTENT };
 
 class base_property
 {
 public:
   friend class property;
 
 public:
   base_property (void)
@@ -418,17 +418,37 @@ public:
             {
               for (int j = i; j < l.length() - 1; j++)
                 l(j) = l (j + 1);
 
               l.resize (l.length () - 1);
             }
         }
       else
-        l.resize (0);
+        {
+          if (mode == PERSISTENT)
+            l.resize (0);
+          else
+            {
+              octave_value_list lnew (0);
+              octave_value_list& lp = listeners[PERSISTENT];
+              for (int i = l.length () - 1; i >= 0 ; i--)
+                {
+                  for (int j = 0; j < lp.length (); j++)
+                    {
+                      if (l(i).internal_rep () == lp(j).internal_rep ())
+                        {
+                          lnew.resize (lnew.length () + 1, l(i));
+                          break;
+                        }
+                    }
+                }
+              l = lnew;
+            }
+        }
 
     }
 
   OCTINTERP_API void run_listeners (listener_mode mode = POSTSET);
 
   virtual base_property* clone (void) const
     { return new base_property (*this); }
 
