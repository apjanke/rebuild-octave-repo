# HG changeset patch
# User Rik <rik@octave.org>
# Date 1515435924 28800
#      Mon Jan 08 10:25:24 2018 -0800
# Node ID 0645853d12d6ce26fc2ef57eb4fc53368f714a4b
# Parent  cd42d0f341db125a5ae8234c02b33f641890d2a8
test: Mark certain bugs as xtest when run on Mac platforms (bug #52627).

* dlmread.cc: For BIST tests that fail due to bug #47413, protect test with
"testif ; ! ismac ()" so that it is not run on Mac platforms.
Duplicate failing test code, but protect it with:
%!xtest <47413>
%! ## Same test code as above, but intended only for test statistics on Mac.
%! if (! ismac ()), return; endif
so that it is run only on Mac platforms and contributes to xtest statistics.

* mappers.cc (Facos, Facosh, Fasin, Fasinh): Use run-time conditional
(! ismac * ()) to run regular BIST code on non-mac platforms.  Create xtest
which only executes on Macs to document failure.

diff --git a/libinterp/corefcn/dlmread.cc b/libinterp/corefcn/dlmread.cc
--- a/libinterp/corefcn/dlmread.cc
+++ b/libinterp/corefcn/dlmread.cc
@@ -588,17 +588,37 @@ such as text, are also replaced by the @
 %!   assert (dlmread (file, " "), [ 0,  0, 0, 0
 %!                                  0,  1, 2, 0
 %!                                 11, 22, 0, 0
 %!                                  0,  0, 0, 0]);
 %! unwind_protect_cleanup
 %!   unlink (file);
 %! end_unwind_protect
 
-%!test <*50589>
+%!testif ; ! ismac ()   <*50589>
+%! file = tempname ();
+%! unwind_protect
+%!   fid = fopen (file, "wt");
+%!   fwrite (fid, "1;2;3\n");
+%!   fwrite (fid, "1i;2I;3j;4J\n");
+%!   fwrite (fid, "4;5;6\n");
+%!   fwrite (fid, "-4i;+5I;-6j;+7J\n");
+%!   fclose (fid);
+%!
+%!   assert (dlmread (file), [1, 2, 3, 0; 1i, 2i, 3i, 4i;
+%!                            4, 5, 6, 0; -4i, 5i, -6i, 7i]);
+%!   assert (dlmread (file, "", [0 0 0 3]), [1, 2, 3]);
+%!   assert (dlmread (file, "", [1 0 1 3]), [1i, 2i, 3i, 4i]);
+%! unwind_protect_cleanup
+%!   unlink (file);
+%! end_unwind_protect
+
+%!xtest <47413>
+%! ## Same test code as above, but intended only for test statistics on Mac.
+%! if (! ismac ()), return; endif
 %! file = tempname ();
 %! unwind_protect
 %!   fid = fopen (file, "wt");
 %!   fwrite (fid, "1;2;3\n");
 %!   fwrite (fid, "1i;2I;3j;4J\n");
 %!   fwrite (fid, "4;5;6\n");
 %!   fwrite (fid, "-4i;+5I;-6j;+7J\n");
 %!   fclose (fid);
diff --git a/libinterp/corefcn/mappers.cc b/libinterp/corefcn/mappers.cc
--- a/libinterp/corefcn/mappers.cc
+++ b/libinterp/corefcn/mappers.cc
@@ -121,17 +121,25 @@ Compute the inverse cosine in radians fo
 %! obs = acos ([-2, -2-i*eps, -2+i*eps]);
 %! exp = [rval - ival*i, rval + ival*i, rval - ival*i];
 %! assert (obs, exp, 5*eps);
 %! assert (acos ([2 0]),  [ival*i, pi/2], 3*eps);
 %! assert (acos ([2 0i]), [ival*i, pi/2], 3*eps);
 
 ## Test large magnitude arguments (bug #45507)
 ## Test fails with older versions of libm, solution is to upgrade.
-%!test <*45507>
+%!testif ; ! ismac ()   <*45507>
+%! x = [1, -1, i, -i] .* 1e150;
+%! v = [0, pi, pi/2, pi/2];
+%! assert (real (acos (x)), v);
+
+%!xtest <52627>
+%! ## Same test code as above, but intended only for test statistics on Mac.
+%! ## Mac trig/hyperbolic functions have huge tolerances.
+%! if (! ismac ()), return; endif
 %! x = [1, -1, i, -i] .* 1e150;
 %! v = [0, pi, pi/2, pi/2];
 %! assert (real (acos (x)), v);
 
 %!error acos ()
 %!error acos (1, 2)
 */
 
@@ -188,17 +196,25 @@ Compute the inverse hyperbolic cosine fo
 %!test <49091>
 %! re = single (2.99822295029797);
 %! im = single (pi/2);
 %! assert (acosh (single (10i)), re + i*im, 5*eps ("single"));
 %! assert (acosh (single (-10i)), re - i*im, 5*eps ("single"));
 
 ## Test large magnitude arguments (bug #45507)
 ## Test fails with older versions of libm, solution is to upgrade.
-%!test <*45507>
+%!testif ; ! ismac ()   <*45507>
+%! x = [1, -1, i, -i] .* 1e150;
+%! v = [0, pi, pi/2, -pi/2];
+%! assert (imag (acosh (x)), v);
+
+%!xtest <52627>
+%! ## Same test code as above, but intended only for test statistics on Mac.
+%! ## Mac trig/hyperbolic functions have huge tolerances.
+%! if (! ismac ()), return; endif
 %! x = [1, -1, i, -i] .* 1e150;
 %! v = [0, pi, pi/2, -pi/2];
 %! assert (imag (acosh (x)), v);
 
 %!error acosh ()
 %!error acosh (1, 2)
 */
 
@@ -308,17 +324,25 @@ Compute the inverse sine in radians for 
 %! obs = asin ([-2, -2-i*eps, -2+i*eps]);
 %! exp = [-rval + ival*i, -rval - ival*i, -rval + ival*i];
 %! assert (obs, exp, 2*eps);
 %! assert (asin ([2 0]),  [rval - ival*i, 0], 2*eps);
 %! assert (asin ([2 0i]), [rval - ival*i, 0], 2*eps);
 
 ## Test large magnitude arguments (bug #45507)
 ## Test fails with older versions of libm, solution is to upgrade.
-%!test <*45507>
+%!testif ; ! ismac ()   <*45507>
+%! x = [1, -1, i, -i] .* 1e150;
+%! v = [pi/2, -pi/2, 0, -0];
+%! assert (real (asin (x)), v);
+
+%!xtest <52627>
+%! ## Same test code as above, but intended only for test statistics on Mac.
+%! ## Mac trig/hyperbolic functions have huge tolerances.
+%! if (! ismac ()), return; endif
 %! x = [1, -1, i, -i] .* 1e150;
 %! v = [pi/2, -pi/2, 0, -0];
 %! assert (real (asin (x)), v);
 
 %!error asin ()
 %!error asin (1, 2)
 */
 
@@ -343,17 +367,25 @@ Compute the inverse hyperbolic sine for 
 
 %!test
 %! v = single ([0, pi/2*i, 0, -pi/2*i]);
 %! x = single ([0, i, 0, -i]);
 %! assert (asinh (x), v,  sqrt (eps ("single")));
 
 ## Test large magnitude arguments (bug #45507)
 ## Test fails with older versions of libm, solution is to upgrade.
-%!test <*45507>
+%!testif ; ! ismac ()   <*45507>
+%! x = [1, -1, i, -i] .* 1e150;
+%! v = [0, 0, pi/2, -pi/2];
+%! assert (imag (asinh (x)), v);
+
+%!xtest <52627>
+%! ## Same test code as above, but intended only for test statistics on Mac.
+%! ## Mac trig/hyperbolic functions have huge tolerances.
+%! if (! ismac ()), return; endif
 %! x = [1, -1, i, -i] .* 1e150;
 %! v = [0, 0, pi/2, -pi/2];
 %! assert (imag (asinh (x)), v);
 
 %!error asinh ()
 %!error asinh (1, 2)
 */
 
