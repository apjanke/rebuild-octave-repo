# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1366172241 14400
#      Wed Apr 17 00:17:21 2013 -0400
# Node ID 9bc1f8278966d72b70d255d69746301ca46892cd
# Parent  8701792e16ecbd2c12dc2895c48373ee74672346
allow GUI to customize prompts at startup

* octave-link.h (octave_link::set_default_prompts,
octave_link::do_set_default_prompts): New functions.
* octave-qt-link.h, octave-qt-link.cc
(octave_qt_link::do_set_default_prompts): New function.

* input.h, input.cc (set_default_prompts): New function.
* defaults.cc (install_defaults): Call set_default_prompts.

* octave.cc (traditional): New static variable.
(octave_process_command_line): Set it and defer calling
maximum_braindamage until after defaults have been set.
(octave_initialize_interpreter): Call sysdep_init and install_defaults
here.
(octave_main): Not here.
* main-cli.cc (main): Or here.
* main.cc (main): Or here.

diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -246,16 +246,26 @@ octave_qt_link::do_exit_debugger_event (
 void
 octave_qt_link::do_update_breakpoint (bool insert,
                                       const std::string& file, int line)
 {
   emit update_breakpoint_marker_signal (insert, QString::fromStdString (file), line);
 }
 
 void
+octave_qt_link::do_set_default_prompts (std::string& ps1, std::string& ps2,
+                                        std::string& ps4)
+{
+  ps1 = ">> ";
+  ps2 = "";
+  ps4 = "";
+}
+
+
+void
 octave_qt_link::do_insert_debugger_pointer (const std::string& file, int line)
 {
   emit insert_debugger_pointer_signal (QString::fromStdString (file), line);
 }
 
 void
 octave_qt_link::do_delete_debugger_pointer (const std::string& file, int line)
 {
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -94,16 +94,19 @@ public:
   void do_post_input_event (void);
 
   void do_enter_debugger_event (const std::string& file, int line);
   void do_execute_in_debugger_event (const std::string& file, int line);
   void do_exit_debugger_event (void);
 
   void do_update_breakpoint (bool insert, const std::string& file, int line);
 
+  void do_set_default_prompts (std::string& ps1, std::string& ps2,
+                               std::string& ps4);
+
 private:
 
   // No copying!
 
   octave_qt_link (const octave_qt_link&);
 
   octave_qt_link& operator = (const octave_qt_link&);
 
diff --git a/libinterp/interpfcn/defaults.cc b/libinterp/interpfcn/defaults.cc
--- a/libinterp/interpfcn/defaults.cc
+++ b/libinterp/interpfcn/defaults.cc
@@ -458,16 +458,18 @@ install_defaults (void)
 
   set_default_editor ();
 
   set_local_site_defaults_file ();
 
   set_site_defaults_file ();
 
   set_built_in_docstrings_file ();
+
+  set_default_prompts ();
 }
 
 DEFUN (EDITOR, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} EDITOR ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} EDITOR (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} EDITOR (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the editor to\n\
diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -52,16 +52,17 @@ along with Octave; see the file COPYING.
 #include "hook-fcn.h"
 #include "input.h"
 #include "lex.h"
 #include "load-path.h"
 #include "octave-link.h"
 #include "oct-map.h"
 #include "oct-hist.h"
 #include "toplev.h"
+#include "octave-link.h"
 #include "oct-obj.h"
 #include "ov-fcn-handle.h"
 #include "pager.h"
 #include "parse.h"
 #include "pathlen.h"
 #include "pt.h"
 #include "pt-const.h"
 #include "pt-eval.h"
@@ -70,20 +71,20 @@ along with Octave; see the file COPYING.
 #include "symtab.h"
 #include "sysdep.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 // Primary prompt string.
-static std::string VPS1 = "\\s:\\#> ";
+static std::string VPS1;
 
 // Secondary prompt string.
-static std::string VPS2 = "> ";
+static std::string VPS2;
 
 // String printed before echoed input (enabled by --echo-input).
 std::string VPS4 = "+ ";
 
 // Echo commands as they are executed?
 //
 //   1  ==>  echo commands read from script files
 //   2  ==>  echo commands from functions
@@ -129,16 +130,26 @@ static hook_function_list input_event_ho
 // For octave_quit.
 void
 remove_input_event_hook_functions (void)
 {
   input_event_hook_functions.clear ();
 }
 
 void
+set_default_prompts (void)
+{
+  VPS1 = "\\s:\\#> ";
+  VPS2 = "> ";
+  VPS4 = "+ ";
+
+  octave_link::set_default_prompts (VPS1, VPS2, VPS4);
+}
+
+void
 octave_base_reader::do_input_echo (const std::string& input_string) const
 {
   int do_echo = LEXER->reading_script_file ?
     (Vecho_executing_commands & ECHO_SCRIPTS)
       : (Vecho_executing_commands & ECHO_CMD_LINE) && ! forced_interactive;
 
   if (do_echo)
     {
diff --git a/libinterp/interpfcn/input.h b/libinterp/interpfcn/input.h
--- a/libinterp/interpfcn/input.h
+++ b/libinterp/interpfcn/input.h
@@ -56,16 +56,18 @@ extern OCTINTERP_API bool Vdebugging;
 extern void initialize_command_input (void);
 
 extern bool octave_yes_or_no (const std::string& prompt);
 
 extern octave_value do_keyboard (const octave_value_list& args = octave_value_list ());
 
 extern void remove_input_event_hook_functions (void);
 
+extern void set_default_prompts (void);
+
 extern std::string VPS4;
 
 extern char Vfilemarker;
 
 enum echo_state
 {
   ECHO_OFF = 0,
   ECHO_SCRIPTS = 1,
diff --git a/libinterp/interpfcn/octave-link.h b/libinterp/interpfcn/octave-link.h
--- a/libinterp/interpfcn/octave-link.h
+++ b/libinterp/interpfcn/octave-link.h
@@ -251,16 +251,23 @@ public:
   update_breakpoint (bool insert, const std::string& file, int line)
   {
     if (enabled ())
       instance->do_update_breakpoint (insert, file, line);
   }
 
   static void connect_link (octave_link *);
 
+  static void set_default_prompts (std::string& ps1, std::string& ps2,
+                                   std::string& ps4)
+  {
+    if (enabled ())
+      instance->do_set_default_prompts (ps1, ps2, ps4);
+  }
+
 private:
 
   static octave_link *instance;
 
   // No copying!
 
   octave_link (const octave_link&);
 
@@ -354,11 +361,14 @@ protected:
 
   virtual void
   do_execute_in_debugger_event (const std::string& file, int line) = 0;
 
   virtual void do_exit_debugger_event (void) = 0;
 
   virtual void do_update_breakpoint (bool insert,
                                      const std::string& file, int line) = 0;
+
+  virtual void do_set_default_prompts (std::string& ps1, std::string& ps2,
+                                       std::string& ps4) = 0;
 };
 
 #endif // OCTAVELINK_H
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -173,16 +173,19 @@ static const char *short_opts = "+HVdfhi
 static std::string code_to_eval;
 
 // If TRUE, don't exit after evaluating code given by --eval option.
 static bool persist = false;
 
 // If TRUE, the GUI should be started.
 static bool start_gui = false;
 
+// If TRUE use traditional settings (--traditional)
+static bool traditional = false;
+
 // Long options.  See the comments in getopt.h for the meanings of the
 // fields in this structure.
 #define BUILT_IN_DOCSTRINGS_FILE_OPTION 1
 #define DOC_CACHE_FILE_OPTION 2
 #define EVAL_OPTION 3
 #define EXEC_PATH_OPTION 4
 #define FORCE_GUI_OPTION 5
 #define IMAGE_PATH_OPTION 6
@@ -639,20 +642,16 @@ maximum_braindamage (void)
 // EMBEDDED is declared int instead of bool because this function is
 // declared extern "C".
 
 int
 octave_main (int argc, char **argv, int embedded)
 {
   octave_process_command_line (argc, argv);
 
-  sysdep_init ();
-
-  install_defaults ();
-
   octave_initialize_interpreter (argc, argv, embedded);
 
   return octave_execute_interpreter ();
 }
 
 void
 octave_process_command_line (int argc, char **argv)
 {
@@ -809,17 +808,17 @@ octave_process_command_line (int argc, c
           break;
 
         case TEXI_MACROS_FILE_OPTION:
           if (optarg)
             Ftexi_macros_file (octave_value (optarg));
           break;
 
         case TRADITIONAL_OPTION:
-          maximum_braindamage ();
+          traditional = true;
           break;
 
         default:
           // getopt_long should print a message about unrecognized
           // options and return '?', which is handled above.  So if we
           // end up here, it is because there was an option but we
           // forgot to handle it.  That should be fatal.
           panic_impossible ();
@@ -844,16 +843,23 @@ octave_initialize_interpreter (int argc,
 
   octave_env::set_program_name (argv[0]);
 
   octave_program_invocation_name = octave_env::get_program_invocation_name ();
   octave_program_name = octave_env::get_program_name ();
 
   octave_thread::init ();
 
+  sysdep_init ();
+
+  install_defaults ();
+
+  if (traditional)
+    maximum_braindamage ();
+
   init_signals ();
 
   octave_ieee_init ();
 
   // The idea here is to force xerbla to be referenced so that we will
   // link to our own version instead of the one provided by the BLAS
   // library.  But octave_NaN should never be -1, so we should never
   // actually call xerbla.
diff --git a/src/main-cli.cc b/src/main-cli.cc
--- a/src/main-cli.cc
+++ b/src/main-cli.cc
@@ -28,16 +28,12 @@ along with Octave; see the file COPYING.
 #include "octave.h"
 #include "sysdep.h"
 
 int
 main (int argc, char **argv)
 {
   octave_process_command_line (argc, argv);
 
-  sysdep_init ();
-
-  install_defaults ();
-
   octave_initialize_interpreter (argc, argv, 0);
 
   return octave_execute_interpreter ();
 }
diff --git a/src/main.cc b/src/main.cc
--- a/src/main.cc
+++ b/src/main.cc
@@ -31,20 +31,16 @@ along with Octave; see the file COPYING.
 
 int
 main (int argc, char **argv)
 {
   int retval = 0;
 
   octave_process_command_line (argc, argv);
 
-  sysdep_init ();
-
-  install_defaults ();
-
   if (octave_starting_gui ())
     retval = octave_start_gui (argc, argv);
   else
     {
       octave_initialize_interpreter (argc, argv, 0);
 
       retval = octave_execute_interpreter ();
     }
