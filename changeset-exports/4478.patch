# HG changeset patch
# User jwe
# Date 1059592531 0
#      Wed Jul 30 19:15:31 2003 +0000
# Node ID 7afd4bf05aa8c742b71362bcbff9133db4b70118
# Parent  87c2e107f8117a726b5bda965a6b41c9412c99f9
[project @ 2003-07-30 19:15:31 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,10 +1,13 @@
 2003-07-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* emacs/octave-mod.el (octave-variables): Delete
+	propagate_empty_matrices from the list.
+
 	* ck-oct-fcns.m: Delete.
 
 2003-07-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Warn if --enable-dl but not --enable-shared.
 
 2003-07-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/doc/interpreter/numbers.txi b/doc/interpreter/numbers.txi
--- a/doc/interpreter/numbers.txi
+++ b/doc/interpreter/numbers.txi
@@ -326,18 +326,16 @@ way to delete rows or columns of matrice
 @xref{Assignment Ops, ,Assignment Expressions}.
 
 @DOCSTRING(warn_empty_list_elements)
 
 When Octave parses a matrix expression, it examines the elements of the
 list to determine whether they are all constants.  If they are, it
 replaces the list with a single matrix constant.
 
-@DOCSTRING(propagate_empty_matrices)
-
 @node Ranges
 @section Ranges
 @cindex range expressions
 @cindex expression, range
 
 @opindex colon
 
 A @dfn{range} is a convenient way to write a row vector with evenly
diff --git a/emacs/octave-mod.el b/emacs/octave-mod.el
--- a/emacs/octave-mod.el
+++ b/emacs/octave-mod.el
@@ -142,17 +142,17 @@ All Octave abbrevs start with a grave ac
     "automatic_replot" "beep_on_error" "completion_append_char"
     "crash_dumps_octave_core" "default_save_format"
     "e" "echo_executing_commands" "eps"
     "error_text" "gnuplot_binary" "history_file"
     "history_size" "ignore_function_time_stamp"
     "inf" "nan" "nargin" "output_max_field_width" "output_precision"
     "page_output_immediately" "page_screen_output" "pi"
     "print_answer_id_name" "print_empty_dimensions"
-    "program_invocation_name" "program_name" "propagate_empty_matrices"
+    "program_invocation_name" "program_name"
     "realmax" "realmin" "return_last_computed_value" "save_precision"
     "saving_history" "sighup_dumps_octave_core" "sigterm_dumps_octave_core"
     "silent_functions" "split_long_rows" "stderr" "stdin" "stdout"
     "string_fill_char" "struct_levels_to_print"
     "suppress_verbose_help_message" "warn_assign_as_truth_value"
     "warn_divide_by_zero" "warn_empty_list_elements"
     "warn_fortran_indexing" "warn_function_name_clash"
     "warn_future_time_stamp" "warn_imag_to_real"
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2003-07-30  Heine Kolltveit  <kolltvei@idi.ntnu.no>
+
+	* mx-base.h: Include ArrayN.h.
+
 2003-30-07  Heine Kolltveit  <kolltvei@idi.ntnu.no>
 
         * ArrayN.cc (operator <<): Corrected output.
 
 2003-07-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ArrayN.cc (increment_index): New arg, start_dimension.
 
diff --git a/liboctave/mx-base.h b/liboctave/mx-base.h
--- a/liboctave/mx-base.h
+++ b/liboctave/mx-base.h
@@ -40,15 +40,19 @@ Software Foundation, 59 Temple Place - S
 #include "dRowVector.h"
 #include "CRowVector.h"
 
 // Diagonal Matrix classes.
 
 #include "dDiagMatrix.h"
 #include "CDiagMatrix.h"
 
+// N-dimensional Array classes.
+
+#include "ArrayN.h"
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,13 +1,18 @@
 2003-07-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* linear-algebra/cond.m: Behave as though old built-in variable
+	propagate_empty_matrices is always 1.  Also handle empty matrices
+	with one non-zero dimension.
+
 	* miscellaneous/dump_prefs.m: Add warn_separator_insert and
 	warn_single_quote_string to the list.
-	Delete whitespace_in_literal_matrix from the list.
+	Delete whitespace_in_literal_matrix and propagate_empty_matrices
+	from the list.
 
 2003-07-25  Paul Kienzle <pkienzle@users.sf.net>
 
 	* signal/autocov.m: Transpose result of conj because diag returns
 	a column vector, not a row vector.
 
 	* audio/playaudio.m, audio/record.m, image/image.m,
 	miscellaneous/bug_report.m: Protect spaces in filenames
diff --git a/scripts/linear-algebra/cond.m b/scripts/linear-algebra/cond.m
--- a/scripts/linear-algebra/cond.m
+++ b/scripts/linear-algebra/cond.m
@@ -26,23 +26,17 @@
 ## @seealso{norm, svd, and rank}
 
 ## Author: jwe
 
 function retval = cond (a)
 
   if (nargin == 1)
     [nr, nc] = size (a);
-    if (nr == 0 && nc == 0)
-      if (! propagate_empty_matrices)
-        error ("cond: empty matrix is invalid as argument");
-      endif
-      if (strcmp (propagate_empty_matrices, "warn"))
-        warning ("cond: argument is empty matrix\n");
-      endif
+    if (nr == 0 || nc == 0)
       retval = 0.0;
     endif
     if (any (any (isinf (a) | isnan (a))))
       error ("cond: argument must not contain Inf or NaN values");
     else
       sigma = svd (a);
       sigma_1 = sigma(1);
       sigma_n = sigma(length (sigma));
diff --git a/scripts/miscellaneous/dump_prefs.m b/scripts/miscellaneous/dump_prefs.m
--- a/scripts/miscellaneous/dump_prefs.m
+++ b/scripts/miscellaneous/dump_prefs.m
@@ -71,17 +71,16 @@ function dump_prefs (file)
               "max_recursion_depth";
               "output_max_field_width";
               "output_precision";
               "page_output_immediately";
               "page_screen_output";
               "print_answer_id_name";
               "print_empty_dimensions";
               "print_rhs_assign_val";
-              "propagate_empty_matrices";
               "return_last_computed_value";
               "save_precision";
               "saving_history";
               "sighup_dumps_octave_core";
               "sigterm_dumps_octave_core";
               "silent_functions";
               "split_long_rows";
               "string_fill_char";
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,19 +1,47 @@
 2003-07-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* utils.cc (identity_matrix): Move here from data.cc.
+	(identity_matrix): Use std::min instead of our own MIN macro.
+
+	* utils.h (identity_matrix): Provide decl.
+
+	* DLD-FUNCTIONS/svd.cc (Fsvd): Improve handling of empty matrix arg.
+
+	* ov.cc (octave_value(const ArrayN<Complex>&)): New constructor.
+	* ov.h (octave_value(const ArrayN<Complex>&)): Provide decl.
+
+2003-07-30  Heine Kolltveit <kolltvei@idi.ntnu.no>
+
+	* ov.cc (octave_value(const ArrayN<double>&)): New constructor.
+	* ov.h (octave_value(const ArrayN<double>&)): Provide decl.
+
+2003-07-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov.h (Vpropagate_empty_matrices): Delete decl.
+	* ov.cc: (Vpropagate_empty_matrices): Delete.
+	(propagate_empty_matrices): Delete.
+	(symbols_of_ov): Delete DEFVAR for propagate_empty_matrices.
+
+	* utils.cc (empty_arg): Behave as though propagate_empty_matrices
+	is always 1.
+	* ov-range.cc (octave_range::is_true): Likewise.
+	* ov-base-mat.cc (octave_base_matrix<MT>::is_true): Likewise.
+
 	* octave.cc (maximum_braindamage): Also set
 	warn_matlab_incompatible to TRUE.
 
-	* lex.l (whitespace_in_literal_matrix): Delete.
+	* lex.l (Vwhitespace_in_literal_matrix): Delete.
+	(whitespace_in_literal_matrix): Delete.
 	(symbols_of_lex): Delete DEFVAR for whitespace_in_literal_matrix.
 	(<MATRIX_START>{S}*\,{S}*, <MATRIX_START>{S}+,
 	(<MATRIX_START>{S}*{COMMENT}{SNLCMT}*,
 	<MATRIX_START>{S}*{NL}{SNLCMT}*, maybe_unput_comma): Behave as though
-	Vwhitespace_in_literal_matrix is always 1.
+	old Vwhitespace_in_literal_matrix varaible is always 1.
 
 	* octave.cc (maximum_braindamage): Don't set
 	whitespace_in_literal_matrix.
 
 2003-07-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (install-lib): Use $(INSTALL), not
 	$(INSTALL_PROGRAM) for $(SHLLIB) files.
diff --git a/src/DLD-FUNCTIONS/svd.cc b/src/DLD-FUNCTIONS/svd.cc
--- a/src/DLD-FUNCTIONS/svd.cc
+++ b/src/DLD-FUNCTIONS/svd.cc
@@ -123,89 +123,97 @@ decomposition, eliminating the unnecessa
   if (nargin < 1 || nargin > 2 || nargout == 2 || nargout > 3)
     {
       print_usage ("svd");
       return retval;
     }
 
   octave_value arg = args(0);
 
-  int arg_is_empty = empty_arg ("svd", arg.rows (), arg.columns ());
-
-  if (arg_is_empty < 0)
-    return retval;
-  else if (arg_is_empty > 0)
-    return octave_value_list (3, Matrix ());
-
-  SVD::type type = ((nargout == 0 || nargout == 1)
-		    ? SVD::sigma_only
-		    : (nargin == 2) ? SVD::economy : SVD::std);
-
-  if (arg.is_real_type ())
-    {
-      Matrix tmp = arg.matrix_value ();
-
-      if (! error_state)
-	{
-	  if (tmp.any_element_is_inf_or_nan ())
-	    {
-	      error ("svd: cannot take SVD of matrix containing Inf or\
- NaN values"); 
-	      return retval;
-	    }
-
-	  SVD result (tmp, type);
-
-	  DiagMatrix sigma = result.singular_values ();
+  int nr = arg.rows ();
+  int nc = arg.columns ();
 
-	  if (nargout == 0 || nargout == 1)
-	    {
-	      retval(0) = sigma.diag ();
-	    }
-	  else
-	    {
-	      retval(2) = result.right_singular_matrix ();
-	      retval(1) = sigma;
-	      retval(0) = result.left_singular_matrix ();
-	    }
-	}
-    }
-  else if (arg.is_complex_type ())
+  if (nr == 0 || nc == 0)
     {
-      ComplexMatrix ctmp = arg.complex_matrix_value ();
-
-      if (! error_state)
+      if (nargout == 3)
 	{
-	  if (ctmp.any_element_is_inf_or_nan ())
-	    {
-	      error ("svd: cannot take SVD of matrix containing Inf or\
- NaN values"); 
-	      return retval;
-	    }
-
-	  ComplexSVD result (ctmp, type);
-
-	  DiagMatrix sigma = result.singular_values ();
-
-	  if (nargout == 0 || nargout == 1)
-	    {
-	      retval(0) = sigma.diag ();
-	    }
-	  else
-	    {
-	      retval(2) = result.right_singular_matrix ();
-	      retval(1) = sigma;
-	      retval(0) = result.left_singular_matrix ();
-	    }
+	  retval(3) = identity_matrix (nr, nr);
+	  retval(2) = Matrix (nr, nc);
+	  retval(1) = identity_matrix (nc, nc);
 	}
+      else
+	retval(0) = Matrix (0, 1);
     }
   else
     {
-      gripe_wrong_type_arg ("svd", arg);
-      return retval;
+      SVD::type type = ((nargout == 0 || nargout == 1)
+			? SVD::sigma_only
+			: (nargin == 2) ? SVD::economy : SVD::std);
+
+      if (arg.is_real_type ())
+	{
+	  Matrix tmp = arg.matrix_value ();
+
+	  if (! error_state)
+	    {
+	      if (tmp.any_element_is_inf_or_nan ())
+		{
+		  error ("svd: cannot take SVD of matrix containing Inf or NaN values"); 
+		  return retval;
+		}
+
+	      SVD result (tmp, type);
+
+	      DiagMatrix sigma = result.singular_values ();
+
+	      if (nargout == 0 || nargout == 1)
+		{
+		  retval(0) = sigma.diag ();
+		}
+	      else
+		{
+		  retval(2) = result.right_singular_matrix ();
+		  retval(1) = sigma;
+		  retval(0) = result.left_singular_matrix ();
+		}
+	    }
+	}
+      else if (arg.is_complex_type ())
+	{
+	  ComplexMatrix ctmp = arg.complex_matrix_value ();
+
+	  if (! error_state)
+	    {
+	      if (ctmp.any_element_is_inf_or_nan ())
+		{
+		  error ("svd: cannot take SVD of matrix containing Inf or NaN values"); 
+		  return retval;
+		}
+
+	      ComplexSVD result (ctmp, type);
+
+	      DiagMatrix sigma = result.singular_values ();
+
+	      if (nargout == 0 || nargout == 1)
+		{
+		  retval(0) = sigma.diag ();
+		}
+	      else
+		{
+		  retval(2) = result.right_singular_matrix ();
+		  retval(1) = sigma;
+		  retval(0) = result.left_singular_matrix ();
+		}
+	    }
+	}
+      else
+	{
+	  gripe_wrong_type_arg ("svd", arg);
+	  return retval;
+	}
     }
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -994,31 +994,16 @@ DEFUN (zeros, args, ,
 @deftypefnx {Built-in Function} {} zeros (@var{n}, @var{m})\n\
 Return a matrix whose elements are all 0.  The arguments are handled\n\
 the same as the arguments for @code{eye}.\n\
 @end deftypefn")
 {
   return fill_matrix (args, 0.0, "zeros");
 }
 
-static Matrix
-identity_matrix (int nr, int nc)
-{
-  Matrix m (nr, nc, 0.0);
-
-  if (nr > 0 && nc > 0)
-    {
-      int n = MIN (nr, nc);
-      for (int i = 0; i < n; i++)
-	m (i, i) = 1.0;
-    }
-
-  return m;
-}
-
 DEFUN (eye, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} eye (@var{x})\n\
 @deftypefnx {Built-in Function} {} eye (@var{n}, @var{m})\n\
 Return an identity matrix.  If invoked with a single scalar argument,\n\
 @code{eye} returns a square matrix with the dimension specified.  If you\n\
 supply two scalar arguments, @code{eye} takes them to be the number of\n\
 rows and columns.  If given a vector with two elements, @code{eye} uses\n\
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -193,26 +193,17 @@ octave_base_matrix<MT>::assign (const oc
 }
 
 template <class MT>
 bool
 octave_base_matrix<MT>::is_true (void) const
 {
   bool retval = false;
 
-  if (rows () == 0 || columns () == 0)
-    {
-      int flag = Vpropagate_empty_matrices;
-
-      if (flag < 0)
-	warning ("empty matrix used in conditional expression");
-      else if (flag == 0)
-	error ("empty matrix used in conditional expression");
-    }
-  else
+  if (rows () > 0 && columns () > 0)
     {
       boolMatrix m = (matrix.all () . all ());
 
       retval = (m.rows () == 1 && m.columns () == 1 && m(0,0));
     }
 
   return retval;
 }
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -167,26 +167,17 @@ octave_range::any (int dim) const
   return m.any (dim);
 }
 
 bool
 octave_range::is_true (void) const
 {
   bool retval = false;
 
-  if (range.nelem () == 0)
-    {
-      int flag = Vpropagate_empty_matrices;
-
-      if (flag < 0)
-	warning ("empty range used in conditional expression");
-      else if (flag == 0)
-	error ("empty range used in conditional expression");
-    }
-  else
+  if (range.nelem () != 0)
     {
       // XXX FIXME XXX -- this is a potential waste of memory.
 
       Matrix m ((range.matrix_value () . all ()) . all ());
 
       retval = (m.rows () == 1 && m.columns () == 1 && m (0, 0) != 0.0);
     }
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -94,22 +94,16 @@ bool Vwarn_num_to_str;
 //   octave> 'abc' + 0
 //   97 98 99
 //
 int Vwarn_str_to_num;
 
 // If TRUE, print the name along with the value.
 bool Vprint_answer_id_name;
 
-// Should operations on empty matrices return empty matrices or an
-// error?  A positive value means yes.  A negative value means yes,
-// but print a warning message.  Zero means it should be considered an
-// error.
-int Vpropagate_empty_matrices;
-
 // How many levels of structure elements should we print?
 int Vstruct_levels_to_print;
 
 // Allow divide by zero errors to be suppressed.
 bool Vwarn_divide_by_zero;
 
 // If TRUE, print a warning when a matrix is resized by an indexed
 // assignment with indices outside the current bounds.
@@ -408,16 +402,23 @@ octave_value::octave_value (const Cell& 
 
 octave_value::octave_value (const Matrix& m)
   : rep (new octave_matrix (m))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
+octave_value::octave_value (const ArrayN<double>& a)
+  : rep (new octave_double_nd_array (a))
+{
+  rep->count = 1;
+  maybe_mutate ();
+}
+
 octave_value::octave_value (const DiagMatrix& d)
   : rep (new octave_matrix (d))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
 octave_value::octave_value (const RowVector& v)
@@ -443,16 +444,25 @@ octave_value::octave_value (const Comple
 
 octave_value::octave_value (const ComplexMatrix& m)
   : rep (new octave_complex_matrix (m))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
+#if 0
+octave_value::octave_value (const ArrayN<Complex>& a)
+  : rep (new octave_complex_nd_array (a))
+{
+  rep->count = 1;
+  maybe_mutate ();
+}
+#endif
+
 octave_value::octave_value (const ComplexDiagMatrix& d)
   : rep (new octave_complex_matrix (d))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
 octave_value::octave_value (const ComplexRowVector& v)
@@ -1791,24 +1801,16 @@ static int
 print_answer_id_name (void)
 {
   Vprint_answer_id_name = check_preference ("print_answer_id_name");
 
   return 0;
 }
 
 static int
-propagate_empty_matrices (void)
-{
-  Vpropagate_empty_matrices = check_preference ("propagate_empty_matrices");
-
-  return 0;
-}
-
-static int
 warn_resize_on_range_error (void)
 {
   Vwarn_resize_on_range_error
     = check_preference ("warn_resize_on_range_error");
 
   liboctave_wrore_flag = Vwarn_resize_on_range_error;
 
   return 0;
@@ -1854,24 +1856,16 @@ symbols_of_ov (void)
   DEFVAR (print_answer_id_name, true, print_answer_id_name,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} print_answer_id_name\n\
 If the value of @code{print_answer_id_name} is nonzero, variable\n\
 names are printed along with the result.  Otherwise, only the result\n\
 values are printed.  The default value is 1.\n\
 @end defvr");
 
-  DEFVAR (propagate_empty_matrices, true, propagate_empty_matrices,
-    "-*- texinfo -*-\n\
-@defvr {Built-in Variable} propagate_empty_matrices\n\
-If the value of @code{propagate_empty_matrices} is nonzero,\n\
-functions like @code{inverse} and @code{svd} will return an empty matrix\n\
-if they are given one as an argument.  The default value is 1.\n\
-@end defvr");
-
   DEFVAR (silent_functions, false, silent_functions,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} silent_functions\n\
 If the value of @code{silent_functions} is nonzero, internal output\n\
 from a function is suppressed.  Otherwise, the results of expressions\n\
 within a function body that are not terminated with a semicolon will\n\
 have their values printed.  The default value is 0.\n\
 \n\
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -178,21 +178,23 @@ public:
 #if defined (HAVE_UNSIGNED_LONG_LONG_INT)
   octave_value (unsigned long long int i);
 #endif
 
   octave_value (octave_time t);
   octave_value (double d);
   octave_value (const Cell& m);
   octave_value (const Matrix& m);
+  octave_value (const ArrayN<double>& m);
   octave_value (const DiagMatrix& d);
   octave_value (const RowVector& v);
   octave_value (const ColumnVector& v);
   octave_value (const Complex& C);
   octave_value (const ComplexMatrix& m);
+  octave_value (const ArrayN<Complex>& m);
   octave_value (const ComplexDiagMatrix& d);
   octave_value (const ComplexRowVector& v);
   octave_value (const ComplexColumnVector& v);
   octave_value (bool b);
   octave_value (const boolMatrix& bm);
   octave_value (char c);
   octave_value (const char *s);
   octave_value (const std::string& s);
@@ -739,22 +741,16 @@ extern bool Vwarn_num_to_str;
 extern int Vwarn_str_to_num;
 
 // Should we warn about conversions from complex to real?
 extern int Vwarn_imag_to_real;
 
 // If TRUE, print the name along with the value.
 extern bool Vprint_answer_id_name;
 
-// Should operations on empty matrices return empty matrices or an
-// error?  A positive value means yes.  A negative value means yes,
-// but print a warning message.  Zero means it should be considered an
-// error.
-extern int Vpropagate_empty_matrices;
-
 // How many levels of structure elements should we print?
 extern int Vstruct_levels_to_print;
 
 // Allow divide by zero errors to be suppressed.
 extern bool Vwarn_divide_by_zero;
 
 // If TRUE, print a warning when a matrix is resized by an indexed
 // assignment with indices outside the current bounds.
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -224,37 +224,17 @@ keyword_almost_match (const char * const
 }
 
 // Return non-zero if either NR or NC is zero.  Return -1 if this
 // should be considered fatal; return 1 if this is ok.
 
 int
 empty_arg (const char *name, int nr, int nc)
 {
-  int is_empty = 0;
-
-  if (nr == 0 || nc == 0)
-    {
-      int flag = Vpropagate_empty_matrices;
-
-      if (flag < 0)
-	{
-	  gripe_empty_arg (name, 0);
-	  is_empty = 1;
-	}
-      else if (flag == 0)
-	{
-	  gripe_empty_arg (name, 1);
-	  is_empty = -1;
-	}
-      else
-	is_empty = 1;
-    }
-
-  return is_empty;
+  return (nr == 0 || nc == 0);
 }
 
 // See if the given file is in the path.
 
 std::string
 search_path_for_file (const std::string& path, const string_vector& names)
 {
   dir_path p (path);
@@ -823,16 +803,32 @@ get_dimensions (const octave_value& a, c
   nc = b.is_empty () ? 0 : b.nint_value ();
 
   if (error_state)
     error ("%s: expecting two scalar arguments", warn_for);
   else
     check_dimensions (nr, nc, warn_for); // May set error_state.
 }
 
+Matrix
+identity_matrix (int nr, int nc)
+{
+  Matrix m (nr, nc, 0.0);
+
+  if (nr > 0 && nc > 0)
+    {
+      int n = std::min (nr, nc);
+
+      for (int i = 0; i < n; i++)
+	m (i, i) = 1.0;
+    }
+
+  return m;
+}
+
 extern int
 octave_format (std::ostream& os, const char *fmt, ...)
 {
   int retval = -1;
 
   va_list args;
   va_start (args, fmt);
 
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -23,16 +23,17 @@ Software Foundation, 59 Temple Place - S
 #if !defined (octave_utils_h)
 #define octave_utils_h 1
 
 #include <cstdarg>
 
 #include <iostream>
 #include <string>
 
+#include "dMatrix.h"
 #include "lo-utils.h"
 
 class octave_value;
 class octave_value_list;
 class string_vector;
 
 extern bool valid_identifier (const char *s);
 extern bool valid_identifier (const std::string& s);
@@ -68,16 +69,18 @@ extern int check_preference (const std::
 extern void
 get_dimensions (const octave_value& a, const octave_value& b,
 		const char *warn_for, int& nr, int& nc);
 
 extern void
 get_dimensions (const octave_value& a,
 		const char *warn_for, int& nr, int& nc);
 
+extern Matrix identity_matrix (int nr, int nc);
+
 extern int
 octave_format (std::ostream& os, const char *fmt, ...);
 
 extern int
 octave_vformat (std::ostream& os, const char *fmt, va_list args);
 
 extern char *octave_vsnprintf (const char *fmt, va_list args);
 
diff --git a/test/octave.test/prefer/prefer-23.m b/test/octave.test/prefer/prefer-23.m
--- a/test/octave.test/prefer/prefer-23.m
+++ b/test/octave.test/prefer/prefer-23.m
@@ -1,2 +1,1 @@
-propagate_empty_matrices = 0;
 inv ([]) == []
diff --git a/test/octave.test/prefer/prefer-24.m b/test/octave.test/prefer/prefer-24.m
--- a/test/octave.test/prefer/prefer-24.m
+++ b/test/octave.test/prefer/prefer-24.m
@@ -1,2 +1,1 @@
-propagate_empty_matrices = 1;
-inv ([]) == []
+all (svd ([]) == zeros (0, 1))
diff --git a/test/octave.test/prefer/prefer.exp b/test/octave.test/prefer/prefer.exp
--- a/test/octave.test/prefer/prefer.exp
+++ b/test/octave.test/prefer/prefer.exp
@@ -89,22 +89,20 @@ do_test prefer-20.m
 set test print-empty-dimensions-1
 set prog_output "[]"
 do_test prefer-21.m
 
 set test print-empty-dimensions-2
 set prog_output "[](3x0)"
 do_test prefer-22.m
 
-## propagate_empty_matrices
-
-## This should maybe test more functions...
+## These tests maybe don't belong here now...
 
 set test propagate-empty-matrices-1
-set prog_output "^error:.*"
+set prog_output "^ans = 1"
 do_test prefer-23.m
 
 set test propagate-empty-matrices-2
 set prog_output "^ans = 1"
 do_test prefer-24.m
 
 ## return_last_computed_value
 
