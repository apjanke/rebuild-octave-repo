# HG changeset patch
# User jwe
# Date 1109117938 0
#      Wed Feb 23 00:18:58 2005 +0000
# Node ID 8ca032643f554541dbe9d1bd2efed1f18b6e3961
# Parent  7c3b22bafedc0e97cad97ac836c37597c4e14ee1
[project @ 2005-02-23 00:18:58 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,18 @@
 2005-02-22  John W. Eaton  <jwe@octave.org>
 
+	* ov-base-int.cc (octave_baes_int_matrix<T>::load_binary):
+	Handle arrays with only one dimension.
+	* ov-bool-mat.cc (octave_bool_matrix::load_binary): Likewise.
+	* ov-cell.cc (octave_cell::load_binary): Likewise.
+	* ov-cell.cc (octave_complex_matrix::load_binary): Likewise.
+	* ov-re-mat.cc (octave_matrix::load_binary): Likewise.
+	* ov-str-mat.cc (octave_char_matrix_str::load_binary): Likewise.
+
 	* ov-mapper.cc (octave_mapper::subsref): Return retval after
 	calling next_subsref.
 
 	* ov-mapper.cc (octave_builtin::subsref): If nargout is 0 and we
 	have additional indexing to perform, set it to 1 before calling
 	do_multi_index_op.
 
 	* oct-map.cc (Octave_map::intfield, Octave_map::stringfield):
diff --git a/src/ov-base-int.cc b/src/ov-base-int.cc
--- a/src/ov-base-int.cc
+++ b/src/ov-base-int.cc
@@ -168,16 +168,28 @@ octave_base_int_matrix<T>::load_binary (
     {
       if (! is.read (X_CAST (char *, &di), 4))
 	return false;
       if (swap)
 	swap_bytes<4> (&di);
       dv(i) = di;
     }
 
+  // Convert an array with a single dimension to be a row vector.
+  // Octave should never write files like this, other software
+  // might.
+
+  if (mdims == 1)
+    {
+      mdims = 2;
+      dv.resize (mdims);
+      dv(1) = dv(0);
+      dv(0) = 1;
+    }
+
   T m (dv);
 
   if (! is.read (X_CAST (char *, m.data ()), m.byte_size ()))
     return false;
 
   if (swap)
     {
       int nel = dv.numel ();
diff --git a/src/ov-bool-mat.cc b/src/ov-bool-mat.cc
--- a/src/ov-bool-mat.cc
+++ b/src/ov-bool-mat.cc
@@ -329,16 +329,28 @@ octave_bool_matrix::load_binary (std::is
     {
       if (! is.read (X_CAST (char *, &di), 4))
 	return false;
       if (swap)
 	swap_bytes<4> (&di);
       dv(i) = di;
     }
   
+  // Convert an array with a single dimension to be a row vector.
+  // Octave should never write files like this, other software
+  // might.
+
+  if (mdims == 1)
+    {
+      mdims = 2;
+      dv.resize (mdims);
+      dv(1) = dv(0);
+      dv(0) = 1;
+    }
+
   int nel = dv.numel ();
   OCTAVE_LOCAL_BUFFER (char, htmp, nel);
   if (! is.read (htmp, nel))
     return false;
   boolNDArray m(dv);
   bool *mtmp = m.fortran_vec ();
   for (int i = 0; i < nel; i++)
     mtmp[i] = (htmp[i] ? 1 : 0);
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -663,16 +663,28 @@ octave_cell::load_binary (std::istream& 
     {
       if (! is.read (X_CAST (char *, &di), 4))
 	return false;
       if (swap)
 	swap_bytes<4> (&di);
       dv(i) = di;
     }
   
+  // Convert an array with a single dimension to be a row vector.
+  // Octave should never write files like this, other software
+  // might.
+
+  if (mdims == 1)
+    {
+      mdims = 2;
+      dv.resize (mdims);
+      dv(1) = dv(0);
+      dv(0) = 1;
+    }
+
   int nel = dv.numel ();
   Cell tmp(dv);
 
   for (int i = 0; i < nel; i++)
     {
       octave_value t2;
       bool dummy;
       std::string doc;
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -416,16 +416,28 @@ octave_complex_matrix::load_binary (std:
 	{
 	  if (! is.read (X_CAST (char *, &di), 4))
 	    return false;
 	  if (swap)
 	    swap_bytes<4> (&di);
 	  dv(i) = di;
 	}
 
+      // Convert an array with a single dimension to be a row vector.
+      // Octave should never write files like this, other software
+      // might.
+
+      if (mdims == 1)
+	{
+	  mdims = 2;
+	  dv.resize (mdims);
+	  dv(1) = dv(0);
+	  dv(0) = 1;
+	}
+
       if (! is.read (X_CAST (char *, &tmp), 1))
 	return false;
 
       ComplexNDArray m(dv);
       Complex *im = m.fortran_vec ();
       read_doubles (is, X_CAST (double *, im), X_CAST (save_type, tmp), 
 		    2 * dv.numel (), swap, fmt);
       if (error_state || ! is)
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -470,16 +470,28 @@ octave_matrix::load_binary (std::istream
 	{
 	  if (! is.read (X_CAST (char *, &di), 4))
 	    return false;
 	  if (swap)
 	    swap_bytes<4> (&di);
 	  dv(i) = di;
 	}
 
+      // Convert an array with a single dimension to be a row vector.
+      // Octave should never write files like this, other software
+      // might.
+
+      if (mdims == 1)
+	{
+	  mdims = 2;
+	  dv.resize (mdims);
+	  dv(1) = dv(0);
+	  dv(0) = 1;
+	}
+
       if (! is.read (X_CAST (char *, &tmp), 1))
 	return false;
 
       NDArray m(dv);
       double *re = m.fortran_vec ();
       read_doubles (is, re, X_CAST (save_type, tmp), dv.numel (), swap, fmt);
       if (error_state || ! is)
 	return false;
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -470,16 +470,28 @@ octave_char_matrix_str::load_binary (std
 	{
 	  if (! is.read (X_CAST (char *, &di), 4))
 	    return false;
 	  if (swap)
 	    swap_bytes<4> (&di);
 	  dv(i) = di;
 	}
       
+      // Convert an array with a single dimension to be a row vector.
+      // Octave should never write files like this, other software
+      // might.
+
+      if (mdims == 1)
+	{
+	  mdims = 2;
+	  dv.resize (mdims);
+	  dv(1) = dv(0);
+	  dv(0) = 1;
+	}
+
       charNDArray m(dv);
       char *tmp = m.fortran_vec ();
       is.read (tmp, dv.numel ());
       
       if (error_state || ! is)
 	return false;
       matrix = m;
     }
