# HG changeset patch
# User jwe
# Date 1018560289 0
#      Thu Apr 11 21:24:49 2002 +0000
# Node ID efa508da7d5c6d7494cf2cb6bfe83e325d214cca
# Parent  0486f50a8ecb86e42fad95d5dbe7d66e7f3b5562
[project @ 2002-04-11 21:24:49 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,14 @@
+2002-04-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in: Declare F2C and F2CFLAGS with AC_ARG_VAR.
+	Delete AC_SUBST calls for F77, FFLAGS, FLIBS, F2C, F2CFLAGS (no
+	need to do this explicitly now).
+
 2002-04-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makeconf.in: Set and substitute EXEEXT, not EXE.
 
 	* configure.in (EXE): Delete check and substitution.
 	* install-octave.in: Use EXEEXT instead of EXE.
 
 	* configure.in: Use AC_CHECK_MEMBERS, not OCTAVE_STRUCT_GR_PASSWD.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.355 $)
+AC_REVISION($Revision: 1.356 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -457,16 +457,18 @@ else
       ;;
     esac
     if test -n "$FFLAGS"; then
       AC_MSG_RESULT([defining FFLAGS to be $FFLAGS])
     fi
     have_fortran_compiler=true
   else
     AC_CHECK_PROG(F2C, f2c, f2c, [])
+    AC_ARG_VAR(F2C, [Fortran to C translator command])
+    AC_ARG_VAR(F2CFLAGS, [Fortran to C translator flags])
     if test -n "$F2C"; then
       have_f2c=true
     fi
   fi
 fi
 
 f77_rules_frag=/dev/null
 if $have_fortran_compiler; then
@@ -523,21 +525,16 @@ EOF
 else
   AC_MSG_WARN([in order to build octave, you must have a compatible])
   AC_MSG_WARN([Fortran compiler or f2c installed and in your path.])
   AC_MSG_ERROR([See the file INSTALL for more information.])
 fi
 
 FC=$F77
 AC_SUBST(FC)
-AC_SUBST(F77)
-AC_SUBST(FFLAGS)
-AC_SUBST(FLIBS)
-AC_SUBST(F2C)
-AC_SUBST(F2CFLAGS)
 AC_SUBST_FILE(f77_rules_frag)
 
 ### Checks for BLAS and LAPACK libraries:
 # (Build subdirectories of libcruft if they aren't found on the system.)
 
 sinclude(acx_blas.m4)
 sinclude(acx_lapack.m4)
 ACX_BLAS([], [BLAS_DIR="blas"])
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2002-04-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* load-save.cc (hdf5_ofstream::hdf5_ofstream):
+	Explicitly List std::ostream(0) in constructor.
+	(hdf5_ifstream::hdf5_ifstream):
+	Explicitly List std::istream(0) in constructor.
+	(hdf5_fstreambase::hdf5_fstreambase): Use std::ios::setstate, not set.
+	(hdf5_fstreambase::close): Likewise.
+	(hdf5_fstreambase::open): Likewise.
+
 2002-04-10  Ben Sapp <bsapp@lanl.gov>
 
 	* pt-stmt.cc (delete_breakpoint): List breakpoints if line < 0.
 	* debug.cc (get_user_function): Check symbol by name first.
 	(Fdbstop): Rename from Fdbg_set.
 	(Fdbclear): Rename from Fdbg_delete.
 	(Fdbstatus): Rename from Fdbg_list.
 	(Fdbg_where): Rename from Fdbwhere.
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -1054,71 +1054,71 @@ public:
   hdf5_fstreambase (const char *name, int mode, int prot = 0)
     {
       if (mode == std::ios::in)
 	file_id = H5Fopen (name, H5F_ACC_RDONLY, H5P_DEFAULT);
       else if (mode == std::ios::out)
 	file_id = H5Fcreate (name, H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);
 
       if (file_id < 0)
-	set (std::ios::badbit);
+	std::ios::setstate (std::ios::badbit);
 
       current_item = 0;
     }
 
   void close ()
     { 
       if (file_id >= 0)
 	{
 	  if (H5Fclose (file_id) < 0)
-	    set (std::ios::badbit);
+	    std::ios::setstate (std::ios::badbit);
 	  file_id = -1;
 	}
     }
 
   void open (const char *name, int mode, int prot = 0)
     {
       clear ();
 
       if (mode == std::ios::in)
 	file_id = H5Fopen (name, H5F_ACC_RDONLY, H5P_DEFAULT);
       else if (mode == std::ios::out)
 	file_id = H5Fcreate (name, H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);
 
       if (file_id < 0)
-	set (std::ios::badbit);
+	std::ios::setstate (std::ios::badbit);
 
       current_item = 0;
     }
 };
 
 // input and output streams, subclassing istream and ostream
 // so that we can pass them for stream parameters in the functions below.
 
 class hdf5_ifstream : public hdf5_fstreambase, public std::istream
 {
 public:
 
-  hdf5_ifstream () : hdf5_fstreambase () { }
+  hdf5_ifstream () : hdf5_fstreambase (), std::istream (0) { }
 
   hdf5_ifstream (const char *name, int mode = std::ios::in, int prot = 0)
-    : hdf5_fstreambase (name, mode, prot) { }
+    : hdf5_fstreambase (name, mode, prot), std::istream (0) { }
 
   void open (const char *name, int mode = std::ios::in, int prot = 0)
     { hdf5_fstreambase::open (name, mode, prot); }
 };
 
 class hdf5_ofstream : public hdf5_fstreambase, public std::ostream
 {
 public:
 
-  hdf5_ofstream () : hdf5_fstreambase () { }
+  hdf5_ofstream () : hdf5_fstreambase (), std::ostream (0) { }
 
   hdf5_ofstream (const char *name, int mode = std::ios::out, int prot = 0)
-    : hdf5_fstreambase (name, mode, prot) { }
+    : hdf5_fstreambase (name, mode, prot), std::ostream (0) { }
 
   void open (const char *name, int mode = std::ios::out, int prot = 0)
     { hdf5_fstreambase::open (name, mode, prot); }
 };
 
 // Given two compound types t1 and t2, determine whether they 
 // are compatible for reading/writing.  This function only
 // works for non-nested types composed of simple elements (ints, floats...),
