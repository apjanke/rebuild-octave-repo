# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1268920552 -3600
#      Thu Mar 18 14:55:52 2010 +0100
# Node ID 99e9bae2d81eb68e16480d8e7305f62002731bed
# Parent  3373fdc0b14a58b0c566b8f6153243452283523a
improve sparse indexing interface

diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -7193,33 +7193,28 @@ SparseComplexMatrix::operator ! (void) c
 
 SparseComplexMatrix 
 SparseComplexMatrix::squeeze (void) const
 { 
   return MSparse<Complex>::squeeze (); 
 }
 
 SparseComplexMatrix
-SparseComplexMatrix::index (idx_vector& i, int resize_ok) const 
+SparseComplexMatrix::index (const idx_vector& i, bool resize_ok) const 
 { 
   return MSparse<Complex>::index (i, resize_ok); 
 }
 
 SparseComplexMatrix
-SparseComplexMatrix::index (idx_vector& i, idx_vector& j, int resize_ok) const 
+SparseComplexMatrix::index (const idx_vector& i, const idx_vector& j, bool resize_ok) const 
 { 
   return MSparse<Complex>::index (i, j, resize_ok); 
 }
   
 SparseComplexMatrix
-SparseComplexMatrix::index (Array<idx_vector>& ra_idx, int resize_ok) const 
-{ 
-  return MSparse<Complex>::index (ra_idx, resize_ok); 
-}
-SparseComplexMatrix
 SparseComplexMatrix::reshape (const dim_vector& new_dims) const
 {
   return MSparse<Complex>::reshape (new_dims);
 }
 
 SparseComplexMatrix
 SparseComplexMatrix::permute (const Array<octave_idx_type>& vec, bool inv) const
 {
diff --git a/liboctave/CSparse.h b/liboctave/CSparse.h
--- a/liboctave/CSparse.h
+++ b/liboctave/CSparse.h
@@ -395,21 +395,19 @@ public:
   ComplexColumnVector solve (const ComplexColumnVector& b, octave_idx_type& info,
                              double& rcond) const;
   ComplexColumnVector solve (const ComplexColumnVector& b, octave_idx_type& info,
                              double& rcond,
                              solve_singularity_handler sing_handler) const;
 
   SparseComplexMatrix squeeze (void) const;
 
-  SparseComplexMatrix index (idx_vector& i, int resize_ok) const;
+  SparseComplexMatrix index (const idx_vector& i, bool resize_ok) const;
 
-  SparseComplexMatrix index (idx_vector& i, idx_vector& j, int resize_ok) const;
-  
-  SparseComplexMatrix index (Array<idx_vector>& ra_idx, int resize_ok) const;
+  SparseComplexMatrix index (const idx_vector& i, const idx_vector& j, bool resize_ok) const;
 
   SparseComplexMatrix reshape (const dim_vector& new_dims) const;
 
   SparseComplexMatrix permute (const Array<octave_idx_type>& vec, 
                                bool inv = false) const;
 
   SparseComplexMatrix ipermute (const Array<octave_idx_type>& vec) const;
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2010-03-18  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Sparse.h (Sparse<T>::index): Use const references. Use bool for
+	resize_ok. Remove Array<idx_vector> overload.
+	* MSparse.h (MSparse<T>::index): Ditto.
+	* dSparse.h, dSparse.cc (SparseMatrix::index): Ditto.
+	* CSparse.h, CSparse.cc (SparseComplexMatrix::index): Ditto.
+	* boolSparse.h, boolSparse.cc (SparseBoolMatrix::index): Ditto.
+	* Sparse.cc (Sparse<T>::index): Ditto. Redim index to 2 dimensions.
+	Don't use non-const methods. Use gripe_index_out_of_range.
+
 2010-03-17  John W. Eaton  <jwe@octave.org>
 
 	* dim-vector.h (dim_vector): Also use DIM_VECTOR macro for 2 and
 	3 dimensions.
 
 2010-03-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* lo-macros.h: New source.
diff --git a/liboctave/MSparse.h b/liboctave/MSparse.h
--- a/liboctave/MSparse.h
+++ b/liboctave/MSparse.h
@@ -88,25 +88,22 @@ public:
     Sparse<T>::insert (a, indx);
     return *this;
   }
 
   MSparse<T> transpose (void) const { return Sparse<T>::transpose (); }
 
   MSparse<T> squeeze (void) const { return Sparse<T>::squeeze (); }
 
-  MSparse<T> index (idx_vector& i, int resize_ok) const 
+  MSparse<T> index (const idx_vector& i, bool resize_ok) const 
     { return Sparse<T>::index (i, resize_ok); }
 
-  MSparse<T> index (idx_vector& i, idx_vector& j, int resize_ok) const 
+  MSparse<T> index (const idx_vector& i, const idx_vector& j, bool resize_ok) const 
     { return Sparse<T>::index (i, j, resize_ok); }
   
-  MSparse<T> index (Array<idx_vector>& ra_idx, int resize_ok) const 
-    { return Sparse<T>::index (ra_idx, resize_ok); }
-
   MSparse<T> reshape (const dim_vector& new_dims) const
     { return Sparse<T>::reshape (new_dims); }
      
   MSparse<T> permute (const Array<octave_idx_type>& vec, bool inv = false) const
     { return Sparse<T>::permute (vec, inv); }
 
   MSparse<T> ipermute (const Array<octave_idx_type>& vec) const
     { return Sparse<T>::ipermute (vec); }
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -1606,59 +1606,64 @@ Sparse<T>::value (void)
 
   clear_index ();
 
   return retval;
 }
 
 template <class T>
 Sparse<T>
-Sparse<T>::index (idx_vector& idx_arg, int resize_ok) const
+Sparse<T>::index (const idx_vector& idx_arg, bool resize_ok) const
 {
   Sparse<T> retval;
 
   assert (ndims () == 2);
 
   octave_idx_type nr = dim1 ();
   octave_idx_type nc = dim2 ();
   octave_idx_type nz = nnz ();
 
+  // Use safe_numel so that we get an error if the matrix is too big to be indexed.
   octave_idx_type orig_len = nr * nc;
 
   dim_vector idx_orig_dims = idx_arg.orig_dimensions ();
 
   octave_idx_type idx_orig_rows = idx_arg.orig_rows ();
   octave_idx_type idx_orig_columns = idx_arg.orig_columns ();
 
   if (idx_orig_dims.length () > 2)
     (*current_liboctave_error_handler)
-      ("Sparse<T>::index: Can not index Sparse<T> with an N-D Array");
+      ("cannot index sparse matrix with an N-D Array");
   else if (idx_arg.is_colon ())
     {
       // Fast magic colon processing.
       retval = Sparse<T> (nr * nc, 1, nz);
 
       for (octave_idx_type i = 0; i < nc; i++)
         for (octave_idx_type j = cidx(i); j < cidx(i+1); j++)
           {
             octave_quit ();
             retval.xdata(j) = data(j); 
             retval.xridx(j) = ridx(j) + i * nr;
           }
       retval.xcidx(0) = 0;
       retval.xcidx(1) = nz;
     }
+  else if (! resize_ok && idx_arg.extent (length ()) > length ())
+    {
+      gripe_index_out_of_range (1, 1, idx_arg.extent (orig_len), orig_len);
+    }
   else if (nr == 1 && nc == 1)
     {
       // You have to be pretty sick to get to this bit of code,
       // since you have a scalar stored as a sparse matrix, and
       // then want to make a dense matrix with sparse 
       // representation. Ok, we'll do it, but you deserve what 
       // you get!!
-      octave_idx_type n = idx_arg.freeze (length (), "sparse vector", resize_ok);
+      octave_idx_type n = idx_arg.length (length ());
       if (n == 0)
 
           retval = Sparse<T> (idx_orig_dims);
       else if (nz < 1)
         if (n >= idx_orig_dims.numel ())
           retval = Sparse<T> (idx_orig_dims);
         else
           retval = Sparse<T> (dim_vector (n, 1));
@@ -1704,17 +1709,17 @@ Sparse<T>::index (idx_vector& idx_arg, i
         }
     }
   else if (nr == 1 || nc == 1)
     {
       // If indexing a vector with a matrix, return value has same
       // shape as the index.  Otherwise, it has same orientation as
       // indexed object.
       octave_idx_type len = length ();
-      octave_idx_type n = idx_arg.freeze (len, "sparse vector", resize_ok);
+      octave_idx_type n = idx_arg.length (len);
       octave_idx_type l, u;
       if (n == 0)
         if (nr == 1)
           retval = Sparse<T> (dim_vector (1, 0));
         else
           retval = Sparse<T> (dim_vector (0, 1));
       else if (nz < 1)
         if (idx_orig_rows == 1 || idx_orig_columns == 1)
@@ -1912,121 +1917,119 @@ Sparse<T>::index (idx_vector& idx_arg, i
   else
     {
       (*current_liboctave_warning_with_id_handler) 
         ("Octave:fortran-indexing", "single index used for sparse matrix");
 
       // This code is only for indexing matrices.  The vector
       // cases are handled above.
 
-      idx_arg.freeze (nr * nc, "matrix", resize_ok);
-
-      if (idx_arg)
+      octave_idx_type result_nr = idx_orig_rows;
+      octave_idx_type result_nc = idx_orig_columns;
+
+      if (nz < 1)
+        retval = Sparse<T> (result_nr, result_nc);
+      else
         {
-          octave_idx_type result_nr = idx_orig_rows;
-          octave_idx_type result_nc = idx_orig_columns;
-
-          if (nz < 1)
-            retval = Sparse<T> (result_nr, result_nc);
-          else
+          // Count number of non-zero elements
+          octave_idx_type new_nzmx = 0;
+          octave_idx_type kk = 0;
+          for (octave_idx_type j = 0; j < result_nc; j++)
             {
-              // Count number of non-zero elements
-              octave_idx_type new_nzmx = 0;
-              octave_idx_type kk = 0;
-              for (octave_idx_type j = 0; j < result_nc; j++)
+              for (octave_idx_type i = 0; i < result_nr; i++)
                 {
-                  for (octave_idx_type i = 0; i < result_nr; i++)
+                  octave_quit ();
+
+                  octave_idx_type ii = idx_arg.elem (kk++);
+                  if (ii < orig_len)
                     {
-                      octave_quit ();
-                      
-                      octave_idx_type ii = idx_arg.elem (kk++);
-                      if (ii < orig_len)
+                      octave_idx_type fr = ii % nr;
+                      octave_idx_type fc = (ii - fr) / nr;
+                      for (octave_idx_type k = cidx(fc); k < cidx(fc+1); k++)
                         {
-                          octave_idx_type fr = ii % nr;
-                          octave_idx_type fc = (ii - fr) / nr;
-                          for (octave_idx_type k = cidx(fc); k < cidx(fc+1); k++)
-                            {
-                              if (ridx(k) == fr)
-                                new_nzmx++;
-                              if (ridx(k) >= fr)
-                                break;
-                            }
+                          if (ridx(k) == fr)
+                            new_nzmx++;
+                          if (ridx(k) >= fr)
+                            break;
                         }
                     }
                 }
-              
-              retval = Sparse<T> (result_nr, result_nc, new_nzmx);
-
-              kk = 0;
-              octave_idx_type jj = 0;
-              retval.xcidx(0) = 0;
-              for (octave_idx_type j = 0; j < result_nc; j++)
+            }
+
+          retval = Sparse<T> (result_nr, result_nc, new_nzmx);
+
+          kk = 0;
+          octave_idx_type jj = 0;
+          retval.xcidx(0) = 0;
+          for (octave_idx_type j = 0; j < result_nc; j++)
+            {
+              for (octave_idx_type i = 0; i < result_nr; i++)
                 {
-                  for (octave_idx_type i = 0; i < result_nr; i++)
+                  octave_quit ();
+
+                  octave_idx_type ii = idx_arg.elem (kk++);
+                  if (ii < orig_len)
                     {
-                      octave_quit ();
-
-                      octave_idx_type ii = idx_arg.elem (kk++);
-                      if (ii < orig_len)
+                      octave_idx_type fr = ii % nr;
+                      octave_idx_type fc = (ii - fr) / nr;
+                      for (octave_idx_type k = cidx(fc); k < cidx(fc+1); k++)
                         {
-                          octave_idx_type fr = ii % nr;
-                          octave_idx_type fc = (ii - fr) / nr;
-                          for (octave_idx_type k = cidx(fc); k < cidx(fc+1); k++)
+                          if (ridx(k) == fr)
                             {
-                              if (ridx(k) == fr)
-                                {
-                                  retval.xdata(jj) = data(k);
-                                  retval.xridx(jj++) = i;
-                                }
-                              if (ridx(k) >= fr)
-                                break;
+                              retval.xdata(jj) = data(k);
+                              retval.xridx(jj++) = i;
                             }
+                          if (ridx(k) >= fr)
+                            break;
                         }
                     }
-                  retval.xcidx(j+1) = jj;
                 }
+              retval.xcidx(j+1) = jj;
             }
-          // idx_vector::freeze() printed an error message for us.
         }
     }
 
   return retval;
 }
 
 struct 
 idx_node 
 {
   octave_idx_type i;
   struct idx_node *next;
 };                  
 
 template <class T>
 Sparse<T>
-Sparse<T>::index (idx_vector& idx_i, idx_vector& idx_j, int resize_ok) const
+Sparse<T>::index (const idx_vector& idx_i, const idx_vector& idx_j, bool resize_ok) const
 {
   Sparse<T> retval;
 
   assert (ndims () == 2);
 
   octave_idx_type nr = dim1 ();
   octave_idx_type nc = dim2 ();
 
-  octave_idx_type n = idx_i.freeze (nr, "row", resize_ok);
-  octave_idx_type m = idx_j.freeze (nc, "column", resize_ok);
-
-  if (idx_i && idx_j)
+  octave_idx_type n = idx_i.length (nr);
+  octave_idx_type m = idx_j.length (nc);
+
+  if (! resize_ok && idx_i.extent (nr) > nr)
+    gripe_index_out_of_range (2, 1, idx_i.extent (nr), nr);
+  else if (! resize_ok && idx_j.extent (nc) > nc)
+    gripe_index_out_of_range (2, 2, idx_j.extent (nc), nc);
+  else
     {
-      if (idx_i.orig_empty () || idx_j.orig_empty () || n == 0 || m == 0)
+      if (n == 0 || m == 0)
         {
           retval.resize_no_fill (n, m);
         }
       else 
         {
-          int idx_i_colon = idx_i.is_colon_equiv (nr);
-          int idx_j_colon = idx_j.is_colon_equiv (nc);
+          bool idx_i_colon = idx_i.is_colon_equiv (nr);
+          bool idx_j_colon = idx_j.is_colon_equiv (nc);
 
           if (idx_i_colon && idx_j_colon)
             {
               retval = *this;
             }
           else
             {
               // Identify if the indices have any repeated values
@@ -2208,35 +2211,20 @@ Sparse<T>::index (idx_vector& idx_i, idx
                             retval.xdata (p) = X [retval.xridx (p)]; 
                           retval.xcidx(j+1) = kk;
                         }
                     }
                 }
             }
         }
     }
-  // idx_vector::freeze() printed an error message for us.
 
   return retval;
 }
 
-template <class T>
-Sparse<T>
-Sparse<T>::index (Array<idx_vector>& ra_idx, int resize_ok) const
-{
-
-  if (ra_idx.length () != 2)
-    {
-      (*current_liboctave_error_handler) ("range error for index");
-      return *this;
-    }
-
-  return index (ra_idx (0), ra_idx (1), resize_ok);
-}
-
 // Can't use versions of these in Array.cc due to duplication of the 
 // instantiations for Array<double and Sparse<double>, etc
 template <class T>
 bool 
 sparse_ascending_compare (typename ref_param<T>::type a, 
                           typename ref_param<T>::type b)
 {
   return (a < b);
diff --git a/liboctave/Sparse.h b/liboctave/Sparse.h
--- a/liboctave/Sparse.h
+++ b/liboctave/Sparse.h
@@ -490,21 +490,19 @@ public:
   void maybe_delete_elements (idx_vector& i);
 
   void maybe_delete_elements (idx_vector& i, idx_vector& j);
 
   void maybe_delete_elements (Array<idx_vector>& ra_idx);
 
   Sparse<T> value (void);
 
-  Sparse<T> index (idx_vector& i, int resize_ok = 0) const;
+  Sparse<T> index (const idx_vector& i, bool resize_ok = false) const;
 
-  Sparse<T> index (idx_vector& i, idx_vector& j, int resize_ok = 0) const;
-
-  Sparse<T> index (Array<idx_vector>& ra_idx, int resize_ok = 0) const;
+  Sparse<T> index (const idx_vector& i, const idx_vector& j, bool resize_ok = false) const;
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
   // Unsafe.  These functions exist to support the MEX interface.
   // You should not use them anywhere else.
   void *mex_get_data (void) const { return const_cast<T *> (data ()); }
 
   octave_idx_type *mex_get_ir (void) const { return const_cast<octave_idx_type *> (ridx ()); }
diff --git a/liboctave/boolSparse.cc b/liboctave/boolSparse.cc
--- a/liboctave/boolSparse.cc
+++ b/liboctave/boolSparse.cc
@@ -187,34 +187,28 @@ operator >> (std::istream& is, SparseBoo
 
 SparseBoolMatrix
 SparseBoolMatrix::squeeze (void) const 
 { 
   return Sparse<bool>::squeeze (); 
 }
 
 SparseBoolMatrix
-SparseBoolMatrix::index (idx_vector& i, int resize_ok) const 
+SparseBoolMatrix::index (const idx_vector& i, bool resize_ok) const 
 { 
   return Sparse<bool>::index (i, resize_ok); 
 }
 
 SparseBoolMatrix
-SparseBoolMatrix::index (idx_vector& i, idx_vector& j, int resize_ok) const 
+SparseBoolMatrix::index (const idx_vector& i, const idx_vector& j, bool resize_ok) const 
 { 
   return Sparse<bool>::index (i, j, resize_ok); 
 }
   
 SparseBoolMatrix
-SparseBoolMatrix::index (Array<idx_vector>& ra_idx, int resize_ok) const 
-{ 
-  return Sparse<bool>::index (ra_idx, resize_ok); 
-}
-
-SparseBoolMatrix
 SparseBoolMatrix::reshape (const dim_vector& new_dims) const
 {
   return Sparse<bool>::reshape (new_dims);
 }
 
 SparseBoolMatrix
 SparseBoolMatrix::permute (const Array<octave_idx_type>& vec, bool inv) const
 {
diff --git a/liboctave/boolSparse.h b/liboctave/boolSparse.h
--- a/liboctave/boolSparse.h
+++ b/liboctave/boolSparse.h
@@ -89,21 +89,19 @@ public:
                            const Array<octave_idx_type>& ra_idx);
 
   SparseBoolMatrix diag (octave_idx_type k = 0) const;
 
   boolMatrix matrix_value (void) const;
 
   SparseBoolMatrix squeeze (void) const;
 
-  SparseBoolMatrix index (idx_vector& i, int resize_ok) const;
+  SparseBoolMatrix index (const idx_vector& i, bool resize_ok) const;
 
-  SparseBoolMatrix index (idx_vector& i, idx_vector& j, int resize_ok) const;
-  
-  SparseBoolMatrix index (Array<idx_vector>& ra_idx, int resize_ok) const;
+  SparseBoolMatrix index (const idx_vector& i, const idx_vector& j, bool resize_ok) const;
 
   SparseBoolMatrix reshape (const dim_vector& new_dims) const;
 
   SparseBoolMatrix permute (const Array<octave_idx_type>& vec, bool inv = false) const;
 
   SparseBoolMatrix ipermute (const Array<octave_idx_type>& vec) const;
 
   // unary operations
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -7594,34 +7594,28 @@ operator >> (std::istream& is, SparseMat
 
 SparseMatrix
 SparseMatrix::squeeze (void) const 
 { 
   return MSparse<double>::squeeze (); 
 }
 
 SparseMatrix
-SparseMatrix::index (idx_vector& i, int resize_ok) const 
+SparseMatrix::index (const idx_vector& i, bool resize_ok) const 
 { 
   return MSparse<double>::index (i, resize_ok); 
 }
 
 SparseMatrix
-SparseMatrix::index (idx_vector& i, idx_vector& j, int resize_ok) const 
+SparseMatrix::index (const idx_vector& i, const idx_vector& j, bool resize_ok) const 
 { 
   return MSparse<double>::index (i, j, resize_ok); 
 }
   
 SparseMatrix
-SparseMatrix::index (Array<idx_vector>& ra_idx, int resize_ok) const 
-{ 
-  return MSparse<double>::index (ra_idx, resize_ok); 
-}
-
-SparseMatrix
 SparseMatrix::reshape (const dim_vector& new_dims) const
 {
   return MSparse<double>::reshape (new_dims);
 }
 
 SparseMatrix
 SparseMatrix::permute (const Array<octave_idx_type>& vec, bool inv) const
 {
diff --git a/liboctave/dSparse.h b/liboctave/dSparse.h
--- a/liboctave/dSparse.h
+++ b/liboctave/dSparse.h
@@ -405,21 +405,19 @@ public:
   SparseMatrix abs (void) const;
 
   SparseMatrix diag (octave_idx_type k = 0) const;
 
   Matrix matrix_value (void) const;
 
   SparseMatrix squeeze (void) const;
 
-  SparseMatrix index (idx_vector& i, int resize_ok) const;
+  SparseMatrix index (const idx_vector& i, bool resize_ok) const;
 
-  SparseMatrix index (idx_vector& i, idx_vector& j, int resize_ok) const;
-  
-  SparseMatrix index (Array<idx_vector>& ra_idx, int resize_ok) const;
+  SparseMatrix index (const idx_vector& i, const idx_vector& j, bool resize_ok) const;
 
   SparseMatrix reshape (const dim_vector& new_dims) const;
 
   SparseMatrix permute (const Array<octave_idx_type>& vec, bool inv = false) const;
 
   SparseMatrix ipermute (const Array<octave_idx_type>& vec) const;
 
   // i/o
diff --git a/src/ov-base-sparse.cc b/src/ov-base-sparse.cc
--- a/src/ov-base-sparse.cc
+++ b/src/ov-base-sparse.cc
@@ -46,64 +46,46 @@ template <class T>
 octave_value
 octave_base_sparse<T>::do_index_op (const octave_value_list& idx, 
                                     bool resize_ok)
 {
   octave_value retval;
 
   octave_idx_type n_idx = idx.length ();
 
-  int nd = matrix.ndims ();
-
   switch (n_idx)
     {
     case 0:
       retval = matrix;
       break;
 
     case 1:
       {
         idx_vector i = idx (0).index_vector ();
 
         if (! error_state)
           retval = octave_value (matrix.index (i, resize_ok));
       }
       break;
 
-    default:
+    case 2:
       {
-        if (n_idx == 2 && nd == 2)
+        idx_vector i = idx (0).index_vector ();
+
+        if (! error_state)
           {
-            idx_vector i = idx (0).index_vector ();
+            idx_vector j = idx (1).index_vector ();
 
             if (! error_state)
-              {
-                idx_vector j = idx (1).index_vector ();
-
-                if (! error_state)
-                  retval = octave_value (matrix.index (i, j, resize_ok));
-              }
-          }
-        else
-          {
-            Array<idx_vector> idx_vec (n_idx, 1);
-
-            for (octave_idx_type i = 0; i < n_idx; i++)
-              {
-                idx_vec(i) = idx(i).index_vector ();
-
-                if (error_state)
-                  break;
-              }
-
-            if (! error_state)
-              retval = octave_value (matrix.index (idx_vec, resize_ok));
+              retval = octave_value (matrix.index (i, j, resize_ok));
           }
       }
       break;
+    default:
+      error ("sparse indexing needs 1 or 2 indices");
     }
 
   return retval;
 }
 
 template <class T>
 octave_value
 octave_base_sparse<T>::subsref (const std::string& type,
