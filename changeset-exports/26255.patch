# HG changeset patch
# User Rik <rik@octave.org>
# Date 1545074521 28800
#      Mon Dec 17 11:22:01 2018 -0800
# Node ID 36b96226107cbe072ba5a5d572068a0fc2558529
# Parent  741968251fca0b6f2be534999d3afef53866eb43
movfun.m: Write more complete documentation for "same" option.

* movfun.m: Write more complete documentation for "same" option.

diff --git a/scripts/signal/movfun.m b/scripts/signal/movfun.m
--- a/scripts/signal/movfun.m
+++ b/scripts/signal/movfun.m
@@ -24,18 +24,18 @@
 ## @deftypefnx {} {@var{y} =} movfun (@var{fcn}, @var{x}, @var{[@var{nb}, @var{na}}])
 ## @deftypefnx {} {@var{y} =} movfun (@dots{}, @var{property}, @var{value})
 ## Apply function @var{fcn} to a moving window of length @var{wlen} on data
 ## @var{x}.
 ##
 ## If @var{wlen} is a scalar, the function @var{fcn} is applied to a moving
 ## window of length @var{wlen}.  When @var{wlen} is an odd number the window is
 ## symmetric and includes @code{(@var{wlen} - 1) / 2} elements on either side
-## of the central element.  For example, when calculating the output at
-## index 5 with a window length of 3, @code{movfun} uses data elements
+## of the central element.  For example, when calculating the output at index 5
+## with a window length of 3, @code{movfun} uses data elements
 ## @code{[4, 5, 6]}.  If @var{wlen} is an even number, the window is asymmetric
 ## and has @code{@var{wlen}/2} elements to the left of the central element
 ## and @code{@var{wlen}/2 - 1} elements to the right of the central element.
 ## For example, when calculating the output at index 5 with a window length of
 ## 4, @code{movfun} uses data elements @code{[3, 4, 5, 6]}.
 ##
 ## If @var{wlen} is an array with two elements @w{@code{[@var{nb}, @var{na}]}},
 ## the function is applied to a moving window @code{-@var{nb}:@var{na}}.  This
@@ -43,20 +43,18 @@
 ## element and @var{na} number of elements @strong{after} the current element.
 ## The current element is always included.  For example, given
 ## @code{@var{wlen} = [3, 0]}, the data used to calculate index 5 is
 ## @code{[2, 3, 4, 5]}.
 ##
 ## During calculations the data input @var{x} is reshaped into a 2-dimensional
 ## @var{wlen}-by-@var{N} matrix and @var{fcn} is called on this new matrix.
 ## Therefore, @var{fcn} must accept an array input argument and apply the
-## computation on the columns of that array.
+## computation along dimension 1, i.e., down the columns of the array.
 ##
-## When applied to a column vector of length @var{n}, the function @var{fcn}
-## must return a @strong{row} vector of length @var{n}.
 ## When applied to an array (possibly multi-dimensional) with @var{n} columns,
 ## @var{fcn} may return a result in either of two formats: @w{Format 1)}
 ## an array of size 1-by-@var{n}-by-@var{dim3}-by-@dots{}-by-@var{dimN}.  This
 ## is the typical output format from Octave core functions.  Type
 ## @code{demo ("movfun", 5)} for an example of this use case.
 ## @w{Format 2)} a row vector of length
 ## @code{@var{n} * @var{numel_higher_dims}} where @var{numel_higher_dims} is
 ## @w{@code{prod (size (@var{x})(3:end))}}.  The output of @var{fcn} for the
@@ -107,26 +105,27 @@
 ## @item @var{user_value}
 ## Any window elements outside the data array are replaced by the specified
 ## value @var{user_value} which must be a numeric scalar.  For example, with a
 ## window of length 3,
 ## @code{@var{y}(1) = @var{fcn} ([@var{user_value}, @var{x}(1:2)])}, and
 ## @code{@var{y}(end) = @var{fcn} ([@var{x}(end-1:end), @var{user_value}])}.
 ## A common choice for @var{user_value} is 0.
 ##
+## @item @qcode{"same"}
+## Any window elements outside the data array are replaced by the value of
+## @var{x} at the boundary.  For example, with a window of length 3,
+## @code{@var{y}(1) = @var{fcn} ([@var{x}(1), @var{x}(1:2)])}, and
+## @code{@var{y}(end) = @var{fcn} ([@var{x}(end-1:end), @var{x}(end)])}.
+##
 ## @item @qcode{"periodic"}
-## The window is wrapped around so that
-## @code{@var{y}(1) = @var{fcn} ([@var{x}(end-@var{k}:end),
-## @var{x}(1:@var{k})])}, where @var{k} is the radius of the window.  For
-## example, with a window of length 3,
-## @code{@var{y}(1) = @var{fcn} ([@var{x}(end-1:end), @var{x}(1)])},
-##
-## @item @qcode{"same"}
-## The resulting array @var{y} has the same values as @var{x} at the
-## boundaries.
+## The window is wrapped so that any missing data elements are taken from
+## the other side of the data.  For example, with a window of length 3,
+## @code{@var{y}(1) = @var{fcn} ([@var{x}(end), @var{x}(1:2)])}, and
+## @code{@var{y}(end) = @var{fcn} ([@var{x}(end-1:end), @var{x}(1)])}.
 ##
 ## @end table
 ##
 ## Note that for some of these choices, the window size at the boundaries is
 ## not the same as for the central part, and @var{fcn} must work in these
 ## cases.
 ##
 ## @item @qcode{"nancond"}
