# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1465829369 14400
#      Mon Jun 13 10:49:29 2016 -0400
# Node ID 02add2f597a1545b4e11e87456cc8b9bc5d8ef27
# Parent  d8104206e8a9cd57a94fd5fef51eaeb8c49876bb
compile kpse.cc separately from pathsearch.cc

* liboctave/util/kpse.h: New file.
* pathsearch.cc: Don't include kpse.cc
* liboctave/util/module.mk: Update.
* kpse.cc: Include config.h.  Update list of include files.
(kpse_is_env_sep): Delete.
(kpse_path_iterator::set_end, kpse_path_iterator::next):
Define in source file instead of header.
(kpse_debug): Now extern.  Always define.
(kpse_path_search, kpse_all_path_search, kpse_path_find_first_of,
kpse_all_path_find_first_of, kpse_path_expand, kpse_expand_default,
kpse_element_dir): Now extern.

diff --git a/liboctave/util/kpse.cc b/liboctave/util/kpse.cc
--- a/liboctave/util/kpse.cc
+++ b/liboctave/util/kpse.cc
@@ -21,19 +21,19 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
-// This file should not include config.h.  It is only included in other
-// C++ source files that should have included config.h before including
-// this file.
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
 
 #include <cctype>
 #include <cerrno>
 #include <cstdlib>
 #include <ctime>
 
 #include <map>
 #include <fstream>
@@ -43,20 +43,20 @@ along with Octave; see the file COPYING.
 #include <sys/types.h>
 #include <unistd.h>
 
 // Needed for NAME_MAX.
 #include <dirent.h>
 
 #include "file-ops.h"
 #include "file-stat.h"
-#include "lo-error.h"
+#include "kpse.h"
 #include "oct-env.h"
 #include "oct-passwd.h"
-#include "str-vec.h"
+#include "pathsearch.h"
 
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
 #  define WIN32_LEAN_AND_MEAN 1
 #  include <windows.h>
 #endif
 
 // Define the characters which separate components of filenames and
 // environment variable paths.
@@ -101,98 +101,55 @@ along with Octave; see the file COPYING.
 #  define KPSE_DEBUG_STAT 0               // stat calls
 #  define KPSE_DEBUG_EXPAND 1             // path element expansion
 #  define KPSE_DEBUG_SEARCH 2             // searches
 #  define KPSE_DEBUG_VARS 3               // variable values
 #  define KPSE_LAST_DEBUG KPSE_DEBUG_VARS
 
 #endif
 
-#if defined (KPSE_DEBUG)
-static unsigned int kpse_debug = 0;
-#endif
+unsigned int kpse_debug = 0;
 
 static std::string kpse_var_expand (const std::string& src);
 
-static std::string kpse_element_dir (const std::string& elt);
-
 static std::string kpse_expand (const std::string& s);
 
-static bool
-kpse_is_env_sep (char c)
+void
+kpse_path_iterator::set_end (void)
 {
-  return IS_ENV_SEP (c);
+  e = b + 1;
+
+  if (e == len)
+    ; // OK, we have found the last element.
+  else if (e > len)
+    b = e = std::string::npos;
+  else
+    {
+      // Find the next colon not enclosed by braces (or the end of the
+      // path).
+
+      while (e < len && ! octave::directory_path::is_path_sep (path[e]))
+        e++;
+    }
 }
 
-// A way to step through a path, extracting one directory name at a
-// time.
-
-class kpse_path_iterator
+void
+kpse_path_iterator::next (void)
 {
-public:
-
-  kpse_path_iterator (const std::string& p)
-    : path (p), b (0), e (0), len (path.length ()) { set_end (); }
-
-  kpse_path_iterator (const kpse_path_iterator& pi)
-    : path (pi.path), b (pi.b), e (pi.e), len (pi.len) { }
-
-  kpse_path_iterator operator ++ (int)
-  {
-    kpse_path_iterator retval (*this);
-    next ();
-    return retval;
-  }
-
-  std::string operator * (void) { return path.substr (b, e-b); }
-
-  bool operator != (const size_t sz) { return b != sz; }
-
-private:
-
-  const std::string& path;
-  size_t b;
-  size_t e;
-  size_t len;
+  b = e + 1;
 
-  void set_end (void)
-  {
-    e = b + 1;
-
-    if (e == len)
-      ; // OK, we have found the last element.
-    else if (e > len)
-      b = e = std::string::npos;
-    else
-      {
-        // Find the next colon not enclosed by braces (or the end of the
-        // path).
-
-        while (e < len && ! kpse_is_env_sep (path[e]))
-          e++;
-      }
-  }
+  // Skip any consecutive colons.
+  while (b < len && octave::directory_path::is_path_sep (path[b]))
+    b++;
 
-  void next (void)
-  {
-    b = e + 1;
-
-    // Skip any consecutive colons.
-    while (b < len && kpse_is_env_sep (path[b]))
-      b++;
-
-    if (b >= len)
-      b = e = std::string::npos;
-    else
-      set_end ();
-  }
-
-  // No assignment.
-  kpse_path_iterator& operator = (const kpse_path_iterator&);
-};
+  if (b >= len)
+    b = e = std::string::npos;
+  else
+    set_end ();
+}
 
 /* Truncate any too-long components in NAME, returning the result.  It's
    too bad this is necessary.  See comments in readable.c for why.  */
 
 static std::string
 kpse_truncate_filename (const std::string& name)
 {
   unsigned c_len = 0;        /* Length of current component.  */
@@ -509,39 +466,39 @@ search (const std::string& path, const s
    Otherwise, look in each of the directories specified in PATH (also do
    tilde and variable expansion on elements in PATH).
 
    The caller must expand PATH.  This is because it makes more sense to
    do this once, in advance, instead of for every search using it.
 
    In any case, return the complete filename if found, otherwise NULL.  */
 
-static std::string
+std::string
 kpse_path_search (const std::string& path, const std::string& name,
                   bool must_exist)
 {
   std::list<std::string> ret_list = search (path, name, must_exist, false);
 
   return ret_list.empty () ? "" : ret_list.front ();
 }
 
 /* Like 'kpse_path_search' with MUST_EXIST true, but return a list of
    all the filenames (or NULL if none), instead of taking the first.  */
 
-static std::list<std::string>
+std::list<std::string>
 kpse_all_path_search (const std::string& path, const std::string& name)
 {
   return search (path, name, true, true);
 }
 
 /* This is the hard case -- look in each element of PATH for each
    element of NAMES.  If ALL is false, return the first file found.
    Otherwise, search all elements of PATH.  */
 
-static std::list<std::string>
+std::list<std::string>
 path_find_first_of (const std::string& path,
                     const std::list<std::string>& names,
                     bool /* must_exist */, bool all)
 {
   std::list<std::string> ret_list;
   bool done = false;
 
   for (kpse_path_iterator pi (path); ! done && pi != std::string::npos; pi++)
@@ -684,17 +641,17 @@ find_first_of (const std::string& path, 
 }
 
 /* Search each element of PATH for each element of NAMES.  Return the
    first one found.  */
 
 /* Search each element of PATH for each element in the list of NAMES.
    Return the first one found.  */
 
-static std::string
+std::string
 kpse_path_find_first_of (const std::string& path,
                          const std::list<std::string>& names,
                          bool must_exist)
 {
   std::list<std::string> ret_list
     = find_first_of (path, names, must_exist, false);
 
   return ret_list.empty () ? "" : ret_list.front ();
@@ -702,17 +659,17 @@ kpse_path_find_first_of (const std::stri
 
 /* Search each element of PATH for each element of NAMES and return a
    list containing everything found, in the order found.  */
 
 /* Like 'kpse_path_find_first_of' with MUST_EXIST true, but return a
    list of all the filenames (or NULL if none), instead of taking the
    first.  */
 
-static std::list<std::string>
+std::list<std::string>
 kpse_all_path_find_first_of (const std::string& path,
                              const std::list<std::string>& names)
 {
   return find_first_of (path, names, true, true);
 }
 
 /* If NAME has a leading ~ or ~user, Unix-style, expand it to the user's
    home directory, and return a new malloced string.  If no ~, or no
@@ -925,17 +882,17 @@ kpse_brace_expand (const std::string& pa
 
 /* Expand all special constructs in a path, and include only the actually
    existing directories in the result. */
 
 /* Do brace expansion and call 'kpse_expand' on each argument of the
    result.  The final expansion (always in fresh memory) is a path of
    all the existing directories that match the pattern. */
 
-static std::string
+std::string
 kpse_path_expand (const std::string& path)
 {
   std::string ret;
   unsigned len;
 
   len = 0;
 
   /* Expand variables and braces first.  */
@@ -1196,17 +1153,17 @@ brace_gobbler (const std::string& text, 
 
 /* Check for leading colon first, then trailing, then doubled, since
    that is fastest.  Usually it will be leading or trailing.  */
 
 /* Replace a leading or trailing or doubled : in PATH with DFLT.  If
    no extra colons, return PATH.  Only one extra colon is replaced.
    DFLT may not be NULL.  */
 
-static std::string
+std::string
 kpse_expand_default (const std::string& path, const std::string& fallback)
 {
   std::string expansion;
 
   size_t path_len = path.length ();
 
   if (path_len == 0)
     expansion = fallback;
@@ -1263,17 +1220,17 @@ dir_p (const std::string& fn)
 
 /* Given a path element ELT, return a the element with a trailing slash
    or an empty string if the element is not a directory.
 
    It's up to the caller to expand ELT.  This is because this routine is
    most likely only useful to be called from 'kpse_path_search', which
    has already assumed expansion has been done.  */
 
-static std::string
+std::string
 kpse_element_dir (const std::string& elt)
 {
   std::string ret;
 
   /* If given nothing, return nothing.  */
   if (elt.empty ())
     return ret;
 
diff --git a/liboctave/util/kpse.h b/liboctave/util/kpse.h
new file mode 100644
--- /dev/null
+++ b/liboctave/util/kpse.h
@@ -0,0 +1,99 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_kpse_h)
+#define octave_kpse_h 1
+
+#include "octave-config.h"
+
+#include <list>
+#include <string>
+
+// A way to step through a path, extracting one directory name at a
+// time.
+
+class kpse_path_iterator
+{
+public:
+
+  kpse_path_iterator (const std::string& p)
+    : path (p), b (0), e (0), len (path.length ()) { set_end (); }
+
+  kpse_path_iterator (const kpse_path_iterator& pi)
+    : path (pi.path), b (pi.b), e (pi.e), len (pi.len) { }
+
+  kpse_path_iterator operator ++ (int)
+  {
+    kpse_path_iterator retval (*this);
+    next ();
+    return retval;
+  }
+
+  std::string operator * (void) { return path.substr (b, e-b); }
+
+  bool operator != (const size_t sz) { return b != sz; }
+
+private:
+
+  const std::string& path;
+  size_t b;
+  size_t e;
+  size_t len;
+
+  void set_end (void);
+  void next (void);
+
+  // No assignment.
+  kpse_path_iterator& operator = (const kpse_path_iterator&);
+};
+
+extern unsigned int kpse_debug;
+
+extern std::list<std::string>
+kpse_all_path_search (const std::string& path, const std::string& name);
+
+extern std::list<std::string>
+kpse_all_path_find_first_of (const std::string& path,
+                             const std::list<std::string>& names);
+
+extern std::string
+kpse_element_dir (const std::string& elt);
+
+extern std::list<std::string>
+kpse_all_path_search (const std::string& path, const std::string& name);
+
+extern std::string
+kpse_expand_default (const std::string& path, const std::string& fallback);
+
+extern std::string
+kpse_path_expand (const std::string& path);
+
+extern std::string
+kpse_path_find_first_of (const std::string& path,
+                         const std::list<std::string>& names,
+                         bool must_exist);
+
+extern std::string
+kpse_path_search (const std::string& path, const std::string& name,
+                  bool must_exist);
+
+#endif
diff --git a/liboctave/util/module.mk b/liboctave/util/module.mk
--- a/liboctave/util/module.mk
+++ b/liboctave/util/module.mk
@@ -36,30 +36,32 @@ UTIL_INC = \
   liboctave/util/sparse-sort.h \
   liboctave/util/sparse-util.h \
   liboctave/util/str-vec.h \
   liboctave/util/sun-utils.h \
   liboctave/util/unwind-prot.h \
   liboctave/util/url-transfer.h
 
 NOINSTALL_UTIL_INC = \
+  liboctave/util/kpse.h \
   liboctave/util/oct-sparse.h \
   liboctave/util/statdefs.h
 
 UTIL_C_SRC = \
   liboctave/util/f2c-main.c \
   liboctave/util/lo-cutils.c \
   liboctave/util/oct-rl-edit.c \
   liboctave/util/oct-rl-hist.c
 
 UTIL_SRC = \
   liboctave/util/cmd-edit.cc \
   liboctave/util/cmd-hist.cc \
   liboctave/util/data-conv.cc \
   liboctave/util/glob-match.cc \
+  liboctave/util/kpse.cc \
   liboctave/util/lo-array-errwarn.cc \
   liboctave/util/lo-array-gripes.cc \
   liboctave/util/lo-ieee.cc \
   liboctave/util/lo-utils.cc \
   liboctave/util/oct-base64.cc \
   liboctave/util/oct-glob.cc \
   liboctave/util/oct-inttypes.cc \
   liboctave/util/oct-locbuf.cc \
@@ -74,19 +76,16 @@ UTIL_SRC = \
   liboctave/util/unwind-prot.cc \
   liboctave/util/url-transfer.cc \
   $(UTIL_C_SRC) \
   $(NOINSTALL_UTIL_INC)
 
 LIBOCTAVE_TEMPLATE_SRC += \
   liboctave/util/oct-sort.cc
 
-EXTRA_DIST += \
-  liboctave/util/kpse.cc
-
 noinst_LTLIBRARIES += liboctave/util/libutil.la
 
 liboctave_util_libutil_la_SOURCES = $(UTIL_SRC)
 
 liboctave_util_libutil_la_CPPFLAGS = \
   $(liboctave_liboctave_la_CPPFLAGS) \
   $(CURL_CPPFLAGS) \
   $(PCRE_CPPFLAGS) \
diff --git a/liboctave/util/pathsearch.cc b/liboctave/util/pathsearch.cc
--- a/liboctave/util/pathsearch.cc
+++ b/liboctave/util/pathsearch.cc
@@ -23,23 +23,23 @@ along with Octave; see the file COPYING.
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <cstdlib>
 
 #include <string>
 
+#include "kpse.h"
+#include "lo-error.h"
 #include "lo-utils.h"
 #include "oct-env.h"
 #include "pathsearch.h"
 #include "singleton-cleanup.h"
 
-#include "kpse.cc"
-
 namespace octave
 {
   directory_path::static_members *directory_path::static_members::instance = 0;
 
   directory_path::static_members::static_members (void)
     : xpath_sep_char (SEPCHAR), xpath_sep_str (SEPCHAR_STR) { }
 
   bool
