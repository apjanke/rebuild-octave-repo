# HG changeset patch
# User Rik <rik@octave.org>
# Date 1492788917 25200
#      Fri Apr 21 08:35:17 2017 -0700
# Node ID 1fee389bd04bd18dd29a162c249eaf7bc9f63e7e
# Parent  75a4b9a34999cb2a69da3da37f29215a97b572c1
Use std::copy_n rather than std::copy for clarity in liboctave/array.

* Array.cc, Array.h, Sparse.cc, Sparse.h, boolSparse.cc, idx-vector.cc,
idx-vector.h: Use std::copy_n rather than std::copy when clarity of code would
be improved.

diff --git a/liboctave/array/Array.cc b/liboctave/array/Array.cc
--- a/liboctave/array/Array.cc
+++ b/liboctave/array/Array.cc
@@ -411,17 +411,17 @@ private:
   T *do_permute (const T *src, T *dest, int lev) const
   {
     if (lev == 0)
       {
         octave_idx_type step = stride[0];
         octave_idx_type len = dim[0];
         if (step == 1)
           {
-            std::copy (src, src + len, dest);
+            std::copy_n (src, len, dest);
             dest += len;
           }
         else
           {
             for (octave_idx_type i = 0, j = 0; i < len; i++, j += step)
               dest[i] = src[j];
 
             dest += len;
@@ -686,17 +686,17 @@ public:
 private:
 
   // recursive resizing
   template <typename T>
   void do_resize_fill (const T* src, T *dest, const T& rfv, int lev) const
   {
     if (lev == 0)
       {
-        std::copy (src, src+cext[0], dest);
+        std::copy_n (src, cext[0], dest);
         std::fill_n (dest + cext[0], dext[0] - cext[0], rfv);
       }
     else
       {
         octave_idx_type sd, dd, k;
         sd = sext[lev-1];
         dd = dext[lev-1];
         for (k = 0; k < cext[lev]; k++)
@@ -959,30 +959,30 @@ Array<T>::resize1 (octave_idx_type n, co
         }
       else
         {
           static const octave_idx_type max_stack_chunk = 1024;
           octave_idx_type nn = n + std::min (nx, max_stack_chunk);
           Array<T> tmp (Array<T> (dim_vector (nn, 1)), dv, 0, n);
           T *dest = tmp.fortran_vec ();
 
-          std::copy (data (), data () + nx, dest);
+          std::copy_n (data (), nx, dest);
           dest[nx] = rfv;
 
           *this = tmp;
         }
     }
   else if (n != nx)
     {
       Array<T> tmp = Array<T> (dv);
       T *dest = tmp.fortran_vec ();
 
       octave_idx_type n0 = std::min (n, nx);
       octave_idx_type n1 = n - n0;
-      std::copy (data (), data () + n0, dest);
+      std::copy_n (data (), n0, dest);
       std::fill_n (dest + n0, n1, rfv);
 
       *this = tmp;
     }
 }
 
 template <typename T>
 void
@@ -1000,24 +1000,24 @@ Array<T>::resize2 (octave_idx_type r, oc
 
       octave_idx_type r0 = std::min (r, rx);
       octave_idx_type r1 = r - r0;
       octave_idx_type c0 = std::min (c, cx);
       octave_idx_type c1 = c - c0;
       const T *src = data ();
       if (r == rx)
         {
-          std::copy (src, src + r * c0, dest);
+          std::copy_n (src, r * c0, dest);
           dest += r * c0;
         }
       else
         {
           for (octave_idx_type k = 0; k < c0; k++)
             {
-              std::copy (src, src + r0, dest);
+              std::copy_n (src, r0, dest);
               src += rx;
               dest += r0;
               std::fill_n (dest, r1, rfv);
               dest += r1;
             }
         }
 
       std::fill_n (dest, r * c1, rfv);
@@ -1428,17 +1428,17 @@ Array<T>::delete_elements (const idx_vec
         }
       else if (i.is_cont_range (n, l, u))
         {
           // Special case deleting a contiguous range.
           octave_idx_type m = n + l - u;
           Array<T> tmp (dim_vector (col_vec ? m : 1, ! col_vec ? m : 1));
           const T *src = data ();
           T *dest = tmp.fortran_vec ();
-          std::copy (src, src + l, dest);
+          std::copy_n (src, l, dest);
           std::copy (src + u, src + n, dest + l);
           *this = tmp;
         }
       else
         {
           // Use index.
           *this = index (i.complement (n));
         }
@@ -1477,17 +1477,17 @@ Array<T>::delete_elements (int dim, cons
 
           // Special case deleting a contiguous range.
           Array<T> tmp = Array<T> (rdv);
           const T *src = data ();
           T *dest = tmp.fortran_vec ();
           l *= dl; u *= dl; n *= dl;
           for (octave_idx_type k = 0; k < du; k++)
             {
-              std::copy (src, src + l, dest);
+              std::copy_n (src, l, dest);
               dest += l;
               std::copy (src + u, src + n, dest);
               dest += n - u;
               src += n;
             }
 
           *this = tmp;
         }
diff --git a/liboctave/array/Array.h b/liboctave/array/Array.h
--- a/liboctave/array/Array.h
+++ b/liboctave/array/Array.h
@@ -135,24 +135,24 @@ protected:
 
     T *data;
     octave_idx_type len;
     octave::refcount<int> count;
 
     ArrayRep (T *d, octave_idx_type l)
       : data (new T [l]), len (l), count (1)
     {
-      std::copy (d, d+l, data);
+      std::copy_n (d, l, data);
     }
 
     template <typename U>
     ArrayRep (U *d, octave_idx_type l)
       : data (new T [l]), len (l), count (1)
     {
-      std::copy (d, d+l, data);
+      std::copy_n (d, l, data);
     }
 
     // Use new instead of setting data to 0 so that fortran_vec and
     // data always return valid addresses, even for zero-size arrays.
 
     ArrayRep (void) : data (new T [0]), len (0), count (1) { }
 
     explicit ArrayRep (octave_idx_type n)
@@ -162,17 +162,17 @@ protected:
       : data (new T [n]), len (n), count (1)
     {
       std::fill_n (data, n, val);
     }
 
     ArrayRep (const ArrayRep& a)
       : data (new T [a.len]), len (a.len), count (1)
     {
-      std::copy (a.data, a.data + a.len, data);
+      std::copy_n (a.data, a.len, data);
     }
 
     ~ArrayRep (void) { delete [] data; }
 
     octave_idx_type numel (void) const { return len; }
 
   private:
 
diff --git a/liboctave/array/Sparse.cc b/liboctave/array/Sparse.cc
--- a/liboctave/array/Sparse.cc
+++ b/liboctave/array/Sparse.cc
@@ -165,23 +165,23 @@ Sparse<T>::SparseRep::change_length (oct
   // discard.
   static const int frac = 5;
   if (nz > nzmx || nz < nzmx - nzmx/frac)
     {
       // Reallocate.
       octave_idx_type min_nzmx = std::min (nz, nzmx);
 
       octave_idx_type * new_ridx = new octave_idx_type [nz];
-      std::copy (r, r + min_nzmx, new_ridx);
+      std::copy_n (r, min_nzmx, new_ridx);
 
       delete [] r;
       r = new_ridx;
 
       T * new_data = new T [nz];
-      std::copy (d, d + min_nzmx, new_data);
+      std::copy_n (d, min_nzmx, new_data);
 
       delete [] d;
       d = new_data;
 
       nzmx = nz;
     }
 }
 
@@ -974,17 +974,17 @@ Sparse<T>::resize (octave_idx_type r, oc
         }
     }
 
   rep->nrows = dimensions(0) = r;
 
   if (c != rep->ncols)
     {
       octave_idx_type *new_cidx = new octave_idx_type [c+1];
-      std::copy (rep->c, rep->c + std::min (c, rep->ncols) + 1, new_cidx);
+      std::copy_n (rep->c, std::min (c, rep->ncols) + 1, new_cidx);
       delete [] rep->c;
       rep->c = new_cidx;
 
       if (c > rep->ncols)
         std::fill_n (rep->c + rep->ncols + 1, c - rep->ncols,
                      rep->c[rep->ncols]);
     }
 
@@ -1171,18 +1171,18 @@ Sparse<T>::delete_elements (const idx_ve
         {
           // Special-case a contiguous range.
           // Look-up indices first.
           octave_idx_type li = lblookup (tmp.ridx (), nz, lb);
           octave_idx_type ui = lblookup (tmp.ridx (), nz, ub);
           // Copy data and adjust indices.
           octave_idx_type nz_new = nz - (ui - li);
           *this = Sparse<T> (nr - (ub - lb), 1, nz_new);
-          std::copy (tmp.data (), tmp.data () + li, data ());
-          std::copy (tmp.ridx (), tmp.ridx () + li, xridx ());
+          std::copy_n (tmp.data (), li, data ());
+          std::copy_n (tmp.ridx (), li, xridx ());
           std::copy (tmp.data () + ui, tmp.data () + nz, xdata () + li);
           mx_inline_sub (nz - ui, xridx () + li, tmp.ridx () + ui, ub - lb);
           xcidx (1) = nz_new;
         }
       else
         {
           OCTAVE_LOCAL_BUFFER (octave_idx_type, ridx_new, nz);
           OCTAVE_LOCAL_BUFFER (T, data_new, nz);
@@ -1198,36 +1198,36 @@ Sparse<T>::delete_elements (const idx_ve
               if (j == sl || sj[j] > r)
                 {
                   data_new[nz_new] = tmp.data (i);
                   ridx_new[nz_new++] = r - j;
                 }
             }
 
           *this = Sparse<T> (nr - sl, 1, nz_new);
-          std::copy (ridx_new, ridx_new + nz_new, ridx ());
-          std::copy (data_new, data_new + nz_new, xdata ());
+          std::copy_n (ridx_new, nz_new, ridx ());
+          std::copy_n (data_new, nz_new, xdata ());
           xcidx (1) = nz_new;
         }
     }
   else if (nr == 1)
     {
       // Sparse row vector.
       octave_idx_type lb, ub;
       if (idx.is_cont_range (nc, lb, ub))
         {
           const Sparse<T> tmp = *this;
           octave_idx_type lbi = tmp.cidx (lb);
           octave_idx_type ubi = tmp.cidx (ub);
           octave_idx_type new_nz = nz - (ubi - lbi);
           *this = Sparse<T> (1, nc - (ub - lb), new_nz);
-          std::copy (tmp.data (), tmp.data () + lbi, data ());
+          std::copy_n (tmp.data (), lbi, data ());
           std::copy (tmp.data () + ubi, tmp.data () + nz , xdata () + lbi);
           std::fill_n (ridx (), new_nz, static_cast<octave_idx_type> (0));
-          std::copy (tmp.cidx () + 1, tmp.cidx () + 1 + lb, cidx () + 1);
+          std::copy_n (tmp.cidx () + 1, lb, cidx () + 1);
           mx_inline_sub (nc - ub, xcidx () + 1, tmp.cidx () + ub + 1,
                          ubi - lbi);
         }
       else
         *this = index (idx.complement (nc));
     }
   else if (idx.length (nel) != 0)
     {
@@ -1273,21 +1273,21 @@ Sparse<T>::delete_elements (const idx_ve
           else
             {
               const Sparse<T> tmp = *this;
               octave_idx_type lbi = tmp.cidx (lb);
               octave_idx_type ubi = tmp.cidx (ub);
               octave_idx_type new_nz = nz - (ubi - lbi);
 
               *this = Sparse<T> (nr, nc - (ub - lb), new_nz);
-              std::copy (tmp.data (), tmp.data () + lbi, data ());
-              std::copy (tmp.ridx (), tmp.ridx () + lbi, ridx ());
+              std::copy_n (tmp.data (), lbi, data ());
+              std::copy_n (tmp.ridx (), lbi, ridx ());
               std::copy (tmp.data () + ubi, tmp.data () + nz, xdata () + lbi);
               std::copy (tmp.ridx () + ubi, tmp.ridx () + nz, xridx () + lbi);
-              std::copy (tmp.cidx () + 1, tmp.cidx () + 1 + lb, cidx () + 1);
+              std::copy_n (tmp.cidx () + 1, lb, cidx () + 1);
               mx_inline_sub (nc - ub, xcidx () + lb + 1,
                              tmp.cidx () + ub + 1, ubi - lbi);
             }
         }
       else
         *this = index (idx_i, idx_j.complement (nc));
     }
   else if (idx_j.is_colon ())
@@ -1448,30 +1448,30 @@ Sparse<T>::index (const idx_vector& idx,
         {
           // Special-case a contiguous range.
           // Look-up indices first.
           octave_idx_type li = lblookup (ridx (), nz, lb);
           octave_idx_type ui = lblookup (ridx (), nz, ub);
           // Copy data and adjust indices.
           octave_idx_type nz_new = ui - li;
           retval = Sparse<T> (ub - lb, 1, nz_new);
-          std::copy (data () + li, data () + li + nz_new, retval.data ());
+          std::copy_n (data () + li, nz_new, retval.data ());
           mx_inline_sub (nz_new, retval.xridx (), ridx () + li, lb);
           retval.xcidx (1) = nz_new;
         }
       else if (idx.is_permutation (nel) && idx.is_vector ())
         {
           if (idx.is_range () && idx.increment () == -1)
             {
               retval = Sparse<T> (nr, 1, nz);
 
               for (octave_idx_type j = 0; j < nz; j++)
                 retval.ridx (j) = nr - ridx (nz - j - 1) - 1;
 
-              std::copy (cidx (), cidx () + 2, retval.cidx ());
+              std::copy_n (cidx (), 2, retval.cidx ());
               std::reverse_copy (data (), data () + nz, retval.data ());
             }
           else
             {
               Array<T> tmp = array_value ();
               tmp = tmp.index (idx);
               retval = Sparse<T> (tmp);
             }
@@ -1536,17 +1536,17 @@ Sparse<T>::index (const idx_vector& idx,
         retval = Sparse<T> (1, 1, elem (0, idx(0)));
       else if (idx.is_cont_range (nel, lb, ub))
         {
           // Special-case a contiguous range.
           octave_idx_type lbi = cidx (lb);
           octave_idx_type ubi = cidx (ub);
           octave_idx_type new_nz = ubi - lbi;
           retval = Sparse<T> (1, ub - lb, new_nz);
-          std::copy (data () + lbi, data () + lbi + new_nz, retval.data ());
+          std::copy_n (data () + lbi, new_nz, retval.data ());
           std::fill_n (retval.ridx (), new_nz, static_cast<octave_idx_type> (0));
           mx_inline_sub (ub - lb + 1, retval.cidx (), cidx () + lb, lbi);
         }
       else
         {
           // Sparse row vectors occupy O(nr) storage anyway, so let's just
           // convert the matrix to full, index, and sparsify the result.
           retval = Sparse<T> (array_value ().index (idx));
@@ -1622,18 +1622,18 @@ Sparse<T>::index (const idx_vector& idx_
         retval = *this; // Shallow copy.
       else if (idx_j.is_cont_range (nc, lb, ub))
         {
           // Special-case a contiguous range.
           octave_idx_type lbi = cidx (lb);
           octave_idx_type ubi = cidx (ub);
           octave_idx_type new_nz = ubi - lbi;
           retval = Sparse<T> (nr, ub - lb, new_nz);
-          std::copy (data () + lbi, data () + lbi + new_nz, retval.data ());
-          std::copy (ridx () + lbi, ridx () + lbi + new_nz, retval.ridx ());
+          std::copy_n (data () + lbi, new_nz, retval.data ());
+          std::copy_n (ridx () + lbi, new_nz, retval.ridx ());
           mx_inline_sub (ub - lb + 1, retval.cidx (), cidx () + lb, lbi);
         }
       else
         {
           // Count new nonzero elements.
           retval = Sparse<T> (nr, m);
           for (octave_idx_type j = 0; j < m; j++)
             {
@@ -1645,18 +1645,18 @@ Sparse<T>::index (const idx_vector& idx_
 
           // Copy data & indices.
           for (octave_idx_type j = 0; j < m; j++)
             {
               octave_idx_type ljj = cidx (idx_j(j));
               octave_idx_type lj = retval.xcidx (j);
               octave_idx_type nzj = retval.xcidx (j+1) - lj;
 
-              std::copy (data () + ljj, data () + ljj + nzj, retval.data () + lj);
-              std::copy (ridx () + ljj, ridx () + ljj + nzj, retval.ridx () + lj);
+              std::copy_n (data () + ljj, nzj, retval.data () + lj);
+              std::copy_n (ridx () + ljj, nzj, retval.ridx () + lj);
             }
         }
     }
   else if (nc == 1 && idx_j.is_colon_equiv (nc) && idx_i.is_vector ())
     {
       // It's actually vector indexing.  The 1D index is specialized for that.
       retval = index (idx_i);
 
@@ -1876,32 +1876,32 @@ Sparse<T>::assign (const idx_vector& idx
                       // Make room first.
                       std::copy_backward (data () + ui, data () + nz,
                                           data () + nz + rnz);
                       std::copy_backward (ridx () + ui, ridx () + nz,
                                           ridx () + nz + rnz);
                     }
 
                   // Copy data and adjust indices from rhs.
-                  std::copy (rhs.data (), rhs.data () + rnz, data () + li);
+                  std::copy_n (rhs.data (), rnz, data () + li);
                   mx_inline_add (rnz, ridx () + li, rhs.ridx (), lb);
                 }
               else
                 {
                   // Clearing elements or exceeding capacity, allocate afresh
                   // and paste pieces.
                   const Sparse<T> tmp = *this;
                   *this = Sparse<T> (nr, 1, new_nz);
 
                   // Head ...
-                  std::copy (tmp.data (), tmp.data () + li, data ());
-                  std::copy (tmp.ridx (), tmp.ridx () + li, ridx ());
+                  std::copy_n (tmp.data (), li, data ());
+                  std::copy_n (tmp.ridx (), li, ridx ());
 
                   // new stuff ...
-                  std::copy (rhs.data (), rhs.data () + rnz, data () + li);
+                  std::copy_n (rhs.data (), rnz, data () + li);
                   mx_inline_add (rnz, ridx () + li, rhs.ridx (), lb);
 
                   // ...tail
                   std::copy (tmp.data () + ui, tmp.data () + nz,
                              data () + li + rnz);
                   std::copy (tmp.ridx () + ui, tmp.ridx () + nz,
                              ridx () + li + rnz);
                 }
@@ -1933,18 +1933,18 @@ Sparse<T>::assign (const idx_vector& idx
             }
           else
             {
               const Sparse<T> tmp = *this;
               octave_idx_type new_nz = nz + rhl;
               // Disassembly our matrix...
               Array<octave_idx_type> new_ri (dim_vector (new_nz, 1));
               Array<T> new_data (dim_vector (new_nz, 1));
-              std::copy (tmp.ridx (), tmp.ridx () + nz, new_ri.fortran_vec ());
-              std::copy (tmp.data (), tmp.data () + nz, new_data.fortran_vec ());
+              std::copy_n (tmp.ridx (), nz, new_ri.fortran_vec ());
+              std::copy_n (tmp.data (), nz, new_data.fortran_vec ());
               // ... insert new data (densified) ...
               idx.copy_data (new_ri.fortran_vec () + nz);
               new_data.assign (idx_vector (nz, new_nz), rhs.array_value ());
               // ... reassembly.
               *this = Sparse<T> (new_data, new_ri,
                                  static_cast<octave_idx_type> (0),
                                  nr, nc, false);
             }
@@ -2060,38 +2060,38 @@ Sparse<T>::assign (const idx_vector& idx
                       std::copy_backward (data () + ui, data () + nz,
                                           data () + new_nz);
                       std::copy_backward (ridx () + ui, ridx () + nz,
                                           ridx () + new_nz);
                       mx_inline_add2 (nc - ub, cidx () + ub + 1, new_nz - nz);
                     }
 
                   // Copy data and indices from rhs.
-                  std::copy (rhs.data (), rhs.data () + rnz, data () + li);
-                  std::copy (rhs.ridx (), rhs.ridx () + rnz, ridx () + li);
+                  std::copy_n (rhs.data (), rnz, data () + li);
+                  std::copy_n (rhs.ridx (), rnz, ridx () + li);
                   mx_inline_add (ub - lb, cidx () + lb + 1, rhs.cidx () + 1,
                                  li);
 
                   assert (nnz () == new_nz);
                 }
               else
                 {
                   // Clearing elements or exceeding capacity, allocate afresh
                   // and paste pieces.
                   const Sparse<T> tmp = *this;
                   *this = Sparse<T> (nr, nc, new_nz);
 
                   // Head...
-                  std::copy (tmp.data (), tmp.data () + li, data ());
-                  std::copy (tmp.ridx (), tmp.ridx () + li, ridx ());
-                  std::copy (tmp.cidx () + 1, tmp.cidx () + 1 + lb, cidx () + 1);
+                  std::copy_n (tmp.data (), li, data ());
+                  std::copy_n (tmp.ridx (), li, ridx ());
+                  std::copy_n (tmp.cidx () + 1, lb, cidx () + 1);
 
                   // new stuff...
-                  std::copy (rhs.data (), rhs.data () + rnz, data () + li);
-                  std::copy (rhs.ridx (), rhs.ridx () + rnz, ridx () + li);
+                  std::copy_n (rhs.data (), rnz, data () + li);
+                  std::copy_n (rhs.ridx (), rnz, ridx () + li);
                   mx_inline_add (ub - lb, cidx () + lb + 1, rhs.cidx () + 1,
                                  li);
 
                   // ...tail.
                   std::copy (tmp.data () + ui, tmp.data () + nz,
                              data () + li + rnz);
                   std::copy (tmp.ridx () + ui, tmp.ridx () + nz,
                              ridx () + li + rnz);
@@ -2139,29 +2139,25 @@ Sparse<T>::assign (const idx_vector& idx
                 {
                   octave_idx_type l = xcidx (i);
                   octave_idx_type u = xcidx (i+1);
                   octave_idx_type j = jsav[i];
                   if (j >= 0)
                     {
                       // from rhs
                       octave_idx_type k = rhs.cidx (j);
-                      std::copy (rhs.data () + k, rhs.data () + k + u - l,
-                                 xdata () + l);
-                      std::copy (rhs.ridx () + k, rhs.ridx () + k + u - l,
-                                 xridx () + l);
+                      std::copy_n (rhs.data () + k, u - l, xdata () + l);
+                      std::copy_n (rhs.ridx () + k, u - l, xridx () + l);
                     }
                   else
                     {
                       // original
                       octave_idx_type k = tmp.cidx (i);
-                      std::copy (tmp.data () + k, tmp.data () + k + u - l,
-                                 xdata () + l);
-                      std::copy (tmp.ridx () + k, tmp.ridx () + k + u - l,
-                                 xridx () + l);
+                      std::copy_n (tmp.data () + k, u - l, xdata () + l);
+                      std::copy_n (tmp.ridx () + k, u - l, xridx () + l);
                     }
                 }
 
             }
         }
       else if (nc == 1 && idx_j.is_colon_equiv (nc) && idx_i.is_vector ())
         {
           // It's just vector indexing.  The 1D assign is specialized for that.
diff --git a/liboctave/array/Sparse.h b/liboctave/array/Sparse.h
--- a/liboctave/array/Sparse.h
+++ b/liboctave/array/Sparse.h
@@ -197,19 +197,19 @@ public:
   // Type conversion case.  Preserves capacity ().
   template <typename U>
   Sparse (const Sparse<U>& a)
     : rep (new typename Sparse<T>::SparseRep (a.rep->nrows, a.rep->ncols,
            a.rep->nzmx)),
     dimensions (a.dimensions)
   {
     octave_idx_type nz = a.nnz ();
-    std::copy (a.rep->d, a.rep->d + nz, rep->d);
-    std::copy (a.rep->r, a.rep->r + nz, rep->r);
-    std::copy (a.rep->c, a.rep->c + rep->ncols + 1, rep->c);
+    std::copy_n (a.rep->d, nz, rep->d);
+    std::copy_n (a.rep->r, nz, rep->r);
+    std::copy_n (a.rep->c, rep->ncols + 1, rep->c);
   }
 
   // No type conversion case.
   Sparse (const Sparse<T>& a)
     : rep (a.rep), dimensions (a.dimensions)
   {
     rep->count++;
   }
diff --git a/liboctave/array/boolSparse.cc b/liboctave/array/boolSparse.cc
--- a/liboctave/array/boolSparse.cc
+++ b/liboctave/array/boolSparse.cc
@@ -171,17 +171,17 @@ SparseBoolMatrix::any (int dim) const
           Array<bool> tmp (dim_vector (nr, 1), false);
           for (octave_idx_type i = 0; i < nz; i++)
             tmp.xelem (ridx (i)) = true;
           retval = tmp;
         }
       else
         {
           Array<octave_idx_type> tmp (dim_vector (nz, 1));
-          std::copy (ridx (), ridx () + nz, tmp.fortran_vec ());
+          std::copy_n (ridx (), nz, tmp.fortran_vec ());
           retval = Sparse<bool> (Array<bool> (dim_vector (1, 1), true),
                                  idx_vector (tmp),
                                  idx_vector (static_cast<octave_idx_type> (0)),
                                  nr, 1, false);
         }
     }
 
   return retval;
@@ -222,17 +222,17 @@ SparseBoolMatrix::sum (int dim) const
           Array<double> tmp (dim_vector (nr, 1), 0);
           for (octave_idx_type i = 0; i < nz; i++)
             tmp.xelem (ridx (i)) += 1.0;
           retval = tmp;
         }
       else
         {
           Array<octave_idx_type> tmp (dim_vector (nz, 1));
-          std::copy (ridx (), ridx () + nz, tmp.fortran_vec ());
+          std::copy_n (ridx (), nz, tmp.fortran_vec ());
           retval = Sparse<double> (Array<double> (dim_vector (1, 1), 1.0),
                                    idx_vector (tmp),
                                    idx_vector (static_cast<octave_idx_type> (0)),
                                    nr, 1);
         }
     }
 
   return retval;
diff --git a/liboctave/array/idx-vector.cc b/liboctave/array/idx-vector.cc
--- a/liboctave/array/idx-vector.cc
+++ b/liboctave/array/idx-vector.cc
@@ -470,17 +470,17 @@ idx_vector::idx_vector_rep::sort_uniq_cl
     new idx_vector_rep (0, len, ext, orig_dims, DIRECT));
 
   if (ext > len*octave::math::log2 (1.0 + len))
     {
       // Use standard sort via octave_sort.
       octave_idx_type *new_data = new octave_idx_type [len];
       new_rep->data = new_data;
 
-      std::copy (data, data + len, new_data);
+      std::copy_n (data, len, new_data);
       octave_sort<octave_idx_type> lsort;
       lsort.set_compare (ASCENDING);
       lsort.sort (new_data, len);
 
       if (uniq)
         {
           octave_idx_type new_len = std::unique (new_data, new_data + len)
                                     - new_data;
@@ -547,17 +547,17 @@ idx_vector::idx_vector_rep::sort_idx (Ar
       // Use standard sort via octave_sort.
       idx.clear (orig_dims);
       octave_idx_type *idx_data = idx.fortran_vec ();
       for (octave_idx_type i = 0; i < len; i++)
         idx_data[i] = i;
 
       octave_idx_type *new_data = new octave_idx_type [len];
       new_rep->data = new_data;
-      std::copy (data, data + len, new_data);
+      std::copy_n (data, len, new_data);
 
       octave_sort<octave_idx_type> lsort;
       lsort.set_compare (ASCENDING);
       lsort.sort (new_data, idx_data, len);
     }
   else
     {
       // Use two-pass bucket sort.
@@ -1077,17 +1077,17 @@ idx_vector::copy_data (octave_idx_type *
         *data = r->get_data ();
       }
       break;
 
     case class_vector:
       {
         idx_vector_rep * r = dynamic_cast<idx_vector_rep *> (rep);
         const octave_idx_type *rdata = r->get_data ();
-        std::copy (rdata, rdata + len, data);
+        std::copy_n (rdata, len, data);
       }
       break;
 
     case class_mask:
       {
         idx_mask_rep * r = dynamic_cast<idx_mask_rep *> (rep);
         const bool *mask = r->get_data ();
         octave_idx_type ext = r->extent (0);
diff --git a/liboctave/array/idx-vector.h b/liboctave/array/idx-vector.h
--- a/liboctave/array/idx-vector.h
+++ b/liboctave/array/idx-vector.h
@@ -626,27 +626,27 @@ public:
   octave_idx_type
   index (const T *src, octave_idx_type n, T *dest) const
   {
     octave_idx_type len = rep->length (n);
 
     switch (rep->idx_class ())
       {
       case class_colon:
-        std::copy (src, src + len, dest);
+        std::copy_n (src, len, dest);
         break;
 
       case class_range:
         {
           idx_range_rep * r = dynamic_cast<idx_range_rep *> (rep);
           octave_idx_type start = r->get_start ();
           octave_idx_type step = r->get_step ();
           const T *ssrc = src + start;
           if (step == 1)
-            std::copy (ssrc, ssrc + len, dest);
+            std::copy_n (ssrc, len, dest);
           else if (step == -1)
             std::reverse_copy (ssrc - len + 1, ssrc + 1, dest);
           else if (step == 0)
             std::fill_n (dest, len, *ssrc);
           else
             {
               for (octave_idx_type i = 0, j = 0; i < len; i++, j += step)
                 dest[i] = ssrc[j];
@@ -700,27 +700,27 @@ public:
   octave_idx_type
   assign (const T *src, octave_idx_type n, T *dest) const
   {
     octave_idx_type len = rep->length (n);
 
     switch (rep->idx_class ())
       {
       case class_colon:
-        std::copy (src, src + len, dest);
+        std::copy_n (src, len, dest);
         break;
 
       case class_range:
         {
           idx_range_rep * r = dynamic_cast<idx_range_rep *> (rep);
           octave_idx_type start = r->get_start ();
           octave_idx_type step = r->get_step ();
           T *sdest = dest + start;
           if (step == 1)
-            std::copy (src, src + len, sdest);
+            std::copy_n (src, len, sdest);
           else if (step == -1)
             std::reverse_copy (src, src + len, sdest - len + 1);
           else
             {
               for (octave_idx_type i = 0, j = 0; i < len; i++, j += step)
                 sdest[j] = src[i];
             }
         }
@@ -772,27 +772,27 @@ public:
   octave_idx_type
   fill (const T& val, octave_idx_type n, T *dest) const
   {
     octave_idx_type len = rep->length (n);
 
     switch (rep->idx_class ())
       {
       case class_colon:
-        std::fill (dest, dest + len, val);
+        std::fill_n (dest, len, val);
         break;
 
       case class_range:
         {
           idx_range_rep * r = dynamic_cast<idx_range_rep *> (rep);
           octave_idx_type start = r->get_start ();
           octave_idx_type step = r->get_step ();
           T *sdest = dest + start;
           if (step == 1)
-            std::fill (sdest, sdest + len, val);
+            std::fill_n (sdest, len, val);
           else if (step == -1)
             std::fill (sdest - len + 1, sdest + 1, val);
           else
             {
               for (octave_idx_type i = 0, j = 0; i < len; i++, j += step)
                 sdest[j] = val;
             }
         }
