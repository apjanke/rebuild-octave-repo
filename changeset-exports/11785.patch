# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1213815606 -7200
#      Wed Jun 18 21:00:06 2008 +0200
# Branch release-3-0-x
# Node ID 35d5c824f1eb3b35ff08cee9419e058bb84fed0a
# Parent  5667eafad9a10018293cadc10dfb9351cb9996ae
make regexp(...,'once') matlab compatible

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2008-06-20  Jaroslav Hajek <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/regexp.cc (octregexp_list): Make "once" an output
+	argument.
+	(octregexp): Do not use cell arrays when "once" is requested.
+
 2008-06-10  John W. Eaton  <jwe@octave.org>
 
 	* mexproto.h (mxCreateLogicalScalar): Declar arg as mxLogical, not int.
 
 2008-06-03  Jaroslav Hajek <highegg@gmail.com>
 
 	* load-save.cc (Fload): Fix "-7" option.
 
diff --git a/src/DLD-FUNCTIONS/regexp.cc b/src/DLD-FUNCTIONS/regexp.cc
--- a/src/DLD-FUNCTIONS/regexp.cc
+++ b/src/DLD-FUNCTIONS/regexp.cc
@@ -78,27 +78,27 @@ public:
   double e;
 };
 
 typedef std::list<regexp_elem>::const_iterator const_iterator;
 
 static int
 octregexp_list (const octave_value_list &args, const std::string &nm, 
 		bool case_insensitive, std::list<regexp_elem> &lst, 
-		string_vector &named, int &nopts)
+		string_vector &named, int &nopts, bool &once)
 {
   int sz = 0;
 #if defined (HAVE_REGEX) || defined (HAVE_PCRE) 
   int nargin = args.length();
-  bool once = false;
   bool lineanchors = false;
   bool dotexceptnewline = false;
   bool freespacing = false;
 
   nopts = nargin - 2;
+  once = false;
 
   std::string buffer = args(0).string_value ();
   if (error_state)
     {
       gripe_wrong_type_arg (nm.c_str(), args(0));
       return 0;
     }
 
@@ -446,17 +446,18 @@ static octave_value_list
 octregexp (const octave_value_list &args, int nargout, const std::string &nm,
 	   bool case_insensitive)
 {
   octave_value_list retval;
   int nargin = args.length();
   std::list<regexp_elem> lst;
   string_vector named;
   int nopts;
-  int sz = octregexp_list (args, nm, case_insensitive, lst, named, nopts);
+  bool once;
+  int sz = octregexp_list (args, nm, case_insensitive, lst, named, nopts, once);
 
   if (! error_state)
     {
       // Converted the linked list in the correct form for the return values
 
       octave_idx_type i = 0;
 #ifdef HAVE_PCRE
       Octave_map nmap;
@@ -477,46 +478,80 @@ octregexp (const octave_value_list &args
 	      nmap.assign (named(j), octave_value (tmp));
 	    }
 	  retval(5) = nmap;
 	}
 #else
       retval(5) = Octave_map();
 #endif
 
-      Cell t (dim_vector(1, sz));
-      i = 0;
-      for (const_iterator p = lst.begin(); p != lst.end(); p++)
-	t(i++) = p->t;
-      retval(4) = t;
+      if (once)
+        retval(4) = sz ? lst.front ().t : Cell();
+      else
+        {
+          Cell t (dim_vector(1, sz));
+          i = 0;
+          for (const_iterator p = lst.begin(); p != lst.end(); p++)
+            t(i++) = p->t;
+          retval(4) = t;
+        }
 
-      Cell m (dim_vector(1, sz));
-      i = 0;
-      for (const_iterator p = lst.begin(); p != lst.end(); p++)
-	m(i++) = p->m;
-      retval(3) = m;
-
+      if (once)
+        retval(3) = sz ? lst.front ().m : std::string();
+      else
+        {
+          Cell m (dim_vector(1, sz));
+          i = 0;
+          for (const_iterator p = lst.begin(); p != lst.end(); p++)
+            m(i++) = p->m;
+          retval(3) = m;
+        }
 
-      Cell te (dim_vector(1, sz));
-      i = 0;
-      for (const_iterator p = lst.begin(); p != lst.end(); p++)
-	te(i++) = p->te;
-      retval(2) = te;
+      if (once)
+        retval(2) = sz ? lst.front ().te : Matrix();
+      else
+        {
+          Cell te (dim_vector(1, sz));
+          i = 0;
+          for (const_iterator p = lst.begin(); p != lst.end(); p++)
+            te(i++) = p->te;
+          retval(2) = te;
+        }
 
-      NDArray e (dim_vector(1, sz));
-      i = 0;
-      for (const_iterator p = lst.begin(); p != lst.end(); p++)
-	e(i++) = p->e;
-      retval(1) = e;
+      if (once)
+        {
+          if (sz)
+            retval(1) = lst.front ().e;
+          else
+            retval(1) = Matrix();
+        }
+      else
+        {
+          NDArray e (dim_vector(1, sz));
+          i = 0;
+          for (const_iterator p = lst.begin(); p != lst.end(); p++)
+            e(i++) = p->e;
+          retval(1) = e;
+        }
 
+      if (once)
+        {
+          if (sz)
+            retval(0) = lst.front ().s;
+          else
+            retval(0) = Matrix();
+        }
+      else
+        {
       NDArray s (dim_vector(1, sz));
       i = 0;
       for (const_iterator p = lst.begin(); p != lst.end(); p++)
 	s(i++) = p->s;
       retval(0) = s;
+        }
 
       // Alter the order of the output arguments
       if (nopts > 0)
 	{
 	  int n = 0;
 	  octave_value_list new_retval;
 	  new_retval.resize(nargout);
 
@@ -906,31 +941,27 @@ The pattern is taken literally.\n\
 %! assert (size(t), [1,2])
 %! assert (isempty(t{1}))
 %! assert (isempty(t{2}))
 
 %!test
 %! [s, e, te, m, t] = regexp('short test string','\w*r\w*','once');
 %! assert (s,1)
 %! assert (e,5)
-%! assert (size(te), [1,1])
-%! assert (isempty(te{1}))
-%! assert (m{1},'short')
-%! ## Matlab gives [1,0] here but that seems wrong.
-%! assert (size(t), [1,1])
+%! assert (isempty(te))
+%! assert (m,'short')
+%! assert (isempty(t))
 
 %!test
 %! [m, te, e, s, t] = regexp('short test string','\w*r\w*','once', 'match', 'tokenExtents', 'end', 'start', 'tokens');
 %! assert (s,1)
 %! assert (e,5)
-%! assert (size(te), [1,1])
-%! assert (isempty(te{1}))
-%! assert (m{1},'short')
-%! ## Matlab gives [1,0] here but that seems wrong.
-%! assert (size(t), [1,1])
+%! assert (isempty(te))
+%! assert (m,'short')
+%! assert (isempty(t))
 
 %!testif HAVE_PCRE
 %! ## This test is expected to fail if PCRE is not installed
 %! [s, e, te, m, t, nm] = regexp('short test string','(?<word1>\w*t)\s*(?<word2>\w*t)');
 %! assert (s,1)
 %! assert (e,10)
 %! assert (size(te), [1,1])
 %! assert (te{1}, [1 5; 7, 10])
@@ -1082,31 +1113,27 @@ if there are none. See @code{regexp} for
 %! assert (size(t), [1,2])
 %! assert (isempty(t{1}))
 %! assert (isempty(t{2}))
 
 %!test
 %! [s, e, te, m, t] = regexpi('ShoRt Test String','\w*r\w*','once');
 %! assert (s,1)
 %! assert (e,5)
-%! assert (size(te), [1,1])
-%! assert (isempty(te{1}))
-%! assert (m{1},'ShoRt')
-%! ## Matlab gives [1,0] here but that seems wrong.
-%! assert (size(t), [1,1])
+%! assert (isempty(te))
+%! assert (m,'ShoRt')
+%! assert (isempty(t))
 
 %!test
 %! [m, te, e, s, t] = regexpi('ShoRt Test String','\w*r\w*','once', 'match', 'tokenExtents', 'end', 'start', 'tokens');
 %! assert (s,1)
 %! assert (e,5)
-%! assert (size(te), [1,1])
-%! assert (isempty(te{1}))
-%! assert (m{1},'ShoRt')
-%! ## Matlab gives [1,0] here but that seems wrong.
-%! assert (size(t), [1,1])
+%! assert (isempty(te))
+%! assert (m,'ShoRt')
+%! assert (isempty(t))
 
 %!testif HAVE_PCRE
 %! ## This test is expected to fail if PCRE is not installed
 %! [s, e, te, m, t, nm] = regexpi('ShoRt Test String','(?<word1>\w*t)\s*(?<word2>\w*t)');
 %! assert (s,1)
 %! assert (e,10)
 %! assert (size(te), [1,1])
 %! assert (te{1}, [1 5; 7, 10])
@@ -1232,17 +1259,18 @@ octregexprep (const octave_value_list &a
 
   // Perform replacement
   std::string rep;
   if (tokens > 0) 
     {
       std::list<regexp_elem> lst;
       string_vector named;
       int nopts;
-      int sz = octregexp_list (regexpargs, nm , false, lst, named, nopts);
+      bool once;
+      int sz = octregexp_list (regexpargs, nm , false, lst, named, nopts, once);
 
       if (error_state)
 	return retval;
       if (sz == 0)
 	{
 	  retval = args(0);
 	  return retval;
 	}
@@ -1318,17 +1346,18 @@ octregexprep (const octave_value_list &a
 	}
       rep.append(&buffer[from],buffer.size()-from);
     } 
   else 
     {
       std::list<regexp_elem> lst;
       string_vector named;
       int nopts;
-      int sz = octregexp_list (regexpargs, nm, false, lst, named,nopts);
+      bool once;
+      int sz = octregexp_list (regexpargs, nm, false, lst, named, nopts, once);
 
       if (error_state)
 	return retval;
       if (sz == 0)
 	{
 	  retval = args(0);
 	  return retval;
 	}
