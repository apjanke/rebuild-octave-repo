# HG changeset patch
# User Rik <rik@octave.org>
# Date 1377140022 25200
#      Wed Aug 21 19:53:42 2013 -0700
# Node ID 088d014a7fe2866c05db60cebabb9707dc71d37b
# Parent  56404cdcb7238e79f8d3c9cb6a9a5aa0fa2ff7e3
Use semicolon after "return" statement in core m-files.

* scripts/general/accumdim.m, scripts/image/imformats.m, scripts/io/textread.m,
scripts/io/textscan.m, scripts/linear-algebra/expm.m,
scripts/miscellaneous/edit.m, scripts/optimization/lsqnonneg.m,
scripts/optimization/pqpnonneg.m, scripts/pkg/private/dirempty.m,
scripts/plot/findobj.m, scripts/plot/graphics_toolkit.m,
scripts/plot/private/__errplot__.m, scripts/plot/private/__interp_cube__.m,
scripts/plot/private/__marching_cube__.m, scripts/plot/subplot.m,
scripts/polynomial/residue.m, scripts/sparse/sprandsym.m,
scripts/special-matrix/gallery.m, scripts/strings/strjoin.m:
Use semicolon after "return" statement in core m-files.

diff --git a/scripts/general/accumdim.m b/scripts/general/accumdim.m
--- a/scripts/general/accumdim.m
+++ b/scripts/general/accumdim.m
@@ -103,17 +103,17 @@ function A = accumdim (subs, vals, dim, 
     ## Fill in nonzero fill value
     if (fillval != 0)
       mask = true (n, 1);
       mask(subs) = false;
       subsc = {':'}(ones (1, length (sz)));
       subsc{dim} = mask;
       A(subsc{:}) = fillval;
     endif
-    return
+    return;
   endif
 
   ## The general case.
   ns = length (subs);
   ## Sort indices.
   [subs, idx] = sort (subs(:));
   ## Identify runs.
   jdx = find (subs(1:ns-1) != subs(2:ns));
diff --git a/scripts/image/imformats.m b/scripts/image/imformats.m
--- a/scripts/image/imformats.m
+++ b/scripts/image/imformats.m
@@ -170,17 +170,17 @@ function formats = default_formats ()
                                 "alpha", {},
                                 "description", {},
                                 "multipage", {});
 
   ## Image IO abilities won't change during the same Octave session,
   ## there's no need to go and calculate it all over again if we are
   ## requested to reset back to factory.
   if (! isempty (formats))
-    return
+    return;
   endif
 
   ##      Building the formats info
   ##
   ## As mentioned above we start with a whitelist of coders. Since the
   ## GraphicsMagick build may be missing some coders, we will remove those
   ## from the list. Some info can be obtained directly from GraphicsMagick
   ## through the CoderInfo object. However, some will need to be hardcoded.
diff --git a/scripts/io/textread.m b/scripts/io/textread.m
--- a/scripts/io/textread.m
+++ b/scripts/io/textread.m
@@ -68,17 +68,17 @@ function varargout = textread (filename,
   if (! isempty (varargin) && isnumeric (varargin{1}))
     nlines = varargin{1};
   else
     nlines = Inf;
   endif
   if (nlines < 1)
     printf ("textread: N = 0, no data read\n");
     varargout = cell (1, nargout);
-    return
+    return;
   endif
 
   ## Read file
   fid = fopen (filename, "r");
   if (fid == -1)
     error ("textread: could not open '%s' for reading", filename);
   endif
 
diff --git a/scripts/io/textscan.m b/scripts/io/textscan.m
--- a/scripts/io/textscan.m
+++ b/scripts/io/textscan.m
@@ -108,18 +108,17 @@ function [C, position] = textscan (fid, 
   args = varargin;
   if (nargin > 2 && isnumeric (args{1}))
     nlines = args{1};
   else
     nlines = Inf;
   endif
   if (nlines < 1)
     printf ("textscan: N = 0, no data read\n");
-    return
-  endif
+    return;  endif
 
   if (! any (strcmpi (args, "emptyvalue")))
     ## Matlab returns NaNs for missing values
     args(end+1:end+2) = {'emptyvalue', NaN};
   endif
 
   ## Check default parameter values that differ for strread & textread
 
diff --git a/scripts/linear-algebra/expm.m b/scripts/linear-algebra/expm.m
--- a/scripts/linear-algebra/expm.m
+++ b/scripts/linear-algebra/expm.m
@@ -78,20 +78,20 @@ function r = expm (A)
   endif
 
   if (! ismatrix (A) || ! issquare (A))
     error ("expm: A must be a square matrix");
   endif
 
   if (isscalar (A))
     r = exp (A);
-    return
+    return;
   elseif (strfind (typeinfo (A), "diagonal matrix"))
     r = diag (exp (diag (A)));
-    return
+    return;
   endif
 
   n = rows (A);
   ## Trace reduction.
   A(A == -Inf) = -realmax;
   trshift = trace (A) / length (A);
   if (trshift > 0)
     A -= trshift*eye (n);
diff --git a/scripts/miscellaneous/edit.m b/scripts/miscellaneous/edit.m
--- a/scripts/miscellaneous/edit.m
+++ b/scripts/miscellaneous/edit.m
@@ -203,36 +203,36 @@ function ret = edit (varargin)
         FUNCTION.LICENSE = stateval;
         return;
       case "MODE"
         if (strcmp (stateval, "sync") || strcmp (stateval, "async"))
           FUNCTION.MODE = stateval;
         else
           error ('edit: expected "edit MODE sync|async"');
         endif
-        return
+        return;
       case "EDITINPLACE"
         if (ischar (stateval))
           if (strcmpi (stateval, "true"))
             stateval = true;
           elseif (strcmpi (stateval, "false"))
             stateval = false;
           else
             stateval = eval (stateval);
           endif
         endif
         FUNCTION.EDITINPLACE = stateval;
-        return
+        return;
       case "GET"
         if (isfield (FUNCTION, toupper (stateval)))
           ret = FUNCTION.(toupper (stateval));
         else
           ret = FUNCTION;
         endif
-        return
+        return;
       otherwise
         ## If none of the states match, assume both inputs are
         ## actually both file names to be opened
         editfilelist = varargin;
     endswitch
   elseif (nargin > 2)
     if (iscellstr (varargin))
       editfilelist = varargin;
diff --git a/scripts/optimization/lsqnonneg.m b/scripts/optimization/lsqnonneg.m
--- a/scripts/optimization/lsqnonneg.m
+++ b/scripts/optimization/lsqnonneg.m
@@ -74,17 +74,17 @@
 
 ## This is implemented from Lawson and Hanson's 1973 algorithm on page
 ## 161 of Solving Least Squares Problems.
 
 function [x, resnorm, residual, exitflag, output, lambda] = lsqnonneg (c, d, x = [], options = struct ())
 
   if (nargin == 1 && ischar (c) && strcmp (c, 'defaults'))
     x = optimset ("MaxIter", 1e5);
-    return
+    return;
   endif
 
   if (! (nargin >= 2 && nargin <= 4 && ismatrix (c) && ismatrix (d) && isstruct (options)))
     print_usage ();
   endif
 
   ## Lawson-Hanson Step 1 (LH1): initialize the variables.
   m = rows (c);
diff --git a/scripts/optimization/pqpnonneg.m b/scripts/optimization/pqpnonneg.m
--- a/scripts/optimization/pqpnonneg.m
+++ b/scripts/optimization/pqpnonneg.m
@@ -67,17 +67,17 @@
 ## implemented from Lawson and Hanson's 1973 algorithm on page
 ## 161 of Solving Least Squares Problems.
 ## It shares the convergence guarantees.
 
 function [x, minval, exitflag, output, lambda] = pqpnonneg (c, d, x = [], options = struct ())
 
   if (nargin == 1 && ischar (c) && strcmp (c, 'defaults'))
     x = optimset ("MaxIter", 1e5);
-    return
+    return;
   endif
 
   if (! (nargin >= 2 && nargin <= 4 && ismatrix (c) && ismatrix (d) && isstruct (options)))
     print_usage ();
   endif
 
   ## Lawson-Hanson Step 1 (LH1): initialize the variables.
   m = rows (c);
diff --git a/scripts/pkg/private/dirempty.m b/scripts/pkg/private/dirempty.m
--- a/scripts/pkg/private/dirempty.m
+++ b/scripts/pkg/private/dirempty.m
@@ -35,16 +35,16 @@ function emp = dirempty (nm, ign)
       for j = 1:length (ign)
         if (strcmp (l(i).name, ign{j}))
           found = true;
           break;
         endif
       endfor
       if (! found)
         emp = false;
-        return
+        return;
       endif
     endfor
     emp = true;
   else
     emp = true;
   endif
 endfunction
diff --git a/scripts/plot/findobj.m b/scripts/plot/findobj.m
--- a/scripts/plot/findobj.m
+++ b/scripts/plot/findobj.m
@@ -175,17 +175,17 @@ function h = findobj (varargin)
           np = np + 1;
         else
           error ("findobj: inconsistent number of arguments");
         endif
       else
         ## This is sloppy ... but works like Matlab.
         if (strcmpi (args{na}, "-not"))
           h = [];
-          return
+          return;
         endif
         na = na + 1;
       endif
     else
       error ("findobj: properties and options must be strings");
     endif
   endwhile
 
diff --git a/scripts/plot/graphics_toolkit.m b/scripts/plot/graphics_toolkit.m
--- a/scripts/plot/graphics_toolkit.m
+++ b/scripts/plot/graphics_toolkit.m
@@ -48,17 +48,17 @@ function retval = graphics_toolkit (name
   endif
 
   if (nargin == 0)
     return;
   elseif (nargin == 1)
     if (all (isfigure (name)))
       hlist = name;
       retval = get (hlist, "__graphics_toolkit__");
-      return
+      return;
     elseif (! ischar (name))
       error ("graphics_toolkit: invalid graphics toolkit NAME");
     endif
   elseif (nargin == 2)
     ## Swap input arguments
     [hlist, name] = deal (name, hlist);
     if (! all (isfigure (hlist)))
       error ("graphics_toolkit: invalid figure handle list HLIST");
diff --git a/scripts/plot/private/__errplot__.m b/scripts/plot/private/__errplot__.m
--- a/scripts/plot/private/__errplot__.m
+++ b/scripts/plot/private/__errplot__.m
@@ -282,17 +282,17 @@ function [xdata, ydata] = errorbar_data 
              ydata-ldata, nans];
   elseif (strcmp (ifmt, "xyerr"))
     [x1, y1] = errorbar_data (xdata, ydata, ldata, udata,
                               xldata, xudata, "xerr", xscale, yscale);
     [x2, y2] = errorbar_data (xdata, ydata, ldata, udata,
                               xldata, xudata, "yerr", xscale, yscale);
     xdata = [x1; x2];
     ydata = [y1; y2];
-    return
+    return;
   else
     error ("errorbar: valid error bar types are xerr, yerr, boxxy, and xyerr");
   endif
 
   xdata = xdata.'(:);
   ydata = ydata.'(:);
 
 endfunction
diff --git a/scripts/plot/private/__interp_cube__.m b/scripts/plot/private/__interp_cube__.m
--- a/scripts/plot/private/__interp_cube__.m
+++ b/scripts/plot/private/__interp_cube__.m
@@ -42,17 +42,17 @@ function [Vxyz, idx, frac] = __interp_cu
   if (columns (v) != 3)
     error ( "V has to be Nx3 matrix");
   endif
   ##if (!ischar (req))
   ## error ('__interp_cube__: Invalid request parameter use "values", "normals" or "normals8"');
   ##endif
   if (isempty (v))
     Vxyz = idx = frac = [];
-    return
+    return;
   endif
 
   switch (req)
     case "normals"
       [idx, frac] = cube_idx (x, y, z, v);
 
       dx = x(2:end) - x(1:end-1);
       dy = y(2:end) - y(1:end-1);
diff --git a/scripts/plot/private/__marching_cube__.m b/scripts/plot/private/__marching_cube__.m
--- a/scripts/plot/private/__marching_cube__.m
+++ b/scripts/plot/private/__marching_cube__.m
@@ -144,17 +144,17 @@ function [T, p, col] = __marching_cube__
     idx = c(vertex_idx{ii, :}) > iso;
     cc(idx) = bitset (cc(idx), ii);
   endfor
 
   cedge = edge_table(cc+1); # assign the info about intersected edges
   id =  find (cedge); # select only voxels which are intersected
   if (isempty (id))
     T = p = col = [];
-    return
+    return;
   endif
 
   ## phase II: calculate the list of intersection points
   xyz_off = [1, 1, 1; 2, 1, 1; 2, 2, 1; 1, 2, 1; 1, 1, 2;  2, 1, 2; 2, 2, 2; 1, 2, 2];
   edges = [1 2; 2 3; 3 4; 4 1; 5 6; 6 7; 7 8; 8 5; 1 5; 2 6; 3 7; 4 8];
   offset = sub2ind (size (c), xyz_off(:, 1), xyz_off(:, 2), xyz_off(:, 3)) -1;
   pp = zeros (length (id), lindex, 12);
   ccedge = [vec(cedge(id)), id];
diff --git a/scripts/plot/subplot.m b/scripts/plot/subplot.m
--- a/scripts/plot/subplot.m
+++ b/scripts/plot/subplot.m
@@ -272,17 +272,17 @@ function pos = subplot_position (rows, c
 
   if (rows == 1 && cols == 1)
     ## Trivial result for subplot (1,1,1)
     if (strcmpi (position_property, "position"))
       pos = get (0, "defaultaxesposition");
     else
       pos = get (0, "defaultaxesouterposition");
     endif
-    return
+    return;
   endif
 
   if (strcmp (position_property, "outerposition")
       || strcmp (position_property, "outerpositiontight"))
     margins.left   = 0.05;
     margins.bottom = 0.05;
     margins.right  = 0.05;
     margins.top    = 0.05;
diff --git a/scripts/polynomial/residue.m b/scripts/polynomial/residue.m
--- a/scripts/polynomial/residue.m
+++ b/scripts/polynomial/residue.m
@@ -155,17 +155,17 @@ function [r, p, k, e] = residue (b, a, v
     if (nargin >= 4)
       e = varargin{2};
     else
       e = [];
     endif
     ## The inputs are the residue, pole, and direct part. Solve for the
     ## corresponding numerator and denominator polynomials
     [r, p] = rresidue (b, a, varargin{1}, toler, e);
-    return
+    return;
   endif
 
   ## Make sure both polynomials are in reduced form.
 
   a = polyreduce (a);
   b = polyreduce (b);
 
   b = b / a(1);
diff --git a/scripts/sparse/sprandsym.m b/scripts/sparse/sprandsym.m
--- a/scripts/sparse/sprandsym.m
+++ b/scripts/sparse/sprandsym.m
@@ -116,17 +116,17 @@ function r = pick_rand_diag (n, k)
   ##
   ## Thanks to Zsbán Ambrus <ambrus@math.bme.hu> for most of the ideas
   ## of the implementation here, especially how to do the computation
   ## numerically to avoid overflow.
 
   ## Degenerate case
   if (k == 1)
     r = 1;
-    return
+    return;
   endif
 
   ## Compute the stuff described above
   a = n*(n - 1)/2;
   d = [mod(k,2):2:min(n,k)-2];
   m = (k - d)/2;
   q = (n - d).*(n - d - 1).*m ./ (d + 2)./(d + 1)./(a - m + 1);
 
diff --git a/scripts/special-matrix/gallery.m b/scripts/special-matrix/gallery.m
--- a/scripts/special-matrix/gallery.m
+++ b/scripts/special-matrix/gallery.m
@@ -2247,17 +2247,17 @@ function A = randsvd (n, kappa = sqrt (1
   endif
   sigma = diag (sigma);
 
   if (posdef)
     ## handle case where KAPPA was negative
     Q = qmult (p);
     A = Q' * sigma * Q;
     A = (A + A') / 2;  # Ensure matrix is symmetric.
-    return
+    return;
   endif
 
   if (m != n)
     ## Expand to m-by-n diagonal matrix
     sigma(m, n) = 0;
   endif
 
   if (kl == 0 && ku == 0)
diff --git a/scripts/strings/strjoin.m b/scripts/strings/strjoin.m
--- a/scripts/strings/strjoin.m
+++ b/scripts/strings/strjoin.m
@@ -53,17 +53,17 @@ function rval = strjoin (cstr, delimiter
   elseif (nargin < 1 || nargin > 2)
     print_usage ();
   elseif (! (iscellstr (cstr) && (ischar (delimiter) || iscellstr (delimiter))))
     print_usage ();
   endif
 
   if (numel (cstr) == 1)
     rval = cstr{1};
-    return
+    return;
   endif
 
   if (ischar (delimiter))
     delimiter = do_string_escapes (delimiter);
     delimiter = {delimiter};
   endif
  
   num = numel (cstr); 
