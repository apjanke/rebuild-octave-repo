# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1257452011 -3600
#      Thu Nov 05 21:13:31 2009 +0100
# Node ID 6dafc60dde31c3bc58ad240708610e41c87c65cb
# Parent  2941c1daf509072b9c2b093e85debadb141b8254
rename oct-mem functions

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -72,17 +72,17 @@ Array<T>::fill (const T& val)
 {
   if (rep->count > 1)
     {
       --rep->count;
       rep = new ArrayRep (length (), val);
       slice_data = rep->data;
     }
   else
-    octave_fill (slice_len, val, slice_data);
+    fill_or_memset (slice_len, val, slice_data);
 }
 
 template <class T>
 void
 Array<T>::clear (void)
 {
   if (--rep->count <= 0)
     delete rep;
@@ -564,17 +564,17 @@ private:
   template <class T>
   T *do_permute (const T *src, T *dest, int lev) const
     {
       if (lev == 0)
         {
           octave_idx_type step = stride[0], len = dim[0];
           if (step == 1)
             {
-              octave_ucopy (len, src, dest);
+              copy_or_memcpy (len, src, dest);
               dest += len;
             }
           else
             {
               for (octave_idx_type i = 0, j = 0; i < len; i++, j += step)
                 dest[i] = src[j];
 
               dest += len;
@@ -827,26 +827,26 @@ public:
 
 private:
   // recursive resizing
   template <class T>
   void do_resize_fill (const T* src, T *dest, const T& rfv, int lev) const
     {
       if (lev == 0)
         {
-          octave_ucopy (cext[0], src, dest);
-          octave_fill (dext[0] - cext[0], rfv, dest + cext[0]);
+          copy_or_memcpy (cext[0], src, dest);
+          fill_or_memset (dext[0] - cext[0], rfv, dest + cext[0]);
         }
       else
         {
           octave_idx_type sd = sext[lev-1], dd = dext[lev-1], k;
           for (k = 0; k < cext[lev]; k++)
             do_resize_fill (src + k * sd, dest + k * dd, rfv, lev - 1);
 
-          octave_fill (dext[lev] - k * dd, rfv, dest + k * dd);
+          fill_or_memset (dext[lev] - k * dd, rfv, dest + k * dd);
         }
     }
 public:
   template <class T>
   void resize_fill (const T* src, T *dest, const T& rfv) const 
     { do_resize_fill (src, dest, rfv, n-1); }
 
 };
@@ -1112,30 +1112,30 @@ Array<T>::resize_fill (octave_idx_type n
                 }
               else
                 {
                   static const octave_idx_type max_stack_chunk = 1024;
                   octave_idx_type nn = n + std::min (nx, max_stack_chunk);
                   Array<T> tmp (Array<T> (nn), dv, 0, n);
                   T *dest = tmp.fortran_vec ();
 
-                  octave_ucopy (nx, data (), dest);
+                  copy_or_memcpy (nx, data (), dest);
                   dest[nx] = rfv;
 
                   *this = tmp;
                 }
             }
           else if (n != nx)
             {
               Array<T> tmp = Array<T> (dv);
               T *dest = tmp.fortran_vec ();
 
               octave_idx_type n0 = std::min (n, nx), n1 = n - n0;
-              octave_ucopy (n0, data (), dest);
-              octave_fill (n1, rfv, dest + n0);
+              copy_or_memcpy (n0, data (), dest);
+              fill_or_memset (n1, rfv, dest + n0);
 
               *this = tmp;
             }
         }
     }
   else
     gripe_invalid_resize ();
 }
@@ -1152,32 +1152,32 @@ Array<T>::resize_fill (octave_idx_type r
           Array<T> tmp = Array<T> (dim_vector (r, c));
           T *dest = tmp.fortran_vec ();
 
           octave_idx_type r0 = std::min (r, rx), r1 = r - r0;
           octave_idx_type c0 = std::min (c, cx), c1 = c - c0;
           const T *src = data ();
           if (r == rx)
             {
-              octave_ucopy (r * c0, src, dest);
+              copy_or_memcpy (r * c0, src, dest);
               dest += r * c0;
             }
           else
             {
               for (octave_idx_type k = 0; k < c0; k++)
                 {
-                  octave_ucopy (r0, src, dest);
+                  copy_or_memcpy (r0, src, dest);
                   src += rx;
                   dest += r0;
-                  octave_fill (r1, rfv, dest);
+                  fill_or_memset (r1, rfv, dest);
                   dest += r1;
                 }
             }
 
-          octave_fill (r * c1, rfv, dest);
+          fill_or_memset (r * c1, rfv, dest);
 
           *this = tmp;
         }
     }
   else
     gripe_invalid_resize ();
 
 }
@@ -1552,18 +1552,18 @@ Array<T>::delete_elements (const idx_vec
         }
       else if (i.is_cont_range (n, l, u))
         {
           // Special case deleting a contiguous range.
           octave_idx_type m = n + l - u;
           Array<T> tmp (dim_vector (col_vec ? m : 1, !col_vec ? m : 1));
           const T *src = data ();
           T *dest = tmp.fortran_vec ();
-          octave_ucopy (l, src, dest);
-          octave_ucopy (n - u, src + u, dest + l);
+          copy_or_memcpy (l, src, dest);
+          copy_or_memcpy (n - u, src + u, dest + l);
           *this = tmp;
         }
       else
         {
           // Use index.
           *this = index (i.complement (n));
         }
     }
@@ -1604,19 +1604,19 @@ Array<T>::delete_elements (int dim, cons
 
           // Special case deleting a contiguous range.
           Array<T> tmp = Array<T> (rdv);
           const T *src = data ();
           T *dest = tmp.fortran_vec ();
           l *= dl; u *= dl; n *= dl;
           for (octave_idx_type k = 0; k < du; k++)
             {
-              octave_ucopy (l, src, dest);
+              copy_or_memcpy (l, src, dest);
               dest += l;
-              octave_ucopy (n - u, src + u, dest);
+              copy_or_memcpy (n - u, src + u, dest);
               dest += n - u;
               src += n;
             }
 
           *this = tmp;
         }
       else
         {
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -57,39 +57,39 @@ protected:
   {
   public:
 
     T *data;
     octave_idx_type len;
     int count;
 
     ArrayRep (T *d, octave_idx_type l, bool copy = false) 
-      : data (copy ? octave_new<T> (l) : d), len (l), count (1) 
+      : data (copy ? no_ctor_new<T> (l) : d), len (l), count (1) 
         { 
           if (copy)
-            octave_ucopy (l, d, data);
+            copy_or_memcpy (l, d, data);
         }
 
     ArrayRep (void) : data (0), len (0), count (1) { }
 
-    explicit ArrayRep (octave_idx_type n) : data (octave_new<T> (n)), len (n), count (1) { }
+    explicit ArrayRep (octave_idx_type n) : data (no_ctor_new<T> (n)), len (n), count (1) { }
 
     explicit ArrayRep (octave_idx_type n, const T& val)
-      : data (octave_new<T> (n)), len (n), count (1)
+      : data (no_ctor_new<T> (n)), len (n), count (1)
       {
-        octave_fill (n, val, data);
+        fill_or_memset (n, val, data);
       }
 
     ArrayRep (const ArrayRep& a)
-      : data (octave_new<T> (a.len)), len (a.len), count (1)
+      : data (no_ctor_new<T> (a.len)), len (a.len), count (1)
       {
-        octave_ucopy (a.len, a.data, data);
+        copy_or_memcpy (a.len, a.data, data);
       }
  
-    ~ArrayRep (void) { octave_delete<T> (data); }
+    ~ArrayRep (void) { no_ctor_delete<T> (data); }
 
     octave_idx_type length (void) const { return len; }
 
   private:
 
     // No assignment!
 
     ArrayRep& operator = (const ArrayRep& a);
@@ -164,17 +164,17 @@ private:
 
       return nr;
     }
 
   template <class U>
   T *
   coerce (const U *a, octave_idx_type len)
   {
-    T *retval = octave_new<T> (len);
+    T *retval = no_ctor_new<T> (len);
 
     for (octave_idx_type i = 0; i < len; i++)
       retval[i] = T (a[i]);
 
     return retval;
   }
 
 public:
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,18 @@
+2009-11-03  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-mem.h: Rename octave_ucopy -> copy_or_memcpy,
+	octave_fill -> fill_or_memset, octave_new -> no_ctor_new,
+	octave_delete -> no_ctor_delete.
+	* Array.h: Update.
+	* Array.cc: Update.
+	* idx-vector.h: Update.
+	* idx-vector.cc: Update.
+
 2009-11-03  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-mem.h: New source.
 	* Makefile.in: Include it.
 	* Array.h (Array<T>::ArrayRep::ArrayRep (...)): Use octave_new,
 	octave_ucopy and octave_fill.
 	(Array<T>::ArrayRep::~ArrayRep): Use octave_delete.
 	(Array<T>::coerce): Use octave_new.
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -631,17 +631,17 @@ idx_vector::copy_data (octave_idx_type *
           idx_scalar_rep * r = dynamic_cast<idx_scalar_rep *> (rep);
           *data = r->get_data ();
         }
       break;
     case class_vector:
         {
           idx_vector_rep * r = dynamic_cast<idx_vector_rep *> (rep);
           const octave_idx_type *rdata = r->get_data ();
-          octave_ucopy (len, rdata, data);
+          copy_or_memcpy (len, rdata, data);
         }
       break;
     default:
       assert (false);
       break;
     }
 
 }
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -513,25 +513,25 @@ public:
   template <class T>
   octave_idx_type
   index (const T *src, octave_idx_type n, T *dest) const
     {
       octave_idx_type len = rep->length (n);
       switch (rep->idx_class ())
         {
         case class_colon:
-          octave_ucopy (len, src, dest);
+          copy_or_memcpy (len, src, dest);
           break;
         case class_range:
           {
             idx_range_rep * r = dynamic_cast<idx_range_rep *> (rep);
             octave_idx_type start = r->get_start (), step = r->get_step ();
             const T *ssrc = src + start;
             if (step == 1)
-              octave_ucopy (len, ssrc, dest);
+              copy_or_memcpy (len, ssrc, dest);
             else if (step == -1)
               std::reverse_copy (ssrc - len + 1, ssrc + 1, dest);
             else if (step == 0)
               std::fill_n (dest, len, *ssrc);
             else
               {
                 for (octave_idx_type i = 0, j = 0; i < len; i++, j += step)
                   dest[i] = ssrc[j];
@@ -571,25 +571,25 @@ public:
   template <class T>
   octave_idx_type
   assign (const T *src, octave_idx_type n, T *dest) const
     {
       octave_idx_type len = rep->length (n);
       switch (rep->idx_class ())
         {
         case class_colon:
-          octave_ucopy (len, src, dest);
+          copy_or_memcpy (len, src, dest);
           break;
         case class_range:
           {
             idx_range_rep * r = dynamic_cast<idx_range_rep *> (rep);
             octave_idx_type start = r->get_start (), step = r->get_step ();
             T *sdest = dest + start;
             if (step == 1)
-              octave_ucopy (len, src, sdest);
+              copy_or_memcpy (len, src, sdest);
             else if (step == -1)
               std::reverse_copy (src, src + len, sdest - len + 1);
             else
               {
                 for (octave_idx_type i = 0, j = 0; i < len; i++, j += step)
                   sdest[j] = src[i];
               }
           }
diff --git a/liboctave/oct-mem.h b/liboctave/oct-mem.h
--- a/liboctave/oct-mem.h
+++ b/liboctave/oct-mem.h
@@ -34,21 +34,21 @@ along with Octave; see the file COPYING.
 // priority. They assume that the std::complex and octave_int can be
 // manipulated as plain memory, an assumption that is always true in practice
 // but not theoretically guaranteed by the C++ standard. In the future, C++ may
 // provide a better way to accomplish these tasks.
 
 // Unaliased copy. This boils down to memcpy, even for octave_int and complex types.
 
 template <class T>
-inline void octave_ucopy (octave_idx_type n, const T *src, T *dest)
+inline void copy_or_memcpy (octave_idx_type n, const T *src, T *dest)
 { std::copy (src, src + n, dest); }
 
 #define DEFINE_POD_UCOPY(T) \
-inline void octave_ucopy (octave_idx_type n, const T *src, T *dest) \
+inline void copy_or_memcpy (octave_idx_type n, const T *src, T *dest) \
 { std::memcpy (dest, src, n * sizeof (T)); }
 
 DEFINE_POD_UCOPY (double)
 DEFINE_POD_UCOPY (float)
 DEFINE_POD_UCOPY (char)
 DEFINE_POD_UCOPY (short)
 DEFINE_POD_UCOPY (int)
 DEFINE_POD_UCOPY (long)
@@ -61,35 +61,41 @@ DEFINE_POD_UCOPY (Complex)
 DEFINE_POD_UCOPY (FloatComplex)
 
 template <class T>
 DEFINE_POD_UCOPY (octave_int<T>)
 
 // Fill by value, with a check for zero. This boils down to memset if value is
 // a POD zero.
 template <class T>
-inline void octave_fill (octave_idx_type n, const T& value, T *dest)
+inline void fill_or_memset (octave_idx_type n, const T& value, T *dest)
 { std::fill_n (dest, n, value); }
 
 template <class T>
-inline bool octave_fill_iszero (const T& value)
-{ return value == T(); }
+inline bool helper_is_zero_mem (const T& value)
+{ 
+  typedef typename query_integer_type<sizeof (T), false>::type IT; // get integer type of the same size.
+  return *(reinterpret_cast<const IT *>(&value)) == 0; 
+}
 
 template <class T>
-inline bool octave_fill_iszero (const std::complex<T>& value)
-{ return value.real () == T() && value.imag () == T(); }
+inline bool helper_is_zero_mem (const std::complex<T>& value)
+{
+  return (helper_is_zero_mem (value.real ()) 
+          && helper_is_zero_mem (value.imag ())); 
+}
 
 template <class T>
-inline bool octave_fill_iszero (const octave_int<T>& value)
+inline bool helper_is_zero_mem (const octave_int<T>& value)
 { return value.value () == T(); }
 
 #define DEFINE_POD_FILL(T) \
-inline void octave_fill (octave_idx_type n, const T& value, T *dest) \
+inline void fill_or_memset (octave_idx_type n, const T& value, T *dest) \
 { \
-  if (octave_fill_iszero (value)) \
+  if (helper_is_zero_mem (value)) \
     std::memset (dest, 0, n * sizeof (T)); \
   else \
     std::fill_n (dest, n, value); \
 }
 
 DEFINE_POD_FILL (double)
 DEFINE_POD_FILL (float)
 DEFINE_POD_FILL (char)
@@ -105,28 +111,28 @@ DEFINE_POD_FILL (Complex)
 DEFINE_POD_FILL (FloatComplex)
 
 template <class T>
 DEFINE_POD_FILL (octave_int<T>)
 
 // Uninitialized allocation. Will not initialize memory for complex and octave_int.
 // Memory allocated by octave_new should be freed by octave_delete.
 template <class T>
-inline T *octave_new (octave_idx_type n)
+inline T *no_ctor_new (octave_idx_type n)
 { return new T[n]; }
 template <class T>
-inline void octave_delete (T *ptr)
+inline void no_ctor_delete (T *ptr)
 { delete [] ptr; }
 
 #define DEFINE_POD_NEW_DELETE(T) \
 template <> \
-inline T *octave_new<T > (octave_idx_type n) \
+inline T *no_ctor_new<T > (octave_idx_type n) \
 { return reinterpret_cast<T *> (new char[n * sizeof (T)]); } \
 template <> \
-inline void octave_delete<T > (T *ptr) \
+inline void no_ctor_delete<T > (T *ptr) \
 { delete [] reinterpret_cast<char *> (ptr); }
 
 DEFINE_POD_NEW_DELETE (Complex)
 DEFINE_POD_NEW_DELETE (FloatComplex)
 
 DEFINE_POD_NEW_DELETE (octave_int8)
 DEFINE_POD_NEW_DELETE (octave_int16)
 DEFINE_POD_NEW_DELETE (octave_int32)
