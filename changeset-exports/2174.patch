# HG changeset patch
# User jwe
# Date 832003737 0
#      Mon May 13 16:08:57 1996 +0000
# Node ID 68b02495a5ac9b8c51f25562b623526c6d8ad851
# Parent  b9cfacab52d1aef9cb941e6fdf3f75c9fac5df30
[project @ 1996-05-13 16:08:39 by jwe]

diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -34,37 +34,41 @@ Software Foundation, 59 Temple Place - S
 #include "defun.h"
 #include "error.h"
 #include "pager.h"
 #include "pt-const.h"
 #include "oct-obj.h"
 #include "user-prefs.h"
 #include "utils.h"
 
+// TRUE means that Octave will try to beep obnoxiously before printing
+// error messages.
+static bool Vbeep_on_error;
+
 // Current error state.
 int error_state = 0;
 
 // Tell the error handler whether to print messages, or just store
 // them for later.  Used for handling errors in eval() and
 // the `unwind_protect' statement.
 int buffer_error_messages;
 
 // The message buffer
 ostrstream *error_message_buffer = 0;
 
 static void
 verror (const char *name, const char *fmt, va_list args)
 {
   flush_octave_stdout ();
 
-  int to_beep_or_not_to_beep = user_pref.beep_on_error && ! error_state;
+  bool to_beep_or_not_to_beep_p = Vbeep_on_error && ! error_state;
 
   ostrstream output_buf;
 
-  if (to_beep_or_not_to_beep)
+  if (to_beep_or_not_to_beep_p)
     output_buf << "\a";
   if (name)
     output_buf << name << ": ";
   output_buf.vform (fmt, args);
   output_buf << endl << ends;
 
   char *msg = output_buf.str ();
 
@@ -267,13 +271,28 @@ See also: error, printf")
 DEFUN (usage, args, ,
   "usage (FMT, ...): print a usage message according to FMT.\n\
 \n\
 See also: error, printf")
 {
   return handle_message (usage, "unknown", args);
 }
 
+static int
+beep_on_error (void)
+{
+  Vbeep_on_error = check_preference ("beep_on_error");
+
+  return 0;
+}
+
+void
+symbols_of_error (void)
+{
+  DEFVAR (beep_on_error, 0.0, 0, beep_on_error,
+    "if true, beep before printing error messages");
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
