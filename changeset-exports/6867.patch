# HG changeset patch
# User dbateman
# Date 1189080525 0
#      Thu Sep 06 12:08:45 2007 +0000
# Node ID 83619ae96c1d707d2907b5af1542c56fe3837c51
# Parent  f7bc1c20800ec43d198cdb40b8b1245e187b89cc
[project @ 2007-09-06 12:08:44 by dbateman]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -328,17 +328,17 @@ Array<T>::range_error (const char *fcn, 
   (*current_liboctave_error_handler)
     ("%s (%d, %d, %d): range error", fcn, i, j, k);
   static T foo;
   return foo;
 }
 
 template <class T>
 T
-Array<T>::range_error (const char *fcn, const Array<int>& ra_idx) const
+Array<T>::range_error (const char *fcn, const Array<octave_idx_type>& ra_idx) const
 {
   std::ostringstream buf;
 
   buf << fcn << " (";
 
   octave_idx_type n = ra_idx.length ();
 
   if (n > 0)
@@ -353,17 +353,17 @@ Array<T>::range_error (const char *fcn, 
 
   (*current_liboctave_error_handler) (buf_str.c_str ());
 
   return T ();
 }
 
 template <class T>
 T&
-Array<T>::range_error (const char *fcn, const Array<int>& ra_idx)
+Array<T>::range_error (const char *fcn, const Array<octave_idx_type>& ra_idx)
 {
   std::ostringstream buf;
 
   buf << fcn << " (";
 
   octave_idx_type n = ra_idx.length ();
 
   if (n > 0)
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -279,34 +279,34 @@ public:
   T& range_error (const char *fcn, octave_idx_type n);
 
   T range_error (const char *fcn, octave_idx_type i, octave_idx_type j) const;
   T& range_error (const char *fcn, octave_idx_type i, octave_idx_type j);
 
   T range_error (const char *fcn, octave_idx_type i, octave_idx_type j, octave_idx_type k) const;
   T& range_error (const char *fcn, octave_idx_type i, octave_idx_type j, octave_idx_type k);
 
-  T range_error (const char *fcn, const Array<int>& ra_idx) const;
-  T& range_error (const char *fcn, const Array<int>& ra_idx);
+  T range_error (const char *fcn, const Array<octave_idx_type>& ra_idx) const;
+  T& range_error (const char *fcn, const Array<octave_idx_type>& ra_idx);
 
   // No checking, even for multiple references, ever.
 
   T& xelem (octave_idx_type n) { return rep->elem (n); }
   T xelem (octave_idx_type n) const { return rep->elem (n); }
 
   T& xelem (octave_idx_type i, octave_idx_type j) { return xelem (dim1()*j+i); }
   T xelem (octave_idx_type i, octave_idx_type j) const { return xelem (dim1()*j+i); }
 
   T& xelem (octave_idx_type i, octave_idx_type j, octave_idx_type k) { return xelem (i, dim2()*k+j); }
   T xelem (octave_idx_type i, octave_idx_type j, octave_idx_type k) const { return xelem (i, dim2()*k+j); }
 
-  T& xelem (const Array<int>& ra_idx)
+  T& xelem (const Array<octave_idx_type>& ra_idx)
     { return xelem (compute_index (ra_idx)); }
 
-  T xelem (const Array<int>& ra_idx) const
+  T xelem (const Array<octave_idx_type>& ra_idx) const
     { return xelem (compute_index (ra_idx)); }
 
   // FIXME -- would be nice to fix this so that we don't
   // unnecessarily force a copy, but that is not so easy, and I see no
   // clean way to do it.
 
   T& checkelem (octave_idx_type n)
     {
@@ -330,17 +330,17 @@ public:
   T& checkelem (octave_idx_type i, octave_idx_type j, octave_idx_type k)
     {
       if (i < 0 || j < 0 || k < 0 || i >= dim1 () || j >= dim2 () || k >= dim3 ())
 	return range_error ("T& Array<T>::checkelem", i, j, k);
       else
 	return elem (i, dim2()*k+j);
     }
 
-  T& checkelem (const Array<int>& ra_idx)
+  T& checkelem (const Array<octave_idx_type>& ra_idx)
     {
       octave_idx_type i = compute_index (ra_idx);
 
       if (i < 0)
 	return range_error ("T& Array<T>::checkelem", ra_idx);
       else
 	return elem (i);
     }
@@ -350,29 +350,29 @@ public:
       make_unique ();
       return xelem (n);
     }
 
   T& elem (octave_idx_type i, octave_idx_type j) { return elem (dim1()*j+i); }
 
   T& elem (octave_idx_type i, octave_idx_type j, octave_idx_type k) { return elem (i, dim2()*k+j); }
 
-  T& elem (const Array<int>& ra_idx)
+  T& elem (const Array<octave_idx_type>& ra_idx)
     { return Array<T>::elem (compute_index (ra_idx)); }
 
 #if defined (BOUNDS_CHECKING)
   T& operator () (octave_idx_type n) { return checkelem (n); }
   T& operator () (octave_idx_type i, octave_idx_type j) { return checkelem (i, j); }
   T& operator () (octave_idx_type i, octave_idx_type j, octave_idx_type k) { return checkelem (i, j, k); }
-  T& operator () (const Array<int>& ra_idx) { return checkelem (ra_idx); }
+  T& operator () (const Array<octave_idx_type>& ra_idx) { return checkelem (ra_idx); }
 #else
   T& operator () (octave_idx_type n) { return elem (n); }
   T& operator () (octave_idx_type i, octave_idx_type j) { return elem (i, j); }
   T& operator () (octave_idx_type i, octave_idx_type j, octave_idx_type k) { return elem (i, j, k); }
-  T& operator () (const Array<int>& ra_idx) { return elem (ra_idx); }
+  T& operator () (const Array<octave_idx_type>& ra_idx) { return elem (ra_idx); }
 #endif
 
   T checkelem (octave_idx_type n) const
     {
       if (n < 0 || n >= rep->length ())
 	return range_error ("T Array<T>::checkelem", n);
       else
 	return xelem (n);
@@ -389,45 +389,45 @@ public:
   T checkelem (octave_idx_type i, octave_idx_type j, octave_idx_type k) const
     {
       if (i < 0 || j < 0 || k < 0 || i >= dim1 () || j >= dim2 () || k >= dim3 ())
 	return range_error ("T Array<T>::checkelem", i, j, k);
       else
 	return Array<T>::elem (i, Array<T>::dim1()*k+j);
     }
 
-  T checkelem (const Array<int>& ra_idx) const
+  T checkelem (const Array<octave_idx_type>& ra_idx) const
     {
       octave_idx_type i = compute_index (ra_idx);
 
       if (i < 0)
 	return range_error ("T Array<T>::checkelem", ra_idx);
       else
 	return Array<T>::elem (i);
     }
 
   T elem (octave_idx_type n) const { return xelem (n); }
 
   T elem (octave_idx_type i, octave_idx_type j) const { return elem (dim1()*j+i); }
 
   T elem (octave_idx_type i, octave_idx_type j, octave_idx_type k) const { return elem (i, dim2()*k+j); }
 
-  T elem (const Array<int>& ra_idx) const
+  T elem (const Array<octave_idx_type>& ra_idx) const
     { return Array<T>::elem (compute_index (ra_idx)); }
 
 #if defined (BOUNDS_CHECKING)
   T operator () (octave_idx_type n) const { return checkelem (n); }
   T operator () (octave_idx_type i, octave_idx_type j) const { return checkelem (i, j); }
   T operator () (octave_idx_type i, octave_idx_type j, octave_idx_type k) const { return checkelem (i, j, k); }
-  T operator () (const Array<int>& ra_idx) const { return checkelem (ra_idx); }
+  T operator () (const Array<octave_idx_type>& ra_idx) const { return checkelem (ra_idx); }
 #else
   T operator () (octave_idx_type n) const { return elem (n); }
   T operator () (octave_idx_type i, octave_idx_type j) const { return elem (i, j); }
   T operator () (octave_idx_type i, octave_idx_type j, octave_idx_type k) const { return elem (i, j, k); }
-  T operator () (const Array<int>& ra_idx) const { return elem (ra_idx); }
+  T operator () (const Array<octave_idx_type>& ra_idx) const { return elem (ra_idx); }
 #endif
 
   Array<T> reshape (const dim_vector& new_dims) const;
 
   Array<T> permute (const Array<octave_idx_type>& vec, bool inv = false) const;
   Array<T> ipermute (const Array<octave_idx_type>& vec) const
     { return permute (vec, true); }
 
diff --git a/liboctave/ArrayN.h b/liboctave/ArrayN.h
--- a/liboctave/ArrayN.h
+++ b/liboctave/ArrayN.h
@@ -82,20 +82,20 @@ public:
 	Array<T>::operator = (a);
 
       return *this;
     }
 
   ArrayN<T> reshape (const dim_vector& new_dims) const
     { return Array<T>::reshape (new_dims); }
 
-  ArrayN<T> permute (const Array<int>& vec, bool inv = false) const
+  ArrayN<T> permute (const Array<octave_idx_type>& vec, bool inv = false) const
     { return Array<T>::permute (vec, inv); }
 
-  ArrayN<T> ipermute (const Array<int>& vec) const
+  ArrayN<T> ipermute (const Array<octave_idx_type>& vec) const
     { return Array<T>::ipermute (vec); }
 
   void resize (const dim_vector& dv)
     { this->resize_no_fill (dv); }
 
   void resize (const dim_vector& dv, const T& val)
     { Array<T>::resize (dv, val); }
 
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2756,40 +2756,40 @@ ComplexMatrix::expm (void) const
   // inverse scaling (diagonal transformation)
   for (octave_idx_type i = 0; i < nc; i++)
     for (octave_idx_type j = 0; j < nc; j++)
        retval(i,j) *= dscale(i) / dscale(j);
 
   OCTAVE_QUIT;
 
   // construct balancing permutation vector
-  Array<int> iperm (nc);
+  Array<octave_idx_type> iperm (nc);
   for (octave_idx_type i = 0; i < nc; i++)
     iperm(i) = i;  // initialize to identity permutation
 
   // leading permutations in forward order
   for (octave_idx_type i = 0; i < (ilo-1); i++)
     {
-      octave_idx_type swapidx = static_cast<int> (dpermute(i)) - 1;
+      octave_idx_type swapidx = static_cast<octave_idx_type> (dpermute(i)) - 1;
       octave_idx_type tmp = iperm(i);
       iperm(i) = iperm(swapidx);
       iperm(swapidx) = tmp;
     }
 
   // trailing permutations must be done in reverse order
   for (octave_idx_type i = nc - 1; i >= ihi; i--)
     {
-      octave_idx_type swapidx = static_cast<int> (dpermute(i)) - 1;
+      octave_idx_type swapidx = static_cast<octave_idx_type> (dpermute(i)) - 1;
       octave_idx_type tmp = iperm(i);
       iperm(i) = iperm(swapidx);
       iperm(swapidx) = tmp;
     }
 
   // construct inverse balancing permutation vector
-  Array<int> invpvec (nc);
+  Array<octave_idx_type> invpvec (nc);
   for (octave_idx_type i = 0; i < nc; i++)
     invpvec(iperm(i)) = i;     // Thanks to R. A. Lippert for this method
 
   OCTAVE_QUIT;
 
   ComplexMatrix tmpMat = retval;
   for (octave_idx_type i = 0; i < nc; i++)
     for (octave_idx_type j = 0; j < nc; j++)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,20 @@
+2007-09-06  David Bateman  <dbateman@free.fr>
+
+        * Array.h (range_error, xelem, checkelem, elem, operator ()):
+        Modify use of Array<int> to Array<octave_idx_type> and adjust
+        where necessary.
+        * Array.cc (range_error): ditto.
+        * MArrayN.h (permute, ipermute): ditto.
+        * ArrayN.h (permute, ipermute): ditto.
+        * so-array.cc (streamoff_array::compute_index): ditto.
+        * so-array.h (compute_index): ditto.
+        * CMattrix.cc (ComplexMatrix::exmpm): ditto.
+
 2007-08-29  David Bateman  <dbateman@free.fr>
 
         * dSparse.cc (SparseMatrix SparseMatrix::inverse (MatrixType &, 
         octave_idx_type&, double&, int, int)): Calculate with LU even for
         matrices marked as singular.
         * CSparse.cc (SparseComplexMatrix SparseComplexMatrix::inverse (
         MatrixType &, octave_idx_type&, double&, int, int)): ditto.
         * dMatrix.cc (Matrix Matrix::inverse (MatrixType &, octave_idx_type&,
diff --git a/liboctave/MArrayN.h b/liboctave/MArrayN.h
--- a/liboctave/MArrayN.h
+++ b/liboctave/MArrayN.h
@@ -85,20 +85,21 @@ public:
 	}
 
       return retval;
     }
 
   MArrayN<T> reshape (const dim_vector& new_dims) const
     { return ArrayN<T>::reshape (new_dims); }
 
-  MArrayN<T> permute (const Array<int>& vec, bool inv = false) const
+  MArrayN<T> permute (const Array<octave_idx_type>& vec, 
+		      bool inv = false) const
     { return ArrayN<T>::permute (vec, inv); }
 
-  MArrayN<T> ipermute (const Array<int>& vec) const
+  MArrayN<T> ipermute (const Array<octave_idx_type>& vec) const
     { return ArrayN<T>::ipermute (vec); }
 
   MArrayN squeeze (void) const { return ArrayN<T>::squeeze (); }
 };
 
 #endif
 
 /*
diff --git a/liboctave/so-array.cc b/liboctave/so-array.cc
--- a/liboctave/so-array.cc
+++ b/liboctave/so-array.cc
@@ -92,17 +92,17 @@ operator -= (streamoff_array& a, const s
 	gripe_nonconformant ("operator -=", l, bl);
       else
 	DO_VV_OP2 (std::streamoff, a, -=, b);
     }
   return a;
 }
 
 octave_idx_type
-streamoff_array::compute_index (Array<int>& ra_idx,
+streamoff_array::compute_index (Array<octave_idx_type>& ra_idx,
 				const dim_vector& dimensions)
 {
   return ::compute_index (ra_idx, dimensions);
 }
 
 SND_CMP_OP (mx_el_eq, ==, std::streamoff, , streamoff_array, )
 SND_CMP_OP (mx_el_ne, !=, std::streamoff, , streamoff_array, )
 
diff --git a/liboctave/so-array.h b/liboctave/so-array.h
--- a/liboctave/so-array.h
+++ b/liboctave/so-array.h
@@ -77,17 +77,17 @@ public:
 	}
 
       return retval;
     }
 
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
 
-  static octave_idx_type compute_index (Array<int>& ra_idx,
+  static octave_idx_type compute_index (Array<octave_idx_type>& ra_idx,
 			    const dim_vector& dimensions);
 
   static std::streamoff resize_fill_value (void) { return 0; }
 };
 
 OCTAVE_API streamoff_array& operator += (streamoff_array& l, const std::streamoff& r);
 OCTAVE_API streamoff_array& operator -= (streamoff_array& l, const std::streamoff& r);
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2007-09-06  David Bateman  <dbateman@free.fr>
+
+        * ov.cc (do_cat_op): Modify use of Array<int> to 
+        Array<octave_idx_type> and adjust where necessary.
+        * ov.h (do_cat_op): ditto.
+        * data.cc (do_cat): ditto.
+        * pt-mat.cc (tree_matrix::rvalue): ditto.
+
 2007-09-05  Michael Goffioul <michael.goffioul@gmail.com>
 
 	* oct-stream.cc (octave_base_stream::do_printf): Ignore precision
 	portion of format string if printing Inf, NaN, or NA values.
 
 2007-09-05  David Bateman  <dbateman@free.fr>
 
         * DLD-FUNCTIONS/sort.cc (mx_sort_sparse, mx_sort_sparse_indexed):
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -754,17 +754,17 @@ do_cat (const octave_value_list& args, s
 	    retval = Matrix ();
 	  else
 	    {
 	      tmp = tmp.resize (dim_vector (0,0)).resize (dv);
 
 	      if (error_state)
 		return retval;
 
-	      Array<int> ra_idx (dv.length (), 0);
+	      Array<octave_idx_type> ra_idx (dv.length (), 0);
 
 	      for (int j = i; j < n_args; j++)
 		{
 		  tmp = do_cat_op (tmp, args (j), ra_idx);
 
 		  if (error_state)
 		    return retval;
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1398,17 +1398,17 @@ gripe_cat_op (const std::string& tn1, co
 static void
 gripe_cat_op_conv (void)
 {
   error ("type conversion failed for concatenation operator");
 }
 
 octave_value
 do_cat_op (const octave_value& v1, const octave_value& v2, 
-	   const Array<int>& ra_idx)
+	   const Array<octave_idx_type>& ra_idx)
 {
   octave_value retval;
 
   // Rapid return for concatenation with an empty object. Dimension
   // checking handled elsewhere.
   if (v1.all_zero_dims ())
     return v2;
   if (v2.all_zero_dims ())
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -791,17 +791,17 @@ public:
 				      const std::list<octave_value_list>& idx);
 
   friend OCTINTERP_API octave_value do_binary_op (binary_op op,
 				    const octave_value& a,
 				    const octave_value& b);
 
   friend OCTINTERP_API octave_value do_cat_op (const octave_value& a,
 				 const octave_value& b,
-				 const Array<int>& ra_idx);
+				 const Array<octave_idx_type>& ra_idx);
 
   const octave_base_value& get_rep (void) const { return *rep; }
 
   void print_info (std::ostream& os,
 			   const std::string& prefix = std::string ()) const;
 
   bool save_ascii (std::ostream& os, bool& infnan_warned)
     { return rep->save_ascii (os, infnan_warned); }
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -905,17 +905,17 @@ tree_matrix::rvalue (void)
 	    }
 
 	  if (! error_state)
 	    {
 	      // Now, extract the values from the individual elements and
 	      // insert them in the result matrix.
 
 	      int dv_len = dv.length ();
-	      Array<int> ra_idx (dv_len > 1 ? dv_len : 2, 0);
+	      Array<octave_idx_type> ra_idx (dv_len > 1 ? dv_len : 2, 0);
 
 	      for (tm_const::iterator p = tmp.begin (); p != tmp.end (); p++)
 		{
 		  OCTAVE_QUIT;
 
 		  tm_row_const row = *p;
 
 		  for (tm_row_const::iterator q = row.begin ();
