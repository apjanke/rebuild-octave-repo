# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1463634345 14400
#      Thu May 19 01:05:45 2016 -0400
# Node ID 60212efcd9cbb05811e8cc559180e5ac21fe2c34
# Parent  11af9c03400ccf3dd7e3800e8b04e2c0f997a831
use namespace for dir_entry class

* dir-ops.h, dir-ops.cc: Put dir_entry class in octave::sys
namespace.  Change all uses.

diff --git a/libinterp/corefcn/dirfns.cc b/libinterp/corefcn/dirfns.cc
--- a/libinterp/corefcn/dirfns.cc
+++ b/libinterp/corefcn/dirfns.cc
@@ -177,17 +177,17 @@ error message.\n\
 {
   if (args.length () != 1)
     print_usage ();
 
   std::string dirname = args(0).xstring_value ("readdir: DIR must be a string");
 
   octave_value_list retval = ovl (Cell (), -1.0, "");
 
-  dir_entry dir (dirname);
+  octave::sys::dir_entry dir (dirname);
 
   if (dir)
     {
       string_vector dirlist = dir.read ();
       retval(0) = Cell (dirlist.sort ());
       retval(1) = 0.0;
     }
   else
diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -172,17 +172,17 @@ load_path::dir_info::initialize (void)
       std::string msg = fs.error ();
       warning ("load_path: %s: %s", dir_name.c_str (), msg.c_str ());
     }
 }
 
 void
 load_path::dir_info::get_file_list (const std::string& d)
 {
-  dir_entry dir (d);
+  octave::sys::dir_entry dir (d);
 
   if (dir)
     {
       string_vector flist = dir.read ();
 
       octave_idx_type len = flist.numel ();
 
       all_files.resize (len);
@@ -242,17 +242,17 @@ load_path::dir_info::get_file_list (cons
     }
 }
 
 load_path::dir_info::fcn_file_map_type
 get_fcn_files (const std::string& d)
 {
   load_path::dir_info::fcn_file_map_type retval;
 
-  dir_entry dir (d);
+  octave::sys::dir_entry dir (d);
 
   if (dir)
     {
       string_vector flist = dir.read ();
 
       octave_idx_type len = flist.numel ();
 
       for (octave_idx_type i = 0; i < len; i++)
@@ -2138,17 +2138,17 @@ load_path::loader::display (std::ostream
 #endif
 }
 
 std::string
 genpath (const std::string& dirname, const string_vector& skip)
 {
   std::string retval;
 
-  dir_entry dir (dirname);
+  octave::sys::dir_entry dir (dirname);
 
   if (dir)
     {
       retval = dirname;
 
       string_vector dirlist = dir.read ().sort (false);
 
       octave_idx_type len = dirlist.numel ();
diff --git a/liboctave/system/dir-ops.cc b/liboctave/system/dir-ops.cc
--- a/liboctave/system/dir-ops.cc
+++ b/liboctave/system/dir-ops.cc
@@ -34,68 +34,74 @@ along with Octave; see the file COPYING.
 #include "sysdir.h"
 
 #include "dir-ops.h"
 #include "file-ops.h"
 #include "lo-error.h"
 #include "lo-sysdep.h"
 #include "str-vec.h"
 
-bool
-dir_entry::open (const std::string& n)
+namespace octave
 {
-  fail = true;
-
-  if (! n.empty ())
-    name = n;
-
-  if (! name.empty ())
+  namespace sys
+  {
+    bool
+    dir_entry::open (const std::string& n)
     {
-      close ();
+      fail = true;
+
+      if (! n.empty ())
+        name = n;
 
-      std::string fullname = octave::sys::file_ops::tilde_expand (name);
+      if (! name.empty ())
+        {
+          close ();
+
+          std::string fullname = octave::sys::file_ops::tilde_expand (name);
 
-      dir = static_cast<void *> (gnulib::opendir (fullname.c_str ()));
+          dir = static_cast<void *> (gnulib::opendir (fullname.c_str ()));
 
-      if (dir)
-        fail = false;
+          if (dir)
+            fail = false;
+          else
+            errmsg = gnulib::strerror (errno);
+        }
       else
-        errmsg = gnulib::strerror (errno);
+        errmsg = "dir_entry::open: empty filename";
+
+      return ! fail;
     }
-  else
-    errmsg = "dir_entry::open: empty filename";
 
-  return ! fail;
-}
+    string_vector
+    dir_entry::read (void)
+    {
+      string_vector retval;
 
-string_vector
-dir_entry::read (void)
-{
-  string_vector retval;
+      if (ok ())
+        {
+          std::list<std::string> dirlist;
 
-  if (ok ())
-    {
-      std::list<std::string> dirlist;
-
-      struct dirent *dir_ent;
+          struct dirent *dir_ent;
 
-      while ((dir_ent = gnulib::readdir (static_cast<DIR *> (dir))))
-        {
-          if (dir_ent)
-            dirlist.push_back (dir_ent->d_name);
-          else
-            break;
+          while ((dir_ent = gnulib::readdir (static_cast<DIR *> (dir))))
+            {
+              if (dir_ent)
+                dirlist.push_back (dir_ent->d_name);
+              else
+                break;
+            }
+
+          retval = string_vector (dirlist);
         }
 
-      retval = string_vector (dirlist);
+      return retval;
     }
 
-  return retval;
-}
+    void
+    dir_entry::close (void)
+    {
+      if (dir)
+        gnulib::closedir (static_cast<DIR *> (dir));
 
-void
-dir_entry::close (void)
-{
-  if (dir)
-    gnulib::closedir (static_cast<DIR *> (dir));
-
-  dir = 0;
+      dir = 0;
+    }
+  }
 }
diff --git a/liboctave/system/dir-ops.h b/liboctave/system/dir-ops.h
--- a/liboctave/system/dir-ops.h
+++ b/liboctave/system/dir-ops.h
@@ -24,69 +24,82 @@ along with Octave; see the file COPYING.
 #define octave_dir_ops_h 1
 
 #include "octave-config.h"
 
 #include <string>
 
 #include "str-vec.h"
 
-class
-OCTAVE_API
-dir_entry
+namespace octave
 {
-public:
+  namespace sys
+  {
+    class
+    OCTAVE_API
+    dir_entry
+    {
+    public:
 
-  dir_entry (const std::string& n = "")
-    : name (n), dir (0), fail (false), errmsg ()
-  {
-    if (! name.empty ())
-      open ();
-  }
+      dir_entry (const std::string& n = "")
+        : name (n), dir (0), fail (false), errmsg ()
+        {
+          if (! name.empty ())
+            open ();
+        }
 
-  dir_entry (const dir_entry& d)
-    : name (d.name), dir (d.dir), fail (d.fail), errmsg (d.errmsg) { }
+      dir_entry (const dir_entry& d)
+        : name (d.name), dir (d.dir), fail (d.fail), errmsg (d.errmsg) { }
 
-  dir_entry& operator = (const dir_entry& d)
-  {
-    if (this != &d)
-      {
-        name = d.name;
-        dir = d.dir;
-        fail = d.fail;
-        errmsg = d.errmsg;
-      }
+      dir_entry& operator = (const dir_entry& d)
+        {
+          if (this != &d)
+            {
+              name = d.name;
+              dir = d.dir;
+              fail = d.fail;
+              errmsg = d.errmsg;
+            }
 
-    return *this;
-  }
+          return *this;
+        }
+
+      ~dir_entry (void) { close (); }
 
-  ~dir_entry (void) { close (); }
+      bool open (const std::string& = "");
+
+      string_vector read (void);
 
-  bool open (const std::string& = "");
+      void close (void);
 
-  string_vector read (void);
+      bool ok (void) const { return dir && ! fail; }
 
-  void close (void);
+      operator bool () const { return ok (); }
 
-  bool ok (void) const { return dir && ! fail; }
+      std::string error (void) const { return ok () ? "" : errmsg; }
 
-  operator bool () const { return ok (); }
+    private:
 
-  std::string error (void) const { return ok () ? "" : errmsg; }
+      // Name of the directory.
+      std::string name;
 
-private:
+      // A pointer to the contents of the directory.  We use void here to
+      // avoid possible conflicts with the way some systems declare the
+      // type DIR.
+      void *dir;
 
-  // Name of the directory.
-  std::string name;
+      // TRUE means the open for this directory failed.
+      bool fail;
 
-  // A pointer to the contents of the directory.  We use void here to
-  // avoid possible conflicts with the way some systems declare the
-  // type DIR.
-  void *dir;
+      // If a failure occurs, this contains the system error text.
+      std::string errmsg;
+    };
+  }
+}
 
-  // TRUE means the open for this directory failed.
-  bool fail;
+#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-  // If a failure occurs, this contains the system error text.
-  std::string errmsg;
-};
+OCTAVE_DEPRECATED ("use octave::sys::dir_entry instead")
+typedef octave::sys::dir_entry dir_entry;
 
 #endif
+
+#endif
diff --git a/liboctave/system/file-ops.cc b/liboctave/system/file-ops.cc
--- a/liboctave/system/file-ops.cc
+++ b/liboctave/system/file-ops.cc
@@ -571,17 +571,17 @@ namespace octave
 
     int
     recursive_rmdir (const std::string& name, std::string& msg)
     {
       msg = "";
 
       int status = 0;
 
-      dir_entry dir (name);
+      octave::sys::dir_entry dir (name);
 
       if (dir)
         {
           string_vector dirlist = dir.read ();
 
           for (octave_idx_type i = 0; i < dirlist.numel (); i++)
             {
               octave_quit ();
diff --git a/liboctave/util/url-transfer.cc b/liboctave/util/url-transfer.cc
--- a/liboctave/util/url-transfer.cc
+++ b/liboctave/util/url-transfer.cc
@@ -142,17 +142,17 @@ base_url_transfer::mput_directory (const
   cwd (directory);
 
   if (good ())
     {
       unwind_protect_safe frame;
 
       frame.add_fcn (reset_path, this);
 
-      dir_entry dirlist (realdir);
+      octave::sys::dir_entry dirlist (realdir);
 
       if (dirlist)
         {
           string_vector files = dirlist.read ();
 
           for (octave_idx_type i = 0; i < files.numel (); i++)
             {
               std::string file = files (i);
