# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1287633684 25200
#      Wed Oct 20 21:01:24 2010 -0700
# Node ID e79f59d31a74513c993ac905d25c01b2946540ba
# Parent  fbec4b3be59f6064e5a89934c1d6fee23ec53d0a
Add tests for fftconv.m

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-10-20  Rik  <octave@nomad.inbox5.com>
+
+	* polynomial/conv.m: Remove redundant test.
+	* signal/fftconv.m: Add tests used by conv.m code.
+
 2010-10-20  Olaf Till  <olaf.till@uni-jena.de>
 
 	* optimization/optimset.m: Use cell2struct instead of struct to
 	handle cell arrays as options.
 
 2010-10-20  John W. Eaton  <jwe@octave.org>
 
 	* io/strread.m, optimization/sqp.m, plot/daspect.m,
diff --git a/scripts/polynomial/conv.m b/scripts/polynomial/conv.m
--- a/scripts/polynomial/conv.m
+++ b/scripts/polynomial/conv.m
@@ -105,49 +105,43 @@ endfunction
 %!  assert (conv (x, y), [1, 2, 3, 2, 1]);
 %!  assert (conv (y, x), [1; 2; 3; 2; 1]);
 %!  assert (conv (c, x), [3; 3; 3]);
 %!  assert (conv (c, y), [3, 3, 3]);
 %!  assert (conv (x, c), [3; 3; 3]);
 %!  assert (conv (y, c), [3, 3, 3]);
 %!  assert (conv (b, c), 6);
 
-
-%!test
-%!  a = 1:10;
-%!  b = 1:3;
-%!  assert (size(conv(a,b)), [1, numel(a)+numel(b)-1])
-%!  assert (size(conv(b,a)), [1, numel(a)+numel(b)-1])
-
 %!test
 %!  a = 1:10;
 %!  b = 1:3;
 %!  assert (size(conv(a,b)), [1, numel(a)+numel(b)-1])
 %!  assert (size(conv(b,a)), [1, numel(a)+numel(b)-1])
 
 %!  a = (1:10).';
 %!  b = 1:3;
 %!  assert (size(conv(a,b)), [numel(a)+numel(b)-1, 1])
 %!  assert (size(conv(b,a)), [numel(a)+numel(b)-1, 1])
 
 %!test
 %!  a = 1:10;
+%!  b = (1:3).';
+%!  assert (size(conv(a,b)), [1, numel(a)+numel(b)-1])
+%!  assert (size(conv(b,a)), [1, numel(a)+numel(b)-1])
+
+%!test
+%!  a = 1:10;
 %!  b = 1:3;
 %!  assert (conv(a,b,"full"), conv(a,b))
 %!  assert (conv(b,a,"full"), conv(b,a))
 
 %!test
 %!  a = 1:10;
 %!  b = 1:3;
 %!  assert (conv(a,b,'same'), [4, 10, 16, 22, 28, 34, 40, 46, 52, 47])
 %!  assert (conv(b,a,'same'), [28, 34, 40])
 
-%!test
-%!  a = 1:10;
-%!  b = (1:3).';
-%!  assert (size(conv(a,b)), [1, numel(a)+numel(b)-1])
-%!  assert (size(conv(b,a)), [1, numel(a)+numel(b)-1])
-
 %% Test input validation
 %!error conv (1);
 %!error conv (1,2,3,4);
 %!error conv ([1, 2; 3, 4], 3);
 %!error conv (2, []);
+
diff --git a/scripts/signal/fftconv.m b/scripts/signal/fftconv.m
--- a/scripts/signal/fftconv.m
+++ b/scripts/signal/fftconv.m
@@ -51,18 +51,56 @@ function c = fftconv (a, b, N)
     c = a * b;
   else
     lc = la + lb - 1;
     a(lc) = 0;
     b(lc) = 0;
     if (nargin == 2)
       c = fftfilt (a, b);
     else
-      if (! (isscalar (N)))
+      if (! isscalar (N))
         error ("fftconv: N must be a scalar");
       endif
       c = fftfilt (a, b, N);
     endif
   endif
 
 endfunction
 
 %% FIXME: Borrow tests from conv.m.  May need a tolerance on the assert comparison
+%!test
+%!  x = ones(3,1);
+%!  y = ones(1,3);
+%!  b = 2;
+%!  c = 3;
+%!  assert (fftconv (x, x), [1; 2; 3; 2; 1], 5*eps);
+%!  assert (fftconv (y, y), [1, 2, 3, 2, 1], 5*eps);
+%!  assert (fftconv (x, y), [1, 2, 3, 2, 1], 5*eps);
+%!  assert (fftconv (y, x), [1; 2; 3; 2; 1], 5*eps);
+%!  assert (fftconv (c, x), [3; 3; 3], 5*eps);
+%!  assert (fftconv (c, y), [3, 3, 3], 5*eps);
+%!  assert (fftconv (x, c), [3; 3; 3], 5*eps);
+%!  assert (fftconv (y, c), [3, 3, 3], 5*eps);
+%!  assert (fftconv (b, c), 6, 5*eps);
+
+%!test
+%!  a = 1:10;
+%!  b = 1:3;
+%!  assert (size(conv(a,b)), [1, numel(a)+numel(b)-1])
+%!  assert (size(conv(b,a)), [1, numel(a)+numel(b)-1])
+
+%!  a = (1:10).';
+%!  b = 1:3;
+%!  assert (size(conv(a,b)), [numel(a)+numel(b)-1, 1])
+%!  assert (size(conv(b,a)), [numel(a)+numel(b)-1, 1])
+
+%!test
+%!  a = 1:10;
+%!  b = (1:3).';
+%!  assert (size(conv(a,b)), [1, numel(a)+numel(b)-1])
+%!  assert (size(conv(b,a)), [1, numel(a)+numel(b)-1])
+
+%% Test input validation
+%!error fftconv (1);
+%!error fftconv (1,2,3,4);
+%!error fftconv ([1, 2; 3, 4], 3);
+%!error fftconv (2, []);
+%!error fftconv ([1,1], [2,2] , [3, 4]); 
