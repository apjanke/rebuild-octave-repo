# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1434330521 -3600
#      Mon Jun 15 02:08:41 2015 +0100
# Branch stable
# Node ID 137f183b7deeccaf4ccef100bb9b2b7f8ea9f0be
# Parent  36b32c07c04586ee43a9ebe935aabafdc2deda4f
Fix conversion from string cell array into java's String[] (bug #45290)

* libinterp/octave-value/ov-java.cc: when unboxing an octave_value into a
java object, cell arrays were never handled because they were caught in
the block handling numeric arrays.  This was a regression introduced by
cset 81fcf4aa9e03.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1276,16 +1276,30 @@ unbox (JNIEnv* jni_env, const octave_val
     }
   else if (val.is_string ())
     {
       std::string s = val.string_value ();
 
       jobj = jni_env->NewStringUTF (s.c_str ());
       jcls = jni_env->GetObjectClass (jobj);
     }
+  else if (val.is_cellstr ())
+    {
+      const Array<std::string> str_arr = val.cellstr_value ();
+      const octave_idx_type n = str_arr.numel ();
+      jclass_ref scls (jni_env, jni_env->FindClass ("java/lang/String"));
+      jobjectArray array = jni_env->NewObjectArray (n, scls, NULL);
+      for (octave_idx_type i = 0; i < n; i++)
+        {
+          jstring_ref jstr (jni_env, jni_env->NewStringUTF (str_arr(i).c_str ()));
+          jni_env->SetObjectArrayElement (array, i, jstr);
+        }
+      jobj = array;
+      jcls = jni_env->GetObjectClass (jobj);
+    }
   else if (val.numel () > 1 && val.dims ().is_vector ())
     {
 #define IF_UNBOX_PRIMITIVE_ARRAY(CHECK_TYPE, METHOD_TYPE, OCTAVE_TYPE, JAVA_TYPE, JAVA_TYPE_CAP) \
       if (val.is_ ## CHECK_TYPE ## _type ()) \
         { \
           const OCTAVE_TYPE ## NDArray v = val.METHOD_TYPE ## array_value (); \
           JAVA_TYPE ## Array jarr = jni_env->New ## JAVA_TYPE_CAP ## Array (v.numel ()); \
           const JAVA_TYPE* jv = reinterpret_cast<const JAVA_TYPE*> (v.data ()); \
@@ -1409,30 +1423,16 @@ unbox (JNIEnv* jni_env, const octave_val
           jcls = jni_env->GetObjectClass (jobj);
         }
       else
         {
           found = false;
           error ("cannot convert matrix of type '%s'", val.class_name ().c_str ());
         }
     }
-  else if (val.is_cellstr ())
-    {
-      Cell cellStr = val.cell_value ();
-      jclass_ref scls (jni_env, jni_env->FindClass ("java/lang/String"));
-      jobjectArray array = jni_env->NewObjectArray (cellStr.length (), scls, 0);
-      for (int i = 0; i < cellStr.length (); i++)
-        {
-          jstring_ref jstr (jni_env,
-                            jni_env->NewStringUTF (cellStr(i).string_value().c_str ()));
-          jni_env->SetObjectArrayElement (array, i, jstr);
-        }
-      jobj = array;
-      jcls = jni_env->GetObjectClass (jobj);
-    }
   else
     {
       jclass rcls = find_octave_class (jni_env, "org/octave/OctaveReference");
       jmethodID mID = jni_env->GetMethodID (rcls, "<init>", "(I)V");
       int ID = octave_java_refcount++;
 
       jobj = jni_env->NewObject (rcls, mID, ID);
       jcls = rcls;
@@ -2497,9 +2497,15 @@ Return true if @var{x} is a Java object.
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", uint16 ([90 100 128]), uint16 (128)), 2);
 
 ## Check we can create objects that wrap java literals (bug #38821).
 %!testif HAVE_JAVA
 %! assert (class (javaObject ("java.lang.Byte", uint8 (1))), "java.lang.Byte");
 %! assert (class (javaObject ("java.lang.Byte", int8 (1))), "java.lang.Byte");
 %! assert (class (javaObject ("java.lang.Short", uint16 (1))), "java.lang.Short");
 %! assert (class (javaObject ("java.lang.Short", int16 (1))), "java.lang.Short");
+
+## Automatic conversion from string cell array into String[] (bug #45290)
+%!testif HAVE_JAVA
+%! assert (javaMethod ("binarySearch", "java.util.Arrays", {"aaa", "bbb", "ccc", "zzz"}, "aaa"), 0)
+%! assert (javaMethod ("binarySearch", "java.util.Arrays", {"aaa", "bbb", "ccc", "zzz"}, "zzz"), 3)
+%! assert (javaMethod ("binarySearch", "java.util.Arrays", {"aaa", "bbb", "ccc", "zzz"}, "hhh") < 0)
 */
