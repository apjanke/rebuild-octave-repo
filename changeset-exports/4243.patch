# HG changeset patch
# User jwe
# Date 1040967059 0
#      Fri Dec 27 05:30:59 2002 +0000
# Node ID 7e4d5b5520e5cd5483e6c899a1c3a1d912c5d5b0
# Parent  4d3994172bd57b2e3de586fa440bbd1d15516c44
[project @ 2002-12-27 05:30:59 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,26 @@
+2002-12-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* utils.cc (search_path_for_file): Second arg now string_vector.
+	Use find_first_of, not find.
+	(search_path_for_all_files): Second arg now string_vector.
+	Use find_all_first_of, not find_all.
+	(Ffile_in_path): Accept cell array of strings as first argument.
+	(Ffile_in_loadpath): Likewise.
+
+	* dynamic-ld.cc (octave_dynamic_loader::load): New arg, file_name.
+	(octave_dynamic_loader::do_load): Likewise.  If file_name is not
+	empty, use it instead of searching in path.
+
+	* parse.y (load_fcn_from_file): Use find_first_of to perform search.
+
+	* ov-cell.cc (octave_cell::all_strings): New function.
+	* ov-cell.h: Provide decl.
+
 2002-12-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* parse.y (function_end): If parsing a nested function, set
 	lexer_flags.parsing_nested_function to -1.
 	(frob_function): If lexer_flags.parsing_nested_function is
 	negative, set it to zero.
 	* lex.h (lexical_feedback::parsing_nested_function): Now int.
 	Change uses as needed.
diff --git a/src/dynamic-ld.cc b/src/dynamic-ld.cc
--- a/src/dynamic-ld.cc
+++ b/src/dynamic-ld.cc
@@ -204,17 +204,18 @@ void clear_function (const std::string& 
 
   if (curr_sym_tab != top_level_sym_tab)
     top_level_sym_tab->clear (fcn_name);
 
   fbi_sym_tab->clear (fcn_name);
 }
 
 bool
-octave_dynamic_loader::do_load (const std::string& fcn_name)
+octave_dynamic_loader::do_load (const std::string& fcn_name,
+				const std::string& file_name)
 {
   bool retval = false;
 
   octave_shlib oct_file;
 
   unwind_protect::begin_frame ("octave_dynamic_loader::do_load");
 
   unwind_protect_bool (octave_dynamic_loader::doing_load);
@@ -236,17 +237,18 @@ octave_dynamic_loader::do_load (const st
 
 	  oct_file.close (clear_function);
 
 	  function = 0;
 	}
 
       if (! function)
 	{
-	  std::string oct_file_name = oct_file_in_path (fcn_name);
+	  std::string oct_file_name
+	    = file_name.empty () ? oct_file_in_path (fcn_name) : file_name;
 
 	  if (! oct_file_name.empty ())
 	    {
 	      oct_file.open (oct_file_name, Vwarn_future_time_stamp);
 
 	      if (! error_state)
 		{
 		  if (oct_file)
@@ -294,19 +296,20 @@ octave_dynamic_loader::do_remove (const 
       if (shl.number_of_functions_loaded () == 0)
 	octave_shlib_list::remove (shl);
     }
 
   return retval;
 }
 
 bool
-octave_dynamic_loader::load (const std::string& fcn_name)
+octave_dynamic_loader::load (const std::string& fcn_name,
+			     const std::string& file_name)
 {
-  return (instance_ok ()) ? instance->do_load (fcn_name) : false;
+  return (instance_ok ()) ? instance->do_load (fcn_name, file_name) : false;
 }
 
 bool
 octave_dynamic_loader::remove (const std::string& fcn_name, octave_shlib& shl)
 {
   return (instance_ok ()) ? instance->do_remove (fcn_name, shl) : false;
 }
 
diff --git a/src/dynamic-ld.h b/src/dynamic-ld.h
--- a/src/dynamic-ld.h
+++ b/src/dynamic-ld.h
@@ -33,33 +33,35 @@ octave_dynamic_loader
 protected:
 
   octave_dynamic_loader (void) { }
 
 public:
 
   virtual ~octave_dynamic_loader (void) { }
 
-  static bool load (const std::string& fcn_name);
+  static bool load (const std::string& fcn_name,
+		    const std::string& file_name = std::string ());
 
   static bool remove (const std::string& fcn_name, octave_shlib& shl);
 
 private:
 
   // No copying!
 
   octave_dynamic_loader (const octave_dynamic_loader&);
 
   octave_dynamic_loader& operator = (const octave_dynamic_loader&);
 
   static octave_dynamic_loader *instance;
 
   static bool instance_ok (void);
 
-  bool do_load (const std::string& fcn_name);
+  bool do_load (const std::string& fcn_name,
+		const std::string& file_name = std::string ());
 
   bool do_remove (const std::string& fcn_name, octave_shlib& shl);
 
   static bool doing_load;
 
 protected:
 
   static std::string mangle_name (const std::string& name);
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -243,16 +243,40 @@ octave_cell::list_value (void) const
 	retval(i) = matrix(i,0);
     }
   else
     error ("invalid conversion from cell array to list");
 
   return retval;
 }
 
+string_vector
+octave_cell::all_strings (void) const
+{
+  int nr = rows ();
+  int nc = columns ();
+
+  string_vector retval (nr * nc);
+
+  int k = 0;
+
+  for (int j = 0; j < nc; j++)
+    {
+      for (int i = 0; i < nr; i++)
+	{
+	  retval[k++] = matrix(i,j).string_value ();
+
+	  if (error_state)
+	    return string_vector ();
+	}
+    }
+
+  return retval;
+}
+
 void
 octave_cell::print (std::ostream& os, bool) const
 {
   print_raw (os);
 }
 
 void
 octave_cell::print_raw (std::ostream& os, bool) const
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -83,16 +83,18 @@ public:
   bool is_defined (void) const { return true; }
 
   bool is_cell (void) const { return true; }
 
   Cell cell_value (void) const { return matrix; }
 
   octave_value_list list_value (void) const;
 
+  string_vector all_strings (void) const;
+
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
 private:
   DECLARE_OCTAVE_ALLOCATOR
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -40,21 +40,24 @@ Software Foundation, 59 Temple Place - S
 
 #include "Cell.h"
 #include "Matrix.h"
 #include "cmd-edit.h"
 #include "cmd-hist.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "lo-sstream.h"
+#include "oct-env.h"
 #include "oct-time.h"
 #include "quit.h"
 
 #include "comment-list.h"
+#include "defaults.h"
 #include "defun.h"
+#include "dirfns.h"
 #include "dynamic-ld.h"
 #include "error.h"
 #include "input.h"
 #include "lex.h"
 #include "oct-hist.h"
 #include "ov-usr-fcn.h"
 #include "toplev.h"
 #include "pager.h"
@@ -3368,36 +3371,46 @@ parse_fcn_file (const std::string& ff, b
 
 bool
 load_fcn_from_file (symbol_record *sym_rec, bool exec_script)
 {
   bool script_file_executed = false;
 
   std::string nm = sym_rec->name ();
 
-  if (octave_dynamic_loader::load (nm))
+  static string_vector names (2);
+
+  names[0] = nm + ".oct";
+  names[1] = nm + ".m";
+
+  std::string file
+   = octave_env::make_absolute (Vload_path_dir_path.find_first_of (names),
+                                octave_env::getcwd ());
+
+  int len = file.length ();
+
+  if (file.substr (len-4, len-1) == ".oct")
     {
-      force_link_to_function (nm);
+      if (octave_dynamic_loader::load (nm, file))
+        force_link_to_function (nm);
     }
   else
     {
-      std::string ff = fcn_file_in_path (nm);
-
       // These are needed by yyparse.
 
       unwind_protect::begin_frame ("load_fcn_from_file");
 
       unwind_protect_str (curr_fcn_file_name);
       unwind_protect_str (curr_fcn_file_full_name);
 
       curr_fcn_file_name = nm;
-      curr_fcn_file_full_name = ff;
-
-      if (ff.length () > 0)
-	script_file_executed = parse_fcn_file (ff, exec_script);
+      curr_fcn_file_full_name = file;
+
+      if (file.length () > 0)
+	script_file_executed = parse_fcn_file (file, exec_script);
 
       if (! (error_state || script_file_executed))
 	force_link_to_function (nm);
 
       unwind_protect::run_frame ("load_fcn_from_file");
     }
 
   return script_file_executed;
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -226,31 +226,32 @@ empty_arg (const char *name, int nr, int
     }
 
   return is_empty;
 }
 
 // See if the given file is in the path.
 
 std::string
-search_path_for_file (const std::string& path, const std::string& name)
+search_path_for_file (const std::string& path, const string_vector& names)
 {
   dir_path p (path);
 
-  return octave_env::make_absolute (p.find (name), octave_env::getcwd ());
+  return octave_env::make_absolute (p.find_first_of (names),
+				    octave_env::getcwd ());
 }
 
 // Find all locations of the given file in the path.
 
 string_vector
-search_path_for_all_files (const std::string& path, const std::string& name)
+search_path_for_all_files (const std::string& path, const string_vector& names)
 {
   dir_path p (path);
 
-  string_vector sv = p.find_all (name);
+  string_vector sv = p.find_all_first_of (names);
 
   int len = sv.length ();
 
   for (int i = 0; i < len; i++)
     sv[i] = octave_env::make_absolute (sv[i], octave_env::getcwd ());
 
   return sv;
 }
@@ -270,43 +271,60 @@ DEFUN (file_in_loadpath, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} file_in_loadpath (@var{file})\n\
 @deftypefnx {Built-in Function} {} file_in_loadpath (@var{file}, \"all\")\n\
 \n\
 Return the absolute name name of @var{file} if it can be found in\n\
 the list of directories specified by @code{LOADPATH}.\n\
 If no file is found, return an empty matrix.\n\
 \n\
+If the first argument is a cell array of of strings, search each\n\
+directory of the loadpath for element of the cell array and return\n\
+the first that matches.\n\
+\n\
 If the second optional argument @code{\"all\"} is supplied, return\n\
 a cell array containing the list of all files that have the same\n\
 name in the path.  If no files are found, return an empty cell array.\n\
 @end deftypefn\n\
 @seealso{file_in_path}")
 {
   octave_value retval;
 
-  int argc = args.length () + 1;
-
-  string_vector argv = args.make_argv ("file_in_loadpath");
+  int nargin = args.length ();
 
-  if (error_state)
-    return retval;
-
-  if (argc == 2)
+  if (nargin == 1 || nargin == 2)
     {
-      std::string fname
-	= octave_env::make_absolute (Vload_path_dir_path.find (argv[1]),
-				     octave_env::getcwd ());
-      if (fname.empty ())
-	retval = Matrix ();
+      string_vector names = args(0).all_strings ();
+
+      if (! error_state && names.length () > 0)
+	{
+	  if (nargin == 1)
+	    {
+	      std::string fname = octave_env::make_absolute
+		(Vload_path_dir_path.find_first_of (names),
+		 octave_env::getcwd ());
+
+	      if (fname.empty ())
+		retval = Matrix ();
+	      else
+		retval = fname;
+	    }
+	  else if (nargin == 2)
+	    {
+	      std::string opt = args(1).string_value ();
+
+	      if (! error_state && opt == "all")
+		retval = Cell (make_absolute (Vload_path_dir_path.find_all_first_of (names)));
+	      else
+		print_usage ("file_in_loadpath: invalid option");
+	    }
+	}
       else
-	retval = fname;
+	error ("file_in_loadpath: expecting string as first argument");
     }
-  else if (argc == 3 && argv[2] == "all")
-    retval = Cell (make_absolute (Vload_path_dir_path.find_all (argv[1])));
   else
     print_usage ("file_in_loadpath");
 
   return retval;
 }
 
 DEFUN (file_in_path, args, ,
   "-*- texinfo -*-\n\
@@ -318,41 +336,64 @@ directories in the format described for 
 @code{LOADPATH}.  If no file is found, return an empty matrix.\n\
 For example,\n\
 \n\
 @example\n\
 file_in_path (LOADPATH, \"nargchk.m\")\n\
      @result{} \"@value{OCTAVEHOME}/share/octave/2.0/m/general/nargchk.m\"\n\
 @end example\n\
 \n\
+If the second argument is a cell array of of strings, search each\n\
+directory of the path for element of the cell array and return\n\
+the first that matches.\n\
+\n\
 If the third optional argument @code{\"all\"} is supplied, return\n\
 a cell array containing the list of all files that have the same\n\
 name in the path.  If no files are found, return an empty cell array.\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  int argc = args.length () + 1;
-
-  string_vector argv = args.make_argv ("file_in_path");
+  int nargin = args.length ();
 
-  if (error_state)
-    return retval;
-
-  if (argc == 3)
+  if (nargin == 2 || nargin == 3)
     {
-      std::string fname = search_path_for_file (argv[1], argv[2]);
+      std::string path = args(0).string_value ();
+
+      if (! error_state)
+	{
+	  string_vector names = args(0).all_strings ();
+
+	  if (! error_state && names.length () > 0)
+	    {
+	      if (nargin == 2)
+		{
+		  std::string fname = search_path_for_file (path, names);
 
-      if (fname.empty ())
-	retval = Matrix ();
+		  if (fname.empty ())
+		    retval = Matrix ();
+		  else
+		    retval = fname;
+		}
+	      else if (nargin == 3)
+		{
+		  std::string opt = args(1).string_value ();
+
+		  if (! error_state && opt == "all")
+		    retval = Cell (make_absolute (search_path_for_all_files (path, names)));
+		  else
+		    print_usage ("file_in_path: invalid option");
+		}
+	    }
+	  else
+	    error ("file_in_path: expecting string as second argument");
+	}
       else
-	retval = fname;
+	error ("file_in_path: expecting string as first argument");
     }
-  else if (argc == 4 && argv[3] == "all")
-    retval = Cell (make_absolute (search_path_for_all_files (argv[1], argv[2])));
   else
     print_usage ("file_in_path");
 
   return retval;
 }
 
 std::string
 file_in_path (const std::string& name, const std::string& suffix)
@@ -615,16 +656,34 @@ representation.\n\
 	error ("undo_string_escapes: argument must be a string");
     }
   else
     print_usage ("undo_string_escapes");
 
   return retval;
 }
 
+DEFUN (find_first_of_in_loadpath, args, , "")
+{
+  octave_value retval;
+
+  if (args.length () == 1)
+    {
+      string_vector names = args(0).all_strings ();
+
+      if (! error_state)
+	retval = Vload_path_dir_path.find_all_first_of (names);
+    }
+  else
+    print_usage ("find_first_of_in_loadpath");
+
+  return retval;
+}
+
+
 // #if 0
 
 // Octave could use some way to access the value of ERRNO, but this is
 // probably not the best interface, so don't depend on it...
 
 DEFUN (ERRNO, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{system_error_number}} errno ()\n\
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -43,20 +43,20 @@ extern int almost_match (const std::stri
 extern int
 keyword_almost_match (const char * const *std, int *min_len,
 		      const std::string& s, int min_toks_to_match,
 		      int max_toks);
 
 extern int empty_arg (const char *name, int nr, int nc);
 
 extern std::string
-search_path_for_file (const std::string&, const std::string&);
+search_path_for_file (const std::string&, const string_vector&);
 
 extern string_vector
-search_path_for_all_files (const std::string&, const std::string&);
+search_path_for_all_files (const std::string&, const string_vector&);
 
 extern std::string file_in_path (const std::string&, const std::string&);
 extern std::string fcn_file_in_path (const std::string&);
 extern std::string oct_file_in_path (const std::string&);
 
 extern std::string do_string_escapes (const std::string& s);
 
 extern const char *undo_string_escape (char c);
