# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1360015635 18000
#      Mon Feb 04 17:07:15 2013 -0500
# Node ID 1aff8c38c53cc45956f9153534e327cae769a0e1
# Parent  906ae17055223d7cf4c0acb49a5de723bf26be84
use octave_local_buffer for temporary arrays in quadcc

* quadcc.cc (Fquadcc): Use OCTAVE_LOCAL_BUFFER for local arrays.

diff --git a/libinterp/corefcn/quadcc.cc b/libinterp/corefcn/quadcc.cc
--- a/libinterp/corefcn/quadcc.cc
+++ b/libinterp/corefcn/quadcc.cc
@@ -1547,24 +1547,20 @@ Mathematical Software, Vol. 37, Issue 3,
 
   /* Some constants that we will need. */
   static const int n[4] = { 4, 8, 16, 32 };
   static const int skip[4] = { 8, 4, 2, 1 };
   static const int idx[4] = { 0, 5, 14, 31 };
   static const double w = M_SQRT2 / 2;
   static const int ndiv_max = 20;
 
-  /* The interval heap. */
-  cquad_ival *ivals;
-  int *heap;
-
   /* Arguments left and right */
   int nargin = args.length ();
   octave_function *fcn;
-  double a, b, tol, *iivals, *sing;
+  double a, b, tol, *sing;
 
   /* Variables needed for transforming the integrand. */
   bool wrap = false;
   double xw;
 
   /* Stuff we will need to call the integrand. */
   octave_value_list fargs, fvals;
 
@@ -1634,19 +1630,20 @@ Mathematical Software, Vol. 37, Issue 3,
     }
   else
     {
       nivals = 1 + args(4).numel ();
     }
 
   int cquad_heapsize = (nivals >= min_cquad_heapsize ? nivals + 1 
                                                      : min_cquad_heapsize);
-  heap = new int [cquad_heapsize];
-  ivals = new cquad_ival [cquad_heapsize];
-  iivals = new double [cquad_heapsize];
+  /* The interval heap. */
+  OCTAVE_LOCAL_BUFFER (cquad_ival, ivals, cquad_heapsize);
+  OCTAVE_LOCAL_BUFFER (double, iivals, cquad_heapsize);
+  OCTAVE_LOCAL_BUFFER (int, heap, cquad_heapsize);
 
   if (nivals == 1)
     {
       iivals[0] = a;
       iivals[1] = b;
     }
   else
     {
@@ -2238,21 +2235,16 @@ Mathematical Software, Vol. 37, Issue 3,
       iv = &(ivals[heap[i]]);
       printf
         ("quadcc: ival %i (%i) with [%e,%e], int=%e, err=%e, depth=%i, rdepth=%i, ndiv=%i\n",
          i, heap[i], iv->a, iv->b, iv->igral, iv->err, iv->depth,
          iv->rdepth, iv->ndiv);
     }
 #endif
 
-  /* Clean up heap memory */
-  delete [] heap;
-  delete [] ivals;
-  delete [] iivals;
-
   /* Clean up and present the results. */
   if (nargout > 2)
     retval(2) = neval;
   if (nargout > 1)
     retval(1) = err;
   retval(0) = igral;
   /* All is well that ends well. */
   return retval;
