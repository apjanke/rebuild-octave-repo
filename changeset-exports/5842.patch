# HG changeset patch
# User jwe
# Date 1149606213 0
#      Tue Jun 06 15:03:33 2006 +0000
# Node ID ecb61a521d5b68daf84bb11a3b390d3f23ecc590
# Parent  fb4dea2184bfc1883c76eb20b9024b1c4e8a93a6
[project @ 2006-06-06 15:03:33 by jwe]

diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -188,47 +188,46 @@ dnl These two checks for signal function
 dnl aclocal.m4 file distributed with bash 2.0.
 dnl
 dnl Check type of signal routines (posix, 4.2bsd, 4.1bsd or v7)
 AC_DEFUN(OCTAVE_SIGNAL_CHECK,
 [AC_REQUIRE([AC_TYPE_SIGNAL])
 AC_MSG_CHECKING(for type of signal functions)
 AC_CACHE_VAL(octave_cv_signal_vintage,
 [
-  AC_TRY_LINK([#include <signal.h>],[
-    sigset_t ss;
-    struct sigaction sa;
-    sigemptyset(&ss); sigsuspend(&ss);
-    sigaction(SIGINT, &sa, (struct sigaction *) 0);
-    sigprocmask(SIG_BLOCK, &ss, (sigset_t *) 0);
-  ], octave_cv_signal_vintage=posix,
-  [
-    AC_TRY_LINK([#include <signal.h>], [
-	int mask = sigmask(SIGINT);
-	sigsetmask(mask); sigblock(mask); sigpause(mask);
-    ], octave_cv_signal_vintage=4.2bsd,
-    [
-      AC_TRY_LINK([
-	#include <signal.h>
-	RETSIGTYPE foo() { }], [
-		int mask = sigmask(SIGINT);
-		sigset(SIGINT, foo); sigrelse(SIGINT);
-		sighold(SIGINT); sigpause(SIGINT);
-        ], octave_cv_signal_vintage=svr3, octave_cv_signal_vintage=v7
-    )]
-  )]
-)
-])
+  AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <signal.h>]],
+    [[sigset_t ss;
+      struct sigaction sa;
+      sigemptyset (&ss);
+      sigsuspend (&ss);
+      sigaction (SIGINT, &sa, (struct sigaction *) 0);
+      sigprocmask (SIG_BLOCK, &ss, (sigset_t *) 0);]])],
+    [octave_cv_signal_vintage=posix],
+    [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <signal.h>]],
+       [[int mask = sigmask (SIGINT);
+	 sigsetmask (mask);
+         sigblock (mask);
+         sigpause (mask);]])],
+       [octave_cv_signal_vintage=4.2bsd],
+       [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <signal.h>
+          RETSIGTYPE foo() { }]])],
+          [[int mask = sigmask (SIGINT);
+	    sigset (SIGINT, foo);
+            sigrelse (SIGINT);
+	    sighold (SIGINT);
+            sigpause (SIGINT);]],
+          [octave_cv_signal_vintage=svr3],
+          [octave_cv_signal_vintage=v7])])])])
 AC_MSG_RESULT($octave_cv_signal_vintage)
 if test "$octave_cv_signal_vintage" = posix; then
-AC_DEFINE(HAVE_POSIX_SIGNALS,1,[Define if you have POSIX style signals.])
+AC_DEFINE(HAVE_POSIX_SIGNALS, 1, [Define if you have POSIX style signals.])
 elif test "$octave_cv_signal_vintage" = "4.2bsd"; then
-AC_DEFINE(HAVE_BSD_SIGNALS,1,[Define if you have BSD style signals.])
+AC_DEFINE(HAVE_BSD_SIGNALS, 1, [Define if you have BSD style signals.])
 elif test "$octave_cv_signal_vintage" = svr3; then
-AC_DEFINE(HAVE_USG_SIGHOLD,1,[Define if you have System V Release 3 signals.])
+AC_DEFINE(HAVE_USG_SIGHOLD, 1, [Define if you have System V Release 3 signals.])
 fi
 ])
 dnl
 AC_DEFUN(OCTAVE_REINSTALL_SIGHANDLERS,
 [AC_REQUIRE([AC_TYPE_SIGNAL])
 AC_REQUIRE([OCTAVE_SIGNAL_CHECK])
 AC_MSG_CHECKING([if signal handlers must be reinstalled when invoked])
 AC_CACHE_VAL(octave_cv_must_reinstall_sighandlers,
@@ -303,23 +302,21 @@ AC_DEFUN(OCTAVE_CXX_NEW_FRIEND_TEMPLATE_
        };
 
        template <class T> int
        operator== (const T&, const T&)
        {
 	 return 0;
        }
 EOB
-    AC_TRY_LINK([#include "conftest.h"], [
-        A a (1);
-        return a == A(1);
-      ], 
-      octave_cv_cxx_new_friend_template_decl=no,
-      octave_cv_cxx_new_friend_template_decl=yes
-    )
+    AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include "conftest.h"]],
+      [[A a (1);
+        return a == A(1);]])],
+      [octave_cv_cxx_new_friend_template_decl=no],
+      [octave_cv_cxx_new_friend_template_decl=yes])
     AC_LANG_POP(C++)
   ])
   AC_MSG_RESULT($octave_cv_cxx_new_friend_template_decl)
   if test $octave_cv_cxx_new_friend_template_decl = yes; then
     AC_DEFINE(CXX_NEW_FRIEND_TEMPLATE_DECL,1,[Define if your compiler supports `<>' stuff for template friends.])
   fi
 ])
 dnl
@@ -627,25 +624,23 @@ AC_DEFUN(OCTAVE_CXX_ISO_COMPLIANT_LIBRAR
 	climits clocale cmath complex csetjmp csignal cstdarg cstddef \
 	cstdio cstdlib cstring ctime cwchar deque exception \
 	fstream functional iomanip ios iosfwd iostream istream iterator \
 	limits list locale map memory new numeric ostream queue set \
 	sstream stack stdexcept streambuf string strstream typeinfo \
 	utility valarray vector; do
       echo "#include <$inc>" >> conftest.h
     done
-    AC_TRY_LINK([#include "conftest.h"], [
-        std::bitset<50> flags;
+    AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include "conftest.h"]],
+      [[std::bitset<50> flags;
         flags.set();
         int digits = std::numeric_limits<unsigned long>::digits;
-        digits = 0;
-      ],
-      octave_cv_cxx_iso_compliant_library=yes,
-      octave_cv_cxx_iso_compliant_library=no
-    )
+        digits = 0;]])],
+      [octave_cv_cxx_iso_compliant_library=yes],
+      [octave_cv_cxx_iso_compliant_library=no])
     AC_LANG_POP(C++)
   ])
   AC_MSG_RESULT($octave_cv_cxx_iso_compliant_library)
   if test $octave_cv_cxx_iso_compliant_library = yes; then
     AC_DEFINE(CXX_ISO_COMPLIANT_LIBRARY, 1, [Define if your C++ runtime library is ISO compliant.])
   fi
 ])
 dnl
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.511 $)
+AC_REVISION($Revision: 1.512 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -42,17 +42,17 @@ AC_GNU_SOURCE
 
 AC_AIX
 AC_MINIX
 AC_ISC_POSIX
 
 ### Path separator.
 sepchar=:
 AC_ARG_WITH(sepchar,
-  [AC_HELP_STRING([--with-sepchar=<char>],
+  [AS_HELP_STRING([--with-sepchar=<char>],
 	[use <char> as the path separation character])])
 case $with_sepchar in
   yes | "")
     case "$canonical_host_type" in
       *-*-mingw*)
 	sepchar=';'
         ;;
       esac
@@ -1363,29 +1363,32 @@ AC_TRY_COMPILE([#ifdef TIME_WITH_SYS_TIM
   [AC_MSG_RESULT(yes)
    HAVE_TIMEVAL=yes
    AC_DEFINE(HAVE_TIMEVAL, 1, [Define if struct timeval is defined.])],
   [AC_MSG_RESULT(no)
    HAVE_TIMEVAL=no])
 
 if test "x$HAVE_TIMEVAL" = xyes; then
 AC_MSG_CHECKING(whether gettimeofday can't accept two arguments)
-AC_TRY_LINK([#ifdef TIME_WITH_SYS_TIME
+AC_LINK_IFELSE([AC_LANG_PROGRAM([[#ifdef TIME_WITH_SYS_TIME
 #include <sys/time.h>
 #include <time.h>
 #else
 #ifdef HAVE_SYS_TIME_H
 #include <sys/time.h>
 #else
 #include <time.h>
 #endif
-#endif],[struct timeval time; struct timezone dummy;
-  gettimeofday (&time, &dummy);], [AC_MSG_RESULT(no)],
+#endif]], [[struct timeval time;
+  struct timezone dummy;
+  gettimeofday (&time, &dummy);]])],
+  [AC_MSG_RESULT(no)],
   [AC_MSG_RESULT(yes)
-   AC_DEFINE(GETTIMEOFDAY_NO_TZ, 1, [Define if your system has a single-arg prototype for gettimeofday.])])
+   AC_DEFINE(GETTIMEOFDAY_NO_TZ, 1,
+     [Define if your system has a single-arg prototype for gettimeofday.])])
 fi
 
 dnl Would like to get rid of this cruft, and just have
 dnl
 dnl   AC_CHECK_FUNCS(finite isnan isinf)
 dnl
 dnl instead, but that used to fail on some systems...
 dnl
@@ -1449,34 +1452,36 @@ if test "$octave_found_termlib" = no; th
   warn_termlibs="I couldn't find -ltermcap, -lterminfo, -lncurses, -lcurses, o\
 r -ltermlib!"
   AC_MSG_WARN($warn_termlibs)
 fi
 
 OCTAVE_ENABLE_READLINE
 
 AC_MSG_CHECKING([for struct exception in math.h])
-AC_TRY_LINK([#include <math.h>],
-  [struct exception *x; x->type; x->name;],
-  AC_MSG_RESULT(yes)
-  AC_DEFINE(EXCEPTION_IN_MATH, 1, [Define if your math.h declares struct exception for matherr().]),
-  AC_MSG_RESULT(no))
+AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <math.h>]],
+  [[struct exception *x; x->type; x->name;]])],
+  [AC_MSG_RESULT(yes)
+   AC_DEFINE(EXCEPTION_IN_MATH, 1,
+     [Define if your math.h declares struct exception for matherr().])],
+  [AC_MSG_RESULT(no)])
 
 ### Signal stuff.
 
 AC_TYPE_SIGNAL
 AC_CHECK_DECL([sys_siglist],
   [AC_DEFINE(SYS_SIGLIST_DECLARED, 1, [Define if your system has a declaration of sys_siglist.])],
   [AC_CHECK_DECLS([sys_siglist])], [#include <signal.h>])
 AC_MSG_CHECKING([for sys_siglist variable])
-AC_TRY_LINK([#include <stdio.h>],
-  [extern char *sys_siglist[]; printf ("%s\n", sys_siglist[1]);],
-  AC_MSG_RESULT(yes)
-  AC_DEFINE(HAVE_SYS_SIGLIST, 1, [Define if your system has a sys_siglist variable.]),
-  AC_MSG_RESULT(no))
+AC_LINK_IFELSE([[#include <stdio.h>]],
+  [[extern char *sys_siglist[]; printf ("%s\n", sys_siglist[1]);]])],
+  [AC_MSG_RESULT(yes)
+   AC_DEFINE(HAVE_SYS_SIGLIST, 1,
+     [Define if your system has a sys_siglist variable.])],
+  [AC_MSG_RESULT(no)])
 OCTAVE_SIGNAL_CHECK
 OCTAVE_REINSTALL_SIGHANDLERS
 
 ### A system dependent kluge or two.
 
 AC_CHECK_FUNCS(getrusage times)
 case "$canonical_host_type" in
   *-*-cygwin*)
