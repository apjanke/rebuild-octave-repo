# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1229120300 -3600
#      Fri Dec 12 23:18:20 2008 +0100
# Node ID 2176f2b4599e13747ca994eb75581576e9773e4b
# Parent  712cfdc2e417b811f2bd9af8d508c86b320c91be
Fix sparse cholesky inversion

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -19,16 +19,21 @@ 2008-12-10  Jaroslav Hajek  <highegg@gma
 2008-12-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* base-aepbal.h: New source.
 	* dbleAEPBAL.h, dbleAEPBAL.cc: Rebase AEPBAL on base_aepbal.
 	* floatAEPBAL.h, floatAEPBAL.cc: Rebase FloatAEPBAL on base_aepbal.
 	* CmplxAEPBAL.h, CmplxAEPBAL.cc: Rebase ComplexAEPBAL on base_aepbal.
 	* fCmplxAEPBAL.h, fCmplxAEPBAL.cc: Rebase FloatComplexAEPBAL on base_aepbal.
 
+2008-12-12  David Bateman  <dbateman@free.fr>
+
+	* sparse-base-chol.cc (inverse): Fix inversion based on cholesky 
+	factorization.
+	
 2008-12-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* idx-vector.cc (idx_vector::idx_vector_rep::idx_vector_rep (const 
 	Sparse<bool>&)): New constructor.
 	* idx_vector.h: Declare it.
 	(idx_vector::idx_vector (const Sparse<bool>&)): New constructor.
 	* idx-vector.cc (idx_vector::idx_vector_rep::idx_vector_rep (const
 	Array<bool>&)): Fix extent calculation.
diff --git a/liboctave/sparse-base-chol.cc b/liboctave/sparse-base-chol.cc
--- a/liboctave/sparse-base-chol.cc
+++ b/liboctave/sparse-base-chol.cc
@@ -272,25 +272,25 @@ sparse_base_chol<chol_type, chol_elt, p_
 #ifdef HAVE_CHOLMOD
   cholmod_sparse *m = rep->L();
   octave_idx_type n = m->ncol;
   ColumnVector perms = rep->perm();
   chol_type ret;
   double rcond2;
   octave_idx_type info;
   MatrixType mattype (MatrixType::Upper);
-  chol_type linv = L().transpose().inverse(mattype, info, rcond2, 1, 0);
+  chol_type linv = L().hermitian().inverse(mattype, info, rcond2, 1, 0);
 
   if (perms.length() == n)
     {
       p_type Qc = Q();
-      retval = Qc * linv.transpose() * linv * Qc.transpose();
+      retval = Qc * linv * linv.hermitian() * Qc.transpose();
     }
   else
-    retval = linv.transpose() * linv;
+    retval = linv * linv.hermitian ();
 #endif
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -41,16 +41,20 @@ 2008-12-07  Thorsten Meyer  <thorsten.me
 
         * mappers.cc (Ftolower): Make lower alias of tolower, add tests
         * mappers.cc (Ftoupper): Make upper alias of toupper, add tests
 
 2008-12-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/balance.cc (Fbalance): Exploit the new AEPBAL functionality.
 
+2008-12-12  David Bateman  <dbateman@free.fr>
+
+	* DLD-FUNCTIONS/chol.cc (Fcholinv): Add test.
+
 2008-12-08  Jaroslav Hajek  <highegg@gmail.com>
 	
 	* xpow.cc ( xpow (const DiagMatrix& a, double b), 
 	xpow (const DiagMatrix& a, const Complex& b), 
 	xpow (const ComplexDiagMatrix& a, double b), 
 	xpow (const ComplexDiagMatrix& a, const Complex& b), 
 	xpow (const FloatDiagMatrix& a, float b), 
 	xpow (const FloatDiagMatrix& a, const FloatComplex& b), 
diff --git a/src/DLD-FUNCTIONS/chol.cc b/src/DLD-FUNCTIONS/chol.cc
--- a/src/DLD-FUNCTIONS/chol.cc
+++ b/src/DLD-FUNCTIONS/chol.cc
@@ -464,16 +464,34 @@ symmetric positive definite matrix @var{
 	}
     }
   else
     print_usage ();
 
   return retval;
 }
 
+/*
+
+%!test
+%! A = [2,0.2;0.2,1];
+%! issymmetric(A)
+%! min(eig(A))
+%! Ainv = inv(A);
+%! Ainv1 = cholinv(A);
+%! Ainv2 = inv(sparse(A));
+%! Ainv3 = cholinv(sparse(A));
+%! Ainv4 = spcholinv(sparse(A));
+%! assert (norm(Ainv-Ainv1),1e-10)
+%! assert (norm(Ainv-Ainv2),1e-10)
+%! assert (norm(Ainv-Ainv3),1e-10)
+%! assert (norm(Ainv-Ainv4),1e-10)
+
+*/
+
 DEFUN_DLD (chol2inv, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} chol2inv (@var{u})\n\
 Invert a symmetric, positive definite square matrix from its Cholesky\n\
 decomposition, @var{u}.  Note that @var{u} should be an upper-triangular\n\
 matrix with positive diagonal elements.  @code{chol2inv (@var{u})}\n\
 provides @code{inv (@var{u}'*@var{u})} but it is much faster than\n\
 using @code{inv}.\n\
