# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1231656944 -3600
#      Sun Jan 11 07:55:44 2009 +0100
# Node ID fd11a08a9b31635c352b86a79964563321771760
# Parent  aaf2b6d6813c42145ba9c8fb6bd8da68507a17dd
disallow invalid {}-indexed assigments

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,17 @@
+2009-01-11  Jaroslav Hajek  <highegg@gmail.com>
+
+	* general/sortrows.m: Fix invalid `{x:y} = z' assignment.
+	* miscellaneous/orderfields.m: Dtto.
+	* miscellaneous/what.m: Dtto.
+	* pkg/pkg.m: Dtto.
+	* plot/ndgrid.m: Dtto.
+	* strings/strcat.m: Dtto.
+
 2009-01-09  Kai Habel <kai.habel@gmx.de>
 
         * plot/surfl.m: New function
         * plot/diffuse.m: dito
         * plot/specular.m: dito
 
 2009-01-05  John W. Eaton  <jwe@octave.org>
 
diff --git a/scripts/general/sortrows.m b/scripts/general/sortrows.m
--- a/scripts/general/sortrows.m
+++ b/scripts/general/sortrows.m
@@ -29,17 +29,17 @@
 ## Adapted-by: jwe
 
 function [s, i] = sortrows (m, c)
 
   default_mode = "ascend";
   other_mode = "descend";
   if (nargin < 2)
     indices = [1:size(m,2)]';
-    mode{1:size(m,2)} = default_mode;
+    mode(1:size(m,2)) = {default_mode};
   else
     for ii = 1:length (c);
       if (c(ii) < 0)
         mode{ii} = other_mode;
       else
         mode{ii} = default_mode;
       endif
     endfor
diff --git a/scripts/miscellaneous/orderfields.m b/scripts/miscellaneous/orderfields.m
--- a/scripts/miscellaneous/orderfields.m
+++ b/scripts/miscellaneous/orderfields.m
@@ -85,17 +85,17 @@ function [t, p] = orderfields (s1, s2)
     [newel, newidx] = sort (names);
     p = oldidx(newidx);
   endif
 
   ## Permute the names in the structure.
   if (numel (s1) == 0)
     args = cell (1, 2 * numel (names));
     args(1:2:end) = names;
-      args{2:2:end} = {};
+    args(2:2:end) = {[]};
     t = struct (args{:});
   else
     for i = 1:numel (names)
       el = names(i);
       t(:).(el) = s1(:).(el);
     endfor
   endif
 
diff --git a/scripts/miscellaneous/what.m b/scripts/miscellaneous/what.m
--- a/scripts/miscellaneous/what.m
+++ b/scripts/miscellaneous/what.m
@@ -102,15 +102,14 @@ function __display_filenames__ (msg, p, 
       fmt = sprintf ("%s   %%-%ds", fmt, maxlen);
     endfor
     fmt = [fmt, "\n"];
 
     nrows = ceil (length (f) / ncols); 
     for i = 1 : nrows
       args  = f(i:nrows:end);
       if (length (args) < ncols)
-        n = ncols - length (args);
-        args{end : end + n} = "";
+        args(end : ncols) = {""};
       endif
       printf (fmt, args{:});
     endfor
   endif
 endfunction
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -966,21 +966,21 @@ function [pkg_desc_list, flag] = describ
   ## Get the list of installed packages
   installed_pkgs_lst = installed_packages(local_list, global_list);
   num_packages = length (installed_pkgs_lst);
   
 
   describe_all = false;
   if (any (strcmp ("all", pkgnames)))
     describe_all = true;
-    flag{1:num_packages} = "Not Loaded";
+    flag(1:num_packages) = {"Not Loaded"};
     num_pkgnames = num_packages;
   else
     num_pkgnames = length (pkgnames);
-    flag{1:num_pkgnames} = "Not installed";
+    flag(1:num_pkgnames) = {"Not installed"};
   endif
 
   for i = 1:num_packages
     curr_name= installed_pkgs_lst{i}.name;
     if (describe_all)
       name_pos = i;
     else
       name_pos = find(strcmp (curr_name, pkgnames));
diff --git a/scripts/plot/ndgrid.m b/scripts/plot/ndgrid.m
--- a/scripts/plot/ndgrid.m
+++ b/scripts/plot/ndgrid.m
@@ -32,17 +32,17 @@
 
 ## Author: Alexander Barth <abarth@marine.usf.edu>
 
 function varargout = ndgrid (varargin)
 
   if (nargin == 1)
     n = max ([nargout, 2]);  
     ## If only one input argument is given, repeat it n-times
-    varargin{1:n} = varargin{1};
+    varargin(1:n) = varargin(1);
   elseif (nargin >= nargout)
     n = max ([nargin, 2]);  
   else
     error ("ndgrid: wrong number of input arguments");
   endif
 
   ## Determine the size of the output arguments
   
diff --git a/scripts/strings/strcat.m b/scripts/strings/strcat.m
--- a/scripts/strings/strcat.m
+++ b/scripts/strings/strcat.m
@@ -81,17 +81,17 @@ function st = strcat (varargin)
 
       ## Set all cells to a common size
       n = find (numstrs == max (numstrs), 1);
       maxstrs = numstrs (n);
       dim = dims{n};
       for nv = find (numstrs == 1)
         str = varargin{nv}{1};
         varargin{nv} = cell (dim);
-        varargin{nv}{:} = str;
+        varargin{nv}(:) = {str};
       endfor
 
       ## Concatenate the strings
       st = varargin{1};
       for ns = 1:maxstrs
         for nv = 2:nargin
           if (size_equal (st, varargin{nv}))
             st{ns} = [st{ns}, varargin{nv}{ns}];
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-01-11  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-obj.cc (octave_value_list::all_scalars): New method.
+	* oct-obj.h: Declare it.
+	* ov-cell.cc (octave_cell::subsasgn): Disable assigning
+	to non-scalar {}-indexed cell, unless in a multi-assignment.
+
 2009-01-10  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/sparse.cc (Ffull): Convert diagonal & permutation
 	matrices, leave other classes untouched.
 
 2009-01-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* OPERATORS/op-cdm-cdm.cc: Install missing widening op.
diff --git a/src/oct-obj.cc b/src/oct-obj.cc
--- a/src/oct-obj.cc
+++ b/src/oct-obj.cc
@@ -157,16 +157,26 @@ octave_value_list::all_strings_p (void) 
   for (octave_idx_type i = 0; i < n; i++)
     if (! elem(i).is_string ())
       return false;
 
   return true;
 }
 
 bool
+octave_value_list::all_scalars (void) const
+{
+  octave_idx_type n = length (), i;
+
+  for (i = 0; i < n && elem (i).is_string (); i++) ;
+  
+  return i == n;
+}
+
+bool
 octave_value_list::has_magic_colon (void) const
 {
   octave_idx_type n = length ();
 
   for (octave_idx_type i = 0; i < n; i++)
     if (elem(i).is_magic_colon ())
       return true;
 
diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -106,16 +106,18 @@ public:
   octave_value_list& reverse (void);
 
   octave_value_list
   splice (octave_idx_type offset, octave_idx_type len,
 	  const octave_value_list& lst = octave_value_list ()) const;
 
   bool all_strings_p (void) const;
 
+  bool all_scalars (void) const;
+
   bool has_magic_colon (void) const;
 
   string_vector make_argv (const std::string& = std::string()) const;
 
   void stash_name_tags (const string_vector& nm) { names = nm; }
 
   string_vector name_tags (void) const { return names; }
 
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -263,19 +263,21 @@ octave_cell::subsasgn (const std::string
 		// the number of elements to agree and to preserve the
 		// shape of the left hand side of the assignment.
 
 		if (numel () == tmp_cell.numel ())
 		  tmp_cell = tmp_cell.reshape (dims ());
 
 		octave_base_matrix<Cell>::assign (i, tmp_cell);
 	      }
-	    else
-              // Regularize a null matrix if stored into a struct component.
-	      octave_base_matrix<Cell>::assign (i, Cell (t_rhs.non_null_value ()));
+	    else if (i.all_scalars () || do_index_op (i, true).dims ().numel () == 1)
+              // Regularize a null matrix if stored into a cell.
+              octave_base_matrix<Cell>::assign (i, Cell (t_rhs.non_null_value ()));
+            else if (! error_state)
+              error ("scalar indices required for {} in assignment.");
 
 	    if (! error_state)
 	      {
 		count++;
 		retval = octave_value (this);
 	      }
 	    else
 	      gripe_failed_assignment ();
