# HG changeset patch
# User jwe
# Date 769826968 0
#      Wed May 25 00:49:28 1994 +0000
# Node ID a222980dfa552c130e560a8dfe55c309b79e45d1
# Parent  a6067610d2dd131be1af0e64e62d8ec8b11a7745
[project @ 1994-05-25 00:49:28 by jwe]

diff --git a/src/tc-assign.cc b/src/tc-assign.cc
--- a/src/tc-assign.cc
+++ b/src/tc-assign.cc
@@ -29,21 +29,31 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "user-prefs.h"
 #include "tree-const.h"
 #include "utils.h"
 #include "gripes.h"
 #include "error.h"
 
 #include "tc-inlines.cc"
 
+/*
+ * Top-level tree-constant function that handles assignments.  Only
+ * decide if the left-hand side is currently a scalar or a matrix and
+ * hand off to other functions to do the real work.
+ */
 void
 tree_constant_rep::assign (tree_constant& rhs, tree_constant *args, int nargs)
 {
   tree_constant rhs_tmp = rhs.make_numeric ();
 
+// This is easier than actually handling assignments to strings.
+// An assignment to a range will normally require a conversion to a
+// vector since it will normally destroy the equally-spaced property
+// of the range elements.
+
   if (type_tag == string_constant || type_tag == range_constant) 
     force_numeric ();
 
   switch (type_tag)
     {
     case complex_scalar_constant:
     case scalar_constant:
     case unknown_constant:
@@ -59,16 +69,20 @@ tree_constant_rep::assign (tree_constant
     case range_constant:
     case magic_colon:
     default:
       panic_impossible ();
       break;
     }
 }
 
+/*
+ * Assignments to scalars.  If resize_on_range_error is true,
+ * this can convert the left-hand size to a matrix.
+ */
 void
 tree_constant_rep::do_scalar_assignment (tree_constant& rhs,
 					 tree_constant *args, int nargs)
 {
   assert (type_tag == unknown_constant
 	  || type_tag == scalar_constant
 	  || type_tag == complex_scalar_constant);
 
@@ -148,16 +162,22 @@ tree_constant_rep::do_scalar_assignment 
 	}
     }
   else if (nargs > 3 || nargs < 2)
     ::error ("invalid index expression for scalar type");
   else
     ::error ("index invalid or out of range for scalar type");
 }
 
+/*
+ * Assignments to matrices (and vectors).
+ *
+ * For compatibility with Matlab, we allow assignment of an empty
+ * matrix to an expression with empty indices to do nothing.
+ */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs,
 					 tree_constant *args, int nargs)
 {
   assert (type_tag == unknown_constant
 	  || type_tag == matrix_constant
 	  || type_tag == complex_matrix_constant);
 
@@ -177,63 +197,99 @@ tree_constant_rep::do_matrix_assignment 
 	}
       else
 	{
 	  matrix = new Matrix ();
 	  type_tag = matrix_constant;
 	}
     }
 
+// The do_matrix_assignment functions can't handle empty matrices, so
+// don't let any pass through here.
   switch (nargs)
     {
     case 2:
       if (args == NULL_TREE_CONST)
 	::error ("matrix index is null");
       else if (args[1].is_undefined ())
 	::error ("matrix index is undefined");
-      else if (args[1].is_empty ())
-	::error ("matrix index is an empty matrix");
       else
 	do_matrix_assignment (rhs, args[1]);
       break;
     case 3:
       if (args == NULL_TREE_CONST)
 	::error ("matrix indices are null");
       else if (args[1].is_undefined ())
 	::error ("first matrix index is undefined");
       else if (args[2].is_undefined ())
 	::error ("second matrix index is undefined");
-      else if (args[1].is_empty ())
-	::error ("first matrix index is an empty matrix");
-      else if (args[2].is_empty ())
-	::error ("second matrix index is an empty matrix");
+      else if (args[1].is_empty () || args[2].is_empty ())
+	{
+	  if (! rhs.is_empty ())
+	    {
+	      ::error ("in assignment expression, a matrix index is empty");
+	      ::error ("but hte right hand side is not an empty matrix");
+	    }
+// XXX FIXME XXX -- to really be correct here, we should probably
+// check to see if the assignment conforms, but that seems like more
+// work than it's worth right now...
+	}
       else
 	do_matrix_assignment (rhs, args[1], args[2]);
       break;
     default:
       ::error ("too many indices for matrix expression");
       break;
     }
 }
 
+/*
+ * Matrix assignments indexed by a single value.
+ */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs,
 					 tree_constant& i_arg)
 {
   int nr = rows ();
   int nc = columns ();
 
-  if (user_pref.do_fortran_indexing)
-    fortran_style_matrix_assignment (rhs, i_arg);
-  else if (nr <= 1 || nc <= 1)
-    vector_assignment (rhs, i_arg);
+  if (user_pref.do_fortran_indexing || nr <= 1 || nc <= 1)
+    {
+      if (i_arg.is_empty ())
+	{
+	  if (! rhs.is_empty ())
+	    {
+	      ::error ("in assignment expression, matrix index is empty but");
+	      ::error ("right hand side is not an empty matrix");
+	    }
+// XXX FIXME XXX -- to really be correct here, we should probably
+// check to see if the assignment conforms, but that seems like more
+// work than it's worth right now...
+
+// The assignment functions can't handle empty matrices, so don't let
+// any pass through here. 
+	  return;
+	}
+
+      if (user_pref.do_fortran_indexing)
+	fortran_style_matrix_assignment (rhs, i_arg);
+      else if (nr <= 1 || nc <= 1)
+	vector_assignment (rhs, i_arg);
+      else
+	panic_impossible ();
+    }
   else
     ::error ("single index only valid for row or column vector");
 }
 
+/*
+ * Fortran-style assignments.  Matrices are assumed to be stored in
+ * column-major order and it is ok to use a single index for
+ * multi-dimensional matrices.
+ */
 void
 tree_constant_rep::fortran_style_matrix_assignment (tree_constant& rhs,
 						    tree_constant& i_arg)
 {
   tree_constant tmp_i = i_arg.make_numeric_or_magic ();
 
   tree_constant_rep::constant_type itype = tmp_i.const_type ();
 
@@ -326,16 +382,114 @@ tree_constant_rep::fortran_style_matrix_
       fortran_style_matrix_assignment (rhs, magic_colon);
       break;
     default:
       panic_impossible ();
       break;
     }
 }
 
+/*
+ * Fortran-style assignment for vector index.
+ */
+void
+tree_constant_rep::fortran_style_matrix_assignment (tree_constant& rhs,
+						    idx_vector& i)
+{
+  assert (rhs.is_matrix_type ());
+
+  int ilen = i.capacity ();
+
+  REP_RHS_MATRIX (rhs, rhs_m, rhs_cm, rhs_nr, rhs_nc);
+
+  int len = rhs_nr * rhs_nc;
+
+  if (len == ilen)
+    {
+      int nr = rows ();
+      if (rhs.const_type () == matrix_constant)
+	{
+	  double *cop_out = rhs_m.fortran_vec ();
+	  for (int k = 0; k < len; k++)
+	    {
+	      int ii = fortran_row (i.elem (k) + 1, nr) - 1;
+	      int jj = fortran_column (i.elem (k) + 1, nr) - 1;
+
+	      matrix->elem (ii, jj) = *cop_out++;
+	    }
+	}
+      else
+	{
+	  Complex *cop_out = rhs_cm.fortran_vec ();
+	  for (int k = 0; k < len; k++)
+	    {
+	      int ii = fortran_row (i.elem (k) + 1, nr) - 1;
+	      int jj = fortran_column (i.elem (k) + 1, nr) - 1;
+
+	      complex_matrix->elem (ii, jj) = *cop_out++;
+	    }
+	}
+    }
+  else
+    ::error ("number of rows and columns must match for indexed assignment");
+}
+
+/*
+ * Fortran-style assignment for colon index.
+ */
+void
+tree_constant_rep::fortran_style_matrix_assignment
+  (tree_constant& rhs, tree_constant_rep::constant_type mci)
+{
+  assert (rhs.is_matrix_type () && mci == tree_constant_rep::magic_colon);
+
+  int nr = rows ();
+  int nc = columns ();
+
+  REP_RHS_MATRIX (rhs, rhs_m, rhs_cm, rhs_nr, rhs_nc);
+
+  int rhs_size = rhs_nr * rhs_nc;
+  if (rhs_size == 0)
+    {
+      if (rhs.const_type () == matrix_constant)
+	{
+	  delete matrix;
+	  matrix = new Matrix (0, 0);
+	  return;
+	}
+      else
+	panic_impossible ();
+    }
+  else if (nr*nc != rhs_size)
+    {
+      ::error ("A(:) = X: X and A must have the same number of elements");
+      return;
+    }
+
+  if (rhs.const_type () == matrix_constant)
+    {
+      double *cop_out = rhs_m.fortran_vec ();
+      for (int j = 0; j < nc; j++)
+	for (int i = 0; i < nr; i++)
+	  matrix->elem (i, j) = *cop_out++;
+    }
+  else
+    {
+      Complex *cop_out = rhs_cm.fortran_vec ();
+      for (int j = 0; j < nc; j++)
+	for (int i = 0; i < nr; i++)
+	  complex_matrix->elem (i, j) = *cop_out++;
+    }
+}
+
+/*
+ * Assignments to vectors.  Hand off to other functions once we know
+ * what kind of index we have.  For a colon, it is the same as
+ * assignment to a matrix indexed by two colons.
+ */
 void
 tree_constant_rep::vector_assignment (tree_constant& rhs, tree_constant& i_arg)
 {
   int nr = rows ();
   int nc = columns ();
 
   assert ((nr == 1 || nc == 1 || (nr == 0 && nc == 0))
 	  && ! user_pref.do_fortran_indexing); 
@@ -404,16 +558,19 @@ tree_constant_rep::vector_assignment (tr
       }
       break;
     default:
       panic_impossible ();
       break;
     }
 }
 
+/*
+ * Check whether an indexed assignment to a vector is valid.
+ */
 void
 tree_constant_rep::check_vector_assign (int rhs_nr, int rhs_nc,
 					int ilen, const char *rm)
 {
   int nr = rows ();
   int nc = columns ();
 
   if ((nr == 1 && nc == 1) || nr == 0 || nc == 0)  // No orientation.
@@ -439,16 +596,19 @@ tree_constant_rep::check_vector_assign (
 	  ::error ("A(%s) = X: where A is a column vector, X must also be", rm);
 	  ::error ("a column vector with the same number of elements as %s", rm);
 	}
     }
   else
     panic_impossible ();
 }
 
+/*
+ * Assignment to a vector with an integer index.
+ */
 void
 tree_constant_rep::do_vector_assign (tree_constant& rhs, int i)
 {
   int rhs_nr = rhs.rows ();
   int rhs_nc = rhs.columns ();
 
   if (indexed_assign_conforms (1, 1, rhs_nr, rhs_nc))
     {
@@ -494,16 +654,19 @@ tree_constant_rep::do_vector_assign (tre
     }
   else
     {
       ::error ("for A(int) = X: X must be a scalar");
       return;
     }
 }
 
+/*
+ * Assignment to a vector with a vector index.
+ */
 void
 tree_constant_rep::do_vector_assign (tree_constant& rhs, idx_vector& iv)
 {
   if (rhs.is_zero_by_zero ())
     {
       int nr = rows ();
       int nc = columns ();
 
@@ -596,16 +759,19 @@ tree_constant_rep::do_vector_assign (tre
 	}
       else
 	panic_impossible ();
     }
   else
     panic_impossible ();
 }
 
+/*
+ * Assignment to a vector with a range index.
+ */
 void
 tree_constant_rep::do_vector_assign (tree_constant& rhs, Range& ri)
 {
   if (rhs.is_zero_by_zero ())
     {
       int nr = rows ();
       int nc = columns ();
 
@@ -691,103 +857,30 @@ tree_constant_rep::do_vector_assign (tre
 	}
       else
 	panic_impossible ();
     }
   else
     panic_impossible ();
 }
 
-void
-tree_constant_rep::fortran_style_matrix_assignment
-  (tree_constant& rhs, tree_constant_rep::constant_type mci)
-{
-  assert (rhs.is_matrix_type () && mci == tree_constant_rep::magic_colon);
-
-  int nr = rows ();
-  int nc = columns ();
-
-  REP_RHS_MATRIX (rhs, rhs_m, rhs_cm, rhs_nr, rhs_nc);
-
-  int rhs_size = rhs_nr * rhs_nc;
-  if (rhs_size == 0)
-    {
-      if (rhs.const_type () == matrix_constant)
-	{
-	  delete matrix;
-	  matrix = new Matrix (0, 0);
-	  return;
-	}
-      else
-	panic_impossible ();
-    }
-  else if (nr*nc != rhs_size)
-    {
-      ::error ("A(:) = X: X and A must have the same number of elements");
-      return;
-    }
-
-  if (rhs.const_type () == matrix_constant)
-    {
-      double *cop_out = rhs_m.fortran_vec ();
-      for (int j = 0; j < nc; j++)
-	for (int i = 0; i < nr; i++)
-	  matrix->elem (i, j) = *cop_out++;
-    }
-  else
-    {
-      Complex *cop_out = rhs_cm.fortran_vec ();
-      for (int j = 0; j < nc; j++)
-	for (int i = 0; i < nr; i++)
-	  complex_matrix->elem (i, j) = *cop_out++;
-    }
-}
-
-void
-tree_constant_rep::fortran_style_matrix_assignment (tree_constant& rhs,
-						    idx_vector& i)
-{
-  assert (rhs.is_matrix_type ());
-
-  int ilen = i.capacity ();
-
-  REP_RHS_MATRIX (rhs, rhs_m, rhs_cm, rhs_nr, rhs_nc);
-
-  int len = rhs_nr * rhs_nc;
-
-  if (len == ilen)
-    {
-      int nr = rows ();
-      if (rhs.const_type () == matrix_constant)
-	{
-	  double *cop_out = rhs_m.fortran_vec ();
-	  for (int k = 0; k < len; k++)
-	    {
-	      int ii = fortran_row (i.elem (k) + 1, nr) - 1;
-	      int jj = fortran_column (i.elem (k) + 1, nr) - 1;
-
-	      matrix->elem (ii, jj) = *cop_out++;
-	    }
-	}
-      else
-	{
-	  Complex *cop_out = rhs_cm.fortran_vec ();
-	  for (int k = 0; k < len; k++)
-	    {
-	      int ii = fortran_row (i.elem (k) + 1, nr) - 1;
-	      int jj = fortran_column (i.elem (k) + 1, nr) - 1;
-
-	      complex_matrix->elem (ii, jj) = *cop_out++;
-	    }
-	}
-    }
-  else
-    ::error ("number of rows and columns must match for indexed assignment");
-}
-
+/*
+ * Matrix assignment indexed by two values.  This function determines
+ * the type of the first arugment, checks as much as possible, and
+ * then calls one of a set of functions to handle the specific cases:
+ *
+ *   M (integer, arg2) = RHS  (MA1)
+ *   M (vector,  arg2) = RHS  (MA2)
+ *   M (range,   arg2) = RHS  (MA3)
+ *   M (colon,   arg2) = RHS  (MA4)
+ *
+ * Each of those functions determines the type of the second argument
+ * and calls another function to handle the real work of doing the
+ * assignment.
+ */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs,
 					 tree_constant& i_arg, 
 					 tree_constant& j_arg)
 {
   tree_constant tmp_i = i_arg.make_numeric_or_range_or_magic ();
 
   tree_constant_rep::constant_type itype = tmp_i.const_type ();
@@ -841,16 +934,17 @@ tree_constant_rep::do_matrix_assignment 
       do_matrix_assignment (rhs, magic_colon, j_arg);
       break;
     default:
       panic_impossible ();
       break;
     }
 }
 
+/* MA1 */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs, int i,
 					 tree_constant& j_arg)
 {
   tree_constant tmp_j = j_arg.make_numeric_or_range_or_magic ();
 
   tree_constant_rep::constant_type jtype = tmp_j.const_type ();
 
@@ -978,16 +1072,17 @@ tree_constant_rep::do_matrix_assignment 
       }
       break;
     default:
       panic_impossible ();
       break;
     }
 }
 
+/* MA2 */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs, idx_vector& iv,
 					 tree_constant& j_arg)
 {
   tree_constant tmp_j = j_arg.make_numeric_or_range_or_magic ();
 
   tree_constant_rep::constant_type jtype = tmp_j.const_type ();
 
@@ -1078,17 +1173,17 @@ tree_constant_rep::do_matrix_assignment 
     case magic_colon:
       {
 	int nc = columns ();
 	int new_nc = nc;
 	if (nc == 0)
 	  new_nc = rhs_nc;
 
 	if (indexed_assign_conforms (iv.capacity (), new_nc,
-				       rhs_nr, rhs_nc))
+				     rhs_nr, rhs_nc))
 	  {
 	    maybe_resize (iv.max (), new_nc-1);
 	    if (error_state)
 	      return;
 	  }
 	else if (rhs_nr == 0 && rhs_nc == 0)
 	  {
 	    if (iv.max () >= rows ())
@@ -1109,16 +1204,17 @@ tree_constant_rep::do_matrix_assignment 
       }
       break;
     default:
       panic_impossible ();
       break;
     }
 }
 
+/* MA3 */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs,
 					 Range& ri, tree_constant& j_arg) 
 {
   tree_constant tmp_j = j_arg.make_numeric_or_range_or_magic ();
 
   tree_constant_rep::constant_type jtype = tmp_j.const_type ();
 
@@ -1245,16 +1341,17 @@ tree_constant_rep::do_matrix_assignment 
       }
       break;
     default:
       panic_impossible ();
       break;
     }
 }
 
+/* MA4 */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs,
 					 tree_constant_rep::constant_type i,
 					 tree_constant& j_arg)
 {
   tree_constant tmp_j = j_arg.make_numeric_or_range_or_magic ();
 
   tree_constant_rep::constant_type jtype = tmp_j.const_type ();
@@ -1409,34 +1506,55 @@ tree_constant_rep::do_matrix_assignment 
       do_matrix_assignment (rhs, magic_colon, magic_colon);
       break;
     default:
       panic_impossible ();
       break;
     }
 }
 
+/*
+ * Functions that actually handle assignment to a matrix using two
+ * index values.
+ *
+ *                   idx2
+ *            +---+---+----+----+
+ *   idx1     | i | v |  r | c  |
+ *   ---------+---+---+----+----+
+ *   integer  | 1 | 5 |  9 | 13 |
+ *   ---------+---+---+----+----+
+ *   vector   | 2 | 6 | 10 | 14 |
+ *   ---------+---+---+----+----+
+ *   range    | 3 | 7 | 11 | 15 |
+ *   ---------+---+---+----+----+
+ *   colon    | 4 | 8 | 12 | 16 |
+ *   ---------+---+---+----+----+
+ */
+
+/* 1 */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs, int i, int j)
 {
   REP_ELEM_ASSIGN (i, j, rhs.double_value (), rhs.complex_value (),
 		   rhs.is_real_type ());
 }
 
+/* 2 */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs, int i,
 					 idx_vector& jv)
 {
   REP_RHS_MATRIX (rhs, rhs_m, rhs_cm, rhs_nr, rhs_nc);
 
   for (int j = 0; j < jv.capacity (); j++)
     REP_ELEM_ASSIGN (i, jv.elem (j), rhs_m.elem (0, j),
 		     rhs_cm.elem (0, j), rhs.is_real_type ());
 }
 
+/* 3 */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs, int i, Range& rj)
 {
   REP_RHS_MATRIX (rhs, rhs_m, rhs_cm, rhs_nr, rhs_nc);
 
   double b = rj.base ();
   double increment = rj.inc ();
 
@@ -1444,16 +1562,17 @@ tree_constant_rep::do_matrix_assignment 
     {
       double tmp = b + j * increment;
       int col = tree_to_mat_idx (tmp);
       REP_ELEM_ASSIGN (i, col, rhs_m.elem (0, j), rhs_cm.elem (0, j),
 		       rhs.is_real_type ());
     }
 }
 
+/* 4 */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs, int i,
 					 tree_constant_rep::constant_type mcj)
 {
   assert (mcj == magic_colon);
 
   int nc = columns ();
 
@@ -1473,30 +1592,32 @@ tree_constant_rep::do_matrix_assignment 
     {
       REP_ELEM_ASSIGN (i, 0, rhs.double_value (),
 		       rhs.complex_value (), rhs.is_real_type ()); 
     }
   else
     panic_impossible ();
 }
   
+/* 5 */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs,
 					 idx_vector& iv, int j)
 {
   REP_RHS_MATRIX (rhs, rhs_m, rhs_cm, rhs_nr, rhs_nc);
 
   for (int i = 0; i < iv.capacity (); i++)
     {
       int row = iv.elem (i);
       REP_ELEM_ASSIGN (row, j, rhs_m.elem (i, 0),
 		       rhs_cm.elem (i, 0), rhs.is_real_type ());
     }
 }
 
+/* 6 */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs,
 					 idx_vector& iv, idx_vector& jv)
 {
   REP_RHS_MATRIX (rhs, rhs_m, rhs_cm, rhs_nr, rhs_nc);
 
   for (int i = 0; i < iv.capacity (); i++)
     {
@@ -1505,16 +1626,17 @@ tree_constant_rep::do_matrix_assignment 
 	{
 	  int col = jv.elem (j);
 	  REP_ELEM_ASSIGN (row, col, rhs_m.elem (i, j),
 			   rhs_cm.elem (i, j), rhs.is_real_type ());
 	}
     }
 }
 
+/* 7 */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs,
 					 idx_vector& iv, Range& rj)
 {
   REP_RHS_MATRIX (rhs, rhs_m, rhs_cm, rhs_nr, rhs_nc);
 
   double b = rj.base ();
   double increment = rj.inc ();
@@ -1527,16 +1649,17 @@ tree_constant_rep::do_matrix_assignment 
 	  double tmp = b + j * increment;
 	  int col = tree_to_mat_idx (tmp);
 	  REP_ELEM_ASSIGN (row, col, rhs_m.elem (i, j),
 			   rhs_cm.elem (i, j), rhs.is_real_type ());
 	}
     }
 }
 
+/* 8 */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs, idx_vector& iv,
 					 tree_constant_rep::constant_type mcj)
 {
   assert (mcj == magic_colon);
 
   if (rhs.is_zero_by_zero ())
     {
@@ -1555,16 +1678,17 @@ tree_constant_rep::do_matrix_assignment 
 	      int row = iv.elem (i);
 	      REP_ELEM_ASSIGN (row, j, rhs_m.elem (i, j),
 			       rhs_cm.elem (i, j), rhs.is_real_type ());
 	    }
 	}
     }
 }
 
+/* 9 */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs, Range& ri, int j)
 {
   REP_RHS_MATRIX (rhs, rhs_m, rhs_cm, rhs_nr, rhs_nc);
 
   double b = ri.base ();
   double increment = ri.inc ();
 
@@ -1572,16 +1696,17 @@ tree_constant_rep::do_matrix_assignment 
     {
       double tmp = b + i * increment;
       int row = tree_to_mat_idx (tmp);
       REP_ELEM_ASSIGN (row, j, rhs_m.elem (i, 0),
 		       rhs_cm.elem (i, 0), rhs.is_real_type ());
     }
 }
 
+/* 10 */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs, Range& ri,
 					 idx_vector& jv)
 {
   REP_RHS_MATRIX (rhs, rhs_m, rhs_cm, rhs_nr, rhs_nc);
 
   double b = ri.base ();
   double increment = ri.inc ();
@@ -1594,16 +1719,17 @@ tree_constant_rep::do_matrix_assignment 
 	  double tmp = b + i * increment;
 	  int row = tree_to_mat_idx (tmp);
 	  REP_ELEM_ASSIGN (row, col, rhs_m.elem (i, j),
 			   rhs_m.elem (i, j), rhs.is_real_type ());
 	}
     }
 }
 
+/* 11 */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs, Range& ri,
 					 Range& rj)
 {
   double ib = ri.base ();
   double iinc = ri.inc ();
   double jb = rj.base ();
   double jinc = rj.inc ();
@@ -1619,16 +1745,17 @@ tree_constant_rep::do_matrix_assignment 
 	  double jtmp = jb + j * jinc;
 	  int col = tree_to_mat_idx (jtmp);
 	  REP_ELEM_ASSIGN (row, col, rhs_m.elem  (i, j),
 			   rhs_cm.elem (i, j), rhs.is_real_type ());
 	}
     }
 }
 
+/* 12 */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs, Range& ri,
 					 tree_constant_rep::constant_type mcj)
 {
   assert (mcj == magic_colon);
 
   if (rhs.is_zero_by_zero ())
     {
@@ -1649,16 +1776,17 @@ tree_constant_rep::do_matrix_assignment 
 	  int row = tree_to_mat_idx (itmp);
 	  for (int j = 0; j < nc; j++)
 	    REP_ELEM_ASSIGN (row, j, rhs_m.elem (i, j),
 			     rhs_cm.elem (i, j), rhs.is_real_type ());
 	}
     }
 }
 
+/* 13 */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs,
 					 tree_constant_rep::constant_type mci,
 					 int j)
 {
   assert (mci == magic_colon);
 
   int nr = rows ();
@@ -1679,16 +1807,17 @@ tree_constant_rep::do_matrix_assignment 
     {
       REP_ELEM_ASSIGN (0, j, rhs.double_value (),
 		       rhs.complex_value (), rhs.is_real_type ());
     }
   else
     panic_impossible ();
 }
 
+/* 14 */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs,
 					 tree_constant_rep::constant_type mci,
 					 idx_vector& jv)
 {
   assert (mci == magic_colon);
 
   if (rhs.is_zero_by_zero ())
@@ -1708,16 +1837,17 @@ tree_constant_rep::do_matrix_assignment 
 	      int col = jv.elem (j);
 	      REP_ELEM_ASSIGN (i, col, rhs_m.elem (i, j),
 			       rhs_cm.elem (i, j), rhs.is_real_type ());
 	    }
 	}
     }
 }
 
+/* 15 */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs,
 					 tree_constant_rep::constant_type mci,
 					 Range& rj)
 {
   assert (mci == magic_colon);
 
   if (rhs.is_zero_by_zero ())
@@ -1741,16 +1871,17 @@ tree_constant_rep::do_matrix_assignment 
 	    {
 	      REP_ELEM_ASSIGN (i, col, rhs_m.elem (i, j),
 			       rhs_cm.elem (i, j), rhs.is_real_type ());
 	    }
 	}
     }
 }
 
+/* 16 */
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs,
 					 tree_constant_rep::constant_type mci,
 					 tree_constant_rep::constant_type mcj)
 {
   assert (mci == magic_colon && mcj == magic_colon);
 
   switch (type_tag)
@@ -1802,16 +1933,22 @@ tree_constant_rep::do_matrix_assignment 
       break;
     case magic_colon:
     default:
       panic_impossible ();
       break;
     }
 }
 
+/*
+ * Functions for deleting rows or columns of a matrix.  These are used
+ * to handle statements like
+ *
+ *   M (i, j) = []
+ */
 void
 tree_constant_rep::delete_row (int idx)
 {
   if (type_tag == matrix_constant)
     {
       int nr = matrix->rows ();
       int nc = matrix->columns ();
       Matrix *new_matrix = new Matrix (nr-1, nc);
