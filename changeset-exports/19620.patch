# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1422047375 18000
#      Fri Jan 23 16:09:35 2015 -0500
# Branch gui-release
# Node ID a1d172bfcb2f9b9047bf1c95fb30d07e7eda2662
# Parent  844448ae53f3cd21653d6b56dfeb08a6ea9eba32
eliminate some unused variable and typedef warnings

* pr-output.cc, profiler.cc, ov-base-diag.cc, ov-perm.cc: Eliminate
unused variables and typedefs.

diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -3397,18 +3397,17 @@ PRINT_INT_ARRAY_INTERNAL (octave_uint64)
 
 void
 octave_print_internal (std::ostream&, const Cell&, bool, int, bool)
 {
   panic_impossible ();
 }
 
 void
-octave_print_internal (std::ostream&, const octave_value&,
-                       bool pr_as_read_syntax)
+octave_print_internal (std::ostream&, const octave_value&, bool)
 {
   panic_impossible ();
 }
 
 DEFUN (rats, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} rats (@var{x}, @var{len})\n\
 Convert @var{x} into a rational approximation represented as a string.\n\
diff --git a/libinterp/corefcn/profiler.cc b/libinterp/corefcn/profiler.cc
--- a/libinterp/corefcn/profiler.cc
+++ b/libinterp/corefcn/profiler.cc
@@ -79,17 +79,17 @@ profile_data_accumulator::tree_node::ent
   else
     retval = pos->second;
 
   ++retval->calls;
   return retval;
 }
 
 profile_data_accumulator::tree_node*
-profile_data_accumulator::tree_node::exit (octave_idx_type fcn)
+profile_data_accumulator::tree_node::exit (octave_idx_type /* fcn */)
 {
   // FIXME: These assert statements don't make sense if profile() is called
   //        from within a function hierarchy to begin with.  See bug #39587.
   //  assert (parent);
   //  assert (fcn_id == fcn);
 
   return parent;
 }
diff --git a/libinterp/octave-value/ov-base-diag.cc b/libinterp/octave-value/ov-base-diag.cc
--- a/libinterp/octave-value/ov-base-diag.cc
+++ b/libinterp/octave-value/ov-base-diag.cc
@@ -95,17 +95,16 @@ octave_base_diag<DMT,MT>::diag (octave_i
 
 
 template <class DMT, class MT>
 octave_value
 octave_base_diag<DMT, MT>::do_index_op (const octave_value_list& idx,
                                         bool resize_ok)
 {
   octave_value retval;
-  typedef typename DMT::element_type el_type;
 
   if (idx.length () == 2 && ! resize_ok)
     {
       idx_vector idx0 = idx(0).index_vector ();
       idx_vector idx1 = idx(1).index_vector ();
 
       if (idx0.is_scalar () && idx1.is_scalar ())
         {
diff --git a/libinterp/octave-value/ov-perm.cc b/libinterp/octave-value/ov-perm.cc
--- a/libinterp/octave-value/ov-perm.cc
+++ b/libinterp/octave-value/ov-perm.cc
@@ -255,34 +255,31 @@ octave_perm_matrix::convert_to_str_inter
                                              char type) const
 {
   return to_dense ().convert_to_str_internal (pad, force, type);
 }
 
 bool
 octave_perm_matrix::save_ascii (std::ostream& os)
 {
-  typedef octave_int<octave_idx_type> idx_int_type;
-
   os << "# size: " << matrix.rows () << "\n";
   os << "# orient: " << (matrix.is_col_perm () ? 'c' : 'r') << '\n';
 
   Array<octave_idx_type> pvec = matrix.pvec ();
   octave_idx_type n = pvec.length ();
   ColumnVector tmp (n);
   for (octave_idx_type i = 0; i < n; i++) tmp(i) = pvec(i) + 1;
   os << tmp;
 
   return true;
 }
 
 bool
 octave_perm_matrix::load_ascii (std::istream& is)
 {
-  typedef octave_int<octave_idx_type> idx_int_type;
   octave_idx_type n;
   bool success = true;
   char orient;
 
   if (extract_keyword (is, "size", n, true)
       && extract_keyword (is, "orient", orient, true))
     {
       bool colp = orient == 'c';
