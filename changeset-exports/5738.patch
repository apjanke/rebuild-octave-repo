# HG changeset patch
# User jwe
# Date 1144206248 0
#      Wed Apr 05 03:04:08 2006 +0000
# Node ID 126d7f1945eee386adaa592b46a75e3ebf91a1e9
# Parent  c70bfdf5b2c569156c369558194c97c0b20e23c8
[project @ 2006-04-05 03:04:08 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2006-04-04  David Bateman  <dbateman@free.fr>
+
+	* help.cc (Flookfor): Skip overloaded functions.  Lookup help text
+	of autoloaded function, not parent that contains the autoload.
+
 2006-04-03  David Bateman  <dbateman@free.fr>
 
 	* data.cc (Fresize): New function.
 	* oct-map.cc, ov-base-mat.cc, ov-base-sparse.cc, ov-base.cc,
 	ov-bool.cc, ov-complex.cc, ov-range.cc, ov-scalar.cc,
 	ov-str-mat.cc (resize): Add boolean fill argument.
 	* oct-map.h, ov-base-mat.h, ov-base-sparse.h, ov-base.h,
 	ov-bool.h, ov-complex.h, ov-intx.h, ov-range.h, ov-scalar.h,
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -1118,16 +1118,18 @@ function file, the full name of the file
 // This function attempts to find the first sentence of a help string, though
 // given that the user can create the help in an arbitrary format, your
 // success might vary.. it works much better with help string formated in
 // texinfo. Using regex might make this function much simpler.
 
 std::string 
 first_help_sentence (const std::string& h, bool short_sentence = true)
 {
+  std::string retval;
+
   size_t pos = 0;
 
   if (looks_like_texinfo (h, pos))
     { 
      // Get the parsed help string.
       pos = 0;
       OSSTREAM os;
       display_help_text (os, h);
@@ -1150,17 +1152,17 @@ first_help_sentence (const std::string& 
 	      pos = new_pos + 1;
 	      continue;
 	    }
 
 	  break;
 	}
 
       if (pos == NPOS)
-	return std::string ();
+	return retval;
 
       // At start of real text. Get first line with the sentence
       size_t new_pos = h2.find_first_of ('\n', pos);
       std::string line = h2.substr (pos, new_pos-pos);
       size_t dot_pos;
 
       while ((dot_pos = line.find_first_of ('.')) == NPOS)
 	{
@@ -1184,19 +1186,19 @@ first_help_sentence (const std::string& 
 		}
 	      break;
 	    }
 	  else
 	    line = line + " " + next;
 	}
 
       if (dot_pos == NPOS)
-	return line;
+	retval = line;
       else
-	return line.substr (0, dot_pos + 1);
+	retval = line.substr (0, dot_pos + 1);
     }
   else
     {
       std::string _upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
       std::string _lower = "abcdefghijklmnopqrstuvwxyz";
       std::string _alpha = _upper + _lower + "_";
       std::string _alphanum = _alpha + "1234567890";
       pos = 0;
@@ -1385,17 +1387,17 @@ first_help_sentence (const std::string& 
 	    }
 
 	  // Got the start of first sentence, break.
 	  pos = pos + line_pos;
 	  break;
 	}
 
       if (pos == NPOS)
-	return std::string ();
+	return retval;
 
       // At start of real text. Get first line with the sentence
       size_t new_pos = h.find_first_of ('\n', pos);
       std::string line = h.substr (pos, new_pos-pos);
       size_t dot_pos;
 
       while ((dot_pos = line.find_first_of ('.')) == NPOS)
 	{
@@ -1420,20 +1422,22 @@ first_help_sentence (const std::string& 
 		}
 	      break;
 	    }
 	  else
 	    line = line + " " + next;
 	}
 
       if (dot_pos == NPOS)
-	return line;
+	retval = line;
       else
-	return line.substr (0, dot_pos + 1);
+	retval = line.substr (0, dot_pos + 1);
     }
+
+  return retval;
 }
 
 static void
 print_lookfor (const std::string& name, const std::string& line)
 {
   const size_t deflen = 20;
 
   size_t max_width = command_editor::terminal_cols () - deflen;
@@ -1646,17 +1650,18 @@ to find related functions that are not p
 
       for (octave_idx_type i = 0; i < names.length (); i++)
 	{
 	  std::string name = names (i);
 
 	  OCTAVE_QUIT;
 
 	  symbol_record *sr = lookup_by_name (name, 0);
-	  if (sr && sr->is_defined ())
+	  if (sr && sr->is_defined ()
+	      && sr->type_name () != "overloaded function")
 	    {
 	      std::string h = sr->help ();
 
 	      if (name.find (txt) != NPOS)
 		{
 		  if (nargout)
 		    {
 		      ret[0].append (name);
@@ -1789,17 +1794,17 @@ to find related functions that are not p
 			  std::string aname = autoload_fcns (k);
 
 			  // Check if already in symbol table
 			  sr = fbi_sym_tab->lookup (aname);
 
 			  if (!sr)
 			    {
 			      // Must load to get help
-			      sr = lookup_by_name (name, false);
+			      sr = lookup_by_name (aname, false);
 
 			      std::string h;
 			      if (sr && sr->is_defined ())
 				h = sr->help ();
 
 			      if (aname.find (txt) != NPOS)
 				{
 				  if (nargout)
