# HG changeset patch
# User Rik <rik@octave.org>
# Date 1522349704 25200
#      Thu Mar 29 11:55:04 2018 -0700
# Branch stable
# Node ID 576ff914979c266f6bfbbd976374a83ed0ade3b8
# Parent  7c499f1426e5d7bde17cd1760a2fe665a455d60f
__expint__.cc: Fix heap-buffer-overflow (bug #53514).

* __expint__.cc: Move initialization of variables for Lentz's algorithm within
the body of the for loop so that if the loop is never executed, say for an
empty matrix, there is no attempt to access the first value of x.

diff --git a/libinterp/corefcn/__expint__.cc b/libinterp/corefcn/__expint__.cc
--- a/libinterp/corefcn/__expint__.cc
+++ b/libinterp/corefcn/__expint__.cc
@@ -58,43 +58,35 @@ Continued fraction expansion for the exp
       if (numel_x == 1)
         x = FloatComplexNDArray (output_dv, args(0).float_complex_value ());
       else
         x = args(0).float_complex_array_value ();
 
       // Initialize variables used in algorithm
       static const FloatComplex tiny = pow (2, -50);
       static const float eps = std::numeric_limits<float>::epsilon ();
-      FloatComplex cone (1.0, 0.0);
-      FloatComplex czero (0.0, 0.0);
-      FloatComplex xj = x(0);
-      FloatComplex y = tiny;
-      FloatComplex Cj = y;
-      FloatComplex Dj = czero;
-      FloatComplex alpha_j = cone;
-      FloatComplex beta_j = czero;
-      FloatComplex Deltaj = czero;
-      int j = 1;
-      int maxit = 100;
+      const FloatComplex cone (1.0, 0.0);
+      const FloatComplex czero (0.0, 0.0);
+      const int maxit = 100;
 
       // Loop over all elements
       for (octave_idx_type i = 0; i < numel_x; ++i)
         {
           // Catch Ctrl+C
           OCTAVE_QUIT;
 
           // Variable initialization for the current element
-          xj = x(i);
-          y = tiny;
-          Cj = y;
-          Dj = czero;
-          alpha_j = cone;
-          beta_j = xj;
-          Deltaj = czero;
-          j = 1;
+          FloatComplex xj = x(i);
+          FloatComplex y = tiny;
+          FloatComplex Cj = y;
+          FloatComplex Dj = czero;
+          FloatComplex alpha_j = cone;
+          FloatComplex beta_j = xj;
+          FloatComplex Deltaj = czero;
+          int j = 1;
 
           // Lentz's algorithm
           while ((std::abs (Deltaj - cone)  > eps) && (j < maxit))
             {
               Dj = beta_j + alpha_j * Dj;
               if (Dj == czero)
                 Dj = tiny;
               Cj = beta_j + alpha_j / Cj;
@@ -124,43 +116,35 @@ Continued fraction expansion for the exp
       if (numel_x == 1)
         x = ComplexNDArray (output_dv, args(0).complex_value ());
       else
         x = args(0).complex_array_value ();
 
       // Initialize variables used in algorithm
       static const Complex tiny = pow (2, -100);
       static const double eps = std::numeric_limits<double>::epsilon ();
-      Complex cone (1.0, 0.0);
-      Complex czero (0.0, 0.0);
-      Complex xj = x(0);
-      Complex y = tiny;
-      Complex Cj = y;
-      Complex Dj = czero;
-      Complex alpha_j = cone;
-      Complex beta_j = xj;
-      Complex Deltaj = czero;
-      int j = 1;
-      int maxit = 200;
+      const Complex cone (1.0, 0.0);
+      const Complex czero (0.0, 0.0);
+      const int maxit = 200;
 
       // Loop over all scenarios
       for (octave_idx_type i = 0; i < numel_x; ++i)
         {
           // Catch Ctrl+C
           OCTAVE_QUIT;
 
           // Variable initialization for the current element
-          xj = x(i);
-          y = tiny;
-          Cj = y;
-          Dj = czero;
-          alpha_j = cone;
-          beta_j = xj;
-          Deltaj = czero;
-          j = 1;
+          Complex xj = x(i);
+          Complex y = tiny;
+          Complex Cj = y;
+          Complex Dj = czero;
+          Complex alpha_j = cone;
+          Complex beta_j = xj;
+          Complex Deltaj = czero;
+          int j = 1;
 
           // Lentz's algorithm
           while ((std::abs (Deltaj - cone)  > eps) && (j < maxit))
             {
               Dj = beta_j + alpha_j * Dj;
               if (Dj == czero)
                 Dj = tiny;
               Cj = beta_j + alpha_j / Cj;
