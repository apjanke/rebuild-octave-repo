# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1236687533 -3600
#      Tue Mar 10 13:18:53 2009 +0100
# Node ID e31d47f2c9bb6c6aae0e238358803f47bcf0f5ff
# Parent  3e161cae0bc609665bec1b1436bc71d2ce72d617
fixes to row-reducing cummin/cummax

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2009-03-10  Jaroslav Hajek  <highegg@gmail.com>
+
+	* mx-inlines.cc (OP_CUMMINMAX_FCN2): r -> r0 where appropriate.
+
 2009-03-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* idx-vector.h (idx_vector::bloop): loop --> bloop.
 	(idx_vector::loop): New method.
 	* MArray.cc (MArray<T>::idx_add (cons idx_vector&, T))
 	(MArray<T>::idx_add (cons idx_vector&, const MArray<T>&)): New methods.
 	* MArray.h: Declare them.
 
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -730,25 +730,25 @@ F (const T *v, T *r, octave_idx_type m, 
   j++; v += m; r0 = r; r += m; \
   while (nan && j < n) \
     { \
       nan = false; \
       for (octave_idx_type i = 0; i < m; i++) \
         {  \
           if (xisnan (v[i])) \
             { r[i] = r0[i]; nan = true; } \
-          else if (xisnan (r[i]) || v[i] OP r[i]) \
+          else if (xisnan (r0[i]) || v[i] OP r0[i]) \
             r[i] = v[i]; \
         } \
       j++; v += m; r0 = r; r += m; \
     } \
   while (j < n) \
     { \
       for (octave_idx_type i = 0; i < m; i++) \
-        if (v[i] OP r[i]) \
+        if (v[i] OP r0[i]) \
           r[i] = v[i]; \
         else \
           r[i] = r0[i]; \
       j++; v += m; r0 = r; r += m; \
     } \
 } \
 template <class T> \
 inline void \
@@ -767,25 +767,25 @@ F (const T *v, T *r, octave_idx_type *ri
   j++; v += m; r0 = r; r += m; r0i = ri; ri += m;  \
   while (nan && j < n) \
     { \
       nan = false; \
       for (octave_idx_type i = 0; i < m; i++) \
         {  \
           if (xisnan (v[i])) \
             { r[i] = r0[i]; ri[i] = r0i[i]; nan = true; } \
-          else if (xisnan (r[i]) || v[i] OP r[i]) \
+          else if (xisnan (r0[i]) || v[i] OP r0[i]) \
             { r[i] = v[i]; ri[i] = j; }\
         } \
       j++; v += m; r0 = r; r += m; r0i = ri; ri += m;  \
     } \
   while (j < n) \
     { \
       for (octave_idx_type i = 0; i < m; i++) \
-        if (v[i] OP r[i]) \
+        if (v[i] OP r0[i]) \
           { r[i] = v[i]; ri[i] = j; } \
         else \
           { r[i] = r0[i]; ri[i] = r0i[i]; } \
       j++; v += m; r0 = r; r += m; r0i = ri; ri += m;  \
     } \
 }
 
 OP_CUMMINMAX_FCN2 (mx_inline_cummin, <)
diff --git a/src/DLD-FUNCTIONS/max.cc b/src/DLD-FUNCTIONS/max.cc
--- a/src/DLD-FUNCTIONS/max.cc
+++ b/src/DLD-FUNCTIONS/max.cc
@@ -857,28 +857,41 @@ maximum value(s). Thus,\n\
       arg1 = args(0); \
       break; \
  \
     default: \
       panic_impossible (); \
       break; \
     } \
  \
+  int dim; \
   dim_vector dv = arg1.dims (); \
   if (error_state) \
     { \
       gripe_wrong_type_arg (#FCN, arg1);  \
       return retval; \
     } \
  \
-  int dim = 0; \
-  while ((dim < dv.length ()) && (dv (dim) <= 1)) \
-    dim++; \
-  if (dim == dv.length ()) \
-    dim = 0; \
+  if (nargin == 2) \
+    { \
+      dim = arg2.nint_value () - 1;  \
+      if (dim < 0 || dim >= dv.length ()) \
+        { \
+	  error ("%s: invalid dimension", #FCN); \
+	  return retval; \
+	} \
+    } \
+  else \
+    { \
+      dim = 0; \
+      while ((dim < dv.length ()) && (dv (dim) <= 1)) \
+	dim++; \
+      if (dim == dv.length ()) \
+	dim = 0; \
+    } \
  \
   if (arg1.is_integer_type ()) \
     { \
       if (arg1.is_uint8_type ()) \
         MINMAX_INT_SBODY (FCN, uint8) \
       else if (arg1.is_uint16_type ()) \
         MINMAX_INT_SBODY (FCN, uint16) \
       else if (arg1.is_uint32_type ()) \
@@ -909,22 +922,22 @@ DEFUN_DLD (cummin, args, nargout,
 Return the cumulative minimum values. That means, the call\n\
 @example\n\
   [w, iw] = cummin (x, dim)\n\
 @end example\n\
 \n\
 @noindent\n\
 is equivalent to the following code:\n\
 @example\n\
-  colons(1:ndims (x)) = @{':'@};\n\
+  w = iw = zeros (size (x));\n\
+  idxw = idxx = repmat (@{':'@}, 1, ndims (x));\n\
   for i = 1:size (x, dim)\n\
-    idxw = idxx = colons;\n\
-    idxw@{i@} = i; idxx@{i@} = 1:i;\n\
+    idxw@{dim@} = i; idxx@{dim@} = 1:i;\n\
     [w(idxw@{:@}), iw(idxw@{:@})] =\
- min(x(idxx@{:@}), dim);\n\
+ min(x(idxx@{:@}), [], dim);\n\
   endfor\n\
 @end example\n\
 \n\
 @noindent\n\
 but computed in a much faster manner.\n\
 The behaviour if @var{dim} or @var{iw} is unspecified is analogous\n\
 to @code{min}.\n\
 @end deftypefn")
@@ -940,22 +953,22 @@ DEFUN_DLD (cummax, args, nargout,
 Return the cumulative maximum values. That means, the call\n\
 @example\n\
   [w, iw] = cummax (x, dim)\n\
 @end example\n\
 \n\
 @noindent\n\
 is equivalent to the following code:\n\
 @example\n\
-  colons(1:ndims (x)) = @{':'@};\n\
+  w = iw = zeros (size (x));\n\
+  idxw = idxx = repmat (@{':'@}, 1, ndims (x));\n\
   for i = 1:size (x, dim)\n\
-    idxw = idxx = colons;\n\
-    idxw@{i@} = i; idxx@{i@} = 1:i;\n\
+    idxw@{dim@} = i; idxx@{dim@} = 1:i;\n\
     [w(idxw@{:@}), iw(idxw@{:@})] =\
- max(x(idxx@{:@}), dim);\n\
+ max(x(idxx@{:@}), [], dim);\n\
   endfor\n\
 @end example\n\
 \n\
 @noindent\n\
 but computed in a much faster manner.\n\
 The behaviour if @var{dim} or @var{iw} is unspecified is analogous\n\
 to @code{max}.\n\
 @end deftypefn")
