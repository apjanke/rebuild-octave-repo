# HG changeset patch
# User Rik <rik@octave.org>
# Date 1356113918 28800
#      Fri Dec 21 10:18:38 2012 -0800
# Node ID abc9e5f3c6613fbd1017fb131f463efa01e39cd8
# Parent  bc7a130bbdfbb1169502f65ae92174296deb5279
Return correct value for ischar() predicate test on octave_java objects.

* libinterp/octave-value/ov-java.h(is_string):
Rename is_string() to is_java_string.  Leave only prototype in .h file.

* libinterp/octave-value/ov-java.cc(is_java_string):
Move code for is_string from ov-java.h to is_java_string in ov-java.cc.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -616,16 +616,30 @@ jstring_to_string (JNIEnv* jni_env, jobj
           if (jni_env->IsInstanceOf (obj, cls))
             retval = jstring_to_string (jni_env, reinterpret_cast<jstring> (obj));
         }
     }
 
   return retval;
 }
 
+bool
+octave_java::is_java_string (void) const
+{
+  JNIEnv *current_env = thread_jni_env ();
+
+  if (current_env && java_object)
+    {
+      jclass_ref cls (current_env, current_env->FindClass ("java/lang/String"));
+      return current_env->IsInstanceOf (java_object, cls);
+    }
+
+  return false;
+}
+
 static octave_value
 check_exception (JNIEnv* jni_env)
 {
   octave_value retval;
 
   jthrowable_ref ex (jni_env, jni_env->ExceptionOccurred ());
 
   if (ex)
diff --git a/libinterp/octave-value/ov-java.h b/libinterp/octave-value/ov-java.h
--- a/libinterp/octave-value/ov-java.h
+++ b/libinterp/octave-value/ov-java.h
@@ -178,28 +178,17 @@ public:
   }
 
   octave_value subsasgn (const std::string& type,
                          const std::list<octave_value_list>& idx,
                          const octave_value& rhs);
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
-  bool is_string (void) const
-  {
-    JNIEnv *current_env = thread_jni_env ();
-
-    if (current_env && java_object)
-      {
-        jclass_ref cls (current_env, current_env->FindClass ("java/lang/String"));
-        return current_env->IsInstanceOf (java_object, cls);
-      }
-
-    return false;
-  }
+  bool is_java_string (void) const;
 
   static JNIEnv* thread_jni_env (void);
 
   octave_value do_javaMethod (JNIEnv* jni_env, const std::string& name,
                               const octave_value_list& args);
 
   octave_value
   do_javaMethod (const std::string& name, const octave_value_list& args)
