# HG changeset patch
# User Olaf Till <olaf.till@uni-jena.de>
# Date 1307025073 -7200
#      Thu Jun 02 16:31:13 2011 +0200
# Node ID 65b7ce254ba3057c1dff0f550b27e8cf783d3fa4
# Parent  f66dacbeb7be6db220eb7d57a69223da791c9140
Fix loading of function handles saved in binary format. Bug #33456.

* src/ov-fcn-handle.cc (load_binary): Replace is.get() with is.read().

diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -548,17 +548,20 @@ octave_fcn_handle::load_binary (std::ist
 
   int32_t tmp;
   if (! is.read (reinterpret_cast<char *> (&tmp), 4))
     return false;
   if (swap)
     swap_bytes<4> (&tmp);
 
   OCTAVE_LOCAL_BUFFER (char, ctmp1, tmp+1);
-  is.get (ctmp1, tmp+1, 0);
+  // is.get (ctmp1, tmp+1, 0); caused is.eof () to be true though
+  // effectively not reading over file end
+  is.read (ctmp1, tmp);
+  ctmp1[tmp] = 0;
   nm = std::string (ctmp1);
 
   if (! is)
     return false;
 
   size_t anl = anonymous.length ();
 
   if (nm.length() >= anl && nm.substr (0, anl) == anonymous)
@@ -573,17 +576,20 @@ octave_fcn_handle::load_binary (std::ist
         }
 
       if (! is.read (reinterpret_cast<char *> (&tmp), 4))
         return false;
       if (swap)
         swap_bytes<4> (&tmp);
 
       OCTAVE_LOCAL_BUFFER (char, ctmp2, tmp+1);
-      is.get (ctmp2, tmp+1, 0);
+      // is.get (ctmp2, tmp+1, 0); caused is.eof () to be true though
+      // effectively not reading over file end
+      is.read (ctmp2, tmp);
+      ctmp2[tmp] = 0;
 
       unwind_protect_safe frame;
 
       // Set up temporary scope to use for evaluating the text that
       // defines the anonymous function.
 
       symbol_table::scope_id local_scope = symbol_table::alloc_scope ();
       frame.add_fcn (symbol_table::erase_scope, local_scope);
@@ -653,17 +659,17 @@ octave_fcn_handle::load_binary (std::ist
           octaveroot = nm.substr (pos1 + 1, pos2 - pos1 - 1);
           fpath = nm.substr (pos2 + 1);
           nm = nm.substr (0, pos1);
         }
 
       success = set_fcn (octaveroot, fpath);
      }
 
- return success;
+  return success;
 }
 
 #if defined (HAVE_HDF5)
 bool
 octave_fcn_handle::save_hdf5 (hid_t loc_id, const char *name,
                               bool save_as_floats)
 {
   bool retval = true;
