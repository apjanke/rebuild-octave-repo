# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1285657709 -7200
#      Tue Sep 28 09:08:29 2010 +0200
# Node ID 4ab04ea74b08970e950d6c74772b685edd67433d
# Parent  7d0d28aff7a925e06775a2cc9209738234a4eb59
make an internal function for try simulation

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2010-09-28  Jaroslav Hajek  <highegg@gmail.com>
+
+	* error.cc (interpreter_try): New function.
+	* error.h: Declare it.
+	* ov-fcn-handle.cc (octave_fcn_binder::maybe_binder): Use it here.
+	* variables.cc (safe_symbol_lookup): Also here.
+
 2010-09-27  John W. Eaton  <jwe@octave.org>
 
 	* gl-render.cc (opengl_renderer::draw_axes): Reverse order in
 	which child objects are processed.
 
 2010-09-26  Rik <octave@nomad.inbox5.com>
 
 	* DLD-FUNCTIONS/regexp.cc (regexp, regexprep, regexpi): Update
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -1816,8 +1816,23 @@ last_warning_message (void)
   return Vlast_warning_message;
 }
 
 std::string
 last_warning_id (void)
 {
   return Vlast_warning_id;
 }
+
+void
+interpreter_try (unwind_protect& frame)
+{
+  frame.protect_var (error_state);
+  frame.protect_var (buffer_error_messages);
+  frame.protect_var (Vdebug_on_error);
+  frame.protect_var (Vdebug_on_warning);
+
+  buffer_error_messages++;
+  Vdebug_on_error = false;
+  Vdebug_on_warning = false;
+}
+
+
diff --git a/src/error.h b/src/error.h
--- a/src/error.h
+++ b/src/error.h
@@ -23,16 +23,17 @@ along with Octave; see the file COPYING.
 
 #if !defined (octave_error_h)
 #define octave_error_h 1
 
 #include <cstdarg>
 #include <string>
 
 class octave_value_list;
+class unwind_protect;
 
 #define panic_impossible() \
   panic ("impossible state reached in file `%s' at line %d", \
          __FILE__, __LINE__)
 
 extern OCTINTERP_API void reset_error_handler (void);
 
 extern OCTINTERP_API int warning_enabled (const std::string& id);
@@ -132,9 +133,11 @@ extern OCTINTERP_API bool discard_error_
 extern OCTINTERP_API bool discard_warning_messages;
 
 // Helper functions to pass last error and warning messages and ids
 extern OCTINTERP_API std::string last_error_message (void);
 extern OCTINTERP_API std::string last_error_id (void);
 extern OCTINTERP_API std::string last_warning_message (void);
 extern OCTINTERP_API std::string last_warning_id (void);
 
+extern OCTINTERP_API void interpreter_try (unwind_protect&);
+
 #endif
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -1874,27 +1874,18 @@ octave_fcn_binder::maybe_binder (const o
                       std::string head_name = head_id->name ();
                       // Function handles can't handle legacy dispatch, so
                       // we make sure it's not defined.
                       if (symbol_table::get_dispatch (head_name).size () > 0)
                          bad = true;
                       else
                         {
                           // Simulate try/catch.
-                          // FIXME: there should be a method for that.
                           unwind_protect frame;
-
-                          frame.protect_var (error_state);
-                          frame.protect_var (buffer_error_messages);
-                          frame.protect_var (Vdebug_on_error);
-                          frame.protect_var (Vdebug_on_warning);
-
-                          buffer_error_messages++;
-                          Vdebug_on_error = false;
-                          Vdebug_on_warning = false;
+                          interpreter_try (frame);
 
                           root_val = make_fcn_handle (head_name);
                           if (error_state)
                              bad = true;
                         }
                     }
                 }
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -380,24 +380,17 @@ This function has been deprecated.  Use 
 }
 
 static octave_value
 safe_symbol_lookup (const std::string& symbol_name)
 {
   octave_value retval;
 
   unwind_protect frame;
-  
-  frame.protect_var (buffer_error_messages);
-  frame.protect_var (Vdebug_on_error);
-  frame.protect_var (Vdebug_on_warning);
-
-  buffer_error_messages++;
-  Vdebug_on_error = false;
-  Vdebug_on_warning = false;
+  interpreter_try (frame);
 
   retval = symbol_table::find (symbol_name);
 
   error_state = 0;
 
   return retval;
 }
 
