# HG changeset patch
# User Markus Mützel <markus.muetzel@gmx.de>
# Date 1527452004 -7200
#      Sun May 27 22:13:24 2018 +0200
# Node ID d4bc8590b5cfc07211bce13823f33fa789d971cb
# Parent  8fae933e7228506d6f4492ba451a96297d7a10e0
Make "is*" string functions Unicode aware.

* ov-ch-mat.cc (map): Use UTF-8 aware functions for "is*" string functions.

* mappers.cc: Add tests for "is*" string functions.

* unistr-wrappers.[c/h]: Add wrapper for "u8_strmbtouc".

* unictype-wrappers.[c/h]: Add wrappers for UTF-8 aware C-like "is*" functions.

* module.mk: Add new files.

* bootstrap.conf: Add new modules.

diff --git a/bootstrap.conf b/bootstrap.conf
--- a/bootstrap.conf
+++ b/bootstrap.conf
@@ -90,18 +90,31 @@ gnulib_modules="
   sys_wait
   tempname
   tmpfile
   uname
   unicase/u8-tolower
   unicase/u8-toupper
   uniconv/u8-conv-from-enc
   uniconv/u8-conv-to-enc
+  unictype/ctype-alnum
+  unictype/ctype-alpha
+  unictype/ctype-blank
+  unictype/ctype-cntrl
+  unictype/ctype-digit
+  unictype/ctype-graph
+  unictype/ctype-lower
+  unictype/ctype-print
+  unictype/ctype-punct
+  unictype/ctype-space
+  unictype/ctype-upper
+  unictype/ctype-xdigit
   unistd
   unistr/u8-strmblen
+  unistr/u8-strmbtouc
   unistr/u8-to-u32
   unlink
   unsetenv
   vasprintf
   waitpid
 "
 
 # Additional gnulib files and scripts used by Octave's buildsystem.
diff --git a/libinterp/corefcn/mappers.cc b/libinterp/corefcn/mappers.cc
--- a/libinterp/corefcn/mappers.cc
+++ b/libinterp/corefcn/mappers.cc
@@ -1209,16 +1209,17 @@ This is equivalent to (@code{isalpha (@v
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
 %! result(double ("A":"Z") + 1) = true;
 %! result(double ("0":"9") + 1) = true;
 %! result(double ("a":"z") + 1) = true;
 %! assert (isalnum (charset), result);
+%!assert (isalnum(["Ä8Aa?"; "(Uß ;"]), logical ([1 1 1 1 1 0; 0 1 1 1 0 0]));
 
 %!error isalnum ()
 %!error isalnum (1, 2)
 */
 
 DEFUNX ("isalpha", Fisalpha, args, ,
         doc: /* -*- texinfo -*-
 @deftypefn {} {} isalpha (@var{s})
@@ -1237,16 +1238,17 @@ This is equivalent to (@code{islower (@v
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
 %! result(double ("A":"Z") + 1) = true;
 %! result(double ("a":"z") + 1) = true;
 %! assert (isalpha (charset), result);
+%!assert (isalpha("Ä8Aa(Uß ;"), logical ([1 1 0 1 1 0 1 1 1 0 0]));
 
 %!error isalpha ()
 %!error isalpha (1, 2)
 */
 
 DEFUNX ("isascii", Fisascii, args, ,
         doc: /* -*- texinfo -*-
 @deftypefn {} {} isascii (@var{s})
@@ -1312,16 +1314,17 @@ decimal digits (0-9) and false where the
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
 %! result(double ("0":"9") + 1) = true;
 %! assert (isdigit (charset), result);
+%!assert (isdigit("Ä8Aa(Uß ;"), logical ([0 0 1 0 0 0 0 0 0 0 0]));
 
 %!error isdigit ()
 %!error isdigit (1, 2)
 */
 
 DEFUN (isinf, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} isinf (@var{x})
@@ -1378,16 +1381,17 @@ not.
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
 %! result(34:127) = true;
 %! assert (isgraph (charset), result);
+%!assert (isgraph("Ä8Aa(Uß ;"), logical ([1 1 1 1 1 1 1 1 1 0 1]));
 
 %!error isgraph ()
 %!error isgraph (1, 2)
 */
 
 DEFUNX ("islower", Fislower, args, ,
         doc: /* -*- texinfo -*-
 @deftypefn {} {} islower (@var{s})
@@ -1403,16 +1407,17 @@ lowercase letters and false where they a
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
 %! result(double ("a":"z") + 1) = true;
 %! assert (islower (charset), result);
+%!assert (islower("Ä8Aa(Uß ;"), logical ([0 0 0 0 1 0 0 1 1 0 0]));
 
 %!error islower ()
 %!error islower (1, 2)
 */
 
 DEFUN (isna, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} isna (@var{x})
@@ -1509,16 +1514,17 @@ are not.
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
 %! result(33:127) = true;
 %! assert (isprint (charset), result);
+%!assert (isprint("Ä8Aa(Uß ;"), logical ([1 1 1 1 1 1 1 1 1 1 1]));
 
 %!error isprint ()
 %!error isprint (1, 2)
 */
 
 DEFUNX ("ispunct", Fispunct, args, ,
         doc: /* -*- texinfo -*-
 @deftypefn {} {} ispunct (@var{s})
@@ -1537,16 +1543,17 @@ punctuation characters and false where t
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
 %! result(34:48) = true;
 %! result(59:65) = true;
 %! result(92:97) = true;
 %! result(124:127) = true;
 %! assert (ispunct (charset), result);
+%!assert (ispunct("Ä8Aa(Uß ;"), logical ([0 0 0 0 0 1 0 0 0 0 1]));
 
 %!error ispunct ()
 %!error ispunct (1, 2)
 */
 
 DEFUNX ("isspace", Fisspace, args, ,
         doc: /* -*- texinfo -*-
 @deftypefn {} {} isspace (@var{s})
@@ -1563,16 +1570,17 @@ vertical tab) and false where they are n
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
 %! result(double (" \f\n\r\t\v") + 1) = true;
 %! assert (isspace (charset), result);
+%!assert (isspace("Ä8Aa(Uß ;"), logical ([0 0 0 0 0 0 0 0 0 1 0]));
 
 %!error isspace ()
 %!error isspace (1, 2)
 */
 
 DEFUNX ("isupper", Fisupper, args, ,
         doc: /* -*- texinfo -*-
 @deftypefn {} {} isupper (@var{s})
@@ -1588,16 +1596,17 @@ uppercase letters and false where they a
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
 %! result(double ("A":"Z") + 1) = true;
 %! assert (isupper (charset), result);
+%!assert (isupper("Ä8Aa(Uß ;"), logical ([1 1 0 1 0 0 1 0 0 0 0]));
 
 %!error isupper ()
 %!error isupper (1, 2)
 */
 
 DEFUNX ("isxdigit", Fisxdigit, args, ,
         doc: /* -*- texinfo -*-
 @deftypefn {} {} isxdigit (@var{s})
@@ -1615,16 +1624,17 @@ hexadecimal digits (0-9 and @nospell{a-f
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
 %! result(double ("A":"F") + 1) = true;
 %! result(double ("0":"9") + 1) = true;
 %! result(double ("a":"f") + 1) = true;
 %! assert (isxdigit (charset), result);
+%!assert (isxdigit("Ä8Aa(Uß ;"), logical ([0 0 1 1 1 0 0 0 0 0 0]));
 
 %!error isxdigit ()
 %!error isxdigit (1, 2)
 */
 
 DEFUN (lgamma, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} gammaln (@var{x})
diff --git a/libinterp/octave-value/ov-ch-mat.cc b/libinterp/octave-value/ov-ch-mat.cc
--- a/libinterp/octave-value/ov-ch-mat.cc
+++ b/libinterp/octave-value/ov-ch-mat.cc
@@ -37,16 +37,18 @@ along with Octave; see the file COPYING.
 #include "uint8NDArray.h"
 #include "uint16NDArray.h"
 #include "uint32NDArray.h"
 #include "uint64NDArray.h"
 
 #include "lo-ieee.h"
 #include "mx-base.h"
 #include "unicase-wrappers.h"
+#include "unictype-wrappers.h"
+#include "unistr-wrappers.h"
 
 #include "mxarray.h"
 #include "ov-base.h"
 #include "ov-base-mat.h"
 #include "ov-base-mat.cc"
 #include "ov-ch-mat.h"
 #include "errwarn.h"
 #include "pr-output.h"
@@ -254,42 +256,73 @@ octave_char_matrix::map (unary_mapper_t 
   octave_value retval;
 
   switch (umap)
     {
 #define STRING_MAPPER(UMAP,FCN,TYPE)                                  \
     case umap_ ## UMAP:                                               \
       return octave_value (matrix.map<TYPE, int (&) (int)> (FCN))
 
-    STRING_MAPPER (xisalnum, std::isalnum, bool);
-    STRING_MAPPER (xisalpha, std::isalpha, bool);
     STRING_MAPPER (xisascii, xisascii, bool);
-    STRING_MAPPER (xiscntrl, std::iscntrl, bool);
-    STRING_MAPPER (xisdigit, std::isdigit, bool);
-    STRING_MAPPER (xisgraph, std::isgraph, bool);
-    STRING_MAPPER (xislower, std::islower, bool);
-    STRING_MAPPER (xisprint, std::isprint, bool);
-    STRING_MAPPER (xispunct, std::ispunct, bool);
-    STRING_MAPPER (xisspace, std::isspace, bool);
-    STRING_MAPPER (xisupper, std::isupper, bool);
-    STRING_MAPPER (xisxdigit, std::isxdigit, bool);
+
+#define STRING_U8_MAPPER(UMAP,FCN)                                             \
+    case umap_ ## UMAP:                                                        \
+      {                                                                        \
+        charNDArray in_m = matrix;                                             \
+        Array<octave_idx_type> p (dim_vector (matrix.ndims (), 1));            \
+        if (matrix.ndims () > 1)                                               \
+          {                                                                    \
+            for (octave_idx_type i=0; i < matrix.ndims (); i++)                \
+              p(i) = i;                                                        \
+            p(0) = 1;                                                          \
+            p(1) = 0;                                                          \
+            in_m = matrix.permute (p);                                         \
+          }                                                                    \
+        boolNDArray b_array = boolNDArray (in_m.dims ());                      \
+        const uint8_t *in = reinterpret_cast<const uint8_t *> (in_m.data ());  \
+        uint32_t uc;                                                           \
+        for (octave_idx_type i = 0; i < in_m.numel (); )                       \
+        {                                                                      \
+          int mblen = octave_u8_strmbtouc_wrapper (&uc, in + i);               \
+          if (mblen < 1)                                                       \
+            mblen = 1;                                                         \
+          bool is_upper = FCN (uc);                                            \
+          for (int j = 0; j < mblen; j++)                                      \
+            b_array(i+j) = is_upper;                                           \
+          i += mblen;                                                          \
+        }                                                                      \
+        return octave_value ((matrix.ndims () > 1) ? b_array.permute (p, true) \
+                                                   : b_array);                 \
+      }
+
+    STRING_U8_MAPPER (xisalnum, octave_uc_is_alnum_wrapper);
+    STRING_U8_MAPPER (xisalpha, octave_uc_is_alpha_wrapper);
+    STRING_U8_MAPPER (xiscntrl, octave_uc_is_cntrl_wrapper);
+    STRING_U8_MAPPER (xisdigit, octave_uc_is_digit_wrapper);
+    STRING_U8_MAPPER (xisgraph, octave_uc_is_graph_wrapper);
+    STRING_U8_MAPPER (xislower, octave_uc_is_lower_wrapper);
+    STRING_U8_MAPPER (xisprint, octave_uc_is_print_wrapper);
+    STRING_U8_MAPPER (xispunct, octave_uc_is_punct_wrapper);
+    STRING_U8_MAPPER (xisspace, octave_uc_is_space_wrapper);
+    STRING_U8_MAPPER (xisupper, octave_uc_is_upper_wrapper);
+    STRING_U8_MAPPER (xisxdigit, octave_uc_is_xdigit_wrapper);
 
 #define STRING_U8_FCN(UMAP,U8_FCN,STD_FCN)                                     \
     case umap_ ## UMAP:                                                        \
       {                                                                        \
         charNDArray in_m = matrix;                                             \
         Array<octave_idx_type> p (dim_vector (matrix.ndims (), 1));            \
         if (matrix.ndims () > 1)                                               \
-        {                                                                      \
-          for (octave_idx_type i=0; i < matrix.ndims (); i++)                  \
-            p(i) = i;                                                          \
-          p(0) = 1;                                                            \
-          p(1) = 0;                                                            \
-          in_m = matrix.permute (p);                                           \
-        }                                                                      \
+          {                                                                    \
+            for (octave_idx_type i=0; i < matrix.ndims (); i++)                \
+              p(i) = i;                                                        \
+            p(0) = 1;                                                          \
+            p(1) = 0;                                                          \
+            in_m = matrix.permute (p);                                         \
+          }                                                                    \
         size_t output_length = in_m.numel ();                                  \
         charNDArray ch_array = charNDArray (in_m.dims ());                     \
         const uint8_t *in = reinterpret_cast<const uint8_t *> (in_m.data ());  \
         uint8_t *buf = reinterpret_cast<uint8_t *> (ch_array.fortran_vec ());  \
         U8_FCN (in, matrix.numel (), nullptr, buf, &output_length);            \
         if (output_length != static_cast<size_t> (matrix.numel ()))            \
           {                                                                    \
             warning_with_id ("octave:multi_byte_char_length",                  \
diff --git a/liboctave/wrappers/module.mk b/liboctave/wrappers/module.mk
--- a/liboctave/wrappers/module.mk
+++ b/liboctave/wrappers/module.mk
@@ -26,16 +26,17 @@ NOINSTALL_WRAPPERS_INC = \
   %reldir%/strftime-wrapper.h \
   %reldir%/strmode-wrapper.h \
   %reldir%/strptime-wrapper.h \
   %reldir%/time-wrappers.h \
   %reldir%/tmpfile-wrapper.h \
   %reldir%/uname-wrapper.h \
   %reldir%/unicase-wrappers.h \
   %reldir%/uniconv-wrappers.h \
+  %reldir%/unictype-wrappers.h \
   %reldir%/unistd-wrappers.h \
   %reldir%/unistr-wrappers.h \
   %reldir%/unsetenv-wrapper.h \
   %reldir%/vasprintf-wrapper.h \
   %reldir%/wait-for-input.h \
   %reldir%/wait-wrappers.h
 
 WRAPPERS_SRC = \
@@ -66,16 +67,17 @@ WRAPPERS_SRC = \
   %reldir%/strftime-wrapper.c \
   %reldir%/strmode-wrapper.c \
   %reldir%/strptime-wrapper.c \
   %reldir%/time-wrappers.c \
   %reldir%/tmpfile-wrapper.c \
   %reldir%/uname-wrapper.c \
   %reldir%/unicase-wrappers.c \
   %reldir%/uniconv-wrappers.c \
+  %reldir%/unictype-wrappers.c \
   %reldir%/unistd-wrappers.c \
   %reldir%/unistr-wrappers.c \
   %reldir%/unsetenv-wrapper.c \
   %reldir%/vasprintf-wrapper.c \
   %reldir%/wait-for-input.c \
   %reldir%/wait-wrappers.c \
   $(NOINSTALL_WRAPPERS_INC)
 
diff --git a/liboctave/wrappers/unictype-wrappers.c b/liboctave/wrappers/unictype-wrappers.c
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/unictype-wrappers.c
@@ -0,0 +1,101 @@
+/*
+
+Copyright (C) 2018 Markus Mützel
+
+This file is part of Octave.
+
+Octave is free software: you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+Octave is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<https://www.gnu.org/licenses/>.
+
+*/
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include "unictype.h"
+
+#include "unictype-wrappers.h"
+
+bool
+octave_uc_is_alnum_wrapper (ucs4_t uc)
+{
+  return uc_is_alnum (uc);
+}
+
+bool
+octave_uc_is_alpha_wrapper (ucs4_t uc)
+{
+  return uc_is_alpha (uc);
+}
+
+bool
+octave_uc_is_blank_wrapper (ucs4_t uc)
+{
+  return uc_is_blank (uc);
+}
+
+bool
+octave_uc_is_cntrl_wrapper (ucs4_t uc)
+{
+  return uc_is_cntrl (uc);
+}
+
+bool
+octave_uc_is_digit_wrapper (ucs4_t uc)
+{
+  return uc_is_digit (uc);
+}
+
+bool
+octave_uc_is_graph_wrapper (ucs4_t uc)
+{
+  return uc_is_graph (uc);
+}
+
+bool
+octave_uc_is_lower_wrapper (ucs4_t uc)
+{
+  return uc_is_lower (uc);
+}
+
+bool
+octave_uc_is_print_wrapper (ucs4_t uc)
+{
+  return uc_is_print (uc);
+}
+
+bool
+octave_uc_is_punct_wrapper (ucs4_t uc)
+{
+  return uc_is_punct (uc);
+}
+
+bool
+octave_uc_is_space_wrapper (ucs4_t uc)
+{
+  return uc_is_space (uc);
+}
+
+bool
+octave_uc_is_upper_wrapper (ucs4_t uc)
+{
+  return uc_is_upper (uc);
+}
+
+bool
+octave_uc_is_xdigit_wrapper (ucs4_t uc)
+{
+  return uc_is_xdigit (uc);
+}
diff --git a/liboctave/wrappers/unictype-wrappers.h b/liboctave/wrappers/unictype-wrappers.h
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/unictype-wrappers.h
@@ -0,0 +1,72 @@
+/*
+
+Copyright (C) 2018 Markus Mützel
+
+This file is part of Octave.
+
+Octave is free software: you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+Octave is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<https://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_unictype_wrappers_h)
+#define octave_unictype_wrappers_h 1
+
+typedef uint32_t ucs4_t;
+
+#if defined __cplusplus
+extern "C" {
+#endif
+
+extern bool
+octave_uc_is_alnum_wrapper (ucs4_t uc);
+
+extern bool
+octave_uc_is_alpha_wrapper (ucs4_t uc);
+
+extern bool
+octave_uc_is_blank_wrapper (ucs4_t uc);
+
+extern bool
+octave_uc_is_cntrl_wrapper (ucs4_t uc);
+
+extern bool
+octave_uc_is_digit_wrapper (ucs4_t uc);
+
+extern bool
+octave_uc_is_graph_wrapper (ucs4_t uc);
+
+extern bool
+octave_uc_is_lower_wrapper (ucs4_t uc);
+
+extern bool
+octave_uc_is_print_wrapper (ucs4_t uc);
+
+extern bool
+octave_uc_is_punct_wrapper (ucs4_t uc);
+
+extern bool
+octave_uc_is_space_wrapper (ucs4_t uc);
+
+extern bool
+octave_uc_is_upper_wrapper (ucs4_t uc);
+
+extern bool
+octave_uc_is_xdigit_wrapper (ucs4_t uc);
+
+#if defined __cplusplus
+}
+#endif
+
+#endif
diff --git a/liboctave/wrappers/unistr-wrappers.c b/liboctave/wrappers/unistr-wrappers.c
--- a/liboctave/wrappers/unistr-wrappers.c
+++ b/liboctave/wrappers/unistr-wrappers.c
@@ -29,14 +29,20 @@ along with Octave; see the file COPYING.
 #include "unistr-wrappers.h"
 
 int
 octave_u8_strmblen_wrapper (const uint8_t *src)
 {
   return u8_strmblen (src);
 }
 
+int
+octave_u8_strmbtouc_wrapper (uint32_t *puc, const uint8_t *src)
+{
+  return u8_strmbtouc (puc, src);
+}
+
 uint32_t *
 octave_u8_to_u32_wrapper (const uint8_t *src, size_t src_len,
                           uint32_t *result_buf, size_t *lengthp)
 {
   return u8_to_u32 (src, src_len, result_buf, lengthp);
 }
diff --git a/liboctave/wrappers/unistr-wrappers.h b/liboctave/wrappers/unistr-wrappers.h
--- a/liboctave/wrappers/unistr-wrappers.h
+++ b/liboctave/wrappers/unistr-wrappers.h
@@ -25,16 +25,19 @@ along with Octave; see the file COPYING.
 
 #if defined __cplusplus
 extern "C" {
 #endif
 
 extern int
 octave_u8_strmblen_wrapper (const uint8_t *src);
 
+extern int
+octave_u8_strmbtouc_wrapper (uint32_t *puc, const uint8_t *src);
+
 extern uint32_t *
 octave_u8_to_u32_wrapper (const uint8_t *src, size_t src_len,
                           uint32_t *result_buf, size_t *lengthp);
 
 #if defined __cplusplus
 }
 #endif
 
