# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1361897441 18000
#      Tue Feb 26 11:50:41 2013 -0500
# Node ID f8e463523229de4389c10ace1423b9cff096602c
# Parent  771186909285aa8d216ab1a6b2e6e72bb3c2c026
move more static lexer helper functions to lexical_feedback class

* lex.h, lex.ll (display_token, lexer_debug): Declare as members of
lexical_feedback class.  Change all callers.
(display_state): New argument, STATE.
(lexer_debug): Pass YYSTATE to display_state.

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -271,16 +271,20 @@ public:
   void gripe_matlab_incompatible (const std::string& msg);
 
   void maybe_gripe_matlab_incompatible_comment (char c);
 
   void gripe_matlab_incompatible_continuation (void);
 
   void gripe_matlab_incompatible_operator (const std::string& op);
 
+  void display_token (int tok);
+
+  void lexer_debug (const char *pattern, const char *text);
+
   // TRUE means that we should convert spaces to a comma inside a
   // matrix definition.
   bool convert_spaces_to_comma;
 
   // GAG.  Stupid kludge so that [[1,2][3,4]] will work.
   bool do_comma_insert;
 
   // TRUE means we are at the beginning of a statement, where a
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -121,21 +121,21 @@ along with Octave; see the file COPYING.
     } \
   while (0)
 
 #define DISPLAY_TOK_AND_RETURN(tok) \
   do \
     { \
       int tok_val = tok; \
       if (Vdisplay_tokens) \
-        display_token (tok_val); \
+        curr_lexer->display_token (tok_val); \
       if (lexer_debug_flag) \
         { \
           std::cerr << "R: "; \
-          display_token (tok_val); \
+          curr_lexer->display_token (tok_val); \
           std::cerr << std::endl;  \
         } \
       return tok_val; \
     } \
   while (0)
 
 #define COUNT_TOK_AND_RETURN(tok) \
   do \
@@ -202,17 +202,17 @@ along with Octave; see the file COPYING.
       BIN_OP_RETURN (tok, convert, bos); \
     } \
   while (0)
 
 #define LEXER_DEBUG(pattern) \
   do \
     { \
       if (lexer_debug_flag) \
-        lexer_debug (pattern, yytext); \
+        curr_lexer->lexer_debug (pattern, yytext); \
     } \
   while (0)
 
 // The state of the lexer.
 lexical_feedback *curr_lexer = 0;
 
 static bool Vdisplay_tokens = false;
 
@@ -221,18 +221,16 @@ static unsigned int Vtoken_count = 0;
 // Internal variable for lexer debugging state.
 static bool lexer_debug_flag = false;
 
 // Forward declarations for functions defined at the bottom of this
 // file that are needed inside the lexer actions.
 
 static std::string strip_trailing_whitespace (char *s);
 static int octave_read (char *buf, unsigned int max_size);
-static void display_token (int tok);
-static void lexer_debug (const char *pattern, const char *text);
 
 %}
 
 D       [0-9]
 S       [ \t]
 NL      ((\n)|(\r)|(\r\n))
 SNL     ({S}|{NL})
 EL      (\.\.\.)
@@ -1420,18 +1418,18 @@ octave_read (char *buf, unsigned max_siz
 
       if (! eof)
         YY_FATAL_ERROR ("octave_read () in flex scanner failed");
     }
 
   return status;
 }
 
-static void
-display_token (int tok)
+void
+lexical_feedback::display_token (int tok)
 {
   switch (tok)
     {
     case '=': std::cerr << "'='\n"; break;
     case ':': std::cerr << "':'\n"; break;
     case '-': std::cerr << "'-'\n"; break;
     case '+': std::cerr << "'+'\n"; break;
     case '*': std::cerr << "'*'\n"; break;
@@ -1547,21 +1545,21 @@ display_token (int tok)
         else
           std::cerr << "UNKNOWN(" << tok << ")\n";
       }
       break;
     }
 }
 
 static void
-display_state (void)
+display_state (int state)
 {
   std::cerr << "S: ";
 
-  switch (YY_START)
+  switch (state)
     {
     case INITIAL:
       std::cerr << "INITIAL" << std::endl;
       break;
 
     case COMMAND_START:
       std::cerr << "COMMAND_START" << std::endl;
       break;
@@ -1579,22 +1577,22 @@ display_state (void)
       break;
 
     default:
       std::cerr << "UNKNOWN START STATE!" << std::endl;
       break;
     }
 }
 
-static void
-lexer_debug (const char *pattern, const char *text)
+void
+lexical_feedback::lexer_debug (const char *pattern, const char *text)
 {
   std::cerr << std::endl;
 
-  display_state ();
+  display_state (YY_START);
 
   std::cerr << "P: " << pattern << std::endl;
   std::cerr << "T: " << text << std::endl;
 }
 
 DEFUN (__display_tokens__, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __display_tokens__ ()\n\
