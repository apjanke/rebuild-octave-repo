# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1236460165 -3600
#      Sat Mar 07 22:09:25 2009 +0100
# Node ID 92dd386f0f133804d9835c98421e4758b3b92c74
# Parent  dd11de67a3f9f7d0426dff60d5a8297a6a1eccda
optimize diag matrix division

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-03-07  Jaroslav Hajek  <highegg@gmail.com>
+
+	* xdiv.cc (mdm_div_impl, dmm_lelftdiv_impl, dmdm_div_impl,
+	dmdm_leftdiv_impl): Optimize.
+
 2009-03-07  John W. Eaton  <jwe@octave.org>
 
 	* pr-output.cc (octave_print_internal (std::ostream&,
 	const PermMatrix&, bool, int)): Delete unused variable SCALE.
 
 	* utils.cc (octave_vsnprintf): Avoid uninitialized variable
 	warning from GCC.
 
diff --git a/src/xdiv.cc b/src/xdiv.cc
--- a/src/xdiv.cc
+++ b/src/xdiv.cc
@@ -731,34 +731,39 @@ xleftdiv (const FloatComplexMatrix& a, c
 
 template <class MT, class DMT>
 MT
 mdm_div_impl (const MT& a, const DMT& d)
 {
   if (! mx_div_conform (a, d))
     return MT ();
 
-  octave_idx_type m = a.rows (), n = d.rows (), k = d.cols ();
+  octave_idx_type m = a.rows (), n = d.rows (), l = d.length ();
   MT x (m, n);
-  const typename DMT::element_type zero = typename DMT::element_type ();
+  typedef typename DMT::element_type S;
+  typedef typename MT::element_type T;
+  const T *aa = a.data ();
+  const S *dd = d.data ();
+  T *xx = x.fortran_vec ();
 
-  for (octave_idx_type j = 0; j < n; j++)
+  for (octave_idx_type j = 0; j < l; j++)
     {
-      if (j < k && d(j, j) != zero)
-        {
-          for (octave_idx_type i = 0; i < m; i++)
-            x(i, j) = a(i, j) / d(j, j);
-        }
+      const S del = dd[j];
+      if (del != S ())
+        for (octave_idx_type i = 0; i < m; i++)
+          xx[i] = aa[i] / del;
       else
-        {
-          for (octave_idx_type i = 0; i < m; i++)
-            x(i, j) = zero;
-        }
+        for (octave_idx_type i = 0; i < m; i++)
+          xx[i] = T ();
+      aa += m; xx += m;
     }
 
+  for (octave_idx_type i = l*m; i < n*m; i++)
+    xx[i] = T ();
+
   return x;
 }
 
 // Right division functions.
 //
 //       op2 / op1:   dm  cdm
 //            +--   +---+----+
 //   matrix         | 1 |    |
@@ -807,27 +812,31 @@ xdiv (const FloatComplexMatrix& a, const
 
 template <class MT, class DMT>
 MT
 dmm_leftdiv_impl (const DMT& d, const MT& a)
 {
   if (! mx_leftdiv_conform (d, a))
     return MT ();
 
-  octave_idx_type m = d.cols (), n = a.cols (), k = d.rows ();
-  octave_idx_type mk = m < k ? m : k;
+  octave_idx_type m = d.cols (), n = a.cols (), k = a.rows (), l = d.length ();
   MT x (m, n);
-  const typename DMT::element_type zero = typename DMT::element_type ();
+  typedef typename DMT::element_type S;
+  typedef typename MT::element_type T;
+  const T *aa = a.data ();
+  const S *dd = d.data ();
+  T *xx = x.fortran_vec ();
 
   for (octave_idx_type j = 0; j < n; j++)
     {
-      for (octave_idx_type i = 0; i < mk; i++)
-        x(i, j) = d(i, i) != zero ? a(i, j) / d(i, i) : 0;
-      for (octave_idx_type i = mk; i < m; i++)
-        x(i, j) = zero;
+      for (octave_idx_type i = 0; i < l; i++)
+        xx[i] = dd[i] != S () ? aa[i] / dd[i] : T ();
+      for (octave_idx_type i = l; i < m; i++)
+        xx[i] = T ();
+      aa += k; xx += m;
     }
 
   return x;
 }
 
 // Left division functions.
 //
 //       op2 \ op1:         m   cm
@@ -881,27 +890,28 @@ xleftdiv (const FloatComplexDiagMatrix& 
 template <class MT, class DMT>
 MT
 dmdm_div_impl (const MT& a, const DMT& d)
 {
   if (! mx_div_conform (a, d))
     return MT ();
 
   octave_idx_type m = a.rows (), n = d.rows (), k = d.cols ();
-  octave_idx_type mn = m < n ? m : n;
+  octave_idx_type l = std::min (m, n), lk = std::min (l, k);
   MT x (m, n);
-  const typename DMT::element_type zero = typename DMT::element_type ();
+  typedef typename DMT::element_type S;
+  typedef typename MT::element_type T;
+  const T *aa = a.data ();
+  const S *dd = d.data ();
+  T *xx = x.fortran_vec ();
 
-  for (octave_idx_type j = 0; j < mn; j++)
-    {
-      if (j < k && d(j, j) != zero)
-        x(j, j) = a(j, j) / d(j, j);
-      else
-        x(j, j) = zero;
-    }
+  for (octave_idx_type i = 0; i < lk; i++)
+    xx[i] = dd[i] != S () ? aa[i] / dd[i] : T ();
+  for (octave_idx_type i = lk; i < l; i++)
+    xx[i] = T ();
 
   return x;
 }
 
 // Right division functions.
 //
 //       op2 / op1:        dm  cdm
 //            +--        +---+----+
@@ -952,27 +962,28 @@ xdiv (const FloatComplexDiagMatrix& a, c
 template <class MT, class DMT>
 MT
 dmdm_leftdiv_impl (const DMT& d, const MT& a)
 {
   if (! mx_leftdiv_conform (d, a))
     return MT ();
 
   octave_idx_type m = d.cols (), n = a.cols (), k = d.rows ();
-  octave_idx_type mn = m < n ? m : n;
+  octave_idx_type l = std::min (m, n), lk = std::min (l, k);
   MT x (m, n);
-  const typename DMT::element_type zero = typename DMT::element_type ();
+  typedef typename DMT::element_type S;
+  typedef typename MT::element_type T;
+  const T *aa = a.data ();
+  const S *dd = d.data ();
+  T *xx = x.fortran_vec ();
 
-  for (octave_idx_type j = 0; j < mn; j++)
-    {
-      if (j < k && d(j, j) != zero)
-        x(j, j) = a(j, j) / d(j, j);
-      else
-        x(j, j) = zero;
-    }
+  for (octave_idx_type i = 0; i < lk; i++)
+    xx[i] = dd[i] != S () ? aa[i] / dd[i] : T ();
+  for (octave_idx_type i = lk; i < l; i++)
+    xx[i] = T ();
 
   return x;
 }
 
 // Left division functions.
 //
 //       op2 \ op1:         dm  cdm
 //                        +---+----+
