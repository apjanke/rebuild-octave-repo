# HG changeset patch
# User Rik <rik@octave.org>
# Date 1380128973 25200
#      Wed Sep 25 10:09:33 2013 -0700
# Node ID 710309214e0d9a85250c18e093dd64a61ea8da44
# Parent  e5b0cf1fcf6a2c7c8406bfd809278b0cc116412b
doc: Add seealso links between waitfor, waitforbuttonpress, and ginput.

* libinterp/corefcn/graphics.cc(Fwaitfor): Put objective of function in first line
of docstring.  Add seealso link to waitforbuttonpress.

* scripts/plot/ginput.m: Add seealso link to waitforbuttonpress.

* scripts/plot/waitforbuttonpress.m: Add seealso link to kbhit.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -10202,21 +10202,22 @@ waitfor_del_listener (const octave_value
 
 DEFUN (waitfor, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} waitfor (@var{h})\n\
 @deftypefnx {Built-in Function} {} waitfor (@var{h}, @var{prop})\n\
 @deftypefnx {Built-in Function} {} waitfor (@var{h}, @var{prop}, @var{value})\n\
 @deftypefnx {Built-in Function} {} waitfor (@dots{}, \"timeout\", @var{timeout})\n\
 Suspend the execution of the current program until a condition is\n\
-satisfied on the graphics handle @var{h}.  While the program is suspended\n\
-graphics events are still being processed normally, allowing callbacks to\n\
-modify the state of graphics objects.  This function is reentrant and can be\n\
-called from a callback, while another @code{waitfor} call is pending at\n\
-top-level.\n\
+satisfied on the graphics handle @var{h}.\n\
+\n\
+While the program is suspended graphics events are still being processed\n\
+normally, allowing callbacks to modify the state of graphics objects.  This\n\
+function is reentrant and can be called from a callback, while another\n\
+@code{waitfor} call is pending at the top-level.\n\
 \n\
 In the first form, program execution is suspended until the graphics object\n\
 @var{h} is destroyed.  If the graphics handle is invalid, the function\n\
 returns immediately.\n\
 \n\
 In the second form, execution is suspended until the graphics object is\n\
 destroyed or the property named @var{prop} is modified.  If the graphics\n\
 handle is invalid or the property does not exist, the function returns\n\
@@ -10233,17 +10234,17 @@ This timeout value is the number of seco
 true.  @var{timeout} must be at least 1. If a smaller value is specified, a\n\
 warning is issued and a value of 1 is used instead.  If the timeout value is\n\
 not an integer, it is truncated towards 0.\n\
 \n\
 To define a condition on a property named @code{timeout}, use the string\n\
 @code{\\timeout} instead.\n\
 \n\
 In all cases, typing CTRL-C stops program execution immediately.\n\
-@seealso{isequal}\n\
+@seealso{waitforbuttonpress, isequal}\n\
 @end deftypefn")
 {
   if (args.length () > 0)
     {
       double h = args(0).double_value ();
 
       if (! error_state)
         {
@@ -10401,17 +10402,17 @@ In all cases, typing CTRL-C stops progra
                     error ("waitfor: invalid timeout value, expected a value >= 1");
                 }
               else
                 error ("waitfor: missing timeout value");
             }
 
           // FIXME: There is still a "hole" in the following loop. The code
           //        assumes that an object handle is unique, which is a fair
-          //        assumptions, except for figures. If a figure is destroyed
+          //        assumption, except for figures. If a figure is destroyed
           //        then recreated with the same figure ID, within the same
           //        run of event hooks, then the figure destruction won't be
           //        caught and the loop will not stop. This is an unlikely
           //        possibility in practice, though.
           //
           //        Using deletefcn callback is also unreliable as it could be
           //        modified during a callback execution and the waitfor loop
           //        would not stop.
diff --git a/scripts/plot/ginput.m b/scripts/plot/ginput.m
--- a/scripts/plot/ginput.m
+++ b/scripts/plot/ginput.m
@@ -25,17 +25,17 @@
 ## If @var{n} is defined, then capture @var{n} events before returning.
 ## When @var{n} is not defined @code{ginput} will loop until the return key
 ## @key{RET} is pressed.
 ##
 ## The return values @var{x}, @var{y} are the coordinates where the mouse
 ## was clicked in the units of the current axes.  The return value @var{button}
 ## is 1, 2, or 3 for the left, middle, or right button.  If a key is pressed
 ## the ASCII value is returned in @var{button}.
-## @seealso{gtext}
+## @seealso{gtext, waitforbuttonpress}
 ## @end deftypefn
 
 function varargout = ginput (n)
 
   if (nargin > 1)
     print_usage ();
   endif
 
diff --git a/scripts/plot/waitforbuttonpress.m b/scripts/plot/waitforbuttonpress.m
--- a/scripts/plot/waitforbuttonpress.m
+++ b/scripts/plot/waitforbuttonpress.m
@@ -18,17 +18,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} waitforbuttonpress ()
 ## @deftypefnx {Function File} {@var{a} =} waitforbuttonpress ()
 ## Wait for mouse click or key press over the current figure window.
 ##
 ## The return value of @var{b} is 0 if a mouse button was pressed or 1 if a
 ## key was pressed.
-## @seealso{waitfor, ginput}
+## @seealso{waitfor, ginput, kbhit}
 ## @end deftypefn
 
 ## The original version of this code bore the copyright
 ## Author: Petr Mikulik
 ## License: public domain
 
 function b = waitforbuttonpress ()
 
