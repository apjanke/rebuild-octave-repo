# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1507749688 -7200
#      Wed Oct 11 21:21:28 2017 +0200
# Node ID 60e4e324a52504de37d387ead5c8e26082a42a0e
# Parent  141e6e16d900fdb0a3eaabb5d6bf6d47bbbe0951
Fix failing xtest in camlookat.m (patch #9049).

* camlookat.m: Use perspective projection. Take dataaspectratio into account.
Add more input checks.
* NEWS: Announce new cam* functions.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -56,16 +56,24 @@ Summary of important user-visible change
     absolute tolerance will be issued in Octave versions 4.4 and 4.6,
     after which it will be removed.  The warning has ID
     "Octave:quadcc:RelTol-conversion" and can be disabled with
 
       warning ("off", "Octave:quadcc:RelTol-conversion")
 
  ** Other new functions added in 4.4:
 
+      camlookat
+      camorbit
+      campos
+      camroll
+      camtarget
+      camup
+      camva
+      camzoom
       corrcoef
       getframe
       gsvd
       hgtransform
       humps
       integral
       integral2
       integral3
diff --git a/scripts/plot/appearance/camlookat.m b/scripts/plot/appearance/camlookat.m
--- a/scripts/plot/appearance/camlookat.m
+++ b/scripts/plot/appearance/camlookat.m
@@ -47,20 +47,30 @@
 
 function camlookat (hh)
 
   if (nargin > 1)
     print_usage ();
   endif
 
   if (nargin == 0)
-    hh = get (gca (), "children");
+    hax = gca ();
+    hh = get (hax, "children");
   elseif (nargin == 1)
     if (isaxes (hh))
-      hh = get (hh, "children");
+      hax = hh;
+      hh = get (hax, "children");
+    elseif (all (ishandle (hh)))
+      hax = ancestor (hh, "axes");
+      if numel (hax) > 1
+        hax = unique ([hax{:}]);
+      endif
+      if (numel (hax) > 1)
+        error ("camlookat: HANDLE_LIST must be children of the same axes.")
+      endif
     endif
   endif
 
   if (isempty (hh))
     return
   end
 
   x0 = x1 = y0 = y1 = z0 = z1 = [];
@@ -84,43 +94,62 @@ function camlookat (hh)
       z0 = z0_;  z1 = z1_;
     else
       x0 = min (x0, x0_);  x1 = max (x1, x1_);
       y0 = min (y0, y0_);  y1 = max (y1, y1_);
       z0 = min (z0, z0_);  z1 = max (z1, z1_);
     endif
   endfor
 
-  ## current view direction and projection operator
-  curdir = camtarget () - campos ();
+  dar = daspect (hax);
+  
+  ## current view direction
+  curdir = (camtarget () - campos ()) ./ dar;
   curdir /= norm (curdir);
-  P = eye (3) - (curdir.' * curdir);
 
   ## target to middle of bounding box
-  mid = [x0+x1; y0+y1; z0+z1]/2;
+  mid = [x0+x1, y0+y1, z0+z1]/2 ./ dar;
 
   ## vertices of the bounding box
-  bb = [x0 x0 x0 x0 x1 x1 x1 x1;
-        y0 y0 y1 y1 y0 y0 y1 y1;
-        z0 z1 z0 z1 z0 z1 z0 z1];
-
-  ## project bounding box onto view plane
-  Pbb = P*(bb - mid) + mid;
+  bb = [x0 y0 z0;
+        x0 y0 z1;
+        x0 y1 z0;
+        x0 y1 z1;
+        x1 y0 z0;
+        x1 y0 z1;
+        x1 y1 z0;
+        x1 y1 z1] ./ dar;
+ 
+  ## Find corner of bounding box with maximum opening angle.
+  ## Make sure temporary pov is well outside boundary of bounding box.
+  bb_diag = norm ([x0-x1, y0-y1, z0-z1] ./ dar);
+  cp_test = mid - 2*bb_diag*curdir;
+  bb_cp = bb - cp_test;
+  bb_cp ./= norm (bb_cp, 2, "rows");
+  aperture = norm (curdir .* bb_cp, 2, "rows");
+  max_corner = find (aperture == max (aperture), 1, "first");
+  
+  ## projection of corner on line of sight
+  sz = curdir * (bb(max_corner,:) - mid)';
+  bb_proj = mid + sz * curdir;
 
-  ## estimate size based on projected bb, choose distance for campos
-  ## (XXX: only matches Matlab to about 1 digit, see xtests)
-  sz = max (norm (Pbb - mid, 2, "cols"));
-  dist = 2*sz / tand (camva ());
+  ## Calculate distance for which that corner appears at camva/2
+  dist = norm (bb(max_corner,:) - bb_proj) / tand (camva () / 2);
 
-  ## avoid auto-adjusting
-  camva ("manual")
+  ## Is bb_proj in front of or behind mid?
+  if (curdir * (mid - bb_proj)' > 0)
+    cp = bb_proj - dist * curdir;
+  else
+    cp = 2*mid - bb_proj - dist * curdir;
+  endif
 
-  camtarget (mid.')
-
-  campos (mid.' - dist*curdir)
+  ## set camera properties
+  camva ("manual")  # avoid auto-adjusting
+  camtarget (mid .* dar)
+  campos (cp .* dar)
 
 endfunction
 
 
 %!demo
 %! [x, y, z] = peaks ();
 %! surf(x, y, z/5);
 %! hold on
@@ -218,17 +247,17 @@ endfunction
 %!   P3 = campos ();
 %!   assert (T1, T3, -10*eps);
 %!   assert (P1, P3, -10*eps);
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
 ## compare to matlab2014a output
-%!xtest
+%!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   [x, y, z] = peaks ();
 %!   s3 = surf(x, y, z/5);
 %!   hold on
 %!   [x, y, z] = sphere ();
 %!   s2 = surf(x/2, y/2+1.5, z/2+2);
 %!   s1 = mesh(x/2-4, 3*y, z/2 - 1);
@@ -248,8 +277,20 @@ endfunction
 %!   assert (campos (), [-35.7955620339723 -45.6722656481532 33.7372645671114], -1e-7)
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
 ## Test input validation
 %!error <Invalid call> camlookat (1, 2)
 %!error <must be handle> camlookat ("a")
+%!error <children of the same axes>
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   [x, y, z] = sphere ();
+%!   hax1 = subplot (1, 2, 1);
+%!   hs1 = surf (hax1, x, y, z);
+%!   hax2 = subplot (1, 2, 2);
+%!   hs2 = surf (hax2, x, y, z);
+%!   camlookat ([hs1 hs2]);
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
