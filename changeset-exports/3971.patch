# HG changeset patch
# User jwe
# Date 1025653609 0
#      Tue Jul 02 23:46:49 2002 +0000
# Node ID 41e7fa40ff4c8c24d8008887b186e65b62cd49c5
# Parent  4f884e25aab91d018c8e0be7d9cc6fc965af62d1
[project @ 2002-07-02 23:46:48 by jwe]

diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -397,17 +397,17 @@ dnl
 AC_DEFUN(OCTAVE_PROG_PAGER,
 [if test "$cross_compiling" = yes; then
   DEFAULT_PAGER=less
   AC_MSG_RESULT(assuming $DEFAULT_PAGER exists on $canonical_host_type host)
   AC_SUBST(DEFAULT_PAGER)
 else
   octave_possible_pagers="less more page pg"
   case "$canonical_host_type" in
-    *-*-cygwin32)
+    *-*-cygwin*)
       octave_possible_pagers="$octave_possible_pagers more.com"
     ;;
   esac
 
   AC_CHECK_PROGS(DEFAULT_PAGER, $octave_possible_pagers, [])
   if test -z "$DEFAULT_PAGER"; then
     warn_less="I couldn't find \`less', \`more', \`page', or \`pg'"
     AC_MSG_WARN($warn_less)
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.360 $)
+AC_REVISION($Revision: 1.361 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -1072,17 +1072,17 @@ AC_TYPE_SIZE_T
 AC_TYPE_UID_T
 AC_CHECK_TYPES([dev_t, ino_t, nlink_t, nlink_t])
 AC_CHECK_TYPES(sigset_t, , , [#include <signal.h>])
 
 ### A system dependent kluge or two.
 
 AC_CHECK_FUNCS(getrusage times)
 case "$canonical_host_type" in
-  *-*-cygwin32)
+  *-*-cygwin*)
     AC_DEFINE(RUSAGE_TIMES_ONLY, 1, [Define if your struct rusage only has time information.])
   ;;
 esac
 
 bsd_gcc_kluge_targets_frag=/dev/null
 case "$canonical_host_type" in
   *-*-386bsd* | *-*-openbsd* | *-*-netbsd* | *-*-freebsd*)
     bsd_gcc_kluge_targets_frag=Makefrag.bsd
diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -811,17 +811,17 @@ the arguments are available in the built
 @xref{Command Line Options}.  For example, the following program will
 reproduce the command line that is used to execute it.
 
 @example
 @group
 #! /bin/octave -qf
 printf ("%s", program_name);
 for i = 1:nargin
-  printf (" %s", argv(i,:));
+  printf (" %s", argv{i});
 endfor
 printf ("\n");
 @end group
 @end example
 
 @node Comments,  , Executable Octave Programs, Getting Started
 @section Comments in Octave Programs
 @cindex @samp{#}
diff --git a/install-octave.in b/install-octave.in
--- a/install-octave.in
+++ b/install-octave.in
@@ -300,17 +300,17 @@ else
   chmod 755 $bindir/octave
 
   echo "installing src/octave as $bindir/octave.bin"
   cp src/octave $bindir/octave.bin
   chmod 755 $bindir/octave.bin
 fi
 
 case "$canonical_host_type" in
-  *-*-cygwin32)
+  *-*-cygwin*)
     if $alt_dir; then
       echo "*** You have specified an installation directory different"
       echo "*** from the default.  For Octave to run properly, you must"
       echo "*** set the environment variable OCTAVE_HOME to"
       echo "***"
       echo "***   $prefix"
       echo "***"
       echo "*** before starting Octave."
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2002-07-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* NLEqn.cc (NLEqn::error_message): New function.
+	* NLEqn.h (NLEqn::solution_state, NLEqn::solution_ok): New functions.
+
 2002-07-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-utils.cc (octave_fgetl): New function.
 	* cmd-edit.cc (do_readline): Use it instead of octave_fgets.
 
 2002-05-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* LSODE.cc (LSODE::error_message): New function.
diff --git a/liboctave/NLEqn.cc b/liboctave/NLEqn.cc
--- a/liboctave/NLEqn.cc
+++ b/liboctave/NLEqn.cc
@@ -159,38 +159,86 @@ NLEqn::solve (int& info)
       double *pwa = wa.fortran_vec ();
 
       Array<double> fjac (n*n);
       double *pfjac = fjac.fortran_vec ();
 
       F77_XFCN (hybrj1, HYBRJ1, (hybrj1_fcn, n, px, pfvec, pfjac, n,
 				 tol, info, pwa, lwa));
 
+      solution_status = info;
+
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in hybrj1");
     }
   else
     {
       Array<double> fvec (n);
       double *pfvec = fvec.fortran_vec ();
 
       int lwa = (n*(3*n+13))/2;
       Array<double> wa (lwa);
       double *pwa = wa.fortran_vec ();
 
       F77_XFCN (hybrd1, HYBRD1, (hybrd1_fcn, n, px, pfvec, tol, info,
 				 pwa, lwa));
 
+      solution_status = info;
+
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in hybrd1");
     }
 
   if (info < 0)
     retval.resize (0);
 
   return retval;
 }
 
+std::string
+NLEqn::error_message (void) const
+{
+  std::string retval;
+
+  std::string prefix;
+
+  int info = solution_status;
+  if (info < 0)
+    info = -info;
+
+  switch (info)
+    {
+    case 0:
+      retval = "improper input parameters";
+      break;
+
+    case 1:
+      retval = "solution converged within specified tolerance";
+      break;
+
+    case 2:
+      retval = "number of function calls exceeded limit";
+      break;
+
+    case 3:
+      retval = "no further improvement possible (tolerance may be too small)";
+      break;
+
+    case 4:
+      retval = "iteration is not making good progress";
+      break;
+
+    default:
+      retval = "unknown error state";
+      break;
+    }
+
+  if (solution_status < 0)
+    retval = std::string ("user requested termination: ") + retval;
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/NLEqn.h b/liboctave/NLEqn.h
--- a/liboctave/NLEqn.h
+++ b/liboctave/NLEqn.h
@@ -70,32 +70,34 @@ private:
 };
 
 class
 NLEqn : public NLFunc, public NLEqn_options
 {
 public:
 
   NLEqn (void)
-    : NLFunc (), NLEqn_options (), x () { }
+    : NLFunc (), NLEqn_options (), x (), solution_status (0) { }
 
   NLEqn (const ColumnVector& xx, const NLFunc f) 
-    : NLFunc (f), NLEqn_options (), x (xx) { }
+    : NLFunc (f), NLEqn_options (), x (xx), solution_status (0) { }
 
   NLEqn (const NLEqn& a)
-    : NLFunc (a.fun, a.jac), NLEqn_options (), x (a.x) { }
+    : NLFunc (a.fun, a.jac), NLEqn_options (), x (a.x),
+      solution_status (a.solution_status) { }
 
   NLEqn& operator = (const NLEqn& a)
     {
       if (this != &a)
 	{
 	  NLFunc::operator = (a);
 	  NLEqn_options::operator = (a);
 
 	  x = a.x;
+	  solution_status = a.solution_status;
 	}
       return *this;
     }
 
   ~NLEqn (void) { }
 
   void set_states (const ColumnVector& xx) { x = xx; }
 
@@ -119,19 +121,26 @@ public:
   ColumnVector solve (const ColumnVector& xvec, int& info)
     {
       set_states (xvec);
       return solve (info);
     }
 
   ColumnVector solve (int& info);
 
- private:
+  int solution_state (void) const { return solution_status; }
+
+  bool solution_ok (void) const { return solution_status == 1; }
+
+  std::string error_message (void) const;
+
+private:
 
   ColumnVector x;
+  int solution_status;
 
   void error (const char* msg);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2002-07-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* defaults.cc (loadpath): Comment out previous change.
+
+	* DLD-FUNCTIONS/fsolve.cc (Ffsolve): Return message too.  Only
+	generate error if user is not at least requesting the info output.
+
+	* DLD-FUNCTIONS/lsode.cc (Flsode): Fix typos in setting return value.
+
 2002-07-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-stream.cc (printf_value_cache::double_value): If the current
 	element is empty and there are no more elements in the value list,
 	set curr_state to conversion_error.
 
 	* input.cc (initialize_command_input): Include (, ), {, and } as
 	word break characters.
diff --git a/src/DLD-FUNCTIONS/fsolve.cc b/src/DLD-FUNCTIONS/fsolve.cc
--- a/src/DLD-FUNCTIONS/fsolve.cc
+++ b/src/DLD-FUNCTIONS/fsolve.cc
@@ -146,17 +146,17 @@ fsolve_user_function (const ColumnVector
     { \
       ::error ("fsolve: " fmt, arg); \
       FSOLVE_ABORT (); \
     } \
   while (0)
 
 DEFUN_DLD (fsolve, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {[@var{x}, @var{info}] =} fsolve (@var{fcn}, @var{x0})\n\
+@deftypefn {Loadable Function} {[@var{x}, @var{info}, @var{msg}] =} fsolve (@var{fcn}, @var{x0})\n\
 Given @var{fcn}, the name of a function of the form @code{f (@var{x})}\n\
 and an initial starting point @var{x0}, @code{fsolve} solves the set of\n\
 equations such that @code{f(@var{x}) == 0}.\n\
 \n\
 You can use the function @code{fsolve_options} to set optional\n\
 parameters for @code{fsolve}.\n\
 @end deftypefn")
 {
@@ -186,30 +186,40 @@ parameters for @code{fsolve}.\n\
 	FSOLVE_ABORT1 ("expecting vector as second argument");
 
       if (nargin > 2)
 	warning ("fsolve: ignoring extra arguments");
 
       if (nargout > 2)
 	warning ("fsolve: can't compute path output yet");
 
-      NLFunc foo_fcn (fsolve_user_function);
-      NLEqn foo (x, foo_fcn);
-      foo.set_options (fsolve_opts);
+      NLFunc nleqn_fcn (fsolve_user_function);
+      NLEqn nleqn (x, nleqn_fcn);
+      nleqn.set_options (fsolve_opts);
 
       int info;
-      ColumnVector soln = foo.solve (info);
+      ColumnVector soln = nleqn.solve (info);
 
-      info = hybrd_info_to_fsolve_info (info);
+      if (! error_state)
+	{
+	  std::string msg = nleqn.error_message ();
+
+	  retval(2) = msg;
+	  retval(1) = static_cast<double> (hybrd_info_to_fsolve_info (info));
 
-      retval.resize (nargout ? nargout : 1);
-      retval(0) = soln, 1;
+	  if (nleqn.solution_ok ())
+	    retval(0) = soln;
+	  else
+	    {
+	      retval(0) = Matrix ();
 
-      if (nargout > 1)
-	retval(1) = static_cast<double> (info);
+	      if (nargout < 2)
+		error ("fsolve: %s", msg.c_str ());
+	    }
+	}
     }
   else
     print_usage ("fsolve");
 
   unwind_protect::run_frame ("Ffsolve");
 
   return retval;
 }
diff --git a/src/DLD-FUNCTIONS/lsode.cc b/src/DLD-FUNCTIONS/lsode.cc
--- a/src/DLD-FUNCTIONS/lsode.cc
+++ b/src/DLD-FUNCTIONS/lsode.cc
@@ -285,20 +285,20 @@ parameters for @code{lsode}.\n\
 	output = ode.integrate (out_times);
 
       if (! error_state)
 	{
 	  retval(2) = ode.error_message ();
 	  retval(1) = static_cast<double> (ode.integration_state ());
 
 	  if (ode.integration_ok ())
-	    retval = output;
+	    retval(0) = output;
 	  else
 	    {
-	      output = Matrix ();
+	      retval(0) = Matrix ();
 
 	      if (nargout < 2)
 		{
 		  std::string msg = ode.error_message ();
 		  error ("lsode: %s", msg.c_str ());
 		}
 	    }
 	}
diff --git a/src/defaults.cc b/src/defaults.cc
--- a/src/defaults.cc
+++ b/src/defaults.cc
@@ -410,19 +410,21 @@ loadpath (void)
 
   if (s.empty ())
     {
       gripe_invalid_value_specified ("LOADPATH");
       status = -1;
     }
   else
     {
-      if (! (s[0] == ':' || s[s.length () - 1] == ':'
-	     || s.find ("::") != NPOS))
-	warning ("LOADPATH will ignore default load path");
+      // I'm not sure whether this causes more problems that it
+      // solves...
+      //      if (! (s[0] == ':' || s[s.length () - 1] == ':'
+      //	     || s.find ("::") != NPOS))
+      //	warning ("LOADPATH will ignore default load path");
 
       Vload_path = s;
 
       Vload_path_dir_path = dir_path (Vload_path, Vdefault_load_path);
     }
 
   return status;
 }
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -821,17 +821,17 @@ symbols_of_toplev (void)
 The command line arguments passed to Octave are available in this\n\
 variable.  For example, if you invoked Octave using the command\n\
 \n\
 @example\n\
 octave --no-line-editing --silent\n\
 @end example\n\
 \n\
 @noindent\n\
-@code{argv} would be a list of strings with the elements\n\
+@code{argv} would be a cell array of strings with the elements\n\
 @code{--no-line-editing} and @code{--silent}.\n\
 \n\
 If you write an executable Octave script, @code{argv} will contain the\n\
 list of arguments passed to the script.  @xref{Executable Octave Programs},\n\
 for an example of how to create an executable Octave script.\n\
 @end defvr");
 
   DEFCONST (program_invocation_name,
