# HG changeset patch
# User jwe
# Date 1099517023 0
#      Wed Nov 03 21:23:43 2004 +0000
# Node ID 4689ee5e88ec1bc4713097cc6848a033c46d9989
# Parent  34a904ac130de742fb65d43cbf11a06ce84b1cc1
[project @ 2004-11-03 21:23:42 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -1020,44 +1020,47 @@ ComplexMatrix::inverse (int& info, doubl
 	{
 	  // Throw-away extra info LAPACK gives so as to not change output.
 	  rcond = 0.0;
 	  if (info != 0) 
 	    info = -1;
 	  else if (calc_cond) 
 	    {
 	      // Now calculate the condition number for non-singular matrix.
+	      int zgecon_info = 0;
 	      char job = '1';
 	      Array<double> rz (2 * nc);
 	      double *prz = rz.fortran_vec ();
 	      F77_XFCN (zgecon, ZGECON, (F77_CONST_CHAR_ARG2 (&job, 1),
 					 nc, tmp_data, nr, anorm, 
-					 rcond, pz, prz, info
+					 rcond, pz, prz, zgecon_info
 					 F77_CHAR_ARG_LEN (1)));
 
 	      if (f77_exception_encountered)
 		(*current_liboctave_error_handler) 
 		  ("unrecoverable error in zgecon");
 
-	      if (info != 0) 
+	      if (zgecon_info != 0) 
 		info = -1;
 	    }
 
 	  if (info == -1 && ! force)
 	    retval = *this;  // Restore contents.
 	  else
 	    {
+	      int zgetri_info = 0;
+
 	      F77_XFCN (zgetri, ZGETRI, (nc, tmp_data, nr, pipvt,
-					 pz, lwork, info));
+					 pz, lwork, zgetri_info));
 
 	      if (f77_exception_encountered)
 		(*current_liboctave_error_handler)
 		  ("unrecoverable error in zgetri");
 
-	      if (info != 0) 
+	      if (zgetri_info != 0) 
 		info = -1;
 	    }
 	}
     }
   
   return retval;
 }
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2004-11-03  John W. Eaton  <jwe@octave.org>
+
+	* dMatrix.cc (Matrix::inverse): Return info == -1 for any failure.
+	* CMatrix.cc (ComplexMatrix::inverse): Likewise.
+
 2004-10-19  John W. Eaton  <jwe@octave.org>
 
 	* Array.cc (assignN): Avoid resizing if assignment will fail.
 
 2004-10-18  John W. Eaton  <jwe@octave.org>
 
 	* Array.cc (assign2): Save result of squeeze operation.
 	Squeeze if ndims is > 2, not if length of RHS vector is > 2.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -687,45 +687,49 @@ Matrix::inverse (int& info, double& rcon
       else
 	{
 	  // Throw-away extra info LAPACK gives so as to not change output.
 	  rcond = 0.0;
 	  if (info != 0) 
 	    info = -1;
 	  else if (calc_cond) 
 	    {
+	      int dgecon_info = 0;
+
 	      // Now calculate the condition number for non-singular matrix.
 	      char job = '1';
 	      Array<int> iz (nc);
 	      int *piz = iz.fortran_vec ();
 	      F77_XFCN (dgecon, DGECON, (F77_CONST_CHAR_ARG2 (&job, 1),
 					 nc, tmp_data, nr, anorm, 
-					 rcond, pz, piz, info
+					 rcond, pz, piz, dgecon_info
 					 F77_CHAR_ARG_LEN (1)));
 
 	      if (f77_exception_encountered)
 		(*current_liboctave_error_handler) 
 		  ("unrecoverable error in dgecon");
 
-	      if (info != 0) 
+	      if (dgecon_info != 0) 
 		info = -1;
 	    }
 
 	  if (info == -1 && ! force)
 	    retval = *this; // Restore matrix contents.
 	  else
 	    {
+	      int dgetri_info = 0;
+
 	      F77_XFCN (dgetri, DGETRI, (nc, tmp_data, nr, pipvt,
-					 pz, lwork, info));
+					 pz, lwork, dgetri_info));
 
 	      if (f77_exception_encountered)
 		(*current_liboctave_error_handler)
 		  ("unrecoverable error in dgetri");
 
-	      if (info != 0) 
+	      if (dgetri_info != 0) 
 		info = -1;
 	    }
 	}
     }
 
   return retval;
 }
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -401,26 +401,34 @@ sign as @var{x}.  If @var{y} is zero, th
   return retval
 
 DEFUN (cumprod, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} cumprod (@var{x}, @var{dim})\n\
 Cumulative product of elements along dimension @var{dim}.  If\n\
 @var{dim} is omitted, it defaults to 1 (column-wise cumulative\n\
 products).\n\
+\n\
+As a special case, if @var{x} is a vector and @var{dim} is omitted,\n\
+return the cumulative product of the elements as a vector with the\n\
+same orientation as @var{x}.\n\
 @end deftypefn")
 {
   DATA_REDUCTION (cumprod);
 }
 
 DEFUN (cumsum, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} cumsum (@var{x}, @var{dim})\n\
 Cumulative sum of elements along dimension @var{dim}.  If @var{dim}\n\
 is omitted, it defaults to 1 (column-wise cumulative sums).\n\
+\n\
+As a special case, if @var{x} is a vector and @var{dim} is omitted,\n\
+return the cumulative sum of the elements as a vector with the\n\
+same orientation as @var{x}.\n\
 @end deftypefn")
 {
   DATA_REDUCTION (cumsum);
 }
 
 // XXX FIXME XXX -- we could eliminate some duplicate code here with
 // some template functions or macros.
 
@@ -658,16 +666,19 @@ diag ([1, 2, 3], 1)\n\
   return retval;
 }
 
 DEFUN (prod, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} prod (@var{x}, @var{dim})\n\
 Product of elements along dimension @var{dim}.  If @var{dim} is\n\
 omitted, it defaults to 1 (column-wise products).\n\
+\n\
+As a special case, if @var{x} is a vector and @var{dim} is omitted,\n\
+return the product of the elements.\n\
 @end deftypefn")
 {
   DATA_REDUCTION (prod);
 }
 
 static octave_value
 do_cat (const octave_value_list& args, std::string fname)
 {
@@ -1053,28 +1064,34 @@ returns the number of columns in the giv
   return retval;
 }
 
 DEFUN (sum, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} sum (@var{x}, @var{dim})\n\
 Sum of elements along dimension @var{dim}.  If @var{dim} is\n\
 omitted, it defaults to 1 (column-wise sum).\n\
+\n\
+As a special case, if @var{x} is a vector and @var{dim} is omitted,\n\
+return the sum of the elements.\n\
 @end deftypefn")
 {
   DATA_REDUCTION (sum);
 }
 
 DEFUN (sumsq, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} sumsq (@var{x}, @var{dim})\n\
 Sum of squares of elements along dimension @var{dim}.  If @var{dim}\n\
 is omitted, it defaults to 1 (column-wise sum of squares).\n\
 \n\
-This function is equivalent to computing\n\
+As a special case, if @var{x} is a vector and @var{dim} is omitted,\n\
+return the sum of squares of the elements.\n\
+\n\
+This function is conceptually equivalent to computing\n\
 @example\n\
 sum (x .* conj (x), dim)\n\
 @end example\n\
 but it uses less memory and avoids calling conj if @var{x} is real.\n\
 @end deftypefn")
 {
   DATA_REDUCTION (sumsq);
 }
