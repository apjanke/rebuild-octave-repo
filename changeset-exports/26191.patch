# HG changeset patch
# User RÃ¼diger Sonderfeld <ruediger@c-plusplus.de>
# Date 1380932470 -7200
#      Sat Oct 05 02:21:10 2013 +0200
# Node ID f41494a4977fae8106612d03bb207ecf36474071
# Parent  c2137ac45dd9d3ec948762156050a319c362d587
Add "dumb" terminal to produce ASCII art with gnuplot (patch #8203).

* print.m: Document new terminal "dumb" in raster output section.

* __print_parse_opts__.m: Add "dumb" to the list of devices: dev_list.
Add "txt" to the list of file extensions: suffixes.

* __gnuplot_print__.m: Decode "dumb" in switch statement and call local_drawnow
with "dumb" terminal.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -121,16 +121,19 @@ Summary of important user-visible change
     option will expand the plot to take up as much room as possible on
     the page without distorting the original aspect ratio of the plot.
 
  ** Printing using the -dtiff output device will now create compressed
     images using LZW compression.  This change was made for Matlab
     compatibility.  To produce uncompressed images use the -dtiffn
     device.
 
+ ** A new printing device is available, -ddumb, which produces ASCII art
+    for plots.  This device is only available with the gnuplot toolkit.
+
  ** Printing to EPS files now uses a tight bounding box ("-tight"
     argument to print) by default.  This makes more sense for EPS
     files which are normally embedded within other documents, and is
     Matlab compatible.  If necessary use the "-loose" option to
     reproduce figures as they appeared in previous versions of Octave. 
 
  ** It is now possible to use files and folders containing Unicode
     characters in Windows.
diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -334,17 +334,16 @@
 ##
 ##   @item  tikz
 ##   @itemx tikzstandalone*
 ##     Generate a @LaTeX{} file using PGF/TikZ format.  The OpenGL-based
 ## toolkits create a PGF file while Gnuplot creates a TikZ file.  The
 ## @samp{tikzstandalone} device produces a @LaTeX{} document which includes the
 ## TikZ file.
 ##
-##
 ##   @end table
 ##
 ## Raster Formats
 ##
 ##   @table @code
 ##   @item png
 ##     Portable Network Graphics
 ##
@@ -359,16 +358,19 @@
 ## (@nospell{tiffn}).
 ##
 ##   @item gif
 ##     GIF image
 ##
 ##   @item pbm
 ##     PBMplus
 ##
+##   @item dumb*
+##     ASCII art
+##
 ##   @end table
 ##
 ##   If the device is omitted, it is inferred from the file extension,
 ## or if there is no filename then it is sent to the printer as PostScript.
 ##
 ## @item -d@var{ghostscript_device}
 ##   Additional devices are supported by Ghostscript.
 ## Some examples are:
diff --git a/scripts/plot/util/private/__gnuplot_print__.m b/scripts/plot/util/private/__gnuplot_print__.m
--- a/scripts/plot/util/private/__gnuplot_print__.m
+++ b/scripts/plot/util/private/__gnuplot_print__.m
@@ -151,16 +151,18 @@ function opts = __gnuplot_print__ (opts)
           "pstricks", "texdraw"}
       if (__gnuplot_has_terminal__ (opts.devopt))
         local_drawnow ([opts.devopt " " gp_opts], opts.name, opts);
       else
         error (sprintf ("print:no%soutput", opts.devopt),
                "print.m: '%s' output is not available for gnuplot-%s",
                upper (opts.devopt), __gnuplot_version__ ());
       endif
+    case "dumb"
+      local_drawnow ("dumb size 72,24", opts.name, opts);
     case opts.ghostscript.device
       gp_opts = font_spec (opts, "devopt", "eps");
       opts.ghostscript.output = opts.name;
       opts.ghostscript.source = [tempname() ".eps"];
       eps_drawnow (opts, opts.ghostscript.source, gp_opts);
       [cmd_gs, cmd_cleanup] = __ghostscript__ (opts.ghostscript);
       if (opts.send_to_printer || isempty (opts.name))
         cmd_lpr = opts.lpr_cmd (opts);
diff --git a/scripts/plot/util/private/__print_parse_opts__.m b/scripts/plot/util/private/__print_parse_opts__.m
--- a/scripts/plot/util/private/__print_parse_opts__.m
+++ b/scripts/plot/util/private/__print_parse_opts__.m
@@ -259,32 +259,32 @@ function arg_st = __print_parse_opts__ (
   elseif (strcmp (arg_st.devopt, "jpg"))
     arg_st.devopt = "jpeg";
   elseif (strcmp (arg_st.devopt, "tif"))
     arg_st.devopt = "tiff";
   elseif (strcmp (arg_st.devopt, "pdfcrop"))
     arg_st.devopt = "pdfwrite";
   endif
 
-  persistent dev_list = [{"aifm", "corel", "fig", "png", "jpeg", ...
+  persistent dev_list = [{"aifm", "corel", "dumb", "fig", "png", "jpeg", ...
               "gif", "pbm", "pbmraw", "dxf", "mf", ...
               "svg", "hpgl", "ps", "ps2", "psc", ...
               "psc2", "eps", "eps2", "epsc", "epsc2", ...
               "emf", "pdf", "pslatex", "epslatex", "epslatexstandalone", ...
               "pslatexstandalone", "pdflatexstandalone", ...
               "pstex", "tiff", "tiffn", "tikz", "tikzstandalone", "pcxmono", ...
               "pcx24b", "pcx256", "pcx16", "pgm", "pgmraw", ...
               "ppm", "ppmraw", "pdflatex", "texdraw", ...
               "epscairo", "pdfcairo", "pngcairo", "cairolatex", ...
               "pdfcairolatex", "pdfcairolatexstandalone", ...
               "epscairolatex", "epscairolatexstandalone", "pstricks", ...
               "epswrite", "eps2write", "pswrite", "ps2write", "pdfwrite", ...
               "canvas", "cgm", "latex", "eepic"}, gl_devlist];
 
-  persistent suffixes = [{"ai", "cdr", "fig", "png", "jpg", ...
+  persistent suffixes = [{"ai", "cdr", "txt", "fig", "png", "jpg", ...
               "gif", "pbm", "pbm", "dxf", "mf", ...
               "svg", "hpgl", "ps", "ps", "ps", ...
               "ps", "eps", "eps", "eps", "eps", ...
               "emf", "pdf", "tex", "tex", "tex", ...
               "tex", "tex", ...
               "ps", "tiff", "tiff", "tikz", "tikz", "pcx", ...
               "pcx", "pcx", "pcx", "pgm", "pgm", ...
               "ppm", "ppm", "tex", "tex", ...
