# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1222980644 -7200
#      Thu Oct 02 22:50:44 2008 +0200
# Node ID 977d5204cf67e5cd19c911023fac707f8d972a33
# Parent  ea9b5f31bfac5167cf87a6a4a784deb21f0e1209
fix null assignment for structs

diff --git a/src/Cell.cc b/src/Cell.cc
--- a/src/Cell.cc
+++ b/src/Cell.cc
@@ -167,16 +167,29 @@ Cell::assign (const octave_value_list& i
   for (octave_idx_type i = 0; i < idx_arg.length (); i++)
     set_index (idx_arg(i).index_vector ());
 
   ::assign (*this, rhs, fill_val);
 
   return *this;
 }
 
+Cell&
+Cell::delete_elements (const octave_value_list& idx_arg)
+
+{
+  Array<idx_vector> ra_idx (idx_arg.length ());
+  for (octave_idx_type i = 0; i < idx_arg.length (); i++)
+    ra_idx.xelem (i) = idx_arg(i).index_vector ();
+
+  maybe_delete_elements (ra_idx, octave_value ());
+
+  return *this;
+}
+
 octave_idx_type
 Cell::nnz (void) const
 {
   gripe_wrong_type_arg ("nnz", "cell array");
   return -1;
 }
 
 Cell
diff --git a/src/Cell.h b/src/Cell.h
--- a/src/Cell.h
+++ b/src/Cell.h
@@ -84,16 +84,18 @@ public:
   Cell index (idx_vector& i, idx_vector& j, int resize_ok = 0,
 	      const octave_value& rfv = resize_fill_value ()) const
     { return Cell (ArrayN<octave_value>::index (i, j, resize_ok, rfv)); }
 
   Cell index (Array<idx_vector>& ra_idx, int resize_ok = 0,
 	      const octave_value& rfv = resize_fill_value ()) const
     { return Cell (ArrayN<octave_value>::index (ra_idx, resize_ok, rfv)); }
 
+  Cell& delete_elements (const octave_value_list& idx);
+
   Cell& assign (const octave_value_list& idx, const Cell& rhs,
 		const octave_value& fill_val = octave_value ());
 
   Cell reshape (const dim_vector& new_dims) const
     { return ArrayN<octave_value>::reshape (new_dims); }
 
   octave_idx_type nnz (void) const;
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2008-10-02  Jaroslav Hajek <highegg@gmail.com>
+
+	* Cell.h (Cell::delete_elements): Declare new member function.
+	* Cell.h (Cell::delete_elements): Define it.
+	* oct-map.cc (Octave_map::maybe_delete_elements): Call delete_elements
+	instead of assign with empty Cell.
+
 2008-10-02  John W. Eaton  <jwe@octave.org>
 
 	* pt-arg-list.cc (tree_argument_list::convert_to_const_vector):
 	Don't insert undefined elements in return list.
 
 2008-09-30  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-str-mat.h (octave-char-matrix-str::assign): Remove declaration.
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -285,17 +285,17 @@ Octave_map::maybe_delete_elements (const
   octave_idx_type len = t_keys.length ();
 
   if (len > 0)
     {
       for (octave_idx_type i = 0; i < len; i++)
 	{
 	  std::string k = t_keys[i];
 
-	  map[k] = contents(k).assign (idx, Cell());
+	  map[k] = contents(k).delete_elements (idx);
 
 	  if (error_state)
 	    break;
 	}
 
       if (!error_state)
 	dimensions = contents(t_keys[0]).dims();
     }
