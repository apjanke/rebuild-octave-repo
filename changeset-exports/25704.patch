# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1532978423 14400
#      Mon Jul 30 15:20:23 2018 -0400
# Branch stable
# Node ID 96584a825b0fda01e01f4d0f9d32637907621d3d
# Parent  cfc32b131755c3c3612922f06a97524774604d25
avoid alignment warning on solaris systems (bug #54389)

* oct-base64.cc (base64_decode): Declare pointer to output as double.
Cast address of pointer to char ** in call to
octave_base64_decode_alloc_wrapper instead of in call to std::copy.

diff --git a/liboctave/util/oct-base64.cc b/liboctave/util/oct-base64.cc
--- a/liboctave/util/oct-base64.cc
+++ b/liboctave/util/oct-base64.cc
@@ -54,41 +54,43 @@ namespace octave
     return ret;
   }
 
   Array<double>
   base64_decode (const std::string& str)
   {
     Array<double> retval;
 
-    char *out;
+    double *out;
     size_t outlen;
 
-    bool ok = octave_base64_decode_alloc_wrapper (str.data (), str.length (),
-                                                  &out, &outlen);
+    bool ok
+      = octave_base64_decode_alloc_wrapper (str.data (), str.length (),
+                                            reinterpret_cast<char **> (&out),
+                                            &outlen);
 
     if (! ok)
       (*current_liboctave_error_handler)
         ("base64_decode: input was not valid base64");
+
     if (! out)
       (*current_liboctave_error_handler)
         ("base64_decode: memory allocation error");
 
     if ((outlen % (sizeof (double) / sizeof (char))) != 0)
       {
         ::free (out);
         (*current_liboctave_error_handler)
           ("base64_decode: incorrect input size");
       }
     else
       {
         octave_idx_type len = (outlen * sizeof (char)) / sizeof (double);
         retval.resize (dim_vector (1, len));
-        double *dout = reinterpret_cast<double *> (out);
-        std::copy (dout, dout + len, retval.fortran_vec ());
+        std::copy (out, out + len, retval.fortran_vec ());
         ::free (out);
       }
 
     return retval;
   }
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
