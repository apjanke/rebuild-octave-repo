# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1285745996 14400
#      Wed Sep 29 03:39:56 2010 -0400
# Node ID cc3aad9dd3ef3b8d35f26d7edf23b0c6451b700a
# Parent  757249bb48881febaaf923b7131cd618261b7e33
dispatch.cc, fltk_backend.cc, regexp.cc: use octave_scalar_map instead of Octave_map

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2010-09-29  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/dispatch.cc (Fdispatch): Use octave_scalar_map
+	instead of Octave_map.
+	* DLD-FUNCTIONS/fltk_backend.cc (plot_window::handle): Likewise.
+	* DLD-FUNCTIONS/regexp.cc (octregexp): Likewise.
+
 2010-09-29  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/eigs.cc (Feigs): Use octave_scalar_map instead
 	of Octave_map.
 
 2010-09-29  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/getpwent.cc (mk_pw_map): Use octave_scalar_map
diff --git a/src/DLD-FUNCTIONS/dispatch.cc b/src/DLD-FUNCTIONS/dispatch.cc
--- a/src/DLD-FUNCTIONS/dispatch.cc
+++ b/src/DLD-FUNCTIONS/dispatch.cc
@@ -151,17 +151,17 @@ for @var{f}.\n\
               for (size_t i = 0; i < len; i++)
                 {
                   type_field(i) = p->first;
                   name_field(i) = p->second;
 
                   p++;
                 }
 
-              Octave_map m;
+              octave_scalar_map m;
 
               m.assign ("type", type_field);
               m.assign ("name", name_field);
 
               retval = m;
             }
           else
             symbol_table::print_dispatch (octave_stdout, f);
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/fltk_backend.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/fltk_backend.cc
@@ -644,20 +644,20 @@ private:
       case FL_KEYDOWN:
         {
           int key = Fl::event_key ();
 
           shift |= key2shift (key);
           int key_a = key2ascii (key);
           if (key_a && fp.get_keypressfcn ().is_defined ()) 
             {
-              Octave_map evt;
-              evt.assign ("Character", octave_value (key_a));
-              evt.assign ("Key", octave_value (std::tolower (key_a)));
-              evt.assign ("Modifier", octave_value (modifier2cell ()));
+              octave_scalar_map evt;
+              evt.assign ("Character", key_a);
+              evt.assign ("Key", std::tolower (key_a));
+              evt.assign ("Modifier", modifier2cell ());
               fp.execute_keypressfcn (evt);
             }
           switch (key)
             {
             case 'a':
             case 'A':
               axis_auto ();
             break;
@@ -686,20 +686,20 @@ private:
       case FL_KEYUP:
         {
           int key = Fl::event_key ();
 
           shift &= (~key2shift (key));
           int key_a = key2ascii (key);
           if (key_a && fp.get_keyreleasefcn ().is_defined ())
             {
-              Octave_map evt;
-              evt.assign ("Character", octave_value (key_a));
-              evt.assign ("Key", octave_value (std::tolower (key_a)));
-              evt.assign ("Modifier", octave_value (modifier2cell ()));
+              octave_scalar_map evt;
+              evt.assign ("Character", key_a);
+              evt.assign ("Key", std::tolower (key_a));
+              evt.assign ("Modifier", modifier2cell ());
               fp.execute_keyreleasefcn (evt);
             }
         }
         break;
 
       case FL_MOVE:
         pixel2status (pixel2axes_or_ca (Fl::event_x (), Fl::event_y ()),
                       Fl::event_x (), Fl::event_y ());
diff --git a/src/DLD-FUNCTIONS/regexp.cc b/src/DLD-FUNCTIONS/regexp.cc
--- a/src/DLD-FUNCTIONS/regexp.cc
+++ b/src/DLD-FUNCTIONS/regexp.cc
@@ -582,17 +582,17 @@ octregexp (const octave_value_list &args
   int sz = octregexp_list (args, nm, case_insensitive, lst, named, nopts, once);
 
   if (! error_state)
     {
       // Converted the linked list in the correct form for the return values
 
       octave_idx_type i = 0;
 #ifdef HAVE_PCRE
-      Octave_map nmap;
+      octave_scalar_map nmap;
       if (sz == 1)
         {
           for (int j = 0; j < named.length(); j++)
             nmap.assign (named(j), lst.begin()->named_token(j));
           retval(5) = nmap;
         }
       else
         {
@@ -602,17 +602,17 @@ octregexp (const octave_value_list &args
               Cell tmp(dim_vector (1, sz));
               for (const_iterator p = lst.begin(); p != lst.end(); p++)
                 tmp(i++) = p->named_token(j);
               nmap.assign (named(j), octave_value (tmp));
             }
           retval(5) = nmap;
         }
 #else
-      retval(5) = Octave_map();
+      retval(5) = octave_scalar_map ();
 #endif
 
       if (once)
         retval(4) = sz ? lst.front ().t : Cell();
       else
         {
           Cell t (dim_vector(1, sz));
           i = 0;
