# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1250525973 14400
#      Mon Aug 17 12:19:33 2009 -0400
# Node ID b859079d164409ce43faba5543e5ffb31bf1a340
# Parent  f3df413338c57072fc569698a1c755bfcee7cff5
configure and Makefile fixes for Windows

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2009-08-17  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* aclocal.m4 (OCTAVE_HDF5_DLL): Include HDF5_LIBS in LIBS before
+	attempting link.
+
 2009-08-15  Jaroslav Hajek  <highegg@gmail.com>
 
 	* aclocal.m4: Define the autoconf 2.64+ m4sugar macros `m4_ifblank'
 	and `m4_ifnblank' if on earlier autoconfs.
 
 2009-08-13  John W. Eaton  <jwe@octave.org>
 
 	* Makeconf.in (GLPK_CPPFLAGS, GLPK_LDFLAGS,
diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -977,22 +977,25 @@ dnl
 dnl Check whether using HDF5 DLL under Windows. This is done by
 dnl testing for a data symbol in the HDF5 library, which would
 dnl requires the definition of _HDF5USEDL_ under MSVC compiler.
 dnl
 AC_DEFUN([OCTAVE_HDF5_DLL], [
   AC_CACHE_CHECK([if _HDF5USEDLL_ needs to be defined],octave_cv_hdf5_dll, [
     AC_TRY_LINK([#include <hdf5.h>], [hid_t x = H5T_NATIVE_DOUBLE; return x],
       octave_cv_hdf5_dll=no, [
-      CFLAGS_old=$CFLAGS
+      save_CFLAGS="$CFLAGS"
       CFLAGS="$CFLAGS -DWIN32 -D_HDF5USEDLL_"
+      save_LIBS="$LIBS"
+      LIBS="$HDF5_LIBS $LIBS"
       AC_TRY_LINK([#include <hdf5.h>], [hid_t x = H5T_NATIVE_DOUBLE; return x],
         octave_cv_hdf5_dll=yes,
 	octave_cv_hdf5_dll=no)
-      CFLAGS=$CFLAGS_old])])
+      CFLAGS="$save_CFLAGS"
+      LIBS="$save_LIBS"])])
   if test "$octave_cv_hdf5_dll" = yes; then
     AC_DEFINE(_HDF5USEDLL_, 1, [Define if using HDF5 dll (Win32)])
   fi])
 dnl
 dnl Check whether HDF5 library has version 1.6 API functions.
 dnl
 AC_DEFUN([OCTAVE_HDF5_HAS_REQUIRED_API], [
   AC_CACHE_CHECK([whether HDF5 library has required API],
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2009-08-17  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* Makefile.in (OCTINTERP_LINK_DEPS): Include $(LIBCRUFT) and
+	$(LIBS) in the list.
+	(OCT_LINK_DEPS): Include $(LIBOCTAVE) and $(LIBCRUFT) in the list.
+	(eigs.oct, qz.oct): Add $(BLAS_LIBS) to LDFLAGS.
+	(ccolamd.oct, symbfact.oct): Add library-specific CPPFLAGS and
+	LDFLAGS variables to CPPFLAGS and LDFLAGS.
+
 2009-08-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-struct.h, ov-struct.cc: Revert to e08d72bb988e.
 	* ov-class.h, ov-class.cc: Partially revert to e08d72bb988e.
 	(octave_class::subsasgn): Cut&paste code from octave_struct::subsasgn
 	for the nested dot indexing.
 	* ov-usr-fcn.cc (Voptimize_subasgn_calls): Default to true.
 
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -289,19 +289,22 @@ ifeq ($(ENABLE_DYNAMIC_LINKING), true)
   OCTAVE_LIBS = $(LIBOCTINTERP)
 else
   OCTAVE_LIBS = $(LIBOCTINTERP) $(LIBOCTAVE) $(QHULL_LIBS) \
     $(GLPK_LIBS) $(MAGICK_LIBS) $(REGEX_LIBS) $(LIBCRUFT) \
     $(LIBPLPLOT) $(LIBGLOB)
 endif
 
 OCTINTERP_LINK_DEPS = $(RLD_FLAG) -L../liboctave $(LIBOCTAVE) \
+  -L../libcruft $(LIBCRUFT) $(LIBS) \
   $(HDF5_LIBS) $(ZLIB_LIBS) $(X11_LIBS) $(OPENGL_LIBS) $(CARBON_LIBS)
 
-OCT_LINK_DEPS = $(RLD_FLAG) -L. $(LIBOCTINTERP)
+OCT_LINK_DEPS = $(RLD_FLAG) -L. $(LIBOCTINTERP) \
+		-L../liboctave $(LIBOCTAVE) \
+		-L../libcruft $(LIBCRUFT)
 
 BUILT_DISTFILES = DOCSTRINGS oct-gperf.h parse.cc lex.cc y.tab.h \
 	$(OPT_HANDLERS) $(BUILT_EXTRAS)
 
 DISTFILES = Makefile.in ChangeLog genprops.awk mkdefs mkops mkgendoc \
 	mkbuiltins mk-errno-list mk-pkg-add \
 	defaults.h.in graphics.h.in mxarray.h.in oct-conf.h.in \
 	oct-errno.cc.in octave.gperf \
@@ -653,17 +656,20 @@ convhulln.oct: OCT_LINK_DEPS += $(QHULL_
   CPPFLAGS += $(QHULL_CPPFLAGS)
 __delaunayn__.oct: OCT_LINK_DEPS += $(QHULL_LDFLAGS) $(QHULL_LIBS)
 
 __voronoi__.d __voronoi__.df __voronoi__.o pic/__voronoi__.o: \
   CPPFLAGS += $(QHULL_CPPFLAGS)
 __voronoi__.oct: OCT_LINK_DEPS += $(QHULL_LDFLAGS) $(QHULL_LIBS)
 
 eigs.d eigs.df eigs.o pic/eigs.o: CPPFLAGS += $(ARPACK_CPPFLAGS)
-eigs.oct: OCT_LINK_DEPS += $(ARPACK_LDFLAGS) $(ARPACK_LIBS)
+eigs.oct: OCT_LINK_DEPS += $(ARPACK_LDFLAGS) $(ARPACK_LIBS) $(BLAS_LIBS)
+
+qz.d qz.df qz.o pic/qz.o:
+qz.oct: OCT_LINK_DEPS += $(BLAS_LIBS)
 
 qr.d qr.df qr.o pic/qr.o: CPPFLAGS += $(QRUPDATE_CPPFLAGS)
 qr.oct: OCT_LINK_DEPS += $(QRUPDATE_LDFLAGS) $(QRUPDATE_LIBS)
 
 chol.d chol.df chol.o pic/chol.o: CPPFLAGS += $(QRUPDATE_CPPFLAGS)
 chol.oct: OCT_LINK_DEPS += $(QRUPDATE_LDFLAGS) $(QRUPDATE_LIBS)
 
 regexp.d regexp.df regexp.o pic/regexp.o: CPPFLAGS += $(REGEX_CPPFLAGS)
@@ -681,16 +687,22 @@ fltk_backend.oct: \
   OCT_LINK_DEPS += $(GRAPHICS_LDFLAGS) $(GRAPHICS_LIBS) $(FT2_LDFLAGS) $(FT2_LIBS)
 
 amd.d amd.df pic/amd.o amd.o: CPPFLAGS += $(SPARSE_CPPFLAGS)
 amd.oct: OCT_LINK_DEPS += $(SPARSE_LDFLAGS) $(SPARSE_LIBS)
 
 colamd.d colamd.df pic/colamd.o colamd.o: CPPFLAGS += $(SPARSE_CPPFLAGS)
 colamd.oct: OCT_LINK_DEPS += $(SPARSE_LDFLAGS) $(SPARSE_LIBS)
 
+ccolamd.d ccolamd.df pic/ccolamd.o ccolamd.o: CPPFLAGS += $(SPARSE_CPPFLAGS)
+ccolamd.oct: OCT_LINK_DEPS += $(SPARSE_LDFLAGS) $(SPARSE_LIBS)
+
+symbfact.d symbfact.df pic/symbfact.o symbfact.o: CPPFLAGS += $(SPARSE_CPPFLAGS)
+symbfact.oct: OCT_LINK_DEPS += $(SPARSE_LDFLAGS) $(SPARSE_LIBS)
+
 dmperm.d dmperm.df pic/dmperm.o dmperm.o: CPPFLAGS += $(SPARSE_CPPFLAGS)
 dmperm.oct: OCT_LINK_DEPS += $(SPARSE_LDFLAGS) $(SPARSE_LIBS)
 
 symrcm.d symrcm.df pic/symrcm.o symrcm.o: CPPFLAGS += $(SPARSE_CPPFLAGS)
 symrcm.oct: OCT_LINK_DEPS += $(SPARSE_LDFLAGS) $(SPARSE_LIBS)
 
 qr.d qr.df pic/qr.o qr.o: CPPFLAGS += $(SPARSE_CPPFLAGS)
 qr.oct: OCT_LINK_DEPS += $(SPARSE_LDFLAGS) $(SPARSE_LIBS)
