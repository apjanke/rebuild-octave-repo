# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1384152597 18000
#      Mon Nov 11 01:49:57 2013 -0500
# Node ID 8c33abdd2f9a7dafab4745a4587f5c4b4ddf4069
# Parent  185038fe7a164f04d134ef1afa928a18a33410e1
maint: Avoid using NULL in C++ code.

* qtinfo/parser.cc, profiler.cc, profiler.h, txt-eng-ft.cc,
__init_fltk__.cc, ov-fcn-handle.cc, ov-java.cc, mkoctfile.in.cc:
Avoid using NULL in C++ code.

diff --git a/libgui/src/qtinfo/parser.cc b/libgui/src/qtinfo/parser.cc
--- a/libgui/src/qtinfo/parser.cc
+++ b/libgui/src/qtinfo/parser.cc
@@ -71,40 +71,40 @@ QString
 parser::get_info_path ()
 {
   return _info_path;
 }
 
 QIODevice *
 parser::open_file (QFileInfo & file_info)
 {
-  QIODevice *iodevice=NULL;
+  QIODevice *iodevice = 0;
   if ( _compressors_map.contains(file_info.suffix ()))
     {
       QProcess gzip;
       gzip.start (_compressors_map.value (file_info.suffix ()).arg (file_info.absoluteFilePath ()));
 
       if (!gzip.waitForFinished ())
-        return NULL;
+        return 0;
 
       QByteArray result = gzip.readAll ();
 
       QBuffer *io = new QBuffer (this);
       io->setData (result);
 
       if (!io->open (QIODevice::ReadOnly | QIODevice::Text))
-        return NULL;
+        return 0;
 
       iodevice = io;
     }
   else
     {
       QFile *io = new QFile (file_info.absoluteFilePath ());
       if (!io->open (QIODevice::ReadOnly | QIODevice::Text))
-        return NULL;
+        return 0;
       iodevice = io;
     }
 
   return iodevice;
 }
 
 int
 parser::is_ref (const QString& node)
@@ -135,17 +135,17 @@ parser::search_node (const QString& node
   if (_node_map.contains (node))
     {
       int pos = _node_map [node].pos;
       int realPos;
 
       real_position (pos, file_info, realPos);
 
       QIODevice *io = open_file (file_info);
-      if (io == NULL)
+      if (! io)
         {
           return QString ();
         }
 
       seek (io, realPos);
 
       QString text = get_next_node (io);
       if (!text.isEmpty())
@@ -422,17 +422,17 @@ parser::parse_info_map ()
   QRegExp re_files ("([^:]+): (\\d+)\n");
   int foundCount = 0;
 
   for (int i = 0; i < _info_files.size (); i++)
     {
       QFileInfo fileInfo = _info_files.at (i);
 
       QIODevice *io = open_file (fileInfo);
-      if (io == NULL)
+      if (! io)
         {
           continue;
         }
 
       QString nodeText;
       while (! (nodeText=get_next_node (io)).isEmpty () && foundCount < 2)
         {
           QString first_line = get_first_line (nodeText);
@@ -567,17 +567,17 @@ parser::global_search (const QString& te
   results.append ("<html><body>\n<h1>Search results</h1>\n<b>Results for:</b> ");
   results.append (text);
   results.append ("<br>\n");
 
   for (int i = 0; i < _info_files.size (); i++)
     {
       QFileInfo file_info = _info_files.at (i);
       QIODevice *io = open_file (file_info);
-      if (io == NULL)
+      if (! io)
         {
           continue;
         }
 
       QString node_text;
       while ( !(node_text = get_next_node (io)).isEmpty ())
         {
           QString firstLine = get_first_line (node_text);
diff --git a/libinterp/corefcn/profiler.cc b/libinterp/corefcn/profiler.cc
--- a/libinterp/corefcn/profiler.cc
+++ b/libinterp/corefcn/profiler.cc
@@ -187,33 +187,33 @@ profile_data_accumulator::tree_node::get
   retval.assign ("NumCalls", rv_calls);
   retval.assign ("Children", rv_children);
 
   return retval;
 }
 
 profile_data_accumulator::profile_data_accumulator ()
   : known_functions (), fcn_index (),
-    enabled (false), call_tree (NULL), last_time (-1.0)
+    enabled (false), call_tree (0), last_time (-1.0)
 {}
 
 profile_data_accumulator::~profile_data_accumulator ()
 {
   if (call_tree)
     delete call_tree;
 }
 
 void
 profile_data_accumulator::set_active (bool value)
 {
   if (value)
     {
       // Create a call-tree top-node if there isn't yet one.
       if (!call_tree)
-        call_tree = new tree_node (NULL, 0);
+        call_tree = new tree_node (0, 0);
 
       // Let the top-node be the active one.  This ensures we have a clean
       // fresh start collecting times.
       active_fcn = call_tree;
     }
   else
     {
       // Make sure we start with fresh timing if we're re-enabled later.
@@ -282,17 +282,17 @@ profile_data_accumulator::reset (void)
     }
 
   known_functions.clear ();
   fcn_index.clear ();
 
   if (call_tree)
     {
       delete call_tree;
-      call_tree = NULL;
+      call_tree = 0;
     }
 
   last_time = -1.0;
 }
 
 octave_value
 profile_data_accumulator::get_flat (void) const
 {
diff --git a/libinterp/corefcn/profiler.h b/libinterp/corefcn/profiler.h
--- a/libinterp/corefcn/profiler.h
+++ b/libinterp/corefcn/profiler.h
@@ -113,17 +113,17 @@ private:
     // then-active node, which is our parent.
     tree_node* exit (octave_idx_type);
 
     void build_flat (flat_profile&) const;
 
     // Get the hierarchical profile for this node and its children.  If total
     // is set, accumulate total time of the subtree in that variable as
     // additional return value.
-    octave_value get_hierarchical (double* total = NULL) const;
+    octave_value get_hierarchical (double* total = 0) const;
 
   private:
 
     tree_node* parent;
     octave_idx_type fcn_id;
 
     typedef std::map<octave_idx_type, tree_node*> child_map;
     child_map children;
diff --git a/libinterp/corefcn/txt-eng-ft.cc b/libinterp/corefcn/txt-eng-ft.cc
--- a/libinterp/corefcn/txt-eng-ft.cc
+++ b/libinterp/corefcn/txt-eng-ft.cc
@@ -658,17 +658,17 @@ ft_render::visit (text_element_string& e
               else
                 previous = glyph_index;
             }
           else
             {
               if (r != 0)
                 ::warning ("ft_render: failed to decode string `%s' with "
                            "locale `%s'", str.c_str (),
-                           std::setlocale (LC_CTYPE, NULL));
+                           std::setlocale (LC_CTYPE, 0));
               break;
             }
         }
     }
 }
 
 void
 ft_render::visit (text_element_list& e)
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -285,17 +285,17 @@ public:
   {
     //returns the number of visible menu items
     int len = menubar->size ();
     int n = 0;
     for (int t = 0; t < len; t++ )
       {
         const Fl_Menu_Item *m = static_cast<const Fl_Menu_Item*> (&
                                 (menubar->menu ()[t]));
-        if ((m->label () != NULL) && m->visible ())
+        if (m->label () && m->visible ())
           n++;
       }
 
     return n;
   }
 
   void show (void)
   {
@@ -332,17 +332,17 @@ public:
             menupath += m->label ();
 
             if (menupath.compare (findname) == 0 )
               return (t);
           }
         else
           {
             // End of submenu? Pop back one level.
-            if (m->label () == NULL)
+            if (m->label ())
               {
                 std::size_t idx = menupath.find_last_of ("/");
                 if (idx != std::string::npos)
                   menupath.erase (idx);
                 else
                   menupath.clear ();
                 continue;
               }
@@ -416,17 +416,17 @@ public:
 
   void update_accelerator (uimenu::properties& uimenup)
   {
     std::string fltk_label = uimenup.get_fltk_label ();
     if (!fltk_label.empty ())
       {
         Fl_Menu_Item* item = const_cast<Fl_Menu_Item*> (menubar->find_item (
                                fltk_label.c_str ()));
-        if (item != NULL)
+        if (item)
           {
             std::string acc = uimenup.get_accelerator ();
             if (acc.length () > 0)
               {
                 int key = FL_CTRL + acc[0];
                 item->shortcut (key);
               }
           }
@@ -435,52 +435,52 @@ public:
 
   void update_callback (uimenu::properties& uimenup)
   {
     std::string fltk_label = uimenup.get_fltk_label ();
     if (!fltk_label.empty ())
       {
         Fl_Menu_Item* item = const_cast<Fl_Menu_Item*> (menubar->find_item (
                                fltk_label.c_str ()));
-        if (item != NULL)
+        if (item)
           {
             if (!uimenup.get_callback ().is_empty ())
               item->callback (static_cast<Fl_Callback*> (script_cb),
                               static_cast<void*> (&uimenup));
             else
-              item->callback (NULL, static_cast<void*> (0));
+              item->callback (0, static_cast<void*> (0));
           }
       }
   }
 
   void update_enable (uimenu::properties& uimenup)
   {
     std::string fltk_label = uimenup.get_fltk_label ();
     if (!fltk_label.empty ())
       {
         Fl_Menu_Item* item = const_cast<Fl_Menu_Item*> (menubar->find_item (
                                fltk_label.c_str ()));
-        if (item != NULL)
+        if (item)
           {
             if (uimenup.is_enable ())
               item->activate ();
             else
               item->deactivate ();
           }
       }
   }
 
   void update_foregroundcolor (uimenu::properties& uimenup)
   {
     std::string fltk_label = uimenup.get_fltk_label ();
     if (!fltk_label.empty ())
       {
         Fl_Menu_Item* item = const_cast<Fl_Menu_Item*> (menubar->find_item (
                                fltk_label.c_str ()));
-        if (item != NULL)
+        if (item)
           {
             Matrix rgb = uimenup.get_foregroundcolor_rgb ();
 
             uchar r = static_cast<uchar> (gnulib::floor (rgb (0) * 255));
             uchar g = static_cast<uchar> (gnulib::floor (rgb (1) * 255));
             uchar b = static_cast<uchar> (gnulib::floor (rgb (2) * 255));
 
             item->labelcolor (fl_rgb_color (r, g, b));
@@ -499,17 +499,17 @@ public:
         int itemflags = 0, idx;
         int curr_idx = find_index_by_name (fltk_label.c_str ());
 
         for (idx = curr_idx - 1; idx >= 0; idx--)
           {
             Fl_Menu_Item* item
               = const_cast<Fl_Menu_Item*> (&menubar->menu () [idx]);
             itemflags = item->flags;
-            if (item->label () != NULL)
+            if (item->label ())
               break;
           }
 
         if (idx >= 0 && idx < menubar->size ())
           {
             if (uimenup.is_separator ())
               {
                 if (idx >= 0 && !(itemflags & FL_SUBMENU))
@@ -523,17 +523,17 @@ public:
 
   void update_visible (uimenu::properties& uimenup)
   {
     std::string fltk_label = uimenup.get_fltk_label ();
     if (!fltk_label.empty ())
       {
         Fl_Menu_Item* item
           = const_cast<Fl_Menu_Item*> (menubar->find_item (fltk_label.c_str ()));
-        if (item != NULL)
+        if (item)
           {
             if (uimenup.is_visible ())
               item->show ();
             else
               item->hide ();
           }
       }
   }
@@ -546,29 +546,17 @@ public:
     if (!fltk_label.empty ())
       {
         bool item_added = false;
         do
           {
             const Fl_Menu_Item* item
               = menubar->find_item (fltk_label.c_str ());
 
-            if (item == NULL)
-              {
-                Matrix uimenu_ch = find_uimenu_children (uimenup);
-                int len = uimenu_ch.numel ();
-                int flags = 0;
-                if (len > 0)
-                  flags = FL_SUBMENU;
-                if (len == 0 && uimenup.is_checked ())
-                  flags += FL_MENU_TOGGLE + FL_MENU_VALUE;
-                menubar->add (fltk_label.c_str (), 0, 0, 0, flags);
-                item_added = true;
-              }
-            else
+            if (item)
               {
                 //avoid duplicate menulabels
                 std::size_t idx1 = fltk_label.find_last_of ("(");
                 std::size_t idx2 = fltk_label.find_last_of (")");
                 int len = idx2 - idx1;
                 int val = 1;
                 if (len > 0)
                   {
@@ -577,16 +565,28 @@ public:
                     val = atoi (valstr.c_str ());
                     if (val > 0 && val < 99)
                       val++;
                   }
                 std::ostringstream valstream;
                 valstream << val;
                 fltk_label += "(" + valstream.str () + ")";
               }
+            else
+              {
+                Matrix uimenu_ch = find_uimenu_children (uimenup);
+                int len = uimenu_ch.numel ();
+                int flags = 0;
+                if (len > 0)
+                  flags = FL_SUBMENU;
+                if (len == 0 && uimenup.is_checked ())
+                  flags += FL_MENU_TOGGLE + FL_MENU_VALUE;
+                menubar->add (fltk_label.c_str (), 0, 0, 0, flags);
+                item_added = true;
+              }
           }
         while (!item_added);
         uimenup.set_fltk_label (fltk_label);
       }
   }
 
   void add_to_menu (uimenu::properties& uimenup)
   {
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -1879,18 +1879,18 @@ octave_fcn_binder::octave_fcn_binder (co
 octave_fcn_handle *
 octave_fcn_binder::maybe_binder (const octave_value& f)
 {
   octave_fcn_handle *retval = 0;
 
   octave_user_function *usr_fcn = f.user_function_value (false);
   tree_parameter_list *param_list = usr_fcn ? usr_fcn->parameter_list () : 0;
 
-  tree_statement_list *cmd_list = NULL;
-  tree_expression *body_expr = NULL;
+  tree_statement_list *cmd_list = 0;
+  tree_expression *body_expr = 0;
 
   if (usr_fcn)
     {
       cmd_list = usr_fcn->body ();
       if (cmd_list)
         {
           // Verify that body is a single expression (always true in theory).
           body_expr = (cmd_list->length () == 1
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -236,29 +236,29 @@ get_module_filename (HMODULE hMod)
   return (found ? retval : "");
 }
 
 static void
 set_dll_directory (const std::string& dir = "")
 {
   typedef BOOL (WINAPI *dllfcn_t) (LPCTSTR path);
 
-  static dllfcn_t dllfcn = NULL;
+  static dllfcn_t dllfcn = 0;
   static bool first = true;
 
   if (! dllfcn && first)
     {
       HINSTANCE hKernel32 = GetModuleHandle ("kernel32");
       dllfcn = reinterpret_cast<dllfcn_t> (GetProcAddress (hKernel32,
                                            "SetDllDirectoryA"));
       first = false;
     }
 
   if (dllfcn)
-    dllfcn (dir.empty () ? NULL : dir.c_str ());
+    dllfcn (dir.empty () ? 0 : dir.c_str ());
 }
 #endif
 
 static std::string
 initial_java_dir (void)
 {
   static std::string java_dir;
 
@@ -419,26 +419,35 @@ restore_fpu_state (void)
 static void
 initialize_jvm (void)
 {
   // Most of the time JVM already exists and has been initialized.
   if (jvm)
     return;
 
   JNIEnv *current_env;
-  const char *static_locale = setlocale (LC_ALL, NULL);
+  const char *static_locale = setlocale (LC_ALL, 0);
   const std::string locale (static_locale);
 
 #if defined (__WIN32__)
 
   HMODULE hMod = GetModuleHandle ("jvm.dll");
   std::string jvm_lib_path;
   std::string old_cwd;
 
-  if (hMod == NULL)
+  if (hMod)
+    {
+      // JVM seems to be already loaded, better to use that DLL instead
+      // of looking in the registry, to avoid opening a different JVM.
+      jvm_lib_path = get_module_filename (hMod);
+
+      if (jvm_lib_path.empty ())
+        throw std::string ("unable to find Java Runtime Environment");
+    }
+  else
     {
       // In windows, find the location of the JRE from the registry
       // and load the symbol from the dll.
       std::string key, value;
 
       key = "software\\javasoft\\java runtime environment";
 
       value = octave_env::getenv ("JAVA_VERSION");
@@ -467,25 +476,16 @@ initialize_jvm (void)
           jvm_bin_path = (jvm_bin_path + std::string ("\\bin"));
 
           old_cwd = octave_env::get_current_directory ();
 
           set_dll_directory (jvm_bin_path);
           octave_env::chdir (jvm_bin_path);
         }
     }
-  else
-    {
-      // JVM seems to be already loaded, better to use that DLL instead
-      // of looking in the registry, to avoid opening a different JVM.
-      jvm_lib_path = get_module_filename (hMod);
-
-      if (jvm_lib_path.empty ())
-        throw std::string ("unable to find Java Runtime Environment");
-    }
 
 #else  // Not Win32 system
 
   // JAVA_LDPATH determined by configure and set in config.h
 #if defined (__APPLE__)
   std::string jvm_lib_path = JAVA_LDPATH + std::string ("/libjvm.dylib");
 #else
   std::string jvm_lib_path = JAVA_LDPATH + std::string ("/libjvm.so");
@@ -539,17 +539,17 @@ initialize_jvm (void)
 
       switch (jvm->GetEnv (reinterpret_cast<void **> (&current_env), JNI_VERSION_1_2))
         {
         case JNI_EDETACHED:
           // Attach the current thread
           JavaVMAttachArgs vm_args;
           vm_args.version = JNI_VERSION_1_2;
           vm_args.name = const_cast<char *> ("octave");
-          vm_args.group = NULL;
+          vm_args.group = 0;
           if (jvm->AttachCurrentThread (reinterpret_cast<void **> (&current_env),
                                         &vm_args) < 0)
             throw std::string ("JVM internal error, unable to attach octave to existing JVM");
           break;
 
         case JNI_EVERSION:
           throw std::string ("JVM internal error, the required JNI version is not supported");
           break;
@@ -1590,17 +1590,17 @@ octave_java::dims (void) const
     return compute_array_dimensions (current_env, java_object);
   else
     return dim_vector (1, 1);
 }
 
 JNIEnv *
 octave_java::thread_jni_env (void)
 {
-  JNIEnv *env = NULL;
+  JNIEnv *env = 0;
 
   if (jvm)
     jvm->GetEnv (reinterpret_cast<void **> (&env), JNI_VERSION_1_2);
 
   return env;
 }
 
 octave_value_list
diff --git a/src/mkoctfile.in.cc b/src/mkoctfile.in.cc
--- a/src/mkoctfile.in.cc
+++ b/src/mkoctfile.in.cc
@@ -91,20 +91,20 @@ get_line (FILE *fp)
     return string (&buf[0], idx);
 }
 
 
 static string
 get_variable (const char *name, const string& defval)
 {
   const char *val = getenv (name);
-  if (val == NULL || val[0] == '\0')
+  if (val && *val)
+    return string (val);
+  else
     return defval;
-  else
-    return string (val);
 }
 
 static string
 quote_path (const string& s)
 {
   if (s.find (' ') != string::npos && s[0] != '"')
     return "\"" + s + "\"";
   else
