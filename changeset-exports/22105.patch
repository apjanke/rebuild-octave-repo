# HG changeset patch
# User Andreas Weber <andy.weber.aw@gmail.com>
# Date 1468486769 -7200
#      Thu Jul 14 10:59:29 2016 +0200
# Node ID 3f5f1234c619c4628270ed9ee5de93e633137606
# Parent  cfc260765ddfc7aca231c917f059927a770862e5
main: Fix typos "It's" -> "Its" and "it's" -> "its" (Bug #48508)

diff --git a/libinterp/corefcn/__ichol__.cc b/libinterp/corefcn/__ichol__.cc
--- a/libinterp/corefcn/__ichol__.cc
+++ b/libinterp/corefcn/__ichol__.cc
@@ -186,17 +186,17 @@ DEFUN (__ichol0__, args, ,
 Undocumented internal function.
 @end deftypefn */)
 {
   std::string michol = "off";
   if (args.length ())
     michol = args(1).string_value ();
 
   // In ICHOL0 algorithm the zero-pattern of the input matrix is preserved
-  // so it's structure does not change during the algorithm.  The same input
+  // so its structure does not change during the algorithm.  The same input
   // matrix is used to build the output matrix due to that fact.
   octave_value_list arg_list;
   if (! args(0).is_complex_type ())
     {
       SparseMatrix sm = args(0).sparse_matrix_value ();
       arg_list.append (sm);
       sm = feval ("tril", arg_list)(0).sparse_matrix_value ();
       ichol_0 <SparseMatrix, double, ichol_mult_real,
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -3141,17 +3141,17 @@ opengl_renderer::draw_image (const image
     }
   else
     {
       const ColumnVector p1h = xform.transform (x(1), y(1) + 1, 0);
       pix_dy = p1h(1) - p0(1);
       nor_dy = 1;
     }
 
-  // OpenGL won't draw any of the image if it's origin is outside the
+  // OpenGL won't draw any of the image if its origin is outside the
   // viewport/clipping plane so we must do the clipping ourselves.
 
   int j0, j1, i0, i1;
   j0 = 0, j1 = w;
   i0 = 0, i1 = h;
 
   float im_xmin = x(0) - nor_dx/2;
   float im_xmax = x(1) + nor_dx/2;
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -1688,17 +1688,17 @@ The function is a subfunction within an 
 The m-file that will be called to perform the function.  This field is empty
 for anonymous and built-in functions.
 @end table
 
 In addition, some function types may return more information in additional
 fields.
 
 @strong{Warning:} @code{functions} is provided for debugging purposes only.
-It's behavior may change in the future and programs should not depend on a
+Its behavior may change in the future and programs should not depend on a
 particular output.
 
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   octave_fcn_handle *fh = args(0).fcn_handle_value ("functions: FCN_HANDLE argument must be a function handle object");
diff --git a/scripts/sparse/treelayout.m b/scripts/sparse/treelayout.m
--- a/scripts/sparse/treelayout.m
+++ b/scripts/sparse/treelayout.m
@@ -105,17 +105,17 @@ function [x_coordinate, y_coordinate, he
     for i = 1:num_nodes
       vec_of_child(xhelp(tree(i)+1)) = i;
       xhelp(tree(i)+1) = xhelp(tree(i)+1) + 1;
     endfor
   else
     vec_of_child = permutation;
   endif
 
-  ## The number of "parent" (actual) node (it's descendants will be
+  ## The number of "parent" (actual) node (its descendants will be
   ## browse in the next iteration).
   par_number = 0;
 
   ## The x-coordinate of the left most descendant of "parent node"
   ## this value is increased in each leaf.
   left_most = 0;
 
   ## The level of "parent" node (root level is num_nodes).
diff --git a/scripts/sparse/treeplot.m b/scripts/sparse/treeplot.m
--- a/scripts/sparse/treeplot.m
+++ b/scripts/sparse/treeplot.m
@@ -73,17 +73,17 @@ function treeplot (tree, node_style = "k
     pos += num_children(i);
     stop(i) = pos;
   endfor
   for i = 1:num_nodes
     vec_of_child(xhelp(tree(i)+1)) = i;
     xhelp(tree(i)+1) = xhelp(tree(i)+1)+1;
   endfor
 
-  ## The number of "parent" (actual) node (it's descendants will be
+  ## The number of "parent" (actual) node (its descendants will be
   ## browse in the next iteration).
   par_number = 0;
 
   ## The x-coordinate of the left most descendant of "parent node"
   ## this value is increased in each leaf.
   left_most = 0;
 
   ## The level of "parent" node (root level is num_nodes).
