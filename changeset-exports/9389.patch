# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1245862293 -7200
#      Wed Jun 24 18:51:33 2009 +0200
# Node ID 0f85d95640574876077d3797377429c564079f5a
# Parent  5556563c6551c7696659315d987204e7867174a1
fix result class calculation in pt-mat.cc

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-06-24  Jaroslav Hajek  <highegg@gmail.com>
+
+	* pt-mat.cc (get_concat_class): Use empty string as zero value.
+	(tm_row_const_rep::tm_row_const_rep): Initialize class_nm to empty
+	string.
+	(tm_const::tm_const): Ditto.
+
 2009-06-24  John W. Eaton  <jwe@octave.org>
 
 	* pt-assign.cc (former_built_in_variables): Remove "ans" from the list.
 
 2009-06-24  Jaroslav Hajek  <highegg@gmail.com>
 
 	* unwind-prot.h (restore_var, restore_mem): Hide also copy
 	constructors.
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -63,24 +63,24 @@ private:
   {
   public:
 
     tm_row_const_rep (void)
       : count (1), dv (0, 0), all_str (false),
 	all_sq_str (false), all_dq_str (false),
 	some_str (false), all_real (false), all_cmplx (false),
 	all_mt (true), any_sparse (false), any_class (false),
-	class_nm (octave_base_value::static_class_name ()), ok (false)
+	class_nm (), ok (false)
     { }
 
     tm_row_const_rep (const tree_argument_list& row)
       : count (1), dv (0, 0), all_str (false), all_sq_str (false),
 	some_str (false), all_real (false), all_cmplx (false),
 	all_mt (true), any_sparse (false), any_class (false),
-	class_nm (octave_base_value::static_class_name ()), ok (false)
+	class_nm (), ok (false)
     { init (row); }
 
     ~tm_row_const_rep (void) { }
 
     int count;
 
     dim_vector dv;
 
@@ -190,18 +190,20 @@ private:
 
 std::string
 get_concat_class (const std::string& c1, const std::string& c2)
 {
   std::string retval = octave_base_value::static_class_name ();
 
   if (c1 == c2)
     retval = c1;
-  else if (c1 == retval)
+  else if (c1.empty ())
     retval = c2;
+  else if (c2.empty ())
+    retval = c1;
   else
     {
       bool c1_is_int = (c1 == "int8" || c1 == "uint8"
 			|| c1 == "int16" || c1 == "uint16"
 			|| c1 == "int32" || c1 == "uint32"
 			|| c1 == "int64" || c1 == "uint64");
       bool c2_is_int = (c2 == "int8" || c2 == "uint8"
 			|| c2 == "int16" || c2 == "uint16"
@@ -443,17 +445,17 @@ class
 tm_const : public octave_base_list<tm_row_const>
 {
 public:
 
   tm_const (const tree_matrix& tm)
     : dv (0, 0), all_str (false), all_sq_str (false), all_dq_str (false),
       some_str (false), all_real (false), all_cmplx (false),
       all_mt (true), any_sparse (false), any_class (false),
-      class_nm (octave_base_value::static_class_name ()), ok (false)
+      class_nm (), ok (false)
   { init (tm); }
 
   ~tm_const (void) { }
 
   octave_idx_type rows (void) const { return dv.elem (0); }
   octave_idx_type cols (void) const { return dv.elem (1); }
 
   dim_vector dims (void) const { return dv; }
