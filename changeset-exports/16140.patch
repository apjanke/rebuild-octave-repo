# HG changeset patch
# User Julien Bect <julien.bect@supelec.fr>
# Date 1361876805 -3600
#      Tue Feb 26 12:06:45 2013 +0100
# Node ID 797ac81586d1da502243583eb4f78c6a08a00367
# Parent  73a21ade0b6b7d6e45c973dfd4c745261d3a3a96
Modify pt-mat.cc to solve a problem related to vertcat/horzcat overloading.

* pt-mat.cc (tm_row_const::tm_row_const_rep::init): Do not check dimension
  consistency when at least one of the elements is an object (this was
  preventing horzcat overloading from working properly, see bug #38128).
  (tm_const::init): Same thing for vertical concatenation (this was
  preventing vertcat overloading from working properly, see bug #38128).

* test/classes/classes.tst: Add tests for the vertical and horizontal
  concatenation of objects when neither vertcat() nor horzcat() is
  overloaded.

diff --git a/doc/interpreter/contributors.in b/doc/interpreter/contributors.in
--- a/doc/interpreter/contributors.in
+++ b/doc/interpreter/contributors.in
@@ -5,16 +5,17 @@ Joel Andersson
 Muthiah Annamalai
 Marco Atzeri
 Shai Ayal
 Roger Banks
 Ben Barrowes
 Alexander Barth
 David Bateman
 Heinz Bauschke
+Julien Bect
 Roman Belov
 Karl Berry
 David Billinghurst
 Don Bindner
 Jakub Bogusz
 Moritz Borgmann
 Paul Boven
 Richard Bovey
diff --git a/libinterp/parse-tree/pt-mat.cc b/libinterp/parse-tree/pt-mat.cc
--- a/libinterp/parse-tree/pt-mat.cc
+++ b/libinterp/parse-tree/pt-mat.cc
@@ -397,17 +397,17 @@ tm_row_const::tm_row_const_rep::init (co
         {
           all_mt = false;
 
           if (first_elem)
             {
               first_elem = false;
               dv = this_elt_dv;
             }
-          else if (! dv.hvcat (this_elt_dv, 1))
+          else if ((! any_class) && (! dv.hvcat (this_elt_dv, 1)))
             {
               eval_error ("horizontal dimensions mismatch", dv, this_elt_dv);
               break;
             }
         }
     }
 
   ok = ! error_state;
@@ -639,17 +639,17 @@ tm_const::init (const tree_matrix& tm)
                    && this_elt_dv.length () == 2)
             {
               // FIXME: this is Octave's specialty. Character matrices allow
               // rows of unequal length.
               if (this_elt_nc > cols ())
                 dv(1) = this_elt_nc;
               dv(0) += this_elt_nr;
             }
-          else if (! dv.hvcat (this_elt_dv, 0))
+          else if ((!any_class) && (!dv.hvcat (this_elt_dv, 0)))
             {
               eval_error ("vertical dimensions mismatch", dv, this_elt_dv);
               return;
             }
         }
     }
 
   ok = ! error_state;
diff --git a/test/classes/classes.tst b/test/classes/classes.tst
--- a/test/classes/classes.tst
+++ b/test/classes/classes.tst
@@ -299,28 +299,46 @@
 %!assert (s1 <= (x1 + 1))
 %!assert (x1 <= (s1 + 1))
 
 %% Test overloaded gt (>=) for the Snork class
 %!assert (s1 >= (s1 - 1))
 %!assert (s1 >= (x1 - 1))
 %!assert (x1 >= (s1 - 1))
 
+%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
+%% Testing horizontal & vertical concatenation %%
+%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
+
 %% Test overloaded vertcat() for the Snork class
 %% See bug #38170 (http://savannah.gnu.org/bugs/?38170)
 %!test   s = [s1; s2];  assert (isa (s, 'Snork') && isequal (s.gick, [x1; x2]));
 %!xtest  s = [s1; x2];  assert (isa (s, 'Snork') && isequal (s.gick, [x1; x2]));
 %!xtest  s = [x1; s2];  assert (isa (s, 'Snork') && isequal (s.gick, [x1; x2]));
 
 %% Test overloaded horzcat() for the Snork class
 %% See bug #38170 (http://savannah.gnu.org/bugs/?38170)
 %!test   s = [s1 s2];  assert (isa (s, 'Snork') && isequal (s.gick, [x1 x2]));
 %!xtest  s = [s1 x2];  assert (isa (s, 'Snork') && isequal (s.gick, [x1 x2]));
 %!xtest  s = [x1 s2];  assert (isa (s, 'Snork') && isequal (s.gick, [x1 x2]));
 
+%% Test with the Blork class, where neither vertcat() nor horzcat() is overloaded
+%!shared x1, x2, x3
+%!test x1 = Blork();
+%!test x2 = [x1 x1];
+%!assert (isa (x2, 'Blork') && isequal (size (x2), [1 2]));
+%!test x2 = [x1 51];
+%!assert (isa (x2, 'Blork') && isequal (size (x2), [1 2]));
+%!test x3 = [x2; x2];
+%!assert (isa (x3, 'Blork') && isequal (size (x3), [2 2]));
+%!test x3 = [x2; [51 x1]];
+%!assert (isa (x3, 'Blork') && isequal (size (x3), [2 2]));
+%!error <dimension mismatch> x4 = [x1  x3];
+%!error <dimension mismatch> x4 = [x1; x3];
+
 %%%%%%%%%%%%%%%%%%%%%%%%
 %% Testing precedence %%
 %%%%%%%%%%%%%%%%%%%%%%%%
 
 %% default: leftmost object wins
 %!shared A, B
 %!test A = Snork(rand(2));
 %!test B = CPrecedenceTester1();  % no call to inferiorto/superiorto
