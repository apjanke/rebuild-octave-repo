# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1250999871 -7200
#      Sun Aug 23 05:57:51 2009 +0200
# Node ID 76ecc571879ea37c14fffada007d7b204b099155
# Parent  bda3513e7ba92cf3026eed6cf469fcd4c84c63d0
improve unop/binop implementation in data.cc

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2009-08-22  Jaroslav Hajek  <highegg@gmail.com>
+
+	* data.cc (UNARY_OP_DEFUN_BODY,
+	BINARY_OP_DEFUN_BODY, BINARY_ASSOC_OP_DEFUN_BODY): Remove.
+	(unary_op_defun_body, binary_op_defun_body,
+	binary_assoc_op_defun_body): New functions.
+	(Fnot, Fuplus, Fuminus, Ftranspose, Fctranspose): Use
+	unary_op_defun_body.
+	(Fminus, Fmrdivide, Fmpower, Fmldivide, Flt, Fle, Feq, Fge, Fgt, Fne,
+	Frdivide, Fpower, Fldivide): Use binary_op_defun_body.
+	(Fplus, Ftimes, Fmtimes, Fand, For): Use binary_assoc_op_defun_body.
+
 2009-08-21  Jaroslav Hajek  <highegg@gmail.com>
 
 	* OPERATORS/op-s-s.cc: Check for NaN in ! operator.
 	* OPERATORS/op-fs-fs.cc: Ditto.
 	* OPERATORS/op-cs-cs.cc: Ditto.
 	* OPERATORS/op-fcs-fcs.cc: Ditto.
 
 2009-08-17  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -4963,61 +4963,63 @@ column norms are computed.\n\
 %!shared m2, flo, fhi
 %! m2 = single([1,2;3,4]);
 %! flo = single(1e-300);
 %! fhi = single(1e+300);
 %!assert (norm(flo*m2,"fro"), single(sqrt(30)*flo), -eps('single'))
 %!assert (norm(fhi*m2,"fro"), single(sqrt(30)*fhi), -eps('single'))
 */
 
-#define UNARY_OP_DEFUN_BODY(F) \
- \
-  octave_value retval; \
- \
-  if (args.length () == 1) \
-    retval = F (args(0)); \
-  else \
-    print_usage (); \
- \
-  return retval
+static octave_value
+unary_op_defun_body (octave_value::unary_op op,
+                     const octave_value_list& args)
+{
+  octave_value retval;
+  if (args.length () == 1)
+    retval = do_unary_op (op, args(0));
+  else
+    print_usage ();
+
+  return retval;
+}
 
 DEFUN (not, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} not (@var{x})\n\
 This function is equivalent to @code{! x}.\n\
 @end deftypefn")
 {
-  UNARY_OP_DEFUN_BODY (op_not);
+  return unary_op_defun_body (octave_value::op_not, args);
 }
 
 DEFUN (uplus, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} uplus (@var{x})\n\
 This function is equivalent to @code{+ x}.\n\
 @end deftypefn")
 {
-  UNARY_OP_DEFUN_BODY (op_uplus);
+  return unary_op_defun_body (octave_value::op_uplus, args);
 }
 
 DEFUN (uminus, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} uminus (@var{x})\n\
 This function is equivalent to @code{- x}.\n\
 @end deftypefn")
 {
-  UNARY_OP_DEFUN_BODY (op_uminus);
+  return unary_op_defun_body (octave_value::op_uminus, args);
 }
 
 DEFUN (transpose, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} transpose (@var{x})\n\
 This function is equivalent to @code{x.'}.\n\
 @end deftypefn")
 {
-  UNARY_OP_DEFUN_BODY (op_transpose);
+  return unary_op_defun_body (octave_value::op_transpose, args);
 }
 
 /*
 
 %!assert (2.', 2);
 %!assert (2i.',2i);
 %!assert ([1:4].',[1;2;3;4]);
 %!assert ([1;2;3;4].',[1:4]);
@@ -5038,17 +5040,17 @@ This function is equivalent to @code{x.'
 */
 
 DEFUN (ctranspose, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ctranspose (@var{x})\n\
 This function is equivalent to @code{x'}.\n\
 @end deftypefn")
 {
-  UNARY_OP_DEFUN_BODY (op_hermitian);
+  return unary_op_defun_body (octave_value::op_hermitian, args);
 }
 
 /*
 
 %!assert (2', 2);
 %!assert (2i',-2i);
 %!assert ([1:4]',[1;2;3;4]);
 %!assert ([1;2;3;4]',[1:4]);
@@ -5063,69 +5065,85 @@ This function is equivalent to @code{x'}
 %!assert (single([1;2;3;4])',single([1:4]));
 %!assert (single([1,2;3,4])',single([1,3;2,4]));
 %!assert (single([1,2i;3,4])',single([1,3;-2i,4]));
 
 %!assert (ctranspose (single([1,2i;3,4])),single([1,3;-2i,4]));
 
 */
 
-#define BINARY_OP_DEFUN_BODY(F) \
- \
-  octave_value retval; \
- \
-  if (args.length () == 2) \
-    retval = F (args(0), args(1)); \
-  else \
-    print_usage (); \
- \
-  return retval
-
-#define BINARY_ASSOC_OP_DEFUN_BODY(F) \
- \
-  octave_value retval; \
-  octave_idx_type nargin = args.length (); \
- \
-  if (nargin >= 1) \
-    { \
-      retval = args (0); \
-      for (octave_idx_type i = 1; i < nargin; i++) \
-        retval = F (retval, args(i)); \
-    } \
-  else \
-    print_usage (); \
- \
-  return retval
-
+static octave_value
+binary_op_defun_body (octave_value::binary_op op,
+                      const octave_value_list& args)
+{
+  octave_value retval;
+
+  if (args.length () == 2)
+    retval = do_binary_op (op, args(0), args(1));
+  else
+    print_usage ();
+
+  return retval;
+}
+
+static octave_value
+binary_assoc_op_defun_body (octave_value::binary_op op,
+                            octave_value::assign_op aop,
+                            const octave_value_list& args)
+{
+  octave_value retval;
+  int nargin = args.length ();
+
+  switch (nargin)
+    {
+    case 0:
+      print_usage ();
+      break;
+    case 1:
+      retval = args(0);
+      break;
+    case 2:
+      retval = do_binary_op (op, args(0), args(1));
+     break;
+    default:
+     retval = do_binary_op (op, args(0), args(1));
+     for (int i = 2; i < nargin; i++)
+       retval.assign (aop, args(i));
+     break;
+    }
+
+  return retval;
+}
 
 DEFUN (plus, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} plus (@var{x}, @var{y})\n\
 @deftypefnx {Built-in Function} {} plus (@var{x1}, @var{x2}, @dots{})\n\
 This function is equivalent to @code{x + y}.\n\
 If more arguments are given, the summation is applied\n\
 cumulatively from left to right:\n\
 \n\
 @example\n\
   (@dots{}((x1 + x2) + x3) + @dots{})\n\
 @end example\n\
 \n\
 At least one argument is needed.\n\
 @end deftypefn")
 {
-  BINARY_ASSOC_OP_DEFUN_BODY (op_add);
+  return binary_assoc_op_defun_body (octave_value::op_add,
+                                     octave_value::op_add_eq, args);
 }
 
 DEFUN (minus, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} minus (@var{x}, @var{y})\n\
 This function is equivalent to @code{x - y}.\n\
 @end deftypefn")
 {
-  BINARY_OP_DEFUN_BODY (op_sub);
+  return binary_op_defun_body (octave_value::op_sub, args);
 }
 
 DEFUN (mtimes, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} mtimes (@var{x}, @var{y})\n\
 @deftypefnx {Built-in Function} {} mtimes (@var{x1}, @var{x2}, @dots{})\n\
 This function is equivalent to @code{x * y}.\n\
 If more arguments are given, the multiplication is applied\n\
@@ -5133,98 +5151,99 @@ cumulatively from left to right:\n\
 \n\
 @example\n\
   (@dots{}((x1 * x2) * x3) * @dots{})\n\
 @end example\n\
 \n\
 At least one argument is needed.\n\
 @end deftypefn")
 {
-  BINARY_ASSOC_OP_DEFUN_BODY (op_mul);
+  return binary_assoc_op_defun_body (octave_value::op_mul,
+                                     octave_value::op_mul_eq, args);
 }
 
 DEFUN (mrdivide, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} mrdivide (@var{x}, @var{y})\n\
 This function is equivalent to @code{x / y}.\n\
 @end deftypefn")
 {
-  BINARY_OP_DEFUN_BODY (op_div);
+  return binary_op_defun_body (octave_value::op_div, args);
 }
 
 DEFUN (mpower, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} mpower (@var{x}, @var{y})\n\
 This function is equivalent to @code{x ^ y}.\n\
 @end deftypefn")
 {
-  BINARY_OP_DEFUN_BODY (op_pow);
+  return binary_op_defun_body (octave_value::op_pow, args);
 }
 
 DEFUN (mldivide, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} mldivide (@var{x}, @var{y})\n\
 This function is equivalent to @code{x \\ y}.\n\
 @end deftypefn")
 {
-  BINARY_OP_DEFUN_BODY (op_ldiv);
+  return binary_op_defun_body (octave_value::op_ldiv, args);
 }
 
 DEFUN (lt, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} lt (@var{x}, @var{y})\n\
 This function is equivalent to @code{x < y}.\n\
 @end deftypefn")
 {
-  BINARY_OP_DEFUN_BODY (op_lt);
+  return binary_op_defun_body (octave_value::op_lt, args);
 }
 
 DEFUN (le, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} le (@var{x}, @var{y})\n\
 This function is equivalent to @code{x <= y}.\n\
 @end deftypefn")
 {
-  BINARY_OP_DEFUN_BODY (op_le);
+  return binary_op_defun_body (octave_value::op_le, args);
 }
 
 DEFUN (eq, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} eq (@var{x}, @var{y})\n\
 This function is equivalent to @code{x == y}.\n\
 @end deftypefn")
 {
-  BINARY_OP_DEFUN_BODY (op_eq);
+  return binary_op_defun_body (octave_value::op_eq, args);
 }
 
 DEFUN (ge, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ge (@var{x}, @var{y})\n\
 This function is equivalent to @code{x >= y}.\n\
 @end deftypefn")
 {
-  BINARY_OP_DEFUN_BODY (op_ge);
+  return binary_op_defun_body (octave_value::op_ge, args);
 }
 
 DEFUN (gt, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} gt (@var{x}, @var{y})\n\
 This function is equivalent to @code{x > y}.\n\
 @end deftypefn")
 {
-  BINARY_OP_DEFUN_BODY (op_gt);
+  return binary_op_defun_body (octave_value::op_gt, args);
 }
 
 DEFUN (ne, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ne (@var{x}, @var{y})\n\
 This function is equivalent to @code{x != y}.\n\
 @end deftypefn")
 {
-  BINARY_OP_DEFUN_BODY (op_ne);
+  return binary_op_defun_body (octave_value::op_ne, args);
 }
 
 DEFUN (times, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} times (@var{x}, @var{y})\n\
 @deftypefnx {Built-in Function} {} times (@var{x1}, @var{x2}, @dots{})\n\
 This function is equivalent to @code{x .* y}.\n\
 If more arguments are given, the multiplication is applied\n\
@@ -5232,44 +5251,45 @@ cumulatively from left to right:\n\
 \n\
 @example\n\
   (@dots{}((x1 .* x2) .* x3) .* @dots{})\n\
 @end example\n\
 \n\
 At least one argument is needed.\n\
 @end deftypefn")
 {
-  BINARY_ASSOC_OP_DEFUN_BODY (op_el_mul);
+  return binary_assoc_op_defun_body (octave_value::op_el_mul,
+                                     octave_value::op_el_mul_eq, args);
 }
 
 DEFUN (rdivide, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} rdivide (@var{x}, @var{y})\n\
 This function is equivalent to @code{x ./ y}.\n\
 @end deftypefn")
 {
-  BINARY_OP_DEFUN_BODY (op_el_div);
+  return binary_op_defun_body (octave_value::op_el_div, args);
 }
 
 DEFUN (power, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} power (@var{x}, @var{y})\n\
 This function is equivalent to @code{x .^ y}.\n\
 @end deftypefn")
 {
-  BINARY_OP_DEFUN_BODY (op_el_pow);
+  return binary_op_defun_body (octave_value::op_el_pow, args);
 }
 
 DEFUN (ldivide, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ldivide (@var{x}, @var{y})\n\
 This function is equivalent to @code{x .\\ y}.\n\
 @end deftypefn")
 {
-  BINARY_OP_DEFUN_BODY (op_el_ldiv);
+  return binary_op_defun_body (octave_value::op_el_ldiv, args);
 }
 
 DEFUN (and, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} and (@var{x}, @var{y})\n\
 @deftypefnx {Built-in Function} {} and (@var{x1}, @var{x2}, @dots{})\n\
 This function is equivalent to @code{x & y}.\n\
 If more arguments are given, the logical and is applied\n\
@@ -5277,17 +5297,18 @@ cumulatively from left to right:\n\
 \n\
 @example\n\
   (@dots{}((x1 & x2) & x3) & @dots{})\n\
 @end example\n\
 \n\
 At least one argument is needed.\n\
 @end deftypefn")
 {
-  BINARY_ASSOC_OP_DEFUN_BODY (op_el_and);
+  return binary_assoc_op_defun_body (octave_value::op_el_and,
+                                     octave_value::op_el_and_eq, args);
 }
 
 DEFUN (or, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} or (@var{x}, @var{y})\n\
 @deftypefnx {Built-in Function} {} or (@var{x1}, @var{x2}, @dots{})\n\
 This function is equivalent to @code{x | y}.\n\
 If more arguments are given, the logical or is applied\n\
@@ -5295,17 +5316,18 @@ cumulatively from left to right:\n\
 \n\
 @example\n\
   (@dots{}((x1 | x2) | x3) | @dots{})\n\
 @end example\n\
 \n\
 At least one argument is needed.\n\
 @end deftypefn")
 {
-  BINARY_ASSOC_OP_DEFUN_BODY (op_el_or);
+  return binary_assoc_op_defun_body (octave_value::op_el_or,
+                                     octave_value::op_el_or_eq, args);
 }
 
 static double tic_toc_timestamp = -1.0;
 
 DEFUN (tic, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} tic ()\n\
 @deftypefnx {Built-in Function} {} toc ()\n\
