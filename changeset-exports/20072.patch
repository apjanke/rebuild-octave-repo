# HG changeset patch
# User Rik <rik@octave.org>
# Date 1428766220 25200
#      Sat Apr 11 08:30:20 2015 -0700
# Node ID 8e42898f4d731f89e1e46d5f87462349c9515db0
# Parent  98d10871018ac1fbfd03ff757bc3ecbca5949e78
Don't throw classdef-to-struct warning during isequal (bug #43759).

* __isequal__.m: Turn off "Octave:classdef-to-struct" warning locally
as algorithm specifically relies on doing this.

diff --git a/scripts/general/private/__isequal__.m b/scripts/general/private/__isequal__.m
--- a/scripts/general/private/__isequal__.m
+++ b/scripts/general/private/__isequal__.m
@@ -36,17 +36,17 @@
 ## 2. If x and all other arguments have the same class, then check that the
 ##    number of dimensions and then the size of each dimension match.
 ##    If not all arguments share the same class, then verify that all of the
 ##    arguments belong to a comparable "numeric" class which includes
 ##    numeric, logical, and character arrays.  Check that number of dimensions
 ##    and size of each dimension match.
 ## 3. For each argument after x, compare it for equality with x:
 ##    a. struct     compare each member by name, not by order (recursive)
-##    b. object     converted to struct, and then compared as stated above
+##    b. object     convert to struct, and then compare as stated above
 ##    c. cell       compare each member by order (recursive)
 ##    d. char       compare each member with strcmp
 ##    e  fcn_handle compare using overloade 'eq' operator
 ##    f. <other>    compare each nonzero member, and assume NaN == NaN
 ##                  if nans_compare_equal is nonzero.
 
 function t = __isequal__ (nans_compare_equal, x, varargin)
 
@@ -73,16 +73,18 @@ function t = __isequal__ (nans_compare_e
     k = 1;
     do
       t = all (size (x,k) == cellfun ("size", varargin, k));
     until (!t || k++ == nd);
   endif
 
   ## From here on, compare objects as if they were structures.
   if (t && isobject (x))
+    ## Locally suppress class-to-struct warning.  We know what we are doing.
+    warning ("off", "Octave:classdef-to-struct", "local");
     x = builtin ("struct", x);
     for i = 1:numel (varargin)
       varargin{i} = builtin ("struct", varargin{i});
     endfor
   endif
 
   if (t)
     ## Check individual classes.
