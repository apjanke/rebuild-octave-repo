# HG changeset patch
# User jwe
# Date 1144311623 0
#      Thu Apr 06 08:20:23 2006 +0000
# Node ID a527e0f77aa5351370baaf78f391da76b11affb6
# Parent  2cd0af543e7a299c8ba593b5d0ebf35d0b64f730
[project @ 2006-04-06 08:20:21 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,50 @@
+2006-04-06  John W. Eaton  <jwe@octave.org>
+
+	* parse.y (Fmfilename): If no function is on the call stack check
+	to see whether we are reading a script file.
+
+	* ov-builtin.cc (octave_builtin::do_multi_index_op):
+	Use octave_call_stack instead of curr_function to save pointer to
+	current function.
+	* ov-mapper.cc (octave_mapper::do_multi_index_op): Likewise.
+	* ov-usr-fcn.cc (octave_user_function::do_multi_index_op): Likewise.
+
+	* pt-bp.h (MAYBE_DO_BREAKPOINT): Use octave_call_stack instead of
+	curr_function to get pointer to current function.
+	* pt-arg-list.cc (list::convert_to_const_vector): Likewise.
+	* variables.cc (Fmlock, Fmunlock, Fmislocked): Likewise.
+	* input.cc (get_user_input): Likewise.
+	* error.cc (warning_1, error_2): Likewise.  Only enter debug mode
+	if there is a scripting language caller.
+	* ov-usr-fcn.cc (Fva_arg, Fva_start, Fvr_val): Likewise.  Check
+	scripting language caller, not current function.
+
+	* toplev.cc (curr_caller_function, curr_function): Delete.
+	* toplev.h: Delete decls.
+
+	* ov-usr-fcn.cc (octave_user_function::do_multi_index_op):
+	Don't protect and set curr_caller_function.
+	* ov-builtin.cc (octave_builtin::do_multi_index_op): Likewise.
+	* ov-mapper.cc (octave_mapper::do_multi_index_op): Likewise.
+
+	* variables.cc (do_who): Use octave_call_stack instead of
+	curr_caller_function to get pointer to calling function.
+	* input.cc (get_user_input): Likewise.
+	* error.cc (pr_where): Likewise.  No need for curr_function now.
+	* parse.y (Fmfilename): Likewise.  Check for scripting language
+	caller, not any calling function.
+
 2006-04-05  John W. Eaton  <jwe@octave.org>
 
+	* toplev.h, toplev.cc (octave_call_stack): New class.
+
+	* debug.cc (Fdbwhere): Use get_user_function here.
+
 	* Makefile.in (mk-pkg-add): Use mfilename to simplify.
 	(PKG_ADD): Don't pass --prefix arg to mk-pkg-add.
 	(PKG_ADD.inst): Delete target.
 	(clean): Don't remove PKG_ADD.inst.
 	(install-oct): Don't depend on PKG_ADD.inst.  Install PKG_ADD, not
 	PKG_ADD.inst.
 
 	* parse.y (Fmfilename): New function.
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -44,43 +44,47 @@ 02110-1301, USA.
 #include "pt-pr-code.h"
 #include "pt.h"
 #include "pt-bp.h"
 #include "pt-stmt.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "variables.h"
 
+// Return a pointer to the user-defined function FNAME.  If FNAME is
+// empty, search backward for the first user-defined function in the
+// current call stack.
+
 static octave_user_function *
-get_user_function (std::string str = "")
+get_user_function (std::string fname = "")
 {
   octave_user_function *dbg_fcn = 0;
 
-  if (str.compare (""))
+  if (fname == "")
+    dbg_fcn = octave_call_stack::caller_script ();
+  else
     {
-      symbol_record *ptr = curr_sym_tab->lookup (str);
+      symbol_record *ptr = curr_sym_tab->lookup (fname);
 
       if (ptr && ptr->is_user_function ())
 	{
 	  octave_value tmp = ptr->def ();
 	  dbg_fcn = dynamic_cast<octave_user_function *> (tmp.function_value ());
 	}
       else
 	{
-	  ptr = lookup_by_name (str, false);
+	  ptr = lookup_by_name (fname, false);
 	
 	  if (ptr && ptr->is_user_function ())
 	    {
 	      octave_value tmp = ptr->def ();
 	      dbg_fcn = dynamic_cast<octave_user_function *> (tmp.function_value ());
 	    }
 	}
     }
-  else if (curr_caller_function && curr_caller_function->is_user_function ())
-    dbg_fcn = dynamic_cast<octave_user_function *> (curr_caller_function);
 
   return dbg_fcn;
 }
 
 
 DEFCMD (dbstop, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {rline =} dbstop (func, line)\n\
@@ -277,20 +281,17 @@ DEFCMD (dbwhere, , ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} dbwhere ()\n\
 Show where we are in the code\n\
 @seealso{dbclear, dbstatus, dbstop}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  octave_user_function *dbg_fcn = 0;
-
-  if (curr_caller_function && curr_caller_function->is_user_function ())
-    dbg_fcn = dynamic_cast<octave_user_function *> (curr_caller_function);
+  octave_user_function *dbg_fcn = get_user_function ();
 
   if (dbg_fcn)
     {
       std::string name = dbg_fcn->name ();
 
       octave_stdout << name << ":";
 
       const tree *dbg_stmt = tree::break_statement;
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -373,37 +373,29 @@ pr_where (const char *name, bool print_c
 {
   if (curr_statement)
     {
       std::string nm;
 
       int l = -1;
       int c = -1;
 
-      octave_function *fcn = curr_function;
+      octave_user_function *fcn = octave_call_stack::caller_script ();
 
       if (fcn)
 	{
-	  nm = fcn->name ();
+	  nm = fcn->fcn_file_name ();
 
-	  if (nm == "error" || nm == "warning")
-	    fcn = curr_caller_function;
-
-	  if (fcn)
-	    {
-	      nm = fcn->fcn_file_name ();
+	  if (nm.empty ())
+	    nm = fcn->name ();
 
-	      if (nm.empty ())
-		nm = fcn->name ();
-
-	      if (curr_statement)
-		{
-		  l = curr_statement->line ();
-		  c = curr_statement->column ();
-		}
+	  if (curr_statement)
+	    {
+	      l = curr_statement->line ();
+	      c = curr_statement->column ();
 	    }
 	}
 
       if (nm.empty ())
 	{
 	  if (l > 0 && c > 0)
 	    pr_where_1 ("%s: near line %d, column %d:", name, l, c);
 	}
@@ -547,17 +539,18 @@ warning_1 (const char *id, const char *f
 	  && ! discard_warning_messages)
 	pr_where ("warning", false);
 
       vwarning ("warning", id, fmt, args);
 
       warning_state = 1;
 
       if ((interactive || forced_interactive)
-	  && Vdebug_on_warning && curr_function)
+	  && Vdebug_on_warning
+	  && octave_call_stack::caller_script ())
 	{
 	  unwind_protect_bool (Vdebug_on_warning);
 	  Vdebug_on_warning = false;
 
 	  do_keyboard (octave_value_list ());
 
 	  unwind_protect::run ();
 	}
@@ -585,17 +578,18 @@ warning_with_id (const char *id, const c
 static void
 error_2 (const char *id, const char *fmt, va_list args)
 {
   int init_state = error_state;
 
   error_1 (std::cerr, "error", id, fmt, args);
 
   if ((interactive || forced_interactive)
-      && Vdebug_on_error && init_state == 0 && curr_function)
+      && Vdebug_on_error && init_state == 0
+      && octave_call_stack::caller_script ())
     {
       unwind_protect_bool (Vdebug_on_error);
       Vdebug_on_error = false;
 
       pr_where ("error");
 
       error_state = 0;
 
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -540,28 +540,30 @@ get_user_input (const octave_value_list&
   int read_as_string = 0;
 
   if (nargin == 2)
     read_as_string++;
 
   std::string nm;
   int line = -1;
 
-  // We look at curr_caller_function because curr_function is always
-  // "keyboard".
-
-  if (debug && curr_caller_function)
+  if (debug)
     {
-      nm = curr_caller_function->fcn_file_name ();
+      octave_user_function *caller = octave_call_stack::caller_script ();
+
+      if (caller)
+	{
+	  nm = caller->fcn_file_name ();
 
-      if (nm.empty ())
-	nm = curr_caller_function->name ();
+	  if (nm.empty ())
+	    nm = caller->name ();
 
-      if (curr_statement)
-	line = curr_statement->line ();
+	  if (curr_statement)
+	    line = curr_statement->line ();
+	}
     }
 
   OSSTREAM buf;
 
   if (! nm.empty ())
     {
       buf << "stopped in " << nm;
 
@@ -629,27 +631,27 @@ get_user_input (const octave_value_list&
 	      return retval;
 	    }
 	  else if (match_sans_spaces_semi ("dbstep", input_buf))
 	    {
 	      tree::break_next = true;
 
 	      tree::last_line = 0;
 
-	      tree::break_function = curr_function;
+	      tree::break_function = octave_call_stack::current ();
 
 	      return retval;
 	    }
 	  else if (match_sans_spaces_semi ("dbnext", input_buf))
 	    {
 	      tree::break_next = true;
 
 	      tree::last_line = curr_statement->line ();
 
-	      tree::break_function = curr_function;
+	      tree::break_function = octave_call_stack::current ();
 
 	      return retval;
 	    }
 	}
 
       if (read_as_string)
 	{
 	  // XXX FIXME XXX -- fix gnu_readline and octave_gets instead!
diff --git a/src/ov-builtin.cc b/src/ov-builtin.cc
--- a/src/ov-builtin.cc
+++ b/src/ov-builtin.cc
@@ -106,21 +106,19 @@ octave_builtin::do_multi_index_op (int n
     return retval;
 
   if (any_arg_is_magic_colon (args))
     ::error ("invalid use of colon in function argument list");
   else
     {
       unwind_protect::begin_frame ("builtin_func_eval");
 
-      unwind_protect_ptr (curr_function);
-      unwind_protect_ptr (curr_caller_function);
+      octave_call_stack::push (this);
 
-      curr_caller_function = curr_function;
-      curr_function = this;
+      unwind_protect::add (octave_call_stack::unwind_pop, 0);
 
       retval = (*f) (args, nargout);
 
       unwind_protect::run_frame ("builtin_func_eval");
     }
 
   return retval;
 }
diff --git a/src/ov-mapper.cc b/src/ov-mapper.cc
--- a/src/ov-mapper.cc
+++ b/src/ov-mapper.cc
@@ -440,21 +440,19 @@ octave_mapper::do_multi_index_op (int, c
   else if (nargin < 1)
     ::error ("%s: too few arguments", name().c_str ());
   else
     {
       if (args(0).is_defined ())
 	{
 	  unwind_protect::begin_frame ("mapper_func_eval");
 
-	  unwind_protect_ptr (curr_function);
-	  unwind_protect_ptr (curr_caller_function);
+	  octave_call_stack::push (this);
 
-	  curr_caller_function = curr_function;
-	  curr_function = this;
+	  unwind_protect::add (octave_call_stack::unwind_pop, 0);
 
 	  retval = apply (args(0));
 
 	  unwind_protect::run_frame ("mapper_func_eval");
 	}
       else
 	::error ("%s: argument undefined", name().c_str ());
     }
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -388,23 +388,22 @@ octave_user_function::do_multi_index_op 
   // eval_undefined_error().
 
   unwind_protect_ptr (curr_caller_sym_tab);
   curr_caller_sym_tab = curr_sym_tab;
 
   unwind_protect_ptr (curr_sym_tab);
   curr_sym_tab = sym_tab;
 
-  unwind_protect_ptr (curr_function);
-  unwind_protect_ptr (curr_caller_function);
   unwind_protect_ptr (curr_caller_statement);
+  curr_caller_statement = curr_statement;
 
-  curr_caller_statement = curr_statement;
-  curr_caller_function = curr_function;
-  curr_function = this;
+  octave_call_stack::push (this);
+
+  unwind_protect::add (octave_call_stack::unwind_pop, 0);
 
   if (! is_nested_function ())
     {
       unwind_protect_ptr (curr_parent_function);
       curr_parent_function = this;
     }
 
   // Save and restore args passed for recursive calls.
@@ -742,20 +741,22 @@ has not been declared to take a variable
     }
 
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
-      if (curr_function)
+      octave_function *fcn = octave_call_stack::caller_script ();
+
+      if (fcn)
 	{
-	  if (curr_function->takes_varargs ())
-	    retval = curr_function->octave_va_arg ();
+	  if (fcn->takes_varargs ())
+	    retval = fcn->octave_va_arg ();
 	  else
 	    {
 	      ::error ("va_arg only valid within function taking variable");
 	      ::error ("number of arguments");
 	    }
 	}
       else
 	::error ("va_arg only valid within function body");
@@ -784,20 +785,22 @@ that has not been declared to take a var
     }
 
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
-      if (curr_function)
+      octave_function *fcn = octave_call_stack::caller_script ();
+
+      if (fcn)
 	{
-	  if (curr_function->takes_varargs ())
-	    curr_function->octave_va_start ();
+	  if (fcn->takes_varargs ())
+	    fcn->octave_va_start ();
 	  else
 	    {
 	      ::error ("va_start only valid within function taking variable");
 	      ::error ("number of arguments");
 	    }
 	}
       else
 	::error ("va_start only valid within function body");
@@ -828,22 +831,24 @@ been declared to return an unspecified n
     }
 
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
-      if (curr_function)
+      octave_function *fcn = octave_call_stack::caller_script ();
+
+      if (fcn)
 	{
-	  if (curr_function->has_varargout ())
+	  if (fcn->has_varargout ())
 	    ::error ("vr_val and varargout cannot both be used in the same function");
-	  else if (curr_function->takes_var_return ())
-	    curr_function->octave_vr_val (args(0));
+	  else if (fcn->takes_var_return ())
+	    fcn->octave_vr_val (args(0));
 	  else
 	    {
 	      ::error ("vr_val only valid within function declared to");
 	      ::error ("produce a variable number of values");
 	    }
 	}
       else
 	::error ("vr_val only valid within function body");
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3614,20 +3614,49 @@ of the file name and the extension.\n\
 
       if (error_state)
 	{
 	  error ("mfilename: expecting argument to be a character string");
 	  return retval;
 	}
     }
 
+  // XXX FIXME XXX -- the logic below fails for the following
+  // situation, because script files are not functions that can be
+  // entered into the call stack.
+  //
+  // foo.m:
+  // -----
+  //   function foo ()
+  //     bar;
+  //
+  // bar.m:
+  // -----
+  //   mfilename ();
+  //
+  // foo ()
+  //    ==> foo
+  //
+  // though it should report "bar".  Perhaps we need a dummy function
+  // object that can be used for scripts to at least hold file names
+  // and some other information so we could store it on the call stack.
+
   std::string fname;
 
-  if (curr_caller_function)
-    fname = curr_caller_function->fcn_file_name ();
+  octave_user_function *fcn = octave_call_stack::caller_script ();
+
+  if (fcn)
+    {
+      fname = fcn->fcn_file_name ();
+
+      if (fname.empty ())
+        fname = fcn->name ();
+    }
+  else if (reading_script_file)
+    fname = curr_fcn_file_full_name;
 
   if (arg == "fullpathext")
     retval = fname;
   else
     {
       size_t pos = fname.rfind ('.');
 
       fname = (pos != NPOS) ? fname.substr (0, pos) : fname;
diff --git a/src/pt-arg-list.cc b/src/pt-arg-list.cc
--- a/src/pt-arg-list.cc
+++ b/src/pt-arg-list.cc
@@ -208,20 +208,22 @@ tree_argument_list::convert_to_const_vec
 	      ::error ("evaluating argument list element number %d", k+1);
 	      args = octave_value_list ();
 	      break;
 	    }
 	  else
 	    {
 	      if (tmp.is_all_va_args ())
 		{
-		  if (curr_function)
+		  octave_function *fcn = octave_call_stack::current ();
+
+		  if (fcn)
 		    {
 		      octave_value_list tva;
-		      tva = curr_function->octave_all_va_args ();
+		      tva = fcn->octave_all_va_args ();
 		      int n = tva.length ();
 		      args_len += n - 1;
 		      args.resize (args_len);
 		      for (int i = 0; i < n; i++)
 			args(j++) = tva(i);
 		    }
 		  else
 		    {
diff --git a/src/pt-bp.h b/src/pt-bp.h
--- a/src/pt-bp.h
+++ b/src/pt-bp.h
@@ -153,29 +153,31 @@ tree_breakpoint : public tree_walker
 
 // TRUE means SIGINT should put us in the debugger at the next
 // available breakpoint.
 extern bool octave_debug_on_interrupt_state;
 
 #define MAYBE_DO_BREAKPOINT \
   do \
     { \
+      octave_function *fcn = octave_call_stack::current (); \
+ \
       if (octave_debug_on_interrupt_state \
 	  || (tree::break_next && tree::last_line == 0) \
 	  || (tree::break_next \
-	      && curr_function == tree::break_function \
+	      && fcn == tree::break_function \
 	      && tree::last_line != line ()) \
 	  || is_breakpoint ()) \
         { \
           octave_debug_on_interrupt_state = false; \
  \
           tree::break_next = false; \
  \
-          if (curr_function) \
-            octave_stdout << curr_function->name () << ": ";  \
+          if (fcn) \
+            octave_stdout << fcn->name () << ": ";  \
  \
           octave_stdout << "line " << line () << ", " \
 			<< "column " << column () \
 			<< std::endl; \
  \
           tree_print_code tpc (octave_stdout); \
           this->accept (tpc); \
  \
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -85,25 +85,54 @@ static bool quitting_gracefully = false;
 bool octave_interpreter_ready = false;
 
 // TRUE means we've processed all the init code and we are good to go.
 bool octave_initialized = false;
 
 // Current command to execute.
 tree_statement_list *global_command = 0;
 
-// Pointer to function that is currently being evaluated.
-octave_function *curr_function = 0;
-
-// Pointer to caller of curr_function.
-octave_function *curr_caller_function = 0;
-
 // Pointer to parent function that is currently being evaluated.
 octave_function *curr_parent_function = 0;
 
+octave_call_stack *octave_call_stack::instance = 0;
+
+octave_function *
+octave_call_stack::do_caller (void)
+{
+  octave_function *retval = 0;
+
+  if (cs.size () > 1)
+    {
+      iterator p = cs.begin ();
+      retval = *++p;
+    }
+
+  return retval;
+}
+
+octave_user_function *
+octave_call_stack::do_caller_script (void)
+{
+  octave_user_function *retval = 0;
+
+  for (iterator p = cs.begin (); p != cs.end (); p++)
+    {
+      octave_function *f = *p;
+
+      if (f && f->is_user_function ())
+	{
+	  retval = dynamic_cast<octave_user_function *> (f);
+	  break;
+	}
+    }
+
+  return retval;
+}
+
 static void
 recover_from_exception (void)
 {
   can_interrupt = true;
   octave_interrupt_immediately = 0;
   octave_interrupt_state = 0;
   octave_signal_caught = 0;
   octave_allocation_error = 0;
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -21,50 +21,138 @@ 02110-1301, USA.
 
 */
 
 #if !defined (octave_toplev_h)
 #define octave_toplev_h 1
 
 #include <cstdio>
 
+#include <list>
 #include <string>
 
 class octave_value;
 class octave_value_list;
+class octave_function;
 class octave_user_function;
 class tree_statement_list;
 class charMatrix;
 
 extern void
 clean_up_and_exit (int) GCC_ATTR_NORETURN;
 
 extern int main_loop (void);
 
 extern void
 do_octave_atexit (void);
 
 // Current command to execute.
 extern tree_statement_list *global_command;
 
-// Pointer to function that is currently being evaluated.
-extern octave_function *curr_function;
-
-// Pointer to caller of curr_function.
-extern octave_function *curr_caller_function;
-
 // Pointer to parent function that is currently being evaluated.
 extern octave_function *curr_parent_function;
 
 // TRUE means we are ready to interpret commands, but not everything
 // is ready for interactive use.
 extern bool octave_interpreter_ready;
 
 // TRUE means we've processed all the init code and we are good to go.
 extern bool octave_initialized;
 
+class
+octave_call_stack
+{
+protected:
+
+  octave_call_stack (void) : cs () { }
+
+public:
+
+  typedef std::list<octave_function *>::iterator iterator ;
+
+  static bool instance_ok (void)
+  {
+    bool retval = true;
+
+    if (! instance)
+      instance = new octave_call_stack ();
+
+    if (! instance)
+      {
+	::error ("unable to create call stack object!");
+
+	retval = false;
+      }
+
+    return retval;
+  }
+
+  // Current function (top of stack).
+  static octave_function *current (void)
+  {
+    return instance_ok () ? instance->do_current (): 0;
+  }
+
+  // Caller function, may be built-in.
+  static octave_function *caller (void)
+  {
+    return instance_ok () ? instance->do_caller (): 0;
+  }
+
+  // First scripting language function on the stack.
+  static octave_user_function *caller_script (void)
+  {
+    return instance_ok () ? instance->do_caller_script (): 0;
+  }
+
+  static void push (octave_function *f)
+  {
+    if (instance_ok ())
+      instance->do_push (f);
+  }
+
+  static void pop (void)
+  {
+    if (instance_ok ())
+      instance->do_pop ();
+  }
+  
+  // A function for popping the top of the call stack that is suitable
+  // for use as an unwind_protect handler.
+  static void unwind_pop (void *) { pop (); }
+
+  static void clear (void)
+  {
+    if (instance_ok ())
+      instance->do_clear ();
+  }
+  
+private:
+
+  // The current call stack.
+  std::list<octave_function *> cs;
+
+  static octave_call_stack *instance;
+
+  octave_function *do_current (void) { return cs.empty () ? 0 : cs.front (); }
+
+  octave_function *do_caller (void);
+
+  octave_user_function *do_caller_script (void);
+
+  void do_push (octave_function *f) { cs.push_front (f); }
+
+  void do_pop (void)
+  {
+    if (! cs.empty ())
+      cs.pop_front ();
+  }
+
+  void do_clear (void) { cs.clear (); }
+};
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1620,18 +1620,20 @@ do_who (int argc, const string_vector& a
 
 	  for (octave_idx_type j = 0; j < symbols_len; j++)
 	    {
 	      symbol_record *sr = symbols(j);
 
 	      Octave_map ni;
 
 	      std::string caller_function_name;
-	      if (curr_caller_function)
-		caller_function_name = curr_caller_function->name ();
+
+	      octave_function *caller = octave_call_stack::caller ();
+	      if (caller)
+		caller_function_name = caller->name ();
 
 	      ni.assign ("function", caller_function_name);
 	      ni.assign ("level", 1);
 
 	      name_info(j) = sr->name ();
 	      size_info(j) = sr->size ();
 	      bytes_info(j) = sr->byte_size ();
 	      class_info(j) = sr->class_name ();
@@ -1939,18 +1941,20 @@ then lock in the current function.\n\
 
       if (! error_state)
 	mlock (name);
       else
 	error ("mlock: expecting argument to be a function name");
     }
   else if (args.length () == 0)
     {
-      if (curr_function)
-        mlock (curr_function->name ());
+      octave_user_function *fcn = octave_call_stack::caller_script ();
+
+      if (fcn)
+        mlock (fcn->name ());
       else
         error ("mlock: invalid use outside a function");
     }
   else
     print_usage ("mlock");
 
   return retval;
 }
@@ -1971,18 +1975,20 @@ then unlock the current function.\n\
 
       if (! error_state)
         munlock (name);
       else
 	error ("munlock: expecting argument to be a function name");
     }
   else if (args.length () == 0)
     {
-      if (curr_function)
-        mlock (curr_function->name ());
+      octave_user_function *fcn = octave_call_stack::caller_script ();
+
+      if (fcn)
+        mlock (fcn->name ());
       else
         error ("munlock: invalid use outside a function");
     }
   else
     print_usage ("munlock");
 
   return retval;
 }
@@ -2004,18 +2010,20 @@ then return true if the current function
 
       if (! error_state)
         retval = mislocked (name);
       else
 	error ("mislocked: expecting argument to be a function name");
     }
   else if (args.length () == 0)
     {
-      if (curr_function)
-        retval = mislocked (curr_function->name ());
+      octave_user_function *fcn = octave_call_stack::caller_script ();
+
+      if (fcn)
+        retval = mislocked (fcn->name ());
       else
         error ("mislocked: invalid use outside a function");
     }
   else
     print_usage ("mislocked");
 
   return retval;
 }
