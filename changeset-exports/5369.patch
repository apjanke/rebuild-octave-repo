# HG changeset patch
# User jwe
# Date 1116891568 0
#      Mon May 23 23:39:28 2005 +0000
# Node ID 4bbde94b5cf88b62f5abe74dae40a655347f19a7
# Parent  720dc7f7a75e8603dcaef5ecd0798037a2c9c8d3
[project @ 2005-05-23 23:39:28 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2005-05-23  John W. Eaton  <jwe@octave.org>
 
+	* load-save.cc (gripe_file_open): New function.
+	(get_file_format, Fload, Fsave): Use it.
+
 	* DLD-FUNCTIONS/sort.cc (mx_sort, mx_sort_indexed): Return
 	appropriately sized empty values for empty args.
 
 	* debug.cc (Fdbwhere, get_user_function): Look at
 	curr_caller_function, not curr_function, since function is now set
 	inside mapper, built-in (and therefore dld) functions too.
 
 2005-05-21  John W. Eaton  <jwe@octave.org>
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -102,16 +102,27 @@ static std::string Vdefault_save_options
 // The output format for Octave core files.
 static std::string Voctave_core_file_options;
 
 // The format string for the comment line at the top of text-format
 // save files.  Passed to strftime.  Should begin with `#' and contain
 // no newline characters.
 static std::string Vsave_header_format_string;
 
+static void
+gripe_file_open (const std::string& fcn, const std::string& file)
+{
+  if (fcn == "load")
+    error ("%s: unable to open input file `%s'", fcn.c_str (), file.c_str ());
+  else if (fcn == "save")
+    error ("%s: unable to open output file `%s'", fcn.c_str (), file.c_str ());
+  else
+    error ("%s: unable to open file `%s'", fcn.c_str (), file.c_str ());
+}
+
 // XXX FIXME XXX -- shouldn't this be implemented in terms of other
 // functions that are already available?
 
 // Install a variable with name NAME and the value specified TC in the
 // symbol table.  If FORCE is TRUE, replace any existing definition
 // for NAME.  If GLOBAL is TRUE, make the variable global.
 //
 // Assumes TC is defined.
@@ -280,17 +291,17 @@ read_binary_file_header (std::istream& i
 
   if (strncmp (magic, "Octave-1-L", magic_len) == 0)
     swap = oct_mach_info::words_big_endian ();
   else if (strncmp (magic, "Octave-1-B", magic_len) == 0)
     swap = ! oct_mach_info::words_big_endian ();
   else
     {
       if (! quiet)
-	error ("load: can't read binary file");
+	error ("load: unable to read read binary file");
       return -1;
     }
 	
   char tmp = 0;
   is.read (X_CAST (char *, &tmp), 1);
 
   flt_fmt = mopt_digit_to_float_format (tmp);
 
@@ -413,17 +424,17 @@ get_file_format (const std::string& fnam
 	  // file.
 
 	  retval = LS_MAT_ASCII;
 	}
 
 #endif
     }
   else
-    error ("load: couldn't open input file `%s'", orig_fname.c_str ());
+    gripe_file_open ("load", orig_fname);
 
   return retval;
 }
 
 octave_value
 do_load (std::istream& stream, const std::string& orig_fname, bool force,
 	 load_save_format format, oct_mach_info::float_format flt_fmt,
 	 bool list_only, bool swap, bool verbose,
@@ -795,17 +806,17 @@ Force Octave to assume the file is in Oc
       else
 	{
 	  fname.append (".mat");
 	  std::ifstream file_mat_exist (fname.c_str ());
 	  if (file_mat_exist)
 	    file_mat_exist.close ();
 	  else
 	    {
-	      error ("load: nonexistent file: `%s'", orig_fname.c_str ());
+	      gripe_file_open ("load", orig_fname);
 	      return retval;
 	    }
 	}
 
       if (format == LS_UNKNOWN)
 	format = get_file_format (fname, orig_fname, use_zlib);
 
 #ifdef HAVE_HDF5
@@ -819,18 +830,17 @@ Force Octave to assume the file is in Oc
 	    {
 	      retval = do_load (hdf5_file, orig_fname, force, format,
 				flt_fmt, list_only, swap, verbose,
 				argv, i, argc, nargout);
 
 	      hdf5_file.close ();
 	    }
 	  else
-	    error ("load: couldn't open input file `%s'",
-		   orig_fname.c_str ());
+	    gripe_file_open ("load", orig_fname);
 	}
       else
 #endif /* HAVE_HDF5 */
 	// don't insert any statements here; the "else" above has to
 	// go with the "if" below!!!!!
       if (format != LS_UNKNOWN)
 	{
 	  i++;
@@ -873,18 +883,17 @@ Force Octave to assume the file is in Oc
 
 		  retval = do_load (file, orig_fname, force, format,
 				    flt_fmt, list_only, swap, verbose,
 				argv, i, argc, nargout);
 
 		  file.close ();
 		}
 	      else
-		error ("load: couldn't open input file `%s'",
-		       orig_fname.c_str ());
+		gripe_file_open ("load", orig_fname);
 	    }
 	  else
 #endif
 	    {
 	      std::ifstream file (fname.c_str (), mode);
 
 	      if (file)
 		{
@@ -908,17 +917,17 @@ Force Octave to assume the file is in Oc
 
 		  retval = do_load (file, orig_fname, force, format,
 				    flt_fmt, list_only, swap, verbose,
 				    argv, i, argc, nargout);
 
 		  file.close ();
 		}
 	      else
-		error ("load: couldn't open input file `%s'",
+		error ("load: unable open input file `%s'",
 		       orig_fname.c_str ());
 	    }
 	}
     }
     
   return retval;
 }
 
@@ -1654,17 +1663,17 @@ the file @file{data} in Octave's binary 
 	    {
 	      save_vars (argv, i, argc, hdf5_file, save_builtins, format,
 			 save_as_floats, true);
 
 	      hdf5_file.close ();
 	  }
 	else
 	  {
-	    error ("save: couldn't open output file `%s'", fname.c_str ());
+	    gripe_file_open ("save", fname);
 	    return retval;
 	  }
 	}
       else
 #endif /* HAVE_HDF5 */
 	// don't insert any statements here!  The brace below must go
 	// with the "else" above!
 	{
@@ -1681,18 +1690,17 @@ the file @file{data} in Octave's binary 
 	      
 		  save_vars (argv, i, argc, file, save_builtins, format,
 			     save_as_floats, write_header_info);
 
 		  file.close ();
 		}
 	      else
 		{
-		  error ("save: couldn't open output file `%s'", 
-			 fname.c_str ());
+		  gripe_file_open ("save", fname);
 		  return retval;
 		}
 	    }
 	  else
 #endif
 	    {
 	      std::ofstream file (fname.c_str (), mode);
 	  
@@ -1704,18 +1712,17 @@ the file @file{data} in Octave's binary 
 	      
 		  save_vars (argv, i, argc, file, save_builtins, format,
 			     save_as_floats, write_header_info);
 
 		  file.close ();
 		}
 	      else
 		{
-		  error ("save: couldn't open output file `%s'", 
-			 fname.c_str ());
+		  gripe_file_open ("save", fname);
 		  return retval;
 		}
 	    }
 	}
     }
 
   return retval;
 }
