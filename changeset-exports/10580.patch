# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1272407037 -7200
#      Wed Apr 28 00:23:57 2010 +0200
# Node ID 1479b93ee655ef7dfa3849e70aa21491580c2805
# Parent  fd6899b1b00eed431db6865d14e4f2cd386c3d04
Respect linestyleorder in errorbar plots

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,17 @@
+2010-04-27  David Bateman  <dbateman@free.fr>
+
+	* plot/private/__default_plot_options_.m: New option errorstyle.
+	* plot/private/__pltopt__.m: Use errorstyle here seperately from
+	the linestyle so that both can be set.
+	* plot/private/__errcomm__.m: Allow for the fact that matrices
+	to __errplot__ with return a vector of handles.
+	* plot/private/__errplot__.m: Allow for default linestyles.
+
 2010-04-26  David Bateman  <dbateman@free.fr>
 
 	* plot/bar.m: Document the use of the colormap for the color of
 	the bars.
 
 	* plot/private/__errplot__.m: Allow x, box and xy errorbars with
 	different syntax.
 
diff --git a/scripts/plot/private/__default_plot_options__.m b/scripts/plot/private/__default_plot_options__.m
--- a/scripts/plot/private/__default_plot_options__.m
+++ b/scripts/plot/private/__default_plot_options__.m
@@ -24,10 +24,11 @@
 ## Author: jwe
 
 function options = __default_plot_options__ ()
 
   options.key = "";
   options.color = [];
   options.linestyle = [];
   options.marker = [];
+  options.errorstyle = [];
 
 endfunction
diff --git a/scripts/plot/private/__errcomm__.m b/scripts/plot/private/__errcomm__.m
--- a/scripts/plot/private/__errcomm__.m
+++ b/scripts/plot/private/__errcomm__.m
@@ -27,36 +27,35 @@
 
 function retval = __errcomm__ (caller, p, varargin)
 
   if (nargin < 4)
     print_usage ();
   endif
 
   nargs = length (varargin);
-
+  retval = [];
   k = 1;
-  idx = 1;
   data = cell(6,1);
   while (k <= nargs)
     a = varargin{k++};
     if (isvector (a))
       a = a(:);
     elseif (ismatrix (a))
       ;
     else
       usage ("%s (...)", caller);
     endif
     sz = size (a);
     ndata = 1;
     data{ndata} = a;
     while (k <= nargs)
       a = varargin{k++};
       if (ischar (a) || iscellstr (a))
-        retval(idx++) = __errplot__ (a, p, data{1:ndata});
+        retval = [retval; __errplot__(a, p, data{1:ndata})];
         break;
       elseif (isvector (a))
         a = a(:);
       elseif (ismatrix (a))
         ;
       else
         error ("wrong argument types");
       endif
@@ -66,14 +65,14 @@ function retval = __errcomm__ (caller, p
       data{++ndata} = a;
       if (ndata > 6)
         error ("too many arguments to a plot");
       endif
     endwhile
   endwhile
 
   if (! (ischar (a) || iscellstr (a)))
-    retval(idx++) = __errplot__ ("~", p, data{1:ndata});
+    retval = [retval; __errplot__("~", p, data{1:ndata})];
   endif
 
   drawnow ();
 
 endfunction
diff --git a/scripts/plot/private/__errplot__.m b/scripts/plot/private/__errplot__.m
--- a/scripts/plot/private/__errplot__.m
+++ b/scripts/plot/private/__errplot__.m
@@ -35,53 +35,53 @@ function h = __errplot__ (fstr, p, a1, a
   [fmt, key] = __pltopt__ ("__errplot__", fstr);
 
   [len, nplots] = size (a1);
   h = [];
 
   for i = 1:nplots
     ## Set the plot type based on linestyle.
 
-    if (strcmp (fmt.linestyle, "~"))
+    if (strcmp (fmt.errorstyle, "~"))
       ifmt = "yerr";
-    elseif (strcmp (fmt.linestyle, ">"))
+    elseif (strcmp (fmt.errorstyle, ">"))
       ifmt = "xerr";
-    elseif (strcmp (fmt.linestyle, "~>"))
+    elseif (strcmp (fmt.errorstyle, "~>"))
       ifmt = "xyerr";
-    elseif (strcmp (fmt.linestyle, "#"))
+    elseif (strcmp (fmt.errorstyle, "#"))
       ifmt = "box";
-    elseif (strcmp (fmt.linestyle, "#~"))
+    elseif (strcmp (fmt.errorstyle, "#~"))
       ifmt = "boxy";
     elseif (strcmp (fmt.linestyle, "#~>"))
       ifmt = "boxxy";
     else
-      ifmt = "matlab";
-    endif
-
-    if (! isempty (fmt.marker) && ! strcmp (fmt.marker, "none"))
-      mrk = fmt.marker;
-    else
-      mrk = "none";
+      ifmt = "~";
     endif
 
     hg = hggroup ("parent", p);
     h = [h; hg];
     args = __add_datasource__ ("__errplot__", hg, 
                                {"x", "y", "l", "u", "xl", "xu"});
 
-    if (isempty (fmt.color))
-      hl = __line__ (hg, "color", __next_line_color__ (), "marker", mrk);
+    if (isempty (fmt.marker) && isempty (fmt.linestyle))
+      [linestyle, marker] = __next_line_style__ ();
+      if (isempty (fmt.color))
+        hl = __line__ (hg, "linestyle", linestyle, "marker", marker,
+                       "color", __next_line_color__ ())
+      else
+        hl = __line__ (hg, "linestyle", linestyle, "marker", marker,
+                       "color", fmt.color)
+      endif
     else
-      hl = __line__ (hg, "color", fmt.color, "marker", mrk);
-    endif
-
-    if (index (ifmt, "matlab"))
-      ifmt = "yerr";
-      if (! isempty (fmt.linestyle) && ! strcmp (fmt.linestyle, "none"))
-        set (hl, "linestyle", fmt.linestyle);
+      if (isempty (fmt.color))
+        hl = __line__ (hg, "linestyle", fmt.linestyle, "marker", fmt.marker,
+                       "color", __next_line_color__ ())
+      else
+        hl = __line__ (hg, "linestyle", fmt.linestyle, "marker", fmt.marker,
+                       "color", fmt.color)
       endif
     endif
 
     ## FIXME -- note the code below adds the errorbar data directly as
     ## ldata, etc properties of the line objects, as gnuplot can handle
     ## this.  Matlab has the errorbar part of the plot as a special line
     ## object with embedded NaNs that draws the three segments of the
     ## bar separately.  Should we duplicate Matlab's behavior and stop
@@ -166,17 +166,17 @@ function h = __errplot__ (fstr, p, a1, a
     addlistener (hg, "xldata", @update_data);
     addlistener (hg, "xudata", @update_data);
 
     __line__ (hg, "xdata", get (hl, "xdata"), 
               "ydata", get (hl, "ydata"), 
               "color", get (hl, "color"),
               "linewidth", get (hl, "linewidth"),
               "linestyle", get (hl, "linestyle"), 
-              "marker", mrk, "parent", hg);
+              "marker", get (hl, "marker"), "parent", hg);
   endfor
 
 endfunction
 
 function update_props (h, d)
   set (get (h, "children"), "color", get (h, "color"), 
        "linewidth", get (h, "linewidth"), "linestyle", get (h, "linestyle"), 
        "marker", get (h, "marker"), "markersize", get (h, "markersize"),
diff --git a/scripts/plot/private/__pltopt__.m b/scripts/plot/private/__pltopt__.m
--- a/scripts/plot/private/__pltopt__.m
+++ b/scripts/plot/private/__pltopt__.m
@@ -152,19 +152,20 @@ function [options, valid] = __pltopt1__ 
     elseif (strncmp (opt, "#~", 2) || strncmp (opt, "~>", 2))
       n = 2;
     elseif (strncmp (opt, "~", 1) || strncmp (opt, ">", 1) 
             || strncmp (opt, "#", 1))
       n = 1;
     else
       n = 0;
     endif
-    options.linestyle = opt(1:n);
+    options.errorstyle = opt(1:n);
     opt(1:n) = [];
-    have_linestyle = true;
+  else
+    options.errorstyle = "~";
   endif
 
   while (! isempty (opt))
     if (strncmp (opt, "--", 2) || strncmp (opt, "-.", 2))
       options.linestyle = opt(1:2);
       have_linestyle = true;
       n = 2;
     else
