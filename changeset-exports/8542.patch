# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1232466754 18000
#      Tue Jan 20 10:52:34 2009 -0500
# Node ID ef2dfe33e5b583613e0b90d90d64820d0f884141
# Parent  d2cf983bdc9d93b9acd5b66bcace786be4811865
stmt.txi: unwind_protect doc fix

diff --git a/doc/interpreter/stmt.txi b/doc/interpreter/stmt.txi
--- a/doc/interpreter/stmt.txi
+++ b/doc/interpreter/stmt.txi
@@ -777,35 +777,37 @@ end_unwind_protect
 @noindent
 where @var{body} and @var{cleanup} are both optional and may contain any
 Octave expressions or commands.  The statements in @var{cleanup} are 
 guaranteed to be executed regardless of how control exits @var{body}.
 
 This is useful to protect temporary changes to global variables from
 possible errors.  For example, the following code will always restore
 the original value of the global variable @code{frobnositcate}
-even if an error occurs while performing the indexing operation.
+even if an error occurs in the first part of the @code{unwind_protect}
+block.
 
 @example
 @group
 save_frobnosticate = frobnosticate;
 unwind_protect
   frobnosticate = true;
   @dots{}
 unwind_protect_cleanup
   frobnosticate = save_frobnosticate;
 end_unwind_protect
 @end group
 @end example
 
 @noindent
 Without @code{unwind_protect}, the value of @var{frobnosticate}
-would not be restored if an error occurs while performing the indexing
-operation because evaluation would stop at the point of the error and
-the statement to restore the value would not be executed.
+would not be restored if an error occurs while evaluating the first part
+of the @code{unwind_protect} block because evaluation would stop at the
+point of the error and the statement to restore the value would not be
+executed.
 
 @node The try Statement
 @section The @code{try} Statement
 @cindex @code{try} statement
 @cindex @code{catch}
 @cindex @code{end_try_catch}
 
 In addition to unwind_protect, Octave supports another limited form of
