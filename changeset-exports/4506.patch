# HG changeset patch
# User jwe
# Date 1063202217 0
#      Wed Sep 10 13:56:57 2003 +0000
# Node ID 3c82fc8f822cb14c06b937d6cb22a2f38a63fa86
# Parent  e944fbe3fff24614bd77e30b3f014edd59a82f6c
[project @ 2003-09-10 13:56:57 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2003-09-09  David Bateman <dbateman@free.fr>
+
+	* lo-specfun.cc (zbesj, zbesy, zbesi, zbesk, zbesh1, zbesh2, airy,
+	biry): Always request scaled results from AMOS functions and
+	perform reverse scaling on results if scaled result not requested
+	by user.
+
+2003-09-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
+ 
+ 	* lo-specfun.cc (xlgamma): Require nonnegative argument.
+
 2003-09-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array-d.cc: Instantiate assign functions.
 
 2003-09-09  Petter Risholm  <risholm@stud.ntnu.no>
 
 	* ArrayN-idx.h (vector_equivalent, equal_arrays): New functions.
 	(get_elt_idx): Index ra_idx correctly.
diff --git a/liboctave/lo-specfun.cc b/liboctave/lo-specfun.cc
--- a/liboctave/lo-specfun.cc
+++ b/liboctave/lo-specfun.cc
@@ -218,17 +218,24 @@ zbesj (const Complex& z, double alpha, i
       double yr = 0.0;
       double yi = 0.0;
 
       int nz;
 
       double zr = z.real ();
       double zi = z.imag ();
 
-      F77_FUNC (zbesj, ZBESJ) (zr, zi, alpha, kode, 1, &yr, &yi, nz, ierr);
+      F77_FUNC (zbesj, ZBESJ) (zr, zi, alpha, 2, 1, &yr, &yi, nz, ierr);
+
+      if (kode != 2)
+	{
+	  double expz = exp (std::abs (zi)); 
+	  yr *= expz;
+	  yi *= expz;
+	}
 
       if (zi == 0.0 && zr >= 0.0)
 	yi = 0.0;
 
       retval = bessel_return_value (Complex (yr, yi), ierr);
     }
   else
     {
@@ -270,18 +277,25 @@ zbesy (const Complex& z, double alpha, i
 
       if (zr == 0.0 && zi == 0.0)
 	{
 	  yr = -octave_Inf;
 	  yi = 0.0;
 	}
       else
 	{
-	  F77_FUNC (zbesy, ZBESY) (zr, zi, alpha, kode, 1, &yr, &yi, nz,
-				  &wr, &wi, ierr);
+	  F77_FUNC (zbesy, ZBESY) (zr, zi, alpha, 2, 1, &yr, &yi, nz,
+				   &wr, &wi, ierr);
+
+	  if (kode != 2)
+	    {
+	      double expz = exp (std::abs (zi));
+	      yr *= expz;
+	      yi *= expz;
+	    }
 
 	  if (zi == 0.0 && zr >= 0.0)
 	    yi = 0.0;
 	}
 
       return bessel_return_value (Complex (yr, yi), ierr);
     }
   else
@@ -313,17 +327,24 @@ zbesi (const Complex& z, double alpha, i
       double yr = 0.0;
       double yi = 0.0;
 
       int nz;
 
       double zr = z.real ();
       double zi = z.imag ();
 
-      F77_FUNC (zbesi, ZBESI) (zr, zi, alpha, kode, 1, &yr, &yi, nz, ierr);
+      F77_FUNC (zbesi, ZBESI) (zr, zi, alpha, 2, 1, &yr, &yi, nz, ierr);
+
+      if (kode != 2)
+	{
+	  double expz = exp (std::abs (zr));
+	  yr *= expz;
+	  yi *= expz;
+	}
 
       if (zi == 0.0 && zr >= 0.0)
 	yi = 0.0;
 
       retval = bessel_return_value (Complex (yr, yi), ierr);
     }
   else
     {
@@ -364,17 +385,30 @@ zbesk (const Complex& z, double alpha, i
 
       if (zr == 0.0 && zi == 0.0)
 	{
 	  yr = octave_Inf;
 	  yi = 0.0;
 	}
       else
 	{
-	  F77_FUNC (zbesk, ZBESK) (zr, zi, alpha, kode, 1, &yr, &yi, nz, ierr);
+	  F77_FUNC (zbesk, ZBESK) (zr, zi, alpha, 2, 1, &yr, &yi, nz, ierr);
+
+	  if (kode != 2)
+	    {
+	      Complex expz = exp (-z);
+
+	      double rexpz = real (expz);
+	      double iexpz = imag (expz);
+
+	      double tmp = yr*rexpz - yi*iexpz;
+
+	      yi = yr*iexpz + yi*rexpz;
+	      yr = tmp;
+	    }
 
 	  if (zi == 0.0 && zr >= 0.0)
 	    yi = 0.0;
 	}
 
       retval = bessel_return_value (Complex (yr, yi), ierr);
     }
   else
@@ -397,17 +431,30 @@ zbesh1 (const Complex& z, double alpha, 
       double yr = 0.0;
       double yi = 0.0;
 
       int nz;
 
       double zr = z.real ();
       double zi = z.imag ();
 
-      F77_FUNC (zbesh, ZBESH) (zr, zi, alpha, kode, 1, 1, &yr, &yi, nz, ierr);
+      F77_FUNC (zbesh, ZBESH) (zr, zi, alpha, 2, 1, 1, &yr, &yi, nz, ierr);
+
+      if (kode != 2)
+	{
+	  Complex expz = exp (Complex (0.0, 1.0) * z);
+
+	  double rexpz = real (expz);
+	  double iexpz = imag (expz);
+
+	  double tmp = yr*rexpz - yi*iexpz;
+
+	  yi = yr*iexpz + yi*rexpz;
+	  yr = tmp;
+	}
 
       retval = bessel_return_value (Complex (yr, yi), ierr);
     }
   else
     {
       alpha = -alpha;
 
       static const Complex eye = Complex (0.0, 1.0);
@@ -430,17 +477,30 @@ zbesh2 (const Complex& z, double alpha, 
       double yr = 0.0;
       double yi = 0.0;
 
       int nz;
 
       double zr = z.real ();
       double zi = z.imag ();
 
-      F77_FUNC (zbesh, ZBESH) (zr, zi, alpha, kode, 2, 1, &yr, &yi, nz, ierr);
+      F77_FUNC (zbesh, ZBESH) (zr, zi, alpha, 2, 2, 1, &yr, &yi, nz, ierr);
+
+      if (kode != 2)
+	{
+	  Complex expz = exp (-Complex (0.0, 1.0) * z);
+
+	  double rexpz = real (expz);
+	  double iexpz = imag (expz);
+
+	  double tmp = yr*rexpz - yi*iexpz;
+
+	  yi = yr*iexpz + yi*rexpz;
+	  yr = tmp;
+	}
 
       retval = bessel_return_value (Complex (yr, yi), ierr);
     }
   else
     {
       alpha = -alpha;
 
       static const Complex eye = Complex (0.0, 1.0);
@@ -613,19 +673,30 @@ airy (const Complex& z, bool deriv, bool
 
   int nz;
 
   double zr = z.real ();
   double zi = z.imag ();
 
   int id = deriv ? 1 : 0;
 
-  int kode = scaled ? 2 : 1;
+  F77_FUNC (zairy, ZAIRY) (zr, zi, id, 2, ar, ai, nz, ierr);
+
+  if (! scaled)
+    {
+      Complex expz = exp (- 2.0 / 3.0 * z * sqrt(z));
 
-  F77_FUNC (zairy, ZAIRY) (zr, zi, id, kode, ar, ai, nz, ierr);
+      double rexpz = real (expz);
+      double iexpz = imag (expz);
+
+      double tmp = ar*rexpz - ai*iexpz;
+
+      ai = ar*iexpz + ai*rexpz;
+      ar = tmp;
+    }
 
   if (zi == 0.0 && (! scaled || zr >= 0.0))
     ai = 0.0;
 
   return bessel_return_value (Complex (ar, ai), ierr);
 }
 
 Complex
@@ -634,19 +705,30 @@ biry (const Complex& z, bool deriv, bool
   double ar = 0.0;
   double ai = 0.0;
 
   double zr = z.real ();
   double zi = z.imag ();
 
   int id = deriv ? 1 : 0;
 
-  int kode = scaled ? 2 : 1;
+  F77_FUNC (zbiry, ZBIRY) (zr, zi, id, 2, ar, ai, ierr);
+
+  if (! scaled)
+    {
+      Complex expz = exp (std::abs (real (2.0 / 3.0 * z * sqrt (z))));
 
-  F77_FUNC (zbiry, ZBIRY) (zr, zi, id, kode, ar, ai, ierr);
+      double rexpz = real (expz);
+      double iexpz = imag (expz);
+
+      double tmp = ar*rexpz - ai*iexpz;
+
+      ai = ar*iexpz + ai*rexpz;
+      ar = tmp;
+    }
 
   if (zi == 0.0 && (! scaled || zr >= 0.0))
     ai = 0.0;
 
   return bessel_return_value (Complex (ar, ai), ierr);
 }
 
 ComplexMatrix
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -24,17 +24,17 @@ 2003-09-09  Petter Risholm  <risholm@stu
 	(octave_double_nd_array::double_nd_array_value): New function.
 	(octave_double_nd_array::double_nd_array_value): New function.
 
 	* OPERATORS/op-m-nd.cc, OPERATORS/op-nd-m.cc,
 	OPERATORS/op-nd-nd.cc, OPERATORS/op-nd-s.cc, OPERATORS/op-s-nd.cc:
 	New files.
 	* Makefile.in (OP_XSRC): Add them to the list.
 
-2003-09-08  D.  <dbateman@free.fr>
+2003-09-09  David Bateman <dbateman@free.fr>
 
 	* OPERATORS/op-cs-s.cc (DEFBINOP): First arg is complex, second is
 	double.
 
 2003-09-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-cell.cc (tree_cell::rvalue): Don't assume that the number of
 	elements in a tree_argument_list is the same as the number of
