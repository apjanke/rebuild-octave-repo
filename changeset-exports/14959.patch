# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1340126875 18000
#      Tue Jun 19 12:27:55 2012 -0500
# Node ID 12fd4a62d6333b664eacf419bfb944c5fed7ab02
# Parent  4b98b3f66e465bed96d69687ce8b0a6167d8f000
Fix whitespace issues and update documentation

* src/pt-jit.h: Update TODO list and fix whitespace issues.
* src/pt-jit.cc: Fix whitespace issues.

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -205,17 +205,17 @@ octave_jit_gripe_nan_to_logical_conversi
     }
 }
 
 extern "C" void
 octave_jit_ginvalid_index (void)
 {
   try
     {
-      gripe_invalid_index ();      
+      gripe_invalid_index ();
     }
   catch (const octave_execution_exception&)
     {
       gripe_library_execution_error ();
     }
 }
 
 extern "C" void
@@ -352,17 +352,18 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   // FIXME: We should be registering types like in octave_value_typeinfo
   llvm::Type *any_t = llvm::StructType::create (context, "octave_base_value");
   any_t = any_t->getPointerTo ();
 
   llvm::Type *scalar_t = llvm::Type::getDoubleTy (context);
   llvm::Type *bool_t = llvm::Type::getInt1Ty (context);
   llvm::Type *string_t = llvm::Type::getInt8Ty (context);
   string_t = string_t->getPointerTo ();
-  llvm::Type *index_t = llvm::Type::getIntNTy (context, sizeof(octave_idx_type) * 8);
+  llvm::Type *index_t = llvm::Type::getIntNTy (context,
+                                               sizeof(octave_idx_type) * 8);
 
   llvm::StructType *range_t = llvm::StructType::create (context, "range");
   std::vector<llvm::Type *> range_contents (4, scalar_t);
   range_contents[3] = index_t;
   range_t->setBody (range_contents);
 
   llvm::Type *refcount_t = llvm::Type::getIntNTy (context, sizeof(int) * 8);
   llvm::Type *int_t = refcount_t;
@@ -387,25 +388,26 @@ jit_typeinfo::jit_typeinfo (llvm::Module
 
   casts.resize (next_id + 1);
   identities.resize (next_id + 1, 0);
 
   // bind global variables
   lerror_state = new llvm::GlobalVariable (*module, bool_t, false,
                                            llvm::GlobalValue::ExternalLinkage,
                                            0, "error_state");
-  engine->addGlobalMapping (lerror_state, reinterpret_cast<void *> (&error_state));
+  engine->addGlobalMapping (lerror_state,
+                            reinterpret_cast<void *> (&error_state));
 
   // any with anything is an any op
   llvm::Function *fn;
   llvm::Type *binary_op_type
     = llvm::Type::getIntNTy (context, sizeof (octave_value::binary_op));
   llvm::Function *any_binary = create_function ("octave_jit_binary_any_any",
-                                                any->to_llvm (), binary_op_type,
-                                                any->to_llvm (), any->to_llvm ());
+                                                any_t, binary_op_type,
+                                                any_t, any_t);
   engine->addGlobalMapping (any_binary,
                             reinterpret_cast<void*>(&octave_jit_binary_any_any));
 
   binary_ops.resize (octave_value::num_binary_ops);
   for (size_t i = 0; i < octave_value::num_binary_ops; ++i)
     {
       octave_value::binary_op op = static_cast<octave_value::binary_op> (i);
       std::string op_name = octave_value::binary_op_as_string (op);
@@ -429,26 +431,26 @@ jit_typeinfo::jit_typeinfo (llvm::Module
       builder.CreateRet (ret);
       binary_ops[op].add_overload (fn, true, any, any, any);
     }
 
   llvm::Type *void_t = llvm::Type::getVoidTy (context);
 
   // grab any
   fn = create_function ("octave_jit_grab_any", any, any);
-                        
   engine->addGlobalMapping (fn, reinterpret_cast<void*>(&octave_jit_grab_any));
   grab_fn.add_overload (fn, false, any, any);
   grab_fn.stash_name ("grab");
 
   // grab matrix
   llvm::Function *print_matrix = create_function ("octave_jit_print_matrix",
                                                   void_t,
                                                   matrix_t->getPointerTo ());
-  engine->addGlobalMapping (print_matrix, reinterpret_cast<void*>(&octave_jit_print_matrix));
+  engine->addGlobalMapping (print_matrix,
+                            reinterpret_cast<void*>(&octave_jit_print_matrix));
 
   fn = create_function ("octave_jit_grab_matrix", matrix, matrix);
   llvm::BasicBlock *body = llvm::BasicBlock::Create (context, "body", fn);
   builder.SetInsertPoint (body);
   {
     llvm::Value *one = llvm::ConstantInt::get (refcount_t, 1);
 
     llvm::Value *mat = fn->arg_begin ();
@@ -465,23 +467,24 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   grab_fn.add_overload (fn, false, scalar, scalar);
 
   // grab index
   fn = create_identity (index);
   grab_fn.add_overload (fn, false, index, index);
 
   // release any
   fn = create_function ("octave_jit_release_any", void_t, any_t);
-  engine->addGlobalMapping (fn, reinterpret_cast<void*>(&octave_jit_release_any));
+  engine->addGlobalMapping (fn,
+                            reinterpret_cast<void*>(&octave_jit_release_any));
   release_fn.add_overload (fn, false, 0, any);
   release_fn.stash_name ("release");
 
   // release matrix
-  llvm::Function *delete_mat = create_function ("octave_jit_delete_matrix", void_t,
-                                                matrix_t);
+  llvm::Function *delete_mat = create_function ("octave_jit_delete_matrix",
+                                                void_t, matrix_t);
   engine->addGlobalMapping (delete_mat,
                             reinterpret_cast<void*> (&octave_jit_delete_matrix));
 
   fn = create_function ("octave_jit_release_matrix", void_t, matrix_t);
   llvm::Function *release_mat = fn;
   body = llvm::BasicBlock::Create (context, "body", fn);
   builder.SetInsertPoint (body);
   {
@@ -534,40 +537,44 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   engine->addGlobalMapping (gripe_div0,
                             reinterpret_cast<void *> (&gripe_divide_by_zero));
 
   // divide is annoying because it might error
   fn = create_function ("octave_jit_div_scalar_scalar", scalar, scalar, scalar);
   body = llvm::BasicBlock::Create (context, "body", fn);
   builder.SetInsertPoint (body);
   {
-    llvm::BasicBlock *warn_block = llvm::BasicBlock::Create (context, "warn", fn);
-    llvm::BasicBlock *normal_block = llvm::BasicBlock::Create (context, "normal", fn);
+    llvm::BasicBlock *warn_block = llvm::BasicBlock::Create (context, "warn",
+                                                             fn);
+    llvm::BasicBlock *normal_block = llvm::BasicBlock::Create (context,
+                                                               "normal", fn);
 
     llvm::Value *zero = llvm::ConstantFP::get (scalar_t, 0);
     llvm::Value *check = builder.CreateFCmpUEQ (zero, ++fn->arg_begin ());
     builder.CreateCondBr (check, warn_block, normal_block);
 
     builder.SetInsertPoint (warn_block);
     builder.CreateCall (gripe_div0);
     builder.CreateBr (normal_block);
 
     builder.SetInsertPoint (normal_block);
-    llvm::Value *ret = builder.CreateFDiv (fn->arg_begin (), ++fn->arg_begin ());
+    llvm::Value *ret = builder.CreateFDiv (fn->arg_begin (),
+                                           ++fn->arg_begin ());
     builder.CreateRet (ret);
 
     jit_function::overload ol (fn, true, scalar, scalar, scalar);
     binary_ops[octave_value::op_div].add_overload (ol);
     binary_ops[octave_value::op_el_div].add_overload (ol);
   }
   llvm::verifyFunction (*fn);
 
   // ldiv is the same as div with the operators reversed
   llvm::Function *div = fn;
-  fn = create_function ("octave_jit_ldiv_scalar_scalar", scalar, scalar, scalar);
+  fn = create_function ("octave_jit_ldiv_scalar_scalar", scalar, scalar,
+                        scalar);
   body = llvm::BasicBlock::Create (context, "body", fn);
   builder.SetInsertPoint (body);
   {
     llvm::Value *ret = builder.CreateCall2 (div, ++fn->arg_begin (),
                                             fn->arg_begin ());
     builder.CreateRet (ret);
 
     jit_function::overload ol (fn, true, scalar, scalar, scalar);
@@ -631,28 +638,31 @@ jit_typeinfo::jit_typeinfo (llvm::Module
     builder.CreateRet (ret);
   }
   llvm::verifyFunction (*fn);
   for_index_fn.add_overload (fn, false, scalar, range, index);
 
   // logically true
   logically_true_fn.stash_name ("logically_true");
 
-  llvm::Function *gripe_nantl = create_function ("octave_jit_gripe_nan_to_logical_conversion", void_t);
+  llvm::Function *gripe_nantl
+    = create_function ("octave_jit_gripe_nan_to_logical_conversion", void_t);
   engine->addGlobalMapping (gripe_nantl, reinterpret_cast<void *> (&octave_jit_gripe_nan_to_logical_conversion));
-                            
 
   fn = create_function ("octave_jit_logically_true_scalar", boolean, scalar);
   body = llvm::BasicBlock::Create (context, "body", fn);
   builder.SetInsertPoint (body);
   {
-    llvm::BasicBlock *error_block = llvm::BasicBlock::Create (context, "error", fn);
-    llvm::BasicBlock *normal_block = llvm::BasicBlock::Create (context, "normal", fn);
-
-    llvm::Value *check = builder.CreateFCmpUNE (fn->arg_begin (), fn->arg_begin ());
+    llvm::BasicBlock *error_block = llvm::BasicBlock::Create (context, "error",
+                                                              fn);
+    llvm::BasicBlock *normal_block = llvm::BasicBlock::Create (context,
+                                                               "normal", fn);
+
+    llvm::Value *check = builder.CreateFCmpUNE (fn->arg_begin (),
+                                                fn->arg_begin ());
     builder.CreateCondBr (check, error_block, normal_block);
 
     builder.SetInsertPoint (error_block);
     builder.CreateCall (gripe_nantl);
     builder.CreateBr (normal_block);
     builder.SetInsertPoint (normal_block);
 
     llvm::Value *zero = llvm::ConstantFP::get (scalar_t, 0);
@@ -668,17 +678,18 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   builder.CreateRet (fn->arg_begin ());
   llvm::verifyFunction (*fn);
   logically_true_fn.add_overload (fn, false, boolean, boolean);
 
   // make_range
   // FIXME: May be benificial to implement all in LLVM
   make_range_fn.stash_name ("make_range");
   llvm::Function *compute_nelem
-    = create_function ("octave_jit_compute_nelem", index, scalar, scalar, scalar);
+    = create_function ("octave_jit_compute_nelem", index, scalar, scalar,
+                       scalar);
   engine->addGlobalMapping (compute_nelem,
                             reinterpret_cast<void*> (&octave_jit_compute_nelem));
 
   fn = create_function ("octave_jit_make_range", range, scalar, scalar, scalar);
   body = llvm::BasicBlock::Create (context, "body", fn);
   builder.SetInsertPoint (body);
   {
     llvm::Function::arg_iterator args = fn->arg_begin ();
@@ -696,17 +707,18 @@ jit_typeinfo::jit_typeinfo (llvm::Module
     rng = builder.CreateInsertValue (rng, inc, 2);
     rng = builder.CreateInsertValue (rng, nelem, 3);
     builder.CreateRet (rng);
   }
   llvm::verifyFunction (*fn);
   make_range_fn.add_overload (fn, false, range, scalar, scalar, scalar);
 
   // paren_subsref
-  llvm::Function *ginvalid_index = create_function ("gipe_invalid_index", void_t);
+  llvm::Function *ginvalid_index = create_function ("gipe_invalid_index",
+                                                    void_t);
   engine->addGlobalMapping (ginvalid_index,
                             reinterpret_cast<void*> (&octave_jit_ginvalid_index));
 
   llvm::Function *gindex_range = create_function ("gripe_index_out_of_range",
                                                   void_t, int_t, int_t, index_t,
                                                   index_t);
   engine->addGlobalMapping (gindex_range,
                             reinterpret_cast<void*> (&octave_jit_gindex_range));
@@ -716,17 +728,16 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   builder.SetInsertPoint (body);
   {
     llvm::Value *one = llvm::ConstantInt::get (index_t, 1);
     llvm::Value *ione;
     if (index_t == int_t)
       ione = one;
     else
       ione = llvm::ConstantInt::get (int_t, 1);
-            
 
     llvm::Value *szero = llvm::ConstantFP::get (scalar_t, 0);
 
     llvm::Function::arg_iterator args = fn->arg_begin ();
     llvm::Value *mat = args++;
     llvm::Value *idx = args;
 
     // convert index to scalar to integer, and check index >= 1
@@ -1382,17 +1393,17 @@ jit_phi::infer (void)
 
   jit_type *infered = 0;
   for (size_t i = 0; i < argument_count (); ++i)
     {
       jit_block *inc = incomming (i);
       if (inc->branch_alive (p))
         infered = jit_typeinfo::join (infered, argument_type (i));
     }
-  
+
   if (infered != type ())
     {
       stash_type (infered);
       return true;
     }
 
   return false;
 }
@@ -1503,19 +1514,18 @@ jit_convert::jit_convert (llvm::Module *
 
   // FIXME: Remove if we no longer only compile loops
   assert (! breaking);
   assert (breaks.empty ());
   assert (continues.empty ());
 
   block->append (create<jit_branch> (final_block));
   add_block (final_block);
-  
+
   for (vmap_t::iterator iter = vmap.begin (); iter != vmap.end (); ++iter)
-       
     {
       jit_variable *var = iter->second;
       const std::string& name = var->name ();
       if (name.size () && name[0] != '#')
         final_block->append (create<jit_store_argument> (var));
     }
 
   construct_ssa ();
@@ -1551,17 +1561,18 @@ jit_convert::jit_convert (llvm::Module *
   std::cout << tee.str_print_code () << std::endl;
   print_blocks ("octave jit ir");
 #endif
 
   // for now just init arguments from entry, later we will have to do something
   // more interesting
   for (jit_block::iterator iter = entry_block->begin ();
        iter != entry_block->end (); ++iter)
-    if (jit_extract_argument *extract = dynamic_cast<jit_extract_argument *> (*iter))
+    if (jit_extract_argument *extract
+        = dynamic_cast<jit_extract_argument *> (*iter))
       arguments.push_back (std::make_pair (extract->name (), true));
 
   convert_llvm to_llvm (*this);
   function = to_llvm.convert (module, arguments, blocks, constants);
 
 #ifdef OCTAVE_JIT_DEBUG
   std::cout << "-------------------- llvm ir --------------------";
   llvm::raw_os_ostream llvm_cout (std::cout);
@@ -1631,17 +1642,16 @@ jit_convert::visit_colon_expression (tre
 
   if (tinc)
     increment = visit (tinc);
   else
     increment = create<jit_const_scalar> (1);
 
   result = block->append (create<jit_call> (jit_typeinfo::make_range, base,
                                             limit, increment));
-                                            
 }
 
 void
 jit_convert::visit_continue_command (tree_continue_command&)
 {
   continues.push_back (block);
   breaking = true;
 }
@@ -1703,27 +1713,27 @@ jit_convert::visit_simple_for_command (t
 
   jit_block *tail = create<jit_block> ("for_tail");
 
   // do control expression, iter init, and condition check in prev_block (block)
   jit_value *control = visit (cmd.control_expr ());
   jit_call *init_iter = create<jit_call> (jit_typeinfo::for_init, control);
   block->append (init_iter);
   block->append (create<jit_assign> (iterator, init_iter));
-  
+
   jit_value *check = block->append (create<jit_call> (jit_typeinfo::for_check,
                                                       control, iterator));
   block->append (create<jit_cond_branch> (check, body, tail));
   block = body;
 
   // compute the syntactical iterator
   jit_call *idx_rhs = create<jit_call> (jit_typeinfo::for_index, control, iterator);
   block->append (idx_rhs);
   do_assign (lhs_name, idx_rhs, false);
-  
+
   // do loop
   tree_statement_list *pt_body = cmd.body ();
   pt_body->accept (*this);
 
   if (breaking && continues.empty ())
     {
       // WTF are you doing user? Every branch was a continue, why did you have
       // a loop??? Users are silly people...
@@ -1854,25 +1864,27 @@ jit_convert::visit_if_command_list (tree
 
       if (i) // the first block is prev_block, so it has already been added
         add_block (entry_blocks[i]);
 
       if (! tic->is_else_clause ())
         {
           tree_expression *expr = tic->condition ();
           jit_value *cond = visit (expr);
-          jit_call *check = create<jit_call> (&jit_typeinfo::logically_true, cond);
+          jit_call *check = create<jit_call> (&jit_typeinfo::logically_true,
+                                              cond);
           block->append (check);
 
           jit_block *next = create<jit_block> (block->name ());
           add_block (next);
           block->append (create<jit_check_error> (check, next, final_block));
           block = next;
 
-          jit_block *body = create<jit_block> (i == 0 ? "if_body" : "ifelse_body");
+          jit_block *body = create<jit_block> (i == 0 ? "if_body"
+                                               : "ifelse_body");
           add_block (body);
 
           jit_instruction *br = create<jit_cond_branch> (check, body,
                                                         entry_blocks[i + 1]);
           block->append (br);
           block = body;
         }
 
@@ -1918,17 +1930,18 @@ jit_convert::visit_index_expression (tre
     fail ("Bad number of arguments in arg_list");
 
   tree_expression *tree_object = exp.expression ();
   jit_value *object = visit (tree_object);
 
   tree_expression *arg0 = arg_list->front ();
   jit_value *index = visit (arg0);
 
-  jit_call *call = create<jit_call> (jit_typeinfo::paren_subsref, object, index);
+  jit_call *call = create<jit_call> (jit_typeinfo::paren_subsref, object,
+                                     index);
   block->append (call);
 
   jit_block *normal = create<jit_block> (block->name ());
   block->append (create<jit_check_error> (call, normal, final_block));
   add_block (normal);
   block = normal;
   result = call;
 }
@@ -2226,17 +2239,18 @@ jit_convert::construct_ssa (void)
   entry_block->create_dom_tree ();
 
   // insert phi nodes where needed, this is done on a per variable basis
   for (vmap_t::iterator iter = vmap.begin (); iter != vmap.end (); ++iter)
     {
       jit_block::df_set visited, added_phi;
       std::list<jit_block *> ssa_worklist;
       iter->second->use_blocks (visited);
-      ssa_worklist.insert (ssa_worklist.begin (), visited.begin (), visited.end ());
+      ssa_worklist.insert (ssa_worklist.begin (), visited.begin (),
+                           visited.end ());
 
       while (ssa_worklist.size ())
         {
           jit_block *b = ssa_worklist.front ();
           ssa_worklist.pop_front ();
 
           for (jit_block::df_iterator diter = b->df_begin ();
                diter != b->df_end (); ++diter)
@@ -2441,17 +2455,18 @@ jit_convert::convert_llvm::convert (llvm
           llvm::Value *loaded_arg = builder.CreateConstInBoundsGEP1_32 (arg, i);
           arguments[args[i].first] = loaded_arg;
         }
 
       std::list<jit_block *>::const_iterator biter;
       for (biter = blocks.begin (); biter != blocks.end (); ++biter)
         {
           jit_block *jblock = *biter;
-          llvm::BasicBlock *block = llvm::BasicBlock::Create (context, jblock->name (),
+          llvm::BasicBlock *block = llvm::BasicBlock::Create (context,
+                                                              jblock->name (),
                                                               function);
           jblock->stash_llvm (block);
         }
 
       jit_block *first = *blocks.begin ();
       builder.CreateBr (first->to_llvm ());
 
       // constants aren't in the IR, we visit those first
@@ -2610,17 +2625,18 @@ jit_convert::convert_llvm::visit (jit_br
   b.stash_llvm (builder.CreateBr (b.successor_llvm ()));
 }
 
 void
 jit_convert::convert_llvm::visit (jit_cond_branch& cb)
 {
   llvm::Value *cond = cb.cond_llvm ();
   llvm::Value *br;
-  br = builder.CreateCondBr (cond, cb.successor_llvm (0), cb.successor_llvm (1));
+  br = builder.CreateCondBr (cond, cb.successor_llvm (0),
+                             cb.successor_llvm (1));
   cb.stash_llvm (br);
 }
 
 void
 jit_convert::convert_llvm::visit (jit_call& call)
 {
   llvm::Value *ret = create_call (call.overload (), call.arguments ());
   call.stash_llvm (ret);
@@ -2847,17 +2863,18 @@ jit_info::jit_info (tree_jit& tjit, tree
 
 #ifdef OCTAVE_JIT_DEBUG
   std::cout << "-------------------- optimized llvm ir --------------------\n";
   llvm::raw_os_ostream llvm_cout (std::cout);
   llvm_function->print (llvm_cout);
   std::cout << std::endl;
 #endif
 
-  function = reinterpret_cast<jited_function>(engine->getPointerToFunction (llvm_function));
+  void *void_fn = engine->getPointerToFunction (llvm_function);
+  function = reinterpret_cast<jited_function> (void_fn);
 }
 
 jit_info::~jit_info (void)
 {
   if (llvm_function)
     llvm_function->eraseFromParent ();
 }
 
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -57,26 +57,26 @@ along with Octave; see the file COPYING.
 // The octave low level IR is a linear IR, it works by converting everything to
 // calls to jit_functions. This turns expressions like c = a + b into
 // c = call binary+ (a, b)
 // The jit_functions contain information about overloads for differnt types. For
 // example, if we know a and b are scalars, then c must also be a scalar.
 //
 //
 // TODO:
-// 1. Support error cases
-// 2. Support some simple matrix case (and cleanup Octave low level IR)
-// 3. Fix memory leaks in JIT
-// 4. Cleanup/documentation
-// 5. ...
+// 1. Support some simple matrix case (and cleanup Octave low level IR)
+// 2. Function calls
+// 3. Cleanup/documentation
+// 4. ...
 // ---------------------------------------------------------
 
 
-// we don't want to include llvm headers here, as they require __STDC_LIMIT_MACROS
-// and __STDC_CONSTANT_MACROS be defined in the entire compilation unit
+// we don't want to include llvm headers here, as they require
+// __STDC_LIMIT_MACROS and __STDC_CONSTANT_MACROS be defined in the entire
+// compilation unit
 namespace llvm
 {
   class Value;
   class Module;
   class FunctionPassManager;
   class PassManager;
   class ExecutionEngine;
   class Function;
@@ -147,17 +147,17 @@ public:
         NODE_T *sthis = static_cast<NODE_T *> (this);
         if (ilist->use_head)
           {
             ilist->use_tail->mnext = sthis;
             mprev = ilist->use_tail;
           }
         else
           ilist->use_head = sthis;
-        
+
         ilist->use_tail = sthis;
         ++ilist->muse_count;
       }
   }
 
   NODE_T *next (void) const { return mnext; }
 
   NODE_T *prev (void) const { return mprev; }
@@ -167,17 +167,17 @@ private:
     if (mvalue)
       {
         jit_ilist *ilist = mvalue;
         if (mprev)
           mprev->mnext = mnext;
         else
           // we are the use_head
           ilist->use_head = mnext;
-        
+
         if (mnext)
           mnext->mprev = mprev;
         else
           // we are the use tail
           ilist->use_tail = mprev;
 
         mnext = mprev = 0;
         --ilist->muse_count;
@@ -198,18 +198,18 @@ bool isa (U *value)
   return dynamic_cast<T *> (value);
 }
 
 // jit_range is compatable with the llvm range structure
 struct
 jit_range
 {
   jit_range (const Range& from) : base (from.base ()), limit (from.limit ()),
-    inc (from.inc ()), nelem (from.nelem ())
-    {}
+                                  inc (from.inc ()), nelem (from.nelem ())
+  {}
 
   operator Range () const
   {
     return Range (base, limit, inc);
   }
 
   double base;
   double limit;
@@ -420,27 +420,29 @@ public:
   }
 
   static jit_type *get_any (void) { return instance->any; }
 
   static jit_type *get_matrix (void) { return instance->matrix; }
 
   static jit_type *get_scalar (void) { return instance->scalar; }
 
-  static llvm::Type *get_scalar_llvm (void) { return instance->scalar->to_llvm (); }
+  static llvm::Type *get_scalar_llvm (void)
+  { return instance->scalar->to_llvm (); }
 
   static jit_type *get_range (void) { return instance->range; }
 
   static jit_type *get_string (void) { return instance->string; }
 
   static jit_type *get_bool (void) { return instance->boolean; }
 
   static jit_type *get_index (void) { return instance->index; }
 
-  static llvm::Type *get_index_llvm (void) { return instance->index->to_llvm (); }
+  static llvm::Type *get_index_llvm (void)
+  { return instance->index->to_llvm (); }
 
   static jit_type *type_of (const octave_value& ov)
   {
     return instance->do_type_of (ov);
   }
 
   static const jit_function& binary_op (int op)
   {
@@ -545,17 +547,17 @@ private:
 
   jit_type *do_difference (jit_type *lhs, jit_type *)
   {
     // FIXME: Maybe we can do something smarter?
     return lhs;
   }
 
   jit_type *do_type_of (const octave_value &ov) const;
-  
+
   const jit_function& do_binary_op (int op) const
   {
     assert (static_cast<size_t>(op) < binary_ops.size ());
     return binary_ops[op];
   }
 
   const jit_function& do_cast (jit_type *to)
   {
@@ -568,20 +570,20 @@ private:
       return null_function;
     return casts[id];
   }
 
   const jit_function::overload& do_cast (jit_type *to, jit_type *from)
   {
     return do_cast (to).get_overload (from);
   }
-  
+
   jit_type *new_type (const std::string& name, jit_type *parent,
                       llvm::Type *llvm_type);
-                      
+
 
   void add_print (jit_type *ty, void *call);
 
   void add_binary_op (jit_type *ty, int op, int llvm_op);
 
   void add_binary_icmp (jit_type *ty, int op, int llvm_op);
 
   void add_binary_fcmp (jit_type *ty, int op, int llvm_op);
@@ -735,33 +737,33 @@ class jit_terminator;
 
 template <typename T, jit_type *(*EXTRACT_T)(void), typename PASS_T = T,
           bool QUOTE=false>
 class jit_const;
 
 typedef jit_const<double, jit_typeinfo::get_scalar> jit_const_scalar;
 typedef jit_const<octave_idx_type, jit_typeinfo::get_index> jit_const_index;
 
-typedef jit_const<std::string, jit_typeinfo::get_string, const std::string&, true>
-jit_const_string;
+typedef jit_const<std::string, jit_typeinfo::get_string, const std::string&,
+                  true> jit_const_string;
 typedef jit_const<jit_range, jit_typeinfo::get_range, const jit_range&>
 jit_const_range;
 
 class jit_ir_walker;
 class jit_use;
 
 class
 jit_value : public jit_internal_list<jit_value, jit_use>
 {
 public:
   jit_value (void) : llvm_value (0), ty (0), mlast_use (0),
-		     min_worklist (false) {}
+                     min_worklist (false) {}
 
   virtual ~jit_value (void);
-  
+
   bool in_worklist (void) const
   {
     return min_worklist;
   }
 
   void stash_in_worklist (bool ain_worklist)
   {
     min_worklist = ain_worklist;
@@ -887,42 +889,42 @@ public:
   jit_instruction (size_t nargs)
     : already_infered (nargs, reinterpret_cast<jit_type *>(0)),
       mid (next_id ()), mparent (0)
   {
     marguments.reserve (nargs);
   }
 
   jit_instruction (jit_value *arg0)
-    : already_infered (1, reinterpret_cast<jit_type *>(0)), marguments (1), 
+    : already_infered (1, reinterpret_cast<jit_type *>(0)), marguments (1),
       mid (next_id ()), mparent (0)
   {
     stash_argument (0, arg0);
   }
 
   jit_instruction (jit_value *arg0, jit_value *arg1)
-    : already_infered (2, reinterpret_cast<jit_type *>(0)), marguments (2), 
+    : already_infered (2, reinterpret_cast<jit_type *>(0)), marguments (2),
       mid (next_id ()), mparent (0)
   {
     stash_argument (0, arg0);
     stash_argument (1, arg1);
   }
 
   jit_instruction (jit_value *arg0, jit_value *arg1, jit_value *arg2)
-    : already_infered (3, reinterpret_cast<jit_type *>(0)), marguments (3), 
+    : already_infered (3, reinterpret_cast<jit_type *>(0)), marguments (3),
       mid (next_id ()), mparent (0)
   {
     stash_argument (0, arg0);
     stash_argument (1, arg1);
     stash_argument (2, arg2);
   }
 
   jit_instruction (jit_value *arg0, jit_value *arg1, jit_value *arg2,
                    jit_value *arg3)
-    : already_infered (3, reinterpret_cast<jit_type *>(0)), marguments (4), 
+    : already_infered (3, reinterpret_cast<jit_type *>(0)), marguments (4),
       mid (next_id ()), mparent (0)
   {
     stash_argument (0, arg0);
     stash_argument (1, arg1);
     stash_argument (2, arg2);
     stash_argument (3, arg3);
   }
 
@@ -951,17 +953,17 @@ public:
   {
     assert (argument (i));
     return argument_type (i)->to_llvm ();
   }
 
   std::ostream& print_argument (std::ostream& os, size_t i) const
   {
     if (argument (i))
-      return argument (i)->short_print (os); 
+      return argument (i)->short_print (os);
     else
       return os << "NULL";
   }
 
   void stash_argument (size_t i, jit_value *arg)
   {
     marguments[i].stash_value (arg, this, i);
   }
@@ -1095,29 +1097,30 @@ public:
   JIT_VALUE_ACCEPT;
 private:
   T mvalue;
 };
 
 class jit_phi_incomming;
 
 class
-jit_block : public jit_value, public jit_internal_list<jit_block, jit_phi_incomming>
+jit_block : public jit_value, public jit_internal_list<jit_block,
+                                                       jit_phi_incomming>
 {
   typedef jit_internal_list<jit_block, jit_phi_incomming> ILIST_T;
 public:
   typedef std::list<jit_instruction *> instruction_list;
   typedef instruction_list::iterator iterator;
   typedef instruction_list::const_iterator const_iterator;
 
   typedef std::set<jit_block *> df_set;
   typedef df_set::const_iterator df_iterator;
 
-  jit_block (const std::string& aname) : mvisit_count (0), mid (NO_ID), idom (0),
-                                         mname (aname), malive (false)
+  jit_block (const std::string& aname) : mvisit_count (0), mid (NO_ID),
+                                         idom (0), mname (aname), malive (false)
   {}
 
   virtual void replace_with (jit_value *value);
 
   // we have a new internal list, but we want to stay compatable with jit_value
   jit_use *first_use (void) const { return jit_value::first_use (); }
 
   size_t use_count (void) const { return jit_value::use_count (); }
@@ -1300,17 +1303,18 @@ private:
 
   bool update_idom (size_t visit_count);
 
   void create_dom_tree (size_t visit_count);
 
   jit_block *idom_intersect (jit_block *b);
 
   template <typename func_type0, typename func_type1>
-  void do_visit_dom (size_t visit_count, func_type0 inorder, func_type1 postorder);
+  void do_visit_dom (size_t visit_count, func_type0 inorder,
+                     func_type1 postorder);
 
   static const size_t NO_ID = static_cast<size_t> (-1);
   size_t mvisit_count;
   size_t mid;
   jit_block *idom;
   df_set mdf;
   std::vector<jit_block *> dom_succ;
   std::string mname;
@@ -1366,17 +1370,18 @@ public:
     (ablock.*function) ();
   }
 private:
   func_type function;
 };
 
 template <typename func_type0, typename func_type1>
 void
-jit_block::do_visit_dom (size_t visit_count, func_type0 inorder, func_type1 postorder)
+jit_block::do_visit_dom (size_t visit_count, func_type0 inorder,
+                         func_type1 postorder)
 {
   if (mvisit_count > visit_count)
     return;
   mvisit_count = visit_count + 1;
 
   jit_block_callback<func_type0> inorder_cb (inorder);
   inorder_cb (*this);
 
@@ -1712,34 +1717,35 @@ class
 jit_call : public jit_instruction
 {
 public:
   jit_call (const jit_function& afunction,
             jit_value *arg0) : jit_instruction (arg0), mfunction (afunction)
   {}
 
   jit_call (const jit_function& (*afunction) (void),
-            jit_value *arg0) : jit_instruction (arg0), mfunction (afunction ()) {}
+            jit_value *arg0) : jit_instruction (arg0),
+                               mfunction (afunction ()) {}
 
   jit_call (const jit_function& afunction,
             jit_value *arg0, jit_value *arg1) : jit_instruction (arg0, arg1),
                                                 mfunction (afunction) {}
 
   jit_call (const jit_function& (*afunction) (void),
             jit_value *arg0, jit_value *arg1) : jit_instruction (arg0, arg1),
                                                 mfunction (afunction ()) {}
 
   jit_call (const jit_function& (*afunction) (void),
             jit_value *arg0, jit_value *arg1, jit_value *arg2)
     : jit_instruction (arg0, arg1, arg2), mfunction (afunction ()) {}
 
   jit_call (const jit_function& (*afunction) (void),
             jit_value *arg0, jit_value *arg1, jit_value *arg2, jit_value *arg3)
     : jit_instruction (arg0, arg1, arg2, arg3), mfunction (afunction ()) {}
-                                                
+
 
   const jit_function& function (void) const { return mfunction; }
 
   bool can_error (void) const
   {
     return overload ().can_error;
   }
 
@@ -2090,28 +2096,28 @@ private:
   {
     blocks.push_back (ablock);
     ablock->stash_location (--blocks.end ());
   }
 
   jit_variable *get_variable (const std::string& vname);
 
   jit_value *do_assign (const std::string& lhs, jit_value *rhs, bool print);
-                        
+
 
   jit_value *visit (tree *tee) { return visit (*tee); }
 
   jit_value *visit (tree& tee);
 
   void push_worklist (jit_instruction *instr)
   {
     if (! instr->in_worklist ())
       {
-	instr->stash_in_worklist (true);
-	worklist.push_back (instr);
+        instr->stash_in_worklist (true);
+        worklist.push_back (instr);
       }
   }
 
   void append_users (jit_value *v)
   {
     for (jit_use *use = v->first_use (); use; use = use->next ())
       push_worklist (use->user ());
   }
