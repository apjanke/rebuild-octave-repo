# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1238152925 -3600
#      Fri Mar 27 12:22:05 2009 +0100
# Node ID 88bf56bbccca84f1800b460559bd8f3c7b07cb76
# Parent  ac0a23e9f5c573dcce4a6628873b432e1758da72
make Array::find already return Matlab-compatible dimensions

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2541,16 +2541,31 @@ Array<T>::find (octave_idx_type n, bool 
               else
                 break;
             }
           if (k < n)
             retval.resize (k);
         }
     }
 
+  // Fixup return dimensions, for Matlab compatibility.
+  // find(zeros(0,0)) -> zeros(0,0)
+  // find(zeros(1,0)) -> zeros(1,0)
+  // find(zeros(0,1)) -> zeros(0,1)
+  // find(zeros(0,X)) -> zeros(0,1)
+  // find(zeros(1,1)) -> zeros(0,0) !!!! WHY?
+  // find(zeros(0,1,0)) -> zeros(0,0)
+  // find(zeros(0,1,0,1)) -> zeros(0,0) etc
+
+  if ((numel () == 1 && retval.is_empty ())
+      || (rows () == 0 && dims ().numel (1) == 0))
+    retval.dimensions = dim_vector ();
+  else if (rows () == 1 && ndims () == 2)
+    retval.dimensions = dim_vector (1, retval.length ());
+
   return retval;
 }
 
 
 #define INSTANTIATE_ARRAY_SORT(T) template class octave_sort<T>;
 
 #define NO_INSTANTIATE_ARRAY_SORT(T) \
  \
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -623,16 +623,17 @@ public:
     Array<U> result (dims ());
     U *p = result.fortran_vec ();
 
     std::transform (m, m + len, p, fcn);
 
     return result;
   }
 
+  template <class U> friend class Array;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-03-26  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.cc (Array<T>::find): Reshape result for Matlab compatibility.
+	* Array.h (Array<T>): Add friend template declaration.
+
 2009-03-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* idx-vector.cc (idx_vector::idx_vector_rep::idx_vector_rep (const
 	Array<bool>&): Use more M*b-compatible behaviour.
 
 2009-03-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dim-vector.h (dim_vector::numel): Add optional argument, simplify.
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-03-26  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/find.cc 
+	(find_nonzero_elem_idx (const Array<T>&, ...)): Move dimensions
+	fixup to liboctave.
+
 2009-03-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/find.cc 
 	(find_nonzero_elem_idx (const Array<T>&, ...)): Simplify.
 	Instantiate for bool and octave_int types.
 	(find_nonzero_elem_idx (const Sparse<T>&, ...)): 
 	Instantiate for bool.
 	(Ffind): Handle bool and octave_int cases.
diff --git a/src/DLD-FUNCTIONS/find.cc b/src/DLD-FUNCTIONS/find.cc
--- a/src/DLD-FUNCTIONS/find.cc
+++ b/src/DLD-FUNCTIONS/find.cc
@@ -44,33 +44,16 @@ find_nonzero_elem_idx (const Array<T>& n
   octave_value_list retval ((nargout == 0 ? 1 : nargout), Matrix ());
 
   Array<octave_idx_type> idx;
   if (n_to_find >= 0)
     idx = nda.find (n_to_find, direction == -1);
   else
     idx = nda.find ();
 
-  // Fixup idx dimensions, for Matlab compatibility.
-  // find(zeros(0,0)) -> zeros(0,0)
-  // find(zeros(1,0)) -> zeros(1,0)
-  // find(zeros(0,1)) -> zeros(0,1)
-  // find(zeros(0,X)) -> zeros(0,1)
-  // find(zeros(1,1)) -> zeros(0,0) !!!! WHY?
-  // find(zeros(0,1,0)) -> zeros(0,0)
-  // find(zeros(0,1,0,1)) -> zeros(0,0) etc
-  // FIXME: I don't believe this is right. Matlab seems to violate its own docs
-  // here, because a scalar *is* a row vector.
-
-  if ((nda.numel () == 1 && idx.is_empty ())
-      || (nda.rows () == 0 && nda.dims ().numel (1) == 0))
-    idx = idx.reshape (dim_vector (0, 0));
-  else if (nda.rows () == 1 && nda.ndims () == 2)
-    idx = idx.reshape (dim_vector (1, idx.length ()));
-
   switch (nargout)
     {
     default:
     case 3:
       retval(2) = ArrayN<T> (nda.index (idx_vector (idx)));
       // Fall through!
 
     case 2:
