# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1202849082 18000
#      Tue Feb 12 15:44:42 2008 -0500
# Node ID ada435261879e0ce135e2468ade51f3aca8e1270
# Parent  360b4f7684fdc62ab6647aec762235755f962e43
eliminate unnecessary explicit template instantiations

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,18 @@
 2008-02-12  John W. Eaton  <jwe@octave.org>
 
+	* sparse-sort.cc: Don't explicitly instantiate
+	class octave_sort<octave_idx_vector_sort *>,
+	class octave_sort<octave_idx_type>, or
+	class octave_sort<octave_sparse_sort_idxl *>.
+
+	* Sparse.h (INSTANTIATE_SPARSE_SORT): Delete macro.
+	* Sparse-C.cc, Sparse-b.cc, Sparse-d.cc: Don't use it.
+
 	* Range.cc (Range::sort_internal): Avoid shadow warning from gcc.
 
 2008-02-11  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in ($(MAKEDEPS)): Skip dependencies if omit_deps is defined.
 
 2008-02-08  John W. Eaton  <jwe@octave.org>
 
diff --git a/liboctave/Sparse-C.cc b/liboctave/Sparse-C.cc
--- a/liboctave/Sparse-C.cc
+++ b/liboctave/Sparse-C.cc
@@ -86,18 +86,16 @@ bool
 sparse_descending_compare (vec_index<Complex> *a, vec_index<Complex> *b)
 {
   return (xisnan (a->vec)
 	  || (xabs (a->vec) > xabs (b->vec))
 	  || ((xabs (a->vec) == xabs (b->vec))
 	      && (arg (a->vec) > arg (b->vec))));
 }
 
-INSTANTIATE_SPARSE_SORT (Complex);
-
 INSTANTIATE_SPARSE_AND_ASSIGN (Complex, OCTAVE_API);
 
 INSTANTIATE_SPARSE_ASSIGN (Complex, double, OCTAVE_API);
 
 #if 0
 template std::ostream& operator << (std::ostream&, const Sparse<Complex>&);
 #endif
 
diff --git a/liboctave/Sparse-b.cc b/liboctave/Sparse-b.cc
--- a/liboctave/Sparse-b.cc
+++ b/liboctave/Sparse-b.cc
@@ -26,18 +26,16 @@ along with Octave; see the file COPYING.
 #endif
 
 // Instantiate Sparse matrix of double values.
 
 #include "Sparse.h"
 #include "Sparse.cc"
 #include "oct-sort.cc"
 
-INSTANTIATE_SPARSE_SORT (bool);
-
 INSTANTIATE_SPARSE_AND_ASSIGN (bool, OCTAVE_API);
 
 #if 0
 template std::ostream& operator << (std::ostream&, const Sparse<bool>&);
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/Sparse-d.cc b/liboctave/Sparse-d.cc
--- a/liboctave/Sparse-d.cc
+++ b/liboctave/Sparse-d.cc
@@ -55,18 +55,16 @@ sparse_descending_compare (double a, dou
 
 template <>
 bool
 sparse_descending_compare (vec_index<double> *a, vec_index<double> *b)
 {
   return (xisnan (b->vec) || (a->vec > b->vec));
 }
 
-INSTANTIATE_SPARSE_SORT (double);
-
 INSTANTIATE_SPARSE_AND_ASSIGN (double, OCTAVE_API);
 
 #if 0
 template std::ostream& operator << (std::ostream&, const Sparse<double>&);
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/Sparse.h b/liboctave/Sparse.h
--- a/liboctave/Sparse.h
+++ b/liboctave/Sparse.h
@@ -541,20 +541,15 @@ assign1 (Sparse<LT>& lhs, const Sparse<R
 
 #define INSTANTIATE_SPARSE(T, API) \
   template class API Sparse<T>;
 
 #define INSTANTIATE_SPARSE_AND_ASSIGN(T, API) \
   INSTANTIATE_SPARSE (T, API); \
   INSTANTIATE_SPARSE_ASSIGN (T, T, API)
 
-#define INSTANTIATE_SPARSE_SORT(T) \
-  template class octave_sort<T>; \
-  template class vec_index<T>; \
-  template class octave_sort<vec_index<T> *>;
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/sparse-sort.cc b/liboctave/sparse-sort.cc
--- a/liboctave/sparse-sort.cc
+++ b/liboctave/sparse-sort.cc
@@ -44,31 +44,22 @@ octave_sparse_sidxl_comp (octave_sparse_
   octave_idx_type tmp = i->c - j->c;
   if (tmp < 0)
     return true;
   else if (tmp > 0)
     return false;
   return  (i->r < j->r);
 }
 
-// Instantiate the sparse sorting class
-template class octave_sort<octave_sparse_sort_idxl *>;
-
 // Need to know the original order of the sorted indexes in
 // sparse assignments, and this class does that
 bool
 octave_idx_vector_comp (octave_idx_vector_sort* i,
 			octave_idx_vector_sort* j)
 {
   return (i->i < j->i);
 }
 
-// Instantiate the sparse index sorting class
-template class octave_sort<octave_idx_vector_sort *>;
-
-// Instantiate the sorting class of octave_idx_type, need in MUL macro
-template class octave_sort<octave_idx_type>;
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
