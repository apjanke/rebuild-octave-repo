# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1458713660 25200
#      Tue Mar 22 23:14:20 2016 -0700
# Node ID ffbd3e86e0be6a2ff8808d124290d8566313fbf1
# Parent  ab8760b1245dfebc543bb558d5673c21de7c74ac
Faddeeva.cc: Use liboctave definitions for inf, nan, isinf, and isnan

* Faddeeva.cc: Include "lo-ieee.h".  Use Octave internal definitions for
inf, nan, isinf, and isnan to for consistency and to fix ambiguity errors.
Don't use "using namespace std".

diff --git a/liboctave/cruft/Faddeeva/Faddeeva.cc b/liboctave/cruft/Faddeeva/Faddeeva.cc
--- a/liboctave/cruft/Faddeeva/Faddeeva.cc
+++ b/liboctave/cruft/Faddeeva/Faddeeva.cc
@@ -152,42 +152,46 @@
 #  include "config.h"
 #endif
 
 /////////////////////////////////////////////////////////////////////////
 // macros to allow us to use either C++ or C (with C99 features)
 
 #ifdef __cplusplus
 
+#  include "lo-ieee.h"
+
 #  include "Faddeeva.hh"
 
 #  include <cfloat>
 #  include <cmath>
 #  include <limits>
-using namespace std;
 
 // use std::numeric_limits, since 1./0. and 0./0. fail with some compilers (MS)
-#  define Inf numeric_limits<double>::infinity()
-#  define NaN numeric_limits<double>::quiet_NaN()
+#  define Inf octave_Inf
+#  define NaN octave_NaN
 
-typedef complex<double> cmplx;
+typedef std::complex<double> cmplx;
 
 // Use C-like complex syntax, since the C syntax is more restrictive
 #  define cexp(z) exp(z)
 #  define creal(z) real(z)
 #  define cimag(z) imag(z)
 #  define cpolar(r,t) polar(r,t)
 
 #  define C(a,b) cmplx(a,b)
 
 #  define FADDEEVA(name) Faddeeva::name
 #  define FADDEEVA_RE(name) Faddeeva::name
 
 // isnan/isinf were introduced in C++11
-#  if (__cplusplus < 201103L) && (!defined(HAVE_ISNAN) || !defined(HAVE_ISINF))
+#  if defined (lo_ieee_isnan) && defined (lo_ieee_isinf)
+#    define isnan lo_ieee_isnan
+#    define isinf lo_ieee_isinf
+#  elif (__cplusplus < 201103L) && (!defined(HAVE_ISNAN) || !defined(HAVE_ISINF))
 static inline bool my_isnan(double x) { return x != x; }
 #    define isnan my_isnan
 static inline bool my_isinf(double x) { return 1/x == 0.; }
 #    define isinf my_isinf
 #  elif (__cplusplus >= 201103L)
 // g++ gets confused between the C and C++ isnan/isinf functions
 #    define isnan std::isnan
 #    define isinf std::isinf
