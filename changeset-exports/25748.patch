# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1533584160 -7200
#      Mon Aug 06 21:36:00 2018 +0200
# Node ID f3aa4a90b91feb56b95e555eea4e2ae244d27b67
# Parent  3c45cfac769246f91a98509853527080bd9ca38b
also restore cursor line numbers when restoring previous editor session_data

* gui-preferences.h: declare constants for preferences keys and default
  values related to session data

* file-editor.cc (restore_session): use constants for preferences, also
  read previous line numbers from preferences file and open the file
  accordingly;
  (reset_cancel): use constants for preferences, also get the current lines
  of all open file tabs and save them to the preferences file

diff --git a/libgui/src/gui-preferences.h b/libgui/src/gui-preferences.h
--- a/libgui/src/gui-preferences.h
+++ b/libgui/src/gui-preferences.h
@@ -45,16 +45,27 @@ struct gui_pref
 const gui_pref ed_comment_str_old ("editor/octave_comment_string", QVariant (0));
 const gui_pref ed_comment_str ("editor/oct_comment_str", QVariant (0));
 const gui_pref ed_uncomment_str ("editor/oct_uncomment_str", QVariant (1 + 2 + 4 + 8));
 
 const QString ed_last_comment_str ("editor/oct_last_comment_str");
 const QStringList ed_comment_strings (QStringList () << "##" << "#" << "%"<< "%%" << "%!");
 const int ed_comment_strings_count = 5;
 
+// Session data
+const gui_pref ed_session_names ("editor/savedSessionTabs",
+                                  QVariant (QStringList ()));
+const gui_pref ed_session_enc ("editor/saved_session_encodings",
+                                  QVariant (QStringList ()));
+const gui_pref ed_session_ind ("editor/saved_session_tab_index",
+                                  QVariant (QStringList ()));
+const gui_pref ed_session_lines ("editor/saved_session_lines",
+                                  QVariant (QStringList ()));
+
+
 // File handling
 const gui_pref ed_show_dbg_file ("editor/show_dbg_file", QVariant (true));
 #if defined (Q_OS_WIN32)
 const gui_pref ed_default_enc ("editor/default_encoding", QVariant ("SYSTEM"));
 #else
 const gui_pref ed_default_enc ("editor/default_encoding", QVariant ("UTF-8"));
 #endif
 
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -252,54 +252,62 @@ namespace octave
   void file_editor::restore_session (QSettings *settings)
   {
     //restore previous session
     if (! settings->value ("editor/restoreSession", true).toBool ())
       return;
 
     // get the data from the settings file
     QStringList sessionFileNames
-      = settings->value ("editor/savedSessionTabs",
-                         QStringList ()).toStringList ();
+      = settings->value (ed_session_names.key, ed_session_names.def)
+                         .toStringList ();
 
     QStringList session_encodings
-      = settings->value ("editor/saved_session_encodings",
-                         QStringList ()).toStringList ();
+      = settings->value (ed_session_enc.key, ed_session_enc.def)
+                        .toStringList ();
 
     QStringList session_index
-      = settings->value ("editor/saved_session_tab_index",
-                         QStringList ()).toStringList ();
+      = settings->value (ed_session_ind.key, ed_session_ind.def)
+                         .toStringList ();
+
+    QStringList session_lines
+      = settings->value (ed_session_lines.key, ed_session_lines.def)
+                         .toStringList ();
 
     // fill a list of the struct and sort it (depending on index)
     QList<session_data> s_data;
 
     bool do_encoding = (session_encodings.count () == sessionFileNames.count ());
     bool do_index = (session_index.count () == sessionFileNames.count ());
+    bool do_lines = (session_lines.count () == sessionFileNames.count ());
 
     for (int n = 0; n < sessionFileNames.count (); ++n)
       {
         QFileInfo file = QFileInfo (sessionFileNames.at (n));
         if (! file.exists ())
           continue;
 
-        session_data item = { 0, 0, sessionFileNames.at (n),
+        session_data item = { 0, -1, sessionFileNames.at (n),
                               QString (), QString ()};
+        if (do_lines)
+          item.line = session_lines.at (n).toInt ();
         if (do_index)
           item.index = session_index.at (n).toInt ();
         if (do_encoding)
           item.encoding = session_encodings.at (n);
 
         s_data << item;
       }
 
     qSort (s_data);
 
     // finally open the file with the desired encoding in the desired order
     for (int n = 0; n < s_data.count (); ++n)
-      request_open_file (s_data.at (n).file_name, s_data.at (n).encoding);
+      request_open_file (s_data.at (n).file_name, s_data.at (n).encoding,
+                         s_data.at (n).line);
   }
 
   void file_editor::focus (void)
   {
     if (m_no_focus)
       return;  // No focus for the editor if external open/close request
 
     octave_dock_widget::focus ();
@@ -372,35 +380,44 @@ namespace octave
     // Save open files for restoring in next session; this only is possible
     QSettings *settings = resource_manager::get_settings ();
 
     // save filenames (even if last session will not be restored next time)
     // together with encoding and the tab index
     QStringList fetFileNames;
     QStringList fet_encodings;
     QStringList fet_index;
+    QStringList fet_lines;
 
     // save all open tabs before they are definitely closed
     for (auto p = m_editor_tab_map.cbegin ();
          p != m_editor_tab_map.cend (); p++)
       {
         QString file_name = p->first;   // get file name of tab
         if (! file_name.isEmpty ())      // do not append unnamed files
           {
             fetFileNames.append (file_name);
             fet_encodings.append (m_editor_tab_map[file_name].encoding);
+
             QString index;
+            file_editor_tab *editor_tab
+              = static_cast<file_editor_tab *> (m_editor_tab_map[file_name].fet_ID);
             fet_index.append (index.setNum
-                              (m_tab_widget->indexOf (m_editor_tab_map[file_name].fet_ID)));
+                              (m_tab_widget->indexOf (editor_tab)));
+
+            int l, c;
+            editor_tab->qsci_edit_area ()->getCursorPosition (&l, &c);
+            fet_lines.append (index.setNum (l + 1));
           }
       }
 
-    settings->setValue ("editor/savedSessionTabs", fetFileNames);
-    settings->setValue ("editor/saved_session_encodings", fet_encodings);
-    settings->setValue ("editor/saved_session_tab_index", fet_index);
+    settings->setValue (ed_session_names.key, fetFileNames);
+    settings->setValue (ed_session_enc.key, fet_encodings);
+    settings->setValue (ed_session_ind.key, fet_index);
+    settings->setValue (ed_session_lines.key, fet_lines);
     settings->sync ();
 
     // Finally close all the tabs and return indication that we can exit
     // the application or close the editor.
     // Closing and deleting the tabs makes the editor visible. In case it was
     // hidden before, this state has to be restored afterwards
     bool vis = isVisible ();
 
