# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1367840753 14400
#      Mon May 06 07:45:53 2013 -0400
# Node ID 38fef1e833ea22d39c4c57c7c75d2fce2c9c14ec
# Parent  2df11dd7a589d22d6a812246bf0883c8dcb24352
handle copying names file browser to clipboard; allow multiple selections

* files-dock-widget.cc (class FileTreeViewer): New class.
(files_dock_widget::files_dock_widget): Use it for _file_tree_view.
New context menu action to copy selection to clipboard.
Set extended selection mode for _file_tree_view.
(files_dock_widget::contextmenu_copy_selection): New function.

diff --git a/libgui/src/files-dock-widget.cc b/libgui/src/files-dock-widget.cc
--- a/libgui/src/files-dock-widget.cc
+++ b/libgui/src/files-dock-widget.cc
@@ -23,16 +23,17 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "resource-manager.h"
 #include "files-dock-widget.h"
 
 #include <QApplication>
+#include <QClipboard>
 #include <QFileInfo>
 #include <QCompleter>
 #include <QProcess>
 #include <QDebug>
 #include <QHeaderView>
 #include <QLineEdit>
 #include <QSizePolicy>
 #include <QMenu>
@@ -40,16 +41,29 @@ along with Octave; see the file COPYING.
 #include <QMessageBox>
 #include <QToolButton>
 #include <QUrl>
 #include <QDesktopServices>
 #include <QFileDialog>
 
 #include "load-save.h"
 
+class FileTreeViewer : public QTreeView
+{
+public:
+
+  FileTreeViewer (QWidget *p) : QTreeView (p) { }
+
+  void mousePressEvent (QMouseEvent *e)
+  {
+    if (e->button () != Qt::RightButton)
+      QTreeView::mousePressEvent (e);
+  }
+};
+
 files_dock_widget::files_dock_widget (QWidget *p)
   : octave_dock_widget (p)
 {
   setObjectName ("FilesDockWidget");
   setWindowIcon (QIcon(":/actions/icons/logo.png"));
   setWindowTitle (tr ("File Browser"));
   setToolTip (tr ("Browse your files."));
 
@@ -126,17 +140,18 @@ files_dock_widget::files_dock_widget (QW
   // Create the QFileSystemModel starting in the actual directory
   QDir curr_dir;
   _file_system_model = new QFileSystemModel (this);
   _file_system_model->setFilter (QDir::NoDotAndDotDot | QDir::AllEntries);
   QModelIndex rootPathIndex = _file_system_model->setRootPath (
                                                   curr_dir.absolutePath ());
 
   // Attach the model to the QTreeView and set the root index
-  _file_tree_view = new QTreeView (container);
+  _file_tree_view = new FileTreeViewer (container);
+  _file_tree_view->setSelectionMode (QAbstractItemView::ExtendedSelection);
   _file_tree_view->setModel (_file_system_model);
   _file_tree_view->setRootIndex (rootPathIndex);
   _file_tree_view->setSortingEnabled (true);
   _file_tree_view->setAlternatingRowColors (true);
   _file_tree_view->setAnimated (true);
   _file_tree_view->setToolTip (tr ("Doubleclick a file to open it"));
 
   // get sort column and order as well as cloumn state (order and width)
@@ -323,16 +338,19 @@ files_dock_widget::contextmenu_requested
       QFileInfo info = _file_system_model->fileInfo(index);
 
       menu.addAction (QIcon (":/actions/icons/fileopen.png"), tr("Open"),
                      this, SLOT(contextmenu_open(bool)));
 
       menu.addAction (tr("Open in Default Application"),
                       this, SLOT (contextmenu_open_in_app (bool)));
 
+      menu.addAction (tr("Copy Selection to Clipboard"),
+                      this, SLOT (contextmenu_copy_selection (bool)));
+
       if (info.isFile () && info.suffix () == "m")
         menu.addAction (QIcon (":/actions/icons/artsbuilderexecute.png"),
                         tr("Run"), this, SLOT(contextmenu_run(bool)));
 
       if (info.isFile ())
         menu.addAction (tr("Load Data"), this, SLOT(contextmenu_load(bool)));
 
       if (info.isDir ())
@@ -383,16 +401,36 @@ files_dock_widget::contextmenu_open_in_a
   QItemSelectionModel *m = _file_tree_view->selectionModel ();
   QModelIndexList rows = m->selectedRows ();
 
   for (QModelIndexList::iterator it = rows.begin (); it != rows.end (); it++)
     open_item_in_app (*it);
 }
 
 void
+files_dock_widget::contextmenu_copy_selection (bool)
+{
+  QItemSelectionModel *m = _file_tree_view->selectionModel ();
+  QModelIndexList rows = m->selectedRows ();
+
+  QStringList selection;
+
+  for (QModelIndexList::iterator it = rows.begin (); it != rows.end (); it++)
+    {
+      QFileInfo info = _file_system_model->fileInfo (*it);
+
+      selection << info.fileName ();
+    }
+
+  QClipboard *clipboard = QApplication::clipboard ();
+
+  clipboard->setText (selection.join ("\n"));
+}
+
+void
 files_dock_widget::contextmenu_load (bool)
 {
   QItemSelectionModel *m = _file_tree_view->selectionModel ();
   QModelIndexList rows = m->selectedRows ();
 
   if (rows.size () > 0)
     {
       QModelIndex index = rows[0];
diff --git a/libgui/src/files-dock-widget.h b/libgui/src/files-dock-widget.h
--- a/libgui/src/files-dock-widget.h
+++ b/libgui/src/files-dock-widget.h
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 #include <QWidget>
 #include <QListWidget>
 #include <QFileSystemModel>
 #include <QToolBar>
 #include <QToolButton>
 #include <QVBoxLayout>
 #include <QAction>
 #include <QTreeView>
+#include <QMouseEvent>
 
 #include <QComboBox>
 #include "octave-dock-widget.h"
 
 /**
    \class files_dock_widget
    \brief Dock widget to display files in the current directory.
 */
@@ -80,16 +81,17 @@ public slots:
 
 private slots:
   /** context menu wanted */
   void contextmenu_requested (const QPoint& pos);
 
   /* context menu actions */
   void contextmenu_open (bool);
   void contextmenu_open_in_app (bool);
+  void contextmenu_copy_selection (bool);
   void contextmenu_run (bool);
   void contextmenu_load (bool);
   void contextmenu_rename (bool);
   void contextmenu_delete (bool);
   void contextmenu_newfile (bool);
   void contextmenu_newdir (bool);
   void contextmenu_setcurrentdir (bool);
 
