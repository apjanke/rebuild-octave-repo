# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1398620214 -7200
#      Sun Apr 27 19:36:54 2014 +0200
# Branch gui-release
# Node ID fac35875f6eb7011d7a42bced12096dcb3060a61
# Parent  02b75b57ed80dde2711d2bc8a3242e97977ca54c
update enabled status of undo/redo actions in the editor

* file-editor-tab.h: new inline function returning the qscintilla edit area

* octave-qscintilla.cc (constructor): connect textChanged signal to new private
  slot text_changed;
  (text_changed): new slot emitting a signal on undo/redo availability

* octave-qscintilla.h: new slot and new signal

* file-editor.cc (edit_status_update): new slot for updating undo/redo actions;
  (construct): undo/redo actions disabled at the beginning;
  (add_new_edit_tab): connect new slot to the signal from the qscintilla edit
  area indicating undo/redo availability

* file-editor.h: new slot

diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -42,16 +42,18 @@ class file_editor_tab : public QWidget
   Q_OBJECT
 
 public:
 
   file_editor_tab (const QString& directory = "");
 
   ~file_editor_tab (void);
 
+  octave_qscintilla *qsci_edit_area () { return _edit_area; }
+
 public slots:
 
   void update_window_title (bool modified);
   void handle_copy_available (bool enableCopy);
   void handle_margin_clicked (int line, int margin,
                               Qt::KeyboardModifiers state);
 
   // Tells the editor tab to react on changed settings.
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -981,16 +981,23 @@ file_editor::zoom_out (bool)
 
 void
 file_editor::zoom_normal (bool)
 {
   emit fetab_zoom_normal (_tab_widget->currentWidget ());
 }
 
 void
+file_editor::edit_status_update (bool undo, bool redo)
+{
+  _undo_action->setEnabled (undo);
+  _redo_action->setEnabled (redo);
+}
+
+void
 file_editor::handle_editor_state_changed (bool copy_available,
                                           const QString& file_name)
 {
   // In case there is some scenario where traffic could be coming from
   // all the file editor tabs, just process info from the current active tab.
   if (sender () == _tab_widget->currentWidget ())
     {
       _copy_action->setEnabled (copy_available);
@@ -1153,18 +1160,20 @@ file_editor::construct (void)
   _menu_bar->addMenu (_fileMenu);
 
   // edit menu
 
   QMenu *editMenu = new QMenu (tr ("&Edit"), _menu_bar);
 
   _undo_action = add_action (editMenu, QIcon (":/actions/icons/undo.png"),
           tr ("&Undo"), SLOT (request_undo (bool)));
+  _undo_action->setEnabled (false);
   _redo_action = add_action (editMenu, QIcon (":/actions/icons/redo.png"),
           tr ("&Redo"), SLOT (request_redo (bool)));
+  _redo_action->setEnabled (false);
 
   editMenu->addSeparator ();
 
   _copy_action = add_action (editMenu, QIcon (":/actions/icons/editcopy.png"),
           tr ("&Copy"), SLOT (request_copy (bool)));
   _copy_action->setEnabled (false);
   _cut_action = add_action (editMenu, QIcon (":/actions/icons/editcut.png"),
           tr ("Cu&t"), SLOT (request_cut (bool)));
@@ -1391,16 +1400,20 @@ file_editor::construct (void)
   check_actions ();
 }
 
 void
 file_editor::add_file_editor_tab (file_editor_tab *f, const QString& fn)
 {
   _tab_widget->addTab (f, fn);
 
+  // signals from the qscintilla edit area
+  connect (f->qsci_edit_area (), SIGNAL (status_update (bool, bool)),
+           this, SLOT (edit_status_update (bool, bool)));
+
   // Signals from the file editor_tab
   connect (f, SIGNAL (file_name_changed (const QString&, const QString&)),
            this, SLOT (handle_file_name_changed (const QString&,
                                                  const QString&)));
 
   connect (f, SIGNAL (editor_state_changed (bool, const QString&)),
            this, SLOT (handle_editor_state_changed (bool, const QString&)));
 
@@ -1635,18 +1648,16 @@ file_editor::check_actions ()
 
   _edit_function_action->setEnabled (have_tabs);
   _save_action->setEnabled (have_tabs);
   _save_as_action->setEnabled (have_tabs);
   _close_action->setEnabled (have_tabs);
   _close_all_action->setEnabled (have_tabs);
   _close_others_action->setEnabled (have_tabs && _tab_widget->count () > 1);
 
-  _undo_action->setEnabled (have_tabs);
-  _redo_action->setEnabled (have_tabs);
   _selectall_action->setEnabled (have_tabs);
 }
 
 // empty_script determines whether we have to create an empty script
 // 1. At startup, when the editor has to be (really) visible
 //    (Here we can not use the visibility changed signal)
 // 2. When the editor becomes visible when octave is running
 void
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -209,16 +209,17 @@ private slots:
   void request_styles_preferences (bool);
   void restore_create_file_setting ();
 
   void zoom_in (bool);
   void zoom_out (bool);
   void zoom_normal (bool);
 
   void create_context_menu (QMenu *);
+  void edit_status_update (bool, bool);
 
 protected:
 
   void dragEnterEvent(QDragEnterEvent *event);
   void dropEvent(QDropEvent *event);
   
 private:
 
diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -34,16 +34,18 @@ along with Octave; see the file COPYING.
 
 #include "octave-qscintilla.h"
 #include "file-editor-tab.h"
 #include "shortcut-manager.h"
 
 octave_qscintilla::octave_qscintilla (QWidget *p)
   : QsciScintilla (p)
 {
+  connect (this, SIGNAL (textChanged ()), this, SLOT (text_changed ()));
+
   // clear scintilla edit shortcuts that are handled by the editor
   QsciCommandSet *cmd_set = standardCommands ();
 
 #ifdef HAVE_QSCI_VERSION_2_6_0
   // find () was added in QScintilla 2.6
   cmd_set->find (QsciCommand::SelectionCopy)->setKey (0);
   cmd_set->find (QsciCommand::SelectionCut)->setKey (0);
   cmd_set->find (QsciCommand::Paste)->setKey (0);
@@ -258,9 +260,15 @@ octave_qscintilla::focusInEvent (QFocusE
 
 void
 octave_qscintilla::focusOutEvent (QFocusEvent *focusEvent)
 {
   emit qsci_has_focus_signal (false);
   QsciScintilla::focusOutEvent(focusEvent);
 }
 
+void
+octave_qscintilla::text_changed ()
+{
+  emit status_update (isUndoAvailable (), isRedoAvailable ());
+}
+
 #endif
diff --git a/libgui/src/m-editor/octave-qscintilla.h b/libgui/src/m-editor/octave-qscintilla.h
--- a/libgui/src/m-editor/octave-qscintilla.h
+++ b/libgui/src/m-editor/octave-qscintilla.h
@@ -47,25 +47,28 @@ public:
   void get_global_textcursor_pos (QPoint *global_pos, QPoint *local_pos);
   bool get_actual_word ();
 
 signals:
 
   void execute_command_in_terminal_signal (const QString&);
   void create_context_menu_signal (QMenu*);
   void qsci_has_focus_signal (bool);
+  void status_update (bool,bool);
 
 private slots:
 
   void contextmenu_help (bool);
   void contextmenu_doc (bool);
   void contextmenu_help_doc (bool);
   void contextmenu_edit (bool);
   void contextmenu_run (bool);
 
+  void text_changed (void);
+
 protected:
 
   void focusInEvent (QFocusEvent *focusEvent);
   void focusOutEvent (QFocusEvent *focusEvent);
 
 private:
 
   QString _word_at_cursor;
