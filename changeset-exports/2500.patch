# HG changeset patch
# User jwe
# Date 847818833 0
#      Tue Nov 12 17:13:53 1996 +0000
# Node ID e39839e18edc091647f9abc1d6ed3eb18a5bb797
# Parent  20db7604d5c6e745b48564c4a1e2911ddbe558d3
[project @ 1996-11-12 17:13:53 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+Tue Nov 12 11:11:21 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* idx-vector.cc (idx_is_inf_or_nan): New function.
+	(IDX_VEC_REP::idx_vector_rep): Use it.
+
 Sun Nov 10 17:09:24 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* str-vec.h, str-vec.cc: Add constructors to make string vectors
 	from vectors of C strings.
 
 	* oct-glob.h, oct-glob.cc (glob_match): Allow pat to be a string
 	vector.
 	(glob_match::match): Allow match string to be a string vector.
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -33,16 +33,17 @@ Software Foundation, 59 Temple Place - S
 #include <iostream.h>
 
 #include "Range.h"
 #include "dColVector.h"
 #include "dMatrix.h"
 
 #include "idx-vector.h"
 #include "lo-error.h"
+#include "lo-mappers.h"
 
 #define IDX_VEC_REP idx_vector::idx_vector_rep
 
 IDX_VEC_REP::idx_vector_rep (const IDX_VEC_REP& a)
 {
   data = 0;
   initialized = a.initialized;
   frozen = a.frozen;
@@ -68,20 +69,36 @@ IDX_VEC_REP::idx_vector_rep (const IDX_V
       max_val = a.max_val;
       min_val = a.min_val;
     }
 }
 
 static inline int
 tree_to_mat_idx (double x)
 {
-  if (x > 0)
-    return ((int) (x + 0.5) - 1);
-  else
-    return ((int) (x - 0.5) - 1);
+  return (x > 0) ? ((int) (x + 0.5) - 1) : ((int) (x - 0.5) - 1);
+}
+
+static inline bool
+idx_is_inf_or_nan (double x)
+{
+  bool retval = false;
+
+  if (xisnan (x))
+    {
+      (*current_liboctave_error_handler) ("NaN invalid as index");
+      retval = true;
+    }
+  else if (xisinf (x))
+    {
+      (*current_liboctave_error_handler) ("Inf invalid as index");
+      retval = true;
+    }
+
+  return retval;
 }
 
 IDX_VEC_REP::idx_vector_rep (const ColumnVector& v)
 {
   data = 0;
   initialized = 0;
   frozen = 0;
   colon_equiv_checked = 0;
@@ -101,18 +118,26 @@ IDX_VEC_REP::idx_vector_rep (const Colum
       max_val = 0;
       min_val = 0;
       initialized = 1;
       return;
     }
   else
     {
       data = new int [len];
+
       for (int i = 0; i < len; i++)
-	data[i] = tree_to_mat_idx (v.elem (i));
+	{
+	  double d = v.elem (i);
+
+	  if (idx_is_inf_or_nan (d))
+	    return;
+	  else
+	    data[i] = tree_to_mat_idx (d);
+	}
     }
 
   init_state ();
 }
 
 IDX_VEC_REP::idx_vector_rep (const Matrix& m)
 {
   data = 0;
@@ -136,19 +161,27 @@ IDX_VEC_REP::idx_vector_rep (const Matri
       min_val = 0;
       initialized = 1;
       return;
     }
   else
     {
       int k = 0;
       data = new int [len];
+
       for (int j = 0; j < orig_nc; j++)
 	for (int i = 0; i < orig_nr; i++)
-	  data[k++] = tree_to_mat_idx (m.elem (i, j));
+	  {
+	    double d = m.elem (i, j);
+
+	    if (idx_is_inf_or_nan (d))
+	      return;
+	    else
+	      data[k++] = tree_to_mat_idx (d);
+	  }
     }
 
   init_state ();
 }
 
 IDX_VEC_REP::idx_vector_rep (double d)
 {
   data = 0;
@@ -158,21 +191,24 @@ IDX_VEC_REP::idx_vector_rep (double d)
   colon_equiv = 0;
   colon = 0;
 
   len = 1;
 
   orig_nr = 1;
   orig_nc = 1;
 
-  data = new int [len];
+  if (idx_is_inf_or_nan (d))
+    return;
+  else
+    {
+      data = new int [len];
 
-  data[0] = tree_to_mat_idx (d);
-
-  init_state ();
+      data[0] = tree_to_mat_idx (d);
+    }
 }
 
 IDX_VEC_REP::idx_vector_rep (const Range& r)
 {
   data = 0;
   initialized = 0;
   frozen = 0;
   colon_equiv_checked = 0;
@@ -203,17 +239,21 @@ IDX_VEC_REP::idx_vector_rep (const Range
   double b = r.base ();
   double step = r.inc ();
 
   data = new int [len];
 
   for (int i = 0; i < len; i++)
     {
       double val = b + i * step;
-      data[i] = tree_to_mat_idx (val);
+
+      if (idx_is_inf_or_nan (val))
+	return;
+      else
+	data[i] = tree_to_mat_idx (val);
     }
 
   init_state ();
 }
 
 IDX_VEC_REP::idx_vector_rep (char c)
 {
   assert (c == ':');
