# HG changeset patch
# User John Bradshaw <john@johnbradshaw.org>
# Date 1307197605 25200
#      Sat Jun 04 07:26:45 2011 -0700
# Branch stable
# Node ID 013cd94d8d7fe5fd0fb5283ac6c11436d82da5d4
# Parent  de3e90a420e37aeb3b54a8b0588eba353a8d1c9e
doc: Spelling fixes for various documentation files

* NEWS, NEWS.1, NEWS.2, NEWS.3, README.MacOS, README.Windows,
doc/faq/OctaveFAQ.texi, doc/interpreter/install.txi,
doc/interpreter/sparseimages.m, doc/liboctave/array.texi, examples/COPYING:
Spelling fixes

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -157,17 +157,17 @@ Summary of important user-visible change
       logical matrix |= logical matrix
       logical matrix &= logical matrix
 
     where matrix and scalar belong to the same class.  The left-hand
     side must be a simple variable reference.
 
     Moreover, when unary operators occur in expressions, Octave will
     also try to do the operation in-place if it's argument is a
-    temporary expresssion.
+    temporary expression.
 
  ** The effect of comparison operators (<, >, <=, and >=) applied to
     complex numbers has changed to be consistent with the strict
     ordering defined by the `max', `min', and `sort' functions.  More
     specifically, complex numbers are compared by lexicographical
     comparison of the pairs `[abs(z), arg(z)]'.  Previously, only real
     parts were compared; this can be trivially achieved by wrapping the
     operands in real().
@@ -681,17 +681,17 @@ Summary of important user-visible change
     The performance of the sum, prod, sumsq, cumsum, cumprod, any, all,
     max and min functions has been significantly improved.
 
  ** Sorting and searching.
     
     The performance of sort has been improved, especially when sorting
     indices are requested.  An efficient built-in issorted
     implementation was added.  The sortrows function now uses a more
-    efficient algorithm, especially in the homegeneous case.  The lookup
+    efficient algorithm, especially in the homogeneous case.  The lookup
     function is now a built-in function performing a binary search,
     optimized for long runs of close elements.  Lookup also works with
     cell arrays of strings.
 
  ** Range arithmetics
 
     For some operations on ranges, Octave will attempt to keep the
     result as a range.  These include negation, adding a scalar,
diff --git a/NEWS.1 b/NEWS.1
--- a/NEWS.1
+++ b/NEWS.1
@@ -138,19 +138,19 @@ Summary of changes for version 1.1.0:
         -0.81742  -0.57605
 
       octave:8> x
       x =
 
       <structure: s u v>
 
     This feature should be considered experimental, but it seems to
-    work ok.  Suggestions for ways to improve it are welcome.
+    work OK.  Suggestions for ways to improve it are welcome.
 
-  * Octave now supports a limited form of exception handling modelled
+  * Octave now supports a limited form of exception handling modeled
     after the unwind-protect form of Lisp:
 
       unwind_protect
         BODY
       unwind_protect_cleanup
         CLEANUP
       end_unwind_protect
 
@@ -193,33 +193,33 @@ Summary of changes for version 1.1.0:
     without having to clutter up the if statement with continuation
     characters.
 
   * Continuation lines are now allowed in string constants and are
     handled correctly inside matrix constants.
 
   * Both `...{whitespace}\n' and `\{whitespace}\n' can be used to
     introduce continuation lines, where {whitespace} may include
-    spaces, tabs and comemnts.
+    spaces, tabs and comments.
 
   * The script directory has been split up by topic.
 
   * Dynamic linking mostly works with dld.  The following limitations
     are known problems:
 
     -- Clearing dynamically linked functions doesn't work.
 
     -- Dynamic linking only works with dld, which has not been ported
        to very many systems yet.
 
     -- Configuring with --enable-lite-kernel seems to mostly work to
        make nonessential built-in functions dynamically loaded, but
        there also seem to be some problems.  For example, fsolve seems
        to always return info == 3.  This is difficult to debug since
-       gdb won't seem to allow breakpoints to be set inside
+       GDB doesn't appear to allow breakpoints to be set inside
        dynamically loaded functions.
 
     -- Octave uses a lot of memory if the dynamically linked functions
        are compiled with -g.  This appears to be a limitation with
        dld, and can be avoided by not using -g to compile functions
        that will be linked dynamically.
 
   * fft2 and ifft2 are now built-in functions.
@@ -344,17 +344,17 @@ Summary of changes for version 1.1.0:
       ind2rgb   -- image format conversion
       loadimage -- load an image from a file
       ntsc2rgb  -- image format conversion
       ocean     -- set a color colormap
       rgb2ind   -- image format conversion
       rgb2ntsc  -- image format conversion
       saveimage -- save an image to a file
 
-  * New time and date funcitons:
+  * New time and date functions:
 
       tic          -- set wall-clock timer
       toc          -- get elapsed wall-clock time, since timer last set
       etime        -- another way to get elapsed wall-clock time
       cputime      -- get CPU time used since Octave started
       is_leap_year -- is the given year a leap year?
 
   * Other new functions:
@@ -447,17 +447,17 @@ Summary of changes for version 1.1.0:
       2
       3
       end
 
     all_va_args may be used more than once, but can only be used
     within functions that take a variable number of arguments.
 
   * If given a second argument, svd now returns an economy-sized
-    decomposition, eliminating the unecessary rows or columns of U or
+    decomposition, eliminating the unnecessary rows or columns of U or
     V.
 
   * The max and min functions correctly handle complex matrices in
     which some columns contain real values only.
 
   * The find function now handles 2 and 3 output arguments.
 
   * The qr function now allows computation of QR with pivoting.
@@ -930,17 +930,17 @@ Summary of changes for version 0.78:
 
   * Line and column information is included in more error messages.
 
 Summary of changes for version 0.77:
 -----------------------------------
 
   * Improved help.  The command `help -i topic' now uses the GNU Info
     browser to display help for the given topic directly from the
-    Texinfo documenation.
+    Texinfo documentation.
 
   * New function: chol -- Cholesky factorization.
 
 Summary of changes for version 0.76:
 -----------------------------------
 
   * Better run-time error messages.  Many now include line and column
     information indicating where the error occurred.  Octave will also
@@ -1281,17 +1281,17 @@ Summary of changes for version 0.71:
   * The command `save file' now saves all variables in the named file.
 
   * If do_fortran_indexing is 'true', indexing a scalar with
     [1,1,1,...] (n times) replicates its value n times.  The
     orientation of the resulting vector depends on the value of
     prefer_column_vectors.
 
   * Things like [[1,2][3,4]] no longer cause core dumps, and invalid
-    input like [1,2;3,4,[5,6]] now produces a diagnositic message.
+    input like [1,2;3,4,[5,6]] now produces a diagnostic message.
 
   * The cd, save, and load commands now do tilde expansion.
 
   * It's now possible to clear global variables and functions by name.
 
   * Use of clear inside functions is now a parse error.
 
 Summary of changes for version 0.70:
@@ -1375,17 +1375,17 @@ Summary of changes for version 0.67:
 
       find -- return the indices of nonzero elements.
 
   * Zero-one style indexing now works.  For example,
 
       a = [1,2,3,4];
       b = a([1,0,0,1])
 
-    sets b to the first and fourth elememnts of a.
+    sets b to the first and fourth elements of a.
 
     Zero-one style indexing also works for indexing the left hand side
     of an assignment.  For example,
 
       a = rand (1,2;3,4);
       a([0,1],:) = [-1,-2]
 
     sets the second row of a to [-1 -2]
@@ -1396,17 +1396,17 @@ Summary of changes for version 0.67:
       b = a([1,1,1,1]);
 
     is controlled by the new global variable `prefer_zero_one_indexing'.
     If this variable is equal to 'true', b will be set to [1 2 3 4].
     If it is false, b will be set to [1 1 1 1].  The default value is
     'false'.
 
   * Using the new global variable `propagate_empty_matrices', it is
-    possible to have unary andy binary operations on empty matrices
+    possible to have unary and binary operations on empty matrices
     return an empty matrix.  The default value of this variable is
     'warn', so that empty matrices are propagated but you get a
     warning.  Some functions, like eig and svd have also been changed
     to handle this.
 
   * Empty matrices can be used in conditionals, but they always
     evaluate to `false'.  With propagate_empty_matrices = 'true', both
     of the following expressions print 0: 
@@ -1589,14 +1589,14 @@ Summary of changes for version 0.50:
       win_texas_lotto  -- produce six unique random numbers between 1 and 50.
       quad             -- numerical integration.
       lu               -- LU factorization
       qr               -- QR factorization
       dassl            -- Solution of DAEs using DASSL.
 
   * New files:
 
-      THANKS -- A list of people and organazations who have supported
+      THANKS -- A list of people and organizations who have supported
                 the development of Octave.
 
       NEWS   -- This file, listing recent changes.
 
   * Help is now available at the gnuplot prompt.
diff --git a/NEWS.2 b/NEWS.2
--- a/NEWS.2
+++ b/NEWS.2
@@ -168,17 +168,17 @@ Summary of changes for version 2.1.x:
 
       cauchy_cdf         -- CDF of the Cauchy distribution
       cauchy_inv         -- Quantile function of the Cauchy distribution
       cauchy_pdf         -- PDF of the Cauchy distribution
       cauchy_rnd         -- Random deviates from the Cauchy distribution
 
       chisquare_cdf      -- CDF of the chi-square distribution
       chisquare_inv      -- Quantile function of the chi-square distribution
-      chisquare_pdf      -- PDF of the chi-sqaure distribution
+      chisquare_pdf      -- PDF of the chi-square distribution
       chisquare_rnd      -- Random deviates from the chi-square distribution
 
       discrete_cdf       -- CDF of a discrete distribution
       discrete_inv       -- Quantile function of a discrete distribution
       discrete_pdf       -- PDF of a discrete distribution
       discrete_rnd       -- Random deviates from a discrete distribution
 
       empirical_cdf      -- CDF of the empirical distribution
@@ -544,17 +544,17 @@ Summary of changes for version 2.0.5:
   * More tests.
 
 Summary of changes for version 2.0.4:
 ------------------------------------
 
   * It is now possible to use commands like ls, save, and cd as simple
     variable names.  They still cannot be used as formal parameters
     for functions, or as the names of structure variables.  Failed
-    assignments leave them undefined (you can recover the orginal
+    assignments leave them undefined (you can recover the original
     function definition using clear).
 
   * Is is now possible to invoke commands like ls, save, and cd as
     normal functions (for example, load ("foo", "x", "y", "z")).
 
 Summary of changes for version 2.0.3:
 ------------------------------------
 
@@ -977,17 +977,17 @@ Summary of changes for version 2.0:
       setpwent  -- rewind the password-file stream
       endpwent  -- close the password-file stream
 
   * Functions for getting info from the group database on Unix systems:
 
       getgrent  -- read entry from group-file stream, opening if necessary
       getgrgid  -- search for group entry with matching group ID
       getgrnam  -- search for group entry with matching group name
-      setgrent  -- rewind the pgroup-file stream
+      setgrent  -- rewind the group-file stream
       endgrent  -- close the group-file stream
 
   * The New function octave_config_info returns a structure containing
     information about how Octave was configured and compiled.
 
   * New function getrusage returns a structure containing system
     resource usage statistics.  The `cputime' function is now defined
     in an M-file using getrusage.
diff --git a/NEWS.3 b/NEWS.3
--- a/NEWS.3
+++ b/NEWS.3
@@ -55,17 +55,17 @@ Summary of important user-visible change
 	__gnuplot_splot__
 	__gnuplot_replot__
 
       Additionally, these functions no longer have any effect on plots
       created with the Matlab-style plot commands (plot, line, mesh,
       semilogx, etc.).
 
     + Plot property values are not extensively checked.  Specifying
-      invalid property values may produce unpredictible results.
+      invalid property values may produce unpredictable results.
 
     + Octave now sends data over the same pipe that is used to send
       commands to gnuplot.  While this avoids the problem of
       cluttering /tmp with data files, it is no longer possible to use
       the mouse to zoom in on plots.  This is a limitation of gnuplot,
       which is unable to zoom when the data it plots is not stored in
       a file.  Some work has been done to fix this problem in newer
       versions of gnuplot (> 4.2.2).  See for example, this thread
diff --git a/README.MacOS b/README.MacOS
--- a/README.MacOS
+++ b/README.MacOS
@@ -264,17 +264,17 @@ be installed.
 [2] Optionally the "xfig" package may be installed.
 
 
 2.3.2 Building With Dependencies Satisfied by Fink
 --------------------------------------------------
 
 After installing each of the dependencies, the sources are compiled by
 setting the proper environment variables and then following the standard build
-sequence.  The following is an example set of variables to for a 32-bit build
+sequence.  The following is an example set of variables for a 32-bit build
 using gcc-4.2.  When building from the sources obtained from the mercurial
 archive, ./autogen.sh must be run prior to ./configure.
 
   export FINK_PREFIX="/sw"
   export PREFIX="/usr/local/bin"
 
   export OPTFLAGS="-O2 -g"
   export LDFLAGS="-L$FINK_PREFIX/lib -L/usr/lib -m32"
diff --git a/README.Windows b/README.Windows
--- a/README.Windows
+++ b/README.Windows
@@ -1,11 +1,11 @@
 See the file README.Cygwin for information about installing the binary
 package of Octave for Cygwin.
 
 See the file README.MinGW for information about Octave on the MinGW platform
-including installation of binaries or compiling Octave frome source.
+including installation of binaries or compiling Octave from source.
 
 
 John W. Eaton
 jwe@octave.org
 
 Last updated: Sat Jan 22 16:56:05 PST 2011
diff --git a/doc/faq/OctaveFAQ.texi b/doc/faq/OctaveFAQ.texi
--- a/doc/faq/OctaveFAQ.texi
+++ b/doc/faq/OctaveFAQ.texi
@@ -237,17 +237,17 @@ encourage users of Octave to release the
 under terms that are compatible with the GPL.
 
 @node Requesting License Changes
 @section I wrote a program that links with Octave libraries and I don't want to release it under the terms of the GPL.  Will you change the license of the Octave libraries for me?
 
 No.  Instead of asking us to change the licensing terms for Octave, we
 recommend that you release your program under terms that are compatible
 with the GPL so that the free software community can benefit from your
-work the same as you have benefitted from the work of all the people who
+work the same as you have benefited from the work of all the people who
 have contributed to Octave.
 
 @node How can I cite Octave?
 @chapter How can I cite Octave?
 
 Pointing to @url{http://www.octave.org} is good, because that gives
 people a direct way to find out more.  If citation of a URL is not
 allowed by a publisher, or if you also want to point to a traditional
@@ -379,17 +379,17 @@ features:
 
 
 @node Octave Features
 @chapter What features are unique to Octave?
 
 @menu
 * Functions defined on the command-line::
 * Comments with #::
-* Strings delimitted by double quotes "::
+* Strings delimited by double quotes "::
 * Line continuation by backslash::
 * Informative block closing::
 * Coherent syntax::
 * Exclamation mark as not operator::
 * Increment and decrement operators::
 * Unwind-protect::
 * Built-in ODE and DAE solvers::
 @end menu
@@ -419,18 +419,18 @@ ans = Hello Moon
 @section Comments with #
 
 The pound character, @samp{#}, may be used to start comments, in
 addition to @samp{%}. See the previous example. The major advantage of
 this is that as @samp{#} is also a comment character for unix script
 files, any file that starts with a string like @samp{#! /usr/bin/octave
 -q} will be treated as an octave script and be executed by octave.
 
-@node Strings delimitted by double quotes "
-@section Strings delimitted by double quotes "
+@node Strings delimited by double quotes "
+@section Strings delimited by double quotes "
 The double quote, @samp{"}, may be used to delimit strings, in addition
 to the single quote @samp{'}. See the previous example. Also,
 double-quoted strings include backslash interpretation (like C++, C, and
 Perl) while single quoted are uninterpreted (like @sc{Matlab} and Perl).
 
 @node Line continuation by backslash
 @section Line continuation by backslash
 
@@ -508,17 +508,17 @@ value of @var{x} is 3.
 For matrix and vector arguments, the increment and decrement operators
 work on each element of the operand.
 
 @node Unwind-protect
 @section Unwind-protect
 
 @cindex Unwind-protect
 
-Octave supports a limited form of exception handling modelled after the
+Octave supports a limited form of exception handling modeled after the
 unwind-protect form of Lisp.  The general form of an
 @code{unwind_protect} block looks like this:
 
 @example
 @group
 unwind_protect
   @var{body}
 unwind_protect_cleanup
@@ -639,17 +639,17 @@ maintainers can duplicate your bug.
 Source code is available on the Octave development site, where you are
 sure to get the latest version.
 
 @itemize @bullet
 @item @url{http://www.octave.org/download.html}
 @item @url{ftp://ftp.octave.org/pub/octave/}
 @end itemize
 
-Since Octave is distrubted under the terms of the GPL, you can get
+Since Octave is distributed under the terms of the GPL, you can get
 Octave from a friend who has a copy, or from the Octave website.
 
 @node Pre-compiled binary packages
 @section Pre-compiled binary packages
 @cindex  Pre-compiled binary packages
 @cindex  Binaries
 
 The Octave project does not distribute binary packages, but other
@@ -881,17 +881,17 @@ end
 
 The main difference with @sc{Matlab} is a matter of scope. While nested
 functions have access to the parent function's scope in @sc{Matlab}, no
 such thing is available in Octave, due to how Octave essentially
 ``un-nests'' nested functions.
 
 The authors of Octave consider the nested function scoping rules of
 @sc{Matlab} to be more problems than they are worth as they introduce
-diffiult to find bugs as inadvertantly modifying a variable in a
+difficult to find bugs as inadvertently modifying a variable in a
 nested function that is also used in the parent is particularly easy.
 
 @item Differences in core syntax
 There a few core @sc{Matlab} syntaxes that are not accepted by Octave,
 these being
 
 @itemize @bullet
 @item
@@ -1015,17 +1015,17 @@ for more details.
 Octave is a community project and so the toolboxes that exist are
 donated by those interested in them through the Octave Forge website
 (@url{http://octave.sourceforge.net}). These might be lacking in certain
 functionality relative to the @sc{Matlab} toolboxes, and might not
 exactly duplicate the @sc{Matlab} functionality or interface.
 
 @item Short-circuit & and | operators
 The @code{&} and @code{|} operators in @sc{Matlab} short-circuit when
-included in an if statemant and not otherwise.  In Octave only the
+included in an if statement and not otherwise.  In Octave only the
 @code{&&} and @code{||} short circuit.  Note that this means that
 
 @example
 @group
   if (a | b)
     @dots{}
   end
 @end group
@@ -1281,17 +1281,17 @@ Octave has the operators "++", "--", "-=
 @item
 Character strings in Octave can be denoted with double or single
 quotes. There is a subtle difference between the two in that escaped
 characters like @code{\n} (newline), @code{\t} (tab), etc are
 interpreted in double quoted strings but not single quoted strings. This
 difference is important on Windows platforms where the "\" character is
 used in path names, and so single quoted strings should be used in
 paths. @sc{Matlab} doesn't have double quoted strings and so they should
-be avoided if the code will be transfered to a @sc{Matlab} user.
+be avoided if the code will be transferred to a @sc{Matlab} user.
 @end itemize
 
 @end itemize
 
 @node Index
 @appendix Concept Index
 
 @printindex cp
diff --git a/doc/interpreter/install.txi b/doc/interpreter/install.txi
--- a/doc/interpreter/install.txi
+++ b/doc/interpreter/install.txi
@@ -218,17 +218,17 @@ features not generally available in all 
 Octave's makefiles to work with other make programs is probably not
 worth your time; instead, we simply recommend installing GNU Make.
 
 There are currently two options for plotting in Octave: (1) the external
 program gnuplot, or (2) the internal graphics engine using OpenGL and
 FLTK@.  Gnuplot is a command-driven interactive function plotting
 program.  Gnuplot is copyrighted, but freely distributable.  As of
 Octave release 3.4, gnuplot is the default option for plotting.  But,
-the internal graphics engine is nearly 100% compatibile, certainly for
+the internal graphics engine is nearly 100% compatible, certainly for
 most ordinary plots, and users are encouraged to test it.  It is
 anticipated that the internal engine will become the default option at
 the next major release of Octave.
 
 To compile Octave, you will need a recent version of @code{g++} or other
 ANSI C++ compiler.  In addition, you will need a Fortran 77 compiler or
 @code{f2c}.  If you use @code{f2c}, you will need a script like
 @code{fort77} that works like a normal Fortran compiler by combining
diff --git a/doc/interpreter/sparseimages.m b/doc/interpreter/sparseimages.m
--- a/doc/interpreter/sparseimages.m
+++ b/doc/interpreter/sparseimages.m
@@ -195,17 +195,17 @@ function femimages (nm, typ)
     for idx = 1:w-1
       widx = (idx-1)*h;
       elems = [elems; widx+[(1:h-1);(2:h);h+(1:h-1)]']; 
       elems = [elems; widx+[(2:h);h+(2:h);h+(1:h-1)]']; 
     endfor
 
     E = size(elems,1);  #No. of elements
     N = size(nodes,1);  #No. of elements
-    D = size(elems,2);  #dimentions+1
+    D = size(elems,2);  #dimensions+1
 
     ## Plot FEM Geometry
     elemx = elems(:,[1,2,3,1])';
     xelems = reshape( nodes(elemx, 1), 4, E);
     yelems = reshape( nodes(elemx, 2), 4, E);
 
     ## Set element conductivity
     conductivity = [1*ones(1,16),2*ones(1,48),1*ones(1,16)];
diff --git a/doc/liboctave/array.texi b/doc/liboctave/array.texi
--- a/doc/liboctave/array.texi
+++ b/doc/liboctave/array.texi
@@ -172,17 +172,17 @@ the current size, the length is updated 
 @deftypefnx Constructor {} DiagArray<T> (int @var{n})
 @deftypefnx Constructor {} DiagArray<T> (int @var{n}, const T &@var{val})
 @deftypefnx Constructor {} DiagArray<T> (int @var{r}, int @var{c})
 @deftypefnx Constructor {} DiagArray<T> (int @var{r}, int @var{c}, const T &@var{val})
 @deftypefnx Constructor {} DiagArray<T> (const Array<T> &@var{a})
 @deftypefnx Constructor {} DiagArray<T> (const DiagArray<T> &@var{a})
 @end deftypefn
 
-@deftypeop Assginment DiagArray<T>& {} {operator =} (const DiagArray<T> &@var{a})
+@deftypeop Assignment DiagArray<T>& {} {operator =} (const DiagArray<T> &@var{a})
 @end deftypeop
 
 @deftypemethod DiagArray<T> int dim1 (void) const
 @deftypemethodx DiagArray<T> int rows (void) const
 @end deftypemethod
 
 @deftypemethod DiagArray<T> int dim2 (void) const
 @deftypemethodx DiagArray<T> int cols (void) const
diff --git a/examples/COPYING b/examples/COPYING
--- a/examples/COPYING
+++ b/examples/COPYING
@@ -1,3 +1,3 @@
-Copyright notices are intentionlly omitted from the files in the
+Copyright notices are intentionally omitted from the files in the
 examples directory.  We don't want copyright notices cluttering the
 manual.
