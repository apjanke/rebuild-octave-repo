# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1262592019 18000
#      Mon Jan 04 03:00:19 2010 -0500
# Node ID 5813ec5077b568b705a536907d219ac0e44b76e5
# Parent  4e6b245d4eb78a5715e90873291cffd3e4ad535f
don't allow e, i, j, inf, or nan to be commands

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-01-04  John W. Eaton  <jwe@octave.org>
+
+	* lex.ll (can_be_command): New function.
+	(handle_identifier): Use it.
+
 2010-01-04  Marco Atzeri  <marco_atzeri@yahoo.it>
 
 	* Makefile.am (install-oct): Write $(DESTDIR)$(...), not
 	$(DESTDIR).$(...).
 
 2010-01-02  Ben Abbott <bpabbott@mac.com>
 
 	* mappers.cc: Change test tolerance from 1e-16 to eps.
diff --git a/src/lex.ll b/src/lex.ll
--- a/src/lex.ll
+++ b/src/lex.ll
@@ -2828,16 +2828,29 @@ next_token_can_follow_bin_op (void)
 
       buf.pop ();
     }
 
   return (isalnum (c) || match_any (c, "!\"'(-[_{~"));
 }
 
 static bool
+can_be_command (const std::string& tok)
+{
+  // Don't allow these names to be treated as commands to avoid
+  // surprises when parsing things like "NaN ^2".
+
+  return ! (tok == "e"
+            || tok == "I" || tok == "i"
+            || tok == "J" || tok == "j"
+            || tok == "Inf" || tok == "inf"
+            || tok == "NaN" || tok == "nan");
+}
+
+static bool
 looks_like_command_arg (void)
 {
   bool retval = true;
 
   int c0 = text_yyinput ();
 
   switch (c0)
     {
@@ -3246,17 +3259,18 @@ handle_identifier (void)
   //
   // If the following token is `=', or if we are parsing a function
   // return list or function parameter list, or if we are looking at
   // something like [ab,cd] = foo (), force the symbol to be inserted
   // as a variable in the current symbol table.
 
   if (! is_variable (tok))
     {
-      if (at_bos && spc_gobbled && looks_like_command_arg ())
+      if (at_bos && spc_gobbled && can_be_command (tok)
+          && looks_like_command_arg ())
 	{
 	  BEGIN (COMMAND_START);
 	}
       else if (next_tok_is_eq
 	       || lexer_flags.looking_at_decl_list
 	       || lexer_flags.looking_at_return_list
 	       || (lexer_flags.looking_at_parameter_list
 		   && ! lexer_flags.looking_at_initializer_expression))
