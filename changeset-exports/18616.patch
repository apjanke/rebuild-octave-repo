# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1396569014 14400
#      Thu Apr 03 19:50:14 2014 -0400
# Branch stable
# Node ID aa861a98d84d084656ef9109bfd5279fea82aa99
# Parent  ef7bb00d8167d84326ac30427f499a0e47c573b4
fwrite: don't convert to octave_int for char output types

* oct-stream.cc (convert_chars): New template function.
(ultimate_element_type): New traits class and specialization.
(convert_data): Handle conversion to char types differently from
single byte integer types.
* io.tst: New test.

diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -3374,61 +3374,98 @@ octave_stream::write (const octave_value
         invalid_operation ("fwrite", "writing");
     }
 
   return retval;
 }
 
 template <class T, class V>
 static void
+convert_chars (const void *data, void *conv_data, octave_idx_type n_elts)
+{
+  const T *tt_data = static_cast<const T *> (data);
+
+  V *vt_data = static_cast<V *> (conv_data);
+
+  for (octave_idx_type i = 0; i < n_elts; i++)
+    vt_data[i] = tt_data[i];
+}
+
+template <class T, class V>
+static void
 convert_ints (const T *data, void *conv_data, octave_idx_type n_elts,
               bool swap)
 {
   typedef typename V::val_type val_type;
 
   val_type *vt_data = static_cast <val_type *> (conv_data);
 
   for (octave_idx_type i = 0; i < n_elts; i++)
     {
+      // Yes, we want saturation semantics when converting to an integer
+      // type.
+
       V val (data[i]);
 
       vt_data[i] = val.value ();
 
       if (swap)
         swap_bytes<sizeof (val_type)> (&vt_data[i]);
     }
 }
 
 template <class T>
+class ultimate_element_type
+{
+public:
+  typedef T type;
+};
+
+template <class T>
+class ultimate_element_type<octave_int<T> >
+{
+public:
+  typedef T type;
+};
+
+template <class T>
 static bool
 convert_data (const T *data, void *conv_data, octave_idx_type n_elts,
               oct_data_conv::data_type output_type,
               oct_mach_info::float_format flt_fmt)
 {
   bool retval = true;
 
   bool swap
     = ((oct_mach_info::words_big_endian ()
         && flt_fmt == oct_mach_info::flt_fmt_ieee_little_endian)
        || flt_fmt == oct_mach_info::flt_fmt_ieee_big_endian);
 
   bool do_float_conversion =  flt_fmt != oct_mach_info::float_format ();
 
-  // We use octave_intN classes here instead of converting directly to
-  // intN_t so that we get integer saturation semantics.
+  typedef typename ultimate_element_type<T>::type ult_elt_type;
 
   switch (output_type)
     {
     case oct_data_conv::dt_char:
+      convert_chars<ult_elt_type, char> (data, conv_data, n_elts);
+      break;
+
     case oct_data_conv::dt_schar:
+      convert_chars<ult_elt_type, signed char> (data, conv_data, n_elts);
+      break;
+
+    case oct_data_conv::dt_uchar:
+      convert_chars<ult_elt_type, unsigned char> (data, conv_data, n_elts);
+      break;
+
     case oct_data_conv::dt_int8:
       convert_ints<T, octave_int8> (data, conv_data, n_elts, swap);
       break;
 
-    case oct_data_conv::dt_uchar:
     case oct_data_conv::dt_uint8:
       convert_ints<T, octave_uint8> (data, conv_data, n_elts, swap);
       break;
 
     case oct_data_conv::dt_int16:
       convert_ints<T, octave_int16> (data, conv_data, n_elts, swap);
       break;
 
diff --git a/test/io.tst b/test/io.tst
--- a/test/io.tst
+++ b/test/io.tst
@@ -429,16 +429,28 @@
 %!     endif
 %!   endif
 %! endif
 %!
 %! unlink (nm);
 %! assert (__prog_output_assert__ ("ok"));
 
 %!test
+%! x = char (128:255)';
+%! nm = tmpnam ();
+%! id = fopen (nm, "wb");
+%! fwrite (id, x);
+%! fclose (id);
+%! id = fopen (nm, "rb");
+%! y = fread (id, Inf, "uchar=>char");
+%! fclose (id);
+%! unlink (nm);
+%! assert (x, y);
+
+%!test
 %! nm = tmpnam ();
 %! id = fopen (nm, "wb");
 %! if (id > 0)
 %!   fprintf (id, "%d\n", 1:100);
 %!   fclose (id);
 %!   id = fopen (nm, "rb");
 %!   if (id > 0)
 %!     for i = 1:101
