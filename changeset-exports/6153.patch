# HG changeset patch
# User jwe
# Date 1163439055 0
#      Mon Nov 13 17:30:55 2006 +0000
# Node ID e60688a1ea0728afd5e099ac301e67545e54d625
# Parent  2eb0723b4fad841897f1508537133b940e08f107
[project @ 2006-11-13 17:30:54 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2006-11-13  Rafael Laboissiere  <rafael@debian.org>
+
+	* mkoctfile.in: Add -Wl,... options to ldflags, not pass_on_flags.
+
 2006-11-11  John W. Eaton  <jwe@octave.org>
 
 	* examples/Makefile.in (octave.desktop):
 	Use $(simple-move-if-change-rule) here.
 
 	* Makeconf.in (simple-move-if-change-rule,
 	(builddir-move-if-change-rule): New macros.
 
diff --git a/liboctave/Array-d.cc b/liboctave/Array-d.cc
--- a/liboctave/Array-d.cc
+++ b/liboctave/Array-d.cc
@@ -33,27 +33,27 @@ 02110-1301, USA.
 INSTANTIATE_ARRAY_AND_ASSIGN (double);
 
 INSTANTIATE_ARRAY_ASSIGN (double, int);
 INSTANTIATE_ARRAY_ASSIGN (double, short);
 INSTANTIATE_ARRAY_ASSIGN (double, char);
 
 #include "Array2.h"
 
-template class Array2<double>;
+template class OCTAVE_API Array2<double>;
 
 #include "ArrayN.h"
 #include "ArrayN.cc"
 
-template class ArrayN<double>;
+template class OCTAVE_API ArrayN<double>;
 
-template std::ostream& operator << (std::ostream&, const ArrayN<double>&);
+template OCTAVE_API std::ostream& operator << (std::ostream&, const ArrayN<double>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
-template class DiagArray2<double>;
+template class OCTAVE_API DiagArray2<double>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2006-11-13  Michael Goffioul  <michael.goffioul@swing.be>
+
+	* Array-d.cc, dDiagMatrix.h: Sprinkle with OCTAVE_API as needed.
+
 2006-11-11  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in ($(OPTS_INC), mx-ops.h):
 	Use $(simple-move-if-change-rule) here.
 
 2006-11-09  David Bateman  <dbateman@free.fr>
 
 	* sparse-base-chol.cc (sparse_base_chol_rep::Q): Cast perms(i) to
diff --git a/liboctave/dDiagMatrix.h b/liboctave/dDiagMatrix.h
--- a/liboctave/dDiagMatrix.h
+++ b/liboctave/dDiagMatrix.h
@@ -67,18 +67,18 @@ public:
   DiagMatrix& fill (double val, octave_idx_type beg, octave_idx_type end);
   DiagMatrix& fill (const ColumnVector& a);
   DiagMatrix& fill (const RowVector& a);
   DiagMatrix& fill (const ColumnVector& a, octave_idx_type beg);
   DiagMatrix& fill (const RowVector& a, octave_idx_type beg);
 
   DiagMatrix transpose (void) const;
 
-  friend DiagMatrix real (const ComplexDiagMatrix& a);
-  friend DiagMatrix imag (const ComplexDiagMatrix& a);
+  friend OCTAVE_API DiagMatrix real (const ComplexDiagMatrix& a);
+  friend OCTAVE_API DiagMatrix imag (const ComplexDiagMatrix& a);
 
   // resize is the destructive analog for this one
 
   Matrix extract (octave_idx_type r1, octave_idx_type c1, octave_idx_type r2, octave_idx_type c2) const;
 
   // extract row or column i.
 
   RowVector row (octave_idx_type i) const;
@@ -92,17 +92,17 @@ public:
 
   // other operations
 
   ColumnVector diag (void) const;
   ColumnVector diag (octave_idx_type k) const;
 
   // i/o
 
-  friend std::ostream& operator << (std::ostream& os, const DiagMatrix& a);
+  friend OCTAVE_API std::ostream& operator << (std::ostream& os, const DiagMatrix& a);
 
 private:
 
   DiagMatrix (double *d, octave_idx_type nr, octave_idx_type nc) : MDiagArray2<double> (d, nr, nc) { }
 };
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
diff --git a/mkoctfile.in b/mkoctfile.in
--- a/mkoctfile.in
+++ b/mkoctfile.in
@@ -141,17 +141,19 @@ Options:
 
   -LDIR                   Add -LDIR to link command.
 
   -M, --depend            Generate dependency files (.d) for C and C++
                           source files.
 
   -RDIR                   Add -RDIR to link command.
 
-  -W                      Pass flags though the compiler like -Wl,-rpath=...
+  -Wl,...                 Pass flags though the linker like -Wl,-rpath=...
+
+  -W...                   Pass flags though the compiler like -Wa,OPTION.
 
   -c, --compile           Compile, but do not link.
 
   -o FILE, --output FILE  Output file name.  Default extension is .oct
                           (or .mex if --mex is specified) unless linking
                           a stand-alone executable.
 
   -g                      Enable debugging options for compilers.
@@ -213,17 +215,17 @@ EOF
         incflags="$incflags -idirafter $1"
       else
         echo "mkoctfile: include directory name misisng name missing" 1>&2
       fi
     ;;
     -D*)
       defs="$defs $1"
     ;;
-    -[lLR]*)
+    -[lLR]* | -Wl,*)
       ldflags="$ldflags $1"
     ;;
     -M | --depend)
       depend=true
       compile=false
     ;;
     -o | --output)
       shift
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2006-11-13  Michael Goffioul  <michael.goffioul@swing.be>
+
+	* ov.cc (check_subsref_elements, Fsubsref, Fsubsasgn):
+	New functions.
+
+	* ov-re-mat.h, ov-scalar.h, pr-output.h:
+	Sprinkle with OCTAVE_API as needed.
+
 2006-11-11  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in (parse.cc): Avoid creating empty files.
 	(%.df : %cc, builtins.cc, mkbuiltins, PKG_ADD, DOCSTRINGS,
 	doc-files, gendoc.cc, ops.cc, $(OPT_HANDLERS), oct-errno.cc,
 	oct-gperf.h): Use $(simple-move-if-change-rule) here.
 	(lex.cc, __gnuplot_raw__.cc):
 	Use $(destdir-move-if-change-rule) here.
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -45,16 +45,17 @@ 02110-1301, USA.
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
 
 // Real matrix values.
 
 class
+OCTINTERP_API
 octave_matrix : public octave_base_matrix<NDArray>
 {
 public:
 
   octave_matrix (void)
     : octave_base_matrix<NDArray> () { }
 
   octave_matrix (const Matrix& m)
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -45,16 +45,17 @@ 02110-1301, USA.
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
 
 // Real scalar values.
 
 class
+OCTINTERP_API
 octave_scalar : public octave_base_scalar<double>
 {
 public:
 
   octave_scalar (void)
     : octave_base_scalar<double> (0.0) { }
 
   octave_scalar (double d)
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1875,13 +1875,146 @@ Return the size of @var{val} in bytes\n\
   if (args.length () == 1)
     retval = args(0).byte_size ();
   else
     print_usage ();
 
   return retval;
 }
 
+static void
+decode_subscripts (const char* name, const octave_value& arg,
+		   std::string& type_string,
+		   std::list<octave_value_list>& idx)
+{
+  Octave_map m = arg.map_value ();
+
+  if (! error_state
+      && m.length () == 2 && m.contains ("type") && m.contains ("subs"))
+    {
+      Cell& type = m.contents ("type");
+      Cell& subs = m.contents ("subs");
+
+      type_string = std::string (type.length(), '\0');
+
+      for (int k = 0; k < type.length (); k++)
+	{
+	  std::string item = type(k).string_value ();
+
+	  if (! error_state)
+	    {
+	      if (item == "{}")
+		type_string[k] = '{';
+	      else if (item == "()")
+		type_string[k] = '(';
+	      else if (item == ".")
+		type_string[k] = '.';
+	      else
+		{
+		  error("%s: invalid indexing type `%s'", name, item.c_str ());
+		  return;
+		}
+	    }
+	  else
+	    {
+	      error ("%s: expecting type(%d) to be a character string",
+		     name, k+1);
+	      return;
+	    }
+
+	  octave_value_list idx_item;
+
+	  if (subs(k).is_string ())
+	    idx_item(0) = subs(k);
+	  else if (subs(k).is_cell ())
+	    {
+	      Cell subs_cell = subs(k).cell_value ();
+
+	      for (int n = 0; n < subs_cell.length (); n++)
+		{
+		  if (subs_cell(n).is_string ()
+		      && subs_cell(n).string_value () == ":")
+		    idx_item(n) = octave_value(octave_value::magic_colon_t);
+		  else
+		    idx_item(n) = subs_cell(n);
+		}
+	    }
+	  else
+	    {
+	      error ("%s: expecting subs(%d) to be a character string or cell array",
+		     name, k+1);
+	      return;
+	    }
+
+	  idx.push_back (idx_item);
+	}
+    }
+  else
+    error ("%s: second argument must be a structure with fields `type' and `subs'", name);
+}
+
+DEFUN (subsref, args, nargout,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} subsref (@var{val}, @var{idx})\n\
+Perform the subscripted element selection operation according to\n\
+the subscript specified by @var{idx}.\n\
+\n\
+The subscript @var{idx} is expected to be a structure array with\n\
+fields @samp{type} and @samp{subs}.  Valid values for @samp{type}\n\
+are @samp{\"()\"}, @samp{\"@{@}\", and @samp{\".\"}.\n\
+The @samp{subs} field may be either @samp{\":\"} or a cell array\n\
+of index values.\n\
+@end deftypefn")
+{
+  octave_value_list retval;
+
+  if (args.length () == 2)
+    {
+      std::string type;
+      std::list<octave_value_list> idx;
+
+      decode_subscripts ("subsref", args(1), type, idx);
+
+      if (! error_state)
+	retval = args(0).subsref (type, idx, nargout);
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
+DEFUN (subsasgn, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} subsasgn (@var{val}, @var{idx}, @var{rhs})\n\
+Perform the subscripted assignment operation according to\n\
+the subscript specified by @var{idx}.\n\
+\n\
+The subscript @var{idx} is expected to be a structure array with\n\
+fields @samp{type} and @samp{subs}.  Valid values for @samp{type}\n\
+are @samp{\"()\"}, @samp{\"@{@}\", and @samp{\".\"}.\n\
+The @samp{subs} field may be either @samp{\":\"} or a cell array\n\
+of index values.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 3)
+    {
+      std::string type;
+      std::list<octave_value_list> idx;
+
+      decode_subscripts ("subsasgn", args(1), type, idx);
+
+      if (! error_state)
+	retval = args(0).subsasgn (type, idx, args(2));
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/pr-output.h b/src/pr-output.h
--- a/src/pr-output.h
+++ b/src/pr-output.h
@@ -125,17 +125,17 @@ octave_print_internal (std::ostream& os,
 		       int extra_indent = 0,
 		       bool pr_as_string = false);
 
 // TRUE means that the dimensions of empty objects should be printed
 // like this: x = [](2x0).
 extern bool Vprint_empty_dimensions;
 
 // How many levels of structure elements should we print?
-extern int Vstruct_levels_to_print;
+extern OCTINTERP_API int Vstruct_levels_to_print;
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
