# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1377745242 14400
#      Wed Aug 28 23:00:42 2013 -0400
# Node ID f0edd6c752e949c3bc0c49c81d8b8d9507a5c874
# Parent  040752d07240202b71fad29954a016a482b707b1
don't convert "end" token to "__end__" for indexing

* lex.ll (octave_base_lexer::handle_identifier): Don't translate "end"
to "__end__".
* pt-arg-list.cc (Fend): Rename from F__end__.
* pt-id.h (tree_identifier::has_magic_end):  Recognize "end" instead
of "__end__".
* pt-idx.cc: Refer to "end" in comment instead of "__end__".
* variables.cc (symbol_exist): Return early if keyword is found.
* resource-manager.cc (resource_manager::octave_keywords): Delete
__end__ from the list.

diff --git a/libgui/src/resource-manager.cc b/libgui/src/resource-manager.cc
--- a/libgui/src/resource-manager.cc
+++ b/libgui/src/resource-manager.cc
@@ -303,17 +303,16 @@ resource_manager::octave_keywords (void)
       "__calc_dimensions__ "
       "__contourc__ "
       "__current_scope__ "
       "__delaunayn__ "
       "__dispatch__ "
       "__display_tokens__ "
       "__dsearchn__ "
       "__dump_symtab_info__ "
-      "__end__ "
       "__error_text__ "
       "__finish__ "
       "__fltk_ginput__ "
       "__fltk_print__ "
       "__fltk_uigetfile__ "
       "__ftp__ "
       "__ftp_ascii__ "
       "__ftp_binary__ "
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -396,16 +396,18 @@ symbol_exist (const std::string& name, c
 
   size_t pos = name.find ('.');
 
   if (pos != std::string::npos && pos > 0)
     {
       struct_elts = name.substr (pos+1);
       symbol_name = name.substr (0, pos);
     }
+  else if (is_keyword (symbol_name))
+    return retval;
 
   // We shouldn't need to look in the global symbol table, since any
   // name that is visible in the current scope will be in the local
   // symbol table.
 
   octave_value val = safe_symbol_lookup (symbol_name);
 
   if (val.is_defined ())
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -2718,21 +2718,17 @@ octave_base_lexer::handle_identifier (vo
           looking_for_object_index = false;
         }
 
       // The call to is_keyword_token set at_beginning_of_statement.
 
       return kw_token;
     }
 
-  // Find the token in the symbol table.  Beware the magic
-  // transformation of the end keyword...
-
-  if (tok == "end")
-    tok = "__end__";
+  // Find the token in the symbol table.
 
   symbol_table::scope_id sid = symtab_context.curr_scope ();
 
   token *tok_val = new token (NAME, &(symbol_table::insert (tok, sid)),
                               input_line_number, current_input_column);
 
   // The following symbols are handled specially so that things like
   //
@@ -2749,17 +2745,19 @@ octave_base_lexer::handle_identifier (vo
              || tok == "Inf" || tok == "inf"
              || tok == "NaN" || tok == "nan")))
     tok_val->mark_may_be_command ();
 
   push_token (tok_val);
 
   current_input_column += flex_yyleng ();
 
-  if (tok != "__end__")
+  // The magic end index can't be indexed.
+
+  if (tok != "end")
     looking_for_object_index = true;
 
   at_beginning_of_statement = false;
 
   return NAME;
 }
 
 void
diff --git a/libinterp/parse-tree/pt-arg-list.cc b/libinterp/parse-tree/pt-arg-list.cc
--- a/libinterp/parse-tree/pt-arg-list.cc
+++ b/libinterp/parse-tree/pt-arg-list.cc
@@ -121,17 +121,17 @@ tree_argument_list::is_valid_lvalue_list
 
   return retval;
 }
 
 static const octave_value *indexed_object = 0;
 static int index_position = 0;
 static int num_indices = 0;
 
-DEFCONSTFUN (__end__, , ,
+DEFCONSTFUN (end, , ,
   "internal function")
 {
   octave_value retval;
 
   if (indexed_object)
     {
       if (indexed_object->is_object ())
         {
diff --git a/libinterp/parse-tree/pt-id.h b/libinterp/parse-tree/pt-id.h
--- a/libinterp/parse-tree/pt-id.h
+++ b/libinterp/parse-tree/pt-id.h
@@ -50,17 +50,17 @@ public:
 
   tree_identifier (const symbol_table::symbol_record& s,
                    int l = -1, int c = -1,
                    symbol_table::scope_id sc = symbol_table::current_scope ())
     : tree_expression (l, c), sym (s, sc) { }
 
   ~tree_identifier (void) { }
 
-  bool has_magic_end (void) const { return (name () == "__end__"); }
+  bool has_magic_end (void) const { return (name () == "end"); }
 
   bool is_identifier (void) const { return true; }
 
   // The name doesn't change with scope, so use sym instead of
   // accessing it through sym so that this function may remain const.
   std::string name (void) const { return sym.name (); }
 
   bool is_defined (void) { return sym->is_defined (); }
diff --git a/libinterp/parse-tree/pt-idx.cc b/libinterp/parse-tree/pt-idx.cc
--- a/libinterp/parse-tree/pt-idx.cc
+++ b/libinterp/parse-tree/pt-idx.cc
@@ -355,17 +355,17 @@ tree_index_expression::rvalue (int nargo
                   // We have an expression like
                   //
                   //   x{end}.a(end)
                   //
                   // and we are looking at the argument list that
                   // contains the second (or third, etc.) "end" token,
                   // so we must evaluate everything up to the point of
                   // that argument list so we can pass the appropriate
-                  // value to the built-in __end__ function.
+                  // value to the built-in end function.
 
                   const octave_value_list tmp_list
                     = tmp.subsref (type.substr (tmpi, i - tmpi), idx, nargout);
 
                   tmp = tmp_list.length () ? tmp_list(0) : octave_value ();
                   tmpi = i;
                   idx.clear ();
 
