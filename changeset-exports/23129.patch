# HG changeset patch
# User Rik <rik@octave.org>
# Date 1485912572 28800
#      Tue Jan 31 17:29:32 2017 -0800
# Node ID 35e3d199527cb29ca412d0b3031e8e01b64fc800
# Parent  982042b59c0a8f365a16f396418f3f5fbd91f33c
Replace feval calls with direct call to C++ function (bug #50116).

* graphics.cc (do_execute_callback): Replace two calls to feval() with
Flasterr().

* input.cc (interactive_input): Add #include for "builtin-defun-decls.h".
Replace feval() call with Fdrawnow().

* ov-java.cc: Add #include for "builtin-defun-decls.h".
* ov-java.cc(subsref): Replace two feval calls to FjavaMethod() and
F__java_get__() respectively.
* ov-java.cc(subsasgn): Replace feval call with F__java_set__().

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -9860,18 +9860,17 @@ gh_manager::do_execute_callback (const g
           try
             {
               octave::eval_string (s, false, status, 0);
             }
           catch (octave::execution_exception&)
             {
               std::cerr << "execution error in graphics callback function"
                         << std::endl;
-              octave::feval ("lasterr",
-                             ovl ("execution error in graphics callback function"));
+              Flasterr (ovl ("execution error in graphics callback function"));
               octave::interpreter::recover_from_exception ();
             }
         }
       else if (cb.is_cell () && cb.length () > 0
                && (cb.rows () == 1 || cb.columns () == 1)
                && (cb.cell_value ()(0).is_function ()
                    || cb.cell_value ()(0).is_function_handle ()))
         {
@@ -9893,18 +9892,17 @@ gh_manager::do_execute_callback (const g
         try
           {
             octave::feval (fcn, args);
           }
         catch (octave::execution_exception&)
           {
             std::cerr << "execution error in graphics callback function"
                       << std::endl;
-            octave::feval ("lasterr",
-                           ovl ("execution error in graphics callback function"));
+            Flasterr (ovl ("execution error in graphics callback function"));
             octave::interpreter::recover_from_exception ();
           }
 
       // Redraw after interacting with a user-interface (ui*) object.
       if (Vdrawnow_requested)
         {
           graphics_object go = get_object (h);
 
diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -35,16 +35,17 @@ along with Octave; see the file COPYING.
 #include <sstream>
 #include <string>
 
 #include "cmd-edit.h"
 #include "file-ops.h"
 #include "quit.h"
 #include "str-vec.h"
 
+#include "builtin-defun-decls.h"
 #include "call-stack.h"
 #include "debug.h"
 #include "defun.h"
 #include "dirfns.h"
 #include "error.h"
 #include "errwarn.h"
 #include "help.h"
 #include "hook-fcn.h"
@@ -199,17 +200,17 @@ interactive_input (const std::string& s,
   Vlast_prompt_time.stamp ();
 
   if (Vdrawnow_requested && octave::application::interactive ())
     {
       bool eval_error = false;
 
       try
         {
-          octave::feval ("drawnow");
+          Fdrawnow ();
         }
       catch (const octave::execution_exception& e)
         {
           eval_error = true;
 
           std::string stack_trace = e.info ();
 
           if (! stack_trace.empty ())
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -37,16 +37,17 @@ along with Octave; see the file COPYING.
 #include <map>
 #include <iostream>
 #include <fstream>
 #include <string>
 
 #include <clocale>
 
 #include "Cell.h"
+#include "builtin-defun-decls.h"
 #include "cmd-edit.h"
 #include "defaults.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "load-path.h"
 #include "oct-env.h"
 #include "oct-shlib.h"
 #include "ov-java.h"
@@ -1975,26 +1976,26 @@ octave_java::subsref (const std::string&
       if (type.length () > 1 && type[1] == '(')
         {
           octave_value_list ovl;
           count++;
           ovl(1) = octave_value (this);
           ovl(0) = (idx.front ())(0);
           std::list<octave_value_list>::const_iterator it = idx.begin ();
           ovl.append (*++it);
-          retval = octave::feval (std::string ("javaMethod"), ovl, 1);
+          retval = FjavaMethod (ovl, 1);
           skip++;
         }
       else
         {
           octave_value_list ovl;
           count++;
           ovl(0) = octave_value (this);
           ovl(1) = (idx.front ())(0);
-          retval = octave::feval (std::string ("__java_get__"), ovl, 1);
+          retval = F__java_get__ (ovl, 1);
         }
       break;
 
     case '(':
       if (current_env)
         retval = get_array_elements
           (current_env, TO_JOBJECT (to_java ()), idx.front ());
       break;
@@ -2040,17 +2041,17 @@ octave_java::subsasgn (const std::string
       if (type.length () == 1)
         {
           // field assignment
           octave_value_list ovl;
           count++;
           ovl(0) = octave_value (this);
           ovl(1) = (idx.front ())(0);
           ovl(2) = rhs;
-          octave::feval ("__java_set__", ovl, 0);
+          F__java_set__ (ovl);
 
           count++;
           retval = octave_value (this);
         }
       else if (type.length () > 2 && type[1] == '(')
         {
           std::list<octave_value_list> new_idx;
           std::list<octave_value_list>::const_iterator it = idx.begin ();
