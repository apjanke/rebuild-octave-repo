# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1469288732 -7200
#      Sat Jul 23 17:45:32 2016 +0200
# Node ID 20b225a3ebf8ab650d6de437f41534464aead31b
# Parent  8971508e21c8c5c0d4f138edc06b09e4d0c241e6
Update to light (patch #8943)

* gl-render.h, gl-render.cc (get_maxlights): New static function.
(opengl_renderer::max_lights): New data member.
(opengl_renderer::opengl_renderer): Use get_maxlights to initialize
max_lights data member.
(opengl_renderer::draw_all_lights): New function.  Support local
light sources.
(opengl_renderer::draw_axes_children): Call draw_all_lights instead
of doing the work here.
(opengl_renderer::draw_surface): Remove warning for "phong".

* scripts/plot/draw/light.m: Update docstring. Add and update demos.

* doc/interpreter/genpropdoc.m: Update docstring.

diff --git a/doc/interpreter/genpropdoc.m b/doc/interpreter/genpropdoc.m
--- a/doc/interpreter/genpropdoc.m
+++ b/doc/interpreter/genpropdoc.m
@@ -1300,18 +1300,17 @@ specular reflex) and 1.0 (full specular 
         s.valid = valid_color;
 
       case "position"
         s.doc = "Position of the light source.";
 
       case "style"
         s.doc = "This string defines whether the light emanates from a \
 light source at infinite distance (@qcode{\"infinite\"}) or from a local \
-point source (@qcode{\"local\"}). Only the default value @qcode{\"infinite\"} \
-is supported.";
+point source (@qcode{\"local\"}).";
 
     endswitch
 
   ## uimenu properties
   elseif (strcmp (objname, "uimenu"))
     switch (field)
       ## Overridden shared properties
       case "buttondownfcn"
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -582,16 +582,43 @@ private:
 class
 opengl_renderer::patch_tesselator
 {
   // Dummy class.
 };
 
 #endif
 
+static int
+get_maxlights (void)
+{
+#if defined (HAVE_OPENGL)
+
+  static int max_lights = 0;
+
+  // Check actual maximum number of lights possible
+  if (max_lights == 0)
+    {
+      for (max_lights = 0; max_lights < GL_MAX_LIGHTS; max_lights++)
+        {
+          glDisable (GL_LIGHT0 + max_lights);
+          if (glGetError ())
+            break;
+        }
+    }
+
+  return max_lights;
+#else
+
+  err_disabled_feature ("opengl_renderer", "OpenGL");
+
+#endif
+
+}
+
 opengl_renderer::opengl_renderer (void)
   : toolkit (), xform (), xmin (), xmax (), ymin (), ymax (),
     zmin (), zmax (), xZ1 (), xZ2 (), marker_id (), filled_marker_id (),
     camera_pos (), camera_dir (), interpreter ("none"), txt_renderer ()
 {
   // This constructor will fail if we don't have OpenGL or if the data
   // types we assumed in our public interface aren't compatible with the
   // OpenGL types.
@@ -601,16 +628,19 @@ opengl_renderer::opengl_renderer (void)
   // Ensure that we can't request an image larger than OpenGL can handle.
   // FIXME: should we check signed vs. unsigned?
 
   static bool ok = (sizeof (int) <= sizeof (GLsizei));
 
   if (! ok)
     error ("the size of GLsizei is smaller than the size of int");
 
+  // Check actual maximum number of lights possible
+  max_lights = get_maxlights ();
+
 #else
 
   err_disabled_feature ("opengl_renderer", "OpenGL");
 
 #endif
 }
 
 void
@@ -1613,56 +1643,66 @@ opengl_renderer::draw_axes_z_grid (const
 
       gh_manager::get_object (props.get_zlabel ()).set ("visible", "on");
     }
   else
     gh_manager::get_object (props.get_zlabel ()).set ("visible", "off");
 }
 
 void
+opengl_renderer::draw_all_lights (const base_properties& props, std::list<graphics_object>& obj_list)
+{
+  Matrix children = props.get_all_children ();
+
+  for (octave_idx_type i = children.numel () - 1; i >= 0; i--)
+    {
+      graphics_object go = gh_manager::get_object (children(i));
+
+      if (go.get_properties ().is_visible ())
+        {
+          if (go.isa ("light"))
+            {
+              if (num_lights < max_lights)
+                {
+                  current_light = GL_LIGHT0 + num_lights;
+                  set_clipping (go.get_properties ().is_clipping ());
+                  draw (go);
+                  num_lights++;
+                }
+              else
+                warning_with_id ("Octave:max-lights-exceeded",
+                  "light: Maximum number of lights (%d) in these axes is "
+                  "exceeded.", max_lights);
+            }
+          else if (go.isa ("hggroup"))
+            draw_all_lights (go.get_properties (), obj_list);
+          else
+            obj_list.push_back (go);
+        }
+    }
+}
+
+void
 opengl_renderer::draw_axes_children (const axes::properties& props)
 {
 #if defined (HAVE_OPENGL)
-
-  // Children
-
-  Matrix children = props.get_all_children ();
+  // list for non-light child objects
   std::list<graphics_object> obj_list;
   std::list<graphics_object>::iterator it;
 
   // 1st pass: draw light objects
 
   // Start with the last element of the array of child objects to
   // display them in the order they were added to the array.
 
   num_lights = 0;
-
-  for (octave_idx_type i = children.numel () - 1; i >= 0; i--)
-    {
-      graphics_object go = gh_manager::get_object (children(i));
-
-      if (go.get_properties ().is_visible ())
-        {
-          if (go.isa ("light"))
-            {
-              if (num_lights < GL_MAX_LIGHTS)
-                {
-                  current_light = GL_LIGHT0 + num_lights;
-                  set_clipping (go.get_properties ().is_clipping ());
-                  draw (go);
-                  num_lights++;
-                }
-            }
-          else
-            obj_list.push_back (go);
-        }
-    }
+  draw_all_lights (props, obj_list);
 
   // disable other OpenGL lights
-  for (int i = num_lights; i < GL_MAX_LIGHTS; i++)
+  for (int i = num_lights; i < max_lights; i++)
     glDisable (GL_LIGHT0 + i);
 
   // save camera position and set ambient light color before drawing
   // other objects
   view_vector = props.get_cameraposition ().matrix_value ();
 
   float cb[4] = { 1.0, 1.0, 1.0, 1.0 };
   ColumnVector ambient_color = props.get_ambientlightcolor_rgb ();
@@ -1938,19 +1978,16 @@ opengl_renderer::draw_surface (const sur
   int zc = z.columns ();
 
   NDArray c;
   const NDArray n = props.get_vertexnormals ().array_value ();
 
   // FIXME: handle transparency
   Matrix a;
 
-  if (props.facelighting_is ("phong") || props.edgelighting_is ("phong"))
-    warning ("opengl_renderer: phong light model not supported");
-
   int fc_mode = (props.facecolor_is_rgb () ? 0 :
                  (props.facecolor_is ("flat") ? 1 :
                   (props.facecolor_is ("interp") ? 2 :
                    (props.facecolor_is ("texturemap") ? 3 : -1))));
   int fl_mode = (props.facelighting_is ("none") ? 0 :
                  (props.facelighting_is ("flat") ? 1 : 2));
   int fa_mode = (props.facealpha_is_double () ? 0 :
                  (props.facealpha_is ("flat") ? 1 : 2));
@@ -2291,17 +2328,17 @@ opengl_renderer::draw_surface (const sur
 
                       // Vertex 1
                       if (ec_mode > 0)
                         {
                           for (int k = 0; k < 3; k++)
                             cb[k] = c(j-1, i, k);
                           glColor3fv (cb);
 
-                          if (fl_mode > 0)
+                          if (el_mode > 0)
                             {
                               for (int k = 0; k < 3; k++)
                                 cb[k] *= as;
                               glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
                               for (int k = 0; k < 3; k++)
                                 cb[k] = ds * c(j-1, i, k);
                               glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
@@ -2318,17 +2355,17 @@ opengl_renderer::draw_surface (const sur
 
                       // Vertex 2
                       if (ec_mode == INTERP)
                         {
                           for (int k = 0; k < 3; k++)
                             cb[k] = c(j, i, k);
                           glColor3fv (cb);
 
-                          if (fl_mode > 0)
+                          if (el_mode > 0)
                             {
                               for (int k = 0; k < 3; k++)
                                 cb[k] *= as;
                               glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
                               for (int k = 0; k < 3; k++)
                                 cb[k] = ds * c(j, i, k);
                               glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
@@ -2388,17 +2425,17 @@ opengl_renderer::draw_surface (const sur
 
                       // Vertex 1
                       if (ec_mode > 0)
                         {
                           for (int k = 0; k < 3; k++)
                             cb[k] = c(j, i-1, k);
                           glColor3fv (cb);
 
-                          if (fl_mode > 0)
+                          if (el_mode > 0)
                             {
                               for (int k = 0; k < 3; k++)
                                 cb[k] *= as;
                               glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
                               for (int k = 0; k < 3; k++)
                                 cb[k] = ds * c(j, i-1, k);
                               glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
@@ -2415,17 +2452,17 @@ opengl_renderer::draw_surface (const sur
 
                       // Vertex 2
                       if (ec_mode == INTERP)
                         {
                           for (int k = 0; k < 3; k++)
                             cb[k] = c(j, i, k);
                           glColor3fv (cb);
 
-                          if (fl_mode > 0)
+                          if (el_mode > 0)
                             {
                               for (int k = 0; k < 3; k++)
                                 cb[k] *= as;
                               glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
                               for (int k = 0; k < 3; k++)
                                 cb[k] = ds * c(j, i, k);
                               glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
@@ -3010,20 +3047,22 @@ void
 opengl_renderer::draw_light (const light::properties &props)
 {
 #if defined (HAVE_OPENGL)
 
   // enable light source
   glEnable (current_light);
 
   // light position
-  float pos[4] = { 0, 0, 0, 0 }; // X,Y,Z,attenuation
+  float pos[4] = { 0, 0, 0, 0 }; // X,Y,Z,infinite/local
   Matrix lpos = props.get_position ().matrix_value ();
   for (int i = 0; i < 3; i++)
     pos[i] = lpos(i);
+  if (props.style_is ("local"))
+    pos[3] = 1;
   glLightfv (current_light, GL_POSITION, pos);
 
   // light color
   float col[4] = { 1, 1, 1, 1 }; // R,G,B,ALPHA (the latter has no meaning)
   Matrix lcolor = props.get_color ().matrix_value ();
   for (int i = 0; i < 3; i++)
     col[i] = lcolor(i);
   glLightfv (current_light, GL_DIFFUSE,  col);
diff --git a/libinterp/corefcn/gl-render.h b/libinterp/corefcn/gl-render.h
--- a/libinterp/corefcn/gl-render.h
+++ b/libinterp/corefcn/gl-render.h
@@ -164,16 +164,18 @@ private:
   void draw_axes_boxes (const axes::properties& props);
 
   void draw_axes_x_grid (const axes::properties& props);
   void draw_axes_y_grid (const axes::properties& props);
   void draw_axes_z_grid (const axes::properties& props);
 
   void draw_axes_children (const axes::properties& props);
 
+  void draw_all_lights (const base_properties& props, std::list<graphics_object>& obj_list);
+
 private:
   // The graphics toolkit associated with the figure being rendered.
   graphics_toolkit toolkit;
 
   // axes transformation data
   graphics_xform xform;
 
   // axis limits in model scaled coordinate
@@ -193,14 +195,15 @@ private:
   // interpreter to be used by text_to_pixels
   caseless_str interpreter;
 
   text_renderer txt_renderer;
 
   // light object present and visible
   int num_lights;
   unsigned int current_light;
+  int max_lights;
 
 private:
   class patch_tesselator;
 };
 
 #endif
diff --git a/scripts/plot/draw/light.m b/scripts/plot/draw/light.m
--- a/scripts/plot/draw/light.m
+++ b/scripts/plot/draw/light.m
@@ -46,18 +46,17 @@
 ## RGB-vector (e.g. @qcode{[1 0 0]} for red) or as a string (e.g. @qcode{"r"}
 ## for red).  The default color is white (@qcode{[1 1 1]}).
 ##
 ## @item @qcode{"Position":} The direction from which the light emanates as an
 ## 1x3-vector.  The default direction is @qcode{[1 0 1]}.
 ##
 ## @item @qcode{"Style":} This string defines whether the light emanates from a
 ## light source at infinite distance (@qcode{"infinite"}) or from a local point
-## source (@qcode{"local"}).  Only the default value @qcode{"infinite"} is
-## supported.
+## source (@qcode{"local"}).
 ## @end table
 ##
 ## If @command{light} is called with an axes handle @var{hax}, it must be passed
 ## as the first argument.
 ##
 ## Optionally, the handle to the light object is returned in @var{h}.
 ##
 ## @seealso{get, set, patch, surface, lighting}
@@ -172,17 +171,17 @@ endfunction
 %! h_light1 = light ("Color", "r");
 %! h_light2 = light ("Position", [0 1 1], "Color", "b");
 %! h_light3 = light ("Position", [-1 -1 2], "Color", "g");
 
 %!demo
 %! %% Diffuse and specular reflex
 %! clf;
 %! h_axes = axes ();
-%! [x,y,z] = meshgrid (-.2:0.02:.2, -.2:0.02:.2, -.2:0.02:.2);
+%! [x,y,z] = meshgrid (-.2:0.04:.2, -.2:0.04:.2, -.2:0.04:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! fv = isosurface (x, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
 %! set (h_patch, "DiffuseStrength", 0, "SpecularStrength", 0);
 %! isonormals (x, y, z, val, h_patch);
 %! fv = isosurface (x+.5, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
@@ -292,17 +291,17 @@ endfunction
 %! axis tight
 %! axis equal
 %! view (2);
 %! ylabel ("AmbientLightColor [1 1 1]");
 
 %!demo
 %! %% Specular Exponent
 %! clf;
-%! [x,y,z] = meshgrid (-.2:0.01:.2, -.2:0.01:.2, -.2:0.01:.2);
+%! [x,y,z] = meshgrid (-.2:0.02:.2, -.2:0.02:.2, -.2:0.02:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! h_axes = axes ();
 %! fv = isosurface (x, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
 %! set (h_patch, "SpecularExponent", 15);
 %! isonormals (x, y, z, val, h_patch);
 %! fv = isosurface (x+.5, y, z, val, .039);
@@ -375,30 +374,91 @@ endfunction
 %! h_light = light ();
 %! view (h_axes3, [-50 30]);
 %! title ("unlit");
 %! axis equal
 
 %!demo
 %! %% Colored patch
 %! clf;
-%! [x,y,z] = meshgrid (-.2:0.01:.2, -.2:0.01:.2, -.2:0.01:.2);
+%! [x,y,z] = meshgrid (-.2:0.02:.2, -.2:0.02:.2, -.2:0.02:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! h_axes = axes ();
 %! fv = isosurface (x, y, z, val, .039, z);
 %! h_patch = patch (fv, "FaceColor", "flat", "EdgeColor", "none", ...
 %!             "FaceLighting", "Gouraud");
 %! set (h_patch, "SpecularExponent", 15);
 %! isonormals (x, y, z, val, h_patch);
+%! title ('Colored patch');
 %! h_light = light ("Position", [-1 1 1]);
 %! axis tight
 %! axis equal
 %! view (3);
 
+%!demo
+%! %% Colored mesh (patch)
+%! clf;
+%! [x,y,z] = meshgrid (-.2:0.05:.2, -.2:0.05:.2, -.2:0.05:.2);
+%! val = (x.^2 + y.^2 + z.^2);
+%!
+%! h_axes = axes ();
+%! fv = isosurface (x, y, z, val, .039, z);
+%! h_patch = patch (fv, 'FaceColor', 'w', 'EdgeColor', 'interp');
+%! isonormals (x, y, z, val, h_patch);
+%! title ('Colored mesh (patch)');
+%! h_light = light;
+%! lighting gouraud
+%! axis tight
+%! axis equal
+%! view (3);
+
+%!demo
+%! %% Colored mesh (surface)
+%! clf;
+%! h_mesh = mesh (peaks);
+%! title ('Colored mesh (surface)');
+%! h_light = light;
+%! lighting gouraud
+
+%!demo
+%! %% Light in hggroup
+%! clf;
+%! h_mesh = mesh (peaks);
+%! h_hg = hggroup ();
+%! title ('Light in hggroup');
+%! h_light = light ('Parent', h_hg);
+%! lighting gouraud
+
+%!demo
+%! %% Style local/infinite
+%! clf;
+%! [x,y,z] = meshgrid (-.2:0.02:.2, -.2:0.02:.2, -.2:0.02:.2);
+%! val = (x.^2 + y.^2 + z.^2);
+%!
+%! h_axes1 = subplot (1,2,1);
+%! fv = isosurface (x, y, z, val, .039);
+%! h_patch = patch (fv, 'FaceColor', 'r', 'EdgeColor', 'none');
+%! isonormals (x, y, z, val, h_patch);
+%! title ('"Style" set to "infinite" (default)');
+%! h_light = light ('Position', [.3 0 .3]);
+%! lighting gouraud
+%! axis equal
+%! view (3);
+%!
+%! h_axes2 = subplot (1,2,2);
+%! fv = isosurface (x, y, z, val, .039);
+%! h_patch = patch (fv, 'FaceColor', 'r', 'EdgeColor', 'none');
+%! isonormals (x, y, z, val, h_patch);
+%! title ('"Style" set to "local"');
+%! h_light = light ('Style', 'local', 'Position', [.3 0 .3]);
+%! lighting gouraud
+%! axis equal
+%! view (3);
+
 
 %!test
 %! hf = figure ("Visible", "off");
 %! unwind_protect
 %!   h = light ();
 %!   assert (findobj (hf, "Type", "light"), h);
 %!   assert (get (h, "Position"), [1, 0, 1]);
 %!   assert (get (h, "Color"), [1, 1, 1]);
