# HG changeset patch
# User Rik <rik@octave.org>
# Date 1467845101 25200
#      Wed Jul 06 15:45:01 2016 -0700
# Node ID 3cbfbb920de3491395149a2d50eb6420012db82a
# Parent  6db928d06b07b6609ac18c605d3bfe87de2fa402
__gnuplot_draw_axes__.m: Use strcmp instead of strcmpi.

* __gnuplot_draw_axes__.m: Use strcmp instead of strcmpi.

diff --git a/scripts/plot/util/private/__gnuplot_draw_axes__.m b/scripts/plot/util/private/__gnuplot_draw_axes__.m
--- a/scripts/plot/util/private/__gnuplot_draw_axes__.m
+++ b/scripts/plot/util/private/__gnuplot_draw_axes__.m
@@ -65,17 +65,17 @@ function __gnuplot_draw_axes__ (h, plot_
       && (nd == 2 || all (mod (axis_obj.view, 90) == 0)))
     ## FIXME: adjust plotboxaspectratio to respect other
     fpos = get (axis_obj.parent, "position");
     apos = axis_obj.position;
   endif
 
   pos = __actual_axis_position__ (h);
 
-  if (strcmpi (axis_obj.dataaspectratiomode, "manual"))
+  if (strcmp (axis_obj.dataaspectratiomode, "manual"))
     dr = axis_obj.dataaspectratio;
     if (nd == 2 || all (mod (axis_obj.view, 90) == 0))
       dr = dr(1) / dr(2);
     else
       ## FIXME: need to properly implement 3D
       dr = mean (dr(1:2)) / dr(3);
     endif
   else
@@ -108,44 +108,44 @@ function __gnuplot_draw_axes__ (h, plot_
       if (nd == 3 && all (axis_obj.view == [0, 90]))
         ## FIXME: Kludge to allow colorbar to be added to a pcolor() plot
         pos(3:4) = pos(3:4) * 1.4;
         pos(1:2) = pos(1:2) - pos(3:4) * 0.125;
       endif
 
       fprintf (plot_stream, "set origin %.15g, %.15g;\n", pos(1), pos(2));
 
-      if (strcmpi (axis_obj.dataaspectratiomode, "manual"))
+      if (strcmp (axis_obj.dataaspectratiomode, "manual"))
         sz_str = sprintf ("set size ratio %.15g", -dr);
       else
         sz_str = "set size noratio";
       endif
       sz_str = sprintf ("%s %.15g, %.15g;\n", sz_str, pos(3), pos(4));
     endif
   else ## activepositionproperty == outerposition
     fprintf (plot_stream, "unset tmargin;\n");
     fprintf (plot_stream, "unset bmargin;\n");
     fprintf (plot_stream, "unset lmargin;\n");
     fprintf (plot_stream, "unset rmargin;\n");
     fprintf (plot_stream, "set origin %g, %g;\n", pos(1:2));
-    if (strcmpi (axis_obj.dataaspectratiomode, "manual"))
+    if (strcmp (axis_obj.dataaspectratiomode, "manual"))
       sz_str = sprintf ("ratio %g", -dr);
     else
       sz_str = "noratio";
     endif
     sz_str = sprintf ("set size %s %g, %g;\n", sz_str, pos(3:4));
   endif
   if (! isempty (sz_str))
     fputs (plot_stream, sz_str);
   endif
 
   ## Code above uses axis size for the data aspect ratio, which isn't
   ## quite correct.  The only fine control is to set all axes units equal.
   if (nd == 3 &&
-      strcmpi (axis_obj.dataaspectratiomode, "manual") &&
+      strcmp (axis_obj.dataaspectratiomode, "manual") &&
       axis_obj.dataaspectratio(1) == axis_obj.dataaspectratio(2))
     if (axis_obj.dataaspectratio(1) == axis_obj.dataaspectratio(3))
       zstr = "z";
     else
       zstr = "";
     endif
     fprintf (plot_stream, "set view equal xy%s;\n", zstr);
   endif
@@ -195,27 +195,27 @@ function __gnuplot_draw_axes__ (h, plot_
     angle = t.rotation;
     colorspec = get_text_colorspec (t.color);
     if (isempty (t.string))
       fprintf (plot_stream, "unset xlabel;\n");
       fprintf (plot_stream, "unset x2label;\n");
     else
       [tt, f, s] = __maybe_munge_text__ (enhanced, t, "string");
       fontspec = create_fontspec (f, s, gnuplot_term);
-      if (strcmpi (axis_obj.xaxislocation, "top"))
+      if (strcmp (axis_obj.xaxislocation, "top"))
         fprintf (plot_stream, "set x2label \"%s\" %s %s %s",
                  undo_string_escapes (tt), colorspec, fontspec,
                  __do_enhanced_option__ (enhanced, t));
       else
         fprintf (plot_stream, "set xlabel \"%s\" %s %s %s",
                  undo_string_escapes (tt), colorspec, fontspec,
                  __do_enhanced_option__ (enhanced, t));
       endif
       fprintf (plot_stream, " rotate by %f;\n", angle);
-      if (strcmpi (axis_obj.xaxislocation, "top"))
+      if (strcmp (axis_obj.xaxislocation, "top"))
         fprintf (plot_stream, "unset xlabel;\n");
       else
         fprintf (plot_stream, "unset x2label;\n");
       endif
     endif
   endif
 
   if (! isempty (axis_obj.ylabel))
@@ -223,27 +223,27 @@ function __gnuplot_draw_axes__ (h, plot_
     angle = t.rotation;
     colorspec = get_text_colorspec (t.color);
     if (isempty (t.string))
       fprintf (plot_stream, "unset ylabel;\n");
       fprintf (plot_stream, "unset y2label;\n");
     else
       [tt, f, s] = __maybe_munge_text__ (enhanced, t, "string");
       fontspec = create_fontspec (f, s, gnuplot_term);
-      if (strcmpi (axis_obj.yaxislocation, "right"))
+      if (strcmp (axis_obj.yaxislocation, "right"))
         fprintf (plot_stream, "set y2label \"%s\" %s %s %s",
                  undo_string_escapes (tt), colorspec, fontspec,
                  __do_enhanced_option__ (enhanced, t));
       else
         fprintf (plot_stream, "set ylabel \"%s\" %s %s %s",
                  undo_string_escapes (tt), colorspec, fontspec,
                  __do_enhanced_option__ (enhanced, t));
       endif
       fprintf (plot_stream, " rotate by %f;\n", angle);
-      if (strcmpi (axis_obj.yaxislocation, "right"))
+      if (strcmp (axis_obj.yaxislocation, "right"))
         fprintf (plot_stream, "unset ylabel;\n");
       else
         fprintf (plot_stream, "unset y2label;\n");
       endif
     endif
   endif
 
   if (! isempty (axis_obj.zlabel))
@@ -257,33 +257,33 @@ function __gnuplot_draw_axes__ (h, plot_
       fontspec = create_fontspec (f, s, gnuplot_term);
       fprintf (plot_stream, "set zlabel \"%s\" %s %s %s",
                undo_string_escapes (tt), colorspec, fontspec,
                __do_enhanced_option__ (enhanced, t));
       fprintf (plot_stream, " rotate by %f;\n", angle);
     endif
   endif
 
-  if (strcmpi (axis_obj.xaxislocation, "top"))
+  if (strcmp (axis_obj.xaxislocation, "top"))
     xaxisloc = "x2";
     xaxisloc_using = "x2";
   else
     xaxisloc = "x";
     xaxisloc_using = "x1";
-    if (strcmpi (axis_obj.xaxislocation, "zero"))
+    if (strcmp (axis_obj.xaxislocation, "zero"))
       fputs (plot_stream, "set xzeroaxis;\n");
     endif
   endif
-  if (strcmpi (axis_obj.yaxislocation, "right"))
+  if (strcmp (axis_obj.yaxislocation, "right"))
     yaxisloc = "y2";
     yaxisloc_using = "y2";
   else
     yaxisloc = "y";
     yaxisloc_using = "y1";
-    if (strcmpi (axis_obj.yaxislocation, "zero"))
+    if (strcmp (axis_obj.yaxislocation, "zero"))
       fputs (plot_stream, "set yzeroaxis;\n");
     endif
   endif
 
   have_major_grid = false;
   have_minor_grid = false;
   visible_gls = ! strcmp (axis_obj.gridlinestyle, "none") ...
                 && ! strcmp (axis_obj.gridcolor, "none");
@@ -347,30 +347,30 @@ function __gnuplot_draw_axes__ (h, plot_
     fprintf (plot_stream, "set mztics %d;\n", m);
     fputs (plot_stream, "set grid mztics;\n");
   else
     fputs (plot_stream, "set grid nomztics;\n");
   endif
 
   ## The grid front/back/layerdefault option also controls the
   ## appearance of tics, so it is used even if the grid is absent.
-  if (strcmpi (axis_obj.layer, "top"))
+  if (strcmp (axis_obj.layer, "top"))
     fputs (plot_stream, "set grid front;\n");
     fputs (plot_stream, "set border front;\n");
   else
     fputs (plot_stream, "set grid layerdefault;\n");
     ## FIXME: The gnuplot help says that "layerdefault" should work
     ##        for set border too, but it fails for me with gnuplot 4.2.5.
     ##        So, use "back" instead.
     fputs (plot_stream, "set border back;\n");
   endif
 
-  xlogscale = strcmpi (axis_obj.xscale, "log");
-  ylogscale = strcmpi (axis_obj.yscale, "log");
-  zlogscale = strcmpi (axis_obj.zscale, "log");
+  xlogscale = strcmp (axis_obj.xscale, "log");
+  ylogscale = strcmp (axis_obj.yscale, "log");
+  zlogscale = strcmp (axis_obj.zscale, "log");
 
   ## Detect logscale and negative lims
   if (xlogscale && all (axis_obj.xlim < 0))
     axis_obj.xsgn = -1;
     if (strcmp (axis_obj.xdir, "reverse"))
       axis_obj.xdir = "normal";
     elseif (strcmp (axis_obj.xdir, "normal"))
       axis_obj.xdir = "reverse";
@@ -421,20 +421,20 @@ function __gnuplot_draw_axes__ (h, plot_
   endif
   if (ylogscale)
     fprintf (plot_stream, "set logscale %s;\n", yaxisloc);
   endif
   if (zlogscale)
     fputs (plot_stream, "set logscale z;\n");
   endif
 
-  xautoscale = strcmpi (axis_obj.xlimmode, "auto");
-  yautoscale = strcmpi (axis_obj.ylimmode, "auto");
-  zautoscale = strcmpi (axis_obj.zlimmode, "auto");
-  cautoscale = strcmpi (axis_obj.climmode, "auto");
+  xautoscale = strcmp (axis_obj.xlimmode, "auto");
+  yautoscale = strcmp (axis_obj.ylimmode, "auto");
+  zautoscale = strcmp (axis_obj.zlimmode, "auto");
+  cautoscale = strcmp (axis_obj.climmode, "auto");
   cdatadirect = false;
   truecolor = false;
 
   fputs (plot_stream, "set clip two;\n");
 
   kids = axis_obj.children;
   ## Remove the axis labels and title from the children, and
   ## preserved the original order.
@@ -508,17 +508,17 @@ function __gnuplot_draw_axes__ (h, plot_
     switch (obj.type)
       case "image"
         img_data = obj.cdata;
         img_xdata = obj.xdata;
         img_ydata = obj.ydata;
 
         if (ndims (img_data) == 3)
           truecolor = true;
-        elseif (strcmpi (obj.cdatamapping, "direct"))
+        elseif (strcmp (obj.cdatamapping, "direct"))
           cdatadirect = true;
         endif
         data_idx += 1;
         is_image_data(data_idx) = true;
         parametric(data_idx) = false;
         have_cdata(data_idx) = false;
         have_3d_patch(data_idx) = false;
 
@@ -663,17 +663,17 @@ function __gnuplot_draw_axes__ (h, plot_
         endif
 
      case "patch"
        cmap = parent_figure_obj.colormap;
        [nr, nc] = size (obj.xdata);
 
        if (! isempty (obj.cdata))
          cdat = obj.cdata;
-         if (strcmpi (obj.cdatamapping, "direct"))
+         if (strcmp (obj.cdatamapping, "direct"))
            cdatadirect = true;
          endif
        else
          cdat = [];
        endif
 
        data_3d_idx = NaN;
        for i = 1:nc
@@ -1363,41 +1363,41 @@ function __gnuplot_draw_axes__ (h, plot_
 
   have_data = (! (isempty (data) || all (cellfun ("isempty", data))));
 
   ## Note we don't use the [xy]2range of gnuplot as we don't use the
   ## dual axis plotting features of gnuplot.
   if (isempty (xlim))
     return;
   endif
-  if (strcmpi (axis_obj.xdir, "reverse"))
+  if (strcmp (axis_obj.xdir, "reverse"))
     xlim = flip (xlim);
   endif
 
   fprintf (plot_stream, "set xrange [%.15e:%.15e];\n", xlim);
-  if (strcmpi (axis_obj.xaxislocation, "top"))
+  if (strcmp (axis_obj.xaxislocation, "top"))
     fprintf (plot_stream, "set x2range [%.15e:%.15e];\n", xlim);
   endif
 
   if (isempty (ylim))
     return;
   endif
-  if (strcmpi (axis_obj.ydir, "reverse"))
+  if (strcmp (axis_obj.ydir, "reverse"))
     ylim = flip (ylim);
   endif
   fprintf (plot_stream, "set yrange [%.15e:%.15e];\n", ylim);
-  if (strcmpi (axis_obj.yaxislocation, "right"))
+  if (strcmp (axis_obj.yaxislocation, "right"))
     fprintf (plot_stream, "set y2range [%.15e:%.15e];\n", ylim);
   endif
 
   if (nd == 3)
     if (isempty (zlim))
       return;
     endif
-    if (strcmpi (axis_obj.zdir, "reverse"))
+    if (strcmp (axis_obj.zdir, "reverse"))
       zlim = flip (zlim);
     endif
     fprintf (plot_stream, "set zrange [%.15e:%.15e];\n", zlim);
   endif
 
   cmap = parent_figure_obj.colormap;
   cmap_sz = rows (cmap);
   if (! any (isinf (clim)))
@@ -1414,58 +1414,58 @@ function __gnuplot_draw_axes__ (h, plot_
         fprintf (plot_stream, "set cbrange [%.15e:%.15e];\n", clim);
       endif
     else
       fprintf (plot_stream, "set cbrange [1:%d];\n", cmap_sz +
                rows (addedcmap));
     endif
   endif
 
-  if (strcmpi (axis_obj.visible, "off"))
+  if (strcmp (axis_obj.visible, "off"))
     fputs (plot_stream, "unset border; unset tics\n");
   else
     fputs (plot_stream, "unset border\n");
     axis_idx = data_idx;
-    if (strcmpi (axis_obj.box, "on"))
+    if (strcmp (axis_obj.box, "on"))
       if (nd == 3)
         do_border_tick_3d (axis_obj, plot_stream);
       else
         axis_idx = do_border_2d (axis_obj, plot_stream, axis_idx);
       endif
     else
       if (nd == 3)
         do_border_tick_3d (axis_obj, plot_stream);
       elseif (! isempty (axis_obj.ytick))
-        if (strcmpi (axis_obj.yaxislocation, "right"))
+        if (strcmp (axis_obj.yaxislocation, "right"))
           fprintf (plot_stream, "unset ytics; set y2tics %s nomirror\n",
                    axis_obj.tickdir);
-          if (strcmpi (axis_obj.xaxislocation, "top"))
+          if (strcmp (axis_obj.xaxislocation, "top"))
             maybe_do_x2tick_mirror (plot_stream, axis_obj)
-          elseif (strcmpi (axis_obj.xaxislocation, "bottom"))
+          elseif (strcmp (axis_obj.xaxislocation, "bottom"))
             maybe_do_xtick_mirror (plot_stream, axis_obj)
           else # xaxislocation == zero
             fprintf (plot_stream, "unset x2tics; set xtics %s nomirror\n",
                      axis_obj.tickdir);
           endif
-        elseif (strcmpi (axis_obj.yaxislocation, "left"))
+        elseif (strcmp (axis_obj.yaxislocation, "left"))
           fprintf (plot_stream, "unset y2tics; set ytics %s nomirror\n",
                    axis_obj.tickdir);
-          if (strcmpi (axis_obj.xaxislocation, "top"))
+          if (strcmp (axis_obj.xaxislocation, "top"))
             maybe_do_x2tick_mirror (plot_stream, axis_obj)
-          elseif (strcmpi (axis_obj.xaxislocation, "bottom"))
+          elseif (strcmp (axis_obj.xaxislocation, "bottom"))
             maybe_do_xtick_mirror (plot_stream, axis_obj)
           else # xaxislocation == zero
             maybe_do_xtick_mirror (plot_stream, axis_obj)
           endif
         else # yaxislocation == zero
           fprintf (plot_stream, "unset y2tics; set ytics %s nomirror\n",
                    axis_obj.tickdir);
-          if (strcmpi (axis_obj.xaxislocation, "top"))
+          if (strcmp (axis_obj.xaxislocation, "top"))
             maybe_do_x2tick_mirror (plot_stream, axis_obj)
-          elseif (strcmpi (axis_obj.xaxislocation, "bottom"))
+          elseif (strcmp (axis_obj.xaxislocation, "bottom"))
             maybe_do_xtick_mirror (plot_stream, axis_obj)
           else # xaxislocation == zero
             maybe_do_xtick_mirror (plot_stream, axis_obj)
             fprintf (plot_stream, "unset y2tics; set ytics %s nomirror\n",
                      axis_obj.tickdir);
             fputs (plot_stream, "unset border;\n");
           endif
         endif
@@ -1508,28 +1508,28 @@ function __gnuplot_draw_axes__ (h, plot_
     else
       scmd = "linestyle";
     endif
     fprintf (plot_stream, "set grid %s %d, %s %d;\n",
              scmd, sidx_major, scmd, sidx_minor);
   endif
 
   if (! isempty (hlgnd) && ! isempty (hlgnd.children)
-      && any (strcmpi (get (hlgnd.children, "visible"), "on")))
-    if (strcmpi (hlgnd.box, "on"))
+      && any (strcmp (get (hlgnd.children, "visible"), "on")))
+    if (strcmp (hlgnd.box, "on"))
       box = "box";
     else
       box = "nobox";
     endif
-    if (strcmpi (hlgnd.orientation, "vertical"))
+    if (strcmp (hlgnd.orientation, "vertical"))
       horzvert = "vertical";
     else
       horzvert = "horizontal";
     endif
-    if (strcmpi (hlgnd.textposition, "right"))
+    if (strcmp (hlgnd.textposition, "right"))
       reverse = "reverse Left";
     else
       reverse = "noreverse Right";
     endif
     inout = "inside";
     keypos = hlgnd.location;
     if (ischar (keypos))
       keypos = lower (keypos);
@@ -2153,26 +2153,26 @@ function do_tics (obj, plot_stream, ymir
   endif
 
   [fontname, fontsize] = get_fontname_and_size (obj);
   fontspec = create_fontspec (fontname, fontsize, gnuplot_term);
 
   ## A Gnuplot tic scale of 69 is equivalent to Octave's 0.5.
   ticklength = sprintf ("scale %4.1f", (69/0.5)*obj.ticklength(1));
 
-  if (strcmpi (obj.xaxislocation, "top"))
+  if (strcmp (obj.xaxislocation, "top"))
     do_tics_1 (obj.xtickmode, obj.xtick, obj.xminortick, obj.xticklabelmode,
                obj.xticklabel, obj.xcolor, "x2", plot_stream, true,
                "border", obj.tickdir, ticklength, fontname, fontspec,
                obj.ticklabelinterpreter, obj.xscale, obj.xsgn, gnuplot_term);
     do_tics_1 ("manual", [], "off", obj.xticklabelmode, obj.xticklabel,
                obj.xcolor, "x", plot_stream, true, "border",
                "", "", fontname, fontspec, obj.ticklabelinterpreter,
                obj.xscale, obj.xsgn, gnuplot_term);
-  elseif (strcmpi (obj.xaxislocation, "zero"))
+  elseif (strcmp (obj.xaxislocation, "zero"))
     do_tics_1 (obj.xtickmode, obj.xtick, obj.xminortick, obj.xticklabelmode,
                obj.xticklabel, obj.xcolor, "x", plot_stream, true,
                "axis", obj.tickdir, ticklength, fontname, fontspec,
                obj.ticklabelinterpreter, obj.xscale, obj.xsgn, gnuplot_term);
     do_tics_1 ("manual", [], "off", obj.xticklabelmode, obj.xticklabel,
                obj.xcolor, "x2", plot_stream, true, "axis",
                "", "", fontname, fontspec, obj.ticklabelinterpreter,
                obj.xscale, obj.xsgn, gnuplot_term);
@@ -2181,26 +2181,26 @@ function do_tics (obj, plot_stream, ymir
                obj.xticklabel, obj.xcolor, "x", plot_stream, true,
                "border", obj.tickdir, ticklength, fontname, fontspec,
                obj.ticklabelinterpreter, obj.xscale, obj.xsgn, gnuplot_term);
     do_tics_1 ("manual", [], "off", obj.xticklabelmode, obj.xticklabel,
                obj.xcolor, "x2", plot_stream, true, "border",
                "", "", fontname, fontspec, obj.ticklabelinterpreter,
                obj.xscale, obj.xsgn, gnuplot_term);
   endif
-  if (strcmpi (obj.yaxislocation, "right"))
+  if (strcmp (obj.yaxislocation, "right"))
     do_tics_1 (obj.ytickmode, obj.ytick, obj.yminortick, obj.yticklabelmode,
                obj.yticklabel, obj.ycolor, "y2", plot_stream, ymirror,
                "border", obj.tickdir, ticklength, fontname, fontspec,
                obj.ticklabelinterpreter, obj.yscale, obj.ysgn, gnuplot_term);
     do_tics_1 ("manual", [], "off", obj.yticklabelmode, obj.yticklabel,
                obj.ycolor, "y", plot_stream, ymirror, "border",
                "", "", fontname, fontspec, obj.ticklabelinterpreter,
                obj.yscale, obj.ysgn, gnuplot_term);
-  elseif (strcmpi (obj.yaxislocation, "zero"))
+  elseif (strcmp (obj.yaxislocation, "zero"))
     do_tics_1 (obj.ytickmode, obj.ytick, obj.yminortick, obj.yticklabelmode,
                obj.yticklabel, obj.ycolor, "y", plot_stream, ymirror,
                "axis", obj.tickdir, ticklength, fontname, fontspec,
                obj.ticklabelinterpreter, obj.yscale, obj.ysgn, gnuplot_term);
     do_tics_1 ("manual", [], "off", obj.yticklabelmode, obj.yticklabel,
                obj.ycolor, "y2", plot_stream, ymirror, "axis",
                "", "", fontname, fontspec, obj.ticklabelinterpreter,
                obj.yscale, obj.ysgn, gnuplot_term);
@@ -2232,21 +2232,21 @@ function do_tics_1 (ticmode, tics, mtics
     return;
   endif
 
   if (mirror)
     mirror = "mirror";
   else
     mirror = "nomirror";
   endif
-  if (strcmpi (interpreter, "tex"))
+  if (strcmp (interpreter, "tex"))
     for n = 1 : numel (labels)
       labels{n} = __tex2enhanced__ (labels{n}, fontname, false, false);
     endfor
-  elseif (strcmpi (interpreter, "latex"))
+  elseif (strcmp (interpreter, "latex"))
     if (! warned_latex)
       warning ("latex markup not supported for tick marks");
       warned_latex = true;
     endif
   endif
   if (strcmp (scale, "log"))
     num_mtics = 10;
     if (any (strcmp (gnuplot_term, {"cairolatex", "eepic", "epslatex", ...
@@ -2259,30 +2259,30 @@ function do_tics_1 (ticmode, tics, mtics
       fmt = ["-" fmt];
     endif
   else
     fmt = "%g";
     num_mtics = 5;
   endif
   colorspec = get_text_colorspec (color);
   fprintf (plot_stream, "set format %s \"%s\";\n", ax, fmt);
-  if (strcmpi (ticmode, "manual"))
+  if (strcmp (ticmode, "manual"))
     if (isempty (tics))
       fprintf (plot_stream, "unset %stics;\nunset m%stics;\n", ax, ax);
       return
     endif
     fprintf (plot_stream, "set %stics %s %s %s %s (", ax, tickdir,
              ticklength, axispos, mirror);
     fprintf (plot_stream, " %.15g,", tics(1:end-1));
     fprintf (plot_stream, " %.15g) %s;\n", tics(end), fontspec);
   else
     fprintf (plot_stream, "set %stics %s %s %s %s %s %s;\n", ax,
              tickdir, ticklength, axispos, mirror, colorspec, fontspec);
   endif
-  if (strcmpi (labelmode, "manual"))
+  if (strcmp (labelmode, "manual"))
     k = 1;
     ntics = numel (tics);
     nlabels = numel (labels);
     fprintf (plot_stream, "set %stics add %s %s %s %s (", ax,
              tickdir, ticklength, axispos, mirror);
     labels = strrep (labels, "%", "%%");
     for i = 1:ntics
       fprintf (plot_stream, " \"%s\" %.15g", labels{k++}, tics(i));
@@ -2325,30 +2325,30 @@ function [f, s, fnt, it, bld] = get_font
     fnt = "";
   else
     fnt = t.fontname;
   endif
 
   f = fnt;
   it = false;
   bld = false;
-  if (! isempty (t.fontweight) && strcmpi (t.fontweight, "bold"))
+  if (! isempty (t.fontweight) && strcmp (t.fontweight, "bold"))
     if (! isempty (t.fontangle)
-        && (strcmpi (t.fontangle, "italic")
-            || strcmpi (t.fontangle, "oblique")))
+        && (strcmp (t.fontangle, "italic")
+            || strcmp (t.fontangle, "oblique")))
       f = [f "-bolditalic"];
       it = true;
       bld = true;
     else
       f = [f "-bold"];
       bld = true;
     endif
   elseif (! isempty (t.fontangle)
-          && (strcmpi (t.fontangle, "italic")
-              || strcmpi (t.fontangle, "oblique")))
+          && (strcmp (t.fontangle, "italic")
+              || strcmp (t.fontangle, "oblique")))
     f = [f "-italic"];
     it = true;
   endif
 
   if (isempty (t.fontsize))
     s = 10;
   else
     s = t.fontsize;
@@ -2385,25 +2385,25 @@ function [str, f, s] = __maybe_munge_tex
     str = sprintf ("%s\n", str{:})(1:end-1);
   endif
 
   if (enhanced)
     str = regexprep (str, '(?<!\\)@', '\@');
   endif
 
   if (enhanced)
-    if (strcmpi (obj.interpreter, "tex"))
+    if (strcmp (obj.interpreter, "tex"))
       if (iscellstr (str))
         for n = 1:numel (str)
           str{n} = __tex2enhanced__ (str{n}, fnt, it, bld);
         endfor
       else
         str = __tex2enhanced__ (str, fnt, it, bld);
       endif
-    elseif (strcmpi (obj.interpreter, "latex"))
+    elseif (strcmp (obj.interpreter, "latex"))
       if (! warned_latex)
         warning ("latex markup not supported for text objects");
         warned_latex = true;
       endif
     endif
   endif
 
 endfunction
@@ -2446,34 +2446,34 @@ function str = __tex2enhanced__ (str, fn
         endif
       elseif (strncmp (f, "bf", 2))
         bld = true;
         if (it)
           str = [str(1:s(i) - 1) '{/' fnt '-bolditalic ' str(s(i) + 3:end) '}'];
         else
           str = [str(1:s(i) - 1) '{/' fnt '-bold ' str(s(i) + 3:end) '}'];
         endif
-      elseif (strcmpi (f, "color"))
+      elseif (strcmp (f, "color"))
         ## FIXME: Ignore \color but remove trailing {} block as well
         d = strfind (str(e(i) + 1:end),'}');
         if (isempty (d))
           warning ('syntax error in \color argument');
         else
           str = [str(1:s(i) - 1) str(e(i) + d + 1:end)];
         endif
-      elseif (strcmpi (f, "fontname"))
+      elseif (strcmp (f, "fontname"))
         b1 = strfind (str(e(i) + 1:end),'{');
         b2 = strfind (str(e(i) + 1:end),'}');
         if (isempty (b1) || isempty (b2))
           warning ('syntax error in \fontname argument');
         else
           str = [str(1:s(i) - 1), '/', str(e(i)+b1(1) + 1:e(i)+b2(1)-1), ...
                  '{}', str(e(i) + b2(1) + 1:end)];
         endif
-      elseif (strcmpi (f, "fontsize"))
+      elseif (strcmp (f, "fontsize"))
         b1 = strfind (str(e(i) + 1:end),'{');
         b2 = strfind (str(e(i) + 1:end),'}');
         if (isempty (b1) || isempty (b2))
           warning ('syntax error in \fontname argument');
         else
           str = [str(1:s(i) - 1), '/=', str(e(i)+b1(1) + 1:e(i)+b2(1)-1), ...
                  '{}', str(e(i) + b2(1) + 1:end)];
         endif
@@ -2707,17 +2707,17 @@ function sym = __setup_sym_table__ ()
   sym.rceil = '{/Symbol \371}';
   sym.int = '{/Symbol \362}';
 endfunction
 
 function retval = __do_enhanced_option__ (enhanced, obj)
 
   retval = "";
   if (enhanced)
-    if (strcmpi (obj.interpreter, "none"))
+    if (strcmp (obj.interpreter, "none"))
       retval = "noenhanced";
     else
       retval = "enhanced";
     endif
   endif
 
 endfunction
 
@@ -2729,17 +2729,17 @@ function do_text (stream, gpterm, enhanc
   halign = obj.horizontalalignment;
   valign = obj.verticalalignment;
   angle = obj.rotation;
   units = obj.units;
   color = obj.color;
   if (nargin > 5)
     units = "screen";
     lpos = screenpos;
-  elseif (strcmpi (units, "normalized"))
+  elseif (strcmp (units, "normalized"))
     units = "graph";
   elseif (strcmp (get (hax, "yaxislocation"), "right")
           && strcmp (units, "data"))
     units = "second";
   else
     units = "";
   endif
 
