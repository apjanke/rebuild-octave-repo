# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1347630553 14400
#      Fri Sep 14 09:49:13 2012 -0400
# Node ID f9ee3befcd6be0577e9df2bbbc1c49d95481302c
# Parent  5546fe4dd77f05360ff5940e9e6f251482f8cf51
handle event deletion in octave_link class, not in event handler functions

* history-dockwidget.cc (history_dock_widget::event_accepted,
history_dock_widget::event_reject): Don't delete event here.
file-editor-tab.cc (file_editor_tab::event_accepted,
file_editor_tab::event_reject): Likewise.
main-window.cc (main_window::event_accepted,
main_window::event_reject): Likewise.
octave-adapter/octave-link.cc (octave_link::event_accepted,
octave_link::event_reject): Likewise.
workspace-model.cc (workspace_model::event_accepted,
workspace_model::event_reject): Likewise.

diff --git a/libgui/src/history-dockwidget.cc b/libgui/src/history-dockwidget.cc
--- a/libgui/src/history-dockwidget.cc
+++ b/libgui/src/history-dockwidget.cc
@@ -80,23 +80,21 @@ history_dock_widget::event_accepted (oct
 
           _history_list_view->scrollToBottom ();
         }
     }
 
   // Post a new update event in a given time. This prevents flooding the
   // event queue.
   _update_history_model_timer.start ();
-  delete e;
 }
 
 void
 history_dock_widget::event_reject (octave_event *e)
 {
-  delete e;
 }
 
 void
 history_dock_widget::construct ()
 {
   _history_model = new QStringListModel ();
   _sort_filter_proxy_model.setSourceModel (_history_model);
   _history_list_view = new QListView (this);
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -138,28 +138,25 @@ file_editor_tab::event_accepted (octave_
     }
 
   if (octave_remove_all_breakpoints_event *rabe
       = dynamic_cast<octave_remove_all_breakpoints_event*> (e))
     {
       Q_UNUSED (rabe);
       _edit_area->markerDeleteAll (breakpoint);
     }
-
-  delete e;
 }
 
 void
 file_editor_tab::event_reject (octave_event *e)
 {
   if (dynamic_cast<octave_run_file_event*> (e))
     {
       // Running file failed.
     }
-  delete e;
 }
 
 void
 file_editor_tab::closeEvent (QCloseEvent *e)
 {
   if (_file_editor->get_main_window ()->is_closing ())
     {
       // close whole application: save file or not if modified
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -56,23 +56,21 @@ main_window::~main_window ()
 void
 main_window::event_accepted (octave_event *e)
 {
   if (dynamic_cast<octave_clear_history_event*> (e))
     {
       // After clearing the history, we need to reset the model.
       _history_dock_widget->reset_model ();
     }
-  delete e;
 }
 
 void
 main_window::event_reject (octave_event *e)
 {
-  delete e;
 }
 
 void
 main_window::new_file ()
 {
   _file_editor->request_new_file ();
   focus_editor ();
 }
diff --git a/libgui/src/octave-adapter/octave-link.cc b/libgui/src/octave-adapter/octave-link.cc
--- a/libgui/src/octave-adapter/octave-link.cc
+++ b/libgui/src/octave-adapter/octave-link.cc
@@ -115,16 +115,18 @@ octave_link::do_process_events (void)
       octave_event *e = event_queue.front ();
 
       event_queue.pop ();
 
       if (e->perform ())
         e->accept ();
       else
         e->reject ();
+
+      delete e;
     }
 
   event_queue_mutex->unlock ();
 }
 
 void
 octave_link::do_post_event (octave_event *e)
 {
@@ -154,23 +156,21 @@ std::string
 octave_link::do_last_working_directory (void)
 {
   return last_cwd;
 }
 
 void
 octave_link::event_accepted (octave_event *e)
 {
-  delete e;
 }
 
 void
 octave_link::event_reject (octave_event *e)
 {
-  delete e;
 }
 
 bool
 octave_link::instance_ok (void)
 {
   bool retval = true;
 
   if (! instance)
diff --git a/libgui/src/workspace-model.cc b/libgui/src/workspace-model.cc
--- a/libgui/src/workspace-model.cc
+++ b/libgui/src/workspace-model.cc
@@ -113,23 +113,21 @@ workspace_model::event_accepted (octave_
 
       endResetModel();
       emit model_changed();
     }
 
   // Post a new event in a given time.
   // This prevents flooding the event queue when no events are being processed.
   _update_workspace_model_timer.start ();
-  delete e;
 }
 
 void
 workspace_model::event_reject (octave_event *e)
 {
-  delete e;
 }
 
 QModelIndex
 workspace_model::index(int row, int column, const QModelIndex &p) const
 {
   if (!hasIndex(row, column, p))
     return QModelIndex();
 
