# HG changeset patch
# User Rik <rik@octave.org>
# Date 1510802798 28800
#      Wed Nov 15 19:26:38 2017 -0800
# Branch stable
# Node ID bffbc95fa72b7c9ef011ef347002e0610e65ed7e
# Parent  4283c4c2fcb6c1a282a524b86b8f68b9738976a0
Fix segfault in delaunayn when Qhull memory is not properly cleared (bug #52410).

* __delaunayn__.cc (free_qhull_memory): New function with code to clear
temporary Qhull memory.
* __delaunayn__.cc (F__delaunayn__): Use frame.add_fcn to guarantee that
free_qhull_memory() is called whenever function exits.

diff --git a/libinterp/dldfcn/__delaunayn__.cc b/libinterp/dldfcn/__delaunayn__.cc
--- a/libinterp/dldfcn/__delaunayn__.cc
+++ b/libinterp/dldfcn/__delaunayn__.cc
@@ -63,16 +63,29 @@ char qh_version[] = "__delaunayn__.oct 2
 #  endif
 
 static void
 close_fcn (FILE *f)
 {
   std::fclose (f);
 }
 
+static void
+free_qhull_memory ()
+{
+  qh_freeqhull (! qh_ALL);
+
+  int curlong, totlong;
+  qh_memfreeshort (&curlong, &totlong);
+
+  if (curlong || totlong)
+    warning ("__delaunay__: did not free %d bytes of long memory (%d pieces)",
+             totlong, curlong);
+}
+
 static bool
 octave_qhull_dims_ok (octave_idx_type dim, octave_idx_type n, const char *who)
 {
   if (sizeof (octave_idx_type) > sizeof (int))
     {
       int maxval = std::numeric_limits<int>::max ();
 
       if (dim > maxval || n > maxval)
@@ -158,16 +171,19 @@ Undocumented internal function.
 
       if (! outfile)
         error ("__delaunayn__: unable to create temporary file for output");
 
       frame.add_fcn (close_fcn, outfile);
 
       int exitcode = qh_new_qhull (dim, n, pt_array,
                                    ismalloc, flags, outfile, errfile);
+
+      frame.add_fcn (free_qhull_memory);
+
       if (exitcode)
         error ("__delaunayn__: qhull failed");
 
       // triangulate non-simplicial facets
       qh_triangulate ();
 
       facetT *facet;
       vertexT *vertex, **vertexp;
@@ -199,26 +215,16 @@ Undocumented internal function.
                       simpl(i, j++) = 1 + qh_pointid(vertex->point);
                     }
                   i++;
                 }
             }
 
           retval(0) = simpl;
         }
-
-      // Free memory from Qhull
-      qh_freeqhull (! qh_ALL);
-
-      int curlong, totlong;
-      qh_memfreeshort (&curlong, &totlong);
-
-      if (curlong || totlong)
-        warning ("__delaunay__: did not free %d bytes of long memory (%d pieces)",
-                 totlong, curlong);
     }
   else if (n == dim + 1)
     {
       // one should check if nx points span a simplex
       // I will look at this later.
       RowVector vec (n);
       for (octave_idx_type i = 0; i < n; i++)
         vec(i) = i + 1.0;
