# HG changeset patch
# User jwe
# Date 811761357 0
#      Fri Sep 22 09:15:57 1995 +0000
# Node ID 3d314307e65fa2e81f2ebbde844ff85d8a730c84
# Parent  5e92628fc136c81f03ca4dec0abeb55f3f11056a
[project @ 1995-09-22 09:15:57 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -221,16 +221,17 @@ Array<T>::elem (int n) const
 template <class T>
 T
 Array<T>::checkelem (int n) const
 {
   if (n < 0 || n >= rep->length ())
     {
       (*current_liboctave_error_handler) ("range error");
       T foo;
+      static T *bar = &foo;
       return foo;
     }
   return elem (n);
 }
 
 template <class T>
 T
 Array<T>::operator () (int n) const
@@ -471,29 +472,31 @@ Array2<T>::elem (int i, int j) const
 template <class T>
 T
 Array2<T>::checkelem (int i, int j) const
 {
   if (i < 0 || j < 0 || i >= d1 || j >= d2)
     {
       (*current_liboctave_error_handler) ("range error");
       T foo;
+      static T *bar = &foo;
       return foo;
     }
   return Array<T>::elem (d1*j+i);
 }
 
 template <class T>
 T
 Array2<T>::operator () (int i, int j) const
 {
   if (i < 0 || j < 0 || i >= d1 || j >= d2)
     {
       (*current_liboctave_error_handler) ("range error");
       T foo;
+      static T *bar = &foo;
       return foo;
     }
   return Array<T>::elem (d1*j+i);
 }
 
 template <class T>
 void
 Array2<T>::resize (int r, int c)
@@ -691,29 +694,31 @@ Array3<T>::elem (int i, int j, int k) co
 template <class T>
 T
 Array3<T>::checkelem (int i, int j, int k) const
 {
   if (i < 0 || j < 0 || k < 0 || i >= d1 || j >= d2 || k >= d3)
     {
       (*current_liboctave_error_handler) ("range error");
       T foo;
+      static T *bar = &foo;
       return foo;
     }
   return Array2<T>::elem (i, d1*k+j);
 }
 
 template <class T>
 T
 Array3<T>::operator () (int i, int j, int k) const
 {
   if (i < 0 || j < 0 || k < 0 || i >= d1 || j >= d2 || k >= d3)
     {
       (*current_liboctave_error_handler) ("range error");
       T foo;
+      static T *bar = &foo;
       return foo;
     }
   return Array2<T>::elem (i, d2*k+j);
 }
 
 template <class T>
 void
 Array3<T>::resize (int n, int m, int k)
@@ -888,29 +893,31 @@ DiagArray<T>::elem (int r, int c) const
 template <class T>
 T
 DiagArray<T>::checkelem (int r, int c) const
 {
   if (r < 0 || c < 0 || r >= nr || c >= nc)
     {
       (*current_liboctave_error_handler) ("range error");
       T foo;
+      static T *bar = &foo;
       return foo;
     }
   return (r == c) ? Array<T>::elem (r) : T (0);
 }
 
 template <class T>
 T
 DiagArray<T>::operator () (int r, int c) const
 {
   if (r < 0 || c < 0 || r >= nr || c >= nc)
     {
       (*current_liboctave_error_handler) ("range error");
       T foo;
+      static T *bar = &foo;
       return foo;
     }
   return (r == c) ? Array<T>::elem (r) : T (0);
 }
 
 template <class T>
 void
 DiagArray<T>::resize (int r, int c)
