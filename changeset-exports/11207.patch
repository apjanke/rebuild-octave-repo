# HG changeset patch
# User Kai Habel <kai.habel@gmx.de>
# Date 1289247742 -3600
#      Mon Nov 08 21:22:22 2010 +0100
# Node ID 51e6ac3e5afcebde4866d5d664d7760a84ffab2c
# Parent  83d268af65cbc84754e33f52e32eaf828affe5be
Code fixes for uimenu

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2010-11-08  Kai Habel  <kai.habel@gmx.de>
+
+	* fltk-backend.cc (do_find_uimenu_children): Simplify code, Remove 
+	unused code. (update_submenu): Remove unused function.
+	(add_to_menu (uimenu::properties&)): Simplify code. Get properties for valid objects 
+	only. (add_to_menu (figure::properties&)): Dito.
+	(remove_from_menu (T_prop&)): Dito.
+
 2010-11-03  Ben Abbott <bpabbott@mac.com>
 
 	* gl-render.cc: Do not give rendering error for uimenus.
 
 2010-11-03  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/cquad.cc: If we don't have copysign but we do
 	have _copysign, define copysign to be _copysign.
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/fltk_backend.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/fltk_backend.cc
@@ -335,57 +335,38 @@ public:
     {
       octave_idx_type k = 0;
       
       
       Matrix pos = Matrix (uimenu_childs.numel (), 1);
       
       for (octave_idx_type ii = 0; ii < uimenu_childs.numel (); ii++)
       {
-        graphics_handle kid = uimenu_childs (ii);
+        graphics_object kidgo = gh_manager::get_object (uimenu_childs (ii));
         
-        if (gh_manager::is_handle_visible (kid))
-          {  
-            graphics_object kidgo = gh_manager::get_object (kid);
-            if (kidgo.isa ("uimenu"))
-              {
-                uimenu_childs(k) = uimenu_childs(ii);
-                pos(k++) =
-                  dynamic_cast<uimenu::properties&> (kidgo.get_properties ()).get_position ();
-                std::string lbl =
-                  dynamic_cast<uimenu::properties&> (kidgo.get_properties ()).get_fltk_label ();
-              }
+        if (kidgo.valid_object() && kidgo.isa ("uimenu"))
+          {
+            uimenu_childs(k) = uimenu_childs(ii);
+            pos(k++) =
+              dynamic_cast<uimenu::properties&> (kidgo.get_properties ()).get_position ();
           }
       }
       
       uimenu_childs.resize (k, 1);    
       pos.resize (k, 1);
       Matrix retval = Matrix (k, 1);
       // Don't know if this is the best method to sort.
       // Can we avoid the for loop?
       Array<octave_idx_type> sidx = pos.sort_rows_idx (DESCENDING);
       for (octave_idx_type ii = 0; ii < k; ii++)
         retval(ii) = uimenu_childs (sidx(ii));
        
       return retval;
     }
     
-  void update_submenu (uimenu::properties& uimenup)
-    {
-      Matrix uimenu_ch = find_uimenu_children (uimenup);
-
-      if (uimenu_ch.numel () > 0) 
-        {
-          std::string fltk_label = uimenup.get_fltk_label ();
-          int idx = find_index_by_name (fltk_label.c_str ());
-          Fl_Menu_Item* item = const_cast<Fl_Menu_Item*>(&menubar->menu () [idx]);
-          menubar->mode(idx, item->flags|FL_SUBMENU);
-        }
-    }
-
   void delete_entry(uimenu::properties& uimenup)
     {
       std::string fltk_label = uimenup.get_fltk_label ();
       int idx = find_index_by_name (fltk_label.c_str ());
 
       if (idx >= 0)
         menubar->remove (idx);
     }
@@ -486,17 +467,17 @@ public:
             item->hide ();
         }
     }
     
   void add_entry (uimenu::properties& uimenup)
     {
 
       std::string fltk_label = uimenup.get_fltk_label ();
-      
+
       if (!fltk_label.empty ())
         {
           bool item_added = false;
           do
             {  
               const Fl_Menu_Item* item = menubar->find_item(fltk_label.c_str ());
               
               if (item == NULL)
@@ -544,59 +525,62 @@ public:
       
       add_entry (uimenup);
       update_foregroundcolor (uimenup);
       update_callback (uimenup);
       update_accelerator (uimenup);
       update_enable (uimenup);
       update_visible (uimenup);
       update_seperator (uimenup);
-
+      
       for (octave_idx_type ii = 0; ii < len; ii++)
         {
-          graphics_handle kid = kids (len - (ii + 1));
-          graphics_object kgo = gh_manager::get_object (kid);
-          uimenu::properties& kprop = dynamic_cast<uimenu::properties&>(kgo.get_properties ());
+          graphics_object kgo = gh_manager::get_object (kids (len - (ii + 1)));
           if (kgo.valid_object ())
-            add_to_menu (kprop);
+            {
+              uimenu::properties& kprop = dynamic_cast<uimenu::properties&>(kgo.get_properties ());
+              add_to_menu (kprop);
+            }
         }
-      
-      
     }
 
   void add_to_menu (figure::properties& figp)
     {
       Matrix kids = find_uimenu_children (figp);
       int len = kids.length ();
       menubar->clear ();      
       for (octave_idx_type ii = 0; ii < len; ii++)
         {
-          graphics_handle kid = kids (len - (ii + 1));
-          graphics_object kgo = gh_manager::get_object (kid);
-          uimenu::properties& kprop = dynamic_cast<uimenu::properties&>(kgo.get_properties ());
+          graphics_object kgo = gh_manager::get_object (kids (len - (ii + 1)));
+
           if (kgo.valid_object ())
-            add_to_menu (kprop);
+            {
+              uimenu::properties& kprop = dynamic_cast<uimenu::properties&>(kgo.get_properties ());
+              add_to_menu (kprop);
+            }
         }
     }
 
   template <class T_prop>
   void remove_from_menu (T_prop& prop)
     {
       Matrix kids;
       std::string type = prop.get_type ();
       kids = find_uimenu_children (prop);    
       int len = kids.length ();
 
       for (octave_idx_type ii = 0; ii < len; ii++)
         {
-          graphics_handle kid = kids (len - (ii + 1));
-          graphics_object kgo = gh_manager::get_object (kid);
-          uimenu::properties kprop = dynamic_cast<uimenu::properties&>(kgo.get_properties ());
+          graphics_object kgo = gh_manager::get_object (kids (len - (ii + 1)));
+
           if (kgo.valid_object ())
-            remove_from_menu (kprop);
+            {
+              uimenu::properties kprop = dynamic_cast<uimenu::properties&>(kgo.get_properties ());
+              remove_from_menu (kprop);
+            }
         }
 
       if (type.compare("uimenu") == 0)
         delete_entry(dynamic_cast<uimenu::properties&>(prop));
       else if (type.compare("figure") == 0)
         menubar->clear ();
     }
 
