# HG changeset patch
# User jwe
# Date 762727301 0
#      Thu Mar 03 20:41:41 1994 +0000
# Node ID e04b38065c557df3a02d16edd36386cde77542ed
# Parent  1d3dbdfd0d19cc2f222e04f74cf3bb84002d6468
[project @ 1994-03-03 20:41:35 by jwe]

diff --git a/liboctave/DiagMatrix.cc b/liboctave/DiagMatrix.cc
--- a/liboctave/DiagMatrix.cc
+++ b/liboctave/DiagMatrix.cc
@@ -1,12 +1,12 @@
 // DiagMatrix manipulations.                             -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993 John W. Eaton
+Copyright (C) 1992, 1993, 1994 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -528,16 +528,55 @@ operator * (const DiagMatrix& m, const C
   for (i = a_len; i < nr; i++)
     result.elem (i) = 0.0;
 
   return result;
 }
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
+DiagMatrix
+operator * (const DiagMatrix& a, const DiagMatrix& b)
+{
+  int nr_a = a.rows ();
+  int nc_a = a.cols ();
+  int nr_b = b.rows ();
+  int nc_b = b.cols ();
+  if (nc_a != nr_b)
+    {
+      (*current_liboctave_error_handler)
+        ("nonconformant matrix multiplication attempted");
+      return DiagMatrix ();
+    }
+
+  if (nr_a == 0 || nc_a == 0 || nc_b == 0)
+    return DiagMatrix (nr_a, nc_a, 0.0);
+
+  DiagMatrix c (nr_a, nc_b);
+
+  int len = nr_a < nc_b ? nr_a : nc_b;
+
+  for (int i = 0; i < len; i++)
+    {
+      double a_element = a.elem (i, i);
+      double b_element = b.elem (i, i);
+
+      if (a_element == 0.0 || b_element == 0.0)
+        c.elem (i, i) = 0.0;
+      else if (a_element == 1.0)
+        c.elem (i, i) = b_element;
+      else if (b_element == 1.0)
+        c.elem (i, i) = a_element;
+      else
+        c.elem (i, i) = a_element * b_element;
+    }
+
+  return c;
+}
+
 ComplexDiagMatrix
 operator + (const DiagMatrix& m, const ComplexDiagMatrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
   if (nr != a.rows () || nc != a.cols ())
     {
       (*current_liboctave_error_handler)
@@ -566,16 +605,55 @@ operator - (const DiagMatrix& m, const C
   if (nc == 0 || nr == 0)
     return ComplexDiagMatrix (nr, nc);
 
   return ComplexDiagMatrix (subtract (m.data (), a.data (), m.length ()),
 			    nr, nc);
 }
 
 ComplexDiagMatrix
+operator * (const DiagMatrix& a, const ComplexDiagMatrix& b)
+{
+  int nr_a = a.rows ();
+  int nc_a = a.cols ();
+  int nr_b = b.rows ();
+  int nc_b = b.cols ();
+  if (nc_a != nr_b)
+    {
+      (*current_liboctave_error_handler)
+        ("nonconformant matrix multiplication attempted");
+      return ComplexDiagMatrix ();
+    }
+
+  if (nr_a == 0 || nc_a == 0 || nc_b == 0)
+    return ComplexDiagMatrix (nr_a, nc_a, 0.0);
+
+  ComplexDiagMatrix c (nr_a, nc_b);
+
+  int len = nr_a < nc_b ? nr_a : nc_b;
+
+  for (int i = 0; i < len; i++)
+    {
+      double a_element = a.elem (i, i);
+      Complex b_element = b.elem (i, i);
+
+      if (a_element == 0.0 || b_element == 0.0)
+        c.elem (i, i) = 0.0;
+      else if (a_element == 1.0)
+        c.elem (i, i) = b_element;
+      else if (b_element == 1.0)
+        c.elem (i, i) = a_element;
+      else
+        c.elem (i, i) = a_element * b_element;
+    }
+
+  return c;
+}
+
+ComplexDiagMatrix
 product (const DiagMatrix& m, const ComplexDiagMatrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
   if (nr != a.rows () || nc != a.cols ())
     {
       (*current_liboctave_error_handler)
 	("nonconformant matrix product attempted");
@@ -1563,16 +1641,55 @@ operator * (const ComplexDiagMatrix& m, 
     result.elem (i) = 0.0;
 
   return result;
 }
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
 ComplexDiagMatrix
+operator * (const ComplexDiagMatrix& a, const ComplexDiagMatrix& b)
+{
+  int nr_a = a.rows ();
+  int nc_a = a.cols ();
+  int nr_b = b.rows ();
+  int nc_b = b.cols ();
+  if (nc_a != nr_b)
+    {
+      (*current_liboctave_error_handler)
+        ("nonconformant matrix multiplication attempted");
+      return ComplexDiagMatrix ();
+    }
+
+  if (nr_a == 0 || nc_a == 0 || nc_b == 0)
+    return ComplexDiagMatrix (nr_a, nc_a, 0.0);
+
+  ComplexDiagMatrix c (nr_a, nc_b);
+
+  int len = nr_a < nc_b ? nr_a : nc_b;
+
+  for (int i = 0; i < len; i++)
+    {
+      Complex a_element = a.elem (i, i);
+      Complex b_element = b.elem (i, i);
+
+      if (a_element == 0.0 || b_element == 0.0)
+        c.elem (i, i) = 0.0;
+      else if (a_element == 1.0)
+        c.elem (i, i) = b_element;
+      else if (b_element == 1.0)
+        c.elem (i, i) = a_element;
+      else
+        c.elem (i, i) = a_element * b_element;
+    }
+
+  return c;
+}
+
+ComplexDiagMatrix
 operator + (const ComplexDiagMatrix& m, const DiagMatrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
   if (nr != a.rows () || nc != a.cols ())
     {
       (*current_liboctave_error_handler)
 	("nonconformant matrix addition attempted");
@@ -1600,16 +1717,55 @@ operator - (const ComplexDiagMatrix& m, 
   if (nr == 0 || nc == 0)
     return ComplexDiagMatrix (nr, nc);
 
   return ComplexDiagMatrix (subtract (m.data (), a.data (), m.length ()),
 			    nr, nc);
 }
 
 ComplexDiagMatrix
+operator * (const ComplexDiagMatrix& a, const DiagMatrix& b)
+{
+  int nr_a = a.rows ();
+  int nc_a = a.cols ();
+  int nr_b = b.rows ();
+  int nc_b = b.cols ();
+  if (nc_a != nr_b)
+    {
+      (*current_liboctave_error_handler)
+        ("nonconformant matrix multiplication attempted");
+      return ComplexDiagMatrix ();
+    }
+
+  if (nr_a == 0 || nc_a == 0 || nc_b == 0)
+    return ComplexDiagMatrix (nr_a, nc_a, 0.0);
+
+  ComplexDiagMatrix c (nr_a, nc_b);
+
+  int len = nr_a < nc_b ? nr_a : nc_b;
+
+  for (int i = 0; i < len; i++)
+    {
+      Complex a_element = a.elem (i, i);
+      double b_element = b.elem (i, i);
+
+      if (a_element == 0.0 || b_element == 0.0)
+        c.elem (i, i) = 0.0;
+      else if (a_element == 1.0)
+        c.elem (i, i) = b_element;
+      else if (b_element == 1.0)
+        c.elem (i, i) = a_element;
+      else
+        c.elem (i, i) = a_element * b_element;
+    }
+
+  return c;
+}
+
+ComplexDiagMatrix
 product (const ComplexDiagMatrix& m, const DiagMatrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
   if (nr != a.rows () || nc != a.cols ())
     {
       (*current_liboctave_error_handler)
 	("nonconformant matrix product attempted");
diff --git a/liboctave/Matrix.h b/liboctave/Matrix.h
--- a/liboctave/Matrix.h
+++ b/liboctave/Matrix.h
@@ -391,16 +391,17 @@ public:
   void map (d_d_Mapper f);
 
   double min (void) const;
   double max (void) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const ColumnVector& a);
+  friend ostream& operator >> (ostream& is, ColumnVector& a);
 
 #define KLUDGE_VECTORS
 #define TYPE double
 #define KL_VEC_TYPE ColumnVector
 #include "mx-kludge.h"
 #undef KLUDGE_VECTORS
 #undef TYPE
 #undef KL_VEC_TYPE
@@ -503,16 +504,17 @@ public:
   void map (d_d_Mapper f);
 
   double min (void) const;
   double max (void) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const RowVector& a);
+  friend ostream& operator >> (ostream& is, RowVector& a);
 
 #define KLUDGE_VECTORS
 #define TYPE double
 #define KL_VEC_TYPE RowVector
 #include "mx-kludge.h"
 #undef KLUDGE_VECTORS
 #undef TYPE
 #undef KL_VEC_TYPE
@@ -613,20 +615,25 @@ public:
 
   friend ColumnVector operator * (const DiagMatrix& a, const ColumnVector& b);
 
   friend ComplexColumnVector operator * (const DiagMatrix& a,
 					 const ComplexColumnVector& b);
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
+  friend DiagMatrix operator * (const DiagMatrix& a,
+				const DiagMatrix& b);
+
   friend ComplexDiagMatrix operator + (const DiagMatrix& a,
 				       const ComplexDiagMatrix& b);
   friend ComplexDiagMatrix operator - (const DiagMatrix& a,
 				       const ComplexDiagMatrix& b);
+  friend ComplexDiagMatrix operator * (const DiagMatrix& a,
+				       const ComplexDiagMatrix& b);
 
   friend ComplexDiagMatrix product (const DiagMatrix& a,
 				    const ComplexDiagMatrix& b);
 
 // diagonal matrix by matrix -> matrix operations
 
   friend Matrix operator + (const DiagMatrix& a, const Matrix& b);
   friend Matrix operator - (const DiagMatrix& a, const Matrix& b);
@@ -1013,16 +1020,17 @@ public:
   void map (c_c_Mapper f);
 
   Complex min (void) const;
   Complex max (void) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const ComplexColumnVector& a);
+  friend ostream& operator >> (ostream& is, ComplexColumnVector& a);
 
 #define KLUDGE_VECTORS
 #define TYPE Complex
 #define KL_VEC_TYPE ComplexColumnVector
 #include "mx-kludge.h"
 #undef KLUDGE_VECTORS
 #undef TYPE
 #undef KL_VEC_TYPE
@@ -1139,16 +1147,17 @@ public:
   void map (c_c_Mapper f);
 
   Complex min (void) const;
   Complex max (void) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const ComplexRowVector& a);
+  friend ostream& operator >> (ostream& is, ComplexRowVector& a);
 
 #define KLUDGE_VECTORS
 #define TYPE Complex
 #define KL_VEC_TYPE ComplexRowVector
 #include "mx-kludge.h"
 #undef KLUDGE_VECTORS
 #undef TYPE
 #undef KL_VEC_TYPE
@@ -1272,20 +1281,25 @@ public:
   friend ComplexColumnVector operator * (const ComplexDiagMatrix& a,
 					 const ColumnVector& b);
 
   friend ComplexColumnVector operator * (const ComplexDiagMatrix& a,
 					 const ComplexColumnVector& b);
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
+  friend ComplexDiagMatrix operator * (const ComplexDiagMatrix& a,
+				       const ComplexDiagMatrix& b);
+
   friend ComplexDiagMatrix operator + (const ComplexDiagMatrix& a,
 				       const DiagMatrix& b);
   friend ComplexDiagMatrix operator - (const ComplexDiagMatrix& a,
 				       const DiagMatrix& b);
+  friend ComplexDiagMatrix operator * (const ComplexDiagMatrix& a,
+				       const DiagMatrix& b);
 
   friend ComplexDiagMatrix product (const ComplexDiagMatrix& a,
 				    const DiagMatrix& b); 
 
 // diagonal matrix by matrix -> matrix operations
 
   friend ComplexMatrix operator + (const ComplexDiagMatrix& a,
 				   const Matrix& b); 
