# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1271195281 -7200
#      Tue Apr 13 23:48:01 2010 +0200
# Node ID fcafe0e9bd586cd351d9d81be299dc73cc91cff3
# Parent  9cdd6c8c05a46562170951a2437f0d5d03b6b5ec
Handle repeated matches in matches returned by pcre

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-04-13  David Bateman  <dbateman@free.fr>
+
+	* DLD-FUNCTIONS/regexp.cc (octregexp_list): Handle repeated matches
+	in the list of matches returned by pcre.
+
 2010-04-13  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* DLD-FUNCTIONS/fltk_backend.cc (plot_window::set_currentpoint,
 	(plot_window::set_axes_currentpoint, plot_window::key2shift,
 	(plot_window::key2ascii, plot_window::modifier2cell): new helper
 	functions for keypress and mousebutton callbacks.
 	(plot_window::handle): implement keypress and mousebutton callbacks.
 
diff --git a/src/DLD-FUNCTIONS/regexp.cc b/src/DLD-FUNCTIONS/regexp.cc
--- a/src/DLD-FUNCTIONS/regexp.cc
+++ b/src/DLD-FUNCTIONS/regexp.cc
@@ -424,52 +424,62 @@ octregexp_list (const octave_value_list 
               idx = ovector[0] + 1;
               continue;
             }
           else
             {
               int pos_match = 0;
               Matrix te(matches-1,2);
               for (int i = 1; i < matches; i++)
-                {
-                  if (ovector[2*i] >= 0 && ovector[2*i+1] > 0)
+                if (ovector[2*i] >= 0 && ovector[2*i+1] > 0)
+                  if (i == 1 || ovector[2*i] != ovector[2*i-2]
+                      || ovector[2*i-1] != ovector[2*i+1])
                     {
-                      te(pos_match,0) = double (ovector[2*i]+1);
-                      te(pos_match++,1) = double (ovector[2*i+1]);
+                      if (ovector[2*i] >= 0 && ovector[2*i+1] > 0)
+                        {
+                          te(pos_match,0) = double (ovector[2*i]+1);
+                          te(pos_match++,1) = double (ovector[2*i+1]);
+                        }
                     }
-                }
               te.resize(pos_match,2);
               s = double (ovector[0]+1);
               e = double (ovector[1]);
 
               const char **listptr;
               int status = pcre_get_substring_list(buffer.c_str(), ovector, 
                                                    matches, &listptr);
 
               if (status == PCRE_ERROR_NOMEMORY) {
                 error("%s: cannot allocate memory in pcre_get_substring_list",
                       nm.c_str());
                 pcre_free(re);
                 return 0;
               }
 
               Cell cell_t (dim_vector(1,pos_match));
+              string_vector named_tokens(nnames);
+              int pos_offset = 0;
               pos_match = 0;
               for (int i = 1; i < matches; i++)
                 if (ovector[2*i] >= 0 && ovector[2*i+1] > 0)
-                  cell_t(pos_match++) = std::string(*(listptr+i));
+                  if (i == 1 || ovector[2*i] != ovector[2*i-2]
+                      || ovector[2*i-1] != ovector[2*i+1])
+                    {
+                      if (namecount > 0)
+                        named_tokens(named_idx(i-pos_offset-1)) = 
+                          std::string(*(listptr+nidx[i-pos_offset-1]));    
+                      cell_t(pos_match++) = 
+                        std::string(*(listptr+i));
+                    }
+                  else
+                    pos_offset++;
 
               m =  std::string(*listptr);
               t = cell_t;
 
-              string_vector named_tokens(nnames);
-              if (namecount > 0)
-                for (int i = 0; i < pos_match; i++)
-                  named_tokens(named_idx(i)) = std::string(*(listptr+nidx[i]));
-
               pcre_free_substring_list(listptr);
 
               regexp_elem new_elem (named_tokens, t, m, te, s, e);
               lst.push_back (new_elem);
               idx = ovector[1];
               sz++;
 
               if (once)
@@ -1126,16 +1136,20 @@ The pattern is taken literally.\n\
 %! assert (t{2}{1},'Rogers');
 %! assert (t{2}{2},'James');
 %! assert (size(nm), [1,1]);
 %! assert (nm.first{1},'John');
 %! assert (nm.first{2},'James');
 %! assert (nm.last{1},'Davis');
 %! assert (nm.last{2},'Rogers');
 
+%!testif HAVE_PCRE
+%! # Parenthesis in named token (ie (int)) causes a problem
+%! assert (regexp('qwe int asd', ['(?<typestr>(int))'], 'names'), struct ('typestr', 'int'));
+
 %!assert(regexp("abc\nabc",'.'),[1:7])
 %!assert(regexp("abc\nabc",'.','dotall'),[1:7])
 %!testif HAVE_PCRE
 %! assert(regexp("abc\nabc",'(?s).'),[1:7])
 %! assert(regexp("abc\nabc",'.','dotexceptnewline'),[1,2,3,5,6,7])
 %! assert(regexp("abc\nabc",'(?-s).'),[1,2,3,5,6,7])
 
 %!assert(regexp("caseCaSe",'case'),1)
