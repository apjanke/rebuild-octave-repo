# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1338649495 18000
#      Sat Jun 02 10:04:55 2012 -0500
# Node ID 7d44ed216b9844dd2d05b3305941d751e137e129
# Parent  b17e762fb3da39ed7b436a9a7ed689ee2979ccab
Rename symbol_table::symbol_record_ref to symbol_table::symbol_reference

diff --git a/src/pt-id.h b/src/pt-id.h
--- a/src/pt-id.h
+++ b/src/pt-id.h
@@ -109,24 +109,24 @@ public:
 
   void eval_undefined_error (void);
 
   tree_identifier *dup (symbol_table::scope_id scope,
                         symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
-  symbol_table::symbol_record_ref symbol (void) const
+  symbol_table::symbol_reference symbol (void) const
   {
     return sym;
   }
 private:
 
   // The symbol record that this identifier references.
-  symbol_table::symbol_record_ref sym;
+  symbol_table::symbol_reference sym;
 
   // No copying!
 
   tree_identifier (const tree_identifier&);
 
   tree_identifier& operator = (const tree_identifier&);
 };
 
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -579,27 +579,27 @@ public:
     symbol_record_rep *rep;
 
     symbol_record (symbol_record_rep *new_rep) : rep (new_rep) { }
   };
 
   // Always access a symbol from the current scope.
   // Useful for scripts, as they may be executed in more than one scope.
   class
-  symbol_record_ref
+  symbol_reference
   {
   public:
-    symbol_record_ref (void) : scope (-1) {}
-
-    symbol_record_ref (symbol_record record,
+    symbol_reference (void) : scope (-1) {}
+
+    symbol_reference (symbol_record record,
                        scope_id curr_scope = symbol_table::current_scope ())
       : scope (curr_scope), sym (record)
     {}
 
-    symbol_record_ref& operator = (const symbol_record_ref& ref)
+    symbol_reference& operator = (const symbol_reference& ref)
     {
       scope = ref.scope;
       sym = ref.sym;
       return *this;
     }
 
     // The name is the same regardless of scope.
     const std::string& name (void) const { return sym.name (); }
@@ -611,22 +611,22 @@ public:
     }
 
     symbol_record *operator-> (void) const
     {
       update ();
       return &sym;
     }
 
-    // can be used to place symbol_record_ref in maps, we don't overload < as
-    // it doesn't make any sense for symbol_record_ref
+    // can be used to place symbol_reference in maps, we don't overload < as
+    // it doesn't make any sense for symbol_reference
     struct comparator
     {
-      bool operator ()(const symbol_record_ref& lhs,
-                       const symbol_record_ref& rhs) const
+      bool operator ()(const symbol_reference& lhs,
+                       const symbol_reference& rhs) const
       {
         return lhs.name () < rhs.name ();
       }
     };
   private:
     void update (void) const
     {
       scope_id curr_scope = symbol_table::current_scope ();
