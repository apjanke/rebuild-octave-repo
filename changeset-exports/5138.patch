# HG changeset patch
# User jwe
# Date 1107990783 0
#      Wed Feb 09 23:13:03 2005 +0000
# Node ID 5fa9670b5956a22b5bfee54740f40c732c365251
# Parent  5ee7da8b8a4bda121f92e33f1eb2470c7eab6761
[project @ 2005-02-09 23:13:03 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2005-02-09  John W. Eaton  <jwe@octave.org>
+
+	* configure.in: Check for canonicalize_file_name and resolvepath.
+
 2005-02-02  John W. Eaton  <jwe@octave.org>
 
 	* config.guess, config.sub: Update from FSF sources.
 
 2005-01-18  John W. Eaton  <jwe@octave.org>
 
 	* octave-bug.in: Try harder to find default editor (stolen from
 	bashbug).
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.459 $)
+AC_REVISION($Revision: 1.460 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -976,25 +976,26 @@ if test "$have_fnmatch_h" = yes && test 
     ])
 fi
 AC_SUBST(GLOB_DIR)
 AC_SUBST(LIBGLOB)
 AC_SUBST(GLOB_INCFLAGS)
 
 ### Checks for functions and variables.
 
-AC_CHECK_FUNCS(atexit basename bcopy bzero dup2 endgrent endpwent execvp \
-  fcntl fork getcwd getegid geteuid getgid getgrent getgrgid \
-  getgrnam getpgrp getpid getppid getpwent getpwuid gettimeofday \
-  getuid getwd _kbhit kill link localtime_r lstat memmove mkdir \
-  mkfifo mkstemp on_exit pipe poll putenv raise readlink rename \
-  rindex rmdir round select setgrent setpwent setvbuf sigaction \
-  siglongjmp sigpending sigprocmask sigsuspend stat strcasecmp strdup \
-  strerror strftime stricmp strncasecmp strnicmp strptime symlink \
-  tempnam umask unlink usleep vfprintf vsprintf vsnprintf waitpid)
+AC_CHECK_FUNCS(atexit basename bcopy bzero canonicalize_file_name \
+  dup2 endgrent endpwent execvp fcntl fork getcwd getegid geteuid \
+  getgid getgrent getgrgid getgrnam getpgrp getpid getppid getpwent \
+  getpwuid gettimeofday getuid getwd _kbhit kill link localtime_r \
+  lstat memmove mkdir mkfifo mkstemp on_exit pipe poll putenv raise \
+  readlink rename resolvepath rindex rmdir round select setgrent \
+  setpwent setvbuf sigaction siglongjmp sigpending sigprocmask \
+  sigsuspend stat strcasecmp strdup strerror strftime stricmp \
+  strncasecmp strnicmp strptime symlink tempnam umask unlink usleep \
+  vfprintf vsprintf vsnprintf waitpid)
 
 OCTAVE_SMART_PUTENV
 
 ### Dynamic linking is now enabled only if we are building shared
 ### libs and some API for dynamic linking is detected.
 
 LD_CXX='$(CXX)'
 LIBDLFCN=
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,13 @@
 2005-02-09  John W. Eaton  <jwe@octave.org>
 
+	* file-ops.cc (file_ops::canonicalize_file_name): New functions.
+	* file-ops.h: Provide decls.
+
 	* kpse.cc (kpse_tilde_expand): Simply return NAME if it is empty.
 
 2005-02-08  John W. Eaton  <jwe@octave.org>
 
 	* Array-util.cc (freeze): Improve error message.
 
 2005-01-26  David Bateman <dbateman@free.fr>
 
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -306,16 +306,98 @@ file_ops::rmdir (const std::string& name
     }
 #else
   msg = NOT_SUPPORTED ("rmdir");
 #endif
 
   return status;
 }
 
+std::string
+file_ops::canonicalize_file_name (const std::string& name)
+{
+  std::string msg;
+  return canonicalize_file_name (name, msg);
+}
+
+std::string
+file_ops::canonicalize_file_name (const std::string& name, std::string& msg)
+{
+  msg = std::string ();
+
+  std::string retval;
+
+#if defined (HAVE_CANONICALIZE_FILE_NAME)
+
+  char *tmp = ::canonicalize_file_name (name.c_str ());
+
+  if (tmp)
+    {
+      retval = tmp;
+      ::free (tmp);
+    }
+
+#elif defined (HAVE_RESOLVEPATH)
+
+#if !defined (errno)
+extern int errno;
+#endif
+
+#if !defined (__set_errno)
+# define __set_errno(Val) errno = (Val)
+#endif
+
+  if (name.empty ())
+    {
+      __set_errno (ENOENT);
+      return retval;
+    }
+
+  // All known hosts with resolvepath (e.g. Solaris 7) don't turn
+  // relative names into absolute ones, so prepend the working
+  // directory if the path is not absolute.
+
+  name = octave_env::make_absolute (name);
+
+  size_t resolved_size = name.length ();
+
+  while (1)
+    {
+      resolved_size = 2 * resolved_size + 1;
+
+      OCTAVE_LOCAL_BUFFER (char, resolved, resolved_size);
+
+      resolved_len = ::resolvepath (name, resolved, resolved_size);
+
+      if (resolved_len < 0)
+	break;
+
+      if (resolved_len < resolved_size)
+	{
+	  retval = resolved;
+	  break;
+	}
+    }
+
+#else
+
+  // XXX FIXME XXX -- provide replacement here...
+  retval = name;
+
+#endif
+
+  if (retval.empty ())
+    {
+      using namespace std;
+      msg = ::strerror (errno);
+    }
+
+  return retval;
+}
+
 // We provide a replacement for tempnam().
 
 std::string
 file_ops::tempnam (const std::string& dir, const std::string& pfx)
 {
   std::string msg;
   return tempnam (dir, pfx, msg);
 }
diff --git a/liboctave/file-ops.h b/liboctave/file-ops.h
--- a/liboctave/file-ops.h
+++ b/liboctave/file-ops.h
@@ -50,16 +50,19 @@ file_ops
   static int readlink (const std::string&, std::string&, std::string&);
 
   static int rename (const std::string&, const std::string&);
   static int rename (const std::string&, const std::string&, std::string&);
 
   static int rmdir (const std::string&);
   static int rmdir (const std::string&, std::string&);
 
+  static std::string canonicalize_file_name (const std::string&);
+  static std::string canonicalize_file_name (const std::string&, std::string&);
+
   static std::string tempnam (const std::string&, const std::string&);
   static std::string tempnam (const std::string&, const std::string&,
 			      std::string&);
 
   typedef std::string (*tilde_expansion_hook) (const std::string&);
 
   static tilde_expansion_hook tilde_expansion_preexpansion_hook;
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2005-02-09  John W. Eaton  <jwe@octave.org>
+
+	* variables.cc (same_file): New static function.
+	(symbol_out_of_date): Use it.
+
+	* syscalls.cc (Fcanonicalize_file_name): New function.
+
 2005-02-08  Walter Landry  <landry@osc.edu>
 
 	* symtab.h (symbol_record::mark_as_command): Avoid AIX compiler error.
 
 2005-02-07  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/find.cc (find_nonzero_elem_idx): Return [] instead
 	of [](1x0) for scalar arg of zero.
diff --git a/src/syscalls.cc b/src/syscalls.cc
--- a/src/syscalls.cc
+++ b/src/syscalls.cc
@@ -185,17 +185,17 @@ error message.\n\
 		  exec_args.resize (len + 1);
 
 		  exec_args[0] = exec_file;
 
 		  for (int i = 0; i < len; i++)
 		    exec_args[i+1] = tmp[i];
 		}
 	      else
-		error ("exec: arguments must be strings");
+		error ("exec: arguments must be character strings");
 	    }
 	  else
 	    {
 	      exec_args.resize (1);
 
 	      exec_args[0] = exec_file;
 	    }
 
@@ -937,16 +937,47 @@ message.\n\
 	error ("waitpid: PID must be an integer value");
     }
   else
     print_usage ("waitpid");
 
   return retval;
 }
 
+DEFUN (canonicalize_file_name, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {[@var{cname}, @var{status}, @var{msg}]} canonicalize_file_name (@var{name})\n\
+Return the canonical name of file @var{name}.\n\
+@end deftypefn")
+{
+  octave_value_list retval;
+
+  if (args.length () == 1)
+    {
+      std::string name = args(0).string_value ();
+
+      if (! error_state)
+	{
+	  std::string msg;
+
+	  std::string result = file_ops::canonicalize_file_name (name, msg);
+
+	  retval(2) = msg;
+	  retval(1) = msg.empty () ? 0 : -1;
+	  retval(0) = result;
+	}
+      else
+	error ("canonicalize_file_name: argument must be a character string");
+    }
+  else
+    print_usage ("canonicalize_file_name");
+
+  return retval;
+}
+
 #if !defined (O_NONBLOCK) && defined (O_NDELAY)
 #define O_NONBLOCK O_NDELAY
 #endif
 
 void
 symbols_of_syscalls (void)
 {
 #if defined (F_DUPFD)
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -952,16 +952,30 @@ Check only for directories.\n\
 	error ("exist: expecting first argument to be a string");
     }
   else
     print_usage ("exist");
 
   return retval;
 }
 
+// Return TRUE if F and G are both names for the same file.
+
+static bool
+same_file (const std::string& f, const std::string& g)
+{
+  std::string c_f = file_ops::canonicalize_file_name (f);
+  std::string c_g = file_ops::canonicalize_file_name (g);
+
+  file_stat f_fs (c_f);
+  file_stat g_fs (c_g);
+
+  return (f_fs.ino () == g_fs.ino () && f_fs.dev () == g_fs.dev ());
+}
+
 // Is there a corresponding function file that is newer than the
 // symbol definition?
 
 static bool
 symbol_out_of_date (symbol_record *sr)
 {
   bool retval = false;
 
@@ -989,27 +1003,27 @@ symbol_out_of_date (symbol_record *sr)
 
 		  names[0] = nm + ".oct";
 		  names[1] = nm + ".m";
 
 		  std::string file = octave_env::make_absolute
 		    (Vload_path_dir_path.find_first_of (names),
 		     octave_env::getcwd ());
 
-		  if (file != ff)
-		    retval = true;
-		  else
+		  if (same_file (file, ff))
 		    {
 		      tmp->mark_fcn_file_up_to_date (octave_time ());
 
 		      file_stat fs (ff);
 
 		      if (fs && fs.is_newer (tp))
 			retval = true;
 		    }
+		  else
+		    retval = true;
 		}
 	    }
 	}
     }
 
   return retval;
 }
 
