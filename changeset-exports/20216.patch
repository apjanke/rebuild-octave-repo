# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1432370823 -7200
#      Sat May 23 10:47:03 2015 +0200
# Branch stable
# Node ID 9866b3202c522da073e19cb58c89a423a0850fb5
# Parent  ca2da088eada34501afcf1477f02b61687e43601
Let grid and autoscale buttons work when the axes is invisible (bug #44436)

* Canvas.cc (Canvas::canvasAutoAxes, Canvas::canvasToggleGrid) don't check that the axes "visible" property is on when handling grid and autoscale actions. "handlevisibility" is "on" anyway as we are dealing with the currentaxes.

diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -248,34 +248,32 @@ Canvas::canvasToggleGrid (const graphics
       graphics_handle ah = fp.get_currentaxes ();
 
       graphics_object ax = gh_manager::get_object (ah);
 
       if (ax.valid_object ())
         {
           axes::properties& ap = Utils::properties<axes> (ax);
 
-          if (ap.handlevisibility_is ("on") && ap.is_visible ())
-            {
-              std::string tmp;
+          std::string tmp;
 
-              // If any grid is off, then turn them all on.  If they are all
-              // on, then turn them off.
+          // If any grid is off, then turn them all on.  If they are all
+          // on, then turn them off.
 
-              std::string state = ((ap.get_xgrid () == "off"
-                                    || ap.get_ygrid () == "off"
-                                    || ap.get_zgrid () == "off")
-                                   ? "on" : "off");
+          std::string state = ((ap.get_xgrid () == "off"
+                                || ap.get_ygrid () == "off"
+                                || ap.get_zgrid () == "off")
+                               ? "on" : "off");
 
-              ap.set_xgrid (state);
-              ap.set_ygrid (state);
-              ap.set_zgrid (state);
+          ap.set_xgrid (state);
+          ap.set_ygrid (state);
+          ap.set_zgrid (state);
 
-              redraw (true);
-            }
+          redraw (true);
+            
         }
     }
 }
 
 static void
 autoscale_axes (axes::properties& ap)
 {
   ap.clear_zoom_stack ();
@@ -299,22 +297,19 @@ Canvas::canvasAutoAxes (const graphics_h
       graphics_handle ah = fp.get_currentaxes ();
 
       graphics_object ax = gh_manager::get_object (ah);
 
       if (ax.valid_object ())
         {
           axes::properties& ap = Utils::properties<axes> (ax);
 
-          if (ap.handlevisibility_is ("on") && ap.is_visible ())
-            {
-              autoscale_axes (ap);
+          autoscale_axes (ap);
 
-              redraw (true);
-            }
+          redraw (true);
         }
     }
 }
 
 void
 Canvas::canvasPaintEvent (void)
 {
   if (! m_redrawBlocked)
