# HG changeset patch
# User jwe
# Date 819457369 0
#      Wed Dec 20 11:02:49 1995 +0000
# Node ID 5a8ad3d12304e5541aa10633b59a2168bf336d3f
# Parent  593fff2e7e39c35c41eea4e16f7e23ee9e054c35
[project @ 1995-12-20 10:58:39 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -769,17 +769,17 @@ ComplexMatrix::inverse (void) const
 ComplexMatrix
 ComplexMatrix::inverse (int& info) const
 {
   double rcond;
   return inverse (info, rcond);
 }
 
 ComplexMatrix
-ComplexMatrix::inverse (int& info, double& rcond) const
+ComplexMatrix::inverse (int& info, double& rcond, int force) const
 {
   int nr = rows ();
   int nc = cols ();
   int len = length ();
   if (nr != nc)
     {
       (*current_liboctave_error_handler) ("inverse requires square matrix");
       return ComplexMatrix ();
@@ -789,17 +789,17 @@ ComplexMatrix::inverse (int& info, doubl
 
   int *ipvt = new int [nr];
   Complex *z = new Complex [nr];
   Complex *tmp_data = dup (data (), len);
 
   F77_FCN (zgeco, ZGECO) (tmp_data, nr, nc, ipvt, rcond, z);
 
   volatile double rcond_plus_one = rcond + 1.0;
-  if (rcond_plus_one == 1.0)
+  if (rcond_plus_one == 1.0 && ! force)
     {
       info = -1;
       copy (tmp_data, data (), len);  // Restore contents.
     }
   else
     {
       Complex *dummy = 0;
 
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -119,17 +119,17 @@ public:
   ComplexRowVector row (int i) const;
   ComplexRowVector row (char *s) const;
 
   ComplexColumnVector column (int i) const;
   ComplexColumnVector column (char *s) const;
 
   ComplexMatrix inverse (void) const;
   ComplexMatrix inverse (int& info) const;
-  ComplexMatrix inverse (int& info, double& rcond) const;
+  ComplexMatrix inverse (int& info, double& rcond, int force = 0) const;
 
   ComplexMatrix pseudo_inverse (double tol = 0.0);
 
   ComplexMatrix fourier (void) const;
   ComplexMatrix ifourier (void) const;
 
   ComplexMatrix fourier2d (void) const;
   ComplexMatrix ifourier2d (void) const;
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -498,17 +498,17 @@ Matrix::inverse (void) const
 Matrix
 Matrix::inverse (int& info) const
 {
   double rcond;
   return inverse (info, rcond);
 }
 
 Matrix
-Matrix::inverse (int& info, double& rcond) const
+Matrix::inverse (int& info, double& rcond, int force) const
 {
   int nr = rows ();
   int nc = cols ();
   int len = length ();
   if (nr != nc || nr == 0 || nc == 0)
     {
       (*current_liboctave_error_handler) ("inverse requires square matrix");
       return Matrix ();
@@ -518,17 +518,17 @@ Matrix::inverse (int& info, double& rcon
 
   int *ipvt = new int [nr];
   double *z = new double [nr];
   double *tmp_data = dup (data (), len);
 
   F77_FCN (dgeco, DGECO) (tmp_data, nr, nc, ipvt, rcond, z);
 
   volatile double rcond_plus_one = rcond + 1.0;
-  if (rcond_plus_one == 1.0)
+  if (rcond_plus_one == 1.0 && ! force)
     {
       info = -1;
       copy (tmp_data, data (), len);  // Restore matrix contents.
     }
   else
     {
       double *dummy = 0;
 
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -103,17 +103,17 @@ public:
   RowVector row (int i) const;
   RowVector row (char *s) const;
 
   ColumnVector column (int i) const;
   ColumnVector column (char *s) const;
 
   Matrix inverse (void) const;
   Matrix inverse (int& info) const;
-  Matrix inverse (int& info, double& rcond) const;
+  Matrix inverse (int& info, double& rcond, int force = 0) const;
 
   Matrix pseudo_inverse (double tol = 0.0);
 
   ComplexMatrix fourier (void) const;
   ComplexMatrix ifourier (void) const;
 
   ComplexMatrix fourier2d (void) const;
   ComplexMatrix ifourier2d (void) const;
diff --git a/src/inv.cc b/src/inv.cc
--- a/src/inv.cc
+++ b/src/inv.cc
@@ -71,33 +71,33 @@ DEFUN_DLD_BUILTIN ("inv", Finv, Sinv, 10
     {
       Matrix m = arg.matrix_value ();
 
       if (! error_state)
 	{
 	  int info;
 	  double rcond = 0.0;
 
-	  retval = m.inverse (info, rcond);
+	  retval = m.inverse (info, rcond, 1);
 
 	  if (info == -1)
 	    warning ("inverse: matrix singular to machine precision,\
  rcond = %g", rcond);
 	}
     }
   else if (arg.is_complex_type ())
     {
       ComplexMatrix m = arg.complex_matrix_value ();
 
       if (! error_state)
 	{
 	  int info;
 	  double rcond = 0.0;
 
-	  retval = m.inverse (info, rcond);
+	  retval = m.inverse (info, rcond, 1);
 
 	  if (info == -1)
 	    warning ("inverse: matrix singular to machine precision,\
  rcond = %g", rcond);
 	}
     }
   else
     {
diff --git a/src/xpow.cc b/src/xpow.cc
--- a/src/xpow.cc
+++ b/src/xpow.cc
@@ -201,17 +201,17 @@ xpow (const Matrix& a, double b)
 	      Matrix atmp;
 	      if (btmp < 0)
 		{
 		  btmp = -btmp;
 
 		  int info;
 		  double rcond = 0.0;
 
-		  atmp = a.inverse (info, rcond);
+		  atmp = a.inverse (info, rcond, 1);
 
 		  if (info == -1)
 		    warning ("inverse: matrix singular to machine\
  precision, rcond = %g", rcond);
 		}
 	      else
 		atmp = a;
 
@@ -394,17 +394,17 @@ xpow (const ComplexMatrix& a, double b)
 	      ComplexMatrix atmp;
 	      if (btmp < 0)
 		{
 		  btmp = -btmp;
 
 		  int info;
 		  double rcond = 0.0;
 
-		  atmp = a.inverse (info, rcond);
+		  atmp = a.inverse (info, rcond, 1);
 
 		  if (info == -1)
 		    warning ("inverse: matrix singular to machine\
  precision, rcond = %g", rcond);
 		}
 	      else
 		atmp = a;
 
