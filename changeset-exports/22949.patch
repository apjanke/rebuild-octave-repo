# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1482804789 18000
#      Mon Dec 26 21:13:09 2016 -0500
# Node ID 8b56cd9867aaf860d43987abd96c9728d88b033b
# Parent  7e447335b839dcd584c20e274419266eaef28f4a
* eigs-base.cc: Use F77_INT in calls to Fortran subroutines.

diff --git a/liboctave/numeric/eigs-base.cc b/liboctave/numeric/eigs-base.cc
--- a/liboctave/numeric/eigs-base.cc
+++ b/liboctave/numeric/eigs-base.cc
@@ -134,18 +134,18 @@ vector_product (const SparseMatrix& m, c
       y[m.ridx (i)] += m.data (i) * x[j];
 
   return true;
 }
 
 static bool
 vector_product (const Matrix& m, const double *x, double *y)
 {
-  octave_idx_type nr = m.rows ();
-  octave_idx_type nc = m.cols ();
+  F77_INT nr = to_f77_int (m.rows ());
+  F77_INT nc = to_f77_int (m.cols ());
 
   F77_XFCN (dgemv, DGEMV, (F77_CONST_CHAR_ARG2 ("N", 1),
                            nr, nc, 1.0,  m.data (), nr,
                            x, 1, 0.0, y, 1
                            F77_CHAR_ARG_LEN (1)));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("eigs: unrecoverable error in dgemv");
@@ -167,18 +167,18 @@ vector_product (const SparseComplexMatri
       y[m.ridx (i)] += m.data (i) * x[j];
 
   return true;
 }
 
 static bool
 vector_product (const ComplexMatrix& m, const Complex *x, Complex *y)
 {
-  octave_idx_type nr = m.rows ();
-  octave_idx_type nc = m.cols ();
+  F77_INT nr = to_f77_int (m.rows ());
+  F77_INT nc = to_f77_int (m.cols ());
 
   F77_XFCN (zgemv, ZGEMV, (F77_CONST_CHAR_ARG2 ("N", 1),
                            nr, nc, 1.0, F77_CONST_DBLE_CMPLX_ARG (m.data ()),
                            nr,
                            F77_CONST_DBLE_CMPLX_ARG (x), 1, 0.0,
                            F77_DBLE_CMPLX_ARG (y), 1
                            F77_CHAR_ARG_LEN (1)));
 
