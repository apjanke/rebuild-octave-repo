# HG changeset patch
# User jwe
# Date 781396546 0
#      Wed Oct 05 22:35:46 1994 +0000
# Node ID 9541a1fe575cc3bdc93b2ab0b747ac482a87e4f3
# Parent  dedc491ec606e41eff2cf713ab769cc38798902c
[project @ 1994-10-05 22:35:46 by jwe]

diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -515,17 +515,17 @@ do_double_format_conversion (double *dat
       Cray_to_VAX_G_double (data, len);
       break;
 
 #else
 LOSE! LOSE!
 #endif
 
     default:
-      panic_impossible ();
+      gripe_unrecognized_float_fmt ();
       break;
     }
 }
 
 static void
 do_float_format_conversion (float *data, int len,
 			    floating_point_format fmt)
 {
@@ -615,17 +615,17 @@ do_float_format_conversion (float *data,
       Cray_to_VAX_G_float (data, len);
       break;
 
 #else
 LOSE! LOSE!
 #endif
 
     default:
-      panic_impossible ();
+      gripe_unrecognized_float_fmt ();
       break;
     }
 }
 
 static void
 read_doubles (istream& is, double *data, save_type type, int len,
 	      int swap, floating_point_format fmt)
 {
@@ -715,17 +715,17 @@ write_doubles (ostream& os, const double
       {
 	char tmp_type = (char) type;
 	os.write (&tmp_type, 1);
 	os.write (data, 8 * len);
       }
       break;
 
     default:
-      panic_impossible ();
+      error ("unrecognized data format requested");
       break;
     }
 }
 
 // Return nonzero if S is a valid identifier.
 
 static int
 valid_identifier (char *s)
@@ -949,17 +949,17 @@ install_loaded_variable (int force, char
 	    }
 	  else
 	    {
 	      warning ("load: local variable name `%s' exists.", name);
 	      warning ("use `load -force' to overwrite");
 	    }
 	}
       else
-	panic_impossible ();
+	error ("load: unable to load data for unknown symbol type");
     }
   else
     {
       if (is_global)
 	{
 	  if (force || is_undefined)
 	    {
 	      lsr = curr_sym_tab->lookup (name, 1, 0);
@@ -995,17 +995,17 @@ install_loaded_variable (int force, char
 	    }
 	  else
 	    {
 	      warning ("load: local variable name `%s' exists.", name);
 	      warning ("use `load -force' to overwrite");
 	    }
 	}
       else
-	panic_impossible ();
+	error ("load: unable to load data for unknown symbol type");
     }
 
   if (sr)
     {
       tree_constant *tmp_tc = new tree_constant (tc);
       sr->define (tmp_tc);
       if (doc)
 	sr->document (doc);
@@ -1448,17 +1448,17 @@ read_binary_data (istream& is, int swap,
   switch (tmp)
     {
     case 1:
       {
 	if (! is.read (&tmp, 1))
 	  goto data_read_error;
 	double dtmp;
 	read_doubles (is, &dtmp, (save_type) tmp, 1, swap, fmt);
-	if (! is)
+	if (error_state || ! is)
 	  goto data_read_error;
 	tc = dtmp;
       }
       break;
 
     case 2:
       {
 	FOUR_BYTE_INT nr, nc;
@@ -1471,29 +1471,29 @@ read_binary_data (istream& is, int swap,
 	if (swap)
 	  swap_4_bytes ((char *) &nc);
 	if (! is.read (&tmp, 1))
 	  goto data_read_error;
 	Matrix m (nr, nc);
 	double *re = m.fortran_vec ();
 	int len = nr * nc;
 	read_doubles (is, re, (save_type) tmp, len, swap, fmt);
-	if (! is)
+	if (error_state || ! is)
 	  goto data_read_error;
 	tc = m;
       }
       break;
 
     case 3:
       {
 	if (! is.read (&tmp, 1))
 	  goto data_read_error;
 	Complex ctmp;
 	read_doubles (is, (double *) &ctmp, (save_type) tmp, 2, swap, fmt);
-	if (! is)
+	if (error_state || ! is)
 	  goto data_read_error;
 	tc = ctmp;
       }
       break;
 
     case 4:
       {
 	FOUR_BYTE_INT nr, nc;
@@ -1507,17 +1507,17 @@ read_binary_data (istream& is, int swap,
 	  swap_4_bytes ((char *) &nc);
 	if (! is.read (&tmp, 1))
 	  goto data_read_error;
 	ComplexMatrix m (nr, nc);
 	Complex *im = m.fortran_vec ();
 	int len = nr * nc;
 	read_doubles (is, (double *) im, (save_type) tmp, 2*len,
 		      swap, fmt);
-	if (! is)
+	if (error_state || ! is)
 	  goto data_read_error;
 	tc = m;
       }
       break;
 
     case 5:
       {
 	int nr = tc.rows ();
@@ -2560,17 +2560,17 @@ do_save (ostream& os, symbol_record *sr,
       save_binary_data (os, tc, name, help, global, save_as_floats);
       break;
 
     case LS_MAT_BINARY:
       save_mat_binary_data (os, tc, name);
       break;
 
     default:
-      panic_impossible ();
+      error ("save: unrecognized data format requested");
       break;
     }
 }
 
 // Save variables with names matching PATTERN on stream OS in the
 // format specified by FMT.  If SAVE_BUILTINS is nonzero, also save
 // builtin variables with names that match PATTERN.
 
