# HG changeset patch
# User Shai Ayal <shaiay@users.sourceforge.net>
# Date 1281030804 -10800
#      Thu Aug 05 20:53:24 2010 +0300
# Node ID 2224236440c0164c2fae7cf33f54f1bbb33b4348
# Parent  dea165ff6d74062257d5727b78dff04f4e68eb8d
add more terminal types to gl2ps-renderer

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-08-05  Shai Ayal  <shaiay@users.sourceforge.net>
+
+	* gl2ps-renderer.cc (draw): Add support for more terminal types.
+	* DLD-FUNCTIONS/fltk_backend.cc: Likewise.
+
 2010-08-04  John W. Eaton  <jwe@octave.org>
 
 	* mex.cc (mxArray_number (const char *)): Create empty string if
 	given NULL arg  (bug #30639).  Create 0x0 string array if given
 	an empty string argument, not 1x0.
 
 2010-08-03  Jaroslav Hajek  <highegg@gmail.com>
 
@@ -23,17 +28,17 @@ 2010-08-03  Jaroslav Hajek  <highegg@gma
 	* ov-usr-fcn.cc (Fis_ignored_output): Rename to Fisargout. Change the
 	behavior to indicate not ignored outputs.
 
 2010-08-01  Rik <octave@nomad.inbox5.com>
 
 	* DLD-FUNCTIONS/amd.cc, DLD-FUNCTIONS/balance.cc, 
 	DLD-FUNCTIONS/besselj.cc, DLD-FUNCTIONS/betainc.cc,
 	DLD-FUNCTIONS/ccolamd.cc, DLD-FUNCTIONS/cellfun.cc,
-	DLD-FUNCTIONS/chol.cc, DLD-FUNCTIONS/colamd.cc, DLD-FUNCTIONS/daspk.cc,
+ 	DLD-FUNCTIONS/chol.cc, DLD-FUNCTIONS/colamd.cc, DLD-FUNCTIONS/daspk.cc,
 	DLD-FUNCTIONS/dasrt.cc, DLD-FUNCTIONS/dot.cc, DLD-FUNCTIONS/eigs.cc,
 	DLD-FUNCTIONS/fftw.cc, DLD-FUNCTIONS/filter.cc,
 	DLD-FUNCTIONS/lookup.cc, DLD-FUNCTIONS/lsode.cc, DLD-FUNCTIONS/lu.cc,
 	DLD-FUNCTIONS/matrix_type.cc, DLD-FUNCTIONS/onCleanup.cc,
 	DLD-FUNCTIONS/qr.cc, DLD-FUNCTIONS/rand.cc, DLD-FUNCTIONS/regexp.cc,
 	DLD-FUNCTIONS/sparse.cc, DLD-FUNCTIONS/str2double.cc,
 	DLD-FUNCTIONS/tril.cc, DLD-FUNCTIONS/typecast.cc, data.cc, graphics.cc,
 	load-save.cc, ov-null-mat.cc, ov-struct.cc, ov-usr-fcn.cc,
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/fltk_backend.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/fltk_backend.cc
@@ -100,29 +100,31 @@ public:
     in_zoom = z;
     if (! in_zoom)
       hide_overlay ();
   }
 
   bool zoom (void) { return in_zoom; }
   void set_zoom_box (const Matrix& zb) { zoom_box = zb; }
   
-  void print (const std::string& filename)
+  void print (const std::string& filename, const std::string& term)
   {
     print_filename  = filename;
+    print_term  = term;
   }
 
 private:
   double number;
   opengl_renderer renderer;
   bool in_zoom;
   // (x1,y1,x2,y2)
   Matrix zoom_box;
 
   std::string print_filename;
+  std::string print_term;
 
   void setup_viewport (int ww, int hh)
   {
     glMatrixMode (GL_PROJECTION);
     glLoadIdentity ();
     glViewport (0, 0, ww, hh);
   }
 
@@ -131,17 +133,17 @@ private:
     if (! valid ())
       {
         valid (1);
         setup_viewport (w (), h ());
       }
 
     if (! print_filename.empty ())
       {
-        opengl_renderer *rend = new glps_renderer (print_filename);
+        opengl_renderer *rend = new glps_renderer (print_filename, print_term);
         rend->draw (gh_manager::lookup (number));
         print_filename = "";
         delete rend;
       }
     else
       {
         renderer.draw (gh_manager::lookup (number));
 
@@ -325,19 +327,19 @@ public:
     this->hide ();
     delete canvas;
     delete status;
   }
 
   // FIXME -- this could change.
   double number (void) { return fp.get___myhandle__ ().value (); }
 
-  void print (const std::string& fname)
+  void print (const std::string& fname, const std::string& term)
   {
-    canvas->print (fname);
+    canvas->print (fname, term);
 
     // Print immediately so the output file will exist when the drawnow
     // command is done.
     mark_modified ();
     Fl::wait (fltk_maxtime);
   }
 
   void mark_modified (void)
@@ -930,20 +932,20 @@ public:
     return instance_ok () ? instance->do_get_size (idx) : Matrix ();
   }
 
   static Matrix get_size (const graphics_handle& gh)
   {
     return get_size (hnd2idx (gh));
   }
 
-  static void print (const graphics_handle& gh , const std::string& filename)
+  static void print (const graphics_handle& gh , const std::string& filename,  const std::string& term)
   {
     if (instance_ok ())
-      instance->do_print (hnd2idx(gh), filename);
+      instance->do_print (hnd2idx(gh), filename, term);
   }
 
 private:
 
   static figure_manager *instance;
 
   figure_manager (void) { }
 
@@ -1032,22 +1034,22 @@ private:
       {
         sz(0) = win->second->w ();
         sz(1) = win->second->h ();
       }
 
     return sz;
   }
 
-  void do_print (int idx, const std::string& filename)
+  void do_print (int idx, const std::string& filename,  const std::string& term)
   {
     wm_iterator win;
     if ((win = windows.find (idx)) != windows.end ())
       {
-        win->second->print (filename);
+        win->second->print (filename, term);
       }
   }
 
   // FIXME -- default size should be configurable.
   void default_size (int& x, int& y, int& w, int& h)
   {
     x = 0;
     y = 0;
@@ -1196,21 +1198,21 @@ public:
   void redraw_figure (const graphics_object& go) const
   {
     figure_manager::mark_modified (go.get_handle ());
 
     __fltk_redraw__ ();
   }
 
   void print_figure (const graphics_object& go,
-                     const std::string& /*term*/,
+                     const std::string& term,
                      const std::string& file, bool /*mono*/,
                      const std::string& /*debug_file*/) const 
   { 
-    figure_manager::print (go.get_handle (), file);
+    figure_manager::print (go.get_handle (), file, term);
   }
 
   Matrix get_canvas_size (const graphics_handle& fh) const
   {
     return figure_manager::get_size (fh);
   }
 
   double get_screen_resolution (void) const
diff --git a/src/gl2ps-renderer.cc b/src/gl2ps-renderer.cc
--- a/src/gl2ps-renderer.cc
+++ b/src/gl2ps-renderer.cc
@@ -44,24 +44,41 @@ glps_renderer::draw (const graphics_obje
       in_draw = true;
 
       FILE *fp = fopen (filename.c_str (), "wb");
       GLint buffsize = 0, state = GL2PS_OVERFLOW;
       GLint viewport[4];
 
       glGetIntegerv (GL_VIEWPORT, viewport);
 
+      GLint gl2ps_term;
+      if (term.find ("eps") != std::string::npos) gl2ps_term = GL2PS_EPS;
+      else if (term.find ("pdf") != std::string::npos) gl2ps_term = GL2PS_PDF;
+      else if (term.find ("svg") != std::string::npos) gl2ps_term = GL2PS_SVG;
+      else if (term.find ("ps") != std::string::npos) gl2ps_term = GL2PS_PS;
+      else if (term.find ("pgf") != std::string::npos) gl2ps_term = GL2PS_PGF;
+      else if (term.find ("tex") != std::string::npos) gl2ps_term = GL2PS_TEX;
+      else 
+        {
+          error ("gl2ps-renderer:: Unknown terminal");
+          return;
+        }
+
+      GLint gl2ps_text = 0;
+      if (term.find ("notxt") != std::string::npos) gl2ps_text = GL2PS_NO_TEXT;
+
       while (state == GL2PS_OVERFLOW)
         { 
           buffsize += 1024*1024;
           gl2psBeginPage ("glps_renderer figure", "Octave", viewport,
-                          GL2PS_EPS, GL2PS_BSP_SORT,
+                          gl2ps_term, GL2PS_BSP_SORT,
                           (GL2PS_SILENT | GL2PS_SIMPLE_LINE_OFFSET
                            | GL2PS_NO_BLENDING | GL2PS_OCCLUSION_CULL
-                           | GL2PS_BEST_ROOT), GL_RGBA, 0, NULL, 0, 0, 0,
+                           | GL2PS_BEST_ROOT | gl2ps_text), 
+                          GL_RGBA, 0, NULL, 0, 0, 0,
                           buffsize, fp, filename.c_str () );
 
           opengl_renderer::draw (go);
           state = gl2psEndPage ();
         }
 
       gnulib::fclose (fp);
 
diff --git a/src/gl2ps-renderer.h b/src/gl2ps-renderer.h
--- a/src/gl2ps-renderer.h
+++ b/src/gl2ps-renderer.h
@@ -26,18 +26,18 @@ along with Octave; see the file COPYING.
 #include "gl-render.h"
 #include "gl2ps.h"
 
 class 
 OCTINTERP_API
 glps_renderer : public opengl_renderer
 {
 public:
-  glps_renderer (const std::string& _filename) 
-    : opengl_renderer () , filename (_filename) { }
+  glps_renderer (const std::string& _filename, const std::string& _term) 
+    : opengl_renderer () , filename (_filename), term (_term) { }
 
   ~glps_renderer (void) { }
 
   virtual void draw (const graphics_object& go);
 
 protected:
 
   virtual Matrix render_text (const std::string& txt,
@@ -70,13 +70,14 @@ protected:
 
   virtual void set_linewidth (float w)
   {
     gl2psLineWidth (w);
   }
 
 private:
   std::string filename;
+  caseless_str term;
   double fontsize;
   std::string fontname;
 };
 
 #endif
