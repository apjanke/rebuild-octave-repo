# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1423438559 18000
#      Sun Feb 08 18:35:59 2015 -0500
# Node ID c2478360291f7b963219954ce8e1ef88bc953262
# Parent  35bca657d74df7892f5593b2bda6f3d3dbb07349
New functions sound and soundsc

* sound.m, soundsc.m: New function files.
* scripts/audio/module.mk (audio_FCN_FILES): Add files to the list.
* __unimplemented__.m (missing_functions): Remove sound and soundsc
from the list.
* audio.txi: Include sound and soundsc docstrings.
* NEWS: Add sound and soundsc to list of new audio functions.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -10,18 +10,18 @@ Summary of important user-visible change
       classdef      endclassdef
       enumeration   endenumeration
       events        endevents
       methods       endmethods
       properties    endproperties
 
  ** New audio functions and classes:
 
-      audiodevinfo  audioread
-      audioinfo     audiorecorder
+      audiodevinfo  audioread      sound
+      audioinfo     audiorecorder  soundsc
       audioplayer   audiowrite
 
  ** Other new classes in Octave 4.0:
 
       audioplayer    inputParser
       audiorecorder
 
  ** Optional stricter Matlab compatibility for ranges, diagonal matrices,
diff --git a/doc/interpreter/audio.txi b/doc/interpreter/audio.txi
--- a/doc/interpreter/audio.txi
+++ b/doc/interpreter/audio.txi
@@ -173,11 +173,15 @@ files holding data in mu-law encoding en
 @file{snd}.
 
 @DOCSTRING(lin2mu)
 
 @DOCSTRING(mu2lin)
 
 @DOCSTRING(record)
 
+@DOCSTRING(sound)
+
+@DOCSTRING(soundsc)
+
 @DOCSTRING(wavread)
 
 @DOCSTRING(wavwrite)
diff --git a/scripts/audio/module.mk b/scripts/audio/module.mk
--- a/scripts/audio/module.mk
+++ b/scripts/audio/module.mk
@@ -1,14 +1,16 @@
 FCN_FILE_DIRS += audio
 
 audio_FCN_FILES = \
   audio/lin2mu.m \
   audio/mu2lin.m \
   audio/record.m \
+  audio/sound.m \
+  audio/soundsc.m \
   audio/wavread.m \
   audio/wavwrite.m \
   audio/@audioplayer/__get_properties__.m \
   audio/@audioplayer/audioplayer.m \
   audio/@audioplayer/display.m \
   audio/@audioplayer/get.m \
   audio/@audioplayer/isplaying.m \
   audio/@audioplayer/pause.m  \
diff --git a/scripts/audio/sound.m b/scripts/audio/sound.m
new file mode 100644
--- /dev/null
+++ b/scripts/audio/sound.m
@@ -0,0 +1,67 @@
+## Copyright (C) 2015 Mike Miller
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {Function File} {} sound (@var{y})
+## @deftypefnx {Function File} {} sound (@var{y}, @var{fs})
+## @deftypefnx {Function File} {} sound (@var{y}, @var{fs}, @var{nbits})
+## Play audio data @var{y} at sample rate @var{fs} to the default audio
+## device.  If @var{fs} is not given, a default sample rate of 8000 samples
+## per second is used.  The optional argument @var{nbits} specifies the bit
+## depth to play to the audio device and defaults to 8 bits.
+##
+## The audio signal @var{y} can be a vector or a two-column array, representing
+## mono or stereo audio, respectively.
+##
+## For more control over audio playback, use the @code{audioplayer} class.
+## @seealso{record, soundsc}
+## @end deftypefn
+
+function sound (y, fs, nbits)
+
+  if (nargin < 1 || nargin > 3)
+    print_usage ();
+  endif
+
+  if (nargin < 2 || isempty (fs))
+    fs = 8000;
+  elseif (! (isscalar (fs) && (fs > 0)))
+    error ("sound: sample rate FS must be a positive number");
+  endif
+
+  if (nargin < 3 || isempty (nbits))
+    nbits = 8;
+  elseif (! (isscalar (nbits) && (nbits == 8 || nbits == 16 || nbits == 24)))
+    error ("sound: bit depth NBITS must be 8, 16, or 24");
+  endif
+
+  play = audioplayer (y, fs, nbits);
+
+  playblocking (play);
+
+endfunction
+
+
+## Tests of sound must not actually play anything.
+
+%% Test input validation
+%!error sound ()
+%!error sound (1,2,3,4)
+%!error sound (1, -1)
+%!error sound (1, [], 2)
+
diff --git a/scripts/audio/soundsc.m b/scripts/audio/soundsc.m
new file mode 100644
--- /dev/null
+++ b/scripts/audio/soundsc.m
@@ -0,0 +1,106 @@
+## Copyright (C) 2015 Mike Miller
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {Function File} {} soundsc (@var{y})
+## @deftypefnx {Function File} {} soundsc (@var{y}, @var{fs})
+## @deftypefnx {Function File} {} soundsc (@var{y}, @var{fs}, @var{nbits})
+## @deftypefnx {Function File} {} soundsc (@dots{}, [@var{ymin}, @var{ymax}])
+## Scale the audio data @var{y} and play it at sample rate @var{fs} to the
+## default audio device.  If @var{fs} is not given, a default sample rate of
+## 8000 samples per second is used.  The optional argument @var{nbits} specifies
+## the bit depth to play to the audio device and defaults to 8 bits.
+##
+## By default, @var{y} is automatically normalized to the range [-1, 1].  If the
+## range [@var{ymin}, @var{ymax}] is given, then elements of @var{y} that fall
+## within the range @var{ymin} @leq{} @var{y} @leq{} @var{ymax} are scaled to the
+## range [-1, 1] instead.
+##
+## The audio signal @var{y} can be a vector or a two-column array, representing
+## mono or stereo audio, respectively.
+##
+## For more control over audio playback, use the @code{audioplayer} class.
+## @seealso{record, sound}
+## @end deftypefn
+
+function soundsc (y, fs, nbits, yrange)
+
+  if (nargin < 1 || nargin > 4)
+    print_usage ();
+  endif
+
+  if (nargin < 4)
+    yrange = [];
+  endif
+
+  if (nargin < 2 || isempty (fs))
+    fs = 8000;
+  elseif ((nargin == 2) && (numel (fs) > 1))
+    yrange = fs;
+    fs = 8000;
+  elseif (! (isscalar (fs) && (fs > 0)))
+    error ("soundsc: sample rate FS must be a positive number");
+  endif
+
+  if (nargin < 3 || isempty (nbits))
+    nbits = 8;
+  elseif ((nargin == 3) && (numel (nbits) > 1))
+    yrange = nbits;
+    nbits = 8;
+  elseif (! (isscalar (nbits) && (nbits == 8 || nbits == 16 || nbits == 24)))
+    error ("soundsc: bit depth NBITS must be 8, 16, or 24");
+  endif
+
+  if (isreal (yrange) && (numel (yrange) == 2) && (yrange(1) <= yrange(2)))
+    ymin = yrange(1);
+    ymax = yrange(2);
+  elseif (isempty (yrange))
+    ymin = min (y(:));
+    ymax = max (y(:));
+  else
+    error ("soundsc: audio range must be a 2-element [YMIN, YMAX] vector");
+  endif
+
+  ymin = double (ymin);
+  ymax = double (ymax);
+  ymedian = (ymax + ymin) / 2;
+  yscale = 2 / (ymax - ymin);
+
+  y = (double (y) - ymedian) .* yscale;
+
+  play = audioplayer (y, fs, nbits);
+
+  playblocking (play);
+
+endfunction
+
+
+## Tests of soundsc must not actually play anything.
+
+%% Test input validation
+%!error soundsc ()
+%!error soundsc (1,2,3,4,5)
+%!error soundsc (1, -1)
+%!error soundsc (1, [], 2)
+%!error soundsc (1, [2 1])
+%!error soundsc (1, [1 2 3])
+%!error soundsc (1, 8000, [2 1])
+%!error soundsc (1, 8000, [1 2 3])
+%!error soundsc (1, 8000, 8, [2 1])
+%!error soundsc (1, 8000, 8, [1 2 3])
+
diff --git a/scripts/help/__unimplemented__.m b/scripts/help/__unimplemented__.m
--- a/scripts/help/__unimplemented__.m
+++ b/scripts/help/__unimplemented__.m
@@ -777,18 +777,16 @@ function list = missing_functions ()
   "scatteredInterpolant",
   "selectmoveresize",
   "sendmail",
   "serial",
   "setpixelposition",
   "showplottool",
   "smooth3",
   "snapnow",
-  "sound",
-  "soundsc",
   "ss2tf",
   "stack",
   "standardizeMissing",
   "startup",
   "stream2",
   "stream3",
   "streamline",
   "streamparticles",
