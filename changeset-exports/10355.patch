# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1267082495 -3600
#      Thu Feb 25 08:21:35 2010 +0100
# Node ID f9347eac65dcf9296f1806df17de9b728375e736
# Parent  f074aa6b2c804af4485815ba61df04b95831dd0e
make string_vector be a column vector as it used to be

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2010-02-25  Jaroslav Hajek  <highegg@gmail.com>
+
+	* str-vec.h (string_vector::string_vector): Use (n, 1).
+	(string_vector::resize): Ditto.
+	* str-vec.cc (string_vector::string_vector): Ditto.
+
 2010-02-24  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.cc (Array::Array (const Array&, octave_idx_type,
 	octave_idx_type): New ctor.
 	(Array::reshape (octave_idx_type, octave_idx_type): New method.
 	* Array.h: Declare them.
 	* Array2.h: Deprecate Array2, make it a #define for Array.
 
diff --git a/liboctave/str-vec.cc b/liboctave/str-vec.cc
--- a/liboctave/str-vec.cc
+++ b/liboctave/str-vec.cc
@@ -90,17 +90,17 @@ string_vector::string_vector (const char
   for (octave_idx_type i = 0; i < n; i++)
     elem (i) = s[i];
 }
 
 // Create a string vector from up to N C strings.  Assumes that N is
 // nonnegative.
 
 string_vector::string_vector (const char * const *s, octave_idx_type n)
-  : Array<std::string> (1, n)
+  : Array<std::string> (n, 1)
 {
   for (octave_idx_type i = 0; i < n; i++)
     elem (i) = s[i];
 }
 
 string_vector&
 string_vector::sort (bool make_uniq)
 {
diff --git a/liboctave/str-vec.h b/liboctave/str-vec.h
--- a/liboctave/str-vec.h
+++ b/liboctave/str-vec.h
@@ -34,17 +34,17 @@ along with Octave; see the file COPYING.
 class
 OCTAVE_API
 string_vector : public Array<std::string>
 {
 public:
 
   string_vector (void) : Array<std::string> () { }
 
-  explicit string_vector (octave_idx_type n) : Array<std::string> (1, n) { }
+  explicit string_vector (octave_idx_type n) : Array<std::string> (n, 1) { }
 
   string_vector (const char *s) : Array<std::string> (1, 1, s) { }
 
   string_vector (const std::string& s) : Array<std::string> (1, 1, s) { }
 
   string_vector (const string_vector& s) : Array<std::string> (s) { }
 
   string_vector (const std::list<std::string>& lst);
@@ -79,17 +79,17 @@ public:
         if (tmp > longest)
           longest = tmp;
       }
 
     return longest;
   }
 
   void resize (octave_idx_type n, const std::string& rfv = resize_fill_value ())
-    { Array<std::string>::resize (1, n, rfv); }
+    { Array<std::string>::resize (n, 1, rfv); }
 
   std::string& operator[] (octave_idx_type i) { return Array<std::string>::elem (i); }
 
   std::string operator[] (octave_idx_type i) const { return Array<std::string>::elem (i); }
 
   string_vector& sort (bool make_uniq = false);
 
   string_vector& uniq (void);
