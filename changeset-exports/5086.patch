# HG changeset patch
# User jwe
# Date 1100901050 0
#      Fri Nov 19 21:50:50 2004 +0000
# Node ID 55f5b61d74b707819496da3cc4de48b42cb8f249
# Parent  6861a84b1d47cc4d958561370e582cd2652cef2c
[project @ 2004-11-19 21:50:50 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2004-11-19  John W. Eaton  <jwe@octave.org>
+
+	* ov-str-mat.cc (octave_char_matrix_str::do_index_op):
+	Skip indexing operation if indices are invalid.
+
+	* pr-output.cc (set_range_format, set_complex_matrix_format,
+	set_complex_format, set_real_matrix_format, set_real_format):
+	Also specify std::ios::fixed for bank format.
+
 2004-11-17  John W. Eaton  <jwe@octave.org>
 
 	* version.h (OCTAVE_VERSION): Now 2.1.62.
 	(OCTAVE_API_VERSION): Now api-v12.
 
 2004-11-17  David Bateman  <dbateman@free.fr>
 
 	* pt-arg-list.cc (F__end__): Ask dv for the number of elements
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -91,39 +91,42 @@ octave_char_matrix_str::do_index_op (con
 
   switch (len)
     {
     case 2:
       {
 	idx_vector i = idx (0).index_vector ();
 	idx_vector j = idx (1).index_vector ();
 
-	retval = octave_value (charNDArray (matrix.index (i, j, resize_ok)),
-			       true);
+	if (! error_state)
+	  retval = octave_value (charNDArray (matrix.index (i, j, resize_ok)),
+				 true);
       }
       break;
 
     case 1:
       {
 	idx_vector i = idx (0).index_vector ();
 
-	retval = octave_value (charNDArray (matrix.index (i, resize_ok)),
-			       true);
+	if (! error_state)
+	  retval = octave_value (charNDArray (matrix.index (i, resize_ok)),
+				 true);
       }
       break;
 
     default:
       {
 	Array<idx_vector> idx_vec (len);
 
 	for (int i = 0; i < len; i++)
 	  idx_vec(i) = idx(i).index_vector ();
 
-	retval = octave_value (charNDArray (matrix.index (idx_vec, resize_ok)),
-			       true);
+	if (! error_state)
+	  retval = octave_value (charNDArray (matrix.index (idx_vec, resize_ok)),
+				 true);
       }
       break;
     }
 
   return retval;
 }
 
 void
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -345,17 +345,17 @@ set_real_format (bool sign, int digits, 
 	  fw += sign;
 
 	  fmt = float_format (fw, prec - 1, std::ios::scientific);
 	}
 
       if (print_big_e)
 	fmt.uppercase ();
     }
-  else if (inf_or_nan || int_only)
+  else if (! bank_format && (inf_or_nan || int_only))
     fmt = float_format (fw, rd);
   else
     fmt = float_format (fw, rd, std::ios::fixed);
 
   curr_real_fmt = &fmt;
 }
 
 static void
@@ -492,17 +492,17 @@ set_real_matrix_format (bool sign, int x
 	  fw += sign;
 
 	  fmt = float_format (fw, prec - 1, std::ios::scientific);
 	}
 
       if (print_big_e)
 	fmt.uppercase ();
     }
-  else if (int_or_inf_or_nan)
+  else if (! bank_format && int_or_inf_or_nan)
     fmt = float_format (fw, rd);
   else
     fmt = float_format (fw, rd, std::ios::fixed);
 
   curr_real_fmt = &fmt;
 }
 
 static void
@@ -649,17 +649,17 @@ set_complex_format (bool sign, int x_max
 	}
 
       if (print_big_e)
 	{
 	  r_fmt.uppercase ();
 	  i_fmt.uppercase ();
 	}
     }
-  else if (inf_or_nan || int_only)
+  else if (! bank_format && (inf_or_nan || int_only))
     {
       r_fmt = float_format (r_fw, rd);
       i_fmt = float_format (i_fw, rd);
     }
   else
     {
       r_fmt = float_format (r_fw, rd, std::ios::fixed);
       i_fmt = float_format (i_fw, rd, std::ios::fixed);
@@ -836,17 +836,17 @@ set_complex_matrix_format (bool sign, in
 	}
 
       if (print_big_e)
 	{
 	  r_fmt.uppercase ();
 	  i_fmt.uppercase ();
 	}
     }
-  else if (int_or_inf_or_nan)
+  else if (! bank_format && int_or_inf_or_nan)
     {
       r_fmt = float_format (r_fw, rd);
       i_fmt = float_format (i_fw, rd);
     }
   else
     {
       r_fmt = float_format (r_fw, rd, std::ios::fixed);
       i_fmt = float_format (i_fw, rd, std::ios::fixed);
@@ -1000,17 +1000,17 @@ set_range_format (bool sign, int x_max, 
 	  fw = sign + 2 + prec + exp_field;
 
 	  fmt = float_format (fw, prec - 1, std::ios::scientific);
 	}
 
       if (print_big_e)
 	fmt.uppercase ();
     }
-  else if (all_ints)
+  else if (! bank_format && all_ints)
     fmt = float_format (fw, rd);
   else
     fmt = float_format (fw, rd, std::ios::fixed);
 
   curr_real_fmt = &fmt;
 }
 
 static void
