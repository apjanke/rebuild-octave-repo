# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1546272334 -3600
#      Mon Dec 31 17:05:34 2018 +0100
# Branch stable
# Node ID 5f10217b562dc568dd88fe60c54bec337e51bc0e
# Parent  45cf2ada3e39180583061a71eb169ab326d9e782
Use gnulib to check if encoding is possible (bug #55306).

* file-editor-tab.cc (check_valid_codec): Additionally use gnulib to check
  whether encoding is possible.

* uniconv-wrappers.[c/h] (octave_u32_conv_to_encoding_strict): Add new wrapper
  function.

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -64,16 +64,17 @@ along with Octave; see the file COPYING.
 #include "resource-manager.h"
 
 #include "file-editor-tab.h"
 #include "file-editor.h"
 #include "octave-txt-lexer.h"
 #include "marker.h"
 
 #include "file-ops.h"
+#include "uniconv-wrappers.h"
 
 #include "bp-table.h"
 #include "call-stack.h"
 #include "interpreter-private.h"
 #include "interpreter.h"
 #include "oct-map.h"
 #include "octave-qt-link.h"
 #include "ov-usr-fcn.h"
@@ -2316,17 +2317,42 @@ namespace octave
                                tr ("Octave Editor"),
                                tr ("The current encoding %1\n"
                                    "can not be applied.\n\n"
                                    "Please select another one!").arg (_encoding));
 
         return nullptr;
       }
 
-    if (! codec->canEncode (_edit_area->text ()))
+    QString editor_text = _edit_area->text ();
+    bool can_encode = codec->canEncode (editor_text);
+
+    // We cannot rely on QTextCodec::canEncode because it uses the
+    // ConverterState of convertFromUnicode which isn't updated by some
+    // implementations.
+    if (can_encode)
+      {
+        std::u32string u32_str = editor_text.toStdU32String ();
+        const uint32_t *src = reinterpret_cast<const uint32_t *>
+                              (u32_str.c_str ());
+
+        size_t length;
+        char *res_str =
+          octave_u32_conv_to_encoding_strict (_encoding.toStdString ().c_str (),
+                                              src, u32_str.length (), &length);
+        if (! res_str)
+          {
+            if (errno == EILSEQ)
+              can_encode = false;
+          }
+        else
+          ::free (static_cast<void *> (res_str));
+      }
+
+    if (! can_encode)
       {
         QMessageBox::critical (nullptr,
                                tr ("Octave Editor"),
                                tr ("The current editor contents can not be encoded\n"
                                    "with the selected encoding %1.\n"
                                    "Using it would result in data loss!\n\n"
                                    "Please select another one!").arg (_encoding));
 
diff --git a/liboctave/wrappers/uniconv-wrappers.c b/liboctave/wrappers/uniconv-wrappers.c
--- a/liboctave/wrappers/uniconv-wrappers.c
+++ b/liboctave/wrappers/uniconv-wrappers.c
@@ -49,16 +49,24 @@ char *
 octave_u8_conv_to_encoding (const char *tocode, const uint8_t *src,
                             size_t srclen, size_t *lengthp)
 {
   return u8_conv_to_encoding (tocode, iconveh_question_mark,
                               src, srclen, NULL, NULL, lengthp);
 }
 
 char *
+octave_u32_conv_to_encoding_strict (const char *tocode, const uint32_t *src,
+                            size_t srclen, size_t *lengthp)
+{
+  return u32_conv_to_encoding (tocode, iconveh_error,
+                              src, srclen, NULL, NULL, lengthp);
+}
+
+char *
 u8_from_wchar (const wchar_t *wc)
 {
   // Convert wide char array to multibyte UTF-8 char array
   // The memory at the returned pointer must be freed after use.
 
   size_t srclen = wcslen (wc) * sizeof (wchar_t);
   const char *src = (const char *) wc;
 
diff --git a/liboctave/wrappers/uniconv-wrappers.h b/liboctave/wrappers/uniconv-wrappers.h
--- a/liboctave/wrappers/uniconv-wrappers.h
+++ b/liboctave/wrappers/uniconv-wrappers.h
@@ -42,16 +42,20 @@ extern uint8_t *
 octave_u8_conv_from_encoding (const char *fromcode, const char *src,
                               size_t srclen, size_t *lengthp);
 
 extern char *
 octave_u8_conv_to_encoding (const char *tocode, const uint8_t *src,
                             size_t srclen, size_t *lengthp);
 
 extern char *
+octave_u32_conv_to_encoding_strict (const char *tocode, const uint32_t *src,
+                                    size_t srclen, size_t *lengthp);
+
+extern char *
 u8_from_wchar (const wchar_t *wc);
 
 extern wchar_t *
 u8_to_wchar (const char *u8_char);
 
 #if defined __cplusplus
 }
 #endif
