# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1445449502 -7200
#      Wed Oct 21 19:45:02 2015 +0200
# Node ID 2b0886f2c186952250f8344c6d894bd0dc134577
# Parent  31219c56874f6156b19b5a07baba45e7c115f6de
add possibility to hide columns of workspace view

* workspace-view.cc (workspace_view): add a context menu top the header,
  initialize string lists with entries and settings keys and signal mapper;
  (~workspace_view): delete signal mapper;
  (header_contextmenu_requested): new header context menu;
  (toggle_header): common slot for all context menu entries;
  (notice_settings): get visibility of columns from settings file;

* workspace-view.h: new header context menu, new slot for its entries,
  new string lists for entries and settings file keys, new signal mapper

diff --git a/libgui/src/workspace-view.cc b/libgui/src/workspace-view.cc
--- a/libgui/src/workspace-view.cc
+++ b/libgui/src/workspace-view.cc
@@ -32,16 +32,17 @@ along with Octave; see the file COPYING.
 #include <QLineEdit>
 #include <QHeaderView>
 #include <QHBoxLayout>
 #include <QVBoxLayout>
 #include <QPushButton>
 #include <QMenu>
 #include <QLabel>
 #include <QCompleter>
+#include <QSignalMapper>
 
 #include "workspace-view.h"
 #include "resource-manager.h"
 #include "symtab.h"
 
 workspace_view::workspace_view (QWidget *p)
   : octave_dock_widget (p), view (new QTableView (this))
 {
@@ -111,16 +112,21 @@ workspace_view::workspace_view (QWidget 
   view->horizontalHeader ()->setMovable (true);
   view->horizontalHeader ()->setSortIndicator (
     settings->value ("workspaceview/sort_by_column",0).toInt (),
     static_cast<Qt::SortOrder>
     (settings->value ("workspaceview/sort_order", Qt::AscendingOrder).toUInt ())
   );
   view->horizontalHeader ()->setSortIndicatorShown (true);
 
+  view->horizontalHeader ()->setContextMenuPolicy (Qt::CustomContextMenu);
+  connect (view->horizontalHeader (),
+           SIGNAL (customContextMenuRequested (const QPoint &)),
+           this, SLOT (header_contextmenu_requested (const QPoint &)));
+
   // Init state of the filter
   _filter->addItems (settings->value ("workspaceview/mru_list").toStringList ());
 
   bool filter_state =
     settings->value ("workspaceview/filter_active", false).toBool ();
   _filter_checkbox->setChecked (filter_state);
   filter_activate (filter_state);
 
@@ -157,16 +163,19 @@ workspace_view::~workspace_view (void)
   settings->setValue ("workspaceview/filter_shown", _filter_shown);
 
   QStringList mru;
   for (int i = 0; i < _filter->count (); i++)
     mru.append (_filter->itemText (i));
   settings->setValue ("workspaceview/mru_list", mru);
 
   settings->sync ();
+
+  if (_sig_mapper)
+    delete _sig_mapper;
 }
 
 void workspace_view::setModel (workspace_model *model)
 {
   _filter_model.setSourceModel (model);
   _filter_model.setFilterKeyColumn(0);
 
   view->setModel (&_filter_model);
@@ -227,16 +236,56 @@ workspace_view::get_var_name (QModelInde
   index = index.sibling (index.row (), 0);
   QAbstractItemModel *m = view->model ();
   QMap<int, QVariant> item_data = m->itemData (index);
 
   return item_data[0].toString ();
 }
 
 void
+workspace_view::header_contextmenu_requested (const QPoint& mpos)
+{
+  QMenu menu (this);
+
+  if (_sig_mapper)
+    delete _sig_mapper;
+  _sig_mapper = new QSignalMapper (this);
+
+  QSettings *settings = resource_manager::get_settings ();
+
+  for (int i = 0; i < _columns_shown.size (); i++)
+    {
+      QAction *action = menu.addAction (_columns_shown.at (i),
+                                        _sig_mapper, SLOT (map ()));
+      _sig_mapper->setMapping(action, i);
+      action->setCheckable (true);
+      action->setChecked (
+            settings->value (_columns_shown_keys.at (i),true).toBool ());
+    }
+
+  connect (_sig_mapper, SIGNAL (mapped (int)), this, SLOT (toggle_header (int)));
+
+  menu.exec (view->mapToGlobal (mpos));
+}
+
+void
+workspace_view::toggle_header (int col)
+{
+  QSettings *settings = resource_manager::get_settings ();
+
+  QString key = _columns_shown_keys.at (col);
+  bool shown = settings->value (key,true).toBool ();
+
+  view->setColumnHidden (col + 1, shown);
+
+  settings->setValue (key, ! shown);
+  settings->sync ();
+}
+
+void
 workspace_view::contextmenu_requested (const QPoint& qpos)
 {
   QMenu menu (this);
 
   QModelIndex index = view->indexAt (qpos);
 
   // if it isnt Local, Glocal etc, allow the ctx menu
   if (index.isValid () && index.column () == 0)
@@ -396,35 +445,56 @@ workspace_view::handle_model_changed (vo
   for (int i = view_previous_row_count; i < new_row_count; i++)
     view->setRowHeight (i, row_height);
   view_previous_row_count = new_row_count;
 }
 
 void
 workspace_view::notice_settings (const QSettings *settings)
 {
+  int i;
+
   _model->notice_settings (settings); // update colors of model first
 
+  for (i = 0; i < _columns_shown_keys.size (); i++)
+    {
+      view->setColumnHidden ( i + 1,
+            ! settings->value (_columns_shown_keys.at (i),true).toBool ());
+    }
+
   QString tool_tip;
 
   if (!settings->value ("workspaceview/hide_tool_tips",false).toBool ())
     {
       tool_tip  = QString (tr ("View the variables in the active workspace.<br>"));
       tool_tip += QString (tr ("Colors for variable attributes:"));
-      for (int i = 0; i < resource_manager::storage_class_chars ().length (); i++)
+      for (i = 0; i < resource_manager::storage_class_chars ().length (); i++)
         {
           tool_tip +=
             QString ("<div style=\"background-color:%1;color:#000000\">%2</div>")
             .arg (_model->storage_class_color (i).name ())
             .arg (resource_manager::storage_class_names ().at (i));
         }
     }
 
   setToolTip (tool_tip);
 
+  _columns_shown = QStringList ();
+  _columns_shown.append (tr ("Class"));
+  _columns_shown.append (tr ("Dimension"));
+  _columns_shown.append (tr ("Value"));
+  _columns_shown.append (tr ("Attribute"));
+
+  _columns_shown_keys = QStringList ();
+  _columns_shown_keys.append ("workspaceview/show_class");
+  _columns_shown_keys.append ("workspaceview/show_dimension");
+  _columns_shown_keys.append ("workspaceview/show_value");
+  _columns_shown_keys.append ("workspaceview/show_attribute");
+
+  _sig_mapper = 0;
 }
 
 void
 workspace_view::copyClipboard ()
 {
   if (view->hasFocus ())
     handle_contextmenu_copy ();
 }
diff --git a/libgui/src/workspace-view.h b/libgui/src/workspace-view.h
--- a/libgui/src/workspace-view.h
+++ b/libgui/src/workspace-view.h
@@ -25,16 +25,17 @@ along with Octave; see the file COPYING.
 #define octave_workspace_view_h 1
 
 #include <QItemDelegate>
 #include <QTableView>
 #include <QSemaphore>
 #include <QComboBox>
 #include <QSortFilterProxyModel>
 #include <QCheckBox>
+#include <QSignalMapper>
 
 #include "octave-dock-widget.h"
 #include "workspace-model.h"
 
 class workspace_view : public octave_dock_widget
 {
   Q_OBJECT
 
@@ -67,16 +68,19 @@ protected slots:
   void handle_contextmenu_copy (void);
   void handle_contextmenu_copy_value (void);
   void handle_contextmenu_rename (void);
   void handle_contextmenu_disp (void);
   void handle_contextmenu_plot (void);
   void handle_contextmenu_stem (void);
   void handle_contextmenu_filter (void);
 
+  void header_contextmenu_requested (const QPoint& mpos);
+  void toggle_header (int column);
+
   void handle_model_changed (void);
 
   void copyClipboard ();
   void selectAll ();
 
   void filter_update (const QString& expression);
   void filter_activate (bool enable);
   void update_filter_history ();
@@ -92,11 +96,15 @@ private:
 
   QSortFilterProxyModel _filter_model;
   QCheckBox *_filter_checkbox;
   QComboBox *_filter;
   QWidget *_filter_widget;
   bool _filter_shown;
 
   enum { MaxFilterHistory = 10 };
+
+  QStringList _columns_shown;
+  QStringList _columns_shown_keys;
+  QSignalMapper *_sig_mapper;
 };
 
 #endif
