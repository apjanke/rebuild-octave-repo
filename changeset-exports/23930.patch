# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1503476956 -7200
#      Wed Aug 23 10:29:16 2017 +0200
# Node ID 174b6afa7e7f32ce7f8259f948ecec3af6468b0c
# Parent  20c83f6191028871b7ebd568cb93485cdee45244
Fix regression in subplot alignment (bugs #51717 and #51731)

* subplot.m: new call form "subplot(R,C,IDX,HAX)" to turn HAX into a subplot.
 Store the {rows,cols,index} arguments in the axes appdata for further use.
* newplot.m: if necessary, call subplot to reinstall listeners after resetting
 the axes

diff --git a/scripts/plot/util/newplot.m b/scripts/plot/util/newplot.m
--- a/scripts/plot/util/newplot.m
+++ b/scripts/plot/util/newplot.m
@@ -193,18 +193,23 @@ function hax = newplot (hsave = [])
         delete (kids);
       else
         if (isprop (ca, "__plotyy_axes__"))
           ## Hack for bug #44246.  There is no way to reset or remove a
           ## property created with addproperty short of deleting the object.
           delete (ca);
           ca = axes ();
         elseif (do_reset)
+          rcn = getappdata (ca, "__subplotrcn__");
           delete (allchild (ca));
           reset (ca);
+          ## Reinstall listeners for subplot
+          if (! isempty (rcn))
+            subplot (rcn{:}, ca)
+          endif
         endif
       endif
   endswitch
 
   ## Reset line and color styles when hold is not on
   if (! strcmp (anp, "add"))
     set (ca, "colororderindex", 1, "linestyleorderindex", 1);
   endif
diff --git a/scripts/plot/util/subplot.m b/scripts/plot/util/subplot.m
--- a/scripts/plot/util/subplot.m
+++ b/scripts/plot/util/subplot.m
@@ -13,26 +13,31 @@
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} subplot (@var{rows}, @var{cols}, @var{index})
+## @deftypefnx {} {} subplot (@var{rows}, @var{cols}, @var{index}, @var{hax})
 ## @deftypefnx {} {} subplot (@var{rcn})
 ## @deftypefnx {} {} subplot (@var{hax})
 ## @deftypefnx {} {} subplot (@dots{}, "align")
 ## @deftypefnx {} {} subplot (@dots{}, "replace")
 ## @deftypefnx {} {} subplot (@dots{}, "position", @var{pos})
 ## @deftypefnx {} {} subplot (@dots{}, @var{prop}, @var{val}, @dots{})
 ## @deftypefnx {} {@var{hax} =} subplot (@dots{})
 ## Set up a plot grid with @var{rows} by @var{cols} subwindows and set the
 ## current axes for plotting (@code{gca}) to the location given by @var{index}.
 ##
+## If an axes handle @var{hax} is provided after the (@var{rows}, @var{cols},
+## @var{index}) arguments, the corresponding axes is turned into a
+## subplot.
+##
 ## If only one numeric argument is supplied, then it must be a three digit
 ## value specifying the number of rows in digit 1, the number of columns in
 ## digit 2, and the plot index in digit 3.
 ##
 ## The plot index runs row-wise; First, all columns in a row are numbered
 ## and then the next row is filled.
 ##
 ## For example, a plot with 2x3 grid will have plot indices running as follows:
@@ -93,29 +98,37 @@
 ## Adapted-By: jwe
 
 function h = subplot (varargin)
 
   align_axes = false;
   replace_axes = false;
   have_position = false;
   initial_args_decoded = false;
+  make_subplot = false;
+  hsubplot = [];
 
   if (nargin >= 3)
     ## R, C, N?
     arg1 = varargin{1};
     arg2 = varargin{2};
     arg3 = varargin{3};
     if (   isnumeric (arg1) && isscalar (arg1)
         && isnumeric (arg2) && isscalar (arg2)
         && isnumeric (arg3))
       rows = arg1;
       cols = arg2;
       index = arg3;
-      varargin(1:3) = [];
+      if (nargin > 3 && isaxes (varargin{4}))
+        make_subplot = true;
+        hsubplot = varargin{4};
+        varargin(1:4) = [];
+      else
+        varargin(1:3) = [];
+      endif
       initial_args_decoded = true;
     endif
   endif
 
   if (! initial_args_decoded && nargin > 1)
     ## check for "position", pos, ...
     if (strcmpi (varargin{1}, "position"))
       arg = varargin{2};
@@ -206,79 +219,87 @@ function h = subplot (varargin)
     else
       ## Position is specified by the user.
       li = zeros (1,4);
       align_axes = true;
     endif
 
     set (cf, "nextplot", "add");
 
-    found = false;
-    kids = get (cf, "children");
-    for child = kids(:)'
-      ## Check whether this child is still valid; this might not be the
-      ## case anymore due to the deletion of previous children (due to
-      ## "deletefcn" callback or for legends/colorbars that are deleted
-      ## with their corresponding axes).
-      if (! ishandle (child))
-        continue;
-      endif
-      if (strcmp (get (child, "type"), "axes"))
-        ## Skip legend and colorbar objects.
-        if (any (strcmp (get (child, "tag"), {"legend", "colorbar"})))
+    if (! make_subplot)
+      found = false;
+      kids = get (cf, "children");
+      for child = kids(:)'
+        ## Check whether this child is still valid; this might not be the
+        ## case anymore due to the deletion of previous children (due to
+        ## "deletefcn" callback or for legends/colorbars that are deleted
+        ## with their corresponding axes).
+        if (! ishandle (child))
           continue;
         endif
+        if (strcmp (get (child, "type"), "axes"))
+          ## Skip legend and colorbar objects.
+          if (any (strcmp (get (child, "tag"), {"legend", "colorbar"})))
+            continue;
+          endif
 
-        if (isappdata (child, "__subplotposition__"))
-          objpos = getappdata (child, "__subplotposition__");
-        else
-          objpos = get (child, "position");
-        endif
-        if (all (abs (objpos - pos) < eps) && ! replace_axes)
-          ## If the new axes are in exactly the same position
-          ## as an existing axes object, or if they share the same
-          ## appdata "__subplotposition__", use the existing axes.
-          found = true;
-          hsubplot = child;
-        else
-          ## If the new axes overlap an old axes object, delete the old axes.
-          objpos = get (child, "position");
+          if (isappdata (child, "__subplotposition__"))
+            objpos = getappdata (child, "__subplotposition__");
+          else
+            objpos = get (child, "position");
+          endif
+          if (all (abs (objpos - pos) < eps) && ! replace_axes)
+            ## If the new axes are in exactly the same position
+            ## as an existing axes object, or if they share the same
+            ## appdata "__subplotposition__", use the existing axes.
+            found = true;
+            hsubplot = child;
+          else
+            ## If the new axes overlap an old axes object, delete the old axes.
+            objpos = get (child, "position");
 
-          x0 = pos(1);
-          x1 = x0 + pos(3);
-          y0 = pos(2);
-          y1 = y0 + pos(4);
-          objx0 = objpos(1);
-          objx1 = objx0 + objpos(3);
-          objy0 = objpos(2);
-          objy1 = objy0 + objpos(4);
-          if (! (x0 >= objx1 || x1 <= objx0 || y0 >= objy1 || y1 <= objy0))
-            delete (child);
+            x0 = pos(1);
+            x1 = x0 + pos(3);
+            y0 = pos(2);
+            y1 = y0 + pos(4);
+            objx0 = objpos(1);
+            objx1 = objx0 + objpos(3);
+            objy0 = objpos(2);
+            objy1 = objy0 + objpos(4);
+            if (! (x0 >= objx1 || x1 <= objx0 || y0 >= objy1 || y1 <= objy0))
+              delete (child);
+            endif
           endif
         endif
-      endif
-    endfor
+      endfor
+    else
+      found = true;
+    endif
 
-    if (found)
+    if (found && ! make_subplot)
       ## Switch to existing subplot and set requested properties
       set (cf, "currentaxes", hsubplot);
       if (! isempty (varargin))
         set (hsubplot, varargin{:});
       endif
     else
-      hsubplot = axes ("box", "off",
-                       "activepositionproperty", "position",
-                       "position", pos, "looseinset", li,
-                       varargin{:});
+      pval = [{"activepositionproperty", "position", ...
+               "position", pos, "looseinset", li} varargin];
+      if (! make_subplot)
+        hsubplot = axes (pval{:});
+      else
+        set (hsubplot, pval{:})
+      endif
 
       if (! align_axes)
         ## base position (no ticks, no annotation, no cumbersome neighbor)
         setappdata (hsubplot, "__subplotposition__", pos);
         ## max outerposition
         setappdata (hsubplot, "__subplotouterposition__", opos);
+        setappdata (hsubplot, "__subplotrcn__", {rows, cols, index});
         addlistener (hsubplot, "outerposition", @subplot_align);
         addlistener (hsubplot, "xaxislocation", @subplot_align);
         addlistener (hsubplot, "yaxislocation", @subplot_align);
         addlistener (hsubplot, "position", {@subplot_align, true});
         subplot_align (hsubplot);
       endif
 
     endif
