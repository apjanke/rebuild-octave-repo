# HG changeset patch
# User jwe
# Date 1095294703 0
#      Thu Sep 16 00:31:43 2004 +0000
# Node ID 6690d8cd9beec8fb9701614d646bb1586696b281
# Parent  9a7ec88c8b5ef71a28bfd8c454949eec46f471b3
[project @ 2004-09-16 00:31:42 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2004-09-15  John W. Eaton  <jwe@octave.org>
 
+	* ov.cc (octave_value::assign): Handle subsref for containers.
+	* oct-lvalue.cc (octave_lvale::value): Likewise.
+
 	* DLD-FUNCTIONS/sort.cc (mx_sort): Return octave_value, not
 	octave_value list.
 
 2004-09-15  David Bateman  <dbateman@free.fr>
 
 	* ov.cc (octave_value::octave_value (const ArrayN<char>&, bool)):
 	New Constructor .
 	* ov.h: Provide decl.
diff --git a/src/DLD-FUNCTIONS/sort.cc b/src/DLD-FUNCTIONS/sort.cc
--- a/src/DLD-FUNCTIONS/sort.cc
+++ b/src/DLD-FUNCTIONS/sort.cc
@@ -648,17 +648,17 @@ The algorithm used in @code{sort} is opt
 ordered lists.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
   sortmode smode = ASCENDING;
 
-  if (nargin < 1 && nargin > 3)
+  if (nargin < 1 || nargin > 3)
     {
       print_usage ("sort");
       return retval;
     }
 
   bool return_idx = nargout > 1;
 
   octave_value arg = args(0);
diff --git a/src/oct-lvalue.cc b/src/oct-lvalue.cc
--- a/src/oct-lvalue.cc
+++ b/src/oct-lvalue.cc
@@ -60,13 +60,35 @@ octave_lvalue::do_unary_op (octave_value
   octave_value tmp (idx.empty ()
 		    ? val->do_non_const_unary_op (op)
 		    : val->do_non_const_unary_op (op, type, idx));
 
   if (! (error_state || (chg_fcn && chg_fcn () < 0)))
     *val = tmp;
 }
 
+octave_value
+octave_lvalue::value (void)
+{
+  octave_value retval;
+
+  if (idx.empty ())
+    retval = *val;
+  else
+    {
+      if (val->is_constant ())
+	retval = val->subsref (type, idx);
+      else
+	{
+	  octave_value_list t = val->subsref (type, idx, 1);
+	  if (t.length () > 0)
+	    retval = t(0);	      
+	}
+    }
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/oct-lvalue.h b/src/oct-lvalue.h
--- a/src/oct-lvalue.h
+++ b/src/oct-lvalue.h
@@ -77,18 +77,17 @@ public:
   void assign (octave_value::assign_op, const octave_value&);
 
   void set_index (const std::string& t, const std::list<octave_value_list>& i);
 
   void clear_index (void) { type = std::string (); idx.clear (); }
 
   void do_unary_op (octave_value::unary_op op);
 
-  octave_value value (void)
-    { return idx.empty () ? *val : val->subsref (type, idx); }
+  octave_value value (void);
 
   const octave_value *object (void) const { return val; }
 
 private:
 
   octave_value *val;
 
   std::string type;
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -921,17 +921,25 @@ octave_value::assign (assign_op op, cons
   octave_value t_rhs = rhs;
 
   if (op != op_asn_eq)
     {
       // XXX FIXME XXX -- only do the following stuff if we can't find
       // a specific function to call to handle the op= operation for
       // the types we have.
 
-      octave_value t = subsref (type, idx);
+      octave_value t;
+      if (is_constant ())
+	t = subsref (type, idx);
+      else
+	{
+	  octave_value_list tl = subsref (type, idx, 1);
+	  if (tl.length () > 0)
+	    t = tl(0);
+	}
 
       if (! error_state)
 	{
 	  binary_op binop = op_eq_to_binary_op (op);
 
 	  if (! error_state)
 	    t_rhs = do_binary_op (binop, t, rhs);
 	}
diff --git a/test/octave.test/matrix/sort-3.m b/test/octave.test/matrix/sort-3.m
--- a/test/octave.test/matrix/sort-3.m
+++ b/test/octave.test/matrix/sort-3.m
@@ -1,1 +1,1 @@
-sort (1, 2, 3)
+sort (1, 2, 3, 4)
