# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1502402147 25200
#      Thu Aug 10 14:55:47 2017 -0700
# Node ID 9ada3f4f4e2887455e7512ae1fb71dc43505b6a3
# Parent  9b39ec2e09526f6309392a71753157c566c3c5d3
audioinfo: return absolute file name in info structure

* audioread.cc (Faudioinfo): Return absolute file name of file argument
in audio info structure.  Check for file existence to differentiate from
failure to read audio format with sndfile.

diff --git a/libinterp/dldfcn/audioread.cc b/libinterp/dldfcn/audioread.cc
--- a/libinterp/dldfcn/audioread.cc
+++ b/libinterp/dldfcn/audioread.cc
@@ -26,16 +26,18 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <algorithm>
 #include <map>
 #include <string>
 
 #include "dMatrix.h"
 #include "dRowVector.h"
+#include "file-ops.h"
+#include "file-stat.h"
 #include "oct-locbuf.h"
 #include "unwind-prot.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "errwarn.h"
 #include "ov.h"
 #include "ovl.h"
@@ -500,30 +502,36 @@ Audio bitrate.  Unused, only present for
 {
 #if defined (HAVE_SNDFILE)
 
   if (args.length () != 1)
     print_usage ();
 
   std::string filename = args(0).xstring_value ("audioinfo: FILENAME must be a string");
 
+  octave::sys::file_stat fs (filename);
+  if (! fs.exists ())
+    error ("audioinfo: FILENAME '%s' not found", filename.c_str ());
+
   SF_INFO info;
   info.format = 0;
   SNDFILE *file = sf_open (filename.c_str (), SFM_READ, &info);
 
   if (! file)
-    error ("audioinfo: failed to open file %s", filename.c_str ());
+    error ("audioinfo: failed to open file '%s'", filename.c_str ());
 
   octave::unwind_protect frame;
 
   frame.add_fcn (safe_close, file);
 
   octave_scalar_map result;
 
-  result.assign ("Filename", filename);
+  std::string full_name = octave::sys::canonicalize_file_name (filename);
+
+  result.assign ("Filename", full_name);
   result.assign ("CompressionMethod", "");
   result.assign ("NumChannels", info.channels);
   result.assign ("SampleRate", info.samplerate);
   result.assign ("TotalSamples", info.frames);
 
   double dframes = info.frames;
   double drate = info.samplerate;
   result.assign ("Duration", dframes / drate);
