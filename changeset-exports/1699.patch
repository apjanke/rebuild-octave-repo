# HG changeset patch
# User jwe
# Date 820982417 0
#      Sun Jan 07 02:40:17 1996 +0000
# Node ID 0c6d3b73bf69f17e363d2c5dba977578957aad11
# Parent  0892abda7553a8178fe53b679d8d96a0aac5fb86
[project @ 1996-01-07 02:36:50 by jwe]

diff --git a/liboctave/CColVector.cc b/liboctave/CColVector.cc
--- a/liboctave/CColVector.cc
+++ b/liboctave/CColVector.cc
@@ -73,33 +73,33 @@ ComplexColumnVector::operator != (const 
 }
 
 // destructive insert/delete/reorder operations
 
 ComplexColumnVector&
 ComplexColumnVector::insert (const ColumnVector& a, int r)
 {
   int a_len = a.length ();
-  if (r < 0 || r + a_len - 1 > length ())
+  if (r < 0 || r + a_len > length ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
   for (int i = 0; i < a_len; i++)
     elem (r+i) = a.elem (i);
 
   return *this;
 }
 
 ComplexColumnVector&
 ComplexColumnVector::insert (const ComplexColumnVector& a, int r)
 {
   int a_len = a.length ();
-  if (r < 0 || r + a_len - 1 > length ())
+  if (r < 0 || r + a_len > length ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
   for (int i = 0; i < a_len; i++)
     elem (r+i) = a.elem (i);
 
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -131,71 +131,76 @@ ComplexMatrix::operator != (const Comple
 
 // destructive insert/delete/reorder operations
 
 ComplexMatrix&
 ComplexMatrix::insert (const Matrix& a, int r, int c)
 {
   int a_nr = a.rows ();
   int a_nc = a.cols ();
-  if (r < 0 || r + a_nr - 1 > rows () || c < 0 || c + a_nc - 1 > cols ())
+
+  if (r < 0 || r + a_nr > rows () || c < 0 || c + a_nc > cols ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
   for (int j = 0; j < a_nc; j++)
     for (int i = 0; i < a_nr; i++)
       elem (r+i, c+j) = a.elem (i, j);
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::insert (const RowVector& a, int r, int c)
 {
   int a_len = a.length ();
-  if (r < 0 || r >= rows () || c < 0 || c + a_len - 1 > cols ())
+  if (r < 0 || r >= rows () || c < 0 || c + a_len > cols ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
   for (int i = 0; i < a_len; i++)
     elem (r, c+i) = a.elem (i);
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::insert (const ColumnVector& a, int r, int c)
 {
   int a_len = a.length ();
-  if (r < 0 || r + a_len - 1 > rows () || c < 0 || c >= cols ())
+  if (r < 0 || r + a_len > rows () || c < 0 || c >= cols ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
   for (int i = 0; i < a_len; i++)
     elem (r+i, c) = a.elem (i);
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::insert (const DiagMatrix& a, int r, int c)
 {
-  if (r < 0 || r + a.rows () - 1 > rows ()
-      || c < 0 || c + a.cols () - 1 > cols ())
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (r < 0 || r + a_nr > rows () || c < 0 || c + a_nc > cols ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
+  fill (0.0, r, c, r + a_nr - 1, c + a_nc - 1);
+
   for (int i = 0; i < a.length (); i++)
     elem (r+i, c+i) = a.elem (i, i);
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::insert (const ComplexMatrix& a, int r, int c)
@@ -203,54 +208,58 @@ ComplexMatrix::insert (const ComplexMatr
   Array2<Complex>::insert (a, r, c);
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::insert (const ComplexRowVector& a, int r, int c)
 {
   int a_len = a.length ();
-  if (r < 0 || r >= rows () || c < 0 || c + a_len - 1 > cols ())
+  if (r < 0 || r >= rows () || c < 0 || c + a_len > cols ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
   for (int i = 0; i < a_len; i++)
     elem (r, c+i) = a.elem (i);
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::insert (const ComplexColumnVector& a, int r, int c)
 {
   int a_len = a.length ();
-  if (r < 0 || r + a_len - 1 > rows () || c < 0 || c >= cols ())
+  if (r < 0 || r + a_len > rows () || c < 0 || c >= cols ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
   for (int i = 0; i < a_len; i++)
     elem (r+i, c) = a.elem (i);
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::insert (const ComplexDiagMatrix& a, int r, int c)
 {
-  if (r < 0 || r + a.rows () - 1 > rows ()
-      || c < 0 || c + a.cols () - 1 > cols ())
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (r < 0 || r + a_nr > rows () || c < 0 || c + a_nc > cols ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
+  fill (0.0, r, c, r + a_nr - 1, c + a_nc - 1);
+
   for (int i = 0; i < a.length (); i++)
     elem (r+i, c+i) = a.elem (i, i);
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::fill (double val)
diff --git a/liboctave/CRowVector.cc b/liboctave/CRowVector.cc
--- a/liboctave/CRowVector.cc
+++ b/liboctave/CRowVector.cc
@@ -73,33 +73,33 @@ ComplexRowVector::operator != (const Com
 }
 
 // destructive insert/delete/reorder operations
 
 ComplexRowVector&
 ComplexRowVector::insert (const RowVector& a, int c)
 {
   int a_len = a.length ();
-  if (c < 0 || c + a_len - 1 > length ())
+  if (c < 0 || c + a_len > length ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
   for (int i = 0; i < a_len; i++)
     elem (c+i) = a.elem (i);
 
   return *this;
 }
 
 ComplexRowVector&
 ComplexRowVector::insert (const ComplexRowVector& a, int c)
 {
   int a_len = a.length ();
-  if (c < 0 || c + a_len - 1 > length ())
+  if (c < 0 || c + a_len > length ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
   for (int i = 0; i < a_len; i++)
     elem (c+i) = a.elem (i);
 
diff --git a/liboctave/dColVector.cc b/liboctave/dColVector.cc
--- a/liboctave/dColVector.cc
+++ b/liboctave/dColVector.cc
@@ -64,17 +64,17 @@ ColumnVector::operator != (const ColumnV
 {
   return !(*this == a);
 }
 
 ColumnVector&
 ColumnVector::insert (const ColumnVector& a, int r)
 {
   int a_len = a.length ();
-  if (r < 0 || r + a_len - 1 > length ())
+  if (r < 0 || r + a_len > length ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
   for (int i = 0; i < a_len; i++)
     elem (r+i) = a.elem (i);
 
diff --git a/liboctave/dRowVector.cc b/liboctave/dRowVector.cc
--- a/liboctave/dRowVector.cc
+++ b/liboctave/dRowVector.cc
@@ -67,17 +67,17 @@ RowVector::operator != (const RowVector&
 {
   return !(*this == a);
 }
 
 RowVector&
 RowVector::insert (const RowVector& a, int c)
 {
   int a_len = a.length ();
-  if (c < 0 || c + a_len - 1 > length ())
+  if (c < 0 || c + a_len > length ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
   for (int i = 0; i < a_len; i++)
     elem (c+i) = a.elem (i);
 
