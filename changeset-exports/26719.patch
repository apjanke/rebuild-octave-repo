# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1549918587 0
#      Mon Feb 11 20:56:27 2019 +0000
# Node ID 91b152968ec1bbea9965188e5b7a9cd54b5b9dc7
# Parent  9b0335f4bc74a8f7a6ed657a1d35852dda8868f5
allow object.method@superclass (...) to work (bug #47680)

* ov-classdef.cc (octave_classdef_superclass_ref::call): Allow the
method portion of the superclass reference to be of the form object.method.

* test/bug-47680/bug-47680.tst, test/bug-47680/sub_bug47680.m,
test/bug-47680/super_bug47680.m, test/bug-47680/module.mk: New files.
* test/module.mk: Update.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1152,16 +1152,19 @@ public:
     ctx = get_class_context (meth_name, in_constructor);
 
     if (! ctx.ok ())
       error ("superclass calls can only occur in methods or constructors");
 
     std::string mname = m_method_name;
     std::string cname = m_class_name;
 
+    // CLS is the superclass.  The lookup_class function handles
+    // pkg.class names.
+
     cdef_class cls = lookup_class (cname);
 
     if (in_constructor)
       {
         if (! is_direct_superclass (cls, ctx))
           error ("`%s' is not a direct superclass of `%s'",
                  cname.c_str (), ctx.get_name ().c_str ());
 
@@ -1172,16 +1175,48 @@ public:
         octave_value sym = tw.varval (mname);
 
         cls.run_constructor (to_cdef_ref (sym), idx);
 
         retval(0) = sym;
       }
     else
       {
+        size_t pos = mname.find ('.');
+
+        cdef_object obj;
+
+        if (pos != std::string::npos)
+          {
+            // We are looking at obj.meth.
+
+            std::string oname = m_method_name.substr (0, pos);
+            mname = mname.substr (pos + 1);
+
+            octave_value tval = tw.varval (oname);
+
+            // FIXME: Can we only call superclass methods on the current
+            // object?  If so, and we are looking at something like
+            //
+            //   function meth (obj, ...)
+            //     obj.meth@superclass (...)
+            //
+            // Do we need to verify that the object that was passed to
+            // meth is the same as the object we find when looking up
+            // obj in the expression obj.meth?  If so, what is the right
+            // way to perform that check?
+
+            if (tval.is_classdef_object ())
+              {
+                octave_classdef *cdobj = tval.classdef_object_value ();
+
+                obj = cdobj->get_object ();
+              }
+          }
+
         if (mname != meth_name)
           error ("method name mismatch (`%s' != `%s')",
                  mname.c_str (), meth_name.c_str ());
 
         if (! is_strict_superclass (cls, ctx))
           error ("`%s' is not a superclass of `%s'",
                  cname.c_str (), ctx.get_name ().c_str ());
 
@@ -1197,18 +1232,19 @@ public:
         // go with option 2) for the time being.
 
         cdef_method meth = cls.find_method (meth_name, false);
 
         if (! meth.ok ())
           error ("no method `%s' found in superclass `%s'",
                  meth_name.c_str (), cname.c_str ());
 
-        retval = meth.execute (idx, nargout, true,
-                               meth_name);
+        retval = (obj.ok ()
+                  ? meth.execute (obj, idx, nargout, true, meth_name)
+                  : meth.execute (idx, nargout, true, meth_name));
       }
 
     return retval;
   }
 
 private:
   bool is_constructed_object (octave::tree_evaluator& tw,
                               const std::string& nm)
diff --git a/test/bug-47680/bug-47680.tst b/test/bug-47680/bug-47680.tst
new file mode 100644
--- /dev/null
+++ b/test/bug-47680/bug-47680.tst
@@ -0,0 +1,6 @@
+%!shared obj
+%! obj = sub_bug47680 ("foo");
+%!assert<47680> (obj.meth1 (), "foo:super:meth1:sub:meth1")
+%!assert<47680> (obj.meth2 (), "foo:super:meth2:sub:meth2")
+%!assert<47680> (obj.meth3 (), "foo:super:meth3:sub:meth3")
+%!assert<47680> (obj.meth4 (), "foo:super:meth4:sub:meth4")
diff --git a/test/bug-47680/module.mk b/test/bug-47680/module.mk
new file mode 100644
--- /dev/null
+++ b/test/bug-47680/module.mk
@@ -0,0 +1,6 @@
+bug_47680_TEST_FILES = \
+  %reldir%/bug-47680.tst \
+  %reldir%/sub_class47680.m \
+  %reldir%/super_class47680.m
+
+TEST_FILES += $(bug_47680_TEST_FILES)
diff --git a/test/bug-47680/sub_bug47680.m b/test/bug-47680/sub_bug47680.m
new file mode 100644
--- /dev/null
+++ b/test/bug-47680/sub_bug47680.m
@@ -0,0 +1,19 @@
+classdef sub_bug47680 < super_bug47680
+  methods
+    function obj = sub_bug47680 (x)
+      obj = obj@super_bug47680 (x);
+    endfunction
+    function r = meth1 (obj)
+      r = meth1@super_bug47680 (obj, "sub:meth1");
+    endfunction
+    function r = meth2 (obj)
+      r = obj.meth2@super_bug47680 ("sub:meth2");
+    endfunction
+    function r = meth3 (obj)
+      r = meth3@super_bug47680 (obj, "sub:meth3");
+    endfunction
+    function r = meth4 (obj)
+      r = obj.meth4@super_bug47680 ("sub:meth4");
+    endfunction
+  endmethods
+endclassdef
diff --git a/test/bug-47680/super_bug47680.m b/test/bug-47680/super_bug47680.m
new file mode 100644
--- /dev/null
+++ b/test/bug-47680/super_bug47680.m
@@ -0,0 +1,22 @@
+classdef super_bug47680
+  properties
+    tag;
+  end
+  methods
+    function obj = super_bug47680 (x)
+      obj.tag = x;
+    endfunction
+    function r = meth1 (obj, x)
+      r = [obj.tag ":super:meth1:" x];
+    endfunction
+    function r = meth2 (obj, x)
+      r = [obj.tag ":super:meth2:" x];
+    endfunction
+    function r = meth3 (obj, x)
+      r = [obj.tag ":super:meth3:" x];
+    endfunction
+    function r = meth4 (obj, x)
+      r = [obj.tag ":super:meth4:" x];
+    endfunction
+  endmethods
+endclassdef
diff --git a/test/module.mk b/test/module.mk
--- a/test/module.mk
+++ b/test/module.mk
@@ -58,16 +58,17 @@ DIRSTAMP_FILES += %reldir%/$(octave_dirs
 include %reldir%/bug-35448/module.mk
 include %reldir%/bug-35881/module.mk
 include %reldir%/bug-36025/module.mk
 include %reldir%/bug-38236/module.mk
 include %reldir%/bug-38691/module.mk
 include %reldir%/bug-41723/module.mk
 include %reldir%/bug-44940/module.mk
 include %reldir%/bug-46660/module.mk
+include %reldir%/bug-47680/module.mk
 include %reldir%/bug-49379/module.mk
 include %reldir%/bug-50014/module.mk
 include %reldir%/bug-50035/module.mk
 include %reldir%/bug-50716/module.mk
 include %reldir%/bug-51192/module.mk
 include %reldir%/bug-51532/module.mk
 include %reldir%/bug-51534/module.mk
 include %reldir%/bug-51599/module.mk
