# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1265785093 -3600
#      Wed Feb 10 07:58:13 2010 +0100
# Node ID 816b91eebe79f04ad7aedc17cfd3aaf5c12a9c9b
# Parent  ba373aea03d9742661a04802beba669046869b17
remove redundant test in bsxfun

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-02-10  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/bsxfun.cc (Fbsxfun): Remove redundant test. Add
+	explanation.
+
 2010-02-10  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base.h (octave_base_value::is_list): Remove.
 	* ov.h (octave_value::is_list): Remove.
 	* data.cc (Fislist): Remove.
 	* oct-stream.cc (printf_value_cache::printf_value_cache): Don't call
 	is_list.
 
diff --git a/src/DLD-FUNCTIONS/bsxfun.cc b/src/DLD-FUNCTIONS/bsxfun.cc
--- a/src/DLD-FUNCTIONS/bsxfun.cc
+++ b/src/DLD-FUNCTIONS/bsxfun.cc
@@ -342,20 +342,22 @@ dimensionality as the other matrix.\n\
         }
       else if (! (args(0).is_function_handle () || args(0).is_inline_function ()))
         error ("bsxfun: first argument must be a string or function handle");
 
       const octave_value A = args (1);
       const octave_value B = args (2);
 
       if (func.is_builtin_function () 
-          || (func.is_function_handle () 
-              && ! func.fcn_handle_value ()->is_overloaded () 
-              && ! A.is_object () && ! B.is_object ()))
+          || (func.is_function_handle () && ! A.is_object () && ! B.is_object ()))
         {
+          // This may break if the default behavior is overriden. But if you override
+          // arithmetic operators for builtin classes, you should expect mayhem
+          // anyway (constant folding etc). Querying is_overloaded may not be
+          // exactly what we need here.
           octave_function *fcn_val = func.function_value ();
           if (fcn_val)
             {
               octave_value tmp = maybe_optimized_builtin (fcn_val->name (), A, B);
               if (tmp.is_defined ())
                 retval(0) = tmp;
             }
         }
