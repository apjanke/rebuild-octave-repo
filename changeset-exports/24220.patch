# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1510217913 -3600
#      Thu Nov 09 09:58:33 2017 +0100
# Node ID 2b7532f237d795453033b54a87b08571a52bcacc
# Parent  3d96400df7132e98a63417017c1fc706515e9565
colormap.m: fix regression introduced with 547919e6aec1

diff --git a/scripts/image/colormap.m b/scripts/image/colormap.m
--- a/scripts/image/colormap.m
+++ b/scripts/image/colormap.m
@@ -94,18 +94,19 @@ function cmap = colormap (varargin)
 
   if (! isempty (hax))
     cf = hax;
   else
     cf = get (0, "currentfigure");
   endif
 
   if (nargin == 1)
-    map = tolower (varargin{1});
+    map = varargin{1};
     if (ischar (map))
+      map = tolower (map);
       if (strcmp (map, "default"))
         map = viridis (64);
       else
         try
           map = feval (map);
         catch
           error ("colormap: failed to set MAP <%s>", map);
         end_try_catch
diff --git a/scripts/plot/util/private/__ghostscript__.m b/scripts/plot/util/private/__ghostscript__.m
--- a/scripts/plot/util/private/__ghostscript__.m
+++ b/scripts/plot/util/private/__ghostscript__.m
@@ -108,16 +108,17 @@ function [gs_cmd, cleanup_cmd] = __ghost
       endif
     else
       error ("print:badpapersize", "__ghostscript__.m: invalid 'papersize'");
     endif
     gs_opts = sprintf ("%s -dFIXEDMEDIA", gs_opts);
     ## "pageoffset" is relative to the coordinates, not the BBox LLHC.
     str = sprintf ("%s [%d %d] %s", "<< /Margins [0 0] /.HWMargins [0 0 0 0] /PageOffset",
                    fix (opts.pageoffset), ">> setpagedevice");
+    str
     offset_ps = {"%!PS-Adobe-3.0", str, "%%EOF"};
     if (isfield (opts, "offsetfile"))
       offsetfile = opts.offsetfile;
       cleanup_cmd = "";
     else
       offsetfile = [tempname() ".ps"];
       if (dos_shell)
         cleanup_cmd = ["del " strrep(offsetfile, '/', '\')];
diff --git a/scripts/plot/util/private/__opengl_print__.m b/scripts/plot/util/private/__opengl_print__.m
--- a/scripts/plot/util/private/__opengl_print__.m
+++ b/scripts/plot/util/private/__opengl_print__.m
@@ -150,16 +150,18 @@ function opts = __opengl_print__ (opts)
 
   for n = 1:numel (pipeline)
     if (opts.debug)
       fprintf ("opengl-pipeline: '%s'\n", pipeline{n});
     endif
 
     if (strcmp (get (opts.figure, "visible"), "on"))
       ## Use toolkits "print_figure" method
+      disp (gl2ps_device{n})
+      disp (pipeline{n})
       drawnow (gl2ps_device{n}, ['|' pipeline{n}]);
     else
       ## Use OpenGL offscreen rendering with OSMesa
       __osmesa_print__ (opts.figure, ['|' pipeline{n}], gl2ps_device{n});
     endif
   endfor
 
   if (! isempty (strfind (opts.devopt, "standalone")))
