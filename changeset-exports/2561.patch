# HG changeset patch
# User jwe
# Date 849723993 0
#      Wed Dec 04 18:26:33 1996 +0000
# Node ID 96b57a9485b653a329c48c0b34cb3a72c1bebc0c
# Parent  6fa1ac46c980f8f0d36674b2f5041cb762927eac
[project @ 1996-12-04 18:26:33 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+Wed Dec  4 12:24:24 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dMatrix.cc (Qzval): Don't try to use same memory three times.
+	Create result using Complex constructor, not multiplication.
+	Order elements as they are returned from Eispack.
+
 Mon Dec  2 00:26:41 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-ieee.cc (octave_ieee_init): Kluge for octave_Inf on SCO.
 	Only include nan.h if SCO is defined.  Define _IEEE before
 	including it and undefine it afterward.
 	[SCO] (isnan): Don't mistake Inf as NaN.
 
 	* Array-idx.h (assign): Only resize if assignment conforms.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -3223,20 +3223,20 @@ Qzval (const Matrix& a, const Matrix& b)
 	    {
 	      Matrix jnk (a_nr, a_nr, 0.0);
 	      double *pjnk = jnk.fortran_vec ();
 
 	      ColumnVector alfr (a_nr);
 	      double *palfr = alfr.fortran_vec ();
 
 	      ColumnVector alfi (a_nr);
-	      double *palfi = alfr.fortran_vec ();
+	      double *palfi = alfi.fortran_vec ();
 
 	      ColumnVector beta (a_nr);
-	      double *pbeta = alfr.fortran_vec ();
+	      double *pbeta = beta.fortran_vec ();
 
 	      Matrix atmp = a;
 	      double *pa = atmp.fortran_vec ();
 
 	      Matrix btmp = b;
 	      double *pb = btmp.fortran_vec ();
 
 	      long matz = 0;
@@ -3254,32 +3254,30 @@ Qzval (const Matrix& a, const Matrix& b)
 		  F77_FCN (qzval, QZVAL) (a_nr, a_nr, pa, pb, palfr,
 					  palfi, pbeta, matz, pjnk);
 
 		  // Count and extract finite generalized eigenvalues.
 
 		  int cnt = 0;
 
 		  for (int i = 0; i < a_nr; i++)
-		    if (beta.elem (i) != 0)
+		    if (beta(i) != 0)
 		      cnt++;
 
-		  ComplexColumnVector cx (cnt, 0.0);
-
-		  Complex Im (0, 1);
+		  ComplexColumnVector cx (cnt);
+
+		  cnt = 0;
 
 		  for (int i = 0; i < a_nr; i++)
 		    {
-		      if (beta.elem (i) != 0)
+		      if (beta(i) != 0)
 			{
 			  // Finite generalized eigenvalue.
 
-			  cnt--;
-			  cx.elem (cnt) = (alfr.elem (i) + Im * alfi.elem (i))
-			    / beta.elem (i);
+			  cx(cnt++) = Complex (alfr(i), alfi(i)) / beta(i);
 			}
 		    }
 
 		  retval = cx;
 		}
 	      else
 		(*current_liboctave_error_handler)
 		  ("qzval: trouble in qzit, info = %d", info);
