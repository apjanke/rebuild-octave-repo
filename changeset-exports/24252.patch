# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1510773712 18000
#      Wed Nov 15 14:21:52 2017 -0500
# Node ID f8c263f961c1ad17d2114627964932695de9e6f2
# Parent  599fe61a5619b29a9e580dcaab6a0d249b633e4a
use shared_ptr to manage graphics_object and graphics_event objects

* graphics.in.h, graphics.cc (base_graphics_object::count): Delete
data member and all uses.
(graphics_object::rep): Manage with shared_ptr.
(class graphics_object): Use default constructor and destructor functions
where possible.

(base_graphics_event::count): Delete data member and all uses.
(graphics_event::rep): Manage with shared_ptr.
(class graphics_event): Use default constructor and destructor
functions where possible.
(graphics_event::create_callback_event,
graphics_Event::create_fucntion_event,
graphics_event::create_set_event): Don't set rep directly.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -10050,57 +10050,41 @@ private:
   bool notify_toolkit;
 };
 
 graphics_event
 graphics_event::create_callback_event (const graphics_handle& h,
                                        const std::string& name,
                                        const octave_value& data)
 {
-  graphics_event e;
-
-  e.rep = new callback_event (h, name, data);
-
-  return e;
+  return graphics_event (new callback_event (h, name, data));
 }
 
 graphics_event
 graphics_event::create_callback_event (const graphics_handle& h,
                                        const octave_value& cb,
                                        const octave_value& data)
 {
-  graphics_event e;
-
-  e.rep = new callback_event (h, cb, data);
-
-  return e;
+  return graphics_event (new callback_event (h, cb, data));
 }
 
 graphics_event
 graphics_event::create_function_event (graphics_event::event_fcn fcn,
                                        void *data)
 {
-  graphics_event e;
-
-  e.rep = new function_event (fcn, data);
-
-  return e;
+  return graphics_event (new function_event (fcn, data));
 }
 
 graphics_event
 graphics_event::create_set_event (const graphics_handle& h,
                                   const std::string& name,
                                   const octave_value& data,
                                   bool notify_toolkit)
 {
-  graphics_event e;
-
-  e.rep = new set_event (h, name, data, notify_toolkit);
-
-  return e;
+  return graphics_event (new set_event (h, name, data, notify_toolkit));
 }
 
 static void
 xset_gcbo (const graphics_handle& h)
 {
   graphics_object go = gh_manager::get_object (0);
   root_figure::properties& props =
     dynamic_cast<root_figure::properties&> (go.get_properties ());
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -26,16 +26,17 @@ along with Octave; see the file COPYING.
 #include "octave-config.h"
 
 #include <cctype>
 #include <cmath>
 
 #include <algorithm>
 #include <list>
 #include <map>
+#include <memory>
 #include <set>
 #include <sstream>
 #include <string>
 
 #include "caseless-str.h"
 
 #include "errwarn.h"
 #include "graphics-handle.h"
@@ -2400,17 +2401,17 @@ protected:
   }
 };
 
 class OCTINTERP_API base_graphics_object
 {
 public:
   friend class graphics_object;
 
-  base_graphics_object (void) : count (1), toolkit_flag (false) { }
+  base_graphics_object (void) : toolkit_flag (false) { }
 
   // No copying!
 
   base_graphics_object (const base_graphics_object&) = delete;
 
   base_graphics_object& operator = (const base_graphics_object&) = delete;
 
   virtual ~base_graphics_object (void) = default;
@@ -2637,56 +2638,35 @@ protected:
 
   virtual void update (const graphics_object& go, int id)
   {
     if (toolkit_flag)
       get_toolkit ().update (go, id);
   }
 
 protected:
-  // A reference count.
-  octave::refcount<int> count;
 
   // A flag telling whether this object is a valid object
   // in the backend context.
   bool toolkit_flag;
 };
 
 class OCTINTERP_API graphics_object
 {
 public:
+
   graphics_object (void) : rep (new base_graphics_object ()) { }
 
-  graphics_object (base_graphics_object *new_rep)
-    : rep (new_rep) { }
-
-  graphics_object (const graphics_object& obj) : rep (obj.rep)
-  {
-    rep->count++;
-  }
-
-  graphics_object& operator = (const graphics_object& obj)
-  {
-    if (rep != obj.rep)
-      {
-        if (--rep->count == 0)
-          delete rep;
-
-        rep = obj.rep;
-        rep->count++;
-      }
-
-    return *this;
-  }
-
-  ~graphics_object (void)
-  {
-    if (--rep->count == 0)
-      delete rep;
-  }
+  graphics_object (base_graphics_object *new_rep) : rep (new_rep) { }
+
+  graphics_object (const graphics_object& obj) = default;
+
+  graphics_object& operator = (const graphics_object& obj) = default;
+
+  ~graphics_object (void) = default;
 
   void mark_modified (void) { rep->mark_modified (); }
 
   void override_defaults (base_graphics_object& obj)
   {
     rep->override_defaults (obj);
   }
 
@@ -2874,17 +2854,18 @@ public:
   void finalize (void) { rep->finalize (*this); }
 
   void update (int id) { rep->update (*this, id); }
 
   void reset_default_properties (void)
   { rep->reset_default_properties (); }
 
 private:
-  base_graphics_object *rep;
+
+  std::shared_ptr<base_graphics_object> rep;
 };
 
 // ---------------------------------------------------------------------
 
 class OCTINTERP_API root_figure : public base_graphics_object
 {
 public:
 
@@ -5961,67 +5942,50 @@ set_property_in_handle (double handle, c
 // ---------------------------------------------------------------------
 
 class graphics_event;
 
 class
 base_graphics_event
 {
 public:
+
   friend class graphics_event;
 
-  base_graphics_event (void) : count (1) { }
+  base_graphics_event (void) = default;
 
   virtual ~base_graphics_event (void) = default;
 
   virtual void execute (void) = 0;
-
-private:
-  octave::refcount<int> count;
 };
 
 class
 graphics_event
 {
 public:
+
   typedef void (*event_fcn) (void*);
 
-  graphics_event (void) : rep (nullptr) { }
-
-  graphics_event (const graphics_event& e) : rep (e.rep)
-  {
-    rep->count++;
-  }
-
-  ~graphics_event (void)
-  {
-    if (rep && --rep->count == 0)
-      delete rep;
-  }
-
-  graphics_event& operator = (const graphics_event& e)
-  {
-    if (rep != e.rep)
-      {
-        if (rep && --rep->count == 0)
-          delete rep;
-
-        rep = e.rep;
-        if (rep)
-          rep->count++;
-      }
-
-    return *this;
-  }
+  graphics_event (void) = default;
+
+  graphics_event (base_graphics_event *new_rep) : rep (new_rep) { }
+
+  graphics_event (const graphics_event& e) = default;
+
+  ~graphics_event (void) = default;
+
+  graphics_event& operator = (const graphics_event& e) = default;
 
   void execute (void)
-  { if (rep) rep->execute (); }
-
-  bool ok (void) const
-  { return (rep != nullptr); }
+  {
+    if (ok ())
+      rep->execute ();
+  }
+
+  bool ok (void) const { return (rep != nullptr); }
 
   static graphics_event
   create_callback_event (const graphics_handle& h,
                          const std::string& name,
                          const octave_value& data = Matrix ());
 
   static graphics_event
   create_callback_event (const graphics_handle& h,
@@ -6031,17 +5995,18 @@ public:
   static graphics_event
   create_function_event (event_fcn fcn, void *data = nullptr);
 
   static graphics_event
   create_set_event (const graphics_handle& h, const std::string& name,
                     const octave_value& value,
                     bool notify_toolkit = true);
 private:
-  base_graphics_event *rep;
+
+  std::shared_ptr <base_graphics_event> rep;
 };
 
 class OCTINTERP_API gh_manager
 {
 protected:
 
   gh_manager (void);
 
