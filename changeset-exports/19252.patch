# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1413204044 -3600
#      Mon Oct 13 13:40:44 2014 +0100
# Node ID 79d4783a997809a49956edaf74eba4e9a167a272
# Parent  91a6f06c505220d269de3a0dab8cc898d03d91a0
bitcmp: fix bitwise complement for signed integers.

* general/bitcmp.m: current implementation of bitwise complement is broken
for signed integers because it uses intmax() as mask for bitxor().  This is
incorrect because the last bit of a signed integer is 0 and not 1.  Fix this
by bitpacking an array of true().  Also simplified input checking by using
sizeof, rather than multiple calls to isa().  Added tests for signed integers.

diff --git a/scripts/general/bitcmp.m b/scripts/general/bitcmp.m
--- a/scripts/general/bitcmp.m
+++ b/scripts/general/bitcmp.m
@@ -26,16 +26,17 @@
 ## bitcmp (7,4)
 ##   @result{} 8
 ## dec2bin (11)
 ##   @result{} 1011
 ## dec2bin (bitcmp (11, 6))
 ##   @result{} 110100
 ## @end group
 ## @end example
+##
 ## @seealso{bitand, bitor, bitxor, bitset, bitget, bitcmp, bitshift, bitmax}
 ## @end deftypefn
 
 ## Liberally based on the version by Kai Habel from octave-forge
 
 function C = bitcmp (A, k)
 
   if (nargin < 1 || nargin > 2)
@@ -47,37 +48,21 @@ function C = bitcmp (A, k)
   endif
 
   if (isa (A, "double"))
     bmax = bitmax;
     amax = ceil (log2 (bmax));
   elseif (isa (A, "single"))
     bmax = bitmax ("single");
     amax = ceil (log2 (bmax));
+  elseif (isinteger (A))
+    amax = sizeof (ones (1, class (A))) * 8;
+    bmax = bitpack (true (amax, 1), class (A));
   else
-    if (isa (A, "uint8"))
-      amax = 8;
-    elseif (isa (A, "uint16"))
-      amax = 16;
-    elseif (isa (A, "uint32"))
-      amax = 32;
-    elseif (isa (A, "uint64"))
-      amax = 64;
-    elseif (isa (A, "int8"))
-      amax = 8;
-    elseif (isa (A, "int16"))
-      amax = 16;
-    elseif (isa (A, "int32"))
-      amax = 32;
-    elseif (isa (A, "int64"))
-      amax = 64;
-    else
-      error ("bitcmp: invalid class %s", class (A));
-    endif
-    bmax = intmax (class (A));
+    error ("bitcmp: invalid class %s", class (A));
   endif
 
   if (nargin == 1 || k == amax)
     C = bitxor (A, bmax);
   else
     m = double (k);
     if (any (m < 1) || any (m > amax))
       error ("bitcmp: K must be in the range [1,%d]", amax);
@@ -126,8 +111,14 @@ endfunction
 %!test
 %! Amax = 64;
 %! Bmax = intmax ("uint64");
 %! A = bitshift (Bmax,-2);
 %! assert (bitcmp (A,Amax),bitor (bitshift (uint64 (1),Amax-1), bitshift (uint64 (1),Amax-2)));
 %! assert (bitcmp (A,Amax-1), bitshift (uint64 (1),Amax-2));
 %! assert (bitcmp (A,Amax-2), uint64 (0));
 
+## Do not forget signed integers
+%!assert (bitcmp (int8 (127)), int8 (-128)) # [1 1 1 1 1 1 1 0]
+%!assert (bitcmp (int8 (1)), int8 (-2))     # [1 0 0 0 0 0 0 0]
+%!assert (bitcmp (int8 (0)), int8 (-1))     # [0 0 0 0 0 0 0 0]
+%!assert (bitcmp (int8 (8)), int8 (-9))     # [0 0 0 1 0 0 0 0]
+
