# HG changeset patch
# User jwe
# Date 910817263 0
#      Wed Nov 11 20:47:43 1998 +0000
# Node ID 60a89a69a70a33096830ca684f9c98d1e33a5499
# Parent  bc3fdfe311a37299c0bc2528302b8541cf41b24d
[project @ 1998-11-11 20:47:03 by jwe]

diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -941,38 +941,69 @@ read_binary_data (istream& is, bool swap
       delete [] name;
       name = 0;
       break;
     }
 
   return name;
 }
 
+static string
+get_mat_data_input_line (istream& is)
+{
+  string retval;
+
+  bool have_data = false;
+
+  do
+    {
+      retval = "";
+
+      char c;
+      while (is.get (c))
+	{
+	  if (c == '\n')
+	    break;
+
+	  if (c == '%' || c == '#')
+	    {
+	      // skip to end of line
+	      while (is.get (c) && c != '\n')
+		;
+
+	      break;
+	    }
+
+	  if (! is.eof ())
+	    {
+	      if (! have_data && c != ' ' && c != '\t')
+		have_data = true;
+
+	      retval += c;
+	    }
+	}
+    }
+  while (! (have_data || is.eof ()));
+
+  return retval;
+}
+
 static void
 get_lines_and_columns (istream& is, const string& filename, int& nr, int& nc)
 {
   streampos pos = is.tellg ();
 
   int file_line_number = 0;
 
   nr = 0;
   nc = 0;
 
   while (is && ! error_state)
     {
-      string buf;
-
-      char c;
-      while (is.get (c))
-	{
-	  if (c == '\n')
-	    break;
-
-	  buf += c;
-	}
+      string buf = get_mat_data_input_line (is);
 
       file_line_number++;
 
       size_t beg = buf.find_first_not_of (" \t");
 
       int tmp_nc = 0;
 
       while (beg != NPOS)
@@ -1046,17 +1077,39 @@ read_mat_ascii_data (istream& is, const 
       int nc = 0;
 
       get_lines_and_columns (is, filename, nr, nc);
 
       if (! error_state && nr > 0 && nc > 0)
 	{
 	  Matrix tmp (nr, nc);
 
-	  is >> tmp;
+	  if (nr < 1 || nc < 1)
+	    is.clear (ios::badbit);
+	  else
+	    {
+	      double d;
+	      for (int i = 0; i < nr; i++)
+		{
+		  string buf = get_mat_data_input_line (is);
+
+		  istrstream tmp_stream (buf.c_str ());
+
+		  for (int j = 0; j < nc; j++)
+		    {
+		      tmp_stream >> d;
+		      if (is)
+			tmp.elem (i, j) = d;
+		      else
+			goto done;
+		    }
+		}
+	    }
+
+	done:
 
 	  if (is)
 	    {
 	      tc = tmp;
 
 	      name = strsave (varname.c_str ());
 	    }
 	  else
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -475,18 +475,16 @@ main (int argc, char **argv)
     }
 
 #if defined (HAVE_ATEXIT) || defined (HAVE_ON_EXIT)
   // Make sure we clean up when we exit.  Also allow users to register
   // functions.  If we don't have atexit or on_exit, we're going to
   // leave some junk files around if we exit abnormally.
 
   atexit (do_octave_atexit);
-
-  atexit (cleanup_tmp_files);
 #endif
 
   // These can come after command line args since none of them set any
   // defaults that might be changed by command line options.
 
   initialize_command_input ();
 
   if (! inhibit_startup_message)
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1669,17 +1669,17 @@ finish_colon_expression (tree_colon_expr
 // Make a constant.
 
 static tree_constant *
 make_constant (int op, token *tok_val)
 {
   int l = tok_val->line ();
   int c = tok_val->column ();
 
-  tree_constant *retval;
+  tree_constant *retval = 0;
 
   switch (op)
     {
     case NUM:
       {
 	octave_value tmp (tok_val->number ());
 	retval = new tree_constant (tmp, l, c);
 	retval->stash_original_text (tok_val->text_rep ());
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -162,41 +162,19 @@ main_loop (void)
   while (retval == 0);
 
   return retval;
 }
 
 // Fix up things before exiting.
 
 void
-clean_up_for_exit (void)
-{
-  command_editor::restore_terminal_state ();
-
-  // XXX FIXME XXX -- is this needed?  Can it cause any trouble?
-  raw_mode (0);
-
-  command_history::clean_up_and_save ();
-
-  close_plot_stream ();
-
-  close_files ();
-
-  cleanup_tmp_files ();
-
-  flush_octave_stdout ();
-
-  if (!quitting_gracefully && (interactive || forced_interactive))
-    cout << "\n";
-}
-
-void
 clean_up_and_exit (int retval)
 {
-  clean_up_for_exit ();
+  do_octave_atexit ();
 
   exit (retval == EOF ? 0 : retval);
 }
 
 DEFUN_TEXT (casesen, args, ,
   "casesen [on|off]")
 {
   octave_value_list retval;
@@ -504,24 +482,49 @@ DEFALIAS (shell_cmd, system);
 
 // XXX FIXME XXX -- this should really be static, but that causes
 // problems on some systems.
 SLStack<string> octave_atexit_functions;
 
 void
 do_octave_atexit (void)
 {
+  static bool deja_vu = false;
+
   while (! octave_atexit_functions.empty ())
     {
       octave_value_list fcn = octave_atexit_functions.pop ();
 
       feval (fcn, 0);
 
       flush_octave_stdout ();
     }
+
+  if (! deja_vu)
+    {
+      deja_vu = true;
+
+      command_editor::restore_terminal_state ();
+
+      // XXX FIXME XXX -- is this needed?  Can it cause any trouble?
+      raw_mode (0);
+
+      command_history::clean_up_and_save ();
+
+      close_plot_stream ();
+
+      close_files ();
+
+      cleanup_tmp_files ();
+
+      flush_octave_stdout ();
+
+      if (!quitting_gracefully && (interactive || forced_interactive))
+	cout << "\n";
+    }
 }
 
 DEFUN (atexit, args, ,
   "atexit (NAME): register NAME as a function to call when Octave exits\n\
 \n\
 Functions are called with no arguments in the reverse of the order in\n\
 which they were registered with atexit()")
 {
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -29,19 +29,16 @@ class octave_value;
 class octave_value_list;
 class octave_user_function;
 class tree_statement_list;
 class charMatrix;
 
 #include <string>
 
 extern void
-clean_up_and_exit (void);
-
-extern void
 clean_up_and_exit (int) GCC_ATTR_NORETURN;
 
 extern int
 main_loop (void);
 
 extern void
 do_octave_atexit (void);
 
