# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1349130732 14400
#      Mon Oct 01 18:32:12 2012 -0400
# Node ID 6437fa7263dd59d4bdb413f1540003eaad30bd7f
# Parent  049e8bbff78230bface9a3bf996e863faa29e347
use ' instead of ` in error messages, warnings and most comments

* qtinfo/parser.h, file-io.cc, graphics.in.h, lex.ll, version.in.h,
interp1.m, fminsearch.m, fix_depends.m, get_description.m:
Use ' instead of ` in error messages, warnings and most comments.

diff --git a/libgui/src/qtinfo/parser.h b/libgui/src/qtinfo/parser.h
--- a/libgui/src/qtinfo/parser.h
+++ b/libgui/src/qtinfo/parser.h
@@ -19,17 +19,17 @@
 
 #include <QStringList>
 #include <QIODevice>
 #include <QFileInfoList>
 #include <QHash>
 
 /**
  * \class parser
- * This class gets nodes and searchs inside of `info files'.
+ * This class gets nodes and searchs inside of 'info files'.
  * <p>Each info file has nodes. Every node has the documentation.
  * Info files contains a map with position of each node.</p>
  * <p>What is position?
  * There is a simple answer:
  * If you make a queue with info files, position will be the number of bytes
  * from begining to node position.</p>
  * <p>
  * But is not so easy. There is headers, and qtinfo must not take these headers into account.
diff --git a/libinterp/interpfcn/file-io.cc b/libinterp/interpfcn/file-io.cc
--- a/libinterp/interpfcn/file-io.cc
+++ b/libinterp/interpfcn/file-io.cc
@@ -1159,17 +1159,17 @@ complete description of the syntax of th
                   // old val for restoring afterwards.
                   oldloc = 
                     os.imbue (std::locale (args(2).string_value ().c_str ()));
 
                 }
               catch (std::runtime_error)
                 {
                   // Display a warning if the specified locale is unknown
-                  warning ("fscanf: invalid locale. Try `locale -a' for a list of supported values.");
+                  warning ("fscanf: invalid locale. Try 'locale -a' for a list of supported values.");
                   oldloc = std::locale::classic ();
                 }
               retval = os.oscanf (args(1), who);
               os.imbue (oldloc);
             }
           else
             ::error ("%s: format TEMPLATE must be a string", who.c_str ());
         }
@@ -1269,17 +1269,17 @@ is returned in @var{pos}.\n\
                   // locale afterwards.
                   try
                     {  
                       os.imbue (std::locale (args(2).string_value ().c_str ()));
                     }
                   catch (std::runtime_error)
                     {
                       // Display a warning if the specified locale is unknown
-                      warning ("sscanf: invalid locale. Try `locale -a' for a list of supported values.");
+                      warning ("sscanf: invalid locale. Try 'locale -a' for a list of supported values.");
                     }
                   retval = os.oscanf (args(1), who);
                 }              
               else
                 ::error ("%s: format TEMPLATE must be a string", who.c_str ());
             }
           else
             ::error ("%s: unable to create temporary input buffer",
diff --git a/libinterp/interpfcn/graphics.in.h b/libinterp/interpfcn/graphics.in.h
--- a/libinterp/interpfcn/graphics.in.h
+++ b/libinterp/interpfcn/graphics.in.h
@@ -3245,28 +3245,28 @@ public:
     octave_value retval = default_properties.lookup (name);
 
     if (retval.is_undefined ())
       {
         // no default property found, use factory default
         retval = factory_properties.lookup (name);
 
         if (retval.is_undefined ())
-          error ("get: invalid default property `%s'", name.c_str ());
+          error ("get: invalid default property '%s'", name.c_str ());
       }
 
     return retval;
   }
 
   octave_value get_factory_default (const caseless_str& name) const
   {
     octave_value retval = factory_properties.lookup (name);
 
     if (retval.is_undefined ())
-      error ("get: invalid factory default property `%s'", name.c_str ());
+      error ("get: invalid factory default property '%s'", name.c_str ());
 
     return retval;
   }
 
   octave_value get_defaults (void) const
   {
     return default_properties.as_struct ("default");
   }
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1501,22 +1501,22 @@ is_keyword_token (const std::string& s)
           lexer_flags.at_beginning_of_statement = true;
           break;
 
         case static_kw:
           if ((reading_fcn_file || reading_script_file
                || reading_classdef_file)
               && ! curr_fcn_file_full_name.empty ())
             warning_with_id ("Octave:deprecated-keyword",
-                             "the `static' keyword is obsolete and will be removed from a future version of Octave; please use `persistent' instead; near line %d of file `%s'",
+                             "the 'static' keyword is obsolete and will be removed from a future version of Octave; please use 'persistent' instead; near line %d of file '%s'",
                              input_line_number,
                              curr_fcn_file_full_name.c_str ());
           else
             warning_with_id ("Octave:deprecated-keyword",
-                             "the `static' keyword is obsolete and will be removed from a future version of Octave; please use `persistent' instead; near line %d",
+                             "the 'static' keyword is obsolete and will be removed from a future version of Octave; please use 'persistent' instead; near line %d",
                              input_line_number);
           // fall through ...
 
         case persistent_kw:
           break;
 
         case case_kw:
         case elseif_kw:
diff --git a/libinterp/version.in.h b/libinterp/version.in.h
--- a/libinterp/version.in.h
+++ b/libinterp/version.in.h
@@ -82,11 +82,11 @@ For more information, visit http://www.o
   OCTAVE_CONTRIB_STATEMENT "\n\n" \
   OCTAVE_BUGS_STATEMENT
 
 #define OCTAVE_NAME_VERSION_COPYRIGHT_COPYING_WARRANTY_AND_BUGS \
   X_OCTAVE_NAME_VERSION_COPYRIGHT_COPYING_WARRANTY_AND_BUGS ("")
 
 #define OCTAVE_STARTUP_MESSAGE \
   X_OCTAVE_NAME_VERSION_COPYRIGHT_COPYING_WARRANTY_AND_BUGS \
-    ("  For details, type `warranty'.") "\n\n" \
-  "For information about changes from previous versions, type `news'."
+    ("  For details, type 'warranty'.") "\n\n" \
+  "For information about changes from previous versions, type 'news'."
 #endif
diff --git a/scripts/general/interp1.m b/scripts/general/interp1.m
--- a/scripts/general/interp1.m
+++ b/scripts/general/interp1.m
@@ -200,17 +200,17 @@ function yi = interp1 (x, y, varargin)
     jumps = x(1:end-1) == x(2:end);
     have_jumps = any (jumps);
     if (have_jumps)
       if (any (strcmp (method, {"nearest", "linear"})))
         if (any (jumps(1:nx-2) & jumps(2:nx-1)))
           error ("interp1: extra points in discontinuities");
         endif
       else
-        error ("interp1: discontinuities not supported for method `%s'", method);
+        error ("interp1: discontinuities not supported for method '%s'", method);
       endif
     endif
   endif
 
   ## Proceed with interpolating by all methods.
   switch (method)
   case "nearest"
     pp = mkpp ([x(1); (x(1:nx-1)+x(2:nx))/2; x(nx)], shiftdim (y, 1), szy(2:end));
diff --git a/scripts/optimization/fminsearch.m b/scripts/optimization/fminsearch.m
--- a/scripts/optimization/fminsearch.m
+++ b/scripts/optimization/fminsearch.m
@@ -98,17 +98,17 @@ endfunction
 ##        The form of the initial simplex is determined by STOPIT(4):
 ##           STOPIT(4) = 0: regular simplex (sides of equal length, the default)
 ##           STOPIT(4) = 1: right-angled simplex.
 ##        Progress of the iteration is not shown if STOPIT(5) = 0 (default 1).
 ##           STOPIT(6) indicates the direction (ie. minimization or
 ##                   maximization.) Default is 1, maximization.
 ##                   set STOPIT(6)=-1 for minimization
 ##        If a non-empty fourth parameter string SAVIT is present, then
-##        `SAVE SAVIT x fmax nf' is executed after each inner iteration.
+##        'SAVE SAVIT x fmax nf' is executed after each inner iteration.
 ##        NB: x0 can be a matrix.  In the output argument, in SAVIT saves,
 ##            and in function calls, x has the same shape as x0.
 ##        NMSMAX(fun, x0, STOPIT, SAVIT, P1, P2,...) allows additional
 ##        arguments to be passed to fun, via feval(fun,x,P1,P2,...).
 ## References:
 ## N. J. Higham, Optimization by direct search in matrix computations,
 ##    SIAM J. Matrix Anal. Appl, 14(2): 317-333, 1993.
 ## C. T. Kelley, Iterative Methods for Optimization, Society for Industrial
@@ -252,17 +252,17 @@ function [x, fmax, nf] = nmsmax (fun, x,
     if (size_simplex <= tol)
       msg = sprintf ("Simplex size %9.4e <= %9.4e...quitting\n", ...
                       size_simplex, tol);
       break;
     endif
 
     ##  One step of the Nelder-Mead simplex algorithm
     ##  NJH: Altered function calls and changed CNT to NF.
-    ##       Changed each `fr < f(1)' type test to `>' for maximization
+    ##       Changed each 'fr < f(1)' type test to '>' for maximization
     ##       and re-ordered function values after sort.
 
     vbar = (sum (V(:,1:n)')/n)';  # Mean value
     vr = (1 + alpha)*vbar - alpha*V(:,n+1);
     x(:) = vr;
     fr = dirn * feval (fun,x,varargin{:});
     nf = nf + 1;
     vk = vr;  fk = fr; how = "reflect, ";
diff --git a/scripts/pkg/private/fix_depends.m b/scripts/pkg/private/fix_depends.m
--- a/scripts/pkg/private/fix_depends.m
+++ b/scripts/pkg/private/fix_depends.m
@@ -36,17 +36,17 @@ function deps_cell = fix_depends (depend
     rpar = find (dep == ")");
     ## Does the dependency specify a version
     ## Example: package(>= version).
     if (length (lpar) == 1 && length (rpar) == 1)
       package = tolower (strtrim (dep(1:lpar-1)));
       sub = dep(lpar(1)+1:rpar(1)-1);
       parts = strsplit (sub, " ", true);
       if (length (parts) != 2)
-        error ("incorrect syntax for dependency `%s' in the DESCRIPTION file\n",
+        error ("incorrect syntax for dependency '%s' in the DESCRIPTION file\n",
                dep);
       endif
       operator = parts{1};
       if (! any (strcmp (operator, {">", ">=", "<=", "<", "=="})))
         error ("unsupported operator: %s", operator);
       endif
       version  = fix_version (parts{2});
 
diff --git a/scripts/pkg/private/get_description.m b/scripts/pkg/private/get_description.m
--- a/scripts/pkg/private/get_description.m
+++ b/scripts/pkg/private/get_description.m
@@ -46,17 +46,17 @@ function desc = get_description (filenam
       if (length (colon) == 0)
         disp ("skipping line");
       else
         colon = colon(1);
         keyword = tolower (strtrim (line(1:colon-1)));
         value = strtrim (line (colon+1:end));
         if (length (value) == 0)
             fclose (fid);
-            error ("The keyword `%s' of the package `%s' has an empty value",
+            error ("The keyword '%s' of the package '%s' has an empty value",
                     keyword, desc.name);
         endif
         desc.(keyword) = value;
       endif
     endif
     line = fgetl (fid);
   endwhile
   fclose (fid);
