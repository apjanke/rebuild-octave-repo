# HG changeset patch
# User jwe
# Date 947654617 0
#      Wed Jan 12 05:23:37 2000 +0000
# Node ID e71b3d1dd3279cea3c37aa98287a1e935c2958cf
# Parent  ca92c9d3f8826c0a7d6f3892a5c323200f5c9e42
[project @ 2000-01-12 05:23:34 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2000-01-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* MArray.h (MArray <const Array<T>&)): New constructor.
+
 2000-01-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pathsearch.cc (dir_path::all_directories): Avoid dereferencing
 	NULL directory list returned from kpse_element_dirs
 
 1999-12-08  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dbleLU.cc (LU::LU): Call DGETRF directly instead of calling DGESV.
diff --git a/liboctave/MArray.h b/liboctave/MArray.h
--- a/liboctave/MArray.h
+++ b/liboctave/MArray.h
@@ -104,17 +104,17 @@ protected:
 
   MArray (T *d, int l) : Array<T> (d, l) { }
 
 public:
   
   MArray (void) : Array<T> () { }
   MArray (int n) : Array<T> (n) { }
   MArray (int n, const T& val) : Array<T> (n, val) { }
-//  MArray (const Array<T>& a) : Array<T> (a) { }
+  MArray (const Array<T>& a) : Array<T> (a) { }
   MArray (const MArray<T>& a) : Array<T> (a) { }
 
   ~MArray (void) { }
 
   MArray<T>& operator = (const MArray<T>& a)
     {
       Array<T>::operator = (a);
       return *this;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,15 +1,24 @@
 2000-01-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* ov.h, ov.cc (octave_value::column_vector_value,
+	octave_value::row_vector_value,
+	octave_value::complex_column_vector_value,
+	octave_value::complex_row_vector_value): New functions.
+	(octave_value::vector_value): Now returns Array<double>.
+	(octave_value::complex_vector_value): Now returns Array<Complex>.
+	Sprinkle conversions where necessary.
+
 	* ov.cc (Vprefer_column_vectors): Now static.
 	* ov.h (octave_value (const ComplexRowVector&),
 	octave_value (const ComplexColumnVector&),
 	octave_value (const RowVector&), octave_value (const ColumnVector&)):
 	Delete second arg.  Change all callers.
+
 	* oct-obj.h (octave_value_list (const RowVector&),
 	octave_value_list (const ColumnVector&),
 	octave_value_list (const ComplexRowVector&),
 	octave_value_list (const ComplexColumnVector&)): Likewise.
 	* ov-cx-mat.h, ov-cx-mat.cc
 	(octave_complex_matrix (const ComplexRowVector&),
 	(octave_complex_matrix (const ComplexColumnVector&)):
 	Delete second arg, simply create object with orientation
diff --git a/src/DLD-FUNCTIONS/dassl.cc b/src/DLD-FUNCTIONS/dassl.cc
--- a/src/DLD-FUNCTIONS/dassl.cc
+++ b/src/DLD-FUNCTIONS/dassl.cc
@@ -91,17 +91,17 @@ dassl_user_function (const ColumnVector&
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("dassl");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
 	{
-	  retval = tmp(0).vector_value ();
+	  retval = ColumnVector (tmp(0).vector_value ());
 
 	  if (error_state || retval.length () == 0)
 	    gripe_user_supplied_eval ("dassl");
 	}
       else
 	gripe_user_supplied_eval ("dassl");
     }
 
@@ -187,36 +187,36 @@ discontinuity in the derivative.\n\
       dassl_fcn = extract_function
 	(args(0), "dassl", "__dassl_fcn__",
 	 "function res = __dassl_fcn__ (x, xdot, t) res = ",
 	 "; endfunction");
 
       if (! dassl_fcn)
 	DASSL_ABORT ();
 
-      ColumnVector state = args(1).vector_value ();
+      ColumnVector state = ColumnVector (args(1).vector_value ());
 
       if (error_state)
 	DASSL_ABORT1 ("expecting state vector as second argument");
 
-      ColumnVector deriv = args(2).vector_value ();
+      ColumnVector deriv (args(2).vector_value ());
 
       if (error_state)
 	DASSL_ABORT1 ("expecting derivative vector as third argument");
 
-      ColumnVector out_times = args(3).vector_value ();
+      ColumnVector out_times (args(3).vector_value ());
 
       if (error_state)
 	DASSL_ABORT1 ("expecting output time vector as fourth argument");
 
       ColumnVector crit_times;
       int crit_times_set = 0;
       if (nargin > 4)
 	{
-	  crit_times = args(4).vector_value ();
+	  crit_times = ColumnVector (args(4).vector_value ());
 
 	  if (error_state)
 	    DASSL_ABORT1 ("expecting critical time vector as fifth argument");
 
 	  crit_times_set = 1;
 	}
 
       if (state.capacity () != deriv.capacity ())
diff --git a/src/DLD-FUNCTIONS/filter.cc b/src/DLD-FUNCTIONS/filter.cc
--- a/src/DLD-FUNCTIONS/filter.cc
+++ b/src/DLD-FUNCTIONS/filter.cc
@@ -261,35 +261,35 @@ H(z) = {\\displaystyle\\sum_{k=0}^M d_{k
 
   bool si_is_row_vector = (nargin == 4 && args(3).rows () == 1);
 
   if (args(0).is_complex_type ()
       || args(1).is_complex_type ()
       || args(2).is_complex_type ()
       || (nargin == 4 && args(3).is_complex_type ()))
     {
-      ComplexColumnVector b = args(0).complex_vector_value ();
-      ComplexColumnVector a = args(1).complex_vector_value ();
-      ComplexColumnVector x = args(2).complex_vector_value ();
+      ComplexColumnVector b (args(0).complex_vector_value ());
+      ComplexColumnVector a (args(1).complex_vector_value ());
+      ComplexColumnVector x (args(2).complex_vector_value ());
 
       if (! error_state)
 	{
 	  ComplexColumnVector si;
 
 	  if (nargin == 3)
 	    {
 	      int a_len = a.length ();
 	      int b_len = b.length ();
 
 	      int si_len = (a_len > b_len ? a_len : b_len) - 1;
 
 	      si.resize (si_len, 0.0);
 	    }
 	  else
-	    si = args(3).complex_vector_value ();
+	    si = ComplexColumnVector (args(3).complex_vector_value ());
 
 	  if (! error_state)
 	    {
 	      ComplexColumnVector y (filter (b, a, x, si));
 
 	      if (nargout == 2)
 		{
 		  if (si_is_row_vector)
@@ -306,35 +306,35 @@ H(z) = {\\displaystyle\\sum_{k=0}^M d_{k
 	  else
 	    error (errmsg);
 	}
       else
 	error (errmsg);
     }
   else
     {
-      ColumnVector b = args(0).vector_value ();
-      ColumnVector a = args(1).vector_value ();
-      ColumnVector x = args(2).vector_value ();
+      ColumnVector b (args(0).vector_value ());
+      ColumnVector a (args(1).vector_value ());
+      ColumnVector x (args(2).vector_value ());
 
       if (! error_state)
 	{
 	  ColumnVector si;
 
 	  if (nargin == 3)
 	    {
 	      int a_len = a.length ();
 	      int b_len = b.length ();
 
 	      int si_len = (a_len > b_len ? a_len : b_len) - 1;
 
 	      si.resize (si_len, 0.0);
 	    }
 	  else
-	    si = args(3).vector_value ();
+	    si = ColumnVector (args(3).vector_value ());
 
 	  if (! error_state)
 	    {
 	      ColumnVector y (filter (b, a, x, si));
 
 	      if (nargout == 2)
 		{
 		  if (si_is_row_vector)
diff --git a/src/DLD-FUNCTIONS/fsolve.cc b/src/DLD-FUNCTIONS/fsolve.cc
--- a/src/DLD-FUNCTIONS/fsolve.cc
+++ b/src/DLD-FUNCTIONS/fsolve.cc
@@ -107,17 +107,17 @@ fsolve_user_function (const ColumnVector
       args(0) = vars;
     }
 
   if (fsolve_fcn)
     {
       octave_value_list tmp = fsolve_fcn->do_index_op (1, args);
       if (tmp.length () > 0 && tmp(0).is_defined ())
 	{
-	  retval = tmp(0).vector_value ();
+	  retval = ColumnVector (tmp(0).vector_value ());
 
 	  if (error_state || retval.length () <= 0)
 	    gripe_user_supplied_eval ("fsolve");
 	}
       else
 	gripe_user_supplied_eval ("fsolve");
     }
 
@@ -171,17 +171,17 @@ equations such that @code{f(@var{x}) == 
   if (nargin == 2 && nargout < 4)
     {
       fsolve_fcn = extract_function (args(0), "fsolve", "__fsolve_fcn__",
 				    "function y = __fsolve_fcn__ (x) y = ",
 				    "; endfunction");
       if (! fsolve_fcn)
 	FSOLVE_ABORT ();
 
-      ColumnVector x = args(1).vector_value ();
+      ColumnVector x (args(1).vector_value ());
 
       if (error_state)
 	FSOLVE_ABORT1 ("expecting vector as second argument");
 
       if (nargin > 2)
 	warning ("fsolve: ignoring extra arguments");
 
       if (nargout > 2)
diff --git a/src/DLD-FUNCTIONS/lsode.cc b/src/DLD-FUNCTIONS/lsode.cc
--- a/src/DLD-FUNCTIONS/lsode.cc
+++ b/src/DLD-FUNCTIONS/lsode.cc
@@ -75,17 +75,17 @@ lsode_user_function (const ColumnVector&
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("lsode");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
 	{
-	  retval = tmp(0).vector_value ();
+	  retval = ColumnVector (tmp(0).vector_value ());
 
 	  if (error_state || retval.length () == 0)
 	    gripe_user_supplied_eval ("lsode");
 	}
       else
 	gripe_user_supplied_eval ("lsode");
     }
 
@@ -235,32 +235,32 @@ discontinuity in the derivative.\n\
 	default:
 	  LSODE_ABORT1
 	    ("first arg should be a string or 2-element string array");
 	}
 
       if (error_state || ! lsode_fcn)
 	LSODE_ABORT ();
 
-      ColumnVector state = args(1).vector_value ();
+      ColumnVector state (args(1).vector_value ());
 
       if (error_state)
 	LSODE_ABORT1 ("expecting state vector as second argument");
 
-      ColumnVector out_times = args(2).vector_value ();
+      ColumnVector out_times (args(2).vector_value ());
 
       if (error_state)
 	LSODE_ABORT1 ("expecting output time vector as third argument");
 
       ColumnVector crit_times;
 
       int crit_times_set = 0;
       if (nargin > 3)
 	{
-	  crit_times = args(3).vector_value ();
+	  crit_times = ColumnVector (args(3).vector_value ());
 
 	  if (error_state)
 	    LSODE_ABORT1 ("expecting critical time vector as fourth argument");
 
 	  crit_times_set = 1;
 	}
 
       double tzero = out_times (0);
diff --git a/src/DLD-FUNCTIONS/quad.cc b/src/DLD-FUNCTIONS/quad.cc
--- a/src/DLD-FUNCTIONS/quad.cc
+++ b/src/DLD-FUNCTIONS/quad.cc
@@ -213,23 +213,23 @@ solution.\n\
       switch (nargin)
 	{
 	case 5:
 	  if (indefinite)
 	    QUAD_ABORT1 ("singularities not allowed on infinite intervals");
 
 	  have_sing = 1;
 
-	  sing = args(4).vector_value ();
+	  sing = ColumnVector (args(4).vector_value ());
 
 	  if (error_state)
 	    QUAD_ABORT1 ("expecting vector of singularities as fourth argument");
 
 	case 4:
-	  tol = args(3).vector_value ();
+	  tol = ColumnVector (args(3).vector_value ());
 
 	  if (error_state)
 	    QUAD_ABORT1 ("expecting vector of tolerances as fifth argument");
 
 	  switch (tol.capacity ())
 	    {
 	    case 2:
 	      reltol = tol (1);
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -749,20 +749,138 @@ octave_value::function_value (bool silen
 
 octave_value_list
 octave_value::list_value (void) const
 {
   return rep->list_value ();
 }
 
 ColumnVector
+octave_value::column_vector_value (bool force_string_conv,
+				   bool force_vector_conversion) const
+{
+  ColumnVector retval;
+
+  Matrix m = matrix_value (force_string_conv);
+
+  if (error_state)
+    return retval;
+
+  int nr = m.rows ();
+  int nc = m.columns ();
+
+  if (nc == 1)
+    {
+      retval.resize (nr);
+      for (int i = 0; i < nr; i++)
+	retval (i) = m (i, 0);
+    }
+  else
+    {
+      string tn = type_name ();
+      gripe_invalid_conversion (tn.c_str (), "real column vector");
+    }
+
+  return retval;
+}
+
+ComplexColumnVector
+octave_value::complex_column_vector_value (bool force_string_conv,
+					   bool force_vector_conversion) const
+{
+  ComplexColumnVector retval;
+
+  ComplexMatrix m = complex_matrix_value (force_string_conv);
+
+  if (error_state)
+    return retval;
+
+  int nr = m.rows ();
+  int nc = m.columns ();
+
+  if (nc == 1)
+    {
+      retval.resize (nc);
+      for (int i = 0; i < nc; i++)
+	retval (i) = m (i, 0);
+    }
+  else
+    {
+      string tn = type_name ();
+      gripe_invalid_conversion (tn.c_str (), "complex column vector");
+    }
+
+  return retval;
+}
+
+RowVector
+octave_value::row_vector_value (bool force_string_conv,
+				bool force_vector_conversion) const
+{
+  RowVector retval;
+
+  Matrix m = matrix_value (force_string_conv);
+
+  if (error_state)
+    return retval;
+
+  int nr = m.rows ();
+  int nc = m.columns ();
+
+  if (nr == 1)
+    {
+      retval.resize (nc);
+      for (int i = 0; i < nc; i++)
+	retval (i) = m (0, i);
+    }
+  else
+    {
+      string tn = type_name ();
+      gripe_invalid_conversion (tn.c_str (), "real row vector");
+    }
+
+  return retval;
+}
+
+ComplexRowVector
+octave_value::complex_row_vector_value (bool force_string_conv,
+					bool force_vector_conversion) const
+{
+  ComplexRowVector retval;
+
+  ComplexMatrix m = complex_matrix_value (force_string_conv);
+
+  if (error_state)
+    return retval;
+
+  int nr = m.rows ();
+  int nc = m.columns ();
+
+  if (nr == 1)
+    {
+      retval.resize (nc);
+      for (int i = 0; i < nc; i++)
+	retval (i) = m (0, i);
+    }
+  else
+    {
+      string tn = type_name ();
+      gripe_invalid_conversion (tn.c_str (), "complex row vector");
+    }
+
+  return retval;
+}
+
+// Sloppy...
+
+Array<double>
 octave_value::vector_value (bool force_string_conv,
 			    bool force_vector_conversion) const
 {
-  ColumnVector retval;
+  Array<double> retval;
 
   Matrix m = matrix_value (force_string_conv);
 
   if (error_state)
     return retval;
 
   int nr = m.rows ();
   int nc = m.columns ();
@@ -792,21 +910,21 @@ octave_value::vector_value (bool force_s
     {
       string tn = type_name ();
       gripe_invalid_conversion (tn.c_str (), "real vector");
     }
 
   return retval;
 }
 
-ComplexColumnVector
+Array<Complex>
 octave_value::complex_vector_value (bool force_string_conv,
 				    bool force_vector_conversion) const
 {
-  ComplexColumnVector retval;
+  Array<Complex> retval;
 
   ComplexMatrix m = complex_matrix_value (force_string_conv);
 
   if (error_state)
     return retval;
 
   int nr = m.rows ();
   int nc = m.columns ();
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -441,23 +441,36 @@ public:
   virtual octave_value_list list_value (void) const;
 
   virtual bool bool_value (void) const
     { return rep->bool_value (); }
 
   virtual boolMatrix bool_matrix_value (void) const
     { return rep->bool_matrix_value (); }
 
-  ColumnVector vector_value (bool frc_str_conv = false,
+  ColumnVector column_vector_value (bool frc_str_conv = false,
 			     bool frc_vec_conv = false) const;
 
   ComplexColumnVector
-  complex_vector_value (bool frc_str_conv = false,
+  complex_column_vector_value (bool frc_str_conv = false,
 			bool frc_vec_conv = false) const;
 
+  RowVector row_vector_value (bool frc_str_conv = false,
+			      bool frc_vec_conv = false) const;
+
+  ComplexRowVector
+  complex_row_vector_value (bool frc_str_conv = false,
+			    bool frc_vec_conv = false) const;
+
+  Array<double> vector_value (bool frc_str_conv = false,
+			      bool frc_vec_conv = false) const;
+
+  Array<Complex> complex_vector_value (bool frc_str_conv = false,
+				       bool frc_vec_conv = false) const;
+
   // Conversions.  These should probably be private.  If a user of this
   // class wants a certain kind of constant, he should simply ask for
   // it, and we should convert it if possible.
 
   virtual octave_value convert_to_str (void) const
     { return rep->convert_to_str (); }
 
   virtual void convert_to_row_or_column_vector (void)
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -635,17 +635,17 @@ get_dimensions (const octave_value& a, c
     }
   else
     {
       nr = a.rows ();
       nc = a.columns ();
 
       if ((nr == 1 && nc == 2) || (nr == 2 && nc == 1))
 	{
-	  ColumnVector v = a.vector_value ();
+	  Array<double> v = a.vector_value ();
 
 	  if (error_state)
 	    return;
 
 	  nr = NINT (v (0));
 	  nc = NINT (v (1));
 	}
       else
