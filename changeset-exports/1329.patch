# HG changeset patch
# User jwe
# Date 809225924 0
#      Thu Aug 24 00:58:44 1995 +0000
# Node ID 13b630c0aad35d1a9c328d07761de46b69d2c129
# Parent  ec2ab864e8eb088ae1e1fcb97879aba54af3da12
[project @ 1995-08-24 00:58:44 by jwe]

diff --git a/src/dassl.cc b/src/dassl.cc
--- a/src/dassl.cc
+++ b/src/dassl.cc
@@ -269,17 +269,17 @@ print_dassl_option_list (void)
       list++;
     }
 
   output_buf << "\n" << ends;
   maybe_page_output (output_buf);
 }
 
 static void
-do_dassl_option (char *keyword, double val)
+set_dassl_option (char *keyword, double val)
 {
   DAE_OPTIONS *list = dassl_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
@@ -288,43 +288,70 @@ do_dassl_option (char *keyword, double v
 	  return;
 	}
       list++;
     }
 
   warning ("dassl_options: no match for `%s'", keyword);
 }
 
+static Octave_object
+show_dassl_option (char *keyword)
+{
+  Octave_object retval;
+
+  DAE_OPTIONS *list = dassl_option_table;
+
+  while (list->keyword != 0)
+    {
+      if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
+				list->min_toks_to_match, MAX_TOKENS))
+	{
+	  return (dassl_opts.*list->d_get_fcn) ();
+	}
+      list++;
+    }
+
+  warning ("dassl_options: no match for `%s'", keyword);
+
+  return retval;
+}
+
 DEFUN_DLD_BUILTIN ("dassl_options", Fdassl_options, Sdassl_options, -1, 1,
   "dassl_options (KEYWORD, VALUE)\n\
 \n\
 Set or show options for dassl.  Keywords may be abbreviated\n\
 to the shortest match.")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       print_dassl_option_list ();
       return retval;
     }
-  else if (nargin == 2)
+  else if (nargin == 1 || nargin == 2)
     {
       char *keyword = args(0).string_value ();
 
       if (! error_state)
 	{
-	  double val = args(1).double_value ();
+	  if (nargin == 1)
+	    return show_dassl_option (keyword);
+	  else
+	    {
+	      double val = args(1).double_value ();
 
-	  if (! error_state)
-	    {
-	      do_dassl_option (keyword, val);
-	      return retval;
+	      if (! error_state)
+		{
+		  set_dassl_option (keyword, val);
+		  return retval;
+		}
 	    }
 	}
     }
 
   print_usage ("dassl_options");
 
   return retval;
 }
diff --git a/src/fsolve.cc b/src/fsolve.cc
--- a/src/fsolve.cc
+++ b/src/fsolve.cc
@@ -235,17 +235,17 @@ print_fsolve_option_list (void)
       list++;
     }
 
   output_buf << "\n" << ends;
   maybe_page_output (output_buf);
 }
 
 static void
-do_fsolve_option (char *keyword, double val)
+set_fsolve_option (char *keyword, double val)
 {
   NLEQN_OPTIONS *list = fsolve_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
@@ -254,43 +254,70 @@ do_fsolve_option (char *keyword, double 
 	  return;
 	}
       list++;
     }
 
   warning ("fsolve_options: no match for `%s'", keyword);
 }
 
+static Octave_object
+show_fsolve_option (char *keyword)
+{
+  Octave_object retval;
+
+  NLEQN_OPTIONS *list = fsolve_option_table;
+
+  while (list->keyword != 0)
+    {
+      if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
+				list->min_toks_to_match, MAX_TOKENS))
+	{
+	  return (fsolve_opts.*list->d_get_fcn) ();
+	}
+      list++;
+    }
+
+  warning ("fsolve_options: no match for `%s'", keyword);
+
+  return retval;
+}
+
 DEFUN_DLD_BUILTIN ("fsolve_options", Ffsolve_options, Sfsolve_options, -1, 1,
   "fsolve_options (KEYWORD, VALUE)\n\
 \n\
 Set or show options for fsolve.  Keywords may be abbreviated\n\
 to the shortest match.")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       print_fsolve_option_list ();
       return retval;
     }
-  else if (nargin == 2)
+  else if (nargin == 1 || nargin == 2)
     {
       char *keyword = args(0).string_value ();
 
       if (! error_state)
 	{
-	  double val = args(1).double_value ();
+	  if (nargin == 1)
+	    return show_fsolve_option (keyword);
+	  else
+	    {
+	      double val = args(1).double_value ();
 
-	  if (! error_state)
-	    {
-	      do_fsolve_option (keyword, val);
-	      return retval;
+	      if (! error_state)
+		{
+		  set_fsolve_option (keyword, val);
+		  return retval;
+		}
 	    }
 	}
     }
 
   print_usage ("fsolve_options");
 
   return retval;
 }
diff --git a/src/lsode.cc b/src/lsode.cc
--- a/src/lsode.cc
+++ b/src/lsode.cc
@@ -250,17 +250,17 @@ print_lsode_option_list (void)
       list++;
     }
 
   output_buf << "\n" << ends;
   maybe_page_output (output_buf);
 }
 
 static void
-do_lsode_option (char *keyword, double val)
+set_lsode_option (char *keyword, double val)
 {
   ODE_OPTIONS *list = lsode_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
@@ -269,43 +269,70 @@ do_lsode_option (char *keyword, double v
 	  return;
 	}
       list++;
     }
 
   warning ("lsode_options: no match for `%s'", keyword);
 }
 
+static Octave_object
+show_lsode_option (char *keyword)
+{
+  Octave_object retval;
+
+  ODE_OPTIONS *list = lsode_option_table;
+
+  while (list->keyword != 0)
+    {
+      if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
+				list->min_toks_to_match, MAX_TOKENS))
+	{
+	  return (lsode_opts.*list->d_get_fcn) ();
+	}
+      list++;
+    }
+
+  warning ("lsode_options: no match for `%s'", keyword);
+
+  return retval;
+}
+
 DEFUN_DLD_BUILTIN ("lsode_options", Flsode_options, Slsode_options, -1, 1,
   "lsode_options (KEYWORD, VALUE)\n\
 \n\
 Set or show options for lsode.  Keywords may be abbreviated\n\
 to the shortest match.")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       print_lsode_option_list ();
       return retval;
     }
-  else if (nargin == 2)
+  else if (nargin == 1 || nargin == 2)
     {
       char *keyword = args(0).string_value ();
 
       if (! error_state)
 	{
-	  double val = args(1).double_value ();
+	  if (nargin == 1)
+	    return show_lsode_option (keyword);
+	  else
+	    {
+	      double val = args(1).double_value ();
 
-	  if (! error_state)
-	    {
-	      do_lsode_option (keyword, val);
-	      return retval;
+	      if (! error_state)
+		{
+		  set_lsode_option (keyword, val);
+		  return retval;
+		}
 	    }
 	}
     }
 
   print_usage ("lsode_options");
 
   return retval;
 }
diff --git a/src/npsol.cc b/src/npsol.cc
--- a/src/npsol.cc
+++ b/src/npsol.cc
@@ -712,17 +712,17 @@ print_npsol_option_list (void)
       list++;
     }
 
   output_buf << "\n" << ends;
   maybe_page_output (output_buf);
 }
 
 static void
-do_npsol_option (char *keyword, double val)
+set_npsol_option (char *keyword, double val)
 {
   NPSOL_OPTIONS *list = npsol_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
@@ -741,16 +741,41 @@ do_npsol_option (char *keyword, double v
 	  return;
 	}
       list++;
     }
 
   warning ("npsol_options: no match for `%s'", keyword);
 }
 
+static Octave_object
+show_npsol_option (char *keyword)
+{
+  Octave_object retval;
+
+  NPSOL_OPTIONS *list = npsol_option_table;
+
+  while (list->keyword != 0)
+    {
+      if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
+				list->min_toks_to_match, MAX_TOKENS))
+	{
+	  if (list->d_get_fcn)
+	    return (npsol_opts.*list->d_get_fcn) ();
+	  else
+	    return (double) (npsol_opts.*list->i_get_fcn) ();
+	}
+      list++;
+    }
+
+  warning ("npsol_options: no match for `%s'", keyword);
+
+  return retval;
+}
+
 #endif
 
 #if defined (NPSOL_MISSING)
 DEFUN_DLD_BUILTIN ("npsol_options", Fnpsol_options, Snpsol_options, -1, 1,
   "This function requires NPSOL, which is not freely\n\
 redistributable.  For more information, read the file\n\
 libcruft/npsol/README.MISSING in the source distribution.")
 #else
@@ -771,28 +796,33 @@ to the shortest match.")
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       print_npsol_option_list ();
       return retval;
     }
-  else if (nargin == 2)
+  else if (nargin == 1 || nargin == 2)
     {
       char *keyword = args(0).string_value ();
 
       if (! error_state)
 	{
-	  double val = args(1).double_value ();
+	  if (nargin == 1)
+	    return show_npsol_option (keyword);
+	  else
+	    {
+	      double val = args(1).double_value ();
 
-	  if (! error_state)
-	    {
-	      do_npsol_option (keyword, val);
-	      return retval;
+	      if (! error_state)
+		{
+		  set_npsol_option (keyword, val);
+		  return retval;
+		}
 	    }
 	}
     }
 
   print_usage ("npsol_options");
 
 #endif
 
diff --git a/src/qpsol.cc b/src/qpsol.cc
--- a/src/qpsol.cc
+++ b/src/qpsol.cc
@@ -322,17 +322,17 @@ print_qpsol_option_list (void)
       list++;
     }
 
   output_buf << "\n" << ends;
   maybe_page_output (output_buf);
 }
 
 static void
-do_qpsol_option (char *keyword, double val)
+set_qpsol_option (char *keyword, double val)
 {
   QPSOL_OPTIONS *list = qpsol_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
@@ -351,16 +351,41 @@ do_qpsol_option (char *keyword, double v
 	  return;
 	}
       list++;
     }
 
   warning ("qpsol_options: no match for `%s'", keyword);
 }
 
+static Octave_object
+show_qpsol_option (char *keyword)
+{
+  Octave_object retval;
+
+  QPSOL_OPTIONS *list = qpsol_option_table;
+
+  while (list->keyword != 0)
+    {
+      if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
+				list->min_toks_to_match, MAX_TOKENS))
+	{
+	  if (list->d_get_fcn)
+	    return (qpsol_opts.*list->d_get_fcn) ();
+	  else
+	    return (double) (qpsol_opts.*list->i_get_fcn) ();
+	}
+      list++;
+    }
+
+  warning ("qpsol_options: no match for `%s'", keyword);
+
+  return retval;
+}
+
 #endif
 
 #if defined (QPSOL_MISSING)
 DEFUN_DLD_BUILTIN ("qpsol_options", Fqpsol_options, Sqpsol_options, -1, 1,
   "This function requires QPSOL, which is not freely\n\
 redistributable.  For more information, read the file\n\
 libcruft/qpsol/README.MISSING in the source distribution.")
 #else
@@ -381,28 +406,33 @@ to the shortest match.")
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       print_qpsol_option_list ();
       return retval;
     }
-  else if (nargin == 2)
+  else if (nargin == 1 || nargin == 2)
     {
       char *keyword = args(0).string_value ();
 
       if (! error_state)
 	{
-	  double val = args(1).double_value ();
+	  if (nargin == 1)
+	    return show_qpsol_option (keyword);
+	  else
+	    {
+	      double val = args(1).double_value ();
 
-	  if (! error_state)
-	    {
-	      do_qpsol_option (keyword, val);
-	      return retval;
+	      if (! error_state)
+		{
+		  set_qpsol_option (keyword, val);
+		  return retval;
+		}
 	    }
 	}
     }
 
   print_usage ("qpsol_options");
 
 #endif
 
diff --git a/src/quad.cc b/src/quad.cc
--- a/src/quad.cc
+++ b/src/quad.cc
@@ -301,17 +301,17 @@ print_quad_option_list (void)
       list++;
     }
 
   output_buf << "\n" << ends;
   maybe_page_output (output_buf);
 }
 
 static void
-do_quad_option (char *keyword, double val)
+set_quad_option (char *keyword, double val)
 {
   QUAD_OPTIONS *list = quad_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
@@ -320,43 +320,70 @@ do_quad_option (char *keyword, double va
 	  return;
 	}
       list++;
     }
 
   warning ("quad_options: no match for `%s'", keyword);
 }
 
+static Octave_object
+show_quad_option (char *keyword)
+{
+  Octave_object retval;
+
+  QUAD_OPTIONS *list = quad_option_table;
+
+  while (list->keyword != 0)
+    {
+      if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
+				list->min_toks_to_match, MAX_TOKENS))
+	{
+	  return (quad_opts.*list->d_get_fcn) ();
+	}
+      list++;
+    }
+
+  warning ("quad_options: no match for `%s'", keyword);
+
+  return retval;
+}
+
 DEFUN_DLD_BUILTIN ("quad_options", Fquad_options, Squad_options, -1, 1,
   "quad_options (KEYWORD, VALUE)\n\
 \n\
 Set or show options for quad.  Keywords may be abbreviated\n\
 to the shortest match.")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       print_quad_option_list ();
       return retval;
     }
-  else if (nargin == 2)
+  else if (nargin == 1 || nargin == 2)
     {
       char *keyword = args(0).string_value ();
 
       if (! error_state)
 	{
-	  double val = args(1).double_value ();
+	  if (nargin == 1)
+	    return show_quad_option (keyword);
+	  else
+	    {
+	      double val = args(1).double_value ();
 
-	  if (! error_state)
-	    {
-	      do_quad_option (keyword, val);
-	      return retval;
+	      if (! error_state)
+		{
+		  set_quad_option (keyword, val);
+		  return retval;
+		}
 	    }
 	}
     }
 
   print_usage ("quad_options");
 
   return retval;
 }
