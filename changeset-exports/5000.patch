# HG changeset patch
# User jwe
# Date 1095285804 0
#      Wed Sep 15 22:03:24 2004 +0000
# Node ID 9a7ec88c8b5ef71a28bfd8c454949eec46f471b3
# Parent  5538e4ceb616281c72ff82e772442ae9a2c22bf4
[project @ 2004-09-15 22:03:24 by jwe]

diff --git a/src/DLD-FUNCTIONS/sort.cc b/src/DLD-FUNCTIONS/sort.cc
--- a/src/DLD-FUNCTIONS/sort.cc
+++ b/src/DLD-FUNCTIONS/sort.cc
@@ -1,9 +1,9 @@
-v/*
+/*
 
 Copyright (C) 1996, 1997 John W. Eaton
 Copyright (C) 2004 David Bateman
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
@@ -54,20 +54,20 @@ static octave_value
 mx_sort (ArrayN<T> &m, int dim, sortmode mode = UNDEFINED)
 {
   octave_value retval;
 
   if (m.length () < 1)
     return retval;
 
   dim_vector dv = m.dims ();
-  unsigned int ns = dv (dim);
+  unsigned int ns = dv(dim);
   unsigned int iter = dv.numel () / ns;
   unsigned int stride = 1;
-  for (unsigned int i = 0; i < (unsigned int)dim; i++)
+  for (unsigned int i = 0; i < static_cast<unsigned int> (dim); i++)
     stride *= dv(i);
 
   T *v = m.fortran_vec ();
   octave_sort<T> sort;
 
   if (mode == ASCENDING) 
     sort.set_compare (ascending_compare);
   else if (mode == DESCENDING)
@@ -115,20 +115,20 @@ static octave_value_list
 mx_sort_indexed (ArrayN<T> &m, int dim, sortmode mode = UNDEFINED)
 {
   octave_value_list retval;
 
   if (m.length () < 1)
     return retval;
 
   dim_vector dv = m.dims ();
-  unsigned int ns = dv (dim);
+  unsigned int ns = dv(dim);
   unsigned int iter = dv.numel () / ns;
   unsigned int stride = 1;
-  for (unsigned int i = 0; i < (unsigned int)dim; i++)
+  for (unsigned int i = 0; i < static_cast<unsigned int> (dim); i++)
     stride *= dv(i);
 
   T *v = m.fortran_vec ();
   octave_sort<vec_index<T> *> indexed_sort;
 
   if (mode == ASCENDING) 
     indexed_sort.set_compare (ascending_compare);
   else if (mode == DESCENDING)
@@ -203,23 +203,24 @@ mx_sort_indexed (ArrayN<T> &m, int dim, 
 // casting doubles as unsigned eight byte integers, and with a little
 // bit of magic we can automatically sort the NaN's correctly.
 
 #if defined (HAVE_IEEE754_DATA_FORMAT) && defined (EIGHT_BYTE_INT)
 
 static inline unsigned EIGHT_BYTE_INT
 FloatFlip (unsigned EIGHT_BYTE_INT f)
 {
-  unsigned EIGHT_BYTE_INT mask = -(EIGHT_BYTE_INT)(f >> 63) | 
-    0x8000000000000000ULL;
+  unsigned EIGHT_BYTE_INT mask
+    = -(EIGHT_BYTE_INT)(f >> 63) | 0x8000000000000000ULL;
 
   return f ^ mask;
 }
 
-inline unsigned EIGHT_BYTE_INT IFloatFlip(unsigned EIGHT_BYTE_INT f)
+inline unsigned EIGHT_BYTE_INT
+IFloatFlip (unsigned EIGHT_BYTE_INT f)
 {
   unsigned EIGHT_BYTE_INT mask = ((f >> 63) - 1) | 0x8000000000000000ULL;
 
   return f ^ mask;
 }
 
 bool
 ascending_compare (unsigned EIGHT_BYTE_INT a, 
@@ -258,17 +259,17 @@ static octave_value
 mx_sort (ArrayN<double> &m, int dim, sortmode mode)
 {
   octave_value retval;
 
   if (m.length () < 1)
     return retval;
 
   dim_vector dv = m.dims ();
-  unsigned int ns = dv (dim);
+  unsigned int ns = dv(dim);
   unsigned int iter = dv.numel () / ns;
   unsigned int stride = 1;
   for (unsigned int i = 0; i < (unsigned int)dim; i++)
     stride *= dv(i);
 
   double *v = m.fortran_vec ();
 
   unsigned EIGHT_BYTE_INT *p = (unsigned EIGHT_BYTE_INT *)v;
@@ -375,20 +376,20 @@ static octave_value_list
 mx_sort_indexed (ArrayN<double> &m, int dim, sortmode mode)
 {
   octave_value_list retval;
 
   if (m.length () < 1)
     return retval;
 
   dim_vector dv = m.dims ();
-  unsigned int ns = dv (dim);
+  unsigned int ns = dv(dim);
   unsigned int iter = dv.numel () / ns;
   unsigned int stride = 1;
-  for (unsigned int i = 0; i < (unsigned int)dim; i++)
+  for (unsigned int i = 0; i < static_cast<unsigned int> (dim); i++)
     stride *= dv(i);
 
   double *v = m.fortran_vec ();
 
   unsigned EIGHT_BYTE_INT *p = (unsigned EIGHT_BYTE_INT *)v;
 
   octave_sort<vec_index<unsigned EIGHT_BYTE_INT> *> indexed_sort;
 
@@ -594,17 +595,18 @@ template class octave_sort<vec_index<oct
 static octave_value_list
 mx_sort_indexed (ArrayN<octave_value> &m, int dim, sortmode mode);
 #endif
 
 DEFUN_DLD (sort, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{s}, @var{i}] =} sort (@var{x})\n\
 @deftypefnx {Loadable Function} {[@var{s}, @var{i}] =} sort (@var{x}, @var{dim})\n\
-@deftypefnx {Loadable Function} {[@var{s}, @var{i}] =} sort (@dots{}, @var{mode})\n\
+@deftypefnx {Loadable Function} {[@var{s}, @var{i}] =} sort (@var{x}, @var{mode})\n\
+@deftypefnx {Loadable Function} {[@var{s}, @var{i}] =} sort (@var{x}, @var{dim}, @var{mode})\n\
 Return a copy of @var{x} with the elements elements arranged in\n\
 increasing order.  For matrices, @code{sort} orders the elements in each\n\
 column.\n\
 \n\
 For example,\n\
 \n\
 @example\n\
 @group\n\
@@ -668,17 +670,17 @@ ordered lists.\n\
 	{
 	  std::string mode = args(1).string_value();
 	  if (mode == "ascend")
 	    smode = ASCENDING;
 	  else if (mode == "descend")
 	    smode = DESCENDING;
 	  else
 	    {
-	      error ("sort: mode must be either `ascend' or `descend'");
+	      error ("sort: mode must be either \"ascend\" or \"descend\"");
 	      return retval;
 	    }
 	}
       else
 	dim = args(1).nint_value () - 1;
     }
 
   if (nargin > 2)
@@ -696,17 +698,17 @@ ordered lists.\n\
 	}
       std::string mode = args(2).string_value();
       if (mode == "ascend")
 	smode = ASCENDING;
       else if (mode == "descend")
 	smode = DESCENDING;
       else
 	{
-	  error ("sort: mode must be either `ascend' or `descend'");
+	  error ("sort: mode must be either \"ascend\" or \"descend\"");
 	  return retval;
 	}
     }
 
   dim_vector dv = ((const octave_complex_matrix&) arg) .dims ();
   if (error_state)
     {
       gripe_wrong_type_arg ("sort", arg);
