# HG changeset patch
# User jwe
# Date 982130729 0
#      Wed Feb 14 06:05:29 2001 +0000
# Node ID 6065668133b15a82c0683ee1c1a82ff0bf16fce4
# Parent  7f5eeace12b322cb9dacf339e1d1a8959bc29279
[project @ 2001-02-14 06:05:29 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,9 +1,16 @@
-2001-02-09  Cai Jianming  <caijianming@yahoo.co.uk>
+2001-02-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pt-binop.cc (tree_boolean_expression::rvalue):
+	Don't cast result to double.
+
+	* OPERATORS/op-b-b.cc: Allow & and | operators to return bool values.
+
+2001-02-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* data.cc (DATA_REDUCTION): Undo previous change.
 
 2001-02-13  Matthew W. Roberts  <matt@nephi.tamu.edu>
 
 	* load-save.cc (Fload): Accept -4 as an alias for -v4 and -mat4-binary.
 	(Fsave): Likewise.
 
diff --git a/src/OPERATORS/op-b-b.cc b/src/OPERATORS/op-b-b.cc
--- a/src/OPERATORS/op-b-b.cc
+++ b/src/OPERATORS/op-b-b.cc
@@ -43,28 +43,18 @@ Software Foundation, 59 Temple Place - S
 DEFUNOP_OP (not, bool, !)
 DEFUNOP_OP (transpose, bool, /* no-op */)
 DEFUNOP_OP (hermitian, bool, /* no-op */)
 
 // bool by bool ops.
 
 DEFBINOP_OP (eq, bool, bool, ==)
 DEFBINOP_OP (ne, bool, bool, !=)
-
-BINOPDECL (el_and, a1, a2)
-{
-  CAST_BINOP_ARGS (const octave_bool&, const octave_bool&);
-  return octave_value (v1.bool_value () && v2.bool_value ());
-}
-
-BINOPDECL (el_or, a1, a2)
-{
-  CAST_BINOP_ARGS (const octave_bool&, const octave_bool&);
-  return octave_value (v1.bool_value () || v2.bool_value ());
-}
+DEFBINOP_OP (el_and, bool, bool, &&)
+DEFBINOP_OP (el_or, bool, bool, ||)
 
 void
 install_b_b_ops (void)
 {
   INSTALL_UNOP (op_not, octave_bool, not);
   INSTALL_UNOP (op_transpose, octave_bool, transpose);
   INSTALL_UNOP (op_hermitian, octave_bool, hermitian);
 
diff --git a/src/pt-binop.cc b/src/pt-binop.cc
--- a/src/pt-binop.cc
+++ b/src/pt-binop.cc
@@ -186,17 +186,17 @@ tree_boolean_expression::rvalue (void)
 		    }
 		}
 	      else
 		eval_error ();
 
 	    done:
 
 	      if (! error_state)
-		retval = octave_value (static_cast<double> (result));
+		retval = octave_value (result);
 	    }
 	}
     }
   else
     eval_error ();
 
   return retval;
 }
