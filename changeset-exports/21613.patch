# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1460470207 14400
#      Tue Apr 12 10:10:07 2016 -0400
# Node ID e15d3387fc595a05b9d9845fe594b5e9292ea26f
# Parent  edd0ce03f548dee30ecba08650bbffc8dd09f8bb
eliminate leak in ListDialog class (bug #47372)

* dialog.h, dialog.cc (ListDialog::model): New data member.
(ListDialog::ListDialog): Initialize class data member instead of
storing pointer in local variable.
(ListDialog::~ListDialog): New function.  Delete model.

diff --git a/libgui/src/dialog.cc b/libgui/src/dialog.cc
--- a/libgui/src/dialog.cc
+++ b/libgui/src/dialog.cc
@@ -200,22 +200,18 @@ MessageDialog::MessageDialog (const QStr
            &uiwidget_creator, SLOT (dialog_button_clicked (QAbstractButton *)));
 }
 
 
 ListDialog::ListDialog (const QStringList& list, const QString& mode,
                         int wd, int ht, const QList<int>& initial,
                         const QString& title, const QStringList& prompt,
                         const QString& ok_string, const QString& cancel_string)
-  : QDialog ()
+  : QDialog (), model (new QStringListModel (list))
 {
-  // Put the list of items into a model.  Keep this off of the stack
-  // because this conceivably could be a very large list.
-  QAbstractItemModel *model = new QStringListModel (list);
-
   QListView *view = new QListView;
   view->setModel (model);
 
   if (mode == "single")
     view->setSelectionMode (QAbstractItemView::SingleSelection);
   else if (mode == "multiple")
     view->setSelectionMode (QAbstractItemView::ExtendedSelection);
   else
@@ -301,16 +297,20 @@ ListDialog::ListDialog (const QStringLis
   connect (this, SIGNAL (finish_selection (const QIntList&, int)),
            &uiwidget_creator,
            SLOT (list_select_finished (const QIntList&, int)));
 
   connect (view, SIGNAL (doubleClicked (const QModelIndex&)),
            this, SLOT (item_double_clicked (const QModelIndex&)));
 }
 
+ListDialog::~ListDialog (void)
+{
+  delete model;
+}
 
 void
 ListDialog::buttonOk_clicked (void)
 {
   // Store information about what button was pressed so that builtin
   // functions can retrieve.
   QModelIndexList selected_index = selector->selectedIndexes ();
   QIntList selected_int;
diff --git a/libgui/src/dialog.h b/libgui/src/dialog.h
--- a/libgui/src/dialog.h
+++ b/libgui/src/dialog.h
@@ -194,29 +194,35 @@ class ListDialog : public QDialog
 
 public:
 
   explicit ListDialog (const QStringList& list, const QString& mode,
                        int width, int height, const QList<int>& initial,
                        const QString& name, const QStringList& prompt,
                        const QString& ok_string, const QString& cancel_string);
 
+  ~ListDialog (void);
+
 signals:
 
   void finish_selection (const QIntList&, int);
 
 public slots:
 
   void buttonOk_clicked (void);
 
   void buttonCancel_clicked (void);
 
   void reject (void);
 
   void item_double_clicked (const QModelIndex&);
+
+private:
+
+  QAbstractItemModel *model;
 };
 
 
 class InputDialog : public QDialog
 {
   Q_OBJECT
 
   QList<QLineEdit *> input_line;
