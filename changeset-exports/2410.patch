# HG changeset patch
# User jwe
# Date 845398228 0
#      Tue Oct 15 16:50:28 1996 +0000
# Node ID 367485171742eff5e77eff15170f29ca9f76325e
# Parent  47e5f57fb4bd4d936fe4466e9b12a2beee97a9e1
[project @ 1996-10-15 16:50:27 by jwe]

diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -62,18 +62,21 @@ public:
 
   octave_value *clone (void) { return new octave_base_value (*this); }
 
 #if 0
   void *operator new (size_t size);
   void operator delete (void *p, size_t size);
 #endif
 
-  numeric_conv_fcn numeric_conversion_function (void) const
-    { return (numeric_conv_fcn) 0; }
+  type_conv_fcn numeric_conversion_function (void) const
+    { return (type_conv_fcn) 0; }
+
+  octave_value *try_narrowing_conversion (void)
+    { return (octave_value *) 0; }
 
   octave_value index (const octave_value_list& idx) const;
 
   idx_vector index_vector (void) const;
 
   octave_value struct_elt_val (const string& nm) const;
 
   octave_value& struct_elt_ref (const string& nm);
diff --git a/src/ov-complex.cc b/src/ov-complex.cc
--- a/src/ov-complex.cc
+++ b/src/ov-complex.cc
@@ -26,24 +26,37 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "lo-ieee.h"
 
 #include "oct-obj.h"
+#include "ops.h"
 #include "ov-complex.h"
+#include "ov-scalar.h"
 #include "gripes.h"
 #include "pr-output.h"
 
 int octave_complex::t_id = -1;
 
 const string octave_complex::t_name ("complex scalar");
 
+octave_value *
+octave_complex::try_narrowing_conversion (void)
+{
+  octave_value *retval = 0;
+
+  if (imag (scalar) == 0.0)
+    retval = new octave_scalar (::real (scalar));
+
+  return retval;
+}
+
 static inline bool
 valid_scalar_indices (const octave_value_list& args)
 {
   int nargin = args.length ();
 
   for (int i = 0; i < nargin; i++)
     if (! args(i).valid_as_scalar_index ())
       return false;
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -65,16 +65,18 @@ public:
 
   octave_value *clone (void) { return new octave_complex (*this); }
 
 #if 0
   void *operator new (size_t size);
   void operator delete (void *p, size_t size);
 #endif
 
+  octave_value *try_narrowing_conversion (void);
+
   octave_value index (const octave_value_list& idx) const;
 
   int rows (void) const { return 1; }
   int columns (void) const { return 1; }
 
   bool is_defined (void) const { return true; }
 
   bool is_complex_scalar (void) const { return true; }
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -28,17 +28,21 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include "lo-ieee.h"
 #include "mx-base.h"
 
 #include "gripes.h"
 #include "oct-obj.h"
+#include "ops.h"
+#include "ov-complex.h"
 #include "ov-cx-mat.h"
+#include "ov-re-mat.h"
+#include "ov-scalar.h"
 #include "pr-output.h"
 
 int octave_complex_matrix::t_id = -1;
 
 const string octave_complex_matrix::t_name ("complex matrix");
 
 octave_complex_matrix::octave_complex_matrix (const ComplexRowVector& v,
 					      int pcv)
@@ -47,17 +51,40 @@ octave_complex_matrix::octave_complex_ma
 	    ? ComplexMatrix (v.transpose ()) : ComplexMatrix (v)) { }
 
 octave_complex_matrix::octave_complex_matrix (const ComplexColumnVector& v,
 					      int pcv)
   : octave_base_value (),
     matrix ((pcv < 0 && Vprefer_column_vectors) || pcv
 	    ? ComplexMatrix (v) : ComplexMatrix (v.transpose ())) { }
 
-extern void assign (Array2<Complex>&, const Array2<Complex>&);
+octave_value *
+octave_complex_matrix::try_narrowing_conversion (void)
+{
+  octave_value *retval = 0;
+
+  int nr = matrix.rows ();
+  int nc = matrix.cols ();
+
+  if (nr == 1 && nc == 1)
+    {
+      Complex c = matrix (0, 0);
+
+      if (imag (c) == 0.0)
+	retval = new octave_scalar (::real (c));
+      else
+	retval = new octave_complex (c);
+    }
+  else if (nr == 0 && nc == 0)
+    retval = new octave_matrix (Matrix ());
+  else if (matrix.all_elements_are_real ())
+    retval = new octave_matrix (::real (matrix));
+
+  return retval;
+}
 
 octave_value
 octave_complex_matrix::index (const octave_value_list& idx) const
 {
   octave_value retval;
 
   int len = idx.length ();
 
@@ -83,16 +110,18 @@ octave_complex_matrix::index (const octa
     default:
       error ("invalid number of indices (%d) for complex matrix value", len);
       break;
     }
 
   return retval;
 }
 
+extern void assign (Array2<Complex>&, const Array2<Complex>&);
+
 void
 octave_complex_matrix::assign (const octave_value_list& idx,
 			       const ComplexMatrix& rhs)
 {
   int len = idx.length ();
 
   switch (len)
     {
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -72,16 +72,18 @@ public:
 
   octave_value *clone (void) { return new octave_complex_matrix (*this); }
 
 #if 0
   void *operator new (size_t size);
   void operator delete (void *p, size_t size);
 #endif
 
+  octave_value *try_narrowing_conversion (void);
+
   octave_value index (const octave_value_list& idx) const;
 
   void assign (const octave_value_list& idx, const ComplexMatrix& rhs);
 
   void assign (const octave_value_list& idx, const Matrix& rhs);
 
   int rows (void) const { return matrix.rows (); }
   int columns (void) const { return matrix.columns (); }
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -30,36 +30,59 @@ Software Foundation, 59 Temple Place - S
 
 #include "lo-ieee.h"
 #include "lo-utils.h"
 
 #include "gripes.h"
 #include "ops.h"
 #include "ov-range.h"
 #include "ov-re-mat.h"
+#include "ov-scalar.h"
 #include "pr-output.h"
 
 int octave_range::t_id = -1;
 
 const string octave_range::t_name ("range");
 
 static octave_value *
 default_numeric_conversion_function (const octave_value& a)
 {
   CAST_CONV_ARG (const octave_range&);
 
   return new octave_matrix (v.matrix_value ());
 }
 
-octave_value::numeric_conv_fcn
+octave_value::type_conv_fcn
 octave_range::numeric_conversion_function (void) const
 {
   return default_numeric_conversion_function;
 }
 
+octave_value *
+octave_range::try_narrowing_conversion (void)
+{
+  octave_value *retval = 0;
+
+  switch (range.nelem ())
+    {
+    case 1:
+      retval = new octave_scalar (range.base ());
+      break;
+
+    case 0:
+      retval = new octave_matrix (Matrix ());
+      break;
+
+    default:
+      break;
+    }
+
+  return retval;
+}
+
 double
 octave_range::double_value (bool) const
 {
   double retval = octave_NaN;
 
   int nel = range.nelem ();
 
   if (nel == 1 || (nel > 1 && Vdo_fortran_indexing))
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -80,17 +80,19 @@ public:
 
   octave_value *clone (void) { return new octave_range (*this); }
 
 #if 0
   void *operator new (size_t size);
   void operator delete (void *p, size_t size);
 #endif
 
-  numeric_conv_fcn numeric_conversion_function (void) const;
+  type_conv_fcn numeric_conversion_function (void) const;
+
+  octave_value *try_narrowing_conversion (void);
 
   idx_vector index_vector (void) const { return idx_vector (range); }
 
   int rows (void) const { return (columns () > 0); }
   int columns (void) const { return range.nelem (); }
 
   bool is_defined (void) const { return true; }
 
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -30,16 +30,18 @@ Software Foundation, 59 Temple Place - S
 
 #include "lo-ieee.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 
 #include "gripes.h"
 #include "mappers.h"
 #include "oct-obj.h"
+#include "ops.h"
+#include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "pr-output.h"
 
 int octave_matrix::t_id = -1;
 
 const string octave_matrix::t_name ("matrix");
 
 octave_matrix::octave_matrix (const RowVector& v, int pcv)
@@ -49,16 +51,30 @@ octave_matrix::octave_matrix (const RowV
 
 octave_matrix::octave_matrix (const ColumnVector& v, int pcv)
   : octave_base_value (),
     matrix ((pcv < 0 && Vprefer_column_vectors) || pcv
 	    ? Matrix (v) : Matrix (v.transpose ())) { }
 
 #include <iostream.h>
 
+octave_value *
+octave_matrix::try_narrowing_conversion (void)
+{
+  octave_value *retval = 0;
+
+  int nr = matrix.rows ();
+  int nc = matrix.cols ();
+
+  if (nr == 1 && nc == 1)
+    retval = new octave_scalar (matrix (0, 0));
+
+  return retval;
+}
+
 octave_value
 octave_matrix::index (const octave_value_list& idx) const
 {
   octave_value retval;
 
   int len = idx.length ();
 
   switch (len)
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -72,16 +72,18 @@ public:
 
   octave_value *clone (void) { return new octave_matrix (*this); }
 
 #if 0
   void *operator new (size_t size);
   void operator delete (void *p, size_t size);
 #endif
 
+  octave_value *try_narrowing_conversion (void);
+
   octave_value index (const octave_value_list& idx) const;
 
   void assign (const octave_value_list& idx, const Matrix& rhs);
 
   idx_vector index_vector (void) const { return idx_vector (matrix); }
 
   int rows (void) const { return matrix.rows (); }
   int columns (void) const { return matrix.columns (); }
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -298,17 +298,17 @@ octave_value::~octave_value (void)
       delete rep;
       rep = 0;
     }
 }
 
 void
 octave_value::maybe_mutate (void)
 {
-  octave_value *tmp = rep->try_narrow_conversion ();
+  octave_value *tmp = rep->try_narrowing_conversion ();
 
   if (tmp && tmp != rep)
     {
       if (--rep->count == 0)
 	delete rep;
 
       rep = tmp;
       rep->count = 1;
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -173,18 +173,18 @@ public:
       return *this;
     }
 
   virtual type_conv_fcn numeric_conversion_function (void) const
     { return rep->numeric_conversion_function (); }
 
   void maybe_mutate (void);
 
-  virtual octave_value *try_narrow_conversion (void)
-    { return rep->try_narrow_conversion (); }
+  virtual octave_value *try_narrowing_conversion (void)
+    { return rep->try_narrowing_conversion (); }
 
   virtual octave_value index (const octave_value_list& idx) const
     { return rep->index (idx); }
 
   bool convert_and_assign (const octave_value_list& idx,
 			   const octave_value& rhs);
 
   bool try_assignment_with_conversion (const octave_value_list& idx,
