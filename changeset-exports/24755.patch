# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1518632315 18000
#      Wed Feb 14 13:18:35 2018 -0500
# Node ID ef01ca93527c9aae26e03aa0b2a41a54220a30da
# Parent  2cb75eac8fe6be457f049b5953969d539700e88a
show row and column numbers for editable data in variable editor

* variable-editor-model.h, variable-editor-model.cc
(scalar_struct_model::header_data, vector_struct_model::header_data):
Limit action to data rows and columns here.
(variable_editor_model::headerData): Not here.

diff --git a/libgui/src/variable-editor-model.cc b/libgui/src/variable-editor-model.cc
--- a/libgui/src/variable-editor-model.cc
+++ b/libgui/src/variable-editor-model.cc
@@ -560,26 +560,32 @@ public:
                         int role) const
   {
     if (role != Qt::DisplayRole)
       return QVariant ();
 
     switch (orientation)
       {
       case Qt::Horizontal:
-        return QString ("Values");
+        if (section < data_columns ())
+          return QString ("Values");
+        else
+          break;
 
       case Qt::Vertical:
-        {
-          octave_scalar_map m = m_value.scalar_map_value ();
+        if (section < data_rows ())
+          {
+            octave_scalar_map m = m_value.scalar_map_value ();
 
-          string_vector fields = m.fieldnames ();
+            string_vector fields = m.fieldnames ();
 
-          return QString::fromStdString (fields(section));
-        }
+            return QString::fromStdString (fields(section));
+          }
+        else
+          break;
 
       default:
         break;
       }
 
     return QVariant ();
   }
 
@@ -732,26 +738,32 @@ public:
                         int role) const
   {
     if (role != Qt::DisplayRole)
       return QVariant ();
 
     switch (orientation)
       {
       case Qt::Horizontal:
-        {
-          octave_map m = m_value.map_value ();
+        if (section < data_columns ())
+          {
+            octave_map m = m_value.map_value ();
 
-          string_vector fields = m.fieldnames ();
+            string_vector fields = m.fieldnames ();
 
-          return QString::fromStdString (fields(section));
-        }
+            return QString::fromStdString (fields(section));
+          }
+        else
+          break;
 
       case Qt::Vertical:
-        return QString::number (section+1);
+        if (section < data_rows ())
+          return QString::number (section+1);
+        else
+          break;
 
       default:
         break;
       }
 
     return QVariant ();
   }
 
diff --git a/libgui/src/variable-editor-model.h b/libgui/src/variable-editor-model.h
--- a/libgui/src/variable-editor-model.h
+++ b/libgui/src/variable-editor-model.h
@@ -232,21 +232,17 @@ public:
   char quote_char (const QModelIndex& idx) const
   {
     return rep->quote_char (idx);
   }
 
   QVariant
   headerData (int section, Qt::Orientation orientation, int role) const
   {
-    if ((orientation == Qt::Vertical && section < data_rows ())
-        || (orientation == Qt::Horizontal && section < data_columns ()))
-      return rep->header_data (section, orientation, role);
-
-    return QVariant ();
+    return rep->header_data (section, orientation, role);
   }
 
   // Return a subscript expression as a string that can be used to
   // access a sub-element of a data structure.  For example "{1,3}"
   // for cell array element {1,3} or "(2,4)" for array element (2,4).
 
   QString subscript_expression (const QModelIndex& idx) const
   {
