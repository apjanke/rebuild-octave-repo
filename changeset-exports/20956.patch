# HG changeset patch
# User Rik <rik@octave.org>
# Date 1450646777 28800
#      Sun Dec 20 13:26:17 2015 -0800
# Node ID 850e3d2533d4b72025b7a6c1f1de2b72300e4647
# Parent  77f5591878bf4033d33aa5c01262467acf22cc15
maint: Eliminate more useless statements after error().

* __ilu__.cc, display.cc, file-io.cc, graphics.cc, graphics.in.h, hex2num.cc,
load-save.cc, ls-mat-ascii.cc, oct-errno.in.cc, pager.cc, sighandlers.cc,
sub2ind.cc, symtab.h, syscalls.cc, toplev.h, txt-eng-ft.cc, __eigs__.cc,
ov-bool-mat.cc, ov-classdef.h, ov-cx-mat.cc, ov-fcn-handle.cc,
ov-flt-cx-mat.cc, ov-flt-re-mat.cc, ov-re-mat.cc, ov-str-mat.cc, ov-struct.cc,
ov-typeinfo.cc, ov-usr-fcn.cc:
maint: Eliminate more useless statements after error().

diff --git a/libinterp/corefcn/__ilu__.cc b/libinterp/corefcn/__ilu__.cc
--- a/libinterp/corefcn/__ilu__.cc
+++ b/libinterp/corefcn/__ilu__.cc
@@ -104,26 +104,20 @@ void ilu_0 (octave_matrix_t& sm, const s
         }
       uptr[k] = j;
       if (opt != OFF)
         data[uptr[k]] -= r;
       if (opt != ROW)
         for (jj = uptr[k] + 1; jj < cidx[k+1]; jj++)
           data[jj] /=  data[uptr[k]];
       if (k != jrow)
-        {
-          error ("ilu: A has a zero on the diagonal");
-          break;
-        }
+        error ("ilu: A has a zero on the diagonal");
 
       if (data[j] == T(0))
-        {
-          error ("ilu: encountered a pivot equal to 0");
-          break;
-        }
+        error ("ilu: encountered a pivot equal to 0");
       for (i = j1; i <= j2; i++)
         iw[ridx[i]] = -1;
     }
   if (opt == ROW)
     sm = sm.transpose ();
 }
 
 DEFUN (__ilu0__, args, ,
@@ -346,35 +340,29 @@ void ilu_crout (octave_matrix_t& sm_l, o
         }
 
       // Compensate row and column sums --> milu option
       if (opt == COL || opt == ROW)
         data_u[total_len_u] += cr_sum[k];
 
       // Check if the pivot is zero
       if (data_u[total_len_u] == zero)
-        {
-          error ("ilu: encountered a pivot equal to 0");
-          break;
-        }
+        error ("ilu: encountered a pivot equal to 0");
 
       // Scale the elements in L by the pivot
       for (i = total_len_l ; i < (total_len_l + w_len_l); i++)
         data_l[i] /= data_u[total_len_u];
 
 
       total_len_u += w_len_u;
       total_len_l += w_len_l;
       // Check if there are too many elements to be indexed with
       // octave_idx_type type due to fill-in during the process.
       if (total_len_l < 0 || total_len_u < 0)
-        {
-          error ("ilu: integer overflow.  Too many fill-in elements in L or U");
-          break;
-        }
+        error ("ilu: integer overflow.  Too many fill-in elements in L or U");
       cidx_u[k+1] = cidx_u[k] - cidx_u[0] + w_len_u;
       cidx_l[k+1] = cidx_l[k] - cidx_l[0] + w_len_l;
 
       // The tricky part of the algorithm.  The arrays pointing to the first
       // working element of each column in the next iteration (Lfirst) or
       // the first working element of each row (Ufirst) are updated.  Also the
       // arrays working as lists cols_list and rows_list are filled with
       // indices pointing to Ufirst and Lfirst respectively.
@@ -771,20 +759,17 @@ void ilu_tp (octave_matrix_t& sm, octave
       if (w_data[k] == zero)
         {
           if (udiag == 1)
             {
               w_data[k] = droptol;
               iw_u.insert (k);
             }
           else
-            {
-              error ("ilu: encountered a pivot equal to 0");
-              break;
-            }
+            error ("ilu: encountered a pivot equal to 0");
         }
 
       // Scale the elements on the L part for IKJ version (milu = [col|off])
       if (opt != ROW)
         for (it = iw_l.begin (); it != iw_l.end (); ++it)
           {
             p_perm = iperm[*it];
             w_data[p_perm] = w_data[p_perm] / w_data[k];
@@ -834,20 +819,17 @@ void ilu_tp (octave_matrix_t& sm, octave
             }
           w_data[p_perm] = 0;
         }
       total_len_u += w_len_u;
       total_len_l += w_len_l;
       // Check if there are too many elements to be indexed with
       // octave_idx_type type due to fill-in during the process.
       if (total_len_l < 0 || total_len_u < 0)
-        {
-          error ("ilu: Integer overflow.  Too many fill-in elements in L or U");
-          break;
-        }
+        error ("ilu: Integer overflow.  Too many fill-in elements in L or U");
       if (opt == ROW)
         uptr[k] = total_len_u - 1;
       cidx_u[k+1] = cidx_u[k] - cidx_u[0] + w_len_u;
       cidx_l[k+1] = cidx_l[k] - cidx_l[0] + w_len_l;
 
       iw_l.clear ();
       iw_u.clear ();
     }
diff --git a/libinterp/corefcn/display.cc b/libinterp/corefcn/display.cc
--- a/libinterp/corefcn/display.cc
+++ b/libinterp/corefcn/display.cc
@@ -58,16 +58,12 @@ display_info::instance_ok (bool query)
     {
       instance = new display_info (query);
 
       if (instance)
         singleton_cleanup_list::add (cleanup_instance);
     }
 
   if (! instance)
-    {
-      error ("unable to create display_info object!");
-
-      retval = false;
-    }
+    error ("unable to create display_info object!");
 
   return retval;
 }
diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -1876,20 +1876,17 @@ convert (int x, int ibase, int obase)
   else
     {
       retval = tmp;
       int mult = ibase;
       while ((x = (x - tmp) / obase))
         {
           tmp = x % obase;
           if (tmp > ibase - 1)
-            {
-              error ("umask: invalid digit");
-              break;
-            }
+            error ("umask: invalid digit");
           retval += mult * tmp;
           mult *= ibase;
         }
     }
 
   return retval;
 }
 
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -94,20 +94,18 @@ validate_property_name (const std::strin
 
           matches.insert (*p);
         }
     }
 
   size_t num_matches = matches.size ();
 
   if (num_matches == 0)
-    {
-      error ("%s: unknown %s property %s",
-             who.c_str (), what.c_str (), pname.c_str ());
-    }
+    error ("%s: unknown %s property %s",
+           who.c_str (), what.c_str (), pname.c_str ());
   else if (num_matches > 1)
     {
       string_vector sv (matches);
 
       std::ostringstream os;
 
       sv.list_in_columns (os);
 
@@ -2211,20 +2209,18 @@ graphics_object::set (const octave_value
 */
 
 // Set properties given in two cell arrays containing names and values.
 void
 graphics_object::set (const Array<std::string>& pnames,
                       const Cell& values, octave_idx_type row)
 {
   if (pnames.numel () != values.columns ())
-    {
-      error ("set: number of names must match number of value columns (%d != %d)",
-             pnames.numel (), values.columns ());
-    }
+    error ("set: number of names must match number of value columns (%d != %d)",
+           pnames.numel (), values.columns ());
 
   octave_idx_type k = pnames.columns ();
 
   for (octave_idx_type column = 0; column < k; column++)
     {
       caseless_str pname = pnames(column);
       octave_value val  = values(row, column);
 
@@ -10811,23 +10807,21 @@ undocumented.\n\
 
           if (args.length () == 1)
             {
               caseless_str val (args(0).xstring_value ("drawnow: first argument must be a string"));
 
               if (val.compare ("expose"))
                 do_events = false;
               else
-                {
-                  error ("drawnow: invalid argument, 'expose' is only valid option");
-
-                  gh_manager::unlock ();
-
-                  return ovl ();
-                }
+              {
+                gh_manager::unlock ();
+
+                error ("drawnow: invalid argument, 'expose' is only valid option");
+              }
             }
 
           if (do_events)
             {
               gh_manager::unlock ();
 
               gh_manager::process_events ();
 
@@ -10873,25 +10867,24 @@ undocumented.\n\
               size_t pos = file.find_last_of (file_ops::dir_sep_chars ());
 
               if (pos != std::string::npos)
                 {
                   std::string dirname = file.substr (pos_c, pos+1);
 
                   file_stat fs (dirname);
 
-                  if (! (fs && fs.is_dir ()))
+                  if (! fs || ! fs.is_dir ())
                     {
+                      gh_manager::unlock ();
+
                       error ("drawnow: nonexistent directory '%s'",
                              dirname.c_str ());
-
-                      gh_manager::unlock ();
-
-                      return ovl ();
                     }
+
                 }
             }
 
           mono = (args.length () >= 3 ? args(2).xbool_value ("drawnow: MONO colormode must be a boolean value") : false);
 
           debug_file = (args.length () > 3 ? args(3).xstring_value ("drawnow: DEBUG_FILE must be a string") : "");
 
           graphics_handle h = gcf ();
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -849,20 +849,17 @@ public:
 
   std::string default_value (void) const { return default_val; }
 
   bool validate (const std::string& val, std::string& match)
   {
     bool retval = true;
 
     if (! contains (val, match))
-      {
-        error ("invalid value = %s", val.c_str ());
-        retval = false;
-      }
+      error ("invalid value = %s", val.c_str ());
 
     return retval;
   }
 
   bool contains (const std::string& val, std::string& match)
   {
     size_t k = 0;
 
@@ -2334,21 +2331,17 @@ private:
   static bool instance_ok (void)
   {
     bool retval = true;
 
     if (! instance)
       create_instance ();
 
     if (! instance)
-      {
-        error ("unable to create gh_manager!");
-
-        retval = false;
-      }
+      error ("unable to create gh_manager!");
 
     return retval;
   }
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
   OCTINTERP_API static gtk_manager *instance;
 
@@ -2721,29 +2714,25 @@ public:
     error ("base_graphics_object::set_defaults: invalid graphics object");
   }
 
   virtual octave_value get (bool all = false) const
   {
     if (valid_object ())
       return get_properties ().get (all);
     else
-      {
-        error ("base_graphics_object::get: invalid graphics object");
-      }
+      error ("base_graphics_object::get: invalid graphics object");
   }
 
   virtual octave_value get (const caseless_str& pname) const
   {
     if (valid_object ())
       return get_properties ().get (pname);
     else
-      {
-        error ("base_graphics_object::get: invalid graphics object");
-      }
+      error ("base_graphics_object::get: invalid graphics object");
   }
 
   virtual octave_value get_default (const caseless_str&) const;
 
   virtual octave_value get_factory_default (const caseless_str&) const;
 
   virtual octave_value get_defaults (void) const
   {
@@ -2778,29 +2767,25 @@ public:
 
   virtual octave_scalar_map values_as_struct (void);
 
   virtual graphics_handle get_parent (void) const
   {
     if (valid_object ())
       return get_properties ().get_parent ();
     else
-      {
-        error ("base_graphics_object::get_parent: invalid graphics object");
-      }
+      error ("base_graphics_object::get_parent: invalid graphics object");
   }
 
   graphics_handle get_handle (void) const
   {
     if (valid_object ())
       return get_properties ().get___myhandle__ ();
     else
-      {
-        error ("base_graphics_object::get_handle: invalid graphics object");
-      }
+      error ("base_graphics_object::get_handle: invalid graphics object");
   }
 
   virtual void remove_child (const graphics_handle& h)
   {
     if (valid_object ())
       get_properties ().remove_child (h);
     else
       error ("base_graphics_object::remove_child: invalid graphics object");
@@ -2865,19 +2850,17 @@ public:
     return type () == go_name;
   }
 
   virtual graphics_toolkit get_toolkit (void) const
   {
     if (valid_object ())
       return get_properties ().get_toolkit ();
     else
-      {
-        error ("base_graphics_object::get_toolkit: invalid graphics object");
-      }
+      error ("base_graphics_object::get_toolkit: invalid graphics object");
   }
 
   virtual void add_property_listener (const std::string& nm,
                                       const octave_value& v,
                                       listener_mode mode = POSTSET)
   {
     if (valid_object ())
       get_properties ().add_listener (nm, v, mode);
@@ -5899,21 +5882,17 @@ public:
   static bool instance_ok (void)
   {
     bool retval = true;
 
     if (! instance)
       create_instance ();
 
     if (! instance)
-      {
-        error ("unable to create gh_manager!");
-
-        retval = false;
-      }
+      error ("unable to create gh_manager!");
 
     return retval;
   }
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
   static graphics_handle get_handle (bool integer_figure_handle)
   {
diff --git a/libinterp/corefcn/hex2num.cc b/libinterp/corefcn/hex2num.cc
--- a/libinterp/corefcn/hex2num.cc
+++ b/libinterp/corefcn/hex2num.cc
@@ -111,20 +111,17 @@ hex2num ([\"402df854\"; \"41200000\"], \
                   if (ch >= 'a')
                     num.ival += static_cast<uint32_t> (ch - 'a' + 10);
                   else if (ch >= 'A')
                     num.ival += static_cast<uint32_t> (ch - 'A' + 10);
                   else
                     num.ival += static_cast<uint32_t> (ch - '0');
                 }
               else
-                {
-                  error ("hex2num: illegal character found in string S");
-                  break;
-                }
+                error ("hex2num: illegal character found in string S");
             }
 
           if (nc < nchars)
             num.ival <<= (nchars - nc) * 4;
 
           m(i) = num.dval;
         }
 
diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -858,20 +858,19 @@ Force Octave to assume the file is in Oc
                   file.close ();
                 }
               else
                 error ("load: unable to open input file '%s'",
                        orig_fname.c_str ());
             }
         }
       else
-        {
-          error ("load: unable to determine file format of '%s'",
-                 orig_fname.c_str ());
-        }
+        error ("load: unable to determine file format of '%s'",
+               orig_fname.c_str ());
+
     }
 
   return retval;
 }
 
 // Return TRUE if PATTERN has any special globbing chars in it.
 
 static bool
diff --git a/libinterp/corefcn/ls-mat-ascii.cc b/libinterp/corefcn/ls-mat-ascii.cc
--- a/libinterp/corefcn/ls-mat-ascii.cc
+++ b/libinterp/corefcn/ls-mat-ascii.cc
@@ -312,23 +312,18 @@ read_mat_ascii_data (std::istream& is, c
                                   break;
                                 }
                             }
 
                           if (tmp_stream.eof ())
                             break;
                         }
                       else
-                        {
-                          error ("load: failed to read matrix from file '%s'",
-                                 filename.c_str ());
-
-                          return retval;
-                        }
-
+                        error ("load: failed to read matrix from file '%s'",
+                               filename.c_str ());
                     }
                 }
             }
 
           if (is || is.eof ())
             {
               // FIXME: not sure this is best, but it works.
 
diff --git a/libinterp/corefcn/oct-errno.in.cc b/libinterp/corefcn/oct-errno.in.cc
--- a/libinterp/corefcn/oct-errno.in.cc
+++ b/libinterp/corefcn/oct-errno.in.cc
@@ -297,21 +297,17 @@ octave_errno::instance_ok (void)
     {
       instance = new octave_errno ();
 
       if (instance)
         singleton_cleanup_list::add (cleanup_instance);
     }
 
   if (! instance)
-    {
-      error ("unable to create errno object!");
-
-      retval = false;
-    }
+    error ("unable to create errno object!");
 
   return retval;
 }
 
 int
 octave_errno::lookup (const std::string& name)
 {
   return (instance_ok ()) ? instance->do_lookup (name) : -1;
diff --git a/libinterp/corefcn/pager.cc b/libinterp/corefcn/pager.cc
--- a/libinterp/corefcn/pager.cc
+++ b/libinterp/corefcn/pager.cc
@@ -375,21 +375,17 @@ octave_pager_stream::instance_ok (void)
     {
       instance = new octave_pager_stream ();
 
       if (instance)
         singleton_cleanup_list::add (cleanup_instance);
     }
 
   if (! instance)
-    {
-      error ("unable to create pager_stream object!");
-
-      retval = false;
-    }
+    error ("unable to create pager_stream object!");
 
   return retval;
 }
 
 octave_diary_stream *octave_diary_stream::instance = 0;
 
 octave_diary_stream::octave_diary_stream (void) : std::ostream (0), db (0)
 {
@@ -440,21 +436,17 @@ octave_diary_stream::instance_ok (void)
     {
       instance = new octave_diary_stream ();
 
       if (instance)
         singleton_cleanup_list::add (cleanup_instance);
     }
 
   if (! instance)
-    {
-      error ("unable to create diary_stream object!");
-
-      retval = false;
-    }
+    error ("unable to create diary_stream object!");
 
   return retval;
 }
 
 void
 flush_octave_stdout (void)
 {
   if (! flushing_output_to_pager)
diff --git a/libinterp/corefcn/sighandlers.cc b/libinterp/corefcn/sighandlers.cc
--- a/libinterp/corefcn/sighandlers.cc
+++ b/libinterp/corefcn/sighandlers.cc
@@ -193,21 +193,17 @@ private:
       {
         instance = new w32_interrupt_manager ();
 
         if (instance)
           singleton_cleanup_list::add (cleanup_instance);
       }
 
     if (! instance)
-      {
-        error ("unable to create w32_interrupt_manager");
-
-        retval = false;
-      }
+      error ("unable to create w32_interrupt_manager");
 
     return retval;
   }
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
 private:
   // A handle to the thread that is running the octave interpreter.
@@ -923,21 +919,17 @@ octave_child_list::instance_ok (void)
     {
       instance = new octave_child_list_rep ();
 
       if (instance)
         singleton_cleanup_list::add (cleanup_instance);
     }
 
   if (! instance)
-    {
-      error ("unable to create child list object!");
-
-      retval = false;
-    }
+    error ("unable to create child list object!");
 
   return retval;
 }
 
 void
 octave_child_list::insert (pid_t pid, octave_child::child_event_handler f)
 {
   if (instance_ok ())
diff --git a/libinterp/corefcn/sub2ind.cc b/libinterp/corefcn/sub2ind.cc
--- a/libinterp/corefcn/sub2ind.cc
+++ b/libinterp/corefcn/sub2ind.cc
@@ -48,20 +48,17 @@ get_dim_vector (const octave_value& val,
       dv.resize (std::max (n, static_cast<octave_idx_type> (2)));
       dv(1) = 1;
       for (octave_idx_type i = 0; i < n; i++)
         {
           octave_idx_type ii = dimsv(i);
           if (ii == dimsv(i) && ii >= 0)
             dv(i) = ii;
           else
-            {
-              error ("%s: dimension vector DIMS must contain integers", name);
-              break;
-            }
+            error ("%s: dimension vector DIMS must contain integers", name);
         }
     }
 
   return dv;
 }
 
 DEFUN (sub2ind, args, ,
        "-*- texinfo -*-\n\
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -88,21 +88,17 @@ public:
     static bool instance_ok (void)
     {
       bool retval = true;
 
       if (! instance)
         create_instance ();
 
       if (! instance)
-        {
-          error ("unable to create scope_id_cache object!");
-
-          retval = false;
-        }
+        error ("unable to create scope_id_cache object!");
 
       return retval;
     }
 
   private:
 
     // No copying!
 
diff --git a/libinterp/corefcn/syscalls.cc b/libinterp/corefcn/syscalls.cc
--- a/libinterp/corefcn/syscalls.cc
+++ b/libinterp/corefcn/syscalls.cc
@@ -643,20 +643,17 @@ convert (int x, int ibase, int obase)
   else
     {
       retval = tmp;
       int mult = ibase;
       while ((x = (x - tmp) / obase))
         {
           tmp = x % obase;
           if (tmp > ibase - 1)
-            {
-              error ("mkfifo: invalid digit");
-              break;
-            }
+            error ("mkfifo: invalid digit");
           retval += mult * tmp;
           mult *= ibase;
         }
     }
 
   return retval;
 }
 
diff --git a/libinterp/corefcn/toplev.h b/libinterp/corefcn/toplev.h
--- a/libinterp/corefcn/toplev.h
+++ b/libinterp/corefcn/toplev.h
@@ -130,21 +130,17 @@ public:
   static bool instance_ok (void)
   {
     bool retval = true;
 
     if (! instance)
       create_instance ();
 
     if (! instance)
-      {
-        error ("unable to create call stack object!");
-
-        retval = false;
-      }
+      error ("unable to create call stack object!");
 
     return retval;
   }
 
   // Current function (top of stack).
   static octave_function *current (void)
   {
     return instance_ok () ? instance->do_current () : 0;
diff --git a/libinterp/corefcn/txt-eng-ft.cc b/libinterp/corefcn/txt-eng-ft.cc
--- a/libinterp/corefcn/txt-eng-ft.cc
+++ b/libinterp/corefcn/txt-eng-ft.cc
@@ -84,21 +84,17 @@ public:
       {
         instance = new ft_manager ();
 
         if (instance)
           singleton_cleanup_list::add (cleanup_instance);
       }
 
     if (! instance)
-      {
-        error ("unable to create ft_manager!");
-
-        retval = false;
-      }
+      error ("unable to create ft_manager!");
 
     return retval;
   }
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
   static FT_Face get_font (const std::string& name, const std::string& weight,
                            const std::string& angle, double size)
diff --git a/libinterp/dldfcn/__eigs__.cc b/libinterp/dldfcn/__eigs__.cc
--- a/libinterp/dldfcn/__eigs__.cc
+++ b/libinterp/dldfcn/__eigs__.cc
@@ -187,22 +187,17 @@ Undocumented internal function.\n\
   warned_imaginary = false;
 
   unwind_protect frame;
 
   frame.protect_var (call_depth);
   call_depth++;
 
   if (call_depth > 1)
-    {
-      error ("eigs: invalid recursive call");
-      if (fcn_name.length ())
-        clear_function (fcn_name);
-      return retval;
-    }
+    error ("eigs: invalid recursive call");
 
   if (args(0).is_function_handle () || args(0).is_inline_function ()
       || args(0).is_string ())
     {
       if (args(0).is_string ())
         {
           std::string name = args(0).string_value ();
           std::string fname = "function y = ";
diff --git a/libinterp/octave-value/ov-bool-mat.cc b/libinterp/octave-value/ov-bool-mat.cc
--- a/libinterp/octave-value/ov-bool-mat.cc
+++ b/libinterp/octave-value/ov-bool-mat.cc
@@ -291,29 +291,23 @@ octave_bool_matrix::load_ascii (std::ist
                     error ("load: failed to load matrix constant");
                 }
               else if (nr == 0 || nc == 0)
                 matrix = boolMatrix (nr, nc);
               else
                 panic_impossible ();
             }
           else
-            {
-              error ("load: failed to extract number of rows and columns");
-              success = false;
-            }
+            error ("load: failed to extract number of rows and columns");
         }
       else
         panic_impossible ();
     }
   else
-    {
-      error ("load: failed to extract number of rows and columns");
-      success = false;
-    }
+    error ("load: failed to extract number of rows and columns");
 
   return success;
 }
 
 bool
 octave_bool_matrix::save_binary (std::ostream& os, bool& /* save_as_floats */)
 {
 
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -1610,21 +1610,17 @@ private:
   static bool instance_ok (void)
   {
     bool retval = true;
 
     if (! instance)
       create_instance ();
 
     if (! instance)
-      {
-        error ("unable to create cdef_manager!");
-
-        retval = false;
-      }
+      error ("unable to create cdef_manager!");
 
     return retval;
   }
 
   static void cleanup_instance (void)
   {
     delete instance;
 
diff --git a/libinterp/octave-value/ov-cx-mat.cc b/libinterp/octave-value/ov-cx-mat.cc
--- a/libinterp/octave-value/ov-cx-mat.cc
+++ b/libinterp/octave-value/ov-cx-mat.cc
@@ -415,29 +415,23 @@ octave_complex_matrix::load_ascii (std::
                     error ("load: failed to load matrix constant");
                 }
               else if (nr == 0 || nc == 0)
                 matrix = ComplexMatrix (nr, nc);
               else
                 panic_impossible ();
             }
           else
-            {
-              error ("load: failed to extract number of rows and columns");
-              success = false;
-            }
+            error ("load: failed to extract number of rows and columns");
         }
       else
         panic_impossible ();
     }
   else
-    {
-      error ("load: failed to extract number of rows and columns");
-      success = false;
-    }
+    error ("load: failed to extract number of rows and columns");
 
   return success;
 }
 
 bool
 octave_complex_matrix::save_binary (std::ostream& os, bool& save_as_floats)
 {
   dim_vector d = dims ();
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -448,20 +448,17 @@ octave_fcn_handle::load_ascii (std::istr
                 {
                   octave_value t2;
                   bool dummy;
 
                   std::string name
                     = read_text_data (is, std::string (), dummy, t2, i);
 
                   if (! is)
-                    {
-                      error ("load: failed to load anonymous function handle");
-                      break;
-                    }
+                    error ("load: failed to load anonymous function handle");
 
                   symbol_table::assign (name, t2, local_scope, 0);
                 }
             }
         }
       else
         {
           is.seekg (pos);
@@ -633,20 +630,17 @@ octave_fcn_handle::load_binary (std::ist
               bool dummy;
               std::string doc;
 
               std::string name =
                 read_binary_data (is, swap, fmt, std::string (),
                                   dummy, t2, doc);
 
               if (! is)
-                {
-                  error ("load: failed to load anonymous function handle");
-                  break;
-                }
+                error ("load: failed to load anonymous function handle");
 
               symbol_table::assign (name, t2, local_scope);
             }
         }
 
       if (is && success)
         {
           int parse_status;
diff --git a/libinterp/octave-value/ov-flt-cx-mat.cc b/libinterp/octave-value/ov-flt-cx-mat.cc
--- a/libinterp/octave-value/ov-flt-cx-mat.cc
+++ b/libinterp/octave-value/ov-flt-cx-mat.cc
@@ -389,29 +389,23 @@ octave_float_complex_matrix::load_ascii 
                     error ("load: failed to load matrix constant");
                 }
               else if (nr == 0 || nc == 0)
                 matrix = FloatComplexMatrix (nr, nc);
               else
                 panic_impossible ();
             }
           else
-            {
-              error ("load: failed to extract number of rows and columns");
-              success = false;
-            }
+            error ("load: failed to extract number of rows and columns");
         }
       else
         panic_impossible ();
     }
   else
-    {
-      error ("load: failed to extract number of rows and columns");
-      success = false;
-    }
+    error ("load: failed to extract number of rows and columns");
 
   return success;
 }
 
 bool
 octave_float_complex_matrix::save_binary (std::ostream& os, bool&)
 {
   dim_vector d = dims ();
diff --git a/libinterp/octave-value/ov-flt-re-mat.cc b/libinterp/octave-value/ov-flt-re-mat.cc
--- a/libinterp/octave-value/ov-flt-re-mat.cc
+++ b/libinterp/octave-value/ov-flt-re-mat.cc
@@ -416,29 +416,23 @@ octave_float_matrix::load_ascii (std::is
                     error ("load: failed to load matrix constant");
                 }
               else if (nr == 0 || nc == 0)
                 matrix = FloatMatrix (nr, nc);
               else
                 panic_impossible ();
             }
           else
-            {
-              error ("load: failed to extract number of rows and columns");
-              success = false;
-            }
+            error ("load: failed to extract number of rows and columns");
         }
       else
         panic_impossible ();
     }
   else
-    {
-      error ("load: failed to extract number of rows and columns");
-      success = false;
-    }
+    error ("load: failed to extract number of rows and columns");
 
   return success;
 }
 
 bool
 octave_float_matrix::save_binary (std::ostream& os, bool&)
 {
 
diff --git a/libinterp/octave-value/ov-re-mat.cc b/libinterp/octave-value/ov-re-mat.cc
--- a/libinterp/octave-value/ov-re-mat.cc
+++ b/libinterp/octave-value/ov-re-mat.cc
@@ -518,29 +518,23 @@ octave_matrix::load_ascii (std::istream&
                     error ("load: failed to load matrix constant");
                 }
               else if (nr == 0 || nc == 0)
                 matrix = Matrix (nr, nc);
               else
                 panic_impossible ();
             }
           else
-            {
-              error ("load: failed to extract number of rows and columns");
-              success = false;
-            }
+            error ("load: failed to extract number of rows and columns");
         }
       else
         panic_impossible ();
     }
   else
-    {
-      error ("load: failed to extract number of rows and columns");
-      success = false;
-    }
+    error ("load: failed to extract number of rows and columns");
 
   return success;
 }
 
 bool
 octave_matrix::save_binary (std::ostream& os, bool& save_as_floats)
 {
 
diff --git a/libinterp/octave-value/ov-str-mat.cc b/libinterp/octave-value/ov-str-mat.cc
--- a/libinterp/octave-value/ov-str-mat.cc
+++ b/libinterp/octave-value/ov-str-mat.cc
@@ -372,20 +372,17 @@ octave_char_matrix_str::load_ascii (std:
 
                       if (! is.read (ftmp, dv.numel ()) || ! is)
                         error ("load: failed to load string constant");
                       else
                         matrix = tmp;
                     }
                 }
               else
-                {
-                  error ("load: failed to read dimensions");
-                  success = false;
-                }
+                error ("load: failed to read dimensions");
             }
           else
             error ("load: failed to extract matrix size");
         }
       else if (kw == "elements")
         {
           int elements = val;
 
@@ -402,38 +399,31 @@ octave_char_matrix_str::load_ascii (std:
                     {
                       // Use this instead of a C-style character
                       // buffer so that we can properly handle
                       // embedded NUL characters.
                       charMatrix tmp (1, len);
                       char *ptmp = tmp.fortran_vec ();
 
                       if (len > 0 && ! is.read (ptmp, len))
-                        {
-                          error ("load: failed to load string constant");
-                          success = false;
-                          break;
-                        }
+                        error ("load: failed to load string constant");
                       else
                         {
                           if (len > max_len)
                             {
                               max_len = len;
                               chm.resize (elements, max_len, 0);
                             }
 
                           chm.insert (tmp, i, 0);
                         }
                     }
                   else
-                    {
-                      error ("load: failed to extract string length for element %d",
-                             i+1);
-                      success = false;
-                    }
+                    error ("load: failed to extract string length for element %d",
+                           i+1);
                 }
 
               matrix = chm;
             }
           else
             error ("load: failed to extract number of string elements");
         }
       else if (kw == "length")
@@ -446,36 +436,31 @@ octave_char_matrix_str::load_ascii (std:
               // but relatively harmless.
 
               // Use this instead of a C-style character buffer so
               // that we can properly handle embedded NUL characters.
               charMatrix tmp (1, len);
               char *ptmp = tmp.fortran_vec ();
 
               if (len > 0 && ! is.read (ptmp, len))
-                {
-                  error ("load: failed to load string constant");
-                }
+                error ("load: failed to load string constant");
               else
                 {
                   if (is)
                     matrix = tmp;
                   else
                     error ("load: failed to load string constant");
                 }
             }
         }
       else
         panic_impossible ();
     }
   else
-    {
-      error ("load: failed to extract number of rows and columns");
-      success = false;
-    }
+    error ("load: failed to extract number of rows and columns");
 
   return success;
 }
 
 bool
 octave_char_matrix_str::save_binary (std::ostream& os,
                                      bool& /* save_as_floats */)
 {
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -758,20 +758,17 @@ octave_struct::load_ascii (std::istream&
             error ("load: failed to load structure");
         }
       else if (len == 0)
         map = octave_map (dv);
       else
         panic_impossible ();
     }
   else
-    {
-      error ("load: failed to extract number of elements in structure");
-      success = false;
-    }
+    error ("load: failed to extract number of elements in structure");
 
   return success;
 }
 
 bool
 octave_struct::save_binary (std::ostream& os, bool& save_as_floats)
 {
   octave_map m = map_value ();
@@ -1400,20 +1397,17 @@ octave_scalar_struct::load_ascii (std::i
             error ("load: failed to load structure");
         }
       else if (len == 0)
         map = octave_scalar_map ();
       else
         panic_impossible ();
     }
   else
-    {
-      error ("load: failed to extract number of elements in structure");
-      success = false;
-    }
+    error ("load: failed to extract number of elements in structure");
 
   return success;
 }
 
 bool
 octave_scalar_struct::save_binary (std::ostream& os, bool& save_as_floats)
 {
   octave_map m = map_value ();
diff --git a/libinterp/octave-value/ov-typeinfo.cc b/libinterp/octave-value/ov-typeinfo.cc
--- a/libinterp/octave-value/ov-typeinfo.cc
+++ b/libinterp/octave-value/ov-typeinfo.cc
@@ -46,21 +46,17 @@ octave_value_typeinfo::instance_ok (void
     {
       instance = new octave_value_typeinfo ();
 
       if (instance)
         singleton_cleanup_list::add (cleanup_instance);
     }
 
   if (! instance)
-    {
-      error ("unable to create value type info object!");
-
-      retval = false;
-    }
+    error ("unable to create value type info object!");
 
   return retval;
 }
 
 int
 octave_value_typeinfo::register_type (const std::string& t_name,
                                       const std::string& c_name,
                                       const octave_value& val)
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -526,21 +526,19 @@ octave_user_function::do_multi_index_op 
   // For classdef constructor, pre-populate the output arguments
   // with the pre-initialized object instance, extracted above.
 
   if (is_classdef_constructor ())
     {
       if (ret_list)
         ret_list->define_from_arg_vector (ret_args);
       else
-        {
-          error ("%s: invalid classdef constructor, no output argument defined",
-                 dispatch_class ().c_str ());
-          return retval;
-        }
+        error ("%s: invalid classdef constructor, no output argument defined",
+               dispatch_class ().c_str ());
+
     }
 
   // Force parameter list to be undefined when this function exits.
   // Doing so decrements the reference counts on the values of local
   // variables that are also named function parameters.
 
   if (param_list)
     frame.add_method (param_list, &tree_parameter_list::undefine);
