# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1477620833 14400
#      Thu Oct 27 22:13:53 2016 -0400
# Node ID a3e4c8fb69cb16eff9434f36adf0585698b9992f
# Parent  340e37fd3c2046d2e45b64105826383a58f120ca
# Parent  9a0265ead11cc6de76ab87dc99bb05cc6e01f49d
maint: Merge stable to default.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -28,17 +28,17 @@ OCTAVE_MAJOR_VERSION=4
 OCTAVE_MINOR_VERSION=3
 OCTAVE_PATCH_VERSION=0+
 
 dnl PACKAGE_VERSION is set by the AC_INIT VERSION arg
 OCTAVE_VERSION="$PACKAGE_VERSION"
 
 OCTAVE_COPYRIGHT="Copyright (C) 2016 John W. Eaton and others."
 
-OCTAVE_RELEASE_DATE="2016-09-20"
+OCTAVE_RELEASE_DATE="2016-10-27"
 
 ## The "API version" is used as a way of checking that interfaces in the
 ## liboctave and libinterp libraries haven't changed in a backwardly
 ## incompatible way when loading .oct files.  A better way to do that is
 ## with library versioning, but not all systems support that.
 ## NOTE: This macro will be removed in a future version of Octave.  If
 ## you insist on checking for features using a version number, use the
 ## OCTAVE_MAJOR_VERSION, OCTAVE_MINOR_VERSION, and
diff --git a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
@@ -378,16 +378,19 @@ QConsolePrivate::QConsolePrivate (QWinTe
 
   QGridLayout* l = new QGridLayout (parent);
   l->setContentsMargins (0, 0, 0, 0);
   l->setSpacing (0);
   l->addWidget (m_consoleView, 0, 0);
   l->addWidget (m_horizontalScrollBar, 1, 0);
   l->addWidget (m_verticalScrollBar, 0, 1);
 
+  SetConsoleCP (65001);
+  SetConsoleOutputCP (65001);
+
   // Choose 15 (0xF) as index into the Windows console color map for the
   // background and 0 (0x0) as the index for the foreground.  This
   // selection corresponds to the indices used in the foregroundColor,
   // setForegroundColor, backgroundColor, and SetBackgroundColor
   // functions.
 
   SetConsoleTextAttribute (m_stdOut, 0xF0);
 
diff --git a/scripts/ode/odeplot.m b/scripts/ode/odeplot.m
--- a/scripts/ode/odeplot.m
+++ b/scripts/ode/odeplot.m
@@ -61,17 +61,17 @@
 ## This function is called by an ode solver function if it was specified in
 ## the @qcode{"OutputFcn"} property of an options structure created with
 ## @code{odeset}.  The ode solver will initially call the function with the
 ## syntax @code{odeplot ([@var{tfirst}, @var{tlast}], @var{y0}, "init")}.  The
 ## function initializes internal variables, creates a new figure window, and
 ## sets the x limits of the plot.  Subsequently, at each time step during the
 ## integration the ode solver calls @code{odeplot (@var{t}, @var{y}, [])}.
 ## At the end of the solution the ode solver calls
-## @code{odeplot ([], [], "end")} so that odeplot can perform any clean-up
+## @code{odeplot ([], [], "done")} so that odeplot can perform any clean-up
 ## actions required.
 ## @seealso{odeset, odeget, ode23, ode45}
 ## @end deftypefn
 
 function stop_solve = odeplot (t, y, flag)
 
   ## No input argument checking is done for better performance
   persistent hlines num_lines told yold;
@@ -88,18 +88,19 @@ function stop_solve = odeplot (t, y, fla
     endfor
     drawnow;
 
     retval = false;
 
   elseif (strcmp (flag, "init"))
     ## t is either the time slot [tstart tstop] or [t0, t1, ..., tn]
     ## y is the initial value vector for the ode solution
+    idx = 1;
     told = t(1);
-    yold = y(:);
+    yold = y(:,1);
     figure ();
     hlines = plot (told, yold, "o-");
     xlim ([t(1), t(end)]);  # Fix limits which also speeds up plotting
     num_lines = numel (hlines);
 
   elseif (strcmp (flag, "done"))
     ## Cleanup after ode solver has finished.
     hlines = num_lines = told = yold = idx = [];
