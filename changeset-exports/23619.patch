# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497639050 25200
#      Fri Jun 16 11:50:50 2017 -0700
# Node ID 6ed4d6e306ba4337de540796393640ab577b5e0e
# Parent  5e0acf41a9e16815d53bdb70c082204c262aeee3
maint: Deprecate is_NA and replace with isna.

* lo-mappers.h (is_NA): Use OCTAVE_DEPRECATED macro around function.
* lo-mappers.h (isna): New function.
* lo-mappers.h (octave_is_NA): Change message for this already deprecated
function to say that replacement is octave::math::isna.

* pr-output.cc, ov-complex.cc, ov-cx-mat.cc, ov-cx-sparse.cc, ov-float.cc,
ov-flt-complex.cc, ov-flt-cx-mat.cc, ov-flt-re-mat.cc, ov-re-mat.cc,
ov-re-sparse.cc, ov-scalar.cc, lo-mappers.cc:
Replace instances of is_NA with isna.

diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -1494,17 +1494,17 @@ pr_any_float (const float_format *fmt, s
                 }
               else
                 {
                   for (int i = sizeof (double) - 1; i >= 0; i--)
                     PRINT_CHAR_BITS (os, tmp.i[i]);
                 }
             }
         }
-      else if (octave::math::is_NA (d))
+      else if (octave::math::isna (d))
         {
           octave_preserve_stream_state stream_state (os);
 
           if (fw > 0)
             os << std::setw (fw) << "NA";
           else
             os << "NA";
         }
diff --git a/libinterp/octave-value/ov-complex.cc b/libinterp/octave-value/ov-complex.cc
--- a/libinterp/octave-value/ov-complex.cc
+++ b/libinterp/octave-value/ov-complex.cc
@@ -518,15 +518,15 @@ octave_complex::map (unary_mapper_t umap
     SCALAR_MAPPER (signum, octave::math::signum);
     SCALAR_MAPPER (sin, std::sin);
     SCALAR_MAPPER (sinh, std::sinh);
     SCALAR_MAPPER (sqrt, std::sqrt);
     SCALAR_MAPPER (tan, std::tan);
     SCALAR_MAPPER (tanh, std::tanh);
     SCALAR_MAPPER (isfinite, octave::math::isfinite);
     SCALAR_MAPPER (isinf, octave::math::isinf);
-    SCALAR_MAPPER (isna, octave::math::is_NA);
+    SCALAR_MAPPER (isna, octave::math::isna);
     SCALAR_MAPPER (isnan, octave::math::isnan);
 
     default:
       return octave_base_value::map (umap);
     }
 }
diff --git a/libinterp/octave-value/ov-cx-mat.cc b/libinterp/octave-value/ov-cx-mat.cc
--- a/libinterp/octave-value/ov-cx-mat.cc
+++ b/libinterp/octave-value/ov-cx-mat.cc
@@ -794,14 +794,14 @@ octave_complex_matrix::map (unary_mapper
     ARRAY_MAPPER (round, Complex, octave::math::round);
     ARRAY_MAPPER (roundb, Complex, octave::math::roundb);
     ARRAY_MAPPER (signum, Complex, octave::math::signum);
     ARRAY_MAPPER (sin, Complex, std::sin);
     ARRAY_MAPPER (sinh, Complex, std::sinh);
     ARRAY_MAPPER (sqrt, Complex, std::sqrt);
     ARRAY_MAPPER (tan, Complex, std::tan);
     ARRAY_MAPPER (tanh, Complex, std::tanh);
-    ARRAY_MAPPER (isna, bool, octave::math::is_NA);
+    ARRAY_MAPPER (isna, bool, octave::math::isna);
 
     default:
       return octave_base_value::map (umap);
     }
 }
diff --git a/libinterp/octave-value/ov-cx-sparse.cc b/libinterp/octave-value/ov-cx-sparse.cc
--- a/libinterp/octave-value/ov-cx-sparse.cc
+++ b/libinterp/octave-value/ov-cx-sparse.cc
@@ -945,16 +945,16 @@ octave_sparse_complex_matrix::map (unary
     ARRAY_MAPPER (roundb, Complex, octave::math::roundb);
     ARRAY_MAPPER (signum, Complex, octave::math::signum);
     ARRAY_MAPPER (sin, Complex, std::sin);
     ARRAY_MAPPER (sinh, Complex, std::sinh);
     ARRAY_MAPPER (sqrt, Complex, std::sqrt);
     ARRAY_MAPPER (tan, Complex, std::tan);
     ARRAY_MAPPER (tanh, Complex, std::tanh);
     ARRAY_MAPPER (isnan, bool, octave::math::isnan);
-    ARRAY_MAPPER (isna, bool, octave::math::is_NA);
+    ARRAY_MAPPER (isna, bool, octave::math::isna);
     ARRAY_MAPPER (isinf, bool, octave::math::isinf);
     ARRAY_MAPPER (isfinite, bool, octave::math::isfinite);
 
     default: // Attempt to go via dense matrix.
       return octave_base_sparse<SparseComplexMatrix>::map (umap);
     }
 }
diff --git a/libinterp/octave-value/ov-float.cc b/libinterp/octave-value/ov-float.cc
--- a/libinterp/octave-value/ov-float.cc
+++ b/libinterp/octave-value/ov-float.cc
@@ -393,17 +393,17 @@ octave_float_scalar::map (unary_mapper_t
     SCALAR_MAPPER (signum, octave::math::signum);
     SCALAR_MAPPER (sin, ::sinf);
     SCALAR_MAPPER (sinh, ::sinhf);
     SCALAR_MAPPER (sqrt, octave::math::rc_sqrt);
     SCALAR_MAPPER (tan, ::tanf);
     SCALAR_MAPPER (tanh, ::tanhf);
     SCALAR_MAPPER (isfinite, octave::math::isfinite);
     SCALAR_MAPPER (isinf, octave::math::isinf);
-    SCALAR_MAPPER (isna, octave::math::is_NA);
+    SCALAR_MAPPER (isna, octave::math::isna);
     SCALAR_MAPPER (isnan, octave::math::isnan);
     SCALAR_MAPPER (xsignbit, octave::math::signbit);
 
     // Special cases for Matlab compatibility.
     case umap_xtolower:
     case umap_xtoupper:
       return scalar;
 
diff --git a/libinterp/octave-value/ov-flt-complex.cc b/libinterp/octave-value/ov-flt-complex.cc
--- a/libinterp/octave-value/ov-flt-complex.cc
+++ b/libinterp/octave-value/ov-flt-complex.cc
@@ -466,15 +466,15 @@ octave_float_complex::map (unary_mapper_
     SCALAR_MAPPER (signum, octave::math::signum);
     SCALAR_MAPPER (sin, std::sin);
     SCALAR_MAPPER (sinh, std::sinh);
     SCALAR_MAPPER (sqrt, std::sqrt);
     SCALAR_MAPPER (tan, std::tan);
     SCALAR_MAPPER (tanh, std::tanh);
     SCALAR_MAPPER (isfinite, octave::math::isfinite);
     SCALAR_MAPPER (isinf, octave::math::isinf);
-    SCALAR_MAPPER (isna, octave::math::is_NA);
+    SCALAR_MAPPER (isna, octave::math::isna);
     SCALAR_MAPPER (isnan, octave::math::isnan);
 
     default:
       return octave_base_value::map (umap);
     }
 }
diff --git a/libinterp/octave-value/ov-flt-cx-mat.cc b/libinterp/octave-value/ov-flt-cx-mat.cc
--- a/libinterp/octave-value/ov-flt-cx-mat.cc
+++ b/libinterp/octave-value/ov-flt-cx-mat.cc
@@ -746,14 +746,14 @@ octave_float_complex_matrix::map (unary_
     ARRAY_MAPPER (round, FloatComplex, octave::math::round);
     ARRAY_MAPPER (roundb, FloatComplex, octave::math::roundb);
     ARRAY_MAPPER (signum, FloatComplex, octave::math::signum);
     ARRAY_MAPPER (sin, FloatComplex, std::sin);
     ARRAY_MAPPER (sinh, FloatComplex, std::sinh);
     ARRAY_MAPPER (sqrt, FloatComplex, std::sqrt);
     ARRAY_MAPPER (tan, FloatComplex, std::tan);
     ARRAY_MAPPER (tanh, FloatComplex, std::tanh);
-    ARRAY_MAPPER (isna, bool, octave::math::is_NA);
+    ARRAY_MAPPER (isna, bool, octave::math::isna);
 
     default:
       return octave_base_value::map (umap);
     }
 }
diff --git a/libinterp/octave-value/ov-flt-re-mat.cc b/libinterp/octave-value/ov-flt-re-mat.cc
--- a/libinterp/octave-value/ov-flt-re-mat.cc
+++ b/libinterp/octave-value/ov-flt-re-mat.cc
@@ -831,17 +831,17 @@ octave_float_matrix::map (unary_mapper_t
     ARRAY_MAPPER (round, float, octave::math::round);
     ARRAY_MAPPER (roundb, float, octave::math::roundb);
     ARRAY_MAPPER (signum, float, octave::math::signum);
     ARRAY_MAPPER (sin, float, ::sinf);
     ARRAY_MAPPER (sinh, float, ::sinhf);
     RC_ARRAY_MAPPER (sqrt, FloatComplex, octave::math::rc_sqrt);
     ARRAY_MAPPER (tan, float, ::tanf);
     ARRAY_MAPPER (tanh, float, ::tanhf);
-    ARRAY_MAPPER (isna, bool, octave::math::is_NA);
+    ARRAY_MAPPER (isna, bool, octave::math::isna);
     ARRAY_MAPPER (xsignbit, float, octave::math::signbit);
 
     // Special cases for Matlab compatibility.
     case umap_xtolower:
     case umap_xtoupper:
       return matrix;
 
     case umap_xisalnum:
diff --git a/libinterp/octave-value/ov-re-mat.cc b/libinterp/octave-value/ov-re-mat.cc
--- a/libinterp/octave-value/ov-re-mat.cc
+++ b/libinterp/octave-value/ov-re-mat.cc
@@ -957,17 +957,17 @@ octave_matrix::map (unary_mapper_t umap)
     ARRAY_MAPPER (round, double, octave::math::round);
     ARRAY_MAPPER (roundb, double, octave::math::roundb);
     ARRAY_MAPPER (signum, double, octave::math::signum);
     ARRAY_MAPPER (sin, double, ::sin);
     ARRAY_MAPPER (sinh, double, ::sinh);
     RC_ARRAY_MAPPER (sqrt, Complex, octave::math::rc_sqrt);
     ARRAY_MAPPER (tan, double, ::tan);
     ARRAY_MAPPER (tanh, double, ::tanh);
-    ARRAY_MAPPER (isna, bool, octave::math::is_NA);
+    ARRAY_MAPPER (isna, bool, octave::math::isna);
     ARRAY_MAPPER (xsignbit, double, octave::math::signbit);
 
     // Special cases for Matlab compatibility.
     case umap_xtolower:
     case umap_xtoupper:
       return matrix;
 
     case umap_xisalnum:
diff --git a/libinterp/octave-value/ov-re-sparse.cc b/libinterp/octave-value/ov-re-sparse.cc
--- a/libinterp/octave-value/ov-re-sparse.cc
+++ b/libinterp/octave-value/ov-re-sparse.cc
@@ -936,16 +936,16 @@ octave_sparse_matrix::map (unary_mapper_
     ARRAY_MAPPER (roundb, double, octave::math::roundb);
     ARRAY_MAPPER (signum, double, octave::math::signum);
     ARRAY_MAPPER (sin, double, ::sin);
     ARRAY_MAPPER (sinh, double, ::sinh);
     ARRAY_MAPPER (sqrt, Complex, octave::math::rc_sqrt);
     ARRAY_MAPPER (tan, double, ::tan);
     ARRAY_MAPPER (tanh, double, ::tanh);
     ARRAY_MAPPER (isnan, bool, octave::math::isnan);
-    ARRAY_MAPPER (isna, bool, octave::math::is_NA);
+    ARRAY_MAPPER (isna, bool, octave::math::isna);
     ARRAY_MAPPER (isinf, bool, octave::math::isinf);
     ARRAY_MAPPER (isfinite, bool, octave::math::isfinite);
 
     default: // Attempt to go via dense matrix.
       return octave_base_sparse<SparseMatrix>::map (umap);
     }
 }
diff --git a/libinterp/octave-value/ov-scalar.cc b/libinterp/octave-value/ov-scalar.cc
--- a/libinterp/octave-value/ov-scalar.cc
+++ b/libinterp/octave-value/ov-scalar.cc
@@ -414,17 +414,17 @@ octave_scalar::map (unary_mapper_t umap)
     SCALAR_MAPPER (signum, octave::math::signum);
     SCALAR_MAPPER (sin, ::sin);
     SCALAR_MAPPER (sinh, ::sinh);
     SCALAR_MAPPER (sqrt, octave::math::rc_sqrt);
     SCALAR_MAPPER (tan, ::tan);
     SCALAR_MAPPER (tanh, ::tanh);
     SCALAR_MAPPER (isfinite, octave::math::isfinite);
     SCALAR_MAPPER (isinf, octave::math::isinf);
-    SCALAR_MAPPER (isna, octave::math::is_NA);
+    SCALAR_MAPPER (isna, octave::math::isna);
     SCALAR_MAPPER (isnan, octave::math::isnan);
     SCALAR_MAPPER (xsignbit, octave::math::signbit);
 
     // Special cases for Matlab compatibility.
     case umap_xtolower:
     case umap_xtoupper:
       return scalar;
 
diff --git a/liboctave/numeric/lo-mappers.cc b/liboctave/numeric/lo-mappers.cc
--- a/liboctave/numeric/lo-mappers.cc
+++ b/liboctave/numeric/lo-mappers.cc
@@ -37,37 +37,37 @@ along with Octave; see the file COPYING.
 // but now we just use std:: and explicit wrappers in C++ code so maybe
 // some of the forwarding functions can be defined inline here.
 
 namespace octave
 {
   namespace math
   {
     bool
-    is_NA (double x)
+    isna (double x)
     {
       return lo_ieee_is_NA (x);
     }
 
     bool
-    is_NA (const Complex& x)
+    isna (const Complex& x)
     {
-      return (is_NA (std::real (x)) || is_NA (std::imag (x)));
+      return (isna (std::real (x)) || isna (std::imag (x)));
     }
 
     bool
-    is_NA (float x)
+    isna (float x)
     {
       return lo_ieee_is_NA (x);
     }
 
     bool
-    is_NA (const FloatComplex& x)
+    isna (const FloatComplex& x)
     {
-      return (is_NA (std::real (x)) || is_NA (std::imag (x)));
+      return (isna (std::real (x)) || isna (std::imag (x)));
     }
 
     bool
     is_NaN_or_NA (const Complex& x)
     {
       return (isnan (std::real (x)) || isnan (std::imag (x)));
     }
 
diff --git a/liboctave/numeric/lo-mappers.h b/liboctave/numeric/lo-mappers.h
--- a/liboctave/numeric/lo-mappers.h
+++ b/liboctave/numeric/lo-mappers.h
@@ -32,21 +32,31 @@ along with Octave; see the file COPYING.
 #include "lo-math.h"
 #include "oct-cmplx.h"
 #include "oct-inttypes-fwd.h"
 
 namespace octave
 {
   namespace math
   {
-    extern OCTAVE_API bool is_NA (double x);
-    extern OCTAVE_API bool is_NA (float x);
+    extern OCTAVE_API bool isna (double x);
+    OCTAVE_DEPRECATED (4.4, "use 'octave::math::isna' instead")
+    inline bool is_NA (double x) { return octave::math::isna (x); }
+
+    extern OCTAVE_API bool isna (float x);
+    OCTAVE_DEPRECATED (4.4, "use 'octave::math::isna' instead")
+    inline bool is_NA (float x) { return octave::math::isna (x); }
 
-    extern OCTAVE_API bool is_NA (const Complex& x);
-    extern OCTAVE_API bool is_NA (const FloatComplex& x);
+    extern OCTAVE_API bool isna (const Complex& x);
+    OCTAVE_DEPRECATED (4.4, "use 'octave::math::isna' instead")
+    inline bool is_NA (const Complex& x) { return octave::math::isna (x); }
+
+    extern OCTAVE_API bool isna (const FloatComplex& x);
+    OCTAVE_DEPRECATED (4.4, "use 'octave::math::isna' instead")
+    inline bool is_NA (const FloatComplex& x) { return octave::math::isna (x); }
 
     extern OCTAVE_API bool is_NaN_or_NA (const Complex& x);
     extern OCTAVE_API bool is_NaN_or_NA (const FloatComplex& x);
 
     extern OCTAVE_API double copysign (double x, double y);
     extern OCTAVE_API float copysign (float x, float y);
 
     extern OCTAVE_API double signbit (double x);
@@ -507,26 +517,26 @@ namespace octave
 
     extern OCTAVE_API Complex rc_sqrt (double);
     extern OCTAVE_API FloatComplex rc_sqrt (float);
   }
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::is_NA' instead")
-inline bool octave_is_NA (double x) { return octave::math::is_NA (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::is_NA' instead")
-inline bool octave_is_NA (float x) { return octave::math::is_NA (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::is_NA' instead")
-inline bool octave_is_NA (const Complex& x) { return octave::math::is_NA (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::is_NA' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::isna' instead")
+inline bool octave_is_NA (double x) { return octave::math::isna (x); }
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::isna' instead")
+inline bool octave_is_NA (float x) { return octave::math::isna (x); }
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::isna' instead")
+inline bool octave_is_NA (const Complex& x) { return octave::math::isna (x); }
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::isna' instead")
 inline bool octave_is_NA (const FloatComplex& x)
 {
-  return octave::math::is_NA (x);
+  return octave::math::isna (x);
 }
 
 OCTAVE_DEPRECATED (4.2, "use 'octave::math::acos' instead")
 inline Complex acos (const Complex& x) { return octave::math::acos (x); }
 OCTAVE_DEPRECATED (4.2, "use 'octave::math::acos' instead")
 inline FloatComplex acos (const FloatComplex& x)
 {
   return octave::math::acos (x);
