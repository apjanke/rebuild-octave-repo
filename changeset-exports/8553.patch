# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1232549434 -3600
#      Wed Jan 21 15:50:34 2009 +0100
# Node ID c7ff200e45f59f30b0782030d904e1c8c5d4ee06
# Parent  3591fe09f3b1a74da26171a660e3aa9bb1a4f01c
optimize range-scalar ops

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2009-01-21  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Range.cc ( operator + (double x, const Range& r),
+	operator + (const Range& r, double x),
+	operator - (double x, const Range& r),
+	operator - (const Range& r, double x),
+	operator * (double x, const Range& r),
+	operator * (const Range& r, double x)): New operators.
+	* Range.h: Declare them.
+
+
 2009-01-20  John W. Eaton  <jwe@octave.org>
 
 	* file-stat.h, file-stat.cc (class base_file_stat): New base class.
 	(class file_stat): Derive from base_file_stat.
 	(class file_fstat): New class, derived from base_file_stat.
 
 2009-01-17  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/liboctave/Range.cc b/liboctave/Range.cc
--- a/liboctave/Range.cc
+++ b/liboctave/Range.cc
@@ -289,16 +289,47 @@ operator >> (std::istream& is, Range& a)
 }
 
 Range
 operator - (const Range& r)
 {
   return Range (-r.base (), -r.limit (), -r.inc ());
 }
 
+Range operator + (double x, const Range& r)
+{
+  return Range (x + r.base (), x + r.limit (), r.inc ());
+}
+
+Range operator + (const Range& r, double x)
+{
+  return Range (r.base () + x, r.limit () + x, r.inc ());
+}
+
+Range operator - (double x, const Range& r)
+{
+  return Range (x - r.base (), x - r.limit (), -r.inc ());
+}
+
+Range operator - (const Range& r, double x)
+{
+  return Range (r.base () - x, r.limit () - x, r.inc ());
+}
+
+Range operator * (double x, const Range& r)
+{
+  return Range (x * r.base (), x * r.limit (), x * r.inc ());
+}
+
+Range operator * (const Range& r, double x)
+{
+  return Range (r.base () * x, r.limit () * x, r.inc () * x);
+}
+
+
 // C  See Knuth, Art Of Computer Programming, Vol. 1, Problem 1.2.4-5.
 // C
 // C===Tolerant FLOOR function.
 // C
 // C    X  -  is given as a Double Precision argument to be operated on.
 // C          It is assumed that X is represented with M mantissa bits.
 // C    CT -  is   given   as   a   Comparison   Tolerance   such   that
 // C          0.LT.CT.LE.3-SQRT(5)/2. If the relative difference between
diff --git a/liboctave/Range.h b/liboctave/Range.h
--- a/liboctave/Range.h
+++ b/liboctave/Range.h
@@ -116,15 +116,27 @@ Range
 
   octave_idx_type nelem_internal (void) const;
 
   void clear_cache (void) const { cache.resize (0, 0); }
 };
 
 extern OCTAVE_API Range operator - (const Range& r);
 
+extern OCTAVE_API Range operator + (double x, const Range& r);
+
+extern OCTAVE_API Range operator + (const Range& r, double x);
+
+extern OCTAVE_API Range operator - (double x, const Range& r);
+
+extern OCTAVE_API Range operator - (const Range& r, double x);
+
+extern OCTAVE_API Range operator * (double x, const Range& r);
+
+extern OCTAVE_API Range operator * (const Range& r, double x);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-01-21  Jaroslav Hajek  <highegg@gmail.com>
+	
+	* OPERATORS/op-range.cc: Define & register range-scalar ops.
+
 2009-01-21  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov.h (octave_value::subsref (..., bool auto_add)): New method.
 	(octave_value::next_subsref (bool auto_add, ...)): New method.
 	* ov.cc (octave_value::next_subsref (bool auto_add, ...)): New method.
 	* ov-base.h (octave_base_value::subsref (..., bool auto_add)): New
 	virtual method.
 	* ov-base.cc (octave_base_value::subsref (..., bool auto_add)): New
diff --git a/src/OPERATORS/op-range.cc b/src/OPERATORS/op-range.cc
--- a/src/OPERATORS/op-range.cc
+++ b/src/OPERATORS/op-range.cc
@@ -55,16 +55,23 @@ DEFUNOP_OP (uminus, range, -)
 
 DEFUNOP (transpose, range)
 {
   CAST_UNOP_ARG (const octave_range&);
 
   return octave_value (v.matrix_value().transpose ());
 }
 
+DEFBINOP_OP (addrs, range, scalar, +)
+DEFBINOP_OP (addsr, scalar, range, +)
+DEFBINOP_OP (subrs, range, scalar, -)
+DEFBINOP_OP (subsr, scalar, range, -)
+DEFBINOP_OP (mulrs, range, scalar, *)
+DEFBINOP_OP (mulsr, scalar, range, *)
+
 DEFNDCATOP_FN (r_r, range, range, array, array, concat)
 DEFNDCATOP_FN (r_s, range, scalar, array, array, concat)
 DEFNDCATOP_FN (r_m, range, matrix, array, array, concat)
 DEFNDCATOP_FN (r_cs, range, complex, array, complex_array, concat)
 DEFNDCATOP_FN (r_cm, range, complex_matrix, array, complex_array, concat)
 DEFNDCATOP_FN (r_b, range, bool, array, array, concat)
 DEFNDCATOP_FN (r_bm, range, bool_matrix, array, array, concat)
 DEFNDCATOP_FN (r_chm, range, char_matrix, array, char_array, concat)
@@ -94,16 +101,23 @@ void
 install_range_ops (void)
 {
   INSTALL_UNOP (op_not, octave_range, not);
   INSTALL_UNOP (op_uplus, octave_range, uplus);
   INSTALL_UNOP (op_uminus, octave_range, uminus);
   INSTALL_UNOP (op_transpose, octave_range, transpose);
   INSTALL_UNOP (op_hermitian, octave_range, transpose);
 
+  INSTALL_BINOP (op_add, octave_range, octave_scalar, addrs);
+  INSTALL_BINOP (op_add, octave_scalar, octave_range, addsr);
+  INSTALL_BINOP (op_sub, octave_range, octave_scalar, subrs);
+  INSTALL_BINOP (op_sub, octave_scalar, octave_range, subsr);
+  INSTALL_BINOP (op_mul, octave_range, octave_scalar, mulrs);
+  INSTALL_BINOP (op_mul, octave_scalar, octave_range, mulsr);
+
   INSTALL_CATOP (octave_range, octave_range, r_r);
   INSTALL_CATOP (octave_range, octave_scalar, r_s);
   INSTALL_CATOP (octave_range, octave_matrix, r_m);
   INSTALL_CATOP (octave_range, octave_complex, r_cs);
   INSTALL_CATOP (octave_range, octave_complex_matrix, r_cm);
   INSTALL_CATOP (octave_range, octave_bool, r_b);
   INSTALL_CATOP (octave_range, octave_bool_matrix, r_bm);
   INSTALL_CATOP (octave_range, octave_char_matrix, r_chm);
