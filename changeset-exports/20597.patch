# HG changeset patch
# User John Donoghue <john.donoghue@ieee.org>
# Date 1444352365 14400
#      Thu Oct 08 20:59:25 2015 -0400
# Branch stable
# Node ID 7890893a0e69752c867f0d325f68e9d11a6c26b1
# Parent  45759620a9a541c5e512d64d39d33ff851b8bb96
Add uiXXXX documentation (Bug #46076)

* scripts/gui/uicontextmenu.m: add function documentation.

* scripts/gui/uitoolbar.m: add function documentation.

* scripts/gui/uitoggletool.m: add function documentation.

* scripts/gui/uipushtool.m: add function documentation.

* scripts/gui/uipanel.m: add function documentation.

* scripts/gui/uicontrol.m: add function documentation.

diff --git a/scripts/gui/uicontextmenu.m b/scripts/gui/uicontextmenu.m
--- a/scripts/gui/uicontextmenu.m
+++ b/scripts/gui/uicontextmenu.m
@@ -12,17 +12,46 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{hui} =} uicontextmenu ("Name", value, @dots{})
+## @deftypefn {Function File} {@var{hui} =} uicontextmenu (@var{property}, @var{value}, @dots{})
+## @deftypefnx {Function File} {@var{hui} =} uicontextmenu (@var{h}, @var{property}, @var{value}, @dots{})
+##
+## Create a uicontextmenu object and return a handle to it.
+##
+## If @var{h} is omitted then a uicontextmenu for the current figure is
+## created. If no figure is available, a new figure is created first. 
+##
+## If @var{h} is given then a uicontextmenu relative to @var{h} is created. 
+## 
+## Any provided property value pairs will override the default values of the created 
+## uicontextmenu object.
+##
+## Examples:
+##
+## @example
+## @group
+## % create figure and uicontextmenu
+## f = figure;
+## c = uicontextmenu (f);
+##
+## % create menus in the context menu
+## m1 = uimenu ("parent",c,"label","Menu item 1","callback","disp('menu item 1')");
+## m2 = uimenu ("parent",c,"label","Menu item 2","callback","disp('menu item 2')");
+##
+## % set the context menu for the figure
+## set (f, "uicontextmenu", c);
+## @end group
+## @end example
+## @seealso{figure, uimenu}
 ## @end deftypefn
 
 ## Author: goffioul
 
 function hui = uicontextmenu (varargin)
 
   [h, args] = __uiobject_split_args__ ("uicontextmenu", varargin, {"figure"});
   hui = __go_uicontextmenu__ (h, args{:});
diff --git a/scripts/gui/uicontrol.m b/scripts/gui/uicontrol.m
--- a/scripts/gui/uicontrol.m
+++ b/scripts/gui/uicontrol.m
@@ -12,19 +12,87 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {@var{hui} =} uicontrol ("Name", value, @dots{})
-## @deftypefnx {Function File} {@var{hui} =} uicontrol (@var{parent}, "Name", value, @dots{})
+## @deftypefn  {Function File} {@var{hui} =} uicontrol (@var{property}, @var{value}, @dots{})
+## @deftypefnx {Function File} {@var{hui} =} uicontrol (@var{parent}, @var{property}, @var{value}, @dots{})
 ## @deftypefnx {Function File} {} uicontrol (@var{h})
+##
+## Create a uicontrol object and return a handle to it.
+##
+## uicontrols are used to create simple interactive controls such as push buttons, checkboxes, edit and list controls.
+##
+## If @var{parent} is omitted then a uicontrol for the current figure is
+## created. If no figure is available, a new figure is created first. 
+##
+## If @var{parent} is given then a uicontrol relative to @var{parent} is created. 
+## 
+## Any provided property value pairs will override the default values of the created 
+## uicontrol object. 
+##
+## Control of the type of uicontrol created is through the use of the @var{style} property.
+## If no style property is provided, a push button will be created.
+##
+## Valid styles for uicontrol are:
+##
+## @table @asis
+## @item @qcode{"checkbox"}
+## Create a checkbox control that allows user on/off selection.
+##
+## @item @qcode{"edit"}
+## Create a edit control that allows user input of single or multiple lines of text.
+##
+## @item @qcode{"listbox"}
+## Create a listbox control that displays a lit of items and allows user slelection of 
+## single or multiple items.
+##
+## @item @qcode{"popupmenu"}
+## Create a popupmenu control that displays a list of options that can be selected 
+## when the user clicks on the control.
+##
+## @item @qcode{"pushbutton"}
+## Create a push button control that allows user to press to cause an action.
+##
+## @item @qcode{"radiobutton"}
+## Create a radio button control intended to be used for mutually exclusive input in a group of
+## of radiobutton controls.
+##
+## @item @qcode{"slider"}
+## Create a slider control that allows user selection from a range of values by sliding 
+## knob on the control.
+##
+## @item @qcode{"text"}
+## Create a static text control to display single or multiple lines of text.
+##
+## @item @qcode{"togglebutton"}
+## Create a toggle button control that appears like a push button but allows the user to 
+## select between two states.
+##
+## @end table
+##
+## Examples:
+##
+## @example
+## @group
+## % create figure and panel on it
+## f = figure;
+## % create a button (default style)
+## b1 = uicontrol (f, "string", "A Button", "position",[10 10 150 40]);
+## % create an edit control
+## e1 = uicontrol (f, "style", "edit", "string", "editable text", "position",[10 60 300 40]);
+## % create a checkbox
+## c1 = uicontrol (f, "style", "checkbox", "string", "a checkbox", "position",[10 120 150 40]);
+## @end group
+## @end example
+## @seealso{figure, uipanel}
 ## @end deftypefn
 
 ## Author: goffioul
 
 function hui = uicontrol (varargin)
 
   if (nargin == 1 && ishandle (varargin{1})
       && strcmpi (get (varargin{1}, "type"), "uicontrol"))
diff --git a/scripts/gui/uipanel.m b/scripts/gui/uipanel.m
--- a/scripts/gui/uipanel.m
+++ b/scripts/gui/uipanel.m
@@ -12,18 +12,46 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {@var{hui} =} uipanel ("Name", value, @dots{})
-## @deftypefnx {Function File} {@var{hui} =} uipanel (@var{parent}, "Name", value, @dots{})
+## @deftypefn  {Function File} {@var{hui} =} uipanel (@var{property}, @var{value}, @dots{})
+## @deftypefnx {Function File} {@var{hui} =} uipanel (@var{parent}, "@var{property}, @var{value}, @dots{})
+##
+## Create a uipanel object and return a handle to it.
+##
+## uipanels are used as containers to group other uicontrol objects.
+##
+## If @var{parent} is omitted then a uipanel for the current figure is
+## created. If no figure is available, a new figure is created first. 
+##
+## If @var{parent} is given then a uipanel relative to @var{parent} is created. 
+## 
+## Any provided property value pairs will override the default values of the created 
+## uipanel object.
+##
+## Examples:
+##
+## @example
+## @group
+## % create figure and panel on it
+## f = figure;
+## p = uipanel ("title", "Panel Title", "position", [.25 .25 .5 .5]);
+##
+## % add two buttons to the panel
+## b1 = uicontrol ("parent", p, "string", "A Button", "position",[18 10 150 36]);
+## b2 = uicontrol ("parent", p, "string", "Another Button", "position",[18 60 150 36]);
+##
+## @end group
+## @end example
+## @seealso{figure, uicontrol}
 ## @end deftypefn
 
 ## Author: goffioul
 
 function hui = uipanel (varargin)
 
   [h, args] = __uiobject_split_args__ ("uipanel", varargin,
                                        {"figure", "uipanel", "uibuttongroup"});
diff --git a/scripts/gui/uipushtool.m b/scripts/gui/uipushtool.m
--- a/scripts/gui/uipushtool.m
+++ b/scripts/gui/uipushtool.m
@@ -12,18 +12,48 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {@var{hui} =} uipushtool ("Name", value, @dots{})
-## @deftypefnx {Function File} {@var{hui} =} uipushtool (@var{parent}, "Name", value, @dots{})
+## @deftypefn  {Function File} {@var{hui} =} uipushtool (@var{property}, @var{value}, @dots{})
+## @deftypefnx {Function File} {@var{hui} =} uipushtool (@var{parent}, @var{property}, @var{value}, @dots{})
+##
+## Create a uipushtool object and return a handle to it.
+##
+## uipushtools are buttons that appear on a figure toolbar. The button is created with a border that
+## is shown when the user hovers over the button. An image can be set using the cdata property.
+##
+## If @var{parent} is omitted then a uipushtool for the current figure is
+## created. If no figure is available, a new figure is created first.  If a figure is
+## available, but does not contain a uitoolbar, a uitoolbar will be created.
+##
+## If @var{parent} is given then a uipushtools is created on the @var{parent} uitoolbar. 
+## 
+## Any provided property value pairs will override the default values of the created 
+## uipushtool object.
+##
+## Examples:
+##
+## @example
+## @group
+## % create figure without a default toolbar
+## f = figure ("toolbar", "none");
+## % create empty toolbar
+## t = uitoolbar (f);
+## % create a 19x19x3 black square
+## img=zeros(19,19,3);
+## % add pushtool button to toolbar
+## b = uipushtool (t, "cdata", img);
+## @end group
+## @end example
+## @seealso{figure, uitoolbar, uitoggletool}
 ## @end deftypefn
 
 ## Author: goffioul
 
 function hui = uipushtool (varargin)
 
   [h, args] = __uiobject_split_args__ ("uipushtool", varargin,
                                        {"uitoolbar"}, 0);
diff --git a/scripts/gui/uitoggletool.m b/scripts/gui/uitoggletool.m
--- a/scripts/gui/uitoggletool.m
+++ b/scripts/gui/uitoggletool.m
@@ -12,18 +12,48 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {@var{hui} =} uitoggletool ("Name", value, @dots{})
-## @deftypefnx {Function File} {@var{hui} =} uitoggletool (@var{parent}, "Name", value, @dots{})
+## @deftypefn  {Function File} {@var{hui} =} uitoggletool (@var{property}, @var{value}, @dots{})
+## @deftypefnx {Function File} {@var{hui} =} uitoggletool (@var{parent}, @var{property}, @var{value}, @dots{})
+##
+## Create a uitoggletool object and return a handle to it.
+##
+## uitoggletool are togglebuttons that appear on a figure toolbar. The button is created with a border that
+## is shown when the user hovers over the button. An image can be set using the cdata property.
+##
+## If @var{parent} is omitted then a uitoggletool for the current figure is
+## created. If no figure is available, a new figure is created first.  If a figure is
+## available, but does not contain a uitoolbar, a uitoolbar will be created.
+##
+## If @var{parent} is given then a uitoggletool is created on the @var{parent} uitoolbar. 
+## 
+## Any provided property value pairs will override the default values of the created 
+## uitoggletool object.
+##
+## Examples:
+##
+## @example
+## @group
+## % create figure without a default toolbar
+## f = figure ("toolbar", "none");
+## % create empty toolbar
+## t = uitoolbar (f);
+## % create a 19x19x3 black square
+## img=zeros(19,19,3);
+## % add uitoggletool button to toolbar
+## b = uitoggletool (t, "cdata", img);
+## @end group
+## @end example
+## @seealso{figure, uitoolbar, uipushtool}
 ## @end deftypefn
 
 ## Author: goffioul
 
 function hui = uitoggletool (varargin)
 
   [h, args] = __uiobject_split_args__ ("uitoggletool", varargin,
                                        {"uitoolbar"}, 0);
diff --git a/scripts/gui/uitoolbar.m b/scripts/gui/uitoolbar.m
--- a/scripts/gui/uitoolbar.m
+++ b/scripts/gui/uitoolbar.m
@@ -12,18 +12,40 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {@var{hui} =} uitoolbar ("Name", value, @dots{})
-## @deftypefnx {Function File} {@var{hui} =} uitoolbar (@var{parent}, "Name", value, @dots{})
+## @deftypefn  {Function File} {@var{hui} =} uitoolbar (@var{property}, @var{value}, @dots{})
+## @deftypefnx {Function File} {@var{hui} =} uitoolbar (@var{parent}, @var{property}, @var{value}, @dots{})
+##
+## Create a uitoolbar object and return a handle to it. A uitoolbar displays uitoggletool and uipushtool buttons.
+##
+## If @var{parent} is omitted then a uitoolbar for the current figure is
+## created. If no figure is available, a new figure is created first. 
+##
+## If @var{parent} is given then a uitoolbar relative to @var{parent} is created. 
+## 
+## Any provided property value pairs will override the default values of the created 
+## uitoolbar object. 
+##
+## Examples:
+##
+## @example
+## @group
+## % create figure without a default toolbar 
+## f = figure ("toolbar", "none");
+## % create empty toolbar
+## t = uitoolbar (f);
+## @end group
+## @end example
+## @seealso{figure, uitoggletool, uipushtool}
 ## @end deftypefn
 
 ## Author: goffioul
 
 function hui = uitoolbar (varargin)
 
   [h, args] = __uiobject_split_args__ ("uitoolbar", varargin, {"figure"});
   hui = __go_uitoolbar__ (h, args{:});
