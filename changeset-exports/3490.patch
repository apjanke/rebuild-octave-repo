# HG changeset patch
# User jwe
# Date 949054406 0
#      Fri Jan 28 10:13:26 2000 +0000
# Node ID fc5eac74640d661ad79203db3aa6e7c9c3ec9546
# Parent  cbee5fbb696d44fbea7208abb850c8dd4c53c0ef
[project @ 2000-01-28 10:13:25 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,21 @@
 2000-01-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* pt-except.cc (do_catch_code): Unwind-protect buffer_error_messages.
+	Be sure to run all unwind-protects before returning.
+	(tree_try_catch_command::eval): Add do_catch_code cleanup function
+	to unwind-protect stack before resetting buffer_error_messages.
+	Use unwind-protect to save and restore buffer_error_messages.
+	If there is no catch code, discard the cleanup function and run
+	the unwind-protect for buffer_error_messages.
+
+	* error.cc (bind_global_error_variable): Avoid dereferencing
+	error_message_buffer if it is NULL.
+
 	* parse.y (evaluating_function_body): New global flag.
 	* ov-usr-fcn.cc (octave_user_function::do_index_op):
 	Protect and set it here.
 	* parse.y (make_break_command, make_return_command): Check it here.
 
 	* error.cc (warning_state): New global flag.
 	(warning): Set it here.
 	* lex.l (reset_parser): Clear it here.
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -370,27 +370,32 @@ to check for the proper number of argume
 @end deftypefn")
 {
   return handle_message (usage, "unknown", args);
 }
 
 void
 bind_global_error_variable (void)
 {
-  *error_message_buffer << ends;
+  if (error_message_buffer)
+    {
+      *error_message_buffer << ends;
 
-  char *error_text = error_message_buffer->str ();
+      char *error_text = error_message_buffer->str ();
 
-  bind_builtin_constant ("__error_text__", error_text, true);
+      bind_builtin_constant ("__error_text__", error_text, true);
 
-  delete [] error_text;
+      delete [] error_text;
+
+      delete error_message_buffer;
 
-  delete error_message_buffer;
-
-  error_message_buffer = 0;
+      error_message_buffer = 0;
+    }
+  else
+    bind_builtin_constant ("__error_text__", "", true);
 }
 
 void
 clear_global_error_variable (void *)
 {
   delete error_message_buffer;
   error_message_buffer = 0;
 
diff --git a/src/pt-except.cc b/src/pt-except.cc
--- a/src/pt-except.cc
+++ b/src/pt-except.cc
@@ -48,21 +48,26 @@ tree_try_catch_command::~tree_try_catch_
   delete catch_code;
 }
 
 static void
 do_catch_code (void *ptr)
 {
   tree_statement_list *list = static_cast<tree_statement_list *> (ptr);
 
+  unwind_protect::begin_frame ("do_catch_code");
+
   // Set up for letting the user print any messages from errors that
   // occurred in the body of the try_catch statement.
 
+  unwind_protect_bool (buffer_error_messages);
   buffer_error_messages = false;
+
   bind_global_error_variable ();
+
   unwind_protect::add (clear_global_error_variable, 0);
 
   // Similarly, if we have seen a return or break statement, allow all
   // the catch code to run before returning or handling the break.
   // We don't have to worry about continue statements because they can
   // only occur in loops.
 
   unwind_protect_int (tree_return_command::returning);
@@ -87,47 +92,49 @@ do_catch_code (void *ptr)
 
   // This is the one for returning.
 
   if (tree_return_command::returning)
     unwind_protect::discard ();
   else
     unwind_protect::run ();
 
-  unwind_protect::run ();
+  unwind_protect::run_frame ("do_catch_code");
 }
 
 void
 tree_try_catch_command::eval (void)
 {
   unwind_protect::begin_frame ("tree_try_catch::eval");
 
-  unwind_protect::add (do_catch_code, catch_code);
-
-  bool old_buffer_error_messages = buffer_error_messages;
-
   if (catch_code)
     {
       unwind_protect_bool (buffer_error_messages);
       buffer_error_messages = true;
     }
 
+  unwind_protect::add (do_catch_code, catch_code);
+
   if (try_code)
     try_code->eval ();
 
   if (catch_code && error_state)
     {
       error_state = 0;
       unwind_protect::run_frame ("tree_try_catch::eval");
     }
   else
     {
       error_state = 0;
-      buffer_error_messages = old_buffer_error_messages;
-      unwind_protect::discard_frame ("tree_try_catch::eval");
+
+      // For clearing the do_catch_code cleanup function.
+      unwind_protect::discard ();
+
+      // For restoring buffer_error_messages.
+      unwind_protect::run ();
     }
 }
 
 void
 tree_try_catch_command::accept (tree_walker& tw)
 {
   tw.visit_try_catch_command (*this);
 }
