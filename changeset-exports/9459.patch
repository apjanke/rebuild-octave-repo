# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1248428501 -7200
#      Fri Jul 24 11:41:41 2009 +0200
# Node ID cb0b21f34abce8b643f5b0227830766c2ecc5fd4
# Parent  0c7d84a65386ebd9ca84c53e740b9f5e0a4a9392
avoid double error messages in cellfun

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-07-24  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCIONS/cellfun.cc (Fcellfun): Avoid double error messages.
+
 2009-07-24  Jaroslav Hajek  <highegg@gmail.com>
 
 	* load-path.cc (load_path::do_any_class_method): New method.
 	* load-path.h (load_path::do_any_class_method): New method decl.
 	(load_path::any_class_method): New method.
 	* ov-fcn-handle.cc (octave_fcn_handle::do_multi_index_op): Support
 	calls without non-overloaded base function.
 	(make_fcn_handle): Support creation without non-overloaded base
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -495,25 +495,25 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
                   error_state = 0;
                   tmp = error_handler.do_multi_index_op (nargout, errlist);
                   buffer_error_messages++;
 
                   if (error_state)
                     goto cellfun_err;
                 }
 
+              if (error_state)
+                goto cellfun_err;
+
               if (tmp.length() < nargout)
                 {
                   error ("cellfun: too many output arguments");
                   goto cellfun_err;
                 }
 
-              if (error_state)
-                break;
-
               if (count == 0)
                 {
                   for (int j = 0; j < nargout; j++)
                     {
                       octave_value val = tmp(j);
 
                       if (val.numel () == 1)
                         retptr[j].reset (make_col_helper (val, f_args.dims ()));
@@ -579,25 +579,25 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
                   error_state = 0;
                   tmp = error_handler.do_multi_index_op (nargout, errlist);
                   buffer_error_messages++;
 
                   if (error_state)
                     goto cellfun_err;
                 }
 
+              if (error_state)
+                goto cellfun_err;
+
               if (tmp.length() < nargout)
                 {
                   error ("cellfun: too many output arguments");
                   goto cellfun_err;
                 }
 
-              if (error_state)
-                break;
-
 
               for (int j = 0; j < nargout; j++)
                 results[j](count) = tmp(j);
             }
 
           retval.resize(nargout);
           for (int j = 0; j < nargout; j++)
             retval(j) = results[j];
