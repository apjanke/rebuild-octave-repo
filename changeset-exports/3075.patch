# HG changeset patch
# User jwe
# Date 869870400 0
#      Fri Jul 25 22:40:00 1997 +0000
# Node ID a6a00badcc12aba0bacc4ade5b83795fc60009f8
# Parent  42975c59d2a08f376b586e9530803a3fae62ba1e
[project @ 1997-07-25 22:39:56 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -1449,16 +1449,18 @@ ComplexMatrix::lssolve (const ComplexMat
       double rcond = -1.0;
 
       int lwork;
       if (m < n)
 	lwork = 2*m + (nrhs > n ? nrhs : n);
       else
 	lwork = 2*n + (nrhs > m ? nrhs : m);
 
+      lwork *= 16;
+
       Array<Complex> work (lwork);
       Complex *pwork = work.fortran_vec ();
 
       int lrwork = (5 * (m < n ? m : n)) - 4;
       lrwork = lrwork > 1 ? lrwork : 1;
       Array<double> rwork (lrwork);
       double *prwork = rwork.fortran_vec ();
 
@@ -1529,16 +1531,18 @@ ComplexMatrix::lssolve (const ComplexCol
       double rcond = -1.0;
 
       int lwork;
       if (m < n)
 	lwork = 2*m + (nrhs > n ? nrhs : n);
       else
 	lwork = 2*n + (nrhs > m ? nrhs : m);
 
+      lwork *= 16;
+
       Array<Complex> work (lwork);
       Complex *pwork = work.fortran_vec ();
 
       int lrwork = (5 * (m < n ? m : n)) - 4;
       lrwork = lrwork > 1 ? lrwork : 1;
       Array<double> rwork (lrwork);
       double *prwork = rwork.fortran_vec ();
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+Fri Jul 25 17:31:26 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dMatrix.cc (Matrix::lssolve): Increase lwork by factor of 16.
+	* CMatrix.cc (ComplexMatrix::lssolve): Ditto.
+
 Thu Jul 24 14:32:48 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* file-ops.cc (tilde_expand_word): Fix off-by-one error.
 
 Wed Jul  9 19:40:23 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-sysdep.cc (octave_getcwd): If getwd is available, use it.
 	Call error handler if we can't find the current directory.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -1161,16 +1161,18 @@ Matrix::lssolve (const Matrix& b, int& i
 	lwork = 3*m + (2*m > nrhs
 		       ? (2*m > n ? 2*m : n)
 		       : (nrhs > n ? nrhs : n));
       else
 	lwork = 3*n + (2*n > nrhs
 		       ? (2*n > m ? 2*n : m)
 		       : (nrhs > m ? nrhs : m));
 
+      lwork *= 16;
+
       Array<double> work (lwork);
       double *pwork = work.fortran_vec ();
 
       F77_XFCN (dgelss, DGELSS, (m, n, nrhs, tmp_data, m, presult, nrr, ps,
 				 rcond, rank, pwork, lwork, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in dgelss");
@@ -1262,16 +1264,18 @@ Matrix::lssolve (const ColumnVector& b, 
 	lwork = 3*m + (2*m > nrhs
 		       ? (2*m > n ? 2*m : n)
 		       : (nrhs > n ? nrhs : n));
       else
 	lwork = 3*n + (2*n > nrhs
 		       ? (2*n > m ? 2*n : m)
 		       : (nrhs > m ? nrhs : m));
 
+      lwork *= 16;
+
       Array<double> work (lwork);
       double *pwork = work.fortran_vec ();
 
       F77_XFCN (dgelss, DGELSS, (m, n, nrhs, tmp_data, m, presult, nrr,
 				 ps, rcond, rank, pwork, lwork, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in dgelss");
