# HG changeset patch
# User jwe
# Date 1179775459 0
#      Mon May 21 19:24:19 2007 +0000
# Node ID 15837c5982cb0bc4ba5fe25e28d274396b256926
# Parent  c18ed0e7ee41641a25483031e6438752b31d8656
[project @ 2007-05-21 19:24:19 by jwe]

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,10 +1,13 @@
 2007-05-21  Søren Hauberg  <hauberg@gmail.com>
 
+        * interpreter/func.txi: New section describing load path.
+        Improve 'inline' and 'command' sections.
+
         * interpreter/stmt.txi: Describe cell array cases for the switch
 	statement.  Minor layout changes.
 
 2007-05-19  David Bateman  <dbatemna@free.fr>
 
 	* interpreter/func.txi: Additional documentation for function
 	locking, dispatch and autoloading.
 
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -18,17 +18,17 @@ like built-in functions.
 * Defining Functions::          
 * Multiple Return Values::      
 * Variable-length Argument Lists::  
 * Variable-length Return Lists::  
 * Returning From a Function::   
 * Default Arguments::   
 * Function Files::              
 * Script Files::                
-* Function Handles and Inline::
+* Function Handles Inline Functions and Anonymous Functions::
 * Commands::
 * Organization of Functions::   
 @end menu
 
 @node Defining Functions
 @section Defining Functions
 @cindex @code{function} statement
 @cindex @code{endfunction} statement
@@ -541,18 +541,16 @@ hello (:);
      @print{} Hello, World!
 @end group
 @end example
 
 @node Function Files
 @section Function Files
 @cindex function file
 
-@c FIXME need discussion of subfunctions here
-
 Except for simple one-shot programs, it is not practical to have to
 define all the functions you need each time you need them.  Instead, you
 will normally want to save them in a file so that you can easily edit
 them, and save them for use at a later time.
 
 Octave does not require you to load function definitions from files
 before using them.  You simply need to put the function definitions in a
 place where Octave can find them.
@@ -594,16 +592,46 @@ running Octave, you can improve performa
 @code{ignore_function_time_stamp ("all")}, so that Octave will
 ignore the time stamps for all function files.  Passing
 @code{"system"} to this function resets the default behavior.
 
 @c FIXME -- note about time stamps on files in NFS environments?
 
 @DOCSTRING(mfilename)
 
+@DOCSTRING(ignore_function_time_stamp)
+
+@menu
+* Manipulating the load path::
+* Subfunctions::
+* Overloading and Autoloading::
+* Function Locking::
+@end menu
+
+@node Manipulating the load path
+@subsection Manipulating the load path
+
+When a function is called Octave searches a list of directories for
+a file that contains the function declaration. This list of directories
+is known as the load path. By default the load path contains
+a list of directories distributed with Octave plus the current
+working directory. To see your current load path call the @code{path}
+function without any input or output arguments.
+
+It is possible to add or remove directories to or from the load path
+using the @code{addpath} and @code{rmpath}. As an example, the following
+code adds @samp{~/Octave} to the load path.
+
+@example
+addpath("~/Octave")
+@end example
+
+@noindent
+After this the directory @samp{~/Octave} will be searched for functions.
+ 
 @DOCSTRING(addpath)
 
 @DOCSTRING(genpath)
 
 @DOCSTRING(rmpath)
 
 @DOCSTRING(savepath)
 
@@ -612,41 +640,33 @@ ignore the time stamps for all function 
 @DOCSTRING(pathdef)
 
 @DOCSTRING(pathsep)
 
 @DOCSTRING(rehash)
 
 @DOCSTRING(file_in_loadpath)
 
-@DOCSTRING(ignore_function_time_stamp)
-
-
-@menu
-* Subfunctions::
-* Overloading and Autoloading::
-* Function Locking::
-@end menu
-
 @node Subfunctions
 @subsection Subfunctions
 
 A function file may contain secondary functions called
 @dfn{subfunctions}.  These secondary functions are only visible to the
 other functions in the same function file.  For example, a file
 @file{f.m} containing
 
 @example
 @group
 function f ()
   printf ("in f, calling g\n");
   g ()
 endfunction
 function g ()
   printf ("in g, calling h\n");
+  h ()
 endfunction
 function h ()
   printf ("in h\n")
 endfunction
 @end group
 @end example
 
 @noindent
@@ -756,17 +776,17 @@ 1;
 # Define function one:
 
 function one ()
   ...
 @end group
 @end example
 
 To have Octave read and compile these functions into an internal form,
-you need to make sure that the file is in Octave's @code{LOADPATH}
+you need to make sure that the file is in Octave's load path
 (accessible through the @code{path} function), then simply type the
 base name of the file that contains the commands.  (Octave uses the
 same rules to search for script files as it does to search for
 function files.)
 
 If the first token in a file (ignoring comments) is @code{function},
 Octave will compile the function and try to execute it, printing a
 message warning about any non-whitespace characters that appear after
@@ -820,23 +840,26 @@ string might come from user input, or de
 known until the function is evaluated).
 
 Although Octave normally executes commands from script files that have
 the name @file{@var{file}.m}, you can use the function @code{source} to
 execute commands from any file.
 
 @DOCSTRING(source)
 
-@node Function Handles and Inline
-@section Function Handles and Inline
+@node Function Handles Inline Functions and Anonymous Functions
+@section Function Handles, Inline Functions, and Anonymous Functions
 @cindex handle, function handles
 @cindex inline, inline functions
+@cindex anonymous functions
 
-This is a place holder for the description of function handles and
-inline functions.
+It can be very convenient store a function in a variable so that it
+can be passed to a different function. For example, a function that
+performs numerical minimisation needs access to the function that 
+should be minimised.
 
 @menu
 * Function Handles::
 * Anonymous Functions::
 * Inline Functions::
 @end menu
 
 @node Function Handles
@@ -934,27 +957,85 @@ quad (@@(x) betainc (x, a, b), 0, 0.4)
 adapts a function with several parameters to the form required by
 @code{quad}.  In this example, the values of @var{a} and @var{b} that
 are passed to @code{betainc} are inherited from the current
 environment.
 
 @node Inline Functions
 @subsection Inline Functions
 
+An inline function is created from a string containing the function
+body using the @code{inline} function. The following code defines the
+function @math{f(x) = x^2 + 2}.
+
+@example
+f = inline("x^2 + 2");
+@end example
+
+@noindent
+After this it is possible to evaluate @math{f} at any @math{x} by
+writing @code{f(x)}.
+
 @DOCSTRING(inline)
 
 @DOCSTRING(argnames)
 
 @DOCSTRING(formula)
 
 @DOCSTRING(vectorize)
 
 @node Commands
 @section Commands
 
+Commands are a special class of functions that only accept string
+input arguments. A command can be called as an ordinary function, but
+it can also be called without the parentheses like the following example
+shows
+
+@example
+my_command hello world
+@end example
+
+@noindent
+which is the same as
+
+@example
+my_command("hello", "world")
+@end example
+
+The general form of a command call is
+
+@example
+@var{name} @var{arg1} @var{arg2} @dots{}
+@end example
+
+@noindent
+which translates directly to
+
+@example
+@var{name} ("@var{arg1}", "@var{arg2}", @dots{})
+@end example
+
+A function can be used as a command if it accept string input arguments.
+To do this, the function must be marked as a command, which can be done
+with the @code{mark_as_command} command like this
+
+@example
+mark_as_command name
+@end example
+
+@noindent
+where @code{name} is the function to be marked as a command.
+
+One difficulty of commands occurs when one of the string input arguments
+are stored in a variable. Since Octave can't tell the difference between
+a variable name, and an ordinary string, it is not possible to pass a
+variable as input to a command. In such a situation a command must be
+called as a function.
+
 @DOCSTRING(mark_as_command)
 
 @DOCSTRING(unmark_command)
 
 @DOCSTRING(iscommand)
 
 @DOCSTRING(mark_as_rawcommand)
 
diff --git a/doc/interpreter/stmt.txi b/doc/interpreter/stmt.txi
--- a/doc/interpreter/stmt.txi
+++ b/doc/interpreter/stmt.txi
@@ -818,22 +818,16 @@ No warnings or error messages are printe
 executing.  If an error does occur during the execution of @var{body},
 @var{cleanup} can use the function @code{lasterr} to access the text
 of the message that would have been printed.  This is the same
 as @code{eval (@var{try}, @var{catch})} but it is more efficient since
 the commands do not need to be parsed each time the @var{try} and
 @var{catch} statements are evaluated.  @xref{Error Handling}, for more
 information about the @code{lasterr} function.
 
-Octave's @var{try} block is a very limited variation on the Lisp
-condition-case form (limited because it cannot handle different classes
-of errors separately).  Perhaps at some point Octave can have some sort
-of classification of errors and try-catch can be improved to be as
-powerful as condition-case in Lisp.
-
 @cindex continuation lines
 @cindex @code{...} continuation marker
 @cindex @code{\} continuation marker
 
 @node Continuation Lines
 @section Continuation Lines
 
 In the Octave language, most statements end with a newline character and
