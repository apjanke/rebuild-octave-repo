# HG changeset patch
# User jwe
# Date 1191674965 0
#      Sat Oct 06 12:49:25 2007 +0000
# Node ID 65a28e9de0a5998d844beabf3840c196812338dd
# Parent  da6659f222a65139461369667c0949f72a1cde74
[project @ 2007-10-06 12:47:11 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,18 @@
+2007-10-06  Søren Hauberg  <hauberg@gmail.com>
+
+	* image/saveimage.m: Handle saving color images without a colormap.
+	* image/__img_via_file__.m: Add missing semicolon.
+
+2007-10-06  Bill Denney  <wsloand@gmail.com>
+
+        * general/__splinen__.m, general/isscalar.m, general/rat.m,
+	strings/dec2base.m: Use numel(x) instead of prod(size(x)).
+
 2007-10-06  Francesco Potorti`  <Potorti@isti.cnr.it>
 
 	* plot/print.m: Handle svg output type.  Accept new -S option to
 	specify size for PNG and SVG output types.
 
 2007-10-05  Ben Abbott  <bpabbott@mac.com>
 
 	* polynomial/mpoles.m: New function.
diff --git a/scripts/general/__splinen__.m b/scripts/general/__splinen__.m
--- a/scripts/general/__splinen__.m
+++ b/scripts/general/__splinen__.m
@@ -25,17 +25,17 @@
 ## @end deftypefn
 
 ## FIXME: Allow arbitrary grids..
 
 function yi = __splinen__ (x, y, xi, extrapval, f)
   if (nargin != 5)
     error ("Incorrect number of arguments");
   endif
-  isvec = @(x) prod(size(x)) == length(x);   # ND isvector function
+  isvec = @(x) numel (x) == length (x);   # ND isvector function
   if (!iscell (x) || length(x) < ndims(y) || any (! cellfun (isvec, x)) ||
       !iscell (xi) || length(xi) < ndims(y) || any (! cellfun (isvec, xi)))
     error ("%s: non gridded data or dimensions inconsistent", f);
   endif
   yi = y;
   for i = length(x):-1:1
     yi = permute (spline (x{i}, yi, xi{i}), [length(x),1:length(x)-1]);
   endfor
diff --git a/scripts/general/isscalar.m b/scripts/general/isscalar.m
--- a/scripts/general/isscalar.m
+++ b/scripts/general/isscalar.m
@@ -23,14 +23,14 @@
 ## @seealso{size, rows, columns, length, isscalar, ismatrix}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = isscalar (x)
 
   if (nargin == 1)
-    retval = prod (size (x)) == 1;
+    retval = numel (x) == 1;
   else
     print_usage ();
   endif
 
 endfunction
diff --git a/scripts/general/rat.m b/scripts/general/rat.m
--- a/scripts/general/rat.m
+++ b/scripts/general/rat.m
@@ -53,17 +53,17 @@ function [n,d] = rat(x,tol)
   ## First step in the approximation is the integer portion
   n = round(y);  # first element in the continued fraction
   d = ones(size(y));
   frac = y-n;
   lastn = ones(size(y));
   lastd = zeros(size(y));
 
   nd = ndims(y);
-  nsz = prod (size (y));
+  nsz = numel (y);
   steps = zeros([nsz, 0]);
 
   ## grab new factors until all continued fractions converge
   while (1)
     ## determine which fractions have not yet converged
     idx = find (abs(y-n./d) >= tol);
     if (isempty(idx)) break; endif
 
diff --git a/scripts/image/__img_via_file__.m b/scripts/image/__img_via_file__.m
--- a/scripts/image/__img_via_file__.m
+++ b/scripts/image/__img_via_file__.m
@@ -50,17 +50,17 @@ function __img_via_file__ (x, y, im, zoo
                               im_display, xv, xloadimage, rm));
   else
     ## Does the command support zooming?
     if (findstr (command, "%f"))
       command = sprintf (command, zoom, ppm_name);
     else
       command = sprintf (command, ppm_name);
     endif
-    status = system (sprintf ("( %s && %s) > /dev/null 2>&1 &", command, rm))
+    status = system (sprintf ("( %s && %s) > /dev/null 2>&1 &", command, rm));
   endif
   
   ## Did the system call fail?
   if (status != 0)
     error ("the image viewing command failed");
   endif
 
 endfunction
diff --git a/scripts/image/saveimage.m b/scripts/image/saveimage.m
--- a/scripts/image/saveimage.m
+++ b/scripts/image/saveimage.m
@@ -76,17 +76,21 @@
 
 function saveimage (filename, img, img_form, map)
 
   if (nargin < 2 || nargin > 4)
     print_usage ();
   endif
 
   if (nargin < 4)
-    map = colormap ();
+    if (size(img, 3) == 3)
+      [img, map] = rgb2ind(img);
+    else
+      map = colormap ();
+    endif
   endif
 
   [map_nr, map_nc] = size (map);
 
   if (map_nc != 3)
     error ("colormap should be an N x 3 matrix");
   endif
 
diff --git a/scripts/strings/dec2base.m b/scripts/strings/dec2base.m
--- a/scripts/strings/dec2base.m
+++ b/scripts/strings/dec2base.m
@@ -48,17 +48,17 @@
 ## Adapted-by: Paul Kienzle <pkienzle@kienzle.powernet.co.uk>
 
 function retval = dec2base (n, base, len)
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
-  if (prod (size (n)) != length (n))
+  if (numel (n) != length (n))
     n = n(:);
   elseif (any (n < 0 | n != fix (n)))
     error ("dec2base: can only convert non-negative integers")
   endif
 
   symbols = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
   if (ischar (base))
     symbols = base;
