# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1277462934 -7200
#      Fri Jun 25 12:48:54 2010 +0200
# Node ID d808eb829d4896fe5a93630af7565949dee8de35
# Parent  6ba7937a6fa4231fdd03f5eb7236673175b81a90
optimize num2cell on structs

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-06-25  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/cellfun.cc (Fnum2cell, do_num2cell): Optimize cells
+	and structs.
+
 2010-06-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-struct.h (octave_scalar_struct::resize, octave_struct::resize):
 	Don't ignore fill argument.
 
 2010-06-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-map.h (octave_map::octave_map (const dim_vector&, const
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -901,25 +901,35 @@ do_num2cell_helper (const dim_vector& dv
   for (int i = 0; i < maxd; i++)
     if (sing[i])
       celldv(i) = 1;
     else
       arraydv(i) = 1;
 }
 
 template<class NDA>
+static inline typename NDA::element_type
+do_num2cell_elem (const NDA& array, octave_idx_type i)
+{ return array(i); }
+
+static inline Cell
+do_num2cell_elem (const Cell& array, octave_idx_type i)
+{ return Cell (array(i)); }
+
+
+template<class NDA>
 static Cell
 do_num2cell (const NDA& array, const Array<int>& dimv)
 {
   if (dimv.is_empty ())
     {
       Cell retval (array.dims ());
       octave_idx_type nel = array.numel ();
       for (octave_idx_type i = 0; i < nel; i++)
-        retval.xelem (i) = array(i);
+        retval.xelem (i) = do_num2cell_elem (array, i);
 
       return retval;
     }
   else
     {
       dim_vector celldv, arraydv;
       Array<int> perm;
       do_num2cell_helper (array.dims (), dimv, celldv, arraydv, perm);
@@ -1025,44 +1035,20 @@ num2cell([1,2;3,4],1)\n\
           else
             {
               if (array.is_single_type ())
                 retval = do_num2cell (array.float_array_value (), dimv);
               else
                 retval = do_num2cell (array.array_value (), dimv);
             }
         }
-      else if (array.is_cell () || array.is_map ())
-        {
-          dim_vector celldv, arraydv;
-          Array<int> perm;
-          do_num2cell_helper (array.dims (), dimv, celldv, arraydv, perm);
-
-          if (! error_state)
-            {
-              // FIXME: this operation may be rather inefficient.
-              octave_value parray = array.permute (perm);
-
-              octave_idx_type nela = arraydv.numel (), nelc = celldv.numel ();
-              parray = parray.reshape (dim_vector (nela, nelc));
-
-              Cell retcell (celldv);
-              octave_value_list idx (2);
-              idx(0) = octave_value::magic_colon_t;
-
-              for (octave_idx_type i = 0; i < nelc; i++)
-                {
-                  idx(1) = i + 1;
-                  octave_value tmp = parray.do_index_op (idx);
-                  retcell(i) = tmp.reshape (arraydv);
-                }
-
-              retval = retcell;
-            }
-        }
+      else if (array.is_map ())
+        retval = do_num2cell (array.map_value (), dimv);
+      else if (array.is_cell ())
+        retval = do_num2cell (array.cell_value (), dimv);
       else
         gripe_wrong_type_arg ("num2cell", array);
     }
 
   return retval;
 }
 
 /*
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -247,16 +247,18 @@ octave_map
   octave_map (const octave_fields& k)
     : xkeys (k), xvals (k.nfields ()), dimensions () { }
 
   octave_map (const dim_vector& dv, const octave_fields& k)
     : xkeys (k), xvals (k.nfields (), Cell (dv)), dimensions (dv) { }
 
 public:
 
+  typedef octave_scalar_map element_type;
+
   octave_map (void) : xkeys (), xvals (), dimensions () { }
 
   octave_map (const dim_vector& dv) : xkeys (), xvals (), dimensions (dv) { }
 
   octave_map (const string_vector& k)
     : xkeys (k), xvals (k.length ()), dimensions (1, 1) { }
 
   octave_map (const dim_vector& dv, const string_vector& k)
