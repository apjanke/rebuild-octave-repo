# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1365968087 -7200
#      Sun Apr 14 21:34:47 2013 +0200
# Node ID 59dbdaeeea40fe47fdb82134276e4ae02d551802
# Parent  b348c5835ce4b3eec12b7cbda59c2bb3965f6185
* main_window.cc(construct_tool_bar): code cleanup and tool tips for combo box

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -354,17 +354,17 @@ main_window::change_directory_up (void)
 
 void
 main_window::accept_directory_line_edit (void)
 {
   // Get new directory name, and change to it if it is new.  Otherwise,
   // the combo box will triggers the "activated" signal to change to the
   // directory.
 
-  QString dir = _current_directory_line_edit->text ();
+  QString dir = _current_directory_combo_box->currentText ();
 
   int index = _current_directory_combo_box->findText (dir);
 
   if (index < 0)
     set_current_working_directory (dir);
 }
 
 void
@@ -1256,44 +1256,46 @@ main_window::construct_tool_bar (void)
   main_tool_bar->addAction (_cut_action);
   main_tool_bar->addAction (_copy_action);
   main_tool_bar->addAction (_paste_action);
   main_tool_bar->addAction (_undo_action);
   main_tool_bar->addAction (_redo_action);
 
   main_tool_bar->addSeparator ();
 
-  _current_directory_line_edit = new QLineEdit (this);
   _current_directory_combo_box = new QComboBox (this);
   _current_directory_combo_box->setFixedWidth (current_directory_width);
   _current_directory_combo_box->setEditable (true);
-  // setLineEdit takes ownership -> no need to delete line_edit in ~main_window
-  _current_directory_combo_box->setLineEdit (_current_directory_line_edit);
-  _current_directory_combo_box->setInsertPolicy (QComboBox::InsertAtTop);
+  _current_directory_combo_box->setInsertPolicy(QComboBox::NoInsert);
+  _current_directory_combo_box->setToolTip (tr ("Enter directory name"));
   _current_directory_combo_box->setMaxVisibleItems (current_directory_max_visible);
   _current_directory_combo_box->setMaxCount (current_directory_max_count);
+  QSizePolicy sizePol(QSizePolicy::Expanding, QSizePolicy::Preferred);
+  _current_directory_combo_box->setSizePolicy(sizePol);
 
   QToolButton *current_directory_tool_button = new QToolButton (this);
   current_directory_tool_button->setIcon (QIcon (":/actions/icons/search.png"));
+  current_directory_tool_button->setToolTip (tr ("Browse directories"));
 
   QToolButton *current_directory_up_tool_button = new QToolButton (this);
   current_directory_up_tool_button->setIcon (QIcon (":/actions/icons/up.png"));
+  current_directory_up_tool_button->setToolTip (tr ("One directory up"));
 
   // addWidget takes ownership of the objects so there is no
   // need to delete these upon destroying this main_window.
-  main_tool_bar->addWidget (new QLabel (tr ("Current Directory:")));
+  main_tool_bar->addWidget (new QLabel (tr ("Current Directory: ")));
   main_tool_bar->addWidget (_current_directory_combo_box);
   main_tool_bar->addWidget (current_directory_tool_button);
   main_tool_bar->addWidget (current_directory_up_tool_button);
 
   connect (_current_directory_combo_box, SIGNAL (activated (QString)),
            this, SLOT (set_current_working_directory (QString)));
 
-  connect (_current_directory_line_edit, SIGNAL (returnPressed ()),
-           this, SLOT (accept_directory_line_edit ()));
+  connect (_current_directory_combo_box->lineEdit(), SIGNAL (returnPressed ()),
+            this, SLOT (accept_directory_line_edit ()));
 
   connect (current_directory_tool_button, SIGNAL (clicked ()),
            this, SLOT (browse_for_directory ()));
 
   connect (current_directory_up_tool_button, SIGNAL (clicked ()),
            this, SLOT (change_directory_up ()));
 }
 
