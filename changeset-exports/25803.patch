# HG changeset patch
# User Rik <rik@octave.org>
# Date 1534372151 25200
#      Wed Aug 15 15:29:11 2018 -0700
# Node ID 23483673ba4379af825b29428b37d3a7ad1f1883
# Parent  b785394f10d03ba1bdac6096586cd4eecc2933b5
Use is_function_handle instead of isa (x, "function_handle").

* ov-fcn-handle.cc (Fis_function_handle): Add BIST test for an inline function.

* gradient.m, isequal.m, isequaln.m, __makeinfo__.m,
nthargout.m, decic.m, ode15i.m, ode15s.m, ode23.m, ode45.m,
check_default_input.m, fplot.m, __ezplot__.m, __alltohandles__.m, qmr.m,
spfun.m, args.tst: Use is_function_handle instead of
isa (x, "function_handle").

diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -1913,20 +1913,22 @@ Return true if @var{x} is a function han
 {
   if (args.length () != 1)
     print_usage ();
 
   return ovl (args(0).is_function_handle ());
 }
 
 /*
-%!shared fh
+%!shared fh, finline
 %! fh = @(x) x;
+%! finline = inline ("x");
 
 %!assert (is_function_handle (fh))
+%!assert (is_function_handle (finline))
 %!assert (! is_function_handle ({fh}))
 %!assert (! is_function_handle (1))
 
 %!error is_function_handle ()
 %!error is_function_handle (1, 2)
 */
 
 octave_fcn_binder::octave_fcn_binder (const octave_value& f,
diff --git a/scripts/general/gradient.m b/scripts/general/gradient.m
--- a/scripts/general/gradient.m
+++ b/scripts/general/gradient.m
@@ -67,17 +67,17 @@ function varargout = gradient (m, vararg
 
   if (nargin < 1)
     print_usage ();
   endif
 
   nargout_with_ans = max (1,nargout);
   if (isnumeric (m))
     [varargout{1:nargout_with_ans}] = matrix_gradient (m, varargin{:});
-  elseif (isa (m, "function_handle"))
+  elseif (is_function_handle (m))
     [varargout{1:nargout_with_ans}] = handle_gradient (m, varargin{:});
   elseif (ischar (m))
     [varargout{1:nargout_with_ans}] = handle_gradient (str2func (m), ...
                                                        varargin{:});
   else
     error ("gradient: first input must be an array or a function");
   endif
 
diff --git a/scripts/general/isequal.m b/scripts/general/isequal.m
--- a/scripts/general/isequal.m
+++ b/scripts/general/isequal.m
@@ -157,17 +157,17 @@ function t = isequal (x, varargin)
         ## cell type.  Check that each element of a cell is equal.  Slow.
         n = numel (x);
         idx = 1;
         while (t && idx <= n)
           t = isequal (x{idx}, y{idx});
           idx += 1;
         endwhile
 
-      elseif (isa (x, "function_handle"))
+      elseif (is_function_handle (x))
         ## function type.  Use '==' operator which is overloaded.
         t = (x == y);
 
       else
         error ("isequal: Impossible to reach code.  File a bug report.");
 
       endif
 
@@ -286,17 +286,17 @@ function t = isequal (x, varargin)
           args(1) = x{idx};
           args(2:end) = [cellindexmat(varargin, idx){:}];
 
           t = isequal (args{:});
 
           idx += 1;
         endwhile
 
-      elseif (isa (x, "function_handle"))
+      elseif (is_function_handle (x))
         ## function type.  Use '==' operator which is overloaded.
         t = all (cellfun ("eq", {x}, varargin));
 
       else
         error ("isequal: Impossible to reach code.  File a bug report.");
 
       endif
 
diff --git a/scripts/general/isequaln.m b/scripts/general/isequaln.m
--- a/scripts/general/isequaln.m
+++ b/scripts/general/isequaln.m
@@ -155,17 +155,17 @@ function t = isequaln (x, varargin)
         ## cell type.  Check that each element of a cell is equal.  Slow.
         n = numel (x);
         idx = 1;
         while (t && idx <= n)
           t = isequaln (x{idx}, y{idx});
           idx += 1;
         endwhile
 
-      elseif (isa (x, "function_handle"))
+      elseif (is_function_handle (x))
         ## function type.  Use '==' operator which is overloaded.
         t = (x == y);
 
       else
         error ("isequaln: Impossible to reach code.  File a bug report.");
 
       endif
 
@@ -270,17 +270,17 @@ function t = isequaln (x, varargin)
           args(1) = x{idx};
           args(2:end) = [cellindexmat(varargin, idx){:}];
 
           t = isequaln (args{:});
 
           idx += 1;
         endwhile
 
-      elseif (isa (x, "function_handle"))
+      elseif (is_function_handle (x))
         ## function type.  Use '==' operator which is overloaded.
         t = all (cellfun ("eq", {x}, varargin));
 
       else
         error ("isequaln: Impossible to reach code.  File a bug report.");
 
       endif
 
diff --git a/scripts/help/__makeinfo__.m b/scripts/help/__makeinfo__.m
--- a/scripts/help/__makeinfo__.m
+++ b/scripts/help/__makeinfo__.m
@@ -78,17 +78,17 @@ function [retval, status] = __makeinfo__
   if (nargin < 3)
     if (strcmpi (output_type, "plain text"))
       fsee_also = @(T) ["\nSee also:", sprintf(" %s,", T{:})(1:end-1), "\n"];
     else
       fsee_also = @(T) ["\nSee also:", sprintf(" @ref{%s},", T{:})(1:end-1), "\n"];
     endif
   endif
 
-  if (! isa (fsee_also, "function_handle"))
+  if (! is_function_handle (fsee_also))
     error ("__makeinfo__: third input argument must be a function handle");
   endif
 
   ## Formatting in m-files has an extra space at the beginning of every line.
   ## Remove these unwanted spaces if present.  First text char is "\n" delim.
   if (text(2) == " ")
     text = strrep (text, "\n ", "\n");
   endif
diff --git a/scripts/miscellaneous/nthargout.m b/scripts/miscellaneous/nthargout.m
--- a/scripts/miscellaneous/nthargout.m
+++ b/scripts/miscellaneous/nthargout.m
@@ -67,22 +67,22 @@
 ## Author: Jordi GutiÃ©rrez Hermoso
 
 function out = nthargout (n, varargin)
 
   if (nargin < 2)
     print_usage ();
   endif
 
-  if (isa (varargin{1}, "function_handle") || ischar (varargin{1}))
+  if (is_function_handle (varargin{1}) || ischar (varargin{1}))
     ntot = max (n(:));
     func = varargin{1};
     args = varargin(2:end);
   elseif (isnumeric (varargin{1})
-          && (isa (varargin{2}, "function_handle") || ischar (varargin{2})))
+          && (is_function_handle (varargin{2}) || ischar (varargin{2})))
     ntot = varargin{1};
     func = varargin{2};
     args = varargin(3:end);
   else
     print_usage ();
   endif
 
   if (any (n != fix (n))  || ntot != fix (ntot) || any (n <= 0) || ntot <= 0)
diff --git a/scripts/ode/decic.m b/scripts/ode/decic.m
--- a/scripts/ode/decic.m
+++ b/scripts/ode/decic.m
@@ -90,17 +90,17 @@ function [y0_new, yp0_new, resnorm] = de
                                              y0, fixed_y0, yp0, fixed_yp0,
                                              options)
 
   if (nargin < 6 || nargin > 7)
     print_usage ();
   endif
 
   ## Validate inputs
-  if (! isa (fun, "function_handle"))
+  if (! is_function_handle (fun))
     error ("Octave:invalid-input-arg",
            "decic: FUN must be a valid function handle");
   endif
 
   if (! (isnumeric (t0) && isscalar (t0)))
     error ("Octave:invalid-input-arg",
            "decic: T0 must be a numeric scalar");
   endif
diff --git a/scripts/ode/ode15i.m b/scripts/ode/ode15i.m
--- a/scripts/ode/ode15i.m
+++ b/scripts/ode/ode15i.m
@@ -110,45 +110,45 @@ function varargout = ode15i (fun, trange
 
   if (! isempty (options.Jacobian))
     if (ischar (options.Jacobian))
       try
         options.Jacobian = str2func (options.Jacobian);
       catch
         warning (lasterr);
       end_try_catch
-      if (! isa (options.Jacobian, "function_handle"))
+      if (! is_function_handle (options.Jacobian))
         error ("Octave:invalid-input-arg",
                [solver ": invalid value assigned to field 'Jacobian'"]);
       endif
     endif
   endif
 
   if (! isempty (options.OutputFcn))
     if (ischar (options.OutputFcn))
       try
         options.OutputFcn = str2func (options.OutputFcn);
       catch
         warning (lasterr);
       end_try_catch
-      if (! isa (options.OutputFcn, "function_handle"))
+      if (! is_function_handle (options.OutputFcn))
         error ("Octave:invalid-input-arg",
                [solver ": invalid value assigned to field 'OutputFcn'"]);
       endif
     endif
   endif
 
   if (! isempty (options.Events))
     if (ischar (options.Events))
       try
         options.Events = str2func (options.Events);
       catch
         warning (lasterr);
       end_try_catch
-      if (! isa (options.Events, "function_handle")
+      if (! is_function_handle (options.Events)
           && ! ismatrix (options.Events))
         error ("Octave:invalid-input-arg",
                [solver ": invalid value assigned to field 'Events'"]);
       endif
     endif
   endif
 
   [defaults, classes, attributes] = odedefaults (n, trange(1), trange(end));
@@ -189,17 +189,17 @@ function varargout = ode15i (fun, trange
           error ("Octave:invalid-input-arg",
                  [solver ": invalid value assigned to field 'Jacobian'"]);
         endif
       else
         error ("Octave:invalid-input-arg",
                [solver ": invalid value assigned to field 'Jacobian'"]);
       endif
 
-    elseif (isa (options.Jacobian, "function_handle"))
+    elseif (is_function_handle (options.Jacobian))
       options.havejacfun = true;
       if (nargin (options.Jacobian) == 3)
         [A, B] = options.Jacobian (trange(1), y0, yp0);
         if (issparse (A) && issparse (B))
           options.havejacsparse = true;  # Jac is sparse fun
         endif
 
         if (any (size (A) != [n n]) || any (size (B) != [n n])
diff --git a/scripts/ode/ode15s.m b/scripts/ode/ode15s.m
--- a/scripts/ode/ode15s.m
+++ b/scripts/ode/ode15s.m
@@ -104,59 +104,59 @@ function varargout = ode15s (fun, trange
 
   if (! isempty (options.Mass))
     if (ischar (options.Mass))
       try
         options.Mass = str2func (options.Mass);
       catch
         warning (lasterr);
       end_try_catch
-      if (! isa (options.Mass, "function_handle"))
+      if (! is_function_handle (options.Mass))
         error ("Octave:invalid-input-arg",
                [solver ": invalid value assigned to field 'Mass'"]);
       endif
     endif
   endif
 
   if (! isempty (options.Jacobian))
     if (ischar (options.Jacobian))
       try
         options.Jacobian = str2func (options.Jacobian);
       catch
         warning (lasterr);
       end_try_catch
-      if (! isa (options.Jacobian, "function_handle"))
+      if (! is_function_handle (options.Jacobian))
         error ("Octave:invalid-input-arg",
                [solver ": invalid value assigned to field 'Jacobian'"]);
       endif
     endif
   endif
 
   if (! isempty (options.OutputFcn))
     if (ischar (options.OutputFcn))
       try
         options.OutputFcn = str2func (options.OutputFcn);
       catch
         warning (lasterr);
       end_try_catch
-      if (! isa (options.OutputFcn, "function_handle"))
+      if (! is_function_handle (options.OutputFcn))
         error ("Octave:invalid-input-arg",
                [solver ": invalid value assigned to field '%s'"], "OutputFcn");
       endif
     endif
   endif
 
   if (! isempty (options.Events))
     if (ischar (options.Events))
       try
         options.Events = str2func (options.Events);
       catch
         warning (lasterr);
       end_try_catch
-      if (! isa (options.Events, "function_handle"))
+      if (! is_function_handle (options.Events))
         error ("Octave:invalid-input-arg",
                [solver ": invalid value assigned to field 'Events'"]);
       endif
     endif
   endif
 
   [defaults, classes, attributes] = odedefaults (n, trange(1), trange(end));
 
@@ -168,17 +168,17 @@ function varargout = ode15s (fun, trange
 
   ## Mass
   options.havemassfun    = false;
   options.havestatedep   = false;
   options.havetimedep    = false;
   options.havemasssparse = false;
 
   if (! isempty (options.Mass))
-    if (isa (options.Mass, "function_handle"))
+    if (is_function_handle (options.Mass))
       options.havemassfun = true;
       if (nargin (options.Mass) == 2)
         options.havestatedep = true;
         M = options.Mass (trange(1), y0);
         options.havemasssparse = issparse (M);
         if (any (size (M) != [n n]) || ! isnumeric (M) || ! isreal (M))
           error ("Octave:invalid-input-arg",
                  [solver ": invalid value assigned to field 'Mass'"]);
@@ -210,17 +210,17 @@ function varargout = ode15s (fun, trange
 
   ## Jacobian
   options.havejac       = false;
   options.havejacsparse = false;
   options.havejacfun    = false;
 
   if (! isempty (options.Jacobian))
     options.havejac = true;
-    if (isa (options.Jacobian, "function_handle"))
+    if (is_function_handle (options.Jacobian))
       options.havejacfun = true;
       if (nargin (options.Jacobian) == 2)
         [A] = options.Jacobian (trange(1), y0);
         if (issparse (A))
           options.havejacsparse = true;  # Jac is sparse fun
         endif
         if (any (size (A) != [n n]) || ! isnumeric (A) || ! isreal (A))
           error ("Octave:invalid-input-arg",
diff --git a/scripts/ode/ode23.m b/scripts/ode/ode23.m
--- a/scripts/ode/ode23.m
+++ b/scripts/ode/ode23.m
@@ -140,17 +140,17 @@ function varargout = ode23 (fun, trange,
 
   if (ischar (fun))
     try
       fun = str2func (fun);
     catch
       warning (lasterr);
     end_try_catch
   endif
-  if (! isa (fun, "function_handle"))
+  if (! is_function_handle (fun))
     error ("Octave:invalid-input-arg",
            "ode23: FUN must be a valid function handle");
   endif
 
   ## Start preprocessing, have a look which options are set in odeopts,
   ## check if an invalid or unused option is set.
   [defaults, classes, attributes] = odedefaults (numel (init),
                                                  trange(1), trange(end));
@@ -194,17 +194,17 @@ function varargout = ode23 (fun, trange,
                                              odeopts.AbsTol, odeopts.RelTol,
                                              strcmpi (odeopts.NormControl, "on"),
                                              odeopts.funarguments);
   endif
 
   if (! isempty (odeopts.Mass) && isnumeric (odeopts.Mass))
     havemasshandle = false;
     mass = odeopts.Mass;    # constant mass
-  elseif (isa (odeopts.Mass, "function_handle"))
+  elseif (is_function_handle (odeopts.Mass))
     havemasshandle = true;  # mass defined by a function handle
   else  # no mass matrix - creating a diag-matrix of ones for mass
     havemasshandle = false; # mass = diag (ones (length (init), 1), 0);
   endif
 
   ## Starting the initialization of the core solver ode23
 
   if (havemasshandle)   # Handle only the dynamic mass matrix,
diff --git a/scripts/ode/ode45.m b/scripts/ode/ode45.m
--- a/scripts/ode/ode45.m
+++ b/scripts/ode/ode45.m
@@ -137,17 +137,17 @@ function varargout = ode45 (fun, trange,
 
   if (ischar (fun))
     try
       fun = str2func (fun);
     catch
       warning (lasterr);
     end_try_catch
   endif
-  if (! isa (fun, "function_handle"))
+  if (! is_function_handle (fun))
     error ("Octave:invalid-input-arg",
            "ode45: FUN must be a valid function handle");
   endif
 
   ## Start preprocessing, have a look which options are set in odeopts,
   ## check if an invalid or unused option is set
   [defaults, classes, attributes] = odedefaults (numel (init),
                                                  trange(1), trange(end));
@@ -194,17 +194,17 @@ function varargout = ode45 (fun, trange,
                                              odeopts.AbsTol, odeopts.RelTol,
                                              strcmpi (odeopts.NormControl, "on"),
                                              odeopts.funarguments);
   endif
 
   if (! isempty (odeopts.Mass) && isnumeric (odeopts.Mass))
     havemasshandle = false;
     mass = odeopts.Mass;  # constant mass
-  elseif (isa (odeopts.Mass, "function_handle"))
+  elseif (is_function_handle (odeopts.Mass))
     havemasshandle = true;    # mass defined by a function handle
   else  # no mass matrix - creating a diag-matrix of ones for mass
     havemasshandle = false;   # mass = diag (ones (length (init), 1), 0);
   endif
 
   ## Starting the initialization of the core solver ode45
 
   if (havemasshandle)   # Handle only the dynamic mass matrix,
diff --git a/scripts/ode/private/check_default_input.m b/scripts/ode/private/check_default_input.m
--- a/scripts/ode/private/check_default_input.m
+++ b/scripts/ode/private/check_default_input.m
@@ -28,17 +28,17 @@ function [fun] = check_default_input (fu
 
   if (ischar (fun))
     try
       fun = str2func (fun);
     catch
       warning (lasterr);
     end_try_catch
   endif
-  if (! isa (fun, "function_handle"))
+  if (! is_function_handle (fun))
     error ("Octave:invalid-input-arg",
                [solver ": invalid value assigned to field '%s'"], "fun");
   endif
 
   ## Check trange
   validateattributes (trange, {"float"}, {"vector", "real"}, solver, "trange");
 
   if (numel (trange) < 2)
diff --git a/scripts/plot/draw/fplot.m b/scripts/plot/draw/fplot.m
--- a/scripts/plot/draw/fplot.m
+++ b/scripts/plot/draw/fplot.m
@@ -87,17 +87,17 @@ function [X, Y] = fplot (varargin)
 
   fn = varargin{1};
   limits = varargin{2};
   varargin = varargin(3:end);
 
   if (strcmp (typeinfo (fn), "inline function"))
     fn = vectorize (fn);
     nam = formula (fn);
-  elseif (isa (fn, "function_handle"))
+  elseif (is_function_handle (fn))
     nam = func2str (fn);
   elseif (all (isalnum (fn)))
     nam = fn;
   elseif (ischar (fn))
     fn = vectorize (inline (fn));
     nam = formula (fn);
   else
     error ("fplot: FN must be a function handle, inline function, or string");
diff --git a/scripts/plot/draw/private/__ezplot__.m b/scripts/plot/draw/private/__ezplot__.m
--- a/scripts/plot/draw/private/__ezplot__.m
+++ b/scripts/plot/draw/private/__ezplot__.m
@@ -98,17 +98,17 @@ function [h, needusage] = __ezplot__ (pl
       yarg = "y";
     elseif (isplot || ispolar)
       xarg = "";
       yarg = "";
     else
       xarg = argids{1};
       yarg = argids{2};
     endif
-  elseif (isa (fun, "function_handle"))
+  elseif (is_function_handle (fun))
     fstr = func2str (fun);
     idx = index (fstr, ')');
     if (idx != 0)
       args = regexp (fstr(3:(idx-1)), '\w+', 'match');
       fstr = fstr(idx+2:end);  # remove '@(x) ' from string name
     else
       args = {"x"};
       try
@@ -160,17 +160,17 @@ function [h, needusage] = __ezplot__ (pl
       fstry = formula (funy);
     elseif (strcmp (typeinfo (funy), "inline function"))
       parametric = true;
       if (numel (argnames (funy)) != nargs)
         error ("%s: expecting a function of %d arguments", ezfunc, nargs);
       endif
       funy = vectorize (funy);
       fstry = formula (funy);
-    elseif (isa (funy, "function_handle"))
+    elseif (is_function_handle (funy))
       parametric = true;
       fstry = func2str (funy);
       idx = index (fstry, ')');
       if (idx != 0)
         args = regexp (fstry(3:(idx-1)), '\w+', 'match');
         fstry = fstry(idx+2:end);  # remove '@(x) ' from string name
       else
         args = {"y"};
@@ -204,17 +204,17 @@ function [h, needusage] = __ezplot__ (pl
         endif
         fstrz = formula (funz);
       elseif (strcmp (typeinfo (funz), "inline function"))
         if (numel (argnames (funz)) != nargs)
           error ("%s: expecting a function of %d arguments", ezfunc, nargs);
         endif
         funz = vectorize (funz);
         fstrz = formula (funz);
-      elseif (isa (funz, "function_handle"))
+      elseif (is_function_handle (funz))
         fstrz = func2str (funz);
         idx = index (fstrz, ')');
         if (idx != 0)
           args = regexp (fstrz(3:(idx-1)), '\w+', 'match');
           fstrz = fstrz(idx+2:end);  # remove '@(x) ' from string name
         else
           args = {"z"};
         endif
diff --git a/scripts/sparse/private/__alltohandles__.m b/scripts/sparse/private/__alltohandles__.m
--- a/scripts/sparse/private/__alltohandles__.m
+++ b/scripts/sparse/private/__alltohandles__.m
@@ -48,48 +48,48 @@
 
 function [Afun, M1fun, M2fun] = __alltohandles__ (A, b, M1, M2, solver_name)
 
   A_is_numeric = false;
   M1_is_numeric = false;
   M2_is_numeric = false;
 
   ## Check A and set its type
-  if (isa (A, "function_handle"))
+  if (is_function_handle (A))
      Afun = A;
   elseif (ischar (A))
     Afun = str2func (A);
   elseif (!isnumeric (A) || !issquare (A))
     error([solver_name, ": A must be a square matrix or a function handle"])
   else
     A_is_numeric = true;
     if (size (A, 2) != size (b, 1))
       error ("__alltohandles__: dimension of b is not consistent with A")
     endif
   endif
 
   ## Check M1 and sets its type
   if (isempty (M1)) # M1 empty, set to identity function
       M1fun = @(x) x;
   else # M1 not empty
-    if (isa (M1, "function_handle"))
+    if (is_function_handle (M1))
       M1fun = M1;
     elseif (ischar (M1))
       M1fun = str2func (M1);
     elseif (!isnumeric (M1) || !issquare (M1))
       error([solver_name, ": M1 must be a square matrix or a function handle"])
     else
       M1_is_numeric = true;
     endif
   endif
 
   if (isempty (M2)) # M2 empty, then I set is to the identity function
     M2fun = @(x) x;
   else # M2 not empty
-    if (isa (M2, "function_handle"))
+    if (is_function_handle (M2))
       M2fun = M2;
     elseif (ischar (M2))
       M2fun = str2func (M2);
     elseif (!isnumeric (M2) || !issquare (M2))
       error([solver_name, ": M2 must be a square matrix or a function handle"])
     else
       M2_is_numeric = true;
     endif
diff --git a/scripts/sparse/qmr.m b/scripts/sparse/qmr.m
--- a/scripts/sparse/qmr.m
+++ b/scripts/sparse/qmr.m
@@ -90,17 +90,17 @@
 function [x, flag, relres, iter, resvec] = qmr (A, b, rtol, maxit, M1, M2, x0)
 
   if (nargin >= 2 && isvector (full (b)))
 
     if (ischar (A))
       fun = str2func (A);
       Ax  = @(x) feval (fun, x, "notransp");
       Atx = @(x) feval (fun, x, "transp");
-    elseif (isa (A, "function_handle"))
+    elseif (is_function_handle (A))
       Ax  = @(x) feval (A, x, "notransp");
       Atx = @(x) feval (A, x, "transp");
     elseif (isnumeric (A) && issquare (A))
       Ax  = @(x) A  * x;
       Atx = @(x) A' * x;
     else
       error ("qmr: A must be a square matrix or function");
     endif
@@ -117,34 +117,34 @@ function [x, flag, relres, iter, resvec]
 
     if (nargin < 5 || isempty (M1))
       M1m1x = @(x, ignore) x;
       M1tm1x = M1m1x;
     elseif (ischar (M1))
       fun = str2func (M1);
       M1m1x  = @(x) feval (fun, x, "notransp");
       M1tm1x = @(x) feval (fun, x, "transp");
-    elseif (isa (M1, "function_handle"))
+    elseif (is_function_handle (M1))
       M1m1x  = @(x) feval (M1, x, "notransp");
       M1tm1x = @(x) feval (M1, x, "transp");
     elseif (isnumeric (M1) && ismatrix (M1))
       M1m1x  = @(x) M1  \ x;
       M1tm1x = @(x) M1' \ x;
     else
       error ("qmr: preconditioner M1 must be a function or matrix");
     endif
 
     if (nargin < 6 || isempty (M2))
       M2m1x = @(x, ignore) x;
       M2tm1x = M2m1x;
     elseif (ischar (M2))
       fun = str2func (M2);
       M2m1x  = @(x) feval (fun, x, "notransp");
       M2tm1x = @(x) feval (fun, x, "transp");
-    elseif (isa (M2, "function_handle"))
+    elseif (is_function_handle (M2))
       M2m1x  = @(x) feval (M2, x, "notransp");
       M2tm1x = @(x) feval (M2, x, "transp");
     elseif (isnumeric (M2) && ismatrix (M2))
       M2m1x  = @(x) M2  \ x;
       M2tm1x = @(x) M2' \ x;
     else
       error ("qmr: preconditioner M2 must be a function or matrix");
     endif
diff --git a/scripts/sparse/spfun.m b/scripts/sparse/spfun.m
--- a/scripts/sparse/spfun.m
+++ b/scripts/sparse/spfun.m
@@ -30,17 +30,17 @@ function y = spfun (f, S)
 
   if (nargin != 2)
     print_usage ();
   endif
 
   [i, j, v] = find (S);
   [m, n] = size (S);
 
-  if (isa (f, "function_handle") || isa (f, "inline function"))
+  if (is_function_handle (f))
     y = sparse (i, j, f(v), m, n);
   else
     y = sparse (i, j, feval (f, v), m, n);
   endif
 
 endfunction
 
 
diff --git a/test/args.tst b/test/args.tst
--- a/test/args.tst
+++ b/test/args.tst
@@ -215,21 +215,21 @@
 %!endfunction
 %!test
 %! f()
 
 ## Function handle (builtin)
 %!function f (x = @sin)
 %!  finfo = functions (x);
 %!  fname = finfo.function;
-%!  assert (isa (x, "function_handle") && strcmp (fname, "sin"));
+%!  assert (is_function_handle (x) && strcmp (fname, "sin"));
 %!endfunction
 %!test
 %! f()
 
 ## Function handle (anonymous)
 %!function f (x = @(x) x.^2)
 %!  finfo = functions (x);
 %!  ftype = finfo.type;
-%!  assert (isa (x, "function_handle") && strcmp (ftype, "anonymous"));
+%!  assert (is_function_handle (x) && strcmp (ftype, "anonymous"));
 %!endfunction
 %!test
 %! f()
