# HG changeset patch
# User Rik <rik@octave.org>
# Date 1513441356 28800
#      Sat Dec 16 08:22:36 2017 -0800
# Node ID e1390a99a9931237ef42dbb40ef21cf179f8fcdf
# Parent  c23b9af6a664d12780bb7ff54830970a2a4708b7
close.m: update cset 9213b8166af9 for better Matlab compatibility (bug #52621).

* close.m: Close hidden figures without "hidden" argument if they are
identified specifically either by handle or name.  Don't change
HandleVisibility of figures that are about to be deleted as it is
unnecessary.

diff --git a/scripts/plot/util/close.m b/scripts/plot/util/close.m
--- a/scripts/plot/util/close.m
+++ b/scripts/plot/util/close.m
@@ -13,41 +13,38 @@
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} close
-## @deftypefnx {} {} close @var{h}
+## @deftypefnx {} {} close (@var{h})
 ## @deftypefnx {} {} close @var{figname}
-## @deftypefnx {} {} close (@var{h})
-## @deftypefnx {} {} close (@var{figname})
-## @deftypefnx {} {} close (@dots{}, "hidden")
-## @deftypefnx {} {} close (@dots{}, "force")
 ## @deftypefnx {} {} close all
 ## @deftypefnx {} {} close all hidden
 ## @deftypefnx {} {} close all force
 ## Close figure window(s).
 ##
 ## When called with no arguments, close the current figure.  This is equivalent
 ## to @code{close (gcf)}.  If the input @var{h} is a graphic handle, or vector
 ## of graphics handles, then close each figure in @var{h}.  The figure to
 ## close may also be specified by name @var{figname} which is matched against
 ## the @qcode{"Name"} property of all figures.
 ##
 ## If the argument @qcode{"all"} is given then all figures with visible handles
 ## (HandleVisibility = @qcode{"on"}) are closed.
 ##
-## If the argument @qcode{"hidden"} is given then figures, including hidden
-## ones, are closed.
+## If the additional argument @qcode{"hidden"} is given then all figures,
+## including hidden ones, are closed.
 ##
-## If the argument @qcode{"force"} is given then figures are closed even when
-## @qcode{"closerequestfcn"} has been altered to prevent closing the window.
+## If the additional argument @qcode{"force"} is given then figures are closed
+## even when @qcode{"closerequestfcn"} has been altered to prevent closing the
+## window.
 ##
 ## Implementation Note: @code{close} operates by making the handle @var{h} the
 ## current figure, and then calling the function specified by the
 ## @qcode{"closerequestfcn"} property of the figure.  By default, the function
 ## @code{closereq} is used.  It is possible that the function invoked will
 ## delay or abort removing the figure.  To remove a figure without executing
 ## any callback functions use @code{delete}.  When writing a callback function
 ## to close a window do not use @code{close} to avoid recursion.
@@ -69,21 +66,20 @@ function retval = close (arg1, arg2)
       figs = [];
     endif
   elseif (nargin == 1)
     if (ischar (arg1))
       if (strcmpi (arg1, "all"))
         figs = get (0, "children");
         figs = figs(isfigure (figs));
       else
-        figs = findobj ("-depth", 1, "name", arg1, "type", "figure");
+        figs = findall ("-depth", 1, "name", arg1, "type", "figure");
       endif
     elseif (any (isfigure (arg1)))
       figs = arg1(isfigure (arg1));
-      figs = figs(strcmp ("on", get (figs, "handlevisibility")));
     elseif (isempty (arg1))
       figs = [];  # Silently accept null argument for Matlab compatibility
     else
       error ('close: first argument must be "all", a figure handle, or a figure name');
     endif
   elseif (ischar (arg2)
           && (strcmpi (arg2, "hidden") || strcmpi (arg2, "force")))
     if (ischar (arg1))
@@ -99,18 +95,16 @@ function retval = close (arg1, arg2)
       figs = [];  # Silently accept null argument for Matlab compatibility
     else
       error ('close: first argument must be "all", a figure handle, or a figure name');
     endif
     if (strcmpi (arg2, "force"))
       delete (figs);
       return;
     endif
-    ## Unhide hidden figures that are about to be deleted
-    set (figs, "handlevisibility", "on");
   else
     error ('close: second argument must be "hidden" or "force"');
   endif
 
   ## Save and restore current figure
   cf = get (0, "currentfigure");
 
   for hfig = figs(:).'
@@ -161,36 +155,16 @@ endfunction
 %!   assert (! isfigure (hf));
 %! unwind_protect_cleanup
 %!   if (isfigure (hf))
 %!     delete (hf);
 %!   endif
 %! end_unwind_protect
 
 %!test
-%! ## Test closing hidden figures
-%! hf1 = figure ("visible", "off", "handlevisibility", "off");
-%! hf2 = figure ("visible", "off");
-%! unwind_protect
-%!   close (hf1);
-%!   assert (isfigure (hf1));    # figure not deleted
-%!   close ([hf1 hf2]);
-%!   assert (isfigure (hf1) && ! isfigure (hf2));
-%!   close (hf1, "hidden");
-%!   assert (! isfigure (hf1));  # figure finally deleted
-%! unwind_protect_cleanup
-%!   if (isfigure (hf1))
-%!     delete (hf1);
-%!   endif
-%!   if (isfigure (hf2))
-%!     delete (hf2);
-%!   endif
-%! end_unwind_protect
-
-%!test
 %! ## Test forcing the close of a figure
 %! hf = figure ("visible", "off", "closerequestfcn", []);
 %! unwind_protect
 %!   close (hf);
 %!   assert (isfigure (hf));    # figure not deleted
 %!   close (hf, "force");
 %!   assert (! isfigure (hf));  # figure finally deleted
 %! unwind_protect_cleanup
