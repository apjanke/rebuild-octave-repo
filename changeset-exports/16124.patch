# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1361903081 18000
#      Tue Feb 26 13:24:41 2013 -0500
# Node ID 3be725cd195b201af00c41724d557c370fe241e2
# Parent  a484e39d1f223a29142d7b4571019c6e8e390a79
move more lexer helper functions to lexical_feedback class

* lex.h, lex.ll (prep_for_script_file, prep_for_function_file):
Declare as member functions in lexical_feedback class.  Rename from
prep_lexer_for_script file and prep_lexer_for_function_file.  Change
all uses.

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -46,19 +46,16 @@ extern OCTINTERP_API void delete_buffer 
 
 extern OCTINTERP_API void clear_all_buffers (void);
 
 extern OCTINTERP_API void cleanup_parser (void);
 
 // Is the given string a keyword?
 extern bool is_keyword (const std::string& s);
 
-extern void prep_lexer_for_script_file (void);
-extern void prep_lexer_for_function_file (void);
-
 class
 stream_reader
 {
 public:
   virtual int getc (void) = 0;
   virtual int ungetc (int c) = 0;
 
 protected:
@@ -202,16 +199,20 @@ public:
   {
     // The closest paren, brace, or bracket nesting is not an object
     // index.
     looking_at_object_index.push_front (false);
   }
 
   void reset_parser (void);
 
+  void prep_for_script_file (void);
+
+  void prep_for_function_file (void);
+
   int octave_read (char *buf, unsigned int max_size);
 
   void do_comma_insert_check (void);
 
   int text_yyinput (void);
 
   void xunput (char c, char *buf);
 
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1292,28 +1292,16 @@ is omitted, return a list of keywords.\n
 /*
 
 %!assert (iskeyword ("for"))
 %!assert (iskeyword ("fort"), false)
 %!assert (iskeyword ("fft"), false)
 
 */
 
-void
-prep_lexer_for_script_file (void)
-{
-  BEGIN (SCRIPT_FILE_BEGIN);
-}
-
-void
-prep_lexer_for_function_file (void)
-{
-  BEGIN (FUNCTION_FILE_BEGIN);
-}
-
 // Used to delete trailing white space from tokens.
 
 static std::string
 strip_trailing_whitespace (char *s)
 {
   std::string retval = s;
 
   size_t pos = retval.find_first_of (" \t");
@@ -1416,16 +1404,28 @@ lexical_feedback::reset_parser (void)
             || input_from_startup_file))
     yyrestart (stdin);
 
   // Clear the buffer for help text.
   while (! help_buf.empty ())
     help_buf.pop ();
 }
 
+void
+lexical_feedback::prep_for_script_file (void)
+{
+  BEGIN (SCRIPT_FILE_BEGIN);
+}
+
+void
+lexical_feedback::prep_for_function_file (void)
+{
+  BEGIN (FUNCTION_FILE_BEGIN);
+}
+
 int
 lexical_feedback::octave_read (char *buf, unsigned max_size)
 {
   static const char * const eol = "\n";
   static std::string input_buf;
   static const char *pos = 0;
   static size_t chars_left = 0;
   static bool eof = false;
diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -3573,19 +3573,19 @@ parse_fcn_file (const std::string& ff, c
           // interrupt.
           symbol_table::scope_id scope = symbol_table::top_scope ();
           frame.add_fcn (symbol_table::unmark_forced_variables, scope);
 
           if (! help_txt.empty ())
             help_buf.push (help_txt);
 
           if (reading_script_file)
-            prep_lexer_for_script_file ();
+            curr_lexer->prep_for_script_file ();
           else
-            prep_lexer_for_function_file ();
+            curr_lexer->prep_for_function_file ();
 
           curr_lexer->parsing_class_method = ! dispatch_type.empty ();
 
           frame.protect_var (global_command);
 
           global_command = 0;
 
           int status = octave_parse_input ();
