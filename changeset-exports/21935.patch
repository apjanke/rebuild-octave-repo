# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1466120600 14400
#      Thu Jun 16 19:43:20 2016 -0400
# Node ID 2f33052c68fffcac183744d02a452fefc4116b63
# Parent  b0e5173521b95f14e4315f41e4eec120ddf27d19
hide sys/stat.h header

* stat-wrappers.c, stat-wrappers.h (octave_stat_wrapper,
octave_lstat_wrapper, octave_fstat_wrapper, octave_is_blk_wrapper,
octave_is_chr_wrapper, octave_is_dir_wrapper, octave_is_fifo_wrapper,
octave_is_lnk_wrapper, octave_is_reg_wrapper, octave_is_sock_wrapper,
octave_have_struct_stat_st_rdev, octave_have_struct_stat_st_blksize,
octave_have_struct_stat_st_blocks): New functions.
(assign_stat_fields): New static function.

* statdefs.h: Delete
* liboctave/util/module.mk: Update.

* file-stat.cc, file-stat.h: Use new wrapper functions.
(have_struct_stat_st_rdev, have_struct_stat_st_blksize,
have_struct_stat_st_blocks): New functions.

* syscalls.cc: Use file_stat interface instead of config macros.

diff --git a/libinterp/corefcn/syscalls.cc b/libinterp/corefcn/syscalls.cc
--- a/libinterp/corefcn/syscalls.cc
+++ b/libinterp/corefcn/syscalls.cc
@@ -53,38 +53,46 @@ along with Octave; see the file COPYING.
 #include "sysdep.h"
 #include "utils.h"
 #include "variables.h"
 #include "input.h"
 
 static octave_scalar_map
 mk_stat_map (const octave::sys::base_file_stat& fs)
 {
+  static bool have_rdev = file_stat::have_struct_stat_st_rdev ();
+  static bool have_blksize = file_stat::have_struct_stat_st_blksize ();
+  static bool have_blocks = file_stat::have_struct_stat_st_blocks ();
+
+  static double nan = octave::numeric_limits<double>::NaN ();
+
   octave_scalar_map m;
 
   m.assign ("dev", static_cast<double> (fs.dev ()));
   m.assign ("ino", fs.ino ());
   m.assign ("mode", fs.mode ());
   m.assign ("modestr", fs.mode_as_string ());
   m.assign ("nlink", fs.nlink ());
   m.assign ("uid", fs.uid ());
   m.assign ("gid", fs.gid ());
-#if defined (HAVE_STRUCT_STAT_ST_RDEV)
-  m.assign ("rdev", static_cast<double> (fs.rdev ()));
-#endif
+  m.assign ("rdev", have_rdev ? static_cast<double> (fs.rdev ()) : nan);
   m.assign ("size", fs.size ());
   m.assign ("atime", fs.atime ());
   m.assign ("mtime", fs.mtime ());
   m.assign ("ctime", fs.ctime ());
-#if defined (HAVE_STRUCT_STAT_ST_BLKSIZE)
-  m.assign ("blksize", fs.blksize ());
-#endif
-#if defined (HAVE_STRUCT_STAT_ST_BLOCKS)
-  m.assign ("blocks", fs.blocks ());
-#endif
+
+  if (have_blksize)
+    m.assign ("blksize", fs.blksize ());
+  else
+    m.assign ("blksize", nan);
+  
+  if (have_blocks)
+    m.assign ("blocks", fs.blocks ());
+  else
+    m.assign ("blocks", nan);
 
   return m;
 }
 
 static octave_value_list
 mk_stat_result (const octave::sys::base_file_stat& fs)
 {
   if (fs)
diff --git a/liboctave/system/file-stat.cc b/liboctave/system/file-stat.cc
--- a/liboctave/system/file-stat.cc
+++ b/liboctave/system/file-stat.cc
@@ -24,17 +24,17 @@ along with Octave; see the file COPYING.
 #  include "config.h"
 #endif
 
 #include <cerrno>
 #include <cstring>
 
 #include "file-ops.h"
 #include "file-stat.h"
-#include "statdefs.h"
+#include "stat-wrappers.h"
 #include "strmode-wrapper.h"
 
 namespace octave
 {
   namespace sys
   {
     // FIXME: the is_* and mode_as_string functions are only valid
     // for initialized objects.  If called for an object that is not
@@ -80,81 +80,71 @@ namespace octave
     base_file_stat::is_sock (void) const
     {
       return exists () && is_sock (m_mode);
     }
 
     bool
     base_file_stat::is_blk (mode_t mode)
     {
-#if defined (S_ISBLK)
-      return S_ISBLK (mode);
-#else
-      return false;
-#endif
+      return octave_is_blk_wrapper (mode);
     }
 
     bool
     base_file_stat::is_chr (mode_t mode)
     {
-#if defined (S_ISCHR)
-      return S_ISCHR (mode);
-#else
-      return false;
-#endif
+      return octave_is_chr_wrapper (mode);
     }
 
     bool
     base_file_stat::is_dir (mode_t mode)
     {
-#if defined (S_ISDIR)
-      return S_ISDIR (mode);
-#else
-      return false;
-#endif
+      return octave_is_dir_wrapper (mode);
     }
 
     bool
     base_file_stat::is_fifo (mode_t mode)
     {
-#if defined (S_ISFIFO)
-      return S_ISFIFO (mode);
-#else
-      return false;
-#endif
+      return octave_is_fifo_wrapper (mode);
     }
 
     bool
     base_file_stat::is_lnk (mode_t mode)
     {
-#if defined (S_ISLNK)
-      return S_ISLNK (mode);
-#else
-      return false;
-#endif
+      return octave_is_lnk_wrapper (mode);
     }
 
     bool
     base_file_stat::is_reg (mode_t mode)
     {
-#if defined (S_ISREG)
-      return S_ISREG (mode);
-#else
-      return false;
-#endif
+      return octave_is_reg_wrapper (mode);
     }
 
     bool
     base_file_stat::is_sock (mode_t mode)
     {
-#if defined (S_ISSOCK)
-      return S_ISSOCK (mode);
-#else
-      return false;
-#endif
+      return octave_is_sock_wrapper (mode);
+    }
+
+    bool
+    base_file_stat::have_struct_stat_st_rdev (void)
+    {
+      return ::octave_have_struct_stat_st_rdev ();
+    }
+
+    bool
+    base_file_stat::have_struct_stat_st_blksize (void)
+    {
+      return octave_have_struct_stat_st_blksize ();
+    }
+
+    bool
+    base_file_stat::have_struct_stat_st_blocks (void)
+    {
+      return octave_have_struct_stat_st_blocks ();
     }
 
     std::string
     base_file_stat::mode_as_string (void) const
     {
       char buf[12];
 
       octave_strmode_wrapper (m_mode, buf);
@@ -191,96 +181,70 @@ namespace octave
           if (octave::sys::file_ops::is_dir_sep (full_file_name[full_file_name.length () - 1])
               && full_file_name.length () != 1
               && ! (full_file_name.length () == 3 && full_file_name[1] == ':'))
             full_file_name.resize (full_file_name.length () - 1);
 #endif
 
           const char *cname = full_file_name.c_str ();
 
-          struct stat buf;
+          time_t sys_atime, sys_mtime, sys_ctime;
 
-          int status = follow_links
-            ? stat (cname, &buf) : gnulib::lstat (cname, &buf);
+          int status
+            = (follow_links
+               ? octave_stat_wrapper (cname, &m_mode, &m_ino, &m_dev,
+                                      &m_nlink, &m_uid, &m_gid, &m_size,
+                                      &sys_atime, &sys_mtime, &sys_ctime,
+                                      &m_rdev, &m_blksize, &m_blocks)
+               : octave_lstat_wrapper (cname, &m_mode, &m_ino, &m_dev,
+                                       &m_nlink, &m_uid, &m_gid, &m_size,
+                                       &sys_atime, &sys_mtime, &sys_ctime,
+                                       &m_rdev, &m_blksize, &m_blocks));
 
           if (status < 0)
             {
               fail = true;
               errmsg = gnulib::strerror (errno);
             }
           else
             {
-              m_mode = buf.st_mode;
-              m_ino = buf.st_ino;
-              m_dev = buf.st_dev;
-              m_nlink = buf.st_nlink;
-              m_uid = buf.st_uid;
-              m_gid = buf.st_gid;
-              m_size = buf.st_size;
-              m_atime = buf.st_atime;
-              m_mtime = buf.st_mtime;
-              m_ctime = buf.st_ctime;
-
-#if defined (HAVE_STRUCT_STAT_ST_RDEV)
-              m_rdev = buf.st_rdev;
-#endif
-
-#if defined (HAVE_STRUCT_STAT_ST_BLKSIZE)
-              m_blksize = buf.st_blksize;
-#endif
-
-#if defined (HAVE_STRUCT_STAT_ST_BLOCKS)
-              m_blocks = buf.st_blocks;
-#endif
+              m_atime = octave::sys::time (sys_atime);
+              m_mtime = octave::sys::time (sys_mtime);
+              m_ctime = octave::sys::time (sys_ctime);
             }
 
           initialized = true;
         }
     }
 
     void
     file_fstat::update_internal (bool force)
     {
       if (! initialized || force)
         {
           initialized = false;
           fail = false;
 
-          struct stat buf;
+          time_t sys_atime, sys_mtime, sys_ctime;
 
-          int status = gnulib::fstat (fid, &buf);
+          int status
+            = octave_fstat_wrapper (fid, &m_mode, &m_ino, &m_dev,
+                                    &m_nlink, &m_uid, &m_gid, &m_size,
+                                    &sys_atime, &sys_mtime, &sys_ctime,
+                                    &m_rdev, &m_blksize, &m_blocks);
 
           if (status < 0)
             {
               fail = true;
               errmsg = gnulib::strerror (errno);
             }
           else
             {
-              m_mode = buf.st_mode;
-              m_ino = buf.st_ino;
-              m_dev = buf.st_dev;
-              m_nlink = buf.st_nlink;
-              m_uid = buf.st_uid;
-              m_gid = buf.st_gid;
-              m_size = buf.st_size;
-              m_atime = buf.st_atime;
-              m_mtime = buf.st_mtime;
-              m_ctime = buf.st_ctime;
-
-#if defined (HAVE_STRUCT_STAT_ST_RDEV)
-              m_rdev = buf.st_rdev;
-#endif
-
-#if defined (HAVE_STRUCT_STAT_ST_BLKSIZE)
-              m_blksize = buf.st_blksize;
-#endif
-
-#if defined (HAVE_STRUCT_STAT_ST_BLOCKS)
-              m_blocks = buf.st_blocks;
-#endif
+              m_atime = octave::sys::time (sys_atime);
+              m_mtime = octave::sys::time (sys_mtime);
+              m_ctime = octave::sys::time (sys_ctime);
             }
 
           initialized = true;
         }
     }
   }
 }
diff --git a/liboctave/system/file-stat.h b/liboctave/system/file-stat.h
--- a/liboctave/system/file-stat.h
+++ b/liboctave/system/file-stat.h
@@ -105,16 +105,20 @@ namespace octave
       static bool is_blk (mode_t mode);
       static bool is_chr (mode_t mode);
       static bool is_dir (mode_t mode);
       static bool is_fifo (mode_t mode);
       static bool is_lnk (mode_t mode);
       static bool is_reg (mode_t mode);
       static bool is_sock (mode_t mode);
 
+      static bool have_struct_stat_st_rdev (void);
+      static bool have_struct_stat_st_blksize (void);
+      static bool have_struct_stat_st_blocks (void);
+
       ino_t ino (void) const { return m_ino; }
       dev_t dev (void) const { return m_dev; }
 
       nlink_t nlink (void) const { return m_nlink; }
 
       uid_t uid (void) const { return m_uid; }
       gid_t gid (void) const { return m_gid; }
 
diff --git a/liboctave/util/module.mk b/liboctave/util/module.mk
--- a/liboctave/util/module.mk
+++ b/liboctave/util/module.mk
@@ -38,18 +38,17 @@ UTIL_INC = \
   liboctave/util/sparse-util.h \
   liboctave/util/str-vec.h \
   liboctave/util/sun-utils.h \
   liboctave/util/unwind-prot.h \
   liboctave/util/url-transfer.h
 
 NOINSTALL_UTIL_INC = \
   liboctave/util/kpse.h \
-  liboctave/util/oct-sparse.h \
-  liboctave/util/statdefs.h
+  liboctave/util/oct-sparse.h
 
 UTIL_C_SRC = \
   liboctave/util/f2c-main.c \
   liboctave/util/lo-cutils.c \
   liboctave/util/oct-rl-edit.c \
   liboctave/util/oct-rl-hist.c
 
 UTIL_SRC = \
diff --git a/liboctave/util/statdefs.h b/liboctave/util/statdefs.h
deleted file mode 100644
--- a/liboctave/util/statdefs.h
+++ /dev/null
@@ -1,72 +0,0 @@
-/*
-
-Copyright (C) 1993-2015 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 3 of the License, or (at your
-option) any later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#if ! defined (octave_statdefs_h)
-#define octave_statdefs_h 1
-
-#include "octave-config.h"
-
-#include <sys/types.h>
-
-#if defined (HAVE_SYS_STAT_H)
-#  include <sys/stat.h>
-#endif
-
-#if ! defined (S_ISREG)
-#  if ! defined (mode_t)
-#    define mode_t unsigned short
-#  endif
-#endif
-#if ! defined (S_ISBLK) && defined (S_IFBLK)
-#  define S_ISBLK(m) (((m) & S_IFMT) == S_IFBLK)
-#endif
-#if ! defined (S_ISCHR) && defined (S_IFCHR)
-#  define S_ISCHR(m) (((m) & S_IFMT) == S_IFCHR)
-#endif
-#if ! defined (S_ISDIR) && defined (S_IFDIR)
-#  define S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)
-#endif
-#if ! defined (S_ISREG) && defined (S_IFREG)
-#  define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)
-#endif
-#if ! defined (S_ISFIFO) && defined (S_IFIFO)
-#  define S_ISFIFO(m) (((m) & S_IFMT) == S_IFIFO)
-#endif
-#if ! defined (S_ISLNK) && defined (S_IFLNK)
-#  define S_ISLNK(m) (((m) & S_IFMT) == S_IFLNK)
-#endif
-#if ! defined (S_ISSOCK) && defined (S_IFSOCK)
-#  define S_ISSOCK(m) (((m) & S_IFMT) == S_IFSOCK)
-#endif
-#if ! defined (S_ISMPB) && defined (S_IFMPB)
-#  define S_ISMPB(m) (((m) & S_IFMT) == S_IFMPB)
-#  define S_ISMPC(m) (((m) & S_IFMT) == S_IFMPC)
-#endif
-#if ! defined (S_ISNWK) && defined (S_IFNWK)
-#  define S_ISNWK(m) (((m) & S_IFMT) == S_IFNWK)
-#endif
-
-#if ! defined (S_ISLNK)
-#  undef HAVE_LSTAT
-#endif
-
-#endif
diff --git a/liboctave/wrappers/stat-wrappers.c b/liboctave/wrappers/stat-wrappers.c
--- a/liboctave/wrappers/stat-wrappers.c
+++ b/liboctave/wrappers/stat-wrappers.c
@@ -24,16 +24,19 @@ along with Octave; see the file COPYING.
 // headers directly in Octave's C++ source files to avoid problems that
 // may be caused by the way that gnulib overrides standard library
 // functions.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <time.h>
+
+#include <sys/types.h>
 #include <sys/stat.h>
 
 #include "stat-wrappers.h"
 
 int
 octave_mkdir_wrapper (const char *name, mode_t mode)
 {
   return mkdir (name, mode);
@@ -45,8 +48,194 @@ octave_mkfifo_wrapper (const char *name,
   return mkfifo (name, mode);
 }
 
 int
 octave_umask_wrapper (mode_t mode)
 {
   return umask (mode);
 }
+
+static inline void
+assign_stat_fields (struct stat *buf, mode_t *mode, ino_t *ino,
+                    dev_t *dev, nlink_t *nlink, uid_t *uid,
+                    gid_t *gid, off_t *size, time_t *atime,
+                    time_t *mtime, time_t *ctime, dev_t *rdev,
+                    long *blksize, long *blocks)
+{
+  *mode = buf->st_mode;
+  *ino = buf->st_ino;
+  *dev = buf->st_dev;
+  *nlink = buf->st_nlink;
+  *uid = buf->st_uid;
+  *gid = buf->st_gid;
+  *size = buf->st_size;
+  *atime = buf->st_atime;
+  *mtime = buf->st_mtime;
+  *ctime = buf->st_ctime;
+
+#if defined (HAVE_STRUCT_STAT_ST_RDEV)
+  *rdev = buf->st_rdev;
+#else
+  *rdev = 0;
+#endif
+
+#if defined (HAVE_STRUCT_STAT_ST_BLKSIZE)
+  *blksize = buf->st_blksize;
+  *blksize = 0;
+#endif
+
+#if defined (HAVE_STRUCT_STAT_ST_BLOCKS)
+  *blocks = buf->st_blocks;
+  *blksize = 0;
+#endif
+}
+
+int
+octave_stat_wrapper (const char *fname, mode_t *mode, ino_t *ino,
+                     dev_t *dev, nlink_t *nlink, uid_t *uid,
+                     gid_t *gid, off_t *size, time_t *atime,
+                     time_t *mtime, time_t *ctime, dev_t *rdev,
+                     long *blksize, long *blocks)
+{
+  struct stat buf;
+
+  int status = stat (fname, &buf);
+    
+  assign_stat_fields (&buf, mode, ino, dev, nlink, uid, gid, size,
+                      atime, mtime, ctime, rdev, blksize, blocks);
+
+  return status;
+}
+
+int
+octave_lstat_wrapper (const char *lname, mode_t *mode, ino_t *ino,
+                      dev_t *dev, nlink_t *nlink, uid_t *uid,
+                      gid_t *gid, off_t *size, time_t *atime,
+                      time_t *mtime, time_t *ctime, dev_t *rdev,
+                      long *blksize, long *blocks)
+{
+  struct stat buf;
+
+  int status = lstat (lname, &buf);
+    
+  assign_stat_fields (&buf, mode, ino, dev, nlink, uid, gid, size,
+                      atime, mtime, ctime, rdev, blksize, blocks);
+
+  return status;
+}
+
+int
+octave_fstat_wrapper (int fid, mode_t *mode, ino_t *ino,
+                      dev_t *dev, nlink_t *nlink, uid_t *uid,
+                      gid_t *gid, off_t *size, time_t *atime,
+                      time_t *mtime, time_t *ctime, dev_t *rdev,
+                      long *blksize, long *blocks)
+{
+  struct stat buf;
+
+  int status = fstat (fid, &buf);
+
+  assign_stat_fields (&buf, mode, ino, dev, nlink, uid, gid, size,
+                      atime, mtime, ctime, rdev, blksize, blocks);
+
+  return status;
+}
+
+bool
+octave_is_blk_wrapper (mode_t mode)
+{
+#if defined (S_ISBLK)
+  return S_ISBLK (mode);
+#else
+  return false;
+#endif
+}
+
+bool
+octave_is_chr_wrapper (mode_t mode)
+{
+#if defined (S_ISCHR)
+  return S_ISCHR (mode);
+#else
+  return false;
+#endif
+}
+
+bool
+octave_is_dir_wrapper (mode_t mode)
+{
+#if defined (S_ISDIR)
+  return S_ISDIR (mode);
+#else
+  return false;
+#endif
+}
+
+bool
+octave_is_fifo_wrapper (mode_t mode)
+{
+#if defined (S_ISFIFO)
+  return S_ISFIFO (mode);
+#else
+  return false;
+#endif
+}
+
+bool
+octave_is_lnk_wrapper (mode_t mode)
+{
+#if defined (S_ISLNK)
+  return S_ISLNK (mode);
+#else
+  return false;
+#endif
+}
+
+bool
+octave_is_reg_wrapper (mode_t mode)
+{
+#if defined (S_ISREG)
+  return S_ISREG (mode);
+#else
+  return false;
+#endif
+}
+
+bool
+octave_is_sock_wrapper (mode_t mode)
+{
+#if defined (S_ISSOCK)
+  return S_ISSOCK (mode);
+#else
+  return false;
+#endif
+}
+
+bool
+octave_have_struct_stat_st_rdev (void)
+{
+#if defined (HAVE_STRUCT_STAT_ST_RDEV)
+  return true;
+#else
+  return false;
+#endif
+}
+
+bool
+octave_have_struct_stat_st_blksize (void)
+{
+#if defined (HAVE_STRUCT_STAT_ST_BLKSIZE)
+  return true;
+#else
+  return false;
+#endif
+}
+
+bool
+octave_have_struct_stat_st_blocks (void)
+{
+#if defined (HAVE_STRUCT_STAT_ST_BLOCKS)
+  return true;
+#else
+  return false;
+#endif
+}
diff --git a/liboctave/wrappers/stat-wrappers.h b/liboctave/wrappers/stat-wrappers.h
--- a/liboctave/wrappers/stat-wrappers.h
+++ b/liboctave/wrappers/stat-wrappers.h
@@ -19,22 +19,64 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if ! defined (octave_stat_wrappers_h)
 #define octave_stat_wrappers_h 1
 
 #if defined __cplusplus
+#  include <ctime>
+#else
+#  include <stdbool.h>
+#  include <time.h>
+#endif
+
+#include <sys/types.h>
+
+#if defined __cplusplus
 extern "C" {
 #endif
 
 extern int octave_mkdir_wrapper (const char *name, mode_t mode);
 
 extern int octave_mkfifo_wrapper (const char *name, mode_t mode);
 
 extern int octave_umask_wrapper (mode_t mode);
 
+extern int
+octave_stat_wrapper (const char *fname, mode_t *mode, ino_t *ino,
+                     dev_t *dev, nlink_t *nlink, uid_t *uid,
+                     gid_t *gid, off_t *size, time_t *atime,
+                     time_t *mtime, time_t *ctime, dev_t *rdev,
+                     long *blksize, long *blocks);
+
+extern int
+octave_lstat_wrapper (const char *lname, mode_t *mode, ino_t *ino,
+                      dev_t *dev, nlink_t *nlink, uid_t *uid,
+                      gid_t *gid, off_t *size, time_t *atime,
+                      time_t *mtime, time_t *ctime, dev_t *rdev,
+                      long *blksize, long *blocks);
+
+extern int
+octave_fstat_wrapper (int fid, mode_t *mode, ino_t *ino,
+                      dev_t *dev, nlink_t *nlink, uid_t *uid,
+                      gid_t *gid, off_t *size, time_t *atime,
+                      time_t *mtime, time_t *ctime, dev_t *rdev,
+                      long *blksize, long *blocks);
+
+extern bool octave_is_blk_wrapper (mode_t mode);
+extern bool octave_is_chr_wrapper (mode_t mode);
+extern bool octave_is_dir_wrapper (mode_t mode);
+extern bool octave_is_fifo_wrapper (mode_t mode);
+extern bool octave_is_lnk_wrapper (mode_t mode);
+extern bool octave_is_reg_wrapper (mode_t mode);
+extern bool octave_is_sock_wrapper (mode_t mode);
+
+extern bool octave_have_struct_stat_st_rdev (void);
+extern bool octave_have_struct_stat_st_blksize (void);
+extern bool octave_have_struct_stat_st_blocks (void);
+
 #if defined __cplusplus
 }
 #endif
 
 #endif
