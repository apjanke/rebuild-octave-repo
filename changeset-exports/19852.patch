# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1424724234 0
#      Mon Feb 23 20:43:54 2015 +0000
# Node ID e9a0bd0b125c742096a4b620f1812f65f012cacf
# Parent  059a05bc398c52932c302cc4854fffb30abbd22c
Rename 'matlab-incompatible' warning to 'language-extension'.

* libinterp/corefcn/error.cc: replace the 'matlab-incompatible' warning with
'language-extension'. This wording will hopefully make it clear that it does
not stop or prevent Matlab code from running correctly in Octave, it simply
warns about usage of Octave only features.
* libinterp/parse-tree/lex.h, libinterp/parse-tree/lex.ll: throw the new
'language-extension' warning ID.  Also, adjust function names to better
reflect the warning name.
* libinterp/corefcn/gripes.cc, libinterp/octave-value/ov-struct.cc,
liboctave/numeric/bsxfun.h: use the new 'language-extension' warning ID.
* scripts/miscellaneous/warning_ids.m: fix warning ID and reword text.
* doc/interpreter/basics.txi, doc/interpreter/container.txi,
scripts/miscellaneous/setfield.m: replace warning ID on documentation.
* NEWS: make note of the change.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -263,18 +263,21 @@ Summary of important user-visible change
 
  ** The internal class <Octave_map> was deprecated in Octave 3.8 and has
     been removed from Octave 4.0.  Replacement classes are
     <octave_map> (struct array) or <octave_scalar_map> for a single structure.
 
  ** The warning ID Octave:singular-matrix-div has been replaced by
     Octave:nearly-singular-matrix and Octave:singular-matrix.
 
+ ** The warning ID Octave:matlab-incompatible has been replaced by
+    Octave:language-extension to better reflect its meaning.
+
  ** The warning ID Octave:broadcast has been removed.  Instead automatic
-    broadcasting will throw an Octave:matlab-incompatible warning, together
+    broadcasting will throw an Octave:language-extension warning, together
     with other features not available in Matlab.
 
  ** The configure option --enable-octave-allocator has been removed.
     The internal class <octave_allocator> declared in oct-alloc.h has
     been removed.  The header remains, but is deprecated.  The macros to
     access the class (DECLARE_OCTAVE_ALLOCATOR, DEFINE_OCTAVE_ALLOCATOR,
     and DEFINE_OCTAVE_ALLOCATOR2) are now unconditionally defined to be
     empty.
diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -268,17 +268,17 @@ Octave:abbreviated-property-match
 Octave:fopen-file-in-path
 Octave:function-name-clash
 Octave:load-file-in-path
 Octave:possible-matlab-short-circuit-operator
 @end group
 @end example
 
 @noindent
-Note that this does not enable the @code{Octave:matlab-incompatible}
+Note that this does not enable the @code{Octave:language-extension}
 warning, which you might want if you want to be told about writing code
 that works in Octave but not @sc{matlab} (@pxref{XREFwarning,,warning},
 @ref{XREFwarning_ids,,warning_ids}).
 
 @item  --verbose
 @itemx -V
 @cindex @code{--verbose}
 @cindex @code{-V}
diff --git a/doc/interpreter/container.txi b/doc/interpreter/container.txi
--- a/doc/interpreter/container.txi
+++ b/doc/interpreter/container.txi
@@ -404,17 +404,17 @@ x
         @{
           a =  1
           long field with spaces (and funny char$) =  2
         @}
 @end group
 @end example
 
 @noindent
-The warning id @code{Octave:matlab-incompatible} can be enabled to warn
+The warning id @code{Octave:language-extension} can be enabled to warn
 about this usage.  @xref{XREFwarning_ids,,warning_ids}.
 
 More realistically, all of the functions that operate on strings can be used
 to build the correct field name before it is entered into the data structure.
 
 @example
 @group
 names = ["Bill"; "Mary"; "John"];
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -1510,17 +1510,17 @@ Use a second backslash to stop interpola
                   Cell st (1, 1);
 
                   id(0) = arg2;
                   st(0) = arg1;
 
                   // Since internal Octave functions are not
                   // compatible, turning all warnings into errors
                   // should leave the state of
-                  // Octave:matlab-incompatible alone.
+                  // Octave:language-extension alone.
 
                   if (arg1 == "error"
                       && warning_options.contains ("identifier"))
                     {
                       octave_idx_type n = 1;
 
                       Cell tid = warning_options.contents ("identifier");
                       Cell tst = warning_options.contents ("state");
@@ -1528,17 +1528,17 @@ Use a second backslash to stop interpola
                       for (octave_idx_type i = 0; i < tid.numel (); i++)
                         {
                           octave_value vid = tid(i);
 
                           if (vid.is_string ())
                             {
                               std::string key = vid.string_value ();
 
-                              if (key == "Octave:matlab-incompatible"
+                              if (key == "Octave:language-extension"
                                   || key == "Octave:single-quote-string")
                                 {
                                   id.resize (dim_vector (1, n+1));
                                   st.resize (dim_vector (1, n+1));
 
                                   id(n) = tid(i);
                                   st(n) = tst(i);
 
@@ -1728,17 +1728,17 @@ initialize_default_warning_state (void)
 {
   initialize_warning_options ("on");
 
   // Most people will want to have the following disabled.
 
   disable_warning ("Octave:array-to-scalar");
   disable_warning ("Octave:array-to-vector");
   disable_warning ("Octave:imag-to-real");
-  disable_warning ("Octave:matlab-incompatible");
+  disable_warning ("Octave:language-extension");
   disable_warning ("Octave:missing-semicolon");
   disable_warning ("Octave:neg-dim-as-zero");
   disable_warning ("Octave:resize-on-range-error");
   disable_warning ("Octave:separator-insert");
   disable_warning ("Octave:single-quote-string");
   disable_warning ("Octave:str-to-num");
   disable_warning ("Octave:mixed-string-concat");
   disable_warning ("Octave:variable-switch-label");
diff --git a/libinterp/corefcn/gripes.cc b/libinterp/corefcn/gripes.cc
--- a/libinterp/corefcn/gripes.cc
+++ b/libinterp/corefcn/gripes.cc
@@ -229,18 +229,18 @@ void
 gripe_nonbraced_cs_list_assignment (void)
 {
   error ("invalid assignment to cs-list outside multiple assignment");
 }
 
 void
 gripe_warn_complex_cmp (void)
 {
-  warning_with_id ("Octave:matlab-incompatible",
-                   "potential Matlab compatibility problem: comparing complex numbers");
+  warning_with_id ("Octave:language-extension",
+                   "comparing complex numbers is not supported in Matlab");
 }
 
 void
 gripe_disabled_feature (const std::string& func, const std::string& feature,
                         const std::string& pkg /*="Octave"*/)
 {
   error ("%s: support for %s was disabled when %s was built",
          func.c_str (), feature.c_str (), pkg.c_str ());
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -117,21 +117,21 @@ gripe_failed_assignment (void)
 }
 
 static void
 maybe_warn_invalid_field_name (const std::string& key, const char *who)
 {
   if (! valid_identifier (key))
     {
       if (who)
-        warning_with_id ("Octave:matlab-incompatible",
+        warning_with_id ("Octave:language-extension",
                          "%s: invalid structure field name '%s'",
                          who, key.c_str ());
       else
-        warning_with_id ("Octave:matlab-incompatible",
+        warning_with_id ("Octave:language-extension",
                          "invalid structure field name '%s'",
                          key.c_str ());
     }
 }
 
 octave_value_list
 octave_struct::subsref (const std::string& type,
                         const std::list<octave_value_list>& idx,
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -603,23 +603,23 @@ public:
   int handle_fq_identifier (void);
 
   int handle_identifier (void);
 
   void maybe_warn_separator_insert (char sep);
 
   void gripe_single_quote_string (void);
 
-  void gripe_matlab_incompatible (const std::string& msg);
+  void gripe_language_extension (const std::string& msg);
 
-  void maybe_gripe_matlab_incompatible_comment (char c);
+  void maybe_gripe_language_extension_comment (char c);
 
-  void gripe_matlab_incompatible_continuation (void);
+  void gripe_language_extension_continuation (void);
 
-  void gripe_matlab_incompatible_operator (const std::string& op);
+  void gripe_language_extension_operator (const std::string& op);
 
   void push_token (token *);
 
   token *current_token (void);
 
   void display_token (int tok);
 
   void fatal_error (const char *msg);
@@ -658,27 +658,28 @@ public:
   void clear_start_state (void);
 
   int start_state (void) const { return start_state_stack.top (); }
 
   void display_start_state (void) const;
 
   int handle_op (const char *pattern, int tok, bool bos = false);
 
-  int handle_incompatible_op (const char *pattern, int tok, bool bos = false);
+  int handle_language_extension_op (const char *pattern, int tok,
+                                    bool bos = false);
 
   bool maybe_unput_comma_before_unary_op (int tok);
 
   int handle_unary_op (int tok, bool bos = false);
 
-  int handle_incompatible_unary_op (int tok, bool bos = false);
+  int handle_language_extension_unary_op (int tok, bool bos = false);
 
   int handle_assign_op (const char *pattern, int tok);
 
-  int handle_incompatible_assign_op (const char *pattern, int tok);
+  int handle_language_extension_assign_op (const char *pattern, int tok);
 
   int handle_op_internal (int tok, bool bos, bool compat);
 
   int handle_token (const std::string& name, int tok);
 
   int handle_token (int tok, token *tok_val = 0);
 
   int count_token (int tok);
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -176,17 +176,18 @@ object) relevant global values before an
       if (curr_lexer->previous_token_may_be_command () \
           && curr_lexer->space_follows_previous_token ()) \
         { \
           yyless (0); \
           curr_lexer->push_start_state (COMMAND_START); \
         } \
       else \
         { \
-          return curr_lexer->handle_incompatible_op (PATTERN, TOK, false); \
+          return curr_lexer->handle_language_extension_op (PATTERN, TOK, \
+                                                           false); \
         } \
     } \
   while (0)
 
 #define CMD_OR_UNARY_OP(PATTERN, TOK, COMPAT) \
  \
   do \
     { \
@@ -204,17 +205,17 @@ object) relevant global values before an
               return curr_lexer->handle_op_internal (TOK, false, COMPAT); \
             } \
         } \
       else \
         { \
           int tok \
             = (COMPAT \
                ? curr_lexer->handle_unary_op (TOK) \
-               : curr_lexer->handle_incompatible_unary_op (TOK)); \
+               : curr_lexer->handle_language_extension_unary_op (TOK)); \
  \
           if (tok < 0) \
             { \
               yyless (0); \
               curr_lexer->xunput (','); \
               /* Adjust for comma that was not really in the input stream. */ \
               curr_lexer->current_input_column--; \
             } \
@@ -501,17 +502,17 @@ ANY_INCLUDING_NL (.|{NL})
 
 <MATRIX_START>{NL} {
     curr_lexer->lexer_debug ("<MATRIX_START>{NL}");
 
     curr_lexer->input_line_number++;
     curr_lexer->current_input_column = 1;
 
     if (curr_lexer->nesting_level.is_paren ())
-      curr_lexer->gripe_matlab_incompatible ("bare newline inside parentheses");
+      curr_lexer->gripe_language_extension ("bare newline inside parentheses");
     else
       {
         int tok = curr_lexer->previous_token_value ();
 
         if (! (tok == ';' || tok == '[' || tok == '{'))
           {
             curr_lexer->xunput (';');
             // Adjust for semicolon that was not really in the input stream.
@@ -1314,17 +1315,17 @@ ANY_INCLUDING_NL (.|{NL})
     curr_lexer->lexer_debug ("{NL}");
 
     curr_lexer->input_line_number++;
     curr_lexer->current_input_column = 1;
 
     if (curr_lexer->nesting_level.is_paren ())
       {
         curr_lexer->at_beginning_of_statement = false;
-        curr_lexer->gripe_matlab_incompatible
+        curr_lexer->gripe_language_extension
           ("bare newline inside parentheses");
       }
     else if (curr_lexer->nesting_level.none ()
         || curr_lexer->nesting_level.is_anon_fcn_body ())
       {
         curr_lexer->at_beginning_of_statement = true;
         return curr_lexer->count_token ('\n');
       }
@@ -2708,17 +2709,17 @@ octave_base_lexer::handle_number (void)
 void
 octave_base_lexer::handle_continuation (void)
 {
   char *yytxt = flex_yytext ();
   int yylng = flex_yyleng ();
 
   int offset = 1;
   if (yytxt[0] == '\\')
-    gripe_matlab_incompatible_continuation ();
+    gripe_language_extension_continuation ();
   else
     offset = 3;
 
   bool have_space = false;
   while (offset < yylng)
     {
       char c = yytxt[offset];
       if (c == ' ' || c == '\t')
@@ -3018,51 +3019,51 @@ octave_base_lexer::gripe_single_quote_st
                      input_line_number);
   else
     warning_with_id ("Octave:single-quote-string",
                      "single quote delimited string near line %d of file %s",
                      input_line_number, nm.c_str ());
 }
 
 void
-octave_base_lexer::gripe_matlab_incompatible (const std::string& msg)
+octave_base_lexer::gripe_language_extension (const std::string& msg)
 {
   std::string nm = fcn_file_full_name;
 
   if (nm.empty ())
-    warning_with_id ("Octave:matlab-incompatible",
-                     "potential Matlab compatibility problem: %s",
+    warning_with_id ("Octave:language-extension",
+                     "Octave language extension used: %s",
                      msg.c_str ());
   else
-    warning_with_id ("Octave:matlab-incompatible",
-                     "potential Matlab compatibility problem: %s near line %d offile %s",
+    warning_with_id ("Octave:language-extension",
+                     "Octave language extension used: %s near line %d offile %s",
                      msg.c_str (), input_line_number, nm.c_str ());
 }
 
 void
-octave_base_lexer::maybe_gripe_matlab_incompatible_comment (char c)
+octave_base_lexer::maybe_gripe_language_extension_comment (char c)
 {
   if (c == '#')
-    gripe_matlab_incompatible ("# used as comment character");
+    gripe_language_extension ("# used as comment character");
 }
 
 void
-octave_base_lexer::gripe_matlab_incompatible_continuation (void)
+octave_base_lexer::gripe_language_extension_continuation (void)
 {
-  gripe_matlab_incompatible ("\\ used as line continuation marker");
+  gripe_language_extension ("\\ used as line continuation marker");
 }
 
 void
-octave_base_lexer::gripe_matlab_incompatible_operator (const std::string& op)
+octave_base_lexer::gripe_language_extension_operator (const std::string& op)
 {
   std::string t = op;
   int n = t.length ();
   if (t[n-1] == '\n')
     t.resize (n-1);
-  gripe_matlab_incompatible (t + " used as operator");
+  gripe_language_extension (t + " used as operator");
 }
 
 void
 octave_base_lexer::push_token (token *tok)
 {
   YYSTYPE *lval = yyget_lval (scanner);
   lval->tok_val = tok;
   tokens.push (tok);
@@ -3313,18 +3314,18 @@ int
 octave_base_lexer::handle_op (const char *pattern, int tok, bool bos)
 {
   lexer_debug (pattern);
 
   return handle_op_internal (tok, bos, true);
 }
 
 int
-octave_base_lexer::handle_incompatible_op (const char *pattern, int tok,
-                                           bool bos)
+octave_base_lexer::handle_language_extension_op (const char *pattern, int tok,
+                                                 bool bos)
 {
   lexer_debug (pattern);
 
   return handle_op_internal (tok, bos, false);
 }
 
 bool
 octave_base_lexer::maybe_unput_comma_before_unary_op (int tok)
@@ -3352,27 +3353,27 @@ octave_base_lexer::maybe_unput_comma_bef
 int
 octave_base_lexer::handle_unary_op (int tok, bool bos)
 {
   return maybe_unput_comma_before_unary_op (tok)
     ? -1 : handle_op_internal (tok, bos, true);
 }
 
 int
-octave_base_lexer::handle_incompatible_unary_op (int tok, bool bos)
+octave_base_lexer::handle_language_extension_unary_op (int tok, bool bos)
 {
   return maybe_unput_comma_before_unary_op (tok)
     ? -1 : handle_op_internal (tok, bos, false);
 }
 
 int
 octave_base_lexer::handle_op_internal (int tok, bool bos, bool compat)
 {
   if (! compat)
-    gripe_matlab_incompatible_operator (flex_yytext ());
+    gripe_language_extension_operator (flex_yytext ());
 
   push_token (new token (tok, input_line_number, current_input_column));
 
   current_input_column += flex_yyleng ();
   looking_for_object_index = false;
   at_beginning_of_statement = bos;
 
   return count_token_internal (tok);
diff --git a/liboctave/numeric/bsxfun.h b/liboctave/numeric/bsxfun.h
--- a/liboctave/numeric/bsxfun.h
+++ b/liboctave/numeric/bsxfun.h
@@ -41,18 +41,17 @@ is_valid_bsxfun (const std::string& name
       octave_idx_type xk = dx(i);
       octave_idx_type yk = dy(i);
       // Check the three conditions for valid bsxfun dims
       if (! ((xk == yk) || (xk == 1 && yk > 1) || (xk > 1 && yk == 1)))
         return false;
     }
 
   (*current_liboctave_warning_with_id_handler)
-    ("Octave:matlab-incompatible",
-     "Matlab compatibility problem - %s automatic broadcasting",
+    ("Octave:language-extension", "performing `%s' automatic broadcasting",
      name.c_str ());
 
   return true;
 }
 
 // since we can't change the size of the assigned-to matrix, we cannot
 // apply singleton expansion to it, so the conditions to check are
 // different here.
@@ -72,18 +71,17 @@ is_valid_inplace_bsxfun (const std::stri
       octave_idx_type xk = dx(i);
 
       // Only two valid canditions to check; can't stretch rk
       if (! ((rk == xk) || (rk > 1 && xk == 1)))
         return false;
     }
 
   (*current_liboctave_warning_with_id_handler)
-    ("Octave:matlab-incompatible",
-     "Matlab compatibility problem - %s automatic broadcasting",
+    ("Octave:language-extension", "performing `%s' automatic broadcasting",
      name.c_str ());
 
   return true;
 }
 
 #include "bsxfun-defs.cc"
 
 #endif
diff --git a/scripts/miscellaneous/setfield.m b/scripts/miscellaneous/setfield.m
--- a/scripts/miscellaneous/setfield.m
+++ b/scripts/miscellaneous/setfield.m
@@ -40,17 +40,17 @@
 ## @var{s}.("foo bar") = 42;
 ## @end example
 ##
 ## @noindent
 ## Note that ordinary structure syntax @code{@var{s}.foo bar = 42} cannot be
 ## used here, as the field name is not a valid Octave identifier because of
 ## the space character.  Using arbitrary strings for field names is
 ## incompatible with @sc{matlab}, and this usage will emit a warning if the
-## warning ID @code{Octave:matlab-incompatible} is enabled.
+## warning ID @code{Octave:language-extension} is enabled.
 ## @xref{XREFwarning_ids}.
 ##
 ## With the second calling form, set a field of a structure array.  The
 ## input @var{sidx} selects an element of the structure array, @var{field}
 ## specifies the field name of the selected element, and @var{fidx} selects
 ## which element of the field (in the case of an array or cell array).
 ## The @var{sidx}, @var{field}, and @var{fidx} inputs can be repeated to
 ## address nested structure array elements.  The structure array index and
diff --git a/scripts/miscellaneous/warning_ids.m b/scripts/miscellaneous/warning_ids.m
--- a/scripts/miscellaneous/warning_ids.m
+++ b/scripts/miscellaneous/warning_ids.m
@@ -156,29 +156,29 @@
 ## @item Octave:glyph-render
 ## By default, the @code{Octave:glyph-render} warning is enabled.
 ##
 ## @item Octave:imag-to-real
 ## If the @code{Octave:imag-to-real} warning is enabled, a warning is
 ## printed for implicit conversions of complex numbers to real numbers.
 ## By default, the @code{Octave:imag-to-real} warning is disabled.
 ##
+## @item Octave:language-extension
+## Print warnings when using features that are unique to the Octave
+## language and may be still be missing in @sc{Matlab}.
+## By default, the @code{Octave:language-extension} warning is disabled.
+## The --traditional or --braindead startup options for Octave may also
+## be of use, @pxref{Command Line Options}.
+##
 ## @item Octave:load-file-in-path
 ## By default, the @code{Octave:load-file-in-path} warning is enabled.
 ##
 ## @item Octave:logical-conversion
 ## By default, the @code{Octave:logical-conversion} warning is enabled.
 ##
-## @item Octave:matlab-incompatible
-## Print warnings for Octave language features that may cause
-## compatibility problems with @sc{matlab}.
-## By default, the @code{Octave:matlab-incompatible} warning is disabled.
-## The --traditional or --braindead startup options for Octave may also
-## be of use, @pxref{Command Line Options}.
-##
 ## @item Octave:md5sum-file-in-path
 ## By default, the @code{Octave:md5sum-file-in-path} warning is enabled.
 ##
 ## @item Octave:missing-glyph
 ## By default, the @code{Octave:missing-glyph} warning is enabled.
 ##
 ## @item Octave:missing-semicolon
 ## If the @code{Octave:missing-semicolon} warning is enabled, Octave
