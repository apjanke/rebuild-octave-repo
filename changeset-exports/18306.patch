# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1390098713 18000
#      Sat Jan 18 21:31:53 2014 -0500
# Node ID 122239398a03e7e6fcd9b0182738f668c55ed04c
# Parent  81c1edd70bfd98e14305a8e6737e00a388de2567
Partial support for operator overload in classdef.

* ov-classdef.h (octave_classdef::is_object): New method.

* ov.h (do_binary_op, do_unary_op): Look for class operator overloads
for classdef objects too.

diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -1406,16 +1406,18 @@ public:
   cdef_object get_object (void) const { return object; }
 
   cdef_object& get_object_ref (void) { return object; }
 
   bool is_defined (void) const { return true; }
 
   bool is_map (void) const { return true; }
 
+  bool is_object (void) const { return true; }
+
   bool print_as_scalar (void) const { return true; }
 
   void print(std::ostream& os, bool pr_as_read_syntax = false) const
     {
       // FIXME: should call "display" method
       print_raw(os, pr_as_read_syntax);
       newline(os);
     }
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -1947,17 +1947,19 @@ do_binary_op (octave_value::binary_op op
               const octave_value& v1, const octave_value& v2)
 {
   octave_value retval;
 
   int t1 = v1.type_id ();
   int t2 = v2.type_id ();
 
   if (t1 == octave_class::static_type_id ()
-      || t2 == octave_class::static_type_id ())
+      || t2 == octave_class::static_type_id ()
+      || t1 == octave_classdef::static_type_id ()
+      || t2 == octave_classdef::static_type_id ())
     {
       octave_value_typeinfo::binary_class_op_fcn f
         = octave_value_typeinfo::lookup_binary_class_op (op);
 
       if (f)
         {
           try
             {
@@ -2203,17 +2205,19 @@ do_binary_op (octave_value::compound_bin
               const octave_value& v1, const octave_value& v2)
 {
   octave_value retval;
 
   int t1 = v1.type_id ();
   int t2 = v2.type_id ();
 
   if (t1 == octave_class::static_type_id ()
-      || t2 == octave_class::static_type_id ())
+      || t2 == octave_class::static_type_id ()
+      || t1 == octave_classdef::static_type_id ()
+      || t2 == octave_classdef::static_type_id ())
     {
       octave_value_typeinfo::binary_class_op_fcn f
         = octave_value_typeinfo::lookup_binary_class_op (op);
 
       if (f)
         {
           try
             {
@@ -2377,17 +2381,18 @@ gripe_unary_op_conv (const std::string& 
 
 octave_value
 do_unary_op (octave_value::unary_op op, const octave_value& v)
 {
   octave_value retval;
 
   int t = v.type_id ();
 
-  if (t == octave_class::static_type_id ())
+  if (t == octave_class::static_type_id ()
+      || t == octave_classdef::static_type_id ())
     {
       octave_value_typeinfo::unary_class_op_fcn f
         = octave_value_typeinfo::lookup_unary_class_op (op);
 
       if (f)
         {
           try
             {
