# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1384240671 -3600
#      Tue Nov 12 08:17:51 2013 +0100
# Node ID de8591a19bc67bf1ce9a67c815e4ad83a004f8d7
# Parent  9bcf1614cd80cff46139ad93a1d028f0c2ee01b2
check for custom editor when opening a new file from the gui (bug #40496)

* file-editor.h: new functin call_custom_editor

* file-editor.cc (call_custom_editor): new function for checking preference and
  call  a custom editor if necessary
  (request_new_file): try call_custom_editor before using internal editor
  (request_open_file): try call_custom_editor before using internal editor

diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -127,16 +127,21 @@ void
 file_editor::handle_exit_debug_mode (void)
 {
   _run_action->setEnabled (true);
 }
 
 void
 file_editor::request_new_file (const QString& commands)
 {
+  // Custom editor? If yes, we can only call the editor without passing
+  // some initial contents and even without being sure a new file is opened
+  if (call_custom_editor ())
+    return;
+
   // New file isn't a file_editor_tab function since the file
   // editor tab has yet to be created and there is no object to
   // pass a signal to.  Hence, functionality is here.
 
   file_editor_tab *fileEditorTab = new file_editor_tab (ced);
   if (fileEditorTab)
     {
       add_file_editor_tab (fileEditorTab, "");  // new tab with empty title
@@ -231,33 +236,46 @@ file_editor::find_tab_widget (const QStr
           retval = p->second;
           break;
         }
     }
 
   return retval;
 }
 
+bool
+file_editor::call_custom_editor (const QString& file_name, int line)
+{
+  // Check if the user wants to use a custom file editor.
+  QSettings *settings = resource_manager::get_settings ();
+
+  if (settings->value ("useCustomFileEditor").toBool ())
+    {
+      QString editor = settings->value ("customFileEditor").toString ();
+      editor.replace ("%f", file_name);
+      editor.replace ("%l", QString::number (line));
+
+      QProcess::startDetached (editor);
+
+      if (line < 0 && ! file_name.isEmpty ())
+        handle_mru_add_file (QFileInfo (file_name).canonicalFilePath ());
+
+      return true;
+    }
+
+  return false;
+}
+
 void
 file_editor::request_open_file (const QString& openFileName, int line,
                                 bool debug_pointer,
                                 bool breakpoint_marker, bool insert)
 {
-  // Check if the user wants to use a custom file editor.
-  QSettings *settings = resource_manager::get_settings ();
-  if (settings->value ("useCustomFileEditor").toBool ())
-    {
-      QString editor = settings->value ("customFileEditor").toString ();
-      editor.replace ("%f", openFileName);
-      editor.replace ("%l", QString::number (line));
-      QProcess::startDetached (editor);
-      if (line < 0)
-        handle_mru_add_file (QDir::cleanPath (openFileName));
-      return;
-    }
+  if (call_custom_editor (openFileName, line))
+    return;   // custom editor called
 
   if (openFileName.isEmpty ())
     {
       // ??  Not sure this will happen.  This routine isn't even called
       // if the user hasn't selected a file.
     }
   else
     {
@@ -332,16 +350,17 @@ file_editor::request_open_file (const QS
                       msgBox->setAttribute (Qt::WA_DeleteOnClose);
                       msgBox->show ();
                     }
                   else
                     {
                       // File does not exist, should it be crated?
                       QMessageBox *msgBox;
                       int answer;
+                      QSettings *settings = resource_manager::get_settings ();
                       if (settings->value ("editor/create_new_file", false).toBool ())
                         {
                           answer = QMessageBox::Yes;
                         }
                       else
                         {
                           msgBox = new QMessageBox (QMessageBox::Question,
                                                     tr ("Octave Editor"),
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -181,16 +181,17 @@ private slots:
   void restore_create_file_setting ();
 
 private:
 
   void construct (void);
   void add_file_editor_tab (file_editor_tab *f, const QString& fn);
   void save_file_as (QWidget *fetabID = 0);
   void mru_menu_update (void);
+  bool call_custom_editor (const QString& file_name = QString (), int line = -1);
 
   QWidget *find_tab_widget (const QString& openFileName) const;
 
   std::map<QString, QWidget *> editor_tab_map;
 
   QString ced;
 
   QMenuBar *_menu_bar;
