# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1318384959 14400
#      Tue Oct 11 22:02:39 2011 -0400
# Node ID 1e12601d26979545249b23fd58f0a1edbc7ad10b
# Parent  de081abd32c6a9c2b216d896064f38cc8e62b50d
make handles with their handlevisibility property set to "callback" visible in callback functions

* graphics.cc (executing_callback): New file scope variable.
(callback_property::execute): Protect executing_callback and set it to
true when executing callback function.
* graphics.cc (base_properties::is_handle_visible): Move here from
graphics.h.in.  Check executing_callback to decide whether handles
that have their handlevisibility property set to "callback" should be
visible.

diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -1382,29 +1382,39 @@ callback_property::validate (const octav
            && v.cell_value ()(0).is_function_handle ())
     return true;
   else if (v.is_empty ())
     return true;
 
   return false;
 }
 
+// If TRUE, we are executing any callback function, or the functions it
+// calls.  Used to determine handle visibility inside callback
+// functions.
+static bool executing_callback = false;
+
 void
 callback_property::execute (const octave_value& data) const
 {
   unwind_protect frame;
 
   // We are executing the callback function associated with this
   // callback property.  When set to true, we avoid recursive calls to
   // callback routines.
   frame.protect_var (executing);
 
+  // We are executing a callback function, so allow handles that have
+  // their handlevisibility property set to "callback" to be visible.
+  frame.protect_var (executing_callback);
+
   if (! executing)
     {
       executing = true;
+      executing_callback = true;
 
       if (callback.is_defined () && ! callback.is_empty ())
         gh_manager::execute_callback (get_parent (), callback, data);
     }
 }
 
 // Used to cache dummy graphics objects from which dynamic
 // properties can be cloned.
@@ -2443,16 +2453,23 @@ base_properties::update_axis_limits (con
                                      const graphics_handle& h) const
 {
   graphics_object obj = gh_manager::get_object (__myhandle__);
 
   if (obj)
     obj.update_axis_limits (axis_type, h);
 }
 
+bool
+base_properties::is_handle_visible (void) const
+{
+  return (handlevisibility.is ("on")
+          || executing_callback && ! handlevisibility.is ("off"));
+}
+
 graphics_toolkit
 base_properties::get_toolkit (void) const
 {
   graphics_object go = gh_manager::get_object (get_parent ());
 
   if (go)
     return go.get_toolkit ();
   else
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -2377,20 +2377,17 @@ public:
   virtual octave_value get_alim (void) const { return octave_value (); }
 
   virtual bool is_xliminclude (void) const { return false; }
   virtual bool is_yliminclude (void) const { return false; }
   virtual bool is_zliminclude (void) const { return false; }
   virtual bool is_climinclude (void) const { return false; }
   virtual bool is_aliminclude (void) const { return false; }
 
-  bool is_handle_visible (void) const
-  {
-    return ! handlevisibility.is ("off");
-  }
+  bool is_handle_visible (void) const;
 
   std::set<std::string> dynamic_property_names (void) const;
 
   bool has_dynamic_property (const std::string& pname);
 
 protected:
   std::set<std::string> dynamic_properties;
 
