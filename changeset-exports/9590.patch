# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1251753847 -7200
#      Mon Aug 31 23:24:07 2009 +0200
# Node ID b18a50c56144884e069a08d35fcc478976d554d4
# Parent  8e42bb4ad34d0270b9c330329fd36dea589512e3
More care with contour integrals in quadgk

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2009-08-31  David Bateman  <dbateman@free.fr>
+
+	* general/quadgk.m: More care with the interval length and
+	convergence of contour integrals.
+
 2009-08-29  John W. Eaton  <jwe@octave.org>
 
 	* time/datestr.m: Add missing semicolon.
 
 2009-08-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* general/int2str.m: Convert to double before calling log10.
 
diff --git a/scripts/general/quadgk.m b/scripts/general/quadgk.m
--- a/scripts/general/quadgk.m
+++ b/scripts/general/quadgk.m
@@ -179,33 +179,35 @@ function [q, err] = quadgk (f, a, b, var
     endif
 
     ## Use variable subsitution to weaken endpoint singularities and to
     ## perform integration with endpoints at infinity. No transform for
     ## contour integrals
     if (iscomplex (a) || iscomplex (b) || iscomplex(waypoints))
       ## contour integral, no transform
       subs = [a; waypoints; b];
-      h = b - a;
+      h = sum (abs (diff (subs)));
+      h0 = h;
       trans = @(t) t;
     elseif (isinf (a) && isinf(b))
       ## Standard Infinite to finite integral transformation.
       ##   \int_{-\infinity_^\infinity f(x) dx = \int_-1^1 f (g(t)) g'(t) dt
       ## where 
       ##   g(t)  = t / (1 - t^2)
       ##   g'(t) =  (1 + t^2) / (1 - t^2) ^ 2
       ## waypoint transform is then
       ##   t =  (2 * g(t)) ./ (1 + sqrt(1 + 4 * g(t) .^ 2))
       if (!isempty (waypoints))
 	trans = @(x) (2 * x) ./ (1 + sqrt(1 + 4 * x .^ 2));
 	subs = [-1; trans(waypoints); 1];
       else
 	subs = linspace (-1, 1, 11)'; 
       endif
       h = 2;
+      h0 = b - a;
       trans = @(t) t ./ (1 - t.^2);
       f = @(t) f (t ./ (1 - t .^ 2)) .* (1 + t .^ 2) ./ ((1 - t .^ 2) .^ 2);
     elseif (isinf(a))
       ## Formula defined in Shampine paper as two separate steps. One to
       ## weaken singularity at finite end, then a second to transform to
       ## a finite interval. The singularity weakening transform is
       ##   \int_{-\infinity}^b f(x) dx = 
       ##               - \int_{-\infinity}^0 f (b - t^2) 2 t dt
@@ -221,16 +223,17 @@ function [q, err] = quadgk (f, a, b, var
       if (!isempty (waypoints))
 	tmp = sqrt (b - waypoints);
 	trans = @(x)  - x ./ (x + 1);
 	subs = [0; trans(tmp); 1];
       else
 	subs = linspace (0, 1, 11)'; 
       endif
       h = 1;
+      h0 = b - a;
       trans = @(t) b - (t ./ (1 + t)).^2;
       f = @(s) - 2 * s .* f (b -  (s ./ (1 + s)) .^ 2) ./ ((1 + s) .^ 3);
     elseif (isinf(b))
       ## Formula defined in Shampine paper as two separate steps. One to
       ## weaken singularity at finite end, then a second to transform to
       ## a finite interval. The singularity weakening transform is
       ##   \int_a^\infinity f(x) dx = \int_0^\infinity f (a + t^2) 2 t dt
       ## and the finite interval transform is
@@ -245,16 +248,17 @@ function [q, err] = quadgk (f, a, b, var
       if (!isempty (waypoints))
 	tmp = sqrt (waypoints - a);
 	trans = @(x) x ./ (x + 1);
 	subs = [0; trans(tmp); 1];
       else
 	subs = linspace (0, 1, 11)'; 
       endif
       h = 1;
+      h0 = b - a;
       trans = @(t) a + (t ./ (1 - t)).^2;
       f = @(s) 2 * s .* f (a +  (s ./ (1 - s)) .^ 2) ./ ((1 - s) .^ 3);
     else
       ## Davis, Rabinowitz, "Methods of Numerical Integration" p441 2ed.
       ## Presented in section 5 of the Shampine paper as
       ##   g(t) = ((b - a) / 2) * (t / 2 * (3 - t^2)) + (b + a) / 2
       ##   g'(t) = ((b-a)/4) * (3 - 3t^2);
       ## waypoint transform can then be found by solving for t with
@@ -266,16 +270,17 @@ function [q, err] = quadgk (f, a, b, var
       ##  t = (sqrt(3)* 1i * (1 - k^2) - (1 + k^2)) / 2 / k;
       if (! isempty (waypoints))
 	trans = @__quadgk_finite_waypoint__;
 	subs = [-1; trans(waypoints, a, b); 1];
       else
 	subs = linspace(-1, 1, 11)'; 
       endif
       h = 2;
+      h0 = b - a;
       trans = @(t) ((b - a) ./ 4) * t .* (3 - t.^2) + (b + a) ./ 2;
       f = @(t) f((b - a) ./ 4 .* t .* (3 - t.^2) + (b + a) ./ 2) .* ...
            3 .* (b - a) ./ 4 .* (1 - t.^2);
     endif
 
     ## Split interval into at least 10 sub-interval with a 15 point
     ## Gauss-Kronrod rule giving a minimum of 150 function evaluations
     while (length (subs) < 11)
@@ -300,17 +305,17 @@ function [q, err] = quadgk (f, a, b, var
 	myeps = eps;
       endif
 
       first = true;
       while (true)
 	## Check for sub-intervals that are too small. Test must be
 	## performed in untransformed sub-intervals. What is a good
 	## value for this test. Shampine suggests 100*eps
-	if (any (diff (trans (subs), [], 2) / (b - a) < 100 * myeps))
+	if (any (abs (diff (trans (subs), [], 2) / h0) < 100 * myeps))
 	  q = q0;
 	  err = err0;
 	  break;
 	endif
 
 	## Quit if any evaluations are not finite (Inf or NaN)
 	if (any (! isfinite (q_subs)))
 	  warning ("quadgk: non finite integrand encountered"); 
@@ -324,17 +329,17 @@ function [q, err] = quadgk (f, a, b, var
 	## If the global error estimate is meet exit
 	if (err0 < tol)
 	  q = q0;
 	  err = err0;
 	  break;
 	endif
 
 	## Accept the sub-intervals that meet the convergence criteria
-	idx = find (abs (q_errs) < tol .* diff (subs, [], 2) ./ h);
+	idx = find (abs (q_errs) < tol .* abs(diff (subs, [], 2)) ./ h);
 	if (first)
 	  q = sum (q_subs (idx));
 	  err = sum (q_errs(idx));
 	  first = false;
 	else
 	  q0 = q + sum (q_subs);
 	  err0 = err + sum (q_errs);
 	  q += sum (q_subs (idx));
