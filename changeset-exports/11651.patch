# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1203119745 18000
#      Fri Feb 15 18:55:45 2008 -0500
# Branch release-3-0-x
# Node ID 74de76325d12d856b3a18f4d7d56cfd11e7a4cbd
# Parent  a8e0f7184a594defad43201fedfc4311b298cf8c
more xGELSD workspace fixes

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2502,16 +2502,23 @@ ComplexMatrix::lssolve (const ComplexMat
 
       octave_idx_type smlsiz;
       F77_FUNC (xilaenv, XILAENV) (9, F77_CONST_CHAR_ARG2 ("ZGELSD", 6),
 				   F77_CONST_CHAR_ARG2 (" ", 1),
 				   0, 0, 0, 0, smlsiz
 				   F77_CHAR_ARG_LEN (6)
 				   F77_CHAR_ARG_LEN (1));
 
+      octave_idx_type mnthr;
+      F77_FUNC (xilaenv, XILAENV) (6, F77_CONST_CHAR_ARG2 ("ZGELSD", 6),
+				   F77_CONST_CHAR_ARG2 (" ", 1),
+				   m, n, nrhs, -1, mnthr
+				   F77_CHAR_ARG_LEN (6)
+				   F77_CHAR_ARG_LEN (1));
+
       // We compute the size of rwork and iwork because ZGELSD in
       // older versions of LAPACK does not return them on a query
       // call.
       double dminmn = static_cast<double> (minmn);
       double dsmlsizp1 = static_cast<double> (smlsiz+1);
 #if defined (HAVE_LOG2)
       double tmp = log2 (dminmn) / dsmlsizp1 + 1;
 #else
@@ -2534,20 +2541,20 @@ ComplexMatrix::lssolve (const ComplexMat
       Array<octave_idx_type> iwork (liwork);
       octave_idx_type* piwork = iwork.fortran_vec ();
 
       F77_XFCN (zgelsd, ZGELSD, (m, n, nrhs, tmp_data, m, pretval, maxmn,
 				 ps, rcond, rank, work.fortran_vec (),
 				 lwork, prwork, piwork, info));
 
       // The workspace query is broken in at least LAPACK 3.0.0
-      // through 3.1.1 when n > m.  The obtuse formula below
-      // should provide sufficient workspace for DGELSD to operate
+      // through 3.1.1 when n > mnthr.  The obtuse formula below
+      // should provide sufficient workspace for ZGELSD to operate
       // efficiently.
-      if (n > m)
+      if (n > mnthr)
 	{
 	  octave_idx_type addend = m;
 
 	  if (2*m-4 > addend)
 	    addend = 2*m-4;
 
 	  if (nrhs > addend)
 	    addend = nrhs;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2008-02-15  John W. Eaton  <jwe@octave.org>
+
+	* dMatrix.cc (Matrix::lssolve): Check n > mnthr, not n > m when
+	deciding whether to calculate workspace size, with mnthr from ILAENV.
+	* CMatrix.cc (ComplexMatrix::lssolve): Likewise.
+
 2008-02-12  John W. Eaton  <jwe@octave.org>
 
 	* CMatrix.cc: Declare xilaenv instead of ilaenv.
 	(ComplexMatrix::lssolve): Call xilaenv instead of ilaenv.
 
 2008-02-12  Jason Riedy  <ejr@cs.berkeley.edu>
   
 	* dMatrix.cc (ILAENV): Declare LAPACK Fortran function.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2113,16 +2113,23 @@ Matrix::lssolve (const Matrix& b, octave
 
       octave_idx_type smlsiz;
       F77_FUNC (xilaenv, XILAENV) (9, F77_CONST_CHAR_ARG2 ("DGELSD", 6),
 				   F77_CONST_CHAR_ARG2 (" ", 1),
 				   0, 0, 0, 0, smlsiz
 				   F77_CHAR_ARG_LEN (6)
 				   F77_CHAR_ARG_LEN (1));
 
+      octave_idx_type mnthr;
+      F77_FUNC (xilaenv, XILAENV) (6, F77_CONST_CHAR_ARG2 ("DGELSD", 6),
+				   F77_CONST_CHAR_ARG2 (" ", 1),
+				   m, n, nrhs, -1, mnthr
+				   F77_CHAR_ARG_LEN (6)
+				   F77_CHAR_ARG_LEN (1));
+
       // We compute the size of iwork because DGELSD in older versions
       // of LAPACK does not return it on a query call.
       double dminmn = static_cast<double> (minmn);
       double dsmlsizp1 = static_cast<double> (smlsiz+1);
 #if defined (HAVE_LOG2)
       double tmp = log2 (dminmn) / dsmlsizp1 + 1;
 #else
       double tmp = log (dminmn) / dsmlsizp1 / log (2.0) + 1;
@@ -2137,20 +2144,20 @@ Matrix::lssolve (const Matrix& b, octave
       Array<octave_idx_type> iwork (liwork);
       octave_idx_type* piwork = iwork.fortran_vec ();
 
       F77_XFCN (dgelsd, DGELSD, (m, n, nrhs, tmp_data, m, pretval, maxmn,
 				 ps, rcond, rank, work.fortran_vec (),
 				 lwork, piwork, info));
 
       // The workspace query is broken in at least LAPACK 3.0.0
-      // through 3.1.1 when n > m.  The obtuse formula below
+      // through 3.1.1 when n > mnthr.  The obtuse formula below
       // should provide sufficient workspace for DGELSD to operate
       // efficiently.
-      if (n > m)
+      if (n > mnthr)
 	{
 	  const octave_idx_type wlalsd
 	    = 9*m + 2*m*smlsiz + 8*m*nlvl + m*nrhs + (smlsiz+1)*(smlsiz+1);
 
 	  octave_idx_type addend = m;
 
 	  if (2*m-4 > addend)
 	    addend = 2*m-4;
