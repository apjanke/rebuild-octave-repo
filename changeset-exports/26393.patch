# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1546443673 -3600
#      Wed Jan 02 16:41:13 2019 +0100
# Branch stable
# Node ID 1e3c42fbf4d305a378305e5113c1180efbb6d04f
# Parent  9ec0a1e5d4d3c9edecb2691a7945175ca56f6529
Don't overwrite content of non-encodable .m file (bug #55364).

* file-editor-tab.cc (save_file): Check if codec is valid before opening file
for write.

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -2093,16 +2093,23 @@ namespace octave
     // If it is a new file with no name, signal that saveFileAs
     // should be performed.
     if (! valid_file_name (saveFileName))
       {
         save_file_as (remove_on_success);
         return;
       }
 
+    _encoding = _new_encoding;    // consider a possible new encoding
+
+    // set the desired codec (if suitable for contents)
+    QTextCodec *codec = check_valid_codec ();
+    if (! codec)
+      return;   // No valid codec
+
     // Get a list of breakpoint line numbers, before  exit_debug_and_clear().
     emit report_marker_linenr (_bp_lines, _bp_conditions);
 
     // get the absolute path (if existing)
     QFileInfo file_info = QFileInfo (saveFileName);
     QString file_to_save;
     if (file_info.exists ())
       {
@@ -2138,23 +2145,16 @@ namespace octave
                              QMessageBox::Ok, nullptr);
         show_dialog (msgBox, false);
 
         return;
       }
 
     // save the contents into the file
 
-    _encoding = _new_encoding;    // consider a possible new encoding
-
-    // set the desired codec (if suitable for contents)
-    QTextCodec *codec = check_valid_codec ();
-    if (! codec)
-      return;   // No valid codec
-
     // write the file
     QTextStream out (&file);
     out.setCodec (codec);
 
     QApplication::setOverrideCursor (Qt::WaitCursor);
     out << _edit_area->text ();
     out.flush ();
     QApplication::restoreOverrideCursor ();
@@ -2332,17 +2332,17 @@ namespace octave
       {
         QVector<uint> u32_str = editor_text.toUcs4 ();
         const uint32_t *src = reinterpret_cast<const uint32_t *>
                               (u32_str.data ());
 
         size_t length;
         char *res_str =
           octave_u32_conv_to_encoding_strict (_encoding.toStdString ().c_str (),
-                                              src, u32_str.size (), &length);
+                                              src, u32_str.length (), &length);
         if (! res_str)
           {
             if (errno == EILSEQ)
               can_encode = false;
           }
         else
           ::free (static_cast<void *> (res_str));
       }
