# HG changeset patch
# User jwe
# Date 948871557 0
#      Wed Jan 26 07:25:57 2000 +0000
# Node ID e461b8ed7c4dfef35c6c37102b24e8a80285d8e4
# Parent  d964028659fb1ebe7d6fb32e6a4d46ba33935646
[project @ 2000-01-26 07:25:56 by jwe]

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -1,11 +1,15 @@
 Summary of changes for version 2.1.x:
 ------------------------------------
 
+  * Given a matrix, X, and a boolean index, idx, of the same shape as
+    X, X(idx) and X(idx) = RHS now work no matter what the value of
+    do_fortran_indexing is.
+
   * If you are using GNU Emacs 19.34 or earlier, you will need to add
     the following code to your ~/.emacs file in order to use Emacs
     Octave mode:
 
       ;; Set up the custom library.
       ;; taken from http://www.dina.kvl.dk/~abraham/custom/
       (eval-and-compile
 	(condition-case ()
diff --git a/liboctave/Array2-idx.h b/liboctave/Array2-idx.h
--- a/liboctave/Array2-idx.h
+++ b/liboctave/Array2-idx.h
@@ -61,16 +61,19 @@ template <class T>
 Array2<T>
 Array2<T>::index (idx_vector& idx) const
 {
   Array2<T> retval;
 
   int nr = d1;
   int nc = d2;
 
+  int idx_orig_rows = idx.orig_rows ();
+  int idx_orig_columns = idx.orig_columns ();
+
   if (nr == 1 && nc == 1)
     {
       Array<T> tmp = Array<T>::index (idx);
 
       int len = tmp.length ();
 
       if (len == 0)
 	retval = Array2<T> (0, 0);
@@ -95,27 +98,31 @@ Array2<T>::index (idx_vector& idx) const
       else
 	{
 	  if (result_is_column_vector)
 	    retval = Array2<T> (tmp, len, 1);
 	  else
 	    retval = Array2<T> (tmp, 1, len);
 	}
     }
-  else if (liboctave_dfi_flag || idx.is_colon ())
+  else if (liboctave_dfi_flag
+	   || idx.is_colon ()
+	   || (idx.one_zero_only ()
+	       && idx_orig_rows == nr
+	       && idx_orig_columns == nc))
     {
       // This code is only for indexing matrices.  The vector
       // cases are handled above.
 
       idx.freeze (nr * nc, "matrix");
 
       if (idx)
 	{
-	  int result_nr = idx.orig_rows ();
-	  int result_nc = idx.orig_columns ();
+	  int result_nr = idx_orig_rows;
+	  int result_nc = idx_orig_columns;
 
 	  if (idx.is_colon ())
 	    {
 	      result_nr = nr * nc;
 	      result_nc = result_nr ? 1 : 0;
 	    }
 	  else if (idx.one_zero_only ())
 	    {
@@ -507,23 +514,29 @@ assign (Array2<LT>& lhs, const Array2<RT
   int n_idx = lhs.index_count ();
 
   int lhs_nr = lhs.rows ();
   int lhs_nc = lhs.cols ();
 
   int rhs_nr = rhs.rows ();
   int rhs_nc = rhs.cols ();
 
+  idx_vector *tmp = lhs.get_idx ();
+
+  idx_vector idx_i;
+  idx_vector idx_j;
+
+  if (n_idx > 1)
+    idx_j = tmp[1];
+
+  if (n_idx > 0)
+    idx_i = tmp[0];
+
   if (n_idx == 2)
     {
-      idx_vector *tmp = lhs.get_idx ();
-
-      idx_vector idx_i = tmp[0];
-      idx_vector idx_j = tmp[1];
-
       int n = idx_i.freeze (lhs_nr, "row", liboctave_rre_flag);
 
       int m = idx_j.freeze (lhs_nc, "column", liboctave_rre_flag);
 
       int idx_i_is_colon = idx_i.is_colon ();
       int idx_j_is_colon = idx_j.is_colon ();
 
       if (idx_i_is_colon)
@@ -597,48 +610,44 @@ assign (Array2<LT>& lhs, const Array2<RT
       // idx_vector::freeze() printed an error message for us.
     }
   else if (n_idx == 1)
     {
       int lhs_is_empty = lhs_nr == 0 || lhs_nc == 0;
 
       if (lhs_is_empty || (lhs_nr == 1 && lhs_nc == 1))
 	{
-	  idx_vector *tmp = lhs.get_idx ();
-
-	  idx_vector idx = tmp[0];
-
 	  int lhs_len = lhs.length ();
 
-	  int n = idx.freeze (lhs_len, 0, liboctave_rre_flag);
+	  int n = idx_i.freeze (lhs_len, 0, liboctave_rre_flag);
 
-	  if (idx)
+	  if (idx_i)
 	    {
 	      if (rhs_nr == 0 && rhs_nc == 0)
 		{
 		  if (n != 0 && (lhs_nr != 0 || lhs_nc != 0))
-		    lhs.maybe_delete_elements (idx);
+		    lhs.maybe_delete_elements (idx_i);
 		}
 	      else if (! liboctave_dfi_flag && lhs_is_empty
-		       && idx.is_colon ()
+		       && idx_i.is_colon ()
 		       && ! (rhs_nr == 1 || rhs_nc == 1))
 		{
 		  (*current_liboctave_error_handler)
 		    ("A(:) = X: X must be a vector");
 		}
 	      else
 		{
 		  if (assign ((Array<LT>&) lhs, (Array<RT>&) rhs))
 		    {
 		      int len = lhs.length ();
 
 		      if (len > 0)
 			{
-			  int idx_nr = idx.orig_rows ();
-			  int idx_nc = idx.orig_columns ();
+			  int idx_nr = idx_i.orig_rows ();
+			  int idx_nc = idx_i.orig_columns ();
 
 			  // lhs_is_empty now means that lhs was
 			  // *originally* empty, and lhs_len is the
 			  // *original* length of the lhs.
 
 			  if (liboctave_dfi_flag
 			      || (idx_nr == 1 && idx_nc == 1)
 			      || (rhs_nr == 1 && rhs_nc == 1 && lhs_len == 1))
@@ -649,17 +658,17 @@ assign (Array2<LT>& lhs, const Array2<RT
 				  lhs.d2 = 1;
 				}
 			      else
 				{
 				  lhs.d1 = 1;
 				  lhs.d2 = lhs.length ();
 				}
 			    }
-			  else if (lhs_is_empty && idx.is_colon ())
+			  else if (lhs_is_empty && idx_i.is_colon ())
 			    {
 			      lhs.d1 = rhs.d1;
 			      lhs.d2 = rhs.d2;
 			    }
 			  else if (rhs_nr == 1
 				   && (idx_nr == 1 || lhs_len == 1))
 			    {
 			      lhs.d1 = 1;
@@ -691,95 +700,88 @@ assign (Array2<LT>& lhs, const Array2<RT
 		  else
 		    retval = 0;
 		}
 	    }
 	  // idx_vector::freeze() printed an error message for us.
 	}
       else if (lhs_nr == 1)
 	{
-	  idx_vector *tmp = lhs.get_idx ();
-
-	  idx_vector idx = tmp[0];
+	  idx_i.freeze (lhs_nc, "vector", liboctave_rre_flag);
 
-	  idx.freeze (lhs_nc, "vector", liboctave_rre_flag);
-
-	  if (idx)
+	  if (idx_i)
 	    {
 	      if (rhs_nr == 0 && rhs_nc == 0)
-		lhs.maybe_delete_elements (idx);
+		lhs.maybe_delete_elements (idx_i);
 	      else
 		{
 		  if (assign ((Array<LT>&) lhs, (Array<RT>&) rhs))
 		    lhs.d2 = lhs.length ();
 		  else
 		    retval = 0;
 		}
 	    }
 	  // idx_vector::freeze() printed an error message for us.
 	}
       else if (lhs_nc == 1)
 	{
-	  idx_vector *tmp = lhs.get_idx ();
-
-	  idx_vector idx = tmp[0];
+	  idx_i.freeze (lhs_nr, "vector", liboctave_rre_flag);
 
-	  idx.freeze (lhs_nr, "vector", liboctave_rre_flag);
-
-	  if (idx)
+	  if (idx_i)
 	    {
 	      if (rhs_nr == 0 && rhs_nc == 0)
-		lhs.maybe_delete_elements (idx);
+		lhs.maybe_delete_elements (idx_i);
 	      else
 		{
 		  if (assign ((Array<LT>&) lhs, (Array<RT>&) rhs))
 		    lhs.d1 = lhs.length ();
 		  else
 		    retval = 0;
 		}
 	    }
 	  // idx_vector::freeze() printed an error message for us.
 	}
-      else if (liboctave_dfi_flag)
+      else if (liboctave_dfi_flag
+	       || idx_i.is_colon ()
+	       || (idx_i.one_zero_only ()
+		   && idx_i.orig_rows () == lhs_nr
+		   && idx_i.orig_columns () == lhs_nc))
 	{
-	  idx_vector *tmp = lhs.get_idx ();
-	  idx_vector idx = tmp[0];
+	  int len = idx_i.freeze (lhs_nr * lhs_nc, "matrix");
 
-	  int len = idx.freeze (lhs_nr * lhs_nc, "matrix");
-
-	  if (idx)
+	  if (idx_i)
 	    {
 	      if (len == 0)
 		{
 		  if (! ((rhs_nr == 1 && rhs_nc == 1)
 			 || (rhs_nr == 0 && rhs_nc == 0)))
 		    (*current_liboctave_error_handler)
 		      ("A([]) = X: X must be an empty matrix or scalar");
 		}
 	      else if (len == rhs_nr * rhs_nc)
 		{
 		  int k = 0;
 		  for (int j = 0; j < rhs_nc; j++)
 		    {
 		      for (int i = 0; i < rhs_nr; i++)
 			{
-			  int ii = idx.elem (k++);
+			  int ii = idx_i.elem (k++);
 			  int fr = ii % lhs_nr;
 			  int fc = (ii - fr) / lhs_nr;
 			  lhs.elem (fr, fc) = rhs.elem (i, j);
 			}
 		    }
 		}
 	      else if (rhs_nr == 1 && rhs_nc == 1 && len <= lhs_nr * lhs_nc)
 		{
 		  RT scalar = rhs.elem (0, 0);
 
 		  for (int i = 0; i < len; i++)
 		    {
-		      int ii = idx.elem (i);
+		      int ii = idx_i.elem (i);
 		      int fr = ii % lhs_nr;
 		      int fc = (ii - fr) / lhs_nr;
 		      lhs.elem (fr, fc) = scalar;
 		    }
 		}
 	      else
 		{
 		  (*current_liboctave_error_handler)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2000-01-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array2-idx.h (assign (Array2<LT>& lhs, const Array2<RT>& rhs)): 
+	Allow A(idx) = RHS if idx is a boolean index with the same shape
+	as A, even when do_fortran_indexing is not enabled.
+	(Array2<T>::index (idx_vector& idx) const): Likewise, for A(idx).
+
 2000-01-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dMatrix.cc (Matrix::solve (...)): Add new variant with
 	function pointer as final arg.  Passed function (if any) will be
 	called for singularity errors.
 	* CMatrix.cc (ComplexMatrix::solve (...)): Likewise.
 
 	* dMatrix.cc (Matrix::pseudo_inverse): Use economy SVD.
