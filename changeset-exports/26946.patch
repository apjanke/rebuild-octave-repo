# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1553048850 0
#      Wed Mar 20 02:27:30 2019 +0000
# Node ID 04e5cb5e2cb3199b0d4996816c5fca7d54462093
# Parent  05db503583771883ac5b21aa23cc1e8ef63b4404
update bug status in tests

* __ichol__.cc, file-io.cc, mappers.cc, oct-map.cc, syscalls.cc,
asech.m, quadgk.m, deconv.m, poly.m, betainc.m, expint.m, gammainc.m,
perms.m, native2unicode.m, bug-38236.tst, bug-47680.tst,
bug-50716.tst, classdef.tst, classes.tst, for.tst, nest.tst,
struct.tst: Update status of fixed bugs in tests.

diff --git a/libinterp/corefcn/__ichol__.cc b/libinterp/corefcn/__ichol__.cc
--- a/libinterp/corefcn/__ichol__.cc
+++ b/libinterp/corefcn/__ichol__.cc
@@ -448,17 +448,17 @@ Undocumented internal function.
                (sm_l, L, cols_norm.fortran_vec (),
                 Complex (droptol), michol);
 
       return ovl (L);
     }
 }
 
 /*
-%!test <51736>
+%!test <*51736>
 %! k = 4;
 %! n = 2^k;
 %! Afull = diag (ones (n,1)) / ...
 %!          2+triu ([zeros(n,2), [n.^-[1;1;2]*ones(1,n-2);zeros(n-3,n-2)]], 1);
 %! A = sparse (Afull + Afull.');
 %! opts.type = "ict";
 %! opts.droptol = 0;
 %! L = ichol (A, opts);
diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -2230,47 +2230,47 @@ as the name of the function when reporti
 ## Check for delimiter after exponent
 %!assert (textscan ("1e-3|42", "%f", "delimiter", "|"), {[1e-3; 42]})
 
 %!test <*52479>
 %! str = "\t\ta\tb\tc\n";
 %! ret = textscan (str, "%s", "delimiter", "\t");
 %! assert (ret, { {''; ''; 'a'; 'b'; 'c'} });
 
-%!test <52479>
+%!test <*52479>
 %! str = "\t\ta\tb\tc\n";
 %! ret = textscan (str, "%s", "delimiter", {"\t"});
 %! assert (ret, { {''; ''; 'a'; 'b'; 'c'} });
 
-%!test <52550>
+%!test <*52550>
 %! str = ",,1,2,3\n";
 %! obs = textscan (str, "%d", "delimiter", ",");
 %! assert (obs, { [0; 0; 1; 2; 3] });
 %! obs = textscan (str, "%d", "delimiter", {","});
 %! assert (obs, { [0; 0; 1; 2; 3] });
 
-%!test <52550>
+%!test <*52550>
 %! str = " , ,1,2,3\n";
 %! obs = textscan (str, "%d", "delimiter", ",");
 %! assert (obs, { [0; 0; 1; 2; 3] });
 %! textscan (str, "%d", "delimiter", {","});
 %! assert (obs, { [0; 0; 1; 2; 3] });
 
-%!test <52550>
+%!test <*52550>
 %! str = " 0 , 5+6j , -INF+INFj ,NaN,3\n";
 %! obs = textscan (str, "%f", "delimiter", ",");
 %! assert (obs, { [0; 5+6i; complex(-Inf,Inf); NaN; 3] });
 %! obs = textscan (str, "%f", "delimiter", {","});
 %! assert (obs, { [0; 5+6i; complex(-Inf,Inf); NaN; 3] });
 
-%!test <52550>
+%!test <*52550>
 %! str = " 0;,;,1;,2;,3\n";
 %! assert (textscan (str, "%f", "delimiter", {";,"}), { [0; NaN; 1; 2; 3] });
 
-%!test <52550>
+%!test <*52550>
 %! str = " 0 ;1 , $ 2 ;3\n";
 %! obs = textscan (str, "%f", "delimiter", ",;$");
 %! assert (obs, { [0; 1; NaN; 2; 3] });
 %! obs = textscan (str, "%f", "delimiter", {",",";","$"});
 %! assert (obs, { [0; 1; NaN; 2; 3] });
 
 ## file stream with encoding
 %!test
diff --git a/libinterp/corefcn/mappers.cc b/libinterp/corefcn/mappers.cc
--- a/libinterp/corefcn/mappers.cc
+++ b/libinterp/corefcn/mappers.cc
@@ -126,17 +126,17 @@ Compute the inverse cosine in radians fo
 
 ## Test large magnitude arguments (bug #45507)
 ## Test fails with older versions of libm, solution is to upgrade.
 %!testif ; ! ismac () && ! ispc ()   <*45507>
 %! x = [1, -1, i, -i] .* 1e150;
 %! v = [0, pi, pi/2, pi/2];
 %! assert (real (acos (x)), v);
 
-%!xtest <52627>
+%!xtest <*52627>
 %! ## Same test code as above, but intended only for test statistics on Mac and
 %! ## Windows.  Their trig/hyperbolic functions have huge tolerances.
 %! if (! ismac ()), return; endif
 %! x = [1, -1, i, -i] .* 1e150;
 %! v = [0, pi, pi/2, pi/2];
 %! assert (real (acos (x)), v);
 
 %!error acos ()
@@ -157,17 +157,17 @@ Compute the inverse hyperbolic cosine fo
 }
 
 /*
 %!testif ; ! ismac ()
 %! x = [1, 0, -1, 0];
 %! v = [0, pi/2*i, pi*i, pi/2*i];
 %! assert (acosh (x), v, sqrt (eps));
 
-%!xtest <52627>
+%!xtest <*52627>
 %! ## Same test code as above, but intended only for test statistics on Mac.
 %! ## Mac trig/hyperbolic functions have huge tolerances.
 %! if (! ismac ()), return; endif
 %! x = [1, 0, -1, 0];
 %! v = [0, pi/2*i, pi*i, pi/2*i];
 %! assert (acosh (x), v, sqrt (eps));
 
 ## FIXME: std::acosh on Windows platforms, returns a result that differs
@@ -180,17 +180,17 @@ Compute the inverse hyperbolic cosine fo
 %! im = pi/2;
 %! assert (acosh (-10i), re - i*im);
 
 %!testif ; ! ismac ()
 %! x = single ([1, 0, -1, 0]);
 %! v = single ([0, pi/2*i, pi*i, pi/2*i]);
 %! assert (acosh (x), v, sqrt (eps ("single")));
 
-%!xtest <52627>
+%!xtest <*52627>
 %! ## Same test code as above, but intended only for test statistics on Mac.
 %! ## Mac trig/hyperbolic functions have huge tolerances.
 %! if (! ismac ()), return; endif
 %! x = single ([1, 0, -1, 0]);
 %! v = single ([0, pi/2*i, pi*i, pi/2*i]);
 %! assert (acosh (x), v, sqrt (eps ("single")));
 
 %!test <49091>
@@ -201,17 +201,17 @@ Compute the inverse hyperbolic cosine fo
 
 ## Test large magnitude arguments (bug #45507)
 ## Test fails with older versions of libm, solution is to upgrade.
 %!testif ; ! ismac () && ! ispc ()   <*45507>
 %! x = [1, -1, i, -i] .* 1e150;
 %! v = [0, pi, pi/2, -pi/2];
 %! assert (imag (acosh (x)), v);
 
-%!xtest <52627>
+%!xtest <*52627>
 %! ## Same test code as above, but intended only for test statistics on Mac and
 %! ## Windows.  Their trig/hyperbolic functions have huge tolerances.
 %! if (! ismac ()), return; endif
 %! x = [1, -1, i, -i] .* 1e150;
 %! v = [0, pi, pi/2, -pi/2];
 %! assert (imag (acosh (x)), v);
 
 %!error acosh ()
@@ -329,17 +329,17 @@ Compute the inverse sine in radians for 
 
 ## Test large magnitude arguments (bug #45507)
 ## Test fails with older versions of libm, solution is to upgrade.
 %!testif ; ! ismac () && ! ispc ()   <*45507>
 %! x = [1, -1, i, -i] .* 1e150;
 %! v = [pi/2, -pi/2, 0, -0];
 %! assert (real (asin (x)), v);
 
-%!xtest <52627>
+%!xtest <*52627>
 %! ## Same test code as above, but intended only for test statistics on Mac and
 %! ## Windows. Their trig/hyperbolic functions have huge tolerances.
 %! if (! ismac ()), return; endif
 %! x = [1, -1, i, -i] .* 1e150;
 %! v = [pi/2, -pi/2, 0, -0];
 %! assert (real (asin (x)), v);
 
 %!error asin ()
@@ -372,17 +372,17 @@ Compute the inverse hyperbolic sine for 
 
 ## Test large magnitude arguments (bug #45507)
 ## Test fails with older versions of libm, solution is to upgrade.
 %!testif ; ! ismac () && ! ispc ()   <*45507>
 %! x = [1, -1, i, -i] .* 1e150;
 %! v = [0, 0, pi/2, -pi/2];
 %! assert (imag (asinh (x)), v);
 
-%!xtest <52627>
+%!xtest <*52627>
 %! ## Same test code as above, but intended only for test statistics on Mac and
 %! ## Windows.  Their trig/hyperbolic functions have huge tolerances.
 %! if (! ismac ()), return; endif
 %! x = [1, -1, i, -i] .* 1e150;
 %! v = [0, 0, pi/2, -pi/2];
 %! assert (imag (asinh (x)), v);
 
 %!error asinh ()
diff --git a/libinterp/corefcn/oct-map.cc b/libinterp/corefcn/oct-map.cc
--- a/libinterp/corefcn/oct-map.cc
+++ b/libinterp/corefcn/oct-map.cc
@@ -552,21 +552,21 @@ octave_map::reshape (const dim_vector& d
 
 /*
 ## test preservation of key order by reshape
 %!test
 %! x(1,1).d = 10;  x(4,6).a = "b";  x(2,4).f = 27;
 %! assert (fieldnames (reshape (x, 3, 8)), {"d"; "a"; "f"});
 
 ## test chopping of trailing singletons
-%!test <51634>
+%!test <*51634>
 %! x(1,1).d = 10;  x(4,6).a = "b";  x(2,4).f = 27;
 %! reshape (x, 3, 8, 1, 1);
 
-%!test <46385>
+%!test <*46385>
 %! M = repmat (struct ('a', ones(100), 'b', true), 1, 2);
 %! M = repmat(M, 1, 2);
 %! assert (size (M), [1, 4]);
 
 libinterp/corefcn/oct-map.cc
 
 */
 
diff --git a/libinterp/corefcn/syscalls.cc b/libinterp/corefcn/syscalls.cc
--- a/libinterp/corefcn/syscalls.cc
+++ b/libinterp/corefcn/syscalls.cc
@@ -1057,17 +1057,17 @@ system-dependent error message.
   m.assign ("release", sysinfo.release ());
   m.assign ("version", sysinfo.version ());
   m.assign ("machine", sysinfo.machine ());
 
   return ovl (m, sysinfo.error (), sysinfo.message ());
 }
 
 /*
-%!test <51869>
+%!test <*51869>
 %! [info, status, msg] = uname ();
 %! if (status == 0)
 %!   assert (isstruct (info))
 %!   assert (ischar (msg) && isempty (msg))
 %! endif
 */
 
 DEFUNX ("unlink", Funlink, args, ,
diff --git a/scripts/elfun/asech.m b/scripts/elfun/asech.m
--- a/scripts/elfun/asech.m
+++ b/scripts/elfun/asech.m
@@ -35,17 +35,17 @@ function y = asech (x)
 endfunction
 
 
 %!testif ; ! ismac ()
 %! v = [0, pi*i];
 %! x = [1, -1];
 %! assert (asech (x), v, sqrt (eps));
 
-%!xtest <52627>
+%!xtest <*52627>
 %! ## Same test code as above, but intended only for test statistics on Mac.
 %! ## Mac trig/hyperbolic functions have huge tolerances.
 %! if (! ismac ()), return; endif
 %! v = [0, pi*i];
 %! x = [1, -1];
 %! assert (asech (x), v, sqrt (eps));
 
 %!error asech ()
diff --git a/scripts/general/quadgk.m b/scripts/general/quadgk.m
--- a/scripts/general/quadgk.m
+++ b/scripts/general/quadgk.m
@@ -457,17 +457,17 @@ endfunction
 
 
 %!assert (quadgk (@sin,-pi,pi), 0, 1e-10)
 %!assert (quadgk (inline ("sin"),-pi,pi), 0, 1e-10)
 %!assert (quadgk ("sin",-pi,pi), 0, 1e-10)
 %!assert (quadgk (@sin,-pi,pi, "WayPoints", 0, "MaxIntervalCount", 100,
 %!                "RelTol", 1e-3, "AbsTol", 1e-6, "trace", false), 0, 1e-6)
 %!assert (quadgk (@sin,-pi,pi, 1e-6, false), 0, 1e-6)
-%!assert <51867> (quadgk (@(x) x, 0, 0), 0, 0)
+%!assert <*51867> (quadgk (@(x) x, 0, 0), 0, 0)
 
 %!assert (quadgk (@sin,-pi,0), -2, 1e-10)
 %!assert (quadgk (@sin,0,pi), 2, 1e-10)
 %!assert (quadgk (@(x) 1./sqrt (x),0,1), 2, 1e-10)
 %!assert (quadgk (@(x) abs (1 - x.^2),0,2, "Waypoints", 1), 2, 1e-10)
 %!assert (quadgk (@(x) 1./(sqrt (x) .* (x+1)),0,Inf), pi, 1e-10)
 %!assert (quadgk (@(z) log (z),1+1i,1+1i, "WayPoints", [1-1i, -1,-1i, -1+1i]),
 %!        -pi * 1i, 1e-10)
diff --git a/scripts/polynomial/deconv.m b/scripts/polynomial/deconv.m
--- a/scripts/polynomial/deconv.m
+++ b/scripts/polynomial/deconv.m
@@ -111,17 +111,17 @@ endfunction
 %!error <A must be vector> deconv ([3, 6], [1, 2; 3, 4])
 
 %!test
 %! y = (10:-1:1);
 %! a = (4:-1:1);
 %! [b, r] = deconv (y, a);
 %! assert (conv (a, b) + r, y, eps)
 
-%!test <51221>
+%!test <*51221>
 %! a = [1.92306958582241e+15, 3.20449986572221e+24, 1.34271290136344e+32, ...
 %!     2.32739765751038e+38];
 %! b = [7.33727670161595e+27, 1.05919311870816e+36, 4.56169848520627e+42];
 %! [div, rem] = deconv (a, b);
 %! assert (rem, [0, 0, -2.89443678763879e+32  -1.58695290534499e+39], -10*eps)
 %! a(2) = 3.204499865722215e+24;
 %! [div, rem] = deconv (a, b);
 %! assert (rem, [0, 0, -2.89443678763879e+32  -1.58695290534499e+39], -10*eps)
diff --git a/scripts/polynomial/poly.m b/scripts/polynomial/poly.m
--- a/scripts/polynomial/poly.m
+++ b/scripts/polynomial/poly.m
@@ -99,16 +99,16 @@ endfunction
 %!assert (poly ([1, 2; 3, 4]), [1, -5, -2], sqrt (eps))
 
 %!test <*53897>
 %! x = [1, sqrt(2)/2+sqrt(2)/2*i, 1i, -sqrt(2)/2+sqrt(2)/2*i, -1, ...
 %!      -sqrt(2)/2-sqrt(2)/2*i, -1i, sqrt(2)/2-sqrt(2)/2*i];
 %! y = poly (x);
 %! assert (isreal (y), true);
 
-%!test <53897>
+%!test <*53897>
 %! x = [1 + 1i, 1 + 2i, 3, 4];
 %! y = poly (x);
 %! assert (y, [1 + 0i, -9 - 3i, 25 + 24i, -17 - 57i, -12 + 36i]);
 
 %!error poly ()
 %!error poly (1,2)
 %!error poly ([1, 2, 3; 4, 5, 6])
diff --git a/scripts/specfun/betainc.m b/scripts/specfun/betainc.m
--- a/scripts/specfun/betainc.m
+++ b/scripts/specfun/betainc.m
@@ -189,35 +189,35 @@ endfunction
 %! v1 = betainc (1,a,b);
 %! v2 = single ([1,1,1,1]);
 %! x = [.2, .4, .6, .8];
 %! v3 = betainc (x, a, b);
 %! v4 = 1-betainc (1.-x, b, a);
 %! assert (v1, v2, sqrt (eps ("single")));
 %! assert (v3, v4, sqrt (eps ("single")));
 
-%!test <51157>
+%!test <*51157>
 %! y = betainc ([0.00780;0.00782;0.00784],250.005,49750.995);
 %! y_ex = [0.999999999999989; 0.999999999999992; 0.999999999999995];
 %! assert (y, y_ex, -1e-14);
 
 %!assert (betainc (0.001, 20, 30), 2.750687665855991e-47, -3e-14);
 %!assert (betainc (0.0001, 20, 30), 2.819953178893307e-67, -7e-14);
-%!assert <54383> (betainc (0.99, 20, 30, "upper"), 1.5671643161872703e-47, -7e-14);
+%!assert <*54383> (betainc (0.99, 20, 30, "upper"), 1.5671643161872703e-47, -7e-14);
 %!assert (betainc (0.999, 20, 30, "upper"), 1.850806276141535e-77, -7e-14);
 %!assert (betainc (0.5, 200, 300), 0.9999964565197356, -1e-15);
 %!assert (betainc (0.5, 200, 300, "upper"), 3.54348026439253e-06, -3e-13);
 
 ## Test trivial values
 %!test
 %! [a,b] = ndgrid (linspace (1e-4, 100, 20), linspace (1e-4, 100, 20));
 %! assert (betainc (0, a, b), zeros (20));
 %! assert (betainc (1, a, b), ones (20));
 
-%!test <34405>
+%!test <*34405>
 %! assert (betainc (NaN, 1, 2), NaN);
 %! assert (betainc (0.5, 1, Inf), NaN);
 
 ## Test input validation
 %!error betainc ()
 %!error betainc (1)
 %!error betainc (1,2)
 %!error betainc (1,2,3,4,5)
diff --git a/scripts/specfun/expint.m b/scripts/specfun/expint.m
--- a/scripts/specfun/expint.m
+++ b/scripts/specfun/expint.m
@@ -235,23 +235,23 @@ endfunction
 
 ## Exceptional values (-Inf, Inf, NaN, 0, 0.37250741078)
 %!test
 %! x = [-Inf; Inf; NaN; 0; -0.3725074107813668];
 %! y_exp = [-Inf - i*pi; 0; NaN; Inf; 0 - i*pi];
 %! y = expint (x);
 %! assert (y, y_exp, 5*eps);
 
-%!test <53351>
+%!test <*53351>
 %! assert (expint (32.5 + 1i),
 %!         1.181108930758065e-16 - 1.966348533426658e-16i, -4*eps);
 %! assert (expint (44 + 1i),
 %!         9.018757389858152e-22 - 1.475771020004195e-21i, -4*eps);
 
-%!test <47738>
+%!test <*47738>
 %! assert (expint (10i), 0.0454564330044554 + 0.0875512674239774i, -4*eps);
 
 ## Test preservation or conversion of the class
 %!assert (class (expint (single (1))), "single")
 %!assert (class (expint (int8 (1))), "double")
 %!assert (class (expint (int16 (1))), "double")
 %!assert (class (expint (int32 (1))), "double")
 %!assert (class (expint (int64 (1))), "double")
diff --git a/scripts/specfun/gammainc.m b/scripts/specfun/gammainc.m
--- a/scripts/specfun/gammainc.m
+++ b/scripts/specfun/gammainc.m
@@ -479,17 +479,17 @@ endfunction
 %!assert (gammainc (200, 201, "upper"), 0.518794309678684497, -2 * eps);
 %!assert (gammainc (200, 201, "scaledupper"),
 %!        18.4904360746560462660798514, -eps)
 ## Here we are very good (no D (x,a)) involved
 %!assert (gammainc (1000, 1000.5, "scaledlower"), 39.48467539583672271, -2*eps)
 %!assert (gammainc (709, 1000, "upper"), 0.99999999999999999999999954358, -eps)
 
 ## Test: case 9
-%!test <47800>
+%!test <*47800>
 %! assert (gammainc (60, 6, "upper"), 6.18022358081160257327264261e-20,
 %!         -10*eps);
 ## Matlab is better here than Octave
 %!assert (gammainc (751, 750, "upper"), 0.4805914320558831327179457887, -12*eps)
 %!assert (gammainc (200, 200, "upper"), 0.49059658199276367497217454, -6*eps)
 %!assert (gammainc (200, 200), 0.509403418007236325027825459574527043, -5*eps)
 %!assert (gammainc (200, 200, "scaledupper"), 17.3984438553791505135122900,
 %!       -3*eps)
diff --git a/scripts/specfun/perms.m b/scripts/specfun/perms.m
--- a/scripts/specfun/perms.m
+++ b/scripts/specfun/perms.m
@@ -119,42 +119,42 @@ endfunction
 %!assert (perms (int8 (1:4)), int8 (perms (1:4)))
 
 %!error perms ()
 %!error perms (1, 2)
 
 ## Should work for any array type, such as cells and structs, and not
 ## only for numeric data.
 
-%!assert <52431> (perms ({1}), {1})
-%!assert <52431> (perms ({0.1, "foo"}), {"foo", 0.1; 0.1, "foo"})
-%!assert <52431> (perms ({"foo", 0.1}), {0.1, "foo"; "foo", 0.1})
-%!assert <52431> (perms ({"foo"; 0.1}), {0.1, "foo"; "foo", 0.1})
-%!assert <52431> (perms ({0.1; "foo"}), {"foo", 0.1; 0.1, "foo"})
-%!assert <52431> (perms ({"foo", "bar"}), {"bar", "foo"; "foo", "bar"})
-%!assert <52431> (perms ({"bar", "foo"}), {"foo", "bar"; "bar", "foo"})
+%!assert <*52431> (perms ({1}), {1})
+%!assert <*52431> (perms ({0.1, "foo"}), {"foo", 0.1; 0.1, "foo"})
+%!assert <*52431> (perms ({"foo", 0.1}), {0.1, "foo"; "foo", 0.1})
+%!assert <*52431> (perms ({"foo"; 0.1}), {0.1, "foo"; "foo", 0.1})
+%!assert <*52431> (perms ({0.1; "foo"}), {"foo", 0.1; 0.1, "foo"})
+%!assert <*52431> (perms ({"foo", "bar"}), {"bar", "foo"; "foo", "bar"})
+%!assert <*52431> (perms ({"bar", "foo"}), {"foo", "bar"; "bar", "foo"})
 %!
-%!assert <52431> (perms (struct ()), struct ())
-%!assert <52431> (perms (struct ("foo", {1, 2})),
+%!assert <*52431> (perms (struct ()), struct ())
+%!assert <*52431> (perms (struct ("foo", {1, 2})),
 %!                struct ("foo", {2, 1; 1, 2}))
-%!assert <52431> (perms (struct ("foo", {1, 2}, "bar", {3, 4})),
+%!assert <*52431> (perms (struct ("foo", {1, 2}, "bar", {3, 4})),
 %!                struct ("foo", {2, 1; 1, 2}, "bar", {4, 3; 3, 4}))
 
 ## Also sort logical input with order dependent on the input order and
 ## not their values.
 
-%!assert <52431> (perms (logical ([1 0])), logical ([0 1;, 1 0]))
-%!assert <52431> (perms (logical ([0 1])), logical ([1 0; 0 1]))
-%!assert <52431> (perms (logical ([0 1 0])),
+%!assert <*52431> (perms (logical ([1 0])), logical ([0 1;, 1 0]))
+%!assert <*52431> (perms (logical ([0 1])), logical ([1 0; 0 1]))
+%!assert <*52431> (perms (logical ([0 1 0])),
 %!                logical ([0 1 0; 0 0 1; 1 0 0; 1 0 0; 0 0 1; 0 1 0]))
-%!assert <52431> (perms (logical ([0 1 1])),
+%!assert <*52431> (perms (logical ([0 1 1])),
 %!                logical ([1 1 0; 1 0 1; 1 1 0; 1 0 1; 0 1 1; 0 1 1]))
 
-%!assert <52432> (perms ([]), reshape ([], 1, 0))
-%!assert <52432> (perms (single ([])), reshape (single ([]), 1, 0))
-%!assert <52432> (perms (int8 ([])), reshape (int8 ([]), 1, 0))
-%!assert <52432> (perms ({}), cell (1, 0))
+%!assert <*52432> (perms ([]), reshape ([], 1, 0))
+%!assert <*52432> (perms (single ([])), reshape (single ([]), 1, 0))
+%!assert <*52432> (perms (int8 ([])), reshape (int8 ([]), 1, 0))
+%!assert <*52432> (perms ({}), cell (1, 0))
 
-%!test <52432>
+%!test <*52432>
 %! s = struct ();
 %! s(1) = [];
 %! assert (perms (reshape (s, 0, 0)), reshape (s, 1, 0))
 %! assert (perms (reshape (s, 0, 1)), reshape (s, 1, 0))
diff --git a/scripts/strings/native2unicode.m b/scripts/strings/native2unicode.m
--- a/scripts/strings/native2unicode.m
+++ b/scripts/strings/native2unicode.m
@@ -77,17 +77,17 @@ endfunction
 %! assert (double (native2unicode (164:170, 'ISO-8859-5')),
 %!         [208 132 208 133 208 134 208 135 208 136 208 137 208 138]);
 ## ["ЄЅІ" 0 "ЇЈЉЊ"]
 %!testif HAVE_ICONV
 %! assert (double (native2unicode ([164:166 0 167:170], 'ISO-8859-5')),
 %!         [208 132 208 133 208 134 0 208 135 208 136 208 137 208 138]);
 
 %!assert (native2unicode ("foobar"), "foobar");
-%!assert <54384> (double (native2unicode ([0 0 120.3 0 0 122.6 0 0])),
+%!assert <*54384> (double (native2unicode ([0 0 120.3 0 0 122.6 0 0])),
 %!        [0 0 120 0 0 123 0 0]);
 
 %!error <Invalid call> native2unicode ()
 %!error <Invalid call> native2unicode (1, 'ISO-8859-1', 'test')
 %!error <NATIVE_BYTES must be a numeric vector> native2unicode ([1 2; 3 4])
 %!error <NATIVE_BYTES must be a numeric vector> native2unicode ({1 2 3 4})
 %!error <CODEPAGE must be a string> native2unicode (164:170, 123)
 %!testif HAVE_ICONV
diff --git a/test/bug-38236/bug-38236.tst b/test/bug-38236/bug-38236.tst
--- a/test/bug-38236/bug-38236.tst
+++ b/test/bug-38236/bug-38236.tst
@@ -11,10 +11,10 @@
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
-%!test <38236>
+%!test <*38236>
 %! u_vr
diff --git a/test/bug-47680/bug-47680.tst b/test/bug-47680/bug-47680.tst
--- a/test/bug-47680/bug-47680.tst
+++ b/test/bug-47680/bug-47680.tst
@@ -1,6 +1,6 @@
 %!shared obj
 %! obj = sub_bug47680 ("foo");
-%!assert<47680> (obj.meth1 (), "foo:super:meth1:sub:meth1")
-%!assert<47680> (obj.meth2 (), "foo:super:meth2:sub:meth2")
-%!assert<47680> (obj.meth3 (), "foo:super:meth3:sub:meth3")
-%!assert<47680> (obj.meth4 (), "foo:super:meth4:sub:meth4")
+%!assert<*47680> (obj.meth1 (), "foo:super:meth1:sub:meth1")
+%!assert<*47680> (obj.meth2 (), "foo:super:meth2:sub:meth2")
+%!assert<*47680> (obj.meth3 (), "foo:super:meth3:sub:meth3")
+%!assert<*47680> (obj.meth4 (), "foo:super:meth4:sub:meth4")
diff --git a/test/bug-50716/bug-50716.tst b/test/bug-50716/bug-50716.tst
--- a/test/bug-50716/bug-50716.tst
+++ b/test/bug-50716/bug-50716.tst
@@ -17,21 +17,21 @@
 ## <https://www.gnu.org/licenses/>.
 
 %!test
 %! obj = myclass ();
 %! str = "Octave";
 %! val = obj.methodA (str(1:end));
 %! assert (val, str);
 
-%!test <50716>
+%!test <*50716>
 %! obj = myclass ();
 %! foo = {obj};
 %! str = "Octave";
 %! val = foo{1}.methodA (str(1:end));
 %! assert (val, str);
 
-%!test <50716>
+%!test <*50716>
 %! obj = myclass ();
 %! foo = {obj};
 %! str = "Octave";
 %! val = foo{end}.methodA (str(1:end));
 %! assert (val, str);
diff --git a/test/classdef/classdef.tst b/test/classdef/classdef.tst
--- a/test/classdef/classdef.tst
+++ b/test/classdef/classdef.tst
@@ -43,19 +43,19 @@
 %!assert (isempty (q.principle))
 %!assert (isempty (q.term))
 %!assert (strcmp (class (p), 'foo_value_class'))
 %!assert (p.term == 48)
 %!assert (p.rate == 4.0)
 %!assert (p.principle == 50e3)
 %!assert (p.amount, amt, eps ())
 %!assert (amount (p), amt, eps ())
-%!xtest <53614>
+%!xtest <*53614>
 %! assert (properties (p), {'rate'; 'term'; 'principle'});
-%!xtest <42510>
+%!xtest <*42510>
 %! assert (methods (p), {'amount'; 'foo_value_class'});
 %!assert (isempty (foo_value_class().rate))
 %!error <property `rate' is not constant> foo_value_class.rate
 %!shared  # clear all shared variables for remainder of tests
 
 %%  Static method and Constant Property
 %!assert (foo_static_method_constant_property.radians_per_cycle == 2*pi)
 %!assert (foo_static_method_constant_property().radians_per_cycle == 2*pi)
diff --git a/test/classes/classes.tst b/test/classes/classes.tst
--- a/test/classes/classes.tst
+++ b/test/classes/classes.tst
@@ -389,32 +389,32 @@
 %!assert (isscalar (st))
 %!assert (isvector (st))
 
 %!test st = SizeTester ([1 2]);
 %! assert (isequal (size (st), [1 2]));
 %! assert (isequal (numel (st), 2));
 %!assert (isequal (ndims (st), 2))
 %!assert (isequal (rows (st), 1))
-%!assert <51308> (isequal (columns (st), 2))
+%!assert <*51308> (isequal (columns (st), 2))
 %!assert <*44334> (isequal (st, st))
-%!assert <44498> (not (isscalar (st)))
+%!assert <*44498> (not (isscalar (st)))
 %!assert (isvector (st))
 
 %!test st = SizeTester ([2 3]);
 %! assert (isequal (size (st), [2 3]));
 %! assert (isequal (numel (st), 6));
 %!assert (isequal (ndims (st), 2))
-%!assert <51308> (isequal (rows (st), 2))
-%!assert <51308> (isequal (columns (st), 3))
+%!assert <*51308> (isequal (rows (st), 2))
+%!assert <*51308> (isequal (columns (st), 3))
 %!assert <*44334> (isequal (st, st))
-%!assert <44498> (not (isscalar (st)))
-%!assert <44498> (not (isvector (st)))
+%!assert <*44498> (not (isscalar (st)))
+%!assert <*44498> (not (isvector (st)))
 
 %!test st = SizeTester ([2 3 4]);
 %! assert (isequal (size (st), [2 3 4]));
 %! assert (isequal (numel (st), 24));
-%!assert <51308> (isequal (ndims (st), 3))
-%!assert <51308> (isequal (rows (st), 2))
-%!assert <51308> (isequal (columns (st), 3))
+%!assert <*51308> (isequal (ndims (st), 3))
+%!assert <*51308> (isequal (rows (st), 2))
+%!assert <*51308> (isequal (columns (st), 3))
 %!assert <*44334> (isequal (st, st))
-%!assert <44498> (not (isscalar (st)))
-%!assert <44498> (not (isvector (st)))
+%!assert <*44498> (not (isscalar (st)))
+%!assert <*44498> (not (isvector (st)))
diff --git a/test/for.tst b/test/for.tst
--- a/test/for.tst
+++ b/test/for.tst
@@ -118,39 +118,39 @@
 
 %!test
 %! parfor i = 1:4
 %!   __printf_assert__ ("%d", i);
 %! endparfor
 %! __printf_assert__ ("\n");
 %! assert (__prog_output_assert__ ("1234"));
 
-%!test <50893>
+%!test <*50893>
 %! cnt = 0;
 %! for k = zeros (0,3);
 %!   cnt++;
 %! endfor
 %! assert (cnt, 0);
 %! assert (k, zeros (0,3));
 
-%!test <50893>
+%!test <*50893>
 %! cnt = 0;
 %! for k = zeros (3,0);
 %!   cnt++;
 %! endfor
 %! assert (cnt, 0);
 %! assert (k, zeros (3,0));
 
-%!test <50893>
+%!test <*50893>
 %! cnt = 0;
 %! for k = zeros (3,0, "uint32");
 %!   cnt++;
 %! endfor
 %! assert (cnt, 0);
 %! assert (k, zeros (3,0, "uint32"));
 
-%!test <50893>
+%!test <*50893>
 %! cnt = 0;
 %! for k = cell (0,3);
 %!   cnt++;
 %! endfor
 %! assert (cnt, 0);
 %! assert (k, cell (0,3));
diff --git a/test/nest/nest.tst b/test/nest/nest.tst
--- a/test/nest/nest.tst
+++ b/test/nest/nest.tst
@@ -57,33 +57,33 @@
 %!error <can not add variable "y" to a static workspace>
 %! nest_eval ("x = -5; x = abs (x);", "y = 6;")
 
 %!test
 %! f = no_closure (0);
 %! assert (f("foo"), "nested foo");
 %! assert (f("foo"), "nested foo");
 
-%!test <39257>
+%!test <*39257>
 %! f = no_closure (1);
 %! assert (f(), "nested");
 %! assert (f("foo"), "nested foo");
 
 %!error <D' undefined near line 7> scope2
 %!error <can not add variable "y" to a static workspace> nest_eval ("y = 5;", "")
 %!error <can not add variable "y" to a static workspace> nest_eval ("y;", "")
 
 ## Test the way that non-local variables referenced by nested functions
 ## work with function handles.
 
 ## FH1 and FH2 were created separately so will have distinct
 ## closure contexts.handles, FH3 is a copy of FH2 so they will
 ## share the same context.
 
-%!test <39257>
+%!test <*39257>
 %! fh1 = nst1 (13);
 %! fh2 = nst1 (13);
 %! fh3 = fh2;
 %!
 %! assert (fh1 (), 13);
 %! assert (fh2 (), 13);
 %! assert (fh3 (), 13);
 %!
diff --git a/test/struct.tst b/test/struct.tst
--- a/test/struct.tst
+++ b/test/struct.tst
@@ -226,28 +226,28 @@
 
 ## test indexed assignment into empty struct array
 %!test
 %! s = resize (struct (), 3,2);
 %! s(3).foo = 42;
 %! assert (s(3), struct ("foo", 42));
 
 ## empty index should return entire struct
-%!test <51633>
+%!test <*51633>
 %! x.a = 1:10;
 %! y = x;
 %! assert (! isempty (y));
 %! assert (y, x);
 %! z = x();
 %! assert (! isempty (z));
 %! assert (z, x);
 %! assert (z, y);
 
 ## test assigning to multi-dim struct with trailing singleton dimensions,
-%!test <35841>
+%!test <*35841>
 %! a(1,1,1).b(1) = 1;
 %! a(1,1,1).b(1) = 2;
 %! a(1,1,:).b(1) = 3;
 %! assert (a(1,1,1).b(1) == 3);
 
 %!error id=Octave:index-out-of-bounds
 %! s = resize (struct (),3,2);
 %! s(3).foo = 42;
