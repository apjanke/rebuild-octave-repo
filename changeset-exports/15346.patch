# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1347314530 18000
#      Mon Sep 10 17:02:10 2012 -0500
# Node ID 6bdf379592d91fe2cb153b1708843c11ec397a7f
# Parent  bd906ac220b625f89388c6d3420ac4a0ede4db3d
Remove --enable-jit-debug configure option

* configure.ac: Remove --enable-jit-debug option.

* pt-jit.cc: REmove OCTAVE_JIT_DEBUG guards.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -688,23 +688,16 @@ LLVM_CPPFLAGS=
 LLVM_LDFLAGS=
 LLVM_LIBS=
 
 if test $build_jit = true; then
 
   ## Find llvm-config program from environment variable or by searching
   AC_ARG_VAR([LLVM_CONFIG], [path to llvm-config utility])
   AC_CHECK_PROG([LLVM_CONFIG], llvm-config, llvm-config, [])
-  
-  AC_ARG_ENABLE([jit-debug],
-    [AS_HELP_STRING([--enable-jit-debug], [enable debug printing of JIT IRs])])
-
-  if test x$enable_jit_debug = "xyes"; then
-    AC_DEFINE(OCTAVE_JIT_DEBUG, 1, [Define to 1 for JIT debug printing.])
-  fi
 
   if test -z "$LLVM_CONFIG"; then
     warn_llvm="llvm-config utility not found.  JIT compiler is disabled."
   else
     dnl Preset warning message in case compile fails
     warn_llvm="LLVM was not found or is to old.  JIT compiler is disabled."
 
     save_CPPFLAGS="$CPPFLAGS"
diff --git a/libinterp/interp-core/pt-jit.cc b/libinterp/interp-core/pt-jit.cc
--- a/libinterp/interp-core/pt-jit.cc
+++ b/libinterp/interp-core/pt-jit.cc
@@ -38,32 +38,29 @@ bool Venable_jit_debug = false;
 
 bool Venable_jit_compiler = true;
 
 #ifdef HAVE_LLVM
 
 #include <llvm/Analysis/CallGraph.h>
 #include <llvm/Analysis/Passes.h>
 #include <llvm/Analysis/Verifier.h>
+#include <llvm/Bitcode/ReaderWriter.h>
 #include <llvm/LLVMContext.h>
 #include <llvm/ExecutionEngine/ExecutionEngine.h>
 #include <llvm/ExecutionEngine/JIT.h>
 #include <llvm/Module.h>
 #include <llvm/PassManager.h>
 #include <llvm/Support/IRBuilder.h>
 #include <llvm/Support/raw_os_ostream.h>
 #include <llvm/Support/TargetSelect.h>
 #include <llvm/Target/TargetData.h>
 #include <llvm/Transforms/IPO.h>
 #include <llvm/Transforms/Scalar.h>
 
-#ifdef OCTAVE_JIT_DEBUG
-#include <llvm/Bitcode/ReaderWriter.h>
-#endif
-
 static llvm::IRBuilder<> builder (llvm::getGlobalContext ());
 
 static llvm::LLVMContext& context = llvm::getGlobalContext ();
 
 // -------------------- jit_convert --------------------
 jit_convert::jit_convert (tree &tee, jit_type *for_bounds)
   : converting_function (false)
 {
@@ -1860,22 +1857,23 @@ tree_jit::trip_count (const octave_value
 
 
 void
 tree_jit::optimize (llvm::Function *fn)
 {
   module_pass_manager->run (*module);
   pass_manager->run (*fn);
 
-#ifdef OCTAVE_JIT_DEBUG
-  std::string error;
-  llvm::raw_fd_ostream fout ("test.bc", error,
-                             llvm::raw_fd_ostream::F_Binary);
-  llvm::WriteBitcodeToFile (module, fout);
-#endif
+  if (Venable_jit_debug)
+    {
+      std::string error;
+      llvm::raw_fd_ostream fout ("test.bc", error,
+                                 llvm::raw_fd_ostream::F_Binary);
+      llvm::WriteBitcodeToFile (module, fout);
+    }
 }
 
 // -------------------- jit_function_info --------------------
 jit_function_info::jit_function_info (tree_jit& tjit,
                                       octave_user_function& fcn,
                                       const octave_value_list& ov_args)
   : argument_types (ov_args.length ()), function (0)
 {
@@ -1885,50 +1883,46 @@ jit_function_info::jit_function_info (tr
 
   try
     {
       jit_convert conv (fcn, argument_types);
       jit_infer infer (conv.get_factory (), conv.get_blocks (),
                        conv.get_variable_map ());
       infer.infer ();
 
-#if OCTAVE_JIT_DEBUG
       if (Venable_jit_debug)
         {
           jit_block_list& blocks = infer.get_blocks ();
           jit_block *entry_block = blocks.front ();
           entry_block->label ();
           std::cout << "-------------------- Compiling function ";
           std::cout << "--------------------\n";
 
           tree_print_code tpc (std::cout);
           tpc.visit_octave_user_function_header (fcn);
           tpc.visit_statement_list (*fcn.body ());
           tpc.visit_octave_user_function_trailer (fcn);
           blocks.print (std::cout, "octave jit ir");
         }
-#endif
 
       jit_factory& factory = conv.get_factory ();
       llvm::Module *module = tjit.get_module ();
       jit_convert_llvm to_llvm;
       jit_function raw_fn = to_llvm.convert_function (module,
                                                       infer.get_blocks (),
                                                       factory.constants (),
                                                       fcn, argument_types);
 
-#ifdef OCTAVE_JIT_DEBUG
       if (Venable_jit_debug)
         {
           std::cout << "-------------------- raw function ";
           std::cout << "--------------------\n";
           std::cout << *raw_fn.to_llvm () << std::endl;
           llvm::verifyFunction (*raw_fn.to_llvm ());
         }
-#endif
 
       std::string wrapper_name = fcn.name () + "_wrapper";
       jit_type *any_t = jit_typeinfo::get_any ();
       std::vector<jit_type *> wrapper_args (1, jit_typeinfo::get_any_ptr ());
       jit_function wrapper (module, jit_convention::internal, wrapper_name,
                             any_t, wrapper_args);
       llvm::BasicBlock *wrapper_body = wrapper.new_block ();
       builder.SetInsertPoint (wrapper_body);
@@ -1959,40 +1953,37 @@ jit_function_info::jit_function_info (tr
           result = builder.CreateBitCast (zero, any_t->to_llvm ());
         }
 
       wrapper.do_return (builder, result);
 
       llvm::Function *llvm_function = wrapper.to_llvm ();
       tjit.optimize (llvm_function);
 
-#ifdef OCTAVE_JIT_DEBUG
       if (Venable_jit_debug)
         {
           std::cout << "-------------------- optimized and wrapped ";
           std::cout << "--------------------\n";
           std::cout << *llvm_function << std::endl;
           llvm::verifyFunction (*llvm_function);
         }
-#endif
 
       llvm::ExecutionEngine* engine = tjit.get_engine ();
       void *void_fn = engine->getPointerToFunction (llvm_function);
       function = reinterpret_cast<jited_function> (void_fn);
     }
   catch (const jit_fail_exception& e)
     {
       argument_types.clear ();
-#ifdef OCTAVE_JIT_DEBUG
+
       if (Venable_jit_debug)
         {
           if (e.known ())
             std::cout << "jit fail: " << e.what () << std::endl;
         }
-#endif
     }
 }
 
 bool
 jit_function_info::execute (const octave_value_list& ov_args,
                             octave_value_list& retval) const
 {
   if (! function)
@@ -2108,73 +2099,61 @@ jit_info::compile (tree_jit& tjit, tree&
 {
   try
     {
       jit_convert conv (tee, for_bounds);
       jit_infer infer (conv.get_factory (), conv.get_blocks (),
                        conv.get_variable_map ());
 
       infer.infer ();
-#ifdef OCTAVE_JIT_DEBUG
+
       if (Venable_jit_debug)
         {
           jit_block_list& blocks = infer.get_blocks ();
           jit_block *entry_block = blocks.front ();
           entry_block->label ();
           std::cout << "-------------------- Compiling tree --------------------\n";
           std::cout << tee.str_print_code () << std::endl;
           blocks.print (std::cout, "octave jit ir");
         }
-#endif
 
       jit_factory& factory = conv.get_factory ();
       jit_convert_llvm to_llvm;
       llvm_function = to_llvm.convert_loop (tjit.get_module (),
                                             infer.get_blocks (),
                                             factory.constants ());
       arguments = to_llvm.get_arguments ();
       bounds = conv.get_bounds ();
     }
   catch (const jit_fail_exception& e)
     {
-#ifdef OCTAVE_JIT_DEBUG
       if (Venable_jit_debug)
         {
           if (e.known ())
             std::cout << "jit fail: " << e.what () << std::endl;
         }
-#endif
     }
 
   if (llvm_function)
     {
-#ifdef OCTAVE_JIT_DEBUG
-      llvm::raw_os_ostream llvm_cout (std::cout);
-
       if (Venable_jit_debug)
         {
           std::cout << "-------------------- llvm ir --------------------";
-          llvm_function->print (llvm_cout);
-          std::cout << std::endl;
+          std::cout << *llvm_function << std::endl;
           llvm::verifyFunction (*llvm_function);
         }
-#endif
 
       tjit.optimize (llvm_function);
 
-#ifdef OCTAVE_JIT_DEBUG
       if (Venable_jit_debug)
         {
           std::cout << "-------------------- optimized llvm ir "
                     << "--------------------\n";
-          llvm_function->print (llvm_cout);
-          llvm_cout.flush ();
-          std::cout << std::endl;
+          std::cout << *llvm_function << std::endl;
         }
-#endif
 
       void *void_fn = engine->getPointerToFunction (llvm_function);
       function = reinterpret_cast<jited_function> (void_fn);
     }
 }
 
 octave_value
 jit_info::find (const vmap& extra_vars, const std::string& vname) const
@@ -2188,17 +2167,17 @@ jit_info::find (const vmap& extra_vars, 
 
 DEFUN (enable_jit_debug, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} enable_jit_debug ()\n\
 Query or set the internal variable that determines whether\n\
 debugging/tracing is enabled for Octave's JIT compiler.\n\
 @end deftypefn")
 {
-#if defined (HAVE_LLVM) && defined (OCTAVE_JIT_DEBUG)
+#if defined (HAVE_LLVM)
   return SET_INTERNAL_VARIABLE (enable_jit_debug);
 #else
   warning ("enable_jit_debug: JIT compiling not available in this version of Octave");
   return octave_value ();
 #endif
 }
 
 DEFUN (enable_jit_compiler, args, nargout,
