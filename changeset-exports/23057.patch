# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1484669984 18000
#      Tue Jan 17 11:19:44 2017 -0500
# Node ID bb7513d73673ba407c6da2870a5ee1f6b7a00d8c
# Parent  422757f6ddbc077bd14d01b2140e5c35d794f60a
move mutex classes inside octave namespace

* oct-mutex.h, oct-mutex.cc (mutex, base_mutex, autolock, thread):
Move classes inside octave namespace and rename from octave_mutex,
octave_base_mutex, octave_autolock, and octave_thread, respectively.
Change all uses.

diff --git a/libgui/graphics/ObjectProxy.cc b/libgui/graphics/ObjectProxy.cc
--- a/libgui/graphics/ObjectProxy.cc
+++ b/libgui/graphics/ObjectProxy.cc
@@ -79,17 +79,17 @@ namespace QtHandles
   {
     emit sendFinalize ();
     init (obj);
   }
 
   void
   ObjectProxy::update (int pId)
   {
-    if (octave_thread::is_octave_thread ())
+    if (octave::thread::is_thread ())
       emit sendUpdate (pId);
     else if (m_object)
       m_object->slotUpdate (pId);
   }
 
   void
   ObjectProxy::finalize (void)
   {
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -9685,17 +9685,17 @@ gh_manager::do_restore_gcbo (void)
   xset_gcbo (callback_objects.empty ()
              ? graphics_handle () : callback_objects.front ().get_handle ());
 }
 
 void
 gh_manager::do_execute_listener (const graphics_handle& h,
                                  const octave_value& l)
 {
-  if (octave_thread::is_octave_thread ())
+  if (octave::thread::is_thread ())
     gh_manager::execute_callback (h, l, octave_value ());
   else
     {
       gh_manager::auto_lock guard;
 
       do_post_event (graphics_event::create_callback_event (h, l));
     }
 }
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -6358,24 +6358,24 @@ public:
 
   static void close_all_figures (void)
   {
     if (instance_ok ())
       instance->do_close_all_figures ();
   }
 
 public:
-  class auto_lock : public octave_autolock
+  class auto_lock : public octave::autolock
   {
   public:
     auto_lock (bool wait = true)
-      : octave_autolock (instance_ok ()
-                         ? instance->graphics_lock
-                         : octave_mutex (),
-                         wait)
+      : octave::autolock (instance_ok ()
+                          ? instance->graphics_lock
+                          : octave::mutex (),
+                          wait)
     { }
 
     // No copying!
 
     auto_lock (const auto_lock&) = delete;
 
     auto_lock& operator = (const auto_lock&) = delete;
   };
@@ -6403,17 +6403,17 @@ private:
   // The next handle available if handle_free_list is empty.
   double next_handle;
 
   // The allocated figure handles.  Top of the stack is most recently
   // created.
   std::list<graphics_handle> figure_list;
 
   // The lock for accessing the graphics sytsem.
-  octave_mutex graphics_lock;
+  octave::mutex graphics_lock;
 
   // The list of events queued by graphics toolkits.
   std::list<graphics_event> event_queue;
 
   // The stack of callback objects.
   std::list<graphics_object> callback_objects;
 
   // A flag telling whether event processing must be constantly on.
diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -535,17 +535,17 @@ namespace octave
     octave::sys::env::putenv ("LC_NUMERIC", "C");
     octave::sys::env::putenv ("LC_TIME", "C");
 
     // Initialize the default floating point unit control state.
     octave_set_default_fpucw ();
 
     string_vector all_args = options.all_args ();
 
-    octave_thread::init ();
+    octave::thread::init ();
 
     set_default_prompts ();
 
     // Initialize default warning state before --traditional option
     // that may reset them.
 
     initialize_default_warning_state ();
 
diff --git a/libinterp/corefcn/octave-link.cc b/libinterp/corefcn/octave-link.cc
--- a/libinterp/corefcn/octave-link.cc
+++ b/libinterp/corefcn/octave-link.cc
@@ -45,17 +45,17 @@ octave_readline_hook (void)
   octave_link::finished_readline_hook ();
 
   return 0;
 }
 
 octave_link *octave_link::instance = 0;
 
 octave_link::octave_link (void)
-  : event_queue_mutex (new octave_mutex ()), gui_event_queue (),
+  : event_queue_mutex (new octave::mutex ()), gui_event_queue (),
     debugging (false), link_enabled (true)
 {
   octave::command_editor::add_event_hook (octave_readline_hook);
 }
 
 octave_link::~octave_link (void)
 {
   delete event_queue_mutex;
diff --git a/libinterp/corefcn/octave-link.h b/libinterp/corefcn/octave-link.h
--- a/libinterp/corefcn/octave-link.h
+++ b/libinterp/corefcn/octave-link.h
@@ -24,19 +24,20 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_octave_link_h)
 #define octave_octave_link_h 1
 
 #include "octave-config.h"
 
 #include <string>
 
+#include "oct-mutex.h"
+
 #include "event-queue.h"
 
-class octave_mutex;
 class string_vector;
 class workspace_element;
 
 // \class OctaveLink
 // \brief Provides threadsafe access to octave.
 // \author Jacob Dawid
 //
 // This class is a wrapper around octave and provides thread safety by
@@ -360,17 +361,17 @@ private:
 
   static octave_link *instance;
 
   static bool instance_ok (void) { return instance != 0; }
 
 protected:
 
   // Semaphore to lock access to the event queue.
-  octave_mutex *event_queue_mutex;
+  octave::mutex *event_queue_mutex;
 
   // Event Queue.
   event_queue gui_event_queue;
 
   bool debugging;
   bool link_enabled;
 
   void do_generate_events (void);
diff --git a/liboctave/util/cmd-edit.cc b/liboctave/util/cmd-edit.cc
--- a/liboctave/util/cmd-edit.cc
+++ b/liboctave/util/cmd-edit.cc
@@ -56,17 +56,17 @@ namespace octave
   command_editor *command_editor::instance = 0;
 
   std::set<command_editor::startup_hook_fcn> command_editor::startup_hook_set;
 
   std::set<command_editor::pre_input_hook_fcn> command_editor::pre_input_hook_set;
 
   std::set<command_editor::event_hook_fcn> command_editor::event_hook_set;
 
-  static octave_mutex event_hook_lock;
+  static octave::mutex event_hook_lock;
 
 #if defined (USE_READLINE)
 
   class
   gnu_readline : public command_editor
   {
   public:
 
@@ -1533,30 +1533,30 @@ namespace octave
         if (pre_input_hook_set.empty ())
           instance->restore_pre_input_hook ();
       }
   }
 
   void
   command_editor::add_event_hook (event_hook_fcn f)
   {
-    octave_autolock guard (event_hook_lock);
+    autolock guard (event_hook_lock);
 
     if (instance_ok ())
       {
         event_hook_set.insert (f);
 
         instance->set_event_hook (event_handler);
       }
   }
 
   void
   command_editor::remove_event_hook (event_hook_fcn f)
   {
-    octave_autolock guard (event_hook_lock);
+    autolock guard (event_hook_lock);
 
     if (instance_ok ())
       {
         auto p = event_hook_set.find (f);
 
         if (p != event_hook_set.end ())
           event_hook_set.erase (p);
 
diff --git a/liboctave/util/oct-mutex.cc b/liboctave/util/oct-mutex.cc
--- a/liboctave/util/oct-mutex.cc
+++ b/liboctave/util/oct-mutex.cc
@@ -28,149 +28,151 @@ along with Octave; see the file COPYING.
 #include "lo-error.h"
 
 #if defined (OCTAVE_USE_WINDOWS_API)
 #  include <windows.h>
 #elif defined (HAVE_PTHREAD_H)
 #  include <pthread.h>
 #endif
 
-void
-octave_base_mutex::lock (void)
-{
-  (*current_liboctave_error_handler) ("mutex not supported on this platform");
-}
-
-void
-octave_base_mutex::unlock (void)
+namespace octave
 {
-  (*current_liboctave_error_handler) ("mutex not supported on this platform");
-}
+  void
+  base_mutex::lock (void)
+  {
+    (*current_liboctave_error_handler) ("mutex not supported on this platform");
+  }
 
-bool
-octave_base_mutex::try_lock (void)
-{
-  (*current_liboctave_error_handler) ("mutex not supported on this platform");
+  void
+  base_mutex::unlock (void)
+  {
+    (*current_liboctave_error_handler) ("mutex not supported on this platform");
+  }
 
-  return false;
-}
+  bool
+  base_mutex::try_lock (void)
+  {
+    (*current_liboctave_error_handler) ("mutex not supported on this platform");
+
+    return false;
+  }
 
 #if defined (OCTAVE_USE_WINDOWS_API)
 
-class
-octave_w32_mutex : public octave_base_mutex
-{
-public:
-  octave_w32_mutex (void)
-    : octave_base_mutex ()
+  class
+  w32_mutex : public base_mutex
   {
-    InitializeCriticalSection (&cs);
-  }
+  public:
+    w32_mutex (void)
+      : base_mutex ()
+    {
+      InitializeCriticalSection (&cs);
+    }
+
+    ~w32_mutex (void)
+    {
+      DeleteCriticalSection (&cs);
+    }
+
+    void lock (void)
+    {
+      EnterCriticalSection (&cs);
+    }
 
-  ~octave_w32_mutex (void)
+    void unlock (void)
+    {
+      LeaveCriticalSection (&cs);
+    }
+
+    bool try_lock (void)
+    {
+      return (TryEnterCriticalSection (&cs) != 0);
+    }
+
+  private:
+    CRITICAL_SECTION cs;
+  };
+
+  static DWORD thread_id = 0;
+
+  void
+  thread::init (void)
   {
-    DeleteCriticalSection (&cs);
-  }
-
-  void lock (void)
-  {
-    EnterCriticalSection (&cs);
+    thread_id = GetCurrentThreadId ();
   }
 
-  void unlock (void)
+  bool
+  thread::is_thread (void)
   {
-    LeaveCriticalSection (&cs);
-  }
-
-  bool try_lock (void)
-  {
-    return (TryEnterCriticalSection (&cs) != 0);
+    return (GetCurrentThreadId () == thread_id);
   }
 
-private:
-  CRITICAL_SECTION cs;
-};
-
-static DWORD octave_thread_id = 0;
-
-void
-octave_thread::init (void)
-{
-  octave_thread_id = GetCurrentThreadId ();
-}
-
-bool
-octave_thread::is_octave_thread (void)
-{
-  return (GetCurrentThreadId () == octave_thread_id);
-}
-
 #elif defined (HAVE_PTHREAD_H)
 
-class
-octave_pthread_mutex : public octave_base_mutex
-{
-public:
-  octave_pthread_mutex (void)
-    : octave_base_mutex (), pm ()
+  class
+  pthread_mutex : public base_mutex
   {
-    pthread_mutexattr_t attr;
+  public:
+    pthread_mutex (void)
+      : base_mutex (), pm ()
+    {
+      pthread_mutexattr_t attr;
+
+      pthread_mutexattr_init (&attr);
+      pthread_mutexattr_settype (&attr, PTHREAD_MUTEX_RECURSIVE);
+      pthread_mutex_init (&pm, &attr);
+      pthread_mutexattr_destroy (&attr);
+    }
+
+    ~pthread_mutex (void)
+    {
+      pthread_mutex_destroy (&pm);
+    }
 
-    pthread_mutexattr_init (&attr);
-    pthread_mutexattr_settype (&attr, PTHREAD_MUTEX_RECURSIVE);
-    pthread_mutex_init (&pm, &attr);
-    pthread_mutexattr_destroy (&attr);
-  }
+    void lock (void)
+    {
+      pthread_mutex_lock (&pm);
+    }
+
+    void unlock (void)
+    {
+      pthread_mutex_unlock (&pm);
+    }
 
-  ~octave_pthread_mutex (void)
+    bool try_lock (void)
+    {
+      return (pthread_mutex_trylock (&pm) == 0);
+    }
+
+  private:
+    pthread_mutex_t pm;
+  };
+
+  static pthread_t thread_id = 0;
+
+  void
+  thread::init (void)
   {
-    pthread_mutex_destroy (&pm);
-  }
-
-  void lock (void)
-  {
-    pthread_mutex_lock (&pm);
+    thread_id = pthread_self ();
   }
 
-  void unlock (void)
+  bool
+  thread::is_thread (void)
   {
-    pthread_mutex_unlock (&pm);
-  }
-
-  bool try_lock (void)
-  {
-    return (pthread_mutex_trylock (&pm) == 0);
+    return (pthread_equal (thread_id, pthread_self ()) != 0);
   }
 
-private:
-  pthread_mutex_t pm;
-};
-
-static pthread_t octave_thread_id = 0;
-
-void
-octave_thread::init (void)
-{
-  octave_thread_id = pthread_self ();
-}
-
-bool
-octave_thread::is_octave_thread (void)
-{
-  return (pthread_equal (octave_thread_id, pthread_self ()) != 0);
-}
-
 #endif
 
-static octave_base_mutex *
-init_rep (void)
-{
+  static octave::base_mutex *
+  init_rep (void)
+  {
 #if defined (OCTAVE_USE_WINDOWS_API)
-  return new octave_w32_mutex ();
+    return new octave::w32_mutex ();
 #elif defined (HAVE_PTHREAD_H)
-  return new octave_pthread_mutex ();
+    return new octave::pthread_mutex ();
 #else
-  return new octave_base_mutex ();
+    return new octave::base_mutex ();
 #endif
-}
+  }
 
-octave_mutex::octave_mutex (void) : rep (init_rep ()) { }
-
+  mutex::mutex (void) : rep (init_rep ()) { }
+}
diff --git a/liboctave/util/oct-mutex.h b/liboctave/util/oct-mutex.h
--- a/liboctave/util/oct-mutex.h
+++ b/liboctave/util/oct-mutex.h
@@ -22,133 +22,157 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_oct_mutex_h)
 #define octave_oct_mutex_h 1
 
 #include "octave-config.h"
 
 #include "oct-refcount.h"
 
-class octave_mutex;
-
-class
-octave_base_mutex
+namespace octave
 {
-public:
-  friend class octave_mutex;
-
-  octave_base_mutex (void) : count (1) { }
+  class mutex;
 
-  virtual ~octave_base_mutex (void) = default;
-
-  virtual void lock (void);
-
-  virtual void unlock (void);
+  class
+  base_mutex
+  {
+  public:
+    friend class mutex;
 
-  virtual bool try_lock (void);
+    base_mutex (void) : count (1) { }
 
-private:
-  octave::refcount<int> count;
-};
+    virtual ~base_mutex (void) = default;
+
+    virtual void lock (void);
 
-class
-OCTAVE_API
-octave_mutex
-{
-public:
-  octave_mutex (void);
+    virtual void unlock (void);
+
+    virtual bool try_lock (void);
 
-  octave_mutex (const octave_mutex& m)
-    : rep (m.rep)
-  {
-    rep->count++;
-  }
+  private:
+    octave::refcount<int> count;
+  };
 
-  ~octave_mutex (void)
+  class
+  OCTAVE_API
+  mutex
   {
-    if (--rep->count == 0)
-      delete rep;
-  }
+  public:
+    mutex (void);
 
-  octave_mutex& operator = (const octave_mutex& m)
-  {
-    if (rep != m.rep)
+    mutex (const mutex& m)
+      : rep (m.rep)
       {
-        if (--rep->count == 0)
-          delete rep;
-
-        rep = m.rep;
         rep->count++;
       }
 
-    return *this;
-  }
-
-  void lock (void)
-  {
-    rep->lock ();
-  }
-
-  void unlock (void)
-  {
-    rep->unlock ();
-  }
+    ~mutex (void)
+      {
+        if (--rep->count == 0)
+          delete rep;
+      }
 
-  bool try_lock (void)
-  {
-    return rep->try_lock ();
-  }
-
-protected:
-  octave_base_mutex *rep;
-};
+    mutex& operator = (const mutex& m)
+      {
+        if (rep != m.rep)
+          {
+            if (--rep->count == 0)
+              delete rep;
 
-class
-octave_autolock
-{
-public:
-  octave_autolock (const octave_mutex& m, bool block = true)
-    : mutex (m), lock_result (false)
-  {
-    if (block)
-      {
-        mutex.lock ();
-        lock_result = true;
+            rep = m.rep;
+            rep->count++;
+          }
+
+        return *this;
       }
-    else
-      lock_result = mutex.try_lock ();
-  }
+
+    void lock (void)
+    {
+      rep->lock ();
+    }
 
-  // No copying.
+    void unlock (void)
+    {
+      rep->unlock ();
+    }
 
-  octave_autolock (const octave_autolock&) = delete;
+    bool try_lock (void)
+    {
+      return rep->try_lock ();
+    }
+
+  protected:
+    base_mutex *rep;
+  };
 
-  octave_autolock& operator = (const octave_autolock&) = delete;
-
-  ~octave_autolock (void)
+  class
+  autolock
   {
-    if (lock_result)
-      mutex.unlock ();
-  }
+  public:
+    autolock (const mutex& m, bool block = true)
+      : m_mutex (m), m_lock_result (false)
+    {
+      if (block)
+        {
+          m_mutex.lock ();
+          m_lock_result = true;
+        }
+      else
+        m_lock_result = m_mutex.try_lock ();
+    }
 
-  bool ok (void) const { return lock_result; }
+    // No copying.
+
+    autolock (const autolock&) = delete;
+
+    autolock& operator = (const autolock&) = delete;
 
-  operator bool (void) const { return ok (); }
+    ~autolock (void)
+    {
+      if (m_lock_result)
+        m_mutex.unlock ();
+    }
 
-private:
+    bool ok (void) const { return m_lock_result; }
 
-  octave_mutex mutex;
+    operator bool (void) const { return ok (); }
+
+  private:
 
-  bool lock_result;
-};
+    mutex m_mutex;
+
+    bool m_lock_result;
+  };
+
 
-class
-OCTAVE_API
-octave_thread
-{
-public:
-  static void init (void);
+  class
+  OCTAVE_API
+  thread
+  {
+  public:
+
+    static void init (void);
+
+    static bool is_thread (void);
 
-  static bool is_octave_thread (void);
-};
+    OCTAVE_DEPRECATED ("use 'octave::is_thread' instead")
+    static bool is_octave_thread (void) { return is_thread (); }
+  };
+}
+
+#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
+
+OCTAVE_DEPRECATED ("use 'octave::mutex' instead")
+typedef octave::mutex octave_mutex;
+
+OCTAVE_DEPRECATED ("use 'octave::base_mutex' instead")
+typedef octave::base_mutex octave_base_mutex;
+
+OCTAVE_DEPRECATED ("use 'octave::autolock' instead")
+typedef octave::autolock octave_autolock;
+
+OCTAVE_DEPRECATED ("use 'octave::thread' instead")
+typedef octave::thread octave_thread;
 
 #endif
 
+#endif
+
