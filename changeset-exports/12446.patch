# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1297726925 -3600
#      Tue Feb 15 00:42:05 2011 +0100
# Node ID f899f451fe76b9d5a00219f4ecc1ce71801f08fa
# Parent  98772e4e8a2a5a5ef8f4020c2a6ebf5e1afa45d5
Fix for fltk patch markers (#31801)

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2011-02-14  David Bateman  <dbateman@free.fr>
+
+	* plot/private/__scatter__.m: Correctly set the facevertexcdata and
+	faces properties in the patch objects.
+
 2011-02-14  Marco Caliari <marco.caliari@univr.it>
 
 	* polynomial/spline.m: Allow length(x) == 2 and unsorted x values.
 
 2011-02-13  Konstantinos Poulios  <logari81@gmail.com>
 
 	* plot/legend.m: Ignore outerposition.
 
diff --git a/scripts/plot/private/__scatter__.m b/scripts/plot/private/__scatter__.m
--- a/scripts/plot/private/__scatter__.m
+++ b/scripts/plot/private/__scatter__.m
@@ -163,25 +163,27 @@ function hg = __scatter__ (varargin)
       for i = 1 : numel (x)
         if (filled)
           h = __go_patch__ (hg, "xdata", x(i), "ydata", y(i), "zdata", z(i,:),
                             "faces", 1, "vertices", [x(i), y(i), z(i,:)],
                             "facecolor", "none", "edgecolor", "none",
                             "marker", marker, "markersize", s(i),
                             "markeredgecolor", "none",
                             "markerfacecolor", "flat",
-                            "cdata", c(i,:), "linestyle", "none");
+                            "cdata", c(i,:), "facevertexcdata", c(i,:),
+                            "linestyle", "none");
         else
           h = __go_patch__ (hg, "xdata", x(i), "ydata", y(i), "zdata", z(i,:),
                             "faces", 1, "vertices", [x(i), y(i), z(i,:)],
                             "facecolor", "none", "edgecolor", "none",
                             "marker", marker, "markersize", s(i),
                             "markeredgecolor", "flat",
                             "markerfacecolor", "none",
-                            "cdata", c(i,:), "linestyle", "none");
+                            "cdata", c(i,:), "facevertexcdata", c(i,:),
+                            "linestyle", "none");
 
         endif
       endfor
     endif
 
   else
 
     ## For larger numbers of points, we split the points by common color.
@@ -273,48 +275,50 @@ endfunction
 function h = render_size_color(hg, vert, s, c, marker, filled, isflat)
   if (isscalar (s))
     x = vert(:,1);
     y = vert(:,2);
     z = vert(:,3:end);
     if (ischar (c) || !isflat)
       if (filled)
         h = __go_patch__ (hg, "xdata", x, "ydata", y, "zdata", z,
-                          "faces", 1, "vertices", vert,
+                          "faces", 1:numel(x), "vertices", vert,
                           "facecolor", "none", "edgecolor", "none",
                           "marker", marker,
                           "markeredgecolor", "none",
                           "markerfacecolor", c,
                           "markersize", s, "linestyle", "none");
       else
         h = __go_patch__ (hg, "xdata", x, "ydata", y, "zdata", z,
-                          "faces", 1, "vertices", vert,
+                          "faces", 1:numel(x), "vertices", vert,
                           "facecolor", "none", "edgecolor", "none",
                           "marker", marker,
                           "markeredgecolor", c,
                           "markerfacecolor", "none",
                           "markersize", s, "linestyle", "none");
       endif
     else
       if (filled)
         h = __go_patch__ (hg, "xdata", x, "ydata", y, "zdata", z,
-                          "faces", 1, "vertices", vert,
+                          "faces", 1:numel(x), "vertices", vert,
                           "facecolor", "none", "edgecolor", "none",
                           "marker", marker, "markersize", s,
                           "markeredgecolor", "none",
                           "markerfacecolor", "flat",
-                          "cdata", c, "linestyle", "none");
+                          "cdata", c, "facevertexcdata", c(:),
+                          "linestyle", "none");
       else
         h = __go_patch__ (hg, "xdata", x, "ydata", y, "zdata", z,
-                          "faces", 1, "vertices", vert,
+                          "faces", 1:numel(x), "vertices", vert,
                           "facecolor", "none", "edgecolor", "none",
                           "marker", marker, "markersize", s,
                           "markeredgecolor", "flat",
                           "markerfacecolor", "none",
-                          "cdata", c, "linestyle", "none");
+                          "cdata", c, "facevertexcdata", c(:),
+                          "linestyle", "none");
       endif
     endif
   else
     ## FIXME: round the size to one decimal place. It's not quite right, though.
     [ss, idx] = unique_idx (ceil (s*10) / 10);
     for i = 1:rows (ss)
       h = render_size_color (hg, vert(idx{i},:), ss(i), c,
                              marker, filled, isflat);
@@ -359,18 +363,22 @@ function update_data (h, d)
         set (hlist(i), "vertices", [x1(i), y1(i), z1(i)], "cdata", c1,
              "markersize", size1(i));
       endfor
     endif
   else
     if (isempty (z1))
       for i = 1 : length (hlist)
         set (hlist(i), "vertices", [x1(i), y1(i)], "cdata",
-             reshape(c1(i,:),[1, size(c1)(2:end)]), "markersize", size1(i));
+             reshape(c1(i,:),[1, size(c1)(2:end)]), 
+             "facevertexcdata", c1(i,:),
+             "markersize", size1(i));
       endfor
     else
       for i = 1 : length (hlist)
         set (hlist(i), "vertices", [x1(i), y1(i), z1(i)], "cdata",
-             reshape(c1(i,:),[1, size(c1)(2:end)]), "markersize", size1(i));
+             reshape(c1(i,:),[1, size(c1)(2:end)]), 
+             "facevertexcdata", c1(i,:),
+             "markersize", size1(i));
       endfor
     endif
   endif
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2011-02-14  David Bateman  <dbateman@free.fr>
+
+	* gl-render.cc (void opengl_renderer::draw_patch (
+	const patch::properties &)): Obtain the marker color directly
+	from the cdata rather that the facecolor, as the facecolor might
+	not have been set.
+
 2011-02-14  Konstantinos Poulios  <logari81@googlemail.com>
 
 	* graphics.cc (axes::properties::sync_positions): Calculation of
 	tightinset property.
 
 2011-02-13  Konstantinos Poulios  <logari81@googlemail.com>
 
 	Bugs #31800, #32211.
diff --git a/src/gl-render.cc b/src/gl-render.cc
--- a/src/gl-render.cc
+++ b/src/gl-render.cc
@@ -2344,46 +2344,70 @@ opengl_renderer::draw_patch (const patch
   if (! props.marker_is ("none") &&
       ! (props.markeredgecolor_is ("none") && props.markerfacecolor_is ("none")))
     {
       bool do_edge = ! props.markeredgecolor_is ("none");
       bool do_face = ! props.markerfacecolor_is ("none");
 
       Matrix mecolor = props.get_markeredgecolor_rgb ();
       Matrix mfcolor = props.get_markerfacecolor_rgb ();
-      Matrix cc (1, 3, 0.0);
-
-      if (mecolor.numel () == 0 && props.markeredgecolor_is ("auto"))
+
+      bool has_markerfacecolor = false;
+
+      if ((mecolor.numel () == 0 && ! props.markeredgecolor_is ("none"))
+          || (mfcolor.numel () == 0 && ! props.markerfacecolor_is ("none")))
         {
-          mecolor = props.get_edgecolor_rgb ();
-          do_edge = ! props.edgecolor_is ("none");
+          Matrix mc = props.get_color_data ().matrix_value ();
+
+          if (mc.rows () == 1)
+            {
+              // Single color specifications, we can simplify a little bit
+
+              if (mfcolor.numel () == 0
+                   && ! props.markerfacecolor_is ("none"))
+                mfcolor = mc;
+
+              if (mecolor.numel () == 0
+                   && ! props.markeredgecolor_is ("none"))
+                mecolor = mc;
+            }
+          else
+            {
+              if (c.numel () == 0)
+                c = props.get_color_data ().matrix_value ();
+              has_markerfacecolor = ((c.numel () > 0) 
+                                    && (c.rows () == f.rows ()));
+            }
         }
 
-      if (mfcolor.numel () == 0 && props.markerfacecolor_is ("auto"))
-        {
-          mfcolor = props.get_facecolor_rgb ();
-          do_face = ! props.facecolor_is ("none");
-        }
 
       init_marker (props.get_marker (), props.get_markersize (),
                    props.get_linewidth ());
 
       for (int i = 0; i < nf; i++)
         for (int j = 0; j < count_f(i); j++)
           {
             int idx = int (f(i,j) - 1);
 
             if (clip(idx))
               continue;
 
-            Matrix lc = (do_edge ? (mecolor.numel () == 0 ?
-                                    vdata[i+j*fr].get_rep ()->color : mecolor)
+            Matrix cc;
+            if (c.numel () > 0)
+              {
+                cc.resize (1, 3);
+                if (has_markerfacecolor)
+                  cc(0) = c(i,0), cc(1) = c(i,1), cc(2) = c(i,2);
+                else
+                  cc(0) = c(idx,0), cc(1) = c(idx,1), cc(2) = c(idx,2);
+              }
+
+            Matrix lc = (do_edge ? (mecolor.numel () == 0 ? cc : mecolor)
                          : Matrix ());
-            Matrix fc = (do_face ? (mfcolor.numel () == 0 ?
-                                    vdata[i+j*fr].get_rep ()->color : mfcolor)
+            Matrix fc = (do_face ? (mfcolor.numel () == 0 ? cc : mfcolor)
                          : Matrix ());
 
             draw_marker (v(idx,0), v(idx,1), (has_z ? v(idx,2) : 0), lc, fc);
           }
 
       end_marker ();
     }
 }
