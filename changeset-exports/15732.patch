# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1354744433 18000
#      Wed Dec 05 16:53:53 2012 -0500
# Node ID 82b0ad43a9393fbddb91a19ec860085db72a13b0
# Parent  18f168880226bf091cf44dd857fc87346173906c
num2str: Take into account inf inputs. Add tests for inf and NaN

diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -78,18 +78,24 @@ function retval = num2str (x, arg)
         fmt = arg;
       elseif (isnumeric (arg) && isscalar (arg) && arg >= 0)
         fmt = sprintf ("%%%d.%dg", arg+7, arg);
       else
         error ("num2str: PRECISION must be a scalar integer >= 0");
       endif
     else
       if (isnumeric (x))
-        ## Setup a suitable format string
-        dgt = floor (log10 (max (abs (x(:)))));
+        ## Setup a suitable format string, ignoring inf entries
+        dgt = floor (log10 (max (abs (x(!isinf (x(:)))))));
+
+        ## If the whole input array is inf...
+        if (isempty (dgt))
+          dgt = 0;
+        endif
+
         if (any (x(:) != fix (x(:))))
           ## Floating point input
           dgt = max (dgt + 4, 5);   # Keep 4 sig. figures after decimal point
           dgt = min (dgt, 16);      # Cap significant digits at 16
           fmt = sprintf ("%%%d.%dg", dgt+7+any (x(:) < 0), dgt);
         else
           ## Integer input
           dgt = max (dgt + 1, 1);
@@ -164,16 +170,18 @@ endfunction
 %!assert (num2str (1.234 + 27.3i), "1.234+27.3i")
 %!assert (num2str ([true false true]), "1  0  1");
 
 %!assert (num2str (19440606), "19440606")
 %!assert (num2str (2^33), "8589934592")
 %!assert (num2str (-2^33), "-8589934592")
 %!assert (num2str (2^33+1i), "8589934592+1i")
 %!assert (num2str (-2^33+1i), "-8589934592+1i")
+%!assert (num2str (inf), "Inf")
+%!assert (num2str (nan), "NaN")
 
 ## FIXME: Integers greater than bitmax() should be masked to show just
 ##        16 digits of precision.
 %!xtest
 %! assert (num2str (1e23), "100000000000000000000000");
 
 %!error num2str ()
 %!error num2str (1, 2, 3)
