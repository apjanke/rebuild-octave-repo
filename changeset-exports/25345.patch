# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1525326664 14400
#      Thu May 03 01:51:04 2018 -0400
# Node ID ce6f7a5cd68e83ee9b1ad1319638a8a44a709d88
# Parent  4d3ce214da32167619be637f238e40a2d91a639c
avoid global access of load path in interpreter class

* interpreter.h, interpreter.cc (execute_pkg_add): Now a member
function in the interpreter class.
(interpreter::initialize_load_path): Use lambda expression to wrap
interpreter::execute_pkg_add and set as load_path add_hook function.

diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -312,37 +312,16 @@ safe_source_file (const std::string& fil
       octave::interpreter::recover_from_exception ();
 
       return 1;
     }
 
   return 0;
 }
 
-static void
-execute_pkg_add (const std::string& dir)
-{
-  std::string file_name = octave::sys::file_ops::concat (dir, "PKG_ADD");
-
-  octave::load_path& lp = octave::__get_load_path__ ("execute_pkg_add");
-
-  try
-    {
-      lp.execute_pkg_add (dir);
-    }
-  catch (const octave::interrupt_exception&)
-    {
-      octave::interpreter::recover_from_exception ();
-    }
-  catch (const octave::execution_exception&)
-    {
-      octave::interpreter::recover_from_exception ();
-    }
-}
-
 namespace octave
 {
   // Create an interpreter object and perform initialization up to the
   // point of setting reading command history and setting the load
   // path.
 
   interpreter::interpreter (application *app_context)
     : m_app_context (app_context),
@@ -599,17 +578,18 @@ namespace octave
         // be evaluated from the normal intepreter loop where exceptions
         // are already handled.
 
         unwind_protect frame;
 
         frame.add_method (m_load_path, &load_path::set_add_hook,
                           m_load_path.get_add_hook ());
 
-        m_load_path.set_add_hook (execute_pkg_add);
+        m_load_path.set_add_hook ([this] (const std::string& dir)
+                                  { this->execute_pkg_add (dir); });
 
         m_load_path.initialize (set_initial_path);
 
         m_load_path_initialized = true;
       }
   }
 
   // This may be called separately from execute
@@ -1302,9 +1282,25 @@ namespace octave
     Fsave_default_options (octave_value ("-mat-binary"));
     Fstruct_levels_to_print (octave_value (0));
 
     disable_warning ("Octave:abbreviated-property-match");
     disable_warning ("Octave:data-file-in-path");
     disable_warning ("Octave:function-name-clash");
     disable_warning ("Octave:possible-matlab-short-circuit-operator");
   }
+
+  void interpreter::execute_pkg_add (const std::string& dir)
+  {
+    try
+      {
+        m_load_path.execute_pkg_add (dir);
+      }
+    catch (const octave::interrupt_exception&)
+      {
+        octave::interpreter::recover_from_exception ();
+      }
+    catch (const octave::execution_exception&)
+      {
+        octave::interpreter::recover_from_exception ();
+      }
+  }
 }
diff --git a/libinterp/corefcn/interpreter.h b/libinterp/corefcn/interpreter.h
--- a/libinterp/corefcn/interpreter.h
+++ b/libinterp/corefcn/interpreter.h
@@ -290,16 +290,18 @@ namespace octave
 
     bool m_load_path_initialized;
 
     bool m_history_initialized;
 
     bool m_initialized;
 
     void maximum_braindamage (void);
+
+    void execute_pkg_add (const std::string& dir);
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
 OCTAVE_DEPRECATED (4.4, "use 'octave::interpreter::recover_from_exception' instead")
 static inline void
 recover_from_exception (void)
