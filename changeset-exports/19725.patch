# HG changeset patch
# User Rik <rik@octave.org>
# Date 1424134305 28800
#      Mon Feb 16 16:51:45 2015 -0800
# Node ID 5f2c0ca0ef517771fcc8efb727045021c4f088e8
# Parent  abc158e7122ea4e727a8cbefd3b5068d2b9507fe
Ensure that numbers passed to integer *printf format codes are integers (bug #44245).


* num2str.m, validateattributes.m, inputname.m, stemleaf.m, print.m,
__ghostscript__.m, __gnuplot_print__.m, __go_draw_axes__.m,
__go_draw_figure__.m, bicg.m, qmr.m, mat2str.m, validatestring.m, assert.m:
Ensure that numbers passed to integer *printf format codes are integers.

diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -78,17 +78,17 @@ function retval = num2str (x, arg)
   if (ischar (x))
     retval = x;
   elseif (isempty (x))
     retval = "";
   elseif (isreal (x))
     if (nargin == 2)
       if (ischar (arg))
         fmt = arg;
-      elseif (isnumeric (arg) && isscalar (arg) && arg >= 0)
+      elseif (isnumeric (arg) && isscalar (arg) && arg >= 0 && arg == fix (arg))
         fmt = sprintf ("%%%d.%dg", arg+7, arg);
       else
         error ("num2str: PRECISION must be a scalar integer >= 0");
       endif
     else
       if (isnumeric (x))
         ## Setup a suitable format string, ignoring inf entries
         dgt = floor (log10 (max (abs (x(!isinf (x(:)))))));
@@ -117,17 +117,17 @@ function retval = num2str (x, arg)
     fmt = [deblank(repmat(fmt, 1, columns(x))), "\n"];
     nd = ndims (x);
     tmp = sprintf (fmt, permute (x, [2, 1, 3:nd]));
     retval = strtrim (char (ostrsplit (tmp(1:end-1), "\n")));
   else   # Complex matrix input
     if (nargin == 2)
       if (ischar (arg))
         fmt = [arg "%-+" arg(2:end) "i"];
-      elseif (isnumeric (arg) && isscalar (arg) && arg >= 0)
+      elseif (isnumeric (arg) && isscalar (arg) && arg >= 0 && arg == fix (arg))
         fmt = sprintf ("%%%d.%dg%%-+%d.%dgi", arg+7, arg, arg+7, arg);
       else
         error ("num2str: PRECISION must be a scalar integer >= 0");
       endif
     else
       ## Setup a suitable format string
       dgt = floor (log10 (max (max (abs (real (x(!isinf (real (x(:))))))),
                                max (abs (imag (x(!isinf (imag (x(:))))))))));
diff --git a/scripts/general/validateattributes.m b/scripts/general/validateattributes.m
--- a/scripts/general/validateattributes.m
+++ b/scripts/general/validateattributes.m
@@ -322,17 +322,17 @@ function validateattributes (A, cls, att
     endswitch
     if (problem)
       error ("%s must be %s", err_ini, attr{idx-1});
     endif
   endwhile
 endfunction
 
 function retval = valid_arg_idx (arg)
-  retval = isnumeric (arg) && isscalar (arg) && arg > 0 && ceil (arg) == arg;
+  retval = isnumeric (arg) && isscalar (arg) && arg > 0 && arg == fix (arg);
 endfunction
 
 function cls = replace_cl_group (cls, name, group)
   num_pos = strcmpi (cls, name);
   if (any (num_pos))
     cls(num_pos) = [];
     cls(end+1:end+numel(group)) = group;
   endif
diff --git a/scripts/miscellaneous/inputname.m b/scripts/miscellaneous/inputname.m
--- a/scripts/miscellaneous/inputname.m
+++ b/scripts/miscellaneous/inputname.m
@@ -30,17 +30,17 @@
 ## @end deftypefn
 
 function s = inputname (n)
 
   if (nargin != 1)
     print_usage ();
   endif
 
-  s = evalin ("caller", sprintf ("__varval__ (\".argn.\"){%d};", n));
+  s = evalin ("caller", sprintf ("__varval__ (\".argn.\"){%d};", fix (n)));
   ## For compatibility with Matlab,
   ## return empty string if argument name is not a valid identifier.
   if (! isvarname (s))
     s = "";
   endif
 
 endfunction
 
diff --git a/scripts/plot/draw/stemleaf.m b/scripts/plot/draw/stemleaf.m
--- a/scripts/plot/draw/stemleaf.m
+++ b/scripts/plot/draw/stemleaf.m
@@ -180,17 +180,17 @@ function plotstr = stemleaf (x, caption,
   xs = sort (x);                # Note that sort preserves -0
   mdidx = fix ((nx + 1)/2);     # median index
   hlidx = fix ((mdidx + 1)/2);  # lower hinge index
   huidx = fix (nx + 1 - hlidx); # upper hinge index
   md = xs(mdidx);               # median
   hl = xs(hlidx);               # lower hinge
   hu = xs(huidx);               # upper hinge
   h_spread = hu - hl;           # h_spread: difference between hinges
-  step = fix(1.5*h_spread);     # step: 1.5 * h_spread
+  step = fix (1.5*h_spread);    # step: 1.5 * h_spread
   i_fence_l = hl - step;        # inner fences: outside hinges + step
   o_fence_l = hl - 2*step;      # outer fences: outside hinges + 2*step
   i_fence_h = hu + step;
   o_fence_h = hu + 2*step;
   n_out_l   = sum (x<i_fence_l) - sum (x<o_fence_l);
   n_out_h   = sum (x>i_fence_h) - sum (x>o_fence_h);
   n_far_l   = sum (x<o_fence_l);
   n_far_h   = sum (x>o_fence_h);
diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -537,17 +537,17 @@ function cmd = epstool (opts, filein, fi
           case "pict"
             cmd = sprintf ("--add-%s-preview --mac-single", opts.preview);
           otherwise
             error ("print:invalidpreview",
                    "print.m: epstool cannot include preview for format '%s'",
                    opts.preview);
         endswitch
         if (! isempty (opts.ghostscript.resolution))
-          cmd = sprintf ("%s --dpi %d", cmd, opts.ghostscript.resolution);
+          cmd = sprintf ("%s --dpi %d", cmd, fix (opts.ghostscript.resolution));
         endif
       else
         cmd = "";
       endif
       if (! isempty (cmd))
         cmd = sprintf ("%s --quiet %s %s %s ", opts.epstool_binary,
                        cmd, filein, fileout);
       endif
@@ -656,17 +656,17 @@ function latex_standalone (opts)
     case {"pslatexstandalone"}
       packages = "\\usepackage{epsfig,color}";
       graphicsfile = strcat (opts.name, "-inc.ps");
     otherwise
       packages = "\\usepackage{epsfig,color}";
       graphicsfile = strcat (opts.name, "-inc.eps");
   endswitch
   papersize = sprintf ("\\usepackage[papersize={%.2fbp,%.2fbp},text={%.2fbp,%.2fbp}]{geometry}",
-                       opts.canvas_size, opts.canvas_size);
+                       fix (opts.canvas_size), fix (opts.canvas_size));
   prepend = {"\\documentclass{minimal}";
              packages;
              papersize;
              "\\begin{document}";
              "\\centering"};
   postpend = {"\\end{document}"};
   fid = fopen (latexfile, "r");
   if (fid >= 0)
diff --git a/scripts/plot/util/private/__ghostscript__.m b/scripts/plot/util/private/__ghostscript__.m
--- a/scripts/plot/util/private/__ghostscript__.m
+++ b/scripts/plot/util/private/__ghostscript__.m
@@ -64,25 +64,25 @@ function [gs_cmd, cleanup_cmd] = __ghost
     format_for_printer = false;
   else
     format_for_printer = true;
   endif
 
   gs_opts = sprintf ("-dQUIET -dNOPAUSE -dBATCH -dSAFER -sDEVICE=%s", opts.device);
 
   if (! isempty (opts.level) && ismember (opts.level, [1, 2, 3]))
-    gs_opts = sprintf ("%s -dLanguageLevel=%d", gs_opts, round (opts.level));
+    gs_opts = sprintf ("%s -dLanguageLevel=%d", gs_opts, opts.level);
   endif
 
   if (opts.antialiasing && isempty (strfind (opts.device, "write")))
     ## Apply anti-aliasing to all bitmap formats/devices
     gs_opts = sprintf ("%s -dTextAlphaBits=%d -dGraphicsAlphaBits=%d",
-                       gs_opts, opts.antialiasing_textalphabits,
-                       opts.antialiasing_graphicsalphabits);
-    gs_opts = sprintf ("%s -r%dx%d", gs_opts, [1, 1] * opts.resolution);
+                       gs_opts, fix (opts.antialiasing_textalphabits),
+                       fix (opts.antialiasing_graphicsalphabits));
+    gs_opts = sprintf ("%s -r%dx%d", gs_opts, fix ([1, 1] * opts.resolution));
   elseif (any (strcmp (opts.device, {"pswrite", "ps2write", "pdfwrite"})))
     gs_opts = sprintf ("%s -dEmbedAllFonts=true", gs_opts);
     if (strcmp (opts.device, "pdfwrite"))
       ## Optimize for loading
       gs_opts = sprintf ("%s -dOptimize=true", gs_opts);
     endif
   endif
 
@@ -90,30 +90,30 @@ function [gs_cmd, cleanup_cmd] = __ghost
     ## papersize is specified by the eps bbox
     gs_opts = sprintf ("%s -dEPSCrop", gs_opts);
   endif
   if (format_for_printer)
     if (ischar (opts.papersize))
       gs_opts = sprintf ("%s -sPAPERSIZE=%s", gs_opts, opts.papersize);
     elseif (isnumeric (opts.papersize) && numel (opts.papersize) == 2)
       gs_opts = sprintf ("%s -dDEVICEWIDTHPOINTS=%d -dDEVICEHEIGHTPOINTS=%d",
-                         gs_opts, opts.papersize);
+                         gs_opts, fix (opts.papersize));
       if (opts.papersize(1) > opts.papersize(2))
         ## Lanscape mode: This option will result in automatic rotation of the
         ##                document page if the requested page size matches one
         ##                of the default page sizes
         gs_opts = sprintf ("%s -dNORANGEPAGESIZE", gs_opts);
       endif
     else
       error ("print:badpapersize", "__ghostscript__.m: invalid 'papersize'");
     endif
     gs_opts = sprintf ("%s -dFIXEDMEDIA", gs_opts);
     ## "pageoffset" is relative to the coordinates, not the BBox LLHC.
     str = sprintf ("%s [%d %d] %s", "<< /Margins [0 0] /.HWMargins [0 0 0 0] /PageOffset",
-                   opts.pageoffset, ">> setpagedevice");
+                   fix (opts.pageoffset), ">> setpagedevice");
     offset_ps = {"%!PS-Adobe-3.0", str, "%%EOF"};
     if (isfield (opts, "offsetfile"))
       offsetfile = opts.offsetfile;
       cleanup_cmd = "";
     else
       offsetfile = [tempname() ".ps"];
       if (dos_shell)
         cleanup_cmd = ["del " strrep(offsetfile, '/', '\')];
diff --git a/scripts/plot/util/private/__gnuplot_print__.m b/scripts/plot/util/private/__gnuplot_print__.m
--- a/scripts/plot/util/private/__gnuplot_print__.m
+++ b/scripts/plot/util/private/__gnuplot_print__.m
@@ -215,16 +215,18 @@ function f = font_spec (opts, varargin)
       if (! isempty (opts.font) && ! isempty (opts.fontsize))
         f = sprintf ('font "%s,%d"', opts.font, 2 * opts.fontsize);
       elseif (! isempty (opts.font))
         f = sprintf ('font "%s"', opts.font);
       elseif (! isempty (opts.fontsize))
         f = sprintf ("%d", 2 * opts.fontsize);
       endif
     case "svg"
+      ## FIXME: Why does svg format use round on the fontsize while
+      ##        other terminals don't?
       if (! isempty (opts.font) && ! isempty (opts.fontsize))
         fontsize = round (opts.fontsize * 0.75);
         f = sprintf ('fname "%s" fsize %d', opts.font, fontsize);
       elseif (! isempty (opts.font))
         f = sprintf ('fname "%s"', opts.font);
       elseif (! isempty (opts.fontsize))
         fontsize = round (opts.fontsize * 0.75);
         f = sprintf ("%s fsize %d", f, fontsize);
diff --git a/scripts/plot/util/private/__go_draw_axes__.m b/scripts/plot/util/private/__go_draw_axes__.m
--- a/scripts/plot/util/private/__go_draw_axes__.m
+++ b/scripts/plot/util/private/__go_draw_axes__.m
@@ -612,29 +612,29 @@ function __go_draw_axes__ (h, plot_strea
           is_image_data(data_idx) = is_image_data(data_idx - 1);
           parametric(data_idx) = parametric(data_idx - 1);
           have_cdata(data_idx) = have_cdata(data_idx - 1);
           have_3d_patch(data_idx) = have_3d_patch(data_idx - 1);
           titlespec{data_idx} = "title \"\"";
           usingclause{data_idx} = usingclause{data_idx - 1};
           data{data_idx} = data{data_idx - 1};
           withclause{data_idx} = sprintf ("with %s linestyle %d",
-                                        style{2}, data_idx);
+                                          style{2}, data_idx);
         endif
         if (length (style) > 2)
           data_idx++;
           is_image_data(data_idx) = is_image_data(data_idx - 1);
           parametric(data_idx) = parametric(data_idx - 1);
           have_cdata(data_idx) = have_cdata(data_idx - 1);
           have_3d_patch(data_idx) = have_3d_patch(data_idx - 1);
           titlespec{data_idx} = "title \"\"";
           usingclause{data_idx} = usingclause{data_idx - 1};
           data{data_idx} = data{data_idx - 1};
           withclause{data_idx} = sprintf ("with %s linestyle %d",
-                                        style{3}, data_idx);
+                                          style{3}, data_idx);
         endif
 
      case "patch"
        cmap = parent_figure_obj.colormap;
        [nr, nc] = size (obj.xdata);
 
        if (! isempty (obj.cdata))
          cdat = obj.cdata;
@@ -1777,16 +1777,18 @@ endfunction
 
 function spacing_spec = create_spacingspec (f, s, gp_term)
   # The gnuplot default font size is 10, and default spacing is 1.25.
   # gnuplot has a concept of a figure global font, and sizes everything
   # appropriate to that, including the legend spacing.
   #
   # This means that if an alternative size is used, gnuplot will use an
   # inappropriate spacing in the legend by default.
+  ## FIXME: Are fractional spacing specifications allowed?  Or should this
+  ##        number be rounded?
   spc = s / 10 * 1.25;
   spacing_spec = sprintf ("spacing %d", spc);
 
 endfunction
 
 function fontspec = create_fontspec (f, s, gp_term)
   if (strcmp (f, "*") || strcmp (gp_term, "tikz"))
     fontspec = sprintf ("font \",%d\"", s);
diff --git a/scripts/plot/util/private/__go_draw_figure__.m b/scripts/plot/util/private/__go_draw_figure__.m
--- a/scripts/plot/util/private/__go_draw_figure__.m
+++ b/scripts/plot/util/private/__go_draw_figure__.m
@@ -33,17 +33,17 @@ function __go_draw_figure__ (h, plot_str
 
     if (nkids > 0)
       fputs (plot_stream, "\nreset;\n");
       fputs (plot_stream, "set autoscale keepfix;\n");
       fputs (plot_stream, "set origin 0, 0\n");
       fputs (plot_stream, "set size 1, 1\n");
       bg = get (h, "color");
       if (isnumeric (bg))
-        fprintf (plot_stream, "set obj 1 rectangle from screen 0,0 to screen 1,1 behind fc rgb \"#%02x%02x%02x\"\n", 255 * bg);
+        fprintf (plot_stream, "set obj 1 rectangle from screen 0,0 to screen 1,1 behind fc rgb \"#%02x%02x%02x\"\n", round (255 * bg));
         bg_is_set = true;
       else
         bg_is_set = false;
       endif
       fg_was_set = false;
 
       for i = nkids:-1:1
         type = get (kids(i), "type");
@@ -109,17 +109,17 @@ function __go_draw_figure__ (h, plot_str
                       else
                         toberm = [toberm, line("xdata",[0,0],"ydata",[0,0], "color", get(ll,"color"), "linestyle", get(ll,"linestyle"), "marker", "none", "displayname", displayname, "parent", kids(i))];
                       endif
                     elseif (! isempty (lm))
                       toberm = [toberm, line("xdata",[0,0],"ydata",[0,0], "color", get(lm,"color"), "linestyle", "none", "marker", get(lm,"marker"), "markeredgecolor", get(lm,"markeredgecolor"), "markerfacecolor", get(lm,"markerfacecolor"), "markersize", get (lm, "markersize"), "displayname", displayname, "parent", kids(i))];
                     endif
                   endfor
                   if (bg_is_set)
-                    fprintf (plot_stream, "set border linecolor rgb \"#%02x%02x%02x\"\n", 255 * (1 - bg));
+                    fprintf (plot_stream, "set border linecolor rgb \"#%02x%02x%02x\"\n", round (255 * (1 - bg)));
                   endif
                   __go_draw_axes__ (kids(i), plot_stream, enhanced, mono,
                                     bg_is_set, false, hlgnd);
                 unwind_protect_cleanup
                   ## Return axes "units" and "position" back to
                   ## their original values.
                   set (ca, "units", orig_axes_units);
                   set (kids(i), "units", legend_axes_units,
@@ -135,28 +135,28 @@ function __go_draw_figure__ (h, plot_str
               ## Rely upon listener to convert axes position
               ## to "normalized" units.
               orig_axes_units = get (kids(i), "units");
               orig_axes_position = get (kids(i), "position");
               unwind_protect
                 set (kids(i), "units", "normalized");
                 fg = get (kids(i), "color");
                 if (isnumeric (fg) && strcmp (get (kids(i), "visible"), "on"))
-                  fprintf (plot_stream, "set obj 2 rectangle from graph 0,0 to graph 1,1 behind fc rgb \"#%02x%02x%02x\"\n", 255 * fg);
+                  fprintf (plot_stream, "set obj 2 rectangle from graph 0,0 to graph 1,1 behind fc rgb \"#%02x%02x%02x\"\n", round (255 * fg));
                   fg_is_set = true;
                   fg_was_set = true;
                 elseif (fg_was_set)
                   fprintf (plot_stream, "unset obj 2\n");
                   fg_is_set = false;
                   fg_was_set = false;
                 else
                   fg_is_set = false;
                 endif
                 if (bg_is_set)
-                  fprintf (plot_stream, "set border linecolor rgb \"#%02x%02x%02x\"\n", 255 * (1 - bg));
+                  fprintf (plot_stream, "set border linecolor rgb \"#%02x%02x%02x\"\n", round (255 * (1 - bg)));
                 endif
                 ## Find if this axes has an associated legend axes and pass it
                 ## to __go_draw_axes__
                 hlegend = [];
                 fkids = get (h, "children");
                 for j = 1 : numel (fkids)
                   if (ishandle (fkids (j))
                       && strcmp (get (fkids (j), "type"), "axes")
diff --git a/scripts/sparse/bicg.m b/scripts/sparse/bicg.m
--- a/scripts/sparse/bicg.m
+++ b/scripts/sparse/bicg.m
@@ -93,16 +93,18 @@ function [x, flag, res1, k, resvec] = bi
     endif
 
     if (nargin < 3 || isempty (tol))
       tol = 1e-6;
     endif
 
     if (nargin < 4 || isempty (maxit))
       maxit = min (rows (b), 20);
+    else
+      maxit = fix (maxit);
     endif
 
     if (nargin < 5 || isempty (M1))
       M1m1x = @(x, ignore) x;
       M1tm1x = M1m1x;
     elseif (ischar (M1))
       fun = str2func (M1);
       M1m1x  = @(x) feval (fun, x, "notransp");
diff --git a/scripts/sparse/qmr.m b/scripts/sparse/qmr.m
--- a/scripts/sparse/qmr.m
+++ b/scripts/sparse/qmr.m
@@ -107,16 +107,18 @@ function [x, flag, relres, iter, resvec]
     endif
 
     if (nargin < 3 || isempty (tol))
       tol = 1e-6;
     endif
 
     if (nargin < 4 || isempty (maxit))
       maxit = min (rows (b), 20);
+    else
+      maxit = fix (maxit);
     endif
 
     if (nargin < 5 || isempty (M1))
       M1m1x = @(x, ignore) x;
       M1tm1x = M1m1x;
     elseif (ischar (M1))
       fun = str2func (M1);
       M1m1x  = @(x) feval (fun, x, "notransp");
diff --git a/scripts/strings/mat2str.m b/scripts/strings/mat2str.m
--- a/scripts/strings/mat2str.m
+++ b/scripts/strings/mat2str.m
@@ -65,16 +65,20 @@ function s = mat2str (x, n = 15, cls = "
     error ("mat2str: X must be two dimensional");
   endif
 
   if (nargin == 2 && ischar (n))
     cls = n;
     n = 15;
   elseif (isempty (n))
     n = 15;   # Default precision
+  elseif (numel (n) > 2)
+    error ("mat2str: N must have only 1 or 2 elements");
+  else
+    n = fix (n);
   endif
 
   x_islogical = islogical (x);
   x_iscomplex = iscomplex (x);
 
   if (x_iscomplex)
     if (isscalar (n))
       n = [n, n];
@@ -139,9 +143,10 @@ endfunction
 %!assert (mat2str (false), "false")
 %!assert (mat2str (logical (eye (2))), "[true false;false true]")
 
 %% Test input validation
 %!error mat2str ()
 %!error mat2str (1,2,3,4)
 %!error mat2str (["Hello"])
 %!error <X must be two dimensional> mat2str (ones (3,3,2))
+%!error <N must have only 1 or 2 elements> mat2str (ones (3,3), [1 2 3])
 
diff --git a/scripts/strings/validatestring.m b/scripts/strings/validatestring.m
--- a/scripts/strings/validatestring.m
+++ b/scripts/strings/validatestring.m
@@ -62,17 +62,17 @@ function str = validatestring (str, stra
 
   if (nargin < 2 || nargin > 5)
     print_usage ();
   endif
 
   position = 0;
   ## Process input arguments
   if (! isempty (varargin) && isnumeric (varargin{end}))
-    position = varargin{end};
+    position = fix (varargin{end});
     varargin(end) = [];
   endif
 
   funcname = varname = "";
   char_idx = cellfun ("isclass", varargin, "char");
   n_chararg = sum (char_idx);
   if (n_chararg > 2)
     error ("validatestring: invalid number of character inputs (3)");
diff --git a/scripts/testfun/assert.m b/scripts/testfun/assert.m
--- a/scripts/testfun/assert.m
+++ b/scripts/testfun/assert.m
@@ -636,17 +636,17 @@ endfunction
 %!error assert (1,2,3,4)
 
 
 ## Convert all error indices into tuple format
 function cout = ind2tuple (matsize, erridx)
 
   cout = cell (numel (erridx), 1);
   tmp = cell (1, numel (matsize));
-  [tmp{:}] = ind2sub (matsize, erridx (:));
+  [tmp{:}] = ind2sub (matsize, erridx(:));
   subs = [tmp{:}];
   if (numel (matsize) == 2)
     subs = subs(:, matsize != 1);
   endif
   for i = 1:numel (erridx)
     loc = sprintf ("%d,", subs(i,:));
     cout{i} = ["(" loc(1:end-1) ")"];
   endfor
