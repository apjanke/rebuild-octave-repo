# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1362679739 18000
#      Thu Mar 07 13:08:59 2013 -0500
# Node ID 70c47da7e02b3002eeb76d3777b4f473d13ba5af
# Parent  6fe6ac8bbfdb0e3f1a926de723f5b07453dc911a
# Parent  ee041a93c75539dafdaaacc3b2b886481dcf59f0
maint: periodic merge of stable to default

diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -173,28 +173,28 @@ A
      @print{}    1   2   3
      @print{}    4   5   6
      @print{}    7   8   9
 @end group
 @end example
 
 @DOCSTRING(save)
 
-@DOCSTRING(load)
-
-@DOCSTRING(fileread)
-
 There are three functions that modify the behavior of @code{save}.
 
 @DOCSTRING(default_save_options)
 
 @DOCSTRING(save_precision)
 
 @DOCSTRING(save_header_format_string)
 
+@DOCSTRING(load)
+
+@DOCSTRING(fileread)
+
 @DOCSTRING(native_float_format)
 
 It is possible to write data to a file in a similar way to the
 @code{disp} function for writing data to the screen.  The @code{fdisp}
 works just like @code{disp} except its first argument is a file pointer
 as created by @code{fopen}.  As an example, the following code writes
 to data @samp{myfile.txt}.
 
diff --git a/doc/interpreter/testfun.txi b/doc/interpreter/testfun.txi
--- a/doc/interpreter/testfun.txi
+++ b/doc/interpreter/testfun.txi
@@ -262,16 +262,55 @@ in the log file but not executed.  For e
 @group
 %!#demo
 %! @var{t} = [0:0.01:2*pi]; @var{x} = sin (@var{t});
 %! plot (@var{t}, @var{x});
 %! # you should now see a sine wave in your figure window
 @end group
 @end example
 
+@noindent
+The following trivial code snippet provides examples for the use of
+fail, assert, error and xtest:
+
+@example
+@group
+function output = must_be_zero (@var{input})
+  if (@var{input} != 0)
+    error ("Non-zero input!")
+  endif
+  output = input;
+endfunction
+
+%!fail ("must_be_zero (1)");
+%!assert (must_be_zero (0), 0);
+%!error <Non-zero> must_be_zero (1);
+%!xtest error ("This code generates an error");
+@end group
+@end example
+
+@noindent
+When putting this a file @file{must_be_zero.m}, and running the test, we see
+
+@example
+@group
+test must_be_zero verbose
+
+@result{}
+>>>>> /path/to/must_be_zero.m
+  ***** fail ("must_be_zero (1)");
+  ***** assert (must_be_zero (0), 0);
+  ***** error <Non-zero> must_be_zero (1);
+  ***** xtest error ("This code generates an error");
+!!!!! known failure
+This code generates an error
+PASSES 4 out of 4 tests (1 expected failures)
+@end group
+@end example
+
 @subsubheading Block type summary:
 
 @table @code
 @item %!test
 check that entire block is correct
 
 @item %!testif HAVE_XXX
 check block only if Octave was compiled with feature HAVE_XXX.
diff --git a/scripts/testfun/fail.m b/scripts/testfun/fail.m
--- a/scripts/testfun/fail.m
+++ b/scripts/testfun/fail.m
@@ -24,20 +24,29 @@
 ## @deftypefnx {Function File} {} fail (@var{code}, @var{pattern})
 ## @deftypefnx {Function File} {} fail (@var{code}, "warning", @var{pattern})
 ##
 ## Return true if @var{code} fails with an error message matching
 ## @var{pattern}, otherwise produce an error.  Note that @var{code}
 ## is a string and if @var{code} runs successfully, the error produced is:
 ##
 ## @example
-##           expected error but got none
+##           expected error <.> but got none
 ## @end example
 ##
-## If the code fails with a different error, the message produced is:
+##
+## Code must be in the form of a string that may be passed by
+## @code{fail} to the Octave interpreter via the @code{evalin} function,
+## that is, a (quoted) string constant or a string variable.
+##
+## If called with two arguments, the behavior is similar to
+## @code{fail (@var{code})}, except the return value will only be true if
+## code fails with an error message containing pattern (case sensitive).
+## If the code fails with a different error to that given in pattern,
+## the message produced is:
 ##
 ## @example
 ## @group
 ##           expected <pattern>
 ##           but got <text of actual error>
 ## @end group
 ## @end example
 ##
