# HG changeset patch
# User jwe
# Date 746722495 0
#      Mon Aug 30 14:54:55 1993 +0000
# Node ID f3c9042fd6094954b10b91f677f584d84c503d53
# Parent  2d480148756bb4ab1cda651be0711ec2f2fd710c
[project @ 1993-08-30 14:49:08 by jwe]

diff --git a/scripts/control/are.m b/scripts/control/are.m
--- a/scripts/control/are.m
+++ b/scripts/control/are.m
@@ -1,23 +1,25 @@
 function x = are (a, b, c, opt)
 
-# usage: x = are (a, b, c {,opt})
+# Usage: x = are (a, b, c {,opt})
 #
 # Solves algebraic riccati equation
 #
 #   a' x + x a - x b x + c = 0
 #
 # for identically dimensioned square matrices a, b, c.  If b (c) is not
 # square, then the function attempts to use b * b' (c' * c) instead.
 #
 # opt is an option passed to the eigenvalue balancing routine; default
 # is `B'. 
 #
-# see also: balance
+# See also: balance
+
+# Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
 
   if (nargin == 3 || nargin == 4)
     if (nargin == 4)
       if (! (strcmp (opt, "N") || strcmp (opt, "P") ...
 	     || strcmp (opt, "S") || strcmp (opt, "B") ...
 	     || strcmp (opt, "n") || strcmp (opt, "p") ...
 	     || strcmp (opt, "s") || strcmp (opt, "b")))
 	printf ("warning: are: opt has an illegal value; setting to B");
diff --git a/scripts/control/is_controllable.m b/scripts/control/is_controllable.m
--- a/scripts/control/is_controllable.m
+++ b/scripts/control/is_controllable.m
@@ -1,25 +1,29 @@
-function retval = is_controllable (a,b,tol)
+function retval = is_controllable (a, b, tol)
 
-# usage: is_controllable (a,b{,tol})
+# Usage: is_controllable (a, b {,tol})
 #
 # Returns 1 if the pair (a, b) is controllable, or 0 if not.
 #
 # See also: size, rows, columns, length, is_matrix, is_scalar, is_vector
-
+#
 # This should really use the method below, but I'm being lazy for now:
 #
 # Controllability is determined by applying Arnoldi iteration with
 # complete re-orthogonalization to obtain an orthogonal basis of the
-# Krylov subspace
+# Krylov subspace.
+#
+# (FIX ME... The Krylov subspace approach is not done yet!)
 #                      n-1
 #   span ([b,a*b,...,a^   b]).
 #
-# tol is a roundoff paramter, set to 2*eps if omitted
+# tol is a roundoff paramter, set to 2*eps if omitted.
+
+# Written by A. S. Hodel (scotte@eng.auburn.edu) August, 1993.
 
   if (nargin == 2 || nargin == 3)
 
     n = is_square (a);
     [nr, nc] = size (b);
 
     if (n == 0 || n != nr || nc == 0)
       retval = 0;
diff --git a/scripts/control/lyap.m b/scripts/control/lyap.m
--- a/scripts/control/lyap.m
+++ b/scripts/control/lyap.m
@@ -1,11 +1,11 @@
 function x = lyap (a, b, c)
 
-# usage: x = lyap (a, b {,c})
+# Usage: x = lyap (a, b {,c})
 #
 # If (a, b, c) are specified, then lyap returns the solution of the
 # Sylvester equation
 #
 #   a x + x b + c = 0
 #
 # If only (a, b) are specified, then lyap returns the solution of the 
 # Lyapunov equation
@@ -16,16 +16,21 @@ function x = lyap (a, b, c)
 #
 #   a' x + x a + b' b = 0 	
 #
 # or
 #
 #   a x + x a' + b b' = 0
 #
 # whichever is appropriate.
+#
+# Solves by using the Bartels-Stewart algorithm (1972).
+
+# Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
+  
 
   if (nargin != 3 && nargin != 2)
     error ("usage: lyap (a, b {,c})");
   endif
 
   if ((n = is_square(a)) == 0)
     error ("lyap: a is not square");
   endif
@@ -63,20 +68,20 @@ function x = lyap (a, b, c)
   else 
 
 # Check dimensions.
 
     if ((m = is_square (b)) == 0)
       error ("lyap: b must be square in a sylvester equation");
     endif
 
-    [n1,m1] = size(c);
+    [n1, m1] = size(c);
 
     if (n != n1 || m != m1)
       error("lyap: a,b,c not conformably dimensioned");
     endif;
   endif
 
 # Call octave built-in function.
 
-  x = syl(a,b,c);
+  x = syl (a, b, c);
 
 endfunction
diff --git a/scripts/control/tzero.m b/scripts/control/tzero.m
--- a/scripts/control/tzero.m
+++ b/scripts/control/tzero.m
@@ -3,46 +3,43 @@ function zr = tzero (a, b, c, d, bal)
 # Usage: zr = tzero (a, b, c, d, bal)
 #
 # Compute the transmission zeros of a, b, c, d.
 #
 # bal = balancing option (see balance); default is "B".
 #
 # Needs to incorporate mvzero algorithm to isolate finite zeros.
 
-# Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993
+# Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
 
   if (nargin == 4)
     bal = "B";
-  elseif (nargin ~= 5)
-    error("tzero: illegal number of arguments")
+  elseif (nargin != 5)
+    error ("tzero: illegal number of arguments");
   endif
 
-  [n, m, p] = abcdchk (a, b, c, d);
-
-  if(m != p)
-
-    disp("warning: tzero: number of inputs,outputs differ -- squaring up")
+  [n, m, p] = abcddim (a, b, c, d);
 
-    if (p > m)
-      disp ("  by padding b, d with zeros")
-      b = [b, zeros (n, p-m)];
-      d = [d, zeros (p, p-m)];
-      m = p;
-    else
-      disp ("  by padding c,d with zeros")
-      c = [c; zeros (m-p, n)];
-      d = [d; zeros (m-p, m)];
-      p = m;
+  if (n > 0 && m > 0 && p > 0)
+    if (m != p)
+      fprintf (stderr "tzero: number of inputs,outputs differ.  squaring up");
+      if (p > m)
+	fprintf (stderr, "       by padding b and d with zeros.");
+	b = [b, zeros (n, p-m)];
+	d = [d, zeros (p, p-m)];
+	m = p;
+      else
+	fprintf (stderr, "       by padding c and d with zeros.");
+	c = [c; zeros (m-p, n)];
+	d = [d; zeros (m-p, m)];
+	p = m;
+      endif
+      fprintf (stderr, "This is a kludge.  Try again with SISO system.");
     endif
-
-    disp ("This is a kludge.  Try again with SISO system.")
-
-  endif
-
-  if (n != -1)
-    ab = [-a -b; c d];
+    ab = [-a, -b; c, d];
     bb = [eye (n), zeros (n, m); zeros (p, n), zeros (p, m)];
-    [ab, bb] = balance (ab, bb);
-    zr = qzval (ab, bb);
+    [ab,bb] = balance (ab, bb);
+    zr = -qzval (ab, bb);
+  else
+    error ("tzero: a, b, c, d not compatible.  exiting");
   endif
 
 endfunction
diff --git a/scripts/general/is_symmetric.m b/scripts/general/is_symmetric.m
--- a/scripts/general/is_symmetric.m
+++ b/scripts/general/is_symmetric.m
@@ -1,17 +1,19 @@
 function retval = is_symmetric (x,tol)
 
-# usage: is_symmetric (x{,tol})
+# Usage: is_symmetric (x {,tol})
 #
 # If x is symmetric, return the dimension of x, otherwise, return 0.
 #
 # See also: size, rows, columns, length, is_matrix, is_scalar, 
 # is_square, is_vector
 
+# Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
+
   if (nargin == 1 || nargin == 2)
     if ((retval = is_square (x)))
       if (nargin == 1)
 	tol = eps;
       endif
       if (norm (x - x') / norm(x) > tol)
         retval = 0;
       endif
