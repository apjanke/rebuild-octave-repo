# HG changeset patch
# User jwe
# Date 1201038746 0
#      Tue Jan 22 21:52:26 2008 +0000
# Node ID 83a8781b529d005fa3c5b711bf3722b3aac28c3d
# Parent  8a3b2ccc4e11a0cfeea480b17c8975cc3f9e02c8
[project @ 2008-01-22 21:52:25 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,52 @@
+2008-01-22  Thomas Weber  <thomas.weber.mail@gmail.com>
+
+	* linear-algebra/cond.m, linear-algebra/trace.m:
+	Move tests here from test/test_linalg.m.
+	
+	* general/diff.m, general/fliplr.m, general/flipud.m,
+	general/logspace.m, general/rot90.m, general/shift.m, general/tril.m,
+	general/triu.m, linear-algebra/vec.m, linear-algebra/vech.m,
+	special-matrix/hankel.m, special-matrix/hilb.m,
+	special-matrix/invhilb.m, special-matrix/sylvester_matrix.m,
+	special-matrix/toeplitz.m, special-matrix/vander.m:
+	Move tests here from test/test_matrix.m.
+	
+	* general/isscalar.m, general/issquare.m, general/isvector.m:
+	Move tests here from test/test_number.m.
+	
+	* deprecated/polyinteg.m, polynomial/compan.m, polynomial/conv.m,
+	polynomial/deconv.m, polynomial/poly.m, polynomial/polyderiv.m,
+	polynomial/polyfit.m, polynomial/polyreduce.m, polynomial/polyval.m,
+	polynomial/polyvalm.m, polynomial/roots.m:
+	Move tests here from test/test_poly.m.
+
+	* signal/unwrap.m:
+	Move tests here from test/test_signal.m.
+
+	* statistics/base/corrcoef.m, statistics/base/cov.m,
+	statistics/base/kurtosis.m, statistics/base/mahalanobis.m,
+	statistics/base/mean.m, statistics/base/median.m,
+	statistics/base/skewness.m, statistics/base/std.m:
+	Move tests here from test/test_stats.m.
+
+	* general/int2str.m, general/num2str.m, strings/bin2dec.m,
+	strings/blanks.m, strings/deblank.m, strings/dec2bin.m,
+	strings/dec2hex.m, strings/findstr.m, strings/hex2dec.m,
+	strings/index.m, strings/rindex.m, strings/split.m, strings/str2mat.m,
+	strings/str2num.m, strings/strcat.m, strings/strrep.m,
+	strings/substr.m:
+	Move tests here from test/test_string.m.
+
+	* miscellaneous/computer.m, miscellaneous/ls.m,
+	miscellaneous/version.m, time/asctime.m, time/clock.m, time/ctime.m,
+	time/date.m, time/etime.m, time/is_leap_year.m:
+	Move tests here from test/test_system.m.
+
 2008-01-22  Schloegl Alois  <alois.schloegl@tugraz.at>
 
 	* specfun/erfinv.m: Replace z_old and z_new by a single variable z.
 	Simplify initial checks on argument values.
 
 2008-01-22  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* plot/gnuplot_drawnow.m: New function corresponding to the
diff --git a/scripts/deprecated/intersection.m b/scripts/deprecated/intersection.m
--- a/scripts/deprecated/intersection.m
+++ b/scripts/deprecated/intersection.m
@@ -23,8 +23,19 @@
 
 ## Author: jwe
 
 function y = intersection (varargin)
 
   y = intersect (varargin{:});
 
 endfunction
+
+%!assert(all (all (intersection ([1, 2, 3], [2, 3, 5]) == [2, 3])));
+
+%!assert(all (all (intersection ([1; 2; 3], [2, 3, 5]) == [2, 3])));
+
+%!assert(isempty (intersection ([1, 2, 3], [4; 5; 6])));
+
+%!error intersection (1);
+
+%!error intersection (1, 2, 5);
+
diff --git a/scripts/deprecated/polyinteg.m b/scripts/deprecated/polyinteg.m
--- a/scripts/deprecated/polyinteg.m
+++ b/scripts/deprecated/polyinteg.m
@@ -30,8 +30,17 @@
 ## Created: June 1994
 ## Adapted-By: jwe
 
 function y = polyinteg (p)
 
   y = polyint (p);
 
 endfunction
+
+%!assert(all (all (polyinteg ([2, 2]) == [1, 2, 0])));
+
+%!assert(isempty (polyinteg ([])));
+
+%!assert(all (all (polyinteg (3) == [3, 0])));
+
+%!error polyinteg ([1, 2; 3, 4]);
+
diff --git a/scripts/general/diff.m b/scripts/general/diff.m
--- a/scripts/general/diff.m
+++ b/scripts/general/diff.m
@@ -126,8 +126,23 @@ function x = diff (x, k, dim)
 	idx1{dim} = idx2{dim} = 1;
 	k = k - min (k, n - 1);
 	dim = dim + 1;
       endwhile
     endif
   endif
 
 endfunction
+
+%!assert((diff ([1, 2, 3, 4]) == [1, 1, 1]
+%! && diff ([1, 3, 7, 19], 2) == [2, 8]
+%! && diff ([1, 2; 5, 4; 8, 7; 9, 6; 3, 1]) == [4, 2; 3, 3; 1, -1; -6, -5]
+%! && diff ([1, 2; 5, 4; 8, 7; 9, 6; 3, 1], 3) == [-1, -5; -5, 0]
+%! && isempty (diff (1))));
+
+%!error diff ([1, 2; 3, 4], -1);
+
+%!error diff ("foo");
+
+%!error diff ();
+
+%!error diff (1, 2, 3, 4);
+
diff --git a/scripts/general/fliplr.m b/scripts/general/fliplr.m
--- a/scripts/general/fliplr.m
+++ b/scripts/general/fliplr.m
@@ -46,8 +46,17 @@ function y = fliplr (x)
   if (ndims (x) > 2)
     error ("fliplr: Only works with 2-D arrays")
   endif
 
   nc = columns (x);
   y = x (:, nc:-1:1);
 
 endfunction
+
+%!assert((fliplr ([1, 2; 3, 4]) == [2, 1; 4, 3]
+%! && fliplr ([1, 2; 3, 4; 5, 6]) == [2, 1; 4, 3; 6, 5]
+%! && fliplr ([1, 2, 3; 4, 5, 6]) == [3, 2, 1; 6, 5, 4]));
+
+%!error <usage.*fliplr> fliplr();
+
+%!error fliplr (1, 2);
+
diff --git a/scripts/general/flipud.m b/scripts/general/flipud.m
--- a/scripts/general/flipud.m
+++ b/scripts/general/flipud.m
@@ -47,8 +47,17 @@ function y = flipud (x)
   if (ndims (x) > 2)
     error ("flipud: Only works with 2-d arrays")
   endif
 
   nr = rows (x);
   y = x (nr:-1:1, :);
 
 endfunction
+
+%!assert((flipud ([1, 2; 3, 4]) == [3, 4; 1, 2]
+%! && flipud ([1, 2; 3, 4; 5, 6]) == [5, 6; 3, 4; 1, 2]
+%! && flipud ([1, 2, 3; 4, 5, 6]) == [4, 5, 6; 1, 2, 3]));
+
+%!error flipud ();
+
+%!error flipud (1, 2);
+
diff --git a/scripts/general/int2str.m b/scripts/general/int2str.m
--- a/scripts/general/int2str.m
+++ b/scripts/general/int2str.m
@@ -86,8 +86,15 @@ function fmt = get_fmt (x, sep)
       if (any (t(tfw == fw) < 0))
 	fw++;
       endif
       fmt = sprintf ("%%%dd", max (fw, min_fw));
     endif
   endif
 
 endfunction
+
+%!assert(strcmp (int2str (-123), "-123") && strcmp (int2str (1.2), "1"));
+
+%!error int2str ();
+
+%!error int2str (1, 2);
+
diff --git a/scripts/general/isscalar.m b/scripts/general/isscalar.m
--- a/scripts/general/isscalar.m
+++ b/scripts/general/isscalar.m
@@ -28,8 +28,33 @@ function retval = isscalar (x)
 
   if (nargin == 1)
     retval = numel (x) == 1;
   else
     print_usage ();
   endif
 
 endfunction
+
+%!assert(isscalar (1));
+
+%!assert(!(isscalar ([1, 2])));
+
+%!assert(!(isscalar ([])));
+
+%!assert(!(isscalar ([1, 2; 3, 4])));
+
+%!test
+%! warn_str_to_num = 0;
+%! assert((isscalar ("t")));
+
+%!assert(!(isscalar ("test")));
+
+%!assert(!(isscalar (["test"; "ing"])));
+
+%!test
+%! s.a = 1;
+%! assert((isscalar (s)));
+
+%!error isscalar ();
+
+%!error isscalar (1, 2);
+
diff --git a/scripts/general/issquare.m b/scripts/general/issquare.m
--- a/scripts/general/issquare.m
+++ b/scripts/general/issquare.m
@@ -38,8 +38,37 @@ function retval = issquare (x)
         retval = nr;
       endif
     endif
   else
     print_usage ();
   endif
 
 endfunction
+
+%!assert(issquare (1));
+
+%!assert(!(issquare ([1, 2])));
+
+%!assert(!(issquare ([])));
+
+%!assert(issquare ([1, 2; 3, 4]) == 2);
+
+%!test
+%! warn_str_to_num = 0;
+%! assert(!(issquare ("t")));
+
+%!assert(!(issquare ("test")));
+
+%!test
+%! warn_str_to_num = 0;
+%! assert(!(issquare (["test"; "ing"; "1"; "2"])));
+
+%!test
+%! s.a = 1;
+%! assert(!(issquare (s)));
+
+%!assert(!(issquare ([1, 2; 3, 4; 5, 6])));
+
+%!error issquare ();
+
+%!error issquare ([1, 2; 3, 4], 2);
+
diff --git a/scripts/general/isvector.m b/scripts/general/isvector.m
--- a/scripts/general/isvector.m
+++ b/scripts/general/isvector.m
@@ -31,8 +31,35 @@ function retval = isvector (x)
   if (nargin == 1)
     sz = size (x);
     retval = (ndims (x) == 2 && (sz(1) == 1 || sz(2) == 1));
   else
     print_usage ();
   endif
 
 endfunction
+
+%!assert(isvector (1));
+
+%!assert(isvector ([1; 2; 3]));
+
+%!assert(!(isvector ([])));
+
+%!assert(!(isvector ([1, 2; 3, 4])));
+
+%!test
+%! warn_str_to_num = 0;
+%! assert((isvector ("t")));
+
+%!test
+%! warn_str_to_num = 0;
+%! assert((isvector ("test")));
+
+%!assert(!(isvector (["test"; "ing"])));
+
+%!test
+%! s.a = 1;
+%! assert((isvector (s)));
+
+%!error isvector ();
+
+%!error isvector ([1, 2], 2);
+
diff --git a/scripts/general/logspace.m b/scripts/general/logspace.m
--- a/scripts/general/logspace.m
+++ b/scripts/general/logspace.m
@@ -87,8 +87,25 @@ function retval = logspace (x1, x2, n)
       x2_tmp = log10 (pi);
     endif
     retval = 10 .^ (linspace (x1, x2_tmp, npoints));
   else
     error ("logspace: arguments must be scalars");
   endif
 
 endfunction
+
+%!test
+%! x1 = logspace (1, 2);
+%! x2 = logspace (1, 2, 10);
+%! x3 = logspace (1, -2, 10);
+%! x4 = logspace (1, pi, 10);
+%! assert((size (x1) == [1, 50] && x1(1) == 10 && x1(50) == 100
+%! && size (x2) == [1, 10] && x2(1) == 10 && x2(10) == 100
+%! && size (x3) == [1, 10] && x3(1) == 10 && x3(10) == 0.01
+%! && size (x4) == [1, 10] && x4(1) == 10 && abs (x4(10) - pi) < sqrt (eps)));
+
+%!error logspace ([1, 2; 3, 4], 5, 6);
+
+%!error logspace ();
+
+%!error logspace (1, 2, 3, 4);
+
diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -143,8 +143,15 @@ function retval = num2str (x, arg)
     fmt = strcat (deblank (repmat (fmt, 1, columns (x))), "\n");
     nd = ndims (x);
     tmp = sprintf (fmt, permute (x, [2, 1, 3:nd]));
     tmp(length (tmp)) = "";
     retval = strtrim (split (tmp, "\n"));
   endif
 
 endfunction
+
+%!assert((strcmp (num2str (123), "123") && strcmp (num2str (1.23), "1.23")));
+
+%!error num2str ();
+
+%!error num2str (1, 2, 3);
+
diff --git a/scripts/general/rot90.m b/scripts/general/rot90.m
--- a/scripts/general/rot90.m
+++ b/scripts/general/rot90.m
@@ -85,8 +85,26 @@ function y = rot90 (x, k)
     else
       error ("rot90: internal error!");
     endif
   else
     print_usage ();
   endif
 
 endfunction
+
+%!test
+%! x1 = [1, 2;
+%! 3, 4];
+%! x2 = [2, 4;
+%! 1, 3];
+%! x3 = [4, 3;
+%! 2, 1];
+%! x4 = [3, 1;
+%! 4, 2];
+%! 
+%! assert((rot90 (x1)== x2 && rot90 (x1, 2) == x3 && rot90 (x1, 3) == x4
+%! && rot90 (x1, 4) == x1 && rot90 (x1, 5) == x2 && rot90 (x1, -1) == x4));
+
+%!error rot90 ();
+
+%!error rot90 (1, 2, 3);
+
diff --git a/scripts/general/shift.m b/scripts/general/shift.m
--- a/scripts/general/shift.m
+++ b/scripts/general/shift.m
@@ -75,10 +75,28 @@ function y = shift (x, b, dim)
     b = rem (b, d);
     idx{dim} = [d-b+1:d, 1:d-b];
   elseif (b < 0)
     b = rem (abs (b), d);
     idx{dim} = [b+1:d, 1:b];
   endif
   y = x(idx{:});
 
+endfunction
 
-endfunction
+%!test
+%! a = [1, 2, 3];
+%! b = [4, 5, 6];
+%! c = [7, 8, 9];
+%! 
+%! r = [a, b, c];
+%! m = [a; b; c];
+%! 
+%! assert((shift (r, 3) == [c, a, b]
+%! && shift (r, -6) == [c, a, b]
+%! && shift (r, -3) == [b, c, a]
+%! && shift (m, 1) == [c; a; b]
+%! && shift (m, -2) == [c; a; b]));
+
+%!error shift ();
+
+%!error shift (1, 2, 3, 4);
+
diff --git a/scripts/general/tril.m b/scripts/general/tril.m
--- a/scripts/general/tril.m
+++ b/scripts/general/tril.m
@@ -82,8 +82,28 @@ function retval = tril (x, k)
   endif
 
   for j = 1 : min (nc, nr+k)
     nr_limit = max (1, j-k);
     retval (nr_limit:nr, j) = x (nr_limit:nr, j);
   endfor
 
 endfunction
+
+%!test
+%! a = [1, 2, 3; 4, 5, 6; 7, 8, 9; 10, 11, 12];
+%! 
+%! l0 = [1, 0, 0; 4, 5, 0; 7, 8, 9; 10, 11, 12];
+%! l1 = [1, 2, 0; 4, 5, 6; 7, 8, 9; 10, 11, 12];
+%! l2 = [1, 2, 3; 4, 5, 6; 7, 8, 9; 10, 11, 12];
+%! lm1 = [0, 0, 0; 4, 0, 0; 7, 8, 0; 10, 11, 12];
+%! lm2 = [0, 0, 0; 0, 0, 0; 7, 0, 0; 10, 11, 0];
+%! lm3 = [0, 0, 0; 0, 0, 0; 0, 0, 0; 10, 0, 0];
+%! lm4 = [0, 0, 0; 0, 0, 0; 0, 0, 0; 0, 0, 0];
+%! 
+%! assert((tril (a, -4) == lm4 && tril (a, -3) == lm3
+%! && tril (a, -2) == lm2 && tril (a, -1) == lm1
+%! && tril (a) == l0 && tril (a, 1) == l1 && tril (a, 2) == l2));
+
+%!error tril ();
+
+%!error tril (1, 2, 3);
+
diff --git a/scripts/general/triu.m b/scripts/general/triu.m
--- a/scripts/general/triu.m
+++ b/scripts/general/triu.m
@@ -42,8 +42,28 @@ function retval = triu (x, k)
   endif
 
   for j = max (1, k+1) : nc
     nr_limit = min (nr, j-k);
     retval (1:nr_limit, j) = x (1:nr_limit, j);
   endfor
 
 endfunction
+
+%!test
+%! a = [1, 2, 3; 4, 5, 6; 7, 8, 9; 10, 11, 12];
+%! 
+%! u0 = [1, 2, 3; 0, 5, 6; 0, 0, 9; 0, 0, 0];
+%! u1 = [0, 2, 3; 0, 0, 6; 0, 0, 0; 0, 0, 0];
+%! u2 = [0, 0, 3; 0, 0, 0; 0, 0, 0; 0, 0, 0];
+%! u3 = [0, 0, 0; 0, 0, 0; 0, 0, 0; 0, 0, 0];
+%! um1 = [1, 2, 3; 4, 5, 6; 0, 8, 9; 0, 0, 12];
+%! um2 = [1, 2, 3; 4, 5, 6; 7, 8, 9; 0, 11, 12];
+%! um3 = [1, 2, 3; 4, 5, 6; 7, 8, 9; 10, 11, 12];
+%! 
+%! assert((triu (a, -3) == um3 && triu (a, -2) == um2
+%! && triu (a, -1) == um1 && triu (a) == u0 && triu (a, 1) == u1
+%! && triu (a, 2) == u2 && triu (a, 3) == u3));
+
+%!error triu ();
+
+%!error triu (1, 2, 3);
+
diff --git a/scripts/linear-algebra/cond.m b/scripts/linear-algebra/cond.m
--- a/scripts/linear-algebra/cond.m
+++ b/scripts/linear-algebra/cond.m
@@ -50,8 +50,17 @@ function retval = cond (a)
         retval = sigma_1 / sigma_n;
       endif
     endif
   else
     print_usage ();
   endif
 
 endfunction
+
+%!assert(abs (cond ([1, 2; 2, 1]) - 3) < sqrt (eps));
+
+%!assert(cond ([1, 2, 3; 4, 5, 6; 7, 8, 9]) > 1.0e+16);
+
+%!error cond ();
+
+%!error cond (1, 2);
+
diff --git a/scripts/linear-algebra/trace.m b/scripts/linear-algebra/trace.m
--- a/scripts/linear-algebra/trace.m
+++ b/scripts/linear-algebra/trace.m
@@ -33,8 +33,19 @@ function y = trace (x)
   [nr, nc] = size (x);
   if (nr == 1 || nc == 1)
     y = x(1);
   else
     y = sum (diag (x));
   endif
 
 endfunction
+
+%!assert(trace ([1, 2; 3, 4]) == 5);
+
+%!assert(trace ([1, 2; 3, 4; 5, 6]) == 5);
+
+%!assert(trace ([1, 3, 5; 2, 4, 6]) == 5);
+
+%!error trace ();
+
+%!error trace (1, 2);
+
diff --git a/scripts/linear-algebra/vec.m b/scripts/linear-algebra/vec.m
--- a/scripts/linear-algebra/vec.m
+++ b/scripts/linear-algebra/vec.m
@@ -34,8 +34,15 @@ function v = vec (x)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   v = x(:);
 
 endfunction
+
+%!assert(vec ([1, 2; 3, 4]) == [1; 3; 2; 4] && vec ([1, 3, 2, 4]) == [1; 3; 2; 4]);
+
+%!error vec ();
+
+%!error vec (1, 2);
+
diff --git a/scripts/linear-algebra/vech.m b/scripts/linear-algebra/vech.m
--- a/scripts/linear-algebra/vech.m
+++ b/scripts/linear-algebra/vech.m
@@ -48,8 +48,15 @@ function v = vech (x)
   count = 0;
   for j = 1 : n
     i = j : n;
     v (count + i) = x (i, j);
     count = count + n - j;
   endfor
 
 endfunction
+
+%!assert(all (vech ([1, 2, 3; 4, 5, 6; 7, 8, 9]) == [1; 4; 7; 5; 8; 9]));
+
+%!error vech ();
+
+%!error vech (1, 2);
+
diff --git a/scripts/miscellaneous/computer.m b/scripts/miscellaneous/computer.m
--- a/scripts/miscellaneous/computer.m
+++ b/scripts/miscellaneous/computer.m
@@ -67,8 +67,14 @@ function [c, maxsize, endian] = computer
     elseif (octave_config_info ("words_little_endian"))
       endian = "L";
     else
       endian = "?";
     endif      
   endif
 
 endfunction
+
+%!assert((isstr (computer ())
+%! && computer () == octave_config_info ("canonical_host_type")));
+
+%!warning a =computer(2);
+
diff --git a/scripts/miscellaneous/ls.m b/scripts/miscellaneous/ls.m
--- a/scripts/miscellaneous/ls.m
+++ b/scripts/miscellaneous/ls.m
@@ -73,8 +73,11 @@ function retval = ls (varargin)
       system (cmd);
     endif
     
   else
     error ("ls: expecting all arguments to be character strings");
   endif
 
 endfunction
+
+%!error ls (1);
+
diff --git a/scripts/miscellaneous/version.m b/scripts/miscellaneous/version.m
--- a/scripts/miscellaneous/version.m
+++ b/scripts/miscellaneous/version.m
@@ -28,8 +28,13 @@ function vs = version ()
 
   if (nargin != 0)
     warning ("version: ignoring extra arguments");
   endif
 
   vs = OCTAVE_VERSION;
 
 endfunction
+
+%!assert(isstr (version ()) && strcmp (version (), OCTAVE_VERSION));
+
+%!warning version (1);
+
diff --git a/scripts/polynomial/compan.m b/scripts/polynomial/compan.m
--- a/scripts/polynomial/compan.m
+++ b/scripts/polynomial/compan.m
@@ -74,8 +74,21 @@ function A = compan (c)
   if (n == 1)
     A = [];
   else
     A = diag (ones (n-2, 1), -1);
     A(1,:) = -c(2:n) / c(1);
   endif
 
 endfunction
+
+%!assert(all (all (compan ([1, 2, 3]) == [-2, -3; 1, 0])));
+
+%!assert(all (all (compan ([1; 2; 3]) == [-2, -3; 1, 0])));
+
+%!assert(isempty (compan (4)));
+
+%!assert(all (all (compan ([3, 2, 1]) == [-2/3, -1/3; 1, 0])));
+
+%!error compan ([1,2;3,4]);
+
+%!error compan ([]);
+
diff --git a/scripts/polynomial/conv.m b/scripts/polynomial/conv.m
--- a/scripts/polynomial/conv.m
+++ b/scripts/polynomial/conv.m
@@ -68,8 +68,21 @@ function y = conv (a, b)
       x = [a, (zeros (1, ly - la))];
     else
       x = a;
     endif
     y = filter (b, 1, x);
   endif
 
 endfunction
+
+%!assert(all (all (conv (ones (3, 1), ones (3, 1)) == [1, 2, 3, 2, 1])));
+
+%!assert(all (all (conv (ones (1, 3), ones (3, 1)) == [1, 2, 3, 2, 1])));
+
+%!assert(all (all (conv (3, [1, 2, 3]) == [3, 6, 9])));
+
+%!error conv ([1, 2; 3, 4], 3);
+
+%!assert(conv (2, 3),6);
+
+%!error conv (2, []);
+
diff --git a/scripts/polynomial/deconv.m b/scripts/polynomial/deconv.m
--- a/scripts/polynomial/deconv.m
+++ b/scripts/polynomial/deconv.m
@@ -60,8 +60,25 @@ function [b, r] = deconv (y, a)
   lc = la + length (b) - 1;
   if (ly == lc)
     r = y - conv (a, b);
   else
     r = [(zeros (1, lc - ly)), y] - conv (a, b);
   endif
 
 endfunction
+
+%!test
+%! [b, r] = deconv ([3, 6, 9, 9], [1, 2, 3]);
+%! assert(all (all (b == [3, 0])) && all (all (r == [0, 0, 0, 9])));
+
+%!test
+%! [b, r] = deconv ([3, 6], [1, 2, 3]);
+%! assert(b == 0 && all (all (r == [0, 3, 6])));
+
+%!test
+%! [b, r] = deconv ([3, 6], [1; 2; 3]);
+%! assert(b == 0 && all (all (r == [0, 3, 6])));
+
+%!error [b, r] = deconv ([3, 6], [1, 2; 3, 4]);;
+
+%!error <number of rows must match> [b, r] = deconv ([3; 6], [1, 2, 3]);
+
diff --git a/scripts/polynomial/poly.m b/scripts/polynomial/poly.m
--- a/scripts/polynomial/poly.m
+++ b/scripts/polynomial/poly.m
@@ -70,8 +70,17 @@ function y = poly (x)
     y(2:(j+1)) = y(2:(j+1)) - v(j) .* y(1:j);
   endfor
 
   if (all (all (imag (x) == 0)))
     y = real (y);
   endif
 
 endfunction
+
+%!assert(all (all (poly ([1, 2, 3]) == [1, -6, 11, -6])));
+
+%!assert(all (all (abs (poly ([1, 2; 3, 4]) - [1, -5, -2]) < sqrt (eps))));
+
+%!error poly ([1, 2, 3; 4, 5, 6]);
+
+%!assert(poly ([]),1);
+
diff --git a/scripts/polynomial/polyderiv.m b/scripts/polynomial/polyderiv.m
--- a/scripts/polynomial/polyderiv.m
+++ b/scripts/polynomial/polyderiv.m
@@ -84,10 +84,18 @@ function [q, r] = polyderiv (p, a)
       p = p(:).';
 
       q = p(1:(lp-1)) .* [(lp-1):-1:1];
     endif
   else
     print_usage ();
   endif
 
+endfunction
 
-endfunction
+%!assert(all (all (polyderiv ([1, 2, 3]) == [2, 2])));
+
+%!assert(polyderiv (13) == 0);
+
+%!error polyderiv ([]);
+
+%!error polyderiv ([1, 2; 3, 4]);
+
diff --git a/scripts/polynomial/polyfit.m b/scripts/polynomial/polyfit.m
--- a/scripts/polynomial/polyfit.m
+++ b/scripts/polynomial/polyfit.m
@@ -99,8 +99,27 @@ function [p, s, mu] = polyfit (x, y, n)
 
   endif
 
   ## Return value should be a row vector.
 
   p = p.';
 
 endfunction
+
+%!test
+%! x = [-2, -1, 0, 1, 2];
+%! assert(all (all (abs (polyfit (x, x.^2+x+1, 2) - [1, 1, 1]) < sqrt (eps))));
+
+%!test
+%! x = [-2, -1, 0, 1, 2];
+%! assert(all (all (abs (polyfit (x, x.^2+x+1, 3) - [0, 1, 1, 1]) < sqrt (eps))));
+
+%!error polyfit ([1, 2; 3, 4], [1, 2; 3, 4], 4);
+
+%!test
+%! x = [-2, -1, 0, 1, 2];
+%! fail("polyfit (x, x.^2+x+1)");
+
+%!test
+%! x = [-2, -1, 0, 1, 2];
+%! fail("polyfit (x, x.^2+x+1, [])");
+
diff --git a/scripts/polynomial/polyreduce.m b/scripts/polynomial/polyreduce.m
--- a/scripts/polynomial/polyreduce.m
+++ b/scripts/polynomial/polyreduce.m
@@ -51,8 +51,19 @@ function p = polyreduce (p)
 
       p = p (index (1):length (p));
 
     endif
 
   endif
 
 endfunction
+
+%!assert(all (all (polyreduce ([0, 0, 1, 2, 3]) == [1, 2, 3])));
+
+%!assert(all (all (polyreduce ([1, 2, 3, 0, 0]) == [1, 2, 3, 0, 0])));
+
+%!assert(all (all (polyreduce ([1, 0, 3]) == [1, 0, 3])));
+
+%!assert(isempty (polyreduce ([])));
+
+%!error polyreduce ([1, 2; 3, 4]);
+
diff --git a/scripts/polynomial/polyval.m b/scripts/polynomial/polyval.m
--- a/scripts/polynomial/polyval.m
+++ b/scripts/polynomial/polyval.m
@@ -56,8 +56,21 @@ function y = polyval (c, x)
 
   n = length (c);
   y = c (1) * ones (rows (x), columns (x));
   for index = 2:n
     y = c (index) + x .* y;
   endfor
 
 endfunction
+
+%!assert(polyval ([1, 1, 1], 2) == 7);
+
+%!assert(all (all (polyval ([1, 1, 1], [0; 1; 2]) == [1; 3; 7])));
+
+%!assert(isempty (polyval ([1, 1, 1], [])));
+
+%!assert(all (all (polyval ([1, 1, 1], [-1, 0; 1, 2]) == [1, 1; 3, 7])));
+
+%!error polyval ([1, 2; 3, 4], [-1, 0; 1, 2]);
+
+%!assert(isempty (polyval ([], [-1, 0; 1, 2])));
+
diff --git a/scripts/polynomial/polyvalm.m b/scripts/polynomial/polyvalm.m
--- a/scripts/polynomial/polyvalm.m
+++ b/scripts/polynomial/polyvalm.m
@@ -57,8 +57,13 @@ function y = polyvalm (c, x)
 
   if (issymmetric (x))
     y = v * diag (polyval (c, diag (d))) * v';
   else
     y = v * (diag (polyval (c, diag (d))) / v);
   endif
 
 endfunction
+
+%!assert(isempty (polyvalm ([], [1, 2; 3, 4])));
+
+%!error polyvalm ([1, 1, 1], [1, 2; 3, 4; 5, 6]);
+
diff --git a/scripts/polynomial/roots.m b/scripts/polynomial/roots.m
--- a/scripts/polynomial/roots.m
+++ b/scripts/polynomial/roots.m
@@ -108,8 +108,15 @@ function r = roots (v)
     else
       r = zeros (n - f(m), 1);
     endif
   else
     r = [];
   endif
 
 endfunction
+
+%!assert(all (all (abs (roots ([1, -6, 11, -6]) - [3; 2; 1]) < sqrt (eps))));
+
+%!assert(isempty (roots ([])));
+
+%!error roots ([1, 2; 3, 4]);
+
diff --git a/scripts/set/complement.m b/scripts/set/complement.m
--- a/scripts/set/complement.m
+++ b/scripts/set/complement.m
@@ -52,8 +52,19 @@ function y = complement (a, b)
       if (all (a != b (index)))
         y(yindex++) = b(index);
       endif
     endfor
     y = y(1:(yindex-1));
   endif
 
 endfunction
+
+%!assert(all (all (complement ([1, 2, 3], [3; 4; 5; 6]) == [4, 5, 6])));
+
+%!assert(all (all (complement ([1, 2, 3], [3, 4, 5, 6]) == [4, 5, 6])));
+
+%!assert(isempty (complement ([1, 2, 3], [3, 2, 1])));
+
+%!error complement (1);
+
+%!error complement (1, 2, 3);
+
diff --git a/scripts/set/create_set.m b/scripts/set/create_set.m
--- a/scripts/set/create_set.m
+++ b/scripts/set/create_set.m
@@ -55,8 +55,17 @@ function y = create_set (x, rows_opt)
     y = unique (x).';
   elseif (strcmpi (rows_opt, "rows"))
     y = unique (x, "rows");
   else
     error ("create_set: expecting \"rows\" as second argument");
   endif
 
 endfunction
+
+%!assert(all (all (create_set ([1, 2; 3, 4; 2, 4]) == [1, 2, 3, 4])));
+
+%!assert(all (all (create_set ([1; 2; 3; 4; 2; 4]) == [1, 2, 3, 4])));
+
+%!assert(isempty (create_set ([])));
+
+%!error create_set (1, 2);
+
diff --git a/scripts/set/union.m b/scripts/set/union.m
--- a/scripts/set/union.m
+++ b/scripts/set/union.m
@@ -69,8 +69,19 @@ function y = union (a, b, varargin)
     endif
   elseif (ndims (a) == 2 && ndims (b) == 2 && columns (a) == columns (b))
     y = create_set ([a; b], "rows");
   else
     error ("union: input arguments must contain the same number of columns when \"rows\" is specified");
   endif
 
 endfunction
+
+%!assert(all (all (union ([1, 2, 4], [2, 3, 5]) == [1, 2, 3, 4, 5])));
+
+%!assert(all (all (union ([1; 2; 4], [2, 3, 5]) == [1, 2, 3, 4, 5])));
+
+%!assert(all (all (union ([1, 2, 3], [5; 7; 9]) == [1, 2, 3, 5, 7, 9])));
+
+%!error union (1);
+
+%!error union (1, 2, 3);
+
diff --git a/scripts/signal/unwrap.m b/scripts/signal/unwrap.m
--- a/scripts/signal/unwrap.m
+++ b/scripts/signal/unwrap.m
@@ -88,8 +88,49 @@ function retval = unwrap (a, tol, dim)
   ## Now need to "integrate" this so that the deltas become steps.
   r = cumsum (p, dim);
 
   ## Now add the "steps" to the original data and put output in the
   ## same shape as originally.
   retval = a + r;
 
 endfunction
+
+%!function t = xassert(a,b,tol)
+%!  if (nargin == 1)
+%!    t = all(a(:));
+%!  else
+%!    if (nargin == 2)
+%!      tol = 0;
+%!    endif
+%!    if (any (size(a) != size(b)))
+%!      t = 0;
+%!    elseif (any (abs(a(:) - b(:)) > tol))
+%!      t = 0;
+%!    else
+%!      t = 1;
+%!    endif
+%!  endif
+%!
+%!test
+%! 
+%! i = 0;
+%! t = [];
+%! 
+%! r = [0:100];                        # original vector
+%! w = r - 2*pi*floor((r+pi)/(2*pi));  # wrapped into [-pi,pi]
+%! tol = 1e3*eps;                      # maximum expected deviation
+%! 
+%! t(++i) = xassert(r, unwrap(w), tol);               #unwrap single row
+%! t(++i) = xassert(r', unwrap(w'), tol);             #unwrap single column
+%! t(++i) = xassert([r',r'], unwrap([w',w']), tol);   #unwrap 2 columns
+%! t(++i) = xassert([r;r], unwrap([w;w],[],2), tol);  #verify that dim works
+%! t(++i) = xassert(r+10, unwrap(10+w), tol);         #verify that r(1)>pi works
+%! 
+%! t(++i) = xassert(w', unwrap(w',[],2));  #unwrap col by rows should not change it
+%! t(++i) = xassert(w, unwrap(w,[],1));    #unwrap row by cols should not change it
+%! t(++i) = xassert([w;w], unwrap([w;w])); #unwrap 2 rows by cols should not change them
+%! 
+%! ## verify that setting tolerance too low will cause bad results.
+%! t(++i) = xassert(any(abs(r - unwrap(w,0.8)) > 100));
+%! 
+%! assert(all(t));
+
diff --git a/scripts/special-matrix/hankel.m b/scripts/special-matrix/hankel.m
--- a/scripts/special-matrix/hankel.m
+++ b/scripts/special-matrix/hankel.m
@@ -101,8 +101,18 @@ function retval = hankel (c, r)
 
 endfunction
 
 %!assert(hankel(1:3),[1,2,3;2,3,0;3,0,0])
 %!assert(hankel(1),[1]);
 %!assert(hankel(1:3,3:6),[1,2,3,4;2,3,4,5;3,4,5,6]);
 %!assert(hankel(1:3,3:4),[1,2;2,3;3,4]);
 %!assert(hankel(1:3,4:6),[1,2,3;2,3,5;3,5,6]);
+
+%!assert((hankel (1) == 1 && hankel ([1, 2]) == [1, 2; 2, 0]
+%! && hankel ([1, 2], [2; -1; -3]) == [1, 2, -1; 2, -1, -3]));
+
+%!error hankel ([1, 2; 3, 4], [1, 2; 3, 4]);
+
+%!error hankel ();
+
+%!error hankel (1, 2, 3);
+
diff --git a/scripts/special-matrix/hilb.m b/scripts/special-matrix/hilb.m
--- a/scripts/special-matrix/hilb.m
+++ b/scripts/special-matrix/hilb.m
@@ -61,8 +61,16 @@ function retval = hilb (n)
     for i = 1:n
       retval (i, :) = 1.0 ./ (tmp + (i - 1));
     endfor
   else
     error ("hilb: expecting scalar argument, found something else");
   endif
 
 endfunction
+
+%!assert((hilb (2) == [1, 1/2; 1/2, 1/3]
+%! && hilb (3) == [1, 1/2, 1/3; 1/2, 1/3, 1/4; 1/3, 1/4, 1/5]));
+
+%!error hilb ();
+
+%!error hilb (1, 2);
+
diff --git a/scripts/special-matrix/invhilb.m b/scripts/special-matrix/invhilb.m
--- a/scripts/special-matrix/invhilb.m
+++ b/scripts/special-matrix/invhilb.m
@@ -102,8 +102,25 @@ function retval = invhilb (n)
         retval(l,:) = p(l) * (p ./ [l:l+n-1]);
       endfor
     endif
   else
     error ("invhilb: expecting scalar argument, found something else");
   endif
 
 endfunction
+
+%!test
+%! result4 = [16, -120, 240, -140;
+%! -120, 1200, -2700, 1680;
+%! 240, -2700, 6480, -4200;
+%! -140, 1680, -4200, 2800];
+%! 
+%! assert((invhilb (1) == 1 && invhilb (2) == [4, -6; -6, 12]
+%! && invhilb (4) == result4
+%! && abs (invhilb (7) * hilb (7) - eye (7)) < sqrt (eps)));
+
+%!error invhilb ([1, 2]);
+
+%!error invhilb ();
+
+%!error invhilb (1, 2);
+
diff --git a/scripts/special-matrix/sylvester_matrix.m b/scripts/special-matrix/sylvester_matrix.m
--- a/scripts/special-matrix/sylvester_matrix.m
+++ b/scripts/special-matrix/sylvester_matrix.m
@@ -46,8 +46,19 @@ function retval = sylvester_matrix (k)
       tmp = sylvester_matrix (k-1);
       retval = [tmp, tmp; tmp, -tmp];
     endif
   else
     error ("sylvester_matrix: expecting scalar argument");
   endif
 
 endfunction
+
+%!assert((sylvester_matrix (1) == [1, 1; 1, -1]
+%! && (sylvester_matrix (2)
+%! == [1, 1, 1, 1; 1, -1, 1, -1; 1, 1, -1, -1; 1, -1, -1, 1])));
+
+%!error sylvester_matrix ([1, 2; 3, 4]);
+
+%!error sylvester_matrix ();
+
+%!error sylvester_matrix (1, 2);
+
diff --git a/scripts/special-matrix/toeplitz.m b/scripts/special-matrix/toeplitz.m
--- a/scripts/special-matrix/toeplitz.m
+++ b/scripts/special-matrix/toeplitz.m
@@ -103,8 +103,19 @@ function retval = toeplitz (c, r)
     retval (i:nr, i) = c (1:nr-i+1);
   endfor
 
   for i = 1:min (nr, nc-1)
     retval (i, i+1:nc) = r (2:nc-i+1);
   endfor
 
 endfunction
+
+%!assert((toeplitz (1) == 1
+%! && toeplitz ([1, 2, 3], [1; -3; -5]) == [1, -3, -5; 2, 1, -3; 3, 2, 1]
+%! && toeplitz ([1, 2, 3], [1; -3i; -5i]) == [1, -3i, -5i; 2, 1, -3i; 3, 2, 1]));
+
+%!error toeplitz ([1, 2; 3, 4], 1);
+
+%!error toeplitz ();
+
+%!error toeplitz (1, 2, 3);
+
diff --git a/scripts/special-matrix/vander.m b/scripts/special-matrix/vander.m
--- a/scripts/special-matrix/vander.m
+++ b/scripts/special-matrix/vander.m
@@ -65,8 +65,19 @@ function retval = vander (c)
 
 endfunction
 
 %!test
 %! c = [0,1,2,3];
 %! expect = [0,0,0,1; 1,1,1,1; 8,4,2,1; 27,9,3,1];
 %! result = vander(c);
 %! assert(expect, result);
+
+%!assert((vander (1) == 1 && vander ([1, 2, 3]) == vander ([1; 2; 3])
+%! && vander ([1, 2, 3]) == [1, 1, 1; 4, 2, 1; 9, 3, 1]
+%! && vander ([1, 2, 3]*i) == [-1, i, 1; -4, 2i, 1; -9, 3i, 1]));
+
+%!error vander ([1, 2; 3, 4]);
+
+%!error vander ();
+
+%!error vander (1, 2);
+
diff --git a/scripts/statistics/base/corrcoef.m b/scripts/statistics/base/corrcoef.m
--- a/scripts/statistics/base/corrcoef.m
+++ b/scripts/statistics/base/corrcoef.m
@@ -58,8 +58,20 @@ function retval = corrcoef (x, y)
     retval = c ./ s;
   elseif (nargin == 1)
     c = cov (x);
     s = reshape (sqrt (diag (c)), 1, columns (c));
     retval = c ./ (s' * s);
   endif
 
 endfunction
+
+%!test
+%! x = rand (10);
+%! cc1 = corrcoef (x);
+%! cc2 = corrcoef (x, x);
+%! assert((size (cc1) == [10, 10] && size (cc2) == [10, 10]
+%! && abs (cc1 - cc2) < sqrt (eps)));
+
+%!error corrcoef ();
+
+%!error corrcoef (1, 2, 3);
+
diff --git a/scripts/statistics/base/cov.m b/scripts/statistics/base/cov.m
--- a/scripts/statistics/base/cov.m
+++ b/scripts/statistics/base/cov.m
@@ -61,8 +61,19 @@ function c = cov (x, y)
     y = y - ones (n, 1) * sum (y) / n;
     c = conj (x' * y / (n - 1));
   elseif (nargin == 1)
     x = x - ones (n, 1) * sum (x) / n;
     c = conj (x' * x / (n - 1));
   endif
 
 endfunction
+
+%!test
+%! x = rand (10);
+%! cx1 = cov (x);
+%! cx2 = cov (x, x);
+%! assert(size (cx1) == [10, 10] && size (cx2) == [10, 10] && cx1 == cx2);
+
+%!error cov ();
+
+%!error cov (1, 2, 3);
+
diff --git a/scripts/statistics/base/kurtosis.m b/scripts/statistics/base/kurtosis.m
--- a/scripts/statistics/base/kurtosis.m
+++ b/scripts/statistics/base/kurtosis.m
@@ -82,8 +82,18 @@ function retval = kurtosis (x, dim)
   x = x - repmat (mean (x, dim), idx);
   retval = zeros (sz);
   s = std (x, [], dim);
   x = sum(x.^4, dim);
   ind = find (s > 0);
   retval(ind) = x(ind) ./ (c * s(ind) .^ 4) - 3;
 
 endfunction
+
+%!test
+%! x = [-1; 0; 0; 0; 1];
+%! y = [x, 2*x];
+%! assert(all (abs (kurtosis (y) - [-1.4, -1.4]) < sqrt (eps)));
+
+%!error kurtosis ();
+
+%!error kurtosis (1, 2, 3);
+
diff --git a/scripts/statistics/base/mahalanobis.m b/scripts/statistics/base/mahalanobis.m
--- a/scripts/statistics/base/mahalanobis.m
+++ b/scripts/statistics/base/mahalanobis.m
@@ -50,8 +50,14 @@ function retval = mahalanobis (X, Y)
 
   W = (X' * X + Y' * Y) / (xr + yr - 2);
 
   Winv = inv (W);
 
   retval = (Xm - Ym) * Winv * (Xm - Ym)';
 
 endfunction
+
+%!error mahalanobis ();
+
+%!error mahalanobis (1, 2, 3);
+
+
diff --git a/scripts/statistics/base/mean.m b/scripts/statistics/base/mean.m
--- a/scripts/statistics/base/mean.m
+++ b/scripts/statistics/base/mean.m
@@ -111,8 +111,19 @@ function y = mean (x, opt1, opt2)
   elseif (strcmp (opt, "h"))
     x(x == 0) = NaN;
     y = n ./ sum (1 ./ x, dim);
   else
     error ("mean: option `%s' not recognized", opt);
   endif
 
 endfunction
+
+%!test
+%! x = -10:10;
+%! y = x';
+%! z = [y, y+10];
+%! assert(mean (x) == 0 && mean (y) == 0 && mean (z) == [0, 10]);
+
+%!error mean ();
+
+%!error mean (1, 2, 3);
+
diff --git a/scripts/statistics/base/median.m b/scripts/statistics/base/median.m
--- a/scripts/statistics/base/median.m
+++ b/scripts/statistics/base/median.m
@@ -89,8 +89,24 @@ function retval = median (a, dim)
 	retval = s(idx{:});
       endif
     endif
   else
     error ("median: invalid matrix argument");
   endif
 
 endfunction
+
+%!test
+%! x = [1, 2, 3, 4, 5, 6];
+%! x2 = x';
+%! y = [1, 2, 3, 4, 5, 6, 7];
+%! y2 = y';
+%! 
+%! assert((median (x) == median (x2) && median (x) == 3.5
+%! && median (y) == median (y2) && median (y) == 4
+%! && median ([x2, 2*x2]) == [3.5, 7]
+%! && median ([y2, 3*y2]) == [4, 12]));
+
+%!error median ();
+
+%!error median (1, 2, 3);
+
diff --git a/scripts/statistics/base/skewness.m b/scripts/statistics/base/skewness.m
--- a/scripts/statistics/base/skewness.m
+++ b/scripts/statistics/base/skewness.m
@@ -81,8 +81,13 @@ function retval = skewness (x, dim)
   sz(dim) = 1;
   retval = zeros (sz);
   s = std (x, [], dim);
   ind = find (s > 0);
   x = sum (x .^ 3, dim);
   retval(ind) = x(ind) ./ (c * s(ind) .^ 3);
   
 endfunction
+
+%!error skewness ();
+
+%!error skewness (1, 2, 3);
+
diff --git a/scripts/statistics/base/std.m b/scripts/statistics/base/std.m
--- a/scripts/statistics/base/std.m
+++ b/scripts/statistics/base/std.m
@@ -85,8 +85,18 @@ function retval = std (a, opt, dim)
     else
       retval = sqrt (sumsq (a - repmat(mean (a, dim), rng), dim) / sz(dim));
     endif
   else
     error ("std: invalid matrix argument");
   endif
 
 endfunction
+
+%!test
+%! x = ones (10, 2);
+%! y = [1, 3];
+%! assert(std (x) == [0, 0] && abs (std (y) - sqrt (2)) < sqrt (eps));
+
+%!error std ();
+
+%!error std (1, 2, 3, 4);
+
diff --git a/scripts/strings/bin2dec.m b/scripts/strings/bin2dec.m
--- a/scripts/strings/bin2dec.m
+++ b/scripts/strings/bin2dec.m
@@ -44,8 +44,15 @@ function d = bin2dec (h)
       s = s(! isspace (s));
       d(i) = base2dec (s, 2);
     endfor
   else
     print_usage ();
   endif
 
 endfunction
+
+%!assert(bin2dec ("1110") == 14);
+
+%!error bin2dec ();
+
+%!error bin2dec ("str", 1);
+
diff --git a/scripts/strings/blanks.m b/scripts/strings/blanks.m
--- a/scripts/strings/blanks.m
+++ b/scripts/strings/blanks.m
@@ -39,8 +39,15 @@ function s = blanks (n)
   s(1:n) = " ";
 
 endfunction
 
 ## There really isn't that much to test here
 %!assert(blanks (0), "")
 %!assert(blanks (5), "     ")
 %!assert(blanks (10), "          ")
+
+%!assert(strcmp (blanks (3), "   "));
+
+%!error blanks ();
+
+%!error blanks (1, 2);
+
diff --git a/scripts/strings/deblank.m b/scripts/strings/deblank.m
--- a/scripts/strings/deblank.m
+++ b/scripts/strings/deblank.m
@@ -47,8 +47,17 @@ function s = deblank (s)
 
     s = cellfun (@deblank, s, "UniformOutput", false);
 
   else
     error ("deblank: expecting string argument");
   endif
 
 endfunction
+
+%!assert(strcmp (deblank (" f o o  "), " f o o"));
+
+%!error deblank ();
+
+%!error deblank ("foo", "bar");
+
+%!error deblank (1);
+
diff --git a/scripts/strings/dec2bin.m b/scripts/strings/dec2bin.m
--- a/scripts/strings/dec2bin.m
+++ b/scripts/strings/dec2bin.m
@@ -44,8 +44,17 @@ function retval = dec2bin (n, len)
     retval = dec2base (n, 2);
   elseif (nargin == 2)
     retval = dec2base (n, 2, len);
   else
     print_usage ();
   endif
 
 endfunction
+
+%!assert(strcmp (dec2bin (14), "1110"));
+
+%!error dec2bin ();
+
+%!assert(strcmp (dec2bin (14, 6), "001110"));
+
+%!error dec2bin (1, 2, 3);
+
diff --git a/scripts/strings/dec2hex.m b/scripts/strings/dec2hex.m
--- a/scripts/strings/dec2hex.m
+++ b/scripts/strings/dec2hex.m
@@ -44,8 +44,17 @@ function retval = dec2hex (n, len)
     retval = dec2base (n, 16);
   elseif (nargin == 2)
     retval = dec2base (n, 16, len);
   else
     print_usage ();
   endif
 
 endfunction
+
+%!assert(strcmp (tolower (dec2hex (2748)), "abc"));
+
+%!error dec2hex ();
+
+%!assert(strcmp (tolower (dec2hex (2748, 5)), "00abc"));
+
+%!error dec2hex (1, 2, 3);
+
diff --git a/scripts/strings/findstr.m b/scripts/strings/findstr.m
--- a/scripts/strings/findstr.m
+++ b/scripts/strings/findstr.m
@@ -123,8 +123,17 @@ function v = findstr (s, t, overlap)
   endif
 
   ## Always return a column vector, because that's what the old one did
   if (rows (v) > 1) 
     v = v.';
   endif
 
 endfunction
+
+%!assert((findstr ("abababa", "a") == [1, 3, 5, 7]
+%! && findstr ("abababa", "aba") == [1, 3, 5]
+%! && findstr ("abababa", "aba", 0) == [1, 5]));
+
+%!error findstr ();
+
+%!error findstr ("foo", "bar", 3, 4);
+
diff --git a/scripts/strings/hex2dec.m b/scripts/strings/hex2dec.m
--- a/scripts/strings/hex2dec.m
+++ b/scripts/strings/hex2dec.m
@@ -40,8 +40,15 @@ function d = hex2dec (h)
 
   if (nargin != 1)
     print_usage ();
   else
     d = base2dec (h, 16);
   endif
 
 endfunction
+
+%!assert(hex2dec ("12b") == 299 && hex2dec ("12B") == 299);
+
+%!error hex2dec ();
+
+%!error hex2dec ("str", 1);
+
diff --git a/scripts/strings/index.m b/scripts/strings/index.m
--- a/scripts/strings/index.m
+++ b/scripts/strings/index.m
@@ -126,8 +126,16 @@ endfunction
 %!assert(index("abc---", "abc+++"), 0) 
 
 ## test everything out in reverse
 %!assert(index("astringbstringcstring", "s", "last"), 16)
 %!assert(index("astringbstringcstring", "st", "last"), 16)
 %!assert(index("astringbstringcstring", "str", "last"), 16)
 %!assert(index("astringbstringcstring", "string", "last"), 16)
 %!assert(index("abc---", "abc+++", "last"), 0)
+
+
+%!assert(index ("foobarbaz", "b") == 4 && index ("foobarbaz", "z") == 9);
+
+%!error index ();
+
+%!error index ("foo", "bar", 3);
+
diff --git a/scripts/strings/rindex.m b/scripts/strings/rindex.m
--- a/scripts/strings/rindex.m
+++ b/scripts/strings/rindex.m
@@ -42,8 +42,15 @@ function n = rindex (s, t)
 
   if (nargin != 2)
     print_usage ();
   endif
 
   n = index (s, t, "last");
 
 endfunction
+
+%!assert(rindex ("foobarbaz", "b") == 7 && rindex ("foobarbaz", "o") == 3);
+
+%!error rindex ();
+
+%!error rindex ("foo", "bar", 3);
+
diff --git a/scripts/strings/split.m b/scripts/strings/split.m
--- a/scripts/strings/split.m
+++ b/scripts/strings/split.m
@@ -93,8 +93,17 @@ function m = split (s, t, n)
     else
       error ("split: both s and t must be strings");
     endif
   else
     print_usage ();
   endif
 
 endfunction
+
+%!assert(all (all (split ("Test string", "t") == ["Tes "; " s  "; "ring"])));
+
+%!error split ();
+
+%!assert(all (strcmp (split ("foo bar baz", " ", 2), ["foo"; "bar baz"])));
+
+%!error split ("foo", "bar", 3, 4);
+
diff --git a/scripts/strings/str2mat.m b/scripts/strings/str2mat.m
--- a/scripts/strings/str2mat.m
+++ b/scripts/strings/str2mat.m
@@ -69,8 +69,15 @@ function retval = str2mat (varargin)
     endif
     if (nc(k) > 0)
       retval ((row_offset + 1) : (row_offset + nr(k)), 1:nc(k)) = s;
     endif
     row_offset = row_offset + nr(k);
   endfor
 
 endfunction
+
+%!assert(strcmp (str2mat ("a", "bb", "ccc"), ["a  "; "bb "; "ccc"]));
+
+%!error str2mat ();
+
+%!assert(all (str2mat (1, 2, 3) == setstr ([1; 2; 3])));
+
diff --git a/scripts/strings/str2num.m b/scripts/strings/str2num.m
--- a/scripts/strings/str2num.m
+++ b/scripts/strings/str2num.m
@@ -34,8 +34,15 @@ function m = str2num (s)
     if (ischar (m))
       m = [];
     endif
   else
     print_usage ();
   endif
 
 endfunction
+
+%!assert(str2num ("-1.3e2") == -130 && str2num ("[1, 2; 3, 4]") == [1, 2; 3, 4]);
+
+%!error str2num ();
+
+%!error str2num ("string", 1);
+
diff --git a/scripts/strings/strcat.m b/scripts/strings/strcat.m
--- a/scripts/strings/strcat.m
+++ b/scripts/strings/strcat.m
@@ -51,8 +51,16 @@ function st = strcat (varargin)
 
 endfunction
 
 ## test the dimensionality
 ## 1d
 %!assert(strcat("ab ", "ab "), "ab ab ")
 ## 2d
 %!assert(strcat(["ab ";"cde"], ["ab ";"cde"]), ["ab ab ";"cdecde"])
+
+%!assert((strcmp (strcat ("foo", "bar"), "foobar")
+%! && strcmp (strcat (["a"; "bb"], ["foo"; "bar"]), ["a foo"; "bbbar"])));
+
+%!error strcat ();
+
+%!error strcat (1, 2);
+
diff --git a/scripts/strings/strrep.m b/scripts/strings/strrep.m
--- a/scripts/strings/strrep.m
+++ b/scripts/strings/strrep.m
@@ -83,8 +83,16 @@ function t = strrep (s, x, y)
     t = toascii (s);
     repeat = [1:length(x)]' * ones (1, length (ind));
     delete = ones (length (x), 1) * ind + repeat - 1;
     t(delete) = [];
     t = char (t);
   endif
 
 endfunction
+
+%!assert(strcmp (strrep ("This is a test string", "is", "&%$"),
+%! "Th&%$ &%$ a test string"));
+
+%!error strrep ();
+
+%!error strrep ("foo", "bar", 3, 4);
+
diff --git a/scripts/strings/substr.m b/scripts/strings/substr.m
--- a/scripts/strings/substr.m
+++ b/scripts/strings/substr.m
@@ -64,8 +64,15 @@ function t = substr (s, offset, len)
     else
       error ("substr: offset = %d out of range", offset);
     endif
   else
     error ("substr: expecting string argument");
   endif
 
 endfunction
+
+%!assert(strcmp (substr ("This is a test string", 6, 9), "is a test"));
+
+%!error substr ();
+
+%!error substr ("foo", 2, 3, 4);
+
diff --git a/scripts/time/asctime.m b/scripts/time/asctime.m
--- a/scripts/time/asctime.m
+++ b/scripts/time/asctime.m
@@ -38,8 +38,17 @@ function retval = asctime (t)
 
   if (nargin == 1)
     retval = strftime ("%a %b %d %H:%M:%S %Y\n", t);
   else
     print_usage ();
   endif
 
 endfunction
+
+%!test
+%! t = time ();
+%! assert(strcmp (asctime (localtime (t)), ctime (t)));
+
+%!error asctime ();
+
+%!error asctime (1, 2);
+
diff --git a/scripts/time/clock.m b/scripts/time/clock.m
--- a/scripts/time/clock.m
+++ b/scripts/time/clock.m
@@ -43,8 +43,14 @@ function retval = clock ()
   retval(1) = tm.year + 1900;
   retval(2) = tm.mon + 1;
   retval(3) = tm.mday;
   retval(4) = tm.hour;
   retval(5) = tm.min;
   retval(6) = tm.sec + tm.usec / 1e6;
 
 endfunction
+
+%!test
+%! t1 = clock;
+%! t2 = str2num (strftime ("[%Y, %m, %d, %H, %M, %S]", localtime (time ())));
+%! assert(etime (t1, t2) < 1);
+
diff --git a/scripts/time/ctime.m b/scripts/time/ctime.m
--- a/scripts/time/ctime.m
+++ b/scripts/time/ctime.m
@@ -38,8 +38,17 @@ function retval = ctime (t)
 
   if (nargin == 1)
     retval = asctime (localtime (t));
   else
     print_usage ();
   endif
 
 endfunction
+
+%!test
+%! t = time ();
+%! assert(strcmp (asctime (localtime (t)), ctime (t)));
+
+%!error ctime ();
+
+%!error ctime (1, 2);
+
diff --git a/scripts/time/date.m b/scripts/time/date.m
--- a/scripts/time/date.m
+++ b/scripts/time/date.m
@@ -32,8 +32,11 @@
 
 ## Author: jwe
 
 function retval = date ()
 
   retval = strftime ("%d-%b-%Y", localtime (time ()));
 
 endfunction
+
+%!assert(strcmp (date (), strftime ("%d-%b-%Y", localtime (time ()))));
+
diff --git a/scripts/time/etime.m b/scripts/time/etime.m
--- a/scripts/time/etime.m
+++ b/scripts/time/etime.m
@@ -51,8 +51,23 @@ endfunction
 %!assert(etime([1900,12,31,23,59,59],[1901,1,1,0,0,0]),-1)
 %!assert(etime([1900,2,28,23,59,59],[1900,3,1,0,0,0]),-1)
 %!assert(etime([2000,2,28,23,59,59],[2000,3,1,0,0,0]),-86401)
 %!assert(etime([1996,2,28,23,59,59],[1996,3,1,0,0,0]),-86401)
 %!test
 %!  t1 = [1900,12,31,23,59,59; 1900,2,28,23,59,59];
 %!  t2 = [1901,1,1,0,0,0; 1900,3,1,0,0,0];
 %!  assert(etime(t2, t1), [1;1]);
+
+%!test
+%! t1 = [1993, 8, 20, 4, 56, 1];
+%! t2 = [1993, 8, 21, 4, 56, 1];
+%! t3 = [1993, 8, 20, 5, 56, 1];
+%! t4 = [1993, 8, 20, 4, 57, 1];
+%! t5 = [1993, 8, 20, 4, 56, 14];
+%! 
+%! assert((etime (t2, t1) == 86400 && etime (t3, t1) == 3600
+%! && etime (t4, t1) == 60 && etime (t5, t1) == 13));
+
+%!error etime ();
+
+%!error etime (1, 2, 3);
+
diff --git a/scripts/time/is_leap_year.m b/scripts/time/is_leap_year.m
--- a/scripts/time/is_leap_year.m
+++ b/scripts/time/is_leap_year.m
@@ -42,8 +42,15 @@ function retval = is_leap_year (year)
     t = clock ();
     year = t (1);
   endif
 
   retval = ((rem (year, 4) == 0 & rem (year, 100) != 0) ...
             | rem (year, 400) == 0);
 
 endfunction
+
+%!assert((is_leap_year (2000) == 1 && is_leap_year (1976) == 1
+%! && is_leap_year (1000) == 0 && is_leap_year (1800) == 0
+%! && is_leap_year (1600) == 1));
+
+%!error is_leap_year (1, 2);
+
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,14 @@
+2008-01-22  Thomas Weber  <thomas.weber.mail@gmail.com>
+
+	* test_linalg.m, test_matrix.m, test_number.m, test_poly.m,
+	test_signal.m, test_stats.m, test_string.m, test_system.m: 
+	Move tests to individual source files.
+
 2008-01-15  Thomas Weber  <thomas.weber.mail@gmail.com>
 
 	* test_arith.m: Move tests to source files.
 
 2008-01-15  John W. Eaton  <jwe@octave.org>
 
 	* test_audio.m, test_control.m, test_image.m, test_optim.m,
 	test_plot.m, test_unix.m: Delete files with no tests.
diff --git a/test/test_linalg.m b/test/test_linalg.m
--- a/test/test_linalg.m
+++ b/test/test_linalg.m
@@ -13,28 +13,16 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 %% Automatically generated from DejaGNU files
 
-%% test/octave.test/linalg/cond-1.m
-%!assert(abs (cond ([1, 2; 2, 1]) - 3) < sqrt (eps));
-
-%% test/octave.test/linalg/cond-2.m
-%!assert(cond ([1, 2, 3; 4, 5, 6; 7, 8, 9]) > 1.0e+16);
-
-%% test/octave.test/linalg/cond-3.m
-%!error cond ();
-
-%% test/octave.test/linalg/cond-4.m
-%!error cond (1, 2);
-
 %% test/octave.test/linalg/det-1.m
 %!assert(det ([1, 2; 3, 4]) == -2);
 
 %% test/octave.test/linalg/det-2.m
 %!error <Invalid call to det.*> det ();
 
 %% test/octave.test/linalg/det-3.m
 %!error <Invalid call to det.*> det (1, 2);
@@ -98,31 +86,16 @@
 %!error <Invalid call to inv.*> inv ();
 
 %% test/octave.test/linalg/inv-3.m
 %!error <Invalid call to inv.*> inv ([1, 2; 3, 4], 2);
 
 %% test/octave.test/linalg/inv-4.m
 %!error inv ([1, 2; 3, 4; 5, 6]);
 
-%% test/octave.test/linalg/trace-1.m
-%!assert(trace ([1, 2; 3, 4]) == 5);
-
-%% test/octave.test/linalg/trace-2.m
-%!assert(trace ([1, 2; 3, 4; 5, 6]) == 5);
-
-%% test/octave.test/linalg/trace-3.m
-%!assert(trace ([1, 3, 5; 2, 4, 6]) == 5);
-
-%% test/octave.test/linalg/trace-4.m
-%!error trace ();
-
-%% test/octave.test/linalg/trace-5.m
-%!error trace (1, 2);
-
 %% test/octave.test/linalg/chol-1.m
 %!test
 %! rt2 = sqrt (2);
 %! assert(all (all (abs (chol ([2, 1; 1, 1]) - [rt2, 1/rt2; 0, 1/rt2]) < sqrt (eps))));
 
 %% test/octave.test/linalg/chol-2.m
 %!error chol ([1, 2; 3, 4]);
 
diff --git a/test/test_matrix.m b/test/test_matrix.m
--- a/test/test_matrix.m
+++ b/test/test_matrix.m
@@ -43,91 +43,30 @@
 %! && any (x, 2) == [0; 0; 1]));
 
 %% test/octave.test/matrix/any-2.m
 %!error <Invalid call to any.*> any ();
 
 %% test/octave.test/matrix/any-3.m
 %!error <Invalid call to any.*> any (1, 2, 3);
 
-%% test/octave.test/matrix/diff-1.m
-%!assert((diff ([1, 2, 3, 4]) == [1, 1, 1]
-%! && diff ([1, 3, 7, 19], 2) == [2, 8]
-%! && diff ([1, 2; 5, 4; 8, 7; 9, 6; 3, 1]) == [4, 2; 3, 3; 1, -1; -6, -5]
-%! && diff ([1, 2; 5, 4; 8, 7; 9, 6; 3, 1], 3) == [-1, -5; -5, 0]
-%! && isempty (diff (1))));
-
-%% test/octave.test/matrix/diff-2.m
-%!error diff ([1, 2; 3, 4], -1);
-
-%% test/octave.test/matrix/diff-3.m
-%!error diff ("foo");
-
-%% test/octave.test/matrix/diff-4.m
-%!error diff ();
-
-%% test/octave.test/matrix/diff-5.m
-%!error diff (1, 2, 3, 4);
-
 %% test/octave.test/matrix/find-1.m
 %!assert((find ([1, 0, 1, 0, 1]) == [1, 3, 5]
 %! && find ([1; 0; 3; 0; 1]) == [1; 3; 5]
 %! && find ([0, 0, 2; 0, 3, 0; -1, 0, 0]) == [3; 5; 7]));
 
 %% test/octave.test/matrix/find-2.m
 %!test
 %! [i, j, v] = find ([0, 0, 2; 0, 3, 0; -1, 0, 0]);
 %! 
 %! assert(i == [3; 2; 1] && j == [1; 2; 3] && v == [-1; 3; 2]);
 
 %% test/octave.test/matrix/find-3.m
 %!error <Invalid call to find.*> find ();
 
-%% test/octave.test/matrix/fliplr-1.m
-%!assert((fliplr ([1, 2; 3, 4]) == [2, 1; 4, 3]
-%! && fliplr ([1, 2; 3, 4; 5, 6]) == [2, 1; 4, 3; 6, 5]
-%! && fliplr ([1, 2, 3; 4, 5, 6]) == [3, 2, 1; 6, 5, 4]));
-
-%% test/octave.test/matrix/fliplr-2.m
-%!error <usage.*fliplr> fliplr();
-
-%% test/octave.test/matrix/fliplr-3.m
-%!error fliplr (1, 2);
-
-%% test/octave.test/matrix/flipud-1.m
-%!assert((flipud ([1, 2; 3, 4]) == [3, 4; 1, 2]
-%! && flipud ([1, 2; 3, 4; 5, 6]) == [5, 6; 3, 4; 1, 2]
-%! && flipud ([1, 2, 3; 4, 5, 6]) == [4, 5, 6; 1, 2, 3]));
-
-%% test/octave.test/matrix/flipud-2.m
-%!error flipud ();
-
-%% test/octave.test/matrix/flipud-3.m
-%!error flipud (1, 2);
-
-%% test/octave.test/matrix/rot90-1.m
-%!test
-%! x1 = [1, 2;
-%! 3, 4];
-%! x2 = [2, 4;
-%! 1, 3];
-%! x3 = [4, 3;
-%! 2, 1];
-%! x4 = [3, 1;
-%! 4, 2];
-%! 
-%! assert((rot90 (x1)== x2 && rot90 (x1, 2) == x3 && rot90 (x1, 3) == x4
-%! && rot90 (x1, 4) == x1 && rot90 (x1, 5) == x2 && rot90 (x1, -1) == x4));
-
-%% test/octave.test/matrix/rot90-2.m
-%!error rot90 ();
-
-%% test/octave.test/matrix/rot90-3.m
-%!error rot90 (1, 2, 3);
-
 %% test/octave.test/matrix/reshape-1.m
 %!assert((size (reshape (rand (4, 4), 2, 8)) == [2, 8]
 %! && size (reshape (rand (4, 4), 8, 2)) == [8, 2]
 %! && size (reshape (rand (15, 4), 1, 60)) == [1, 60]
 %! && size (reshape (rand (15, 4), 60, 1)) == [60, 1]));
 
 %% test/octave.test/matrix/reshape-2.m
 %!test
@@ -135,112 +74,31 @@
 %! fail("reshape (s, 2, 3)");
 
 %% test/octave.test/matrix/reshape-3.m
 %!error <Invalid call to reshape.*> reshape ();
 
 %% test/octave.test/matrix/reshape-4.m
 %!error reshape (1, 2, 3, 4);
 
-%% test/octave.test/matrix/shift-1.m
-%!test
-%! a = [1, 2, 3];
-%! b = [4, 5, 6];
-%! c = [7, 8, 9];
-%! 
-%! r = [a, b, c];
-%! m = [a; b; c];
-%! 
-%! assert((shift (r, 3) == [c, a, b]
-%! && shift (r, -6) == [c, a, b]
-%! && shift (r, -3) == [b, c, a]
-%! && shift (m, 1) == [c; a; b]
-%! && shift (m, -2) == [c; a; b]));
-
-%% test/octave.test/matrix/shift-2.m
-%!error shift ();
-
-%% test/octave.test/matrix/shift-3.m
-%!error shift (1, 2, 3, 4);
-
 %% test/octave.test/matrix/sort-1.m
 %!test
 %! a = [1, 2; 2, 3; 3, 1];
 %! s = [1, 1; 2, 2; 3, 3];
 %! i = [1, 3; 2, 1; 3, 2];
 %! [xs, xi] = sort (a);
 %! assert(sort (a) == s && xs == s && xi == i);
 
 %% test/octave.test/matrix/sort-2.m
 %!error <Invalid call to sort.*> sort ();
 
 %% test/octave.test/matrix/sort-3.m
 %!error <Invalid call to sort.*> sort (1, 2, 3, 4);
 
-%% test/octave.test/matrix/tril-1.m
-%!test
-%! a = [1, 2, 3; 4, 5, 6; 7, 8, 9; 10, 11, 12];
-%! 
-%! l0 = [1, 0, 0; 4, 5, 0; 7, 8, 9; 10, 11, 12];
-%! l1 = [1, 2, 0; 4, 5, 6; 7, 8, 9; 10, 11, 12];
-%! l2 = [1, 2, 3; 4, 5, 6; 7, 8, 9; 10, 11, 12];
-%! lm1 = [0, 0, 0; 4, 0, 0; 7, 8, 0; 10, 11, 12];
-%! lm2 = [0, 0, 0; 0, 0, 0; 7, 0, 0; 10, 11, 0];
-%! lm3 = [0, 0, 0; 0, 0, 0; 0, 0, 0; 10, 0, 0];
-%! lm4 = [0, 0, 0; 0, 0, 0; 0, 0, 0; 0, 0, 0];
-%! 
-%! assert((tril (a, -4) == lm4 && tril (a, -3) == lm3
-%! && tril (a, -2) == lm2 && tril (a, -1) == lm1
-%! && tril (a) == l0 && tril (a, 1) == l1 && tril (a, 2) == l2));
 
-%% test/octave.test/matrix/tril-2.m
-%!error tril ();
-
-%% test/octave.test/matrix/tril-3.m
-%!error tril (1, 2, 3);
-
-%% test/octave.test/matrix/triu-1.m
-%!test
-%! a = [1, 2, 3; 4, 5, 6; 7, 8, 9; 10, 11, 12];
-%! 
-%! u0 = [1, 2, 3; 0, 5, 6; 0, 0, 9; 0, 0, 0];
-%! u1 = [0, 2, 3; 0, 0, 6; 0, 0, 0; 0, 0, 0];
-%! u2 = [0, 0, 3; 0, 0, 0; 0, 0, 0; 0, 0, 0];
-%! u3 = [0, 0, 0; 0, 0, 0; 0, 0, 0; 0, 0, 0];
-%! um1 = [1, 2, 3; 4, 5, 6; 0, 8, 9; 0, 0, 12];
-%! um2 = [1, 2, 3; 4, 5, 6; 7, 8, 9; 0, 11, 12];
-%! um3 = [1, 2, 3; 4, 5, 6; 7, 8, 9; 10, 11, 12];
-%! 
-%! assert((triu (a, -3) == um3 && triu (a, -2) == um2
-%! && triu (a, -1) == um1 && triu (a) == u0 && triu (a, 1) == u1
-%! && triu (a, 2) == u2 && triu (a, 3) == u3));
-
-%% test/octave.test/matrix/triu-2.m
-%!error triu ();
-
-%% test/octave.test/matrix/triu-3.m
-%!error triu (1, 2, 3);
-
-%% test/octave.test/matrix/vec-1.m
-%!assert(vec ([1, 2; 3, 4]) == [1; 3; 2; 4] && vec ([1, 3, 2, 4]) == [1; 3; 2; 4]);
-
-%% test/octave.test/matrix/vec-2.m
-%!error vec ();
-
-%% test/octave.test/matrix/vec-3.m
-%!error vec (1, 2);
-
-%% test/octave.test/matrix/vech-1.m
-%!assert(all (vech ([1, 2, 3; 4, 5, 6; 7, 8, 9]) == [1; 4; 7; 5; 8; 9]));
-
-%% test/octave.test/matrix/vech-2.m
-%!error vech ();
-
-%% test/octave.test/matrix/vech-3.m
-%!error vech (1, 2);
 
 %% test/octave.test/matrix/eye-1.m
 %!test
 %! i33 = [1, 0, 0; 0, 1, 0; 0, 0, 1];
 %! i23 = [1, 0, 0; 0, 1, 0];
 %! assert((eye (3) == i33 && eye (size (i33)) == i33 && eye (3, 3) == i33
 %! && eye (2, 3) == i23 && eye (3, 2) == i23'));
 
@@ -349,113 +207,8 @@
 %% test/octave.test/matrix/linspace-4.m
 %!error <Invalid call to linspace.*> linspace (1, 2, 3, 4);
 
 %% test/octave.test/matrix/linspace-5.m
 %!test
 %! warn_fortran_indexing = 1;
 %! fail("linspace ([1, 2; 3, 4], 5, 6)","warning");
 
-%% test/octave.test/matrix/logspace-1.m
-%!test
-%! x1 = logspace (1, 2);
-%! x2 = logspace (1, 2, 10);
-%! x3 = logspace (1, -2, 10);
-%! x4 = logspace (1, pi, 10);
-%! assert((size (x1) == [1, 50] && x1(1) == 10 && x1(50) == 100
-%! && size (x2) == [1, 10] && x2(1) == 10 && x2(10) == 100
-%! && size (x3) == [1, 10] && x3(1) == 10 && x3(10) == 0.01
-%! && size (x4) == [1, 10] && x4(1) == 10 && abs (x4(10) - pi) < sqrt (eps)));
-
-%% test/octave.test/matrix/logspace-2.m
-%!error logspace ([1, 2; 3, 4], 5, 6);
-
-%% test/octave.test/matrix/logspace-3.m
-%!error logspace ();
-
-%% test/octave.test/matrix/logspace-4.m
-%!error logspace (1, 2, 3, 4);
-
-%% test/octave.test/matrix/sylvester_matrix-1.m
-%!assert((sylvester_matrix (1) == [1, 1; 1, -1]
-%! && (sylvester_matrix (2)
-%! == [1, 1, 1, 1; 1, -1, 1, -1; 1, 1, -1, -1; 1, -1, -1, 1])));
-
-%% test/octave.test/matrix/sylvester_matrix-2.m
-%!error sylvester_matrix ([1, 2; 3, 4]);
-
-%% test/octave.test/matrix/sylvester_matrix-3.m
-%!error sylvester_matrix ();
-
-%% test/octave.test/matrix/sylvester_matrix-4.m
-%!error sylvester_matrix (1, 2);
-
-%% test/octave.test/matrix/hankel-1.m
-%!assert((hankel (1) == 1 && hankel ([1, 2]) == [1, 2; 2, 0]
-%! && hankel ([1, 2], [2; -1; -3]) == [1, 2, -1; 2, -1, -3]));
-
-%% test/octave.test/matrix/hankel-2.m
-%!error hankel ([1, 2; 3, 4], [1, 2; 3, 4]);
-
-%% test/octave.test/matrix/hankel-3.m
-%!error hankel ();
-
-%% test/octave.test/matrix/hankel-4.m
-%!error hankel (1, 2, 3);
-
-%% test/octave.test/matrix/hilb-1.m
-%!assert((hilb (2) == [1, 1/2; 1/2, 1/3]
-%! && hilb (3) == [1, 1/2, 1/3; 1/2, 1/3, 1/4; 1/3, 1/4, 1/5]));
-
-%% test/octave.test/matrix/hilb-2.m
-%!error hilb ();
-
-%% test/octave.test/matrix/hilb-3.m
-%!error hilb (1, 2);
-
-%% test/octave.test/matrix/invhilb-1.m
-%!test
-%! result4 = [16, -120, 240, -140;
-%! -120, 1200, -2700, 1680;
-%! 240, -2700, 6480, -4200;
-%! -140, 1680, -4200, 2800];
-%! 
-%! assert((invhilb (1) == 1 && invhilb (2) == [4, -6; -6, 12]
-%! && invhilb (4) == result4
-%! && abs (invhilb (7) * hilb (7) - eye (7)) < sqrt (eps)));
-
-%% test/octave.test/matrix/invhilb-2.m
-%!error invhilb ([1, 2]);
-
-%% test/octave.test/matrix/invhilb-3.m
-%!error invhilb ();
-
-%% test/octave.test/matrix/invhilb-4.m
-%!error invhilb (1, 2);
-
-%% test/octave.test/matrix/toeplitz-1.m
-%!assert((toeplitz (1) == 1
-%! && toeplitz ([1, 2, 3], [1; -3; -5]) == [1, -3, -5; 2, 1, -3; 3, 2, 1]
-%! && toeplitz ([1, 2, 3], [1; -3i; -5i]) == [1, -3i, -5i; 2, 1, -3i; 3, 2, 1]));
-
-%% test/octave.test/matrix/toeplitz-2.m
-%!error toeplitz ([1, 2; 3, 4], 1);
-
-%% test/octave.test/matrix/toeplitz-3.m
-%!error toeplitz ();
-
-%% test/octave.test/matrix/toeplitz-4.m
-%!error toeplitz (1, 2, 3);
-
-%% test/octave.test/matrix/vander-1.m
-%!assert((vander (1) == 1 && vander ([1, 2, 3]) == vander ([1; 2; 3])
-%! && vander ([1, 2, 3]) == [1, 1, 1; 4, 2, 1; 9, 3, 1]
-%! && vander ([1, 2, 3]*i) == [-1, i, 1; -4, 2i, 1; -9, 3i, 1]));
-
-%% test/octave.test/matrix/vander-2.m
-%!error vander ([1, 2; 3, 4]);
-
-%% test/octave.test/matrix/vander-3.m
-%!error vander ();
-
-%% test/octave.test/matrix/vander-4.m
-%!error vander (1, 2);
-
diff --git a/test/test_number.m b/test/test_number.m
--- a/test/test_number.m
+++ b/test/test_number.m
@@ -53,156 +53,8 @@
 %! assert(!(ismatrix (s)));
 
 %% test/octave.test/number/ismatrix-9.m
 %!error <Invalid call to ismatrix.*> ismatrix ();
 
 %% test/octave.test/number/ismatrix-10.m
 %!error <Invalid call to ismatrix.*> ismatrix ([1, 2; 3, 4], 2);
 
-%% test/octave.test/number/isvector-1.m
-%!assert(isvector (1));
-
-%% test/octave.test/number/isvector-2.m
-%!assert(isvector ([1; 2; 3]));
-
-%% test/octave.test/number/isvector-3.m
-%!assert(!(isvector ([])));
-
-%% test/octave.test/number/isvector-4.m
-%!assert(!(isvector ([1, 2; 3, 4])));
-
-%% test/octave.test/number/isvector-5.m
-%!test
-%! warn_str_to_num = 0;
-%! assert((isvector ("t")));
-
-%% test/octave.test/number/isvector-6.m
-%!test
-%! warn_str_to_num = 0;
-%! assert((isvector ("test")));
-
-%% test/octave.test/number/isvector-7.m
-%!assert(!(isvector (["test"; "ing"])));
-
-%% test/octave.test/number/isvector-8.m
-%!test
-%! s.a = 1;
-%! assert((isvector (s)));
-
-%% test/octave.test/number/isvector-9.m
-%!error isvector ();
-
-%% test/octave.test/number/isvector-10.m
-%!error isvector ([1, 2], 2);
-
-%% test/octave.test/number/isscalar-1.m
-%!assert(isscalar (1));
-
-%% test/octave.test/number/isscalar-2.m
-%!assert(!(isscalar ([1, 2])));
-
-%% test/octave.test/number/isscalar-3.m
-%!assert(!(isscalar ([])));
-
-%% test/octave.test/number/isscalar-4.m
-%!assert(!(isscalar ([1, 2; 3, 4])));
-
-%% test/octave.test/number/isscalar-5.m
-%!test
-%! warn_str_to_num = 0;
-%! assert((isscalar ("t")));
-
-%% test/octave.test/number/isscalar-6.m
-%!assert(!(isscalar ("test")));
-
-%% test/octave.test/number/isscalar-7.m
-%!assert(!(isscalar (["test"; "ing"])));
-
-%% test/octave.test/number/isscalar-8.m
-%!test
-%! s.a = 1;
-%! assert((isscalar (s)));
-
-%% test/octave.test/number/isscalar-9.m
-%!error isscalar ();
-
-%% test/octave.test/number/isscalar-10.m
-%!error isscalar (1, 2);
-
-%% test/octave.test/number/issquare-1.m
-%!assert(issquare (1));
-
-%% test/octave.test/number/issquare-2.m
-%!assert(!(issquare ([1, 2])));
-
-%% test/octave.test/number/issquare-3.m
-%!assert(!(issquare ([])));
-
-%% test/octave.test/number/issquare-4.m
-%!assert(issquare ([1, 2; 3, 4]) == 2);
-
-%% test/octave.test/number/issquare-5.m
-%!test
-%! warn_str_to_num = 0;
-%! assert(!(issquare ("t")));
-
-%% test/octave.test/number/issquare-6.m
-%!assert(!(issquare ("test")));
-
-%% test/octave.test/number/issquare-7.m
-%!test
-%! warn_str_to_num = 0;
-%! assert(!(issquare (["test"; "ing"; "1"; "2"])));
-
-%% test/octave.test/number/issquare-8.m
-%!test
-%! s.a = 1;
-%! assert(!(issquare (s)));
-
-%% test/octave.test/number/issquare-9.m
-%!assert(!(issquare ([1, 2; 3, 4; 5, 6])));
-
-%% test/octave.test/number/issquare-10.m
-%!error issquare ();
-
-%% test/octave.test/number/issquare-11.m
-%!error issquare ([1, 2; 3, 4], 2);
-
-%% test/octave.test/number/issymmetric-1.m
-%!assert(issymmetric (1));
-
-%% test/octave.test/number/issymmetric-2.m
-%!assert(!(issymmetric ([1, 2])));
-
-%% test/octave.test/number/issymmetric-3.m
-%!assert(!(issymmetric ([])));
-
-%% test/octave.test/number/issymmetric-4.m
-%!assert(issymmetric ([1, 2; 2, 1]) == 2);
-
-%% test/octave.test/number/issymmetric-5.m
-%!test
-%! warn_str_to_num = 0;
-%! assert(!(issymmetric ("t")));
-
-%% test/octave.test/number/issymmetric-6.m
-%!assert(!(issymmetric ("test")));
-
-%% test/octave.test/number/issymmetric-7.m
-%!test
-%! warn_str_to_num = 0;
-%! assert(!(issymmetric (["te"; "et"])));
-
-%% test/octave.test/number/issymmetric-8.m
-%!test
-%! s.a = 1;
-%! assert(!(issymmetric (s)));
-
-%% test/octave.test/number/issymmetric-9.m
-%!assert(issymmetric ([1, 2.1; 2, 1.1], 0.2) == 2);
-
-%% test/octave.test/number/issymmetric-10.m
-%!error issymmetric ([1, 2; 2, 1], 0, 0);
-
-%% test/octave.test/number/issymmetric-11.m
-%!error issymmetric ();
-
diff --git a/test/test_poly.m b/test/test_poly.m
--- a/test/test_poly.m
+++ b/test/test_poly.m
@@ -13,172 +13,8 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 %% Automatically generated from DejaGNU files
 
-%% test/octave.test/poly/compan-1.m
-%!assert(all (all (compan ([1, 2, 3]) == [-2, -3; 1, 0])));
-
-%% test/octave.test/poly/compan-2.m
-%!assert(all (all (compan ([1; 2; 3]) == [-2, -3; 1, 0])));
-
-%% test/octave.test/poly/compan-3.m
-%!assert(isempty (compan (4)));
-
-%% test/octave.test/poly/compan-4.m
-%!assert(all (all (compan ([3, 2, 1]) == [-2/3, -1/3; 1, 0])));
-
-%% test/octave.test/poly/compan-5.m
-%!error compan ([1,2;3,4]);
-
-%% test/octave.test/poly/compan-6.m
-%!error compan ([]);
-
-%% test/octave.test/poly/conv-1.m
-%!assert(all (all (conv (ones (3, 1), ones (3, 1)) == [1, 2, 3, 2, 1])));
-
-%% test/octave.test/poly/conv-2.m
-%!assert(all (all (conv (ones (1, 3), ones (3, 1)) == [1, 2, 3, 2, 1])));
-
-%% test/octave.test/poly/conv-3.m
-%!assert(all (all (conv (3, [1, 2, 3]) == [3, 6, 9])));
-
-%% test/octave.test/poly/conv-4.m
-%!error conv ([1, 2; 3, 4], 3);
-
-%% test/octave.test/poly/conv-5.m
-%!assert(conv (2, 3),6);
-
-%% test/octave.test/poly/conv-6.m
-%!error conv (2, []);
-
-%% test/octave.test/poly/deconv-1.m
-%!test
-%! [b, r] = deconv ([3, 6, 9, 9], [1, 2, 3]);
-%! assert(all (all (b == [3, 0])) && all (all (r == [0, 0, 0, 9])));
-
-%% test/octave.test/poly/deconv-2.m
-%!test
-%! [b, r] = deconv ([3, 6], [1, 2, 3]);
-%! assert(b == 0 && all (all (r == [0, 3, 6])));
-
-%% test/octave.test/poly/deconv-3.m
-%!test
-%! [b, r] = deconv ([3, 6], [1; 2; 3]);
-%! assert(b == 0 && all (all (r == [0, 3, 6])));
-
-%% test/octave.test/poly/deconv-4.m
-%!error [b, r] = deconv ([3, 6], [1, 2; 3, 4]);;
-
-%% test/octave.test/poly/deconv-5.m
-%!error <number of rows must match> [b, r] = deconv ([3; 6], [1, 2, 3]);
-
-%% test/octave.test/poly/poly-1.m
-%!assert(all (all (poly ([1, 2, 3]) == [1, -6, 11, -6])));
-
-%% test/octave.test/poly/poly-2.m
-%!assert(all (all (abs (poly ([1, 2; 3, 4]) - [1, -5, -2]) < sqrt (eps))));
-
-%% test/octave.test/poly/poly-3.m
-%!error poly ([1, 2, 3; 4, 5, 6]);
-
-%% test/octave.test/poly/poly-4.m
-%!assert(poly ([]),1);
-
-%% test/octave.test/poly/polyderiv-1.m
-%!assert(all (all (polyderiv ([1, 2, 3]) == [2, 2])));
-
-%% test/octave.test/poly/polyderiv-2.m
-%!assert(polyderiv (13) == 0);
-
-%% test/octave.test/poly/polyderiv-3.m
-%!error polyderiv ([]);
-
-%% test/octave.test/poly/polyderiv-4.m
-%!error polyderiv ([1, 2; 3, 4]);
-
-%% test/octave.test/poly/polyfit-1.m
-%!test
-%! x = [-2, -1, 0, 1, 2];
-%! assert(all (all (abs (polyfit (x, x.^2+x+1, 2) - [1, 1, 1]) < sqrt (eps))));
-
-%% test/octave.test/poly/polyfit-2.m
-%!test
-%! x = [-2, -1, 0, 1, 2];
-%! assert(all (all (abs (polyfit (x, x.^2+x+1, 3) - [0, 1, 1, 1]) < sqrt (eps))));
-
-%% test/octave.test/poly/polyfit-3.m
-%!error polyfit ([1, 2; 3, 4], [1, 2; 3, 4], 4);
-
-%% test/octave.test/poly/polyfit-4.m
-%!test
-%! x = [-2, -1, 0, 1, 2];
-%! fail("polyfit (x, x.^2+x+1)");
-
-%% test/octave.test/poly/polyfit-5.m
-%!test
-%! x = [-2, -1, 0, 1, 2];
-%! fail("polyfit (x, x.^2+x+1, [])");
-
-%% test/octave.test/poly/polyinteg-1.m
-%!assert(all (all (polyinteg ([2, 2]) == [1, 2, 0])));
-
-%% test/octave.test/poly/polyinteg-2.m
-%!assert(isempty (polyinteg ([])));
-
-%% test/octave.test/poly/polyinteg-3.m
-%!assert(all (all (polyinteg (3) == [3, 0])));
-
-%% test/octave.test/poly/polyinteg-4.m
-%!error polyinteg ([1, 2; 3, 4]);
-
-%% test/octave.test/poly/polyreduce-1.m
-%!assert(all (all (polyreduce ([0, 0, 1, 2, 3]) == [1, 2, 3])));
-
-%% test/octave.test/poly/polyreduce-2.m
-%!assert(all (all (polyreduce ([1, 2, 3, 0, 0]) == [1, 2, 3, 0, 0])));
-
-%% test/octave.test/poly/polyreduce-3.m
-%!assert(all (all (polyreduce ([1, 0, 3]) == [1, 0, 3])));
-
-%% test/octave.test/poly/polyreduce-4.m
-%!assert(isempty (polyreduce ([])));
-
-%% test/octave.test/poly/polyreduce-5.m
-%!error polyreduce ([1, 2; 3, 4]);
-
-%% test/octave.test/poly/polyval-1.m
-%!assert(polyval ([1, 1, 1], 2) == 7);
-
-%% test/octave.test/poly/polyval-2.m
-%!assert(all (all (polyval ([1, 1, 1], [0; 1; 2]) == [1; 3; 7])));
-
-%% test/octave.test/poly/polyval-3.m
-%!assert(isempty (polyval ([1, 1, 1], [])));
-
-%% test/octave.test/poly/polyval-4.m
-%!assert(all (all (polyval ([1, 1, 1], [-1, 0; 1, 2]) == [1, 1; 3, 7])));
-
-%% test/octave.test/poly/polyval-5.m
-%!error polyval ([1, 2; 3, 4], [-1, 0; 1, 2]);
-
-%% test/octave.test/poly/polyval-6.m
-%!assert(isempty (polyval ([], [-1, 0; 1, 2])));
-
-%% test/octave.test/poly/polyvalm-1.m
-%!assert(isempty (polyvalm ([], [1, 2; 3, 4])));
-
-%% test/octave.test/poly/polyvalm-2.m
-%!error polyvalm ([1, 1, 1], [1, 2; 3, 4; 5, 6]);
-
-%% test/octave.test/poly/roots-1.m
-%!assert(all (all (abs (roots ([1, -6, 11, -6]) - [3; 2; 1]) < sqrt (eps))));
-
-%% test/octave.test/poly/roots-2.m
-%!assert(isempty (roots ([])));
-
-%% test/octave.test/poly/roots-3.m
-%!error roots ([1, 2; 3, 4]);
-
diff --git a/test/test_set.m b/test/test_set.m
--- a/test/test_set.m
+++ b/test/test_set.m
@@ -13,65 +13,8 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 %% Automatically generated from DejaGNU files
 
-%% test/octave.test/set/create_set-1.m
-%!assert(all (all (create_set ([1, 2; 3, 4; 2, 4]) == [1, 2, 3, 4])));
-
-%% test/octave.test/set/create_set-2.m
-%!assert(all (all (create_set ([1; 2; 3; 4; 2; 4]) == [1, 2, 3, 4])));
-
-%% test/octave.test/set/create_set-3.m
-%!assert(isempty (create_set ([])));
-
-%% test/octave.test/set/create_set-4.m
-%!error create_set (1, 2);
-
-%% test/octave.test/set/union-1.m
-%!assert(all (all (union ([1, 2, 4], [2, 3, 5]) == [1, 2, 3, 4, 5])));
-
-%% test/octave.test/set/union-2.m
-%!assert(all (all (union ([1; 2; 4], [2, 3, 5]) == [1, 2, 3, 4, 5])));
-
-%% test/octave.test/set/union-3.m
-%!assert(all (all (union ([1, 2, 3], [5; 7; 9]) == [1, 2, 3, 5, 7, 9])));
-
-%% test/octave.test/set/union-4.m
-%!error union (1);
-
-%% test/octave.test/set/union-5.m
-%!error union (1, 2, 3);
-
-%% test/octave.test/set/intersection-1.m
-%!assert(all (all (intersection ([1, 2, 3], [2, 3, 5]) == [2, 3])));
-
-%% test/octave.test/set/intersection-2.m
-%!assert(all (all (intersection ([1; 2; 3], [2, 3, 5]) == [2, 3])));
-
-%% test/octave.test/set/intersection-3.m
-%!assert(isempty (intersection ([1, 2, 3], [4; 5; 6])));
-
-%% test/octave.test/set/intersection-4.m
-%!error intersection (1);
-
-%% test/octave.test/set/intersection-5.m
-%!error intersection (1, 2, 5);
-
-%% test/octave.test/set/complement-1.m
-%!assert(all (all (complement ([1, 2, 3], [3; 4; 5; 6]) == [4, 5, 6])));
-
-%% test/octave.test/set/complement-2.m
-%!assert(all (all (complement ([1, 2, 3], [3, 4, 5, 6]) == [4, 5, 6])));
-
-%% test/octave.test/set/complement-3.m
-%!assert(isempty (complement ([1, 2, 3], [3, 2, 1])));
-
-%% test/octave.test/set/complement-4.m
-%!error complement (1);
-
-%% test/octave.test/set/complement-5.m
-%!error complement (1, 2, 3);
-
diff --git a/test/test_signal.m b/test/test_signal.m
--- a/test/test_signal.m
+++ b/test/test_signal.m
@@ -97,49 +97,9 @@
 %! sy = cos(n*y);
 %! 
 %! S = kron(fft(sx)',fft(sy));
 %! answer=kron(sx',sy);
 %! s = ifft2(S);
 %! 
 %! assert(all( all( abs(s-answer) < 30*eps ) ));
 
-%% test/octave.test/signal/unwrap-1.m
-%!function t = xassert(a,b,tol)
-%!  if (nargin == 1)
-%!    t = all(a(:));
-%!  else
-%!    if (nargin == 2)
-%!      tol = 0;
-%!    endif
-%!    if (any (size(a) != size(b)))
-%!      t = 0;
-%!    elseif (any (abs(a(:) - b(:)) > tol))
-%!      t = 0;
-%!    else
-%!      t = 1;
-%!    endif
-%!  endif
-%!
-%!test
-%! 
-%! i = 0;
-%! t = [];
-%! 
-%! r = [0:100];                        # original vector
-%! w = r - 2*pi*floor((r+pi)/(2*pi));  # wrapped into [-pi,pi]
-%! tol = 1e3*eps;                      # maximum expected deviation
-%! 
-%! t(++i) = xassert(r, unwrap(w), tol);               #unwrap single row
-%! t(++i) = xassert(r', unwrap(w'), tol);             #unwrap single column
-%! t(++i) = xassert([r',r'], unwrap([w',w']), tol);   #unwrap 2 columns
-%! t(++i) = xassert([r;r], unwrap([w;w],[],2), tol);  #verify that dim works
-%! t(++i) = xassert(r+10, unwrap(10+w), tol);         #verify that r(1)>pi works
-%! 
-%! t(++i) = xassert(w', unwrap(w',[],2));  #unwrap col by rows should not change it
-%! t(++i) = xassert(w, unwrap(w,[],1));    #unwrap row by cols should not change it
-%! t(++i) = xassert([w;w], unwrap([w;w])); #unwrap 2 rows by cols should not change them
-%! 
-%! ## verify that setting tolerance too low will cause bad results.
-%! t(++i) = xassert(any(abs(r - unwrap(w,0.8)) > 100));
-%! 
-%! assert(all(t));
 
diff --git a/test/test_stats.m b/test/test_stats.m
--- a/test/test_stats.m
+++ b/test/test_stats.m
@@ -13,102 +13,8 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 %% Automatically generated from DejaGNU files
 
-%% test/octave.test/stats/mean-1.m
-%!test
-%! x = -10:10;
-%! y = x';
-%! z = [y, y+10];
-%! assert(mean (x) == 0 && mean (y) == 0 && mean (z) == [0, 10]);
-
-%% test/octave.test/stats/mean-2.m
-%!error mean ();
-
-%% test/octave.test/stats/mean-3.m
-%!error mean (1, 2, 3);
-
-%% test/octave.test/stats/median-1.m
-%!test
-%! x = [1, 2, 3, 4, 5, 6];
-%! x2 = x';
-%! y = [1, 2, 3, 4, 5, 6, 7];
-%! y2 = y';
-%! 
-%! assert((median (x) == median (x2) && median (x) == 3.5
-%! && median (y) == median (y2) && median (y) == 4
-%! && median ([x2, 2*x2]) == [3.5, 7]
-%! && median ([y2, 3*y2]) == [4, 12]));
-
-%% test/octave.test/stats/median-2.m
-%!error median ();
-
-%% test/octave.test/stats/median-3.m
-%!error median (1, 2, 3);
-
-%% test/octave.test/stats/std-1.m
-%!test
-%! x = ones (10, 2);
-%! y = [1, 3];
-%! assert(std (x) == [0, 0] && abs (std (y) - sqrt (2)) < sqrt (eps));
-
-%% test/octave.test/stats/std-2.m
-%!error std ();
-
-%% test/octave.test/stats/std-3.m
-%!error std (1, 2, 3, 4);
-
-%% test/octave.test/stats/cov-1.m
-%!test
-%! x = rand (10);
-%! cx1 = cov (x);
-%! cx2 = cov (x, x);
-%! assert(size (cx1) == [10, 10] && size (cx2) == [10, 10] && cx1 == cx2);
-
-%% test/octave.test/stats/cov-2.m
-%!error cov ();
-
-%% test/octave.test/stats/cov-3.m
-%!error cov (1, 2, 3);
-
-%% test/octave.test/stats/corrcoef-1.m
-%!test
-%! x = rand (10);
-%! cc1 = corrcoef (x);
-%! cc2 = corrcoef (x, x);
-%! assert((size (cc1) == [10, 10] && size (cc2) == [10, 10]
-%! && abs (cc1 - cc2) < sqrt (eps)));
-
-%% test/octave.test/stats/corrcoef-2.m
-%!error corrcoef ();
-
-%% test/octave.test/stats/corrcoef-3.m
-%!error corrcoef (1, 2, 3);
-
-%% test/octave.test/stats/kurtosis-1.m
-%!test
-%! x = [-1; 0; 0; 0; 1];
-%! y = [x, 2*x];
-%! assert(all (abs (kurtosis (y) - [-1.4, -1.4]) < sqrt (eps)));
-
-%% test/octave.test/stats/kurtosis-2.m
-%!error kurtosis ();
-
-%% test/octave.test/stats/kurtosis-3.m
-%!error kurtosis (1, 2, 3);
-
-%% test/octave.test/stats/mahalanobis-2.m
-%!error mahalanobis ();
-
-%% test/octave.test/stats/mahalanobis-3.m
-%!error mahalanobis (1, 2, 3);
-
-%% test/octave.test/stats/skewness-2.m
-%!error skewness ();
-
-%% test/octave.test/stats/skewness-3.m
-%!error skewness (1, 2, 3);
-
diff --git a/test/test_string.m b/test/test_string.m
--- a/test/test_string.m
+++ b/test/test_string.m
@@ -159,207 +159,41 @@
 %! assert(!(ischar (s)));
 
 %% test/octave.test/string/ischar-10.m
 %!error <Invalid call to ischar.*> ischar ();
 
 %% test/octave.test/string/ischar-11.m
 %!error <Invalid call to ischar.*> ischar ("test", 1);
 
-%% test/octave.test/string/blanks-1.m
-%!assert(strcmp (blanks (3), "   "));
-
-%% test/octave.test/string/blanks-2.m
-%!error blanks ();
-
-%% test/octave.test/string/blanks-3.m
-%!error blanks (1, 2);
 
 %% test/octave.test/string/char-1.m
 %!assert(strcmp (char ([65, 83, 67, 73, 73]), "ASCII"));
 
 %% test/octave.test/string/char-2.m
 %!error <Invalid call to char.*> char ();
 
 %% test/octave.test/string/char-3.m
 %!test
 %! x = char ("foo", "bar", "foobar");
 %! assert((strcmp (x(1,:), "foo   ")
 %! && strcmp (x(2,:), "bar   ")
 %! && strcmp (x(3,:), "foobar")));
 
-%% test/octave.test/string/int2str-1.m
-%!assert(strcmp (int2str (-123), "-123") && strcmp (int2str (1.2), "1"));
-
-%% test/octave.test/string/int2str-2.m
-%!error int2str ();
-
-%% test/octave.test/string/int2str-3.m
-%!error int2str (1, 2);
-
-%% test/octave.test/string/num2str-1.m
-%!assert((strcmp (num2str (123), "123") && strcmp (num2str (1.23), "1.23")));
-
-%% test/octave.test/string/num2str-2.m
-%!error num2str ();
-
-%% test/octave.test/string/num2str-3.m
-%!error num2str (1, 2, 3);
-
-%% test/octave.test/string/strcat-1.m
-%!assert((strcmp (strcat ("foo", "bar"), "foobar")
-%! && strcmp (strcat (["a"; "bb"], ["foo"; "bar"]), ["a foo"; "bbbar"])));
-
-%% test/octave.test/string/strcat-2.m
-%!error strcat ();
-
-%% test/octave.test/string/strcat-3.m
-%!error strcat (1, 2);
-
-%% test/octave.test/string/str2mat-1.m
-%!assert(strcmp (str2mat ("a", "bb", "ccc"), ["a  "; "bb "; "ccc"]));
-
-%% test/octave.test/string/str2mat-2.m
-%!error str2mat ();
-
-%% test/octave.test/string/str2mat-3.m
-%!assert(all (str2mat (1, 2, 3) == setstr ([1; 2; 3])));
-
-%% test/octave.test/string/deblank-1.m
-%!assert(strcmp (deblank (" f o o  "), " f o o"));
-
-%% test/octave.test/string/deblank-2.m
-%!error deblank ();
-
-%% test/octave.test/string/deblank-3.m
-%!error deblank ("foo", "bar");
-
-%% test/octave.test/string/deblank-4.m
-%!error deblank (1);
-
-%% test/octave.test/string/findstr-1.m
-%!assert((findstr ("abababa", "a") == [1, 3, 5, 7]
-%! && findstr ("abababa", "aba") == [1, 3, 5]
-%! && findstr ("abababa", "aba", 0) == [1, 5]));
-
-%% test/octave.test/string/findstr-2.m
-%!error findstr ();
-
-%% test/octave.test/string/findstr-3.m
-%!error findstr ("foo", "bar", 3, 4);
-
-%% test/octave.test/string/index-1.m
-%!assert(index ("foobarbaz", "b") == 4 && index ("foobarbaz", "z") == 9);
-
-%% test/octave.test/string/index-2.m
-%!error index ();
-
-%% test/octave.test/string/index-3.m
-%!error index ("foo", "bar", 3);
-
-%% test/octave.test/string/rindex-1.m
-%!assert(rindex ("foobarbaz", "b") == 7 && rindex ("foobarbaz", "o") == 3);
-
-%% test/octave.test/string/rindex-2.m
-%!error rindex ();
-
-%% test/octave.test/string/rindex-3.m
-%!error rindex ("foo", "bar", 3);
-
-%% test/octave.test/string/split-1.m
-%!assert(all (all (split ("Test string", "t") == ["Tes "; " s  "; "ring"])));
-
-%% test/octave.test/string/split-2.m
-%!error split ();
-
-%% test/octave.test/string/split-3.m
-%!assert(all (strcmp (split ("foo bar baz", " ", 2), ["foo"; "bar baz"])));
-
-%% test/octave.test/string/split-4.m
-%!error split ("foo", "bar", 3, 4);
-
-%% test/octave.test/string/strrep-1.m
-%!assert(strcmp (strrep ("This is a test string", "is", "&%$"),
-%! "Th&%$ &%$ a test string"));
-
-%% test/octave.test/string/strrep-2.m
-%!error strrep ();
-
-%% test/octave.test/string/strrep-3.m
-%!error strrep ("foo", "bar", 3, 4);
-
-%% test/octave.test/string/substr-1.m
-%!assert(strcmp (substr ("This is a test string", 6, 9), "is a test"));
-
-%% test/octave.test/string/substr-2.m
-%!error substr ();
-
-%% test/octave.test/string/substr-3.m
-%!error substr ("foo", 2, 3, 4);
 
 %% test/octave.test/string/strcmp-1.m
 %!assert(strcmp ("foobar", "foobar") && strcmp ("fooba", "foobar") == 0);
 
 %% test/octave.test/string/strcmp-2.m
 %!error <Invalid call to strcmp.*> strcmp ();
 
 %% test/octave.test/string/strcmp-3.m
 %!error <Invalid call to strcmp.*> strcmp ("foo", "bar", 3);
 
-%% test/octave.test/string/bin2dec-1.m
-%!assert(bin2dec ("1110") == 14);
 
-%% test/octave.test/string/bin2dec-2.m
-%!error bin2dec ();
-
-%% test/octave.test/string/bin2dec-3.m
-%!error bin2dec ("str", 1);
-
-%% test/octave.test/string/dec2bin-1.m
-%!assert(strcmp (dec2bin (14), "1110"));
-
-%% test/octave.test/string/dec2bin-2.m
-%!error dec2bin ();
-
-%% test/octave.test/string/dec2bin-3.m
-%!assert(strcmp (dec2bin (14, 6), "001110")
-%! );
-
-%% test/octave.test/string/dec2bin-4.m
-%!error dec2bin (1, 2, 3);
-
-%% test/octave.test/string/dec2hex-1.m
-%!assert(strcmp (tolower (dec2hex (2748)), "abc"));
-
-%% test/octave.test/string/dec2hex-2.m
-%!error dec2hex ();
-
-%% test/octave.test/string/dec2hex-3.m
-%!assert(strcmp (tolower (dec2hex (2748, 5)), "00abc"));
-
-%% test/octave.test/string/dec2hex-4.m
-%!error dec2hex (1, 2, 3);
-
-%% test/octave.test/string/hex2dec-1.m
-%!assert(hex2dec ("12b") == 299 && hex2dec ("12B") == 299);
-
-%% test/octave.test/string/hex2dec-2.m
-%!error hex2dec ();
-
-%% test/octave.test/string/hex2dec-3.m
-%!error hex2dec ("str", 1);
-
-%% test/octave.test/string/str2num-1.m
-%!assert(str2num ("-1.3e2") == -130 && str2num ("[1, 2; 3, 4]") == [1, 2; 3, 4]);
-
-%% test/octave.test/string/str2num-2.m
-%!error str2num ();
-
-%% test/octave.test/string/str2num-3.m
-%!error str2num ("string", 1);
 
 %% test/octave.test/string/undo_string_escapes-1.m
 %!assert(strcmp (undo_string_escapes ("abc\a\b\n\r\t\v\f123"),
 %! "abc\\a\\b\\n\\r\\t\\v\\f123"));
 
 %% test/octave.test/string/undo_string_escapes-2.m
 %!error <Invalid call to undo_string_escapes.*> undo_string_escapes ();
 
diff --git a/test/test_system.m b/test/test_system.m
--- a/test/test_system.m
+++ b/test/test_system.m
@@ -16,26 +16,16 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 %% Automatically generated from DejaGNU files
 
 %% test/octave.test/system/time-1.m
 %!assert(time () > 0);
 
-%% test/octave.test/system/ctime-1.m
-%!test
-%! t = time ();
-%! assert(strcmp (asctime (localtime (t)), ctime (t)));
-
-%% test/octave.test/system/ctime-2.m
-%!error ctime ();
-
-%% test/octave.test/system/ctime-3.m
-%!error ctime (1, 2);
 
 %% test/octave.test/system/gmtime-1.m
 %!test
 %! ts = gmtime (time ());
 %! assert((isstruct (ts)
 %! && struct_contains (ts, "usec")
 %! && struct_contains (ts, "year")
 %! && struct_contains (ts, "mon")
@@ -80,82 +70,39 @@
 %! assert(fix (mktime (localtime (t))) == fix (t));
 
 %% test/octave.test/system/mktime-2.m
 %!error <Invalid call to mktime.*> mktime ();
 
 %% test/octave.test/system/mktime-3.m
 %!error <Invalid call to mktime.*> mktime (1, 2, 3);
 
-%% test/octave.test/system/asctime-1.m
-%!test
-%! t = time ();
-%! assert(strcmp (asctime (localtime (t)), ctime (t)));
-
-%% test/octave.test/system/asctime-2.m
-%!error asctime ();
-
-%% test/octave.test/system/asctime-3.m
-%!error asctime (1, 2);
 
 %% test/octave.test/system/strftime-1.m
 %!assert((isstr (strftime ("%%%n%t%H%I%k%l", localtime (time ())))
 %! && isstr (strftime ("%M%p%r%R%s%S%T", localtime (time ())))
 %! && isstr (strftime ("%X%Z%z%a%A%b%B", localtime (time ())))
 %! && isstr (strftime ("%c%C%d%e%D%h%j", localtime (time ())))
 %! && isstr (strftime ("%m%U%w%W%x%y%Y", localtime (time ())))));
 
 %% test/octave.test/system/strftime-2.m
 %!error <Invalid call to strftime.*> strftime ();
 
 %% test/octave.test/system/strftime-3.m
 %!error <Invalid call to strftime.*> strftime ("foo", localtime (time ()), 1);
 
-%% test/octave.test/system/clock-1.m
-%!test
-%! t1 = clock;
-%! t2 = str2num (strftime ("[%Y, %m, %d, %H, %M, %S]", localtime (time ())));
-%! assert(etime (t1, t2) < 1);
-
-%% test/octave.test/system/date-1.m
-%!assert(strcmp (date (), strftime ("%d-%b-%Y", localtime (time ()))));
-
-%% test/octave.test/system/etime-1.m
-%!test
-%! t1 = [1993, 8, 20, 4, 56, 1];
-%! t2 = [1993, 8, 21, 4, 56, 1];
-%! t3 = [1993, 8, 20, 5, 56, 1];
-%! t4 = [1993, 8, 20, 4, 57, 1];
-%! t5 = [1993, 8, 20, 4, 56, 14];
-%! 
-%! assert((etime (t2, t1) == 86400 && etime (t3, t1) == 3600
-%! && etime (t4, t1) == 60 && etime (t5, t1) == 13));
-
-%% test/octave.test/system/etime-2.m
-%!error etime ();
-
-%% test/octave.test/system/etime-3.m
-%!error etime (1, 2, 3);
-
 %% test/octave.test/system/cputime-1.m
 %!test
 %! [t1, u1, s1] = cputime ();
 %! for i = 1:200
 %! sin (i);
 %! endfor
 %! [t2, u2, s2] = cputime ();
 %! assert(t1 == u1 + s1 && t2 == u2 + s2 && t2 >= t1 && u2 >= u2 && s2 >= s2);
 
-%% test/octave.test/system/is_leap_year-1.m
-%!assert((is_leap_year (2000) == 1 && is_leap_year (1976) == 1
-%! && is_leap_year (1000) == 0 && is_leap_year (1800) == 0
-%! && is_leap_year (1600) == 1));
-
-%% test/octave.test/system/is_leap_year-2.m
-%!error is_leap_year (1, 2);
 
 %% test/octave.test/system/tic-toc-1.m
 %!test
 %! tic ();
 %! sleep (2);
 %! assert(toc () > 0);
 
 %% test/octave.test/system/pause-1.m
@@ -475,19 +422,16 @@
 %! assert(pwd(), xdir);
 
 %% test/octave.test/system/cd-2.m
 %!error cd (1);
 
 %% test/octave.test/system/pwd-1.m
 %!assert(isstr (pwd ()));
 
-%% test/octave.test/system/ls-1.m
-%!error ls (1);
-
 %% test/octave.test/system/getpwent-1.m
 %!test
 %! s = getpwent ();
 %! endpwent (); 
 %! assert((isstruct (s)
 %! && struct_contains (s, "name")
 %! && struct_contains (s, "passwd")
 %! && struct_contains (s, "uid")
@@ -587,30 +531,17 @@
 %! assert(strcmp (x.name, y.name) && x.gid == y.gid);
 
 %% test/octave.test/system/setgrent-2.m
 %!error <Invalid call to setgrent.*> setgrent (1);
 
 %% test/octave.test/system/endgrent-1.m
 %!error <Invalid call to endgrent.*> endgrent (1);
 
-%% test/octave.test/system/computer-1.m
-%!assert((isstr (computer ())
-%! && computer () == octave_config_info ("canonical_host_type")));
-
-%% test/octave.test/system/computer-2.m
-%!warning a =computer(2);
-
 %% test/octave.test/system/isieee-1.m
 %!assert(isieee () == 1 || isieee () == 0);
 
-%% test/octave.test/system/version-1.m
-%!assert(isstr (version ()) && strcmp (version (), OCTAVE_VERSION));
-
-%% test/octave.test/system/version-2.m
-%!warning version (1);
-
 %% test/octave.test/system/octave_config_info-1.m
 %!assert(isstruct (octave_config_info ()));
 
 %% test/octave.test/system/getrusage-1.m
 %!assert(isstruct (getrusage ()));
 
