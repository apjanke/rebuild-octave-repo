# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1204303740 -3600
#      Fri Feb 29 17:49:00 2008 +0100
# Node ID 56254a8d4d5972c639c68eeac0690ee45207dc05
# Parent  3249f64f69b2d89523ead44446f73ef073c22072
Smarter reference counting in base_property.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -22,16 +22,21 @@ 2008-06-04  Shai Ayal  <shaiay@users.sou
 
 	* graphics.h.in (axes::properties::update_xlim): call the new
 	axes::properties::calc_ticks_and_lims method
 	(axes::properties::update_ylim): ditto
 	(axes::properties::update_zlim): ditto
 
 2008-06-04  Michael Goffioul <michael.goffioul@gmail.com>
 
+	* graphics.h.in (base_property::base_property): Set internal counter
+	to 1 by default.
+	(property::property): Adapt constructors to default counter value in
+	base_property.
+
 	* graphics.h.in (base_properties::get_property): Make virtual and
 	remove const modifier.
 	* graphics.cc (base_properties::get_property): Can return built-in
 	properties. Generate an error if the property does not exist.
 	(base_properties::add_listener): Use get_property.
 	(Fadd_listener): Add documentation.
 	* genprops.awk (emit_common_declarations, emit_source): Emit code for
 	overloaded get_property method.
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -342,23 +342,23 @@ class property;
 enum listener_mode { POSTSET };
 
 class base_property
 {
 public:
   friend class property;
 
 public:
-  base_property (void) : count (0) { }
+  base_property (void) : count (1) { }
 
   base_property (const std::string& s, const graphics_handle& h)
-    : count (0), name (s), parent (h), hidden (false) { }
+    : count (1), name (s), parent (h), hidden (false) { }
 
   base_property (const base_property& p)
-    : count (0), name (p.name), parent (p.parent), hidden (p.hidden) { }
+    : count (1), name (p.name), parent (p.parent), hidden (p.hidden) { }
 
   virtual ~base_property (void) { }
 
   bool ok (void) const { return parent.ok (); }
 
   std::string get_name (void) const { return name; }
 
   void set_name (const std::string& s) { name = s; }
@@ -1084,20 +1084,20 @@ private:
 };
 
 // ---------------------------------------------------------------------
 
 class property
 {
 public:
   property (void) : rep (new base_property ("", graphics_handle ()))
-    { rep->count++; }
+    { }
 
   property (base_property *bp, bool persist = false) : rep (bp)
-    { rep->count++; if (persist) rep->count++; }
+    { if (persist) rep->count++; }
 
   property (const property& p)
     {
       rep = p.rep;
       rep->count++;
     }
 
   ~property (void)
