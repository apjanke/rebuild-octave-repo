# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1235112288 -3600
#      Fri Feb 20 07:44:48 2009 +0100
# Node ID 3efa512a0957c9b9515663df7111804c50c735fc
# Parent  40ff50ce30520fd223c1331ec9047c9e63ecd7f0
make issorted work for cells

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,12 +1,15 @@
 2009-02-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base-mat.cc (octave_base_matrix<MT>::do_index_op):
 	Correctly compute all-scalar index.
+	* ov-cell.cc (octave_cell::is_sorted, octave_cell::is_sorted_rows):
+	New methods.
+	* ov-cell.h: Declare them.
 
 2009-02-20  John W. Eaton  <jwe@octave.org>
 
 	* ov-base-mat.cc (octave_base_matrix<MT>::assign):
 	Correctly compute all-scalar index.
 
 	* symbtab.cc (symbol_table::stash_dir_name_for_subfunctions):
 	New function.
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -478,16 +478,34 @@ octave_cell::sort (Array<octave_idx_type
       retval = Cell (tmp.sort (sidx, dim, mode));
     }
   else
     error ("sort: only cell arrays of character strings may be sorted");
   
   return retval;
 }
 
+sortmode 
+octave_cell::is_sorted (sortmode mode) const
+{
+  sortmode retval = UNSORTED;
+
+  if (is_cellstr ())
+    {
+      Array<std::string> tmp = cellstr_value ();
+
+      retval = tmp.is_sorted (mode);
+    }
+  else
+    error ("issorted: not a cell array of strings");
+  
+  return retval;
+}
+
+
 Array<octave_idx_type>
 octave_cell::sort_rows_idx (sortmode mode) const
 {
   Array<octave_idx_type> retval;
 
   if (is_cellstr ())
     {
       Array<std::string> tmp = cellstr_value ();
@@ -495,16 +513,33 @@ octave_cell::sort_rows_idx (sortmode mod
       retval = tmp.sort_rows_idx (mode);
     }
   else
     error ("sortrows: only cell arrays of character strings may be sorted");
   
   return retval;
 }
 
+sortmode 
+octave_cell::is_sorted_rows (sortmode mode) const
+{
+  sortmode retval = UNSORTED;
+
+  if (is_cellstr ())
+    {
+      Array<std::string> tmp = cellstr_value ();
+
+      retval = tmp.is_sorted_rows (mode);
+    }
+  else
+    error ("issorted: not a cell array of strings");
+  
+  return retval;
+}
+
 bool
 octave_cell::is_true (void) const
 {
   error ("invalid conversion from cell array to logical value");
   return false;
 }
 
 octave_value_list
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -94,18 +94,22 @@ public:
 
   size_t byte_size (void) const;
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const;
 
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
 		     sortmode mode = ASCENDING) const;
 
+  sortmode is_sorted (sortmode mode = UNSORTED) const;
+
   Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const;
 
+  sortmode is_sorted_rows (sortmode mode = UNSORTED) const;
+
   bool is_matrix_type (void) const { return false; }
 
   bool is_numeric_type (void) const { return false; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
