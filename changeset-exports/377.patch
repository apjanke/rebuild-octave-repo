# HG changeset patch
# User jwe
# Date 762725640 0
#      Thu Mar 03 20:14:00 1994 +0000
# Node ID 1d3dbdfd0d19cc2f222e04f74cf3bb84002d6468
# Parent  63237a8f5725ca15ec26fd81650acbcaf105ae13
[project @ 1994-03-03 20:13:03 by jwe]

diff --git a/liboctave/ColVector.cc b/liboctave/ColVector.cc
--- a/liboctave/ColVector.cc
+++ b/liboctave/ColVector.cc
@@ -1,12 +1,12 @@
 // ColumnVector manipulations.                            -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993 John W. Eaton
+Copyright (C) 1992, 1993, 1994 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -464,16 +464,37 @@ ostream&
 operator << (ostream& os, const ColumnVector& a)
 {
 //  int field_width = os.precision () + 7;
   for (int i = 0; i < a.length (); i++)
     os << /* setw (field_width) << */ a.elem (i) << "\n";
   return os;
 }
 
+istream&
+operator >> (istream& is, ColumnVector& a)
+{
+  int len = a.length();
+
+  if (len < 1)
+    is.clear (ios::badbit);
+  else
+    {
+      double tmp;
+      for (int i = 0; i < len; i++)
+        {
+          is >> tmp;
+          if (is)
+            a.elem (i) = tmp;
+          else
+            break;
+        }
+    }
+}
+
 /*
  * Complex Column Vector class
  */
 
 ComplexColumnVector::ComplexColumnVector (const ColumnVector& a)
    : Array<Complex> (a.length ())
 {
   for (int i = 0; i < length (); i++)
@@ -1037,14 +1058,35 @@ ostream&
 operator << (ostream& os, const ComplexColumnVector& a)
 {
 //  int field_width = os.precision () + 7;
   for (int i = 0; i < a.length (); i++)
     os << /* setw (field_width) << */ a.elem (i) << "\n";
   return os;
 }
 
+istream&
+operator >> (istream& is, ComplexColumnVector& a)
+{
+  int len = a.length();
+
+  if (len < 1)
+    is.clear (ios::badbit);
+  else
+    {
+      double tmp;
+      for (int i = 0; i < len; i++)
+        {
+          is >> tmp;
+          if (is)
+            a.elem (i) = tmp;
+          else
+            break;
+        }
+    }
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/RowVector.cc b/liboctave/RowVector.cc
--- a/liboctave/RowVector.cc
+++ b/liboctave/RowVector.cc
@@ -486,16 +486,37 @@ ostream&
 operator << (ostream& os, const RowVector& a)
 {
 //  int field_width = os.precision () + 7;
   for (int i = 0; i < a.length (); i++)
     os << " " /* setw (field_width) */ << a.elem (i);
   return os;
 }
 
+istream&
+operator >> (istream& is, RowVector& a)
+{
+  int len = a.length();
+
+  if (len < 1)
+    is.clear (ios::badbit);
+  else
+    {
+      double tmp;
+      for (int i = 0; i < len; i++)
+        {
+          is >> tmp;
+          if (is)
+            a.elem (i) = tmp;
+          else
+            break;
+        }
+    }
+}
+
 /*
  * Complex Row Vector class
  */
 
 ComplexRowVector::ComplexRowVector (const RowVector& a)
   : Array<Complex> (a.length ())
 {
   for (int i = 0; i < length (); i++)
@@ -1089,14 +1110,35 @@ ostream&
 operator << (ostream& os, const ComplexRowVector& a)
 {
 //  int field_width = os.precision () + 7;
   for (int i = 0; i < a.length (); i++)
     os << " " /* setw (field_width) */ << a.elem (i);
   return os;
 }
 
+istream&
+operator >> (istream& is, ComplexRowVector& a)
+{
+  int len = a.length();
+
+  if (len < 1)
+    is.clear (ios::badbit);
+  else
+    {
+      Complex tmp;
+      for (int i = 0; i < len; i++)
+        {
+          is >> tmp;
+          if (is)
+            a.elem (i) = tmp;
+          else
+            break;
+        }
+    }
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
