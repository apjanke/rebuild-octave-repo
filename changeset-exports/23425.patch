# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1492706080 14400
#      Thu Apr 20 12:34:40 2017 -0400
# Node ID 7dfa3bc8e3d53ebf323d3beaf5fc087b8b4633b2
# Parent  872f42fb26dcc9bd1c74cd2a65bd56723a0ebb1b
handle boolean expressions separately in JIT compiler

* pt-jit.h, pt-jit.cc (jit_convert::visit_boolean_expression):
New function.  Move code to handle boolean expressions here from
jit_convert::visit_binary_expression.

diff --git a/libinterp/parse-tree/pt-jit.cc b/libinterp/parse-tree/pt-jit.cc
--- a/libinterp/parse-tree/pt-jit.cc
+++ b/libinterp/parse-tree/pt-jit.cc
@@ -257,74 +257,70 @@ void
 jit_convert::visit_argument_list (tree_argument_list&)
 {
   throw jit_fail_exception ("No visit_argument_list implementation");
 }
 
 void
 jit_convert::visit_binary_expression (tree_binary_expression& be)
 {
-  if (be.op_type () >= octave_value::num_binary_ops)
-    {
-      tree_boolean_expression *boole;
-      boole = dynamic_cast<tree_boolean_expression *> (&be);
-      assert (boole);
-      bool is_and = boole->op_type () == tree_boolean_expression::bool_and;
-
-      std::string short_name = next_shortcircut_result ();
-      jit_variable *short_result = factory.create<jit_variable> (short_name);
-      vmap[short_name] = short_result;
-
-      jit_block *done = factory.create<jit_block> (block->name ());
-      tree_expression *lhs = be.lhs ();
-      jit_value *lhsv = visit (lhs);
-      lhsv = create_checked (&jit_typeinfo::logically_true, lhsv);
-
-      jit_block *short_early = factory.create<jit_block> ("short_early");
-      blocks.push_back (short_early);
-
-      jit_block *short_cont = factory.create<jit_block> ("short_cont");
-
-      if (is_and)
-        block->append (factory.create<jit_cond_branch> (lhsv, short_cont,
-                                                        short_early));
-      else
-        block->append (factory.create<jit_cond_branch> (lhsv, short_early,
-                                                        short_cont));
-
-      block = short_early;
-
-      jit_value *early_result = factory.create<jit_const_bool> (! is_and);
-      block->append (factory.create<jit_assign> (short_result, early_result));
-      block->append (factory.create<jit_branch> (done));
-
-      blocks.push_back (short_cont);
-      block = short_cont;
-
-      tree_expression *rhs = be.rhs ();
-      jit_value *rhsv = visit (rhs);
-      rhsv = create_checked (&jit_typeinfo::logically_true, rhsv);
-      block->append (factory.create<jit_assign> (short_result, rhsv));
-      block->append (factory.create<jit_branch> (done));
-
-      blocks.push_back (done);
-      block = done;
-      result = short_result;
-    }
+  tree_expression *lhs = be.lhs ();
+  jit_value *lhsv = visit (lhs);
+
+  tree_expression *rhs = be.rhs ();
+  jit_value *rhsv = visit (rhs);
+
+  const jit_operation& fn = jit_typeinfo::binary_op (be.op_type ());
+  result = create_checked (fn, lhsv, rhsv);
+}
+
+void
+jit_convert::visit_boolean_expression (tree_boolean_expression& be)
+{
+  bool is_and = be.op_type () == tree_boolean_expression::bool_and;
+
+  std::string short_name = next_shortcircut_result ();
+  jit_variable *short_result = factory.create<jit_variable> (short_name);
+  vmap[short_name] = short_result;
+
+  jit_block *done = factory.create<jit_block> (block->name ());
+  tree_expression *lhs = be.lhs ();
+  jit_value *lhsv = visit (lhs);
+  lhsv = create_checked (&jit_typeinfo::logically_true, lhsv);
+
+  jit_block *short_early = factory.create<jit_block> ("short_early");
+  blocks.push_back (short_early);
+
+  jit_block *short_cont = factory.create<jit_block> ("short_cont");
+
+  if (is_and)
+    block->append (factory.create<jit_cond_branch> (lhsv, short_cont,
+                                                    short_early));
   else
-    {
-      tree_expression *lhs = be.lhs ();
-      jit_value *lhsv = visit (lhs);
-
-      tree_expression *rhs = be.rhs ();
-      jit_value *rhsv = visit (rhs);
-
-      const jit_operation& fn = jit_typeinfo::binary_op (be.op_type ());
-      result = create_checked (fn, lhsv, rhsv);
-    }
+    block->append (factory.create<jit_cond_branch> (lhsv, short_early,
+                                                    short_cont));
+
+  block = short_early;
+
+  jit_value *early_result = factory.create<jit_const_bool> (! is_and);
+  block->append (factory.create<jit_assign> (short_result, early_result));
+  block->append (factory.create<jit_branch> (done));
+
+  blocks.push_back (short_cont);
+  block = short_cont;
+
+  tree_expression *rhs = be.rhs ();
+  jit_value *rhsv = visit (rhs);
+  rhsv = create_checked (&jit_typeinfo::logically_true, rhsv);
+  block->append (factory.create<jit_assign> (short_result, rhsv));
+  block->append (factory.create<jit_branch> (done));
+
+  blocks.push_back (done);
+  block = done;
+  result = short_result;
 }
 
 void
 jit_convert::visit_break_command (tree_break_command&)
 {
   breaks.push_back (block);
   throw jit_break_exception ();
 }
diff --git a/libinterp/parse-tree/pt-jit.h b/libinterp/parse-tree/pt-jit.h
--- a/libinterp/parse-tree/pt-jit.h
+++ b/libinterp/parse-tree/pt-jit.h
@@ -76,16 +76,18 @@ public:
   const variable_map &get_variable_map (void) const { return vmap; }
 
   void visit_anon_fcn_handle (tree_anon_fcn_handle&);
 
   void visit_argument_list (tree_argument_list&);
 
   void visit_binary_expression (tree_binary_expression&);
 
+  void visit_boolean_expression (tree_boolean_expression&);
+
   void visit_break_command (tree_break_command&);
 
   void visit_colon_expression (tree_colon_expression&);
 
   void visit_continue_command (tree_continue_command&);
 
   void visit_global_command (tree_global_command&);
 
