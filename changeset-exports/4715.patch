# HG changeset patch
# User jwe
# Date 1074809428 0
#      Thu Jan 22 22:10:28 2004 +0000
# Node ID 7bed0ef1a6adb8c4197ba6d25612c87820d82b2f
# Parent  4302ab3fefd74894469d5e0473b124f2c0529c69
[project @ 2004-01-22 22:10:28 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,17 @@
 2004-01-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* file-io.cc (Ffrewind): Only return value if nargout > 0.
+	(Ffprintf): Likewise.
+	(Fprintf): Likewise.
+
+	* file-io.cc (Ffrewind): Return 0 for success, -1 for failure.
+	Make docs match.
+
 	* Makefile.in (distclean): Remove DOCSTRINGS.
 	(maintainer-clean): Remove $(OPT_HANDLERS).
 
 2004-01-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-cell.cc (octave_cell::subsref): Make '{' case N-d aware.
 
 	* ov-scalar.cc (streamoff_array_value): New function.
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -562,38 +562,43 @@ freport ()\n\
   if (nargin > 0)
     warning ("freport: ignoring extra arguments");
 
   octave_stdout << octave_stream_list::list_open_files ();
 
   return retval;
 }
 
-DEFUN (frewind, args, ,
+DEFUN (frewind, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} frewind (@var{fid})\n\
 Move the file pointer to the beginning of the file @var{fid}, returning\n\
-1 for success, and 0 if an error was encountered.  It is equivalent to\n\
+0 for success, and -1 if an error was encountered.  It is equivalent to\n\
 @code{fseek (@var{fid}, 0, SEEK_SET)}.\n\
 @end deftypefn")
 {
-  octave_value retval = -1;
+  octave_value retval;
+
+  int result = -1;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       octave_stream os = octave_stream_list::lookup (args(0), "frewind");
 
       if (! error_state)
-	retval = os.rewind ();
+	result = os.rewind ();
     }
   else
     print_usage ("frewind");
 
+  if (nargout > 0)
+    retval = result;
+
   return retval;
 }
 
 DEFUN (fseek, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} fseek (@var{fid}, @var{offset}, @var{origin})\n\
 Set the file pointer to any location within the file @var{fid}.  The\n\
 pointer is positioned @var{offset} characters from the @var{origin},\n\
@@ -654,36 +659,32 @@ DEFUN (fprintf, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} fprintf (@var{fid}, @var{template}, @dots{})\n\
 This function is just like @code{printf}, except that the output is\n\
 written to the stream @var{fid} instead of @code{stdout}.\n\
 @end deftypefn")
 {
   static std::string who = "fprintf";
 
-  octave_value retval = -1;
+  octave_value retval;
+
+  int result = -1;
 
   bool return_char_count = true;
 
   int nargin = args.length ();
 
   if (nargin > 1 || (nargin > 0 && args(0).is_string ()))
     {
       octave_stream os;
       int fmt_n = 0;
 
       if (args(0).is_string ()) 
 	{
 	  os = octave_stream_list::lookup (1, who);
-
-	  // For compatibility with Matlab, which does not return the
-	  // character count when behaving like printf (no file id
-	  // parameter).
-
-	  return_char_count = (nargout != 0);
 	}
       else
 	{
 	  fmt_n = 1;
 	  os = octave_stream_list::lookup (args(0), who);
 	}
 
       if (! error_state)
@@ -697,42 +698,44 @@ written to the stream @var{fid} instead 
 	      if (nargin > 1 + fmt_n)
 		{
 		  tmp_args.resize (nargin-fmt_n-1, octave_value ());
 
 		  for (int i = fmt_n + 1; i < nargin; i++)
 		    tmp_args(i-fmt_n-1) = args(i);
 		}
 
-	      retval = os.printf (fmt, tmp_args, who);
+	      result = os.printf (fmt, tmp_args, who);
 	    }
 	  else
 	    ::error ("%s: format must be a string", who.c_str ());
 	}
     }
   else
     print_usage (who);
 
-  if (return_char_count)
-    return retval;
-  else
-    return octave_value();
+  if (nargout > 0)
+    retval = result;
+
+  return retval;
 }
 
-DEFUN (printf, args, ,
+DEFUN (printf, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} printf (@var{fid}, @var{template}, @dots{})\n\
 Print optional arguments under the control of the template string\n\
 @var{template} to the stream @code{stdout}.\n\
 @end deftypefn\n\
 @seealso{fprintf and sprintf}")
 {
   static std::string who = "printf";
 
-  octave_value retval = -1;
+  octave_value retval;
+
+  int result = -1;
 
   int nargin = args.length ();
 
   if (nargin > 0)
     {
       if (args(0).is_string ())
 	{
 	  std::string fmt = args(0).string_value ();
@@ -742,24 +745,27 @@ Print optional arguments under the contr
 	  if (nargin > 1)
 	    {
 	      tmp_args.resize (nargin-1, octave_value ());
 
 	      for (int i = 1; i < nargin; i++)
 		tmp_args(i-1) = args(i);
 	    }
 
-	  retval = stdout_stream.printf (fmt, tmp_args, who);
+	  result = stdout_stream.printf (fmt, tmp_args, who);
 	}
       else
 	::error ("%s: format must be a string", who.c_str ());
     }
   else
     print_usage (who);
 
+  if (nargout > 0)
+    retval = result;
+
   return retval;
 }
 
 DEFUN (fputs, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} fputs (@var{fid}, @var{string})\n\
 Write a string to a file with no formatting.\n\
 @end deftypefn")
@@ -1791,19 +1797,19 @@ convert (int x, int ibase, int obase)
 
   return retval;
 }
 
 DEFUN (umask, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} umask (@var{mask})\n\
 Set the permission mask for file creation.  The parameter @var{mask}\n\
- is an integer, interpreted as an octal number.  If successful,\n\
- returns the previous value of the mask (as an integer to be\n\
- interpreted as an octal number); otherwise an error message is printed.\n\
+is an integer, interpreted as an octal number.  If successful,\n\
+returns the previous value of the mask (as an integer to be\n\
+interpreted as an octal number); otherwise an error message is printed.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int status = 0;
 
   if (args.length () == 1)
     {
diff --git a/test/octave.test/io/io.exp b/test/octave.test/io/io.exp
--- a/test/octave.test/io/io.exp
+++ b/test/octave.test/io/io.exp
@@ -42,17 +42,17 @@ set test sscanf-4
 set prog_output "\n... sscanf:.*"
 do_test sscanf-4.m
 
 set test sscanf-5
 set prog_output "^ans = 1"
 do_test sscanf-5.m
 
 set test printf-1
-set prog_output "test: 1\nans = 8"
+set prog_output "test: 1\nx = 8"
 do_test printf-1.m
 
 set test printf-2
 set prog_output "^error:.*"
 do_test printf-2.m
 
 set test printf-3
 set prog_output "\n... printf:.*"
diff --git a/test/octave.test/io/printf-1.m b/test/octave.test/io/printf-1.m
--- a/test/octave.test/io/printf-1.m
+++ b/test/octave.test/io/printf-1.m
@@ -1,1 +1,1 @@
-printf ("%s: %d\n", "test", 1)
+x = printf ("%s: %d\n", "test", 1)
