# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1285828076 -7200
#      Thu Sep 30 08:27:56 2010 +0200
# Node ID 3329616444f0df91fb35e2faf9a50a984477dd21
# Parent  4d9f310b32bbec08ba2bb7e662525619d1b4494e
replace Octave_map in debug.cc and error.cc

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2010-09-30  Jaroslav Hajek  <highegg@gmail.com>
+
+	* debug.cc (Fdbstatus, Fdbstack): Use octave_map instead of
+	Octave_map.
+	* error.cc (warning_options, initialize_warning_options,
+	pr_where, Frethrow, Ferror, Fwarning, Flasterror): Use
+	octave_scalar_map or octave_map instead of Octave_map.
+
 2010-09-30  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-errno.cc (octave_errno::list, octave_errno::do_list): Use
 	octave_scalar_map instead of Octave_map.
 	* oct-errno.h: Update decls.
 
 2010-09-30  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -550,17 +550,17 @@ breakpoints set.\n\
 @table @code\n\
 @item func\n\
 String representing the function name.  When already in debug\n\
 mode this should be left out.\n\
 @end table\n\
 @seealso{dbclear, dbwhere}\n\
 @end deftypefn")
 {
-  Octave_map retval;
+  octave_map retval;
   int nargin = args.length ();
   octave_value_list fcn_list;
   bp_table::fname_line_map bp_list;
   std::string symbol_name;
 
   if (nargin != 0 && nargin != 1)
     {
       error ("dbstatus: only zero or one arguements accepted\n");
@@ -869,17 +869,17 @@ Print or return current stack informatio
       if (n > 0)
         nskip = n;
       else
         error ("dbstack: expecting N to be a nonnegative integer");
     }
 
   if (! error_state)
     {
-      Octave_map stk = octave_call_stack::backtrace (nskip, curr_frame);
+      octave_map stk = octave_call_stack::backtrace (nskip, curr_frame);
 
       if (nargout == 0)
         {
           octave_idx_type nframes_to_display = stk.numel ();
 
           if (nframes_to_display > 0)
             {
               octave_stdout << "stopped in:\n\n";
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -67,17 +67,17 @@ static bool Vbacktrace_on_warning = fals
 // TRUE means that Octave will print a verbose warning.  Currently unused.
 static bool Vverbose_warning;
 
 // TRUE means that Octave will print no warnings, but lastwarn will be 
 //updated
 static bool Vquiet_warning = false;
 
 // A structure containing (most of) the current state of warnings.
-static Octave_map warning_options;
+static octave_map warning_options;
 
 // The text of the last error message.
 static std::string Vlast_error_message;
 
 // The text of the last warning message.
 static std::string Vlast_warning_message;
 
 // The last warning message id.
@@ -130,20 +130,22 @@ reset_error_handler (void)
   warning_state = 0;
   buffer_error_messages = 0;
   discard_error_messages = false;
 }
 
 static void
 initialize_warning_options (const std::string& state)
 {
-  warning_options.clear ();
+  octave_scalar_map initw;
 
-  warning_options.assign ("identifier", "all");
-  warning_options.assign ("state", state);
+  initw.setfield ("identifier", "all");
+  initw.setfield ("state", state);
+
+  warning_options = initw;
 }
 
 static octave_map
 initialize_last_error_stack (void)
 {
   return octave_call_stack::empty_backtrace ();
 }
 
@@ -430,17 +432,17 @@ pr_where_1 (const char *fmt, ...)
   va_end (args);
 }
 
 static void
 pr_where (const char *who)
 {
   octave_idx_type curr_frame = -1;
 
-  Octave_map stk = octave_call_stack::backtrace (0, curr_frame);
+  octave_map stk = octave_call_stack::backtrace (0, curr_frame);
 
   octave_idx_type nframes_to_display = stk.numel ();
 
   if (nframes_to_display > 0)
     {
       pr_where_1 ("%s: called from\n", who);
 
       Cell names = stk.contents ("name");
@@ -1058,40 +1060,37 @@ error: nargin != 1\n\
             }
           else
             return retval;
         }
       else if (nargin == 1 && args(0).is_map ())
         {
           octave_value_list tmp;
 
-          Octave_map m = args(0).map_value ();
+          octave_scalar_map m = args(0).scalar_map_value ();
 
-          if (m.numel () == 1)
+          if (m.contains ("message"))
             {
-              if (m.contains ("message"))
-                {
-                  Cell c = m.contents ("message");
+              octave_value c = m.getfield ("message");
 
-                  if (! c.is_empty () && c(0).is_string ())
-                    nargs(0) = c(0).string_value ();
-                }
+              if (c.is_string ())
+                 nargs(0) = c.string_value ();
+            }
 
-              if (m.contains ("identifier"))
-                {
-                  Cell c = m.contents ("identifier");
+          if (m.contains ("identifier"))
+            {
+              octave_value c = m.getfield ("identifier");
 
-                  if (! c.is_empty () && c(0).is_string ())
-                    id = c(0).string_value ();
-                }
+              if (c.is_string ())
+                 id = c.string_value ();
+            }
 
-              // FIXME -- also need to handle "stack" field in error
-              // structure, but that will require some more significant
-              // surgery on handle_message, error_with_id, etc.
-            }
+          // FIXME -- also need to handle "stack" field in error
+          // structure, but that will require some more significant
+          // surgery on handle_message, error_with_id, etc.
         }
 
       handle_message (error_with_id, id.c_str (), "unspecified error", nargs);
     }
 
   return retval;
 }
 
@@ -1139,21 +1138,21 @@ warning named by @var{id} is handled as 
           std::string arg1 = argv(1);
           std::string arg2 = "all";
 
           if (argc == 3)
             arg2 = argv(2);
 
           if (arg1 == "on" || arg1 == "off" || arg1 == "error")
             {
-              Octave_map old_warning_options = warning_options;
+              octave_map old_warning_options = warning_options;
 
               if (arg2 == "all")
                 {
-                  Octave_map tmp;
+                  octave_map tmp;
 
                   Cell id (1, 1);
                   Cell st (1, 1);
 
                   id(0) = arg2;
                   st(0) = arg1;
 
                   // Since internal Octave functions are not
@@ -1288,17 +1287,17 @@ warning named by @var{id} is handled as 
             }
           else if (arg1 == "query")
             {
               if (arg2 == "all")
                 retval = warning_options;
               else if (arg2 == "backtrace" || arg2 == "debug"
                        || arg2 == "verbose" || arg2 == "quiet")
                 {
-                  Octave_map tmp;
+                  octave_scalar_map tmp;
                   tmp.assign ("identifier", arg2);
                   if (arg2 == "backtrace")
                     tmp.assign ("state", Vbacktrace_on_warning ? "on" : "off");
                   else if (arg2 == "debug")
                     tmp.assign ("state", Vdebug_on_warning ? "on" : "off");
                   else if (arg2 == "verbose")
                     tmp.assign ("state", Vverbose_warning ? "on" : "off");
                   else
@@ -1340,17 +1339,17 @@ warning named by @var{id} is handled as 
                               found = true;
                               break;
                             }
                         }
                     }
 
                   if (found)
                     {
-                      Octave_map tmp;
+                      octave_scalar_map tmp;
 
                       tmp.assign ("identifier", arg2);
                       tmp.assign ("state", val);
 
                       retval = tmp;
                     }
                   else
                     error ("warning: unable to find default warning state!");
@@ -1365,21 +1364,21 @@ warning named by @var{id} is handled as 
       retval = warning_options;
 
       done = true;
     }
   else if (argc == 2)
     {
       octave_value arg = args(0);
 
-      Octave_map old_warning_options = warning_options;
+      octave_map old_warning_options = warning_options;
 
       if (arg.is_map ())
         {
-          Octave_map m = arg.map_value ();
+          octave_map m = arg.map_value ();
 
           if (m.contains ("identifier") && m.contains ("state"))
             warning_options = m;
           else
             error ("warning: expecting structure with fields `identifier' and `state'");
 
           done = true;
 
@@ -1527,17 +1526,17 @@ their default values.\n\
 
   unwind_protect frame;
 
   frame.protect_var (error_state);
   error_state = 0;
 
   if (nargin < 2)
     {
-      Octave_map err;
+      octave_scalar_map err;
 
       err.assign ("message", Vlast_error_message);
       err.assign ("identifier", Vlast_error_id);
 
       err.assign ("stack", octave_value (Vlast_error_stack));
 
       if (nargin == 1)
         {
@@ -1550,68 +1549,68 @@ their default values.\n\
 
                   Vlast_error_stack = initialize_last_error_stack ();
                 }
               else
                 error("lasterror: unrecognized string argument");
             }
           else if (args(0).is_map ())
             {
-              Octave_map new_err = args(0).map_value ();
+              octave_scalar_map new_err = args(0).scalar_map_value ();
               std::string new_error_message;
               std::string new_error_id;
               std::string new_error_file;
               std::string new_error_name;
               int new_error_line = -1;
               int new_error_column = -1;
 
               if (! error_state && new_err.contains ("message"))
                 {
                   const std::string tmp = 
-                    new_err.contents("message")(0).string_value ();
+                    new_err.getfield("message").string_value ();
                   new_error_message = tmp;
                 }
 
               if (! error_state && new_err.contains ("identifier"))
                 {
                   const std::string tmp = 
-                    new_err.contents("identifier")(0).string_value ();
+                    new_err.getfield("identifier").string_value ();
                   new_error_id = tmp;
                 }
 
               if (! error_state && new_err.contains ("stack"))
                 {
-                  Octave_map new_err_stack = 
-                    new_err.contents("identifier")(0).map_value ();
+                  octave_scalar_map new_err_stack = 
+                    new_err.getfield("identifier").scalar_map_value ();
 
                   if (! error_state && new_err_stack.contains ("file"))
                     {
                       const std::string tmp = 
-                        new_err_stack.contents("file")(0).string_value ();
+                        new_err_stack.getfield("file").string_value ();
                       new_error_file = tmp;
                     }
 
                   if (! error_state && new_err_stack.contains ("name"))
                     {
                       const std::string tmp = 
-                        new_err_stack.contents("name")(0).string_value ();
+                        new_err_stack.getfield("name").string_value ();
                       new_error_name = tmp;
                     }
 
                   if (! error_state && new_err_stack.contains ("line"))
                     {
                       const int tmp = 
-                        new_err_stack.contents("line")(0).nint_value ();
+                        new_err_stack.getfield("line").nint_value ();
                       new_error_line = tmp;
                     }
                   
                   if (! error_state && new_err_stack.contains ("column"))
                     {
                       const int tmp = 
-                        new_err_stack.contents("column")(0).nint_value ();
+                        new_err_stack.getfield("column").nint_value ();
                       new_error_column = tmp;
                     }
                 }
 
               if (! error_state)
                 {
                   Vlast_error_message = new_error_message;
                   Vlast_error_id = new_error_id;
