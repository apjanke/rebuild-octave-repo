# HG changeset patch
# User jwe
# Date 1035411054 0
#      Wed Oct 23 22:10:54 2002 +0000
# Node ID 19a1626b8d578cd88e23b00de578402865eaac42
# Parent  a0c710c20da585bed79032782bd0a3c50d20ebfb
[project @ 2002-10-23 22:10:53 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2002-10-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* mk-opts.pl (emit_opt_class_header): Make set_options another
+	name for copy.
+
 2002-10-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makeconf.in (do-subst-config-vals): Don't substitute
 	OCTAVE_CONF_OCTAVE_LITE.
 	(OCTAVE_LITE): Delete.
 
 	* Makeconf.in: Use HAVE_DLOPEN_API, HAVE_LOADLIBRARY_API, and
 	HAVE_SHL_LOAD_API instead of WITH_DL and WITH_SHL.
diff --git a/mk-opts.pl b/mk-opts.pl
--- a/mk-opts.pl
+++ b/mk-opts.pl
@@ -401,16 +401,21 @@ public:
   for ($i = 0; $i < $opt_num; $i++)
     {
       print "      $optvar[$i] = opt.$optvar[$i];\n";
     }
 
   print "      reset = opt.reset;
     }\n";
 
+  ## For backward compatibility and because set_options is probably
+  ## a better name in some contexts:
+
+  print "\n  void set_options (const ${class_name}& opt) { copy (opt); }\n";
+
   print "\n  void set_default_options (void) { init (); }\n";
 
   for ($i = 0; $i < $opt_num; $i++)
     {
       if ($set_expr[$i])
         {
           &emit_set_decl ($i);
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2002-10-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* DLD-FUNCTIONS/daspk.cc (daspk): Use set_options, not copy. 
+	* DLD-FUNCTIONS/dasrt.cc (dasrt): Likewise.
+	* DLD-FUNCTIONS/dassl.cc (dassl): Likewise.
+	* DLD-FUNCTIONS/fsolve.cc (fsolve): Likewise.
+	* DLD-FUNCTIONS/lsode.cc (lsode): Likewise.
+	* DLD-FUNCTIONS/odessa.cc (Fodessa): Likewise.
+	* DLD-FUNCTIONS/quad.cc (Fquad): Likewise.
+
 2002-10-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-map.cc (Octave_map::assign): Fix typo in resizing.
 
 	* pt-loop.cc (tree_complex_for_command::eval): Only return list
 	for val if struct array has more than one element.
 	(tree_simple_for_command::eval): Likewise.
 
diff --git a/src/DLD-FUNCTIONS/daspk.cc b/src/DLD-FUNCTIONS/daspk.cc
--- a/src/DLD-FUNCTIONS/daspk.cc
+++ b/src/DLD-FUNCTIONS/daspk.cc
@@ -284,17 +284,17 @@ parameters for @code{daspk}.\n\
 
       if (state.capacity () != deriv.capacity ())
 	DASPK_ABORT1 ("x and xdot must have the same size");
 
       double tzero = out_times (0);
 
       DAEFunc func (daspk_user_function);
       DASPK dae (state, deriv, tzero, func);
-      dae.copy (daspk_opts);
+      dae.set_options (daspk_opts);
 
       Matrix output;
       Matrix deriv_output;
 
       if (crit_times_set)
 	output = dae.integrate (out_times, deriv_output, crit_times);
       else
 	output = dae.integrate (out_times, deriv_output);
diff --git a/src/DLD-FUNCTIONS/dasrt.cc b/src/DLD-FUNCTIONS/dasrt.cc
--- a/src/DLD-FUNCTIONS/dasrt.cc
+++ b/src/DLD-FUNCTIONS/dasrt.cc
@@ -489,17 +489,17 @@ parameters for @code{dasrt}.\n\
 
   if (dasrt_j)
     func.set_jacobian_function (dasrt_user_j);
 
   DASRT_result output;
 
   DASRT dae = DASRT (state, stateprime, tzero, func);
 
-  dae.copy (dasrt_opts);
+  dae.set_options (dasrt_opts);
 
   if (crit_times_set)
     output = dae.integrate (out_times, crit_times);
   else
     output = dae.integrate (out_times);
 
   if (! error_state)
     {
diff --git a/src/DLD-FUNCTIONS/dassl.cc b/src/DLD-FUNCTIONS/dassl.cc
--- a/src/DLD-FUNCTIONS/dassl.cc
+++ b/src/DLD-FUNCTIONS/dassl.cc
@@ -389,17 +389,17 @@ parameters for @code{dassl}.\n\
       double tzero = out_times (0);
 
       DAEFunc func (dassl_user_function);
       if (dassl_jac)
 	func.set_jacobian_function (dassl_user_jacobian);
 
       DASSL dae (state, deriv, tzero, func);
 
-      dae.copy (dassl_opts);
+      dae.set_options (dassl_opts);
 
       Matrix output;
       Matrix deriv_output;
 
       if (crit_times_set)
 	output = dae.integrate (out_times, deriv_output, crit_times);
       else
 	output = dae.integrate (out_times, deriv_output);
diff --git a/src/DLD-FUNCTIONS/fsolve.cc b/src/DLD-FUNCTIONS/fsolve.cc
--- a/src/DLD-FUNCTIONS/fsolve.cc
+++ b/src/DLD-FUNCTIONS/fsolve.cc
@@ -188,17 +188,17 @@ parameters for @code{fsolve}.\n\
       if (nargin > 2)
 	warning ("fsolve: ignoring extra arguments");
 
       if (nargout > 2)
 	warning ("fsolve: can't compute path output yet");
 
       NLFunc nleqn_fcn (fsolve_user_function);
       NLEqn nleqn (x, nleqn_fcn);
-      nleqn.copy (fsolve_opts);
+      nleqn.set_options (fsolve_opts);
 
       int info;
       ColumnVector soln = nleqn.solve (info);
 
       if (! error_state)
 	{
 	  std::string msg = nleqn.error_message ();
 
diff --git a/src/DLD-FUNCTIONS/lsode.cc b/src/DLD-FUNCTIONS/lsode.cc
--- a/src/DLD-FUNCTIONS/lsode.cc
+++ b/src/DLD-FUNCTIONS/lsode.cc
@@ -353,17 +353,17 @@ parameters for @code{lsode}.\n\
       double tzero = out_times (0);
 
       ODEFunc func (lsode_user_function);
       if (lsode_jac)
 	func.set_jacobian_function (lsode_user_jacobian);
 
       LSODE ode (state, tzero, func);
 
-      ode.copy (lsode_opts);
+      ode.set_options (lsode_opts);
 
       Matrix output;
       if (crit_times_set)
 	output = ode.integrate (out_times, crit_times);
       else
 	output = ode.integrate (out_times);
 
       if (! error_state)
diff --git a/src/DLD-FUNCTIONS/odessa.cc b/src/DLD-FUNCTIONS/odessa.cc
--- a/src/DLD-FUNCTIONS/odessa.cc
+++ b/src/DLD-FUNCTIONS/odessa.cc
@@ -512,17 +512,17 @@ parameters for @code{lsode}.\n\
       double tzero = out_times (0);
 
       ODESSA_result output;
 
       ODESSA ode = have_parameters
 	? ODESSA (state, theta, sensitivity_guess, tzero, func)
 	: ODESSA (state, tzero, func);
 	  
-      ode.copy (odessa_opts);
+      ode.set_options (odessa_opts);
 
       if (crit_times_set)
 	output = ode.integrate (out_times, crit_times);
       else
 	output = ode.integrate (out_times);
 
       if (! error_state)
 	{
diff --git a/src/DLD-FUNCTIONS/quad.cc b/src/DLD-FUNCTIONS/quad.cc
--- a/src/DLD-FUNCTIONS/quad.cc
+++ b/src/DLD-FUNCTIONS/quad.cc
@@ -244,31 +244,31 @@ parameters for @code{quad}.\n\
 	    default:
 	      QUAD_ABORT1 ("expecting tol to contain no more than two values");
 	    }
 
 	case 3:
 	  if (indefinite)
 	    {
 	      IndefQuad iq (quad_user_function, bound, indef_type);
-	      iq.copy (quad_opts);
+	      iq.set_options (quad_opts);
 	      val = iq.integrate (ier, nfun, abserr);
 	    }
 	  else
 	    {
 	      if (have_sing)
 		{
 		  DefQuad dq (quad_user_function, a, b, sing);
-		  dq.copy (quad_opts);
+		  dq.set_options (quad_opts);
 		  val = dq.integrate (ier, nfun, abserr);
 		}
 	      else
 		{
 		  DefQuad dq (quad_user_function, a, b);
-		  dq.copy (quad_opts);
+		  dq.set_options (quad_opts);
 		  val = dq.integrate (ier, nfun, abserr);
 		}
 	    }
 	  break;
 
 	default:
 	  panic_impossible ();
 	  break;
