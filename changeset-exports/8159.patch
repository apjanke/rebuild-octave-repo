# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1222709777 14400
#      Mon Sep 29 13:36:17 2008 -0400
# Node ID ccf38fc1057f8f98ffb0109f0ebdc6b99ceebf93
# Parent  15e4a450bf846457b52ab204e9b8e84ccbedb125
deconv.m: Fix row/col orientation & length of output

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,12 @@
 2008-09-29  Ben Abbott <bpabbott@mac.com>
 
+	* polynomial/deconv.m: Fix row/col orientation & length of output.
+
 	* polynomial/conv.m: Correct row/col orientation of output.
 
 2008-09-26  David Bateman  <dbateman@free.fr>
 
 	* general/subsindex.m: Dummy subsindex function for help string
 	and to throw error for use outside of a class
 	* general/Makefile.in (SOURCES): Include it here.
 
diff --git a/scripts/polynomial/deconv.m b/scripts/polynomial/deconv.m
--- a/scripts/polynomial/deconv.m
+++ b/scripts/polynomial/deconv.m
@@ -44,41 +44,63 @@ function [b, r] = deconv (y, a)
     error("conv: both arguments must be vectors");
   endif
 
   la = length (a);
   ly = length (y);
 
   lb = ly - la + 1;
 
+  ## Ensure A is oriented as Y.
+  if (diff (size (y)(1:2)) * diff (size (a)(1:2)) < 0)
+    a = permute (a, [2, 1]);
+  endif
+
   if (ly > la)
     b = filter (y, a, [1, (zeros (1, ly - la))]);
   elseif (ly == la)
     b = filter (y, a, 1);
   else
     b = 0;
   endif
 
   lc = la + length (b) - 1;
   if (ly == lc)
     r = y - conv (a, b);
   else
-    r = [(zeros (1, lc - ly)), y] - conv (a, b);
+    ## Respect the orientation of Y"
+    if (size (y, 1) <= size (y, 2))
+      r = [(zeros (1, lc - ly)), y] - conv (a, b);
+    else
+      r = [(zeros (lc - ly, 1)); y] - conv (a, b);
+    endif
+    if (ly < la)
+      ## Trim the remainder is equal to the length of Y.
+      r = r(end-(length(y)-1):end);
+    endif
   endif
 
 endfunction
 
 %!test
 %! [b, r] = deconv ([3, 6, 9, 9], [1, 2, 3]);
 %! assert(all (all (b == [3, 0])) && all (all (r == [0, 0, 0, 9])));
 
 %!test
 %! [b, r] = deconv ([3, 6], [1, 2, 3]);
-%! assert(b == 0 && all (all (r == [0, 3, 6])));
+%! assert(b == 0 && all (all (r == [3, 6])));
 
 %!test
 %! [b, r] = deconv ([3, 6], [1; 2; 3]);
-%! assert(b == 0 && all (all (r == [0, 3, 6])));
+%! assert(b == 0 && all (all (r == [3, 6])));
+
+%!test
+%! [b,r] = deconv ([3; 6], [1; 2; 3]);
+%! assert (b == 0 && all (all (r == [3; 6])))
 
-%!error [b, r] = deconv ([3, 6], [1, 2; 3, 4]);;
+%!test
+%! [b, r] = deconv ([3; 6], [1, 2, 3]);
+%! assert (b == 0 && all (all (r == [3; 6])))
 
-%!error <number of rows must match> [b, r] = deconv ([3; 6], [1, 2, 3]);
+%!error [b, r] = deconv ([3, 6], [1, 2; 3, 4]);
 
+%!error [b, r] = deconv ([3, 6; 1, 2], [1, 2, 3]);
+
