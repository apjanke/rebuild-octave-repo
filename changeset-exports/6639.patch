# HG changeset patch
# User jwe
# Date 1179776842 0
#      Mon May 21 19:47:22 2007 +0000
# Node ID ed74670db09bab85df59f4a867da13c54d7010fb
# Parent  15837c5982cb0bc4ba5fe25e28d274396b256926
[project @ 2007-05-21 19:47:22 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2007-05-21  John W. Eaton  <jwe@octave.org>
+
+	* oct-map.h (Octave_map::numel): Return number of array elements,
+	not number of map elements.
+	(Octave_map::nfields): Rename from length.
+	(Octave_map::empty): Delete.
+	Change all uses of empty to check nfields () == 0 instead.
+
 2007-05-21  Søren Hauberg  <soren@hauberg.org>
 
 	* help.cc (Fautoload): Doc fix.
 	* variables.cc (Fiscommand): Doc fix.
 
 2007-05-19  David Bateman  <dbatemna@free.fr>
 
 	* ov-fcn-inline.cc (Fvectorize): Doc fix.
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -578,17 +578,17 @@ do_load (std::istream& stream, const std
     {
       std::string msg = output_buf.str ();
 
       if (nargout > 0)
 	retval = msg;
       else
 	octave_stdout << msg;
     }
-  else if (! retstruct.empty ())
+  else if (retstruct.nfields () != 0)
     retval = retstruct;
 
   return retval;
 }
 
 std::string
 find_file_to_load (const std::string& name, const std::string& orig_name)
 {
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -863,21 +863,21 @@ read_mat5_binary_element (std::istream& 
 	    Octave_map m2 = m1.contents("workspace")(0).map_value();
 	    uint32NDArray MCOS = m2.contents("MCOS")(0).uint32_array_value();
 	    octave_idx_type off = static_cast<octave_idx_type>(double (MCOS (4)));
 	    m2 = subsys_ov.map_value();
 	    m2 = m2.contents("MCOS")(0).map_value();
 	    tc2 = m2.contents("MCOS")(0).cell_value()(1 + off).cell_value()(1);
 	    m2 = tc2.map_value();
 	    symbol_table *local_sym_tab = 0;
-	    if (m2.length() > 0)
+	    if (m2.nfields() > 0)
 	      {
 		octave_value tmp;
 
-		local_sym_tab = new symbol_table (((m2.length() + 1) & ~1), 
+		local_sym_tab = new symbol_table (((m2.nfields() + 1) & ~1), 
 						  "LOCAL");
 	      
 		for (Octave_map::iterator p0 = m2.begin() ; 
 		     p0 != m2.end(); p0++)
 		  {
 		    std::string key = m2.key(p0);
 		    octave_value val = m2.contents(p0)(0);
 
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -86,17 +86,17 @@ Octave_map::stringfield (const std::stri
     retval = c(0).string_value ();
 
   return retval;
 }
 
 string_vector
 Octave_map::keys (void) const
 {
-  assert (length () == key_list.size ());
+  assert (nfields () == key_list.size ());
 
   return string_vector (key_list);
 }
 
 Octave_map
 Octave_map::transpose (void) const
 {
   assert (ndims () == 2);
@@ -129,38 +129,22 @@ Octave_map::reshape (const dim_vector& n
       retval.dimensions = new_dims;
     }
   else
     retval = *this;
 
   return retval;
 }
 
-octave_idx_type
-Octave_map::numel (void) const
-{
-  octave_idx_type retval;
-
-  if (empty ())
-    retval = 0;
-  else
-    {
-      Cell tmp = contents (begin ());
-      retval = tmp.numel ();
-    }
-
-  return retval;
-}
-
 void
 Octave_map::resize (const dim_vector& dv, bool fill)
 {
   if (dv != dims ())
     {
-      if (empty ())
+      if (nfields () == 0)
 	dimensions = dv;
       else
 	{
 	  for (const_iterator p = begin (); p != end (); p++)
 	    {
 	      Cell tmp = contents(p);
 
 	      if (fill)
@@ -176,17 +160,17 @@ Octave_map::resize (const dim_vector& dv
     }
 }
 
 Octave_map
 Octave_map::concat (const Octave_map& rb, const Array<octave_idx_type>& ra_idx)
 {
   Octave_map retval;
 
-  if (length() == rb.length())
+  if (nfields () == rb.nfields ())
     {
       for (const_iterator pa = begin (); pa != end (); pa++)
 	{
 	  const_iterator pb = rb.seek (key(pa));
 
 	  if (pb == rb.end ())
 	    {
 	      error ("field name mismatch in structure concatenation");
@@ -205,17 +189,17 @@ Octave_map::concat (const Octave_map& rb
 
 static bool
 keys_ok (const Octave_map& a, const Octave_map& b, string_vector& keys)
 {
   bool retval = false;
 
   keys = string_vector ();
 
-  if (a.empty ())
+  if (a.nfields () == 0)
     {
       keys = b.keys ();
       retval = true;
     }
   else
     {
       string_vector a_keys = a.keys().qsort ();
       string_vector b_keys = b.keys().qsort ();
@@ -377,17 +361,17 @@ Octave_map::assign (const octave_value_l
     }
 
   return *this;
 }
 
 Octave_map&
 Octave_map::assign (const std::string& k, const octave_value& rhs)
 {
-  if (empty ())
+  if (nfields () == 0)
     {
       maybe_add_to_key_list (k);
 
       map[k] = Cell (rhs);
 
       dimensions = dim_vector (1, 1);
     }
   else
@@ -405,17 +389,17 @@ Octave_map::assign (const std::string& k
     }
 
   return *this;
 }
 
 Octave_map&
 Octave_map::assign (const std::string& k, const Cell& rhs)
 {
-  if (empty ())
+  if (nfields () == 0)
     {
       maybe_add_to_key_list (k);
 
       map[k] = rhs;
 
       dimensions = rhs.dims ();
     }
   else
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -83,19 +83,17 @@ Octave_map
 	}
 
       return *this;
     }
 
   ~Octave_map (void) { }
 
   // This is the number of keys.
-  octave_idx_type length (void) const { return map.size (); }
-
-  int empty (void) const { return map.empty (); }
+  octave_idx_type nfields (void) const { return map.size (); }
 
   void del (const std::string& k)
     {
       iterator p = map.find (k);
 
       if (p != map.end ())
 	{
 	  map.erase (p);
@@ -154,17 +152,17 @@ Octave_map
   int ndims (void) const { return dimensions.length (); }
 
   Octave_map transpose (void) const;
 
   Octave_map reshape (const dim_vector& new_dims) const;
 
   void resize (const dim_vector& dv, bool fill = false);
 
-  octave_idx_type numel (void) const;
+  octave_idx_type numel (void) const { return dimensions.numel (); }
 
   Octave_map concat (const Octave_map& rb, const Array<octave_idx_type>& ra_idx);
 
   Octave_map& maybe_delete_elements (const octave_value_list& idx);
 
   Octave_map& assign (const octave_value_list& idx, const Octave_map& rhs);
 
   Octave_map& assign (const octave_value_list& idx, const std::string& k,
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -230,17 +230,17 @@ DEFUN (__version_info__, args, ,
   octave_value retval;
 
   static Octave_map vinfo;
 
   int nargin = args.length ();
 
   if (nargin == 4)
     {
-      if (vinfo.empty ())
+      if (vinfo.nfields () == 0)
 	{
 	  vinfo.assign ("Name", args (0));
 	  vinfo.assign ("Version", args (1));
 	  vinfo.assign ("Release", args (2));
 	  vinfo.assign ("Date", args (3));
 	}
       else
 	{
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -1015,17 +1015,17 @@ named fields.\n\
 
   return retval;
 }
 
 bool
 octave_struct::save_ascii (std::ostream& os, bool& infnan_warned)
 {
   Octave_map m = map_value ();
-  os << "# length: " << m.length () << "\n";
+  os << "# length: " << m.nfields () << "\n";
 
   Octave_map::iterator i = m.begin ();
   while (i != m.end ())
     {
       octave_value val = map.contents (i);
 
       bool b = save_ascii_data (os, val, m.key (i), infnan_warned, false, 0);
       
@@ -1094,17 +1094,17 @@ octave_struct::load_ascii (std::istream&
   return success;
 }
 
 bool 
 octave_struct::save_binary (std::ostream& os, bool& save_as_floats)
 {
   Octave_map m = map_value ();
 
-  int32_t len = m.length();
+  int32_t len = m.nfields ();
   os.write (reinterpret_cast<char *> (&len), 4);
   
   Octave_map::iterator i = m.begin ();
   while (i != m.end ())
     {
       octave_value val = map.contents (i);
 
       bool b = save_binary_data (os, val, m.key (i), "", 0, save_as_floats);
diff --git a/src/ov-struct.h b/src/ov-struct.h
--- a/src/ov-struct.h
+++ b/src/ov-struct.h
@@ -90,17 +90,17 @@ public:
   // This is the number of elements in each field.  The total number
   // of elements is numel () * nfields ().
   octave_idx_type numel (void) const
   {
     dim_vector dv = dims ();
     return dv.numel ();
   }
 
-  octave_idx_type nfields (void) const { return map.length (); }
+  octave_idx_type nfields (void) const { return map.nfields (); }
 
   octave_value reshape (const dim_vector& new_dims) const
     { return map.reshape (new_dims); }
 
   octave_value resize (const dim_vector& dv, bool = false) const
     { Octave_map tmap = map; tmap.resize (dv); return tmap; }
 
   bool is_defined (void) const { return true; }
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1872,17 +1872,17 @@ Return the size of @var{val} in bytes\n\
 static void
 decode_subscripts (const char* name, const octave_value& arg,
 		   std::string& type_string,
 		   std::list<octave_value_list>& idx)
 {
   Octave_map m = arg.map_value ();
 
   if (! error_state
-      && m.length () == 2 && m.contains ("type") && m.contains ("subs"))
+      && m.nfields () == 2 && m.contains ("type") && m.contains ("subs"))
     {
       Cell& type = m.contents ("type");
       Cell& subs = m.contents ("subs");
 
       type_string = std::string (type.length(), '\0');
 
       for (int k = 0; k < type.length (); k++)
 	{
