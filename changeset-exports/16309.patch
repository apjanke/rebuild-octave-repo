# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363314204 14400
#      Thu Mar 14 22:23:24 2013 -0400
# Node ID e608de76742cf0f0d96729364bf8f61a94b4b331
# Parent  122c1a7a3004b684b11d1242f54d90cff316f522
allow newline to terminate anonymous function definition

* lex.ll ({NL}): Also return '\n' if parsing anonymous function body.
Check for paren nesting first.

diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -725,26 +725,28 @@ ANY_INCLUDING_NL (.|{NL})
 %}
 
 {NL} {
     curr_lexer->lexer_debug ("{NL}");
 
     curr_lexer->input_line_number++;
     curr_lexer->current_input_column = 1;
 
-    if (curr_lexer->nesting_level.none ())
+    if (curr_lexer->nesting_level.is_paren ())
+      {
+        curr_lexer->at_beginning_of_statement = false;
+        curr_lexer->gripe_matlab_incompatible
+          ("bare newline inside parentheses");
+      }
+    else if (curr_lexer->nesting_level.none ()
+        || curr_lexer->nesting_level.is_anon_fcn_body ())
       {
         curr_lexer->at_beginning_of_statement = true;
         return curr_lexer->count_token ('\n');
       }
-    else if (curr_lexer->nesting_level.is_paren ())
-      {
-        curr_lexer->at_beginning_of_statement = false;
-        curr_lexer->gripe_matlab_incompatible ("bare newline inside parentheses");
-      }
     else if (curr_lexer->nesting_level.is_bracket_or_brace ())
       return LEXICAL_ERROR;
   }
 
 %{
 // Single quote can either be the beginning of a string or a transpose
 // operator.
 %}
