# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1548181902 -3600
#      Tue Jan 22 19:31:42 2019 +0100
# Branch stable
# Node ID ee21e2bf3e5048aefcc70aabfc84d70ab974b715
# Parent  088b8a2dcb0672a230fe760d4fc6092ad257dbf2
ilu.m: Fix state of random number generator in BISTs.

* ilu.m: Fix state of random number generator in BISTs and restore to previous
state after tests.

diff --git a/scripts/sparse/ilu.m b/scripts/sparse/ilu.m
--- a/scripts/sparse/ilu.m
+++ b/scripts/sparse/ilu.m
@@ -308,25 +308,34 @@ endfunction
 %! opts.droptol = 0;
 %! [L1, U1] = ilu (A, opts);
 %! opts.type = "ilutp";
 %! opts.thresh = 0;
 %! [L2, U2] = ilu (A, opts);
 %! assert (norm (L1 - L2, "fro") / norm (L1, "fro"), 0, eps);
 %! assert (norm (U1 - U2, "fro") / norm (U1, "fro"), 0, eps);
 
+## Restore rand "state" value
+%!shared old_rand_state, restore_state
+%! ## Save and restore the state of the random number generator that is used by
+%! ## the unit tests in this file.
+%! old_rand_state = rand ("state");
+%! restore_state = onCleanup (@() rand ("state", old_rand_state));
+
 ## Tests for real matrices of different sizes for ilu0, iluc and ilutp.
 ## The difference A - L*U should be not greater than eps because with droptol
 ## equal to 0, the LU complete factorization is performed.
 %!shared n_tiny, n_small, n_medium, n_large, A_tiny, A_small, A_medium, A_large
 %! n_tiny = 5;
 %! n_small = 40;
 %! n_medium = 600;
 %! n_large = 10000;
 %! A_tiny = spconvert ([1 4 2 3 3 4 2 5; 1 1 2 3 4 4 5 5; 1 2 3 4 5 6 7 8]');
+%! ## initialize generator to make behavior reproducible
+%! rand ("state", 42);
 %! A_small = sprand (n_small, n_small, 1/n_small) + speye (n_small);
 %! A_medium = sprand (n_medium, n_medium, 1/n_medium) + speye (n_medium);
 %! A_large = sprand (n_large, n_large, 1/n_large/10) + speye (n_large);
 
 %!test
 %! opts.type = "nofill";
 %! [L, U] = ilu (A_tiny);
 %! assert (norm (A_tiny - L*U, "fro") / norm (A_tiny, "fro"), 0, n_tiny * eps);
@@ -388,16 +397,18 @@ endfunction
 ## Tests for complex matrices of different sizes for ilu0, iluc and ilutp.
 %!shared n_tiny, n_small, n_medium, n_large, A_tiny, A_small, A_medium, A_large
 %! n_tiny = 5;
 %! n_small = 40;
 %! n_medium = 600;
 %! n_large = 10000;
 %! A_tiny = spconvert ([1 4 2 3 3 4 2 5; 1 1 2 3 4 4 5 5; 1 2 3 4 5 6 7 8]');
 %! A_tiny(1,1) += 1i;
+%! ## initialize generator to make behavior reproducible
+%! rand ("state", 42);
 %! A_small = sprand (n_small, n_small, 1/n_small) + ...
 %!   i * sprand (n_small, n_small, 1/n_small) + speye (n_small);
 %! A_medium = sprand (n_medium, n_medium, 1/n_medium) + ...
 %!   i * sprand (n_medium, n_medium, 1/n_medium) + speye (n_medium);
 %! A_large = sprand (n_large, n_large, 1/n_large/10) + ...
 %!   i * sprand (n_large, n_large, 1/n_large/10) + speye (n_large);
 
 %!test
