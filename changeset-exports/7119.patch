# HG changeset patch
# User jwe
# Date 1194469745 0
#      Wed Nov 07 21:09:05 2007 +0000
# Node ID d22ad51b9cf8f908bb5be4b5bb50fe5ee073f446
# Parent  d32f867e4ddac0d4acb7ff2d49e2fa752c3256d5
[project @ 2007-11-07 21:06:27 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,14 @@
 2007-11-07  David Bateman  <dbateman@free.fr>
 
+	* plot/__go_draw_axes__.m: Fix surfaces for gnuplot 4.0 and for
+	the meshc.m function.
+	* plot/meshc.m: Also use the surface function.
+	
 	* plot/surfc.m, plot/meshc.m: New files.
 	* plot/Makefile.in (SOURCES): Add them to the list.
 	Also add pcolor.m, shading.m, surf.m, and surface.m to the list.
 
 2007-11-07  Michael Zeising  <michael@michaels-website.de>
 
 	* audio/wavwrite.m, audio/wavwrite.m: Correct sample scaling.
 
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -232,16 +232,17 @@ function __go_draw_axes__ (h, plot_strea
 	  img_xdata = obj.xdata;
 	  img_ydata = obj.ydata;
 
 	  if (use_gnuplot_for_images)
 
 	    data_idx++;
 	    is_image_data(data_idx) = true;
 	    parametric(data_idx) = false;
+	    have_cdata(data_idx) = false;
 
 	    [y_dim, x_dim] = size (img_data(:,:,1));
 	    if (x_dim > 1)
 	      dx = abs (img_xdata(2)-img_xdata(1))/(x_dim-1);
 	    else
 	      dx = 1;
 	    endif
 	    if (y_dim > 1)
@@ -295,16 +296,17 @@ function __go_draw_axes__ (h, plot_strea
 	  else
 	    ximg_data{++ximg_data_idx} = img_data;
 	  endif
 
 	case "line"
 	  data_idx++;
 	  is_image_data(data_idx) = false;
 	  parametric(data_idx) = true;
+	  have_cdata(data_idx) = false;
 	  if (isempty (obj.keylabel))
 	    titlespec{data_idx} = "title \"\"";
 	  else
 	    tmp = undo_string_escapes (obj.keylabel);
 	    titlespec{data_idx} = strcat ("title \"", tmp, "\"");
 	  endif
 	  [style, typ, with] = do_linestyle_command (obj, data_idx, plot_stream);
 	  usingclause{data_idx} = "";
@@ -315,29 +317,30 @@ function __go_draw_axes__ (h, plot_strea
 	    withclause{data_idx} = sprintf ("with %s linetype %d",
 					    style, typ);
 	  endif
 	  if (! isempty (obj.zdata))
 	    nd = 3;
 	    xdat = obj.xdata(:);
 	    ydat = obj.ydata(:);
 	    zdat = obj.zdata(:);
+
 	    if (xautoscale)
 	      [xmin, xmax, xminp] = get_data_limits (xmin, xmax, xminp, xdat);
 	    endif
 	    if (yautoscale)
 	      [ymin, ymax, yminp] = get_data_limits (ymin, ymax, yminp, ydat);
 	    endif
 	    if (zautoscale)
 	      [zmin, zmax, zminp] = get_data_limits (zmin, zmax, zminp, zdat);
 	    endif
 	    data{data_idx} = [xdat, ydat, zdat]';
 	    usingclause{data_idx} = "using ($1):($2):($3)";
 	    fputs (plot_stream, "set parametric;\n");
-	    fputs (plot_stream, "unset hidden3d;\n");
+	    fputs (plot_stream, "set hidden3d;\n");
 	    fputs (plot_stream, "set style data lines;\n");
 	    fputs (plot_stream, "set surface;\n");
 	    fputs (plot_stream, "unset contour;\n");
 	  else
 	    nd = 2;
 	    xdat = obj.xdata(:);
 	    ydat = obj.ydata(:);
 	    ldat = obj.ldata;
@@ -441,40 +444,41 @@ function __go_draw_axes__ (h, plot_strea
 	     [ymin, ymax, yminp] = get_data_limits (ymin, ymax, yminp, ycol);
 	   endif
 
 	   if (! isnan (xcol) && ! isnan (ycol))
 	     ## Is the patch closed or not
 	     data_idx++;
 	     is_image_data(data_idx) = false;
 	     parametric(data_idx) = false;
+	     have_cdata(data_idx) = false;
              titlespec{data_idx} = "title \"\"";
 	     usingclause{data_idx} = "";
              if (isfield (obj, "facecolor") && isfield (obj, "cdata"))
                if (strncmp (obj.facecolor, "none", 4))
 		 color = [1, 1, 1];
 
-               elseif (strncmp (obj.facecolor, "flat", 4) ||
-		       strncmp (obj.facecolor, "interp", 6))
-		 if (ndims (obj.cdata) == 2 && ... 
-		     ((nr > 3 && size (obj.cdata, 2) == nc) ...
-                      || (size (obj.cdata, 1) > 1 && ...
-			  size (obj.cdata, 2) == nc)))
+               elseif (strncmp (obj.facecolor, "flat", 4)
+		       || strncmp (obj.facecolor, "interp", 6))
+		 if (ndims (obj.cdata) == 2
+		     && ((nr > 3 && size (obj.cdata, 2) == nc)
+			 || (size (obj.cdata, 1) > 1
+			     && size (obj.cdata, 2) == nc)))
 		   ccol = obj.cdata (:, i);
 		 elseif (ndims (obj.cdata) == 3)
 		   ccol = permute (obj.cdata (:, i, :), [1, 3, 2]);
 		 else
 		   ccol = obj.cdata;
 		 endif
 		 if (strncmp (obj.facecolor, "flat", 4))
 		   if (numel(ccol) == 3)
 		     color = ccol;
 		   else
-		     r = 1 + round ((size (cmap, 1) - 1) * ...
-				    (ccol - clim(1))/(clim(2) - clim(1)));
+		     r = 1 + round ((size (cmap, 1) - 1)
+				    * (ccol - clim(1))/(clim(2) - clim(1)));
 		     r = max (1, min (r, size (cmap, 1)));
 		     color = cmap(r, :);
 		   endif
 		 elseif (strncmp (obj.facecolor, "interp", 6))
 		   warning ("\"interp\" not supported, using 1st entry of cdata")
 		   r = 1 + round ((size (cmap, 1) - 1) * ccol(1));
 		   r = max (1, min (r, size (cmap, 1)));
 		   color = cmap(r,:);
@@ -482,19 +486,19 @@ function __go_draw_axes__ (h, plot_strea
 	       else
 		 color = obj.facecolor;
 	       endif
              else
 	       color = [0, 1, 0];
              endif
 
 	     if (have_newer_gnuplot)
-	       withclause{data_idx} = ...
-	       sprintf ("with filledcurve lc rgb \"#%02x%02x%02x\"", ...
-			round (255*color));
+	       withclause{data_idx} ...
+		 = sprintf ("with filledcurve lc rgb \"#%02x%02x%02x\"",
+			    round (255*color));
 	     else
 	       if (isequal (color, [0,0,0]))
 		 typ = -1;
 	       elseif (isequal (color, [1,0,0]))
 		 typ = 1;
 	       elseif (isequal (color, [0,1,0]))
 		 typ = 2;
 	       elseif (isequal (color, [0,0,1]))
@@ -515,16 +519,17 @@ function __go_draw_axes__ (h, plot_strea
 	     data{data_idx} = [xcol, ycol]';
 	     usingclause{data_idx} = "using ($1):($2)";
 	   endif
 
            ## patch outline
 	   data_idx++;
            is_image_data(data_idx) = false;
            parametric(data_idx) = false;
+	   have_cdata(data_idx) = false;
            titlespec{data_idx} = "title \"\"";
 	   usingclause{data_idx} = "";
            if (isfield (obj, "edgecolor"))
              if (strncmp (obj.edgecolor, "none", 4))
                color = [1, 1, 1];
              elseif (strncmp (obj.edgecolor, "flat", 4))
                warning ("\"flat\" for edgecolor not supported");
                color = [0, 0, 0];
@@ -533,19 +538,19 @@ function __go_draw_axes__ (h, plot_strea
                color = [0, 0, 0];
              else
 	       color = obj.edgecolor;
              endif
            else
              color = [0, 0, 0];
            endif
 	   if (have_newer_gnuplot)
-	     withclause{data_idx} = ...
-	     sprintf ("with lines lc rgb \"#%02x%02x%02x\"", ...
-		      round (255*color));
+	     withclause{data_idx} ...
+	       = sprintf ("with lines lc rgb \"#%02x%02x%02x\"",
+			  round (255*color));
 	   else
 	     if (isequal (color, [0,0,0]))
 	       typ = -1;
 	     elseif (isequal (color, [1,0,0]))
 	       typ = 1;
 	     elseif (isequal (color, [0,1,0]))
 	       typ = 2;
 	     elseif (isequal (color, [0,0,1]))
@@ -559,31 +564,32 @@ function __go_draw_axes__ (h, plot_strea
 	     elseif (isequal (color, [1,1,0]))
 	       typ = 7;
 	     else
 	       typ = -1;
 	     endif
 	     withclause{data_idx} = sprintf ("with lines lt %d", typ);
 	   endif
 
-	   if (!isnan (xcol) && !isnan (ycol))
+	   if (!isnan (xcol) && ! isnan (ycol))
 	     data{data_idx} = [[xcol; xcol(1)], [ycol; ycol(1)]]';
 	   else
 	     data{data_idx} = [xcol, ycol]';
 	   endif
 	   usingclause{data_idx} = "using ($1):($2)";
 	 endfor
 
 	case "surface"
-	  nd = 4;
+	  nd = 3;
           if (! (strncmp (obj.edgecolor, "none", 4)
 		 && strncmp (obj.facecolor, "none", 4)))
 	    data_idx++;
 	    is_image_data(data_idx) = false;
 	    parametric(data_idx) = false;
+	    have_cdata(data_idx) = true;
 	    [style, typ, with] = do_linestyle_command (obj, data_idx, plot_stream);
 	    if (isempty (obj.keylabel))
 	      titlespec{data_idx} = "title \"\"";
 	    else
 	      tmp = undo_string_escapes (obj.keylabel);
 	      titlespec{data_idx} = strcat ("title \"", tmp, "\"");
 	    endif
 	    usingclause{data_idx} = "";
@@ -659,59 +665,85 @@ function __go_draw_axes__ (h, plot_strea
 
 	    fputs (plot_stream, "unset parametric;\n");
 	    fputs (plot_stream, "set hidden3d;\n");
 	    fputs (plot_stream, "set style data lines;\n");
 	    fputs (plot_stream, "set surface;\n");
 	    fputs (plot_stream, "unset contour;\n");
 	    fprintf (plot_stream, "set cbrange [%g:%g];\n", cmin, cmax);
 
-	    if (have_newer_gnuplot)
-	      ## Interpolation does not work for flat surfaces (e.g. pcolor)
-              ## and color mapping --> currently set empty.
-              interp_str = "";
-              surf_colormap = parent_figure_obj.colormap;
-              flat_interp_face = (strncmp (obj.facecolor, "flat", 4)
-				  || strncmp (obj.facecolor, "interp", 6));
-              flat_interp_edge = (strncmp (obj.edgecolor, "flat", 4)
-				  || strncmp (obj.edgecolor, "interp", 6));
-              palette_data = [];
+	    ## Interpolation does not work for flat surfaces (e.g. pcolor)
+            ## and color mapping --> currently set empty.
+            interp_str = "";
+            surf_colormap = parent_figure_obj.colormap;
+            flat_interp_face = (strncmp (obj.facecolor, "flat", 4)
+				|| strncmp (obj.facecolor, "interp", 6));
+            flat_interp_edge = (strncmp (obj.edgecolor, "flat", 4)
+				|| strncmp (obj.edgecolor, "interp", 6));
+            palette_data = [];
+
+            if (flat_interp_face
+		|| (flat_interp_edge && strncmp (obj.facecolor, "none", 4)))
+              palette_data = [1:rows(surf_colormap); surf_colormap'];
+            endif
 
-              if (flat_interp_face
-		  || (flat_interp_edge && strncmp (obj.facecolor, "none", 4)))
-                palette_data = [1:rows(surf_colormap); surf_colormap'];
-              endif
+            if (isnumeric (obj.facecolor))
+              palette_data = [1:2; [obj.facecolor; obj.facecolor]'];
+            endif
 
-              if (isnumeric (obj.facecolor))
-                palette_data = [1:2; [obj.facecolor; obj.facecolor]'];
-              endif
+            if (strncmp (obj.facecolor, "none", 4)
+		&& isnumeric (obj.edgecolor))
+              palette_data = [1:2; [obj.edgecolor; obj.edgecolor]'];
+            endif
 
-              if (strncmp (obj.facecolor, "none", 4)
-		  && isnumeric (obj.edgecolor))
-                palette_data = [1:2; [obj.edgecolor; obj.edgecolor]'];
-              endif
-
-              if (strncmp (obj.facecolor, "none", 4))
-              elseif (flat_interp_face && strncmp (obj.edgecolor, "flat", 4))
+            if (strncmp (obj.facecolor, "none", 4))
+            elseif (flat_interp_face && strncmp (obj.edgecolor, "flat", 4))
+              fprintf (plot_stream, "set pm3d at s %s;\n", interp_str);
+            else
+              if (strncmp (obj.edgecolor, "none", 4))
                 fprintf (plot_stream, "set pm3d at s %s;\n", interp_str);
               else
-                if (strncmp(obj.edgecolor, "none", 4))
-                  fprintf (plot_stream, "set pm3d at s %s;\n", interp_str);
-                else
-                  edgecol = obj.edgecolor;
-                  if (ischar(obj.edgecolor))
-                    edgecol = [0 0 0];
-                  endif
-                  fprintf (plot_stream, "set pm3d at s hidden3d %d %s;\n", data_idx, interp_str);
+                edgecol = obj.edgecolor;
+                if (ischar (obj.edgecolor))
+                  edgecol = [0,0,0];
+                endif
+                fprintf (plot_stream, "set pm3d at s hidden3d %d %s;\n", data_idx, interp_str);
+
+		if (have_newer_gnuplot)
                   fprintf (plot_stream,
                            "set style line %d linecolor rgb \"#%02x%02x%02x\" lw %f;\n",
                            data_idx, round (255*edgecol), obj.linewidth);
-                endif
+		else
+		  if (isequal (edgecol, [0,0,0]))
+		    typ = -1;
+		  elseif (isequal (edgecol, [1,0,0]))
+		    typ = 1;
+		  elseif (isequal (edgecol, [0,1,0]))
+		    typ = 2;
+		  elseif (isequal (edgecol, [0,0,1]))
+		    typ = 3;
+		  elseif (isequal (edgecol, [1,0,1]))
+		    typ = 4;
+		  elseif (isequal (edgecol, [0,1,1]))
+		    typ = 5;
+		  elseif (isequal (edgecol, [1,1,1]))
+		    typ = -1;
+		  elseif (isequal (edgecol, [1,1,0]))
+		    typ = 7;
+		  else
+		    typ = -1;
+		  endif
+                  fprintf (plot_stream,
+                           "set style line %d lt %d lw %f;\n",
+                           data_idx, typ, obj.linewidth);
+		endif
               endif
+            endif
 
+	    if (have_newer_gnuplot)
               if (length(palette_data) > 0)
                 fprintf (plot_stream,
 	                 "set palette positive color model RGB maxcolors %i;\n",
 	                 columns(palette_data));
 	        fprintf (plot_stream,
 	                 "set palette file \"-\" binary record=%d using 1:2:3:4;\n",
 	                 columns(palette_data));
 	        fwrite (plot_stream, palette_data, "float32");
@@ -816,17 +848,17 @@ function __go_draw_axes__ (h, plot_strea
     if (strcmpi (axis_obj.ydir, "reverse"))
       ydir = "reverse";
     else
       ydir = "noreverse";
     endif
     fprintf (plot_stream, "set %srange [%.15e:%.15e] %s;\n",
 	     yaxisloc, ylim, ydir);
 
-    if (nd == 3 || nd == 4)
+    if (nd == 3)
       if (zautoscale && have_data)
 	zlim = get_axis_limits (zmin, zmax, zminp, zlogscale);
 	if (isempty (zlim))
 	  return;
 	endif
 	set (h, "zlim", zlim, "zlimmode", "auto");
       else
 	zlim = axis_obj.zlim;
@@ -835,23 +867,23 @@ function __go_draw_axes__ (h, plot_strea
 	zdir = "reverse";
       else
 	zdir = "noreverse";
       endif
       fprintf (plot_stream, "set zrange [%.15e:%.15e] %s;\n", zlim, zdir);
     endif
 
     if (strcmpi (axis_obj.box, "on"))
-      if (nd == 3 || nd == 4)
+      if (nd == 3)
 	fputs (plot_stream, "set border 4095;\n");
       else
 	fputs (plot_stream, "set border 431;\n");
       endif
     else
-      if (nd == 3 || nd == 4)
+      if (nd == 3)
 	fputs (plot_stream, "set border 895;\n");
       else
 	fputs (plot_stream, "set border 3;\n");
 	fputs (plot_stream, "set xtics nomirror; set ytics nomirror;\n");
       endif
     endif
 
     if (strcmpi (axis_obj.visible, "off"))
@@ -866,17 +898,17 @@ function __go_draw_axes__ (h, plot_strea
       endif
       inout = "inside";
       keypos = axis_obj.keypos;
       if (ischar (keypos))
 	keypos = lower (keypos);
 	keyout = findstr (keypos, "outside");
 	if (! isempty (keyout))
 	  inout = "outside";
-	  keypos = keypos (1:keyout-1);
+	  keypos = keypos(1:keyout-1);
 	endif
       endif
       switch (keypos)
 	case -1
 	  pos = "right top";
 	  inout = "outside";
 	case 1
 	  pos = "right top";
@@ -946,33 +978,34 @@ function __go_draw_axes__ (h, plot_strea
 	fprintf (plot_stream, ", \"-\" %s %s %s \\\n",
 		 usingclause{i}, titlespec{i}, withclause{i});
       endfor
       fputs (plot_stream, ";\n");
       for i = 1:data_idx
 	if (is_image_data(i))
 	  fwrite (plot_stream, data{i}, "float32");
 	else
-	  __gnuplot_write_data__ (plot_stream, data{i}, nd, parametric(i));
+	  __gnuplot_write_data__ (plot_stream, data{i}, nd, parametric(i), 
+				  have_cdata(i));
 	endif
       endfor
     else
       fputs (plot_stream, "plot \"-\";\nInf Inf\ne\n");
     endif
 
     fflush (plot_stream);
 
   else
     print_usage ();
   endif
 
 endfunction
 
 function [xmin, xmax, xminp] = get_data_limits (xmin, xmax, xminp, xdat, tx)
-  if (! (isempty (xdat) || isempty (tx)))
+  if (! (isempty (xdat) || (nargin > 4 && isempty (tx))))
     xdat = xdat(! isinf (xdat));
     xmin = min (xmin, min (xdat));
     xmax = max (xmax, max (xdat));
     if (nargin == 5)
       tx = tx(! isinf (xdat) & tx > 0);
       if (! isempty (tx))
 	xminp = min (xminp, min (tx));
       endif
@@ -1185,17 +1218,17 @@ function [style, typ, with] = do_linesty
   if (have_newer_gnuplot && ! found_style)
     fputs (plot_stream, " default");
   endif
 
   fputs (plot_stream, ";\n");
 
 endfunction
 
-function __gnuplot_write_data__ (plot_stream, data, nd, parametric)
+function __gnuplot_write_data__ (plot_stream, data, nd, parametric, cdata)
   
   ## DATA is already transposed.
 
   ## FIXME -- this may need to be converted to C++ for speed.
 
   ## Convert NA elements to normal NaN values because fprintf writes
   ## "NA" and that confuses gnuplot.
   idx = find (isna (data));
@@ -1223,31 +1256,27 @@ function __gnuplot_write_data__ (plot_st
       endfor
     endif
   elseif (nd == 3)
     ## FIXME -- handle NaNs here too?
     if (parametric)
       fprintf (plot_stream, "%.15g %.15g %.15g\n", data);
     else
       nc = columns (data);
-      for j = 1:3:nc
-	fprintf (plot_stream, "%.15g %.15g %.15g\n", data(:,j:j+2)');
-	fputs (plot_stream, "\n");
-      endfor
-    endif
-  elseif (nd == 4)
-    ## FIXME -- handle NaNs here too?
-    if (parametric)
-      fprintf (plot_stream, "%.15g %.15g %.15g\n", data);
-    else
-      nc = columns (data);
-      for j = 1:4:nc
-	fprintf (plot_stream, "%.15g %.15g %.15g %.15g\n", data(:,j:j+3)');
-	fputs (plot_stream, "\n");
-      endfor
+      if (cdata)
+	for j = 1:4:nc
+	  fprintf (plot_stream, "%.15g %.15g %.15g %.15g\n", data(:,j:j+3)');
+	  fputs (plot_stream, "\n");
+	endfor
+      else
+	for j = 1:3:nc
+	  fprintf (plot_stream, "%.15g %.15g %.15g\n", data(:,j:j+2)');
+	  fputs (plot_stream, "\n");
+	endfor
+      endif
     endif
   endif
   fputs (plot_stream, "e\n");
 
 endfunction
 
 function do_tics (obj, plot_stream)
   if (strcmpi (obj.xaxislocation, "top"))
diff --git a/scripts/plot/meshc.m b/scripts/plot/meshc.m
--- a/scripts/plot/meshc.m
+++ b/scripts/plot/meshc.m
@@ -26,83 +26,53 @@
 ## @var{z} correspond to different @var{y} values.
 ## @seealso{meshgrid, mesh, contour}
 ## @end deftypefn
 
 function h = meshc (varargin)
 
   newplot ();
 
-  if (nargin == 1)
-    z = varargin{1};
-    if (ismatrix (z))
-      [nr, nc] = size (z);
-      x = 1:nc;
-      y = (1:nr)';
-    else
-      error ("meshc: argument must be a matrix");
-    endif
-  elseif (nargin == 3)
-    x = varargin{1};
-    y = varargin{2};
-    z = varargin{3};
+  tmp = surface (varargin{:});
+
+  ax = get (tmp, "parent");
 
-    if (isvector (x) && isvector (y) && ismatrix (z))
-      if (rows (z) == length (y) && columns (z) == length (x))
-        x = x(:)';
-        y = y(:);
-      else
-        msg = "meshc: rows (z) must be the same as length (y) and";
-        msg = sprintf ("%s\ncolumns (z) must be the same as length (x)", msg);
-        error (msg);
-      endif
-    elseif (ismatrix (x) && ismatrix (y) && ismatrix (z))
-      if (! (size_equal (x, y) && size_equal (x, z)))
-        error ("meshc: x, y, and z must have same dimensions");
-      endif
-    else
-      error ("meshc: x and y must be vectors and z must be a matrix");
-    endif
-  else
-    print_usage ();
-  endif
+  set (tmp, "facecolor", "none");
+  set (tmp, "edgecolor", "flat");
 
-  ## make a default line object, and make it the current axes for the
-  ## current figure.
-  ca = gca ();
-
-  tmp = __go_surface__ (ca, "xdata", x, "ydata", y, "zdata", z);
-
-  set (ca, "view", [-37.5, 30]);
+  set (ax, "view", [-37.5, 30]);
 
   hold on;
 
   [c, lev] = contourc (varargin{:});
 
-  cmap = get (gcf(), "colormap");
+  cmap = get (gcf (), "colormap");
   
   levx = linspace (min (lev), max (lev), size (cmap, 1));
 
   drawnow();
   ax = axis();
   zmin = 2 * ax(5) - ax(6);
 
-  ## decode contourc output format
+  ## Decode contourc output format.
   i1 = 1;
   while (i1 < length (c))
 
     clev = c(1,i1);
     clen = c(2,i1);
 
     ccr = interp1 (levx, cmap(:,1), clev);
     ccg = interp1 (levx, cmap(:,2), clev);
     ccb = interp1 (levx, cmap(:,3), clev);
 
     ii = i1+1:i1+clen;
-    line (c(1,ii), c(2,ii), zmin*ones(size(ii)), "color", [ccr, ccg, ccb]);
+    line (c(1,ii), c(2,ii), zmin * ones (size (ii)), "color",
+	  [ccr, ccg, ccb]);
 
     i1 += c(2,i1)+1;
+
   endwhile
   
   if (nargout > 0)
     h = tmp;
   endif
+
 endfunction
diff --git a/scripts/plot/pie.m b/scripts/plot/pie.m
--- a/scripts/plot/pie.m
+++ b/scripts/plot/pie.m
@@ -62,31 +62,33 @@ function retval = pie (varargin)
   else
     newplot ();
     tmp = __pie__ (gca (), varargin{:});
   endif
 
   if (nargout > 0)
     retval = tmp;
   endif
+
 endfunction
 
 function hlist = __pie__ (varargin)
+
   h = varargin{1};
   x = abs (varargin{2});
   iarg = 3;
 
   if (! isvector (x))
     error ("pie: expecting vector argument");
   endif
 
   len = length (x);
 
   while (iarg <= nargin)
-    arg = varargin {iarg++};
+    arg = varargin{iarg++};
     if (iscell (arg))
       labels = arg;
       if (! size_equal (x, labels))
 	error ("pie: mismatch in number of labels and data");
       endif
     elseif (isnumeric (arg))
       explode = arg;
       if (! size_equal (x, explode))
@@ -96,33 +98,33 @@ function hlist = __pie__ (varargin)
   endwhile
 
   if (! exist ("explode", "var"))
     explode = zeros (size (x));
   endif
 
   if (! exist ("labels", "var"))
     xp = round (100 * x ./ sum (x)); 
-    for i = 1 : len
+    for i = 1:len
       labels{i} = sprintf ("%d%%", xp(i));
     endfor
   endif
 
   hlist = [];
   refinement = 90;
-  phi = 0 : refinement : 360;
-  xphi = cumsum (x / sum(x) * 360);
-  for i = 1 : len 
+  phi = 0:refinement:360;
+  xphi = cumsum (x / sum (x) * 360);
+  for i = 1:len 
     if (i == 1)
       xn = 0 : 360 / refinement : xphi(i);
     else
       xn = xphi(i-1) : 360 / refinement : xphi(i);
     endif
 
-    if (xn (length (xn)) != xphi(i))
+    if (xn(end) != xphi(i))
       xn = [xn, xphi(i)];
     endif
 
     xn2 = (xn(1) + xn(end)) / 2;
     if (explode (i))
       xoff = - 0.1 * sind (xn2);
       yoff = 0.1 * cosd (xn2);
     else
@@ -133,18 +135,21 @@ function hlist = __pie__ (varargin)
     yt = 1.2 * cosd (xn2);
     if (xt > 0)
       align = "left";
     else
       align = "right";
     endif
 
     hlist = [hlist; patch(xoff + [0, - sind(xn)], yoff + [0, cosd(xn)], i);
-    	     text(xt, yt, labels {i}, "HorizontalAlignment", align)];
+    	     text(xt, yt, labels {i}, "horizontalalignment", align)];
   endfor
+
   if (len == 1)
     set (h, "clim", [1, 2]);
   else
     set (h, "clim", [1, len]);
   endif
-  axis ([-1.5,1.5,-1.5,1.5]);
+
+  axis ([-1.5, 1.5, -1.5, 1.5]);
+
 endfunction
   
