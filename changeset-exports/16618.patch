# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1367821201 14400
#      Mon May 06 02:20:01 2013 -0400
# Node ID 13728d41fb6a7e411d2a8a9f71cd779a92e9924d
# Parent  3a17dd5964e3740c977171985ea1c805060d1351
use functions to handle colors in Windows GUI terminal

* QWinTerminalImpl.cpp (QConsolePrivate::backgroundColor,
QConsolePrivate::foregroundColor, QConsolePrivate::selectionColor,
QConsolePrivate::cursorColor, QConsolePrivate::setBackgroundColor,
QConsolePrivate::setForegroundColor,
QConsolePrivate::setSelectionColor, QConsolePrivate::setCursorColor):
New functions.
(QConsolePrivate::m_backgroundColor,
QConsolePrivate::m_foregroundColor): Delete member variables.
(QConsolePrivate::QConsolePrivate): Call setBackgroundColor and
setForegroundColor to set default colors.
(QWinTerminalImpl::viewPaintEvent): Use functions to access colors.

diff --git a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
@@ -124,23 +124,31 @@ public:
   void setupStandardIO (DWORD stdHandleId, int fd, const char* name,
                         const char* devName);
 
   QPoint posToCell (const QPoint& pt);
   QString getSelection (void);
   void updateSelection (void);
   void clearSelection (void);
 
+  QColor backgroundColor (void) const;
+  QColor foregroundColor (void) const;
+  QColor selectionColor (void) const;
+  QColor cursorColor (void) const;
+
+  void setBackgroundColor (const QColor& color);
+  void setForegroundColor (const QColor& color);
+  void setSelectionColor (const QColor& color);
+  void setCursorColor (const QColor& color);
+
 private:
   QWinTerminalImpl* q;
 
 private:
   QFont m_font;
-  QColor m_backgroundColor;
-  QColor m_foregroundColor;
   QString m_command;
   QConsoleColors m_colors;
   bool m_inWheelEvent;
   QString m_title;
 
   QSize m_charSize;
   QSize m_bufferSize;
   QRect m_consoleRect;
@@ -258,37 +266,41 @@ QConsolePrivate::QConsolePrivate (QWinTe
        m_consoleRect.left (), m_consoleRect.top (),
        m_consoleRect.right (), m_consoleRect.bottom (),
        m_consoleRect.width (), m_consoleRect.height ());
 
   wchar_t titleBuf[260];
   GetConsoleTitleW (titleBuf, sizeof (titleBuf));
   q->setWindowTitle (QString::fromWCharArray (titleBuf));
 
-  m_backgroundColor = Qt::white;
-  m_foregroundColor = Qt::black;
-  SetConsoleTextAttribute (m_stdOut, 0xF0);
-
   m_font.setFamily ("Lucida Console");
   m_font.setPointSize (9);
   m_font.setStyleHint (QFont::TypeWriter);
 
   m_buffer = m_tmpBuffer = 0;
 
   m_consoleView = new QConsoleView (parent);
   m_scrollBar = new QScrollBar (Qt::Vertical, parent);
 
   QHBoxLayout* l = new QHBoxLayout (parent);
   l->setContentsMargins (0, 0, 0, 0);
   l->setSpacing (0);
   l->addWidget (m_consoleView, 1);
   l->addWidget (m_scrollBar, 0);
 
-  m_consoleView->setPalette (QPalette (m_backgroundColor));
+  SetConsoleTextAttribute (m_stdOut, 0xF0);
+
+  setBackgroundColor (Qt::white);
+  setForegroundColor (Qt::black);
+
+  QPalette palette (backgroundColor ());
+
+  m_consoleView->setPalette (palette);
   m_consoleView->setAutoFillBackground (true);
+
   m_consoleView->setFont (m_font);
   parent->setFocusPolicy (Qt::StrongFocus);
   parent->winId ();
 
   updateScrollBar ();
 
   m_consoleWatcher = new QTimer (parent);
   m_consoleWatcher->setInterval (10);
@@ -441,17 +453,42 @@ void QConsolePrivate::updateSelection (v
 
 void QConsolePrivate::clearSelection (void)
 {
   m_beginSelection = m_endSelection = QPoint ();
 
   m_consoleView->update ();
 }
 
-//////////////////////////////////////////////////////////////////////////////
+QColor QConsolePrivate::backgroundColor (void) const { return m_colors[15]; }
+QColor QConsolePrivate::foregroundColor (void) const { return m_colors[0]; }
+QColor QConsolePrivate::selectionColor (void) const { return m_colors[7]; }
+QColor QConsolePrivate::cursorColor (void) const { return m_colors[8]; }
+
+void QConsolePrivate::setBackgroundColor (const QColor& color)
+{
+  m_colors[15] = color;
+}
+
+void QConsolePrivate::setForegroundColor (const QColor& color)
+{
+  m_colors[0] = color;
+}
+
+void QConsolePrivate::setSelectionColor (const QColor& color)
+{
+  m_colors[7] = color;
+}
+
+void QConsolePrivate::setCursorColor (const QColor& color)
+{
+  m_colors[8] = color;
+}
+
+/////////////////////////////////////////////////////////////////////////////
 
 void QConsolePrivate::closeStandardIO (int fd, DWORD stdHandleId,
                                        const char* name)
 {
   if (close (fd) == -1)
     log ("Failed to close file descriptor %d: errno=%d.\n", fd, errno);
   if (! CloseHandle (GetStdHandle (stdHandleId)))
     log ("Failed to close Win32 %s: error=%08x.\n", name, GetLastError ());
@@ -908,17 +945,17 @@ void QWinTerminalImpl::viewPaintEvent (Q
   cx2 = qMin (d->m_consoleRect.width () - 1, updateRect.right () / cw);
   cy2 = qMin (d->m_consoleRect.height () - 1, updateRect.bottom () / ch);
 
   if (cx1 > d->m_consoleRect.width () - 1
       || cy1 > d->m_consoleRect.height () - 1)
     return;
 
   p.setFont (d->m_font);
-  p.setPen (d->m_foregroundColor);
+  p.setPen (d->foregroundColor ());
 
   ascent = p.fontMetrics ().ascent ();
   stride = d->m_consoleRect.width ();
 
   s.reserve (cx2 - cx1 + 1);
   y = ascent + cy1 * ch;;
 
   QPoint begin = d->m_beginSelection;
@@ -1001,43 +1038,42 @@ void QWinTerminalImpl::viewPaintEvent (Q
       if (haveSelection && j >= begin.y () && j <= end.y ())
         {
           int selectionBegin = j == begin.y () ? begin.x (): 0;
 
           int len = ((j == end.y () && end.x () < charsThisLine)
                      ? end.x () - selectionBegin + 1
                      : stride - selectionBegin);
 
-          QColor selectionColor = d->m_colors[7];
+          QColor color = d->selectionColor ();
 
           p.save ();
 
           p.setCompositionMode (QPainter::RasterOp_SourceXorDestination);
 
-          p.fillRect (selectionBegin * cw, y-ascent, len * cw, ch,
-                      selectionColor);
+          p.fillRect (selectionBegin * cw, y-ascent, len * cw, ch, color);
 
           p.restore ();
         }
     }
 
   if (! d->m_cursorBlinking)
     {
-      QColor cursorColor = d->m_colors[7];
+      QColor color = d->cursorColor ();
       QRect cursorRect = d->cursorRect ();
 
-      p.setPen (d->m_foregroundColor);
+      p.setPen (d->foregroundColor ());
 
       if (d->m_cursorType == QConsolePrivate::BlockCursor)
         {
           if (hasFocus ())
             {
               p.setCompositionMode (QPainter::RasterOp_SourceXorDestination);
 
-              p.fillRect (cursorRect, cursorColor);
+              p.fillRect (cursorRect, color);
             }
           else
             {
               // draw the cursor outline, adjusting the area so that
               // it is draw entirely inside 'rect'
  
               int penWidth = qMax (1, p.pen().width());
  
