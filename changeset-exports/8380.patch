# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1228642174 -3600
#      Sun Dec 07 10:29:34 2008 +0100
# Node ID dbe67764e628c6a211bdef4410a69898b8b69723
# Parent  ad8ed668e0a44e97983e2e05b80d3439be50ccb5
fix & improve speed of diagonal matrix multiplication

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2008-12-07  Jaroslav Hajek  <highegg@gmail.com>
+
+	* mx-inlines.cc (mx_inline_fill_vs): New template function.
+	* mx-op-defs.h (everywhere): Replace int by octave_idx_type.
+	(MDM_MULTIPLY_OP): Use mx_inline_mul_vs and mx_inline_fill_vs.
+	(DMM_MULTIPLY_OP): Dtto.
+	* fDiagMatrix.cc (operator *): Remove redundant ifs.
+	* fCDiagMatrix.cc (operator *): Remove redundant ifs.
+
 2008-12-06  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-locbuf.h (OCTAVE_LOCAL_BUFFER_INIT): New macro.
 
 2008-10-29  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-locbuf.h: New header file.
 	* Array-d.cc, Array-f.cc, Array.cc, CMatrix.cc, CNDArray.cc,
diff --git a/liboctave/fCDiagMatrix.cc b/liboctave/fCDiagMatrix.cc
--- a/liboctave/fCDiagMatrix.cc
+++ b/liboctave/fCDiagMatrix.cc
@@ -450,24 +450,17 @@ operator * (const FloatComplexDiagMatrix
 
   octave_idx_type len = a_nr < b_nc ? a_nr : b_nc;
 
   for (octave_idx_type i = 0; i < len; i++)
     {
       FloatComplex a_element = a.elem (i, i);
       float b_element = b.elem (i, i);
 
-      if (a_element == static_cast<float> (0.0) || b_element == static_cast<float> (0.0))
-        c.elem (i, i) = 0;
-      else if (a_element == static_cast<float> (1.0))
-        c.elem (i, i) = b_element;
-      else if (b_element == static_cast<float> (1.0))
-        c.elem (i, i) = a_element;
-      else
-        c.elem (i, i) = a_element * b_element;
+      c.elem (i, i) = a_element * b_element;
     }
 
   return c;
 }
 
 FloatComplexDiagMatrix
 operator * (const FloatDiagMatrix& a, const FloatComplexDiagMatrix& b)
 {
@@ -490,24 +483,17 @@ operator * (const FloatDiagMatrix& a, co
 
   octave_idx_type len = a_nr < b_nc ? a_nr : b_nc;
 
   for (octave_idx_type i = 0; i < len; i++)
     {
       float a_element = a.elem (i, i);
       FloatComplex b_element = b.elem (i, i);
 
-      if (a_element == static_cast<float> (0.0) || b_element == static_cast<float> (0.0))
-        c.elem (i, i) = 0;
-      else if (a_element == static_cast<float> (1.0))
-        c.elem (i, i) = b_element;
-      else if (b_element == static_cast<float> (1.0))
-        c.elem (i, i) = a_element;
-      else
-        c.elem (i, i) = a_element * b_element;
+      c.elem (i, i) = a_element * b_element;
     }
 
   return c;
 }
 
 FloatComplexDiagMatrix
 operator * (const FloatComplexDiagMatrix& a, const FloatComplexDiagMatrix& b)
 {
@@ -530,24 +516,17 @@ operator * (const FloatComplexDiagMatrix
 
   octave_idx_type len = a_nr < b_nc ? a_nr : b_nc;
 
   for (octave_idx_type i = 0; i < len; i++)
     {
       FloatComplex a_element = a.elem (i, i);
       FloatComplex b_element = b.elem (i, i);
 
-      if (a_element == static_cast<float> (0.0) || b_element == static_cast<float> (0.0))
-        c.elem (i, i) = 0;
-      else if (a_element == static_cast<float> (1.0))
-        c.elem (i, i) = b_element;
-      else if (b_element == static_cast<float> (1.0))
-        c.elem (i, i) = a_element;
-      else
-        c.elem (i, i) = a_element * b_element;
+      c.elem (i, i) = a_element * b_element;
     }
 
   return c;
 }
 
 // other operations
 
 FloatComplexDET
diff --git a/liboctave/fDiagMatrix.cc b/liboctave/fDiagMatrix.cc
--- a/liboctave/fDiagMatrix.cc
+++ b/liboctave/fDiagMatrix.cc
@@ -329,24 +329,17 @@ operator * (const FloatDiagMatrix& a, co
 
   octave_idx_type len = a_nr < b_nc ? a_nr : b_nc;
 
   for (octave_idx_type i = 0; i < len; i++)
     {
       float a_element = a.elem (i, i);
       float b_element = b.elem (i, i);
 
-      if (a_element == 0.0 || b_element == 0.0)
-        c.elem (i, i) = 0.0;
-      else if (a_element == 1.0)
-        c.elem (i, i) = b_element;
-      else if (b_element == 1.0)
-        c.elem (i, i) = a_element;
-      else
-        c.elem (i, i) = a_element * b_element;
+      c.elem (i, i) = a_element * b_element;
     }
 
   return c;
 }
 
 // other operations
 
 FloatDET
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -25,16 +25,24 @@ along with Octave; see the file COPYING.
 #define octave_mx_inlines_h 1
 
 #include <cstddef>
 
 #include "quit.h"
 
 #include "oct-cmplx.h"
 
+template <class R, class S>
+inline void
+mx_inline_fill_vs (R *r, size_t n, S s)
+{
+  for (size_t i = 0; i < n; i++)
+    r[i] = s;
+}
+
 #define VS_OP_FCN(F, OP) \
   template <class R, class V, class S> \
   inline void \
   F ## _vs (R *r, const V *v, size_t n, S s) \
   { \
     for (size_t i = 0; i < n; i++) \
       r[i] = v[i] OP s; \
   }
diff --git a/liboctave/mx-op-defs.h b/liboctave/mx-op-defs.h
--- a/liboctave/mx-op-defs.h
+++ b/liboctave/mx-op-defs.h
@@ -1,12 +1,13 @@
 /*
 
 Copyright (C) 1996, 1997, 1998, 2000, 2001, 2003, 2004, 2005, 2006,
               2007 John W. Eaton
+Copyright (C) 2008 Jaroslav Hajek
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
 
@@ -19,16 +20,17 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if !defined (octave_mx_op_defs_h)
 #define octave_mx_op_defs_h 1
 
+#include "oct-types.h"
 #include "mx-inlines.cc"
 
 #define BIN_OP_DECL(R, OP, X, Y, API) \
   extern API R OP (const X&, const Y&)
 
 class boolMatrix;
 class boolNDArray;
 
@@ -51,21 +53,21 @@ class boolNDArray;
   BIN_OP_DECL (R, operator -, V, S, API); \
   BIN_OP_DECL (R, operator *, V, S, API); \
   BIN_OP_DECL (R, operator /, V, S, API);
 
 #define VS_BIN_OP(R, F, OP, V, S) \
   R \
   F (const V& v, const S& s) \
   { \
-    int len = v.length (); \
+    octave_idx_type len = v.length (); \
  \
     R r (len); \
  \
-    for (int i = 0; i < len; i++) \
+    for (octave_idx_type i = 0; i < len; i++) \
       r.elem(i) = v.elem(i) OP s; \
  \
     return r; \
   }
 
 #define VS_BIN_OPS(R, V, S) \
   VS_BIN_OP (R, operator +, +, V, S) \
   VS_BIN_OP (R, operator -, -, V, S) \
@@ -82,21 +84,21 @@ class boolNDArray;
   BIN_OP_DECL (R, operator -, S, V, API); \
   BIN_OP_DECL (R, operator *, S, V, API); \
   BIN_OP_DECL (R, operator /, S, V, API);
 
 #define SV_BIN_OP(R, F, OP, S, V) \
   R \
   F (const S& s, const V& v) \
   { \
-    int len = v.length (); \
+    octave_idx_type len = v.length (); \
  \
     R r (len); \
  \
-    for (int i = 0; i < len; i++) \
+    for (octave_idx_type i = 0; i < len; i++) \
       r.elem(i) = s OP v.elem(i); \
  \
     return r; \
   }
 
 #define SV_BIN_OPS(R, S, V) \
   SV_BIN_OP (R, operator +, +, S, V) \
   SV_BIN_OP (R, operator -, -, S, V) \
@@ -115,26 +117,26 @@ class boolNDArray;
   BIN_OP_DECL (R, quotient,   V1, V2, API);
 
 #define VV_BIN_OP(R, F, OP, V1, V2) \
   R \
   F (const V1& v1, const V2& v2) \
   { \
     R r; \
  \
-    int v1_len = v1.length (); \
-    int v2_len = v2.length (); \
+    octave_idx_type v1_len = v1.length (); \
+    octave_idx_type v2_len = v2.length (); \
  \
     if (v1_len != v2_len) \
       gripe_nonconformant (#OP, v1_len, v2_len); \
     else \
       { \
 	r.resize (v1_len); \
  \
-	for (int i = 0; i < v1_len; i++) \
+	for (octave_idx_type i = 0; i < v1_len; i++) \
 	  r.elem(i) = v1.elem(i) OP v2.elem(i); \
       } \
  \
     return r; \
   }
 
 #define VV_BIN_OPS(R, V1, V2) \
   VV_BIN_OP (R, operator +, +, V1, V2) \
@@ -152,18 +154,18 @@ class boolNDArray;
   BIN_OP_DECL (R, operator -, M, S, API); \
   BIN_OP_DECL (R, operator *, M, S, API); \
   BIN_OP_DECL (R, operator /, M, S, API);
 
 #define MS_BIN_OP(R, OP, M, S, F) \
   R \
   OP (const M& m, const S& s) \
   { \
-    int nr = m.rows (); \
-    int nc = m.cols (); \
+    octave_idx_type nr = m.rows (); \
+    octave_idx_type nc = m.cols (); \
  \
     R r (nr, nc); \
  \
     if (nr > 0 && nc > 0) \
       F ## _vs (r.fortran_vec (), m.data (), nr * nc, s); \
  \
     return r; \
   }
@@ -183,25 +185,25 @@ class boolNDArray;
   CMP_OP_DECL (mx_el_ne, M, S, API);
 
 #define MS_CMP_OP(F, OP, M, MC, S, SC) \
   boolMatrix \
   F (const M& m, const S& s) \
   { \
     boolMatrix r; \
  \
-    int nr = m.rows (); \
-    int nc = m.cols (); \
+    octave_idx_type nr = m.rows (); \
+    octave_idx_type nc = m.cols (); \
  \
     r.resize (nr, nc); \
  \
     if (nr > 0 && nc > 0) \
       { \
-        for (int j = 0; j < nc; j++) \
-          for (int i = 0; i < nr; i++) \
+        for (octave_idx_type j = 0; j < nc; j++) \
+          for (octave_idx_type i = 0; i < nr; i++) \
 	    r.elem(i, j) = MC (m.elem(i, j)) OP SC (s); \
       } \
  \
     return r; \
   }
 
 #define MS_CMP_OPS(M, CM, S, CS) \
   MS_CMP_OP (mx_el_lt, <,  M, CM, S, CS) \
@@ -216,30 +218,30 @@ class boolNDArray;
   BOOL_OP_DECL (mx_el_or,  M, S, API); \
 
 #define MS_BOOL_OP(F, OP, M, S, LHS_ZERO, RHS_ZERO) \
   boolMatrix \
   F (const M& m, const S& s) \
   { \
     boolMatrix r; \
  \
-    int nr = m.rows (); \
-    int nc = m.cols (); \
+    octave_idx_type nr = m.rows (); \
+    octave_idx_type nc = m.cols (); \
  \
     if (nr != 0 && nc != 0) \
       { \
         r.resize (nr, nc); \
  \
 	if (xisnan (s)) \
 	  gripe_nan_to_logical_conversion (); \
 	else \
 	  { \
  \
-	    for (int j = 0; j < nc; j++) \
-	      for (int i = 0; i < nr; i++) \
+	    for (octave_idx_type j = 0; j < nc; j++) \
+	      for (octave_idx_type i = 0; i < nr; i++) \
 		if (xisnan (m.elem(i, j))) \
 		  { \
 		    gripe_nan_to_logical_conversion (); \
 		    return r; \
 		  } \
 		else \
 		  r.elem(i, j) = (m.elem(i, j) != LHS_ZERO) OP (s != RHS_ZERO); \
 	    } \
@@ -267,18 +269,18 @@ class boolNDArray;
   BIN_OP_DECL (R, operator -, S, M, API); \
   BIN_OP_DECL (R, operator *, S, M, API); \
   BIN_OP_DECL (R, operator /, S, M, API);
 
 #define SM_BIN_OP(R, OP, S, M, F) \
   R \
   OP (const S& s, const M& m) \
   { \
-    int nr = m.rows (); \
-    int nc = m.cols (); \
+    octave_idx_type nr = m.rows (); \
+    octave_idx_type nc = m.cols (); \
  \
     R r (nr, nc); \
  \
     if (nr > 0 && nc > 0) \
       F ## _sv (r.fortran_vec (), s, m.data (), nr * nc); \
  \
     return r; \
   }
@@ -298,25 +300,25 @@ class boolNDArray;
   CMP_OP_DECL (mx_el_ne, S, M, API);
 
 #define SM_CMP_OP(F, OP, S, SC, M, MC) \
   boolMatrix \
   F (const S& s, const M& m) \
   { \
     boolMatrix r; \
  \
-    int nr = m.rows (); \
-    int nc = m.cols (); \
+    octave_idx_type nr = m.rows (); \
+    octave_idx_type nc = m.cols (); \
  \
     r.resize (nr, nc); \
  \
     if (nr > 0 && nc > 0) \
       { \
-        for (int j = 0; j < nc; j++) \
-          for (int i = 0; i < nr; i++) \
+        for (octave_idx_type j = 0; j < nc; j++) \
+          for (octave_idx_type i = 0; i < nr; i++) \
 	    r.elem(i, j) = SC (s) OP MC (m.elem(i, j)); \
       } \
  \
     return r; \
   }
 
 #define SM_CMP_OPS(S, CS, M, CM) \
   SM_CMP_OP (mx_el_lt, <,  S, CS, M, CM) \
@@ -331,29 +333,29 @@ class boolNDArray;
   BOOL_OP_DECL (mx_el_or,  S, M, API); \
 
 #define SM_BOOL_OP(F, OP, S, M, LHS_ZERO, RHS_ZERO) \
   boolMatrix \
   F (const S& s, const M& m) \
   { \
     boolMatrix r; \
  \
-    int nr = m.rows (); \
-    int nc = m.cols (); \
+    octave_idx_type nr = m.rows (); \
+    octave_idx_type nc = m.cols (); \
  \
     if (nr != 0 && nc != 0) \
       { \
         r.resize (nr, nc); \
  \
 	if (xisnan (s)) \
 	  gripe_nan_to_logical_conversion (); \
 	else \
 	  { \
-	    for (int j = 0; j < nc; j++) \
-	      for (int i = 0; i < nr; i++) \
+	    for (octave_idx_type j = 0; j < nc; j++) \
+	      for (octave_idx_type i = 0; i < nr; i++) \
 		if (xisnan (m.elem(i, j))) \
 		  { \
 		    gripe_nan_to_logical_conversion (); \
 		    return r; \
 		  } \
 		else \
 		  r.elem(i, j) = (s != LHS_ZERO) OP (m.elem(i, j) != RHS_ZERO); \
 	  } \
@@ -383,21 +385,21 @@ class boolNDArray;
   BIN_OP_DECL (R, quotient,   M1, M2, API);
 
 #define MM_BIN_OP(R, OP, M1, M2, F) \
   R \
   OP (const M1& m1, const M2& m2) \
   { \
     R r; \
  \
-    int m1_nr = m1.rows (); \
-    int m1_nc = m1.cols (); \
+    octave_idx_type m1_nr = m1.rows (); \
+    octave_idx_type m1_nc = m1.cols (); \
  \
-    int m2_nr = m2.rows (); \
-    int m2_nc = m2.cols (); \
+    octave_idx_type m2_nr = m2.rows (); \
+    octave_idx_type m2_nc = m2.cols (); \
  \
     if (m1_nr != m2_nr || m1_nc != m2_nc) \
       gripe_nonconformant (#OP, m1_nr, m1_nc, m2_nr, m2_nc); \
     else \
       { \
 	r.resize (m1_nr, m1_nc); \
  \
 	if (m1_nr > 0 && m1_nc > 0) \
@@ -422,28 +424,28 @@ class boolNDArray;
   CMP_OP_DECL (mx_el_ne, M1, M2, API);
 
 #define MM_CMP_OP(F, OP, M1, C1, M2, C2) \
   boolMatrix \
   F (const M1& m1, const M2& m2) \
   { \
     boolMatrix r; \
  \
-    int m1_nr = m1.rows (); \
-    int m1_nc = m1.cols (); \
+    octave_idx_type m1_nr = m1.rows (); \
+    octave_idx_type m1_nc = m1.cols (); \
  \
-    int m2_nr = m2.rows (); \
-    int m2_nc = m2.cols (); \
+    octave_idx_type m2_nr = m2.rows (); \
+    octave_idx_type m2_nc = m2.cols (); \
  \
     if (m1_nr == m2_nr && m1_nc == m2_nc) \
       { \
 	r.resize (m1_nr, m1_nc); \
  \
-	for (int j = 0; j < m1_nc; j++) \
-	  for (int i = 0; i < m1_nr; i++) \
+	for (octave_idx_type j = 0; j < m1_nc; j++) \
+	  for (octave_idx_type i = 0; i < m1_nr; i++) \
 	    r.elem(i, j) = C1 (m1.elem(i, j)) OP C2 (m2.elem(i, j)); \
       } \
     else \
       gripe_nonconformant (#F, m1_nr, m1_nc, m2_nr, m2_nc); \
  \
     return r; \
   }
 
@@ -460,30 +462,30 @@ class boolNDArray;
   BOOL_OP_DECL (mx_el_or,  M1, M2, API);
 
 #define MM_BOOL_OP(F, OP, M1, M2, LHS_ZERO, RHS_ZERO) \
   boolMatrix \
   F (const M1& m1, const M2& m2) \
   { \
     boolMatrix r; \
  \
-    int m1_nr = m1.rows (); \
-    int m1_nc = m1.cols (); \
+    octave_idx_type m1_nr = m1.rows (); \
+    octave_idx_type m1_nc = m1.cols (); \
  \
-    int m2_nr = m2.rows (); \
-    int m2_nc = m2.cols (); \
+    octave_idx_type m2_nr = m2.rows (); \
+    octave_idx_type m2_nc = m2.cols (); \
  \
     if (m1_nr == m2_nr && m1_nc == m2_nc) \
       { \
 	if (m1_nr != 0 || m1_nc != 0) \
 	  { \
 	    r.resize (m1_nr, m1_nc); \
  \
-	    for (int j = 0; j < m1_nc; j++) \
-	      for (int i = 0; i < m1_nr; i++) \
+	    for (octave_idx_type j = 0; j < m1_nc; j++) \
+	      for (octave_idx_type i = 0; i < m1_nr; i++) \
 		if (xisnan (m1.elem(i, j)) || xisnan (m2.elem(i, j))) \
 		  { \
 		    gripe_nan_to_logical_conversion (); \
 		    return r; \
 		  } \
 		else \
 		  r.elem(i, j) = (m1.elem(i, j) != LHS_ZERO) \
 		    OP (m2.elem(i, j) != RHS_ZERO); \
@@ -519,17 +521,17 @@ class boolNDArray;
   BIN_OP_DECL (R, operator /, ND, S, API);
 
 #define NDS_BIN_OP(R, OP, ND, S, F) \
   R \
   OP (const ND& m, const S& s) \
   { \
     R r (m.dims ()); \
  \
-    int len = m.length (); \
+    octave_idx_type len = m.length (); \
  \
     if (len > 0) \
       F ## _vs (r.fortran_vec (), m.data (), len, s); \
  \
     return r; \
   }
 
 #define NDS_BIN_OPS(R, ND, S) \
@@ -547,21 +549,21 @@ class boolNDArray;
   NDCMP_OP_DECL (mx_el_ne, ND, S, API);
 
 #define NDS_CMP_OP(F, OP, ND, NDC, S, SC) \
   boolNDArray \
   F (const ND& m, const S& s) \
   { \
     boolNDArray r; \
  \
-    int len = m.length (); \
+    octave_idx_type len = m.length (); \
  \
     r.resize (m.dims ()); \
  \
-    for (int i = 0; i < len; i++) \
+    for (octave_idx_type i = 0; i < len; i++) \
       r.elem(i) = NDC (m.elem(i)) OP SC (s); \
  \
     return r; \
   }
 
 #define NDS_CMP_OPS(ND, NDC, S, SC) \
   NDS_CMP_OP (mx_el_lt, <,  ND, NDC, S, SC) \
   NDS_CMP_OP (mx_el_le, <=, ND, NDC, S, SC) \
@@ -571,21 +573,21 @@ class boolNDArray;
   NDS_CMP_OP (mx_el_ne, !=, ND,    , S,   )
 
 #define NDS_CMP_OP1(F, OP, ND, NDC, S, SC, SPEC) \
   boolNDArray \
   F (const ND& m, const S& s) \
   { \
     boolNDArray r; \
  \
-    int len = m.length (); \
+    octave_idx_type len = m.length (); \
  \
     r.resize (m.dims ()); \
  \
-    for (int i = 0; i < len; i++) \
+    for (octave_idx_type i = 0; i < len; i++) \
       r.elem(i) = operator OP <SPEC> (NDC (m.elem(i)), SC (s)); \
  \
     return r; \
   }
 
 #define NDS_CMP_OPS1(ND, NDC, S, SC, SPEC) \
   NDS_CMP_OP1 (mx_el_lt, <,  ND, NDC, S, SC, SPEC) \
   NDS_CMP_OP1 (mx_el_le, <=, ND, NDC, S, SC, SPEC) \
@@ -595,21 +597,21 @@ class boolNDArray;
   NDS_CMP_OP1 (mx_el_ne, !=, ND,    , S,   , SPEC)
 
 #define NDS_CMP_OP2(F, OP, ND, NDC, S, SC, SPEC1, SPEC2) \
   boolNDArray \
   F (const ND& m, const S& s) \
   { \
     boolNDArray r; \
  \
-    int len = m.length (); \
+    octave_idx_type len = m.length (); \
  \
     r.resize (m.dims ()); \
  \
-    for (int i = 0; i < len; i++) \
+    for (octave_idx_type i = 0; i < len; i++) \
       r.elem(i) = operator OP <SPEC1,SPEC2> (NDC (m.elem(i)), SC (s)); \
  \
     return r; \
   }
 
 #define NDS_CMP_OPS2(ND, NDC, S, SC, SPEC1, SPEC2) \
   NDS_CMP_OP2 (mx_el_lt, <,  ND, NDC, S, SC, SPEC1, SPEC2) \
   NDS_CMP_OP2 (mx_el_le, <=, ND, NDC, S, SC, SPEC1, SPEC2) \
@@ -623,27 +625,27 @@ class boolNDArray;
   NDBOOL_OP_DECL (mx_el_or,  ND, S, API);
 
 #define NDS_BOOL_OP(F, OP, ND, S, LHS_ZERO, RHS_ZERO) \
   boolNDArray \
   F (const ND& m, const S& s) \
   { \
     boolNDArray r; \
  \
-    int len = m.length (); \
+    octave_idx_type len = m.length (); \
  \
     if (len > 0) \
       { \
         r.resize (m.dims ()); \
  \
 	if (xisnan (s)) \
 	  gripe_nan_to_logical_conversion (); \
 	else \
 	  { \
-	    for (int i = 0; i < len; i++) \
+	    for (octave_idx_type i = 0; i < len; i++) \
 	      if (xisnan (m.elem(i))) \
 		{ \
 		  gripe_nan_to_logical_conversion (); \
 		  return r; \
 		} \
 	      else \
 		r.elem(i) = (m.elem(i) != LHS_ZERO) OP (s != RHS_ZERO); \
 	  } \
@@ -673,17 +675,17 @@ class boolNDArray;
   BIN_OP_DECL (R, operator /, S, ND, API);
 
 #define SND_BIN_OP(R, OP, S, ND, F) \
   R \
   OP (const S& s, const ND& m) \
   { \
     R r (m.dims ()); \
  \
-    int len = m.length (); \
+    octave_idx_type len = m.length (); \
  \
     if (len > 0) \
       F ## _sv (r.fortran_vec (), s, m.data (), len); \
  \
     return r; \
   }
 
 #define SND_BIN_OPS(R, S, ND) \
@@ -701,21 +703,21 @@ class boolNDArray;
   NDCMP_OP_DECL (mx_el_ne, S, ND, API);
 
 #define SND_CMP_OP(F, OP, S, SC, ND, NDC) \
   boolNDArray \
   F (const S& s, const ND& m) \
   { \
     boolNDArray r; \
  \
-    int len = m.length (); \
+    octave_idx_type len = m.length (); \
  \
     r.resize (m.dims ()); \
  \
-    for (int i = 0; i < len; i++) \
+    for (octave_idx_type i = 0; i < len; i++) \
       r.elem(i) = SC (s) OP NDC (m.elem(i)); \
  \
     return r; \
   }
 
 #define SND_CMP_OPS(S, CS, ND, CND) \
   SND_CMP_OP (mx_el_lt, <,  S, CS, ND, CND) \
   SND_CMP_OP (mx_el_le, <=, S, CS, ND, CND) \
@@ -725,21 +727,21 @@ class boolNDArray;
   SND_CMP_OP (mx_el_ne, !=, S,   , ND,    )
 
 #define SND_CMP_OP1(F, OP, S, SC, ND, NDC, SPEC) \
   boolNDArray \
   F (const S& s, const ND& m) \
   { \
     boolNDArray r; \
  \
-    int len = m.length (); \
+    octave_idx_type len = m.length (); \
  \
     r.resize (m.dims ()); \
  \
-    for (int i = 0; i < len; i++) \
+    for (octave_idx_type i = 0; i < len; i++) \
       r.elem(i) = operator OP <SPEC> (SC (s), NDC (m.elem(i))); \
  \
     return r; \
   }
 
 #define SND_CMP_OPS1(S, CS, ND, CND, SPEC) \
   SND_CMP_OP1 (mx_el_lt, <,  S, CS, ND, CND, SPEC) \
   SND_CMP_OP1 (mx_el_le, <=, S, CS, ND, CND, SPEC) \
@@ -749,21 +751,21 @@ class boolNDArray;
   SND_CMP_OP1 (mx_el_ne, !=, S,   , ND,    , SPEC)
 
 #define SND_CMP_OP2(F, OP, S, SC, ND, NDC, SPEC1, SPEC2) \
   boolNDArray \
   F (const S& s, const ND& m) \
   { \
     boolNDArray r; \
  \
-    int len = m.length (); \
+    octave_idx_type len = m.length (); \
  \
     r.resize (m.dims ()); \
  \
-    for (int i = 0; i < len; i++) \
+    for (octave_idx_type i = 0; i < len; i++) \
       r.elem(i) = operator OP <SPEC1, SPEC2> (SC (s), NDC (m.elem(i))); \
  \
     return r; \
   }
 
 #define SND_CMP_OPS2(S, CS, ND, CND, SPEC1, SPEC2) \
   SND_CMP_OP2 (mx_el_lt, <,  S, CS, ND, CND, SPEC1, SPEC2) \
   SND_CMP_OP2 (mx_el_le, <=, S, CS, ND, CND, SPEC1, SPEC2) \
@@ -777,27 +779,27 @@ class boolNDArray;
   NDBOOL_OP_DECL (mx_el_or,  S, ND, API);
 
 #define SND_BOOL_OP(F, OP, S, ND, LHS_ZERO, RHS_ZERO) \
   boolNDArray \
   F (const S& s, const ND& m) \
   { \
     boolNDArray r; \
  \
-    int len = m.length (); \
+    octave_idx_type len = m.length (); \
  \
     if (len > 0) \
       { \
         r.resize (m.dims ()); \
  \
 	if (xisnan (s)) \
 	  gripe_nan_to_logical_conversion (); \
 	else \
 	  { \
-	    for (int i = 0; i < len; i++) \
+	    for (octave_idx_type i = 0; i < len; i++) \
 	      if (xisnan (m.elem(i))) \
 		{ \
 	          gripe_nan_to_logical_conversion (); \
 		  return r; \
 		} \
 	      else \
 		r.elem(i) = (s != LHS_ZERO) OP (m.elem(i) != RHS_ZERO); \
 	    } \
@@ -836,17 +838,17 @@ class boolNDArray;
     dim_vector m2_dims = m2.dims (); \
  \
     if (m1_dims != m2_dims) \
       gripe_nonconformant (#OP, m1_dims, m2_dims); \
     else \
       { \
 	r.resize (m1_dims); \
  \
-	int len = m1.length (); \
+	octave_idx_type len = m1.length (); \
  \
 	if (len > 0) \
 	  F ## _vv (r.fortran_vec (), m1.data (), m2.data (), len); \
       } \
  \
     return r; \
   }
 
@@ -872,17 +874,17 @@ class boolNDArray;
  \
     dim_vector m1_dims = m1.dims (); \
     dim_vector m2_dims = m2.dims (); \
  \
     if (m1_dims == m2_dims) \
       { \
 	r.resize (m1_dims); \
  \
-	for (int i = 0; i < m1.length (); i++) \
+	for (octave_idx_type i = 0; i < m1.length (); i++) \
 	  r.elem(i) = C1 (m1.elem(i)) OP C2 (m2.elem(i)); \
       } \
     else \
       gripe_nonconformant (#F, m1_dims, m2_dims); \
  \
     return r; \
   }
 
@@ -908,17 +910,17 @@ class boolNDArray;
     dim_vector m2_dims = m2.dims (); \
  \
     if (m1_dims == m2_dims) \
       { \
 	if (! m1_dims.all_zero ()) \
 	  { \
 	    r.resize (m1_dims); \
  \
-	    for (int i = 0; i < m1.length (); i++) \
+	    for (octave_idx_type i = 0; i < m1.length (); i++) \
 	      if (xisnan (m1.elem(i)) || xisnan (m2.elem(i))) \
 		{ \
 	          gripe_nan_to_logical_conversion (); \
 		  return r; \
 		} \
 	      else \
 		r.elem(i) = (m1.elem(i) != LHS_ZERO) OP (m2.elem(i) != RHS_ZERO); \
 	  } \
@@ -946,22 +948,22 @@ class boolNDArray;
 #define SDM_BIN_OP_DECLS(R, S, DM, API) \
   BIN_OP_DECL (R, operator +, S, DM, API); \
   BIN_OP_DECL (R, operator -, S, DM, API);
 
 #define SDM_BIN_OP(R, OP, S, DM, OPEQ) \
   R \
   OP (const S& s, const DM& dm) \
   { \
-    int nr = dm.rows (); \
-    int nc = dm.cols (); \
+    octave_idx_type nr = dm.rows (); \
+    octave_idx_type nc = dm.cols (); \
  \
     R r (nr, nc, s); \
  \
-    for (int i = 0; i < dm.length (); i++) \
+    for (octave_idx_type i = 0; i < dm.length (); i++) \
       r.elem(i, i) OPEQ dm.elem(i, i); \
  \
     return r; \
 }
 
 #define SDM_BIN_OPS(R, S, DM) \
   SDM_BIN_OP (R, operator +, S, DM, +=) \
   SDM_BIN_OP (R, operator -, S, DM, -=)
@@ -974,22 +976,22 @@ class boolNDArray;
 #define DMS_BIN_OP_DECLS(R, DM, S, API) \
   BIN_OP_DECL (R, operator +, DM, S, API); \
   BIN_OP_DECL (R, operator -, DM, S, API);
 
 #define DMS_BIN_OP(R, OP, DM, S, SGN) \
   R \
   OP (const DM& dm, const S& s) \
   { \
-    int nr = dm.rows (); \
-    int nc = dm.cols (); \
+    octave_idx_type nr = dm.rows (); \
+    octave_idx_type nc = dm.cols (); \
  \
     R r (nr, nc, SGN s); \
  \
-    for (int i = 0; i < dm.length (); i++) \
+    for (octave_idx_type i = 0; i < dm.length (); i++) \
       r.elem(i, i) += dm.elem(i, i); \
  \
     return r; \
   }
 
 #define DMS_BIN_OPS(R, DM, S) \
   DMS_BIN_OP (R, operator +, DM, S, ) \
   DMS_BIN_OP (R, operator -, DM, S, -)
@@ -1005,71 +1007,70 @@ class boolNDArray;
   BIN_OP_DECL (R, operator *, M, DM, API);
 
 #define MDM_BIN_OP(R, OP, M, DM, OPEQ) \
 R \
 OP (const M& m, const DM& dm) \
 { \
   R r; \
  \
-  int m_nr = m.rows (); \
-  int m_nc = m.cols (); \
+  octave_idx_type m_nr = m.rows (); \
+  octave_idx_type m_nc = m.cols (); \
  \
-  int dm_nr = dm.rows (); \
-  int dm_nc = dm.cols (); \
+  octave_idx_type dm_nr = dm.rows (); \
+  octave_idx_type dm_nc = dm.cols (); \
  \
   if (m_nr != dm_nr || m_nc != dm_nc) \
     gripe_nonconformant (#OP, m_nr, m_nc, dm_nr, dm_nc); \
   else \
     { \
       r.resize (m_nr, m_nc); \
  \
       if (m_nr > 0 && m_nc > 0) \
 	{ \
 	  r = R (m); \
  \
-	  int len = dm.length (); \
+	  octave_idx_type len = dm.length (); \
  \
-	  for (int i = 0; i < len; i++) \
+	  for (octave_idx_type i = 0; i < len; i++) \
 	    r.elem(i, i) OPEQ dm.elem(i, i); \
 	} \
     } \
  \
   return r; \
 }
 
 #define MDM_MULTIPLY_OP(R, M, DM, R_ZERO) \
 R \
 operator * (const M& m, const DM& dm) \
 { \
   R r; \
  \
-  int m_nr = m.rows (); \
-  int m_nc = m.cols (); \
+  octave_idx_type m_nr = m.rows (); \
+  octave_idx_type m_nc = m.cols (); \
  \
-  int dm_nr = dm.rows (); \
-  int dm_nc = dm.cols (); \
+  octave_idx_type dm_nr = dm.rows (); \
+  octave_idx_type dm_nc = dm.cols (); \
  \
   if (m_nc != dm_nr) \
     gripe_nonconformant ("operator *", m_nr, m_nc, dm_nr, dm_nc); \
   else \
     { \
       r = R (m_nr, dm_nc); \
- \
-      if (m_nr > 0 && m_nc > 0 && dm_nc > 0) \
-	{ \
-	  int len = dm.length (); \
+      R::element_type *rd = r.fortran_vec (); \
+      const M::element_type *md = m.data (); \
+      const DM::element_type *dd = dm.data (); \
  \
-	  for (int j = 0; j < len; j++) \
-	    { \
-              const DM::element_type djj = dm.elem (j, j); \
-	      for (int i = 0; i < m_nr; i++) \
-	        r.xelem (i, j) = djj * m.elem (i, j); \
-	    } \
-	} \
+      octave_idx_type len = dm.length (); \
+      for (octave_idx_type i = 0; i < len; i++) \
+        { \
+          mx_inline_multiply_vs (rd, md, m_nr, dd[i]); \
+          rd += m_nr; md += m_nr; \
+        } \
+      mx_inline_fill_vs (rd, m_nr * (dm_nc - len), R_ZERO); \
     } \
  \
   return r; \
 }
 
 #define MDM_BIN_OPS(R, M, DM, R_ZERO) \
   MDM_BIN_OP (R, operator +, M, DM, +=) \
   MDM_BIN_OP (R, operator -, M, DM, -=) \
@@ -1086,70 +1087,71 @@ operator * (const M& m, const DM& dm) \
   BIN_OP_DECL (R, operator *, DM, M, API);
 
 #define DMM_BIN_OP(R, OP, DM, M, OPEQ, PREOP) \
 R \
 OP (const DM& dm, const M& m) \
 { \
   R r; \
  \
-  int dm_nr = dm.rows (); \
-  int dm_nc = dm.cols (); \
+  octave_idx_type dm_nr = dm.rows (); \
+  octave_idx_type dm_nc = dm.cols (); \
  \
-  int m_nr = m.rows (); \
-  int m_nc = m.cols (); \
+  octave_idx_type m_nr = m.rows (); \
+  octave_idx_type m_nc = m.cols (); \
  \
   if (dm_nr != m_nr || dm_nc != m_nc) \
     gripe_nonconformant (#OP, dm_nr, dm_nc, m_nr, m_nc); \
   else \
     { \
       if (m_nr > 0 && m_nc > 0) \
 	{ \
 	  r = R (PREOP m); \
  \
-	  int len = dm.length (); \
+	  octave_idx_type len = dm.length (); \
  \
-	  for (int i = 0; i < len; i++) \
+	  for (octave_idx_type i = 0; i < len; i++) \
 	    r.elem(i, i) OPEQ dm.elem(i, i); \
 	} \
       else \
 	r.resize (m_nr, m_nc); \
     } \
  \
   return r; \
 }
 
 #define DMM_MULTIPLY_OP(R, DM, M, R_ZERO) \
 R \
 operator * (const DM& dm, const M& m) \
 { \
   R r; \
  \
-  int dm_nr = dm.rows (); \
-  int dm_nc = dm.cols (); \
+  octave_idx_type dm_nr = dm.rows (); \
+  octave_idx_type dm_nc = dm.cols (); \
  \
-  int m_nr = m.rows (); \
-  int m_nc = m.cols (); \
+  octave_idx_type m_nr = m.rows (); \
+  octave_idx_type m_nc = m.cols (); \
  \
   if (dm_nc != m_nr) \
     gripe_nonconformant ("operator *", dm_nr, dm_nc, m_nr, m_nc); \
   else \
     { \
       r = R (dm_nr, m_nc); \
- \
-      if (dm_nr > 0 && dm_nc > 0 && m_nc > 0) \
-	{ \
-	  int len = dm.length (); \
+      R::element_type *rd = r.fortran_vec (); \
+      const M::element_type *md = m.data (); \
+      const DM::element_type *dd = dm.data (); \
  \
-	  for (int i = 0; i < len; i++) \
-	    { \
-	      for (int j = 0; j < m_nc; j++) \
-	        r.xelem (i, j) = dm.elem (i, i) * m.elem (i, j); \
-	    } \
-	} \
+      octave_idx_type len = dm.length (); \
+      for (octave_idx_type i = 0; i < m_nc; i++) \
+        { \
+          mx_inline_multiply_vv (rd, md, dd, len); \
+          rd += len; md += m_nr; \
+          mx_inline_fill_vs (rd, dm_nr - len, R_ZERO); \
+          rd += dm_nr - len; \
+        } \
     } \
  \
   return r; \
 }
 
 #define DMM_BIN_OPS(R, DM, M, R_ZERO) \
   DMM_BIN_OP (R, operator +, DM, M, +=, ) \
   DMM_BIN_OP (R, operator -, DM, M, +=, -) \
@@ -1166,21 +1168,21 @@ operator * (const DM& dm, const M& m) \
   BIN_OP_DECL (R, product, DM1, DM2, API);
 
 #define DMDM_BIN_OP(R, OP, DM1, DM2, F) \
   R \
   OP (const DM1& dm1, const DM2& dm2) \
   { \
     R r; \
  \
-    int dm1_nr = dm1.rows (); \
-    int dm1_nc = dm1.cols (); \
+    octave_idx_type dm1_nr = dm1.rows (); \
+    octave_idx_type dm1_nc = dm1.cols (); \
  \
-    int dm2_nr = dm2.rows (); \
-    int dm2_nc = dm2.cols (); \
+    octave_idx_type dm2_nr = dm2.rows (); \
+    octave_idx_type dm2_nc = dm2.cols (); \
  \
     if (dm1_nr != dm2_nr || dm1_nc != dm2_nc) \
       gripe_nonconformant (#OP, dm1_nr, dm1_nc, dm2_nr, dm2_nc); \
     else \
       { \
 	r.resize (dm1_nr, dm1_nc); \
  \
 	if (dm1_nr > 0 && dm1_nc > 0) \
