# HG changeset patch
# User jwe
# Date 1175175884 0
#      Thu Mar 29 13:44:44 2007 +0000
# Node ID a441d66813641b4bb5f11ec788dca11d7059c4b6
# Parent  2533c8c41aad124bbaaaed8bfe3c4db94bdd0277
[project @ 2007-03-29 13:44:44 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,10 +1,13 @@
 2007-03-29  Rafael Laboissiere  <rafael@debian.org>
 
+ 	* emacs/octave-mod.el: Drop LOADPATH, INFO_FILE, and
+ 	INFO_PROGRAM from octave-variables.
+
 	* examples/info-emacs-octave-help, examples/info-emacs-info:
 	Use gnuclient, not gnudoit.
 
 2007-03-27  John W. Eaton  <jwe@octave.org>
 
 	* octMakefile.in (dist, conf-dist): Use ln, not $(LN_S).
 	* emacs/Makefile.in (dist): Likewise.
 	* examples/Makefile.in (dist): Likewise.
diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,20 @@
+2007-03-29  Rafael Laboissiere  <rafael@debian.org>
+
+	* faq/Octave-FAQ.texi, interpreter/basics.txi,
+	interpreter/emacs.txi, interpreter/func.tx, interpreter/var.txi:
+	Make it clear that the old built-in LOADPATH is an internal
+	variable, accessible through path ().
+	Drop references to DEFAULT_LOADPATH.
+	Chang references to the old built-in variables INFO_FILE and
+	INFO_PROGRAM to the respective fucntions info_file and
+	info_program.
+	* refcard/refcard.tex: Drop LOADPATH from list of built-in variables.
+
 2007-03-27  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in, interpreter/Makefile.in, faq/Makefile.in,
 	liboctave/Makefile.in, refcard/Makefile.in (dist):
 	Use ln instead of $(LN_S).
 
 2007-03-21  G. D. McBain  <geordie.mcbain@aeromech.usyd.edu.au>
 
diff --git a/doc/faq/Octave-FAQ.texi b/doc/faq/Octave-FAQ.texi
--- a/doc/faq/Octave-FAQ.texi
+++ b/doc/faq/Octave-FAQ.texi
@@ -618,21 +618,22 @@ compilers, please contact bug@@octave.or
 
 This list is probably far too short.  Feel free to suggest additional
 questions (preferably with answers!)
 
 @itemize @bullet
 @item
 Octave takes a long time to find symbols.
 
-Octave is probably spending this time recursively searching directories
-for function files.  Check the value of your LOADPATH.  For those
+Octave is probably spending this time recursively searching directories for
+function files.  Check the value of the internal variable LOADPATH,
+accessible through the Octave fucntion @code{path}.  For those
 elements that end in @samp{//}, do any name a very large directory tree?
-Does it contain directories that have a mixture of files and
-directories?  In order for the recursive directory searching code to
+Does it contain directories that have a mixture of files and 
+directories?  In order for the recursive directory searching code to 
 work efficiently, directories that are to be searched recursively should
 have either function files only, or subdirectories only, but not a
 mixture of both.  Check to make sure that Octave's standard set of
 function files is installed this way.
 @end itemize
 
 @node Getting additional help
 @chapter Getting additional help
diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -86,26 +86,26 @@ in the system or user startup files that
 @cindex @code{-?}
 Print short help message and exit.
 
 @item --info-file @var{filename}
 @cindex @code{--info-file @var{filename}}
 Specify the name of the info file to use.  The value of @var{filename}
 specified on the command line will override any value of
 @code{OCTAVE_INFO_FILE} found in the environment, but not any commands
-in the system or user startup files that set the built-in variable
-@code{INFO_FILE}.
+in the system or user startup files that use the the @code{info_file}
+function.
 
 @item --info-program @var{program}
 @cindex @code{--info-program @var{program}}
 Specify the name of the info program to use.  The value of @var{program}
 specified on the command line will override any value of
 @code{OCTAVE_INFO_PROGRAM} found in the environment, but not any
-commands in the system or user startup files that set the built-in
-variable @code{INFO_PROGRAM}.
+commands in the system or user startup files that use the
+@code{info_program} function.
 
 @item --interactive
 @itemx -i
 @cindex @code{--interactive}
 @cindex @code{-i}
 Force interactive behavior.  This can be useful for running Octave via a
 remote shell command or inside an Emacs shell buffer.  For another way
 to run Octave within Emacs, see @ref{Emacs}.
@@ -136,17 +136,18 @@ and @code{--no-site-file}.
 
 @item --path @var{path}
 @itemx -p @var{path}
 @cindex @code{--path @var{path}}
 @cindex @code{-p @var{path}}
 Specify the path to search for function files.  The value of @var{path}
 specified on the command line will override any value of
 @code{OCTAVE_PATH} found in the environment, but not any commands in the
-system or user startup files that set the built-in variable @code{LOADPATH}.
+system or user startup files that set the internal variable @code{LOADPATH}
+through one of the path functions.
 
 @item --persist
 Go to interactive mode after @code{--eval} or reading from a file
 named on the command line.
 
 @item --silent
 @itemx --quiet
 @itemx -q
@@ -292,21 +293,21 @@ functions and variables.  @xref{Function
 about how to document the functions you write.
 
 @DOCSTRING(help)
 
 The help command can give you information about operators, but not the
 comma and semicolons that are used as command separators.  To get help
 for those, you must type @kbd{help comma} or @kbd{help semicolon}.
 
-@DOCSTRING(INFO_FILE)
+@DOCSTRING(info_file)
 
-@DOCSTRING(INFO_PROGRAM)
+@DOCSTRING(info_program)
 
-@DOCSTRING(MAKEINFO_PROGRAM)
+@DOCSTRING(makeinfo_program)
 
 @DOCSTRING(suppress_verbose_help_message)
 
 @node Command Line Editing
 @section Command Line Editing
 @cindex command-line editing
 @cindex editing the command line
 
diff --git a/doc/interpreter/emacs.txi b/doc/interpreter/emacs.txi
--- a/doc/interpreter/emacs.txi
+++ b/doc/interpreter/emacs.txi
@@ -323,17 +323,17 @@ comments in @code{font-lock-comment-face
 the Octave reserved words (such as all block keywords) and the text
 functions (such as @samp{cd} or @samp{who}) which are also reserved
 using @code{font-lock-keyword-face}
 @item
 the builtin operators (@samp{&&}, @samp{<>}, @dots{}) using
 @code{font-lock-reference-face}
 @item
 the builtin variables (such as @samp{warn_fortran_indexing}, @samp{NaN}
-or @samp{LOADPATH}) in @code{font-lock-variable-name-face}
+or @samp{EDITOR}) in @code{font-lock-variable-name-face}
 @item
 and the function names in function declarations in
 @code{font-lock-function-name-face}.
 @end itemize
 
 There is also rudimentary support for Imenu (currently, function names
 can be indexed).
 
@@ -483,21 +483,21 @@ If @file{gnuserv} is installed, add the 
 (require 'gnuserv)
 (gnuserv-start)
 @end lisp
 @noindent
 to your @file{.emacs} file.
 
 You can use either `plain' Emacs Info or the function @code{octave-help}
 as your Octave info reader (for @samp{help -i}).  In the former case,
-set the Octave variable @code{INFO_PROGRAM} to @code{"info-emacs-info"}.
+use @code{info_program ("info-emacs-info")}.
 The latter is perhaps more attractive because it allows to look up keys
 in the indices of @emph{several} info files related to Octave (provided
 that the Emacs variable @code{octave-help-files} is set correctly).  In
-this case, set @code{INFO_PROGRAM} to @code{"info-emacs-octave-help"}.
+this case, use @code{info_program ("info-emacs-octave-help")}.
 
 If you use Octave from within Emacs, these settings are best done in the
 @file{~/.emacs-octave} startup file (or the file pointed to by the Emacs
 variable @code{inferior-octave-startup-file}).
 
 @c Local Variables:
 @c TeX-command-default: "Texinfo"
 @c End:
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -393,17 +393,17 @@ them, and save them for use at a later t
 
 Octave does not require you to load function definitions from files
 before using them.  You simply need to put the function definitions in a
 place where Octave can find them.
 
 When Octave encounters an identifier that is undefined, it first looks
 for variables or functions that are already compiled and currently
 listed in its symbol table.  If it fails to find a definition there, it
-searches the list of directories specified by the built-in variable
+searches the list of directories specified by the internal variable
 @code{LOADPATH} for files ending in @file{.m} that have the same base
 name as the undefined identifier.@footnote{The @samp{.m} suffix was
 chosen for compatibility with @sc{Matlab}.}  Once Octave finds a file
 with a name that matches, the contents of the file are read.  If it
 defines a @emph{single} function, it is compiled and executed.
 @xref{Script Files}, for more information about how you can define more
 than one function in a single file.
 
@@ -432,19 +432,17 @@ If you know that your own function files
 running Octave, you can improve performance by setting the variable
 @code{ignore_function_time_stamp} to @code{"all"}, so that Octave will
 ignore the time stamps for all function files.  Setting it to
 @code{"system"} gives the default behavior.  If you set it to anything
 else, Octave will check the time stamps on all function files.
 
 @c FIXME -- note about time stamps on files in NFS environments?
 
-@DOCSTRING(DEFAULT_LOADPATH)
-
-@DOCSTRING(LOADPATH)
+@DOCSTRING(path)
 
 @DOCSTRING(rehash)
 
 @DOCSTRING(file_in_loadpath)
 
 @DOCSTRING(ignore_function_time_stamp)
 
 @DOCSTRING(warn_function_name_clash)
@@ -486,20 +484,21 @@ 1;
 # Define function one:
 
 function one ()
   ...
 @end group
 @end example
 
 To have Octave read and compile these functions into an internal form,
-you need to make sure that the file is in Octave's @code{LOADPATH}, then
-simply type the base name of the file that contains the commands.
-(Octave uses the same rules to search for script files as it does to
-search for function files.)
+you need to make sure that the file is in Octave's @code{LOADPATH}
+(accessible through the @code{path} function), then simply type the
+base name of the file that contains the commands.  (Octave uses the
+same rules to search for script files as it does to search for
+function files.)
 
 If the first token in a file (ignoring comments) is @code{function},
 Octave will compile the function and try to execute it, printing a
 message warning about any non-whitespace characters that appear after
 the function definition.
 
 Note that Octave does not try to look up the definition of any identifier
 until it needs to evaluate it.  This means that Octave will compile the
@@ -524,17 +523,17 @@ even though the function @code{do_someth
 referenced in the function @code{foo}.  This is not an error because
 Octave does not need to resolve all symbols that are referenced by a
 function until the function is actually evaluated.
 
 Since Octave doesn't look for definitions until they are needed, the
 following code will always print @samp{bar = 3} whether it is typed
 directly on the command line, read from a script file, or is part of a
 function body, even if there is a function or script file called
-@file{bar.m} in Octave's @code{LOADPATH}.
+@file{bar.m} in Octave's path.
 
 @example
 @group
 eval ("bar = 3");
 bar
 @end group
 @end example
 
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -224,47 +224,26 @@ Here is a summary of all of Octave's bui
 cross references to additional information and their default values.  In
 the following table @var{octave-home} stands for the root directory
 where all of Octave is installed (the default is @file{@value{OCTAVEHOME}},
 @var{version} stands for the Octave version number (for example,
 @value{VERSION}) and @var{arch} stands for the type of system for which
 Octave was compiled (for example, @code{x86_64-unknown-linux-gnu}).
 
 @vtable @code
-@item DEFAULT_LOADPATH
-@xref{Function Files}.
-
-Default value: @code{".:@var{octave-home}/lib/@var{version}"}.
-
 @item EDITOR
 @xref{Commands For History}.
 
 Default value: @code{"emacs"}.
 
 @item EXEC_PATH
 @xref{Controlling Subprocesses}.
 
 Default value: @code{":$PATH"}.
 
-@item INFO_FILE
-@xref{Getting Help}.
-
-Default value: @code{"@var{octave-home}/info/octave.info"}.
-
-@item INFO_PROGRAM
-@xref{Getting Help}.
-
-Default value: @code{"@var{octave-home}/libexec/octave/@var{version}/exec/@var{arch}/info"}.
-
-@item LOADPATH
-@xref{Function Files}.
-
-Default value: @code{":"}, which tells Octave to use the directories
-specified by the built-in variable @code{DEFAULT_LOADPATH}.
-
 @item OCTAVE_HOME
 
 Default value: @code{"@value{OCTAVEHOME}"}.
 
 @item PAGER
 @xref{Input and Output}.
 
 Default value: @code{"less", or "more"}.
@@ -490,48 +469,48 @@ Default value: 0.
 Default value: 0.
 @end vtable
 
 
 @node Defaults from the Environment
 @section Defaults from the Environment
 
 Octave uses the values of the following environment variables to set the
-default values for the corresponding built-in variables.  In addition,
-the values from the environment may be overridden by command-line
-arguments.  @xref{Command Line Options}.
+default values for the corresponding built-in or internal variables.
+In addition, the values from the environment may be overridden by
+command-line arguments.  @xref{Command Line Options}.
 
 @vtable @code
 @item EDITOR
 @xref{Commands For History}.
 
 Built-in variable: @code{EDITOR}.
 
 @item OCTAVE_EXEC_PATH        
 @xref{Controlling Subprocesses}.
 
 Built-in variable: @code{EXEC_PATH}.
 Command-line argument: @code{--exec-path}.
 
 @item OCTAVE_PATH
 @xref{Function Files}.
 
-Built-in variable: @code{LOADPATH}.
+Internal variable changed by function @code{path}.
 Command-line argument: @code{--path}.
 
 @item OCTAVE_INFO_FILE
 @xref{Getting Help}.
 
-Built-in variable: @code{INFO_FILE}.
+Internal variable changed by function @code{info_file}.
 Command-line argument: @code{--info-file}.
 
 @item OCTAVE_INFO_PROGRAM
 @xref{Getting Help}.
 
-Built-in variable: @code{INFO_PROGRAM}.
+Internal variable changed by function @code{info_program}.
 Command-line argument: @code{--info-program}.
 
 @item OCTAVE_HISTSIZE
 @xref{Commands For History}.
 
 Built-in variable: @code{history_size}.
 
 @item OCTAVE_HISTFILE
diff --git a/doc/refcard/refcard.tex b/doc/refcard/refcard.tex
--- a/doc/refcard/refcard.tex
+++ b/doc/refcard/refcard.tex
@@ -553,17 +553,16 @@ global {\it var1} ...&Declare variables 
   Global variables may be accessed inside the body of a function
   without having to be passed in the function parameter list provided
   they are also declared global within the function.}\span\cr
 \endsec
 
 \sec Selected Built-in Variables;
 EDITOR&editor to use with {\tt edit\_history}\cr
 Inf, NaN&IEEE infinity, NaN\cr
-LOADPATH&path to search for function files\cr
 PAGER&program to use to paginate output\cr
 ans&last result not explicitly assigned\cr
 eps&machine precision\cr
 pi&$\pi$\cr
 realmax&maximum representable value\cr
 realmin&minimum representable value\cr
 \endsec
 \vskip -\secskip
diff --git a/emacs/octave-mod.el b/emacs/octave-mod.el
--- a/emacs/octave-mod.el
+++ b/emacs/octave-mod.el
@@ -124,18 +124,18 @@ All Octave abbrevs start with a grave ac
     "edit_history" "format" "graw" "gset" "gshow" "help" "history" "hold"
     "load" "ls" "more" "run_history" "save" "set" "show" "type"
     "which" "who" "whos")
   "Text functions in Octave (these names are also reserved).")
 
 (defvar octave-variables
   '("DEFAULT_EXEC_PATH" "DEFAULT_LOADPATH"
     "EDITOR" "EXEC_PATH" "F_DUPFD" "F_GETFD" "F_GETFL" "F_SETFD"
-    "F_SETFL" "I" "IMAGE_PATH" "INFO_FILE" "INFO_PROGRAM" "Inf" "J"
-    "LOADPATH" "NaN" "OCTAVE_VERSION" "O_APPEND" "O_CREAT" "O_EXCL"
+    "F_SETFL" "I" "IMAGE_PATH" "Inf" "J"
+    "NaN" "OCTAVE_VERSION" "O_APPEND" "O_CREAT" "O_EXCL"
     "O_NONBLOCK" "O_RDONLY" "O_RDWR" "O_TRUNC" "O_WRONLY" "PAGER" "PS1"
     "PS2" "PS4" "PWD" "SEEK_CUR" "SEEK_END" "SEEK_SET" "__F_DUPFD__"
     "__F_GETFD__" "__F_GETFL__" "__F_SETFD__" "__F_SETFL__" "__I__"
     "__Inf__" "__J__" "__NaN__" "__OCTAVE_VERSION__" "__O_APPEND__"
     "__O_CREAT__" "__O_EXCL__" "__O_NONBLOCK__" "__O_RDONLY__"
     "__O_RDWR__" "__O_TRUNC__" "__O_WRONLY__" "__PWD__" "__SEEK_CUR__"
     "__SEEK_END__" "__SEEK_SET__" "__argv__" "__e__" "__eps__"
     "__i__" "__inf__" "__j__" "__nan__" "__pi__"
