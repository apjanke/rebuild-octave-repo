# HG changeset patch
# User jwe
# Date 777598847 0
#      Mon Aug 22 23:40:47 1994 +0000
# Node ID 39b315350976c0380238098fe3ae1b669c384b25
# Parent  ddc21c0f008918e5faa124cecbd283b90f7e9aee
[project @ 1994-08-22 23:40:47 by jwe]

diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -69,16 +69,39 @@ DEFUN ("any", Fany, Sany, 2, 1,
   if (nargin != 2)
     print_usage ("any");
   else if (nargin > 0 && args(1).is_defined ())
     retval = args(1).any ();
 
   return retval;
 }
 
+DEFUN ("atan2", Fatan2, Satan2, 3, 1,
+  "atan2 (Y, X): atan (Y / X) in range -pi to pi")
+{
+  Octave_object retval;
+
+  if (args.length () != 3)
+    print_usage ("atan2");
+  else
+    {
+      double y = args(1).double_value ();
+
+      if (! error_state)
+	{
+	  double x = args(2).double_value ();
+
+	  if (! error_state)
+	    retval = atan2 (y, x);
+	}
+    }
+
+  return retval;
+}
+
 DEFUN ("cumprod", Fcumprod, Scumprod, 2, 1,
   "cumprod (X): cumulative products")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin != 2)
@@ -252,48 +275,51 @@ check_dimensions (int& nr, int& nc, cons
 	       warnfor);
     }
 }
 
 static void
 get_dimensions (const tree_constant& a, const char *warn_for,
 		int& nr, int& nc)
 {
-  tree_constant tmpa = a.make_numeric ();
+  tree_constant tmpa = a;
 
   if (tmpa.is_scalar_type ())
     {
       double tmp = tmpa.double_value ();
       nr = nc = NINT (tmp);
     }
   else
     {
       nr = tmpa.rows ();
       nc = tmpa.columns ();
 
       if ((nr == 1 && nc == 2) || (nr == 2 && nc == 1))
 	{
 	  ColumnVector v = tmpa.vector_value ();
 
+	  if (error_state)
+	    return;
+
 	  nr = NINT (v.elem (0));
 	  nc = NINT (v.elem (1));
 	}
       else
 	warning ("%s (A): use %s (size (A)) instead", warn_for, warn_for);
     }
 
   check_dimensions (nr, nc, warn_for); // May set error_state.
 }
 
 static void
 get_dimensions (const tree_constant& a, const tree_constant& b,
 		const char *warn_for, int& nr, int& nc)
 {
-  tree_constant tmpa = a.make_numeric ();
-  tree_constant tmpb = b.make_numeric ();
+  tree_constant tmpa = a;
+  tree_constant tmpb = b;
 
   if (tmpa.is_scalar_type () && tmpb.is_scalar_type ())
     {
       nr = NINT (tmpa.double_value ());
       nc = NINT (tmpb.double_value ());
 
       check_dimensions (nr, nc, warn_for); // May set error_state.
     }
