# HG changeset patch
# User kimhanse@gmail.com
# Date 1211365617 -7200
#      Wed May 21 12:26:57 2008 +0200
# Branch release-3-0-x
# Node ID 45e71c7d7bb9acda4e8bae15c0853ed1f3871953
# Parent  c5d9aaeb306a23ceff77cdbb357d80f8989af4b8
strings/mat2str.m: Change is_complex to iscomplex, add tests, add missing ;

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2008-06-02  Kim Hansen  <kimhanse@gmail.com>
+
+	* strings/mat2str.m: Change is_complex to iscomplex, add tests, add
+	missing ;
+
 2008-06-02  John W. Eaton  <jwe@octave.org>
 
 	* linear-algebra/cond.m, miscellaneous/news.m,
 	miscellaneous/unpack.m, plot/__bar__.m, plot/__quiver__.m,
 	plot/__scatter__.m, plot/compass.m, plot/feather.m:
 	Call ischar instead of isstr.
 
 2008-05-22  David Bateman  <dbateman@free.fr>
@@ -1290,17 +1295,17 @@ 2007-10-15  Søren Hauberg  <hauberg@gmail.com>
 2007-10-15  David Bateman  <dbateman@free.fr>
 
 	* plot/print.m: Call drawnow before printing to ensure the plot is
 	on the screen.
 
 	* testfun/test.m: In error/warning blocks test for an error before
 	a warning to avoid unexpected failures.
 
-2007-10-15  Kim Hansen  i<kimhanse@gmail.com>
+2007-10-15  Kim Hansen  <kimhanse@gmail.com>
 
 	* testfun/assert.m: Correct documentation of absolution versus 
 	relative error tolerance and add tests.
 
 2007-10-14  David Bateman  <dbateman@free.fr>
 
 	* pkg/pkg.m (pkg:configure_make): Treat case of no files to install in
 	src directory.
diff --git a/scripts/strings/mat2str.m b/scripts/strings/mat2str.m
--- a/scripts/strings/mat2str.m
+++ b/scripts/strings/mat2str.m
@@ -69,52 +69,57 @@ function s = mat2str (x, n, cls)
   if (nargin < 1 || nargin > 3 || ! isnumeric (x))
     print_usage ();
   endif
   
   if (ndims (x) > 2)
     error ("mat2str: X must be two dimensional");
   endif
 
-  x_is_complex = is_complex (x);
+  x_iscomplex = iscomplex (x);
 
-  if (! x_is_complex)
+  if (! x_iscomplex)
     fmt = sprintf ("%%.%dg", n(1));
   else
     if (length (n) == 1 )
       n = [n, n];
     endif
     fmt = sprintf ("%%.%dg%%+.%dgi", n(1), n(2));
   endif
 
   nel = numel (x);
 
   if (nel == 0)
     ## Empty, only print brackets
     s = "[]";
   elseif (nel == 1)
     ## Scalar X, don't print brackets
-    if (! x_is_complex)
+    if (! x_iscomplex)
       s = sprintf (fmt, x);
     else
       s = sprintf (fmt, real (x), imag (x));
     endif
   else
     ## Non-scalar X, print brackets
     fmt = [fmt, ","];
-    if (! x_is_complex)
+    if (! x_iscomplex)
       s = sprintf (fmt, x.');
     else
-      x = x.';
-      s = sprintf (fmt, [real(x(:))'; imag(x(:))']);
+      t = x.';
+      s = sprintf (fmt, [real(t(:))'; imag(t(:))']);
     endif
 
     s = ["[", s];
     s(end) = "]";
     ind = find (s == ",");
     nc = columns (x);
     s(ind(nc:nc:end)) = ";";
   endif
 
   if (strcmp ("class", cls))
-    s = [class(x), "(", s, ")"]
+    s = [class(x), "(", s, ")"];
   endif
 endfunction
+
+%!assert (mat2str ([-1/3 + i/7; 1/3 - i/7], [4 2]), "[-0.3333+0.14i;0.3333-0.14i]")
+%!assert (mat2str ([-1/3 +i/7; 1/3 -i/7], [4 2]), "[-0.3333+0i,0+0.14i;0.3333+0i,-0-0.14i]")
+%!assert (mat2str (int16 ([1 -1]), 'class'), "int16([1,-1])")
+
