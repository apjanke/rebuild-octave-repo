# HG changeset patch
# User jwe
# Date 949494997 0
#      Wed Feb 02 12:36:37 2000 +0000
# Node ID 0ff7323dab8b6e9e6c15b6ee78eb4f16aebdac33
# Parent  0985659e78d3d0e82007957fb1199395466a331e
[project @ 2000-02-02 12:36:25 by jwe]

diff --git a/src/DLD-FUNCTIONS/qz.cc b/src/DLD-FUNCTIONS/qz.cc
--- a/src/DLD-FUNCTIONS/qz.cc
+++ b/src/DLD-FUNCTIONS/qz.cc
@@ -146,17 +146,17 @@ fin (const int& lsize, const double& alp
   int retval;
 
   if (lsize == 1)
     retval = (fabs (alpha) < fabs (beta) ? 1 : -1);
   else
     retval = (fabs (p) < 1 ? 1 : -1);
 
 #ifdef DEBUG
-  std::cout << "qz: fin: retval=" << retval << endl;
+  std::cout << "qz: fin: retval=" << retval << std::endl;
 #endif
 
   return retval;
 }
 
 static int
 folhp (const int& lsize, const double& alpha,
        const double& beta, const double& s, const double&)
@@ -235,32 +235,32 @@ Note: qz performs permutation balancing,
 \n\
 See also: balance, dare, eig, schur\n\
 @end deftypefn")
 {
   octave_value_list retval;
   int nargin = args.length ();
 
 #ifdef DEBUG
-  std::cout << "qz: nargin = " << nargin << ", nargout = " << nargout << endl;
+  std::cout << "qz: nargin = " << nargin << ", nargout = " << nargout << std::endl;
 #endif
 
   if (nargin < 2 || nargin > 3 || nargout > 7)
     {
       print_usage ("qz");
       return retval;
     }
   else if (nargin == 3 && (nargout < 3 || nargout > 4))
     {
       error ("qz: invalid number of output arguments for form [3] call");
       return retval;
     }
 
 #ifdef DEBUG
-  std::cout << "qz: determine ordering option" << endl;
+  std::cout << "qz: determine ordering option" << std::endl;
 #endif
 
   // Determine ordering option
   std::string ord_job;
   static double safmin;
 
   if (nargin == 2)
     ord_job = "N";
@@ -282,47 +282,47 @@ See also: balance, dare, eig, schur\n\
 	  error ("qz: invalid order option");
 	  return retval;
 	}
 
       // overflow constant required by dlag2
       F77_FCN (xdlamch, XDLAMCH) ("S", safmin, 1L);
 
 #ifdef DEBUG_EIG
-      std::cout << "qz: initial value of safmin=" << setiosflags (ios::scientific)
-	   << safmin << endl;
+      std::cout << "qz: initial value of safmin=" << setiosflags (std::ios::scientific)
+	   << safmin << std::endl;
 #endif
 
       // some machines (e.g., DEC alpha) get safmin = 0;
       // for these, use eps instead to avoid problems in dlag2
       if (safmin == 0)
 	{
 #ifdef DEBUG_EIG
-	  std::cout << "qz: DANGER WILL ROBINSON: safmin is 0!" << endl;
+	  std::cout << "qz: DANGER WILL ROBINSON: safmin is 0!" << std::endl;
 #endif
 
 	  F77_FCN (xdlamch, XDLAMCH) ("E", safmin, 1L);
 
 #ifdef DEBUG_EIG
-	  std::cout << "qz: safmin set to " << setiosflags (ios::scientific)
-	       << safmin << endl;
+	  std::cout << "qz: safmin set to " << setiosflags (std::ios::scientific)
+	       << safmin << std::endl;
 #endif
 	}
     }
 
 #ifdef DEBUG
-  std::cout << "qz: check argument 1" << endl;
+  std::cout << "qz: check argument 1" << std::endl;
 #endif
 
   // Argument 1: check if it's o.k. dimensioned
   int nn = args(0).rows ();
 
 #ifdef DEBUG
   std::cout << "argument 1 dimensions: (" << nn << "," << args(0).columns () << ")"
-       << endl;
+       << std::endl;
 #endif
 
   int arg_is_empty = empty_arg ("qz", nn, args(0).columns ());
 
   if (arg_is_empty < 0)
     {
       gripe_empty_arg ("qz: parameter 1", 0);
       return retval;
@@ -346,17 +346,17 @@ See also: balance, dare, eig, schur\n\
     caa = args(0).complex_matrix_value ();
   else
     aa = args(0).matrix_value ();
 
   if (error_state)
     return retval;
 
 #ifdef DEBUG
-  std::cout << "qz: check argument 2" << endl;
+  std::cout << "qz: check argument 2" << std::endl;
 #endif
 
   // Extract argument 2 (bb, or cbb if complex)
   if ((nn != args(1).columns ()) || (nn != args(1).rows ()))
     {
       gripe_nonconformant ();
       return retval;
     }
@@ -407,17 +407,17 @@ See also: balance, dare, eig, schur\n\
     {
       error ("Complex case not implemented yet");
       return retval;
     }
   else
     {
 #ifdef DEBUG
       if (compq == 'V')
-	std::cout << "qz: performing balancing; QQ=" << endl << QQ << endl;
+	std::cout << "qz: performing balancing; QQ=" << std::endl << QQ << std::endl;
 #endif
 
       F77_XFCN (dggbal, DGGBAL,
 		(&bal_job,  nn, aa.fortran_vec(), nn, bb.fortran_vec(),
 		 nn, ilo, ihi, lscale.fortran_vec(),
 		 rscale.fortran_vec(), work.fortran_vec(), info, 1L));
 
       if (f77_exception_encountered)
@@ -435,17 +435,17 @@ See also: balance, dare, eig, schur\n\
     {
       F77_XFCN (dggbak, DGGBAK,
 		(&bal_job, "L", nn, ilo, ihi, lscale.fortran_vec(),
 		 rscale.fortran_vec(), nn, QQ.fortran_vec(),
 		 nn, info, 1L, 1L));
 
 #ifdef DEBUG
       if (compq == 'V')
-	std::cout << "qz: balancing done; QQ=" << endl << QQ << endl;
+	std::cout << "qz: balancing done; QQ=" << std::endl << QQ << std::endl;
 #endif
 
     if (f77_exception_encountered)
       {
 	error ("unrecoverable error in qz (bal-L)");
 	return retval;
       }
   }
@@ -455,17 +455,17 @@ See also: balance, dare, eig, schur\n\
     {
       F77_XFCN (dggbak, DGGBAK, (&bal_job, "R",
 				 nn, ilo, ihi, lscale.fortran_vec(),
 				 rscale.fortran_vec(), nn, ZZ.fortran_vec(),
 				 nn, info, 1L, 1L));
 
 #ifdef DEBUG
       if (compz == 'V')
-	std::cout << "qz: balancing done; ZZ=" << endl << ZZ << endl;
+	std::cout << "qz: balancing done; ZZ=" << std::endl << ZZ << std::endl;
 #endif
 
       if (f77_exception_encountered)
 	{
 	  error ("unrecoverable error in qz (bal-R)");
 	  return retval;
 	}
     }
@@ -489,51 +489,51 @@ See also: balance, dare, eig, schur\n\
 	CZ = ZZ;
 
       error ("complex case not done yet");
       return retval;
     }
   else  	// real matrices case
     {
 #ifdef DEBUG
-      std::cout << "qz: peforming qr decomposition of bb" << endl;
+      std::cout << "qz: peforming qr decomposition of bb" << std::endl;
 #endif
 
       // compute the QR factorization of bb
       QR bqr (bb);
 
 #ifdef DEBUG
-      std::cout << "qz: qr (bb) done; now peforming qz decomposition" << endl;
+      std::cout << "qz: qr (bb) done; now peforming qz decomposition" << std::endl;
 #endif
 
       bb = bqr.R ();
 
 #ifdef DEBUG
-      std::cout << "qz: extracted bb" << endl;
+      std::cout << "qz: extracted bb" << std::endl;
 #endif
 
       aa = (bqr.Q ()).transpose ()*aa;
 
 #ifdef DEBUG
-      std::cout << "qz: updated aa " << endl;
-      std::cout << "bqr.Q () = " << endl << bqr.Q () << endl;
+      std::cout << "qz: updated aa " << std::endl;
+      std::cout << "bqr.Q () = " << std::endl << bqr.Q () << std::endl;
 
       if (compq == 'V')
-	std::cout << "QQ =" << QQ << endl;
+	std::cout << "QQ =" << QQ << std::endl;
 #endif
 
       if (compq == 'V')
 	QQ = QQ*bqr.Q ();
 
 #ifdef DEBUG
-      std::cout << "qz: precursors done..." << endl;
+      std::cout << "qz: precursors done..." << std::endl;
 #endif
 
 #ifdef DEBUG
-      std::cout << "qz: compq = " << compq << ", compz = " << compz << endl;
+      std::cout << "qz: compq = " << compq << ", compz = " << compz << std::endl;
 #endif
 
       // reduce  to generalized hessenberg form
       F77_XFCN (dgghrd, DGGHRD,
 		(&compq, &compz, nn, ilo, ihi, aa.fortran_vec(),
 		 nn, bb.fortran_vec(), nn, QQ.fortran_vec(), nn,
 		 ZZ.fortran_vec(), nn, info, 1L, 1L));
 
@@ -569,17 +569,17 @@ See also: balance, dare, eig, schur\n\
 	{
 	  // probably not needed, but better be safe
 	  error ("qz: cannot re-order complex qz decomposition.");
 	  return retval;
 	}
       else
 	{
 #ifdef DEBUG_SORT
-	  std::cout << "qz: ordering eigenvalues: ord_job = " << ord_job[0] << endl;
+	  std::cout << "qz: ordering eigenvalues: ord_job = " << ord_job[0] << std::endl;
 #endif
 
 	  // declared static to avoid vfork/long jump compiler complaints
 	  static sort_function sort_test;
 	  sort_test = NULL;
 
 	  switch (ord_job[0])
 	    {
@@ -611,113 +611,113 @@ See also: balance, dare, eig, schur\n\
 
 	  F77_XFCN (xdlange, XDLANGE,
 		    ("I", nn, nn, aa.fortran_vec (), nn,
 		     work.fortran_vec (), inf_norm));
 
 	  double eps = DBL_EPSILON*inf_norm*nn;
 
 #ifdef DEBUG_SORT
-	  std::cout << "qz: calling dsubsp: aa=" << endl;
+	  std::cout << "qz: calling dsubsp: aa=" << std::endl;
 	  octave_print_internal (std::cout, aa, 0);
-	  std::cout << endl << "bb="  << endl;
+	  std::cout << std::endl << "bb="  << std::endl;
 	  octave_print_internal (std::cout, bb, 0);
 	  if (compz == 'V')
 	    {
-	      std::cout << endl << "ZZ="  << endl;
+	      std::cout << std::endl << "ZZ="  << std::endl;
 	      octave_print_internal (std::cout, ZZ, 0);
 	    }
-	  std::cout << endl;
-	  std::cout << "alphar = " << endl;
+	  std::cout << std::endl;
+	  std::cout << "alphar = " << std::endl;
 	  octave_print_internal (std::cout, (Matrix) alphar, 0);
-	  std::cout << endl << "alphai = " << endl;
+	  std::cout << std::endl << "alphai = " << std::endl;
 	  octave_print_internal (std::cout, (Matrix) alphai, 0);
-	  std::cout << endl << "beta = " << endl;
+	  std::cout << std::endl << "beta = " << std::endl;
 	  octave_print_internal (std::cout, (Matrix) betar, 0);
-	  std::cout << endl;
+	  std::cout << std::endl;
 #endif
 
 	  F77_XFCN (dsubsp, DSUBSP,
 		    (nn, nn, aa.fortran_vec(), bb.fortran_vec(),
 		     ZZ.fortran_vec(), sort_test, eps, ndim, fail, ind));
 
 #ifdef DEBUG
-	  std::cout << "qz: back from dsubsp: aa=" << endl;
+	  std::cout << "qz: back from dsubsp: aa=" << std::endl;
 	  octave_print_internal (std::cout, aa, 0);
-	  std::cout << endl << "bb="  << endl;
+	  std::cout << std::endl << "bb="  << std::endl;
 	  octave_print_internal (std::cout, bb, 0);
 	  if (compz == 'V')
 	    {
-	      std::cout << endl << "ZZ="  << endl;
+	      std::cout << std::endl << "ZZ="  << std::endl;
 	      octave_print_internal (std::cout, ZZ, 0);
 	    }
-	  std::cout << endl;
+	  std::cout << std::endl;
 #endif
 
 	  // manually update alphar, alphai, betar
 	  static int jj;
 
 	  jj=0;
 	  while (jj < nn)
 	    {
 #ifdef DEBUG_EIG
-	      std::cout << "computing gen eig #" << jj << endl;
+	      std::cout << "computing gen eig #" << jj << std::endl;
 #endif
 
 	      static int zcnt;	// number of zeros in this block
 
 	      if (jj == (nn-1))
 		zcnt = 1;
 	      else if (aa(jj+1,jj) == 0)
 		zcnt = 1;
 	      else zcnt = 2;
 
 	      if (zcnt == 1)  // real zero
 		{
 #ifdef DEBUG_EIG
-		  std::cout << "  single gen eig:" << endl;
-		  std::cout << "  alphar(" << jj << ") = " << aa(jj,jj) << endl;
-		  std::cout << "  betar( " << jj << ") = " << bb(jj,jj) << endl;
-		  std::cout << "  alphai(" << jj << ") = 0" << endl;
+		  std::cout << "  single gen eig:" << std::endl;
+		  std::cout << "  alphar(" << jj << ") = " << aa(jj,jj) << std::endl;
+		  std::cout << "  betar( " << jj << ") = " << bb(jj,jj) << std::endl;
+		  std::cout << "  alphai(" << jj << ") = 0" << std::endl;
 #endif
 
 		  alphar(jj) = aa(jj,jj);
 		  alphai(jj) = 0;
 		  betar(jj) = bb(jj,jj);
 		}
 	      else
 		{
 		  // complex conjugate pair
 #ifdef DEBUG_EIG
-		  std::cout << "qz: calling dlag2:" << endl;
+		  std::cout << "qz: calling dlag2:" << std::endl;
 		  std::cout << "safmin="
-		       << setiosflags (ios::scientific) << safmin << endl;
+		       << setiosflags (std::ios::scientific) << safmin << std::endl;
 
 		  for (int idr = jj; idr <= jj+1; idr++)
 		    {
 		      for (int idc = jj; idc <= jj+1; idc++)
 			{
 			  std::cout << "aa(" << idr << "," << idc << ")="
-			       << aa(idr,idc) << endl;
+			       << aa(idr,idc) << std::endl;
 			  std::cout << "bb(" << idr << "," << idc << ")="
-			       << bb(idr,idc) << endl;
+			       << bb(idr,idc) << std::endl;
 			}
 		    }
 #endif
 
 		  double scale1, scale2, wr1, wr2, wi;
 		  F77_XFCN (dlag2, DLAG2,
 			    (&aa(jj,jj), nn, &bb(jj,jj), nn, safmin,
 			     scale1, scale2, wr1, wr2, wi));
 
 #ifdef DEBUG_EIG
 		  std::cout << "dlag2 returns: scale1=" << scale1
-		       << "\tscale2=" << scale2 << endl
+		       << "\tscale2=" << scale2 << std::endl
 		       << "\twr1=" << wr1 << "\twr2=" << wr2
-		       << "\twi=" << wi << endl;
+		       << "\twi=" << wi << std::endl;
 #endif
 
 		  // just to be safe, check if it's a real pair
 		  if (wi == 0)
 		    {
 		      alphar(jj) = wr1;
 		      alphai(jj) = 0;
 		      betar(jj) = scale1;
@@ -733,35 +733,35 @@ See also: balance, dare, eig, schur\n\
 		    }
 		}
 
 	      // advance past this block
 	      jj += zcnt;
 	    }
 
 #ifdef DEBUG_SORT
-	  std::cout << "qz: back from dsubsp: aa=" << endl;
+	  std::cout << "qz: back from dsubsp: aa=" << std::endl;
 	  octave_print_internal (std::cout, aa, 0);
-	  std::cout << endl << "bb="  << endl;
+	  std::cout << std::endl << "bb="  << std::endl;
 	  octave_print_internal (std::cout, bb, 0);
 
 	  if (compz == 'V')
 	    {
-	      std::cout << endl << "ZZ="  << endl;
+	      std::cout << std::endl << "ZZ="  << std::endl;
 	      octave_print_internal (std::cout, ZZ, 0);
 	    }
-	  std::cout << endl << "qz: ndim=" << ndim << endl
-	       << "fail=" << fail << endl;
-	  std::cout << "alphar = " << endl;
+	  std::cout << std::endl << "qz: ndim=" << ndim << std::endl
+	       << "fail=" << fail << std::endl;
+	  std::cout << "alphar = " << std::endl;
 	  octave_print_internal (std::cout, (Matrix) alphar, 0);
-	  std::cout << endl << "alphai = " << endl;
+	  std::cout << std::endl << "alphai = " << std::endl;
 	  octave_print_internal (std::cout, (Matrix) alphai, 0);
-	  std::cout << endl << "beta = " << endl;
+	  std::cout << std::endl << "beta = " << std::endl;
 	  octave_print_internal (std::cout, (Matrix) betar, 0);
-	  std::cout << endl;
+	  std::cout << std::endl;
 #endif
 	}
     }
 
   // compute  generalized eigenvalues?
   ComplexColumnVector gev;
 
   if (nargout < 2 || nargout == 7 || (nargin == 3 && nargout == 4))
@@ -769,17 +769,17 @@ See also: balance, dare, eig, schur\n\
       if (complex_case)
 	{
 	  error ("complex case not yet implemented");
 	  return retval;
 	}
       else
 	{
 #ifdef DEBUG
-	  std::cout << "qz: computing generalized eigenvalues" << endl;
+	  std::cout << "qz: computing generalized eigenvalues" << std::endl;
 #endif
 
 	  // return finite generalized eigenvalues
 	  int cnt = 0;
 
 	  for (int ii = 0; ii < nn; ii++)
 	    if (betar(ii) != 0)
 	      cnt++;
@@ -804,17 +804,17 @@ See also: balance, dare, eig, schur\n\
       if (complex_case)
 	{
 	  error ("complex type not yet implemented");
 	  return retval;
 	}
       else
 	{
 #ifdef DEBUG
-	  std::cout << "qz: computing  generalized eigenvectors" << endl;
+	  std::cout << "qz: computing  generalized eigenvectors" << std::endl;
 #endif
 
 	  VL = QQ;
 	  VR = ZZ;
 
 	  F77_XFCN (dtgevc, DTGEVC,
 		    (&side, &howmny, select, nn, aa.fortran_vec(),
 		     nn, bb.fortran_vec(), nn, VL.fortran_vec(), nn,
@@ -884,58 +884,58 @@ See also: balance, dare, eig, schur\n\
 
     case 5:	// return eigenvectors
       retval(4) = CVR;
 
     case 4:
       if (nargin == 3)
 	{
 #ifdef DEBUG
-	  std::cout << "qz: sort: retval(3) = gev = " << endl;
+	  std::cout << "qz: sort: retval(3) = gev = " << std::endl;
 	  octave_print_internal (std::cout, gev);
-	  std::cout << endl;
+	  std::cout << std::endl;
 #endif
 	  retval(3) = gev;
 	}
       else
 	retval(3) = ZZ;
 
     case 3:
       if (nargin == 3)
 	retval(2) = ZZ;
       else
 	retval(2) = QQ;
 
     case 2:
 #ifdef DEBUG
-      std::cout << "qz: retval (1) = bb = " << endl;
+      std::cout << "qz: retval (1) = bb = " << std::endl;
       octave_print_internal (std::cout, bb, 0);
-      std::cout << endl << "qz: retval(0) = aa = " <<endl;
+      std::cout << std::endl << "qz: retval(0) = aa = " <<std::endl;
       octave_print_internal (std::cout, aa, 0);
-      std::cout << endl;
+      std::cout << std::endl;
 #endif
       retval(1) = bb;
       retval(0) = aa;
       break;
 
     case 1:
     case 0:
 #ifdef DEBUG
-      std::cout << "qz: retval(0) = gev = " << gev << endl;
+      std::cout << "qz: retval(0) = gev = " << gev << std::endl;
 #endif
       retval(0) = gev;
       break;
 
     default:
       error ("qz: too many return arguments.");
       break;
   }
 
 #ifdef DEBUG
-  std::cout << "qz: exiting (at long last)" << endl;
+  std::cout << "qz: exiting (at long last)" << std::endl;
 #endif
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/OPERATORS/op-b-b.cc b/src/OPERATORS/op-b-b.cc
--- a/src/OPERATORS/op-b-b.cc
+++ b/src/OPERATORS/op-b-b.cc
@@ -47,21 +47,21 @@ DEFUNOP_OP (hermitian, bool, /* no-op */
 // bool by bool ops.
 
 DEFBINOP_OP (eq, bool, bool, ==)
 DEFBINOP_OP (ne, bool, bool, !=)
 
 void
 install_b_b_ops (void)
 {
-  INSTALL_UNOP (not, octave_bool, not);
-  INSTALL_UNOP (transpose, octave_bool, transpose);
-  INSTALL_UNOP (hermitian, octave_bool, hermitian);
+  INSTALL_UNOP (op_not, octave_bool, not);
+  INSTALL_UNOP (op_transpose, octave_bool, transpose);
+  INSTALL_UNOP (op_hermitian, octave_bool, hermitian);
 
-  INSTALL_BINOP (eq, octave_bool, octave_bool, eq);
-  INSTALL_BINOP (ne, octave_bool, octave_bool, ne);
+  INSTALL_BINOP (op_eq, octave_bool, octave_bool, eq);
+  INSTALL_BINOP (op_ne, octave_bool, octave_bool, ne);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-bm-bm.cc b/src/OPERATORS/op-bm-bm.cc
--- a/src/OPERATORS/op-bm-bm.cc
+++ b/src/OPERATORS/op-bm-bm.cc
@@ -50,21 +50,21 @@ DEFUNOP (transpose, bool_matrix)
 // bool matrix by bool matrix ops.
 
 DEFBINOP_OP (eq, bool_matrix, bool_matrix, ==)
 DEFBINOP_OP (ne, bool_matrix, bool_matrix, !=)
 
 void
 install_bm_bm_ops (void)
 {
-  INSTALL_UNOP (not, octave_bool_matrix, not);
-  INSTALL_UNOP (transpose, octave_bool_matrix, transpose);
-  INSTALL_UNOP (hermitian, octave_bool_matrix, transpose);
+  INSTALL_UNOP (op_not, octave_bool_matrix, not);
+  INSTALL_UNOP (op_transpose, octave_bool_matrix, transpose);
+  INSTALL_UNOP (op_hermitian, octave_bool_matrix, transpose);
 
-  INSTALL_BINOP (eq, octave_bool_matrix, octave_bool_matrix, eq);
-  INSTALL_BINOP (ne, octave_bool_matrix, octave_bool_matrix, ne);
+  INSTALL_BINOP (op_eq, octave_bool_matrix, octave_bool_matrix, eq);
+  INSTALL_BINOP (op_ne, octave_bool_matrix, octave_bool_matrix, ne);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-chm.cc b/src/OPERATORS/op-chm.cc
--- a/src/OPERATORS/op-chm.cc
+++ b/src/OPERATORS/op-chm.cc
@@ -41,17 +41,17 @@ DEFUNOP (transpose, char_matrix)
   CAST_UNOP_ARG (const octave_char_matrix&);
 
   return octave_value (v.matrix_value().transpose ());
 }
 
 void
 install_chm_ops (void)
 {
-  INSTALL_UNOP (transpose, octave_char_matrix, transpose);
-  INSTALL_UNOP (hermitian, octave_char_matrix, transpose);
+  INSTALL_UNOP (op_transpose, octave_char_matrix, transpose);
+  INSTALL_UNOP (op_hermitian, octave_char_matrix, transpose);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-cm-cm.cc b/src/OPERATORS/op-cm-cm.cc
--- a/src/OPERATORS/op-cm-cm.cc
+++ b/src/OPERATORS/op-cm-cm.cc
@@ -95,43 +95,43 @@ DEFBINOP (el_ldiv, complex_matrix, compl
 DEFBINOP_FN (el_and, complex_matrix, complex_matrix, mx_el_and)
 DEFBINOP_FN (el_or, complex_matrix, complex_matrix, mx_el_or)
 
 DEFASSIGNOP_FN (assign, complex_matrix, complex_matrix, assign)
 
 void
 install_cm_cm_ops (void)
 {
-  INSTALL_UNOP (not, octave_complex_matrix, not);
-  INSTALL_UNOP (uminus, octave_complex_matrix, uminus);
-  INSTALL_UNOP (transpose, octave_complex_matrix, transpose);
-  INSTALL_UNOP (hermitian, octave_complex_matrix, hermitian);
+  INSTALL_UNOP (op_not, octave_complex_matrix, not);
+  INSTALL_UNOP (op_uminus, octave_complex_matrix, uminus);
+  INSTALL_UNOP (op_transpose, octave_complex_matrix, transpose);
+  INSTALL_UNOP (op_hermitian, octave_complex_matrix, hermitian);
 
-  INSTALL_NCUNOP (incr, octave_complex_matrix, incr);
-  INSTALL_NCUNOP (decr, octave_complex_matrix, decr);
+  INSTALL_NCUNOP (op_incr, octave_complex_matrix, incr);
+  INSTALL_NCUNOP (op_decr, octave_complex_matrix, decr);
 
-  INSTALL_BINOP (add, octave_complex_matrix, octave_complex_matrix, add);
-  INSTALL_BINOP (sub, octave_complex_matrix, octave_complex_matrix, sub);
-  INSTALL_BINOP (mul, octave_complex_matrix, octave_complex_matrix, mul);
-  INSTALL_BINOP (div, octave_complex_matrix, octave_complex_matrix, div);
-  INSTALL_BINOP (pow, octave_complex_matrix, octave_complex_matrix, pow);
-  INSTALL_BINOP (ldiv, octave_complex_matrix, octave_complex_matrix, ldiv);
-  INSTALL_BINOP (lt, octave_complex_matrix, octave_complex_matrix, lt);
-  INSTALL_BINOP (le, octave_complex_matrix, octave_complex_matrix, le);
-  INSTALL_BINOP (eq, octave_complex_matrix, octave_complex_matrix, eq);
-  INSTALL_BINOP (ge, octave_complex_matrix, octave_complex_matrix, ge);
-  INSTALL_BINOP (gt, octave_complex_matrix, octave_complex_matrix, gt);
-  INSTALL_BINOP (ne, octave_complex_matrix, octave_complex_matrix, ne);
-  INSTALL_BINOP (el_mul, octave_complex_matrix, octave_complex_matrix, el_mul);
-  INSTALL_BINOP (el_div, octave_complex_matrix, octave_complex_matrix, el_div);
-  INSTALL_BINOP (el_pow, octave_complex_matrix, octave_complex_matrix, el_pow);
-  INSTALL_BINOP (el_ldiv, octave_complex_matrix, octave_complex_matrix, el_ldiv);
-  INSTALL_BINOP (el_and, octave_complex_matrix, octave_complex_matrix, el_and);
-  INSTALL_BINOP (el_or, octave_complex_matrix, octave_complex_matrix, el_or);
+  INSTALL_BINOP (op_add, octave_complex_matrix, octave_complex_matrix, add);
+  INSTALL_BINOP (op_sub, octave_complex_matrix, octave_complex_matrix, sub);
+  INSTALL_BINOP (op_mul, octave_complex_matrix, octave_complex_matrix, mul);
+  INSTALL_BINOP (op_div, octave_complex_matrix, octave_complex_matrix, div);
+  INSTALL_BINOP (op_pow, octave_complex_matrix, octave_complex_matrix, pow);
+  INSTALL_BINOP (op_ldiv, octave_complex_matrix, octave_complex_matrix, ldiv);
+  INSTALL_BINOP (op_lt, octave_complex_matrix, octave_complex_matrix, lt);
+  INSTALL_BINOP (op_le, octave_complex_matrix, octave_complex_matrix, le);
+  INSTALL_BINOP (op_eq, octave_complex_matrix, octave_complex_matrix, eq);
+  INSTALL_BINOP (op_ge, octave_complex_matrix, octave_complex_matrix, ge);
+  INSTALL_BINOP (op_gt, octave_complex_matrix, octave_complex_matrix, gt);
+  INSTALL_BINOP (op_ne, octave_complex_matrix, octave_complex_matrix, ne);
+  INSTALL_BINOP (op_el_mul, octave_complex_matrix, octave_complex_matrix, el_mul);
+  INSTALL_BINOP (op_el_div, octave_complex_matrix, octave_complex_matrix, el_div);
+  INSTALL_BINOP (op_el_pow, octave_complex_matrix, octave_complex_matrix, el_pow);
+  INSTALL_BINOP (op_el_ldiv, octave_complex_matrix, octave_complex_matrix, el_ldiv);
+  INSTALL_BINOP (op_el_and, octave_complex_matrix, octave_complex_matrix, el_and);
+  INSTALL_BINOP (op_el_or, octave_complex_matrix, octave_complex_matrix, el_or);
 
-  INSTALL_ASSIGNOP (asn_eq, octave_complex_matrix, octave_complex_matrix, assign);
+  INSTALL_ASSIGNOP (op_asn_eq, octave_complex_matrix, octave_complex_matrix, assign);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-cm-cs.cc b/src/OPERATORS/op-cm-cs.cc
--- a/src/OPERATORS/op-cm-cs.cc
+++ b/src/OPERATORS/op-cm-cs.cc
@@ -95,35 +95,35 @@ DEFBINOP (el_ldiv, complex_matrix, compl
 DEFBINOP_FN (el_and, complex_matrix, complex, mx_el_and)
 DEFBINOP_FN (el_or, complex_matrix, complex, mx_el_or)
 
 DEFASSIGNOP_FN (assign, complex_matrix, complex, assign)
 
 void
 install_cm_cs_ops (void)
 {
-  INSTALL_BINOP (add, octave_complex_matrix, octave_complex, add);
-  INSTALL_BINOP (sub, octave_complex_matrix, octave_complex, sub);
-  INSTALL_BINOP (mul, octave_complex_matrix, octave_complex, mul);
-  INSTALL_BINOP (div, octave_complex_matrix, octave_complex, div);
-  INSTALL_BINOP (pow, octave_complex_matrix, octave_complex, pow);
-  INSTALL_BINOP (ldiv, octave_complex_matrix, octave_complex, ldiv);
-  INSTALL_BINOP (lt, octave_complex_matrix, octave_complex, lt);
-  INSTALL_BINOP (le, octave_complex_matrix, octave_complex, le);
-  INSTALL_BINOP (eq, octave_complex_matrix, octave_complex, eq);
-  INSTALL_BINOP (ge, octave_complex_matrix, octave_complex, ge);
-  INSTALL_BINOP (gt, octave_complex_matrix, octave_complex, gt);
-  INSTALL_BINOP (ne, octave_complex_matrix, octave_complex, ne);
-  INSTALL_BINOP (el_mul, octave_complex_matrix, octave_complex, el_mul);
-  INSTALL_BINOP (el_div, octave_complex_matrix, octave_complex, el_div);
-  INSTALL_BINOP (el_pow, octave_complex_matrix, octave_complex, el_pow);
-  INSTALL_BINOP (el_ldiv, octave_complex_matrix, octave_complex, el_ldiv);
-  INSTALL_BINOP (el_and, octave_complex_matrix, octave_complex, el_and);
-  INSTALL_BINOP (el_or, octave_complex_matrix, octave_complex, el_or);
+  INSTALL_BINOP (op_add, octave_complex_matrix, octave_complex, add);
+  INSTALL_BINOP (op_sub, octave_complex_matrix, octave_complex, sub);
+  INSTALL_BINOP (op_mul, octave_complex_matrix, octave_complex, mul);
+  INSTALL_BINOP (op_div, octave_complex_matrix, octave_complex, div);
+  INSTALL_BINOP (op_pow, octave_complex_matrix, octave_complex, pow);
+  INSTALL_BINOP (op_ldiv, octave_complex_matrix, octave_complex, ldiv);
+  INSTALL_BINOP (op_lt, octave_complex_matrix, octave_complex, lt);
+  INSTALL_BINOP (op_le, octave_complex_matrix, octave_complex, le);
+  INSTALL_BINOP (op_eq, octave_complex_matrix, octave_complex, eq);
+  INSTALL_BINOP (op_ge, octave_complex_matrix, octave_complex, ge);
+  INSTALL_BINOP (op_gt, octave_complex_matrix, octave_complex, gt);
+  INSTALL_BINOP (op_ne, octave_complex_matrix, octave_complex, ne);
+  INSTALL_BINOP (op_el_mul, octave_complex_matrix, octave_complex, el_mul);
+  INSTALL_BINOP (op_el_div, octave_complex_matrix, octave_complex, el_div);
+  INSTALL_BINOP (op_el_pow, octave_complex_matrix, octave_complex, el_pow);
+  INSTALL_BINOP (op_el_ldiv, octave_complex_matrix, octave_complex, el_ldiv);
+  INSTALL_BINOP (op_el_and, octave_complex_matrix, octave_complex, el_and);
+  INSTALL_BINOP (op_el_or, octave_complex_matrix, octave_complex, el_or);
 
-  INSTALL_ASSIGNOP (asn_eq, octave_complex_matrix, octave_complex, assign);
+  INSTALL_ASSIGNOP (op_asn_eq, octave_complex_matrix, octave_complex, assign);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-cm-m.cc b/src/OPERATORS/op-cm-m.cc
--- a/src/OPERATORS/op-cm-m.cc
+++ b/src/OPERATORS/op-cm-m.cc
@@ -82,35 +82,35 @@ DEFBINOP (el_ldiv, complex_matrix, matri
 DEFBINOP_FN (el_and, complex_matrix, matrix, mx_el_and)
 DEFBINOP_FN (el_or, complex_matrix, matrix, mx_el_or)
 
 DEFASSIGNOP_FN (assign, complex_matrix, matrix, assign)
 
 void
 install_cm_m_ops (void)
 {
-  INSTALL_BINOP (add, octave_complex_matrix, octave_matrix, add);
-  INSTALL_BINOP (sub, octave_complex_matrix, octave_matrix, sub);
-  INSTALL_BINOP (mul, octave_complex_matrix, octave_matrix, mul);
-  INSTALL_BINOP (div, octave_complex_matrix, octave_matrix, div);
-  INSTALL_BINOP (pow, octave_complex_matrix, octave_matrix, pow);
-  INSTALL_BINOP (ldiv, octave_complex_matrix, octave_matrix, ldiv);
-  INSTALL_BINOP (lt, octave_complex_matrix, octave_matrix, lt);
-  INSTALL_BINOP (le, octave_complex_matrix, octave_matrix, le);
-  INSTALL_BINOP (eq, octave_complex_matrix, octave_matrix, eq);
-  INSTALL_BINOP (ge, octave_complex_matrix, octave_matrix, ge);
-  INSTALL_BINOP (gt, octave_complex_matrix, octave_matrix, gt);
-  INSTALL_BINOP (ne, octave_complex_matrix, octave_matrix, ne);
-  INSTALL_BINOP (el_mul, octave_complex_matrix, octave_matrix, el_mul);
-  INSTALL_BINOP (el_div, octave_complex_matrix, octave_matrix, el_div);
-  INSTALL_BINOP (el_pow, octave_complex_matrix, octave_matrix, el_pow);
-  INSTALL_BINOP (el_ldiv, octave_complex_matrix, octave_matrix, el_ldiv);
-  INSTALL_BINOP (el_and, octave_complex_matrix, octave_matrix, el_and);
-  INSTALL_BINOP (el_or, octave_complex_matrix, octave_matrix, el_or);
+  INSTALL_BINOP (op_add, octave_complex_matrix, octave_matrix, add);
+  INSTALL_BINOP (op_sub, octave_complex_matrix, octave_matrix, sub);
+  INSTALL_BINOP (op_mul, octave_complex_matrix, octave_matrix, mul);
+  INSTALL_BINOP (op_div, octave_complex_matrix, octave_matrix, div);
+  INSTALL_BINOP (op_pow, octave_complex_matrix, octave_matrix, pow);
+  INSTALL_BINOP (op_ldiv, octave_complex_matrix, octave_matrix, ldiv);
+  INSTALL_BINOP (op_lt, octave_complex_matrix, octave_matrix, lt);
+  INSTALL_BINOP (op_le, octave_complex_matrix, octave_matrix, le);
+  INSTALL_BINOP (op_eq, octave_complex_matrix, octave_matrix, eq);
+  INSTALL_BINOP (op_ge, octave_complex_matrix, octave_matrix, ge);
+  INSTALL_BINOP (op_gt, octave_complex_matrix, octave_matrix, gt);
+  INSTALL_BINOP (op_ne, octave_complex_matrix, octave_matrix, ne);
+  INSTALL_BINOP (op_el_mul, octave_complex_matrix, octave_matrix, el_mul);
+  INSTALL_BINOP (op_el_div, octave_complex_matrix, octave_matrix, el_div);
+  INSTALL_BINOP (op_el_pow, octave_complex_matrix, octave_matrix, el_pow);
+  INSTALL_BINOP (op_el_ldiv, octave_complex_matrix, octave_matrix, el_ldiv);
+  INSTALL_BINOP (op_el_and, octave_complex_matrix, octave_matrix, el_and);
+  INSTALL_BINOP (op_el_or, octave_complex_matrix, octave_matrix, el_or);
 
-  INSTALL_ASSIGNOP (asn_eq, octave_complex_matrix, octave_matrix, assign);
+  INSTALL_ASSIGNOP (op_asn_eq, octave_complex_matrix, octave_matrix, assign);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-cm-s.cc b/src/OPERATORS/op-cm-s.cc
--- a/src/OPERATORS/op-cm-s.cc
+++ b/src/OPERATORS/op-cm-s.cc
@@ -97,35 +97,35 @@ DEFBINOP (el_ldiv, complex_matrix, scala
 DEFBINOP_FN (el_and, complex_matrix, scalar, mx_el_and)
 DEFBINOP_FN (el_or, complex_matrix, scalar, mx_el_or)
 
 DEFASSIGNOP_FN (assign, complex_matrix, scalar, assign)
 
 void
 install_cm_s_ops (void)
 {
-  INSTALL_BINOP (add, octave_complex_matrix, octave_scalar, add);
-  INSTALL_BINOP (sub, octave_complex_matrix, octave_scalar, sub);
-  INSTALL_BINOP (mul, octave_complex_matrix, octave_scalar, mul);
-  INSTALL_BINOP (div, octave_complex_matrix, octave_scalar, div);
-  INSTALL_BINOP (pow, octave_complex_matrix, octave_scalar, pow);
-  INSTALL_BINOP (ldiv, octave_complex_matrix, octave_scalar, ldiv);
-  INSTALL_BINOP (lt, octave_complex_matrix, octave_scalar, lt);
-  INSTALL_BINOP (le, octave_complex_matrix, octave_scalar, le);
-  INSTALL_BINOP (eq, octave_complex_matrix, octave_scalar, eq);
-  INSTALL_BINOP (ge, octave_complex_matrix, octave_scalar, ge);
-  INSTALL_BINOP (gt, octave_complex_matrix, octave_scalar, gt);
-  INSTALL_BINOP (ne, octave_complex_matrix, octave_scalar, ne);
-  INSTALL_BINOP (el_mul, octave_complex_matrix, octave_scalar, el_mul);
-  INSTALL_BINOP (el_div, octave_complex_matrix, octave_scalar, el_div);
-  INSTALL_BINOP (el_pow, octave_complex_matrix, octave_scalar, el_pow);
-  INSTALL_BINOP (el_ldiv, octave_complex_matrix, octave_scalar, el_ldiv);
-  INSTALL_BINOP (el_and, octave_complex_matrix, octave_scalar, el_and);
-  INSTALL_BINOP (el_or, octave_complex_matrix, octave_scalar, el_or);
+  INSTALL_BINOP (op_add, octave_complex_matrix, octave_scalar, add);
+  INSTALL_BINOP (op_sub, octave_complex_matrix, octave_scalar, sub);
+  INSTALL_BINOP (op_mul, octave_complex_matrix, octave_scalar, mul);
+  INSTALL_BINOP (op_div, octave_complex_matrix, octave_scalar, div);
+  INSTALL_BINOP (op_pow, octave_complex_matrix, octave_scalar, pow);
+  INSTALL_BINOP (op_ldiv, octave_complex_matrix, octave_scalar, ldiv);
+  INSTALL_BINOP (op_lt, octave_complex_matrix, octave_scalar, lt);
+  INSTALL_BINOP (op_le, octave_complex_matrix, octave_scalar, le);
+  INSTALL_BINOP (op_eq, octave_complex_matrix, octave_scalar, eq);
+  INSTALL_BINOP (op_ge, octave_complex_matrix, octave_scalar, ge);
+  INSTALL_BINOP (op_gt, octave_complex_matrix, octave_scalar, gt);
+  INSTALL_BINOP (op_ne, octave_complex_matrix, octave_scalar, ne);
+  INSTALL_BINOP (op_el_mul, octave_complex_matrix, octave_scalar, el_mul);
+  INSTALL_BINOP (op_el_div, octave_complex_matrix, octave_scalar, el_div);
+  INSTALL_BINOP (op_el_pow, octave_complex_matrix, octave_scalar, el_pow);
+  INSTALL_BINOP (op_el_ldiv, octave_complex_matrix, octave_scalar, el_ldiv);
+  INSTALL_BINOP (op_el_and, octave_complex_matrix, octave_scalar, el_and);
+  INSTALL_BINOP (op_el_or, octave_complex_matrix, octave_scalar, el_or);
 
-  INSTALL_ASSIGNOP (asn_eq, octave_complex_matrix, octave_scalar, assign);
+  INSTALL_ASSIGNOP (op_asn_eq, octave_complex_matrix, octave_scalar, assign);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-cs-cm.cc b/src/OPERATORS/op-cs-cm.cc
--- a/src/OPERATORS/op-cs-cm.cc
+++ b/src/OPERATORS/op-cs-cm.cc
@@ -93,37 +93,37 @@ DEFCONV (complex_matrix_conv, complex, c
   CAST_CONV_ARG (const octave_complex&);
 
   return new octave_complex_matrix (v.complex_matrix_value ());
 }
 
 void
 install_cs_cm_ops (void)
 {
-  INSTALL_BINOP (add, octave_complex, octave_complex_matrix, add);
-  INSTALL_BINOP (sub, octave_complex, octave_complex_matrix, sub);
-  INSTALL_BINOP (mul, octave_complex, octave_complex_matrix, mul);
-  INSTALL_BINOP (div, octave_complex, octave_complex_matrix, div);
-  INSTALL_BINOP (pow, octave_complex, octave_complex_matrix, pow);
-  INSTALL_BINOP (ldiv, octave_complex, octave_complex_matrix, ldiv);
-  INSTALL_BINOP (lt, octave_complex, octave_complex_matrix, lt);
-  INSTALL_BINOP (le, octave_complex, octave_complex_matrix, le);
-  INSTALL_BINOP (eq, octave_complex, octave_complex_matrix, eq);
-  INSTALL_BINOP (ge, octave_complex, octave_complex_matrix, ge);
-  INSTALL_BINOP (gt, octave_complex, octave_complex_matrix, gt);
-  INSTALL_BINOP (ne, octave_complex, octave_complex_matrix, ne);
-  INSTALL_BINOP (el_mul, octave_complex, octave_complex_matrix, el_mul);
-  INSTALL_BINOP (el_div, octave_complex, octave_complex_matrix, el_div);
-  INSTALL_BINOP (el_pow, octave_complex, octave_complex_matrix, el_pow);
-  INSTALL_BINOP (el_ldiv, octave_complex, octave_complex_matrix, el_ldiv);
-  INSTALL_BINOP (el_and, octave_complex, octave_complex_matrix, el_and);
-  INSTALL_BINOP (el_or, octave_complex, octave_complex_matrix, el_or);
+  INSTALL_BINOP (op_add, octave_complex, octave_complex_matrix, add);
+  INSTALL_BINOP (op_sub, octave_complex, octave_complex_matrix, sub);
+  INSTALL_BINOP (op_mul, octave_complex, octave_complex_matrix, mul);
+  INSTALL_BINOP (op_div, octave_complex, octave_complex_matrix, div);
+  INSTALL_BINOP (op_pow, octave_complex, octave_complex_matrix, pow);
+  INSTALL_BINOP (op_ldiv, octave_complex, octave_complex_matrix, ldiv);
+  INSTALL_BINOP (op_lt, octave_complex, octave_complex_matrix, lt);
+  INSTALL_BINOP (op_le, octave_complex, octave_complex_matrix, le);
+  INSTALL_BINOP (op_eq, octave_complex, octave_complex_matrix, eq);
+  INSTALL_BINOP (op_ge, octave_complex, octave_complex_matrix, ge);
+  INSTALL_BINOP (op_gt, octave_complex, octave_complex_matrix, gt);
+  INSTALL_BINOP (op_ne, octave_complex, octave_complex_matrix, ne);
+  INSTALL_BINOP (op_el_mul, octave_complex, octave_complex_matrix, el_mul);
+  INSTALL_BINOP (op_el_div, octave_complex, octave_complex_matrix, el_div);
+  INSTALL_BINOP (op_el_pow, octave_complex, octave_complex_matrix, el_pow);
+  INSTALL_BINOP (op_el_ldiv, octave_complex, octave_complex_matrix, el_ldiv);
+  INSTALL_BINOP (op_el_and, octave_complex, octave_complex_matrix, el_and);
+  INSTALL_BINOP (op_el_or, octave_complex, octave_complex_matrix, el_or);
 
   INSTALL_ASSIGNCONV (octave_complex, octave_complex_matrix, octave_complex_matrix);
 
-  INSTALL_WIDENOP (octave_complex, octave_complex_matrix, complex_matrix_conv);
+  INSTALL_WIDENOP (op_octave_complex, octave_complex_matrix, complex_matrix_conv);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-cs-cs.cc b/src/OPERATORS/op-cs-cs.cc
--- a/src/OPERATORS/op-cs-cs.cc
+++ b/src/OPERATORS/op-cs-cs.cc
@@ -180,45 +180,45 @@ DEFCONV (complex_matrix_conv, complex, c
   CAST_CONV_ARG (const octave_complex&);
 
   return new octave_complex_matrix (v.complex_matrix_value ());
 }
 
 void
 install_cs_cs_ops (void)
 {
-  INSTALL_UNOP (not, octave_complex, not);
-  INSTALL_UNOP (uminus, octave_complex, uminus);
-  INSTALL_UNOP (transpose, octave_complex, transpose);
-  INSTALL_UNOP (hermitian, octave_complex, hermitian);
+  INSTALL_UNOP (op_not, octave_complex, not);
+  INSTALL_UNOP (op_uminus, octave_complex, uminus);
+  INSTALL_UNOP (op_transpose, octave_complex, transpose);
+  INSTALL_UNOP (op_hermitian, octave_complex, hermitian);
 
-  INSTALL_NCUNOP (incr, octave_complex, incr);
-  INSTALL_NCUNOP (decr, octave_complex, decr);
+  INSTALL_NCUNOP (op_incr, octave_complex, incr);
+  INSTALL_NCUNOP (op_decr, octave_complex, decr);
 
-  INSTALL_BINOP (add, octave_complex, octave_complex, add);
-  INSTALL_BINOP (sub, octave_complex, octave_complex, sub);
-  INSTALL_BINOP (mul, octave_complex, octave_complex, mul);
-  INSTALL_BINOP (div, octave_complex, octave_complex, div);
-  INSTALL_BINOP (pow, octave_complex, octave_complex, pow);
-  INSTALL_BINOP (ldiv, octave_complex, octave_complex, ldiv);
-  INSTALL_BINOP (lt, octave_complex, octave_complex, lt);
-  INSTALL_BINOP (le, octave_complex, octave_complex, le);
-  INSTALL_BINOP (eq, octave_complex, octave_complex, eq);
-  INSTALL_BINOP (ge, octave_complex, octave_complex, ge);
-  INSTALL_BINOP (gt, octave_complex, octave_complex, gt);
-  INSTALL_BINOP (ne, octave_complex, octave_complex, ne);
-  INSTALL_BINOP (el_mul, octave_complex, octave_complex, el_mul);
-  INSTALL_BINOP (el_div, octave_complex, octave_complex, el_div);
-  INSTALL_BINOP (el_pow, octave_complex, octave_complex, el_pow);
-  INSTALL_BINOP (el_ldiv, octave_complex, octave_complex, el_ldiv);
-  INSTALL_BINOP (el_and, octave_complex, octave_complex, el_and);
-  INSTALL_BINOP (el_or, octave_complex, octave_complex, el_or);
+  INSTALL_BINOP (op_add, octave_complex, octave_complex, add);
+  INSTALL_BINOP (op_sub, octave_complex, octave_complex, sub);
+  INSTALL_BINOP (op_mul, octave_complex, octave_complex, mul);
+  INSTALL_BINOP (op_div, octave_complex, octave_complex, div);
+  INSTALL_BINOP (op_pow, octave_complex, octave_complex, pow);
+  INSTALL_BINOP (op_ldiv, octave_complex, octave_complex, ldiv);
+  INSTALL_BINOP (op_lt, octave_complex, octave_complex, lt);
+  INSTALL_BINOP (op_le, octave_complex, octave_complex, le);
+  INSTALL_BINOP (op_eq, octave_complex, octave_complex, eq);
+  INSTALL_BINOP (op_ge, octave_complex, octave_complex, ge);
+  INSTALL_BINOP (op_gt, octave_complex, octave_complex, gt);
+  INSTALL_BINOP (op_ne, octave_complex, octave_complex, ne);
+  INSTALL_BINOP (op_el_mul, octave_complex, octave_complex, el_mul);
+  INSTALL_BINOP (op_el_div, octave_complex, octave_complex, el_div);
+  INSTALL_BINOP (op_el_pow, octave_complex, octave_complex, el_pow);
+  INSTALL_BINOP (op_el_ldiv, octave_complex, octave_complex, el_ldiv);
+  INSTALL_BINOP (op_el_and, octave_complex, octave_complex, el_and);
+  INSTALL_BINOP (op_el_or, octave_complex, octave_complex, el_or);
 
   INSTALL_ASSIGNCONV (octave_complex, octave_complex, octave_complex_matrix);
 
-  INSTALL_WIDENOP (octave_complex, octave_complex_matrix, complex_matrix_conv);
+  INSTALL_WIDENOP (op_octave_complex, octave_complex_matrix, complex_matrix_conv);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-cs-m.cc b/src/OPERATORS/op-cs-m.cc
--- a/src/OPERATORS/op-cs-m.cc
+++ b/src/OPERATORS/op-cs-m.cc
@@ -97,37 +97,37 @@ DEFCONV (complex_matrix_conv, complex, c
   CAST_CONV_ARG (const octave_complex&);
 
   return new octave_complex_matrix (v.complex_matrix_value ());
 }
 
 void
 install_cs_m_ops (void)
 {
-  INSTALL_BINOP (add, octave_complex, octave_matrix, add);
-  INSTALL_BINOP (sub, octave_complex, octave_matrix, sub);
-  INSTALL_BINOP (mul, octave_complex, octave_matrix, mul);
-  INSTALL_BINOP (div, octave_complex, octave_matrix, div);
-  INSTALL_BINOP (pow, octave_complex, octave_matrix, pow);
-  INSTALL_BINOP (ldiv, octave_complex, octave_matrix, ldiv);
-  INSTALL_BINOP (lt, octave_complex, octave_matrix, lt);
-  INSTALL_BINOP (le, octave_complex, octave_matrix, le);
-  INSTALL_BINOP (eq, octave_complex, octave_matrix, eq);
-  INSTALL_BINOP (ge, octave_complex, octave_matrix, ge);
-  INSTALL_BINOP (gt, octave_complex, octave_matrix, gt);
-  INSTALL_BINOP (ne, octave_complex, octave_matrix, ne);
-  INSTALL_BINOP (el_mul, octave_complex, octave_matrix, el_mul);
-  INSTALL_BINOP (el_div, octave_complex, octave_matrix, el_div);
-  INSTALL_BINOP (el_pow, octave_complex, octave_matrix, el_pow);
-  INSTALL_BINOP (el_ldiv, octave_complex, octave_matrix, el_ldiv);
-  INSTALL_BINOP (el_and, octave_complex, octave_matrix, el_and);
-  INSTALL_BINOP (el_or, octave_complex, octave_matrix, el_or);
+  INSTALL_BINOP (op_add, octave_complex, octave_matrix, add);
+  INSTALL_BINOP (op_sub, octave_complex, octave_matrix, sub);
+  INSTALL_BINOP (op_mul, octave_complex, octave_matrix, mul);
+  INSTALL_BINOP (op_div, octave_complex, octave_matrix, div);
+  INSTALL_BINOP (op_pow, octave_complex, octave_matrix, pow);
+  INSTALL_BINOP (op_ldiv, octave_complex, octave_matrix, ldiv);
+  INSTALL_BINOP (op_lt, octave_complex, octave_matrix, lt);
+  INSTALL_BINOP (op_le, octave_complex, octave_matrix, le);
+  INSTALL_BINOP (op_eq, octave_complex, octave_matrix, eq);
+  INSTALL_BINOP (op_ge, octave_complex, octave_matrix, ge);
+  INSTALL_BINOP (op_gt, octave_complex, octave_matrix, gt);
+  INSTALL_BINOP (op_ne, octave_complex, octave_matrix, ne);
+  INSTALL_BINOP (op_el_mul, octave_complex, octave_matrix, el_mul);
+  INSTALL_BINOP (op_el_div, octave_complex, octave_matrix, el_div);
+  INSTALL_BINOP (op_el_pow, octave_complex, octave_matrix, el_pow);
+  INSTALL_BINOP (op_el_ldiv, octave_complex, octave_matrix, el_ldiv);
+  INSTALL_BINOP (op_el_and, octave_complex, octave_matrix, el_and);
+  INSTALL_BINOP (op_el_or, octave_complex, octave_matrix, el_or);
 
   INSTALL_ASSIGNCONV (octave_complex, octave_matrix, octave_complex_matrix);
 
-  INSTALL_WIDENOP (octave_complex, octave_complex_matrix, complex_matrix_conv);
+  INSTALL_WIDENOP (op_octave_complex, octave_complex_matrix, complex_matrix_conv);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-cs-s.cc b/src/OPERATORS/op-cs-s.cc
--- a/src/OPERATORS/op-cs-s.cc
+++ b/src/OPERATORS/op-cs-s.cc
@@ -159,37 +159,37 @@ DEFCONV (complex_matrix_conv, complex, c
   CAST_CONV_ARG (const octave_complex&);
 
   return new octave_complex_matrix (v.complex_matrix_value ());
 }
 
 void
 install_cs_s_ops (void)
 {
-  INSTALL_BINOP (add, octave_complex, octave_scalar, add);
-  INSTALL_BINOP (sub, octave_complex, octave_scalar, sub);
-  INSTALL_BINOP (mul, octave_complex, octave_scalar, mul);
-  INSTALL_BINOP (div, octave_complex, octave_scalar, div);
-  INSTALL_BINOP (pow, octave_complex, octave_scalar, pow);
-  INSTALL_BINOP (ldiv, octave_complex, octave_scalar, ldiv);
-  INSTALL_BINOP (lt, octave_complex, octave_scalar, lt);
-  INSTALL_BINOP (le, octave_complex, octave_scalar, le);
-  INSTALL_BINOP (eq, octave_complex, octave_scalar, eq);
-  INSTALL_BINOP (ge, octave_complex, octave_scalar, ge);
-  INSTALL_BINOP (gt, octave_complex, octave_scalar, gt);
-  INSTALL_BINOP (ne, octave_complex, octave_scalar, ne);
-  INSTALL_BINOP (el_mul, octave_complex, octave_scalar, el_mul);
-  INSTALL_BINOP (el_div, octave_complex, octave_scalar, el_div);
-  INSTALL_BINOP (el_pow, octave_complex, octave_scalar, el_pow);
-  INSTALL_BINOP (el_ldiv, octave_complex, octave_scalar, el_ldiv);
-  INSTALL_BINOP (el_and, octave_complex, octave_scalar, el_and);
-  INSTALL_BINOP (el_or, octave_complex, octave_scalar, el_or);
+  INSTALL_BINOP (op_add, octave_complex, octave_scalar, add);
+  INSTALL_BINOP (op_sub, octave_complex, octave_scalar, sub);
+  INSTALL_BINOP (op_mul, octave_complex, octave_scalar, mul);
+  INSTALL_BINOP (op_div, octave_complex, octave_scalar, div);
+  INSTALL_BINOP (op_pow, octave_complex, octave_scalar, pow);
+  INSTALL_BINOP (op_ldiv, octave_complex, octave_scalar, ldiv);
+  INSTALL_BINOP (op_lt, octave_complex, octave_scalar, lt);
+  INSTALL_BINOP (op_le, octave_complex, octave_scalar, le);
+  INSTALL_BINOP (op_eq, octave_complex, octave_scalar, eq);
+  INSTALL_BINOP (op_ge, octave_complex, octave_scalar, ge);
+  INSTALL_BINOP (op_gt, octave_complex, octave_scalar, gt);
+  INSTALL_BINOP (op_ne, octave_complex, octave_scalar, ne);
+  INSTALL_BINOP (op_el_mul, octave_complex, octave_scalar, el_mul);
+  INSTALL_BINOP (op_el_div, octave_complex, octave_scalar, el_div);
+  INSTALL_BINOP (op_el_pow, octave_complex, octave_scalar, el_pow);
+  INSTALL_BINOP (op_el_ldiv, octave_complex, octave_scalar, el_ldiv);
+  INSTALL_BINOP (op_el_and, octave_complex, octave_scalar, el_and);
+  INSTALL_BINOP (op_el_or, octave_complex, octave_scalar, el_or);
 
   INSTALL_ASSIGNCONV (octave_complex, octave_scalar, octave_complex_matrix);
 
-  INSTALL_WIDENOP (octave_complex, octave_complex_matrix, complex_matrix_conv);
+  INSTALL_WIDENOP (op_octave_complex, octave_complex_matrix, complex_matrix_conv);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-fil-b.cc b/src/OPERATORS/op-fil-b.cc
--- a/src/OPERATORS/op-fil-b.cc
+++ b/src/OPERATORS/op-fil-b.cc
@@ -63,16 +63,16 @@ DEFBINOP (lshift, file, bool)
     }
 
   return octave_value (oct_stream, v1.stream_number ());
 }
 
 void
 install_fil_b_ops (void)
 {
-  INSTALL_BINOP (lshift, octave_file, octave_bool, lshift);
+  INSTALL_BINOP (op_lshift, octave_file, octave_bool, lshift);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-fil-bm.cc b/src/OPERATORS/op-fil-bm.cc
--- a/src/OPERATORS/op-fil-bm.cc
+++ b/src/OPERATORS/op-fil-bm.cc
@@ -63,16 +63,16 @@ DEFBINOP (lshift, file, bool_matrix)
     }
 
   return octave_value (oct_stream, v1.stream_number ());
 }
 
 void
 install_fil_bm_ops (void)
 {
-  INSTALL_BINOP (lshift, octave_file, octave_bool_matrix, lshift);
+  INSTALL_BINOP (op_lshift, octave_file, octave_bool_matrix, lshift);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-fil-cm.cc b/src/OPERATORS/op-fil-cm.cc
--- a/src/OPERATORS/op-fil-cm.cc
+++ b/src/OPERATORS/op-fil-cm.cc
@@ -63,16 +63,16 @@ DEFBINOP (lshift, file, complex_matrix)
     }
 
   return octave_value (oct_stream, v1.stream_number ());
 }
 
 void
 install_fil_cm_ops (void)
 {
-  INSTALL_BINOP (lshift, octave_file, octave_complex_matrix, lshift);
+  INSTALL_BINOP (op_lshift, octave_file, octave_complex_matrix, lshift);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-fil-cs.cc b/src/OPERATORS/op-fil-cs.cc
--- a/src/OPERATORS/op-fil-cs.cc
+++ b/src/OPERATORS/op-fil-cs.cc
@@ -63,16 +63,16 @@ DEFBINOP (lshift, file, complex)
     }
 
   return octave_value (oct_stream, v1.stream_number ());
 }
 
 void
 install_fil_cs_ops (void)
 {
-  INSTALL_BINOP (lshift, octave_file, octave_complex, lshift);
+  INSTALL_BINOP (op_lshift, octave_file, octave_complex, lshift);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-fil-lis.cc b/src/OPERATORS/op-fil-lis.cc
--- a/src/OPERATORS/op-fil-lis.cc
+++ b/src/OPERATORS/op-fil-lis.cc
@@ -63,16 +63,16 @@ DEFBINOP (lshift, file, list)
     }
 
   return octave_value (oct_stream, v1.stream_number ());
 }
 
 void
 install_fil_lis_ops (void)
 {
-  INSTALL_BINOP (lshift, octave_file, octave_list, lshift);
+  INSTALL_BINOP (op_lshift, octave_file, octave_list, lshift);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-fil-m.cc b/src/OPERATORS/op-fil-m.cc
--- a/src/OPERATORS/op-fil-m.cc
+++ b/src/OPERATORS/op-fil-m.cc
@@ -63,16 +63,16 @@ DEFBINOP (lshift, file, matrix)
     }
 
   return octave_value (oct_stream, v1.stream_number ());
 }
 
 void
 install_fil_m_ops (void)
 {
-  INSTALL_BINOP (lshift, octave_file, octave_matrix, lshift);
+  INSTALL_BINOP (op_lshift, octave_file, octave_matrix, lshift);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-fil-rec.cc b/src/OPERATORS/op-fil-rec.cc
--- a/src/OPERATORS/op-fil-rec.cc
+++ b/src/OPERATORS/op-fil-rec.cc
@@ -63,16 +63,16 @@ DEFBINOP (lshift, file, struct)
     }
 
   return octave_value (oct_stream, v1.stream_number ());
 }
 
 void
 install_fil_rec_ops (void)
 {
-  INSTALL_BINOP (lshift, octave_file, octave_struct, lshift);
+  INSTALL_BINOP (op_lshift, octave_file, octave_struct, lshift);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-fil-s.cc b/src/OPERATORS/op-fil-s.cc
--- a/src/OPERATORS/op-fil-s.cc
+++ b/src/OPERATORS/op-fil-s.cc
@@ -63,16 +63,16 @@ DEFBINOP (lshift, file, scalar)
     }
 
   return octave_value (oct_stream, v1.stream_number ());
 }
 
 void
 install_fil_s_ops (void)
 {
-  INSTALL_BINOP (lshift, octave_file, octave_scalar, lshift);
+  INSTALL_BINOP (op_lshift, octave_file, octave_scalar, lshift);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-fil-str.cc b/src/OPERATORS/op-fil-str.cc
--- a/src/OPERATORS/op-fil-str.cc
+++ b/src/OPERATORS/op-fil-str.cc
@@ -63,16 +63,16 @@ DEFBINOP (lshift, file, char_matrix_str)
     }
 
   return octave_value (oct_stream, v1.stream_number ());
 }
 
 void
 install_fil_str_ops (void)
 {
-  INSTALL_BINOP (lshift, octave_file, octave_char_matrix_str, lshift);
+  INSTALL_BINOP (op_lshift, octave_file, octave_char_matrix_str, lshift);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-list.cc b/src/OPERATORS/op-list.cc
--- a/src/OPERATORS/op-list.cc
+++ b/src/OPERATORS/op-list.cc
@@ -36,16 +36,16 @@ Software Foundation, 59 Temple Place - S
 
 // list ops.
 
 DEFASSIGNANYOP_FN (assign, list, assign);
 
 void
 install_list_ops (void)
 {
-  INSTALL_ASSIGNANYOP (asn_eq, octave_list, assign);
+  INSTALL_ASSIGNANYOP (op_asn_eq, octave_list, assign);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-m-cm.cc b/src/OPERATORS/op-m-cm.cc
--- a/src/OPERATORS/op-m-cm.cc
+++ b/src/OPERATORS/op-m-cm.cc
@@ -87,37 +87,37 @@ DEFCONV (complex_matrix_conv, matrix, co
   CAST_CONV_ARG (const octave_matrix&);
 
   return new octave_complex_matrix (ComplexMatrix (v.matrix_value ()));
 }
 
 void
 install_m_cm_ops (void)
 {
-  INSTALL_BINOP (add, octave_matrix, octave_complex_matrix, add);
-  INSTALL_BINOP (sub, octave_matrix, octave_complex_matrix, sub);
-  INSTALL_BINOP (mul, octave_matrix, octave_complex_matrix, mul);
-  INSTALL_BINOP (div, octave_matrix, octave_complex_matrix, div);
-  INSTALL_BINOP (pow, octave_matrix, octave_complex_matrix, pow);
-  INSTALL_BINOP (ldiv, octave_matrix, octave_complex_matrix, ldiv);
-  INSTALL_BINOP (lt, octave_matrix, octave_complex_matrix, lt);
-  INSTALL_BINOP (le, octave_matrix, octave_complex_matrix, le);
-  INSTALL_BINOP (eq, octave_matrix, octave_complex_matrix, eq);
-  INSTALL_BINOP (ge, octave_matrix, octave_complex_matrix, ge);
-  INSTALL_BINOP (gt, octave_matrix, octave_complex_matrix, gt);
-  INSTALL_BINOP (ne, octave_matrix, octave_complex_matrix, ne);
-  INSTALL_BINOP (el_mul, octave_matrix, octave_complex_matrix, el_mul);
-  INSTALL_BINOP (el_div, octave_matrix, octave_complex_matrix, el_div);
-  INSTALL_BINOP (el_pow, octave_matrix, octave_complex_matrix, el_pow);
-  INSTALL_BINOP (el_ldiv, octave_matrix, octave_complex_matrix, el_ldiv);
-  INSTALL_BINOP (el_and, octave_matrix, octave_complex_matrix, el_and);
-  INSTALL_BINOP (el_or, octave_matrix, octave_complex_matrix, el_or);
+  INSTALL_BINOP (op_add, octave_matrix, octave_complex_matrix, add);
+  INSTALL_BINOP (op_sub, octave_matrix, octave_complex_matrix, sub);
+  INSTALL_BINOP (op_mul, octave_matrix, octave_complex_matrix, mul);
+  INSTALL_BINOP (op_div, octave_matrix, octave_complex_matrix, div);
+  INSTALL_BINOP (op_pow, octave_matrix, octave_complex_matrix, pow);
+  INSTALL_BINOP (op_ldiv, octave_matrix, octave_complex_matrix, ldiv);
+  INSTALL_BINOP (op_lt, octave_matrix, octave_complex_matrix, lt);
+  INSTALL_BINOP (op_le, octave_matrix, octave_complex_matrix, le);
+  INSTALL_BINOP (op_eq, octave_matrix, octave_complex_matrix, eq);
+  INSTALL_BINOP (op_ge, octave_matrix, octave_complex_matrix, ge);
+  INSTALL_BINOP (op_gt, octave_matrix, octave_complex_matrix, gt);
+  INSTALL_BINOP (op_ne, octave_matrix, octave_complex_matrix, ne);
+  INSTALL_BINOP (op_el_mul, octave_matrix, octave_complex_matrix, el_mul);
+  INSTALL_BINOP (op_el_div, octave_matrix, octave_complex_matrix, el_div);
+  INSTALL_BINOP (op_el_pow, octave_matrix, octave_complex_matrix, el_pow);
+  INSTALL_BINOP (op_el_ldiv, octave_matrix, octave_complex_matrix, el_ldiv);
+  INSTALL_BINOP (op_el_and, octave_matrix, octave_complex_matrix, el_and);
+  INSTALL_BINOP (op_el_or, octave_matrix, octave_complex_matrix, el_or);
 
   INSTALL_ASSIGNCONV (octave_matrix, octave_complex_matrix, octave_complex_matrix);
 
-  INSTALL_WIDENOP (octave_matrix, octave_complex_matrix, complex_matrix_conv);
+  INSTALL_WIDENOP (op_octave_matrix, octave_complex_matrix, complex_matrix_conv);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-m-cs.cc b/src/OPERATORS/op-m-cs.cc
--- a/src/OPERATORS/op-m-cs.cc
+++ b/src/OPERATORS/op-m-cs.cc
@@ -104,37 +104,37 @@ DEFCONV (complex_matrix_conv, matrix, co
   CAST_CONV_ARG (const octave_matrix&);
 
   return new octave_complex_matrix (ComplexMatrix (v.matrix_value ()));
 }
 
 void
 install_m_cs_ops (void)
 {
-  INSTALL_BINOP (add, octave_matrix, octave_complex, add);
-  INSTALL_BINOP (sub, octave_matrix, octave_complex, sub);
-  INSTALL_BINOP (mul, octave_matrix, octave_complex, mul);
-  INSTALL_BINOP (div, octave_matrix, octave_complex, div);
-  INSTALL_BINOP (pow, octave_matrix, octave_complex, pow);
-  INSTALL_BINOP (ldiv, octave_matrix, octave_complex, ldiv);
-  INSTALL_BINOP (lt, octave_matrix, octave_complex, lt);
-  INSTALL_BINOP (le, octave_matrix, octave_complex, le);
-  INSTALL_BINOP (eq, octave_matrix, octave_complex, eq);
-  INSTALL_BINOP (ge, octave_matrix, octave_complex, ge);
-  INSTALL_BINOP (gt, octave_matrix, octave_complex, gt);
-  INSTALL_BINOP (ne, octave_matrix, octave_complex, ne);
-  INSTALL_BINOP (el_mul, octave_matrix, octave_complex, el_mul);
-  INSTALL_BINOP (el_div, octave_matrix, octave_complex, el_div);
-  INSTALL_BINOP (el_pow, octave_matrix, octave_complex, el_pow);
-  INSTALL_BINOP (el_ldiv, octave_matrix, octave_complex, el_ldiv);
-  INSTALL_BINOP (el_and, octave_matrix, octave_complex, el_and);
-  INSTALL_BINOP (el_or, octave_matrix, octave_complex, el_or);
+  INSTALL_BINOP (op_add, octave_matrix, octave_complex, add);
+  INSTALL_BINOP (op_sub, octave_matrix, octave_complex, sub);
+  INSTALL_BINOP (op_mul, octave_matrix, octave_complex, mul);
+  INSTALL_BINOP (op_div, octave_matrix, octave_complex, div);
+  INSTALL_BINOP (op_pow, octave_matrix, octave_complex, pow);
+  INSTALL_BINOP (op_ldiv, octave_matrix, octave_complex, ldiv);
+  INSTALL_BINOP (op_lt, octave_matrix, octave_complex, lt);
+  INSTALL_BINOP (op_le, octave_matrix, octave_complex, le);
+  INSTALL_BINOP (op_eq, octave_matrix, octave_complex, eq);
+  INSTALL_BINOP (op_ge, octave_matrix, octave_complex, ge);
+  INSTALL_BINOP (op_gt, octave_matrix, octave_complex, gt);
+  INSTALL_BINOP (op_ne, octave_matrix, octave_complex, ne);
+  INSTALL_BINOP (op_el_mul, octave_matrix, octave_complex, el_mul);
+  INSTALL_BINOP (op_el_div, octave_matrix, octave_complex, el_div);
+  INSTALL_BINOP (op_el_pow, octave_matrix, octave_complex, el_pow);
+  INSTALL_BINOP (op_el_ldiv, octave_matrix, octave_complex, el_ldiv);
+  INSTALL_BINOP (op_el_and, octave_matrix, octave_complex, el_and);
+  INSTALL_BINOP (op_el_or, octave_matrix, octave_complex, el_or);
 
   INSTALL_ASSIGNCONV (octave_matrix, octave_complex, octave_complex_matrix);
 
-  INSTALL_WIDENOP (octave_matrix, octave_complex_matrix, complex_matrix_conv);
+  INSTALL_WIDENOP (op_octave_matrix, octave_complex_matrix, complex_matrix_conv);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-m-m.cc b/src/OPERATORS/op-m-m.cc
--- a/src/OPERATORS/op-m-m.cc
+++ b/src/OPERATORS/op-m-m.cc
@@ -93,43 +93,43 @@ DEFBINOP (el_ldiv, matrix, matrix)
 DEFBINOP_FN (el_and, matrix, matrix, mx_el_and)
 DEFBINOP_FN (el_or, matrix, matrix, mx_el_or)
 
 DEFASSIGNOP_FN (assign, matrix, matrix, assign)
 
 void
 install_m_m_ops (void)
 {
-  INSTALL_UNOP (not, octave_matrix, not);
-  INSTALL_UNOP (uminus, octave_matrix, uminus);
-  INSTALL_UNOP (transpose, octave_matrix, transpose);
-  INSTALL_UNOP (hermitian, octave_matrix, transpose);
+  INSTALL_UNOP (op_not, octave_matrix, not);
+  INSTALL_UNOP (op_uminus, octave_matrix, uminus);
+  INSTALL_UNOP (op_transpose, octave_matrix, transpose);
+  INSTALL_UNOP (op_hermitian, octave_matrix, transpose);
 
-  INSTALL_NCUNOP (incr, octave_matrix, incr);
-  INSTALL_NCUNOP (decr, octave_matrix, decr);
+  INSTALL_NCUNOP (op_incr, octave_matrix, incr);
+  INSTALL_NCUNOP (op_decr, octave_matrix, decr);
 
-  INSTALL_BINOP (add, octave_matrix, octave_matrix, add);
-  INSTALL_BINOP (sub, octave_matrix, octave_matrix, sub);
-  INSTALL_BINOP (mul, octave_matrix, octave_matrix, mul);
-  INSTALL_BINOP (div, octave_matrix, octave_matrix, div);
-  INSTALL_BINOP (pow, octave_matrix, octave_matrix, pow);
-  INSTALL_BINOP (ldiv, octave_matrix, octave_matrix, ldiv);
-  INSTALL_BINOP (lt, octave_matrix, octave_matrix, lt);
-  INSTALL_BINOP (le, octave_matrix, octave_matrix, le);
-  INSTALL_BINOP (eq, octave_matrix, octave_matrix, eq);
-  INSTALL_BINOP (ge, octave_matrix, octave_matrix, ge);
-  INSTALL_BINOP (gt, octave_matrix, octave_matrix, gt);
-  INSTALL_BINOP (ne, octave_matrix, octave_matrix, ne);
-  INSTALL_BINOP (el_mul, octave_matrix, octave_matrix, el_mul);
-  INSTALL_BINOP (el_div, octave_matrix, octave_matrix, el_div);
-  INSTALL_BINOP (el_pow, octave_matrix, octave_matrix, el_pow);
-  INSTALL_BINOP (el_ldiv, octave_matrix, octave_matrix, el_ldiv);
-  INSTALL_BINOP (el_and, octave_matrix, octave_matrix, el_and);
-  INSTALL_BINOP (el_or, octave_matrix, octave_matrix, el_or);
+  INSTALL_BINOP (op_add, octave_matrix, octave_matrix, add);
+  INSTALL_BINOP (op_sub, octave_matrix, octave_matrix, sub);
+  INSTALL_BINOP (op_mul, octave_matrix, octave_matrix, mul);
+  INSTALL_BINOP (op_div, octave_matrix, octave_matrix, div);
+  INSTALL_BINOP (op_pow, octave_matrix, octave_matrix, pow);
+  INSTALL_BINOP (op_ldiv, octave_matrix, octave_matrix, ldiv);
+  INSTALL_BINOP (op_lt, octave_matrix, octave_matrix, lt);
+  INSTALL_BINOP (op_le, octave_matrix, octave_matrix, le);
+  INSTALL_BINOP (op_eq, octave_matrix, octave_matrix, eq);
+  INSTALL_BINOP (op_ge, octave_matrix, octave_matrix, ge);
+  INSTALL_BINOP (op_gt, octave_matrix, octave_matrix, gt);
+  INSTALL_BINOP (op_ne, octave_matrix, octave_matrix, ne);
+  INSTALL_BINOP (op_el_mul, octave_matrix, octave_matrix, el_mul);
+  INSTALL_BINOP (op_el_div, octave_matrix, octave_matrix, el_div);
+  INSTALL_BINOP (op_el_pow, octave_matrix, octave_matrix, el_pow);
+  INSTALL_BINOP (op_el_ldiv, octave_matrix, octave_matrix, el_ldiv);
+  INSTALL_BINOP (op_el_and, octave_matrix, octave_matrix, el_and);
+  INSTALL_BINOP (op_el_or, octave_matrix, octave_matrix, el_or);
 
-  INSTALL_ASSIGNOP (asn_eq, octave_matrix, octave_matrix, assign);
+  INSTALL_ASSIGNOP (op_asn_eq, octave_matrix, octave_matrix, assign);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-m-s.cc b/src/OPERATORS/op-m-s.cc
--- a/src/OPERATORS/op-m-s.cc
+++ b/src/OPERATORS/op-m-s.cc
@@ -95,35 +95,35 @@ DEFBINOP (el_ldiv, matrix, scalar)
 DEFBINOP_FN (el_and, matrix, scalar, mx_el_and)
 DEFBINOP_FN (el_or, matrix, scalar, mx_el_or)
 
 DEFASSIGNOP_FN (assign, matrix, scalar, assign)
 
 void
 install_m_s_ops (void)
 {
-  INSTALL_BINOP (add, octave_matrix, octave_scalar, add);
-  INSTALL_BINOP (sub, octave_matrix, octave_scalar, sub);
-  INSTALL_BINOP (mul, octave_matrix, octave_scalar, mul);
-  INSTALL_BINOP (div, octave_matrix, octave_scalar, div);
-  INSTALL_BINOP (pow, octave_matrix, octave_scalar, pow);
-  INSTALL_BINOP (ldiv, octave_matrix, octave_scalar, ldiv);
-  INSTALL_BINOP (lt, octave_matrix, octave_scalar, lt);
-  INSTALL_BINOP (le, octave_matrix, octave_scalar, le);
-  INSTALL_BINOP (eq, octave_matrix, octave_scalar, eq);
-  INSTALL_BINOP (ge, octave_matrix, octave_scalar, ge);
-  INSTALL_BINOP (gt, octave_matrix, octave_scalar, gt);
-  INSTALL_BINOP (ne, octave_matrix, octave_scalar, ne);
-  INSTALL_BINOP (el_mul, octave_matrix, octave_scalar, el_mul);
-  INSTALL_BINOP (el_div, octave_matrix, octave_scalar, el_div);
-  INSTALL_BINOP (el_pow, octave_matrix, octave_scalar, el_pow);
-  INSTALL_BINOP (el_ldiv, octave_matrix, octave_scalar, el_ldiv);
-  INSTALL_BINOP (el_and, octave_matrix, octave_scalar, el_and);
-  INSTALL_BINOP (el_or, octave_matrix, octave_scalar, el_or);
+  INSTALL_BINOP (op_add, octave_matrix, octave_scalar, add);
+  INSTALL_BINOP (op_sub, octave_matrix, octave_scalar, sub);
+  INSTALL_BINOP (op_mul, octave_matrix, octave_scalar, mul);
+  INSTALL_BINOP (op_div, octave_matrix, octave_scalar, div);
+  INSTALL_BINOP (op_pow, octave_matrix, octave_scalar, pow);
+  INSTALL_BINOP (op_ldiv, octave_matrix, octave_scalar, ldiv);
+  INSTALL_BINOP (op_lt, octave_matrix, octave_scalar, lt);
+  INSTALL_BINOP (op_le, octave_matrix, octave_scalar, le);
+  INSTALL_BINOP (op_eq, octave_matrix, octave_scalar, eq);
+  INSTALL_BINOP (op_ge, octave_matrix, octave_scalar, ge);
+  INSTALL_BINOP (op_gt, octave_matrix, octave_scalar, gt);
+  INSTALL_BINOP (op_ne, octave_matrix, octave_scalar, ne);
+  INSTALL_BINOP (op_el_mul, octave_matrix, octave_scalar, el_mul);
+  INSTALL_BINOP (op_el_div, octave_matrix, octave_scalar, el_div);
+  INSTALL_BINOP (op_el_pow, octave_matrix, octave_scalar, el_pow);
+  INSTALL_BINOP (op_el_ldiv, octave_matrix, octave_scalar, el_ldiv);
+  INSTALL_BINOP (op_el_and, octave_matrix, octave_scalar, el_and);
+  INSTALL_BINOP (op_el_or, octave_matrix, octave_scalar, el_or);
 
-  INSTALL_ASSIGNOP (asn_eq, octave_matrix, octave_scalar, assign);
+  INSTALL_ASSIGNOP (op_asn_eq, octave_matrix, octave_scalar, assign);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-range.cc b/src/OPERATORS/op-range.cc
--- a/src/OPERATORS/op-range.cc
+++ b/src/OPERATORS/op-range.cc
@@ -50,19 +50,19 @@ DEFUNOP (transpose, range)
   CAST_UNOP_ARG (const octave_range&);
 
   return octave_value (v.matrix_value().transpose ());
 }
 
 void
 install_range_ops (void)
 {
-  INSTALL_UNOP (not, octave_range, not);
-  INSTALL_UNOP (uminus, octave_range, uminus);
-  INSTALL_UNOP (transpose, octave_range, transpose);
-  INSTALL_UNOP (hermitian, octave_range, transpose);
+  INSTALL_UNOP (op_not, octave_range, not);
+  INSTALL_UNOP (op_uminus, octave_range, uminus);
+  INSTALL_UNOP (op_transpose, octave_range, transpose);
+  INSTALL_UNOP (op_hermitian, octave_range, transpose);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-s-cm.cc b/src/OPERATORS/op-s-cm.cc
--- a/src/OPERATORS/op-s-cm.cc
+++ b/src/OPERATORS/op-s-cm.cc
@@ -107,37 +107,37 @@ DEFCONV (complex_matrix_conv, scalar, co
   CAST_CONV_ARG (const octave_scalar&);
 
   return new octave_complex_matrix (ComplexMatrix (v.matrix_value ()));
 }
 
 void
 install_s_cm_ops (void)
 {
-  INSTALL_BINOP (add, octave_scalar, octave_complex_matrix, add);
-  INSTALL_BINOP (sub, octave_scalar, octave_complex_matrix, sub);
-  INSTALL_BINOP (mul, octave_scalar, octave_complex_matrix, mul);
-  INSTALL_BINOP (div, octave_scalar, octave_complex_matrix, div);
-  INSTALL_BINOP (pow, octave_scalar, octave_complex_matrix, pow);
-  INSTALL_BINOP (ldiv, octave_scalar, octave_complex_matrix, ldiv);
-  INSTALL_BINOP (lt, octave_scalar, octave_complex_matrix, lt);
-  INSTALL_BINOP (le, octave_scalar, octave_complex_matrix, le);
-  INSTALL_BINOP (eq, octave_scalar, octave_complex_matrix, eq);
-  INSTALL_BINOP (ge, octave_scalar, octave_complex_matrix, ge);
-  INSTALL_BINOP (gt, octave_scalar, octave_complex_matrix, gt);
-  INSTALL_BINOP (ne, octave_scalar, octave_complex_matrix, ne);
-  INSTALL_BINOP (el_mul, octave_scalar, octave_complex_matrix, el_mul);
-  INSTALL_BINOP (el_div, octave_scalar, octave_complex_matrix, el_div);
-  INSTALL_BINOP (el_pow, octave_scalar, octave_complex_matrix, el_pow);
-  INSTALL_BINOP (el_ldiv, octave_scalar, octave_complex_matrix, el_ldiv);
-  INSTALL_BINOP (el_and, octave_scalar, octave_complex_matrix, el_and);
-  INSTALL_BINOP (el_or, octave_scalar, octave_complex_matrix, el_or);
+  INSTALL_BINOP (op_add, octave_scalar, octave_complex_matrix, add);
+  INSTALL_BINOP (op_sub, octave_scalar, octave_complex_matrix, sub);
+  INSTALL_BINOP (op_mul, octave_scalar, octave_complex_matrix, mul);
+  INSTALL_BINOP (op_div, octave_scalar, octave_complex_matrix, div);
+  INSTALL_BINOP (op_pow, octave_scalar, octave_complex_matrix, pow);
+  INSTALL_BINOP (op_ldiv, octave_scalar, octave_complex_matrix, ldiv);
+  INSTALL_BINOP (op_lt, octave_scalar, octave_complex_matrix, lt);
+  INSTALL_BINOP (op_le, octave_scalar, octave_complex_matrix, le);
+  INSTALL_BINOP (op_eq, octave_scalar, octave_complex_matrix, eq);
+  INSTALL_BINOP (op_ge, octave_scalar, octave_complex_matrix, ge);
+  INSTALL_BINOP (op_gt, octave_scalar, octave_complex_matrix, gt);
+  INSTALL_BINOP (op_ne, octave_scalar, octave_complex_matrix, ne);
+  INSTALL_BINOP (op_el_mul, octave_scalar, octave_complex_matrix, el_mul);
+  INSTALL_BINOP (op_el_div, octave_scalar, octave_complex_matrix, el_div);
+  INSTALL_BINOP (op_el_pow, octave_scalar, octave_complex_matrix, el_pow);
+  INSTALL_BINOP (op_el_ldiv, octave_scalar, octave_complex_matrix, el_ldiv);
+  INSTALL_BINOP (op_el_and, octave_scalar, octave_complex_matrix, el_and);
+  INSTALL_BINOP (op_el_or, octave_scalar, octave_complex_matrix, el_or);
 
   INSTALL_ASSIGNCONV (octave_scalar, octave_complex_matrix, octave_complex_matrix);
 
-  INSTALL_WIDENOP (octave_scalar, octave_complex_matrix, complex_matrix_conv);
+  INSTALL_WIDENOP (op_octave_scalar, octave_complex_matrix, complex_matrix_conv);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-s-cs.cc b/src/OPERATORS/op-s-cs.cc
--- a/src/OPERATORS/op-s-cs.cc
+++ b/src/OPERATORS/op-s-cs.cc
@@ -159,37 +159,37 @@ DEFCONV (complex_matrix_conv, scalar, co
   CAST_CONV_ARG (const octave_scalar&);
 
   return new octave_complex_matrix (v.complex_matrix_value ());
 }
 
 void
 install_s_cs_ops (void)
 {
-  INSTALL_BINOP (add, octave_scalar, octave_complex, add);
-  INSTALL_BINOP (sub, octave_scalar, octave_complex, sub);
-  INSTALL_BINOP (mul, octave_scalar, octave_complex, mul);
-  INSTALL_BINOP (div, octave_scalar, octave_complex, div);
-  INSTALL_BINOP (pow, octave_scalar, octave_complex, pow);
-  INSTALL_BINOP (ldiv, octave_scalar, octave_complex, ldiv);
-  INSTALL_BINOP (lt, octave_scalar, octave_complex, lt);
-  INSTALL_BINOP (le, octave_scalar, octave_complex, le);
-  INSTALL_BINOP (eq, octave_scalar, octave_complex, eq);
-  INSTALL_BINOP (ge, octave_scalar, octave_complex, ge);
-  INSTALL_BINOP (gt, octave_scalar, octave_complex, gt);
-  INSTALL_BINOP (ne, octave_scalar, octave_complex, ne);
-  INSTALL_BINOP (el_mul, octave_scalar, octave_complex, el_mul);
-  INSTALL_BINOP (el_div, octave_scalar, octave_complex, el_div);
-  INSTALL_BINOP (el_pow, octave_scalar, octave_complex, el_pow);
-  INSTALL_BINOP (el_ldiv, octave_scalar, octave_complex, el_ldiv);
-  INSTALL_BINOP (el_and, octave_scalar, octave_complex, el_and);
-  INSTALL_BINOP (el_or, octave_scalar, octave_complex, el_or);
+  INSTALL_BINOP (op_add, octave_scalar, octave_complex, add);
+  INSTALL_BINOP (op_sub, octave_scalar, octave_complex, sub);
+  INSTALL_BINOP (op_mul, octave_scalar, octave_complex, mul);
+  INSTALL_BINOP (op_div, octave_scalar, octave_complex, div);
+  INSTALL_BINOP (op_pow, octave_scalar, octave_complex, pow);
+  INSTALL_BINOP (op_ldiv, octave_scalar, octave_complex, ldiv);
+  INSTALL_BINOP (op_lt, octave_scalar, octave_complex, lt);
+  INSTALL_BINOP (op_le, octave_scalar, octave_complex, le);
+  INSTALL_BINOP (op_eq, octave_scalar, octave_complex, eq);
+  INSTALL_BINOP (op_ge, octave_scalar, octave_complex, ge);
+  INSTALL_BINOP (op_gt, octave_scalar, octave_complex, gt);
+  INSTALL_BINOP (op_ne, octave_scalar, octave_complex, ne);
+  INSTALL_BINOP (op_el_mul, octave_scalar, octave_complex, el_mul);
+  INSTALL_BINOP (op_el_div, octave_scalar, octave_complex, el_div);
+  INSTALL_BINOP (op_el_pow, octave_scalar, octave_complex, el_pow);
+  INSTALL_BINOP (op_el_ldiv, octave_scalar, octave_complex, el_ldiv);
+  INSTALL_BINOP (op_el_and, octave_scalar, octave_complex, el_and);
+  INSTALL_BINOP (op_el_or, octave_scalar, octave_complex, el_or);
 
   INSTALL_ASSIGNCONV (octave_scalar, octave_complex, octave_complex_matrix);
 
-  INSTALL_WIDENOP (octave_scalar, octave_complex_matrix, complex_matrix_conv);
+  INSTALL_WIDENOP (op_octave_scalar, octave_complex_matrix, complex_matrix_conv);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-s-m.cc b/src/OPERATORS/op-s-m.cc
--- a/src/OPERATORS/op-s-m.cc
+++ b/src/OPERATORS/op-s-m.cc
@@ -93,37 +93,37 @@ DEFCONV (matrix_conv, scalar, matrix)
   CAST_CONV_ARG (const octave_scalar&);
 
   return new octave_matrix (v.matrix_value ());
 }
 
 void
 install_s_m_ops (void)
 {
-  INSTALL_BINOP (add, octave_scalar, octave_matrix, add);
-  INSTALL_BINOP (sub, octave_scalar, octave_matrix, sub);
-  INSTALL_BINOP (mul, octave_scalar, octave_matrix, mul);
-  INSTALL_BINOP (div, octave_scalar, octave_matrix, div);
-  INSTALL_BINOP (pow, octave_scalar, octave_matrix, pow);
-  INSTALL_BINOP (ldiv, octave_scalar, octave_matrix, ldiv);
-  INSTALL_BINOP (lt, octave_scalar, octave_matrix, lt);
-  INSTALL_BINOP (le, octave_scalar, octave_matrix, le);
-  INSTALL_BINOP (eq, octave_scalar, octave_matrix, eq);
-  INSTALL_BINOP (ge, octave_scalar, octave_matrix, ge);
-  INSTALL_BINOP (gt, octave_scalar, octave_matrix, gt);
-  INSTALL_BINOP (ne, octave_scalar, octave_matrix, ne);
-  INSTALL_BINOP (el_mul, octave_scalar, octave_matrix, el_mul);
-  INSTALL_BINOP (el_div, octave_scalar, octave_matrix, el_div);
-  INSTALL_BINOP (el_pow, octave_scalar, octave_matrix, el_pow);
-  INSTALL_BINOP (el_ldiv, octave_scalar, octave_matrix, el_ldiv);
-  INSTALL_BINOP (el_and, octave_scalar, octave_matrix, el_and);
-  INSTALL_BINOP (el_or, octave_scalar, octave_matrix, el_or);
+  INSTALL_BINOP (op_add, octave_scalar, octave_matrix, add);
+  INSTALL_BINOP (op_sub, octave_scalar, octave_matrix, sub);
+  INSTALL_BINOP (op_mul, octave_scalar, octave_matrix, mul);
+  INSTALL_BINOP (op_div, octave_scalar, octave_matrix, div);
+  INSTALL_BINOP (op_pow, octave_scalar, octave_matrix, pow);
+  INSTALL_BINOP (op_ldiv, octave_scalar, octave_matrix, ldiv);
+  INSTALL_BINOP (op_lt, octave_scalar, octave_matrix, lt);
+  INSTALL_BINOP (op_le, octave_scalar, octave_matrix, le);
+  INSTALL_BINOP (op_eq, octave_scalar, octave_matrix, eq);
+  INSTALL_BINOP (op_ge, octave_scalar, octave_matrix, ge);
+  INSTALL_BINOP (op_gt, octave_scalar, octave_matrix, gt);
+  INSTALL_BINOP (op_ne, octave_scalar, octave_matrix, ne);
+  INSTALL_BINOP (op_el_mul, octave_scalar, octave_matrix, el_mul);
+  INSTALL_BINOP (op_el_div, octave_scalar, octave_matrix, el_div);
+  INSTALL_BINOP (op_el_pow, octave_scalar, octave_matrix, el_pow);
+  INSTALL_BINOP (op_el_ldiv, octave_scalar, octave_matrix, el_ldiv);
+  INSTALL_BINOP (op_el_and, octave_scalar, octave_matrix, el_and);
+  INSTALL_BINOP (op_el_or, octave_scalar, octave_matrix, el_or);
 
   INSTALL_ASSIGNCONV (octave_scalar, octave_matrix, octave_matrix);
 
-  INSTALL_WIDENOP (octave_scalar, octave_matrix, matrix_conv);
+  INSTALL_WIDENOP (op_octave_scalar, octave_matrix, matrix_conv);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-s-s.cc b/src/OPERATORS/op-s-s.cc
--- a/src/OPERATORS/op-s-s.cc
+++ b/src/OPERATORS/op-s-s.cc
@@ -137,45 +137,45 @@ DEFCONV (matrix_conv, scalar, matrix)
   CAST_CONV_ARG (const octave_scalar&);
 
   return new octave_matrix (v.matrix_value ());
 }
 
 void
 install_s_s_ops (void)
 {
-  INSTALL_UNOP (not, octave_scalar, not);
-  INSTALL_UNOP (uminus, octave_scalar, uminus);
-  INSTALL_UNOP (transpose, octave_scalar, transpose);
-  INSTALL_UNOP (hermitian, octave_scalar, hermitian);
+  INSTALL_UNOP (op_not, octave_scalar, not);
+  INSTALL_UNOP (op_uminus, octave_scalar, uminus);
+  INSTALL_UNOP (op_transpose, octave_scalar, transpose);
+  INSTALL_UNOP (op_hermitian, octave_scalar, hermitian);
 
-  INSTALL_NCUNOP (incr, octave_scalar, incr);
-  INSTALL_NCUNOP (decr, octave_scalar, decr);
+  INSTALL_NCUNOP (op_incr, octave_scalar, incr);
+  INSTALL_NCUNOP (op_decr, octave_scalar, decr);
 
-  INSTALL_BINOP (add, octave_scalar, octave_scalar, add);
-  INSTALL_BINOP (sub, octave_scalar, octave_scalar, sub);
-  INSTALL_BINOP (mul, octave_scalar, octave_scalar, mul);
-  INSTALL_BINOP (div, octave_scalar, octave_scalar, div);
-  INSTALL_BINOP (pow, octave_scalar, octave_scalar, pow);
-  INSTALL_BINOP (ldiv, octave_scalar, octave_scalar, ldiv);
-  INSTALL_BINOP (lt, octave_scalar, octave_scalar, lt);
-  INSTALL_BINOP (le, octave_scalar, octave_scalar, le);
-  INSTALL_BINOP (eq, octave_scalar, octave_scalar, eq);
-  INSTALL_BINOP (ge, octave_scalar, octave_scalar, ge);
-  INSTALL_BINOP (gt, octave_scalar, octave_scalar, gt);
-  INSTALL_BINOP (ne, octave_scalar, octave_scalar, ne);
-  INSTALL_BINOP (el_mul, octave_scalar, octave_scalar, el_mul);
-  INSTALL_BINOP (el_div, octave_scalar, octave_scalar, el_div);
-  INSTALL_BINOP (el_pow, octave_scalar, octave_scalar, el_pow);
-  INSTALL_BINOP (el_ldiv, octave_scalar, octave_scalar, el_ldiv);
-  INSTALL_BINOP (el_and, octave_scalar, octave_scalar, el_and);
-  INSTALL_BINOP (el_or, octave_scalar, octave_scalar, el_or);
+  INSTALL_BINOP (op_add, octave_scalar, octave_scalar, add);
+  INSTALL_BINOP (op_sub, octave_scalar, octave_scalar, sub);
+  INSTALL_BINOP (op_mul, octave_scalar, octave_scalar, mul);
+  INSTALL_BINOP (op_div, octave_scalar, octave_scalar, div);
+  INSTALL_BINOP (op_pow, octave_scalar, octave_scalar, pow);
+  INSTALL_BINOP (op_ldiv, octave_scalar, octave_scalar, ldiv);
+  INSTALL_BINOP (op_lt, octave_scalar, octave_scalar, lt);
+  INSTALL_BINOP (op_le, octave_scalar, octave_scalar, le);
+  INSTALL_BINOP (op_eq, octave_scalar, octave_scalar, eq);
+  INSTALL_BINOP (op_ge, octave_scalar, octave_scalar, ge);
+  INSTALL_BINOP (op_gt, octave_scalar, octave_scalar, gt);
+  INSTALL_BINOP (op_ne, octave_scalar, octave_scalar, ne);
+  INSTALL_BINOP (op_el_mul, octave_scalar, octave_scalar, el_mul);
+  INSTALL_BINOP (op_el_div, octave_scalar, octave_scalar, el_div);
+  INSTALL_BINOP (op_el_pow, octave_scalar, octave_scalar, el_pow);
+  INSTALL_BINOP (op_el_ldiv, octave_scalar, octave_scalar, el_ldiv);
+  INSTALL_BINOP (op_el_and, octave_scalar, octave_scalar, el_and);
+  INSTALL_BINOP (op_el_or, octave_scalar, octave_scalar, el_or);
 
   INSTALL_ASSIGNCONV (octave_scalar, octave_scalar, octave_matrix);
 
-  INSTALL_WIDENOP (octave_scalar, octave_matrix, matrix_conv);
+  INSTALL_WIDENOP (op_octave_scalar, octave_matrix, matrix_conv);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-str-str.cc b/src/OPERATORS/op-str-str.cc
--- a/src/OPERATORS/op-str-str.cc
+++ b/src/OPERATORS/op-str-str.cc
@@ -108,22 +108,22 @@ DEFASSIGNOP (assign, char_matrix_str, ch
 
   v1.assign (idx, v2.char_matrix_value ());
   return octave_value ();
 }
 
 void
 install_str_str_ops (void)
 {
-  INSTALL_UNOP (transpose, octave_char_matrix_str, transpose);
-  INSTALL_UNOP (hermitian, octave_char_matrix_str, transpose);
+  INSTALL_UNOP (op_transpose, octave_char_matrix_str, transpose);
+  INSTALL_UNOP (op_hermitian, octave_char_matrix_str, transpose);
 
-  INSTALL_BINOP (eq, octave_char_matrix_str, octave_char_matrix_str, eq);
-  INSTALL_BINOP (ne, octave_char_matrix_str, octave_char_matrix_str, ne);
+  INSTALL_BINOP (op_eq, octave_char_matrix_str, octave_char_matrix_str, eq);
+  INSTALL_BINOP (op_ne, octave_char_matrix_str, octave_char_matrix_str, ne);
 
-  INSTALL_ASSIGNOP (asn_eq, octave_char_matrix_str, octave_char_matrix_str, assign);
+  INSTALL_ASSIGNOP (op_asn_eq, octave_char_matrix_str, octave_char_matrix_str, assign);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -168,17 +168,17 @@ from system to system.\n\
     return retval;
 
   std::ostrstream ls_buf;
 
   ls_buf << "ls -C ";
   for (int i = 1; i < argc; i++)
     ls_buf << file_ops::tilde_expand (argv[i]) << " ";
 
-  ls_buf << ends;
+  ls_buf << std::ends;
   char *ls_command = ls_buf.str ();
 
   iprocstream *cmd = new iprocstream (ls_command);
 
   delete [] ls_command;
 
   unwind_protect::add (cleanup_iprocstream, cmd);
 
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -70,35 +70,35 @@ vwarning (const char *name, const char *
     {
       octave_diary << name << ": ";
       std::cerr << name << ": ";
     }
 
   octave_diary.vform (fmt, args);
   std::cerr.vform (fmt, args);
 
-  octave_diary << endl;
-  std::cerr << endl;
+  octave_diary << std::endl;
+  std::cerr << std::endl;
 }
 
 static void
 verror (const char *name, const char *fmt, va_list args)
 {
   flush_octave_stdout ();
 
   bool to_beep_or_not_to_beep_p = Vbeep_on_error && ! error_state;
 
   std::ostrstream output_buf;
 
   if (to_beep_or_not_to_beep_p)
     output_buf << "\a";
   if (name)
     output_buf << name << ": ";
   output_buf.vform (fmt, args);
-  output_buf << endl << ends;
+  output_buf << std::endl << std::ends;
 
   char *msg = output_buf.str ();
 
   if (buffer_error_messages)
     {
       char *ptr = msg;
 
       if (! error_message_buffer)
@@ -394,17 +394,17 @@ to check for the proper number of argume
   return handle_message (usage, "unknown", args);
 }
 
 void
 bind_global_error_variable (void)
 {
   if (error_message_buffer)
     {
-      *error_message_buffer << ends;
+      *error_message_buffer << std::ends;
 
       char *error_text = error_message_buffer->str ();
 
       bind_builtin_constant ("__error_text__", error_text, true);
 
       delete [] error_text;
 
       delete error_message_buffer;
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -516,17 +516,17 @@ try_info (const std::string& nm)
     {
       directory_name.resize (pos + 1);
       cmd_buf << " --directory " << directory_name;
     }
 
   if (nm.length () > 0)
     cmd_buf << " --index-search " << nm;
 
-  cmd_buf << ends;
+  cmd_buf << std::ends;
 
   cmd_str = cmd_buf.str ();
 
   volatile octave_interrupt_handler old_interrupt_handler
     = octave_ignore_interrupts ();
 
   status = system (cmd_str);
 
@@ -616,17 +616,17 @@ display_help_text (std::ostream& os, con
 	  << " -D \"TARGETHOSTTYPE " << CANONICAL_HOST_TYPE << "\""
 	  << " --fill-column " << cols
 	  << " --no-warn"
 	  << " --no-validate"
 	  << " --no-headers"
 	  << " --force"
 	  << " --output " << tmp_file_name
 	  << " > /dev/null 2>&1"
-	  << ends;
+	  << std::ends;
 
       char *cmd = buf.str ();
 
       oprocstream filter (cmd);
 
       delete [] cmd;
 
       if (filter)
@@ -808,17 +808,17 @@ do_type (std::ostream& os, const std::st
   if (sym_rec && sym_rec->is_defined ())
     sym_rec->type (os, pr_type_info, quiet, pr_orig_txt);
   else
     {
       std::string ff = fcn_file_in_path (name);
 
       if (! ff.empty ())
 	{
-	  std::ifstream fs (ff.c_str (), ios::in);
+	  std::ifstream fs (ff.c_str (), std::ios::in);
 
 	  if (fs)
 	    {
 	      if (pr_type_info && ! quiet)
 		os << name << " is the script file: " << ff << "\n\n";
 
 	      char ch;
 
@@ -894,17 +894,17 @@ representation.  This problem may be fix
 		    do_type (output_buf, id, false, quiet, pr_orig_txt);
 
 		  if (error_state)
 		    goto abort;
 		}
 
 	      if (nargout == 0)
 		{
-		  output_buf << ends;
+		  output_buf << std::ends;
 
 		  char *s = output_buf.str ();
 
 		  retval = s;
 
 		  delete [] s;
 		}
 	    }
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1636,17 +1636,17 @@ have_continuation (bool trailing_comment
 	  break;
 	}
     }
 
   unput (c);
   return false;
 
 cleanup:
-  buf << ends;
+  buf << std::ends;
   char *s = buf.str ();
   if (s)
     {
       int len = strlen (s);
       while (len--)
 	unput (s[len]);
     }
   delete [] s;
@@ -1746,17 +1746,17 @@ handle_string (char delim, int text_styl
 	  else
 	    {
 	      c = yyinput ();
 	      if (c == delim)
 		buf << (char) c;
 	      else
 		{
 		  unput (c);
-		  buf << ends;
+		  buf << std::ends;
 		  char *t = buf.str ();
 		  std::string s = do_string_escapes (t);
 		  delete [] t;
 
 		  if (text_style && lexer_flags.doing_set)
 		    {
 		      s = std::string (1, delim) + s + std::string (1, delim);
 		    }
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -292,34 +292,34 @@ extract_keyword (std::istream& is, const
 	    ; // Skip whitespace and comment characters.
 
 	  if (isalpha (c))
 	    buf << c;
 
 	  while (is.get (c) && isalpha (c))
 	    buf << c;
 
-	  buf << ends;
+	  buf << std::ends;
 	  char *tmp = buf.str ();
 	  int match = (strncmp (tmp, keyword, strlen (keyword)) == 0);
 	  delete [] tmp;
 
 	  if (match)
 	    {
 	      std::ostrstream value;
 	      while (is.get (c) && (c == ' ' || c == '\t' || c == ':'))
 		; // Skip whitespace and the colon.
 
 	      if (c != '\n')
 		{
 		  value << c;
 		  while (is.get (c) && c != '\n')
 		    value << c;
 		}
-	      value << ends;
+	      value << std::ends;
 	      retval = value.str ();
 	      break;
 	    }
 	}
     }
 
   if (retval)
     {
@@ -360,17 +360,17 @@ extract_keyword (std::istream& is, const
 	    ; // Skip whitespace and comment characters.
 
 	  if (isalpha (c))
 	    buf << c;
 
 	  while (is.get (c) && isalpha (c))
 	    buf << c;
 
-	  buf << ends;
+	  buf << std::ends;
 	  char *tmp = buf.str ();
 	  int match = (strncmp (tmp, keyword, strlen (keyword)) == 0);
 	  delete [] tmp;
 
 	  if (match)
 	    {
 	      while (is.get (c) && (c == ' ' || c == '\t' || c == ':'))
 		; // Skip whitespace and the colon.
@@ -1031,17 +1031,17 @@ get_lines_and_columns (std::istream& is,
 		   filename.c_str (), file_line_number);
 	}
     }
 
   if (nr == 0 || nc == 0)
     error ("load: file `%s' seems to be empty!", filename.c_str ());
 
   is.clear ();
-  is.seekg (pos, ios::beg);
+  is.seekg (pos, std::ios::beg);
 }
 
 // Extract a matrix from a file of numbers only.
 //
 // Comments are not allowed.  The file should only have numeric values.
 //
 // Reads the file twice.  Once to find the number of rows and columns,
 // and once to extract the matrix.
@@ -1077,17 +1077,17 @@ read_mat_ascii_data (std::istream& is, c
 
       get_lines_and_columns (is, filename, nr, nc);
 
       if (! error_state && nr > 0 && nc > 0)
 	{
 	  Matrix tmp (nr, nc);
 
 	  if (nr < 1 || nc < 1)
-	    is.clear (ios::badbit);
+	    is.clear (std::ios::badbit);
 	  else
 	    {
 	      double d;
 	      for (int i = 0; i < nr; i++)
 		{
 		  std::string buf = get_mat_data_input_line (is);
 
 		  std::istrstream tmp_stream (buf.c_str ());
@@ -1510,28 +1510,28 @@ get_file_format (const std::string& fnam
   oct_mach_info::float_format flt_fmt = oct_mach_info::unknown;
 
   bool swap = false;
 
   if (read_binary_file_header (file, swap, flt_fmt, true) == 0)
     retval = LS_BINARY;
   else
     {
-      file.seekg (0, ios::beg);
+      file.seekg (0, std::ios::beg);
 
       FOUR_BYTE_INT mopt, nr, nc, imag, len;
 
       int err = read_mat_file_header (file, swap, mopt, nr, nc, imag, len, 1);
 
       if (! err)
 	retval = LS_MAT_BINARY;
       else
 	{
 	  file.clear ();
-	  file.seekg (0, ios::beg);
+	  file.seekg (0, std::ios::beg);
 
 	  char *tmp = extract_keyword (file, "name");
 
 	  if (tmp)
 	    {
 	      retval = LS_ASCII;
 
 	      delete [] tmp;
@@ -1626,19 +1626,19 @@ do_load (std::istream& stream, const std
 		      if (verbose)
 			{
 			  if (count == 1)
 			    output_buf
 			      << "type               rows   cols   name\n"
 			      << "====               ====   ====   ====\n";
 
 			  output_buf
-			    << setiosflags (ios::left)
+			    << setiosflags (std::ios::left)
 			    << setw (16) << tc.type_name () . c_str ()
-			    << setiosflags (ios::right)
+			    << setiosflags (std::ios::right)
 			    << setw (7) << tc.rows ()
 			    << setw (7) << tc.columns ()
 			    << "   ";
 			}
 		      output_buf << name << "\n";
 		    }
 		  else
 		    {
@@ -1667,17 +1667,17 @@ do_load (std::istream& stream, const std
 	  delete [] doc;
 
 	  break;
 	}
     }
 
   if (list_only && count)
     {
-      output_buf << ends;
+      output_buf << std::ends;
 
       char *msg = output_buf.str ();
 
       if (nargout > 0)
 	retval = msg;
       else
 	octave_stdout << msg;
 
@@ -1820,19 +1820,19 @@ Force Octave to assume the file is in @s
 
       if (format == LS_UNKNOWN)
 	format = get_file_format (fname, orig_fname);
 
       if (format != LS_UNKNOWN)
 	{
 	  i++;
 
-	  unsigned mode = ios::in;
+	  unsigned mode = std::ios::in;
 	  if (format == LS_BINARY || format == LS_MAT_BINARY)
-	    mode |= ios::bin;
+	    mode |= std::ios::bin;
 
 	  std::ifstream file (fname.c_str (), mode);
 
 	  if (file)
 	    {
 	      if (format == LS_BINARY)
 		{
 		  if (read_binary_file_header (file, swap, flt_fmt) < 0)
@@ -2534,19 +2534,19 @@ save_user_variables (void)
       // XXX FIXME XXX -- should choose better file name?
 
       const char *fname = "octave-core";
 
       message (0, "attempting to save variables to `%s'...", fname);
 
       load_save_format format = get_default_save_format ();
 
-      unsigned mode = ios::out|ios::trunc;
+      unsigned mode = std::ios::out|std::ios::trunc;
       if (format == LS_BINARY || format == LS_MAT_BINARY)
-	mode |= ios::bin;
+	mode |= std::ios::bin;
 
       std::ofstream file (fname, mode);
 
       if (file)
 	{
 	  save_vars (string_vector (), 0, 0, file, false, format, false, true);
 	  message (0, "save to `%s' complete", fname);
 	}
@@ -2701,28 +2701,28 @@ the file @file{data} in Octave's binary 
       return retval;
     }
   else
     {
       std::string fname = file_ops::tilde_expand (argv[i]);
 
       i++;
 
-      unsigned mode = ios::out;
+      unsigned mode = std::ios::out;
       if (format == LS_BINARY || format == LS_MAT_BINARY)
-	mode |= ios::bin;
-
-      mode |= append ? ios::ate : ios::trunc;
+	mode |= std::ios::bin;
+
+      mode |= append ? std::ios::ate : std::ios::trunc;
 
       std::ofstream file (fname.c_str (), mode);
 
       if (file)
 	{
 	  bool write_header_info
-	    = ((file.rdbuf ())->seekoff (0, ios::cur) == 0);
+	    = ((file.rdbuf ())->seekoff (0, std::ios::cur) == 0);
 
 	  save_vars (argv, i, argc, file, save_builtins, format,
 		     save_as_floats, write_header_info);
 	}
       else
 	{
 	  error ("save: couldn't open output file `%s'", fname.c_str ());
 	  return retval;
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -244,17 +244,17 @@ scanf_format_list::~scanf_format_list (v
 
 void
 scanf_format_list::add_elt_to_list (int width, bool discard, char type,
 				    char modifier, int& num_elts,
 				    const std::string& char_class)
 {
   if (buf)
     {
-      *buf << ends;
+      *buf << std::ends;
 
       char *text = buf->str ();
 
       if (text)
 	{
 	  if (*text)
 	    {
 	      scanf_format_elt *elt
@@ -639,17 +639,17 @@ printf_format_list::~printf_format_list 
 }
 
 void
 printf_format_list::add_elt_to_list (int args, char type, char modifier,
 				     int& num_elts)
 {
   if (buf)
     {
-      *buf << ends;
+      *buf << std::ends;
 
       char *text = buf->str ();
 
       if (text)
 	{
 	  if (*text)
 	    {
 	      printf_format_elt *elt
@@ -931,17 +931,17 @@ octave_base_stream::do_gets (int max_len
 	{
 	  err = true;
 	  std::string msg = fcn;
 	  msg.append (": at end of file");
 	  error (msg);
 	}
       else
 	{
-	  buf << ends;
+	  buf << std::ends;
 	  char *tmp = buf.str ();
 	  retval = tmp;
 	  delete [] tmp;
 	}
     }
   else
     {
       err = true;
@@ -1087,22 +1087,22 @@ do_scanf_conv (std::istream&, const char
 	  else \
 	    { \
 	      is.putback (c); \
 	      break; \
 	    } \
 	} \
  \
       if (i != n) \
-	is.setstate (ios::failbit); \
+	is.setstate (std::ios::failbit); \
     } \
   while (0)
 
 #define BEGIN_C_CONVERSION() \
-  is.unsetf (ios::skipws); \
+  is.unsetf (std::ios::skipws); \
  \
   int width = elt->width ? elt->width : 1; \
  \
   char *tmp = new char[width + 1]; \
  \
   int c = EOF; \
   int n = 0; \
  \
@@ -1141,17 +1141,17 @@ do_scanf_conv (std::istream&, const char
 	    buf << (char) c; \
  \
 	  while (is && (c = is.get ()) != EOF && ! isspace (c)) \
 	    buf << (char) c; \
  \
 	  if (isspace (c)) \
 	    is.putback (c); \
  \
-	  buf << ends; \
+	  buf << std::ends; \
  \
 	  tmp = buf.str (); \
 	} \
     } \
   while (0)
 
 // This format must match a nonempty sequence of characters.
 #define BEGIN_CHAR_CLASS_CONVERSION() \
@@ -1188,22 +1188,22 @@ do_scanf_conv (std::istream&, const char
 	      while (is && (c = is.get ()) != EOF \
 		     && char_class.find (c) == NPOS) \
 		buf << (char) c; \
 	    } \
  \
 	  if (c != EOF) \
 	    is.putback (c); \
  \
-	  buf << ends; \
+	  buf << std::ends; \
  \
 	  tmp = buf.str (); \
  \
 	  if (strlen (tmp) == 0) \
-	    is.setstate (ios::failbit); \
+	    is.setstate (std::ios::failbit); \
 	} \
     } \
   while (0)
 
 #define FINISH_CHARACTER_CONVERSION() \
   do \
     { \
       width = strlen (tmp); \
@@ -1318,17 +1318,17 @@ octave_base_stream::do_scanf (scanf_form
     }
 
   if (isp)
     {
       std::istream& is = *isp;
 
       const scanf_format_elt *elt = fmt_list.first ();
 
-      ios::fmtflags flags = is.flags ();
+      std::ios::fmtflags flags = is.flags ();
 
       for (;;)
 	{
 	  if (elt)
 	    {
 	      if (max_conv > 0 && conversion_count == max_conv)
 		{
 		  if (all_char_conv && one_elt_size_spec)
@@ -1503,18 +1503,18 @@ octave_base_stream::do_scanf (scanf_form
 		    {
 		      final_nr = data_index;
 		      final_nc = 1;
 		    }
 
 		  // If it looks like we have a matching failure, then
 		  // reset the failbit in the stream state.
 
-		  if (is.rdstate () & ios::failbit)
-		    is.clear (is.rdstate () & (~ios::failbit));
+		  if (is.rdstate () & std::ios::failbit)
+		    is.clear (is.rdstate () & (~std::ios::failbit));
 
 		  // XXX FIXME XXX -- is this the right thing to do?
 
 		  if (interactive && name () == "stdin")
 		    {
 		      is.clear ();
 
 		      // Skip to end of line.
@@ -1581,18 +1581,18 @@ octave_base_stream::scanf (const string&
 
 		is.scan (elt->text);
 
 		if (! is)
 		  {
 		    // If it looks like we have a matching failure, then
 		    // reset the failbit in the stream state.
 
-		    if (is.rdstate () & ios::failbit)
-		      is.clear (is.rdstate () & (~ios::failbit));
+		    if (is.rdstate () & std::ios::failbit)
+		      is.clear (is.rdstate () & (~std::ios::failbit));
 		    else
 		      error ("fscanf: read error");
 
 		    // XXX FIXME XXX -- is this the right thing to do?
 
 		    if (interactive && name () == "stdin")
 		      {
 			is.clear ();
@@ -1635,17 +1635,17 @@ octave_base_stream::do_oscanf (const sca
   bool quit = false;
 
   std::istream *isp = input_stream ();
 
   if (isp)
     {
       std::istream& is = *isp;
 
-      ios::fmtflags flags = is.flags ();
+      std::ios::fmtflags flags = is.flags ();
 
       if (elt)
 	{
 	  const char *fmt = elt->text;
 
 	  bool discard = elt->discard;
 
 	  switch (elt->type)
@@ -2362,17 +2362,17 @@ octave_base_stream::puts (const std::str
     invalid_operation ("fputs", "writing");
 
   return retval;
 }
 
 int
 octave_base_stream::rewind (void)
 {
-  return seek (0, ios::beg);
+  return seek (0, std::ios::beg);
 }
 
 // Return current error message for this stream.
 
 std::string
 octave_base_stream::error (bool clear_err, int& err_num)
 {
   err_num = fail ? -1 : 0;
@@ -2504,17 +2504,17 @@ octave_stream::gets (const octave_value&
     }
   else
     retval = gets (max_len, err);
 
   return retval;
 }
 
 int
-octave_stream::seek (streamoff offset, ios::seek_dir origin)
+octave_stream::seek (streamoff offset, std::ios::seek_dir origin)
 {
   int retval = -1;
 
   if (stream_ok ("fseek"))
     retval = rep->seek (offset, origin);
 
   return retval;
 }
@@ -2526,43 +2526,43 @@ octave_stream::seek (const octave_value&
   int retval = -1;
 
   int conv_err = 0;
 
   int xoffset = convert_to_valid_int (tc_offset, conv_err);
 
   if (! conv_err)
     {
-      ios::seek_dir origin = ios::beg;
+      std::ios::seek_dir origin = std::ios::beg;
 
       if (tc_origin.is_string ())
 	{
 	  std::string xorigin = tc_origin.string_value ();
 
 	  if (xorigin == "bof")
-	    origin = ios::beg;
+	    origin = std::ios::beg;
 	  else if (xorigin == "cof")
-	    origin = ios::cur;
+	    origin = std::ios::cur;
 	  else if (xorigin == "eof")
-	    origin = ios::end;
+	    origin = std::ios::end;
 	  else
 	    conv_err = -1;
 	}
       else
 	{
 	  int xorigin = convert_to_valid_int (tc_origin, conv_err);
 
 	  if (! conv_err)
 	    {
 	      if (xorigin == -1)
-		origin = ios::beg;
+		origin = std::ios::beg;
 	      else if (xorigin == 0)
-		origin = ios::cur;
+		origin = std::ios::cur;
 	      else if (xorigin == 1)
-		origin = ios::end;
+		origin = std::ios::end;
 	      else
 		conv_err = -1;
 	    }
 	}
 
       if (! conv_err)
 	retval = seek (xoffset, origin);
       else
@@ -2759,63 +2759,63 @@ octave_stream::float_format (void) const
 
 std::string
 octave_stream::mode_as_string (int mode)
 {
   std::string retval = "???";
 
   switch (mode)
     {
-    case ios::in:
+    case std::ios::in:
       retval = "r";
       break;
 
-    case ios::out:
-    case ios::out | ios::trunc:
+    case std::ios::out:
+    case std::ios::out | std::ios::trunc:
       retval = "w";
       break;
 
-    case ios::out | ios::app:
+    case std::ios::out | std::ios::app:
       retval = "a";
       break;
 
-    case ios::in | ios::out:
+    case std::ios::in | std::ios::out:
       retval = "r+";
       break;
 
-    case ios::in | ios::out | ios::trunc:
+    case std::ios::in | std::ios::out | std::ios::trunc:
       retval = "w+";
       break;
 
-    case ios::in | ios::out | ios::app:
+    case std::ios::in | std::ios::out | std::ios::app:
       retval = "a+";
       break;
 
-    case ios::in | ios::bin:
+    case std::ios::in | std::ios::bin:
       retval = "rb";
       break;
 
-    case ios::out | ios::bin:
-    case ios::out | ios::trunc | ios::bin:
+    case std::ios::out | std::ios::bin:
+    case std::ios::out | std::ios::trunc | std::ios::bin:
       retval = "wb";
       break;
 
-    case ios::out | ios::app | ios::bin:
+    case std::ios::out | std::ios::app | std::ios::bin:
       retval = "ab";
       break;
 
-    case ios::in | ios::out | ios::bin:
+    case std::ios::in | std::ios::out | std::ios::bin:
       retval = "r+b";
       break;
 
-    case ios::in | ios::out | ios::trunc | ios::bin:
+    case std::ios::in | std::ios::out | std::ios::trunc | std::ios::bin:
       retval = "w+b";
       break;
 
-    case ios::in | ios::out | ios::app | ios::bin:
+    case std::ios::in | std::ios::out | std::ios::app | std::ios::bin:
       retval = "a+b";
       break;
 
     default:
       break;
     }
 
   return retval;
@@ -3102,26 +3102,26 @@ octave_stream_list::do_list_open_files (
 	  std::string mode = octave_stream::mode_as_string (os.mode ());
 
 	  std::string arch =
 	    oct_mach_info::float_format_as_string (os.float_format ());
 
 	  std::string name = os.name ();
 
 	  buf << "  "
-	      << setiosflags (ios::right)
+	      << setiosflags (std::ios::right)
 	      << setw (4) << i << "     "
-	      << setiosflags (ios::left)
+	      << setiosflags (std::ios::left)
 	      << setw (3) << mode.c_str () << "  "
 	      << setw (9) << arch.c_str () << "  "
 	      << name << "\n";
 	}
     }
 
-  buf << "\n" << ends;
+  buf << "\n" << std::ends;
 
   char *tmp = buf.str ();
 
   retval = tmp;
 
   delete [] tmp;
 
   return retval;
diff --git a/src/oct-strstrm.h b/src/oct-strstrm.h
--- a/src/oct-strstrm.h
+++ b/src/oct-strstrm.h
@@ -28,24 +28,24 @@ Software Foundation, 59 Temple Place - S
 
 #include "oct-stream.h"
 
 class
 octave_base_strstream : public octave_base_stream
 {
 public:
 
-  octave_base_strstream (ios::openmode arg_md = ios::out,
+  octave_base_strstream (std::ios::openmode arg_md = std::ios::out,
 			 oct_mach_info::float_format flt_fmt =
 			 oct_mach_info::native)
     : octave_base_stream (arg_md, flt_fmt) { }
 
   // Position a stream at OFFSET relative to ORIGIN.
 
-  int seek (streamoff offset, ios::seek_dir origin);
+  int seek (streamoff offset, std::ios::seek_dir origin);
 
   // Return current stream position.
 
   long tell (void) const;
 
   // The name of the file.
 
   std::string name (void) const { return std::string (); }
@@ -70,33 +70,33 @@ private:
 };
 
 class
 octave_istrstream : public octave_base_strstream
 {
 public:
 
   octave_istrstream (const char *data,
-		     ios::openmode arg_md = ios::out,
+		     std::ios::openmode arg_md = std::ios::out,
 		     oct_mach_info::float_format flt_fmt =
 		     oct_mach_info::native)
     : octave_base_strstream (arg_md, flt_fmt), is (data) { }
 
   octave_istrstream (const std::string& data,
-		     ios::openmode arg_md = ios::out,
+		     std::ios::openmode arg_md = std::ios::out,
 		     oct_mach_info::float_format flt_fmt =
 		     oct_mach_info::native)
     : octave_base_strstream (arg_md, flt_fmt), is (data.c_str ()) { }
 
   static octave_stream
-  create (const char *data, ios::openmode arg_md = ios::out,
+  create (const char *data, std::ios::openmode arg_md = std::ios::out,
 	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
 
   static octave_stream
-  create (const std::string& data, ios::openmode arg_md = ios::out,
+  create (const std::string& data, std::ios::openmode arg_md = std::ios::out,
 	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const { return is.eof (); }
 
   std::istream *input_stream (void) { return &is; }
 
@@ -123,36 +123,36 @@ private:
   octave_istrstream& operator = (const octave_istrstream&);
 };
 
 class
 octave_ostrstream : public octave_base_strstream
 {
 public:
 
-  octave_ostrstream (ios::openmode arg_md = ios::out,
+  octave_ostrstream (std::ios::openmode arg_md = std::ios::out,
 		     oct_mach_info::float_format flt_fmt =
 		     oct_mach_info::native)
     : octave_base_strstream (arg_md, flt_fmt) { }
 
   static octave_stream
-  create (ios::openmode arg_md = ios::out,
+  create (std::ios::openmode arg_md = std::ios::out,
 	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const { return os.eof (); }
 
   std::istream *input_stream (void) { return 0; }
 
   std::ostream *output_stream (void) { return &os; }
 
   std::string str (void)
     {
-      os << ends;
+      os << std::ends;
       char *tmp = os.str ();
       std::string retval = tmp;
       delete [] tmp;
       return retval;
     }
 
   std::streambuf *rdbuf (void) { return os ? os.rdbuf () : 0; }
 
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -484,27 +484,27 @@ main (int argc, char **argv)
 #endif
 
   // These can come after command line args since none of them set any
   // defaults that might be changed by command line options.
 
   initialize_command_input ();
 
   if (! inhibit_startup_message)
-    std::cout << OCTAVE_STARTUP_MESSAGE "\n" << endl;
+    std::cout << OCTAVE_STARTUP_MESSAGE "\n" << std::endl;
 
   if (traditional)
     maximum_braindamage ();
 
   execute_startup_files ();
 
   command_history::read (false);
 
   if (! inhibit_startup_message && reading_startup_message_printed)
-    std::cout << endl;
+    std::cout << std::endl;
 
   // Avoid counting commands executed from startup files.
 
   command_editor::reset_current_command_number (1);
 
   // If there is an extra argument, see if it names a file to read.
   // Additional arguments are taken as command line options for the
   // script.
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -130,17 +130,17 @@ octave_cell::print_raw (std::ostream& os
 
       increment_indent_level ();
 
       for (int j = 0; j < nc; j++)
 	{
 	  for (int i = 0; i < nr; i++)
 	    {
 	      std::ostrstream buf;
-	      buf << "[" << i+1 << "," << j+1 << "]" << ends;
+	      buf << "[" << i+1 << "," << j+1 << "]" << std::ends;
 	      const char *nm = buf.str ();
 
 	      octave_value val = cell_val(i,j);
 
 	      val.print_with_name (os, nm);
 
 	      delete [] nm;
 	    }
diff --git a/src/ov-list.cc b/src/ov-list.cc
--- a/src/ov-list.cc
+++ b/src/ov-list.cc
@@ -101,17 +101,17 @@ octave_list::print_raw (std::ostream& os
       os << "(";
       newline (os);
 
       increment_indent_level ();
 
       for (int i = 0; i < n; i++)
 	{
 	  std::ostrstream buf;
-	  buf << "[" << i+1 << "]" << ends;
+	  buf << "[" << i+1 << "]" << std::ends;
 	  const char *nm = buf.str ();
 
 	  octave_value val = lst(i);
 
 	  val.print_with_name (os, nm);
 
 	  delete [] nm;
 	}
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1433,17 +1433,17 @@ yyerror (const char *s)
 	err_col = len;
 
       for (int i = 0; i < err_col + 3; i++)
 	output_buf << " ";
 
       output_buf << "^";
     }
 
-  output_buf << "\n" << ends;
+  output_buf << "\n" << std::ends;
 
   char *msg = output_buf.str ();
 
   parse_error ("%s", msg);
 
   delete [] msg;
 }
 
@@ -1627,17 +1627,17 @@ fold (tree_binary_expression *e)
 	  tree_constant *tc_retval = new tree_constant (tmp);
 
 	  std::ostrstream buf;
 
 	  tree_print_code tpc (buf);
 
 	  e->accept (tpc);
 
-	  buf << ends;
+	  buf << std::ends;
 
 	  char *s = buf.str ();
 
 	  tc_retval->stash_original_text (s);
 
 	  delete [] s;
 
 	  delete e;
@@ -1676,17 +1676,17 @@ fold (tree_unary_expression *e)
 	  tree_constant *tc_retval = new tree_constant (tmp);
 
 	  std::ostrstream buf;
 
 	  tree_print_code tpc (buf);
 
 	  e->accept (tpc);
 
-	  buf << ends;
+	  buf << std::ends;
 
 	  char *s = buf.str ();
 
 	  tc_retval->stash_original_text (s);
 
 	  delete [] s;
 
 	  delete e;
@@ -1734,17 +1734,17 @@ finish_colon_expression (tree_colon_expr
 		  tree_constant *tc_retval = new tree_constant (tmp);
 
 		  std::ostrstream buf;
 
 		  tree_print_code tpc (buf);
 
 		  e->accept (tpc);
 
-		  buf << ends;
+		  buf << std::ends;
 
 		  char *s = buf.str ();
 
 		  tc_retval->stash_original_text (s);
 
 		  delete [] s;
 
 		  delete e;
@@ -2566,17 +2566,17 @@ finish_matrix (tree_matrix *m)
 	  tree_constant *tc_retval = new tree_constant (tmp);
 
 	  std::ostrstream buf;
 
 	  tree_print_code tpc (buf);
 
 	  m->accept (tpc);
 
-	  buf << ends;
+	  buf << std::ends;
 
 	  char *s = buf.str ();
 
 	  tc_retval->stash_original_text (s);
 
 	  delete [] s;
 
 	  delete m;
@@ -2737,17 +2737,17 @@ parse_and_execute (const std::string& s,
 	  std::cout << "reading commands from " << s << " ... ";
 	  reading_startup_message_printed = true;
 	  std::cout.flush ();
 	}
 
       parse_and_execute (f);
 
       if (verbose)
-	std::cout << "done." << endl;
+	std::cout << "done." << std::endl;
     }
   else if (warn_for)
     error ("%s: unable to open file `%s'", warn_for, s.c_str ());
 
   unwind_protect::run_frame ("parse_and_execute_2");
 }
 
 static bool
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -970,18 +970,18 @@ pr_any_float (const char *fmt, std::ostr
 	  // interrupted before resetting the format flags and fill
 	  // character?
 
 	  oct_mach_info::float_format flt_fmt =
 	    oct_mach_info::native_float_format ();
 
 	  char ofill = os.fill ('0');
 
-	  ios::fmtflags oflags = os.setf (ios::right);
-	  os.setf (ios::hex, ios::basefield);
+	  std::ios::fmtflags oflags = os.setf (std::ios::right);
+	  os.setf (std::ios::hex, std::ios::basefield);
 
 	  if (hex_format > 1
 	      || flt_fmt == oct_mach_info::ieee_big_endian
 	      || flt_fmt == oct_mach_info::cray
 	      || flt_fmt == oct_mach_info::unknown)
 	    {
 	      for (size_t i = 0; i < sizeof (double); i++)
 		os << setw (2) << static_cast<int> (tmp.i[i]);
diff --git a/src/pt-decl.cc b/src/pt-decl.cc
--- a/src/pt-decl.cc
+++ b/src/pt-decl.cc
@@ -110,17 +110,17 @@ tree_global_command::do_init (tree_decl_
 
 	  octave_value init_val;
 
 	  if (expr)
 	    init_val = expr->rvalue ();
 	  else if (Vinitialize_global_variables)
 	    init_val = builtin_any_variable ("default_global_variable_value");
 
-	  ult.assign (octave_value::asn_eq, init_val);
+	  ult.assign (octave_value::op_asn_eq, init_val);
 	}
     }
 }
 
 void
 tree_global_command::eval (void)
 {
   if (init_list)
@@ -149,17 +149,17 @@ tree_static_command::do_init (tree_decl_
       tree_expression *expr = elt.expression ();
 
       if (expr)
 	{
 	  octave_value init_val = expr->rvalue ();
 
 	  octave_lvalue ult = id->lvalue ();
 
-	  ult.assign (octave_value::asn_eq, init_val);
+	  ult.assign (octave_value::op_asn_eq, init_val);
 	}
     }
 }
 
 void
 tree_static_command::eval (void)
 {
   // Static variables only need to be marked and initialized once.
diff --git a/src/pt-loop.cc b/src/pt-loop.cc
--- a/src/pt-loop.cc
+++ b/src/pt-loop.cc
@@ -168,17 +168,17 @@ tree_simple_for_command::~tree_simple_fo
 
 inline void
 tree_simple_for_command::do_for_loop_once (octave_lvalue& ult,
 					   const octave_value& rhs,
 					   bool& quit)
 {
   quit = false;
 
-  ult.assign (octave_value::asn_eq, rhs);
+  ult.assign (octave_value::op_asn_eq, rhs);
 
   if (! error_state)
     {
       if (list)
 	{
 	  list->eval ();
 
 	  if (error_state)
@@ -370,18 +370,18 @@ void
 tree_complex_for_command::do_for_loop_once (octave_lvalue &val_ref,
 					    octave_lvalue &key_ref,
 					    const octave_value& val,
 					    const octave_value& key,
 					    bool& quit)
 {
   quit = false;
 
-  val_ref.assign (octave_value::asn_eq, val);
-  key_ref.assign (octave_value::asn_eq, key);
+  val_ref.assign (octave_value::op_asn_eq, val);
+  key_ref.assign (octave_value::op_asn_eq, key);
 
   if (! error_state)
     {
       if (list)
 	{
 	  list->eval ();
 
 	  if (error_state)
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -65,17 +65,17 @@ tree_parameter_list::initialize_undefine
   for (Pix p = first (); p != 0; next (p))
     {
       tree_identifier *elt = this->operator () (p);
 
       if (! elt->is_defined ())
 	{
 	  octave_lvalue tmp = elt->lvalue ();
 
-	  tmp.assign (octave_value::asn_eq, val);
+	  tmp.assign (octave_value::op_asn_eq, val);
 	}
     }
 }
 
 void
 tree_parameter_list::define_from_arg_vector (const octave_value_list& args)
 {
   int nargin = args.length ();
@@ -96,20 +96,20 @@ tree_parameter_list::define_from_arg_vec
       if (i < nargin)
 	{
 	  if (args(i).is_defined () && args(i).is_magic_colon ())
 	    {
 	      ::error ("invalid use of colon in function argument list");
 	      return;
 	    }
 
-	  ref.assign (octave_value::asn_eq, args(i));
+	  ref.assign (octave_value::op_asn_eq, args(i));
 	}
       else
-	ref.assign (octave_value::asn_eq, octave_value ());
+	ref.assign (octave_value::op_asn_eq, octave_value ());
 
       next (p);
     }
 }
 
 void
 tree_parameter_list::clear (void)
 {
@@ -118,17 +118,17 @@ tree_parameter_list::clear (void)
   Pix p = first ();
 
   for (int i = 0; i < len; i++)
     {
       tree_identifier *elt = this->operator () (p);
 
       octave_lvalue ref = elt->lvalue ();
 
-      ref.assign (octave_value::asn_eq, octave_value ());
+      ref.assign (octave_value::op_asn_eq, octave_value ());
 
       next (p);
     }
 }
 
 octave_value_list
 tree_parameter_list::convert_to_const_vector (tree_va_return_list *vr_list)
 {
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -304,17 +304,17 @@ tree_plot_command::eval (void)
   if (plot_list)
     {
       int status = plot_list->print (ndim, plot_buf);
 
       if (error_state || status < 0)
 	return;
     }
 
-  plot_buf << Vgnuplot_command_end << ends;
+  plot_buf << Vgnuplot_command_end << std::ends;
 
   // Just testing...
   //  char *message = plot_buf.str ();
   //  std::cout << "[*]" << message << "[*]\n";
 
   if (parametric_plot && ndim == 2)
     {
       warning ("can't make 2D parametric plot -- setting noparametric...");
@@ -923,17 +923,17 @@ close_plot_stream (void)
 }
 
 void
 do_external_plotter_cd (const std::string& newdir)
 {
   if (plot_stream && *plot_stream)
     {
       std::ostrstream plot_buf;
-      plot_buf << "cd \"" << newdir << "\"" << Vgnuplot_command_end << ends;
+      plot_buf << "cd \"" << newdir << "\"" << Vgnuplot_command_end << std::ends;
       char *message = plot_buf.str ();
       send_to_plot_stream (message);
       delete [] message;
     }
 }
 
 DEFUN (clearplot, , ,
   "-*- texinfo -*-\n\
@@ -1119,29 +1119,29 @@ Set plotting options for gnuplot\n\
 	{
 	  delete [] gnuplot_terminal_type;
 	  std::ostrstream buf;
 	  int i;
 	  for (i = 2; i < argc-1; i++)
 	    buf << argv[i] << " ";
 	  if (i < argc)
 	    buf << argv[i];
-	  buf << Vgnuplot_command_end << ends;
+	  buf << Vgnuplot_command_end << std::ends;
 	  gnuplot_terminal_type = buf.str ();
 	}
     }
 
   int i;
   for (i = 0; i < argc-1; i++)
     plot_buf << argv[i] << " ";
 
   if (i < argc)
     plot_buf << argv[i];
 
-  plot_buf << Vgnuplot_command_end << ends;
+  plot_buf << Vgnuplot_command_end << std::ends;
 
   char *plot_command = plot_buf.str ();
   send_to_plot_stream (plot_command);
 
   delete [] plot_command;
 
   return retval;
 }
@@ -1172,17 +1172,17 @@ Show plotting options.\n\
   std::ostrstream plot_buf;
 
   int i;
   for (i = 0; i < argc-1; i++)
     plot_buf << argv[i] << " ";
   if (i < argc)
     plot_buf << argv[i];
 
-  plot_buf << Vgnuplot_command_end << ends;
+  plot_buf << Vgnuplot_command_end << std::ends;
 
   char *plot_command = plot_buf.str ();
   send_to_plot_stream (plot_command);
 
   delete [] plot_command;
 
   return retval;
 }
diff --git a/src/pt.cc b/src/pt.cc
--- a/src/pt.cc
+++ b/src/pt.cc
@@ -42,17 +42,17 @@ std::string
 tree::str_print_code (void)
 {
   std::ostrstream buf;
 
   tree_print_code tpc (buf);
 
   accept (tpc);
 
-  buf << ends;
+  buf << std::ends;
 
   const char *s = buf.str ();
 
   std::string retval = s;
 
   delete [] s;
 
   return retval;
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -351,17 +351,17 @@ run_command_and_return_output (const std
 
 	  int cmd_status = cmd->close ();
 
 	  if (WIFEXITED (cmd_status))
 	    cmd_status = WEXITSTATUS (cmd_status);
 	  else
 	    cmd_status = 127;
 
-	  output_buf << ends;
+	  output_buf << std::ends;
 
 	  char *msg = output_buf.str ();
 
 	  retval(1) = (double) cmd_status;
 	  retval(0) = msg;
 
 	  delete [] msg;
 	}
@@ -685,26 +685,26 @@ void *
   p = malloc (sz);
   while (p == 0)
     {
       (*__new_handler) ();
       p = malloc (sz);
     }
 
   if (debug_new_delete)
-    std::cout << "__builtin_new: " << p << endl;
+    std::cout << "__builtin_new: " << p << std::endl;
 
   return p;
 }
 
 void
 __builtin_delete (void *ptr)
 {
   if (debug_new_delete)
-    std::cout << "__builtin_delete: " << ptr << endl;
+    std::cout << "__builtin_delete: " << ptr << std::endl;
 
   if (ptr)
     free (ptr);
 }
 
 #endif
 
 void
