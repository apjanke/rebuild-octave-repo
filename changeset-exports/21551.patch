# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1458976471 -39600
#      Sat Mar 26 18:14:31 2016 +1100
# Node ID 990c6c31a684d8e6a1fcfb2501128847ad9e5330
# Parent  7ebd8ac261780be961214bddd5f93717856b7da6
Accept escape sequences in single quoted strings for "delimiter" (bug #47539)

* oct-stream.cc (textscan::parse_options): call do_string_escapes for
"delimiter".
* file-io.cc: Add BIST tests.

diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -1972,16 +1972,24 @@ as the name of the function when reporti
 %!test
 %! str = "11, 12, 13,, 15\n21,, 23, 24, 25\n,, 33, 34, 35\n";
 %! C = textscan (str, "%f %f %f %f", "delimiter", ",", "multipledelimsasone", 1, "endofline", "\n");
 %! assert (C{1}', [11, 21, 33]);
 %! assert (C{2}', [12, 23, 34]);
 %! assert (C{3}', [13, 24, 35]);
 %! assert (C{4}', [15, 25, NaN]);
 
+## Single-quoted escape sequences
+%!test
+%! str = "11\t12\t13\r21\t22\t23";
+%! c = textscan (str, "", "delimiter", '\t', "EndOfLine", '\r');
+%! assert (c{1}', [11, 21]);
+%! assert (c{2}', [12, 22]);
+%! assert (c{3}', [13, 23]);
+
 ## Bug #44750
 %!test
 %! assert (textscan ("/home/foo/", "%s", "delimiter", "/", "MultipleDelimsAsOne", 1){1}, ...
 %!         {"home"; "foo"});
 
 ### Allow cuddling %sliteral but warn it is ambiguous
 #%!test
 #%! C = textscan ("abcxyz51\nxyz83\n##xyz101", "%s xyz %d");
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -3580,30 +3580,35 @@ textscan::parse_options (const octave_va
       if (param == "delimiter")
         {
           bool invalid = true;
           if (args(i+1).is_string ())
             {
               invalid = false;
               have_delims = true;
               delims = args(i+1).string_value ();
+              if (args(i+1).is_sq_string ())
+                delims = do_string_escapes (delims);
             }
           else if (args(i+1).is_cell ())
             {
               invalid = false;
               delim_list = args(i+1).cell_value ();
               delim_table = " "; // non-empty, to flag non-default delim
 
               // Check that all elements are strings, and find max length
               for (int j = 0; j < delim_list.numel (); j++)
                 {
                   if (! delim_list(j).is_string ())
                     invalid = true;
                   else
                     {
+                      if (delim_list(j).is_sq_string ())
+                        delim_list(j) = do_string_escapes (delim_list(j)
+                                                           .string_value ());
                       octave_idx_type len = delim_list(j).string_value ()
                                                          .length ();
                       delim_len = std::max (static_cast<int> (len), delim_len);
                     }
                 }
             }
           if (invalid)
             error ("%s: Delimiters must be either a string or cell array of strings",
