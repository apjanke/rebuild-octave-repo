# HG changeset patch
# User Julien Bect <jbect@users.sourceforge.net>
# Date 1509829983 -3600
#      Sat Nov 04 22:13:03 2017 +0100
# Node ID 939925a782e873e9b068971c2f4f086c8f2288fb
# Parent  51e408a7d38febbd5691c094e896286926241f7b
jit.tst: Comment out unit tests involving try/catch blocks

* test/jit.tst: Comment out unit tests involving try/catch blocks.

diff --git a/test/jit.tst b/test/jit.tst
--- a/test/jit.tst
+++ b/test/jit.tst
@@ -13,16 +13,19 @@
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## Author: Max Brister <max@2bass.com>
 
+## Note: unit tests involving try/catch blocks are currently disabled since
+##   the JIT in its current form is not compatible with exception handling.
+
 ## Turn on JIT and set defaults before running tests
 %!testif HAVE_LLVM
 %! global __old_jit_enable__;
 %! global __old_jit_startcnt__;
 %! __old_jit_enable__ = jit_enable (true);
 %! __old_jit_startcnt__ = jit_startcnt (1000);
 
 ## Test some simple cases that compile.
@@ -90,16 +93,17 @@
 %! jit_failcnt (0);
 %! parfor i=1:1e6
 %!   if (i == 100)
 %!     break;
 %!   endif
 %! endparfor
 %! assert (i, 100);
 %! assert (jit_failcnt, 0);
+
 ## Test some switch statements
 %!testif HAVE_LLVM
 %! jit_failcnt (0);
 %! do
 %!   switch (1)
 %!   end;
 %! until(1)
 %! assert (jit_failcnt, 0);
@@ -235,32 +239,32 @@
 %! mat(end) = 0; # force mat to a matrix
 %! total = 0;
 %! for i = 1:nr
 %!   total = mat(i) + total;
 %! endfor
 %! assert (sum (mat) == total);
 %! assert (jit_failcnt, 0);
 
-%!testif HAVE_LLVM
-%! jit_failcnt (0);
-%! nr = 1001;
-%! mat = [3 1 5];
-%! try
-%!   for i = 1:nr
-%!     if (i > 500)
-%!       result = mat(100);
-%!     else
-%!       result = i;
-%!     endif
-%!   endfor
-%! catch
-%! end_try_catch
-%! assert (result == 500);
-%! assert (jit_failcnt, 0);
+# %!testif HAVE_LLVM
+# %! jit_failcnt (0);
+# %! nr = 1001;
+# %! mat = [3 1 5];
+# %! try
+# %!   for i = 1:nr
+# %!     if (i > 500)
+# %!       result = mat(100);
+# %!     else
+# %!       result = i;
+# %!     endif
+# %!   endfor
+# %! catch
+# %! end_try_catch
+# %! assert (result == 500);
+# %! assert (jit_failcnt, 0);
 
 %!function result = gen_test (n)
 %!  result = double (rand (1, n) > .01);
 %!endfunction
 
 %!function z = vectorized (A, K)
 %!  temp = ones (1, K);
 %!  z = conv (A, temp);
@@ -380,24 +384,24 @@
 %!     a = 1;
 %!     a / 0;
 %!   endfor
 %! unwind_protect_cleanup
 %!   warning (state, "Octave:divide-by-zero");
 %! end_unwind_protect
 %!endfunction
 
-%!testif HAVE_LLVM
-%! jit_failcnt (0);
-%! lasterr ("");
-%! try
-%!   test_divide ();
-%! end_try_catch
-%! assert (strcmp (lasterr (), "division by zero"));
-%! assert (jit_failcnt, 0);
+# %!testif HAVE_LLVM
+# %! jit_failcnt (0);
+# %! lasterr ("");
+# %! try
+# %!   test_divide ();
+# %! end_try_catch
+# %! assert (strcmp (lasterr (), "division by zero"));
+# %! assert (jit_failcnt, 0);
 
 %!testif HAVE_LLVM
 %! jit_failcnt (0);
 %! while (1)
 %!   a = 0;
 %!   result = a / 1;
 %!   break;
 %! endwhile
@@ -571,24 +575,24 @@
 %! ## FIXME: No support for functions with complex input prototypes
 %! ## testif HAVE_LLVM
 %! jit_failcnt (0);
 %! assert (id (1), 1);
 %! assert (id (1+1i), 1+1i);
 %! assert (id (1, 2), 1);
 %! assert (jit_failcnt, 0);
 
-%!testif HAVE_LLVM
-%! jit_failcnt (0);
-%! lasterr ("");
-%! try
-%!   id ();
-%! end_try_catch
-%! assert (strncmp (lasterr (), "'x' undefined near", 18));
-%! assert (jit_failcnt, 0);
+# %!testif HAVE_LLVM
+# %! jit_failcnt (0);
+# %! lasterr ("");
+# %! try
+# %!   id ();
+# %! end_try_catch
+# %! assert (strncmp (lasterr (), "'x' undefined near", 18));
+# %! assert (jit_failcnt, 0);
 
 ## Restore JIT settings
 %!testif HAVE_LLVM
 %! global __old_jit_enable__;
 %! global __old_jit_startcnt__;
 %! jit_enable (__old_jit_enable__);
 %! jit_startcnt (__old_jit_startcnt__);
 %! clear -g __old_jit_enable__ __old_jit_startcnt__;
