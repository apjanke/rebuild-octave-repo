# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1344874586 14400
#      Mon Aug 13 12:16:26 2012 -0400
# Node ID bc801a44bb1f10384856be345cefd4846cfa5c48
# Parent  dbc43bd954776d68ecbf73fd938cb35aecb405ed
follow Octave pattern for resource_manager singleton

* resource-manager.h, resource-manager.cc: Don't expose pointer to
instance.  Use static forwarding functions to access instance and
perform actions.
* files-dockwidget.cc, file-editor-tab.cc, lexer-octave-gui.cc,
main-window.cc, octave-gui.cc, settings-dialog.cc, workspace-view.cc:
Use resource_manager::METHOD instead of
resource_manager::instance()->METHOD.

diff --git a/gui/src/files-dockwidget.cc b/gui/src/files-dockwidget.cc
--- a/gui/src/files-dockwidget.cc
+++ b/gui/src/files-dockwidget.cc
@@ -155,17 +155,20 @@ files_dock_widget::display_directory (QS
             emit open_file (fileInfo.absoluteFilePath ());
         }
     }
 }
 
 void
 files_dock_widget::notice_settings ()
 {
-  QSettings *settings = resource_manager::instance ()->get_settings ();
+  QSettings *settings = resource_manager::get_settings ();
+
+  // FIXME -- what should happen if settings is 0?
+
   _file_tree_view->setColumnHidden (0, !settings->value ("showFilenames").toBool ());
   _file_tree_view->setColumnHidden (1, !settings->value ("showFileSize").toBool ());
   _file_tree_view->setColumnHidden (2, !settings->value ("showFileType").toBool ());
   _file_tree_view->setColumnHidden (3, !settings->value ("showLastModified").toBool ());
   _file_tree_view->setAlternatingRowColors (settings->value ("useAlternatingRowColors").toBool ());
   //if (settings.value ("showHiddenFiles").toBool ())
   // TODO: React on option for hidden files.
 }
diff --git a/gui/src/m-editor/file-editor-tab.cc b/gui/src/m-editor/file-editor-tab.cc
--- a/gui/src/m-editor/file-editor-tab.cc
+++ b/gui/src/m-editor/file-editor-tab.cc
@@ -32,17 +32,20 @@
 #include <Qsci/qscilexerdiff.h>
 #include "resource-manager.h"
 #include <QMessageBox>
 #include <QVBoxLayout>
 
 file_editor_tab::file_editor_tab(file_editor *fileEditor)
   : QWidget ((QWidget*)fileEditor), octave_event_observer ()
 {
-  QSettings *settings = resource_manager::instance ()->get_settings ();
+  QSettings *settings = resource_manager::get_settings ();
+
+  // FIXME -- what should happen if settings is 0?
+
   _file_editor = fileEditor;
   _file_name = "";
   _edit_area = new QsciScintilla (this);
 
   // symbols
   _edit_area->setMarginType (1, QsciScintilla::SymbolMargin);
   _edit_area->setMarginSensitivity (1, true);
   _edit_area->markerDefine (QsciScintilla::RightTriangle, bookmark);
@@ -279,17 +282,19 @@ file_editor_tab::update_lexer ()
     {
       lexer = new QsciLexerDiff ();
     }
   else // Default to bash lexer.
     {
       lexer = new QsciLexerBash ();
     }
 
-  QSettings *settings = resource_manager::instance ()->get_settings ();
+  QSettings *settings = resource_manager::get_settings ();
+
+  // FIXME -- what should happen if settings is 0?
 
   // Editor font (default or from settings)
   lexer->setDefaultFont (QFont (
                                 settings->value ("editor/fontName",
                                                  "Courier").toString (),
                                 settings->value ("editor/fontSize",
                                                  10).toInt ()));
 
diff --git a/gui/src/m-editor/lexer-octave-gui.cc b/gui/src/m-editor/lexer-octave-gui.cc
--- a/gui/src/m-editor/lexer-octave-gui.cc
+++ b/gui/src/m-editor/lexer-octave-gui.cc
@@ -129,13 +129,13 @@ QString lexer_octave_gui::description(in
 // -----------------------------------------------------
 // The set of keywords for highlighting
 // TODO: How to define a second set?
 // -----------------------------------------------------
 const char *lexer_octave_gui::keywords(int set) const
 {
     if (set == 1)
       {
-        return resource_manager::instance ()->octave_keywords ();
+        return resource_manager::octave_keywords ();
       }
     return 0;
 }
 
diff --git a/gui/src/main-window.cc b/gui/src/main-window.cc
--- a/gui/src/main-window.cc
+++ b/gui/src/main-window.cc
@@ -86,31 +86,31 @@ main_window::report_status_message (QStr
   _status_bar->showMessage (statusMessage, 1000);
 }
 
 void
 main_window::handle_save_workspace_request ()
 {
   QString selectedFile =
       QFileDialog::getSaveFileName (this, tr ("Save Workspace"),
-                                    resource_manager::instance ()->get_home_path ());
+                                    resource_manager::get_home_path ());
   if (!selectedFile.isEmpty ())
     {
       octave_link::instance ()
           ->post_event (new octave_save_workspace_event (*this,
           selectedFile.toStdString()));
     }
 }
 
 void
 main_window::handle_load_workspace_request ()
 {
   QString selectedFile =
       QFileDialog::getOpenFileName (this, tr ("Load Workspace"),
-                                    resource_manager::instance ()->get_home_path ());
+                                    resource_manager::get_home_path ());
   if (!selectedFile.isEmpty ())
     {
       octave_link::instance ()
           ->post_event (new octave_load_workspace_event (*this,
             selectedFile.toStdString()));
     }
 }
 
@@ -161,34 +161,36 @@ main_window::process_settings_dialog_req
   delete settingsDialog;
   emit settings_changed ();
 }
 
 void
 main_window::notice_settings ()
 {
   // Set terminal font:
-  QSettings *settings = resource_manager::instance ()->get_settings ();
+  QSettings *settings = resource_manager::get_settings ();
+
+  // FIXME -- what should happen if settings is 0?
 
   QFont font = QFont();
   font.setFamily(settings->value("terminal/fontName").toString());
   font.setPointSize(settings->value("terminal/fontSize").toInt ());
   _terminal->setTerminalFont(font);
 
   QString cursorType = settings->value ("terminal/cursorType").toString ();
   bool cursorBlinking = settings->value ("terminal/cursorBlinking").toBool ();
   if (cursorType == "ibeam")
     _terminal->setCursorType(QTerminalInterface::IBeamCursor, cursorBlinking);
   else if (cursorType == "block")
     _terminal->setCursorType(QTerminalInterface::BlockCursor, cursorBlinking);
   else if (cursorType == "underline")
     _terminal->setCursorType(QTerminalInterface::UnderlineCursor,
                              cursorBlinking);
 
-  resource_manager::instance ()->update_network_settings ();
+  resource_manager::update_network_settings ();
 }
 
 void
 main_window::prepare_for_quit ()
 {
   write_settings ();
 }
 
@@ -409,26 +411,32 @@ main_window::closeEvent (QCloseEvent * c
 {
   closeEvent->ignore ();
   octave_link::instance ()->post_event (new octave_exit_event (*this));
  }
 
 void
 main_window::read_settings ()
 {
-  QSettings *settings = resource_manager::instance ()->get_settings ();
+  QSettings *settings = resource_manager::get_settings ();
+
+  // FIXME -- what should happen if settings is 0?
+
   restoreGeometry (settings->value ("MainWindow/geometry").toByteArray ());
   restoreState (settings->value ("MainWindow/windowState").toByteArray ());
   emit settings_changed ();
 }
 
 void
 main_window::write_settings ()
 {
-  QSettings *settings = resource_manager::instance ()->get_settings ();
+  QSettings *settings = resource_manager::get_settings ();
+
+  // FIXME -- what should happen if settings is 0?
+
   settings->setValue ("MainWindow/geometry", saveGeometry ());
   settings->setValue ("MainWindow/windowState", saveState ());
   settings->sync ();
 }
 
 void
 main_window::construct ()
 {
diff --git a/gui/src/octave-gui.cc b/gui/src/octave-gui.cc
--- a/gui/src/octave-gui.cc
+++ b/gui/src/octave-gui.cc
@@ -74,32 +74,35 @@ int
 octave_start_gui (int argc, char *argv[])
 {
   dissociate_terminal ();
 
   QApplication application (argc, argv);
 
   while (true)
     {
-      if (resource_manager::instance ()->is_first_run ())
+      if (resource_manager::is_first_run ())
         {
           welcome_wizard welcomeWizard;
           welcomeWizard.exec ();
-          resource_manager::instance ()->reload_settings ();
+          resource_manager::reload_settings ();
         }
       else
         {
-          QSettings *settings = resource_manager::instance ()->get_settings ();
+          QSettings *settings = resource_manager::get_settings ();
+
+          // FIXME -- what should happen if settings is 0?
+
           QString language = settings->value ("language").toString ();
 
-          QString translatorFile = resource_manager::instance ()->find_translator_file (language);
+          QString translatorFile = resource_manager::find_translator_file (language);
           QTranslator translator;
           translator.load (translatorFile);
           application.installTranslator (&translator);
 
-          resource_manager::instance ()->update_network_settings ();
+          resource_manager::update_network_settings ();
 
           main_window w;
           w.show ();
           return application.exec ();
         }
     }
 }
diff --git a/gui/src/resource-manager.cc b/gui/src/resource-manager.cc
--- a/gui/src/resource-manager.cc
+++ b/gui/src/resource-manager.cc
@@ -29,144 +29,144 @@
 #include "file-ops.h"
 #include "oct-env.h"
 #include "singleton-cleanup.h"
 
 #include "defaults.h"
 
 #include "resource-manager.h"
 
-resource_manager *resource_manager::_instance = 0;
+resource_manager *resource_manager::instance = 0;
+
+resource_manager::resource_manager (void)
+  : settings (0), home_path (), first_run (false)
+{
+  do_reload_settings ();
+}
+
+resource_manager::~resource_manager (void)
+{
+  delete settings;
+}
+
+QString
+resource_manager::find_translator_file (QString language)
+{
+  // TODO: Quick hack to be able to test language files.
+  return QString ("../languages/%1.qm").arg (language);
+}
 
 bool
-resource_manager::instance_ok ()
+resource_manager::instance_ok (void)
 {
   bool retval = true;
 
-  if (! _instance)
+  if (! instance)
     {
-      _instance = new resource_manager ();
+      instance = new resource_manager ();
 
-      if (_instance)
+      if (instance)
         singleton_cleanup_list::add (cleanup_instance);
     }
 
-  if (! _instance)
+  if (! instance)
     {
       ::error ("unable to create resource_manager object!");
+
+      retval = false;
     }
 
   return retval;
 }
 
-resource_manager::resource_manager ()
+QSettings *
+resource_manager::do_get_settings (void)
 {
-  _settings = 0;
-  _first_run = false;
-  reload_settings ();
-}
-
-resource_manager::~resource_manager ()
-{
-  delete _settings;
-}
-
-QSettings *
-resource_manager::get_settings ()
-{
-  return _settings;
+  return settings;
 }
 
 QString
-resource_manager::get_home_path ()
+resource_manager::do_get_home_path (void)
 {
-  return _home_path;
+  return home_path;
 }
 
 static std::string
 default_qt_settings_file (void)
 {
   std::string dsf = octave_env::getenv ("OCTAVE_DEFAULT_QT_SETTINGS");
 
   if (dsf.empty ())
     dsf = Voct_etc_dir + file_ops::dir_sep_str () + "default-qt-settings";
 
   return dsf;
 }
 
 void
-resource_manager::reload_settings ()
+resource_manager::do_reload_settings (void)
 {
   QDesktopServices desktopServices;
-  _home_path = desktopServices.storageLocation (QDesktopServices::HomeLocation);
-  QString settings_path = _home_path + "/.config/octave/";
+  home_path = desktopServices.storageLocation (QDesktopServices::HomeLocation);
+  QString settings_path = home_path + "/.config/octave/";
   QString settings_file = settings_path + "qt-settings";
 
   if (!QFile::exists (settings_file))
    {
      QDir("/").mkpath (settings_path);
      QFile::copy (QString::fromStdString (default_qt_settings_file ()),
                   settings_file);
-     _first_run = true;
+     first_run = true;
    }
   else
-     _first_run = false;
+     first_run = false;
+
+  do_set_settings (settings_file);
+}
 
-  set_settings (settings_file);
+void
+resource_manager::do_set_settings (QString file)
+{
+  delete settings;
+  settings = new QSettings (file, QSettings::IniFormat);
+}
+
+bool
+resource_manager::do_is_first_run (void)
+{
+  return first_run;
 }
 
 void
-resource_manager::set_settings (QString file)
-{
-  delete _settings;
-  _settings = new QSettings (file, QSettings::IniFormat);
-}
-
-QString
-resource_manager::find_translator_file (QString language)
-{
-  // TODO: Quick hack to be able to test language files.
-  return QString("../languages/%1.qm").arg(language);
-}
-
-
-bool
-resource_manager::is_first_run ()
-{
-  return _first_run;
-}
-
-void
-resource_manager::update_network_settings ()
+resource_manager::do_update_network_settings (void)
 {
   QNetworkProxy::ProxyType proxyType = QNetworkProxy::NoProxy;
-  if (_settings->value ("useProxyServer").toBool ())
+
+  if (settings->value ("useProxyServer").toBool ())
     {
-      QString proxyTypeString = _settings->value ("proxyType").toString ();
+      QString proxyTypeString = settings->value ("proxyType").toString ();
+
       if (proxyTypeString == "Socks5Proxy")
-        {
-          proxyType = QNetworkProxy::Socks5Proxy;
-        }
+        proxyType = QNetworkProxy::Socks5Proxy;
       else if (proxyTypeString == "HttpProxy")
-        {
-          proxyType = QNetworkProxy::HttpProxy;
-        }
+        proxyType = QNetworkProxy::HttpProxy;
     }
 
   QNetworkProxy proxy;
+
   proxy.setType (proxyType);
-  proxy.setHostName (_settings->value ("proxyHostName").toString ());
-  proxy.setPort (_settings->value ("proxyPort").toInt ());
-  proxy.setUser (_settings->value ("proxyUserName").toString ());
-  proxy.setPassword (_settings->value ("proxyPassword").toString ());
+  proxy.setHostName (settings->value ("proxyHostName").toString ());
+  proxy.setPort (settings->value ("proxyPort").toInt ());
+  proxy.setUser (settings->value ("proxyUserName").toString ());
+  proxy.setPassword (settings->value ("proxyPassword").toString ());
+
   QNetworkProxy::setApplicationProxy (proxy);
 }
 
 const char*
-resource_manager::octave_keywords ()
+resource_manager::octave_keywords (void)
 {
   return
       ".nargin. "
       "EDITOR "
       "EXEC_PATH "
       "F_DUPFD "
       "F_GETFD "
       "F_GETFL "
diff --git a/gui/src/resource-manager.h b/gui/src/resource-manager.h
--- a/gui/src/resource-manager.h
+++ b/gui/src/resource-manager.h
@@ -13,49 +13,94 @@
  *
  * You should have received a copy of the GNU General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef RESOURCEMANAGER_H
 #define RESOURCEMANAGER_H
 
+#include <QDesktopServices>
+#include <QIcon>
+#include <QMap>
 #include <QSettings>
-#include <QDesktopServices>
-#include <QMap>
-#include <QIcon>
 
 class resource_manager
 {
+protected:
+
+  resource_manager (void);
+
 public:
 
   ~resource_manager ();
 
-  static resource_manager *
-  instance ()
+  static QSettings *get_settings (void)
+  {
+    return instance_ok () ? instance->do_get_settings () : 0;
+  }
+
+  static QString get_home_path (void)
+  {
+    return instance_ok () ? instance->do_get_home_path () : QString ();
+  }
+
+  static void reload_settings (void)
   {
-    return (instance_ok ()) ? _instance : 0;
+    if (instance_ok ())
+      instance->do_reload_settings ();
+  }
+
+  static void set_settings (QString file)
+  {
+    if (instance_ok ())
+      instance->do_set_settings (file);
+  }
+
+  static QString find_translator_file (QString language);
+
+  static void update_network_settings (void)
+  {
+    if (instance_ok ())
+      instance->do_update_network_settings ();
   }
 
-  QSettings *get_settings ();
-  QString get_home_path ();
-  void reload_settings ();
-  void set_settings (QString file);
-  QString find_translator_file (QString language);
-  void update_network_settings ();
+  static bool is_first_run (void)
+  {
+    return instance_ok () ? instance->do_is_first_run () : true;
+  }
 
-  bool is_first_run ();
-  const char *octave_keywords ();
+  static const char *octave_keywords (void);
 
 private:
-  resource_manager ();
+
+  static resource_manager *instance;
+
+  static void cleanup_instance (void) { delete instance; instance = 0; }
+
+  // No copying!
 
-  static bool instance_ok ();
+  resource_manager (const resource_manager&);
+
+  resource_manager& operator = (const resource_manager&);
+
+  static bool instance_ok (void);
+
+  QSettings *settings;
 
-  static void cleanup_instance () { delete _instance; _instance = 0; }
+  QString home_path;
+
+  bool first_run;
+
+  QSettings *do_get_settings (void);
+
+  QString do_get_home_path (void);
 
-  QSettings *_settings;
-  QString _home_path;
-  static resource_manager *_instance;
-  bool _first_run;
+  void do_reload_settings (void);
+
+  void do_set_settings (QString file);
+
+  void do_update_network_settings (void);
+
+  bool do_is_first_run (void);
 };
 
 #endif // RESOURCEMANAGER_H
diff --git a/gui/src/settings-dialog.cc b/gui/src/settings-dialog.cc
--- a/gui/src/settings-dialog.cc
+++ b/gui/src/settings-dialog.cc
@@ -20,17 +20,20 @@
 #include "ui-settings-dialog.h"
 #include <QSettings>
 
 settings_dialog::settings_dialog (QWidget * parent):
 QDialog (parent), ui (new Ui::settings_dialog)
 {
   ui->setupUi (this);
 
-  QSettings *settings = resource_manager::instance ()->get_settings ();
+  QSettings *settings = resource_manager::get_settings ();
+
+  // FIXME -- what should happen if settings is 0?
+
   ui->useCustomFileEditor->setChecked (settings->value ("useCustomFileEditor").toBool ());
   ui->customFileEditor->setText (settings->value ("customFileEditor").toString ());
   ui->editor_showLineNumbers->setChecked (settings->value ("editor/showLineNumbers",true).toBool () );
   ui->editor_highlightCurrentLine->setChecked (settings->value ("editor/highlightCurrentLine",true).toBool () );
   ui->editor_codeCompletion->setChecked (settings->value ("editor/codeCompletion",true).toBool () );
   ui->editor_fontName->setCurrentFont (QFont (settings->value ("editor/fontName","Courier").toString()) );
   ui->editor_fontSize->setValue (settings->value ("editor/fontSize",10).toInt ());
   ui->editor_longWindowTitle->setChecked (settings->value ("editor/longWindowTitle",true).toBool ());
@@ -72,17 +75,20 @@ QDialog (parent), ui (new Ui::settings_d
 
   ui->proxyPort->setText (settings->value ("proxyPort").toString ());
   ui->proxyUserName->setText (settings->value ("proxyUserName").toString ());
   ui->proxyPassword->setText (settings->value ("proxyPassword").toString ());
 }
 
 settings_dialog::~settings_dialog ()
 {
-  QSettings *settings = resource_manager::instance ()->get_settings ();
+  QSettings *settings = resource_manager::get_settings ();
+
+  // FIXME -- what should happen if settings is 0?
+
   settings->setValue ("useCustomFileEditor", ui->useCustomFileEditor->isChecked ());
   settings->setValue ("customFileEditor", ui->customFileEditor->text ());
   settings->setValue ("editor/showLineNumbers", ui->editor_showLineNumbers->isChecked ());
   settings->setValue ("editor/highlightCurrentLine", ui->editor_highlightCurrentLine->isChecked ());
   settings->setValue ("editor/codeCompletion", ui->editor_codeCompletion->isChecked ());
   settings->setValue ("editor/fontName", ui->editor_fontName->currentFont().family());
   settings->setValue ("editor/fontSize", ui->editor_fontSize->value());
   settings->setValue ("editor/longWindowTitle", ui->editor_longWindowTitle->isChecked());
diff --git a/gui/src/workspace-view.cc b/gui/src/workspace-view.cc
--- a/gui/src/workspace-view.cc
+++ b/gui/src/workspace-view.cc
@@ -45,20 +45,25 @@ workspace_view::workspace_view (QWidget 
   QVBoxLayout *layout = new QVBoxLayout ();
   layout->addWidget (_workspace_tree_view);
   layout->setMargin (2);
 
   // Set the empty widget to have our layout.
   widget ()->setLayout (layout);
 
   // Initialize collapse/expand state of the workspace subcategories.
-  _explicit_collapse.local      = resource_manager::instance ()->get_settings ()->value ("workspaceview/local_collapsed", false).toBool ();
-  _explicit_collapse.global     = resource_manager::instance ()->get_settings ()->value ("workspaceview/global_collapsed", false).toBool ();;
-  _explicit_collapse.persistent = resource_manager::instance ()->get_settings ()->value ("workspaceview/persistent_collapsed", false).toBool ();;
-  _explicit_collapse.hidden     = resource_manager::instance ()->get_settings ()->value ("workspaceview/hidden_collapsed", false).toBool ();;
+
+  QSettings *settings = resource_manager::get_settings ();
+
+  // FIXME -- what should happen if settings is 0?
+
+  _explicit_collapse.local      = settings->value ("workspaceview/local_collapsed", false).toBool ();
+  _explicit_collapse.global     = settings->value ("workspaceview/global_collapsed", false).toBool ();;
+  _explicit_collapse.persistent = settings->value ("workspaceview/persistent_collapsed", false).toBool ();;
+  _explicit_collapse.hidden     = settings->value ("workspaceview/hidden_collapsed", false).toBool ();;
 
   // Connect signals and slots.
   connect (this, SIGNAL (visibilityChanged (bool)),
            this, SLOT(handle_visibility_changed (bool)));
 
   connect (_workspace_model, SIGNAL (model_changed ()),
            this, SLOT (model_changed ()));
 
@@ -69,20 +74,24 @@ workspace_view::workspace_view (QWidget 
 
   connect (_workspace_tree_view, SIGNAL (doubleClicked (QModelIndex)),
            this, SLOT (item_double_clicked (QModelIndex)));
 
 }
 
 workspace_view::~workspace_view ()
 {
-  resource_manager::instance ()->get_settings ()->setValue("workspaceview/local_collapsed", _explicit_collapse.local);
-  resource_manager::instance ()->get_settings ()->setValue("workspaceview/global_collapsed", _explicit_collapse.global);
-  resource_manager::instance ()->get_settings ()->setValue("workspaceview/persistent_collapsed", _explicit_collapse.persistent);
-  resource_manager::instance ()->get_settings ()->setValue("workspaceview/hidden_collapsed", _explicit_collapse.hidden);
+  QSettings *settings = resource_manager::get_settings ();
+
+  // FIXME -- what should happen if settings is 0?
+
+  settings->setValue("workspaceview/local_collapsed", _explicit_collapse.local);
+  settings->setValue("workspaceview/global_collapsed", _explicit_collapse.global);
+  settings->setValue("workspaceview/persistent_collapsed", _explicit_collapse.persistent);
+  settings->setValue("workspaceview/hidden_collapsed", _explicit_collapse.hidden);
 }
 
 void
 workspace_view::handle_visibility_changed (bool visible)
 {
   if (visible)
     emit active_changed (true);
 }
