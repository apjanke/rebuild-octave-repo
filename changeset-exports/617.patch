# HG changeset patch
# User jwe
# Date 776925149 0
#      Mon Aug 15 04:32:29 1994 +0000
# Node ID 5acc6db54c8f92be5429ad6cb09cc6e125d72578
# Parent  9ced66fce8a34e874ad84d4a33d724bafce8b89e
[project @ 1994-08-15 04:32:29 by jwe]

diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -83,22 +83,27 @@ enum floating_point_format
     LS_IEEE_LITTLE,
     LS_IEEE_BIG,
     LS_VAX_D,
     LS_VAX_G,
     LS_CRAY,
     LS_UNKNOWN_FLT_FMT,
   };
 
+// Not all of the following are currently used.
+
 enum save_type
   {
     LS_U_CHAR,
     LS_U_SHORT,
+    LS_U_INT,
+    LS_CHAR,
     LS_SHORT,
     LS_INT,
+    LS_FLOAT,
     LS_DOUBLE,
   };
 
 #if defined (IEEE_LITTLE_ENDIAN)
 #define NATIVE_FLOAT_FORMAT LS_IEEE_LITTLE
 #elif defined (IEEE_BIG_ENDIAN)
 #define NATIVE_FLOAT_FORMAT LS_IEEE_BIG
 #elif defined (VAX_D_FLOAT)
@@ -459,16 +464,24 @@ write_doubles (ostream& os, double *data
     case LS_U_CHAR:
       LS_DO_WRITE (unsigned char, data, 1, len, os);
       break;
 
     case LS_U_SHORT:
       LS_DO_WRITE (unsigned TWO_BYTE_INT, data, 2, len, os);
       break;
 
+    case LS_U_INT:
+      LS_DO_WRITE (unsigned FOUR_BYTE_INT, data, 4, len, os);
+      break;
+
+    case LS_CHAR:
+      LS_DO_WRITE (signed char, data, 1, len, os);
+      break;
+
     case LS_SHORT:
       LS_DO_WRITE (TWO_BYTE_INT, data, 2, len, os);
       break;
 
     case LS_INT:
       LS_DO_WRITE (FOUR_BYTE_INT, data, 4, len, os);
       break;
 
@@ -1385,16 +1398,49 @@ read_mat_file_header (istream& is, int& 
     }
 
   return 0;
 
  data_read_error:
   return -1;
 }
 
+// We don't just use a cast here, because we need to be able to detect
+// possible errors.
+
+static floating_point_format
+get_floating_point_format (int mach)
+{
+  switch (mach)
+    {
+    case 0:
+      flt_fmt = LS_IEEE_LITTLE;
+      break;
+
+    case 1:
+      flt_fmt = LS_IEEE_BIG;
+      break;
+
+    case 2:
+      flt_fmt = LS_VAX_D;
+      break;
+
+    case 3:
+      flt_fmt = LS_VAX_G;
+      break;
+
+    case 4:
+      flt_fmt = LS_CRAY;
+      break;
+
+    default:
+      flt_fmt = LS_UNKOWN_FLT_FMT;
+      break;
+    }
+}
 // Extract one value (scalar, matrix, string, etc.) from stream IS and
 // place it in TC, returning the name of the variable.
 //
 // The data is expected to be in Matlab's .mat format, though not all
 // the features of that format are supported.
 //
 // FILENAME is used for error messages.
 //
@@ -1425,24 +1471,19 @@ read_mat_binary_data (istream& is, const
     }
 
   type = mopt % 10; // Full, sparse, etc.
   mopt /= 10;       // Eliminate first digit.
   prec = mopt % 10; // double, float, int, etc.
   mopt /= 100;      // Skip unused third digit too.
   mach = mopt % 10; // IEEE, VAX, etc.
 
-  switch (mach)
+  flt_fmt = get_floating_point_format (mach);
+  if (flt_fmt == LS_UNKNOWN_FLT_FMT)
     {
-    case 0: flt_fmt = LS_IEEE_LITTLE; break;
-    case 1: flt_fmt = LS_IEEE_BIG;    break;
-    case 2: flt_fmt = LS_VAX_D;       break;
-    case 3: flt_fmt = LS_VAX_G;       break;
-    case 4: flt_fmt = LS_CRAY;        break;
-    default:
       error ("load: unrecognized binary format!");
       return 0;
     }
 
   if (type != 0 && type != 1)
     {
       error ("load: can't read sparse matrices");
       return 0;
@@ -1548,24 +1589,19 @@ read_binary_file_header (istream& is, in
       if (! quiet)
 	error ("load: can't read binary file");
       return -1;
     }
 	
   char tmp = 0;
   is.read (&tmp, 1);
 
-  switch (tmp)
+  flt_fmt = get_floating_point_format (tmp);
+  if (flt_fmt == LS_UNKNOWN_FLT_FMT)
     {
-    case 0: flt_fmt = LS_IEEE_LITTLE; break;
-    case 1: flt_fmt = LS_IEEE_BIG;    break;
-    case 2: flt_fmt = LS_VAX_D;       break;
-    case 3: flt_fmt = LS_VAX_G;       break;
-    case 4: flt_fmt = LS_CRAY;        break;
-    default:
       if (! quiet)
         error ("load: unrecognized binary format!");
       return -1;
     }
 
   return 0;
 }
 
