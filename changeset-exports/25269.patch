# HG changeset patch
# User Dildar Sk <dildarsk101010@gmail.com>
# Date 1521777346 14400
#      Thu Mar 22 23:55:46 2018 -0400
# Node ID cac96fd5310daa63a72180319c00349ad63cc9b8
# Parent  592a4258b237da39902a9a2476ce76a0d3fd35dd
factor.m: Emit an error if input is negative (bug #53425).

* factor.m: Add input validation that input q >= 1.  Change error message to note that input must be non-negative.  Add BIST test.

diff --git a/scripts/specfun/factor.m b/scripts/specfun/factor.m
--- a/scripts/specfun/factor.m
+++ b/scripts/specfun/factor.m
@@ -42,18 +42,18 @@
 ## * add error handling
 
 function [pf, n] = factor (q)
 
   if (nargin != 1)
     print_usage ();
   endif
 
-  if (! isreal (q) || ! isscalar (q) || q != fix (q))
-    error ("factor: Q must be a real integer");
+  if (! isscalar (q) || ! isreal (q) || q < 0 || q != fix (q))
+    error ("factor: Q must be a real non-negative integer");
   endif
 
   ## Special case of no primes less than sqrt(q).
   if (q < 4)
     pf = q;
     n = 1;
     return;
   endif
@@ -82,17 +82,17 @@ function [pf, n] = factor (q)
   ## Verify algorithm was succesful
   q = prod (pf);
   if (q != qorig)
     error ("factor: Q too large to factor");
   elseif (q >= flintmax ())
     warning ("factor: Q too large.  Answer is unreliable");
   endif
 
-  ## Determine muliplicity.
+  ## Determine multiplicity.
   if (nargout > 1)
     idx = find ([0, pf] != [pf, 0]);
     pf = pf(idx(1:length (idx)-1));
     n = diff (idx);
   endif
 
 endfunction
 
@@ -106,11 +106,12 @@ endfunction
 %!   [pf, n] = factor (i);
 %!   assert (prod (pf.^n), i);
 %!   assert (all ([0,pf] != [pf,0]));
 %! endfor
 
 ## Test input validation
 %!error factor ()
 %!error factor (1,2)
-%!error <Q must be a real integer> factor (6i)
-%!error <Q must be a real integer> factor ([1,2])
-%!error <Q must be a real integer> factor (1.5)
+%!error <Q must be a real non-negative integer> factor (6i)
+%!error <Q must be a real non-negative integer> factor ([1,2])
+%!error <Q must be a real non-negative integer> factor (1.5)
+%!error <Q must be a real non-negative integer> factor (-20)
