# HG changeset patch
# User jwe
# Date 1041649902 0
#      Sat Jan 04 03:11:42 2003 +0000
# Node ID 3dc0815a2954ab1f5b8d6a5ce62d9fccbd39d471
# Parent  64c444ac1feec1924976ef1f8a21fa0bb55c9467
[project @ 2003-01-04 03:11:42 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,21 @@
 2003-01-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* ov-usr-fcn.cc (octave_vr_val): Assert vr_list != 0, not vr_list.
+	* variables.cc (builtin_string_variable, builtin_any_variable,
+	builtin_real_scalar_variable, bind_builtin_variable): Likewise.
+
+	* TEMPLATE-INST/Array-tc.cc: Provide specialization of
+	Array<octave_value>::resize_fill_value before instantiation of
+	Array<octave_value>.
+
+	* oct-obj.h (octave_value_list::operator delete): Define version
+	of delete operator to correspond to placement new operator.
+
 	* mkgendoc: In generated code, define __USE_STD_IOSTREAM if using
 	Compaq C++.
 
 	* Makefile.in (distclean): Also remove doc-files and gendoc.cc.
 
 	* input.cc (initialize_command_input): Use const for
 	initialization of char * from literal string.
 
diff --git a/src/TEMPLATE-INST/Array-tc.cc b/src/TEMPLATE-INST/Array-tc.cc
--- a/src/TEMPLATE-INST/Array-tc.cc
+++ b/src/TEMPLATE-INST/Array-tc.cc
@@ -32,26 +32,26 @@ Software Foundation, 59 Temple Place - S
 #include "Array2.h"
 #include "Array2.cc"
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 #include "oct-obj.h"
 
-template class Array<octave_value>;
-
 template<>
 octave_value
 Array<octave_value>::resize_fill_value (void)
 {
   static octave_value retval = octave_value (Matrix ());
   return retval;
 }
 
+template class Array<octave_value>;
+
 template int assign (Array<octave_value>&, const Array<octave_value>&);
 
 template int assign (Array<octave_value>&,
 		     const Array<octave_value>&, const octave_value&);
 
 
 template class Array2<octave_value>;
 
diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -52,23 +52,26 @@ public:
   octave_value_list (const octave_value_list& obj)
     : data (obj.data), names (obj.names) { }
 
   ~octave_value_list (void) { }
 
   void *operator new (size_t size)
     { return allocator.alloc (size); }
 
+  void operator delete (void *p, size_t size)
+    { allocator.free (p, size); }
+
   // XXX FIXME XXX -- without this, I have errors with the stack of
   // octave_value_list objects in ov-usr-fcn.h.  Why?
   void *operator new (size_t size, void *p)
     { return ::operator new (size, p); }
 
-  void operator delete (void *p, size_t size)
-    { allocator.free (p, size); }
+  void operator delete (void *p, void *)
+    { return ::operator delete (p, static_cast<void *> (0)); }
 
   octave_value_list& operator = (const octave_value_list& obj)
     {
       if (this != &obj)
 	{
 	  data = obj.data;
 	  names = obj.names;
 	}
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -193,17 +193,20 @@ bool
 octave_user_function::takes_var_return (void) const
 {
   return (ret_list && ret_list->takes_varargs ());
 }
 
 void
 octave_user_function::octave_vr_val (const octave_value& val)
 {
-  assert (vr_list);
+  // Use != here to avoid possible conversion to int of smaller type
+  // than the vr_list pointer.
+
+  assert (vr_list != 0);
 
   vr_list->append (val);
 }
 
 void
 octave_user_function::varargout_to_vr_val (void)
 {
   assert (vr_list && vr_list->empty ());
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -830,17 +830,20 @@ set_global_value (const std::string& nm,
 
 std::string
 builtin_string_variable (const std::string& name)
 {
   symbol_record *sr = fbi_sym_tab->lookup (name);
 
   // It is a prorgramming error to look for builtins that aren't.
 
-  assert (sr);
+  // Use != here to avoid possible conversion to int of smaller type
+  // than the sr pointer.
+
+  assert (sr != 0);
 
   std::string retval;
 
   octave_value val = sr->def ();
 
   if (! error_state && val.is_string ())
     retval = val.string_value ();
 
@@ -854,17 +857,20 @@ builtin_string_variable (const std::stri
 int
 builtin_real_scalar_variable (const std::string& name, double& d)
 {
   int status = 0;
   symbol_record *sr = fbi_sym_tab->lookup (name);
 
   // It is a prorgramming error to look for builtins that aren't.
 
-  assert (sr);
+  // Use != here to avoid possible conversion to int of smaller type
+  // than the sr pointer.
+
+  assert (sr != 0);
 
   octave_value val = sr->def ();
 
   if (! error_state && val.is_scalar_type ())
     {
       d = val.double_value ();
       status = 1;
     }
@@ -876,17 +882,20 @@ builtin_real_scalar_variable (const std:
 
 octave_value
 builtin_any_variable (const std::string& name)
 {
   symbol_record *sr = fbi_sym_tab->lookup (name);
 
   // It is a prorgramming error to look for builtins that aren't.
 
-  assert (sr);
+  // Use != here to avoid possible conversion to int of smaller type
+  // than the sr pointer.
+
+  assert (sr != 0);
 
   return sr->def ();
 }
 
 // Global stuff and links to builtin variables and functions.
 
 // Make the definition of the symbol record sr be the same as the
 // definition of the global variable of the same name, creating it if
@@ -1251,17 +1260,20 @@ bind_builtin_variable (const std::string
 		       symbol_record::change_function chg_fcn,
 		       const std::string& help)
 {
   symbol_record *sr = fbi_sym_tab->lookup (varname, true);
 
   // It is a programming error for a builtin symbol to be missing.
   // Besides, we just inserted it, so it must be there.
 
-  assert (sr);
+  // Use != here to avoid possible conversion to int of smaller type
+  // than the sr pointer.
+
+  assert (sr != 0);
 
   sr->unprotect ();
 
   // Must do this before define, since define will call the special
   // variable function only if it knows about it, and it needs to, so
   // that user prefs can be properly initialized.
 
   if (chg_fcn)
