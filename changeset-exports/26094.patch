# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1542385882 18000
#      Fri Nov 16 11:31:22 2018 -0500
# Node ID 8fb0df0c877280bf351bddfba9c12dd6277b44e1
# Parent  6a03af2c4c9ebe2f344732db9fb2a463dc0b59c5
eliminate duplicate final_index_error function

* pt-idx.cc (final_index_error): Delete static function.
(tree_index_expression::lvalue): Use identical
tree_evaluator::final_index_expression here instead.

diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -3350,16 +3350,55 @@ namespace octave
 
   octave_value
   tree_evaluator::string_fill_char (const octave_value_list& args, int nargout)
   {
     return set_internal_variable (m_string_fill_char, args, nargout,
                                   "string_fill_char");
   }
 
+  // Final step of processing an indexing error.  Add the name of the
+  // variable being indexed, if any, then issue an error.  (Will this also
+  // be needed by pt-lvalue, which calls subsref?)
+
+  void tree_evaluator::final_index_error (index_exception& e,
+                                          const tree_expression *expr)
+  {
+    std::string extra_message;
+
+    symbol_scope scope = get_current_scope ();
+
+    symbol_record::context_id ctxt = scope.current_context ();
+
+    if (expr->is_identifier ()
+        && dynamic_cast<const tree_identifier *> (expr)->is_variable (ctxt))
+      {
+        std::string var = expr->name ();
+
+        e.set_var (var);
+
+        symbol_table& symtab = m_interpreter.get_symbol_table ();
+
+        octave_value fcn = symtab.find_function (var);
+
+        if (fcn.is_function ())
+          {
+            octave_function *fp = fcn.function_value ();
+
+            if (fp && fp->name () == var)
+              extra_message
+                = " (note: variable '" + var + "' shadows function)";
+          }
+      }
+
+    std::string msg = e.message () + extra_message;
+
+    error_with_id (e.err_id (), msg.c_str ());
+  }
+
   void
   tree_evaluator::push_echo_state (unwind_protect& frame, int type,
                                    const std::string& file_name,
                                    size_t pos)
   {
     push_echo_state_cleanup (frame);
 
     set_echo_state (type, file_name, pos);
@@ -3610,55 +3649,16 @@ namespace octave
         std::deque<std::string> lines
           = code->get_code_lines (m_echo_file_pos, num_lines);
 
         for (auto& elt : lines)
           octave_stdout << prefix << elt << std::endl;
       }
   }
 
-  // Final step of processing an indexing error.  Add the name of the
-  // variable being indexed, if any, then issue an error.  (Will this also
-  // be needed by pt-lvalue, which calls subsref?)
-
-  void tree_evaluator::final_index_error (index_exception& e,
-                                          const tree_expression *expr)
-  {
-    std::string extra_message;
-
-    symbol_scope scope = get_current_scope ();
-
-    symbol_record::context_id ctxt = scope.current_context ();
-
-    if (expr->is_identifier ()
-        && dynamic_cast<const tree_identifier *> (expr)->is_variable (ctxt))
-      {
-        std::string var = expr->name ();
-
-        e.set_var (var);
-
-        symbol_table& symtab = m_interpreter.get_symbol_table ();
-
-        octave_value fcn = symtab.find_function (var);
-
-        if (fcn.is_function ())
-          {
-            octave_function *fp = fcn.function_value ();
-
-            if (fp && fp->name () == var)
-              extra_message
-                = " (note: variable '" + var + "' shadows function)";
-          }
-      }
-
-    std::string msg = e.message () + extra_message;
-
-    error_with_id (e.err_id (), msg.c_str ());
-  }
-
   // Decide if it's time to quit a for or while loop.
   bool tree_evaluator::quit_loop_now (void)
   {
     octave_quit ();
 
     // Maybe handle 'continue N' someday...
 
     if (m_continuing)
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -514,16 +514,18 @@ namespace octave
       int old_val = m_echo;
       m_echo = val;
       return old_val;
     }
 
     octave_value
     string_fill_char (const octave_value_list& args, int nargout);
 
+    void final_index_error (index_exception& e, const tree_expression *expr);
+
     void push_echo_state (unwind_protect& frame, int type,
                           const std::string& file_name, size_t pos = 1);
 
   private:
 
     void set_echo_state (int type, const std::string& file_name, size_t pos);
 
     void maybe_set_echo_state (void);
@@ -552,18 +554,16 @@ namespace octave
     // For unwind-protect.
     void uwp_set_echo_state (bool state, const std::string& file_name,
                              size_t pos);
 
     bool echo_this_file (const std::string& file, int type) const;
 
     void echo_code (size_t line);
 
-    void final_index_error (index_exception& e, const tree_expression *expr);
-
     bool quit_loop_now (void);
 
     void bind_auto_fcn_vars (symbol_scope& scope,
                              const string_vector& arg_names, int nargin,
                              int nargout, bool takes_varargs,
                              const octave_value_list& va_args);
 
     interpreter& m_interpreter;
diff --git a/libinterp/parse-tree/pt-idx.cc b/libinterp/parse-tree/pt-idx.cc
--- a/libinterp/parse-tree/pt-idx.cc
+++ b/libinterp/parse-tree/pt-idx.cc
@@ -189,52 +189,16 @@ namespace octave
           }
         else
           panic_impossible ();
       }
 
     return fn;
   }
 
-  // Final step of processing an indexing error.  Add the name of the
-  // variable being indexed, if any, then issue an error.  (Will this also
-  // be needed by pt-lvalue, which calls subsref?)
-
-  static void
-  final_index_error (index_exception& e, const tree_expression *expr)
-  {
-    std::string extra_message;
-
-    symbol_table& symtab = __get_symbol_table__ ("final_index_error");
-
-    symbol_record::context_id context = symtab.current_context ();
-
-    if (expr->is_identifier ()
-        && dynamic_cast<const tree_identifier *> (expr)->is_variable (context))
-      {
-        std::string var = expr->name ();
-
-        e.set_var (var);
-
-        octave_value fcn = symtab.find_function (var);
-
-        if (fcn.is_function ())
-          {
-            octave_function *fp = fcn.function_value ();
-
-            if (fp && fp->name () == var)
-              extra_message = " (note: variable '" + var + "' shadows function)";
-          }
-      }
-
-    std::string msg = e.message () + extra_message;
-
-    error_with_id (e.err_id (), msg.c_str ());
-  }
-
   octave_lvalue
   tree_index_expression::lvalue (tree_evaluator& tw)
   {
     octave_lvalue retval;
 
     std::list<octave_value_list> idx;
     std::string tmp_type;
 
@@ -259,17 +223,17 @@ namespace octave
         if (tmpi < i)
           {
             try
               {
                 tmp = tmp.subsref (m_type.substr (tmpi, i-tmpi), tmpidx, true);
               }
             catch (index_exception& e)  // problems with range, invalid type etc.
               {
-                final_index_error (e, m_expr);
+                tw.final_index_error (e, m_expr);
               }
 
             tmpidx.clear ();
           }
 
         switch (m_type[i])
           {
           case '(':
