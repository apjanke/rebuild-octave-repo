# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1527003584 14400
#      Tue May 22 11:39:44 2018 -0400
# Node ID ef2b9d4abf4a53ee185084d8399c81aa41b4bc2e
# Parent  6f6479125d80f5f3c0b2d28df1d9d9aecea69aab
eliminate some global variables from tree_evaluator

* debug.cc (F__db_next_breakpoint_quiet__): Define with DEFMETHOD.
* octave-cmd.cc (octave_cmd_debug::execute):
Call F__db_next_breakpoint_quiet__ as an interpreter method.

* pt-eval.h, pt-eval.cc (tree_evaluator::m_current_frame,
tree_evaluator::m_debug_mode,
tree_evaluator::m_quiet_breakpoint_flag): New data members to replace
static data members.
(tree_evaluator::current_frame, tree_evaluator::debug_mode,
tree_evaluator::quiet_breakpoint_flag): New functions.
Adapat usage.

diff --git a/libgui/src/octave-cmd.cc b/libgui/src/octave-cmd.cc
--- a/libgui/src/octave-cmd.cc
+++ b/libgui/src/octave-cmd.cc
@@ -74,29 +74,29 @@ namespace octave
 
     command_editor::accept_line ();
   }
 
   void octave_cmd_debug::execute (interpreter& interp)
   {
     if (m_cmd == "step")
       {
-        F__db_next_breakpoint_quiet__ (ovl (m_suppress_dbg_location));
+        F__db_next_breakpoint_quiet__ (interp, ovl (m_suppress_dbg_location));
         Fdbstep (interp);
       }
     else if (m_cmd == "cont")
       {
-        F__db_next_breakpoint_quiet__ (ovl (m_suppress_dbg_location));
+        F__db_next_breakpoint_quiet__ (interp, ovl (m_suppress_dbg_location));
         Fdbcont (interp);
       }
     else if (m_cmd == "quit")
       Fdbquit (interp);
     else
       {
-        F__db_next_breakpoint_quiet__ (ovl (m_suppress_dbg_location));
+        F__db_next_breakpoint_quiet__ (interp, ovl (m_suppress_dbg_location));
         Fdbstep (interp, ovl (m_cmd.toStdString ()));
       }
 
     command_editor::interrupt (true);
   }
 
   // add a command to the queue
 
diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -1197,18 +1197,18 @@ Return true if in debugging mode, otherw
 @end deftypefn */)
 {
   if (args.length () != 0)
     print_usage ();
 
   return ovl (Vdebugging);
 }
 
-DEFUN (__db_next_breakpoint_quiet__, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (__db_next_breakpoint_quiet__, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn  {} {} __db_next_breakpoint_quiet__ ()
 @deftypefnx {} {} __db_next_breakpoint_quiet__ (@var{flag})
 Disable line info printing at the next breakpoint.
 
 With a logical argument @var{flag}, set the state on or off.
 @end deftypefn */)
 {
   int nargin = args.length ();
@@ -1216,12 +1216,14 @@ With a logical argument @var{flag}, set 
   if (nargin > 1)
     print_usage ();
 
   bool state = true;
 
   if (nargin == 1)
     state = args(0).bool_value ();
 
-  octave::tree_evaluator::quiet_breakpoint_flag = state;
+  octave::tree_evaluator& tw = interp.get_evaluator ();
+
+  tw.quiet_breakpoint_flag (state);
 
   return ovl ();
 }
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -363,19 +363,21 @@ maybe_enter_debugger (octave::execution_
       && ((Vdebug_on_error && bptab.debug_on_err (last_error_id ()))
           || (Vdebug_on_caught && bptab.debug_on_caught (last_error_id ())))
       && cs.caller_user_code ())
     {
       octave::unwind_protect frame;
       frame.protect_var (Vdebug_on_error);
       Vdebug_on_error = false;
 
-      octave::tree_evaluator::debug_mode = true;
+      octave::tree_evaluator& tw
+        = octave::__get_evaluator__ ("maybe_enter_debugger");
 
-      octave::tree_evaluator::current_frame = cs.current_frame ();
+      tw.debug_mode (true);
+      tw.current_frame (cs.current_frame ());
 
       if (show_stack_trace)
         {
           std::string stack_trace = e.info ();
 
           if (! stack_trace.empty ())
             {
               std::cerr << stack_trace;
@@ -762,19 +764,21 @@ warning_1 (const char *id, const char *f
       if ((octave::application::interactive ()
            || octave::application::forced_interactive ())
           && Vdebug_on_warning && in_user_code && bptab.debug_on_warn (id))
         {
           octave::unwind_protect frame;
           frame.protect_var (Vdebug_on_warning);
           Vdebug_on_warning = false;
 
-          octave::tree_evaluator::debug_mode = true;
+          octave::tree_evaluator& tw
+            = octave::__get_evaluator__ ("maybe_enter_debugger");
 
-          octave::tree_evaluator::current_frame = cs.current_frame ();
+          tw.debug_mode (true);
+          tw.current_frame (cs.current_frame ());
 
           do_keyboard (octave_value_list ());
         }
     }
 }
 
 void
 vwarning (const char *fmt, va_list args)
diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -618,18 +618,19 @@ execute_in_debugger_handler (const std::
   octave_link::execute_in_debugger_event (arg.first, arg.second);
 }
 
 static void
 get_debug_input (octave::interpreter& interp, const std::string& prompt)
 {
   octave::unwind_protect frame;
 
-  bool silent = octave::tree_evaluator::quiet_breakpoint_flag;
-  octave::tree_evaluator::quiet_breakpoint_flag = false;
+  octave::tree_evaluator& tw = interp.get_evaluator ();
+
+  bool silent = tw.quiet_breakpoint_flag (false);
 
   octave::call_stack& cs = interp.get_call_stack ();
 
   octave_user_code *caller = cs.caller_user_code ();
   std::string nm;
   int curr_debug_line;
 
   if (caller)
@@ -714,18 +715,16 @@ get_debug_input (octave::interpreter& in
 
       app->interactive (true);
 
       app->forced_interactive (true);
     }
 
   octave::parser curr_parser;
 
-  octave::tree_evaluator& tw = interp.get_evaluator ();
-
   while (Vdebugging)
     {
       try
         {
           Vtrack_line_num = false;
 
           reset_error_handler ();
 
@@ -1068,20 +1067,21 @@ If @code{keyboard} is invoked without ar
   octave::call_stack& cs = interp.get_call_stack ();
 
   frame.add_method (cs, &octave::call_stack::restore_frame,
                     cs.current_frame ());
 
   // Skip the frame assigned to the keyboard function.
   cs.goto_frame_relative (0);
 
-  octave::tree_evaluator::debug_mode = true;
-  octave::tree_evaluator::quiet_breakpoint_flag = false;
+  octave::tree_evaluator& tw = interp.get_evaluator ();
 
-  octave::tree_evaluator::current_frame = cs.current_frame ();
+  tw.debug_mode (true);
+  tw.quiet_breakpoint_flag (false);
+  tw.current_frame (cs.current_frame ());
 
   do_keyboard (interp, args);
 
   return ovl ();
 }
 
 DEFUN (completion_matches, args, nargout,
        doc: /* -*- texinfo -*-
diff --git a/libinterp/parse-tree/bp-table.cc b/libinterp/parse-tree/bp-table.cc
--- a/libinterp/parse-tree/bp-table.cc
+++ b/libinterp/parse-tree/bp-table.cc
@@ -586,17 +586,17 @@ namespace octave
             // If multiple are in the same function, we insert multiple times.
             intmap ret_one;
             if (dbg_fcn
                 && add_breakpoint_1 (dbg_fcn, fname, line, condition, ret_one))
               retval.insert (std::pair<int,int> (i, ret_one.find (i)->second));
           }
       }
 
-    tree_evaluator::debug_mode = bp_table::have_breakpoints () || Vdebugging;
+    m_evaluator.debug_mode (bp_table::have_breakpoints () || Vdebugging);
 
     return retval;
   }
 
   int bp_table::remove_breakpoint_1 (octave_user_code *fcn,
                                      const std::string& fname,
                                      const bp_table::intmap& line)
   {
@@ -682,17 +682,17 @@ namespace octave
               {
                 octave_user_code *dbg_subfcn = q->second.user_code_value ();
 
                 retval += remove_breakpoint_1 (dbg_subfcn, fname, line);
               }
           }
       }
 
-    tree_evaluator::debug_mode = bp_table::have_breakpoints () || Vdebugging;
+    m_evaluator.debug_mode (bp_table::have_breakpoints () || Vdebugging);
 
     return retval;
   }
 
   // Remove all breakpoints from a file, including those in subfunctions.
 
   bp_table::intmap
   bp_table::remove_all_breakpoints_in_file (const std::string& fname,
@@ -716,34 +716,34 @@ namespace octave
             if (it != m_bp_set.end ())
               m_bp_set.erase (it);
           }
       }
     else if (! silent)
       error ("remove_all_breakpoint_in_file: "
              "unable to find function %s\n", fname.c_str ());
 
-    tree_evaluator::debug_mode = bp_table::have_breakpoints () || Vdebugging;
+    m_evaluator.debug_mode (bp_table::have_breakpoints () || Vdebugging);
 
     return retval;
   }
 
   void bp_table::remove_all_breakpoints (void)
   {
     // Odd loop structure required because delete will invalidate
     // m_bp_set iterators.
     for (auto it = m_bp_set.cbegin (), it_next = it;
          it != m_bp_set.cend ();
          it = it_next)
       {
         ++it_next;
         remove_all_breakpoints_in_file (*it);
       }
 
-    tree_evaluator::debug_mode = bp_table::have_breakpoints () || Vdebugging;
+    m_evaluator.debug_mode (bp_table::have_breakpoints () || Vdebugging);
   }
 
   std::string find_bkpt_list (octave_value_list slist, std::string match)
   {
     std::string retval;
 
     for (int i = 0; i < slist.length (); i++)
       {
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -56,22 +56,16 @@ along with Octave; see the file COPYING.
 #include "utils.h"
 #include "variables.h"
 
 //FIXME: This should be part of tree_evaluator
 #include "pt-jit.h"
 
 namespace octave
 {
-  size_t tree_evaluator::current_frame = 0;
-
-  bool tree_evaluator::debug_mode = false;
-
-  bool tree_evaluator::quiet_breakpoint_flag = false;
-
   // Normal evaluator.
 
   void
   tree_evaluator::reset (void)
   {
     m_statement_context = SC_OTHER;
     m_result_type = RT_UNDEFINED;
     m_expr_result_value = octave_value ();
@@ -329,17 +323,17 @@ namespace octave
   {
     if (m_echo_state)
       {
         size_t line = cmd.line ();
         echo_code (line);
         m_echo_file_pos = line + 1;
       }
 
-    if (debug_mode)
+    if (m_debug_mode)
       do_breakpoint (cmd.is_breakpoint (true));
 
     if (m_in_loop_command)
       tree_break_command::breaking = 1;
     else
       error ("break must appear in a loop in the same file as loop command");
   }
 
@@ -411,42 +405,42 @@ namespace octave
   {
     if (m_echo_state)
       {
         size_t line = cmd.line ();
         echo_code (line);
         m_echo_file_pos = line + 1;
       }
 
-    if (debug_mode)
+    if (m_debug_mode)
       do_breakpoint (cmd.is_breakpoint (true));
 
     if (m_in_loop_command)
       tree_continue_command::continuing = 1;
   }
 
   bool
   tree_evaluator::statement_printing_enabled (void)
   {
     return ! (m_silent_functions && (m_statement_context == SC_FUNCTION
                                      || m_statement_context == SC_SCRIPT));
   }
 
   void
   tree_evaluator::reset_debug_state (void)
   {
-    debug_mode = m_bp_table.have_breakpoints () || Vdebugging;
+    m_debug_mode = m_bp_table.have_breakpoints () || Vdebugging;
 
     m_dbstep_flag = 0;
   }
 
   void
   tree_evaluator::reset_debug_state (bool mode)
   {
-    debug_mode = mode;
+    m_debug_mode = mode;
 
     m_dbstep_flag = 0;
   }
 
   Matrix
   tree_evaluator::ignored_fcn_outputs (void) const
   {
     Matrix retval;
@@ -884,17 +878,17 @@ namespace octave
   {
     if (m_echo_state)
       {
         size_t line = cmd.line ();
         echo_code (line);
         m_echo_file_pos = line + 1;
       }
 
-    if (debug_mode)
+    if (m_debug_mode)
       do_breakpoint (cmd.is_breakpoint (true));
 
     tree_decl_init_list *init_list = cmd.initializer_list ();
 
     if (init_list)
       init_list->accept (*this);
   }
 
@@ -970,17 +964,17 @@ namespace octave
     size_t line = cmd.line ();
 
     if (m_echo_state)
       {
         echo_code (line);
         line++;
       }
 
-    if (debug_mode)
+    if (m_debug_mode)
       do_breakpoint (cmd.is_breakpoint (true));
 
     // FIXME: need to handle PARFOR loops here using cmd.in_parallel ()
     // and cmd.maxproc_expr ();
 
     unwind_protect frame;
 
     frame.protect_var (m_in_loop_command);
@@ -1108,17 +1102,17 @@ namespace octave
     size_t line = cmd.line ();
 
     if (m_echo_state)
       {
         echo_code (line);
         line++;
       }
 
-    if (debug_mode)
+    if (m_debug_mode)
       do_breakpoint (cmd.is_breakpoint (true));
 
     unwind_protect frame;
 
     frame.protect_var (m_in_loop_command);
 
     m_in_loop_command = true;
 
@@ -1577,17 +1571,17 @@ namespace octave
     for (tree_if_clause *tic : lst)
       {
         tree_expression *expr = tic->condition ();
 
         if (m_statement_context == SC_FUNCTION
             || m_statement_context == SC_SCRIPT)
           m_call_stack.set_location (tic->line (), tic->column ());
 
-        if (debug_mode && ! tic->is_else_clause ())
+        if (m_debug_mode && ! tic->is_else_clause ())
           do_breakpoint (tic->is_breakpoint (true));
 
         if (tic->is_else_clause () || is_logically_true (expr, "if"))
           {
             tree_statement_list *stmt_lst = tic->commands ();
 
             if (stmt_lst)
               stmt_lst->accept (*this);
@@ -2191,17 +2185,17 @@ namespace octave
   {
     if (m_echo_state)
       {
         size_t line = cmd.line ();
         echo_code (line);
         m_echo_file_pos = line + 1;
       }
 
-    if (debug_mode && cmd.is_end_of_fcn_or_script ())
+    if (m_debug_mode && cmd.is_end_of_fcn_or_script ())
       do_breakpoint (cmd.is_breakpoint (true), true);
   }
 
   void
   tree_evaluator::visit_constant (tree_constant& expr)
   {
     int nargout = m_nargout_stack.top ();
 
@@ -2351,22 +2345,22 @@ namespace octave
   {
     if (m_echo_state)
       {
         size_t line = cmd.line ();
         echo_code (line);
         m_echo_file_pos = line + 1;
       }
 
-    if (debug_mode)
+    if (m_debug_mode)
       do_breakpoint (cmd.is_breakpoint (true));
 
     // Act like dbcont.
 
-    if (Vdebugging && m_call_stack.current_frame () == current_frame)
+    if (Vdebugging && m_call_stack.current_frame () == m_current_frame)
       {
         Vdebugging = false;
 
         reset_debug_state ();
       }
     else if (m_statement_context == SC_FUNCTION
              || m_statement_context == SC_SCRIPT
              || m_in_loop_command)
@@ -2485,17 +2479,17 @@ namespace octave
               {
                 if (m_echo_state)
                   {
                     size_t line = stmt.line ();
                     echo_code (line);
                     m_echo_file_pos = line + 1;
                   }
 
-                if (debug_mode)
+                if (m_debug_mode)
                   do_breakpoint (expr->is_breakpoint (true));
 
                 // FIXME: maybe all of this should be packaged in
                 // one virtual function that returns a flag saying whether
                 // or not the expression will take care of binding ans and
                 // printing the result.
 
                 // FIXME: it seems that we should just have to
@@ -2539,17 +2533,17 @@ namespace octave
             error_with_id ("Octave:bad-alloc",
                            "out of memory or dimension too large for Octave's index type");
           }
         catch (const interrupt_exception&)
           {
             // If we are debugging, then continue with next statement.
             // Otherwise, jump out of here.
 
-            if (debug_mode)
+            if (m_debug_mode)
               interpreter::recover_from_exception ();
             else
               throw;
           }
       }
   }
 
   void
@@ -2620,17 +2614,17 @@ namespace octave
   {
     if (m_echo_state)
       {
         size_t line = cmd.line ();
         echo_code (line);
         m_echo_file_pos = line + 1;
       }
 
-    if (debug_mode)
+    if (m_debug_mode)
       do_breakpoint (cmd.is_breakpoint (true));
 
     tree_expression *expr = cmd.switch_value ();
 
     if (! expr)
       error ("missing value in switch command near line %d, column %d",
              cmd.line (), cmd.column ());
 
@@ -2888,17 +2882,17 @@ namespace octave
     if (! expr)
       panic_impossible ();
 
     for (;;)
       {
         if (m_echo_state)
           m_echo_file_pos = line;
 
-        if (debug_mode)
+        if (m_debug_mode)
           do_breakpoint (cmd.is_breakpoint (true));
 
         if (is_logically_true (expr, "while"))
           {
             tree_statement_list *loop_body = cmd.body ();
 
             if (loop_body)
               loop_body->accept (*this);
@@ -2948,17 +2942,17 @@ namespace octave
         tree_statement_list *loop_body = cmd.body ();
 
         if (loop_body)
           loop_body->accept (*this);
 
         if (quit_loop_now ())
           break;
 
-        if (debug_mode)
+        if (m_debug_mode)
           do_breakpoint (cmd.is_breakpoint (true));
 
         m_call_stack.set_location (until_line, until_column);
 
         if (is_logically_true (expr, "do-until"))
           break;
       }
   }
@@ -3005,29 +2999,29 @@ namespace octave
     bool break_on_this_statement = false;
 
     if (octave_debug_on_interrupt_state)
       {
         break_on_this_statement = true;
 
         octave_debug_on_interrupt_state = false;
 
-        current_frame = m_call_stack.current_frame ();
+        m_current_frame = m_call_stack.current_frame ();
       }
     else if (is_breakpoint)
       {
         break_on_this_statement = true;
 
         m_dbstep_flag = 0;
 
-        current_frame = m_call_stack.current_frame ();
+        m_current_frame = m_call_stack.current_frame ();
       }
     else if (m_dbstep_flag > 0)
       {
-        if (m_call_stack.current_frame () == current_frame)
+        if (m_call_stack.current_frame () == m_current_frame)
           {
             if (m_dbstep_flag == 1 || is_end_of_fcn_or_script)
               {
                 // We get here if we are doing a "dbstep" or a "dbstep N" and the
                 // count has reached 1 so that we must stop and return to debug
                 // prompt.  Alternatively, "dbstep N" has been used but the end
                 // of the frame has been reached so we stop at the last line and
                 // return to prompt.
@@ -3040,47 +3034,47 @@ namespace octave
               {
                 // Executing "dbstep N".  Decrease N by one and continue.
 
                 m_dbstep_flag--;
               }
 
           }
         else if (m_dbstep_flag == 1
-                 && m_call_stack.current_frame () < current_frame)
+                 && m_call_stack.current_frame () < m_current_frame)
           {
             // We stepped out from the end of a function.
 
-            current_frame = m_call_stack.current_frame ();
+            m_current_frame = m_call_stack.current_frame ();
 
             break_on_this_statement = true;
 
             m_dbstep_flag = 0;
           }
       }
     else if (m_dbstep_flag == -1)
       {
         // We get here if we are doing a "dbstep in".
 
         break_on_this_statement = true;
 
         m_dbstep_flag = 0;
 
-        current_frame = m_call_stack.current_frame ();
+        m_current_frame = m_call_stack.current_frame ();
       }
     else if (m_dbstep_flag == -2)
       {
         // We get here if we are doing a "dbstep out".  Check for end of
         // function and whether the current frame is the same as the
         // cached value because we want to step out from the frame where
         // "dbstep out" was evaluated, not from any functions called from
         // that frame.
 
         if (is_end_of_fcn_or_script
-            && m_call_stack.current_frame () == current_frame)
+            && m_call_stack.current_frame () == m_current_frame)
           m_dbstep_flag = -1;
       }
 
     if (break_on_this_statement)
       do_keyboard ();
 
   }
 
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -125,17 +125,18 @@ namespace octave
 
     typedef void (*decl_elt_init_fcn) (tree_decl_elt&);
 
     tree_evaluator (interpreter& interp)
       : m_interpreter (interp), m_statement_context (SC_OTHER),
         m_result_type (RT_UNDEFINED), m_expr_result_value (),
         m_expr_result_value_list (), m_lvalue_list_stack (),
         m_nargout_stack (), m_bp_table (*this), m_call_stack (interp),
-        m_profiler (), m_max_recursion_depth (256),
+        m_profiler (), m_current_frame (0), m_debug_mode (false),
+        m_quiet_breakpoint_flag (false), m_max_recursion_depth (256),
         m_silent_functions (false), m_string_fill_char (' '),
         m_PS4 ("+ "), m_dbstep_flag (0), m_echo (ECHO_OFF),
         m_echo_state (false), m_echo_file_name (), m_echo_file_pos (1),
         m_echo_files (), m_in_loop_command (false),
         m_indexed_object (nullptr), m_index_position (0), m_num_indices (0)
     { }
 
     // No copying!
@@ -252,23 +253,16 @@ namespace octave
     bool statement_printing_enabled (void);
 
     void reset_debug_state (void);
 
     void reset_debug_state (bool mode);
 
     void set_dbstep_flag (int step) { m_dbstep_flag = step; }
 
-    // The number of the stack frame we are currently debugging.
-    static size_t current_frame;
-
-    static bool debug_mode;
-
-    static bool quiet_breakpoint_flag;
-
     // Possible types of evaluation contexts.
     enum stmt_list_type
     {
       SC_FUNCTION,  // function body
       SC_SCRIPT,    // script file
       SC_OTHER      // command-line input or eval string
     };
 
@@ -408,16 +402,43 @@ namespace octave
       int val = m_silent_functions;
       m_silent_functions = b;
       return val;
     }
 
     octave_value
     silent_functions (const octave_value_list& args, int nargout);
 
+    size_t current_frame (void) const { return m_current_frame; }
+
+    size_t current_frame (size_t n)
+    {
+      size_t val = m_current_frame;
+      m_current_frame = n;
+      return val;
+    }
+
+    bool debug_mode (void) const { return m_debug_mode; }
+
+    bool debug_mode (bool flag)
+    {
+      bool val = m_debug_mode;
+      m_debug_mode = flag;
+      return val;
+    }
+
+    bool quiet_breakpoint_flag (void) const { return m_quiet_breakpoint_flag; }
+
+    bool quiet_breakpoint_flag (bool flag)
+    {
+      bool val = m_quiet_breakpoint_flag;
+      m_quiet_breakpoint_flag = flag;
+      return val;
+    }
+
     char string_fill_char (void) const { return m_string_fill_char; }
 
     char string_fill_char (char c)
     {
       int val = m_string_fill_char;
       m_string_fill_char = c;
       return val;
     }
@@ -521,16 +542,23 @@ namespace octave
     value_stack<int> m_nargout_stack;
 
     bp_table m_bp_table;
 
     call_stack m_call_stack;
 
     profiler m_profiler;
 
+    // The number of the stack frame we are currently debugging.
+    size_t m_current_frame;
+
+    bool m_debug_mode;
+
+    bool m_quiet_breakpoint_flag;
+
     // Maximum nesting level for functions, scripts, or sourced files
     // called recursively.
     int m_max_recursion_depth;
 
     // If TRUE, turn off printing of results in functions (as if a
     // semicolon has been appended to each statement).
     bool m_silent_functions;
 
