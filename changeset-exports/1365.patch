# HG changeset patch
# User jwe
# Date 810345005 0
#      Tue Sep 05 23:50:05 1995 +0000
# Node ID 9b26544765020bc14143f8ca6b4ac46cd33df86f
# Parent  353b06ad01943bc64119fa242859f7aeff419e48
[project @ 1995-09-05 23:44:41 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -796,17 +796,17 @@ ComplexMatrix::inverse (int& info, doubl
   volatile double rcond_plus_one = rcond + 1.0;
   if (rcond_plus_one == 1.0)
     {
       info = -1;
       copy (tmp_data, data (), len);  // Restore contents.
     }
   else
     {
-      Complex *dummy;
+      Complex *dummy = 0;
 
       F77_FCN (zgedi, ZGEDI) (tmp_data, nr, nc, ipvt, dummy, z, 1);
     }
 
   delete [] ipvt;
   delete [] z;
 
   return ComplexMatrix (tmp_data, nr, nc);
diff --git a/liboctave/CmplxLU.cc b/liboctave/CmplxLU.cc
--- a/liboctave/CmplxLU.cc
+++ b/liboctave/CmplxLU.cc
@@ -52,19 +52,19 @@ ComplexLU::ComplexLU (const ComplexMatri
     }
 
   int n = a_nr;
 
   int *ipvt = new int [n];
   int *pvt = new int [n];
   Complex *tmp_data = dup (a.data (), a.length ());
   int info = 0;
-  Complex *b;
+  Complex *dummy = 0;
 
-  F77_FCN (zgesv, ZGESV) (n, 0, tmp_data, n, ipvt, b, n, info);
+  F77_FCN (zgesv, ZGESV) (n, 0, tmp_data, n, ipvt, dummy, n, info);
 
   ComplexMatrix A_fact (tmp_data, n, n);
 
   for (int i = 0; i < n; i++)
     {
       ipvt[i] -= 1;
       pvt[i] = i;
     }
diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -293,18 +293,18 @@ DAE::integrate (double tout)
   if (maximum_step_size () >= 0.0)
     {
       rwork[2] = maximum_step_size ();
       info[6] = 1;
     }
   else
     info[6] = 0;
 
-  double *dummy;
-  int *idummy;
+  double *dummy = 0;
+  int *idummy = 0;
 
   if (restart)
     {
       restart = 0;
       info[0] = 0;
     }
 
 // again:
diff --git a/liboctave/EIG.cc b/liboctave/EIG.cc
--- a/liboctave/EIG.cc
+++ b/liboctave/EIG.cc
@@ -66,17 +66,17 @@ EIG::init (const Matrix& a)
   double *tmp_data = dup (a.data (), a.length ());
   double *wr = new double[n];
   double *wi = new double[n];
   Matrix vr (n, n);
   double *pvr = vr.fortran_vec ();
   int lwork = 8*n;
   double *work = new double[lwork];
 
-  double *dummy;
+  double *dummy = 0;
   int idummy = 1;
 
   F77_FCN (dgeev, DGEEV) ("N", "V", n, tmp_data, n, wr, wi, dummy,
 			  idummy, pvr, n, work, lwork, info, 1L, 1L);
 
   lambda.resize (n);
   v.resize (n, n);
 
@@ -138,17 +138,17 @@ EIG::init (const ComplexMatrix& a)
   Complex *pvr = v.fortran_vec ();
 
   Complex *tmp_data = dup (a.data (), a.length ());
 
   int lwork = 8*n;
   Complex *work = new Complex[lwork];
   double *rwork = new double[4*n];
 
-  Complex *dummy;
+  Complex *dummy = 0;
   int idummy = 1;
 
   F77_FCN (zgeev, ZGEEV) ("N", "V", n, tmp_data, n, pw, dummy, idummy,
 			  pvr, n, work, lwork, rwork, info, 1L, 1L);
 
   delete [] tmp_data;
   delete [] work;
   delete [] rwork;
diff --git a/liboctave/NPSOL.cc b/liboctave/NPSOL.cc
--- a/liboctave/NPSOL.cc
+++ b/liboctave/NPSOL.cc
@@ -200,18 +200,17 @@ NPSOL::minimize (double& objf, int& info
   int iter;
   int *istate = new int [n+nclin+ncnln];
 
   // User defined function stuff is defined above in the functions
   // npsol_confun() and npsol_objfun();
 
   // Constraint stuff.
 
-  double dummy;
-  double *pclin = &dummy;
+  double *pclin = 0;
   Matrix clin;
   if (nclin > 0)
     {
       clin = lc.constraint_matrix ();
       pclin  = clin.fortran_vec ();
     }
 
   double *clow = new double [n+nclin+ncnln];
diff --git a/liboctave/QPSOL.cc b/liboctave/QPSOL.cc
--- a/liboctave/QPSOL.cc
+++ b/liboctave/QPSOL.cc
@@ -82,18 +82,17 @@ QPSOL::minimize (double& objf, int& info
  
   int itmax = (iteration_limit () < 0) ? 50 * n : iteration_limit ();
   int msglvl = print_level ();
   int nclin = lc.size ();
   int nctotl = nclin + n;
 
   double bigbnd = infinite_bound ();
 
-  double dummy;
-  double *pa = &dummy;
+  double *pa = 0;
   Matrix clin;
   if (nclin > 0)
     {
       clin = lc.constraint_matrix ();
       pa = clin.fortran_vec ();
     }
 
   double *pbl = new double [nctotl];
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -524,17 +524,17 @@ Matrix::inverse (int& info, double& rcon
   volatile double rcond_plus_one = rcond + 1.0;
   if (rcond_plus_one == 1.0)
     {
       info = -1;
       copy (tmp_data, data (), len);  // Restore matrix contents.
     }
   else
     {
-      double *dummy;
+      double *dummy = 0;
 
       F77_FCN (dgedi, DGEDI) (tmp_data, nr, nc, ipvt, dummy, z, 1);
     }
 
   delete [] ipvt;
   delete [] z;
 
   return Matrix (tmp_data, nr, nc);
@@ -2182,20 +2182,20 @@ operator >> (istream& is, Matrix& a)
 	    else
 	      break;
 	  }
     }
 
   return is;
 }
 
-// Read an array of data froma file in binary format.
+// Read an array of data from a file in binary format.
 
 int
-Matrix::read (FILE *fptr, char *type)
+Matrix::read (FILE *fptr, const char *type)
 {
   // Allocate buffer pointers.
 
   union
     {
       void *vd;
       char *ch;
       u_char *uc;
@@ -2262,17 +2262,17 @@ Matrix::read (FILE *fptr, char *type)
     }
 
   return count;
 }
 
 // Write the data array to a file in binary format.
 
 int
-Matrix::write (FILE *fptr, char *type)
+Matrix::write (FILE *fptr, const char *type)
 {
   // Allocate buffer pointers.
 
   union
     {
       void *vd;
       char *ch;
       u_char *uc;
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -225,18 +225,18 @@ public:
   RowVector column_max (void) const;
   RowVector column_max_loc (void) const;
 
   // i/o
 
   friend ostream& operator << (ostream& os, const Matrix& a);
   friend istream& operator >> (istream& is, Matrix& a);
 
-  int read (FILE *fptr, char *type);
-  int write (FILE *fptr, char *type);
+  int read (FILE *fptr, const char *type);
+  int write (FILE *fptr, const char *type);
 
 private:
 
   Matrix (double *d, int r, int c) : MArray2<double> (d, r, c) { }
 };
 
 #endif
 
diff --git a/liboctave/dbleLU.cc b/liboctave/dbleLU.cc
--- a/liboctave/dbleLU.cc
+++ b/liboctave/dbleLU.cc
@@ -52,19 +52,19 @@ LU::LU (const Matrix& a)
     }
 
   int n = a_nr;
 
   int *ipvt = new int [n];
   int *pvt = new int [n];
   double *tmp_data = dup (a.data (), a.length ());
   int info = 0;
-  double b;
+  double dummy = 0;
 
-  F77_FCN (dgesv, DGESV) (n, 0, tmp_data, n, ipvt, b, n, info);
+  F77_FCN (dgesv, DGESV) (n, 0, tmp_data, n, ipvt, dummy, n, info);
 
   Matrix A_fact (tmp_data, n, n);
 
   for (int i = 0; i < n; i++)
     {
       ipvt[i] -= 1;
       pvt[i] = i;
     }
