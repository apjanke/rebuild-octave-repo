# HG changeset patch
# User Carnë Draug <carandraug@octave.org>
# Date 1466443458 -3600
#      Mon Jun 20 18:24:18 2016 +0100
# Node ID 89423997486819a9705d92f123e6f005d4d6fa37
# Parent  d31e0f704d0ba3289bd97cf4798d66689ba259c3
colormap: remove functionality to list and register colormaps (bug #48272)

* colormap.m: remove the unused functionality which clashes with the
possibility of having a colormap named list. It's also not that useful
since there's no requirement to register a colormap, and therefore no
guarantees that the list is complete.
* autumn.m, bone.m, cool.m, copper.m, cubehelix.m, flag.m, gray.m,
hot.m, hsv.m, jet.m, lines.m, ocean.m, pink.m, prism.m, rainbow.m,
spring.m, summer.m, viridis.m, white.m, winter.m: remove registration
to colormap().

diff --git a/scripts/image/autumn.m b/scripts/image/autumn.m
--- a/scripts/image/autumn.m
+++ b/scripts/image/autumn.m
@@ -24,19 +24,16 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-## PKG_ADD: colormap ("register", "autumn");
-## PKG_DEL: colormap ("unregister", "autumn");
-
 function map = autumn (n = rows (colormap ()))
 
   if (nargin > 1)
     print_usage ();
   elseif (! isscalar (n))
     error ("autumn: N must be a scalar");
   endif
   n = double (n);
diff --git a/scripts/image/bone.m b/scripts/image/bone.m
--- a/scripts/image/bone.m
+++ b/scripts/image/bone.m
@@ -24,19 +24,16 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-## PKG_ADD: colormap ("register", "bone");
-## PKG_DEL: colormap ("unregister", "bone");
-
 function map = bone (n = rows (colormap ()))
 
   if (nargin > 1)
     print_usage ();
   elseif (! isscalar (n))
     error ("bone: N must be a scalar");
   endif
   n = double (n);
diff --git a/scripts/image/colormap.m b/scripts/image/colormap.m
--- a/scripts/image/colormap.m
+++ b/scripts/image/colormap.m
@@ -15,80 +15,67 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {@var{cmap} =} colormap ()
 ## @deftypefnx {} {@var{cmap} =} colormap (@var{map})
-## @deftypefnx {} {@var{cmap} =} colormap ("default")
-## @deftypefnx {} {@var{cmap} =} colormap ("@var{map_name}")
+## @deftypefnx {} {@var{cmap} =} colormap (@qcode{"default"})
+## @deftypefnx {} {@var{cmap} =} colormap (@var{map_name})
 ## @deftypefnx {} {@var{cmap} =} colormap (@var{hax}, @dots{})
 ## @deftypefnx {} {} colormap @var{map_name}
-## @deftypefnx {} {@var{cmaps} =} colormap ("list")
-## @deftypefnx {} {} colormap ("register", "@var{name}")
-## @deftypefnx {} {} colormap ("unregister", "@var{name}")
 ## Query or set the current colormap.
 ##
 ## With no input arguments, @code{colormap} returns the current color map.
 ##
 ## @code{colormap (@var{map})} sets the current colormap to @var{map}.  The
 ## colormap should be an @var{n} row by 3 column matrix.  The columns
 ## contain red, green, and blue intensities respectively.  All entries
 ## must be between 0 and 1 inclusive.  The new colormap is returned.
 ##
-## @code{colormap ("default")} restores the default colormap (the
+## @code{colormap (@qcode{"default"})} restores the default colormap (the
 ## @code{viridis} map with 64 entries).  The default colormap is returned.
 ##
-## The map may also be specified by a string, @qcode{"@var{map_name}"}, where
-## @var{map_name} is the name of a function that returns a colormap.
+## The map may also be specified by a string, @var{map_name}, which
+## is the name of a function that returns a colormap.
 ##
 ## If the first argument @var{hax} is an axes handle, then the colormap for
 ## the parent figure of @var{hax} is queried or set.
 ##
 ## For convenience, it is also possible to use this function with the
 ## command form, @code{colormap @var{map_name}}.
 ##
-## @code{colormap ("list")} returns a cell array with all of the available
-## colormaps.  The options @qcode{"register"} and @qcode{"unregister"}
-## add or remove the colormap @var{name} from this list.
-##
 ## @seealso{viridis}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
 function cmap = colormap (varargin)
 
-  mlock; # prevent map_list to be cleared by "clear all"
-  persistent map_list = cell ();
-
   [hax, varargin, nargin] = __plt_get_axis_arg__ ("colormap", varargin{:});
 
-  if (nargin > 2)
+  if (nargin > 1)
     print_usage ();
   endif
 
   if (! isempty (hax))
     cf = ancestor (hax, "figure");
   else
     cf = get (0, "currentfigure");
   endif
 
   if (nargin == 1)
     map = varargin{1};
     if (ischar (map))
       if (strcmp (map, "default"))
         map = viridis (64);
-      elseif (strcmp (map, "list"))
-        cmap = map_list;
-        return;
       else
         map = feval (map);
       endif
     endif
 
     if (! isempty (map))
       if (! (isnumeric (map) && isreal (map)
              && ndims (map) == 2 && columns (map) == 3))
@@ -98,33 +85,20 @@ function cmap = colormap (varargin)
         error ("colormap: all MAP values must be in the range [0,1]");
       endif
       if (isempty (cf))
         cf = gcf ();
       endif
       ## Set the new color map
       set (cf, "colormap", map);
     endif
-
-  elseif (nargin == 2)
-    opt = varargin{1};
-    name = varargin{2};
-    if (! ischar (opt) || ! any (strcmp (opt, {"register", "unregister"})))
-      print_usage ();
-    elseif (! ischar (name))
-      error ("colormap: to register/unregister a colormap, NAME must be a string");
-    elseif (strcmp (opt, "register"))
-      map_list{end+1} = name;
-    elseif (strcmp (opt, "unregister"))
-      map_list(strcmp (name, map_list)) = [];
-    endif
   endif
 
   ## Return current color map.
-  if (nargout > 0 || (nargout == 0 && nargin == 0))
+  if (nargout > 0 || nargin == 0)
     if (isempty (cf))
       cf = gcf ();
     endif
     cmap = get (cf, "colormap");
   endif
 
 endfunction
 
@@ -155,40 +129,18 @@ endfunction
 %!   colormap ("default");
 %!   assert (colormap (), viridis (64));
 %!   colormap ("ocean");
 %!   assert (colormap, ocean (64));
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
-%!test
-%! hf = figure ("visible", "off");
-%! unwind_protect
-%!   cmaplst = colormap ("list");
-%!   assert (iscell (cmaplst));
-%!   colormap ("register", "__mycmap__");
-%!   cmaplst2 = colormap ("list");
-%!   assert (numel (cmaplst2), numel (cmaplst) + 1);
-%!   assert (any (strcmp (cmaplst2, "__mycmap__")));
-%!   colormap ("unregister", "__mycmap__");
-%!   cmaplst2 = colormap ("list");
-%!   assert (numel (cmaplst2), numel (cmaplst));
-%!   assert (! any (strcmp (cmaplst2, "__mycmap__")));
-%!   ## Unregister again and verify that nothing has happened
-%!   colormap ("unregister", "__mycmap__");
-%!   cmaplst3 = colormap ("list");
-%!   assert (isequal (cmaplst2, cmaplst3));
-%! unwind_protect_cleanup
-%!   close (hf);
-%! end_unwind_protect
-
 ## Test input validation
 %!error colormap (1,2,3)
 %!error <MAP must be a real-valued N x 3> colormap ({1,2,3})
 %!error <MAP must be a real-valued N x 3> colormap ([1 i 1])
 %!error <MAP must be a real-valued N x 3> colormap (ones(3,3,3))
 %!error <MAP must be a real-valued N x 3> colormap ([1 0 1 0])
 %!error <all MAP values must be in the range> colormap ([-1 0 0])
 %!error <all MAP values must be in the range> colormap ([2 0 0])
 %!error colormap ("invalid", "name")
-%!error <NAME must be a string> colormap ("register", 1)
 
diff --git a/scripts/image/cool.m b/scripts/image/cool.m
--- a/scripts/image/cool.m
+++ b/scripts/image/cool.m
@@ -23,19 +23,16 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-## PKG_ADD: colormap ("register", "cool");
-## PKG_DEL: colormap ("unregister", "cool");
-
 function map = cool (n = rows (colormap ()))
 
   if (nargin > 1)
     print_usage ();
   elseif (! isscalar (n))
     error ("cool: N must be a scalar");
   endif
   n = double (n);
diff --git a/scripts/image/copper.m b/scripts/image/copper.m
--- a/scripts/image/copper.m
+++ b/scripts/image/copper.m
@@ -24,19 +24,16 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-## PKG_ADD: colormap ("register", "copper");
-## PKG_DEL: colormap ("unregister", "copper");
-
 function map = copper (n = rows (colormap ()))
 
   if (nargin > 1)
     print_usage ();
   elseif (! isscalar (n))
     error ("copper: N must be a scalar");
   endif
   n = double (n);
diff --git a/scripts/image/cubehelix.m b/scripts/image/cubehelix.m
--- a/scripts/image/cubehelix.m
+++ b/scripts/image/cubehelix.m
@@ -38,19 +38,16 @@
 ## @cite{"A @nospell{colour} scheme for the display of astronomical intensity
 ## images"}, Bulletin of the Astronomical Society of India, 39, 289.
 ##
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author: Carnë Draug <carandraug@octave.org>
 
-## PKG_ADD: colormap ("register", "cubehelix");
-## PKG_DEL: colormap ("unregister", "cubehelix");
-
 function map = cubehelix (n = rows (colormap ()), start = 0.5,
                           rots = -1.5, hue = 1, gamma = 1)
 
   if (nargin > 5)
     print_usage ();
   elseif (! isscalar (n))
     error ("cubehelix: N must be a scalar");
   endif
diff --git a/scripts/image/flag.m b/scripts/image/flag.m
--- a/scripts/image/flag.m
+++ b/scripts/image/flag.m
@@ -24,19 +24,16 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-## PKG_ADD: colormap ("register", "flag");
-## PKG_DEL: colormap ("unregister", "flag");
-
 function map = flag (n = rows (colormap ()))
 
   if (nargin > 1)
     print_usage ();
   elseif (! isscalar (n))
     error ("flag: N must be a scalar");
   endif
 
diff --git a/scripts/image/gray.m b/scripts/image/gray.m
--- a/scripts/image/gray.m
+++ b/scripts/image/gray.m
@@ -26,19 +26,16 @@
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
-## PKG_ADD: colormap ("register", "gray");
-## PKG_DEL: colormap ("unregister", "gray");
-
 function map = gray (n = rows (colormap ()))
 
   if (nargin > 1)
     print_usage ();
   elseif (! isscalar (n))
     error ("gray: N must be a scalar");
   endif
   n = double (n);
diff --git a/scripts/image/hot.m b/scripts/image/hot.m
--- a/scripts/image/hot.m
+++ b/scripts/image/hot.m
@@ -24,19 +24,16 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-## PKG_ADD: colormap ("register", "hot");
-## PKG_DEL: colormap ("unregister", "hot");
-
 function map = hot (n = rows (colormap ()))
 
   if (nargin > 1)
     print_usage ();
   elseif (! isscalar (n))
     error ("hot: N must be a scalar");
   endif
 
diff --git a/scripts/image/hsv.m b/scripts/image/hsv.m
--- a/scripts/image/hsv.m
+++ b/scripts/image/hsv.m
@@ -28,19 +28,16 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-## PKG_ADD: colormap ("register", "hsv");
-## PKG_DEL: colormap ("unregister", "hsv");
-
 function map = hsv (n = rows (colormap ()))
 
   if (nargin > 1)
     print_usage ();
   elseif (! isscalar (n))
     error ("hsv: N must be a scalar");
   endif
   n = double (n);
diff --git a/scripts/image/jet.m b/scripts/image/jet.m
--- a/scripts/image/jet.m
+++ b/scripts/image/jet.m
@@ -24,19 +24,16 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-## PKG_ADD: colormap ("register", "jet");
-## PKG_DEL: colormap ("unregister", "jet");
-
 function map = jet (n = rows (colormap ()))
 
   if (nargin > 1)
     print_usage ();
   elseif (! isscalar (n))
     error ("jet: N must be a scalar");
   endif
 
diff --git a/scripts/image/lines.m b/scripts/image/lines.m
--- a/scripts/image/lines.m
+++ b/scripts/image/lines.m
@@ -23,19 +23,16 @@
 ## in the current axes @qcode{"ColorOrder"} property.  The default is blue,
 ## green, red, cyan, pink, yellow, and gray.
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
-## PKG_ADD: colormap ("register", "lines");
-## PKG_DEL: colormap ("unregister", "lines");
-
 function map = lines (n = rows (colormap ()))
 
   if (nargin > 1)
     print_usage ();
   elseif (! isscalar (n))
     error ("lines: N must be a scalar");
   endif
 
diff --git a/scripts/image/ocean.m b/scripts/image/ocean.m
--- a/scripts/image/ocean.m
+++ b/scripts/image/ocean.m
@@ -26,19 +26,16 @@
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
-## PKG_ADD: colormap ("register", "ocean");
-## PKG_DEL: colormap ("unregister", "ocean");
-
 function map = ocean (n = rows (colormap ()))
 
   if (nargin > 1)
     print_usage ();
   elseif (! isscalar (n))
     error ("ocean: N must be a scalar");
   endif
   n = double (n);
diff --git a/scripts/image/pink.m b/scripts/image/pink.m
--- a/scripts/image/pink.m
+++ b/scripts/image/pink.m
@@ -26,19 +26,16 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-## PKG_ADD: colormap ("register", "pink");
-## PKG_DEL: colormap ("unregister", "pink");
-
 function map = pink (n = rows (colormap ()))
 
   if (nargin > 1)
     print_usage ();
   elseif (! isscalar (n))
     error ("pink: N must be a scalar");
   endif
 
diff --git a/scripts/image/prism.m b/scripts/image/prism.m
--- a/scripts/image/prism.m
+++ b/scripts/image/prism.m
@@ -24,19 +24,16 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-## PKG_ADD: colormap ("register", "prism");
-## PKG_DEL: colormap ("unregister", "prism");
-
 function map = prism (n = rows (colormap ()))
 
   if (nargin > 1)
     print_usage ();
   elseif (! isscalar (n))
     error ("prism: N must be a scalar");
   endif
 
diff --git a/scripts/image/rainbow.m b/scripts/image/rainbow.m
--- a/scripts/image/rainbow.m
+++ b/scripts/image/rainbow.m
@@ -27,19 +27,16 @@
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## this colormap is not part of matlab, it is like the prism
 ## colormap map but with a continuous map
 
-## PKG_ADD: colormap ("register", "rainbow");
-## PKG_DEL: colormap ("unregister", "rainbow");
-
 function map = rainbow (n = rows (colormap ()))
 
   if (nargin > 1)
     print_usage ();
   elseif (! isscalar (n))
     error ("rainbow: N must be a scalar");
   endif
   n = double (n);
diff --git a/scripts/image/spring.m b/scripts/image/spring.m
--- a/scripts/image/spring.m
+++ b/scripts/image/spring.m
@@ -23,19 +23,16 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-## PKG_ADD: colormap ("register", "spring");
-## PKG_DEL: colormap ("unregister", "spring");
-
 function map = spring (n = rows (colormap ()))
 
   if (nargin > 1)
     print_usage ();
   elseif (! isscalar (n))
     error ("spring: N must be a scalar");
   endif
   n = double (n);
diff --git a/scripts/image/summer.m b/scripts/image/summer.m
--- a/scripts/image/summer.m
+++ b/scripts/image/summer.m
@@ -24,19 +24,16 @@
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 ## Date:  06/03/2000
 
-## PKG_ADD: colormap ("register", "summer");
-## PKG_DEL: colormap ("unregister", "summer");
-
 function map = summer (n = rows (colormap ()))
 
   if (nargin > 1)
     print_usage ();
   elseif (! isscalar (n))
     error ("summer: N must be a scalar");
   endif
   n = double (n);
diff --git a/scripts/image/viridis.m b/scripts/image/viridis.m
--- a/scripts/image/viridis.m
+++ b/scripts/image/viridis.m
@@ -27,19 +27,16 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author: Carlo de Falco
 
-## PKG_ADD: colormap ("register", "viridis");
-## PKG_DEL: colormap ("unregister", "viridis");
-
 ## This is a port to Octave of the default matplotlib colormap "viridis"
 ## by Eric Firing.  The original file is distributed under CC0:
 ## http://creativecommons.org/publicdomain/zero/1.0
 
 function map = viridis (n = rows (colormap ()))
 
   if (nargin > 1)
     print_usage ();
diff --git a/scripts/image/white.m b/scripts/image/white.m
--- a/scripts/image/white.m
+++ b/scripts/image/white.m
@@ -23,19 +23,16 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-## PKG_ADD: colormap ("register", "white");
-## PKG_DEL: colormap ("unregister", "white");
-
 function map = white (n = rows (colormap ()))
 
   if (nargin > 1)
     print_usage ();
   elseif (! isscalar (n))
     error ("white: N must be a scalar");
   endif
 
diff --git a/scripts/image/winter.m b/scripts/image/winter.m
--- a/scripts/image/winter.m
+++ b/scripts/image/winter.m
@@ -23,19 +23,16 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-## PKG_ADD: colormap ("register", "winter");
-## PKG_DEL: colormap ("unregister", "winter");
-
 function map = winter (n = rows (colormap ()))
 
   if (nargin > 1)
     print_usage ();
   elseif (! isscalar (n))
     error ("winter: N must be a scalar");
   endif
   n = double (n);
