# HG changeset patch
# User Rik <rik@octave.org>
# Date 1471367254 25200
#      Tue Aug 16 10:07:34 2016 -0700
# Node ID 533c3c4059a3be8fb412ba622e5c1cdd2c1a2a99
# Parent  ee54a83a89ad38adbf464b05c7ed8aa01091180d
Add titles to more of the graphic demos.

* imagesc.m, imshow.m, axis.m, daspect.m, datetick.m, material.m, camlight.m,
compass.m, isocaps.m, isonormals.m, isosurface.m, light.m, loglog.m, patch.m,
plot.m, plotyy.m, semilogx.m, semilogy.m, surfnorm.m, trisurf.m, hold.m:
Add titles to more of the graphic demos.

diff --git a/scripts/image/imagesc.m b/scripts/image/imagesc.m
--- a/scripts/image/imagesc.m
+++ b/scripts/image/imagesc.m
@@ -146,38 +146,38 @@ endfunction
 %! colormap ("default");
 %! g = 0.1:0.1:10;
 %! h = g'*g;
 %! imagesc (g, g, sin (h));
 %! hold on;
 %! imagesc (g, g+12, cos (h/2));
 %! axis ([0 10 0 22]);
 %! hold off;
-%! title ("two consecutive images");
+%! title ("two consecutive images w/hold()");
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! g = 0.1:0.1:10;
 %! h = g'*g;
 %! imagesc (g, g, sin (h));
 %! hold on;
 %! plot (g, 11.0 * ones (size (g)));
 %! imagesc (g, g+12, cos (h/2));
 %! axis ([0 10 0 22]);
 %! hold off;
-%! title ("image, line, image");
+%! title ("image, line, image w/hold()");
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! g = 0.1:0.1:10;
 %! h = g'*g;
 %! plot (g, 10.5 * ones (size (g)));
 %! hold on;
 %! imagesc (g, g, sin (h));
 %! plot (g, 11.0 * ones (size (g)));
 %! imagesc (g, g+12, cos (h/2));
 %! plot (g, 11.5 * ones (size (g)));
 %! axis ([0 10 0 22]);
 %! hold off;
-%! title ("line, image, line, image, line");
+%! title ("line, image, line, image, line w/hold()");
 
diff --git a/scripts/image/imshow.m b/scripts/image/imshow.m
--- a/scripts/image/imshow.m
+++ b/scripts/image/imshow.m
@@ -235,29 +235,33 @@ endfunction
 %! clf;
 %! [I, M] = imread ("default.img");
 %! [R, G, B] = ind2rgb (I, M);
 %! imshow (cat (3, R, G*0.5, B*0.8));
 
 %!demo
 %! clf;
 %! imshow (rand (100, 100));
-
-%!demo
-%! clf;
-%! imshow (rand (100, 100, 3));
-
-%!demo
-%! clf;
-%! imshow (100*rand (100, 100, 3));
+%! title ({"imshow with random 100x100 matrix", "black and white"});
 
 %!demo
 %! clf;
 %! imshow (rand (100, 100));
 %! colormap (jet (64));
+%! title ({"imshow with random 100x100 matrix, "colormap() makes color image"});
+
+%!demo
+%! clf;
+%! imshow (rand (100, 100, 3));
+%! title ({"imshow with random 100x100x3 matrix", "RGB color"});
+
+%!demo
+%! clf;
+%! imshow (100*rand (100, 100, 3));
+%! title ({"imshow with random 100x100x3 matrix", "Indexed color"});
 
 ## Test input validation
 %!error imshow ()
 %!error <IM must be an image> imshow ({"cell"})
 %!error <TrueColor image must be uint8> imshow (ones (3,3,3, "uint32"))
 %!error <TrueColor image must be uint8> imshow (ones (3,3,3, "int16"))
 %!error <image must be MxN or MxNx3 matrix> imshow (ones (4,4,4))
 
diff --git a/scripts/plot/appearance/axis.m b/scripts/plot/appearance/axis.m
--- a/scripts/plot/appearance/axis.m
+++ b/scripts/plot/appearance/axis.m
@@ -404,43 +404,46 @@ endfunction
 %! x = sin (t);
 %!
 %! subplot (221);
 %!  plot (t, x);
 %!  title ("normal plot");
 %!
 %! subplot (222);
 %!  plot (t, x);
-%!  title ("square plot");
+%!  title ("axis square");
 %!  axis ("square");
 %!
 %! subplot (223);
 %!  plot (t, x);
-%!  title ("equal plot");
+%!  title ("axis equal");
 %!  axis ("equal");
 %!
 %! subplot (224);
 %!  plot (t, x);
 %!  title ("normal plot again");
 %!  axis ("normal");
 
 %!demo
 %! clf;
 %! t = 0:0.01:2*pi;
 %! x = sin (t);
 %!
 %! subplot (121);
 %!  plot (t, x);
-%!  title ("ij plot");
+%!  title ({"axis ij", "Y-axis reversed"});
 %!  axis ("ij");
+%!  legend ("sine");
 %!
 %! subplot (122);
 %!  plot (t, x);
-%!  title ("xy plot");
+%!  title ("axis xy");
+%!  title ({"axis ij", "Y-axis normal"});
 %!  axis ("xy");
+%!  legend ("sine");
 
 %!demo
 %! clf;
 %! t = 0:0.01:2*pi;
 %! x = sin (t);
 %!
 %! subplot (331);
 %!  plot (t, x);
diff --git a/scripts/plot/appearance/daspect.m b/scripts/plot/appearance/daspect.m
--- a/scripts/plot/appearance/daspect.m
+++ b/scripts/plot/appearance/daspect.m
@@ -98,46 +98,46 @@ endfunction
 
 
 %!demo
 %! clf;
 %! x = 0:0.01:4;
 %! plot (x,cos(x), x,sin(x));
 %! axis square;
 %! daspect ([1 1 1]);
-%! title ("square plot-box with axis limits [0, 4, -2, 2]");
+%! title ("square plot box with axis limits [0, 4, -2, 2]");
 
 %!demo
 %! clf;
 %! x = 0:0.01:4;
 %! plot (x,cos (x), x,sin (x));
 %! axis ([0 4 -1 1]);
 %! daspect ([2 1 1]);
-%! title ("square plot-box with axis limits [0, 4, -1, 1]");
+%! title ("square plot box with axis limits [0, 4, -1, 1]");
 
 %!demo
 %! clf;
 %! x = 0:0.01:4;
 %! plot (x,cos(x), x,sin(x));
 %! daspect ([1 2 1]);
 %! pbaspect ([2 1 1]);
 %! title ("2x1 plot box with axis limits [0, 4, -2, 2]");
 
 %!demo
 %! clf;
 %! x = 0:0.01:4;
 %! plot (x,cos(x), x, sin(x));
 %! axis square;
 %! set (gca, "activepositionproperty", "position");
 %! daspect ([1 1 1]);
-%! title ("square plot-box with axis limits [0, 4, -2, 2]");
+%! title ("square plot box with axis limits [0, 4, -2, 2]");
 
 %!demo
 %! clf;
 %! x = 0:0.01:4;
 %! plot (x,cos(x), x,sin(x));
 %! axis ([0 4 -1 1]);
 %! set (gca, "activepositionproperty", "position");
 %! daspect ([2 1 1]);
-%! title ("square plot-box with axis limits [0, 4, -1, 1]");
+%! title ("square plot box with axis limits [0, 4, -1, 1]");
 
 ## FIXME: need some input validation tests
 
diff --git a/scripts/plot/appearance/datetick.m b/scripts/plot/appearance/datetick.m
--- a/scripts/plot/appearance/datetick.m
+++ b/scripts/plot/appearance/datetick.m
@@ -64,28 +64,30 @@ endfunction
 
 
 %!demo
 %! clf;
 %! yr = 1900:10:2000;
 %! pop = [76.094, 92.407, 106.461, 123.077 131.954, 151.868, 179.979, ...
 %!        203.984, 227.225, 249.623, 282.224];
 %! plot (datenum (yr, 1, 1), pop);
-%! title ("US population (millions)");
 %! xlabel ("Year");
+%! ylabel ("US population (millions)");
+%! title ("datetick() with 4-digit year format");
 %! datetick ("x", "YYYY");
 
 %!demo
 %! clf;
 %! yr = 1988:2:2002;
 %! yr = datenum (yr,1,1);
 %! pr = [12.1 13.3 12.6 13.1 13.3 14.1 14.4 15.2];
 %! plot (yr, pr, "-o");
 %! xlabel ("year");
 %! ylabel ("average price");
+%! title ("datetick() with MM/DD/YY format");
 %! ax = gca;
 %! set (ax, "xtick", datenum (1990:5:2005,1,1));
 %! datetick ("x", 2, "keepticks");
 %! set (ax, "ytick", 12:16);
 
 ## Remove from test statistics.  No real tests possible.
 %!assert (1)
 
diff --git a/scripts/plot/appearance/material.m b/scripts/plot/appearance/material.m
--- a/scripts/plot/appearance/material.m
+++ b/scripts/plot/appearance/material.m
@@ -198,28 +198,31 @@ endfunction
 %! [x,y,z] = meshgrid (-2:0.2:2, -2:0.2:2, -2:0.2:2);
 %! val = x.^2 + y.^2 + z.^2;
 %! fv1 = isosurface (x, y, z, val, 1);
 %! h_patch = patch (fv1, "FaceColor", "r", "EdgeColor", "none", ...
 %!                       "FaceLighting", "Gouraud");
 %! isonormals (x, y, z, val, h_patch);
 %! axis equal;  axis tight;
 %! view (3);
+%! box off;
 %! drawnow ();
 %! light ();
 %! material ([0 0.5 1 10 .5]);
+%! title ("material() with numeric input"); 
 
 %!demo
 %! clf;
 %! ## surface
 %! hax = axes ();
 %! surf (hax, peaks, "LineStyle", "none", "FaceLighting", "Gouraud");
 %! view (3);
 %! light ();
 %! material metal;
+%! title ("material metal");
 
 %!test
 %! hf = figure ("Visible", "off");
 %! unwind_protect
 %!   hp = patch;
 %!   hs = surface;
 %!   material dull
 %!   assert (get (hp, "ambientstrength"), 0.3);
diff --git a/scripts/plot/draw/camlight.m b/scripts/plot/draw/camlight.m
--- a/scripts/plot/draw/camlight.m
+++ b/scripts/plot/draw/camlight.m
@@ -199,35 +199,37 @@ endfunction
 
 %!demo
 %! ## Adding lights to a scene
 %! sphere (64);
 %! camlight
 %!
 %! ## Add a second light
 %! camlight left
+%!
+%! title ({"camlight()", "lights are left and right"});
 
 %!demo
 %! sphere (48);
-%! title ("This light has a fixed position, even if the camera moves");
+%! title ({"camlight()", "light in fixed position ignores camera change"});
 %! axis equal;
 %! shading flat;
 %! view (30, 30);
 %!
 %! camlight
 %!
 %! for a = 30:2:390
 %!   view (a, 30);
 %!   drawnow ();
 %!   pause (0.01);
 %! endfor
 
 %!demo
 %! sphere (48);
-%! title ("Move the camera and update the light position");
+%! title ({"camlight()", "update light position with camera change"});
 %! axis equal;  shading flat
 %! view (30, 30);
 %!
 %! hl = camlight ();          # keep a handle to the light
 %!
 %! for a = 30:2:390
 %!   view (a, 30);
 %!   camlight (hl, "right");  # update light position
diff --git a/scripts/plot/draw/compass.m b/scripts/plot/draw/compass.m
--- a/scripts/plot/draw/compass.m
+++ b/scripts/plot/draw/compass.m
@@ -122,16 +122,17 @@ endfunction
 
 
 %!demo
 %! clf;
 %! randn_9x1_data = [-2.555884; 0.394974; -0.191871; -1.147024; 1.355425; -0.437335; -0.014370; -0.941312; 1.240300];
 %! randn_1x9_data = [1.42934, -1.10821, -1.70404, 0.63357, -0.68337, -1.19771, -0.96502, -1.12810, 0.22457];
 %! a = toeplitz ([1;randn_9x1_data], [1,randn_1x9_data]);
 %! compass (eig (a));
+%! title ("compass() example");
 
 ## Test input validation
 %!error compass ()
 %!error compass (1,2,3,4)
 %!error compass (1, "-r", 2)
 %!error <invalid linestyle STYLE> compass (1, "abc")
 %!error <invalid linestyle STYLE> compass (1, {1})
 
diff --git a/scripts/plot/draw/isocaps.m b/scripts/plot/draw/isocaps.m
--- a/scripts/plot/draw/isocaps.m
+++ b/scripts/plot/draw/isocaps.m
@@ -387,16 +387,17 @@ endfunction
 %!        "FaceLighting", "gouraud", ...
 %!        "VertexNormals", repmat([0 -1 0], rows (fvc_ymin.vertices), 1));
 %! fvc_zmax = isocaps (x, y, z, v, isoval, "zmax", "b");
 %! patch (fvc_zmax, "FaceColor", "interp", "EdgeColor", "none", ...
 %!        "FaceLighting", "gouraud", ...
 %!        "VertexNormals", repmat([0 -1 0], rows (fvc_zmax.vertices), 1));
 %! axis equal;
 %! light ();
+%! title ({"isocaps()", "sphere with 6 end-caps"});
 
 %!demo
 %! v = smooth3 (rand (6, 8, 4));
 %! isoval = .5;
 %! x = 1:3:22;  y = -14:5:11;  z = linspace (16, 18, 4);
 %! [xx, yy, zz] = meshgrid (x, y, z);
 %! clf;
 %! ## two arguments, no output
diff --git a/scripts/plot/draw/isonormals.m b/scripts/plot/draw/isonormals.m
--- a/scripts/plot/draw/isonormals.m
+++ b/scripts/plot/draw/isonormals.m
@@ -153,17 +153,17 @@ endfunction
 %!  isonormals (x, y, z, val, hp);  # Directly modify patch
 %!  isofinish (hp);
 %!
 %! subplot (2,2,3);
 %!  view (-38, 20);
 %!  hp = patch ("Faces", fac, "Vertices", vert, "FaceVertexCData", cdat);
 %!  vn = isonormals (x, y, z, val, vert);  # Compute normals of isosurface
 %!  set (hp, "VertexNormals", vn);         # Manually set vertex normals
-%!  title ('"VertexNormals" from isonormals manually set');
+%!  title ('set "VertexNormals" from isonormals');
 %!  isofinish (hp);
 %!
 %! subplot (2,2,4);
 %!  view (-38, 20);
 %!  hp = patch ("Faces", fac, "Vertices", vert, "FaceVertexCData", cdat);
 %!  isonormals (x, y, z, val, hp, "negate");  # Use reverse directly
 %!  title ('patch modified by isonormals (..., "negate")');
 %!  isofinish (hp);
diff --git a/scripts/plot/draw/isosurface.m b/scripts/plot/draw/isosurface.m
--- a/scripts/plot/draw/isosurface.m
+++ b/scripts/plot/draw/isosurface.m
@@ -364,17 +364,17 @@ endfunction
 
 
 %!demo
 %! clf;
 %! [x,y,z] = meshgrid (-2:0.5:2, -2:0.5:2, -2:0.5:2);
 %! v = x.^2 + y.^2 + z.^2;
 %! isosurface (x, y, z, v, 1);
 %! axis equal;
-%! title ("isosurface of a sphere");
+%! title ("isosurface() of a sphere");
 
 %!demo
 %! clf;
 %! [x,y,z] = meshgrid (-2:0.5:2, -2:0.5:2, -2:0.5:2);
 %! v = x.^2 + y.^2 + z.^2;
 %! isosurface (x, y, z, v, 3);
 %! isosurface (x, y, z, v, 5);
 %! axis equal;
diff --git a/scripts/plot/draw/light.m b/scripts/plot/draw/light.m
--- a/scripts/plot/draw/light.m
+++ b/scripts/plot/draw/light.m
@@ -141,256 +141,285 @@ endfunction
 %! fv = isosurface (x+1, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
 %!                      "FaceLighting", "Gouraud");
 %! isonormals (x+1, y, z, val, h_patch);
 %! axis tight
 %! axis equal
 %! view (2);
 %! light ("Position", [-1 1 1]);
-%! title ("FaceLighting: none - flat - gouraud");
+%! title ({"FaceLighting", "none - flat - gouraud"});
 
 %!demo
 %! ## multiple lights
 %! clf;
 %! h_axes = subplot (1, 2, 1);
 %! [x,y,z] = meshgrid (-2:0.1:2, -2:0.1:2, -2:0.1:2);
 %! val = x.^2 + y.^2 + z.^2;
 %! fv = isosurface (x, y, z, val, 1);
-%! h_patch = patch (fv, "FaceColor", "w", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "w", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! isonormals (x, y, z, val, h_patch);
 %! axis equal; axis tight
 %! title ("Patch with one light");
 %! view (3);
 %! h_light = light ("Color", "g");
 %!
 %! h_axes2 = subplot (1, 2, 2);
-%! h_patch2 = patch (fv, "FaceColor", "w", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch2 = patch (fv, "FaceColor", "w", "EdgeColor", "none", ...
+%!                       "FaceLighting", "Gouraud");
 %! isonormals (x, y, z, val, h_patch2);
 %! axis equal; axis tight
 %! title ("Patch with three lights");
 %! view (3);
 %! h_light1 = light ("Color", "r");
 %! h_light2 = light ("Position", [0 1 1], "Color", "b");
 %! h_light3 = light ("Position", [-1 -1 2], "Color", "g");
 
 %!demo
 %! ## Diffuse and specular reflection
 %! clf;
 %! h_axes = axes ();
 %! [x,y,z] = meshgrid (-.2:0.04:.2, -.2:0.04:.2, -.2:0.04:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! fv = isosurface (x, y, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "DiffuseStrength", 0, "SpecularStrength", 0);
 %! isonormals (x, y, z, val, h_patch);
 %! fv = isosurface (x+.5, y, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "DiffuseStrength", 0, "SpecularStrength", .5);
 %! isonormals (x+.5, y, z, val, h_patch);
 %! fv = isosurface (x+1, y, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "DiffuseStrength", 0, "SpecularStrength", 1);
 %! isonormals (x+1, y, z, val, h_patch);
 %!
 %! fv = isosurface (x, y+.5, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "DiffuseStrength", 0.5, "SpecularStrength", 0);
 %! isonormals (x, y+.5, z, val, h_patch);
 %! fv = isosurface (x+.5, y+.5, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "DiffuseStrength", 0.5, "SpecularStrength", .5);
 %! isonormals (x+.5, y+.5, z, val, h_patch);
 %! fv = isosurface (x+1, y+.5, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "DiffuseStrength", 0.5, "SpecularStrength", 1);
 %! isonormals (x+1, y+.5, z, val, h_patch);
 %!
 %! fv = isosurface (x, y+1, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "DiffuseStrength", 1, "SpecularStrength", 0);
 %! isonormals (x, y+1, z, val, h_patch);
 %! fv = isosurface (x+.5, y+1, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "DiffuseStrength", 1, "SpecularStrength", .5);
 %! isonormals (x+.5, y+1, z, val, h_patch);
 %! fv = isosurface (x+1, y+1, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "DiffuseStrength", 1, "SpecularStrength", 1);
 %! isonormals (x+1, y+1, z, val, h_patch);
 %!
 %! axis equal
 %! h_light = light ("Position", [-1 1 1]);
 %! view (2);
 %!
 %! xlabel ("SpecularStrength");
 %! ylabel ("DiffuseStrength");
-
+%! title ("Effects of SpecularStrength and DiffuseStrength");
 
 %!demo
 %! ## Ambient Strength and Ambient Light Color
 %! clf;
 %! [x,y,z] = meshgrid (-.2:0.05:.2, -.2:0.05:.2, -.2:0.05:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! h_axes1 = subplot (3,1,3);
 %! set (h_axes1, "AmbientLightColor", "g");
 %! fv = isosurface (x, y, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "AmbientStrength", 0);
 %! isonormals (x, y, z, val, h_patch);
 %! fv = isosurface (x+.5, y, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "AmbientStrength", .7);
 %! isonormals (x+.5, y, z, val, h_patch);
 %! fv = isosurface (x+1, y, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "AmbientStrength", 1);
 %! isonormals (x+1, y, z, val, h_patch);
 %! h_light = light ("Position", [-1 1 1]);
 %! axis tight
 %! axis equal
 %! view (2);
 %! xlabel ("AmbientStrength");
 %! ylabel ("AmbientLightColor [0 1 0]");
 %!
 %! h_axes2 = subplot (3,1,2);
 %! set (h_axes2, "AmbientLightColor", [.5 0 1]);
 %! fv = isosurface (x, y, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "AmbientStrength", 0);
 %! isonormals (x, y, z, val, h_patch);
 %! fv = isosurface (x+.5, y, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "AmbientStrength", .7);
 %! isonormals (x+.5, y, z, val, h_patch);
 %! fv = isosurface (x+1, y, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "AmbientStrength", 1);
 %! isonormals (x+1, y, z, val, h_patch);
 %! h_light = light ("Position", [-1 1 1]);
 %! axis tight
 %! axis equal
 %! view (2);
 %! ylabel ("AmbientLightColor [.5 0 1]");
 %!
 %! h_axes3 = subplot (3,1,1);
 %! set (h_axes3, "AmbientLightColor", "w");
 %! fv = isosurface (x, y, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "AmbientStrength", 0);
 %! isonormals (x, y, z, val, h_patch);
 %! fv = isosurface (x+.5, y, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "AmbientStrength", .7);
 %! isonormals (x+.5, y, z, val, h_patch);
 %! fv = isosurface (x+1, y, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "AmbientStrength", 1);
 %! isonormals (x+1, y, z, val, h_patch);
 %! h_light = light ("Position", [-1 1 1]);
 %! axis tight
 %! axis equal
 %! view (2);
 %! ylabel ("AmbientLightColor [1 1 1]");
+%! title ("Effects of AmbientLightColor and AmbientStrength");
 
 %!demo
 %! ## Specular Exponent
 %! clf;
 %! [x,y,z] = meshgrid (-.2:0.02:.2, -.2:0.02:.2, -.2:0.02:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! h_axes = axes ();
 %! fv = isosurface (x, y, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "SpecularExponent", 15);
 %! isonormals (x, y, z, val, h_patch);
 %! fv = isosurface (x+.5, y, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "SpecularExponent", 5);
 %! isonormals (x+.5, y, z, val, h_patch);
 %! fv = isosurface (x+1, y, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "SpecularExponent", 1);
 %! isonormals (x+1, y, z, val, h_patch);
 %! h_light = light ("Position", [-1 1 1]);
 %! axis tight
 %! axis equal
 %! view (2);
 %! xlabel ("SpecularExponent");
+%! title ("Effects of SpecularExponent");
 
 %!demo
 %! ## SpecularColorReflectance
 %! clf;
 %! [x,y,z] = meshgrid (-.2:0.02:.2, -.2:0.02:.2, -.2:0.02:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! h_axes = axes ();
 %! fv = isosurface (x, y, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "SpecularColorReflectance", 0);
 %! isonormals (x, y, z, val, h_patch);
 %! fv = isosurface (x+.5, y, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "SpecularColorReflectance", 0.5);
 %! isonormals (x+.5, y, z, val, h_patch);
 %! fv = isosurface (x+1, y, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "SpecularColorReflectance", 1);
 %! isonormals (x+1, y, z, val, h_patch);
 %! h_light = light ("Position", [-1 1 1]);
 %! axis tight
 %! axis equal
 %! view (2);
 %! xlabel ("SpecularColorReflectance");
+%! title ("Effects of SpecularColorReflectance");
 
 %!demo
 %! ## BackFaceLighting
 %! [x,y,z] = meshgrid (-.5:0.1:2, -2:0.1:2, -2:0.1:2);
 %! val = x.^2 + y.^2 + z.^2;
 %! fv = isosurface (x, y, z, val, 1);
 %! vn = isonormals (x, y, z, val, fv.vertices, "negate");
 %! h_axes1 = subplot (1, 3, 1);
 %! h_patch = patch (fv, "FaceColor", "c", "EdgeColor", "none", ...
-%!                  "FaceLighting", "Gouraud", "VertexNormals", vn);
+%!                      "FaceLighting", "Gouraud", "VertexNormals", vn);
 %! set (h_patch, "BackFaceLighting", "reverselit");
 %! h_light = light ();
 %! view (h_axes1, [-50 30]);
 %! title ("reverselit");
 %! axis equal
 %!
 %! h_axes2 = subplot (1, 3, 2);
 %! h_patch = patch (fv, "FaceColor", "c", "EdgeColor", "none", ...
-%!           "FaceLighting", "Gouraud", "VertexNormals", vn);
+%!                      "FaceLighting", "Gouraud", "VertexNormals", vn);
 %! set (h_patch, "BackFaceLighting", "lit");
 %! h_light = light ();
 %! view (h_axes2, [-50 30]);
 %! title ("lit");
 %! axis equal
 %!
 %! h_axes3 = subplot (1, 3, 3);
 %! h_patch = patch (fv, "FaceColor", "c", "EdgeColor", "none", ...
-%!           "FaceLighting", "Gouraud", "VertexNormals", vn);
+%!                      "FaceLighting", "Gouraud", "VertexNormals", vn);
 %! set (h_patch, "BackFaceLighting", "unlit");
 %! h_light = light ();
 %! view (h_axes3, [-50 30]);
 %! title ("unlit");
 %! axis equal
 
 %!demo
 %! ## Colored patch
 %! clf;
 %! [x,y,z] = meshgrid (-.2:0.02:.2, -.2:0.02:.2, -.2:0.02:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! h_axes = axes ();
 %! fv = isosurface (x, y, z, val, .039, z);
 %! h_patch = patch (fv, "FaceColor", "flat", "EdgeColor", "none", ...
-%!             "FaceLighting", "Gouraud");
+%!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "SpecularExponent", 15);
 %! isonormals (x, y, z, val, h_patch);
 %! title ("Colored patch");
 %! h_light = light ("Position", [-1 1 1]);
 %! axis tight
 %! axis equal
 %! view (3);
 
@@ -402,18 +431,19 @@ endfunction
 %!
 %! h_axes = axes ();
 %! fv = isosurface (x, y, z, val, .039, z);
 %! h_patch = patch (fv, "FaceColor", "w", "EdgeColor", "interp");
 %! isonormals (x, y, z, val, h_patch);
 %! title ("Colored mesh (patch)");
 %! h_light = light;
 %! lighting gouraud
-%! axis tight
-%! axis equal
+%! axis tight;
+%! axis equal;
+%! box off;
 %! view (3);
 
 %!demo
 %! ## Colored mesh (surface)
 %! clf;
 %! h_mesh = mesh (peaks);
 %! title ("Colored mesh (surface)");
 %! h_light = light;
@@ -433,27 +463,27 @@ endfunction
 %! clf;
 %! [x,y,z] = meshgrid (-.2:0.02:.2, -.2:0.02:.2, -.2:0.02:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! h_axes1 = subplot (1,2,1);
 %! fv = isosurface (x, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none");
 %! isonormals (x, y, z, val, h_patch);
-%! title ('"Style" set to "infinite" (default)');
+%! title ('"Style" = "infinite" (default)');
 %! h_light = light ("Position", [.3 0 .3]);
 %! lighting gouraud
 %! axis equal
 %! view (3);
 %!
 %! h_axes2 = subplot (1,2,2);
 %! fv = isosurface (x, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none");
 %! isonormals (x, y, z, val, h_patch);
-%! title ('"Style" set to "local"');
+%! title ('"Style" = "local"');
 %! h_light = light ("Style", "local", "Position", [.3 0 .3]);
 %! lighting gouraud
 %! axis equal
 %! view (3);
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
diff --git a/scripts/plot/draw/loglog.m b/scripts/plot/draw/loglog.m
--- a/scripts/plot/draw/loglog.m
+++ b/scripts/plot/draw/loglog.m
@@ -82,22 +82,22 @@ endfunction
 
 %!demo
 %! clf;
 %! a = logspace (-5, 1, 10);
 %! b =-logspace (-5, 1, 10);
 %!
 %! subplot (1,2,1);
 %!  loglog (a, b);
-%!  xlabel ("loglog (a, b)");
+%!  title ("loglog (a, b)");
 %!
 %! subplot (1,2,2);
 %!  loglog (a, abs (b));
 %!  set (gca, "ydir", "reverse");
-%!  xlabel ("loglog (a, abs (b))");
+%!  title ("loglog (a, abs (b))");
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   a = logspace (-5, 1, 10);
 %!   b = logspace (-5, 1, 10);
 %!   loglog (a, b);
 %!   assert (get (gca, "yscale"), "log");
diff --git a/scripts/plot/draw/patch.m b/scripts/plot/draw/patch.m
--- a/scripts/plot/draw/patch.m
+++ b/scripts/plot/draw/patch.m
@@ -102,119 +102,124 @@ function h = patch (varargin)
   if (nargout > 0)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
-%! ## Patches with same number of vertices
 %! clf;
 %! t1 = (1/16:1/8:1)' * 2*pi;
 %! t2 = ((1/16:1/8:1)' + 1/32) * 2*pi;
 %! x1 = sin (t1) - 0.8;
 %! y1 = cos (t1);
 %! x2 = sin (t2) + 0.8;
 %! y2 = cos (t2);
 %! patch ([x1,x2], [y1,y2], "r");
+%! title ("patches with same number of vertices");
 
 %!demo
-%! ## Unclosed patch
 %! clf;
 %! t1 = (1/16:1/8:1)' * 2*pi;
 %! t2 = ((1/16:1/16:1)' + 1/32) * 2*pi;
 %! x1 = sin (t1) - 0.8;
 %! y1 = cos (t1);
 %! x2 = sin (t2) + 0.8;
 %! y2 = cos (t2);
 %! patch ([[x1;NaN(8,1)],x2], [[y1;NaN(8,1)],y2], "r");
+%! title ("Unclosed patch by using NaN");
 
 %!demo
-%! ## Specify vertices and faces separately
 %! clf;
 %! t1 = (1/16:1/8:1)' * 2*pi;
 %! t2 = ((1/16:1/16:1)' + 1/32) * 2*pi;
 %! x1 = sin (t1) - 0.8;
 %! y1 = cos (t1);
 %! x2 = sin (t2) + 0.8;
 %! y2 = cos (t2);
 %! vert = [x1, y1; x2, y2];
 %! fac = [1:8,NaN(1,8);9:24];
 %! patch ("Faces",fac, "Vertices",vert, "FaceColor","r");
+%! title ("patch() with separate specification of Faces and Vertices");
 
 %!demo
-%! ## Specify vertices and faces separately
 %! clf;
 %! t1 = (1/16:1/8:1)' * 2*pi;
 %! t2 = ((1/16:1/16:1)' + 1/32) * 2*pi;
 %! x1 = sin (t1) - 0.8;
 %! y1 = cos (t1);
 %! x2 = sin (t2) + 0.8;
 %! y2 = cos (t2);
 %! vert = [x1, y1; x2, y2];
 %! fac = [1:8,NaN(1,8);9:24];
 %! patch ("Faces",fac, "Vertices",vert, ...
 %!        "FaceVertexCData",[0, 1, 0; 0, 0, 1], "FaceColor", "flat");
+%! title ("patch() with specification of color for each vertex");
 
 %!demo
 %! ## Property change on multiple patches
 %! clf;
 %! t1 = (1/16:1/8:1)' * 2*pi;
 %! t2 = ((1/16:1/8:1)' + 1/32) * 2*pi;
 %! x1 = sin (t1) - 0.8;
 %! y1 = cos (t1);
 %! x2 = sin (t2) + 0.8;
 %! y2 = cos (t2);
 %! h = patch ([x1,x2], [y1,y2], cat (3, [0,0],[1,0],[0,1]));
 %! pause (1);
 %! set (h, "FaceColor", "r");
+%! title ("change color on multiple patch() objects");
 
 %!demo
 %! clf;
 %! vertices = [0, 0, 0;
 %!             1, 0, 0;
 %!             1, 1, 0;
 %!             0, 1, 0;
 %!             0.5, 0.5, 1];
 %! faces = [1, 2, 5;
 %!          2, 3, 5;
 %!          3, 4, 5;
 %!          4, 1, 5];
 %! patch ("Vertices", vertices, "Faces", faces, ...
 %!        "FaceVertexCData", jet (4), "FaceColor", "flat");
 %! view (-37.5, 30);
+%! box off;
+%! title ('"FaceColor" = "flat"');
 
 %!demo
 %! clf;
 %! vertices = [0, 0, 0;
 %!             1, 0, 0;
 %!             1, 1, 0;
 %!             0, 1, 0;
 %!             0.5, 0.5, 1];
 %! faces = [1, 2, 5;
 %!          2, 3, 5;
 %!          3, 4, 5;
 %!          4, 1, 5];
 %! patch  ("Vertices", vertices, "Faces", faces, ...
 %!        "FaceVertexCData", jet (5), "FaceColor", "interp");
 %! view (-37.5, 30);
+%! box off;
+%! title ('"FaceColor" = "interp"');
 
 %!demo
 %! clf;
 %! colormap (jet (64));
 %! x = [0 1 1 0];
 %! y = [0 0 1 1];
 %! subplot (2,1,1);
-%!  title ("Blue, Light-Green, and Red Horizontal Bars");
+%!  title ("Blue, Light Green, and Red Horizontal Bars");
 %!  patch (x, y + 0, 1);
 %!  patch (x, y + 1, 2);
 %!  patch (x, y + 2, 3);
 %! subplot (2,1,2);
-%!  title ("Blue, Light-Green, and Red Vertical Bars");
+%!  title ("Blue, Light Green, and Red Vertical Bars");
 %!  patch (x + 0, y, 1 * ones (size (x)));
 %!  patch (x + 1, y, 2 * ones (size (x)));
 %!  patch (x + 2, y, 3 * ones (size (x)));
 
 %!demo
 %! clf;
 %! colormap (jet (64));
 %! x = [0 1 1 0];
diff --git a/scripts/plot/draw/plot.m b/scripts/plot/draw/plot.m
--- a/scripts/plot/draw/plot.m
+++ b/scripts/plot/draw/plot.m
@@ -263,25 +263,25 @@ endfunction
 %! axis ([0 10 0 1]);
 %! title ({"Three random variables", "x[1x11], y[3x11]"});
 
 %!demo
 %! x = 0:10;
 %! plot (repmat (x, 2, 1), rand (2, numel (x)), "-s");
 %! axis ([0 10 0 1]);
 %! title ({"Vertical lines with random height and lengths", ...
-%!         "x[2x11], y[2,11]"})
+%!         "x[2x11], y[2,11]"});
 
 %!demo
 %! x = 0:10;
 %! plot (repmat (x(:), 1, 2), rand (numel (x), 2));
 %! axis ([0 10 0 1]);
 %! title ({"Two random variables", "x[11x2], y[11x2]"});
 
 %!demo
 %! x = 0:10;
 %! shape = [1, 1, numel(x), 2];
 %! x = reshape (repmat (x(:), 1, 2), shape);
 %! y = rand (shape);
 %! plot (x, y);
 %! axis ([0 10 0 1]);
-%! title ({"Two random variables", "squeezed from 4-d arrays"});
+%! title ({"Two random variables", "squeezed from 4-D arrays"});
 
diff --git a/scripts/plot/draw/plotyy.m b/scripts/plot/draw/plotyy.m
--- a/scripts/plot/draw/plotyy.m
+++ b/scripts/plot/draw/plotyy.m
@@ -282,17 +282,17 @@ endfunction
 %! ax = plotyy (x,y1, x-1,y2, @plot, @semilogy);
 %! xlabel ("X");
 %! ylabel (ax(1), "Axis 1");
 %! ylabel (ax(2), "Axis 2");
 %! text (0.5, 0.5, "Left Axis", ...
 %!       "color", [0 0 1], "horizontalalignment", "center", "parent", ax(1));
 %! text (4.5, 80, "Right Axis", ...
 %!       "color", [0 0.5 0], "horizontalalignment", "center", "parent", ax(2));
-%! title ({"plotyy() example"; "Left axis uses @plot, Right axis uses @semilogy"});
+%! title ({"plotyy() example"; "left axis uses @plot, right axis uses @semilogy"});
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! x = linspace (-1, 1, 201);
 %! subplot (2,2,1);
 %!  plotyy (x,sin(pi*x), x,10*cos(pi*x));
 %! subplot (2,2,2);
diff --git a/scripts/plot/draw/semilogx.m b/scripts/plot/draw/semilogx.m
--- a/scripts/plot/draw/semilogx.m
+++ b/scripts/plot/draw/semilogx.m
@@ -81,36 +81,36 @@ endfunction
 
 %!demo
 %! clf;
 %! x = logspace (-5, 1, 10);
 %! y = logspace (-5, 1, 10);
 %!
 %! subplot (1,2,1);
 %!  semilogx (x, y);
-%!  xlabel ("semilogx (x, y)");
+%!  title ("semilogx (x, y)");
 %!
 %! subplot (1,2,2);
 %!  semilogx (-x, y);
-%!  xlabel ("semilogx (-x, y)");
+%!  title ("semilogx (-x, y)");
 
 %!demo
 %! clf;
 %! x = logspace (-5, 1, 10);
 %! y = logspace (-5, 1, 10);
 %!
 %! subplot (1,2,1);
 %!  semilogx (x, y);
 %!  set (gca, "xdir", "reverse", "activepositionproperty", "outerposition");
-%!  xlabel ({"semilogx (x, y)", "xdir = reversed"});
+%!  title ({"semilogx (x, y)", "xdir = reversed"});
 %!
 %! subplot (1,2,2);
 %!  semilogx (-x, y);
 %!  set (gca, "xdir", "reverse", "activepositionproperty", "outerposition");
-%!  xlabel ({"semilogx (-x, y)", "xdir = reversed"});
+%!  title ({"semilogx (-x, y)", "xdir = reversed"});
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   a = logspace (-5, 1, 10);
 %!   b = logspace (-5, 1, 10);
 %!   semilogx (a, b);
 %!   assert (get (gca, "xscale"), "log");
diff --git a/scripts/plot/draw/semilogy.m b/scripts/plot/draw/semilogy.m
--- a/scripts/plot/draw/semilogy.m
+++ b/scripts/plot/draw/semilogy.m
@@ -81,36 +81,36 @@ endfunction
 
 %!demo
 %! clf;
 %! x = logspace (-5, 1, 10);
 %! y = logspace (-5, 1, 10);
 %!
 %! subplot (2,1,1);
 %!  semilogy (x, y);
-%!  ylabel ("semilogy (x, y)");
+%!  title ("semilogy (x, y)");
 %!
 %! subplot (2,1,2);
 %!  semilogy (x, -y);
-%!  ylabel ("semilogy (x, -y)");
+%!  title ("semilogy (x, -y)");
 
 %!demo
 %! clf;
 %! x = logspace (-5, 1, 10);
 %! y = logspace (-5, 1, 10);
 %!
 %! subplot (2,1,1);
 %!  semilogy (x, y);
 %!  set (gca, "ydir", "reverse", "activepositionproperty", "outerposition");
-%!  ylabel ({"semilogy (x, y)", "ydir = reversed"});
+%!  title ({"semilogy (x, y)", "ydir = reversed"});
 %!
 %! subplot (2,1,2);
 %!  semilogy (x, -y);
 %!  set (gca, "ydir", "reverse", "activepositionproperty", "outerposition");
-%!  ylabel ({"semilogy (x, -y)", "ydir = reversed"});
+%!  title ({"semilogy (x, -y)", "ydir = reversed"});
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   a = logspace (-5, 1, 10);
 %!   b = logspace (-5, 1, 10);
 %!   semilogy (a, b);
 %!   assert (get (gca, "yscale"), "log");
diff --git a/scripts/plot/draw/surfnorm.m b/scripts/plot/draw/surfnorm.m
--- a/scripts/plot/draw/surfnorm.m
+++ b/scripts/plot/draw/surfnorm.m
@@ -186,16 +186,18 @@ endfunction
 %! title ({"surfnorm() shows surface and normals at each vertex", ...
 %!         "peaks() function with 19 faces"});
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! [x, y, z] = sombrero (10);
 %! surfnorm (x, y, z);
+%! title ({"surfnorm() shows surface and normals at each vertex", ...
+%!         "sombrero() function with 10 faces"});
 
 ## Test input validation
 %!error surfnorm ()
 %!error surfnorm (1,2)
 %!error <X, Y, and Z must be 2-D real matrices> surfnorm (i)
 %!error <X, Y, and Z must be 2-D real matrices> surfnorm (i, 1, 1)
 %!error <X, Y, and Z must be 2-D real matrices> surfnorm (1, i, 1)
 %!error <X, Y, and Z must be 2-D real matrices> surfnorm (1, 1, i)
diff --git a/scripts/plot/draw/trisurf.m b/scripts/plot/draw/trisurf.m
--- a/scripts/plot/draw/trisurf.m
+++ b/scripts/plot/draw/trisurf.m
@@ -87,68 +87,70 @@ function h = trisurf (tri, x, y, z, vara
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! N = 31;
 %! [x, y] = meshgrid (1:N);
 %! tri = delaunay (x(:), y(:));
 %! z = peaks (N);
-%! h = trisurf (tri, x, y, z, 'facecolor', 'interp');
+%! h = trisurf (tri, x, y, z, "facecolor", "interp");
 %! axis tight;
 %! zlim auto;
-%! title (sprintf ('facecolor = %s', get (h, 'facecolor')));
+%! title (sprintf ("facecolor = %s", get (h, "facecolor")));
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! N = 31;
 %! [x, y] = meshgrid (1:N);
 %! tri = delaunay (x(:), y(:));
 %! z = peaks (N);
-%! h = trisurf (tri, x, y, z, 'facecolor', 'flat');
+%! h = trisurf (tri, x, y, z, "facecolor", "flat");
 %! axis tight;
 %! zlim auto;
-%! title (sprintf ('facecolor = %s', get (h, 'facecolor')));
+%! title (sprintf ("facecolor = %s", get (h, "facecolor")));
+
+## FIXME: The demos below should each have a title
 
 %!demo
 %! clf;
-%! colormap ('default');
-%! old_state = rand ('state');
-%! restore_state = onCleanup (@() rand ('state', old_state));
-%! rand ('state', 10);
+%! colormap ("default");
+%! old_state = rand ("state");
+%! restore_state = onCleanup (@() rand ("state", old_state));
+%! rand ("state", 10);
 %! N = 10;
 %! x = 3 - 6 * rand (N, N);
 %! y = 3 - 6 * rand (N, N);
 %! z = peaks (x, y);
 %! tri = delaunay (x(:), y(:));
 %! trisurf (tri, x(:), y(:), z(:));
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! x = rand (100, 1);
 %! y = rand (100, 1);
 %! z = x.^2 + y.^2;
 %! tri = delaunay (x, y);
 %! trisurf (tri, x, y, z);
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! x = rand (100, 1);
 %! y = rand (100, 1);
 %! z = x.^2 + y.^2;
 %! tri = delaunay (x, y);
-%! trisurf (tri, x, y, z, 'facecolor', 'interp');
+%! trisurf (tri, x, y, z, "facecolor", "interp");
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! x = rand (100, 1);
 %! y = rand (100, 1);
 %! z = x.^2 + y.^2;
 %! tri = delaunay (x, y);
diff --git a/scripts/plot/util/hold.m b/scripts/plot/util/hold.m
--- a/scripts/plot/util/hold.m
+++ b/scripts/plot/util/hold.m
@@ -114,48 +114,51 @@ endfunction
 %! title ("hold with image and plot");
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! hold on;
 %! imagesc (1 ./ hilb (4));
 %! plot (1:4, "-s");
+%! title ("hold with image and plot");
 %! hold off;
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! hold on;
 %! imagesc (1 ./ hilb (2));
 %! imagesc (1 ./ hilb (4));
+%! title ({"hold with two images", "only second image is visible"});
 %! hold off;
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! hold on;
 %! plot (1:4, "-s");
 %! imagesc (1 ./ hilb (4));
+%! title ({"hold with plot and image", "only image is visible"});
 %! hold off;
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! t = linspace (-3, 3, 50);
 %! [x, y] = meshgrid (t, t);
 %! z = peaks (x, y);
 %! contourf (x, y, z, 10);
 %! hold on;
 %! plot (x(:), y(:), "^");
 %! patch ([-1.0 1.0 1.0 -1.0 -1.0], [-1.0 -1.0 1.0 1.0 -1.0], "red");
 %! xlim ([-2.0 2.0]);
 %! ylim ([-2.0 2.0]);
 %! colorbar ("SouthOutside");
-%! title ("Test script for some plot functions");
+%! title ("hold with line, surface, and patch objects");
 
 ## hold on test
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   p = plot ([0 1]);
 %!   assert (! ishold);
 %!   hold on;
