# HG changeset patch
# User jwe
# Date 1078248988 0
#      Tue Mar 02 17:36:28 2004 +0000
# Node ID a9ec0ce18568c2fde68fa64f3c7de85b0db05dfa
# Parent  15e923b54effc05e0b236f82dd63f7158f26e176
[project @ 2004-03-02 17:36:28 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,22 @@
+2004-03-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+2004-03-02  David Bateman  <dbateman@free.fr>
+ 
+	* oct-fftw.cc: Only two versions of plan, and avoid endless
+	changes between them.  Faster for small fft's.
+	(octave_fftw_planner::simd_align, octave_fftw_planner::rsimd_align):
+	New member variables. 
+	(octave_fftw_planner::ialign, octave_fftw_planner::oalign,
+	octave_fftw_planner::rialign, octave_fftw_planner::roalign): Delete.
+	Change all uses.
+	(CHECK_SIMD_ALIGNMENT): New macro.
+	(octave_fftw_planner::create_plan): Use it.
+
 2004-03-01  Petter Risholm  <risholm@idi.ntnu.no>
 
 	* Array.cc (Array<T>::insertN): Eliminate N-d indexing.
 
         * mx-inlines.cc (MX_ND_CAT): Delete macro.
 
         * dNDArray.h, chNDArray.h, CNDArray.h (cat): Change declaration.
         * dNDArray.cc (NDArray<T>::cat): Call new form of cat function.
diff --git a/liboctave/oct-fftw.cc b/liboctave/oct-fftw.cc
--- a/liboctave/oct-fftw.cc
+++ b/liboctave/oct-fftw.cc
@@ -45,102 +45,112 @@ Software Foundation, 59 Temple Place - S
 // the FFTW3 can use SIMD instructions for further acceleration.
 
 // Note that it is profitable to store the FFTW3 plans, for small ffts
 
 class
 octave_fftw_planner
 {
 public:
-  octave_fftw_planner ();
+
+  octave_fftw_planner (void);
 
   fftw_plan create_plan (int dir, const int rank, const dim_vector dims, 
 			 int howmany, int stride, int dist, 
 			 const Complex *in, Complex *out);
+
   fftw_plan create_plan (const int rank, const dim_vector dims, 
 			 int howmany, int stride, int dist, 
 			 const double *in, Complex *out);
 
 private:
+
   int plan_flags;
 
   // Plan for fft and ifft of complex values
   fftw_plan plan[2];
   int d[2];  // dist
   int s[2];  // stride
   int r[2];  // rank
   int h[2];  // howmany
   dim_vector n[2]; // dims
-  char ialign[2];
-  char oalign[2];
+  bool simd_align[2];
 
   // Plan for fft of real values
   fftw_plan rplan;
   int rd;  // dist
   int rs;  // stride
   int rr;  // rank
   int rh;  // howmany
   dim_vector rn; // dims
-  char rialign;
-  char roalign;
+  bool rsimd_align;
 };
 
-octave_fftw_planner::octave_fftw_planner ()
+octave_fftw_planner::octave_fftw_planner (void)
 {
   plan_flags = FFTW_ESTIMATE;
 
   plan[0] = plan[1] = 0;
   d[0] = d[1] = s[0] = s[1] = r[0] = r[1] = h[0] = h[1] = 0;
-  ialign[0] = ialign[1] = oalign[0] = oalign[1] = 0;
-  n[0] = n[1] = dim_vector();
+  simd_align[0] = simd_align[1] = false;
+  n[0] = n[1] = dim_vector ();
 
   rplan = 0;
   rd = rs = rr = rh = 0;
-  rialign = roalign = 0;
+  rsimd_align = false;
   rn = dim_vector ();
 
   // If we have a system wide wisdom file, import it
-  fftw_import_system_wisdom ( );
+  fftw_import_system_wisdom ();
 }
 
+#define CHECK_SIMD_ALIGNMENT(x) \
+  ((reinterpret_cast<ptrdiff_t> (x)) & 0xF == 0)
+
 fftw_plan
 octave_fftw_planner::create_plan (int dir, const int rank,
 				  const dim_vector dims, int howmany,
 				  int stride, int dist, 
 				  const Complex *in, Complex *out)
 {
   int which = (dir == FFTW_FORWARD) ? 0 : 1;
   fftw_plan *cur_plan_p = &plan[which];
   bool create_new_plan = false;
-  char in_align = (reinterpret_cast<ptrdiff_t> (in)) & 0xF;
-  char out_align = (reinterpret_cast<ptrdiff_t> (out)) & 0xF;
+  bool ioalign = CHECK_SIMD_ALIGNMENT (in) && CHECK_SIMD_ALIGNMENT (out);
 
+  // Don't create a new plan if we have a non SIMD plan already
+  // but can do SIMD. This prevents endlessly recreating plans
+  // if we change the alignment
   if (plan[which] == 0 || d[which] != dist || s[which] != stride
       || r[which] != rank || h[which] != howmany
-      || ialign[which] != in_align || oalign[which] != out_align)
+      || ((ioalign != simd_align[which]) ? !ioalign : false))
     create_new_plan = true;
   else
     // We still might not have the same shape of array
     for (int i = 0; i < rank; i++)
       if (dims(i) != n[which](i))
 	{
 	  create_new_plan = true;
 	  break;
 	}
 
   if (create_new_plan)
     {
       d[which] = dist;
       s[which] = stride;
       r[which] = rank;
       h[which] = howmany;
-      ialign[which] = in_align;
-      oalign[which] = out_align;
+      simd_align[which] = ioalign;
       n[which] = dims;
 
+      if (ioalign)
+	plan_flags &= ~FFTW_UNALIGNED;
+      else
+	plan_flags |= FFTW_UNALIGNED;
+
       if (*cur_plan_p)
 	fftw_destroy_plan (*cur_plan_p);
 
       // Note reversal of dimensions for column major storage in FFTW
       OCTAVE_LOCAL_BUFFER (int, tmp, rank);
       for (int i = 0, j = rank-1; i < rank; i++, j--)
 	tmp[i] = dims(j);
 
@@ -159,41 +169,47 @@ octave_fftw_planner::create_plan (int di
  
 fftw_plan
 octave_fftw_planner::create_plan (const int rank, const dim_vector dims, 
 				  int howmany, int stride, int dist, 
 				  const double *in, Complex *out)
 {
   fftw_plan *cur_plan_p = &rplan;
   bool create_new_plan = false;
-  char in_align = (reinterpret_cast<ptrdiff_t> (in)) & 0xF;
-  char out_align = (reinterpret_cast<ptrdiff_t> (out)) & 0xF;
+  bool ioalign = CHECK_SIMD_ALIGNMENT (in) && CHECK_SIMD_ALIGNMENT (out);
 
+  // Don't create a new plan if we have a non SIMD plan already
+  // but can do SIMD. This prevents endlessly recreating plans
+  // if we change the alignment
   if (rplan == 0 || rd != dist || rs != stride || rr != rank
-      || rh != howmany || rialign != in_align || roalign != out_align)
+      || rh != howmany || ((ioalign != rsimd_align) ? !ioalign : false))
     create_new_plan = true;
   else
     // We still might not have the same shape of array
     for (int i = 0; i < rank; i++)
       if (dims(i) != rn(i))
 	{
 	  create_new_plan = true;
 	  break;
 	}
 
   if (create_new_plan)
     {
       rd = dist;
       rs = stride;
       rr = rank;
       rh = howmany;
-      rialign = in_align;
-      roalign = out_align;
+      rsimd_align = ioalign;
       rn = dims;
 
+      if (ioalign)
+	plan_flags &= ~FFTW_UNALIGNED;
+      else
+	plan_flags |= FFTW_UNALIGNED;
+
       if (*cur_plan_p)
 	fftw_destroy_plan (*cur_plan_p);
 
       // Note reversal of dimensions for column major storage in FFTW
       OCTAVE_LOCAL_BUFFER (int, tmp, rank);
       for (int i = 0, j = rank-1; i < rank; i++, j--)
 	tmp[i] = dims(j);
 
@@ -227,17 +243,17 @@ convert_packcomplex_1d (Complex *out, si
   OCTAVE_QUIT;
 }
 
 static inline void
 convert_packcomplex_Nd (Complex *out, const dim_vector &dv)
 {
   size_t nc = dv(0);
   size_t nr = dv(1);
-  size_t np = (dv.length() > 2 ? dv.numel () / nc / nr : 1);
+  size_t np = (dv.length () > 2 ? dv.numel () / nc / nr : 1);
   size_t nrp = nr * np;
   Complex *ptr1, *ptr2;
 
   OCTAVE_QUIT;
 
   // Create space for the missing elements.
 
   for (size_t i = 0; i < nrp; i++)
@@ -265,17 +281,17 @@ convert_packcomplex_Nd (Complex *out, co
   OCTAVE_QUIT;
 
   // Now do the permutations needed for rank > 2 cases.
 
   size_t jstart = dv(0) * dv(1);
   size_t kstep = dv(0);
   size_t nel = dv.numel ();
 
-  for (int inner = 2; inner < dv.length(); inner++) 
+  for (int inner = 2; inner < dv.length (); inner++) 
     {
       size_t jmax = jstart * dv(inner);
       for (size_t i = 0; i < nel; i+=jmax)
 	for (size_t j = jstart, jj = jmax-jstart; j < jj; 
 	     j+=jstart, jj-=jstart)
 	  for (size_t k = 0; k < jstart; k+= kstep)
 	    for (size_t l = nc/2+1; l < nc; l++)
 	      {
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -8,17 +8,17 @@ 2004-03-01  Petter Risholm  <risholm@idi
 
         * data.cc (Fcat): Speedup implementation.
 
         * data.cc (Fhorzcat, Fvertcat): New functions.
 
         * Array-tc.cc: Instantiate cat function.
 
 2004-03-01  David Bateman  <dbateman@free.fr>
- 
+
 	* ls-hdf5.cc (save_hdf5_empty, load_hdf5_empty): New functions
 	to save/load empty matrices keeping their dimensions.
 	* ls-hdf5.h (save_hdf5_empty, load_hdf5_empty): Provide decls.
 
 	* ov-re-mat.cc (save_hdf5, load_hdf5): Cleanup, check empty matrix.
 	* ov-cx-mat.cc (save_hdf5, load_hdf5): Ditto.
 	* ov-bool-mat.cc (save_hdf5, load_hdf5): Ditto.
 
