# HG changeset patch
# User Kai Habel <kai.habel@gmx.de>
# Date 1290760336 -3600
#      Fri Nov 26 09:32:16 2010 +0100
# Node ID cc9b8cd5aa87de7cd805895953be31a04bd04f16
# Parent  4ecc7bc5bc8306931fa9c96e13e85af06599df7d
consider hidden handles in uimenu code

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-11-26  Kai Habel  <kai.habel@gmx.de>
+
+	* DLD-FUNCTIONS/fltk_backend.cc (find_uimenu_children, 
+	__fltk_redraw__): Consider hidden handles here.
+
 2010-11-26  John W. Eaton  <jwe@octave.org>
 
 	* defaults.cc (FEXEC_PATH): Only call set_exec_path if nargin is
 	greater than zero.
 
 2010-11-25  Kai Habel  <kai.habel@gmx.de>
 
 	* DLD-FUNCTIONS/fltk_backend.cc (fltk_gui_mode): New
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/fltk_backend.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/fltk_backend.cc
@@ -313,24 +313,24 @@ public:
                 return (t);
             }
         }
       return (-1);
     }
   
   Matrix find_uimenu_children (uimenu::properties& uimenup) const
     {
-      Matrix uimenu_childs = uimenup.get_children ();
+      Matrix uimenu_childs = uimenup.get_all_children ();
       Matrix retval = do_find_uimenu_children (uimenu_childs);
       return retval;
     }
 
   Matrix find_uimenu_children (figure::properties& figp) const
     {
-      Matrix uimenu_childs = figp.get_children ();
+      Matrix uimenu_childs = figp.get_all_children ();
       Matrix retval = do_find_uimenu_children (uimenu_childs);
       return retval;
     }
     
   Matrix do_find_uimenu_children (Matrix uimenu_childs) const
     {
       octave_idx_type k = 0;
       
@@ -1717,17 +1717,17 @@ static int
 {
   if (backend_registered)
     {
       // we scan all figures and add those which use FLTK as a backend
       graphics_object obj = gh_manager::get_object (0);
       if (obj && obj.isa ("root"))
         {
           base_properties& props = obj.get_properties ();
-          Matrix children = props.get_children ();
+          Matrix children = props.get_all_children ();
 
           for (octave_idx_type n = 0; n < children.numel (); n++)
             {
               graphics_object fobj = gh_manager::get_object (children (n));
               if (fobj && fobj.isa ("figure"))
                 {
                   figure::properties& fp =
                       dynamic_cast<figure::properties&> (fobj.get_properties ());
