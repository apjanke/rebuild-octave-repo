# HG changeset patch
# User jwe
# Date 862372182 0
#      Wed Apr 30 03:49:42 1997 +0000
# Node ID c5b7a019b9ed55c10b84fd3eb01c871d897cedc1
# Parent  e6d25bc478dd3a02177e015dc7b5d7e6e7f63e6b
[project @ 1997-04-30 03:46:53 by jwe]

diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -61,34 +61,38 @@ Software Foundation, 59 Temple Place - S
 #include "oct-prcstrm.h"
 #include "oct-stream.h"
 #include "oct-strstrm.h"
 #include "pager.h"
 #include "sysdep.h"
 #include "utils.h"
 #include "variables.h"
 
+static octave_value stdin_file;
+static octave_value stdout_file;
+static octave_value stderr_file;
+
 void
 initialize_file_io (void)
 {
   octave_istream *stdin_stream
     = new octave_istream (&cin, "stdin");
 
   // This uses octave_stdout (see pager.h), not cout so that Octave's
   // standard output stream will pass through the pager.
 
   octave_ostream *stdout_stream
     = new octave_ostream (&octave_stdout, "stdout");
 
   octave_ostream *stderr_stream
     = new octave_ostream (&cerr, "stderr");
 
-  octave_stream_list::insert (stdin_stream);
-  octave_stream_list::insert (stdout_stream);
-  octave_stream_list::insert (stderr_stream);
+  stdin_file = octave_stream_list::insert (stdin_stream);
+  stdout_file = octave_stream_list::insert (stdout_stream);
+  stderr_file = octave_stream_list::insert (stderr_stream);
 }
 
 void
 close_files (void)
 {
   octave_stream_list::clear ();
 }
 
@@ -400,18 +404,17 @@ DEFUN (fopen, args, ,
       octave_base_stream *os
 	= do_stream_open (args(0), mode, arch, "fopen", fid);
 
       if (os)
 	{
 	  if (os->ok () && ! error_state)
 	    {
 	      retval(1) = "";
-	      retval(0)
-		= static_cast<double> (octave_stream_list::insert (os));
+	      retval(0) = octave_stream_list::insert (os);
 	    }
 	  else
 	    {
 	      int errno = 0;
 	      retval(1) = os->error (false, errno);
 	      retval(0) = -1.0;
 	    }
 	}
@@ -1201,17 +1204,17 @@ DEFUN (ferror, args, ,
 DEFUN (popen, args, ,
   "FILENUM = popen (FILENAME, MODE)\n\
 \n\
   start a process and create a pipe.  Valid values for mode are:\n\
 \n\
   \"r\" : connect stdout of process to pipe\n\
   \"w\" : connect stdin of process to pipe")
 {
-  double retval = -1.0;
+  octave_value retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 2)
     {
       string name = args(0).string_value ();
 
       if (! error_state)
@@ -1373,23 +1376,23 @@ symbols_of_file_io (void)
     "used with fseek to position file relative to the beginning");
 
   DEFCONST (SEEK_CUR, 0.0, 0, 0,
     "used with fseek to position file relative to the current position");
 
   DEFCONST (SEEK_END, 1.0, 0, 0,
     "used with fseek to position file relative to the end");
 
-  DEFCONSTX ("stdin", SBV_stdin, 0.0, 0, 0,
+  DEFCONSTX ("stdin", SBV_stdin, stdin_file, 0, 0,
     "file number of the standard input stream");
 
-  DEFCONSTX ("stdout", SBV_stdout, 1.0, 0, 0,
+  DEFCONSTX ("stdout", SBV_stdout, stdout_file, 0, 0,
     "file number of the standard output stream");
 
-  DEFCONSTX ("stderr", SBV_stderr, 2.0, 0, 0,
+  DEFCONSTX ("stderr", SBV_stderr, stderr_file, 0, 0,
     "file number of the standard error stream");
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -37,42 +37,36 @@ Software Foundation, 59 Temple Place - S
 #include "error.h"
 #include "oct-stream.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 // Possible values for conv_err:
 //
 //   1 : not a real scalar
-//   2 : error extracting scalar value (should not happen)
-//   3 : value is NaN
-//   4 : value is not an integer
+//   2 : value is NaN
+//   3 : value is not an integer
 
 static int
 convert_to_valid_int (const octave_value& tc, int& conv_err)
 {
   int retval = 0;
 
   conv_err = 0;
 
-  if (tc.is_real_scalar ())
+  double dval = tc.double_value ();
+
+  if (! error_state)
     {
-      double dval = tc.double_value ();
-
-      if (! error_state)
+      if (! xisnan (dval))
 	{
-	  if (! xisnan (dval))
-	    {
-	      int ival = NINT (dval);
-
-	      if (ival == dval)
-		retval = ival;
-	      else
-		conv_err = 4;
-	    }
+	  int ival = NINT (dval);
+
+	  if (ival == dval)
+	    retval = ival;
 	  else
 	    conv_err = 3;
 	}
       else
 	conv_err = 2;
     }
   else
     conv_err = 1;
@@ -2367,62 +2361,64 @@ octave_stream::mode_as_string (int mode)
 void
 octave_stream::invalid_stream_error (const char *op) const
 {
   ::error ("%s: attempt to use invalid I/O stream", op);
 }
 
 octave_stream_list *octave_stream_list::instance = 0;
 
-int
+octave_value
 octave_stream_list::do_insert (octave_base_stream *obs)
 {
-  int retval = -1;
+  int stream_number = -1;
+
+  octave_stream *os = 0;
 
   if (obs)
     {
-      octave_stream *os = new octave_stream (obs);
+      os = new octave_stream (obs);
 
       // Insert item in first open slot, increasing size of list if
       // necessary.
 
       for (int i = 0; i < curr_len; i++)
 	{
 	  octave_stream *tmp = list (i);
 
 	  if (! tmp)
 	    {
 	      list (i) = os;
-	      retval = i;
+	      stream_number = i;
 	      break;
 	    }
 	}
 
-      if (retval < 0)
+      if (stream_number < 0)
 	{
 	  int total_len = list.length ();
 
 	  if (curr_len == total_len)
 	    list.resize (total_len * 2);
 
 	  list (curr_len) = os;
-	  retval = curr_len;
+	  stream_number = curr_len;
 	  curr_len++;
 	}
     }
   else
     ::error ("octave_stream_list: attempt to insert invalid stream");
 
-  return retval;
+  return octave_value (os, stream_number);
 }
 
-int
+octave_value
 octave_stream_list::insert (octave_base_stream *obs)
 {
-  int retval = -1;
+  octave_value retval = -1.0;
 
   if (! instance)
     instance = new octave_stream_list ();
 
   if (instance)
     retval = instance->do_insert (obs);
   else
     panic_impossible ();
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -429,16 +429,20 @@ public:
   string name (void);
 
   int mode (void);
 
   oct_mach_info::float_format float_format (void);
 
   static string mode_as_string (int mode);
 
+  istream *input_stream (void) { return rep->input_stream (); }
+
+  ostream *output_stream (void) { return rep->output_stream (); }
+
 private:
 
   // The actual representation of this stream.
   octave_base_stream *rep;
 
   // If true, do not delete rep.
   bool preserve;
 
@@ -485,17 +489,17 @@ octave_stream_list
 protected:
 
   octave_stream_list (void) : list (32), curr_len (0) { }
 
 public:
 
   ~octave_stream_list (void) { }
 
-  static int insert (octave_base_stream *obs);
+  static octave_value insert (octave_base_stream *obs);
 
   static octave_stream *lookup (int fid);
   static octave_stream *lookup (const octave_value& fid);
 
   static int remove (int fid);
   static int remove (const octave_value& fid);
 
   static void clear (void);
@@ -512,17 +516,17 @@ public:
 private:
 
   Array<octave_stream*> list;
 
   int curr_len;
 
   static octave_stream_list *instance;
 
-  int do_insert (octave_base_stream *obs);
+  octave_value do_insert (octave_base_stream *obs);
 
   octave_stream *do_lookup (int fid) const;
   octave_stream *do_lookup (const octave_value& fid) const;
 
   int do_remove (int fid);
   int do_remove (const octave_value& fid);
 
   void do_clear (void);
diff --git a/src/syscalls.cc b/src/syscalls.cc
--- a/src/syscalls.cc
+++ b/src/syscalls.cc
@@ -542,20 +542,20 @@ STATUS is nonzero and MSG contains a sys
     }
   else
     print_usage ("mkfifo");
 
   return retval;
 }
 
 DEFUN (pipe, args, ,
-  "[FILE_IDS, STATUS, MSG] = pipe (): create an interprocess channel.\n\
+  "[FILE_LIST, STATUS, MSG] = pipe (): create an interprocess channel.\n\
 \n\
-Return the FILE_IDS corresponding to the reading and writing ends of\n\
-the pipe, as a vector.\n\
+Return the file objects corresponding to the reading and writing ends of\n\
+the pipe, as a two-element list.\n\
 \n\
 If successful, STATUS is 0 and MSG is an empty string.  Otherwise,\n\
 STATUS is nonzero and MSG contains a system-dependent error message.")
 {
   octave_value_list retval;
 
   retval(2) = string ();
   retval(1) = -1.0;
@@ -580,23 +580,23 @@ STATUS is nonzero and MSG contains a sys
 	  FILE *out_file = fdopen (fid[1], "w");
 
 	  octave_istdiostream *is
 	    = new octave_istdiostream (string (), in_file);
 
 	  octave_ostdiostream *os
 	    = new octave_ostdiostream (string (), out_file);
 
-	  Matrix file_ids (1, 2);
+	  octave_value_list file_ids;
 
-	  file_ids (0, 0) = octave_stream_list::insert (is);
-	  file_ids (0, 1) = octave_stream_list::insert (os);
+	  file_ids(1) = octave_stream_list::insert (os);
+	  file_ids(0) = octave_stream_list::insert (is);
 
-          retval(0) = file_ids;
 	  retval(1) = static_cast<double> (status);
+          retval(0) = octave_value (file_ids);
 	}
 #else
       gripe_not_supported ("pipe");
 #endif
     }
   else
     print_usage ("pipe");
 
