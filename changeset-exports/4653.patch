# HG changeset patch
# User jwe
# Date 1069650166 0
#      Mon Nov 24 05:02:46 2003 +0000
# Node ID 14ab7b05a572a4f5fff3c1a77dc0fc3b5b018684
# Parent  361fe3e50f7af92287e9942c287dc55601d0027c
[project @ 2003-11-24 05:02:46 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1787,24 +1787,17 @@ Array<T>
 Array<T>::indexN (idx_vector& ra_idx, int resize_ok, const T& rfv) const
 {
   Array<T> retval;
 
   int n_dims = dims ().length ();
 
   int orig_len = number_of_elements (dims ());
 
-  Array<int> idx_orig_dimsXXX = ra_idx.orig_dimensions (); 
-
-  dim_vector idx_orig_dims;
-
-  idx_orig_dims.resize (idx_orig_dimsXXX.length ());
-
-  for (int i = 0; i < idx_orig_dimsXXX.length (); i++)
-    idx_orig_dims(i) = idx_orig_dimsXXX(i);
+  dim_vector idx_orig_dims = ra_idx.orig_dimensions (); 
 
   if (ra_idx.is_colon ())
     {
       // Fast magic colon processing.
 
       retval = Array<T> (*this, dim_vector (orig_len, 1));
     }
   else if (length () == 1)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,21 @@
 2003-11-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* idx-vector.h (idx_vector::orig_empty): Check orig_dims for
+	zeros, not orig_rows or orig_columns.
+	(idx_vector::idx_vector_rep::orig_rows): Define using orig_dims.
+	(idx_vector::idx_vector_rep::orig_columns): Likewise.
+
+	* idx-vector.cc (idx_vector::idx_vector_rep::orig_nr,
+	(idx_vector::idx_vector_rep::orig_nc): Delete.
+
+	* idx-vector.cc (idx_vector::idx_vector_rep):
+	Use initialization lists for constructors.
+
 	* Array.cc (Array<T>::indexN): Correctly handle single colon index.
 	Omit special case for ra_idx.capacity () == 1.
 	Always allow single index for matrix args with optional warning.
 
 	* idx-vector.h, idx-vector.cc: Convert boolMatrix functions to use
 	boolNDArray.  Likewise, convert Matrix functions to use	NDArray.
 
 	* Array-so.cc: New file.  Move instantiations here from so-array.h.
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -39,41 +39,28 @@ Software Foundation, 59 Temple Place - S
 
 #include "idx-vector.h"
 #include "lo-error.h"
 #include "lo-mappers.h"
 
 #define IDX_VEC_REP idx_vector::idx_vector_rep
 
 IDX_VEC_REP::idx_vector_rep (const IDX_VEC_REP& a)
+  : data (0), len (a.len), num_zeros (a.num_zeros), num_ones (a.num_ones),
+    max_val (a.max_val), min_val (a.min_val),
+    frozen_at_z_len (a.frozen_at_z_len), frozen_len (a.frozen_len),
+    colon (a.colon), one_zero (a.one_zero), initialized (a.initialized),
+    frozen (a.frozen), colon_equiv_checked (a.colon_equiv_checked),
+    colon_equiv (a.colon_equiv), orig_dims (a.orig_dims)
 {
-  data = 0;
-  initialized = a.initialized;
-  frozen = a.frozen;
-  colon_equiv_checked = a.colon_equiv_checked;
-  colon_equiv = a.colon_equiv;
-
-  colon = a.colon;
-
-  orig_nr = a.orig_nr;
-  orig_nc = a.orig_nc;
-
-  len = a.len;
   if (len > 0)
     {
       data = new int [len];
       for (int i = 0; i < len; i++)
 	data[i] = a.data[i];
-
-      num_zeros = a.num_zeros;
-      num_ones = a.num_ones;
-      one_zero = a.one_zero;
-
-      max_val = a.max_val;
-      min_val = a.min_val;
     }
 }
 
 static inline int
 tree_to_mat_idx (double x)
 {
   return (x > 0)
     ? (static_cast<int> (x + 0.5) - 1)
@@ -101,36 +88,23 @@ idx_is_inf_or_nan (double x)
       (*current_liboctave_error_handler) ("Inf invalid as index");
       retval = true;
     }
 
   return retval;
 }
 
 IDX_VEC_REP::idx_vector_rep (const ColumnVector& v)
+  : data (0), len (v.length ()), num_zeros (0), num_ones (0), max_val (0),
+    min_val (0), count (1), frozen_at_z_len (0), frozen_len (0),
+    colon (0), one_zero (0), initialized (0), frozen (0),
+    colon_equiv_checked (0), colon_equiv (0), orig_dims (len, 1)
 {
-  data = 0;
-  initialized = 0;
-  frozen = 0;
-  colon_equiv_checked = 0;
-  colon_equiv = 0;
-  colon = 0;
-  one_zero = 0;
-
-  len = v.length ();
-
-  orig_nr = len;
-  orig_nc = 1;
-
   if (len == 0)
     {
-      num_zeros = 0;
-      num_ones = 0;
-      max_val = 0;
-      min_val = 0;
       initialized = 1;
       return;
     }
   else
     {
       data = new int [len];
 
       for (int i = 0; i < len; i++)
@@ -143,36 +117,24 @@ IDX_VEC_REP::idx_vector_rep (const Colum
 	    data[i] = tree_to_mat_idx (d);
 	}
     }
 
   init_state ();
 }
 
 IDX_VEC_REP::idx_vector_rep (const NDArray& nda)
+  : data (0), len (nda.length ()), num_zeros (0), num_ones (0),
+    max_val (0), min_val (0), count (1), frozen_at_z_len (0),
+    frozen_len (0), colon (0), one_zero (0), initialized (0),
+    frozen (0), colon_equiv_checked (0), colon_equiv (0),
+    orig_dims (nda.dims ())
 {
-  data = 0;
-  initialized = 0;
-  frozen = 0;
-  colon_equiv_checked = 0;
-  colon_equiv = 0;
-  colon = 0;
-  one_zero = 0;
-
-  orig_nr = nda.rows ();
-  orig_nc = nda.cols ();
-
-  len = nda.length ();
-
   if (len == 0)
     {
-      num_zeros = 0;
-      num_ones = 0;
-      max_val = 0;
-      min_val = 0;
       initialized = 1;
       return;
     }
   else
     {
       int k = 0;
       data = new int [len];
 
@@ -186,41 +148,29 @@ IDX_VEC_REP::idx_vector_rep (const NDArr
 	    data[k++] = tree_to_mat_idx (d);
 	}
     }
 
   init_state ();
 }
 
 IDX_VEC_REP::idx_vector_rep (const Range& r)
+  : data (0), len (r.nelem ()), num_zeros (0), num_ones (0),
+    max_val (0), min_val (0), count (1), frozen_at_z_len (0),
+    frozen_len (0), colon (0), one_zero (0), initialized (0),
+    frozen (0), colon_equiv_checked (0), colon_equiv (0),
+    orig_dims (1, len)
 {
-  data = 0;
-  initialized = 0;
-  frozen = 0;
-  colon_equiv_checked = 0;
-  colon_equiv = 0;
-  colon = 0;
-  one_zero = 0;
-
-  len = r.nelem ();
-
-  orig_nr = 1;
-  orig_nc = len;
-
   if (len < 0)
     {
       (*current_liboctave_error_handler) ("invalid range used as index");
       return;
     }
   else if (len == 0)
     {
-      num_zeros = 0;
-      num_ones = 0;
-      max_val = 0;
-      min_val = 0;
       initialized = 1;
       return;
     }
 
   double b = r.base ();
   double step = r.inc ();
 
   data = new int [len];
@@ -234,126 +184,83 @@ IDX_VEC_REP::idx_vector_rep (const Range
       else
 	data[i] = tree_to_mat_idx (val);
     }
 
   init_state ();
 }
 
 IDX_VEC_REP::idx_vector_rep (double d)
+  : data (0), len (1), num_zeros (0), num_ones (0),
+    max_val (0), min_val (0), count (1), frozen_at_z_len (0),
+    frozen_len (0), colon (0), one_zero (0), initialized (0),
+    frozen (0), colon_equiv_checked (0), colon_equiv (0),
+    orig_dims (1, 1)
 {
-  data = 0;
-  initialized = 0;
-  frozen = 0;
-  colon_equiv_checked = 0;
-  colon_equiv = 0;
-  colon = 0;
-  one_zero = 0;
-
-  len = 1;
-
-  orig_nr = 1;
-  orig_nc = 1;
-
   if (idx_is_inf_or_nan (d))
     return;
   else
     {
       data = new int [len];
 
       data[0] = tree_to_mat_idx (d);
     }
 
   init_state ();
 }
 
 IDX_VEC_REP::idx_vector_rep (int i)
+  : data (0), len (1), num_zeros (0), num_ones (0),
+    max_val (0), min_val (0), count (1), frozen_at_z_len (0),
+    frozen_len (0), colon (0), one_zero (0), initialized (0),
+    frozen (0), colon_equiv_checked (0), colon_equiv (0),
+    orig_dims (1, 1)
 {
-  data = 0;
-  initialized = 0;
-  frozen = 0;
-  colon_equiv_checked = 0;
-  colon_equiv = 0;
-  colon = 0;
-  one_zero = 0;
-
-  len = 1;
-
-  orig_nr = 1;
-  orig_nc = 1;
-
   data = new int [len];
 
   data[0] = tree_to_mat_idx (i);
 
   init_state ();
 }
 
 IDX_VEC_REP::idx_vector_rep (char c)
+  : data (0), len (0), num_zeros (0), num_ones (0),
+    max_val (0), min_val (0), count (1), frozen_at_z_len (0),
+    frozen_len (0), colon (1), one_zero (0), initialized (0),
+    frozen (0), colon_equiv_checked (0), colon_equiv (0),
+    orig_dims (0, 0)
 {
   assert (c == ':');
 
-  colon = 1;
-  len = 0;
-  num_zeros = 0;
-  num_ones = 0;
-  one_zero = 0;
-  initialized = 0;
-  frozen = 0;
-  colon_equiv_checked = 0;
-  colon_equiv = 0;
-  data = 0;
-
   init_state ();
 }
 
 IDX_VEC_REP::idx_vector_rep (bool b)
+  : data (0), len (1), num_zeros (0), num_ones (0),
+    max_val (0), min_val (0), count (1), frozen_at_z_len (0),
+    frozen_len (0), colon (0), one_zero (1), initialized (0),
+    frozen (0), colon_equiv_checked (0), colon_equiv (0),
+    orig_dims (1, 1)
 {
-  data = 0;
-  initialized = 0;
-  frozen = 0;
-  colon_equiv_checked = 0;
-  colon_equiv = 0;
-  colon = 0;
-  one_zero = 1;
-
-  len = 1;
-
-  orig_nr = 1;
-  orig_nc = 1;
-
   data = new int [len];
 
   data[0] = tree_to_mat_idx (b);
 
   init_state ();
 }
 
 IDX_VEC_REP::idx_vector_rep (const boolNDArray& bnda)
+  : data (0), len (bnda.length ()), num_zeros (0), num_ones (0),
+    max_val (0), min_val (0), count (1), frozen_at_z_len (0),
+    frozen_len (0), colon (0), one_zero (1), initialized (0),
+    frozen (0), colon_equiv_checked (0), colon_equiv (0),
+    orig_dims (bnda.dims ())
 {
-  data = 0;
-  initialized = 0;
-  frozen = 0;
-  colon_equiv_checked = 0;
-  colon_equiv = 0;
-  colon = 0;
-  one_zero = 1;
-
-  orig_nr = bnda.rows ();
-  orig_nc = bnda.cols ();
-
-  len = bnda.length ();
-
   if (len == 0)
     {
-      num_zeros = 0;
-      num_ones = 0;
-      one_zero = 0;
-      max_val = 0;
-      min_val = 0;
       initialized = 1;
       return;
     }
   else
     {
       int k = 0;
       data = new int [len];
 
@@ -364,39 +271,37 @@ IDX_VEC_REP::idx_vector_rep (const boolN
   init_state ();
 }
 
 IDX_VEC_REP&
 IDX_VEC_REP::operator = (const IDX_VEC_REP& a)
 {
   if (this != &a)
     {
-      initialized = a.initialized;
-      frozen = a.frozen;
-      colon_equiv_checked = a.colon_equiv_checked;
-      colon_equiv = a.colon_equiv;
-
-      colon = a.colon;
-
-      orig_nr = a.orig_nr;
-      orig_nc = a.orig_nc;
-
       delete [] data;
       len = a.len;
       data = new int [len];
       for (int i = 0; i < len; i++)
 	data[i] = a.data[i];
 
       num_zeros = a.num_zeros;
       num_ones = a.num_ones;
-      one_zero = a.one_zero;
-
       max_val = a.max_val;
       min_val = a.min_val;
+      frozen_at_z_len = a.frozen_at_z_len;
+      frozen_len = a.frozen_len;
+      colon = a.colon;
+      one_zero = a.one_zero;
+      initialized = a.initialized;
+      frozen = a.frozen;
+      colon_equiv_checked = a.colon_equiv_checked;
+      colon_equiv = a.colon_equiv;
+      orig_dims = a.orig_dims;
     }
+
   return *this;
 }
 
 void
 IDX_VEC_REP::init_state (void)
 {
   num_zeros = 0;
   num_ones = 0;
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -24,17 +24,17 @@ Software Foundation, 59 Temple Place - S
 #define octave_idx_vector_h 1
 
 #if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma interface
 #endif
 
 #include <iostream>
 
-#include "Array.h"
+#include "dim-vector.h"
 
 class ColumnVector;
 class boolNDArray;
 class NDArray;
 class Range;
 
 class
 idx_vector
@@ -42,30 +42,20 @@ idx_vector
 private:
 
   class
   idx_vector_rep
   {
   public:
 
     idx_vector_rep (void)
-      {
-	colon = 0;
-	len = 0;
-	num_zeros = 0;
-	num_ones = 0;
-	one_zero = 0;
-	orig_nr = 0;
-	orig_nc = 0;
-	initialized = 0;
-	frozen = 0;
-	colon_equiv_checked = 0;
-	colon_equiv = 0;
-	data = 0;
-      }
+      : data (0), len (0), num_zeros (0), num_ones (0), max_val (0),
+	min_val (0), count (1), frozen_at_z_len (0), frozen_len (0),
+	colon (0), one_zero (0), initialized (0), frozen (0),
+	colon_equiv_checked (0), colon_equiv (0), orig_dims () { }
 
     idx_vector_rep (const ColumnVector& v);
 
     idx_vector_rep (const NDArray& nda);
 
     idx_vector_rep (const Range& r);
 
     idx_vector_rep (double d);
@@ -101,20 +91,20 @@ private:
     int zeros_count (void) const { return num_zeros; }
     int ones_count (void) const { return num_ones; }
 
     int is_colon (void) const { return colon; }
     int is_colon_equiv (int n, int sort_uniq);
 
     void sort (bool uniq);
 
-    int orig_rows (void) const { return orig_nr; }
-    int orig_columns (void) const { return orig_nc; }
+    int orig_rows (void) const { return orig_dims(0); }
+    int orig_columns (void) const { return orig_dims(1); }
 
-    Array<int> orig_dimensions (void) const { return orig_dims; }
+    dim_vector orig_dimensions (void) const { return orig_dims; }
 
     // other stuff
 
     void shorten (int n); // Unsafe.  Avoid at all cost.
 
     int freeze (int z_len, const char *tag, bool resize_ok, bool warn_resize);
 
     // i/o
@@ -123,35 +113,29 @@ private:
 
     int *data;
     int len;
     int num_zeros;
     int num_ones;
     int max_val;
     int min_val;
 
-    // XXX FIXME XXX -- with the introduction of orig_dims, these two
-    // variables are not neccessary.  orig_dims(0) and orig_dims(1)
-    // should replace them in the code.
-
-    int orig_nr;
-    int orig_nc;
-
-    Array<int> orig_dims;
- 
     int count;
     int frozen_at_z_len;
     int frozen_len;
+
     unsigned int colon : 1;
     unsigned int one_zero : 1;
     unsigned int initialized : 1;
     unsigned int frozen : 1;
     unsigned int colon_equiv_checked : 1;
     unsigned int colon_equiv : 1;
 
+    dim_vector orig_dims;
+ 
     void init_state (void);
 
     void maybe_convert_one_zero_to_idx (int z_len);
   };
 
 public:
 
   idx_vector (void)
@@ -253,28 +237,25 @@ public:
   int is_colon_equiv (int n, int sort_uniq = 0) const
     { return rep->is_colon_equiv (n, sort_uniq); }
 
   void sort (bool uniq = false) { rep->sort (uniq); }
 
   int orig_rows (void) const { return rep->orig_rows (); }
   int orig_columns (void) const { return rep->orig_columns (); }
 
-  Array<int> orig_dimensions (void) const { return rep->orig_dimensions (); }
+  dim_vector orig_dimensions (void) const { return rep->orig_dimensions (); }
 
   int orig_empty (void) const
-    {
-      return (! is_colon ()
-	      && (orig_rows () == 0 || orig_columns () == 0));
-    }
+    { return (! is_colon () && orig_dimensions().any_zero ()); }
 
-// Unsafe.  Avoid at all cost.
+  // Unsafe.  Avoid at all cost.
   void shorten (int n) { rep->shorten (n); }
 
-// i/o
+  // i/o
 
   int freeze (int z_len, const char *tag, bool resize_ok = false,
 	      bool warn_resize = false)
     { return rep->freeze (z_len, tag, resize_ok, warn_resize); }
 
   std::ostream& print (std::ostream& os) const { return rep->print (os); }
 
   friend std::ostream& operator << (std::ostream& os, const idx_vector& a)
