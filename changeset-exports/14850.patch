# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1341774146 25200
#      Sun Jul 08 12:02:26 2012 -0700
# Node ID cfb64ea5c6a35fa7fd7d19cc8935f5b9ccbcc329
# Parent  f6d3d5b0bd4218deb04be8691e0fa733e40f3fc2
doc: Add Seealso links to betainc() docstring

* betainc.cc (betainc): Add Seealso links to betainc() docstring.

diff --git a/src/DLD-FUNCTIONS/betainc.cc b/src/DLD-FUNCTIONS/betainc.cc
--- a/src/DLD-FUNCTIONS/betainc.cc
+++ b/src/DLD-FUNCTIONS/betainc.cc
@@ -57,16 +57,17 @@ betainc (x, a, b) = -----------   | t^(a
 @end group\n\
 @end smallexample\n\
 \n\
 @end ifnottex\n\
 \n\
 If @var{x} has more than one component, both @var{a} and @var{b} must be\n\
 scalars.  If @var{x} is a scalar, @var{a} and @var{b} must be of\n\
 compatible dimensions.\n\
+@seealso{betaincinv, beta, betaln}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 3)
     {
@@ -443,20 +444,20 @@ Compute the inverse of the incomplete Be
 
                       if (! error_state)
                         retval = betaincinv (x, a, b);
                     }
                 }
             }
         }
 
-      // FIXME: It would be better to have an algorithm for betaincinv which accepted
-      //        float inputs and returned float outputs.  As it is, we do extra work
-      //        to calculate betaincinv to double precision and then throw that precision
-      //        away.
+      // FIXME: It would be better to have an algorithm for betaincinv which
+      // accepted float inputs and returned float outputs.  As it is, we do
+      // extra work to calculate betaincinv to double precision and then throw
+      // that precision away.
       if (x_arg.is_single_type () || a_arg.is_single_type () ||
           b_arg.is_single_type ())
         {
           retval = Array<float> (retval.array_value ());
         }
     }
   else
     print_usage ();
