# HG changeset patch
# User jwe
# Date 1148409250 0
#      Tue May 23 18:34:10 2006 +0000
# Node ID 93785a1b0f974bec7f118e0c53658f9d548114cc
# Parent  22e23bee74c8a6d68c6dafa94b8dd804f3ebe3b4
[project @ 2006-05-23 18:34:10 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2006-05-23  John W. Eaton  <jwe@octave.org>
+
+	* plot/mesh.m: Use __gnupot_raw__ except where __gnuplot_set__ is
+	really needed.
+
 2006-05-22  John W. Eaton  <jwe@octave.org>
 
 	* scripts/general/lookup.m: New file from Octave Forge.
 
 2006-05-22  David Bateman  <dbateman@free.fr>
 
 	* scripts/general/nthroot.m, scripts/linear-algebra/rref.m,
 	scripts/specfun/isprime.m, scripts/specfun/primes.m,
diff --git a/scripts/plot/mesh.m b/scripts/plot/mesh.m
--- a/scripts/plot/mesh.m
+++ b/scripts/plot/mesh.m
@@ -69,19 +69,18 @@ function mesh (x, y, z)
         endfor
         __gnuplot_raw__ ("set hidden3d;\n");
         __gnuplot_raw__ ("set data style lines;\n");
         __gnuplot_raw__ ("set surface;\n");
         __gnuplot_raw__ ("set nocontour;\n");
         __gnuplot_raw__ ("set nologscale;\n");
         __gnuplot_set__ parametric;
         __gnuplot_raw__ ("set view 60, 30, 1, 1;\n");
-        __gnuplot_set__ palette defined ( 0 "dark-blue", 1 "blue", ...
-                  2 "cyan", 3 "yellow", 4 "red" , 5 "dark-red" )
-        __gnuplot_set__ nocolorbox
+        __gnuplot_raw__ ("set palette defined (0 \"dark-blue\", 1 \"blue\", 2 \"cyan\", 3 \"yellow\", 4 \"red\" , 5 \"dark-red\");\n");
+        __gnuplot_raw__ ("set nocolorbox;\n");
         __gnuplot_splot__ zz with line palette;
         __gnuplot_set__ noparametric;
       else
         msg = "mesh: rows (z) must be the same as length (y) and";
         msg = sprintf ("%s\ncolumns (z) must be the same as length (x)", msg);
         error (msg);
       endif
     elseif (ismatrix (x) && ismatrix (y) && ismatrix (z))
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+2006-05-23  John W. Eaton  <jwe@octave.org>
+
+	* load-save.cc (Fsave): Use tellp instead of pubseekoff to
+	determine whether we are at beginning of file.
+
+	* ov-intx.h (OCTAVE_VALUE_INT_SCALAR_T::increment, 
+	OCTAVE_VALUE_INT_SCALAR_T::decrement,
+	OCTAVE_VALUE_INT_MATRIX_T::increment,
+	OCTAVE_VALUE_INT_MATRIX_T::decrement): New functions.
+	* OPERATORS/op-int.h (OCTAVE_INSTALL_M_INT_UNOPS,
+	OCTAVE_INSTALL_S_INT_UNOPS, OCTAVE_M_INT_UNOPS,
+	OCTAVE_S_INT_UNOPS): Uncomment increment and decrement ops.
+
 2006-05-19  John W. Eaton  <jwe@octave.org>
 
 	* symtab.cc (SYMBOL_DEF::document): If definition is a function,
 	also pass doc string to function object.
 	* ov-fcn.h (octave_function::document): New function.
 	* defun.cc (print_usage (octave_function *)): New function.
 	(print_usage (void)): New function.
 	(print_usage (const std::string&)): Provide for backward
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -368,17 +368,17 @@ mat2cell (reshape(1:16,4,4),[3,1],[3,1])
     13\n\
     14\n\
     15\n\
 \n\
   [2,2] = 16\n\
 @}\n\
 @end group\n\
 @end example\n\
-@seealso{num2cell,cell2mat\n\
+@seealso{num2cell, cell2mat}\n\
 @end deftypefn")
 {
   int nargin = args.length();
   octave_value retval;
 
   if (nargin < 2)
     usage ("mat2cell");
   else
diff --git a/src/DLD-FUNCTIONS/eig.cc b/src/DLD-FUNCTIONS/eig.cc
--- a/src/DLD-FUNCTIONS/eig.cc
+++ b/src/DLD-FUNCTIONS/eig.cc
@@ -37,16 +37,18 @@ DEFUN_DLD (eig, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{lambda} =} eig (@var{a})\n\
 @deftypefnx {Loadable Function} {[@var{v}, @var{lambda}] =} eig (@var{a})\n\
 The eigenvalues (and eigenvectors) of a matrix are computed in a several\n\
 step process which begins with a Hessenberg decomposition, followed by a\n\
 Schur decomposition, from which the eigenvalues are apparent.  The\n\
 eigenvectors, when desired, are computed by further manipulations of the\n\
 Schur decomposition.\n\
+\n\
+The eigenvalues returned by @code{eig} are not ordered.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin != 1 || nargout > 2)
     {
diff --git a/src/OPERATORS/op-int.h b/src/OPERATORS/op-int.h
--- a/src/OPERATORS/op-int.h
+++ b/src/OPERATORS/op-int.h
@@ -98,18 +98,18 @@ 02110-1301, USA.
   /* scalar unary ops. */  \
  \
   DEFUNOP_OP (s_not, TYPE ## _scalar, !) \
   DEFUNOP_OP (s_uplus, TYPE ## _scalar, /* no-op */) \
   DEFUNOP_OP (s_uminus, TYPE ## _scalar, -) \
   DEFUNOP_OP (s_transpose, TYPE ## _scalar, /* no-op */) \
   DEFUNOP_OP (s_hermitian, TYPE ## _scalar, /* no-op */) \
  \
-  /* DEFNCUNOP_METHOD (s_incr, TYPE ## _scalar, increment) */ \
-  /* DEFNCUNOP_METHOD (s_decr, TYPE ## _scalar, decrement) */
+  DEFNCUNOP_METHOD (s_incr, TYPE ## _scalar, increment) \
+  DEFNCUNOP_METHOD (s_decr, TYPE ## _scalar, decrement)
 
 #define OCTAVE_SS_INT_ARITH_OPS(PFX, T1, T2) \
   /* scalar by scalar ops. */ \
  \
   DEFBINOP_OP (PFX ## _add, T1 ## scalar, T2 ## scalar, +) \
   DEFBINOP_OP (PFX ## _sub, T1 ## scalar, T2 ## scalar, -) \
   DEFBINOP_OP (PFX ## _mul, T1 ## scalar, T2 ## scalar, *) \
  \
@@ -408,18 +408,18 @@ octave_value elem_xpow (T1 ## NDArray a,
       { \
 	error ("transpose not defined for N-d objects"); \
 	return octave_value (); \
       } \
     else \
       return octave_value (v.TYPE ## _array_value().transpose ()); \
   } \
  \
-  /* DEFNCUNOP_METHOD (m_incr, TYPE ## _matrix, increment) */ \
-  /* DEFNCUNOP_METHOD (m_decr, TYPE ## _matrix, decrement) */
+  DEFNCUNOP_METHOD (m_incr, TYPE ## _matrix, increment) \
+  DEFNCUNOP_METHOD (m_decr, TYPE ## _matrix, decrement)
 
 #define OCTAVE_MM_INT_ARITH_OPS(T1, T2) \
   /* matrix by matrix ops. */ \
  \
   DEFNDBINOP_OP (mm_add, T1 ## _matrix, T2 ## _matrix, T1 ## _array, T2 ## _array, +) \
   DEFNDBINOP_OP (mm_sub, T1 ## _matrix, T2 ## _matrix, T1 ## _array, T2 ## _array, -) \
  \
   /* DEFBINOP_OP (mm_mul, T1 ## _matrix, T2 ## _matrix, *) */ \
@@ -522,18 +522,18 @@ octave_value elem_xpow (T1 ## NDArray a,
 
 #define OCTAVE_INSTALL_S_INT_UNOPS(TYPE) \
   INSTALL_UNOP (op_not, octave_ ## TYPE ## _scalar, s_not); \
   INSTALL_UNOP (op_uplus, octave_ ## TYPE ## _scalar, s_uplus); \
   INSTALL_UNOP (op_uminus, octave_ ## TYPE ## _scalar, s_uminus); \
   INSTALL_UNOP (op_transpose, octave_ ## TYPE ## _scalar, s_transpose); \
   INSTALL_UNOP (op_hermitian, octave_ ## TYPE ## _scalar, s_hermitian); \
  \
-  /* INSTALL_NCUNOP (op_incr, octave_ ## TYPE ## _scalar, s_incr); */ \
-  /* INSTALL_NCUNOP (op_decr, octave_ ## TYPE ## _scalar, s_decr); */
+  INSTALL_NCUNOP (op_incr, octave_ ## TYPE ## _scalar, s_incr); \
+  INSTALL_NCUNOP (op_decr, octave_ ## TYPE ## _scalar, s_decr);
 
 #define OCTAVE_INSTALL_SS_INT_ARITH_OPS(PFX, T1, T2) \
   INSTALL_BINOP (op_add, octave_ ## T1 ## scalar, octave_ ## T2 ## scalar, PFX ## _add); \
   INSTALL_BINOP (op_sub, octave_ ## T1 ## scalar, octave_ ## T2 ## scalar, PFX ## _sub); \
   INSTALL_BINOP (op_mul, octave_ ## T1 ## scalar, octave_ ## T2 ## scalar, PFX ## _mul); \
   INSTALL_BINOP (op_div, octave_ ## T1 ## scalar, octave_ ## T2 ## scalar, PFX ## _div); \
   INSTALL_BINOP (op_pow, octave_ ## T1 ## scalar, octave_ ## T2 ## scalar, PFX ## _pow); \
   INSTALL_BINOP (op_ldiv, octave_ ## T1 ## scalar, octave_ ## T2 ## scalar, PFX ## _ldiv); \
@@ -651,18 +651,18 @@ octave_value elem_xpow (T1 ## NDArray a,
 
 #define OCTAVE_INSTALL_M_INT_UNOPS(TYPE) \
   INSTALL_UNOP (op_not, octave_ ## TYPE ## _matrix, m_not); \
   INSTALL_UNOP (op_uplus, octave_ ## TYPE ## _matrix, m_uplus); \
   INSTALL_UNOP (op_uminus, octave_ ## TYPE ## _matrix, m_uminus); \
   INSTALL_UNOP (op_transpose, octave_ ## TYPE ## _matrix, m_transpose); \
   INSTALL_UNOP (op_hermitian, octave_ ## TYPE ## _matrix, m_transpose); \
  \
-  /* INSTALL_NCUNOP (op_incr, octave_ ## TYPE ## _matrix, m_incr); */ \
-  /* INSTALL_NCUNOP (op_decr, octave_ ## TYPE ## _matrix, m_decr); */
+  INSTALL_NCUNOP (op_incr, octave_ ## TYPE ## _matrix, m_incr); \
+  INSTALL_NCUNOP (op_decr, octave_ ## TYPE ## _matrix, m_decr);
 
 #define OCTAVE_INSTALL_MM_INT_ARITH_OPS(T1, T2) \
   INSTALL_BINOP (op_add, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_add); \
   INSTALL_BINOP (op_sub, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_sub); \
   /* INSTALL_BINOP (op_mul, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_mul); */ \
   /* INSTALL_BINOP (op_div, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_div); */ \
   INSTALL_BINOP (op_pow, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_pow); \
   /* INSTALL_BINOP (op_ldiv, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_ldiv); */ \
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -1676,19 +1676,17 @@ the file @file{data} in Octave's binary 
 	{
 #ifdef HAVE_ZLIB
 	  if (use_zlib)
 	    {
 	      gzofstream file (fname.c_str (), mode);
 
 	      if (file)
 		{
-		  bool write_header_info
-		    = ((file.rdbuf ())->pubseekoff (0, std::ios::cur)
-		       == static_cast<std::streampos> (0));
+		  bool write_header_info = ! file.tellp ();
 	      
 		  save_vars (argv, i, argc, file, format,
 			     save_as_floats, write_header_info);
 
 		  file.close ();
 		}
 	      else
 		{
@@ -1698,19 +1696,17 @@ the file @file{data} in Octave's binary 
 	    }
 	  else
 #endif
 	    {
 	      std::ofstream file (fname.c_str (), mode);
 	  
 	      if (file)
 		{
-		  bool write_header_info
-		    = ((file.rdbuf ())->pubseekoff (0, std::ios::cur)
-		       == static_cast<std::streampos> (0));
+		  bool write_header_info = ! file.tellp ();
 	      
 		  save_vars (argv, i, argc, file, format,
 			     save_as_floats, write_header_info);
 
 		  file.close ();
 		}
 	      else
 		{
diff --git a/src/ov-intx.h b/src/ov-intx.h
--- a/src/ov-intx.h
+++ b/src/ov-intx.h
@@ -131,16 +131,20 @@ public:
     octave_idx_type nel = numel ();
   
     for (octave_idx_type i = 0; i < nel; i++)
       retval(i) = static_cast<char>(matrix(i));
 
     return retval;
   }
 
+  void increment (void) { matrix += 1; }
+
+  void decrement (void) { matrix -= 1; }
+
   idx_vector index_vector (void) const { return idx_vector (matrix); }
 
   int write (octave_stream& os, int block_size,
 	     oct_data_conv::data_type output_type, int skip,
 	     oct_mach_info::float_format flt_fmt) const
     { return os.write (matrix, block_size, output_type, skip, flt_fmt); }
 
 private:
@@ -295,16 +299,20 @@ public:
   charNDArray
   char_array_value (bool = false) const
   {
     charNDArray retval (dim_vector (1, 1));
     retval(0) = static_cast<char>(scalar);
     return retval;
   }
 
+  void increment (void) { scalar += 1; }
+
+  void decrement (void) { scalar -= 1; }
+
   idx_vector index_vector (void) const { return idx_vector (scalar); }
 
   int write (octave_stream& os, int block_size,
 	     oct_data_conv::data_type output_type, octave_idx_type skip,
 	     oct_mach_info::float_format flt_fmt) const
     {
       return os.write (OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION (),
 		       block_size, output_type, skip, flt_fmt);
