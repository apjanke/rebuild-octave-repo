# HG changeset patch
# User Rik <rik@octave.org>
# Date 1459136359 25200
#      Sun Mar 27 20:39:19 2016 -0700
# Node ID ad0599a0acc67ff7a2655a67f5a9f67cbda71f1d
# Parent  f7f97d7e929435462c4e770f30396c934563b734
doc: Wrap C++ docstrings to 79 characters + newline (80 total).

* besselj.cc, bitfcns.cc, cellfun.cc, data.cc, debug.cc, error.cc,
file-io.cc, graphics.cc, input.cc, lu.cc, matrix_type.cc, nproc.cc,
pr-output.cc, quadcc.cc, regexp.cc, schur.cc, sparse.cc, strfind.cc, strfns.cc,
syscalls.cc, urlwrite.cc, variables.cc, __osmesa_print__.cc, audiodevinfo.cc,
audioread.cc, ccolamd.cc, chol.cc, colamd.cc, convhulln.cc, qr.cc, symbfact.cc,
ov-java.cc, ov-struct.cc, ov-usr-fcn.cc, pt-arg-list.cc:
doc: Wrap C++ docstrings to 79 characters + newline (80 total).

diff --git a/libinterp/corefcn/besselj.cc b/libinterp/corefcn/besselj.cc
--- a/libinterp/corefcn/besselj.cc
+++ b/libinterp/corefcn/besselj.cc
@@ -309,28 +309,28 @@ DEFUN (besselj, args, nargout,
 Compute Bessel or Hankel functions of various kinds:\n\
 \n\
 @table @code\n\
 @item besselj\n\
 Bessel functions of the first kind.  If the argument @var{opt} is 1 or true,\n\
 the result is multiplied by @w{@code{exp (-abs (imag (@var{x})))}}.\n\
 \n\
 @item bessely\n\
-Bessel functions of the second kind.  If the argument @var{opt} is 1 or true,\n\
-the result is multiplied by @code{exp (-abs (imag (@var{x})))}.\n\
+Bessel functions of the second kind.  If the argument @var{opt} is 1 or\n\
+true, the result is multiplied by @code{exp (-abs (imag (@var{x})))}.\n\
 \n\
 @item besseli\n\
 \n\
 Modified Bessel functions of the first kind.  If the argument @var{opt} is 1\n\
 or true, the result is multiplied by @code{exp (-abs (real (@var{x})))}.\n\
 \n\
 @item besselk\n\
 \n\
-Modified Bessel functions of the second kind.  If the argument @var{opt} is 1\n\
-or true, the result is multiplied by @code{exp (@var{x})}.\n\
+Modified Bessel functions of the second kind.  If the argument @var{opt} is\n\
+1 or true, the result is multiplied by @code{exp (@var{x})}.\n\
 \n\
 @item besselh\n\
 Compute Hankel functions of the first (@var{k} = 1) or second (@var{k}\n\
 = 2) kind.  If the argument @var{opt} is 1 or true, the result is multiplied\n\
 by @code{exp (-I*@var{x})} for @var{k} = 1 or @code{exp (I*@var{x})} for\n\
 @var{k} = 2.\n\
 @end table\n\
 \n\
diff --git a/libinterp/corefcn/bitfcns.cc b/libinterp/corefcn/bitfcns.cc
--- a/libinterp/corefcn/bitfcns.cc
+++ b/libinterp/corefcn/bitfcns.cc
@@ -658,18 +658,19 @@ DEFUN (flintmax, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {} {} flintmax ()\n\
 @deftypefnx {} {} flintmax (\"double\")\n\
 @deftypefnx {} {} flintmax (\"single\")\n\
 Return the largest integer that can be represented consecutively in a\n\
 floating point value.\n\
 \n\
 The default class is @qcode{\"double\"}, but @qcode{\"single\"} is a valid\n\
-option.  On IEEE 754 compatible systems, @code{flintmax} is @w{@math{2^{53}}}\n\
-for @qcode{\"double\"} and @w{@math{2^{24}}} for @qcode{\"single\"}.\n\
+option.  On IEEE 754 compatible systems, @code{flintmax} is\n\
+@w{@math{2^{53}}} for @qcode{\"double\"} and @w{@math{2^{24}}} for\n\
+@qcode{\"single\"}.\n\
 @seealso{intmax, realmax, realmin}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
 
   if (nargin > 1)
     print_usage ();
 
diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -315,19 +315,19 @@ Equally the function can return one or m
 \n\
 @example\n\
 @group\n\
 cellfun (\"atan2\", @{1, 0@}, @{0, 1@})\n\
      @result{} [ 1.57080   0.00000 ]\n\
 @end group\n\
 @end example\n\
 \n\
-The number of output arguments of @code{cellfun} matches the number of output\n\
-arguments of the function.  The outputs of the function will be collected\n\
-into the output arguments of @code{cellfun} like this:\n\
+The number of output arguments of @code{cellfun} matches the number of\n\
+output arguments of the function.  The outputs of the function will be\n\
+collected into the output arguments of @code{cellfun} like this:\n\
 \n\
 @example\n\
 @group\n\
 function [a, b] = twoouts (x)\n\
   a = x;\n\
   b = x*x;\n\
 endfunction\n\
 [aa, bb] = cellfun (@@twoouts, @{1, 2, 3@})\n\
@@ -362,17 +362,17 @@ function is\n\
 \n\
 @example\n\
 function [@dots{}] = errfunc (@var{s}, @dots{})\n\
 @end example\n\
 \n\
 @noindent\n\
 where there is an additional input argument to @var{errfunc} relative to\n\
 @var{func}, given by @var{s}.  This is a structure with the elements\n\
-@qcode{\"identifier\"}, @qcode{\"message\"} and @qcode{\"index\"}, giving\n\
+@qcode{\"identifier\"}, @qcode{\"message\"}, and @qcode{\"index\"} giving\n\
 respectively the error identifier, the error message, and the index into the\n\
 input arguments of the element that caused the error.  For example:\n\
 \n\
 @example\n\
 @group\n\
 function y = foo (s, x), y = NaN; endfunction\n\
 cellfun (\"factorial\", @{-1,2@}, \"ErrorHandler\", @@foo)\n\
 @result{} [NaN 2]\n\
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -581,18 +581,18 @@ The remainder is computed using the expr
 \n\
 @example\n\
 x - y .* fix (x ./ y)\n\
 @end example\n\
 \n\
 An error message is printed if the dimensions of the arguments do not agree,\n\
 or if either argument is complex.\n\
 \n\
-Programming Notes: Floating point numbers within a few eps of an integer will\n\
-be rounded to an integer before computation for compatibility with\n\
+Programming Notes: Floating point numbers within a few eps of an integer\n\
+will be rounded to an integer before computation for compatibility with\n\
 @sc{matlab}.\n\
 \n\
 By convention,\n\
 \n\
 @example\n\
 @group\n\
 rem (@var{x}, 0) = NaN  if @var{x} is a floating point variable\n\
 rem (@var{x}, 0) = 0    if @var{x} is an integer variable\n\
@@ -764,18 +764,18 @@ x - y .* floor (x ./ y)\n\
 @noindent\n\
 and is written such that the correct modulus is returned for integer types.\n\
 This function handles negative values correctly.  That is,\n\
 @w{@code{mod (-1, 3)}} is 2, not -1, as @w{@code{rem (-1, 3)}} returns.\n\
 \n\
 An error results if the dimensions of the arguments do not agree, or if\n\
 either of the arguments is complex.\n\
 \n\
-Programming Notes: Floating point numbers within a few eps of an integer will\n\
-be rounded to an integer before computation for compatibility with\n\
+Programming Notes: Floating point numbers within a few eps of an integer\n\
+will be rounded to an integer before computation for compatibility with\n\
 @sc{matlab}.\n\
 \n\
 By convention,\n\
 \n\
 @example\n\
 @group\n\
 mod (@var{x}, 0) = @var{x}\n\
 mod (@var{x}, @var{y})      returns a value with the signbit from @var{y}\n\
@@ -4319,18 +4319,18 @@ infinity are division by zero and overfl
 @group\n\
 [ 1/0 e^800 ]\n\
 @result{} Inf   Inf\n\
 @end group\n\
 @end example\n\
 \n\
 When called with no arguments, return a scalar with the value @samp{Inf}.\n\
 \n\
-When called with a single argument, return a square matrix with the dimension\n\
-specified.\n\
+When called with a single argument, return a square matrix with the\n\
+dimension specified.\n\
 \n\
 When called with more than one scalar argument the first two arguments are\n\
 taken as the number of rows and columns and any further arguments specify\n\
 additional matrix dimensions.\n\
 \n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{isinf, NaN}\n\
@@ -4367,34 +4367,35 @@ DEFUN (NaN, args, ,
 @deftypefn  {} {} NaN\n\
 @deftypefnx {} {} NaN (@var{n})\n\
 @deftypefnx {} {} NaN (@var{n}, @var{m})\n\
 @deftypefnx {} {} NaN (@var{n}, @var{m}, @var{k}, @dots{})\n\
 @deftypefnx {} {} NaN (@dots{}, @var{class})\n\
 Return a scalar, matrix, or N-dimensional array whose elements are all equal\n\
 to the IEEE symbol NaN (Not a Number).\n\
 \n\
-NaN is the result of operations which do not produce a well defined numerical\n\
-result.  Common operations which produce a NaN are arithmetic with infinity\n\
+NaN is the result of operations which do not produce a well defined\n\
+numerical result.  Common operations which produce a NaN are arithmetic\n\
+with infinity\n\
 @tex\n\
 ($\\infty - \\infty$), zero divided by zero ($0/0$),\n\
 @end tex\n\
 @ifnottex\n\
 (Inf - Inf), zero divided by zero (0/0),\n\
 @end ifnottex\n\
 and any operation involving another NaN value (5 + NaN).\n\
 \n\
 Note that NaN always compares not equal to NaN (NaN != NaN).  This behavior\n\
 is specified by the IEEE standard for floating point arithmetic.  To find\n\
 NaN values, use the @code{isnan} function.\n\
 \n\
 When called with no arguments, return a scalar with the value @samp{NaN}.\n\
 \n\
-When called with a single argument, return a square matrix with the dimension\n\
-specified.\n\
+When called with a single argument, return a square matrix with the\n\
+dimension specified.\n\
 \n\
 When called with more than one scalar argument the first two arguments are\n\
 taken as the number of rows and columns and any further arguments specify\n\
 additional matrix dimensions.\n\
 \n\
 \n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
@@ -4439,18 +4440,18 @@ The constant\n\
 $e$ satisfies the equation $\\log (e) = 1$.\n\
 @end tex\n\
 @ifnottex\n\
 @samp{e} satisfies the equation @code{log} (e) = 1.\n\
 @end ifnottex\n\
 \n\
 When called with no arguments, return a scalar with the value @math{e}.\n\
 \n\
-When called with a single argument, return a square matrix with the dimension\n\
-specified.\n\
+When called with a single argument, return a square matrix with the\n\
+dimension specified.\n\
 \n\
 When called with more than one scalar argument the first two arguments are\n\
 taken as the number of rows and columns and any further arguments specify\n\
 additional matrix dimensions.\n\
 \n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{log, exp, pi, I}\n\
@@ -4607,18 +4608,18 @@ Internally, @code{pi} is computed as @sa
 When called with no arguments, return a scalar with the value of\n\
 @tex\n\
 $\\pi$.\n\
 @end tex\n\
 @ifnottex\n\
 pi.\n\
 @end ifnottex\n\
 \n\
-When called with a single argument, return a square matrix with the dimension\n\
-specified.\n\
+When called with a single argument, return a square matrix with the\n\
+dimension specified.\n\
 \n\
 When called with more than one scalar argument the first two arguments are\n\
 taken as the number of rows and columns and any further arguments specify\n\
 additional matrix dimensions.\n\
 \n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{e, I}\n\
@@ -4651,18 +4652,18 @@ floating point arithmetic, @code{realmax
 @ifnottex\n\
 1.7977e+308 for double precision and 3.4028e+38\n\
 @end ifnottex\n\
 for single precision.\n\
 \n\
 When called with no arguments, return a scalar with the value\n\
 @code{realmax (@qcode{\"double\"})}.\n\
 \n\
-When called with a single argument, return a square matrix with the dimension\n\
-specified.\n\
+When called with a single argument, return a square matrix with the\n\
+dimension specified.\n\
 \n\
 When called with more than one scalar argument the first two arguments are\n\
 taken as the number of rows and columns and any further arguments specify\n\
 additional matrix dimensions.\n\
 \n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{realmin, intmax, flintmax, eps}\n\
@@ -4690,18 +4691,18 @@ IEEE floating point arithmetic, @code{re
 @ifnottex\n\
 2.2251e-308 for double precision and 1.1755e-38\n\
 @end ifnottex\n\
 for single precision.\n\
 \n\
 When called with no arguments, return a scalar with the value\n\
 @code{realmin (@qcode{\"double\"})}.\n\
 \n\
-When called with a single argument, return a square matrix with the dimension\n\
-specified.\n\
+When called with a single argument, return a square matrix with the\n\
+dimension specified.\n\
 \n\
 When called with more than one scalar argument the first two arguments are\n\
 taken as the number of rows and columns and any further arguments specify\n\
 additional matrix dimensions.\n\
 \n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{realmax, intmin, eps}\n\
@@ -4732,18 +4733,18 @@ to the pure imaginary unit, defined as\n
 @w{@code{sqrt (-1)}}.\n\
 @end ifnottex\n\
 \n\
 I, and its equivalents i, j, and J, are functions so any of the names may\n\
 be reused for other purposes (such as i for a counter variable).\n\
 \n\
 When called with no arguments, return a scalar with the value @math{i}.\n\
 \n\
-When called with a single argument, return a square matrix with the dimension\n\
-specified.\n\
+When called with a single argument, return a square matrix with the\n\
+dimension specified.\n\
 \n\
 When called with more than one scalar argument the first two arguments are\n\
 taken as the number of rows and columns and any further arguments specify\n\
 additional matrix dimensions.\n\
 \n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{e, pi, log, exp}\n\
@@ -4766,18 +4767,18 @@ DEFUN (NA, args, ,
 Return a scalar, matrix, or N-dimensional array whose elements are all equal\n\
 to the special constant used to designate missing values.\n\
 \n\
 Note that NA always compares not equal to NA (NA != NA).\n\
 To find NA values, use the @code{isna} function.\n\
 \n\
 When called with no arguments, return a scalar with the value @samp{NA}.\n\
 \n\
-When called with a single argument, return a square matrix with the dimension\n\
-specified.\n\
+When called with a single argument, return a square matrix with the\n\
+dimension specified.\n\
 \n\
 When called with more than one scalar argument the first two arguments are\n\
 taken as the number of rows and columns and any further arguments specify\n\
 additional matrix dimensions.\n\
 \n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{isna}\n\
@@ -7656,22 +7657,23 @@ do_repelems (const Array<T>& src, const 
   return retval;
 }
 
 DEFUN (repelems, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} repelems (@var{x}, @var{r})\n\
 Construct a vector of repeated elements from @var{x}.\n\
 \n\
-@var{r} is a 2x@var{N} integer matrix specifying which elements to repeat and\n\
-how often to repeat each element.  Entries in the first row, @var{r}(1,j),\n\
-select an element to repeat.  The corresponding entry in the second row,\n\
-@var{r}(2,j), specifies the repeat count.  If @var{x} is a matrix then the\n\
-columns of @var{x} are imagined to be stacked on top of each other for\n\
-purposes of the selection index.  A row vector is always returned.\n\
+@var{r} is a 2x@var{N} integer matrix specifying which elements to repeat\n\
+and how often to repeat each element.  Entries in the first row,\n\
+@var{r}(1,j), select an element to repeat.  The corresponding entry in the\n\
+second row, @var{r}(2,j), specifies the repeat count.  If @var{x} is a\n\
+matrix then the columns of @var{x} are imagined to be stacked on top of\n\
+each other for purposes of the selection index.  A row vector is always\n\
+returned.\n\
 \n\
 Conceptually the result is calculated as follows:\n\
 \n\
 @example\n\
 @group\n\
 y = [];\n\
 for i = 1:columns (@var{r})\n\
   y = [y, @var{x}(@var{r}(1,i)*ones(1, @var{r}(2,i)))];\n\
diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -968,17 +968,17 @@ argument (@code{[@var{line1}, @var{line2
 context that exists at the breakpoint.  When the breakpoint is encountered,\n\
 @var{condition} will be evaluated, and execution will stop if\n\
 @var{condition} is true.  If @var{condition} cannot be evaluated, for\n\
 example because it refers to an undefined variable, an error will be thrown.\n\
  Expressions with side effects (such as @code{y++ > 1}) will alter\n\
 variables, and should generally be avoided.  Conditions containing quotes\n\
 (@samp{\"}, @samp{'}) or comment characters (@samp{#}, @samp{%}) must be\n\
 enclosed in quotes.  (This does not apply to conditions entered from the\n\
-editor's context menu.)  For example: \n\
+editor's context menu.)  For example:\n\
 \n\
 @example\n\
 dbstop in strread at 209 if 'any (format == \"%f\")'\n\
 @end example\n\
 \n\
 The form specifying @var{event} does not cause a specific breakpoint at a\n\
 given function and line number.  Instead it causes debug mode to be entered\n\
 when certain unexpected events are encountered.  Possible values are\n\
@@ -1120,18 +1120,18 @@ DEFUN (dbclear, args, ,
 @deftypefnx {} {} dbclear (@var{line}, @dots{})\n\
 @deftypefnx {} {} dbclear (\"all\")\n\
 Delete a breakpoint at line number @var{line} in the function @var{func}.\n\
 \n\
 Arguments are\n\
 \n\
 @table @var\n\
 @item func\n\
-Function name as a string variable.  When already in debug mode this argument\n\
-can be omitted and the current function will be used.\n\
+Function name as a string variable.  When already in debug mode this\n\
+argument can be omitted and the current function will be used.\n\
 \n\
 @item line\n\
 Line number from which to remove a breakpoint.  Multiple lines may be given\n\
 as separate arguments or as a vector.\n\
 \n\
 @item event\n\
 An event such as @code{error}, @code{interrupt}, or @code{warning}\n\
 (@pxref{XREFdbstop,,dbstop} for details).\n\
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -1135,18 +1135,18 @@ a single message:\n\
 function h () nargin == 1 || error (\"nargin != 1\\n\"); end\n\
 f ()\n\
 error: nargin != 1\n\
 @end group\n\
 @end example\n\
 \n\
 A null string (\"\") input to @code{error} will be ignored and the code\n\
 will continue running as if the statement were a NOP@.  This is for\n\
-compatibility with @sc{matlab}.  It also makes it possible to write code such\n\
-as\n\
+compatibility with @sc{matlab}.  It also makes it possible to write code\n\
+such as\n\
 \n\
 @example\n\
 @group\n\
 err_msg = \"\";\n\
 if (CONDITION 1)\n\
   err_msg = \"CONDITION 1 found\";\n\
 elseif (CONDITION2)\n\
   err_msg = \"CONDITION 2 found\";\n\
@@ -1400,32 +1400,33 @@ DEFUN (warning, args, nargout,
 @deftypefn  {} {} warning (@var{template}, @dots{})\n\
 @deftypefnx {} {} warning (@var{id}, @var{template}, @dots{})\n\
 @deftypefnx {} {} warning (\"on\", @var{id})\n\
 @deftypefnx {} {} warning (\"off\", @var{id})\n\
 @deftypefnx {} {} warning (\"query\", @var{id})\n\
 @deftypefnx {} {} warning (\"error\", @var{id})\n\
 @deftypefnx {} {} warning (@var{state}, \"backtrace\")\n\
 @deftypefnx {} {} warning (@var{state}, @var{id}, \"local\")\n\
-Display a warning message or control the behavior of Octave's warning system.\n\
+Display a warning message or control the behavior of Octave's warning\n\
+system.\n\
 \n\
 Format the optional arguments under the control of the template string\n\
 @var{template} using the same rules as the @code{printf} family of\n\
 functions (@pxref{Formatted Output}) and print the resulting message\n\
 on the @code{stderr} stream.  The message is prefixed by the character\n\
 string @samp{warning: }.\n\
 You should use this function when you want to notify the user\n\
 of an unusual condition, but only when it makes sense for your program\n\
 to go on.\n\
 \n\
 The optional message identifier allows users to enable or disable\n\
 warnings tagged by @var{id}.  A message identifier is of the form\n\
-\"NAMESPACE:WARNING-NAME\".  Octave's own warnings use the @qcode{\"Octave\"}\n\
-namespace (@pxref{XREFwarning_ids}).  The special identifier @qcode{\"all\"}\n\
-may be used to set the state of all warnings.\n\
+\"NAMESPACE:WARNING-NAME\".  Octave's own warnings use the\n\
+@qcode{\"Octave\"} namespace (@pxref{XREFwarning_ids}).  The special\n\
+identifier @qcode{\"all\"} may be used to set the state of all warnings.\n\
 \n\
 If the first argument is @qcode{\"on\"} or @qcode{\"off\"},\n\
 set the state of a particular warning using the identifier @var{id}.  If the\n\
 first argument is @qcode{\"query\"}, query the state of this warning\n\
 instead.  If the identifier is omitted, a value of @qcode{\"all\"} is\n\
 assumed.  If you set the state of a warning to @qcode{\"error\"}, the\n\
 warning named by @var{id} is handled as if it were an error instead.  So,\n\
 for example, the following handles all warnings as errors:\n\
@@ -1826,19 +1827,19 @@ The name of function in which the error 
 @item line\n\
 The line number at which the error occurred\n\
 \n\
 @item column\n\
 An optional field with the column number at which the error occurred\n\
 @end table\n\
 @end table\n\
 \n\
-The last error structure may be set by passing a scalar structure, @var{err},\n\
-as input.  Any fields of @var{err} that match those above are set while any\n\
-unspecified fields are initialized with default values.\n\
+The last error structure may be set by passing a scalar structure,\n\
+@var{err}, as input.  Any fields of @var{err} that match those above are\n\
+set while any unspecified fields are initialized with default values.\n\
 \n\
 If @code{lasterror} is called with the argument @qcode{\"reset\"}, all\n\
 fields are set to their default values.\n\
 @seealso{lasterr, error, lastwarn}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
 
diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -317,17 +317,18 @@ DEFUN (fgetl, args, ,
 @deftypefn  {} {@var{str} =} fgetl (@var{fid})\n\
 @deftypefnx {} {@var{str} =} fgetl (@var{fid}, @var{len})\n\
 Read characters from a file, stopping after a newline, or EOF,\n\
 or @var{len} characters have been read.\n\
 \n\
 The characters read, excluding the possible trailing newline, are returned\n\
 as a string.\n\
 \n\
-If @var{len} is omitted, @code{fgetl} reads until the next newline character.\n\
+If @var{len} is omitted, @code{fgetl} reads until the next newline\n\
+character.\n\
 \n\
 If there are no more characters to read, @code{fgetl} returns @minus{}1.\n\
 \n\
 To read a line and return the terminating newline see @code{fgets}.\n\
 @seealso{fgets, fscanf, fread, fopen}\n\
 @end deftypefn")
 {
   static std::string who = "fgetl";
@@ -356,17 +357,18 @@ DEFUN (fgets, args, ,
 @deftypefn  {} {@var{str} =} fgets (@var{fid})\n\
 @deftypefnx {} {@var{str} =} fgets (@var{fid}, @var{len})\n\
 Read characters from a file, stopping after a newline, or EOF,\n\
 or @var{len} characters have been read.\n\
 \n\
 The characters read, including the possible trailing newline, are returned\n\
 as a string.\n\
 \n\
-If @var{len} is omitted, @code{fgets} reads until the next newline character.\n\
+If @var{len} is omitted, @code{fgets} reads until the next newline\n\
+character.\n\
 \n\
 If there are no more characters to read, @code{fgets} returns @minus{}1.\n\
 \n\
 To read a line and discard the terminating newline see @code{fgetl}.\n\
 @seealso{fputs, fgetl, fscanf, fread, fopen}\n\
 @end deftypefn")
 {
   static std::string who = "fgets";
@@ -393,18 +395,18 @@ To read a line and discard the terminati
 DEFUN (fskipl, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {} {@var{nlines} =} fskipl (@var{fid})\n\
 @deftypefnx {} {@var{nlines} =} fskipl (@var{fid}, @var{count})\n\
 @deftypefnx {} {@var{nlines} =} fskipl (@var{fid}, Inf)\n\
 Read and skip @var{count} lines from the file specified by the file\n\
 descriptor @var{fid}.\n\
 \n\
-@code{fskipl} discards characters until an end-of-line is encountered exactly\n\
-@var{count}-times, or until the end-of-file marker is found.\n\
+@code{fskipl} discards characters until an end-of-line is encountered\n\
+exactly @var{count}-times, or until the end-of-file marker is found.\n\
 \n\
 If @var{count} is omitted, it defaults to 1.  @var{count} may also be\n\
 @code{Inf}, in which case lines are skipped until the end of the file.\n\
 This form is suitable for counting the number of lines in a file.\n\
 \n\
 Returns the number of lines skipped (end-of-line sequences encountered).\n\
 @seealso{fgetl, fgets, fscanf, fopen}\n\
 @end deftypefn")
@@ -569,20 +571,20 @@ Open a file for reading or writing.  The
 discarded.\n\
 \n\
 @item @samp{a+}\n\
 Open or create a file for reading or writing at the end of the\n\
 file.\n\
 @end table\n\
 \n\
 Append a @qcode{\"t\"} to the mode string to open the file in text mode or a\n\
-@qcode{\"b\"} to open in binary mode.  On Windows and Macintosh systems, text\n\
-mode reading and writing automatically converts linefeeds to the\n\
-appropriate line end character for the system (carriage-return linefeed\n\
-on Windows, carriage-return on Macintosh).  The default when no mode is\n\
+@qcode{\"b\"} to open in binary mode.  On Windows and Macintosh systems,\n\
+text mode reading and writing automatically converts linefeeds to the\n\
+appropriate line end character for the system (carriage-return linefeed on\n\
+Windows, carriage-return on Macintosh).  The default when no mode is\n\
 specified is binary mode.\n\
 \n\
 Additionally, you may append a @qcode{\"z\"} to the mode string to open a\n\
 gzipped file for reading or writing.  For this to be successful, you\n\
 must also open the file in binary mode.\n\
 \n\
 The parameter @var{arch} is a string specifying the default data format\n\
 for the file.  Valid values for @var{arch} are:\n\
@@ -2858,26 +2860,27 @@ DEFUN (mkstemp, args, ,
 @deftypefn  {} {[@var{fid}, @var{name}, @var{msg}] =} mkstemp (\"@var{template}\")\n\
 @deftypefnx {} {[@var{fid}, @var{name}, @var{msg}] =} mkstemp (\"@var{template}\", @var{delete})\n\
 Return the file descriptor @var{fid} corresponding to a new temporary file\n\
 with a unique name created from @var{template}.\n\
 \n\
 The last six characters of @var{template} must be @qcode{\"XXXXXX\"} and\n\
 these are replaced with a string that makes the filename unique.  The file\n\
 is then created with mode read/write and permissions that are system\n\
-dependent (on GNU/Linux systems, the permissions will be 0600 for versions of\n\
-glibc 2.0.7 and later).  The file is opened in binary mode and with the\n\
+dependent (on GNU/Linux systems, the permissions will be 0600 for versions\n\
+of glibc 2.0.7 and later).  The file is opened in binary mode and with the\n\
 @w{@code{O_EXCL}} flag.\n\
 \n\
 If the optional argument @var{delete} is supplied and is true, the file will\n\
 be deleted automatically when Octave exits.\n\
 \n\
 If successful, @var{fid} is a valid file ID, @var{name} is the name of the\n\
 file, and @var{msg} is an empty string.  Otherwise, @var{fid} is -1,\n\
-@var{name} is empty, and @var{msg} contains a system-dependent error message.\n\
+@var{name} is empty, and @var{msg} contains a system-dependent error\n\
+message.\n\
 @seealso{tempname, tempdir, P_tmpdir, tmpfile, fopen}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -9770,20 +9770,20 @@ elements in @var{properties}.  The first
 values for the first entry in @var{properties}, etc.  The number of rows of\n\
 @var{values} must be 1 or match the number of elements of @var{h}.  In the\n\
 first case, each handle in @var{h} will be assigned the same values.  In the\n\
 latter case, the first handle in @var{h} will be assigned the values from\n\
 the first row of @var{values} and so on.\n\
 \n\
 @item as a structure array @var{pv}\n\
 \n\
-Here, the field names of @var{pv} represent the property names, and the field\n\
-values give the property values.  In contrast to the previous case, all\n\
-elements of @var{pv} will be set in all handles in @var{h} independent of\n\
-the dimensions of @var{pv}.\n\
+Here, the field names of @var{pv} represent the property names, and the\n\
+field values give the property values.  In contrast to the previous case,\n\
+all elements of @var{pv} will be set in all handles in @var{h} independent\n\
+of the dimensions of @var{pv}.\n\
 @end itemize\n\
 \n\
 @code{set} is also used to query the list of values a named property will\n\
 take.  @code{@var{clist} = set (@var{h}, \"property\")} will return the list\n\
 of possible values for @qcode{\"property\"} in the cell list @var{clist}.\n\
 If no output variable is used then the list is formatted and printed to the\n\
 screen.\n\
 \n\
diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -1464,18 +1464,18 @@ Undocumented internal function.\n\
   return retval;
 }
 
 DEFUN (filemarker, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {} {@var{val} =} filemarker ()\n\
 @deftypefnx {} {@var{old_val} =} filemarker (@var{new_val})\n\
 @deftypefnx {} {} filemarker (@var{new_val}, \"local\")\n\
-Query or set the character used to separate the filename from the subfunction\n\
-names contained within the file.\n\
+Query or set the character used to separate the filename from the\n\
+subfunction names contained within the file.\n\
 \n\
 By default this is the character @samp{>}.\n\
 This can be used in a generic manner to interact with subfunctions.\n\
 For example,\n\
 \n\
 @example\n\
 help ([\"myfunc\", filemarker, \"mysubfunc\"])\n\
 @end example\n\
diff --git a/libinterp/corefcn/lu.cc b/libinterp/corefcn/lu.cc
--- a/libinterp/corefcn/lu.cc
+++ b/libinterp/corefcn/lu.cc
@@ -125,21 +125,21 @@ the values defined by @code{spparms} are
 \n\
 Given the string argument @qcode{\"vector\"}, @code{lu} returns the values\n\
 of @var{P} and @var{Q} as vector values, such that for full matrix,\n\
 @code{@var{A}(@var{P},:) = @var{L} * @var{U}}, and @code{@var{R}(@var{P},:)\n\
 * @var{A}(:,@var{Q}) = @var{L} * @var{U}}.\n\
 \n\
 With two output arguments, returns the permuted forms of the upper and\n\
 lower triangular matrices, such that @code{@var{A} = @var{L} * @var{U}}.\n\
-With one output argument @var{y}, then the matrix returned by the @sc{lapack}\n\
-routines is returned.  If the input matrix is sparse then the matrix @var{L}\n\
-is embedded into @var{U} to give a return value similar to the full case.\n\
-For both full and sparse matrices, @code{lu} loses the permutation\n\
-information.\n\
+With one output argument @var{y}, then the matrix returned by the\n\
+@sc{lapack} routines is returned.  If the input matrix is sparse then the\n\
+matrix @var{L} is embedded into @var{U} to give a return value similar to\n\
+the full case.  For both full and sparse matrices, @code{lu} loses the\n\
+permutation information.\n\
 @seealso{luupdate, ilu, chol, hess, qr, qz, schur, svd}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
   bool issparse = (nargin > 0 && args(0).is_sparse_type ());
 
   if (nargin < 1 || (issparse && nargin > 3) || (! issparse && nargin > 2))
     print_usage ();
diff --git a/libinterp/corefcn/matrix_type.cc b/libinterp/corefcn/matrix_type.cc
--- a/libinterp/corefcn/matrix_type.cc
+++ b/libinterp/corefcn/matrix_type.cc
@@ -54,18 +54,18 @@ matrix and caches it for future use.\n\
 \n\
 Called with more than one argument, @code{matrix_type} allows the type of\n\
 the matrix to be defined.\n\
 \n\
 If the option @qcode{\"nocompute\"} is given, the function will not attempt\n\
 to guess the type if it is still unknown.  This is useful for debugging\n\
 purposes.\n\
 \n\
-The possible matrix types depend on whether the matrix is full or sparse, and\n\
-can be one of the following\n\
+The possible matrix types depend on whether the matrix is full or sparse,\n\
+and can be one of the following\n\
 \n\
 @table @asis\n\
 @item @qcode{\"unknown\"}\n\
 Remove any previously cached matrix type, and mark type as unknown.\n\
 \n\
 @item @qcode{\"full\"}\n\
 Mark the matrix as full.\n\
 \n\
@@ -88,18 +88,18 @@ defined by the vector @var{perm}.\n\
 @item @qcode{\"lower\"}\n\
 Lower triangular.  If the optional third argument @var{perm} is given, the\n\
 matrix is assumed to be a permuted lower triangular with the permutations\n\
 defined by the vector @var{perm}.\n\
 \n\
 @item  @qcode{\"banded\"}\n\
 @itemx @qcode{\"banded positive definite\"}\n\
 Banded matrix with the band size of @var{nl} below the diagonal and @var{nu}\n\
-above it.  If @var{nl} and @var{nu} are 1, then the matrix is tridiagonal and\n\
-treated with specialized code.  In addition the matrix can be marked as\n\
+above it.  If @var{nl} and @var{nu} are 1, then the matrix is tridiagonal\n\
+and treated with specialized code.  In addition the matrix can be marked as\n\
 probably a positive definite.  (Sparse matrices only)\n\
 \n\
 @item @qcode{\"singular\"}\n\
 The matrix is assumed to be singular and will be treated with a minimum norm\n\
 solution.\n\
 \n\
 @end table\n\
 \n\
diff --git a/libinterp/corefcn/nproc.cc b/libinterp/corefcn/nproc.cc
--- a/libinterp/corefcn/nproc.cc
+++ b/libinterp/corefcn/nproc.cc
@@ -39,18 +39,18 @@ are counted as follows:\n\
 @table @code\n\
 @item all\n\
 total number of processors.\n\
 \n\
 @item current\n\
 processors available to the current process.\n\
 \n\
 @item overridable\n\
-same as @code{current}, but overridable through the @w{@env{OMP_NUM_THREADS}}\n\
-environment variable.\n\
+same as @code{current}, but overridable through the\n\
+@w{@env{OMP_NUM_THREADS}} environment variable.\n\
 @end table\n\
 @end deftypefn")
 {
   int nargin = args.length ();
 
   if (nargin > 1)
     print_usage ();
 
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -3889,20 +3889,20 @@ Fixed point format with 15 significant f
 of 20 characters wide.\n\
 \n\
 As with the @samp{short} format, Octave will switch to an exponential\n\
 @samp{e} format if it is unable to format a matrix properly using the\n\
 current format.\n\
 \n\
 @item  short e\n\
 @itemx long e\n\
-Exponential format.  The number to be represented is split between a mantissa\n\
-and an exponent (power of 10).  The mantissa has 5 significant digits in the\n\
-short format and 15 digits in the long format.\n\
-For example, with the @samp{short e} format, @code{pi} is displayed as\n\
+Exponential format.  The number to be represented is split between a\n\
+mantissa and an exponent (power of 10).  The mantissa has 5 significant\n\
+digits in the short format and 15 digits in the long format.  For example,\n\
+with the @samp{short e} format, @code{pi} is displayed as\n\
 @code{3.1416e+00}.\n\
 \n\
 @item  short E\n\
 @itemx long E\n\
 Identical to @samp{short e} or @samp{long e} but displays an uppercase\n\
 @samp{E} to indicate the exponent.\n\
 For example, with the @samp{long E} format, @code{pi} is displayed as\n\
 @code{3.14159265358979E+00}.\n\
@@ -3995,18 +3995,18 @@ For example, the value of @code{pi} is\n
 @example\n\
 @group\n\
 01000000000010010010000111111011\n\
 01010100010001000010110100011000\n\
 @end group\n\
 @end example\n\
 \n\
 (shown here in two 32 bit sections for typesetting purposes) when\n\
-printed in native-bit format on a workstation which stores 8 byte real values\n\
-in IEEE format with the least significant byte first.\n\
+printed in native-bit format on a workstation which stores 8 byte real\n\
+values in IEEE format with the least significant byte first.\n\
 \n\
 @item bit\n\
 The same as @code{native-bit}, but always print the most significant\n\
 bits first.\n\
 \n\
 @item rat\n\
 Print a rational approximation, i.e., values are approximated\n\
 as the ratio of small integers.\n\
diff --git a/libinterp/corefcn/quadcc.cc b/libinterp/corefcn/quadcc.cc
--- a/libinterp/corefcn/quadcc.cc
+++ b/libinterp/corefcn/quadcc.cc
@@ -1514,17 +1514,18 @@ For the example above, which has a disco
 @example\n\
 int = quadcc (f, a, b, 1.0e-6, [ 1 ]);\n\
 @end example\n\
 \n\
 The result of the integration is returned in @var{q}.\n\
 \n\
 @var{err} is an estimate of the absolute integration error.\n\
 \n\
-@var{nr_points} is the number of points at which the integrand was evaluated.\n\
+@var{nr_points} is the number of points at which the integrand was\n\
+evaluated.\n\
 \n\
 If the adaptive integration did not converge, the value of @var{err} will be\n\
 larger than the requested tolerance.  Therefore, it is recommended to verify\n\
 this value for difficult integrands.\n\
 \n\
 @code{quadcc} is capable of dealing with non-numeric values of the integrand\n\
 such as @code{NaN} or @code{Inf}.  If the integral diverges, and\n\
 @code{quadcc} detects this, then a warning is issued and @code{Inf} or\n\
diff --git a/libinterp/corefcn/regexp.cc b/libinterp/corefcn/regexp.cc
--- a/libinterp/corefcn/regexp.cc
+++ b/libinterp/corefcn/regexp.cc
@@ -827,18 +827,18 @@ Alternatively, use (?-s) in the pattern.
 \n\
 @item literalspacing\n\
 All characters in the pattern, including whitespace, are significant and are\n\
 used in pattern matching.  (default)\n\
 \n\
 Alternatively, use (?-x) in the pattern.\n\
 \n\
 @item freespacing\n\
-The pattern may include arbitrary whitespace and also comments beginning with\n\
-the character @samp{#}.\n\
+The pattern may include arbitrary whitespace and also comments beginning\n\
+with the character @samp{#}.\n\
 \n\
 Alternatively, use (?x) in the pattern.\n\
 \n\
 @item noemptymatch\n\
 Zero-length matches are not returned.  (default)\n\
 \n\
 @item emptymatch\n\
 Return zero-length matches.\n\
diff --git a/libinterp/corefcn/schur.cc b/libinterp/corefcn/schur.cc
--- a/libinterp/corefcn/schur.cc
+++ b/libinterp/corefcn/schur.cc
@@ -263,18 +263,18 @@ in control (see @code{are} and @code{dar
 %!error <wrong type argument 'cell'> schur ({1})
 %!warning <incorrect ordered schur argument> schur ([1, 2; 3, 4], "bad_opt");
 
 */
 
 DEFUN (rsf2csf, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn {} {[@var{U}, @var{T}] =} rsf2csf (@var{UR}, @var{TR})\n\
-Convert a real, upper quasi-triangular Schur@tie{}form @var{TR} to a complex,\n\
-upper triangular Schur@tie{}form @var{T}.\n\
+Convert a real, upper quasi-triangular Schur@tie{}form @var{TR} to a\n\
+complex, upper triangular Schur@tie{}form @var{T}.\n\
 \n\
 Note that the following relations hold:\n\
 \n\
 @tex\n\
 $UR \\cdot TR \\cdot {UR}^T = U T U^{\\dagger}$ and\n\
 $U^{\\dagger} U$ is the identity matrix I.\n\
 @end tex\n\
 @ifnottex\n\
diff --git a/libinterp/corefcn/sparse.cc b/libinterp/corefcn/sparse.cc
--- a/libinterp/corefcn/sparse.cc
+++ b/libinterp/corefcn/sparse.cc
@@ -74,18 +74,18 @@ dimensions @var{m} and @var{n}.  If any 
 scalars, they are expanded to have a common size.\n\
 \n\
 If @var{m} or @var{n} are not specified their values are derived from the\n\
 maximum index in the vectors @var{i} and @var{j} as given by\n\
 @code{@var{m} = max (@var{i})}, @code{@var{n} = max (@var{j})}.\n\
 \n\
 @strong{Note}: if multiple values are specified with the same @var{i},\n\
 @var{j} indices, the corresponding value in @var{s} will be the sum of the\n\
-values at the repeated location.  See @code{accumarray} for an example of how\n\
-to produce different behavior, such as taking the minimum instead.\n\
+values at the repeated location.  See @code{accumarray} for an example of\n\
+how to produce different behavior, such as taking the minimum instead.\n\
 \n\
 If the option @qcode{\"unique\"} is given, and more than one value is\n\
 specified at the same @var{i}, @var{j} indices, then the last specified\n\
 value will be used.\n\
 \n\
 @code{sparse (@var{m}, @var{n})} will create an empty @var{m}x@var{n} sparse\n\
 matrix and is equivalent to @code{sparse ([], [], [], @var{m}, @var{n})}\n\
 \n\
diff --git a/libinterp/corefcn/strfind.cc b/libinterp/corefcn/strfind.cc
--- a/libinterp/corefcn/strfind.cc
+++ b/libinterp/corefcn/strfind.cc
@@ -358,18 +358,18 @@ DEFUN (strrep, args, ,
 @deftypefnx {} {@var{newstr} =} strrep (@dots{}, \"overlaps\", @var{val})\n\
 Replace all occurrences of the pattern @var{ptn} in the string @var{str}\n\
 with the string @var{rep} and return the result.\n\
 \n\
 The optional argument @qcode{\"overlaps\"} determines whether the pattern\n\
 can match at every position in @var{str} (true), or only for unique\n\
 occurrences of the complete pattern (false).  The default is true.\n\
 \n\
-@var{s} may also be a cell array of strings, in which case the replacement is\n\
-done for each element and a cell array is returned.\n\
+@var{s} may also be a cell array of strings, in which case the replacement\n\
+is done for each element and a cell array is returned.\n\
 \n\
 Example:\n\
 \n\
 @example\n\
 @group\n\
 strrep (\"This is a test string\", \"is\", \"&%$\")\n\
     @result{}  \"Th&%$ &%$ a test string\"\n\
 @end group\n\
diff --git a/libinterp/corefcn/strfns.cc b/libinterp/corefcn/strfns.cc
--- a/libinterp/corefcn/strfns.cc
+++ b/libinterp/corefcn/strfns.cc
@@ -625,18 +625,18 @@ strncmp_str_op (const std::string& s1, c
   octave_idx_type l2 = s2.length ();
   return (n > 0 && n <= l1 && n <= l2
           && std::equal (s1.data (), s1.data () + n, s2.data ()));
 }
 
 DEFUN (strncmp, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} strncmp (@var{s1}, @var{s2}, @var{n})\n\
-Return 1 if the first @var{n} characters of strings @var{s1} and @var{s2} are\n\
-the same, and 0 otherwise.\n\
+Return 1 if the first @var{n} characters of strings @var{s1} and @var{s2}\n\
+are the same, and 0 otherwise.\n\
 \n\
 @example\n\
 @group\n\
 strncmp (\"abce\", \"abcd\", 3)\n\
       @result{} 1\n\
 @end group\n\
 @end example\n\
 \n\
diff --git a/libinterp/corefcn/syscalls.cc b/libinterp/corefcn/syscalls.cc
--- a/libinterp/corefcn/syscalls.cc
+++ b/libinterp/corefcn/syscalls.cc
@@ -228,18 +228,18 @@ fclose (out);\n\
 waitpid (pid);\n\
 \n\
    @print{} these\n\
    @print{} strings\n\
    @print{} some\n\
    @print{} are\n\
 @end example\n\
 \n\
-Note that @code{popen2}, unlike @code{popen}, will not @nospell{\"reap\"} the\n\
-child process.  If you don't use @code{waitpid} to check the child's\n\
+Note that @code{popen2}, unlike @code{popen}, will not @nospell{\"reap\"}\n\
+the child process.  If you don't use @code{waitpid} to check the child's\n\
 exit status, it will linger until Octave exits.\n\
 @seealso{popen, waitpid}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
@@ -868,119 +868,126 @@ For example:\n\
   return retval;
 }
 
 DEFUNX ("S_ISREG", FS_ISREG, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} S_ISREG (@var{mode})\n\
 Return true if @var{mode} corresponds to a regular file.\n\
 \n\
-The value of @var{mode} is assumed to be returned from a call to @code{stat}.\n\
+The value of @var{mode} is assumed to be returned from a call to\n\
+@code{stat}.\n\
 @seealso{stat, lstat}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
 
   double mode = args(0).xdouble_value ("S_ISREG: invalid MODE value");
 
   return ovl (file_stat::is_reg (static_cast<mode_t> (mode)));
 }
 
 DEFUNX ("S_ISDIR", FS_ISDIR, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} S_ISDIR (@var{mode})\n\
 Return true if @var{mode} corresponds to a directory.\n\
 \n\
-The value of @var{mode} is assumed to be returned from a call to @code{stat}.\n\
+The value of @var{mode} is assumed to be returned from a call to\n\
+@code{stat}.\n\
 @seealso{stat, lstat}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
 
   double mode = args(0).xdouble_value ("S_ISDIR: invalid MODE value");
 
   return ovl (file_stat::is_dir (static_cast<mode_t> (mode)));
 }
 
 DEFUNX ("S_ISCHR", FS_ISCHR, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} S_ISCHR (@var{mode})\n\
 Return true if @var{mode} corresponds to a character device.\n\
 \n\
-The value of @var{mode} is assumed to be returned from a call to @code{stat}.\n\
+The value of @var{mode} is assumed to be returned from a call to\n\
+@code{stat}.\n\
 @seealso{stat, lstat}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
 
   double mode = args(0).xdouble_value ("S_ISCHR: invalid MODE value");
 
   return ovl (file_stat::is_chr (static_cast<mode_t> (mode)));
 }
 
 DEFUNX ("S_ISBLK", FS_ISBLK, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} S_ISBLK (@var{mode})\n\
 Return true if @var{mode} corresponds to a block device.\n\
 \n\
-The value of @var{mode} is assumed to be returned from a call to @code{stat}.\n\
+The value of @var{mode} is assumed to be returned from a call to\n\
+@code{stat}.\n\
 @seealso{stat, lstat}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
 
   double mode = args(0).xdouble_value ("S_ISBLK: invalid MODE value");
 
   return ovl (file_stat::is_blk (static_cast<mode_t> (mode)));
 }
 
 DEFUNX ("S_ISFIFO", FS_ISFIFO, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} S_ISFIFO (@var{mode})\n\
 Return true if @var{mode} corresponds to a fifo.\n\
 \n\
-The value of @var{mode} is assumed to be returned from a call to @code{stat}.\n\
+The value of @var{mode} is assumed to be returned from a call to\n\
+@code{stat}.\n\
 @seealso{stat, lstat}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
 
   double mode = args(0).xdouble_value ("S_ISFIFO: invalid MODE value");
 
   return ovl (file_stat::is_fifo (static_cast<mode_t> (mode)));
 }
 
 DEFUNX ("S_ISLNK", FS_ISLNK, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} S_ISLNK (@var{mode})\n\
 Return true if @var{mode} corresponds to a symbolic link.\n\
 \n\
-The value of @var{mode} is assumed to be returned from a call to @code{stat}.\n\
+The value of @var{mode} is assumed to be returned from a call to\n\
+@code{stat}.\n\
 @seealso{stat, lstat}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
 
   double mode = args(0).xdouble_value ("S_ISLNK: invalid MODE value");
 
   return ovl (file_stat::is_lnk (static_cast<mode_t> (mode)));
 }
 
 DEFUNX ("S_ISSOCK", FS_ISSOCK, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} S_ISSOCK (@var{mode})\n\
 Return true if @var{mode} corresponds to a socket.\n\
 \n\
-The value of @var{mode} is assumed to be returned from a call to @code{stat}.\n\
+The value of @var{mode} is assumed to be returned from a call to\n\
+@code{stat}.\n\
 @seealso{stat, lstat}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
 
   double mode = args(0).xdouble_value ("S_ISSOCK: invalid MODE value");
 
@@ -1488,17 +1495,18 @@ and writing.\n\
   err_disabled_feature ("O_RDWR", "O_RDWR");
 #endif
 }
 
 DEFUNX ("O_SYNC", FO_SYNC, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} O_SYNC ()\n\
 Return the numerical value of the file status flag that may be\n\
-returned by @code{fcntl} to indicate that a file is open for synchronous I/O.\n\
+returned by @code{fcntl} to indicate that a file is open for synchronous\n\
+I/O.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDONLY, O_RDWR, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
 #if defined (O_SYNC)
   return const_value (args, O_SYNC);
 #else
   err_disabled_feature ("O_SYNC", "O_SYNC");
 #endif
diff --git a/libinterp/corefcn/urlwrite.cc b/libinterp/corefcn/urlwrite.cc
--- a/libinterp/corefcn/urlwrite.cc
+++ b/libinterp/corefcn/urlwrite.cc
@@ -298,17 +298,17 @@ urlwrite (\"ftp://ftp.octave.org/pub/REA
 The full path of the downloaded file is returned in @var{f}.\n\
 \n\
 The variable @var{success} is 1 if the download was successful,\n\
 otherwise it is 0 in which case @var{message} contains an error message.\n\
 \n\
 If no output argument is specified and an error occurs, then the error is\n\
 signaled through Octave's error handling mechanism.\n\
 \n\
-This function uses libcurl.  Curl supports, among others, the HTTP, FTP and\n\
+This function uses libcurl.  Curl supports, among others, the HTTP, FTP, and\n\
 FILE protocols.  Username and password may be specified in the URL, for\n\
 example:\n\
 \n\
 @example\n\
 @group\n\
 urlwrite (\"http://username:password@@example.com/file.txt\",\n\
           \"file.txt\");\n\
 @end group\n\
@@ -415,17 +415,17 @@ s = urlread (\"ftp://ftp.octave.org/pub/
 \n\
 The variable @var{success} is 1 if the download was successful,\n\
 otherwise it is 0 in which case @var{message} contains an error\n\
 message.\n\
 \n\
 If no output argument is specified and an error occurs, then the error is\n\
 signaled through Octave's error handling mechanism.\n\
 \n\
-This function uses libcurl.  Curl supports, among others, the HTTP, FTP and\n\
+This function uses libcurl.  Curl supports, among others, the HTTP, FTP, and\n\
 FILE protocols.  Username and password may be specified in the URL@.  For\n\
 example:\n\
 \n\
 @example\n\
 s = urlread (\"http://user:password@@example.com/file.txt\");\n\
 @end example\n\
 \n\
 GET and POST requests can be specified by @var{method} and @var{param}.\n\
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -2589,22 +2589,22 @@ Right alignment (default).\n\
 @item c\n\
 Column-aligned (only applicable to command %s).\n\
 @end table\n\
 \n\
 The @code{width} parameter is a positive integer specifying the minimum\n\
 number of columns used for printing.  No maximum is needed as the field will\n\
 auto-expand as required.\n\
 \n\
-The parameters @code{left-min} and @code{balance} are only available when the\n\
-column-aligned modifier is used with the command @samp{%s}.\n\
-@code{balance} specifies the column number within the field width which will\n\
-be aligned between entries.  Numbering starts from 0 which indicates the\n\
-leftmost column.  @code{left-min} specifies the minimum field width to the\n\
-left of the specified balance column.\n\
+The parameters @code{left-min} and @code{balance} are only available when\n\
+the column-aligned modifier is used with the command @samp{%s}.\n\
+@code{balance} specifies the column number within the field width which\n\
+will be aligned between entries.  Numbering starts from 0 which indicates\n\
+the leftmost column.  @code{left-min} specifies the minimum field width to\n\
+the left of the specified balance column.\n\
 \n\
 The default format is:\n\
 \n\
 @qcode{\"  %a:4; %ln:6; %cs:16:6:1;  %rb:12;  %lc:-1;@xbackslashchar{}n\"}\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
 variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
diff --git a/libinterp/dldfcn/__osmesa_print__.cc b/libinterp/dldfcn/__osmesa_print__.cc
--- a/libinterp/dldfcn/__osmesa_print__.cc
+++ b/libinterp/dldfcn/__osmesa_print__.cc
@@ -68,17 +68,18 @@ to it.\n\
 \n\
 Valid options for @var{term}, which can be concatenated in one string, are:\n\
 \n\
 @table @asis\n\
 @item @qcode{eps}, @qcode{pdf}, @qcode{ps}, @qcode{svg}, @qcode{pgf}, @qcode{tex}\n\
 Select output format.\n\
 \n\
 @item @qcode{is2D}\n\
-Use GL2PS_SIMPLE_SORT instead of GL2PS_BSP_SORT as Z-depth sorting algorithm.\n\
+Use GL2PS_SIMPLE_SORT instead of GL2PS_BSP_SORT as Z-depth sorting\n\
+algorithm.\n\
 \n\
 @item @qcode{notext}\n\
 Don't render text.\n\
 @end table\n\
 \n\
 The second method doesn't use gl2ps and returns a RGB image in @var{img}\n\
 instead.\n\
 \n\
diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -75,19 +75,19 @@ DEFUN_DLD (audiodevinfo, args, ,
 @deftypefnx {} {@var{id} =} audiodevinfo (@var{io}, @var{name})\n\
 @deftypefnx {} {@var{id} =} audiodevinfo (@var{io}, @var{rate}, @var{bits}, @var{chans})\n\
 \n\
 @deftypefnx {} {@var{supports} =} audiodevinfo (@var{io}, @var{id}, @var{rate}, @var{bits}, @var{chans})\n\
 \n\
 Return a structure describing the available audio input and output devices.\n\
 \n\
 The @var{devinfo} structure has two fields @qcode{\"input\"} and\n\
-@qcode{\"output\"}.  The value of each field is a structure array with fields\n\
-@qcode{\"Name\"}, @nospell{\"DriverVersion\"} and @qcode{\"ID\"} describing\n\
-an audio device.\n\
+@qcode{\"output\"}.  The value of each field is a structure array with\n\
+fields @qcode{\"Name\"}, @nospell{\"DriverVersion\"} and @qcode{\"ID\"}\n\
+describing an audio device.\n\
 \n\
 If the optional argument @var{io} is 1, return information about input\n\
 devices only.  If it is 0, return information about output devices only.\n\
 \n\
 If the optional argument @var{id} is provided, return information about\n\
 the corresponding device.\n\
 \n\
 If the optional argument @var{name} is provided, return the id of the\n\
diff --git a/libinterp/dldfcn/audioread.cc b/libinterp/dldfcn/audioread.cc
--- a/libinterp/dldfcn/audioread.cc
+++ b/libinterp/dldfcn/audioread.cc
@@ -232,17 +232,18 @@ DEFUN_DLD (audiowrite, args, ,
 Write audio data from the matrix @var{y} to @var{filename} at sampling rate\n\
 @var{fs} with the file format determined by the file extension.\n\
 \n\
 Additional name/value argument pairs may be used to specify the\n\
 following options:\n\
 \n\
 @table @samp\n\
 @item BitsPerSample\n\
-Number of bits per sample, valid values are 8, 16, 24 and 32.  Default is 16.\n\
+Number of bits per sample.  Valid values are 8, 16, 24, and 32.  Default is\n\
+16.\n\
 \n\
 @item BitRate\n\
 Valid argument name, but ignored.  Left for compatibility with @sc{matlab}.\n\
 \n\
 @item Quality\n\
 Quality setting for the Ogg Vorbis compressor.  Values can range between 0\n\
 and 100 with 100 being the highest quality setting.  Default is 75.\n\
 \n\
diff --git a/libinterp/dldfcn/ccolamd.cc b/libinterp/dldfcn/ccolamd.cc
--- a/libinterp/dldfcn/ccolamd.cc
+++ b/libinterp/dldfcn/ccolamd.cc
@@ -57,19 +57,19 @@ DEFUN_DLD (ccolamd, args, nargout,
 @deftypefn  {} {@var{p} =} ccolamd (@var{S})\n\
 @deftypefnx {} {@var{p} =} ccolamd (@var{S}, @var{knobs})\n\
 @deftypefnx {} {@var{p} =} ccolamd (@var{S}, @var{knobs}, @var{cmember})\n\
 @deftypefnx {} {[@var{p}, @var{stats}] =} ccolamd (@dots{})\n\
 \n\
 Constrained column approximate minimum degree permutation.\n\
 \n\
 @code{@var{p} = ccolamd (@var{S})} returns the column approximate minimum\n\
-degree permutation vector for the sparse matrix @var{S}.  For a non-symmetric\n\
-matrix @var{S}, @code{@var{S}(:, @var{p})} tends to have sparser\n\
-LU@tie{}factors than @var{S}.\n\
+degree permutation vector for the sparse matrix @var{S}.  For a\n\
+non-symmetric matrix @var{S}, @code{@var{S}(:, @var{p})} tends to have\n\
+sparser LU@tie{}factors than @var{S}.\n\
 @code{chol (@var{S}(:, @var{p})' * @var{S}(:, @var{p}))} also tends to be\n\
 sparser than @code{chol (@var{S}' * @var{S})}.\n\
 @code{@var{p} = ccolamd (@var{S}, 1)} optimizes the ordering for\n\
 @code{lu (@var{S}(:, @var{p}))}.  The ordering is followed by a column\n\
 elimination tree post-ordering.\n\
 \n\
 @var{knobs} is an optional 1-element to 5-element input vector, with a\n\
 default value of @code{[0 10 10 1 0]} if not present or empty.  Entries not\n\
@@ -340,17 +340,17 @@ DEFUN_DLD (csymamd, args, nargout,
 @deftypefnx {} {@var{p} =} csymamd (@var{S}, @var{knobs})\n\
 @deftypefnx {} {@var{p} =} csymamd (@var{S}, @var{knobs}, @var{cmember})\n\
 @deftypefnx {} {[@var{p}, @var{stats}] =} csymamd (@dots{})\n\
 \n\
 For a symmetric positive definite matrix @var{S}, return the permutation\n\
 vector @var{p} such that @code{@var{S}(@var{p},@var{p})} tends to have a\n\
 sparser Cholesky@tie{}factor than @var{S}.\n\
 \n\
-Sometimes @code{csymamd} works well for symmetric indefinite matrices too. \n\
+Sometimes @code{csymamd} works well for symmetric indefinite matrices too.\n\
 The matrix @var{S} is assumed to be symmetric; only the strictly lower\n\
 triangular part is referenced.  @var{S} must be square.  The ordering is\n\
 followed by an elimination tree post-ordering.\n\
 \n\
 @var{knobs} is an optional 1-element to 3-element input vector, with a\n\
 default value of @code{[10 1 0]}.  Entries not present are set to their\n\
 defaults.\n\
 \n\
@@ -368,17 +368,18 @@ If nonzero, statistics and knobs are pri
 \n\
 @end table\n\
 \n\
 @var{cmember} is an optional vector of length n. It defines the constraints\n\
 on the ordering.  If @code{@var{cmember}(j) = @var{S}}, then row/column j is\n\
 in constraint set @var{c} (@var{c} must be in the range 1 to n).  In the\n\
 output permutation @var{p}, rows/columns in set 1 appear first, followed\n\
 by all rows/columns in set 2, and so on.  @code{@var{cmember} = ones (1,n)}\n\
-if not present or empty.  @code{csymamd (@var{S},[],1:n)} returns @code{1:n}.\n\
+if not present or empty.  @code{csymamd (@var{S},[],1:n)} returns\n\
+@code{1:n}.\n\
 \n\
 @code{@var{p} = csymamd (@var{S})} is about the same as\n\
 @code{@var{p} = symamd (@var{S})}.  @var{knobs} and its default values\n\
 differ.\n\
 \n\
 @code{@var{stats}(4:7)} provide information if CCOLAMD was able to\n\
 continue.  The matrix is OK if @code{@var{stats}(4)} is zero, or 1 if\n\
 invalid.  @code{@var{stats}(5)} is the rightmost column index that is\n\
diff --git a/libinterp/dldfcn/chol.cc b/libinterp/dldfcn/chol.cc
--- a/libinterp/dldfcn/chol.cc
+++ b/libinterp/dldfcn/chol.cc
@@ -67,18 +67,18 @@ DEFUN_DLD (chol, args, nargout,
            "-*- texinfo -*-\n\
 @deftypefn  {} {@var{R} =} chol (@var{A})\n\
 @deftypefnx {} {[@var{R}, @var{p}] =} chol (@var{A})\n\
 @deftypefnx {} {[@var{R}, @var{p}, @var{Q}] =} chol (@var{S})\n\
 @deftypefnx {} {[@var{R}, @var{p}, @var{Q}] =} chol (@var{S}, \"vector\")\n\
 @deftypefnx {} {[@var{L}, @dots{}] =} chol (@dots{}, \"lower\")\n\
 @deftypefnx {} {[@var{L}, @dots{}] =} chol (@dots{}, \"upper\")\n\
 @cindex Cholesky factorization\n\
-Compute the Cholesky@tie{}factor, @var{R}, of the symmetric positive definite\n\
-matrix @var{A}.\n\
+Compute the Cholesky@tie{}factor, @var{R}, of the symmetric positive\n\
+definite matrix @var{A}.\n\
 \n\
 The Cholesky@tie{}factor is defined by\n\
 @tex\n\
 $ R^T R = A $.\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
diff --git a/libinterp/dldfcn/colamd.cc b/libinterp/dldfcn/colamd.cc
--- a/libinterp/dldfcn/colamd.cc
+++ b/libinterp/dldfcn/colamd.cc
@@ -219,18 +219,18 @@ Compute the column approximate minimum d
 \n\
 @code{@var{p} = colamd (@var{S})} returns the column approximate minimum\n\
 degree permutation vector for the sparse matrix @var{S}.  For a\n\
 non-symmetric matrix @var{S}, @code{@var{S}(:,@var{p})} tends to have\n\
 sparser LU@tie{}factors than @var{S}.  The Cholesky@tie{}factorization of\n\
 @code{@var{S}(:,@var{p})' * @var{S}(:,@var{p})} also tends to be sparser\n\
 than that of @code{@var{S}' * @var{S}}.\n\
 \n\
-@var{knobs} is an optional one- to three-element input vector.  If @var{S} is\n\
-m-by-n, then rows with more than @code{max(16,@var{knobs}(1)*sqrt(n))}\n\
+@var{knobs} is an optional one- to three-element input vector.  If @var{S}\n\
+is m-by-n, then rows with more than @code{max(16,@var{knobs}(1)*sqrt(n))}\n\
 entries are ignored.  Columns with more than\n\
 @code{max (16,@var{knobs}(2)*sqrt(min(m,n)))} entries are removed prior to\n\
 ordering, and ordered last in the output permutation @var{p}.  Only\n\
 completely dense rows or columns are removed if @code{@var{knobs}(1)} and\n\
 @code{@var{knobs}(2)} are < 0, respectively.  If @code{@var{knobs}(3)} is\n\
 nonzero, @var{stats} and @var{knobs} are printed.  The default is\n\
 @code{@var{knobs} = [10 10 0]}.  Note that @var{knobs} differs from earlier\n\
 versions of colamd.\n\
@@ -245,21 +245,22 @@ collections performed on the internal da
 integers).\n\
 \n\
 Octave built-in functions are intended to generate valid sparse matrices,\n\
 with no duplicate entries, with ascending row indices of the nonzeros\n\
 in each column, with a non-negative number of entries in each column (!)\n\
 and so on.  If a matrix is invalid, then @sc{colamd} may or may not be able\n\
 to continue.  If there are duplicate entries (a row index appears two or\n\
 more times in the same column) or if the row indices in a column are out\n\
-of order, then @sc{colamd} can correct these errors by ignoring the duplicate\n\
-entries and sorting each column of its internal copy of the matrix\n\
-@var{S} (the input matrix @var{S} is not repaired, however).  If a matrix\n\
-is invalid in other ways then @sc{colamd} cannot continue, an error message\n\
-is printed, and no output arguments (@var{p} or @var{stats}) are returned.\n\
+of order, then @sc{colamd} can correct these errors by ignoring the\n\
+duplicate entries and sorting each column of its internal copy of the\n\
+matrix @var{S} (the input matrix @var{S} is not repaired, however).  If a\n\
+matrix is invalid in other ways then @sc{colamd} cannot continue, an error\n\
+message is printed, and no output arguments (@var{p} or @var{stats}) are\n\
+returned.\n\
 @sc{colamd} is thus a simple way to check a sparse matrix to see if it's\n\
 valid.\n\
 \n\
 @code{@var{stats}(4:7)} provide information if @sc{colamd} was able to\n\
 continue.  The matrix is OK if @code{@var{stats}(4)} is zero, or 1 if\n\
 invalid.  @code{@var{stats}(5)} is the rightmost column index that is\n\
 unsorted or contains duplicate entries, or zero if no such column exists.\n\
 @code{@var{stats}(6)} is the last seen duplicate or out-of-order row\n\
@@ -450,28 +451,28 @@ DEFUN_DLD (symamd, args, nargout,
 @deftypefnx {} {@var{p} =} symamd (@var{S}, @var{knobs})\n\
 @deftypefnx {} {[@var{p}, @var{stats}] =} symamd (@var{S})\n\
 @deftypefnx {} {[@var{p}, @var{stats}] =} symamd (@var{S}, @var{knobs})\n\
 \n\
 For a symmetric positive definite matrix @var{S}, returns the permutation\n\
 vector p such that @code{@var{S}(@var{p}, @var{p})} tends to have a\n\
 sparser Cholesky@tie{}factor than @var{S}.\n\
 \n\
-Sometimes @code{symamd} works well for symmetric indefinite matrices too. \n\
+Sometimes @code{symamd} works well for symmetric indefinite matrices too.\n\
 The matrix @var{S} is assumed to be symmetric; only the strictly lower\n\
 triangular part is referenced.  @var{S} must be square.\n\
 \n\
 @var{knobs} is an optional one- to two-element input vector.  If @var{S} is\n\
 n-by-n, then rows and columns with more than\n\
-@code{max (16,@var{knobs}(1)*sqrt(n))} entries are removed prior to ordering,\n\
-and ordered last in the output permutation @var{p}.  No rows/columns are\n\
-removed if @code{@var{knobs}(1) < 0}.  If @code{@var{knobs} (2)} is nonzero,\n\
-@code{stats} and @var{knobs} are printed.  The default is\n\
-@code{@var{knobs} = [10 0]}.  Note that @var{knobs} differs from earlier\n\
-versions of @code{symamd}.\n\
+@code{max (16,@var{knobs}(1)*sqrt(n))} entries are removed prior to\n\
+ordering, and ordered last in the output permutation @var{p}.  No\n\
+rows/columns are removed if @code{@var{knobs}(1) < 0}.  If\n\
+@code{@var{knobs} (2)} is nonzero, @code{stats} and @var{knobs} are\n\
+printed.  The default is @code{@var{knobs} = [10 0]}.  Note that\n\
+@var{knobs} differs from earlier versions of @code{symamd}.\n\
 \n\
 @var{stats} is an optional 20-element output vector that provides data\n\
 about the ordering and the validity of the input matrix @var{S}.  Ordering\n\
 statistics are in @code{@var{stats}(1:3)}.\n\
 @code{@var{stats}(1) = @var{stats}(2)} is the number of dense or empty rows\n\
 and columns ignored by SYMAMD and @code{@var{stats}(3)} is the number of\n\
 garbage collections performed on the internal data structure used by SYMAMD\n\
 (roughly of size @code{8.4 * nnz (tril (@var{S}, -1)) + 9 * @var{n}}\n\
diff --git a/libinterp/dldfcn/convhulln.cc b/libinterp/dldfcn/convhulln.cc
--- a/libinterp/dldfcn/convhulln.cc
+++ b/libinterp/dldfcn/convhulln.cc
@@ -78,19 +78,19 @@ DEFUN_DLD (convhulln, args, nargout,
 Compute the convex hull of the set of points @var{pts}.\n\
 \n\
 @var{pts} is a matrix of size [n, dim] containing n points in a space of\n\
 dimension dim.\n\
 \n\
 The hull @var{h} is an index vector into the set of points and specifies\n\
 which points form the enclosing hull.\n\
 \n\
-An optional second argument, which must be a string or cell array of strings,\n\
-contains options passed to the underlying qhull command.\n\
-See the documentation for the Qhull library for details\n\
+An optional second argument, which must be a string or cell array of\n\
+strings, contains options passed to the underlying qhull command.  See the\n\
+documentation for the Qhull library for details\n\
 @url{http://www.qhull.org/html/qh-quick.htm#options}.\n\
 The default options depend on the dimension of the input:\n\
 \n\
 @itemize\n\
 @item 2D, 3D, 4D: @var{options} = @code{@{\"Qt\"@}}\n\
 \n\
 @item 5D and higher: @var{options} = @code{@{\"Qt\", \"Qx\"@}}\n\
 @end itemize\n\
diff --git a/libinterp/dldfcn/qr.cc b/libinterp/dldfcn/qr.cc
--- a/libinterp/dldfcn/qr.cc
+++ b/libinterp/dldfcn/qr.cc
@@ -132,19 +132,19 @@ is a tall, thin matrix).  The QR@tie{}fa
 @tex\n\
 $QR = A$ where $Q$ is an orthogonal matrix and $R$ is upper triangular.\n\
 @end tex\n\
 @ifnottex\n\
 @code{@var{Q} * @var{R} = @var{A}} where @var{Q} is an orthogonal matrix and\n\
 @var{R} is upper triangular.\n\
 @end ifnottex\n\
 \n\
-If given a second argument of @qcode{'0'}, @code{qr} returns an economy-sized\n\
-QR@tie{}factorization, omitting zero rows of @var{R} and the corresponding\n\
-columns of @var{Q}.\n\
+If given a second argument of @qcode{'0'}, @code{qr} returns an\n\
+economy-sized QR@tie{}factorization, omitting zero rows of @var{R} and the\n\
+corresponding columns of @var{Q}.\n\
 \n\
 If the matrix @var{A} is full, the permuted QR@tie{}factorization\n\
 @code{[@var{Q}, @var{R}, @var{P}] = qr (@var{A})} forms the\n\
 QR@tie{}factorization such that the diagonal entries of @var{R} are\n\
 decreasing in magnitude order.  For example, given the matrix\n\
 @code{a = [1, 2; 3, 4]},\n\
 \n\
 @example\n\
@@ -729,19 +729,19 @@ bool check_index (const octave_value& i,
 DEFUN_DLD (qrupdate, args, ,
            "-*- texinfo -*-\n\
 @deftypefn {} {[@var{Q1}, @var{R1}] =} qrupdate (@var{Q}, @var{R}, @var{u}, @var{v})\n\
 Given a QR@tie{}factorization of a real or complex matrix\n\
 @w{@var{A} = @var{Q}*@var{R}}, @var{Q}@tie{}unitary and\n\
 @var{R}@tie{}upper trapezoidal, return the QR@tie{}factorization of\n\
 @w{@var{A} + @var{u}*@var{v}'}, where @var{u} and @var{v} are column vectors\n\
 (rank-1 update) or matrices with equal number of columns\n\
-(rank-k update).  Notice that the latter case is done as a sequence of rank-1\n\
-updates; thus, for k large enough, it will be both faster and more accurate\n\
-to recompute the factorization from scratch.\n\
+(rank-k update).  Notice that the latter case is done as a sequence of\n\
+rank-1 updates; thus, for k large enough, it will be both faster and more\n\
+accurate to recompute the factorization from scratch.\n\
 \n\
 The QR@tie{}factorization supplied may be either full (Q is square) or\n\
 economized (R is square).\n\
 \n\
 @seealso{qr, qrinsert, qrdelete, qrshift}\n\
 @end deftypefn")
 {
   octave_value_list retval;
diff --git a/libinterp/dldfcn/symbfact.cc b/libinterp/dldfcn/symbfact.cc
--- a/libinterp/dldfcn/symbfact.cc
+++ b/libinterp/dldfcn/symbfact.cc
@@ -77,17 +77,18 @@ Cholesky@tie{}factorization is returned.
 faster and uses less memory, but returns the same values for @var{count},\n\
 @var{h}, @var{parent} and @var{post} outputs.\n\
 @end table\n\
 \n\
 The output variables are\n\
 \n\
 @table @var\n\
 @item count\n\
-The row counts of the Cholesky@tie{}factorization as determined by @var{typ}.\n\
+The row counts of the Cholesky@tie{}factorization as determined by\n\
+@var{typ}.\n\
 \n\
 @item h\n\
 The height of the elimination tree.\n\
 \n\
 @item parent\n\
 The elimination tree itself.\n\
 \n\
 @item post\n\
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -2721,18 +2721,18 @@ equivalent\n\
 %! assert (isfinite (str2double (jver{1})) && isfinite (str2double (jver{2})));
 */
 
 DEFUN (__java_get__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {@var{val} =} __java_get__ (@var{obj}, @var{name})\n\
 Get the value of the field @var{name} of the Java object @var{obj}.\n\
 \n\
-For static fields, @var{obj} can be a string representing the fully qualified\n\
-name of the corresponding class.\n\
+For static fields, @var{obj} can be a string representing the fully\n\
+qualified name of the corresponding class.\n\
 \n\
 When @var{obj} is a regular Java object, structure-like indexing can be used\n\
 as a shortcut syntax.  For instance, the two following statements are\n\
 equivalent\n\
 \n\
 @example\n\
 @group\n\
   __java_get__ (x, \"field1\")\n\
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -1623,17 +1623,17 @@ DEFUN (struct, args, ,
 Create a scalar or array structure and initialize its values.\n\
 \n\
 The @var{field1}, @var{field2}, @dots{} variables are strings specifying the\n\
 names of the fields and the @var{value1}, @var{value2}, @dots{} variables\n\
 can be of any type.\n\
 \n\
 If the values are cell arrays, create a structure array and initialize its\n\
 values.  The dimensions of each cell array of values must match.  Singleton\n\
-cells and non-cell values are repeated so that they fill the entire array. \n\
+cells and non-cell values are repeated so that they fill the entire array.\n\
 If the cells are empty, create an empty structure array with the specified\n\
 field names.\n\
 \n\
 If the argument is an object, return the underlying struct.\n\
 \n\
 Observe that the syntax is optimized for struct @strong{arrays}.  Consider\n\
 the following examples:\n\
 \n\
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -866,19 +866,19 @@ Programming Note: @code{nargin} does not
 }
 
 DEFUN (nargout, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {} {} nargout ()\n\
 @deftypefnx {} {} nargout (@var{fcn})\n\
 Report the number of output arguments from a function.\n\
 \n\
-Called from within a function, return the number of values the caller expects\n\
-to receive.  At the top level, @code{nargout} with no argument is undefined\n\
-and will produce an error.\n\
+Called from within a function, return the number of values the caller\n\
+expects to receive.  At the top level, @code{nargout} with no argument is\n\
+undefined and will produce an error.\n\
 \n\
 If called with the optional argument @var{fcn}---a function name or\n\
 handle---return the number of declared output values that the function can\n\
 produce.\n\
 \n\
 If the final output argument is @var{varargout} the returned value is\n\
 negative.\n\
 \n\
diff --git a/libinterp/parse-tree/pt-arg-list.cc b/libinterp/parse-tree/pt-arg-list.cc
--- a/libinterp/parse-tree/pt-arg-list.cc
+++ b/libinterp/parse-tree/pt-arg-list.cc
@@ -124,18 +124,18 @@ tree_argument_list::is_valid_lvalue_list
 
 static const octave_value *indexed_object = 0;
 static int index_position = 0;
 static int num_indices = 0;
 
 DEFCONSTFUN (end, , ,
              "-*- texinfo -*-\n\
 @deftypefn {} {} end\n\
-The magic index @qcode{\"end\"} refers to the last valid entry in an indexing\n\
-operation.\n\
+The magic index @qcode{\"end\"} refers to the last valid entry in an\n\
+indexing operation.\n\
 \n\
 Example:\n\
 \n\
 @example\n\
 @group\n\
 @var{x} = [ 1 2 3\n\
       4 5 6 ];\n\
 @var{x}(1,end)\n\
