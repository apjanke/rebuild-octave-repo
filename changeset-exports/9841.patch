# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1258701521 -3600
#      Fri Nov 20 08:18:41 2009 +0100
# Node ID 6f1ea8241c9902039b29ab2d031e1164ea969213
# Parent  c0b54271904bd83e708d526a9ceb41e19700185b
make isnumeric yield false on logicals

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2009-11-20  Jaroslav Hajek  <highegg@gmail.com>
+
+	* general/__isequal__.m: Check for isnumeric|islogical.
+	* testfun/assert.m: Ditto.
+
 2009-11-19  Jaroslav Hajek  <highegg@gmail.com>
 
 	* specfun/perms.m: Avoid recursion. Simplify assignments. Allow empty
 	vectors.
 
 2009-11-19  Jaroslav Hajek  <highegg@gmail.com>
 
 	* specfun/erfinv.m: Remove.
diff --git a/scripts/general/__isequal__.m b/scripts/general/__isequal__.m
--- a/scripts/general/__isequal__.m
+++ b/scripts/general/__isequal__.m
@@ -61,18 +61,18 @@ function t = __isequal__ (nans_compare_e
   if (islist (x))
     error ("__isequal__: list objects are deprecated and cannot be tested for equality here; use cell arrays instead");
   endif
 
   ## All arguments must either be of the same class or they must be
   ## numeric values.
   t = (all (strcmp (class(x),
 		   cellfun (@class, varargin, "UniformOutput", false)))
-       || (isnumeric (x)
-	   && all (cellfun (@isnumeric, varargin, "UniformOutput", true))));
+       || ((isnumeric (x) || islogical (x))
+	   && all ((cellfun (@isnumeric, varargin) | cellfun (@islogical, varargin)))));
 
   if (t)
     ## Test that everything has the same number of dimensions.
     s_x = size (x);
     s_v = cellfun (@size, varargin, "UniformOutput", false);
     t = all (length (s_x) == cellfun (@length, s_v));
   endif
 
diff --git a/scripts/testfun/assert.m b/scripts/testfun/assert.m
--- a/scripts/testfun/assert.m
+++ b/scripts/testfun/assert.m
@@ -60,17 +60,17 @@ function assert (cond, varargin)
 
   in = deblank (argn(1,:));
   for i = 2:rows (argn)
     in = cstrcat (in, ",", deblank (argn(i,:)));
   endfor
   in = cstrcat ("(", in, ")");
 
   if (nargin == 1 || (nargin > 1 && islogical (cond) && ischar (varargin{1})))
-    if (! isnumeric (cond) || ! all (cond(:)))
+    if ((! isnumeric (cond) && ! islogical (cond)) || ! all (cond(:)))
       if (nargin == 1)
 	## Say which elements failed?
 	error ("assert %s failed", in);
       else
 	error (varargin{:});
       endif
     endif  
   else
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-11-20  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-bool.h (octave_bool::is_numeric_type): New overload.
+	* ov-bool-mat.h (octave_bool-matrix::is_numeric_type): New overload.
+
 2009-11-19  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base.h (unary_mapper_t): New member: umap_erfinv.
 	* ov-base.c (octave_base_value::get_umap_name): Add "erfinv" here.
 	* ov.h (octave_value::erfinv): New method.
 	* ov-scalar.cc (octave_scalar::map): Handle umap_erfinv.
 	* ov-float.cc (octave_float::map): Ditto.
 	* ov-re-mat.cc (octave_matrix::map): Ditto.
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -83,16 +83,18 @@ public:
   builtin_type_t builtin_type (void) const { return btyp_bool; }
 
   bool is_bool_matrix (void) const { return true; }
 
   bool is_bool_type (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
+  bool is_numeric_type (void) const { return false; }
+
   int8NDArray
   int8_array_value (void) const { return int8NDArray (matrix); }
 
   int16NDArray
   int16_array_value (void) const { return int16NDArray (matrix); }
 
   int32NDArray
   int32_array_value (void) const { return int32NDArray (matrix); }
diff --git a/src/ov-bool.h b/src/ov-bool.h
--- a/src/ov-bool.h
+++ b/src/ov-bool.h
@@ -78,16 +78,18 @@ public:
   bool is_real_scalar (void) const { return true; }
 
   bool is_bool_scalar (void) const { return true; }
 
   bool is_bool_type (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
+  bool is_numeric_type (void) const { return false; }
+
   bool is_true (void) const { return scalar; }
 
   int8NDArray
   int8_array_value (void) const
     { return int8NDArray (dim_vector (1, 1), scalar); }
 
   int16NDArray
   int16_array_value (void) const
