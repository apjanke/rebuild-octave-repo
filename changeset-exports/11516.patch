# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1294951214 18000
#      Thu Jan 13 15:40:14 2011 -0500
# Node ID 53edbf95fbb60ecfba5aca9fe8b60fb669b8c821
# Parent  6dbf9bcce90e0152e93ad7a2683f400def5f619b
avoid GCC warnings

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -3687,21 +3687,20 @@ operator * (const Matrix& m, const Compl
 %!assert([M.'*cv,M.'*cv],M.'*[cv,cv],1e-14)
 %!assert([M'*cv,M'*cv],M'*[cv,cv],1e-14)
 %!assert([rv*M;rv*M],[rv;rv]*M,1e-14)
 %!assert([rv*M.';rv*M.'],[rv;rv]*M.',1e-14)
 %!assert([rv*M';rv*M'],[rv;rv]*M',1e-14)
 %!assert(2*rv*cv,[rv,rv]*[cv;cv],1e-14)
 */
 
-static const char *
+static inline char
 get_blas_trans_arg (bool trans, bool conj)
 {
-  static char blas_notrans = 'N', blas_trans = 'T', blas_conj_trans = 'C';
-  return trans ? (conj ? &blas_conj_trans : &blas_trans) : &blas_notrans;
+  return trans ? (conj ? 'C' : 'T') : 'N';
 }
 
 // the general GEMM operation
 
 ComplexMatrix
 xgemm (const ComplexMatrix& a, const ComplexMatrix& b, 
        blas_trans_type transa, blas_trans_type transb)
 {
@@ -3724,33 +3723,33 @@ xgemm (const ComplexMatrix& a, const Com
         retval = ComplexMatrix (a_nr, b_nc, 0.0);
       else if (a.data () == b.data () && a_nr == b_nc && tra != trb)
         {
           octave_idx_type lda = a.rows ();
 
           retval = ComplexMatrix (a_nr, b_nc);
           Complex *c = retval.fortran_vec ();
 
-          const char *ctra = get_blas_trans_arg (tra, cja);
+          const char ctra = get_blas_trans_arg (tra, cja);
           if (cja || cjb)
             {
               F77_XFCN (zherk, ZHERK, (F77_CONST_CHAR_ARG2 ("U", 1),
-                                       F77_CONST_CHAR_ARG2 (ctra, 1),
+                                       F77_CONST_CHAR_ARG2 (&ctra, 1),
                                        a_nr, a_nc, 1.0,
                                        a.data (), lda, 0.0, c, a_nr
                                        F77_CHAR_ARG_LEN (1)
                                        F77_CHAR_ARG_LEN (1)));
               for (octave_idx_type j = 0; j < a_nr; j++)
                 for (octave_idx_type i = 0; i < j; i++)
                   retval.xelem (j,i) = std::conj (retval.xelem (i,j));
             }
           else
             {
               F77_XFCN (zsyrk, ZSYRK, (F77_CONST_CHAR_ARG2 ("U", 1),
-                                       F77_CONST_CHAR_ARG2 (ctra, 1),
+                                       F77_CONST_CHAR_ARG2 (&ctra, 1),
                                        a_nr, a_nc, 1.0,
                                        a.data (), lda, 0.0, c, a_nr
                                        F77_CHAR_ARG_LEN (1)
                                        F77_CHAR_ARG_LEN (1)));
               for (octave_idx_type j = 0; j < a_nr; j++)
                 for (octave_idx_type i = 0; i < j; i++)
                   retval.xelem (j,i) = retval.xelem (i,j);
 
@@ -3774,36 +3773,36 @@ xgemm (const ComplexMatrix& a, const Com
                 }
               else if (cja)
                   F77_FUNC (xzdotc, XZDOTC) (a_nc, a.data (), 1, b.data (), 1, *c);
               else
                   F77_FUNC (xzdotc, XZDOTC) (a_nc, b.data (), 1, a.data (), 1, *c);
             }
           else if (b_nc == 1 && ! cjb)
             {
-              const char *ctra = get_blas_trans_arg (tra, cja);
-              F77_XFCN (zgemv, ZGEMV, (F77_CONST_CHAR_ARG2 (ctra, 1),
+              const char ctra = get_blas_trans_arg (tra, cja);
+              F77_XFCN (zgemv, ZGEMV, (F77_CONST_CHAR_ARG2 (&ctra, 1),
                                        lda, tda, 1.0,  a.data (), lda,
                                        b.data (), 1, 0.0, c, 1
                                        F77_CHAR_ARG_LEN (1)));
             }
           else if (a_nr == 1 && ! cja && ! cjb)
             {
-              const char *crevtrb = get_blas_trans_arg (! trb, cjb);
-              F77_XFCN (zgemv, ZGEMV, (F77_CONST_CHAR_ARG2 (crevtrb, 1),
+              const char crevtrb = get_blas_trans_arg (! trb, cjb);
+              F77_XFCN (zgemv, ZGEMV, (F77_CONST_CHAR_ARG2 (&crevtrb, 1),
                                        ldb, tdb, 1.0,  b.data (), ldb,
                                        a.data (), 1, 0.0, c, 1
                                        F77_CHAR_ARG_LEN (1)));
             }
           else
             {
-              const char *ctra = get_blas_trans_arg (tra, cja);
-              const char *ctrb = get_blas_trans_arg (trb, cjb);
-              F77_XFCN (zgemm, ZGEMM, (F77_CONST_CHAR_ARG2 (ctra, 1),
-                                       F77_CONST_CHAR_ARG2 (ctrb, 1),
+              const char ctra = get_blas_trans_arg (tra, cja);
+              const char ctrb = get_blas_trans_arg (trb, cjb);
+              F77_XFCN (zgemm, ZGEMM, (F77_CONST_CHAR_ARG2 (&ctra, 1),
+                                       F77_CONST_CHAR_ARG2 (&ctrb, 1),
                                        a_nr, b_nc, a_nc, 1.0, a.data (),
                                        lda, b.data (), ldb, 0.0, c, a_nr
                                        F77_CHAR_ARG_LEN (1)
                                        F77_CHAR_ARG_LEN (1)));
             }
         }
     }
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2011-01-13  John W. Eaton  <jwe@octave.org>
+
+	* CMatrix.cc (get_blas_trans_arg): Return char, not char *.
+	Change all uses.
+	* dMatrix.cc (get_blas_trans_arg): Likewise.
+	* fCMatrix.cc (get_blas_trans_arg): Likewise.
+	* fMatrix.cc (get_blas_trans_arg): Likewise.
+	Suggested by Pascal Dupuis  <Pascal.Dupuis@worldonline.be>.
+
 2011-01-13  John W. Eaton  <jwe@octave.org>
 
 	* filemode.c: Use prototypes for function definitions.  Reorder
 	functions to eliminate need for forward declarations.
 	* filemode.h: New file.
 	* file-stat.cc: Include filemode.h instead of using local extern
 	declarations.
 	* Makefile.am (INCS): Add filemode.h to the list.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -3091,21 +3091,20 @@ Sylvester (const Matrix& a, const Matrix
 %! rv = randn(1,10);
 %!assert([M*cv,M*cv],M*[cv,cv],1e-14)
 %!assert([M'*cv,M'*cv],M'*[cv,cv],1e-14)
 %!assert([rv*M;rv*M],[rv;rv]*M,1e-14)
 %!assert([rv*M';rv*M'],[rv;rv]*M',1e-14)
 %!assert(2*rv*cv,[rv,rv]*[cv;cv],1e-14)
 */
 
-static const char *
+static inline char
 get_blas_trans_arg (bool trans)
 {
-  static char blas_notrans = 'N', blas_trans = 'T';
-  return (trans) ? &blas_trans : &blas_notrans;
+  return trans ? 'T' : 'N';
 }
 
 // the general GEMM operation
 
 Matrix 
 xgemm (const Matrix& a, const Matrix& b, 
        blas_trans_type transa, blas_trans_type transb)
 {
@@ -3127,19 +3126,19 @@ xgemm (const Matrix& a, const Matrix& b,
         retval = Matrix (a_nr, b_nc, 0.0);
       else if (a.data () == b.data () && a_nr == b_nc && tra != trb)
         {
           octave_idx_type lda = a.rows ();
 
           retval = Matrix (a_nr, b_nc);
           double *c = retval.fortran_vec ();
 
-          const char *ctra = get_blas_trans_arg (tra);
+          const char ctra = get_blas_trans_arg (tra);
           F77_XFCN (dsyrk, DSYRK, (F77_CONST_CHAR_ARG2 ("U", 1),
-                                   F77_CONST_CHAR_ARG2 (ctra, 1),
+                                   F77_CONST_CHAR_ARG2 (&ctra, 1),
                                    a_nr, a_nc, 1.0,
                                    a.data (), lda, 0.0, c, a_nr
                                    F77_CHAR_ARG_LEN (1)
                                    F77_CHAR_ARG_LEN (1)));
           for (int j = 0; j < a_nr; j++)
             for (int i = 0; i < j; i++)
               retval.xelem (j,i) = retval.xelem (i,j);
 
@@ -3153,37 +3152,37 @@ xgemm (const Matrix& a, const Matrix& b,
           double *c = retval.fortran_vec ();
 
           if (b_nc == 1)
             {
               if (a_nr == 1)
                 F77_FUNC (xddot, XDDOT) (a_nc, a.data (), 1, b.data (), 1, *c);
               else
                 {
-                  const char *ctra = get_blas_trans_arg (tra);
-                  F77_XFCN (dgemv, DGEMV, (F77_CONST_CHAR_ARG2 (ctra, 1),
+                  const char ctra = get_blas_trans_arg (tra);
+                  F77_XFCN (dgemv, DGEMV, (F77_CONST_CHAR_ARG2 (&ctra, 1),
                                            lda, tda, 1.0,  a.data (), lda,
                                            b.data (), 1, 0.0, c, 1
                                            F77_CHAR_ARG_LEN (1)));
                 }
             }
           else if (a_nr == 1)
             {
-              const char *crevtrb = get_blas_trans_arg (! trb);
-              F77_XFCN (dgemv, DGEMV, (F77_CONST_CHAR_ARG2 (crevtrb, 1),
+              const char crevtrb = get_blas_trans_arg (! trb);
+              F77_XFCN (dgemv, DGEMV, (F77_CONST_CHAR_ARG2 (&crevtrb, 1),
                                        ldb, tdb, 1.0,  b.data (), ldb,
                                        a.data (), 1, 0.0, c, 1
                                        F77_CHAR_ARG_LEN (1)));
             }
           else
             {
-              const char *ctra = get_blas_trans_arg (tra);
-              const char *ctrb = get_blas_trans_arg (trb);
-              F77_XFCN (dgemm, DGEMM, (F77_CONST_CHAR_ARG2 (ctra, 1),
-                                       F77_CONST_CHAR_ARG2 (ctrb, 1),
+              const char ctra = get_blas_trans_arg (tra);
+              const char ctrb = get_blas_trans_arg (trb);
+              F77_XFCN (dgemm, DGEMM, (F77_CONST_CHAR_ARG2 (&ctra, 1),
+                                       F77_CONST_CHAR_ARG2 (&ctrb, 1),
                                        a_nr, b_nc, a_nc, 1.0, a.data (),
                                        lda, b.data (), ldb, 0.0, c, a_nr
                                        F77_CHAR_ARG_LEN (1)
                                        F77_CHAR_ARG_LEN (1)));
             }
         }
     }
 
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -3680,21 +3680,20 @@ operator * (const FloatMatrix& m, const 
 %!assert([M.'*cv,M.'*cv],M.'*[cv,cv],5e-6)
 %!assert([M'*cv,M'*cv],M'*[cv,cv],5e-6)
 %!assert([rv*M;rv*M],[rv;rv]*M,5e-6)
 %!assert([rv*M.';rv*M.'],[rv;rv]*M.',5e-6)
 %!assert([rv*M';rv*M'],[rv;rv]*M',5e-6)
 %!assert(2*rv*cv,[rv,rv]*[cv;cv],5e-6)
 */
 
-static const char *
+static char
 get_blas_trans_arg (bool trans, bool conj)
 {
-  static char blas_notrans = 'N', blas_trans = 'T', blas_conj_trans = 'C';
-  return trans ? (conj ? &blas_conj_trans : &blas_trans) : &blas_notrans;
+  return trans ? (conj ? 'C' : 'T') : 'N';
 }
 
 // the general GEMM operation
 
 FloatComplexMatrix
 xgemm (const FloatComplexMatrix& a, const FloatComplexMatrix& b, 
        blas_trans_type transa, blas_trans_type transb)
 {
@@ -3717,33 +3716,33 @@ xgemm (const FloatComplexMatrix& a, cons
         retval = FloatComplexMatrix (a_nr, b_nc, 0.0);
       else if (a.data () == b.data () && a_nr == b_nc && tra != trb)
         {
           octave_idx_type lda = a.rows ();
 
           retval = FloatComplexMatrix (a_nr, b_nc);
           FloatComplex *c = retval.fortran_vec ();
 
-          const char *ctra = get_blas_trans_arg (tra, cja);
+          const char ctra = get_blas_trans_arg (tra, cja);
           if (cja || cjb)
             {
               F77_XFCN (cherk, CHERK, (F77_CONST_CHAR_ARG2 ("U", 1),
-                                       F77_CONST_CHAR_ARG2 (ctra, 1),
+                                       F77_CONST_CHAR_ARG2 (&ctra, 1),
                                        a_nr, a_nc, 1.0,
                                        a.data (), lda, 0.0, c, a_nr
                                        F77_CHAR_ARG_LEN (1)
                                        F77_CHAR_ARG_LEN (1)));
               for (octave_idx_type j = 0; j < a_nr; j++)
                 for (octave_idx_type i = 0; i < j; i++)
                   retval.xelem (j,i) = std::conj (retval.xelem (i,j));
             }
           else
             {
               F77_XFCN (csyrk, CSYRK, (F77_CONST_CHAR_ARG2 ("U", 1),
-                                       F77_CONST_CHAR_ARG2 (ctra, 1),
+                                       F77_CONST_CHAR_ARG2 (&ctra, 1),
                                        a_nr, a_nc, 1.0,
                                        a.data (), lda, 0.0, c, a_nr
                                        F77_CHAR_ARG_LEN (1)
                                        F77_CHAR_ARG_LEN (1)));
               for (octave_idx_type j = 0; j < a_nr; j++)
                 for (octave_idx_type i = 0; i < j; i++)
                   retval.xelem (j,i) = retval.xelem (i,j);
 
@@ -3767,36 +3766,36 @@ xgemm (const FloatComplexMatrix& a, cons
                 }
               else if (cja)
                   F77_FUNC (xcdotc, XCDOTC) (a_nc, a.data (), 1, b.data (), 1, *c);
               else
                   F77_FUNC (xcdotc, XCDOTC) (a_nc, b.data (), 1, a.data (), 1, *c);
             }
           else if (b_nc == 1 && ! cjb)
             {
-              const char *ctra = get_blas_trans_arg (tra, cja);
-              F77_XFCN (cgemv, CGEMV, (F77_CONST_CHAR_ARG2 (ctra, 1),
+              const char ctra = get_blas_trans_arg (tra, cja);
+              F77_XFCN (cgemv, CGEMV, (F77_CONST_CHAR_ARG2 (&ctra, 1),
                                        lda, tda, 1.0,  a.data (), lda,
                                        b.data (), 1, 0.0, c, 1
                                        F77_CHAR_ARG_LEN (1)));
             }
           else if (a_nr == 1 && ! cja && ! cjb)
             {
-              const char *crevtrb = get_blas_trans_arg (! trb, cjb);
-              F77_XFCN (cgemv, CGEMV, (F77_CONST_CHAR_ARG2 (crevtrb, 1),
+              const char crevtrb = get_blas_trans_arg (! trb, cjb);
+              F77_XFCN (cgemv, CGEMV, (F77_CONST_CHAR_ARG2 (&crevtrb, 1),
                                        ldb, tdb, 1.0,  b.data (), ldb,
                                        a.data (), 1, 0.0, c, 1
                                        F77_CHAR_ARG_LEN (1)));
             }
           else
             {
-              const char *ctra = get_blas_trans_arg (tra, cja);
-              const char *ctrb = get_blas_trans_arg (trb, cjb);
-              F77_XFCN (cgemm, CGEMM, (F77_CONST_CHAR_ARG2 (ctra, 1),
-                                       F77_CONST_CHAR_ARG2 (ctrb, 1),
+              const char ctra = get_blas_trans_arg (tra, cja);
+              const char ctrb = get_blas_trans_arg (trb, cjb);
+              F77_XFCN (cgemm, CGEMM, (F77_CONST_CHAR_ARG2 (&ctra, 1),
+                                       F77_CONST_CHAR_ARG2 (&ctrb, 1),
                                        a_nr, b_nc, a_nc, 1.0, a.data (),
                                        lda, b.data (), ldb, 0.0, c, a_nr
                                        F77_CHAR_ARG_LEN (1)
                                        F77_CHAR_ARG_LEN (1)));
             }
         }
     }
 
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -3090,21 +3090,20 @@ Sylvester (const FloatMatrix& a, const F
 %! rv = single(randn(1,10));
 %!assert([M*cv,M*cv],M*[cv,cv],5e-6)
 %!assert([M'*cv,M'*cv],M'*[cv,cv],5e-6)
 %!assert([rv*M;rv*M],[rv;rv]*M,5e-6)
 %!assert([rv*M';rv*M'],[rv;rv]*M',5e-6)
 %!assert(2*rv*cv,[rv,rv]*[cv;cv],5e-6)
 */
 
-static const char *
+static char
 get_blas_trans_arg (bool trans)
 {
-  static char blas_notrans = 'N', blas_trans = 'T';
-  return (trans) ? &blas_trans : &blas_notrans;
+  return trans ? 'T' : 'N';
 }
 
 // the general GEMM operation
 
 FloatMatrix 
 xgemm (const FloatMatrix& a, const FloatMatrix& b, 
        blas_trans_type transa, blas_trans_type transb)
 {
@@ -3126,19 +3125,19 @@ xgemm (const FloatMatrix& a, const Float
         retval = FloatMatrix (a_nr, b_nc, 0.0);
       else if (a.data () == b.data () && a_nr == b_nc && tra != trb)
         {
           octave_idx_type lda = a.rows ();
 
           retval = FloatMatrix (a_nr, b_nc);
           float *c = retval.fortran_vec ();
 
-          const char *ctra = get_blas_trans_arg (tra);
+          const char ctra = get_blas_trans_arg (tra);
           F77_XFCN (ssyrk, SSYRK, (F77_CONST_CHAR_ARG2 ("U", 1),
-                                   F77_CONST_CHAR_ARG2 (ctra, 1),
+                                   F77_CONST_CHAR_ARG2 (&ctra, 1),
                                    a_nr, a_nc, 1.0,
                                    a.data (), lda, 0.0, c, a_nr
                                    F77_CHAR_ARG_LEN (1)
                                    F77_CHAR_ARG_LEN (1)));
           for (int j = 0; j < a_nr; j++)
             for (int i = 0; i < j; i++)
               retval.xelem (j,i) = retval.xelem (i,j);
 
@@ -3152,37 +3151,37 @@ xgemm (const FloatMatrix& a, const Float
           float *c = retval.fortran_vec ();
 
           if (b_nc == 1)
             {
               if (a_nr == 1)
                 F77_FUNC (xsdot, XSDOT) (a_nc, a.data (), 1, b.data (), 1, *c);
               else
                 {
-                  const char *ctra = get_blas_trans_arg (tra);
-                  F77_XFCN (sgemv, SGEMV, (F77_CONST_CHAR_ARG2 (ctra, 1),
+                  const char ctra = get_blas_trans_arg (tra);
+                  F77_XFCN (sgemv, SGEMV, (F77_CONST_CHAR_ARG2 (&ctra, 1),
                                            lda, tda, 1.0,  a.data (), lda,
                                            b.data (), 1, 0.0, c, 1
                                            F77_CHAR_ARG_LEN (1)));
                 }
             }
           else if (a_nr == 1)
             {
-              const char *crevtrb = get_blas_trans_arg (! trb);
-              F77_XFCN (sgemv, SGEMV, (F77_CONST_CHAR_ARG2 (crevtrb, 1),
+              const char crevtrb = get_blas_trans_arg (! trb);
+              F77_XFCN (sgemv, SGEMV, (F77_CONST_CHAR_ARG2 (&crevtrb, 1),
                                        ldb, tdb, 1.0,  b.data (), ldb,
                                        a.data (), 1, 0.0, c, 1
                                        F77_CHAR_ARG_LEN (1)));
             }
           else
             {
-              const char *ctra = get_blas_trans_arg (tra);
-              const char *ctrb = get_blas_trans_arg (trb);
-              F77_XFCN (sgemm, SGEMM, (F77_CONST_CHAR_ARG2 (ctra, 1),
-                                       F77_CONST_CHAR_ARG2 (ctrb, 1),
+              const char ctra = get_blas_trans_arg (tra);
+              const char ctrb = get_blas_trans_arg (trb);
+              F77_XFCN (sgemm, SGEMM, (F77_CONST_CHAR_ARG2 (&ctra, 1),
+                                       F77_CONST_CHAR_ARG2 (&ctrb, 1),
                                        a_nr, b_nc, a_nc, 1.0, a.data (),
                                        lda, b.data (), ldb, 0.0, c, a_nr
                                        F77_CHAR_ARG_LEN (1)
                                        F77_CHAR_ARG_LEN (1)));
             }
         }
     }
 
