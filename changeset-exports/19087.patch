# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1410121572 -7200
#      Sun Sep 07 22:26:12 2014 +0200
# Node ID 3e0720bd6bfc7ff035af1c31c328b8499aad747c
# Parent  dc88c5784f74d5b3182c59d32ab8217d67d3a442
Fix setting axes default x/y/zlabel with string values (bug #34755)

* /libinterp/corefcn/graphics.cc (base_properties::set_from_list): when setting a string value, don't delete/recreate the text object, simply set its string property.
* /libinterp/corefcn/graphics.in.h (axes::axes): update_transform before setting default properties.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -2801,17 +2801,17 @@ base_properties::set_from_list (base_gra
     {
       const property_list::pval_map_type pval_map = p->second;
 
       for (property_list::pval_map_const_iterator q = pval_map.begin ();
            q != pval_map.end ();
            q++)
         {
           std::string pname = q->first;
-          
+
           obj.set (pname, q->second);
 
           if (error_state)
             {
               error ("error setting default property %s", pname.c_str ());
               break;
             }
         }
@@ -4761,38 +4761,33 @@ axes::properties::sync_positions (void)
 %! end_unwind_protect
 */
 
 void
 axes::properties::set_text_child (handle_property& hp,
                                   const std::string& who,
                                   const octave_value& v)
 {
+  if (v.is_string ())
+    {
+      xset (hp.handle_value (), "string", v);
+      return;
+    }
+
   graphics_handle val;
-
-  if (v.is_string ())
-    {
-      val = gh_manager::make_graphics_handle ("text", __myhandle__,
-                                              false, false);
-
-      xset (val, "string", v);
-    }
-  else
-    {
-      graphics_object go = gh_manager::get_object (gh_manager::lookup (v));
-
-      if (go.isa ("text"))
-        val = ::reparent (v, "set", who, __myhandle__, false);
-      else
-        {
-          std::string cname = v.class_name ();
-
-          error ("set: expecting text graphics object or character string for %s property, found %s",
-                 who.c_str (), cname.c_str ());
-        }
+  graphics_object go = gh_manager::get_object (gh_manager::lookup (v));
+
+  if (go.isa ("text"))
+    val = ::reparent (v, "set", who, __myhandle__, false);
+  else
+    {
+      std::string cname = v.class_name ();
+
+      error ("set: expecting text graphics object or character string for %s property, found %s",
+             who.c_str (), cname.c_str ());
     }
 
   if (! error_state)
     {
       xset (val, "handlevisibility", "off");
 
       gh_manager::free (hp.handle_value ());
 
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -4215,18 +4215,18 @@ public:
 
 private:
   properties xproperties;
 
 public:
   axes (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p), default_properties ()
   {
+    xproperties.update_transform ();
     xproperties.override_defaults (*this);
-    xproperties.update_transform ();
   }
 
   ~axes (void) { }
 
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (figure) to override first (properties knows how
     // to find the parent object).
