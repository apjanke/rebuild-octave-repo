# HG changeset patch
# User jwe
# Date 1033787938 0
#      Sat Oct 05 03:18:58 2002 +0000
# Node ID 933ac11136251e96db035756abb29d364412d1ed
# Parent  a54f61b5d491e23dde653e2e4f66bb2617c4a321
[project @ 2002-10-05 03:16:46 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,14 +1,16 @@
 2002-10-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-env.cc (octave_env::do_absolute_pathname): Handle Windows
 	filenames.
 	(octave_env::do_make_absolute): Check for absolute name with
 	do_absolute_path.
+	(octave_env::do_chdir): Likewise.
+	(is_dir_sep): New function.
 
 2002-10-03  Paul Kienzle <pkienzle@users.sf.net>
 
 	* oct-time.cc (octave_time::stamp): Better resolution for Windows
 	systems.
 
 2002-10-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/liboctave/oct-env.cc b/liboctave/oct-env.cc
--- a/liboctave/oct-env.cc
+++ b/liboctave/oct-env.cc
@@ -223,44 +223,49 @@ octave_env::do_polite_directory_format (
       retval.append (name.substr (len));
     }
   else
     retval = name;
 
   return retval;
 }
 
+static inline bool
+is_dir_sep (char c)
+{
 #if defined (__CYGWIN__)
-#define IS_DIR_SEP(c) (c == '/' || c == '\\')
+  return (c == '/' || c == '\\');
 #else
-#define IS_DIR_SEP(c) (c == '/')
+  return (c == '/');
 #endif
+}
 
 bool
 octave_env::do_absolute_pathname (const std::string& s) const
 {
   size_t len = s.length ();
 
   if (len == 0)
     return false;
 
   if (s[0] == '/')
     return true;
 
 #if defined (__CYGWIN__)
-  if (len > 2 && isalpha (s[0]) && s[1] == ':' && IS_DIR_SEP (s[2]))
+  if ((len == 2 && isalpha (s[0]) && s[1] == ':')
+      || (len > 2 && isalpha (s[0]) && s[1] == ':' && is_dir_sep (s[2])))
     return true;
 #endif
 
   if (s[0] == '.')
     {
-      if (len == 1 || IS_DIR_SEP (s[1]))
+      if (len == 1 || is_dir_sep (s[1]))
 	return true;
 
-      if (s[1] == '.' && (len == 2 || IS_DIR_SEP (s[2])))
+      if (s[1] == '.' && (len == 2 || is_dir_sep (s[2])))
 	return true;
     }
 
   return false;
 }
 
 // Return the `basename' of the pathname in STRING (the stuff after
 // the last '/').  If STRING is not a full pathname, simply return it.
@@ -445,17 +450,17 @@ octave_env::do_chdir (const std::string&
 	tmp = do_make_absolute (newdir, current_directory);
 
       // Get rid of trailing `/'.
 
       size_t len = tmp.length ();
 
       if (len > 1)
 	{
-	  if (tmp[--len] == '/')
+	  if (is_dir_sep (tmp[--len]))
 	    tmp.resize (len);
 	}
 
       if (! ::octave_chdir (tmp))
 	{
 	  current_directory = tmp;
 	  retval = true;
 	}
