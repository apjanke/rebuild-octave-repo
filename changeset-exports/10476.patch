# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1269975867 -7200
#      Tue Mar 30 21:04:27 2010 +0200
# Node ID f261f936bf36b74f1750e10c1ba435b6ee484b7e
# Parent  739109ef88eefa6cde121df329e3c0871a3cb0bb
use rem for divisibility check in factor

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2010-03-30  Jaroslav Hajek  <highegg@gmail.com>
+
+	* specfun/factor.m: Use rem to check divisibility.
+
 2010-03-27  Ben Abbott <bpabbot@mac.com>
 
 	* plot/__go_draw_figure__.m: Untabify.
 	* plot/print.m: Provide default suffixes & validate hardcopy format.
 
 2010-03-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* optimization/fzero.m: Handle the breakdown if initial bracketing
diff --git a/scripts/specfun/factor.m b/scripts/specfun/factor.m
--- a/scripts/specfun/factor.m
+++ b/scripts/specfun/factor.m
@@ -57,18 +57,17 @@ function [x, m] = factor (n)
   x = [];
   ## There is at most one prime greater than sqrt(n), and if it exists,
   ## it has multiplicity 1, so no need to consider any factors greater
   ## than sqrt(n) directly. [If there were two factors p1, p2 > sqrt(n),
   ## then n >= p1*p2 > sqrt(n)*sqrt(n) == n. Contradiction.]
   p = primes (sqrt (n));
   while (n > 1)
     ## Find prime factors in remaining n.
-    q = n ./ p;
-    p = p (q == fix (q));
+    p = p (rem (n, p) == 0);
     if (isempty (p))
       ## Can't be reduced further, so n must itself be a prime.
       p = n;
     endif
     x = [x, p];
     ## Reduce n.
     n = n / prod (p);
   endwhile
