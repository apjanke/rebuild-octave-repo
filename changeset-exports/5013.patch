# HG changeset patch
# User jwe
# Date 1095805333 0
#      Tue Sep 21 22:22:13 2004 +0000
# Node ID 1eb9ce5c0152b216daf7e3955b7d43a781b09455
# Parent  ed25bed4340914737f2e773773734e264841f4c9
[project @ 2004-09-21 22:18:07 by jwe]

diff --git a/liboctave/oct-alloc.cc b/liboctave/oct-alloc.cc
--- a/liboctave/oct-alloc.cc
+++ b/liboctave/oct-alloc.cc
@@ -44,16 +44,19 @@ octave_allocator::alloc (size_t size)
 	return 0;
     }
 
   link *tmp = head;
   head = head->next;
   return tmp;
 }
 
+// XXX FIXME XXX -- if we free the last item on the list, shouldn't we
+// also free the underlying character array used for storage?
+
 void
 octave_allocator::free (void *p, size_t size)
 {
   if (size != item_size)
     ::delete [] (static_cast<char *> (p));
   else
     {
       link *tmp = static_cast<link *> (p);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,22 @@
+2004-09-21  David Bateman  <dbateman@free.fr>
+
+	* data.cc (Freshape): Allow a single empty dimension argument
+	to flag unknown dimension and calculate its value from the
+	other dimensions.
+
+2004-09-21  John W. Eaton  <jwe@octave.org>
+
+	* symtab.h (symbol_record::~symbol_record): Delete definition if
+	count goes to zero.
+	* symtab.cc (symbol_table::~symbol_table): Move here from symtab.h.
+	Call delete on each symbol record in the table instead of just
+	clearing them.
+
 2004-09-17 David Bateman <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/sort.cc (ascending_compare, descending_compare):
 	Now templates (avoids g++ 3.4.x compile problems).
 	Fix other uses of these functions to also treat them as templates.
 	(mx_sort): For unsigned EIGHT_BYTE_INT versions correct the test 
 	for the position of NaN.  Problems when mode was DESCENDING or
 	UNDEFINED.  Use static_cast<unsigned int> (dim) rather than 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1641,36 +1641,73 @@ reshape ([1, 2, 3, 4], 2, 2)\n\
      @result{}  1  3\n\
          2  4\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
 Note that the total number of elements in the original\n\
 matrix must match the total number of elements in the new matrix.\n\
+\n\
+A single dimension of the return matrix can be unknown and is flagged\n\
+by an empty argument.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   Array<int> new_size;
 
   if (nargin == 2)
     new_size = args(1).int_vector_value ();
   else if (nargin > 2)
     {
       new_size.resize (nargin-1);
-
+      int empty_dim = -1;
+      
       for (int i = 1; i < nargin; i++)
 	{
-	  new_size(i-1) = args(i).int_value ();
+	  if (args(i).is_empty ())
+	    if (empty_dim > 0)
+	      {
+		error ("reshape: only a single dimension can be unknown");
+		break;
+	      }
+	    else
+	      {
+		empty_dim = i;
+		new_size(i-1) = 1;
+	      }
+	  else
+	    {
+	      new_size(i-1) = args(i).int_value ();
 
-	  if (error_state)
-	    break;
+	      if (error_state)
+		break;
+	    }
+	}
+
+      if (! error_state && (empty_dim > 0))
+	{
+	  int nel = 1;
+	  for (int i = 0; i < nargin - 1; i++)
+	    nel *= new_size(i);
+
+	  if (nel == 0)
+	    new_size(empty_dim-1) = 0;
+	  else
+	    {
+	      int size_empty_dim = args(0).numel () / nel;
+	      
+	      if (args(0).numel () != size_empty_dim * nel)
+		error ("reshape: size is not divisble by the product of known dimensions (= %d)", nel);
+	      else
+		new_size(empty_dim-1) = size_empty_dim;
+	    }
 	}
     }
   else
     {
       print_usage ("reshape");
       return retval;
     }
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1170,16 +1170,17 @@ param_list_beg	: '('
 		  {
 		    lexer_flags.looking_at_parameter_list = true;
 
 		    if (lexer_flags.looking_at_function_handle)
 		      {
 		        symtab_context.push (curr_sym_tab);
 
 			tmp_local_sym_tab = new symbol_table ();
+
 			curr_sym_tab = tmp_local_sym_tab;
 
 			lexer_flags.looking_at_function_handle--;
 		      }
 		  }
 		;
 
 param_list_end	: ')'
@@ -2029,18 +2030,18 @@ make_anon_fcn_handle (tree_parameter_lis
 
       ret_list = new tree_parameter_list (id);
     }
 
   tree_statement_list *body = new tree_statement_list (stmt);
 
   body->mark_as_function_body ();
 
-  octave_user_function *fcn
-    = new octave_user_function (param_list, ret_list, body, curr_sym_tab);
+  octave_value fcn (new octave_user_function (param_list, ret_list,
+					      body, curr_sym_tab));
 
   if (symtab_context.empty ())
     panic_impossible ();
 
   curr_sym_tab = symtab_context.top ();
   symtab_context.pop ();
 
   octave_value fh (new octave_fcn_handle (fcn, "@<anonymous>"));
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -695,16 +695,35 @@ symbol_record::read_only_error (const ch
       return true;
     }
   else
     return false;
 }
 
 // A symbol table.
 
+symbol_table::~symbol_table (void)
+{
+  for (unsigned int i = 0; i < table_size; i++)
+    {
+      symbol_record *ptr = table[i].next ();
+
+      while (ptr)
+	{
+	  symbol_record *tmp = ptr;
+
+	  ptr = ptr->next ();
+
+	  delete tmp;
+	}
+    }
+
+  delete [] table;
+}
+
 symbol_record *
 symbol_table::lookup (const std::string& nm, bool insert, bool warn)
 {
   if (Vdebug_symtab_lookups)
     {
       std::cerr << (table_name.empty () ? std::string ("???") : table_name)
 		<< " symtab::lookup ["
 		<< (insert ? "I" : "-")
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -253,17 +253,21 @@ public:
   // XXX FIXME XXX -- kluge alert!  We obviously need a better way of
   // handling allow_shadow!
 
   symbol_record (const std::string& n, symbol_record *nxt)
     : formal_param (0), linked_to_global (0), tagged_static (0),
       can_hide_function (n != "__end__"), nm (n), chg_fcn (0),
       definition (new symbol_def ()), next_elem (nxt) { }
 
-  ~symbol_record (void) { }
+  ~symbol_record (void)
+    {
+      if (--definition->count <= 0)
+	delete definition;
+    }
 
   std::string name (void) const { return nm; }
 
   std::string help (void) const { return definition->help (); }
 
   octave_value& def (void) { return definition->def (); }
 
   void rename (const std::string& new_name);
@@ -462,21 +466,17 @@ public:
 	{
 	  OSSTREAM buf;
 	  buf << symtab_count++ << OSSTREAM_ENDS;
 	  table_name = OSSTREAM_STR (buf);
 	  OSSTREAM_FREEZE (buf);
 	}
     }
 
-  ~symbol_table (void)
-    {
-      clear ();
-      delete [] table;
-    }
+  ~symbol_table (void);
 
   symbol_record *lookup (const std::string& nm, bool insert = false,
 			 bool warn = false);
 
   void rename (const std::string& old_name, const std::string& new_name);
 
   void clear (void);
 
