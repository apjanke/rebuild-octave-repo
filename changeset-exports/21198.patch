# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1454627520 18000
#      Thu Feb 04 18:12:00 2016 -0500
# Node ID 1adcdc518d9e339c5061c7867aae21fd80d83c5b
# Parent  9a5bb6996b164da0cf2db5a0c472e330fdb6edac
provide wrapper for glFinish in opengl_renderer class

* gl-render.h, gl-render.cc (opengl_renderer::finish): New function.
* gl2ps-renderer.h, gl2ps-renderer.cc, __osmesa_print__.cc: Use it
instead of calling glFinish directly.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -823,16 +823,22 @@ opengl_renderer::render_ticktexts (const
 
           wmax = std::max (wmax, static_cast<int> (b(2)));
           hmax = std::max (hmax, static_cast<int> (b(3)));
         }
     }
 }
 
 void
+opengl_renderer::finish (void)
+{
+  glFinish ();
+}
+
+void
 opengl_renderer::setup_opengl_transformation (const axes::properties& props)
 {
   // setup OpenGL transformation
 
   Matrix x_zlim = props.get_transform_zlim ();
 
   xZ1 = x_zlim(0)-(x_zlim(1)-x_zlim(0))/2;
   xZ2 = x_zlim(1)+(x_zlim(1)-x_zlim(0))/2;
diff --git a/libinterp/corefcn/gl-render.h b/libinterp/corefcn/gl-render.h
--- a/libinterp/corefcn/gl-render.h
+++ b/libinterp/corefcn/gl-render.h
@@ -58,16 +58,18 @@ public:
         if (obj)
           draw (obj, toplevel);
       }
   }
 
   virtual void set_viewport (int w, int h);
   virtual graphics_xform get_transform (void) const { return xform; }
 
+  virtual void finish (void);
+
 protected:
   virtual void draw_figure (const figure::properties& props);
   virtual void draw_axes (const axes::properties& props);
   virtual void draw_line (const line::properties& props);
   virtual void draw_surface (const surface::properties& props);
   virtual void draw_patch (const patch::properties& props);
   virtual void draw_hggroup (const hggroup::properties& props);
   virtual void draw_text (const text::properties& props);
diff --git a/libinterp/corefcn/gl2ps-renderer.cc b/libinterp/corefcn/gl2ps-renderer.cc
--- a/libinterp/corefcn/gl2ps-renderer.cc
+++ b/libinterp/corefcn/gl2ps-renderer.cc
@@ -685,16 +685,16 @@ gl2ps_print (const graphics_object& fig,
       frame.add_fcn (safe_fclose, fp);
     }
 
   gl2ps_renderer rend (fp, term);
 
   rend.draw (fig, "");
 
   // Make sure buffered commands are finished!!!
-  glFinish ();
+  rend.finish ();
 
 #else
 
   err_disabled_feature ("gl2ps_print", "gl2ps");
 
 #endif
 }
diff --git a/libinterp/corefcn/gl2ps-renderer.h b/libinterp/corefcn/gl2ps-renderer.h
--- a/libinterp/corefcn/gl2ps-renderer.h
+++ b/libinterp/corefcn/gl2ps-renderer.h
@@ -53,20 +53,20 @@ protected:
 
   void draw_axes (const axes::properties& props)
   {
     // Initialize a sorting tree (viewport) in gl2ps for each axes
     GLint vp[4];
     glGetIntegerv (GL_VIEWPORT, vp);
     gl2psBeginViewport (vp);
 
-    // Draw and  glFinish () or there may primitives missing in the
+    // Draw and finish () or there may primitives missing in the
     // gl2ps output.
     opengl_renderer::draw_axes (props);
-    glFinish ();
+    finish ();
 
     // Finalize viewport
     GLint state = gl2psEndViewport ();
     if (state == GL2PS_NO_FEEDBACK)
       warning ("gl2ps_renderer::draw_axes: empty feedback buffer and/or nothing else to print");
     else if (state == GL2PS_ERROR)
       error ("gl2ps_renderer::draw_axes: gl2psEndPage returned GL2PS_ERROR");
 
diff --git a/libinterp/dldfcn/__osmesa_print__.cc b/libinterp/dldfcn/__osmesa_print__.cc
--- a/libinterp/dldfcn/__osmesa_print__.cc
+++ b/libinterp/dldfcn/__osmesa_print__.cc
@@ -155,20 +155,21 @@ instead.\n\
       std::string term = args(2).string_value ();
 
       gl2ps_print (fobj, file, term);
     }
   else
     {
       // return RGB image
       opengl_renderer rend;
+
+      // Draw and finish () or there may primitives missing in the
+      // output.
       rend.draw (fobj);
-
-      // Make sure buffered commands are finished!!!
-      glFinish ();
+      rend.finish ();
 
       dim_vector dv (4, Width, Height);
 
       // FIXME: We expect that GLubyte is 1 Byte long.
       // Adapt code if this isn't always true
       assert (sizeof (GLubyte) == 1);
       uint8NDArray img (dv);
       unsigned char *p = reinterpret_cast<unsigned char*>(img.fortran_vec ());
