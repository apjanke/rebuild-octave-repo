# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1258966829 -3600
#      Mon Nov 23 10:00:29 2009 +0100
# Node ID aabf7a8c2e5747fdf6c6f50635cd234bd831773d
# Parent  1fac51c5f83fbca4fbe7d26093208c01f57312d8
implement sparse logical conversion

diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -7343,16 +7343,31 @@ SparseMatrix::any_element_is_inf_or_nan 
       if (xisinf (val) || xisnan (val))
 	return true;
     }
 
   return false;
 }
 
 bool
+SparseMatrix::any_element_not_one_or_zero (void) const
+{
+  octave_idx_type nel = nnz ();
+
+  for (octave_idx_type i = 0; i < nel; i++)
+    {
+      double val = data (i);
+      if (val != 0.0 && val != 1.0)
+	return true;
+    }
+
+  return false;
+}
+
+bool
 SparseMatrix::all_elements_are_zero (void) const
 {
   octave_idx_type nel = nnz ();
 
   for (octave_idx_type i = 0; i < nel; i++)
     if (data (i) != 0)
       return false;
 
diff --git a/liboctave/dSparse.h b/liboctave/dSparse.h
--- a/liboctave/dSparse.h
+++ b/liboctave/dSparse.h
@@ -381,16 +381,17 @@ public:
 			     double& rcond,
 			     solve_singularity_handler sing_handler) const;
 
   // other operations
 
   bool any_element_is_negative (bool = false) const;
   bool any_element_is_nan (void) const;
   bool any_element_is_inf_or_nan (void) const;
+  bool any_element_not_one_or_zero (void) const;
   bool all_elements_are_zero (void) const;
   bool all_elements_are_int_or_inf_or_nan (void) const;
   bool all_integers (double& max_val, double& min_val) const;
   bool too_large_for_float (void) const;
  
   SparseBoolMatrix operator ! (void) const;
 
   SparseBoolMatrix all (int dim = -1) const;
diff --git a/src/ls-oct-ascii.h b/src/ls-oct-ascii.h
--- a/src/ls-oct-ascii.h
+++ b/src/ls-oct-ascii.h
@@ -110,16 +110,24 @@ extract_keyword (std::istream& is, const
 	    }
 	  else if (next_only)
 	    break;
 	}
     }
   return status;
 }
 
+template <class T>
+bool
+extract_keyword (std::istream& is, const std::string& kw, T& value, 
+		 const bool next_only = false)
+{
+  return extract_keyword (is, kw.c_str (), value, next_only);
+}
+
 // Match one of the elements in KEYWORDS on stream IS, placing the
 // matched keyword in KW and the associated value in VALUE,
 // returning TRUE if successful and FALSE otherwise.
 //
 // Input should look something like:
 //
 //  [%#][ \t]*keyword[ \t]*int-value.*\n
 
diff --git a/src/ov-bool-mat.cc b/src/ov-bool-mat.cc
--- a/src/ov-bool-mat.cc
+++ b/src/ov-bool-mat.cc
@@ -27,16 +27,17 @@ along with Octave; see the file COPYING.
 
 #include <iostream>
 #include <vector>
 
 #include "lo-ieee.h"
 #include "mx-base.h"
 #include "oct-locbuf.h"
 
+#include "defun.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ops.h"
 #include "ov-base.h"
 #include "ov-base-mat.h"
 #include "ov-base-mat.cc"
 #include "ov-bool.h"
 #include "ov-bool-mat.h"
diff --git a/src/ov-re-sparse.cc b/src/ov-re-sparse.cc
--- a/src/ov-re-sparse.cc
+++ b/src/ov-re-sparse.cc
@@ -179,16 +179,27 @@ octave_sparse_matrix::complex_array_valu
 }
 
 NDArray 
 octave_sparse_matrix::array_value (bool) const
 {
   return NDArray (matrix.matrix_value ());
 }
 
+SparseBoolMatrix 
+octave_sparse_matrix::sparse_bool_matrix_value (bool warn) const
+{
+  if (matrix.any_element_is_nan ())
+    error ("invalid conversion from NaN to logical");
+  else if (warn && matrix.any_element_not_one_or_zero ())
+    gripe_logical_conversion ();
+
+  return mx_el_ne (matrix, 0.0);
+}
+
 octave_value
 octave_sparse_matrix::convert_to_str_internal (bool, bool, char type) const
 {
   octave_value retval;
   dim_vector dv = dims ();
   octave_idx_type nel = dv.numel ();
 
   if (nel == 0)
diff --git a/src/ov-re-sparse.h b/src/ov-re-sparse.h
--- a/src/ov-re-sparse.h
+++ b/src/ov-re-sparse.h
@@ -123,16 +123,18 @@ public:
   NDArray array_value (bool = false) const;
 
   SparseMatrix sparse_matrix_value (bool = false) const
     { return matrix; }
 
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const
     { return SparseComplexMatrix (matrix); }
 
+  SparseBoolMatrix sparse_bool_matrix_value (bool warn = false) const;
+
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
 #if 0
   int write (octave_stream& os, int block_size,
 	     oct_data_conv::data_type output_type, int skip,
 	     oct_mach_info::float_format flt_fmt) const
     { return os.write (matrix, block_size, output_type, skip, flt_fmt); }
 #endif
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -759,18 +759,18 @@ public:
     { return rep->char_array_value (frc_str_conv); }
 
   SparseMatrix sparse_matrix_value (bool frc_str_conv = false) const
     { return rep->sparse_matrix_value (frc_str_conv); }
 
   SparseComplexMatrix sparse_complex_matrix_value (bool frc_str_conv = false) const
     { return rep->sparse_complex_matrix_value (frc_str_conv); }
 
-  SparseBoolMatrix sparse_bool_matrix_value (bool frc_str_conv = false) const
-    { return rep->sparse_bool_matrix_value (frc_str_conv); }
+  SparseBoolMatrix sparse_bool_matrix_value (bool warn = false) const
+    { return rep->sparse_bool_matrix_value (warn); }
 
   DiagMatrix diag_matrix_value (bool force = false) const
     { return rep->diag_matrix_value (force); }
   
   FloatDiagMatrix float_diag_matrix_value (bool force = false) const
     { return rep->float_diag_matrix_value (force); }
   
   ComplexDiagMatrix complex_diag_matrix_value (bool force = false) const
