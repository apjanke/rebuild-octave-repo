# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1223294556 -7200
#      Mon Oct 06 14:02:36 2008 +0200
# Node ID da48d2ca096fe014bf42bd08b9674e1d80fd2b61
# Parent  6c08e3921d3e1931e3e201f958de59fe1db51dc2
small fixes in oct-lookup.h

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2008-10-06  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-lookup.h: Mark functions inline. Add missing std:: qualifiers.
+
 2008-10-03  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.h (Array<T>::maybe_delete_elements): Remove rfv argument from
 	declaration.
 	* Array.cc (Array<T>::maybe_delete_elements): Remove all usages of
 	rfv.
 
 2008-10-03  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/liboctave/oct-lookup.h b/liboctave/oct-lookup.h
--- a/liboctave/oct-lookup.h
+++ b/liboctave/oct-lookup.h
@@ -27,27 +27,27 @@ along with Octave; see the file COPYING.
 
 #include <algorithm>
 #include <functional>
 
 #include "oct-types.h"
 
 // a simple binary lookup
 template<typename T, typename bpred>
-octave_idx_type
+inline octave_idx_type
 bin_lookup (const T *table, octave_idx_type size, 
             const T& val,
             bpred comp)
 {
   return std::upper_bound (table, table + size, val, comp) - table;
 }
 
 // version using < operator
 template<typename T>
-octave_idx_type
+inline octave_idx_type
 bin_lookup (const T *table, octave_idx_type size,
             const T& val)
 {
   return std::upper_bound (table, table + size, val) - table;
 }
 
 // a unary functor that checks whether a value is outside [a,b) range
 template<class T, class bpred>
@@ -67,24 +67,24 @@ private:
 };
 
 // conveniently constructs the above functor
 // NOTE: with SGI extensions, this can be written as
 // compose2 (logical_and<bool>(), 
 //           bind2nd (less<T>(), a),
 //           not1 (bind2nd (less<T>(), b)))
 template<class T, class bpred>
-out_range<T, bpred> 
+inline out_range<T, bpred> 
 chk_out_range (const T& a, const T& b, bpred comp)
 {
   return out_range<T, bpred> (a, b, comp);
 }
 
 template<typename T, typename bpred>
-void 
+inline void 
 seq_lookup (const T *table, octave_idx_type offset, octave_idx_type size,
             const T *vals, octave_idx_type nvals,
             octave_idx_type *idx, bpred comp)
 {
   const T *begin = table + offset;
 
   if (size == 0)
     // the trivial case of empty table
@@ -120,51 +120,51 @@ seq_lookup (const T *table, octave_idx_t
             if (cur > begin)
               // inner interval
               vnew = std::find_if (vcur, vend,
                                    chk_out_range (*(cur-1), *cur, comp));
 
             else
               // special case: lowermost range (-Inf, min) 
               vnew = std::find_if (vcur, vend,
-                                   not1 (bind2nd (comp, *cur)));
+                                   std::not1 (std::bind2nd (comp, *cur)));
           else
             // special case: uppermost range [max, Inf)
             vnew = std::find_if (vcur, vend,
-                                 bind2nd (comp, *(cur-1)));
+                                 std::bind2nd (comp, *(cur-1)));
 
           // store index of the current interval.
           std::fill_n (idx, vnew - vcur, cur - table);
 	  idx += (vnew - vcur);
           vcur = vnew;
 
         }
     }
 }
 
 // overload using < operator
 template<typename T, typename bpred>
-void 
+inline void 
 seq_lookup (const T *table, octave_idx_type offset, octave_idx_type size,
             const T *vals, octave_idx_type nvals,
             octave_idx_type *idx)
 {
   seq_lookup (table, offset, size, vals, nvals, idx, std::less<T>());
 }
 
 // helper functions - determine whether an array is descending
 template<typename T>
-bool 
+inline bool 
 is_descending (const T *table, octave_idx_type size)
 {
   return size > 1 && table[size-1] < table[0];
 }
 
 template<typename T, typename bpred>
-bool 
+inline bool 
 is_descending (const T *table, octave_idx_type size,
                     bpred comp)
 {
   return size > 1 && comp (table[size-1], table[0]);
 }
 
 #endif
 
