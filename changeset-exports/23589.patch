# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497384319 25200
#      Tue Jun 13 13:05:19 2017 -0700
# Node ID 63950abd2f81caaccbf7eac00d607fb72a09e1bb
# Parent  0549061d35b9c0cb99e779d2f500697cabf38ead
maint: Deprecate is_null_type and replace with isnull.

* ov.h (is_null_type): Use OCTAVE_DEPRECATED macro around function.
* ov.h (isnull): New function.

* ov-base.h, ov-cell.cc, ov-null-mat.cc, ov-null-mat.h, ov-struct.cc, ov.cc:
Replace instances of is_null_type with isnull.

diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -424,17 +424,17 @@ public:
   virtual bool is_matrix_type (void) const { return false; }
 
   virtual bool isnumeric (void) const { return false; }
 
   virtual bool issparse (void) const { return false; }
 
   virtual bool is_true (void) const { return false; }
 
-  virtual bool is_null_value (void) const { return false; }
+  virtual bool isnull (void) const { return false; }
 
   virtual bool is_constant (void) const { return false; }
 
   virtual bool is_function_handle (void) const { return false; }
 
   virtual bool is_anonymous_function (void) const { return false; }
 
   virtual bool is_inline_function (void) const { return false; }
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -329,17 +329,17 @@ octave_cell::subsasgn (const std::string
   switch (type[0])
     {
     case '(':
       {
         octave_value_list i = idx.front ();
 
         if (t_rhs.iscell ())
           octave_base_matrix<Cell>::assign (i, t_rhs.cell_value ());
-        else if (t_rhs.is_null_value ())
+        else if (t_rhs.isnull ())
           octave_base_matrix<Cell>::delete_elements (i);
         else
           octave_base_matrix<Cell>::assign (i, Cell (t_rhs));
 
         count++;
         retval = octave_value (this);
       }
       break;
diff --git a/libinterp/octave-value/ov-null-mat.cc b/libinterp/octave-value/ov-null-mat.cc
--- a/libinterp/octave-value/ov-null-mat.cc
+++ b/libinterp/octave-value/ov-null-mat.cc
@@ -112,17 +112,17 @@ This should delete elements if @code{I} 
 This should give an error if @code{I} is nonempty.
 @end table
 @seealso{isempty, isindex}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
-  return ovl (args(0).is_null_value ());
+  return ovl (args(0).isnull ());
 }
 
 /*
 %!assert (isnull ([]), true)
 %!assert (isnull ([1]), false)
 %!assert (isnull (zeros (0,3)), false)
 %!assert (isnull (""), true)
 %!assert (isnull ("A"), false)
diff --git a/libinterp/octave-value/ov-null-mat.h b/libinterp/octave-value/ov-null-mat.h
--- a/libinterp/octave-value/ov-null-mat.h
+++ b/libinterp/octave-value/ov-null-mat.h
@@ -43,17 +43,17 @@ OCTINTERP_API
 octave_null_matrix : public octave_matrix
 {
   octave_null_matrix (void) : octave_matrix () { }
 
 public:
 
   static const octave_value instance;
 
-  bool is_null_value (void) const { return true; }
+  bool isnull (void) const { return true; }
 
   type_conv_info numeric_conversion_function (void) const;
 
 private:
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
@@ -64,17 +64,17 @@ OCTINTERP_API
 octave_null_str : public octave_char_matrix_str
 {
   octave_null_str (void) : octave_char_matrix_str () { }
 
 public:
 
   static const octave_value instance;
 
-  bool is_null_value (void) const { return true; }
+  bool isnull (void) const { return true; }
 
   type_conv_info numeric_conversion_function (void) const;
 
 private:
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
@@ -85,17 +85,17 @@ OCTINTERP_API
 octave_null_sq_str : public octave_char_matrix_sq_str
 {
   octave_null_sq_str (void) : octave_char_matrix_sq_str () { }
 
 public:
 
   static const octave_value instance;
 
-  bool is_null_value (void) const { return true; }
+  bool isnull (void) const { return true; }
 
   type_conv_info numeric_conversion_function (void) const;
 
 private:
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -469,17 +469,17 @@ octave_struct::subsasgn (const std::stri
 
                 map.assign (idx.front (), rhs_map);
 
                 count++;
                 retval = octave_value (this);
               }
             else
               {
-                if (! t_rhs.is_null_value ())
+                if (! t_rhs.isnull ())
                   error ("invalid structure assignment");
 
                 map.delete_elements (idx.front ());
 
                 count++;
                 retval = octave_value (this);
               }
           }
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -2121,28 +2121,28 @@ XVALUE_EXTRACTOR (octave_fcn_inline *, x
 XVALUE_EXTRACTOR (octave_value_list, xlist_value, list_value)
 
 #undef XVALUE_EXTRACTOR
 
 octave_value
 octave_value::storable_value (void) const
 {
   octave_value retval = *this;
-  if (is_null_value ())
+  if (isnull ())
     retval = octave_value (rep->empty_clone ());
   else
     retval.maybe_economize ();
 
   return retval;
 }
 
 void
 octave_value::make_storable_value (void)
 {
-  if (is_null_value ())
+  if (isnull ())
     {
       octave_base_value *rc = rep->empty_clone ();
       if (--rep->count == 0)
         delete rep;
       rep = rc;
     }
   else
     maybe_economize ();
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -610,18 +610,22 @@ public:
   { return isjava (); }
 
   bool is_cs_list (void) const
   { return rep->is_cs_list (); }
 
   bool is_magic_colon (void) const
   { return rep->is_magic_colon (); }
 
+  bool isnull (void) const
+  { return rep->isnull (); }
+
+  OCTAVE_DEPRECATED ("use 'isnull' instead")
   bool is_null_value (void) const
-  { return rep->is_null_value (); }
+  { return rep->isnull (); }
 
   // Are any or all of the elements in this constant nonzero?
 
   octave_value all (int dim = 0) const
   { return rep->all (dim); }
 
   octave_value any (int dim = 0) const
   { return rep->any (dim); }
