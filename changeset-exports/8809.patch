# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1234987506 18000
#      Wed Feb 18 15:05:06 2009 -0500
# Node ID 732cb02364882e9c948d47b620eb99d87bb5869c
# Parent  d724487d2c4b01e2aebe77c287a5b7825726d2f9
strfns.cc: use size_t or octave_idx_type instead of int as needed

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 2009-02-18  John W. Eaton  <jwe@octave.org>
 
+	* strfns.cc (Fstrvcat): Use octave_idx_type and size_t instead of
+	int as needed.
+	(Fstrcmp, Fstrncmp): Use octave_idx_type instead of int as needed.
+
 	* DLD-FUNCTIONS/hex2num.cc (Fhex2num, Fnum2hex):
 	Use union to avoid reinterpret_cast and GCC warning.
 
 	* mex.cc (call_mex): Declare local nargout variable volatile to
 	avoid "maybe clobbered by vfork" warning from GCC.
 
 	* ov-cx-mat.cc (xabs): Comment out unused static function.
 	* ov-flt-cx-mat.cc (xabs): Ditto.
diff --git a/src/strfns.cc b/src/strfns.cc
--- a/src/strfns.cc
+++ b/src/strfns.cc
@@ -187,69 +187,69 @@ strvcat ([97, 98, 99], \"\", @{\"98\", \
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin > 0)
     {
       int n_elts = 0;
 
-      int max_len = 0;
+      size_t max_len = 0;
 
       std::queue<string_vector> args_as_strings;
 
       for (int i = 0; i < nargin; i++)
 	{
 	  string_vector s = args(i).all_strings ();
 
 	  if (error_state)
 	    {
 	      error ("strvcat: unable to convert some args to strings");
 	      return retval;
 	    }
 
-          int n = s.length ();
+          size_t n = s.length ();
 
           // do not count empty strings in calculation of number of elements
           if (n > 0)
             {
-              for (int j = 0; j < n; j++)
+              for (size_t j = 0; j < n; j++)
                 {
                   if (s[j].length () > 0)
                     n_elts++;
                 }
             }
 
-	  int s_max_len = s.max_length ();
+	  size_t s_max_len = s.max_length ();
 
 	  if (s_max_len > max_len)
 	    max_len = s_max_len;
 
 	  args_as_strings.push (s);
 	}
 
       string_vector result (n_elts);
 
-      int k = 0;
+      octave_idx_type k = 0;
 
       for (int i = 0; i < nargin; i++)
 	{
 	  string_vector s = args_as_strings.front ();
 	  args_as_strings.pop ();
 
-	  int n = s.length ();
+	  size_t n = s.length ();
 
           if (n > 0)
             {
-	      for (int j = 0; j < n; j++)
+	      for (size_t j = 0; j < n; j++)
 	        {
 	          std::string t = s[j];
                   if (t.length () > 0)
                     {
-                      int t_len = t.length ();
+                      size_t t_len = t.length ();
 
                       if (max_len > t_len)
                         t += std::string (max_len - t_len, ' ');
 
                       result[k++] = t;
                     }
 	        }
             }
@@ -338,50 +338,50 @@ This is just the opposite of the corresp
 	{
 	  // Must match exactly in all dimensions.
 
 	  const dim_vector dv1 = args(0).dims ();
 	  const dim_vector dv2 = args(1).dims ();
 
 	  if (dv1.length () == dv2.length ())
 	    {
-	      for (int i = 0; i < dv1.length (); i++)
+	      for (octave_idx_type i = 0; i < dv1.length (); i++)
 		{
 		  if (dv1(i) != dv2(i))
 		    {
 		      retval = false;
 		      return retval;
 		    }
 		}
 
 	      if (dv1(0) == 0)
 		retval = true;
 	      else
 		{
 		  charNDArray s1 = args(0).char_array_value ();
 		  charNDArray s2 = args(1).char_array_value ();
 
-		  for (int i = 0; i < dv1.numel (); i++)
+		  for (octave_idx_type i = 0; i < dv1.numel (); i++)
 		    {
 		      if (s1(i) != s2(i))
 			{
 			  retval = false;
 			  return retval;
 			}
 		    }
 
 		  retval = true;
 		}
 	    }
 	}
       else if ((s1_string && s2_cell) || (s1_cell && s2_string))
 	{
 	  string_vector str;
 	  Cell cell;
-	  int r;
+	  octave_idx_type r;
 
 	  if (s1_string)
 	    {
 	      str = args(0).all_strings ();
 	      r = args(0).rows ();
 	      cell = args(1).cell_value ();
 	    }
 	  else
@@ -394,17 +394,17 @@ This is just the opposite of the corresp
 	  if (r == 0 || r == 1)
 	    {
 	      // Broadcast the string.
 
 	      boolNDArray output (cell.dims (), false);
 
 	      std::string s = r == 0 ? std::string () : str[0];
 
-	      for (int i = 0; i < cell.length (); i++)
+	      for (octave_idx_type i = 0; i < cell.length (); i++)
 		{
 		  if (cell(i).is_string ())
 		    output(i) = (cell(i).string_value () == s);
 		}
 
 	      retval = output;
 	    }
 	  else if (r > 1)
@@ -415,31 +415,31 @@ This is just the opposite of the corresp
 
 		  const dim_vector dv (r, 1);
 		  boolNDArray output (dv, false);
 
 		  if (cell(0).is_string ())
 		    {
 		      const std::string str2 = cell(0).string_value ();
 
-		      for (int i = 0; i < r; i++)
+		      for (octave_idx_type i = 0; i < r; i++)
 			output(i) = (str[i] == str2);
 		    }
 
 		  retval = output;
 		}
 	      else
 		{
 		  // Must match in all dimensions.
 
 		  boolNDArray output (cell.dims (), false);
 
 		  if (cell.length () == r)
 		    {
-		      for (int i = 0; i < r; i++)
+		      for (octave_idx_type i = 0; i < r; i++)
 			{
 			  if (cell(i).is_string ())
 			    output(i) = (str[i] == cell(i).string_value ());
 			}
 
 		      retval = output;
 		    }
 		  else
@@ -447,18 +447,18 @@ This is just the opposite of the corresp
 		}
 	    }
 	}
       else if (s1_cell && s2_cell)
 	{
 	  Cell cell1;
 	  Cell cell2;
 
-	  int r1 = args(0).numel ();
-	  int r2;
+	  octave_idx_type r1 = args(0).numel ();
+	  octave_idx_type r2;
 
 	  if (r1 == 1)
 	    {
 	      // Make the singleton cell2.
 
 	      cell1 = args(1).cell_value ();
 	      cell2 = args(0).cell_value ();
 	      r1 = cell1.length ();
@@ -479,17 +479,17 @@ This is just the opposite of the corresp
 	  if (r2 == 1)
 	    {
 	      // Broadcast cell2.
 
 	      if (cell2(0).is_string ())
 		{
 		  const std::string str2 = cell2(0).string_value ();
 
-		  for (int i = 0; i < r1; i++)
+		  for (octave_idx_type i = 0; i < r1; i++)
 		    {
 		      if (cell1(i).is_string ())
 			{
 			  const std::string str1 = cell1(i).string_value ();
 			  output(i) = (str1 == str2);
 			}
 		    }
 		}
@@ -497,17 +497,17 @@ This is just the opposite of the corresp
 	  else
 	    {
 	      if (size1 != size2)
 		{
 		  error ("strcmp: nonconformant cell arrays");
 		  return retval;
 		}
 
-	      for (int i = 0; i < r1; i++)
+	      for (octave_idx_type i = 0; i < r1; i++)
 		{
 		  if (cell1(i).is_string () && cell2(i).is_string ())
 		    {
 		      const std::string str1 = cell1(i).string_value ();
 		      const std::string str2 = cell2(i).string_value ();
 		      output(i) = (str1 == str2);
 		    }
 		}
@@ -604,17 +604,17 @@ This is just the opposite of the corresp
   if (args.length () == 3)
     {
       bool s1_string = args(0).is_string ();
       bool s1_cell = args(0).is_cell ();
       bool s2_string = args(1).is_string ();
       bool s2_cell = args(1).is_cell ();
 
       // Match only first n strings.
-      int  n = args(2).int_value ();
+      int n = args(2).int_value ();
 
       if (n <= 0)
 	{
 	  error ("strncmp: N must be greater than 0");
 	  return retval;
 	}
 
       if (s1_string && s2_string)
@@ -645,17 +645,17 @@ This is just the opposite of the corresp
 	    }
 	  else
 	    retval = false;
 	}
       else if ((s1_string && s2_cell) || (s1_cell && s2_string))
 	{
 	  string_vector str;
 	  Cell cell;
-	  int r, c;
+	  octave_idx_type r, c;
 
 	  if (s1_string)
 	    {
 	      str = args(0).all_strings ();
 	      r = args(0).rows ();
 	      c = args(0).columns ();
 	      cell = args(1).cell_value ();
 	    }
@@ -670,28 +670,28 @@ This is just the opposite of the corresp
 	  if (r == 1)
 	    {
 	      // Broadcast the string.
 
 	      boolNDArray output (cell.dims (), false);
 
 	      if (c < n)
 		{
-		  for (int i = 0; i < cell.length (); i++)
+		  for (octave_idx_type i = 0; i < cell.length (); i++)
 		    output(i) = false;
 		}
 	      else
 		{
-		  for (int i = 0; i < cell.length (); i++)
+		  for (octave_idx_type i = 0; i < cell.length (); i++)
 		    {
 		      if (cell(i).is_string ())
 			{
 			  const std::string str2 = cell(i).string_value ();
 
-			  if (str2.length() >= n
+			  if (str2.length () >= n
 			      && str2.compare (0, n, str[0], 0, n) == 0)
 				output(i) = true;
 			}
 		    }
 		}
 
 	      retval = output;
 	    }
@@ -705,17 +705,17 @@ This is just the opposite of the corresp
 		  boolNDArray output (dv, false);
 
 		  if (cell(0).is_string () && c >= n)
 		    {
 		      const std::string str2 = cell(0).string_value ();
 		      
 		      if (str2.length () >= n)
 			{
-			  for (int i = 0; i < r; i++)
+			  for (octave_idx_type i = 0; i < r; i++)
 			    {
 			      if (str[i].compare (0, n, str2, 0, n) == 0)
 				output(i) = true;
 			    }
 			}
 		    }
 
 		  retval = output;
@@ -723,17 +723,17 @@ This is just the opposite of the corresp
 	      else
 		{
 		  // Must match in all dimensions.
 
 		  boolNDArray output (cell.dims (), false);
 
 		  if (cell.numel () == r)
 		    {
-		      for (int i = 0; i < r; i++)
+		      for (octave_idx_type i = 0; i < r; i++)
 			{
 			  if (cell(i).is_string () && c >= n)
 			    {
 			      std::string str2 = cell(i).string_value ();
 
 			      if (str2.length () >= n
 				  && str2.compare (0, n, str[i], 0, n) == 0)
 				output(i) = true;
@@ -750,18 +750,18 @@ This is just the opposite of the corresp
 		}
 	    }
 	}
       else if (s1_cell && s2_cell)
 	{
 	  Cell cell1;
 	  Cell cell2;
 
-	  int r1 = args(0).numel ();
-	  int r2;
+	  octave_idx_type r1 = args(0).numel ();
+	  octave_idx_type r2;
 
 	  if (r1 == 1)
 	    {
 	      // Make the singleton cell2.
 
 	      cell1 = args(1).cell_value ();
 	      cell2 = args(0).cell_value ();
 	      r1 = cell1.length ();
@@ -782,17 +782,17 @@ This is just the opposite of the corresp
 	  if (r2 == 1)
 	    {
 	      // Broadcast cell2.
 
 	      if (cell2(0).is_string ())
 		{
 		  const std::string str2 = cell2(0).string_value ();
 
-		  for (int i = 0; i < r1; i++)
+		  for (octave_idx_type i = 0; i < r1; i++)
 		    {
 		      if (cell1(i).is_string ())
 			{
 			  const std::string str1 = cell1(i).string_value ();
 
 			  if (str1.length () >= n && str2.length () >= n
 			      && str1.compare (0, n, str2, 0, n) == 0)
 			    output(i) = true;
@@ -803,17 +803,17 @@ This is just the opposite of the corresp
 	  else
 	    {
 	      if (size1 != size2)
 		{
 		  error ("strncmp: nonconformant cell arrays");
 		  return retval;
 		}
 
-	      for (int i = 0; i < r1; i++)
+	      for (octave_idx_type i = 0; i < r1; i++)
 		{
 		  if (cell1(i).is_string () && cell2(i).is_string ())
 		    {
 		      const std::string str1 = cell1(i).string_value ();
 		      const std::string str2 = cell2(i).string_value ();
 
 		      if (str1.length () >= n && str2.length () >= n
 			  && str1.compare (0, n, str2, 0, n) == 0)
