# HG changeset patch
# User Konstantinos Poulios <logari81@gmail.com>
# Date 1297792153 -3600
#      Tue Feb 15 18:49:13 2011 +0100
# Node ID 2f0d1e12806d581b4a24e0707513cb74ff253426
# Parent  f2c080bbd8a5f7040a61d3c3a6b4e71aab3761c8
invoke/terminate printing process synchronously with rendering (#32319)

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2011-02-15  Konstantinos Poulios  <logari81@gmail.com>
+
+	* plot/__fltk_print__.m: Forward pipeline to drawnow instead of
+	invoking a process here.
+
 2010-02-14  Rik  <octave@nomad.inbox5.com>
 
 	* plot/semilogxerr.m, plot/semilogyerr.m, special-matrix/pascal.m,
 	special-matrix/rosser.m, special-matrix/wilkinson.m: Add missing
 	commas in @seealso macro.
 
 2011-02-14  David Bateman  <dbateman@free.fr>
 
diff --git a/scripts/plot/__fltk_print__.m b/scripts/plot/__fltk_print__.m
--- a/scripts/plot/__fltk_print__.m
+++ b/scripts/plot/__fltk_print__.m
@@ -145,26 +145,17 @@ function opts = __fltk_print__ (opts)
   endswitch
 
   opts.pipeline = pipeline;
 
   for n = 1:numel(pipeline)
     if (opts.debug)
       fprintf ("fltk-pipeline: '%s'\n", pipeline{n});
     endif
-    pid = popen (pipeline{n}, "w");
-    if (pid < 0)
-      error ("print:popenfailed", "print.m: failed to open pipe");
-    endif
-    unwind_protect
-      drawnow (gl2ps_device{n} , sprintf ("%d" , pid));
-      waitpid (pid);
-    unwind_protect_cleanup
-      pclose (pid);
-    end_unwind_protect
+    drawnow (gl2ps_device{n}, strcat('|',pipeline{n}));
   endfor
 
   if (! isempty (strfind (opts.devopt, "standalone")))
     opts.latex_standalone (opts);
   endif
 
 endfunction
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+2011-02-15  Konstantinos Poulios  <logari81@googlemail.com>
+
+	* __init_fltk__.cc: Include sysdep.h.
+	(class OpenGL_fltk): Replace integer print_fid member with
+	boolean print_mode. New class member print_cmd of type string.
+	(OpenGL_fltk::print): Accept command string argument instead of
+	file id.
+	(OpenGL_fltk::draw): Invoke and terminate an octave process for
+	the printing job.
+	(plot_window::print, figure_manager::print,
+	figure_manager::do_print): Replace file id with command string.
+	(fltk_graphics_toolkit::print_figure): Remove parsing of file id.
+	* graphics.cc (drawnow): Recognize strings beginning with "|" as
+	pipelines instead of filenames.
+
 2011-02-14  David Bateman  <dbateman@free.fr>
 
 	* gl-render.cc (void opengl_renderer::draw_patch (
 	const patch::properties &)): Obtain the marker color directly
 	from the cdata rather that the facecolor, as the facecolor might
 	not have been set.
 
 2011-02-14  Konstantinos Poulios  <logari81@googlemail.com>
diff --git a/src/DLD-FUNCTIONS/__init_fltk__.cc b/src/DLD-FUNCTIONS/__init_fltk__.cc
--- a/src/DLD-FUNCTIONS/__init_fltk__.cc
+++ b/src/DLD-FUNCTIONS/__init_fltk__.cc
@@ -65,16 +65,17 @@ To initialize:
 
 #include "defun-dld.h"
 #include "error.h"
 #include "file-ops.h"
 #include "gl-render.h"
 #include "gl2ps-renderer.h"
 #include "graphics.h"
 #include "parse.h"
+#include "sysdep.h"
 #include "toplev.h"
 #include "variables.h"
 
 #define FLTK_GRAPHICS_TOOLKIT_NAME "fltk"
 
 // Give FLTK no more than 0.01 sec to do its stuff.
 static double fltk_maxtime = 1e-2;
 
@@ -92,17 +93,17 @@ right drag - rectangle zoom\n\
 left double click - autoscale\n\
 ";
 
 class OpenGL_fltk : public Fl_Gl_Window
 {
 public:
   OpenGL_fltk (int xx, int yy, int ww, int hh, double num)
     : Fl_Gl_Window (xx, yy, ww, hh, 0), number (num), renderer (),
-      in_zoom (false), zoom_box (),  print_fid (-1)
+      in_zoom (false), zoom_box (),  print_mode (false)
   {
     // Ask for double buffering and a depth buffer.
     mode (FL_DEPTH | FL_DOUBLE);
   }
 
   ~OpenGL_fltk (void) { }
 
   void zoom (bool z)
@@ -110,19 +111,20 @@ public:
     in_zoom = z;
     if (! in_zoom)
       hide_overlay ();
   }
 
   bool zoom (void) { return in_zoom; }
   void set_zoom_box (const Matrix& zb) { zoom_box = zb; }
 
-  void print (const int fid, const std::string& term)
+  void print (const std::string& cmd, const std::string& term)
   {
-    print_fid  = fid;
+    print_mode  = true;
+    print_cmd = cmd;
     print_term  = term;
   }
 
   void resize (int xx, int yy, int ww, int hh)
   {
     Fl_Gl_Window::resize (xx, yy, ww, hh);
     setup_viewport (ww, hh);
     redraw ();
@@ -130,17 +132,18 @@ public:
 
 private:
   double number;
   opengl_renderer renderer;
   bool in_zoom;
   // (x1,y1,x2,y2)
   Matrix zoom_box;
 
-  int print_fid;
+  bool print_mode;
+  std::string print_cmd;
   std::string print_term;
 
   void setup_viewport (int ww, int hh)
   {
     glMatrixMode (GL_PROJECTION);
     glLoadIdentity ();
     glViewport (0, 0, ww, hh);
   }
@@ -148,23 +151,25 @@ private:
   void draw (void)
   {
     if (! valid ())
       {
         valid (1);
         setup_viewport (w (), h ());
       }
 
-    if (print_fid > 0)
+    if (print_mode)
       {
-        glps_renderer rend (print_fid, print_term);
+        FILE *fp = octave_popen (print_cmd.c_str (), "w");
+        glps_renderer rend (fileno (fp), print_term);
 
         rend.draw (gh_manager::get_object (number));
 
-        print_fid = -1;
+        octave_pclose (fp);
+        print_mode = false;
       }
     else
       {
         renderer.draw (gh_manager::get_object (number));
 
         if (zoom ())
           overlay ();
       }
@@ -754,19 +759,19 @@ public:
     delete canvas;
     delete status;
     delete uimenu;
   }
 
   // FIXME -- this could change.
   double number (void) { return fp.get___myhandle__ ().value (); }
 
-  void print (const int fid, const std::string& term)
+  void print (const std::string& cmd, const std::string& term)
   {
-    canvas->print (fid, term);
+    canvas->print (cmd, term);
 
     // Print immediately so the output file will exist when the drawnow
     // command is done.
     mark_modified ();
     Fl::wait (fltk_maxtime);
   }
 
   void show_menubar (void)
@@ -1490,20 +1495,20 @@ public:
     return instance_ok () ? instance->do_get_size (idx) : Matrix ();
   }
 
   static Matrix get_size (const graphics_handle& gh)
   {
     return get_size (hnd2idx (gh));
   }
 
-  static void print (const graphics_handle& gh , const int fid,  const std::string& term)
+  static void print (const graphics_handle& gh , const std::string& cmd, const std::string& term)
   {
     if (instance_ok ())
-      instance->do_print (hnd2idx(gh), fid, term);
+      instance->do_print (hnd2idx(gh), cmd, term);
   }
 
   static void uimenu_update (const graphics_handle& figh, const graphics_handle& uimenuh, const int id)
   {
     if (instance_ok ())
       instance->do_uimenu_update (hnd2idx(figh), uimenuh, id);
   }
 
@@ -1629,22 +1634,22 @@ private:
       {
         sz(0) = win->second->w ();
         sz(1) = win->second->h ();
       }
 
     return sz;
   }
 
-  void do_print (int idx, const int fid,  const std::string& term)
+  void do_print (int idx, const std::string& cmd, const std::string& term)
   {
     wm_iterator win;
     if ((win = windows.find (idx)) != windows.end ())
       {
-        win->second->print (fid, term);
+        win->second->print (cmd, term);
       }
   }
 
   void do_uimenu_update (int idx, graphics_handle gh, int id)
   {
     wm_iterator win;
     if ((win = windows.find (idx)) != windows.end ())
       {
@@ -1853,28 +1858,21 @@ public:
   {
     figure_manager::mark_modified (go.get_handle ());
 
     __fltk_redraw__ ();
   }
 
   void print_figure (const graphics_object& go,
                      const std::string& term,
-                     const std::string& file, bool /*mono*/,
+                     const std::string& file_cmd, bool /*mono*/,
                      const std::string& /*debug_file*/) const
   {
-    int fid;
-    std::istringstream istr (file);
-    if (istr >> fid)
-      {
-        figure_manager::print (go.get_handle (), fid, term);
-        redraw_figure (go);
-      }
-    else
-      error ("fltk_graphics_toolkit: filename should be fid");
+    figure_manager::print (go.get_handle (), file_cmd, term);
+    redraw_figure (go);
   }
 
   Matrix get_canvas_size (const graphics_handle& fh) const
   {
     return figure_manager::get_size (fh);
   }
 
   double get_screen_resolution (void) const
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -7615,30 +7615,36 @@ undocumented.\n\
           term = args(0).string_value ();
 
           if (! error_state)
             {
               file = args(1).string_value ();
 
               if (! error_state)
                 {
-                  size_t pos = file.find_last_of (file_ops::dir_sep_chars ());
-
-                  if (pos != std::string::npos)
+                  size_t pos = file.find_first_not_of ("|");
+                  if (pos > 0)
+                    file = file.substr (pos);
+                  else
                     {
-                      std::string dirname = file.substr (0, pos+1);
-
-                      file_stat fs (dirname);
-
-                      if (! (fs && fs.is_dir ()))
+                      pos = file.find_last_of (file_ops::dir_sep_chars ());
+
+                      if (pos != std::string::npos)
                         {
-                          error ("drawnow: nonexistent directory `%s'",
-                                 dirname.c_str ());
-
-                          return retval;
+                          std::string dirname = file.substr (0, pos+1);
+
+                          file_stat fs (dirname);
+
+                          if (! (fs && fs.is_dir ()))
+                            {
+                              error ("drawnow: nonexistent directory `%s'",
+                                     dirname.c_str ());
+
+                              return retval;
+                            }
                         }
                     }
 
                   mono = (args.length () >= 3 ? args(2).bool_value () : false);
 
                   if (! error_state)
                     {
                       debug_file = (args.length () > 3 ? args(3).string_value ()
