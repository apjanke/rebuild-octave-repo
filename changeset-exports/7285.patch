# HG changeset patch
# User jwe
# Date 1197338059 0
#      Tue Dec 11 01:54:19 2007 +0000
# Node ID c8d362c69013b0624bd3ee22ea142171fe5d67e4
# Parent  a239de118fa61f0e4224043c26a5a711395a4042
[project @ 2007-12-11 01:54:19 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,15 +1,16 @@
 2007-12-10  John W. Eaton  <jwe@octave.org>
 
 	* plot/sombrero.m, plot/peaks.m: Use surf instead of mesh.
 
 	* general/issymmetric.m: Use ' instead of .' for compatibility
 	with previous versions of Octave.
 	* general/ishermitian.m: Delete.
+	* general/Makefile.in (SOURCES): Remove ishermitian.m from the list.
 
 	* plot/fplot.m: In N is not specified, increase initial number of
 	points from 3 and 5 to 5 and 8.
 
 	* signal/detrend.m: Move tests here from test/test_signal.m.
 	Loosen tolerance on first test from 10*eps to 20*eps.
 
 	* finance/rate.m: Don't request info from fsolve.
diff --git a/scripts/general/Makefile.in b/scripts/general/Makefile.in
--- a/scripts/general/Makefile.in
+++ b/scripts/general/Makefile.in
@@ -33,17 +33,17 @@ INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 SOURCES = __isequal__.m __splinen__.m accumarray.m arrayfun.m bicubic.m \
   bitcmp.m bitget.m bitset.m blkdiag.m cart2pol.m cart2sph.m cell2mat.m \
   celldisp.m circshift.m common_size.m cplxpair.m cumtrapz.m deal.m del2.m \
   diff.m flipdim.m fliplr.m flipud.m gradient.m ind2sub.m int2str.m interp1.m \
   interp2.m interp3.m interpn.m interpft.m is_duplicate_entry.m isa.m \
-  isdefinite.m isdir.m isequal.m isequalwithequalnans.m ishermitian.m \
+  isdefinite.m isdir.m isequal.m isequalwithequalnans.m \
   isscalar.m issquare.m issymmetric.m isvector.m logical.m logspace.m \
   lookup.m mod.m nargchk.m nextpow2.m nthroot.m num2str.m perror.m \
   pol2cart.m polyarea.m postpad.m prepad.m quadl.m randperm.m rat.m rem.m \
   repmat.m rot90.m rotdim.m shift.m shiftdim.m sortrows.m \
   sph2cart.m strerror.m structfun.m sub2ind.m trapz.m tril.m triu.m
 
 DISTFILES = $(addprefix $(srcdir)/, Makefile.in $(SOURCES))
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2007-12-10  John W. Eaton  <jwe@octave.org>
 
+	* ov-cell.cc (octave_cell::all_strings): Handle empty elements.
+	Handle N-d cell arrays.
+
 	* DLD-FUNCTIONS/fsolve.cc (Ffsolve):
 	For compatibility, return [x, fval, info] instead of [x, info, msg].
  	Move tests here from test/test_nonlin.m.
 
 	* OPERATORS/op-cm-s.cc: Define function for el_mul with
 	DEFNDBINOP_OP, not DEFBINOP_OP.
 
 	* OPERATORS/op-s-cm.cc: Define functions for el_and and el_or
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -337,64 +337,66 @@ octave_cell::list_value (void) const
   return retval;
 }
 
 string_vector
 octave_cell::all_strings (bool pad) const
 {
   string_vector retval;
 
-  octave_idx_type nr = rows ();
-  octave_idx_type nc = columns ();
+  octave_idx_type nel = numel ();
 
   int n_elts = 0;
 
   octave_idx_type max_len = 0;
 
-  for (octave_idx_type j = 0; j < nc; j++)
+  for (octave_idx_type i = 0; i < nel; i++)
     {
-      for (octave_idx_type i = 0; i < nr; i++)
-	{
-	  string_vector s = matrix(i,j).all_strings ();
+      string_vector s = matrix(i).all_strings ();
+
+      if (error_state)
+	return retval;
 
-	  if (error_state)
-	    return retval;
+      octave_idx_type s_len = s.length ();
 
-	  n_elts += s.length ();
+      n_elts += s_len ? s_len : 1;
 
-	  octave_idx_type s_max_len = s.max_length ();
+      octave_idx_type s_max_len = s.max_length ();
 
-	  if (s_max_len > max_len)
-	    max_len = s_max_len;
-	}
+      if (s_max_len > max_len)
+	max_len = s_max_len;
     }
 
   retval.resize (n_elts);
 
   octave_idx_type k = 0;
 
-  for (octave_idx_type j = 0; j < nc; j++)
+  for (octave_idx_type i = 0; i < nel; i++)
     {
-      for (octave_idx_type i = 0; i < nr; i++)
-	{
-	  string_vector s = matrix(i,j).all_strings ();
+      string_vector s = matrix(i).all_strings ();
+
+      octave_idx_type s_len = s.length ();
 
-	  int n = s.length ();
-
-	  for (octave_idx_type ii = 0; ii < n; ii++)
+      if (s_len)
+	{
+	  for (octave_idx_type j = 0; j < s_len; j++)
 	    {
-	      std::string t = s[ii];
+	      std::string t = s[j];
 	      int t_len = t.length ();
 
 	      if (pad && max_len > t_len)
 		t += std::string (max_len - t_len, ' ');
 
 	      retval[k++] = t;
 	    }
 	}
+      else if (pad)
+	retval[k++] = std::string (max_len, ' ');
+      else
+	retval[k++] = std::string ();
     }
 
   return retval;
 }
 
 bool
 octave_cell::print_as_scalar (void) const
 {
