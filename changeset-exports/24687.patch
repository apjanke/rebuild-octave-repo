# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1517437371 -3600
#      Wed Jan 31 23:22:51 2018 +0100
# Node ID 8b935067a257fe7c7e120295b577c942f67144bd
# Parent  21e97b50989d44126e75fa159124dcd7f7850f94
Allow printing without updating qt visible or invisible figures (bug #52940).

* graphics.in.h (figure::properties::__gl_window__, __printing__): Add hidden
properties.

* Figure.cc (Figure::update): Return if __printing__ is "on".  Set
  __gl_window__ "on" if the figure has been shown at least once.

* Backend.cc (Backend::print_figure): Allow invisible figures to be printed.

* print.m: Set and restore "__printing__" property to prevent figure window
  updates.

* __opengl_print__.m: Allow qt invisible figures to be printed without osmesa
  if they have been visible at least once.

diff --git a/libgui/graphics/Backend.cc b/libgui/graphics/Backend.cc
--- a/libgui/graphics/Backend.cc
+++ b/libgui/graphics/Backend.cc
@@ -180,24 +180,21 @@ namespace QtHandles
   }
 
   void
   Backend::print_figure (const graphics_object& go,
                          const std::string& term,
                          const std::string& file_cmd,
                          const std::string& /*debug_file*/) const
   {
-    if (go.get_properties ().is_visible ())
-      {
-        ObjectProxy *proxy = toolkitObjectProxy (go);
+    ObjectProxy *proxy = toolkitObjectProxy (go);
 
-        if (proxy)
-          proxy->print (QString::fromStdString (file_cmd),
-                        QString::fromStdString (term));
-      }
+    if (proxy)
+      proxy->print (QString::fromStdString (file_cmd),
+                    QString::fromStdString (term));
   }
 
   uint8NDArray
   Backend::get_pixels (const graphics_object& go) const
   {
     uint8NDArray retval;
 
     if (go.get_properties ().is_visible () && go.isa ("figure"))
diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -427,20 +427,24 @@ namespace QtHandles
 
   void
   Figure::update (int pId)
   {
     if (m_blockUpdates)
       return;
 
     figure::properties& fp = properties<figure> ();
+
+    if (fp.is___printing__ ())
+      return;
+    
     QMainWindow *win = qWidget<QMainWindow> ();
 
     m_blockUpdates = true;
-
+    
     switch (pId)
       {
       case figure::properties::ID_POSITION:
         {
           m_innerRect = boundingBoxToRect (fp.get_boundingbox (true));
           int toffset = 0;
           int boffset = 0;
 
@@ -460,17 +464,24 @@ namespace QtHandles
 
       case figure::properties::ID_NAME:
       case figure::properties::ID_NUMBERTITLE:
         win->setWindowTitle (Utils::fromStdString (fp.get_title ()));
         break;
 
       case figure::properties::ID_VISIBLE:
         if (fp.is_visible ())
-          QTimer::singleShot (0, win, SLOT (show ()));
+          {
+            QTimer::singleShot (0, win, SLOT (show ()));
+            if (! fp.is___gl_window__ ())
+              {
+                gh_manager::auto_lock lock;
+                fp.set ("__gl_window__", "on");
+              }
+          }                
         else
           win->hide ();
         break;
 
       case figure::properties::ID_TOOLBAR:
         if (fp.toolbar_is ("none"))
           showFigureToolBar (false);
         else if (fp.toolbar_is ("figure"))
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -1584,17 +1584,17 @@ class bool_property : public radio_prope
 public:
   bool_property (const std::string& nm, const graphics_handle& h,
                  bool val)
     : radio_property (nm, h, radio_values (val ? "{on}|off" : "on|{off}"))
   { }
 
   bool_property (const std::string& nm, const graphics_handle& h,
                  const char *val)
-    : radio_property (nm, h, radio_values (std::string (val) == "on" ? 
+    : radio_property (nm, h, radio_values (std::string (val) == "on" ?
                                            "{on}|off" : "on|{off}"), val)
   { }
 
   bool_property (const bool_property& p)
     : radio_property (p) { }
 
   bool is_on (void) const { return is ("on"); }
 
@@ -3154,29 +3154,31 @@ public:
       callback_property windowbuttondownfcn , Matrix ()
       callback_property windowbuttonmotionfcn , Matrix ()
       callback_property windowbuttonupfcn , Matrix ()
       callback_property windowkeypressfcn , Matrix ()
       callback_property windowkeyreleasefcn , Matrix ()
       callback_property windowscrollwheelfcn , Matrix ()
       radio_property windowstyle , "{normal}|modal|docked"
 
-      // Overridden base property  
+      // Overridden base property
       // Property is not implemented for figures.
       // Hide it and set it to a default value that works.
       radio_property pickableparts h , "{visible}"
 
       // Octave-specific properties
       mutable string_property __gl_extensions__ hr , ""
       mutable string_property __gl_renderer__ hr , ""
       mutable string_property __gl_vendor__ hr , ""
       mutable string_property __gl_version__ hr , ""
+      bool_property __gl_window__ h , "off"
       string_property __graphics_toolkit__ hs , default_graphics_toolkit ()
       any_property __guidata__ h , Matrix ()
       radio_property __mouse_mode__ hS , "{none}|pan|rotate|select|text|zoom"
+      bool_property __printing__ h , "off"
       any_property __pan_mode__ h , Matrix ()
       any_property __plot_stream__ h , Matrix ()
       any_property __rotate_mode__ h , Matrix ()
       any_property __zoom_mode__ h , Matrix ()
 
       // Obsolete properties: doublebuffer, mincolormap, wvisual, wvisualmode,
       //                      xdisplay, xvisual, xvisualmode
       // FIXME: Remove in version 4.6
diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -422,20 +422,23 @@ function print (varargin)
     props(end).name = "units";
     props(end).value = {get(opts.figure, "units")};
     set (opts.figure, "units", "pixels");
     nfig += 1;
 
     ## graphics toolkit translates figure position to eps bbox (points)
     fpos = get (opts.figure, "position");
     props(end+1).h = opts.figure;
+    props(end).name = "__printing__";
+    props(end).value = {"off"};
+    props(end+1).h = opts.figure;
     props(end).name = "position";
     props(end).value = {fpos};
     fpos(3:4) = opts.canvas_size;
-    set (opts.figure, "position", fpos);
+    set (opts.figure, "__printing__", "on", "position", fpos);
     nfig += 1;
 
     ## Implement InvertHardCopy option
     do_hardcopy = strcmp (get (opts.figure, "inverthardcopy"), "on");
 
     if (do_hardcopy)
       ## Set figure background to white.
       props(end+1).h = opts.figure;
diff --git a/scripts/plot/util/private/__opengl_print__.m b/scripts/plot/util/private/__opengl_print__.m
--- a/scripts/plot/util/private/__opengl_print__.m
+++ b/scripts/plot/util/private/__opengl_print__.m
@@ -145,17 +145,19 @@ function opts = __opengl_print__ (opts)
 
   opts.pipeline = pipeline;
 
   for n = 1:numel (pipeline)
     if (opts.debug)
       fprintf ("opengl-pipeline: '%s'\n", pipeline{n});
     endif
 
-    if (strcmp (get (opts.figure, "visible"), "on"))
+    if (strcmp (get (opts.figure, "visible"), "on")
+        || (strcmp (get (opts.figure, "__graphics_toolkit__"), "qt")
+            && strcmp (get (opts.figure, "__gl_window__"), "on")))
       ## Use toolkits "print_figure" method
       drawnow (gl2ps_device{n}, ['|' pipeline{n}]);
     else
       ## Use OpenGL offscreen rendering with OSMesa
       __osmesa_print__ (opts.figure, ['|' pipeline{n}], gl2ps_device{n});
     endif
   endfor
 
