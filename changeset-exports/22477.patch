# HG changeset patch
# User Julien Bect <julien.bect@centralesupelec.fr>
# Date 1472417922 -7200
#      Sun Aug 28 22:58:42 2016 +0200
# Node ID 6bf1cbb90705070cea9f83821cd16bc2cd7e9c08
# Parent  57a6e657311d6c8198bb36b39009ed0ae9a44f3e
Remove unnecessary initializations in float_value and double_value methods

* ov-base-diag.cc, ov-bool-mat.cc, ov-bool-sparse.cc, ov-ch-mat.cc,
  ov-complex.cc, ov-cx-mat.cc, ov-cx-sparse.cc, ov-flt-complex.cc,
  ov-flt-cx-mat.cc, ov-flt-re-mat.cc, ov-perm.cc, ov-range.cc, ov-re-mat.cc:
Remove unnecessary initializations and declarations in float_value and
double_value methods.

diff --git a/libinterp/octave-value/ov-base-diag.cc b/libinterp/octave-value/ov-base-diag.cc
--- a/libinterp/octave-value/ov-base-diag.cc
+++ b/libinterp/octave-value/ov-base-diag.cc
@@ -295,56 +295,48 @@ template <typename T> inline T helper_ge
 //        are not necessary.
 template <typename T> inline T helper_iscomplex (T) { return false; }
 template <typename T> inline T helper_iscomplex (std::complex<T>) { return true; }
 
 template <typename DMT, typename MT>
 double
 octave_base_diag<DMT, MT>::double_value (bool force_conversion) const
 {
-  double retval = lo_ieee_nan_value ();
   typedef typename DMT::element_type el_type;
 
   if (helper_iscomplex (el_type ()) && ! force_conversion)
     warn_implicit_conversion ("Octave:imag-to-real",
                               "complex matrix", "real scalar");
 
   if (is_empty ())
     err_invalid_conversion (type_name (), "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             type_name (), "real scalar");
 
-  retval = helper_getreal (el_type (matrix (0, 0)));
-
-  return retval;
+  return helper_getreal (el_type (matrix (0, 0)));
 }
 
 template <typename DMT, typename MT>
 float
 octave_base_diag<DMT, MT>::float_value (bool force_conversion) const
 {
-  float retval = lo_ieee_float_nan_value ();
   typedef typename DMT::element_type el_type;
 
   if (helper_iscomplex (el_type ()) && ! force_conversion)
     warn_implicit_conversion ("Octave:imag-to-real",
                               "complex matrix", "real scalar");
 
-  if (numel () > 0)
-    {
-      warn_implicit_conversion ("Octave:array-to-scalar",
-                                type_name (), "real scalar");
-
-      retval = helper_getreal (el_type (matrix (0, 0)));
-    }
-  else
+  if (! (numel () > 0))
     err_invalid_conversion (type_name (), "real scalar");
 
-  return retval;
+  warn_implicit_conversion ("Octave:array-to-scalar",
+                            type_name (), "real scalar");
+
+  return helper_getreal (el_type (matrix (0, 0)));
 }
 
 template <typename DMT, typename MT>
 Complex
 octave_base_diag<DMT, MT>::complex_value (bool) const
 {
   double tmp = lo_ieee_nan_value ();
 
diff --git a/libinterp/octave-value/ov-bool-mat.cc b/libinterp/octave-value/ov-bool-mat.cc
--- a/libinterp/octave-value/ov-bool-mat.cc
+++ b/libinterp/octave-value/ov-bool-mat.cc
@@ -99,43 +99,35 @@ octave_bool_matrix::try_narrowing_conver
     }
 
   return retval;
 }
 
 double
 octave_bool_matrix::double_value (bool) const
 {
-  double retval = lo_ieee_nan_value ();
-
   if (rows () == 0 || columns () == 0)
     err_invalid_conversion ("bool matrix", "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "bool matrix", "real scalar");
 
-  retval = matrix(0, 0);
-
-  return retval;
+  return matrix(0, 0);
 }
 
 float
 octave_bool_matrix::float_value (bool) const
 {
-  float retval = lo_ieee_float_nan_value ();
-
   if (rows () == 0 || columns () == 0)
     err_invalid_conversion ("bool matrix", "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "bool matrix", "real scalar");
 
-  retval = matrix(0, 0);
-
-  return retval;
+  return matrix(0, 0);
 }
 
 Complex
 octave_bool_matrix::complex_value (bool) const
 {
   double tmp = lo_ieee_nan_value ();
 
   Complex retval (tmp, tmp);
diff --git a/libinterp/octave-value/ov-bool-sparse.cc b/libinterp/octave-value/ov-bool-sparse.cc
--- a/libinterp/octave-value/ov-bool-sparse.cc
+++ b/libinterp/octave-value/ov-bool-sparse.cc
@@ -95,28 +95,24 @@ octave_sparse_bool_matrix::try_narrowing
     }
 
   return retval;
 }
 
 double
 octave_sparse_bool_matrix::double_value (bool) const
 {
-  double retval = lo_ieee_nan_value ();
-
   if (is_empty ())
     err_invalid_conversion ("bool sparse matrix", "real scalar");
 
   if (numel () > 1)
     warn_implicit_conversion ("Octave:array-to-scalar",
                               "bool sparse matrix", "real scalar");
 
-  retval = matrix(0, 0);
-
-  return retval;
+  return matrix(0, 0);
 }
 
 Complex
 octave_sparse_bool_matrix::complex_value (bool) const
 {
   double tmp = lo_ieee_nan_value ();
 
   Complex retval (tmp, tmp);
diff --git a/libinterp/octave-value/ov-ch-mat.cc b/libinterp/octave-value/ov-ch-mat.cc
--- a/libinterp/octave-value/ov-ch-mat.cc
+++ b/libinterp/octave-value/ov-ch-mat.cc
@@ -60,43 +60,35 @@ octave_char_matrix::index_vector (bool /
     return idx_vector (':');
   else
     return idx_vector (array_value (true));
 }
 
 double
 octave_char_matrix::double_value (bool) const
 {
-  double retval = lo_ieee_nan_value ();
-
   if (rows () == 0 || columns () == 0)
     err_invalid_conversion ("character matrix", "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "character matrix", "real scalar");
 
-  retval = static_cast<unsigned char> (matrix(0, 0));
-
-  return retval;
+  return static_cast<unsigned char> (matrix(0, 0));
 }
 
 float
 octave_char_matrix::float_value (bool) const
 {
-  float retval = lo_ieee_float_nan_value ();
-
   if (rows () == 0 && columns () == 0)
     err_invalid_conversion ("character matrix", "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "character matrix", "real scalar");
 
-  retval = static_cast<unsigned char> (matrix(0, 0));
-
-  return retval;
+  return static_cast<unsigned char> (matrix(0, 0));
 }
 
 octave_int64
 octave_char_matrix::int64_scalar_value () const
 {
   octave_int64 retval = 0;
 
   if (rows () == 0 || columns () == 0)
diff --git a/libinterp/octave-value/ov-complex.cc b/libinterp/octave-value/ov-complex.cc
--- a/libinterp/octave-value/ov-complex.cc
+++ b/libinterp/octave-value/ov-complex.cc
@@ -143,39 +143,31 @@ octave_complex::index_vector (bool) cons
   octave::complex_index_exception e (buf.str ());
 
   throw e;
 }
 
 double
 octave_complex::double_value (bool force_conversion) const
 {
-  double retval;
-
   if (! force_conversion)
     warn_implicit_conversion ("Octave:imag-to-real",
                               "complex scalar", "real scalar");
 
-  retval = scalar.real ();
-
-  return retval;
+  return scalar.real ();
 }
 
 float
 octave_complex::float_value (bool force_conversion) const
 {
-  float retval;
-
   if (! force_conversion)
     warn_implicit_conversion ("Octave:imag-to-real",
                               "complex scalar", "real scalar");
 
-  retval = scalar.real ();
-
-  return retval;
+  return scalar.real ();
 }
 
 Matrix
 octave_complex::matrix_value (bool force_conversion) const
 {
   Matrix retval;
 
   if (! force_conversion)
diff --git a/libinterp/octave-value/ov-cx-mat.cc b/libinterp/octave-value/ov-cx-mat.cc
--- a/libinterp/octave-value/ov-cx-mat.cc
+++ b/libinterp/octave-value/ov-cx-mat.cc
@@ -100,51 +100,43 @@ octave_complex_matrix::try_narrowing_con
     retval = new octave_matrix (::real (matrix));
 
   return retval;
 }
 
 double
 octave_complex_matrix::double_value (bool force_conversion) const
 {
-  double retval = lo_ieee_nan_value ();
-
   if (! force_conversion)
     warn_implicit_conversion ("Octave:imag-to-real",
                               "complex matrix", "real scalar");
 
   if (rows () == 0 || columns () == 0)
     err_invalid_conversion ("complex matrix", "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "complex matrix", "real scalar");
 
-  retval = octave::math::real (matrix(0, 0));
-
-  return retval;
+  return octave::math::real (matrix(0, 0));
 }
 
 float
 octave_complex_matrix::float_value (bool force_conversion) const
 {
-  float retval = lo_ieee_float_nan_value ();
-
   if (! force_conversion)
     warn_implicit_conversion ("Octave:imag-to-real",
                               "complex matrix", "real scalar");
 
   if (rows () == 0 || columns () == 0)
     err_invalid_conversion ("complex matrix", "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "complex matrix", "real scalar");
 
-  retval = octave::math::real (matrix(0, 0));
-
-  return retval;
+  return octave::math::real (matrix(0, 0));
 }
 
 NDArray
 octave_complex_matrix::array_value (bool force_conversion) const
 {
   NDArray retval;
 
   if (! force_conversion)
diff --git a/libinterp/octave-value/ov-cx-sparse.cc b/libinterp/octave-value/ov-cx-sparse.cc
--- a/libinterp/octave-value/ov-cx-sparse.cc
+++ b/libinterp/octave-value/ov-cx-sparse.cc
@@ -101,33 +101,29 @@ octave_sparse_complex_matrix::try_narrow
     }
 
   return retval;
 }
 
 double
 octave_sparse_complex_matrix::double_value (bool force_conversion) const
 {
-  double retval = lo_ieee_nan_value ();
-
   if (! force_conversion)
     warn_implicit_conversion ("Octave:imag-to-real",
                               "complex sparse matrix", "real scalar");
 
   // FIXME: maybe this should be a function, valid_as_scalar()
   if (is_empty ())
     err_invalid_conversion ("complex sparse matrix", "real scalar");
 
   if (numel () > 1)
     warn_implicit_conversion ("Octave:array-to-scalar",
                               "complex sparse matrix", "real scalar");
 
-  retval = octave::math::real (matrix(0, 0));
-
-  return retval;
+  return octave::math::real (matrix(0, 0));
 }
 
 Matrix
 octave_sparse_complex_matrix::matrix_value (bool force_conversion) const
 {
   Matrix retval;
 
   if (! force_conversion)
diff --git a/libinterp/octave-value/ov-flt-complex.cc b/libinterp/octave-value/ov-flt-complex.cc
--- a/libinterp/octave-value/ov-flt-complex.cc
+++ b/libinterp/octave-value/ov-flt-complex.cc
@@ -89,39 +89,31 @@ octave_float_complex::do_index_op (const
                       float_complex_matrix_value ()));
 
   return tmp.do_index_op (idx, resize_ok);
 }
 
 double
 octave_float_complex::double_value (bool force_conversion) const
 {
-  double retval;
-
   if (! force_conversion)
     warn_implicit_conversion ("Octave:imag-to-real",
                               "complex scalar", "real scalar");
 
-  retval = scalar.real ();
-
-  return retval;
+  return scalar.real ();
 }
 
 float
 octave_float_complex::float_value (bool force_conversion) const
 {
-  float retval;
-
   if (! force_conversion)
     warn_implicit_conversion ("Octave:imag-to-real",
                               "complex scalar", "real scalar");
 
-  retval = scalar.real ();
-
-  return retval;
+  return scalar.real ();
 }
 
 Matrix
 octave_float_complex::matrix_value (bool force_conversion) const
 {
   Matrix retval;
 
   if (! force_conversion)
diff --git a/libinterp/octave-value/ov-flt-cx-mat.cc b/libinterp/octave-value/ov-flt-cx-mat.cc
--- a/libinterp/octave-value/ov-flt-cx-mat.cc
+++ b/libinterp/octave-value/ov-flt-cx-mat.cc
@@ -88,51 +88,43 @@ octave_float_complex_matrix::try_narrowi
     retval = new octave_float_matrix (::real (matrix));
 
   return retval;
 }
 
 double
 octave_float_complex_matrix::double_value (bool force_conversion) const
 {
-  double retval = lo_ieee_nan_value ();
-
   if (! force_conversion)
     warn_implicit_conversion ("Octave:imag-to-real",
                               "complex matrix", "real scalar");
 
   if (rows () == 0 || columns () == 0)
     err_invalid_conversion ("complex matrix", "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "complex matrix", "real scalar");
 
-  retval = octave::math::real (matrix(0, 0));
-
-  return retval;
+  return octave::math::real (matrix(0, 0));
 }
 
 float
 octave_float_complex_matrix::float_value (bool force_conversion) const
 {
-  float retval = lo_ieee_float_nan_value ();
-
   if (! force_conversion)
     warn_implicit_conversion ("Octave:imag-to-real",
                               "complex matrix", "real scalar");
 
   if (rows () == 0 || columns () == 0)
     err_invalid_conversion ("complex matrix", "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "complex matrix", "real scalar");
 
-  retval = octave::math::real (matrix(0, 0));
-
-  return retval;
+  return octave::math::real (matrix(0, 0));
 }
 
 Matrix
 octave_float_complex_matrix::matrix_value (bool force_conversion) const
 {
   Matrix retval;
 
   if (! force_conversion)
diff --git a/libinterp/octave-value/ov-flt-re-mat.cc b/libinterp/octave-value/ov-flt-re-mat.cc
--- a/libinterp/octave-value/ov-flt-re-mat.cc
+++ b/libinterp/octave-value/ov-flt-re-mat.cc
@@ -94,43 +94,35 @@ octave_float_matrix::try_narrowing_conve
     retval = new octave_float_scalar (matrix (0));
 
   return retval;
 }
 
 double
 octave_float_matrix::double_value (bool) const
 {
-  double retval = lo_ieee_nan_value ();
-
   if (is_empty ())
     err_invalid_conversion ("real matrix", "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "real matrix", "real scalar");
 
-  retval = matrix(0, 0);
-
-  return retval;
+  return matrix(0, 0);
 }
 
 float
 octave_float_matrix::float_value (bool) const
 {
-  float retval = lo_ieee_float_nan_value ();
-
   if (is_empty ())
     err_invalid_conversion ("real matrix", "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "real matrix", "real scalar");
 
-  retval = matrix(0, 0);
-
-  return retval;
+  return matrix(0, 0);
 }
 
 // FIXME
 
 Matrix
 octave_float_matrix::matrix_value (bool) const
 {
   return Matrix (FloatMatrix (matrix));
diff --git a/libinterp/octave-value/ov-perm.cc b/libinterp/octave-value/ov-perm.cc
--- a/libinterp/octave-value/ov-perm.cc
+++ b/libinterp/octave-value/ov-perm.cc
@@ -143,43 +143,35 @@ octave_perm_matrix::is_true (void) const
     }
   else
     return dims ().numel ();    // 1x1 is [1] == true, 0x0 == false.
 }
 
 double
 octave_perm_matrix::double_value (bool) const
 {
-  double retval = lo_ieee_nan_value ();
-
   if (is_empty ())
     err_invalid_conversion (type_name (), "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             type_name (), "real scalar");
 
-  retval = matrix(0, 0);
-
-  return retval;
+  return matrix(0, 0);
 }
 
 float
 octave_perm_matrix::float_value (bool) const
 {
-  float retval = lo_ieee_float_nan_value ();
-
   if (is_empty ())
     err_invalid_conversion (type_name (), "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             type_name (), "real scalar");
 
-  retval = matrix(0, 0);
-
-  return retval;
+  return matrix(0, 0);
 }
 
 Complex
 octave_perm_matrix::complex_value (bool) const
 {
   double tmp = lo_ieee_nan_value ();
 
   Complex retval (tmp, tmp);
diff --git a/libinterp/octave-value/ov-range.cc b/libinterp/octave-value/ov-range.cc
--- a/libinterp/octave-value/ov-range.cc
+++ b/libinterp/octave-value/ov-range.cc
@@ -185,47 +185,39 @@ octave_range::index_vector (bool require
           return octave_value (matrix_value ()).round ().index_vector ();
         }
     }
 }
 
 double
 octave_range::double_value (bool) const
 {
-  double retval = lo_ieee_nan_value ();
-
   octave_idx_type nel = range.numel ();
 
   if (nel == 0)
     err_invalid_conversion ("range", "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "range", "real scalar");
 
-  retval = range.base ();
-
-  return retval;
+  return range.base ();
 }
 
 float
 octave_range::float_value (bool) const
 {
-  float retval = lo_ieee_float_nan_value ();
-
   octave_idx_type nel = range.numel ();
 
   if (nel == 0)
     err_invalid_conversion ("range", "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "range", "real scalar");
 
-  retval = range.base ();
-
-  return retval;
+  return range.base ();
 }
 
 charNDArray
 octave_range::char_array_value (bool) const
 {
   const Matrix matrix = range.matrix_value ();
   charNDArray retval (dims ());
 
diff --git a/libinterp/octave-value/ov-re-mat.cc b/libinterp/octave-value/ov-re-mat.cc
--- a/libinterp/octave-value/ov-re-mat.cc
+++ b/libinterp/octave-value/ov-re-mat.cc
@@ -109,43 +109,35 @@ octave_matrix::try_narrowing_conversion 
     retval = new octave_scalar (matrix (0));
 
   return retval;
 }
 
 double
 octave_matrix::double_value (bool) const
 {
-  double retval = lo_ieee_nan_value ();
-
   if (is_empty ())
     err_invalid_conversion ("real matrix", "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "real matrix", "real scalar");
 
-  retval = matrix(0, 0);
-
-  return retval;
+  return matrix(0, 0);
 }
 
 float
 octave_matrix::float_value (bool) const
 {
-  float retval = lo_ieee_float_nan_value ();
-
   if (is_empty ())
     err_invalid_conversion ("real matrix", "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "real matrix", "real scalar");
 
-  retval = matrix(0, 0);
-
-  return retval;
+  return matrix(0, 0);
 }
 
 // FIXME
 
 Matrix
 octave_matrix::matrix_value (bool) const
 {
   return Matrix (matrix);
diff --git a/libinterp/octave-value/ov-re-sparse.cc b/libinterp/octave-value/ov-re-sparse.cc
--- a/libinterp/octave-value/ov-re-sparse.cc
+++ b/libinterp/octave-value/ov-re-sparse.cc
@@ -90,28 +90,24 @@ octave_sparse_matrix::try_narrowing_conv
     }
 
   return retval;
 }
 
 double
 octave_sparse_matrix::double_value (bool) const
 {
-  double retval = lo_ieee_nan_value ();
-
   if (is_empty ())
     err_invalid_conversion ("real sparse matrix", "real scalar");
 
   if (numel () > 1)
     warn_implicit_conversion ("Octave:array-to-scalar",
                               "real sparse matrix", "real scalar");
 
-  retval = matrix(0, 0);
-
-  return retval;
+  return matrix(0, 0);
 }
 
 Complex
 octave_sparse_matrix::complex_value (bool) const
 {
   double tmp = lo_ieee_nan_value ();
 
   Complex retval (tmp, tmp);
