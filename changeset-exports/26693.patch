# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1549563139 0
#      Thu Feb 07 18:12:19 2019 +0000
# Node ID 1da1d9e60bf3e3bb841f50d45eede3b934bbe28f
# Parent  f5d1e3fc61fc66964c44d60a4be1033b8b7bf934
pass reference to interpreter to make_fcn_handle function

* ov-fcn-handle.h, ov-fcn-handle.cc (make_fcn_handle): Move inside
octave namespace.  Accept reference to interpreter object as
argument.  Change all uses.
(octave_fcn_binder::maybe_binder): Accept reference to interpreter as
argument instead of reference to evaluator.  Change all uses.

diff --git a/libinterp/corefcn/ls-mat5.cc b/libinterp/corefcn/ls-mat5.cc
--- a/libinterp/corefcn/ls-mat5.cc
+++ b/libinterp/corefcn/ls-mat5.cc
@@ -856,17 +856,17 @@ read_mat5_binary_element (std::istream& 
         std::string ftype = m1.contents ("type").string_value ();
         std::string fname = m1.contents ("function").string_value ();
         std::string fpath = m1.contents ("file").string_value ();
 
         if (ftype == "simple" || ftype == "scopedfunction")
           {
             if (fpath.empty ())
               // We have a builtin function
-              tc = make_fcn_handle (fname);
+              tc = make_fcn_handle (interp, fname);
             else
               {
                 std::string mroot =
                   m0.contents ("matlabroot").string_value ();
 
                 if ((fpath.length () >= mroot.length ())
                     && fpath.substr (0, mroot.length ()) == mroot
                     && octave::config::octave_exec_home () != mroot)
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -1419,207 +1419,214 @@ octave_fcn_handle::print_raw (std::ostre
         }
     }
 
   if (! printed)
     octave_print_internal (os, '@' + nm, pr_as_read_syntax,
                            current_print_indent_level ());
 }
 
-octave_value
-make_fcn_handle (const std::string& nm)
+namespace octave
 {
-  octave_value retval;
+  // Hmm, should this function be a member of the interpreter class,
+  // possibly forwarded to an actual implementation in the
+  // tree_evaluator class?
 
-  // Bow to the god of compatibility.
+  octave_value
+  make_fcn_handle (interpreter& interp, const std::string& nm)
+  {
+    octave_value retval;
 
-  // FIXME: it seems ugly to put this here, but there is no single
-  // function in the parser that converts from the operator name to
-  // the corresponding function name.  At least try to do it without N
-  // string compares.
+    // Bow to the god of compatibility.
 
-  std::string tnm = nm;
+    // FIXME: it seems ugly to put this here, but there is no single
+    // function in the parser that converts from the operator name to
+    // the corresponding function name.  At least try to do it without N
+    // string compares.
 
-  size_t len = nm.length ();
+    std::string tnm = nm;
+
+    size_t len = nm.length ();
 
-  if (len == 3 && nm == ".**")
-    tnm = "power";
-  else if (len == 2)
-    {
-      if (nm[0] == '.')
-        {
-          switch (nm[1])
-            {
-            case '\'':
-              tnm = "transpose";
-              break;
+    if (len == 3 && nm == ".**")
+      tnm = "power";
+    else if (len == 2)
+      {
+        if (nm[0] == '.')
+          {
+            switch (nm[1])
+              {
+              case '\'':
+                tnm = "transpose";
+                break;
 
-            case '+':
-              tnm = "plus";
-              break;
-
-            case '-':
-              tnm = "minus";
-              break;
+              case '+':
+                tnm = "plus";
+                break;
 
-            case '*':
-              tnm = "times";
-              break;
+              case '-':
+                tnm = "minus";
+                break;
 
-            case '/':
-              tnm = "rdivide";
-              break;
+              case '*':
+                tnm = "times";
+                break;
 
-            case '^':
-              tnm = "power";
-              break;
+              case '/':
+                tnm = "rdivide";
+                break;
+
+              case '^':
+                tnm = "power";
+                break;
 
-            case '\\':
-              tnm = "ldivide";
-              break;
-            }
-        }
-      else if (nm[1] == '=')
-        {
-          switch (nm[0])
-            {
-            case '<':
-              tnm = "le";
-              break;
+              case '\\':
+                tnm = "ldivide";
+                break;
+              }
+          }
+        else if (nm[1] == '=')
+          {
+            switch (nm[0])
+              {
+              case '<':
+                tnm = "le";
+                break;
 
-            case '=':
-              tnm = "eq";
-              break;
-
-            case '>':
-              tnm = "ge";
-              break;
+              case '=':
+                tnm = "eq";
+                break;
 
-            case '~':
-            case '!':
-              tnm = "ne";
-              break;
-            }
-        }
-      else if (nm == "**")
-        tnm = "mpower";
-    }
-  else if (len == 1)
-    {
-      switch (nm[0])
-        {
-        case '~':
-        case '!':
-          tnm = "not";
-          break;
+              case '>':
+                tnm = "ge";
+                break;
 
-        case '\'':
-          tnm = "ctranspose";
-          break;
+              case '~':
+              case '!':
+                tnm = "ne";
+                break;
+              }
+          }
+        else if (nm == "**")
+          tnm = "mpower";
+      }
+    else if (len == 1)
+      {
+        switch (nm[0])
+          {
+          case '~':
+          case '!':
+            tnm = "not";
+            break;
 
-        case '+':
-          tnm = "plus";
-          break;
+          case '\'':
+            tnm = "ctranspose";
+            break;
 
-        case '-':
-          tnm = "minus";
-          break;
+          case '+':
+            tnm = "plus";
+            break;
 
-        case '*':
-          tnm = "mtimes";
-          break;
+          case '-':
+            tnm = "minus";
+            break;
+
+          case '*':
+            tnm = "mtimes";
+            break;
 
-        case '/':
-          tnm = "mrdivide";
-          break;
+          case '/':
+            tnm = "mrdivide";
+            break;
 
-        case '^':
-          tnm = "mpower";
-          break;
+          case '^':
+            tnm = "mpower";
+            break;
 
-        case '\\':
-          tnm = "mldivide";
-          break;
+          case '\\':
+            tnm = "mldivide";
+            break;
 
-        case '<':
-          tnm = "lt";
-          break;
+          case '<':
+            tnm = "lt";
+            break;
 
-        case '>':
-          tnm = "gt";
-          break;
+          case '>':
+            tnm = "gt";
+            break;
 
-        case '&':
-          tnm = "and";
-          break;
+          case '&':
+            tnm = "and";
+            break;
 
-        case '|':
-          tnm = "or";
-          break;
-        }
-    }
+          case '|':
+            tnm = "or";
+            break;
+          }
+      }
 
-  octave::symbol_table& symtab = octave::__get_symbol_table__ ("make_fcn_handle");
+    octave::symbol_table& symtab = interp.get_symbol_table ();
 
-  octave_value f = symtab.find_function (tnm, octave_value_list ());
+    octave_value f = symtab.find_function (tnm, octave_value_list ());
 
-  octave_function *fptr = f.function_value (true);
+    octave_function *fptr = f.function_value (true);
 
-  // Here we are just looking to see if FCN is a method or constructor
-  // for any class.
-  if (fptr && (fptr->is_subfunction () || fptr->is_private_function ()
-               || fptr->is_class_constructor ()
-               || fptr->is_classdef_constructor ()))
-    {
-      // Locally visible function.
-      retval = octave_value (new octave_fcn_handle (f, tnm));
-    }
-  else
-    {
-      octave::load_path& lp = octave::__get_load_path__ ("make_fcn_handle");
+    // Here we are just looking to see if FCN is a method or constructor
+    // for any class.
+    if (fptr && (fptr->is_subfunction () || fptr->is_private_function ()
+                 || fptr->is_class_constructor ()
+                 || fptr->is_classdef_constructor ()))
+      {
+        // Locally visible function.
+        retval = octave_value (new octave_fcn_handle (f, tnm));
+      }
+    else
+      {
+        octave::load_path& lp = interp.get_load_path ();
 
-      // Globally visible (or no match yet).  Query overloads.
-      std::list<std::string> classes = lp.overloads (tnm);
-      bool any_match = fptr != nullptr || classes.size () > 0;
-      if (! any_match)
-        {
-          // No match found, try updating load_path and query classes again.
-          lp.update ();
-          classes = lp.overloads (tnm);
-          any_match = classes.size () > 0;
-        }
+        // Globally visible (or no match yet).  Query overloads.
+        std::list<std::string> classes = lp.overloads (tnm);
+        bool any_match = fptr != nullptr || classes.size () > 0;
+        if (! any_match)
+          {
+            // No match found, try updating load_path and query classes again.
+            lp.update ();
+            classes = lp.overloads (tnm);
+            any_match = classes.size () > 0;
+          }
+
+        if (! any_match)
+          error ("@%s: no function and no method found", tnm.c_str ());
 
-      if (! any_match)
-        error ("@%s: no function and no method found", tnm.c_str ());
+        octave_fcn_handle *fh = new octave_fcn_handle (f, tnm);
+        retval = fh;
 
-      octave_fcn_handle *fh = new octave_fcn_handle (f, tnm);
-      retval = fh;
-
-      for (auto& cls : classes)
-        {
-          std::string class_name = cls;
-          octave_value fmeth = symtab.find_method (tnm, class_name);
+        for (auto& cls : classes)
+          {
+            std::string class_name = cls;
+            octave_value fmeth = symtab.find_method (tnm, class_name);
 
-          bool is_builtin = false;
-          for (int i = 0; i < btyp_num_types; i++)
-            {
-              // FIXME: Too slow? Maybe binary lookup?
-              if (class_name == btyp_class_name[i])
-                {
-                  is_builtin = true;
-                  fh->set_overload (static_cast<builtin_type_t> (i), fmeth);
-                }
-            }
+            bool is_builtin = false;
+            for (int i = 0; i < btyp_num_types; i++)
+              {
+                // FIXME: Too slow? Maybe binary lookup?
+                if (class_name == btyp_class_name[i])
+                  {
+                    is_builtin = true;
+                    fh->set_overload (static_cast<builtin_type_t> (i), fmeth);
+                  }
+              }
 
-          if (! is_builtin)
-            fh->set_overload (class_name, fmeth);
-        }
-    }
+            if (! is_builtin)
+              fh->set_overload (class_name, fmeth);
+          }
+      }
 
-  return retval;
+    return retval;
+  }
 }
 
 /*
 %!test
 %! x = {".**", "power";
 %!      ".'", "transpose";
 %!      ".+", "plus";
 %!      ".-", "minus";
@@ -1830,17 +1837,17 @@ functions.  This option is no longer sup
         retval = anon_fcn_handle;
     }
   else
     {
       if (nargin == 2)
         warning_with_id ("Octave:str2func-global-argument",
                          "str2func: second argument ignored");
 
-      retval = make_fcn_handle (nm);
+      retval = octave::make_fcn_handle (interp, nm);
     }
 
   return retval;
 }
 
 /*
 %!test
 %! f = str2func ("<");
@@ -1906,17 +1913,17 @@ octave_fcn_binder::octave_fcn_binder (co
                                       const std::vector<int>& mask,
                                       int exp_nargin)
   : octave_fcn_handle (f), root_handle (root), arg_template (templ),
     arg_mask (mask), expected_nargin (exp_nargin)
 { }
 
 octave_fcn_handle *
 octave_fcn_binder::maybe_binder (const octave_value& f,
-                                 octave::tree_evaluator& tw)
+                                 octave::interpreter& interp)
 {
   octave_fcn_handle *retval = nullptr;
 
   octave_user_function *usr_fcn = f.user_function_value (false);
   octave::tree_parameter_list *param_list = (usr_fcn ? usr_fcn->parameter_list ()
                                                      : nullptr);
 
   octave::tree_statement_list *cmd_list = nullptr;
@@ -1962,16 +1969,18 @@ octave_fcn_binder::maybe_binder (const o
                 {
                   octave::tree_decl_elt *elt = param_p;
                   octave::tree_identifier *id = (elt ? elt->ident () : nullptr);
                   if (id && ! id->is_black_hole ())
                     arginmap[id->name ()] = npar;
                 }
             }
 
+          octave::tree_evaluator& tw = interp.get_evaluator ();
+
           if (arg_list && arg_list->length () > 0)
             {
               bool bad = false;
               int nargs = arg_list->length ();
               octave_value_list arg_template (nargs);
               std::vector<int> arg_mask (nargs);
 
               // Verify that each argument is either a named param, a constant,
@@ -2029,17 +2038,18 @@ octave_fcn_binder::maybe_binder (const o
                       else
                         {
                           // Simulate try/catch.
                           octave::unwind_protect frame;
                           interpreter_try (frame);
 
                           try
                             {
-                              root_val = make_fcn_handle (head_name);
+                              root_val
+                                = octave::make_fcn_handle (interp, head_name);
                             }
                           catch (const octave::execution_exception&)
                             {
                               octave::interpreter::recover_from_exception ();
 
                               bad = true;
                             }
                         }
diff --git a/libinterp/octave-value/ov-fcn-handle.h b/libinterp/octave-value/ov-fcn-handle.h
--- a/libinterp/octave-value/ov-fcn-handle.h
+++ b/libinterp/octave-value/ov-fcn-handle.h
@@ -32,17 +32,17 @@ along with Octave; see the file COPYING.
 
 #include "ov-base.h"
 #include "ov-base-mat.h"
 #include "ov-fcn.h"
 #include "ov-typeinfo.h"
 
 namespace octave
 {
-  class tree_evaluator;
+  class interpreter;
 }
 
 // Function handles.
 
 class
 OCTINTERP_API
 octave_fcn_handle : public octave_base_value
 {
@@ -174,37 +174,39 @@ protected:
   octave_value builtin_overloads[btyp_num_types];
 
   // Overloads for other classes.
   str_ov_map overloads;
 
   bool parse_anon_fcn_handle (const std::string& fcn_text);
 
   virtual octave_value_list call (int nargout, const octave_value_list& args);
-
-  friend octave_value make_fcn_handle (const std::string &, bool);
 };
 
-extern octave_value make_fcn_handle (const std::string& nm);
+namespace octave
+{
+  extern octave_value
+  make_fcn_handle (interpreter& interp, const std::string& nm);
+}
 
 class
 OCTINTERP_API
 octave_fcn_binder : public octave_fcn_handle
 {
 private:
   // Private ctor.
   octave_fcn_binder (const octave_value& f, const octave_value& root,
                      const octave_value_list& templ,
                      const std::vector<int>& mask, int exp_nargin);
 
 public:
 
   // Factory method.
   static octave_fcn_handle * maybe_binder (const octave_value& f,
-                                           octave::tree_evaluator& tw);
+                                           octave::interpreter& interp);
 
 protected:
 
   octave_value_list call (int nargout, const octave_value_list& args);
 
   octave_value root_handle;
   octave_value_list arg_template;
   std::vector<int> arg_mask;
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -363,17 +363,17 @@ namespace octave
 
         af->stash_fcn_file_name (curr_fcn->fcn_file_name ());
       }
 
     af->mark_as_anonymous_function ();
 
     octave_value ov_fcn (af);
 
-    // octave_value fh (octave_fcn_binder::maybe_binder (ov_fcn, *this));
+    // octave_value fh (octave_fcn_binder::maybe_binder (ov_fcn, m_interpreter));
 
     octave_value fh (new octave_fcn_handle (ov_fcn, octave_fcn_handle::anonymous));
 
     push_result (fh);
   }
 
   void
   tree_evaluator::visit_argument_list (tree_argument_list&)
@@ -2687,17 +2687,17 @@ namespace octave
     push_result (expr.value ());
   }
 
   void
   tree_evaluator::visit_fcn_handle (tree_fcn_handle& expr)
   {
     std::string nm = expr.name ();
 
-    octave_value fh = make_fcn_handle (nm);
+    octave_value fh = make_fcn_handle (m_interpreter, nm);
 
     push_result (fh);
   }
 
   void
   tree_evaluator::visit_parameter_list (tree_parameter_list&)
   {
     panic_impossible ();
