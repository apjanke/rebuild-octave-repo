# HG changeset patch
# User jwe
# Date 747889575 0
#      Mon Sep 13 03:06:15 1993 +0000
# Node ID 197bd6c63baa57075305cd06ba87049b8914b20f
# Parent  7162908b268470422e114736eaf08a2a7605f9c9
[project @ 1993-09-13 03:06:15 by jwe]
(syl): Use complex_matrix_value(), not ComplexMatrixLoad().

diff --git a/src/syl.cc b/src/syl.cc
--- a/src/syl.cc
+++ b/src/syl.cc
@@ -45,54 +45,16 @@ extern "C"
  
   int F77_FCN (ztrsyl) (const char*, const char*, const int*,
 			const int*, const int*, const Complex*,
 			const int*, const Complex*, const int*,
 			const Complex*, const int*, double*, int*,
 			long, long);
 }
 
-// Return value of tree_constant argument as ComplexMatrix.
-
-ComplexMatrix
-ComplexMatrixLoad (tree_constant& arg)
-{
-  ComplexMatrix retval;
-
-// Set argument size for scalar (for later).
-
-  switch (arg.const_type ())
-    {
-    case tree_constant_rep::scalar_constant:
-      retval.resize (1, 1);
-      {
-        double real_val = arg.double_value ();
-        retval.elem (0, 0) = real_val;
-      }
-      break;
-    case tree_constant_rep::complex_scalar_constant:
-      retval.resize (1, 1);
-      retval.elem (0, 0) = arg.complex_value ();
-      break;
-    case tree_constant_rep::matrix_constant:
-      {
-        Matrix tmp = arg.matrix_value ();
-        retval = tmp;
-      }
-      break;
-    case tree_constant_rep::complex_matrix_constant:
-      retval = arg.complex_matrix_value ();
-      break;
-    default:
-      panic_impossible ();
-      break;
-    }
-  return retval;
-}
-
 #ifdef WITH_DLD
 tree_constant *
 builtin_syl_2 (tree_constant *args, int nargin, int nargout)
 {
   return syl (args, nargin, nargout);
 }
 #endif
 
@@ -135,19 +97,19 @@ syl (tree_constant *args, int nargin, in
     retval = new tree_constant[nargout+1];
 
     if (arga.is_complex_type () || argb.is_complex_type ()
 	|| argc.is_complex_type ())
       {
 
 // Do everything in complex arithmetic;
 
-	ComplexMatrix ca = ComplexMatrixLoad (arga);
-	ComplexMatrix cb = ComplexMatrixLoad (argb);
-	ComplexMatrix cc = ComplexMatrixLoad (argc);
+	ComplexMatrix ca = arga.complex_matrix_value ();
+	ComplexMatrix cb = argb.complex_matrix_value ();
+	ComplexMatrix cc = argc.complex_matrix_value ();
   
 // Compute Schur decompositions
 
 	ComplexSCHUR as (ca, "U");
 	ComplexSCHUR bs (cb, "U");
   
 // Transform cc to new coordinates.
 
