# HG changeset patch
# User jwe
# Date 1015543712 0
#      Thu Mar 07 23:28:32 2002 +0000
# Node ID faeca8a063aeff59a75cbbc65c7d33404772a1ee
# Parent  55648fc616c853eef235bb6b5174f988deb82b72
[project @ 2002-03-07 23:28:32 by jwe]

diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -1128,27 +1128,39 @@ do_scanf_conv (std::istream& is, const s
 	{
 	  conversion_count++;
 	  data[idx++] = *(valptr);
 	}
     }
 }
 
 template void
-do_scanf_conv (std::istream&, const scanf_format_elt&, int*, Matrix&,
-	       double*, int&, int&, int, int, bool);
+do_scanf_conv (std::istream&, const scanf_format_elt&, int*,
+	       Matrix&, double*, int&, int&, int, int, bool);
 
 template void
 do_scanf_conv (std::istream&, const scanf_format_elt&, long int*,
 	       Matrix&, double*, int&, int&, int, int, bool);
 
 template void
 do_scanf_conv (std::istream&, const scanf_format_elt&, short int*,
 	       Matrix&, double*, int&, int&, int, int, bool);
 
+template void
+do_scanf_conv (std::istream&, const scanf_format_elt&, unsigned int*,
+	       Matrix&, double*, int&, int&, int, int, bool);
+
+template void
+do_scanf_conv (std::istream&, const scanf_format_elt&, unsigned long int*,
+	       Matrix&, double*, int&, int&, int, int, bool);
+
+template void
+do_scanf_conv (std::istream&, const scanf_format_elt&, unsigned short int*,
+	       Matrix&, double*, int&, int&, int, int, bool);
+
 #if 0
 template void
 do_scanf_conv (std::istream&, const scanf_format_elt&, float*,
 	       Matrix&, double*, int&, int&, int, int, bool);
 #endif
 
 template void
 do_scanf_conv (std::istream&, const scanf_format_elt&, double*,
@@ -1476,17 +1488,17 @@ octave_base_stream::do_scanf (scanf_form
 		case scanf_format_elt::literal_conversion:
 		  DO_LITERAL_CONVERSION ();
 		  break;
 
 		case '%':
 		  DO_PCT_CONVERSION ();
 		  break;
 
-		case 'd': case 'i': case 'o': case 'u': case 'x':
+		case 'd': case 'i':
 		  {
 		    switch (elt->modifier)
 		      {
 		      case 'h':
 			{
 			  short int tmp;
 			  do_scanf_conv (is, *elt, &tmp, mval, data,
 					 data_index, conversion_count,
@@ -1510,16 +1522,50 @@ octave_base_stream::do_scanf (scanf_form
 					 data_index, conversion_count,
 					 nr, max_size, discard);
 			}
 			break;
 		      }
 		  }
 		  break;
 
+		case 'o': case 'u': case 'x':
+		  {
+		    switch (elt->modifier)
+		      {
+		      case 'h':
+			{
+			  unsigned short int tmp;
+			  do_scanf_conv (is, *elt, &tmp, mval, data,
+					 data_index, conversion_count,
+					 nr, max_size, discard);
+			}
+			break;
+
+		      case 'l':
+			{
+			  unsigned long int tmp;
+			  do_scanf_conv (is, *elt, &tmp, mval, data,
+					 data_index, conversion_count,
+					 nr, max_size, discard);
+			}
+			break;
+
+		      default:
+			{
+			  unsigned int tmp;
+			  do_scanf_conv (is, *elt, &tmp, mval, data,
+					 data_index, conversion_count,
+					 nr, max_size, discard);
+			}
+			break;
+		      }
+		  }
+		  break;
+
 		case 'e': case 'f': case 'g':
 		  {
 		    double tmp;
 
 		    do_scanf_conv (is, *elt, &tmp, mval, data,
 				   data_index, conversion_count,
 				   nr, max_size, discard);
 		  }
@@ -1718,30 +1764,44 @@ octave_base_stream::do_oscanf (const sca
 		DO_PCT_CONVERSION ();
 
 		if (! is)
 		  quit = true;
 
 	      }
 	      break;
 
-	    case 'd': case 'i': case 'o': case 'u': case 'x':
+	    case 'd': case 'i':
 	      {
 		int tmp;
 
 		if (OCTAVE_SCAN (is, *elt, &tmp))
 		  {
 		    if (! discard)
 		      retval = static_cast<double> (tmp);
 		  }
 		else
 		  quit = true;
 	      }
 	      break;
 
+	    case 'o': case 'u': case 'x':
+	      {
+		long int tmp;
+
+		if (OCTAVE_SCAN (is, *elt, &tmp))
+		  {
+		    if (! discard)
+		      retval = static_cast<double> (tmp);
+		  }
+		else
+		  quit = true;
+	      }
+	      break;
+
 	    case 'e': case 'f': case 'g':
 	      {
 		double tmp;
 
 		if (OCTAVE_SCAN (is, *elt, &tmp))
 		  {
 		    if (! discard)
 		      retval = tmp;
@@ -2156,16 +2216,22 @@ do_printf_conv (std::ostream& os, const 
 }
 
 template int
 do_printf_conv (std::ostream&, const char*, int, int, int, int);
 							   
 template int						   
 do_printf_conv (std::ostream&, const char*, int, int, int, long);
 							   
+template int
+do_printf_conv (std::ostream&, const char*, int, int, int, unsigned int);
+							   
+template int						   
+do_printf_conv (std::ostream&, const char*, int, int, int, unsigned long);
+							   
 template int						   
 do_printf_conv (std::ostream&, const char*, int, int, int, double);
 							   
 template int						   
 do_printf_conv (std::ostream&, const char*, int, int, int, const char*);
 
 int
 octave_base_stream::do_printf (printf_format_list& fmt_list,
@@ -2239,27 +2305,39 @@ octave_base_stream::do_printf (printf_fo
 	      else
 		{
 		  double val = val_cache.double_value ();
 
 		  if (val_cache)
 		    {
 		      switch (elt->type)
 			{
-			case 'd': case 'i': case 'o': case 'x':
-			case 'X': case 'u': case 'c':
+			case 'd': case 'i': case 'c':
 			  {
 			    if (elt->modifier == 'l')
-			      retval
-				+= do_printf_conv (os, fmt, nsa, sa_1, sa_2,
-						   static_cast<long> (val));
+			      retval += do_printf_conv
+				(os, fmt, nsa, sa_1, sa_2,
+				 static_cast<long int> (val));
 			    else
-			      retval
-				+= do_printf_conv (os, fmt, nsa, sa_1, sa_2,
-						   static_cast<int> (val));
+			      retval += do_printf_conv
+				(os, fmt, nsa, sa_1, sa_2,
+				 static_cast<int> (val));
+			  }
+			  break;
+
+			case 'o': case 'x': case 'X': case 'u':
+			  {
+			    if (elt->modifier == 'l')
+			      retval += do_printf_conv
+				(os, fmt, nsa, sa_1, sa_2,
+				 static_cast<unsigned long int> (val));
+			    else
+			      retval += do_printf_conv
+				(os, fmt, nsa, sa_1, sa_2,
+				 static_cast<unsigned int> (val));
 			  }
 			  break;
 
 			case 'f': case 'e': case 'E':
 			case 'g': case 'G':
 			  retval
 			    += do_printf_conv (os, fmt, nsa, sa_1, sa_2, val);
 			  break;
