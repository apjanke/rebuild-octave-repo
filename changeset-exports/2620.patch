# HG changeset patch
# User jwe
# Date 854036786 0
#      Thu Jan 23 16:26:26 1997 +0000
# Node ID 5c773d4745d6c7a5f3f89d3d20a840921364f674
# Parent  7e641ec646944390156b92fecfd0bb5b2b6f75fa
[project @ 1997-01-23 16:26:25 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,26 @@
+Thu Jan 23 10:00:00 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pt-pr-code.h, pt-pr-code.cc (tree_print_code::visit_no_op_command):
+	New function. 
+	* pt-cmd.h, pt-cmd.cc (tree_no_op_command): New class.
+	* parse.y (make_break_command, make_continue_command,
+	make_return_command): Where they don't really make sense, turn
+	these commands into no-ops.  Accept return and break if reading a
+	script file.
+	* toplev.cc (parse_and_execute): Handle return and break in script
+	files.  Quit executing commands if an error occurs when reading a
+	script file.  Set global_command to 0 after deleting it.
+	(main_loop): If not interactive or forced_interactive, handle
+	break and return, and quit executing commands if an error occurs.
+	Set global_command to 0 after deleting it.
+	* error.cc (Ferror): Doc fix.
+	* pt-walk.h (tree_walker): Add declaration for visit_no_op_command.
+
 Wed Jan 22 20:54:12 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* input.cc (gnu_readline): If not using readline, flush
 	rl_outstream after printing prompt.
 	(octave_gets): Also call flush_octave_stdout() if
 	forced_interactive, not just if interactive.
 	(do_input_echo): If forced_interactive, only echo prompt and
 	command line if also reading a script file.
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -247,18 +247,18 @@ handle_message (error_fun f, const char 
 }
 
 DEFUN (error, args, ,
   "error (FMT, ...): print message according to FMT and set error state.\n\
 \n\
 This should eventually take us up to the top level, possibly\n\
 printing traceback messages as we go.\n\
 \n\
-If MESSAGE ends in a newline character, traceback messages are not\n\
-printed.\n\
+If the resulting error message ends in a newline character, traceback
+messages are not printed.\n\
 \n\
 See also: printf") 
 {
   return handle_message (error, "unspecified error", args);
 }
 
 DEFUN (warning, args, ,
   "warning (FMT, ...): print a warning message according to FMT.\n\
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1864,65 +1864,59 @@ make_for_command (token *for_tok, tree_m
 
 // Build a break command.
 
 static tree_command *
 make_break_command (token *break_tok)
 {
   tree_command *retval = 0;
 
-  if (! (lexer_flags.looping || lexer_flags.defining_func))
-    yyerror ("break: only meaningful within a loop or function body");
+  int l = break_tok->line ();
+  int c = break_tok->column ();
+
+  if (lexer_flags.looping || lexer_flags.defining_func || reading_script_file)
+    retval = new tree_break_command (l, c);
   else
-    {
-      int l = break_tok->line ();
-      int c = break_tok->column ();
-
-      retval = new tree_break_command (l, c);
-    }
+    retval = new tree_no_op_command ("break", l, c);
 
   return retval;
 }
 
 // Build a continue command.
 
 static tree_command *
 make_continue_command (token *continue_tok)
 {
   tree_command *retval = 0;
 
-  if (! lexer_flags.looping)
-    yyerror ("continue: only meaningful within a `for' or `while' loop");
+  int l = continue_tok->line ();
+  int c = continue_tok->column ();
+
+  if (lexer_flags.looping)
+    retval = new tree_continue_command (l, c);
   else
-    {
-      int l = continue_tok->line ();
-      int c = continue_tok->column ();
-
-      retval = new tree_continue_command (l, c);
-    }
+    retval = new tree_no_op_command ("continue", l, c);
 
   return retval;
 }
 
 // Build a return command.
 
 static tree_command *
 make_return_command (token *return_tok)
 {
   tree_command *retval = 0;
 
-  if (! lexer_flags.defining_func)
-    yyerror ("return: only meaningful within a function");
+  int l = return_tok->line ();
+  int c = return_tok->column ();
+
+  if (lexer_flags.defining_func || reading_script_file)
+    retval = new tree_return_command (l, c);
   else
-    {
-      int l = return_tok->line ();
-      int c = return_tok->column ();
-
-      retval = new tree_return_command (l, c);
-    }
+    retval = new tree_no_op_command ("return", l, c);
 
   return retval;
 }
 
 // Start an if command.
 
 static tree_if_command_list *
 start_if_command (tree_expression *expr, tree_statement_list *list)
diff --git a/src/pt-cmd.cc b/src/pt-cmd.cc
--- a/src/pt-cmd.cc
+++ b/src/pt-cmd.cc
@@ -681,16 +681,24 @@ tree_unwind_protect_command::eval (void)
 }
 
 void
 tree_unwind_protect_command::accept (tree_walker& tw)
 {
   tw.visit_unwind_protect_command (*this);
 }
 
+// No-op.
+
+void
+tree_no_op_command::accept (tree_walker& tw)
+{
+  tw.visit_no_op_command (*this);
+}
+
 // Break.
 
 void
 tree_break_command::eval (void)
 {
   if (! error_state)
     breaking = 1;
 }
diff --git a/src/pt-cmd.h b/src/pt-cmd.h
--- a/src/pt-cmd.h
+++ b/src/pt-cmd.h
@@ -43,22 +43,25 @@ class symbol_record;
 
 class tree_command;
 class tree_global_command;
 class tree_while_command;
 class tree_for_command;
 class tree_if_command;
 class tree_try_catch_command;
 class tree_unwind_protect_command;
+class tree_no_op_command;
 class tree_break_command;
 class tree_continue_command;
 class tree_return_command;
 
 class tree_walker;
 
+#include <string>
+
 #include "pt-base.h"
 
 // A base class for commands.
 
 class
 tree_command : public tree
 {
 public:
@@ -285,16 +288,39 @@ private:
 
   // The first block of code to attempt to execute.
   tree_statement_list *try_code;
 
   // The code to execute if an error occurs in the first block.
   tree_statement_list *catch_code;
 };
 
+// No-op.
+
+class
+tree_no_op_command : public tree_command
+{
+public:
+
+  tree_no_op_command (const string& cmd = "no_op", int l = -1, int c = -1)
+    : tree_command (l, c), orig_cmd (cmd) { }
+
+  ~tree_no_op_command (void) { }
+
+  void eval (void) { }
+
+  void accept (tree_walker& tw);
+
+  string original_command (void) { return orig_cmd; }
+
+private:
+
+  string orig_cmd;
+};
+
 // Break.
 
 class
 tree_break_command : public tree_command
 {
 public:
 
   tree_break_command (int l = -1, int c = -1) : tree_command (l, c) { }
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -548,16 +548,24 @@ tree_print_code::visit_multi_assignment_
   if (rhs)
     rhs->accept (*this);
 
   if (in_parens)
     os << ")";
 }
 
 void
+tree_print_code::visit_no_op_command (tree_no_op_command& cmd)
+{
+  indent ();
+
+  os << cmd.original_command ();
+}
+
+void
 tree_print_code::visit_oct_obj (tree_oct_obj&)
 {
   ::error ("visit_oct_obj: internal error");
 }
 
 void
 tree_print_code::visit_constant (tree_constant& val)
 {
diff --git a/src/pt-pr-code.h b/src/pt-pr-code.h
--- a/src/pt-pr-code.h
+++ b/src/pt-pr-code.h
@@ -83,16 +83,18 @@ public:
   void visit_indirect_ref (tree_indirect_ref&);
 
   void visit_matrix (tree_matrix&);
 
   void visit_matrix_row (tree_matrix_row&);
 
   void visit_multi_assignment_expression (tree_multi_assignment_expression&);
 
+  void visit_no_op_command (tree_no_op_command&);
+
   void visit_oct_obj (tree_oct_obj&);
 
   void visit_constant (tree_constant&);
 
   void visit_parameter_list (tree_parameter_list&);
 
   void visit_plot_command (tree_plot_command&);
 
diff --git a/src/pt-walk.h b/src/pt-walk.h
--- a/src/pt-walk.h
+++ b/src/pt-walk.h
@@ -94,16 +94,19 @@ public:
 
   virtual void
   visit_matrix_row (tree_matrix_row&) = 0;
 
   virtual void
   visit_multi_assignment_expression (tree_multi_assignment_expression&) = 0;
 
   virtual void
+  visit_no_op_command (tree_no_op_command&) = 0;
+
+  virtual void
   visit_oct_obj (tree_oct_obj&) = 0;
 
   virtual void
   visit_constant (tree_constant&) = 0;
 
   virtual void
   visit_parameter_list (tree_parameter_list&) = 0;
 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -86,16 +86,22 @@ string Vprogram_name;
 string Vuser_name;
 
 // Name of the host we are running on.
 string Vhost_name;
 
 // User's home directory.
 string Vhome_directory;
 
+// Nonzero means we're breaking out of a loop or function body.
+extern int breaking;
+
+// Nonzero means we're returning from a function.
+extern int returning;
+
 // Nonzero means we are using readline.
 // (--no-line-editing)
 #if defined (USE_READLINE)
 int using_readline = 1;
 #else
 int using_readline = 0;
 #endif
 
@@ -155,17 +161,39 @@ parse_and_execute (FILE *f, int print)
     {
       reset_parser ();
 
       retval = yyparse ();
 
       if (retval == 0 && global_command)
 	{
 	  global_command->eval (print);
+
 	  delete global_command;
+
+	  global_command = 0;
+
+	  bool quit = (returning || breaking);
+
+	  if (returning)
+	    returning = 0;
+
+	  if (breaking)
+	    breaking--;
+
+	  if (error_state)
+	    {
+	      error ("near line %d of file `%s'", input_line_number,
+		     curr_fcn_file_full_name.c_str ());
+
+	      break;
+	    }
+
+	  if (quit)
+	    break;
 	}
     }
   while (retval == 0);
 
   run_unwind_frame ("parse_and_execute");
 }
 
 static void
@@ -249,20 +277,44 @@ main_loop (void)
       retval = yyparse ();
 
       if (retval == 0 && global_command)
 	{
 	  global_command->eval (1);
 
 	  delete global_command;
 
-	  if (octave_completion_matches_called)
-	    octave_completion_matches_called = false;	    
+	  global_command = 0;
+
+	  if (! (interactive || forced_interactive))
+	    {
+	      bool quit = (returning || breaking);
+
+	      if (returning)
+		returning = 0;
+
+	      if (breaking)
+		breaking--;
+
+	      if (quit)
+		break;
+	    }
+
+	  if (error_state)
+	    {
+	      if (! (interactive || forced_interactive))
+		break;
+	    }
 	  else
-	    current_command_number++;
+	    {
+	      if (octave_completion_matches_called)
+		octave_completion_matches_called = false;	    
+	      else
+		current_command_number++;
+	    }
 	}
     }
   while (retval == 0);
 
   return retval;
 }
 
 DEFUN (source, args, ,
