# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1510269619 18000
#      Thu Nov 09 18:20:19 2017 -0500
# Node ID ff81c6772664b90153d98d1d4378bf17145d9607
# Parent  629858e122f148a85c7fed295b7e03df83022f37
avoid issue with link-time optimization

With link-time optimization, the value used for the HDF5 save type was
not working correctly for Octave int types.  It seems that the
templated load and save functions were recognized as duplicates and
only one version was used, even though they needed to be different.
This patch attempts to avoid that.

* ov-base-int.h, ov-base-int.cc
(octave_base_int<T>::load_hdf5_internal): Rename from
octave_base_int<T>::load_hdf5.  Pass HDF5 save type as arg.
(octave_base_int<T>::save_hdf5_internal): Rename from
octave_base_int<T>::save_hdf5.  Pass HDF5 save type as arg.

* ov-intx.h (OCTAVE_VALUE_INT_MATRIX_T::load_hdf5,
OCTAVE_VALUE_INT_MATRIX_T::save_hdf5,
OCTAVE_VALUE_INT_SCALAR_T:load_hdf5,
OCTAVE_VALUE_INT_SCALAR_T:save_hdf5): New declarations.

* ov-int16.cc, ov-int32.cc, ov-int64.cc, ov-int8.cc, ov-uint16.cc,
ov-uint32.cc, ov-uint64.cc, ov-uint8.cc: Define load_hdf5 and
save_hdf5 functions.

diff --git a/libinterp/octave-value/ov-base-int.cc b/libinterp/octave-value/ov-base-int.cc
--- a/libinterp/octave-value/ov-base-int.cc
+++ b/libinterp/octave-value/ov-base-int.cc
@@ -400,24 +400,25 @@ octave_base_int_matrix<T>::load_binary (
     }
 
   this->matrix = m;
   return true;
 }
 
 template <typename T>
 bool
-octave_base_int_matrix<T>::save_hdf5 (octave_hdf5_id loc_id, const char *name,
-                                      bool)
+octave_base_int_matrix<T>::save_hdf5_internal (octave_hdf5_id loc_id,
+                                               octave_hdf5_id save_type,
+                                               const char *name, bool)
 {
   bool retval = false;
 
 #if defined (HAVE_HDF5)
 
-  hid_t save_type_hid = HDF5_SAVE_TYPE;
+  hid_t save_type_hid = save_type;
   dim_vector dv = this->dims ();
   int empty = save_hdf5_empty (loc_id, name, dv);
   if (empty)
     return (empty > 0);
 
   int rank = dv.ndims ();
   hid_t space_hid, data_hid;
   space_hid = data_hid = -1;
@@ -456,23 +457,25 @@ octave_base_int_matrix<T>::save_hdf5 (oc
   this->warn_save ("hdf5");
 #endif
 
   return retval;
 }
 
 template <typename T>
 bool
-octave_base_int_matrix<T>::load_hdf5 (octave_hdf5_id loc_id, const char *name)
+octave_base_int_matrix<T>::load_hdf5_internal (octave_hdf5_id loc_id,
+                                               octave_hdf5_id save_type,
+                                               const char *name)
 {
   bool retval = false;
 
 #if defined (HAVE_HDF5)
 
-  hid_t save_type_hid = HDF5_SAVE_TYPE;
+  hid_t save_type_hid = save_type;
   dim_vector dv;
   int empty = load_hdf5_empty (loc_id, name, dv);
   if (empty > 0)
     this->matrix.resize (dv);
   if (empty)
     return (empty > 0);
 
 #if defined (HAVE_HDF5_18)
@@ -694,24 +697,25 @@ octave_base_int_scalar<T>::load_binary (
         break;
       }
   this->scalar = tmp;
   return true;
 }
 
 template <typename T>
 bool
-octave_base_int_scalar<T>::save_hdf5 (octave_hdf5_id loc_id, const char *name,
-                                      bool)
+octave_base_int_scalar<T>::save_hdf5_internal (octave_hdf5_id loc_id,
+                                               octave_hdf5_id save_type,
+                                               const char *name, bool)
 {
   bool retval = false;
 
 #if defined (HAVE_HDF5)
 
-  hid_t save_type_hid = HDF5_SAVE_TYPE;
+  hid_t save_type_hid = save_type;
   hsize_t dimens[3];
   hid_t space_hid, data_hid;
   space_hid = data_hid = -1;
 
   space_hid = H5Screate_simple (0, dimens, nullptr);
   if (space_hid < 0) return false;
 
 #if defined (HAVE_HDF5_18)
@@ -740,21 +744,23 @@ octave_base_int_scalar<T>::save_hdf5 (oc
   this->warn_save ("hdf5");
 #endif
 
   return retval;
 }
 
 template <typename T>
 bool
-octave_base_int_scalar<T>::load_hdf5 (octave_hdf5_id loc_id, const char *name)
+octave_base_int_scalar<T>::load_hdf5_internal (octave_hdf5_id loc_id,
+                                               octave_hdf5_id save_type,
+                                               const char *name)
 {
 #if defined (HAVE_HDF5)
 
-  hid_t save_type_hid = HDF5_SAVE_TYPE;
+  hid_t save_type_hid = save_type;
 #if defined (HAVE_HDF5_18)
   hid_t data_hid = H5Dopen (loc_id, name, octave_H5P_DEFAULT);
 #else
   hid_t data_hid = H5Dopen (loc_id, name);
 #endif
   hid_t space_id = H5Dget_space (data_hid);
 
   hsize_t rank = H5Sget_simple_extent_ndims (space_id);
diff --git a/libinterp/octave-value/ov-base-int.h b/libinterp/octave-value/ov-base-int.h
--- a/libinterp/octave-value/ov-base-int.h
+++ b/libinterp/octave-value/ov-base-int.h
@@ -88,19 +88,23 @@ public:
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool&);
 
   bool load_binary (std::istream& is, bool swap,
                     octave::mach_info::float_format);
 
-  bool save_hdf5 (octave_hdf5_id loc_id, const char *name, bool);
+protected:
 
-  bool load_hdf5 (octave_hdf5_id loc_id, const char *name);
+  bool save_hdf5_internal (octave_hdf5_id loc_id, octave_hdf5_id save_type,
+                           const char *name, bool);
+
+  bool load_hdf5_internal (octave_hdf5_id loc_id, octave_hdf5_id save_type,
+                           const char *name);
 };
 
 // base int scalar values.
 
 template <typename T>
 class
 octave_base_int_scalar : public octave_base_scalar<T>
 {
@@ -145,15 +149,18 @@ public:
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool&);
 
   bool load_binary (std::istream& is, bool swap,
                     octave::mach_info::float_format);
+protected:
 
-  bool save_hdf5 (octave_hdf5_id loc_id, const char *name, bool);
+  bool save_hdf5_internal (octave_hdf5_id loc_id, octave_hdf5_id save_type,
+                           const char *name, bool);
 
-  bool load_hdf5 (octave_hdf5_id loc_id, const char *name);
+  bool load_hdf5_internal (octave_hdf5_id loc_id, octave_hdf5_id save_type,
+                           const char *name);
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-int16.cc b/libinterp/octave-value/ov-int16.cc
--- a/libinterp/octave-value/ov-int16.cc
+++ b/libinterp/octave-value/ov-int16.cc
@@ -35,16 +35,19 @@ along with Octave; see the file COPYING.
 #include "errwarn.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
 #if defined (HAVE_HDF5)
 #  define HDF5_SAVE_TYPE H5T_NATIVE_INT16
+#else
+// This value will not be used.
+#  define HDF5_SAVE_TYPE 0
 #endif
 
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-int16.h"
 #include "pr-output.h"
 #include "variables.h"
 
@@ -60,14 +63,41 @@ extern template class OCTINTERP_API octa
 
 template class octave_base_matrix<int16NDArray>;
 
 template class octave_base_int_matrix<int16NDArray>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int16_matrix,
                                      "int16 matrix", "int16");
 
+
+bool
+octave_int16_matrix::save_hdf5 (octave_hdf5_id loc_id, const char *name,
+                                bool flag)
+{
+  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
+}
+
+bool
+octave_int16_matrix::load_hdf5 (octave_hdf5_id loc_id, const char *name)
+{
+  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
+}
+
 template class octave_base_scalar<octave_int16>;
 
 template class octave_base_int_scalar<octave_int16>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int16_scalar,
                                      "int16 scalar", "int16");
+
+bool
+octave_int16_scalar::save_hdf5 (octave_hdf5_id loc_id, const char *name,
+                                bool flag)
+{
+  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
+}
+
+bool
+octave_int16_scalar::load_hdf5 (octave_hdf5_id loc_id, const char *name)
+{
+  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
+}
diff --git a/libinterp/octave-value/ov-int32.cc b/libinterp/octave-value/ov-int32.cc
--- a/libinterp/octave-value/ov-int32.cc
+++ b/libinterp/octave-value/ov-int32.cc
@@ -35,16 +35,19 @@ along with Octave; see the file COPYING.
 #include "errwarn.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
 #if defined (HAVE_HDF5)
 #  define HDF5_SAVE_TYPE H5T_NATIVE_INT32
+#else
+// This value will not be used.
+#  define HDF5_SAVE_TYPE 0
 #endif
 
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-int32.h"
 #include "pr-output.h"
 #include "variables.h"
 
@@ -59,15 +62,40 @@ along with Octave; see the file COPYING.
 extern template class OCTINTERP_API octave_base_scalar<double>;
 
 template class octave_base_matrix<int32NDArray>;
 
 template class octave_base_int_matrix<int32NDArray>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int32_matrix,
                                      "int32 matrix", "int32");
+bool
+octave_int32_matrix::save_hdf5 (octave_hdf5_id loc_id, const char *name,
+                                bool flag)
+{
+  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
+}
+
+bool
+octave_int32_matrix::load_hdf5 (octave_hdf5_id loc_id, const char *name)
+{
+  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
+}
 
 template class octave_base_scalar<octave_int32>;
 
 template class octave_base_int_scalar<octave_int32>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int32_scalar,
                                      "int32 scalar", "int32");
+
+bool
+octave_int32_scalar::save_hdf5 (octave_hdf5_id loc_id, const char *name,
+                                bool flag)
+{
+  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
+}
+
+bool
+octave_int32_scalar::load_hdf5 (octave_hdf5_id loc_id, const char *name)
+{
+  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
+}
diff --git a/libinterp/octave-value/ov-int64.cc b/libinterp/octave-value/ov-int64.cc
--- a/libinterp/octave-value/ov-int64.cc
+++ b/libinterp/octave-value/ov-int64.cc
@@ -35,16 +35,19 @@ along with Octave; see the file COPYING.
 #include "errwarn.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
 #if defined (HAVE_HDF5)
 #  define HDF5_SAVE_TYPE H5T_NATIVE_INT64
+#else
+// This value will not be used.
+#  define HDF5_SAVE_TYPE 0
 #endif
 
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-int64.h"
 #include "pr-output.h"
 #include "variables.h"
 
@@ -60,14 +63,40 @@ extern template class OCTINTERP_API octa
 
 template class octave_base_matrix<int64NDArray>;
 
 template class octave_base_int_matrix<int64NDArray>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int64_matrix,
                                      "int64 matrix", "int64");
 
+bool
+octave_int64_matrix::save_hdf5 (octave_hdf5_id loc_id, const char *name,
+                                bool flag)
+{
+  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
+}
+
+bool
+octave_int64_matrix::load_hdf5 (octave_hdf5_id loc_id, const char *name)
+{
+  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
+}
+
 template class octave_base_scalar<octave_int64>;
 
 template class octave_base_int_scalar<octave_int64>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int64_scalar,
                                      "int64 scalar", "int64");
+
+bool
+octave_int64_scalar::save_hdf5 (octave_hdf5_id loc_id, const char *name,
+                                bool flag)
+{
+  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
+}
+
+bool
+octave_int64_scalar::load_hdf5 (octave_hdf5_id loc_id, const char *name)
+{
+  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
+}
diff --git a/libinterp/octave-value/ov-int8.cc b/libinterp/octave-value/ov-int8.cc
--- a/libinterp/octave-value/ov-int8.cc
+++ b/libinterp/octave-value/ov-int8.cc
@@ -35,16 +35,19 @@ along with Octave; see the file COPYING.
 #include "errwarn.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
 #if defined (HAVE_HDF5)
 #  define HDF5_SAVE_TYPE H5T_NATIVE_INT8
+#else
+// This value will not be used.
+#  define HDF5_SAVE_TYPE 0
 #endif
 
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-int8.h"
 #include "pr-output.h"
 #include "variables.h"
 
@@ -60,14 +63,40 @@ extern template class OCTINTERP_API octa
 
 template class octave_base_matrix<int8NDArray>;
 
 template class octave_base_int_matrix<int8NDArray>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int8_matrix,
                                      "int8 matrix", "int8");
 
+bool
+octave_int8_matrix::save_hdf5 (octave_hdf5_id loc_id, const char *name,
+                               bool flag)
+{
+  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
+}
+
+bool
+octave_int8_matrix::load_hdf5 (octave_hdf5_id loc_id, const char *name)
+{
+  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
+}
+
 template class octave_base_scalar<octave_int8>;
 
 template class octave_base_int_scalar<octave_int8>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int8_scalar,
                                      "int8 scalar", "int8");
+
+bool
+octave_int8_scalar::save_hdf5 (octave_hdf5_id loc_id, const char *name,
+                               bool flag)
+{
+  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
+}
+
+bool
+octave_int8_scalar::load_hdf5 (octave_hdf5_id loc_id, const char *name)
+{
+  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
+}
diff --git a/libinterp/octave-value/ov-intx.h b/libinterp/octave-value/ov-intx.h
--- a/libinterp/octave-value/ov-intx.h
+++ b/libinterp/octave-value/ov-intx.h
@@ -364,16 +364,20 @@ public:
           // FIXME: we should be able to do better than converting to
           // double here.
           octave_matrix m (array_value ());
           return m.map (umap);
         }
       }
   }
 
+  bool save_hdf5 (octave_hdf5_id loc_id, const char *name, bool flag);
+
+  bool load_hdf5 (octave_hdf5_id loc_id, const char *name);
+
 private:
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 class
 OCTINTERP_API
 OCTAVE_VALUE_INT_SCALAR_T
@@ -667,12 +671,16 @@ public:
       default:
         {
           octave_scalar m (scalar_value ());
           return m.map (umap);
         }
       }
   }
 
-private:
+  bool save_hdf5 (octave_hdf5_id loc_id, const char *name, bool flag);
+
+  bool load_hdf5 (octave_hdf5_id loc_id, const char *name);
+
+ private:
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
diff --git a/libinterp/octave-value/ov-uint16.cc b/libinterp/octave-value/ov-uint16.cc
--- a/libinterp/octave-value/ov-uint16.cc
+++ b/libinterp/octave-value/ov-uint16.cc
@@ -36,16 +36,19 @@ along with Octave; see the file COPYING.
 #include "ovl.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
 #if defined (HAVE_HDF5)
 #  define HDF5_SAVE_TYPE H5T_NATIVE_UINT16
+#else
+// This value will not be used.
+#  define HDF5_SAVE_TYPE 0
 #endif
 
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-uint16.h"
 #include "pr-output.h"
 #include "variables.h"
 
@@ -61,14 +64,40 @@ extern template class OCTINTERP_API octa
 
 template class octave_base_matrix<uint16NDArray>;
 
 template class octave_base_int_matrix<uint16NDArray>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint16_matrix,
                                      "uint16 matrix", "uint16");
 
+bool
+octave_uint16_matrix::save_hdf5 (octave_hdf5_id loc_id, const char *name,
+                                 bool flag)
+{
+  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
+}
+
+bool
+octave_uint16_matrix::load_hdf5 (octave_hdf5_id loc_id, const char *name)
+{
+  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
+}
+
 template class octave_base_scalar<octave_uint16>;
 
 template class octave_base_int_scalar<octave_uint16>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint16_scalar,
                                      "uint16 scalar", "uint16");
+
+bool
+octave_uint16_scalar::save_hdf5 (octave_hdf5_id loc_id, const char *name,
+                                 bool flag)
+{
+  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
+}
+
+bool
+octave_uint16_scalar::load_hdf5 (octave_hdf5_id loc_id, const char *name)
+{
+  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
+}
diff --git a/libinterp/octave-value/ov-uint32.cc b/libinterp/octave-value/ov-uint32.cc
--- a/libinterp/octave-value/ov-uint32.cc
+++ b/libinterp/octave-value/ov-uint32.cc
@@ -35,16 +35,19 @@ along with Octave; see the file COPYING.
 #include "errwarn.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
 #if defined (HAVE_HDF5)
 #  define HDF5_SAVE_TYPE H5T_NATIVE_UINT32
+#else
+// This value will not be used.
+#  define HDF5_SAVE_TYPE 0
 #endif
 
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-uint32.h"
 #include "pr-output.h"
 #include "variables.h"
 
@@ -60,14 +63,40 @@ extern template class OCTINTERP_API octa
 
 template class octave_base_matrix<uint32NDArray>;
 
 template class octave_base_int_matrix<uint32NDArray>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint32_matrix,
                                      "uint32 matrix", "uint32");
 
+bool
+octave_uint32_matrix::save_hdf5 (octave_hdf5_id loc_id, const char *name,
+                                 bool flag)
+{
+  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
+}
+
+bool
+octave_uint32_matrix::load_hdf5 (octave_hdf5_id loc_id, const char *name)
+{
+  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
+}
+
 template class octave_base_scalar<octave_uint32>;
 
 template class octave_base_int_scalar<octave_uint32>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint32_scalar,
                                      "uint32 scalar", "uint32");
+
+bool
+octave_uint32_scalar::save_hdf5 (octave_hdf5_id loc_id, const char *name,
+                                 bool flag)
+{
+  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
+}
+
+bool
+octave_uint32_scalar::load_hdf5 (octave_hdf5_id loc_id, const char *name)
+{
+  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
+}
diff --git a/libinterp/octave-value/ov-uint64.cc b/libinterp/octave-value/ov-uint64.cc
--- a/libinterp/octave-value/ov-uint64.cc
+++ b/libinterp/octave-value/ov-uint64.cc
@@ -35,16 +35,19 @@ along with Octave; see the file COPYING.
 #include "errwarn.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
 #if defined (HAVE_HDF5)
 #  define HDF5_SAVE_TYPE H5T_NATIVE_UINT64
+#else
+// This value will not be used.
+#  define HDF5_SAVE_TYPE 0
 #endif
 
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-uint64.h"
 #include "pr-output.h"
 #include "variables.h"
 
@@ -60,14 +63,40 @@ extern template class OCTINTERP_API octa
 
 template class octave_base_matrix<uint64NDArray>;
 
 template class octave_base_int_matrix<uint64NDArray>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint64_matrix,
                                      "uint64 matrix", "uint64");
 
+bool
+octave_uint64_matrix::save_hdf5 (octave_hdf5_id loc_id, const char *name,
+                                 bool flag)
+{
+  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
+}
+
+bool
+octave_uint64_matrix::load_hdf5 (octave_hdf5_id loc_id, const char *name)
+{
+  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
+}
+
 template class octave_base_scalar<octave_uint64>;
 
 template class octave_base_int_scalar<octave_uint64>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint64_scalar,
                                      "uint64 scalar", "uint64");
+
+bool
+octave_uint64_scalar::save_hdf5 (octave_hdf5_id loc_id, const char *name,
+                                 bool flag)
+{
+  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
+}
+
+bool
+octave_uint64_scalar::load_hdf5 (octave_hdf5_id loc_id, const char *name)
+{
+  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
+}
diff --git a/libinterp/octave-value/ov-uint8.cc b/libinterp/octave-value/ov-uint8.cc
--- a/libinterp/octave-value/ov-uint8.cc
+++ b/libinterp/octave-value/ov-uint8.cc
@@ -35,16 +35,19 @@ along with Octave; see the file COPYING.
 #include "errwarn.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
 #if defined (HAVE_HDF5)
 #  define HDF5_SAVE_TYPE H5T_NATIVE_UINT8
+#else
+// This value will not be used.
+#  define HDF5_SAVE_TYPE 0
 #endif
 
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-uint8.h"
 #include "pr-output.h"
 #include "variables.h"
 
@@ -60,14 +63,40 @@ extern template class OCTINTERP_API octa
 
 template class octave_base_matrix<uint8NDArray>;
 
 template class octave_base_int_matrix<uint8NDArray>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint8_matrix,
                                      "uint8 matrix", "uint8");
 
+bool
+octave_uint8_matrix::save_hdf5 (octave_hdf5_id loc_id, const char *name,
+                                bool flag)
+{
+  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
+}
+
+bool
+octave_uint8_matrix::load_hdf5 (octave_hdf5_id loc_id, const char *name)
+{
+  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
+}
+
 template class octave_base_scalar<octave_uint8>;
 
 template class octave_base_int_scalar<octave_uint8>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint8_scalar,
                                      "uint8 scalar", "uint8");
+
+bool
+octave_uint8_scalar::save_hdf5 (octave_hdf5_id loc_id, const char *name,
+                                bool flag)
+{
+  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
+}
+
+bool
+octave_uint8_scalar::load_hdf5 (octave_hdf5_id loc_id, const char *name)
+{
+  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
+}
