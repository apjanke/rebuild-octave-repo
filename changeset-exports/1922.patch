# HG changeset patch
# User jwe
# Date 824007200 0
#      Sun Feb 11 02:53:20 1996 +0000
# Node ID 8a57554f31424ed30c1c31014c1d3431d403f69b
# Parent  ce0db0ca072947d18bdfb0b26dbf6f49bfc6b4f2
[project @ 1996-02-11 02:53:20 by jwe]

diff --git a/liboctave/CmplxQRP.cc b/liboctave/CmplxQRP.cc
--- a/liboctave/CmplxQRP.cc
+++ b/liboctave/CmplxQRP.cc
@@ -48,104 +48,136 @@ extern "C"
 }
 
 // It would be best to share some of this code with ComplexQR class...
 
 ComplexQRP::ComplexQRP (const ComplexMatrix& a, QR::type qr_type)
 {
   assert (qr_type != QR::raw);
 
+  tau = 0;
+  work = 0;
+  tmp_data = 0;
+  jpvt = 0;
+
   int m = a.rows ();
   int n = a.cols ();
 
   if (m == 0 || n == 0)
     {
       (*current_liboctave_error_handler)
 	("ComplexQR must have non-empty matrix");
       return;
     }
 
-  Complex *tmp_data;
   int min_mn = m < n ? m : n;
-  Complex *tau = new Complex[min_mn];
+  tau = new Complex[min_mn];
+
   int lwork = n;
-  Complex *work = new Complex[lwork];
+  work = new Complex[lwork];
+
   int info = 0;
 
   if (m > n)
     {
       tmp_data = new Complex [m*m];
       copy (tmp_data, a.data (), a.length ());
     }
   else
     tmp_data = dup (a.data (), a.length ());
 
-
   work = new Complex[n];
-  double *rwork = new double[2*n];
-  int *jpvt = new int[n];
+  rwork = new double[2*n];
+  jpvt = new int[n];
 
   // Clear Pivot vector (code to enforce a certain permutation would
   // go here...)
 
   for (int i = 0; i < n; i++)
     jpvt[i] = 0;      
 
-  F77_FCN (zgeqpf, ZGEQPF) (m, n, tmp_data, m, jpvt, tau, work, rwork,
-			    info);
+  F77_XFCN (zgeqpf, ZGEQPF, (m, n, tmp_data, m, jpvt, tau, work, rwork,
+			     info));
 
-  // Form Permutation matrix (if economy is requested, return the
-  // indices only!)
+  delete [] work;
+  work = 0;
 
-  if (qr_type == QR::economy && m > n)
-    {
-      p.resize (1, n, 0.0);
-      for (int j = 0; j < n; j++)
-	p.elem (0, j) = jpvt[j];
-    }
+  delete [] rwork;
+  rwork = 0;
+
+  if (f77_exception_encountered)
+    (*current_liboctave_error_handler) ("unrecoverable error in zgeqpf");
   else
     {
-      p.resize (n, n, 0.0);
+      // Form Permutation matrix (if economy is requested, return the
+      // indices only!)
+
+      if (qr_type == QR::economy && m > n)
+	{
+	  p.resize (1, n, 0.0);
+	  for (int j = 0; j < n; j++)
+	    p.elem (0, j) = jpvt[j];
+	}
+      else
+	{
+	  p.resize (n, n, 0.0);
+	  for (int j = 0; j < n; j++)
+	    p.elem (jpvt[j]-1, j) = 1.0;
+	}
+
+      delete [] jpvt;
+      jpvt = 0;
+
+      volatile int n2;
+
+      if (qr_type == QR::economy && m > n)
+	{
+	  n2 = n;
+	  r.resize (n, n, 0.0);
+	}
+      else
+	{
+	  n2 = m;
+	  r.resize (m, n, 0.0);
+	}
+
       for (int j = 0; j < n; j++)
-	p.elem (jpvt[j]-1, j) = 1.0;
+	{
+	  int limit = j < min_mn-1 ? j : min_mn-1;
+	  for (int i = 0; i <= limit; i++)
+	    r.elem (i, j) = tmp_data[m*j+i];
+	}
+
+      lwork = 32*m;
+      work = new Complex[lwork];
+
+      F77_XFCN (zungqr, ZUNGQR, (m, m, min_mn, tmp_data, m, tau, work,
+				 lwork, info));
+
+      if (f77_exception_encountered)
+	(*current_liboctave_error_handler) ("unrecoverable error in zungqr");
+      else
+	{
+	  q = ComplexMatrix (tmp_data, m, m);
+	  tmp_data = 0;
+	  q.resize (m, n2);
+	}
     }
 
+  delete [] tau;
+  tau = 0;
+
+  delete [] work;
+  work = 0;
+
+  delete [] tmp_data;
+  tmp_data = 0;
+
   delete [] jpvt;
-  delete [] work;
-
-  int n2;
-  if (qr_type == QR::economy && m > n)
-    {
-      n2 = n;
-      r.resize (n, n, 0.0);
-    }
-  else
-    {
-      n2 = m;
-      r.resize (m, n, 0.0);
-    }
-
-  for (int j = 0; j < n; j++)
-    {
-      int limit = j < min_mn-1 ? j : min_mn-1;
-      for (int i = 0; i <= limit; i++)
-	r.elem (i, j) = tmp_data[m*j+i];
-    }
-
-  lwork = 32*m;
-  work = new Complex[lwork];
-
-  F77_FCN (zungqr, ZUNGQR) (m, m, min_mn, tmp_data, m, tau, work,
-			    lwork, info);
-
-  q = ComplexMatrix (tmp_data, m, m);
-  q.resize (m, n2);
-
-  delete [] tau;
-  delete [] work;
+  jpvt = 0;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CmplxQRP.h b/liboctave/CmplxQRP.h
--- a/liboctave/CmplxQRP.h
+++ b/liboctave/CmplxQRP.h
@@ -32,39 +32,48 @@ class ostream;
 
 #include "CmplxQR.h"
 
 class
 ComplexQRP : public ComplexQR
 {
 public:
 
-  ComplexQRP (void) : ComplexQR (), p () { }
+  ComplexQRP (void) : ComplexQR (), p (), jpvt (0), rwork (0) { }
 
   ComplexQRP (const ComplexMatrix& A, QR::type qr_type = QR::std);
 
   ComplexQRP (const ComplexQRP& a) : ComplexQR (a), p (a.p) { }
 
   ComplexQRP& operator = (const ComplexQRP& a)
     {
       if (this != &a)
 	{
 	  ComplexQR::operator = (a);
 	  p = a.p;
 	}
       return *this;
     }
 
+  ~ComplexQRP (void)
+    {
+      delete [] jpvt;
+      delete [] rwork;
+    }
+
   Matrix P (void) const { return p; }
 
   friend ostream&  operator << (ostream& os, const ComplexQRP& a);
 
 private:
 
   Matrix p;
+
+  int *jpvt;
+  double *rwork;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/dbleQRP.cc b/liboctave/dbleQRP.cc
--- a/liboctave/dbleQRP.cc
+++ b/liboctave/dbleQRP.cc
@@ -48,99 +48,129 @@ extern "C"
 }
 
 // It would be best to share some of this code with QR class...
 
 QRP::QRP (const Matrix& a, QR::type qr_type)
 {
   assert (qr_type != QR::raw);
 
+  tau = 0;
+  work = 0;
+  tmp_data = 0;
+  jpvt = 0;
+
   int m = a.rows ();
   int n = a.cols ();
 
   if (m == 0 || n == 0)
     {
       (*current_liboctave_error_handler) ("QR must have non-empty matrix");
       return;
     }
 
-  double *tmp_data;
   int min_mn = m < n ? m : n;
-  double *tau = new double[min_mn];
+  tau = new double[min_mn];
+
   int lwork = 3*n;
-  double *work = new double[lwork];
+  work = new double[lwork];
+
   int info = 0;
 
   if (m > n)
     {
       tmp_data = new double [m*m];
       copy (tmp_data, a.data (), a.length ());
     }
   else
     tmp_data = dup (a.data (), a.length ());
 
-  int *jpvt = new int[n];
+  jpvt = new int[n];
 
   // Clear Pivot vector (code to enforce a certain permutation would
   // go here...)
 
   for (int i = 0; i < n; i++)
     jpvt[i] = 0;
 
-  F77_FCN (dgeqpf, DGEQPF) (m, n, tmp_data, m, jpvt, tau, work, info);
-
-  // Form Permutation matrix (if economy is requested, return the
-  // indices only!)
+  F77_XFCN (dgeqpf, DGEQPF, (m, n, tmp_data, m, jpvt, tau, work, info));
 
-  if (qr_type == QR::economy && m > n)
-    {
-      p.resize (1, n, 0.0);
-      for (int j = 0; j < n; j++)
-	p.elem (0, j) = jpvt[j];
-    }
+  delete [] work;
+  work = 0;
+
+  if (f77_exception_encountered)
+    (*current_liboctave_error_handler) ("unrecoverable error in dgeqpf");
   else
     {
-      p.resize (n, n, 0.0);
+      // Form Permutation matrix (if economy is requested, return the
+      // indices only!)
+
+      if (qr_type == QR::economy && m > n)
+	{
+	  p.resize (1, n, 0.0);
+	  for (int j = 0; j < n; j++)
+	    p.elem (0, j) = jpvt[j];
+	}
+      else
+	{
+	  p.resize (n, n, 0.0);
+	  for (int j = 0; j < n; j++)
+	    p.elem (jpvt[j]-1, j) = 1.0;
+	}
+
+      delete [] jpvt;
+      jpvt = 0;
+
+      volatile int n2;
+
+      if (qr_type == QR::economy && m > n)
+	{
+	  n2 = n;
+	  r.resize (n, n, 0.0);
+	}
+      else
+	{
+	  n2 = m;
+	  r.resize (m, n, 0.0);
+	}
+
       for (int j = 0; j < n; j++)
-	p.elem (jpvt[j]-1, j) = 1.0;
+	{
+	  int limit = j < min_mn-1 ? j : min_mn-1;
+	  for (int i = 0; i <= limit; i++)
+	    r.elem (i, j) = tmp_data[m*j+i];
+	}
+
+      lwork = 32*m;
+      work = new double[lwork];
+
+      F77_XFCN (dorgqr, DORGQR, (m, m, min_mn, tmp_data, m, tau, work,
+				 lwork, info));
+
+      if (f77_exception_encountered)
+	(*current_liboctave_error_handler) ("unrecoverable error in dorgqr");
+      else
+	{
+	  q = Matrix (tmp_data, m, m);
+	  tmp_data = 0;
+	  q.resize (m, n2);
+	}
     }
 
+  delete [] tau;
+  tau = 0;
+
+  delete [] work;
+  work = 0;
+
+  delete [] tmp_data;
+  tmp_data = 0;
+
   delete [] jpvt;
-  delete [] work;
-
-  int n2;
-  if (qr_type == QR::economy && m > n)
-    {
-      n2 = n;
-      r.resize (n, n, 0.0);
-    }
-  else
-    {
-      n2 = m;
-      r.resize (m, n, 0.0);
-    }
-
-  for (int j = 0; j < n; j++)
-    {
-      int limit = j < min_mn-1 ? j : min_mn-1;
-      for (int i = 0; i <= limit; i++)
-	r.elem (i, j) = tmp_data[m*j+i];
-    }
-
-  lwork = 32*m;
-  work = new double[lwork];
-
-  F77_FCN (dorgqr, DORGQR) (m, m, min_mn, tmp_data, m, tau, work,
-			    lwork, info);
-
-  q = Matrix (tmp_data, m, m);
-  q.resize (m, n2);
-
-  delete [] tau;
-  delete [] work;
+  jpvt = 0;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dbleQRP.h b/liboctave/dbleQRP.h
--- a/liboctave/dbleQRP.h
+++ b/liboctave/dbleQRP.h
@@ -32,40 +32,44 @@ class ostream;
 
 #include "dbleQR.h"
 
 class
 QRP : public QR
 {
 public:
 
-  QRP (void) : QR (), p () { }
+  QRP (void) : QR (), p (), jpvt (0) { }
 
   QRP (const Matrix& A, QR::type qr_type = QR::std);
 
   QRP (const QRP& a) : QR (a), p (a.p) { }
 
   QRP& operator = (const QRP& a)
     {
       if (this != &a)
 	{
 	  QR::operator = (a);
 	  p = a.p;
 	}
 
       return *this;
     }
 
+  ~QRP (void) { delete [] jpvt; }
+
   Matrix P (void) const { return p; }
 
   friend ostream&  operator << (ostream& os, const QRP& a);
 
-private:
+protected:
 
   Matrix p;
+
+  int *jpvt;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
