# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1255431006 -7200
#      Tue Oct 13 12:50:06 2009 +0200
# Node ID f426899f4b9c9a0919aaeecd8b34fa84bd5c681a
# Parent  97d683d8b9ff2b0fdd793bc5282cb299f3bc4fc2
fix reduction functions docstrings

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-10-13  Jaroslav Hajek  <highegg@gmail.com>
+
+	* data.cc (Fcumsum, Fcumprod, Fprod, Fsum, Fsumsq): Correct help
+	string.
+
 2009-10-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* data.cc (Fsum): Rewrite.
 	(Fcumsum): Rewrite.
 	(NATIVE_REDUCTION, NATIVE_REDUCTION_1): Remove.
 
 2009-10-12  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1543,22 +1543,18 @@ sign as @var{x}.  If @var{y} is zero, th
  \
   return retval
 
 DEFUN (cumprod, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} cumprod (@var{x})\n\
 @deftypefnx {Built-in Function} {} cumprod (@var{x}, @var{dim})\n\
 Cumulative product of elements along dimension @var{dim}.  If\n\
-@var{dim} is omitted, it defaults to 1 (column-wise cumulative\n\
-products).\n\
+@var{dim} is omitted, it defaults to the first non-singleton dimension.\n\
 \n\
-As a special case, if @var{x} is a vector and @var{dim} is omitted,\n\
-return the cumulative product of the elements as a vector with the\n\
-same orientation as @var{x}.\n\
 @seealso{prod, cumsum}\n\
 @end deftypefn")
 {
   DATA_REDUCTION (cumprod);
 }
 
 /*
 
@@ -1583,21 +1579,17 @@ same orientation as @var{x}.\n\
  */
 
 DEFUN (cumsum, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} cumsum (@var{x})\n\
 @deftypefnx {Built-in Function} {} cumsum (@var{x}, @var{dim})\n\
 @deftypefnx {Built-in Function} {} cumsum (@dots{}, 'native')\n\
 Cumulative sum of elements along dimension @var{dim}.  If @var{dim}\n\
-is omitted, it defaults to 1 (column-wise cumulative sums).\n\
-\n\
-As a special case, if @var{x} is a vector and @var{dim} is omitted,\n\
-return the cumulative sum of the elements as a vector with the\n\
-same orientation as @var{x}.\n\
+is omitted, it defaults to the first non-singleton dimension.\n\
 \n\
 The \"native\" argument implies the summation is performed in native type.\n\
  See @code{sum} for a complete description and example of the use of\n\
 \"native\".\n\
 @seealso{sum, cumprod}\n\
 @end deftypefn")
 {
   octave_value retval;
@@ -1831,20 +1823,17 @@ Given a matrix argument, instead of a ve
 
  */
 
 DEFUN (prod, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} prod (@var{x})\n\
 @deftypefnx {Built-in Function} {} prod (@var{x}, @var{dim})\n\
 Product of elements along dimension @var{dim}.  If @var{dim} is\n\
-omitted, it defaults to 1 (column-wise products).\n\
-\n\
-As a special case, if @var{x} is a vector and @var{dim} is omitted,\n\
-return the product of the elements.\n\
+omitted, it defaults to the first non-singleton dimension.\n\
 @seealso{cumprod, sum}\n\
 @end deftypefn")
 {
   DATA_REDUCTION (prod);
 }
 
 /*
 
@@ -2662,35 +2651,34 @@ Return the number of columns of @var{a}.
 DEFUN (sum, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} sum (@var{x})\n\
 @deftypefnx {Built-in Function} {} sum (@var{x}, @var{dim})\n\
 @deftypefnx {Built-in Function} {} sum (@dots{}, 'native')\n\
 @deftypefnx {Built-in Function} {} sum (@dots{}, 'double')\n\
 @deftypefnx {Built-in Function} {} sum (@dots{}, 'extra')\n\
 Sum of elements along dimension @var{dim}.  If @var{dim} is\n\
-omitted, it defaults to 1 (column-wise sum).\n\
-\n\
-As a special case, if @var{x} is a vector and @var{dim} is omitted,\n\
-return the sum of the elements.\n\
+omitted, it defaults to the first non-singleton dimension.\n\
 \n\
 If the optional argument 'native' is given, then the sum is performed\n\
 in the same type as the original argument, rather than in the default\n\
 double type.  For example\n\
 \n\
 @example\n\
 @group\n\
 sum ([true, true])\n\
   @result{} 2\n\
 sum ([true, true], 'native')\n\
   @result{} true\n\
 @end group\n\
 @end example\n\
+  \n\
 On the contrary, if 'double' is given, the sum is performed in double precision\n\
 even for single precision inputs.\n\
+\n\
 For double precision inputs, 'extra' indicates that a more accurate algorithm\n\
 than straightforward summation is to be used. For single precision inputs, 'extra' is\n\
 the same as 'double'. Otherwise, 'extra' has no effect.\n\
 @seealso{cumsum, sumsq, prod}\n\
 @end deftypefn")
 {
   octave_value retval;
 
@@ -2877,20 +2865,17 @@ the same as 'double'. Otherwise, 'extra'
 
 */
 
 DEFUN (sumsq, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} sumsq (@var{x})\n\
 @deftypefnx {Built-in Function} {} sumsq (@var{x}, @var{dim})\n\
 Sum of squares of elements along dimension @var{dim}.  If @var{dim}\n\
-is omitted, it defaults to 1 (column-wise sum of squares).\n\
-\n\
-As a special case, if @var{x} is a vector and @var{dim} is omitted,\n\
-return the sum of squares of the elements.\n\
+is omitted, it defaults to the first non-singleton dimension.\n\
 \n\
 This function is conceptually equivalent to computing\n\
 @example\n\
 sum (x .* conj (x), dim)\n\
 @end example\n\
 but it uses less memory and avoids calling @code{conj} if @var{x} is real.\n\
 @seealso{sum}\n\
 @end deftypefn")
