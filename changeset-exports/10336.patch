# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1266559093 -3600
#      Fri Feb 19 06:58:13 2010 +0100
# Node ID 1603dfe72933232303305213b95eb000fe828483
# Parent  9dd04a06410e832b9505022e3f50a5231208685b
obsolete fstat, handle the functionality by stat

diff --git a/scripts/deprecated/fstat.m b/scripts/deprecated/fstat.m
new file mode 100644
--- /dev/null
+++ b/scripts/deprecated/fstat.m
@@ -0,0 +1,35 @@
+## Copyright (C) 2010 VZLU Prague
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {[@var{info}, @var{err}, @var{msg}] = } fstat (fid)
+## This function has been deprecated.  Use stat instead.
+## @end deftypefn
+
+## Deprecated in version 3.4
+
+function [info, err, msg] = fstat (fid)
+  persistent warned = false;
+  if (! warned)
+    warned = true;
+    warning ("Octave:deprecated-function",
+             "fstat is obsolete and will be removed from a future version of Octave, please use stat instead");
+  endif
+
+  [info, err, msg] = stat (fid);
+endfunction
diff --git a/scripts/deprecated/module.mk b/scripts/deprecated/module.mk
--- a/scripts/deprecated/module.mk
+++ b/scripts/deprecated/module.mk
@@ -1,16 +1,17 @@
 FCN_FILE_DIRS += deprecated
 
 deprecated_FCN_FILES = \
   deprecated/cellidx.m \
   deprecated/clg.m \
   deprecated/complement.m \
   deprecated/create_set.m \
   deprecated/dmult.m \
+  deprecated/fstat.m \
   deprecated/iscommand.m \
   deprecated/israwcommand.m \
   deprecated/isstr.m \
   deprecated/lchol.m \
   deprecated/loadimage.m \
   deprecated/mark_as_command.m \
   deprecated/mark_as_rawcommand.m \
   deprecated/setstr.m \
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-02-18  Jaroslav Hajek  <highegg@gmail.com>
+
+	* syscalls.cc (mk_stat_result): New helper function.
+	(Flstat): Call it here.
+	(Fstat): Also here. Handle also the fstat case here.
+
 2010-02-18  Thorsten Meyer  <thorsten.meyier@gmx.de>
 
 	* dirfns.cc (Fglob): Document globbing patterns, add test.
 
 2010-02-18  Jaroslav Hajek  <highegg@gmail.com>
 
 	* load-path.cc (in_path_list): New helper function.
 	(add_to_fcn_map): Use it here.
diff --git a/src/syscalls.cc b/src/syscalls.cc
--- a/src/syscalls.cc
+++ b/src/syscalls.cc
@@ -80,16 +80,37 @@ mk_stat_map (const base_file_stat& fs)
 #endif
 #if defined (HAVE_STRUCT_STAT_ST_BLOCKS)
   m.assign ("blocks", fs.blocks ());
 #endif
 
   return m;
 }
 
+static octave_value_list
+mk_stat_result (const base_file_stat& fs)
+{
+  octave_value_list retval;
+
+  if (fs)
+    {
+      retval(2) = std::string ();
+      retval(1) = 0;
+      retval(0) = octave_value (mk_stat_map (fs));
+    }
+  else
+    {
+      retval(2) = fs.error ();
+      retval(1) = -1;
+      retval(0) = Matrix ();
+    }
+
+  return retval;
+}
+
 DEFUNX ("dup2", Fdup2, args, ,
  "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{fid}, @var{msg}] =} dup2 (@var{old}, @var{new})\n\
 Duplicate a file descriptor.\n\
 \n\
 If successful, @var{fid} is greater than zero and contains the new file\n\
 ID.  Otherwise, @var{fid} is negative and @var{msg} contains a\n\
 system-dependent error message.\n\
@@ -714,91 +735,41 @@ Return 0 if successful, otherwise return
         }
     }
   else
     print_usage ();
 
   return retval;
 }
 
-DEFUNX ("fstat", Ffstat, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {[@var{info}, @var{err}, @var{msg}] =} fstat (@var{fid})\n\
-Return information about the open file @var{fid}.  See @code{stat}\n\
-for a description of the contents of @var{info}.\n\
-@end deftypefn")
-{
-  octave_value_list retval;
-
-  if (args.length () == 1)
-    {
-      int fid = octave_stream_list::get_file_number (args(0));
-
-      if (! error_state)
-        {
-          file_fstat fs (fid);
-
-          if (fs)
-            {
-              retval(2) = std::string ();
-              retval(1) = 0;
-              retval(0) = octave_value (mk_stat_map (fs));
-            }
-          else
-            {
-              retval(2) = fs.error ();
-              retval(1) = -1;
-              retval(0) = Matrix ();
-            }
-        }
-    }
-  else
-    print_usage ();
-
-  return retval;
-}
-
 DEFUNX ("lstat", Flstat, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{info}, @var{err}, @var{msg}] =} lstat (@var{file})\n\
 See stat.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 1)
     {
       std::string fname = args(0).string_value ();
 
       if (! error_state)
         {
           file_stat fs (fname, false);
 
-          if (fs)
-            {
-              retval(2) = std::string ();
-              retval(1) = 0;
-              retval(0) = mk_stat_map (fs);
-            }
-          else
-            {
-              retval(2) = fs.error ();
-              retval(1) = -1;
-              retval(0) = Matrix ();
-            }
+          retval = mk_stat_result (fs);
         }
     }
   else
     print_usage ();
 
   return retval;
 }
 
-
-
 DEFUNX ("mkfifo", Fmkfifo, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} mkfifo (@var{name}, @var{mode})\n\
 Create a @var{fifo} special file named @var{name} with file mode @var{mode}\n\
 \n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
 Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
 system-dependent error message.\n\
@@ -994,33 +965,36 @@ For example,\n\
      @result{} msg = \n\
 @end example\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 1)
     {
-      std::string fname = args(0).string_value ();
-
-      if (! error_state)
+      if (args(0).is_scalar_type ())
         {
-          file_stat fs (fname);
+          int fid = octave_stream_list::get_file_number (args(0));
 
-          if (fs)
+          if (! error_state)
             {
-              retval(2) = std::string ();
-              retval(1) = 0;
-              retval(0) = octave_value (mk_stat_map (fs));
+              file_fstat fs (fid);
+
+              retval = mk_stat_result (fs);
             }
-          else
+        }
+      else
+        {
+          std::string fname = args(0).string_value ();
+
+          if (! error_state)
             {
-              retval(2) = fs.error ();
-              retval(1) = -1;
-              retval(0) = Matrix ();
+              file_stat fs (fname);
+
+              retval = mk_stat_result (fs);
             }
         }
     }
   else
     print_usage ();
 
   return retval;
 }
