# HG changeset patch
# User Rik <rik@octave.org>
# Date 1384324670 28800
#      Tue Nov 12 22:37:50 2013 -0800
# Node ID 56d2b68384053c74712d1a75ddfd19040697c435
# Parent  46da2c323ad6661593f06a657f96807ec18495ec
Issue an error if reshape called with just a single dimension.

* data.cc (Freshape): Issue an error if reshape called with just a single
dimension.  Add more %!error input validation tests.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -4948,16 +4948,22 @@ the unspecified dimension.\n\
   int nargin = args.length ();
 
   dim_vector new_dims;
 
   if (nargin == 2)
     {
       Array<octave_idx_type> new_size = args(1).octave_idx_type_vector_value ();
 
+      if (new_size.length () < 2)
+        {
+          error ("reshape: SIZE must have 2 or more dimensions");
+          return retval;
+        }
+
       new_dims = dim_vector::alloc (new_size.length ());
 
       for (octave_idx_type i = 0; i < new_size.length (); i++)
         {
           if (new_size(i) < 0)
             {
               error ("reshape: SIZE must be non-negative");
               break;
@@ -5039,20 +5045,25 @@ the unspecified dimension.\n\
 
 %!assert (size (reshape (ones (4, 4, "single"), 2, 8)), [2, 8])
 %!assert (size (reshape (ones (4, 4, "single"), 8, 2)), [8, 2])
 %!assert (size (reshape (ones (15, 4, "single"), 1, 60)), [1, 60])
 %!assert (size (reshape (ones (15, 4, "single"), 60, 1)), [60, 1])
 
 %!test
 %! s.a = 1;
-%! fail ("reshape (s, 2, 3)");
+%! fail ("reshape (s, 2, 3)", "can't reshape 1x1 array to 2x3 array");
 
 %!error reshape ()
 %!error reshape (1, 2, 3, 4)
+%!error <SIZE must have 2 or more dimensions> reshape (1:3, 3)
+%!error <SIZE must be non-negative> reshape (1:3, [3 -1])
+%!error <only a single dimension can be unknown> reshape (1:3, 1,[],[],3)
+%!error <SIZE must be non-negative> reshape (1:3, 3, -1)
+%!error <SIZE is not divisible> reshape (1:3, 3, [], 2)
 */
 
 DEFUN (vec, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{v} =} vec (@var{x})\n\
 @deftypefnx {Built-in Function} {@var{v} =} vec (@var{x}, @var{dim})\n\
 Return the vector obtained by stacking the columns of the matrix @var{x}\n\
 one above the other.  Without @var{dim} this is equivalent to\n\
