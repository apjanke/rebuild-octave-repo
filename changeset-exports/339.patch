# HG changeset patch
# User jwe
# Date 760606159 0
#      Mon Feb 07 07:29:19 1994 +0000
# Node ID 94f0f219a94681da728f68ff07f6105dff945463
# Parent  82d30a23c979e16061963f1393cee6ee036a3d6d
[project @ 1994-02-07 07:26:24 by jwe]

diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -98,17 +98,17 @@ int reading_fcn_file = 0;
 
 // Simple name of function file we are reading.
 char *curr_fcn_file_name = (char *) NULL;
 
 // Nonzero means we're parsing a script file.
 int reading_script_file = 0;
 
 // If we are reading from an M-file, this is it.
-FILE *mf_instream = (FILE *) NULL;
+FILE *ff_instream = (FILE *) NULL;
 
 // Nonzero means we are using readline.
 int using_readline = 1;
 
 // Nonzero means commands are echoed as they are executed (-x).
 int echo_input = 0;
 
 // Nonzero means this is an interactive shell.
@@ -219,17 +219,17 @@ octave_read (char *buf, int max_size)
 	    }
 	}
       current_input_line = cp;
     }
   else
     {
       FILE *curr_stream = rl_instream;
       if (reading_fcn_file || reading_script_file)
-	curr_stream = mf_instream;
+	curr_stream = ff_instream;
 
       assert (curr_stream != (FILE *) NULL);
 
 // Why is this required?
       buf[0] = '\0';
 
       if (fgets (buf, max_size, curr_stream) != (char *) NULL)
 	{
@@ -278,17 +278,17 @@ get_input_from_file (char *name, int war
 
   if (name && *name)
     instream = fopen (name, "r");
 
   if (instream == (FILE *) NULL && warn)
     warning ("%s: no such file or directory", name);
 
   if (reading_fcn_file || reading_script_file)
-    mf_instream = instream;
+    ff_instream = instream;
   else
     rl_instream = instream;
 
   return instream;
 }
 
 /*
  * Fix things up so that input can come from the standard input.  This
diff --git a/src/input.h b/src/input.h
--- a/src/input.h
+++ b/src/input.h
@@ -44,17 +44,17 @@ extern int reading_fcn_file;
 
 // Simple name of M-file we are reading.
 extern char *curr_fcn_file_name;
 
 // Nonzero means we're parsing a script file.
 extern int reading_script_file;
 
 // If we are reading from an M-file, this is it.
-extern FILE *mf_instream;
+extern FILE *ff_instream;
 
 // Nonzero means we are using readline.
 extern int using_readline;
 
 // Nonzero means commands are echoed as they are executed (-x).
 extern int echo_input;
 
 // Nonzero means this is an interactive shell.
diff --git a/src/tree.h.old b/src/tree.h.old
--- a/src/tree.h.old
+++ b/src/tree.h.old
@@ -189,18 +189,18 @@ public:
   void document (char *s);
 
   tree_constant assign (tree_constant& t);
   tree_constant assign (tree_constant& t, tree_constant *args, int nargs);
 
   void bump_value (tree::expression_type);
 
   int parse_fcn_file (int exec_script = 1);
-  int parse_fcn_file (char *mf, int exec_script = 1);
-  void parse_fcn_file (FILE *mfile, char *mf);
+  int parse_fcn_file (char *ff, int exec_script = 1);
+  void parse_fcn_file (FILE *ffile, char *ff);
 
   tree *do_lookup (int& script_file_executed);
 
   void mark_as_formal_parameter (void);
 
   void mark_for_possible_ans_assign (void);
 
   tree_constant eval (int print);
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -74,18 +74,18 @@ extern void mark_for_deletion (const cha
 extern void cleanup_tmp_files (void);
 extern int send_to_plot_stream (const char *cmd);
 extern void close_plot_stream (void);
 extern int almost_match (const char *std, const char *s,
 			 int min_match_len = 1, int case_sens = 1);
 extern int keyword_almost_match (const char **std, int *min_len,
 				 const char *s, int min_toks_to_match,
 				 int max_toks);
-extern char **get_fcn_file_names (int& mfl_len, const char *dir, int no_suffix);
-extern char **get_fcn_file_names (int& mfl_len, int no_suffix);
+extern char **get_fcn_file_names (int& ffl_len, const char *dir, int no_suffix);
+extern char **get_fcn_file_names (int& ffl_len, int no_suffix);
 extern int NINT (double x);
 extern double D_NINT (double x);
 extern void delete_ppchar (char **);
 
 extern "C"
 {
 extern int gethostname ();
 }
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -77,22 +77,22 @@ symbol_out_of_date (symbol_record *sr)
   if (ignore == 2)
     return 0;
 
   if (sr != (symbol_record *) NULL)
     {
       tree *ans = sr->def ();
       if (ans != NULL_TREE)
 	{
-	  char *mf = ans->fcn_file_name ();
-	  if (! (mf == (char *) NULL
+	  char *ff = ans->fcn_file_name ();
+	  if (! (ff == (char *) NULL
 		 || (ignore && ans->is_system_fcn_file ())))
 	    {
 	      time_t tp = ans->time_parsed ();
-	      char *fname = fcn_file_in_path (mf);
+	      char *fname = fcn_file_in_path (ff);
 	      int status = is_newer (fname, tp);
 	      delete [] fname;
 	      if (status > 0)
 		return 1;
 	    }
 	}
     }
   return 0;
@@ -693,35 +693,35 @@ takes_correct_nargs (tree *fcn, int expe
 
 char **
 make_name_list (void)
 {
   int key_len = 0;
   int glb_len = 0;
   int top_len = 0;
   int lcl_len = 0;
-  int mfl_len = 0;
+  int ffl_len = 0;
 
   char **key = (char **) NULL;
   char **glb = (char **) NULL;
   char **top = (char **) NULL;
   char **lcl = (char **) NULL;
-  char **mfl = (char **) NULL;
+  char **ffl = (char **) NULL;
 
 // Each of these functions returns a new vector of pointers to new
 // strings.
 
   key = names (keyword_help (), key_len);
   glb = global_sym_tab->list (glb_len);
   top = top_level_sym_tab->list (top_len);
   if (top_level_sym_tab != curr_sym_tab)
     lcl = curr_sym_tab->list (lcl_len);
-  mfl = get_fcn_file_names (mfl_len, 1);
+  ffl = get_fcn_file_names (ffl_len, 1);
 
-  int total_len = key_len + glb_len + top_len + lcl_len + mfl_len;
+  int total_len = key_len + glb_len + top_len + lcl_len + ffl_len;
 
   char **list = new char * [total_len+1];
   
 // Put all the symbols in one big list.  Only copy pointers, not the
 // strings they point to, then only delete the original array of
 // pointers, and not the strings they point to.
 
   int j = 0;
@@ -733,26 +733,26 @@ make_name_list (void)
     list[j++] = glb[i];
 
   for (i = 0; i < top_len; i++)
     list[j++] = top[i];
 
   for (i = 0; i < lcl_len; i++)
     list[j++] = lcl[i];
 
-  for (i = 0; i < mfl_len; i++)
-    list[j++] = mfl[i];
+  for (i = 0; i < ffl_len; i++)
+    list[j++] = ffl[i];
 
   list[j] = (char *) NULL;
 
   delete [] key;
   delete [] glb;
   delete [] top;
   delete [] lcl;
-  delete [] mfl;
+  delete [] ffl;
 
   return list;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
