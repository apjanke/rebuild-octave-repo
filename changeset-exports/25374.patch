# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1526331278 14400
#      Mon May 14 16:54:38 2018 -0400
# Branch stable
# Node ID c8f49ee7a6870ea0caddaeed4026d7f8ba7e50d4
# Parent  97f1d513aaf6ec47412de427af4875c8758de10c
also update load-path info if private subdir time stamp changes (bug #53856)

* load-path.cc (load_path::dir_info::update): Also check for private
subdirectory and reinitialize if it has changed since the last check.

diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -1113,16 +1113,19 @@ namespace octave
     return retval;
   }
 
   void
   load_path::dir_info::update (void)
   {
     sys::file_stat fs (dir_name);
 
+    sys::file_stat pfs (sys::file_ops::concat (dir_name, "private"));
+    bool has_private_dir = pfs && pfs.is_dir ();
+
     if (! fs)
       {
         std::string msg = fs.error ();
         warning ("load_path: %s: %s", dir_name.c_str (), msg.c_str ());
       }
     else
       {
         if (is_relative)
@@ -1137,18 +1140,21 @@ namespace octave
                   {
                     // The directory is in the cache of all directories we have
                     // visited (indexed by absolute name).  If it is out of date,
                     // initialize it.  Otherwise, copy the info from the cache.
                     // By doing that, we avoid unnecessary calls to stat that can
                     // slow things down tremendously for large directories.
                     const dir_info& di = p->second;
 
-                    if (fs.mtime () + fs.time_resolution ()
-                        > di.dir_time_last_checked)
+                    if ((fs.mtime () + fs.time_resolution ()
+                         > di.dir_time_last_checked)
+                        || (has_private_dir
+                            && (pfs.mtime () + pfs.time_resolution ()
+                                > dir_time_last_checked)))
                       initialize ();
                     else
                       {
                         // Copy over info from cache, but leave dir_name and
                         // is_relative unmodified.
                         this->abs_dir_name = di.abs_dir_name;
                         this->dir_mtime = di.dir_mtime;
                         this->dir_time_last_checked = di.dir_time_last_checked;
@@ -1168,17 +1174,20 @@ namespace octave
             catch (const execution_exception&)
               {
                 // Skip updating if we don't know where we are,
                 // but don't treat it as an error.
                 interpreter::recover_from_exception ();
               }
           }
         // Absolute path, check timestamp to see whether it requires re-caching
-        else if (fs.mtime () + fs.time_resolution () > dir_time_last_checked)
+        else if (fs.mtime () + fs.time_resolution () > dir_time_last_checked
+                 || (has_private_dir
+                     && (pfs.mtime () + pfs.time_resolution ()
+                         > dir_time_last_checked)))
           initialize ();
       }
   }
 
   bool
   load_path::dir_info::is_package (const std::string& name) const
   {
     size_t pos = name.find ('.');
