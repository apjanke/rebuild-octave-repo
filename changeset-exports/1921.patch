# HG changeset patch
# User jwe
# Date 824005918 0
#      Sun Feb 11 02:31:58 1996 +0000
# Node ID ce0db0ca072947d18bdfb0b26dbf6f49bfc6b4f2
# Parent  6fdb56b2cb332ce87714708f88772a29c60f121e
[project @ 1996-02-11 02:31:58 by jwe]

diff --git a/liboctave/CmplxQR.cc b/liboctave/CmplxQR.cc
--- a/liboctave/CmplxQR.cc
+++ b/liboctave/CmplxQR.cc
@@ -42,88 +42,112 @@ extern "C"
 
   int F77_FCN (zungqr, ZUNGQR) (const int&, const int&, const int&,
 				Complex*, const int&, Complex*,
 				Complex*, const int&, int&);
 }
 
 ComplexQR::ComplexQR (const ComplexMatrix& a, QR::type qr_type)
 {
+  tau = 0;
+  work = 0;
+  tmp_data = 0;
+
   int m = a.rows ();
   int n = a.cols ();
 
   if (m == 0 || n == 0)
     {
       (*current_liboctave_error_handler)
 	("ComplexQR must have non-empty matrix");
       return;
     }
 
-  Complex *tmp_data;
   int min_mn = m < n ? m : n;
-  Complex *tau = new Complex[min_mn];
+  tau = new Complex[min_mn];
+
   int lwork = 32*n;
-  Complex *work = new Complex[lwork];
+  work = new Complex[lwork];
+
   int info = 0;
 
   if (m > n)
     {
       tmp_data = new Complex [m*m];
       copy (tmp_data, a.data (), a.length ());
     }
   else
     tmp_data = dup (a.data (), a.length ());
 
-  F77_FCN (zgeqrf, ZGEQRF) (m, n, tmp_data, m, tau, work, lwork,
-			    info);
+  F77_XFCN (zgeqrf, ZGEQRF, (m, n, tmp_data, m, tau, work, lwork, info));
 
   delete [] work;
+  work = 0;
 
-  if (qr_type == QR::raw)
-    {
-      for (int j = 0; j < min_mn; j++)
-	{
-	  int limit = j < min_mn - 1 ? j : min_mn - 1;
-	  for (int i = limit + 1; i < m; i++)
-	    tmp_data[m*j+i] *= tau[j];
-	}
-    }
+  if (f77_exception_encountered)
+    (*current_liboctave_error_handler) ("unrecoverable error in zgeqrf");
   else
     {
-      int n2;
-      if (qr_type == QR::economy && m > n)
+      if (qr_type == QR::raw)
 	{
-	  n2 = n;
-	  r.resize (n, n, 0.0);
+	  for (int j = 0; j < min_mn; j++)
+	    {
+	      int limit = j < min_mn - 1 ? j : min_mn - 1;
+	      for (int i = limit + 1; i < m; i++)
+		tmp_data[m*j+i] *= tau[j];
+	    }
 	}
       else
 	{
-	  n2 = m;
-	  r.resize (m, n, 0.0);
-	}
+	  volatile int n2;
 
-      for (int j = 0; j < n; j++)
-	{
-	  int limit = j < min_mn-1 ? j : min_mn-1;
-	  for (int i = 0; i <= limit; i++)
-	    r.elem (i, j) = tmp_data[m*j+i];
-	}
+	  if (qr_type == QR::economy && m > n)
+	    {
+	      n2 = n;
+	      r.resize (n, n, 0.0);
+	    }
+	  else
+	    {
+	      n2 = m;
+	      r.resize (m, n, 0.0);
+	    }
+
+	  for (int j = 0; j < n; j++)
+	    {
+	      int limit = j < min_mn-1 ? j : min_mn-1;
+	      for (int i = 0; i <= limit; i++)
+		r.elem (i, j) = tmp_data[m*j+i];
+	    }
+
+	  lwork = 32*m;
+	  work = new Complex[lwork];
 
-      lwork = 32*m;
-      work = new Complex[lwork];
+	  F77_XFCN (zungqr, ZUNGQR, (m, m, min_mn, tmp_data, m, tau, work,
+				     lwork, info));
 
-      F77_FCN (zungqr, ZUNGQR) (m, m, min_mn, tmp_data, m, tau, work,
-				lwork, info);
+	  delete [] work;
+	  work = 0;
 
-      q = ComplexMatrix (tmp_data, m, m);
-      q.resize (m, n2);
+	  if (f77_exception_encountered)
+	    (*current_liboctave_error_handler)
+	      ("unrecoverable error in zungqr");
+	  else
+	    {
+	      q = ComplexMatrix (tmp_data, m, m);
+	      tmp_data = 0;
+	      q.resize (m, n2);
+	    }
+	}
+    }
 
-      delete [] tau;
-      delete [] work;
-    }
+  delete [] tau;
+  tau = 0;
+
+  delete [] tmp_data;
+  tmp_data = 0;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CmplxQR.h b/liboctave/CmplxQR.h
--- a/liboctave/CmplxQR.h
+++ b/liboctave/CmplxQR.h
@@ -33,41 +33,52 @@ class ostream;
 #include "CMatrix.h"
 #include "dbleQR.h"
 
 class
 ComplexQR
 {
 public:
 
-  ComplexQR (void) : q (), r () { }
+  ComplexQR (void) : q (), r (), tau (0), work (0), tmp_data (0) { }
 
   ComplexQR (const ComplexMatrix& A, QR::type qr_type = QR::std);
 
   ComplexQR (const ComplexQR& a) : q (a.q), r (a.r) { }
 
   ComplexQR& operator = (const ComplexQR& a)
     {
       if (this != &a)
 	{
 	  q = a.q;
 	  r = a.r;
 	}
       return *this;
     }
 
+  ~ComplexQR (void)
+    {
+      delete [] tau;
+      delete [] work;
+      delete [] tmp_data;
+    }
+
   ComplexMatrix Q (void) const { return q; }
   ComplexMatrix R (void) const { return r; }
 
   friend ostream&  operator << (ostream& os, const ComplexQR& a);
 
 protected:
 
   ComplexMatrix q;
   ComplexMatrix r;
+
+  Complex *tau;
+  Complex *work;
+  Complex *tmp_data;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/dbleQR.cc b/liboctave/dbleQR.cc
--- a/liboctave/dbleQR.cc
+++ b/liboctave/dbleQR.cc
@@ -42,86 +42,111 @@ extern "C"
 
   int F77_FCN (dorgqr, DORGQR) (const int&, const int&, const int&,
 				double*, const int&, double*, double*,
 				const int&, int&);
 }
 
 QR::QR (const Matrix& a, QR::type qr_type)
 {
+  tau = 0;
+  work = 0;
+  tmp_data = 0;
+
   int m = a.rows ();
   int n = a.cols ();
 
   if (m == 0 || n == 0)
     {
       (*current_liboctave_error_handler) ("QR must have non-empty matrix");
       return;
     }
 
-  double *tmp_data;
   int min_mn = m < n ? m : n;
-  double *tau = new double[min_mn];
+  tau = new double[min_mn];
+
   int lwork = 32*n;
-  double *work = new double[lwork];
+  work = new double[lwork];
+
   int info = 0;
 
   if (m > n)
     {
       tmp_data = new double [m*m];
       copy (tmp_data, a.data (), a.length ());
     }
   else
     tmp_data = dup (a.data (), a.length ());
 
-  F77_FCN (dgeqrf, DGEQRF) (m, n, tmp_data, m, tau, work, lwork, info);
+  F77_XFCN (dgeqrf, DGEQRF, (m, n, tmp_data, m, tau, work, lwork, info));
 
   delete [] work;
+  work = 0;
 
-  if (qr_type == QR::raw)
-    {
-      for (int j = 0; j < min_mn; j++)
-	{
-	  int limit = j < min_mn - 1 ? j : min_mn - 1;
-	  for (int i = limit + 1; i < m; i++)
-	    tmp_data[m*j+i] *= tau[j];
-	}
-    }
+  if (f77_exception_encountered)
+    (*current_liboctave_error_handler) ("unrecoverable error in dgeqrf");
   else
     {
-      int n2;
-      if (qr_type == QR::economy && m > n)
+      if (qr_type == QR::raw)
 	{
-	  n2 = n;
-	  r.resize (n, n, 0.0);
+	  for (int j = 0; j < min_mn; j++)
+	    {
+	      int limit = j < min_mn - 1 ? j : min_mn - 1;
+	      for (int i = limit + 1; i < m; i++)
+		tmp_data[m*j+i] *= tau[j];
+	    }
 	}
       else
 	{
-	  n2 = m;
-	  r.resize (m, n, 0.0);
-	}
+	  volatile int n2;
 
-      for (int j = 0; j < n; j++)
-	{
-	  int limit = j < min_mn-1 ? j : min_mn-1;
-	  for (int i = 0; i <= limit; i++)
-	    r.elem (i, j) = tmp_data[m*j+i];
-	}
+	  if (qr_type == QR::economy && m > n)
+	    {
+	      n2 = n;
+	      r.resize (n, n, 0.0);
+	    }
+	  else
+	    {
+	      n2 = m;
+	      r.resize (m, n, 0.0);
+	    }
+
+	  for (int j = 0; j < n; j++)
+	    {
+	      int limit = j < min_mn-1 ? j : min_mn-1;
+	      for (int i = 0; i <= limit; i++)
+		r.elem (i, j) = tmp_data[m*j+i];
+	    }
+
+	  lwork = 32*m;
+	  work = new double[lwork];
 
-      lwork = 32*m;
-      work = new double[lwork];
+	  F77_XFCN (dorgqr, DORGQR, (m, m, min_mn, tmp_data, m, tau, work,
+				     lwork, info));
 
-      F77_FCN (dorgqr, DORGQR) (m, m, min_mn, tmp_data, m, tau, work,
-				lwork, info);
+	  delete [] work;
+	  work = 0;
 
-      q = Matrix (tmp_data, m, m);
-      q.resize (m, n2);
+	  if (f77_exception_encountered)
+	    (*current_liboctave_error_handler)
+	      ("unrecoverable error in dorgqr");
+	  else
+	    {
+	      q = Matrix (tmp_data, m, m);
+	      tmp_data = 0;
+	      q.resize (m, n2);
+	    }
+	}
+    }
 
-      delete [] tau;
-      delete [] work;
-    }
+  delete [] tau;
+  tau = 0;
+
+  delete [] tmp_data;
+  tmp_data = 0;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dbleQR.h b/liboctave/dbleQR.h
--- a/liboctave/dbleQR.h
+++ b/liboctave/dbleQR.h
@@ -39,42 +39,53 @@ public:
 
   enum type
     {
       std,
       raw,
       economy,
     };
 
-  QR (void) : q (), r () { }
+  QR (void) : q (), r (), tau (0), work (0), tmp_data (0) { }
 
   QR (const Matrix& A, type qr_type = QR::std);
 
   QR (const QR& a) : q (a.q), r (a.r) { }
 
   QR& operator = (const QR& a)
     {
       if (this != &a)
 	{
 	  q = a.q;
 	  r = a.r;
 	}
       return *this;
     }
 
+  ~QR (void)
+    {
+      delete [] tau;
+      delete [] work;
+      delete [] tmp_data;
+    }
+
   Matrix Q (void) const { return q; }
 
   Matrix R (void) const { return r; }
 
   friend ostream&  operator << (ostream& os, const QR& a);
 
 protected:
 
   Matrix q;
   Matrix r;
+
+  double *tau;
+  double *work;
+  double *tmp_data;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
