# HG changeset patch
# User Thorsten Meyer <thorsten.meyier@gmx.de>
# Date 1287427212 -7200
#      Mon Oct 18 20:40:12 2010 +0200
# Node ID a8ac114ec9ab5f1de499b9e70244446f08261cfb
# Parent  8ea4cf59c41bc340a6940504b4dbda14523b4db6
Stylefixes, replace end by endif.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2010-10-18  Thorsten Meyer  <thorsten.meyier@gmx.de>
+
+	* general/gradient.m, linear-algebra/normest.m,	plot/__gnuplot_print__.m,
+	plot/__print_parse_opts__.m, plot/daspect.m,
+	plot/gnuplot_drawnow.m, plot/pbaspect.m, plot/print.m,
+	signal/periodogram.m: Style fix, replace end by endfor.
+
 2010-10-18  Marco Caliari <marco.caliari@univr.it>
 
 	* polynomial/polyval.m: Use Horner's method.
 
 2010-10-18  John W. Eaton  <jwe@octave.org>
 
 	* plot/__go_draw_axes__.m: Always use gnuplot to display images.
 	* image/image.m: Delete references to image_viewer.
diff --git a/scripts/general/gradient.m b/scripts/general/gradient.m
--- a/scripts/general/gradient.m
+++ b/scripts/general/gradient.m
@@ -117,17 +117,17 @@ function varargout = matrix_gradient (m,
     else
       ## vector for one-dimensional derivative
       d{1} = diff (varargin{1}(:));
     endif
   else
     ## have spacing value for each dimension
     if (length(varargin) != nd)
       error ("gradient: dimensions and number of spacing values do not match.");
-    end
+    endif
     for i = 1:nd
       if (isscalar (varargin{i}))
         d{i} = varargin{i} * ones (sz(i) - 1, 1);
       else
         d{i} = diff (varargin{i}(:));
       endif
     endfor
   endif
diff --git a/scripts/linear-algebra/normest.m b/scripts/linear-algebra/normest.m
--- a/scripts/linear-algebra/normest.m
+++ b/scripts/linear-algebra/normest.m
@@ -61,17 +61,17 @@ function [n, c] = normest (A, tol = 1e-6
   do
     n0 = n;
     x = A * y;
     normx = norm (x);
     if (normx == 0)
       x = rand (ncols, 1);
     else
       x = x / normx;
-    end
+    endif
     y = A' * x;
     n = norm (y);
     c += 1;
   until (abs (n - n0) <= tol * n)
 
   rand ("state", v);    # restore state of random number generator
 endfunction
 
diff --git a/scripts/plot/__gnuplot_print__.m b/scripts/plot/__gnuplot_print__.m
--- a/scripts/plot/__gnuplot_print__.m
+++ b/scripts/plot/__gnuplot_print__.m
@@ -36,17 +36,17 @@ function opts = __gnuplot_print__ (opts)
     if (iscell (axesfontsize))
       axesfontsize = round (median (cell2mat (axesfontsize)));
     endif
     if (isempty (axesfontsize))
       opts.fontsize = defaultfontsize;
     else
       opts.fontsize = axesfontsize;
     endif
-  end
+  endif
   ## The axes-label and tick-label spacing is determined by
   ## the font spec given in "set terminal ..."
   gp_opts = font_spec (opts);
 
   pipeline = "";
 
   switch lower (opts.devopt)
   case {"eps", "eps2", "epsc", "epsc2"}
diff --git a/scripts/plot/__print_parse_opts__.m b/scripts/plot/__print_parse_opts__.m
--- a/scripts/plot/__print_parse_opts__.m
+++ b/scripts/plot/__print_parse_opts__.m
@@ -248,17 +248,17 @@ function arg_st = __print_parse_opts__ (
     elseif (any (strcmpi (arg_st.devopt, {"eps", "eps2", "epsc", "epsc2", ...
                                           "ps", "ps2", "psc", "psc2", "pdf"})))
       have_ghostscript = ! isempty (__ghostscript_binary__ ());
       if (have_ghostscript)
         file_exists = ((numel (dir (arg_st.name)) == 1) 
                        && (! isdir (arg_st.name)));
         if (! file_exists)
           arg_st.append_to_file = false;
-        end
+        endif
       else
         arg_st.append_to_file = false;
         warning ("print.m: appended output requires ghostscript to be installed.")
       endif
     else
       warning ("print.m: appended output is not supported for device '%s'",
                arg_st.devopt)
       arg_st.append_to_file = false;
diff --git a/scripts/plot/daspect.m b/scripts/plot/daspect.m
--- a/scripts/plot/daspect.m
+++ b/scripts/plot/daspect.m
@@ -52,40 +52,40 @@ function varargout = daspect (varargin)
           && any (strcmpi (varargin{1}, {"mode", "manual", "auto"})))
         switch varargin{1}
         case {"mode"}
           if (nargout < 2)
             varargout{1} = get (hax, "dataaspectratiomode");
             return
           else
             error ("daspect: only one output is allowed.")
-          end
+          endif
         case {"manual"}
           set (hax, "dataaspectratiomode", "manual");
         case {"auto"}
           set (hax, "dataaspectratiomode", "auto");
         endswitch
       elseif (isreal (varargin{1})
               && any (numel (varargin{1}) == [2 3]))
         set (hax, "dataaspectratio", varargin{1})
       else
         error ("daspect: invalid input.")
       endif
     elseif (numel (varargin) > 1)
       error ("daspect: too many inputs.")
     endif
   elseif (nargout == 0)
     print_usage ();
-  end
+  endif
 
   if (nargout == 1)
     varargout{1} = get (hax, "dataaspectratio");
   elseif (nargout > 1)
     error ("daspect: only one output is allowed.")
-  end
+  endif
 
 endfunction
 
 %!demo
 %! x = 0:0.01:4;
 %! clf
 %! plot (x, cos (x), x, sin (x))
 %! axis square
diff --git a/scripts/plot/gnuplot_drawnow.m b/scripts/plot/gnuplot_drawnow.m
--- a/scripts/plot/gnuplot_drawnow.m
+++ b/scripts/plot/gnuplot_drawnow.m
@@ -81,35 +81,35 @@ function gnuplot_drawnow (h, term, file,
     term = gnuplot_default_term ();
     if (strcmp (term, "dumb"))
       ## popen2 eats stdout of gnuplot, use temporary file instead
       dumb_tmp_file = tmpnam ();
       enhanced = gnuplot_set_term (plot_stream (1), new_stream, h, ...
                                    term, dumb_tmp_file);
     else
       enhanced = gnuplot_set_term (plot_stream (1), new_stream, h, term);
-    end
+    endif
     __go_draw_figure__ (h, plot_stream (1), enhanced, mono);
     fflush (plot_stream (1));
     if (strcmp (term, "dumb"))
       fid = -1;
       while (fid < 0)
         pause (0.1);
         fid = fopen (dumb_tmp_file, 'r');
       endwhile
       ## reprint the plot on screen
       [a, count] = fscanf (fid, '%c', Inf);
       fclose (fid);
       if (count>0)
         if (a(1)==12)
           ## avoid ^L at the beginning
           a = a(2:end);
-        end
+        endif
         puts (a);
-      end
+      endif
       unlink (dumb_tmp_file);
     endif
   else
     print_usage ();
   endif
 
 endfunction
 
@@ -216,17 +216,17 @@ function enhanced = gnuplot_set_term (pl
             if (~isempty (getenv ("COLUMNS")) && ~isempty (getenv ("LINES")))
               ## Let dumb use full text screen size (minus prompt lines).
               n = sprintf ("%i", -2 - length (find (sprintf ("%s", PS1) == "\n")));
               ## n = the number of times \n appears in PS1
               size_str = ["size ", getenv("COLUMNS"), ",", getenv("LINES"), n];
             else
               ## Use the gnuplot default.
               size_str = "";
-            end
+            endif
           case {"aqua", "fig", "corel"}
             size_str = sprintf ("size %g %g", gnuplot_size);
           case "dxf"
             size_str = "";
           otherwise
             size_str = "";
           endswitch
           if (strncmpi (term, "x11", 3)
diff --git a/scripts/plot/pbaspect.m b/scripts/plot/pbaspect.m
--- a/scripts/plot/pbaspect.m
+++ b/scripts/plot/pbaspect.m
@@ -52,40 +52,40 @@ function varargout = pbaspect (varargin)
           && any (strcmpi (varargin{1}, {"mode", "manual", "auto"})))
         switch varargin{1}
         case {"mode"}
           if (nargout < 2)
             varargout{1} = get (hax, "plotboxaspectratiomode");
             return
           else
             error ("pbaspect: only one output is allowed.")
-          end
+          endif
         case {"manual"}
           set (hax, "plotboxaspectratiomode", "manual");
         case {"auto"}
           set (hax, "plotboxaspectratiomode", "auto");
         endswitch
       elseif (isreal (varargin{1})
               && any (numel (varargin{1}) == [2 3]))
         set (hax, "plotboxaspectratio", varargin{1})
       else
         error ("pbaspect: invalid input.")
       endif
     elseif (numel (varargin) > 1)
       error ("pbaspect: too many inputs.")
     endif
   elseif (nargout == 0)
     print_usage ();
-  end
+  endif
 
   if (nargout == 1)
     varargout{1} = get (hax, "plotboxaspectratio");
   elseif (nargout > 1)
     error ("pbaspect: only one output is allowed.")
-  end
+  endif
 
 endfunction
 
 %!demo
 %! x = 0:0.01:4;
 %! clf
 %! plot (x, cos (x), x, sin (x))
 %! pbaspect ([1 1 1])
diff --git a/scripts/plot/print.m b/scripts/plot/print.m
--- a/scripts/plot/print.m
+++ b/scripts/plot/print.m
@@ -587,20 +587,20 @@ endfunction
 function cmd = lpr (opts)
   if (nargin < 2)
     devopt =  opts.devopt;
   endif
   if (! isempty (opts.lpr_binary))
     cmd = opts.lpr_binary;
     if (! isempty (opts.lpr_options))
       cmd = sprintf ("%s %s", cmd, opts.lpr_options);
-    end
+    endif
     if (! isempty (opts.printer))
       cmd = sprintf ("%s -P %s", cmd, opts.printer);
-    end
+    endif
   elseif (isempty (opts.lpr_binary))
     error ("print:nolpr", "print.m: 'lpr' not found in EXEC_PATH.")
   endif
   if (opts.debug)
     fprintf ("lpr command: '%s'\n", cmd)
   endif
 endfunction
 
diff --git a/scripts/signal/periodogram.m b/scripts/signal/periodogram.m
--- a/scripts/signal/periodogram.m
+++ b/scripts/signal/periodogram.m
@@ -132,17 +132,17 @@ function [pxx, f] = periodogram (x, vara
 
   ## compute periodogram
 
   if (r>nfft)
     Pxx = 0;
     rr = rem (length (x), nfft);
     if (rr)
       x = [x(:); (zeros (nfft-rr, 1))];
-    end
+    endif
     x = sum (reshape (x, nfft, []), 2);
   endif
 
   if (isempty (window))
     n = r;
   else
     n = sumsq (window);
   end;
@@ -177,16 +177,16 @@ function [pxx, f] = periodogram (x, vara
     if (nargin<4)
       plot (f/(2*pi), 10*log10 (Pxx));
       xlabel ("normalized frequency [x pi rad]");
       ylabel ("Power density [dB/rad/sample]");
     else
       plot (f, 10*log10 (Pxx));
       xlabel ("frequency [Hz]");
       ylabel ("Power density [dB/Hz]");
-    end
+    endif
     grid on;
     title ("Periodogram Power Spectral Density Estimate");
   else
     pxx = Pxx;
   endif
 
 endfunction
