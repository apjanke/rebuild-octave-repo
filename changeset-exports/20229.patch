# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1432439240 -3600
#      Sun May 24 04:47:20 2015 +0100
# Node ID 5dfaaaae784f682a22aa03169c0fce51ba6c027e
# Parent  00cf2847355d9ee3c167ed7e71400b4860ce31ac
Deprecate Array::capacity() and Sparse::capacity() for numel() and nzmax().

* liboctave/array/Array.h (Array::capacity): deprecate for ::numel().
* liboctave/array/Sparse.h (Sparse::capacity): deprecate for ::nzmax().
  Also move comments into doxygen docs.
* libinterp/corefcn/daspk.cc, libinterp/corefcn/dasrt.cc,
  libinterp/corefcn/dassl.cc, libinterp/corefcn/jit-typeinfo.h,
  libinterp/corefcn/quad.cc, libinterp/corefcn/variables.cc,
  libinterp/octave-value/ov-base-sparse.h, libinterp/octave-value/ov-base.h,
  libinterp/octave-value/ov.h, liboctave/array/Sparse.cc,
  liboctave/numeric/DASPK.cc, liboctave/numeric/DASRT.cc,
  liboctave/numeric/DASSL.cc, liboctave/numeric/LSODE.cc,
  liboctave/numeric/Quad.cc, liboctave/numeric/base-de.h,
  liboctave/numeric/base-min.h, liboctave/numeric/oct-rand.cc: replace use
  of capacity by numel() or nzmax() as appropriate.

diff --git a/libinterp/corefcn/daspk.cc b/libinterp/corefcn/daspk.cc
--- a/libinterp/corefcn/daspk.cc
+++ b/libinterp/corefcn/daspk.cc
@@ -58,17 +58,17 @@ static bool warned_jac_imaginary = false
 static int call_depth = 0;
 
 ColumnVector
 daspk_user_function (const ColumnVector& x, const ColumnVector& xdot,
                      double t, octave_idx_type& ires)
 {
   ColumnVector retval;
 
-  assert (x.capacity () == xdot.capacity ());
+  assert (x.numel () == xdot.numel ());
 
   octave_value_list args;
 
   args(2) = t;
   args(1) = xdot;
   args(0) = x;
 
   if (daspk_fcn)
@@ -106,17 +106,17 @@ daspk_user_function (const ColumnVector&
 }
 
 Matrix
 daspk_user_jacobian (const ColumnVector& x, const ColumnVector& xdot,
                      double t, double cj)
 {
   Matrix retval;
 
-  assert (x.capacity () == xdot.capacity ());
+  assert (x.numel () == xdot.numel ());
 
   octave_value_list args;
 
   args(3) = cj;
   args(2) = t;
   args(1) = xdot;
   args(0) = x;
 
@@ -421,17 +421,17 @@ parameters for @code{daspk}.\n\
           crit_times = ColumnVector (args(4).vector_value ());
 
           if (error_state)
             DASPK_ABORT1 ("expecting critical time vector as fifth argument");
 
           crit_times_set = 1;
         }
 
-      if (state.capacity () != deriv.capacity ())
+      if (state.numel () != deriv.numel ())
         DASPK_ABORT1 ("x and xdot must have the same size");
 
       double tzero = out_times (0);
 
       DAEFunc func (daspk_user_function);
       if (daspk_jac)
         func.set_jacobian_function (daspk_user_jacobian);
 
diff --git a/libinterp/corefcn/dasrt.cc b/libinterp/corefcn/dasrt.cc
--- a/libinterp/corefcn/dasrt.cc
+++ b/libinterp/corefcn/dasrt.cc
@@ -58,17 +58,17 @@ static bool warned_cf_imaginary = false;
 static int call_depth = 0;
 
 static ColumnVector
 dasrt_user_f (const ColumnVector& x, const ColumnVector& xdot,
               double t, octave_idx_type&)
 {
   ColumnVector retval;
 
-  assert (x.capacity () == xdot.capacity ());
+  assert (x.numel () == xdot.numel ());
 
   octave_value_list args;
 
   args(2) = t;
   args(1) = xdot;
   args(0) = x;
 
   if (dasrt_f)
@@ -142,17 +142,17 @@ dasrt_user_cf (const ColumnVector& x, do
 }
 
 static Matrix
 dasrt_user_j (const ColumnVector& x, const ColumnVector& xdot,
               double t, double cj)
 {
   Matrix retval;
 
-  assert (x.capacity () == xdot.capacity ());
+  assert (x.numel () == xdot.numel ());
 
   octave_value_list args;
 
   args(3) = cj;
   args(2) = t;
   args(1) = xdot;
   args(0) = x;
 
diff --git a/libinterp/corefcn/dassl.cc b/libinterp/corefcn/dassl.cc
--- a/libinterp/corefcn/dassl.cc
+++ b/libinterp/corefcn/dassl.cc
@@ -58,17 +58,17 @@ static bool warned_jac_imaginary = false
 static int call_depth = 0;
 
 ColumnVector
 dassl_user_function (const ColumnVector& x, const ColumnVector& xdot,
                      double t, octave_idx_type& ires)
 {
   ColumnVector retval;
 
-  assert (x.capacity () == xdot.capacity ());
+  assert (x.numel () == xdot.numel ());
 
   octave_value_list args;
 
   args(2) = t;
   args(1) = xdot;
   args(0) = x;
 
   if (dassl_fcn)
@@ -106,17 +106,17 @@ dassl_user_function (const ColumnVector&
 }
 
 Matrix
 dassl_user_jacobian (const ColumnVector& x, const ColumnVector& xdot,
                      double t, double cj)
 {
   Matrix retval;
 
-  assert (x.capacity () == xdot.capacity ());
+  assert (x.numel () == xdot.numel ());
 
   octave_value_list args;
 
   args(3) = cj;
   args(2) = t;
   args(1) = xdot;
   args(0) = x;
 
@@ -422,17 +422,17 @@ parameters for @code{dassl}.\n\
           crit_times = ColumnVector (args(4).vector_value ());
 
           if (error_state)
             DASSL_ABORT1 ("expecting critical time vector as fifth argument");
 
           crit_times_set = 1;
         }
 
-      if (state.capacity () != deriv.capacity ())
+      if (state.numel () != deriv.numel ())
         DASSL_ABORT1 ("x and xdot must have the same size");
 
       double tzero = out_times (0);
 
       DAEFunc func (dassl_user_function);
       if (dassl_jac)
         func.set_jacobian_function (dassl_user_jacobian);
 
diff --git a/libinterp/corefcn/jit-typeinfo.h b/libinterp/corefcn/jit-typeinfo.h
--- a/libinterp/corefcn/jit-typeinfo.h
+++ b/libinterp/corefcn/jit-typeinfo.h
@@ -74,17 +74,17 @@ jit_array
   {
     update ();
   }
 
   void update (void)
   {
     ref_count = array->jit_ref_count ();
     slice_data = array->jit_slice_data () - 1;
-    slice_len = array->capacity ();
+    slice_len = array->numel ();
     dimensions = array->jit_dimensions ();
   }
 
   void update (T *aarray)
   {
     array = aarray;
     update ();
   }
diff --git a/libinterp/corefcn/quad.cc b/libinterp/corefcn/quad.cc
--- a/libinterp/corefcn/quad.cc
+++ b/libinterp/corefcn/quad.cc
@@ -307,17 +307,17 @@ variable by routines @code{dblquad} and 
                 QUAD_ABORT1 ("expecting vector of singularities as fourth argument");
 
             case 4:
               tol = FloatColumnVector (args(3).float_vector_value ());
 
               if (error_state)
                 QUAD_ABORT1 ("expecting vector of tolerances as fifth argument");
 
-              switch (tol.capacity ())
+              switch (tol.numel ())
                 {
                 case 2:
                   quad_opts.set_single_precision_relative_tolerance (tol (1));
 
                 case 1:
                   quad_opts.set_single_precision_absolute_tolerance (tol (0));
                   break;
 
@@ -416,17 +416,17 @@ variable by routines @code{dblquad} and 
                 QUAD_ABORT1 ("expecting vector of singularities as fourth argument");
 
             case 4:
               tol = ColumnVector (args(3).vector_value ());
 
               if (error_state)
                 QUAD_ABORT1 ("expecting vector of tolerances as fifth argument");
 
-              switch (tol.capacity ())
+              switch (tol.numel ())
                 {
                 case 2:
                   quad_opts.set_relative_tolerance (tol (1));
 
                 case 1:
                   quad_opts.set_absolute_tolerance (tol (0));
                   break;
 
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -1251,17 +1251,17 @@ private:
                   os << varval.byte_size ();
                   break;
 
                 case 'c':
                   os << varval.class_name ();
                   break;
 
                 case 'e':
-                  os << varval.capacity ();
+                  os << varval.numel ();
                   break;
 
                 case 'n':
                   os << name;
                   break;
 
                 case 's':
                   if (param.modifier != 'c')
@@ -1399,17 +1399,17 @@ public:
 
         for (std::list<symbol_info>::const_iterator p = lst.begin ();
              p != lst.end (); p++)
           {
             p->display_line (os, params);
 
             octave_value val = p->varval;
 
-            elements += val.capacity ();
+            elements += val.numel ();
             bytes += val.byte_size ();
           }
 
         os << "\nTotal is " << elements
            << (elements == 1 ? " element" : " elements")
            << " using " << bytes << (bytes == 1 ? " byte" : " bytes")
            << "\n";
       }
@@ -1471,17 +1471,17 @@ public:
 
         octave_value val = p->varval;
 
         str = val.type_name ();
         param_length(pos_t) = ((str.length ()
                                 > static_cast<size_t> (param_length(pos_t)))
                                ? str.length () : param_length(pos_t));
 
-        elements1 = val.capacity ();
+        elements1 = val.numel ();
         ss1 << elements1;
         str = ss1.str ();
         param_length(pos_e) = ((str.length ()
                                 > static_cast<size_t> (param_length(pos_e)))
                                ? str.length () : param_length(pos_e));
 
         bytes1 = val.byte_size ();
         ss2 << bytes1;
diff --git a/libinterp/octave-value/ov-base-sparse.h b/libinterp/octave-value/ov-base-sparse.h
--- a/libinterp/octave-value/ov-base-sparse.h
+++ b/libinterp/octave-value/ov-base-sparse.h
@@ -138,17 +138,17 @@ public:
   bool is_sparse_type (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_true (void) const;
 
-  octave_idx_type capacity (void) const { return matrix.capacity (); }
+  GCC_ATTR_DEPRECATED octave_idx_type capacity (void) const { return nzmax (); }
 
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -305,17 +305,18 @@ public:
     return dv(1);
   }
 
   virtual int ndims (void) const
   { return dims ().length (); }
 
   virtual octave_idx_type numel (void) const { return dims ().numel (); }
 
-  virtual octave_idx_type capacity (void) const { return numel (); }
+  GCC_ATTR_DEPRECATED virtual octave_idx_type capacity (void) const
+  { return numel (); }
 
   virtual size_t byte_size (void) const { return 0; }
 
   virtual octave_idx_type nnz (void) const;
 
   virtual octave_idx_type nzmax (void) const;
 
   virtual octave_idx_type nfields (void) const;
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -478,18 +478,18 @@ public:
 
   int ndims (void) const { return rep->ndims (); }
 
   bool all_zero_dims (void) const { return dims ().all_zero (); }
 
   octave_idx_type numel (void) const
   { return rep->numel (); }
 
-  octave_idx_type capacity (void) const
-  { return rep->capacity (); }
+  GCC_ATTR_DEPRECATED octave_idx_type capacity (void) const
+  { return rep->numel (); }
 
   size_t byte_size (void) const
   { return rep->byte_size (); }
 
   octave_idx_type nnz (void) const { return rep->nnz (); }
 
   octave_idx_type nzmax (void) const { return rep->nzmax (); }
 
diff --git a/liboctave/array/Array.h b/liboctave/array/Array.h
--- a/liboctave/array/Array.h
+++ b/liboctave/array/Array.h
@@ -248,38 +248,37 @@ public:
 
   void clear (octave_idx_type r, octave_idx_type c)
   { clear (dim_vector (r, c)); }
 
   // Number of elements in the array. These are all synonyms.
   //@{
   //! Number of elements in the array.
   //! Synonymous with numel().
-  octave_idx_type capacity (void) const { return numel (); }
+  //! @note This method is deprecated in favour of numel().
+  GCC_ATTR_DEPRECATED octave_idx_type capacity (void) const { return numel (); }
 
   //! Number of elements in the array.
-  /*! Synonymous with capacity() and numel().
-
+  /*! Synonymous with numel().
       @note This method is deprecated in favour of numel().
 
       @note
       This is @em not the same as @c %length() at the Octave interpreter.
       At the Octave interpreter, the function @c %length() returns the
       length of the greatest dimension.  This method returns the total
       number of elements.
    */
   octave_idx_type length (void) const { return numel (); }
 
   //! Number of elements in the array.
-  //! Synonymous with capacity() and numel().
+  //! Synonymous with numel().
   //! @note This method is deprecated in favour of numel().
   GCC_ATTR_DEPRECATED octave_idx_type nelem (void) const { return numel (); }
 
   //! Number of elements in the array.
-  //! Synonymous with capacity().
   octave_idx_type numel (void) const { return slice_len; }
   //@}
 
   //! Return the array as a column vector.
   Array<T> as_column (void) const
   {
     Array<T> retval (*this);
     if (dimensions.length () != 2 || dimensions(1) != 1)
diff --git a/liboctave/array/Sparse.cc b/liboctave/array/Sparse.cc
--- a/liboctave/array/Sparse.cc
+++ b/liboctave/array/Sparse.cc
@@ -1874,17 +1874,17 @@ Sparse<T>::assign (const idx_vector& idx
             {
               // Special-case a contiguous range.
               // Look-up indices first.
               octave_idx_type li = lblookup (ridx (), nz, lb);
               octave_idx_type ui = lblookup (ridx (), nz, ub);
               octave_idx_type rnz = rhs.nnz ();
               octave_idx_type new_nz = nz - (ui - li) + rnz;
 
-              if (new_nz >= nz && new_nz <= capacity ())
+              if (new_nz >= nz && new_nz <= nzmax ())
                 {
                   // Adding/overwriting elements, enough capacity allocated.
 
                   if (new_nz > nz)
                     {
                       // Make room first.
                       std::copy_backward (data () + ui, data () + nz,
                                           data () + nz + rnz);
@@ -2057,17 +2057,17 @@ Sparse<T>::assign (const idx_vector& idx
           else if (idx_j.is_cont_range (nc, lb, ub))
             {
               // Special-case a contiguous range.
               octave_idx_type li = cidx (lb);
               octave_idx_type ui = cidx (ub);
               octave_idx_type rnz = rhs.nnz ();
               octave_idx_type new_nz = nz - (ui - li) + rnz;
 
-              if (new_nz >= nz && new_nz <= capacity ())
+              if (new_nz >= nz && new_nz <= nzmax ())
                 {
                   // Adding/overwriting elements, enough capacity allocated.
 
                   if (new_nz > nz)
                     {
                       // Make room first.
                       std::copy (data () + ui, data () + nz,
                                  data () + li + rnz);
diff --git a/liboctave/array/Sparse.h b/liboctave/array/Sparse.h
--- a/liboctave/array/Sparse.h
+++ b/liboctave/array/Sparse.h
@@ -235,31 +235,33 @@ public:
 
   // Sparsify a normal matrix
   Sparse (const Array<T>& a);
 
   virtual ~Sparse (void);
 
   Sparse<T>& operator = (const Sparse<T>& a);
 
-  // Note that nzmax and capacity are the amount of storage for
-  // nonzero elements, while nnz is the actual number of nonzero
-  // terms.
+  //! Amount of storage for nonzero elements.
+  //! This may differ from the actual number of elements, see nnz().
   octave_idx_type nzmax (void) const { return rep->length (); }
-  octave_idx_type capacity (void) const { return nzmax (); }
+  //! Amount of storage for nonzero elements.
+  //! Synonymous with nzmax().
+  GCC_ATTR_DEPRECATED octave_idx_type capacity (void) const { return nzmax (); }
+  //!Actual number of nonzero terms.
   octave_idx_type nnz (void) const { return rep->nnz (); }
 
   // Querying the number of elements (incl. zeros) may overflow the index type,
   // so don't do it unless you really need it.
   octave_idx_type numel (void) const
   {
     return dimensions.safe_numel ();
   }
 
-  GCC_ATTR_DEPRECATED octave_idx_type nelem (void) const { return capacity (); }
+  GCC_ATTR_DEPRECATED octave_idx_type nelem (void) const { return nzmax (); }
   octave_idx_type length (void) const { return numel (); }
 
   octave_idx_type dim1 (void) const { return dimensions(0); }
   octave_idx_type dim2 (void) const { return dimensions(1); }
 
   octave_idx_type rows (void) const { return dim1 (); }
   octave_idx_type cols (void) const { return dim2 (); }
   octave_idx_type columns (void) const { return dim2 (); }
@@ -271,17 +273,17 @@ public:
     while (cidx (ret+1) < k)
       ret++;
     return ret;
   }
 
   size_t byte_size (void) const
   {
     return (static_cast<size_t>(cols () + 1) * sizeof (octave_idx_type)
-            + static_cast<size_t> (capacity ())
+            + static_cast<size_t> (nzmax ())
             * (sizeof (T) + sizeof (octave_idx_type)));
   }
 
   dim_vector dims (void) const { return dimensions; }
 
   Sparse<T> squeeze (void) const { return *this; }
 
   octave_idx_type compute_index (const Array<octave_idx_type>& ra_idx) const;
diff --git a/liboctave/numeric/DASPK.cc b/liboctave/numeric/DASPK.cc
--- a/liboctave/numeric/DASPK.cc
+++ b/liboctave/numeric/DASPK.cc
@@ -533,17 +533,17 @@ DASPK::do_integrate (const ColumnVector&
   return integrate (tout, dummy);
 }
 
 Matrix
 DASPK::integrate (const ColumnVector& tout, Matrix& xdot_out)
 {
   Matrix retval;
 
-  octave_idx_type n_out = tout.capacity ();
+  octave_idx_type n_out = tout.numel ();
   octave_idx_type n = size ();
 
   if (n_out > 0 && n > 0)
     {
       retval.resize (n_out, n);
       xdot_out.resize (n_out, n);
 
       for (octave_idx_type i = 0; i < n; i++)
@@ -578,31 +578,31 @@ DASPK::do_integrate (const ColumnVector&
 }
 
 Matrix
 DASPK::integrate (const ColumnVector& tout, Matrix& xdot_out,
                   const ColumnVector& tcrit)
 {
   Matrix retval;
 
-  octave_idx_type n_out = tout.capacity ();
+  octave_idx_type n_out = tout.numel ();
   octave_idx_type n = size ();
 
   if (n_out > 0 && n > 0)
     {
       retval.resize (n_out, n);
       xdot_out.resize (n_out, n);
 
       for (octave_idx_type i = 0; i < n; i++)
         {
           retval.elem (0, i) = x.elem (i);
           xdot_out.elem (0, i) = xdot.elem (i);
         }
 
-      octave_idx_type n_crit = tcrit.capacity ();
+      octave_idx_type n_crit = tcrit.numel ();
 
       if (n_crit > 0)
         {
           octave_idx_type i_crit = 0;
           octave_idx_type i_out = 1;
           double next_crit = tcrit.elem (0);
           double next_out;
           while (i_out < n_out)
diff --git a/liboctave/numeric/DASRT.cc b/liboctave/numeric/DASRT.cc
--- a/liboctave/numeric/DASRT.cc
+++ b/liboctave/numeric/DASRT.cc
@@ -388,17 +388,17 @@ DASRT_result
 DASRT::integrate (const ColumnVector& tout)
 {
   DASRT_result retval;
 
   Matrix x_out;
   Matrix xdot_out;
   ColumnVector t_out = tout;
 
-  octave_idx_type n_out = tout.capacity ();
+  octave_idx_type n_out = tout.numel ();
   octave_idx_type n = size ();
 
   if (n_out > 0 && n > 0)
     {
       x_out.resize (n_out, n);
       xdot_out.resize (n_out, n);
 
       for (octave_idx_type i = 0; i < n; i++)
@@ -447,25 +447,25 @@ DASRT_result
 DASRT::integrate (const ColumnVector& tout, const ColumnVector& tcrit)
 {
   DASRT_result retval;
 
   Matrix x_out;
   Matrix xdot_out;
   ColumnVector t_outs = tout;
 
-  octave_idx_type n_out = tout.capacity ();
+  octave_idx_type n_out = tout.numel ();
   octave_idx_type n = size ();
 
   if (n_out > 0 && n > 0)
     {
       x_out.resize (n_out, n);
       xdot_out.resize (n_out, n);
 
-      octave_idx_type n_crit = tcrit.capacity ();
+      octave_idx_type n_crit = tcrit.numel ();
 
       if (n_crit > 0)
         {
           octave_idx_type i_crit = 0;
           octave_idx_type i_out = 1;
           double next_crit = tcrit(0);
           double next_out;
           while (i_out < n_out)
diff --git a/liboctave/numeric/DASSL.cc b/liboctave/numeric/DASSL.cc
--- a/liboctave/numeric/DASSL.cc
+++ b/liboctave/numeric/DASSL.cc
@@ -348,17 +348,17 @@ DASSL::do_integrate (const ColumnVector&
   return integrate (tout, dummy);
 }
 
 Matrix
 DASSL::integrate (const ColumnVector& tout, Matrix& xdot_out)
 {
   Matrix retval;
 
-  octave_idx_type n_out = tout.capacity ();
+  octave_idx_type n_out = tout.numel ();
   octave_idx_type n = size ();
 
   if (n_out > 0 && n > 0)
     {
       retval.resize (n_out, n);
       xdot_out.resize (n_out, n);
 
       for (octave_idx_type i = 0; i < n; i++)
@@ -393,31 +393,31 @@ DASSL::do_integrate (const ColumnVector&
 }
 
 Matrix
 DASSL::integrate (const ColumnVector& tout, Matrix& xdot_out,
                   const ColumnVector& tcrit)
 {
   Matrix retval;
 
-  octave_idx_type n_out = tout.capacity ();
+  octave_idx_type n_out = tout.numel ();
   octave_idx_type n = size ();
 
   if (n_out > 0 && n > 0)
     {
       retval.resize (n_out, n);
       xdot_out.resize (n_out, n);
 
       for (octave_idx_type i = 0; i < n; i++)
         {
           retval.elem (0, i) = x.elem (i);
           xdot_out.elem (0, i) = xdot.elem (i);
         }
 
-      octave_idx_type n_crit = tcrit.capacity ();
+      octave_idx_type n_crit = tcrit.numel ();
 
       if (n_crit > 0)
         {
           octave_idx_type i_crit = 0;
           octave_idx_type i_out = 1;
           double next_crit = tcrit.elem (0);
           double next_out;
           while (i_out < n_out)
diff --git a/liboctave/numeric/LSODE.cc b/liboctave/numeric/LSODE.cc
--- a/liboctave/numeric/LSODE.cc
+++ b/liboctave/numeric/LSODE.cc
@@ -378,17 +378,17 @@ LSODE::error_message (void) const
   return retval;
 }
 
 Matrix
 LSODE::do_integrate (const ColumnVector& tout)
 {
   Matrix retval;
 
-  octave_idx_type n_out = tout.capacity ();
+  octave_idx_type n_out = tout.numel ();
   octave_idx_type n = size ();
 
   if (n_out > 0 && n > 0)
     {
       retval.resize (n_out, n);
 
       for (octave_idx_type i = 0; i < n; i++)
         retval.elem (0, i) = x.elem (i);
@@ -408,27 +408,27 @@ LSODE::do_integrate (const ColumnVector&
   return retval;
 }
 
 Matrix
 LSODE::do_integrate (const ColumnVector& tout, const ColumnVector& tcrit)
 {
   Matrix retval;
 
-  octave_idx_type n_out = tout.capacity ();
+  octave_idx_type n_out = tout.numel ();
   octave_idx_type n = size ();
 
   if (n_out > 0 && n > 0)
     {
       retval.resize (n_out, n);
 
       for (octave_idx_type i = 0; i < n; i++)
         retval.elem (0, i) = x.elem (i);
 
-      octave_idx_type n_crit = tcrit.capacity ();
+      octave_idx_type n_crit = tcrit.numel ();
 
       if (n_crit > 0)
         {
           octave_idx_type i_crit = 0;
           octave_idx_type i_out = 1;
           double next_crit = tcrit.elem (0);
           double next_out;
           while (i_out < n_out)
diff --git a/liboctave/numeric/Quad.cc b/liboctave/numeric/Quad.cc
--- a/liboctave/numeric/Quad.cc
+++ b/liboctave/numeric/Quad.cc
@@ -121,17 +121,17 @@ float_user_function (float *x, int& ierr
 
   return 0;
 }
 
 double
 DefQuad::do_integrate (octave_idx_type& ier, octave_idx_type& neval,
                        double& abserr)
 {
-  octave_idx_type npts = singularities.capacity () + 2;
+  octave_idx_type npts = singularities.numel () + 2;
   double *points = singularities.fortran_vec ();
   double result = 0.0;
 
   octave_idx_type leniw = 183*npts - 122;
   Array<octave_idx_type> iwork (dim_vector (leniw, 1));
   octave_idx_type *piwork = iwork.fortran_vec ();
 
   octave_idx_type lenw = 2*leniw - npts;
@@ -219,17 +219,17 @@ FloatDefQuad::do_integrate (octave_idx_t
   (*current_liboctave_error_handler) ("incorrect integration function called");
   return 0.0;
 }
 
 float
 FloatDefQuad::do_integrate (octave_idx_type& ier, octave_idx_type& neval,
                             float& abserr)
 {
-  octave_idx_type npts = singularities.capacity () + 2;
+  octave_idx_type npts = singularities.numel () + 2;
   float *points = singularities.fortran_vec ();
   float result = 0.0;
 
   octave_idx_type leniw = 183*npts - 122;
   Array<octave_idx_type> iwork (dim_vector (leniw, 1));
   octave_idx_type *piwork = iwork.fortran_vec ();
 
   octave_idx_type lenw = 2*leniw - npts;
diff --git a/liboctave/numeric/base-de.h b/liboctave/numeric/base-de.h
--- a/liboctave/numeric/base-de.h
+++ b/liboctave/numeric/base-de.h
@@ -67,17 +67,17 @@ public:
   {
     x = x0;
     t = t0;
     integration_error = false;
     istate = 0;
     force_restart ();
   }
 
-  octave_idx_type size (void) const { return x.capacity (); }
+  octave_idx_type size (void) const { return x.numel (); }
 
   ColumnVector state (void) const { return x; }
 
   double time (void) const { return t; }
 
   void set_stop_time (double tt)
   {
     stop_time_set = true;
diff --git a/liboctave/numeric/base-min.h b/liboctave/numeric/base-min.h
--- a/liboctave/numeric/base-min.h
+++ b/liboctave/numeric/base-min.h
@@ -109,16 +109,16 @@ public:
 
   virtual ColumnVector minimize (const ColumnVector& x0, double& objf,
                                  octave_idx_type& inform, ColumnVector& lambda)
   {
     x = x0;
     return do_minimize (objf, inform, lambda);
   }
 
-  octave_idx_type size (void) const { return x.capacity (); }
+  octave_idx_type size (void) const { return x.numel (); }
 
 protected:
 
   ColumnVector x;
 };
 
 #endif
diff --git a/liboctave/numeric/oct-rand.cc b/liboctave/numeric/oct-rand.cc
--- a/liboctave/numeric/oct-rand.cc
+++ b/liboctave/numeric/oct-rand.cc
@@ -508,66 +508,66 @@ Array<double>
 octave_rand::do_vector (octave_idx_type n, double a)
 {
   Array<double> retval;
 
   if (n > 0)
     {
       retval.clear (n, 1);
 
-      fill (retval.capacity (), retval.fortran_vec (), a);
+      fill (retval.numel (), retval.fortran_vec (), a);
     }
   else if (n < 0)
     (*current_liboctave_error_handler) ("rand: invalid negative argument");
 
   return retval;
 }
 
 Array<float>
 octave_rand::do_float_vector (octave_idx_type n, float a)
 {
   Array<float> retval;
 
   if (n > 0)
     {
       retval.clear (n, 1);
 
-      fill (retval.capacity (), retval.fortran_vec (), a);
+      fill (retval.numel (), retval.fortran_vec (), a);
     }
   else if (n < 0)
     (*current_liboctave_error_handler) ("rand: invalid negative argument");
 
   return retval;
 }
 
 NDArray
 octave_rand::do_nd_array (const dim_vector& dims, double a)
 {
   NDArray retval;
 
   if (! dims.all_zero ())
     {
       retval.clear (dims);
 
-      fill (retval.capacity (), retval.fortran_vec (), a);
+      fill (retval.numel (), retval.fortran_vec (), a);
     }
 
   return retval;
 }
 
 FloatNDArray
 octave_rand::do_float_nd_array (const dim_vector& dims, float a)
 {
   FloatNDArray retval;
 
   if (! dims.all_zero ())
     {
       retval.clear (dims);
 
-      fill (retval.capacity (), retval.fortran_vec (), a);
+      fill (retval.numel (), retval.fortran_vec (), a);
     }
 
   return retval;
 }
 
 // Make the random number generator give us a different sequence every
 // time we start octave unless we specifically set the seed.  The
 // technique used below will cycle monthly, but it it does seem to
