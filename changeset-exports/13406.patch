# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1302553084 -7200
#      Mon Apr 11 22:18:04 2011 +0200
# Node ID 91d64ef98f817128459d58c8032139816bf88ade
# Parent  42de7a2d4d640d208a0a1cea591672071b971b9c
Corrected saving/loading of settings, now loading online docs.

diff --git a/gui//src/MainWindow.cpp b/gui//src/MainWindow.cpp
--- a/gui//src/MainWindow.cpp
+++ b/gui//src/MainWindow.cpp
@@ -14,59 +14,67 @@
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #include <QMenuBar>
 #include <QMenu>
 #include <QAction>
-#include <QtWebKit/QWebView>
 #include <QSettings>
+#include <QDesktopServices>
 #include "MainWindow.h"
 
 MainWindow::MainWindow(QWidget *parent)
     : QMainWindow(parent),
       m_isRunning(true) {
+    QDesktopServices desktopServices;
+    m_settingsFile = desktopServices.storageLocation(QDesktopServices::HomeLocation) + "/.quint/setting.ini";
     constructWindow();
     establishOctaveLink();
 }
 
 MainWindow::~MainWindow() {
 }
 
 void MainWindow::handleOpenFileRequest(QString fileName) {
     reportStatusMessage("Opening file.");
     // TODO: Open mdi subwindow.
 }
 
 void MainWindow::reportStatusMessage(QString statusMessage) {
     m_statusBar->showMessage(statusMessage, 1000);
 }
 
+void MainWindow::openWebPage(QString url) {
+    m_webView->load(QUrl(url));
+}
+
 void MainWindow::closeEvent(QCloseEvent *closeEvent) {
     reportStatusMessage("Saving data and shutting down.");
-    QSettings settings("~/.quint/settings.ini", QSettings::IniFormat);
+    QSettings settings(m_settingsFile, QSettings::IniFormat);
     settings.setValue("MainWindow/geometry", saveGeometry());
     settings.setValue("MainWindow/windowState", saveState());
     QMainWindow::closeEvent(closeEvent);
 }
 
 void MainWindow::constructWindow() {
     QStyle *style = QApplication::style();
     m_octaveTerminal = new OctaveTerminal(this);
     m_generalPurposeToolbar = new QToolBar("Octave Toolbar", this);
     m_variablesDockWidget = new VariablesDockWidget(this);
     m_historyDockWidget = new HistoryDockWidget(this);
     m_filesDockWidget = new FilesDockWidget(this);
     m_openedFiles = new QMdiArea(this);
     m_statusBar = new QStatusBar(this);
+    m_webView = new QWebView(this);
     m_centralTabWidget = new QTabWidget(this);
     m_centralTabWidget->addTab(m_octaveTerminal, "Terminal");
     m_centralTabWidget->addTab(m_openedFiles, "Editor");
+    m_centralTabWidget->addTab(m_webView, "Documentation");
 
     // TODO: Add meaningfull toolbar items.
     QAction *commandAction = new QAction(style->standardIcon(QStyle::SP_CommandLink),
         "", m_generalPurposeToolbar);
     QAction *computerAction = new QAction(style->standardIcon(QStyle::SP_ComputerIcon),
         "", m_generalPurposeToolbar);
     m_generalPurposeToolbar->addAction(commandAction);
     m_generalPurposeToolbar->addAction(computerAction);
@@ -74,22 +82,24 @@ void MainWindow::constructWindow() {
     setWindowTitle("Octave");
     setCentralWidget(m_centralTabWidget);
     addToolBar(m_generalPurposeToolbar);
     addDockWidget(Qt::LeftDockWidgetArea, m_variablesDockWidget);
     addDockWidget(Qt::LeftDockWidgetArea, m_historyDockWidget);
     addDockWidget(Qt::RightDockWidgetArea, m_filesDockWidget);
     setStatusBar(m_statusBar);
 
-    QSettings settings("~/.quint/settings.ini", QSettings::IniFormat);
+    QSettings settings(m_settingsFile, QSettings::IniFormat);
     restoreGeometry(settings.value("MainWindow/geometry").toByteArray());
     restoreState(settings.value("MainWindow/windowState").toByteArray());
 
     connect(m_filesDockWidget, SIGNAL(openFile(QString)), this, SLOT(handleOpenFileRequest(QString)));
     connect(m_historyDockWidget, SIGNAL(information(QString)), this, SLOT(reportStatusMessage(QString)));
+
+    openWebPage("http://www.gnu.org/software/octave/doc/interpreter/");
 }
 
 void MainWindow::establishOctaveLink() {
     m_octaveMainThread = new OctaveMainThread(this);
     m_octaveMainThread->start();
 
     m_octaveCallbackThread = new OctaveCallbackThread(this, this);
     m_octaveCallbackThread->start();
diff --git a/gui//src/MainWindow.h b/gui//src/MainWindow.h
--- a/gui//src/MainWindow.h
+++ b/gui//src/MainWindow.h
@@ -20,16 +20,17 @@
 #define MAINWINDOW_H
 
 #include <QtGui/QMainWindow>
 #include <QThread>
 #include <QTabWidget>
 #include <QMdiArea>
 #include <QStatusBar>
 #include <QToolBar>
+#include <QtWebKit/QWebView>
 #include "OctaveTerminal.h"
 #include "OctaveLink.h"
 #include "VariablesDockWidget.h"
 #include "HistoryDockWidget.h"
 #include "FilesDockWidget.h"
 #include "CodeEdit.h"
 
 // Octave includes
@@ -93,31 +94,34 @@ public:
     OctaveTerminal *octaveTerminal() { return m_octaveTerminal; }
     VariablesDockWidget *variablesDockWidget() { return m_variablesDockWidget; }
     HistoryDockWidget *historyDockWidget() { return m_historyDockWidget; }
     FilesDockWidget *filesDockWidget() { return m_filesDockWidget; }
 
 public slots:
     void handleOpenFileRequest(QString fileName);
     void reportStatusMessage(QString statusMessage);
+    void openWebPage(QString url);
 
 protected:
     void closeEvent(QCloseEvent *closeEvent);
 
 private:
     void constructWindow();
     void establishOctaveLink();
     OctaveTerminal *m_octaveTerminal;
     VariablesDockWidget *m_variablesDockWidget;
     HistoryDockWidget *m_historyDockWidget;
     FilesDockWidget *m_filesDockWidget;
     QMdiArea *m_openedFiles;
     QTabWidget *m_centralTabWidget;
     QStatusBar *m_statusBar;
     QToolBar *m_generalPurposeToolbar;
+    QWebView *m_webView;
+    QString m_settingsFile;
 
     // Threads for running octave and managing the data interaction.
     OctaveMainThread *m_octaveMainThread;
     OctaveCallbackThread *m_octaveCallbackThread;
     bool m_isRunning;
 };
 
 class OctaveMainThread : public QThread {
