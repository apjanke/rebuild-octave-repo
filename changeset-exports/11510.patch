# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1294918292 18000
#      Thu Jan 13 06:31:32 2011 -0500
# Node ID f3d0b69c46280e6966ad687c2b07fd0c27481dcb
# Parent  fc35194006d642920b185b47c0947745b67a6df0
SparseQR.cc, SparseCmplxQR.cc: fix member initialization order

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2011-01-13  John W. Eaton  <jwe@octave.org>
+
+	* SparseCmplxQR.cc
+	(SparseComplexQR::SparseComplexQR_rep::SparseComplexQR_rep):
+	Correct order of member initialization.
+	* SparseQR.cc (SparseQR::SparseQR_rep::SparseQR_rep): Likewise.
+
 2011-01-13  John W. Eaton  <jwe@octave.org>
 
 	* oct-fftw.cc (octave_fftw_planner::octave_fftw_planner,
 	octave_float_fftw_planner::octave_float_fftw_planner):
 	Avoid duplicate initializations.  Correctly initialize RN to
 	empty dim_vector.
 
 2011-01-13  John W. Eaton  <jwe@octave.org>
diff --git a/liboctave/SparseCmplxQR.cc b/liboctave/SparseCmplxQR.cc
--- a/liboctave/SparseCmplxQR.cc
+++ b/liboctave/SparseCmplxQR.cc
@@ -45,17 +45,17 @@ typedef double _Complex cs_complex_t;
 #define OCTAVE_C99_COMPLEX(buf, n) \
   OCTAVE_LOCAL_BUFFER (cs_complex_t, buf, (n));
 #define OCTAVE_C99_ZERO cs_complex_t(0., 0.);
 #define OCTAVE_C99_ONE cs_complex_t(1., 0.);
 #endif
 
 SparseComplexQR::SparseComplexQR_rep::SparseComplexQR_rep 
   (GCC_ATTR_UNUSED const SparseComplexMatrix& a, GCC_ATTR_UNUSED int order)
-  : count (1), nrows (0), N (0), S (0)
+  : count (1), nrows (0), S (0), N (0)
 {
 #ifdef HAVE_CXSPARSE
   CXSPARSE_ZNAME () A;
   A.nzmax = a.nnz ();
   A.m = a.rows ();
   A.n = a.cols ();
   nrows = A.m;
   // Cast away const on A, with full knowledge that CSparse won't touch it
diff --git a/liboctave/SparseQR.cc b/liboctave/SparseQR.cc
--- a/liboctave/SparseQR.cc
+++ b/liboctave/SparseQR.cc
@@ -25,17 +25,17 @@ along with Octave; see the file COPYING.
 #endif
 #include <vector>
 
 #include "lo-error.h"
 #include "SparseQR.h"
 #include "oct-locbuf.h"
 
 SparseQR::SparseQR_rep::SparseQR_rep (const SparseMatrix& a, int order)
-  : count (1), nrows (0), N (0), S (0)
+  : count (1), nrows (0), S (0), N (0)
 {
 #ifdef HAVE_CXSPARSE
   CXSPARSE_DNAME () A;
   A.nzmax = a.nnz ();
   A.m = a.rows ();
   A.n = a.cols ();
   nrows = A.m;
   // Cast away const on A, with full knowledge that CSparse won't touch it
