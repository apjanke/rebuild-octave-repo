# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1281687292 -7200
#      Fri Aug 13 10:14:52 2010 +0200
# Node ID f10d0bc8f9cc4616e129188d8826f95cd9c80c35
# Parent  9993f13547136dbeb91feb0a348eef275a3c2891
make isargout available to DEFUNs

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2010-08-13  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-builtin.cc 
+	(octave_builtin::subsref (..., const std::list<octave_lvalue> *)
+	octave_builtin::do_multi_index_op (..., const std::list<octave_lvalue> *)): 
+	New methods. Move code here. Set curr_lvalue_list.
+	(octave_builtin::curr_lvalue_list): New static member.
+	* ov-fcn-handle.h: Declare them.
+	* defun.cc (defun_isargout): New overloaded function.
+	* defun-int.h: Declare it.
+
 2010-08-11  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-lazy-idx.h (octave_lazy_index::subsasgn): Remove override. Leave
 	it to the defualt numeric conversion mechanism.
 
 2010-08-10  Jaroslav Hajek  <highegg@gmail.com>
 
 	* data.cc (Fdiff): Allow logical type.
diff --git a/src/defun-int.h b/src/defun-int.h
--- a/src/defun-int.h
+++ b/src/defun-int.h
@@ -67,16 +67,22 @@ class octave_auto_shlib : public octave_
 {
 public:
   octave_auto_shlib (void)
     : octave_shlib (get_current_shlib ()) { }
   octave_auto_shlib (const octave_shlib& shl)
     : octave_shlib (shl) { }
 };
 
+extern OCTINTERP_API bool
+defun_isargout (int, int);
+
+extern OCTINTERP_API void
+defun_isargout (int, int, bool *);
+
 #define DECLARE_FUNX(name, args_name, nargout_name) \
   OCTAVE_EXPORT octave_value_list \
   name (const octave_value_list& args_name, int nargout_name)
 
 #define DECLARE_FUN(name, args_name, nargout_name) \
   DECLARE_FUNX (F ## name, args_name, nargout_name)
 
 // Define the code that will be used to insert the new function into
diff --git a/src/defun.cc b/src/defun.cc
--- a/src/defun.cc
+++ b/src/defun.cc
@@ -35,16 +35,17 @@ along with Octave; see the file COPYING.
 #include "help.h"
 #include "ov.h"
 #include "ov-builtin.h"
 #include "ov-dld-fcn.h"
 #include "ov-fcn.h"
 #include "ov-mex-fcn.h"
 #include "ov-usr-fcn.h"
 #include "oct-obj.h"
+#include "oct-lvalue.h"
 #include "pager.h"
 #include "symtab.h"
 #include "toplev.h"
 #include "variables.h"
 #include "parse.h"
 
 // Print the usage part of the doc string of FCN (user-defined or DEFUN).
 void
@@ -140,8 +141,60 @@ get_current_shlib (void)
         {
           octave_mex_function *mex = dynamic_cast<octave_mex_function *> (curr_fcn);
           retval = mex->get_shlib ();
         }
     }
 
   return retval;
 }
+
+bool defun_isargout (int nargout, int iout)
+{
+  const std::list<octave_lvalue> *lvalue_list = octave_builtin::curr_lvalue_list;
+  if (iout >= std::max (nargout, 1))
+    return false;
+  else if (lvalue_list)
+    {
+      int k = 0;
+      for (std::list<octave_lvalue>::const_iterator p = lvalue_list->begin ();
+           p != lvalue_list->end (); p++)
+        {
+          if (k == iout)
+            return ! p->is_black_hole ();
+          k += p->numel ();
+          if (k > iout)
+            break;
+        }
+
+      return true;
+    }
+  else
+    return true;
+}
+
+void defun_isargout (int nargout, int nout, bool *isargout)
+{
+  const std::list<octave_lvalue> *lvalue_list = octave_builtin::curr_lvalue_list;
+  if (lvalue_list)
+    {
+      int k = 0;
+      for (std::list<octave_lvalue>::const_iterator p = lvalue_list->begin ();
+           p != lvalue_list->end () && k < nout; p++)
+        {
+          if (p->is_black_hole ())
+            isargout[k++] = false;
+          else
+            {
+              int l = std::min (k + p->numel (), nout);
+              while (k < l)
+                isargout[k++] = true;
+            }
+        }
+    }
+  else
+    for (int i = 0; i < nout; i++)
+      isargout[i] = true;
+
+  for (int i = std::max(nargout, 1); i < nout; i++)
+    isargout[i] = false;
+}
+
diff --git a/src/ov-builtin.cc b/src/ov-builtin.cc
--- a/src/ov-builtin.cc
+++ b/src/ov-builtin.cc
@@ -39,25 +39,34 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
                                      "built-in function",
                                      "built-in function");
 
 octave_value_list
 octave_builtin::subsref (const std::string& type,
                          const std::list<octave_value_list>& idx,
                          int nargout)
 {
+  return octave_builtin::subsref (type, idx, nargout, 0);
+}
+
+octave_value_list
+octave_builtin::subsref (const std::string& type,
+                         const std::list<octave_value_list>& idx,
+                         int nargout, const std::list<octave_lvalue>* lvalue_list)
+{
   octave_value_list retval;
 
   switch (type[0])
     {
     case '(':
       {
         int tmp_nargout = (type.length () > 1 && nargout == 0) ? 1 : nargout;
 
-        retval = do_multi_index_op (tmp_nargout, idx.front ());
+        retval = do_multi_index_op (tmp_nargout, idx.front (),
+                                    idx.size () == 1 ? lvalue_list : 0);
       }
       break;
 
     case '{':
     case '.':
       {
         std::string nm = type_name ();
         error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
@@ -82,31 +91,44 @@ octave_builtin::subsref (const std::stri
     retval = retval(0).next_subsref (nargout, type, idx);
 
   return retval;
 }
 
 octave_value_list
 octave_builtin::do_multi_index_op (int nargout, const octave_value_list& args)
 {
+  return octave_builtin::do_multi_index_op (nargout, args, 0);
+}
+
+octave_value_list
+octave_builtin::do_multi_index_op (int nargout, const octave_value_list& args,
+                                   const std::list<octave_lvalue> *lvalue_list)
+{
   octave_value_list retval;
 
   if (error_state)
     return retval;
 
   if (args.has_magic_colon ())
     ::error ("invalid use of colon in function argument list");
   else
     {
       unwind_protect frame;
 
       octave_call_stack::push (this);
 
       frame.add_fcn (octave_call_stack::pop);
 
+      if (lvalue_list || curr_lvalue_list)
+        {
+          frame.protect_var (curr_lvalue_list);
+          curr_lvalue_list = lvalue_list;
+        }
+
       try
         {
           retval = (*f) (args, nargout);
           // Do not allow null values to be returned from functions.
           // FIXME -- perhaps true builtins should be allowed?
           retval.make_storable_values ();
           // Fix the case of a single undefined value.
           // This happens when a compiled function uses
@@ -120,8 +142,11 @@ octave_builtin::do_multi_index_op (int n
       catch (octave_execution_exception)
         {
           gripe_library_execution_error ();
         }
     }
 
   return retval;
 }
+
+
+const std::list<octave_lvalue> *octave_builtin::curr_lvalue_list = 0;
diff --git a/src/ov-builtin.h b/src/ov-builtin.h
--- a/src/ov-builtin.h
+++ b/src/ov-builtin.h
@@ -56,23 +56,33 @@ public:
       octave_value_list tmp = subsref (type, idx, 1);
       return tmp.length () > 0 ? tmp(0) : octave_value ();
     }
 
   octave_value_list subsref (const std::string& type,
                              const std::list<octave_value_list>& idx,
                              int nargout);
 
+  octave_value_list subsref (const std::string& type,
+                             const std::list<octave_value_list>& idx,
+                             int nargout, const std::list<octave_lvalue>* lvalue_list);
+
   octave_function *function_value (bool = false) { return this; }
 
   bool is_builtin_function (void) const { return true; }
 
   octave_value_list
   do_multi_index_op (int nargout, const octave_value_list& args);
 
+  octave_value_list
+  do_multi_index_op (int nargout, const octave_value_list& args, 
+                     const std::list<octave_lvalue>* lvalue_list);
+
+  static const std::list<octave_lvalue> *curr_lvalue_list;
+
 protected:
 
   // A pointer to the actual function.
   fcn f;
 
 private:
 
   // No copying!
