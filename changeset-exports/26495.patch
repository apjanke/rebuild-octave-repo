# HG changeset patch
# User Rik <rik@octave.org>
# Date 1546977326 28800
#      Tue Jan 08 11:55:26 2019 -0800
# Branch stable
# Node ID f0065630ad9da6cb51d9cfdecd38255a8aab964b
# Parent  bc6237a189e10a1e9b468099afc254dab642f6f3
__eigs__.cc: Fix static analyzer detected issues (bug #55347).

* __eigs__.cc (F__eigs__): Check that "issym", "isreal", and "cholB" are all
scalars before converting to boolean with xbool_value.

* eigs.m: Update BIST tests to use a boolean value for cholB input.

diff --git a/libinterp/dldfcn/__eigs__.cc b/libinterp/dldfcn/__eigs__.cc
--- a/libinterp/dldfcn/__eigs__.cc
+++ b/libinterp/dldfcn/__eigs__.cc
@@ -236,17 +236,17 @@ Undocumented internal function.
           if (args(0).issparse ())
             {
               ascm = (args(0).sparse_complex_matrix_value ());
               a_is_sparse = true;
             }
           else
             acm = (args(0).complex_matrix_value ());
           a_is_complex = true;
-          symmetric = false; // ARPACK doesn't special case complex symmetric
+          symmetric = false;  // ARPACK doesn't special case complex symmetric
           sym_tested = true;
         }
       else
         {
           if (args(0).issparse ())
             {
               asmm = (args(0).sparse_matrix_value ());
               a_is_sparse = true;
@@ -322,27 +322,41 @@ Undocumented internal function.
       if (! args(3+arg_offset).isstruct ())
         error ("eigs: OPTS argument must be a structure");
 
       octave_scalar_map map = args(3+arg_offset).xscalar_map_value ("eigs: OPTS argument must be a scalar structure");
 
       octave_value tmp;
 
       // issym is ignored for complex matrix inputs
-      tmp = map.getfield ("issym");
-      if (tmp.is_defined () && ! sym_tested)
+      if (! sym_tested)
         {
-          symmetric = tmp.double_value () != 0.0;
-          sym_tested = true;
+          tmp = map.getfield ("issym");
+          if (tmp.is_defined ())
+            {
+              if (tmp.numel () != 1)
+                error ("eigs: OPTS.issym must be a scalar value");
+
+              symmetric = tmp.xbool_value ("eigs: OPTS.issym must be a logical value");
+              sym_tested = true;
+            }
         }
 
       // isreal is ignored if A is not a function
-      tmp = map.getfield ("isreal");
-      if (tmp.is_defined () && have_a_fun)
-        a_is_complex = ! (tmp.double_value () != 0.0);
+      if (have_a_fun)
+        {
+          tmp = map.getfield ("isreal");
+          if (tmp.is_defined ())
+            {
+              if (tmp.numel () != 1)
+                error ("eigs: OPTS.isreal must be a scalar value");
+
+              a_is_complex = ! tmp.xbool_value ("eigs: OPTS.isreal must be a logical value");
+            }
+        }
 
       tmp = map.getfield ("tol");
       if (tmp.is_defined ())
         tol = tmp.double_value ();
 
       tmp = map.getfield ("maxit");
       if (tmp.is_defined ())
         maxit = tmp.nint_value ();
@@ -361,17 +375,22 @@ Undocumented internal function.
         }
 
       tmp = map.getfield ("disp");
       if (tmp.is_defined ())
         disp = tmp.nint_value ();
 
       tmp = map.getfield ("cholB");
       if (tmp.is_defined ())
-        cholB = tmp.double_value () != 0.0;
+        {
+          if (tmp.numel () != 1)
+            error ("eigs: OPTS.cholB must be a scalar value");
+
+          cholB = tmp.xbool_value ("eigs: OPTS.cholB must be a logical value");
+        }
 
       tmp = map.getfield ("permB");
       if (tmp.is_defined ())
         permB = ColumnVector (tmp.vector_value ()) - 1.0;
     }
 
   if (nargin > (4+arg_offset))
     error ("eigs: incorrect number of arguments");
diff --git a/scripts/sparse/eigs.m b/scripts/sparse/eigs.m
--- a/scripts/sparse/eigs.m
+++ b/scripts/sparse/eigs.m
@@ -866,26 +866,26 @@ endfunction
 %! d1diag = diag (d1);
 %! [d1diag, idx] = sort (d1diag);
 %! v1 = v1(:, idx);
 %! assert (abs (v), abs (R \ v1), 1e-12);
 %!testif HAVE_ARPACK, HAVE_UMFPACK
 %! A = toeplitz (sparse (1:10));
 %! B = toeplitz (sparse ([1, 1], [1, 2], [2, 1], 1, 10));
 %! R = chol (B);
-%! opts.cholB = R;
+%! opts.cholB = true;
 %! [v, d] = eigs (A, R, 4, "lm", opts);
 %! for i = 1:4
 %!   assert (A * v(:,i), d(i, i) * B * v(:,i), 1e-12)
 %! endfor
 %!testif HAVE_ARPACK, HAVE_UMFPACK
 %! A = toeplitz (sparse (1:10));
 %! B = toeplitz (sparse ([1, 1], [1, 2], [2, 1], 1, 10));
 %! [R, ~, permB] = chol (B, "vector");
-%! opts.cholB = R;
+%! opts.cholB = true;
 %! opts.permB = permB;
 %! [v, d] = eigs (A, R, 4, "lm", opts);
 %! for i = 1:4
 %!   assert (A * v(:,i), d(i, i) * B * v(:,i), 1e-12)
 %! endfor
 
 
 #### FULL MATRIX VERSIONS ####
