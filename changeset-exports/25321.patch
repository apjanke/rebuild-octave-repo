# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1524836922 14400
#      Fri Apr 27 09:48:42 2018 -0400
# Node ID 089852fc89294da98dd6d46c5aedef0302ab8acc
# Parent  2ad00275b79b69aa0b70283354d2fdec2c00d980
use explict default and deleted ctors and dtors for classdef classes

* ov-classdef.h, ov-classdef.cc: Use explicit default constructors,
destructors, and operator= methods for classdef classes.  Use C++11
syntax instead of private methods.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1053,16 +1053,20 @@ octave_classdef::is_instance_of (const s
 //----------------------------------------------------------------------------
 
 class octave_classdef_meta : public octave_function
 {
 public:
   octave_classdef_meta (const cdef_meta_object& obj)
     : object (obj) { }
 
+  octave_classdef_meta (const octave_classdef_meta&) = delete;
+
+  octave_classdef_meta& operator = (const octave_classdef_meta&) = delete;
+
   ~octave_classdef_meta (void)
   { object.meta_release (); }
 
   bool is_classdef_meta (void) const { return true; }
 
   bool is_package (void) const { return object.is_package(); }
 
   octave_function * function_value (bool = false) { return this; }
@@ -1114,19 +1118,25 @@ private:
   cdef_meta_object object;
 };
 
 //----------------------------------------------------------------------------
 
 class octave_classdef_superclass_ref : public octave_function
 {
 public:
+  octave_classdef_superclass_ref (void) = delete;
+
   octave_classdef_superclass_ref (const octave_value_list& a)
     : octave_function (), args (a) { }
 
+  octave_classdef_superclass_ref (const octave_classdef_superclass_ref&) = delete;
+
+  octave_classdef_superclass_ref& operator = (const octave_classdef_superclass_ref&) = delete;
+
   ~octave_classdef_superclass_ref (void) = default;
 
   bool is_classdef_superclass_ref (void) const { return true; }
 
   octave_function * function_value (bool = false) { return this; }
 
   octave_value_list
   call (octave::tree_evaluator&, int nargout, const octave_value_list& idx)
@@ -1904,19 +1914,27 @@ cdef_class::cdef_class_rep::find_method 
     }
 
   return cdef_method ();
 }
 
 class ctor_analyzer : public octave::tree_walker
 {
 public:
+  ctor_analyzer (void) = delete;
+
   ctor_analyzer (const std::string& ctor, const std::string& obj)
     : octave::tree_walker (), who (ctor), obj_name (obj) { }
 
+  ctor_analyzer (const ctor_analyzer&) = delete;
+
+  ctor_analyzer& operator = (const ctor_analyzer&) = delete;
+
+  ~ctor_analyzer (void) = default;
+
   void visit_statement_list (octave::tree_statement_list& t)
   {
     for (const auto& stmt_p : t)
       stmt_p->accept (*this);
   }
 
   void visit_statement (octave::tree_statement& t)
   {
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -337,16 +337,18 @@ cdef_object_base : public cdef_object_re
 {
 public:
   cdef_object_base (void)
     : cdef_object_rep (), klass ()
   {
     register_object ();
   }
 
+  cdef_object_base& operator = (const cdef_object_base&) = delete;
+
   ~cdef_object_base (void) { unregister_object (); }
 
   cdef_class get_class (void) const;
 
   void set_class (const cdef_class& cls);
 
   cdef_object_rep * empty_clone (void) const
   { return new cdef_object_base (*this); }
@@ -363,30 +365,31 @@ protected:
 
 private:
   void register_object (void);
 
   void unregister_object (void);
 
   // The class of the object
   cdef_object klass;
-
-  // No assignment!
-  cdef_object_base& operator = (const cdef_object_base&);
 };
 
 class
 cdef_object_array : public cdef_object_base
 {
 public:
   cdef_object_array (void) : cdef_object_base () { }
 
   cdef_object_array (const Array<cdef_object>& a)
     : cdef_object_base (), array (a) { }
 
+  cdef_object_array& operator = (const cdef_object_array&) = delete;
+
+  ~cdef_object_array (void) = default;
+
   cdef_object_rep * clone (void) const
   { return new cdef_object_array (*this); }
 
   dim_vector dims (void) const { return array.dims (); }
 
   bool is_valid (void) const { return true; }
 
   bool is_array (void) const { return true; }
@@ -423,27 +426,26 @@ private:
 
   void fill_empty_values (void) { fill_empty_values (array); }
 
   void fill_empty_values (Array<cdef_object>& arr);
 
   // Private copying!
   cdef_object_array (const cdef_object_array& obj)
     : cdef_object_base (obj), array (obj.array) { }
-
-  // No assignment!
-  cdef_object_array& operator = (const cdef_object_array&);
 };
 
 class
 cdef_object_scalar : public cdef_object_base
 {
 public:
   cdef_object_scalar (void) : cdef_object_base () { }
 
+  cdef_object_scalar& operator = (const cdef_object_scalar&) = delete;
+
   ~cdef_object_scalar (void) = default;
 
   dim_vector dims (void) const { return dim_vector (1, 1); }
 
   void put (const std::string& pname, const octave_value& val)
   { map.assign (pname, val); }
 
   octave_value get (const std::string& pname) const
@@ -501,29 +503,27 @@ protected:
 
   // Internal/temporary structure used during object construction
   std::map< cdef_class, std::list<cdef_class>> ctor_list;
 
 protected:
   // Restricted object copying!
   cdef_object_scalar (const cdef_object_scalar& obj)
     : cdef_object_base (obj), map (obj.map), ctor_list (obj.ctor_list) { }
-
-private:
-  // No assignment!
-  cdef_object_scalar& operator = (const cdef_object_scalar&);
 };
 
 class
 handle_cdef_object : public cdef_object_scalar
 {
 public:
   handle_cdef_object (void)
     : cdef_object_scalar () { }
 
+  handle_cdef_object& operator = (const handle_cdef_object&) = delete;
+
   ~handle_cdef_object (void);
 
   cdef_object_rep * clone (void) const
   {
     handle_cdef_object *obj = const_cast<handle_cdef_object *> (this);
     obj->refcount++;
     return obj;
   }
@@ -534,56 +534,53 @@ public:
   bool is_valid (void) const { return true; }
 
   bool is_handle_object (void) const { return true; }
 
 protected:
   // Restricted copying!
   handle_cdef_object (const handle_cdef_object& obj)
     : cdef_object_scalar (obj) { }
-
-private:
-  // No assignment
-  handle_cdef_object& operator = (const handle_cdef_object&);
 };
 
 class
 value_cdef_object : public cdef_object_scalar
 {
 public:
   value_cdef_object (void)
     : cdef_object_scalar () { }
 
+  value_cdef_object& operator = (const value_cdef_object&) = delete;
+
   ~value_cdef_object (void);
 
   cdef_object_rep * clone (void) const
   { return new value_cdef_object (*this); }
 
   cdef_object_rep * copy (void) const { return clone (); }
 
   bool is_valid (void) const { return true; }
 
   bool is_value_object (void) const { return true; }
 
 private:
   // Private copying!
   value_cdef_object (const value_cdef_object& obj)
     : cdef_object_scalar (obj) { }
-
-  // No assignment!
-  value_cdef_object& operator = (const value_cdef_object&);
 };
 
 class
 cdef_meta_object_rep : public handle_cdef_object
 {
 public:
   cdef_meta_object_rep (void)
     : handle_cdef_object () { }
 
+  cdef_meta_object_rep& operator = (const cdef_meta_object_rep&) = delete;
+
   ~cdef_meta_object_rep (void) = default;
 
   cdef_object_rep * copy (void) const
   { return new cdef_meta_object_rep (*this); }
 
   bool is_meta_object (void) const { return true; }
 
   virtual bool is_class (void) const { return false; }
@@ -606,20 +603,16 @@ public:
 
   virtual bool meta_accepts_postfix_index (char /* type */) const
   { return false; }
 
 protected:
   // Restricted copying!
   cdef_meta_object_rep (const cdef_meta_object_rep& obj)
     : handle_cdef_object (obj) { }
-
-private:
-  // No assignment!
-  cdef_meta_object_rep& operator = (const cdef_meta_object_rep&);
 };
 
 class
 cdef_meta_object : public cdef_object
 {
 public:
   cdef_meta_object (void)
     : cdef_object () { }
@@ -629,16 +622,18 @@ public:
     : cdef_object (obj) { }
 
   cdef_meta_object (cdef_meta_object_rep *r)
     : cdef_object (r) { }
 
   cdef_meta_object (const cdef_object& obj)
     : cdef_object (obj) { }
 
+  cdef_meta_object& operator = (const cdef_object&) = delete;
+
   ~cdef_meta_object (void) = default;
 
   bool is_class (void) const { return get_rep ()->is_class (); }
 
   bool is_property (void) const { return get_rep ()->is_property (); }
 
   bool is_method (void) const { return get_rep ()->is_method (); }
 
@@ -673,16 +668,20 @@ private:
   public:
     cdef_class_rep (void)
       : cdef_meta_object_rep (), member_count (0), handle_class (false),
         object_count (0), meta (false)
     { }
 
     cdef_class_rep (const std::list<cdef_class>& superclasses);
 
+    cdef_class_rep& operator = (const cdef_class_rep&) = delete;
+
+    ~cdef_class_rep (void) = default;
+
     cdef_object_rep * copy (void) const { return new cdef_class_rep (*this); }
 
     bool is_class (void) const { return true; }
 
     std::string get_name (void) const
     { return get ("Name").string_value (); }
 
     void set_name (const std::string& nm) { put ("Name", nm); }
@@ -842,16 +841,18 @@ public:
 
   cdef_class& operator = (const cdef_class& cls)
   {
     cdef_object::operator = (cls);
 
     return *this;
   }
 
+  ~cdef_class (void) = default;
+
   cdef_method find_method (const std::string& nm, bool local = false);
 
   void install_method (const cdef_method& meth)
   { get_rep ()->install_method (meth); }
 
   Cell get_methods (void) { return get_rep ()->get_methods (); }
 
   cdef_property find_property (const std::string& nm);
@@ -987,16 +988,20 @@ private:
 
   class
   cdef_property_rep : public cdef_meta_object_rep
   {
   public:
     cdef_property_rep (void)
       : cdef_meta_object_rep () { }
 
+    cdef_property_rep& operator = (const cdef_property_rep& p) = delete;
+
+    ~cdef_property_rep (void) = default;
+
     cdef_object_rep * copy (void) const { return new cdef_property_rep (*this); }
 
     bool is_property (void) const { return true; }
 
     std::string get_name (void) const { return get("Name").string_value (); }
 
     void set_name (const std::string& nm) { put ("Name", nm); }
 
@@ -1051,16 +1056,18 @@ public:
 
   cdef_property& operator = (const cdef_property& prop)
   {
     cdef_object::operator = (prop);
 
     return *this;
   }
 
+  ~cdef_property (void) = default;
+
   octave_value get_value (const cdef_object& obj, bool do_check_access = true,
                           const std::string& who = "")
   { return get_rep ()->get_value (obj, do_check_access, who); }
 
   octave_value get_value (bool do_check_access = true,
                           const std::string& who = "")
   { return get_rep ()->get_value (do_check_access, who); }
 
@@ -1097,16 +1104,20 @@ private:
   class
   cdef_method_rep : public cdef_meta_object_rep
   {
   public:
     cdef_method_rep (void)
       : cdef_meta_object_rep (), function (), dispatch_type ()
     { }
 
+    cdef_method_rep& operator = (const cdef_method_rep& m) = delete;
+
+    ~cdef_method_rep (void) = default;
+
     cdef_object_rep * copy (void) const { return new cdef_method_rep(*this); }
 
     bool is_method (void) const { return true; }
 
     std::string get_name (void) const { return get("Name").string_value (); }
 
     void set_name (const std::string& nm) { put ("Name", nm); }
 
@@ -1183,16 +1194,18 @@ public:
 
   cdef_method& operator = (const cdef_method& meth)
   {
     cdef_object::operator = (meth);
 
     return *this;
   }
 
+  ~cdef_method (void) = default;
+
   // normal invocation
   octave_value_list execute (const octave_value_list& args, int nargout,
                              bool do_check_access = true,
                              const std::string& who = "")
   { return get_rep ()->execute (args, nargout, do_check_access, who); }
 
   // dot-invocation: object is pushed as 1st argument
   octave_value_list execute (const cdef_object& obj,
@@ -1311,16 +1324,18 @@ private:
 
   class
   cdef_package_rep : public cdef_meta_object_rep
   {
   public:
     cdef_package_rep (void)
       : cdef_meta_object_rep (), member_count (0) { }
 
+    cdef_package_rep& operator = (const cdef_package_rep&) = delete;
+
     ~cdef_package_rep (void) = default;
 
     cdef_object_rep * copy (void) const { return new cdef_package_rep (*this); }
 
     bool is_package (void) const { return true; }
 
     std::string get_name (void) const { return get("Name").string_value (); }
 
@@ -1417,16 +1432,18 @@ public:
 
   cdef_package& operator = (const cdef_package& pack)
   {
     cdef_object::operator = (pack);
 
     return *this;
   }
 
+  ~cdef_package (void) = default;
+
   void install_class (const cdef_class& cls, const std::string& nm)
   { get_rep ()->install_class (cls, nm); }
 
   void install_function (const octave_value& fcn, const std::string& nm)
   { get_rep ()->install_function (fcn, nm); }
 
   void install_package (const cdef_package& pack, const std::string& nm)
   { get_rep ()->install_package (pack, nm); }
@@ -1459,18 +1476,21 @@ octave_classdef : public octave_base_val
 {
 public:
   octave_classdef (void)
     : octave_base_value (), object () { }
 
   octave_classdef (const cdef_object& obj)
     : octave_base_value (), object (obj) { }
 
-  octave_classdef (const octave_classdef& obj)
-    : octave_base_value (obj), object (obj.object) { }
+  octave_classdef (const octave_classdef&) = delete;
+
+  octave_classdef& operator = (const octave_classdef&) = delete;
+
+  ~octave_classdef (void) = default;
 
   octave_base_value * clone (void) const
   { return new octave_classdef (object.clone ()); }
 
   octave_base_value * empty_clone (void) const
   { return new octave_classdef (object.empty_clone ()); }
 
   octave_classdef * classdef_object_value (bool = false) { return this; }
