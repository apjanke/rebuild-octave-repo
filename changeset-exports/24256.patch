# HG changeset patch
# User Rik <rik@octave.org>
# Date 1510788147 28800
#      Wed Nov 15 15:22:27 2017 -0800
# Node ID b8e0bd54a2685be515e1e367da94872674d93eb4
# Parent  4bca68f0d8d5469996f21444f0952da15cfdac14
# Parent  4283c4c2fcb6c1a282a524b86b8f68b9738976a0
maint: merge stable to default.

diff --git a/liboctave/array/CSparse.cc b/liboctave/array/CSparse.cc
--- a/liboctave/array/CSparse.cc
+++ b/liboctave/array/CSparse.cc
@@ -5709,34 +5709,32 @@ SparseComplexMatrix::fsolve (MatrixType&
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_COMPLEX;
 
-          if (nr < 1)
+          A->x = data ();
+          if (A->x == 0)
             A->x = &dummy;
-          else
-            A->x = data ();
 
           cholmod_dense Bstore;
           cholmod_dense *B = &Bstore;
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->d = B->nrow;
           B->nzmax = B->nrow * B->ncol;
           B->dtype = CHOLMOD_DOUBLE;
           B->xtype = CHOLMOD_REAL;
-          if (nc < 1 || b.cols () < 1)
+
+          B->x = const_cast<double *>(b.fortran_vec ());
+          if (B->x == 0)
             B->x = &dummy;
-          else
-            // We won't alter it, honest :-)
-            B->x = const_cast<double *>(b.fortran_vec ());
 
           cholmod_factor *L;
           BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
           L = CHOLMOD_NAME(analyze) (A, cm);
           CHOLMOD_NAME(factorize) (A, L, cm);
           if (calc_cond)
             rcond = CHOLMOD_NAME(rcond)(L, cm);
           else
@@ -5961,20 +5959,19 @@ SparseComplexMatrix::fsolve (MatrixType&
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_COMPLEX;
 
-          if (nr < 1)
+          A->x = data ();
+          if (A->x == 0)
             A->x = &dummy;
-          else
-            A->x = data ();
 
           cholmod_sparse Bstore;
           cholmod_sparse *B = &Bstore;
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->p = b.cidx ();
           B->i = b.ridx ();
           B->nzmax = b.nnz ();
@@ -5985,20 +5982,19 @@ SparseComplexMatrix::fsolve (MatrixType&
           B->itype = CHOLMOD_LONG;
 #else
           B->itype = CHOLMOD_INT;
 #endif
           B->dtype = CHOLMOD_DOUBLE;
           B->stype = 0;
           B->xtype = CHOLMOD_REAL;
 
-          if (b.rows () < 1 || b.cols () < 1)
+          B->x = b.data ();
+          if (B->x == 0)
             B->x = &dummy;
-          else
-            B->x = b.data ();
 
           cholmod_factor *L;
           BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
           L = CHOLMOD_NAME(analyze) (A, cm);
           CHOLMOD_NAME(factorize) (A, L, cm);
           if (calc_cond)
             rcond = CHOLMOD_NAME(rcond)(L, cm);
           else
@@ -6262,34 +6258,32 @@ SparseComplexMatrix::fsolve (MatrixType&
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_COMPLEX;
 
-          if (nr < 1)
+          A->x = data ();
+          if (A->x == 0)
             A->x = &dummy;
-          else
-            A->x = data ();
 
           cholmod_dense Bstore;
           cholmod_dense *B = &Bstore;
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->d = B->nrow;
           B->nzmax = B->nrow * B->ncol;
           B->dtype = CHOLMOD_DOUBLE;
           B->xtype = CHOLMOD_COMPLEX;
-          if (nc < 1 || b.cols () < 1)
+
+          B->x = const_cast<Complex *>(b.fortran_vec ());
+          if (B->x == 0)
             B->x = &dummy;
-          else
-            // We won't alter it, honest :-)
-            B->x = const_cast<Complex *>(b.fortran_vec ());
 
           cholmod_factor *L;
           BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
           L = CHOLMOD_NAME(analyze) (A, cm);
           CHOLMOD_NAME(factorize) (A, L, cm);
           if (calc_cond)
             rcond = CHOLMOD_NAME(rcond)(L, cm);
           else
@@ -6493,20 +6487,19 @@ SparseComplexMatrix::fsolve (MatrixType&
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_COMPLEX;
 
-          if (nr < 1)
+          A->x = data ();
+          if (A->x == 0)
             A->x = &dummy;
-          else
-            A->x = data ();
 
           cholmod_sparse Bstore;
           cholmod_sparse *B = &Bstore;
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->p = b.cidx ();
           B->i = b.ridx ();
           B->nzmax = b.nnz ();
@@ -6517,20 +6510,19 @@ SparseComplexMatrix::fsolve (MatrixType&
           B->itype = CHOLMOD_LONG;
 #else
           B->itype = CHOLMOD_INT;
 #endif
           B->dtype = CHOLMOD_DOUBLE;
           B->stype = 0;
           B->xtype = CHOLMOD_COMPLEX;
 
-          if (b.rows () < 1 || b.cols () < 1)
+          B->x = b.data ();
+          if (B->x == 0)
             B->x = &dummy;
-          else
-            B->x = b.data ();
 
           cholmod_factor *L;
           BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
           L = CHOLMOD_NAME(analyze) (A, cm);
           CHOLMOD_NAME(factorize) (A, L, cm);
           if (calc_cond)
             rcond = CHOLMOD_NAME(rcond)(L, cm);
           else
diff --git a/liboctave/array/dSparse.cc b/liboctave/array/dSparse.cc
--- a/liboctave/array/dSparse.cc
+++ b/liboctave/array/dSparse.cc
@@ -5760,34 +5760,32 @@ SparseMatrix::fsolve (MatrixType& mattyp
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_REAL;
 
-          if (nr < 1)
+          A->x = data ();
+          if (A->x == 0)
             A->x = &dummy;
-          else
-            A->x = data ();
 
           cholmod_dense Bstore;
           cholmod_dense *B = &Bstore;
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->d = B->nrow;
           B->nzmax = B->nrow * B->ncol;
           B->dtype = CHOLMOD_DOUBLE;
           B->xtype = CHOLMOD_REAL;
-          if (nc < 1 || b.cols () < 1)
+
+          B->x = const_cast<double *>(b.fortran_vec ());
+          if (B->x == 0)
             B->x = &dummy;
-          else
-            // We won't alter it, honest :-)
-            B->x = const_cast<double *>(b.fortran_vec ());
 
           cholmod_factor *L;
           BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
           L = CHOLMOD_NAME(analyze) (A, cm);
           CHOLMOD_NAME(factorize) (A, L, cm);
           if (calc_cond)
             rcond = CHOLMOD_NAME(rcond)(L, cm);
           else
@@ -5985,20 +5983,19 @@ SparseMatrix::fsolve (MatrixType& mattyp
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_REAL;
 
-          if (nr < 1)
+          A->x = data ();
+          if (A->x == 0)
             A->x = &dummy;
-          else
-            A->x = data ();
 
           cholmod_sparse Bstore;
           cholmod_sparse *B = &Bstore;
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->p = b.cidx ();
           B->i = b.ridx ();
           B->nzmax = b.nnz ();
@@ -6009,20 +6006,19 @@ SparseMatrix::fsolve (MatrixType& mattyp
           B->itype = CHOLMOD_LONG;
 #else
           B->itype = CHOLMOD_INT;
 #endif
           B->dtype = CHOLMOD_DOUBLE;
           B->stype = 0;
           B->xtype = CHOLMOD_REAL;
 
-          if (b.rows () < 1 || b.cols () < 1)
+          B->x = b.data ();
+          if (B->x == 0)
             B->x = &dummy;
-          else
-            B->x = b.data ();
 
           cholmod_factor *L;
           BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
           L = CHOLMOD_NAME(analyze) (A, cm);
           CHOLMOD_NAME(factorize) (A, L, cm);
           if (calc_cond)
             rcond = CHOLMOD_NAME(rcond)(L, cm);
           else
@@ -6256,34 +6252,32 @@ SparseMatrix::fsolve (MatrixType& mattyp
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_REAL;
 
-          if (nr < 1)
+          A->x = data ();
+          if (A->x == 0)
             A->x = &dummy;
-          else
-            A->x = data ();
 
           cholmod_dense Bstore;
           cholmod_dense *B = &Bstore;
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->d = B->nrow;
           B->nzmax = B->nrow * B->ncol;
           B->dtype = CHOLMOD_DOUBLE;
           B->xtype = CHOLMOD_COMPLEX;
-          if (nc < 1 || b.cols () < 1)
+
+          B->x = const_cast<Complex *>(b.fortran_vec ());
+          if (B->x == 0)
             B->x = &dummy;
-          else
-            // We won't alter it, honest :-)
-            B->x = const_cast<Complex *>(b.fortran_vec ());
 
           cholmod_factor *L;
           BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
           L = CHOLMOD_NAME(analyze) (A, cm);
           CHOLMOD_NAME(factorize) (A, L, cm);
           if (calc_cond)
             rcond = CHOLMOD_NAME(rcond)(L, cm);
           else
@@ -6501,20 +6495,19 @@ SparseMatrix::fsolve (MatrixType& mattyp
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_REAL;
 
-          if (nr < 1)
+          A->x = data ();
+          if (A->x == 0)
             A->x = &dummy;
-          else
-            A->x = data ();
 
           cholmod_sparse Bstore;
           cholmod_sparse *B = &Bstore;
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->p = b.cidx ();
           B->i = b.ridx ();
           B->nzmax = b.nnz ();
@@ -6525,20 +6518,19 @@ SparseMatrix::fsolve (MatrixType& mattyp
           B->itype = CHOLMOD_LONG;
 #else
           B->itype = CHOLMOD_INT;
 #endif
           B->dtype = CHOLMOD_DOUBLE;
           B->stype = 0;
           B->xtype = CHOLMOD_COMPLEX;
 
-          if (b.rows () < 1 || b.cols () < 1)
+          B->x = b.data ();
+          if (B->x == 0)
             B->x = &dummy;
-          else
-            B->x = b.data ();
 
           cholmod_factor *L;
           BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
           L = CHOLMOD_NAME(analyze) (A, cm);
           CHOLMOD_NAME(factorize) (A, L, cm);
           if (calc_cond)
             rcond = CHOLMOD_NAME(rcond)(L, cm);
           else
