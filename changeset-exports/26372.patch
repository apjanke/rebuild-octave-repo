# HG changeset patch
# User Rik <rik@octave.org>
# Date 1546458249 28800
#      Wed Jan 02 11:44:09 2019 -0800
# Branch stable
# Node ID 2d9ae06f621b3ce3554a857648d813a2b040dd6e
# Parent  87f11da73b199ca7d909bc849ec996a920ea346e
Fix static analyzer detected V1003 issues with expansions in macros (bug #55347).

* Table.cc (AUTO_HEIGHT): Wrap entire macro expression in parentheses.

* ls-oct-text.cc: (SUBSTRING_COMPARE_EQ): Wrap parameter "t" in parentheses.

* variables.cc (GET_IDX): Wrap parameter "LEN" in parentheses.

* mx-inlines.cc (OP_RED_SUMSQ): Wrap expression "el*el" in parentheses.

diff --git a/libgui/graphics/Table.cc b/libgui/graphics/Table.cc
--- a/libgui/graphics/Table.cc
+++ b/libgui/graphics/Table.cc
@@ -51,17 +51,17 @@ along with Octave; see the file COPYING.
 #include "oct-strstrm.h"
 #include "ov-struct.h"
 
 namespace QtHandles
 {
 
   static const int AUTO_WIDTH = 75;
 
-#define AUTO_HEIGHT tp.get_fontsize () * 2 - 1
+#define AUTO_HEIGHT (tp.get_fontsize () * 2 - 1)
 
   static QSize realQSizeForTable (QTableWidget *t)
   {
     int w = t->verticalHeader ()->width () + 4;
     for (int i = 0; i < t->columnCount (); i++)
       w += t->columnWidth (i);
     int h = t->horizontalHeader ()->height () + 4;
     for (int i = 0; i < t->rowCount (); i++)
diff --git a/libinterp/corefcn/ls-oct-text.cc b/libinterp/corefcn/ls-oct-text.cc
--- a/libinterp/corefcn/ls-oct-text.cc
+++ b/libinterp/corefcn/ls-oct-text.cc
@@ -227,17 +227,17 @@ extract_keyword (std::istream& is, const
 //  array
 //
 // FIXME: This format is fairly rigid, and doesn't allow for arbitrary comments.
 // Someone should fix that.  It does allow arbitrary types however.
 
 // Ugh.  The signature of the compare method is not standard in older
 // versions of the GNU libstdc++.  Do this instead:
 
-#define SUBSTRING_COMPARE_EQ(s, pos, n, t) (s.substr (pos, n) == t)
+#define SUBSTRING_COMPARE_EQ(s, pos, n, t) (s.substr (pos, n) == (t))
 
 std::string
 read_text_data (std::istream& is, const std::string& filename, bool& global,
                 octave_value& tc, octave_idx_type count)
 {
   // Read name for this entry or break on EOF.
 
   std::string name = extract_keyword (is, "name");
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -328,17 +328,17 @@ symbol_exist (const std::string& name, c
 {
   octave::interpreter& interp = octave::__get_interpreter__ ("symbol_exist");
 
   return symbol_exist (interp, name, type);
 }
 
 
 #define GET_IDX(LEN)                                                    \
-  static_cast<int> ((LEN-1) * static_cast<double> (rand ()) / RAND_MAX)
+  static_cast<int> (((LEN)-1) * static_cast<double> (rand ()) / RAND_MAX)
 
 std::string
 unique_symbol_name (const std::string& basename)
 {
   static const std::string alpha
     = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
 
   static size_t len = alpha.length ();
diff --git a/liboctave/operators/mx-inlines.cc b/liboctave/operators/mx-inlines.cc
--- a/liboctave/operators/mx-inlines.cc
+++ b/liboctave/operators/mx-inlines.cc
@@ -667,17 +667,17 @@ xis_true (const FloatComplex& x)
 inline bool
 xis_false (const FloatComplex& x)
 {
   return x == 0.0f;
 }
 
 #define OP_RED_SUM(ac, el) ac += el
 #define OP_RED_PROD(ac, el) ac *= el
-#define OP_RED_SUMSQ(ac, el) ac += el*el
+#define OP_RED_SUMSQ(ac, el) ac += (el*el)
 #define OP_RED_SUMSQC(ac, el) ac += cabsq (el)
 
 inline void
 op_dble_prod (double& ac, float el)
 {
   ac *= el;
 }
 
