# HG changeset patch
# User Rik <rik@octave.org>
# Date 1536338913 25200
#      Fri Sep 07 09:48:33 2018 -0700
# Node ID fb775d5a626ab90744698fa87d5ed9ec0f9d8fb8
# Parent  5f22779e68573b54e1018fccc73c04ef764a3b79
# Parent  60fd3c44769fc6706823cf7c78cee93b62d59afd
maint: merge stable to default.

diff --git a/doc/interpreter/genpropdoc.m b/doc/interpreter/genpropdoc.m
--- a/doc/interpreter/genpropdoc.m
+++ b/doc/interpreter/genpropdoc.m
@@ -1143,25 +1143,25 @@ measured in degrees.";
 
       case "cdatamapping"
       case "displayname"
         s.doc = "Text for the legend entry corresponding to this image.";
         s.valid = valid_cellstring;
 
       case "xdata"
         s.doc = "Two-element vector @code{[xmin xmax]} specifying the x \
-coordinates of the first and last columns of the image.\n\
+coordinates of the centers of the first and last columns of the image.\n\
 \n\
 Setting @code{xdata} to the empty matrix ([]) will restore the default value \
 of @code{[1 columns(image)]}.";
         s.valid = valid_2elvec;
 
       case "ydata"
         s.doc = "Two-element vector @code{[ymin ymax]} specifying the y \
-coordinates of the first and last rows of the image.\n\
+coordinates of the centers of the first and last rows of the image.\n\
 \n\
 Setting @code{ydata} to the empty matrix ([]) will restore the default value \
 of @code{[1 rows(image)]}.";
         s.valid = valid_2elvec;
 
     endswitch
 
   ## Surface properties
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -259,17 +259,20 @@ produces the spiral plot shown in @ref{f
 
 @DOCSTRING(comet3)
 
 @node Axis Configuration
 @subsubsection Axis Configuration
 
 The axis function may be used to change the axis limits of an existing
 plot and various other axis properties, such as the aspect ratio and the
-appearance of tic marks.
+appearance of tic marks.  By default, high level plotting functions such as
+@code{plot} reset axes properties.  Any customization of properties, for
+example by calling @code{axis}, @code{xlim}, etc., should happen after the plot
+is done or, alternatively, after calling the @ref{XREFhold, ,hold function}.
 
 @DOCSTRING(axis)
 
 Similarly the axis limits of the colormap can be changed with the caxis
 function.
 
 @DOCSTRING(caxis)
 
@@ -656,20 +659,21 @@ or when waiting for input.  The
 
 Only figures that are modified will be updated.  The @code{refresh}
 function can also be used to cause an update of the current figure, even if
 it is not modified.
 
 @DOCSTRING(refresh)
 
 Normally, high-level plot functions like @code{plot} or @code{mesh} call
-@code{newplot} to initialize the state of the current axes so that the
-next plot is drawn in a blank window with default property settings.  To
-have two plots superimposed over one another, use the @code{hold}
-function.  For example,
+@code{newplot} to determine whether the state of the target axes should be
+initialized (the default) or if subsequent plots should be drawn on top of
+previous ones.  To have two plots drawn over one another, use the @code{hold}
+function or manually change the axes @ref{XREFaxesnextplot, ,nextplot}
+property.  For example,
 
 @example
 @group
 hold on;
 x = -10:0.1:10;
 plot (x, sin (x));
 plot (x, cos (x));
 hold off;
@@ -1186,80 +1190,57 @@ Graphics handles may be distinguished fr
 (@pxref{Function Handles}) by means of the function @code{ishghandle}.
 @code{ishghandle} returns true if its argument is a handle of a graphics
 object.  In addition, a figure or axes object may be tested using
 @code{isfigure} or @code{isaxes} respectively.  To test for a specific type of
 graphics handle, such as a patch or line object, use @code{isgraphics}.  The
 more specific test functions return true only if the argument is both a
 graphics handle and of the correct type (figure, axes, specified object type).
 
-The @code{whos} function can be used to show the object type of each currently
-defined graphics handle.  (Note: this is not true today, but it is, I hope,
-considered an error in whos.  It may be better to have whos just show
-graphics_handle as the class, and provide a new function which, given a
-graphics handle, returns its object type.  This could generalize the ishandle()
-functions and, in fact, replace them.)
-
 The @code{get} and @code{set} commands are used to obtain and set the values of
 properties of graphics objects.  In addition, the @code{get} command may be
 used to obtain property names.
 
 For example, the property @qcode{"type"} of the graphics object pointed to by
 the graphics handle h may be displayed by:
 
 @example
 get (h, "type")
 @end example
 
-The properties and their current values are returned by @code{get (h)}
-where h is a handle of a graphics object.  If only the names of the
-allowed properties are wanted they may be displayed by:
-@code{get (h, "")}.
+The properties and their current values may be obtained in the form of a
+structure using @code{s = get (h)}, where @code{h} is the handle of a graphics
+object.  If only the names of the properties and the allowed values (for radio
+properties only) are wanted, one may use @code{set (h)}.
 
 Thus, for example:
 
-@smallexample
+@example
 h = figure ();
 get (h, "type")
-ans = figure
-get (h, "");
-error: get: ambiguous figure property name ; possible matches:
-
-__gl_extensions__      dockcontrols           renderer
-__gl_renderer__        doublebuffer           renderermode
-__gl_vendor__          filename               resize
-__gl_version__         graphicssmoothing      resizefcn
-__graphics_toolkit__   handlevisibility       selected
-__guidata__            hittest                selectionhighlight
-__modified__           integerhandle          selectiontype
-__mouse_mode__         interruptible          sizechangedfcn
-__myhandle__           inverthardcopy         tag
-__pan_mode__           keypressfcn            toolbar
-__plot_stream__        keyreleasefcn          type
-__rotate_mode__        menubar                uicontextmenu
-__zoom_mode__          mincolormap            units
-alphamap               name                   userdata
-beingdeleted           nextplot               visible
-busyaction             numbertitle            windowbuttondownfcn
-buttondownfcn          outerposition          windowbuttonmotionfcn
-children               paperorientation       windowbuttonupfcn
-clipping               paperposition          windowkeypressfcn
-closerequestfcn        paperpositionmode      windowkeyreleasefcn
-color                  papersize              windowscrollwheelfcn
-colormap               papertype              windowstyle
-createfcn              paperunits             wvisual
-currentaxes            parent                 wvisualmode
-currentcharacter       pointer                xdisplay
-currentobject          pointershapecdata      xvisual
-currentpoint           pointershapehotspot    xvisualmode
-deletefcn              position
-@end smallexample
-
-The properties of the root figure may be displayed by:
-@code{get (groot, "")}.
+@result{} ans = figure
+set (h)
+@result{}
+        alphamap:
+        beingdeleted:  [ @{off@} | on ]
+        busyaction:  [ cancel | @{queue@} ]
+        buttondownfcn:
+        clipping:  [ off | @{on@} ]
+        closerequestfcn:
+        color:
+        colormap:
+        createfcn:
+        currentaxes:
+        deletefcn:
+        dockcontrols:  [ @{off@} | on ]
+        filename:
+        graphicssmoothing:  [ off | @{on@} ]
+        handlevisibility:  [ callback | off | @{on@} ]
+        ...
+@end example
 
 The uses of @code{get} and @code{set} are further explained in
 @ref{XREFget,,get}, @ref{XREFset,,set}.
 
 @DOCSTRING(isprop)
 
 @node Graphics Objects
 @subsection Graphics Objects
@@ -1734,16 +1715,35 @@ the value @qcode{"remove"}.  For example
 set (gca (), "defaultlinecolor", "remove");
 @end example
 
 @noindent
 removes the user-defined default line color setting from the current axes
 object.  To quickly remove all user-defined defaults use the @code{reset}
 function.
 
+By default, high level plotting functions such as @code{plot} reset and
+redefine axes properties independently from the defaults.  An example of such
+property is the axes @code{box} property: it is set @code{on} by high level 2-D
+graphics functions regardless of the property @qcode{"defaultaxesbox"}.  Use
+the @code{hold} function to prevent this behavior:
+
+@example
+@group
+set (groot, "defaultaxesbox", "off");
+subplot (2, 1, 1);
+plot (1:10)
+title ("Box is on anyway")
+subplot (2, 1, 2);
+hold on
+plot (1:10)
+title ("Box is off")
+@end group
+@end example
+
 @DOCSTRING(reset)
 
 Getting the @qcode{"default"} property of an object returns a list of
 user-defined defaults set for the object.  For example,
 
 @example
 get (gca (), "default");
 @end example
@@ -2660,18 +2660,17 @@ graphics toolkit.
 @DOCSTRING(gnuplot_binary)
 
 @node Hardware vs. Software Rendering
 @subsubsection Hardware vs. Software Rendering
 @cindex opengl rendering slow windows
 
 On Windows platforms, Octave uses software rendering for the OpenGL graphics
 toolkits (@qcode{"qt"} and @qcode{"fltk"}) by default.  This is done to avoid
-rendering and printing issues due to imperfect OpenGL driver implementations for
-diverse graphic cards from different vendors.  As a down-side, software
-rendering might be considerably slower than hardware accelerated rendering.  To
-permanently switch back to hardware accelerated rendering with your graphic card
-drivers, rename the following file while Octave is closed:
+rendering and printing issues due to imperfect OpenGL driver implementations
+for diverse graphic cards from different vendors.  As a down-side, software
+rendering might be considerably slower than hardware accelerated rendering. 
+To permanently switch back to hardware accelerated rendering with your graphic
+card drivers, rename the following file while Octave is closed:
 
 @file{@var{octave-home}\bin\opengl32.dll}
 @*where @var{octave-home} is the directory in which Octave is installed (the
 default is @file{C:\Octave\Octave-@var{version}}).
-
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -899,18 +899,25 @@ negative numbers or when the values are 
 ## non-integer real numbers
 %!assert (mod (2.1, 0.1), 0)
 %!assert (mod (2.1, 0.2), 0.1, eps)
 
 %!assert <*45587> (signbit (mod (-0, 0)))
 %!assert <*45587> (! signbit (mod (0, -0)))
 
 %!assert <*42627> (mod (0.94, 0.01), 0.0)
+
+%!assert <*54602> (mod (int8 (125), int8 (-25)), int8 (0))
+%!assert <*54602> (mod (int8 (-125), int8 (-25)), int8 (0))
+%!assert <*54602> (mod (int8 (-125), int8 (0)), int8 (-125))
+%!assert <*54602> (mod (int8 (0), int8 (-25)), int8 (0))
+
 */
 
+
 #define DATA_REDUCTION(FCN)                                             \
                                                                         \
   int nargin = args.length ();                                          \
                                                                         \
   if (nargin < 1 || nargin > 2)                                         \
     print_usage ();                                                     \
                                                                         \
   octave_value retval;                                                  \
diff --git a/liboctave/util/oct-inttypes.h b/liboctave/util/oct-inttypes.h
--- a/liboctave/util/oct-inttypes.h
+++ b/liboctave/util/oct-inttypes.h
@@ -718,17 +718,17 @@ public:
 
   // Modulus.  Note the weird y = 0 case for Matlab compatibility.
 
   static T mod (T x, T y)
   {
     if (y != 0)
       {
         T r = x % y;
-        return ((r < 0) != (y < 0)) ? r + y : r;
+        return (r == 0) ? 0 : (((r < 0) != (y < 0)) ? r + y : r);
       }
     else
       return x;
   }
 };
 
 #if defined (OCTAVE_INT_USE_LONG_DOUBLE)
 
diff --git a/scripts/image/image.m b/scripts/image/image.m
--- a/scripts/image/image.m
+++ b/scripts/image/image.m
@@ -22,21 +22,22 @@
 ## @deftypefnx {} {} image (@dots{}, "@var{prop}", @var{val}, @dots{})
 ## @deftypefnx {} {} image ("@var{prop1}", @var{val1}, @dots{})
 ## @deftypefnx {} {@var{h} =} image (@dots{})
 ## Display a matrix as an indexed color image.
 ##
 ## The elements of @var{img} are indices into the current colormap.
 ##
 ## @var{x} and @var{y} are optional 2-element vectors, @w{@code{[min, max]}},
-## which specify the range for the axis labels.  If a range is specified as
-## @w{@code{[max, min]}} then the image will be reversed along that axis.  For
-## convenience, @var{x} and @var{y} may be specified as N-element vectors
-## matching the length of the data in @var{img}.  However, only the first and
-## last elements will be used to determine the axis limits.
+## which specify the coordinates of the centers of the corner pixels.
+## If a range is specified as @w{@code{[max, min]}} then the image will be
+## reversed along that axis.  For convenience, @var{x} and @var{y} may be
+## specified as N-element vectors matching the length of the data in @var{img}.
+## However, only the first and last elements will be used to determine the axis
+## limits.
 ##
 ## Multiple property/value pairs may be specified for the image object, but
 ## they must appear in pairs.
 ##
 ## The optional return value @var{h} is a graphics handle to the image.
 ##
 ## Implementation Note: The origin (0, 0) for images is located in the
 ## upper left.  For ordinary plots, the origin is located in the lower
diff --git a/scripts/image/imagesc.m b/scripts/image/imagesc.m
--- a/scripts/image/imagesc.m
+++ b/scripts/image/imagesc.m
@@ -25,20 +25,23 @@
 ## @deftypefnx {} {} imagesc (@var{hax}, @dots{})
 ## @deftypefnx {} {@var{h} =} imagesc (@dots{})
 ## Display a scaled version of the matrix @var{img} as a color image.
 ##
 ## The colormap is scaled so that the entries of the matrix occupy the entire
 ## colormap.  If @code{@var{climits} = [@var{lo}, @var{hi}]} is given, then
 ## that range is set to the @qcode{"clim"} of the current axes.
 ##
-## The axis values corresponding to the matrix elements are specified in
-## @var{x} and @var{y}, either as pairs giving the minimum and maximum
-## values for the respective axes, or as values for each row and column
-## of the matrix @var{img}.
+## @var{x} and @var{y} are optional 2-element vectors, @w{@code{[min, max]}},
+## which specify the coordinates of the centers of the corner pixels.
+## If a range is specified as @w{@code{[max, min]}} then the image will be
+## reversed along that axis.  For convenience, @var{x} and @var{y} may be
+## specified as N-element vectors matching the length of the data in @var{img}.
+## However, only the first and last elements will be used to determine the axis
+## limits.
 ##
 ## The optional return value @var{h} is a graphics handle to the image.
 ##
 ## Calling Forms: The @code{imagesc} function can be called in two forms:
 ## High-Level and Low-Level.  When invoked with normal options, the High-Level
 ## form is used which first calls @code{newplot} to prepare the graphic figure
 ## and axes.  When the only inputs to @code{image} are property/value pairs
 ## the Low-Level form is used which creates a new instance of an image object
diff --git a/scripts/image/imshow.m b/scripts/image/imshow.m
--- a/scripts/image/imshow.m
+++ b/scripts/image/imshow.m
@@ -43,25 +43,27 @@
 ## @table @asis
 ## @item @qcode{"displayrange"}
 ## @var{value1} is the display range as described above.
 ##
 ## @item @qcode{"colormap"}
 ## @var{value1} is the colormap to use when displaying an indexed image.
 ##
 ## @item @qcode{"xdata"}
-## If @var{value1} is a two element vector, it must contain horizontal axis
-## limits in the form [xmin xmax]; Otherwise @var{value1} must be a vector and
-## only the first and last elements will be used for xmin and xmax
+## If @var{value1} is a 2-element vector, it must contain horizontal image
+## limits in the form [xmin, xmax], where xmin and xmax are the abscissa of
+## the centers of the corner pixels.  Otherwise @var{value1} must be a vector
+## and only the first and last elements will be used for xmin and xmax
 ## respectively.
 ##
 ## @item @qcode{"ydata"}
-## If @var{value1} is a two element vector, it must contain vertical axis
-## limits in the form [ymin ymax]; Otherwise @var{value1} must be a vector and
-## only the first and last elements will be used for ymin and ymax
+## If @var{value1} is a 2-element vector, it must contain vertical image
+## limits in the form [ymin, ymax], where ymin and ymax are the ordinates of
+## the center of the corner pixels.  Otherwise @var{value1} must be a vector
+## and only the first and last elements will be used for ymin and ymax
 ## respectively.
 ##
 ## @end table
 ##
 ## The optional return value @var{h} is a graphics handle to the image.
 ## @seealso{image, imagesc, colormap, gray2ind, rgb2ind}
 ## @end deftypefn
 
