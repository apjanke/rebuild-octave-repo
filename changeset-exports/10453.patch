# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1269462393 14400
#      Wed Mar 24 16:26:33 2010 -0400
# Node ID 7d23c19249d670304e91688433f4c23065c973ca
# Parent  a9677b03632b4217839bbe1fffe7b6369aa9f5bc
NEWS: style fixes

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,18 @@
+2010-03-24  John W. Eaton  <jwe@octave.org>
+
+	* configure.ac (AC_INIT): Version is now 3.3.51.
+	(OCTAVE_API_VERSION_NUMBER): Now 39.
+	(OCTAVE_RELEASE_DATE): Now 2010-03-24.
+
+2010-03-24  John W. Eaton  <jwe@octave.org>
+
+	* NEWS: Style fixes.
+
 2010-03-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* NEWS: Update.
 
 2010-03-15  John W. Eaton  <jwe@octave.org>
 
 	* configure.ac (AH_BOTTOM): Define GNULIB_NAMESPACE.
 
diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -144,47 +144,47 @@ Summary of important user-visible change
 
  ** As a side effect of code refactoring in liboctave, the binary
     logical operations are now more easily amenable to compiler
     optimizations and are thus significantly faster.
 
  ** Octave now allows user-defined `subsasgn' methods to optimize out
     redundant copies.  For more information, see the manual.
 
- ** More efficient matrix division handling. Octave is now able to
+ ** More efficient matrix division handling.  Octave is now able to
     handle the expressions
     
        M' \ V
        M.' \ V
        V / M 
 
     (M is a matrix and V is a vector) more efficiently in certain cases.
     In particular, if M is triangular, all three expressions will be
     handled by a single call to xTRTRS (from LAPACK), with appropriate
-    flags. Previously, all three expressions required a physical
+    flags.  Previously, all three expressions required a physical
     transpose of M.
 
  ** More efficient handling of certain mixed real-complex matrix
     operations.  For instance, if RM is a real matrix and CM a complex
     matrix,
     
       RM * CM
 
     can now be evaluated either as
 
       complex (RM * real (CM), RM * imag (CM))
 
     or as
 
       complex (RM) * CM,
 
-    depending on the dimensions.  The first form requires more temporaries
-    and copying, but halves the FLOP count, which normally brings better
-    performance if RM has enough rows.  Previously, the second form was
-    always used.
+    depending on the dimensions.  The first form requires more
+    temporaries and copying, but halves the FLOP count, which normally
+    brings better performance if RM has enough rows.  Previously, the
+    second form was always used.
 
     Matrix division is similarly affected. 
 
  ** More efficient handling of triangular matrix factors returned from
     factorizations.  The functions for computing QR, LU and Cholesky
     factorizations will now automatically return the triangular matrix
     factors with proper internal matrix_type set, so that it won't need
     to be computed when the matrix is used for division.
@@ -209,33 +209,34 @@ Summary of important user-visible change
 
  ** The `strfind' and `strrep' functions now have compiled
     implementations, facilitating significantly more efficient searching
     and replacing in strings, especially with longer patterns.  The code
     of `strcat' has been vectorized and is now much more efficient when
     many strings are concatenated.  The `strcmpi' and `strncmpi'
     functions are now built-in functions, providing better performance.
  
- ** Matlab-style ignoring input and output function arguments using tilde (~)
-    is now supported. For more details, consult the manual.
+ ** Matlab-style ignoring input and output function arguments using
+    tilde (~) is now supported.  For more details, consult the manual.
 
- ** The list datatype, deprecated since the introduction of cells, has been removed.
+ ** The list datatype, deprecated since the introduction of cells, has
+    been removed.
 
- ** The accumarray function has been optimized and is now significantly faster 
-    in certain important cases.
+ ** The accumarray function has been optimized and is now significantly
+    faster in certain important cases.
 
  ** The behavior of isreal and isnumeric functions was changed to be more
     Matlab-compatible.
 
  ** The integer math & conversion warnings (Octave:int-convert-nan,
     Octave:int-convert-non-int-val, Octave:int-convert-overflow,
     Octave:int-math-overflow) have been removed. 
 
- ** rem and mod are now built-in functions. They also handle integer types
-    efficiently using integer arithmetic.
+ ** rem and mod are now built-in functions.  They also handle integer
+    types efficiently using integer arithmetic.
 
 Summary of important user-visible changes for version 3.2:
 ---------------------------------------------------------
 
  ** Compatibility with Matlab graphics has been improved.
 
     The hggroup object and associated listener callback functions have
     been added allowing the inclusion of group objects.  Data sources
@@ -438,33 +439,35 @@ Summary of important user-visible change
  ** Improved performance for reduction operations.
 
     The performance of the sum, prod, sumsq, cumsum, cumprod, any, all,
     max and min functions has been significantly improved.
 
  ** Sorting and searching.
     
     The performance of sort has been improved, especially when sorting
-    indices are requested. An efficient built-in issorted implementation
-    was added. sortrows now uses a more efficient algorithm, especially
-    in the homegeneous case. lookup is now a built-in function performing
-    a binary search, optimized for long runs of close elements. Lookup
-    also works with cell arrays of strings.
+    indices are requested.  An efficient built-in issorted
+    implementation was added.  The sortrows function now uses a more
+    efficient algorithm, especially in the homegeneous case.  The lookup
+    function is now a built-in function performing a binary search,
+    optimized for long runs of close elements.  Lookup also works with
+    cell arrays of strings.
 
  ** Range arithmetics
 
-    For some operations on ranges, Octave will attempt to keep the result as a
-    range.  These include negation, adding a scalar, subtracting a scalar, and
-    multiplying by a scalar. Ranges with zero increment are allowed and can be
-    constructed using the built-in function `ones'.
+    For some operations on ranges, Octave will attempt to keep the
+    result as a range.  These include negation, adding a scalar,
+    subtracting a scalar, and multiplying by a scalar. Ranges with zero
+    increment are allowed and can be constructed using the built-in
+    function `ones'.
 
  ** Various performance improvements.
 
-    Performance of a number of other built-in operations and functions was
-    improved, including:
+    Performance of a number of other built-in operations and functions
+    was improved, including:
 
     * logical operations
     * comparison operators
     * element-wise power
     * accumarray
     * cellfun
     * isnan
     * isinf
