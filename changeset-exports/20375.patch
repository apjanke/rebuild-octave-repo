# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1437611231 14400
#      Wed Jul 22 20:27:11 2015 -0400
# Node ID 31f89b12aaf7050a78f032a1f7c588f923144093
# Parent  0cefba1a1030476637998443aa1566b0ff636dc8
strftime: Add support for "%z" conversion specifier (bug #45592)

* oct-time.cc (octave_time::octave_time, octave_base_tm::strftime,
octave_base_tm::init, octave_strptime::init): Use HAVE_TM_GMTOFF instead
of HAVE_STRUCT_TM_GMTOFF.
* time.cc (mk_tm_map, extract_tm): Support "gmtoff" field.
(Fgmtime, Flocaltime): Update docstrings to mention "gmtoff".
(Fstrftime): Describe the "%z" conversion specifier in docstring.
* system.txi (Timing Utilities): Mention "gmtoff" structure element.

diff --git a/doc/interpreter/system.txi b/doc/interpreter/system.txi
--- a/doc/interpreter/system.txi
+++ b/doc/interpreter/system.txi
@@ -75,16 +75,19 @@ Years since 1900.
 Days since Sunday (0-6).
 
 @item yday
 Days since January 1 (0-365).
 
 @item isdst
 Daylight Savings Time flag.
 
+@item gmtoff
+Seconds offset from UTC.
+
 @item zone
 Time zone.
 @end table
 
 @noindent
 In the descriptions of the following functions, this structure is
 referred to as a @var{tm_struct}.
 
diff --git a/libinterp/corefcn/time.cc b/libinterp/corefcn/time.cc
--- a/libinterp/corefcn/time.cc
+++ b/libinterp/corefcn/time.cc
@@ -45,16 +45,17 @@ mk_tm_map (const octave_base_tm& t)
   m.assign ("min", static_cast<double> (t.min ()));
   m.assign ("hour", static_cast<double> (t.hour ()));
   m.assign ("mday", static_cast<double> (t.mday ()));
   m.assign ("mon", static_cast<double> (t.mon ()));
   m.assign ("year", static_cast<double> (t.year ()));
   m.assign ("wday", static_cast<double> (t.wday ()));
   m.assign ("yday", static_cast<double> (t.yday ()));
   m.assign ("isdst", static_cast<double> (t.isdst ()));
+  m.assign ("gmtoff", static_cast<double> (t.gmtoff ()));
   m.assign ("zone", t.zone ());
 
   return m;
 }
 
 static inline int
 intfield (const octave_scalar_map& m, const std::string& k)
 {
@@ -91,16 +92,17 @@ extract_tm (const octave_scalar_map& m)
   tm.min (intfield (m, "min"));
   tm.hour (intfield (m, "hour"));
   tm.mday (intfield (m, "mday"));
   tm.mon (intfield (m, "mon"));
   tm.year (intfield (m, "year"));
   tm.wday (intfield (m, "wday"));
   tm.yday (intfield (m, "yday"));
   tm.isdst (intfield (m, "isdst"));
+  tm.gmtoff (intfield (m, "gmtoff"));
   tm.zone (stringfield (m, "zone"));
 
   return tm;
 }
 
 DEFUN (time, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{seconds} =} time ()\n\
@@ -145,17 +147,18 @@ gmtime (time ())\n\
            min = 15\n\
            hour = 7\n\
            mday = 17\n\
            mon = 1\n\
            year = 97\n\
            wday = 1\n\
            yday = 47\n\
            isdst = 0\n\
-           zone = CST\n\
+           gmtoff = 0\n\
+           zone = GMT\n\
         @}\n\
 @end group\n\
 @end example\n\
 @seealso{strftime, strptime, localtime, mktime, time, now, date, clock, datenum, datestr, datevec, calendar, weekday}\n\
 @end deftypefn")
 {
   octave_value retval;
 
@@ -206,16 +209,17 @@ localtime (time ())\n\
            min = 15\n\
            hour = 1\n\
            mday = 17\n\
            mon = 1\n\
            year = 97\n\
            wday = 1\n\
            yday = 47\n\
            isdst = 0\n\
+           gmtoff = -21600\n\
            zone = CST\n\
         @}\n\
 @end group\n\
 @end example\n\
 @seealso{strftime, strptime, gmtime, mktime, time, now, date, clock, datenum, datestr, datevec, calendar, weekday}\n\
 @end deftypefn")
 {
   octave_value retval;
@@ -394,16 +398,19 @@ Time in seconds since 00:00:00, Jan 1, 1
 Second (00-61).\n\
 \n\
 @item %T\n\
 Time, 24-hour (hh:mm:ss).\n\
 \n\
 @item %X\n\
 Locale's time representation (%H:%M:%S).\n\
 \n\
+@item %z\n\
+Offset from UTC (Â±hhmm), or nothing if no time zone is determinable.\n\
+\n\
 @item %Z\n\
 Time zone (EDT), or nothing if no time zone is determinable.\n\
 @end table\n\
 \n\
 @noindent\n\
 Date fields:\n\
 \n\
 @table @code\n\
diff --git a/liboctave/system/oct-time.cc b/liboctave/system/oct-time.cc
--- a/liboctave/system/oct-time.cc
+++ b/liboctave/system/oct-time.cc
@@ -50,17 +50,17 @@ octave_time::octave_time (const octave_b
   t.tm_hour = tm.hour ();
   t.tm_mday = tm.mday ();
   t.tm_mon = tm.mon ();
   t.tm_year = tm.year ();
   t.tm_wday = tm.wday ();
   t.tm_yday = tm.yday ();
   t.tm_isdst = tm.isdst ();
 
-#if defined (HAVE_STRUCT_TM_GMTOFF)
+#if defined (HAVE_TM_GMTOFF)
   t.tm_gmtoff = tm.gmtoff ();
 #endif
 
 #if defined (HAVE_STRUCT_TM_TM_ZONE)
   std::string s = tm.zone ();
   char *ps = strsave (s.c_str ());
   t.tm_zone = ps;
 #endif
@@ -154,17 +154,17 @@ octave_base_tm::strftime (const std::str
       t.tm_hour = tm_hour;
       t.tm_mday = tm_mday;
       t.tm_mon = tm_mon;
       t.tm_year = tm_year;
       t.tm_wday = tm_wday;
       t.tm_yday = tm_yday;
       t.tm_isdst = tm_isdst;
 
-#if defined (HAVE_STRUCT_TM_GMTOFF)
+#if defined (HAVE_TM_GMTOFF)
       t.tm_gmtoff = tm_gmtoff;
 #endif
 
 #if defined (HAVE_STRUCT_TM_TM_ZONE)
       char *ps = strsave (tm_zone.c_str ());
       t.tm_zone = ps;
 #endif
 
@@ -210,17 +210,17 @@ octave_base_tm::init (void *p)
   tm_hour = t->tm_hour;
   tm_mday = t->tm_mday;
   tm_mon = t->tm_mon;
   tm_year = t->tm_year;
   tm_wday = t->tm_wday;
   tm_yday = t->tm_yday;
   tm_isdst = t->tm_isdst;
 
-#if defined (HAVE_STRUCT_TM_GMTOFF)
+#if defined (HAVE_TM_GMTOFF)
   tm_gmtoff = t->tm_gmtoff;
 #endif
 
 #if defined (HAVE_STRUCT_TM_TM_ZONE)
   if (t->tm_zone)
     tm_zone = t->tm_zone;
 #elif defined (HAVE_TZNAME)
   if (t->tm_isdst == 0 || t->tm_isdst == 1)
@@ -258,17 +258,17 @@ octave_strptime::init (const std::string
   t.tm_hour = 0;
   t.tm_mday = 0;
   t.tm_mon = -1;
   t.tm_year = std::numeric_limits<int>::min ();
   t.tm_wday = 0;
   t.tm_yday = 0;
   t.tm_isdst = 0;
 
-#if defined (HAVE_STRUCT_TM_GMTOFF)
+#if defined (HAVE_TM_GMTOFF)
   t.tm_gmtoff = 0;
 #endif
 
 #if defined (HAVE_STRUCT_TM_TM_ZONE)
   char *ps = strsave ("");
   t.tm_zone = ps;
 #endif
 
