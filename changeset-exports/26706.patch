# HG changeset patch
# User Markus Mützel <markus.muetzel@gmx.de>
# Date 1549739147 -3600
#      Sat Feb 09 20:05:47 2019 +0100
# Node ID ccea3574f36b9e1e4d2f6bc4dde31bc0dc5e4c3d
# Parent  c13143821eefaccf953e605c5e5a1bb5feaaa07a
Support encoding of file streams in textscan (bug #55452).

* oct-stream.cc (do_textscan): Pass encoding in constructor for textscan object.
  (textscan): Store encoding in object. Convert strings from encoding.
* file-io.cc (textscan): Add BIST.
* io.tst (fopen): Use code page identifier that better works cross-platform.

diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -2262,16 +2262,29 @@ as the name of the function when reporti
 
 %!test <52550>
 %! str = " 0 ;1 , $ 2 ;3\n";
 %! obs = textscan (str, "%f", "delimiter", ",;$");
 %! assert (obs, { [0; 1; NaN; 2; 3] });
 %! obs = textscan (str, "%f", "delimiter", {",",";","$"});
 %! assert (obs, { [0; 1; NaN; 2; 3] });
 
+## file stream with encoding
+%!test
+%! f = tempname ();
+%! fid = fopen (f, "w+", "n", "iso-8859-1");
+%! unwind_protect
+%!   fprintf (fid, "abc,äöü\n");
+%!   fseek (fid, 0, "bof");
+%!   obs = textscan (fid, "%s", "delimiter", ",");
+%!   fclose (fid);
+%!   assert (obs, { {"abc"; "äöü"} });
+%! unwind_protect_cleanup
+%!   unlink (f);
+%! end_unwind_protect
 */
 
 // These tests have end-comment sequences, so can't just be in a comment
 #if 0
 ## Test unfinished comment
 %!test
 %! c = textscan ("1 2 /* half comment", "%n %u8", "CommentStyle", {"/*", "*/"});
 %! assert (c, {1, 2});
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -1770,17 +1770,18 @@ namespace octave
   //   scanner.scan (...);
 
   class
   OCTINTERP_API
   textscan
   {
   public:
 
-    textscan (const std::string& who_arg = "textscan");
+    textscan (const std::string& who_arg = "textscan",
+              const std::string& encoding = "utf-8");
 
     // No copying!
 
     textscan (const textscan&) = delete;
 
     textscan& operator = (const textscan&) = delete;
 
     ~textscan (void) = default;
@@ -1792,16 +1793,18 @@ namespace octave
 
   private:
 
     friend class textscan_format_list;
 
     // What function name should be shown when reporting errors.
     std::string who;
 
+    std::string m_encoding;
+
     std::string buf;
 
     // Three cases for delim_table and delim_list
     // 1. delim_table empty, delim_list empty:  whitespace delimiters
     // 2. delim_table = look-up table of delim chars, delim_list empty.
     // 3. delim_table non-empty, delim_list = Cell array of delim strings
 
     std::string whitespace_table;
@@ -2501,23 +2504,23 @@ namespace octave
 
     // Create fmt_list now that the size is known
     for (octave_idx_type i = 1; i < nconv; i++)
       fmt_elts.push_back (new textscan_format_elt (*fmt_elts[0]));
 
     return retval;             // May have returned 4 above.
   }
 
-  textscan::textscan (const std::string& who_arg)
-    : who (who_arg), buf (), whitespace_table (), delim_table (),
-      delims (), comment_style (), comment_len (0), comment_char (-2),
-      buffer_size (0), date_locale (), inf_nan (init_inf_nan ()),
-      empty_value (numeric_limits<double>::NaN ()), exp_chars ("edED"),
-      header_lines (0), treat_as_empty (), treat_as_empty_len (0),
-      whitespace (" \b\t"), eol1 ('\r'), eol2 ('\n'),
+  textscan::textscan (const std::string& who_arg, const std::string& encoding)
+    : who (who_arg), m_encoding (encoding), buf (), whitespace_table (),
+      delim_table (), delims (), comment_style (), comment_len (0),
+      comment_char (-2), buffer_size (0), date_locale (),
+      inf_nan (init_inf_nan ()), empty_value (numeric_limits<double>::NaN ()),
+      exp_chars ("edED"), header_lines (0), treat_as_empty (),
+      treat_as_empty_len (0), whitespace (" \b\t"), eol1 ('\r'), eol2 ('\n'),
       return_on_error (1), collect_output (false),
       multiple_delims_as_one (false), default_exp (true), lines (0)
   { }
 
   octave_value
   textscan::scan (std::istream& isp, const std::string& fmt,
                   octave_idx_type ntimes, const octave_value_list& options,
                   octave_idx_type& count)
@@ -3143,16 +3146,20 @@ namespace octave
           {
             std::string tmp = delim_list(i).string_value ();
             ends[i] = tmp.back ();
           }
         ends[i++] = eol1;
         ends[i++] = eol2;
         val = textscan::read_until (is, delim_list, ends);
       }
+
+    // convert from codepage
+    if (m_encoding.compare ("utf-8"))
+      val = string::u8_from_encoding ("textscan", val, m_encoding);
   }
 
   // Return in VAL the run of characters from IS contained in PATTERN.
 
   int
   textscan::scan_bracket (delimited_stream& is, const std::string& pattern,
                           std::string& val) const
   {
@@ -3190,16 +3197,20 @@ namespace octave
           {                               // and keep looking for single "
             is.get ();
             std::string val1;
             scan_caret (is, R"(")", val1);
             val = val + '"' + val1;
             is.get_undelim ();
           }
       }
+
+    // convert from codepage
+    if (m_encoding.compare ("utf-8"))
+      val = string::u8_from_encoding ("textscan", val, m_encoding);
   }
 
   // Read from IS into VAL a string of the next fmt.width characters,
   // including any whitespace or delimiters.
 
   void
   textscan::scan_cstring (delimited_stream& is, const textscan_format_elt& fmt,
                           std::string& val) const
@@ -3212,16 +3223,20 @@ namespace octave
         if (ch != std::istream::traits_type::eof ())
           val[i] = ch;
         else
           {
             val.resize (i);
             break;
           }
       }
+
+    // convert from codepage
+    if (m_encoding.compare ("utf-8"))
+      val = string::u8_from_encoding ("textscan", val, m_encoding);
   }
 
   //  Read a single '%...' conversion and place it in position ROW of OV.
 
   void
   textscan::scan_one (delimited_stream& is, const textscan_format_elt& fmt,
                       octave_value& ov, Array<octave_idx_type> row)
   {
@@ -5304,17 +5319,17 @@ namespace octave
     octave_value retval = Cell (dim_vector (1, 1), Matrix (0, 1));
 
     std::istream *isp = input_stream ();
 
     if (! isp)
       invalid_operation (who, "reading");
     else
       {
-        textscan scanner (who);
+        textscan scanner (who, encoding ());
 
         retval = scanner.scan (*isp, fmt, ntimes, options, read_count);
       }
 
     return retval;
   }
 
   // Functions that are defined for all output streams
diff --git a/test/io.tst b/test/io.tst
--- a/test/io.tst
+++ b/test/io.tst
@@ -647,35 +647,35 @@
 %!       __printf_assert__ ("EOF not reached when expected to: %s (%s)\n", nm, mode);
 %!     endif
 %!   endif
 %!   unlink (nm);
 %! endif
 
 %!test   # write to and read from file with encoding
 %! temp_file = [tempname(), ".txt"];
-%! fid = fopen (temp_file, "wt", "n", "latin 1");
+%! fid = fopen (temp_file, "wt", "n", "iso-8859-1");
 %! unwind_protect
 %!   [name, mode, arch, codepage] = fopen (fid);
 %!   assert (name, temp_file);
 %!   assert (mode, "w");
-%!   assert (codepage, "latin 1");
+%!   assert (codepage, "iso-8859-1");
 %!   fprintf (fid, "aäu %s\n", "AÄU");
 %!   fclose (fid);
 %!   # open in binary mode
 %!   fid2 = fopen (temp_file, "rb");
 %!   [name, mode, arch, codepage] = fopen (fid2);
 %!   assert (name, temp_file);
 %!   assert (mode, "rb");
 %!   assert (codepage, "utf-8");
 %!   read_binary = fread (fid2);
 %!   fclose (fid2);
 %!   assert (read_binary, [97 228 117 32 65 196 85 10].');
 %!   # open in text mode with correct encoding
-%!   fid3 = fopen (temp_file, "rt", "n", "latin 1");
+%!   fid3 = fopen (temp_file, "rt", "n", "iso-8859-1");
 %!   read_text = fscanf (fid3, "%s");
 %!   fclose (fid3);
 %!   assert (read_text, "aäuAÄU");
 %! unwind_protect_cleanup
 %!   unlink (temp_file);
 %! end_unwind_protect
 
 %!assert (fputs (1, 1),-1)
