# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1207761847 14400
#      Wed Apr 09 13:24:07 2008 -0400
# Node ID 30564b8b19f5745e33209df3d9e846a8eb27b112
# Parent  e9b9f74e028911eb6e6f99726fca5413f689f4fc
Fix various tests under Win32.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2008-04-09  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* DLD-FUNCTIONS/dispatch.cc: Replace system("echo '...'>...") calls
+	with real file writing.
+
 2008-04-07  Jaroslav Hajek <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/qr.cc (Fqrshift): New function.
 	* DLD-FUNCTIONS/chol.cc (Fcholinsert, Fcholdelete, Fcholshift):
 	New functions.
 
 2008-04-04  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/DLD-FUNCTIONS/dispatch.cc b/src/DLD-FUNCTIONS/dispatch.cc
--- a/src/DLD-FUNCTIONS/dispatch.cc
+++ b/src/DLD-FUNCTIONS/dispatch.cc
@@ -225,35 +225,43 @@ for @var{f}.\n\
 %! dispatch('hanning','length','string')
 %! evalin('base','assert(hanning("abc"),3)');
 %! evalin('base','assert(hanning(1),1)');
 %! dispatch('hanning','string');
 
 FIXME I would rather not create dispatch_x/dispatch_y
 in the current directory!  I don't want them installed accidentally.
 
+%!function echo_to_file (str, name)
+%!  fid = fopen (name, 'w');
+%!  if (fid != -1)
+%!    fprintf (fid, str);
+%!    fprintf (fid, '\n');
+%!    fclose (fid);
+%!  endif
+
 %!test # replace base m-file
-%! system("echo 'function a=dispatch_x(a)'>dispatch_x.m");
+%! echo_to_file ('function a=dispatch_x(a)', "dispatch_x.m");
 %! dispatch('dispatch_x','length','string')
 %! assert(dispatch_x(3),3)
 %! assert(dispatch_x("a"),1)
 %! sleep (2);
-%! system("echo 'function a=dispatch_x(a),++a;'>dispatch_x.m");
+%! echo_to_file ('function a=dispatch_x(a),++a;', "dispatch_x.m");
 %! rehash();
 %! assert(dispatch_x(3),4)
 %! assert(dispatch_x("a"),1)
 %!test 
 %! unlink("dispatch_x.m");
 
 %!test # replace dispatch m-file
-%! system("echo 'function a=dispatch_y(a)'>dispatch_y.m");
+%! echo_to_file ('function a=dispatch_y(a)', "dispatch_y.m");
 %! dispatch('hello','dispatch_y','complex scalar')
 %! assert(hello(3i),3i)
 %! sleep (2);
-%! system("echo 'function a=dispatch_y(a),++a;'>dispatch_y.m");
+%! echo_to_file ('function a=dispatch_y(a),++a;', "dispatch_y.m");
 %! rehash();
 %! assert(hello(3i),1+3i)
 %!test 
 %! unlink("dispatch_y.m");
 
 FIXME add tests for preservation of mark_as_command status.
 
 */
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -18,16 +18,23 @@ 2008-03-25  Jaroslav Hajek  <highegg@gma
 2008-03-20  David Bateman  <dbateman@free.fr>
 
 	* test_func.m: Modify to test for char, cell and structure arrays.
 
 	* test_func.m: New test code that ensures that all operations
 	which work on dimensions alone (squeeze, triu, etc.) work for all
 	objects and preserve type.
 
+2008-04-09  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* test_string.m: Fix isprint test under Win32, where
+	isprint(setstr(9)) is true.
+	* test_system.m: Add condition for various syscall tests. Make cd test
+	able to deal with drive-letter-only pathnames (e.g. C:\) under Win32.
+
 2008-03-07  John W. Eaton  <jwe@octave.org>
 
 	* test_logical-wfi-t.m, test_logical-wfi-f.m: Update tests for
 	logical indexing bug fix.
 
 2008-03-06  John W. Eaton  <jwe@octave.org>
 
 	* test_eval.m, test_diffeq.m, test_quad.m, test_signal.m:
diff --git a/test/test_string.m b/test/test_string.m
--- a/test/test_string.m
+++ b/test/test_string.m
@@ -364,16 +364,19 @@
 
 %% test/octave.test/string/isprint-1.m
 %!test
 %! charset = setstr (0:127);
 %! 
 %! result = zeros (1, 128);
 %! 
 %! result (33:127) = 1;
+%! if (ispc () && ! isunix ())
+%!   result(10) = 1;
+%! endif
 %! 
 %! assert(all (isprint (charset) == result));
 
 %% test/octave.test/string/isprint-2.m
 %!error isprint (1, 2);
 
 %% test/octave.test/string/isprint-3.m
 %!error isprint ();
diff --git a/test/test_system.m b/test/test_system.m
--- a/test/test_system.m
+++ b/test/test_system.m
@@ -248,42 +248,44 @@
 
 %% test/octave.test/system/file_in_path-3.m
 %!error <Invalid call to file_in_path.*> file_in_path ();
 
 %% test/octave.test/system/file_in_path-4.m
 %!error <Invalid call to file_in_path.*> file_in_path ("foo", "bar", "baz", "ooka");
 
 %% test/octave.test/system/tilde_expand-1.m
-%!test
+%!testif HAVE_GETPWUID
 %! x = getpwuid (getuid ());
 %! assert((strcmp (x.dir, tilde_expand ("~"))
 %! && strcmp (x.dir, tilde_expand (sprintf ("~%s", x.name)))
 %! && strcmp ("foobar", tilde_expand ("foobar"))));
 
 %% test/octave.test/system/tilde_expand-2.m
 %!error <Invalid call to tilde_expand.*> tilde_expand ();
 
 %% test/octave.test/system/tilde_expand-3.m
 %!error <Invalid call to tilde_expand.*> tilde_expand ("str", 2);
 
 %% test/octave.test/system/getpgrp-1.m
-%!assert(getpgrp () > 0);
+%!testif HAVE_GETPGRP
+%! assert(getpgrp () > 0);
 
 %% test/octave.test/system/getpgrp-2.m
 %!error <... getpgrp> getpgrp (1);
 
 %% test/octave.test/system/getpid-1.m
 %!assert(getpid () > 0);
 
 %% test/octave.test/system/getpid-2.m
 %!error <... getpid> getpid (1);
 
 %% test/octave.test/system/getppid-1.m
-%!assert(getppid () > 0);
+%!testif HAVE_GETPPID
+%! assert(getppid () > 0);
 
 %% test/octave.test/system/getppid-2.m
 %!error <... getppid> getppid (1);
 
 %% test/octave.test/system/geteuid-1.m
 %!assert(geteuid () >= 0);
 
 %% test/octave.test/system/geteuid-2.m
@@ -342,122 +344,129 @@
 %! warning (wns.state, "Octave:num-to-str");
 
 %% test/octave.test/system/cd-1.m
 %!test
 %! xdir = pwd ();
 %! cd /
 %! d1 = pwd ();
 %! cd (xdir);
-%! assert("/", d1);
+%! if (ispc () && ! isunix ())
+%!   # should be a drive letter
+%!   assert(length (d1), 3);
+%!   assert(d1(2), ":");
+%!   assert(d1(3), "\\");
+%! else
+%!   assert("/", d1);
+%! endif
 %! assert(pwd(), xdir);
 
 %% test/octave.test/system/cd-2.m
 %!error cd (1);
 
 %% test/octave.test/system/pwd-1.m
 %!assert(isstr (pwd ()));
 
 %% test/octave.test/system/getpwent-1.m
-%!test
+%!testif HAVE_GETPWENT
 %! s = getpwent ();
 %! endpwent (); 
 %! assert((isstruct (s)
 %! && struct_contains (s, "name")
 %! && struct_contains (s, "passwd")
 %! && struct_contains (s, "uid")
 %! && struct_contains (s, "gid")
 %! && struct_contains (s, "gecos")
 %! && struct_contains (s, "dir")
 %! && struct_contains (s, "shell")));
 
 %% test/octave.test/system/getpwent-2.m
 %!error <Invalid call to getpwent.*> getpwent (1);
 
 %% test/octave.test/system/getpwuid-1.m
-%!test
+%!testif HAVE_GETPWUID
 %! x = getpwent ();
 %! y = getpwuid (x.uid);
 %! endpwent (); 
 %! assert(strcmp (x.name, y.name) && x.uid == y.uid && x.gid == y.gid);
 
 %% test/octave.test/system/getpwuid-2.m
 %!error <Invalid call to getpwuid.*> getpwuid ();
 
 %% test/octave.test/system/getpwuid-3.m
 %!error <Invalid call to getpwuid.*> getpwuid (1, 2);
 
 %% test/octave.test/system/getpwnam-1.m
-%!test
+%!testif HAVE_GETPWNAM
 %! x = getpwent ();
 %! y = getpwnam (x.name);
 %! endpwent (); 
 %! assert(strcmp (x.name, y.name) && x.uid == y.uid && x.gid == y.gid);
 
 %% test/octave.test/system/getpwnam-2.m
 %!error <Invalid call to getpwnam.*> getpwnam ();
 
 %% test/octave.test/system/getpwnam-3.m
 %!error <Invalid call to getpwnam.*> getpwnam ("foo", 1);
 
 %% test/octave.test/system/setpwent-1.m
-%!test
+%!testif HAVE_SETPWENT
 %! x = getpwent ();
 %! setpwent ();
 %! y = getpwent ();
 %! endpwent (); 
 %! assert(strcmp (x.name, y.name) && x.uid == y.uid && x.gid == y.gid);
 
 %% test/octave.test/system/setpwent-2.m
 %!error <Invalid call to setpwent.*> setpwent (1);
 
 %% test/octave.test/system/endpwent-1.m
 %!error <Invalid call to endpwent.*> endpwent (1);
 
 %% test/octave.test/system/getgrent-1.m
-%!test
+%!testif HAVE_GETGRENT
 %! x = getgrent ();
 %! endgrent ();
 %! assert((isstruct (x)
 %! && struct_contains (x, "name")
 %! && struct_contains (x, "passwd")
 %! && struct_contains (x, "gid")
 %! && struct_contains (x, "mem")));
 
 %% test/octave.test/system/getgrent-2.m
 %!error <Invalid call to getgrent.*> getgrent (1);
 
 %% test/octave.test/system/getgrgid-1.m
-%!test
+%!testif HAVE_GETGRGID
 %! x = getgrent ();
 %! y = getgrgid (x.gid);
 %! endgrent ();
 %! assert(strcmp (x.name, y.name) && x.gid == y.gid);
 
 %% test/octave.test/system/getgrgid-2.m
 %!error <Invalid call to getgrgid.*> getgrgid ();
 
 %% test/octave.test/system/getgrgid-3.m
 %!error <Invalid call to getgrgid.*> getgrgid (1, 2);
 
 %% test/octave.test/system/getgrnam-1.m
-%!test
+%!testif HAVE_GETGRNAM
 %! x = getgrent ();
 %! y = getgrnam (x.name);
 %! endgrent ();
 %! assert(strcmp (x.name, y.name) && x.gid == y.gid);
 
 %% test/octave.test/system/getgrnam-2.m
 %!error <Invalid call to getgrnam.*> getgrnam ();
 
 %% test/octave.test/system/getgrnam-3.m
 %!error <Invalid call to getgrnam.*> getgrnam ("foo", 1);
 
 %% test/octave.test/system/setgrent-1.m
-%!test
+%!testif HAVE_SETGRENT
 %! x = getgrent ();
 %! setgrent ();
 %! y = getgrent ();
 %! endgrent ();
 %! assert(strcmp (x.name, y.name) && x.gid == y.gid);
 
 %% test/octave.test/system/setgrent-2.m
 %!error <Invalid call to setgrent.*> setgrent (1);
