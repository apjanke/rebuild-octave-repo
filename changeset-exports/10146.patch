# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1263992212 -3600
#      Wed Jan 20 13:56:52 2010 +0100
# Node ID 9597eea7fa36fe34b2c33934c5b3bdb7608fcc63
# Parent  fa01c1670b3ea4a5be802862280a38ebb19bc3ce
inline xmin/xmax & optimize special cases

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2010-01-20  Jaroslav Hajek  <highegg@gmail.com>
+
+	* lo-mappers.h (xmin (double, double), xmax (double, double),
+	xmin (float, float), xmax (float, float)): Inline definitions.
+	* lo-mappers.cc (xmin (double, double), xmax (double, double),
+	xmin (float, float), xmax (float, float)): Remove from here.
+	* mx-inlines.cc (mx_inline_xmin, mx_inline_xmax): Provide
+	specializations for real array-scalar and scalar-array cases.
+
 2010-01-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-norm.cc (norm_accumulator_p::accum, norm_accumulator_mp::accum):
 	Call octave_quit here.
 	(higham_subp): Also here.
 
 2010-01-20  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/liboctave/lo-mappers.cc b/liboctave/lo-mappers.cc
--- a/liboctave/lo-mappers.cc
+++ b/liboctave/lo-mappers.cc
@@ -223,30 +223,16 @@ octave_is_NA (double x)
 bool
 octave_is_NaN_or_NA (double x)
 {
   return lo_ieee_isnan (x);
 }
 
 // (double, double) -> double mappers.
 
-// According to Matlab, is both args are NaN, the first one is returned.
-
-double
-xmin (double x, double y)
-{
-  return  xisnan (y) ? x : (x <= y ? x : y);
-}
-
-double
-xmax (double x, double y)
-{
-  return  xisnan (y) ? x : (x >= y ? x : y);
-}
-
 // complex -> complex mappers.
 
 Complex
 acos (const Complex& x)
 {
   static Complex i (0, 1);
 
   return -i * (log (x + i * (sqrt (1.0 - x*x))));
@@ -541,30 +527,16 @@ octave_is_NA (float x)
 bool
 octave_is_NaN_or_NA (float x)
 {
   return lo_ieee_isnan (x);
 }
 
 // (float, float) -> float mappers.
 
-// FIXME -- need to handle NA too?
-
-float
-xmin (float x, float y)
-{
-  return  xisnan (y) ? x : (x <= y ? x : y);
-}
-
-float
-xmax (float x, float y)
-{
-  return  xisnan (y) ? x : (x >= y ? x : y);
-}
-
 // complex -> complex mappers.
 
 FloatComplex
 acos (const FloatComplex& x)
 {
   static FloatComplex i (0, 1);
 
   return -i * (log (x + i * (sqrt (static_cast<float>(1.0) - x*x))));
diff --git a/liboctave/lo-mappers.h b/liboctave/lo-mappers.h
--- a/liboctave/lo-mappers.h
+++ b/liboctave/lo-mappers.h
@@ -64,18 +64,23 @@ inline bool xisinf (double x)
 { return std::isinf (x); }
 #else
 extern OCTAVE_API bool xisinf (double x);
 #endif
 
 extern OCTAVE_API bool octave_is_NA (double x);
 extern OCTAVE_API bool octave_is_NaN_or_NA (double x) GCC_ATTR_DEPRECATED;
 
-extern OCTAVE_API double xmin (double x, double y);
-extern OCTAVE_API double xmax (double x, double y);
+// This form is favorable. GCC will translate (x <= y ? x : y) without a jump,
+// hence the only conditional jump involved will be the first (xisnan), infrequent
+// and hence friendly to branch prediction.
+inline double xmin (double x, double y)
+{ return xisnan (y) ? x : (x <= y ? x : y);; }
+inline double xmax (double x, double y)
+{ return xisnan (y) ? x : (x >= y ? x : y);; }
 
 extern OCTAVE_API Complex acos (const Complex& x);
 extern OCTAVE_API Complex acosh (const Complex& x);
 extern OCTAVE_API Complex asin (const Complex& x);
 extern OCTAVE_API Complex asinh (const Complex& x);
 extern OCTAVE_API Complex atan (const Complex& x);
 extern OCTAVE_API Complex atanh (const Complex& x);
 
@@ -136,18 +141,20 @@ inline bool xisinf (float x)
 #else
 extern OCTAVE_API bool xisinf (float x);
 #endif
 
 
 extern OCTAVE_API bool octave_is_NA (float x);
 extern OCTAVE_API bool octave_is_NaN_or_NA (float x) GCC_ATTR_DEPRECATED;
 
-extern OCTAVE_API float xmin (float x, float y);
-extern OCTAVE_API float xmax (float x, float y);
+inline float xmin (float x, float y)
+{ return xisnan (y) ? x : (x <= y ? x : y);; }
+inline float xmax (float x, float y)
+{ return xisnan (y) ? x : (x >= y ? x : y);; }
 
 extern OCTAVE_API FloatComplex acos (const FloatComplex& x);
 extern OCTAVE_API FloatComplex acosh (const FloatComplex& x);
 extern OCTAVE_API FloatComplex asin (const FloatComplex& x);
 extern OCTAVE_API FloatComplex asinh (const FloatComplex& x);
 extern OCTAVE_API FloatComplex atan (const FloatComplex& x);
 extern OCTAVE_API FloatComplex atanh (const FloatComplex& x);
 
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -23,23 +23,25 @@ along with Octave; see the file COPYING.
 
 */
 
 #if !defined (octave_mx_inlines_h)
 #define octave_mx_inlines_h 1
 
 #include <cstddef>
 #include <cmath>
+#include <memory>
 
 #include "quit.h"
 
 #include "oct-cmplx.h"
 #include "oct-locbuf.h"
 #include "oct-inttypes.h"
 #include "Array-util.h"
+#include "Array-util.h"
 
 // Provides some commonly repeated, basic loop templates.
 
 template <class R, class S>
 inline void mx_inline_fill (size_t n, R *r, S s)
 { for (size_t i = 0; i < n; i++) r[i] = s; }
 
 #define DEFMXUNOP(F, OP) \
@@ -240,16 +242,40 @@ inline void F (size_t n, T *r, const T *
 { for (size_t i = 0; i < n; i++) r[i] = FUN (x[i], y); } \
 template <class T> \
 inline void F (size_t n, T *r, T x, const T *y) \
 { for (size_t i = 0; i < n; i++) r[i] = FUN (x, y[i]); }
 
 DEFMXMAPPER2 (mx_inline_xmin, xmin)
 DEFMXMAPPER2 (mx_inline_xmax, xmax)
 
+// Specialize array-scalar max/min
+#define DEFMINMAXSPEC(T, F, OP) \
+template <> \
+inline void F<T> (size_t n, T *r, const T *x, T y) \
+{ \
+  if (xisnan (y)) \
+    std::memcpy (r, x, n * sizeof (T)); \
+  else \
+    for (size_t i = 0; i < n; i++) r[i] = (x[i] OP y) ? x[i] : y; \
+} \
+template <> \
+inline void F<T> (size_t n, T *r, T x, const T *y) \
+{ \
+  if (xisnan (x)) \
+    std::memcpy (r, y, n * sizeof (T)); \
+  else \
+    for (size_t i = 0; i < n; i++) r[i] = (y[i] OP x) ? y[i] : x; \
+}
+
+DEFMINMAXSPEC (double, mx_inline_xmin, <=) 
+DEFMINMAXSPEC (double, mx_inline_xmax, >=) 
+DEFMINMAXSPEC (float, mx_inline_xmin, <=) 
+DEFMINMAXSPEC (float, mx_inline_xmax, >=) 
+
 // Pairwise power
 #define DEFMXMAPPER2X(F, FUN) \
 template <class R, class X, class Y> \
 inline void F (size_t n, R *r, const X *x, const Y *y) \
 { for (size_t i = 0; i < n; i++) r[i] = FUN (x[i], y[i]); } \
 template <class R, class X, class Y> \
 inline void F (size_t n, R *r, const X *x, Y y) \
 { for (size_t i = 0; i < n; i++) r[i] = FUN (x[i], y); } \
