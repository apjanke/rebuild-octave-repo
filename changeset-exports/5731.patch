# HG changeset patch
# User jwe
# Date 1144092807 0
#      Mon Apr 03 19:33:27 2006 +0000
# Node ID c7d5a534afa521d9e17e9428dcfb8b73b0e064b6
# Parent  109fdf7b3dcb3109eacd1b381edcbb05afbe987b
[project @ 2006-04-03 19:33:26 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,13 @@
 2006-04-03  David Bateman  <dbateman@free.fr>
 
+	* Sparse.cc (Sparse<T>::resize): Use xcidx rather than cdix, etc
+	to avoid copy of original matrix.
+
 	* Makefile.in (INCLUDES): Add randgamma.h, randpoisson.h and
         randmtzig.h to the list.
 	(LIBOCTAVE_C_SOURCES): Add randgamma.c, randpoisson.c and
         randmtzig.c to the list.
 	* oct-rand.cc (do_old_initialization): Rename from do_initialization.
 	(use_old_generators): New variable.
 	(old_initialized): Rename from initialized.
 	(new_initialized): New variable.
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -846,75 +846,76 @@ Sparse<T>::resize_no_fill (octave_idx_ty
     }
 
   if (ndims () == 0)
     dimensions = dim_vector (0, 0);
 
   if (r == dim1 () && c == dim2 ())
     return;
 
-  typename Sparse<T>::SparseRep *old_rep = Sparse<T>::rep;
+  typename Sparse<T>::SparseRep *old_rep = rep;
+
   octave_idx_type nc = cols ();
   octave_idx_type nr = rows ();
 
   if (nnz () == 0 || r == 0 || c == 0)
     // Special case of redimensioning to/from a sparse matrix with 
     // no elements
     rep = new typename Sparse<T>::SparseRep (r, c);
   else
     {
       octave_idx_type n = 0;
       Sparse<T> tmpval;
       if (r >= nr)
 	{
 	  if (c > nc)
-	    n = cidx(nc);
+	    n = xcidx(nc);
 	  else
-	    n = cidx(c);
+	    n = xcidx(c);
 
 	  tmpval = Sparse<T> (r, c, n);
 
 	  if (c > nc)
 	    {
 	      for (octave_idx_type i = 0; i < nc; i++)
-		tmpval.cidx(i) = cidx(i);
+		tmpval.cidx(i) = xcidx(i);
 	      for (octave_idx_type i = nc+2; i < c; i++)
 		tmpval.cidx(i) = tmpval.cidx(i-1);
 	    }
 	  else if (c <= nc)
 	    for (octave_idx_type i = 0; i < c; i++)
-	      tmpval.cidx(i) = cidx(i);
+	      tmpval.cidx(i) = xcidx(i);
 	  
 	  for (octave_idx_type i = 0; i < n; i++)
 	    {
-	      tmpval.data(i) = data(i);
-	      tmpval.ridx(i) = ridx(i);
+	      tmpval.data(i) = xdata(i);
+	      tmpval.ridx(i) = xridx(i);
 	    }
 	}
       else
 	{
 	  // Count how many non zero terms before we do anything
 	  for (octave_idx_type i = 0; i < c; i++)
-	    for (octave_idx_type j = cidx(i); j < cidx(i+1); j++)
-	      if (ridx(j) < r)
+	    for (octave_idx_type j = xcidx(i); j < xcidx(i+1); j++)
+	      if (xridx(j) < r)
 		n++;
 
 	  if (n)
 	    {
 	      // Now that we know the size we can do something
 	      tmpval = Sparse<T> (r, c, n);
 
 	      tmpval.cidx(0);
 	      for (octave_idx_type i = 0, ii = 0; i < c; i++)
 		{
-		  for (octave_idx_type j = cidx(i); j < cidx(i+1); j++)
-		    if (ridx(j) < r)
+		  for (octave_idx_type j = xcidx(i); j < xcidx(i+1); j++)
+		    if (xridx(j) < r)
 		      {
-			tmpval.data(ii) = data(j);
-			tmpval.ridx(ii++) = ridx(j);
+			tmpval.data(ii) = xdata(j);
+			tmpval.ridx(ii++) = xridx(j);
 		      }
 		  tmpval.cidx(i+1) = ii;
 		}
 	    }
 	  else
 	    tmpval = Sparse<T> (r, c);
 	}
 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2006-04-02  David Bateman  <dbateman@free.fr>
+
+	* general/tril.m, general.triu.m:
+	Use resize (resize (x, 0), nr, nc) rather than zeros (nr, nc)
+	to allow user types to work correctly.
+	* special-matrix/hankel.m, special-matrix/toeplitz.m: Ditto.
+
 2006-04-03  David Bateman  <dbateman@free.fr>
 
 	* plot/grid.m: Cache the state of the grid to allow toggling.
 	Accept keyword "minor" for minor grid.
 
 2006-03-28  John W. Eaton  <jwe@octave.org>
 
 	* general/isscalar.m: Only require that all dimensions are 1 for
diff --git a/scripts/general/tril.m b/scripts/general/tril.m
--- a/scripts/general/tril.m
+++ b/scripts/general/tril.m
@@ -63,21 +63,17 @@
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = tril (x, k)
 
   if (nargin > 0)
     [nr, nc] = size (x);
-    if (isa (x, "sparse"))
-      retval = sparse (nr, nc);
-    else
-      retval = zeros (nr, nc, class (x));
-    endif
+    retval = resize (resize (x, 0), nr, nc);
   endif
 
   if (nargin == 1)
     k = 0;
   elseif (nargin == 2)
     if ((k > 0 && k > nc) || (k < 0 && k < -nr))
       error ("tril: requested diagonal out of range");
     endif
diff --git a/scripts/general/triu.m b/scripts/general/triu.m
--- a/scripts/general/triu.m
+++ b/scripts/general/triu.m
@@ -23,21 +23,17 @@
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = triu (x, k)
 
   if (nargin > 0)
     [nr, nc] = size (x);
-    if (isa (x, "sparse"))
-      retval = sparse (nr, nc);
-    else
-      retval = zeros (nr, nc, class (x));
-    endif
+    retval = resize (resize (x, 0), nr, nc);
   endif
 
   if (nargin == 1)
     k = 0;
   elseif (nargin == 2)
     if ((k > 0 && k > nc) || (k < 0 && k < -nr))
       error ("triu: requested diagonal out of range");
     endif
diff --git a/scripts/special-matrix/hankel.m b/scripts/special-matrix/hankel.m
--- a/scripts/special-matrix/hankel.m
+++ b/scripts/special-matrix/hankel.m
@@ -46,17 +46,17 @@
 ## @seealso{vander, sylvester_matrix, hilb, invhilb, toeplitz}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = hankel (c, r)
 
   if (nargin == 1)
-    r = zeros (size (c));
+    r = resize (resize (c, 0), size(c));
   elseif (nargin != 2)
     usage ("hankel (c, r)");
   endif
 
   [c_nr, c_nc] = size (c);
   [r_nr, r_nc] = size (r);
 
   if ((c_nr != 1 && c_nc != 1) || (r_nr != 1 && r_nc != 1))
@@ -79,24 +79,30 @@ function retval = hankel (c, r)
   nr = length (c);
 
   if (r (1) != c (nr))
     warning ("hankel: column wins anti-diagonal conflict");
   endif
 
   ## This should probably be done with the colon operator...
 
-  retval = zeros (nr, nc);
+  retval = resize (resize (c, 0), nr, nc);
 
   for i = 1:min (nr, nc)
     retval (1:nr-i+1, i) = c (i:nr);
   endfor
 
   tmp = 1;
   if (nc <= nr)
     tmp = nr - nc + 2;
   endif
 
   for i = nr:-1:tmp
     retval (i, 2+nr-i:nc) = r (2:nc-nr+i);
   endfor
 
 endfunction
+
+%!assert(hankel(1:3),[1,2,3;2,3,0;3,0,0])
+%!assert(hankel(1),[1]);
+%!assert(hankel(1:3,3:6),[1,2,3,4;2,3,4,5;3,4,5,6]);
+%!assert(hankel(1:3,3:4),[1,2;2,3;3,4]);
+%!assert(hankel(1:3,4:6),[1,2,3;2,3,5;3,5,6]);
diff --git a/scripts/special-matrix/toeplitz.m b/scripts/special-matrix/toeplitz.m
--- a/scripts/special-matrix/toeplitz.m
+++ b/scripts/special-matrix/toeplitz.m
@@ -92,17 +92,17 @@ function retval = toeplitz (c, r)
     c(1) = conj (c(1));
   endif
 
   ## This should probably be done with the colon operator...
 
   nc = length (r);
   nr = length (c);
 
-  retval = zeros (nr, nc);
+  retval = resize (resize (c, 0), nr, nc);
 
   for i = 1:min (nc, nr)
     retval (i:nr, i) = c (1:nr-i+1);
   endfor
 
   for i = 1:min (nr, nc-1)
     retval (i, i+1:nc) = r (2:nc-i+1);
   endfor
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,18 @@
 2006-04-03  David Bateman  <dbateman@free.fr>
 
+	* data.cc (Fresize): New function.
+	* oct-map.cc, ov-base-mat.cc, ov-base-sparse.cc, ov-base.cc,
+	ov-bool.cc, ov-complex.cc, ov-range.cc, ov-scalar.cc,
+	ov-str-mat.cc (resize): Add boolean fill argument.
+	* oct-map.h, ov-base-mat.h, ov-base-sparse.h, ov-base.h,
+	ov-bool.h, ov-complex.h, ov-intx.h, ov-range.h, ov-scalar.h,
+	ov-str-mat.h, ov.h (resize): Ditto.
+	
 	* DLD-FUNCTIONS/rand.cc (do_rand): Additional argument for
         gamma and poisson distributions.  Change "state" and "seed"
         arguments so that they choose between generators.
 	Add, poisson, gamma and exponential generators.
 	(Frand, Frandn): Update docs for new generators, add tests.
 	(Frande, Frandp, Frandg): New generators, with test code.
 
 	* DLD-FUNCTIONS/daspk.cc (Fdaspk): Allow functions to be passed
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1858,16 +1858,67 @@ The @code{linspace} function always retu
 	}
     }
   else
     error ("linspace: expecting third argument to be an integer");
 
   return retval;
 }
 
+DEFUN (resize, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} resize (@var{x}, @var{m})\n\
+@deftypefnx {Built-in Function} {} resize (@var{x}, @var{m}, @var{n})\n\
+Resize @var{x} to be dimension @var{m}-by-@var{n} where @var{m}\n\
+and @var{n} are scalar. If @var{n} is not supplied, then resize @var{x}\n\
+to be dimension @var{m}-by-@var{m} if @var{m} is scalar, or if\n\
+@var{m} is a vector, then the values of this vector respresent the\n\
+dimensions of the resized matrix.\n\
+@end deftypefn")
+{
+  octave_value retval;
+  int nargin = args.length ();
+
+  if (nargin == 2)
+    {
+      Array<double> vec = args(1).vector_value ();
+      int ndim = vec.length ();
+      if (ndim == 1)
+	{
+	  octave_idx_type m = static_cast<octave_idx_type> (vec(0));
+	  retval = args(0);
+	  retval = retval.resize (dim_vector (m, m), true);
+	}
+      else
+	{
+	  dim_vector dv;
+	  dv.resize (ndim);
+	  for (int i = 0; i < ndim; i++)
+	    dv(i) = static_cast<octave_idx_type> (vec(i));
+	  retval = args(0);
+	  retval = retval.resize (dv, true);
+	}
+    }
+  else if (nargin == 3)
+    {
+      octave_idx_type m = static_cast<octave_idx_type> 
+	(args(1).scalar_value());
+      octave_idx_type n = static_cast<octave_idx_type> 
+	(args(2).scalar_value());
+      if (!error_state)
+	{
+	  retval = args(0);
+	  retval = retval.resize (dim_vector (m, n), true);
+	}
+    }
+  else
+    print_usage ("resize");
+  return retval;
+}
+
 DEFUN (reshape, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Function File} {} reshape (@var{a}, @var{m}, @var{n}, @dots{})\n\
 @deftypefnx {Function File} {} reshape (@var{a}, @var{siz})\n\
 Return a matrix with the given dimensions whose elements are taken\n\
 from the matrix @var{a}.  The elements of the matrix are access in\n\
 column-major order (like Fortran arrays are stored).\n\
 \n\
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -136,26 +136,29 @@ Octave_map::numel (void) const
       Cell tmp = contents (begin ());
       retval = tmp.numel ();
     }
 
   return retval;
 }
 
 Octave_map 
-Octave_map::resize (const dim_vector& dv) const
+Octave_map::resize (const dim_vector& dv, bool fill) const
 {
   Octave_map retval;
 
   if (dv != dims ())
     {
       for (const_iterator p = begin (); p != end (); p++)
 	{
 	  Cell tmp = contents(p);
-	  tmp.resize(dv);
+	  if (fill)
+	    tmp.resize(dv, Cell::resize_fill_value ());
+	  else
+	    tmp.resize(dv);
 	  retval.assign (key(p), tmp);
 	}
       
       retval.dimensions = dv;
     }
   else
     retval = *this;
 
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -122,17 +122,17 @@ Octave_map
   dim_vector dims (void) const { return dimensions; }
 
   int ndims (void) const { return dimensions.length (); }
 
   Octave_map transpose (void) const;
 
   Octave_map reshape (const dim_vector& new_dims) const;
 
-  Octave_map resize (const dim_vector& dv) const;
+  Octave_map resize (const dim_vector& dv, bool fill = false) const;
 
   octave_idx_type numel (void) const;
 
   Octave_map concat (const Octave_map& rb, const Array<octave_idx_type>& ra_idx);
 
   Octave_map& maybe_delete_elements (const octave_value_list& idx);
 
   Octave_map& assign (const octave_value_list& idx, const Octave_map& rhs);
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -197,16 +197,28 @@ octave_base_matrix<MT>::assign (const oc
 
   for (octave_idx_type i = 0; i < len; i++)
     matrix.set_index (idx(i).index_vector ());
 
   ::assign (matrix, rhs, MT::resize_fill_value ());
 }
 
 template <class MT>
+octave_value
+octave_base_matrix<MT>::resize (const dim_vector& dv, bool fill) const
+{
+  MT retval (matrix); 
+  if (fill)
+    retval.resize (dv, 0);
+  else
+    retval.resize (dv); 
+  return retval;
+}
+
+template <class MT>
 bool
 octave_base_matrix<MT>::is_true (void) const
 {
   bool retval = false;
   dim_vector dv = matrix.dims ();
   int nel = dv.numel ();
 
   if (nel > 0)
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -97,18 +97,17 @@ public:
   octave_idx_type nnz (void) const { return matrix.nnz (); }
 
   octave_value reshape (const dim_vector& new_dims) const
     { return MT (matrix.reshape (new_dims)); }
 
   octave_value permute (const Array<int>& vec, bool inv = false) const
     { return MT (matrix.permute (vec, inv)); }
 
-  octave_value resize (const dim_vector& dv) const
-    { MT retval (matrix); retval.resize (dv); return retval; }
+  octave_value resize (const dim_vector& dv, bool fill = false) const;
 
   octave_value all (int dim = 0) const { return matrix.all (dim); }
   octave_value any (int dim = 0) const { return matrix.any (dim); }
 
   bool is_matrix_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
diff --git a/src/ov-base-sparse.cc b/src/ov-base-sparse.cc
--- a/src/ov-base-sparse.cc
+++ b/src/ov-base-sparse.cc
@@ -35,16 +35,17 @@ Boston, MA 02110-1301, USA.
 #include "ls-oct-ascii.h"
 #include "ls-utils.h"
 #if defined (HAVE_HDF5)
 #include "ls-hdf5.h"
 #endif
 
 #include "boolSparse.h"
 #include "ov-base-sparse.h"
+#include "pager.h"
 
 template <class T>
 octave_value
 octave_base_sparse<T>::do_index_op (const octave_value_list& idx, 
 				    int resize_ok)
 {
   octave_value retval;
 
@@ -188,16 +189,24 @@ octave_base_sparse<T>::assign (const oct
     matrix.set_index (idx(i).index_vector ());
 
   ::assign (matrix, rhs);
 
   // Invalidate matrix type.
   typ.invalidate_type ();
 }
 
+template <class T>
+octave_value 
+octave_base_sparse<T>::resize (const dim_vector& dv, bool) const
+{ 
+  T retval (matrix); 
+  retval.resize (dv); 
+  return retval; 
+}
 
 template <class T>
 bool 
 octave_base_sparse<T>::is_true (void) const
 {
   bool retval = false;
   dim_vector dv = matrix.dims ();
   octave_idx_type nel = dv.numel ();
diff --git a/src/ov-base-sparse.h b/src/ov-base-sparse.h
--- a/src/ov-base-sparse.h
+++ b/src/ov-base-sparse.h
@@ -107,18 +107,17 @@ octave_base_sparse : public octave_base_
     { return do_index_op (idx, 0); }
 
   octave_value reshape (const dim_vector& new_dims) const
     { return T (matrix.reshape (new_dims)); }
 
   octave_value permute (const Array<int>& vec, bool inv = false) const
     { return T (matrix.permute (vec, inv)); }
 
-  octave_value resize (const dim_vector& dv) const
-    { T retval (matrix); retval.resize (dv); return retval; }
+  octave_value resize (const dim_vector& dv, bool = false) const;
 
   octave_value all (int dim = 0) const { return matrix.all (dim); }
   octave_value any (int dim = 0) const { return matrix.any (dim); }
 
   SparseType sparse_type (void) const { return typ; }
   SparseType sparse_type (const SparseType& _typ) 
     { SparseType ret = typ; typ = _typ; return ret; }
 
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -197,17 +197,17 @@ octave_base_value::reshape (const dim_ve
 octave_value
 octave_base_value::permute (const Array<int>&, bool) const
 {
   gripe_wrong_type_arg ("octave_base_value::permute ()", type_name ());
   return octave_value ();
 }
 
 octave_value
-octave_base_value::resize (const dim_vector&) const
+octave_base_value::resize (const dim_vector&, bool) const
 {
   gripe_wrong_type_arg ("octave_base_value::resize ()", type_name ());
   return octave_value ();
 }
 
 octave_value
 octave_base_value::convert_to_str_internal (bool, bool, char) const
 {
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -102,17 +102,17 @@ public:
   octave_idx_type nnz (void) const;
 
   octave_idx_type nzmax (void) const;
 
   octave_value reshape (const dim_vector&) const;
 
   octave_value permute (const Array<int>& vec, bool = false) const;
 
-  octave_value resize (const dim_vector&) const;
+  octave_value resize (const dim_vector&, bool fill = false) const;
 
   bool is_defined (void) const { return false; }
 
   bool is_cell (void) const { return false; }
 
   bool is_real_scalar (void) const { return false; }
 
   bool is_real_matrix (void) const { return false; }
diff --git a/src/ov-bool.cc b/src/ov-bool.cc
--- a/src/ov-bool.cc
+++ b/src/ov-bool.cc
@@ -98,16 +98,35 @@ octave_bool::do_index_op (const octave_v
       octave_value tmp (new octave_bool_matrix (bool_matrix_value ()));
 
       retval = tmp.do_index_op (idx, resize_ok);
     }
 
   return retval;
 }
 
+octave_value 
+octave_bool::resize (const dim_vector& dv, bool fill) const
+{ 
+  if (fill)
+    {
+      boolNDArray retval (dv, false); 
+      if (dv.numel()) 
+	retval(0) = scalar; 
+      return retval; 
+    }
+  else
+    {
+      boolNDArray retval (dv); 
+      if (dv.numel()) 
+	retval(0) = scalar; 
+      return retval; 
+    }
+}
+
 octave_value
 octave_bool::convert_to_str_internal (bool, bool, char type) const
 {
   char s[2];
   s[0] = static_cast<char> (scalar);
   s[1] = '\0';
 
   return octave_value (s, type);
diff --git a/src/ov-bool.h b/src/ov-bool.h
--- a/src/ov-bool.h
+++ b/src/ov-bool.h
@@ -144,18 +144,17 @@ public:
   bool bool_value (void) const { return scalar; }
 
   boolMatrix bool_matrix_value (void) const
     { return boolMatrix (1, 1, scalar); }
 
   boolNDArray bool_array_value (void) const
     { return boolNDArray (dim_vector (1, 1), scalar); }
 
-  octave_value resize (const dim_vector& dv) const
-    { boolNDArray retval (dv); if (dv.numel()) retval(0) = scalar; return retval; }
+  octave_value resize (const dim_vector& dv, bool fill = false) const;
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
   bool save_ascii (std::ostream& os, bool& infnan_warned,
 		 bool strip_nan_and_inf);
 
   bool load_ascii (std::istream& is);
 
diff --git a/src/ov-complex.cc b/src/ov-complex.cc
--- a/src/ov-complex.cc
+++ b/src/ov-complex.cc
@@ -144,16 +144,39 @@ octave_complex::complex_matrix_value (bo
 }
 
 ComplexNDArray
 octave_complex::complex_array_value (bool /* force_conversion */) const
 {
   return ComplexNDArray (dim_vector (1, 1), scalar);
 }
 
+octave_value 
+octave_complex::resize (const dim_vector& dv, bool fill) const
+{
+  if (fill)
+    {
+      ComplexNDArray retval (dv, ComplexNDArray::resize_fill_value ());
+
+      if (dv.numel ())
+	retval(0) = scalar;
+
+      return retval;
+    }
+  else
+    {
+      ComplexNDArray retval (dv);
+
+      if (dv.numel ())
+	retval(0) = scalar;
+
+      return retval;
+    }
+}
+
 bool 
 octave_complex::save_ascii (std::ostream& os, bool& infnan_warned, 
 			    bool strip_nan_and_inf)
 {
   Complex c = complex_value ();
 
   if (strip_nan_and_inf)
     {
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -96,25 +96,17 @@ public:
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const;
 
   NDArray array_value (bool = false) const;
 
-  octave_value resize (const dim_vector& dv) const
-    {
-      ComplexNDArray retval (dv);
-
-      if (dv.numel ())
-	retval(0) = scalar;
-
-      return retval;
-    }
+  octave_value resize (const dim_vector& dv, bool fill = false) const;
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const;
 
   ComplexNDArray complex_array_value (bool = false) const;
 
   void increment (void) { scalar += 1.0; }
diff --git a/src/ov-intx.h b/src/ov-intx.h
--- a/src/ov-intx.h
+++ b/src/ov-intx.h
@@ -250,22 +250,32 @@ public:
   uint32NDArray
   uint32_array_value (void) const
     { return uint32NDArray (dim_vector (1, 1), scalar); }
 
   uint64NDArray
   uint64_array_value (void) const
     { return uint64NDArray (dim_vector (1, 1), scalar); }
 
-  octave_value resize (const dim_vector& dv) const
+  octave_value resize (const dim_vector& dv, bool fill = false) const
     {
-      OCTAVE_INT_NDARRAY_T retval (dv);
-      if (dv.numel())
-	retval(0) = scalar;
-      return retval;
+      if (fill)
+	{
+	  OCTAVE_INT_NDARRAY_T retval (dv, 0);
+	  if (dv.numel())
+	    retval(0) = scalar;
+	  return retval;
+	}
+      else
+	{
+	  OCTAVE_INT_NDARRAY_T retval (dv);
+	  if (dv.numel())
+	    retval(0) = scalar;
+	  return retval;
+	}
     }
 
   double double_value (bool = false) const { return double (scalar); }
 
   double scalar_value (bool = false) const { return double (scalar); }
 
   NDArray
   array_value (bool = false) const
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -203,16 +203,27 @@ octave_range::complex_value (bool) const
       retval = range.base ();
     }
   else
     gripe_invalid_conversion ("range", "complex scalar");
 
   return retval;
 }
 
+octave_value 
+octave_range::resize (const dim_vector& dv, bool fill) const
+{ 
+  NDArray retval = array_value (); 
+  if (fill)
+    retval.resize (dv, NDArray::resize_fill_value());
+  else
+    retval.resize (dv); 
+  return retval; 
+}
+
 octave_value
 octave_range::convert_to_str_internal (bool pad, bool force, char type) const
 {
   octave_value tmp (range.matrix_value ());
   return tmp.convert_to_str (pad, force, type);
 }
 
 void
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -101,18 +101,18 @@ public:
   idx_vector index_vector (void) const { return idx_vector (range); }
 
   dim_vector dims (void) const
     { 
       octave_idx_type n = range.nelem ();
       return dim_vector (n > 0, n);
     }
 
-  octave_value resize (const dim_vector& dv) const
-    { NDArray retval = array_value (); retval.resize (dv); return retval; }
+  octave_value resize (const dim_vector& dv, bool fill = false) const;
+
 
   size_t byte_size (void) const { return 3 * sizeof (double); }
 
   octave_value reshape (const dim_vector& new_dims) const
     { return NDArray (array_value().reshape (new_dims)); }
 
   octave_value permute (const Array<int>& vec, bool inv = false) const
     { return NDArray (array_value().permute (vec, inv)); }
diff --git a/src/ov-scalar.cc b/src/ov-scalar.cc
--- a/src/ov-scalar.cc
+++ b/src/ov-scalar.cc
@@ -101,16 +101,39 @@ octave_scalar::streamoff_array_value (vo
   std::streamoff soff = streamoff_value ();
 
   if (! error_state)
     retval = streamoff_array (dim_vector (1, 1), soff);
 
   return retval;
 }
 
+octave_value 
+octave_scalar::resize (const dim_vector& dv, bool fill) const
+{
+  if (fill)
+    {
+      NDArray retval (dv, NDArray::resize_fill_value());
+
+      if (dv.numel ())
+	retval(0) = scalar;
+
+      return retval;
+    }
+  else
+    {
+      NDArray retval (dv);
+
+      if (dv.numel ())
+	retval(0) = scalar;
+
+      return retval;
+    }
+}
+
 octave_value
 octave_scalar::convert_to_str_internal (bool, bool, char type) const
 {
   octave_value retval;
 
   if (xisnan (scalar))
     ::error ("invalid conversion from NaN to character");
   else
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -133,25 +133,17 @@ public:
   double scalar_value (bool = false) const { return scalar; }
 
   Matrix matrix_value (bool = false) const
     { return Matrix (1, 1, scalar); }
 
   NDArray array_value (bool = false) const
     { return NDArray (dim_vector (1, 1), scalar); }
 
-  octave_value resize (const dim_vector& dv) const
-    {
-      NDArray retval (dv);
-
-      if (dv.numel ())
-	retval(0) = scalar;
-
-      return retval;
-    }
+  octave_value resize (const dim_vector& dv, bool fill = false) const;
 
   Complex complex_value (bool = false) const { return scalar; }
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return  ComplexMatrix (1, 1, Complex (scalar)); }
 
   ComplexNDArray complex_array_value (bool = false) const
     { return ComplexNDArray (dim_vector (1, 1), Complex (scalar)); }
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -144,16 +144,27 @@ octave_char_matrix_str::assign (const oc
     tmp.resize (0, 0);    
 
   for (octave_idx_type i = 0; i < len; i++)
     matrix.set_index (idx(i).index_vector ());
 
   ::assign (matrix, tmp, Vstring_fill_char);
 }
 
+octave_value 
+octave_char_matrix_str::resize (const dim_vector& dv, bool fill) const
+{
+  charNDArray retval (matrix);
+  if (fill)
+    retval.resize (dv, charNDArray::resize_fill_value());
+  else
+    retval.resize (dv);
+  return octave_value (retval, true);
+}
+
 bool
 octave_char_matrix_str::valid_as_scalar_index (void) const
 {
   bool retval = false;
   error ("octave_char_matrix_str::valid_as_scalar_index(): not implemented");
   return retval;
 }
 
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -91,22 +91,17 @@ public:
   void assign (const octave_value_list& idx, const charMatrix& rhs);
 
   octave_value reshape (const dim_vector& new_dims) const
     { return octave_value (charNDArray (matrix.reshape (new_dims)), true); }
 
   octave_value permute (const Array<int>& vec, bool inv = false) const
     { return octave_value (charNDArray (matrix.permute (vec, inv)), true); }
 
-  octave_value resize (const dim_vector& dv) const
-    {
-      charNDArray retval (matrix);
-      retval.resize (dv);
-      return octave_value (retval, true);
-    }
+  octave_value resize (const dim_vector& dv, bool fill = false) const;
 
   bool is_string (void) const { return true; }
 
   bool is_real_type (void) const { return false; }
 
   bool is_matrix_type (void) const { return false; }
 
   bool is_numeric_type (void) const { return false; }
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -386,18 +386,18 @@ public:
     { return rep->reshape (dv); }
 
   virtual octave_value permute (const Array<int>& vec, bool inv = false) const
     { return rep->permute (vec, inv); }
 
   octave_value ipermute (const Array<int>& vec) const
     { return rep->permute (vec, true); }
 
-  virtual octave_value resize (const dim_vector& dv) const
-     { return rep->resize (dv);}
+  virtual octave_value resize (const dim_vector& dv, bool fill = false) const
+     { return rep->resize (dv, fill);}
 
   // Does this constant have a type?  Both of these are provided since
   // it is sometimes more natural to write is_undefined() instead of
   // ! is_defined().
 
   virtual bool is_defined (void) const
     { return rep->is_defined (); }
 
