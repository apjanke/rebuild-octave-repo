# HG changeset patch
# User Rik <rik@octave.org>
# Date 1541914963 28800
#      Sat Nov 10 21:42:43 2018 -0800
# Node ID df3f2e11994426ccdcd1343149211c5c57388dfc
# Parent  8b9e6a39e0a2b2f351e05edbf1934b1cac3ec1ed
Expand intmax/intmin to accept an integer variable as input.

* bitfcns.cc (Fintmax, Fintmin): Redo docstring to document new calling form.
Add Example Code to documentation showing how to call function with an integer
variable as input.  Use isinteger() to check for an integer input and call
class_name() to find the class of variable.  Redo BIST tests.

* accumarray.m, image.m, ind2x.m, rgb2ind.m: Replace instances of
"intmax (class (x))" with just "intmax (x)".  Ditto for intmin.

diff --git a/libinterp/corefcn/bitfcns.cc b/libinterp/corefcn/bitfcns.cc
--- a/libinterp/corefcn/bitfcns.cc
+++ b/libinterp/corefcn/bitfcns.cc
@@ -697,19 +697,23 @@ option.  On IEEE 754 compatible systems,
 %!error flintmax ("int32")
 %!error flintmax ("char")
 */
 
 DEFUN (intmax, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} intmax ()
 @deftypefnx {} {} intmax ("@var{type}")
-Return the largest integer that can be represented in an integer type.
+@deftypefnx {} {} intmax (@var{var})
+Return the largest integer that can be represented by a specific integer type.
 
-The variable @var{type} is a string which can be
+The input is either a string @qcode{"@var{type}"} specifying an integer type,
+or it is an existing integer variable @var{var}.
+
+Possible values for @var{type} are
 
 @table @asis
 @item @qcode{"int8"}
 signed 8-bit integer.
 
 @item @qcode{"int16"}
 signed 16-bit integer.
 
@@ -728,27 +732,45 @@ unsigned 16-bit integer.
 @item @qcode{"uint32"}
 unsigned 32-bit integer.
 
 @item @qcode{"uint64"}
 unsigned 64-bit integer.
 @end table
 
 The default for @var{type} is @qcode{"int32"}.
+
+Example Code - query an existing variable
+
+@example
+@group
+x = int8 (1);
+intmax (x)
+  @result{} 127
+@end group
+@end example
+
 @seealso{intmin, flintmax}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin > 1)
     print_usage ();
 
   std::string cname = "int32";
   if (nargin == 1)
-    cname = args(0).xstring_value ("intmax: argument must be a string");
+    {
+      if (args(0).is_string ())
+        cname = args(0).string_value ();
+      else if (args(0).isinteger ())
+        cname = args(0).class_name ();
+      else
+        error ("intmax: argument must be a string or integer variable");
+    }
 
   octave_value retval;
 
   if (cname == "uint8")
     retval = octave_uint8 (std::numeric_limits<uint8_t>::max ());
   else if (cname == "uint16")
     retval = octave_uint16 (std::numeric_limits<uint16_t>::max ());
   else if (cname == "uint32")
@@ -775,29 +797,37 @@ The default for @var{type} is @qcode{"in
 %!assert (intmax ("uint8"),   uint8 (2^8 - 1))
 %!assert (intmax ("int16"),   int16 (2^15 - 1))
 %!assert (intmax ("uint16"), uint16 (2^16 - 1))
 %!assert (intmax ("int32"),   int32 (2^31 - 1))
 %!assert (intmax ("uint32"), uint32 (2^32 - 1))
 %!assert (intmax ("int64"),   int64 (2^63 - 1))
 %!assert (intmax ("uint64"), uint64 (2^64 - 1))
 
-%!error intmax (0)
+%!test
+%! x = int8 (1);
+%! assert (intmax (x), int8 (127));
+
 %!error intmax ("int32", 0)
-%!error intmax ("double")
-%!error intmax ("char")
+%!error <must be a string or integer variable> intmax (1.0)
+%!error <not defined for 'double' objects> intmax ("double")
+%!error <not defined for 'char' objects> intmax ("char")
 */
 
 DEFUN (intmin, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} intmin ()
 @deftypefnx {} {} intmin ("@var{type}")
-Return the smallest integer that can be represented in an integer type.
+@deftypefnx {} {} intmin (@var{var})
+Return the smallest integer that can be represented by a specific integer type.
 
-The variable @var{type} is a string which can be
+The input is either a string @qcode{"@var{type}"} specifying an integer type,
+or it is an existing integer variable @var{var}.
+
+Possible values for @var{type} are
 
 @table @asis
 @item @qcode{"int8"}
 signed 8-bit integer.
 
 @item @qcode{"int16"}
 signed 16-bit integer.
 
@@ -816,27 +846,45 @@ unsigned 16-bit integer.
 @item @qcode{"uint32"}
 unsigned 32-bit integer.
 
 @item @qcode{"uint64"}
 unsigned 64-bit integer.
 @end table
 
 The default for @var{type} is @qcode{"int32"}.
+
+Example Code - query an existing variable
+
+@example
+@group
+x = int8 (1);
+intmin (x)
+  @result{} -128
+@end group
+@end example
+
 @seealso{intmax, flintmax}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin > 1)
     print_usage ();
 
   std::string cname = "int32";
   if (nargin == 1)
-    cname = args(0).xstring_value ("intmin: argument must be a string");
+    {
+      if (args(0).is_string ())
+        cname = args(0).string_value ();
+      else if (args(0).isinteger ())
+        cname = args(0).class_name ();
+      else
+        error ("intmin: argument must be a string or integer variable");
+    }
 
   octave_value retval;
 
   if (cname == "uint8")
     retval = octave_uint8 (std::numeric_limits<uint8_t>::min ());
   else if (cname == "uint16")
     retval = octave_uint16 (std::numeric_limits<uint16_t>::min ());
   else if (cname == "uint32")
@@ -863,20 +911,24 @@ The default for @var{type} is @qcode{"in
 %!assert (intmin ("uint8"),   uint8 (-2^8))
 %!assert (intmin ("int16"),   int16 (-2^15))
 %!assert (intmin ("uint16"), uint16 (-2^16))
 %!assert (intmin ("int32"),   int32 (-2^31))
 %!assert (intmin ("uint32"), uint32 (-2^32))
 %!assert (intmin ("int64"),   int64 (-2^63))
 %!assert (intmin ("uint64"), uint64 (-2^64))
 
-%!error intmin (0)
+%!test
+%! x = int8 (1);
+%! assert (intmin (x), int8 (-128));
+
 %!error intmin ("int32", 0)
-%!error intmin ("double")
-%!error intmin ("char")
+%!error <must be a string or integer variable> intmin (1.0)
+%!error <not defined for 'double' objects> intmin ("double")
+%!error <not defined for 'char' objects> intmin ("char")
 */
 
 DEFUN (sizemax, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} sizemax ()
 Return the largest value allowed for the size of an array.
 
 If Octave is compiled with 64-bit indexing, the result is of class int64,
diff --git a/scripts/general/accumarray.m b/scripts/general/accumarray.m
--- a/scripts/general/accumarray.m
+++ b/scripts/general/accumarray.m
@@ -273,17 +273,17 @@ function A = accumarray (subs, vals, sz 
         mask = true (size (A));
         mask(subs) = false;
         A(mask) = fillval;
       endif
     elseif (func == @max)
       ## Fast maximization.
 
       if (isinteger (vals))
-        zero = intmin (class (vals));
+        zero = intmin (vals);
       elseif (islogical (vals))
         zero = false;
       elseif (fillval == 0 && all (vals(:) >= 0))
         ## This is a common case - fillval is zero, all numbers
         ## nonegative.
         zero = 0;
       else
         zero = NaN; # Neutral value.
@@ -300,17 +300,17 @@ function A = accumarray (subs, vals, sz 
         mask = true (size (A));
         mask(subs) = false;
         A(mask) = fillval;
       endif
     elseif (func == @min)
       ## Fast minimization.
 
       if (isinteger (vals))
-        zero = intmax (class (vals));
+        zero = intmax (vals);
       elseif (islogical (vals))
         zero = true;
       elseif (fillval == 0 && all (vals(:) <= 0))
         ## This is a common case - fillval is zero, all numbers
         ## non-positive.
         zero = 0;
       else
         zero = NaN; # Neutral value.
diff --git a/scripts/image/image.m b/scripts/image/image.m
--- a/scripts/image/image.m
+++ b/scripts/image/image.m
@@ -181,19 +181,18 @@ function h = __img__ (hax, do_new, x, y,
     ##       with tight axis limits.
     if (! isempty (img))
       if (isempty (get (hax, "children")))
         axis (hax, "tight");
       endif
 
       if (ndims (img) == 3)
         if (isinteger (img))
-          cls = class (img);
-          mn = intmin (cls);
-          mx = intmax (cls);
+          mn = intmin (img);
+          mx = intmax (img);
           set (hax, "clim", double ([mn, mx]));
         endif
       endif
 
     endif  # ! isempty (img)
 
     set (hax, "view", [0, 90], "ydir", "reverse", "layer", "top", "box", "on");
 
diff --git a/scripts/image/private/ind2x.m b/scripts/image/private/ind2x.m
--- a/scripts/image/private/ind2x.m
+++ b/scripts/image/private/ind2x.m
@@ -23,17 +23,17 @@ function [x, map] = ind2x (caller, x, ma
 
   ## Check if X is an indexed image.
   ## An indexed image is defined has having only 2D, and that's how Matlab
   ## behaves.  But we want to support ND images, so we will allow up to 4D
   ## and check that the 3rd dimension is a singleton.
   if (all (ndims (x) != [2 4]) || size (x, 3) != 1
       || iscomplex (x) || issparse (x)
       || ! (isfloat (x) && all (x(:) == fix (x(:)))
-            || (isinteger (x) && intmin (class (x)) == 0)))
+            || (isinteger (x) && intmin (x) == 0)))
     error ("%s: X must be an indexed image", caller);
   endif
 
   ## Check if map is a valid colormap.
   if (! iscolormap (map))
     error ("%s: MAP must be a valid colormap", caller);
   endif
 
@@ -48,17 +48,17 @@ function [x, map] = ind2x (caller, x, ma
     endif
   endif
 
   ## Switch to using 1-based indexing.
   ## It is possible that an integer storage class may not have enough room
   ## to make the switch, in which case we convert the data to single.
   maxidx = max (x(:));
   if (isinteger (x))
-    if (maxidx == intmax (class (x)))
+    if (maxidx == intmax (x))
       x = single (x);
     endif
     x      += 1;
     maxidx += 1;
   endif
 
   ## When there are more colors in the image, than there are in the map,
   ## pad the colormap with the last color in the map for Matlab compatibility.
diff --git a/scripts/image/rgb2ind.m b/scripts/image/rgb2ind.m
--- a/scripts/image/rgb2ind.m
+++ b/scripts/image/rgb2ind.m
@@ -73,17 +73,17 @@ function [x, map] = rgb2ind (R, G, B)
   [~, x] = ismember ([R(:) G(:) B(:)], map, "rows");
   x      = reshape (x, size (R));
 
   ## a colormap is of class double and values between 0 and 1
   switch (class (R))
     case {"single", "double", "logical"}
       ## do nothing, return the same
     case {"uint8", "uint16"}
-      map = double (map) / double (intmax (class (R)));
+      map = double (map) / double (intmax (R));
     case "int16"
       map = (double (im) + 32768) / 65535;
     otherwise
       error ("rgb2ind: unsupported image class %s", im_class);
   endswitch
 
   ## we convert to the smallest class necessary to encode the image.  Matlab
   ## documentation does not mention what it does when uint16 is not enough...
