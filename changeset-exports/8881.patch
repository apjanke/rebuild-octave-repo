# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1235674727 18000
#      Thu Feb 26 13:58:47 2009 -0500
# Node ID 8ed42c679af5ddc224865fd6b2cee03111b5e204
# Parent  078ca05e4ef809c44bde526386ddcc68e6970c9e
after defining a script or function, clear local variables created for parsing

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,30 @@
 2009-02-26  John W. Eaton  <jwe@octave.org>
 
+	* symtab.h (symbol_table::symbol_record::symbol_record_rep::forced):
+	New static constant.
+	(symbol_table::symbol_record::symbol_record_rep::force_variable,
+	symbol_table::symbol_record::force_variable): New functions.
+	(symbol_table::symbol_record::symbol_record_rep::is_forced,
+	symbol_table::symbol_record::symbol_record_rep::mark_forced,
+	symbol_table::symbol_record::symbol_record_rep::unmark_forced,
+	symbol_table::symbol_record::symbol_record_rep::clear_forced,
+	symbol_table::symbol_record::is_forced,
+	symbol_table::symbol_record::mark_forced,
+	symbol_table::symbol_record::clear_forced,
+	symbol_table::symbol_record::unmark_forced): New fucntions.
+	* lex.h, lex.l (force_local_variable): Delete.
+	(handle_identifier): Call symbol_table::force_variable instead of
+	force_local_variable.
+	* parse.y (make_script): Call symbol_table:clear_forced_variables
+	after defining script.
+	(finish_function): Call symbol_table::clear_forced_variables
+	instead of symbol_table::clear_variables.
+	
 	* DLD-FUNCTIONS/chol.cc: Correct spelling of CHOLMOD in tests.
 
 	* version.h (OCTAVE_VERSION): Now 3.1.53+.
 	(OCTAVE_API_VERSION): Now api-v35+.
 
 2009-02-25  John W. Eaton  <jwe@octave.org>
 
 	* version.h (OCTAVE_VERSION): Now 3.1.53.
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -49,18 +49,16 @@ extern void restore_input_buffer (void *
 // Delete a buffer (for unwind-prot).
 extern void delete_input_buffer (void *buf);
 
 // Is the given string a keyword?
 extern bool is_keyword (const std::string& s);
 
 extern void prep_lexer_for_script (void);
 
-extern void force_local_variable (const std::string& name);
-
 // For communication between the lexer and parser.
 
 class
 lexical_feedback
 {
 public:
 
   lexical_feedback (void) { init (); }
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1631,25 +1631,16 @@ is_keyword_token (const std::string& s)
 static bool
 is_variable (const std::string& name)
 {
   return (symbol_table::is_variable (name)
 	  || (lexer_flags.pending_local_variables.find (name)
 	      != lexer_flags.pending_local_variables.end ()));
 }
 
-void
-force_local_variable (const std::string& name)
-{
-  octave_value& val = symbol_table::varref (name);
-
-  if (! val.is_defined ())
-    val = Matrix ();
-}
-
 static std::string
 grab_block_comment (stream_reader& reader, bool& eof)
 {
   std::string buf;
 
   bool at_bol = true;
   bool look_for_marker = false;
 
@@ -3201,17 +3192,17 @@ handle_identifier (void)
 	  BEGIN (COMMAND_START);
 	}
       else if (next_tok_is_eq
 	       || lexer_flags.looking_at_decl_list
 	       || lexer_flags.looking_at_return_list
 	       || (lexer_flags.looking_at_parameter_list
 		   && ! lexer_flags.looking_at_initializer_expression))
 	{
-	  force_local_variable (tok);
+	  symbol_table::force_variable (tok);
 	}
       else if (lexer_flags.looking_at_matrix_or_assign_lhs)
 	{
 	  lexer_flags.pending_local_variables.insert (tok);
 	}
     }
 
   // Find the token in the symbol table.  Beware the magic
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -835,17 +835,17 @@ assign_lhs	: simple_expr
 		| '[' arg_list CLOSE_BRACE
 		  {
 		    $$ = $2;
 		    lexer_flags.looking_at_matrix_or_assign_lhs = false;
 		    for (std::set<std::string>::const_iterator p = lexer_flags.pending_local_variables.begin ();
 			 p != lexer_flags.pending_local_variables.end ();
 			 p++)
 		      {
-			force_local_variable (*p);
+			symbol_table::force_variable (*p);
 		      }
 		    lexer_flags.pending_local_variables.clear ();
 		  }
 		;
 
 assign_expr	: assign_lhs '=' expression
 		  { $$ = make_assign_op ('=', $1, $2, $3); }
 		| assign_lhs ADD_EQ expression
@@ -2490,16 +2490,18 @@ make_script (tree_statement_list *cmds, 
     = new octave_user_script (curr_fcn_file_full_name, curr_fcn_file_name,
 			      cmds, doc_string);
 
   octave_time now;
 
   script->stash_fcn_file_time (now);
 
   curr_fcn_ptr = script;
+
+  symbol_table::clear_forced_variables ();
 }
 
 // Begin defining a function.
 
 static octave_user_function *
 start_function (tree_parameter_list *param_list, tree_statement_list *body,
 		tree_statement *end_fcn_stmt)
 {
@@ -2672,17 +2674,17 @@ finish_function (tree_parameter_list *re
 	  // looking at curr_fcn_ptr...
 
 	  retval = new tree_function_def (fcn);
 	}
 
       // Clear any local variables that may have been added while
       // parsing (for example, by force_local_variable in lex.l). 
 
-      symbol_table::clear_variables (fcn->scope ());
+      symbol_table::clear_forced_variables (fcn->scope ());
     }
 
   return retval;
 }
 
 static void
 recover_from_parsing_function (void)
 {
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -177,30 +177,44 @@ public:
     static const unsigned int inherited = 16;
 
     // global (redirects to global scope)
     static const unsigned int global = 32;
 
     // not cleared at function exit
     static const unsigned int persistent = 64;
 
+    // temporary variables forced into symbol table for parsing
+    static const unsigned int forced = 128;
+
   private:
 
     class
     symbol_record_rep
     {
     public:
 
       symbol_record_rep (const std::string& nm, const octave_value& v,
 			 unsigned int sc)
 	: name (nm), value_stack (), storage_class (sc), count (1)
       {
 	value_stack.push_back (v);
       }
 
+      void force_variable (context_id context)
+      {
+	octave_value& val = varref (context);
+
+	if (! val.is_defined ())
+	  {
+	    val = Matrix ();
+	    mark_forced ();
+	  }
+      }
+
       octave_value& varref (context_id context)
       {
 	if (is_global ())
 	  return symbol_table::global_varref (name);
 	else if (is_persistent ())
 	  return symbol_table::persistent_varref (name);
 	else
 	  {
@@ -274,16 +288,25 @@ public:
 
 		unmark_persistent ();
 	      }
 
 	    varref (xcurrent_context) = octave_value ();
 	  }
       }
 
+      void clear_forced (void)
+      {
+	if (is_forced ())
+	  {
+	    varref (xcurrent_context) = octave_value ();
+	    unmark_forced ();
+	  }
+      }
+
       bool is_defined (context_id context) const
       {
 	return varval (context).is_defined ();
       }
 
       bool is_variable (context_id context) const
       {
 	return (storage_class != local || is_defined (context));
@@ -291,16 +314,17 @@ public:
 
       bool is_local (void) const { return storage_class & local; }
       bool is_automatic (void) const { return storage_class & automatic; }
       bool is_formal (void) const { return storage_class & formal; }
       bool is_hidden (void) const { return storage_class & hidden; }
       bool is_inherited (void) const { return storage_class & inherited; }
       bool is_global (void) const { return storage_class & global; }
       bool is_persistent (void) const { return storage_class & persistent; }
+      bool is_forced (void) const { return storage_class & forced; }
 
       void mark_local (void) { storage_class |= local; }
       void mark_automatic (void) { storage_class |= automatic; }
       void mark_formal (void) { storage_class |= formal; }
       void mark_hidden (void) { storage_class |= hidden; }
       void mark_inherited (void) { storage_class |= inherited; }
       void mark_global (void)
       {
@@ -311,24 +335,26 @@ public:
       }
       void mark_persistent (void)
       {
 	if (is_global ())
 	  error ("can't make global variable %s persistent", name.c_str ());
 	else
 	  storage_class |= persistent;
       }
+      void mark_forced (void) { storage_class |= forced; }
 
       void unmark_local (void) { storage_class &= ~local; }
       void unmark_automatic (void) { storage_class &= ~automatic; }
       void unmark_formal (void) { storage_class &= ~formal; }
       void unmark_hidden (void) { storage_class &= ~hidden; }
       void unmark_inherited (void) { storage_class &= ~inherited; }
       void unmark_global (void) { storage_class &= ~global; }
       void unmark_persistent (void) { storage_class &= ~persistent; }
+      void unmark_forced (void) { storage_class &= ~forced; }
 
       void init_persistent (void)
       {
 	if (! is_defined (xcurrent_context))
 	  {
 	    mark_persistent ();
 
 	    varref (xcurrent_context) = symbol_table::persistent_varval (name);
@@ -402,32 +428,39 @@ public:
     symbol_record dup (void) const { return symbol_record (rep->dup ()); }
 
     std::string name (void) const { return rep->name; }
 
     octave_value
     find (tree_argument_list *args, const string_vector& arg_names,
 	  octave_value_list& evaluated_args, bool& args_evaluated) const;
 
+    void force_variable (context_id context = xcurrent_context)
+    {
+      rep->force_variable (context);
+    }
+
     octave_value& varref (context_id context = xcurrent_context)
     {
       return rep->varref (context);
     }
 
     octave_value varval (context_id context = xcurrent_context) const
     {
       return rep->varval (context);
     }
 
     void push_context (void) { rep->push_context (); }
 
     size_t pop_context (void) { return rep->pop_context (); }
 
     void clear (void) { rep->clear (); }
 
+    void clear_forced (void) { rep->clear_forced (); }
+    
     bool is_defined (context_id context = xcurrent_context) const
     {
       return rep->is_defined (context);
     }
 
     bool is_variable (context_id context = xcurrent_context) const
     {
       return rep->is_variable (context);
@@ -435,32 +468,35 @@ public:
 
     bool is_local (void) const { return rep->is_local (); }
     bool is_automatic (void) const { return rep->is_automatic (); }
     bool is_formal (void) const { return rep->is_formal (); }
     bool is_global (void) const { return rep->is_global (); }
     bool is_hidden (void) const { return rep->is_hidden (); }
     bool is_inherited (void) const { return rep->is_inherited (); }
     bool is_persistent (void) const { return rep->is_persistent (); }
+    bool is_forced (void) const { return rep->is_forced (); }
 
     void mark_local (void) { rep->mark_local (); }
     void mark_automatic (void) { rep->mark_automatic (); }
     void mark_formal (void) { rep->mark_formal (); }
     void mark_hidden (void) { rep->mark_hidden (); }
     void mark_inherited (void) { rep->mark_inherited (); }
     void mark_global (void) { rep->mark_global (); }
     void mark_persistent (void) { rep->mark_persistent (); }
+    void mark_forced (void) { rep->mark_forced (); }
 
     void unmark_local (void) { rep->unmark_local (); }
     void unmark_automatic (void) { rep->unmark_automatic (); }
     void unmark_formal (void) { rep->unmark_formal (); }
     void unmark_hidden (void) { rep->unmark_hidden (); }
     void unmark_inherited (void) { rep->unmark_inherited (); }
     void unmark_global (void) { rep->unmark_global (); }
     void unmark_persistent (void) { rep->unmark_persistent (); }
+    void unmark_forced (void) { rep->unmark_forced (); }
 
     void init_persistent (void) { rep->init_persistent (); }
 
     void erase_persistent (void) { rep->erase_persistent (); }
 
     unsigned int xstorage_class (void) const { return rep->storage_class; }
 
     void
@@ -816,17 +852,17 @@ public:
     }
 
     void install_built_in_function (const octave_value& f)
     {
       rep->install_built_in_function (f);
     }
 
     void clear (void) { rep->clear (); }
-    
+
     void clear_user_function (void) { rep->clear_user_function (); }
     
     void clear_mex_function (void) { rep->clear_mex_function (); }
 
     void add_dispatch (const std::string& type, const std::string& fname)
     {
       rep->add_dispatch (type, fname);
     }
@@ -1046,16 +1082,28 @@ public:
   {
     static symbol_record foobar;
 
     symbol_table *inst = get_instance (xcurrent_scope);
 
     return inst ? inst->do_insert (name) : foobar;
   }
 
+  static void force_variable (const std::string& name,
+			      scope_id scope = xcurrent_scope,
+			      context_id context = xcurrent_context)
+  {
+    assert (xcurrent_context == 0);
+
+    symbol_table *inst = get_instance (scope);
+
+    if (inst)
+      inst->do_force_variable (name, context);
+  }
+
   static octave_value& varref (const std::string& name,
 			       scope_id scope = xcurrent_scope,
 			       context_id context = xcurrent_context)
   {
     static octave_value foobar;
 
     symbol_table *inst = get_instance (scope);
 
@@ -1294,16 +1342,24 @@ public:
   static void clear_variables (scope_id scope = xcurrent_scope)
   {
     symbol_table *inst = get_instance (scope);
 
     if (inst)
       inst->do_clear_variables ();
   }
 
+  static void clear_forced_variables (scope_id scope = xcurrent_scope)
+  {
+    symbol_table *inst = get_instance (scope);
+
+    if (inst)
+      inst->do_clear_forced_variables ();
+  }
+
   // For unwind_protect.
   static void clear_variables (void *) { clear_variables (); }
 
   static void clear_functions (void)
   {
     for (fcn_table_iterator p = fcn_table.begin (); p != fcn_table.end (); p++)
       p->second.clear ();
   }
@@ -1993,16 +2049,28 @@ private:
   symbol_record& do_insert (const std::string& name)
   {
     table_iterator p = table.find (name);
 
     return p == table.end ()
       ? (table[name] = symbol_record (name)) : p->second;
   }
 
+  void do_force_variable (const std::string& name, context_id context)
+  {
+    table_iterator p = table.find (name);
+
+    if (p == table.end ())
+      {
+	symbol_record& sr = do_insert (name);
+
+	sr.force_variable (context);
+      }
+  }
+
   octave_value& do_varref (const std::string& name, context_id context)
   {
     table_iterator p = table.find (name);
 
     if (p == table.end ())
       {
 	symbol_record& sr = do_insert (name);
 
@@ -2076,16 +2144,22 @@ private:
   }
 
   void do_clear_variables (void)
   {
     for (table_iterator p = table.begin (); p != table.end (); p++)
       p->second.clear ();
   }
 
+  void do_clear_forced_variables (void)
+  {
+    for (table_iterator p = table.begin (); p != table.end (); p++)
+      p->second.clear_forced ();
+  }
+
   void do_clear_global (const std::string& name)
   {
     table_iterator p = table.find (name);
 
     if (p != table.end ())
       {
 	symbol_record& sr = p->second;
 
