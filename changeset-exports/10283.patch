# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1265708911 -3600
#      Tue Feb 09 10:48:31 2010 +0100
# Node ID b178769f31ca007d2e26a62af7c4cd6feec3427e
# Parent  c9780d8e228cecdfc0f1b67ed7ca485b300f2f56
more small improvements in accumarray

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-02-09  Jaroslav Hajek  <highegg@gmail.com>
+
+	* general/accumarray.m: Use != instead of diff to compare indices in
+	dense case. Set explicit mode in sparse case to aid optimization.
+
 2010-02-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* miscellaneous/menu.m: Use sscanf rather than eval.
 
 2010-02-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* miscellaneous/substruct.m: Vectorize.
 
diff --git a/scripts/general/accumarray.m b/scripts/general/accumarray.m
--- a/scripts/general/accumarray.m
+++ b/scripts/general/accumarray.m
@@ -121,23 +121,26 @@ function A = accumarray (subs, val, sz =
       [subs, idx] = sortrows (subs);
       n = rows (subs);
       ## Identify runs.
       jdx = find (any (diff (subs, 1, 1), 2));
       jdx = [jdx; n];
 
       val = cellfun (func, mat2cell (val(:)(idx), diff ([0; jdx])));
       subs = subs(jdx, :);
+      mode = "unique";
+    else
+      mode = "sum";
     endif
 
     ## Form the sparse matrix.
     if (isempty (sz))
-      A = sparse (subs(:,1), subs(:,2), val);
+      A = sparse (subs(:,1), subs(:,2), val, mode);
     elseif (length (sz) == 2)
-      A = sparse (subs(:,1), subs(:,2), val, sz(1), sz(2));
+      A = sparse (subs(:,1), subs(:,2), val, sz(1), sz(2), mode);
     else
       error ("accumarray: dimensions mismatch")
     endif
 
   else
 
     ## Linearize subscripts.
     if (ndims > 1)
@@ -238,17 +241,17 @@ function A = accumarray (subs, val, sz =
         val = val(ones (1, n), 1);
       else
         val = val(:);
       endif
       
       ## Sort indices.
       [subs, idx] = sort (subs);
       ## Identify runs.
-      jdx = find (diff (subs, 1, 1));
+      jdx = find (subs(1:n-1) != subs(2:n));
       jdx = [jdx; n];
       val = mat2cell (val(idx), diff ([0; jdx]));
       ## Optimize the case when function is @(x) {x}, i.e. we just want to
       ## collect the values to cells.
       persistent simple_cell_str = func2str (@(x) {x});
       if (! strcmp (func2str (func), simple_cell_str))
         val = cellfun (func, val);
       endif
