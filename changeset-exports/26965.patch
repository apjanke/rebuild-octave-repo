# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1553530381 0
#      Mon Mar 25 16:13:01 2019 +0000
# Node ID be5c2a1bad93a0a2571723b32ed2d15a094c5768
# Parent  b57d596b909b3c55e9e812cc1789837245faffa3
allow dispatch class to be stored in stack frame (bug #45351)

* call-stack.h, call-stack.cc (call_stack::get_dispatch_class,
call_stack::set_dispatch_class): New methods.
* stack-frame.h (stack_frame::m_dispatch_class): New data member.
(stack_frame::get_dispatch_class, stack_frame::set_dispatch_class):
New methods.

diff --git a/libinterp/corefcn/call-stack.cc b/libinterp/corefcn/call-stack.cc
--- a/libinterp/corefcn/call-stack.cc
+++ b/libinterp/corefcn/call-stack.cc
@@ -349,16 +349,26 @@ namespace octave
                 break;
               }
           }
       }
 
     return retval;
   }
 
+  std::string call_stack::get_dispatch_class (void) const
+  {
+    return m_cs[m_curr_frame]->get_dispatch_class ();
+  }
+
+  void call_stack::set_dispatch_class (const std::string& class_name)
+  {
+    m_cs[m_curr_frame]->set_dispatch_class (class_name);
+  }
+
   bool call_stack::is_class_method_executing (std::string& dispatch_class) const
   {
     dispatch_class = "";
 
     octave_function *f = current ();
 
     bool retval = (f && f->is_class_method ());
 
diff --git a/libinterp/corefcn/call-stack.h b/libinterp/corefcn/call-stack.h
--- a/libinterp/corefcn/call-stack.h
+++ b/libinterp/corefcn/call-stack.h
@@ -149,16 +149,20 @@ namespace octave
     octave_user_code * debug_user_code (void) const;
 
     // Line number in current function that we are debugging.
     int debug_user_code_line (void) const;
 
     // Column number in current function that we are debugging.
     int debug_user_code_column (void) const;
 
+    std::string get_dispatch_class (void) const;
+
+    void set_dispatch_class (const std::string& class_name);
+
     bool is_class_method_executing (std::string& dispatch_class) const;
 
     bool is_class_constructor_executing (std::string& dispatch_class) const;
 
     // Return TRUE if all elements on the call stack are scripts.
     bool all_scripts (void) const;
 
     stack_frame * get_static_link (size_t prev_frame) const;
diff --git a/libinterp/corefcn/stack-frame.h b/libinterp/corefcn/stack-frame.h
--- a/libinterp/corefcn/stack-frame.h
+++ b/libinterp/corefcn/stack-frame.h
@@ -138,17 +138,18 @@ namespace octave
         NUM_AUTO_VARS
       };
 
     stack_frame (void) = delete;
 
     stack_frame (call_stack& cs, size_t prev, stack_frame *static_link,
                  stack_frame *access_link)
       : m_call_stack (cs), m_line (-1), m_column (-1), m_prev (prev),
-        m_static_link (static_link), m_access_link (access_link)
+        m_static_link (static_link), m_access_link (access_link),
+        m_dispatch_class ()
     { }
 
     stack_frame (const stack_frame& elt) = default;
 
     stack_frame& operator = (const stack_frame& elt) = delete;
 
     virtual ~stack_frame (void) = default;
 
@@ -531,16 +532,23 @@ namespace octave
     void clear_variable_pattern (const std::string& pattern);
     void clear_variable_pattern (const string_vector& patterns);
 
     void clear_variable_regexp (const std::string& pattern);
     void clear_variable_regexp (const string_vector& patterns);
 
     void clear_variables (void);
 
+    std::string get_dispatch_class (void) const { return m_dispatch_class; }
+
+    void set_dispatch_class (const std::string& class_name)
+    {
+      m_dispatch_class = class_name;
+    }
+
     virtual void mark_scope (const symbol_record&, scope_flags) = 0;
 
     virtual void display (bool follow = true) const;
 
     virtual void accept (stack_frame_walker& sfw) = 0;
 
   protected:
 
@@ -562,16 +570,20 @@ namespace octave
     // Pointer to the nearest parent frame that contains variable
     // information (script, function, or scope).
     stack_frame *m_static_link;
 
     // Pointer to the nearest lexical parent frame.  Used to access
     // non-local variables for nested and anonymous functions or as a
     // link to the parent frame in which a script is executed.
     stack_frame *m_access_link;
+
+    // Allow function handles to temporarily store their dispatch class
+    // in the call stack.
+    std::string m_dispatch_class;
   };
 
   class compiled_fcn_stack_frame : public stack_frame
   {
   public:
 
     compiled_fcn_stack_frame (void) = delete;
 
