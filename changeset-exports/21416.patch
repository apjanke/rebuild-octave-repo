# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1457457255 18000
#      Tue Mar 08 12:14:15 2016 -0500
# Node ID fdeb0d731512b974704f24e2ab7ec7a2c84bbf51
# Parent  74a676d5ce09c37cc77f27d68701b39158249359
Backed out changeset 74a676d5ce09

diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -2211,17 +2211,17 @@ execute_pkg_add_or_del (const std::strin
 
   unwind_protect frame;
 
   std::string file = file_ops::concat (dir, script_file);
 
   file_stat fs (file);
 
   if (fs.exists ())
-    safe_source_file (file, "base");
+    source_file (file, "base");
 }
 
 void
 execute_pkg_add (const std::string& dir)
 {
   execute_pkg_add_or_del (dir, "PKG_ADD");
 }
 
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -252,16 +252,55 @@ initialize_version_info (void)
   args(3) = OCTAVE_RELEASE_DATE;
   args(2) = OCTAVE_RELEASE;
   args(1) = OCTAVE_VERSION;
   args(0) = "GNU Octave";
 
   F__version_info__ (args, 0);
 }
 
+static void
+gripe_safe_source_exception (const std::string& file, const std::string& msg)
+{
+  std::cerr << "error: " << msg << "\n"
+            << "error: execution of " << file << " failed\n"
+            << "error: trying to make my way to a command prompt"
+            << std::endl;
+}
+
+// Execute commands from a file and catch potential exceptions in a consistent
+// way.  This function should be called anywhere we might parse and execute
+// commands from a file before before we have entered the main loop in
+// toplev.cc.
+
+static void
+safe_source_file (const std::string& file_name,
+                  const std::string& context = "",
+                  bool verbose = false, bool require_file = true,
+                  const std::string& warn_for = "")
+{
+  try
+    {
+      source_file (file_name, context, verbose, require_file, warn_for);
+    }
+  catch (const octave_interrupt_exception&)
+    {
+      recover_from_exception ();
+
+      if (quitting_gracefully)
+        clean_up_and_exit (exit_status);
+    }
+  catch (const octave_execution_exception&)
+    {
+      recover_from_exception ();
+
+      gripe_safe_source_exception (file_name, "unhandled execution exception");
+    }
+}
+
 // Initialize by reading startup files.
 
 static void
 execute_startup_files (void)
 {
   unwind_protect frame;
 
   std::string context;
@@ -738,19 +777,16 @@ octave_initialize_interpreter (int argc,
   install_types ();
 
   install_ops ();
 
   install_builtins ();
 
   install_classdef ();
 
-  // Setting the command line path just stores the directory names, it
-  // does not execute PKG_ADD scripts as we are not ready to do that yet.  
-
   for (std::list<std::string>::const_iterator it = command_line_path.begin ();
        it != command_line_path.end (); it++)
     load_path::set_command_line_path (*it);
 
   if (! exec_path.empty ())
     set_exec_path (exec_path);
 
   if (! image_path.empty ())
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4617,53 +4617,16 @@ source_file (const std::string& file_nam
 
       if (verbose)
         std::cout << "done." << std::endl;
 
       delete fcn;
     }
 }
 
-static void
-gripe_safe_source_exception (const std::string& file, const std::string& msg)
-{
-  std::cerr << "error: " << msg << "\n"
-            << "error: execution of " << file << " failed\n"
-            << "error: trying to make my way to a command prompt"
-            << std::endl;
-}
-
-// Execute commands from a file and catch potential exceptions in a consistent
-// way.  This function should be called anywhere we might parse and execute
-// commands from a file before before we have entered the main loop in
-// toplev.cc.
-
-void
-safe_source_file (const std::string& file_name, const std::string& context,
-                  bool verbose, bool require_file, const std::string& warn_for)
-{
-  try
-    {
-      source_file (file_name, context, verbose, require_file, warn_for);
-    }
-  catch (const octave_interrupt_exception&)
-    {
-      recover_from_exception ();
-
-      if (quitting_gracefully)
-        clean_up_and_exit (exit_status);
-    }
-  catch (const octave_execution_exception&)
-    {
-      recover_from_exception ();
-
-      gripe_safe_source_exception (file_name, "unhandled execution exception");
-    }
-}
-
 DEFUN (mfilename, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {} {} mfilename ()\n\
 @deftypefnx {} {} mfilename (\"fullpath\")\n\
 @deftypefnx {} {} mfilename (\"fullpathext\")\n\
 Return the name of the currently executing file.\n\
 \n\
 When called from outside an m-file return the empty string.\n\
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -112,22 +112,16 @@ load_fcn_from_file (const std::string& f
                     bool autoload = false);
 
 extern OCTINTERP_API void
 source_file (const std::string& file_name,
              const std::string& context = "",
              bool verbose = false, bool require_file = true,
              const std::string& warn_for = "");
 
-extern OCTINTERP_API void
-safe_source_file (const std::string& file_name,
-                  const std::string& context = "",
-                  bool verbose = false, bool require_file = true,
-                  const std::string& warn_for = "");
-
 extern OCTINTERP_API octave_value_list
 feval (const std::string& name,
        const octave_value_list& args = octave_value_list (),
        int nargout = 0);
 
 extern OCTINTERP_API octave_value_list
 feval (octave_function *fcn,
        const octave_value_list& args = octave_value_list (),
