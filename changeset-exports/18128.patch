# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1386813510 18000
#      Wed Dec 11 20:58:30 2013 -0500
# Branch gui-release
# Node ID d96747f74b1e9e3c17dc37ee142b9f702972c9de
# Parent  d76f790b4eece0ab6bddeb788cfd686f0d327264
enable "backtrace" warning by default and document option

* error.cc (Vbacktrace_on_warning): Initialize to true.
(Fwarning): Describe "backtrace" option.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -1,11 +1,14 @@
 Summary of important user-visible changes for version 4.0:
 ---------------------------------------------------------
 
+ ** For compatibility with Matlab, the "backtrace" warning option is now
+    enabled by default.
+
  ** The preference
 
       do_braindead_shortcircuit_evaluation
 
     is now enabled by default.
 
  ** Other new functions added in 4.0.0:
 
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -56,17 +56,17 @@ static bool Vbeep_on_error = false;
 bool Vdebug_on_error = false;
 
 // TRUE means that Octave will try to enter the debugger when a warning
 // is encountered.
 bool Vdebug_on_warning = false;
 
 // TRUE means that Octave will try to display a stack trace when a
 // warning is encountered.
-static bool Vbacktrace_on_warning = false;
+static bool Vbacktrace_on_warning = true;
 
 // TRUE means that Octave will print a verbose warning.  Currently unused.
 static bool Vverbose_warning;
 
 // TRUE means that Octave will print no warnings, but lastwarn will be
 //updated
 static bool Vquiet_warning = false;
 
@@ -1220,16 +1220,17 @@ warning_query (const std::string& id_arg
 DEFUN (warning, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} warning (@var{template}, @dots{})\n\
 @deftypefnx {Built-in Function} {} warning (@var{id}, @var{template}, @dots{})\n\
 @deftypefnx {Built-in Function} {} warning (\"on\", @var{id})\n\
 @deftypefnx {Built-in Function} {} warning (\"off\", @var{id})\n\
 @deftypefnx {Built-in Function} {} warning (\"query\", @var{id})\n\
 @deftypefnx {Built-in Function} {} warning (\"error\", @var{id})\n\
+@deftypefnx {Built-in Function} {} warning (@var{state}, \"backtrace\")\n\
 @deftypefnx {Built-in Function} {} warning (@var{state}, @var{id}, \"local\")\n\
 Format the optional arguments under the control of the template string\n\
 @var{template} using the same rules as the @code{printf} family of\n\
 functions (@pxref{Formatted Output}) and print the resulting message\n\
 on the @code{stderr} stream.  The message is prefixed by the character\n\
 string @samp{warning: }.\n\
 You should use this function when you want to notify the user\n\
 of an unusual condition, but only when it makes sense for your program\n\
@@ -1250,16 +1251,21 @@ warning named by @var{id} is handled as 
 for example, the following handles all warnings as errors:\n\
 \n\
 @example\n\
 @group\n\
 warning (\"error\");\n\
 @end group\n\
 @end example\n\
 \n\
+If the state is @qcode{\"on\"} or @qcode{\"off\"} and the third argument\n\
+is @qcode{\"backtrace\"}, then a stack trace is printed along with the\n\
+warning message when warnings occur inside function calls.  This option\n\
+is enabled by default.\n\
+\n\
 If the state is @qcode{\"on\"}, @qcode{\"off\"}, or @qcode{\"error\"}\n\
 and the third argument is @qcode{\"local\"}, then the warning state\n\
 will be set temporarily, until the end of the current function.\n\
 Changes to warning states that are set locally affect the current\n\
 function and all functions called from the current scope.  The\n\
 previous warning state is restored on return from the current\n\
 function.  The @qcode{\"local\"} option is ignored if used in the top-level\n\
 workspace.\n\
