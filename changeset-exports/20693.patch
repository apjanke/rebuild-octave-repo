# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1447268971 -3600
#      Wed Nov 11 20:09:31 2015 +0100
# Node ID 7751bd56d0bedbad10f7c5c2f784289d45760a9e
# Parent  dc2be248596881d55b71aec23a2a3373c345c1ec
added actions and shortcuts for switching editor tabs

* file-editor.cc (add_action): allow actions added to the widget without menu
  entry;
  (construct): added action for switching to left/right tab;
  (set_shortcuts): set the shortcuts to the new actions;
  (switch_left_tab): slot for switching to left tab;
  (switch_right_tab): slot for switching to right tab;
  (switch_tab): common slot for switching tabs

* file-editor.h: new actions and slots for switching tabs

* shortcut-manager.cc (do_init_data): init the new shortcuts with the
  default key sequences or the ones from the settings file;
  (do_fill_treewidget): add tab navigation with the new shortcuts to the
  tree widget in the settings dialog;

diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -1201,19 +1201,29 @@ file_editor::insert_new_open_actions (QA
   _tool_bar->insertAction (_save_action, open_action);
   _tool_bar->insertAction (open_action, new_action);
 }
 
 QAction*
 file_editor::add_action (QMenu *menu, const QIcon &icon, const QString &text,
                          const char *member)
 {
-  QAction *a = menu->addAction (icon, text, this, member);
+  QAction *a;
+
+  if (menu)
+    a = menu->addAction (icon, text, this, member);
+  else
+    {
+      a = new QAction (this);
+      connect (a, SIGNAL (triggered ()), this, member);
+    }
+
   addAction (a);  // important for shortcut context
   a->setShortcutContext (Qt::WidgetWithChildrenShortcut);
+
   return a;
 }
 
 void
 file_editor::enable_menu_shortcuts (bool enable)
 {
   QHash<QMenu*, QStringList>::const_iterator i = _hash_menu_text.constBegin();
 
@@ -1514,16 +1524,23 @@ file_editor::construct (void)
 
   QMenu *_help_menu = m_add_menu (_menu_bar, tr ("&Help"));
 
   _context_help_action = add_action (_help_menu, QIcon (),
           tr ("&Help on Keyword"), SLOT (request_context_help (bool)));
   _context_doc_action = add_action (_help_menu, QIcon (),
           tr ("&Documentation on Keyword"), SLOT (request_context_doc (bool)));
 
+  // tab navigation (no menu, only actions)
+
+  _switch_left_tab_action = add_action (0, QIcon (), "",
+                                        SLOT (switch_left_tab ()));
+  _switch_right_tab_action = add_action (0, QIcon (), "",
+                                         SLOT (switch_right_tab ()));
+
   // toolbar
 
   // new and open actions are inserted later from main window
   _tool_bar->addAction (_save_action);
   _tool_bar->addAction (_save_as_action);
   _tool_bar->addSeparator ();
   _tool_bar->addAction (_print_action);
   _tool_bar->addSeparator ();
@@ -1871,16 +1888,20 @@ file_editor::set_shortcuts ()
   // Run menu
   shortcut_manager::set_shortcut (_run_action, "editor_run:run_file");
   shortcut_manager::set_shortcut (_run_selection_action, "editor_run:run_selection");
 
   // Help menu
   shortcut_manager::set_shortcut (_context_help_action, "editor_help:help_keyword");
   shortcut_manager::set_shortcut (_context_doc_action,  "editor_help:doc_keyword");
 
+  // Tab navigation without menu entries
+  shortcut_manager::set_shortcut (_switch_left_tab_action, "editor_tabs:switch_left_tab");
+  shortcut_manager::set_shortcut (_switch_right_tab_action, "editor_tabs:switch_right_tab");
+
 }
 
 void
 file_editor::check_actions ()
 {
   bool  have_tabs = _tab_widget->count () > 0;
 
   _edit_cmd_menu->setEnabled (have_tabs);
@@ -1998,9 +2019,36 @@ file_editor::dropEvent (QDropEvent *e)
       {
         foreach (QUrl url, e->mimeData ()->urls ())
         {
           request_open_file (url.toLocalFile ());
         }
       }
   }
 
+// slots for tab navigation
+void
+file_editor::switch_left_tab ()
+{
+  switch_tab (-1);
+}
+void
+file_editor::switch_right_tab ()
+{
+  switch_tab (1);
+}
+void
+file_editor::switch_tab (int direction)
+{
+  int tabs = _tab_widget->count ();
+
+  if (tabs < 2)
+    return;
+
+  int new_index = _tab_widget->currentIndex () + direction;
+
+  if (new_index < 0 || new_index >= tabs)
+    new_index = new_index - direction*tabs;
+
+  _tab_widget->setCurrentIndex (new_index);
+}
+
 #endif
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -229,16 +229,19 @@ private slots:
   void show_white_space (bool);
   void show_eol_chars (bool);
   void show_indent_guides (bool);
   void show_long_line (bool);
   void zoom_in (bool);
   void zoom_out (bool);
   void zoom_normal (bool);
 
+  void switch_left_tab ();
+  void switch_right_tab ();
+
   void create_context_menu (QMenu *);
   void edit_status_update (bool, bool);
 
 protected:
 
   void dragEnterEvent(QDragEnterEvent *event);
   void dropEvent(QDropEvent *event);
 
@@ -248,16 +251,18 @@ private:
   void construct (void);
   void add_file_editor_tab (file_editor_tab *f, const QString& fn);
   void save_file_as (QWidget *fetabID = 0);
   void mru_menu_update (void);
   bool call_custom_editor (const QString& file_name = QString (), int line = -1);
 
   void toggle_preference (const QString& preference, bool def);
 
+  void switch_tab (int direction);
+
   bool editor_tab_has_focus ();
 
   QWidget *find_tab_widget (const QString& openFileName) const;
   QAction *add_action (QMenu *menu, const QIcon &icon, const QString &text,
                        const char *member);
 
   QMenu* m_add_menu (QMenuBar *p, QString text);
 
@@ -333,16 +338,19 @@ private:
   QAction *_close_others_action;
 
   QAction *_redo_action;
   QAction *_undo_action;
 
   QAction *_preferences_action;
   QAction *_styles_preferences_action;
 
+  QAction *_switch_left_tab_action;
+  QAction *_switch_right_tab_action;
+
   QAction *_toggle_breakpoint_action;
   QAction *_next_breakpoint_action;
   QAction *_previous_breakpoint_action;
   QAction *_remove_all_breakpoints_action;
 
   QMenu *_edit_cmd_menu;
   QMenu *_edit_fmt_menu;
   QMenu *_edit_nav_menu;
diff --git a/libgui/src/shortcut-manager.cc b/libgui/src/shortcut-manager.cc
--- a/libgui/src/shortcut-manager.cc
+++ b/libgui/src/shortcut-manager.cc
@@ -311,16 +311,23 @@ shortcut_manager::do_init_data ()
   init (tr ("Run Selection"), "editor_run:run_selection",
         QKeySequence (prefix + Qt::Key_F9) );
 
   // help
   init (tr ("Help on Keyword"), "editor_help:help_keyword",
         QKeySequence::HelpContents);
   init (tr ("Document on Keyword"), "editor_help:doc_keyword",
         QKeySequence (Qt::SHIFT + Qt::Key_F1));
+
+  // tab navigation
+  init (tr ("Switch to left tab"), "editor_tabs:switch_left_tab",
+        QKeySequence (ctrl + Qt::Key_PageDown));
+  init (tr ("Switch to right tab"), "editor_tabs:switch_right_tab",
+        QKeySequence (ctrl + Qt::Key_PageUp));
+
 }
 
 void
 shortcut_manager::init (QString description, QString key, QKeySequence def_sc)
 {
   QKeySequence actual
     = QKeySequence (_settings->value ("shortcuts/"+key, def_sc).toString ());
 
@@ -380,23 +387,26 @@ shortcut_manager::do_fill_treewidget (QT
   QTreeWidgetItem *editor_view = new QTreeWidgetItem (editor);
   editor_view->setText (0, tr ("View"));
   QTreeWidgetItem *editor_debug = new QTreeWidgetItem (editor);
   editor_debug->setText (0, tr ("Debug"));
   QTreeWidgetItem *editor_run = new QTreeWidgetItem (editor);
   editor_run->setText (0, tr ("Run"));
   QTreeWidgetItem *editor_help = new QTreeWidgetItem (editor);
   editor_help->setText (0, tr ("Help"));
+  QTreeWidgetItem *editor_tabs = new QTreeWidgetItem (editor);
+  editor_tabs->setText (0, tr ("Tabs"));
 
   _level_hash["editor_file"] = editor_file;
   _level_hash["editor_edit"] = editor_edit;
   _level_hash["editor_view"] = editor_view;
   _level_hash["editor_debug"] = editor_debug;
   _level_hash["editor_run"] = editor_run;
   _level_hash["editor_help"] = editor_help;
+  _level_hash["editor_tabs"] = editor_tabs;
 
   connect (tree_view, SIGNAL (itemDoubleClicked (QTreeWidgetItem*, int)),
            this, SLOT (handle_double_clicked (QTreeWidgetItem*, int)));
 
   for (int i = 0; i < _sc.count (); i++)
     {
       shortcut_t sc = _sc.at (i);
 
