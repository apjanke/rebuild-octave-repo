# HG changeset patch
# User jwe
# Date 960397894 0
#      Wed Jun 07 17:11:34 2000 +0000
# Node ID ef883684e58e45224c044a3a0694bac5b8db993f
# Parent  e0b46234555e664763491cd9c39b9d97638b1b52
[project @ 2000-06-07 17:11:33 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2000-06-06  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* general/logical.m: Return arg if it is empty.  Better error
+	message for non-numeric types.	
+
 2000-05-31  A. Scottedward Hodel <a.s.hodel@eng.auburn.edu>
 
 	* control/base/dlqe.m: Update documentation.  Fix typo.  Warn
 	about difference with Matlab dlqe function.
 
 	* control/system/sysmult.m: Fix typo in argument dimensions checking.
 
 2000-05-24  Ben Sapp <bsapp@nua.lampf.lanl.gov>
diff --git a/scripts/general/logical.m b/scripts/general/logical.m
--- a/scripts/general/logical.m
+++ b/scripts/general/logical.m
@@ -33,18 +33,20 @@
 ## @end example
 ## @end deftypefn
 
 ## Author: jwe
 
 function y = logical (x)
 
   if (nargin == 1)
-    if (! islogical (x))
+    if (islogical (x) || isempty (x))
+      y = x;
+    elseif (isnumeric (x))
       y = x != 0;
     else
-      y = x;
+      error ("logical not defined for type `%s'", typeinfo (x));
     endif
   else
     usage ("logical (x)");
   endif
 
 endfunction
diff --git a/scripts/strings/strrep.m b/scripts/strings/strrep.m
--- a/scripts/strings/strrep.m
+++ b/scripts/strings/strrep.m
@@ -55,36 +55,36 @@ function t = strrep (s, x, y)
     ## Copy the parts of s that aren't being replaced.  This is done
     ## with an index vector, with jumps where each search string
     ## is found.  For a jump of 0 (target length == replacement length)
     ## the index is just cumsum ( ones (length (s))).  For non-zero
     ## jumps, add the jump size to the ones vector at each found position.
     jump = length(y) - length(x);
     if (jump > 0)     # s expands
       di = ones(size(s));
-      di (ind) = 1 + jump * ones (length (ind), 1);
-      t (cumsum (di)) = s
+      di(ind) = 1 + jump * ones (length (ind), 1);
+      t(cumsum (di)) = s;
     elseif (jump < 0) # s contracts
       di = ones (jump * length (ind) + length (s), 1);
       di (ind + jump * [0:length(ind)-1]) = 1 - jump * ones(length(ind), 1);
       t = s (cumsum (di));
     else              # s stays the same length
       t = s;
     endif
     ## Now, substitute a copy of the replacement string whereever the
     ## search string was found.  Note that we must first update the
     ## target positions to account for any expansion or contraction
     ## of s that may have occurred.
     ind = ind + jump * [0:length(ind)-1];
     repeat = [1:length(y)]' * ones (1, length (ind));
     dest = ones (length (y), 1) * ind + repeat - 1;
-    t (dest) = y (repeat);
+    t(dest) = y(repeat);
   else                        # deletion
     ## Build an index vector of all locations where the target was found
     ## in the search string, and zap them. 
-    t = toascii(s);
+    t = toascii (s);
     repeat = [1:length(x)]' * ones (1, length (ind));
     delete = ones (length (x), 1) * ind + repeat - 1;
-    t (delete) = [];
-    t = setstr(t);
+    t(delete) = [];
+    t = setstr (t);
   endif
 
 endfunction
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,16 @@
+2000-06-07  Ben Sapp <bsapp@nua.lampf.lanl.gov>
+
+	* octave.test/quad/quad-1.m: Use absolute value of difference
+	from expected value when comparing with sqrt (eps).  Potential
+	problems like this were noticed by Przemek Klosowski
+	<przemek@rrdjazz.nist.gov>.
+	* octave.test/quad/quad-2.m: Likewise.
+
 1999-10-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* octave.test/system/mktime-1.m (t): Compare whole seconds only.
 
 Fri Dec  4 20:55:47 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* octave.test/system/clock-1.m: Use standard format specifiers %d
 	and %H instead of %e and %k.
diff --git a/test/octave.test/quad/quad-1.m b/test/octave.test/quad/quad-1.m
--- a/test/octave.test/quad/quad-1.m
+++ b/test/octave.test/quad/quad-1.m
@@ -1,3 +1,3 @@
 function y = f (x) y = x + 1; endfunction
 [v, ier, nfun, err] = quad ("f", 0, 5);
-ier == 0 && v - 17.5 < sqrt (eps) && nfun > 0 && err < sqrt (eps)
+ier == 0 && abs (v - 17.5) < sqrt (eps) && nfun > 0 && err < sqrt (eps)
diff --git a/test/octave.test/quad/quad-2.m b/test/octave.test/quad/quad-2.m
--- a/test/octave.test/quad/quad-2.m
+++ b/test/octave.test/quad/quad-2.m
@@ -1,5 +1,5 @@
 function y = f (x)
   y = x .* sin (1 ./ x) .* sqrt (abs (1 - x));
 endfunction
 [v, ier, nfun, err] = quad ("f", 0, 3);
-(ier == 0 || ier == 1) && v - 1.98194122455795 < sqrt (eps) && nfun > 0
+(ier == 0 || ier == 1) && abs (v - 1.98194122455795) < sqrt (eps) &&
