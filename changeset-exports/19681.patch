# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1423430706 18000
#      Sun Feb 08 16:25:06 2015 -0500
# Node ID 35bca657d74df7892f5593b2bda6f3d3dbb07349
# Parent  890ff06d84ce852f97effe49b06e4e00cbc8beaf
printing for Qt plot widget (bug #42537)

* Backend.h, Backend.cc (Backend::print_figure): New function.
* Canvas.h, Canvas.cc (Canvas::print): New function.
* Figure.h, Figure.cc (Figure:print): New function.
* Object.h, Object.cc (Object::slotPrint, Object::print):
New functions.
* ObjectProxy.h, ObjectProxy.cc (ObjectProxy::print): New function.
(ObjectProxy::sendPrint): New signal.
(ObjectProxy::init): Connect sendPrint signal to slotPrint slot of
current object.

diff --git a/libgui/graphics/Backend.cc b/libgui/graphics/Backend.cc
--- a/libgui/graphics/Backend.cc
+++ b/libgui/graphics/Backend.cc
@@ -167,16 +167,31 @@ void Backend::redraw_figure (const graph
     {
       ObjectProxy* proxy = toolkitObjectProxy (go);
 
       if (proxy)
         proxy->redraw ();
     }
 }
 
+void Backend::print_figure (const graphics_object& go,
+                            const std::string& term,
+                            const std::string& file_cmd, bool /*mono*/,
+                            const std::string& /*debug_file*/) const
+{
+  if (go.get_properties ().is_visible ())
+    {
+      ObjectProxy* proxy = toolkitObjectProxy (go);
+
+      if (proxy)
+        proxy->print (QString::fromStdString (file_cmd),
+                      QString::fromStdString (term));
+    }
+}
+
 Object* Backend::toolkitObject (const graphics_object& go)
 {
   ObjectProxy* proxy = toolkitObjectProxy (go);
 
   if (proxy)
     return proxy->object ();
 
   return 0;
diff --git a/libgui/graphics/Backend.h b/libgui/graphics/Backend.h
--- a/libgui/graphics/Backend.h
+++ b/libgui/graphics/Backend.h
@@ -49,16 +49,21 @@ public:
   void redraw_figure (const graphics_object& h) const;
 
   void update (const graphics_object& obj, int pId);
 
   bool initialize (const graphics_object& obj);
 
   void finalize (const graphics_object& obj);
 
+  void print_figure (const graphics_object& go,
+                     const std::string& term,
+                     const std::string& file_cmd, bool /*mono*/,
+                     const std::string& /*debug_file*/) const;
+
   static Object* toolkitObject (const graphics_object& go);
 
   static ObjectProxy* toolkitObjectProxy (const graphics_object& go);
 
 signals:
   void createObject (double handle);
 };
 
diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -33,16 +33,18 @@ along with Octave; see the file COPYING.
 #include <QRectF>
 
 #include "Backend.h"
 #include "Canvas.h"
 #include "ContextMenu.h"
 #include "GLCanvas.h"
 #include "QtHandlesUtils.h"
 
+#include "gl2ps-renderer.h"
+
 namespace QtHandles
 {
 
 void Canvas::redraw (bool sync)
 {
   if (sync)
     qWidget ()->repaint ();
   else
@@ -76,16 +78,28 @@ void Canvas::setCursor (MouseMode mode)
 
         default:
           w->setCursor (origCursor);
           break;
         }
     }
 }
 
+void Canvas::print (const QString& file_cmd, const QString& term)
+{
+  graphics_object obj = gh_manager::get_object (m_handle);
+
+  if (obj.valid_object ())
+    {
+      graphics_object figObj (obj.get_ancestor ("figure"));
+
+      gl2ps_print (figObj, file_cmd.toStdString (), term.toStdString ());
+    }
+}
+
 void Canvas::updateCurrentPoint(const graphics_object& fig,
                                 const graphics_object& obj, QMouseEvent* event)
 {
   gh_manager::post_set (fig.get_handle (), "currentpoint",
                         Utils::figureCurrentPoint (fig, event), false);
 
   Matrix children = obj.get_properties ().get_children ();
   octave_idx_type num_children = children.numel ();
diff --git a/libgui/graphics/Canvas.h b/libgui/graphics/Canvas.h
--- a/libgui/graphics/Canvas.h
+++ b/libgui/graphics/Canvas.h
@@ -47,16 +47,18 @@ public:
     };
 
 public:
   virtual ~Canvas (void) { }
 
   void redraw (bool sync = false);
   void blockRedraw (bool block = true);
 
+  void print (const QString& file_cmd, const QString& term);
+
   void addEventMask (int m) { m_eventMask |= m; }
   void clearEventMask (int m) { m_eventMask &= (~m); }
   void setEventMask (int m) { m_eventMask = m; }
 
   void setCursor (MouseMode mode);
 
   virtual QWidget* qWidget (void) = 0;
 
diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -308,16 +308,24 @@ void Figure::redraw (void)
 
       if (obj)
         obj->slotRedraw ();
     }
 
   updateFigureToolBarAndMenuBar ();
 }
 
+void Figure::print (const QString& file_cmd, const QString& term)
+{
+  Canvas* canvas = m_container->canvas (m_handle);
+
+  if (canvas)
+    canvas->print (file_cmd, term);
+}
+
 void Figure::beingDeleted (void)
 {
   Canvas* canvas = m_container->canvas (m_handle.value (), false);
 
   if (canvas)
     canvas->blockRedraw (true);
 
   m_menuBar->removeReceiver (this);
diff --git a/libgui/graphics/Figure.h b/libgui/graphics/Figure.h
--- a/libgui/graphics/Figure.h
+++ b/libgui/graphics/Figure.h
@@ -83,16 +83,17 @@ protected:
     {
       UpdateBoundingBoxPosition = 0x1,
       UpdateBoundingBoxSize     = 0x2,
       UpdateBoundingBoxAll      = 0x3
     };
 
 protected:
   void redraw (void);
+  void print (const QString& file_cmd, const QString& term);
   void update (int pId);
   void updateBoundingBox (bool internal = false, int flags = 0);
   void beingDeleted (void);
 
 private:
   void createFigureToolBarAndMenuBar (void);
   void showFigureToolBar (bool visible);
   void showMenuBar (bool visible);
diff --git a/libgui/graphics/Object.cc b/libgui/graphics/Object.cc
--- a/libgui/graphics/Object.cc
+++ b/libgui/graphics/Object.cc
@@ -19,16 +19,17 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <QString>
 #include <QVariant>
 
 #include "Backend.h"
 #include "Object.h"
 #include "QtHandlesUtils.h"
 
 namespace QtHandles
 {
@@ -108,16 +109,24 @@ void Object::slotFinalize (void)
 void Object::slotRedraw (void)
 {
   gh_manager::auto_lock lock;
 
   if (object ().valid_object ())
     redraw ();
 }
 
+void Object::slotPrint (const QString& file_cmd, const QString& term)
+{
+  gh_manager::auto_lock lock;
+
+  if (object ().valid_object ())
+    print (file_cmd, term);
+}
+
 void Object::update (int /* pId */)
 {
 }
 
 void Object::finalize (void)
 {
   if (m_qobject)
     {
@@ -126,16 +135,20 @@ void Object::finalize (void)
     }
   deleteLater ();
 }
 
 void Object::redraw (void)
 {
 }
 
+void Object::print (const QString& file_cmd, const QString& term)
+{
+}
+
 void Object::beingDeleted (void)
 {
 }
 
 void Object::objectDestroyed (QObject* obj)
 {
   if (obj && obj == m_qobject)
     m_qobject = 0;
diff --git a/libgui/graphics/Object.h b/libgui/graphics/Object.h
--- a/libgui/graphics/Object.h
+++ b/libgui/graphics/Object.h
@@ -23,16 +23,17 @@ along with Octave; see the file COPYING.
 #ifndef __QtHandles_Object__
 #define __QtHandles_Object__ 1
 
 #include <QObject>
 
 #include "graphics.h"
 
 class QObject;
+class QString;
 class QWidget;
 
 namespace QtHandles
 {
 
 class Container;
 class ObjectProxy;
 
@@ -75,26 +76,28 @@ public:
   virtual Container* innerContainer (void) = 0;
 
   static Object* fromQObject (QObject* obj);
 
 public slots:
   void slotUpdate (int pId);
   void slotFinalize (void);
   void slotRedraw (void);
+  void slotPrint (const QString& file_cmd, const QString& term);
 
   void objectDestroyed (QObject *obj = 0);
 
 protected:
   static Object* parentObject (const graphics_object& go);
   void init (QObject* obj, bool callBase = false);
 
   virtual void update (int pId);
   virtual void finalize (void);
   virtual void redraw (void);
+  virtual void print (const QString& file_cmd, const QString& term);
 
   virtual void beingDeleted (void);
 
 protected:
   graphics_handle m_handle;
   QObject* m_qobject;
 };
 
diff --git a/libgui/graphics/ObjectProxy.cc b/libgui/graphics/ObjectProxy.cc
--- a/libgui/graphics/ObjectProxy.cc
+++ b/libgui/graphics/ObjectProxy.cc
@@ -19,16 +19,18 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <QString>
+
 #include "oct-mutex.h"
 
 #include "Object.h"
 #include "ObjectProxy.h"
 
 namespace QtHandles
 {
 
@@ -45,28 +47,32 @@ void ObjectProxy::init (Object* obj)
       if (m_object)
         {
           disconnect (this, SIGNAL (sendUpdate (int)),
                       m_object, SLOT (slotUpdate (int)));
           disconnect (this, SIGNAL (sendFinalize (void)),
                       m_object, SLOT (slotFinalize (void)));
           disconnect (this, SIGNAL (sendRedraw (void)),
                       m_object, SLOT (slotRedraw (void)));
+          disconnect (this, SIGNAL (sendPrint (const QString&, const QString&)),
+                      m_object, SLOT (slotPrint (const QString&, const QString&)));
         }
 
       m_object = obj;
 
       if (m_object)
         {
           connect (this, SIGNAL (sendUpdate (int)),
                    m_object, SLOT (slotUpdate (int)));
           connect (this, SIGNAL (sendFinalize (void)),
                    m_object, SLOT (slotFinalize (void)));
           connect (this, SIGNAL (sendRedraw (void)),
                    m_object, SLOT (slotRedraw (void)));
+          connect (this, SIGNAL (sendPrint (const QString&, const QString&)),
+                   m_object, SLOT (slotPrint (const QString&, const QString&)));
         }
     }
 }
 
 void ObjectProxy::setObject (Object* obj)
 {
   emit sendFinalize ();
   init (obj);
@@ -86,9 +92,14 @@ void ObjectProxy::finalize (void)
   init (0);
 }
 
 void ObjectProxy::redraw (void)
 {
   emit sendRedraw ();
 }
 
+  void ObjectProxy::print (const QString& file_cmd, const QString& term)
+{
+  emit sendPrint (file_cmd, term);
+}
+
 };
diff --git a/libgui/graphics/ObjectProxy.h b/libgui/graphics/ObjectProxy.h
--- a/libgui/graphics/ObjectProxy.h
+++ b/libgui/graphics/ObjectProxy.h
@@ -20,39 +20,43 @@ along with Octave; see the file COPYING.
 
 */
 
 #ifndef __QtHandles_ObjectProxy__
 #define __QtHandles_ObjectProxy__ 1
 
 #include <QObject>
 
+class QString;
+
 namespace QtHandles
 {
 
 class Object;
 
 class ObjectProxy : public QObject
 {
   Q_OBJECT
 
 public:
    ObjectProxy (Object* obj = 0);
 
    void update (int pId);
    void finalize (void);
    void redraw (void);
+   void print (const QString& file_cmd, const QString& term);
 
    Object* object (void) { return m_object; }
    void setObject (Object* obj);
 
 signals:
    void sendUpdate (int pId);
    void sendFinalize (void);
    void sendRedraw (void);
+   void sendPrint (const QString& file_cmd, const QString& term);
 
 private:
    void init (Object* obj);
 
 private:
    Object* m_object;
 };
 
