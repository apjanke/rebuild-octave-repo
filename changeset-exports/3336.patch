# HG changeset patch
# User jwe
# Date 941665295 0
#      Wed Nov 03 21:41:35 1999 +0000
# Node ID 08ad797989f81e42bcb4206a4af8fe98d244fe35
# Parent  f39b97e13cf2ce8f85dd6d796c4a5244a91b9e93
[project @ 1999-11-03 21:41:34 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,13 @@
 1999-11-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* dbleSVD.cc (SVD::init): Let DGESVD determine work space requirement.
+	* CmplxSVD.cc (ComplexSVD::init): Likewise, for complex version.
+
 	* dbleSCHUR.cc (SCHUR::init): IWORK is always referenced by dgeesx.
 	Don't forget to pass length of third string argument to dgeesx.
 
 	* CmplxSCHUR.cc (ComplexSCHUR::init): Don't forget to pass length
 	of third string argument to zgeesx.
 
 1999-11-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/liboctave/CmplxSVD.cc b/liboctave/CmplxSVD.cc
--- a/liboctave/CmplxSVD.cc
+++ b/liboctave/CmplxSVD.cc
@@ -126,36 +126,51 @@ ComplexSVD::init (const ComplexMatrix& a
   sigma.resize (nrow_s, ncol_s);
   double *s_vec = sigma.fortran_vec ();
 
   if (! (jobv == 'N' || jobv == 'O'))
     right_sm.resize (nrow_vt, n);
 
   Complex *vt = right_sm.fortran_vec ();
 
-  int lwork = 2*min_mn + max_mn;
-
-  Array<Complex> work (lwork);
-  Complex *pwork = work.fortran_vec ();
-
   int lrwork = 5*max_mn;
 
   Array<double> rwork (lrwork);
-  double *prwork = rwork.fortran_vec ();
+
+  // Ask ZGESVD what the dimension of WORK should be.
+
+  int lwork = -1;
 
-  F77_XFCN (zgesvd, ZGESVD, (&jobu, &jobv, m, n, tmp_data, m, s_vec, u,
-			     m, vt, nrow_vt, pwork, lwork, prwork, info,
-			     1L, 1L));
+  Array<Complex> work (1);
+
+  F77_XFCN (zgesvd, ZGESVD, (&jobu, &jobv, m, n, tmp_data, m, s_vec,
+			     u, m, vt, nrow_vt, work.fortran_vec (),
+			     lwork, rwork.fortran_vec (), info, 1L,
+			     1L));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("unrecoverable error in zgesvd");
   else
     {
-      if (! (jobv == 'N' || jobv == 'O'))
-	right_sm = right_sm.hermitian ();
+      lwork = static_cast<int> (work(0).real ());
+      work.resize (lwork);
+
+      F77_XFCN (zgesvd, ZGESVD, (&jobu, &jobv, m, n, tmp_data, m,
+				 s_vec, u, m, vt, nrow_vt,
+				 work.fortran_vec (), lwork,
+				 rwork.fortran_vec (),
+				 info, 1L, 1L));
+
+      if (f77_exception_encountered)
+	(*current_liboctave_error_handler) ("unrecoverable error in zgesvd");
+      else
+	{
+	  if (! (jobv == 'N' || jobv == 'O'))
+	    right_sm = right_sm.hermitian ();
+	}
     }
 
   return info;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/dbleSVD.cc b/liboctave/dbleSVD.cc
--- a/liboctave/dbleSVD.cc
+++ b/liboctave/dbleSVD.cc
@@ -75,17 +75,16 @@ SVD::init (const Matrix& a, SVD::type sv
 
   int m = a.rows ();
   int n = a.cols ();
 
   Matrix atmp = a;
   double *tmp_data = atmp.fortran_vec ();
 
   int min_mn = m < n ? m : n;
-  int max_mn = m > n ? m : n;
 
   char jobu = 'A';
   char jobv = 'A';
 
   int ncol_u = m;
   int nrow_vt = n;
   int nrow_s = m;
   int ncol_s = n;
@@ -126,33 +125,45 @@ SVD::init (const Matrix& a, SVD::type sv
   sigma.resize (nrow_s, ncol_s);
   double *s_vec  = sigma.fortran_vec ();
 
   if (! (jobv == 'N' || jobv == 'O'))
     right_sm.resize (nrow_vt, n);
 
   double *vt = right_sm.fortran_vec ();
 
-  int tmp1 = 3*min_mn + max_mn;
-  int tmp2 = 5*min_mn - 4;
-  int lwork = tmp1 > tmp2 ? tmp1 : tmp2;
+  // Ask DGESVD what the dimension of WORK should be.
 
-  Array<double> work (lwork);
-  double *pwork = work.fortran_vec ();
+  int lwork = -1;
+
+  Array<double> work (1);
 
   F77_XFCN (dgesvd, DGESVD, (&jobu, &jobv, m, n, tmp_data, m, s_vec,
-			     u, m, vt, nrow_vt, pwork, lwork, info,
-			     1L, 1L));
+			     u, m, vt, nrow_vt, work.fortran_vec (),
+			     lwork, info, 1L, 1L));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("unrecoverable error in dgesvd");
   else
     {
-      if (! (jobv == 'N' || jobv == 'O'))
-	right_sm = right_sm.transpose ();
+      lwork = static_cast<int> (work(0));
+      work.resize (lwork);
+
+      F77_XFCN (dgesvd, DGESVD, (&jobu, &jobv, m, n, tmp_data, m,
+				 s_vec, u, m, vt, nrow_vt,
+				 work.fortran_vec (), lwork, info, 1L,
+				 1L));
+
+      if (f77_exception_encountered)
+	(*current_liboctave_error_handler) ("unrecoverable error in dgesvd");
+      else
+	{
+	  if (! (jobv == 'N' || jobv == 'O'))
+	    right_sm = right_sm.transpose ();
+	}
     }
 
   return info;
 }
 
 ostream&
 operator << (ostream& os, const SVD& a)
 {
