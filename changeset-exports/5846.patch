# HG changeset patch
# User jwe
# Date 1149704176 0
#      Wed Jun 07 18:16:16 2006 +0000
# Node ID db0598f94c0f97a1dd66ec5ca1e2f45fe778198e
# Parent  8b4a99ae3b5e7a0f0f279f20f2ff2fc8f8dad58d
[project @ 2006-06-07 18:16:16 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,26 @@
+2006-06-07  John W. Eaton  <jwe@octave.org>
+
+	* ov-cell.cc (octave_cell::subsasgn): Handle c-s list object on
+	RHS if last index is '{'.
+	* pt-assign.cc (tree_multi_assignment::rvalue): Compute all LHS
+	lvalues before evaluating RHS.  If LHS lvalue expects more than
+	one output, pass octave_cs_list object to assign method.
+	* pt-idx.cc (tree_index_expression::lvalue): Compute expected
+	number of values if '{' index appears last.
+	* pt-arg-list.cc (tree_argument_list::lvalue_list): New function.
+	* pt-arg-list.h (tree_argument_list::lvalue_list): Provide decl.
+	* oct-lvalue.h (octave_lvalue::nel): New data member.
+	(octave_lvalue::numel): New functions
+	* oct-obj.cc (octave_value_list::has_magic_colon): New function.
+	* oct-obj.h (octave_value_list::has_magic_colon): Provide decl.
+	* pt-arg-list.cc (tree_argument_list::nargout_count): Delete function.
+	* pt-arg-list.h (tree_argument_list::nargout_count): Delete decl.
+
 2006-06-06  John W. Eaton  <jwe@octave.org>
 
 	* sighandlers.cc (generic_sig_handler, sigint_handler):
 	Use strsignal instead of accessing sys_siglist directly.
 	* siglist.h: Use HAVE_DECL_SYS_SIGLIST instead of SYS_SIGLIST_DECLARED.
 	* siglist.c: Update sys_siglist.
 	(init_signals, strsignal): New functions.
 	* octave.cc (octave_main): Call init_signals here.
diff --git a/src/oct-lvalue.h b/src/oct-lvalue.h
--- a/src/oct-lvalue.h
+++ b/src/oct-lvalue.h
@@ -40,30 +40,31 @@ static octave_value dummy_val;
 
 class
 octave_lvalue
 {
 public:
 
   octave_lvalue (octave_value *v = &dummy_val,
 		 symbol_record::change_function f = 0)
-    : val (v), type (), idx (), chg_fcn (f), index_set (false) { }
+    : val (v), type (), idx (), chg_fcn (f), nel (1), index_set (false) { }
 
   octave_lvalue (const octave_lvalue& vr)
     : val (vr.val), type (vr.type), idx (vr.idx), chg_fcn (vr.chg_fcn),
-      index_set (vr.index_set) { }
+      nel (vr.nel), index_set (vr.index_set) { }
 
   octave_lvalue& operator = (const octave_lvalue& vr)
     {
       if (this != &vr)
 	{
 	  val = vr.val;
 	  type = vr.type;
 	  idx = vr.idx;
 	  chg_fcn = vr.chg_fcn;
+	  nel = vr.nel;
 	  index_set = vr.index_set;
 	}
 
       return *this;
     }
 
   ~octave_lvalue (void) { }
 
@@ -72,16 +73,20 @@ public:
   bool is_undefined (void) { return val->is_undefined (); }
 
   bool is_map (void) { return val->is_map (); }
 
   void define (const octave_value& v) { *val = v; }
 
   void assign (octave_value::assign_op, const octave_value&);
 
+  void numel (octave_idx_type n) { nel = n; }
+
+  octave_idx_type numel (void) const { return nel; }
+
   void set_index (const std::string& t, const std::list<octave_value_list>& i);
 
   void clear_index (void) { type = std::string (); idx.clear (); }
 
   void do_unary_op (octave_value::unary_op op);
 
   octave_value value (void);
 
@@ -92,16 +97,18 @@ private:
   octave_value *val;
 
   std::string type;
 
   std::list<octave_value_list> idx;
 
   symbol_record::change_function chg_fcn;
 
+  octave_idx_type nel;
+
   bool index_set;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/oct-obj.cc b/src/oct-obj.cc
--- a/src/oct-obj.cc
+++ b/src/oct-obj.cc
@@ -163,19 +163,31 @@ octave_value_list::splice (octave_idx_ty
 
 bool
 octave_value_list::all_strings_p (void) const
 {
   octave_idx_type n = length ();
 
   for (octave_idx_type i = 0; i < n; i++)
     if (! elem(i).is_string ())
-      return 0;
+      return false;
+
+  return true;
+}
 
-  return 1;
+bool
+octave_value_list::has_magic_colon (void) const
+{
+  octave_idx_type n = length ();
+
+  for (octave_idx_type i = 0; i < n; i++)
+    if (elem(i).is_magic_colon ())
+      return true;
+
+  return false;
 }
 
 string_vector
 octave_value_list::make_argv (const std::string& fcn_name) const
 {
   string_vector argv;
 
   if (all_strings_p ())
diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -106,16 +106,18 @@ public:
 
   octave_value_list& reverse (void);
 
   octave_value_list splice (octave_idx_type offset, octave_idx_type length,
 			    const octave_value_list& lst) const;
 
   bool all_strings_p (void) const;
 
+  bool has_magic_colon (void) const;
+
   string_vector make_argv (const std::string&) const;
 
   void stash_name_tags (const string_vector& nm) { names = nm; }
 
   string_vector name_tags (void) const { return names; }
 
 private:
 
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -217,17 +217,28 @@ octave_cell::subsasgn (const std::string
 	    retval = octave_value (this);
 	  }
 	  break;
 
 	case '{':
 	  {
 	    octave_value_list i = idx.front ();
 
-	    octave_base_matrix<Cell>::assign (i, Cell (t_rhs));
+	    if (t_rhs.is_cs_list ())
+	      {
+		Cell tmp_cell = Cell (t_rhs.list_value ());
+
+		// FIXME -- shouldn't care if the dimensions of the
+		// RHS don't match the dimensions of the subscripted
+		// LHS.
+
+		octave_base_matrix<Cell>::assign (i, tmp_cell);
+	      }
+	    else
+	      octave_base_matrix<Cell>::assign (i, Cell (t_rhs));
 
 	    count++;
 	    retval = octave_value (this);
 	  }
 	  break;
 
 	case '.':
 	  {
diff --git a/src/pt-arg-list.cc b/src/pt-arg-list.cc
--- a/src/pt-arg-list.cc
+++ b/src/pt-arg-list.cc
@@ -27,16 +27,17 @@ 02110-1301, USA.
 
 #include <iostream>
 #include <string>
 
 #include "str-vec.h"
 
 #include "defun.h"
 #include "error.h"
+#include "oct-lvalue.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-usr-fcn.h"
 #include "pt-arg-list.h"
 #include "pt-exp.h"
 #include "pt-pr-code.h"
 #include "pt-walk.h"
 #include "toplev.h"
@@ -72,35 +73,16 @@ void
 tree_argument_list::append (const element_type& s)
 {
   octave_base_list<tree_expression *>::append (s);
 
   if (! list_includes_magic_end && s && s->has_magic_end ())
     list_includes_magic_end = true;
 }
 
-int
-tree_argument_list::nargout_count (void) const
-{
-  int retval = 0;
-
-  for (const_iterator p = begin (); p != end (); p++)
-    {
-      tree_expression *elt = *p;
-
-      // FIXME -- need to be able to determine whether elt is
-      // an expression that could evaluate to a cs-list object, and if
-      // so, how many elements are in that list.  Ugly!
-
-      retval++;
-    }
-
-  return retval;
-}
-
 bool
 tree_argument_list::all_elements_are_constant (void) const
 {
   for (const_iterator p = begin (); p != end (); p++)
     {
       tree_expression *elt = *p;
 
       if (! elt->is_constant ())
@@ -255,16 +237,33 @@ tree_argument_list::convert_to_const_vec
   args.resize (j);
 
   if (stash_object)
     unwind_protect::run_frame ("convert_to_const_vector");
 
   return args;
 }
 
+std::list<octave_lvalue>
+tree_argument_list::lvalue_list (void)
+{
+  std::list<octave_lvalue> retval;
+
+  for (tree_argument_list::iterator p = begin ();
+       p != end ();
+       p++)
+    {
+      tree_expression *elt = *p;
+
+      retval.push_back (elt->lvalue ());
+    }
+
+  return retval;
+}
+
 string_vector
 tree_argument_list::get_arg_names (void) const
 {
   int len = length ();
 
   string_vector retval (len);
 
   int k = 0;
diff --git a/src/pt-arg-list.h b/src/pt-arg-list.h
--- a/src/pt-arg-list.h
+++ b/src/pt-arg-list.h
@@ -19,20 +19,21 @@ along with Octave; see the file COPYING.
 Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 02110-1301, USA.
 
 */
 
 #if !defined (octave_tree_arg_list_h)
 #define octave_tree_arg_list_h 1
 
-class octave_value_list;
+#include <list>
 
+class octave_value_list;
+class octave_lvalue;
 class tree_expression;
-
 class tree_walker;
 
 #include "str-vec.h"
 
 #include "base-list.h"
 
 // Argument lists.  Used to hold the list of expressions that are the
 // arguments in a function call or index expression.
@@ -60,26 +61,26 @@ public:
       iterator p = begin ();
       tree_expression *retval = *p;
       erase (p);
       return retval;
     }
 
   void append (const element_type& s);
 
-  int nargout_count (void) const;
-
   void mark_as_simple_assign_lhs (void) { simple_assign_lhs = true; }
 
   bool is_simple_assign_lhs (void) { return simple_assign_lhs; }
 
   bool all_elements_are_constant (void) const;
 
   octave_value_list convert_to_const_vector (const octave_value *object = 0);
 
+  std::list<octave_lvalue> lvalue_list (void);
+
   string_vector get_arg_names (void) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   bool list_includes_magic_end;
 
diff --git a/src/pt-assign.cc b/src/pt-assign.cc
--- a/src/pt-assign.cc
+++ b/src/pt-assign.cc
@@ -195,110 +195,149 @@ tree_multi_assignment::rvalue (int)
 {
   octave_value_list retval;
 
   if (error_state)
     return retval;
 
   if (rhs)
     {
-      int n_out = lhs->nargout_count ();
+      std::list<octave_lvalue> lvalue_list = lhs->lvalue_list ();
 
       if (error_state)
 	return retval;
 
+      int n_out = 0;
+
+      for (std::list<octave_lvalue>::const_iterator p = lvalue_list.begin ();
+	   p != lvalue_list.end ();
+	   p++)
+	n_out += p->numel ();
+
       octave_value_list rhs_val = rhs->rvalue (n_out);
 
       if (error_state)
 	return retval;
 
       if (rhs_val.empty ())
 	{
-	  error ("value on right hand side of assignment is undefined");
-	  eval_error ();
-	  return retval;
+	  if (n_out > 0)
+	    {
+	      error ("value on right hand side of assignment is undefined");
+	      eval_error ();
+	      return retval;
+	    }
 	}
       else
 	{
-	  int k = 0;
+	  octave_idx_type k = 0;
 
-	  int n = rhs_val.length ();
+	  octave_idx_type n = rhs_val.length ();
 
 	  if (n == 1)
 	    {
 	      octave_value tmp = rhs_val(0);
 
 	      if (tmp.is_cs_list ())
 		{
 		  error ("invalid assignment of comma-separated list");
 		  eval_error ();
 		  return retval;
 		}
 	    }
 
 	  retval.resize (n, octave_value ());
 
-	  for (tree_argument_list::iterator p = lhs->begin ();
-	       p != lhs->end ();
+	  tree_argument_list::iterator q = lhs->begin ();
+
+	  for (std::list<octave_lvalue>::iterator p = lvalue_list.begin ();
+	       p != lvalue_list.end ();
 	       p++)
 	    {
-	      tree_expression *lhs_elt = *p;
+	      tree_expression *lhs_elt = *q++;
+
+	      octave_lvalue ult = *p;
+
+	      octave_idx_type nel = ult.numel ();
 
-	      if (lhs_elt)
+	      if (nel > 1)
 		{
-		  octave_lvalue ult = lhs_elt->lvalue ();
+		  if (k + nel <= n)
+		    {
+		      if (etype == octave_value::op_asn_eq)
+			{
+			  octave_value_list ovl (nel, octave_value ());
+
+			  for (octave_idx_type j = 0; j < nel; j++)
+			    ovl(j) = rhs_val(k+j);
+
+			  ult.assign (etype, octave_value (ovl, true));
 
-		  if (error_state)
-		    {
-		      eval_error ();
-		      break;
+			  if (! error_state)
+			    {
+			      for (octave_idx_type j = 0; j < nel; j++)
+				retval(k+j) = rhs_val(k+j);
+
+			      k += nel;
+			    }
+			}
+		      else
+			{
+			  std::string op = octave_value::assign_op_as_string (etype);
+			  error ("operator %s unsupported for comma-separated list assignment",
+				 op.c_str ());
+			}
 		    }
-		  else if (k < n)
+		  else
+		    error ("some elements undefined in return list");
+		}
+	      else
+		{
+		  if (k < n)
 		    {
 		      ult.assign (etype, rhs_val(k));
 
 		      if (! error_state)
 			{
 			  if (etype == octave_value::op_asn_eq)
 			    retval(k) = rhs_val(k);
 			  else
 			    retval(k) = ult.value ();
+
+			  k++;
 			}
 		    }
 		  else
 		    error ("element number %d undefined in return list", k+1);
+		}
 
-		  if (error_state)
-		    {
-		      eval_error ();
-		      break;
-		    }
-		  else if (print_result ())
-		    {
-		      // We clear any index here so that we can get
-		      // the new value of the referenced object below,
-		      // instead of the indexed value (which should be
-		      // the same as the right hand side value).
+	      if (error_state)
+		{
+		  eval_error ();
+		  break;
+		}
+	      else if (print_result ())
+		{
+		  // We clear any index here so that we can get
+		  // the new value of the referenced object below,
+		  // instead of the indexed value (which should be
+		  // the same as the right hand side value).
 
-		      ult.clear_index ();
+		  ult.clear_index ();
 
-		      octave_value lhs_val = ult.value ();
+		  octave_value lhs_val = ult.value ();
 
-		      if (! error_state)
-			lhs_val.print_with_name (octave_stdout,
-						 lhs_elt->name ());
-		    }
+		  if (! error_state)
+		    lhs_val.print_with_name (octave_stdout,
+					     lhs_elt->name ());
 		}
-	      else
-		eval_error ();
 
 	      if (error_state)
 		break;
 
-	      k++;
 	    }
 	}
     }
   else
     eval_error ();
 
   return retval;
 }
diff --git a/src/pt-idx.cc b/src/pt-idx.cc
--- a/src/pt-idx.cc
+++ b/src/pt-idx.cc
@@ -422,17 +422,57 @@ tree_index_expression::lvalue (void)
 
 	  switch (type[i])
 	    {
 	    case '(':
 	      idx.push_back (make_value_list (*p_args, *p_arg_nm, &tmp));
 	      break;
 
 	    case '{':
-	      idx.push_back (make_value_list (*p_args, *p_arg_nm, &tmp));
+	      {
+		octave_value_list tidx
+		  = make_value_list (*p_args, *p_arg_nm, &tmp);
+
+		idx.push_back (tidx);
+
+		if (i == n-1)
+		  {
+		    // Last indexing element.  Will this result in a
+		    // comma-separated list?
+
+		    if (tidx.has_magic_colon ())
+		      {
+			octave_value_list tmp_list
+			  = first_retval_object.subsref (type, idx, 1);
+
+			if (! error_state)
+			  {
+			    octave_value val = tmp_list(0);
+
+			    if (val.is_cs_list ())
+			      retval.numel (val.numel ());
+			  }
+		      }
+		    else
+		      {
+			octave_idx_type nel = 1;
+
+			octave_idx_type nidx = tidx.length ();
+
+			for (octave_idx_type j = 0; j < nidx; j++)
+			  {
+			    octave_value val = tidx(j);
+
+			    nel *= val.numel ();
+			  }
+
+			retval.numel (nel);
+		      }
+		  }
+	      }
 	      break;
 
 	    case '.':
 	      {
 		idx.push_back (octave_value (get_struct_index (p_arg_nm, p_dyn_field)));
 
 		if (error_state)
 		  eval_error ();
