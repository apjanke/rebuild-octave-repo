# HG changeset patch
# User Rik <rik@octave.org>
# Date 1501173905 25200
#      Thu Jul 27 09:45:05 2017 -0700
# Node ID 2fdc65c031b594c6aa2681c7e3351c4d91f3c314
# Parent  9648436433774b828650738d14d04fe86cbcd480
Add break or continue statements to prevent implicit fall-through in case statements.

* Figure.cc (eventNotifyAfter): Add break to QEvent::ChildAdded and
Qevent::ChiledRemoved cases.

* load-save.cc (glob_pattern_p): Add continue statement to '\\' case.

* __init_fltk__.cc (handle): Add break to FL_MOUSEWHEEL case.

* Array.cc (nth_element): Add break to idx_vector::class_range case.

diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -761,24 +761,26 @@ namespace QtHandles
                 if (dynamic_cast<QChildEvent *> (xevent)->child
                     ()->isWidgetType())
                   {
                     gh_manager::auto_lock lock;
                     update (figure::properties::ID_TOOLBAR);
 
                     enableMouseTracking ();
                   }
+                break;
 
               case QEvent::ChildRemoved:
                 if (dynamic_cast<QChildEvent *> (xevent)->child
                     ()->isWidgetType())
                   {
                     gh_manager::auto_lock lock;
                     update (figure::properties::ID_TOOLBAR);
                   }
+                break;
 
               default:
                 break;
               }
           }
         else if (watched == m_menuBar)
           {
             switch (xevent->type ())
diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -896,16 +896,17 @@ glob_pattern_p (const std::string& patte
         case ']':
           if (open)
             return true;
           continue;
 
         case '\\':
           if (i == len - 1)
             return false;
+          continue;
 
         default:
           continue;
         }
     }
 
   return false;
 }
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -1775,16 +1775,18 @@ private:
                     // FIXME: should we only zoom about point for 2D plots?
 
                     ap.zoom_about_point ("both", x1, y1, factor, false);
                     mark_modified ();
                     return 1;
                   }
               }
 
+              break;
+
             case FL_RELEASE:
               if (! m_fp.get_windowbuttonupfcn ().isempty ())
                 {
                   set_currentpoint (Fl::event_x (), Fl::event_y () - menu_dy ());
                   m_fp.execute_windowbuttonupfcn ();
                 }
 
               if ((Fl::event_button () == 1) && Fl::event_clicks ())
diff --git a/liboctave/array/Array.cc b/liboctave/array/Array.cc
--- a/liboctave/array/Array.cc
+++ b/liboctave/array/Array.cc
@@ -2345,16 +2345,17 @@ Array<T>::nth_element (const idx_vector&
             lo = n(0);
           }
         else if (inc == -1)
           {
             mode = DESCENDING;
             lo = ns - 1 - n(0);
           }
       }
+      break;
     case idx_vector::class_vector:
       // This case resolves bug #51329, a fallback to allow the given index
       // to be a sequential vector instead of the typical scalar or range
       if (n(1) - n(0) == 1)
         {
           mode = ASCENDING;
           lo = n(0);
         }
