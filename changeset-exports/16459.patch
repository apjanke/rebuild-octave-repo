# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365349929 14400
#      Sun Apr 07 11:52:09 2013 -0400
# Node ID cbc39a3d0c42d3ce57dd47018aa276af867e830c
# Parent  a3513fc13cdb877a543cab8bcdf19ccda657f502
improve encapsulation of workspace window object

* workspace-view.h, workspace-view.cc
(workspace_view::handle_visibility_changed): Delete.
(workspace_view::workspace_view): Set status tip.
Don't connect workspace_view::visibilityChanged signal to
workspace_view::handle_visibility_changed.
(workspace_view::connect_visibility_changed, workspace_view::focus,
workspace_view::handle_visibility): New functions.
* main-window.h, main-window.cc (main_window::workspace_window):
Rename from _workspace_view.  Change all uses.
(main_window::main_window): Initialize it.
(main_window::focus_workspace, main_window::handle_workspace_visible):
Delete.
(main_window::connect_visibility_changed):
Call workspace_window->connect_visibility_changed.
(main_window::construct): Don't create _workspace_view.
Connect workspace_action::triggered directly to workspace_window::focus.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -68,43 +68,43 @@ create_default_editor (QWidget *p)
 main_window::main_window (QWidget *p)
   : QMainWindow (p),
     _workspace_model (new workspace_model ()),
     status_bar (new QStatusBar ()),
     command_window (new terminal_dock_widget (this)),
     history_window (new history_dock_widget (this)),
     file_browser_window (new files_dock_widget (this)),
     doc_browser_window (new documentation_dock_widget (this)),
-    editor_window (create_default_editor (this))
+    editor_window (create_default_editor (this)),
+    workspace_window (new workspace_view (this))
 {
   // We have to set up all our windows, before we finally launch octave.
   construct ();
 }
 
 main_window::~main_window (void)
 {
   delete _workspace_model;
   delete status_bar;
   delete command_window;
   delete history_window;
   delete file_browser_window;
   delete doc_browser_window;
   delete editor_window;
+  delete workspace_window;
 
   // Clean up all dynamically created objects to ensure they are
   // deleted before this main_window is.  Otherwise, some will be
   // attached to a non-existent parent.
 
   if (_octave_qt_event_listener)
     delete _octave_qt_event_listener;
 
   octave_link::connect_link (0);
   delete _octave_qt_link;
-
-  delete _workspace_view;
 }
 
 void
 main_window::focus_command_window (void)
 {
   command_window->focus ();
 }
 
@@ -273,17 +273,17 @@ void
 main_window::reset_windows ()
 {
   // TODO: Implement.
 }
 
 void
 main_window::update_workspace (void)
 {
-  _workspace_view->model_changed ();
+  workspace_window->model_changed ();
 }
 
 void
 main_window::change_directory (const QString& dir)
 {
   // Remove existing entry, if any, then add new directory at top and
   // mark it as the current directory.  Finally, update the file list
   // widget.
@@ -348,38 +348,16 @@ main_window::accept_directory_line_edit 
 
   int index = _current_directory_combo_box->findText (dir);
 
   if (index < 0)
     set_current_working_directory (dir);
 }
 
 void
-main_window::focus_workspace (void)
-{
-  if (!_workspace_view->isVisible ())
-    {
-      _workspace_view->setVisible (true);
-    }
-
-  _workspace_view->setFocus ();
-  _workspace_view->activateWindow ();
-  _workspace_view->raise ();
-}
-
-
-void
-main_window::handle_workspace_visible (bool visible)
-{
-  // if changed to visible and widget is not floating
-  if (visible && !_workspace_view->isFloating ())
-    focus_workspace ();
-}
-
-void
 main_window::handle_enter_debugger (void)
 {
   setWindowTitle ("Octave (Debugging)");
 
   _debug_continue->setEnabled (true);
   _debug_step_into->setEnabled (true);
   _debug_step_over->setEnabled (true);
   _debug_step_out->setEnabled (true);
@@ -538,37 +516,31 @@ main_window::connect_visibility_changed 
 {
   command_window->connect_visibility_changed ();
   history_window->connect_visibility_changed ();
   file_browser_window->connect_visibility_changed ();
   doc_browser_window->connect_visibility_changed ();
 #ifdef HAVE_QSCINTILLA
   editor_window->connect_visibility_changed ();
 #endif
-
-  connect (_workspace_view, SIGNAL (visibilityChanged (bool)),
-           this, SLOT (handle_workspace_visible (bool)));
+  workspace_window->connect_visibility_changed ();
 }
 
 
 // Main subroutine of the constructor
 void
 main_window::construct (void)
 {
   _closing = false;   // flag for editor files when closed
   setWindowIcon (QIcon (":/actions/icons/logo.png"));
 
-  // Setup dockable widgets and the status bar.
-  _workspace_view           = new workspace_view (this);
-
-  _workspace_view->setModel (_workspace_model);
-  _workspace_view->setStatusTip (tr ("View the variables in the active workspace."));
+  workspace_window->setModel (_workspace_model);
 
   connect (_workspace_model, SIGNAL (model_changed ()),
-           _workspace_view, SLOT (model_changed ()));
+           workspace_window, SLOT (model_changed ()));
 
   // Create and set the central widget.  QMainWindow takes ownership of
   // the widget (pointer) so there is no need to delete the object upon
   // destroying this main_window.
 
   QWidget *dummyWidget = new QWidget ();
   dummyWidget->setObjectName ("CentralDummyWidget");
   dummyWidget->resize (10, 10);
@@ -597,17 +569,17 @@ main_window::construct (void)
   tabifyDockWidget (command_window, doc_browser_window);
 
 #ifdef HAVE_QSCINTILLA
   addDockWidget (Qt::RightDockWidgetArea, editor_window);
   tabifyDockWidget (command_window, editor_window);
 #endif
 
   addDockWidget (Qt::LeftDockWidgetArea, file_browser_window);
-  addDockWidget (Qt::LeftDockWidgetArea, _workspace_view);
+  addDockWidget (Qt::LeftDockWidgetArea, workspace_window);
   addDockWidget (Qt::LeftDockWidgetArea, history_window);
 
   int win_x = QApplication::desktop()->width();
   int win_y = QApplication::desktop()->height();
 
   if (win_x > 960)
     win_x = 960;
 
@@ -1028,19 +1000,19 @@ main_window::construct_window_menu (QMen
 
   connect (show_command_window_action, SIGNAL (toggled (bool)),
            command_window, SLOT (setVisible (bool)));
 
   connect (command_window, SIGNAL (active_changed (bool)),
            show_command_window_action, SLOT (setChecked (bool)));
 
   connect (show_workspace_action, SIGNAL (toggled (bool)),
-           _workspace_view, SLOT (setVisible (bool)));
+           workspace_window, SLOT (setVisible (bool)));
 
-  connect (_workspace_view, SIGNAL (active_changed (bool)),
+  connect (workspace_window, SIGNAL (active_changed (bool)),
            show_workspace_action, SLOT (setChecked (bool)));
 
   connect (show_history_action, SIGNAL (toggled (bool)),
            history_window, SLOT (setVisible (bool)));
 
   connect (history_window, SIGNAL (active_changed (bool)),
            show_history_action, SLOT (setChecked (bool)));
 
@@ -1063,17 +1035,17 @@ main_window::construct_window_menu (QMen
 
   connect (doc_browser_window, SIGNAL (active_changed (bool)),
            show_documentation_action, SLOT (setChecked (bool)));
 
   connect (command_window_action, SIGNAL (triggered ()),
            command_window, SLOT (focus ()));
 
   connect (workspace_action, SIGNAL (triggered ()),
-           this, SLOT (focus_workspace ()));
+           workspace_window, SLOT (focus ()));
 
   connect (history_action, SIGNAL (triggered ()),
            history_window, SLOT (focus ()));
 
   connect (file_browser_action, SIGNAL (triggered ()),
            file_browser_window, SLOT (focus ()));
 
   connect (editor_action, SIGNAL (triggered ()),
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -99,19 +99,16 @@ public slots:
   void change_directory (const QString& dir);
   void browse_for_directory (void);
   void set_current_working_directory (const QString& dir);
   void change_directory_up (void);
   void accept_directory_line_edit (void);
 
   void handle_command_double_clicked (const QString& command);
 
-  void focus_workspace (void);
-  void handle_workspace_visible (bool);
-
   void handle_enter_debugger (void);
   void handle_exit_debugger (void);
   void debug_continue (void);
   void debug_step_into (void);
   void debug_step_over (void);
   void debug_step_out (void);
   void debug_quit (void);
 
@@ -179,16 +176,17 @@ private:
   QStatusBar *status_bar;
 
   // Subwindows.
   terminal_dock_widget *command_window;
   history_dock_widget *history_window;
   files_dock_widget *file_browser_window;
   documentation_dock_widget *doc_browser_window;
   file_editor_interface *editor_window;
+  workspace_view *workspace_window;
 
   QMenu *_debug_menu;
 
   QAction *_debug_continue;
   QAction *_debug_step_into;
   QAction *_debug_step_over;
   QAction *_debug_step_out;
   QAction *_debug_quit;
@@ -197,19 +195,16 @@ private:
   QAction *_open_action;
 
   QAction *_cut_action;
   QAction *_copy_action;
   QAction *_paste_action;
   QAction *_undo_action;
   QAction *_redo_action;
 
-  // Dock widgets.
-  workspace_view *_workspace_view;
-
   // Toolbars.
   QComboBox *_current_directory_combo_box;
   static const int current_directory_width = 300;
   static const int current_directory_max_visible = 16;
   static const int current_directory_max_count = 16;
   QLineEdit *_current_directory_line_edit;
 
   octave_qt_event_listener *_octave_qt_event_listener;
diff --git a/libgui/src/workspace-view.cc b/libgui/src/workspace-view.cc
--- a/libgui/src/workspace-view.cc
+++ b/libgui/src/workspace-view.cc
@@ -32,16 +32,17 @@ along with Octave; see the file COPYING.
 #include <QPushButton>
 
 workspace_view::workspace_view (QWidget *p)
   : QDockWidget (p)
 {
   setObjectName ("WorkspaceView");
   setWindowIcon (QIcon(":/actions/icons/logo.png"));
   setWindowTitle (tr ("Workspace"));
+  setStatusTip (tr ("View the variables in the active workspace."));
 
   view = new QTreeView (this);            // Create a new tree view.
   view->setHeaderHidden (false);          // Do not show header columns.
   view->setAlternatingRowColors (true);   // Activate alternating row colors.
   view->setAnimated (false);              // Deactivate animations because of strange glitches.
   view->setTextElideMode (Qt::ElideRight);// Elide text to the right side of the cells.
   view->setWordWrap (false);              // No wordwrapping in cells.
 
@@ -66,21 +67,19 @@ workspace_view::workspace_view (QWidget 
   _explicit_collapse.global     = settings->value ("workspaceview/global_collapsed", false).toBool ();;
   _explicit_collapse.persistent = settings->value ("workspaceview/persistent_collapsed", false).toBool ();;
 
   // Initialize column order and width of the workspace
   
   view->header ()->restoreState (settings->value("workspaceview/column_state").toByteArray ());
 
   // Connect signals and slots.
-  connect (this, SIGNAL (visibilityChanged (bool)),
-           this, SLOT(handle_visibility_changed (bool)));
-
   connect (view, SIGNAL (collapsed (QModelIndex)),
            this, SLOT (collapse_requested (QModelIndex)));
+
   connect (view, SIGNAL (expanded (QModelIndex)),
            this, SLOT (expand_requested (QModelIndex)));
 
   connect (view, SIGNAL (doubleClicked (QModelIndex)),
            this, SLOT (item_double_clicked (QModelIndex)));
 
   // topLevelChanged is emitted when floating property changes (floating = true)
   connect (this, SIGNAL (topLevelChanged(bool)), this, SLOT(top_level_changed(bool)));
@@ -93,20 +92,20 @@ workspace_view::~workspace_view ()
   settings->setValue("workspaceview/local_collapsed", _explicit_collapse.local);
   settings->setValue("workspaceview/global_collapsed", _explicit_collapse.global);
   settings->setValue("workspaceview/persistent_collapsed", _explicit_collapse.persistent);
   settings->setValue("workspaceview/column_state", view->header ()->saveState ());
   settings->sync ();
 }
 
 void
-workspace_view::handle_visibility_changed (bool visible)
+workspace_view::connect_visibility_changed (void)
 {
-  if (visible)
-    emit active_changed (true);
+  connect (this, SIGNAL (visibilityChanged (bool)),
+           this, SLOT (handle_visibility (bool)));
 }
 
 void
 workspace_view::model_changed ()
 {
   QAbstractItemModel *m = view->model ();
 
   dynamic_cast<workspace_model *> (m)->update_workspace_callback ();
@@ -222,8 +221,27 @@ void
 workspace_view::top_level_changed (bool floating)
 {
   if(floating)
     {
       setWindowFlags(Qt::Window);  // make a window from the widget when floating
       show();                      // make it visible again since setWindowFlags hides it
     }
 }
+
+void
+workspace_view::focus (void)
+{
+  if (! isVisible ())
+    setVisible (true);
+
+  setFocus ();
+  activateWindow ();
+  raise ();
+}
+
+void
+workspace_view::handle_visibility (bool visible)
+{
+  // if changed to visible and widget is not floating
+  if (visible && ! isFloating ())
+    focus ();
+}
diff --git a/libgui/src/workspace-view.h b/libgui/src/workspace-view.h
--- a/libgui/src/workspace-view.h
+++ b/libgui/src/workspace-view.h
@@ -27,30 +27,40 @@ along with Octave; see the file COPYING.
 #include <QTreeView>
 #include <QSemaphore>
 
 #include "workspace-model.h"
 
 class workspace_view : public QDockWidget
 {
   Q_OBJECT
-  public:
+
+public:
+
   workspace_view (QWidget * parent = 0);
+
   ~workspace_view ();
 
+  void connect_visibility_changed (void);
+
 public:
 
   void setModel (workspace_model *model) { view->setModel (model); }
 
 public slots:
-  void handle_visibility_changed (bool visible);
+
   void model_changed ();
+
   /** Slot when floating property changes */
   void top_level_changed (bool floating);
 
+  void focus (void);
+
+  void handle_visibility (bool visible);
+
 signals:
   /** Custom signal that tells if a user has clicke away that dock widget. */
   void active_changed (bool active);
 
 protected:
   void closeEvent (QCloseEvent *event);
 
 protected slots:
