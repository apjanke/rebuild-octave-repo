# HG changeset patch
# User jwe
# Date 1113506386 0
#      Thu Apr 14 19:19:46 2005 +0000
# Node ID 25c12c80ccc3de1d5ab44fb6d388955cf4945ea8
# Parent  bd32f770c09ab9eeca96c7bd651ee9aa6a1f37e4
[project @ 2005-04-14 19:19:45 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,27 @@
+2005-04-14  John W. Eaton  <jwe@octave.org>
+
+	* pt-mat.cc (Vwarn_string_concat): New static variable.
+	(symbols_of_pt_mat): DEFVAR it.
+	(warn_string_concat): New function.
+	(maybe_warn_string_concat): New function.
+	(tree_matrix::rvalue): If all args are single quoted strings,
+	create a single quoted string object.  If all args are strings
+	(any type), create a double quoted string object.  If a mixture of
+	string types, maybe warn.
+	(class tm_row_const, class tm_row_const_rep, class tm_const):
+	Note whether all values are double or single quoted strings.
+
+	* ov.h (octave_value::is_dq_string): New function.
+
+2005-04-13  John W. Eaton  <jwe@octave.org>
+
+	* strfns.cc (Fchar): Create sq_string objects here.
+
 2005-04-12  John W. Eaton  <jwe@octave.org>
 
 	* file-io.cc (Ffprintf, Fprintf, Fsprintf):
 	Pass octave_value to octave_stream::printf for FMT.
 	(Fscanf, Fsscanf): Likewise, for octave_stream::scanf and
 	octave_stream::oscanf.
 
 	* oct-stream.cc, oct-stream.h (octave_stream::printf,
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -426,16 +426,19 @@ public:
     { return rep->is_char_matrix (); }
 
   virtual bool is_string (void) const
     { return rep->is_string (); }
 
   virtual bool is_sq_string (void) const
     { return rep->is_sq_string (); }
 
+  bool is_dq_string (void) const
+    { return rep->is_string () && ! rep->is_sq_string (); }
+
   virtual bool is_range (void) const
     { return rep->is_range (); }
 
   virtual bool is_map (void) const
     { return rep->is_map (); }
 
   virtual bool is_stream (void) const
     { return rep->is_stream (); }
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -39,16 +39,19 @@ Software Foundation, 59 Temple Place - S
 #include "variables.h"
 
 // If TRUE, print a warning message for empty elements in a matrix list.
 static bool Vwarn_empty_list_elements;
 
 // The character to fill with when creating string arrays.
 char Vstring_fill_char = ' ';
 
+// Warn if concatenating double and single quoted strings.
+char Vwarn_string_concat = true;
+
 // General matrices.  This list type is much more work to handle than
 // constant matrices, but it allows us to construct matrices from
 // other matrices, variables, and functions.
 
 // But first, some internal classes that make our job much easier.
 
 class
 tm_row_const
@@ -56,33 +59,34 @@ tm_row_const
 private:
 
   class
   tm_row_const_rep : public octave_base_list<octave_value>
   {
   public:
 
     tm_row_const_rep (void)
-      : count (1), dv (),
-	all_str (false), some_str (false), is_cmplx (false),
-	all_mt (true), ok (false) { }
+      : count (1), dv (), all_str (false),
+	all_sq_str (false), all_dq_str (false),
+	some_str (false), is_cmplx (false), all_mt (true), ok (false) { }
 
     tm_row_const_rep (const tree_argument_list& row)
-      : count (1), dv (),
-	all_str (false), some_str (false), is_cmplx (false),
-	all_mt (true), ok (false)
+      : count (1), dv (), all_str (false), all_sq_str (false),
+	some_str (false), is_cmplx (false), all_mt (true), ok (false)
     { init (row); }
 
     ~tm_row_const_rep (void) { }
 
     int count;
 
     dim_vector dv;
 
     bool all_str;
+    bool all_sq_str;
+    bool all_dq_str;
     bool some_str;
     bool is_cmplx;
     bool all_mt;
 
     bool ok;
 
     bool do_init_element (tree_expression *, const octave_value&, bool&);
 
@@ -144,16 +148,18 @@ public:
   { return (rep->dv.length () > 0 ? rep->dv(0) : 0); }
 
   octave_idx_type cols (void)
   { return (rep->dv.length () > 1 ? rep->dv(1) : 0); }
 
   dim_vector dims (void) { return rep->dv; }
 
   bool all_strings_p (void) const { return rep->all_str; }
+  bool all_sq_strings_p (void) const { return rep->all_sq_str; }
+  bool all_dq_strings_p (void) const { return rep->all_dq_str; }
   bool some_strings_p (void) const { return rep->some_str; }
   bool complex_p (void) const { return rep->is_cmplx; }
   bool all_empty_p (void) const { return rep->all_mt; }
 
   operator bool () const { return (rep && rep->ok); }
 
   iterator begin (void) { return rep->begin (); }
   const_iterator begin (void) const { return rep->begin (); }
@@ -235,29 +241,37 @@ tm_row_const::tm_row_const_rep::do_init_
     eval_warning ("empty matrix found in matrix list",
 		  elt->line (), elt->column ());
 
   append (val);
 
   if (all_str && ! val.is_string ())
     all_str = false;
 
+  if (all_sq_str && ! val.is_sq_string ())
+    all_sq_str = false;
+
+  if (all_dq_str && ! val.is_dq_string ())
+    all_dq_str = false;
+
   if (! some_str && val.is_string ())
     some_str = true;
 
   if (! is_cmplx && val.is_complex_type ())
     is_cmplx = true;
 
   return true;
 }
 
 void
 tm_row_const::tm_row_const_rep::init (const tree_argument_list& row)
 {
   all_str = true;
+  all_sq_str = true;
+  all_dq_str = true;
 
   bool first_elem = true;
 
   for (tree_argument_list::const_iterator p = row.begin ();
        p != row.end ();
        p++)
     {
       tree_expression *elt = *p;
@@ -322,39 +336,43 @@ tm_row_const::tm_row_const_rep::eval_war
 }
 
 class
 tm_const : public octave_base_list<tm_row_const>
 {
 public:
 
   tm_const (const tree_matrix& tm)
-    : dv (), all_str (false), some_str (false), is_cmplx (false),
-      all_mt (true), ok (false)
+    : dv (), all_str (false), all_sq_str (false), all_dq_str (false),
+      some_str (false), is_cmplx (false), all_mt (true), ok (false)
       { init (tm); }
 
   ~tm_const (void) { }
 
   octave_idx_type rows (void) const { return (dv.length () > 0 ? dv.elem (0) : 0); }
   octave_idx_type cols (void) const { return (dv.length () > 1 ? dv.elem (1) : 0); }
 
   dim_vector dims (void) const { return dv; }
 
   bool all_strings_p (void) const { return all_str; }
+  bool all_sq_strings_p (void) const { return all_sq_str; }
+  bool all_dq_strings_p (void) const { return all_dq_str; }
   bool some_strings_p (void) const { return some_str; }
   bool complex_p (void) const { return is_cmplx; }
   bool all_empty_p (void) const { return all_mt; }
 
   operator bool () const { return ok; }
 
 private:
 
   dim_vector dv;
 
   bool all_str;
+  bool all_sq_str;
+  bool all_dq_str;
   bool some_str;
   bool is_cmplx;
   bool all_mt;
 
   bool ok;
 
   tm_const (void);
 
@@ -364,16 +382,18 @@ private:
 
   void init (const tree_matrix& tm);
 };
 
 void
 tm_const::init (const tree_matrix& tm)
 {
   all_str = true;
+  all_sq_str = true;
+  all_dq_str = true;
 
   bool first_elem = true;
 
   // Just eval and figure out if what we have is complex or all
   // strings.  We can't check columns until we know that this is a
   // numeric matrix -- collections of strings can have elements of
   // different lengths.
 
@@ -383,16 +403,22 @@ tm_const::init (const tree_matrix& tm)
 
       tm_row_const tmp (*elt);
 
       if (tmp)
 	{
 	  if (all_str && ! tmp.all_strings_p ())
 	    all_str = false;
 
+	  if (all_sq_str && ! tmp.all_sq_strings_p ())
+	    all_sq_str = false;
+
+	  if (all_dq_str && ! tmp.all_dq_strings_p ())
+	    all_dq_str = false;
+
 	  if (! some_str && tmp.some_strings_p ())
 	    some_str = true;
 
 	  if (! is_cmplx && tmp.complex_p ())
 	    is_cmplx = true;
 
 	  if (all_mt && ! tmp.all_empty_p ())
 	    all_mt = false;
@@ -537,31 +563,42 @@ tree_matrix::rvalue (int nargout)
   if (nargout > 1)
     error ("invalid number of output arguments for matrix list");
   else
     retval = rvalue ();
 
   return retval;
 }
 
+static void
+maybe_warn_string_concat (bool all_dq_strings_p, bool all_sq_strings_p)
+{
+  if (Vwarn_string_concat && ! (all_dq_strings_p || all_sq_strings_p))
+    ::warning ("concatenation of different character string types may have unintended consequences");
+}
+
 octave_value
 tree_matrix::rvalue (void)
 {
   octave_value retval;
 
   bool all_strings_p = false;
+  bool all_sq_strings_p = false;
+  bool all_dq_strings_p = false;
   bool all_empty_p = false;
   bool frc_str_conv = false;
 
   tm_const tmp (*this);
 
   if (tmp)
     {
       dim_vector dv = tmp.dims ();
       all_strings_p = tmp.all_strings_p ();
+      all_sq_strings_p = tmp.all_sq_strings_p ();
+      all_dq_strings_p = tmp.all_dq_strings_p ();
       all_empty_p = tmp.all_empty_p ();
       frc_str_conv = tmp.some_strings_p ();
 
       // XXX FIXME XX
       // The previous version of this code obtained the return type and 
       // initialized an array of the correct type. However the return type
       // is now built-up from the return types of do_cat_op. Should we special
       // case the situation where there are only NDArray and ComplexNDArray
@@ -581,20 +618,27 @@ tree_matrix::rvalue (void)
       // We might also start with a empty octave_value using
       //    ctmp = octave_value_typeinfo::lookup_type
       //          (tmp.begin() -> begin() -> type_name());
       // and then directly resize. However, for some types there might be
       // some additional setup needed, and so this should be avoided.
 
       octave_value ctmp;
       if (all_strings_p)
-	if (all_empty_p)
-	  ctmp = octave_value (charNDArray (), true);
-	else
-	  ctmp = octave_value (charNDArray (dv, Vstring_fill_char), true);
+	{
+	  char type = all_sq_strings_p ? '\'' : '"';
+
+	  maybe_warn_string_concat (all_dq_strings_p, all_sq_strings_p);
+
+	  if (all_empty_p)
+	    ctmp = octave_value (charNDArray (), true, type);
+	  else
+	    ctmp = octave_value (charNDArray (dv, Vstring_fill_char),
+				 true, type);
+	}
       else
 	{
 	  // Find the first non-empty object
 	  for (tm_const::iterator p = tmp.begin (); p != tmp.end (); p++)
 	    {
 	      tm_row_const row = *p;
 	      for (tm_row_const::iterator q = row.begin (); 
 		   q != row.end (); q++)
@@ -653,16 +697,24 @@ static int
 warn_empty_list_elements (void)
 {
   Vwarn_empty_list_elements = check_preference ("warn_empty_list_elements");
 
   return 0;
 }
 
 static int
+warn_string_concat (void)
+{
+  Vwarn_string_concat = check_preference ("warn_string_concat");
+
+  return 0;
+}
+
+static int
 string_fill_char (void)
 {
   int status = 0;
 
   std::string s = builtin_string_variable ("string_fill_char");
 
   switch (s.length ())
     {
@@ -713,15 +765,23 @@ warning when an empty matrix is found in
 @example\n\
 a = [1, [], 3, [], 5]\n\
 @end example\n\
 \n\
 @noindent\n\
 The default value is 0.\n\
 @end defvr");
 
+  DEFVAR (warn_string_concat, true, warn_string_concat,
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} warn_string_concat\n\
+If the value of @code{warn_string_concat} is nonzero, print a\n\
+warning when concatenating a mixture of double and single quoted strings.\n\
+The default value is 1.\n\
+@end defvr");
+
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/strfns.cc b/src/strfns.cc
--- a/src/strfns.cc
+++ b/src/strfns.cc
@@ -63,17 +63,17 @@ The returned values are padded with blan
 of the string array have the same length.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
-    retval = args(0).convert_to_str (true, true);
+    retval = args(0).convert_to_str (true, true, '\'');
   else if (nargin > 1)
     {
       int n_elts = 0;
 
       int max_len = 0;
 
       for (int i = 0; i < nargin; i++)
 	{
@@ -110,17 +110,17 @@ of the string array have the same length
 
 	      if (max_len > t_len)
 		t += std::string (max_len - t_len, ' ');
 
 	      result[k++] = t;
 	    }
 	}
 
-      retval = result;
+      retval = octave_value (result, '\'');
     }
   else
     print_usage ("char");
 
   return retval;
 }
 
 DEFUN (ischar, args, ,
