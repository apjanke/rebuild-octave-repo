# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1288830056 25200
#      Wed Nov 03 17:20:56 2010 -0700
# Node ID 4cb1522e4d0fe0da4897e75173e7be0ad680d04f
# Parent  0a8e554494c9d30b5ac1ddae4265403f72679d00
Use function handle as input to cellfun,
rather than quoted function name or anonymous function wrapper.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2010-11-03  Rik  <octave@nomad.inbox5.com>
+
+	* general/common_size.m, miscellaneous/private/__xzip__.m, 
+	  miscellaneous/what.m, plot/pareto.m, plot/private/__patch__.m:
+	  Use function handle as input to cellfun rather than quoted function
+	  name or anonymous function wrapper.
+
 2010-11-03  Konstantinos Poulios  <logari81@googlemail.com>
 
 	* plot/axis.m: Making 'axis equal' equivalent to 'daspect([1,1,1])'.
 
 2010-11-03  Konstantinos Poulios  <logari81@googlemail.com>
 
 	* plot/private/__actual_axis_position__.m: Remove temporary
 	calculation of plotboxratio for the gnuplot backend when
diff --git a/scripts/general/common_size.m b/scripts/general/common_size.m
--- a/scripts/general/common_size.m
+++ b/scripts/general/common_size.m
@@ -48,17 +48,17 @@
 
 function [errorcode, varargout] = common_size (varargin)
 
   if (nargin < 2)
     error ("common_size: only makes sense if nargin >= 2");
   endif
 
   ## Find scalar args.
-  nscal = cellfun ("numel", varargin) != 1;
+  nscal = cellfun (@numel, varargin) != 1;
 
   i = find (nscal, 1);
 
   if (isempty (i))
     errorcode = 0;
     varargout = varargin;
   else
     match = cellfun (@size_equal, varargin, varargin(i));
diff --git a/scripts/miscellaneous/private/__xzip__.m b/scripts/miscellaneous/private/__xzip__.m
--- a/scripts/miscellaneous/private/__xzip__.m
+++ b/scripts/miscellaneous/private/__xzip__.m
@@ -110,17 +110,17 @@ function entries = __xzip__ (commandname
   endif
 
 endfunction
 
 function [d, f] = myfileparts (files)
   [d, f, ext] = cellfun (@(x) fileparts (x), files, "UniformOutput", false);
   f = cellfun (@(x, y) sprintf ("%s%s", x, y), f, ext,
                "UniformOutput", false); 
-  idx = cellfun (@(x) isdir (x), files);
+  idx = cellfun (@isdir, files);
   d(idx) = "";
   f(idx) = files(idx);
 endfunction
 
 ## FIXME -- reinstate these tests if we invent a way to test private
 ## functions directly.
 ##
 ## %!error <extension has to be a string with finite length> 
diff --git a/scripts/miscellaneous/what.m b/scripts/miscellaneous/what.m
--- a/scripts/miscellaneous/what.m
+++ b/scripts/miscellaneous/what.m
@@ -86,17 +86,17 @@ function ret = what (d)
     ret = w;
   endif
 endfunction
 
 function __display_filenames__ (msg, p, f)
   if (length (f) > 0)
     printf ("%s %s:\n\n", msg, p)
   
-    maxlen = max (cellfun (@(x) length (x), f));
+    maxlen = max (cellfun (@length, f));
     ncols = max (1, floor (terminal_size()(2) / (maxlen + 3)));
     fmt = "";
     for i = 1: ncols
       fmt = sprintf ("%s   %%-%ds", fmt, maxlen);
     endfor
     fmt = [fmt, "\n"];
 
     nrows = ceil (length (f) / ncols); 
diff --git a/scripts/plot/pareto.m b/scripts/plot/pareto.m
--- a/scripts/plot/pareto.m
+++ b/scripts/plot/pareto.m
@@ -61,21 +61,21 @@ function h = pareto (varargin)
 
   x = varargin {1}(:).';
   if (nargin == 2)
     y = varargin {2}(:).';
     if (! iscell (y))
       if (ischar (y))
         y = cellstr (y);
       else
-        y = cellfun (@(x) num2str (x), num2cell (y), "UniformOutput", false);
+        y = cellfun (@num2str, num2cell (y), "UniformOutput", false);
       endif
     endif
   else
-    y = cellfun (@(x) int2str (x), num2cell (1 : numel(x)), 
+    y = cellfun (@int2str, num2cell (1 : numel(x)), 
                  "UniformOutput", false);
   endif
 
   [x, idx] = sort (x, "descend");
   y = y (idx);
   cdf = cumsum (x);
   maxcdf = max(cdf);
   cdf = cdf ./ maxcdf;
diff --git a/scripts/plot/private/__patch__.m b/scripts/plot/private/__patch__.m
--- a/scripts/plot/private/__patch__.m
+++ b/scripts/plot/private/__patch__.m
@@ -166,35 +166,35 @@ function args = delfields(args, flds)
   args (idx) = [];
 endfunction
 
 function args = setdata (args)
   args = delfields (args, {"xdata", "ydata", "zdata", "cdata"});
   ## Remove the readonly fields as well
   args = delfields (args, {"type", "uicontextmenu"});
   nargs = length (args);
-  idx = find (cellfun (@(x) strcmpi (x, "faces"), args))(end) + 1;
+  idx = find (strcmpi (args, "faces"), 1, "last") + 1;
   if (idx > nargs)
     faces = [];
   else
     faces = args {idx};
   endif
-  idx = find (cellfun (@(x) strcmpi (x, "vertices"), args))(end) + 1;
+  idx = find (strcmpi (args, "vertices"), 1, "last") + 1;
   if (idx > nargs)
     vert = [];
   else
     vert = args {idx};
   endif
-  idx = find (cellfun (@(x) strcmpi (x, "facevertexcdata"), args), 1, "last") + 1;
+  idx = find (strcmpi (args, "facevertexcdata"), 1, "last") + 1;
   if (isempty(idx) || idx > nargs)
     fvc = [];
   else
     fvc = args {idx};
   endif
-  idx = find (cellfun (@(x) strcmpi (x, "facecolor"), args), 1, "last") + 1;
+  idx = find (strcmpi (args, "facecolor"), 1, "last") + 1;
   if (isempty(idx) || idx > nargs)
     if (!isempty (fvc))
       fc = "flat";
     else
       fc = [0, 1, 0];
     endif
     args = {"facecolor", fc, args{:}};
   else
@@ -233,41 +233,41 @@ function args = setdata (args)
   args = {"xdata", x, "ydata", y, "zdata", z, "cdata", c, args{:}};
 endfunction
 
 function args = setvertexdata (args)
   args = delfields (args, {"vertices", "faces", "facevertexcdata"});
   ## Remove the readonly fields as well
   args = delfields (args, {"type", "uicontextmenu"});
   nargs = length (args);
-  idx = find (cellfun (@(x) strcmpi (x, "xdata"), args))(end) + 1;
+  idx = find (strcmpi (args, "xdata"), 1, "last") + 1;
   if (idx > nargs)
     x = [];
   else
     x = args {idx};
   endif
-  idx = find (cellfun (@(x) strcmpi (x, "ydata"), args))(end) + 1;
+  idx = find (strcmpi (args, "ydata"), 1, "last") + 1;
   if (idx > nargs)
     y = [];
   else
     y = args {idx};
   endif
-  idx = find (cellfun (@(x) strcmpi (x, "zdata"), args))(end) + 1;
+  idx = find (strcmpi (args, "zdata"), 1, "last") + 1;
   if (isempty(idx) || idx > nargs)
     z = [];
   else
     z = args {idx};
   endif
-  idx = find (cellfun (@(x) strcmpi (x, "cdata"), args))(end) + 1;
+  idx = find (strcmpi (args, "cdata"), 1, "last") + 1;
   if (isempty(idx) || idx > nargs)
     c = [];
   else
     c = args {idx};
   endif
-  idx = find (cellfun (@(x) strcmpi (x, "facecolor"), args))(end) + 1;
+  idx = find (strcmpi (args, "facecolor"), 1, "last") + 1;
   if (isempty(idx) || idx > nargs)
     if (!isempty (c))
       fc = "flat";
     else
       fc = [0, 1, 0];
     endif
     args = {"facecolor", fc, args{:}};
   else
