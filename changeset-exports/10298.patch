# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1265823496 18000
#      Wed Feb 10 12:38:16 2010 -0500
# Node ID 2be9b7e71f32a85dff78a177b17b96a0484d5a48
# Parent  ed88ea0367168fb14ab9090d2521c553f3edc6c9
__magick_read__.cc: style fixes

diff --git a/src/DLD-FUNCTIONS/__magick_read__.cc b/src/DLD-FUNCTIONS/__magick_read__.cc
--- a/src/DLD-FUNCTIONS/__magick_read__.cc
+++ b/src/DLD-FUNCTIONS/__magick_read__.cc
@@ -217,18 +217,17 @@ read_images (const std::vector<Magick::I
         im = T (idim);
         P *vec = im.fortran_vec ();
 
         for (int frame = 0; frame < nframes; frame++)
           {
             const Magick::PixelPacket *pix
               = imvec[frameidx(frame)].getConstPixels (0, 0, columns, rows);
 
-            P *rbuf;
-            rbuf = vec;
+            P *rbuf = vec;
             for (int y = 0; y < rows; y++)
               {
                 for (int x = 0; x < columns; x++)
                   {
                     *rbuf = pix->red / divisor;
                     pix++;
                     rbuf += rows;
                   }
@@ -247,19 +246,18 @@ read_images (const std::vector<Magick::I
         im = T (idim);
         P *vec = im.fortran_vec ();
 
         for (int frame = 0; frame < nframes; frame++)
           {
             const Magick::PixelPacket *pix
               = imvec[frameidx(frame)].getConstPixels (0, 0, columns, rows);
 
-            P *rbuf, *obuf;
-            rbuf = vec;
-            obuf = vec + rows * columns;
+            P *rbuf = vec;
+            P *obuf = vec + rows * columns;
             for (int y = 0; y < rows; y++)
               {
                 for (int x = 0; x < columns; x++)
                   {
                     *rbuf = pix->red / divisor;
                     *obuf = pix->opacity / divisor;
                     pix++;
                     rbuf += rows;
@@ -282,20 +280,19 @@ read_images (const std::vector<Magick::I
         im = T (idim);
         P *vec = im.fortran_vec ();
 
         for (int frame = 0; frame < nframes; frame++)
           {
             const Magick::PixelPacket *pix
               = imvec[frameidx(frame)].getConstPixels (0, 0, columns, rows);
 
-            P *rbuf, *gbuf, *bbuf;
-            rbuf = vec;
-            gbuf = vec + rows * columns;
-            bbuf = vec + rows * columns * 2;
+            P *rbuf = vec;
+            P *gbuf = vec + rows * columns;
+            P *bbuf = vec + rows * columns * 2;
             for (int y = 0; y < rows; y++)
               {
                 for (int x = 0; x < columns; x++)
                   {
                     *rbuf = pix->red / divisor;
                     *gbuf = pix->green / divisor;
                     *bbuf = pix->blue / divisor;
                     pix++;
@@ -322,21 +319,20 @@ read_images (const std::vector<Magick::I
         im = T (idim);
         P *vec = im.fortran_vec ();
 
         for (int frame = 0; frame < nframes; frame++)
           {
             const Magick::PixelPacket *pix
               = imvec[frameidx(frame)].getConstPixels (0, 0, columns, rows);
 
-            P *rbuf, *gbuf, *bbuf, *obuf;
-            rbuf = vec;
-            gbuf = vec + rows * columns;
-            bbuf = vec + rows * columns * 2;
-            obuf = vec + rows * columns * 3;
+            P *rbuf = vec;
+            P *gbuf = vec + rows * columns;
+            P *bbuf = vec + rows * columns * 2;
+            P *obuf = vec + rows * columns * 3;
             for (int y = 0; y < rows; y++)
               {
                 for (int x = 0; x < columns; x++)
                   {
                     *rbuf = pix->red / divisor;
                     *gbuf = pix->green / divisor;
                     *bbuf = pix->blue / divisor;
                     *obuf = pix->opacity / divisor;
