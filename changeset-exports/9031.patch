# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1237520856 25200
#      Thu Mar 19 20:47:36 2009 -0700
# Node ID 1052a66078cf7e4821b02ead63df4d5e88d1645c
# Parent  cda45dc441f7b8055ff922bfa6872b768278dbc9
Documentation cleanup of top-level Octave directory (READMEs, INSTALL)

Spellcheck README and INSTALL files.
Start all sentences with two spaces after period for readability.

diff --git a/CHECKLIST b/CHECKLIST
--- a/CHECKLIST
+++ b/CHECKLIST
@@ -1,20 +1,18 @@
 Things to do before making a release:
 
   * Ask testers for the type(s) of machines they are using.
 
   * Update the version number in src/version.h.
 
-  * Update the version number in doc/refcard.tex.
+  * Update the version number in doc/refcard/refcard.tex.
 
   * Add a `Version M.N.P released.' line to the ChangeLog.
 
   * Update the NEWS file.
 
   * Check the README file.
 
-  * Create a new Announce.M.N.P file for the current release.
-
   * Run autoconf, autoheader, and configure before making tar files.
 
   * Update the NEWS and README.octave files in the anonymous ftp
     directory.
diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -12,17 +12,17 @@ Summary of important user-visible change
            plot (x, y, "ydatasource", "y");
            for i = 1 : 100
              pause(0.1)
              y = sin (x + 0.1 * i);
              refreshdata();
            endfor
 
     works as expected.  This capability has be used to introduce
-    stem-series, bar-series, etc.  objects for better Matlab
+    stem-series, bar-series, etc., objects for better Matlab
     compatibility.
 
  ** New graphics functions:
 
       addlistener         diffuse     ezsurfc     plotmatrix
       addproperty         ezcontour   findall     refresh
       allchild            ezcontourf  gcbf        refreshdata
       available_backends  ezmesh      gcbo        specular
@@ -190,17 +190,17 @@ Summary of important user-visible change
     The underlying code used for indexing of arrays has been
     completely rewritten and so the indexing of arrays is now
     significantly faster.
 
  ** Improved memory management.
 
     Octave will now attempt to share data in some cases where previously
     a copy would be made, such as certain array slicing operations or
-    conversions between cells, structs and cs-lists. This usually reduces
+    conversions between cells, structs and cs-lists.  This usually reduces
     both time and memory consumption.
 
  ** Improved performance for reduction operations.
 
     The performance of the sum, prod, sumsq, cumsum, cumprod, any, all,
     max and min functions has been significantly improved.
 
  ** 64-bit integer arithmetic.
@@ -225,17 +225,17 @@ Summary of important user-visible change
  ** Improvements to fsolve.
 
     The fsolve function now accepts an option structure argument (see
     also the optimset function).  The INFO values returned from fsolve
     have changed to be compatible with Matlab's fsolve function.
     Additionally, fsolve is now able to solve overdetermined systems,
     complex-differentiable complex systems, systems with a sparse
     jacobian and can work in single precision if given single precision
-    inputs. It can also be called recursively.
+    inputs.  It can also be called recursively.
 
  ** Improvements to the norm function.
 
     The norm function is now able to compute row or column norms of a
     matrix in a single call, as well as general matrix p-norms.
 
  ** New functions for computing some eigenvalues or singular values.
 
diff --git a/PROJECTS b/PROJECTS
--- a/PROJECTS
+++ b/PROJECTS
@@ -75,22 +75,22 @@ Sparse Matrices:
       for i=1:r
         tmp = foo (i,j);
         if (tmp != 0.)
           sm (i,j) = tmp;
         endif
       endfor
     endfor
 
-    actually make sense. Otherwise the above will cause massive amounts
+    actually make sense.  Otherwise the above will cause massive amounts
     of memory reallocation.
 
     The fact is that this doesn't make sense in any case as the assign
-    function makes another copy of the sparse matrix. So although spalloc
-    might easily be made to have the correct behaviour, the first assign
+    function makes another copy of the sparse matrix.  So although spalloc
+    might easily be made to have the correct behavior, the first assign
     will cause the matrix to be resized!  There seems to be no simple
     way to treat this but a complete rewrite of the sparse assignment
     functions...
 
   * Other missing Functions
       - symmmd      Superseded by symamd
       - colmmd      Superseded by colamd
       - cholinc
@@ -404,39 +404,39 @@ Miscellaneous:
        * I have to split the data
        * Octave has a virtual memory on its own and I don't have to
          worry about the splitting.
 
       If I split the data, then my easily programmed processing
       programs will become hard to program.
 
       If possible, I would like to have the virtual memory system in
-      Octave i.e. the all big files, the user see as one big array or
+      Octave i.e., the all big files, the user see as one big array or
       such.  There could be several user selectable models to do the
       virtual memory depending on what kind of data the user have (1d,
       2d) and in what order they are processed (stream or random
       access).
 
     Perhaps this can be done entirely with a library of M-files.
 
   * An interface to gdb.
 
     Michael Smolsky <fnsiguc@weizmann.weizmann.ac.il> wrote:
 
       I was thinking about a tool, which could be very useful for me
-      in my numerical simulation work. It is an interconnection
-      between gdb and octave. We are often managing very large arrays
+      in my numerical simulation work.  It is an interconnection
+      between gdb and octave.  We are often managing very large arrays
       of data in our fortran or c codes, which might be studied with
-      the help of octave at the algorithm development stages. Assume
+      the help of octave at the algorithm development stages.  Assume
       you're coding, say, wave equation.  And want to debug the
-      code. It would be great to pick some array from the memory of
-      the code you're develloping, fft it and see the image as a
-      log-log plot of the spectral density. I'm facing similar
+      code.  It would be great to pick some array from the memory of
+      the code you're developing, fft it and see the image as a
+      log-log plot of the spectral density.  I'm facing similar
       problems now.  To avoid high c-development cost, I develop in
-      matlab/octave, and then rewrite into c. It might be so much
+      matlab/octave, and then rewrite into c.  It might be so much
       easier, if I could off-load a c array right from the debugger
       into octave, study it, and, perhaps, change some [many] values
       with a convenient matlab/octave syntax, similar to
       a(:,50:250)=zeros(100,200), and then store it back into the
       memory of my c code.
 
   * Add a definition to lgrind so that it supports Octave.
     (See http://www.tex.ac.uk/tex-archive/support/lgrind/ for more
diff --git a/README b/README
--- a/README
+++ b/README
@@ -29,22 +29,22 @@ http://www.octave.org/download.html.  Th
 may be found on Savannah (http://savannah.gnu.org).
 
 Installation and Bugs
 ---------------------
 
 Octave requires approximately 1.5GB of disk storage to unpack and
 compile from source (significantly less if you don't compile with
 debugging symbols).  Once installed, Octave requires approximately
-450GB of disk space (again, considerably less if you don't build
+450MB of disk space (again, considerably less if you don't build
 shared libraries or the binaries and libraries do not include
 debugging symbols).
 
 To compile Octave, you will need a recent version of GNU Make.  You
-will also need a recent version of g++ or other ANSI C++ compiler.
+will also need a recent version of g++ or another ANSI C++ compiler.
 You will also need a Fortran 77 compiler or f2c.  If you use f2c, you
 will need a script like fort77 that works like a normal Fortran
 compiler by combining f2c with your C compiler in a single script.
 
 YOU MUST HAVE GNU MAKE TO COMPILE OCTAVE.  Octave's Makefiles use
 features of GNU Make that are not present in other versions of make.
 GNU Make is very portable and easy to install.
 
@@ -55,17 +55,17 @@ installing Octave from a binary distribu
 The file BUGS explains the recommended procedure for reporting bugs.
 
 Documentation
 -------------
 
 Octave's manual has been revised for version 3.0, but it is lagging a
 bit behind the development of the software.  In particular, there is
 currently no complete documentation of the C++ class libraries.  If
-you notice ommissions or inconsistencies, please report them as bugs
+you notice omissions or inconsistencies, please report them as bugs
 to bug@octave.org.  Specific suggestions for ways to improve Octave
 and its documentation are always welcome.  Reports with patches are
 even more welcome.
 
 Additional Information
 ----------------------
 
 Up to date information about Octave is available on the WWW at the
diff --git a/README.Cray b/README.Cray
--- a/README.Cray
+++ b/README.Cray
@@ -7,23 +7,23 @@ tried.
 
       configure \
 	F77=ftn FFLAGS="-dp -O0" \
 	CC=cc CFLAGS=-O0 CXX=CC \
 	CXXFLAGS="-O0 -h new_for_init -h nomessage=76" \
 	--without-blas --without-lapack --disable-readline
 
     The last to arguments tell Octave to use the reference blas and
-    lapack implmentation in Fortran and to not require the readline
+    lapack implementation in Fortran and to not require the readline
     library.  If you have the readline library, you can omit the last
     option.  You can also try to use a vendor library for LAPACK and
     BLAS, but how are those compiled?  You will need a version of the
     library that is compiled for 64-bit double precision values, but
     that uses the D and Z names (I'm not sure that this is the case
-    with the Cray librararies).
+    with the Cray libraries).
 
     I'm using -O0 in an effort to speed up compilation.  If you want
     an optimized version and have time to wait for the build to
     complete, then use whatever -On option you like.
 
   * Edit the generated Makeconf file and make sure that you have
 
       FFLAGS = -dp -O0
diff --git a/README.Cygwin b/README.Cygwin
--- a/README.Cygwin
+++ b/README.Cygwin
@@ -5,17 +5,17 @@ The latest previous version available wa
 It is possible to build Octave on Windows systems with Cygwin,
 but with standard gcc-3.4.4-3 compiler there are some performance
 problems related to the way C++ exception handling is implemented.
 This is a known problem with a long history so it is suggested to use
 version gcc-4.3.2-1 or later.
 
 Binary version 3.0.2-2 is built with gcc-4.3.2-1
  
-Current cygwin octvave mantainer : 
+Current cygwin octvave maintainer : 
 	Marco Atzeri
 	http://matzeri.altervista.org
 
 An obsolete version of Octave (2.1.73) is part of the normal net
 distribution of Cygwin, available from http://www.cygwin.com.  Check
 the package list in Cygwin's setup.exe installer if you would like to
 try using it.  However, 2.1.73 is unsupported and we STRONGLY
 recommended that you use a more recent version of Octave.
diff --git a/README.MSVC b/README.MSVC
--- a/README.MSVC
+++ b/README.MSVC
@@ -261,19 +261,19 @@ should work around most problems:
 
   * if pdftex fails in doc/refcard with the same error as above, edit
   the Makefile and replace "pdftex" calls with "pdfetex"
 
 
 3. Installation
 ===============
 
-The compiled Octave is relocatable.   This means that whetever
+The compiled Octave is relocatable.  This means that whatever
 installation dir you chose at configure time, you can move the whole
-installation directory to another location without any problem.   Octave
+installation directory to another location without any problem.  Octave
 should still run OK.
 
 
 4. Notes
 ========
 
 This procedure has been successfully tested under Windows XP with
 Visual Studio 2005 Express edition, Platform SDK for Windows Server
diff --git a/README.kpathsea b/README.kpathsea
--- a/README.kpathsea
+++ b/README.kpathsea
@@ -55,48 +55,48 @@ easily.  For example, in Bourne-compatib
   It is sometimes helpful to run the standalone Kpsewhich utility
 (*note Invoking kpsewhich::.), instead of the original program.
 
   In any case, you can *not* use the *names* below; you must always use
 somebody's numbers.  (Sorry.)  To set more than one option, just sum
 the corresponding numbers.
 
 `KPSE_DEBUG_STAT (1)'
-     Report `stat'(2) calls. This is useful for verifying that your
+     Report `stat'(2) calls.  This is useful for verifying that your
      directory structure is not forcing Kpathsea to do many additional
      file tests (*note Slow path searching::., and *note Subdirectory
-     expansion::.). If you are using an up-to-date `ls-R' database
+     expansion::.).  If you are using an up-to-date `ls-R' database
      (*note Filename database::.), this should produce no output unless
      a nonexistent file that must exist is searched for.
 
 `KPSE_DEBUG_HASH (2)'
      Report lookups in all hash tables: `ls-R' and `aliases' (*note
      Filename database::.); font aliases (*note Fontmap::.); and config
      file values (*note Config files::.).  Useful when expected values
      are not being found, e.g.., file searches are looking at the disk
      instead of using `ls-R'.
 
 `KPSE_DEBUG_FOPEN (4)'
-     Report file openings and closings. Especially useful when your
+     Report file openings and closings.  Especially useful when your
      system's file table is full, for seeing which files have been
-     opened but never closed. In case you want to set breakpoints in a
+     opened but never closed.  In case you want to set breakpoints in a
      debugger: this works by redefining `fopen' (`fclose') to be
      `kpse_fopen_trace' (`kpse_fclose_trace').
 
 `KPSE_DEBUG_PATHS (8)'
      Report general path information for each file type Kpathsea is
-     asked to search. This is useful when you are trying to track down
+     asked to search.  This is useful when you are trying to track down
      how a particular path got defined--from `texmf.cnf', `config.ps',
      an environment variable, the compile-time default, etc.  This is
      the contents of the `kpse_format_info_type' structure defined in
      `tex-file.h'.
 
 `KPSE_DEBUG_EXPAND (16)'
      Report the directory list corresponding to each path element
-     Kpathsea searches. This is only relevant when Kpathsea searches
+     Kpathsea searches.  This is only relevant when Kpathsea searches
      the disk, since `ls-R' searches don't look through directory lists
      in this way.
 
 `KPSE_DEBUG_SEARCH (32)'
      Report on each file search: the name of the file searched for, the
      path searched in, whether or not the file must exist (when drivers
      search for `cmr10.vf', it need not exist), and whether or not we
      are collecting all occurrences of the file in the path (as with,
@@ -122,35 +122,35 @@ the corresponding numbers.
      subsidiary commands run by the programs.
 
 `MAKETEX_FINE_DEBUG (1024)'
      When the optional `mktex' programs are used, this will print
      additional debugging info from functions internal to these
      programs.
 
   Debugging output from Kpathsea is always written to standard error,
-and begins with the string `kdebug:'. (Except for hash table buckets,
+and begins with the string `kdebug:'.  (Except for hash table buckets,
 which just start with the number, but you can only get that output
-running under a debugger. See comments at the `hash_summary_only'
+running under a debugger.  See comments at the `hash_summary_only'
 variable in `kpathsea/db.c'.)
 
 Logging
 -------
 
   Kpathsea can record the time and filename found for each successful
 search.  This may be useful in finding good candidates for deletion when
 your filesystem is full, or in discovering usage patterns at your site.
 
   To do this, define the environment or config file variable
 `TEXMFLOG'.  The value is the name of the file to append the
 information to.  The file is created if it doesn't exist, and appended
 to if it does.
 
   Each successful search turns into one line in the log file: two words
-separated by a space. The first word is the time of the search, as the
+separated by a space.  The first word is the time of the search, as the
 integer number of seconds since "the epoch", i.e., UTC midnight 1
 January 1970 (more precisely, the result of the `time' system call).
 The second word is the filename.
 
   For example, after `setenv TEXMFLOG /tmp/log', running Dvips on
 `story.dvi' appends the following lines:
 
      774455887 /usr/local/share/texmf/dvips/config.ps
diff --git a/README.snapshots b/README.snapshots
--- a/README.snapshots
+++ b/README.snapshots
@@ -69,17 +69,17 @@ How to get the snapshots
 The current plan is to provide a full snapshot every week or so.  For
 now, diffs from previous versions will not be available.  The files
 will be available via anonymous ftp from ftp.octave.org, in the
 directory /private/octave in the form of a tar files compressed with
 GNU gzip.  You can ftp gzip from ftp.octave.org in the directory
 /pub/gnu.
 
 Even though the snapshots are available in a public place, we ask that
-recipients not widely publicise the availability of the snapshots.
+recipients not widely publicize the availability of the snapshots.
 The motivation for this request is not to hoard them, but to avoid the
 situation where the general Octave user base naively attempts to use
 the snapshots, has trouble with them, complains publicly, and the
 reputation of Octave declines because of a perception of instability
 or lack of quality control.
 
 
 Octave test suite
diff --git a/ROADMAP b/ROADMAP
--- a/ROADMAP
+++ b/ROADMAP
@@ -59,17 +59,17 @@ Octave's source files.
     strings        * character string manipulation
     testfun        * unit testing
     time           * time and date functions
 
   src           -- the interpreter itself
 
   test          -- tests for the interpreter
     config         * configuration files for DejaGnu
-    octave.test    * subdirectories contianing actual tests are here
+    octave.test    * subdirectories containing actual tests are here
 
 
 John W. Eaton
 jwe@bevo.che.wisc.edu
 University of Wisconsin-Madison
 Department of Chemical & Biological Engineering
 
 Last updated: Wed, 31 Oct 2007 16:44:04 EDT
diff --git a/doc/interpreter/install.txi b/doc/interpreter/install.txi
--- a/doc/interpreter/install.txi
+++ b/doc/interpreter/install.txi
@@ -29,18 +29,19 @@
 
 This file documents the installation of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation.
 
 @strong{Note:} This file is automatically generated from
-@file{doc/interpreter/install.txi} in the Octave sources, so to make
-changes to this documentation file, change that source file.
+@file{doc/interpreter/install.txi} in the Octave sources.  To update
+the documentation make changes to the .txi source file rather than this
+derived file.
 
 @node Installation
 @chapter Installing Octave
 @end ifset
 
 @cindex installing Octave
 
 Here is the procedure for installing Octave from scratch on a Unix
@@ -152,44 +153,45 @@ libraries that cause problems for some r
 @item --without-framework-carbon
 Don't use framework Carbon headers, libraries and specific source code
 for compilation even if the configure test succeeds (the default value
 is @code{--with-framework-carbon}). This is a platform specific configure
 option for Mac systems.
 
 @item --without-framework-opengl
 Don't use framework OpenGL headers, libraries and specific source code
-for compilation even if the configure test succeeds. If this option is
+for compilation even if the configure test succeeds.  If this option is
 given then OpenGL headers and libraries in standard system locations are
-tested (the default value is @code{--with-framework-opengl}). This is a
+tested (the default value is @code{--with-framework-opengl}).  This is a
 platform specific configure option for Mac systems.
 
 @item --help
 Print a summary of the options recognized by the configure script.
 @end table
 
-See the file @file{INSTALL} for more information about the command line
-options used by configure.  That file also contains instructions for
-compiling in a directory other than where the source is located.
+See the file @file{INSTALL} for more general information about the 
+command line options used by configure.  That file also contains 
+instructions for compiling in a directory other than where the source 
+is located.
 
 @item
 Run make.
 
 You will need a recent version of GNU Make.  Modifying Octave's
 makefiles to work with other make programs is probably not worth
 your time.  We recommend you get and compile GNU Make instead.
 
 For plotting, you will need to have gnuplot installed on your system.
 Gnuplot is a command-driven interactive function plotting program.
 Gnuplot is copyrighted, but freely distributable.  The `gnu' in gnuplot
 is a coincidence---it is not related to the GNU project or the FSF in
 any but the most peripheral sense.
 
 To compile Octave, you will need a recent version of GNU Make.  You will
-also need a recent version of @code{g++} or other ANSI C++ compiler. You
+also need a recent version of @code{g++} or other ANSI C++ compiler.  You
 will also need a Fortran 77 compiler or @code{f2c}.  If you use
 @code{f2c}, you will need a script like @code{fort77} that works like a
 normal Fortran compiler by combining @code{f2c} with your C compiler in
 a single script.
 
 If you plan to modify the parser you will also need GNU @code{bison} and
 @code{flex}.  If you modify the documentation, you will need GNU
 Texinfo, along with the patch for the @code{makeinfo} program that is
@@ -197,17 +199,17 @@ distributed with Octave.
 
 GNU Make, @code{gcc}, and @code{libstdc++}, @code{gnuplot},
 @code{bison}, @code{flex}, and Texinfo are all available from many
 anonymous ftp archives.  The primary site is @url{ftp.gnu.org}, but it
 is often very busy.  A list of sites that mirror the software on
 @url{ftp.gnu.org} is available by anonymous ftp from
 @url{ftp://ftp.gnu.org/pub/gnu/GNUinfo/FTP}.
 
-You will need about 925 megabytes of disk storage to work with when
+You will need about 1 gigabyte of disk storage to work with when
 building Octave from source (considerably less if you don't compile with
 debugging symbols).  To do that, use the command
 
 @example
 make CFLAGS=-O CXXFLAGS=-O LDFLAGS=
 @end example
 
 @noindent
@@ -367,17 +369,17 @@ when it should really be something like:
 
 @example
 #define  SIG_IGN  (void (*)(int))1
 @end example
 
 @noindent
 to match the prototype declaration for the @code{signal} function.  This
 change should also be made for the @code{SIG_DFL} and @code{SIG_ERR}
-symbols. It may be necessary to change the definitions in
+symbols.  It may be necessary to change the definitions in
 @file{sys/signal.h} as well.
 
 The @code{gcc} @code{fixincludes} and @code{fixproto} scripts should
 probably fix these problems when @code{gcc} installs its modified set of
 header files, but I don't think that's been done yet.
 
 @strong{You should not change the files in @file{/usr/include}}.  You
 can find the @code{gcc} include directory tree by running the command
