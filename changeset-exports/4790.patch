# HG changeset patch
# User jwe
# Date 1077221718 0
#      Thu Feb 19 20:15:18 2004 +0000
# Node ID 91a84c9bdadb533027eb1921655ad86c2b2e73ad
# Parent  ac4441e16ffaf56736061204902a5aefd810674a
[project @ 2004-02-19 20:15:17 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2004-02-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* plot/figure.m: Also look for GNUTERM in the environment and use
+	that if it is set (for OS X).  From Per Persson <persquare@mac.com>.
+
 2004-02-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* control/base/__stepimp__.m: Only call clearplot if we will be
 	doing multiple plots in the same gnuplot frame.
 
 2004-02-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* control/system/__sysconcat__.m, control/system/__tfl__.m,
diff --git a/scripts/plot/figure.m b/scripts/plot/figure.m
--- a/scripts/plot/figure.m
+++ b/scripts/plot/figure.m
@@ -34,22 +34,26 @@ function f = figure (n)
   if (nargin == 0)
     f = max (figure_list) + 1;
   else
     f = n;
   endif
 
   if (nargin < 2)
     if (gnuplot_has_frames)
-      if (! isempty (getenv ("DISPLAY")))
+      gnuterm = getenv ("GNUTERM");
+      if (isempty (gnuterm) && ! isempty ("DISPLAY"))
+	gnuterm = "x11";
+      endif
+      if (! isempty (gnuterm))
         oneplot ();
         figure_list = union (figure_list, f);
-        eval (sprintf ("gset term x11 %d\n", f));
+        eval (sprintf ("gset term %s %d\n", gnuterm, f));
       else
-        error ("figure: requires X11 and valid DISPLAY");
+        error ("figure: requires GNUTERM (Aqua) or DISPLAY (X11)");
       endif
     else
       error ("figure: gnuplot doesn't appear to support this feature");
     endif
   elseif (rem (nargin, 2) == 0)
     if (! figure_called)
       figure_called = 1;
       warning ("figure: setting figure properties is unsupported");
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,18 +1,24 @@
+2004-02-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* xpow.cc (elem_xpow (const Matrix&, double)):
+	Convert both operands to Complex if any element of A is negative.
+	(elem_xpow (const NDArray&, double)): Likewise.
+
 2004-02-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* load-save.cc (Voctave_core_format): New static_variable.
 	(octave_core_format): New function.
 	(symbols_of_load_save): Add DEFVAR for octave_core_format.
 	(get_save_format): Rename from get_default_save_format.
-	Pass name of format as arg.  New optional arg, default_format.
+	Pass name of format as arg.  New optional arg, fallback_format.
 	Change all uses.
 	(save_user_variables): Use pass Voctave_core_format to
-	get_save_format here.  Pass LS_BINARY as default_format.
+	get_save_format here.  Pass LS_BINARY as fallback_format.
 
 	* sighandlers.cc (my_friendly_exit): New optional arg, save_vars.
 	Only call save_user_variables if save_vars is true.
 	(sigint_handler): If interactive, offer to abort and save
 	workspace after three consecutive interrupts.
 	(sigint_handler, sigpipe_handler, sigfpe_handler):
 	Increment octave_interrupt_handler instead of setting it to 1.
 
diff --git a/src/xpow.cc b/src/xpow.cc
--- a/src/xpow.cc
+++ b/src/xpow.cc
@@ -560,18 +560,24 @@ elem_xpow (const Matrix& a, double b)
 
   if (static_cast<int> (b) != b && a.any_element_is_negative ())
     {
       ComplexMatrix result (nr, nc);
       for (int j = 0; j < nc; j++)
 	for (int i = 0; i < nr; i++)
 	  {
 	    OCTAVE_QUIT;
+      
+	    // XXX FIXME XXX -- avoid apparent GNU libm bug by
+	    // converting A and B to complex instead of just A.
+
 	    Complex atmp (a (i, j));
-	    result (i, j) = pow (atmp, b);
+	    Complex btmp (b);
+
+	    result (i, j) = pow (atmp, btmp);
 	  }
 
       retval = result;
     }
   else
     {
       Matrix result (nr, nc);
       for (int j = 0; j < nc; j++)
@@ -932,18 +938,24 @@ elem_xpow (const NDArray& a, double b)
 
   if (static_cast<int> (b) != b && a.any_element_is_negative ())
     {
       ComplexNDArray result (a.dims ());
 
       for (int i = 0; i < a.length (); i++)
 	{
 	  OCTAVE_QUIT;
-	  Complex atmp (a(i));
-	  result(i) = pow (atmp, b);
+
+	  // XXX FIXME XXX -- avoid apparent GNU libm bug by
+	  // converting A and B to complex instead of just A.
+
+	  Complex atmp (a (i));
+	  Complex btmp (b);
+
+	  result(i) = pow (atmp, btmp);
 	}
 
       retval = result;
     }
   else
     {
       NDArray result (a.dims ());
 
