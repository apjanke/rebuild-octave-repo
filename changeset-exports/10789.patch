# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1279150142 14400
#      Wed Jul 14 19:29:02 2010 -0400
# Node ID 6f640ed5bb931d345d93a811c981bca9c649cec6
# Parent  c69252eb2f2b78e775cfcd5b0a7e8da825379819
__gnuplot_print__.m: Fix broken options.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-07-14  Ben Abbott <bpabbott@mac.com>
+
+	* plot/__gnuplot_print__.m: Fix broken options "-orientation",
+	"-special_flag", "-debug_file", "-tight_flag", and "-printer".
+
 2010-07-14  Rik <octave@nomad.inbox5.com>
 
        * linear-algebra/normest.m: Improve documentation.  Add better input
        validation.  Use same variable names in code as in documentation.
 
 2010-07-14  Marco Caliari  <marco.caliari@univr.it>
 
        * linear-algebra/normest.m: Set the "state" of the random number
diff --git a/scripts/plot/__gnuplot_print__.m b/scripts/plot/__gnuplot_print__.m
--- a/scripts/plot/__gnuplot_print__.m
+++ b/scripts/plot/__gnuplot_print__.m
@@ -226,23 +226,23 @@ function __gnuplot_print__ (varargin)
         options = cstrcat (options, " \"", opts.font, "\"");
       endif
       if (! isempty (opts.fontsize))
         options = cstrcat (options, " ", opts.fontsize);
       endif
 
     elseif (strcmp (dev, "fig"))
       ## XFig
-      options = orientation;
+      options = opts.orientation;
       if (opts.use_color >= 0)
         options = " color";
       else
         options = " mono";
       endif
-      options = cstrcat (options, " ", special_flag);
+      options = cstrcat (options, " ", opts.special_flag);
       if (! isempty (opts.fontsize))
         options = cstrcat (options, " fontsize ", opts.fontsize);
       endif
 
     elseif (strcmp (dev, "emf"))
       ## Enhanced Metafile format
       options = " ";
       if (opts.use_color >= 0)
@@ -365,21 +365,21 @@ function __gnuplot_print__ (varargin)
                sprintf("         papersize = %.2f, %.2f\n", p.papersize),
                sprintf("         paperorientation = \"%s\"\n", p.paperorientation),
                        "         the paperorientation property has been ignored"};
       warning ("%s",msg{:})
       warn_on_inconsistent_orientation = false;
     endif
 
     if (strcmp (termn, "postscript") && ! strncmp (dev, "eps", 3))
-      if (isempty (orientation))
-        orientation = paperorientation;
+      if (isempty (opts.orientation))
+        opts.orientation = paperorientation;
       endif
       ## This is done here to accommodate ghostscript conversion.
-      options = cstrcat (orientation, " ", options);
+      options = cstrcat (opts.orientation, " ", options);
     end
 
     new_terminal = cstrcat (termn, " ", options);
 
     mono = (opts.use_color < 0);
 
     terminals_for_prn = {"postscript", "pdf", "pdfcairo"};
     output_for_printer = any (strncmp (termn, terminals_for_prn, numel(termn)));
@@ -453,17 +453,17 @@ function __gnuplot_print__ (varargin)
            ghostscript_device = "pdfwrite";
          else
            opts.name = cstrcat (tmpnam, ".ps");
            temp_name = cstrcat (tmpnam, ".ps");
            ghostscript_device = "pswrite";
          endif
     endif
       if (opts.debug)
-        drawnow (new_terminal, opts.name, mono, debug_file);
+        drawnow (new_terminal, opts.name, mono, opts.debug_file);
       else
         drawnow (new_terminal, opts.name, mono);
       endif
       if (opts.append_to_file)
         ghostscript_options = "-q -dBATCH -dSAFER -dNOPAUSE";
         command = sprintf ("%s %s -sDEVICE=%s -sOutputFile=%s %s %s -q", ...
                     ghostscript_binary, ghostscript_options, ghostscript_device,  ...
                     temp_name, appended_file_name, opts.name);
@@ -482,17 +482,17 @@ function __gnuplot_print__ (varargin)
         endfor
       endif
       if (opts.use_color < 0)
         convert_mono_to_or_from_color (objs_with_color, color_of_objs, false);
       endif
     end_unwind_protect
 
     if (! isempty (ghostscript_output))
-      if (is_eps_file && tight_flag)
+      if (is_eps_file && opts.tight_flag)
         ## If gnuplot's output is an eps-file then crop at the bounding box.
         fix_eps_bbox (name, ghostscript_binary);
       endif
       ghostscript_options = "-q -dBATCH -dSAFER -dNOPAUSE -dTextAlphaBits=4";
       if (is_eps_file)
         ghostscript_options = sprintf ("%s -dEPSCrop", ghostscript_options);
       endif
       if (isempty (strfind (lower (ghostscript_device), "write")))
@@ -521,20 +521,20 @@ function __gnuplot_print__ (varargin)
       if (isunix ())
         prn_opt = "-l";
       elseif (ispc ())
         prn_opt = "-o l";
       else
         ## FIXME - besides Unix and Windows, what other OS's might be considered.
         prn_opt = "";
       endif
-      if (isempty (printer))
+      if (isempty (opts.printer))
         prn_cmd = sprintf ("lpr %s '%s' 2>&1", prn_opt, printname);
       else
-        prn_cmd = sprintf ("lpr %s -P %s '%s' 2>&1", prn_opt, printer, printname);
+        prn_cmd = sprintf ("lpr %s -P %s '%s' 2>&1", prn_opt, opts.printer, printname);
       endif
       [status, output] = system (prn_cmd);
       if (status != 0)
         disp (output)
         warning ("print.m: printing failed.")
       endif
       [status, output] = unlink (printname);
       if (status != 0)
