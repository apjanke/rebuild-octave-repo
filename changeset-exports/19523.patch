# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1420237418 18000
#      Fri Jan 02 17:23:38 2015 -0500
# Node ID 5802ea7037d4be614e81d8ca79ad16371fedf4cc
# Parent  fc03d6e0d84276074d227f7d4d2b83e242e15030
style fixes for audioplayer and audiorecorder classes

* @audioplayer/__get_properties__.m, @audioplayer/audioplayer.m,
@audioplayer/display.m, @audioplayer/get.m, @audioplayer/isplaying.m,
@audioplayer/pause.m, @audioplayer/play.m,
@audioplayer/playblocking.m, @audioplayer/resume.m,
@audioplayer/set.m, @audioplayer/stop.m, @audioplayer/subsasgn.m,
@audioplayer/subsref.m, @audiorecorder/__get_properties__.m,
@audiorecorder/audiorecorder.m, @audiorecorder/display.m,
@audiorecorder/get.m, @audiorecorder/getaudiodata.m,
@audiorecorder/getplayer.m, @audiorecorder/isrecording.m,
@audiorecorder/pause.m, @audiorecorder/play.m,
@audiorecorder/record.m, @audiorecorder/recordblocking.m,
@audiorecorder/resume.m, @audiorecorder/set.m, @audiorecorder/stop.m,
@audiorecorder/subsasgn.m, @audiorecorder/subsref.m: Style fixes.
Do more basic argument checking.  Use consistent style for error
messages.

diff --git a/scripts/audio/@audioplayer/__get_properties__.m b/scripts/audio/@audioplayer/__get_properties__.m
--- a/scripts/audio/@audioplayer/__get_properties__.m
+++ b/scripts/audio/@audioplayer/__get_properties__.m
@@ -18,16 +18,21 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{properties} =} __get_properties__ (@var{player})
 ## Return a struct containing all named properties of the audioplayer
 ## object @var{player}.
 ## @end deftypefn
 
 function props = __get_properties__ (player)
+
+  if (nargin != 1)
+    print_usage ();
+  endif
+
   if (__player_isplaying__ (struct (player).player))
     running = "on";
   else
     running = "off";
   endif
 
   props = struct ("BitsPerSample",
                   __player_get_nbits__ (struct (player).player),
diff --git a/scripts/audio/@audioplayer/audioplayer.m b/scripts/audio/@audioplayer/audioplayer.m
--- a/scripts/audio/@audioplayer/audioplayer.m
+++ b/scripts/audio/@audioplayer/audioplayer.m
@@ -68,41 +68,42 @@
 ## player = audioplayer (@@callback_sine, 44100);
 ## play (player);
 ## # play for as long as you want
 ## stop (player);
 ## @end group
 ## @end example
 
 function player = audioplayer (varargin)
-  if (nargin < 1 || nargin > 4)
+
+  if (nargin < 1 || nargin > 4
+      || (nargin < 2 && (isa (varargin{1}, "function_handle")
+                         || ischar (varargin{1}))))
     print_usage ();
   endif
-  if ((isa (varargin{1}, "function_handle")
-       || ischar (varargin{1})) && nargin < 2)
-    print_usage ();
-  endif
-  if isa (varargin{1}, "audiorecorder")
-    if nargin == 1
+
+  if (isa (varargin{1}, "audiorecorder"))
+    if (nargin == 1)
       player = getplayer (varargin{1});
-    elseif nargin == 2
+    elseif (nargin == 2)
       recorder = varargin{1};
       data = getaudiodata (recorder);
       player = audioplayer (data, get (recorder, "SampleRate"),
                             get (recorder, "BitsPerSample"), varargin{2});
     else
       print_usage ();
     endif
   else
     if (ischar (varargin{1}))
       varargin{1} = str2func (varargin{1});
     endif
     player.player = __player_audioplayer__ (varargin{:});
     player = class (player, "audioplayer");
   endif
+
 endfunction
 
 %!test
 %! mono = randn (1, 44100) - 0.5;
 %! stereo = randn (2, 44100) - 0.5;
 %! fs = 44100;
 %! player1 = audioplayer (mono, fs);
 %! player2 = audioplayer (stereo, fs);
diff --git a/scripts/audio/@audioplayer/display.m b/scripts/audio/@audioplayer/display.m
--- a/scripts/audio/@audioplayer/display.m
+++ b/scripts/audio/@audioplayer/display.m
@@ -17,10 +17,16 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} display (@var{player})
 ## Display the properties of the audioplayer object @var{player}.
 ## @end deftypefn
 
 function display (player)
+
+  if (nargin != 1)
+    print_usage ();
+  endif
+
   disp (__get_properties__ (player));
+
 endfunction
diff --git a/scripts/audio/@audioplayer/get.m b/scripts/audio/@audioplayer/get.m
--- a/scripts/audio/@audioplayer/get.m
+++ b/scripts/audio/@audioplayer/get.m
@@ -22,28 +22,33 @@
 ## Return the @var{value} of the property identified by @var{name}.
 ## If @var{name} is a cell array return the values of of the properties
 ## identified by the elements of the cell array.  Given only the
 ## player object, return a scalar structure with values of all
 ## properties of @var{player}.  The field names of the structure
 ## correspond to property names.
 ## @end deftypefn
 
-function result = get (varargin)
-  player = varargin{1};
-  properties = __get_properties__ (player);
+function retval = get (varargin)
+
+  if (nargin < 1 || nargin > 2)
+    print_usage ();
+  endif
+
+  properties = __get_properties__ (varargin{1});
+
   if (nargin == 1)
-    result = properties;
+    retval = properties;
   elseif (nargin == 2)
-    if (ischar (varargin{2}))
-      result = getfield (properties, varargin{2});
+    pnames = varargin{2};
+    if (ischar (pnames))
+      retval = getfield (properties, pnames);
+    elseif (iscellstr (pnames))
+      retval = cell (size (pnames));
+      for i = 1:numel (pnames)
+        retval{i} = getfield (properties, pnames{i});
+      endfor
     else
-      result = {};
-      index = 1;
-      for property = varargin{2}
-        result{index} = getfield (properties, char (property));
-        index = index + 1;
-      endfor
+      error ("@audioplayer/get: invalid name argument");
     endif
-  else
-    error ("audioplayer: wrong number of arguments to the get method");
   endif
+
 endfunction
diff --git a/scripts/audio/@audioplayer/isplaying.m b/scripts/audio/@audioplayer/isplaying.m
--- a/scripts/audio/@audioplayer/isplaying.m
+++ b/scripts/audio/@audioplayer/isplaying.m
@@ -18,10 +18,16 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isplaying (@var{player})
 ## Return 1 if the audioplayer object @var{player}is currently playing
 ## back audio and 0 otherwise.
 ## @end deftypefn
 
 function result = isplaying (player)
+
+  if (nargin != 1)
+    print_usage ();
+  endif
+
   result = __player_isplaying__ (struct (player).player);
+
 endfunction
diff --git a/scripts/audio/@audioplayer/pause.m b/scripts/audio/@audioplayer/pause.m
--- a/scripts/audio/@audioplayer/pause.m
+++ b/scripts/audio/@audioplayer/pause.m
@@ -17,10 +17,16 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} pause (@var{player})
 ## Pause the audioplayer @var{player}.
 ## @end deftypefn
 
 function pause (player)
+
+  if (nargin != 1)
+    print_usage ();
+  endif
+
   __player_pause__ (struct (player).player);
+
 endfunction
diff --git a/scripts/audio/@audioplayer/play.m b/scripts/audio/@audioplayer/play.m
--- a/scripts/audio/@audioplayer/play.m
+++ b/scripts/audio/@audioplayer/play.m
@@ -23,13 +23,16 @@
 ## Play audio stored in the audioplayer object @var{player} without blocking.
 ## Given optional argument start, begin playing at @var{start} seconds
 ## in the recording.  Given a two-element vector @var{limits}, begin and
 ## end playing at the number of seconds specified by the elements of the
 ## vector.
 ## @end deftypefn
 
 function play (varargin)
+
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
+
   __player_play__ (struct (varargin{1}).player, varargin{2:end});
+
 endfunction
diff --git a/scripts/audio/@audioplayer/playblocking.m b/scripts/audio/@audioplayer/playblocking.m
--- a/scripts/audio/@audioplayer/playblocking.m
+++ b/scripts/audio/@audioplayer/playblocking.m
@@ -23,13 +23,16 @@
 ## Play audio stored in the audioplayer object @var{player} with blocking.
 ## Given optional argument start, begin playing at @var{start} seconds
 ## in the recording.  Given a two-element vector @var{limits}, begin and
 ## end playing at the number of seconds specified by the elements of the
 ## vector.
 ## @end deftypefn
 
 function playblocking (varargin)
+
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
+
   __player_playblocking__ (struct (varargin{1}).player, varargin{2:end});
+
 endfunction
diff --git a/scripts/audio/@audioplayer/resume.m b/scripts/audio/@audioplayer/resume.m
--- a/scripts/audio/@audioplayer/resume.m
+++ b/scripts/audio/@audioplayer/resume.m
@@ -17,10 +17,16 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} resume (@var{player})
 ## Resume playback for the paused audioplayer object @var{player}.
 ## @end deftypefn
 
 function resume (player)
+
+  if (nargin == 1)
+    print_usage ();
+  endif
+
   __player_resume__ (struct (player).player);
+
 endfunction
diff --git a/scripts/audio/@audioplayer/set.m b/scripts/audio/@audioplayer/set.m
--- a/scripts/audio/@audioplayer/set.m
+++ b/scripts/audio/@audioplayer/set.m
@@ -24,20 +24,23 @@
 ## If @var{name} and @var{value} are cell arrays, set each property to the
 ## corresponding value.  Given a structure of @var{properties} with
 ## fields corresponding to property names, set the value of those
 ## properties to the field values.  Given only the audioplayer object,
 ## return a structure of settable properties.
 ## @end deftypefn
 
 function settable = set (varargin)
+
   if (nargin < 1 || nargin > 3)
     print_usage ();
   endif
+
   player = struct (varargin{1}).player;
+
   if (nargin == 1)
     settable.SampleRate = {};
     settable.Tag = {};
     settable.UserData = {};
   elseif (nargin == 2)
     for [value, property] = varargin{2}
       setproperty (player, property, value);
     endfor
@@ -47,18 +50,19 @@ function settable = set (varargin)
       for property = varargin{2}
         setproperty (player, char (property), varargin{3}{index});
         index = index + 1;
       endfor
     else
       setproperty (player, varargin{2}, varargin{3});
     endif
   else
-    error ("audioplayer: wrong number of arguments to the set method");
+    error ("@audioplayer/set: wrong number of arguments to the set method");
   endif
+
 endfunction
 
 function setproperty (player, property, value)
   switch (property)
     case "SampleRate"
       __player_set_fs__ (player, value);
     case "Tag"
       __player_set_tag__ (player, value);
diff --git a/scripts/audio/@audioplayer/stop.m b/scripts/audio/@audioplayer/stop.m
--- a/scripts/audio/@audioplayer/stop.m
+++ b/scripts/audio/@audioplayer/stop.m
@@ -18,10 +18,16 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} stop (@var{player})
 ## Stop the playback for the audioplayer @var{player} and reset the
 ## relevant variables to their starting values.
 ## @end deftypefn
 
 function stop (player)
+
+  if (nargin != 1)
+    print_usage ();
+  endif
+
   __player_stop__ (struct (player).player);
+
 endfunction
diff --git a/scripts/audio/@audioplayer/subsasgn.m b/scripts/audio/@audioplayer/subsasgn.m
--- a/scripts/audio/@audioplayer/subsasgn.m
+++ b/scripts/audio/@audioplayer/subsasgn.m
@@ -18,19 +18,22 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{value} =} subsasgn (@var{player}, @var{idx}, @var{rhs})
 ## Perform subscripted assignment on the audio player object @var{player}.
 ## Assign the value of @var{rhs} to the player property named by @var{idx}.
 ## @end deftypefn
 
 function value = subsasgn (player, idx, rhs)
+
   if (isempty (idx))
     error ("audioplayer: missing index");
   endif
+
   if (strcmp (idx(1).type, "."))
     field = idx.subs;
     set (player, field, rhs);
     value = player;
   else
-    error ("audioplayer: invalid subscript type");
+    error ("@audioplayer/subsasgn: invalid subscript type");
   endif
+
 endfunction
diff --git a/scripts/audio/@audioplayer/subsref.m b/scripts/audio/@audioplayer/subsref.m
--- a/scripts/audio/@audioplayer/subsref.m
+++ b/scripts/audio/@audioplayer/subsref.m
@@ -18,18 +18,24 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{value} =} subsref (@var{player}, @var{idx})
 ## Perform subscripted selection on the audio player object @var{player}.
 ## Return the player property value named by @var{idx}.
 ## @end deftypefn
 
 function value = subsref (player, idx)
+  if (nargin != 2)
+    print_usage ();
+  endif
+
   if (isempty (idx))
-    error ("audioplayer: missing index");
+    error ("@audioplayer/subsref: missing index");
   endif
+
   if (strcmp (idx(1).type, "."))
     field = idx.subs;
     value = get (player, field);
   else
-    error ("audioplayer: invalid subscript file")
+    error ("@audioplayer/subsref: invalid subscript type")
   endif
+
 endfunction
diff --git a/scripts/audio/@audiorecorder/__get_properties__.m b/scripts/audio/@audiorecorder/__get_properties__.m
--- a/scripts/audio/@audiorecorder/__get_properties__.m
+++ b/scripts/audio/@audiorecorder/__get_properties__.m
@@ -18,16 +18,21 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{properties} =} __get_properties__ (@var{recorder})
 ## Return a struct containing all named properties of the recorder object
 ## @var{recorder}.
 ## @end deftypefn
 
 function props = __get_properties__ (recorder)
+
+  if (nargin != 1)
+    print_usage ();
+  endif
+
   if (__recorder_isrecording__ (struct (recorder).recorder))
     running = "on";
   else
     running = "off";
   endif
 
   props = struct ("BitsPerSample",
                   __recorder_get_nbits__ (struct (recorder).recorder),
diff --git a/scripts/audio/@audiorecorder/audiorecorder.m b/scripts/audio/@audiorecorder/audiorecorder.m
--- a/scripts/audio/@audiorecorder/audiorecorder.m
+++ b/scripts/audio/@audiorecorder/audiorecorder.m
@@ -25,24 +25,28 @@
 ## sample rate.  The optional arguments @var{fs}, @var{nbits},
 ## @var{channels}, and @var{id} specify the sample rate, bit depth,
 ## number of channels and recording device id, respectively.  Device IDs
 ## may be found using the audiodevinfo function.
 ## Given a function handle, use that function to process the audio.
 ## @end deftypefn
 
 function recorder = audiorecorder (varargin)
+
   if (nargin > 5)
     print_usage ();
   endif
+
   if (nargin > 0 && ischar (varargin{1}))
     varargin{1} = str2func (varargin{1});
   endif
+
   recorder.recorder = __recorder_audiorecorder__ (varargin{:});
   recorder = class (recorder, "audiorecorder");
+
 endfunction
 
 %!test
 %! recorder = audiorecorder (44100, 16, 2);
 %! recordblocking (recorder, 1);
 %! data = getaudiodata (recorder, "int16");
 %! assert (strcmp (class (data), "int16"));
 %! data = getaudiodata (recorder, "int8");
diff --git a/scripts/audio/@audiorecorder/display.m b/scripts/audio/@audiorecorder/display.m
--- a/scripts/audio/@audiorecorder/display.m
+++ b/scripts/audio/@audiorecorder/display.m
@@ -17,10 +17,16 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} display (@var{recorder})
 ## Display the properties of the audiorecorder object @var{recorder}.
 ## @end deftypefn
 
 function display (recorder)
+
+  if (nargin != 1)
+    print_usage ();
+  endif
+
   disp (__get_properties__ (recorder));
+
 endfunction
diff --git a/scripts/audio/@audiorecorder/get.m b/scripts/audio/@audiorecorder/get.m
--- a/scripts/audio/@audiorecorder/get.m
+++ b/scripts/audio/@audiorecorder/get.m
@@ -22,28 +22,33 @@
 ## Return the @var{value} of the property identified by @var{name}.
 ## If @var{name} is a cell array, return the values of the properties
 ## corresponding to the elements of the cell array.  Given only the
 ## recorder object, return a scalar structure with values of all
 ## properties of @var{recorder}.  The field names of the structure
 ## correspond to property names.
 ## @end deftypefn
 
-function result = get (varargin)
-  recorder = varargin{1};
-  properties = __get_properties__ (recorder);
+function retval = get (varargin)
+
+  if (nargin < 1 || nargin > 2)
+    print_usage ();
+  endif
+
+  properties = __get_properties__ (varargin{1});
+
   if (nargin == 1)
-    result = properties;
+    retval = properties;
   elseif (nargin == 2)
-    if (ischar (varargin{2}))
-      result = getfield (properties, varargin{2});
+    pnames = varargin{2};
+    if (ischar (pnames))
+      retval = getfield (properties, pnames);
+    elseif (iscellstr (pnames))
+      retval = cell (size (pnames));
+      for i = 1:numel (pnames)
+        retval{i} = getfield (properties, pnames{i});
+      endfor
     else
-      result = {};
-      index = 1;
-      for property = varargin{2}
-        result{index} = getfield (properties, char (property));
-        index = index + 1;
-      endfor
+      error ("@audiorecorder/get: invalid name argument");
     endif
-  else
-    error ("audiorecorder: wrong number of arguments to the get method");
   endif
+
 endfunction
diff --git a/scripts/audio/@audiorecorder/getaudiodata.m b/scripts/audio/@audiorecorder/getaudiodata.m
--- a/scripts/audio/@audiorecorder/getaudiodata.m
+++ b/scripts/audio/@audiorecorder/getaudiodata.m
@@ -22,32 +22,37 @@
 ## Return recorder audio data as a matrix with values between -1.0 and 1.0
 ## and with as many columns as there are channels in the recorder.
 ## Given the optional argument @var{datatype}, convert the recorded data
 ## to the specified type, which may be one of @qcode{"double"},
 ## @qcode{"single"}, @qcode{"int16"}, @qcode{"int8"} or @qcode{"uint8"}.
 ## @end deftypefn
 
 function data = getaudiodata (varargin)
+
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
+
   recorder = varargin{1};
+
   if (nargin == 1)
     data = __recorder_getaudiodata__ (struct (recorder).recorder);
   else
     data = __recorder_getaudiodata__ (struct (recorder).recorder);
     type = varargin{2};
     switch (type)
       case "int16"
         data = int16 (data * (2.0 ^ 15));
       case "int8"
         data = int8 (data * (2.0 ^ 7));
       case "uint8"
         data = uint8 ((data + 1.0) * 0.5 * (2.0 ^ 8 - 1));
     endswitch
   endif
+
   if (get (recorder, "NumberOfChannels") == 2)
     data = data';
   else
     data = data(1,:)';
   endif
+
 endfunction
diff --git a/scripts/audio/@audiorecorder/getplayer.m b/scripts/audio/@audiorecorder/getplayer.m
--- a/scripts/audio/@audiorecorder/getplayer.m
+++ b/scripts/audio/@audiorecorder/getplayer.m
@@ -18,16 +18,19 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{player} =} getplayer (@var{recorder})
 ## Return an audioplayer object with data recorded by the audiorecorder
 ## object @var{recorder}.
 ## @end deftypefn
 
 function player = getplayer (varargin)
+
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
+
   recorder = varargin{1};
   data = getaudiodata (recorder);
   player = audioplayer (data, get (recorder, "SampleRate"),
                         get (recorder, "BitsPerSample"));
+
 endfunction
diff --git a/scripts/audio/@audiorecorder/isrecording.m b/scripts/audio/@audiorecorder/isrecording.m
--- a/scripts/audio/@audiorecorder/isrecording.m
+++ b/scripts/audio/@audiorecorder/isrecording.m
@@ -18,10 +18,16 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isrecording (@var{recorder})
 ## Return 1 if the audiorecorder object @var{recorder} is currently
 ## recording audio and 0 otherwise.
 ## @end deftypefn
 
 function result = isrecording (recorder)
+
+  if (nargin != 1)
+    print_usage ();
+  endif
+
   result = __recorder_isrecording__ (struct (recorder).recorder);
+
 endfunction
diff --git a/scripts/audio/@audiorecorder/pause.m b/scripts/audio/@audiorecorder/pause.m
--- a/scripts/audio/@audiorecorder/pause.m
+++ b/scripts/audio/@audiorecorder/pause.m
@@ -17,10 +17,16 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} pause (@var{recorder})
 ## Pause recording with audiorecorder object @var{recorder}.
 ## @end deftypefn
 
 function pause (recorder)
+
+  if (nargin != 1)
+    print_usage ();
+  endif
+
   __recorder_pause__ (struct (recorder).recorder);
+
 endfunction
diff --git a/scripts/audio/@audiorecorder/play.m b/scripts/audio/@audiorecorder/play.m
--- a/scripts/audio/@audiorecorder/play.m
+++ b/scripts/audio/@audiorecorder/play.m
@@ -23,21 +23,24 @@
 ## Play the audio recorded in @var{recorder} and return a corresponding
 ## audioplayer object.  If the optional argument @var{start} is
 ## provided, begin playing @var{start} seconds in to the recording.
 ## If the optional argument @var{end} is provided, stop playing at
 ## @var{end} seconds in the recording.
 ## @end deftypefn
 
 function player = play (varargin)
+
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
+
   recorder = varargin{1};
   data = getaudiodata (recorder);
   player = audioplayer (data, get (recorder, "SampleRate"),
                         get (recorder, "BitsPerSample"));
   if (nargin == 1)
     play (player);
   else
     play (player, varargin{2});
   endif
+
 endfunction
diff --git a/scripts/audio/@audiorecorder/record.m b/scripts/audio/@audiorecorder/record.m
--- a/scripts/audio/@audiorecorder/record.m
+++ b/scripts/audio/@audiorecorder/record.m
@@ -21,13 +21,16 @@
 ## @deftypefnx {Function File} {} record (@var{recorder}, @var{length})
 ## Record audio without blocking using the audiorecorder object
 ## @var{recorder} until stopped or paused by the @var{stop} or
 ## @var{pause} method.  Given the optional argument @var{length}, record
 ## for @var{length} seconds.
 ## @end deftypefn
 
 function record (varargin)
+
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
+
   __recorder_record__ (struct (varargin{1}).recorder, varargin{2:end});
+
 endfunction
diff --git a/scripts/audio/@audiorecorder/recordblocking.m b/scripts/audio/@audiorecorder/recordblocking.m
--- a/scripts/audio/@audiorecorder/recordblocking.m
+++ b/scripts/audio/@audiorecorder/recordblocking.m
@@ -18,13 +18,16 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} recordblocking (@var{recorder}, @var{length})
 ## Record audio with blocking (synchronous I/O).  You must specify the
 ## length of the recording in seconds.
 ## @end deftypefn
 
 function recordblocking (varargin)
+
   if (nargin != 2)
     print_usage ();
   endif
+
   __recorder_recordblocking__ (struct (varargin{1}).recorder, varargin{2});
+
 endfunction
diff --git a/scripts/audio/@audiorecorder/resume.m b/scripts/audio/@audiorecorder/resume.m
--- a/scripts/audio/@audiorecorder/resume.m
+++ b/scripts/audio/@audiorecorder/resume.m
@@ -17,10 +17,16 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} resume (@var{recorder})
 ## Resume recording with the paused audiorecorder object @var{recorder}.
 ## @end deftypefn
 
 function resume (recorder)
+
+  if (nargin != 1)
+    print_usage ();
+  endif
+
   __recorder_resume__ (struct (recorder).recorder);
+
 endfunction
diff --git a/scripts/audio/@audiorecorder/set.m b/scripts/audio/@audiorecorder/set.m
--- a/scripts/audio/@audiorecorder/set.m
+++ b/scripts/audio/@audiorecorder/set.m
@@ -25,20 +25,23 @@
 ## set each property to a corresponding value.
 ## Given a structure with fields corresponding to property names, set
 ## the value of those properties to the corresponding field values.
 ## Given a only the recorder object, return a structure of settable
 ## properties.
 ## @end deftypefn
 
 function settable = set (varargin)
+
   if (nargin < 1 || nargin > 3)
     print_usage ();
   endif
+
   recorder = struct (varargin{1}).recorder;
+
   if (nargin == 1)
     settable.SampleRate = {};
     settable.Tag = {};
     settable.UserData = {};
   elseif (nargin == 2)
     for [value, property] = varargin{2}
       setproperty (recorder, property, value);
     endfor
@@ -47,25 +50,26 @@ function settable = set (varargin)
       index = 1;
       for property = varargin{2}
         setproperty (recorder, char (property), varargin{3}{index});
         index = index + 1;
       endfor
     else
       setproperty (recorder, varargin{2}, varargin{3});
     endif
-  else
-    error ("audiorecorder: wrong number of arguments to the set method");
   endif
+
 endfunction
 
 function setproperty (recorder, property, value)
+
   switch (property)
     case "SampleRate"
       __recorder_set_fs__ (recorder, value);
     case "Tag"
       __recorder_set_tag__ (recorder, value);
     case "UserData"
       __recorder_set_userdata__ (recorder, value);
     otherwise
-      error ("audiorecorder: no such property or the property specified is read-only");
+      error ("@audiorecorder/set: no such property or the property specified is read-only");
   endswitch
+
 endfunction
diff --git a/scripts/audio/@audiorecorder/stop.m b/scripts/audio/@audiorecorder/stop.m
--- a/scripts/audio/@audiorecorder/stop.m
+++ b/scripts/audio/@audiorecorder/stop.m
@@ -18,10 +18,16 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} stop (@var{recorder})
 ## Stop the audiorecorder object @var{recorder} and clean up any audio
 ## streams.
 ## @end deftypefn
 
 function stop (recorder)
+
+  if (nargin != 1)
+    print_usage ();
+  endif
+
   __recorder_stop__ (struct (recorder).recorder);
+
 endfunction
diff --git a/scripts/audio/@audiorecorder/subsasgn.m b/scripts/audio/@audiorecorder/subsasgn.m
--- a/scripts/audio/@audiorecorder/subsasgn.m
+++ b/scripts/audio/@audiorecorder/subsasgn.m
@@ -18,19 +18,25 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{value} =} subsasgn (@var{recorder}, @var{idx}, @var{rhs})
 ## Perform subscripted assignment on the audio recorder object @var{recorder}.
 ## Assign the value of @var{rhs} to the recorder property named by @var{idx}.
 ## @end deftypefn
 
 function value = subsasgn (recorder, idx, rhs)
+  if (nargin != 3)
+    print_usage ();
+  endif
+
   if (isempty (idx))
-    error ("audiorecorder: missing index");
+    error ("@audiorecorder/subsasgn: missing index");
   endif
+
   if (strcmp (idx(1).type, "."))
     field = idx.subs;
     set (recorder, field, rhs);
     value = recorder;
   else
-    error ("audiorecorder: invalid subscript type");
+    error ("@audiorecorder/subsasgn: invalid subscript type");
   endif
+
 endfunction
diff --git a/scripts/audio/@audiorecorder/subsref.m b/scripts/audio/@audiorecorder/subsref.m
--- a/scripts/audio/@audiorecorder/subsref.m
+++ b/scripts/audio/@audiorecorder/subsref.m
@@ -18,18 +18,25 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{value} =} subsref (@var{recorder}, @var{idx})
 ## Perform subscripted selection on the audio recorder object @var{recorder}.
 ## Return the recorder property value named by @var{idx}.
 ## @end deftypefn
 
 function value = subsref (recorder, idx)
+
+  if (nargin != 2)
+    print_usage ();
+  endif
+
   if (isempty (idx))
-    error ("audiorecorder: missing index");
+    error ("@audiorecorder/subsref: missing index");
   endif
+
   if (strcmp (idx(1).type, "."))
     field = idx.subs;
     value = get (recorder, field);
   else
-    error ("audiorecorder: invalid subscript file")
+    error ("@audiorecorder/subsref: invalid subscript type")
   endif
+
 endfunction
