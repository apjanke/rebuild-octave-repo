# HG changeset patch
# User dbateman
# Date 1180784382 0
#      Sat Jun 02 11:39:42 2007 +0000
# Node ID 8c8ef7e4821d765088866b07d7e8008f69854bc1
# Parent  39e34c15f22294bf20a5ce734b39c6e0a07047da
[project @ 2007-06-02 11:39:42 by dbateman]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2007-06-02  David Bateman  <dbateman@free.fr>
+
+	* SparseCmplxQR.cc: Changes to support CXSparse 2.2.0.
+
 2007-05-31  John W. Eaton  <jwe@octave.org>
 
 	* Array.cc (Array::get_size): Throw std::bad_alloc exception if
 	the computed size is too large for the size of Octave's index type.
 
 2007-05-23  John W. Eaton  <jwe@octave.org>
 
 	* oct-sparse.h: Don't surround included files with extern "C" { ... }.
diff --git a/liboctave/SparseCmplxQR.cc b/liboctave/SparseCmplxQR.cc
--- a/liboctave/SparseCmplxQR.cc
+++ b/liboctave/SparseCmplxQR.cc
@@ -22,39 +22,47 @@ Boston, MA 02110-1301, USA.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 #include <vector>
 
 #include "lo-error.h"
 #include "SparseCmplxQR.h"
 
+#if defined(CS_VER) && (((CS_VER == 2) && (CS_SUBVER < 2)) || (CS_VER < 2))
+typedef double _Complex cs_complex_t;
+
 // Why did g++ 4.x stl_vector.h make
-//   OCTAVE_LOCAL_BUFFER (double _Complex, buf, n)
+//   OCTAVE_LOCAL_BUFFER (cs_complex_t, buf, n)
 // an error ?
 #define OCTAVE_C99_COMPLEX(buf, n) \
   OCTAVE_LOCAL_BUFFER (double, buf ## tmp, (2 * (n))); \
-  double _Complex *buf = reinterpret_cast<double _Complex *> (buf ## tmp);
+  cs_complex_t *buf = reinterpret_cast<cs_complex_t *> (buf ## tmp);
 
-#define OCTAVE_C99_ZERO (0. + 0.iF);
+#else
+#define OCTAVE_C99_COMPLEX(buf, n) \
+  OCTAVE_LOCAL_BUFFER (cs_complex_t, buf, (n));
+#endif
+
+#define OCTAVE_C99_ZERO (0. + 0.iF)
 
 SparseComplexQR::SparseComplexQR_rep::SparseComplexQR_rep 
 (GCC_ATTR_UNUSED const SparseComplexMatrix& a, GCC_ATTR_UNUSED int order)
 {
 #ifdef HAVE_CXSPARSE
   CXSPARSE_ZNAME () A;
   A.nzmax = a.nnz ();
   A.m = a.rows ();
   A.n = a.cols ();
   nrows = A.m;
   // Cast away const on A, with full knowledge that CSparse won't touch it
   // Prevents the methods below making a copy of the data.
   A.p = const_cast<octave_idx_type *>(a.cidx ());
   A.i = const_cast<octave_idx_type *>(a.ridx ());
-  A.x = const_cast<double _Complex *>(reinterpret_cast<const double _Complex *> 
+  A.x = const_cast<cs_complex_t *>(reinterpret_cast<const cs_complex_t *> 
 				      (a.data ()));
   A.nz = -1;
   BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 #if defined(CS_VER) && (CS_VER >= 2)
   S = CXSPARSE_ZNAME (_sqr) (order, &A, 1);
 #else
   S = CXSPARSE_ZNAME (_sqr) (&A, order - 1, 1);
 #endif
@@ -175,44 +183,44 @@ SparseComplexQR::SparseComplexQR_rep::R 
 ComplexMatrix
 SparseComplexQR::SparseComplexQR_rep::C (const ComplexMatrix &b) const
 {
 #ifdef HAVE_CXSPARSE
   octave_idx_type b_nr = b.rows();
   octave_idx_type b_nc = b.cols();
   octave_idx_type nc = N->L->n;
   octave_idx_type nr = nrows;
-  const double _Complex *bvec = 
-    reinterpret_cast<const double _Complex *>(b.fortran_vec());
+  const cs_complex_t *bvec = 
+    reinterpret_cast<const cs_complex_t *>(b.fortran_vec());
   ComplexMatrix ret(b_nr,b_nc);
   Complex *vec = ret.fortran_vec();
   if (nr < 1 || nc < 1 || nr != b_nr)
     (*current_liboctave_error_handler) ("matrix dimension mismatch");
   else
     {
       OCTAVE_LOCAL_BUFFER (Complex, buf, S->m2);
       for (volatile octave_idx_type j = 0, idx = 0; j < b_nc; j++, idx+=b_nr)
 	{
 	  OCTAVE_QUIT;
 	  volatile octave_idx_type nm = (nr < nc ? nr : nc);
 	  BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 #if defined(CS_VER) && (CS_VER >= 2)
 	  CXSPARSE_ZNAME (_ipvec) 
-	    (S->pinv, bvec + idx, reinterpret_cast<double _Complex *>(buf), b_nr);
+	    (S->pinv, bvec + idx, reinterpret_cast<cs_complex_t *>(buf), b_nr);
 #else
 	  CXSPARSE_ZNAME (_ipvec) 
-	    (b_nr, S->Pinv, bvec + idx, reinterpret_cast<double _Complex *>(buf));
+	    (b_nr, S->Pinv, bvec + idx, reinterpret_cast<cs_complex_t *>(buf));
 #endif
 	  END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	  for (volatile octave_idx_type i = 0; i < nm; i++)
 	    {
 	      OCTAVE_QUIT;
 	      BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	      CXSPARSE_ZNAME (_happly) 
-		(N->L, i, N->B[i], reinterpret_cast<double _Complex *>(buf));
+		(N->L, i, N->B[i], reinterpret_cast<cs_complex_t *>(buf));
 	      END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	    }
 	  for (octave_idx_type i = 0; i < b_nr; i++)
 	    vec[i+idx] = buf[i];
 	}
     }
   return ret;
 #else
@@ -235,34 +243,34 @@ qrsolve(const SparseComplexMatrix&a, con
     (*current_liboctave_error_handler)
       ("matrix dimension mismatch in solution of minimum norm problem");
   else if (nr >= nc)
     {
       SparseComplexQR q (a, 2);
       if (! q.ok ())
 	return ComplexMatrix();
       x.resize(nc, b_nc);
-      double _Complex *vec = reinterpret_cast<double _Complex *>
+      cs_complex_t *vec = reinterpret_cast<cs_complex_t *>
 	(x.fortran_vec());
       OCTAVE_C99_COMPLEX (buf, q.S()->m2);
       OCTAVE_LOCAL_BUFFER (Complex, Xx, b_nr);
       for (volatile octave_idx_type i = 0, idx = 0; i < b_nc; i++, idx+=nc)
 	{
 	  OCTAVE_QUIT;
 	  for (octave_idx_type j = 0; j < b_nr; j++)
 	    Xx[j] = b.xelem(j,i);
 	  for (octave_idx_type j = nr; j < q.S()->m2; j++)
 	    buf[j] = OCTAVE_C99_ZERO;
 	  BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 #if defined(CS_VER) && (CS_VER >= 2)
 	  CXSPARSE_ZNAME (_ipvec) 
-	    (q.S()->pinv, reinterpret_cast<double _Complex *>(Xx), buf, nr);
+	    (q.S()->pinv, reinterpret_cast<cs_complex_t *>(Xx), buf, nr);
 #else
 	  CXSPARSE_ZNAME (_ipvec) 
-	    (nr, q.S()->Pinv, reinterpret_cast<double _Complex *>(Xx), buf);
+	    (nr, q.S()->Pinv, reinterpret_cast<cs_complex_t *>(Xx), buf);
 #endif
 	  END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	  for (volatile octave_idx_type j = 0; j < nc; j++)
 	    {
 	      OCTAVE_QUIT;
 	      BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	      CXSPARSE_ZNAME (_happly) (q.N()->L, j, q.N()->B[j], buf);
 	      END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
@@ -280,48 +288,58 @@ qrsolve(const SparseComplexMatrix&a, con
     }
   else
     {
       SparseComplexMatrix at = a.hermitian();
       SparseComplexQR q (at, 2);
       if (! q.ok ())
 	return ComplexMatrix();
       x.resize(nc, b_nc);
-      double _Complex *vec = reinterpret_cast<double _Complex *>
+      cs_complex_t *vec = reinterpret_cast<cs_complex_t *>
 	(x.fortran_vec());
       volatile octave_idx_type nbuf = (nc > q.S()->m2 ? nc : q.S()->m2);
       OCTAVE_C99_COMPLEX (buf, nbuf);
       OCTAVE_LOCAL_BUFFER (Complex, Xx, b_nr);
+#if defined(CS_VER) && (((CS_VER == 2) && (CS_SUBVER >= 2)) || (CS_VER > 2))
+      OCTAVE_LOCAL_BUFFER (double, B, nr);
+      for (octave_idx_type i = 0; i < nr; i++)
+	B[i] = q.N()->B [i];
+#else
       OCTAVE_LOCAL_BUFFER (Complex, B, nr);
       for (octave_idx_type i = 0; i < nr; i++)
 	B[i] = conj (reinterpret_cast<Complex *>(q.N()->B) [i]);
+#endif
       for (volatile octave_idx_type i = 0, idx = 0; i < b_nc; i++, idx+=nc)
 	{
 	  OCTAVE_QUIT;
 	  for (octave_idx_type j = 0; j < b_nr; j++)
 	    Xx[j] = b.xelem(j,i);
 	  for (octave_idx_type j = nr; j < nbuf; j++)
 	    buf[j] = OCTAVE_C99_ZERO;
 	  BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 #if defined(CS_VER) && (CS_VER >= 2)
 	  CXSPARSE_ZNAME (_pvec)
-	    (q.S()->q, reinterpret_cast<double _Complex *>(Xx), buf, nr);
+	    (q.S()->q, reinterpret_cast<cs_complex_t *>(Xx), buf, nr);
 #else
 	  CXSPARSE_ZNAME (_pvec)
-	    (nr, q.S()->Q, reinterpret_cast<double _Complex *>(Xx), buf);
+	    (nr, q.S()->Q, reinterpret_cast<cs_complex_t *>(Xx), buf);
 #endif
 	  CXSPARSE_ZNAME (_utsolve) (q.N()->U, buf);
 	  END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	  for (volatile octave_idx_type j = nr-1; j >= 0; j--)
 	    {
 	      OCTAVE_QUIT;
 	      BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 
+#if defined(CS_VER) && (((CS_VER == 2) && (CS_SUBVER >= 2)) || (CS_VER > 2))
+	      CXSPARSE_ZNAME (_happly) (q.N()->L, j, B[j], buf);
+#else
 	      CXSPARSE_ZNAME (_happly) 
-		(q.N()->L, j, reinterpret_cast<double _Complex *>(B)[j], buf);
+		(q.N()->L, j, reinterpret_cast<cs_complex_t *>(B)[j], buf);
+#endif
 	      END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	    }
 	  BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 #if defined(CS_VER) && (CS_VER >= 2)
 	  CXSPARSE_ZNAME (_pvec) (q.S()->pinv, buf, vec + idx, nc);
 #else
 	  CXSPARSE_ZNAME (_pvec) (nc, q.S()->Pinv, buf, vec + idx);
 #endif
@@ -367,37 +385,37 @@ qrsolve(const SparseComplexMatrix&a, con
 	  OCTAVE_QUIT;
 	  for (octave_idx_type j = 0; j < b_nr; j++)
 	    Xx[j] = b.xelem(j,i);
 	  for (octave_idx_type j = nr; j < q.S()->m2; j++)
 	    buf[j] = OCTAVE_C99_ZERO;
 	  BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 #if defined(CS_VER) && (CS_VER >= 2)
 	  CXSPARSE_ZNAME (_ipvec) 
-	    (q.S()->pinv, reinterpret_cast<double _Complex *>(Xx), buf, nr);
+	    (q.S()->pinv, reinterpret_cast<cs_complex_t *>(Xx), buf, nr);
 #else
 	  CXSPARSE_ZNAME (_ipvec) 
-	    (nr, q.S()->Pinv, reinterpret_cast<double _Complex *>(Xx), buf);
+	    (nr, q.S()->Pinv, reinterpret_cast<cs_complex_t *>(Xx), buf);
 #endif
 	  END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	  for (volatile octave_idx_type j = 0; j < nc; j++)
 	    {
 	      OCTAVE_QUIT;
 	      BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	      CXSPARSE_ZNAME (_happly) (q.N()->L, j, q.N()->B[j], buf);
 	      END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	    }
 	  BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	  CXSPARSE_ZNAME (_usolve) (q.N()->U, buf);
 #if defined(CS_VER) && (CS_VER >= 2)
 	  CXSPARSE_ZNAME (_ipvec) 
-	    (q.S()->q, buf, reinterpret_cast<double _Complex *>(Xx), nc);
+	    (q.S()->q, buf, reinterpret_cast<cs_complex_t *>(Xx), nc);
 #else
 	  CXSPARSE_ZNAME (_ipvec) 
-	    (nc, q.S()->Q, buf, reinterpret_cast<double _Complex *>(Xx));
+	    (nc, q.S()->Q, buf, reinterpret_cast<cs_complex_t *>(Xx));
 #endif
 	  END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 
 	  for (octave_idx_type j = 0; j < nc; j++)
 	    {
 	      Complex tmp = Xx[j];
 	      if (tmp != 0.0)
 		{
@@ -425,51 +443,62 @@ qrsolve(const SparseComplexMatrix&a, con
 	return SparseComplexMatrix();
       x = SparseComplexMatrix (nc, b_nc, b.nzmax());
       x.xcidx(0) = 0;
       x_nz = b.nzmax();
       ii = 0;
       volatile octave_idx_type nbuf = (nc > q.S()->m2 ? nc : q.S()->m2);
       OCTAVE_LOCAL_BUFFER (Complex, Xx, (b_nr > nc ? b_nr : nc));
       OCTAVE_C99_COMPLEX (buf, nbuf);
+
+#if defined(CS_VER) && (((CS_VER == 2) && (CS_SUBVER >= 2)) || (CS_VER > 2))
+      OCTAVE_LOCAL_BUFFER (double, B, nr);
+      for (octave_idx_type i = 0; i < nr; i++)
+	B[i] = q.N()->B [i];
+#else
       OCTAVE_LOCAL_BUFFER (Complex, B, nr);
       for (octave_idx_type i = 0; i < nr; i++)
 	B[i] = conj (reinterpret_cast<Complex *>(q.N()->B) [i]);
+#endif
       for (volatile octave_idx_type i = 0, idx = 0; i < b_nc; i++, idx+=nc)
 	{
 	  OCTAVE_QUIT;
 	  for (octave_idx_type j = 0; j < b_nr; j++)
 	    Xx[j] = b.xelem(j,i);
 	  for (octave_idx_type j = nr; j < nbuf; j++)
 	    buf[j] = OCTAVE_C99_ZERO;
 	  BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 #if defined(CS_VER) && (CS_VER >= 2)
 	  CXSPARSE_ZNAME (_pvec)
-	    (q.S()->q, reinterpret_cast<double _Complex *>(Xx), buf, nr);
+	    (q.S()->q, reinterpret_cast<cs_complex_t *>(Xx), buf, nr);
 #else
 	  CXSPARSE_ZNAME (_pvec)
-	    (nr, q.S()->Q, reinterpret_cast<double _Complex *>(Xx), buf);
+	    (nr, q.S()->Q, reinterpret_cast<cs_complex_t *>(Xx), buf);
 #endif
 	  CXSPARSE_ZNAME (_utsolve) (q.N()->U, buf);
 	  END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	  for (volatile octave_idx_type j = nr-1; j >= 0; j--)
 	    {
 	      OCTAVE_QUIT;
 	      BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
+#if defined(CS_VER) && (((CS_VER == 2) && (CS_SUBVER >= 2)) || (CS_VER > 2))
+	      CXSPARSE_ZNAME (_happly) (q.N()->L, j, B[j], buf);
+#else
 	      CXSPARSE_ZNAME (_happly) 
-		(q.N()->L, j, reinterpret_cast<double _Complex *>(B)[j], buf);
+		(q.N()->L, j, reinterpret_cast<cs_complex_t *>(B)[j], buf);
+#endif
 	      END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	    }
 	  BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 #if defined(CS_VER) && (CS_VER >= 2)
 	  CXSPARSE_ZNAME (_pvec) 
-	    (q.S()->pinv, buf, reinterpret_cast<double _Complex *>(Xx), nc);
+	    (q.S()->pinv, buf, reinterpret_cast<cs_complex_t *>(Xx), nc);
 #else
 	  CXSPARSE_ZNAME (_pvec) 
-	    (nc, q.S()->Pinv, buf, reinterpret_cast<double _Complex *>(Xx));
+	    (nc, q.S()->Pinv, buf, reinterpret_cast<cs_complex_t *>(Xx));
 #endif
 	  END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 
 	  for (octave_idx_type j = 0; j < nc; j++)
 	    {
 	      Complex tmp = Xx[j];
 	      if (tmp != 0.0)
 		{
@@ -501,30 +530,30 @@ ComplexMatrix
 qrsolve(const SparseComplexMatrix&a, const ComplexMatrix &b, octave_idx_type &info)
 {
   info = -1;
 #ifdef HAVE_CXSPARSE
   octave_idx_type nr = a.rows();
   octave_idx_type nc = a.cols();
   octave_idx_type b_nc = b.cols();
   octave_idx_type b_nr = b.rows();
-  const double _Complex *bvec = 
-    reinterpret_cast<const double _Complex *>(b.fortran_vec());
+  const cs_complex_t *bvec = 
+    reinterpret_cast<const cs_complex_t *>(b.fortran_vec());
   ComplexMatrix x;
 
   if (nr < 1 || nc < 1 || nr != b_nr)
     (*current_liboctave_error_handler)
       ("matrix dimension mismatch in solution of minimum norm problem");
   else if (nr >= nc)
     {
       SparseComplexQR q (a, 2);
       if (! q.ok ())
 	return ComplexMatrix();
       x.resize(nc, b_nc);
-      double _Complex *vec = reinterpret_cast<double _Complex *>
+      cs_complex_t *vec = reinterpret_cast<cs_complex_t *>
 	(x.fortran_vec());
       OCTAVE_C99_COMPLEX (buf, q.S()->m2);
       for (volatile octave_idx_type i = 0, idx = 0, bidx = 0; i < b_nc; 
 	   i++, idx+=nc, bidx+=b_nr)
 	{
 	  OCTAVE_QUIT;
 	  for (octave_idx_type j = nr; j < q.S()->m2; j++)
 	    buf[j] = OCTAVE_C99_ZERO;
@@ -555,23 +584,29 @@ qrsolve(const SparseComplexMatrix&a, con
     }
   else
     {
       SparseComplexMatrix at = a.hermitian();
       SparseComplexQR q (at, 2);
       if (! q.ok ())
 	return ComplexMatrix();
       x.resize(nc, b_nc);
-      double _Complex *vec = reinterpret_cast<double _Complex *>
+      cs_complex_t *vec = reinterpret_cast<cs_complex_t *>
 	(x.fortran_vec());
       volatile octave_idx_type nbuf = (nc > q.S()->m2 ? nc : q.S()->m2);
       OCTAVE_C99_COMPLEX (buf, nbuf);
+#if defined(CS_VER) && (((CS_VER == 2) && (CS_SUBVER >= 2)) || (CS_VER > 2))
+      OCTAVE_LOCAL_BUFFER (double, B, nr);
+      for (octave_idx_type i = 0; i < nr; i++)
+	B[i] = q.N()->B [i];
+#else
       OCTAVE_LOCAL_BUFFER (Complex, B, nr);
       for (octave_idx_type i = 0; i < nr; i++)
 	B[i] = conj (reinterpret_cast<Complex *>(q.N()->B) [i]);
+#endif
       for (volatile octave_idx_type i = 0, idx = 0, bidx = 0; i < b_nc; 
 	   i++, idx+=nc, bidx+=b_nr)
 	{
 	  OCTAVE_QUIT;
 	  for (octave_idx_type j = nr; j < nbuf; j++)
 	    buf[j] = OCTAVE_C99_ZERO;
 	  BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 #if defined(CS_VER) && (CS_VER >= 2)
@@ -580,18 +615,22 @@ qrsolve(const SparseComplexMatrix&a, con
 	  CXSPARSE_ZNAME (_pvec) (nr, q.S()->Q, bvec + bidx, buf);
 #endif
 	  CXSPARSE_ZNAME (_utsolve) (q.N()->U, buf);
 	  END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	  for (volatile octave_idx_type j = nr-1; j >= 0; j--)
 	    {
 	      OCTAVE_QUIT;
 	      BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
+#if defined(CS_VER) && (((CS_VER == 2) && (CS_SUBVER >= 2)) || (CS_VER > 2))
+	      CXSPARSE_ZNAME (_happly) (q.N()->L, j, B[j], buf);
+#else
 	      CXSPARSE_ZNAME (_happly) 
-		(q.N()->L, j, reinterpret_cast<double _Complex *>(B)[j], buf);
+		(q.N()->L, j, reinterpret_cast<cs_complex_t *>(B)[j], buf);
+#endif
 	      END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	    }
 	  BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 #if defined(CS_VER) && (CS_VER >= 2)
 	  CXSPARSE_ZNAME (_pvec) (q.S()->pinv, buf, vec + idx, nc);
 #else
 	  CXSPARSE_ZNAME (_pvec) (nc, q.S()->Pinv, buf, vec + idx);
 #endif
@@ -637,37 +676,37 @@ qrsolve(const SparseComplexMatrix&a, con
 	  OCTAVE_QUIT;
 	  for (octave_idx_type j = 0; j < b_nr; j++)
 	    Xx[j] = b.xelem(j,i);
 	  for (octave_idx_type j = nr; j < q.S()->m2; j++)
 	    buf[j] = OCTAVE_C99_ZERO;
 	  BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 #if defined(CS_VER) && (CS_VER >= 2)
 	  CXSPARSE_ZNAME (_ipvec) 
-	    (q.S()->pinv, reinterpret_cast<double _Complex *>(Xx), buf, nr);
+	    (q.S()->pinv, reinterpret_cast<cs_complex_t *>(Xx), buf, nr);
 #else
 	  CXSPARSE_ZNAME (_ipvec) 
-	    (nr, q.S()->Pinv, reinterpret_cast<double _Complex *>(Xx), buf);
+	    (nr, q.S()->Pinv, reinterpret_cast<cs_complex_t *>(Xx), buf);
 #endif
 	  END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	  for (volatile octave_idx_type j = 0; j < nc; j++)
 	    {
 	      OCTAVE_QUIT;
 	      BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	      CXSPARSE_ZNAME (_happly) (q.N()->L, j, q.N()->B[j], buf);
 	      END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	    }
 	  BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	  CXSPARSE_ZNAME (_usolve) (q.N()->U, buf);
 #if defined(CS_VER) && (CS_VER >= 2)
 	  CXSPARSE_ZNAME (_ipvec) 
-	    (q.S()->q, buf, reinterpret_cast<double _Complex *>(Xx), nc);
+	    (q.S()->q, buf, reinterpret_cast<cs_complex_t *>(Xx), nc);
 #else
 	  CXSPARSE_ZNAME (_ipvec) 
-	    (nc, q.S()->Q, buf, reinterpret_cast<double _Complex *>(Xx));
+	    (nc, q.S()->Q, buf, reinterpret_cast<cs_complex_t *>(Xx));
 #endif
 	  END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 
 	  for (octave_idx_type j = 0; j < nc; j++)
 	    {
 	      Complex tmp = Xx[j];
 	      if (tmp != 0.0)
 		{
@@ -695,51 +734,61 @@ qrsolve(const SparseComplexMatrix&a, con
 	return SparseComplexMatrix();
       x = SparseComplexMatrix (nc, b_nc, b.nzmax());
       x.xcidx(0) = 0;
       x_nz = b.nzmax();
       ii = 0;
       volatile octave_idx_type nbuf = (nc > q.S()->m2 ? nc : q.S()->m2);
       OCTAVE_LOCAL_BUFFER (Complex, Xx, (b_nr > nc ? b_nr : nc));
       OCTAVE_C99_COMPLEX (buf, nbuf);
+#if defined(CS_VER) && (((CS_VER == 2) && (CS_SUBVER >= 2)) || (CS_VER > 2))
+      OCTAVE_LOCAL_BUFFER (double, B, nr);
+      for (octave_idx_type i = 0; i < nr; i++)
+	B[i] = q.N()->B [i];
+#else
       OCTAVE_LOCAL_BUFFER (Complex, B, nr);
       for (octave_idx_type i = 0; i < nr; i++)
 	B[i] = conj (reinterpret_cast<Complex *>(q.N()->B) [i]);
+#endif
       for (volatile octave_idx_type i = 0, idx = 0; i < b_nc; i++, idx+=nc)
 	{
 	  OCTAVE_QUIT;
 	  for (octave_idx_type j = 0; j < b_nr; j++)
 	    Xx[j] = b.xelem(j,i);
 	  for (octave_idx_type j = nr; j < nbuf; j++)
 	    buf[j] = OCTAVE_C99_ZERO;
 	  BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 #if defined(CS_VER) && (CS_VER >= 2)
 	  CXSPARSE_ZNAME (_pvec)
-	    (q.S()->q, reinterpret_cast<double _Complex *>(Xx), buf, nr);
+	    (q.S()->q, reinterpret_cast<cs_complex_t *>(Xx), buf, nr);
 #else
 	  CXSPARSE_ZNAME (_pvec)
-	    (nr, q.S()->Q, reinterpret_cast<double _Complex *>(Xx), buf);
+	    (nr, q.S()->Q, reinterpret_cast<cs_complex_t *>(Xx), buf);
 #endif
 	  CXSPARSE_ZNAME (_utsolve) (q.N()->U, buf);
 	  END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	  for (volatile octave_idx_type j = nr-1; j >= 0; j--)
 	    {
 	      OCTAVE_QUIT;
 	      BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
+#if defined(CS_VER) && (((CS_VER == 2) && (CS_SUBVER >= 2)) || (CS_VER > 2))
+	      CXSPARSE_ZNAME (_happly) (q.N()->L, j, B[j], buf);
+#else
 	      CXSPARSE_ZNAME (_happly) 
-		(q.N()->L, j, reinterpret_cast<double _Complex *>(B)[j], buf);
+		(q.N()->L, j, reinterpret_cast<cs_complex_t *>(B)[j], buf);
+#endif
 	      END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	    }
 	  BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 #if defined(CS_VER) && (CS_VER >= 2)
 	  CXSPARSE_ZNAME (_pvec) 
-	    (q.S()->pinv, buf, reinterpret_cast<double _Complex *>(Xx), nc);
+	    (q.S()->pinv, buf, reinterpret_cast<cs_complex_t *>(Xx), nc);
 #else
 	  CXSPARSE_ZNAME (_pvec) 
-	    (nc, q.S()->Pinv, buf, reinterpret_cast<double _Complex *>(Xx));
+	    (nc, q.S()->Pinv, buf, reinterpret_cast<cs_complex_t *>(Xx));
 #endif
 	  END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 
 	  for (octave_idx_type j = 0; j < nc; j++)
 	    {
 	      Complex tmp = Xx[j];
 	      if (tmp != 0.0)
 		{
