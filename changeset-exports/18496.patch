# HG changeset patch
# User Rik <rik@octave.org>
# Date 1392917205 28800
#      Thu Feb 20 09:26:45 2014 -0800
# Node ID 80b8873c90ba9198a0d69f74642f47696cdc84e8
# Parent  1fa5bba1621876012258d53d450273e67f7298fd
Fix pinv bug with 0 values introduced in cset 16b0cd465ecd.

* pinv.cc (Fpinv): Add %!tests for diagonal matrices

* CDiagMatrix.cc (pseudo_inverse), dDiagMatrix.cc (pseudo_inverse),
fCDiagMatrix.cc (pseudo_inverse), fDiagMatrix.cc (pseudo_inverse):
Don't skip assigning 0 to retval element when matrix element is 0 since
retval memory is not initialized to 0.

diff --git a/liboctave/array/CDiagMatrix.cc b/liboctave/array/CDiagMatrix.cc
--- a/liboctave/array/CDiagMatrix.cc
+++ b/liboctave/array/CDiagMatrix.cc
@@ -389,19 +389,19 @@ ComplexDiagMatrix::pseudo_inverse (doubl
   octave_idx_type c = cols ();
   octave_idx_type len = length ();
 
   ComplexDiagMatrix retval (c, r);
 
   for (octave_idx_type i = 0; i < len; i++)
     {
       double val = std::abs (elem (i, i));
-      if (val < tol)
+      if (val < tol || val == 0.0)
         retval.elem (i, i) = 0.0;
-      else if (val != 0.0)
+      else
         retval.elem (i, i) = 1.0 / elem (i, i);
     }
 
   return retval;
 }
 
 bool
 ComplexDiagMatrix::all_elements_are_real (void) const
diff --git a/liboctave/array/dDiagMatrix.cc b/liboctave/array/dDiagMatrix.cc
--- a/liboctave/array/dDiagMatrix.cc
+++ b/liboctave/array/dDiagMatrix.cc
@@ -298,19 +298,19 @@ DiagMatrix::pseudo_inverse (double tol) 
   octave_idx_type c = cols ();
   octave_idx_type len = length ();
 
   DiagMatrix retval (c, r);
 
   for (octave_idx_type i = 0; i < len; i++)
     {
       double val = std::abs (elem (i, i));
-      if (val < tol)
+      if (val < tol || val == 0.0)
         retval.elem (i, i) = 0.0;
-      else if (val != 0.0)
+      else
         retval.elem (i, i) = 1.0 / elem (i, i);
     }
 
   return retval;
 }
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
diff --git a/liboctave/array/fCDiagMatrix.cc b/liboctave/array/fCDiagMatrix.cc
--- a/liboctave/array/fCDiagMatrix.cc
+++ b/liboctave/array/fCDiagMatrix.cc
@@ -393,19 +393,19 @@ FloatComplexDiagMatrix::pseudo_inverse (
   octave_idx_type c = cols ();
   octave_idx_type len = length ();
 
   FloatComplexDiagMatrix retval (c, r);
 
   for (octave_idx_type i = 0; i < len; i++)
     {
       float val = std::abs (elem (i, i));
-      if (val < tol)
+      if (val < tol || val == 0.0f)
         retval.elem (i, i) = 0.0f;
-      else if (val != 0.0f)
+      else
         retval.elem (i, i) = 1.0f / elem (i, i);
     }
 
   return retval;
 }
 
 bool
 FloatComplexDiagMatrix::all_elements_are_real (void) const
diff --git a/liboctave/array/fDiagMatrix.cc b/liboctave/array/fDiagMatrix.cc
--- a/liboctave/array/fDiagMatrix.cc
+++ b/liboctave/array/fDiagMatrix.cc
@@ -298,19 +298,19 @@ FloatDiagMatrix::pseudo_inverse (float t
   octave_idx_type c = cols ();
   octave_idx_type len = length ();
 
   FloatDiagMatrix retval (c, r);
 
   for (octave_idx_type i = 0; i < len; i++)
     {
       float val = std::abs (elem (i, i));
-      if (val < tol)
+      if (val < tol || val == 0.0f)
         retval.elem (i, i) = 0.0f;
-      else if (val != 0.0f)
+      else
         retval.elem (i, i) = 1.0f / elem (i, i);
     }
 
   return retval;
 }
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
