# HG changeset patch
# User jwe
# Date 1095865543 0
#      Wed Sep 22 15:05:43 2004 +0000
# Node ID 4da942f0b76f647013042a100a4cb7e4c7bfa9df
# Parent  2a0e2daac9970f30116716634cab2a80ef282c6e
[project @ 2004-09-22 15:05:43 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2004-09-22  David Bateman  <dbateman@free.fr>
+
+	* ov-fcn-inline.cc (Finline): When called with a single arg, derive
+	argument of inline function in a compatible manner.
+
 2004-09-22  Federico Zenith  <zenith@chemeng.ntnu.no>
 
 	* DLD-FUNCTIONS/qz.cc (Fqz): New @tex section(s) in doc string for
 	better formating of printed documentation.  Use @var in doc string.
 
 	* DLD-FUNCTIONS/time.cc (Fstrftime): Fix typo in doc string.
 	* error.cc (Flasterr, Flastwarn): Likewise.
 	* mappers.cc (Farg, Fasinh, Fatanh, Ffinite, Fsin, Fsinh, Ftan):
diff --git a/src/ov-fcn-inline.cc b/src/ov-fcn-inline.cc
--- a/src/ov-fcn-inline.cc
+++ b/src/ov-fcn-inline.cc
@@ -570,18 +570,20 @@ octave_fcn_inline::convert_to_str_intern
 
 DEFUN (inline, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} inline (@var{str})\n\
 @deftypefnx {Built-in Function} {} inline (@var{str}, @var{arg1}, ...)\n\
 @deftypefnx {Built-in Function} {} inline (@var{str}, @var{n})\n\
 Create an inline function from the character string @var{str}.\n\
 If called with a single argument, the generated function is\n\
-assumed to have a single argument and will be defined\n\
-as the first isolated lower case character, except i or j.\n\
+assumed to have a single argument and will be defined as the\n\
+isolated lower case character, except i or j, that is closest\n\
+to x. If more than argument is the same distance from x, the\n\
+one later in the alphabet is chosen.\n\
 \n\
 If the second and subsequent arguments are character strings,\n\
 they are the names of the arguments of the function.\n\
 \n\
 If the second argument is an integer @var{n}, the arguments are\n\
 @code{\"x\"}, @code{\"P1\"}, @dots{}, @code{\"P@var{N}\"}.\n\
 @end deftypefn\n\
 @seealso{argnames, formula, vectorize}")
@@ -595,23 +597,42 @@ If the second argument is an integer @va
       std::string fun = args(0).string_value ();
 
       if (! error_state)
 	{
 	  string_vector fargs;
 
 	  if (nargin == 1)
 	    {
+	      int dist = -1;
+	      char c;
+
 	      fargs.resize (1);
+	      fargs(0) = "x";
 
-	      // Find the first isolated string as the argument of the
-	      // function.
+	      for (int i = 0; i < fun.length(); i++)
+		{
+		  if (islower (fun [i]) && 
+		      (i == 0 ? true : !islower (fun [i-1])) &&
+		      (i == fun.length() ? true : !islower (fun [i+1])))
+		    {
+		      char new_c = fun [i];
 
-	      // XXX FIXME XXX -- use just "x" for now.
-	      fargs(0) = "x";
+		      if (new_c == 'i' || new_c == 'j') 
+			continue;
+		      int new_dist = std::abs(new_c - 'x');
+		      if (dist == -1 || (new_dist < dist) ||
+			  ((new_dist == dist) && (c < new_c)))
+			{
+			  fargs(0) = new_c;
+			  dist = new_dist;
+			  c = new_c;
+			}
+		    }
+		}
 	    }
 	  else if (nargin == 2 && args(1).is_numeric_type ())
 	    {
 	      int n = args(1).int_value ();
 
 	      if (! error_state)
 		{
 		  if (n >= 0)
