# HG changeset patch
# User jwe
# Date 1175906590 0
#      Sat Apr 07 00:43:10 2007 +0000
# Node ID 184ab67c3bc10ae62f6aa5810d71ebef3eb0e201
# Parent  679c2f98794313420049be45aa1204974b5cc5fc
[project @ 2007-04-07 00:43:09 by jwe]

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,10 +1,13 @@
 2007-04-06  John W. Eaton  <jwe@octave.org>
 
+	* blas-xtra/xdnrm2.f, blas-xtra/xdznrm2.f: New functions.
+	* blas-xtra/Makefile.in (FSRC): Add them to the list.
+
 	* ranlib/phrtsd.f (phrtsd): Ensure that the types of the arguments
 	passed to mod are the same even on 64-bit systems.
 
 2007-04-04  John W. Eaton  <jwe@octave.org>
 
 	* Makefules.in: Handle Fortran, C, and C++ sources with separate
 	variables.
 	* misc/Makefile.in: Use new variables for Fortran, C, and C++ files.
diff --git a/libcruft/blas-xtra/Makefile.in b/libcruft/blas-xtra/Makefile.in
--- a/libcruft/blas-xtra/Makefile.in
+++ b/libcruft/blas-xtra/Makefile.in
@@ -9,13 +9,13 @@
 TOPDIR = ../..
 
 srcdir = @srcdir@
 top_srcdir = @top_srcdir@
 VPATH = @srcdir@
 
 EXTERNAL_DISTFILES = $(DISTFILES)
 
-FSRC = xddot.f xerbla.f xzdotu.f
+FSRC = xddot.f xdnrm2.f xdznrm2.f xerbla.f xzdotu.f
 
 include $(TOPDIR)/Makeconf
 
 include ../Makerules
diff --git a/libcruft/blas-xtra/xdnrm2.f b/libcruft/blas-xtra/xdnrm2.f
new file mode 100644
--- /dev/null
+++ b/libcruft/blas-xtra/xdnrm2.f
@@ -0,0 +1,6 @@
+      subroutine xdnrm2 (n, x, incx, retval)
+      double precision dnrm2, x(*), retval
+      integer n, incx
+      retval = dnrm2 (n, x, incx);
+      return
+      end
diff --git a/libcruft/blas-xtra/xdznrm2.f b/libcruft/blas-xtra/xdznrm2.f
new file mode 100644
--- /dev/null
+++ b/libcruft/blas-xtra/xdznrm2.f
@@ -0,0 +1,7 @@
+      subroutine xdznrm2 (n, x, incx, retval)
+      double precision dznrm2, retval
+      double complex x(*)
+      integer n, incx
+      retval = dznrm2 (n, x, incx);
+      return
+      end
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2007-04-06  John W. Eaton  <jwe@octave.org>
+
+	* MArray-defs.h (MARRAY_NORM_BODY): New macro.
+	* MArray.h (MArray<T>::norm): New function.
+	* MArray.cc: Provide decl.
+	* MArray-d.cc (MArray<double>::norm): Define double specialization.
+	* MArray-C.cc (MArray<Complex>::norm): Define Complex specialization.
+
 2007-04-04  John W. Eaton  <jwe@octave.org>
 
 	* Range.cc (Range::nelem_internal): Likewise.
 	* lo-utils.cc (NINT): Use numeric_limits<int> instead of INT_MAX.
 	(NINTbig): Use numeric_limits<octave_idx_type> instead of INT_MAX.
 	From Scott Pakin <pakin@lanl.gov>.
 
 2007-04-04  David Bateman  <dbateman@free.fr>
diff --git a/liboctave/MArray-C.cc b/liboctave/MArray-C.cc
--- a/liboctave/MArray-C.cc
+++ b/liboctave/MArray-C.cc
@@ -23,20 +23,35 @@ 02110-1301, USA.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 // Instantiate MArrays of Complex values.
 
 #include "oct-cmplx.h"
+#include "f77-fcn.h"
+
+extern "C"
+{
+  F77_RET_T
+  F77_FUNC (xdznrm2, XDZNRM2) (const octave_idx_type&, const Complex*,
+			       const octave_idx_type&, double&);
+}
 
 #include "MArray.h"
 #include "MArray.cc"
 
+template <>
+double
+MArray<Complex>::norm (double p) const
+{
+  MARRAY_NORM_BODY (Complex, xdznrm2, XDZNRM2);
+}
+
 template class OCTAVE_API MArray<Complex>;
 
 INSTANTIATE_MARRAY_FRIENDS (Complex)
 
 #include "MArray2.h"
 #include "MArray2.cc"
 
 template class OCTAVE_API MArray2<Complex>;
diff --git a/liboctave/MArray-d.cc b/liboctave/MArray-d.cc
--- a/liboctave/MArray-d.cc
+++ b/liboctave/MArray-d.cc
@@ -22,19 +22,35 @@ 02110-1301, USA.
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 // Instantiate MArrays of double values.
 
+#include "f77-fcn.h"
+
+extern "C"
+{
+  F77_RET_T
+  F77_FUNC (xdnrm2, XDNRM2) (const octave_idx_type&, const double*,
+			     const octave_idx_type&, double&);
+}
+
 #include "MArray.h"
 #include "MArray.cc"
 
+template <>
+double
+MArray<double>::norm (double p) const
+{
+  MARRAY_NORM_BODY (double, xdnrm2, XDNRM2);
+}
+
 template class MArray<double>;
 
 INSTANTIATE_MARRAY_FRIENDS (double)
 
 #include "MArray2.h"
 #include "MArray2.cc"
 
 template class MArray2<double>;
diff --git a/liboctave/MArray-defs.h b/liboctave/MArray-defs.h
--- a/liboctave/MArray-defs.h
+++ b/liboctave/MArray-defs.h
@@ -316,11 +316,83 @@
     (R, T, dynamic_cast<const B<T>&>, R, , T) \
  \
   MDIAGARRAY2_SDA_BINOP_FWD_DEFS \
     (R, T, , T, dynamic_cast<const B<T>&>, R) \
  \
   MDIAGARRAY2_DADA_BINOP_FWD_DEFS \
     (R, T, dynamic_cast<const B<T>&>, R, dynamic_cast<const B<T>&>, R)
 
+#define MARRAY_NORM_BODY(TYPE, blas_norm, BLAS_NORM)	\
+ \
+  double retval = octave_NaN; \
+ \
+  octave_idx_type len = length (); \
+ \
+  if (len > 0) \
+    { \
+      const TYPE *d = data (); \
+ \
+      if (p == -1) \
+	{ \
+	  /* Frobenius norm.  */ \
+	  retval = 0; \
+ \
+	  for (octave_idx_type i = 0; i < len; i++) \
+	    { \
+	      double d_abs = std::abs (d[i]); \
+	      retval += d_abs * d_abs; \
+	    } \
+ \
+	  retval = ::sqrt (retval); \
+	} \
+      else if (p == 2) \
+	F77_FCN (blas_norm, BLAS_NORM) (len, d, 1, retval); \
+      else if (xisinf (p)) \
+	{ \
+	  octave_idx_type i = 0; \
+ \
+	  while (i < len && xisnan (d[i])) \
+	    i++; \
+ \
+	  if (i < len) \
+	    retval = std::abs (d[i]); \
+ \
+	  if (p > 0) \
+	    { \
+	      while (i < len) \
+		{ \
+		  double d_abs = std::abs (d[i++]); \
+ \
+		  if (d_abs > retval) \
+		    retval = d_abs; \
+		} \
+	    } \
+	  else \
+	    { \
+	      while (i < len) \
+		{ \
+		  double d_abs = std::abs (d[i++]); \
+ \
+		  if (d_abs < retval) \
+		    retval = d_abs; \
+		} \
+	    } \
+	} \
+      else \
+	{ \
+	  retval = 0; \
+ \
+	  for (octave_idx_type i = 0; i < len; i++) \
+	    { \
+	      double d_abs = std::abs (d[i]); \
+	      retval += pow (d_abs, p); \
+	    } \
+ \
+	  retval = pow (retval, 1/p); \
+	} \
+    } \
+ \
+  return retval
+
 // Now we have all the definitions we need.
 
 #endif
diff --git a/liboctave/MArray.cc b/liboctave/MArray.cc
--- a/liboctave/MArray.cc
+++ b/liboctave/MArray.cc
@@ -28,16 +28,26 @@ 02110-1301, USA.
 #include "MArray.h"
 #include "Array-util.h"
 #include "lo-error.h"
 
 #include "MArray-defs.h"
 
 // One dimensional array with math ops.
 
+template <class T>
+double
+MArray<T>::norm (double) const
+{
+  (*current_liboctave_error_handler)
+    ("norm: only implemented for double and complex values");
+
+  return 0;
+}
+
 // Element by element MArray by scalar ops.
 
 template <class T>
 MArray<T>&
 operator += (MArray<T>& a, const T& s)
 {
   DO_VS_OP2 (T, a, +=, s)
   return a;
diff --git a/liboctave/MArray.h b/liboctave/MArray.h
--- a/liboctave/MArray.h
+++ b/liboctave/MArray.h
@@ -75,16 +75,17 @@ public:
 	{
 	  if (d[i] != T ())
 	    retval++;
 	}
 
       return retval;
     }
 
+  double norm (double p) const;
 
   // Currently, the OPS functions don't need to be friends, but that
   // may change.
 
   // MARRAY_OPS_FRIEND_DECLS (MArray)
 };
 
 #endif
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,16 @@
+2007-04-06  John W. Eaton  <jwe@octave.org>
+
+	* linear-algebra/norm.m: Use new __vnorm__ function for vector args.
+
+2007-04-06  Daniel J Sebald  <daniel.sebald@ieee.org>
+
+	* plot/stem.m: Use plot instead of a series of calls to line.
+
 2007-04-05  John W. Eaton  <jwe@octave.org>
 
 	* sparse/nonzeros.m, sparse/normest.m, sparse/spconvert.m,
 	sparse/spdiags.m, sparse/speye.m, sparse/spfun.m, sparse/spones.m,
 	sparse/sprand.m, sparse/sprandn.m, sparse/sprandsym.m,
 	sparse/spstats.m, sparse/treeplot.m: Style fixes.
 
 	* pkg/pkg.m: Use "strcat (...)" instead of "[...]".
diff --git a/scripts/linear-algebra/norm.m b/scripts/linear-algebra/norm.m
--- a/scripts/linear-algebra/norm.m
+++ b/scripts/linear-algebra/norm.m
@@ -64,24 +64,27 @@ function retval = norm (x, p)
   endif
 
   if (isempty (x))
     retval = [];
     return;
   endif
 
   if (ndims (x) > 2)
-    error ("norm: Only valid on 2-D objects")
+    error ("norm: only valid on 2-D objects")
+  endif
+
+  if (nargin == 1)
+    p = 2;
   endif
 
   ## Do we have a vector or matrix as the first argument?
 
-  if (rows (x) == 1 || columns (x) == 1)
-
-    if (nargin == 2)
+  if (is_vector (x))
+    if (isinteger (x) || issparse (x))
       if (ischar (p))
         if (strcmp (p, "fro"))
 	  retval = sqrt (sum (abs (x) .^ 2));
         elseif (strcmp (p, "inf"))
           retval = max (abs (x));
         else
           error ("norm: unrecognized norm");
         endif
@@ -89,41 +92,53 @@ function retval = norm (x, p)
         if (p == Inf)
           retval = max (abs (x));
         elseif (p == -Inf)
           retval = min (abs (x));
         else
           retval = sum (abs (x) .^ p) ^ (1/p);
         endif
       endif
-    elseif (nargin == 1)
-      retval = sqrt (sum (abs (x) .^ 2));
+    else
+      retval = __vnorm__ (x, p);
     endif
-
   else
-
-    if (nargin == 2)
-      if (ischar (p))
-        if (strcmp (p, "fro"))
-	  retval = sqrt (sum (sum (abs (x) .^ 2)));
-        elseif (strcmp (p, "inf"))
-          retval = max (sum (abs (x')));
-        else
-          error ("norm: unrecognized norm");
-        endif
+    if (ischar (p))
+      if (strcmp (p, "fro"))
+	retval = sqrt (sum (sum (abs (x) .^ 2)));
+      elseif (strcmp (p, "inf"))
+        retval = max (sum (abs (x')));
       else
-        if (p == 1)
-          retval = max (sum (abs (x)));
-        elseif (p == 2)
-          s = svd (x);
-          retval = s (1);
-        elseif (p == Inf)
-          retval = max (sum (abs (x')));
-        endif
+        error ("norm: unrecognized vector norm");
       endif
-    elseif (nargin == 1)
-      s = svd (x);
-      retval = s (1);
+    else
+      if (p == 1)
+        retval = max (sum (abs (x)));
+      elseif (p == 2)
+        s = svd (x);
+        retval = s (1);
+      elseif (p == Inf)
+        retval = max (sum (abs (x')));
+      else
+	error ("norm: unrecognized matrix norm");
+      endif
     endif
-
   endif
 
 endfunction
+
+%!shared x
+%! x = [1, -3, 4, 5, -7];
+%!assert(norm(x,1), 20);
+%!assert(norm(x,2), 10);
+%!assert(norm(x,3), 8.24257059961711, -4*eps);
+%!assert(norm(x,Inf), 7);
+%!assert(norm(x,-Inf), 1);
+%!assert(norm(x,"inf"), 7);
+%!assert(norm(x,"fro"), 10);
+%!assert(norm(x), 10);
+%!assert(norm([1e200, 1]), 1e200);
+%!shared m
+%! m = magic (4);
+%!assert(norm(m,1), 34);
+%!assert(norm(m,2), 34);
+%!assert(norm(m,Inf), 34);
+%!assert(norm(m,"inf"), 34);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,12 @@
 2007-04-06  John W. Eaton  <jwe@octave.org>
 
+	* data.cc (F__vnorm__): New function.
+
 	* pt-fcn-handle.cc (tree_anon_fcn_handle::param_list, 
 	tree_anon_fcn_handle::cmd_list,	tree_anon_fcn_handle::ret_list,
 	tree_anon_fcn_handle::sym_tab): Delete.  Remove all uses.
 	(tree_anon_fcn_handle::fcn): New data member.
 	(tree_anon_fcn_handle::tree_anon_fcn_handle): Initialize it.
 	(tree_anon_fcn_handle::rvalue, tree_anon_fcn_handle::dup):
 	Extract parameter list, return list, function body, and symbol
 	table from fcn.
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -2578,13 +2578,86 @@ Remove singleton dimensions from @var{x}
   if (args.length () == 1)
     retval = args(0).squeeze ();
   else
     print_usage ();    
 
   return retval;
 }
 
+DEFUN (__vnorm__, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} __vnorm__ (@var{x}, @var{p})\n\
+Compute various norms of the vector @var{x}.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1 || nargin == 2)
+    {
+      double p_val;
+
+      octave_value p_arg;
+
+      if (nargin == 1)
+	p_arg = 2;
+      else
+	p_arg = args(1);
+
+      if (p_arg.is_string ())
+	{
+	  std::string p = args(1).string_value ();
+
+	  if (p == "inf")
+	    p_val = octave_Inf;
+	  else if (p == "fro")
+	    p_val = -1;
+	  else
+	    {
+	      error ("norm: unrecognized norm `%s'", p.c_str ());
+	      return retval;
+	    }
+	}
+      else
+	{
+	  p_val = args(1).double_value ();
+
+	  if (error_state)
+	    {
+	      error ("norm: unrecognized norm value");
+	      return retval;
+	    }
+	}
+
+      octave_value x_arg = args(0);
+
+      if (x_arg.is_real_type ())
+	{
+	  ColumnVector x (x_arg.vector_value ());
+
+	  if (! error_state)
+	    retval = x.norm (p_val);
+	  else
+	    error ("norm: expecting real vector");
+	}
+      else
+	{
+	  ComplexColumnVector x (x_arg.complex_vector_value ());
+
+	  if (! error_state)
+	    retval = x.norm (p_val);
+	  else
+	    error ("norm: expecting complex vector");
+	}
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
