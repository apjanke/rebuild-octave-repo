# HG changeset patch
# User jwe
# Date 879502093 0
#      Fri Nov 14 10:08:13 1997 +0000
# Node ID bea2f5be3eab706a5056d7b155a450a6deb07b7d
# Parent  8ce6fed79320fcbefe35ab3b7c9b510b4d328978
[project @ 1997-11-14 10:07:50 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,12 +1,20 @@
 Fri Nov 14 01:53:13 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* parse.y (eval_string (const string&, bool, int&, int)): No
+	longer static.
+	* parse.h: Provide declaration.
+	* input.cc (get_user_input (const octave_value_list&, bool, int)):
+	New arg, nargout.  Pass it to eval_string.
+	(keyboard): Pass nargout = 0 to get_user_input.
+	(input): Pass nargout to get_user_input.
+
 	* input.cc (get_user_input (const octave_value_list&, bool)):
-	Return octave_value() if user enters `quit', `exit', or `return'.
+	Return octave_value_list() if user enters `quit', `exit', or `return'.
 	If debugging, let eval_string handle the printing chores and
 	reset error_state before asking for more input.
 
 	* input.cc (Fkeyboard): Unconditionally turn on history here.
 
 	* lex.l (have_continuation, have_ellipsis_continuation): Declare
 	arg as bool, not int.  Change callers.
 
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -469,19 +469,19 @@ match_sans_spaces (const string& standar
   size_t len = beg - end + 1;
 
   return test.compare (standard, beg, len) == 0;
 }
 
 // If the user simply hits return, this will produce an empty matrix.
 
 static octave_value_list
-get_user_input (const octave_value_list& args, bool debug = false)
+get_user_input (const octave_value_list& args, bool debug, int nargout)
 {
-  octave_value retval;
+  octave_value_list retval;
 
   int nargin = args.length ();
 
   int read_as_string = 0;
 
   if (nargin == 2)
     read_as_string++;
 
@@ -529,61 +529,63 @@ get_user_input (const octave_value_list&
 	  || match_sans_spaces ("return", input_buf))
 	{
 	  return retval;
 	}
       else if (read_as_string)
 	{
 	  // XXX FIXME XXX -- fix gnu_readline and octave_gets instead!
 	  if (input_buf.length () == 1 && input_buf[0] == '\n')
-	    retval = "";
+	    retval(0) = "";
 	  else
-	    retval = input_buf;
+	    retval(0) = input_buf;
 	}
       else
 	{
 	  int parse_status = 0;
 
-	  retval = eval_string (input_buf, (! debug), parse_status);
+	  bool silent = ! debug;
 
-	  if (retval.is_undefined ())
-	    retval = Matrix ();
+	  retval = eval_string (input_buf, silent, parse_status, nargout);
+
+	  if (! debug && retval.length == 0)
+	    retval(0) = Matrix ();
 	}
     }
   else
     error ("input: reading user-input failed!");
 
   if (debug)
     {
       // Clear error_state so that if errors were encountered while
       // evaluating user input, extra error messages will not be
       // printed after we return.
 
       error_state = 0;
 
-      retval = octave_value ();
+      retval = octave_value_list ();
 
       goto again;
     }
 
   return retval;
 }
 
-DEFUN (input, args, ,
+DEFUN (input, args, nargout,
   "input (PROMPT [, S])\n\
 \n\
 Prompt user for input.  If the second argument is present, return\n\
 value as a string.")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
-    retval = get_user_input (args);
+    retval = get_user_input (args, false, nargout);
   else
     print_usage ("input");
 
   return retval;
 }
 
 static void
 restore_command_history (void *)
@@ -610,17 +612,17 @@ maybe help in debugging function files")
       command_history::ignore_entries (false);
 
       unwind_protect::add (restore_command_history, 0);
 
       unwind_protect_bool (Vsaving_history);
 
       Vsaving_history = true;
 
-      retval = get_user_input (args, true);
+      retval = get_user_input (args, true, 0);
 
       unwind_protect::run_frame ("keyboard");
     }
   else
     print_usage ("keyboard");
 
   return retval;
 }
diff --git a/src/parse.h b/src/parse.h
--- a/src/parse.h
+++ b/src/parse.h
@@ -79,17 +79,17 @@ parse_and_execute (const string& s, bool
 extern string get_help_from_file (const string& f);
 
 extern bool
 load_fcn_from_file (symbol_record *sym_rec, bool exec_script);
 
 extern octave_value_list
 feval (const octave_value_list& args, int nargout);
 
-extern octave_value
+extern octave_value_list
 eval_string (const string&, bool silent, int& parse_status, int hargout);
 
 extern octave_value
 eval_string (const string&, bool silent, int& parse_status);
 
 #endif
 
 /*
