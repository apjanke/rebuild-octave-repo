# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1350349362 14400
#      Mon Oct 15 21:02:42 2012 -0400
# Node ID 9a7f73fc304fe029465af355d414c582273e97f9
# Parent  8d2b3db8b5b0bb0cee496dfbe43e4b36c1a9c532
Fix wavwrite to accept a row vector input (bug #37540)

* wavwrite.m: Accept a row vector as a single audio channel. Update
docstring and add a test case.

diff --git a/scripts/audio/wavwrite.m b/scripts/audio/wavwrite.m
--- a/scripts/audio/wavwrite.m
+++ b/scripts/audio/wavwrite.m
@@ -18,17 +18,18 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} wavwrite (@var{y}, @var{filename})
 ## @deftypefnx {Function File} {} wavwrite (@var{y}, @var{Fs}, @var{filename})
 ## @deftypefnx {Function File} {} wavwrite (@var{y}, @var{Fs}, @var{bps}, @var{filename})
 ## Write @var{y} to the canonical RIFF/WAVE sound file @var{filename}
 ## with sample rate @var{Fs} and bits per sample @var{bps}.  The
 ## default sample rate is 8000 Hz with 16-bits per sample.  Each column
-## of the data represents a separate channel.
+## of the data represents a separate channel.  If @var{y} is either a
+## row vector or a column vector, it is written as a single channel.
 ## @seealso{wavread}
 ## @end deftypefn
 
 ## Author: Michael Zeising <michael@michaels-website.de>
 ## Created: 06 December 2005
 
 function wavwrite (y, varargin)
 
@@ -45,39 +46,45 @@ function wavwrite (y, varargin)
   filename = varargin{end};
   if (nargin > 2)
     samples_per_sec = varargin{1};
     if (nargin > 3)
       bits_per_sample = varargin{2};
     endif
   endif
 
+  ## calculate filesize
+  [n, channels] = size (y);
+
+  ## allow y to be a row vector
+  if (n == 1)
+    n = channels;
+    channels = 1;
+  endif
+
   ## test arguments
-  if (columns (y) < 1)
+  if (channels < 1)
     error ("wavwrite: Y must have at least one column");
   endif
-  if (columns (y) > 0x7FFF)
+  if (channels > 0x7FFF)
     error ("wavwrite: Y has more than 32767 columns (too many for a WAV-file)");
   endif
 
   ## determine sample format
   switch (bits_per_sample)
     case 8
       format = "uint8";
     case 16
       format = "int16";
     case 32
       format = "int32";
     otherwise
       error ("wavwrite: sample resolution not supported");
   endswitch
 
-  ## calculate filesize
-  [n, channels] = size (y);
-
   ## size of data chunk
   ck_size = n*channels*(bits_per_sample/8);
 
   if (! ischar (filename))
     error ("wavwrite: expecting FILENAME to be a character string");
   endif
 
   ## open file for writing binary
@@ -169,15 +176,24 @@ endfunction
 %! wavwrite (A, 4000, 8, fname);
 %! [B, samples_per_sec, bits_per_sample] = wavread (fname);
 %! assert (A,B, 1/128);
 %! assert (samples_per_sec, 4000);
 %! assert (bits_per_sample, 8);
 %! unlink (fname);
 %
 %!test
-%! A = [-2:2];
+%! A = [-2:2]';
 %! wavwrite (A, fname);
 %! B = wavread (fname);
 %! B *= 32768;
-%! assert (B, [-32768 -32768 0 32767 32767]);
+%! assert (B, [-32768 -32768 0 32767 32767]');
+%! unlink (fname);
+%
+%!test
+%! A = [-1:0.1:1];
+%! wavwrite (A, fname);
+%! [B, samples_per_sec, bits_per_sample] = wavread (fname);
+%! assert (A', B, 1/2^15);
+%! assert (samples_per_sec, 8000);
+%! assert (bits_per_sample, 16);
 %! unlink (fname);
 
