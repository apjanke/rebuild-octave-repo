# HG changeset patch
# User Rik <rik@octave.org>
# Date 1533057437 25200
#      Tue Jul 31 10:17:17 2018 -0700
# Node ID 39fd627b2c5da4aa10d40be3b4f0f87d81814cca
# Parent  35002c2b886b9db9c11238234dda51043b2b7cbb
Emit an immediate error if size of an octave_stream object is invalid (bug #54405).

* oct-stream.cc (get_size (double d, ...)): Change error message about NaN as
invalid size specifier to match other errors of same type.
* oct-stream.cc (get_size (const Array<double>& size, ...)): Change error
message about infinite value as size specifier to match other errors of same
type.  Change error about invalid size to include extra message that size must
be 2-D.  Check for overflow of octave_idx_type and emit immediate
exception-based error if encountered.
* oct-stream.cc (stream::read): Remove FIXME about checking for overflow.

diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -117,17 +117,17 @@ namespace octave
   }
 
   static octave_idx_type
   get_size (double d, const std::string& who)
   {
     octave_idx_type retval = -1;
 
     if (lo_ieee_isnan (d))
-      ::error ("%s: NaN is invalid as size specification", who.c_str ());
+      ::error ("%s: NaN invalid as size specification", who.c_str ());
 
     if (math::isinf (d))
       retval = -1;
     else
       {
         if (d < 0.0)
           ::error ("%s: negative value invalid as size specification",
                    who.c_str ());
@@ -165,27 +165,35 @@ namespace octave
 
         dnc = (dnr == 0.0) ? 0.0 : 1.0;
       }
     else if (sz_len == 2)
       {
         dnr = size(0);
 
         if (math::isinf (dnr))
-          ::error ("%s: invalid size specification", who.c_str ());
+          ::error ("%s: infinite value invalid as size specification",
+                   who.c_str ());
 
         dnc = size(1);
       }
     else
-      ::error ("%s: invalid size specification", who.c_str ());
+      ::error ("%s: invalid size specification (must be 2-D)", who.c_str ());
 
     nr = get_size (dnr, who);
 
     if (dnc >= 0.0)
-      nc = get_size (dnc, who);
+      {
+        nc = get_size (dnc, who);
+
+        // Check for overflow.
+        if (nr != 0 &&
+            abs (nc) > abs (std::numeric_limits<octave_idx_type>::max () / nr))
+         ::error ("%s: size too large for Octave's index type", who.c_str ());
+      }
   }
 
   static std::string
   expand_char_class (const std::string& s)
   {
     std::string retval;
 
     size_t len = s.length ();
@@ -6563,19 +6571,16 @@ namespace octave
 
         // If NC < 0 we have [NR, Inf] and we'll wait to decide how big NC
         // should be.
 
         if (nr == 0 || nc == 0)
           nr = nc = 0;
       }
 
-    // FIXME: Ensure that this does not overflow.
-    //        Maybe try comparing nr * nc computed in double with
-    //        std::numeric_limits<octave_idx_type>::max ();
     octave_idx_type elts_to_read = nr * nc;
 
     bool read_to_eof = elts_to_read < 0;
 
     octave_idx_type input_buf_elts = -1;
 
     if (skip == 0)
       {
