# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1455812387 18000
#      Thu Feb 18 11:19:47 2016 -0500
# Node ID 3d375b0905a02a8dec7f07cbef32a57df269925a
# Parent  350caa6afadf6861b9010c7eed4ca5658b010ef9
eliminate unused << and >> operators from Octave scripting language

* ov.h, ov.cc (binary_op): Remove op_lshift and op_rshift from the
list of binary operators.  Delete all uses.
(assign_op): Remove op_lshift_eq and op_rshift_eq from the list of
assignment operators.  Delete all uses.

* lex.ll, oct-parse.in.yy (LSHIFT, RSHIFT, LSHIFT_EQ, RSHIFT_EQ):
Delete tokens.

diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -184,22 +184,16 @@ octave_value::binary_op_as_string (binar
       return "/";
 
     case op_pow:
       return "^";
 
     case op_ldiv:
       return "\\";
 
-    case op_lshift:
-      return "<<";
-
-    case op_rshift:
-      return ">>";
-
     case op_lt:
       return "<";
 
     case op_le:
       return "<=";
 
     case op_eq:
       return "==";
@@ -364,22 +358,16 @@ octave_value::assign_op_as_string (assig
       return "/=";
 
     case op_ldiv_eq:
       return "\\=";
 
     case op_pow_eq:
       return "^=";
 
-    case op_lshift_eq:
-      return "<<=";
-
-    case op_rshift_eq:
-      return ">>=";
-
     case op_el_mul_eq:
       return ".*=";
 
     case op_el_div_eq:
       return "./=";
 
     case op_el_ldiv_eq:
       return ".\\=";
@@ -416,22 +404,16 @@ octave_value::assign_op_to_binary_op (as
       return op_div;
 
     case op_ldiv_eq:
       return op_ldiv;
 
     case op_pow_eq:
       return op_pow;
 
-    case op_lshift_eq:
-      return op_lshift;
-
-    case op_rshift_eq:
-      return op_rshift;
-
     case op_el_mul_eq:
       return op_el_mul;
 
     case op_el_div_eq:
       return op_el_div;
 
     case op_el_ldiv_eq:
       return op_el_ldiv;
@@ -2607,22 +2589,16 @@ octave_value::op_eq_to_binary_op (assign
       return op_div;
 
     case op_ldiv_eq:
       return op_ldiv;
 
     case op_pow_eq:
       return op_pow;
 
-    case op_lshift_eq:
-      return op_lshift;
-
-    case op_rshift_eq:
-      return op_rshift;
-
     case op_el_mul_eq:
       return op_el_mul;
 
     case op_el_div_eq:
       return op_el_div;
 
     case op_el_ldiv_eq:
       return op_el_ldiv;
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -89,18 +89,16 @@ public:
   enum binary_op
   {
     op_add,            // plus
     op_sub,            // minus
     op_mul,            // mtimes
     op_div,            // mrdivide
     op_pow,            // mpower
     op_ldiv,           // mldivide
-    op_lshift,
-    op_rshift,
     op_lt,             // lt
     op_le,             // le
     op_eq,             // eq
     op_ge,             // ge
     op_gt,             // gt
     op_ne,             // ne
     op_el_mul,         // times
     op_el_div,         // rdivide
@@ -134,18 +132,16 @@ public:
   {
     op_asn_eq,
     op_add_eq,
     op_sub_eq,
     op_mul_eq,
     op_div_eq,
     op_ldiv_eq,
     op_pow_eq,
-    op_lshift_eq,
-    op_rshift_eq,
     op_el_mul_eq,
     op_el_div_eq,
     op_el_ldiv_eq,
     op_el_pow_eq,
     op_el_and_eq,
     op_el_or_eq,
     num_assign_ops,
     unknown_assign_op
@@ -1502,18 +1498,16 @@ OV_UNOP_FN (op_hermitian)
 
 OV_BINOP_FN_OP (op_add, +)
 OV_BINOP_FN_OP (op_sub, -)
 OV_BINOP_FN_OP (op_mul, *)
 OV_BINOP_FN_OP (op_div, /)
 
 OV_BINOP_FN (op_pow)
 OV_BINOP_FN (op_ldiv)
-OV_BINOP_FN (op_lshift)
-OV_BINOP_FN (op_rshift)
 
 OV_BINOP_FN_OP (op_lt, <)
 OV_BINOP_FN_OP (op_le, <=)
 OV_BINOP_FN_OP (op_eq, ==)
 OV_BINOP_FN_OP (op_ge, >=)
 OV_BINOP_FN_OP (op_gt, >)
 OV_BINOP_FN_OP (op_ne, !=)
 
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1534,18 +1534,16 @@ ANY_INCLUDING_NL (.|{NL})
 %}
 
 "\\"  { return curr_lexer->handle_op ("\\", LEFTDIV); }
 
 "^"   { CMD_OR_OP ("^", POW, true); }
 "**"  { CMD_OR_OP ("**", POW, false); }
 "&&"  { CMD_OR_OP ("&&", EXPR_AND_AND, true); }
 "||"  { CMD_OR_OP ("||", EXPR_OR_OR, true); }
-"<<"  { CMD_OR_OP ("<<", LSHIFT, false); }
-">>"  { CMD_OR_OP (">>", RSHIFT, false); }
 
 ";" {
     bool at_beginning_of_statement
       = (! (curr_lexer->whitespace_is_significant ()
             || curr_lexer->looking_at_object_index.front ()));
 
     return curr_lexer->handle_op (";", ';', at_beginning_of_statement);
   }
@@ -1673,18 +1671,16 @@ ANY_INCLUDING_NL (.|{NL})
 "./="  { CMD_OR_COMPUTED_ASSIGN_OP ("./=", EDIV_EQ); }
 ".\\=" { CMD_OR_COMPUTED_ASSIGN_OP (".\\=", ELEFTDIV_EQ); }
 "^="   { CMD_OR_COMPUTED_ASSIGN_OP ("^=", POW_EQ); }
 "**="  { CMD_OR_COMPUTED_ASSIGN_OP ("^=", POW_EQ); }
 ".^="  { CMD_OR_COMPUTED_ASSIGN_OP (".^=", EPOW_EQ); }
 ".**=" { CMD_OR_COMPUTED_ASSIGN_OP (".^=", EPOW_EQ); }
 "&="   { CMD_OR_COMPUTED_ASSIGN_OP ("&=", AND_EQ); }
 "|="   { CMD_OR_COMPUTED_ASSIGN_OP ("|=", OR_EQ); }
-"<<="  { CMD_OR_COMPUTED_ASSIGN_OP ("<<=", LSHIFT_EQ); }
-">>="  { CMD_OR_COMPUTED_ASSIGN_OP (">>=", RSHIFT_EQ); }
 
 %{
 // In Matlab, '{' may also trigger command syntax.
 %}
 
 "{" {
     curr_lexer->lexer_debug ("{");
 
@@ -2180,19 +2176,18 @@ lexical_feedback::previous_token_is_bino
           || tok == AND_EQ || tok == DIV_EQ || tok == EDIV
           || tok == EDIV_EQ || tok == ELEFTDIV || tok == ELEFTDIV_EQ
           || tok == EMINUS || tok == EMUL || tok == EMUL_EQ
           || tok == EPOW || tok == EPOW_EQ || tok == EXPR_AND
           || tok == EXPR_AND_AND || tok == EXPR_EQ || tok == EXPR_GE
           || tok == EXPR_GT || tok == EXPR_LE || tok == EXPR_LT
           || tok == EXPR_NE || tok == EXPR_NOT || tok == EXPR_OR
           || tok == EXPR_OR_OR || tok == LEFTDIV || tok == LEFTDIV_EQ
-          || tok == LSHIFT || tok == LSHIFT_EQ || tok == MUL_EQ
-          || tok == OR_EQ || tok == POW || tok == POW_EQ
-          || tok == RSHIFT || tok == RSHIFT_EQ || tok == SUB_EQ);
+          || tok == MUL_EQ || tok == OR_EQ || tok == POW
+          || tok == POW_EQ || tok == SUB_EQ);
 }
 
 bool
 lexical_feedback::previous_token_is_keyword (void) const
 {
   const token *tok = tokens.front ();
   return tok ? tok->is_keyword () : false;
 }
@@ -3223,20 +3218,16 @@ octave_base_lexer::display_token (int to
     case LEFTDIV_EQ: std::cerr << "LEFTDIV_EQ\n"; break;
     case POW_EQ: std::cerr << "POW_EQ\n"; break;
     case EMUL_EQ: std::cerr << "EMUL_EQ\n"; break;
     case EDIV_EQ: std::cerr << "EDIV_EQ\n"; break;
     case ELEFTDIV_EQ: std::cerr << "ELEFTDIV_EQ\n"; break;
     case EPOW_EQ: std::cerr << "EPOW_EQ\n"; break;
     case AND_EQ: std::cerr << "AND_EQ\n"; break;
     case OR_EQ: std::cerr << "OR_EQ\n"; break;
-    case LSHIFT_EQ: std::cerr << "LSHIFT_EQ\n"; break;
-    case RSHIFT_EQ: std::cerr << "RSHIFT_EQ\n"; break;
-    case LSHIFT: std::cerr << "LSHIFT\n"; break;
-    case RSHIFT: std::cerr << "RSHIFT\n"; break;
     case EXPR_AND_AND: std::cerr << "EXPR_AND_AND\n"; break;
     case EXPR_OR_OR: std::cerr << "EXPR_OR_OR\n"; break;
     case EXPR_AND: std::cerr << "EXPR_AND\n"; break;
     case EXPR_OR: std::cerr << "EXPR_OR\n"; break;
     case EXPR_NOT: std::cerr << "EXPR_NOT\n"; break;
     case EXPR_LT: std::cerr << "EXPR_LT\n"; break;
     case EXPR_LE: std::cerr << "EXPR_LE\n"; break;
     case EXPR_EQ: std::cerr << "EXPR_EQ\n"; break;
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -203,17 +203,16 @@ static void yyerror (octave_base_parser&
   tree_classdef_enum_list* tree_classdef_enum_list_type;
   tree_classdef_enum_block* tree_classdef_enum_block_type;
 }
 
 // Tokens with line and column information.
 %token <tok_val> '=' ':' '-' '+' '*' '/'
 %token <tok_val> ADD_EQ SUB_EQ MUL_EQ DIV_EQ LEFTDIV_EQ POW_EQ
 %token <tok_val> EMUL_EQ EDIV_EQ ELEFTDIV_EQ EPOW_EQ AND_EQ OR_EQ
-%token <tok_val> LSHIFT_EQ RSHIFT_EQ LSHIFT RSHIFT
 %token <tok_val> EXPR_AND_AND EXPR_OR_OR
 %token <tok_val> EXPR_AND EXPR_OR EXPR_NOT
 %token <tok_val> EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
 %token <tok_val> LEFTDIV EMUL EDIV ELEFTDIV EPLUS EMINUS
 %token <tok_val> HERMITIAN TRANSPOSE
 %token <tok_val> PLUS_PLUS MINUS_MINUS POW EPOW
 %token <tok_val> NUM IMAG_NUM
 %token <tok_val> STRUCT_ELT
@@ -300,23 +299,22 @@ static void yyerror (octave_base_parser&
 %type <tree_classdef_events_block_type> events_block
 %type <tree_classdef_enum_type> class_enum
 %type <tree_classdef_enum_list_type> enum_list
 %type <tree_classdef_enum_block_type> enum_block
 %type <tree_function_def_type> method_decl method
 %type <octave_user_function_type> method_decl1
 
 // Precedence and associativity.
-%right '=' ADD_EQ SUB_EQ MUL_EQ DIV_EQ LEFTDIV_EQ POW_EQ EMUL_EQ EDIV_EQ ELEFTDIV_EQ EPOW_EQ OR_EQ AND_EQ LSHIFT_EQ RSHIFT_EQ
+%right '=' ADD_EQ SUB_EQ MUL_EQ DIV_EQ LEFTDIV_EQ POW_EQ EMUL_EQ EDIV_EQ ELEFTDIV_EQ EPOW_EQ OR_EQ AND_EQ
 %left EXPR_OR_OR
 %left EXPR_AND_AND
 %left EXPR_OR
 %left EXPR_AND
 %left EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
-%left LSHIFT RSHIFT
 %left ':'
 %left '-' '+' EPLUS EMINUS
 %left '*' '/' LEFTDIV EMUL EDIV ELEFTDIV
 %right UNARY EXPR_NOT
 %left POW EPOW HERMITIAN TRANSPOSE
 %right PLUS_PLUS MINUS_MINUS
 %left '(' '.' '{'
 
@@ -827,20 +825,16 @@ colon_expr1     : oper_expr
                         delete $3;
                         YYABORT;
                       }
                   }
                 ;
 
 simple_expr     : colon_expr
                   { $$ = $1; }
-                | simple_expr LSHIFT simple_expr
-                  { $$ = parser.make_binary_op (LSHIFT, $1, $2, $3); }
-                | simple_expr RSHIFT simple_expr
-                  { $$ = parser.make_binary_op (RSHIFT, $1, $2, $3); }
                 | simple_expr EXPR_LT simple_expr
                   { $$ = parser.make_binary_op (EXPR_LT, $1, $2, $3); }
                 | simple_expr EXPR_LE simple_expr
                   { $$ = parser.make_binary_op (EXPR_LE, $1, $2, $3); }
                 | simple_expr EXPR_EQ simple_expr
                   { $$ = parser.make_binary_op (EXPR_EQ, $1, $2, $3); }
                 | simple_expr EXPR_GE simple_expr
                   { $$ = parser.make_binary_op (EXPR_GE, $1, $2, $3); }
@@ -881,20 +875,16 @@ assign_expr     : assign_lhs '=' express
                 | assign_lhs MUL_EQ expression
                   { $$ = parser.make_assign_op (MUL_EQ, $1, $2, $3); }
                 | assign_lhs DIV_EQ expression
                   { $$ = parser.make_assign_op (DIV_EQ, $1, $2, $3); }
                 | assign_lhs LEFTDIV_EQ expression
                   { $$ = parser.make_assign_op (LEFTDIV_EQ, $1, $2, $3); }
                 | assign_lhs POW_EQ expression
                   { $$ = parser.make_assign_op (POW_EQ, $1, $2, $3); }
-                | assign_lhs LSHIFT_EQ expression
-                  { $$ = parser.make_assign_op (LSHIFT_EQ, $1, $2, $3); }
-                | assign_lhs RSHIFT_EQ expression
-                  { $$ = parser.make_assign_op (RSHIFT_EQ, $1, $2, $3); }
                 | assign_lhs EMUL_EQ expression
                   { $$ = parser.make_assign_op (EMUL_EQ, $1, $2, $3); }
                 | assign_lhs EDIV_EQ expression
                   { $$ = parser.make_assign_op (EDIV_EQ, $1, $2, $3); }
                 | assign_lhs ELEFTDIV_EQ expression
                   { $$ = parser.make_assign_op (ELEFTDIV_EQ, $1, $2, $3); }
                 | assign_lhs EPOW_EQ expression
                   { $$ = parser.make_assign_op (EPOW_EQ, $1, $2, $3); }
@@ -2432,24 +2422,16 @@ octave_base_parser::make_binary_op (int 
     case LEFTDIV:
       t = octave_value::op_ldiv;
       break;
 
     case ELEFTDIV:
       t = octave_value::op_el_ldiv;
       break;
 
-    case LSHIFT:
-      t = octave_value::op_lshift;
-      break;
-
-    case RSHIFT:
-      t = octave_value::op_rshift;
-      break;
-
     case EXPR_LT:
       t = octave_value::op_lt;
       break;
 
     case EXPR_LE:
       t = octave_value::op_le;
       break;
 
@@ -2998,24 +2980,16 @@ octave_base_parser::make_assign_op (int 
     case LEFTDIV_EQ:
       t = octave_value::op_ldiv_eq;
       break;
 
     case POW_EQ:
       t = octave_value::op_pow_eq;
       break;
 
-    case LSHIFT_EQ:
-      t = octave_value::op_lshift_eq;
-      break;
-
-    case RSHIFT_EQ:
-      t = octave_value::op_rshift_eq;
-      break;
-
     case EMUL_EQ:
       t = octave_value::op_el_mul_eq;
       break;
 
     case EDIV_EQ:
       t = octave_value::op_el_div_eq;
       break;
 
