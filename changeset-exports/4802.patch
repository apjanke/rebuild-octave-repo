# HG changeset patch
# User jwe
# Date 1077686059 0
#      Wed Feb 25 05:14:19 2004 +0000
# Node ID b3f20980be326fda07aea2a1f57345d1259a171c
# Parent  b022780ac0b494347788dc9d6d440dde192aa8f4
[project @ 2004-02-25 05:14:19 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,21 @@
 2004-02-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* oct-rl-edit.c (octave_rl_set_startup_hook,
+	octave_rl_get_startup_hook, octave_rl_set_event_hook,
+	octave_rl_get_event_hook): Omit casts.
+	* oct-rl-edit.h (rl_startup_hook_fcn_ptr, rl_event_hook_fcn_ptr):
+	Return value for function pointer typedef is now int.
+	* cmd-edit.h (command_editor::startup_hook_fcn,
+	command_editor::event_hook_fcn): Likewise.
+	* cmd-hist.cc, cmd-hist.h (command_history::goto_mark,
+	command_history::do_goto_mark, gnu_history::do_goto_mark):
+	Return type is now int.  Return 0.
+
 	* EIG.cc (EIG::init, EIG::symmetric_init):
 	Query Lapack for workspace size.
 
 2004-02-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array.cc (Array<T>::resize_and_fill (const dim_vector&, const T&)): 
 	Fix thinko in extending dimensions.
 
diff --git a/liboctave/cmd-edit.h b/liboctave/cmd-edit.h
--- a/liboctave/cmd-edit.h
+++ b/liboctave/cmd-edit.h
@@ -34,19 +34,19 @@ command_editor
 {
 protected:
 
   command_editor (void)
     : command_number (0) { }
 
 public:
 
-  typedef void (*startup_hook_fcn) (void);
+  typedef int (*startup_hook_fcn) (void);
 
-  typedef void (*event_hook_fcn) (void);
+  typedef int (*event_hook_fcn) (void);
 
   typedef std::string (*completion_fcn) (const std::string&, int);
 
   virtual ~command_editor (void) { }
 
   static void set_name (const std::string& n);
 
   static std::string readline (const std::string& prompt);
diff --git a/liboctave/cmd-hist.cc b/liboctave/cmd-hist.cc
--- a/liboctave/cmd-hist.cc
+++ b/liboctave/cmd-hist.cc
@@ -82,17 +82,17 @@ public:
   void do_stifle (int);
 
   int do_unstifle (void);
 
   int do_is_stifled (void);
 
   void do_set_mark (int);
 
-  void do_goto_mark (void);
+  int do_goto_mark (void);
 
   void do_read (const std::string&, bool);
 
   void do_read_range (const std::string&, int, int, bool);
 
   void do_write (const std::string&);
 
   void do_append (const std::string&);
@@ -182,17 +182,17 @@ gnu_history::do_is_stifled (void)
 }
 
 void
 gnu_history::do_set_mark (int n)
 {
   mark = n;
 }
 
-void
+int
 gnu_history::do_goto_mark (void)
 {
   if (mark)
     {
       char *line = ::octave_history_goto_mark (mark);
 
       if (line)
 	{
@@ -201,16 +201,18 @@ gnu_history::do_goto_mark (void)
 	  command_editor::clear_undo_list ();
 	}
     }
 
   mark = 0;
 
   // XXX FIXME XXX -- for operate_and_get_next.
   command_editor::restore_startup_hook ();
+
+  return 0;
 }
 
 void
 gnu_history::do_read (const std::string& f, bool must_exist)
 {
   if (! f.empty ())
     {
       int status = ::octave_read_history (f.c_str ());
@@ -523,21 +525,21 @@ command_history::is_stifled (void)
 
 void
 command_history::set_mark (int n)
 {
   if (instance_ok ())
     instance->do_set_mark (n);
 }
 
-void
+int
 command_history::goto_mark (void)
 {
-  if (instance_ok ())
-    instance->do_goto_mark ();
+  return (instance_ok ())
+    ? instance->do_goto_mark () : 0;
 }
 
 void
 command_history::read (bool must_exist)
 {
   read (file (), must_exist);
 }
 
@@ -704,19 +706,20 @@ command_history::do_is_stifled (void)
   return 0;
 }
 
 void
 command_history::do_set_mark (int)
 {
 }
 
-void
+int
 command_history::do_goto_mark (void)
 {
+  return 0;
 }
 
 void
 command_history::do_read (const std::string& f, bool)
 {
   if (f.empty ())
     error ("command_history::read: missing file name");
 }
diff --git a/liboctave/cmd-hist.h b/liboctave/cmd-hist.h
--- a/liboctave/cmd-hist.h
+++ b/liboctave/cmd-hist.h
@@ -72,17 +72,17 @@ public:
 
   static int is_stifled (void);
 
   static void set_mark (int n);
 
   // Gag.  This declaration has to match the Function typedef in
   // readline.h.
 
-  static void goto_mark (void);
+  static int goto_mark (void);
 
   static void read (bool = true);
 
   static void read (const std::string&, bool = true);
 
   static void read_range (int = -1, int = -1, bool = true);
 
   static void read_range (const std::string&, int = -1, int = -1,
@@ -152,17 +152,17 @@ protected:
   virtual void do_stifle (int);
 
   virtual int do_unstifle (void);
 
   virtual int do_is_stifled (void);
 
   virtual void do_set_mark (int);
 
-  virtual void do_goto_mark (void);
+  virtual int do_goto_mark (void);
 
   virtual void do_read (const std::string&, bool);
 
   virtual void do_read_range (const std::string&, int, int, bool);
 
   virtual void do_write (const std::string&);
 
   virtual void do_append (const std::string&);
diff --git a/liboctave/oct-rl-edit.c b/liboctave/oct-rl-edit.c
--- a/liboctave/oct-rl-edit.c
+++ b/liboctave/oct-rl-edit.c
@@ -234,37 +234,35 @@ void
 octave_rl_set_completion_function (rl_attempted_completion_fcn_ptr f)
 {
   rl_attempted_completion_function = f;
 }
 
 void
 octave_rl_set_startup_hook (rl_startup_hook_fcn_ptr f)
 {
-  void **fp = (void **) (&rl_startup_hook);
-  *fp = (void *) f;
+  rl_startup_hook = f;
 }
 
 rl_startup_hook_fcn_ptr
 octave_rl_get_startup_hook (void)
 {
-  return (rl_startup_hook_fcn_ptr) rl_startup_hook;
+  return rl_startup_hook;
 }
 
 void
 octave_rl_set_event_hook (rl_event_hook_fcn_ptr f)
 {
-  void **fp = (void **) (&rl_event_hook);
-  *fp = (void *) f;
+  rl_event_hook = f;
 }
 
 rl_event_hook_fcn_ptr
 octave_rl_get_event_hook (void)
 {
-  return (rl_event_hook_fcn_ptr) rl_event_hook;
+  return rl_event_hook;
 }
 
 char **
 octave_rl_completion_matches (const char *text, rl_completer_fcn_ptr f)
 {
   return rl_completion_matches (text, f);
 }
 
diff --git a/liboctave/oct-rl-edit.h b/liboctave/oct-rl-edit.h
--- a/liboctave/oct-rl-edit.h
+++ b/liboctave/oct-rl-edit.h
@@ -18,19 +18,19 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_rl_edit_h)
 #define octave_rl_edit_h 1
 
-typedef void (*rl_startup_hook_fcn_ptr) (void);
+typedef int (*rl_startup_hook_fcn_ptr) (void);
 
-typedef void (*rl_event_hook_fcn_ptr) (void);
+typedef int (*rl_event_hook_fcn_ptr) (void);
 
 typedef int (*rl_fcn_ptr) (int, int);
 
 typedef char ** (*rl_attempted_completion_fcn_ptr) (const char *, int, int);
 
 typedef char * (*rl_completer_fcn_ptr) (const char *, int);
 
 #ifdef __cplusplus
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,12 @@
 2004-02-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* input.cc (input_event_hook): Return type is now int.  Return 0.
+
 	* file-io.cc (do_stream_open): Don't call ::error if stream can't
 	be created.  Don't call ::fopen if arch is invalid.  Set error
 	state for stream if fopen fails.
 	* oct-stream.h (octave_stream::error (const char *)): New function.
 	(octave_stream::error (const std::string&)): Now public.
 
 2004-02-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -944,33 +944,35 @@ Read the readline library initialiazatio
     print_usage ("read_readline_init_file");
 
   return retval;
 }
 
 static std::string hook_fcn;
 static octave_value user_data;
 
-static void
+static int
 input_event_hook (void)
 {
   if (is_valid_function (hook_fcn))
     {
       if (user_data.is_defined ())
 	feval (hook_fcn, user_data, 0);
       else
 	feval (hook_fcn, octave_value_list (), 0);
     }
   else
     {
       hook_fcn = std::string ();
       user_data = octave_value ();
 
       command_editor::set_event_hook (0);
-    }      
+    }
+
+  return 0;
 }
 
 DEFUN (input_event_hook, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{ofcn}, @var{odata}] =} input_event_hook (@var{fcn}, @var{data})\n\
 Given the name of a function as a string and any Octave value object,\n\
 install @var{fcn} as a function to call periodically, when Octave is\n\
 waiting for input.  The function should have the form\n\
