# HG changeset patch
# User Rik <rik@octave.org>
# Date 1546638791 28800
#      Fri Jan 04 13:53:11 2019 -0800
# Branch stable
# Node ID ff6c90eb6f2d74257fd3fc784037d5ce4e14df13
# Parent  93c4fabb2ead1be8654de1aa119cdf7d96f4406e
mkoctfile.in.cc: Fix static analyzer detected issues (bug #55347).

* mkoctfile.in.cc: Within link_stand_alone block, define octave_libs variable
to "OCTAVE_LIBS".  Also, add "-LOCTLIBDIR" to cmd string for stand-alone linking.
For normal linking, only define octave_libs variable for non-Linux platforms.

diff --git a/src/mkoctfile.in.cc b/src/mkoctfile.in.cc
--- a/src/mkoctfile.in.cc
+++ b/src/mkoctfile.in.cc
@@ -211,19 +211,18 @@ initialize (void)
 
   if (vars["INCLUDEDIR"] != "/usr/include")
     DEFAULT_INCFLAGS += " -I" + quote_path (vars["INCLUDEDIR"]);
 
   std::string DEFAULT_LDFLAGS;
 
 #if (defined (OCTAVE_USE_WINDOWS_API) || defined (CROSS)) || (defined __APPLE__ && defined __MACH__)
 
-  // We'll be linking the files we compile with -loctinterp and
-  // -loctave, so we need to know where to find them.
-
+  // We'll be linking the files we compile with -loctinterp and -loctave,
+  // so we need to know where to find them.
   DEFAULT_LDFLAGS += "-L" + quote_path (vars["OCTLIBDIR"]);
 #endif
 
   if (vars["LIBDIR"] != "/usr/lib")
     DEFAULT_LDFLAGS += " -L" + quote_path (vars["LIBDIR"]);
 
   vars["CPPFLAGS"] = get_variable ("CPPFLAGS", %OCTAVE_CONF_CPPFLAGS%);
 
@@ -1078,30 +1077,31 @@ main (int argc, char **argv)
   // FIXME: Remove LFLAGS in Octave 7.0
   if (vars["LFLAGS"] != vars["LDFLAGS"])
     {
       std::cerr << "warning: LFLAGS is deprecated and will be removed in a future version of Octave, use LDFLAGS instead" << std::endl;
       vars["LDFLAGS"] = vars["LFLAGS"];
     }
 
   std::string octave_libs;
-#if defined (OCTAVE_USE_WINDOWS_API) || defined(CROSS)
-  octave_libs = "-loctinterp -loctave";
-#endif
 
   if (link_stand_alone)
     {
       if (! vars["LD_CXX"].empty ())
         {
+          octave_libs = vars["OCTAVE_LIBS"];
+
           std::string cmd
             = (vars["LD_CXX"] + ' ' + vars["CPPFLAGS"] + ' '
                + vars["ALL_CXXFLAGS"] + ' ' + vars["RDYNAMIC_FLAG"] + ' '
                + vars["ALL_LDFLAGS"] + ' ' + pass_on_options + ' '
                + output_option + ' ' + objfiles + ' ' + libfiles + ' '
-               + ldflags + ' ' + vars["LDFLAGS"] + ' ' + octave_libs + ' '
+               + ldflags + ' ' + vars["LDFLAGS"]
+               + " -L" + quote_path (vars["OCTLIBDIR"])
+               + ' ' + octave_libs + ' '
                + vars["OCTAVE_LINK_OPTS"] + ' ' + vars["OCTAVE_LINK_DEPS"]);
 
           int status = run_command (cmd, printonly);
 
           clean_up_tmp_files (tmp_objfiles);
 
           if (status)
             return status;
@@ -1111,16 +1111,20 @@ main (int argc, char **argv)
           std::cerr
             << "mkoctfile: no way to link stand-alone executable file"
             << std::endl;
           return 1;
         }
     }
   else
     {
+#if defined (OCTAVE_USE_WINDOWS_API) || defined(CROSS)
+      octave_libs = vars["OCTAVE_LIBS"];
+#endif
+
       std::string cmd
         = (vars["DL_LD"] + ' ' + vars["ALL_CXXFLAGS"] + ' '
            + vars["DL_LDFLAGS"] + ' ' + pass_on_options
            + " -o " + octfile + ' ' + objfiles + ' ' + libfiles + ' '
            + ldflags + ' ' + vars["LDFLAGS"] + ' ' + octave_libs + ' '
            + vars["OCT_LINK_OPTS"] + ' ' + vars["OCT_LINK_DEPS"]);
 
       int status = run_command (cmd, printonly);
