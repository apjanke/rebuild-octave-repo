# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1412217544 14400
#      Wed Oct 01 22:39:04 2014 -0400
# Node ID 068a3e51b7b834eeafbfa962199eb0ffee3ec1dc
# Parent  3a6fd52e1458d4f6876bd7a0b56720c1a04fc3e3
ellipj: Fix continuity of dn output when cn is near zero (bug #43344)

* lo-specfun.cc (ellipj): Fix continuity of the dn output, the current
method results in a discontinuity when cn is near zero.
* ellipj.cc: Add test for bug #43344.

diff --git a/libinterp/corefcn/ellipj.cc b/libinterp/corefcn/ellipj.cc
--- a/libinterp/corefcn/ellipj.cc
+++ b/libinterp/corefcn/ellipj.cc
@@ -914,16 +914,25 @@ and 16.15), Dover, 1965.\n\
 %!       0.9840560289645665155;
 %!       0.9307281387786906491;
 %!       0.8868188839812167635 ];
 %! [sn,cn,dn] = ellipj (u,m);
 %! assert (sn, S, 8*eps);
 %! assert (cn, C, 8*eps);
 %! assert (dn, D, 8*eps);
 
+%!test
+%! ## Test continuity of dn when cn is near zero (bug #43344)
+%! m = 0.5;
+%! u = ellipke (0.5);
+%! x = [-1e-3, -1e-12, 0, 1e-12, 1e-3];
+%! [~, ~, dn] = ellipj (u + x, m);
+%! D = 1/sqrt (2) * ones (size (x));
+%! assert (dn, D, 1e-6);
+
 %!error ellipj ()
 %!error ellipj (1)
 %!error ellipj (1,2,3,4)
 %!warning <expecting 0 <= M <= 1> ellipj (1,2);
 ## FIXME: errors commented out untill lasterr() truly returns the last error.
 %!#error <expecting scalar or matrix as second argument> ellipj (1, "1")
 %!#error <expecting scalar or matrix as first argument> ellipj ("1", 1)
 %!#error <expecting scalar or matrix as first argument> ellipj ({1}, 1)
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -3675,22 +3675,21 @@ ellipj (double u, double m, double& sn, 
           err = 1;
           return;
         }
       Nn = n;
       for (ii = 1; n > 0; ii = ii*2, --n) ; // ii = pow(2,Nn)
       phi = ii*a[Nn]*u;
       for (n = Nn; n > 0; --n)
         {
-          t = phi;
           phi = (asin ((c[n]/a[n])* sin (phi)) + phi)/2;
         }
       sn = sin (phi);
       cn = cos (phi);
-      dn = cn/cos (t - phi);
+      dn = sqrt (1 - m*sn*sn);
     }
 }
 
 void
 ellipj (const Complex& u, double m, Complex& sn, Complex& cn, Complex& dn,
         double& err)
 {
   double m1 = 1 - m, ss1, cc1, dd1;
