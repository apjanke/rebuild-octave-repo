# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1546794112 -3600
#      Sun Jan 06 18:01:52 2019 +0100
# Branch stable
# Node ID bdf03ab385c2212b8d82924b9220eb32e5ee83da
# Parent  6595716a7f33712b50f7367de023a6375f9ffa71
Use facealpha for surface objects with uniform facecolor and lighting (bug #55384).

* gl-render.cc (opengl_renderer::draw_surface): Apply facealpha value to all
facecolor modes also with lighting.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -2484,16 +2484,17 @@ namespace octave
     if (fc_mode == TEXTURE)
       tex = opengl_texture::create (m_glfcns, props.get_color_data ());
 
     if (draw_all || ! props.facecolor_is ("none"))
       {
         if (fa_mode == 0)
           {
             fa = props.get_facealpha_double ();
+            cb[3] = fa;
             if (fc_mode == UNIFORM || fc_mode == TEXTURE)
               {
                 m_glfcns.glColor4d (fcolor(0), fcolor(1), fcolor(2), fa);
                 if (fl_mode > 0)
                   {
                     for (int i = 0; i < 3; i++)
                       cb[i] = as * fcolor(i);
                     m_glfcns.glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
@@ -2557,17 +2558,16 @@ namespace octave
                     if (fc_mode == TEXTURE)
                       tex.tex_coord (double (i-1) / (zc-1),
                                      double (j-1) / (zr-1));
                     else if (fc_mode > 0)
                       {
                         // FIXME: is there a smarter way to do this?
                         for (int k = 0; k < 3; k++)
                           cb[k] = c(j-1, i-1, k);
-                        cb[3] = fa;
                         m_glfcns.glColor4fv (cb);
 
                         if (fl_mode > 0)
                           {
                             for (int k = 0; k < 3; k++)
                               cb[k] *= as;
                             m_glfcns.glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
@@ -2588,17 +2588,16 @@ namespace octave
 
                     // Vertex 2
                     if (fc_mode == TEXTURE)
                       tex.tex_coord (double (i) / (zc-1), double (j-1) / (zr-1));
                     else if (fc_mode == INTERP)
                       {
                         for (int k = 0; k < 3; k++)
                           cb[k] = c(j-1, i, k);
-                        cb[3] = fa;
                         m_glfcns.glColor4fv (cb);
 
                         if (fl_mode > 0)
                           {
                             for (int k = 0; k < 3; k++)
                               cb[k] *= as;
                             m_glfcns.glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
@@ -2619,17 +2618,16 @@ namespace octave
 
                     // Vertex 3
                     if (fc_mode == TEXTURE)
                       tex.tex_coord (double (i) / (zc-1), double (j) / (zr-1));
                     else if (fc_mode == INTERP)
                       {
                         for (int k = 0; k < 3; k++)
                           cb[k] = c(j, i, k);
-                        cb[3] = fa;
                         m_glfcns.glColor4fv (cb);
 
                         if (fl_mode > 0)
                           {
                             for (int k = 0; k < 3; k++)
                               cb[k] *= as;
                             m_glfcns.glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
@@ -2649,17 +2647,16 @@ namespace octave
 
                     // Vertex 4
                     if (fc_mode == TEXTURE)
                       tex.tex_coord (double (i-1) / (zc-1), double (j) / (zr-1));
                     else if (fc_mode == INTERP)
                       {
                         for (int k = 0; k < 3; k++)
                           cb[k] = c(j, i-1, k);
-                        cb[3] = fa;
                         m_glfcns.glColor4fv (cb);
 
                         if (fl_mode > 0)
                           {
                             for (int k = 0; k < 3; k++)
                               cb[k] *= as;
                             m_glfcns.glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
@@ -2693,16 +2690,17 @@ namespace octave
             // FIXME: implement flat, interp and texturemap transparency
           }
       }
 
     if (! props.edgecolor_is ("none") && ! props.linestyle_is ("none"))
       {
         if (props.get_edgealpha_double () == 1)
           {
+            cb[3] = 1.0; // edgealpha isn't implemented yet
             if (ec_mode == UNIFORM)
               {
                 m_glfcns.glColor3dv (ecolor.data ());
                 if (fl_mode > 0)
                   {
                     for (int i = 0; i < 3; i++)
                       cb[i] = as * ecolor(i);
                     m_glfcns.glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
