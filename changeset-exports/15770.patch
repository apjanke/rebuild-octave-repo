# HG changeset patch
# User Rik <rik@octave.org>
# Date 1355346931 28800
#      Wed Dec 12 13:15:31 2012 -0800
# Node ID e61405133a7649c83ba5886199f73cf1c5f01b62
# Parent  eade542fedaa55a8ce53ac509a3f65bca7339294
Add new isjava function.

* libinterp/octave-value/ov-base.h: Add new virtual function is_java ().
Returns false.

libinterp/octave-value/ov-java.h: Overload virtual function is_java to return
true for objects in class octave_java.

libinterp/octave-value/ov.h:  Add is_java function that calls objects
is_java function.

* libinterp/octave-value/ov-java.cc: Add new DEFUN (isjava) which uses
is_java.  Placed outside HAVE_JAVA ifdef so that it is always available.

diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -360,16 +360,18 @@ public:
   virtual bool is_sq_string (void) const { return false; }
 
   virtual bool is_range (void) const { return false; }
 
   virtual bool is_map (void) const { return false; }
 
   virtual bool is_object (void) const { return false; }
 
+  virtual bool is_java (void) const { return false; }
+
   virtual bool is_cs_list (void) const { return false; }
 
   virtual bool is_magic_colon (void) const { return false; }
 
   virtual bool is_all_va_args (void) const { return false; }
 
   virtual octave_value all (int = 0) const;
 
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -2204,8 +2204,27 @@ octave_java::do_java_set (JNIEnv* jni_en
         }
     }
 
   return retval;
 }
 
 #endif
 
+// Outside of #ifdef HAVE_JAVA because it is desirable to be able to
+// merely test for the presence of a Java object without having Java installed. 
+DEFUN (isjava, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} isjava (@var{x})\n\
+Return true if @var{x} is a Java object.\n\
+@seealso{class, typeinfo, isa}\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () != 1)
+    print_usage ();
+  else
+    retval = args(0).is_java ();
+
+  return retval;
+}
+
diff --git a/libinterp/octave-value/ov-java.h b/libinterp/octave-value/ov-java.h
--- a/libinterp/octave-value/ov-java.h
+++ b/libinterp/octave-value/ov-java.h
@@ -144,16 +144,18 @@ public:
 
   octave_base_value* clone (void) const { return new octave_java (*this); }
   octave_base_value* empty_clone (void) const { return new octave_java (); }
 
   bool is_defined (void) const { return true; }
 
   bool is_map (void) const { return true; }
 
+  bool is_java (void) const { return true; }
+
   string_vector map_keys (void) const;
 
   dim_vector dims (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const
   {
     os << "<Java object: " << java_type << ">";
     newline(os);
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -558,16 +558,19 @@ public:
     { return rep->is_range (); }
 
   bool is_map (void) const
     { return rep->is_map (); }
 
   bool is_object (void) const
     { return rep->is_object (); }
 
+  bool is_java (void) const
+    { return rep->is_java (); }
+
   bool is_cs_list (void) const
     { return rep->is_cs_list (); }
 
   bool is_magic_colon (void) const
     { return rep->is_magic_colon (); }
 
   bool is_null_value (void) const
     { return rep->is_null_value (); }
