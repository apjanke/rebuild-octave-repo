# HG changeset patch
# User Rik <rik@octave.org>
# Date 1480000317 28800
#      Thu Nov 24 07:11:57 2016 -0800
# Node ID c5f496b8352c67f3cdfc4b2d130d2571a5b1ed3e
# Parent  e2afee0041bf9ccfa77f71c44b7bdf552449945e
# Parent  fb913df7babba66e271238f1ac34e10b1d5a2ebd
maint: Periodic merge of stable to default.

diff --git a/build-aux/mk-builtins.sh b/build-aux/mk-builtins.sh
--- a/build-aux/mk-builtins.sh
+++ b/build-aux/mk-builtins.sh
@@ -177,20 +177,22 @@ EOF
     info_list=`$SED -n -e "$pattern" "$file"`
 
     for info in $info_list; do
       eval "$info"
 
       const=false
       case $type in
         fun)
+          ## We use the name appended to the "external-doc" tag to find
+          ## the docstring for aliases to this function.
           if $const; then
-            echo "  install_builtin_function ($fname, \"$name\", file, \"external-doc\", true);"
+            echo "  install_builtin_function ($fname, \"$name\", file, \"external-doc:$name\", true);"
           else
-            echo "  install_builtin_function ($fname, \"$name\", file, \"external-doc\");"
+            echo "  install_builtin_function ($fname, \"$name\", file, \"external-doc:$name\");"
           fi
           unset type fname name const
         ;;
         alias)
           echo "  alias_builtin (\"$alias\", \"$name\");"
           unset type alias name
         ;;
       esac
diff --git a/libinterp/corefcn/help.cc b/libinterp/corefcn/help.cc
--- a/libinterp/corefcn/help.cc
+++ b/libinterp/corefcn/help.cc
@@ -480,18 +480,21 @@ raw_help (const std::string& nm, bool& s
 
   bool found;
 
   found = raw_help_from_symbol_table (nm, h, w, symbol_found);
 
   if (! found)
     found = raw_help_from_file (nm, h, f, symbol_found);
 
-  if (! found || h == "external-doc")
-    raw_help_from_docstrings_file (nm, h, symbol_found);
+  bool external_doc = h.compare (0, 13, "external-doc:") == 0;
+
+  if (! found || external_doc)
+    raw_help_from_docstrings_file (external_doc ? h.substr (13) : nm,
+                                   h, symbol_found);
 
   return h;
 }
 
 DEFUN (built_in_docstrings_file, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{val} =} built_in_docstrings_file ()
 @deftypefnx {} {@var{old_val} =} built_in_docstrings_file (@var{new_val})
diff --git a/scripts/linear-algebra/condest.m b/scripts/linear-algebra/condest.m
--- a/scripts/linear-algebra/condest.m
+++ b/scripts/linear-algebra/condest.m
@@ -13,49 +13,49 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {} {} condest (@var{A})
-## @deftypefnx {} {} condest (@var{A}, @var{t})
-## @deftypefnx {} {[@var{est}, @var{v}] =} condest (@dots{})
-## @deftypefnx {} {[@var{est}, @var{v}] =} condest (@var{A}, @var{solvefun}, @var{t}, @var{p1}, @var{p2}, @dots{})
-## @deftypefnx {} {[@var{est}, @var{v}] =} condest (@var{afun}, @var{solvefun}, @var{t}, @var{p1}, @var{p2}, @dots{})
+## @deftypefn  {} {@var{cest} =} condest (@var{A})
+## @deftypefnx {} {@var{cest} =} condest (@var{A}, @var{t})
+## @deftypefnx {} {@var{cest} =} condest (@var{A}, @var{solvefun}, @var{t}, @var{p1}, @var{p2}, @dots{})
+## @deftypefnx {} {@var{cest} =} condest (@var{Afcn}, @var{solvefun}, @var{t}, @var{p1}, @var{p2}, @dots{})
+## @deftypefnx {} {[@var{cest}, @var{v}] =} condest (@dots{})
 ##
-## Estimate the 1-norm condition number of a matrix @var{A} using @var{t} test
-## vectors using a randomized 1-norm estimator.
+## Estimate the 1-norm condition number of a square matrix @var{A} using
+## @var{t} test vectors and a randomized 1-norm estimator.
 ##
-## If @var{t} exceeds 5, then only 5 test vectors are used.
+## The optional input @var{t} specifies the number of test vectors (default 5).
 ##
-## If the matrix is not explicit, e.g., when estimating the condition
-## number of @var{A} given an LU@tie{}factorization, @code{condest} uses the
-## following functions:
+## If the matrix is not explicit, e.g., when estimating the condition number of
+## @var{A} given an LU@tie{}factorization, @code{condest} uses the following
+## functions:
 ##
 ## @itemize @minus
-## @item @var{afun} which should returns
+## @item @var{Afcn} which must return
 ##
 ## @itemize @bullet
 ## @item
 ## the dimension @var{n} of @var{a}, if @var{flag} is @qcode{"dim"}
 ##
 ## @item
 ## true if @var{a} is a real operator, if @var{flag} is @qcode{"real"}
 ##
 ## @item
 ## the result @code{@var{a} * @var{x}}, if @var{flag} is "notransp"
 ##
 ## @item
 ## the result @code{@var{a}' * @var{x}}, if @var{flag} is "transp"
 ## @end itemize
 ##
-## @item @var{solvefun} which should returns
+## @item @var{solvefun} which must return
 ##
 ## @itemize @bullet
 ## @item
 ## the dimension @var{n} of @var{a}, if @var{flag} is @qcode{"dim"}
 ##
 ## @item
 ## true if @var{a} is a real operator, if @var{flag} is @qcode{"real"}
 ##
@@ -63,46 +63,47 @@
 ## the result @code{@var{a} \ @var{x}}, if @var{flag} is "notransp"
 ##
 ## @item
 ## the result @code{@var{a}' \ @var{x}}, if @var{flag} is "transp"
 ## @end itemize
 ## @end itemize
 ##
 ## The parameters @var{p1}, @var{p2}, @dots{} are arguments of
-## @code{@var{afun} (@var{flag}, @var{x}, @var{p1}, @var{p2}, @dots{})}
-## and @code{@var{solvefun} (@var{flag}, @var{x}, @var{p1}, @var{p2},
+## @code{@var{Afcn} (@var{flag}, @var{x}, @var{p1}, @var{p2}, @dots{})}
+## and @code{@var{solvefcn} (@var{flag}, @var{x}, @var{p1}, @var{p2},
 ## @dots{})}.
 ##
-## @code{condest} uses a randomized algorithm to approximate the
-## 1-norms.  Therefore, if consistent results are required, the
-## @qcode{"state"} of the random generator should be fixed before invoking
-## @code{normest1}.
+## The principal output is the 1-norm condition number estimate @var{cest}.
 ##
-## @code{condest} returns the 1-norm condition estimate @var{est} and a vector
-## @var{v} satisfying @code{norm (A*v, 1) == norm (A, 1) * norm
-## (@var{v}, 1) / @var{est}}.  When @var{est} is large, @var{v} is an
-## approximate null vector.
+## The optional second output is an approximate null vector when @var{cest} is
+## large; it satisfies the equation
+## @code{norm (A*v, 1) == norm (A, 1) * norm (@var{v}, 1) / @var{est}}.
+##
+## Algorithm Note:  @code{condest} uses a randomized algorithm to approximate
+## the 1-norms.  Therefore, if consistent results are required, the
+## @qcode{"state"} of the random generator should be fixed before invoking
+## @code{condest}.
 ##
 ## References:
 ##
 ## @itemize
 ## @item
 ## @nospell{N.J. Higham and F. Tisseur}, @cite{A Block Algorithm
 ## for Matrix 1-Norm Estimation, with an Application to 1-Norm
 ## Pseudospectra}. SIMAX vol 21, no 4, pp 1185-1201.
 ## @url{http://dx.doi.org/10.1137/S0895479899356080}
 ##
 ## @item
 ## @nospell{N.J. Higham and F. Tisseur}, @cite{A Block Algorithm
 ## for Matrix 1-Norm Estimation, with an Application to 1-Norm
 ## Pseudospectra}. @url{http://citeseer.ist.psu.edu/223007.html}
 ## @end itemize
 ##
-## @seealso{cond, norm, normest1}
+## @seealso{cond, norm, normest1, normest}
 ## @end deftypefn
 
 ## Code originally licensed under:
 ##
 ## Copyright (c) 2007, Regents of the University of California
 ## All rights reserved.
 ##
 ## Redistribution and use in source and binary forms, with or without
