# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1280854914 -7200
#      Tue Aug 03 19:01:54 2010 +0200
# Node ID f1a45913662ac716016605bb7e84a573cccdf5c1
# Parent  d782d7b524a655e6dbe772f36bc458fb3088aa6c
propagate isargout info through function handles

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2010-08-03  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-fcn-handle.cc 
+	(octave_value::subsref (..., const std::list<octave_lvalue> *)
+	octave_value::do_multi_index_op (..., const std::list<octave_lvalue> *)): 
+	New methods. Move code here.
+	* ov-fcn-handle.h: Declare them.
+
 2010-08-03  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-usr-fcn.cc (Fis_ignored_output): Rename to Fisargout. Change the
 	behavior to indicate not ignored outputs.
 
 2010-08-01  Rik <octave@nomad.inbox5.com>
 
 	* DLD-FUNCTIONS/amd.cc, DLD-FUNCTIONS/balance.cc, 
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -80,25 +80,34 @@ octave_fcn_handle::octave_fcn_handle (co
     symbol_table::cache_name (uf->scope (), nm);
 }
 
 octave_value_list
 octave_fcn_handle::subsref (const std::string& type,
                             const std::list<octave_value_list>& idx,
                             int nargout)
 {
+  return octave_fcn_handle::subsref (type, idx, nargout, 0);
+}
+
+octave_value_list
+octave_fcn_handle::subsref (const std::string& type,
+                            const std::list<octave_value_list>& idx,
+                            int nargout, const std::list<octave_lvalue>* lvalue_list)
+{
   octave_value_list retval;
 
   switch (type[0])
     {
     case '(':
       {
         int tmp_nargout = (type.length () > 1 && nargout == 0) ? 1 : nargout;
 
-        retval = do_multi_index_op (tmp_nargout, idx.front ());
+        retval = do_multi_index_op (tmp_nargout, idx.front (),
+                                    idx.size () == 1 ? lvalue_list : 0);
       }
       break;
 
     case '{':
     case '.':
       {
         std::string tnm = type_name ();
         error ("%s cannot be indexed with %c", tnm.c_str (), type[0]);
@@ -118,16 +127,24 @@ octave_fcn_handle::subsref (const std::s
 
   return retval;
 }
 
 octave_value_list
 octave_fcn_handle::do_multi_index_op (int nargout, 
                                       const octave_value_list& args)
 {
+  return do_multi_index_op (nargout, args, 0);
+}
+
+octave_value_list
+octave_fcn_handle::do_multi_index_op (int nargout, 
+                                      const octave_value_list& args,
+                                      const std::list<octave_lvalue>* lvalue_list)
+{
   octave_value_list retval;
 
   out_of_date_check (fcn, std::string (), false);
 
   if (has_overloads)
     {
       // Possibly overloaded function.
       octave_value ov_fcn;
@@ -148,27 +165,27 @@ octave_fcn_handle::do_multi_index_op (in
           if (it != overloads.end ())
             {
               out_of_date_check (it->second, dispatch_type, false);
               ov_fcn = it->second;
             }
         }
 
       if (ov_fcn.is_defined ())
-        retval = ov_fcn.do_multi_index_op (nargout, args);
+        retval = ov_fcn.do_multi_index_op (nargout, args, lvalue_list);
       else if (fcn.is_defined ())
-        retval = fcn.do_multi_index_op (nargout, args);
+        retval = fcn.do_multi_index_op (nargout, args, lvalue_list);
       else
         error ("%s: no method for class %s", nm.c_str (), dispatch_type.c_str ());
     }
   else
     {
       // Non-overloaded function (anonymous, subfunction, private function).
       if (fcn.is_defined ())
-        retval = fcn.do_multi_index_op (nargout, args);
+        retval = fcn.do_multi_index_op (nargout, args, lvalue_list);
       else
         error ("%s: no longer valid function handle", nm.c_str ());
     }
 
   return retval;
 }
 
 bool 
diff --git a/src/ov-fcn-handle.h b/src/ov-fcn-handle.h
--- a/src/ov-fcn-handle.h
+++ b/src/ov-fcn-handle.h
@@ -78,19 +78,27 @@ public:
       octave_value_list tmp = subsref (type, idx, 1);
       return tmp.length () > 0 ? tmp(0) : octave_value ();
     }
 
   octave_value_list subsref (const std::string& type,
                              const std::list<octave_value_list>& idx,
                              int nargout);
 
+  octave_value_list subsref (const std::string& type,
+                             const std::list<octave_value_list>& idx,
+                             int nargout, const std::list<octave_lvalue>* lvalue_list);
+
   octave_value_list
   do_multi_index_op (int nargout, const octave_value_list& args);
 
+  octave_value_list
+  do_multi_index_op (int nargout, const octave_value_list& args, 
+                     const std::list<octave_lvalue>* lvalue_list);
+
   bool is_defined (void) const { return true; }
 
   bool is_function_handle (void) const { return true; }
 
   builtin_type_t builtin_type (void) const { return btyp_func_handle; }
 
   bool is_overloaded (void) const { return has_overloads; }
 
