# HG changeset patch
# User Rik <rik@octave.org>
# Date 1373416646 25200
#      Tue Jul 09 17:37:26 2013 -0700
# Node ID e6ddaa65a77713029bdf87128f5697dd6e11a372
# Parent  99122191d3dde944b90afe6de921535ef58e2573
Add new function jit_startcnt to control JIT acceleration.

* NEWS: Announce new function.

* doc/interpreter/vectorize.txi: Add verbiage to manual about function.

* libinterp/corefcn/pt-jit.cc(Fjit_startcnt): New function which manages
static variable Vjit_startcnt.  Variable is threshold above which JIT
acceleration takes place.

* libinterp/corefcn/pt-jit.cc(Fjit_enable, Fdebug_jit): Update seealso links
in docstring.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -181,32 +181,32 @@ Summary of important user-visible change
     In addition, the following functions that use the Java interface
     are now available (provided that Octave is compiled with support for
     Java enabled):
 
       helpdlg    listdlg   questdlg
       inputdlg   msgbox    warndlg
 
  ** Other new functions added in 3.8.0:
-
-      atan2d                      erfcinv         polyeig                   
-      base64_decode               erfi            readline_re_read_init_file
-      base64_encode               expint          readline_read_init_file   
-      betaincinv                  findfigs        rgbplot                   
-      built_in_docstrings_file    flintmax        save_default_options      
-      cmpermute                   fminsearch      shrinkfaces               
-      cmunique                    gallery         splinefit                 
-      colorcube                   gco             stemleaf                  
-      copyobj                     hdl2struct      strjoin                   
-      dawson                      history_save    struct2hdl                
-      dblist                      imformats       tetramesh                 
-      debug_jit                   importdata      waterfall                 
-      doc_cache_create            iscolormap      
+                                                  
+      atan2d                      erfcinv         lines       
+      base64_decode               erfi            polyeig                   
+      base64_encode               expint          readline_re_read_init_file
+      betaincinv                  findfigs        readline_read_init_file   
+      built_in_docstrings_file    flintmax        rgbplot                   
+      cmpermute                   fminsearch      save_default_options      
+      cmunique                    gallery         shrinkfaces               
+      colorcube                   gco             splinefit                 
+      copyobj                     hdl2struct      stemleaf                  
+      dawson                      history_save    strjoin                   
+      dblist                      imformats       struct2hdl                
+      debug_jit                   importdata      tetramesh                 
+      doc_cache_create            iscolormap      waterfall                 
       ellipj                      jit_enable      
-      ellipke                     lines       
+      ellipke                     jit_startcnt    
 
  ** Deprecated functions.
 
     The following functions were deprecated in Octave 3.4 and have been
     removed from Octave 3.8.
                                            
       autocor    dispatch              is_global    setstr
       autocov    fstat                 krylovb      strerror
diff --git a/doc/interpreter/vectorize.txi b/doc/interpreter/vectorize.txi
--- a/doc/interpreter/vectorize.txi
+++ b/doc/interpreter/vectorize.txi
@@ -514,31 +514,35 @@ Vectorization is the preferred technique
 code.  Nevertheless, it is not always possible to replace every loop.  In such
 situations it may be worth trying Octave's @strong{experimental} Just-In-Time
 (JIT) compiler.
 
 A JIT compiler works by analyzing the body of a loop, translating the Octave
 statements into another language, compiling the new code segment into an
 executable, and then running the executable and collecting any results.  The
 process is not simple and there is a significant amount of work to perform for
-each step.  It can still make sense, however, if the loop counter is a
-large number.  Because Octave is an interpreted language every time through a
+each step.  It can still make sense, however, if the number of loop iterations
+is large.  Because Octave is an interpreted language every time through a
 loop Octave must parse the statements in the loop body before executing them.
 With a JIT compiler this is done just once when the body is translated to
 another language.
 
 The JIT compiler is a very new feature in Octave and not all valid Octave
 statements can currently be accelerated.  However, if no other technique
 is available it may be worth benchmarking the code with JIT enabled.  The
-function @code{jit_enable} is used to turn compilation on or off.  The function
-@code{debug_jit} is not likely to be of use to anyone not working directly on
-the implementation of the JIT compiler.
+function @code{jit_enable} is used to turn compilation on or off.  The
+function @code{jit_startcnt} sets the threshold for acceleration.  Loops
+with iteration counts above @code{jit_startcnt} will be accelerated.  The
+function @code{debug_jit} is not likely to be of use to anyone not working
+directly on the implementation of the JIT compiler.
 
 @DOCSTRING(jit_enable)
 
+@DOCSTRING(jit_startcnt)
+
 @DOCSTRING(debug_jit)
 
 @node Miscellaneous Techniques
 @section Miscellaneous Techniques
 @cindex execution speed
 @cindex speedups
 @cindex optimization
 
diff --git a/libinterp/corefcn/pt-jit.cc b/libinterp/corefcn/pt-jit.cc
--- a/libinterp/corefcn/pt-jit.cc
+++ b/libinterp/corefcn/pt-jit.cc
@@ -39,16 +39,18 @@ along with Octave; see the file COPYING.
 #include "variables.h"
 
 #ifdef HAVE_LLVM
 
 static bool Vdebug_jit = false;
 
 static bool Vjit_enable = true;
 
+static int Vjit_startcnt = 1000;
+
 #include <llvm/Analysis/CallGraph.h>
 #include <llvm/Analysis/Passes.h>
 #include <llvm/Analysis/Verifier.h>
 #include <llvm/Bitcode/ReaderWriter.h>
 #include <llvm/LLVMContext.h>
 #include <llvm/ExecutionEngine/ExecutionEngine.h>
 #include <llvm/ExecutionEngine/JIT.h>
 #include <llvm/Module.h>
@@ -1875,29 +1877,27 @@ tree_jit::initialize (void)
   jit_typeinfo::initialize (module, engine);
 
   return true;
 }
 
 bool
 tree_jit::do_execute (tree_simple_for_command& cmd, const octave_value& bounds)
 {
-  const size_t MIN_TRIP_COUNT = 1000;
-
   size_t tc = trip_count (bounds);
   if (! tc || ! initialize () || ! enabled ())
     return false;
 
   jit_info::vmap extra_vars;
   extra_vars["#for_bounds0"] = &bounds;
 
   jit_info *info = cmd.get_info ();
   if (! info || ! info->match (extra_vars))
     {
-      if (tc < MIN_TRIP_COUNT)
+      if (tc < static_cast<size_t> (Vjit_startcnt))
         return false;
 
       delete info;
       info = new jit_info (*this, cmd, bounds);
       cmd.stash_info (info);
     }
 
   return info->execute (extra_vars);
@@ -2288,17 +2288,17 @@ DEFUN (debug_jit, args, nargout,
 @deftypefnx {Built-in Function} {@var{old_val} =} debug_jit (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} debug_jit (@var{new_val}, \"local\")\n\
 Query or set the internal variable that determines whether\n\
 debugging/tracing is enabled for Octave's JIT compiler.\n\
 \n\
 When called from inside a function with the \"local\" option, the variable is\n\
 changed locally for the function and any subroutines it calls.  The original\n\
 variable value is restored when exiting the function.\n\
-@seealso{jit_enable}\n\
+@seealso{jit_enable, jit_startcnt}\n\
 @end deftypefn")
 {
 #if defined (HAVE_LLVM)
   return SET_INTERNAL_VARIABLE (debug_jit);
 #else
   warning ("debug_jit: JIT compiling not available in this version of Octave");
   return octave_value ();
 #endif
@@ -2309,19 +2309,43 @@ DEFUN (jit_enable, args, nargout,
 @deftypefn  {Built-in Function} {@var{val} =} jit_enable ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} jit_enable (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} jit_enable (@var{new_val}, \"local\")\n\
 Query or set the internal variable that enables Octave's JIT compiler.\n\
 \n\
 When called from inside a function with the \"local\" option, the variable is\n\
 changed locally for the function and any subroutines it calls.  The original\n\
 variable value is restored when exiting the function.\n\
-@seealso{debug_jit}\n\
+@seealso{jit_startcnt, debug_jit}\n\
 @end deftypefn")
 {
 #if defined (HAVE_LLVM)
   return SET_INTERNAL_VARIABLE (jit_enable);
 #else
   warning ("jit_enable: JIT compiling not available in this version of Octave");
   return octave_value ();
 #endif
 }
 
+DEFUN (jit_startcnt, args, nargout,
+  "-*- texinfo -*-\n\
+@deftypefn  {Built-in Function} {@var{val} =} jit_startcnt ()\n\
+@deftypefnx {Built-in Function} {@var{old_val} =} jit_startcnt (@var{new_val})\n\
+@deftypefnx {Built-in Function} {} jit_startcnt (@var{new_val}, \"local\")\n\
+Query or set the internal variable that determines whether JIT compilation\n\
+will take place for a specific loop.  Because compilation is a costly\n\
+operation it does not make sense to employ JIT when the loop count is low.\n\
+By default only loops with greater than 1000 iterations will be accelerated.\n\
+\n\
+When called from inside a function with the \"local\" option, the variable is\n\
+changed locally for the function and any subroutines it calls.  The original\n\
+variable value is restored when exiting the function.\n\
+@seealso{jit_enable, debug_jit}\n\
+@end deftypefn")
+{
+#if defined (HAVE_LLVM)
+  return SET_INTERNAL_VARIABLE_WITH_LIMITS (jit_startcnt, 1,
+                                            std::numeric_limits<int>::max ());
+#else
+  warning ("jit_enable: JIT compiling not available in this version of Octave");
+  return octave_value ();
+#endif
+}
