# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1223324164 14400
#      Mon Oct 06 16:16:04 2008 -0400
# Node ID 23ff439ea0dd90e14f8dd3c9f187a45d4c52db4b
# Parent  69c5cce38c2957c217527fab3bd6adb12209b47b
Sparse-op-defs.h: undo previous change

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2008-10-06  John W. Eaton  <jwe@octave.org>
+
+	* Spasre-op-defs.h: Undo previous change.
+
 2008-10-01  Jaroslav Hajek <highegg@gmail.com>
 
 	* oct-inttypes.h (octave_int<T>::one, octave_int<T>::zero): Declare
 	constants. 
 	* oct-inttypes.cc: Define them.
 	* oct-inttypes.h: Define mixed operations via long double if possible.
 	* oct-inttypes.cc: Define alternative implementations for 64-bit
 	multiplication and mixed operations. 
diff --git a/liboctave/Sparse-op-defs.h b/liboctave/Sparse-op-defs.h
--- a/liboctave/Sparse-op-defs.h
+++ b/liboctave/Sparse-op-defs.h
@@ -744,21 +744,25 @@ along with Octave; see the file COPYING.
     octave_idx_type m1_nr = m1.rows (); \
     octave_idx_type m1_nc = m1.cols (); \
     \
     octave_idx_type m2_nr = m2.rows (); \
     octave_idx_type m2_nc = m2.cols (); \
     \
     if (m1_nr == 1 && m1_nc == 1) \
       { \
-        r = F (m1.elem(0,0) != M1::elt_type (), m2); \
+        extern OCTAVE_API SparseBoolMatrix F (const double&, const M2&); \
+        extern OCTAVE_API SparseBoolMatrix F (const Complex&, const M2&); \
+        r = F (m1.elem(0,0), m2); \
       } \
     else if (m2_nr == 1 && m2_nc == 1) \
       { \
-        r = F (m1, m2.elem(0,0) != M2::elt_type ()); \
+        extern OCTAVE_API SparseBoolMatrix F (const M1&, const double&); \
+        extern OCTAVE_API SparseBoolMatrix F (const M1&, const Complex&); \
+        r = F (m1, m2.elem(0,0)); \
       } \
     else if (m1_nr == m2_nr && m1_nc == m2_nc) \
       { \
 	if (m1_nr != 0 || m1_nc != 0) \
 	  { \
             if (C1 (Z1) OP C2 (Z2)) \
 	      { \
                 r = SparseBoolMatrix (m1_nr, m1_nc, true); \
@@ -874,21 +878,25 @@ along with Octave; see the file COPYING.
     octave_idx_type m1_nr = m1.rows (); \
     octave_idx_type m1_nc = m1.cols (); \
     \
     octave_idx_type m2_nr = m2.rows (); \
     octave_idx_type m2_nc = m2.cols (); \
     \
     if (m1_nr == 1 && m1_nc == 1) \
       { \
-        r = F (m1.elem(0,0) != M1::elt_type (), m2); \
+        extern OCTAVE_API SparseBoolMatrix F (const double&, const M2&); \
+        extern OCTAVE_API SparseBoolMatrix F (const Complex&, const M2&); \
+        r = F (m1.elem(0,0), m2); \
       } \
     else if (m2_nr == 1 && m2_nc == 1) \
       { \
-        r = F (m1, m2.elem(0,0) != M2::elt_type ()); \
+        extern OCTAVE_API SparseBoolMatrix F (const M1&, const double&); \
+        extern OCTAVE_API SparseBoolMatrix F (const M1&, const Complex&); \
+        r = F (m1, m2.elem(0,0)); \
       } \
     else if (m1_nr == m2_nr && m1_nc == m2_nc) \
       { \
 	if (m1_nr != 0 || m1_nc != 0) \
 	  { \
             r = SparseBoolMatrix (m1_nr, m1_nc, m1.nnz () + m2.nnz ()); \
             r.cidx (0) = static_cast<octave_idx_type> (0); \
             octave_idx_type nel = 0; \
