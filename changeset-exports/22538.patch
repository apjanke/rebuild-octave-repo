# HG changeset patch
# User Carlo de Falco <carlo.defalco@polimi.it>
# Date 1474965286 -7200
#      Tue Sep 27 10:34:46 2016 +0200
# Node ID 21c89e691804d25442dd8b1655dd1b688baada93
# Parent  d16d3833807765d77bf10196c93eeb5190eb81ce
Stop adaptive ODE integration if timestep gets too small.

* scripts/ode/private/integrate_adaptive.m : stop integration if
 requested timestep gets smaller than eps (timestamp), issue a
 warning (not an error) for compatibility.

diff --git a/scripts/ode/private/integrate_adaptive.m b/scripts/ode/private/integrate_adaptive.m
--- a/scripts/ode/private/integrate_adaptive.m
+++ b/scripts/ode/private/integrate_adaptive.m
@@ -98,37 +98,38 @@ function solution = integrate_adaptive (
     endif
     feval (options.OutputFcn, tspan, solution.retout,
            "init", options.funarguments{:});
   endif
 
   ## Initialize the EventFcn
   if (options.haveeventfunction)
     ode_event_handler (options.Events, tspan(end), x,
-                         "init", options.funarguments{:});
+                       "init", options.funarguments{:});
   endif
 
   if (options.havenonnegative)
     nn = options.NonNegative;
   endif
 
   solution.cntloop = 0;
   solution.cntcycles = 0;
   solution.cntsave = 2;
   solution.unhandledtermination = true;
   ireject = 0;
 
   k_vals = [];
   iout = istep = 1;
+  
   while (dir * t_old < dir * tspan(end))
 
     ## Compute integration step from t_old to t_new = t_old + dt
     [t_new, options.comp] = kahan (t_old, options.comp, dt);
     [t_new, x_new, x_est, new_k_vals] = ...
-      stepper (func, t_old, x_old, dt, options, k_vals, t_new);
+    stepper (func, t_old, x_old, dt, options, k_vals, t_new);
 
     solution.cntcycles += 1;
 
     if (options.havenonnegative)
       x_new(nn, end) = abs (x_new(nn, end));
       x_est(nn, end) = abs (x_est(nn, end));
     endif
 
@@ -147,32 +148,32 @@ function solution = integrate_adaptive (
         t_caught = find ((dir * tspan(iout:end) > dir * t_old)
                          & (dir * tspan(iout:end) <= dir * t_new));
         t_caught = t_caught + iout - 1;
 
         if (! isempty (t_caught))
           t(t_caught) = tspan(t_caught);
           iout = max (t_caught);
           x(:, t_caught) = ...
-            runge_kutta_interpolate (order, [t_old t_new], [x_old x_new],
-                                     t(t_caught), new_k_vals, dt, func,
-                                     options.funarguments);
+          runge_kutta_interpolate (order, [t_old t_new], [x_old x_new],
+                                   t(t_caught), new_k_vals, dt, func,
+                                   options.funarguments);
 
           istep += 1;
 
           ## Call Events function only if a valid result has been found.
           ## Stop integration if eventbreak is true.
           if (options.haveeventfunction)
             break_loop = false;
             for idenseout = 1:numel (t_caught)
               id = t_caught(idenseout);
               td = t(id);
               solution.event = ...
-                ode_event_handler (options.Events, t(id), x(:, id), [],
-                                     options.funarguments{:});
+              ode_event_handler (options.Events, t(id), x(:, id), [],
+                                 options.funarguments{:});
               if (! isempty (solution.event{1}) && solution.event{1} == 1)
                 t(id) = solution.event{3}(end);
                 t = t(1:id);
                 x(:, id) = solution.event{4}(end, :).';
                 x = x(:,1:id);
                 solution.unhandledtermination = false;
                 break_loop = true;
                 break;
@@ -212,18 +213,18 @@ function solution = integrate_adaptive (
         t(++istep)  = t_new;
         x(:, istep) = x_new;
         iout = istep;
 
         ## Call Events function only if a valid result has been found.
         ## Stop integration if eventbreak is true.
         if (options.haveeventfunction)
           solution.event = ...
-            ode_event_handler (options.Events, t(istep), x(:, istep), [],
-                                 options.funarguments{:});
+          ode_event_handler (options.Events, t(istep), x(:, istep), [],
+                             options.funarguments{:});
           if (! isempty (solution.event{1}) && solution.event{1} == 1)
             t(istep) = solution.event{3}(end);
             x(:, istep) = solution.event{4}(end, :).';
             solution.unhandledtermination = false;
             break;
           endif
         endif
 
@@ -273,33 +274,36 @@ function solution = integrate_adaptive (
       endif
 
     endif
 
     ## Compute next timestep, formula taken from Hairer
     err += eps;  # avoid divisions by zero
     dt *= min (facmax, max (facmin, fac * (1 / err)^(1 / (order + 1))));
     dt = dir * min (abs (dt), options.MaxStep);
-
+    if (! (abs (dt) > eps (t (end))))
+      break
+    endif
+    
     ## make sure we don't go past tpan(end)
     dt = dir * min (abs (dt), abs (tspan(end) - t_old));
 
   endwhile
 
   ## Check if integration of the ode has been successful
   if (dir * t(end) < dir * tspan(end))
     if (solution.unhandledtermination == true)
-      error ("integrate_adaptive:unexpected_termination",
-             [" Solving was not successful. ", ...
-              " The iterative integration loop exited at time", ...
-              " t = %f before the endpoint at tend = %f was reached. ", ...
-              " This may happen if the stepsize becomes too small. ", ...
-              " Try to reduce the value of 'InitialStep'", ...
-              " and/or 'MaxStep' with the command 'odeset'."],
-             t(end), tspan(end));
+      warning ("integrate_adaptive:unexpected_termination",
+               [" Solving was not successful. ", ...
+                " The iterative integration loop exited at time", ...
+                " t = %f before the endpoint at tend = %f was reached. ", ...
+                " This may happen if the stepsize becomes too small. ", ...
+                " Try to reduce the value of 'InitialStep'", ...
+                " and/or 'MaxStep' with the command 'odeset'."],
+               t(end), tspan(end));
     else
       warning ("integrate_adaptive:unexpected_termination",
                ["Solver was stopped by a call of 'break'", ...
                 " in the main iteration loop at time", ...
                 " t = %f before the endpoint at tend = %f was reached. ", ...
                 " This may happen because the @odeplot function", ...
                 " returned 'true' or the @event function returned 'true'."],
                t(end), tspan(end));
