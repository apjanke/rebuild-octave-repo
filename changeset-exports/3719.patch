# HG changeset patch
# User jwe
# Date 971214141 0
#      Tue Oct 10 21:42:21 2000 +0000
# Node ID 74475587231177325e6bc060ada6a31e5ccbd14c
# Parent  65c6da68ddb353a6985032f15d43fa0576a37a04
[project @ 2000-10-10 21:42:20 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2000-10-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* error.cc (pr_where_2): New function.
+	(pr_where_1): Use it instead of error_1 to avoid setting error_state.
+
+2000-10-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* xdiv.cc (xdiv): Warn if execution falls through to lssolve.
+
 2000-09-06  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* utils.cc (FERRNO): New function (currently commented out).
 
 	* c-file-ptr-stream.cc (c_file_ptr_buf::close): Call flush here.
 	(c_file_ptr_buf::~c_file_ptr_buf): Not here.
 	* c-file-ptr-stream.h (c_fie_ptr_buf::close_fcn): New typedef.
 	(c_file_ptr_buf::cf): New data member.  Add default constructor arg.
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -206,21 +206,47 @@ usage (const char *fmt, ...)
   va_list args;
   va_start (args, fmt);
   error_state = -1;
   verror ("usage", fmt, args);
   va_end (args);
 }
 
 static void
+pr_where_2 (const char *fmt, va_list args)
+{
+  if (fmt)
+    {
+      if (*fmt)
+	{
+	  int len = strlen (fmt);
+	  if (fmt[len - 1] == '\n')
+	    {
+	      if (len > 1)
+		{
+		  char *tmp_fmt = strsave (fmt);
+		  tmp_fmt[len - 1] = '\0';
+		  verror (0, tmp_fmt, args);
+		  delete [] tmp_fmt;
+		}
+	    }
+	  else
+	    verror (0, fmt, args);
+	}
+    }
+  else
+    panic ("pr_where_2: invalid format");
+}
+
+static void
 pr_where_1 (const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
-  error_1 (0, fmt, args);
+  pr_where_2 (fmt, args);
   va_end (args);
 }
 
 static void
 pr_where (const char *name)
 {
   if (curr_statement)
     {
diff --git a/src/xdiv.cc b/src/xdiv.cc
--- a/src/xdiv.cc
+++ b/src/xdiv.cc
@@ -40,16 +40,17 @@ result_ok (int info)
 
   return (info != -2);
 }
 
 static void
 solve_singularity_warning (double rcond)
 {
   warning ("matrix singular to machine precision, rcond = %g", rcond);
+  warning ("attempting to find minimum norm solution");
 }
 
 template <class T1, class T2>
 bool
 mx_leftdiv_conform (const T1& a, const T2& b)
 {
   int a_nr = a.rows ();
   int b_nr = b.rows ();
