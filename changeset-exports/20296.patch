# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1435936713 -3600
#      Fri Jul 03 16:18:33 2015 +0100
# Node ID 0b9d23557506be8cc175fb29f46dd3dc0e391f42
# Parent  557979395ca9f75e3ccf2fae361368aaba6701eb
gallery: fix randsvd by adding missing dependency qmult().

* scripts/special-matrix/gallery.m (randsvd) was copied from the
  Test Matrix toolbox by Nicholas J. Higham.  It made use of qmult()
  which was also part of that toolbox but was left behind.  This qmult()
  implementation is also recovered from the Test Matrix toolbox.  Note
  that Octave itself used to have qmult() which is part of the legacy
  quaternion package (now also removed from the new quaternion package).
  See cset 21904fe299c8 for when qmult() was removed from Octave.
  Also fix the default value for KL and KU so that a 2 element vector
  can be used as N.

diff --git a/scripts/special-matrix/gallery.m b/scripts/special-matrix/gallery.m
--- a/scripts/special-matrix/gallery.m
+++ b/scripts/special-matrix/gallery.m
@@ -2145,17 +2145,18 @@ function A = rando (n, k = 1)
     case (2), A = 2*floor (  rand(m, n) + 0.5) -1;  # {-1, 1}
     case (3), A =   round (3*rand(m, n) - 1.5);     # {-1, 0, 1}
     otherwise
       error ("gallery: unknown K '%d' for smoke matrix.", k);
   endswitch
 
 endfunction
 
-function A = randsvd (n, kappa = sqrt (1/eps), mode = 3, kl = n-1, ku = kl)
+function A = randsvd (n, kappa = sqrt (1/eps), mode = 3, kl = max (n) -1,
+                      ku = kl)
   ## RANDSVD  Random matrix with pre-assigned singular values.
   ##   RANDSVD(N, KAPPA, MODE, KL, KU) is a (banded) random matrix of order N
   ##   with COND(A) = KAPPA and singular values from the distribution MODE.
   ##   N may be a 2-vector, in which case the matrix is N(1)-by-N(2).
   ##   Available types:
   ##          MODE = 1:   one large singular value,
   ##          MODE = 2:   one small singular value,
   ##          MODE = 3:   geometrically distributed singular values,
@@ -2846,16 +2847,63 @@ function A = bandred (A, kl, ku)
     endif
   endfor
 
   if (flip)
     A = A';
   endif
 endfunction
 
+## NOTE: qmult is part of the Test Matrix Toolbox and is used by randsvd()
+function B = qmult (A)
+  ## QMULT  Pre-multiply by random orthogonal matrix.
+  ##   QMULT(A) is Q*A where Q is a random real orthogonal matrix from
+  ##   the Haar distribution, of dimension the number of rows in A.
+  ##   Special case: if A is a scalar then QMULT(A) is the same as
+  ##   QMULT(EYE(A)).
+  ##
+  ##   Called by RANDSVD.
+  ##
+  ## Reference:
+  ##   G.W. Stewart, The efficient generation of random
+  ##   orthogonal matrices with an application to condition estimators,
+  ##   SIAM J. Numer. Anal., 17 (1980), 403-409.
+
+  [n, m] = size (A);
+
+  ##  Handle scalar A
+  if (isscalar (A))
+    n = A;
+    A = eye (n);
+  endif
+
+  d = zeros (n);
+
+  for k = n-1:-1:1
+    ## Generate random Householder transformation.
+    x = randn (n-k+1, 1);
+    s = norm (x);
+    sgn = sign (x(1)) + (x(1) == 0); # Modification for sign(1)=1.
+    s = sgn*s;
+    d(k) = -sgn;
+    x(1) = x(1) + s;
+    beta = s*x(1);
+
+    ## Apply the transformation to A.
+    y = x'*A(k:n,:);
+    A(k:n,:) = A(k:n,:) - x*(y/beta);
+  endfor
+
+  ## Tidy up signs
+  for i = 1:n-1
+    A(i,:) = d(i)*A(i,:);
+  endfor
+  A(n,:) = A(n,:) * sign (randn);
+  B = A;
+endfunction
 
 ## BIST testing for just a few functions to verify that the main gallery
 ## dispatch function works.
 %assert (gallery ("clement", 3), [0 1 0; 2 0 2; 0 1 0])
 %assert (gallery ("invhess", 2), [1 -1; 1 2])
 
 ## Test input validation of main dispatch function only
 %!error gallery ()
