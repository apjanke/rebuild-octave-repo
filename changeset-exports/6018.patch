# HG changeset patch
# User jwe
# Date 1159809799 0
#      Mon Oct 02 17:23:19 2006 +0000
# Node ID bda649f500bd5517da50fecf1d62701b6a12e431
# Parent  b124a912d28bdd6d2d3d01d0b9dadc6d7a0c1daf
[project @ 2006-10-02 17:23:18 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2006-10-02  John W. Eaton  <jwe@octave.org>
+
+	* dbleDET.cc (DET::initialize2): Ensure arg to log10 is double.
+	* CmplxDET.cc (ComplexDET::initialize2): Likewise.
+
 2006-09-22  David Bateman <dbateman@free.fr>
 
 	* MatrixType.h (MatrixType::MatrixType(const SparseComplexMatrix&)): 
 	Remove spurious warning. 
 
 2006-09-15  John W. Eaton  <jwe@octave.org>
 
 	* Array.cc (Array<T>::index (Array<idx_vector>&, int, const T&) const): 
diff --git a/liboctave/CmplxDET.cc b/liboctave/CmplxDET.cc
--- a/liboctave/CmplxDET.cc
+++ b/liboctave/CmplxDET.cc
@@ -61,17 +61,17 @@ ComplexDET::initialize10 (void)
     }
 }
 
 void
 ComplexDET::initialize2 (void)
 {
   if (c10 != 0.0)
     {
-      double etmp = e10 / log10 (2);
+      double etmp = e10 / log10 (2.0);
       e2 = static_cast<int> (xround (etmp));
       etmp -= e2;
       c2 = c10 * xexp2 (etmp);
     }
 }
 
 Complex
 ComplexDET::value (void) const
diff --git a/liboctave/dbleDET.cc b/liboctave/dbleDET.cc
--- a/liboctave/dbleDET.cc
+++ b/liboctave/dbleDET.cc
@@ -59,17 +59,17 @@ DET::initialize10 (void)
     }
 }
 
 void
 DET::initialize2 (void)
 {
   if (c10 != 0.0)
     {
-      double etmp = e10 / log10 (2);
+      double etmp = e10 / log10 (2.0);
       e2 = static_cast<int> (xround (etmp));
       etmp -= e2;
       c2 = c10 * xexp2 (etmp);
     }
 }
 
 double
 DET::value (void) const
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,14 +1,23 @@
-2006-09-29  John W. Eaton  <jwe@octave.org>
+2006-10-02  John W. Eaton  <jwe@octave.org>
 
 	* version.h (OCTAVE_VERSION): Now 2.9.9.
 	(OCTAVE_API_VERSION): Now api-v22.
 	(OCTAVE_RELEASE_DATE): Now 2006-09-29.
 
+	* pr-output.cc (pr_plus_format): Use "inline" instead of "static
+	inline" for template functions to avoid problems when not
+	compiling with 	g++.
+
+	* mex.cc (call_mex): Delete elements of argout.
+	From Kai Labusch <labusch@inb.uni-luebeck.de>.
+
+2006-09-29  John W. Eaton  <jwe@octave.org>
+
 	* DLD-FUNCTIONS/spfind.cc (sparse_find_non_zero_elem_idx):
 	Leading dimension is NR, not NC.
 
 	* Makefile.in (DEP_5): Include oct-errno.cc in the list.
 
 2006-09-27  John W. Eaton  <jwe@octave.org>
 
 	* pr-output.cc (abs): New template function.  Instantiate for
diff --git a/src/mex.cc b/src/mex.cc
--- a/src/mex.cc
+++ b/src/mex.cc
@@ -2869,16 +2869,22 @@ call_mex (callstyle cs, void *f, const o
 	}
 
       retval.resize (nargout);
 
       for (int i = 0; i < nargout; i++)
 	retval(i) = mxArray::as_octave_value (argout[i]);
     }
 
+  // Is it always safe to do this?  Are users required to use one of
+  // the mxCreateXYZ functions to create the values that are put in
+  // the output array?
+  for (int i = 0; i < nout; i++)
+    delete argout[i];
+
   // Clean up mex resources.
   unwind_protect::run_frame ("call_mex");
 
   return retval;
 }
 
 octave_value_list
 Fortran_mex (void *f, const octave_value_list& args, int nargout)
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -1374,17 +1374,17 @@ pr_col_num_header (std::ostream& os, oct
 	os << " Columns " << col + 1 << " through " << lim << ":\n";
 
       if (! compact_format)
 	os << "\n";
     }
 }
 
 template <class T>
-static inline void
+/* static */ inline void
 pr_plus_format (std::ostream& os, const T& val)
 {
   if (val > T (0))
     os << plus_format_chars[0];
   else if (val < T (0))
     os << plus_format_chars[1];
   else
     os << plus_format_chars[2];
@@ -1623,17 +1623,17 @@ octave_print_internal (std::ostream& os,
 
     default:
       PRINT_ND_ARRAY (os, nda, NDArray, double, Matrix);
       break;
     }
 }
 
 template <>
-static inline void
+/* static */ inline void
 pr_plus_format<> (std::ostream& os, const Complex& c)
 {
   double rp = c.real ();
   double ip = c.imag ();
 
   if (rp == 0.0)
     {
       if (ip == 0.0)
@@ -2136,17 +2136,17 @@ public:
   }
 
 PRINT_CONV (octave_int8, octave_int16);
 PRINT_CONV (octave_uint8, octave_uint16);
 
 #undef PRINT_CONV
 
 template <class T>
-static inline void
+/* static */ inline void
 pr_int (std::ostream& os, const T& d, int fw = 0)
 {
   size_t sz = d.byte_size();
   const unsigned char * tmpi = d.iptr();
 
   // Unless explicitly asked for, always print in big-endian
   // format for hex and bit formats.
   //
@@ -2201,23 +2201,23 @@ pr_int (std::ostream& os, const T& d, in
 	 << typename octave_print_conv<T>::print_conv_type (d);
 
       if (bank_format)
 	os << ".00";
     }
 }
 
 template <class T>
-static inline T
+/* static */ inline T
 abs (T x)
 {
   return x;
 }
 
-#define INSTANTIATE_ABS(T) template static inline T abs (T x)
+#define INSTANTIATE_ABS(T) template /* static */ inline T abs (T x)
 
 INSTANTIATE_ABS (unsigned int);
 INSTANTIATE_ABS (unsigned short);
 INSTANTIATE_ABS (unsigned long);
 INSTANTIATE_ABS (unsigned long long);
 
 template <class T>
 void
