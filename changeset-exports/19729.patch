# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1424152302 18000
#      Tue Feb 17 00:51:42 2015 -0500
# Node ID 17a7e9f26e50d85b142cb2524e4bef1f2feb5425
# Parent  928ecc95f3952397af254a8264848d8d08cee813
improve compatibility of printf functions

* oct-stream.h, octave-stream.cc (printf_format_elt::fw,
printf_format_elt::prec): Use -1 to indicate uninitialized values and
-2 to indicate star values were converted.  Change all uses.
(printf_value_cache::get_next_value): New arg, TYPE.  Handle character
string extraction.
(printf_value_cache::string_value): Delete.
(octave_base_stream::do_numeric_printf_conversion,
printf_value_cache::int_value, ok_for_signed_int_conv,
ok_for_unsigned_int_conv): Force string to double conversion.
(do_printf_string): New static function.
(octave_base_stream::do_printf): Improve compatibility of string and
character conversions.
* io.tst: New tests.

diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -581,18 +581,18 @@ printf_format_list::printf_format_list (
   octave_idx_type num_elts = 0;
 
   size_t n = s.length ();
 
   size_t i = 0;
 
   int args = 0;
   std::string flags;
-  int fw = 0;
-  int prec = 0;
+  int fw = -1;
+  int prec = -1;
   char modifier = '\0';
   char type = '\0';
 
   bool have_more = true;
   bool empty_buf = true;
 
   if (n == 0)
     {
@@ -631,18 +631,18 @@ printf_format_list::printf_format_list (
                                    num_elts);
               }
               break;
 
             default:
               {
                 args = 0;
                 flags = "";
-                fw = 0;
-                prec = 0;
+                fw = -1;
+                prec = -1;
                 modifier = '\0';
                 type = '\0';
                 *buf << s[i++];
                 empty_buf = false;
               }
               break;
             }
 
@@ -702,18 +702,18 @@ printf_format_list::add_elt_to_list (int
 void
 printf_format_list::process_conversion (const std::string& s, size_t& i,
                                         size_t n, int& args, std::string& flags,
                                         int& fw, int& prec, char& modifier,
                                         char& type, octave_idx_type& num_elts)
 {
   args = 0;
   flags = "";
-  fw = 0;
-  prec = 0;
+  fw = -1;
+  prec = -1;
   modifier = '\0';
   type = '\0';
 
   *buf << s[i++];
 
   bool nxt = false;
 
   while (i < n)
@@ -733,17 +733,17 @@ printf_format_list::process_conversion (
       if (nxt)
         break;
     }
 
   if (i < n)
     {
       if (s[i] == '*')
         {
-          fw = -1;
+          fw = -2;
           args++;
           *buf << s[i++];
         }
       else
         {
           if (isdigit (s[i]))
             {
               int nn = 0;
@@ -753,23 +753,30 @@ printf_format_list::process_conversion (
 
           while (i < n && isdigit (s[i]))
             *buf << s[i++];
         }
     }
 
   if (i < n && s[i] == '.')
     {
+      // nothing before the . means 0.
+      if (fw == -1)
+        fw = 0;
+
+      // . followed by nothing is 0.
+      prec = 0;
+
       *buf << s[i++];
 
       if (i < n)
         {
           if (s[i] == '*')
             {
-              prec = -1;
+              prec = -2;
               args++;
               *buf << s[i++];
             }
           else
             {
               if (isdigit (s[i]))
                 {
                   int nn = 0;
@@ -2176,24 +2183,21 @@ public:
             break;
           }
       }
   }
 
   ~printf_value_cache (void) { }
 
   // Get the current value as a double and advance the internal pointer.
-  octave_value get_next_value (void);
+  octave_value get_next_value (char type = 0);
 
   // Get the current value as an int and advance the internal pointer.
   int int_value (void);
 
-  // Get the current value as a string and advance the internal pointer.
-  std::string string_value (void);
-
   operator bool () const { return (curr_state == ok); }
 
   bool exhausted (void) { return (val_idx >= n_vals); }
 
 private:
 
   const octave_value_list values;
   int val_idx;
@@ -2211,17 +2215,17 @@ private:
   // No copying!
 
   printf_value_cache (const printf_value_cache&);
 
   printf_value_cache& operator = (const printf_value_cache&);
 };
 
 octave_value
-printf_value_cache::get_next_value (void)
+printf_value_cache::get_next_value (char type)
 {
   octave_value retval;
 
   if (exhausted ())
     curr_state = conversion_error;
 
   while (! exhausted ())
     {
@@ -2241,103 +2245,126 @@ printf_value_cache::get_next_value (void
             {
               curr_state = conversion_error;
               break;
             }
         }
 
       if (elt_idx < n_elts)
         {
-          retval = curr_val.fast_elem_extract (elt_idx++);
+          if (type == 's')
+            {
+              if (curr_val.is_string ())
+                {
+                  std::string sval = curr_val.string_value ();
+
+                  retval = sval.substr (elt_idx);
+
+                  // We've consumed the rest of the value.
+                  elt_idx = n_elts;
+                }
+              else
+                {
+                  // Convert to character string while values are
+                  // integers in the range [0 : char max]
+
+                  const NDArray val = curr_val.array_value ();
+
+                  octave_idx_type idx = elt_idx;
+
+                  for (; idx < n_elts; idx++)
+                    {
+                      double dval = val(idx);
+
+                      if (D_NINT (dval) != dval || dval < 0 || dval > 255)
+                        break;
+                    }
+
+                  octave_idx_type n = idx - elt_idx;
+
+                  if (n > 0)
+                    {
+                      std::string sval (n, '\0');
+
+                      for (octave_idx_type i = 0; i < n; i++)
+                        sval[i] = val(elt_idx++);
+
+                      retval = sval;
+                    }
+                  else
+                    retval = curr_val.fast_elem_extract (elt_idx++);
+                }
+            }
+          else
+            {
+              retval = curr_val.fast_elem_extract (elt_idx++);
+
+              if (type == 'c' && ! retval.is_string ())
+                {
+                  double dval = retval.double_value ();
+
+                  if (D_NINT (dval) == dval && dval >= 0 && dval < 256)
+                    retval = static_cast<char> (dval);
+                }
+            }
 
           if (elt_idx >= n_elts)
             {
               elt_idx = 0;
               val_idx++;
               have_data = false;
             }
 
           break;
         }
       else
         {
           val_idx++;
           have_data = false;
 
-          if (n_elts == 0 && exhausted ())
-            curr_state = conversion_error;
-
-          continue;
+          if (n_elts == 0)
+            {
+              if (elt_idx == 0 && (type == 's' || type == 'c'))
+                {
+                  retval = "";
+                  break;
+                }
+
+              if (exhausted ())
+                curr_state = conversion_error;
+            }
         }
     }
 
   return retval;
 }
 
 int
 printf_value_cache::int_value (void)
 {
   int retval = 0;
 
   octave_value val = get_next_value ();
 
   if (! error_state)
     {
-      double dval = val.double_value ();
+      double dval = val.double_value (true);
 
       if (! error_state)
         {
           if (D_NINT (dval) == dval)
             retval = NINT (dval);
           else
             curr_state = conversion_error;
         }
     }
 
   return retval;
 }
 
-std::string
-printf_value_cache::string_value (void)
-{
-  std::string retval;
-
-  if (exhausted ())
-    curr_state = conversion_error;
-  else
-    {
-      octave_value tval = values (val_idx++);
-
-      if (tval.rows () == 1)
-        retval = tval.string_value ();
-      else
-        {
-          // In the name of Matlab compatibility.
-
-          charMatrix chm = tval.char_matrix_value ();
-
-          octave_idx_type nr = chm.rows ();
-          octave_idx_type nc = chm.columns ();
-
-          int k = 0;
-
-          retval.resize (nr * nc, '\0');
-
-          for (octave_idx_type j = 0; j < nc; j++)
-            for (octave_idx_type i = 0; i < nr; i++)
-              retval[k++] = chm(i,j);
-        }
-
-      if (error_state)
-        curr_state = conversion_error;
-    }
-
-  return retval;
-}
-
 // Ugh again and again.
 
 template <class T>
 int
 do_printf_conv (std::ostream& os, const char *fmt, int nsa, int sa_1,
                 int sa_2, T arg, const std::string& who)
 {
   int retval = 0;
@@ -2359,68 +2386,101 @@ do_printf_conv (std::ostream& os, const 
     default:
       ::error ("%s: internal error handling format", who.c_str ());
       break;
     }
 
   return retval;
 }
 
+static size_t
+do_printf_string (std::ostream& os, const printf_format_elt *elt,
+                  int nsa, int sa_1, int sa_2, const std::string& arg,
+                  const std::string& who)
+{
+  size_t retval = 0;
+
+  if (nsa > 2)
+    {
+      ::error ("%s: internal error handling format", who.c_str ());
+      return retval;
+    }
+
+  std::string flags = elt->flags;
+
+  bool left = flags.find ('-') != std::string::npos;
+
+  size_t len = arg.length ();
+
+  size_t fw = nsa > 0 ? sa_1 : (elt->fw == -1 ? len : elt->fw);
+  size_t prec = nsa > 1 ? sa_2 : (elt->prec == -1 ? len : elt->prec);
+
+  os << std::setw (fw)
+     << (left ? std::left : std::right)
+     << (prec < len ? arg.substr (0, prec) : arg);
+
+  return len > fw ? len : fw;
+}
+
 static bool
 is_nan_or_inf (const octave_value& val)
 {
   octave_value ov_isnan = val.isnan ();
   octave_value ov_isinf = val.isinf ();
 
   return (ov_isnan.is_true () || ov_isinf.is_true ());
 }
 
 static bool
 ok_for_signed_int_conv (const octave_value& val)
 {
   uint64_t limit = std::numeric_limits<int64_t>::max ();
 
-  if (val.is_integer_type ())
+  if (val.is_string ())
+    return false;
+  else if (val.is_integer_type ())
     {
       if (val.is_uint64_type ())
         {
           octave_uint64 ival = val.uint64_scalar_value ();
 
           if (ival.value () <= limit)
             return true;
         }
       else
         return true;
     }
   else
     {
-      double dval = val.double_value ();
+      double dval = val.double_value (true);
 
       if (dval == xround (dval) && dval <= limit)
         return true;
     }
 
   return false;
 }
 
 static bool
 ok_for_unsigned_int_conv (const octave_value& val)
 {
-  if (val.is_integer_type ())
+  if (val.is_string ())
+    return false;
+  else if (val.is_integer_type ())
     {
       // Easier than dispatching here...
 
       octave_value ov_is_ge_zero
         = do_binary_op (octave_value::op_ge, val, octave_value (0.0));
 
       return ov_is_ge_zero.is_true ();
     }
   else
     {
-      double dval = val.double_value ();
+      double dval = val.double_value (true);
 
       uint64_t limit = std::numeric_limits<uint64_t>::max ();
 
       if (dval == xround (dval) && dval >= 0 && dval <= limit)
         return true;
     }
 
   return false;
@@ -2456,17 +2516,17 @@ octave_base_stream::do_numeric_printf_co
 
       tfmt.replace ((i1 = tfmt.rfind (elt->type)),
                    1, 1, 's');
 
       if ((i2 = tfmt.rfind ('.')) != std::string::npos
           && i2 < i1)
         {
           tfmt.erase (i2, i1-i2);
-          if (elt->prec < 0)
+          if (elt->prec == -2)
             nsa--;
         }
 
       const char *tval;
       if (lo_ieee_isinf (dval))
         {
           if (elt->flags.find ('+') != std::string::npos)
             tval = (dval < 0 ? "-Inf" : "+Inf");
@@ -2503,17 +2563,17 @@ octave_base_stream::do_numeric_printf_co
 
               retval += do_printf_conv (os, tfmt.c_str (), nsa, sa_1, sa_2,
                                         tval.value (), who);
             }
           else
             {
               std::string tfmt = switch_to_g_format (elt);
 
-              double dval = val.double_value ();
+              double dval = val.double_value (true);
 
               if (! error_state)
                 retval += do_printf_conv (os, tfmt.c_str (), nsa,
                                           sa_1, sa_2, dval, who);
             }
           break;
 
         case 'o': case 'x': case 'X': case 'u':
@@ -2527,28 +2587,28 @@ octave_base_stream::do_numeric_printf_co
 
               retval += do_printf_conv (os, tfmt.c_str (), nsa, sa_1, sa_2,
                                         tval.value (), who);
             }
           else
             {
               std::string tfmt = switch_to_g_format (elt);
 
-              double dval = val.double_value ();
+              double dval = val.double_value (true);
 
               if (! error_state)
                 retval += do_printf_conv (os, tfmt.c_str (), nsa,
                                           sa_1, sa_2, dval, who);
             }
           break;
 
         case 'f': case 'e': case 'E':
         case 'g': case 'G':
           {
-            double dval = val.double_value ();
+            double dval = val.double_value (true);
 
             if (! error_state)
               retval += do_printf_conv (os, fmt, nsa, sa_1, sa_2, dval, who);
           }
           break;
 
         default:
           error ("%s: invalid format specifier",
@@ -2586,17 +2646,17 @@ octave_base_stream::do_printf (printf_fo
       for (;;)
         {
           octave_quit ();
 
           if (elt)
             {
               // NSA is the number of 'star' args to convert.
 
-              int nsa = (elt->fw < 0) + (elt->prec < 0);
+              int nsa = (elt->fw == -2) + (elt->prec == -2);
 
               int sa_1 = 0;
               int sa_2 = 0;
 
               if (nsa > 0)
                 {
                   sa_1 = val_cache.int_value ();
 
@@ -2619,23 +2679,33 @@ octave_base_stream::do_printf (printf_fo
                   os << "%";
                   retval++;
                 }
               else if (elt->args == 0 && elt->text)
                 {
                   os << elt->text;
                   retval += strlen (elt->text);
                 }
-              else if (elt->type == 's')
+              else if (elt->type == 's' || elt->type == 'c')
                 {
-                  std::string val = val_cache.string_value ();
+                  octave_value val = val_cache.get_next_value (elt->type);
 
                   if (val_cache)
-                    retval += do_printf_conv (os, elt->text, nsa, sa_1,
-                                              sa_2, val.c_str (), who);
+                    {
+                      if (val.is_string ())
+                        {
+                          std::string sval = val.string_value ();
+
+                          retval += do_printf_string (os, elt, nsa, sa_1,
+                                                      sa_2, sval, who);
+                        }
+                      else
+                        retval += do_numeric_printf_conv (os, elt, nsa, sa_1,
+                                                          sa_2, val, who);
+                    }
                   else
                     break;
                 }
               else
                 {
                   octave_value val = val_cache.get_next_value ();
 
                   if (val_cache)
diff --git a/libinterp/corefcn/oct-stream.h b/libinterp/corefcn/oct-stream.h
--- a/libinterp/corefcn/oct-stream.h
+++ b/libinterp/corefcn/oct-stream.h
@@ -185,18 +185,18 @@ private:
   scanf_format_list& operator = (const scanf_format_list&);
 };
 
 class
 printf_format_elt
 {
 public:
 
-  printf_format_elt (const char *txt = 0, int n = 0, int w = 0,
-                     int p = 0, const std::string& f = std::string (),
+  printf_format_elt (const char *txt = 0, int n = 0, int w = -1,
+                     int p = -1, const std::string& f = std::string (),
                      char typ = '\0', char mod = '\0')
     : text (strsave (txt)), args (n), fw (w), prec (p), flags (f),
       type (typ), modifier (mod) { }
 
   printf_format_elt (const printf_format_elt& e)
     : text (strsave (e.text)), args (e.args), fw (e.fw), prec (e.prec),
       flags (e.flags), type (e.type), modifier (e.modifier) { }
 
diff --git a/test/io.tst b/test/io.tst
--- a/test/io.tst
+++ b/test/io.tst
@@ -613,8 +613,29 @@
 %!test
 %! id = tmpfile ();
 %! fwrite (id, "abcd");
 %! frewind (id);
 %! [data, count] = fread (id, [2, 3], "char");
 %! assert (data, [97, 99; 98, 100]);
 %! assert (count, 4);
 %! fclose (id);
+
+%!assert (sprintf ("%1s", "foo"), "foo");
+%!assert (sprintf ("%.s", "foo"), char (zeros (1, 0)));
+%!assert (sprintf ("%1.s", "foo"), " ");
+%!assert (sprintf ("%.1s", "foo"), "f");
+%!assert (sprintf ("%1.1s", "foo"), "f");
+%!assert (sprintf ("|%4s|", "foo"), "| foo|");
+%!assert (sprintf ("|%-4s|", "foo"), "|foo |");
+%!assert (sprintf ("|%4.1s|", "foo"), "|   f|");
+%!assert (sprintf ("|%-4.1s|", "foo"), "|f   |");
+
+%!assert (sprintf ("%c ", "foo"), "f o o ");
+%!assert (sprintf ("%s ", "foo"), "foo ");
+
+%!assert (sprintf ("|%d|", "foo"), "|102||111||111|");
+%!assert (sprintf ("|%s|", [102, 111, 111]), "|foo|");
+
+%!assert (sprintf ("%s %d ", [102, 1e5, 111, 1e5, 111]), "f 100000 o 100000 o ");
+
+%!assert (sprintf ("%c,%c,%c,%c", "abcd"), "a,b,c,d");
+%!assert (sprintf ("%s,%s,%s,%s", "abcd"), "abcd,");
