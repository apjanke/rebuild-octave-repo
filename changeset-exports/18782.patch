# HG changeset patch
# User Rik <rik@octave.org>
# Date 1401048797 25200
#      Sun May 25 13:13:17 2014 -0700
# Node ID 5556ddfb841b4138e9ec03694263aee955b86321
# Parent  888f8ce79bbee984265d9503d68132038953c932
spdiags.m: Treat sub/super-diagonals the same as Matlab.
Distinguish between M >= N and M < N cases when placing diagonals.
* spdiags.m: Add test for M >= N or M < N.  When M >= N, sub-diagonals
are taken from the first entries in a column while super-diagonals are
taken from the last entries in a column.  This is reversed for M < N.
Add %!tests for new behavior.  Add seealso link to diag() in docstring.

diff --git a/scripts/sparse/spdiags.m b/scripts/sparse/spdiags.m
--- a/scripts/sparse/spdiags.m
+++ b/scripts/sparse/spdiags.m
@@ -46,16 +46,17 @@
 ##    @result{} 5 10  0  0
 ##       1  6 11  0
 ##       0  2  7 12
 ##       0  0  3  8
 ##       0  0  0  4
 ## @end group
 ## @end example
 ##
+## @seealso{diag}
 ## @end deftypefn
 
 function [B, d] = spdiags (v, d, m, n)
 
   if (nargin < 1 || nargin > 4)
     print_usage ();
   endif
 
@@ -77,61 +78,97 @@ function [B, d] = spdiags (v, d, m, n)
     B = zeros (Brows, length (d));
     for k = 1:length (d)
       dn = d(k);
       if (dn <= -nr || dn > nc)
         continue;
       endif
       dv = diag (v, dn);
       len = rows (dv);
-      if (dn < 0)
-        offset = Brows - len + 1;
-        B(offset:Brows, k) = dv;
+      ## Put sub/super-diagonals in the right place based on matrix size (MxN)
+      if (nr >= nc)
+        if (dn > 0)
+          offset = Brows - len + 1;
+          B(offset:Brows, k) = dv;
+        else
+          B(1:len, k) = dv;
+        endif
       else
-        B(1:len, k) = dv;
+        if (dn < 0)
+          offset = Brows - len + 1;
+          B(offset:Brows, k) = dv;
+        else
+          B(1:len, k) = dv;
+        endif
       endif
     endfor
 
   elseif (nargin == 3)
     ## Replace specific diagonals d of m with v,d
     [nr, nc] = size (m);
     A = spdiags (m, d);
     B = m - spdiags (A, d, nr, nc) + spdiags (v, d, nr, nc);
 
   else
     ## Create new matrix of size mxn using v,d
     [j, i, v] = find (v);
-    offset = max (min (d(:), n-m), 0);
+    if (m >= n)
+      offset = max (min (d(:), n-m), 0);
+    else
+      offset = d(:);
+    endif
     j = j(:) + offset(i(:));
     i = j - d(:)(i(:));
     idx = i > 0 & i <= m & j > 0 & j <= n;
     B = sparse (i(idx), j(idx), v(idx), m, n);
 
   endif
 
 endfunction
 
 
 %!test
 %! [B,d] = spdiags (magic (3));
 %! assert (d, [-2 -1 0 1 2]');
-%! assert (B, [0 0 8 1 6
-%!             0 3 5 7 0
-%!             4 9 2 0 0]);
+%! assert (B, [4 3 8 0 0
+%!             0 9 5 1 0
+%!             0 0 2 7 6]);
+%! B = spdiags (magic (3), [-2 1]);
+%! assert (B, [4 0; 0 1; 0 7]);
 
-%! B = spdiags (magic (3), [-2 1]);
-%! assert (B, [0 1; 0 7; 4 0]);
+## Test zero filling for supra- and super-diagonals
+%!test
+%! ## Case 1: M = N
+%! A = sparse (zeros (3,3));
+%! A(1,3) = 13;
+%! A(3,1) = 31;
+%! [B, d] = spdiags (A);
+%! assert (d, [-2 2]');
+%! assert (B, [31 0; 0 0; 0 13]);
+%! assert (spdiags (B, d, 3,3), A)
 
 %!test
-%! ## Test zero filling for supra- and super-diagonals
+%! ## Case 1: M > N
+%! A = sparse (zeros (4,3));
+%! A(1,3) = 13;
+%! A(3,1) = 31;
+%! [B, d] = spdiags (A);
+%! assert (d, [-2 2]');
+%! assert (B, [31 0; 0 0; 0 13]);
+%! assert (spdiags (B, d, 4,3), A)
+
+%!test
+%! ## Case 1: M < N
+%! A = sparse (zeros (3,4));
 %! A(1,3) = 13;
 %! A(3,1) = 31;
 %! [B, d] = spdiags (A);
 %! assert (d, [-2 2]');
 %! assert (B, [0 13; 0 0; 31 0]);
+%! assert (spdiags (B, d, 3,4), A)
 
 %!assert (spdiags (zeros (1,0),1,1,1), sparse (0))
 %!assert (spdiags (zeros (0,1),1,1,1), sparse (0))
 %!assert (spdiags ([0.5 -1 0.5], 0:2, 1, 1), sparse (0.5))
 
 %% Test input validation
 %!error spdiags ()
 %!error spdiags (1,2,3,4,5)
