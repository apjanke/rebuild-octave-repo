# HG changeset patch
# User Jordi Guti?rrez Hermoso <jordigh@gmail.com>
# Date 1282936295 14400
#      Fri Aug 27 15:11:35 2010 -0400
# Node ID 888c75785221266ff84cf62af41596b65585ea72
# Parent  5074494f01a9376ba66028593f19affa2d7ad4b5
Improvements to FLTK backend rotation
* Don't rotate past the top and bottom
* Implement __calc_dimensions__ in C++ so that it's available to graphics object ctors
* Make rotation the default mode in 3d plots
* Replace an instance of m-script __calc_dimensions__ with C++ version

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-08-27  Jordi Gutiérrez Hermoso  <jordigh@gmail.com>
+
+	* plot/__go_draw_axes__.m (__calc_dimensions__): Delete.
+	* plot/__actual_axis_position__.m (__calc_dimensions__): Delete.
+
 2010-08-27  Pascal A. Dupuis  <Pascal.Dupuis@worldonline.be>
 
 	* plot/hold.m: If arg is axis handle, get corresponding figure
 	handle from axis parent property.
 
 2010-08-27  Ben Abbott <bpabbott@mac.com>
 
 	* plot/__gnuplot_print__.m: Properly restore fontsize after eps output.
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -40,17 +40,18 @@ function __go_draw_axes__ (h, plot_strea
 
     ## Set to false for plotyy axes.
     if (strcmp (axis_obj.tag, "plotyy"))
       ymirror = false;
     else
       ymirror = true;
     endif
 
-    nd = __calc_dimensions__ (axis_obj);
+    nd = __calc_dimensions__ (h);
+
     if (strcmpi (axis_obj.plotboxaspectratiomode, "manual"))
       pos = __actual_axis_position__ (axis_obj);
     else
       pos = axis_obj.position;
     endif
     if (__gnuplot_has_feature__ ("screen_coordinates_for_{lrtb}margin"))
       if (nd == 2 || all (mod (axis_obj.view, 90) == 0))
         x = [1, 1];
@@ -1781,39 +1782,16 @@ function style = do_linestyle_command (o
   if (! found_style && isempty (style {1}))
     fputs (plot_stream, " default");
   endif
 
   fputs (plot_stream, ";\n");
 
 endfunction
 
-function nd = __calc_dimensions__ (obj)
-  kids = obj.children;
-  nd = 2;
-  for i = 1:length (kids)
-    obj = get (kids(i));
-    switch (obj.type)
-      case {"image", "text"}
-        ## ignore as they 
-      case {"line", "patch"}
-        if (! isempty (obj.zdata))
-          nd = 3;
-        endif
-      case "surface"
-        nd = 3;
-      case "hggroup"
-        obj_nd = __calc_dimensions__ (obj);
-        if (obj_nd == 3)
-          nd = 3;
-        endif
-    endswitch
-  endfor
-endfunction
-
 function __gnuplot_write_data__ (plot_stream, data, nd, parametric, cdata)
   
   ## DATA is already transposed.
 
   ## FIXME -- this may need to be converted to C++ for speed.
 
   ## Convert NA elements to normal NaN values because fprintf writes
   ## "NA" and that confuses gnuplot.
diff --git a/scripts/plot/private/__actual_axis_position__.m b/scripts/plot/private/__actual_axis_position__.m
--- a/scripts/plot/private/__actual_axis_position__.m
+++ b/scripts/plot/private/__actual_axis_position__.m
@@ -26,17 +26,18 @@
 
 function pos = __actual_axis_position__ (axis_obj)
   if (ishandle (axis_obj))
     axis_obj = get (axis_obj);
   endif
 
   ## When using {rltb}margin, Gnuplot does not handle the specified
   ## aspect ratio properly, so handle it here.
-  if (__calc_dimensions__ (axis_obj) == 2 || all (mod (axis_obj.view, 90) == 0))
+  if (__calc_dimensions__ (axis_obj.parent) == 2
+      || all (mod (axis_obj.view, 90) == 0))
     aspect_ratio_2d = axis_obj.plotboxaspectratio(1:2);
   else
     ## FIXME -- this works for "axis square", but has not been
     ##          thoroughly tested for other aspect ratios.
     aspect_ratio_2d = [max(axis_obj.plotboxaspectratio(1:2)), ...
                            axis_obj.plotboxaspectratio(3)/sqrt(2)];
   endif
   orig_fig_units = get (axis_obj.parent, "units");
@@ -58,31 +59,8 @@ function pos = __actual_axis_position__ 
     pos = pos_in_pixels ./ fig_position([3, 4, 3, 4]);
   unwind_protect_cleanup
     set (axis_obj.parent, "units", orig_fig_units)
     set (axis_obj.parent, "position", orig_fig_position)
   end_unwind_protect
 
 endfunction
 
-function nd = __calc_dimensions__ (obj)
-  kids = obj.children;
-  nd = 2;
-  for i = 1:length (kids)
-    obj = get (kids(i));
-    switch (obj.type)
-      case {"image", "text"}
-        ## ignore as they 
-      case {"line", "patch"}
-        if (! isempty (obj.zdata))
-          nd = 3;
-        endif
-      case "surface"
-        nd = 3;
-      case "hggroup"
-        obj_nd = __calc_dimensions__ (obj);
-        if (obj_nd == 3)
-          nd = 3;
-        endif
-    endswitch
-  endfor
-endfunction
-
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,26 @@
+2010-08-27  Jordi Gutiérrez Hermoso  <jordigh@gmail.com>
+
+	* graphics.cc (axes::properties::rotate_view): Don't rotate past
+	the top and bottom.
+	(axes::properties::update_camera): Fix the view when rotating to
+	the bottom.
+	(calc_dimensions): New static function.
+	(F__calc_dimensions__) New defun to replace m-script function.
+	* graphics.h.in (calc_dimension): Provide decl.
+	* DLD-FUNCTIONS/fltk_backend.cc (plot_window::plot_window):
+	Use calc_dimensions to decide whether the current figure should
+	be rotated.
+	(plot_window::mark_modified) Recompute the number of dimensions.
+	Deactivate rotation if necessary.
+	(plot_window::ndim) New data member.
+	(plot_window::button_press, plot_window::handle): Only turn on
+	rotation if ndim == 3.
+
 2010-08-24  David Bateman  <dbateman@free.fr>
 
 	* ls-mat5.cc (static void read_mat5_binary_data (std::istream&,
 	float *, octave_idx_type, bool, mat5_data_type,
 	oct_mach_info::float_format)) : New function
 	(std::string read_mat5_binary_element (std::istream&,
 	const std::string&, bool, bool&, octave_value&)): Treat
 	MAT_FILE_SINGLE_CLASS as single precision rather than convert to
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/fltk_backend.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/fltk_backend.cc
@@ -219,32 +219,35 @@ private:
 // Parameter controlling how fast we zoom when using the scrool wheel.
 static double wheel_zoom_speed = 0.05;
 
 class plot_window : public Fl_Window
 {
 public:
   plot_window (int xx, int yy, int ww, int hh, figure::properties& xfp)
     : Fl_Window (xx, yy, ww, hh, "octave"), window_label (), shift (0),
-      fp (xfp), canvas (0), autoscale (0), togglegrid (0), panzoom (0), rotate (0), help (0), status (0)
+      ndim (2), fp (xfp), canvas (0), autoscale (0), togglegrid (0),
+      panzoom (0), rotate (0), help (0), status (0)
   {
     callback (window_close, static_cast<void*> (this));
 
     begin ();
     {
       canvas = new
         OpenGL_fltk (0, 0, ww , hh - status_h, number ());
 
       bottom = new 
         Fl_Box (0, 
                 hh - status_h, 
                 ww, 
                 status_h);
       bottom->box(FL_FLAT_BOX);
-      
+
+      ndim = calc_dimensions (gh_manager::get_object (fp.get___myhandle__ ()));
+
       autoscale = new
         Fl_Button (0,
                    hh - status_h,
                    status_h,
                    status_h,
                    "A");
       autoscale->callback (button_callback, static_cast<void*> (this));
       autoscale->tooltip ("Autoscale");
@@ -261,26 +264,29 @@ public:
       panzoom = new
         Fl_Button (2 * status_h,
                    hh - status_h,
                    status_h,
                    status_h,
                    "P");
       panzoom->callback (button_callback, static_cast<void*> (this));
       panzoom->tooltip ("Mouse Pan/Zoom");
-      
+
       rotate = new
         Fl_Button (3 * status_h,
                    hh - status_h,
                    status_h,
                    status_h,
                    "R");
       rotate->callback (button_callback, static_cast<void*> (this));
       rotate->tooltip ("Mouse Rotate");
 
+      if (ndim == 2)
+        rotate->deactivate ();
+
       help = new
         Fl_Button (4 * status_h,
                    hh - status_h,
                    status_h,
                    status_h,
                    "?");
       help->callback (button_callback, static_cast<void*> (this));
       help->tooltip ("Help");
@@ -312,17 +318,17 @@ public:
     autoscale->show ();
     togglegrid->show ();
     panzoom->show ();
     rotate->show ();
 
     set_name ();
     resizable (canvas);
     size_range (4*status_h, 2*status_h);
-    gui_mode = pan_zoom;
+    gui_mode = (ndim == 3 ? rotate_zoom : pan_zoom);
   }
 
   ~plot_window (void)
   {
     canvas->hide ();
     status->hide ();
     this->hide ();
     delete canvas;
@@ -341,32 +347,44 @@ public:
     mark_modified ();
     Fl::wait (fltk_maxtime);
   }
 
   void mark_modified (void)
   {
     damage (FL_DAMAGE_ALL);
     canvas->damage (FL_DAMAGE_ALL);
+    ndim = calc_dimensions (gh_manager::get_object (fp.get___myhandle__ ()));
+
+    if (ndim == 3)
+      rotate->activate ();
+    else
+      {
+        rotate->deactivate ();
+        gui_mode = pan_zoom;
+      }
   }
 
   void set_name (void)
   {
     window_label = fp.get_title ();
     label (window_label.c_str ());
   }
 
 private:
   // window name -- this must exists for the duration of the window's
   // life
   std::string window_label;
 
   // Mod keys status
   int shift;
 
+  // Number of dimensions, 2 or 3.
+  int ndim;
+
   // Interactive Mode
   enum { pan_zoom, rotate_zoom } gui_mode;
   
   // Figure properties.
   figure::properties& fp;
 
   // Status area height.
   static const int status_h = 20;
@@ -391,17 +409,17 @@ private:
       axis_auto ();
 
     if (widg == togglegrid)
       toggle_grid ();
     
     if (widg == panzoom)
       gui_mode = pan_zoom;
     
-    if (widg == rotate)
+    if (widg == rotate && ndim == 3)
       gui_mode = rotate_zoom;
 
     if (widg == help)
       fl_message ("%s", help_text);
   }
 
   OpenGL_fltk* canvas;
   Fl_Box*    bottom;
@@ -651,17 +669,20 @@ private:
 
             case 'p':
             case 'P':
               gui_mode = pan_zoom;
             break;
 
             case 'r':
             case 'R':
-              gui_mode = rotate_zoom;
+              if (ndim == 3)
+                gui_mode = rotate_zoom;
+              else
+                gui_mode = pan_zoom;
             break;
             }
         }
         break;
 
       case FL_KEYUP:
         {
           int key = Fl::event_key ();
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -3429,18 +3429,20 @@ axes::properties::update_camera (void)
 
   if (cameraupvectormode_is ("auto"))
     {
       Matrix tview = get_view ().matrix_value ();
       double az = tview(0), el = tview(1);
 
       if (el == 90 || el == -90)
         {
-          c_upv(0) = -sin(az*M_PI/180.0)*(xlimits(1)-xlimits(0))/pb(0);
-          c_upv(1) = cos(az*M_PI/180.0)*(ylimits(1)-ylimits(0))/pb(1);
+          c_upv(0) =
+            -signum(el)*sin(az*M_PI/180.0)*(xlimits(1)-xlimits(0))/pb(0);
+          c_upv(1) =
+            signum(el)*cos(az*M_PI/180.0)*(ylimits(1)-ylimits(0))/pb(1);
         }
       else
         c_upv(2) = 1;
 
       cameraupvector = xform2cam (c_upv);
     }
   else
     c_upv = cam2xform (get_cameraupvector ().matrix_value ());
@@ -4273,27 +4275,33 @@ axes::properties::translate_view (double
   double maxy = -octave_Inf;
   double min_pos_y = octave_Inf;
   get_children_limits (miny, maxy, min_pos_y, kids, 'y');
   
   xlims (0) += delta_x;
   xlims (1) += delta_x;
   ylims (0) += delta_y;
   ylims (1) += delta_y;
-                
+ 
   zoom (xlims, ylims, false);
 }
 
 void
 axes::properties::rotate_view (double delta_el, double delta_az)
 {
   Matrix v = get_view ().matrix_value ();
 
   v (1) += delta_el;
-  v (0) -= delta_az;
+
+  if(v(1) > 90)
+    v(1) = 90;
+  if(v(1) < -90)
+    v(1) = -90;
+
+  v (0) = fmod(v(0) - delta_az + 720,360);
 
   set_view(v);
   update_transform();
 }
 
 void
 axes::properties::unzoom (void)
 {
@@ -5493,16 +5501,77 @@ Undocumented internal function.\n\
  \
   if (args.length () > 0) \
     retval = make_graphics_object (#TYPE, args); \
   else \
     print_usage (); \
  \
   return retval
 
+int
+calc_dimensions (const graphics_object& go)
+{
+
+  int nd = 2;
+
+  if (go.isa ("surface"))
+    nd = 3;
+
+  if ((go.isa ("line") || go.isa ("patch")) && ! go.get("zdata").is_empty ())
+    nd = 3;
+
+  Matrix kids = go.get_properties().get_children ();
+
+  for (octave_idx_type i = 0; i < kids.length (); i++)
+    {
+      graphics_handle hnd = gh_manager::lookup (kids(i));
+
+      if (hnd.ok ())
+        {
+          const graphics_object& kid = gh_manager::get_object(hnd);
+
+          if (kid.valid_object())
+            nd = calc_dimensions (kid);
+
+          if (nd == 3)
+            break;
+        }
+    }
+
+  return nd;
+}
+
+DEFUN (__calc_dimensions__, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} __calc_dimensions__ (@var{axes})\n\
+Internal function. Determine the number of dimensions in a graphics\n\
+object, whether 2 or 3.\n\
+@end deftypefn")
+{
+  gh_manager::autolock guard;
+
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1)
+    {
+      double h = args(0).double_value ();
+
+      if (! error_state)
+        retval = calc_dimensions (gh_manager::get_object (h));
+      else
+        error ("__calc_dimensions__: expecting graphics handle as only argument");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
 DEFUN (__go_axes__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __go_axes__ (@var{parent})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   GO_BODY (axes);
 }
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -4245,15 +4245,17 @@ private:
   void do_restore_gcbo (void);
 
   void do_post_event (const graphics_event& e);
 };
 
 void get_children_limits (double& min_val, double& max_val, double& min_pos,
                           const Matrix& kids, char limit_type);
 
+OCTINTERP_API int calc_dimensions (const graphics_object& gh);
+
 // This function is NOT equivalent to the scripting language function gcf.
 OCTINTERP_API graphics_handle gcf (void);
 
 // This function is NOT equivalent to the scripting language function gca.
 OCTINTERP_API graphics_handle gca (void);
 
 #endif
