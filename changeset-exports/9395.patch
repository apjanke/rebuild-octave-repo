# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1245922906 -7200
#      Thu Jun 25 11:41:46 2009 +0200
# Node ID 1de00ca9c9f242af6be6611fc7c1ee046627715f
# Parent  b3ab22ee8544e6f3bc0abce5a968ca2ceae960f5
avoid passing local variable pointers to unwind_protect

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2009-06-25  Jaroslav Hajek  <highegg@gmail.com>
+
+	* input.cc: Use unwind_protect::add_action_var where appropriate.
+	* ls-mat5.cc: Ditto.
+	* ov-fcn-handle.cc: Ditto.
+	* parse.y: Ditto.
+	* toplev.cc: Ditto.
+	* variables.cc: Ditto.
+
 2009-06-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* unwind-prot.h (unwind_protect::elem): New polymorphic class.
 	(unwind_protect::restore_var): Remove.
 	(unwind_protect::restore_mem): Remove.
 	(unwind_protect::elt_list): Update.
 	(unwind_protect::add (elem *)): New method.
 	(unwind_protect::add (void (*)(void *), void *)): Reimplement.
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -664,17 +664,17 @@ get_debug_input (const std::string& prom
       reset_parser ();
 
       // Save current value of global_command.
       unwind_protect::protect_var (global_command);
 
       // Do this with an unwind-protect cleanup function so that the
       // forced variables will be unmarked in the event of an interrupt.
       symbol_table::scope_id scope = symbol_table::top_scope ();
-      unwind_protect::add (symbol_table::unmark_forced_variables, &scope);
+      unwind_protect::add_action_var (symbol_table::unmark_forced_variables, scope);
 
       // This is the same as yyparse in parse.y.
       int retval = octave_parse ();
 
       if (retval == 0 && global_command)
 	{
 	  global_command->accept (*current_evaluator);
 
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -870,17 +870,17 @@ read_mat5_binary_element (std::istream& 
 	    m2 = tc2.map_value();
 
 	    unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
 
 	    // Set up temporary scope to use for evaluating the text
 	    // that defines the anonymous function.
 
 	    symbol_table::scope_id local_scope = symbol_table::alloc_scope ();
-	    unwind_protect::add (symbol_table::erase_scope, &local_scope);
+	    unwind_protect::add_action_var (symbol_table::erase_scope, local_scope);
 
 	    symbol_table::set_scope (local_scope);
 
 	    octave_call_stack::push (local_scope, 0);
 	    unwind_protect::add (octave_call_stack::unwind_pop, 0);
 
 	    if (m2.nfields() > 0)
 	      {
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -314,17 +314,17 @@ octave_fcn_handle::load_ascii (std::istr
       pos = is.tellg ();
 
       unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
 
       // Set up temporary scope to use for evaluating the text that
       // defines the anonymous function.
 
       symbol_table::scope_id local_scope = symbol_table::alloc_scope ();
-      unwind_protect::add (symbol_table::erase_scope, &local_scope);
+      unwind_protect::add_action_var (symbol_table::erase_scope, local_scope);
 
       symbol_table::set_scope (local_scope);
 
       octave_call_stack::push (local_scope, 0);
       unwind_protect::add (octave_call_stack::unwind_pop, 0);
 
       octave_idx_type len = 0;
 
@@ -495,17 +495,17 @@ octave_fcn_handle::load_binary (std::ist
       is.get (ctmp2, tmp+1, 0);
 
       unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
 
       // Set up temporary scope to use for evaluating the text that
       // defines the anonymous function.
 
       symbol_table::scope_id local_scope = symbol_table::alloc_scope ();
-      unwind_protect::add (symbol_table::erase_scope, &local_scope);	      
+      unwind_protect::add_action_var (symbol_table::erase_scope, local_scope);	      
 
       symbol_table::set_scope (local_scope);
 
       octave_call_stack::push (local_scope, 0);
       unwind_protect::add (octave_call_stack::unwind_pop, 0);
 
       if (len > 0)
 	{
@@ -940,17 +940,17 @@ octave_fcn_handle::load_hdf5 (hid_t loc_
       H5Eset_auto (err_func, err_func_data);
 
       unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
 
       // Set up temporary scope to use for evaluating the text that
       // defines the anonymous function.
 
       symbol_table::scope_id local_scope = symbol_table::alloc_scope ();
-      unwind_protect::add (symbol_table::erase_scope, &local_scope);
+      unwind_protect::add_action_var (symbol_table::erase_scope, local_scope);
 
       symbol_table::set_scope (local_scope);
 
       octave_call_stack::push (local_scope, 0);
       unwind_protect::add (octave_call_stack::unwind_pop, 0);
 
       if (len > 0 && success)
 	{
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3257,17 +3257,17 @@ parse_fcn_file (const std::string& ff, c
 	  curr_fcn_ptr = 0;
 
 	  reset_parser ();
 
 	  // Do this with an unwind-protect cleanup function so that
 	  // the forced variables will be unmarked in the event of an
 	  // interrupt. 
 	  symbol_table::scope_id scope = symbol_table::top_scope ();
-	  unwind_protect::add (symbol_table::unmark_forced_variables, &scope);
+	  unwind_protect::add_action_var (symbol_table::unmark_forced_variables, scope);
 
 	  if (! help_txt.empty ())
 	    help_buf.push (help_txt);
 
 	  if (parsing_script)
 	    prep_lexer_for_script ();
 
 	  lexer_flags.parsing_class_method = ! dispatch_type.empty ();
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -555,17 +555,17 @@ main_loop (void)
 	  reset_error_handler ();
 
 	  reset_parser ();
 
 	  // Do this with an unwind-protect cleanup function so that
 	  // the forced variables will be unmarked in the event of an
 	  // interrupt.
 	  symbol_table::scope_id scope = symbol_table::top_scope ();
-	  unwind_protect::add (symbol_table::unmark_forced_variables, &scope);
+	  unwind_protect::add_action_var (symbol_table::unmark_forced_variables, scope);
 
 	  // This is the same as yyparse in parse.y.
 	  retval = octave_parse ();
 
 	  if (retval == 0)
 	    {
 	      if (global_command)
 		{
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1384,17 +1384,17 @@ do_who (int argc, const string_vector& a
 	    {
 	      std::string nm = argv [i + 1];
 
 	      unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
 
 	      // Set up temporary scope.
 
 	      symbol_table::scope_id tmp_scope = symbol_table::alloc_scope ();
-	      unwind_protect::add (symbol_table::erase_scope, &tmp_scope);
+	      unwind_protect::add_action_var (symbol_table::erase_scope, tmp_scope);
 
 	      symbol_table::set_scope (tmp_scope);
 
 	      octave_call_stack::push (tmp_scope, 0);
 	      unwind_protect::add (octave_call_stack::unwind_pop, 0);
 
 	      unwind_protect::add (symbol_table::clear_variables);
 
