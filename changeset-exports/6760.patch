# HG changeset patch
# User dbateman
# Date 1182911271 0
#      Wed Jun 27 02:27:51 2007 +0000
# Node ID 301885c9d265ffb66323897dd17c0bc05166036c
# Parent  dd8cef76043d0fdc4e02fa7050852a27e99b1834
[project @ 2007-06-27 02:27:51 by dbateman]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2007-06-27  David Bateman  <dbateman@free.fr>
+	
+	* src/load-save.cc (Fsave): Ensure header is written for non
+	existent file with "-append".
+	* src/ls-hdf5.h: First steps towards having append work for hdf5.
+	
 2007-06-26  John W. Eaton  <jwe@octave.org>
 
 	* src/load-save.cc (Fsave): Open files correctly for -append.
 	Don't write file headers if appending.  Error for -append -hdf5.
 
 2007-06-25  Olaf Till  <i7tiol@t-online.de>
 
 	* oct-stream.h (octave_stream_list::list): Use std::map.
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -1,9 +1,9 @@
-/*
+`</*
 
 Copyright (C) 1996, 1997 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
@@ -1413,17 +1413,17 @@ dump_octave_core (void)
 	  || format == LS_MAT7_BINARY)
 	mode |= std::ios::binary;
 
       mode |= append ? std::ios::ate : std::ios::trunc;
 
 #ifdef HAVE_HDF5
       if (format == LS_HDF5)
 	{
-	  hdf5_ofstream file (fname);
+	  hdf5_ofstream file (fname, mode);
 
 	  if (file.file_id >= 0)
 	    {
 	      dump_octave_core (file, fname, format, save_as_floats);
 
 	      file.close ();
 	    }
 	  else
@@ -1683,33 +1683,35 @@ the file @file{data} in Octave's binary 
 #ifdef HAVE_HDF5
 	  || format == LS_HDF5
 #endif
 	  || format == LS_MAT_BINARY
 	  || format == LS_MAT5_BINARY
 	  || format == LS_MAT7_BINARY)
 	mode |= std::ios::binary;
 
-      bool write_header_info = ! append;
-	      
 #ifdef HAVE_HDF5
       if (format == LS_HDF5)
 	{
+	  // FIXME. It should be possible to append to HDF5 files.
 	  if (append)
 	    {
 	      error ("save: appending to HDF5 files is not implemented");
 	      return retval;
 	    }
 
-	  hdf5_ofstream hdf5_file (fname.c_str ());
+	  bool write_header_info = ! (append && 
+				      H5Fis_hdf5 (fname.c_str ()) > 0);
 
-	  if (hdf5_file.file_id >= 0)
+	  hdf5_ofstream hdf5_file (fname.c_str (), mode);
+
+	  if (hdf5_file.file_id != -1)
 	    {
 	      save_vars (argv, i, argc, hdf5_file, format,
-			 save_as_floats, true);
+			 save_as_floats, write_header_info);
 
 	      hdf5_file.close ();
 	  }
 	else
 	  {
 	    gripe_file_open ("save", fname);
 	    return retval;
 	  }
@@ -1721,16 +1723,18 @@ the file @file{data} in Octave's binary 
 	{
 #ifdef HAVE_ZLIB
 	  if (use_zlib)
 	    {
 	      gzofstream file (fname.c_str (), mode);
 
 	      if (file)
 		{
+		  bool write_header_info = ! file.tellp ();
+
 		  save_vars (argv, i, argc, file, format,
 			     save_as_floats, write_header_info);
 
 		  file.close ();
 		}
 	      else
 		{
 		  gripe_file_open ("save", fname);
@@ -1739,16 +1743,18 @@ the file @file{data} in Octave's binary 
 	    }
 	  else
 #endif
 	    {
 	      std::ofstream file (fname.c_str (), mode);
 	  
 	      if (file)
 		{
+		  bool write_header_info = ! file.tellp ();
+
 		  save_vars (argv, i, argc, file, format,
 			     save_as_floats, write_header_info);
 
 		  file.close ();
 		}
 	      else
 		{
 		  gripe_file_open ("save", fname);
diff --git a/src/ls-hdf5.h b/src/ls-hdf5.h
--- a/src/ls-hdf5.h
+++ b/src/ls-hdf5.h
@@ -39,23 +39,30 @@ public:
   // HDF5 uses an "id" to refer to an open file
   hid_t file_id;
 
   // keep track of current item index in the file
   int current_item;
 
   hdf5_fstreambase () { file_id = -1; }
 
+  ~hdf5_fstreambase () { close (); }
+
   hdf5_fstreambase (const char *name, int mode, int /* prot */ = 0)
     {
       if (mode & std::ios::in)
 	file_id = H5Fopen (name, H5F_ACC_RDONLY, H5P_DEFAULT);
       else if (mode & std::ios::out)
-	file_id = H5Fcreate (name, H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);
-
+	{
+	  if (mode & std::ios::app && H5Fis_hdf5 (name) > 0)
+	    file_id = H5Fopen (name, H5F_ACC_RDWR, H5P_DEFAULT);
+	  else
+	    file_id = H5Fcreate (name, H5F_ACC_TRUNC, H5P_DEFAULT, 
+				 H5P_DEFAULT);
+	}
       if (file_id < 0)
 	std::ios::setstate (std::ios::badbit);
 
       current_item = 0;
     }
 
   void close ()
     { 
@@ -69,18 +76,23 @@ public:
 
   void open (const char *name, int mode, int)
     {
       clear ();
 
       if (mode & std::ios::in)
 	file_id = H5Fopen (name, H5F_ACC_RDONLY, H5P_DEFAULT);
       else if (mode & std::ios::out)
-	file_id = H5Fcreate (name, H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);
-
+	{
+	  if (mode & std::ios::app && H5Fis_hdf5 (name) > 0)
+	    file_id = H5Fopen (name, H5F_ACC_RDWR, H5P_DEFAULT);
+	  else
+	    file_id = H5Fcreate (name, H5F_ACC_TRUNC, H5P_DEFAULT, 
+				 H5P_DEFAULT);
+	}
       if (file_id < 0)
 	std::ios::setstate (std::ios::badbit);
 
       current_item = 0;
     }
 };
 
 // input and output streams, subclassing istream and ostream
