# HG changeset patch
# User jwe
# Date 799010860 0
#      Thu Apr 27 19:27:40 1995 +0000
# Node ID dac3c9c58b1aa56e1aa44cb492b37bacf8cf5bdd
# Parent  fcdf6c5d03029c046df7cc2e551e8fff767c3ad0
[project @ 1995-04-27 19:27:40 by jwe]

diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -36,16 +36,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "CMatrix.h"
 #include "Range.h"
 
 #include "tree-const.h"
 #include "variables.h"
 #include "user-prefs.h"
 #include "pr-output.h"
 #include "mappers.h"
+#include "sysdep.h"
 #include "pager.h"
 #include "help.h"
 #include "error.h"
 #include "utils.h"
 #include "defun.h"
 
 // Current format string for real numbers and the real part of complex
 // numbers.
@@ -55,22 +56,25 @@ static char *curr_real_fmt = 0;
 static char *curr_imag_fmt = 0;
 
 // Nonzero means don't do any fancy formatting.
 static int free_format = 0;
 
 // Nonzero means print plus sign for nonzero, blank for zero.
 static int plus_format = 0;
 
+// Nonzero means always print like dollars and cents.
+static int bank_format = 0;
+
+// Nonzero means print data in hexadecimal format.
+static int hex_format = 0;
+
 // Nonzero means don't put newlines around the column number headers.
 static int compact_format = 0;
 
-// Nonzero means always print like dollars and cents.
-static int bank_format = 0;
-
 // Nonzero means use an e format.
 static int print_e = 0;
 
 // Nonzero means print E instead of e for exponent field.
 static int print_big_e = 0;
 
 static int
 any_element_is_negative (const Matrix& a)
@@ -212,16 +216,21 @@ set_format (double d, int& fw)
   if (bank_format)
     {
       fw = digits < 0 ? 4 : digits + 3;
       if (inf_or_nan && fw < 3)
 	fw = 3;
       fw += sign;
       rd = 2;
     }
+  else if (hex_format)
+    {
+      fw = 2 * sizeof (double);
+      rd = 0;
+    }
   else if (xisnan (d) || D_NINT (d) == d)
     {
       fw = digits;
       if (inf_or_nan && fw < 3)
 	fw = 3;
       fw += sign;
       rd = 0;
     }
@@ -241,17 +250,18 @@ set_format (double d, int& fw)
 	}
 
       fw = ld + 1 + rd;
       if (inf_or_nan && fw < 3)
 	fw = 3;
       fw += sign;
     }
 
-  if (! bank_format && (fw > user_pref.output_max_field_width || print_e))
+  if (! (bank_format || hex_format)
+      && (fw > user_pref.output_max_field_width || print_e))
     {
       int exp_field = 4;
       if (digits > 100)
 	exp_field++;
 
       fw = 2 + prec + exp_field;
       if (inf_or_nan && fw < 3)
 	fw = 3;
@@ -307,16 +317,21 @@ set_format (const Matrix& m, int& fw)
     {
       int digits = x_max > x_min ? x_max : x_min;
       fw = digits <= 0 ? 4 : digits + 3;
       if (inf_or_nan && fw < 3)
 	fw = 3;
       fw += sign;
       rd = 2;
     }
+  else if (hex_format)
+    {
+      fw = 2 * sizeof (double);
+      rd = 0;
+    }
   else if (all_elements_are_int_or_inf_or_nan (m))
     {
       int digits = x_max > x_min ? x_max : x_min;
       fw = digits <= 0 ? 1 : digits;
       if (inf_or_nan && fw < 3)
 	fw = 3;
       fw += sign;
       rd = 0;
@@ -355,17 +370,18 @@ set_format (const Matrix& m, int& fw)
       rd = rd_max > rd_min ? rd_max : rd_min;
 
       fw = ld + 1 + rd;
       if (inf_or_nan && fw < 3)
 	fw = 3;
       fw += sign;
     }
 
-  if (! bank_format && (fw > user_pref.output_max_field_width || print_e))
+  if (! (bank_format ||hex_format)
+      && (fw > user_pref.output_max_field_width || print_e))
     {
       int exp_field = 4;
       if (x_max > 100 || x_min > 100)
 	exp_field++;
 
       fw = 2 + prec + exp_field;
       if (inf_or_nan && fw < 3)
 	fw = 3;
@@ -438,16 +454,22 @@ set_format (const Complex& c, int& r_fw,
       int digits = r_x;
       i_fw = 0;
       r_fw = digits <= 0 ? 4 : digits + 3;
       if (inf_or_nan && r_fw < 3)
 	r_fw = 3;
       r_fw += sign;
       rd = 2;
     }
+  else if (hex_format)
+    {
+      r_fw = 2 * sizeof (double);
+      i_fw = 2 * sizeof (double);
+      rd = 0;
+    }
   else if (inf_or_nan || (D_NINT (rp) == rp && D_NINT (ip) == ip))
     {
       int digits = x_max > x_min ? x_max : x_min;
       i_fw = r_fw = digits <= 0 ? 1 : digits;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
       r_fw += sign;
       rd = 0;
@@ -486,17 +508,18 @@ set_format (const Complex& c, int& r_fw,
       rd = rd_max > rd_min ? rd_max : rd_min;
 
       i_fw = r_fw = ld + 1 + rd;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
       r_fw += sign;
     }
 
-  if (! bank_format && (r_fw > user_pref.output_max_field_width || print_e))
+  if (! (bank_format || hex_format)
+      && (r_fw > user_pref.output_max_field_width || print_e))
     {
       int exp_field = 4;
       if (x_max > 100 || x_min > 100)
 	exp_field++;
 
       i_fw = r_fw = 1 + prec + exp_field;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
@@ -575,16 +598,22 @@ set_format (const ComplexMatrix& cm, int
       int digits = r_x_max > r_x_min ? r_x_max : r_x_min;
       i_fw = 0;
       r_fw = digits <= 0 ? 4 : digits + 3;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
       r_fw += sign;
       rd = 2;
     }
+  else if (hex_format)
+    {
+      r_fw = 2 * sizeof (double);
+      i_fw = 2 * sizeof (double);
+      rd = 0;
+    }
   else if (all_elements_are_int_or_inf_or_nan (rp)
 	   && all_elements_are_int_or_inf_or_nan (ip))
     {
       int digits = x_max > x_min ? x_max : x_min;
       i_fw = r_fw = digits <= 0 ? 1 : digits;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
       r_fw += sign;
@@ -624,17 +653,18 @@ set_format (const ComplexMatrix& cm, int
       rd = rd_max > rd_min ? rd_max : rd_min;
 
       i_fw = r_fw = ld + 1 + rd;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
       r_fw += sign;
     }
 
-  if (! bank_format && (r_fw > user_pref.output_max_field_width || print_e))
+  if (! (bank_format || hex_format)
+      && (r_fw > user_pref.output_max_field_width || print_e))
     {
       int exp_field = 4;
       if (x_max > 100 || x_min > 100)
 	exp_field++;
 
       i_fw = r_fw = 1 + prec + exp_field;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
@@ -659,18 +689,18 @@ set_format (const ComplexMatrix& cm, int
 
   curr_real_fmt = &r_fmt_buf[0];
   curr_imag_fmt = &i_fmt_buf[0];
 }
 
 static int
 all_elements_are_ints (const Range& r)
 {
-// If the base and increment are ints, the final value in the range
-// will also be an integer, even if the limit is not.
+  // If the base and increment are ints, the final value in the range
+  // will also be an integer, even if the limit is not.
 
   double b = r.base ();
   double i = r.inc ();
 
   return (! (xisnan (b) || xisnan (i))
 	  && (double) NINT (b) == b && (double) NINT (i) == i);
 }
 
@@ -715,16 +745,21 @@ set_format (const Range& r, int& fw)
   int ld, rd;
 
   if (bank_format)
     {
       int digits = x_max > x_min ? x_max : x_min;
       fw = sign + digits < 0 ? 4 : digits + 3;
       rd = 2;
     }
+  else if (hex_format)
+    {
+      fw = 2 * sizeof (double);
+      rd = 0;
+    }
   else if (all_elements_are_ints (r))
     {
       int digits = x_max > x_min ? x_max : x_min;
       fw = sign + digits;
       rd = 0;
     }
   else
     {
@@ -757,17 +792,18 @@ set_format (const Range& r, int& fw)
 	}
 
       ld = ld_max > ld_min ? ld_max : ld_min;
       rd = rd_max > rd_min ? rd_max : rd_min;
 
       fw = sign + ld + 1 + rd;
     }
 
-  if (! bank_format && (fw > user_pref.output_max_field_width || print_e))
+  if (! (bank_format || hex_format)
+      && (fw > user_pref.output_max_field_width || print_e))
     {
       int exp_field = 4;
       if (x_max > 100 || x_min > 100)
 	exp_field++;
 
       fw = sign + 2 + prec + exp_field;
 
       if (print_big_e)
@@ -785,25 +821,56 @@ set_format (const Range& r, int& fw)
 
 static inline void
 set_format (const Range& r)
 {
   int fw;
   set_format (r, fw);
 }
 
+union equiv
+{
+  double d;
+  unsigned char i[sizeof (double)];
+};
+
 static inline void
 pr_any_float (const char *fmt, ostream& os, double d, int fw = 0)
 {
   if (d == -0.0)
     d = 0.0;
 
   if (fmt)
     {
-      if (xisinf (d))
+      if (hex_format)
+	{
+	  equiv tmp;
+	  tmp.d = d;
+
+	  // Unless explicitly asked for, always print in big-endian
+	  // format.
+
+	  // XXX FIXME XXX -- is it correct to swap bytes for VAX
+	  // formats and not for Cray?
+
+	  if (hex_format > 1
+	      || native_float_format == OCTAVE_IEEE_BIG
+	      || native_float_format == OCTAVE_CRAY
+	      || native_float_format == OCTAVE_UNKNOWN_FLT_FMT)
+	    {
+	      for (int i = 0; i < sizeof (double); i++)
+		os.form ("%02x", (int) tmp.i[i]);
+	    }
+	  else
+	    {
+	      for (int i = sizeof (double) - 1; i >= 0; i--)
+		os.form ("%02x", (int) tmp.i[i]);
+	    }
+	}
+      else if (xisinf (d))
 	{
 	  char *s;
 	  if (d < 0.0)
 	    s = "-Inf";
 	  else
 	    s = "Inf";
 
 	  if (fw > 0)
@@ -840,25 +907,29 @@ pr_imag_float (ostream& os, double d, in
 static inline void
 pr_complex (ostream& os, const Complex& c, int r_fw = 0, int i_fw = 0)
 {
   double r = c.real ();
   pr_float (os, r, r_fw);
   if (! bank_format)
     {
       double i = c.imag ();
-      if (i < 0)
+      if (! hex_format && i < 0)
 	{
 	  os << " - ";
 	  i = -i;
 	  pr_imag_float (os, i, i_fw);
 	}
       else
 	{
-	  os << " + ";
+	  if (hex_format)
+	    os << "  ";
+	  else
+	    os << " + ";
+
 	  pr_imag_float (os, i, i_fw);
 	}
       os << "i";
     }
 }
 
 static void
 print_empty_matrix (ostream& os, int nr, int nc, int pr_as_read_syntax)
@@ -1096,17 +1167,17 @@ octave_print_internal (ostream& os, cons
 	  os << "\n";
 	}
     }
   else
     {
       int r_fw, i_fw;
       set_format (cm, r_fw, i_fw);
       int column_width = i_fw + r_fw;
-      column_width += bank_format ? 2 : 7;
+      column_width += (bank_format || hex_format) ? 2 : 7;
       int total_width = nc * column_width;
       int max_width = terminal_columns ();
 
       if (pr_as_read_syntax)
 	max_width -= 4;
 
       if (free_format)
 	{
@@ -1296,16 +1367,17 @@ DEFUN ("disp", Fdisp, Sdisp, 1, 1,
 }
 
 static void
 init_format_state (void)
 {
   free_format = 0;
   plus_format = 0;
   bank_format = 0;
+  hex_format = 0;
   print_e = 0;
   print_big_e = 0;
 }
 
 static void
 set_output_prec_and_fw (int prec, int fw)
 {
   tree_constant *tmp = 0;
@@ -1375,18 +1447,26 @@ set_format_style (int argc, char **argv)
 		    }
 		}
 	      else
 		init_format_state ();
 
 	      set_output_prec_and_fw (15, 24);
 	    }
 	  else if (strcmp (*argv, "hex") == 0)
-	    error ("format: format state `hex' not implemented yet");
-	  else if (strcmp (*argv, "+") == 0)
+	    {
+	      init_format_state ();
+	      hex_format = 1;
+	    }
+	  else if (strcmp (*argv, "native-hex") == 0)
+	    {
+	      init_format_state ();
+	      hex_format = 2;
+	    }
+	  else if (strcmp (*argv, "+") == 0 || strcmp (*argv, "plus") == 0)
 	    {
 	      init_format_state ();
 	      plus_format = 1;
 	    }
 	  else if (strcmp (*argv, "bank") == 0)
 	    {
 	      init_format_state ();
 	      bank_format = 1;
