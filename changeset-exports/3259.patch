# HG changeset patch
# User jwe
# Date 932617825 0
#      Thu Jul 22 04:30:25 1999 +0000
# Node ID fa345875edeac031b0b6549271142a16528dfc26
# Parent  4964d5391acc9d2936ace965c0bf889bc35d9154
[project @ 1999-07-22 04:30:18 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,30 @@
 Wed Jul 21 15:38:52 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* help.cc (display_names_from_help_list): Sort names before
+	listing them.
+	(print_symbol_type, Ftype): Also handle built-in constants.
+	(LIST_SYMBOLS): Correct call to symbol_table::name_list.
+	(simple_help): List constants here too.  List constants and
+	variables before functions, not after.  Sort names before listing
+	them.
+
+	* variables.cc (do_who): Display built-in constants in a separate
+	section.
+
+	* error.cc (bind_global_error_variable, clear_global_error_variable): 
+	Call bind_builtin_constant, not bind_builtin_variable to set
+	__error_text__.
+	* octave.cc (intern_argv): Likewise, for argv and __argv__.
+
+	* defun.cc (install_builtin_constant): Move function guts to
+	bind_builtin_constant in variables.cc.
+	* variables.cc (bind_builtin_constant): New function.
+
 	* symtab.cc (symbol_record::define, symbol_record::variable_reference):
 	Handle constants the same as functions.
 	(symbol_record::link_to_builtin_variable): New function.
 	(symbol_record::define_builtin_const): New function.
 	(symbol_record::define_as_fcn): Delete unused function.
 	(symbol_record::read_only_error):
 	Handle constants the same as variables.
 	* symtab.h (symbol_record::BUILTIN_CONSTANT): New enum value.
diff --git a/src/defun.cc b/src/defun.cc
--- a/src/defun.cc
+++ b/src/defun.cc
@@ -100,31 +100,17 @@ install_builtin_function (octave_builtin
   sym_rec->make_eternal ();
   sym_rec->protect ();
 }
 
 void
 install_builtin_constant (const string& name, const octave_value& val,
 			  bool protect, const string& help)
 {
-  symbol_record *sym_rec = global_sym_tab->lookup (name, true);
-  sym_rec->unprotect ();
-
-  string tmp_help = help.empty () ? sym_rec->help () : help;
-
-  sym_rec->define_builtin_const (val);
-
-  sym_rec->document (tmp_help);
-
-  if (protect)
-    sym_rec->protect ();
-
-  // XXX FIXME XXX -- shouldn't constants be eternal?
-  //  if (eternal)
-  //    sym_rec->make_eternal ();
+  bind_builtin_constant (name, val, protect, false, help);
 }
 
 void
 install_builtin_variable (const string& name, const octave_value& value,
 			  bool protect, bool eternal,
 			  symbol_record::change_function chg_fcn,
 			  const string& doc)
 {
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -296,32 +296,32 @@ See also: error, printf")
 
 void
 bind_global_error_variable (void)
 {
   *error_message_buffer << ends;
 
   char *error_text = error_message_buffer->str ();
 
-  bind_builtin_variable ("__error_text__", error_text, 1);
+  bind_builtin_constant ("__error_text__", error_text, true);
 
   delete [] error_text;
 
   delete error_message_buffer;
 
   error_message_buffer = 0;
 }
 
 void
 clear_global_error_variable (void *)
 {
   delete error_message_buffer;
   error_message_buffer = 0;
 
-  bind_builtin_variable ("__error_text__", "", 1);
+  bind_builtin_constant ("__error_text__", "", true);
 }
 
 static int
 beep_on_error (void)
 {
   Vbeep_on_error = check_preference ("beep_on_error");
 
   return 0;
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -393,17 +393,17 @@ make_name_list (void)
   return list;
 }
 
 void
 additional_help_message (ostream& os)
 {
   if (! Vsuppress_verbose_help_message)
     os << "\n\
-Additional help for builtin functions, operators, and variables\n\
+Additional help for built-in functions, operators, and variables\n\
 is available in the on-line version of the manual.  Use the command\n\
 `help -i <topic>' to search the manual index.\n";
 
   if (! Vsuppress_verbose_help_message)
     os << "\n\
 Help and information about Octave is also available on the WWW\n\
 at http://www.che.wisc.edu/octave/octave.html and via the\n\
 help-octave@bevo.che.wisc.edu mailing list.\n";
@@ -413,20 +413,25 @@ help-octave@bevo.che.wisc.edu mailing li
 // XXX FIXME XXX -- this needs a major overhaul to cope with new
 // symbol table stuff.
 
 static void
 display_names_from_help_list (ostream& os, help_list *list,
 			      const char *desc)
 {
   int count = 0;
+
   string_vector symbols = names (list, count);
+
   if (! symbols.empty ())
     {
       os << "\n*** " << desc << ":\n\n";
+
+      symbols.qsort ();
+
       symbols.list_in_columns (os);
     }
 }
 
 static string
 print_symbol_type (ostream& os, symbol_record *sym_rec,
 		   const string& name, int print)
 {
@@ -459,40 +464,47 @@ print_symbol_type (ostream& os, symbol_r
 	    os << name << " is a user-defined function\n";
 	  else
 	    retval = "user-defined function";
 	}
     }
   else if (sym_rec->is_text_function ())
     {
       if (print)
-	os << name << " is a builtin text-function\n";
+	os << name << " is a built-in text-function\n";
       else
-	retval = "builtin text-function";
+	retval = "built-in text-function";
     }
   else if (sym_rec->is_builtin_function ())
     {
       if (print)
-	os << name << " is a builtin function\n";
+	os << name << " is a built-in function\n";
       else
-	retval = "builtin function";
+	retval = "built-in function";
     }
   else if (sym_rec->is_user_variable ())
     {
       if (print)
 	os << name << " is a user-defined variable\n";
       else
 	retval = "user-defined variable";
     }
   else if (sym_rec->is_builtin_variable ())
     {
       if (print)
-	os << name << " is a builtin variable\n";
+	os << name << " is a built-in variable\n";
       else
-	retval = "builtin variable";
+	retval = "built-in variable";
+    }
+  else if (sym_rec->is_builtin_constant ())
+    {
+      if (print)
+	os << name << " is a built-in constant\n";
+      else
+	retval = "built-in variable";
     }
   else
     {
       if (print)
 	os << "which: `" << name << "' has unknown type\n";
       else
 	retval = "unknown type";
     }
@@ -513,17 +525,18 @@ display_symtab_names (ostream& os, const
 
 #ifdef LIST_SYMBOLS
 #undef LIST_SYMBOLS
 #endif
 #define LIST_SYMBOLS(type, msg) \
   do \
     { \
       int count; \
-      string_vector names = global_sym_tab->name_list (count, 0, 0, 1, type); \
+      string_vector names \
+	= global_sym_tab->name_list (count, string_vector (), true, type); \
       display_symtab_names (octave_stdout, names, count, msg); \
     } \
   while (0)
 
 static void
 simple_help (void)
 {
   octave_stdout << "Help is available for the topics listed below.\n";
@@ -533,25 +546,27 @@ simple_help (void)
   display_names_from_help_list (octave_stdout, operator_help (),
 				"operators");
 
   display_names_from_help_list (octave_stdout, keyword_help (),
 				"reserved words");
 
   // XXX FIXME XXX -- is this distinction needed?
 
+  LIST_SYMBOLS (symbol_record::BUILTIN_CONSTANT, "built-in constants");
+
+  LIST_SYMBOLS (symbol_record::BUILTIN_VARIABLE, "built-in variables");
+
   LIST_SYMBOLS (symbol_record::TEXT_FUNCTION,
 		"text functions (these names are also reserved)");
 
   LIST_SYMBOLS (symbol_record::MAPPER_FUNCTION, "mapper functions");
 
   LIST_SYMBOLS (symbol_record::BUILTIN_FUNCTION, "general functions");
 
-  LIST_SYMBOLS (symbol_record::BUILTIN_VARIABLE, "builtin variables");
-
   // Also need to list variables and currently compiled functions from
   // the symbol table, if there are any.
 
   // Also need to search octave_path for script files.
 
   string_vector dirs = Vload_path_dir_path.all_directories ();
 
   int len = dirs.length ();
@@ -562,16 +577,18 @@ simple_help (void)
 
       if (! names.empty ())
 	{
 	  string dir
 	    = octave_env::make_absolute (dirs[i], octave_env::getcwd ());
 
 	  octave_stdout << "\n*** function files in " << dir << ":\n\n";
 
+	  names.qsort ();
+
 	  names.list_in_columns (octave_stdout);
 	}
     }
 }
 
 static int
 try_info (const string& nm)
 {
@@ -852,21 +869,22 @@ display the definition of each NAME that
 		      defn->accept (tpc);
 		    }
 		}
 
 	      // XXX FIXME XXX -- this code should be shared with
 	      // Fwhich.
 
 	      else if (sym_rec->is_text_function ())
-		output_buf << argv[i] << " is a builtin text-function\n";
+		output_buf << argv[i] << " is a built-in text-function\n";
 	      else if (sym_rec->is_builtin_function ())
-		output_buf << argv[i] << " is a builtin function\n";
+		output_buf << argv[i] << " is a built-in function\n";
 	      else if (sym_rec->is_user_variable ()
-		       || sym_rec->is_builtin_variable ())
+		       || sym_rec->is_builtin_variable ()
+		       || sym_rec->is_builtin_constant ())
 		{
 		  octave_value defn = sym_rec->def ();
 
 		  int var_ok = 1;
 
 		  // XXX FIXME XXX -- need to handle structure
 		  // references correctly.
 
@@ -878,18 +896,22 @@ display the definition of each NAME that
 		      if (nargout == 0 && ! quiet)
 			{
 			  if (var_ok)
 			    {
 			      output_buf << argv[i];
 
 			      if (sym_rec->is_user_variable ())
 				output_buf << " is a user-defined variable\n";
+			      else if (sym_rec->is_builtin_variable ())
+				output_buf << " is a built-in variable\n";
+			      else if (sym_rec->is_builtin_constant ())
+				output_buf << " is a built-in constant\n";
 			      else
-				output_buf << " is a built-in variable\n";
+				panic_impossible ();
 			    }
 			  else
 			    {
 			      if (! elts.empty ())
 				output_buf << "type: structure `" << id
 					   << "' has no member `" << elts
 					   << "'\n";
 			      else
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -149,30 +149,31 @@ long_options long_opts[] =
     { 0,                  0,                       0, 0 }
   };
 
 // Store the command-line options for later use.
 
 static void
 intern_argv (int argc, char **argv)
 {
-  bind_builtin_variable ("nargin", static_cast<double> (argc-1), 1, 1, 0);
+  bind_builtin_variable ("nargin", static_cast<double> (argc-1),
+			 true, true, 0);
 
   octave_value_list octave_argv;
 
   if (argc > 1)
     {
       // Skip program name in argv.
       while (--argc > 0)
 	octave_argv(argc-1) = octave_value (*(argv+argc));
 
     }
 
-  bind_builtin_variable ("argv", octave_argv, 1, 1, 0);
-  bind_builtin_variable ("__argv__", octave_argv, 1, 1, 0);
+  bind_builtin_constant ("argv", octave_argv, true, true);
+  bind_builtin_constant ("__argv__", octave_argv, true, true);
 }
 
 static void
 initialize_pathsearch (void)
 {
   // This may seem odd, but doing it this way means that we don't have
   // to modify the kpathsea library...
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -852,16 +852,20 @@ do_who (int argc, const string_vector& a
       show_variables = 1;
     }
 
   int pad_after = 0;
 
   if (show_builtins)
     {
       pad_after += global_sym_tab->maybe_list
+	("*** built-in constants:", pats, octave_stdout,
+	 show_verbose, symbol_record::BUILTIN_CONSTANT, SYMTAB_ALL_SCOPES);
+
+      pad_after += global_sym_tab->maybe_list
 	("*** built-in variables:", pats, octave_stdout,
 	 show_verbose, symbol_record::BUILTIN_VARIABLE, SYMTAB_ALL_SCOPES);
 
       pad_after += global_sym_tab->maybe_list
 	("*** built-in functions:", pats, octave_stdout,
 	 show_verbose, symbol_record::BUILTIN_FUNCTION, SYMTAB_ALL_SCOPES);
     }
 
@@ -949,16 +953,42 @@ bind_ans (const octave_value& val, bool 
     {
       sr->define (val);
 
       if (print)
 	val.print_with_name (octave_stdout, "ans");
     }
 }
 
+// Give a global constant a definition.  This will insert the symbol
+// in the global table if necessary.
+
+// How is this different than install_builtin_constant?  Are both
+// functions needed?
+
+void
+bind_builtin_constant (const string& name, const octave_value& val,
+		       bool protect, bool eternal, const string& help)
+{
+  symbol_record *sym_rec = global_sym_tab->lookup (name, true);
+  sym_rec->unprotect ();
+
+  string tmp_help = help.empty () ? sym_rec->help () : help;
+
+  sym_rec->define_builtin_const (val);
+
+  sym_rec->document (tmp_help);
+
+  if (protect)
+    sym_rec->protect ();
+
+  if (eternal)
+    sym_rec->make_eternal ();
+}
+
 // Give a global variable a definition.  This will insert the symbol
 // in the global table if necessary.
 
 // How is this different than install_builtin_variable?  Are both
 // functions needed?
 
 void
 bind_builtin_variable (const string& varname, const octave_value& val,
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -90,16 +90,21 @@ extern void force_link_to_function (cons
 
 extern void bind_ans (const octave_value& val, bool print);
 
 extern void bind_global_error_variable (void);
 
 extern void clear_global_error_variable (void *);
 
 extern void
+bind_builtin_constant (const string&, const octave_value&,
+		       bool protect = false, bool eternal = false,
+		       const string& help = string ());
+
+extern void
 bind_builtin_variable (const string&, const octave_value&,
 		       bool protect = false, bool eternal = false,
 		       symbol_record::change_function f = 0,
 		       const string& help = string ());
 
 // Symbol table for symbols at the top level.
 extern symbol_table *top_level_sym_tab;
 
