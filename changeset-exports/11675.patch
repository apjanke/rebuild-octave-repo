# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1204828928 18000
#      Thu Mar 06 13:42:08 2008 -0500
# Branch release-3-0-x
# Node ID 20244a1412cb9bcd3c4f4b972f35730f30541890
# Parent  270677feba91bc7e4dd3ff67eade181d7a09efef
hist: avoid temps; allow matrix args when number of bins > 30

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,14 @@
 2008-03-06  John W. Eaton  <jwe@octave.org>
 
+	* plot/hist.m: Avoid temporaries.
+	Allow matrix arguments when number of bins > 30.
+	From Robert S. Mahurin <mahurin@fiver.phys.utk.edu>.
+
 	* plot/__go_draw_axes__.m: Adjust markersize by a factor of 1/6.
 
 2008-03-05  Ben Abbott  <bpabbott@mac.com>
 
 	* polynomial/roots.m: Catch Infs and/or NaNs.
 
 2008-03-05  Sebastien Loisel  <loisel@temple.edu>
 
diff --git a/scripts/plot/hist.m b/scripts/plot/hist.m
--- a/scripts/plot/hist.m
+++ b/scripts/plot/hist.m
@@ -92,34 +92,34 @@ function [nn, xx] = hist (y, varargin)
   endif
 
   ## Avoid issues with integer types for x and y
   x = double (x);
   y = double (y);
 
   cutoff = (x(1:end-1,:) + x(2:end,:)) / 2;
   n = rows (x);
+  y_nc = columns (y);
   if (n < 30 && columns (x) == 1)
     ## The following algorithm works fastest for n less than about 30.
-    chist = zeros (n+1, columns (y));
+    chist = zeros (n+1, y_nc);
     for i = 1:n-1
       chist(i+1,:) = sum (y <= cutoff(i));
     endfor
     chist(n+1,:) = sum (! isnan (y));
   else
     ## The following algorithm works fastest for n greater than about 30.
     ## Put cutoff elements between boundaries, integrate over all
     ## elements, keep totals at boundaries.
-    [s, idx] = sort ([y; cutoff]);
+    [s, idx] = sort ([y; repmat(cutoff, 1, y_nc)]);
     len = rows (y);
     chist = cumsum (idx <= len);
-    t1 = zeros (1, columns (y));
-    t2 = reshape (chist(idx > len), size (cutoff));
-    t3 = chist(end,:) - sum (isnan (y));
-    chist = [t1; t2; t3];
+    chist = [(zeros (1, y_nc));
+	     (reshape (chist(idx > len), rows (cutoff), y_nc));
+	     (chist(end,:) - sum (isnan (y)))];
   endif
 
   freq = diff (chist);
 
   if (nargin > 2 && ! ischar (varargin{iarg}))
     ## Normalise the histogram.
     norm = varargin{iarg++};
     freq = freq / rows (y) * norm;
@@ -161,8 +161,10 @@ endfunction
 %!test
 %!  for n = [10, 30, 100, 1000]
 %!    assert( sum(hist([1:n], n)), n );
 %!    assert( sum(hist([1:n], [2:n-1])), n);
 %!    assert( sum(hist([1:n], [1:n])), n );
 %!    assert( sum(hist([1:n], 29)), n);
 %!    assert( sum(hist([1:n], 30)), n);
 %!  endfor
+%!test
+%!  assert (size (hist(randn(750,240), 200)), [200,240]);
