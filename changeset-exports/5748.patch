# HG changeset patch
# User jwe
# Date 1144396319 0
#      Fri Apr 07 07:51:59 2006 +0000
# Node ID 8510034588a71511a045bd07d63ae0513003b17d
# Parent  b09d4d0f5b633ceb69551501204b7ab04d94d661
[project @ 2006-04-07 07:51:59 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 2006-04-07  John W. Eaton  <jwe@octave.org>
 
+	* pr-output.cc (pr_max_internal, pr_min_internal):
+	Return 0 if all values are Inf or NaN.
+	Always leave space for sign when printing Inf or NaN values.
+
 	* parse.y (Fmfilename): Don't let filenames like ../foo fake us out.
 
 	* data.cc (fill_matrix): Create separate versions for int, bool,
 	and double, and Complex values.
 	(FInf, FNaN, Fe, Feps, Fpi, Frealmax, Frealmin, FI, FNA, Ffalse,
 	Ftrue): New functions to replace DEFCONST and DEFCONSTX macros in
 	symbols_of_data.  Provide i, J, and j aliases for I.
 	Provide nan alias for NaN.  Provide inf alias for Inf.
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -228,49 +228,63 @@ static float_format *curr_imag_fmt = 0;
 static double
 pr_max_internal (const Matrix& m)
 {
   octave_idx_type nr = m.rows ();
   octave_idx_type nc = m.columns ();
 
   double result = -DBL_MAX;
 
+  bool all_inf_or_nan = true;
+
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
 	double val = m(i,j);
 	if (xisinf (val) || xisnan (val))
 	  continue;
 
+	all_inf_or_nan = false;
+
 	if (val > result)
 	  result = val;
       }
 
+  if (all_inf_or_nan)
+    result = 0.0;
+
   return result;
 }
 
 static double
 pr_min_internal (const Matrix& m)
 {
   octave_idx_type nr = m.rows ();
   octave_idx_type nc = m.columns ();
 
   double result = DBL_MAX;
 
+  bool all_inf_or_nan = true;
+
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
 	double val = m(i,j);
 	if (xisinf (val) || xisnan (val))
 	  continue;
 
+	all_inf_or_nan = false;
+
 	if (val < result)
 	  result = val;
       }
 
+  if (all_inf_or_nan)
+    result = 0.0;
+
   return result;
 }
 
 // XXX FIXME XXX -- it would be nice to share more code among these
 // functions,..
 
 static void
 set_real_format (bool sign, int digits, bool inf_or_nan, bool int_only,
@@ -280,37 +294,35 @@ set_real_format (bool sign, int digits, 
 
   int prec = Voutput_precision;
 
   int ld, rd;
 
   if (bank_format)
     {
       fw = digits < 0 ? 4 : digits + 3;
-      if (inf_or_nan && fw < 3)
-	fw = 3;
-      fw += sign;
+      if (inf_or_nan && fw < 4)
+	fw = 4;
       rd = 2;
     }
   else if (hex_format)
     {
       fw = 2 * sizeof (double);
       rd = 0;
     }
   else if (bit_format)
     {
       fw = 8 * sizeof (double);
       rd = 0;
     }
   else if (inf_or_nan || int_only)
     {
       fw = digits;
-      if (inf_or_nan && fw < 3)
-	fw = 3;
-      fw += sign;
+      if (inf_or_nan && fw < 4)
+	fw = 4;
       rd = fw;
     }
   else
     {
       if (digits > 0)
 	{
 	  ld = digits;
 	  rd = prec > digits ? prec - digits : prec;
@@ -319,36 +331,34 @@ set_real_format (bool sign, int digits, 
       else
 	{
 	  ld = 1;
 	  rd = prec > digits ? prec - digits : prec;
 	  digits = -digits + 1;
 	}
 
       fw = ld + 1 + rd;
-      if (inf_or_nan && fw < 3)
-	fw = 3;
-      fw += sign;
+      if (inf_or_nan && fw < 4)
+	fw = 4;
     }
 
   if (! (bank_format || hex_format || bit_format)
       && (fw > Voutput_max_field_width || print_e || print_g))
     {
       if (print_g)
 	fmt = float_format ();
       else
 	{
 	  int exp_field = 4;
 	  if (digits > 100)
 	    exp_field++;
 
 	  fw = 2 + prec + exp_field;
-	  if (inf_or_nan && fw < 3)
-	    fw = 3;
-	  fw += sign;
+	  if (inf_or_nan && fw < 4)
+	    fw = 4;
 
 	  fmt = float_format (fw, prec - 1, std::ios::scientific);
 	}
 
       if (print_big_e)
 	fmt.uppercase ();
     }
   else if (! bank_format && (inf_or_nan || int_only))
@@ -398,46 +408,43 @@ set_real_matrix_format (bool sign, int x
   int prec = Voutput_precision;
 
   int ld, rd;
 
   if (bank_format)
     {
       int digits = x_max > x_min ? x_max : x_min;
       fw = digits <= 0 ? 4 : digits + 3;
-      if (inf_or_nan && fw < 3)
-	fw = 3;
-      fw += sign;
+      if (inf_or_nan && fw < 4)
+	fw = 4;
       rd = 2;
     }
   else if (hex_format)
     {
       fw = 2 * sizeof (double);
       rd = 0;
     }
   else if (bit_format)
     {
       fw = 8 * sizeof (double);
       rd = 0;
     }
   else if (Vfixed_point_format && ! print_g)
     {
       rd = prec;
       fw = rd + 2;
-      if (inf_or_nan && fw < 3)
-	fw = 3;
-      fw += sign;
+      if (inf_or_nan && fw < 4)
+	fw = 4;
     }
   else if (int_or_inf_or_nan)
     {
       int digits = x_max > x_min ? x_max : x_min;
       fw = digits <= 0 ? 1 : digits;
-      if (inf_or_nan && fw < 3)
-	fw = 3;
-      fw += sign;
+      if (inf_or_nan && fw < 4)
+	fw = 4;
       rd = fw;
     }
   else
     {
       int ld_max, rd_max;
       if (x_max > 0)
 	{
 	  ld_max = x_max;
@@ -464,38 +471,36 @@ set_real_matrix_format (bool sign, int x
 	  rd_min = prec > x_min ? prec - x_min : prec;
 	  x_min = -x_min + 1;
 	}
 
       ld = ld_max > ld_min ? ld_max : ld_min;
       rd = rd_max > rd_min ? rd_max : rd_min;
 
       fw = ld + 1 + rd;
-      if (inf_or_nan && fw < 3)
-	fw = 3;
-      fw += sign;
+      if (inf_or_nan && fw < 4)
+	fw = 4;
     }
 
   if (! (bank_format || hex_format || bit_format)
       && (print_e
 	  || print_g
 	  || (! Vfixed_point_format && fw > Voutput_max_field_width)))
     {
       if (print_g)
 	fmt = float_format ();
       else
 	{
 	  int exp_field = 4;
 	  if (x_max > 100 || x_min > 100)
 	    exp_field++;
 
 	  fw = 2 + prec + exp_field;
-	  if (inf_or_nan && fw < 3)
-	    fw = 3;
-	  fw += sign;
+	  if (inf_or_nan && fw < 4)
+	    fw = 4;
 
 	  fmt = float_format (fw, prec - 1, std::ios::scientific);
 	}
 
       if (print_big_e)
 	fmt.uppercase ();
     }
   else if (! bank_format && int_or_inf_or_nan)
@@ -556,19 +561,18 @@ set_complex_format (bool sign, int x_max
 
   int ld, rd;
 
   if (bank_format)
     {
       int digits = r_x;
       i_fw = 0;
       r_fw = digits <= 0 ? 4 : digits + 3;
-      if (inf_or_nan && r_fw < 3)
-	r_fw = 3;
-      r_fw += sign;
+      if (inf_or_nan && r_fw < 4)
+	r_fw = 4;
       rd = 2;
     }
   else if (hex_format)
     {
       r_fw = 2 * sizeof (double);
       i_fw = 2 * sizeof (double);
       rd = 0;
     }
@@ -577,19 +581,18 @@ set_complex_format (bool sign, int x_max
       r_fw = 8 * sizeof (double);
       i_fw = 8 * sizeof (double);
       rd = 0;
     }
   else if (inf_or_nan || int_only)
     {
       int digits = x_max > x_min ? x_max : x_min;
       i_fw = r_fw = digits <= 0 ? 1 : digits;
-      if (inf_or_nan && i_fw < 3)
-	i_fw = r_fw = 3;
-      r_fw += sign;
+      if (inf_or_nan && i_fw < 4)
+	i_fw = r_fw = 4;
       rd = r_fw;
     }
   else
     {
       int ld_max, rd_max;
       if (x_max > 0)
 	{
 	  ld_max = x_max;
@@ -616,19 +619,18 @@ set_complex_format (bool sign, int x_max
 	  rd_min = prec > x_min ? prec - x_min : prec;
 	  x_min = -x_min + 1;
 	}
 
       ld = ld_max > ld_min ? ld_max : ld_min;
       rd = rd_max > rd_min ? rd_max : rd_min;
 
       i_fw = r_fw = ld + 1 + rd;
-      if (inf_or_nan && i_fw < 3)
-	i_fw = r_fw = 3;
-      r_fw += sign;
+      if (inf_or_nan && i_fw < 4)
+	i_fw = r_fw = 4;
     }
 
   if (! (bank_format || hex_format || bit_format)
       && (r_fw > Voutput_max_field_width || print_e || print_g))
     {
       if (print_g)
 	{
 	  r_fmt = float_format ();
@@ -636,19 +638,18 @@ set_complex_format (bool sign, int x_max
 	}
       else
 	{
 	  int exp_field = 4;
 	  if (x_max > 100 || x_min > 100)
 	    exp_field++;
 
 	  i_fw = r_fw = 1 + prec + exp_field;
-	  if (inf_or_nan && i_fw < 3)
-	    i_fw = r_fw = 3;
-	  r_fw += sign;
+	  if (inf_or_nan && i_fw < 4)
+	    i_fw = r_fw = 4;
 
 	  r_fmt = float_format (r_fw, prec - 1, std::ios::scientific);
 	  i_fmt = float_format (i_fw, prec - 1, std::ios::scientific);
 	}
 
       if (print_big_e)
 	{
 	  r_fmt.uppercase ();
@@ -733,19 +734,18 @@ set_complex_matrix_format (bool sign, in
 
   int ld, rd;
 
   if (bank_format)
     {
       int digits = r_x_max > r_x_min ? r_x_max : r_x_min;
       i_fw = 0;
       r_fw = digits <= 0 ? 4 : digits + 3;
-      if (inf_or_nan && i_fw < 3)
-	i_fw = r_fw = 3;
-      r_fw += sign;
+      if (inf_or_nan && i_fw < 4)
+	i_fw = r_fw = 4;
       rd = 2;
     }
   else if (hex_format)
     {
       r_fw = 2 * sizeof (double);
       i_fw = 2 * sizeof (double);
       rd = 0;
     }
@@ -754,27 +754,25 @@ set_complex_matrix_format (bool sign, in
       r_fw = 8 * sizeof (double);
       i_fw = 8 * sizeof (double);
       rd = 0;
     }
   else if (Vfixed_point_format && ! print_g)
     {
       rd = prec;
       i_fw = r_fw = rd + 2;
-      if (inf_or_nan && i_fw < 3)
-	i_fw = r_fw = 3;
-      r_fw += sign;
+      if (inf_or_nan && i_fw < 4)
+	i_fw = r_fw = 4;
     }
   else if (int_or_inf_or_nan)
     {
       int digits = x_max > x_min ? x_max : x_min;
       i_fw = r_fw = digits <= 0 ? 1 : digits;
-      if (inf_or_nan && i_fw < 3)
-	i_fw = r_fw = 3;
-      r_fw += sign;
+      if (inf_or_nan && i_fw < 4)
+	i_fw = r_fw = 4;
       rd = r_fw;
     }
   else
     {
       int ld_max, rd_max;
       if (x_max > 0)
 	{
 	  ld_max = x_max;
@@ -801,19 +799,18 @@ set_complex_matrix_format (bool sign, in
 	  rd_min = prec > x_min ? prec - x_min : prec;
 	  x_min = -x_min + 1;
 	}
 
       ld = ld_max > ld_min ? ld_max : ld_min;
       rd = rd_max > rd_min ? rd_max : rd_min;
 
       i_fw = r_fw = ld + 1 + rd;
-      if (inf_or_nan && i_fw < 3)
-	i_fw = r_fw = 3;
-      r_fw += sign;
+      if (inf_or_nan && i_fw < 4)
+	i_fw = r_fw = 4;
     }
 
   if (! (bank_format || hex_format || bit_format)
       && (print_e
 	  || print_g
 	  || (! Vfixed_point_format && r_fw > Voutput_max_field_width)))
     {
       if (print_g)
@@ -823,19 +820,18 @@ set_complex_matrix_format (bool sign, in
 	}
       else
 	{
 	  int exp_field = 4;
 	  if (x_max > 100 || x_min > 100)
 	    exp_field++;
 
 	  i_fw = r_fw = 1 + prec + exp_field;
-	  if (inf_or_nan && i_fw < 3)
-	    i_fw = r_fw = 3;
-	  r_fw += sign;
+	  if (inf_or_nan && i_fw < 4)
+	    i_fw = r_fw = 4;
 
 	  r_fmt = float_format (r_fw, prec - 1, std::ios::scientific);
 	  i_fmt = float_format (i_fw, prec - 1, std::ios::scientific);
 	}
 
       if (print_big_e)
 	{
 	  r_fmt.uppercase ();
