# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1227166895 -3600
#      Thu Nov 20 08:41:35 2008 +0100
# Branch release-3-0-x
# Node ID 53e846af744d0cc2aa6bfdde3f7ffb2a92520701
# Parent  3342d1a7c4c95d1216386568417f5591d9cd3fed
dir-ops.cc (dir_entry::read): use std::list<std::string> to cache names before converting to string_vector

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2008-11-17  John W. Eaton  <jwe@octave.org>
+
+	* dir-ops.cc (dir_entry::read): Use std::list<std::string> to
+	cache names before converting to string_vector.
+
 2008-10-09  Jaroslav Hajek <highegg@gmail.com>
 
 	* oct-sort.cc (octave_sort<T>::merge_getmem,
 	octave_sort<T>::merge_freemem): Replace malloc -> new [], free ->
 	delete [].
 	(octave_sort<T>::merge_lo, octave_sort<T>::merge_hi): Replace
 	std::memcpy and std::memmove with std::copy.
 
diff --git a/liboctave/dir-ops.cc b/liboctave/dir-ops.cc
--- a/liboctave/dir-ops.cc
+++ b/liboctave/dir-ops.cc
@@ -23,16 +23,19 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cerrno>
 #include <cstdlib>
 #include <cstring>
 
+#include <list>
+#include <string>
+
 #include "sysdir.h"
 
 #include "dir-ops.h"
 #include "file-ops.h"
 #include "lo-error.h"
 #include "lo-sysdep.h"
 #include "str-vec.h"
 
@@ -64,50 +67,36 @@ dir_entry::open (const std::string& n)
     errmsg = "dir_entry::open: empty file name";
 
   return ! fail;
 }
 
 string_vector
 dir_entry::read (void)
 {
-  static octave_idx_type grow_size = 100;
-
-  octave_idx_type len = 0;
-
-  string_vector dirlist;
+  string_vector retval;
 
   if (ok ())
     {
-      int count = 0;
+      std::list<std::string> dirlist;
 
       struct dirent *dir_ent;
 
       while ((dir_ent = readdir (static_cast<DIR *> (dir))))
 	{
 	  if (dir_ent)
-	    {
-	      if (count >= len)
-		{
-		  len += grow_size;
-		  dirlist.resize (len);
-		}
-
-	      dirlist[count] = dir_ent->d_name;
-
-	      count++;
-	    }
+	    dirlist.push_back (dir_ent->d_name);
 	  else
 	    break;
 	}
 
-      dirlist.resize (count);
+      retval = string_vector (dirlist);
     }
 
-  return dirlist;
+  return retval;
 }
 
 void
 dir_entry::close (void)
 {
   if (dir)
     closedir (static_cast<DIR *> (dir));
 
