# HG changeset patch
# User Rik <rik@octave.org>
# Date 1458937530 25200
#      Fri Mar 25 13:25:30 2016 -0700
# Node ID 1ed8718c4f11d01c7c871df9e2f0d1c640091eb8
# Parent  ca9c8ef555cba17547a8ca402b4059a644a7a8f1
doc: Add more suggestions to Contribution Guidelines.

* contrib.txi: Add more suggestions to Contribution Guidelines.

diff --git a/doc/interpreter/contrib.txi b/doc/interpreter/contrib.txi
--- a/doc/interpreter/contrib.txi
+++ b/doc/interpreter/contrib.txi
@@ -257,31 +257,32 @@ code, particularly if there is something
 reading it later.
 
 When submitting code which addresses a known bug on the Octave bug
 tracker (@url{http://bugs.octave.org}), please add '(bug #XXXXX)' to the
 first line of the commit messages.  For example:
 
 @example
 @group
-Fix bug for complex input for gradient (bug #34292).
+Fix zip, gzip, bzip2 to allow names with spaces (bug #47232)
 @end group
 @end example
 
 The preferred comment mark for places that may need further attention is
 @code{FIXME:}.
 
 @node Octave Sources (m-files)
 @section Octave Sources (m-files)
 
 Don't use tabs.  Tabs cause trouble.  If you are used to them, set up
 your editor so that it converts tabs to spaces.  Indent the bodies of
-statement blocks.  The recommended indent is 2 spaces.  When calling
-functions, put spaces after commas and before the calling parentheses,
-like this:
+statement blocks.  The recommended indent is 2 spaces.
+
+When calling functions, put spaces after commas and before the calling
+parentheses, like this:
 
 @example
   x = max (sin (y+3), 2);
 @end example
 
 @noindent
 An exception are matrix or cell constructors:
 
@@ -289,32 +290,50 @@ An exception are matrix or cell construc
 @group
   [sin(x), cos(x)]
   @{sin(x), cos(x)@}
 @end group
 @end example
 
 @noindent
 Here, putting spaces after @code{sin}, @code{cos} would result in a
-parse error.  For an indexing expression, do not put a space after the
+parse error.
+
+For indexing expressions, do @emph{not} put a space after the
 identifier (this differentiates indexing and function calls nicely).
 The space after a comma is not necessary if index expressions are simple,
 i.e., you may write
 
 @example
   A(:,i,j)
 @end example
 
 @noindent
 but
 
 @example
   A([1:i-1;i+1:n], XI(:,2:n-1))
 @end example
 
+When constructing matrices, prefer using the comma rather than the space to
+distinguish between columns.
+
+@example
+  M = [1, 2, 3
+       4, 5, 6];
+@end example
+
+However, if the matrix is large or the indentation makes it clear the comma
+may be dropped.
+
+@example
+  prices = [ 1.01  2.02  3.03
+            44.04 55.05  6.06];
+@end example
+
 Use lowercase names if possible.  Uppercase is acceptable for variable
 names consisting of 1-2 letters.  Do not use mixed case names.  Function
 names must be lowercase.  Function names are global, so choose them
 wisely.
 
 Always use a specific end-of-block statement (like @code{endif},
 @code{endswitch}) rather than the generic @code{end}.
 
@@ -336,42 +355,49 @@ Do not do this, however, with the iterat
 @example
 @group
 for i = 1:n
   b(i) = sum (a(:,i));
 endfor
 @end group
 @end example
 
+The Octave operator @samp{!} should be used for logical negation, rather than
+@samp{~}.  Comments should begin with the @samp{#} character, rather than
+@samp{%}.
+
 @node C++ Sources
 @section C++ Sources
 
 Don't use tabs.  Tabs cause trouble.  If you are used to them, set up
-your editor so that it converts tabs to spaces.  Format function headers
-like this:
+your editor so that it converts tabs to spaces.
+
+Format function headers like this:
 
 @example
 @group
 static bool
 matches_patterns (const string_vector& patterns, int pat_idx,
                   int num_pat, const std::string& name)
 @end group
 @end example
 
 @noindent
-The function name should start in column 1, and multi-line argument
-lists should be aligned on the first char after the open parenthesis.
-You should put a space before the left open parenthesis and after commas,
-for both function definitions and function calls.
+The return type of the function and any modifiers are specified on the first
+line.  The function name on the second line should start in column 1, and
+multi-line argument lists should be aligned on the first char after the open
+parenthesis.  You should put a space before the left open parenthesis and after
+commas, for both function definitions and function calls.
 
 The recommended indent is 2 spaces.  When indenting, indent the statement
 after control structures (like @code{if}, @code{while}, etc.).  If there
 is a compound statement, indent @emph{both} the curly braces and the
 body of the statement (so that the body gets indented by @emph{two}
-indents).  Example:
+indents).  This format is known as "GNU style" and is an option for some
+code formatting tools.  Example indenting:
 
 @example
 @group
 if (have_args)
   @{
     idx.push_back (first_args);
     have_args = false;
   @}
@@ -397,17 +423,17 @@ SVD::type type = ((nargout == 0 || nargo
 @end group
 @end example
 
 @noindent
 Consider putting extra braces around a multi-line expression to make it
 more readable, even if they are not necessary.  Also, do not hesitate to
 put extra braces anywhere if it improves clarity.
 
-Declare variables just before they are needed.  Use local variables of
+Declare variables just before they are needed.  Use variables local to
 blocks---it helps optimization.  Don't write a multi-line variable
 declaration with a single type specification and multiple variables.  If
 the variables don't fit on single line, repeat the type specification.
 Example:
 
 @example
 @group
 octave_value retval;
@@ -419,32 +445,36 @@ double d1, d2;
 @end group
 @end example
 
 Use lowercase names if possible.  Uppercase is acceptable for variable
 names consisting of 1-2 letters.  Do not use mixed case names.
 
 Use Octave's types and classes if possible.  Otherwise, use the C++
 standard library.  Use of STL containers and algorithms is encouraged.
-Use templates wisely to reduce code duplication.  Avoid comma
-expressions, labels and gotos, and explicit typecasts.  If you need to
-typecast, use the modern C++ casting operators.  In functions, minimize
-the number of @code{return} statements---use nested @code{if} statements
-if possible.
+Use templates wisely to reduce code duplication.
+
+Avoid comma expressions, labels and gotos, and explicit typecasts.  If you need
+to typecast, use the modern C++ casting operators.  In functions, minimize the
+number of @code{return} statements, but elimination of all but one
+@code{return} is not required.
+
+When an empty string is required, use @code{""}, rather than creating an empty
+string object with @code{std::string ()}.
 
 @node Other Sources
 @section Other Sources
 Apart from C++ and Octave language (m-files), Octave's sources include
 files written in C, Fortran, M4, Perl, Unix shell, AWK, Texinfo, and
 @TeX{}.  There are not many rules to follow when using these other
 languages; some of them are summarized below.  In any case, the golden
 rule is: if you modify a source file, try to follow any conventions you
 can detect in the file or other similar files.
 
-For C you should obviously follow all C++ rules that can apply.
+For C, you should follow all C++ rules that can apply.
 
 If you modify a Fortran file, you should stay within Fortran 77 with
 common extensions like @code{END DO}.  Currently, we want all sources to
 be compilable with the f2c and g77 compilers, without special flags if
 possible.  This usually means that non-legacy compilers also accept the
 sources.
 
 The M4 macro language is mainly used for Autoconf configuration files.
