# HG changeset patch
# User Rik <rik@octave.org>
# Date 1375321337 25200
#      Wed Jul 31 18:42:17 2013 -0700
# Node ID 26589abbc78d6d03b248e3a4f779b4d90f1c00d4
# Parent  b5d6314314fc79b64bb78ac8f9c9e1baeca04025
Don't pass axis handle unnecessarily from high level to low level plot functions.

* scripts/plot/comet.m, scripts/plot/comet3.m, scripts/plot/compass.m,
scripts/plot/contour.m, scripts/plot/contourf.m, scripts/plot/cylinder.m,
scripts/plot/ellipsoid.m, scripts/plot/errorbar.m, scripts/plot/feather.m,
scripts/plot/mesh.m, scripts/plot/meshc.m, scripts/plot/meshz.m,
scripts/plot/pcolor.m, scripts/plot/plot3.m, scripts/plot/rectangle.m,
scripts/plot/rose.m, scripts/plot/scatter3.m, scripts/plot/semilogxerr.m,
scripts/plot/semilogy.m, scripts/plot/semilogyerr.m, scripts/plot/slice.m,
scripts/plot/sphere.m, scripts/plot/stairs.m, scripts/plot/surf.m,
scripts/plot/surfc.m, scripts/plot/surfnorm.m, scripts/plot/trimesh.m,
scripts/plot/trisurf.m: Don't pass hax to lower level functions after
newplot() has been called.

diff --git a/scripts/plot/comet.m b/scripts/plot/comet.m
--- a/scripts/plot/comet.m
+++ b/scripts/plot/comet.m
@@ -62,18 +62,18 @@ function comet (varargin)
     hax = newplot (hax);
     limits = [min(x), max(x), min(y), max(y)];
     num = numel (y);
     dn = round (num/10);
     for n = 1:(num+dn);
       m = n - dn;
       m = max ([m, 1]);
       k = min ([n, num]);
-      plot (hax, x(1:m), y(1:m), "r", x(m:k), y(m:k), "g", x(k), y(k), "ob");
-      axis (hax, limits);
+      plot (x(1:m), y(1:m), "r", x(m:k), y(m:k), "g", x(k), y(k), "ob");
+      axis (limits);
       drawnow ();
       pause (p);
     endfor
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
diff --git a/scripts/plot/comet3.m b/scripts/plot/comet3.m
--- a/scripts/plot/comet3.m
+++ b/scripts/plot/comet3.m
@@ -64,19 +64,19 @@ function comet3 (varargin)
     hax = newplot (hax);
     limits = [min(x), max(x), min(y), max(y), min(z), max(z)];
     num = numel (y);
     dn = round (num/10);
     for n = 1:(num+dn);
       m = n - dn;
       m = max ([m, 1]);
       k = min ([n, num]);
-      htmp = plot3 (hax, x(1:m), y(1:m), z(1:m), "r",
-                         x(m:k), y(m:k), z(m:k), "g",
-                         x(k), y(k), z(k), "ob");
+      htmp = plot3 (x(1:m), y(1:m), z(1:m), "r",
+                    x(m:k), y(m:k), z(m:k), "g",
+                    x(k), y(k), z(k), "ob");
       axis (limits);
       drawnow ();
       pause (p);
     endfor
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
diff --git a/scripts/plot/compass.m b/scripts/plot/compass.m
--- a/scripts/plot/compass.m
+++ b/scripts/plot/compass.m
@@ -97,17 +97,17 @@ function h = compass (varargin)
        xtmp + v * arrowsize / 3];
   y = [zeros(1, n); yend; ytmp  + u * arrowsize / 3; yend; ...
        ytmp - u * arrowsize / 3];
   [r, p] = cart2pol (x, y);
 
   oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
   unwind_protect
     hax = newplot (hax);
-    hlist = polar (hax, r, p, line_spec);
+    hlist = polar (r, p, line_spec);
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
   if (nargout > 0)
     h = hlist;
diff --git a/scripts/plot/contour.m b/scripts/plot/contour.m
--- a/scripts/plot/contour.m
+++ b/scripts/plot/contour.m
@@ -63,17 +63,16 @@ function [c, h] = contour (varargin)
 
   [hax, varargin] = __plt_get_axis_arg__ ("contour", varargin{:});
 
   oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
   unwind_protect
     hax = newplot (hax);
     
     [ctmp, htmp] = __contour__ (hax, "none", varargin{:});
-    
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
   if (nargout > 0)
     c = ctmp;
diff --git a/scripts/plot/contourf.m b/scripts/plot/contourf.m
--- a/scripts/plot/contourf.m
+++ b/scripts/plot/contourf.m
@@ -65,17 +65,16 @@ function [c, h] = contourf (varargin)
   [hax, varargin] = __plt_get_axis_arg__ ("contour", varargin{:});
 
   oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
   unwind_protect
     hax = newplot (hax);
     
     [ctmp, htmp] = __contour__ (hax, "none", "fill", "on",
                                 "linecolor", "black", varargin{:});
-    
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
   if (nargout > 0)
     c = ctmp;
diff --git a/scripts/plot/cylinder.m b/scripts/plot/cylinder.m
--- a/scripts/plot/cylinder.m
+++ b/scripts/plot/cylinder.m
@@ -82,18 +82,17 @@ function [xx, yy, zz] = cylinder (vararg
     xx = x;
     yy = y;
     zz = z;
   else
     oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
     unwind_protect
       hax = newplot (hax);
     
-      surf (hax, x, y, z);
-      
+      surf (x, y, z);
     unwind_protect_cleanup
       if (! isempty (oldfig))
         set (0, "currentfigure", oldfig);
       endif
     end_unwind_protect
   endif
 
 endfunction
diff --git a/scripts/plot/ellipsoid.m b/scripts/plot/ellipsoid.m
--- a/scripts/plot/ellipsoid.m
+++ b/scripts/plot/ellipsoid.m
@@ -73,18 +73,17 @@ function [xx, yy, zz] = ellipsoid (varar
     xx = x;
     yy = y;
     zz = z;
   else
     oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
     unwind_protect
       hax = newplot (hax);
     
-      surf (hax, x, y, z);
-      
+      surf (x, y, z);
     unwind_protect_cleanup
       if (! isempty (oldfig))
         set (0, "currentfigure", oldfig);
       endif
     end_unwind_protect
   endif
 
 endfunction
diff --git a/scripts/plot/errorbar.m b/scripts/plot/errorbar.m
--- a/scripts/plot/errorbar.m
+++ b/scripts/plot/errorbar.m
@@ -130,17 +130,16 @@ function h = errorbar (varargin)
 
   [hax, varargin] = __plt_get_axis_arg__ ("errorbar", varargin{:});
 
   oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
   unwind_protect
     hax = newplot (hax);
 
     htmp = __errcomm__ ("errorbar", hax, varargin{:});
-
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
   if (nargout > 0)
     h = htmp;
diff --git a/scripts/plot/feather.m b/scripts/plot/feather.m
--- a/scripts/plot/feather.m
+++ b/scripts/plot/feather.m
@@ -93,17 +93,17 @@ function retval = feather (varargin)
   x = [[1 : n]; xend; xtmp  - v * arrowsize; xend; ...
        xtmp + v * arrowsize];
   y = [zeros(1, n); yend; ytmp  + u * arrowsize / 3; yend; ...
        ytmp - u * arrowsize / 3];
 
   oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
   unwind_protect
     hax = newplot (hax);
-    hlist = plot (hax, x, y, line_spec, [1, n], [0, 0], line_spec);
+    hlist = plot (x, y, line_spec, [1, n], [0, 0], line_spec);
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
   if (nargout > 0)
     retval = hlist;
diff --git a/scripts/plot/mesh.m b/scripts/plot/mesh.m
--- a/scripts/plot/mesh.m
+++ b/scripts/plot/mesh.m
@@ -61,24 +61,24 @@ function h = mesh (varargin)
     error ("mesh: X, Y, Z, C arguments must be real");
   endif
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ ("mesh", varargin{:});
 
   oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
   unwind_protect
     hax = newplot (hax);
-    htmp = surface (hax, varargin{:});
+
+    htmp = surface (varargin{:});
 
     set (htmp, "facecolor", "w");
     set (htmp, "edgecolor", "flat");
-
     if (! ishold ())
       set (hax, "view", [-37.5, 30],
-               "xgrid", "on", "ygrid", "on", "zgrid", "on");
+                "xgrid", "on", "ygrid", "on", "zgrid", "on");
     endif
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
   if (nargout > 0)
diff --git a/scripts/plot/meshc.m b/scripts/plot/meshc.m
--- a/scripts/plot/meshc.m
+++ b/scripts/plot/meshc.m
@@ -60,33 +60,31 @@ function h = meshc (varargin)
   endif
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ ("meshc", varargin{:});
 
   oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
   unwind_protect
     hax = newplot (hax);
 
-    htmp = surface (hax, varargin{:});
+    htmp = surface (varargin{:});
 
     ## FIXME - gnuplot does not support a filled surface and a
     ## non-filled contour.  3D filled patches are also not supported.
     ## Thus, the facecolor will be transparent for the gnuplot backend.
     set (htmp, "facecolor", "w");
     set (htmp, "edgecolor", "flat");
-
     if (! ishold ())
       set (hax, "view", [-37.5, 30],
                 "xgrid", "on", "ygrid", "on", "zgrid", "on");
     endif
 
     drawnow ();
 
     zmin = get (hax, "zlim")(1);
-
     [~, htmp2] = __contour__ (hax, zmin, varargin{:});
 
     htmp = [htmp; htmp2];
 
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
diff --git a/scripts/plot/meshz.m b/scripts/plot/meshz.m
--- a/scripts/plot/meshz.m
+++ b/scripts/plot/meshz.m
@@ -98,17 +98,17 @@ function h = meshz (varargin)
   zref = min (z(isfinite (z)));
   z = [zref .* ones(1, columns(z) + 2);
        zref .* ones(rows(z), 1), z, zref .* ones(rows(z), 1);
        zref .* ones(1, columns(z) + 2)];
 
   oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
   unwind_protect
     hax = newplot (hax);
-    htmp = mesh (hax, x, y, z, varargin{charidx:end});
+    htmp = mesh (x, y, z, varargin{charidx:end});
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
   if (nargout > 0)
     h = htmp;
diff --git a/scripts/plot/pcolor.m b/scripts/plot/pcolor.m
--- a/scripts/plot/pcolor.m
+++ b/scripts/plot/pcolor.m
@@ -76,17 +76,16 @@ function h = pcolor (varargin)
 
   oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
   unwind_protect
     hax = newplot (hax);
     htmp = surface (x, y, z, c);
 
     set (htmp, "facecolor", "flat");
     set (hax, "box", "on");
-
     if (! ishold ())
       set (hax, "view", [0, 90]);
     endif
 
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
diff --git a/scripts/plot/plot3.m b/scripts/plot/plot3.m
--- a/scripts/plot/plot3.m
+++ b/scripts/plot/plot3.m
@@ -204,17 +204,17 @@ function retval = plot3 (varargin)
           if (isempty (marker) && isempty (linestyle))
              [linestyle, marker] = __next_line_style__ ();
           endif
           color = options.color;
           if (isempty (color))
             color = __next_line_color__ ();
           endif
 
-          htmp(++idx) = line (hax, x(:, i), y(:, i), z(:, i),
+          htmp(++idx) = line (x(:, i), y(:, i), z(:, i),
                               "color", color, "linestyle", linestyle,
                               "marker", marker, properties{:});
           key = options.key;
           if (! isempty (key))
             hlgnd = [hlgnd, htmp(idx)];
             tlgnd = {tlgnd{:}, key};
           endif
         endfor
@@ -259,17 +259,17 @@ function retval = plot3 (varargin)
           if (isempty (marker) && isempty (linestyle))
             [linestyle, marker] = __next_line_style__ ();
           endif
           color = options.color;
           if (isempty (color))
             color = __next_line_color__ ();
           endif
 
-          htmp(++idx) = line (hax, x(:, i), y(:, i), z(:, i),
+          htmp(++idx) = line (x(:, i), y(:, i), z(:, i),
                               "color", color, "linestyle", linestyle,
                               "marker", marker, properties{:});
           key = options.key;
           if (! isempty (key))
             hlgnd = [hlgnd, htmp(idx)];
             tlgnd = {tlgnd{:}, key};
           endif
         endfor
@@ -334,17 +334,17 @@ function retval = plot3 (varargin)
         if (isempty (marker) && isempty (linestyle))
           [linestyle, marker] = __next_line_style__ ();
         endif
         color = options.color;
         if (isempty (color))
           color = __next_line_color__ ();
         endif
 
-        htmp(++idx) = line (hax, x(:, i), y(:, i), z(:, i),
+        htmp(++idx) = line (x(:, i), y(:, i), z(:, i),
                             "color", color, "linestyle", linestyle,
                             "marker", marker, properties{:});
         key = options.key;
         if (! isempty (key))
           hlgnd = [hlgnd, htmp(idx)];
           tlgnd = {tlgnd{:}, key};
         endif
       endfor
diff --git a/scripts/plot/rectangle.m b/scripts/plot/rectangle.m
--- a/scripts/plot/rectangle.m
+++ b/scripts/plot/rectangle.m
@@ -59,18 +59,17 @@
 function h = rectangle (varargin)
 
   [hax, varargin] = __plt_get_axis_arg__ ("rectangle", varargin{:});
 
   oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
   unwind_protect
     hax = newplot (hax);
 
-    htmp =  __rectangle__ (hax, varargin{:});
-
+    htmp = __rectangle__ (hax, varargin{:});
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
   if (nargout > 0)
     h = htmp;
@@ -208,19 +207,19 @@ function update_data (h, d)
       recursion = false;
     end_unwind_protect
   endif
 endfunction
 
 function update_props (h, d)
   kids = get (h, "children");
   set (kids, "edgecolor", get (h, "edgecolor"),
-       "linewidth", get (h, "linewidth"),
-       "linestyle", get (h, "linestyle"),
-       "facecolor", get (h, "facecolor"));
+             "linewidth", get (h, "linewidth"),
+             "linestyle", get (h, "linestyle"),
+             "facecolor", get (h, "facecolor"));
 endfunction
 
 
 %!demo
 %! clf;
 %! axis equal;
 %! rectangle ('Position', [0.05, 0.05, 0.9, 0.9], 'Curvature', [0.5, 0.5]);
 
diff --git a/scripts/plot/rose.m b/scripts/plot/rose.m
--- a/scripts/plot/rose.m
+++ b/scripts/plot/rose.m
@@ -88,17 +88,17 @@ function [thout, rout] = rose (varargin)
   r = zeros (4 * rows (nn), columns (nn));
   r(2:4:end, :) = nn;
   r(3:4:end, :) = nn;
 
   if (nargout < 2)
     oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
     unwind_protect
       hax = newplot (hax);
-      htmp = polar (hax, th, r);
+      htmp = polar (th, r);
     unwind_protect_cleanup
       if (! isempty (oldfig))
         set (0, "currentfigure", oldfig);
       endif
     end_unwind_protect
 
     if (nargout > 0)
       thout = htmp;
diff --git a/scripts/plot/scatter3.m b/scripts/plot/scatter3.m
--- a/scripts/plot/scatter3.m
+++ b/scripts/plot/scatter3.m
@@ -72,28 +72,28 @@ function retval = scatter3 (varargin)
   if (nargin < 2)
     print_usage ();
   else
     oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
     unwind_protect
       hax = newplot (hax);
       
       tmp = __scatter__ (hax, 3, "scatter3", varargin{:});
+
+      if (! ishold (hax))
+        set (hax, "view", [-37.5, 30],
+                  "xgrid", "on", "ygrid", "on", "zgrid", "on");
+      endif
     unwind_protect_cleanup
       if (! isempty (oldfig))
         set (0, "currentfigure", oldfig);
       endif
     end_unwind_protect
   endif
 
-  if (! ishold (hax))
-    set (hax, "view", [-37.5, 30],
-         "xgrid", "on", "ygrid", "on", "zgrid", "on");
-  endif
-
   if (nargout > 0)
     retval = tmp;
   endif
 
 endfunction
 
 
 %!demo
diff --git a/scripts/plot/semilogxerr.m b/scripts/plot/semilogxerr.m
--- a/scripts/plot/semilogxerr.m
+++ b/scripts/plot/semilogxerr.m
@@ -49,16 +49,17 @@ function h = semilogxerr (varargin)
   oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
   unwind_protect
     hax = newplot (hax);
 
     set (hax, "xscale", "log");
     if (! ishold (hax))
       set (hax, "xminortick", "on");
     endif
+
     htmp = __errcomm__ ("semilogxerr", hax, varargin{:});
 
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
diff --git a/scripts/plot/semilogy.m b/scripts/plot/semilogy.m
--- a/scripts/plot/semilogy.m
+++ b/scripts/plot/semilogy.m
@@ -51,26 +51,26 @@ function h = semilogy (varargin)
 
     set (hax, "yscale", "log");
     if (! ishold (hax))
       set (hax, "yminortick", "on");
     endif
 
     htmp = __plt__ ("semilogy", hax, varargin{:});
 
-    if (nargout > 0)
-      h = htmp;
-    endif
-
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
+  if (nargout > 0)
+    h = htmp;
+  endif
+
 endfunction
 
 
 %!demo
 %! clf;
 %! x = 1:0.01:10;
 %! y = (x .* (1 + rand (size (x)))) .^ 2;
 %! semilogy (x, y);
diff --git a/scripts/plot/semilogyerr.m b/scripts/plot/semilogyerr.m
--- a/scripts/plot/semilogyerr.m
+++ b/scripts/plot/semilogyerr.m
@@ -49,16 +49,17 @@ function h = semilogyerr (varargin)
   oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
   unwind_protect
     hax = newplot (hax);
 
     set (hax, "yscale", "log");
     if (! ishold (hax))
       set (hax, "yminortick", "on");
     endif
+
     htmp = __errcomm__ ("semilogyerr", hax, varargin{:});
 
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
diff --git a/scripts/plot/slice.m b/scripts/plot/slice.m
--- a/scripts/plot/slice.m
+++ b/scripts/plot/slice.m
@@ -155,27 +155,27 @@ function h = slice (varargin)
         endfor
       endif
 
       if (length (sy) > 0)
         for i = length (sy):-1:1
           [xi, yi, zi] = meshgrid (squeeze (x(1,:,1)), sy(i), squeeze (z(1,1,:)));
           vy = squeeze (interp3 (x, y, z, v, xi, yi, zi, method));
           htmp(sidx++) = surface (squeeze (xi),
-                                 squeeze (sy(i) * ones (size (zi))),
-                                 squeeze (zi), vy);
+                                  squeeze (sy(i) * ones (size (zi))),
+                                  squeeze (zi), vy);
         endfor
       endif
 
       if (length (sx) > 0)
         for i = length (sx):-1:1
           [xi, yi, zi] = meshgrid (sx(i), squeeze (y(:,1,1)), squeeze (z(1,1,:)));
           vx = squeeze (interp3 (x, y, z, v, xi, yi, zi, method));
           htmp(sidx++) = surface (squeeze (sx(i) * ones (size (zi))),
-                                 squeeze (yi), squeeze(zi), vx);
+                                  squeeze (yi), squeeze(zi), vx);
         endfor
       endif
     else
       vi = interp3 (x, y, z, v, sx, sy, sz);
       htmp = surface (sx, sy, sz, vi);
     endif
 
     if (! ishold ())
diff --git a/scripts/plot/sphere.m b/scripts/plot/sphere.m
--- a/scripts/plot/sphere.m
+++ b/scripts/plot/sphere.m
@@ -70,18 +70,17 @@ function [xx, yy, zz] = sphere (varargin
     xx = x;
     yy = y;
     zz = z;
   else
     oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
     unwind_protect
       hax = newplot (hax);
     
-      surf (hax, x, y, z);
-      
+      surf (x, y, z);
     unwind_protect_cleanup
       if (! isempty (oldfig))
         set (0, "currentfigure", oldfig);
       endif
     end_unwind_protect
   endif
 
 endfunction
diff --git a/scripts/plot/stairs.m b/scripts/plot/stairs.m
--- a/scripts/plot/stairs.m
+++ b/scripts/plot/stairs.m
@@ -159,18 +159,18 @@ function [h, xs, ys] = __stairs__ (doplo
         varargin(i) = [];
         break;
       endif
     endif
   endfor
 
   if (doplot)
     h = [];
+    hold_state = get (gca (), "nextplot");
     unwind_protect
-      hold_state = get (gca (), "nextplot");
       for i = 1 : columns (y)
         hg = hggroup ();
         h = [h; hg];
         args = __add_datasource__ ("stairs", hg, {"x", "y"}, varargin{:});
 
         addproperty ("xdata", hg, "data", x(:,i).');
         addproperty ("ydata", hg, "data", y(:,i).');
 
diff --git a/scripts/plot/surf.m b/scripts/plot/surf.m
--- a/scripts/plot/surf.m
+++ b/scripts/plot/surf.m
@@ -65,18 +65,19 @@ function retval = surf (varargin)
   oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
   unwind_protect
     hax = newplot (hax);
     
     htmp = surface (varargin{:});
 
     if (! ishold (hax))
       set (hax, "view", [-37.5, 30],
-           "xgrid", "on", "ygrid", "on", "zgrid", "on");
+                "xgrid", "on", "ygrid", "on", "zgrid", "on");
     endif
+
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
   if (nargout > 0)
     retval = htmp;
diff --git a/scripts/plot/surfc.m b/scripts/plot/surfc.m
--- a/scripts/plot/surfc.m
+++ b/scripts/plot/surfc.m
@@ -63,20 +63,19 @@ function h = surfc (varargin)
   if (nargin < 1)
     print_usage ();
   endif
 
   oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
   unwind_protect
     hax = newplot (hax);
     
-    htmp = surface (hax, varargin{:});
+    htmp = surface (varargin{:});
 
     set (htmp, "facecolor", "flat");
-
     if (! ishold ())
       set (hax, "view", [-37.5, 30],
                 "xgrid", "on", "ygrid", "on", "zgrid", "on");
     endif
 
     drawnow ();
 
     # don't pass string arguments to __contour__()
diff --git a/scripts/plot/surfnorm.m b/scripts/plot/surfnorm.m
--- a/scripts/plot/surfnorm.m
+++ b/scripts/plot/surfnorm.m
@@ -113,17 +113,17 @@ function [Nx, Ny, Nz] = surfnorm (vararg
   ny = ny ./ len;
   nz = nz ./ len;
 
   if (nargout == 0)
    oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
    unwind_protect
      hax = newplot (hax);
      
-     surf (hax, x, y, z, varargin{ioff:end});
+     surf (x, y, z, varargin{ioff:end});
      old_hold_state = get (hax, "nextplot");
      unwind_protect
        set (hax, "nextplot", "add");
        plot3 ([x(:)'; x(:).' + nx(:).' ; NaN(size(x(:).'))](:),
               [y(:)'; y(:).' + ny(:).' ; NaN(size(y(:).'))](:),
               [z(:)'; z(:).' + nz(:).' ; NaN(size(z(:).'))](:),
               varargin{ioff:end});
      unwind_protect_cleanup
diff --git a/scripts/plot/trimesh.m b/scripts/plot/trimesh.m
--- a/scripts/plot/trimesh.m
+++ b/scripts/plot/trimesh.m
@@ -54,23 +54,23 @@ function h = trimesh (tri, x, y, z, vara
     print_usage ();
   endif
 
   if (nargin == 3)
     triplot (tri, x, y);
   elseif (ischar (z))
     triplot (tri, x, y, z, varargin{:});
   else
-    newplot ();
+    hax = newplot ();
     handle = patch ("Vertices", [x(:), y(:), z(:)], "Faces", tri,
                     "FaceColor", "none", "EdgeColor", __next_line_color__ (),
                     varargin{:});
     if (! ishold ())
-      set (gca (), "view", [-37.5, 30],
-           "xgrid", "on", "ygrid", "on", "zgrid", "on");
+      set (hax, "view", [-37.5, 30],
+                "xgrid", "on", "ygrid", "on", "zgrid", "on");
     endif
     if (nargout > 0)
       h = handle;
     endif
   endif
 
 endfunction
 
diff --git a/scripts/plot/trisurf.m b/scripts/plot/trisurf.m
--- a/scripts/plot/trisurf.m
+++ b/scripts/plot/trisurf.m
@@ -68,27 +68,27 @@ function h = trisurf (tri, x, y, z, vara
       varargin(nfc+(0:1)) = {"FaceColor", "flat"};
     else
       nfc = find (any (strcmpi (varargin, "FaceColor")), 1);
     endif
     if (! any (strcmpi (varargin, "EdgeColor"))
         && strcmpi (varargin{nfc+1}, "interp"))
       varargin(end+(1:2)) = {"EdgeColor", "none"};
     endif
-    newplot ();
-    handle = patch ("Faces", tri, "Vertices", [x(:), y(:), z(:)],
-                    "FaceVertexCData", reshape (c, numel (c), 1),
-                    varargin{:});
+    hax = newplot ();
+    htmp = patch ("Faces", tri, "Vertices", [x(:), y(:), z(:)],
+                  "FaceVertexCData", reshape (c, numel (c), 1),
+                  varargin{:});
     if (nargout > 0)
-      h = handle;
+      h = htmp;
     endif
 
     if (! ishold ())
-      set (gca (), "view", [-37.5, 30],
-           "xgrid", "on", "ygrid", "on", "zgrid", "on");
+      set (hax, "view", [-37.5, 30],
+                "xgrid", "on", "ygrid", "on", "zgrid", "on");
     endif
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
