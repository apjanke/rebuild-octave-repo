# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1209951947 14400
#      Sun May 04 21:45:47 2008 -0400
# Node ID e26d0931c044b51894318f2554c48028edaa8304
# Parent  e76a4a6e3c47589ce5831e30aa58ae0fa80dc826
pt-cmd.cc (tree_function_def::eval): only install command-line functions if executing in top-level scope

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2008-05-04  John W. Eaton  <jwe@octave.org>
 
+	* pt-cmd.cc (tree_function_def::eval): Only define command-line
+	function if we are executing in the top-level scope.
+
 	* symtab.h (symbol_table::fcn_info::fcn_info_rep::find_function):
 	Initialize args_evaluated.
 	* pt-id.cc (tree_identifier::rvalue): Likewise.
 	* variables.cc (symbol_exist): Likewise.
 
 	* pt-id.h (tree_identifier::tree_identifer): Delete useless statement.
 
 	* variables.cc (get_global_value): Use symbol_table::global_varval
diff --git a/src/pt-cmd.cc b/src/pt-cmd.cc
--- a/src/pt-cmd.cc
+++ b/src/pt-cmd.cc
@@ -42,28 +42,31 @@ tree_no_op_command::accept (tree_walker&
   tw.visit_no_op_command (*this);
 }
 
 // Function definition.
 
 void
 tree_function_def::eval (void)
 {
-  octave_function *f = function ();
+  if (symbol_table::at_top_level ())
+    {
+      octave_function *f = function ();
 
-  if (f)
-    {
-      std::string nm = f->name ();
+      if (f)
+	{
+	  std::string nm = f->name ();
 
-      symbol_table::install_cmdline_function (nm, fcn);
+	  symbol_table::install_cmdline_function (nm, fcn);
 
-      // Make sure that any variable with the same name as the new
-      // function is cleared.
+	  // Make sure that any variable with the same name as the new
+	  // function is cleared.
 
-      symbol_table::varref (nm) = octave_value ();
+	  symbol_table::varref (nm) = octave_value ();
+	}
     }
 }
 
 tree_command *
 tree_function_def::dup (symbol_table::scope_id)
 {
   return new tree_function_def (fcn, line (), column ());
 }
