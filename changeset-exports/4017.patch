# HG changeset patch
# User jwe
# Date 1028347635 0
#      Sat Aug 03 04:07:15 2002 +0000
# Node ID 0eb247b9cc9b2b9ae3174175a69340544ee3ced7
# Parent  139f5273d0f8a1b441c90a01d7b5d76a24ba46ab
[project @ 2002-08-03 04:07:14 by jwe]

diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -236,24 +236,24 @@ public:
 
   ComplexMatrix& apply (c_c_Mapper f);
 
   bool any_element_is_inf_or_nan (void) const;
   bool all_elements_are_real (void) const;
   bool all_integers (double& max_val, double& min_val) const;
   bool too_large_for_float (void) const;
 
-  boolMatrix all (int dim = 0) const;
-  boolMatrix any (int dim = 0) const;
+  boolMatrix all (int dim = -1) const;
+  boolMatrix any (int dim = -1) const;
 
-  ComplexMatrix cumprod (int dim = 0) const;
-  ComplexMatrix cumsum (int dim = 0) const;
-  ComplexMatrix prod (int dim = 0) const;
-  ComplexMatrix sum (int dim = 0) const;
-  ComplexMatrix sumsq (int dim = 0) const;
+  ComplexMatrix cumprod (int dim = -1) const;
+  ComplexMatrix cumsum (int dim = -1) const;
+  ComplexMatrix prod (int dim = -1) const;
+  ComplexMatrix sum (int dim = -1) const;
+  ComplexMatrix sumsq (int dim = -1) const;
 
   ComplexColumnVector diag (void) const;
   ComplexColumnVector diag (int k) const;
 
   bool row_is_real_only (int) const;
   bool column_is_real_only (int) const;
 
   ComplexColumnVector row_min (void) const;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,19 @@
 2002-08-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* CMatrix.h (ComplexMatrix::all, ComplexMatrix::any,
+	ComplexMatrix::cumprod, ComplexMatrix::cumsum,
+	ComplexMatrix::prod, ComplexMatrix::sum, ComplexMatrix::sumsq):
+	Default value for dim is -1, not 0.
+	* dMatrix.h (Matrix::all, Matrix::any, Matrix::cumprod,
+	Matrix::cumsum, Matrix::prod, Matrix::sum, Matrix::sumsq): Likewise.
+	* boolMatrix.h (boolMatrix:all, boolMatrix::any): Likewise.
+	* chMatrix.h (charMatrix::all, charMatrix::any): Likewise.
+
 	* mx-inlines.cc (MX_ANY_ALL_OP_ROW_CODE, MX_ANY_ALL_OP_COL_CODE):
 	New macros.
 	(MX_ANY_ALL_OP): Define MX_ANY_ALL_OP using them and
 	MX_BASE_REDUCTION_OP.
 	(MX_CUMULATIVE_OP): Fix spelling.  Change all uses.
 
 2002-08-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/liboctave/boolMatrix.h b/liboctave/boolMatrix.h
--- a/liboctave/boolMatrix.h
+++ b/liboctave/boolMatrix.h
@@ -59,18 +59,18 @@ public:
   boolMatrix& insert (const boolMatrix& a, int r, int c);
 
   // unary operations
 
   boolMatrix operator ! (void) const;
 
   // other operations
 
-  boolMatrix all (int dim = 0) const;
-  boolMatrix any (int dim = 0) const;
+  boolMatrix all (int dim = -1) const;
+  boolMatrix any (int dim = -1) const;
 
 #if 0
   // i/o
 
   friend std::ostream& operator << (std::ostream& os, const Matrix& a);
   friend std::istream& operator >> (std::istream& is, Matrix& a);
 #endif
 
diff --git a/liboctave/chMatrix.h b/liboctave/chMatrix.h
--- a/liboctave/chMatrix.h
+++ b/liboctave/chMatrix.h
@@ -66,18 +66,18 @@ public:
   charMatrix& insert (const charMatrix& a, int r, int c);
 
   std::string row_as_string (int, bool strip_ws = false, bool raw = false) const;
 
   // resize is the destructive equivalent for this one
 
   charMatrix extract (int r1, int c1, int r2, int c2) const;
 
-  boolMatrix all (int dim = 0) const;
-  boolMatrix any (int dim = 0) const;
+  boolMatrix all (int dim = -1) const;
+  boolMatrix any (int dim = -1) const;
 
 #if 0
   // i/o
 
   friend std::ostream& operator << (std::ostream& os, const Matrix& a);
   friend std::istream& operator >> (std::istream& is, Matrix& a);
 #endif
 
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -192,24 +192,24 @@ public:
   Matrix& apply (d_d_Mapper f);
 
   bool any_element_is_negative (void) const;
   bool any_element_is_inf_or_nan (void) const;
   bool all_elements_are_int_or_inf_or_nan (void) const;
   bool all_integers (double& max_val, double& min_val) const;
   bool too_large_for_float (void) const;
  
-  boolMatrix all (int dim = 0) const;
-  boolMatrix any (int dim = 0) const;
+  boolMatrix all (int dim = -1) const;
+  boolMatrix any (int dim = -1) const;
 
-  Matrix cumprod (int dim = 0) const; //optional dimension argument
-  Matrix cumsum (int dim = 0) const;
-  Matrix prod (int dim = 0) const;
-  Matrix sum (int dim = 0) const;
-  Matrix sumsq (int dim = 0) const;
+  Matrix cumprod (int dim = -1) const;
+  Matrix cumsum (int dim = -1) const;
+  Matrix prod (int dim = -1) const;
+  Matrix sum (int dim = -1) const;
+  Matrix sumsq (int dim = -1) const;
   Matrix abs (void) const;
 
   ColumnVector diag (void) const;
   ColumnVector diag (int k) const;
 
   ColumnVector row_min (void) const;
   ColumnVector row_max (void) const;
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,15 @@
 2002-08-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* ov-base-scalar.h (octave_base_scalar::all): New int arg.
+	(octave_base_scalar::any): Likewise.
+	* ov-range.h (octave_range::all): Likewise.
+	(octave_range::any): Likewise.
+
 	* Makefile.in (doc-files): Use mv, not move-if-change here.
 
 	* variables.cc (symbol_exist): New function.
 	(Fexist): Use it.  Handle optional type arg.  Make return codes
 	more compatible with Matlab.
 
 	* data.cc (ANY_ALL): New macro.
 	(Fany, Fall): Replace guts with ANY_ALL.
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -198,19 +198,19 @@ octave_base_matrix<MT>::is_true (void) c
 
       if (flag < 0)
 	warning ("empty matrix used in conditional expression");
       else if (flag == 0)
 	error ("empty matrix used in conditional expression");
     }
   else
     {
-      boolMatrix m = (matrix.all ()) . all ();
+      boolMatrix m = (matrix.all () . all ());
 
-      retval = (m.rows () == 1 && m.columns () == 1 && m (0, 0) != 0.0);
+      retval = (m.rows () == 1 && m.columns () == 1 && m(0,0));
     }
 
   return retval;
 }
 
 template <class MT>
 bool
 octave_base_matrix<MT>::print_as_scalar (void) const
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -86,18 +86,18 @@ public:
   int length (void) const
   {
     int r = rows ();
     int c = columns ();
 
     return (r == 0 || c == 0) ? 0 : ((r > c) ? r : c);
   }
 
-  octave_value all (int dim) const { return matrix.all (dim); }
-  octave_value any (int dim) const { return matrix.any (dim); }
+  octave_value all (int dim = 0) const { return matrix.all (dim); }
+  octave_value any (int dim = 0) const { return matrix.any (dim); }
 
   bool is_matrix_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
diff --git a/src/ov-base-scalar.h b/src/ov-base-scalar.h
--- a/src/ov-base-scalar.h
+++ b/src/ov-base-scalar.h
@@ -71,19 +71,19 @@ public:
   int columns (void) const { return 1; }
 
   int length (void) const { return 1; }
 
   bool is_constant (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
-  octave_value all (void) const { return (scalar != 0.0); }
+  octave_value all (int = 0) const { return (scalar != 0.0); }
 
-  octave_value any (void) const { return (scalar != 0.0); }
+  octave_value any (int = 0) const { return (scalar != 0.0); }
 
   bool is_scalar_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
   bool is_true (void) const { return (scalar != 0.0); }
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -123,19 +123,19 @@ public:
   bool is_cs_list (void) const { return false; }
 
   bool is_list (void) const { return false; }
 
   bool is_magic_colon (void) const { return false; }
 
   bool is_all_va_args (void) const { return false; }
 
-  octave_value all (int dim) const { return 0.0; }
+  octave_value all (int = 0) const { return 0.0; }
 
-  octave_value any (int dim) const { return 0.0; }
+  octave_value any (int = 0) const { return 0.0; }
 
   bool is_bool_type (void) const { return false; }
 
   bool is_real_type (void) const { return false; }
 
   bool is_complex_type (void) const { return false; }
 
   // Would be nice to get rid of the next four functions:
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -137,29 +137,33 @@ octave_range::double_value (bool) const
     retval = range.base ();
   else
     gripe_invalid_conversion ("range", "real scalar");
 
   return retval;
 }
 
 octave_value
-octave_range::all (void) const
+octave_range::all (int dim) const
 {
   // XXX FIXME XXX -- this is a potential waste of memory.
 
   Matrix m = range.matrix_value ();
 
-  return m.all ();
+  return m.all (dim);
 }
 
 octave_value
-octave_range::any (void) const
+octave_range::any (int dim) const
 {
-  return static_cast<double> (range.base () != 0.0 || range.nelem () > 1);
+  // XXX FIXME XXX -- this is a potential waste of memory.
+
+  Matrix m = range.matrix_value ();
+
+  return m.any (dim);
 }
 
 bool
 octave_range::is_true (void) const
 {
   bool retval = false;
 
   if (range.nelem () == 0)
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -102,19 +102,19 @@ public:
   int length (void) const { return range.nelem (); }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_range (void) const { return true; }
 
-  // XXX DO ME XXX
-  octave_value all (void) const;
-  octave_value any (void) const;
+  octave_value all (int dim = 0) const;
+
+  octave_value any (int dim = 0) const;
 
   bool is_real_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const
     {
       return (range.nelem () == 1
 	      && ! xisnan (range.base ())
 	      && NINT (range.base ()) == 1);
