# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1387299634 28800
#      Tue Dec 17 09:00:34 2013 -0800
# Node ID a86d608c413c3ab2dde88715095ec6c7b090d5a1
# Parent  b5970988ccff73eb01e6d02e19a8e77c8219091a
Return empty matrix rather than issuing error when requested diagonal is out of range.

* data.cc: Add %!tests for new behavior.

* Array.cc (diag): Return 0x1 empty matrix when diagonal is out of range.

* DiagArray2.cc (extract_diag): Return 0x1 empty matrix when diagonal is out of
range.

* Sparse.cc (diag): Return 0x1 empty matrix when diagonal is out of range.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -1349,16 +1349,21 @@ Given a matrix argument, instead of a ve
 %!assert (diag (diag ([5, 2, 3])(:,1), -2), [[0 0 5 0 0]', zeros(5, 4)])
 
 ## Test non-square size
 %!assert (diag ([1,2,3], 6, 3), [1 0 0; 0 2 0; 0 0 3; 0 0 0; 0 0 0; 0 0 0])
 %!assert (diag (1, 2, 3), [1,0,0; 0,0,0]);
 %!assert (diag ({1}, 2, 3), {1,[],[]; [],[],[]});
 %!assert (diag ({1,2}, 3, 4), {1,[],[],[]; [],2,[],[]; [],[],[],[]});
 
+## Test out-of-range diagonals
+%!assert (diag (ones (3,3), 4), zeros (0, 1))
+%!assert (diag (cell (3,3), 4), cell (0, 1))
+%!assert (diag (sparse (ones (3,3)), 4), sparse (zeros (0, 1)))
+
 %% Test input validation
 %!error <Invalid call to diag> diag ()
 %!error <Invalid call to diag> diag (1,2,3,4)
 %!error diag (ones (2), 3, 3)
 %!error diag (1:3, -4, 3)
 
 %!assert (diag (1, 3, 3), diag ([1, 0, 0]))
 %!assert (diag (i, 3, 3), diag ([i, 0, 0]))
diff --git a/liboctave/array/Array.cc b/liboctave/array/Array.cc
--- a/liboctave/array/Array.cc
+++ b/liboctave/array/Array.cc
@@ -2566,19 +2566,18 @@ Array<T>::diag (octave_idx_type k) const
                     d.xelem (i) = elem (i-k, i);
                 }
               else
                 {
                   for (octave_idx_type i = 0; i < ndiag; i++)
                     d.xelem (i) = elem (i, i);
                 }
             }
-          else
-            (*current_liboctave_error_handler)
-              ("diag: requested diagonal out of range");
+          else  // Matlab returns [] 0x1 for out-of-range diagonal
+            d.resize (dim_vector (0, 1));
         }
       else
         {
           // Create diag matrix from vector
           octave_idx_type roff = 0;
           octave_idx_type coff = 0;
           if (k > 0)
             {
diff --git a/liboctave/array/DiagArray2.cc b/liboctave/array/DiagArray2.cc
--- a/liboctave/array/DiagArray2.cc
+++ b/liboctave/array/DiagArray2.cc
@@ -61,19 +61,18 @@ DiagArray2<T>::extract_diag (octave_idx_
 
   if (k == 0)
     // The main diagonal is shallow-copied.
     d = *this;
   else if (k > 0 && k < cols ())
     d = Array<T> (dim_vector (std::min (cols () - k, rows ()), 1), T ());
   else if (k < 0 && -k < rows ())
     d = Array<T> (dim_vector (std::min (rows () + k, cols ()), 1), T ());
-  else
-    (*current_liboctave_error_handler)
-      ("diag: requested diagonal out of range");
+  else  // Matlab returns [] 0x1 for out-of-range diagonal
+    d.resize (dim_vector (0, 1));
 
   return d;
 }
 
 template <class T>
 DiagArray2<T>
 DiagArray2<T>::transpose (void) const
 {
diff --git a/liboctave/array/Sparse.cc b/liboctave/array/Sparse.cc
--- a/liboctave/array/Sparse.cc
+++ b/liboctave/array/Sparse.cc
@@ -2485,19 +2485,18 @@ Sparse<T>::diag (octave_idx_type k) cons
                   if (tmp != 0.)
                     {
                       d.xdata (ii) = tmp;
                       d.xridx (ii++) = i;
                     }
                 }
             }
         }
-      else
-        (*current_liboctave_error_handler)
-          ("diag: requested diagonal out of range");
+      else  // Matlab returns [] 0x1 for out-of-range diagonal
+        d = Sparse<T> (0, 1, 0);
     }
   else if (nnr != 0 && nnc != 0)
     {
       octave_idx_type roff = 0;
       octave_idx_type coff = 0;
       if (k > 0)
         {
           roff = 0;
