# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1491426478 14400
#      Wed Apr 05 17:07:58 2017 -0400
# Node ID 95744d6d7d3b4f1a64d642b1c31fc1fd8860d9c8
# Parent  778fdffc09dfb36e0c2a8118b96b0cde6c159844
use hex values for numeric containers.Map keys (bug #49559)

* +containers/Map.m (encode_keys): Use typecast to convert numeric
keys to 32- or 64-bit unsigned integers, then convert to hex.
(decode_keys): Use hex2num and then typecast to recover original
key value.
New test to ensure exact key encoding/decoding.

diff --git a/scripts/+containers/Map.m b/scripts/+containers/Map.m
--- a/scripts/+containers/Map.m
+++ b/scripts/+containers/Map.m
@@ -462,38 +462,56 @@ classdef Map < handle
 
     ## All keys are encoded as strings.
     ## For numeric keys, this requires conversion.
     function keys = encode_keys (this, keys)
       if (iscellstr (keys) || ischar (keys))
         return;
       endif
       cell_input = iscell (keys);
-      if (! cell_input)
-        keys = { keys };
-      endif
-      if (! all (cellfun ("isclass", keys, this.KeyType)))
-        ## Convert input set to KeyType.  This is rarely necessary.
-        keys = cellfun (@(x) feval (this.KeyType, x), keys,
-                        "UniformOutput", false);
+      if (cell_input)
+        if (! all (cellfun ("isclass", keys, this.KeyType)))
+          ## Convert input set to KeyType.  This is rarely necessary.
+          keys = cellfun (@(x) feval (this.KeyType, x), keys,
+                          "UniformOutput", true);
+        else
+          keys = cell2mat (keys);
+        endif
       endif
       ## FIXME: Replace with csprintf when it becomes available.
-      keys = ostrsplit (sprintf ("%.16g\n", keys{:}), "\n");
-      keys(end) = [];
+      ## Use explicit width in format to ensure that we print all digits
+      ## even when there are leading zeros.
+      if (any (strcmp (this.KeyType, {"single", "int32", "uint32"})))
+        keytype = "uint32";
+        fmt = "%0.8X|";
+      else
+        keytype = "uint64";
+        fmt = "%0.16X|";
+      endif
+      keys = ostrsplit (sprintf (fmt, typecast (keys, keytype)), "|", true);
       if (! cell_input)
         keys = char (keys);
       endif
 
     endfunction
 
     function keys = decode_keys (this, keys)
       if (this.numeric_keys)
-        keys = str2double (char (keys));
-        if (! strcmp (this.KeyType, "double"))
-          keys = feval (this.KeyType, keys);
+        ## Since we typecast the key to uint32 or uint64 before
+        ## converting to hex, it would probably be better if hex2num
+        ## could return uint32 or uint64 directly, then we could
+        ## typecast back to other types.
+        if (any (strcmp (this.KeyType, {"single", "int32", "uint32"})))
+          keytype = "single";
+        else
+          keytype = "double";
+        endif
+        keys = hex2num (keys, keytype);
+        if (! strcmp (this.KeyType, keytype))
+          keys = typecast (keys, this.KeyType);
         endif
         keys = mat2cell (keys, ones (numel (keys), 1), 1);
       endif
     endfunction
 
     function this = sort_keys (this)
       this.map = orderfields (this.map);
     endfunction
@@ -616,16 +634,47 @@ endclassdef
 %!test
 %! m = containers.Map ({"a","b","c"}, {1,2,3});
 %! assert (m.isKey("a"), true);
 %! assert (m.isKey({"a","d"}), [true, false]);
 %! m.remove("a");
 %! m.remove({"b","c"});
 %! assert (isempty (m));
 
+## Ensure that exact key values are preserved.
+%!test
+%! keytypes = {"int32", "int64", "uint32", "uint64"};
+%! for i = 1:numel (keytypes)
+%!   keytype = keytypes{i};
+%!   key = intmax (keytype);
+%!   m = containers.Map (key, pi);
+%!   assert (m.isKey (key));
+%!   assert (m.keys (), {key});
+%!   key = intmin (keytype);
+%!   m = containers.Map (key, pi);
+%!   assert (m.isKey (key));
+%!   assert (m.keys (), {key});
+%! endfor
+%! keytypes = {"double", "single"};
+%! for i = 1:numel (keytypes)
+%!   keytype = keytypes{i};
+%!   key = realmax (keytype);
+%!   m = containers.Map (key, pi);
+%!   assert (m.isKey (key));
+%!   assert (m.keys (), {key});
+%!   key = realmin (keytype);
+%!   m = containers.Map (key, pi);
+%!   assert (m.isKey (key));
+%!   assert (m.keys (), {key});
+%!   key = -realmax (keytype);
+%!   m = containers.Map (key, pi);
+%!   assert (m.isKey (key));
+%!   assert (m.keys (), {key});
+%! endfor
+
 ## Test input validation
 %!error containers.Map (1,2,3)
 %!error containers.Map (1,2,3,4,5)
 %!error <empty keys are not allowed> containers.Map ([], 1)
 %!error <number of keys and values must match> containers.Map (1, {2, 3})
 %!error <keys must be real .* values> containers.Map ({{1}}, 2)
 %!error <keys must be .* scalar .* values> containers.Map ({magic(3)}, 2)
 %!warning <keys .* converted to double>
