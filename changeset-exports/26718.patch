# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1549918188 0
#      Mon Feb 11 20:49:48 2019 +0000
# Node ID 9b0335f4bc74a8f7a6ed657a1d35852dda8868f5
# Parent  87d3baf1c0244a9e478916b618da27197de2a0cf
revise naming of the parts of a superclass reference

* token.h, pt-classdef.h: Use m_method_name instead of
m_method_or_object_name.  Change accessors and all uses to match.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1120,20 +1120,19 @@ private:
 
 //----------------------------------------------------------------------------
 
 class octave_classdef_superclass_ref : public octave_function
 {
 public:
   octave_classdef_superclass_ref (void) = delete;
 
-  octave_classdef_superclass_ref (const std::string& meth_or_obj,
+  octave_classdef_superclass_ref (const std::string& meth,
                                   const std::string& cls)
-    : octave_function (), m_method_or_object_name (meth_or_obj),
-      m_class_name (cls)
+    : octave_function (), m_method_name (meth), m_class_name (cls)
   { }
 
   octave_classdef_superclass_ref (const octave_classdef_superclass_ref&) = delete;
 
   octave_classdef_superclass_ref& operator = (const octave_classdef_superclass_ref&) = delete;
 
   ~octave_classdef_superclass_ref (void) = default;
 
@@ -1150,17 +1149,17 @@ public:
     bool in_constructor;
     cdef_class ctx;
 
     ctx = get_class_context (meth_name, in_constructor);
 
     if (! ctx.ok ())
       error ("superclass calls can only occur in methods or constructors");
 
-    std::string mname = m_method_or_object_name;
+    std::string mname = m_method_name;
     std::string cname = m_class_name;
 
     cdef_class cls = lookup_class (cname);
 
     if (in_constructor)
       {
         if (! is_direct_superclass (cls, ctx))
           error ("`%s' is not a direct superclass of `%s'",
@@ -1231,25 +1230,25 @@ private:
           }
       }
 
     return false;
   }
 
 private:
 
-  std::string m_method_or_object_name;
+  std::string m_method_name;
   std::string m_class_name;
 };
 
 octave_value
-octave_classdef::superclass_ref (const std::string& meth_or_obj,
+octave_classdef::superclass_ref (const std::string& meth,
                                  const std::string& cls)
 {
-  return octave_value (new octave_classdef_superclass_ref (meth_or_obj, cls));
+  return octave_value (new octave_classdef_superclass_ref (meth, cls));
 }
 
 octave_value
 octave_classdef::metaclass_query (const std::string& cls)
 {
   return to_ov (lookup_class (cls));
 }
 
@@ -2034,17 +2033,17 @@ public:
   void visit_return_list (octave::tree_return_list&) { }
   void visit_try_catch_command (octave::tree_try_catch_command&) { }
   void visit_unwind_protect_command (octave::tree_unwind_protect_command&) { }
   void visit_while_command (octave::tree_while_command&) { }
   void visit_do_until_command (octave::tree_do_until_command&) { }
 
   void visit_superclass_ref (octave::tree_superclass_ref& t)
   {
-    if (t.method_or_object_name () == obj_name)
+    if (t.method_name () == obj_name)
       {
         std::string class_name = t.class_name ();
 
         cdef_class cls = lookup_class (class_name, false);
 
         if (cls.ok ())
           ctor_list.push_back (cls);
       }
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -1555,17 +1555,17 @@ public:
   }
 
   octave_value
   get_property (octave_idx_type idx, const std::string& name) const
   {
     return object.get_property (idx, name);
   }
 
-  static octave_value superclass_ref (const std::string& meth_or_obj,
+  static octave_value superclass_ref (const std::string& meth,
                                       const std::string& cls);
 
   static octave_value metaclass_query (const std::string& cls);
 
 public:
   int type_id (void) const { return t_id; }
   std::string type_name (void) const { return t_name; }
   std::string class_name (void) const { return object.class_name (); }
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -2983,35 +2983,35 @@ namespace octave
   {
     std::string txt = flex_yytext ();
 
     txt.erase (std::remove_if (txt.begin (), txt.end (), is_space_or_tab),
                txt.end ());
 
     size_t pos = txt.find ("@");
 
-    std::string meth_or_obj = txt.substr (0, pos);
+    std::string meth = txt.substr (0, pos);
     std::string cls = txt.substr (pos + 1);
 
-    bool kw_token = (is_keyword_token (meth_or_obj)
+    bool kw_token = (is_keyword_token (meth)
                      || fq_identifier_contains_keyword (cls));
 
     if (kw_token)
       {
         token *tok
           = new token (LEXICAL_ERROR,
                        "method, class, and package names may not be keywords",
                        m_input_line_number, m_current_input_column);
 
         push_token (tok);
 
         return count_token_internal (LEXICAL_ERROR);
       }
 
-    push_token (new token (SUPERCLASSREF, meth_or_obj, cls,
+    push_token (new token (SUPERCLASSREF, meth, cls,
                            m_input_line_number, m_current_input_column));
 
     m_current_input_column += flex_yyleng ();
 
     return SUPERCLASSREF;
   }
 
   int
diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -509,21 +509,20 @@ identifier      : NAME
                                                       $1->line (),
                                                       $1->column ());
                   }
                 ;
 
 superclass_identifier
                 : SUPERCLASSREF
                   {
-                    std::string meth_or_obj
-                      = $1->superclass_method_or_object_name ();
+                    std::string meth = $1->superclass_method_name ();
                     std::string cls = $1->superclass_class_name ();
 
-                    $$ = new octave::tree_superclass_ref (meth_or_obj, cls,
+                    $$ = new octave::tree_superclass_ref (meth, cls,
                                                           $1->line (),
                                                           $1->column ());
                   }
                 ;
 
 meta_identifier : METAQUERY
                   {
                     std::string cls = $1->text ();
diff --git a/libinterp/parse-tree/pt-classdef.cc b/libinterp/parse-tree/pt-classdef.cc
--- a/libinterp/parse-tree/pt-classdef.cc
+++ b/libinterp/parse-tree/pt-classdef.cc
@@ -28,17 +28,17 @@ along with Octave; see the file COPYING.
 #include "pt-classdef.h"
 
 namespace octave
 {
   tree_superclass_ref *
   tree_superclass_ref::dup (symbol_scope&) const
   {
     tree_superclass_ref *new_scr
-      = new tree_superclass_ref (m_method_or_object_name, m_class_name,
+      = new tree_superclass_ref (m_method_name, m_class_name,
                                  line (), column ());
 
     new_scr->copy_base (*this);
 
     return new_scr;
   }
 
   tree_metaclass_query *
diff --git a/libinterp/parse-tree/pt-classdef.h b/libinterp/parse-tree/pt-classdef.h
--- a/libinterp/parse-tree/pt-classdef.h
+++ b/libinterp/parse-tree/pt-classdef.h
@@ -42,47 +42,51 @@ namespace octave
   class interpreter;
 
   class tree_superclass_ref : public tree_expression
   {
   public:
 
     tree_superclass_ref (void) = delete;
 
-    tree_superclass_ref (const std::string& meth_or_obj,
-                         const std::string& cls, int l = -1, int c = -1)
-      : tree_expression (l, c), m_method_or_object_name (meth_or_obj),
-        m_class_name (cls)
+    tree_superclass_ref (const std::string& meth, const std::string& cls,
+                         int l = -1, int c = -1)
+      : tree_expression (l, c), m_method_name (meth), m_class_name (cls)
     { }
 
     // No copying!
 
     tree_superclass_ref (const tree_superclass_ref&) = delete;
 
     tree_superclass_ref& operator = (const tree_superclass_ref&) = delete;
 
-    std::string method_or_object_name (void) const
+    std::string method_name (void) const
     {
-      return m_method_or_object_name;
+      return m_method_name;
     }
 
     std::string class_name (void) const { return m_class_name; }
 
     bool has_magic_end (void) const { return false; }
 
     tree_superclass_ref * dup (symbol_scope& scope) const;
 
     void accept (tree_walker& tw)
     {
       tw.visit_superclass_ref (*this);
     }
 
   private:
 
-    std::string m_method_or_object_name;
+    // The name of the method to call.  This is the text before the
+    // "@" and may be of the form "object.method".
+    std::string m_method_name;
+
+    // The name of the superclass.  This is the text after the "@"
+    // and may be of the form "object.method".
     std::string m_class_name;
   };
 
   class tree_metaclass_query : public tree_expression
   {
   public:
 
     tree_metaclass_query (void) = delete;
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -3393,20 +3393,20 @@ namespace octave
         if (is_logically_true (expr, "do-until"))
           break;
       }
   }
 
   void
   tree_evaluator::visit_superclass_ref (tree_superclass_ref& expr)
   {
-    std::string meth_or_obj = expr.method_or_object_name ();
+    std::string meth = expr.method_name ();
     std::string cls = expr.class_name ();
 
-    octave_value tmp = octave_classdef::superclass_ref (meth_or_obj, cls);
+    octave_value tmp = octave_classdef::superclass_ref (meth, cls);
 
     if (! expr.is_postfix_indexed ())
       {
         // There was no index, so this superclass_ref object is not
         // part of an index expression.  It is also not an identifier in
         // the syntax tree but we need to handle it as if it were.  So
         // call the function here.
 
diff --git a/libinterp/parse-tree/pt-pr-code.cc b/libinterp/parse-tree/pt-pr-code.cc
--- a/libinterp/parse-tree/pt-pr-code.cc
+++ b/libinterp/parse-tree/pt-pr-code.cc
@@ -1130,17 +1130,17 @@ namespace octave
       expr->accept (*this);
 
     newline ();
   }
 
   void
   tree_print_code::visit_superclass_ref (tree_superclass_ref& scr)
   {
-    m_os << scr.method_or_object_name () << "@" << scr.class_name ();
+    m_os << scr.method_name () << "@" << scr.class_name ();
   }
 
   void
   tree_print_code::visit_metaclass_query (tree_metaclass_query& mcq)
   {
     m_os << "?" << mcq.class_name ();
   }
 
diff --git a/libinterp/parse-tree/token.cc b/libinterp/parse-tree/token.cc
--- a/libinterp/parse-tree/token.cc
+++ b/libinterp/parse-tree/token.cc
@@ -68,21 +68,21 @@ namespace octave
   { }
 
   token::token (int tv, const symbol_record& sr, int l, int c)
     : m_maybe_cmd (false), m_tspc (false), m_line_num (l), m_column_num (c),
       m_tok_val (tv), m_type_tag (sym_rec_token), m_tok_info (sr),
       m_orig_text ()
   { }
 
-  token::token (int tv, const std::string& meth_or_obj,
-                const std::string& cls, int l, int c)
+  token::token (int tv, const std::string& meth, const std::string& cls,
+                int l, int c)
     : m_maybe_cmd (false), m_tspc (false), m_line_num (l), m_column_num (c),
       m_tok_val (tv), m_type_tag (scls_name_token),
-      m_tok_info (meth_or_obj, cls), m_orig_text ()
+      m_tok_info (meth, cls), m_orig_text ()
   { }
 
   token::~token (void)
   {
     if (m_type_tag == string_token)
       delete m_tok_info.m_str;
     else if (m_type_tag == sym_rec_token)
       delete m_tok_info.m_sr;
@@ -127,20 +127,20 @@ namespace octave
   symbol_record
   token::sym_rec (void) const
   {
     assert (m_type_tag == sym_rec_token);
     return *m_tok_info.m_sr;
   }
 
   std::string
-  token::superclass_method_or_object_name (void) const
+  token::superclass_method_name (void) const
   {
     assert (m_type_tag == scls_name_token);
-    return m_tok_info.m_superclass_info->m_method_or_object_name;
+    return m_tok_info.m_superclass_info->m_method_name;
   }
 
   std::string
   token::superclass_class_name (void) const
   {
     assert (m_type_tag == scls_name_token);
     return m_tok_info.m_superclass_info->m_class_name;
   }
diff --git a/libinterp/parse-tree/token.h b/libinterp/parse-tree/token.h
--- a/libinterp/parse-tree/token.h
+++ b/libinterp/parse-tree/token.h
@@ -115,17 +115,17 @@ namespace octave
 
     std::string text (void) const;
     std::string symbol_name (void) const;
     double number (void) const;
     token_type ttype (void) const;
     end_tok_type ettype (void) const;
     symbol_record sym_rec (void) const;
 
-    std::string superclass_method_or_object_name (void) const;
+    std::string superclass_method_name (void) const;
     std::string superclass_class_name (void) const;
 
     std::string text_rep (void) const;
 
   private:
 
     bool m_maybe_cmd;
 
@@ -150,18 +150,18 @@ namespace octave
       tok_info (double num) : m_num (num) { }
 
       tok_info (end_tok_type et) : m_et (et) { }
 
       tok_info (const symbol_record& sr)
         : m_sr (new symbol_record (sr))
       { }
 
-      tok_info (const std::string& meth_or_obj, const std::string& cls)
-        : m_superclass_info (new superclass_info (meth_or_obj, cls))
+      tok_info (const std::string& meth, const std::string& cls)
+        : m_superclass_info (new superclass_info (meth, cls))
       { }
 
       tok_info (const tok_info&) = delete;
 
       tok_info& operator = (const tok_info&) = delete;
 
       ~tok_info (void) { }
 
@@ -172,28 +172,33 @@ namespace octave
       end_tok_type m_et;
 
       symbol_record *m_sr;
 
       struct superclass_info
       {
         superclass_info (void) = delete;
 
-        superclass_info (const std::string& meth_or_obj,
+        superclass_info (const std::string& meth,
                          const std::string& cls)
-          : m_method_or_object_name (meth_or_obj), m_class_name (cls)
+          : m_method_name (meth), m_class_name (cls)
         { }
 
         superclass_info (const superclass_info&) = delete;
 
         superclass_info& operator = (const superclass_info&) = delete;
 
         ~superclass_info (void) = default;
 
-        std::string m_method_or_object_name;
+        // The name of the method to call.  This is the text before the
+        // "@" and may be of the form "object.method".
+        std::string m_method_name;
+
+        // The name of the superclass.  This is the text after the "@"
+        // and may be of the form "object.method".
         std::string m_class_name;
       };
 
       superclass_info *m_superclass_info;
     };
 
     tok_info m_tok_info;
 
