# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1228388625 -3600
#      Thu Dec 04 12:03:45 2008 +0100
# Node ID c3f7e2549abb438a3a4fbdf2f62a769d94a59947
# Parent  34960ba08a811406a54a5c03b05369db8cc95942
make det & inv aware of diagonal & permutation matrices

diff --git a/liboctave/CDiagMatrix.cc b/liboctave/CDiagMatrix.cc
--- a/liboctave/CDiagMatrix.cc
+++ b/liboctave/CDiagMatrix.cc
@@ -565,16 +565,43 @@ ComplexDiagMatrix::diag (octave_idx_type
     }
   else
     (*current_liboctave_error_handler)
       ("diag: requested diagonal out of range");
 
   return d;
 }
 
+ComplexDET
+ComplexDiagMatrix::determinant (void) const
+{
+  ComplexDET det (1.0);
+  if (rows () != cols ())
+    {
+      (*current_liboctave_error_handler) ("determinant requires square matrix");
+      det = ComplexDET (0.0);
+    }
+  else
+    {
+      octave_idx_type len = length ();
+      for (octave_idx_type i = 0; i < len; i++)
+        det *= elem (i, i);
+    }
+
+  return det;
+}
+
+double
+ComplexDiagMatrix::rcond (void) const
+{
+  ColumnVector av = diag (0).map (std::abs);
+  double amx = av.max (), amn = av.min ();
+  return amx == 0 ? 0.0 : amn / amx;
+}
+
 // i/o
 
 std::ostream&
 operator << (std::ostream& os, const ComplexDiagMatrix& a)
 {
   Complex ZERO (0.0);
 //  int field_width = os.precision () + 7;
   for (octave_idx_type i = 0; i < a.rows (); i++)
diff --git a/liboctave/CDiagMatrix.h b/liboctave/CDiagMatrix.h
--- a/liboctave/CDiagMatrix.h
+++ b/liboctave/CDiagMatrix.h
@@ -25,16 +25,17 @@ along with Octave; see the file COPYING.
 #define octave_ComplexDiagMatrix_h 1
 
 #include "MDiagArray2.h"
 
 #include "dRowVector.h"
 #include "CRowVector.h"
 #include "dColVector.h"
 #include "CColVector.h"
+#include "DET.h"
 
 #include "mx-defs.h"
 
 class
 ComplexDiagMatrix : public MDiagArray2<Complex>
 {
 public:
 
@@ -118,16 +119,19 @@ public:
 
   ComplexDiagMatrix& operator += (const DiagMatrix& a);
   ComplexDiagMatrix& operator -= (const DiagMatrix& a);
 
   // other operations
 
   ComplexColumnVector diag (octave_idx_type k = 0) const;
 
+  ComplexDET determinant (void) const;
+  double rcond (void) const;
+
   // i/o
 
   friend std::ostream& operator << (std::ostream& os, const ComplexDiagMatrix& a);
 
 private:
 
   ComplexDiagMatrix (Complex *d, octave_idx_type nr, octave_idx_type nc)
     : MDiagArray2<Complex> (d, nr, nc) { }
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,23 @@
+2008-12-04  Jaroslav Hajek  <highegg@gmail.com>
+	
+	* dDiagMatrix.cc (DiagMatrix::determinant, DiagMatrix::rcond): New
+	method.
+	* dDiagMatrix.h: Declare them.
+	* fDiagMatrix.cc (FloatDiagMatrix::determinant,
+	FloatDiagMatrix::rcond): New methods.
+	* fDiagMatrix.h: Declare them.
+	* CDiagMatrix.cc (ComplexDiagMatrix::determinant,
+	ComplexDiagMatrix::rcond): New methods.
+	* CDiagMatrix.h: Declare them.
+	* fCDiagMatrix.cc (FloatComplexDiagMatrix::determinant,
+	FloatComplexDiagMatrix::rcond): New methods.
+	* fCDiagMatrix.h: Declare them.
+
 2008-12-04  Jaroslav Hajek  <highegg@gmail.com>
 
 	* idx-vector.cc (idx-vector::complement): Add missing delete.
 
 2008-12-04  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dbleQRP.cc (QRP::QRP): Call DGEQP3 rather than DGEQPF.
 	* floatQRP.cc (FloatQRP::FloatQRP): Call SGEQP3 rather than SGEQPF.
diff --git a/liboctave/dDiagMatrix.cc b/liboctave/dDiagMatrix.cc
--- a/liboctave/dDiagMatrix.cc
+++ b/liboctave/dDiagMatrix.cc
@@ -382,16 +382,42 @@ DiagMatrix::diag (octave_idx_type k) con
     }
   else
     (*current_liboctave_error_handler)
       ("diag: requested diagonal out of range");
 
   return d;
 }
 
+DET
+DiagMatrix::determinant (void) const
+{
+  DET det (1.0);
+  if (rows () != cols ())
+    {
+      (*current_liboctave_error_handler) ("determinant requires square matrix");
+      det = 0.0;
+    }
+  else
+    {
+      octave_idx_type len = length ();
+      for (octave_idx_type i = 0; i < len; i++)
+        det *= elem (i, i);
+    }
+
+  return det;
+}
+
+double
+DiagMatrix::rcond (void) const
+{
+  ColumnVector av  = diag (0).map (fabs);
+  double amx = av.max (), amn = av.min ();
+  return amx == 0 ? 0.0 : amn / amx;
+}
 
 std::ostream&
 operator << (std::ostream& os, const DiagMatrix& a)
 {
 //  int field_width = os.precision () + 7;
 
   for (octave_idx_type i = 0; i < a.rows (); i++)
     {
diff --git a/liboctave/dDiagMatrix.h b/liboctave/dDiagMatrix.h
--- a/liboctave/dDiagMatrix.h
+++ b/liboctave/dDiagMatrix.h
@@ -23,16 +23,17 @@ along with Octave; see the file COPYING.
 
 #if !defined (octave_DiagMatrix_h)
 #define octave_DiagMatrix_h 1
 
 #include "MDiagArray2.h"
 
 #include "dRowVector.h"
 #include "dColVector.h"
+#include "DET.h"
 
 #include "mx-defs.h"
 
 class
 OCTAVE_API
 DiagMatrix : public MDiagArray2<double>
 {
 friend class SVD;
@@ -93,17 +94,18 @@ public:
 
   DiagMatrix inverse (void) const;
   DiagMatrix inverse (int& info) const;
 
   // other operations
 
   ColumnVector diag (octave_idx_type k = 0) const;
 
-  bool is_identity (void) const;
+  DET determinant (void) const;
+  double rcond (void) const;
 
   // i/o
 
   friend OCTAVE_API std::ostream& operator << (std::ostream& os, const DiagMatrix& a);
 
 private:
 
   DiagMatrix (double *d, octave_idx_type nr, octave_idx_type nc) : MDiagArray2<double> (d, nr, nc) { }
diff --git a/liboctave/fCDiagMatrix.cc b/liboctave/fCDiagMatrix.cc
--- a/liboctave/fCDiagMatrix.cc
+++ b/liboctave/fCDiagMatrix.cc
@@ -586,16 +586,43 @@ FloatComplexDiagMatrix::diag (octave_idx
     }
   else
     (*current_liboctave_error_handler)
       ("diag: requested diagonal out of range");
 
   return d;
 }
 
+FloatComplexDET
+FloatComplexDiagMatrix::determinant (void) const
+{
+  FloatComplexDET det (1.0f);
+  if (rows () != cols ())
+    {
+      (*current_liboctave_error_handler) ("determinant requires square matrix");
+      det = FloatComplexDET (0.0);
+    }
+  else
+    {
+      octave_idx_type len = length ();
+      for (octave_idx_type i = 0; i < len; i++)
+        det *= elem (i, i);
+    }
+
+  return det;
+}
+
+float
+FloatComplexDiagMatrix::rcond (void) const
+{
+  FloatColumnVector av = diag (0).map (std::abs);
+  float amx = av.max (), amn = av.min ();
+  return amx == 0 ? 0.0f : amn / amx;
+}
+
 // i/o
 
 std::ostream&
 operator << (std::ostream& os, const FloatComplexDiagMatrix& a)
 {
   FloatComplex ZERO (0.0);
 //  int field_width = os.precision () + 7;
   for (octave_idx_type i = 0; i < a.rows (); i++)
diff --git a/liboctave/fCDiagMatrix.h b/liboctave/fCDiagMatrix.h
--- a/liboctave/fCDiagMatrix.h
+++ b/liboctave/fCDiagMatrix.h
@@ -25,16 +25,17 @@ along with Octave; see the file COPYING.
 #define octave_FloatComplexDiagMatrix_h 1
 
 #include "MDiagArray2.h"
 
 #include "fRowVector.h"
 #include "fCRowVector.h"
 #include "fColVector.h"
 #include "fCColVector.h"
+#include "DET.h"
 
 #include "mx-defs.h"
 
 class
 FloatComplexDiagMatrix : public MDiagArray2<FloatComplex>
 {
 public:
 
@@ -118,16 +119,19 @@ public:
 
   FloatComplexDiagMatrix& operator += (const FloatDiagMatrix& a);
   FloatComplexDiagMatrix& operator -= (const FloatDiagMatrix& a);
 
   // other operations
 
   FloatComplexColumnVector diag (octave_idx_type k = 0) const;
 
+  FloatComplexDET determinant (void) const;
+  float rcond (void) const;
+
   // i/o
 
   friend std::ostream& operator << (std::ostream& os, const FloatComplexDiagMatrix& a);
 
 private:
 
   FloatComplexDiagMatrix (FloatComplex *d, octave_idx_type nr, octave_idx_type nc)
     : MDiagArray2<FloatComplex> (d, nr, nc) { }
diff --git a/liboctave/fDiagMatrix.cc b/liboctave/fDiagMatrix.cc
--- a/liboctave/fDiagMatrix.cc
+++ b/liboctave/fDiagMatrix.cc
@@ -389,16 +389,43 @@ FloatDiagMatrix::diag (octave_idx_type k
     }
   else
     (*current_liboctave_error_handler)
       ("diag: requested diagonal out of range");
 
   return d;
 }
 
+FloatDET
+FloatDiagMatrix::determinant (void) const
+{
+  FloatDET det (1.0f);
+  if (rows () != cols ())
+    {
+      (*current_liboctave_error_handler) ("determinant requires square matrix");
+      det = 0.0f;
+    }
+  else
+    {
+      octave_idx_type len = length ();
+      for (octave_idx_type i = 0; i < len; i++)
+        det *= elem (i, i);
+    }
+
+  return det;
+}
+
+float
+FloatDiagMatrix::rcond (void) const
+{
+  FloatColumnVector av = diag (0).map (fabsf);
+  float amx = av.max (), amn = av.min ();
+  return amx == 0 ? 0.0f : amn / amx;
+}
+
 std::ostream&
 operator << (std::ostream& os, const FloatDiagMatrix& a)
 {
 //  int field_width = os.precision () + 7;
 
   for (octave_idx_type i = 0; i < a.rows (); i++)
     {
       for (octave_idx_type j = 0; j < a.cols (); j++)
diff --git a/liboctave/fDiagMatrix.h b/liboctave/fDiagMatrix.h
--- a/liboctave/fDiagMatrix.h
+++ b/liboctave/fDiagMatrix.h
@@ -23,16 +23,17 @@ along with Octave; see the file COPYING.
 
 #if !defined (octave_FloatDiagMatrix_h)
 #define octave_FloatDiagMatrix_h 1
 
 #include "MDiagArray2.h"
 
 #include "fRowVector.h"
 #include "fColVector.h"
+#include "DET.h"
 
 #include "mx-defs.h"
 
 class
 OCTAVE_API
 FloatDiagMatrix : public MDiagArray2<float>
 {
 friend class FloatSVD;
@@ -93,17 +94,18 @@ public:
 
   FloatDiagMatrix inverse (void) const;
   FloatDiagMatrix inverse (int& info) const;
 
   // other operations
 
   FloatColumnVector diag (octave_idx_type k = 0) const;
 
-  bool is_identity (void) const;
+  FloatDET determinant (void) const;
+  float rcond (void) const;
 
   // i/o
 
   friend OCTAVE_API std::ostream& operator << (std::ostream& os, const FloatDiagMatrix& a);
 
 private:
 
   FloatDiagMatrix (float *d, octave_idx_type nr, octave_idx_type nc) : MDiagArray2<float> (d, nr, nc) { }
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2008-12-04  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov.h (octave_value::is_perm_matrix): New method.
+	* ov-base.h (octave_base_value::is_perm_matrix): New method.
+	* ov-perm.h (octave_perm_matrix::is_perm_matrix): New method.
+	* DLD-FUNCTIONS/inv.cc (Finv): Handle permutation matrices specially,
+	compute rcond for diagonal matrices.
+	* DLD-FUNCTIONS/det.cc (Fdet): Handle permutation & diagonal matrices
+	specially.
+
 2008-12-03  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-perm.h: New source.
 	* ov-perm.cc: New source.
 	* ov-flt-perm.h: New source.
 	* ov-flt-perm.cc: New source.
 	* ov-base-diag.cc (octave_base_diag<DMT, MT>::do_index_op):
 	If subscripting an identity matrix by permutation(s), return a
diff --git a/src/DLD-FUNCTIONS/det.cc b/src/DLD-FUNCTIONS/det.cc
--- a/src/DLD-FUNCTIONS/det.cc
+++ b/src/DLD-FUNCTIONS/det.cc
@@ -27,27 +27,34 @@ along with Octave; see the file COPYING.
 
 #include "DET.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
+#include "ops.h"
 
 #include "ov-re-mat.h"
 #include "ov-cx-mat.h"
 #include "ov-flt-re-mat.h"
 #include "ov-flt-cx-mat.h"
+#include "ov-re-diag.h"
+#include "ov-cx-diag.h"
+#include "ov-flt-re-diag.h"
+#include "ov-flt-cx-diag.h"
+#include "ov-perm.h"
+#include "ov-flt-perm.h"
 
 #define MAYBE_CAST(VAR, CLASS) \
   const CLASS *VAR = arg.type_id () == CLASS::static_type_id () ? \
    dynamic_cast<const CLASS *> (&arg.get_rep ()) : 0
 
-DEFUN_DLD (det, args, ,
+DEFUN_DLD (det, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{d}, @var{rcond}] =} det (@var{a})\n\
 Compute the determinant of @var{a} using @sc{Lapack} for full and UMFPACK\n\
 for sparse matrices.  Return an estimate of the reciprocal condition number\n\
 if requested.\n\
 @end deftypefn")
 {
   octave_value_list retval;
@@ -79,18 +86,75 @@ if requested.\n\
 
 
   if (nr != nc)
     {
       gripe_square_matrix_required ("det");
       return retval;
     }
 
+  bool isfloat = arg.is_single_type ();
 
-  if (arg.is_single_type ())
+  if (arg.is_diag_matrix ())
+    {
+      const octave_base_value& a = arg.get_rep ();
+      if (arg.is_complex_type ())
+        {
+          if (isfloat)
+            {
+              CAST_CONV_ARG (const octave_float_complex_diag_matrix&);
+              retval(0) = v.float_complex_diag_matrix_value ().determinant ().value ();
+              if (nargout > 1)
+                retval(1) = v.float_complex_diag_matrix_value ().rcond ();
+            }
+          else
+            {
+              CAST_CONV_ARG (const octave_complex_diag_matrix&);
+              retval(0) = v.complex_diag_matrix_value ().determinant ().value ();
+              if (nargout > 1)
+                retval(1) = v.complex_diag_matrix_value ().rcond ();
+            }
+        }
+      else
+        {
+          if (isfloat)
+            {
+              CAST_CONV_ARG (const octave_float_diag_matrix&);
+              retval(0) = v.float_diag_matrix_value ().determinant ().value ();
+              if (nargout > 1)
+                retval(1) = v.float_diag_matrix_value ().rcond ();
+            }
+          else
+            {
+              CAST_CONV_ARG (const octave_diag_matrix&);
+              retval(0) = v.diag_matrix_value ().determinant ().value ();
+              if (nargout > 1)
+                retval(1) = v.diag_matrix_value ().rcond ();
+            }
+        }
+    }
+  else if (arg.is_perm_matrix ())
+    {
+      const octave_base_value& a = arg.get_rep ();
+      if (isfloat)
+        {
+          CAST_CONV_ARG (const octave_float_perm_matrix&);
+          retval(0) = static_cast<float> (v.perm_matrix_value ().determinant ());
+          if (nargout > 1)
+            retval(1) = 1.0;
+        }
+      else
+        {
+          CAST_CONV_ARG (const octave_perm_matrix&);
+          retval(0) = static_cast<double> (v.perm_matrix_value ().determinant ());
+          if (nargout > 1)
+            retval(1) = 1.0f;
+        }
+    }
+  else if (arg.is_single_type ())
     {
       if (arg.is_real_type ())
 	{
 	  octave_idx_type info;
 	  float rcond = 0.0;
 	  // Always compute rcond, so we can detect numerically
 	  // singular matrices.
 	  FloatMatrix m = arg.float_matrix_value ();
diff --git a/src/DLD-FUNCTIONS/inv.cc b/src/DLD-FUNCTIONS/inv.cc
--- a/src/DLD-FUNCTIONS/inv.cc
+++ b/src/DLD-FUNCTIONS/inv.cc
@@ -29,16 +29,18 @@ along with Octave; see the file COPYING.
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ops.h"
 #include "ov-re-diag.h"
 #include "ov-cx-diag.h"
 #include "ov-flt-re-diag.h"
 #include "ov-flt-cx-diag.h"
+#include "ov-perm.h"
+#include "ov-flt-perm.h"
 #include "utils.h"
 
 DEFUN_DLD (inv, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{x}, @var{rcond}] =} inv (@var{a})\n\
 @deftypefnx {Loadable Function} {[@var{x}, @var{rcond}] =} inverse (@var{a})\n\
 Compute the inverse of the square matrix @var{a}.  Return an estimate\n\
 of the reciprocal condition number if requested, otherwise warn of an\n\
@@ -91,37 +93,62 @@ be avoided. It is significantly more acc
       frcond = 1.0f;
       const octave_base_value& a = arg.get_rep ();
       if (arg.is_complex_type ())
         {
           if (isfloat)
             {
               CAST_CONV_ARG (const octave_float_complex_diag_matrix&);
               result = v.float_complex_diag_matrix_value ().inverse (info);
+              if (nargout > 1)
+                frcond = v.float_complex_diag_matrix_value ().rcond ();
             }
           else
             {
               CAST_CONV_ARG (const octave_complex_diag_matrix&);
               result = v.complex_diag_matrix_value ().inverse (info);
+              if (nargout > 1)
+                rcond = v.complex_diag_matrix_value ().rcond ();
             }
         }
       else
         {
           if (isfloat)
             {
               CAST_CONV_ARG (const octave_float_diag_matrix&);
               result = v.float_diag_matrix_value ().inverse (info);
+              if (nargout > 1)
+                frcond = v.float_diag_matrix_value ().rcond ();
             }
           else
             {
               CAST_CONV_ARG (const octave_diag_matrix&);
               result = v.diag_matrix_value ().inverse (info);
+              if (nargout > 1)
+                rcond = v.diag_matrix_value ().rcond ();
             }
         }
     }
+  else if (arg.is_perm_matrix ())
+    {
+      rcond = 1.0;
+      frcond = 1.0f;
+      info = 0;
+      const octave_base_value& a = arg.get_rep ();
+      if (isfloat)
+        {
+          CAST_CONV_ARG (const octave_float_perm_matrix&);
+          result = v.perm_matrix_value ().inverse ();
+        }
+      else
+        {
+          CAST_CONV_ARG (const octave_perm_matrix&);
+          result = v.perm_matrix_value ().inverse ();
+        }
+    }
   else if (isfloat)
     {
       if (arg.is_real_type ())
 	{
 	  FloatMatrix m = arg.float_matrix_value ();
 	  if (! error_state)
 	    {
 	      MatrixType mattyp = args(0).matrix_type ();
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -233,16 +233,18 @@ public:
   virtual bool is_bool_scalar (void) const { return false; }
 
   virtual bool is_bool_matrix (void) const { return false; }
 
   virtual bool is_char_matrix (void) const { return false; }
 
   virtual bool is_diag_matrix (void) const { return false; }
 
+  virtual bool is_perm_matrix (void) const { return false; }
+
   virtual bool is_string (void) const { return false; }
 
   virtual bool is_sq_string (void) const { return false; }
 
   virtual bool is_range (void) const { return false; }
 
   virtual bool is_map (void) const { return false; }
 
diff --git a/src/ov-perm.h b/src/ov-perm.h
--- a/src/ov-perm.h
+++ b/src/ov-perm.h
@@ -86,16 +86,18 @@ public:
     { return to_dense () .diag (k); }
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
     { return to_dense ().sort (dim, mode); }
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
 		     sortmode mode = ASCENDING) const
     { return to_dense ().sort (sidx, dim, mode); }
 
+  bool is_perm_matrix (void) const { return true; }
+
   bool is_matrix_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -461,16 +461,19 @@ public:
     { return rep->is_bool_matrix (); }
 
   bool is_char_matrix (void) const
     { return rep->is_char_matrix (); }
 
   bool is_diag_matrix (void) const
     { return rep->is_diag_matrix (); }
 
+  bool is_perm_matrix (void) const
+    { return rep->is_perm_matrix (); }
+
   bool is_string (void) const
     { return rep->is_string (); }
 
   bool is_sq_string (void) const
     { return rep->is_sq_string (); }
 
   bool is_dq_string (void) const
     { return rep->is_string () && ! rep->is_sq_string (); }
