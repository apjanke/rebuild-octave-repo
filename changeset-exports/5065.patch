# HG changeset patch
# User jwe
# Date 1099599131 0
#      Thu Nov 04 20:12:11 2004 +0000
# Node ID 1312d3af9eb06be9c3c5db009f02f187d11fd359
# Parent  a6755bc45f15474cbd3695015591a8c7c75d6bb3
[project @ 2004-11-04 20:12:00 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2004-11-04  John W. Eaton  <jwe@octave.org>
+
+	* plot/hist.m: Always return row vectors for vector args.
+
 2004-09-23  John W. Eaton  <jwe@octave.org>
 
 	* strings/strcmp.m: If args are not strings or cell arrays of
 	strings, return zero instead of reporting an error.
 
 2004-09-22  Federico Zenith  <zenith@chemeng.ntnu.no>
 
 	* control/base/analdemo.m, control/base/are.m, control/base/bddemo.m,
diff --git a/scripts/plot/hist.m b/scripts/plot/hist.m
--- a/scripts/plot/hist.m
+++ b/scripts/plot/hist.m
@@ -45,18 +45,19 @@
 ## Author: jwe
 
 function [nn, xx] = hist (y, x, norm)
 
   if (nargin < 1 || nargin > 3)
     usage ("[nn, xx] = hist (y, x, norm)");
   endif
 
-  transpose = rows (y) == 1;
-  if (transpose)
+  arg_is_vector = is_vector (y);
+
+  if (rows (y) == 1)
     y = y(:);
   endif
 
   if (isreal (y))
     max_val = max (y);
     min_val = min (y);
   else
     error ("hist: first argument must be a vector");
@@ -114,17 +115,17 @@ function [nn, xx] = hist (y, x, norm)
   freq = diff (chist);
 
   if (nargin == 3)
     ## Normalise the histogram.
     freq = freq / rows (y) * norm;
   endif
 
   if (nargout > 0)
-    if (transpose)
+    if (arg_is_vector)
       nn = freq';
       xx = x';
     else
       nn = freq;
       xx = x;
     endif
   else
     bar (x, freq);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 2004-11-04  John W. Eaton  <jwe@octave.org>
 
+	* oct-stream.cc (octave_stream::seek (long, int)): Return error
+	(but leave file position unchanged) for attempt to seek beyond end
+	of file.
+
 	* DLD-FUNCTIONS/inv.cc (Finv): Check rcond value returned from
 	LAPACK routines, and be careful to avoid optimizing away the
 	1+rcond == 1.0 check.
 	* DLD-FUNCTIONS/det.cc (Fdet): Likewise.
 
 2004-11-03  John W. Eaton  <jwe@octave.org>
 
 	* data.cc (Fsize): Return 1 if requested dimension is larger than
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -2658,26 +2658,58 @@ octave_stream::gets (const octave_value&
     retval = gets (max_len, err, who);
 
   return retval;
 }
 
 int
 octave_stream::seek (long offset, int origin)
 {
-  int retval = -1;
+  int status = -1;
 
   if (stream_ok ("fseek"))
     {
       clearerr ();
 
-      retval = rep->seek (offset, origin);
+      long orig_pos = rep->tell ();
+
+      status = rep->seek (offset, origin);
+
+      if (status == 0)
+	{
+	  long save_pos = rep->tell ();
+
+	  rep->seek (0, SEEK_END);
+
+	  long pos_eof = rep->tell ();
+
+	  // I don't think save_pos can be less than zero, but we'll
+	  // check anyway...
+
+	  if (save_pos > pos_eof || save_pos < 0)
+	    {
+	      // Seek outside bounds of file.  Failure should leave
+	      // position unchanged.
+
+	      rep->seek (orig_pos, SEEK_SET);
+
+	      status = -1;
+	    }
+	  else
+	    {
+	      // Is it possible for this to fail?  We are just
+	      // returning to a position after the first successful
+	      // seek.
+
+	      rep->seek (save_pos, SEEK_SET);
+	    }
+	}
     }
 
-  return retval;
+  return status;
 }
 
 int
 octave_stream::seek (const octave_value& tc_offset,
 		     const octave_value& tc_origin)
 {
   int retval = -1;
 
@@ -2715,17 +2747,22 @@ octave_stream::seek (const octave_value&
 	      else if (xorigin == 1)
 		origin = SEEK_END;
 	      else
 		conv_err = -1;
 	    }
 	}
 
       if (! conv_err)
-	retval = seek (xoffset, origin);
+	{
+	  retval = seek (xoffset, origin);
+
+	  if (retval != 0)
+	    error ("fseek: failed to seek to requested position");
+	}
       else
 	error ("fseek: invalid value for origin");
     }
   else
     error ("fseek: invalid value for offset");
 
   return retval;
 }
