# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1541194708 -3600
#      Fri Nov 02 22:38:28 2018 +0100
# Branch stable
# Node ID e92a44730a6e1435f2ab40c9802193c8f0afa3de
# Parent  5535267e88ba129ce8fa4ab07ce7935be3511492
Rethrow exceptions from the GUI to the interpreter thread (bug #54920)

* main-window.h/cc (octave_qapplication): New class derived from QApplication.
  (octave_qapplication::notify): Reimplement QApplication::notify to catch
   and rethrow octave exceptions that happen in QObjects event loop.
  (octave_qt_app::octave_qt_app): Instantiate an octave_qapplication rather
   than a QApplication.

* GLCanvas.cc (GLCanvas::do_print): Let the first eventual exception, due to
  the absence of valid context, be handled downstream. Keep the try/catch
  around gl2ps_print because we still want to release the context in case
  of error.

diff --git a/libgui/graphics/GLCanvas.cc b/libgui/graphics/GLCanvas.cc
--- a/libgui/graphics/GLCanvas.cc
+++ b/libgui/graphics/GLCanvas.cc
@@ -135,30 +135,32 @@ namespace QtHandles
                       const graphics_handle& handle)
   {
     gh_manager::auto_lock lock;
     graphics_object obj = gh_manager::get_object (handle);
 
     if (obj.valid_object ())
       {
         graphics_object figObj (obj.get_ancestor ("figure"));
+        
+        // Make sure we have a valid current context
+        if (! begin_rendering ())
+          error ("print: no valid OpenGL offscreen context");
+        
         try
           {
-            // Make sure we have a valid current context
-            if (! begin_rendering ())
-              error ("print: no valid OpenGL offscreen context");
-
             octave::gl2ps_print (m_glfcns, figObj, file_cmd.toStdString (),
                                  term.toStdString ());
           }
         catch (octave::execution_exception& e)
           {
             octave_link::post_exception (std::current_exception ());
-            end_rendering ();
           }
+        
+        end_rendering ();
       }
   }
 
   void
   GLCanvas::toggleAxes (const graphics_handle& gh)
   {
     canvasToggleAxes (gh);
   }
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -2745,16 +2745,34 @@ namespace octave
          "</body>\n"
          "</html>\n");
 
     emit display_news_signal (html_text);
 
     emit finished ();
   }
 
+  //! Reimplements QApplication::notify.
+  /*! Octave's own exceptions are caugh and rethrown in the interpreter
+      thread.*/
+  bool
+  octave_qapplication::notify (QObject *receiver, QEvent *ev)
+  {
+    try
+      {
+        return QApplication::notify (receiver, ev);
+      }
+    catch (octave::execution_exception&)
+      {
+        octave_link::post_exception (std::current_exception ());
+      }
+
+   return false;
+  }
+
   octave_qt_app::octave_qt_app (gui_application& app_context)
     : QObject (), m_app_context (app_context),
       m_argc (m_app_context.sys_argc ()),
       m_argv (m_app_context.sys_argv ()), m_qt_app (nullptr),
       m_qt_tr (new QTranslator ()), m_gui_tr (new QTranslator ()),
       m_qsci_tr (new QTranslator ()), m_translators_installed (false),
       m_octave_qt_link (new octave_qt_link ()),
       m_interpreter (new octave_interpreter (m_app_context)),
@@ -2791,17 +2809,17 @@ namespace octave
 
     // Register octave_value_list for connecting thread crossing signals.
 
     qRegisterMetaType<octave_value_list> ("octave_value_list");
 
     // Even if START_GUI is false, we still set up the QApplication so
     // that we can use Qt widgets for plot windows.
 
-    m_qt_app = new QApplication (m_argc, m_argv);
+    m_qt_app = new octave_qapplication (m_argc, m_argv);
 
     // Force left-to-right alignment (see bug #46204)
     m_qt_app->setLayoutDirection (Qt::LeftToRight);
 
     octave_link::connect_link (m_octave_qt_link);
 
     connect (m_octave_qt_link, SIGNAL (confirm_shutdown_signal (void)),
              this, SLOT (confirm_shutdown_octave (void)));
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -489,16 +489,29 @@ namespace octave
   private:
 
     QString m_base_url;
     QString m_page;
     int m_serial;
     bool m_connect_to_web;
   };
 
+  class octave_qapplication : public QApplication
+  {
+  public:
+
+    octave_qapplication (int& argc, char **argv)
+    : QApplication (argc, argv)
+    { }
+
+    virtual bool notify (QObject *receiver, QEvent *e) override;
+
+    ~octave_qapplication (void) { };
+  };
+
   class octave_qt_app : public QObject
   {
     Q_OBJECT
 
   public:
 
     octave_qt_app (gui_application& app_context);
 
@@ -548,17 +561,17 @@ namespace octave
     gui_application& m_app_context;
 
     // Use these to ensure that argc and argv exist for as long as the
     // QApplication object.
 
     int m_argc;
     char **m_argv;
 
-    QApplication *m_qt_app;
+    octave_qapplication *m_qt_app;
 
     QTranslator *m_qt_tr;
     QTranslator *m_gui_tr;
     QTranslator *m_qsci_tr;
 
     bool m_translators_installed;
 
     octave_qt_link *m_octave_qt_link;
