# HG changeset patch
# User jwe
# Date 1033672125 0
#      Thu Oct 03 19:08:45 2002 +0000
# Node ID ddc722b38e8792f7eecbb571a4336929a30ddde5
# Parent  ee47900970335fbcc0d2d08b0f932bc2b4085ac9
[project @ 2002-10-03 19:08:45 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,11 +1,12 @@
 2002-10-03  Paul Kienzle <pkienzle@users.sf.net>
 
-	* oct-time.cc: Win32 version of octave_time::stamp().
+	* oct-time.cc (octave_time::stamp): Better resolution for Windows
+	systems.
 
 2002-10-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dMatrix.cc (Matrix::read): Clean up error handling logic.
 
 2002-09-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* file-ops.cc (file_ops::mkdir): Handle one-arg mkdir here.
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,26 @@
+2002-10-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* cutils.c (octave_usleep): Call octave_sleep, not sleep.
+
+	* utils.cc (octave_sleep (double)): New function.
+	* utils.h: Provide decl.
+	* sysdep.cc (Fpause, Fsleep): Use it.
+
+	* cutils.c (do_octave_usleep): Merge with octave_usleep.
+	(octave_usleep): Make it work for Windows systems.  From Paul
+	Kienzle <pkienzle@users.sf.net>.
+
+2002-10-03  Paul Kienzle <pkienzle@users.sf.net>
+
+	* cutils.c (octave_usleep): Make it work for Windows systems.
+
+	* toplev.cc (Fsystem): Error message if fork is not available.
+
 2002-10-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* cutils.c (octave_sleep): Handle Windows, which may not have
 	sleep, but should have Sleep.
 
 	* oct-conf.h.in (OCTAVE_CONF_SED): Add an entry for SED.
 	* toplev.cc (octave_config_info): Likewise.
 	* Makefile.in (oct-gperf.h): Use $(SED), not sed.
diff --git a/src/cutils.c b/src/cutils.c
--- a/src/cutils.c
+++ b/src/cutils.c
@@ -19,62 +19,43 @@ along with Octave; see the file COPYING.
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <stdarg.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#if defined (__WIN32__) && ! defined (_POSIX_VERSION)
+
+#include <windows.h>
+
+#else
+
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
 #include "systime.h"
 
 #ifdef HAVE_POLL_H
 #include <poll.h>
 #elif HAVE_SYS_POLL_H
 #include <sys/poll.h>
 #endif
 
-#include <stdarg.h>
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-
-static void
-do_octave_usleep (unsigned int useconds)
-{
-#if defined (HAVE_USLEEP)
-
-  usleep (useconds);
-
-#elif defined (HAVE_SELECT)
-
-  struct timeval delay;
-
-  delay.tv_sec = 0;
-  delay.tv_usec = useconds;
-
-  select (0, 0, 0, 0, &delay);
-
-#elif defined (HAVE_POLL)
-
-  struct pollfd pfd;
-  int delay = useconds / 1000;
-
-  if (delay > 0)
-    poll (&fd, 0, delay);
-
 #endif
-}
 
 void
 octave_sleep (unsigned int seconds)
 {
 #if defined (__WIN32__) && ! defined (_POSIX_VERSION)
   Sleep (1000 * seconds);
 #else
   sleep (seconds);
@@ -83,19 +64,52 @@ octave_sleep (unsigned int seconds)
 
 void
 octave_usleep (unsigned int useconds)
 {
   unsigned int sec = useconds / 1000000;
   unsigned int usec = useconds % 1000000;
 
   if (sec > 0)
-    sleep (sec);
+    octave_sleep (sec);
+
+#if defined (__WIN32__) && ! defined (_POSIX_VERSION)
+
+  /* Round to the nearest millisecond, with a minimum of 1 millisecond
+     if usleep was called with a a non-zero value.  */
+
+  if (usec > 500)
+    Sleep ((usec+500)/1000);
+  else if (usec > 0)
+    Sleep (1);
+  else
+    Sleep (0);
+
+#elif defined (HAVE_USLEEP)
+
+  usleep (usec);
 
-  do_octave_usleep (usec);
+#elif defined (HAVE_SELECT)
+
+  struct timeval delay;
+
+  delay.tv_sec = 0;
+  delay.tv_usec = usec;
+
+  select (0, 0, 0, 0, &delay);
+
+#elif defined (HAVE_POLL)
+
+  struct pollfd pfd;
+  int delay = usec / 1000;
+
+  if (delay > 0)
+    poll (&fd, 0, delay);
+
+#endif
 }
 
 int
 octave_strcasecmp (const char *s1, const char *s2)
 {
   return strcasecmp (s1, s2);
 }
 
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -492,21 +492,17 @@ clc;\n\
 	  if (xisnan (dval))
 	    warning ("pause: NaN is an invalid delay");
 	  else if (xisinf (dval))
 	    {
 	      flush_octave_stdout ();
 	      octave_kbhit ();
 	    }
 	  else
-	    {
-	      int delay = NINT (dval);
-	      if (delay > 0)
-		octave_sleep (delay);
-	    }
+	    octave_sleep (dval);
 	}
     }
   else
     {
       flush_octave_stdout ();
       octave_kbhit ();
     }
 
@@ -525,21 +521,17 @@ Suspend the execution of the program for
     {
       double dval = args(0).double_value ();
 
       if (! error_state)
 	{
 	  if (xisnan (dval))
 	    warning ("sleep: NaN is an invalid delay");
 	  else
-	    {
-	      int delay = NINT (dval);
-	      if (delay > 0)
-		octave_sleep (delay);
-	    }
+	    octave_sleep (dval);
 	}
     }
   else
     print_usage ("sleep");
 
   return retval;
 }
 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -492,31 +492,35 @@ variable @code{status} to the integer @s
 	  odb = octave_env::getenv ("TEXMFDBS");
 
 	  unwind_protect::add (restore_texmfdbs_envvar, &odb);
 
 	  octave_env::putenv ("TEXMFDBS", octave_original_texmfdbs);
 
 	  if (type == async)
 	    {
+#ifdef HAVE_FORK
 	      pid_t pid = fork ();
 
 	      if (pid < 0) 
 		error ("system: fork failed -- can't create child process");
 	      else if (pid == 0)
 		{
 		  // XXX FIXME XXX -- should probably replace this
 		  // call with something portable.
 
 		  execl ("/bin/sh", "sh", "-c", cmd_str.c_str (), 0);
 
 		  panic_impossible ();
 		}
 	      else
 		retval(0) = static_cast<double> (pid);
+#else
+ 	      error ("asynchronous system calls are not supported");
+#endif
 	    }
 	  else if (return_output)
 	    retval = run_command_and_return_output (cmd_str);
 	  else
 	    {
 	      int status = system (cmd_str.c_str ());
 
 	      // The value in status is as returned by waitpid.  If
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -744,16 +744,32 @@ octave_vformat (std::ostream& os, const 
       free (s);
     }
 
 #endif
 
   return retval;
 }
 
+void
+octave_sleep (double seconds)
+{
+  if (seconds > 0)
+    {
+      double t;
+
+      unsigned int usec = modf (seconds, &t) * 1000000;
+
+      unsigned int sec = (t > UINT_MAX) ? UINT_MAX : (unsigned int) t;
+
+      octave_sleep (sec);
+      octave_usleep (usec);
+    }
+}
+
 static int
 treat_neg_dim_as_zero (void)
 {
   Vtreat_neg_dim_as_zero = check_preference ("treat_neg_dim_as_zero");
 
   return 0;
 }
 
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -68,20 +68,22 @@ get_dimensions (const octave_value& a,
 		const char *warn_for, int& nr, int& nc);
 
 extern int
 octave_format (std::ostream& os, const char *fmt, ...);
 
 extern int
 octave_vformat (std::ostream& os, const char *fmt, va_list args);
 
-extern "C" void octave_usleep (unsigned int useconds);
+extern void octave_sleep (double seconds);
 
 extern "C" void octave_sleep (unsigned int seconds);
 
+extern "C" void octave_usleep (unsigned int useconds);
+
 extern "C" int octave_strcasecmp (const char *s1, const char *s2);
 
 extern "C" int octave_strncasecmp (const char *s1, const char *s2, size_t n);
 
 extern "C" char *octave_snprintf (const char *fmt, ...);
 
 extern "C" char *octave_vsnprintf (const char *fmt, va_list args);
 
