# HG changeset patch
# User Rik <rik@octave.org>
# Date 1524619942 25200
#      Tue Apr 24 18:32:22 2018 -0700
# Node ID 74fbe0d91994f61ea8d076276d93c8ce33b40008
# Parent  d73dfd34230bb6fd8872400feb0908c61ec8d42a
# Parent  f2eb8bfcccb63fbcf0d9ee3a9c8eb21f4ee96d74
maint: merge stable to default.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -3388,17 +3388,17 @@ Return true if @var{x} is a Java object.
 %! assert (n.toString (), "1");
 
 %!testif HAVE_JAVA; usejava ("jvm") <51804>
 %! n = javaObject ("java.lang.Integer", 1.35);
 %! assert (n.compareTo (0), 1);
 %! assert (n.compareTo (1), 0);
 %! assert (n.compareTo (2), -1);
 
-%!testif HAVE_JAVA; usejava ("jvm")
+%!testif HAVE_JAVA; usejava ("jvm") <51804>
 %! n = javaObject ("java.lang.Short", 1.35);
 %! assert (n.compareTo (0), 1);
 %! assert (n.compareTo (1), 0);
 %! assert (n.compareTo (2), -1);
 
 %!testif HAVE_JAVA; usejava ("jvm")
 %! n = javaObject ("java.lang.Byte", int8 (17));
 %! assert (n.compareTo (int8 (20)), -3);
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -436,16 +436,17 @@ function [local_packages, global_package
 
             endfor
           endif
         endif
         install (files, deps, prefix, archprefix, verbose, local_list,
                  global_list, global_install);
 
       unwind_protect_cleanup
+        cellfun ("unlink", local_files);
         if (exist (tmp_dir, "file"))
           rmdir (tmp_dir, "s");
         endif
       end_unwind_protect
 
     case "uninstall"
       if (isempty (files))
         error ("pkg: uninstall action requires at least one package name");
diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -146,42 +146,48 @@
 ##   @item canvas
 ##     Javascript-based drawing on HTML5 canvas viewable in a web browser
 ## (only available for the Gnuplot graphics toolkit).
 ##
 ##   @item  cdr
 ##   @itemx @nospell{corel}
 ##     @nospell{CorelDraw}
 ##
+##   @item cgm
+##     Computer Graphics Metafile, Version 1, ANSI X3.122-1986
+## (only available for the Gnuplot graphics toolkit).
+##
 ##   @item dxf
 ##     AutoCAD
 ##
 ##   @item  emf
 ##   @itemx meta
 ##     Microsoft Enhanced Metafile
 ##
 ##   @item fig
 ##     XFig.  For the Gnuplot graphics toolkit, the additional options
 ## @option{-textspecial} or @option{-textnormal} can be used to control
 ## whether the special flag should be set for the text in the figure.
 ## (default is @option{-textnormal})
 ##
 ##   @item gif
-##     GIF image (only available for the Gnuplot graphics toolkit)
+##     GIF image
+## (only available for the Gnuplot graphics toolkit).
 ##
 ##   @item hpgl
 ##     HP plotter language
 ##
 ##   @item  jpg
 ##   @itemx jpeg
 ##     JPEG image
 ##
 ##   @item latex
-##     @LaTeX{} picture environment (only available for the Gnuplot graphics
-## toolkit).
+##   @itemx eepic
+##     @LaTeX{} picture environment and extended picture environment
+## (only available for the Gnuplot graphics toolkit).
 ##
 ##   @item mf
 ##     Metafont
 ##
 ##   @item png
 ##     Portable network graphics
 ##
 ##   @item pbm
diff --git a/scripts/plot/util/private/__gnuplot_print__.m b/scripts/plot/util/private/__gnuplot_print__.m
--- a/scripts/plot/util/private/__gnuplot_print__.m
+++ b/scripts/plot/util/private/__gnuplot_print__.m
@@ -40,22 +40,25 @@ function opts = __gnuplot_print__ (opts)
       opts.fontsize = defaultfontsize;
     else
       opts.fontsize = axesfontsize;
     endif
   endif
   ## The axes-label and tick-label spacing is determined by
   ## the font spec given in "set terminal ..."
   gp_opts = font_spec (opts);
-  bg = get (opts.figure, "color");
-  if (isnumeric (bg))
-    gp_opts = sprintf ('%s background rgb "#%02x%02x%02x"',
-                       gp_opts, round (255 * bg));
-  else
-    gp_opts = sprintf ("%s nobackground", gp_opts);
+  if (! any (strcmpi (opts.devopt, {"fig", "dxf", "hpgl", "mf", "pstricks", ...
+                                    "texdraw", "latex", "eepic"})))
+    bg = get (opts.figure, "color");
+    if (isnumeric (bg))
+      gp_opts = sprintf ('%s background rgb "#%02x%02x%02x"',
+                         gp_opts, round (255 * bg));
+    else
+      gp_opts = sprintf ("%s nobackground", gp_opts);
+    endif
   endif
 
   pipeline = "";
 
   switch (lower (opts.devopt))
     case {"eps", "eps2", "epsc", "epsc2"}
       if (any (strcmp (opts.devopt, {"eps", "epsc"})))
         gp_opts = [gp_opts " level1"];
@@ -139,17 +142,18 @@ function opts = __gnuplot_print__ (opts)
       endif
       if (__gnuplot_has_terminal__ (term))
         local_drawnow ([term " " gp_opts], opts.name, opts);
       else
         error (sprintf ("print:no%soutput", opts.devopt),
                "print.m: '%s' output is not available for gnuplot-%s",
                upper (opts.devopt), __gnuplot_version__ ());
       endif
-    case {"canvas", "dxf", "hpgl", "latex", "mf", "gif", "pstricks", "texdraw"}
+    case {"canvas", "cgm", "dxf", "hpgl", "latex", "mf", "gif", ...
+          "pstricks", "texdraw"}
       if (__gnuplot_has_terminal__ (opts.devopt))
         local_drawnow ([opts.devopt " " gp_opts], opts.name, opts);
       else
         error (sprintf ("print:no%soutput", opts.devopt),
                "print.m: '%s' output is not available for gnuplot-%s",
                upper (opts.devopt), __gnuplot_version__ ());
       endif
     case opts.ghostscript.device
@@ -241,41 +245,37 @@ function f = font_spec (opts, varargin)
   f = "";
   switch (opts.devopt)
     case "cgm"
       if (! isempty (opts.font) && ! isempty (opts.fontsize))
         f = sprintf ('font "%s,%d"', opts.font, opts.fontsize);
       elseif (! isempty (opts.font))
         f = sprintf ('font "%s"', opts.font);
       elseif (! isempty (opts.fontsize))
-        f = sprintf ("%d", opts.fontsize);
+        f = sprintf ('font ",%d"', opts.fontsize);
       endif
     case {"eps", "eps2", "epsc", "epsc2"}
       ## Gnuplot renders fonts as half their specification, which
       ## results in a tight spacing for the axes-labels and tick-labels.
       ## Compensate for the half scale.  This will produce the proper
       ## spacing for the requested fontsize.
       if (! isempty (opts.font) && ! isempty (opts.fontsize))
         f = sprintf ('font "%s,%d"', opts.font, 2 * opts.fontsize);
       elseif (! isempty (opts.font))
         f = sprintf ('font "%s"', opts.font);
       elseif (! isempty (opts.fontsize))
-        f = sprintf ("%d", 2 * opts.fontsize);
+        f = sprintf ('font ",%d"', 2 * opts.fontsize);
       endif
     case "svg"
-      ## FIXME: Why does svg format use round on the fontsize while
-      ##        other terminals don't?
       if (! isempty (opts.font) && ! isempty (opts.fontsize))
-        fontsize = round (opts.fontsize * 0.75);
-        f = sprintf ('fname "%s" fsize %d', opts.font, fontsize);
+        f = sprintf ('font "%s,%d"', opts.font, opts.fontsize * 0.75);
       elseif (! isempty (opts.font))
-        f = sprintf ('fname "%s"', opts.font);
+        f = sprintf ('font "%s"', opts.font);
       elseif (! isempty (opts.fontsize))
-        fontsize = round (opts.fontsize * 0.75);
-        f = sprintf ("fsize %d", fontsize);
+        f = sprintf ('font ",%d"', opts.fontsize * 0.75);
       endif
     case "pdf"
       if (! isempty (opts.font) && ! isempty (opts.fontsize))
         f = sprintf ('font "%s,%d"', opts.font, opts.fontsize);
       elseif (! isempty (opts.font))
         f = sprintf ('font "%s"', opts.font);
       elseif (! isempty (opts.fontsize))
         f = sprintf ('font ",%d"', opts.fontsize);
@@ -300,49 +300,49 @@ function f = font_spec (opts, varargin)
         f = sprintf ('font ",%d"', opts.fontsize);
       endif
     case "pslatex"
       if (! isempty (opts.fontsize))
         f = sprintf ("%d", opts.fontsize);
       endif
     case {"gif", "jpeg", "png"}
       if (! isempty (opts.font) && ! isempty (opts.fontsize))
-        f = sprintf ('font "%s ,%d"', opts.font, opts.fontsize);
+        f = sprintf ('font "%s,%d"', opts.font, opts.fontsize);
       elseif (! isempty (opts.font))
         f = sprintf ('font "%s"', opts.font);
       elseif (! isempty (opts.fontsize))
         f = sprintf ('font ",%d"', opts.fontsize);
       endif
     case "emf"
       if (! isempty (opts.font) && ! isempty (opts.fontsize))
-        f = sprintf ('"%s" %d', opts.font, opts.fontsize);
+        f = sprintf ('font "%s,%d"', opts.font, opts.fontsize);
       elseif (! isempty (opts.font))
-        f = sprintf ('"%s"', opts.font);
+        f = sprintf ('font "%s"', opts.font);
       elseif (! isempty (opts.fontsize))
-        f = sprintf ("%d", opts.fontsize);
+        f = sprintf ('font ",%d"', opts.fontsize);
       endif
     case "canvas"
       if (! isempty (opts.fontsize))
-        f = sprintf ("fsize %d", opts.fontsize);
+        f = sprintf ('font ",%d"', opts.fontsize);
       endif
     case {"aifm", "corel"}
       if (! isempty (opts.font) && ! isempty (opts.fontsize))
-        f = sprintf ("%s %d", opts.font, opts.fontsize);
+        f = sprintf ('font "%s,%d"', opts.font, opts.fontsize);
       elseif (! isempty (opts.font))
-        f = sprintf ("%s", opts.font);
+        f = sprintf ('font "%s"', opts.font);
       elseif (! isempty (opts.fontsize))
-        f = sprintf ("%d", opts.fontsize);
+        f = sprintf ('font ",%d"', opts.fontsize);
       endif
     case "fig"
       if (! isempty (opts.font) && ! isempty (opts.fontsize))
-        f = sprintf ("font %s fontsize %d", opts.font, opts.fontsize);
+        f = sprintf ('font "%s,%d"', opts.font, opts.fontsize);
       elseif (! isempty (opts.font))
-        f = sprintf ("font %s", opts.font);
+        f = sprintf ('font "%s"', opts.font);
       elseif (! isempty (opts.fontsize))
-        f = sprintf ("fontsize %d", opts.fontsize);
+        f = sprintf ('font ",%d"', opts.fontsize);
       endif
   endswitch
 
 endfunction
 
 
 function [h, fontsize] = get_figure_text_objs (opts)
 
diff --git a/scripts/plot/util/private/__print_parse_opts__.m b/scripts/plot/util/private/__print_parse_opts__.m
--- a/scripts/plot/util/private/__print_parse_opts__.m
+++ b/scripts/plot/util/private/__print_parse_opts__.m
@@ -220,31 +220,33 @@ function arg_st = __print_parse_opts__ (
               "emf", "pdf", "pslatex", "epslatex", "epslatexstandalone", ...
               "pslatexstandalone", "pdflatexstandalone", ...
               "pstex", "tiff", "tiffn" "tikz", "pcxmono", ...
               "pcx24b", "pcx256", "pcx16", "pgm", "pgmraw", ...
               "ppm", "ppmraw", "pdflatex", "texdraw", ...
               "epscairo", "pdfcairo", "pngcairo", "cairolatex", ...
               "pdfcairolatex", "pdfcairolatexstandalone", ...
               "epscairolatex", "epscairolatexstandalone", "pstricks", ...
-              "epswrite", "eps2write", "pswrite", "ps2write", "pdfwrite"};
+              "epswrite", "eps2write", "pswrite", "ps2write", "pdfwrite", ...
+              "canvas", "cgm", "latex", "eepic"};
 
   persistent suffixes = {"ai", "cdr", "fig", "png", "jpg", ...
               "gif", "pbm", "pbm", "dxf", "mf", ...
               "svg", "hpgl", "ps", "ps", "ps", ...
               "ps", "eps", "eps", "eps", "eps", ...
               "emf", "pdf", "tex", "tex", "tex", ...
               "tex", "tex", ...
               "ps", "tiff", "tiff", "tikz", "pcx", ...
               "pcx", "pcx", "pcx", "pgm", "pgm", ...
               "ppm", "ppm", "tex", "tex", ...
               "eps", "pdf", "png", "tex", ...
               "tex", "tex", ...
               "tex", "tex", "tex", ...
-              "eps", "eps", "ps", "ps", "pdf"};
+              "eps", "eps", "ps", "ps", "pdf", ...
+              "js", "cgm", "tex", "tex"};
 
   if (isfigure (arg_st.figure))
     __graphics_toolkit__ = get (arg_st.figure, "__graphics_toolkit__");
   else
     ## Allow tests when no figures are present.
     __graphics_toolkit__ = get (0, "defaultfigure__graphics_toolkit__");
   endif
 
