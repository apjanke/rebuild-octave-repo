# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497658169 25200
#      Fri Jun 16 17:09:29 2017 -0700
# Node ID 65e5ddf6d05956c2132650778c308f97c88b6631
# Parent  4feed155a1f27735beb74687cf86bdcad76e08b1
Use cbrt, cbrtf from C++ std library.
These functions are guaranteed to be part of C++11 standard library.

* configure.ac: Remove AC_CHECK_FUNCS for cbrt, cbrtf.

* lo-specfun.cc (cbrt, cbrtf): Map functions onto std::XXX of the same name.
* lo-specfun.cc (xcbrt): Delete unused function.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2450,17 +2450,16 @@ OCTAVE_CHECK_FUNC_COMPLEX(acosh)
 OCTAVE_CHECK_FUNC_COMPLEX(asin)
 OCTAVE_CHECK_FUNC_COMPLEX(asinh)
 OCTAVE_CHECK_FUNC_COMPLEX(atan)
 OCTAVE_CHECK_FUNC_COMPLEX(atanh)
 
 ## Check for nonstandard, but common math functions, that we need.
 
 dnl Use multiple AC_CHECKs to avoid line continuations '\' in list
-AC_CHECK_FUNCS([cbrt cbrtf])
 AC_CHECK_FUNCS([erf erff erfc erfcf exp2f hypotf _hypotf log2 log2f])
 
 ## Check for math defines such as M_LN2 in math.h
 AC_CACHE_CHECK([for MATH DEFINES in math.h],
   [octave_cv_header_math_defines],
   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
     #include <math.h>
     ]], [[
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -573,41 +573,17 @@ namespace octave
                             atan2 (1 + r, i));
         }
       else
         retval = std::log (Complex (1) + x);
 
       return retval;
     }
 
-    template <typename T>
-    T
-    xcbrt (T x)
-    {
-      static const T one_third = 0.3333333333333333333f;
-      if (octave::math::isfinite (x))
-        {
-          // Use pow.
-          T y = std::pow (std::abs (x), one_third) * signum (x);
-          // Correct for better accuracy.
-          return (x / (y*y) + y + y) / 3;
-        }
-      else
-        return x;
-    }
-
-    double
-    cbrt (double x)
-    {
-#if defined (HAVE_CBRT)
-      return ::cbrt (x);
-#else
-      return xxcbrt (x);
-#endif
-    }
+    double cbrt (double x) { return std::cbrt (x); }
 
     float
     log1p (float x)
     {
 #if defined (HAVE_LOG1PF)
       return log1pf (x);
 #else
       float retval;
@@ -644,25 +620,17 @@ namespace octave
                                  atan2 (1 + r, i));
         }
       else
         retval = std::log (FloatComplex (1) + x);
 
       return retval;
     }
 
-    float
-    cbrt (float x)
-    {
-#if defined (HAVE_CBRTF)
-      return cbrtf (x);
-#else
-      return xxcbrt (x);
-#endif
-    }
+    float cbrt (float x) { return std::cbrtf (x); }
 
     static inline Complex
     zbesj (const Complex& z, double alpha, int kode, octave_idx_type& ierr);
 
     static inline Complex
     zbesy (const Complex& z, double alpha, int kode, octave_idx_type& ierr);
 
     static inline Complex
