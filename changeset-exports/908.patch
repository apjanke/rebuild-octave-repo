# HG changeset patch
# User jwe
# Date 784422269 0
#      Wed Nov 09 23:04:29 1994 +0000
# Node ID efb4cbdaac262ab74f8f64fbbe4cb39b0231469e
# Parent  c37f41df305f1b77bc0e32d51a95ce33c459c361
[project @ 1994-11-09 23:03:37 by jwe]

diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -948,49 +948,50 @@ func_def2	: identifier safe local_symtab
 //			error ("invalid use of reserved word %s", id_name);
 //			ABORT_PARSE;
 //		      }
 
 // If input is coming from a file, issue a warning if the name of the
 // file does not match the name of the function stated in the file.
 // Matlab doesn't provide a diagnostic (it ignores the stated name).
 
+		    $4->stash_function_name (id_name);
+
 		    if (reading_fcn_file)
 		      {
 			if (strcmp (curr_fcn_file_name, id_name) != 0)
 			  {
 			    warning ("function name `%s' does not agree\
  with function file name `%s.m'", id_name, curr_fcn_file_name);
 
 			    global_sym_tab->rename (id_name,
 						    curr_fcn_file_name);
 
 			    if (error_state)
 			      ABORT_PARSE;
 
 			    id_name = $1->name ();
 			  }
 
+			$4->stash_function_name (id_name);
 			$4->stash_fcn_file_name ();
 			$4->stash_fcn_file_time (time (0));
 			$4->mark_as_system_fcn_file ();
 		      }
 		    else if (! (input_from_tmp_history_file
 				|| input_from_startup_file)
 			     && reading_script_file
 			     && strcmp (curr_fcn_file_name, id_name) == 0)
 		      {
 			warning ("function `%s' defined within\
  script file `%s.m'", id_name, curr_fcn_file_name);
 		      }
 
 		    top_level_sym_tab->clear (id_name);
 
-		    $4->stash_function_name (id_name);
-
 		    $1->define ($4);
 		    $1->document (help_buf);
 
 		    $$ = $4;
 		  }
 		;
 
 func_def3	: param_list optsep opt_list fcn_end_or_eof
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -715,26 +715,47 @@ file_in_path (const char *name, const ch
 }
 
 // See if there is an function file in the path.  If so, return the
 // full path to the file.
 
 char *
 fcn_file_in_path (const char *name)
 {
-  return file_in_path (name, ".m");
+  if (name)
+    {
+      int len = strlen (name);
+
+      if (name [len - 2] == '.' && name [len - 1] == 'm')
+	return file_in_path (name, "");
+      else
+	return file_in_path (name, ".m");
+    }
+  else
+    return 0;
 }
 
 // See if there is an octave file in the path.  If so, return the
 // full path to the file.
 
 char *
 oct_file_in_path (const char *name)
 {
-  return file_in_path (name, ".oct");
+  if (name)
+    {
+      int len = strlen (name);
+
+      if (name [len - 4] == '.' && name [len - 3] == 'o'
+	  && name [len - 2] == 'c' && name [len - 1] == 't')
+	return file_in_path (name, "");
+      else
+	return file_in_path (name, ".oct");
+    }
+  else
+    return 0;
 }
 
 char *
 undo_string_escape (char c)
 {
   static char retval[2];
   retval[1] = '\0';
 
