# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1532286249 -7200
#      Sun Jul 22 21:04:09 2018 +0200
# Node ID be7ba25bb5bf3dddf4717e289106f7b57c9758c3
# Parent  6541a0de38e1965da7199151c75ade93554dbc62
Fix Windows cross-build after 85c3e315bd43.

* sysdep.cc: Don't make "get_regkey_value" static (is used in ov-java.cc). Fix
ambiguous function name error.

* oct-procbuf.cc (open, close): Use function names in octave namespace.

diff --git a/libinterp/corefcn/oct-procbuf.cc b/libinterp/corefcn/oct-procbuf.cc
--- a/libinterp/corefcn/oct-procbuf.cc
+++ b/libinterp/corefcn/oct-procbuf.cc
@@ -73,17 +73,17 @@ static octave_procbuf *octave_procbuf_li
 octave_procbuf *
 octave_procbuf::open (const char *command, int mode)
 {
 #if defined (__CYGWIN__) || defined (__MINGW32__) || defined (_MSC_VER)
 
   if (is_open ())
     return 0;
 
-  f = (octave_popen (command, (mode & std::ios::in) ? "r" : "w"));
+  f = (octave::popen (command, (mode & std::ios::in) ? "r" : "w"));
 
   if (! f)
     return 0;
 
   // Oops... popen doesn't return the associated pid, so fake it for now
 
   proc_pid = 1;
 
@@ -178,17 +178,17 @@ octave_procbuf::open (const char *comman
 
 octave_procbuf *
 octave_procbuf::close (void)
 {
 #if defined (__CYGWIN__) || defined (__MINGW32__) || defined (_MSC_VER)
 
   if (f)
     {
-      wstatus = octave_pclose (f);
+      wstatus = octave::pclose (f);
       f = 0;
     }
 
   open_p = false;
 
   return this;
 
 #elif defined (HAVE_UNISTD_H)
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -526,17 +526,17 @@ namespace octave
 #else
     return ::popen (command, mode);
 #endif
   }
 
   int pclose (FILE *f)
   {
 #if defined (__MINGW32__) || defined (_MSC_VER)
-    return _pclose (f);
+    return ::_pclose (f);
 #else
     return ::pclose (f);
 #endif
   }
 
   // Read one character from the terminal.
 
   int kbhit (bool wait)
@@ -722,17 +722,17 @@ occurred.
 #if defined (OCTAVE_USE_WINDOWS_API)
 
 static void
 reg_close_key_wrapper (HKEY key)
 {
   RegCloseKey (key);
 }
 
-static LONG
+LONG
 get_regkey_value (HKEY h_rootkey, const std::string subkey,
                   const std::string name, octave_value& value)
 {
   LONG result;
   HKEY h_subkey;
 
   result = RegOpenKeyExW (h_rootkey,
                           octave::sys::u8_to_wstring (subkey).c_str (), 0,
