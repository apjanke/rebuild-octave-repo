# HG changeset patch
# User jwe
# Date 761387589 0
#      Wed Feb 16 08:33:09 1994 +0000
# Node ID 5c987c27f3d76f9f536361816a74fc34b7c850d2
# Parent  04d37703373010ab3a3312288dc7fec0f2bf7032
[project @ 1994-02-16 08:33:09 by jwe]

diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -137,17 +137,16 @@ file_info::fptr (void) const
 }
 
 const char *
 file_info::mode (void) const
 {
   return file_mode;
 }
 
-
 // double linked list containing relevant information about open files
 static DLList <file_info> file_list;
 
 void
 initialize_file_io (void)
 {
   file_info octave_stdin (0, "stdin", stdin, "r");
   file_info octave_stdout (1, "stdout", stdout, "w");
@@ -224,16 +223,47 @@ fopen_file_for_user (const tree_constant
 	}
     }
 
   error ("problems automatically opening file for user");
 
   return (Pix) NULL;
 }
 
+static Pix
+file_io_get_file (const tree_constant arg, const char *mode,
+		  const char *warn_for)
+{
+  Pix p = return_valid_file (arg);
+
+  if (p == (Pix) NULL)
+    {
+      if (arg.is_string_type ())
+	{
+	  char *name = arg.string_value ();
+
+	  struct stat buffer;
+	  int status = stat (name, &buffer);
+
+	  if (status == 0)
+	    {
+	      if ((buffer.st_mode & S_IFREG) == S_IFREG)
+		p = fopen_file_for_user (arg, mode);
+	      else
+		error ("%s: invalid file type", warn_for);
+	    }
+	  else
+	    error ("%s: can't stat file `%s'", warn_for, name);
+	}
+      else
+	error ("%s: invalid file specifier", warn_for);
+    }
+
+  return p;
+}
 
 tree_constant *
 fclose_internal (const tree_constant *args)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   Pix p = return_valid_file (args[1]);
 
@@ -316,53 +346,35 @@ valid_mode (const char *mode)
   return 0;
 }
 
 tree_constant *
 fgets_internal (const tree_constant *args, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
-  Pix p = return_valid_file (args[1]);
+  Pix p = file_io_get_file (args[1], "r", "fgets");
   
   if (p == (Pix) NULL)
-    {
-      if (args[1].is_string_type ())
-	{
-	  struct stat buffer;
-	  char *name = args[1].string_value ();
-	  if (stat (name, &buffer) == 0
-	      && (buffer.st_mode & S_IFREG) == S_IFREG)
-	    {
-	      p = fopen_file_for_user (args[1], "r");
-	    }
-	  else
-	    {
-	      error ("fgets: file dosen't exist");
-	      return retval;
-	    }
-	}
-      else
-	return retval;
-    }
-  
+    return retval;
+
   int length = 0;
-
   if (args[2].is_scalar_type ())
     {
       length = (int) args[2].double_value ();
       if ((double) NINT (length) != length)
 	{
 	  error ("fgets: length not an integer value");
 	  return retval;
 	}
     }
 
+  file_info file = file_list (p);
+
   char string[length+1];
-  file_info file = file_list (p);
   char *success = fgets (string, length+1, file.fptr ());
 
   if (success == (char *) NULL)
     {
       retval = new tree_constant[2];
       retval[0] = tree_constant (-1.0);
       return retval;
     }
@@ -468,35 +480,36 @@ freport_internal (void)
   return retval;
 }
 
 tree_constant *
 frewind_internal (const tree_constant *args)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
-  Pix p = return_valid_file (args[1]);
-  if (p == (Pix) NULL)
-    p = fopen_file_for_user (args[1], "a+");   
+  Pix p = file_io_get_file (args[1], "a+", "frewind");
 
-  file_info file = file_list (p);
-  rewind (file.fptr ());
+  if (p != (Pix) NULL)
+    {
+      file_info file = file_list (p);
+      rewind (file.fptr ());
+    }
 
   return retval;
 }
 
 tree_constant *
 fseek_internal (const tree_constant *args, int nargin)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
-  Pix p = return_valid_file (args[1]);
+  Pix p = file_io_get_file (args[1], "a+", "fseek");
 
   if (p == (Pix) NULL)
-    p = fopen_file_for_user (args[1], "a+");
+    return retval;
 
   long origin = SEEK_SET;
   long offset = 0;
   if (args[2].is_scalar_type ())
     {
       offset = (long) args[2].double_value ();
       if ((double) NINT (offset) != offset)
 	{
@@ -536,28 +549,29 @@ fseek_internal (const tree_constant *arg
 
   return retval;
 }
 
 tree_constant *
 ftell_internal (const tree_constant *args)
 {
   tree_constant *retval = NULL_TREE_CONST;
-  Pix p = return_valid_file (args[1]);
 
-  if (p == (Pix) NULL)
-    p = fopen_file_for_user (args[1], "a+");
+  Pix p = file_io_get_file (args[1], "a+", "ftell");
 
-  file_info file = file_list (p);
-  long offset = ftell (file.fptr ());
-  retval = new tree_constant[2];
-  retval[0] = tree_constant ((double) offset);
+  if (p != (Pix) NULL)
+    {
+      file_info file = file_list (p);
+      long offset = ftell (file.fptr ());
+      retval = new tree_constant[2];
+      retval[0] = tree_constant ((double) offset);
 
-  if (offset == -1L)
-    error ("ftell: write error");
+      if (offset == -1L)
+	error ("ftell: write error");
+    }
 
   return retval;
 }
 
 void
 close_files (void)
 {
   Pix p = file_list.first ();
@@ -780,54 +794,42 @@ do_printf (const char *type, const tree_
 {
   tree_constant *retval = NULL_TREE_CONST;
   fmt_arg_count = 1;
   char *fmt;
   file_info file;
 
   if (strcmp (type, "fprintf") == 0)
     {
-      Pix p;
-
       if (args[2].is_string_type ())
 	{
 	  fmt = args[2].string_value ();
 	  fmt_arg_count++;
 	}
       else
 	{
 	  error ("%s: format must be a string", type);
 	  return retval;
 	}
 
-      if (args[1].is_scalar_type ())
-	{
-	  p = return_valid_file (args[1]);
-	  if (p == (Pix) NULL)
-	    return retval;
-	}
-      else if (args[1].is_string_type ())
-	{
-	  p = return_valid_file (args[1]);
-	  if (p == (Pix) NULL)
-	    p = fopen_file_for_user (args[1], "a+");
-	}
-      else
-	  {
-	    error ("%s: invalid file specifier", type);
-	    return retval;
-	  }
+      Pix p = file_io_get_file (args[1], "a+", type);
+
+      if (p == (Pix) NULL)
+	return retval;
 
       file = file_list (p);
+
       if (file.mode () == "r")
 	{
 	  error ("%s: file is read only", type);
 	  return retval;
 	}
+
       fmt = args[2].string_value ();
+
       fmt_arg_count++;
     }
   else if (args[1].is_string_type ())
     {
       fmt = args[1].string_value ();
       fmt_arg_count++;
     }
   else
@@ -891,24 +893,22 @@ do_printf (const char *type, const tree_
       retval[0] = tree_constant (msg);
       delete [] msg;
     }
 
   return retval;
 }
 
 static int
-process_scanf_format (const char *s, const tree_constant *args,
-		      ostrstream& fmt, const char *type, int nargout,
-		      FILE* fptr, tree_constant *values)
+process_scanf_format (const char *s, ostrstream& fmt,
+		      const char *type, int nargout, FILE* fptr,
+		      tree_constant *values)
 {
   fmt << "%";
 
-  tree_constant_rep::constant_type arg_type;
-
   int chars_from_fmt_str = 0;
   int store_value = 1;
   int string_width = -1;
   int success = 1;
 
   if (*s == '*')
     {
       store_value = 0;
@@ -938,23 +938,21 @@ process_scanf_format (const char *s, con
     {
       chars_from_fmt_str++;
       s++;
     }
 
   if (*s == '\0')
     goto invalid_format;
 
-  if (fmt_arg_count >= nargout && store_value)
-    {
-      error ("%s: not enough arguments", type);
-      return -1;
-    }
+// Even if we don't have a place to store them, attempt to convert
+// everything specified by the format string.
 
-  arg_type = args[fmt_arg_count].const_type ();
+  if (fmt_arg_count >= nargout)
+    store_value = 0;
 
   switch (*s)
     {
     case 'd': case 'i': case 'o': case 'u': case 'x': case 'X':
       {
 	chars_from_fmt_str++;
 	fmt << *s << ends;
 	int temp;
@@ -1028,20 +1026,19 @@ process_scanf_format (const char *s, con
 	if (success > 0 && store_value)
 	  values[fmt_arg_count++] = tree_constant (temp);
       }
       break;
     default:
       goto invalid_format;
     }
 
-  if (success > 0 || (success == 0 && store_value == 0))
+  if (success > 0)
     return chars_from_fmt_str;
-
-  if (success == 0)
+  else if (success == 0)
     warning ("%s: invalid conversion", type);
   else if (success == EOF)
     {
       if (strcmp (type, "fscanf") == 0)
 	warning ("%s: end of file reached before final conversion", type);
       else if (strcmp (type, "sscanf") == 0)
 	warning ("%s: end of string reached before final conversion", type);
       else if (strcmp (type, "scanf") == 0)
@@ -1065,55 +1062,47 @@ do_scanf (const char *type, const tree_c
   int tmp_file_open = 0;
   FILE *fptr = (FILE *) NULL;
   file_info file;
 
   fmt_arg_count = 0;
 
   if (strcmp (type, "scanf") != 0)
     {
-      if ( args[2].is_string_type ())
+      if (args[2].is_string_type ())
 	scanf_fmt = args[2].string_value ();
       else
 	{
 	  error ("%s: format must be a string", type);
 	  return retval;
 	}
     }
 
   int doing_fscanf = (strcmp (type, "fscanf") == 0);
 
   if (doing_fscanf)
     {
-      Pix p;
-      if (args[1].is_scalar_type ()
-	  || args[1].is_string_type ())
-	{
-	  p = return_valid_file (args[1]);
-	  if (p == (Pix) NULL)
-	    return retval;
-	}
-      else
-	{
-	  error ("%s: invalid file specifier", type);
-	  return retval;
-	}
+      Pix p = file_io_get_file (args[1], "r", type);
+
+      if (p == (Pix) NULL)
+	return retval;
 
       file = file_list (p);
 
       if (strcmp (file.mode (), "w") == 0 || strcmp (file.mode (), "a") == 0)
 	{
 	  error ("%s: this file is opened for writing only", type);
 	  return retval;
 	}
 
       fptr = file.fptr ();
     }
 
-  if (args[1].is_string_type () || (doing_fscanf && file.number () == 0))
+  if ((fptr == (FILE *) NULL && args[1].is_string_type ())
+      || (doing_fscanf && file.number () == 0))
     {
       char *string;
 
       if (strcmp (type, "scanf") == 0)
 	scanf_fmt = args[1].string_value ();
 
       if (strcmp (type, "scanf") == 0
 	  || (doing_fscanf && file.number () == 0))
@@ -1176,18 +1165,18 @@ do_scanf (const char *type, const tree_c
 	{
 	  ptr++;
 	  fmt << c;
 	  continue;
 	}
 
 // We must be looking at a format specifier.  Extract it or fail.
 
-      int status = process_scanf_format (ptr, args, fmt, type,
-					 nargout, fptr, retval);
+      int status = process_scanf_format (ptr, fmt, type, nargout,
+					 fptr, retval);
 
       if (status < 0)
 	{
 	  if (fmt_arg_count == 0)
 	    {
 	      delete [] retval;
 	      retval = NULL_TREE_CONST;
 	    }
