# HG changeset patch
# User Doug Stewart <doug.dastew@gmail.com
# Date 1423517093 18000
#      Mon Feb 09 16:24:53 2015 -0500
# Node ID 8724af455b113d88e3d64341b72d81de68de2ab5
# Parent  8064b5cdbc11a25498da5189c0830827bde08c4f
freqz.m: Add 1 more point to the plot output (bug #438950).

* freqz.m: Add 1 more point to the plot output.  Use better input validation.

diff --git a/scripts/signal/freqz.m b/scripts/signal/freqz.m
--- a/scripts/signal/freqz.m
+++ b/scripts/signal/freqz.m
@@ -17,17 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{h}, @var{w}] =} freqz (@var{b}, @var{a}, @var{n}, "whole")
 ## @deftypefnx {Function File} {[@var{h}, @var{w}] =} freqz (@var{b})
 ## @deftypefnx {Function File} {[@var{h}, @var{w}] =} freqz (@var{b}, @var{a})
 ## @deftypefnx {Function File} {[@var{h}, @var{w}] =} freqz (@var{b}, @var{a}, @var{n})
 ## @deftypefnx {Function File} {@var{h} =} freqz (@var{b}, @var{a}, @var{w})
-## @deftypefnx {Function File} {[@dots{}] =} freqz (@dots{}, @var{Fs})
+## @deftypefnx {Function File} {[@var{h}, @var{w}] =} freqz (@dots{}, @var{Fs})
 ## @deftypefnx {Function File} {} freqz (@dots{})
 ##
 ## Return the complex frequency response @var{h} of the rational IIR filter
 ## whose numerator and denominator coefficients are @var{b} and @var{a},
 ## respectively.  The response is evaluated at @var{n} angular frequencies
 ## between 0 and
 ## @ifnottex
 ## 2*pi.
@@ -92,22 +92,28 @@ function [h_r, f_r] = freqz (b, a, n, re
     if (! ischar (region) && ! isempty (region))
       Fs = region;
       region = [];
     endif
   endif
 
   if (isempty (b))
     b = 1;
+  elseif (! isvector (b))
+    error ("freqz: B must be a vector");
   endif
   if (isempty (a))
     a = 1;
+  elseif (! isvector (a))
+    error ("freqz: A must be a vector");
   endif
   if (isempty (n))
     n = 512;
+  elseif (isscalar (n) && n < 1)
+    error ("freqz: N must be a positive integer");
   endif
   if (isempty (region))
     if (isreal (b) && isreal (a))
       region = "half";
     else
       region = "whole";
     endif
   endif
@@ -116,16 +122,18 @@ function [h_r, f_r] = freqz (b, a, n, re
     if (nargout == 0)
       Fs = 2;
     else
       Fs = 2*pi;
     endif
   else
     freq_norm = false;
   endif
+  plot_output = (nargout == 0);
+  whole_region = strcmp (region, "whole");
 
   a = a(:);
   b = b(:);
 
   if (! isscalar (n))
     ## Explicit frequency vector given
     w = f = n;
     if (nargin == 4)
@@ -142,47 +150,57 @@ function [h_r, f_r] = freqz (b, a, n, re
     ## polyval is much higher and the little bit of time saved isn't
     ## worth the extra code.
     k = max (length (b), length (a));
     if (k > n/2 && nargout == 0)
       ## Ensure a causal phase response.
       n = n * 2 .^ ceil (log2 (2*k/n));
     endif
 
-    if (strcmp (region, "whole"))
+    if (whole_region)
       N = n;
+      if (plot_output)
+        f = Fs * (0:n).' / N     # do 1 more for the plot
+      else
+        f = Fs * (0:n-1).' / N;
+      endif
     else
       N = 2*n;
+      if (plot_output)
+        n++;
+      endif
+      f = Fs * (0:n-1).' / N;
     endif
 
-    f = Fs * (0:n-1).' / N;
-
     pad_sz = N*ceil (k/N);
     b = postpad (b, pad_sz);
     a = postpad (a, pad_sz);
 
     hb = zeros (n, 1);
     ha = zeros (n, 1);
 
     for i = 1:N:pad_sz
       hb = hb + fft (postpad (b(i:i+N-1), N))(1:n);
       ha = ha + fft (postpad (a(i:i+N-1), N))(1:n);
     endfor
 
   endif
 
   h = hb ./ ha;
 
-  if (nargout != 0)
+  if (plot_output)
+    ## Plot and don't return values.
+    if (whole_region)
+      h(end+1) = h(1); # Solution is periodic.  Copy first value to end.
+    endif
+    freqz_plot (f, h, freq_norm);
+  else
     ## Return values and don't plot.
     h_r = h;
     f_r = f;
-  else
-    ## Plot and don't return values.
-    freqz_plot (f, h, freq_norm);
   endif
 
 endfunction
 
 
 %!test # correct values and fft-polyval consistency
 %! ## butterworth filter, order 2, cutoff pi/2 radians
 %! b = [0.292893218813452  0.585786437626905  0.292893218813452];
@@ -205,8 +223,11 @@ endfunction
 %! [h,f] = freqz (b,a,16,320);
 %! assert (f,[0:15]'*10,10*eps);
 %! [h2,f2] = freqz (b,a,[0:15]*10,320);
 %! assert (f2,[0:15]*10,10*eps);
 %! assert (h,h2.',20*eps);
 %! [h3,f3] = freqz (b,a,32,"whole",320);
 %! assert (f3,[0:31]'*10,10*eps);
 
+%% Test input validation
+## FIXME: Need to put tests here and simplify the input validation in the main code.
+
