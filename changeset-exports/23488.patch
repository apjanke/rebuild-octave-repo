# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1494586283 -7200
#      Fri May 12 12:51:23 2017 +0200
# Node ID 52a74f14345cf82f1ac03e43d76480f1b0de32ef
# Parent  af2f1f3dbe06e67c7b04867483503965b49a94e7
restore last editor session not before octave is ready

* file-editor-interface.h: restore_session is now a public virtual method

* file-editor.cc (construct): do not restore last session when
  editor is created

* file-editor.h: restore_session now public, not private

* main-window.cc (handle_octave_ready): restore last editor session
  when octave is ready, because now all function required for collection
  the autocompletion information are available

diff --git a/libgui/src/m-editor/file-editor-interface.h b/libgui/src/m-editor/file-editor-interface.h
--- a/libgui/src/m-editor/file-editor-interface.h
+++ b/libgui/src/m-editor/file-editor-interface.h
@@ -20,16 +20,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_file_editor_interface_h)
 #define octave_file_editor_interface_h 1
 
 #include <QMenu>
 #include <QToolBar>
+#include <QSettings>
 #include "octave-dock-widget.h"
 
 class file_editor_interface : public octave_dock_widget
 {
   Q_OBJECT
 
 public:
   file_editor_interface (QWidget *p)
@@ -59,16 +60,18 @@ public:
                                            int line, const QString& cond) = 0;
 
   virtual void handle_edit_file_request (const QString& file) = 0;
 
   virtual bool check_closing (void) = 0;
 
   virtual void empty_script (bool, bool) = 0;
 
+  virtual void restore_session (QSettings *) = 0;
+
   virtual void enable_menu_shortcuts (bool enable) = 0;
 
 public slots:
   virtual void request_new_file (const QString& command = QString ()) = 0;
   virtual void request_open_file (const QString& openFileName,
                                   const QString& encoding = QString (),
                                   int line = -1,
                                   bool debug_pointer = false,
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -1694,18 +1694,16 @@ file_editor::construct (void)
 
   connect (_tab_widget, SIGNAL (currentChanged (int)),
            this, SLOT (active_tab_changed (int)));
 
   resize (500, 400);
   setWindowIcon (QIcon (":/actions/icons/logo.png"));
   set_title (tr ("Editor"));
 
-  restore_session (settings);
-
   check_actions ();
 }
 
 void
 file_editor::restore_session (QSettings *settings)
 {
   //restore previous session
   if (! settings->value ("editor/restoreSession", true).toBool ())
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -136,16 +136,17 @@ public:
     SELECTALL_ACTION
   };
 
   void handle_enter_debug_mode (void);
   void handle_exit_debug_mode (void);
 
   void check_actions (void);
   void empty_script (bool startup, bool visible);
+  void restore_session (QSettings *settings);
 
 signals:
 
   void fetab_settings_changed (const QSettings *settings);
   void fetab_change_request (const QWidget *ID);
   void fetab_file_name_query (const QWidget *ID);
   // Save is a ping-pong type of communication
   void fetab_save_file (const QWidget *ID, const QString& fileName,
@@ -340,18 +341,16 @@ private:
   void save_file_as (QWidget *fetabID = nullptr);
   void mru_menu_update (void);
   bool call_custom_editor (const QString& file_name = QString (), int line = -1);
 
   void toggle_preference (const QString& preference, bool def);
 
   void switch_tab (int direction, bool movetab = false);
 
-  void restore_session (QSettings *settings);
-
   bool editor_tab_has_focus ();
 
   QWidget * find_tab_widget (const QString& openFileName) const;
   QAction * add_action (QMenu *menu, const QIcon& icon, const QString& text,
                         const char *member);
 
   QMenu * m_add_menu (QMenuBar *p, QString text);
 
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -1817,16 +1817,17 @@ main_window::handle_octave_ready ()
 
   if (editor_window)
     {
 #if defined (HAVE_QSCINTILLA)
       // Octave ready, determine whether to create an empty script.
       // This can not be done when the editor is created because all functions
       // must be known for the lexer's auto completion informations
       editor_window->empty_script (true, false);
+      editor_window->restore_session (settings);
 #endif
     }
 
   if (_start_gui)
     focus_command_window ();  // make sure that the command window has focus
 
 }
 
