# HG changeset patch
# User jwe
# Date 753183319 0
#      Sat Nov 13 09:35:19 1993 +0000
# Node ID d981cdce52d9e468cf915ee1d586d9ec58e254ac
# Parent  cd2e49fb4f6b5cbccbc6776522558d0e808a83ac
[project @ 1993-11-13 09:35:19 by jwe]

diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -595,24 +595,24 @@ process_printf_format (const char *s, co
     default:
       break;
     }
 
   if (*s == '*')
     {
       if (fmt_arg_count >= nargin)
 	{
-	  message (type, "not enough arguments");
+	  error ("%s: not enough arguments", type);
 	  return -1;
 	}
 
       if (args[fmt_arg_count].const_type ()
 	  != tree_constant_rep::scalar_constant)
 	{
-	  message (type, "`*' must be replaced by an integer");
+	  error ("%s: `*' must be replaced by an integer", type);
 	  return -1;
 	}
 
       fmt << NINT (args[fmt_arg_count++].double_value ());
       s++;
       chars_from_fmt_str++;
     }
   else
@@ -635,24 +635,24 @@ process_printf_format (const char *s, co
 
   if (*s == '*')
     {
       if (*(s-1) == '*')
 	goto invalid_format;
 
       if (fmt_arg_count >= nargin)
 	{
-	  message (type, "not enough arguments");
+	  error ("%s: not enough arguments", type);
 	  return -1;
 	}
 
       if (args[fmt_arg_count].const_type ()
 	  != tree_constant_rep::scalar_constant)
 	{
-	  message (type, "`*' must be replaced by an integer");
+	  error ("%s: `*' must be replaced by an integer", type);
 	  return -1;
 	}
 
       fmt << NINT (args[fmt_arg_count++].double_value ());
       s++;
       chars_from_fmt_str++;
     }
   else
@@ -673,17 +673,17 @@ process_printf_format (const char *s, co
       fmt << *s++;
     }
 
   if (*s == '\0')
     goto invalid_format;
 
   if (fmt_arg_count >= nargin)
     {
-      message (type, "not enough arguments");
+      error ("%s: not enough arguments", type);
       return -1;
     }
 
   arg_type = args[fmt_arg_count].const_type ();
 
   switch (*s)
     {
     case 'd': case 'i': case 'o': case 'u': case 'x': case 'X':
@@ -754,21 +754,21 @@ process_printf_format (const char *s, co
 	    }
 	}
 
     default:
       goto invalid_format;
    }
 
  invalid_conversion:
-  message (type, "invalid conversion");
+  error ("%s: invalid conversion", type);
   return -1;
 
  invalid_format:
-  message (type, "invalid format");
+  error ("%s: invalid format", type);
   return -1;
 }
 
 
 tree_constant *
 do_printf (const char *type, const tree_constant *args, int nargin,
 	   int nargout)
 {
@@ -870,17 +870,17 @@ do_printf (const char *type, const tree_
     {
       maybe_page_output (output_buf);
     }
   else if (strcmp (type, "fprintf") == 0)
     {
       char *msg = output_buf.str ();
       int success = fputs (msg, file.fptr ());
       if (success == EOF)
-	error ("%s: writing to file", type);
+	warning ("%s: unknown failure writing to file", type);
       delete [] msg;
     }
   else if (strcmp (type, "sprintf") == 0)
     {
       retval = new tree_constant [2];
       char *msg = output_buf.str ();
       retval[0] = tree_constant (msg);
       delete [] msg;
@@ -934,17 +934,17 @@ process_scanf_format (const char *s, con
       s++;
     }
 
   if (*s == '\0')
     goto invalid_format;
 
   if (fmt_arg_count >= nargout && store_value)
     {
-      message (type, "not enough arguments");
+      error ("%s: not enough arguments", type);
       return -1;
     }
 
   arg_type = args[fmt_arg_count].const_type ();
 
   switch (*s)
     {
     case 'd': case 'i': case 'o': case 'u': case 'x': case 'X':
@@ -1026,30 +1026,30 @@ process_scanf_format (const char *s, con
     default:
       goto invalid_format;
     }
 
   if (success > 0 || (success == 0 && store_value == 0))
     return chars_from_fmt_str;
 
   if (success == 0)
-    message (type, "invalid conversion");
+    warning ("%s: invalid conversion", type);
   else if (success == EOF)
     {
       if (strcmp (type, "fscanf") == 0)
-	message (type, "end of file reached before final conversion");
+	warning ("%s: end of file reached before final conversion", type);
       else if (strcmp (type, "sscanf") == 0)
-	message (type, "end of string reached before final conversion");
+	warning ("%s: end of string reached before final conversion", type);
       else if (strcmp (type, "scanf") == 0)
-	message (type, "end of input reached before final conversion");
+	warning ("%s: end of input reached before final conversion", type);
     }
   else
     {
     invalid_format:
-      message (type, "invalid format");
+      warning ("%s: invalid format", type);
     }
 
   return -1;
 }
 
 tree_constant *
 do_scanf (const char *type, const tree_constant *args, int nargin, int nargout)
 {
