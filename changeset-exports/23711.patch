# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498626921 14400
#      Wed Jun 28 01:15:21 2017 -0400
# Node ID 5a97aafb12a9679bf3b222156b09ce14f16bdc6f
# Parent  279a6bd429f4f124a5769cf9a0dcb491c132bc63
don't call built-in interpreter functions from the application context

* interpreter.cc (interpreter::interpreter): Process command-line
options that call interpreter built-in functions here.
(interpreter::initialize_history): Also ignore command history entries
if we have an application context and the read_history_file option is
false.

* octave.h, octave.cc (cmdline_options::cmdline_options): Store option
info instead of calling interpreter-level built-in functions to
perform actions for the supplied options.
(interpreter::m_echo_commands, interpreter::m_docstrings_file,
interpreter::m_doc_cache_file, interpreter::m_info_file,
interpreter::m_info_program, interpreter::m_debug_jit,
interpreter::m_jit_compiler, interpreter::m_texi_macros_file):
New member veriables.
(interpreter::echo_commands, interpreter::docstrings_file,
interpreter::doc_cache_file, interpreter::info_file,
interpreter::info_program, interpreter::debug_jit,
interpreter::jit_compiler, interpreter::texi_macros_file):
New get/set functions.
(interpreter::interpreter, interpreter::operator=): Use default copy
constructor and assignment operator.

diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -34,16 +34,17 @@ along with Octave; see the file COPYING.
 #include "fpucw-wrappers.h"
 #include "lo-blas-proto.h"
 #include "lo-error.h"
 #include "oct-env.h"
 #include "str-vec.h"
 #include "signal-wrappers.h"
 #include "unistd-wrappers.h"
 
+#include "builtin-defun-decls.h"
 #include "builtins.h"
 #include "defaults.h"
 #include "Cell.h"
 #include "call-stack.h"
 #include "defun.h"
 #include "display.h"
 #include "error.h"
 #include "file-io.h"
@@ -491,16 +492,51 @@ namespace octave
           m_interactive = true;
 
         line_editing = options.line_editing ();
         if ((! m_interactive || options.forced_interactive ())
             && ! options.forced_line_editing ())
           line_editing = false;
 
         traditional = options.traditional ();
+
+        // FIXME: if possible, perform the following actions directly
+        // instead of using the interpreter-level functions.
+
+        if (options.echo_commands ())
+          {
+            int val = ECHO_SCRIPTS | ECHO_FUNCTIONS | ECHO_CMD_LINE;
+            Fecho_executing_commands (octave_value (val));
+          }
+
+        std::string docstrings_file = options.docstrings_file ();
+        if (! docstrings_file.empty ())
+          Fbuilt_in_docstrings_file (octave_value (docstrings_file));
+
+        std::string doc_cache_file = options.doc_cache_file ();
+        if (! doc_cache_file.empty ())
+          Fdoc_cache_file (octave_value (doc_cache_file));
+
+        std::string info_file = options.info_file ();
+        if (! info_file.empty ())
+          Finfo_file (octave_value (info_file));
+
+        std::string info_program = options.info_program ();
+        if (! info_program.empty ())
+          Finfo_program (octave_value (info_program));
+
+        if (options.debug_jit ())
+          Fdebug_jit (octave_value (true));
+
+        if (options.jit_compiler ())
+          Fjit_enable (octave_value (true));
+
+        std::string texi_macros_file = options.texi_macros_file ();
+        if (! texi_macros_file.empty ())
+          Ftexi_macros_file (octave_value (texi_macros_file));
       }
 
     // Force default line editor if we don't want readline editing.
     if (line_editing)
       initialize_command_input ();
     else
       command_editor::force_default_editor ();
 
@@ -545,16 +581,19 @@ namespace octave
       {
         // Allow command-line option to override.
 
         if (m_app_context)
           {
             const cmdline_options& options = m_app_context->options ();
 
             read_history_file = options.read_history_file ();
+
+            if (! read_history_file)
+              command_history::ignore_entries ();
           }
 
         ::initialize_history (read_history_file);
 
         if (! m_app_context)
           command_history::ignore_entries ();
 
         m_history_initialized = true;
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -29,17 +29,16 @@ along with Octave; see the file COPYING.
 #include <string>
 
 #include "file-ops.h"
 #include "getopt-wrapper.h"
 #include "lo-error.h"
 #include "oct-env.h"
 #include "str-vec.h"
 
-#include "builtin-defun-decls.h"
 #include "Cell.h"
 #include "defaults.h"
 #include "defun.h"
 #include "display.h"
 #include "error.h"
 #include "input.h"
 #include "interpreter.h"
 #include "octave.h"
@@ -78,17 +77,16 @@ namespace octave
           {
           case '?':
             // Unrecognized option.  getopt_long already printed a message about
             // it, so we will just print the usage string and exit.
             octave_print_terse_usage_and_exit ();
             break;
 
           case 'H':
-            Fhistory_save (octave_value (false));
             m_read_history_file = false;
             break;
 
           case 'W':
             m_no_window_system = true;
             break;
 
           case 'V':
@@ -118,34 +116,31 @@ namespace octave
               m_command_line_path.push_back (octave_optarg_wrapper ());
             break;
 
           case 'q':
             m_inhibit_startup_message = true;
             break;
 
           case 'x':
-            {
-              int val = ECHO_SCRIPTS | ECHO_FUNCTIONS | ECHO_CMD_LINE;
-              Fecho_executing_commands (octave_value (val));
-            }
+            m_echo_commands = true;
             break;
 
           case 'v':
             octave_print_version_and_exit ();
             break;
 
           case BUILT_IN_DOCSTRINGS_FILE_OPTION:
             if (octave_optarg_wrapper ())
-              Fbuilt_in_docstrings_file (octave_value (octave_optarg_wrapper ()));
+              m_docstrings_file = octave_optarg_wrapper ();;
             break;
 
           case DOC_CACHE_FILE_OPTION:
             if (octave_optarg_wrapper ())
-              Fdoc_cache_file (octave_value (octave_optarg_wrapper ()));
+              m_doc_cache_file = octave_optarg_wrapper ();
             break;
 
           case EVAL_OPTION:
             if (octave_optarg_wrapper ())
               {
                 if (m_code_to_eval.empty ())
                   m_code_to_eval = octave_optarg_wrapper ();
                 else
@@ -164,30 +159,30 @@ namespace octave
 
           case IMAGE_PATH_OPTION:
             if (octave_optarg_wrapper ())
               m_image_path = octave_optarg_wrapper ();
             break;
 
           case INFO_FILE_OPTION:
             if (octave_optarg_wrapper ())
-              Finfo_file (octave_value (octave_optarg_wrapper ()));
+              m_info_file = octave_optarg_wrapper ();
             break;
 
           case INFO_PROG_OPTION:
             if (octave_optarg_wrapper ())
-              Finfo_program (octave_value (octave_optarg_wrapper ()));
+              m_info_program = octave_optarg_wrapper ();
             break;
 
           case DEBUG_JIT_OPTION:
-            Fdebug_jit (octave_value (true));
+            m_debug_jit = true;
             break;
 
           case JIT_COMPILER_OPTION:
-            Fjit_enable (octave_value (true));
+            m_jit_compiler = true;
             break;
 
           case LINE_EDITING_OPTION:
             m_forced_line_editing = m_line_editing = true;
             break;
 
           case NO_GUI_OPTION:
             m_no_gui = true;
@@ -210,17 +205,17 @@ namespace octave
             break;
 
           case PERSIST_OPTION:
             m_persist = true;
             break;
 
           case TEXI_MACROS_FILE_OPTION:
             if (octave_optarg_wrapper ())
-              Ftexi_macros_file (octave_value (octave_optarg_wrapper ()));
+              m_texi_macros_file = octave_optarg_wrapper ();
             break;
 
           case TRADITIONAL_OPTION:
             m_traditional = true;
             m_persist = true;
             break;
 
           default:
@@ -240,69 +235,16 @@ namespace octave
 
         octave_print_terse_usage_and_exit ();
       }
 
     m_remaining_args = string_vector (argv+octave_optind_wrapper (),
                                       argc-octave_optind_wrapper ());
   }
 
-  cmdline_options::cmdline_options (const cmdline_options& opts)
-    : m_force_gui (opts.m_force_gui),
-      m_forced_interactive (opts.m_forced_interactive),
-      m_forced_line_editing (opts.m_forced_line_editing),
-      m_inhibit_startup_message (opts.m_inhibit_startup_message),
-      m_line_editing (opts.m_line_editing),
-      m_no_gui (opts.m_no_gui),
-      m_no_window_system (opts.m_no_window_system),
-      m_persist (opts.m_persist),
-      m_read_history_file (opts.m_read_history_file),
-      m_read_init_files (opts.m_read_init_files),
-      m_read_site_files (opts.m_read_site_files),
-      m_set_initial_path (opts.m_set_initial_path),
-      m_traditional (opts.m_traditional),
-      m_verbose_flag (opts.m_verbose_flag),
-      m_code_to_eval (opts.m_code_to_eval),
-      m_command_line_path (opts.m_command_line_path),
-      m_exec_path (opts.m_exec_path),
-      m_image_path (opts.m_image_path),
-      m_all_args (opts.m_all_args),
-      m_remaining_args (opts.m_remaining_args)
-  { }
-
-  cmdline_options&
-  cmdline_options::operator = (const cmdline_options& opts)
-  {
-    if (this != &opts)
-      {
-        m_force_gui = opts.m_force_gui;
-        m_forced_interactive = opts.m_forced_interactive;
-        m_forced_line_editing = opts.m_forced_line_editing;
-        m_inhibit_startup_message = opts.m_inhibit_startup_message;
-        m_line_editing = opts.m_line_editing;
-        m_no_gui = opts.m_no_gui;
-        m_no_window_system = opts.m_no_window_system;
-        m_persist = opts.m_persist;
-        m_read_history_file = opts.m_read_history_file;
-        m_read_init_files = opts.m_read_init_files;
-        m_read_site_files = opts.m_read_site_files;
-        m_set_initial_path = opts.m_set_initial_path;
-        m_traditional = opts.m_traditional;
-        m_verbose_flag = opts.m_verbose_flag;
-        m_code_to_eval = opts.m_code_to_eval;
-        m_command_line_path = opts.m_command_line_path;
-        m_exec_path = opts.m_exec_path;
-        m_image_path = opts.m_image_path;
-        m_all_args = opts.m_all_args;
-        m_remaining_args = opts.m_remaining_args;
-      }
-
-    return *this;
-  }
-
   application *application::instance = nullptr;
 
   application::application (int argc, char **argv)
     : m_options (argc, argv)
   {
     init ();
   }
 
diff --git a/libinterp/octave.h b/libinterp/octave.h
--- a/libinterp/octave.h
+++ b/libinterp/octave.h
@@ -39,80 +39,108 @@ namespace octave
   class OCTINTERP_API cmdline_options
   {
   public:
 
     cmdline_options (void);
 
     cmdline_options (int argc, char **argv);
 
-    cmdline_options (const cmdline_options& opts);
+    cmdline_options (const cmdline_options& opts) = default;
 
-    cmdline_options& operator = (const cmdline_options& opts);
+    cmdline_options& operator = (const cmdline_options& opts) = default;
 
+    bool debug_jit (void) const { return m_debug_jit; }
+    bool echo_commands (void) const { return m_echo_commands; }
     bool force_gui (void) const { return m_force_gui; }
     bool forced_interactive (void) const { return m_forced_interactive; }
     bool forced_line_editing (void) const { return m_forced_line_editing; }
     bool inhibit_startup_message (void) const { return m_inhibit_startup_message; }
+    bool jit_compiler (void) const { return m_jit_compiler; }
     bool line_editing (void) const { return m_line_editing; }
     bool no_gui (void) const { return m_no_gui; }
     bool no_window_system (void) const { return m_no_window_system; }
     bool persist (void) const { return m_persist; }
     bool read_history_file (void) const { return m_read_history_file; }
     bool read_init_files (void) const { return m_read_init_files; }
     bool read_site_files (void) const { return m_read_site_files; }
     bool set_initial_path (void) const { return m_set_initial_path; }
     bool traditional (void) const { return m_traditional; }
     bool verbose_flag (void) const { return m_verbose_flag; }
     std::string code_to_eval (void) const { return m_code_to_eval; }
     std::list<std::string> command_line_path (void) const { return m_command_line_path; }
+    std::string docstrings_file (void) const { return m_docstrings_file; }
+    std::string doc_cache_file (void) const { return m_doc_cache_file; }
     std::string exec_path (void) const { return m_exec_path; }
     std::string image_path (void) const { return m_image_path; }
+    std::string info_file (void) const { return m_info_file; }
+    std::string info_program (void) const { return m_info_program; }
+    std::string texi_macros_file (void) const {return m_texi_macros_file; }
     string_vector all_args (void) const { return m_all_args; }
     string_vector remaining_args (void) const { return m_remaining_args; }
 
+    void debug_jit (bool arg) { m_debug_jit = arg; }
+    void echo_commands (bool arg) { m_echo_commands = arg; }
     void force_gui (bool arg) { m_force_gui = arg; }
     void forced_line_editing (bool arg) { m_forced_line_editing = arg; }
     void forced_interactive (bool arg) { m_forced_interactive = arg; }
     void inhibit_startup_message (bool arg) { m_inhibit_startup_message = arg; }
+    void jit_compiler (bool arg) { m_jit_compiler = arg; }
     void line_editing (bool arg) { m_line_editing = arg; }
     void no_gui (bool arg) { m_no_gui = arg; }
     void no_window_system (bool arg) { m_no_window_system = arg; }
     void persist (bool arg) { m_persist = arg; }
     void read_history_file (bool arg) { m_read_history_file = arg; }
     void read_init_files (bool arg) { m_read_init_files = arg; }
     void read_site_files (bool arg) { m_read_site_files = arg; }
     void set_initial_path (bool arg) { m_set_initial_path = arg; }
     void traditional (bool arg) { m_traditional = arg; }
     void verbose_flag (bool arg) { m_verbose_flag = arg; }
     void code_to_eval (const std::string& arg) { m_code_to_eval = arg; }
     void command_line_path (const std::list<std::string>& arg) { m_command_line_path = arg; }
+    void docstrings_file (const std::string& arg) { m_docstrings_file = arg; }
+    void doc_cache_file (const std::string& arg) { m_doc_cache_file = arg; }
     void exec_path (const std::string& arg) { m_exec_path = arg; }
     void image_path (const std::string& arg) { m_image_path = arg; }
+    void info_file (const std::string& arg) { m_info_file = arg; }
+    void info_program (const std::string& arg) { m_info_program = arg; }
+    void texi_macros_file (const std::string& arg) { m_texi_macros_file = arg; }
     void all_args (const string_vector& arg) { m_all_args = arg; }
     void remaining_args (const string_vector& arg) { m_remaining_args = arg; }
 
   private:
 
+    // TRUE means enable debug tracing for the JIT compiler.
+    // (--debug-jit)
+    bool m_debug_jit = false;
+
+    // If TRUE, echo commands as they are read and executed.
+    // (--echo-commands, -x)
+    bool m_echo_commands = false;
+
     // If TRUE, force the GUI to start.
     // (--force-gui)
     bool m_force_gui = false;
 
     // TRUE means the user forced this shell to be interactive.
     // (--interactive, -i)
     bool m_forced_interactive = false;
 
     // If TRUE, force readline command line editing.
     // (--line-editing)
     bool m_forced_line_editing = false;
 
     // TRUE means we don't print the usual startup message.
     // (--quiet; --silent; -q)
     bool m_inhibit_startup_message = false;
 
+    // TRUE means enable the JIT compiler.
+    // (--jit-compiler)
+    bool m_jit_compiler = false;
+
     // TRUE means we are using readline.
     // (--no-line-editing)
     bool m_line_editing = true;
 
     // If TRUE don't start the GUI.
     // (--no-gui)
     bool m_no_gui = false;
 
@@ -151,24 +179,45 @@ namespace octave
     // The code to evaluate at startup
     // (--eval CODE)
     std::string m_code_to_eval;
 
     // The value of "path" specified on the command line.
     // (--path; -p)
     std::list<std::string> m_command_line_path;
 
+    // The value for "built_in_docstrings_file" specified on the
+    // command line.
+    // (--built-in-docstrings-file)
+    std::string m_docstrings_file;
+
+    // The value for "doc_cache_file" specified on the command line.
+    // (--doc-cache-file)
+    std::string m_doc_cache_file;
+
     // The value for "EXEC_PATH" specified on the command line.
     // (--exec-path)
     std::string m_exec_path;
 
     // The value for "IMAGE_PATH" specified on the command line.
     // (--image-path)
     std::string m_image_path;
 
+    // The value for "info_file" specified on the command line.
+    // (--info-file)
+    std::string m_info_file;
+
+    // The value for "info_program" specified on the command line.
+    // (--info-program)
+    std::string m_info_program;
+
+    // The value for "texi_macos_file" specified on the command line.
+    // (--texi-macros-file)
+    std::string m_texi_macros_file;
+
     // All arguments passed to the argc, argv constructor.
     string_vector m_all_args;
 
     // Arguments remaining after parsing.
     string_vector m_remaining_args;
   };
 
   // The application object contains a pointer to the current
