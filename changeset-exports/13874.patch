# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1321520464 18000
#      Thu Nov 17 04:01:04 2011 -0500
# Node ID c1b754d935724b27e7705f67413fceeb5bcab490
# Parent  1bf8c244040afa63a335440b9a8380845c1b2d17
copy parent class info when performing operations on class objects

* ov.h (octave_value::octave_value (const Octave_map&,
const std::string&, const std::list<std::string>&)):
Don't provide default value for parent_list argument.
Change all callers that used only two arguments.
* ov-class.h (octave_class::octave_class (const octave_map&,
const std::string&, const std::list<std::string>&)): Likewise.

diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -1219,17 +1219,19 @@ read_mat5_binary_element (std::istream& 
                 // inline is not an object in Octave but rather an
                 // overload of a function handle. Special case.
                 tc =
                   new octave_fcn_inline (m.contents("expr")(0).string_value(),
                                          m.contents("args")(0).string_value());
               }
             else
               {
-                octave_class* cls = new octave_class (m, classname);
+                octave_class* cls
+                  = new octave_class (m, classname,
+                                      std::list<std::string> ());
 
                 if (cls->reconstruct_exemplar ())
                   {
 
                     if (! cls->reconstruct_parents ())
                       warning ("load: unable to reconstruct object inheritance");
 
                     tc = cls;
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -510,17 +510,17 @@ octave_class::subsref (const std::string
                     // We handled two index elements, so tell
                     // next_subsref to skip both of them.
 
                     skip++;
                   }
               }
             else
               retval(0) = octave_value (map.index (idx.front ()),
-                                        class_name ());
+                                        c_name, parent_list);
           }
           break;
 
         case '.':
           {
             if (map.numel() > 0)
               {
                 Cell t = dotref (idx.front ());
@@ -586,18 +586,18 @@ octave_class::subsref (const std::string
           // if it has more than one element, to be able to pass through
           // rvalue1 calls.
           if (retval.length () > 1)
             retval = octave_value (retval, true);
         }
       else
         {
           if (type.length () == 1 && type[0] == '(')
-            retval(0) = octave_value (map.index (idx.front ()), class_name (),
-                                      parent_class_name_list ());
+            retval(0) = octave_value (map.index (idx.front ()), c_name,
+                                      parent_list);
           else
             gripe_invalid_index1 ();
         }
     }
 
   return retval;
 }
 
@@ -988,17 +988,17 @@ octave_class::index_vector (void) const
 {
   idx_vector retval;
 
   octave_value meth = symbol_table::find_method ("subsindex", class_name ());
 
   if (meth.is_defined ())
     {
       octave_value_list args;
-      args(0) = octave_value (new octave_class (map, c_name));
+      args(0) = octave_value (new octave_class (map, c_name, parent_list));
 
       octave_value_list tmp = feval (meth.function_value (), args, 1);
 
       if (!error_state && tmp.length () >= 1)
         {
           if (tmp(0).is_object())
             error ("subsindex function must return a valid index vector");
           else
@@ -1118,17 +1118,17 @@ octave_class::all_strings (bool pad) con
 {
   string_vector retval;
 
   octave_value meth = symbol_table::find_method ("char", class_name ());
 
   if (meth.is_defined ())
     {
       octave_value_list args;
-      args(0) = octave_value (new octave_class (map, c_name));
+      args(0) = octave_value (new octave_class (map, c_name, parent_list));
 
       octave_value_list tmp = feval (meth.function_value (), args, 1);
 
       if (!error_state && tmp.length () >= 1)
         {
           if (tmp(0).is_string ())
             retval = tmp(0).all_strings (pad);
           else
@@ -1949,17 +1949,19 @@ derived.\n\
             {
               if (fcn->is_class_constructor (id) || fcn->is_class_method (id))
                 {
                   octave_map m = args(0).map_value ();
 
                   if (! error_state)
                     {
                       if (nargin == 2)
-                        retval = octave_value (new octave_class (m, id));
+                        retval
+                          = octave_value (new octave_class
+                                          (m, id, std::list<std::string> ()));
                       else
                         {
                           octave_value_list parents = args.slice (2, nargin-2);
 
                           retval
                             = octave_value (new octave_class (m, id, parents));
                         }
 
diff --git a/src/ov-class.h b/src/ov-class.h
--- a/src/ov-class.h
+++ b/src/ov-class.h
@@ -50,38 +50,37 @@ octave_class : public octave_base_value
 public:
 
   octave_class (void)
     : octave_base_value (), map (), c_name (),
       parent_list (), obsolete_copies (0)
     { }
 
   octave_class (const octave_map& m, const std::string& id,
-                const std::list<std::string>& plist
-                  = std::list<std::string> ())
+                const std::list<std::string>& plist)
     : octave_base_value (), map (m), c_name (id),
       parent_list (plist), obsolete_copies (0)
     { }
 
+  octave_class (const octave_map& m, const std::string& id,
+                const octave_value_list& parents);
+
   octave_class (const octave_class& s)
     : octave_base_value (s), map (s.map), c_name (s.c_name),
       parent_list (s.parent_list), obsolete_copies (0)  { }
 
-  octave_class (const octave_map& m, const std::string& id,
-                const octave_value_list& parents);
-
   ~octave_class (void) { }
 
   octave_base_value *clone (void) const { return new octave_class (*this); }
 
   octave_base_value *unique_clone (void);
 
   octave_base_value *empty_clone (void) const
   {
-    return new octave_class (octave_map (map.keys ()), class_name ());
+    return new octave_class (octave_map (map.keys ()), c_name, parent_list);
   }
 
   Cell dotref (const octave_value_list& idx);
 
   Matrix size (void);
 
   octave_idx_type numel (const octave_value_list&);
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -275,18 +275,17 @@ public:
   octave_value (const Array<std::string>& cellstr);
   octave_value (const idx_vector& idx, bool lazy = true);
   octave_value (double base, double limit, double inc);
   octave_value (const Range& r);
   octave_value (const octave_map& m);
   octave_value (const octave_scalar_map& m);
   octave_value (const Octave_map& m);
   octave_value (const Octave_map& m, const std::string& id,
-                const std::list<std::string>& plist
-                  = std::list<std::string> ());
+                const std::list<std::string>& plist);
   octave_value (const octave_value_list& m, bool = false);
   octave_value (octave_value::magic_colon);
 
   octave_value (octave_base_value *new_rep, bool borrow = false);
   octave_value (octave_base_value *new_rep, int xcount) GCC_ATTR_DEPRECATED;
 
   // Copy constructor.
 
