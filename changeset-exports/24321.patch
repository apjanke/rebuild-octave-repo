# HG changeset patch
# User Rik <rik@octave.org>
# Date 1511831310 28800
#      Mon Nov 27 17:08:30 2017 -0800
# Node ID c381bca75c649e59af96a048304e72a85da18c46
# Parent  a17862b28f0d8b10e0fcde4410652bcfd400ecb4
# Parent  174a4426d441ef10d0a10df38950c38d6086538f
maint: periodic merge of stable to default.

diff --git a/scripts/plot/draw/contourc.m b/scripts/plot/draw/contourc.m
--- a/scripts/plot/draw/contourc.m
+++ b/scripts/plot/draw/contourc.m
@@ -20,18 +20,18 @@
 ## @deftypefn  {} {[@var{c}, @var{lev}] =} contourc (@var{z})
 ## @deftypefnx {} {[@var{c}, @var{lev}] =} contourc (@var{z}, @var{vn})
 ## @deftypefnx {} {[@var{c}, @var{lev}] =} contourc (@var{x}, @var{y}, @var{z})
 ## @deftypefnx {} {[@var{c}, @var{lev}] =} contourc (@var{x}, @var{y}, @var{z}, @var{vn})
 ## Compute contour lines (isolines of constant Z value).
 ##
 ## The matrix @var{z} contains height values above the rectangular grid
 ## determined by @var{x} and @var{y}.  If only a single input @var{z} is
-## provided then @var{x} is taken to be @code{1:rows (@var{z})} and @var{y} is
-## taken to be @code{1:columns (@var{z})}.
+## provided then @var{x} is taken to be @code{1:columns (@var{z})} and @var{y}
+## is taken to be @code{1:rows (@var{z})}.
 ##
 ## The optional input @var{vn} is either a scalar denoting the number of
 ## contour lines to compute or a vector containing the Z values where lines
 ## will be computed.  When @var{vn} is a vector the number of contour lines
 ## is @code{numel (@var{vn})}.  However, to compute a single contour line
 ## at a given value use @code{@var{vn} = [val, val]}.  If @var{vn} is omitted
 ## it defaults to 10.
 ##
diff --git a/scripts/plot/draw/meshz.m b/scripts/plot/draw/meshz.m
--- a/scripts/plot/draw/meshz.m
+++ b/scripts/plot/draw/meshz.m
@@ -25,17 +25,17 @@
 ## @deftypefnx {} {@var{h} =} meshz (@dots{})
 ## Plot a 3-D wireframe mesh with a surrounding curtain.
 ##
 ## The wireframe mesh is plotted using rectangles.  The vertices of the
 ## rectangles [@var{x}, @var{y}] are typically the output of @code{meshgrid}.
 ## over a 2-D rectangular region in the x-y plane.  @var{z} determines the
 ## height above the plane of each vertex.  If only a single @var{z} matrix is
 ## given, then it is plotted over the meshgrid
-## @code{@var{x} = 0:columns (@var{z}) - 1, @var{y} = 0:rows (@var{z}) - 1}.
+## @code{@var{x} = 0:(columns (@var{z}) - 1), @var{y} = 0:(rows (@var{z}) - 1}).
 ## Thus, columns of @var{z} correspond to different @var{x} values and rows
 ## of @var{z} correspond to different @var{y} values.
 ##
 ## The color of the mesh is computed by linearly scaling the @var{z} values
 ## to fit the range of the current colormap.  Use @code{caxis} and/or
 ## change the colormap to control the appearance.
 ##
 ## Optionally the color of the mesh can be specified independently of @var{z}
diff --git a/scripts/plot/draw/stairs.m b/scripts/plot/draw/stairs.m
--- a/scripts/plot/draw/stairs.m
+++ b/scripts/plot/draw/stairs.m
@@ -23,17 +23,18 @@
 ## @deftypefnx {} {} stairs (@dots{}, @var{prop}, @var{val}, @dots{})
 ## @deftypefnx {} {} stairs (@var{hax}, @dots{})
 ## @deftypefnx {} {@var{h} =} stairs (@dots{})
 ## @deftypefnx {} {[@var{xstep}, @var{ystep}] =} stairs (@dots{})
 ## Produce a stairstep plot.
 ##
 ## The arguments @var{x} and @var{y} may be vectors or matrices.
 ## If only one argument is given, it is taken as a vector of Y values
-## and the X coordinates are taken to be the indices of the elements.
+## and the X coordinates are taken to be the indices of the elements
+## (@code{@var{x} = 1:numel (@var{y})}).
 ##
 ## The style to use for the plot can be defined with a line style @var{style}
 ## of the same format as the @code{plot} command.
 ##
 ## Multiple property/value pairs may be specified, but they must appear in
 ## pairs.
 ##
 ## If the first argument @var{hax} is an axis handle, then plot into this axis,
diff --git a/scripts/plot/draw/surface.m b/scripts/plot/draw/surface.m
--- a/scripts/plot/draw/surface.m
+++ b/scripts/plot/draw/surface.m
@@ -27,18 +27,18 @@
 ## Create a surface graphic object given matrices @var{x} and @var{y} from
 ## @code{meshgrid} and a matrix of values @var{z} corresponding to the
 ## @var{x} and @var{y} coordinates of the surface.
 ##
 ## If @var{x} and @var{y} are vectors, then a typical vertex is
 ## (@var{x}(j), @var{y}(i), @var{z}(i,j)).  Thus, columns of @var{z} correspond
 ## to different @var{x} values and rows of @var{z} correspond to different
 ## @var{y} values.  If only a single input @var{z} is given then @var{x} is
-## taken to be @code{1:rows (@var{z})} and @var{y} is
-## @code{1:columns (@var{z})}.
+## taken to be @code{1:columns (@var{z})} and @var{y} is
+## @code{1:rows (@var{z})}.
 ##
 ## Any property/value input pairs are assigned to the surface object
 ## (@pxref{Surface Properties}).
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created
diff --git a/scripts/plot/draw/surfnorm.m b/scripts/plot/draw/surfnorm.m
--- a/scripts/plot/draw/surfnorm.m
+++ b/scripts/plot/draw/surfnorm.m
@@ -23,18 +23,18 @@
 ## @deftypefnx {} {} surfnorm (@var{hax}, @dots{})
 ## @deftypefnx {} {[@var{nx}, @var{ny}, @var{nz}] =} surfnorm (@dots{})
 ## Find the vectors normal to a meshgridded surface.
 ##
 ## If @var{x} and @var{y} are vectors, then a typical vertex is
 ## (@var{x}(j), @var{y}(i), @var{z}(i,j)).  Thus, columns of @var{z} correspond
 ## to different @var{x} values and rows of @var{z} correspond to different
 ## @var{y} values.  If only a single input @var{z} is given then @var{x} is
-## taken to be @code{1:rows (@var{z})} and @var{y} is
-## @code{1:columns (@var{z})}.
+## taken to be @code{1:columns (@var{z})} and @var{y} is
+## @code{1:rows (@var{z})}.
 ##
 ## If no return arguments are requested, a surface plot with the normal
 ## vectors to the surface is plotted.
 ##
 ## Any property/value input pairs are assigned to the surface object.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
