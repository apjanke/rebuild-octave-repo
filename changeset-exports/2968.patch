# HG changeset patch
# User jwe
# Date 863718857 0
#      Thu May 15 17:54:17 1997 +0000
# Node ID e330cb788508fb12ee91d2a1ea5df038f87c9b45
# Parent  467aae13b70ab6b378f73f86208d39877f681d1e
[project @ 1997-05-15 17:40:29 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+Thu May 15 11:46:42 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* cmd-edit.cc (command_editor::increment_current_command_number):
+	New static function.
+
 Mon May 12 02:14:13 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* idx-vector.cc (IDX_VEC_REP::is_colon_equiv): Make it work when
 	the vector is not sorted.
 
 	* CMatrix.cc (ComplexMatrix::operator !): Return boolMatrix.
 	* dMatrix.cc (Matrix::operator !): Likewise
 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+Mon May 12 02:04:01 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* specfun/erfinv.m: Add missing semicolon.
+
 Wed Apr  2 22:04:03 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* miscellaneous/xor.m: Make type of return value logical.
 
 Fri Mar 28 16:19:53 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* miscellaneous/dump_prefs.m: Delete call to dump_1_pref for
 	warn_comma_in_global_decl.
diff --git a/scripts/specfun/erfinv.m b/scripts/specfun/erfinv.m
--- a/scripts/specfun/erfinv.m
+++ b/scripts/specfun/erfinv.m
@@ -40,17 +40,17 @@ function y = erfinv (x)
   t = find (x == -1);
   y (t) = (-Inf) * ones (size (t));
 
   t = find (x == 1);
   y (t) = Inf * ones (size (t));
   
   i = find ((x > -1) & (x < 1));
   if any (i)
-    s = sqrt (pi) / 2
+    s = sqrt (pi) / 2;
     z_old = ones (length (i), 1);
     z_new = zeros (length (i), 1);
     while (any (any (abs (z_new - z_old) > 2 * eps)))
       z_old = z_new;
       z_new = z_old - (erf (z_old) - x(i)) .* exp (z_old.^2) * s;
     endwhile
     y(i) = z_new;
   endif
diff --git a/src/DLD-FUNCTIONS/dassl.cc b/src/DLD-FUNCTIONS/dassl.cc
--- a/src/DLD-FUNCTIONS/dassl.cc
+++ b/src/DLD-FUNCTIONS/dassl.cc
@@ -30,23 +30,23 @@ Software Foundation, 59 Temple Place - S
 
 #include "DASSL.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "oct-obj.h"
-#include "oct-sym.h"
+#include "ov-fcn.h"
 #include "pager.h"
 #include "utils.h"
 #include "variables.h"
 
 // Global pointer for user defined function required by dassl.
-static octave_symbol *dassl_fcn;
+static octave_function *dassl_fcn;
 
 static DASSL_options dassl_opts;
 
 ColumnVector
 dassl_user_function (const ColumnVector& x, const ColumnVector& xdot, double t)
 {
   ColumnVector retval;
 
@@ -78,17 +78,17 @@ dassl_user_function (const ColumnVector&
       octave_value state (d1);
       octave_value deriv (d2);
       args(1) = deriv;
       args(0) = state;
     }
 
   if (dassl_fcn)
     {
-      octave_value_list tmp = dassl_fcn->eval (1, args);
+      octave_value_list tmp = dassl_fcn->do_index_op (1, args);
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("dassl");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
diff --git a/src/DLD-FUNCTIONS/fsolve.cc b/src/DLD-FUNCTIONS/fsolve.cc
--- a/src/DLD-FUNCTIONS/fsolve.cc
+++ b/src/DLD-FUNCTIONS/fsolve.cc
@@ -29,24 +29,24 @@ Software Foundation, 59 Temple Place - S
 #include <iostream.h>
 
 #include "NLEqn.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
-#include "oct-sym.h"
 #include "oct-obj.h"
+#include "ov-fcn.h"
 #include "pager.h"
 #include "utils.h"
 #include "variables.h"
 
 // Global pointer for user defined function required by hybrd1.
-static octave_symbol *fsolve_fcn;
+static octave_function *fsolve_fcn;
 
 static NLEqn_options fsolve_opts;
 
 int
 hybrd_info_to_fsolve_info (int info)
 {
   switch (info)
     {
@@ -101,17 +101,17 @@ fsolve_user_function (const ColumnVector
     {
       double d = x (0);
       octave_value vars (d);
       args(0) = vars;
     }
 
   if (fsolve_fcn)
     {
-      octave_value_list tmp = fsolve_fcn->eval (1, args);
+      octave_value_list tmp = fsolve_fcn->do_index_op (1, args);
       if (tmp.length () > 0 && tmp(0).is_defined ())
 	{
 	  retval = tmp(0).vector_value ();
 
 	  if (error_state || retval.length () <= 0)
 	    gripe_user_supplied_eval ("fsolve");
 	}
       else
diff --git a/src/DLD-FUNCTIONS/lsode.cc b/src/DLD-FUNCTIONS/lsode.cc
--- a/src/DLD-FUNCTIONS/lsode.cc
+++ b/src/DLD-FUNCTIONS/lsode.cc
@@ -31,26 +31,26 @@ Software Foundation, 59 Temple Place - S
 #include "LSODE.h"
 #include "lo-mappers.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "oct-obj.h"
-#include "oct-sym.h"
+#include "ov-fcn.h"
 #include "pager.h"
 #include "utils.h"
 #include "variables.h"
 
 // Global pointer for user defined function required by lsode.
-static octave_symbol *lsode_fcn;
+static octave_function *lsode_fcn;
 
 // Global pointer for optional user defined jacobian function used by lsode.
-static octave_symbol *lsode_jac;
+static octave_function *lsode_jac;
 
 static LSODE_options lsode_opts;
 
 ColumnVector
 lsode_user_function (const ColumnVector& x, double t)
 {
   ColumnVector retval;
 
@@ -62,17 +62,17 @@ lsode_user_function (const ColumnVector&
   Matrix m (nstates, 1);
   for (int i = 0; i < nstates; i++)
     m (i, 0) = x (i);
   octave_value state (m);
   args(0) = state;
 
   if (lsode_fcn)
     {
-      octave_value_list tmp = lsode_fcn->eval (1, args);
+      octave_value_list tmp = lsode_fcn->do_index_op (1, args);
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("lsode");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
@@ -102,17 +102,17 @@ lsode_user_jacobian (const ColumnVector&
   Matrix m (nstates, 1);
   for (int i = 0; i < nstates; i++)
     m (i, 0) = x (i);
   octave_value state (m);
   args(0) = state;
 
   if (lsode_jac)
     {
-      octave_value_list tmp = lsode_jac->eval (1, args);
+      octave_value_list tmp = lsode_jac->do_index_op (1, args);
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("lsode");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
diff --git a/src/DLD-FUNCTIONS/npsol.cc b/src/DLD-FUNCTIONS/npsol.cc
--- a/src/DLD-FUNCTIONS/npsol.cc
+++ b/src/DLD-FUNCTIONS/npsol.cc
@@ -31,26 +31,26 @@ Software Foundation, 59 Temple Place - S
 #include "NPSOL.h"
 #include "lo-mappers.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "oct-obj.h"
-#include "oct-sym.h"
+#include "ov-fcn.h"
 #include "pager.h"
 #include "utils.h"
 #include "variables.h"
 
 #ifndef NPSOL_MISSING
 
 // Global pointers for user defined functions required by npsol.
-static octave_symbol *npsol_objective;
-static octave_symbol *npsol_constraints;
+static octave_function *npsol_objective;
+static octave_function *npsol_constraints;
 
 static NPSOL_options npsol_opts;
 
 double
 npsol_objective_function (const ColumnVector& x)
 {
   int n = x.capacity ();
 
@@ -72,17 +72,17 @@ npsol_objective_function (const ColumnVe
   args(0) = decision_vars;
 
   static double retval;
   retval = 0.0;
 
   octave_value objective_value;
   if (npsol_objective)
     {
-      octave_value_list tmp = npsol_objective->eval (1, args);
+      octave_value_list tmp = npsol_objective->do_index_op (1, args);
 
       if (error_state)
 	{
 	  error ("npsol: error evaluating objective function");
 	  npsol_objective_error = 1; // XXX FIXME XXX
 	  return retval;
 	}
 
@@ -141,17 +141,17 @@ npsol_constraint_function (const ColumnV
       decision_vars = d;
     }
 
   octave_value_list args;
   args(0) = decision_vars;
 
   if (npsol_constraints)
     {
-      octave_value_list tmp = npsol_constraints->eval (1, args);
+      octave_value_list tmp = npsol_constraints->do_index_op (1, args);
 
       if (error_state)
 	{
 	  error ("npsol: error evaluating constraints");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
diff --git a/src/DLD-FUNCTIONS/qpsol.cc b/src/DLD-FUNCTIONS/qpsol.cc
--- a/src/DLD-FUNCTIONS/qpsol.cc
+++ b/src/DLD-FUNCTIONS/qpsol.cc
@@ -31,17 +31,16 @@ Software Foundation, 59 Temple Place - S
 #include "QPSOL.h"
 #include "lo-mappers.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "oct-obj.h"
-#include "oct-sym.h"
 #include "pager.h"
 #include "utils.h"
 #include "variables.h"
 
 #ifndef QPSOL_MISSING
 
 // XXX FIXME XXX -- this is duplicated in npsol.cc
 
diff --git a/src/DLD-FUNCTIONS/quad.cc b/src/DLD-FUNCTIONS/quad.cc
--- a/src/DLD-FUNCTIONS/quad.cc
+++ b/src/DLD-FUNCTIONS/quad.cc
@@ -30,42 +30,42 @@ Software Foundation, 59 Temple Place - S
 
 #include "Quad.h"
 #include "lo-mappers.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
-#include "oct-sym.h"
 #include "pager.h"
 #include "oct-obj.h"
+#include "ov-fcn.h"
 #include "utils.h"
 #include "variables.h"
 
 #if defined (quad)
 #undef quad
 #endif
 
 // Global pointer for user defined function required by quadrature functions.
-static octave_symbol *quad_fcn;
+static octave_function *quad_fcn;
 
 static Quad_options quad_opts;
 
 double
 quad_user_function (double x)
 {
   double retval = 0.0;
 
   octave_value_list args;
   args(0) = x;
 
   if (quad_fcn)
     {
-      octave_value_list tmp = quad_fcn->eval (1, args);
+      octave_value_list tmp = quad_fcn->do_index_op (1, args);
 
       if (error_state)
 	{
 	  quad_integration_error = 1;  // XXX FIXME XXX
 	  gripe_user_supplied_eval ("quad");
 	  return retval;
 	}
 
diff --git a/src/TEMPLATE-INST/SLList-expr.cc b/src/TEMPLATE-INST/SLList-expr.cc
--- a/src/TEMPLATE-INST/SLList-expr.cc
+++ b/src/TEMPLATE-INST/SLList-expr.cc
@@ -26,17 +26,16 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include "SLList.h"
 #include "SLList.cc"
 
 #include "ov.h"
 #include "pt-exp.h"
-#include "pt-mvr.h"
 
 template class SLNode<tree_expression *>;
 template class SLList<tree_expression *>;
 
 template class SLNode<tree_identifier *>;
 template class SLList<tree_identifier *>;
 
 template class SLNode<tree_index_expression *>;
diff --git a/src/TEMPLATE-INST/SLList-misc.cc b/src/TEMPLATE-INST/SLList-misc.cc
--- a/src/TEMPLATE-INST/SLList-misc.cc
+++ b/src/TEMPLATE-INST/SLList-misc.cc
@@ -29,16 +29,19 @@ Software Foundation, 59 Temple Place - S
 #include "SLList.h"
 #include "SLList.cc"
 
 #include "ov.h"
 #include "pt-exp.h"
 #include "ov.h"
 #include "pt-misc.h"
 
+template class SLNode<tree_argument_list *>;
+template class SLList<tree_argument_list *>;
+
 template class SLNode<tree_statement *>;
 template class SLList<tree_statement *>;
 
 template class SLNode<tree_if_clause *>;
 template class SLList<tree_if_clause *>;
 
 template class SLList<tree_switch_case *>;
 template class SLNode<tree_switch_case *>;
diff --git a/src/TEMPLATE-INST/SLList-tm.cc b/src/TEMPLATE-INST/SLList-tm.cc
--- a/src/TEMPLATE-INST/SLList-tm.cc
+++ b/src/TEMPLATE-INST/SLList-tm.cc
@@ -27,19 +27,16 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "SLList.h"
 #include "SLList.cc"
 
 #include "ov.h"
 #include "pt-mat.h"
 
-template class SLNode<tree_matrix_row *>;
-template class SLList<tree_matrix_row *>;
-
 template class SLNode<tree_matrix *>;
 template class SLList<tree_matrix *>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/defun-dld.h b/src/defun-dld.h
--- a/src/defun-dld.h
+++ b/src/defun-dld.h
@@ -28,31 +28,31 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "defun-int.h"
 
 // Define a builtin function that may be loaded dynamically at run
 // time.
 //
 // If Octave is not configured for dynamic linking of builtin
-// functions, this is similar to DEFUN, except that it will generate
-// an extra static struct and an extra externally visible function.
+// functions, this is the same as DEFUN, except that it will generate
+// an extra externally visible function.
 //
-// The first DECLARE_FUN is for the struct, the second is for the
-// definition of the function.
+// The first DECLARE_FUN is for the benefit of the installer function
+// and the second is for the definition of the function.
 
 #if defined (MAKE_BUILTINS)
 #if ! (defined (OCTAVE_LITE) && defined (WITH_DYNAMIC_LINKING))
 #define DEFUN_DLD(name, args_name, nargout_name, doc) \
   DEFUN_INTERNAL (name, args_name, nargout_name, 0, doc)
 #endif
 #else
 #define DEFUN_DLD(name, args_name, nargout_name, doc) \
   DECLARE_FUN (name, args_name, nargout_name); \
-  DEFINE_FUN_STRUCT_FUN (name, doc) \
+  DEFINE_FUN_INSTALLER_FUN (name, doc) \
   DECLARE_FUN (name, args_name, nargout_name)
 #endif
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/defun-int.h b/src/defun-int.h
--- a/src/defun-int.h
+++ b/src/defun-int.h
@@ -18,33 +18,52 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_defun_int_h)
 #define octave_defun_int_h 1
 
-#include "oct-builtin.h"
+#include <string>
+
+class octave_value;
+
+// XXX FIXME XXX -- change to use actual pointer types instead of void*
+// when things are not changing as rapidly.
+
+extern void
+install_builtin_mapper (void *mf);
+
+extern void
+install_builtin_function (void *f, const string& name, const string& doc,
+			  bool is_text_fcn = false);
+
+extern void
+install_builtin_variable (const string& n, const octave_value& v,
+			  bool iaf, bool p, bool e, void *svf,
+			  const string& h);
+
+extern void
+alias_builtin (const string& alias, const string& name);
 
 // MAKE_BUILTINS is defined to extract function names and related
 // information and create the *.def files that are eventually used to
 // create the buitlins.cc file.
 
 #ifdef MAKE_BUILTINS
 
 // Generate code to install name in the symbol table.  The script
 // mkdefs will create a .def file for every .cc file that uses DEFUN,
 // DEFUN_TEXT, or DEFUN_DLD.
 
 #define DEFUN_INTERNAL(name, args_name, nargout_name, is_text_fcn, doc) \
   BEGIN_INSTALL_BUILTIN \
     extern DECLARE_FUN (name, args_name, nargout_name); \
-    install_builtin_function \
-      (new octave_builtin (F ## name, #name, doc), is_text_fcn); \
+    install_builtin_function (F ## name, #name, doc, is_text_fcn); \
   END_INSTALL_BUILTIN
 
 // Generate code for making another name for an existing function.
 
 #define DEFALIAS_INTERNAL(alias, name) \
   BEGIN_INSTALL_BUILTIN \
   alias_builtin (#alias, #name); \
   END_INSTALL_BUILTIN
@@ -61,28 +80,43 @@ Software Foundation, 59 Temple Place - S
 
 #define DEFALIAS_INTERNAL(name, alias)
 
 #endif /* ! MAKE_BUILTINS */
 
 // Define the structure that will be used to insert this function into
 // the symbol table.
 
-#define DEFINE_FUN_STRUCT_FUN(name, doc) \
-  octave_builtin * \
+#define DEFINE_FUN_INSTALLER_FUN(name, doc) \
+  bool \
   FS ## name (void) \
   { \
-    static octave_builtin *s = 0; \
-    if (! s) \
-      s = new octave_builtin (F ## name, #name, doc); \
-    return s; \
+    static bool installed = false; \
+    if (! installed) \
+      install_builtin_function (F ## name, #name, doc); \
+    return installed; \
   }
 
 #define DECLARE_FUN(name, args_name, nargout_name) \
-  octave_value_list F ## name (const octave_value_list& args_name, int nargout_name)
+  octave_value_list \
+  F ## name (const octave_value_list& args_name, int nargout_name)
+
+// How builtin variables are actually installed.
+
+#define DEFVAR_INTERNAL(name, sname, defn, inst_as_fcn, protect, sv_fcn, doc) \
+  install_builtin_variable (name, octave_value (defn), inst_as_fcn, \
+			    protect, (sv_fcn != 0), sv_fcn, doc)
+
+// How mapper functions are actually installed.
+
+#define DEFUN_MAPPER_INTERNAL(name, ch_map, d_d_map, d_c_map, c_c_map, \
+			      lo, hi, can_ret_cmplx_for_real, doc) \
+  install_builtin_mapper \
+    (new octave_mapper (ch_map, d_d_map, d_c_map, c_c_map, lo, hi, \
+			can_ret_cmplx_for_real, #name))
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/defun.h b/src/defun.h
--- a/src/defun.h
+++ b/src/defun.h
@@ -48,41 +48,37 @@ Software Foundation, 59 Temple Place - S
 //
 //   sv_fcn is a pointer to a function that should be called whenever
 //     this variable is given a new value.  It can be 0 if there is no
 //     function to call.  See also the code in user-prefs.cc.
 //
 //   doc is the simple help text for this variable.
 
 #define DEFVAR(name, defn, inst_as_fcn, sv_fcn, doc) \
-  DEFVAR_INT (#name, SBV_ ## name, defn, inst_as_fcn, 0, sv_fcn, doc)
+  DEFVAR_INTERNAL (#name, SBV_ ## name, defn, inst_as_fcn, 0, sv_fcn, doc)
 
 // Define a builtin-constant, and a corresponding variable that can be
 // redefined.  This is just the same as DEFVAR, except that it defines
 // `name' as a variable, and `__name__' as a constant that cannot be
 // redefined.
 
 #define DEFCONST(name, defn, inst_as_fcn, sv_fcn, doc) \
-  DEFVAR_INT (#name, SBV_ ## name, defn, inst_as_fcn, false, sv_fcn, doc); \
-  DEFVAR_INT ("__" ## #name ## "__", XSBV_ ## name, defn, false, true, \
-	      sv_fcn, doc)
+  DEFVAR_INTERNAL (#name, SBV_ ## name, defn, inst_as_fcn, false, \
+		   sv_fcn, doc); \
+  DEFVAR_INTERNAL ("__" ## #name ## "__", XSBV_ ## name, defn, false, \
+		   true, sv_fcn, doc)
 
 // This one can be used when `name' cannot be used directly (if it is
 // already defined as a macro).  In that case, name is already a
 // quoted string, and the name of the structure has to be passed too.
 
 #define DEFCONSTX(name, sname, defn, inst_as_fcn, sv_fcn, doc) \
-  DEFVAR_INT (name, sname, defn, inst_as_fcn, false, sv_fcn, doc); \
-  DEFVAR_INT ("__" ## name ## "__", X ## sname, defn, false, true, sv_fcn, doc)
-
-// How builtin variables are actually installed.
-
-#define DEFVAR_INT(name, sname, defn, inst_as_fcn, protect, sv_fcn, doc) \
-  install_builtin_variable (name, octave_value (defn), inst_as_fcn, \
-			    protect, (sv_fcn != 0), sv_fcn, doc)
+  DEFVAR_INTERNAL (name, sname, defn, inst_as_fcn, false, sv_fcn, doc); \
+  DEFVAR_INTERNAL ("__" ## name ## "__", X ## sname, defn, false, true, \
+		   sv_fcn, doc)
 
 // Define a builtin function.
 //
 //   name is the name of the function, unqouted.
 //
 //   args_name is the name of the octave_value_list variable used to pass
 //     the argument list to this function.
 //
@@ -129,19 +125,18 @@ Software Foundation, 59 Temple Place - S
 //   can_ret_cmplx_for_real is a flag that says whether this function
 //     can create a complex number given a real-valued  argument
 //     (e.g., sqrt (-1)).
 //
 //   doc is the simple help text for the function.
 
 #define DEFUN_MAPPER(name, ch_map, d_d_map, d_c_map, c_c_map, \
 		     lo, hi, can_ret_cmplx_for_real, doc) \
-  install_builtin_mapper \
-    (new octave_mapper (ch_map, d_d_map, d_c_map, c_c_map, lo, hi, \
-			can_ret_cmplx_for_real, #name))
+  DEFUN_MAPPER_INTERNAL(name, ch_map, d_d_map, d_c_map, c_c_map, \
+			lo, hi, can_ret_cmplx_for_real, doc)
 
 // Make alias another name for the existing function name.  This macro
 // must be used in the same file where name is defined, after the
 // definition for name.
 
 #define DEFALIAS(name, alias) \
   DEFALIAS_INTERNAL (name, alias)
 
diff --git a/src/mkbuiltins b/src/mkbuiltins
--- a/src/mkbuiltins
+++ b/src/mkbuiltins
@@ -20,17 +20,17 @@ fi
 
 cat << \EOF
 // DO NOT EDIT!  Generated automatically by mkbuiltins.
 
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
 
-#include "oct-builtin.h"
+#include "defun.h"
 #include "oct-obj.h"
 #include "variables.h"
 
 EOF
 
 for file in $DEF_FILES; do
   fcn=`echo $file | sed 's/\.df//; s/-/_/g'`
   echo "static void"
diff --git a/test/octave.test/arith/round-1.m b/test/octave.test/arith/round-1.m
--- a/test/octave.test/arith/round-1.m
+++ b/test/octave.test/arith/round-1.m
@@ -1,2 +1,2 @@
-(round (1) == 1 && round (1.1) = 1 && round (5.5) == 6
+(round (1) == 1 && round (1.1) == 1 && round (5.5) == 6
  && round (i) == i && round (2.5+3.5i) == 3+4i && round (-2.6) == -3)
diff --git a/test/octave.test/error/error.exp b/test/octave.test/error/error.exp
--- a/test/octave.test/error/error.exp
+++ b/test/octave.test/error/error.exp
@@ -1,10 +1,10 @@
 set test error-1
-set prog_output "error: foo\nerror: evaluating index expression near line 1, column 15\nerror: called from `g'\nerror: called from `f'"
+set prog_output "error: foo\nerror: called from `g'\nerror: called from `f'"
 do_test error-1.m
 
 set test error-2
 set prog_output "error: foo"
 do_test error-2.m
 
 set test error-3
 set prog_output "error: unspecified error"
diff --git a/test/octave.test/switch/switch-1.m b/test/octave.test/switch/switch-1.m
--- a/test/octave.test/switch/switch-1.m
+++ b/test/octave.test/switch/switch-1.m
@@ -2,9 +2,9 @@ a = 1;
 b = 2;
 c = 3;
 
 switch 0 case 1 x = a; case 2 x = b; otherwise x = c; endswitch
 switch 1 case 1 y = a; case 2 y = b; otherwise y = c; endswitch
 switch 2 case 1 z = a; case 2 z = b; otherwise z = c; endswitch
 switch 3 case 1 p = a; case 2 p = b; otherwise p = c; endswitch
 
-x == c && y = a && z = b && p == c
+x == c && y == a && z == b && p == c
