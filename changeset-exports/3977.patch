# HG changeset patch
# User jwe
# Date 1025891018 0
#      Fri Jul 05 17:43:38 2002 +0000
# Node ID 95663a3a2682d85614ae5ee9b960d0e3b7394a2f
# Parent  4038f12b8eea373bac6ed03a2f4dbdb0c0b95de3
[project @ 2002-07-05 17:43:37 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,28 @@
+2002-07-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pt-assign.cc (tree_multi_assignment::rvalue): Call
+	lhs->nargout_count, not lhs->length.
+
+	* pt-arg-list.cc (tree_argument_list::convert_to_const_vector):
+	Handle cs-list objects here.
+	(tree_argument_list::nargout_count): New function.
+	* pt-arg-list.h: Provide decl.
+
+	* ov-cs-list.h, ov-cs-list.cc: New files.
+	* Makefile.in: Add them to the appropriate lists.
+
+	* ov.cc: Include ov-cs-list.h.
+	New arg, is_cs_list for constructor taking octave_value_list arg.
+	(install_types): Register ov_cs_list.
+	* ov.h (octave_value::is_cs_list): New function.
+	* ov-base.h (octave_base_value::is_cs_list): Likewise.
+	* ov-cell.cc (octave_cell::subsref): Return cs-list for "{" indexing.
+
 2002-07-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-mat.cc (Vempty_list_elements_ok): Default value is now 1.
 	* octave.cc (maximum_braindamage): No longer need to set value here.
 
 	* ov-usr-fcn.cc (Fva_arg, Fva_start, Fvr_val): Warn that these
 	functions are deprecated.
 	* lex.l (EL): Warn that `...' is deprecated.
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -59,17 +59,17 @@ ifeq ($(OCTAVE_LITE), true)
   endif
   ifeq ($(WITH_DYNAMIC_LINKING), false)
     DLD_STATIC_OBJ := $(DLD_OBJ)
   endif
 else
   DLD_STATIC_OBJ := $(DLD_OBJ)
 endif
 
-OV_INCLUDES := ov-re-mat.h ov-cx-mat.h ov-ch-mat.h ov-list.h \
+OV_INCLUDES := ov-re-mat.h ov-cx-mat.h ov-ch-mat.h ov-cs-list.h ov-list.h \
 	ov-struct.h ov-scalar.h ov-range.h ov-complex.h ov-va-args.h \
 	ov-colon.h ov-base.h ov-base-mat.h ov-base-scalar.h \
 	ov-str-mat.h ov-bool-mat.h ov-bool.h ov-file.h ov-cell.h ov.h \
 	ov-fcn.h ov-builtin.h ov-dld-fcn.h ov-mapper.h ov-usr-fcn.h \
 	ov-base-nd-array.h ov-re-nd-array.h ov-typeinfo.h
 
 PT_INCLUDES := pt.h pt-all.h pt-arg-list.h pt-assign.h pt-binop.h \
         pt-bp.h	pt-cell.h pt-check.h pt-cmd.h pt-colon.h pt-const.h \
@@ -103,17 +103,18 @@ OP_XSRC := op-b-b.cc op-bm-b.cc op-bm-bm
 	op-fil-cs.cc op-fil-m.cc op-fil-s.cc op-fil-lis.cc \
 	op-fil-rec.cc op-fil-str.cc op-list.cc op-m-cm.cc op-m-cs.cc \
 	op-m-m.cc op-m-s.cc op-range.cc op-s-cm.cc op-s-cs.cc op-s-m.cc \
 	op-s-s.cc op-str-str.cc
 
 OP_SRC := $(addprefix OPERATORS/, $(OP_XSRC))
 
 OV_SRC := ov-base.cc ov-base-mat.cc ov-base-scalar.cc ov-ch-mat.cc \
-	ov-list.cc ov-re-mat.cc ov-cx-mat.cc ov-range.cc ov-scalar.cc \
+	ov-cs-list.cc ov-list.cc ov-re-mat.cc ov-cx-mat.cc \
+	ov-range.cc ov-scalar.cc \
 	ov-complex.cc ov-str-mat.cc ov-struct.cc ov-va-args.cc \
 	ov-colon.cc ov-bool-mat.cc ov-bool.cc ov-file.cc ov-cell.cc \
 	ov.cc ov-fcn.cc ov-builtin.cc ov-dld-fcn.cc ov-mapper.cc \
 	ov-usr-fcn.cc ov-base-nd-array.cc ov-re-nd-array.cc \
 	ov-typeinfo.cc
 
 PT_SRC := pt.cc pt-arg-list.cc pt-assign.cc pt-bp.cc pt-binop.cc pt-cell.cc \
 	pt-check.cc pt-cmd.cc pt-colon.cc pt-const.cc pt-decl.cc \
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -115,16 +115,18 @@ public:
   bool is_string (void) const { return false; }
 
   bool is_range (void) const { return false; }
 
   bool is_map (void) const { return false; }
 
   bool is_stream (void) const { return false; }
 
+  bool is_cs_list (void) const { return false; }
+
   bool is_list (void) const { return false; }
 
   bool is_magic_colon (void) const { return false; }
 
   bool is_all_va_args (void) const { return false; }
 
   octave_value all (void) const { return 0.0; }
 
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -74,17 +74,17 @@ octave_cell::subsref (const std::string 
 	  {
 	    int nr = tcell.rows ();
 	    int nc = tcell.columns ();
 	    octave_value_list lst (nr * nc, octave_value ());
 	    int k = 0;
 	    for (int j = 0; j < nc; j++)
 	      for (int i = 0; i < nr; i++)
 		lst(k++) = tcell(i,j);
-	    retval = lst;
+	    retval = octave_value (lst, true);
 	  }
       }
       break;
 
     case '.':
       {
 	std::string nm = type_name ();
 	error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -42,16 +42,17 @@ Software Foundation, 59 Temple Place - S
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-ch-mat.h"
 #include "ov-str-mat.h"
 #include "ov-range.h"
 #include "ov-struct.h"
 #include "ov-file.h"
 #include "ov-list.h"
+#include "ov-cs-list.h"
 #include "ov-colon.h"
 #include "ov-va-args.h"
 #include "ov-builtin.h"
 #include "ov-mapper.h"
 #include "ov-usr-fcn.h"
 #include "ov-typeinfo.h"
 
 #include "defun.h"
@@ -484,19 +485,24 @@ octave_value::octave_value (const octave
 }
 
 octave_value::octave_value (octave_function *f)
   : rep (f)
 {
   rep->count = 1;
 }
 
-octave_value::octave_value (const octave_value_list& l)
-  : rep (new octave_list (l))
+octave_value::octave_value (const octave_value_list& l, bool is_cs_list)
+  : rep (0)
 {
+  if (is_cs_list)
+    rep = new octave_cs_list (l);
+  else
+    new octave_list (l);
+
   rep->count = 1;
 }
 
 octave_value::octave_value (octave_value::magic_colon)
   : rep (new octave_magic_colon ())
 {
   rep->count = 1;
 }
@@ -1525,16 +1531,17 @@ install_types (void)
   octave_range::register_type ();
   octave_bool::register_type ();
   octave_bool_matrix::register_type ();
   octave_char_matrix::register_type ();
   octave_char_matrix_str::register_type ();
   octave_struct::register_type ();
   octave_file::register_type ();
   octave_list::register_type ();
+  octave_cs_list::register_type ();
   octave_all_va_args::register_type ();
   octave_magic_colon::register_type ();
   octave_builtin::register_type ();
   octave_mapper::register_type ();
   octave_user_function::register_type ();
 }
 
 static int
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -174,17 +174,17 @@ public:
   octave_value (const std::string& s);
   octave_value (const string_vector& s);
   octave_value (const charMatrix& chm, bool is_string = false);
   octave_value (double base, double limit, double inc);
   octave_value (const Range& r);
   octave_value (const Octave_map& m);
   octave_value (const octave_stream& s, int n);
   octave_value (octave_function *f);
-  octave_value (const octave_value_list& m);
+  octave_value (const octave_value_list& m, bool is_cs_list = false);
   octave_value (octave_value::magic_colon);
   octave_value (octave_value::all_va_args);
 
   octave_value (octave_value *new_rep, int count = 1);
 
   // Copy constructor.
 
   octave_value (const octave_value& a)
@@ -331,16 +331,19 @@ public:
     { return rep->is_range (); }
 
   virtual bool is_map (void) const
     { return rep->is_map (); }
 
   virtual bool is_stream (void) const
     { return rep->is_stream (); }
 
+  virtual bool is_cs_list (void) const
+    { return rep->is_cs_list (); }
+
   virtual bool is_list (void) const
     { return rep->is_list (); }
 
   virtual bool is_magic_colon (void) const
     { return rep->is_magic_colon (); }
 
   virtual bool is_all_va_args (void) const
     { return rep->is_all_va_args (); }
diff --git a/src/pt-arg-list.cc b/src/pt-arg-list.cc
--- a/src/pt-arg-list.cc
+++ b/src/pt-arg-list.cc
@@ -50,16 +50,35 @@ tree_argument_list::~tree_argument_list 
 {
   while (! empty ())
     {
       tree_expression *t = remove_front ();
       delete t;
     }
 }
 
+int
+tree_argument_list::nargout_count (void) const
+{
+  int retval = 0;
+
+  for (Pix p = first (); p != 0; next (p))
+    {
+      tree_expression *elt = this->operator () (p);
+
+      // XXX FIXME XXX -- need to be able to determine whether elt is
+      // an expression that could evaluate to a cs-list object, and if
+      // so, how many elements are in that list.  Ugly!
+
+      retval++;
+    }
+
+  return retval;
+}
+
 bool
 tree_argument_list::all_elements_are_constant (void) const
 {
   for (Pix p = first (); p != 0; next (p))
     {
       tree_expression *elt = this->operator () (p);
 
       if (! elt->is_constant ())
@@ -74,17 +93,18 @@ tree_argument_list::convert_to_const_vec
 {
   int len = length ();
 
   // XXX FIXME XXX -- would be nice to know in advance how largs args
   // needs to be even when we have a list containing an all_va_args
   // token.
 
   octave_value_list args;
-  args.resize (len);
+  int args_len = len;
+  args.resize (args_len);
 
   Pix p = first ();
   int j = 0;
   for (int k = 0; k < len; k++)
     {
       tree_expression *elt = this->operator () (p);
 
       if (elt)
@@ -101,26 +121,37 @@ tree_argument_list::convert_to_const_vec
 	    {
 	      if (tmp.is_all_va_args ())
 		{
 		  if (curr_function)
 		    {
 		      octave_value_list tva;
 		      tva = curr_function->octave_all_va_args ();
 		      int n = tva.length ();
+		      args_len += n - 1;
+		      args.resize (args_len);
 		      for (int i = 0; i < n; i++)
 			args(j++) = tva(i);
 		    }
 		  else
 		    {
 		      ::error ("all_va_args is only valid inside functions");
 		      args = octave_value_list ();
 		      break;
 		    }
 		}
+	      else if (tmp.is_cs_list ())
+		{
+		  octave_value_list tl = tmp.list_value ();
+		  int n = tl.length ();
+		  args_len += n - 1;
+		  args.resize (args_len);
+		  for (int i = 0; i < n; i++)
+		    args(j++) = tl(i);
+		}
 	      else
 		args(j++) = tmp;
 	    }
 	  next (p);
 	}
       else
 	{
 	  args(j++) = octave_value ();
diff --git a/src/pt-arg-list.h b/src/pt-arg-list.h
--- a/src/pt-arg-list.h
+++ b/src/pt-arg-list.h
@@ -48,16 +48,18 @@ public:
   tree_argument_list (void)
     : SLList<tree_expression *> () { }
 
   tree_argument_list (tree_expression *t)
     : SLList<tree_expression *> () { append (t); }
 
   ~tree_argument_list (void);
 
+  int nargout_count (void) const;
+
   bool all_elements_are_constant (void) const;
 
   octave_value_list convert_to_const_vector (void);
 
   string_vector get_arg_names (void) const;
 
   void accept (tree_walker& tw);
 
diff --git a/src/pt-assign.cc b/src/pt-assign.cc
--- a/src/pt-assign.cc
+++ b/src/pt-assign.cc
@@ -203,94 +203,96 @@ tree_multi_assignment::rvalue (int)
 {
   octave_value_list retval;
 
   if (error_state)
     return retval;
 
   if (rhs)
     {
-      int n_out = lhs->length ();
+      int n_out = lhs->nargout_count ();
+
+      if (error_state)
+	return retval;
 
       octave_value_list rhs_val = rhs->rvalue (n_out);
 
-      if (! error_state)
-	{
-	  if (rhs_val.empty ())
-	    {
-	      error ("value on right hand side of assignment is undefined");
-	      eval_error ();
-	    }
-	  else
-	    {
-	      int k = 0;
-
-	      int n = rhs_val.length ();
+      if (error_state)
+	return retval;
 
-	      retval.resize (n, octave_value ());
-
-	      for (Pix p = lhs->first (); p != 0; lhs->next (p))
-		{
-		  tree_expression *lhs_elt = lhs->operator () (p);
+      if (rhs_val.empty ())
+	{
+	  error ("value on right hand side of assignment is undefined");
+	  eval_error ();
+	}
+      else
+	{
+	  int k = 0;
 
-		  if (lhs_elt)
-		    {
-		      octave_lvalue ult = lhs_elt->lvalue ();
+	  int n = rhs_val.length ();
 
-		      if (error_state)
-			eval_error ();
-		      else if (k < n)
-			{
-			  ult.assign (etype, rhs_val(k));
+	  retval.resize (n, octave_value ());
 
-			  if (! error_state)
-			    {
-			      if (etype == octave_value::op_asn_eq)
-				retval(k) = rhs_val(k);
-			      else
-				retval(k) = ult.value ();
-			    }
-			}
-		      else
-			error ("element number %d undefined in return list",
-			       k+1);
+	  for (Pix p = lhs->first (); p != 0; lhs->next (p))
+	    {
+	      tree_expression *lhs_elt = lhs->operator () (p);
+
+	      if (lhs_elt)
+		{
+		  octave_lvalue ult = lhs_elt->lvalue ();
 
-		      if (error_state)
-			eval_error ();
-		      else if (print_result ())
+		  if (error_state)
+		    eval_error ();
+		  else if (k < n)
+		    {
+		      ult.assign (etype, rhs_val(k));
+
+		      if (! error_state)
 			{
-			  if (Vprint_rhs_assign_val)
-			    retval(k).print_with_name
-			      (octave_stdout, lhs_elt->str_print_code ());
+			  if (etype == octave_value::op_asn_eq)
+			    retval(k) = rhs_val(k);
 			  else
-			    {
-			      // We clear any index here so that we can
-			      // get the new value of the referenced
-			      // object below, instead of the indexed
-			      // value (which should be the same as the
-			      // right hand side value).
-
-			      ult.clear_index ();
-
-			      octave_value lhs_val = ult.value ();
-
-			      if (! error_state)
-				lhs_val.print_with_name (octave_stdout,
-							 lhs_elt->name ());
-			    }
+			    retval(k) = ult.value ();
 			}
 		    }
 		  else
-		    eval_error ();
+		    error ("element number %d undefined in return list", k+1);
 
 		  if (error_state)
-		    break;
+		    eval_error ();
+		  else if (print_result ())
+		    {
+		      if (Vprint_rhs_assign_val)
+			retval(k).print_with_name
+			  (octave_stdout, lhs_elt->str_print_code ());
+		      else
+			{
+			  // We clear any index here so that we can
+			  // get the new value of the referenced
+			  // object below, instead of the indexed
+			  // value (which should be the same as the
+			  // right hand side value).
+
+			  ult.clear_index ();
 
-		  k++;
+			  octave_value lhs_val = ult.value ();
+
+			  if (! error_state)
+			    lhs_val.print_with_name (octave_stdout,
+						     lhs_elt->name ());
+			}
+		    }
 		}
+	      else
+		eval_error ();
+
+	      if (error_state)
+		break;
+
+	      k++;
 	    }
 	}
     }
   else
     eval_error ();
 
   return retval;
 }
