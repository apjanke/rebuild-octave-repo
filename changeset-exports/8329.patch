# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1226979039 18000
#      Mon Nov 17 22:30:39 2008 -0500
# Node ID c91b59532f32e9223bbb3e34a7a6f0b3219ae137
# Parent  c2d126754a49eb79ae679b22fe183946a2c11743
load-path.cc (load_path::dir_info::update): smarter handling of relative names

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+2008-11-17  John W. Eaton  <jwe@octave.org>
+
+	* load-path.h (load_path::dir_info::abs_dir_name): New data member.
+	(load_path::dir_info::dir_info, load_path::dir_info::operator =):
+	Copy abs_dir_name.
+	(load_path::abs_dir_cache_type, load_path::dir_cache_iterator,
+	load_path::const_dir_cache_iterator): New typedefs.
+	(load_path::abs_dir_cache): New static data member.
+	(load_path::dir_info:dir_info): New constructor.
+	* load-path.cc (load_path::abs_dir_cache): Define new static data
+	member.
+	(load_path::dir_info::update): Look in abs_dir_cache for relative
+	directory names.
+	(load_path::dir_info::initialize): Update abs_dir_cache here.
+
 2008-11-13  John W. Eaton  <jwe@octave.org>
 
 	* ov-int8.h, ov-int16.h, ov-int32.h, ov-int64.h, ov-uint8.h,
 	ov-uint16.h, ov-uint32.h, ov-uint64.h: Don't define
 	OCTAVE_INT_NDARRAY_T.
 	* ov-intx.h (class OCTAVE_VALUE_INT_MATRIX_T,
 	class OCTAVE_VALUE_INT_SCALAR_T): Use intNDArray<OCTAVE_INT_T>
 	instead of OCTAVE_INT_NDARRAY_T.
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -42,51 +42,89 @@ along with Octave; see the file COPYING.
 #include "unwind-prot.h"
 #include "utils.h"
 
 load_path *load_path::instance = 0;
 load_path::hook_fcn_ptr load_path::add_hook = execute_pkg_add;
 load_path::hook_fcn_ptr load_path::remove_hook = execute_pkg_del;
 std::string load_path::command_line_path;
 std::string load_path::sys_path;
+load_path::abs_dir_cache_type load_path::abs_dir_cache;
 
 void
 load_path::dir_info::update (void)
 {
   if (is_relative)
-    initialize ();
+    {
+      std::string abs_name
+	= octave_env::make_absolute (dir_name, octave_env::getcwd ());
+
+      abs_dir_cache_iterator p = abs_dir_cache.find (abs_name);
+
+      if (p != abs_dir_cache.end ())
+	{
+	  // The directory is in the cache of all directories we have
+	  // visited (indexed by its absolute name).  If it is out of
+	  // date, initialize it.  Otherwise, copy the info from the
+	  // cache.  By doing that, we avoid unnecessary calls to stat
+	  // that can slow things down tremendously for large
+	  // directories.
+
+	  const dir_info& di = p->second;
+
+	  file_stat fs (dir_name);
+
+	  if (fs)
+	    {
+	      if (fs.mtime () != di.dir_mtime)
+		initialize ();
+	      else
+		*this = di;
+
+	      return;
+	    }
+	  else
+	    {
+	      std::string msg = fs.error ();
+	      warning ("load_path: %s: %s", dir_name.c_str (), msg.c_str ());
+	    }
+	}
+    }
+
+  file_stat fs (dir_name);
+
+  if (fs)
+    {
+      if (fs.mtime () != dir_mtime)
+	initialize ();
+    }
   else
     {
-      file_stat fs (dir_name);
-
-      if (fs)
-	{
-	  if (fs.mtime () != dir_mtime)
-	    initialize ();
-	}
-      else
-	{
-	  std::string msg = fs.error ();
-	  warning ("load_path: %s: %s", dir_name.c_str (), msg.c_str ());
-	}
+      std::string msg = fs.error ();
+      warning ("load_path: %s: %s", dir_name.c_str (), msg.c_str ());
     }
 }
 
 void
 load_path::dir_info::initialize (void)
 {
   is_relative = ! octave_env::absolute_pathname (dir_name);
 
   file_stat fs (dir_name);
 
   if (fs)
     {
       dir_mtime = fs.mtime ();
 
       get_file_list (dir_name);
+
+      std::string abs_name
+	= octave_env::make_absolute (dir_name, octave_env::getcwd ());
+
+      abs_dir_cache[abs_name] = *this;      
     }
   else
     {
       std::string msg = fs.error ();
       warning ("load_path: %s: %s", dir_name.c_str (), msg.c_str ());
     }
 }
 
diff --git a/src/load-path.h b/src/load-path.h
--- a/src/load-path.h
+++ b/src/load-path.h
@@ -246,46 +246,54 @@ private:
     };
 
     // <CLASS_NAME, CLASS_INFO>
     typedef std::map<std::string, class_info> method_file_map_type;
 
     typedef method_file_map_type::const_iterator const_method_file_map_iterator;
     typedef method_file_map_type::iterator method_file_map_iterator;
 
+    // This default constructor is only provided so we can create a
+    // std::map of dir_info objects.  You should not use this
+    // constructor for any other purpose.
+    dir_info (void) { }
+
     dir_info (const std::string& d) : dir_name (d) { initialize (); }
 
     dir_info (const dir_info& di)
-      : dir_name (di.dir_name), is_relative (di.is_relative),
+      : dir_name (di.dir_name), abs_dir_name (di.abs_dir_name),
+	is_relative (di.is_relative),
 	dir_mtime (di.dir_mtime), all_files (di.all_files),
 	fcn_files (di.fcn_files),
 	private_file_map (di.private_file_map),
 	method_file_map (di.method_file_map) { }
 
     ~dir_info (void) { }
 
     dir_info& operator = (const dir_info& di)
     {
       if (&di != this)
 	{
 	  dir_name = di.dir_name;
+	  abs_dir_name = di.abs_dir_name;
 	  is_relative = di.is_relative;
 	  dir_mtime = di.dir_mtime;
 	  all_files = di.all_files;
 	  fcn_files = di.fcn_files;
 	  private_file_map = di.private_file_map;
 	  method_file_map = di.method_file_map;
 	}
 
       return *this;
     }
 
     void update (void);
 
     std::string dir_name;
+    std::string abs_dir_name;
     bool is_relative;
     octave_time dir_mtime;
     string_vector all_files;
     string_vector fcn_files;
     fcn_file_map_type private_file_map;
     method_file_map_type method_file_map;
 
   private:
@@ -341,16 +349,21 @@ private:
   // overloaded functions (in the "@" directories used to implement
   // classes).
 
   typedef std::list<dir_info> dir_info_list_type;
 
   typedef dir_info_list_type::const_iterator const_dir_info_list_iterator;
   typedef dir_info_list_type::iterator dir_info_list_iterator;
 
+  typedef std::map<std::string, dir_info> abs_dir_cache_type;
+
+  typedef abs_dir_cache_type::const_iterator const_abs_dir_cache_iterator;
+  typedef abs_dir_cache_type::iterator abs_dir_cache_iterator;
+
   typedef std::list<file_info> file_info_list_type;
 
   typedef file_info_list_type::const_iterator const_file_info_list_iterator;
   typedef file_info_list_type::iterator file_info_list_iterator;
 
   // <FCN_NAME, FILE_INFO_LIST>
   typedef std::map<std::string, file_info_list_type> fcn_map_type;
 
@@ -382,16 +395,18 @@ private:
   static hook_fcn_ptr add_hook;
 
   static hook_fcn_ptr remove_hook;
 
   static std::string command_line_path;
 
   static std::string sys_path;
 
+  static abs_dir_cache_type abs_dir_cache;
+
   static bool instance_ok (void);
 
   const_dir_info_list_iterator find_dir_info (const std::string& dir) const;
   dir_info_list_iterator find_dir_info (const std::string& dir);
 
   bool contains (const std::string& dir) const;
 
   void move_fcn_map (const std::string& dir,
