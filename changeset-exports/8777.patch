# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1234866389 -3600
#      Tue Feb 17 11:26:29 2009 +0100
# Node ID 724c0f46d9d48207e29a9fc4e1b5bd2ade64568d
# Parent  d23c33ec6bd3a84c110cb5abf37992049dd6fb71
implement cummin/cummax functions

diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -709,16 +709,40 @@ ComplexNDArray::min (int dim) const
 }
 
 ComplexNDArray
 ComplexNDArray::min (ArrayN<octave_idx_type>& idx_arg, int dim) const
 {
   return do_mx_minmax_op<ComplexNDArray> (*this, idx_arg, dim, mx_inline_min);
 }
 
+ComplexNDArray
+ComplexNDArray::cummax (int dim) const
+{
+  return do_mx_cumminmax_op<ComplexNDArray> (*this, dim, mx_inline_cummax);
+}
+
+ComplexNDArray
+ComplexNDArray::cummax (ArrayN<octave_idx_type>& idx_arg, int dim) const
+{
+  return do_mx_cumminmax_op<ComplexNDArray> (*this, idx_arg, dim, mx_inline_cummax);
+}
+
+ComplexNDArray
+ComplexNDArray::cummin (int dim) const
+{
+  return do_mx_cumminmax_op<ComplexNDArray> (*this, dim, mx_inline_cummin);
+}
+
+ComplexNDArray
+ComplexNDArray::cummin (ArrayN<octave_idx_type>& idx_arg, int dim) const
+{
+  return do_mx_cumminmax_op<ComplexNDArray> (*this, idx_arg, dim, mx_inline_cummin);
+}
+
 NDArray
 ComplexNDArray::abs (void) const
 {
   return NDArray (mx_inline_cabs_dup (data (), length ()),
                   dims ());
 }
 
 ComplexNDArray
diff --git a/liboctave/CNDArray.h b/liboctave/CNDArray.h
--- a/liboctave/CNDArray.h
+++ b/liboctave/CNDArray.h
@@ -80,16 +80,22 @@ public:
   ComplexNDArray sumsq (int dim = -1) const;
   ComplexNDArray concat (const ComplexNDArray& rb, const Array<octave_idx_type>& ra_idx);
   ComplexNDArray concat (const NDArray& rb, const Array<octave_idx_type>& ra_idx);
 
   ComplexNDArray max (int dim = 0) const;
   ComplexNDArray max (ArrayN<octave_idx_type>& index, int dim = 0) const;
   ComplexNDArray min (int dim = 0) const;
   ComplexNDArray min (ArrayN<octave_idx_type>& index, int dim = 0) const;
+
+  ComplexNDArray cummax (int dim = 0) const;
+  ComplexNDArray cummax (ArrayN<octave_idx_type>& index, int dim = 0) const;
+  ComplexNDArray cummin (int dim = 0) const;
+  ComplexNDArray cummin (ArrayN<octave_idx_type>& index, int dim = 0) const;
+
   ComplexNDArray& insert (const NDArray& a, octave_idx_type r, octave_idx_type c);
   ComplexNDArray& insert (const ComplexNDArray& a, octave_idx_type r, octave_idx_type c);
   ComplexNDArray& insert (const ComplexNDArray& a, const Array<octave_idx_type>& ra_idx);
   
   NDArray abs (void) const;
 
   friend ComplexNDArray conj (const ComplexNDArray& a);
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,33 @@
+2009-02-17  Jaroslav Hajek  <highegg@gmail.com>
+
+	* mx-inlines.cc (OP_CUMMINMAX_FCN, OP_CUMMINMAX_FCN2,
+	OP_CUMMINMAX_FCNN): New macros.
+	(mx_inline_cummax, mx_inline_cummin, do_mx_cumminmax_op):
+	New overloaded template functions.
+
+	* dNDArray.cc (NDArray::cummin, NDArray::cummax): New methods.
+	* dNDArray.h: Declare them.
+
+	* fNDArray.cc (FloatNDArray::cummin, FloatNDArray::cummax): New
+	methods.
+	* fNDArray.h: Declare them.
+
+	* CNDArray.cc (ComplexNDArray::cummin, ComplexNDArray::cummax): New
+	methods.
+	* CNDArray.h: Declare them.
+
+	* fCNDArray.cc (FloatComplexNDArray::cummin,
+	FloatComplexNDArray::cummax): New methods.
+	* fCNDArray.h: Declare them.
+
+	* intNDArray.cc (intNDArray::cummin, intNDArray::cummax): New methods.
+	* intNDArray.h: Declare them.
+
 2009-02-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* mx-inlines.cc (OP_MINMAX_FCN): Correct behaviour with NaNs.
 
 2009-02-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* MArray-defs.h: Move declarative part to MArray-decl.h
 	* MArray-decl.h: New source.
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -749,16 +749,40 @@ NDArray::min (int dim) const
 
 NDArray
 NDArray::min (ArrayN<octave_idx_type>& idx_arg, int dim) const
 {
   return do_mx_minmax_op<NDArray> (*this, idx_arg, dim, mx_inline_min);
 }
 
 NDArray
+NDArray::cummax (int dim) const
+{
+  return do_mx_cumminmax_op<NDArray> (*this, dim, mx_inline_cummax);
+}
+
+NDArray
+NDArray::cummax (ArrayN<octave_idx_type>& idx_arg, int dim) const
+{
+  return do_mx_cumminmax_op<NDArray> (*this, idx_arg, dim, mx_inline_cummax);
+}
+
+NDArray
+NDArray::cummin (int dim) const
+{
+  return do_mx_cumminmax_op<NDArray> (*this, dim, mx_inline_cummin);
+}
+
+NDArray
+NDArray::cummin (ArrayN<octave_idx_type>& idx_arg, int dim) const
+{
+  return do_mx_cumminmax_op<NDArray> (*this, idx_arg, dim, mx_inline_cummin);
+}
+
+NDArray
 NDArray::concat (const NDArray& rb, const Array<octave_idx_type>& ra_idx)
 {
   if (rb.numel () > 0)
     insert (rb, ra_idx);
   return *this;
 }
 
 ComplexNDArray
diff --git a/liboctave/dNDArray.h b/liboctave/dNDArray.h
--- a/liboctave/dNDArray.h
+++ b/liboctave/dNDArray.h
@@ -92,16 +92,21 @@ public:
   ComplexNDArray concat (const ComplexNDArray& rb, const Array<octave_idx_type>& ra_idx);
   charNDArray concat (const charNDArray& rb, const Array<octave_idx_type>& ra_idx);
 
   NDArray max (int dim = 0) const;
   NDArray max (ArrayN<octave_idx_type>& index, int dim = 0) const;
   NDArray min (int dim = 0) const;
   NDArray min (ArrayN<octave_idx_type>& index, int dim = 0) const;
   
+  NDArray cummax (int dim = 0) const;
+  NDArray cummax (ArrayN<octave_idx_type>& index, int dim = 0) const;
+  NDArray cummin (int dim = 0) const;
+  NDArray cummin (ArrayN<octave_idx_type>& index, int dim = 0) const;
+
   NDArray& insert (const NDArray& a, octave_idx_type r, octave_idx_type c);
   NDArray& insert (const NDArray& a, const Array<octave_idx_type>& ra_idx);
 
   NDArray abs (void) const;
 
   ComplexNDArray fourier (int dim = 1) const;
   ComplexNDArray ifourier (int dim = 1) const;
 
diff --git a/liboctave/fCNDArray.cc b/liboctave/fCNDArray.cc
--- a/liboctave/fCNDArray.cc
+++ b/liboctave/fCNDArray.cc
@@ -704,16 +704,40 @@ FloatComplexNDArray::min (int dim) const
 }
 
 FloatComplexNDArray
 FloatComplexNDArray::min (ArrayN<octave_idx_type>& idx_arg, int dim) const
 {
   return do_mx_minmax_op<FloatComplexNDArray> (*this, idx_arg, dim, mx_inline_min);
 }
 
+FloatComplexNDArray
+FloatComplexNDArray::cummax (int dim) const
+{
+  return do_mx_cumminmax_op<FloatComplexNDArray> (*this, dim, mx_inline_cummax);
+}
+
+FloatComplexNDArray
+FloatComplexNDArray::cummax (ArrayN<octave_idx_type>& idx_arg, int dim) const
+{
+  return do_mx_cumminmax_op<FloatComplexNDArray> (*this, idx_arg, dim, mx_inline_cummax);
+}
+
+FloatComplexNDArray
+FloatComplexNDArray::cummin (int dim) const
+{
+  return do_mx_cumminmax_op<FloatComplexNDArray> (*this, dim, mx_inline_cummin);
+}
+
+FloatComplexNDArray
+FloatComplexNDArray::cummin (ArrayN<octave_idx_type>& idx_arg, int dim) const
+{
+  return do_mx_cumminmax_op<FloatComplexNDArray> (*this, idx_arg, dim, mx_inline_cummin);
+}
+
 FloatNDArray
 FloatComplexNDArray::abs (void) const
 {
   return FloatNDArray (mx_inline_cabs_dup (data (), length ()),
                        dims ());
 }
 
 FloatComplexNDArray
diff --git a/liboctave/fCNDArray.h b/liboctave/fCNDArray.h
--- a/liboctave/fCNDArray.h
+++ b/liboctave/fCNDArray.h
@@ -80,16 +80,22 @@ public:
   FloatComplexNDArray sumsq (int dim = -1) const;
   FloatComplexNDArray concat (const FloatComplexNDArray& rb, const Array<octave_idx_type>& ra_idx);
   FloatComplexNDArray concat (const FloatNDArray& rb, const Array<octave_idx_type>& ra_idx);
 
   FloatComplexNDArray max (int dim = 0) const;
   FloatComplexNDArray max (ArrayN<octave_idx_type>& index, int dim = 0) const;
   FloatComplexNDArray min (int dim = 0) const;
   FloatComplexNDArray min (ArrayN<octave_idx_type>& index, int dim = 0) const;
+
+  FloatComplexNDArray cummax (int dim = 0) const;
+  FloatComplexNDArray cummax (ArrayN<octave_idx_type>& index, int dim = 0) const;
+  FloatComplexNDArray cummin (int dim = 0) const;
+  FloatComplexNDArray cummin (ArrayN<octave_idx_type>& index, int dim = 0) const;
+
   FloatComplexNDArray& insert (const NDArray& a, octave_idx_type r, octave_idx_type c);
   FloatComplexNDArray& insert (const FloatComplexNDArray& a, octave_idx_type r, octave_idx_type c);
   FloatComplexNDArray& insert (const FloatComplexNDArray& a, const Array<octave_idx_type>& ra_idx);
   
   FloatNDArray abs (void) const;
 
   friend FloatComplexNDArray conj (const FloatComplexNDArray& a);
 
diff --git a/liboctave/fNDArray.cc b/liboctave/fNDArray.cc
--- a/liboctave/fNDArray.cc
+++ b/liboctave/fNDArray.cc
@@ -704,16 +704,40 @@ FloatNDArray::min (int dim) const
 
 FloatNDArray
 FloatNDArray::min (ArrayN<octave_idx_type>& idx_arg, int dim) const
 {
   return do_mx_minmax_op<FloatNDArray> (*this, idx_arg, dim, mx_inline_min);
 }
 
 FloatNDArray
+FloatNDArray::cummax (int dim) const
+{
+  return do_mx_cumminmax_op<FloatNDArray> (*this, dim, mx_inline_cummax);
+}
+
+FloatNDArray
+FloatNDArray::cummax (ArrayN<octave_idx_type>& idx_arg, int dim) const
+{
+  return do_mx_cumminmax_op<FloatNDArray> (*this, idx_arg, dim, mx_inline_cummax);
+}
+
+FloatNDArray
+FloatNDArray::cummin (int dim) const
+{
+  return do_mx_cumminmax_op<FloatNDArray> (*this, dim, mx_inline_cummin);
+}
+
+FloatNDArray
+FloatNDArray::cummin (ArrayN<octave_idx_type>& idx_arg, int dim) const
+{
+  return do_mx_cumminmax_op<FloatNDArray> (*this, idx_arg, dim, mx_inline_cummin);
+}
+
+FloatNDArray
 FloatNDArray::concat (const FloatNDArray& rb, const Array<octave_idx_type>& ra_idx)
 {
   if (rb.numel () > 0)
     insert (rb, ra_idx);
   return *this;
 }
 
 FloatComplexNDArray
diff --git a/liboctave/fNDArray.h b/liboctave/fNDArray.h
--- a/liboctave/fNDArray.h
+++ b/liboctave/fNDArray.h
@@ -89,16 +89,21 @@ public:
   FloatComplexNDArray concat (const FloatComplexNDArray& rb, const Array<octave_idx_type>& ra_idx);
   charNDArray concat (const charNDArray& rb, const Array<octave_idx_type>& ra_idx);
 
   FloatNDArray max (int dim = 0) const;
   FloatNDArray max (ArrayN<octave_idx_type>& index, int dim = 0) const;
   FloatNDArray min (int dim = 0) const;
   FloatNDArray min (ArrayN<octave_idx_type>& index, int dim = 0) const;
   
+  FloatNDArray cummax (int dim = 0) const;
+  FloatNDArray cummax (ArrayN<octave_idx_type>& index, int dim = 0) const;
+  FloatNDArray cummin (int dim = 0) const;
+  FloatNDArray cummin (ArrayN<octave_idx_type>& index, int dim = 0) const;
+
   FloatNDArray& insert (const FloatNDArray& a, octave_idx_type r, octave_idx_type c);
   FloatNDArray& insert (const FloatNDArray& a, const Array<octave_idx_type>& ra_idx);
 
   FloatNDArray abs (void) const;
 
   FloatComplexNDArray fourier (int dim = 1) const;
   FloatComplexNDArray ifourier (int dim = 1) const;
 
diff --git a/liboctave/intNDArray.cc b/liboctave/intNDArray.cc
--- a/liboctave/intNDArray.cc
+++ b/liboctave/intNDArray.cc
@@ -232,13 +232,41 @@ intNDArray<T>::min (int dim) const
 
 template <class T>
 intNDArray<T>
 intNDArray<T>::min (ArrayN<octave_idx_type>& idx_arg, int dim) const
 {
   return do_mx_minmax_op<intNDArray<T> > (*this, idx_arg, dim, mx_inline_min);
 }
 
+template <class T>
+intNDArray<T>
+intNDArray<T>::cummax (int dim) const
+{
+  return do_mx_cumminmax_op<intNDArray<T> > (*this, dim, mx_inline_cummax);
+}
+
+template <class T>
+intNDArray<T>
+intNDArray<T>::cummax (ArrayN<octave_idx_type>& idx_arg, int dim) const
+{
+  return do_mx_cumminmax_op<intNDArray<T> > (*this, idx_arg, dim, mx_inline_cummax);
+}
+
+template <class T>
+intNDArray<T>
+intNDArray<T>::cummin (int dim) const
+{
+  return do_mx_cumminmax_op<intNDArray<T> > (*this, dim, mx_inline_cummin);
+}
+
+template <class T>
+intNDArray<T>
+intNDArray<T>::cummin (ArrayN<octave_idx_type>& idx_arg, int dim) const
+{
+  return do_mx_cumminmax_op<intNDArray<T> > (*this, idx_arg, dim, mx_inline_cummin);
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/intNDArray.h b/liboctave/intNDArray.h
--- a/liboctave/intNDArray.h
+++ b/liboctave/intNDArray.h
@@ -73,16 +73,21 @@ public:
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
 
   intNDArray max (int dim = 0) const;
   intNDArray max (ArrayN<octave_idx_type>& index, int dim = 0) const;
   intNDArray min (int dim = 0) const;
   intNDArray min (ArrayN<octave_idx_type>& index, int dim = 0) const;
   
+  intNDArray cummax (int dim = 0) const;
+  intNDArray cummax (ArrayN<octave_idx_type>& index, int dim = 0) const;
+  intNDArray cummin (int dim = 0) const;
+  intNDArray cummin (ArrayN<octave_idx_type>& index, int dim = 0) const;
+  
   intNDArray sum (int dim) const;
 
   intNDArray abs (void) const;
   intNDArray signum (void) const;
 
   intNDArray squeeze (void) const
     { return intNDArray<T> (MArrayN<T>::squeeze ()); }
 
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -1,12 +1,14 @@
 /*
 
 Copyright (C) 1993, 1994, 1995, 1996, 1997, 1999, 2000, 2001, 2002,
               2003, 2004, 2005, 2006, 2007 John W. Eaton
+Copyright (C) 2009 Jaroslav Hajek
+Copyright (C) 2009 VZLU Prague
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
 
@@ -651,16 +653,196 @@ F (const T *v, T *r, octave_idx_type *ri
           r += l; ri += l; \
         } \
     } \
 }
 
 OP_MINMAX_FCNN (mx_inline_min)
 OP_MINMAX_FCNN (mx_inline_max)
 
+#define OP_CUMMINMAX_FCN(F, OP) \
+template <class T> \
+void F (const T *v, T *r, octave_idx_type n) \
+{ \
+  if (! n) return; \
+  T tmp = v[0]; \
+  octave_idx_type i = 1, j = 0; \
+  if (xisnan (tmp)) \
+    { \
+      for (; i < n && xisnan (v[i]); i++) ; \
+      for (; j < i; j++) r[j] = tmp; \
+      if (i < n) tmp = v[i]; \
+    } \
+  for (; i < n; i++) \
+    if (v[i] OP tmp) \
+      { \
+        for (; j < i; j++) r[j] = tmp; \
+        tmp = v[i]; \
+      } \
+  for (; j < i; j++) r[j] = tmp; \
+} \
+template <class T> \
+void F (const T *v, T *r, octave_idx_type *ri, octave_idx_type n) \
+{ \
+  if (! n) return; \
+  T tmp = v[0]; octave_idx_type tmpi = 0; \
+  octave_idx_type i = 1, j = 0; \
+  if (xisnan (tmp)) \
+    { \
+      for (; i < n && xisnan (v[i]); i++) ; \
+      for (; j < i; j++) { r[j] = tmp; ri[j] = tmpi; } \
+      if (i < n) { tmp = v[i]; tmpi = i; } \
+    } \
+  for (; i < n; i++) \
+    if (v[i] OP tmp) \
+      { \
+        for (; j < i; j++) { r[j] = tmp; ri[j] = tmpi; } \
+        tmp = v[i]; tmpi = i; \
+      } \
+  for (; j < i; j++) { r[j] = tmp; ri[j] = tmpi; } \
+}
+
+OP_CUMMINMAX_FCN (mx_inline_cummin, <)
+OP_CUMMINMAX_FCN (mx_inline_cummax, >)
+
+// Row reductions will be slightly complicated.  We will proceed with checks
+// for NaNs until we detect that no row will yield a NaN, in which case we
+// proceed to a faster code.
+
+#define OP_CUMMINMAX_FCN2(F, OP) \
+template <class T> \
+inline void \
+F (const T *v, T *r, octave_idx_type m, octave_idx_type n) \
+{ \
+  if (! n) return; \
+  bool nan = false; \
+  const T *r0; \
+  octave_idx_type j = 0; \
+  for (octave_idx_type i = 0; i < m; i++) \
+    {  \
+      r[i] = v[i]; \
+      if (xisnan (v[i])) nan = true;  \
+    } \
+  j++; v += m; r0 = r; r += m; \
+  while (nan && j < n) \
+    { \
+      nan = false; \
+      for (octave_idx_type i = 0; i < m; i++) \
+        {  \
+          if (xisnan (v[i])) \
+            { r[i] = r0[i]; nan = true; } \
+          else if (xisnan (r[i]) || v[i] OP r[i]) \
+            r[i] = v[i]; \
+        } \
+      j++; v += m; r0 = r; r += m; \
+    } \
+  while (j < n) \
+    { \
+      for (octave_idx_type i = 0; i < m; i++) \
+        if (v[i] OP r[i]) \
+          r[i] = v[i]; \
+        else \
+          r[i] = r0[i]; \
+      j++; v += m; r0 = r; r += m; \
+    } \
+} \
+template <class T> \
+inline void \
+F (const T *v, T *r, octave_idx_type *ri, \
+   octave_idx_type m, octave_idx_type n) \
+{ \
+  if (! n) return; \
+  bool nan = false; \
+  const T *r0; const octave_idx_type *r0i; \
+  octave_idx_type j = 0; \
+  for (octave_idx_type i = 0; i < m; i++) \
+    {  \
+      r[i] = v[i]; ri[i] = 0; \
+      if (xisnan (v[i])) nan = true;  \
+    } \
+  j++; v += m; r0 = r; r += m; r0i = ri; ri += m;  \
+  while (nan && j < n) \
+    { \
+      nan = false; \
+      for (octave_idx_type i = 0; i < m; i++) \
+        {  \
+          if (xisnan (v[i])) \
+            { r[i] = r0[i]; ri[i] = r0i[i]; nan = true; } \
+          else if (xisnan (r[i]) || v[i] OP r[i]) \
+            { r[i] = v[i]; ri[i] = j; }\
+        } \
+      j++; v += m; r0 = r; r += m; r0i = ri; ri += m;  \
+    } \
+  while (j < n) \
+    { \
+      for (octave_idx_type i = 0; i < m; i++) \
+        if (v[i] OP r[i]) \
+          { r[i] = v[i]; ri[i] = j; } \
+        else \
+          { r[i] = r0[i]; ri[i] = r0i[i]; } \
+      j++; v += m; r0 = r; r += m; r0i = ri; ri += m;  \
+    } \
+}
+
+OP_CUMMINMAX_FCN2 (mx_inline_cummin, <)
+OP_CUMMINMAX_FCN2 (mx_inline_cummax, >)
+
+#define OP_CUMMINMAX_FCNN(F) \
+template <class T> \
+inline void \
+F (const T *v, T *r, octave_idx_type l, \
+   octave_idx_type n, octave_idx_type u) \
+{ \
+  if (! n) return; \
+  if (l == 1) \
+    { \
+      for (octave_idx_type i = 0; i < u; i++) \
+        { \
+          F (v, r, n); \
+          v += n; r += n; \
+        } \
+    } \
+  else \
+    { \
+      for (octave_idx_type i = 0; i < u; i++) \
+        { \
+          F (v, r, l, n); \
+          v += l*n; \
+          r += l*n; \
+        } \
+    } \
+} \
+template <class T> \
+inline void \
+F (const T *v, T *r, octave_idx_type *ri, \
+   octave_idx_type l, octave_idx_type n, octave_idx_type u) \
+{ \
+  if (! n) return; \
+  if (l == 1) \
+    { \
+      for (octave_idx_type i = 0; i < u; i++) \
+        { \
+          F (v, r, ri, n); \
+          v += n; r += n; ri += n; \
+        } \
+    } \
+  else \
+    { \
+      for (octave_idx_type i = 0; i < u; i++) \
+        { \
+          F (v, r, ri, l, n); \
+          v += l*n; \
+          r += l*n; ri += l*n; \
+        } \
+    } \
+}
+
+OP_CUMMINMAX_FCNN (mx_inline_cummin)
+OP_CUMMINMAX_FCNN (mx_inline_cummax)
+
 // Assistant function
 
 inline void
 get_extent_triplet (const dim_vector& dims, int& dim,
                     octave_idx_type& l, octave_idx_type& n,
                     octave_idx_type& u)
 {
   octave_idx_type ndims = dims.length ();
@@ -772,15 +954,53 @@ do_mx_minmax_op (const ArrayType& src, A
   if (idx.dims () != dims) idx = Array<octave_idx_type> (dims);
 
   mx_minmax_op (src.data (), ret.fortran_vec (), idx.fortran_vec (),
                 l, n, u);
 
   return ret;
 }
 
+template <class ArrayType>
+inline ArrayType
+do_mx_cumminmax_op (const ArrayType& src, int dim,
+                    void (*mx_cumminmax_op) (const typename ArrayType::element_type *, 
+                                             typename ArrayType::element_type *,
+                                             octave_idx_type, octave_idx_type, octave_idx_type))
+{
+  octave_idx_type l, n, u;
+  dim_vector dims = src.dims ();
+  get_extent_triplet (dims, dim, l, n, u);
+
+  ArrayType ret (dims);
+  mx_cumminmax_op (src.data (), ret.fortran_vec (), l, n, u);
+
+  return ret;
+}
+
+template <class ArrayType>
+inline ArrayType
+do_mx_cumminmax_op (const ArrayType& src, Array<octave_idx_type>& idx, int dim,
+                    void (*mx_cumminmax_op) (const typename ArrayType::element_type *, 
+                                             typename ArrayType::element_type *,
+                                             octave_idx_type *,
+                                             octave_idx_type, octave_idx_type, octave_idx_type))
+{
+  octave_idx_type l, n, u;
+  dim_vector dims = src.dims ();
+  get_extent_triplet (dims, dim, l, n, u);
+
+  ArrayType ret (dims);
+  if (idx.dims () != dims) idx = Array<octave_idx_type> (dims);
+
+  mx_cumminmax_op (src.data (), ret.fortran_vec (), idx.fortran_vec (),
+                   l, n, u);
+
+  return ret;
+}
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2009-02-17  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/max.cc (MINMAX_DOUBLE_SBODY): New macro.
+	(MINMAX_DOUBLE_BODY): Move part of code to MINMAX_DOUBLE_SBODY.
+	(MINMAX_SINGLE_SBODY): New macro.
+	(MINMAX_SINGLE_BODY): Move part of code to MINMAX_DOUBLE_SBODY.
+	(MINMAX_INT_SBODY): New macro.
+	(MINMAX_INT_BODY): Move part of code to MINMAX_DOUBLE_SBODY.
+	(CUMMINMAX_BODY): New macro.
+	(Fcummin, Fcummax): New DLD functions.
+
 2009-02-17  John W. Eaton  <jwe@octave.org>
 
 	* octave.gperf: Eliminate whitespace to allow gperf 2.7.2 to work.
 
 	* file-io.cc (Ffscanf, Fsscanf): Check error_state after call to
 	octave_stream::scanf.
 	(Ffgetl): Check error state after call to octave_stream::getl.
 	(Ffgets): Check error state after call to octave_stream::gets.
diff --git a/src/DLD-FUNCTIONS/max.cc b/src/DLD-FUNCTIONS/max.cc
--- a/src/DLD-FUNCTIONS/max.cc
+++ b/src/DLD-FUNCTIONS/max.cc
@@ -1,12 +1,13 @@
 /*
 
 Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
               2005, 2006, 2007 John W. Eaton
+Copyright (C) 2009 VZLU Prague
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
 
@@ -36,21 +37,19 @@ along with Octave; see the file COPYING.
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 
 #include "ov-cx-mat.h"
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 
-#define MINMAX_DOUBLE_BODY(FCN) \
+#define MINMAX_DOUBLE_SBODY(FCN) \
 { \
-  bool single_arg = (nargin == 1) || (arg2.is_empty() && nargin == 3);	\
- \
-  if (single_arg && (nargout == 1 || nargout == 0)) \
+  if (nargout == 1 || nargout == 0) \
     { \
       if (arg1.is_real_type ()) \
 	{ \
 	  NDArray m = arg1.array_value (); \
  \
 	  if (! error_state) \
 	    { \
 	      NDArray n = m. FCN (dim); \
@@ -65,17 +64,17 @@ along with Octave; see the file COPYING.
 	    { \
 	      ComplexNDArray n = m. FCN (dim); \
 	      retval(0) = n; \
 	    } \
 	} \
       else \
 	gripe_wrong_type_arg (#FCN, arg1); \
     } \
-  else if (single_arg && nargout == 2) \
+  else if (nargout == 2) \
     { \
       ArrayN<octave_idx_type> index; \
  \
       if (arg1.is_real_type ()) \
 	{ \
 	  NDArray m = arg1.array_value (); \
  \
 	  if (! error_state) \
@@ -99,16 +98,23 @@ along with Octave; see the file COPYING.
  \
       octave_idx_type len = index.numel (); \
  \
       if (len > 0) \
 	retval(1) = NDArray (index, true, true);	\
       else \
 	retval(1) = NDArray (); \
     } \
+}
+
+#define MINMAX_DOUBLE_BODY(FCN) \
+{ \
+  bool single_arg = (nargin == 1) || (arg2.is_empty() && nargin == 3);	\
+  if (single_arg) \
+    MINMAX_DOUBLE_SBODY (FCN) \
   else \
     { \
       int arg1_is_scalar = arg1.is_scalar_type (); \
       int arg2_is_scalar = arg2.is_scalar_type (); \
  \
       int arg1_is_complex = arg1.is_complex_type (); \
       int arg2_is_complex = arg2.is_complex_type (); \
  \
@@ -198,21 +204,19 @@ along with Octave; see the file COPYING.
 			retval(0) = result; \
 		    } \
 		} \
 	    } \
 	} \
     } \
 }
 
-#define MINMAX_SINGLE_BODY(FCN) \
+#define MINMAX_SINGLE_SBODY(FCN) \
 { \
-  bool single_arg = (nargin == 1) || (arg2.is_empty() && nargin == 3);	\
- \
-  if (single_arg && (nargout == 1 || nargout == 0)) \
+  if (nargout == 1 || nargout == 0) \
     { \
       if (arg1.is_real_type ()) \
 	{ \
 	  FloatNDArray m = arg1.float_array_value (); \
  \
 	  if (! error_state) \
 	    { \
 	      FloatNDArray n = m. FCN (dim); \
@@ -227,17 +231,17 @@ along with Octave; see the file COPYING.
 	    { \
 	      FloatComplexNDArray n = m. FCN (dim); \
 	      retval(0) = n; \
 	    } \
 	} \
       else \
 	gripe_wrong_type_arg (#FCN, arg1); \
     } \
-  else if (single_arg && nargout == 2) \
+  else if (nargout == 2) \
     { \
       ArrayN<octave_idx_type> index; \
  \
       if (arg1.is_real_type ()) \
 	{ \
 	  FloatNDArray m = arg1.float_array_value (); \
  \
 	  if (! error_state) \
@@ -261,16 +265,23 @@ along with Octave; see the file COPYING.
  \
       octave_idx_type len = index.numel (); \
  \
       if (len > 0) \
 	retval(1) = NDArray (index, true, true);	\
       else \
 	retval(1) = NDArray (); \
     } \
+}
+
+#define MINMAX_SINGLE_BODY(FCN) \
+{ \
+  bool single_arg = (nargin == 1) || (arg2.is_empty() && nargin == 3);	\
+  if (single_arg) \
+    MINMAX_SINGLE_SBODY(FCN) \
   else \
     { \
       int arg1_is_scalar = arg1.is_scalar_type (); \
       int arg2_is_scalar = arg2.is_scalar_type (); \
  \
       int arg1_is_complex = arg1.is_complex_type (); \
       int arg2_is_complex = arg2.is_complex_type (); \
  \
@@ -360,32 +371,29 @@ along with Octave; see the file COPYING.
 			retval(0) = result; \
 		    } \
 		} \
 	    } \
 	} \
     } \
 }
 
-
-#define MINMAX_INT_BODY(FCN, TYP) \
- { \
-  bool single_arg = (nargin == 1) || (arg2.is_empty() && nargin == 3);	\
- \
-  if (single_arg && (nargout == 1 || nargout == 0)) \
+#define MINMAX_INT_SBODY(FCN, TYP) \
+{ \
+  if (nargout == 1 || nargout == 0) \
     { \
       TYP ## NDArray m = arg1. TYP ## _array_value (); \
  \
       if (! error_state) \
 	{ \
 	  TYP ## NDArray n = m. FCN (dim); \
 	  retval(0) = n; \
 	} \
     } \
-  else if (single_arg && nargout == 2) \
+  else if (nargout == 2) \
     { \
       ArrayN<octave_idx_type> index; \
  \
       TYP ## NDArray m = arg1. TYP ## _array_value (); \
  \
       if (! error_state) \
         { \
 	  TYP ## NDArray n = m. FCN (index, dim);	\
@@ -394,16 +402,23 @@ along with Octave; see the file COPYING.
  \
       octave_idx_type len = index.numel (); \
  \
       if (len > 0) \
 	retval(1) = NDArray (index, true, true);	\
       else \
 	retval(1) = NDArray (); \
     } \
+}
+
+#define MINMAX_INT_BODY(FCN, TYP) \
+ { \
+  bool single_arg = (nargin == 1) || (arg2.is_empty() && nargin == 3);	\
+  if (single_arg) \
+    MINMAX_INT_SBODY (FCN, TYP) \
   else \
     { \
       int arg1_is_scalar = arg1.is_scalar_type (); \
       int arg2_is_scalar = arg2.is_scalar_type (); \
  \
       if (arg1_is_scalar) \
 	{ \
 	  octave_ ## TYP d1 = arg1. TYP ## _scalar_value (); \
@@ -813,13 +828,135 @@ maximum value(s). Thus,\n\
 %! assert (y, [1, 3; 2, 4]);
 %! assert (ndims(y), 2);
 %! assert (i, [1, 1; 1, 1]);
 %! assert (ndims(i), 2);
 
 
 */
 
+#define CUMMINMAX_BODY(FCN) \
+ \
+  octave_value_list retval;  \
+ \
+  int nargin = args.length (); \
+ \
+  if (nargin < 1 || nargin > 2 || nargout > 2) \
+    { \
+      print_usage (); \
+      return retval; \
+    } \
+ \
+  octave_value arg1; \
+  octave_value arg2; \
+ \
+  switch (nargin) \
+    { \
+    case 2: \
+      arg2 = args(1); \
+ \
+    case 1: \
+      arg1 = args(0); \
+      break; \
+ \
+    default: \
+      panic_impossible (); \
+      break; \
+    } \
+ \
+  dim_vector dv = arg1.dims (); \
+  if (error_state) \
+    { \
+      gripe_wrong_type_arg (#FCN, arg1);  \
+      return retval; \
+    } \
+ \
+  int dim = 0; \
+  while ((dim < dv.length ()) && (dv (dim) <= 1)) \
+    dim++; \
+  if (dim == dv.length ()) \
+    dim = 0; \
+ \
+  if (arg1.is_integer_type ()) \
+    { \
+      if (arg1.is_uint8_type ()) \
+        MINMAX_INT_SBODY (FCN, uint8) \
+      else if (arg1.is_uint16_type ()) \
+        MINMAX_INT_SBODY (FCN, uint16) \
+      else if (arg1.is_uint32_type ()) \
+        MINMAX_INT_SBODY (FCN, uint32) \
+      else if (arg1.is_uint64_type ()) \
+        MINMAX_INT_SBODY (FCN, uint64) \
+      else if (arg1.is_int8_type ()) \
+        MINMAX_INT_SBODY (FCN, int8) \
+      else if (arg1.is_int16_type ()) \
+        MINMAX_INT_SBODY (FCN, int16) \
+      else if (arg1.is_int32_type ()) \
+        MINMAX_INT_SBODY (FCN, int32) \
+      else if (arg1.is_int64_type ()) \
+        MINMAX_INT_SBODY (FCN, int64) \
+    } \
+  else if (arg1.is_single_type ()) \
+    MINMAX_SINGLE_SBODY (FCN) \
+  else \
+    MINMAX_DOUBLE_SBODY (FCN) \
+ \
+ return retval;
+
+DEFUN_DLD (cummin, args, nargout,
+  "-*- texinfo -*-\n\
+@deftypefn {Mapping Function} {} cummin (@var{x}, @var{dim})\n\
+@deftypefnx {Mapping Function} {[@var{w}, @var{iw}] =} cummin (@var{x})\n\
+@cindex Utility Functions\n\
+Return the cumulative minimum values. That means, the call\n\
+@example\n\
+  [@var{w}, @var{iw}] = cummin (@var{x}, @var{dim})}\n\
+@end example\n\
+\n\
+@noindent\n\
+is equivalent to the following code:\n\
+@example\n\
+  for i = 1:size (x, dim)\n\
+    [w(i), iw(i)] = min(x(:,@dots{},i,:,@dots{}), dim);\n\
+  endfor\n\
+@end example\n\
+\n\
+@noindent\n\
+but computed in a much faster manner.\n\
+The behaviour if @var{dim} or @var{iw} is unspecified is analogous\n\
+to @code{min}.\n\
+@end deftypefn")
+{
+  CUMMINMAX_BODY (cummin);
+}
+
+DEFUN_DLD (cummax, args, nargout,
+  "-*- texinfo -*-\n\
+@deftypefn {Mapping Function} {} cummax (@var{x}, @var{dim})\n\
+@deftypefnx {Mapping Function} {[@var{w}, @var{iw}] =} cummax (@var{x})\n\
+@cindex Utility Functions\n\
+Return the cumulative maximum values. That means, the call\n\
+@example\n\
+  [@var{w}, @var{iw}] = cummax (@var{x}, @var{dim})}\n\
+@end example\n\
+\n\
+@noindent\n\
+is equivalent to the following code:\n\
+@example\n\
+  for i = 1:size (x, dim)\n\
+    [w(i), iw(i)] = max(x(:,@dots{},i,:,@dots{}), dim);\n\
+  endfor\n\
+@end example\n\
+\n\
+@noindent\n\
+but computed in a much faster manner.\n\
+The behaviour if @var{dim} or @var{iw} is unspecified is analogous\n\
+to @code{max}.\n\
+@end deftypefn")
+{
+  CUMMINMAX_BODY (cummax);
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
