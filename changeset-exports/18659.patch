# HG changeset patch
# User Rik <rik@octave.org>
# Date 1397840708 25200
#      Fri Apr 18 10:05:08 2014 -0700
# Branch stable
# Node ID 3277514f36da6e8bf4b3e943a7987ffc4b9bf7df
# Parent  5fb180e37d7c3bb09a34c305b89573a282001d8a
Fix inverted colors when printing uint8/uint16 images (bug #42107).

* gl2ps-renderer.cc (draw_pixels): Convert the data type to GL_FLOAT, and
divide by the maximum data type value so that range is [0,1].

* gl2ps-renderer.cc (glps_renderer::draw_pixels): Convert and normalize
uint8/uint16 inputs to GL_FLOAT by calling draw_pixels().

diff --git a/libinterp/corefcn/gl2ps-renderer.cc b/libinterp/corefcn/gl2ps-renderer.cc
--- a/libinterp/corefcn/gl2ps-renderer.cc
+++ b/libinterp/corefcn/gl2ps-renderer.cc
@@ -185,34 +185,37 @@ glps_renderer::set_font (const base_prop
   else
     fontname = "Helvetica";
 
   // FIXME: add support for bold and italic
 }
 
 template <typename T>
 static void
-draw_pixels (GLsizei w, GLsizei h, GLenum format, const T *data)
+draw_pixels (GLsizei w, GLsizei h, GLenum format, const T *data, float maxval)
 {
   OCTAVE_LOCAL_BUFFER (GLfloat, a, 3*w*h);
 
-  for (int i = 0; i < 3*w*h; i++)
-    a[i] = data[i];
-
+  // Convert to GL_FLOAT as it is the only type gl2ps accepts.
+  for (unsigned int i = 0; i < 3*w*h; i++)
+    a[i] = data[i] / maxval;
+  
   gl2psDrawPixels (w, h, 0, 0, format, GL_FLOAT, a);
 }
 
 void
 glps_renderer::draw_pixels (GLsizei w, GLsizei h, GLenum format,
                             GLenum type, const GLvoid *data)
 {
-  if (type == GL_UNSIGNED_SHORT)
-    ::draw_pixels (w, h, format, static_cast<const GLushort *> (data));
-  else if (type == GL_UNSIGNED_BYTE)
-    ::draw_pixels (w, h, format, static_cast<const GLubyte *> (data));
+  // gl2psDrawPixels only supports the GL_FLOAT type.
+  // Other formats, such as uint8, must be converted first.
+  if (type == GL_UNSIGNED_BYTE)
+    ::draw_pixels (w, h, format, static_cast<const GLubyte *> (data), 255.0f);
+  else if (type == GL_UNSIGNED_SHORT)
+    ::draw_pixels (w, h, format, static_cast<const GLushort *> (data), 65535.0f);
   else
     gl2psDrawPixels (w, h, 0, 0, format, type, data);
 }
 
 void
 glps_renderer::draw_text (const text::properties& props)
 {
   if (props.get_string ().is_empty ())
