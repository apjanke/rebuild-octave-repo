# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1456536945 18000
#      Fri Feb 26 20:35:45 2016 -0500
# Node ID 105224df233014a061c87cd730388771667a5dd6
# Parent  e789571034bc55165591c92038c073d1bfcf0602
also disallow assignment to keywords in assignin (bug #46459)

* lex.ll (is_keyword): Don't treat "enumeration", "events", "methods",
or "properties" as keywords.
* oct-parse.in.yy, parse.h: New tests.
(Fassignin): Check for assignments to keywords.
(octave_base_parser::valid_id_for_assignment): Delete.
(octave_base_parser::make_assign_op): Use is_keyword instead of
valid_id_for_assignment.

diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1968,19 +1968,23 @@ display_character (char c)
 bool
 is_keyword (const std::string& s)
 {
   // Parsing function names like "set.property_name" inside
   // classdef-style class definitions is simplified by handling the
   // "set" and "get" portions of the names using the same mechanism as
   // is used for keywords.  However, they are not really keywords in
   // the language, so omit them from the list of possible keywords.
+  // Likewise for "enumeration", "events", "methods", and
+  // "properties".
 
   return (octave_kw_hash::in_word_set (s.c_str (), s.length ()) != 0
-          && ! (s == "set" || s == "get"));
+          && ! (s == "set" || s == "get"
+                || s == "enumeration" || s == "events"
+                || s == "methods" || s == "properties"));
 }
 
 DEFUN (iskeyword, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {} {} iskeyword ()\n\
 @deftypefnx {} {} iskeyword (@var{name})\n\
 Return true if @var{name} is an Octave keyword.\n\
 \n\
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -3030,17 +3030,17 @@ octave_base_parser::make_assign_op (int 
 
   if (lhs->is_simple_assign_lhs ())
     {
       // We are looking at a simple assignment statement like x = rhs;
 
       tree_expression *tmp = lhs->remove_front ();
 
       if ((tmp->is_identifier () || tmp->is_index_expression ())
-          && ! valid_id_for_assignment (tmp->name ()))
+          && is_keyword (tmp->name ()))
         {
           std::string kw = tmp->name ();
 
           delete tmp;
           delete lhs;
           delete rhs;
 
           bison_error ("invalid assignment to keyword \"" + kw + "\"", l, c);
@@ -3056,17 +3056,17 @@ octave_base_parser::make_assign_op (int 
     {
       std::list<std::string> names = lhs->variable_names ();
 
       for (std::list<std::string>::const_iterator it = names.begin ();
            it != names.end (); it++)
         {
           std::string kw = *it;
 
-          if (! valid_id_for_assignment (kw))
+          if (is_keyword (kw))
             {
               delete lhs;
               delete rhs;
 
               bison_error ("invalid assignment to keyword \"" + kw + "\"", l, c);
 
               return 0;
             }
@@ -4019,28 +4019,16 @@ octave_base_parser::bison_error (const s
       output_buf << "^";
     }
 
   output_buf << "\n";
 
   parse_error_msg = output_buf.str ();
 }
 
-bool
-octave_base_parser::valid_id_for_assignment (const std::string& s)
-{
-  // is_keyword will return true for some identfiers that are only
-  // keywords in certain contexts.
-
-  return (! is_keyword (s)
-          || (! lexer.parsing_classdef
-              && (s == "enumeration" || s == "events"
-                  || s == "methods" || s == "properties")));
-}
-
 int
 octave_parser::run (void)
 {
   int status = -1;
 
   yypstate *pstate = static_cast<yypstate *> (parser_state);
 
   try
@@ -5126,16 +5114,18 @@ the security considerations that the eva
 %!endfunction
 %!assert (__f(), 2)
 
 % bug #35645
 %!test
 %! [a,] = gcd (1,2);
 %! [a,b,] = gcd (1, 2);
 
+%!error eval ("switch = 13;");
+
 */
 
 DEFUN (assignin, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {} {} assignin (@var{context}, @var{varname}, @var{value})\n\
 Assign @var{value} to @var{varname} in context @var{context}, which\n\
 may be either @qcode{\"base\"} or @qcode{\"caller\"}.\n\
 @seealso{evalin}\n\
@@ -5157,23 +5147,38 @@ may be either @qcode{\"base\"} or @qcode
   else
     error ("assignin: CONTEXT must be \"caller\" or \"base\"");
 
   frame.add_fcn (octave_call_stack::pop);
 
   std::string nm = args(1).xstring_value ("assignin: VARNAME must be a string");
 
   if (valid_identifier (nm))
-    symbol_table::assign (nm, args(2));
+    {
+      // Put the check here so that we don't slow down assignments
+      // generally.  Any that go through Octave's parser should have
+      // already been checked.
+
+      if (is_keyword (nm))
+        error ("assignin: invalid assignment to keyword '%s'", nm.c_str ());
+
+      symbol_table::assign (nm, args(2));
+    }
   else
     error ("assignin: invalid variable name in argument VARNAME");
 
   return retval;
 }
 
+/*
+
+%!error assignin ("base", "switch", "13");
+
+*/
+
 DEFUN (evalin, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {} {} evalin (@var{context}, @var{try})\n\
 @deftypefnx {} {} evalin (@var{context}, @var{try}, @var{catch})\n\
 Like @code{eval}, except that the expressions are evaluated in the context\n\
 @var{context}, which may be either @qcode{\"caller\"} or @qcode{\"base\"}.\n\
 @seealso{eval, assignin}\n\
 @end deftypefn")
@@ -5380,16 +5385,18 @@ s = evalc (\"t = 42\"), t\n\
 %!test
 %! warning ("off", "quiet", "local");
 %! assert (evalc ("warning ('foo')"), "warning: foo\n");
 
 %!test
 %! warning ("off", "quiet", "local");
 %! assert (evalc ("error ('foo')", "warning ('bar')"), "warning: bar\n");
 
+%!error evalc ("switch = 13;");
+
 */
 
 DEFUN (__parser_debug_flag__, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {} {@var{val} =} __parser_debug_flag__ ()\n\
 @deftypefnx {} {@var{old_val} =} __parser_debug_flag__ (@var{new_val})\n\
 Query or set the internal flag that determines whether Octave's parser prints\n\
 debug information as it processes an expression.\n\
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -388,18 +388,16 @@ public:
   // Append a statement to an existing statement list.
   tree_statement_list *
   append_statement_list (tree_statement_list *list, char sep,
                          tree_statement *stmt, bool warn_missing_semi);
 
   // Generic error messages.
   void bison_error (const std::string& s, int l = -1, int c = -1);
 
-  bool valid_id_for_assignment (const std::string& s);
-
   // Contains error message if Bison-generated parser returns non-zero
   // status.
   std::string parse_error_msg;
 
   // Have we found an explicit end to a function?
   bool endfunction_found;
 
   // TRUE means we are in the process of autoloading a function.
