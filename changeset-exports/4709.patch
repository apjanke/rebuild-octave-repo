# HG changeset patch
# User jwe
# Date 1074795053 0
#      Thu Jan 22 18:10:53 2004 +0000
# Node ID cf141edca9351a1f5f1a3a1870b7b01c23747367
# Parent  e5639a6586c41814fdc64191044cbc2a83209e7a
[project @ 2004-01-22 18:10:53 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -838,25 +838,25 @@ Array<T>::resize_and_fill (const dim_vec
     return;
 
   typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
 
   int old_len = length ();
 
   int len = get_size (dv);
-  
+
   rep = new typename Array<T>::ArrayRep (len);
 
   dim_vector dv_old = dimensions;
-  
+
   if (n > dv_old.length ())
     {
       dv_old.resize (n);
-  
+
       for (int i = dv_old.length (); i < n; i++)
 	dv_old.elem (i) = 1;
     }
 
   dimensions = dv;
 
   Array<int> ra_idx (dimensions.length (), 0);
 
@@ -2241,33 +2241,33 @@ assign2 (Array<LT>& lhs, const Array<RT>
   int lhs_nc = lhs.cols ();
 
   int rhs_nr = rhs.rows ();
   int rhs_nc = rhs.cols ();
   
   if (rhs.length () > 2)
     {
       dim_vector dv_tmp = rhs.squeeze().dims ();
-  
+
       switch (dv_tmp.length ())
 	{
 	case 1:
 	  if (rhs_nr == 1)
 	    rhs_nc = dv_tmp.elem (0);
 	  break;
-	  
+
 	case 2:
 	  rhs_nr = dv_tmp.elem (0);
 	  rhs_nc = dv_tmp.elem (1);
 	  break;
 
 	default:
 	  (*current_liboctave_error_handler)
 	    ("Array<T>::assign2: Dimension mismatch");
-	  return 0;	  
+	  return 0;
 	}
     }
 
   idx_vector *tmp = lhs.get_idx ();
 
   idx_vector idx_i;
   idx_vector idx_j;
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,12 +1,12 @@
 2004-01-22  Petter Risholm  <risholm@stud.ntnu.no>
 
-	* Array.cc (Array<T>::assign2): Check for RHS dimensions larger
-	than 2.
+	* Array.cc (Array<T>::resize_and_fill): Correctly copy old elements.
+	(Array<T>::assign2): Check for RHS dimensions larger than 2.
 
 2004-01-21  Petter Risholm  <risholm@stud.ntnu.no>
 
 	* Array.h (Array<T>::chop_trailing_singletons): New function.
 	* Array.cc (Array<T>::assignN): Use it on LHS.
 
 	* Array.cc (Array<T>::assignN): Fix incorrectly nested if statement.
 	Retrieve scalar element by passin 0 instead of an index array.
