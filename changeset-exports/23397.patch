# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1492098163 14400
#      Thu Apr 13 11:42:43 2017 -0400
# Node ID 5970860bc70c92bda686a8dd65214a3d4a8f412f
# Parent  945b53af4655c427c5c3055eb9a9f77a16dc4eab
* Map.m: Minor doc fixes.

diff --git a/scripts/+containers/Map.m b/scripts/+containers/Map.m
--- a/scripts/+containers/Map.m
+++ b/scripts/+containers/Map.m
@@ -14,34 +14,34 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {@var{m} =} containers.Map ()
 ## @deftypefnx {} {@var{m} =} containers.Map (@var{keys}, @var{vals})
-## @deftypefnx {} {@var{m} =} containers.Map (@var{keys}, @var{vals}, "UniformValues", @var{is_uniform})
-## @deftypefnx {} {@var{m} =} containers.Map ("KeyType", @var{kt}, "ValueType", @var{vt}))
+## @deftypefnx {} {@var{m} =} containers.Map (@var{keys}, @var{vals}, @qcode{"UniformValues"}, @var{is_uniform})
+## @deftypefnx {} {@var{m} =} containers.Map (@qcode{"KeyType"}, @var{kt}, @qcode{"ValueType"}, @var{vt})
 ##
 ## Create an object of the containers.Map class that stores a list of key/value
 ## pairs.
 ##
 ## @var{keys} is an array of @emph{unique} keys for the map.  The keys can be
 ## numeric scalars or strings.  The type for numeric keys may be one of
 ## @qcode{"double"}, @qcode{"single"}, @qcode{"int32"}, @qcode{"uint32"},
 ## @qcode{"int64"}, or @qcode{"uint64"}.  Other numeric or logical keys will
 ## be converted to @qcode{"double"}.  A single string key may be entered as is.
 ## Multiple string keys are entered as a cell array of strings.
 ##
 ## @var{vals} is an array of values for the map with the @emph{same} number
 ## of elements as @var{keys}.
 ##
 ## When called with no input arguments a default map is created with strings
-## as the key type and "any" as the value type.
+## as the key type and @qcode{"any"} as the value type.
 ##
 ## The @qcode{"UniformValues"} option specifies specifies whether the values of
 ## the map must be strictly of the same type.  If @var{is_uniform} is true, any
 ## values which would be added to the map are first validated to ensure they
 ## are of the correct type.
 ##
 ## When called with @qcode{"KeyType"} and @qcode{"ValueType"} arguments, create
 ## an empty map with the specified types.  The inputs @var{kt} and @var{vt} are
@@ -52,46 +52,46 @@
 ## @qcode{"double"}, @qcode{"single"}, @qcode{"int32"}, @qcode{"uint32"},
 ## @qcode{"int64"}, @qcode{"uint64"}, @qcode{"logical"}.
 ##
 ## The return value @var{m} is an object of the containers.Map class.
 ## @seealso{struct}
 ## @end deftypefn
 
 ## -*- texinfo -*-
-## @deftypefn {} {} Map.Count ()
+## @deftypefn {} {@var{n} =} Map.Count ()
 ## Return the number of key/value pairs in the map, as a uint64.
 ## @end deftypefn
 ##
-## @deftypefn {} {} Map.KeyType ()
+## @deftypefn {} {@var{type} =} Map.KeyType ()
 ## Return the key type.
 ##
 ## Possible values are listed above when describing input variable @var{kt}.
 ## @end deftypefn
 ##
-## @deftypefn {} {} Map.ValueType ()
+## @deftypefn {} {@var{type} =} Map.ValueType ()
 ## Return the value type.
 ##
 ## Possible values are listed above when describing input variable @var{vt}.
 ## @end deftypefn
 
 ## -*- texinfo -*-
-## @deftypefn {} {@var{} =} Map.isKey (@var{keySet})
+## @deftypefn {} {@var{mask} =} Map.isKey (@var{keySet})
 ## Return a logical array which is true where the elements of @var{keySet} are
 ## keys of the map and false otherwise.
 ##
 ## @var{keySet} is a cell array of keys.  If a single key is being checked, it
 ## can be entered directly as a scalar value or a char vector.
 ## @end deftypefn
 ##
-## @deftypefn {} {@var{key} =} Map.keys ()
+## @deftypefn {} {@var{keys} =} Map.keys ()
 ## Return the sorted list of all keys of the map as a cell vector.
 ## @end deftypefn
 ##
-## @deftypefn {} {@var{l} =} Map.length ()
+## @deftypefn {} {@var{n} =} Map.length ()
 ## Return the number of key/value pairs in the map.
 ## @end deftypefn
 ##
 ## @deftypefn {} {} Map.remove (@var{keySet})
 ## Remove the list of key/value pairs specified by a cell array of keys
 ## @var{keySet} from the map.
 ##
 ## @var{keySet}) can also be a scalar value or a string when specifying a
