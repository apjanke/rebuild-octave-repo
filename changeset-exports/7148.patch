# HG changeset patch
# User jwe
# Date 1194631305 0
#      Fri Nov 09 18:01:45 2007 +0000
# Node ID 735086cfd405f05a1e2ee572b0a048d1922231e9
# Parent  fdb3840cec66c936e602cf901193e7718b198deb
[project @ 2007-11-09 18:01:44 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -4,16 +4,22 @@ 2007-11-09  John W. Eaton  <jwe@octave.o
 
 2007-11-09  Kai Habel  <kai.habel@gmx.de>
 
 	* plot/mesh.m, plot/pcolor.m, plot/surf.m, plot/surface.m:
 	Don't change view if hold is on.
 
 2007-11-09  David Bateman  <dbateman@free.fr>
 
+	* plot/legend.m: Also allow labels for surface and patch types.
+	* plot/__bar__.m: Split into separate patch pbjects to allow
+	setting of the legend.
+	* plot/__go_draw_axes__.m: Set titlespec from keylabel for patch
+	objects as well.
+
 	* plot/area.m, plot/__area__.m: New functions
 	* plot/Makefile.in (SOURCES): Add them to the list of files.
 
 	* plot/patch.m: Correctly handle case of axis handle as first arg.
 
 2007-11-09  Joseph P. Skudlarek  <Jskud@Jskud.com>
 
 	* sparse/spdiags.m: Tweak documentation entries to match other uses.
diff --git a/scripts/plot/__bar__.m b/scripts/plot/__bar__.m
--- a/scripts/plot/__bar__.m
+++ b/scripts/plot/__bar__.m
@@ -17,17 +17,18 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## Undocumented internal function.
 
 ## Author: jwe
 
 function varargout = __bar__ (vertical, func, varargin)
 
-  width = 0.8;
+  ## Slightly smaller than 0.8 to avoid clipping issue in gnuplot 4.0
+  width = 0.8 - 10 * eps; 
   group = true;
 
   if (nargin < 3)
     print_usage ();
   endif
 
   if (nargin > 3 && isnumeric (varargin{2}))
     x = varargin{1};
@@ -128,42 +129,51 @@ function varargout = __bar__ (vertical, 
   endif
 
   yb = zeros (4*ylen, ycols);
   yb(1:4:4*ylen,:) = y0;
   yb(2:4:4*ylen,:) = y1;
   yb(3:4:4*ylen,:) = y1;
   yb(4:4:4*ylen,:) = y0;
 
-  xb = reshape (xb, 4, numel (xb) /  4);
-  yb = reshape (yb, 4, numel (yb) /  4);
+  xb = reshape (xb, [4, numel(xb) / 4 / ycols, ycols]);
+  yb = reshape (yb, [4, numel(yb) / 4 / ycols, ycols]);
 
-  if (! have_line_spec)
-    colors = [1, 0, 0; 0, 1, 0; 0, 0, 1; 1, 1, 0; 1, 0, 1; 0, 1, 1];
-    newargs = [{shiftdim(colors (mod (floor ([0 : (ycols * ylen - 1)] / ylen), 
-				      6) + 1, :), -1)}, newargs];
-  endif
-
+  color = [1, 0, 0; 0, 1, 0; 0, 0, 1; 1, 1, 0; 1, 0, 1; 0, 1, 1];
   if (vertical)
-    if (nargout < 1)
+    if (nargout < 2)
       newplot ();
-      patch (xb, yb, newargs {:});
-    elseif (nargout < 2)
-      newplot ();
-      varargout{1} = patch (xb, yb, newargs {:});
+      tmp = [];
+      for i = 1 : ycols
+	if (! have_line_spec)
+	  tmp = [tmp; patch(xb(:,:,i), yb(:,:,i), color(i,:), newargs {:})];
+	else
+	  tmp = [tmp; patch(xb(:,:,i), yb(:,:,i), newargs {:})];
+	endif
+      endfor
+      if (nargout == 1)
+	varargout{1} = tmp;
+      endif
     else
       varargout{1} = xb;
       varargout{2} = yb;
     endif
   else
-    if (nargout < 1)
+    if (nargout < 2)
       newplot ();
-      patch (yb, xb, newargs{:});
-    elseif (nargout < 2)
-      newplot ();
-      varargout{1} = patch (yb, xb, newargs{:});
+      tmp = [];
+      for i = 1 : ycols
+	if (! have_line_spec)
+	  tmp = [tmp; patch(yb(:,:,i), xb(:,:,i), color(i,:), newargs {:})];
+	else
+	  tmp = [tmp; patch(yb(:,:,i), xb(:,:,i), newargs {:})];
+	endif
+      endfor
+      if (nargout == 1)
+	varargout{1} = tmp;
+      endif
     else
       varargout{1} = yb;
       varargout{2} = xb;
     endif
   endif
 
 endfunction
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -451,17 +451,22 @@ function __go_draw_axes__ (h, plot_strea
 	   endif
 
 	   if (! isnan (xcol) && ! isnan (ycol))
 	     ## Is the patch closed or not
 	     data_idx++;
 	     is_image_data(data_idx) = false;
 	     parametric(data_idx) = false;
 	     have_cdata(data_idx) = false;
-             titlespec{data_idx} = "title \"\"";
+	     if (i > 1 || isempty (obj.keylabel))
+	       titlespec{data_idx} = "title \"\"";
+	     else
+	       tmp = undo_string_escapes (obj.keylabel);
+	       titlespec{data_idx} = strcat ("title \"", tmp, "\"");
+	     endif
 	     usingclause{data_idx} = "";
              if (isfield (obj, "facecolor") && isfield (obj, "cdata"))
                if (strncmp (obj.facecolor, "none", 4))
 		 color = [1, 1, 1];
 
                elseif (strncmp (obj.facecolor, "flat", 4)
 		       || strncmp (obj.facecolor, "interp", 6))
 		 if (ndims (obj.cdata) == 2
diff --git a/scripts/plot/legend.m b/scripts/plot/legend.m
--- a/scripts/plot/legend.m
+++ b/scripts/plot/legend.m
@@ -54,21 +54,21 @@
 ##   left bottom
 ## @item 
 ## @item @tab outside @tab
 ##   can be appended to any location string
 ## @end multitable
 ##
 ## Some specific functions are directly available using @var{func}:
 ##
-## @table @code
+## @table @asis
 ## @item "show"
 ##   Show legends from the plot
 ## @item "hide"
-## @itemx off
+## @itemx "off"
 ##   Hide legends from the plot
 ## @item "boxon"
 ##   Draw a box around legends
 ## @item "boxoff"
 ##   Withdraw the box around legends
 ## @item "left"
 ##   Text is to the left of the keys
 ## @item "right"
@@ -153,31 +153,36 @@ function legend (varargin)
     else
       error ("legend: expecting argument to be a character string");
     endif
   endif
 
   if (nargs > 0)
     have_data = false;
     for i = 1:nkids
-      if (strcmp (get (kids(k), "type"), "line"))
+      if (strcmp (get (kids(k), "type"), "line")
+	  || strcmp (get (kids(k), "type"), "surface")
+	  || strcmp (get (kids(k), "type"), "patch"))
 	have_data = true;
 	break;
       endif
     endfor
     if (! have_data)
       warning ("legend: plot data is empty; setting key labels has no effect");
     endif
   endif
 
   warned = false;
   for i = 1:nargs
     arg = varargin{i};
     if (ischar (arg))
-      while (k <= nkids && ! strcmp (get (kids(k), "type"), "line"))
+      while (k <= nkids
+	     && ! (strcmp (get (kids(k), "type"), "line")
+		   || strcmp (get (kids(k), "type"), "surface")
+		   || strcmp (get (kids(k), "type"), "patch")))
 	k++;
       endwhile
       if (k <= nkids)
 	set (kids(k), "keylabel", arg);
 	turn_on_legend = true;
 	k++;
       elseif (! warned)
 	warned = true;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,12 @@
 2007-11-09  David Bateman  <dbateman@free.fr>
 
+	* graphics.cc, graphics.h.in (class patch): Add the field "keylabel".
+
 	* data.cc (Fcputime) [__WIN32__]: Correct scaling of sys and usr times.
 
 	* graphics.cc (is_handle): Handle must be a real scalar.
 
 2007-11-09  Joseph P. Skudlarek  <Jskud@Jskud.com>
 
 	* data.cc (Fislogical): Fix typo in documentation entry.
 
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -2133,17 +2133,18 @@ patch::properties::properties (const gra
     facecolor (radio_values ("{flat}|none|interp")),
     facealpha (1.0),
     edgecolor (color_values(0, 0, 0), radio_values ("flat|none|interp")),
     linestyle ("-"),
     linewidth (0.5),
     marker ("none"),
     markeredgecolor ("auto"),
     markerfacecolor ("none"),
-    markersize (1)
+    markersize (1),
+    keylabel ("")
 { }
 
 void
 patch::properties::set (const property_name& name,
 			const octave_value& val)
 {
   bool modified = true;
 
@@ -2181,16 +2182,18 @@ patch::properties::set (const property_n
   else if (name.compare ("marker"))
     set_marker (val);
   else if (name.compare ("markeredgecolor"))
     set_markeredgecolor (val);
   else if (name.compare ("markerfacecolor"))
     set_markerfacecolor (val);
   else if (name.compare ("markersize"))
     set_markersize (val);
+  else if (name.compare ("keylabel"))
+    set_keylabel (val);
   else
     {
       modified = false;
       warning ("set: invalid property `%s'", name.c_str ());
     }
 
   if (modified)
     mark_modified ();
@@ -2215,16 +2218,17 @@ patch::properties::get (void) const
   m.assign ("facealpha", facealpha);
   m.assign ("edgecolor", edgecolor);
   m.assign ("linestyle", linestyle);
   m.assign ("linewidth", linewidth);
   m.assign ("marker", marker);
   m.assign ("markeredgecolor", markeredgecolor);
   m.assign ("markerface", markerfacecolor);
   m.assign ("markersize", markersize);
+  m.assign ("keylabel", keylabel);
 
   return m;
 }
 
 octave_value
 patch::properties::get (const property_name& name) const
 {
   octave_value retval;
@@ -2262,16 +2266,18 @@ patch::properties::get (const property_n
   else if (name.compare ("marker"))
     retval = marker;
   else if (name.compare ("markeredgecolor"))
     retval = markeredgecolor;
   else if (name.compare ("markerfacecolor"))
     retval = markerfacecolor;
   else if (name.compare ("markersize"))
     retval = markersize;
+  else if (name.compare ("keylabel"))
+    retval = keylabel;
   else
     warning ("get: invalid property `%s'", name.c_str ());
 
   return retval;
 }
 
 property_list::pval_map_type
 patch::properties::factory_defaults (void)
@@ -2288,17 +2294,17 @@ patch::properties::factory_defaults (voi
   m["facealpha"] = 1.0;
   m["edgecolor"] = color_property ("black");
   m["linestyle"] = "-";
   m["linewidth"] = 0.5;
   m["marker"] = "none";
   m["markeredgecolor"] = "auto";
   m["markerfacecolor"] = "none";
   m["markersize"] = 1;
-
+  m["keylabel"] = "";
 
   return m;
 }
 
 std::string patch::properties::go_name ("patch");
 
 // ---------------------------------------------------------------------
 
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -1601,16 +1601,17 @@ public:
       octave_value facealpha
       color_property edgecolor a
       octave_value linestyle
       octave_value linewidth
       octave_value marker
       octave_value markeredgecolor
       octave_value markerfacecolor
       octave_value markersize
+      octave_value keylabel
     END_PROPERTIES
 
     static std::string go_name;
   };
 
 private:
   properties xproperties;
 
