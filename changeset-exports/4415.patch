# HG changeset patch
# User jwe
# Date 1053120033 0
#      Fri May 16 21:20:33 2003 +0000
# Node ID ed8c4aaa8648171c026269250014d1985362e59c
# Parent  f071adceaa04dfcc525523277491c38e52d7e31b
[project @ 2003-05-16 21:20:33 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2003-05-16  Paul Kienzle <pkienzle@users.sf.net>
+
+	* oct-rand.cc: Use liboctave's clock layer instead of the system clock.
+
 2003-05-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in: Handle DESTDIR.
 
 	* kpse.cc (kpse_path_iterator::next): Skip consecutive colons here.
 	(kpse_path_iterator::set_end): Don't miss last element when not
 	followed by a colon.
 
diff --git a/liboctave/oct-rand.cc b/liboctave/oct-rand.cc
--- a/liboctave/oct-rand.cc
+++ b/liboctave/oct-rand.cc
@@ -22,16 +22,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "oct-rand.h"
+#include "oct-time.h"
 
 // Possible distributions of random numbers.  This was handled with an
 // enum, but unwind_protecting that doesn't work so well.
 #define uniform_dist 1
 #define normal_dist 2
 
 // Current distribution of random numbers.
 static int current_distribution = uniform_dist;
@@ -74,27 +75,23 @@ force_to_fit_range (int i, int lo, int h
 // Make the random number generator give us a different sequence every
 // time we start octave unless we specifically set the seed.  The
 // technique used below will cycle monthly, but it it does seem to
 // work ok to give fairly different seeds each time Octave starts.
 
 static void
 do_initialization (void)
 {
-  time_t now;
-  struct tm *tm;
- 
-  time (&now);
-  tm = localtime (&now);
+  octave_localtime tm;
  
-  int hour = tm->tm_hour + 1;
-  int minute = tm->tm_min + 1;
-  int second = tm->tm_sec + 1;
+  int hour = tm.hour() + 1;
+  int minute = tm.min() + 1;
+  int second = tm.sec() + 1;
 
-  int s0 = tm->tm_mday * hour * minute * second;
+  int s0 = tm.mday() * hour * minute * second;
   int s1 = hour * minute * second;
 
   s0 = force_to_fit_range (s0, 1, 2147483563);
   s1 = force_to_fit_range (s1, 1, 2147483399);
 
   F77_FUNC (setall, SETALL) (s0, s1);
 
   initialized = true;
