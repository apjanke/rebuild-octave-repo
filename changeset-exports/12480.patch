# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1298693525 28800
#      Fri Feb 25 20:12:05 2011 -0800
# Node ID 139f993936af97c22536b71d0b648b015028cb71
# Parent  c741c1f2789e5fee24cf7d6361f3824ed8604924
Uppercase variables in script error strings.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2010-02-22  Rik  <octave@nomad.inbox5.com>
+
+	* general/bitcmp.m, general/bitget.m, general/bitset.m,
+	miscellaneous/license.m, special-matrix/pascal.m,
+	statistics/base/quantile.m, statistics/tests/cor_test.m,
+	strings/substr.m: Uppercase variables in error strings.
+
 2011-02-25  Jordi Guti√©rrez Hermoso  <jordigh@gmail.com>
 
 	* miscellaneous/warnings_ids.m: Add a warning description for
 	Matlab-style short-circuiting
 
 2011-02-24  Ben Abbott  <bpabbott@mac.com>
 
 	* plot/subplot.m: Document using INDEX as a vector.
diff --git a/scripts/general/bitcmp.m b/scripts/general/bitcmp.m
--- a/scripts/general/bitcmp.m
+++ b/scripts/general/bitcmp.m
@@ -72,17 +72,17 @@ function C = bitcmp (A, k)
     bmax = intmax (class (A));
   endif
 
   if (nargin == 1 || k == amax)
     C = bitxor (A, bmax);
   else
     m = double (k);
     if (any (m < 1) || any (m > amax))
-      error ("bitcmp: k must be in the range [1,%d]", amax);
+      error ("bitcmp: K must be in the range [1,%d]", amax);
     endif
     mask = bitshift (bmax, k - amax);
     C = bitxor (bitand (A, mask), mask);
   endif
 endfunction
 
 
 %!test
diff --git a/scripts/general/bitget.m b/scripts/general/bitget.m
--- a/scripts/general/bitget.m
+++ b/scripts/general/bitget.m
@@ -68,14 +68,14 @@ function C = bitget (A, n)
       _conv = @int64;
     else
       error ("bitget: invalid class %s", class (A));
     endif
   endif
 
   m = double (n(:));
   if (any (m < 1) || any (m > Amax))
-    error ("bitget: n must be in the range [1,%d]", Amax);
+    error ("bitget: N must be in the range [1,%d]", Amax);
   endif
 
   C = bitand (A, bitshift (_conv (1), uint8 (n) - uint8 (1))) != _conv (0);
 
 endfunction
diff --git a/scripts/general/bitset.m b/scripts/general/bitset.m
--- a/scripts/general/bitset.m
+++ b/scripts/general/bitset.m
@@ -76,17 +76,17 @@ function C = bitset (A, n, val)
     else
       error ("bitset: invalid class %s", class (A));
     endif
     Bmax = intmax (class (A));
   endif
 
   m = double (n(:));
   if (any (m < 1) || any (m > Amax))
-    error ("bitset: n must be in the range [1,%d]", Amax);
+    error ("bitset: N must be in the range [1,%d]", Amax);
   endif
 
   mask = bitshift (_conv (1), uint8 (n) - uint8 (1));
   C = bitxor (A, bitand (A, mask));
 
   if (val)
     C = bitor (A, mask);
   endif
diff --git a/scripts/miscellaneous/license.m b/scripts/miscellaneous/license.m
--- a/scripts/miscellaneous/license.m
+++ b/scripts/miscellaneous/license.m
@@ -154,17 +154,17 @@ function retval = license (varargin)
           if (strcmp (varargin{3}, "enable"))
             __octave_licenses__{p,3} = true;
           elseif (strcmp (varargin{3}, "disable"))
             __octave_licenses__{p,3} = false;
           else
             error ("TOGGLE must be either `enable' of `disable'");
           endif
         else
-          error ("feature `%s' not found", feature);
+          error ("FEATURE `%s' not found", feature);
         endif
       endif
 
     elseif (strcmp (varargin{1}, "checkout"))
 
       if (nin != 2)
         usage ("retval = license (\"checkout\", feature)");
       endif
diff --git a/scripts/special-matrix/pascal.m b/scripts/special-matrix/pascal.m
--- a/scripts/special-matrix/pascal.m
+++ b/scripts/special-matrix/pascal.m
@@ -47,17 +47,17 @@ function retval = pascal (n, t)
     t = 0;
   endif
 
   if (! isscalar (n) || ! isscalar (t))
     error ("pascal: expecting scalar arguments, found something else");
   endif
 
   if (t < -1 || t > 2)
-    error ("pascal: expecting t to be -1, 0, 1, or 2, found %d", t);
+    error ("pascal: expecting T to be -1, 0, 1, or 2, found %d", t);
   endif
 
   retval = zeros (n);
   retval(:,1) = 1;
 
   if (t == -1)
     for j = 2:n
       retval(j:n,j) = cumsum (retval (j-1:n-1,j-1));
diff --git a/scripts/statistics/base/quantile.m b/scripts/statistics/base/quantile.m
--- a/scripts/statistics/base/quantile.m
+++ b/scripts/statistics/base/quantile.m
@@ -368,17 +368,17 @@ function inv = __quantile__ (x, p, metho
             ## Median unbiased .
             p = kron (p, m+1/3) + 1/3;
 
           case 9
             ## Approximately unbiased respecting order statistics.
             p = kron (p, m+0.25) + 0.375;
 
           otherwise
-            error ("quantile: Unknown method, '%d'", method);
+            error ("quantile: Unknown METHOD, '%d'", method);
         endswitch
 
         ## Duplicate single values.
         imm1 = mm == 1;
         x(2,imm1) = x(1,imm1);
 
         ## Interval indices.
         pi = max (min (floor (p), mm-1), 1);
diff --git a/scripts/statistics/tests/cor_test.m b/scripts/statistics/tests/cor_test.m
--- a/scripts/statistics/tests/cor_test.m
+++ b/scripts/statistics/tests/cor_test.m
@@ -108,17 +108,17 @@ function t = cor_test (x, y, alt, method
   elseif (m == "s")
     rho = spearman (x, y);
     t.method = "Spearman's rank correlation rho";
     t.params = [];
     t.stat = sqrt (n-1) * (rho - 6/(n^3-n));
     t.dist = "stdnormal";
     cdf = stdnormal_cdf (t.stat);
   else
-    error ("cor_test: method `%s' not recognized", method);
+    error ("cor_test: METHOD `%s' not recognized", method);
   endif
 
   if (strcmp (alt, "!=") || strcmp (alt, "<>"))
     t.pval = 2 * min (cdf, 1 - cdf);
   elseif (strcmp (alt, ">"))
     t.pval = 1 - cdf;
   elseif (strcmp (alt, "<"))
     t.pval = cdf;
diff --git a/scripts/strings/substr.m b/scripts/strings/substr.m
--- a/scripts/strings/substr.m
+++ b/scripts/strings/substr.m
@@ -59,17 +59,17 @@ function t = substr (s, offset, len)
         eos = offset + len - 1;
       endif
       if (eos <= nc)
         t = s (:, offset:eos);
       else
         error ("substr: length = %d out of range", len);
       endif
     else
-      error ("substr: offset = %d out of range", offset);
+      error ("substr: OFFSET = %d out of range", offset);
     endif
   else
     error ("substr: expecting string argument");
   endif
 
 endfunction
 
 %!assert(strcmp (substr ("This is a test string", 6, 9), "is a test"));
