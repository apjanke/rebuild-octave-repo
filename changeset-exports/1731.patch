# HG changeset patch
# User jwe
# Date 821270278 0
#      Wed Jan 10 10:37:58 1996 +0000
# Node ID c43d042f20be424d04efe9a21f827472bee22815
# Parent  a744f4d0ba5927b80bfacdc64e69471a5b3f0000
[project @ 1996-01-10 10:37:09 by jwe]

diff --git a/liboctave/chMatrix.h b/liboctave/chMatrix.h
--- a/liboctave/chMatrix.h
+++ b/liboctave/chMatrix.h
@@ -45,16 +45,17 @@ friend class ComplexMatrix;
 public:
 
   charMatrix (void) : MArray2<char> () { }
   charMatrix (int r, int c) : MArray2<char> (r, c) { }
   charMatrix (int r, int c, char val) : MArray2<char> (r, c, val) { }
   charMatrix (const MArray2<char>& a) : MArray2<char> (a) { }
   charMatrix (const charMatrix& a) : MArray2<char> (a) { }
   charMatrix (const char *s);
+  charMatrix (const string& s);
 
   charMatrix& operator = (const charMatrix& a)
     {
       MArray2<char>::operator = (a);
       return *this;
     }
 
   int operator == (const charMatrix& a) const;
diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -660,16 +660,23 @@ TC_REP::tree_constant_rep (const Complex
 
 TC_REP::tree_constant_rep (const char *s)
 {
   char_matrix = new charMatrix (s);
   type_tag = char_matrix_constant_str;
   orig_text = 0;
 }
 
+TC_REP::tree_constant_rep (const string& s)
+{
+  char_matrix = new charMatrix (s);
+  type_tag = char_matrix_constant_str;
+  orig_text = 0;
+}
+
 TC_REP::tree_constant_rep (const charMatrix& chm, int is_str)
 {
   char_matrix = new charMatrix (chm);
   type_tag = is_str ? char_matrix_constant_str : char_matrix_constant;
   orig_text = 0;
 }
 
 TC_REP::tree_constant_rep (double b, double l, double i)
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -94,16 +94,17 @@ private:
 
 	tree_constant_rep (const Complex& c);
 	tree_constant_rep (const ComplexMatrix& m);
 	tree_constant_rep (const ComplexDiagMatrix& d);
 	tree_constant_rep (const ComplexRowVector& v, int pcv);
 	tree_constant_rep (const ComplexColumnVector& v, int pcv);
 
 	tree_constant_rep (const char *s);
+	tree_constant_rep (const string& s);
 	tree_constant_rep (const charMatrix& chm, int is_string);
 
 	tree_constant_rep (double base, double limit, double inc);
 	tree_constant_rep (const Range& r);
 
 	tree_constant_rep (const Octave_map& m);
 
 	tree_constant_rep (tree_constant_rep::constant_type t);
@@ -338,16 +339,17 @@ public:
   //                  ColumnVector
   // complex scalar   Complex
   // complex matrix   ComplexMatrix
   //                  ComplexDiagMatrix
   //                  ComplexRowVector
   //                  ComplexColumnVector
   // char matrix      charMatrix
   // string           char* (null terminated)
+  //                  string
   //                  charMatrix
   // range            double, double, double
   //                  Range
   // map              Octave_map
   // magic colon      tree_constant::magic_colon
   // all_va_args      tree_constant::all_va_args
 
   tree_constant (void) : tree_fvc ()
@@ -381,16 +383,19 @@ public:
     { rep = new tree_constant_rep (v, pcv); rep->count = 1; }
 
   tree_constant (const ComplexColumnVector& v, int pcv = -1) : tree_fvc () 
     { rep = new tree_constant_rep (v, pcv); rep->count = 1; }
 
   tree_constant (const char *s, int l = -1, int c = -1) : tree_fvc (l, c)
     { rep = new tree_constant_rep (s); rep->count = 1; }
 
+  tree_constant (const string& s, int l = -1, int c = -1) : tree_fvc (l, c)
+    { rep = new tree_constant_rep (s); rep->count = 1; }
+
   tree_constant (const charMatrix& chm, int is_string = 0) : tree_fvc ()
     { rep = new tree_constant_rep (chm, is_string); rep->count = 1; }
 
   tree_constant (double base, double limit, double inc) : tree_fvc ()
     { rep = new tree_constant_rep (base, limit, inc); rep->count = 1; }
 
   tree_constant (const Range& r) : tree_fvc ()
     { rep = new tree_constant_rep (r); rep->count = 1; }
