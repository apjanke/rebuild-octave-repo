# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1541189588 14400
#      Fri Nov 02 16:13:08 2018 -0400
# Node ID d2aae3570c8165bc5b75b68f2f46d4932cdfd666
# Parent  f48504a14fdb587033f0eb8ff999f13b9417f122
perform automatic function variable binding in tree_evaluator

* pt-eval.h, pt-eval.cc (tree_evaluator::bind_auto_fcn_vars):
New function, adapted from octave_user_function::bind_automatic_vars.
Always define ".argn." variable.

(tree_evaluator::execute_user_function): Change usage and call
bind_auto_fcn_vars earlier.

* ov-usr-fcn.h, ov-usr-fcn.cc (octave_user_function::bind_automatic_vars):
Delete.

diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -518,63 +518,16 @@ void
 octave_user_function::print_code_function_trailer (const std::string& prefix)
 {
   octave::tree_print_code tpc (octave_stdout, prefix);
 
   tpc.visit_octave_user_function_trailer (*this);
 }
 
 void
-octave_user_function::bind_automatic_vars
-  (octave::tree_evaluator& tw, const string_vector& arg_names,
-   int nargin, int nargout, const octave_value_list& va_args)
-{
-  if (! arg_names.empty ())
-    {
-      // It is better to save this in the hidden variable .argn. and
-      // then use that in the inputname function instead of using argn,
-      // which might be redefined in a function.  Keep the old argn name
-      // for backward compatibility of functions that use it directly.
-
-      charMatrix chm (arg_names, tw.string_fill_char ());
-      m_scope.force_assign ("argn", chm);
-      m_scope.force_assign (".argn.", Cell (arg_names));
-
-      m_scope.mark_hidden (".argn.");
-
-      m_scope.mark_automatic ("argn");
-      m_scope.mark_automatic (".argn.");
-    }
-
-  m_scope.force_assign (".nargin.", nargin);
-  m_scope.force_assign (".nargout.", nargout);
-
-  m_scope.mark_hidden (".nargin.");
-  m_scope.mark_hidden (".nargout.");
-
-  m_scope.mark_automatic (".nargin.");
-  m_scope.mark_automatic (".nargout.");
-
-  m_scope.force_assign (".saved_warning_states.", octave_value ());
-
-  m_scope.mark_automatic (".saved_warning_states.");
-  m_scope.mark_automatic (".saved_warning_states.");
-
-  if (takes_varargs ())
-    m_scope.assign ("varargin", va_args.cell_value ());
-
-  Matrix ignored_fcn_outputs = tw.ignored_fcn_outputs ();
-
-  m_scope.force_assign (".ignored.", ignored_fcn_outputs);
-
-  m_scope.mark_hidden (".ignored.");
-  m_scope.mark_automatic (".ignored.");
-}
-
-void
 octave_user_function::restore_warning_states (void)
 {
   octave_value val = m_scope.varval (".saved_warning_states.");
 
   if (val.is_defined ())
     {
       // Fail spectacularly if .saved_warning_states. is not an
       // octave_map (or octave_scalar_map) object.
diff --git a/libinterp/octave-value/ov-usr-fcn.h b/libinterp/octave-value/ov-usr-fcn.h
--- a/libinterp/octave-value/ov-usr-fcn.h
+++ b/libinterp/octave-value/ov-usr-fcn.h
@@ -459,19 +459,14 @@ private:
 
   void print_code_function_header (const std::string& prefix);
 
   void print_code_function_trailer (const std::string& prefix);
 
   // XXX FIXME (public)
 public:
 
-  void bind_automatic_vars (octave::tree_evaluator& tw,
-                            const string_vector& arg_names,
-                            int nargin, int nargout,
-                            const octave_value_list& va_args);
-
   void restore_warning_states (void);
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -1461,17 +1461,19 @@ namespace octave
         std::cerr << name () << " scope: " << fcn_scope
                   << " call depth: " << user_function.call_depth ()
                   << " context: " << fcn_scope.current_context () << std::endl;
 #endif
 
         frame.add_method (fcn_scope, &symbol_scope::pop_context);
       }
 
-    string_vector arg_names = xargs.name_tags ();
+    bind_auto_fcn_vars (fcn_scope, xargs.name_tags (), args.length (),
+                        nargout, user_function.takes_varargs (),
+                        user_function.all_va_args (args));
 
     tree_parameter_list *param_list = user_function.parameter_list ();
 
     if (param_list && ! param_list->varargs_only ())
       {
 #if 0
         std::cerr << "defining param list, scope: " << fcn_scope
                   << ", context: " << fcn_scope.current_context () << std::endl;
@@ -1519,20 +1521,16 @@ namespace octave
         // variables will be cleared before the parameter lists are
         // cleared.  That way, any function parameters that have been
         // declared global will be unmarked as global before they are
         // undefined by the clear_param_list cleanup function.
 
         frame.add_method (fcn_scope, &symbol_scope::refresh);
       }
 
-    user_function.bind_automatic_vars (*this, arg_names, args.length (),
-                                       nargout,
-                                       user_function.all_va_args (args));
-
     frame.add_method (&user_function,
                       &octave_user_function::restore_warning_states);
 
     // Evaluate the commands that make up the function.
 
     frame.protect_var (m_statement_context);
     m_statement_context = SC_FUNCTION;
 
@@ -3621,16 +3619,58 @@ namespace octave
 
     bool quit = (m_returning || m_breaking || m_continuing);
 
     if (m_breaking)
       m_breaking--;
 
     return quit;
   }
+
+  void tree_evaluator::bind_auto_fcn_vars (symbol_scope& scope,
+                                           const string_vector& arg_names,
+                                           int nargin, int nargout,
+                                           bool takes_varargs,
+                                           const octave_value_list& va_args)
+  {
+    scope.force_assign (".argn.", Cell (arg_names));
+    scope.mark_hidden (".argn.");
+    scope.mark_automatic (".argn.");
+
+    scope.force_assign (".ignored.", ignored_fcn_outputs ());
+    scope.mark_hidden (".ignored.");
+    scope.mark_automatic (".ignored.");
+
+    scope.force_assign (".nargin.", nargin);
+    scope.mark_hidden (".nargin.");
+    scope.mark_automatic (".nargin.");
+
+    scope.force_assign (".nargout.", nargout);
+    scope.mark_hidden (".nargout.");
+    scope.mark_automatic (".nargout.");
+
+    scope.force_assign (".saved_warning_states.", octave_value ());
+    scope.mark_hidden (".saved_warning_states.");
+    scope.mark_automatic (".saved_warning_states.");
+
+    if (! arg_names.empty ())
+      {
+        // It is better to save this in the hidden variable .argn. and
+        // then use that in the inputname function instead of using argn,
+        // which might be redefined in a function.  Keep the old argn name
+        // for backward compatibility of functions that use it directly.
+
+        charMatrix chm (arg_names, string_fill_char ());
+        scope.force_assign ("argn", chm);
+        scope.mark_automatic ("argn");
+      }
+
+    if (takes_varargs)
+      scope.assign ("varargin", va_args.cell_value ());
+  }
 }
 
 DEFMETHOD (max_recursion_depth, interp, args, nargout,
            doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{val} =} max_recursion_depth ()
 @deftypefnx {} {@var{old_val} =} max_recursion_depth (@var{new_val})
 @deftypefnx {} {} max_recursion_depth (@var{new_val}, "local")
 Query or set the internal limit on the number of times a function may
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -544,16 +544,21 @@ namespace octave
     bool echo_this_file (const std::string& file, int type) const;
 
     void echo_code (size_t line);
 
     void final_index_error (index_exception& e, const tree_expression *expr);
 
     bool quit_loop_now (void);
 
+    void bind_auto_fcn_vars (symbol_scope& scope,
+                             const string_vector& arg_names, int nargin,
+                             int nargout, bool takes_varargs,
+                             const octave_value_list& va_args);
+
     interpreter& m_interpreter;
 
     // The context for the current evaluation.
     stmt_list_type m_statement_context;
 
     result_type m_result_type;
     octave_value m_expr_result_value;
     octave_value_list m_expr_result_value_list;
