# HG changeset patch
# User jwe
# Date 845097475 0
#      Sat Oct 12 05:17:55 1996 +0000
# Node ID 6bea009cdae2c421ce57104531f88334161e4bed
# Parent  09094a119052514947450f8964de5dfe9111371d
[project @ 1996-10-12 05:15:59 by jwe]

diff --git a/PROJECTS b/PROJECTS
--- a/PROJECTS
+++ b/PROJECTS
@@ -107,16 +107,23 @@ Graphics:
 -------
 Strings:
 -------
 
   * Convert string functions to work on string arrays.
 
   * Make find work for strings.
 
+  * Consider making octave_print_internal() print some sort of text
+    representation for unprintable characters instead of sending them
+    directly to the terminal.  (But don't do this for fprintf!)
+
+  * Consider changing the default value of `string_fill_char' from SPC
+    to NUL.
+
 ----------------
 Other Data Types:
 ----------------
 
   * New types (char, short, etc.).
 
   * 3d matrix stuff.
 
@@ -152,16 +159,20 @@ Input/Output:
 
   * Move some pr-output stuff to liboctave.
 
   * Make the cutoff point for changing to packed storage a
     user-preference variable with default value 8192.
 
   * Save image data in binary format to save space.
 
+  * Make it possible to load other image formats (ppm, pbm, etc. would
+    probably be best since there are already filters to convert to
+    these formats from others.)
+
   * Use HDF for binary data.
 
   * Make ascii load and save work for Inf and NaN.
 
   * Complain if there is not enough disk space available (I think
     there is simply not enough error checking in the code that handles
     writing data).
 
@@ -209,16 +220,28 @@ Interpreter:
     optional.
 
   * Make the interpreter run faster.
 
   * Make it possible to disable or enable all warnings on an
     individual basis from the command line or via some built-in
     structure variable.
 
+  * Warn about complex comparisons?  Could just use double_value() or
+    matrix_value() instead of explicit conversions to real types.
+
+  * Make warnings also give some indication about the location of the
+    code that triggers the warning.
+
+  * Warn about complex comparisons?  Could just use double_value() or
+    matrix_value() instead of explicit conversions to real types.  For
+    this to really be useful, some additional information must be
+    available to point to the location of the code that triggers the
+    warning.
+
   * Consider making it possible to have arrays of structures, and some
     way of indexing them.
 
   * Allow arbitrary lower bounds for array indexing.  (Watch out for
     the additional conflict with zero-one style indexing.)
 
   * Recursive problems.
 
@@ -330,20 +353,25 @@ Interpreter:
     This is pretty ugly and introduces some conflicts.
 
   * Make it possible to use text-style function names as variables.
 
   * Add a command that works like bash's `builtin' command.
 
   * Handle comments in parse trees for use with the type command.
 
+  * Make the type command handle script files too, by just reading and
+    printing them.
+
   * Clean up eye, eval, feval, keyboard, input, ones, zeros.
 
   * It would be nice to have an interactive debugger.
 
+  * Make whos report total memory used by variables (and functions?).
+
 -------
 History:
 -------
 
   * Add an option to allow saving input from script files in the
     history list.
 
   * Fix history problems -- core dump if multiple processes are
@@ -407,16 +435,19 @@ Documentation and On-Line Help:
   * Make `help -i' try to find a whole word match first.
 
   * Allow help for local additions to be accessible with help -i.
 
   * Make the arrow keys work in the info reader.
 
   * Update Info to be based on the current Texinfo release.
 
+  * Should info/terminal.c include definitions for PC, BC, UP, and
+    ospeed on all systems?
+
   * Clean up help stuff.
 
   * Demo files.
 
   * As the number of m-files with octave grows perhaps a 'Contents.m'
     file for each toolbox (directory) would be appropriate so one
     knows exactly what functions are in a toolbox with a quick look.
     It would be best to generate information for each function directly
diff --git a/config.h.bot b/config.h.bot
--- a/config.h.bot
+++ b/config.h.bot
@@ -1,8 +1,14 @@
 
 #if defined __GNUC__
 #define NORETURN __attribute__ ((__noreturn__))
 #else
 #define NORETURN
 #endif
 
+#define STATIC_CAST(T, E) (T) (E)
+
+#define DYNAMIC_CAST(T, E) (T) (E)
+
+#define REINTERPRET_CAST(T, E) (T) (E)
+
 #define HEAVYWEIGHT_INDEXING 1
