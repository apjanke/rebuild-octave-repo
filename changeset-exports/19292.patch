# HG changeset patch
# User Rik <rik@octave.org>
# Date 1414596084 25200
#      Wed Oct 29 08:21:24 2014 -0700
# Node ID 238522618904afe1cfe9844a05f805e9e53dc308
# Parent  64f034147e9ac330e7caa1a8bbab365b9031ec1f
nthroot.m: Fix division by zero warning when input x is 0 (bug #43492).

* nthroot.m: Check whether input is a scalar 0, and don't apply integer
correction to calculated root as this leads to a division by zero.
Add BIST test for bug.

diff --git a/scripts/specfun/nthroot.m b/scripts/specfun/nthroot.m
--- a/scripts/specfun/nthroot.m
+++ b/scripts/specfun/nthroot.m
@@ -69,32 +69,41 @@ function y = nthroot (x, n)
       y = abs (x) .^ (1/n) .* sign (x);
     elseif (any (x(:) < 0))
       error ("nthroot: N must be an odd integer if X contains negative values");
     else
       y = x .^ (1/n);
     endif
 
     if (integer_n && n > 0 && isfinite (n))
-      ## FIXME: What is this correction for?
-      y = ((n-1)*y + x ./ (y.^(n-1))) / n;
-      y = merge (isfinite (y), y, x);
+      if (isscalar (y) && y == 0)
+        ## Don't apply correction which leads to division by zero (bug #43492)
+      else
+        ## FIXME: What is this correction for?
+        y = ((n-1)*y + x ./ (y.^(n-1))) / n;
+        y = merge (isfinite (y), y, x);
+      endif
     endif
-
   endif
 
 endfunction
 
 
 %!assert (nthroot (-32, 5), -2)
 %!assert (nthroot (81, 4), 3)
 %!assert (nthroot (Inf, 4), Inf)
 %!assert (nthroot (-Inf, 7), -Inf)
 %!assert (nthroot (-Inf, -7), 0)
 
+## Bug #43492.  This should not generate a division by zero warning
+%!test
+%! warnmsg = lastwarn ();
+%! assert (nthroot (0, 2), 0);
+%! assert (lastwarn (), warnmsg);
+
 %% Test input validation
 %!error nthroot ()
 %!error nthroot (1)
 %!error nthroot (1,2,3)
 %!error <X must not contain complex values> nthroot (1+j, 2)
 %!error <N must be a real nonzero scalar> nthroot (1, i)
 %!error <N must be a real nonzero scalar> nthroot (1, [1 2])
 %!error <N must be a real nonzero scalar> nthroot (1, 0)
