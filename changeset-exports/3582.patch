# HG changeset patch
# User jwe
# Date 949744851 0
#      Sat Feb 05 10:00:51 2000 +0000
# Node ID a93683ccc9ba921ec43853467ffff5ee6465db1c
# Parent  aa8f5aa90c25a1d2e642cc8225880b22362a3da4
[project @ 2000-02-05 10:00:49 by jwe]

diff --git a/liboctave/CColVector.cc b/liboctave/CColVector.cc
--- a/liboctave/CColVector.cc
+++ b/liboctave/CColVector.cc
@@ -265,132 +265,16 @@ ComplexColumnVector::operator -= (const 
     return *this;
 
   Complex *d = fortran_vec (); // Ensures only one reference to my privates!
 
   subtract2 (d, a.data (), len);
   return *this;
 }
 
-// column vector by scalar -> column vector operations
-
-ComplexColumnVector
-operator + (const ComplexColumnVector& v, double s)
-{
-  int len = v.length ();
-  return ComplexColumnVector (add (v.data (), len, s), len);
-}
-
-ComplexColumnVector
-operator - (const ComplexColumnVector& v, double s)
-{
-  int len = v.length ();
-  return ComplexColumnVector (subtract (v.data (), len, s), len);
-}
-
-ComplexColumnVector
-operator * (const ComplexColumnVector& v, double s)
-{
-  int len = v.length ();
-  return ComplexColumnVector (multiply (v.data (), len, s), len);
-}
-
-ComplexColumnVector
-operator / (const ComplexColumnVector& v, double s)
-{
-  int len = v.length ();
-  return ComplexColumnVector (divide (v.data (), len, s), len);
-}
-
-ComplexColumnVector
-operator + (const ColumnVector& a, const Complex& s)
-{
-  int len = a.length ();
-  return ComplexColumnVector (add (a.data (), len, s), len);
-}
-
-ComplexColumnVector
-operator - (const ColumnVector& a, const Complex& s)
-{
-  int len = a.length ();
-  return ComplexColumnVector (subtract (a.data (), len, s), len);
-}
-
-ComplexColumnVector
-operator * (const ColumnVector& a, const Complex& s)
-{
-  int len = a.length ();
-  return ComplexColumnVector (multiply (a.data (), len, s), len);
-}
-
-ComplexColumnVector
-operator / (const ColumnVector& a, const Complex& s)
-{
-  int len = a.length ();
-  return ComplexColumnVector (divide (a.data (), len, s), len);
-}
-
-// scalar by column vector -> column vector operations
-
-ComplexColumnVector
-operator + (double s, const ComplexColumnVector& a)
-{
-  int a_len = a.length ();
-  return ComplexColumnVector (add (a.data (), a_len, s), a_len);
-}
-
-ComplexColumnVector
-operator - (double s, const ComplexColumnVector& a)
-{
-  int a_len = a.length ();
-  return ComplexColumnVector (subtract (s, a.data (), a_len), a_len);
-}
-
-ComplexColumnVector
-operator * (double s, const ComplexColumnVector& a)
-{
-  int a_len = a.length ();
-  return ComplexColumnVector (multiply (a.data (), a_len, s), a_len);
-}
-
-ComplexColumnVector
-operator / (double s, const ComplexColumnVector& a)
-{
-  int a_len = a.length ();
-  return ComplexColumnVector (divide (s, a.data (), a_len), a_len);
-}
-
-ComplexColumnVector
-operator + (const Complex& s, const ColumnVector& a)
-{
-  int a_len = a.length ();
-  return ComplexColumnVector (add (a.data (), a_len, s), a_len);
-}
-
-ComplexColumnVector
-operator - (const Complex& s, const ColumnVector& a)
-{
-  int a_len = a.length ();
-  return ComplexColumnVector (subtract (s, a.data (), a_len), a_len);
-}
-
-ComplexColumnVector
-operator * (const Complex& s, const ColumnVector& a)
-{
-  int a_len = a.length ();
-  return ComplexColumnVector (multiply (a.data (), a_len, s), a_len);
-}
-
-ComplexColumnVector
-operator / (const Complex& s, const ColumnVector& a)
-{
-  int a_len = a.length ();
-  return ComplexColumnVector (divide (s, a.data (), a_len), a_len);
-}
-
 // matrix by column vector -> column vector operations
 
 ComplexColumnVector
 operator * (const ComplexMatrix& m, const ColumnVector& a)
 {
   ComplexColumnVector tmp (a);
   return m * tmp;
 }
diff --git a/liboctave/CColVector.h b/liboctave/CColVector.h
--- a/liboctave/CColVector.h
+++ b/liboctave/CColVector.h
@@ -76,56 +76,16 @@ public:
 
   ComplexColumnVector extract (int r1, int r2) const;
 
   // column vector by column vector -> column vector operations
 
   ComplexColumnVector& operator += (const ColumnVector& a);
   ComplexColumnVector& operator -= (const ColumnVector& a);
 
-  // column vector by scalar -> column vector operations
-
-  friend ComplexColumnVector operator + (const ComplexColumnVector& a,
-					 double s);
-  friend ComplexColumnVector operator - (const ComplexColumnVector& a,
-					 double s);
-  friend ComplexColumnVector operator * (const ComplexColumnVector& a,
-					 double s);
-  friend ComplexColumnVector operator / (const ComplexColumnVector& a,
-					 double s);
-
-  friend ComplexColumnVector operator + (const ColumnVector& a,
-					 const Complex& s);  
-  friend ComplexColumnVector operator - (const ColumnVector& a,
-					 const Complex& s);
-  friend ComplexColumnVector operator * (const ColumnVector& a,
-					 const Complex& s);
-  friend ComplexColumnVector operator / (const ColumnVector& a,
-					 const Complex& s);
-
-  // scalar by column vector -> column vector operations
-
-  friend ComplexColumnVector operator + (double s,
-					 const ComplexColumnVector& a); 
-  friend ComplexColumnVector operator - (double s,
-					 const ComplexColumnVector& a);
-  friend ComplexColumnVector operator * (double s,
-					 const ComplexColumnVector& a);
-  friend ComplexColumnVector operator / (double s,
-					 const ComplexColumnVector& a);
-
-  friend ComplexColumnVector operator + (const Complex& s,
-					 const ColumnVector& a); 
-  friend ComplexColumnVector operator - (const Complex& s,
-					 const ColumnVector& a);
-  friend ComplexColumnVector operator * (const Complex& s,
-					 const ColumnVector& a);
-  friend ComplexColumnVector operator / (const Complex& s,
-					 const ColumnVector& a);
-
   // matrix by column vector -> column vector operations
 
   friend ComplexColumnVector operator * (const ComplexMatrix& a,
 					 const ColumnVector& b);
 
   friend ComplexColumnVector operator * (const ComplexMatrix& a,
 					 const ComplexColumnVector& b);
 
diff --git a/liboctave/CRowVector.cc b/liboctave/CRowVector.cc
--- a/liboctave/CRowVector.cc
+++ b/liboctave/CRowVector.cc
@@ -265,132 +265,16 @@ ComplexRowVector::operator -= (const Row
     return *this;
 
   Complex *d = fortran_vec (); // Ensures only one reference to my privates!
 
   subtract2 (d, a.data (), len);
   return *this;
 }
 
-// row vector by scalar -> row vector operations
-
-ComplexRowVector
-operator + (const ComplexRowVector& v, double s)
-{
-  int len = v.length ();
-  return ComplexRowVector (add (v.data (), len, s), len);
-}
-
-ComplexRowVector
-operator - (const ComplexRowVector& v, double s)
-{
-  int len = v.length ();
-  return ComplexRowVector (subtract (v.data (), len, s), len);
-}
-
-ComplexRowVector
-operator * (const ComplexRowVector& v, double s)
-{
-  int len = v.length ();
-  return ComplexRowVector (multiply (v.data (), len, s), len);
-}
-
-ComplexRowVector
-operator / (const ComplexRowVector& v, double s)
-{
-  int len = v.length ();
-  return ComplexRowVector (divide (v.data (), len, s), len);
-}
-
-ComplexRowVector
-operator + (const RowVector& v, const Complex& s)
-{
-  int len = v.length ();
-  return ComplexRowVector (add (v.data (), len, s), len);
-}
-
-ComplexRowVector
-operator - (const RowVector& v, const Complex& s)
-{
-  int len = v.length ();
-  return ComplexRowVector (subtract (v.data (), len, s), len);
-}
-
-ComplexRowVector
-operator * (const RowVector& v, const Complex& s)
-{
-  int len = v.length ();
-  return ComplexRowVector (multiply (v.data (), len, s), len);
-}
-
-ComplexRowVector
-operator / (const RowVector& v, const Complex& s)
-{
-  int len = v.length ();
-  return ComplexRowVector (divide (v.data (), len, s), len);
-}
-
-// scalar by row vector -> row vector operations
-
-ComplexRowVector
-operator + (double s, const ComplexRowVector& a)
-{
-  int a_len = a.length ();
-  return ComplexRowVector (add (a.data (), a_len, s), a_len);
-}
-
-ComplexRowVector
-operator - (double s, const ComplexRowVector& a)
-{
-  int a_len = a.length ();
-  return ComplexRowVector (subtract (s, a.data (), a_len), a_len);
-}
-
-ComplexRowVector
-operator * (double s, const ComplexRowVector& a)
-{
-  int a_len = a.length ();
-  return ComplexRowVector (multiply (a.data (), a_len, s), a_len);
-}
-
-ComplexRowVector
-operator / (double s, const ComplexRowVector& a)
-{
-  int a_len = a.length ();
-  return ComplexRowVector (divide (s, a.data (), a_len), a_len);
-}
-
-ComplexRowVector
-operator + (const Complex& s, const RowVector& a)
-{
-  int a_len = a.length ();
-  return ComplexRowVector (add (a.data (), a_len, s), a_len);
-}
-
-ComplexRowVector
-operator - (const Complex& s, const RowVector& a)
-{
-  int a_len = a.length ();
-  return ComplexRowVector (subtract (s, a.data (), a_len), a_len);
-}
-
-ComplexRowVector
-operator * (const Complex& s, const RowVector& a)
-{
-  int a_len = a.length ();
-  return ComplexRowVector (multiply (a.data (), a_len, s), a_len);
-}
-
-ComplexRowVector
-operator / (const Complex& s, const RowVector& a)
-{
-  int a_len = a.length ();
-  return ComplexRowVector (divide (s, a.data (), a_len), a_len);
-}
-
 // row vector by matrix -> row vector
 
 ComplexRowVector
 operator * (const ComplexRowVector& v, const ComplexMatrix& a)
 {
   ComplexRowVector retval;
 
   int len = v.length ();
diff --git a/liboctave/CRowVector.h b/liboctave/CRowVector.h
--- a/liboctave/CRowVector.h
+++ b/liboctave/CRowVector.h
@@ -75,40 +75,16 @@ public:
 
   ComplexRowVector extract (int c1, int c2) const;
 
   // row vector by row vector -> row vector operations
 
   ComplexRowVector& operator += (const RowVector& a);
   ComplexRowVector& operator -= (const RowVector& a);
 
-  // row vector by scalar -> row vector operations
-
-  friend ComplexRowVector operator + (const ComplexRowVector& a, double s);
-  friend ComplexRowVector operator - (const ComplexRowVector& a, double s);
-  friend ComplexRowVector operator * (const ComplexRowVector& a, double s);
-  friend ComplexRowVector operator / (const ComplexRowVector& a, double s);
-
-  friend ComplexRowVector operator + (const RowVector& a, const Complex& s);
-  friend ComplexRowVector operator - (const RowVector& a, const Complex& s);
-  friend ComplexRowVector operator * (const RowVector& a, const Complex& s);
-  friend ComplexRowVector operator / (const RowVector& a, const Complex& s);
-
-  // scalar by row vector -> row vector operations
-
-  friend ComplexRowVector operator + (double s, const ComplexRowVector& a);
-  friend ComplexRowVector operator - (double s, const ComplexRowVector& a);
-  friend ComplexRowVector operator * (double s, const ComplexRowVector& a);
-  friend ComplexRowVector operator / (double s, const ComplexRowVector& a);
-
-  friend ComplexRowVector operator + (const Complex& s, const RowVector& a);
-  friend ComplexRowVector operator - (const Complex& s, const RowVector& a);
-  friend ComplexRowVector operator * (const Complex& s, const RowVector& a);
-  friend ComplexRowVector operator / (const Complex& s, const RowVector& a);
-
   // row vector by matrix -> row vector
 
   friend ComplexRowVector operator * (const ComplexRowVector& a,
 				      const ComplexMatrix& b);
 
   friend ComplexRowVector operator * (const RowVector& a,
 				      const ComplexMatrix& b);
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,24 @@
 2000-02-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* vx-rv-crv.h, vx-cv-ccv.h, vx-crv-rv.h, vx-ccv-cv.h,
+	vx-rv-crv.cc, vx-cv-ccv.cc, vx-crv-rv.cc, vx-ccv-cv.cc:
+	More new files.
+	* Makefile.in: Add them to the appropriate lists.
+
+	* vx-ccv-s.h, vx-crv-s.h, vx-cs-cv.h, vx-cs-rv.h, vx-cv-cs.h,
+	vx-rv-cs.h, vx-s-ccv.h, vx-s-crv.h, vx-ccv-s.cc, vx-crv-s.cc,
+	vx-cs-cv.cc, vx-cs-rv.cc, vx-cv-cs.cc, vx-rv-cs.cc, vx-s-ccv.cc,
+	vx-s-crv.cc:, New files.
+	* Makefile.in: Add them to the appropriate lists.
+
+	* CRowVector.h, CRowVector.cc, CColVector.h, CColVector.cc:
+	Delete scalar by vector and vector by scalar binary ops.
+
 	* MArray-defs.h: More new macros to handle MDiagArray operators.
 	* dDiagMatrix.h, CDiagMatrix.h: Use the op-forwarding macros.
 
 2000-02-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-rl-edit.c (octave_rl_set_event_hook): Take address of
 	rl_event_hook before casting to void **.
 	(octave_rl_set_startup_hook): Likewise, for rl_startup_hook.
diff --git a/liboctave/MArray-C.cc b/liboctave/MArray-C.cc
--- a/liboctave/MArray-C.cc
+++ b/liboctave/MArray-C.cc
@@ -42,15 +42,15 @@ template class MArray2<Complex>;
 
 INSTANTIATE_MARRAY2_FRIENDS (Complex)
 
 #include "MDiagArray2.h"
 #include "MDiagArray2.cc"
 
 template class MDiagArray2<Complex>;
 
-INSTANTIATE_MDIAGARRAY_FRIENDS (Complex)
+INSTANTIATE_MDIAGARRAY2_FRIENDS (Complex)
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/MArray-ch.cc b/liboctave/MArray-ch.cc
--- a/liboctave/MArray-ch.cc
+++ b/liboctave/MArray-ch.cc
@@ -40,15 +40,15 @@ template class MArray2<char>;
 
 INSTANTIATE_MARRAY2_FRIENDS (char)
 
 #include "MDiagArray2.h"
 #include "MDiagArray2.cc"
 
 template class MDiagArray2<char>;
 
-INSTANTIATE_MDIAGARRAY_FRIENDS (char)
+INSTANTIATE_MDIAGARRAY2_FRIENDS (char)
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/MArray-d.cc b/liboctave/MArray-d.cc
--- a/liboctave/MArray-d.cc
+++ b/liboctave/MArray-d.cc
@@ -40,15 +40,15 @@ template class MArray2<double>;
 
 INSTANTIATE_MARRAY2_FRIENDS (double)
 
 #include "MDiagArray2.h"
 #include "MDiagArray2.cc"
 
 template class MDiagArray2<double>;
 
-INSTANTIATE_MDIAGARRAY_FRIENDS (double)
+INSTANTIATE_MDIAGARRAY2_FRIENDS (double)
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/MArray-i.cc b/liboctave/MArray-i.cc
--- a/liboctave/MArray-i.cc
+++ b/liboctave/MArray-i.cc
@@ -40,15 +40,15 @@ template class MArray2<int>;
 
 INSTANTIATE_MARRAY2_FRIENDS (int)
 
 #include "MDiagArray2.h"
 #include "MDiagArray2.cc"
 
 template class MDiagArray2<int>;
 
-INSTANTIATE_MDIAGARRAY_FRIENDS (int)
+INSTANTIATE_MDIAGARRAY2_FRIENDS (int)
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/MArray-s.cc b/liboctave/MArray-s.cc
--- a/liboctave/MArray-s.cc
+++ b/liboctave/MArray-s.cc
@@ -40,15 +40,15 @@ template class MArray2<short>;
 
 INSTANTIATE_MARRAY2_FRIENDS (short)
 
 #include "MDiagArray2.h"
 #include "MDiagArray2.cc"
 
 template class MDiagArray2<short>;
 
-INSTANTIATE_MDIAGARRAY_FRIENDS (short)
+INSTANTIATE_MDIAGARRAY2_FRIENDS (short)
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -35,29 +35,34 @@ MATRIX_INC := Array.h Array2.h Array3.h 
 	dbleQRP.h dbleSCHUR.h dbleSVD.h
 
 MX_OP_INC := mx-cdm-cm.h mx-cdm-cs.h mx-cdm-dm.h mx-cdm-m.h \
 	mx-cdm-s.h mx-cm-cdm.h mx-cm-dm.h mx-cm-m.h mx-cm-s.h \
 	mx-cs-cdm.h mx-cs-dm.h mx-cs-m.h mx-dm-cdm.h mx-dm-cm.h \
 	mx-dm-cs.h mx-dm-m.h mx-dm-s.h mx-m-cdm.h mx-m-cm.h \
 	mx-m-cs.h mx-m-dm.h mx-s-cdm.h mx-s-cm.h mx-s-dm.h
 
+VX_OP_INC := vx-ccv-s.h vx-crv-s.h vx-cs-cv.h vx-cs-rv.h vx-cv-cs.h \
+	vx-rv-cs.h vx-s-ccv.h vx-s-crv.h \
+	vx-rv-crv.h vx-cv-ccv.h vx-crv-rv.h vx-ccv-cv.h
+
 INCLUDES := Bounds.h CollocWt.h DAE.h DAEFunc.h DASSL.h FEGrid.h \
 	LinConst.h LP.h LPsolve.h LSODE.h NLConst.h NLEqn.h NLFunc.h \
 	NLP.h ODE.h ODEFunc.h Objective.h QP.h Quad.h Range.h base-de.h \
 	base-min.h byte-swap.h cmd-edit.h cmd-hist.h data-conv.h \
 	dir-ops.h file-ops.h file-stat.h getopt.h glob-match.h \
 	idx-vector.h lo-ieee.h lo-mappers.h lo-specfun.h lo-sysdep.h \
 	lo-utils.h mach-info.h oct-alloc.h oct-cmplx.h oct-env.h \
 	oct-getopt.h oct-group.h oct-kpse.h oct-passwd.h oct-rl-edit.h \
 	oct-rl-hist.h oct-shlib.h oct-syscalls.h oct-time.h pathlen.h \
 	pathsearch.h prog-args.h statdefs.h str-vec.h sun-utils.h \
 	sysdir.h systime.h syswait.h \
 	$(MATRIX_INC) \
-	$(MX_OP_INC)
+	$(MX_OP_INC) \
+	$(VX_OP_INC)
 
 TEMPLATE_SRC := Array.cc Array2.cc Array3.cc DiagArray2.cc \
 	MArray.cc MArray2.cc MDiagArray2.cc base-lu.cc
 
 TI_SRC := Array-C.cc Array-b.cc Array-ch.cc Array-i.cc Array-d.cc \
 	Array-s.cc Array-str.cc \
 	MArray-C.cc MArray-ch.cc MArray-i.cc MArray-d.cc MArray-s.cc
 
@@ -70,30 +75,35 @@ MATRIX_SRC := Array-flags.cc CColVector.
 	dbleQR.cc dbleQRP.cc dbleSCHUR.cc dbleSVD.cc
 
 MX_OP_SRC := mx-cdm-cm.cc mx-cdm-cs.cc mx-cdm-dm.cc mx-cdm-m.cc \
 	mx-cdm-s.cc mx-cm-cdm.cc mx-cm-dm.cc mx-cm-m.cc mx-cm-s.cc \
 	mx-cs-cdm.cc mx-cs-dm.cc mx-cs-m.cc mx-dm-cdm.cc mx-dm-cm.cc \
 	mx-dm-cs.cc mx-dm-m.cc mx-dm-s.cc mx-m-cdm.cc mx-m-cm.cc \
 	mx-m-cs.cc mx-m-dm.cc mx-s-cdm.cc mx-s-cm.cc mx-s-dm.cc
 
+VX_OP_SRC := vx-ccv-s.cc vx-crv-s.cc vx-cs-cv.cc vx-cs-rv.cc vx-cv-cs.cc \
+	vx-rv-cs.cc vx-s-ccv.cc vx-s-crv.cc \
+	vx-rv-crv.cc vx-cv-ccv.cc vx-crv-rv.cc vx-ccv-cv.cc
+
 SOURCES := Bounds.cc CollocWt.cc DAE.cc DASSL.cc FEGrid.cc LinConst.cc \
 	LPsolve.cc LSODE.cc NLEqn.cc Quad.cc Range.cc cmd-edit.cc \
 	cmd-hist.cc data-conv.cc dir-ops.cc f2c-main.c file-ops.cc \
 	file-stat.cc filemode.c getopt.c getopt1.c glob-match.cc \
 	idx-vector.cc lo-ieee.cc lo-mappers.cc lo-specfun.cc \
 	lo-sysdep.cc lo-utils.cc mach-info.cc mkdir.c oct-alloc.cc \
 	oct-env.cc oct-getopt.c oct-group.cc oct-kpse.c oct-passwd.cc \
 	oct-rl-edit.c oct-rl-hist.c oct-shlib.cc oct-syscalls.cc \
 	oct-time.cc pathsearch.cc prog-args.cc rename.c rmdir.c \
 	strftime.c strptime.c str-vec.cc tempname.c tempnam.c \
 	$(TEMPLATE_SRC) \
 	$(TI_SRC) \
 	$(MATRIX_SRC) \
-	$(MX_OP_SRC)
+	$(MX_OP_SRC) \
+	$(VX_OP_SRC)
 
 EXTRAS := mx-inlines.cc
 
 INCLUDES_FOR_INSTALL := $(INCLUDES) $(TEMPLATE_SRC) $(EXTRAS)
 
 DISTFILES := Makefile.in ChangeLog $(SOURCES) $(INCLUDES) $(EXTRAS)
 
 ifeq ($(SHARED_LIBS), true)
diff --git a/liboctave/mx-op-defs.h b/liboctave/mx-op-defs.h
--- a/liboctave/mx-op-defs.h
+++ b/liboctave/mx-op-defs.h
@@ -51,56 +51,62 @@ class boolMatrix;
 #define VS_BIN_OP(R, F, OP, V, S) \
   R \
   F (const V& v, const S& s) \
   { \
     int len = v.length (); \
  \
     R r (len); \
  \
-    for (size_t i = 0; i < len; i++) \
+    for (int i = 0; i < len; i++) \
       r.elem(i) = v.elem(i) OP s; \
  \
     return r; \
   }
 
 #define VS_BIN_OPS(R, V, S) \
   VS_BIN_OP (R, operator +, +, V, S) \
   VS_BIN_OP (R, operator -, -, V, S) \
   VS_BIN_OP (R, operator *, *, V, S) \
   VS_BIN_OP (R, operator /, /, V, S)
 
+#define VS_OP_DECLS(R, V, S) \
+  VS_BIN_OP_DECLS(R, V, S)
+
 // scalar by vector by operations.
 
 #define SV_BIN_OP_DECLS(R, S, V) \
   BIN_OP_DECL (R, operator +, S, V); \
   BIN_OP_DECL (R, operator -, S, V); \
   BIN_OP_DECL (R, operator *, S, V); \
   BIN_OP_DECL (R, operator /, S, V);
 
 #define SV_BIN_OP(R, F, OP, S, V) \
   R \
   F (const S& s, const V& v) \
   { \
     int len = v.length (); \
  \
     R r (len); \
  \
-    for (size_t i = 0; i < len; i++) \
+    for (int i = 0; i < len; i++) \
       r.elem(i) = s OP v.elem(i); \
  \
     return r; \
   }
 
 #define SV_BIN_OPS(R, S, V) \
   SV_BIN_OP (R, operator +, +, S, V) \
   SV_BIN_OP (R, operator -, -, S, V) \
   SV_BIN_OP (R, operator *, *, S, V) \
   SV_BIN_OP (R, operator /, /, S, V)
 
+#define SV_OP_DECLS(R, S, V) \
+  SV_BIN_OP_DECLS(R, S, V)
+
 // vector by vector operations.
 
 #define VV_BIN_OP_DECLS(R, V1, V2) \
   BIN_OP_DECL (R, operator +, V1, V2); \
   BIN_OP_DECL (R, operator -, V1, V2); \
   BIN_OP_DECL (R, product,    V1, V2); \
   BIN_OP_DECL (R, quotient,   V1, V2);
 
@@ -114,30 +120,31 @@ class boolMatrix;
     int v2_len = v2.length (); \
  \
     if (v1_len != v2_len) \
       gripe_nonconformant (#OP, v1_len, v2_len); \
     else \
       { \
 	r.resize (v1_len); \
  \
-	for (size_t i = 0; i < v1_len; i++) \
+	for (int i = 0; i < v1_len; i++) \
 	  r.elem(i) = v1.elem(i) OP v2.elem(i); \
       } \
  \
     return r; \
   }
 
 #define VV_BIN_OPS(R, V1, V2) \
   VV_BIN_OP (R, operator +, +, V1, V2) \
   VV_BIN_OP (R, operator -, -, V1, V2) \
   VV_BIN_OP (R, product,    *, V1, V2) \
   VV_BIN_OP (R, quotient,   /, V1, V2)
 
-#endif
+#define VV_OP_DECLS(R, V1, V2) \
+  VV_BIN_OP_DECLS(R, V1, V2)
 
 // matrix by scalar operations.
 
 #define MS_BIN_OP_DECLS(R, M, S) \
   BIN_OP_DECL (R, operator +, M, S); \
   BIN_OP_DECL (R, operator -, M, S); \
   BIN_OP_DECL (R, operator *, M, S); \
   BIN_OP_DECL (R, operator /, M, S);
@@ -745,13 +752,15 @@ operator * (const DM& dm, const M& m) \
 #define DMDM_BIN_OPS(R, DM1, DM2) \
   DMDM_BIN_OP (R, operator +, DM1, DM2, add) \
   DMDM_BIN_OP (R, operator -, DM1, DM2, subtract) \
   DMDM_BIN_OP (R, product,    DM1, DM2, multiply)
 
 #define DMDM_OP_DECLS(R, DM1, DM2) \
   DMDM_BIN_OP_DECLS (R, DM1, DM2)
 
+#endif
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
