# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1444331719 -3600
#      Thu Oct 08 20:15:19 2015 +0100
# Node ID a61f0d6beb714108b5773efd461a25e51c85ac6f
# Parent  780431fc41374622c32df0fc1663be67990077ca
inputParser: do not perform validation of default values (bug #45837)

diff --git a/scripts/general/inputParser.m b/scripts/general/inputParser.m
--- a/scripts/general/inputParser.m
+++ b/scripts/general/inputParser.m
@@ -298,26 +298,24 @@ classdef inputParser < handle
       if (nargin < 3 || nargin > 4)
         print_usage ();
       elseif (numel (fieldnames (this.ParamValue))
               || numel (fieldnames (this.Switch)))
         error (["inputParser.Optional: can't have Optional arguments " ...
                 "after ParamValue or Switch"]);
       endif
       this.validate_name ("Optional", name);
-      this.validate_default ("Optional", name, def, val);
       this.Optional{end+1} = struct ("name", name, "def", def, "val", val);
     endfunction
 
     function addParamValue (this, name, def, val = inputParser.def_val)
       if (nargin < 3 || nargin > 4)
         print_usage ();
       endif
       this.validate_name ("ParamValue", name);
-      this.validate_default ("ParamValue", name, def, val);
       this.ParamValue.(name).def = def;
       this.ParamValue.(name).val = val;
     endfunction
 
     function addSwitch (this, name)
       if (nargin != 2)
         print_usage ();
       endif
@@ -430,23 +428,16 @@ classdef inputParser < handle
         ## Even if CaseSensitive is "on", we still shouldn't allow
         ## two args with the same name.
         error ("inputParser.add%s: argname '%s' has already been specified",
                type, name);
       endif
       this.Parameters{end+1} = name;
     endfunction
 
-    function validate_default (this, type, name, def, val)
-      if (! feval (val, def))
-        error ("inputParser.add%s: failed validation for '%s' default value",
-               type, name);
-      endif
-    endfunction
-
     function validate_arg (this, name, val, in)
         if (! val (in))
           this.error (sprintf ("failed validation of %s", toupper (name)));
         endif
         this.Results.(name) = in;
     endfunction
 
     function r = is_argname (this, type, name)
@@ -577,15 +568,28 @@ endclassdef
 ## check normal use, but give values different than defaults
 %!test
 %! p2 = create_p2 ();
 %! parse (p2, "file", "foo", 80, "line", "circle", "verbose");
 %! r = p2.Results;
 %! assert ({r.req1, r.op1, r.op2, r.verbose, r.line},
 %!         {"file", "foo", 80,    true,      "circle"});
 
+## We must not perform validation of default values (bug #45837)
+%!test
+%! p = inputParser;
+%! p.addParamValue ("Dir", [], @ischar);
+%! p.parse ();
+%! assert (p.Results.Dir, [])
+
+%!test
+%! p = inputParser;
+%! p.addParamValue ("positive", -1, @(x) x > 5);
+%! p.parse ();
+%! assert (p.Results.positive, -1)
+
 ## FIXME: This somehow works in Matlab
 #%!test
 #%! p = inputParser;
 #%! p.addOptional ("op1", "val");
 #%! p.addParamValue ("line", "tree");
 #%! p.parse ("line", "circle");
 #%! assert (p.Results, struct ("op1", "val", "line", "circle"));
