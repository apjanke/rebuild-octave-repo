# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1328194882 0
#      Thu Feb 02 15:01:22 2012 +0000
# Node ID 5758e00132468fed8bfe25a8dc47cae1d1b48c9a
# Parent  ccef87280af694f5c6dc94af13d2090f4d166bd0
Enable compilation on Win32-native platform.

diff --git a/.gitignore b/.gitignore
--- a/.gitignore
+++ b/.gitignore
@@ -1,5 +1,8 @@
 *~
 *.user
 *.o
 *.a
 Makefile*
+*.pdb
+debug/
+release/
diff --git a/libqterminal/QTerminal.h b/libqterminal/QTerminal.h
--- a/libqterminal/QTerminal.h
+++ b/libqterminal/QTerminal.h
@@ -18,17 +18,19 @@ GNU General Public License for more deta
 You should have received a copy of the GNU General Public License
 along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 
 */
 
 #ifndef QTERMINAL_H
 #define QTERMINAL_H
 
-#ifdef __WIN32
+#include <QtGlobal>
+
+#ifdef Q_OS_WIN32
     #include "win32/QWinTerminalImpl.h"
     class QTerminal : public QWinTerminalImpl
     {
         Q_OBJECT
     public:
         QTerminal(QWidget *parent = 0)
             : QWinTerminalImpl(parent) { }
         ~QTerminal() { }
diff --git a/libqterminal/QTerminalInterface.h b/libqterminal/QTerminalInterface.h
--- a/libqterminal/QTerminalInterface.h
+++ b/libqterminal/QTerminalInterface.h
@@ -27,23 +27,18 @@ along with Foobar.  If not, see <http://
 
 class QTerminalInterface : public QWidget
 {
     Q_OBJECT
 public:
     QTerminalInterface(QWidget *parent = 0) : QWidget(parent) { }
     virtual ~QTerminalInterface() { }
 
-    virtual void setTerminalFont(QFont &font) = 0;
+    virtual void setTerminalFont(const QFont& font) = 0;
     virtual void setSize(int h, int v) = 0;
-    virtual void sendText(QString text) = 0;
+    virtual void sendText(const QString& text) = 0;
 
 public slots:
     virtual void copyClipboard() = 0;
     virtual void pasteClipboard() = 0;
-
-protected:
-    virtual void focusInEvent(QFocusEvent *focusEvent) = 0;
-    virtual void showEvent(QShowEvent *) = 0;
-    virtual void resizeEvent(QResizeEvent *) = 0;
 };
 
 #endif // QTERMINALINTERFACE_H
diff --git a/libqterminal/libqterminal.pro b/libqterminal/libqterminal.pro
--- a/libqterminal/libqterminal.pro
+++ b/libqterminal/libqterminal.pro
@@ -2,16 +2,18 @@ TEMPLATE	= lib
 VERSION		= 0.1.0
 DESTDIR 	= .
 TARGET		= qterminal
 
 CONFIG		+= qt staticlib
 
 QT += core gui
 
+INCLUDEPATH	+= .
+
 unix {
 
 DEFINES 	+= HAVE_POSIX_OPENPT	    
 #or DEFINES 	+= HAVE_GETPT
 
 HEADERS  = unix/BlockArray.h \
            unix/Character.h \
            unix/CharacterColor.h \
diff --git a/libqterminal/unix/QUnixTerminalImpl.cpp b/libqterminal/unix/QUnixTerminalImpl.cpp
--- a/libqterminal/unix/QUnixTerminalImpl.cpp
+++ b/libqterminal/unix/QUnixTerminalImpl.cpp
@@ -88,31 +88,31 @@ void QUnixTerminalImpl::connectToPty()
     }
 }
 
 QUnixTerminalImpl::~QUnixTerminalImpl()
 {
     emit destroyed();
 }
 
-void QUnixTerminalImpl::setTerminalFont(QFont &font)
+void QUnixTerminalImpl::setTerminalFont(const QFont &font)
 {
     if(!m_terminalView)
         return;
     m_terminalView->setVTFont(font);
 }
 
 void QUnixTerminalImpl::setSize(int h, int v)
 {
     if(!m_terminalView)
         return;
     m_terminalView->setSize(h, v);
 }
 
-void QUnixTerminalImpl::sendText(QString text)
+void QUnixTerminalImpl::sendText(const QString& text)
 {
     m_terminalModel->sendText(text);
 }
 
 void QUnixTerminalImpl::focusInEvent(QFocusEvent *focusEvent)
 {
     Q_UNUSED(focusEvent);
     m_terminalView->updateImage();
diff --git a/libqterminal/unix/QUnixTerminalImpl.h b/libqterminal/unix/QUnixTerminalImpl.h
--- a/libqterminal/unix/QUnixTerminalImpl.h
+++ b/libqterminal/unix/QUnixTerminalImpl.h
@@ -29,19 +29,19 @@
 
 class QUnixTerminalImpl : public QTerminalInterface
 {
     Q_OBJECT
 public:
     QUnixTerminalImpl(QWidget *parent = 0);
     virtual ~QUnixTerminalImpl();
     
-    void setTerminalFont(QFont &font); 
+    void setTerminalFont(const QFont &font); 
     void setSize(int h, int v);
-    void sendText(QString text);
+    void sendText(const QString& text);
 
 public slots:
     void copyClipboard();
     void pasteClipboard();
         
 protected:
     void focusInEvent(QFocusEvent *focusEvent);
     void showEvent(QShowEvent *);
diff --git a/libqterminal/win32/QTerminalColors.cpp b/libqterminal/win32/QTerminalColors.cpp
--- a/libqterminal/win32/QTerminalColors.cpp
+++ b/libqterminal/win32/QTerminalColors.cpp
@@ -17,17 +17,17 @@ GNU General Public License for more deta
 You should have received a copy of the GNU General Public License
 along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 
 */
 
 #define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 
-#include "win32/QTerminalColors.h"
+#include "QTerminalColors.h"
 
 //////////////////////////////////////////////////////////////////////////////
 
 QConsoleColors::QConsoleColors (void)
     : QMap<int, QColor> ()
 {
   (*this)[0]  = Qt::black;
   (*this)[1]  = Qt::darkBlue;
diff --git a/libqterminal/win32/QWinTerminalImpl.cpp b/libqterminal/win32/QWinTerminalImpl.cpp
--- a/libqterminal/win32/QWinTerminalImpl.cpp
+++ b/libqterminal/win32/QWinTerminalImpl.cpp
@@ -34,25 +34,29 @@ along with Foobar.  If not, see <http://
 #include <fcntl.h>
 #include <io.h>
 #include <stdio.h>
 #include <stdarg.h>
 #define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #include <cstring>
 
-#include "win32/QWinTerminalImpl.h"
-#include "win32/QTerminalColors.h"
+#include "QWinTerminalImpl.h"
+#include "QTerminalColors.h"
 
 // Uncomment to log activity to LOGFILENAME
 // #define DEBUG_QCONSOLE
 #define LOGFILENAME "QConsole.log"
 // Uncomment to create hidden console window
 #define HIDDEN_CONSOLE
 
+#ifdef _MSC_VER
+# pragma warning(disable : 4996)
+#endif
+
 //////////////////////////////////////////////////////////////////////////////
 
 class QConsoleView : public QWidget
 {
 public:
   QConsoleView (QWinTerminalImpl* parent = 0) : QWidget (parent), q (parent) { }
   ~QConsoleView (void) { }
 
@@ -81,17 +85,17 @@ private:
 
 //////////////////////////////////////////////////////////////////////////////
 
 class QConsolePrivate
 {
   friend class QWinTerminalImpl;
 
 public:
-  QConsolePrivate (QUnixTerminalImpl* parent, const QString& cmd = QString ());
+  QConsolePrivate (QWinTerminalImpl* parent, const QString& cmd = QString ());
   ~QConsolePrivate (void);
 
   void updateConsoleSize (bool sync = false);
   void syncConsoleParameters (void);
   void grabConsoleBuffer (CHAR_INFO* buf = 0);
   void updateScrollBar (void);
   void setScrollValue (int value);
   void updateConsoleView (bool grab = true);
@@ -130,17 +134,17 @@ private:
   QConsoleView* m_consoleView;
   QScrollBar* m_scrollBar;
   QTimer* m_consoleWatcher;
   QConsoleThread *m_consoleThread;
 };
 
 //////////////////////////////////////////////////////////////////////////////
 
-QConsolePrivate::QConsolePrivate (QUnixTerminalImpl* parent, const QString& cmd)
+QConsolePrivate::QConsolePrivate (QWinTerminalImpl* parent, const QString& cmd)
     : q (parent), m_command (cmd), m_process (NULL), m_inWheelEvent (false)
 {
   log (NULL);
 
   // Possibly detach from any existing console
   log ("Detaching from existing console (if any)...\n");
   FreeConsole ();
   log ("Closing standard IO...\n");
@@ -337,16 +341,18 @@ void QConsolePrivate::log (const char* f
       fclose (flog);
     }
   else
     {
       // Special case to re-initialize the log file
       FILE* flog = fopen (LOGFILENAME, "w");
       fclose (flog);
     }
+#else
+  Q_UNUSED (fmt);
 #endif
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 void QConsolePrivate::updateConsoleSize (bool sync)
 {
   QFontMetrics fm (m_font);
@@ -594,27 +600,32 @@ void QConsolePrivate::monitorConsole (vo
         }
     }
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 void QConsolePrivate::startCommand (void)
 {
-  if (! m_command.isEmpty ())
+  QString cmd = m_command;
+
+  if (cmd.isEmpty ())
+    cmd = qgetenv ("COMSPEC").constData ();
+
+  if (! cmd.isEmpty ())
     {
       STARTUPINFO si;
       PROCESS_INFORMATION pi;
 
       ZeroMemory (&si, sizeof (si));
       si.cb = sizeof (si);
       ZeroMemory (&pi, sizeof (pi));
 
       if (CreateProcessW (NULL,
-                          (LPWSTR)m_command.unicode (),
+                          (LPWSTR)cmd.unicode (),
                           NULL,
                           NULL,
                           TRUE,
                           0,
                           NULL,
                           NULL,
                           &si,
                           &pi))
@@ -682,24 +693,24 @@ void QConsolePrivate::sendConsoleText (c
           ZeroMemory (events, sizeof (events));
         }
     }
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 QWinTerminalImpl::QWinTerminalImpl (QWidget* parent)
-    : d (new QConsolePrivate (this))
+    : QTerminalInterface (parent), d (new QConsolePrivate (this))
 {
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 QWinTerminalImpl::QWinTerminalImpl (const QString& cmd, QWidget* parent)
-    : d (new QConsolePrivate (this, cmd))
+    : QTerminalInterface (parent), d (new QConsolePrivate (this, cmd))
 {
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 QWinTerminalImpl::~QWinTerminalImpl (void)
 {
   delete d;
@@ -867,8 +878,34 @@ void QWinTerminalImpl::start (void)
 
 //////////////////////////////////////////////////////////////////////////////
 
 void QWinTerminalImpl::sendText (const QString& s)
 {
   d->sendConsoleText (s);
 }
 
+//////////////////////////////////////////////////////////////////////////////
+
+void QWinTerminalImpl::setTerminalFont (const QFont& f)
+{
+  Q_UNUSED (f);
+}
+
+//////////////////////////////////////////////////////////////////////////////
+
+void QWinTerminalImpl::setSize (int columns, int lines)
+{
+  Q_UNUSED (columns);
+  Q_UNUSED (lines);
+}
+
+//////////////////////////////////////////////////////////////////////////////
+
+void QWinTerminalImpl::copyClipboard (void)
+{
+}
+
+//////////////////////////////////////////////////////////////////////////////
+
+void QWinTerminalImpl::pasteClipboard (void)
+{
+}
diff --git a/libqterminal/win32/QWinTerminalImpl.h b/libqterminal/win32/QWinTerminalImpl.h
--- a/libqterminal/win32/QWinTerminalImpl.h
+++ b/libqterminal/win32/QWinTerminalImpl.h
@@ -43,18 +43,24 @@ class QWinTerminalImpl : public QTermina
   friend class QConsoleThread;
   friend class QConsoleView;
 
 public:
   QWinTerminalImpl (QWidget* parent = 0);
   QWinTerminalImpl (const QString& cmd, QWidget* parent = 0);
   ~QWinTerminalImpl (void);
 
+  void setTerminalFont (const QFont& font);
+  void setSize (int columns, int lines);
   void sendText (const QString& s);
 
+public slots:
+  void copyClipboard (void);
+  void pasteClipboard (void);
+
 signals:
   void terminated (void);
   void titleChanged (const QString&);
 
 protected:
   void viewPaintEvent (QConsoleView*, QPaintEvent*);
   void viewResizeEvent (QConsoleView*, QResizeEvent*);
   void wheelEvent (QWheelEvent*);
diff --git a/qterminal/qterminal.pro b/qterminal/qterminal.pro
--- a/qterminal/qterminal.pro
+++ b/qterminal/qterminal.pro
@@ -1,13 +1,19 @@
 TEMPLATE	= app
 DESTDIR 	= .
 
 QT += core gui
 
 SOURCES 	= main.cpp 
 INCLUDEPATH 	= ../libqterminal
 
-LIBS += -L../libqterminal -lqterminal -lutil
-
-
-
-	
+win32 {
+	win32-msvc* {
+		debug: LIBS += -L../libqterminal/debug
+		release: LIBS += -L../libqterminal/release
+	} else {
+		LIBS += -L../libqterminal
+	}
+	LIBS += -lqterminal -luser32 -lkernel32
+} else {
+	LIBS += -L../libqterminal -lqterminal -lutil
+}
