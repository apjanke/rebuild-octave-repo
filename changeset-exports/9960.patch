# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1260442293 -3600
#      Thu Dec 10 11:51:33 2009 +0100
# Node ID 5f3c10ecb150d758ba784177aa3b909763ae24ef
# Parent  633f9d837982b79d7047b3a8d2e87bdc068cdaaa
implement get_current_shlib and octave_auto_shlib

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2009-12-10  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-dld-fcn.h (octave_dld_function::get_shlib): New method.
+	* ov-mex-fcn.h (octave_mex_function::get_shlib): New method.
+	* defun.cc (get_current_shlib): New function.
+	* defun-int.h: Declare it.
+	(octave_auto_shlib): New class.
+
 2009-12-10  Jaroslav Hajek  <highegg@gmail.com>
 
 	* symtab.cc (out_of_date_check): Try also autoloads.
 
 2009-12-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* symtab.h (symbol_table::fcn_info::clear_autoload_function): New method.
 	(symbol_table::clear_dld_function): New method.
diff --git a/src/defun-int.h b/src/defun-int.h
--- a/src/defun-int.h
+++ b/src/defun-int.h
@@ -50,16 +50,32 @@ install_dld_function (octave_dld_functio
 
 extern OCTINTERP_API void
 install_mex_function (void *fptr, bool fmex, const std::string& name,
 		      const octave_shlib& shl, bool relative = false);
 
 extern OCTINTERP_API void
 alias_builtin (const std::string& alias, const std::string& name);
 
+// Gets the shlib of the currently executing DLD function, if any.
+extern OCTINTERP_API octave_shlib
+get_current_shlib (void);
+
+// This is a convenience class that calls the above function automatically at
+// construction time. When deriving new classes, you can either use it as a field
+// or as a parent (with multiple inheritance).
+
+class octave_auto_shlib : public octave_shlib
+{
+  octave_auto_shlib (void)
+    : octave_shlib (get_current_shlib ()) { }
+  octave_auto_shlib (const octave_shlib& shl)
+    : octave_shlib (shl) { }
+};
+
 #define DECLARE_FUNX(name, args_name, nargout_name) \
   OCTAVE_EXPORT octave_value_list \
   name (const octave_value_list& args_name, int nargout_name)
 
 #define DECLARE_FUN(name, args_name, nargout_name) \
   DECLARE_FUNX (F ## name, args_name, nargout_name)
 
 // Define the code that will be used to insert the new function into
diff --git a/src/defun.cc b/src/defun.cc
--- a/src/defun.cc
+++ b/src/defun.cc
@@ -118,13 +118,36 @@ install_mex_function (void *fptr, bool f
 }
 
 void
 alias_builtin (const std::string& alias, const std::string& name)
 {
   symbol_table::alias_built_in_function (alias, name);
 }
 
+octave_shlib
+get_current_shlib (void)
+{
+  octave_shlib retval;
+  
+  octave_function *curr_fcn = octave_call_stack::current ();
+  if (curr_fcn)
+    {
+      if (curr_fcn->is_dld_function ())
+        {
+          octave_dld_function *dld = dynamic_cast<octave_dld_function *> (curr_fcn);
+          retval = dld->get_shlib ();
+        }
+      else if (curr_fcn->is_mex_function ())
+        {
+          octave_mex_function *mex = dynamic_cast<octave_mex_function *> (curr_fcn);
+          retval = mex->get_shlib ();
+        }
+    }
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-dld-fcn.h b/src/ov-dld-fcn.h
--- a/src/ov-dld-fcn.h
+++ b/src/ov-dld-fcn.h
@@ -67,16 +67,19 @@ public:
 
   bool is_dld_function (void) const { return true; }
   
   static octave_dld_function* create (octave_builtin::fcn ff,
       const octave_shlib& shl,
       const std::string& nm = std::string (),
       const std::string& ds = std::string ());
 
+  octave_shlib get_shlib (void) const
+    { return sh_lib; }
+
 private:
 
   octave_shlib sh_lib;
 
   // The time the file was last checked to see if it needs to be
   // parsed again.
   mutable octave_time t_checked;
 
diff --git a/src/ov-mex-fcn.h b/src/ov-mex-fcn.h
--- a/src/ov-mex-fcn.h
+++ b/src/ov-mex-fcn.h
@@ -79,16 +79,19 @@ public:
 
   bool is_mex_function (void) const { return true; }
 
   octave_value_list
   do_multi_index_op (int nargout, const octave_value_list& args);
 
   void atexit (void (*fcn) (void)) { exit_fcn_ptr = fcn; }
 
+  octave_shlib get_shlib (void) const
+    { return sh_lib; }
+
 private:
 
   void *mex_fcn_ptr;
 
   void (*exit_fcn_ptr) (void);
 
   bool have_fmex;
 
