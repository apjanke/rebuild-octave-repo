# HG changeset patch
# User Rik <rik@octave.org>
# Date 1454216893 28800
#      Sat Jan 30 21:08:13 2016 -0800
# Node ID 4c54a269ad44c0a0465c55199ec17eb9ce1a8ac1
# Parent  b5b531ba93cea5828eaea7cfd46d8be65e40f33b
xpow.cc: Use local err_XXX routines to simplify code.

* xpow.cc (err_failed_diagonalization): Renamed from
gripe_failed_diagonalization.  Call error with message.

* xpow.cc (err_nonsquare_matrix): New function.  Replace many direct calls to
error with new function.

diff --git a/libinterp/corefcn/xpow.cc b/libinterp/corefcn/xpow.cc
--- a/libinterp/corefcn/xpow.cc
+++ b/libinterp/corefcn/xpow.cc
@@ -49,21 +49,27 @@ along with Octave; see the file COPYING.
 
 #include "error.h"
 #include "ovl.h"
 #include "utils.h"
 #include "xpow.h"
 
 #include "bsxfun.h"
 
-// FIXME: Why does this routine call itself?
+
 static void
-gripe_failed_diagonalization (void)
+err_failed_diagonalization (void)
 {
-  gripe_failed_diagonalization ();
+  error ("Failed to diagonalize matrix while calculating matrix exponential");
+}
+
+static void
+err_nonsquare_matrix (void)
+{
+  error ("for x^A, A must be a square matrix. Use .^ for elementwise power.");
 }
 
 static inline int
 xisint (double x)
 {
   return (D_NINT (x) == x
           && ((x >= 0 && x < std::numeric_limits<int>::max ())
               || (x <= 0 && x > std::numeric_limits<int>::min ())));
@@ -105,17 +111,17 @@ octave_value
 xpow (double a, const Matrix& b)
 {
   octave_value retval;
 
   octave_idx_type nr = b.rows ();
   octave_idx_type nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for x^A, A must be a square matrix. Use .^ for elementwise power.");
+    err_nonsquare_matrix ();
 
   try
     {
       EIG b_eig (b);
 
       ComplexColumnVector lambda (b_eig.eigenvalues ());
       ComplexMatrix Q (b_eig.eigenvectors ());
 
@@ -132,17 +138,17 @@ xpow (double a, const Matrix& b)
       ComplexMatrix C = Q * D * Q.inverse ();
       if (a > 0)
         retval = real (C);
       else
         retval = C;
     }
   catch (const octave_execution_exception&)
     {
-      gripe_failed_diagonalization ();
+      err_failed_diagonalization ();
     }
 
   return retval;
 }
 
 // -*- 3 -*-
 octave_value
 xpow (double a, const Complex& b)
@@ -156,17 +162,17 @@ octave_value
 xpow (double a, const ComplexMatrix& b)
 {
   octave_value retval;
 
   octave_idx_type nr = b.rows ();
   octave_idx_type nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for x^A, A must be a square matrix. Use .^ for elementwise power.");
+    err_nonsquare_matrix ();
 
   EIG b_eig (b);
 
   try
     {
       ComplexColumnVector lambda (b_eig.eigenvalues ());
       ComplexMatrix Q (b_eig.eigenvectors ());
 
@@ -179,33 +185,33 @@ xpow (double a, const ComplexMatrix& b)
             lambda(i) = std::pow (a, elt);
         }
       ComplexDiagMatrix D (lambda);
 
       retval = ComplexMatrix (Q * D * Q.inverse ());
     }
   catch (const octave_execution_exception&)
     {
-      gripe_failed_diagonalization ();
+      err_failed_diagonalization ();
     }
 
   return retval;
 }
 
 // -*- 5 -*-
 octave_value
 xpow (const Matrix& a, double b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
+    err_nonsquare_matrix ();
 
   if (static_cast<int> (b) == b)
     {
       int btmp = static_cast<int> (b);
       if (btmp == 0)
         {
           retval = DiagMatrix (nr, nr, 1.0);
         }
@@ -263,34 +269,34 @@ precision, rcond = %g", rcond);
             lambda(i) = std::pow (lambda(i), b);
 
           ComplexDiagMatrix D (lambda);
 
           retval = ComplexMatrix (Q * D * Q.inverse ());
         }
       catch (const octave_execution_exception&)
         {
-          gripe_failed_diagonalization ();
+          err_failed_diagonalization ();
         }
     }
 
   return retval;
 }
 
 // -*- 5d -*-
 octave_value
 xpow (const DiagMatrix& a, double b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
+    err_nonsquare_matrix ();
 
   if (static_cast<int> (b) == b)
     {
       DiagMatrix r (nr, nc);
       for (octave_idx_type i = 0; i < nc; i++)
         r.dgelem (i) = std::pow (a.dgelem (i), b);
       retval = r;
     }
@@ -321,17 +327,17 @@ octave_value
 xpow (const Matrix& a, const Complex& b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
+    err_nonsquare_matrix ();
 
   EIG a_eig (a);
 
   try
     {
       ComplexColumnVector lambda (a_eig.eigenvalues ());
       ComplexMatrix Q (a_eig.eigenvectors ());
 
@@ -339,17 +345,17 @@ xpow (const Matrix& a, const Complex& b)
         lambda(i) = std::pow (lambda(i), b);
 
       ComplexDiagMatrix D (lambda);
 
       retval = ComplexMatrix (Q * D * Q.inverse ());
     }
   catch (const octave_execution_exception&)
     {
-      gripe_failed_diagonalization ();
+      err_failed_diagonalization ();
     }
 
   return retval;
 }
 
 // -*- 7 -*-
 octave_value
 xpow (const Complex& a, double b)
@@ -369,17 +375,17 @@ octave_value
 xpow (const Complex& a, const Matrix& b)
 {
   octave_value retval;
 
   octave_idx_type nr = b.rows ();
   octave_idx_type nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for x^A, A must be a square matrix. Use .^ for elementwise power.");
+    err_nonsquare_matrix ();
 
   EIG b_eig (b);
 
   try
     {
       ComplexColumnVector lambda (b_eig.eigenvalues ());
       ComplexMatrix Q (b_eig.eigenvectors ());
 
@@ -392,17 +398,17 @@ xpow (const Complex& a, const Matrix& b)
             lambda(i) = std::pow (a, elt);
         }
       ComplexDiagMatrix D (lambda);
 
       retval = ComplexMatrix (Q * D * Q.inverse ());
     }
   catch (const octave_execution_exception&)
     {
-      gripe_failed_diagonalization ();
+      err_failed_diagonalization ();
     }
 
   return retval;
 }
 
 // -*- 9 -*-
 octave_value
 xpow (const Complex& a, const Complex& b)
@@ -417,17 +423,17 @@ octave_value
 xpow (const Complex& a, const ComplexMatrix& b)
 {
   octave_value retval;
 
   octave_idx_type nr = b.rows ();
   octave_idx_type nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for x^A, A must be a square matrix. Use .^ for elementwise power.");
+    err_nonsquare_matrix ();
 
   EIG b_eig (b);
 
   try
     {
       ComplexColumnVector lambda (b_eig.eigenvalues ());
       ComplexMatrix Q (b_eig.eigenvectors ());
 
@@ -440,33 +446,33 @@ xpow (const Complex& a, const ComplexMat
             lambda(i) = std::pow (a, elt);
         }
       ComplexDiagMatrix D (lambda);
 
       retval = ComplexMatrix (Q * D * Q.inverse ());
     }
   catch (const octave_execution_exception&)
     {
-      gripe_failed_diagonalization ();
+      err_failed_diagonalization ();
     }
 
   return retval;
 }
 
 // -*- 11 -*-
 octave_value
 xpow (const ComplexMatrix& a, double b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
+    err_nonsquare_matrix ();
 
   if (static_cast<int> (b) == b)
     {
       int btmp = static_cast<int> (b);
       if (btmp == 0)
         {
           retval = DiagMatrix (nr, nr, 1.0);
         }
@@ -524,34 +530,34 @@ precision, rcond = %g", rcond);
             lambda(i) = std::pow (lambda(i), b);
 
           ComplexDiagMatrix D (lambda);
 
           retval = ComplexMatrix (Q * D * Q.inverse ());
         }
       catch (const octave_execution_exception&)
         {
-          gripe_failed_diagonalization ();
+          err_failed_diagonalization ();
         }
     }
 
   return retval;
 }
 
 // -*- 12 -*-
 octave_value
 xpow (const ComplexMatrix& a, const Complex& b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
+    err_nonsquare_matrix ();
 
   EIG a_eig (a);
 
   try
     {
       ComplexColumnVector lambda (a_eig.eigenvalues ());
       ComplexMatrix Q (a_eig.eigenvectors ());
 
@@ -559,33 +565,33 @@ xpow (const ComplexMatrix& a, const Comp
         lambda(i) = std::pow (lambda(i), b);
 
       ComplexDiagMatrix D (lambda);
 
       retval = ComplexMatrix (Q * D * Q.inverse ());
     }
   catch (const octave_execution_exception&)
     {
-      gripe_failed_diagonalization ();
+      err_failed_diagonalization ();
     }
 
   return retval;
 }
 
 // -*- 12d -*-
 octave_value
 xpow (const ComplexDiagMatrix& a, const Complex& b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
+    err_nonsquare_matrix ();
 
   ComplexDiagMatrix r (nr, nc);
   for (octave_idx_type i = 0; i < nc; i++)
     r(i, i) = std::pow (a(i, i), b);
   retval = r;
 
   return retval;
 }
@@ -1513,17 +1519,17 @@ octave_value
 xpow (float a, const FloatMatrix& b)
 {
   octave_value retval;
 
   octave_idx_type nr = b.rows ();
   octave_idx_type nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for x^A, A must be a square matrix. Use .^ for elementwise power.");
+    err_nonsquare_matrix ();
 
   FloatEIG b_eig (b);
 
   try
     {
       FloatComplexColumnVector lambda (b_eig.eigenvalues ());
       FloatComplexMatrix Q (b_eig.eigenvectors ());
 
@@ -1541,17 +1547,17 @@ xpow (float a, const FloatMatrix& b)
 
       if (a > 0)
         retval = real (C);
       else
         retval = C;
     }
   catch (const octave_execution_exception&)
     {
-      gripe_failed_diagonalization ();
+      err_failed_diagonalization ();
     }
 
   return retval;
 }
 
 // -*- 3 -*-
 octave_value
 xpow (float a, const FloatComplex& b)
@@ -1565,17 +1571,17 @@ octave_value
 xpow (float a, const FloatComplexMatrix& b)
 {
   octave_value retval;
 
   octave_idx_type nr = b.rows ();
   octave_idx_type nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for x^A, A must be a square matrix. Use .^ for elementwise power.");
+    err_nonsquare_matrix ();
 
   FloatEIG b_eig (b);
 
   try
     {
       FloatComplexColumnVector lambda (b_eig.eigenvalues ());
       FloatComplexMatrix Q (b_eig.eigenvectors ());
 
@@ -1588,33 +1594,33 @@ xpow (float a, const FloatComplexMatrix&
             lambda(i) = std::pow (a, elt);
         }
       FloatComplexDiagMatrix D (lambda);
 
       retval = FloatComplexMatrix (Q * D * Q.inverse ());
     }
   catch (const octave_execution_exception&)
     {
-      gripe_failed_diagonalization ();
+      err_failed_diagonalization ();
     }
 
   return retval;
 }
 
 // -*- 5 -*-
 octave_value
 xpow (const FloatMatrix& a, float b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
+    err_nonsquare_matrix ();
 
   if (static_cast<int> (b) == b)
     {
       int btmp = static_cast<int> (b);
       if (btmp == 0)
         {
           retval = FloatDiagMatrix (nr, nr, 1.0);
         }
@@ -1672,34 +1678,34 @@ precision, rcond = %g", rcond);
             lambda(i) = std::pow (lambda(i), b);
 
           FloatComplexDiagMatrix D (lambda);
 
           retval = FloatComplexMatrix (Q * D * Q.inverse ());
         }
       catch (const octave_execution_exception&)
         {
-          gripe_failed_diagonalization ();
+          err_failed_diagonalization ();
         }
     }
 
   return retval;
 }
 
 // -*- 5d -*-
 octave_value
 xpow (const FloatDiagMatrix& a, float b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
+    err_nonsquare_matrix ();
 
   if (static_cast<int> (b) == b)
     {
       FloatDiagMatrix r (nr, nc);
       for (octave_idx_type i = 0; i < nc; i++)
         r.dgelem (i) = std::pow (a.dgelem (i), b);
       retval = r;
     }
@@ -1720,17 +1726,17 @@ octave_value
 xpow (const FloatMatrix& a, const FloatComplex& b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
+    err_nonsquare_matrix ();
 
   FloatEIG a_eig (a);
 
   try
     {
       FloatComplexColumnVector lambda (a_eig.eigenvalues ());
       FloatComplexMatrix Q (a_eig.eigenvectors ());
 
@@ -1738,17 +1744,17 @@ xpow (const FloatMatrix& a, const FloatC
         lambda(i) = std::pow (lambda(i), b);
 
       FloatComplexDiagMatrix D (lambda);
 
       retval = FloatComplexMatrix (Q * D * Q.inverse ());
     }
   catch (const octave_execution_exception&)
     {
-      gripe_failed_diagonalization ();
+      err_failed_diagonalization ();
     }
 
   return retval;
 }
 
 // -*- 7 -*-
 octave_value
 xpow (const FloatComplex& a, float b)
@@ -1768,17 +1774,17 @@ octave_value
 xpow (const FloatComplex& a, const FloatMatrix& b)
 {
   octave_value retval;
 
   octave_idx_type nr = b.rows ();
   octave_idx_type nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for x^A, A must be a square matrix. Use .^ for elementwise power.");
+    err_nonsquare_matrix ();
 
   FloatEIG b_eig (b);
 
   try
     {
       FloatComplexColumnVector lambda (b_eig.eigenvalues ());
       FloatComplexMatrix Q (b_eig.eigenvectors ());
 
@@ -1791,17 +1797,17 @@ xpow (const FloatComplex& a, const Float
             lambda(i) = std::pow (a, elt);
         }
       FloatComplexDiagMatrix D (lambda);
 
       retval = FloatComplexMatrix (Q * D * Q.inverse ());
     }
   catch (const octave_execution_exception&)
     {
-      gripe_failed_diagonalization ();
+      err_failed_diagonalization ();
     }
 
   return retval;
 }
 
 // -*- 9 -*-
 octave_value
 xpow (const FloatComplex& a, const FloatComplex& b)
@@ -1816,17 +1822,17 @@ octave_value
 xpow (const FloatComplex& a, const FloatComplexMatrix& b)
 {
   octave_value retval;
 
   octave_idx_type nr = b.rows ();
   octave_idx_type nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for x^A, A must be a square matrix. Use .^ for elementwise power.");
+    err_nonsquare_matrix ();
 
   FloatEIG b_eig (b);
 
   try
     {
       FloatComplexColumnVector lambda (b_eig.eigenvalues ());
       FloatComplexMatrix Q (b_eig.eigenvectors ());
 
@@ -1839,33 +1845,33 @@ xpow (const FloatComplex& a, const Float
             lambda(i) = std::pow (a, elt);
         }
       FloatComplexDiagMatrix D (lambda);
 
       retval = FloatComplexMatrix (Q * D * Q.inverse ());
     }
   catch (const octave_execution_exception&)
     {
-      gripe_failed_diagonalization ();
+      err_failed_diagonalization ();
     }
 
   return retval;
 }
 
 // -*- 11 -*-
 octave_value
 xpow (const FloatComplexMatrix& a, float b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
+    err_nonsquare_matrix ();
 
   if (static_cast<int> (b) == b)
     {
       int btmp = static_cast<int> (b);
       if (btmp == 0)
         {
           retval = FloatDiagMatrix (nr, nr, 1.0);
         }
@@ -1923,34 +1929,34 @@ precision, rcond = %g", rcond);
             lambda(i) = std::pow (lambda(i), b);
 
           FloatComplexDiagMatrix D (lambda);
 
           retval = FloatComplexMatrix (Q * D * Q.inverse ());
         }
       catch (const octave_execution_exception&)
         {
-          gripe_failed_diagonalization ();
+          err_failed_diagonalization ();
         }
     }
 
   return retval;
 }
 
 // -*- 12 -*-
 octave_value
 xpow (const FloatComplexMatrix& a, const FloatComplex& b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
+    err_nonsquare_matrix ();
 
   FloatEIG a_eig (a);
 
   try
     {
       FloatComplexColumnVector lambda (a_eig.eigenvalues ());
       FloatComplexMatrix Q (a_eig.eigenvectors ());
 
@@ -1958,33 +1964,33 @@ xpow (const FloatComplexMatrix& a, const
         lambda(i) = std::pow (lambda(i), b);
 
       FloatComplexDiagMatrix D (lambda);
 
       retval = FloatComplexMatrix (Q * D * Q.inverse ());
     }
   catch (const octave_execution_exception&)
     {
-      gripe_failed_diagonalization ();
+      err_failed_diagonalization ();
     }
 
   return retval;
 }
 
 // -*- 12d -*-
 octave_value
 xpow (const FloatComplexDiagMatrix& a, const FloatComplex& b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
+    err_nonsquare_matrix ();
 
   FloatComplexDiagMatrix r (nr, nc);
   for (octave_idx_type i = 0; i < nc; i++)
     r(i, i) = std::pow (a(i, i), b);
   retval = r;
 
   return retval;
 }
