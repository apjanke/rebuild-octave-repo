# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1238160490 -3600
#      Fri Mar 27 14:28:10 2009 +0100
# Node ID 867d5d1aed0637fd7074df34118f6fe9e058ea91
# Parent  a1635f7c4cbeaf758dfde892c2a34bc1ae1d8532
swap out args in balance for M*b compat

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-03-27  Jaroslav Hajek  <highegg@gmail.com>
+
+	* linear-algebra/expm.m: Fix order of outputs from balance.
+
 2009-03-25  Kai Habel  <kai.habel@gmx.de>
 
 	* general/gradient.m: Fix calculation for more than two
 	dimensions.  Change interpretation of vector arguments from
 	spacing to coordinates.  New tests.
 
 2009-03-25  John W. Eaton  <jwe@octave.org>
 
diff --git a/scripts/linear-algebra/expm.m b/scripts/linear-algebra/expm.m
--- a/scripts/linear-algebra/expm.m
+++ b/scripts/linear-algebra/expm.m
@@ -110,22 +110,22 @@ function r = expm (a)
   n = rows (a);
   ## Trace reduction.
   a(a == -Inf) = -realmax;
   trshift = trace (a) / length (a);
   if (trshift > 0)
     a -= trshift*eye (n);
   endif
   ## Balancing.
-  [p, d, aa] = balance (a);
+  [d, p, aa] = balance (a);
   ## FIXME: can we both permute and scale at once? Or should we rather do
   ## this:
   ##
-  ##   [p, xx, aa] = balance (a, "noscal");
-  ##   [xx, d, aa] = balance (aa, "noperm");
+  ##   [d, xx, aa] = balance (a, "noperm");
+  ##   [xx, p, aa] = balance (aa, "noscal");
   [f, e] = log2 (norm (aa, "inf"));
   s = max (0, e);
   s = min (s, 1023);
   aa *= 2^(-s);
 
   ## Pade approximation for exp(A).
   c = [5.0000000000000000e-1,...
        1.1666666666666667e-1,...
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-03-27  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/balance.cc (Fbalance): Fix order of output args.
+
 2009-03-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/find.cc 
 	(find_nonzero_elem_idx (const Array<T>&, ...)): Move dimensions
 	fixup to liboctave.
 
 2009-03-26  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/DLD-FUNCTIONS/balance.cc b/src/DLD-FUNCTIONS/balance.cc
--- a/src/DLD-FUNCTIONS/balance.cc
+++ b/src/DLD-FUNCTIONS/balance.cc
@@ -46,28 +46,28 @@ along with Octave; see the file COPYING.
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 DEFUN_DLD (balance, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{aa} =} balance (@var{a}, @var{opt})\n\
 @deftypefnx {Loadable Function} {[@var{dd}, @var{aa}] =} balance (@var{a}, @var{opt})\n\
-@deftypefnx {Loadable Function} {[@var{p}, @var{d}, @var{aa}] =} balance (@var{a}, @var{opt})\n\
+@deftypefnx {Loadable Function} {[@var{d}, @var{p}, @var{aa}] =} balance (@var{a}, @var{opt})\n\
 @deftypefnx {Loadable Function} {[@var{cc}, @var{dd}, @var{aa}, @var{bb}] =} balance (@var{a}, @var{b}, @var{opt})\n\
 \n\
 Compute @code{aa = dd \\ a * dd} in which @code{aa} is a matrix whose\n\
 row and column norms are roughly equal in magnitude, and\n\
 @code{dd} = @code{p * d}, in which @code{p} is a permutation\n\
 matrix and @code{d} is a diagonal matrix of powers of two.  This allows\n\
 the equilibration to be computed without roundoff.  Results of\n\
 eigenvalue calculation are typically improved by balancing first.\n\
 \n\
 If two output values are requested, @code{balance} returns \n\
-the permutation @code{p} and the diagonal @code{d} separately as vectors. \n\
+the diagonal @code{d} and the permutation @code{p} separately as vectors. \n\
 In this case, @code{dd = eye(n)(p,:) * diag (d)}, where @code{n} is the matrix \n\
 size. \n\
 \n\
 If four output values are requested, compute @code{aa = cc*a*dd} and\n\
 @code{bb = cc*b*dd)}, in which @code{aa} and @code{bb} have non-zero\n\
 elements of approximately the same magnitude and @code{cc} and @code{dd}\n\
 are permuted diagonal matrices as in @code{dd} for the algebraic\n\
 eigenvalue problem.\n\
@@ -164,18 +164,18 @@ Generalized eigenvalue problem balancing
 	      else if (nargout == 2)
 		{
 		  retval(1) = result.balanced_matrix ();
 		  retval(0) = result.balancing_matrix ();
 		}
               else
                 {
                   retval(2) = result.balanced_matrix ();
-                  retval(1) = result.scaling_vector ();
-                  retval(0) = result.permuting_vector ();
+                  retval(0) = result.scaling_vector ();
+                  retval(1) = result.permuting_vector ();
                 }
 
 	    }
 	  else
 	    {
 	      FloatAEPBALANCE result (faa, noperm, noscal);
 
 	      if (nargout == 0 || nargout == 1)
@@ -183,18 +183,18 @@ Generalized eigenvalue problem balancing
 	      else if (nargout == 2)
 		{
 		  retval(1) = result.balanced_matrix ();
 		  retval(0) = result.balancing_matrix ();
 		}
               else
                 {
                   retval(2) = result.balanced_matrix ();
-                  retval(1) = result.scaling_vector ();
-                  retval(0) = result.permuting_vector ();
+                  retval(0) = result.scaling_vector ();
+                  retval(1) = result.permuting_vector ();
                 }
 	    }
 	}
       else
 	{
 	  if (complex_case)
 	    {
 	      ComplexAEPBALANCE result (caa, noperm, noscal);
@@ -204,36 +204,36 @@ Generalized eigenvalue problem balancing
 	      else if (nargout == 2)
 		{
 		  retval(1) = result.balanced_matrix ();
 		  retval(0) = result.balancing_matrix ();
 		}
               else
                 {
                   retval(2) = result.balanced_matrix ();
-                  retval(1) = result.scaling_vector ();
-                  retval(0) = result.permuting_vector ();
+                  retval(0) = result.scaling_vector ();
+                  retval(1) = result.permuting_vector ();
                 }
 	    }
 	  else
 	    {
 	      AEPBALANCE result (aa, noperm, noscal);
 
 	      if (nargout == 0 || nargout == 1)
 		retval(0) = result.balanced_matrix ();
 	      else if (nargout == 2)
 		{
 		  retval(1) = result.balanced_matrix ();
 		  retval(0) = result.balancing_matrix ();
 		}
               else
                 {
                   retval(2) = result.balanced_matrix ();
-                  retval(1) = result.scaling_vector ();
-                  retval(0) = result.permuting_vector ();
+                  retval(0) = result.scaling_vector ();
+                  retval(1) = result.permuting_vector ();
                 }
 	    }
 	}
     }
   else
     {
       std::string bal_job;
       if (nargout == 1)
