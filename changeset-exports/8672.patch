# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1233785192 18000
#      Wed Feb 04 17:06:32 2009 -0500
# Node ID 2a49c32d43228358677d817d4052023fea2b74e7
# Parent  d7128ae51e44f4f5547e7481f3f5e3cb9f4a34ad
allow help to work with files containing only comments

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-02-04  John W. Eaton  <jwe@octave.org>
+
+	* help/which.m: Still print something sensible if type is empty.
+
 2009-02-04  Soren Hauberg  <hauberg@gmail.com>
             Thomas Treichl  <Thomas.Treichl@gmx.net>
 
 	* miscellaneous/Makefile.in (SOURCES): Add bzip2.m to the list.
 
 2009-02-04  Frederick Umminger  <Frederick_Umminger@playstation.sony.com>
 
 	* signal/freqz.m: Ensure causal phase response.
diff --git a/scripts/help/which.m b/scripts/help/which.m
--- a/scripts/help/which.m
+++ b/scripts/help/which.m
@@ -26,21 +26,28 @@
 function varargout = which (varargin)
 
   if (nargin > 0 && iscellstr (varargin))
     m = __which__ (varargin{:});
 
     if (nargout == 0)
       for i = 1:nargin
 	if (isempty (m(i).file))
-	  printf ("`%s' is a %s function\n",
-		  m(i).name, m(i).type);
+	  if (! isempty (m(i).type))
+	    printf ("`%s' is a %s function\n",
+		    m(i).name, m(i).type);
+	  endif
 	else
-	  printf ("`%s' is a %s from the file %s\n",
-		  m(i).name, m(i).type, m(i).file);
+	  if (isempty (m(i).type))
+	    printf ("`%s' is the file %s\n",
+		    m(i).name, m(i).file);
+	  else
+	    printf ("`%s' is a %s from the file %s\n",
+		    m(i).name, m(i).type, m(i).file);
+	  endif
 	endif
       endfor
     else
       varargout = {m.file};
     endif
   else
     print_usage ();
   endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 2009-02-04  John W. Eaton  <jwe@octave.org>
 
+	* help.cc (do_which): If NAME is not in the symbol table, look for
+	a function file in the load path.
+	(raw_help_from_file): Unwind-protect and set reading_script_file.
+
 	* pt-loop.h, pt-loop.cc (evaluating_looping_command):
 	Delete global variable and all uses.
 	* parse.y, parse.h (evaluating_function_body): Delete global
 	variable and all uses.
 	(make_break_command, make_continue_command, make_return_command):
 	Use tree_evaluator::in_fcn_or_script_body and
 	tree_evaluator::in_loop_command instead of
 	evaluating_function_body and evaluating_looping_command.
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -61,16 +61,17 @@ along with Octave; see the file COPYING.
 #include "parse.h"
 #include "pathsearch.h"
 #include "procstream.h"
 #include "pt-pr-code.h"
 #include "sighandlers.h"
 #include "symtab.h"
 #include "syswait.h"
 #include "toplev.h"
+#include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 #include "version.h"
 #include "quit.h"
 
 // Name of the info file specified on command line.
 // (--info-file file)
 std::string Vinfo_file;
@@ -647,18 +648,24 @@ raw_help_from_symbol_table (const std::s
 }
 
 static bool
 raw_help_from_file (const std::string& nm, std::string& h, 
 		    std::string& file, bool& symbol_found)
 {
   bool retval = false;
 
+  // FIXME -- this is a bit of a kluge...
+  unwind_protect_bool (reading_script_file);
+  reading_script_file = true;
+
   h = get_help_from_file (nm, symbol_found, file);
 
+  unwind_protect::run ();
+
   if (h.length () > 0)
     retval = true;
 
   return retval;
 }
 
 static bool
 raw_help_from_map (const std::string& nm, std::string& h, 
@@ -811,16 +818,22 @@ do_which (const std::string& name, std::
 	      else
 		type = "built-in function";
 	    }
 	  else
 	    type = val.is_user_script ()
 	      ? std::string ("script") : std::string ("function");
 	}
     }
+  else
+    {
+      // We might find a file that contains only a doc string.
+
+      file = load_path::find_fcn_file (name);
+    }
 
   return file;
 }
 
 std::string
 do_which (const std::string& name)
 {
   std::string retval;
