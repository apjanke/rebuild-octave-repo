# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1502235947 14400
#      Tue Aug 08 19:45:47 2017 -0400
# Node ID 3cace95ce563176e792f1e904330e929cf709a4c
# Parent  ca4535a6ee9f2f56f9717d0caa759505edb5346d
* oct-parse.in.yy (source_file): Restore source-ing of function files.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4811,16 +4811,20 @@ not loaded anymore during the current Oc
         }
     }
 
   return retval;
 }
 
 namespace octave
 {
+  // Execute the contents of a script file.  For compatibility with
+  // Matlab, also execute a function file by calling the function it
+  // defines with no arguments and nargout = 0.
+
   void
   source_file (const std::string& file_name, const std::string& context,
                bool verbose, bool require_file, const std::string& warn_for)
   {
     // Map from absolute name of script file to recursion level.  We
     // use a map instead of simply placing a limit on recursion in the
     // source_file function so that two mutually recursive scripts
     // written as
@@ -4904,22 +4908,25 @@ namespace octave
 
     std::string symbol = file_name.substr (dir_end, extension - dir_end);
     std::string full_name = sys::canonicalize_file_name (file_name);
 
     // Check if this file is already loaded (or in the path)
     symbol_table& symtab = __get_symbol_table__ ("source_file");
     octave_value ov_code = symtab.find (symbol);
 
-    if (ov_code.is_user_script ())
+    // For compatibility with Matlab, accept both scripts and
+    // functions.
+
+    if (ov_code.is_user_code ())
       {
-        octave_user_script *script = ov_code.user_script_value ();
-
-        if (! script
-            || (sys::canonicalize_file_name (script->fcn_file_name ())
+        octave_user_code *code = ov_code.user_code_value ();
+
+        if (! code
+            || (sys::canonicalize_file_name (code->fcn_file_name ())
                 != full_name))
           {
             // Wrong file, so load it below.
             ov_code = octave_value ();
           }
       }
     else
       {
@@ -4940,32 +4947,33 @@ namespace octave
           }
         catch (execution_exception& e)
           {
             error (e, "source: error sourcing file '%s'",
                    file_full_name.c_str ());
           }
       }
 
-    // Return or error if we don't have a valid script
+    // Return or error if we don't have a valid script or function.
+
     if (ov_code.is_undefined ())
       return;
 
-    if (! ov_code.is_user_script ())
+    if (! ov_code.is_user_code ())
       error ("source: %s is not a script", full_name.c_str ());
 
     if (verbose)
       {
         std::cout << "executing commands from " << full_name << " ... ";
         std::cout.flush ();
       }
 
-    octave_user_script *script = ov_code.user_script_value ();
-
-    script->call (tw, 0);
+    octave_user_code *code = ov_code.user_code_value ();
+
+    code->call (tw, 0, octave_value_list ());
 
     if (verbose)
       std::cout << "done." << std::endl;
   }
 }
 
 DEFMETHOD (mfilename, interp, args, ,
            doc: /* -*- texinfo -*-
