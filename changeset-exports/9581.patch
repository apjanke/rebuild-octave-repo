# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1251382103 -7200
#      Thu Aug 27 16:08:23 2009 +0200
# Node ID 3d0d2bda3a0fccfe99d04b64e7488daa6d81a56f
# Parent  8bf27324a9d0b8eabb101a5bef6cc2c60c24ef12
fix previous change, avoid duplicate loads of methods in descendant classes

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,11 +1,24 @@
 2009-08-27  Jaroslav Hajek  <highegg@gmail.com>
 
-	* src/ov-class.cc (get_current_method_class): Simplify.
+	* ov-class.cc (get_current_method_class): Simplify.
+	(octave_class::in_class_method): Don't rely on multiple copies of
+	methods. Don't declare as const.
+	(octave_class::octave_class (const Octave_map&, const std::string&, 
+	const octave_value_list&)):
+	Call symbol_table::add_to_parent_map instead.
+	* ov-class.h (octave_class::in_class_method): Don't declare as const.
+	* symtab.h (symbol_table::parent_map): New field.
+	(symbol_table::add_to_parent_map): New method.
+	(symbol_table::load_class_method): Search also parent classes.
+	* load-path.h (load_path::parent_map, load_path::add_to_parent_map,
+	load_path::do_add_to_parent_map): Remove.
+	* load-path.cc (load_path::do_find_method): Don't search parent
+	classes.
 
 2009-08-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* OPERATORS/op-cs-cs.cc: Simplify comparison operators.
 	* OPERATORS/op-fcs-fcs.cc: Ditto.
 
 2009-08-25  David Grundberg  <individ@acc.umu.se>
 
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -507,17 +507,16 @@ load_path::do_initialize (bool set_initi
 
 void
 load_path::do_clear (void)
 {
   dir_info_list.clear ();
   fcn_map.clear ();
   private_fcn_map.clear ();
   method_map.clear ();
-  parent_map.clear ();
 
   do_append (".", false);
 }
 
 static std::list<std::string>
 split_path (const std::string& p)
 {
   std::list<std::string> retval;
@@ -1012,39 +1011,17 @@ load_path::do_find_method (const std::st
   const_method_map_iterator q = method_map.find (class_name);
 
   if (q != method_map.end ())
     {
       const fcn_map_type& m = q->second;
 
       const_fcn_map_iterator p = m.find (meth);
 
-      if (p == m.end ())
-	{
-	  // Look in parent classes.
-
-	  const_parent_map_iterator r = parent_map.find (class_name);
-
-	  if (r != parent_map.end ())
-	    {
-	      const std::list<std::string>& plist = r->second;
-	      std::list<std::string>::const_iterator it = plist.begin ();
-
-	      while (it != plist.end ())
-		{
-		  retval = do_find_method (*it, meth, dir_name, type);
-
-		  if (retval != "")
-		    break;
-
-		  it++;
-		}
-	    }
-	}
-      else
+      if (p != m.end ())
 	{
 	  const file_info_list_type& file_info_list = p->second;
 
 	  for (const_file_info_list_iterator i = file_info_list.begin ();
 	       i != file_info_list.end ();
 	       i++)
 	    {
 	      const file_info& fi = *i;
@@ -1593,23 +1570,16 @@ load_path::do_display (std::ostream& os)
     }
 
   os << "\n";
 
 #endif
 }
 
 void
-load_path::do_add_to_parent_map (const std::string& classname,
-				 const std::list<std::string>& parent_list) const
-{
-  parent_map[classname] = parent_list;
-}
-
-void
 load_path::add_to_fcn_map (const dir_info& di, bool at_end) const
 {
   std::string dir_name = di.dir_name;
 
   string_vector fcn_files = di.fcn_files;
 
   octave_idx_type len = fcn_files.length ();
 
diff --git a/src/load-path.h b/src/load-path.h
--- a/src/load-path.h
+++ b/src/load-path.h
@@ -33,17 +33,17 @@ along with Octave; see the file COPYING.
 
 class
 OCTINTERP_API
 load_path
 {
 protected:
 
   load_path (void)
-    : dir_info_list (), fcn_map (), method_map (), parent_map () { }
+    : dir_info_list (), fcn_map (), method_map () { }
 
 public:
 
   typedef void (*hook_fcn_ptr) (const std::string& dir);
 
   ~load_path (void) { }
 
   static void initialize (bool set_initial_path = false)
@@ -231,23 +231,16 @@ public:
     return instance_ok () ? instance->do_get_command_line_path () : std::string ();
   }
 
   static std::string system_path (void)
   {
     return instance_ok () ? instance->do_system_path () : std::string ();
   }
 
-  static void add_to_parent_map (const std::string& classname,
-				 const std::list<std::string>& parent_list)
-  {
-    if (instance_ok ())
-      instance->do_add_to_parent_map (classname, parent_list);
-  }
-
 private:
 
   static const int M_FILE = 1;
   static const int OCT_FILE = 2;
   static const int MEX_FILE = 4;
 
   class dir_info
   {
@@ -397,32 +390,24 @@ private:
   typedef private_fcn_map_type::iterator private_fcn_map_iterator;
 
   // <CLASS_NAME, <FCN_NAME, FILE_INFO_LIST>>
   typedef std::map<std::string, fcn_map_type> method_map_type;
 
   typedef method_map_type::const_iterator const_method_map_iterator;
   typedef method_map_type::iterator method_map_iterator;
  
-  // <CLASS_NAME, PARENT_LIST>>
-  typedef std::map<std::string, std::list<std::string> > parent_map_type;
-
-  typedef parent_map_type::const_iterator const_parent_map_iterator;
-  typedef parent_map_type::iterator parent_map_iterator;
-
   mutable dir_info_list_type dir_info_list;
 
   mutable fcn_map_type fcn_map;
 
   mutable private_fcn_map_type private_fcn_map;
 
   mutable method_map_type method_map;
 
-  mutable parent_map_type parent_map;
-
   static load_path *instance;
 
   static hook_fcn_ptr add_hook;
 
   static hook_fcn_ptr remove_hook;
 
   static std::string command_line_path;
 
@@ -513,19 +498,16 @@ private:
   print_fcn_list (std::ostream& os, const dir_info::fcn_file_map_type& lst);
 
   void do_display (std::ostream& os) const;
 
   std::string do_system_path (void) const { return sys_path; }
 
   std::string do_get_command_line_path (void) const { return command_line_path; }
 
-  void do_add_to_parent_map (const std::string& classname,
-			     const std::list<std::string>& parent_list) const;
-
   void add_to_fcn_map (const dir_info& di, bool at_end) const;
 
   void add_to_private_fcn_map (const dir_info& di) const;
 
   void add_to_method_map (const dir_info& di, bool at_end) const;
 
   friend dir_info::fcn_file_map_type get_fcn_files (const std::string& d);
 };
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -89,17 +89,17 @@ octave_class::octave_class (const Octave
 	      parent_list.push_back (cnm);
 
 	      map.assign (cnm, parent);
 	    }
 	}
     }
 
   if (! error_state)
-    load_path::add_to_parent_map (id, parent_list);
+    symbol_table::add_to_parent_map (id, parent_list);
 }
 
 octave_base_value *
 octave_class::unique_clone (void)
 { 
   if (count == obsolete_copies)
     {
       // All remaining copies are obsolete. We don't actually need to clone.
@@ -118,17 +118,18 @@ octave_class::unique_clone (void)
 
 static std::string
 get_current_method_class (void)
 {
   std::string retval;
 
   octave_function *fcn = octave_call_stack::current ();
 
-  retval = fcn->dispatch_class ();
+  if (fcn->is_class_method () || fcn->is_class_constructor ())
+    retval = fcn->dispatch_class ();
 
   return retval;
 }
 
 static void
 gripe_invalid_index (void)
 {
   error ("invalid index for class");
@@ -1569,25 +1570,25 @@ mxArray *
 octave_class::as_mxArray (void) const
 {
   gripe_wrong_type_arg ("octave_class::as_mxArray ()", type_name ());
 
   return 0;
 }
 
 bool
-octave_class::in_class_method (void) const
+octave_class::in_class_method (void)
 {
   octave_function *fcn = octave_call_stack::current ();
 
   return (fcn
 	  && (fcn->is_class_method ()
 	      || fcn->is_class_constructor ()
 	      || fcn->is_private_function_of_class (class_name ()))
-	  && fcn->dispatch_class () == class_name ());
+	  && find_parent_class (fcn->dispatch_class ()));
 }
 
 octave_class::exemplar_info::exemplar_info (const octave_value& obj)
   : field_names (), parent_class_names ()
 {
   if (obj.is_object ())
     {
       Octave_map m = obj.map_value ();
diff --git a/src/ov-class.h b/src/ov-class.h
--- a/src/ov-class.h
+++ b/src/ov-class.h
@@ -191,17 +191,17 @@ public:
 
 private:
   static int t_id;
 
   static const std::string t_name;
   std::string c_name;
   std::list<std::string> parent_list;
 
-  bool in_class_method (void) const;
+  bool in_class_method (void);
 
   int obsolete_copies;
 
 public:
   // The list of field names and parent classes defines a class.  We
   // keep track of each class that has been created so that we know
   class exemplar_info
   {
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -52,16 +52,18 @@ symbol_table::scope_id_cache *symbol_tab
 std::map<symbol_table::scope_id, symbol_table*> symbol_table::all_instances;
 
 std::map<std::string, octave_value> symbol_table::global_table;
 
 std::map<std::string, symbol_table::fcn_info> symbol_table::fcn_table;
 
 std::map<std::string, std::set<std::string> > symbol_table::class_precedence_table;
 
+std::map<std::string, std::list<std::string> > symbol_table::parent_map;
+
 const symbol_table::scope_id symbol_table::xglobal_scope = 0;
 const symbol_table::scope_id symbol_table::xtop_scope = 1;
 
 symbol_table::scope_id symbol_table::xcurrent_scope = 1;
 
 symbol_table::context_id symbol_table::xcurrent_context = 0;
 
 // Should Octave always check to see if function files have changed
@@ -371,16 +373,42 @@ symbol_table::fcn_info::fcn_info_rep::lo
 
 	  if (fcn)
 	    {
 	      retval = octave_value (fcn);
 
 	      class_methods[dispatch_type] = retval;
 	    }
 	}
+
+      if (retval.is_undefined ())
+        {
+          // Search parent classes
+
+          const_parent_map_iterator r = parent_map.find (dispatch_type);
+
+          if (r != parent_map.end ())
+            {
+              const std::list<std::string>& plist = r->second;
+              std::list<std::string>::const_iterator it = plist.begin ();
+
+              while (it != plist.end ())
+                {
+                  retval = find_method (*it);
+
+                  if (retval.is_defined ()) 
+                    {
+                      class_methods[dispatch_type] = retval;
+                      break;
+                    }
+
+                  it++;
+                }
+            }
+        }
     }
 
   return retval;
 }
 
 void
 symbol_table::fcn_info::fcn_info_rep::print_dispatch (std::ostream& os) const
 {
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -1782,16 +1782,22 @@ public:
       error ("can't free global or top-level scopes!");
     else
       symbol_table::scope_id_cache::free (scope);
   }
 
   static void stash_dir_name_for_subfunctions (scope_id scope,
 					       const std::string& dir_name);
 
+  static void add_to_parent_map (const std::string& classname,
+				 const std::list<std::string>& parent_list)
+  {
+    parent_map[classname] = parent_list;
+  }
+
 private:
 
   typedef std::map<std::string, symbol_record>::const_iterator table_const_iterator;
   typedef std::map<std::string, symbol_record>::iterator table_iterator;
 
   typedef std::map<std::string, octave_value>::const_iterator global_table_const_iterator;
   typedef std::map<std::string, octave_value>::iterator global_table_iterator;
 
@@ -1829,16 +1835,22 @@ private:
 
   // Mape from class names to set of classes that have lower
   // precedence.
   static std::map<std::string, std::set<std::string> > class_precedence_table;
 
   typedef std::map<std::string, std::set<std::string> >::const_iterator class_precedence_table_const_iterator;
   typedef std::map<std::string, std::set<std::string> >::iterator class_precedence_table_iterator;
 
+  // Map from class names to parent class names.
+  static std::map<std::string, std::list<std::string> > parent_map;
+
+  typedef std::map<std::string, std::list<std::string> >::const_iterator const_parent_map_iterator;
+  typedef std::map<std::string, std::list<std::string> >::iterator parent_map_iterator;
+
   static const scope_id xglobal_scope;
   static const scope_id xtop_scope;
 
   static scope_id xcurrent_scope;
 
   static context_id xcurrent_context;
 
   symbol_table (void)
