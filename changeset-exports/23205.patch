# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1487512798 -3600
#      Sun Feb 19 14:59:58 2017 +0100
# Branch stable
# Node ID 1468c2234478afc40e6b31ebde90693415022708
# Parent  c16e46aa355365619203838074f25724172d97d6
Better documentation of *fcn properties

* genpropdoc.m: new place holder __fcnmsg__ to add a generic message to *fcn
   properties
* plot.txi (Callbacks section): change variable names for clarity. Add a note
   (and a link) onb how a function handles can be provided. Add a caution about
   the "event" argument not being fully/concistently implemented.

diff --git a/doc/interpreter/genpropdoc.m b/doc/interpreter/genpropdoc.m
--- a/doc/interpreter/genpropdoc.m
+++ b/doc/interpreter/genpropdoc.m
@@ -119,36 +119,37 @@ function s = getdoc (objname, field, bas
   ## in the list of each graphics object.  If a given graphics object
   ## interprets the property differently than others, then the doc will have
   ## to be rewritten for this object.
   if (strcmp (objname, "base"))
     switch (field)
       case "beingdeleted"
       case "busyaction"
       case "buttondownfcn"
+        s.doc = "__fcnmsg__";
         s.valid = valid_fcn;
 
       case "children"
         s.doc = "Graphics handles of the __objname__'s children.";
         s.valid = "vector of graphics handles";
 
       case "clipping"
         s.doc = "If __prop__ is @qcode{\"on\"}, the __objname__ is \
 clipped in its parent axes limits.";
 
       case "createfcn"
         s.doc = "Callback function executed immediately after __objname__ \
 has been created.  Function is set by using default property on root object, \
 e.g., @code{set (0, \"default__objname__createfcn\", \
-'disp (\"__objname__ created!\")')}.";
+'disp (\"__objname__ created!\")')}.\n\n__fcnmsg__";
         s.valid = valid_fcn;
 
       case "deletefcn"
         s.doc = "Callback function executed immediately before __objname__ \
-is deleted.";
+is deleted.\n\n__fcnmsg__";
         s.valid = valid_fcn;
 
       case "handlevisibility"
         s.doc = "If __prop__ is @qcode{\"off\"}, the __objname__'s \
 handle is not visible in its parent's \"children\" property.";
 
       case "hittest"
       case "interruptible"
@@ -283,17 +284,17 @@ are visible in their parents' children l
         s.doc = doc_unused;
 
       ## Specific properties
       case "alphamap"
         s.doc = sprintf (doc_notimpl, "Transparency");
 
       case "closerequestfcn"
         s.doc = "Function that is executed when a figure is deleted.  \
-@xref{XREFclosereq, , closereq function}."
+@xref{XREFclosereq, , closereq function}.\n\n__fcnmsg__";
         s.valid = valid_fcn;
 
       case "color"
         s.doc = "Color of the figure background.  \
 @xref{Colors, , colorspec}.";
         s.valid = valid_color;
 
       case "colormap"
@@ -339,33 +340,37 @@ only if the figure's callback @code{wind
 
       case "integerhandle"
         s.doc = "Assign the next lowest unused integer as the Figure number.";
 
       case "inverthardcopy"
         s.doc = "Replace the figure and axes background color with white when printing.";
 
       case "keypressfcn"
+        s.doc = "Callback function executed when a keystroke event \
+happens while the figure has focus. The actual key that was pressed \
+can be retrieved using the second argument 'evt' of the function.  __fcnmsg__";
         s.valid = valid_fcn;
 
       case "keyreleasefcn"
         s.doc = "With @code{keypressfcn}, the keyboard callback functions.  \
 These callback functions are called when a key is pressed/released \
 respectively.  The functions are called with two input arguments.  The first \
 argument holds the handle of the calling figure.  The second argument holds \
 an event structure which has the following members:\n\
 @table @code\n\
 @item Character:\n\
 The ASCII value of the key\n\
 @item Key:\n\
 Lowercase value of the key\n\
 @item Modifier:\n\
 A cell array containing strings representing the modifiers pressed with the \
 key.\n\
-@end table";
+@end table\
+\n\n__fcnmsg__";
         s.valid = valid_fcn;
 
       case "menubar"
         s.doc = "Control the display of the figure menu bar at the top \
 of the figure.";
 
       case "name"
         s.doc = "Name to be displayed in the figure title bar.  The name is \
@@ -466,17 +471,18 @@ and width and height of the figure.  \
       case "resizefcn"
         s.doc = "__prop__ is deprecated.  Use @code{sizechangedfcn} instead.";
         s.valid = valid_fcn;
 
       case "selectiontype"
         ## FIXME: docstring explaining what "{normal}|open|alt|extend" mean.
 
       case "sizechangedfcn"
-        s.doc = "Callback triggered when the figure window size is changed.";
+        s.doc = "Callback triggered when the figure window size is changed.\
+\n\n__fcnmsg__";
         s.valid = valid_fcn;
 
       case "toolbar"
         s.doc = "Control the display of the toolbar (along the bottom of the \
 menubar) and the status bar.  When set to @qcode{\"auto\"}, the display is based on the value of the @code{menubar} property.";
 
       case "units"
         s.doc = "The unit used to compute the @code{position} and \
@@ -492,30 +498,32 @@ menubar) and the status bar.  When set t
 @w{windowbuttonupfcn property}}.";
         s.valid = valid_fcn;
 
       case "windowbuttonupfcn"
         s.doc = "With @code{windowbuttondownfcn} and \
 @code{windowbuttonmotionfcn}, the mouse callback functions.  These \
 callback functions are called when a mouse button is pressed, dragged, or \
 released respectively.  When these callback functions are executed, the \
-@code{currentpoint} property holds the current coordinates of the cursor.";
+@code{currentpoint} property holds the current coordinates of the cursor.\
+\n\n__fcnmsg__";
         s.valid = valid_fcn;
 
       case "windowkeypressfcn"
         s.doc = "Function that is executed when a key is pressed and \
-the figure has focus.";
+the figure has focus.\n\n__fcnmsg__";
         s.valid = valid_fcn;
 
       case "windowkeyreleasefcn"
         s.doc = "Function that is executed when a key is released and \
-the figure has focus.";
+the figure has focus.\n\n__fcnmsg__";
         s.valid = valid_fcn;
 
       case "windowscrollwheelfcn"
+        s.doc = doc_unused;
         s.valid = valid_fcn;
 
       case "windowstyle"
         s.doc = "The window style of a figure.  One of the following values:\n\
 @table @code\n\
 @item normal\n\
 Set the window style as non modal.\n\
 @item modal\n\
@@ -1541,16 +1549,19 @@ endfunction
 function strout = expand_doc (strin, field, objname)
   strout = strrep (strin, "__objname__", objname);
   strout = strrep (strout, "__prop__", ["@code{" field "}"]);
 
   modemsg = "Setting @code{%s} also forces the @code{%smode} \
 property to be set to @qcode{\"manual\"}";
   modemsg = sprintf (modemsg, field, field);
   strout = strrep (strout, "__modemsg__", modemsg);
+  fcnmsg = "For information on how to write graphics listener \
+functions see @ref{Callbacks, , @w{Callbacks section}}.";
+  strout = strrep (strout, "__fcnmsg__", fcnmsg);
 endfunction
 
 function s = getstructure (objname, base = [])
   hf = [];
   if (! strcmp (objname, "root"))
     ## Use an improbable number to avoid ishandle to return true for 1
     hf = figure (2265465, "visible", "off");
   endif
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -1768,69 +1768,88 @@ and will return the color, line, and mar
 @cindex callbacks
 
 Callback functions can be associated with graphics objects and triggered
 after certain events occur.  The basic structure of all callback function
 is
 
 @example
 @group
-function mycallback (src, data)
+function mycallback (hsrc, evt)
 @dots{}
 endfunction
 @end group
 @end example
 
 @noindent
-where @code{src} gives a handle to the source of the callback, and
-@code{code} gives some event specific data.  This can then be associated
+where @code{hsrc} is a handle to the source of the callback, and @code{evt} 
+gives some event specific data.  
+
+The function can be provided as a function handle to a plain Octave function, 
+as an anonymous function or as a string representing an Octvae command. The 
+latter syntax is not recommended since syntax errors will only occur when the 
+string is evaluated.  
+@xref{Function Handles Anonymous Functions Inline Functions, , Function Handles section}.
+
+This can then be associated
 with an object either at the objects creation or later with the
 @code{set} function.  For example,
 
 @example
-plot (x, "DeleteFcn", @@(s, e) disp ("Window Deleted"))
+plot (x, "DeleteFcn", @@(h, e) disp ("Window Deleted"))
 @end example
 
 @noindent
 where at the moment that the plot is deleted, the message "Window
 Deleted" will be displayed.
 
 Additional user arguments can be passed to callback functions, and will
 be passed after the 2 default arguments.  For example:
 
 @example
 @group
 plot (x, "DeleteFcn", @{@@mycallback, "1"@})
 @dots{}
-function mycallback (src, data, a1)
+function mycallback (h, e, a1)
   fprintf ("Closing plot %d\n", a1);
 endfunction
 @end group
 @end example
 
 The basic callback functions that are available for all graphics objects
 are
 
 @itemize @bullet
-@item CreateFcn
-This is the callback that is called at the moment of the objects
-creation.  It is not called if the object is altered in any way, and so
-it only makes sense to define this callback in the function call that
-defines the object.  Callbacks that are added to @code{CreateFcn} later with
-the @code{set} function will never be executed.
-
-@item DeleteFcn
-This is the callback that is called at the moment an object is deleted.
-
-@item ButtonDownFcn
-This is the callback that is called if a mouse button is pressed while
-the pointer is over this object.  Note, that the gnuplot interface does
-not respect this callback.
+@item CreateFcn: 
+called at the moment of the objects creation.  It is not called if the object is altered in any way, and so it only makes sense to define this callback in the function call that defines the object.  Callbacks that are added to @code{CreateFcn} later with the @code{set} function will never be executed.
+
+@item DeleteFcn: 
+called at the moment an object is deleted.
+
+@item ButtonDownFcn: 
+called if a mouse button is pressed while the pointer is over this object.  Note, that the gnuplot interface does not respect this callback.
 @end itemize
 
+@strong{Caution:} the second @code{evt} argument in callback functions is only 
+loosely implemented in the Qt graphics toolkit:
+
+@itemize @bullet
+@item Mouse click events:
+@code{evt} is a class @code{double} value, 1 for left, 2 for middle and 3 
+for right click.
+
+@item Key press events:
+@code{evt} is a structure with fields @code{Key} (string), @code{Character} 
+(string) and @code{Modifier} (cell array of strings).
+
+@item Other events:
+@code{evt} is a class @code{double} empty matrix.
+@end itemize
+
+
 The object and figure that the event occurred in that resulted in the
 callback being called can be found with the @code{gcbo} and @code{gcbf}
 functions.
 
 @DOCSTRING(gcbo)
 
 @DOCSTRING(gcbf)
 
