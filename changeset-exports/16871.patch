# HG changeset patch
# User Rik <rik@octave.org>
# Date 1372608589 25200
#      Sun Jun 30 09:09:49 2013 -0700
# Node ID 5e30b1c950b8d0b7cf9710b42f24996cc3f9c7fc
# Parent  fc3845c6345872ab0310eb45e6feede7f8321cef
Replace uses of Octave_map with octave_map or octave_scalar_map.

* libinterp/dldfcn/__init_fltk__.cc(handle): Replace Octave_map
with octave_scalar_map.

* libinterp/dldfcn/__magick_read__.cc(jpg_settings, write_image,
F__magick_finfo__): Replace Octave_map with octave_map.

* libinterp/interp-core/ls-mat5.cc(read_mat5_binary_element): Replace
occurrences of Octave_map with octave_map or octave_scalar_map.

diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -1214,17 +1214,17 @@ private:
           case FL_KEYDOWN:
             {
               int key = Fl::event_key ();
 
               shift |= key2shift (key);
               int key_a = key2ascii (key);
               if (key_a && fp.get_keypressfcn ().is_defined ())
                 {
-                  Octave_map evt;
+                  octave_scalar_map evt;
                   evt.assign ("Character", octave_value (key_a));
                   evt.assign ("Key", octave_value (std::tolower (key_a)));
                   evt.assign ("Modifier", octave_value (modifier2cell ()));
                   fp.execute_keypressfcn (evt);
                 }
               switch (key)
                 {
                 case 'a':
@@ -1253,17 +1253,17 @@ private:
           case FL_KEYUP:
             {
               int key = Fl::event_key ();
 
               shift &= (~key2shift (key));
               int key_a = key2ascii (key);
               if (key_a && fp.get_keyreleasefcn ().is_defined ())
                 {
-                  Octave_map evt;
+                  octave_scalar_map evt;
                   evt.assign ("Character", octave_value (key_a));
                   evt.assign ("Key", octave_value (std::tolower (key_a)));
                   evt.assign ("Modifier", octave_value (modifier2cell ()));
                   fp.execute_keyreleasefcn (evt);
                 }
             }
             break;
 
diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -536,24 +536,24 @@ function.  Instead use @code{imread}.\n\
 ## No test needed for internal helper function.
 %!assert (1)
 */
 
 #ifdef HAVE_MAGICK
 
 static void
 jpg_settings (std::vector<Magick::Image>& imvec,
-              const Octave_map& options,
+              const octave_map& options,
               bool)
 {
   bool something_set = false;
 
   // Quality setting
   octave_value result;
-  Octave_map::const_iterator p;
+  octave_map::const_iterator p;
   bool found_it = false;
 
   for (p = options.begin (); p != options.end (); p++)
     {
       if (options.key (p) == "Quality")
         {
           found_it = true;
           result = options.contents (p).elem (0);
@@ -835,17 +835,17 @@ write_image (const std::string& filename
       NDArray cmap = map.array_value ();
 
       if (! error_state)
         encode_map (imvec, cmap);
     }
 
   if (! error_state && params.is_defined ())
     {
-      Octave_map options = params.map_value ();
+      octave_map options = params.map_value ();
 
       // Insert calls here to handle parameters for various image formats
       if (fmt == "jpg" || fmt == "jpeg")
         jpg_settings (imvec, options, has_map);
       else
         warning ("warning: your parameter(s) currently not supported");
     }
 
@@ -1059,17 +1059,17 @@ not be using this function.  Instead use
           "Quality",
           "QuantizeColors",
           "ResolutionUnits",
           "ColorType",
           "View",
           0
         };
 
-      Octave_map info (string_vector (fields), dim_vector (nframes, 1));
+      octave_map info (dim_vector (nframes, 1), string_vector (fields));
 
       file_stat fs (filename);
 
       std::string filetime;
 
       if (fs)
         {
           octave_localtime mtime = fs.mtime ();
diff --git a/libinterp/interp-core/ls-mat5.cc b/libinterp/interp-core/ls-mat5.cc
--- a/libinterp/interp-core/ls-mat5.cc
+++ b/libinterp/interp-core/ls-mat5.cc
@@ -872,34 +872,34 @@ read_mat5_binary_element (std::istream& 
       {
         octave_value tc2;
         std::string nm
           = read_mat5_binary_element (is, filename, swap, global, tc2);
 
         if (! is || error_state)
           goto data_read_error;
 
-        // Octave can handle both "/" and "\" as a directry seperator
-        // and so can ignore the seperator field of m0. I think the
+        // Octave can handle both "/" and "\" as a directory seperator
+        // and so can ignore the separator field of m0. I think the
         // sentinel field is also save to ignore.
-        Octave_map m0 = tc2.map_value ();
-        Octave_map m1 = m0.contents ("function_handle")(0).map_value ();
-        std::string ftype = m1.contents ("type")(0).string_value ();
-        std::string fname = m1.contents ("function")(0).string_value ();
-        std::string fpath = m1.contents ("file")(0).string_value ();
+        octave_scalar_map m0 = tc2.scalar_map_value ();
+        octave_scalar_map m1 = m0.contents ("function_handle").scalar_map_value ();
+        std::string ftype = m1.contents ("type").string_value ();
+        std::string fname = m1.contents ("function").string_value ();
+        std::string fpath = m1.contents ("file").string_value ();
 
         if (ftype == "simple" || ftype == "scopedfunction")
           {
             if (fpath.length () == 0)
               // We have a builtin function
               tc = make_fcn_handle (fname);
             else
               {
                 std::string mroot =
-                  m0.contents ("matlabroot")(0).string_value ();
+                  m0.contents ("matlabroot").string_value ();
 
                 if ((fpath.length () >= mroot.length ()) &&
                     fpath.substr (0, mroot.length ()) == mroot &&
                     OCTAVE_EXEC_PREFIX != mroot)
                   {
                     // If fpath starts with matlabroot, and matlabroot
                     // doesn't equal octave_config_info ("exec_prefix")
                     // then the function points to a version of Octave
@@ -926,18 +926,17 @@ read_mat5_binary_element (std::istream& 
                           {
                             octave_value tmp (fcn);
 
                             tc = octave_value (new octave_fcn_handle (tmp, fname));
                           }
                       }
                     else
                       {
-                        // Next just search for it anywhere in the
-                        // system path
+                        // Next just search for it anywhere in the system path
                         string_vector names(3);
                         names(0) = fname + ".oct";
                         names(1) = fname + ".mex";
                         names(2) = fname + ".m";
 
                         dir_path p (load_path::system_path ());
 
                         str = octave_env::make_absolute (p.find_first_of (names));
@@ -991,23 +990,23 @@ read_mat5_binary_element (std::istream& 
           }
         else if (ftype == "nested")
           {
             warning ("load: can't load nested function");
             goto skip_ahead;
           }
         else if (ftype == "anonymous")
           {
-            Octave_map m2 = m1.contents ("workspace")(0).map_value ();
-            uint32NDArray MCOS = m2.contents ("MCOS")(0).uint32_array_value ();
+            octave_scalar_map m2 = m1.contents ("workspace").scalar_map_value ();
+            uint32NDArray MCOS = m2.contents ("MCOS").uint32_array_value ();
             octave_idx_type off = static_cast<octave_idx_type>(MCOS(4).double_value ());
-            m2 = subsys_ov.map_value ();
-            m2 = m2.contents ("MCOS")(0).map_value ();
-            tc2 = m2.contents ("MCOS")(0).cell_value ()(1 + off).cell_value ()(1);
-            m2 = tc2.map_value ();
+            m2 = subsys_ov.scalar_map_value ();
+            m2 = m2.contents ("MCOS").scalar_map_value ();
+            tc2 = m2.contents ("MCOS").cell_value ()(1 + off).cell_value ()(1);
+            m2 = tc2.scalar_map_value ();
 
             unwind_protect_safe frame;
 
             // Set up temporary scope to use for evaluating the text
             // that defines the anonymous function.
 
             symbol_table::scope_id local_scope = symbol_table::alloc_scope ();
             frame.add_fcn (symbol_table::erase_scope, local_scope);
@@ -1016,21 +1015,21 @@ read_mat5_binary_element (std::istream& 
 
             octave_call_stack::push (local_scope, 0);
             frame.add_fcn (octave_call_stack::pop);
 
             if (m2.nfields () > 0)
               {
                 octave_value tmp;
 
-                for (Octave_map::iterator p0 = m2.begin () ;
+                for (octave_map::iterator p0 = m2.begin () ;
                      p0 != m2.end (); p0++)
                   {
                     std::string key = m2.key (p0);
-                    octave_value val = m2.contents (p0)(0);
+                    octave_value val = m2.contents (p0);
 
                     symbol_table::assign (key, val, local_scope, 0);
                   }
               }
 
             int parse_status;
             octave_value anon_fcn_handle =
               eval_string (fname.substr (4), true, parse_status);
@@ -1061,26 +1060,26 @@ read_mat5_binary_element (std::istream& 
             error ("load: invalid function handle type");
             goto skip_ahead;
           }
       }
       break;
 
     case MAT_FILE_WORKSPACE_CLASS:
       {
-        Octave_map m (dim_vector (1, 1));
+        octave_map m (dim_vector (1, 1));
         int n_fields = 2;
         string_vector field (n_fields);
 
         for (int i = 0; i < n_fields; i++)
           {
             int32_t fn_type;
             int32_t fn_len;
-            if (read_mat5_tag (is, swap, fn_type, fn_len, is_small_data_element) ||
-                !INT8(fn_type))
+            if (read_mat5_tag (is, swap, fn_type, fn_len, is_small_data_element)
+                || !INT8(fn_type))
               {
                 error ("load: invalid field name subelement");
                 goto data_read_error;
               }
 
             OCTAVE_LOCAL_BUFFER (char, elname, fn_len + 1);
 
             std::streampos tmp_pos = is.tellg ();
@@ -1159,43 +1158,42 @@ read_mat5_binary_element (std::istream& 
 
           name[len] = '\0';
           classname = name;
         }
       }
       // Fall-through
     case MAT_FILE_STRUCT_CLASS:
       {
-        Octave_map m (dims);
+        octave_map m (dims);
         int32_t fn_type;
         int32_t fn_len;
         int32_t field_name_length;
 
         // field name length subelement -- actually the maximum length
         // of a field name.  The Matlab docs promise this will always
         // be 32.  We read and use the actual value, on the theory
-        // that eventually someone will recognize that's a waste of
-        // space.
-        if (read_mat5_tag (is, swap, fn_type, fn_len, is_small_data_element) ||
-            fn_type != miINT32)
+        // that eventually someone will recognize that's a waste of space.
+        if (read_mat5_tag (is, swap, fn_type, fn_len, is_small_data_element)
+            || fn_type != miINT32)
           {
             error ("load: invalid field name length subelement");
             goto data_read_error;
           }
 
         if (! is.read (reinterpret_cast<char *> (&field_name_length), fn_len ))
           goto data_read_error;
 
         if (swap)
           swap_bytes<4> (&field_name_length);
 
         // field name subelement.  The length of this subelement tells
         // us how many fields there are.
-        if (read_mat5_tag (is, swap, fn_type, fn_len, is_small_data_element) ||
-            !INT8(fn_type))
+        if (read_mat5_tag (is, swap, fn_type, fn_len, is_small_data_element)
+            || !INT8(fn_type))
           {
             error ("load: invalid field name subelement");
             goto data_read_error;
           }
 
         octave_idx_type n_fields = fn_len/field_name_length;
 
         if (n_fields > 0)
@@ -2232,39 +2230,39 @@ save_mat5_element_length (const octave_v
           const ComplexNDArray m = tc.complex_array_value ();
           ret += save_mat5_array_length (m.fortran_vec (), m.numel (),
                                          save_as_floats);
         }
     }
   else if (tc.is_map () || tc.is_inline_function () || tc.is_object ())
     {
       int fieldcnt = 0;
-      const Octave_map m = tc.map_value ();
+      const octave_map m = tc.map_value ();
       octave_idx_type nel = m.numel ();
 
       if (tc.is_inline_function ())
         // length of "inline" is 6
         ret += 8 + PAD (6 > max_namelen ? max_namelen : 6);
       else if (tc.is_object ())
         {
           size_t classlen = tc.class_name (). length ();
 
           ret += 8 + PAD (classlen > max_namelen ? max_namelen : classlen);
         }
 
-      for (Octave_map::const_iterator i = m.begin (); i != m.end (); i++)
+      for (octave_map::const_iterator i = m.begin (); i != m.end (); i++)
         fieldcnt++;
 
       ret += 16 + fieldcnt * (max_namelen + 1);
 
 
       for (octave_idx_type j = 0; j < nel; j++)
         {
 
-          for (Octave_map::const_iterator i = m.begin (); i != m.end (); i++)
+          for (octave_map::const_iterator i = m.begin (); i != m.end (); i++)
             {
               const Cell elts = m.contents (i);
 
               ret += 8 + save_mat5_element_length (elts(j), "",
                                                save_as_floats, mat7_format);
             }
         }
     }
@@ -2662,17 +2660,17 @@ save_mat5_binary_element (std::ostream& 
 
           write_mat5_tag (os, miINT8, namelen);
           OCTAVE_LOCAL_BUFFER (char, paddedname, paddedlength);
           memset (paddedname, 0, paddedlength);
           strncpy (paddedname, classname.c_str (), namelen);
           os.write (paddedname, paddedlength);
         }
 
-      Octave_map m;
+      octave_map m;
 
       if (tc.is_object () &&
           load_path::find_method (tc.class_name (), "saveobj") != std::string ())
         {
           octave_value_list tmp = feval ("saveobj", tc, 1);
           if (! error_state)
             m = tmp(0).map_value ();
           else
