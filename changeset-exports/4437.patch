# HG changeset patch
# User jwe
# Date 1056482928 0
#      Tue Jun 24 19:28:48 2003 +0000
# Node ID 0a59e4de215e340b20bc3070465f2a01db521e69
# Parent  689f730954b3f4a0013a205da94bb0732e44542e
[project @ 2003-06-24 19:28:48 by jwe]

diff --git a/liboctave/Array2-idx.h b/liboctave/Array2-idx.h
--- a/liboctave/Array2-idx.h
+++ b/liboctave/Array2-idx.h
@@ -69,17 +69,17 @@ Array2<T>::index (idx_vector& idx_arg, i
   int idx_orig_rows = idx_arg.orig_rows ();
   int idx_orig_columns = idx_arg.orig_columns ();
 
   if (idx_arg.is_colon ())
     {
       // Fast magic colon processing.
 
       int result_nr = nr * nc;
-      int result_nc = result_nr ? 1 : 0;
+      int result_nc = 1;
 
       retval = Array2<T> (*this, result_nr, result_nc);
     }
   else if (nr == 1 && nc == 1)
     {
       Array<T> tmp = Array<T>::index (idx_arg, resize_ok);
 
       if (tmp.length () != 0)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2003-06-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array2-idx.h (Array2<T>::index (idx_vector&, int, const T&)):
+	Magic colon indexing always produces an object with one column.
+
 2003-06-21  Paul Kienzle <pkienzle@users.sf.net>
 
 	* kpse-xfns.h (NAME_BEGINS_WITH_DEVICE): Arg is std::string, not char*.
 
 	* lo-ieee.h (signbit): Eliminate redundant extern "C" decl.
 
 2003-06-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,16 @@
 2003-06-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* pt-mat.cc (tm_row_const::init, tm_const::init): Don't ignore
+	empty matrices that have one non-zero dimension.
+
+	* variables.cc (symbol_exist): Use dir_path::find_first_of to
+	search for .oct and .m files.
+
 	* ov-base.cc (octave_base_value::subsasgn): Also allow type
 	conversion for empty numeric objects with more than one index.
 	* ov-base-mat.cc (octave_base_matrix<T>::subsasgn): Likewise.
 
 2003-06-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* variables.cc (do_who): New arg, return_list.  If return_list is
 	true, return values in cell or struct arrays instead of printing.
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -184,17 +184,17 @@ tm_row_const::tm_row_const_rep::init (co
 
       if (error_state || tmp.is_undefined ())
 	break;
       else
 	{
 	  int this_elt_nr = tmp.rows ();
 	  int this_elt_nc = tmp.columns ();
 
-	  if (this_elt_nr == 0 || this_elt_nc == 0)
+	  if (this_elt_nr == 0 && this_elt_nc == 0)
 	    {
 	      if (Vempty_list_elements_ok < 0)
 		eval_warning ("empty matrix found in matrix list",
 			      elt->line (), elt->column ());
 	      else if (Vempty_list_elements_ok == 0)
 		{
 		  eval_error ("empty matrix found in matrix list",
 			      elt->line (), elt->column ());
@@ -353,17 +353,17 @@ tm_const::init (const tree_matrix& tm)
     {
       for (iterator p = begin (); p != end (); p++)
 	{
 	  tm_row_const elt = *p;
 
 	  int this_elt_nr = elt.rows ();
 	  int this_elt_nc = elt.cols ();
 
-	  if (this_elt_nr == 0 || this_elt_nc == 0)
+	  if (this_elt_nr == 0 && this_elt_nc == 0)
 	    {
 	      if (Vempty_list_elements_ok < 0)
 		warning ("empty matrix found in matrix list");
 	      else if (Vempty_list_elements_ok == 0)
 		{
 		  ::error ("empty matrix found in matrix list");
 		  break;
 		}
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -598,31 +598,34 @@ symbol_exist (const std::string& name, c
 	  std::string s = f ? f->fcn_file_name () : std::string ();
 
 	  retval = s.empty () ? 103 : 2;
 	}
     }
 
   if (! retval)
     {
-      std::string file_name = fcn_file_in_path (name);
+      string_vector names (2);
 
-      if ((type == "any" || type == "file") && ! file_name.empty ())
-	{
-	  retval = 2;
-	}
-    }
+      names(0) = name + ".oct";
+      names(1) = name + ".m";
+
+      std::string file_name = Vload_path_dir_path.find_first_of (names);
+
+      size_t len = file_name.length ();
 
-  if (! retval)
-    {
-      std::string file_name = oct_file_in_path (name);
-
-      if ((type == "any" || type == "file") && ! file_name.empty ())
+      if (! file_name.empty ())
 	{
-	  retval = 3;
+	  if (type == "any" || type == "file")
+	    {
+	      if (file_name.substr (len-4) == ".oct")
+		retval = 3;
+	      else
+		retval = 2;
+	    }
 	}
     }
 
   if (! retval)
     {
       std::string file_name = file_in_path (name, "");
 
       if (file_name.empty ())
