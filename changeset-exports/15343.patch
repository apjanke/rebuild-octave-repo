# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1347306977 14400
#      Mon Sep 10 15:56:17 2012 -0400
# Node ID b565850bdce7ac179fbf7f2bc2ae32647e6cd662
# Parent  67fabb3d81f4a7471f5da38df9d0f1da820a0a03
don't display hidden variables in workspace view

* symbol-information.h (symbol_information::Scope): Delete hidden.
New field, unknown.  Change all uses.
* workspace-model.cc (workspace_model::workspace_model): Don't add
"Hidden" tree_item to the top-level item list.
(workspace_model::event_accepted): Don't delete 3rd item from
top_level_item list.  Don't add hidden items to the list.
* workspace-view.h, workspace-view.cc
(workspace_view::_explicit_collapse): Delete hidden.
Change all uses.

diff --git a/libgui/src/symbol-information.cc b/libgui/src/symbol-information.cc
--- a/libgui/src/symbol-information.cc
+++ b/libgui/src/symbol-information.cc
@@ -36,18 +36,18 @@ symbol_information::from_symbol_record
   (const symbol_table::symbol_record& symbol_record)
 {
   if (symbol_record.is_local () && !symbol_record.is_global () && !symbol_record.is_hidden ())
     _scope = local;
   else if (symbol_record.is_global ())
     _scope = global;
   else if (symbol_record.is_persistent ())
     _scope = persistent;
-  else if (symbol_record.is_hidden ())
-    _scope = hidden;
+  else
+    _scope = unknown;
 
   _symbol = QString (symbol_record.name ().c_str ());
   _class  = QString (symbol_record.varval ().class_name ().c_str ());
   octave_value ov = symbol_record.varval ();
 
   // In case we have really large matrices or strings, cut them down
   // for performance reasons.
   QString short_value_string;
diff --git a/libgui/src/symbol-information.h b/libgui/src/symbol-information.h
--- a/libgui/src/symbol-information.h
+++ b/libgui/src/symbol-information.h
@@ -44,20 +44,20 @@ along with Octave; see the file COPYING.
   * It reduces memory consumption, since it only stores relevant data
   * about a symbol-table entry that will be used in the model for the
   * graphical user interface.
   */
 struct symbol_information
 {
   enum Scope
   {
-    local       = 0,
-    global      = 1,
-    persistent  = 2,
-    hidden      = 3
+    unknown     = 0,
+    local       = 1,
+    global      = 2,
+    persistent  = 3
   };
 
   QString _symbol;
   QString _class;
   QString _value;
   QString _dimension;
   Scope   _scope;
 
diff --git a/libgui/src/workspace-model.cc b/libgui/src/workspace-model.cc
--- a/libgui/src/workspace-model.cc
+++ b/libgui/src/workspace-model.cc
@@ -39,17 +39,16 @@ workspace_model::workspace_model(QObject
 {
   QList<QVariant> rootData;
   rootData << tr ("Name") << tr ("Class") << tr("Dimension") << tr ("Value");
   _rootItem = new tree_item(rootData);
 
   insert_top_level_item(0, new tree_item ("Local"));
   insert_top_level_item(1, new tree_item ("Global"));
   insert_top_level_item(2, new tree_item ("Persistent"));
-  insert_top_level_item(3, new tree_item ("Hidden"));
 
   connect(&_update_workspace_model_timer,
           SIGNAL (timeout ()),
           this,
           SLOT (request_update_workspace()));
 
   _update_workspace_model_timer.setInterval (500);
   _update_workspace_model_timer.setSingleShot (true);
@@ -83,33 +82,31 @@ workspace_model::event_accepted (octave_
         symbolInformation.from_symbol_record (*iterator);
         _symbol_information.push_back (symbolInformation);
       }
 
       beginResetModel();
       top_level_item (0)->delete_child_items ();
       top_level_item (1)->delete_child_items ();
       top_level_item (2)->delete_child_items ();
-      top_level_item (3)->delete_child_items ();
 
       foreach (const symbol_information& s, _symbol_information)
         {
           tree_item *child = new tree_item ();
 
           child->set_data (0, s._symbol);
           child->set_data (1, s._class);
           child->set_data (2, s._dimension);
           child->set_data (3, s._value);
 
           switch (s._scope)
             {
               case symbol_information::local:       top_level_item (0)->add_child (child); break;
               case symbol_information::global:      top_level_item (1)->add_child (child); break;
               case symbol_information::persistent:  top_level_item (2)->add_child (child); break;
-              case symbol_information::hidden:      top_level_item (3)->add_child (child); break;
             }
         }
 
       endResetModel();
       emit model_changed();
     }
 
   // Post a new event in a given time.
diff --git a/libgui/src/workspace-view.cc b/libgui/src/workspace-view.cc
--- a/libgui/src/workspace-view.cc
+++ b/libgui/src/workspace-view.cc
@@ -62,17 +62,16 @@ workspace_view::workspace_view (QWidget 
 
   QSettings *settings = resource_manager::get_settings ();
 
   // FIXME -- what should happen if settings is 0?
 
   _explicit_collapse.local      = settings->value ("workspaceview/local_collapsed", false).toBool ();
   _explicit_collapse.global     = settings->value ("workspaceview/global_collapsed", false).toBool ();;
   _explicit_collapse.persistent = settings->value ("workspaceview/persistent_collapsed", false).toBool ();;
-  _explicit_collapse.hidden     = settings->value ("workspaceview/hidden_collapsed", false).toBool ();;
 
   // Connect signals and slots.
   connect (this, SIGNAL (visibilityChanged (bool)),
            this, SLOT(handle_visibility_changed (bool)));
 
   connect (_workspace_model, SIGNAL (model_changed ()),
            this, SLOT (model_changed ()));
 
@@ -90,17 +89,16 @@ workspace_view::~workspace_view ()
 {
   QSettings *settings = resource_manager::get_settings ();
 
   // FIXME -- what should happen if settings is 0?
 
   settings->setValue("workspaceview/local_collapsed", _explicit_collapse.local);
   settings->setValue("workspaceview/global_collapsed", _explicit_collapse.global);
   settings->setValue("workspaceview/persistent_collapsed", _explicit_collapse.persistent);
-  settings->setValue("workspaceview/hidden_collapsed", _explicit_collapse.hidden);
 }
 
 void
 workspace_view::handle_visibility_changed (bool visible)
 {
   if (visible)
     emit active_changed (true);
 }
@@ -120,17 +118,16 @@ workspace_view::model_changed ()
   // displayed data as invalid.
   //
   // In order to make collapsing/expanding work again, we need to set
   // flags ourselves here.
 
   QModelIndex local_model_index = _workspace_model->index (0, 0);
   QModelIndex global_model_index = _workspace_model->index (1, 0);
   QModelIndex persistent_model_index = _workspace_model->index (2, 0);
-  QModelIndex hidden_model_index = _workspace_model->index (3, 0);
 
   if (_explicit_collapse.local) {
     _workspace_tree_view->collapse (local_model_index);
   } else {
     _workspace_tree_view->expand (local_model_index);
   }
 
   if (_explicit_collapse.global) {
@@ -139,22 +136,16 @@ workspace_view::model_changed ()
     _workspace_tree_view->expand (global_model_index);
   }
 
   if (_explicit_collapse.persistent) {
     _workspace_tree_view->collapse (persistent_model_index);
   } else {
     _workspace_tree_view->expand (persistent_model_index);
   }
-
-  if (_explicit_collapse.hidden) {
-    _workspace_tree_view->collapse (hidden_model_index);
-  } else {
-    _workspace_tree_view->expand (hidden_model_index);
-  }
 }
 
 void
 workspace_view::collapse_requested (QModelIndex index)
 {
   // This code is very quirky and requires some explanation.
   // Usually, we should not deal with collapsing or expanding ourselves,
   // because the view itself determines (based on the model) whether it
@@ -172,18 +163,16 @@ workspace_view::collapse_requested (QMod
       = _workspace_model->itemData (index);
 
   if (item_data[0] == "Local")
     _explicit_collapse.local = true;
   if (item_data[0] == "Global")
     _explicit_collapse.global = true;
   if (item_data[0] == "Persistent")
     _explicit_collapse.persistent = true;
-  if (item_data[0] == "Hidden")
-    _explicit_collapse.hidden = true;
 }
 
 void
 workspace_view::expand_requested (QModelIndex index)
 {
   // This code is very quirky and requires some explanation.
   // Usually, we should not deal with collapsing or expanding ourselves,
   // because the view itself determines (based on the model) whether it
@@ -201,18 +190,16 @@ workspace_view::expand_requested (QModel
       = _workspace_model->itemData (index);
 
   if (item_data[0] == "Local")
     _explicit_collapse.local = false;
   if (item_data[0] == "Global")
     _explicit_collapse.global = false;
   if (item_data[0] == "Persistent")
     _explicit_collapse.persistent = false;
-  if (item_data[0] == "Hidden")
-    _explicit_collapse.hidden = false;
 }
 
 void
 workspace_view::item_double_clicked (QModelIndex index)
 {
   Q_UNUSED (index);
   // TODO: Implement opening a dialog that allows the user to change a variable in the workspace.
 }
diff --git a/libgui/src/workspace-view.h b/libgui/src/workspace-view.h
--- a/libgui/src/workspace-view.h
+++ b/libgui/src/workspace-view.h
@@ -58,13 +58,12 @@ private:
   /** Stores the current workspace model. */
   workspace_model *_workspace_model;
 
   struct
   {
     bool local;
     bool global;
     bool persistent;
-    bool hidden;
   } _explicit_collapse;
 };
 
 #endif // WORKSPACEVIEW_H
