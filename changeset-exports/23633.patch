# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1497677400 25200
#      Fri Jun 16 22:30:00 2017 -0700
# Node ID 271d34c20678fa13052f4af7669a9ac12c84d0e7
# Parent  3426a596eabd2d92f9b892eacdfddeb75354e66e
splineimages.m: generate the same plots for documentation each time (bug #51254)

* splineimages.m: Initialize rand and randn generators to known states before
generating random data for all plots.

diff --git a/doc/interpreter/splineimages.m b/doc/interpreter/splineimages.m
--- a/doc/interpreter/splineimages.m
+++ b/doc/interpreter/splineimages.m
@@ -28,16 +28,18 @@ function splineimages (d, nm, typ)
     d_typ = "-depsc2";
   else
     d_typ = ["-d" typ];
   endif
 
   if (strcmp (typ, "txt"))
     image_as_txt (d, nm);
   elseif (strcmp (nm, "splinefit1")) ## Breaks and Pieces
+    rand ("state", 1);
+    randn ("state", 1);
     x = 2 * pi * rand (1, 200);
     y = sin (x) + sin (2 * x) + 0.2 * randn (size (x));
     ## Uniform breaks
     breaks = linspace (0, 2 * pi, 41); ## 41 breaks, 40 pieces
     pp1 = splinefit (x, y, breaks);
     ## Breaks interpolated from data
     pp2 = splinefit (x, y, 10);  ## 11 breaks, 10 pieces
     ## Plot
@@ -46,16 +48,18 @@ function splineimages (d, nm, typ)
     y2 = ppval (pp2, xx);
     plot (x, y, ".", xx, [y1; y2]);
     axis tight;
     ylim ([-2.5 2.5]);
     legend ("data", "41 breaks, 40 pieces", "11 breaks, 10 pieces");
     print (outfile, d_typ);
   elseif (strcmp (nm, "splinefit2")) ## Spline orders
     ## Data (200 points)
+    rand ("state", 1);
+    randn ("state", 1);
     x = 2 * pi * rand (1, 200);
     y = sin (x) + sin (2 * x) + 0.1 * randn (size (x));
     ## Splines
     pp1 = splinefit (x, y, 8, "order", 0);  ## Piecewise constant
     pp2 = splinefit (x, y, 8, "order", 1);  ## Piecewise linear
     pp3 = splinefit (x, y, 8, "order", 2);  ## Piecewise quadratic
     pp4 = splinefit (x, y, 8, "order", 3);  ## Piecewise cubic
     pp5 = splinefit (x, y, 8, "order", 4);  ## Etc.
@@ -68,16 +72,18 @@ function splineimages (d, nm, typ)
     y5 = ppval (pp5, xx);
     plot (x, y, ".", xx, [y1; y2; y3; y4; y5]);
     axis tight;
     ylim ([-2.5 2.5]);
     legend ({"data", "order 0", "order 1", "order 2", "order 3", "order 4"});
     print (outfile, d_typ);
   elseif (strcmp (nm, "splinefit3"))
     ## Data (100 points)
+    rand ("state", 1);
+    randn ("state", 1);
     x = 2 * pi * [0, (rand (1, 98)), 1];
     y = sin (x) - cos (2 * x) + 0.2 * randn (size (x));
     ## No constraints
     pp1 = splinefit (x, y, 10, "order", 5);
     ## Periodic boundaries
     pp2 = splinefit (x, y, 10, "order", 5, "periodic", true);
     ## Plot
     xx = linspace (0, 2 * pi, 400);
@@ -85,16 +91,18 @@ function splineimages (d, nm, typ)
     y2 = ppval (pp2, xx);
     plot (x, y, ".", xx, [y1; y2]);
     axis tight;
     ylim ([-2 3]);
     legend ({"data", "no constraints", "periodic"});
     print (outfile, d_typ);
   elseif (strcmp (nm, "splinefit4"))
     ## Data (200 points)
+    rand ("state", 1);
+    randn ("state", 1);
     x = 2 * pi * rand (1, 200);
     y = sin (2 * x) + 0.1 * randn (size (x));
     ## Breaks
     breaks = linspace (0, 2 * pi, 10);
     ## Clamped endpoints, y = y" = 0
     xc = [0, 0, 2*pi, 2*pi];
     cc = [(eye (2)), (eye (2))];
     con = struct ("xc", xc, "cc", cc);
@@ -129,16 +137,17 @@ function splineimages (d, nm, typ)
     xyb = ppval (pp, pp.breaks);
     plot (x, y, ".", xyfit(1,:), xyfit(2,:), "r", xyb(1,:), xyb(2,:), "ro");
     legend ({"data", "spline", "breaks"});
     axis tight;
     ylim ([0 0.1]);
     print (outfile, d_typ);
   elseif (strcmp (nm, "splinefit6"))
     ## Data
+    randn ("state", 1);
     x = linspace (0, 2*pi, 200);
     y = sin (x) + sin (2 * x) + 0.05 * randn (size (x));
     ## Add outliers
     x = [x, linspace(0,2*pi,60)];
     y = [y, -ones(1,60)];
     ## Fit splines with hinged conditions
     con = struct ("xc", [0, 2*pi]);
     pp1 = splinefit (x, y, 8, "constraints", con, "beta", 0.25); ## Robust fitting
