# HG changeset patch
# User Rik <rik@octave.org>
# Date 1502208247 25200
#      Tue Aug 08 09:04:07 2017 -0700
# Node ID dca84dfe167fb742616a4d1e48fc6f242db54111
# Parent  724fe19b50dc98181eaed5496c69f6f5a9e4b9fb
Add "import" to list of Octave language keywords (bug #51688).
This is only a start towards truly implementing the import keyword.

* NEWS: Announce new keyword.

* lex.ll (base_lexer::is_keyword_token): Add case statement for import_kw.

* oct-parse.in.yy: Add new tok_val IMPORT

* octave.gperf (enum octave_kw_id): Add import_kw to list.
* octave.gperf (struct octave_kw): Add import, IMPORT, import_kw to struct.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -25,16 +25,21 @@ Summary of important user-visible change
     numeric array of the same size as the input cell array.  Previously,
     hex2num would accept a cell array of strings of arbitrary dimension
     but would always return a column vector.
 
  ** The "names" option used in regular expressions now returns a struct
     array, rather than a struct with a cell array for each field.  This
     change was made for Matlab compatibility.
 
+ ** New keyword "import" added to parser.
+
+    The parser recognizes the reserved keyword "import", but there is no
+    implementation of the functionality.
+
  ** Other new functions added in 4.4:
 
       corrcoef
       gsvd
       hgtransform
       getframe
 
  ** Deprecated functions.
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -2574,16 +2574,20 @@ namespace octave
             looking_at_decl_list = true;
             break;
 
           case case_kw:
           case elseif_kw:
           case until_kw:
             break;
 
+          case import_kw:
+            at_beginning_of_statement = true;
+            break;
+
           case end_kw:
             if (inside_any_object_index ()
                 || (defining_func
                     && ! (looking_at_return_list
                           || parsed_function_name.top ())))
               {
                 at_beginning_of_statement = previous_at_bos;
                 return 0;
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -210,16 +210,17 @@ static void yyerror (octave::base_parser
 %token <tok_val> SWITCH CASE OTHERWISE
 %token <tok_val> BREAK CONTINUE FUNC_RET
 %token <tok_val> UNWIND CLEANUP
 %token <tok_val> TRY CATCH
 %token <tok_val> GLOBAL PERSISTENT
 %token <tok_val> FCN_HANDLE
 %token <tok_val> CLASSDEF
 %token <tok_val> PROPERTIES METHODS EVENTS ENUMERATION
+%token <tok_val> IMPORT
 %token <tok_val> METAQUERY
 %token <tok_val> SUPERCLASSREF
 %token <tok_val> FQ_IDENT
 %token <tok_val> GET SET
 %token <tok_val> FCN
 %token <tok_val> LEXICAL_ERROR
 
 // Other tokens.
diff --git a/libinterp/parse-tree/octave.gperf b/libinterp/parse-tree/octave.gperf
--- a/libinterp/parse-tree/octave.gperf
+++ b/libinterp/parse-tree/octave.gperf
@@ -50,16 +50,17 @@ enum octave_kw_id
   endwhile_kw,
   enumeration_kw,
   events_kw,
   for_kw,
   function_kw,
   get_kw,
   global_kw,
   if_kw,
+  import_kw,
   magic_file_kw,
   magic_line_kw,
   methods_kw,
   otherwise_kw,
   parfor_kw,
   persistent_kw,
   properties_kw,
   return_kw,
@@ -98,16 +99,17 @@ endswitch, END, endswitch_kw
 endwhile, END, endwhile_kw
 enumeration, ENUMERATION, enumeration_kw
 events, EVENTS, events_kw
 for, FOR, for_kw
 function, FCN, function_kw
 get, GET, get_kw
 global, GLOBAL, global_kw
 if, IF, if_kw
+import, IMPORT, import_kw
 methods, METHODS, methods_kw
 otherwise, OTHERWISE, otherwise_kw
 parfor, PARFOR, parfor_kw
 persistent, PERSISTENT, persistent_kw
 properties, PROPERTIES, properties_kw
 return, FUNC_RET, return_kw
 set, SET, set_kw
 switch, SWITCH, switch_kw
