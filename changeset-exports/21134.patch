# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1453482912 18000
#      Fri Jan 22 12:15:12 2016 -0500
# Node ID 2e5c1f766ac95112ee6ea641447e3c3fce6cbcfe
# Parent  31674b9d202b15a06708fe4d4af56e46cf0458c9
provide replacement hints for deprecated C++ functions

* oct-conf-post.in.h (OCTAVE_DEPRECATED): Accept message argument.
* error.h, errwarn.h, gripes.h, symtab.h, variables.h,
* ov-base-sparse.h, ov-base.h, ov.h, Array.h, DiagArray2.h,
* PermMatrix.h, Range.h, Sparse.h, dSparse.h, lo-array-errwarn.h,
* lo-array-gripes.h, unwind-prot.h: Change all uses of
OCTAVE_DEPRECATED.

diff --git a/libinterp/corefcn/error.h b/libinterp/corefcn/error.h
--- a/libinterp/corefcn/error.h
+++ b/libinterp/corefcn/error.h
@@ -38,20 +38,22 @@ extern OCTINTERP_API void reset_error_ha
 
 extern OCTINTERP_API int warning_enabled (const std::string& id);
 
 extern OCTINTERP_API void
 vmessage (const char *name, const char *fmt, va_list args);
 
 extern OCTINTERP_API void message (const char *name, const char *fmt, ...);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
+OCTAVE_DEPRECATED ("use 'print_usage' or 'verror' instead")
+OCTAVE_NORETURN OCTINTERP_API extern
 void vusage (const char *fmt, va_list args);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
+OCTAVE_DEPRECATED ("use 'print_usage' or 'error' instead")
+OCTAVE_NORETURN OCTINTERP_API extern
 void usage (const char *fmt, ...);
 
 extern OCTINTERP_API void vwarning (const char *fmt, va_list args);
 extern OCTINTERP_API void warning (const char *fmt, ...);
 
 OCTAVE_NORETURN OCTINTERP_API extern
 void verror (const char *fmt, va_list args);
 
diff --git a/libinterp/corefcn/errwarn.h b/libinterp/corefcn/errwarn.h
--- a/libinterp/corefcn/errwarn.h
+++ b/libinterp/corefcn/errwarn.h
@@ -29,152 +29,149 @@ along with Octave; see the file COPYING.
 
 class octave_value;
 class octave_execution_exception;
 
 ////////////////////////////////////////////////////////////////////////////////
 // Alphabetized list of common errors and warnings.
 ////////////////////////////////////////////////////////////////////////////////
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_2_or_3_dim_plot (void);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_2_or_3_dim_plot (void);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_data_conversion (const char *from, const char *to);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_data_conversion (const char *from, const char *to);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_disabled_feature (const std::string& fcn,
-                           const std::string& feature,
-                           const std::string& pkg = "Octave");
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_disabled_feature (const std::string& fcn, const std::string& feature,
+                      const std::string& pkg = "Octave");
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_indexed_cs_list (void);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_indexed_cs_list (void);
+
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_invalid_conversion (const std::string& from, const std::string& to);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_invalid_conversion (const std::string& from, const std::string& to);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_invalid_inquiry_subscript (void);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_invalid_inquiry_subscript (void);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_nonbraced_cs_list_assignment (void);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_nonbraced_cs_list_assignment (void);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_nonconformant (void);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_nonconformant (void);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_nonconformant (octave_idx_type r1, octave_idx_type c1,
+                   octave_idx_type r2, octave_idx_type c2);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_nonconformant (octave_idx_type r1, octave_idx_type c1,
-                        octave_idx_type r2, octave_idx_type c2);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_not_implemented (const char *);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_not_implemented (const char *);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_range_invalid (void);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_range_invalid (void);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_square_matrix_required (const char *fcn, const char *name);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_square_matrix_required (const char *fcn, const char *name);
-
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_string_invalid (void);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_string_invalid (void);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_unrecognized_data_fmt (const char *name);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_unrecognized_data_fmt (const char *name);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_unrecognized_float_fmt (void);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_unrecognized_float_fmt (void);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_user_returned_invalid (const char *name);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_user_returned_invalid (const char *name);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_user_supplied_eval (const char *name);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_user_supplied_eval (const char *name);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_user_supplied_eval (octave_execution_exception& e, const char *name);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_user_supplied_eval (octave_execution_exception& e, const char *name);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_wrong_type_arg (const char *name, const char *s);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_wrong_type_arg (const char *name, const char *s);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_wrong_type_arg (octave_execution_exception& e,
-                         const char *name, const char *s);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_wrong_type_arg (octave_execution_exception& e, const char *name,
+                    const char *s);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_wrong_type_arg (const char *name, const std::string& s);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_wrong_type_arg (const char *name, const std::string& s);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_wrong_type_arg (octave_execution_exception& e,
-                         const char *name, const std::string& s);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_wrong_type_arg (octave_execution_exception& e, const char *name,
+                    const std::string& s);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_wrong_type_arg (const char *name, const octave_value& tc);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_wrong_type_arg (const char *name, const octave_value& tc);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_wrong_type_arg (octave_execution_exception& e,
-                         const char *name, const octave_value& tc);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_wrong_type_arg (octave_execution_exception& e, const char *name,
+                    const octave_value& tc);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_wrong_type_arg (const std::string& name, const octave_value& tc);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_wrong_type_arg (const std::string& name, const octave_value& tc);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_wrong_type_arg (octave_execution_exception& e,
-                         const std::string& name, const octave_value& tc);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_wrong_type_arg (octave_execution_exception& e, const std::string& name,
+                    const octave_value& tc);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_wrong_type_arg (const char *s);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_wrong_type_arg (const char *s);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_wrong_type_arg (octave_execution_exception& e, const char *s);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_wrong_type_arg (octave_execution_exception& e, const char *s);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_wrong_type_arg (const std::string& s);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_wrong_type_arg (const std::string& s);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_wrong_type_arg (octave_execution_exception& e, const std::string& s);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_wrong_type_arg (octave_execution_exception& e, const std::string& s);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_wrong_type_arg (const octave_value& tc);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_wrong_type_arg (const octave_value& tc);
 
-OCTAVE_NORETURN OCTINTERP_API extern 
-void err_wrong_type_arg (octave_execution_exception& e, const octave_value& tc);
+OCTAVE_NORETURN OCTINTERP_API extern  void
+err_wrong_type_arg (octave_execution_exception& e, const octave_value& tc);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_wrong_type_arg_for_binary_op (const octave_value& op);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_wrong_type_arg_for_binary_op (const octave_value& op);
 
-OCTAVE_NORETURN OCTINTERP_API extern
-void err_wrong_type_arg_for_unary_op (const octave_value& op);
+OCTAVE_NORETURN OCTINTERP_API extern void
+err_wrong_type_arg_for_unary_op (const octave_value& op);
 
-OCTINTERP_API extern
-void warn_complex_cmp (void);
+OCTINTERP_API extern void
+warn_complex_cmp (void);
 
-OCTINTERP_API extern
-void warn_data_file_in_path (const std::string& fcn, const std::string& file);
+OCTINTERP_API extern void
+warn_data_file_in_path (const std::string& fcn, const std::string& file);
 
-OCTINTERP_API extern
-void warn_disabled_feature (const std::string& fcn,
-                            const std::string& feature,
-                            const std::string& pkg = "Octave");
+OCTINTERP_API extern void
+warn_disabled_feature (const std::string& fcn, const std::string& feature,
+                       const std::string& pkg = "Octave");
 
-OCTINTERP_API extern
-void warn_divide_by_zero (void);
+OCTINTERP_API extern void
+warn_divide_by_zero (void);
 
-OCTINTERP_API extern
-void warn_empty_arg (const char *name);
+OCTINTERP_API extern void
+warn_empty_arg (const char *name);
 
-OCTINTERP_API extern
-void warn_implicit_conversion (const char *id,
-                               const char *from, const char *to);
+OCTINTERP_API extern void
+warn_implicit_conversion (const char *id, const char *from, const char *to);
 
-OCTINTERP_API extern
-void warn_implicit_conversion (const std::string& id,
-                               const std::string& from, const std::string& to);
+OCTINTERP_API extern void
+warn_implicit_conversion (const std::string& id, const std::string& from,
+                          const std::string& to);
 
-OCTINTERP_API extern
-void warn_invalid_value_specified (const char *name);
+OCTINTERP_API extern void
+warn_invalid_value_specified (const char *name);
 
-OCTINTERP_API extern
-void warn_logical_conversion (void);
+OCTINTERP_API extern void
+warn_logical_conversion (void);
 
-OCTINTERP_API extern
-void warn_wrong_type_arg (const char *name, const octave_value& tc);
+OCTINTERP_API extern void
+warn_wrong_type_arg (const char *name, const octave_value& tc);
 
 #endif
diff --git a/libinterp/corefcn/gripes.h b/libinterp/corefcn/gripes.h
--- a/libinterp/corefcn/gripes.h
+++ b/libinterp/corefcn/gripes.h
@@ -30,164 +30,201 @@ along with Octave; see the file COPYING.
 
 class octave_value;
 class octave_execution_exception;
 
 ////////////////////////////////////////////////////////////////////////////////
 // Alphabetized list of gripes.
 ////////////////////////////////////////////////////////////////////////////////
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
-void gripe_2_or_3_dim_plot (void);
+OCTAVE_DEPRECATED ("use 'err_2_or_3_dim_plot' instead")
+OCTAVE_NORETURN OCTINTERP_API extern void
+gripe_2_or_3_dim_plot (void);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
-void gripe_data_conversion (const char *from, const char *to);
+OCTAVE_DEPRECATED ("use 'err_data_conversion' instead")
+OCTAVE_NORETURN OCTINTERP_API extern void
+gripe_data_conversion (const char *from, const char *to);
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void gripe_data_file_in_path (const std::string& fcn, const std::string& file);
+OCTAVE_DEPRECATED ("use 'warn_data_file_in_path' instead")
+OCTINTERP_API extern void
+gripe_data_file_in_path (const std::string& fcn, const std::string& file);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
-void gripe_disabled_feature (const std::string& fcn,
-                             const std::string& feature,
-                             const std::string& pkg="Octave");
+OCTAVE_DEPRECATED ("use 'err_disabled_feature' or 'warn_disabled_feature' instead")
+OCTAVE_NORETURN OCTINTERP_API extern void
+gripe_disabled_feature (const std::string& fcn,
+                        const std::string& feature,
+                        const std::string& pkg="Octave");
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void gripe_divide_by_zero (void);
+OCTAVE_DEPRECATED ("use 'warn_divide_by_zero' instead")
+OCTINTERP_API extern void
+gripe_divide_by_zero (void);
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void gripe_empty_arg (const char *name, bool is_error);
+OCTAVE_DEPRECATED ("use 'warn_empty_arg' instead")
+OCTINTERP_API extern void
+gripe_empty_arg (const char *name, bool is_error);
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void gripe_implicit_conversion (const char *id, const char *from, const char *to);
+OCTAVE_DEPRECATED ("use 'warn_implicit_conversion' instead")
+OCTINTERP_API extern void
+gripe_implicit_conversion (const char *id, const char *from, const char *to);
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void gripe_implicit_conversion (const std::string& id, const std::string& from,
-                                const std::string& to);
+OCTAVE_DEPRECATED ("use 'warn_implicit_conversion' instead")
+OCTINTERP_API extern void
+gripe_implicit_conversion (const std::string& id, const std::string& from,
+                           const std::string& to);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
-void gripe_indexed_cs_list (void);
+OCTAVE_DEPRECATED ("use 'err_indexed_cs_list' instead")
+OCTAVE_NORETURN OCTINTERP_API extern void
+gripe_indexed_cs_list (void);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
-void gripe_invalid_conversion (const std::string& from, const std::string& to);
+OCTAVE_DEPRECATED ("use 'err_invalid_conversion' instead")
+OCTAVE_NORETURN OCTINTERP_API extern void
+gripe_invalid_conversion (const std::string& from, const std::string& to);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
-void gripe_invalid_inquiry_subscript (void);
+OCTAVE_DEPRECATED ("use 'err_invalid_inquiry_subscript' instead")
+OCTAVE_NORETURN OCTINTERP_API extern void
+gripe_invalid_inquiry_subscript (void);
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void gripe_invalid_value_specified (const char *name);
+OCTAVE_DEPRECATED ("use 'warn_invalid_value_specified' instead")
+OCTINTERP_API extern void
+gripe_invalid_value_specified (const char *name);
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void gripe_logical_conversion (void);
+OCTAVE_DEPRECATED ("use 'warn_logical_conversion' instead")
+OCTINTERP_API extern void
+gripe_logical_conversion (void);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
-void gripe_nonbraced_cs_list_assignment (void);
+OCTAVE_DEPRECATED ("use 'err_nonbraced_cs_list_assignment' instead")
+OCTAVE_NORETURN OCTINTERP_API extern void
+gripe_nonbraced_cs_list_assignment (void);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
-void gripe_nonconformant (void);
+OCTAVE_DEPRECATED ("use 'err_nonconformant' instead")
+OCTAVE_NORETURN OCTINTERP_API extern void
+gripe_nonconformant (void);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
-void gripe_nonconformant (octave_idx_type r1, octave_idx_type c1,
-                          octave_idx_type r2, octave_idx_type c2);
+OCTAVE_DEPRECATED ("use 'err_nonconformant' instead")
+OCTAVE_NORETURN OCTINTERP_API extern void
+gripe_nonconformant (octave_idx_type r1, octave_idx_type c1,
+                     octave_idx_type r2, octave_idx_type c2);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
-void gripe_not_implemented (const char *);
+OCTAVE_DEPRECATED ("use 'err_not_implemented' instead")
+OCTAVE_NORETURN OCTINTERP_API extern void
+gripe_not_implemented (const char *);
 
 // FIXME: Deprecated in 4.2, remove in 4.6
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
-void gripe_not_supported (const char *);
-
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
-void gripe_range_invalid (void);
+OCTAVE_DEPRECATED ("use 'err_disabled_feature' or 'warn_disabled_feature' instead")
+OCTAVE_NORETURN OCTINTERP_API extern void
+gripe_not_supported (const char *);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
-void gripe_square_matrix_required (const char *name);
+OCTAVE_DEPRECATED ("use 'err_range_invalid' instead")
+OCTAVE_NORETURN OCTINTERP_API extern void
+gripe_range_invalid (void);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
-void gripe_string_invalid (void);
+OCTAVE_DEPRECATED ("use 'err_square_matrix_required' instead")
+OCTAVE_NORETURN OCTINTERP_API extern void
+gripe_square_matrix_required (const char *name);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
-void gripe_unrecognized_data_fmt (const char *warn_for);
+OCTAVE_DEPRECATED ("use 'err_string_invalid' instead")
+OCTAVE_NORETURN OCTINTERP_API extern void
+gripe_string_invalid (void);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
-void gripe_unrecognized_float_fmt (void);
+OCTAVE_DEPRECATED ("use 'err_unrecognized_data_fmt' instead")
+OCTAVE_NORETURN OCTINTERP_API extern void
+gripe_unrecognized_data_fmt (const char *warn_for);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
-void gripe_user_returned_invalid (const char *name);
+OCTAVE_DEPRECATED ("use 'err_unrecognized_float_fmt' instead")
+OCTAVE_NORETURN OCTINTERP_API extern void
+gripe_unrecognized_float_fmt (void);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
-void gripe_user_supplied_eval (const char *name);
+OCTAVE_DEPRECATED ("use 'err_user_returned_invalid' instead")
+OCTAVE_NORETURN OCTINTERP_API extern void
+gripe_user_returned_invalid (const char *name);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
-void gripe_user_supplied_eval (octave_execution_exception& e, const char *name);
+OCTAVE_DEPRECATED ("use 'err_user_supplied_eval' instead")
+OCTAVE_NORETURN OCTINTERP_API extern void
+gripe_user_supplied_eval (const char *name);
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void gripe_warn_complex_cmp (void);
+OCTAVE_DEPRECATED ("use 'err_user_supplied_eval' instead")
+OCTAVE_NORETURN OCTINTERP_API extern void
+gripe_user_supplied_eval (octave_execution_exception& e, const char *name);
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void gripe_wrong_type_arg (const char *name, const char *s,
-                           bool is_error = true);
+OCTAVE_DEPRECATED ("use 'warn_complex_cmp' instead")
+OCTINTERP_API extern void
+gripe_warn_complex_cmp (void);
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void gripe_wrong_type_arg (octave_execution_exception& e,
-                           const char *name, const char *s,
-                           bool is_error = true);
+OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTINTERP_API extern void
+gripe_wrong_type_arg (const char *name, const char *s,
+                      bool is_error = true);
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void gripe_wrong_type_arg (const char *name, const std::string& s,
-                           bool is_error = true);
+OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTINTERP_API extern void
+gripe_wrong_type_arg (octave_execution_exception& e,
+                      const char *name, const char *s,
+                      bool is_error = true);
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void gripe_wrong_type_arg (octave_execution_exception& e,
-                           const char *name, const std::string& s,
-                           bool is_error = true);
+OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTINTERP_API extern void
+gripe_wrong_type_arg (const char *name, const std::string& s,
+                      bool is_error = true);
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void gripe_wrong_type_arg (const char *name, const octave_value& tc,
-                           bool is_error = true);
+OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTINTERP_API extern void
+gripe_wrong_type_arg (octave_execution_exception& e,
+                      const char *name, const std::string& s,
+                      bool is_error = true);
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void gripe_wrong_type_arg (octave_execution_exception& e,
-                           const char *name, const octave_value& tc,
-                           bool is_error = true);
+OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' or 'warn_wrong_type_arg' instead")
+OCTINTERP_API extern void
+gripe_wrong_type_arg (const char *name, const octave_value& tc,
+                      bool is_error = true);
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void gripe_wrong_type_arg (const std::string& name, const octave_value& tc,
-                           bool is_error = true);
+OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTINTERP_API extern void
+gripe_wrong_type_arg (octave_execution_exception& e,
+                      const char *name, const octave_value& tc,
+                      bool is_error = true);
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void gripe_wrong_type_arg (octave_execution_exception& e,
-                           const std::string& name, const octave_value& tc,
-                           bool is_error = true);
+OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTINTERP_API extern void
+gripe_wrong_type_arg (const std::string& name, const octave_value& tc,
+                      bool is_error = true);
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void gripe_wrong_type_arg (const char *s,
-                           bool is_error = true);
+OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTINTERP_API extern void
+gripe_wrong_type_arg (octave_execution_exception& e,
+                      const std::string& name, const octave_value& tc,
+                      bool is_error = true);
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void gripe_wrong_type_arg (octave_execution_exception& e,
-                           const char *s,
-                           bool is_error = true);
+OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTINTERP_API extern void
+gripe_wrong_type_arg (const char *s, bool is_error = true);
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void gripe_wrong_type_arg (const std::string& s,
-                           bool is_error = true);
+OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTINTERP_API extern void
+gripe_wrong_type_arg (octave_execution_exception& e, const char *s,
+                      bool is_error = true);
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void gripe_wrong_type_arg (octave_execution_exception& e,
-                           const std::string& s,
-                           bool is_error = true);
+OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTINTERP_API extern void
+gripe_wrong_type_arg (const std::string& s, bool is_error = true);
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void gripe_wrong_type_arg (const octave_value& tc,
-                           bool is_error = true);
+OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTINTERP_API extern void
+gripe_wrong_type_arg (octave_execution_exception& e, const std::string& s,
+                      bool is_error = true);
+
+OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTINTERP_API extern void
+gripe_wrong_type_arg (const octave_value& tc, bool is_error = true);
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void gripe_wrong_type_arg (octave_execution_exception& e,
-                           const octave_value& tc,
-                           bool is_error = true);
+OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTINTERP_API extern void
+gripe_wrong_type_arg (octave_execution_exception& e, const octave_value& tc,
+                      bool is_error = true);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
-void gripe_wrong_type_arg_for_binary_op (const octave_value& op);
+OCTAVE_DEPRECATED ("use 'err_wrong_type_arg_for_binary_op' instead")
+OCTAVE_NORETURN OCTINTERP_API extern void
+gripe_wrong_type_arg_for_binary_op (const octave_value& op);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
-void gripe_wrong_type_arg_for_unary_op (const octave_value& op);
+OCTAVE_DEPRECATED ("use 'err_wrong_type_arg_for_unary_op' instead")
+OCTAVE_NORETURN OCTINTERP_API extern void
+gripe_wrong_type_arg_for_unary_op (const octave_value& op);
 
 #endif
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -1334,19 +1334,18 @@ public:
     static octave_value foobar;
 
     symbol_table *inst = get_instance (scope);
 
     if (inst)
       inst->do_assign (name, value, context, force_add);
   }
 
-  // Use assign (name, value, scope, context, force_add) instead.
-  OCTAVE_DEPRECATED static
-  octave_value&
+  OCTAVE_DEPRECATED ("use 'assign' instead")
+  static octave_value&
   varref (const std::string& name, scope_id scope = xcurrent_scope,
           context_id context = xdefault_context, bool force_add = false)
   {
     static octave_value foobar;
 
     symbol_table *inst = get_instance (scope);
 
     return inst ? inst->do_varref (name, context, force_add) : foobar;
@@ -1358,19 +1357,18 @@ public:
   static void force_assign (const std::string& name,
                             const octave_value& value = octave_value (),
                             scope_id scope = xcurrent_scope,
                             context_id context = xdefault_context)
   {
     assign (name, value, scope, context, true);
   }
 
-  // Use force_assign (name, value, scope, context) instead.
-  OCTAVE_DEPRECATED static
-  octave_value&
+  OCTAVE_DEPRECATED ("use 'force_assign' instead")
+  static octave_value&
   force_varref (const std::string& name, scope_id scope = xcurrent_scope,
                 context_id context = xdefault_context)
   {
     static octave_value foobar;
 
     symbol_table *inst = get_instance (scope);
 
     return inst ? inst->do_varref (name, context, true) : foobar;
@@ -1393,19 +1391,18 @@ public:
     global_table_iterator p = global_table.find (name);
 
     if (p == global_table.end ())
       global_table[name] = value;
     else
       p->second = value;
   }
 
-  // Use global_assign (name, value) instead.
-  OCTAVE_DEPRECATED static
-  octave_value&
+  OCTAVE_DEPRECATED ("use 'global_assign' instead")
+  static octave_value&
   global_varref (const std::string& name)
 
   {
     global_table_iterator p = global_table.find (name);
 
     return (p == global_table.end ()) ? global_table[name] : p->second;
   }
 
@@ -1419,19 +1416,18 @@ public:
 
   static void
   top_level_assign (const std::string& name,
                     const octave_value& value = octave_value ())
   {
     assign (name, value, top_scope (), 0);
   }
 
-  // Use top_level_assign (name, value) instead.
-  OCTAVE_DEPRECATED static
-  octave_value&
+  OCTAVE_DEPRECATED ("use 'top_level_assign' instead")
+  static octave_value&
   top_level_varref (const std::string& name)
   {
     static octave_value foobar;
 
     symbol_table *inst = get_instance (top_scope ());
 
     return inst ? inst->do_varref (name, 0, true) : foobar;
   }
@@ -1447,19 +1443,18 @@ public:
                      const octave_value& value = octave_value ())
   {
     symbol_table *inst = get_instance (xcurrent_scope);
 
     if (inst)
       inst->do_persistent_assign (name, value);
   }
 
-  // Use persistent_assign (name, value) instead.
-  OCTAVE_DEPRECATED static
-  octave_value&
+  OCTAVE_DEPRECATED ("use 'persistent_assign' instead")
+  static octave_value&
   persistent_varref (const std::string& name)
   {
     static octave_value foobar;
 
     symbol_table *inst = get_instance (xcurrent_scope);
 
     return inst ? inst->do_persistent_varref (name) : foobar;
   }
diff --git a/libinterp/corefcn/variables.h b/libinterp/corefcn/variables.h
--- a/libinterp/corefcn/variables.h
+++ b/libinterp/corefcn/variables.h
@@ -132,18 +132,19 @@ set_internal_variable (int& var, const o
 
 extern OCTINTERP_API std::string builtin_string_variable (const std::string&);
 extern OCTINTERP_API int builtin_real_scalar_variable (const std::string&,
                                                        double&);
 extern OCTINTERP_API octave_value builtin_any_variable (const std::string&);
 
 extern OCTINTERP_API void bind_ans (const octave_value& val, bool print);
 
-OCTAVE_DEPRECATED OCTINTERP_API extern
-void bind_internal_variable (const std::string& fname, const octave_value& val);
+OCTAVE_DEPRECATED ("note: internal variables have been replaced by functions; use 'feval' instead")
+OCTINTERP_API extern void
+bind_internal_variable (const std::string& fname, const octave_value& val);
 
 extern OCTINTERP_API void mlock (void);
 extern OCTINTERP_API void munlock (const std::string&);
 extern OCTINTERP_API bool mislocked (const std::string&);
 
 extern OCTINTERP_API void clear_function (const std::string& nm);
 extern OCTINTERP_API void clear_variable (const std::string& nm);
 extern OCTINTERP_API void clear_symbol (const std::string& nm);
diff --git a/libinterp/octave-value/ov-base-sparse.h b/libinterp/octave-value/ov-base-sparse.h
--- a/libinterp/octave-value/ov-base-sparse.h
+++ b/libinterp/octave-value/ov-base-sparse.h
@@ -138,17 +138,18 @@ public:
   bool is_sparse_type (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_true (void) const;
 
-  OCTAVE_DEPRECATED octave_idx_type capacity (void) const { return nzmax (); }
+  OCTAVE_DEPRECATED ("use 'nzmax' instead")
+  octave_idx_type capacity (void) const { return nzmax (); }
 
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -305,17 +305,18 @@ public:
     return dv(1);
   }
 
   virtual int ndims (void) const
   { return dims ().length (); }
 
   virtual octave_idx_type numel (void) const { return dims ().numel (); }
 
-  OCTAVE_DEPRECATED virtual octave_idx_type capacity (void) const
+  OCTAVE_DEPRECATED ("use 'numel' instead")
+  virtual octave_idx_type capacity (void) const
   { return numel (); }
 
   virtual size_t byte_size (void) const { return 0; }
 
   virtual octave_idx_type nnz (void) const;
 
   virtual octave_idx_type nzmax (void) const;
 
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -237,22 +237,26 @@ public:
   octave_value (const Array<bool>& bnda);
   octave_value (char c, char type = '\'');
   octave_value (const char *s, char type = '\'');
   octave_value (const std::string& s, char type = '\'');
   octave_value (const string_vector& s, char type = '\'');
   octave_value (const charMatrix& chm,  char type = '\'');
   octave_value (const charNDArray& chnda, char type = '\'');
   octave_value (const Array<char>& chnda, char type = '\'');
-  OCTAVE_DEPRECATED octave_value (const charMatrix& chm, bool is_string,
-                                    char type = '\'');
-  OCTAVE_DEPRECATED octave_value (const charNDArray& chnda, bool is_string,
-                                    char type = '\'');
-  OCTAVE_DEPRECATED octave_value (const Array<char>& chnda, bool is_string,
-                                    char type = '\'');
+
+  OCTAVE_DEPRECATED ("note: IS_STRING argument is ignored")
+  octave_value (const charMatrix& chm, bool is_string, char type = '\'');
+
+  OCTAVE_DEPRECATED ("note: IS_STRING argument is ignored")
+  octave_value (const charNDArray& chnda, bool is_string, char type = '\'');
+
+  OCTAVE_DEPRECATED ("note: IS_STRING argument is ignored")
+  octave_value (const Array<char>& chnda, bool is_string, char type = '\'');
+
   octave_value (const SparseMatrix& m, const MatrixType& t = MatrixType ());
   octave_value (const Sparse<double>& m, const MatrixType& t = MatrixType ());
   octave_value (const SparseComplexMatrix& m,
                 const MatrixType& t = MatrixType ());
   octave_value (const Sparse<Complex>& m, const MatrixType& t = MatrixType ());
   octave_value (const SparseBoolMatrix& bm,
                 const MatrixType& t = MatrixType ());
   octave_value (const Sparse<bool>& m, const MatrixType& t = MatrixType ());
@@ -291,17 +295,19 @@ public:
   octave_value (const octave_map& m, const std::string& id,
                 const std::list<std::string>& plist);
   octave_value (const octave_scalar_map& m, const std::string& id,
                 const std::list<std::string>& plist);
   octave_value (const octave_value_list& m, bool = false);
   octave_value (octave_value::magic_colon);
 
   octave_value (octave_base_value *new_rep, bool borrow = false);
-  OCTAVE_DEPRECATED octave_value (octave_base_value *new_rep, int xcount);
+
+  OCTAVE_DEPRECATED ("note: in the future there will be no way to directly set reference count")
+  octave_value (octave_base_value *new_rep, int xcount);
 
   // Copy constructor.
 
   octave_value (const octave_value& a)
   {
     rep = a.rep;
     rep->count++;
   }
@@ -476,17 +482,18 @@ public:
 
   int ndims (void) const { return rep->ndims (); }
 
   bool all_zero_dims (void) const { return dims ().all_zero (); }
 
   octave_idx_type numel (void) const
   { return rep->numel (); }
 
-  OCTAVE_DEPRECATED octave_idx_type capacity (void) const
+  OCTAVE_DEPRECATED ("use 'numel' instead")
+  octave_idx_type capacity (void) const
   { return rep->numel (); }
 
   size_t byte_size (void) const
   { return rep->byte_size (); }
 
   octave_idx_type nnz (void) const { return rep->nnz (); }
 
   octave_idx_type nzmax (void) const { return rep->nzmax (); }
@@ -887,17 +894,18 @@ public:
   { return rep->uint64_array_value (); }
 
   std::string string_value (bool force = false) const
   { return rep->string_value (force); }
 
   string_vector string_vector_value (bool pad = false) const
   { return rep->string_vector_value (pad); }
 
-  OCTAVE_DEPRECATED string_vector all_strings (bool pad = false) const
+  OCTAVE_DEPRECATED ("use 'string_vector_value' instead")
+  string_vector all_strings (bool pad = false) const
   { return string_vector_value (pad); }
 
   Cell cell_value (void) const;
 
   Array<std::string> cellstr_value (void) const
   { return rep->cellstr_value (); }
 
   Range range_value (void) const
diff --git a/liboctave/array/Array.h b/liboctave/array/Array.h
--- a/liboctave/array/Array.h
+++ b/liboctave/array/Array.h
@@ -249,34 +249,37 @@ public:
   void clear (octave_idx_type r, octave_idx_type c)
   { clear (dim_vector (r, c)); }
 
   // Number of elements in the array. These are all synonyms.
   //@{
   //! Number of elements in the array.
   //! Synonymous with numel().
   //! @note This method is deprecated in favour of numel().
-  OCTAVE_DEPRECATED octave_idx_type capacity (void) const { return numel (); }
+  OCTAVE_DEPRECATED ("use 'numel' instead")
+  octave_idx_type capacity (void) const { return numel (); }
 
   //! Number of elements in the array.
   /*! Synonymous with numel().
       @note This method is deprecated in favour of numel().
 
       @note
       This is @em not the same as @c %length() at the Octave interpreter.
       At the Octave interpreter, the function @c %length() returns the
       length of the greatest dimension.  This method returns the total
       number of elements.
    */
-  OCTAVE_DEPRECATED octave_idx_type length (void) const { return numel (); }
+  OCTAVE_DEPRECATED ("use 'numel' instead")
+  octave_idx_type length (void) const { return numel (); }
 
   //! Number of elements in the array.
   //! Synonymous with numel().
   //! @note This method is deprecated in favour of numel().
-  OCTAVE_DEPRECATED octave_idx_type nelem (void) const { return numel (); }
+  OCTAVE_DEPRECATED ("use 'numel' instead")
+  octave_idx_type nelem (void) const { return numel (); }
 
   //! Number of elements in the array.
   octave_idx_type numel (void) const { return slice_len; }
   //@}
 
   //! Return the array as a column vector.
   Array<T> as_column (void) const
   {
diff --git a/liboctave/array/DiagArray2.h b/liboctave/array/DiagArray2.h
--- a/liboctave/array/DiagArray2.h
+++ b/liboctave/array/DiagArray2.h
@@ -92,17 +92,19 @@ public:
   octave_idx_type length (void) const { return Array<T>::numel (); }
   octave_idx_type nelem (void) const { return dim1 () * dim2 (); }
   octave_idx_type numel (void) const { return nelem (); }
 
   size_t byte_size (void) const { return Array<T>::byte_size (); }
 
   dim_vector dims (void) const { return dim_vector (d1, d2); }
 
-  OCTAVE_DEPRECATED Array<T> diag (octave_idx_type k = 0) const;
+  OCTAVE_DEPRECATED ("use 'extract_diag' instead")
+  Array<T> diag (octave_idx_type k = 0) const;
+
   Array<T> extract_diag (octave_idx_type k = 0) const;
   DiagArray2<T> build_diag_matrix () const
   {
     return DiagArray2<T> (array_value ());
   }
 
   // Warning: the non-const two-index versions will silently ignore assignments
   // to off-diagonal elements.
diff --git a/liboctave/array/PermMatrix.h b/liboctave/array/PermMatrix.h
--- a/liboctave/array/PermMatrix.h
+++ b/liboctave/array/PermMatrix.h
@@ -32,23 +32,25 @@ along with Octave; see the file COPYING.
 class OCTAVE_API PermMatrix : protected Array<octave_idx_type>
 {
 public:
 
   PermMatrix (void) : Array<octave_idx_type> () { }
 
   PermMatrix (octave_idx_type n);
 
-  OCTAVE_DEPRECATED PermMatrix (const Array<octave_idx_type>& p);
+  OCTAVE_DEPRECATED ("use 'PermMatrix (p, false, true)' instead")
+  PermMatrix (const Array<octave_idx_type>& p);
 
   PermMatrix (const Array<octave_idx_type>& p, bool colp, bool check = true);
 
   PermMatrix (const PermMatrix& m) : Array<octave_idx_type> (m) { }
 
-  OCTAVE_DEPRECATED PermMatrix (const idx_vector& idx);
+  OCTAVE_DEPRECATED ("use 'PermVector (idx, false, 0)' instead")
+  PermMatrix (const idx_vector& idx);
 
   PermMatrix (const idx_vector& idx, bool colp, octave_idx_type n = 0);
 
   octave_idx_type dim1 (void) const
   { return Array<octave_idx_type>::numel (); }
   octave_idx_type dim2 (void) const
   { return Array<octave_idx_type>::numel (); }
 
@@ -56,17 +58,20 @@ public:
   octave_idx_type cols (void) const { return dim2 (); }
   octave_idx_type columns (void) const { return dim2 (); }
 
   octave_idx_type perm_length (void) const
   { return Array<octave_idx_type>::numel (); }
   // FIXME: a dangerous ambiguity?
   octave_idx_type length (void) const
   { return perm_length (); }
-  OCTAVE_DEPRECATED octave_idx_type nelem (void) const { return numel (); }
+
+  OCTAVE_DEPRECATED ("use 'numel' instead")
+  octave_idx_type nelem (void) const { return numel (); }
+
   octave_idx_type numel (void) const { return dim1 () * dim2 (); }
 
   size_t byte_size (void) const
   { return Array<octave_idx_type>::byte_size (); }
 
   dim_vector dims (void) const { return dim_vector (dim1 (), dim2 ()); }
 
   const Array<octave_idx_type>& col_perm_vec (void) const
diff --git a/liboctave/array/Range.h b/liboctave/array/Range.h
--- a/liboctave/array/Range.h
+++ b/liboctave/array/Range.h
@@ -93,18 +93,22 @@ public:
         if (tmplimit != rng_limit)
           rng_limit = tmplimit;
       }
   }
 
   double base (void) const { return rng_base; }
   double limit (void) const { return rng_limit; }
   double inc (void) const { return rng_inc; }
-  OCTAVE_DEPRECATED octave_idx_type nelem (void) const { return numel (); }
+
+  OCTAVE_DEPRECATED ("use 'numel' instead")
+  octave_idx_type nelem (void) const { return numel (); }
+
   octave_idx_type numel (void) const { return rng_numel; }
+
   bool is_empty (void) const { return numel () == 0; }
 
   bool all_elements_are_ints (void) const;
 
   Matrix matrix_value (void) const;
 
   double min (void) const;
   double max (void) const;
diff --git a/liboctave/array/Sparse.h b/liboctave/array/Sparse.h
--- a/liboctave/array/Sparse.h
+++ b/liboctave/array/Sparse.h
@@ -238,31 +238,37 @@ public:
 
   virtual ~Sparse (void);
 
   Sparse<T>& operator = (const Sparse<T>& a);
 
   //! Amount of storage for nonzero elements.
   //! This may differ from the actual number of elements, see nnz().
   octave_idx_type nzmax (void) const { return rep->length (); }
+
   //! Amount of storage for nonzero elements.
   //! Synonymous with nzmax().
-  OCTAVE_DEPRECATED octave_idx_type capacity (void) const { return nzmax (); }
+  OCTAVE_DEPRECATED ("use 'nzmax' instead")
+  octave_idx_type capacity (void) const { return nzmax (); }
+
   //! Actual number of nonzero terms.
   octave_idx_type nnz (void) const { return rep->nnz (); }
 
   // Querying the number of elements (incl. zeros) may overflow the index type,
   // so don't do it unless you really need it.
   octave_idx_type numel (void) const
   {
     return dimensions.safe_numel ();
   }
 
-  OCTAVE_DEPRECATED octave_idx_type nelem (void) const { return nzmax (); }
-  OCTAVE_DEPRECATED octave_idx_type length (void) const { return numel (); }
+  OCTAVE_DEPRECATED ("use 'nzmax' instead")
+  octave_idx_type nelem (void) const { return nzmax (); }
+
+  OCTAVE_DEPRECATED ("use 'numel' instead")
+  octave_idx_type length (void) const { return numel (); }
 
   octave_idx_type dim1 (void) const { return dimensions(0); }
   octave_idx_type dim2 (void) const { return dimensions(1); }
 
   octave_idx_type rows (void) const { return dim1 (); }
   octave_idx_type cols (void) const { return dim2 (); }
   octave_idx_type columns (void) const { return dim2 (); }
 
diff --git a/liboctave/array/dSparse.h b/liboctave/array/dSparse.h
--- a/liboctave/array/dSparse.h
+++ b/liboctave/array/dSparse.h
@@ -116,23 +116,26 @@ public:
   SparseMatrix concat (const SparseMatrix& rb,
                        const Array<octave_idx_type>& ra_idx);
   SparseComplexMatrix concat (const SparseComplexMatrix& rb,
                               const Array<octave_idx_type>& ra_idx);
 
   friend OCTAVE_API SparseMatrix real (const SparseComplexMatrix& a);
   friend OCTAVE_API SparseMatrix imag (const SparseComplexMatrix& a);
 
-  OCTAVE_DEPRECATED OCTAVE_API friend
+  OCTAVE_DEPRECATED ("use 'Fatan2' instead")
+  OCTAVE_API friend
   SparseMatrix atan2 (const double& x, const SparseMatrix& y);
 
-  OCTAVE_DEPRECATED OCTAVE_API friend
+  OCTAVE_DEPRECATED ("use 'Fatan2' instead")
+  OCTAVE_API friend
   SparseMatrix atan2 (const SparseMatrix& x, const double& y);
 
-  OCTAVE_DEPRECATED OCTAVE_API friend
+  OCTAVE_DEPRECATED ("use 'Fatan2' instead")
+  OCTAVE_API friend
   SparseMatrix atan2 (const SparseMatrix& x, const SparseMatrix& y);
 
   SparseMatrix transpose (void) const
   {
     return MSparse<double>::transpose ();
   }
   SparseMatrix hermitian (void) const { return transpose (); }
 
diff --git a/liboctave/util/lo-array-errwarn.h b/liboctave/util/lo-array-errwarn.h
--- a/liboctave/util/lo-array-errwarn.h
+++ b/liboctave/util/lo-array-errwarn.h
@@ -94,64 +94,62 @@ protected:
   // Dimension number in which invalid index occurred.
   octave_idx_type dim;
 
   // Name of variable being indexed.
   std::string var;
 
 };
 
-OCTAVE_NORETURN OCTAVE_API extern
-void err_nan_to_logical_conversion (void);
+OCTAVE_NORETURN OCTAVE_API extern void
+err_nan_to_logical_conversion (void);
 
-OCTAVE_NORETURN OCTAVE_API extern
-void err_nan_to_character_conversion (void);
+OCTAVE_NORETURN OCTAVE_API extern void
+err_nan_to_character_conversion (void);
 
-OCTAVE_NORETURN OCTAVE_API extern
-void err_nonconformant (const char *op,
-                        octave_idx_type op1_len,
-                        octave_idx_type op2_len);
+OCTAVE_NORETURN OCTAVE_API extern void
+err_nonconformant (const char *op, octave_idx_type op1_len,
+                   octave_idx_type op2_len);
 
-OCTAVE_NORETURN OCTAVE_API extern
-void err_nonconformant (const char *op,
-                        octave_idx_type op1_nr, octave_idx_type op1_nc,
-                        octave_idx_type op2_nr, octave_idx_type op2_nc);
+OCTAVE_NORETURN OCTAVE_API extern void
+err_nonconformant (const char *op,
+                   octave_idx_type op1_nr, octave_idx_type op1_nc,
+                   octave_idx_type op2_nr, octave_idx_type op2_nc);
 
 
-OCTAVE_NORETURN OCTAVE_API extern
-void err_nonconformant (const char *op, const dim_vector& op1_dims,
-                        const dim_vector& op2_dims);
+OCTAVE_NORETURN OCTAVE_API extern void
+err_nonconformant (const char *op,
+                   const dim_vector& op1_dims, const dim_vector& op2_dims);
+
+OCTAVE_NORETURN OCTAVE_API extern void
+err_index_out_of_range (int nd, int dim, octave_idx_type iext,
+                        octave_idx_type ext, const dim_vector& d);
 
-OCTAVE_NORETURN OCTAVE_API extern
-void err_index_out_of_range (int nd, int dim,
-                             octave_idx_type iext, octave_idx_type ext,
-                             const dim_vector& d);
+OCTAVE_NORETURN OCTAVE_API extern void
+err_index_out_of_range (int nd, int dim, octave_idx_type iext,
+                        octave_idx_type ext);
 
-OCTAVE_NORETURN OCTAVE_API extern
-void err_index_out_of_range (int nd, int dim,
-                             octave_idx_type iext, octave_idx_type ext);
-
-OCTAVE_NORETURN OCTAVE_API extern
-void err_del_index_out_of_range (bool is1d, octave_idx_type iext,
-                                 octave_idx_type ext);
+OCTAVE_NORETURN OCTAVE_API extern void
+err_del_index_out_of_range (bool is1d, octave_idx_type iext,
+                            octave_idx_type ext);
 
-OCTAVE_NORETURN OCTAVE_API extern
-void err_invalid_index (double, octave_idx_type nd = 0,
-                        octave_idx_type dim = 0,
-                        const std::string& var = "");
+OCTAVE_NORETURN OCTAVE_API extern void
+err_invalid_index (double, octave_idx_type nd = 0,
+                   octave_idx_type dim = 0,
+                   const std::string& var = "");
 
-OCTAVE_NORETURN OCTAVE_API extern
-void err_invalid_index (octave_idx_type n, octave_idx_type nd = 0,
-                        octave_idx_type dim = 0,
-                        const std::string& var = "");
+OCTAVE_NORETURN OCTAVE_API extern void
+err_invalid_index (octave_idx_type n, octave_idx_type nd = 0,
+                   octave_idx_type dim = 0,
+                   const std::string& var = "");
 
-OCTAVE_NORETURN OCTAVE_API extern
-void err_invalid_index (const std::string& idx, octave_idx_type nd = 0,
-                        octave_idx_type dim = 0,
-                        const std::string& var = "");
+OCTAVE_NORETURN OCTAVE_API extern void
+err_invalid_index (const std::string& idx, octave_idx_type nd = 0,
+                   octave_idx_type dim = 0,
+                   const std::string& var = "");
 
-OCTAVE_NORETURN OCTAVE_API extern
-void err_invalid_resize (void);
+OCTAVE_NORETURN OCTAVE_API extern void
+err_invalid_resize (void);
 
-OCTAVE_API extern
-void warn_singular_matrix (double rcond = 0.0);
+OCTAVE_API extern void
+warn_singular_matrix (double rcond = 0.0);
 
 #endif
diff --git a/liboctave/util/lo-array-gripes.h b/liboctave/util/lo-array-gripes.h
--- a/liboctave/util/lo-array-gripes.h
+++ b/liboctave/util/lo-array-gripes.h
@@ -24,64 +24,77 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_lo_array_gripes_h)
 #define octave_lo_array_gripes_h 1
 
 #include "lo-array-errwarn.h"
 #include "dim-vector.h"
 #include "quit.h"
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTAVE_API extern void
+OCTAVE_DEPRECATED ("use 'err_nan_to_logical_conversion' instead")
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_nan_to_logical_conversion (void);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTAVE_API extern void
+OCTAVE_DEPRECATED ("use 'err_nan_to_character_conversion' instead")
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_nan_to_character_conversion (void);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTAVE_API extern void
+OCTAVE_DEPRECATED ("use 'err_nonconformant' instead")
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_nonconformant (const char *op,
                      octave_idx_type op1_len,
                      octave_idx_type op2_len);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTAVE_API extern void
+OCTAVE_DEPRECATED ("use 'err_nonconformant' instead")
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_nonconformant (const char *op,
                      octave_idx_type op1_nr, octave_idx_type op1_nc,
                      octave_idx_type op2_nr, octave_idx_type op2_nc);
 
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTAVE_API extern void
+OCTAVE_DEPRECATED ("use 'err_nonconformant' instead")
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_nonconformant (const char *op, const dim_vector& op1_dims,
                      const dim_vector& op2_dims);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTAVE_API extern void
+OCTAVE_DEPRECATED ("use 'err_index_out_of_range' instead")
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_index_out_of_range (int nd, int dim,
                           octave_idx_type iext, octave_idx_type ext,
                           const dim_vector& d);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTAVE_API extern void
+OCTAVE_DEPRECATED ("use 'err_index_out_of_range' instead")
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_index_out_of_range (int nd, int dim,
                           octave_idx_type iext, octave_idx_type ext);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTAVE_API extern void
+OCTAVE_DEPRECATED ("use 'err_del_index_out_of_range' instead")
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_del_index_out_of_range (bool is1d, octave_idx_type iext,
                               octave_idx_type ext);
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTAVE_API extern void
+OCTAVE_DEPRECATED ("use 'err_invalid_index' instead")
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_invalid_index (double, octave_idx_type nd = 0,
                      octave_idx_type dim = 0,
                      const std::string& var = "");
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTAVE_API extern void
+OCTAVE_DEPRECATED ("use 'err_invalid_index' instead")
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_invalid_index (octave_idx_type n, octave_idx_type nd = 0,
                      octave_idx_type dim = 0,
                      const std::string& var = "");
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTAVE_API extern void
+OCTAVE_DEPRECATED ("use 'err_invalid_index' instead")
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_invalid_index (const std::string& idx, octave_idx_type nd = 0,
                      octave_idx_type dim = 0,
                      const std::string& var = "");
 
-OCTAVE_DEPRECATED OCTAVE_NORETURN OCTAVE_API extern void
+OCTAVE_DEPRECATED ("use 'err_invalid_resize' instead")
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_invalid_resize (void);
 
-OCTAVE_DEPRECATED OCTAVE_API extern
-void gripe_singular_matrix (double rcond = 0.0);
+OCTAVE_DEPRECATED ("use 'err_singular_matrix' instead")
+OCTAVE_API extern void
+gripe_singular_matrix (double rcond = 0.0);
 
 #endif
diff --git a/liboctave/util/unwind-prot.h b/liboctave/util/unwind-prot.h
--- a/liboctave/util/unwind-prot.h
+++ b/liboctave/util/unwind-prot.h
@@ -45,51 +45,56 @@ public:
 
   ~unwind_protect (void) { run (); }
 
   virtual void add (elem *new_elem)
   {
     lifo.push (new_elem);
   }
 
-  OCTAVE_DEPRECATED void add (void (*fcn) (void *), void *ptr = 0)
+  OCTAVE_DEPRECATED ("use 'add (new fcn_arg_elem<void *> (fcn, ptr))' instead")
+  void add (void (*fcn) (void *), void *ptr = 0)
   {
     add (new fcn_arg_elem<void *> (fcn, ptr));
   }
 
   operator bool (void) const { return ! empty (); }
 
-  OCTAVE_DEPRECATED void run_top (void) { run_first (); }
+  OCTAVE_DEPRECATED ("use 'run_first' instead")
+  void run_top (void) { run_first (); }
 
   void run_first (void)
   {
     if (! empty ())
       {
         // No leak on exception!
         std::auto_ptr<elem> ptr (lifo.top ());
         lifo.pop ();
         ptr->run ();
       }
   }
 
-  OCTAVE_DEPRECATED void run_top (int num) { run (num); }
+  OCTAVE_DEPRECATED ("use 'run' instead")
+  void run_top (int num) { run (num); }
 
-  OCTAVE_DEPRECATED void discard_top (void) { discard_first (); }
+  OCTAVE_DEPRECATED ("use 'discard_first' instead")
+  void discard_top (void) { discard_first (); }
 
   void discard_first (void)
   {
     if (! empty ())
       {
         elem *ptr = lifo.top ();
         lifo.pop ();
         delete ptr;
       }
   }
 
-  OCTAVE_DEPRECATED void discard_top (int num) { discard (num); }
+  OCTAVE_DEPRECATED ("use 'discard' instead")
+  void discard_top (int num) { discard (num); }
 
   size_t size (void) const { return lifo.size (); }
 
 protected:
 
   std::stack<elem *> lifo;
 
 private:
diff --git a/oct-conf-post.in.h b/oct-conf-post.in.h
--- a/oct-conf-post.in.h
+++ b/oct-conf-post.in.h
@@ -30,26 +30,26 @@ along with Octave; see the file COPYING.
 // been future-proofed by using macros of the form OCTAVE_ATTRIBUTE_NAME in
 // place of vendor specific attribute mechanisms.  As compilers evolve, the
 // underlying implementation can be changed with the macro definitions below.
 // FIXME: Update macros to use C++ standard attribute syntax when Octave moves
 //        to C++ 2011 standard.
 
 #if defined (__GNUC__)
   // The following attributes are used with gcc and clang compilers.
-  #define OCTAVE_DEPRECATED __attribute__ ((__deprecated__))
+  #define OCTAVE_DEPRECATED(msg) __attribute__ ((__deprecated__ (msg)))
   #define HAVE_ATTR_DEPRECATED
 
   #define OCTAVE_NORETURN __attribute__ ((__noreturn__))
   #define HAVE_ATTR_NORETURN
 
   #define OCTAVE_UNUSED __attribute__ ((__unused__))
   #define HAVE_ATTR_UNUSED
 #else
-  #define OCTAVE_DEPRECATED
+  #define OCTAVE_DEPRECATED(msg)
   #define OCTAVE_NORETURN
   #define OCTAVE_UNUSED
 #endif
 
 #define X_CAST(T, E) (T) (E)
 
 #if defined (CXX_BROKEN_REINTERPRET_CAST)
 #define FCN_PTR_CAST(T, E) (T) (E)
