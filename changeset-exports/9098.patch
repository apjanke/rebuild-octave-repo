# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1239058662 14400
#      Mon Apr 06 18:57:42 2009 -0400
# Node ID 5ecdb3d3568fe46a4720392d132371cb961e0fc2
# Parent  705c24e3db58ee53f4054509a16252c1574903ca
Allow fontsize to be specified for all objects with fontname == "*".

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2009-04-06  Ben Abbott <bpabbott@mac.com>
+
+	* plot/__gnuplot_default_font__.m: Remove file from archive.
+	* plot/__go_draw_axes__.m, plot/__go_draw_figure__.m: Allow
+	fontsize to be specified for all terminals with fontname == "*".
+
 2009-04-06  Jaroslav Hajek <highegg@gmail.com>
 
 	* polynomial/polyscale.m: New function.
 	* polynomial/polytrans.m: New function.
 
 2009-04-06  Jaroslav Hajek  <highegg@gmail.com>
 
 	* special-matrix/pascal.m: Fix, optimize & extend.
diff --git a/scripts/plot/__gnuplot_default_font__.m b/scripts/plot/__gnuplot_default_font__.m
deleted file mode 100644
--- a/scripts/plot/__gnuplot_default_font__.m
+++ /dev/null
@@ -1,86 +0,0 @@
-## Copyright (C) 2009 Ben Abbott
-## 
-## This program is free software; you can redistribute it and/or modify
-## it under the terms of the GNU General Public License as published by
-## the Free Software Foundation; either version 2 of the License, or
-## (at your option) any later version.
-## 
-## This program is distributed in the hope that it will be useful,
-## but WITHOUT ANY WARRANTY; without even the implied warranty of
-## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-## GNU General Public License for more details.
-## 
-## You should have received a copy of the GNU General Public License
-## along with Octave; see the file COPYING.  If not, see
-## <http://www.gnu.org/licenses/>.
-
-## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{fontname}, @var{fontsize}] =} __gnuplot_default_font__ (@var{h}, @var{term})
-## Undocumented internal function.
-## @end deftypefn
-
-## Author: Ben Abbott <bpabbott@bens-macbook.local>
-## Created: 2009-03-16
-
-function varargout = __gnuplot_default_font__ (h)
-
-  if (nargin == 0)
-    h = gcf ();
-  endif
-
-  plot_stream = get (h, "__plot_stream__");
-
-  term = __gnuplot_get_var__ (h, "GPVAL_TERM");
-  term_options = __gnuplot_get_var__ (h, "GPVAL_TERMOPTIONS");
-  words = regexp (term_options, '(\b[^\s]+\b|"[^"]+"|''[^'']+'')', "matches");
-
-  n = find (strcmp (words, "fname") | strcmp (words, "font"), 1);
-  if (! isempty (n))
-    font_name = words{n+1};
-    if (font_name(1)=="\"" || font_name(1)=="'")
-      font_name = font_name(2:(end-1));
-    endif
-     m = find (strcmp (words, "fontsize") | strcmp (words, "fsize"), 1);
-    if (! isempty (m))
-      font_size = sscanf (words{m+1}, "%d");
-    elseif (! isempty (strfind (font_name, ",")))
-      k = strfind (font_name, ",")(1);
-      font_size = sscanf (font_name((k+1):end), "%d");
-      font_name = font_name(1:(k-1));
-    else
-      font_size = 12;
-    endif
-  elseif (numel (words) > 1 && (words{end-1}(1)=="\"" || words{end-1}(1)=="'"))
-    font_name = words{end-1}(2:(end-1));
-    font_size = sscanf (words{end}, "%d");
-  elseif (strcmp (term, {"epslatex"}))
-    font_name = "*";
-    font_size = sscanf (words{end}, "%d");
-  else
-    font_name = "*";
-    font_size = 12;
-  endif
-  varargout = {font_name, font_size, words};
-
-endfunction
-
-%!demo
-%! figure(1)
-%! drawnow
-%! terms = {"aqua", "corel", "dxf", "emf", "epslatex", "fig", "gif", ...
-%!          "hpgl", "jpeg", "mf", "pbm", "pdf", "png", "postscript", ...
-%!          "pslatex", "pstex", "svg", "tex", "wxt", "x11"};
-%! plot_stream = get (gcf, "__plot_stream__");
-%! orig_term = __gnuplot_get_var__ (gcf, "GPVAL_TERM");
-%! unwind_protect
-%!   for n = 1:numel(terms)
-%!     status = fprintf (plot_stream(1), "\nset term %s;\n", terms{n});
-%!     fflush (plot_stream(1));
-%!     [fname, fsize, term_opts] = __gnuplot_default_font__(gcf);
-%!     fprintf ("%10s: font name = '%s', font size = %d\n", terms{n}, fname, fsize)
-%!   endfor
-%! unwind_protect_cleanup
-%!   status = fprintf (plot_stream(1), "\nset term %s;\n", orig_term);
-%!   fflush (plot_stream(1));
-%! end_unwind_protect
-
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -31,17 +31,16 @@ function __go_draw_axes__ (h, plot_strea
     unwind_protect
       set (0, "showhiddenhandles", "on");
       axis_obj = __get__ (h);
     unwind_protect_cleanup
       set (0, "showhiddenhandles", showhiddenhandles);
     end_unwind_protect
 
     parent_figure_obj = get (axis_obj.parent);
-    term = __gnuplot_get_var__ (axis_obj.parent, "GPVAL_TERM");
 
     ## Set to false for plotyy axes.
     if (strcmp (axis_obj.tag, "plotyy"))
       ymirror = false;
     else
       ymirror = true;
     endif
 
@@ -91,17 +90,17 @@ function __go_draw_axes__ (h, plot_strea
     fputs (plot_stream, "unset x2tics;\n");
 
     if (! isempty (axis_obj.title))
       t = get (axis_obj.title);
       if (isempty (t.string))
 	fputs (plot_stream, "unset title;\n");
       else
 	[tt, f, s] = __maybe_munge_text__ (enhanced, t, "string");
-	fontspec = create_fontspec (f, s, term);
+	fontspec = create_fontspec (f, s);
 	fprintf (plot_stream, "set title \"%s\" %s %s",
 		 undo_string_escapes (tt), fontspec,
 		 __do_enhanced_option__ (enhanced, t));
 	if (nd == 3 && __gnuplot_has_feature__ ("screen_coordinates_for_{lrtb}margin"))
 	  fprintf (plot_stream, " offset screen 0, screen %.3f;\n", pos(4)/5);
 	else
 	  fprintf (plot_stream, ";\n");
 	endif
@@ -112,17 +111,17 @@ function __go_draw_axes__ (h, plot_strea
       t = get (axis_obj.xlabel);
       angle = t.rotation;
       colorspec = get_text_colorspec (axis_obj.xcolor, mono);
       if (isempty (t.string))
 	fprintf (plot_stream, "unset xlabel;\n");
 	fprintf (plot_stream, "unset x2label;\n");
       else
 	[tt, f, s] = __maybe_munge_text__ (enhanced, t, "string");
-	fontspec = create_fontspec (f, s, term);
+	fontspec = create_fontspec (f, s);
 	if (strcmpi (axis_obj.xaxislocation, "top"))
 	  fprintf (plot_stream, "set x2label \"%s\" %s %s %s",
 		   undo_string_escapes (tt), colorspec, fontspec,
 		   __do_enhanced_option__ (enhanced, t));
 	else
 	  fprintf (plot_stream, "set xlabel \"%s\" %s %s %s",
 		   undo_string_escapes (tt), colorspec, fontspec,
 		   __do_enhanced_option__ (enhanced, t));
@@ -140,17 +139,17 @@ function __go_draw_axes__ (h, plot_strea
       t = get (axis_obj.ylabel);
       angle = t.rotation;
       colorspec = get_text_colorspec (axis_obj.ycolor, mono);
       if (isempty (t.string))
 	fprintf (plot_stream, "unset ylabel;\n");
 	fprintf (plot_stream, "unset y2label;\n");
       else
 	[tt, f, s] = __maybe_munge_text__ (enhanced, t, "string");
-	fontspec = create_fontspec (f, s, term);
+	fontspec = create_fontspec (f, s);
 	if (strcmpi (axis_obj.yaxislocation, "right"))
 	  fprintf (plot_stream, "set y2label \"%s\" %s %s %s",
 		   undo_string_escapes (tt), colorspec, fontspec,
 		   __do_enhanced_option__ (enhanced, t));
 	else
 	  fprintf (plot_stream, "set ylabel \"%s\" %s %s %s",
 		   undo_string_escapes (tt), colorspec, fontspec,
 		   __do_enhanced_option__ (enhanced, t));
@@ -167,17 +166,17 @@ function __go_draw_axes__ (h, plot_strea
     if (! isempty (axis_obj.zlabel))
       t = get (axis_obj.zlabel);
       angle = t.rotation;
       colorspec = get_text_colorspec (axis_obj.zcolor, mono);
       if (isempty (t.string))
 	fputs (plot_stream, "unset zlabel;\n");
       else
 	[tt, f, s] = __maybe_munge_text__ (enhanced, t, "string");
-	fontspec = create_fontspec (f, s, term);
+	fontspec = create_fontspec (f, s);
 	fprintf (plot_stream, "set zlabel \"%s\" %s %s %s",
 		 undo_string_escapes (tt), colorspec, fontspec,
 		 __do_enhanced_option__ (enhanced, t));
 	fprintf (plot_stream, " rotate by %f;\n", angle);
       endif
     endif
 
     if (strcmpi (axis_obj.xaxislocation, "top"))
@@ -936,17 +935,17 @@ function __go_draw_axes__ (h, plot_strea
                            obj.facealpha);
                 endif
               endif
             endif
 	  endif
 
 	case "text"
 	  [label, f, s] = __maybe_munge_text__ (enhanced, obj, "string");
-	  fontspec = create_fontspec (f, s, term);
+	  fontspec = create_fontspec (f, s);
 	  lpos = obj.position;
 	  halign = obj.horizontalalignment;
 	  angle = obj.rotation;
           units = obj.units;
 	  color = obj.color;
           if (strcmpi (units, "normalized"))
             units = "graph";
           else
@@ -1228,26 +1227,21 @@ function __go_draw_axes__ (h, plot_strea
     fflush (plot_stream);
 
   else
     print_usage ();
   endif
 
 endfunction
 
-function fontspec = create_fontspec (f, s, term)
-  if (nargin > 3 || any (strcmp (term, {"x11", "wxt"})))
-    include_size_with_anonymous_fontname = true;
+function fontspec = create_fontspec (f, s)
+  if (strcmp (f, "*"))
+    fontspec = sprintf ("font \",%d\"", s);
   else
-    include_size_with_anonymous_fontname = false;
-  endif
-  if (! strcmp (f, "*") || include_size_with_anonymous_fontname)
     fontspec = sprintf ("font \"%s,%d\"", f, s);
-  else
-    fontspec = "";
   endif
 endfunction
 
 function [style, typ, with] = do_linestyle_command (obj, idx, mono,
 						    plot_stream, errbars = "")
 
   fprintf (plot_stream, "set style line %d default;\n", idx);
   fprintf (plot_stream, "set style line %d", idx);
@@ -1433,18 +1427,17 @@ endfunction
 
 function do_tics (obj, plot_stream, ymirror, mono)
 
   obj.xticklabel = ticklabel_to_cell (obj.xticklabel);
   obj.yticklabel = ticklabel_to_cell (obj.yticklabel);
   obj.zticklabel = ticklabel_to_cell (obj.zticklabel);
 
   [fontname, fontsize] = get_fontname_and_size (obj);
-  term = __gnuplot_get_var__ (obj.parent, "GPVAL_TERM");
-  fontspec = create_fontspec (fontname, fontsize, term);
+  fontspec = create_fontspec (fontname, fontsize);
 
   ## A Gnuplot tic scale of 69 is equivalent to Octave's 0.5.
   ticklength = sprintf ("scale %4.1f", (69/0.5)*obj.ticklength(1));
 
   if (strcmpi (obj.xaxislocation, "top"))
     do_tics_1 (obj.xtickmode, obj.xtick, obj.xminortick, obj.xticklabelmode,
 	       obj.xticklabel, obj.xcolor, "x2", plot_stream, true, mono,
 	       "border", obj.tickdir, ticklength, fontname, fontspec,
diff --git a/scripts/plot/__go_draw_figure__.m b/scripts/plot/__go_draw_figure__.m
--- a/scripts/plot/__go_draw_figure__.m
+++ b/scripts/plot/__go_draw_figure__.m
@@ -48,70 +48,57 @@ function __go_draw_figure__ (h, plot_str
 	  implicit_margin = implicit_margin ./ paper_size([1, 2]);
 	unwind_protect_cleanup
 	  set (h, "paperunits", orig_paper_units);
 	end_unwind_protect
       else
 	implicit_margin = implicit_margin * [1 1];
       endif
 
-      ## Substitute the gnuplot default font for objects with fontname == "*"
-      show_hidden_handles = get (0, "showhiddenhandles");
-      default_font_name = __gnuplot_default_font__ (h);
-      term = __gnuplot_get_var__ (h, "GPVAL_TERM");
-      unwind_protect
-	set (0, "showhiddenhandles", "on");
-        h_default_font_name = findobj (h, "fontname", "*");
-        set (h_default_font_name, "fontname", default_font_name);
-
-        ## Get complete list of children.
-        kids = allchild (h);
-        nkids = length (kids);
+      ## Get complete list of children.
+      kids = allchild (h);
+      nkids = length (kids);
 
-        if (nkids > 0)
-	  fputs (plot_stream, "\nreset;\n");
-	  fputs (plot_stream, "set autoscale fix;\n");
-	  fputs (plot_stream, "set multiplot;\n");
-	  fputs (plot_stream, "set origin 0, 0\n");
-	  fputs (plot_stream, "set size 1, 1\n");
-	  for i = 1:nkids
-	    type = get (kids(i), "type");
-	    switch (type)
-	      case "axes"
-	        ## Rely upon listener to convert axes position to "normalized" units.
-	        orig_axes_units = get (kids(i), "units");
-  	        orig_axes_position = get (kids(i), "position");
-	        unwind_protect
-		  set (kids(i), "units", "normalized");
-		  if (output_to_paper)
-	 	    axes_position_on_page = orig_axes_position .* paper_position([3, 4, 3 ,4]);
-		    axes_position_on_page(1:2) = axes_position_on_page(1:2) +  paper_position(1:2);
-		    set (kids(i), "position", axes_position_on_page);
-		    __go_draw_axes__ (kids(i), plot_stream, enhanced, mono, implicit_margin);
-		  else
-		    ## Return axes "units" and "position" back to their original values.
-		    __go_draw_axes__ (kids(i), plot_stream, enhanced, mono, implicit_margin);
-		  endif
-	        unwind_protect_cleanup
-		  set (kids(i), "units", orig_axes_units);
-		  set (kids(i), "position", orig_axes_position);
-	        end_unwind_protect
-	      otherwise
-	        error ("__go_draw_figure__: unknown object class, %s", type);
-	    endswitch
-	  endfor
-	  fputs (plot_stream, "unset multiplot;\n");
-        else
-	  fputs (plot_stream, "\nreset; clear;\n");
-	  fflush (plot_stream);
-        endif
-      unwind_protect_cleanup
-	set (h_default_font_name, "fontname", "*");
-	set (0, "showhiddenhandles", show_hidden_handles);
-      end_unwind_protect
+      if (nkids > 0)
+	fputs (plot_stream, "\nreset;\n");
+	fputs (plot_stream, "set autoscale fix;\n");
+	fputs (plot_stream, "set multiplot;\n");
+	fputs (plot_stream, "set origin 0, 0\n");
+	fputs (plot_stream, "set size 1, 1\n");
+	for i = 1:nkids
+	  type = get (kids(i), "type");
+	  switch (type)
+	    case "axes"
+	      ## Rely upon listener to convert axes position to "normalized" units.
+	      orig_axes_units = get (kids(i), "units");
+	      orig_axes_position = get (kids(i), "position");
+	      unwind_protect
+		set (kids(i), "units", "normalized");
+		if (output_to_paper)
+		  axes_position_on_page = orig_axes_position .* paper_position([3, 4, 3 ,4]);
+		  axes_position_on_page(1:2) = axes_position_on_page(1:2) +  paper_position(1:2);
+		  set (kids(i), "position", axes_position_on_page);
+		  __go_draw_axes__ (kids(i), plot_stream, enhanced, mono, implicit_margin);
+		else
+		  ## Return axes "units" and "position" back to their original values.
+		  __go_draw_axes__ (kids(i), plot_stream, enhanced, mono, implicit_margin);
+		endif
+		unwind_protect_cleanup
+		set (kids(i), "units", orig_axes_units);
+		set (kids(i), "position", orig_axes_position);
+	      end_unwind_protect
+	    otherwise
+	      error ("__go_draw_figure__: unknown object class, %s", type);
+	  endswitch
+	endfor
+	fputs (plot_stream, "unset multiplot;\n");
+      else
+	fputs (plot_stream, "\nreset; clear;\n");
+	fflush (plot_stream);
+      endif
     else
       error ("__go_draw_figure__: expecting figure object, found `%s'",
 	     htype);
     endif
   else
     print_usage ();
   endif    
 
