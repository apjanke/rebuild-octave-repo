# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1241723659 14400
#      Thu May 07 15:14:19 2009 -0400
# Node ID 1e5c11890f851d64e452791ac2af9ac46f127e7c
# Parent  9861b3ec72a6ccef96da1c7e65a57b6298766c5a
check for invalid property names when setting defaults

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,25 @@
+2009-05-07  John W. Eaton  <jwe@octave.org>
+
+	* genprops.awk (emit_declarations): Emit decls for static
+	has_property functions.
+	(emit_source): Add class name argument to base_properties::set
+	function.  Pass class name to set_dynamic and
+	base_properties::set.  Emit definitions for has_property
+	functions.
+	* graphics.h.in, graphics.cc
+	(base_properties::set, base_properties::set_dynamic):
+	New argument CNAME.
+	(base_properties::all_dynamic_properties): New static data member.
+	(base_properties::has_dynamic_property): New static function.
+	(base_graphics_object::set): Pass class name to
+	base_properties::set function.
+	(property_list::set): Check for invalid property names.
+
 2009-05-06  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-re-mat.cc (Fdouble): Fix order of branches.
 
 2009-05-05  John Swensen  <jpswensen@comcast.net>
 
 	* debug.h, debug.cc (breakpoints): Rename from bp_map, use a
 	std::set instead of a std::map object.  Change all uses.
diff --git a/src/genprops.awk b/src/genprops.awk
--- a/src/genprops.awk
+++ b/src/genprops.awk
@@ -252,16 +252,22 @@ function emit_common_declarations ()
   printf ("private:\n  static std::string go_name;\n\n");
 }
 
 function emit_declarations ()
 {
   if (class_name && ! base)
     emit_common_declarations();
 
+  printf ("public:\n\n");
+  if (base)
+    printf ("\n  static bool has_property (const std::string& pname, const std::string& cname);\n\n");
+  else
+    printf ("\n  static bool has_property (const std::string& pname);\n\n");
+
   if (idx > 0)
     print (base ? "protected:\n" : "private:\n");
 
   for (i = 1; i <= idx; i++)
     printf ("  %s%s %s;\n", mutable[i] ? "mutable " : "", type[i], name[i]);
 
   if (idx > 0)
     print "\npublic:\n";
@@ -417,17 +423,17 @@ function emit_source ()
       }
     }
 
     printf ("  init ();\n}\n\n") >> filename;
 
     ## set method
 
     if (base)
-      printf ("void\nbase_properties::set (const caseless_str& pname, const octave_value& val)\n{\n") >> filename;
+      printf ("void\nbase_properties::set (const caseless_str& pname, const std::string& cname, const octave_value& val)\n{\n") >> filename;
     else
       printf ("void\n%s::properties::set (const caseless_str& pname, const octave_value& val)\n{\n",
               class_name) >> filename;
 
     first = 1;
 
     for (i = 1; i <= idx; i++)
     {
@@ -435,19 +441,19 @@ function emit_source ()
       {
         printf ("  %sif (pname.compare (\"%s\"))\n    set_%s (val);\n",
                 (first == 0 ? "else " : ""), name[i], name[i]) >> filename;
         first = 0;
       }
     }
 
     if (base)
-      printf ("  else\n    set_dynamic (pname, val);\n}\n\n") >> filename;
+      printf ("  else\n    set_dynamic (pname, cname, val);\n}\n\n") >> filename;
     else
-      printf ("  else\n    base_properties::set (pname, val);\n}\n\n") >> filename;
+      printf ("  else\n    base_properties::set (pname, \"%s\", val);\n}\n\n", class_name) >> filename;
 
     ## get "all" method
 
     if (base)
     {
       printf ("octave_value\nbase_properties::get (bool all) const\n{\n") >> filename;
       printf ("  Octave_map m = get_dynamic (all).map_value ();\n\n") >> filename;
     }
@@ -554,16 +560,29 @@ function emit_source ()
 
     printf ("\n  return m;\n}\n\n") >> filename;
 
     ## go_name static field
 
     if (! base)
       printf ("std::string %s::properties::go_name (\"%s\");\n\n",
               class_name, object_name) >> filename;
+
+    if (base)
+      printf ("bool base_properties::has_property (const std::string& pname, const std::string& cname") >> filename;
+    else
+    printf ("bool %s::properties::has_property (const std::string& pname", class_name) >> filename;
+    printf (")\n{\n  static std::set<std::string> all_properties;\n\n  static bool initialized = false;\n\n  if (! initialized)\n    {\n") >> filename;
+    for (i = 1; i <= idx; i++)
+      printf ("      all_properties.insert (\"%s\");\n", name[i]) >> filename;
+    printf ("\n      initialized = true;\n    }\n\n") >> filename;
+    if (base)
+	printf ("  return all_properties.find (pname) != all_properties.end () || has_dynamic_property (pname, cname);\n}\n\n") >> filename;
+    else
+      printf ("  return all_properties.find (pname) != all_properties.end () || base_properties::has_property (pname, \"%s\");\n}\n\n", class_name) >> filename;
   }
 }
 
 BEGIN {
   filename = "graphics-props.cc";
   printf ("// DO NOT EDIT!  Generated automatically by genprops.awk.\n\n");
   printf ("// DO NOT EDIT!  Generated automatically by genprops.awk.\n\n") > filename;
   pcount = 0;
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -1165,39 +1165,62 @@ property_list::set (const caseless_str& 
 	{
 	  // FIXME -- should we validate property names and values here?
 
 	  std::string pname = name.substr (offset);
 
 	  std::transform (pfx.begin (), pfx.end (), pfx.begin (), tolower);
 	  std::transform (pname.begin (), pname.end (), pname.begin (), tolower);
 
-	  bool remove = false;
-	  if (val.is_string ())
+	  bool has_property = false;
+	  if (pfx == "axes")
+	    has_property = axes::properties::has_property (pname);
+	  else if (pfx == "line")
+	    has_property = line::properties::has_property (pname);
+	  else if (pfx == "text")
+	    has_property = text::properties::has_property (pname);
+	  else if (pfx == "image")
+	    has_property = image::properties::has_property (pname);
+	  else if (pfx == "patch")
+	    has_property = patch::properties::has_property (pname);
+	  else if (pfx == "figure")
+	    has_property = figure::properties::has_property (pname);
+	  else if (pfx == "surface")
+	    has_property = surface::properties::has_property (pname);
+	  else if (pfx == "hggroup")
+	    has_property = hggroup::properties::has_property (pname);
+
+	  if (has_property)
 	    {
-	      caseless_str tval = val.string_value ();
-
-	      remove = tval.compare ("remove");
-	    }
-
-	  pval_map_type& pval_map = plist_map[pfx];
-
-	  if (remove)
-	    {
-	      pval_map_iterator p = pval_map.find (pname);
-
-	      if (p != pval_map.end ())
-		pval_map.erase (p);
+	      bool remove = false;
+	      if (val.is_string ())
+		{
+		  caseless_str tval = val.string_value ();
+
+		  remove = tval.compare ("remove");
+		}
+
+	      pval_map_type& pval_map = plist_map[pfx];
+
+	      if (remove)
+		{
+		  pval_map_iterator p = pval_map.find (pname);
+
+		  if (p != pval_map.end ())
+		    pval_map.erase (p);
+		}
+	      else
+		pval_map[pname] = val;
 	    }
 	  else
-	    pval_map[pname] = val;
+	    error ("invalid %s property `%s'", pfx.c_str (), pname.c_str ());
 	}
     }
 
-  if (offset == 0)
+  if (! error_state && offset == 0)
     error ("invalid default property specification");
 }
 
 octave_value
 property_list::lookup (const caseless_str& name) const
 {
   octave_value retval;
 
@@ -1698,28 +1721,51 @@ base_properties::get_dynamic (bool all) 
   for (std::map<caseless_str, property, cmp_caseless_str>::const_iterator it = all_props.begin ();
        it != all_props.end (); ++it)
     if (all || ! it->second.is_hidden ())
       m.assign (it->second.get_name (), it->second.get ());
 
   return m;
 }
 
+std::map<std::string, std::set<std::string> > base_properties::all_dynamic_properties;
+
+bool
+base_properties::has_dynamic_property (const std::string& pname,
+				       const std::string& cname)
+{
+  // FIXME -- we need to maintain a static map of class names to sets
+  // of dynamic property names, then look up the set for the given
+  // cname, then see if the set contains the given pname.  Doing that
+  // implies changes to set_dynamic, I think.  Where is set_dynamic
+  // ever used?
+
+  std::set<std::string>& dynprops = all_dynamic_properties[cname];
+
+  return dynprops.find (pname) != dynprops.end ();
+}
+
 void
-base_properties::set_dynamic (const caseless_str& name, const octave_value& val)
-{
-  std::map<caseless_str, property, cmp_caseless_str>::iterator it = all_props.find (name);
+base_properties::set_dynamic (const caseless_str& pname,
+			      const std::string& cname,
+			      const octave_value& val)
+{
+  std::map<caseless_str, property, cmp_caseless_str>::iterator it = all_props.find (pname);
 
   if (it != all_props.end ())
     it->second.set (val);
   else
-    error ("set: unknown property \"%s\"", name.c_str ());
+    error ("set: unknown property \"%s\"", pname.c_str ());
 
   if (! error_state)
-    mark_modified ();
+    {
+      all_dynamic_properties[cname].insert (pname);
+
+      mark_modified ();
+    }
 }
 
 property
 base_properties::get_property_dynamic (const caseless_str& name)
 {
   std::map<caseless_str, property, cmp_caseless_str>::const_iterator it = all_props.find (name);
 
   if (it == all_props.end ())
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -1637,25 +1637,26 @@ public:
 
   void insert_property (const std::string& name, property p)
     {
       p.set_name (name);
       p.set_parent (__myhandle__);
       all_props[name] = p;
     }
 
-  virtual void set (const caseless_str&, const octave_value&);
-
-  virtual octave_value get (const caseless_str&) const;
+  virtual void set (const caseless_str& pname, const std::string& cname,
+		    const octave_value& val);
+
+  virtual octave_value get (const caseless_str& pname) const;
 
   virtual octave_value get (bool all = false) const;
 
-  virtual property get_property (const caseless_str&);
-
-  bool has_property (const caseless_str&);
+  virtual property get_property (const caseless_str& pname);
+
+  bool has_property (const caseless_str& pname);
 
   bool is_modified (void) const { return is___modified__ (); }
  
   virtual void remove_child (const graphics_handle& h);
 
   virtual void adopt (const graphics_handle& h)
   {
     octave_idx_type n = children.numel ();
@@ -1718,25 +1719,31 @@ public:
   virtual bool is_zliminclude (void) const { return false; }
   virtual bool is_climinclude (void) const { return false; }
   virtual bool is_aliminclude (void) const { return false; }
 
   bool is_handle_visible (void) const
   {
     return ! handlevisibility.is ("off");
   }
+
+  static std::map<std::string, std::set<std::string> > all_dynamic_properties;
  
+  static bool has_dynamic_property (const std::string& pname,
+				    const std::string& cname);
+
 protected:
-  void set_dynamic (const caseless_str&, const octave_value&);
-
-  octave_value get_dynamic (const caseless_str&) const;
+  void set_dynamic (const caseless_str& pname, const std::string& cname,
+		    const octave_value& val);
+
+  octave_value get_dynamic (const caseless_str& pname) const;
 
   octave_value get_dynamic (bool all = false) const;
 
-  property get_property_dynamic (const caseless_str&);
+  property get_property_dynamic (const caseless_str& pname);
 
   BEGIN_BASE_PROPERTIES
     // properties common to all objects
     bool_property beingdeleted , "off"
     radio_property busyaction , "{queue}|cancel"
     callback_property buttondownfcn , Matrix ()
     // FIXME -- use a property class for children.
     Matrix children Gfs , Matrix ()
@@ -1816,17 +1823,17 @@ public:
       get_properties ().set_from_list (*this, plist);
     else
       error ("base_graphics_object::set_from_list: invalid graphics object");
   }
 
   virtual void set (const caseless_str& pname, const octave_value& pval)
   {
     if (valid_object ())
-      get_properties ().set (pname, pval);
+      get_properties ().set (pname, type (), pval);
     else
       error ("base_graphics_object::set: invalid graphics object");
   }
 
   virtual void set_defaults (const std::string&)
   {
     error ("base_graphics_object::set_defaults: invalid graphics object");
   }
