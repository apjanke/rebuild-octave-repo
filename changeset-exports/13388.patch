# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1302376314 -7200
#      Sat Apr 09 21:11:54 2011 +0200
# Node ID f31614496d866ac13fde44bf12aca58f609003c7
# Parent  cd47f7e16ee8e20c0129ed216d28e83784b09ee1
Removed color schemes.

diff --git a/gui//src/OctaveLink.cpp b/gui//src/OctaveLink.cpp
--- a/gui//src/OctaveLink.cpp
+++ b/gui//src/OctaveLink.cpp
@@ -80,17 +80,16 @@ 02110-1301, USA.
 #include <readline/readline.h>
 
 #include "OctaveLink.h"
 
 #include <QFileInfo>
 
 OctaveLink oct_octave_server;
 
-
 static octave_user_code *
 get_user_code (const std::string& fname = std::string ())
 {
   octave_user_code *dbg_fcn = 0;
 
   if (fname.empty ())
     dbg_fcn = octave_call_stack::caller_user_code ();
   else
diff --git a/gui//src/QTerminalWidget.cpp b/gui//src/QTerminalWidget.cpp
--- a/gui//src/QTerminalWidget.cpp
+++ b/gui//src/QTerminalWidget.cpp
@@ -27,18 +27,20 @@ struct TermWidgetImpl
     TerminalDisplay *m_terminalDisplay;
     Session *m_session;
     Session* createSession();
     TerminalDisplay* createTerminalDisplay(Session *session, QWidget* parent);
 };
 
 TermWidgetImpl::TermWidgetImpl(QWidget* parent)
 {
-    this->m_session = createSession();
-    this->m_terminalDisplay = createTerminalDisplay(this->m_session, parent);
+    m_session = createSession();
+    m_terminalDisplay = createTerminalDisplay(this->m_session, parent);
+    m_terminalDisplay->setBackgroundColor(QColor(255, 255, 255));
+    m_terminalDisplay->setForegroundColor(QColor(0, 0, 0));
 }
 
 Session *TermWidgetImpl::createSession()
 {
     Session *session = new Session();
     session->setTitle(Session::NameRole, "QTerminalWidget");
     session->setProgram("/bin/bash");
     session->setArguments(QStringList());
@@ -139,32 +141,16 @@ void QTerminalWidget::setArgs(QStringLis
 
 void QTerminalWidget::setTextCodec(QTextCodec *codec)
 {
     if (!m_impl->m_session)
 	return;
     m_impl->m_session->setCodec(codec);	
 }
 
-void QTerminalWidget::setColorScheme(ColorScheme scheme)
-{
-    /*
-    switch(scheme) {
-        case WhiteOnBlack:
-		m_impl->m_terminalDisplay->setColorTable(whiteonblack_color_table);
-		break;		
-        case GreenOnBlack:
-		m_impl->m_terminalDisplay->setColorTable(greenonblack_color_table);
-		break;
-        case BlackOnLightYellow:
-		m_impl->m_terminalDisplay->setColorTable(blackonlightyellow_color_table);
-		break;
-    };*/
-}
-
 void QTerminalWidget::setSize(int h, int v)
 {
     if (!m_impl->m_terminalDisplay)
 	return;
     m_impl->m_terminalDisplay->setSize(h, v);
 }
 
 void QTerminalWidget::setHistorySize(int lines)
diff --git a/gui//src/QTerminalWidget.h b/gui//src/QTerminalWidget.h
--- a/gui//src/QTerminalWidget.h
+++ b/gui//src/QTerminalWidget.h
@@ -63,19 +63,16 @@ public:
     /**	Shell program, default is /bin/bash. */
     void setShellProgram(QString progname);
     
     /** Shell program args, default is none. */
     void setArgs(QStringList &args);
     
     /** Text codec, default is UTF-8. */
     void setTextCodec(QTextCodec *codec);
-
-    /** Color scheme, default is white on black. */
-    void setColorScheme(ColorScheme scheme);
     
     /** Resize terminal widget. */
     void setSize(int h, int v);
     
     /** History size for scrolling, values below zero mean infinite. */
     void setHistorySize(int lines);
 
     /** Presence of scrollbar. By default, there is no scrollbar present. */
diff --git a/gui//src/TerminalMdiSubWindow.cpp b/gui//src/TerminalMdiSubWindow.cpp
--- a/gui//src/TerminalMdiSubWindow.cpp
+++ b/gui//src/TerminalMdiSubWindow.cpp
@@ -64,17 +64,16 @@ void TerminalMdiSubWindow::constructWind
     QVBoxLayout *vBoxLayout = new QVBoxLayout();
 
         QWidget *hWidget = new QWidget();
         QHBoxLayout *hBoxLayout = new QHBoxLayout();
 
         m_terminalWidget = new QTerminalWidget(0, hWidget);
         m_terminalWidget->setScrollBarPosition(QTerminalWidget::ScrollBarRight);
         m_terminalWidget->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
-        m_terminalWidget->setColorScheme(QTerminalWidget::BlackOnLightYellow);
 
             QWidget *hvWidget = new QWidget();
             QVBoxLayout *hvBoxLayout = new QVBoxLayout();
             m_variableView = new QTreeView(hWidget);
             m_commandHistoryView = new QListView(hWidget);
             m_commandHistoryView->setModel(new QStringListModel());
             hvWidget->setMaximumWidth(300);
             hvBoxLayout->addWidget(new QLabel("Variables", hWidget));
