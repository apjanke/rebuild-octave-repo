# HG changeset patch
# User jwe
# Date 1191422328 0
#      Wed Oct 03 14:38:48 2007 +0000
# Node ID 10c7a803b4093b3db1344455309561f1ea855a01
# Parent  6bbf56a9718a708b262ca057b601b88c9c9d47a7
[project @ 2007-10-03 14:38:48 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2007-10-03  John W. Eaton  <jwe@octave.org>
+
+	* oct-map.cc (Octave_map::Octave_map (const dim_vector&, 
+	const string_vector&)): Delete.
+	(Octave_map::Octave_map (const dim_vector&, const Cell&)):
+	New function.
+	* ov-struct.cc (Fstruct): Allow creation of empty struct arrays
+	with field names.
+
 2007-10-01  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* graphics.cc ((color_property::color_property (const
 	octave_value& val)): Undo change from 2007-09-26
 	(patch::properties::properties): use the "a" modifier to
 	face_color & edge_color properties
 	(patch::properties::set): Undo change from 2007-09-26
 	* graphics.h.in	(color_property::color_property
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -26,28 +26,32 @@ 02110-1301, USA.
 #endif
 
 #include "error.h"
 #include "str-vec.h"
 
 #include "oct-map.h"
 #include "utils.h"
 
-Octave_map::Octave_map (const dim_vector& dv,
-			const string_vector& key_list_arg)
+Octave_map::Octave_map (const dim_vector& dv, const Cell& keys)
   : map (), key_list (), dimensions (dv)
 {
   Cell c (dv);
 
-  for (octave_idx_type i = 0; i < key_list_arg.length (); i++)
+  if (keys.is_cellstr ())
     {
-      std::string k = key_list_arg[i];
-      map[k] = c;
-      key_list.push_back (k);
+      for (octave_idx_type i = 0; i < keys.numel (); i++)
+	{
+	  std::string k = keys(i).string_value ();
+	  map[k] = c;
+	  key_list.push_back (k);
+	}
     }
+  else
+    error ("Octave_map: expecting keys to be cellstr");
 }
 
 Cell&
 Octave_map::contents (const std::string& k)
 {
   maybe_add_to_key_list (k);
 
   return map[k];
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -42,17 +42,17 @@ Octave_map
   typedef std::map<std::string, Cell>::const_iterator const_iterator;
 
   typedef std::list<std::string>::iterator key_list_iterator;
   typedef std::list<std::string>::const_iterator const_key_list_iterator;
 
   // Warning!  You should always use at least two dimensions.
 
   Octave_map (const dim_vector& dv = dim_vector (0, 0),
-	      const string_vector& key_list_arg = string_vector ());
+	      const Cell& keys = Cell ());
 
   Octave_map (const std::string& k, const octave_value& value)
     : map (), key_list (), dimensions (1, 1)
   {
     map[k] = value;
     key_list.push_back (k);
   }
 
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -555,30 +555,45 @@ Create a structure and initialize its va
 \n\
 If the values are cell arrays, create a structure array and initialize\n\
 its values.  The dimensions of each cell array of values must match.\n\
 Singleton cells and non-cell values are repeated so that they fill\n\
 the entire array.  If the cells are empty, create an empty structure\n\
 array with the specified field names.\n\
 @end deftypefn")
 {
-  octave_value_list retval;
+  octave_value retval;
 
   int nargin = args.length ();
 
   // struct ([]) returns an empty struct.
 
   // struct (empty_matrix) returns an empty struct with the same
   // dimensions as the empty matrix.
 
   // Note that struct () creates a 1x1 struct with no fields for
   // compatibility with Matlab.
 
-  if (nargin == 1 && args(0).is_empty () && args(0).is_real_matrix ())
-    return octave_value (Octave_map (args(0).dims ()));
+  if ((nargin == 1 || nargin == 2)
+      && args(0).is_empty () && args(0).is_real_matrix ())
+    {
+      Cell fields;
+
+      if (nargin == 2)
+	{
+	  if (args(1).is_cellstr ())
+	    retval = Octave_map (args(0).dims (), args(1).cell_value ());
+	  else
+	    error ("struct: expecting cell array of field names as second argument");
+	}
+      else
+	retval = Octave_map (args(0).dims ());
+
+      return retval;
+    }
     
   // Check for "field", VALUE pairs.
 
   for (int i = 0; i < nargin; i += 2) 
     {
       if (! args(i).is_string () || i + 1 >= nargin)
 	{
 	  error ("struct expects alternating \"field\", VALUE pairs");
@@ -653,17 +668,17 @@ array with the specified field names.\n\
 	    map.assign (key, c);
 	}
       else 
 	map.assign (key, Cell (dims, args(i+1)));
 
       if (error_state)
 	return retval;
     }
-  
+
   return octave_value (map);
 }
 
 DEFUN (isstruct, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isstruct (@var{expr})\n\
 Return 1 if the value of the expression @var{expr} is a structure.\n\
 @end deftypefn")
