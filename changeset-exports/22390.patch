# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1472163500 14400
#      Thu Aug 25 18:18:20 2016 -0400
# Node ID 6cbbd550aa919df26631dc5dec91d2e2c00c6ec7
# Parent  663e30242c4b0f83f0df4dd262292aa76922956c
allow subsasgn (x, idx, zeros(0,0)) to remove elements (bug #48867)

* ov.cc: If RHS argument is a double 0x0 object, convert it to an
octave_null_matrix object in call to octave_value::subsasgn.
New test.

diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -3157,20 +3157,25 @@ If @var{idx} is an empty structure array
   if (type.empty ())
     {
       // Regularize a null matrix if stored into a variable.
       return ovl (args(2).storable_value ());
     }
   else
     {
       octave_value arg0 = args(0);
+      octave_value arg2 = args(2);
 
       arg0.make_unique ();
 
-      return ovl (arg0.subsasgn (type, idx, args(2)));
+      bool arg2_null = arg2.is_zero_by_zero () && arg2.is_double_type ();
+
+      return ovl (arg0.subsasgn (type, idx, (arg2_null
+                                             ? octave_null_matrix::instance
+                                             : arg2)));
     }
 }
 
 /*
 %!test
 %! a = reshape ([1:25], 5,5);
 %! idx1 = substruct ("()", {3, 3});
 %! idx2 = substruct ("()", {2:2:5, 2:2:5});
@@ -3187,16 +3192,20 @@ If @var{idx} is an empty structure array
 %! b = [0    6   11   16    0
 %!      0    0   12    0    0
 %!      0    8    0   18    0
 %!      0    0   14    0    0
 %!      0   10   15   20    0];
 %! assert (a, b);
 
 %!test
+%! x = 1:10;
+%! assert (subsasgn (x, substruct ("()", {1}), zeros (0, 0)), 2:10);
+
+%!test
 %! c = num2cell (reshape ([1:25],5,5));
 %! idx1 = substruct  ("{}", {3, 3});
 %! idx2 = substruct  ("()", {2:2:5, 2:2:5});
 %! idx3 = substruct  ("()", {":", [1,5]});
 %! idx2p = substruct ("{}", {2:2:5, 2:2:5});
 %! idx3p = substruct ("{}", {":", [1,5]});
 %! idx4 = struct ("type", {}, "subs", {});
 %! assert ({ subsref(c, idx1) }, {13});
