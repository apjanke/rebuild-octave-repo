# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1244348737 25200
#      Sat Jun 06 21:25:37 2009 -0700
# Node ID f2bf62f6228692a98b52bd0c455d7d7d9a836355
# Parent  c2923c27c8771fb4cbf063427b217567fb3e200f
Update documentation for NA and isna functions

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-06-06  Rik  <rdrider0-list@yahoo.com>
+
+	* load-save.cc: Update documentation for NA and isna functions
+
 2009-06-06  Rik  <rdrider0-list@yahoo.com>
 
 	* load-save.cc: Update documentation for load and save
 
 2009-06-06  Rik  <rdrider0-list@yahoo.com>
 
 	* pr-output.cc: Update documentation for 'format'
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -3702,16 +3702,17 @@ Inf   Inf\n\
 \n\
 When called with no arguments, return a scalar with the value @samp{Inf}.\n\
 When called with a single argument, return a square matrix with the dimension\n\
 specified.  When called with more than one scalar argument the first two\n\
 arguments are taken as the number of rows and columns and any further\n\
 arguments specify additional matrix dimensions.\n\
 The optional argument @var{class} specifies the return type and may be\n\
 either \"double\" or \"single\".\n\
+@seealso{isinf}\n\
 @end deftypefn")
 {
   return fill_matrix (args, lo_ieee_inf_value (), 
 		      lo_ieee_float_inf_value (), "Inf");
 }
 
 DEFALIAS (inf, Inf);
 
@@ -4080,22 +4081,35 @@ either \"double\" or \"single\".\n\
 }
 
 DEFALIAS (i, I);
 DEFALIAS (J, I);
 DEFALIAS (j, I);
 
 DEFUN (NA, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} NA (@var{x})\n\
+@deftypefn  {Built-in Function} {} NA\n\
+@deftypefnx {Built-in Function} {} NA (@var{n})\n\
 @deftypefnx {Built-in Function} {} NA (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} NA (@var{n}, @var{m}, @var{k}, @dots{})\n\
 @deftypefnx {Built-in Function} {} NA (@dots{}, @var{class})\n\
-Return a matrix or N-dimensional array whose elements are all equal\n\
+Return a scalar, matrix, or N-dimensional array whose elements are all equal\n\
 to the special constant used to designate missing values.\n\
+\n\
+Note that NA always compares not equal to NA (NA != NA).\n\
+To find NA values, use the @code{isna} function.\n\
+\n\
+When called with no arguments, return a scalar with the value @samp{NA}.\n\
+When called with a single argument, return a square matrix with the dimension\n\
+specified.  When called with more than one scalar argument the first two\n\
+arguments are taken as the number of rows and columns and any further\n\
+arguments specify additional matrix dimensions.\n\
+The optional argument @var{class} specifies the return type and may be\n\
+either \"double\" or \"single\".\n\
+@seealso{isna}\n\
 @end deftypefn")
 {
   return fill_matrix (args, lo_ieee_na_value (), 
 		      lo_ieee_float_na_value (), "NA");
 }
 
 /*
 
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -1018,16 +1018,17 @@ Return 1 for elements of @var{x} that ar
 otherwise.  For example,\n\
 \n\
 @example\n\
 @group\n\
 isna ([13, Inf, NA, NaN])\n\
      @result{} [ 0, 0, 1, 0 ]\n\
 @end group\n\
 @end example\n\
+@seealso{isnan}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).isna ();
   else
     print_usage ();
 
@@ -1057,16 +1058,17 @@ Return 1 for elements of @var{x} that ar
 otherwise.  NA values are also considered NaN values.  For example,\n\
 \n\
 @example\n\
 @group\n\
 isnan ([13, Inf, NA, NaN])\n\
      @result{} [ 0, 0, 1, 1 ]\n\
 @end group\n\
 @end example\n\
+@seealso{isna}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).isnan ();
   else
     print_usage ();
 
