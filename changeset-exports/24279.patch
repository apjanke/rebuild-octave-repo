# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1511103079 18000
#      Sun Nov 19 09:51:19 2017 -0500
# Node ID a26a8714db26fbfd79622cdd73ff2cded89ae502
# Parent  508d27e82ad11446e26d0cf0fc560a19f8bdc7c6
delete filemarker function and corresponding internal variable

This variable stored the character used to separate function,
subfunction, and nested function names.  I see no reason to keep it.
The name 'filemarker' does not clearly indicate what this variable is
about.  Changing the value from the default '>' would
likely create a great deal of confusion, so I doubt that it was ever
set to anything different.  We don't have a similar way to change the
'@' or '+' characters used to prefix class or package names.  So
rather than deprecate, I'm simply removing it.

* input.h, input.cc (Vfilemarker, Ffilemarker): Delete internal
variable and function.  Change all uses of Vfilemarker to be '>'
instead.

diff --git a/libinterp/corefcn/call-stack.cc b/libinterp/corefcn/call-stack.cc
--- a/libinterp/corefcn/call-stack.cc
+++ b/libinterp/corefcn/call-stack.cc
@@ -20,17 +20,16 @@ along with Octave; see the file COPYING.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include "call-stack.h"
-#include "input.h"
 #include "interpreter.h"
 #include "oct-map.h"
 #include "ov.h"
 #include "ov-fcn.h"
 #include "ov-fcn-handle.h"
 #include "ov-usr-fcn.h"
 #include "pager.h"
 
@@ -53,17 +52,17 @@ namespace octave
   {
     std::string retval;
 
     if (m_fcn)
       {
         std::string parent_fcn_name = m_fcn->parent_fcn_name ();
 
         if (print_subfn && ! parent_fcn_name.empty ())
-          retval = parent_fcn_name + Vfilemarker;
+          retval = parent_fcn_name + '>';
 
         if (m_fcn->is_anonymous_function ())
           retval += octave_fcn_handle::anonymous;
         else
           retval += m_fcn->name ();
       }
     else
       retval = "<unknown>";
diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -462,17 +462,17 @@ The @qcode{"warn"} field is set similarl
       Cell names (dim_vector (count, 1));
       Cell file  (dim_vector (count, 1));
       Cell line  (dim_vector (count, 1));
       Cell cond  (dim_vector (count, 1));
 
       for (const auto& fnm_bp_p : bp_list)
         {
           std::string filename = fnm_bp_p.first;
-          const char *sub_fun = strchr (filename.c_str (), Vfilemarker);
+          const char *sub_fun = strchr (filename.c_str (), '>');
           if (sub_fun)
             filename = filename.substr(0, sub_fun - filename.c_str ());
           octave_value path_name;
           path_name
             = octave::sys::canonicalize_file_name (help_sys.which (filename));
 
           for (const auto& bp : fnm_bp_p.second)
             {
diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -104,19 +104,16 @@ bool Vtrack_line_num = true;
 
 // If we are in debugging mode, this is the last command entered, so
 // that we can repeat the previous command if the user just types RET.
 static std::string last_debugging_command = "\n";
 
 // TRUE if we are running in the Emacs GUD mode.
 static bool Vgud_mode = false;
 
-// The filemarker used to separate filenames from subfunction names
-char Vfilemarker = '>';
-
 static hook_function_list input_event_hook_functions;
 
 // For octave_quit.
 void
 remove_input_event_hook_functions (void)
 {
   input_event_hook_functions.clear ();
 }
@@ -1321,57 +1318,8 @@ Undocumented internal function.
 
   if (nargin == 0)
     retval = ovl (Vgud_mode);
   else
     Vgud_mode = args(0).bool_value ();
 
   return retval;
 }
-
-DEFUN (filemarker, args, nargout,
-       doc: /* -*- texinfo -*-
-@deftypefn  {} {@var{val} =} filemarker ()
-@deftypefnx {} {@var{old_val} =} filemarker (@var{new_val})
-@deftypefnx {} {} filemarker (@var{new_val}, "local")
-Query or set the character used to separate the filename from the
-subfunction names contained within the file.
-
-By default this is the character @samp{>}.
-This can be used in a generic manner to interact with subfunctions.
-For example,
-
-@example
-help (["myfunc", filemarker, "mysubfunc"])
-@end example
-
-@noindent
-returns the help string associated with the subfunction @code{mysubfunc}
-located in the file @file{myfunc.m}.
-
-@code{filemarker} is also useful during debugging for placing breakpoints
-within subfunctions or nested functions.
-For example,
-
-@example
-dbstop (["myfunc", filemarker, "mysubfunc"])
-@end example
-
-@noindent
-will set a breakpoint at the first line of the subfunction @code{mysubfunc}.
-
-When called from inside a function with the @qcode{"local"} option, the
-variable is changed locally for the function and any subroutines it calls.
-The original variable value is restored when exiting the function.
-@end deftypefn */)
-{
-  char tmp = Vfilemarker;
-  octave_value retval = SET_INTERNAL_VARIABLE (filemarker);
-
-  // The character passed must not be a legal character for a function name
-  if (::isalnum (Vfilemarker) || Vfilemarker == '_')
-    {
-      Vfilemarker = tmp;
-      error ("filemarker: character can not be a valid character for a function name");
-    }
-
-  return retval;
-}
diff --git a/libinterp/corefcn/input.h b/libinterp/corefcn/input.h
--- a/libinterp/corefcn/input.h
+++ b/libinterp/corefcn/input.h
@@ -65,18 +65,16 @@ extern bool octave_yes_or_no (const std:
 
 extern octave_value do_keyboard (const octave_value_list& args
                                  = octave_value_list ());
 
 extern void remove_input_event_hook_functions (void);
 
 extern void set_default_prompts (void);
 
-extern char Vfilemarker;
-
 extern octave::sys::time Vlast_prompt_time;
 
 namespace octave
 {
   class
   base_reader
   {
   public:
diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -31,17 +31,16 @@ along with Octave; see the file COPYING.
 #include "file-stat.h"
 #include "oct-env.h"
 #include "oct-time.h"
 
 #include "bp-table.h"
 #include "defun.h"
 #include "dirfns.h"
 #include "fcn-info.h"
-#include "input.h"
 #include "interpreter-private.h"
 #include "interpreter.h"
 #include "load-path.h"
 #include "ov-classdef.h"
 #include "ov-fcn.h"
 #include "ov-usr-fcn.h"
 #include "pager.h"
 #include "parse.h"
@@ -431,17 +430,17 @@ namespace octave
         size_t pos = name.find_last_of (sys::file_ops::dir_sep_str ());
         if (pos != std::string::npos)
           method = name.substr (pos + 1);
 
         retval = find_method (method, dispatch_type);
       }
     else
       {
-        size_t pos = name.find_first_of (Vfilemarker);
+        size_t pos = name.find_first_of ('>');
 
         if (pos == std::string::npos)
           retval = find (name, args, true, local_funcs);
         else
           {
             std::string fcn_scope = name.substr (0, pos);
             symbol_scope *stored_scope = m_current_scope;
             m_current_scope = m_top_scope;
@@ -472,17 +471,17 @@ namespace octave
   octave_value
   symbol_table::find_submethod (const std::string& name,
                                 const std::string& dispatch_type)
   {
     octave_value fcn;
 
     std::string full_name = '@' + dispatch_type +
       sys::file_ops::dir_sep_str () + name;
-    size_t pos = full_name.find_first_of (Vfilemarker);
+    size_t pos = full_name.find_first_of ('>');
 
     if (pos != std::string::npos)
       {
         std::string fcn_scope = full_name.substr (0, pos);
         symbol_scope *stored_scope = m_current_scope;
         m_current_scope = m_top_scope;
         octave_value parent = find_function (full_name.substr (0, pos),
                                              octave_value_list (), false);
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -48,17 +48,16 @@ along with Octave; see the file COPYING.
 #include "vasprintf-wrapper.h"
 
 #include "Cell.h"
 #include "defaults.h"
 #include "defun.h"
 #include "dirfns.h"
 #include "error.h"
 #include "errwarn.h"
-#include "input.h"
 #include "interpreter-private.h"
 #include "interpreter.h"
 #include "lex.h"
 #include "load-path.h"
 #include "oct-errno.h"
 #include "oct-hist.h"
 #include "ovl.h"
 #include "ov-range.h"
@@ -497,17 +496,17 @@ fcn_file_in_path (const std::string& nam
         {
           octave::load_path& lp = octave::__get_load_path__ ("fcn_file_in_path");
 
           retval = lp.find_fcn_file (name.substr (0, len-2));
         }
       else
         {
           std::string fname = name;
-          size_t pos = name.find_first_of (Vfilemarker);
+          size_t pos = name.find_first_of ('>');
           if (pos != std::string::npos)
             fname = name.substr (0, pos);
 
           octave::load_path& lp = octave::__get_load_path__ ("fcn_file_in_path");
 
           retval = lp.find_fcn_file (fname);
         }
     }
diff --git a/libinterp/parse-tree/bp-table.cc b/libinterp/parse-tree/bp-table.cc
--- a/libinterp/parse-tree/bp-table.cc
+++ b/libinterp/parse-tree/bp-table.cc
@@ -37,17 +37,16 @@ along with Octave; see the file COPYING.
 
 #include "file-ops.h"
 #include "singleton-cleanup.h"
 
 #include "bp-table.h"
 #include "defun-int.h"
 #include "call-stack.h"
 #include "error.h"
-#include "input.h"
 #include "interpreter-private.h"
 #include "oct-map.h"
 #include "octave-link.h"
 #include "ov-usr-fcn.h"
 #include "ov.h"
 #include "ovl.h"
 #include "pager.h"
 #include "parse.h"
@@ -252,17 +251,17 @@ bp_table::do_add_breakpoint_1 (octave_us
 
       for (auto& idx_line_p : retval)
         {
           if (idx_line_p.second != 0)
             {
               // Normalize to store only the file name.
               // Otherwise, there can be an entry for both file>subfunction and
               // file, which causes a crash on dbclear all
-              const char *s = strchr (fname.c_str (), Vfilemarker);
+              const char *s = strchr (fname.c_str (), '>');
               if (s)
                 bp_set.insert (fname.substr (0, s - fname.c_str ()));
               else
                 bp_set.insert (fname);
               found = true;
               break;
             }
         }
@@ -865,17 +864,17 @@ bp_table::do_get_breakpoint_list (const 
 
                       cmds = ff->body ();
                       if (cmds)
                         {
                           std::list<bp_type> bkpts
                             = cmds->breakpoints_and_conds ();
 
                           if (! bkpts.empty ())
-                            retval[bp_fname + Vfilemarker + ff->name ()] = bkpts;
+                            retval[bp_fname + '>' + ff->name ()] = bkpts;
                         }
                     }
                 }
             }
         }
     }
 
   return retval;
