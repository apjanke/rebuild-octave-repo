# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1432865784 14400
#      Thu May 28 22:16:24 2015 -0400
# Branch stable
# Node ID abbe33bf0c74d43144b8c8f483d04e8cd73ab0e6
# Parent  3ccc2d02e64b61c6827009d42e5b12274e7ba5fc
fftshift.m, ifftshift.m: Restore support for N-dimensional arrays (bug #45207)

* fftshift.m, ifftshift.m: Improve input argument validation instead of
calling ismatrix to restore support for N-dimensional arrays. Rephrase
error messages. Add %!tests for N-dimensional inputs and %!error input
validation tests.

diff --git a/scripts/signal/fftshift.m b/scripts/signal/fftshift.m
--- a/scripts/signal/fftshift.m
+++ b/scripts/signal/fftshift.m
@@ -47,43 +47,45 @@
 ## Adapted-By: jwe
 
 function retval = fftshift (x, dim)
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
 
+  if (! (isnumeric (x) || islogical (x) || ischar (x)))
+    error ("fftshift: X must be a vector or matrix");
+  endif
+
   if (nargin == 2)
     if (! (isscalar (dim) && dim > 0 && dim == fix (dim)))
       error ("fftshift: dimension DIM must be a positive integer");
     endif
     nd = ndims (x);
     sz = size (x);
     sz2 = ceil (sz(dim) / 2);
     idx = cell ();
     idx = repmat ({':'}, nd, 1);
     idx{dim} = [sz2+1:sz(dim), 1:sz2];
     retval = x(idx{:});
   else
     if (isvector (x))
       xl = length (x);
       xx = ceil (xl/2);
       retval = x([xx+1:xl, 1:xx]);
-    elseif (ismatrix (x))
+    else
       nd = ndims (x);
       sz = size (x);
       sz2 = ceil (sz ./ 2);
       idx = cell ();
       for i = 1:nd
         idx{i} = [sz2(i)+1:sz(i), 1:sz2(i)];
       endfor
       retval = x(idx{:});
-    else
-      error ("fftshift: expecting vector or matrix argument");
     endif
   endif
 
 endfunction
 
 
 %!test
 %! x = [0:7];
@@ -125,8 +127,29 @@ endfunction
 
 %!test
 %! x = [0:3];
 %! x = [x;2*x;3*x+1;4*x+1];
 %! y = fftshift (x,2);
 %! assert (y, [[2 3 0 1];[4 6 0 2];[7 10 1 4];[9 13 1 5]]);
 %! assert (fftshift (y,2), x);
 
+%!test
+%! x = "abcdefg";
+%! y = fftshift (x);
+%! assert (y, "efgabcd");
+%! assert (fftshift (y), "bcdefga");
+
+## Test N-dimensional input (bug #45207)
+%!test
+%! x = [0:3];
+%! x = x + x' + reshape (x, [1 1 4]);
+%! y1 = [4 5 2 3; 5 6 3 4; 2 3 0 1; 3 4 1 2];
+%! y = fftshift (x);
+%! assert (y, reshape ([y1 + 2, y1 + 3, y1, y1 + 1], [4 4 4]));
+%! assert (fftshift (y), x);
+
+%% Test input validation
+%!error fftshift ()
+%!error fftshift (1, 2, 3)
+%!error fftshift (0:3, -1)
+%!error fftshift (0:3, 0:3)
+
diff --git a/scripts/signal/ifftshift.m b/scripts/signal/ifftshift.m
--- a/scripts/signal/ifftshift.m
+++ b/scripts/signal/ifftshift.m
@@ -29,48 +29,48 @@
 ## Author: Vincent Cautaerts <vincent@comf5.comm.eng.osaka-u.ac.jp>
 ## Created: July 1997
 ## Adapted-By: jwe
 ## Modified-By: Paul Kienzle, converted from fftshift
 ## Modified-By: David Bateman, add NDArray capability and option dim arg
 
 function retval = ifftshift (x, dim)
 
-  retval = 0;
-
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
 
+  if (! (isnumeric (x) || islogical (x) || ischar (x)))
+    error ("ifftshift: X must be a vector or matrix");
+  endif
+
   if (nargin == 2)
-    if (! isscalar (dim))
-      error ("ifftshift: dimension must be an integer scalar");
+    if (! (isscalar (dim) && dim > 0 && dim == fix (dim)))
+      error ("ifftshift: dimension DIM must be a positive integer");
     endif
     nd = ndims (x);
     sz = size (x);
     sz2 = floor (sz(dim) / 2);
     idx = repmat ({':'}, nd, 1);
     idx{dim} = [sz2+1:sz(dim), 1:sz2];
     retval = x(idx{:});
   else
     if (isvector (x))
       xl = length (x);
       xx = floor (xl/2);
       retval = x([xx+1:xl, 1:xx]);
-    elseif (ismatrix (x))
+    else
       nd = ndims (x);
       sz = size (x);
       sz2 = floor (sz ./ 2);
       idx = cell ();
       for i = 1:nd
         idx{i} = [sz2(i)+1:sz(i), 1:sz2(i)];
       endfor
       retval = x(idx{:});
-    else
-      error ("ifftshift: expecting vector or matrix argument");
     endif
   endif
 
 endfunction
 
 
 %!test
 %! x = [0:7];
@@ -112,8 +112,29 @@ endfunction
 
 %!test
 %! x = [0:3];
 %! x = [x;2*x;3*x+1;4*x+1];
 %! y = ifftshift (x,2);
 %! assert (y, [[2 3 0 1];[4 6 0 2];[7 10 1 4];[9 13 1 5]]);
 %! assert (ifftshift (y,2), x);
 
+%!test
+%! x = "efgabcd";
+%! y = ifftshift (x);
+%! assert (y, "abcdefg");
+%! assert (ifftshift (y), "defgabc");
+
+## Test N-dimensional input (bug #45207)
+%!test
+%! x = [0:3];
+%! x = x + x' + reshape (x, [1 1 4]);
+%! y1 = [4 5 2 3; 5 6 3 4; 2 3 0 1; 3 4 1 2];
+%! y = ifftshift (x);
+%! assert (y, reshape ([y1 + 2, y1 + 3, y1, y1 + 1], [4 4 4]));
+%! assert (ifftshift (y), x);
+
+%% Test input validation
+%!error ifftshift ()
+%!error ifftshift (1, 2, 3)
+%!error ifftshift (0:3, -1)
+%!error ifftshift (0:3, 0:3)
+
