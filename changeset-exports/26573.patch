# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1547806703 -3600
#      Fri Jan 18 11:18:23 2019 +0100
# Branch stable
# Node ID ad70a85f702b7ace1daf4a21e9a69e180de81025
# Parent  1934f2bb3cb5147c14af3f58e865b3dc65081565
Avoid accumulating data in text_renderer member variable (bug #55287)

* ft-text-renderer.cc (m_do_strlist): New data member.
  (ft_text_renderer::text_to_strlist): Reset m_strlist before rendering.
  Unwind protect the value of m_do_strlist and m_strlist. Set m_do_strlist true
  prior to calling text_to_pixels.
  (ft_text_renderer::visit (text_element_string)): Only feed the strlist when in
  MODE_RENDER and m_do_strlist is true.
  (ft_text_renderer::visit (text_element_symbol)): Ditto.

diff --git a/libinterp/corefcn/ft-text-renderer.cc b/libinterp/corefcn/ft-text-renderer.cc
--- a/libinterp/corefcn/ft-text-renderer.cc
+++ b/libinterp/corefcn/ft-text-renderer.cc
@@ -371,18 +371,19 @@ namespace octave
       ROTATION_270 = 3
     };
 
   public:
 
     ft_text_renderer (void)
       : base_text_renderer (), font (), bbox (1, 4, 0.0), halign (0),
         xoffset (0), line_yoffset (0), yoffset (0), mode (MODE_BBOX),
-        color (dim_vector (1, 3), 0), line_xoffset (0), m_ymin (0), m_ymax (0),
-        m_deltax (0), m_max_fontsize (0)
+        color (dim_vector (1, 3), 0), m_do_strlist (false), m_strlist (),
+        line_xoffset (0), m_ymin (0), m_ymax (0), m_deltax (0),
+        m_max_fontsize (0)
     { }
 
     // No copying!
 
     ft_text_renderer (const ft_text_renderer&) = delete;
 
     ft_text_renderer& operator = (const ft_text_renderer&) = delete;
 
@@ -525,17 +526,18 @@ namespace octave
 
     // The current mode of the rendering process (box computing or rendering).
     int mode;
 
     // The base color of the rendered text.
     uint8NDArray color;
 
     // A list of parsed strings to be used for printing.
-    std::list<text_renderer::string> strlist;
+    bool m_do_strlist;
+    std::list<text_renderer::string> m_strlist;
 
     // The X offset of the baseline for the current line.
     int line_xoffset;
      
     // Min and max y coordinates of all glyphs in a line.
     FT_Pos m_ymin;
     FT_Pos m_ymax;
 
@@ -857,19 +859,26 @@ namespace octave
                                      Matrix& box,
                                      int ha, int va, double rot,
                                      const caseless_str& interp)
   {
     uint8NDArray pxls;
 
     // First run text_to_pixels which will also build the string list
 
+    m_strlist = std::list<text_renderer::string> ();
+    
+    octave::unwind_protect frame;
+    frame.protect_var (m_do_strlist);
+    frame.protect_var (m_strlist);
+    m_do_strlist = true;
+    
     text_to_pixels (txt, pxls, box, ha, va, rot, interp, false);
 
-    lst = strlist;
+    lst = m_strlist;
   }
 
   void
   ft_text_renderer::visit (text_element_string& e)
   {
     if (font.is_valid ())
       {
         m_max_fontsize = std::max (m_max_fontsize, font.get_size ());
@@ -889,62 +898,68 @@ namespace octave
         std::vector<double> xdata;
 
         while (n > 0)
           {
             // Retrieve the length and the u32 representation of the current
             // character
             int mblen = octave_u8_strmbtouc_wrapper (&u32_c, c + icurr);
             n -= mblen;
-            
-            if (u32_c == 10)
+
+            if (m_do_strlist && mode == MODE_RENDER)
               {
-                // Finish previous string in strlist before processing
-                // the newline character
-                fs.set_y (line_yoffset + yoffset);
-                fs.set_color (color);
+                if (u32_c == 10)
+                  {
+                    // Finish previous string in m_strlist before processing
+                    // the newline character
+                    fs.set_y (line_yoffset + yoffset);
+                    fs.set_color (color);
                 
-                std::string s = str.substr (ibegin, icurr - ibegin);
-                if (! s.empty ())
-                  {
-                    fs.set_string (s);
-                    fs.set_y (line_yoffset + yoffset);
-                    fs.set_xdata (xdata);
-                    fs.set_family (fname);
-                    strlist.push_back (fs);
+                    std::string s = str.substr (ibegin, icurr - ibegin);
+                    if (! s.empty ())
+                      {
+                        fs.set_string (s);
+                        fs.set_y (line_yoffset + yoffset);
+                        fs.set_xdata (xdata);
+                        fs.set_family (fname);
+                        m_strlist.push_back (fs);
+                      }
                   }
+                else
+                  xdata.push_back (xoffset);
               }
-            else
-              xdata.push_back (xoffset);
 
             glyph_index = process_character (u32_c, previous);
 
-
             if (u32_c == 10)
               {
                 previous = 0;
-                // Start a new string in strlist
-                ibegin = icurr+1;
-                xdata.clear ();
-                fs = text_renderer::string (str.substr (ibegin), font,
-                                            line_xoffset, yoffset);
+                
+                if (m_do_strlist && mode == MODE_RENDER)
+                  {
+                    // Start a new string in m_strlist
+                    ibegin = icurr+1;
+                    xdata.clear ();
+                    fs = text_renderer::string (str.substr (ibegin), font,
+                                                line_xoffset, yoffset);
+                  }
               }
             else
               previous = glyph_index;
 
             icurr += mblen;
           }
 
-        if (! fs.get_string ().empty ())
+        if (m_do_strlist && mode == MODE_RENDER && ! fs.get_string ().empty ())
           {
             fs.set_y (line_yoffset + yoffset);
             fs.set_color (color);
             fs.set_xdata (xdata);
             fs.set_family (fname);
-            strlist.push_back (fs);
+            m_strlist.push_back (fs);
           }
       }
   }
 
   void
   ft_text_renderer::visit (text_element_list& e)
   {
     // Save and restore (after processing the list) the current font and color.
@@ -1083,28 +1098,31 @@ namespace octave
     uint32_t code = e.get_symbol_code ();
 
     std::vector<double> xdata (1, xoffset);
     text_renderer::string fs ("-", font, xoffset, yoffset);
 
     if (code != text_element_symbol::invalid_code && font.is_valid ())
       {
         process_character (code);
-        fs.set_code (code);
-        fs.set_xdata (xdata);
+        if (m_do_strlist && mode == MODE_RENDER)
+          {
+            fs.set_code (code);
+            fs.set_xdata (xdata);
+          }
       }
     else if (font.is_valid ())
       ::warning ("ignoring unknown symbol: %d", e.get_symbol ());
 
-    if (fs.get_code ())
+    if (m_do_strlist && mode == MODE_RENDER && fs.get_code ())
       {
         fs.set_y (line_yoffset + yoffset);
         fs.set_color (color);
         fs.set_family (font.get_face ()->family_name);
-        strlist.push_back (fs);
+        m_strlist.push_back (fs);
       }
   }
 
   void
   ft_text_renderer::visit (text_element_combined& e)
   {
     int saved_xoffset = xoffset;
     int max_xoffset = xoffset;
@@ -1119,16 +1137,17 @@ namespace octave
     xoffset = max_xoffset;
   }
 
   void
   ft_text_renderer::reset (void)
   {
     set_mode (MODE_BBOX);
     set_color (Matrix (1, 3, 0.0));
+    m_strlist = std::list<text_renderer::string> ();
   }
 
   void
   ft_text_renderer::set_color (const Matrix& c)
   {
     if (c.numel () == 3)
       {
         color(0) = static_cast<uint8_t> (c(0)*255);
@@ -1143,18 +1162,16 @@ namespace octave
   ft_text_renderer::render (text_element *elt, Matrix& box, int rotation)
   {
     set_mode (MODE_BBOX);
     elt->accept (*this);
     compute_bbox ();
     box = bbox;
 
     set_mode (MODE_RENDER);
-    // Clear the list of parsed strings
-    strlist.clear ();
 
     if (pixels.numel () > 0)
       {
         elt->accept (*this);
 
         switch (rotation)
           {
           case ROTATION_0:
