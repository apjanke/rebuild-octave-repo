# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1456535658 18000
#      Fri Feb 26 20:14:18 2016 -0500
# Node ID 5b9618f4f841c7880185f7814522bea8e80338c1
# Parent  03ff9371596beb1f67e98d0ac617350201cb5b0b
Rely upon print.m for mono/color conversion. This simplifies gnuplot support
and reduced complexity since all toolkits rely upon the same color/mono code.
maintenance (from bug #44187).

* scripts/plot/util/print.m: Handle color to gray scale conervsion for all
toolkits.
* scripts/plot/util/__gnuplot_drawnow__.m: Remove option for "mono".
* scripts/plot/util/private/__gnuplot_draw_figure__.m: ditto.
* scripts/plot/util/private/__gnuplot_draw_axes__.m: ditto.

diff --git a/scripts/plot/util/__gnuplot_drawnow__.m b/scripts/plot/util/__gnuplot_drawnow__.m
--- a/scripts/plot/util/__gnuplot_drawnow__.m
+++ b/scripts/plot/util/__gnuplot_drawnow__.m
@@ -12,44 +12,44 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {} {} __gnuplot_drawnow__ (@var{h}, @var{term}, @var{file}, @var{mono}, @var{debug_file})
+## @deftypefn {} {} __gnuplot_drawnow__ (@var{h}, @var{term}, @var{file}, @var{debug_file})
 ## Undocumented internal function.
 ## @end deftypefn
 
 ## Author: jwe
 
-function __gnuplot_drawnow__ (h, term, file, mono = false, debug_file)
+function __gnuplot_drawnow__ (h, term, file, debug_file)
 
   if (nargin < 1 || nargin > 5 || nargin == 2)
     print_usage ();
   endif
 
   if (nargin >= 3 && nargin <= 5)
     ## Produce various output formats, or redirect gnuplot stream to a
     ## debug file.
     plot_stream = [];
     fid = [];
     default_plot_stream = get (h, "__plot_stream__");
     unwind_protect
       plot_stream = __gnuplot_open_stream__ (2, h);
       gnuplot_supports_term = __gnuplot_has_terminal__ (term, plot_stream);
       if (gnuplot_supports_term)
         enhanced = gnuplot_set_term (plot_stream(1), true, h, term, file);
-        __gnuplot_draw_figure__ (h, plot_stream(1), enhanced, mono);
+        __gnuplot_draw_figure__ (h, plot_stream(1), enhanced);
         if (nargin == 5)
           fid = fopen (debug_file, "wb");
           enhanced = gnuplot_set_term (fid, true, h, term, file);
-          __gnuplot_draw_figure__ (h, fid, enhanced, mono);
+          __gnuplot_draw_figure__ (h, fid, enhanced);
         endif
       else
         error ('__gnuplot_drawnow__: the gnuplot terminal, "%s", is not available',
                gnuplot_trim_term (term));
       endif
     unwind_protect_cleanup
       set (h, "__plot_stream__", default_plot_stream);
       if (! isempty (plot_stream))
@@ -78,17 +78,17 @@ function __gnuplot_drawnow__ (h, term, f
     if (strcmp (term, "dumb"))
       ## popen2 eats stdout of gnuplot, use temporary file instead
       dumb_tmp_file = tempname ();
       enhanced = gnuplot_set_term (plot_stream(1), new_stream, h,
                                    term, dumb_tmp_file);
     else
       enhanced = gnuplot_set_term (plot_stream(1), new_stream, h, term);
     endif
-    __gnuplot_draw_figure__ (h, plot_stream(1), enhanced, mono);
+    __gnuplot_draw_figure__ (h, plot_stream(1), enhanced);
     fflush (plot_stream(1));
     if (strcmp (term, "dumb"))
       fid = -1;
       while (fid < 0)
         pause (0.1);
         fid = fopen (dumb_tmp_file, 'r');
       endwhile
       ## reprint the plot on screen
diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -418,18 +418,17 @@ function print (varargin)
       if (opts.force_solid > 0)
         linestyle = "-";
       else
         linestyle = "--";
       endif
       set (h, "linestyle", linestyle);
     endif
 
-    if (opts.use_color < 0
-        && ! strcmp (get (opts.figure, "__graphics_toolkit__"), "gnuplot"))
+    if (opts.use_color < 0)
       color_props = {"color", "facecolor", "edgecolor", "colormap"};
       for c = 1:numel (color_props)
         h = findall (opts.figure, "-property", color_props{c});
         hnone = findall (opts.figure, color_props{c}, "none");
         h = setdiff (h, hnone);
         m = numel (props);
         for n = 1:numel (h)
           if (ishandle (h(n)))
diff --git a/scripts/plot/util/private/__gnuplot_draw_axes__.m b/scripts/plot/util/private/__gnuplot_draw_axes__.m
--- a/scripts/plot/util/private/__gnuplot_draw_axes__.m
+++ b/scripts/plot/util/private/__gnuplot_draw_axes__.m
@@ -12,24 +12,24 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {} {} __gnuplot_draw_axes__ (@var{h}, @var{plot_stream}, @var{enhanced}, @var{mono})
+## @deftypefn {} {} __gnuplot_draw_axes__ (@var{h}, @var{plot_stream}, @var{enhanced}, @var{bg_is_set}, @var{fg_is_set}, @var{hlgnd})
 ## Undocumented internal function.
 ## @end deftypefn
 
 ## Author: jwe
 
-function __gnuplot_draw_axes__ (h, plot_stream, enhanced, mono,
-                           bg_is_set, fg_is_set, hlgnd)
+function __gnuplot_draw_axes__ (h, plot_stream, enhanced, bg_is_set,
+                                fg_is_set, hlgnd)
 
   showhiddenhandles = get (0, "showhiddenhandles");
   unwind_protect
     set (0, "showhiddenhandles", "on");
     axis_obj = __get__ (h);
   unwind_protect_cleanup
     set (0, "showhiddenhandles", showhiddenhandles);
   end_unwind_protect
@@ -148,29 +148,29 @@ function __gnuplot_draw_axes__ (h, plot_
   fputs (plot_stream, "unset x2tics;\n");
   fputs (plot_stream, "unset y2tics;\n");
 
   if (! isempty (axis_obj.title))
     t = get (axis_obj.title);
     if (isempty (t.string))
       fputs (plot_stream, "unset title;\n");
     else
-      colorspec = get_text_colorspec (t.color, mono);
+      colorspec = get_text_colorspec (t.color);
       [tt, f, s] = __maybe_munge_text__ (enhanced, t, "string");
       fontspec = create_fontspec (f, s, gnuplot_term);
       fprintf (plot_stream, "set title \"%s\" %s %s %s;\n",
                undo_string_escapes (tt), fontspec, colorspec,
                __do_enhanced_option__ (enhanced, t));
     endif
   endif
 
   if (! isempty (axis_obj.xlabel))
     t = get (axis_obj.xlabel);
     angle = t.rotation;
-    colorspec = get_text_colorspec (t.color, mono);
+    colorspec = get_text_colorspec (t.color);
     if (isempty (t.string))
       fprintf (plot_stream, "unset xlabel;\n");
       fprintf (plot_stream, "unset x2label;\n");
     else
       [tt, f, s] = __maybe_munge_text__ (enhanced, t, "string");
       fontspec = create_fontspec (f, s, gnuplot_term);
       if (strcmpi (axis_obj.xaxislocation, "top"))
         fprintf (plot_stream, "set x2label \"%s\" %s %s %s",
@@ -188,17 +188,17 @@ function __gnuplot_draw_axes__ (h, plot_
         fprintf (plot_stream, "unset x2label;\n");
       endif
     endif
   endif
 
   if (! isempty (axis_obj.ylabel))
     t = get (axis_obj.ylabel);
     angle = t.rotation;
-    colorspec = get_text_colorspec (t.color, mono);
+    colorspec = get_text_colorspec (t.color);
     if (isempty (t.string))
       fprintf (plot_stream, "unset ylabel;\n");
       fprintf (plot_stream, "unset y2label;\n");
     else
       [tt, f, s] = __maybe_munge_text__ (enhanced, t, "string");
       fontspec = create_fontspec (f, s, gnuplot_term);
       if (strcmpi (axis_obj.yaxislocation, "right"))
         fprintf (plot_stream, "set y2label \"%s\" %s %s %s",
@@ -216,17 +216,17 @@ function __gnuplot_draw_axes__ (h, plot_
         fprintf (plot_stream, "unset y2label;\n");
       endif
     endif
   endif
 
   if (! isempty (axis_obj.zlabel))
     t = get (axis_obj.zlabel);
     angle = t.rotation;
-    colorspec = get_text_colorspec (t.color, mono);
+    colorspec = get_text_colorspec (t.color);
     if (isempty (t.string))
       fputs (plot_stream, "unset zlabel;\n");
     else
       [tt, f, s] = __maybe_munge_text__ (enhanced, t, "string");
       fontspec = create_fontspec (f, s, gnuplot_term);
       fprintf (plot_stream, "set zlabel \"%s\" %s %s %s",
                undo_string_escapes (tt), colorspec, fontspec,
                __do_enhanced_option__ (enhanced, t));
@@ -382,17 +382,17 @@ function __gnuplot_draw_axes__ (h, plot_
     axis_obj.zsgn = 1;
   endif
 
   xlim = axis_obj.xlim;
   ylim = axis_obj.ylim;
   zlim = axis_obj.zlim;
   clim = axis_obj.clim;
 
-  do_tics (axis_obj, plot_stream, ymirror, mono, gnuplot_term);
+  do_tics (axis_obj, plot_stream, ymirror, gnuplot_term);
 
   fputs (plot_stream, "unset logscale;\n");
   if (xlogscale)
     fprintf (plot_stream, "set logscale %s;\n", xaxisloc);
   endif
   if (ylogscale)
     fprintf (plot_stream, "set logscale %s;\n", yaxisloc);
   endif
@@ -596,17 +596,17 @@ function __gnuplot_draw_axes__ (h, plot_
           xdat = obj.xdata(:);
           ydat = obj.ydata(:);
           data{data_idx} = [xdat, ydat]';
           usingclause{data_idx} = ...
             sprintf ("record=%d using ($1):($2) axes %s%s",
                      rows (xdat), xaxisloc_using, yaxisloc_using);
         endif
 
-        style = do_linestyle_command (obj, obj.color, data_idx, mono,
+        style = do_linestyle_command (obj, obj.color, data_idx,
                                       plot_stream, errbars);
 
         withclause{data_idx} = sprintf ("with %s linestyle %d",
                                         style{1}, data_idx);
 
         if (length (style) > 1)
           data_idx += 1;
           is_image_data(data_idx) = is_image_data(data_idx - 1);
@@ -776,19 +776,17 @@ function __gnuplot_draw_axes__ (h, plot_
                  addedcmap = [addedcmap; reshape(color, 1, 3)];
                elseif (numel (ccdat) <= 1)
                  ccdat = zcol;
                endif
                data{data_3d_idx} = [data{data_3d_idx}, ...
                                     [[xcol; xcol(end)], [ycol; ycol(end)], ...
                                     [zcol; zcol(end)], [ccdat; ccdat(end)]]'];
              else
-               if (mono)
-                 colorspec = "";
-               elseif (__gnuplot_has_feature__ ("transparent_patches")
+               if (__gnuplot_has_feature__ ("transparent_patches")
                        && isscalar (obj.facealpha))
                  colorspec = sprintf ("lc rgb \"#%02x%02x%02x\" fillstyle transparent solid %f",
                                       round (255*color), obj.facealpha);
                else
                  colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
                                       round (255*color));
                endif
 
@@ -912,25 +910,21 @@ function __gnuplot_draw_axes__ (h, plot_
            [pt, pt2, obj] = gnuplot_pointtype (obj);
            if (! isempty (pt))
              pt = sprintf ("pointtype %s", pt);
            endif
            if (! isempty (pt2))
              pt2 = sprintf ("pointtype %s", pt2);
            endif
 
-           if (mono)
-             colorspec = "";
+           if (ischar (color))
+             colorspec = "palette";
            else
-             if (ischar (color))
-               colorspec = "palette";
-             else
-               colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
-                                    round (255*color));
-             endif
+             colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
+                                  round (255*color));
            endif
 
            sidx = 1;
            if (isempty (lt))
              style = "";
            else
              style = "lines";
            endif
@@ -961,17 +955,17 @@ function __gnuplot_draw_axes__ (h, plot_
              else
                facesame = false;
                if (! isempty (style))
                  tmpwith{sidx} = sprintf ("with %s %s %s %s",
                                           style, lw, lt,
                                           colorspec);
                  sidx += 1;
                endif
-               if (isnumeric (obj.markerfacecolor) && ! mono)
+               if (isnumeric (obj.markerfacecolor))
                  colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
                                       round (255*obj.markerfacecolor));
                endif
                style = "points";
                if (isfield (obj, "markersize"))
                  if (length (mdat) == nc)
                    m = mdat(i);
                  else
@@ -1018,24 +1012,22 @@ function __gnuplot_draw_axes__ (h, plot_
                    tmpwith{sidx} = sprintf ("with %s %s %s %s",
                                             style, lw, lt,
                                             colorspec);
                  endif
                  sidx += 1;
                endif
 
                if (! isempty (pt))
-                 if (! mono)
-                   if (strcmp (obj.markeredgecolor, "auto"))
-                     colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
-                                          round (255*color));
-                   elseif (isnumeric (obj.markeredgecolor) && ! mono)
-                     colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
-                                          round (255*obj.markeredgecolor));
-                   endif
+                 if (strcmp (obj.markeredgecolor, "auto"))
+                   colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
+                                        round (255*color));
+                 elseif (isnumeric (obj.markeredgecolor))
+                   colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
+                                        round (255*obj.markeredgecolor));
                  endif
                  style = "points";
                  if (isfield (obj, "markersize"))
                    if (length (mdat) == nc)
                      m = mdat(i);
                    else
                      m = mdat;
                    endif
@@ -1124,17 +1116,17 @@ function __gnuplot_draw_axes__ (h, plot_
         if (! (strcmp (obj.edgecolor, "none")
                && strcmp (obj.facecolor, "none")))
           data_idx += 1;
           is_image_data(data_idx) = false;
           parametric(data_idx) = false;
           have_cdata(data_idx) = true;
           have_3d_patch(data_idx) = false;
           style = do_linestyle_command (obj, obj.edgecolor,
-                                        data_idx, mono,
+                                        data_idx,
                                         plot_stream);
 
           if (isempty (obj.displayname))
             titlespec{data_idx} = "title \"\"";
           else
             tmp = undo_string_escapes (
                     __maybe_munge_text__ (enhanced, obj, "displayname")
                   );
@@ -1338,17 +1330,17 @@ function __gnuplot_draw_axes__ (h, plot_
         elseif (strcmp (axis_obj.yaxislocation, "right")
                 && strcmp (units, "data"))
           units = "second";
         else
           units = "";
         endif
 
         if (isnumeric (color))
-          colorspec = get_text_colorspec (color, mono);
+          colorspec = get_text_colorspec (color);
         endif
 
         if (ischar (obj.string))
           num_lines = rows (obj.string);
           num_lines += numel (strfind (obj.string, "\n"));
         else
           num_lines = numel (obj.string);
         endif
@@ -1609,29 +1601,29 @@ function __gnuplot_draw_axes__ (h, plot_
       textcolors = unique (textcolors, "rows");
     endif
     if (rows (textcolors) > 1)
       ## Gnuplot is unable to assign arbitrary colors to each text entry
       ## for the key/legend.  But, the text color can be set to match the
       ## color of the plot object.
       colorspec = "textcolor variable";
     else
-      colorspec = get_text_colorspec (textcolors, mono);
+      colorspec = get_text_colorspec (textcolors);
     endif
     fprintf (plot_stream, "set key %s %s;\nset key %s %s %s %s %s %s;\n",
              inout, pos, box, reverse, horzvert, fontspacespec, colorspec,
              __do_enhanced_option__ (enhanced, hlgnd));
   else
     fputs (plot_stream, "unset key;\n");
   endif
   fputs (plot_stream, "set style data lines;\n");
 
   cmap = [cmap; addedcmap];
   cmap_sz += rows (addedcmap);
-  if (mono == false && length (cmap) > 0)
+  if (length (cmap) > 0)
     fprintf (plot_stream,
              "set palette positive color model RGB maxcolors %i;\n",
              cmap_sz);
     fprintf (plot_stream,
              "set palette file \"-\" binary record=%d using 1:2:3:4;\n",
              cmap_sz);
     fwrite (plot_stream, [1:cmap_sz; cmap.'], "float32");
     fwrite (plot_stream, "\n");
@@ -1789,30 +1781,28 @@ endfunction
 function fontspec = create_fontspec (f, s, gp_term)
   if (isempty (f) || strcmp (f, "*") || strcmp (gp_term, "tikz"))
     fontspec = sprintf ("font \",%d\"", s);
   else
     fontspec = sprintf ("font \"%s,%d\"", f, s);
   endif
 endfunction
 
-function style = do_linestyle_command (obj, linecolor, idx, mono,
+function style = do_linestyle_command (obj, linecolor, idx,
                                        plot_stream, errbars = "")
   style = {};
 
   fprintf (plot_stream, "set style line %d default;\n", idx);
   fprintf (plot_stream, "set style line %d", idx);
 
   found_style = false;
   if (isnumeric (linecolor))
     color = linecolor;
-    if (! mono)
-      fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
-               round (255*color));
-    endif
+    fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
+             round (255*color));
   else
     color = [0, 0, 0];
   endif
 
   if (isfield (obj, "linestyle"))
     switch (obj.linestyle)
       case "-"
         lt = "1";
@@ -1881,17 +1871,17 @@ function style = do_linestyle_command (o
         if (! isempty (style{sidx}))
           sidx += 1;
           idx += 1;
         else
           fputs (plot_stream, ";\n");
         endif
         fprintf (plot_stream, "set style line %d default;\n", idx);
         fprintf (plot_stream, "set style line %d", idx);
-        if (isnumeric (obj.markerfacecolor) && ! mono)
+        if (isnumeric (obj.markerfacecolor))
           fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
                    round (255*obj.markerfacecolor));
         endif
         if (! isempty (pt2))
           style{sidx} = "points";
           fprintf (plot_stream, " pointtype %s", pt2);
         endif
         if (isfield (obj, "markersize"))
@@ -1924,24 +1914,22 @@ function style = do_linestyle_command (o
         if (! isempty (style{sidx}))
           sidx += 1;
           idx += 1;
         else
           fputs (plot_stream, ";\n");
         endif
         fprintf (plot_stream, "set style line %d default;\n", idx);
         fprintf (plot_stream, "set style line %d", idx);
-        if (! mono)
-          if (strcmp (obj.markeredgecolor, "auto"))
-            fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
-                     round (255*color));
-          elseif (isnumeric (obj.markeredgecolor) && ! mono)
-            fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
-                     round (255*obj.markeredgecolor));
-          endif
+        if (strcmp (obj.markeredgecolor, "auto"))
+          fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
+                   round (255*color));
+        elseif (isnumeric (obj.markeredgecolor))
+          fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
+                   round (255*obj.markeredgecolor));
         endif
         if (! isempty (pt))
           style{sidx} = "points";
           fprintf (plot_stream, " pointtype %s", pt);
         endif
         if (isfield (obj, "markersize"))
           fprintf (plot_stream, " pointsize %f", obj.markersize / 3);
         endif
@@ -2045,17 +2033,17 @@ function __gnuplot_write_data__ (plot_st
           fwrite (plot_stream, data(j:j+2,:), "float64");
         endfor
       endif
     endif
   endif
 
 endfunction
 
-function do_tics (obj, plot_stream, ymirror, mono, gnuplot_term)
+function do_tics (obj, plot_stream, ymirror, gnuplot_term)
 
   obj.xticklabel = ticklabel_to_cell (obj.xticklabel);
   obj.yticklabel = ticklabel_to_cell (obj.yticklabel);
   obj.zticklabel = ticklabel_to_cell (obj.zticklabel);
 
   if (strcmp (obj.xminorgrid, "on"))
     obj.xminortick = "on";
   endif
@@ -2069,78 +2057,78 @@ function do_tics (obj, plot_stream, ymir
   [fontname, fontsize] = get_fontname_and_size (obj);
   fontspec = create_fontspec (fontname, fontsize, gnuplot_term);
 
   ## A Gnuplot tic scale of 69 is equivalent to Octave's 0.5.
   ticklength = sprintf ("scale %4.1f", (69/0.5)*obj.ticklength(1));
 
   if (strcmpi (obj.xaxislocation, "top"))
     do_tics_1 (obj.xtickmode, obj.xtick, obj.xminortick, obj.xticklabelmode,
-               obj.xticklabel, obj.xcolor, "x2", plot_stream, true, mono,
+               obj.xticklabel, obj.xcolor, "x2", plot_stream, true,
                "border", obj.tickdir, ticklength, fontname, fontspec,
                obj.ticklabelinterpreter, obj.xscale, obj.xsgn, gnuplot_term);
     do_tics_1 ("manual", [], "off", obj.xticklabelmode, obj.xticklabel,
-               obj.xcolor, "x", plot_stream, true, mono, "border",
+               obj.xcolor, "x", plot_stream, true, "border",
                "", "", fontname, fontspec, obj.ticklabelinterpreter,
                obj.xscale, obj.xsgn, gnuplot_term);
   elseif (strcmpi (obj.xaxislocation, "zero"))
     do_tics_1 (obj.xtickmode, obj.xtick, obj.xminortick, obj.xticklabelmode,
-               obj.xticklabel, obj.xcolor, "x", plot_stream, true, mono,
+               obj.xticklabel, obj.xcolor, "x", plot_stream, true,
                "axis", obj.tickdir, ticklength, fontname, fontspec,
                obj.ticklabelinterpreter, obj.xscale, obj.xsgn, gnuplot_term);
     do_tics_1 ("manual", [], "off", obj.xticklabelmode, obj.xticklabel,
-               obj.xcolor, "x2", plot_stream, true, mono, "axis",
+               obj.xcolor, "x2", plot_stream, true, "axis",
                "", "", fontname, fontspec, obj.ticklabelinterpreter,
                obj.xscale, obj.xsgn, gnuplot_term);
   else
     do_tics_1 (obj.xtickmode, obj.xtick, obj.xminortick, obj.xticklabelmode,
-               obj.xticklabel, obj.xcolor, "x", plot_stream, true, mono,
+               obj.xticklabel, obj.xcolor, "x", plot_stream, true,
                "border", obj.tickdir, ticklength, fontname, fontspec,
                obj.ticklabelinterpreter, obj.xscale, obj.xsgn, gnuplot_term);
     do_tics_1 ("manual", [], "off", obj.xticklabelmode, obj.xticklabel,
-               obj.xcolor, "x2", plot_stream, true, mono, "border",
+               obj.xcolor, "x2", plot_stream, true, "border",
                "", "", fontname, fontspec, obj.ticklabelinterpreter,
                obj.xscale, obj.xsgn, gnuplot_term);
   endif
   if (strcmpi (obj.yaxislocation, "right"))
     do_tics_1 (obj.ytickmode, obj.ytick, obj.yminortick, obj.yticklabelmode,
-               obj.yticklabel, obj.ycolor, "y2", plot_stream, ymirror, mono,
+               obj.yticklabel, obj.ycolor, "y2", plot_stream, ymirror,
                "border", obj.tickdir, ticklength, fontname, fontspec,
                obj.ticklabelinterpreter, obj.yscale, obj.ysgn, gnuplot_term);
     do_tics_1 ("manual", [], "off", obj.yticklabelmode, obj.yticklabel,
-               obj.ycolor, "y", plot_stream, ymirror, mono, "border",
+               obj.ycolor, "y", plot_stream, ymirror, "border",
                "", "", fontname, fontspec, obj.ticklabelinterpreter,
                obj.yscale, obj.ysgn, gnuplot_term);
   elseif (strcmpi (obj.yaxislocation, "zero"))
     do_tics_1 (obj.ytickmode, obj.ytick, obj.yminortick, obj.yticklabelmode,
-               obj.yticklabel, obj.ycolor, "y", plot_stream, ymirror, mono,
+               obj.yticklabel, obj.ycolor, "y", plot_stream, ymirror,
                "axis", obj.tickdir, ticklength, fontname, fontspec,
                obj.ticklabelinterpreter, obj.yscale, obj.ysgn, gnuplot_term);
     do_tics_1 ("manual", [], "off", obj.yticklabelmode, obj.yticklabel,
-               obj.ycolor, "y2", plot_stream, ymirror, mono, "axis",
+               obj.ycolor, "y2", plot_stream, ymirror, "axis",
                "", "", fontname, fontspec, obj.ticklabelinterpreter,
                obj.yscale, obj.ysgn, gnuplot_term);
   else
     do_tics_1 (obj.ytickmode, obj.ytick, obj.yminortick, obj.yticklabelmode,
-               obj.yticklabel, obj.ycolor, "y", plot_stream, ymirror, mono,
+               obj.yticklabel, obj.ycolor, "y", plot_stream, ymirror,
                "border", obj.tickdir, ticklength, fontname, fontspec,
                obj.ticklabelinterpreter, obj.yscale, obj.ysgn, gnuplot_term);
     do_tics_1 ("manual", [], "off", obj.yticklabelmode, obj.yticklabel,
-               obj.ycolor, "y2", plot_stream, ymirror, mono, "border",
+               obj.ycolor, "y2", plot_stream, ymirror, "border",
                "", "", fontname, fontspec, obj.ticklabelinterpreter,
                obj.yscale, obj.ysgn, gnuplot_term);
   endif
   do_tics_1 (obj.ztickmode, obj.ztick, obj.zminortick, obj.zticklabelmode,
-             obj.zticklabel, obj.zcolor, "z", plot_stream, true, mono,
+             obj.zticklabel, obj.zcolor, "z", plot_stream, true,
              "border", obj.tickdir, ticklength, fontname, fontspec,
              obj.ticklabelinterpreter, obj.zscale, obj.zsgn, gnuplot_term);
 endfunction
 
 function do_tics_1 (ticmode, tics, mtics, labelmode, labels, color, ax,
-                    plot_stream, mirror, mono, axispos, tickdir, ticklength,
+                    plot_stream, mirror, axispos, tickdir, ticklength,
                     fontname, fontspec, interpreter, scale, sgn, gnuplot_term)
   persistent warned_latex = false;
 
   ## Avoid emitting anything if the tics are empty, because this undoes the
   ## effect of the previous unset xtics and thereby adds back in the tics.
   if (isempty (tics))
     return;
   endif
@@ -2170,17 +2158,17 @@ function do_tics_1 (ticmode, tics, mtics
     endif
     if (sgn < 0)
       fmt = ["-" fmt];
     endif
   else
     fmt = "%g";
     num_mtics = 5;
   endif
-  colorspec = get_text_colorspec (color, mono);
+  colorspec = get_text_colorspec (color);
   fprintf (plot_stream, "set format %s \"%s\";\n", ax, fmt);
   if (strcmpi (ticmode, "manual"))
     if (isempty (tics))
       fprintf (plot_stream, "unset %stics;\nunset m%stics;\n", ax, ax);
       return
     endif
     fprintf (plot_stream, "set %stics %s %s %s %s (", ax, tickdir,
              ticklength, axispos, mirror);
@@ -2220,23 +2208,18 @@ function ticklabel = ticklabel_to_cell (
     ticklabel = cellstr (ticklabel);
   elseif (iscellstr (ticklabel))
     ticklabel = ticklabel;
   else
     error ("__gnuplot_draw_axes__: unsupported type of ticklabel");
   endif
 endfunction
 
-function colorspec = get_text_colorspec (color, mono)
-  if (mono)
-    colorspec = "";
-  else
-    colorspec = sprintf ("textcolor rgb \"#%02x%02x%02x\"",
-                         round (255*color));
-  endif
+function colorspec = get_text_colorspec (color)
+  colorspec = sprintf ("textcolor rgb \"#%02x%02x%02x\"", round (255*color));
 endfunction
 
 function [f, s, fnt, it, bld] = get_fontname_and_size (t)
   if (isempty (t.fontname) || strcmp (t.fontname, "*"))
     fnt = "";
   else
     fnt = t.fontname;
   endif
diff --git a/scripts/plot/util/private/__gnuplot_draw_figure__.m b/scripts/plot/util/private/__gnuplot_draw_figure__.m
--- a/scripts/plot/util/private/__gnuplot_draw_figure__.m
+++ b/scripts/plot/util/private/__gnuplot_draw_figure__.m
@@ -12,23 +12,23 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {} {} __gnuplot_draw_figure__ (@var{h}, @var{plot_stream}, @var{enhanced}, @var{mono})
+## @deftypefn {} {} __gnuplot_draw_figure__ (@var{h}, @var{plot_stream}, @var{enhanced})
 ## Undocumented internal function.
 ## @end deftypefn
 
 ## Author: jwe
 
-function __gnuplot_draw_figure__ (h, plot_stream, enhanced, mono)
+function __gnuplot_draw_figure__ (h, plot_stream, enhanced)
 
   htype = get (h, "type");
   if (strcmp (htype, "figure"))
     ## Get complete list of children.
     kids = allchild (h);
     nkids = length (kids);
 
     if (nkids > 0)
@@ -111,17 +111,17 @@ function __gnuplot_draw_figure__ (h, plo
                       endif
                     elseif (! isempty (lm))
                       toberm = [toberm, line("xdata",[0,0],"ydata",[0,0], "color", get(lm,"color"), "linestyle", "none", "marker", get(lm,"marker"), "markeredgecolor", get(lm,"markeredgecolor"), "markerfacecolor", get(lm,"markerfacecolor"), "markersize", get (lm, "markersize"), "displayname", displayname, "parent", kids(i))];
                     endif
                   endfor
                   if (bg_is_set)
                     fprintf (plot_stream, "set border linecolor rgb \"#%02x%02x%02x\"\n", round (255 * (1 - bg)));
                   endif
-                  __gnuplot_draw_axes__ (kids(i), plot_stream, enhanced, mono,
+                  __gnuplot_draw_axes__ (kids(i), plot_stream, enhanced,
                                     bg_is_set, false, hlgnd);
                 unwind_protect_cleanup
                   ## Return axes "units" and "position" back to
                   ## their original values.
                   set (ca, "units", orig_axes_units);
                   set (kids(i), "units", legend_axes_units,
                        "box", legend_axes_box,
                        "ylim", legend_axes_ylim,
@@ -164,17 +164,17 @@ function __gnuplot_draw_figure__ (h, plo
                     udata = get (fkids (j), "userdata");
                     if (isscalar (udata.handle)
                         && ! isempty (intersect (udata.handle, kids (i))))
                       hlegend = get (fkids (j));
                       break;
                     endif
                   endif
                 endfor
-                __gnuplot_draw_axes__ (kids(i), plot_stream, enhanced, mono,
+                __gnuplot_draw_axes__ (kids(i), plot_stream, enhanced,
                                   bg_is_set, fg_is_set, hlegend);
               unwind_protect_cleanup
                 ## Return axes "units" and "position" back to
                 ## their original values.
                 set (kids(i), "units", orig_axes_units);
                 set (kids(i), "position", orig_axes_position);
                 bg_is_set = false;
                 fg_is_set = false;
