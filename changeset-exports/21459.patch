# HG changeset patch
# User mmuetzel <markus.muetzel@gmx.de>
# Date 1458045982 -3600
#      Tue Mar 15 13:46:22 2016 +0100
# Node ID 385b67d48dda48e98bd29f9149327996f2cd99cb
# Parent  348e335c49dd7ae295f9feeb372e3aabfba2ce93
Don't enable opengl lighting when no light object is present (bug #42006)

* gl_render.h: Add private bool property has_light to opengl_renderer to
indicate whether a light object is present and visible in the current
axes.
* gl_render.cc (draw_axes_children): Set value of has_ligh before drawing any
children object.
* gl_render.cc (draw_patch, draw_surface): Enable lighting for patch and
 surface objects only if has_light is true.

* contributors.in: add contributor

diff --git a/doc/interpreter/contributors.in b/doc/interpreter/contributors.in
--- a/doc/interpreter/contributors.in
+++ b/doc/interpreter/contributors.in
@@ -217,16 +217,17 @@ Serviscope Minor
 Stefan Monnier
 Antoine Moreau
 Kai P. Mueller
 Armin Müller
 Hannes Müller
 Victor Munoz
 PrasannaKumar Muralidharan
 Iain Murray
+Markus Mützel
 Carmen Navarrete
 Todd Neal
 Philip Nienhuis
 Al Niessner
 Felipe G. Nievinski
 Rick Niles
 Takuji Nishimura
 Kai Noda
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -1507,24 +1507,28 @@ opengl_renderer::draw_axes_children (con
   std::list<graphics_object> obj_list;
   std::list<graphics_object>::iterator it;
 
   // 1st pass: draw light objects
 
   // Start with the last element of the array of child objects to
   // display them in the order they were added to the array.
 
+  has_light = false;
   for (octave_idx_type i = children.numel () - 1; i >= 0; i--)
     {
       graphics_object go = gh_manager::get_object (children(i));
 
       if (go.get_properties ().is_visible ())
         {
           if (go.isa ("light"))
-            draw (go);
+            {
+              draw (go);
+              has_light = true;
+            }
           else
             obj_list.push_back (go);
         }
     }
 
   // 2nd pass: draw other objects (with units set to "data")
 
   it = obj_list.begin ();
@@ -1872,17 +1876,17 @@ opengl_renderer::draw_surface (const sur
                   glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
                   for (int i = 0; i < 3; i++)
                     cb[i] = ds * fcolor(i);
                   glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
                 }
             }
 
-          if (fl_mode > 0)
+          if ((fl_mode > 0) && has_light)
             glEnable (GL_LIGHTING);
           glShadeModel ((fc_mode == INTERP || fl_mode == GOURAUD) ? GL_SMOOTH
                                                                   : GL_FLAT);
           set_polygon_offset (true, 1);
           if (fc_mode == TEXTURE)
             glEnable (GL_TEXTURE_2D);
 
           for (int i = 1; i < zc; i++)
@@ -2047,17 +2051,17 @@ opengl_renderer::draw_surface (const sur
                   glEnd ();
                 }
             }
 
           set_polygon_offset (false);
           if (fc_mode == TEXTURE)
             glDisable (GL_TEXTURE_2D);
 
-          if (fl_mode > 0)
+          if ((fl_mode > 0) && has_light)
             glDisable (GL_LIGHTING);
         }
       else
         {
           // FIXME: implement transparency
         }
     }
 
@@ -2075,17 +2079,17 @@ opengl_renderer::draw_surface (const sur
                   glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
                   for (int i = 0; i < 3; i++)
                     cb[i] = ds * ecolor(i);
                   glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
                 }
             }
 
-          if (el_mode > 0)
+          if ((el_mode > 0) && has_light)
             glEnable (GL_LIGHTING);
           glShadeModel ((ec_mode == INTERP || el_mode == GOURAUD) ? GL_SMOOTH
                                                                   : GL_FLAT);
 
           set_linestyle (props.get_linestyle (), false);
           set_linewidth (props.get_linewidth ());
 
           // Mesh along Y-axis
@@ -2280,17 +2284,17 @@ opengl_renderer::draw_surface (const sur
                       glEnd ();
                     }
                 }
             }
 
           set_linestyle ("-");
           set_linewidth (0.5);
 
-          if (el_mode > 0)
+          if ((el_mode > 0) && has_light)
             glDisable (GL_LIGHTING);
         }
       else
         {
           // FIXME: implement transparency
         }
     }
 
@@ -2541,17 +2545,17 @@ opengl_renderer::draw_patch (const patch
                   glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
                   for (int i = 0; i < 3; i++)
                     cb[i] = ds * fcolor(i);
                   glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
                 }
             }
 
-          if (fl_mode > 0)
+          if ((fl_mode > 0) && has_light)
             glEnable (GL_LIGHTING);
 
           // NOTE: Push filled part of patch backwards to avoid Z-fighting with
           // tesselator outline.  A value of 1.0 seems to work fine.  Value
           // can't be too large or the patch will be pushed below the axes
           // planes at +2.5.
           patch_tesselator tess (this, fc_mode, fl_mode, 1.0);
 
@@ -2600,17 +2604,17 @@ opengl_renderer::draw_patch (const patch
 
                   tess.add_vertex (vv->coords.fortran_vec (), vv);
                 }
 
               tess.end_contour ();
               tess.end_polygon ();
             }
 
-          if (fl_mode > 0)
+          if ((fl_mode > 0) && has_light)
             glDisable (GL_LIGHTING);
         }
       else
         {
           // FIXME: implement transparency
         }
     }
 
@@ -2631,17 +2635,17 @@ opengl_renderer::draw_patch (const patch
                   glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
                   for (int i = 0; i < 3; i++)
                     cb[i] = ds * ecolor(i);
                   glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
                 }
             }
 
-          if (el_mode > 0)
+          if ((el_mode > 0) && has_light)
             glEnable (GL_LIGHTING);
 
           set_linestyle (props.get_linestyle (), false);
           set_linewidth (props.get_linewidth ());
 
           // NOTE: patch contour cannot be offset.  Offset must occur with the
           // filled portion of the patch above.  The tesselator uses
           // GLU_TESS_BOUNDARY_ONLY to get the outline of the patch and OpenGL
@@ -2723,17 +2727,17 @@ opengl_renderer::draw_patch (const patch
                   tess.end_contour ();
                   tess.end_polygon ();
                 }
             }
 
           set_linestyle ("-");
           set_linewidth (0.5);
 
-          if (el_mode > 0)
+          if ((el_mode > 0) && has_light)
             glDisable (GL_LIGHTING);
         }
       else
         {
           // FIXME: implement transparency
         }
     }
 
diff --git a/libinterp/corefcn/gl-render.h b/libinterp/corefcn/gl-render.h
--- a/libinterp/corefcn/gl-render.h
+++ b/libinterp/corefcn/gl-render.h
@@ -186,13 +186,16 @@ private:
   // camera information for primitive sorting
   ColumnVector camera_pos, camera_dir;
 
   // interpreter to be used by text_to_pixels
   caseless_str interpreter;
 
   text_renderer txt_renderer;
 
+  // light object present and visible
+  bool has_light;
+
 private:
   class patch_tesselator;
 };
 
 #endif
