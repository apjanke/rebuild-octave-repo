# HG changeset patch
# User Rik <rik@octave.org>
# Date 1420051218 28800
#      Wed Dec 31 10:40:18 2014 -0800
# Node ID e5a78897be9ef8b9d0fb229b9e6472d672f9d0a8
# Parent  7934b56c8b7b7decc1260934fb9d35a66a19046a
Allow empty comma-separated lists in cell { } constructor (bug #43113).

* pt-cell.cc: Skip empty rows, where number of columns == 0, during
construction of cell.  Use octave_idx_type for indexing into cell array
rather than int.  Resize constructed cell array down to the number of
non-empty rows at the end of construction.

* parser.tst: Add tests for null row behavior.

diff --git a/libinterp/parse-tree/pt-cell.cc b/libinterp/parse-tree/pt-cell.cc
--- a/libinterp/parse-tree/pt-cell.cc
+++ b/libinterp/parse-tree/pt-cell.cc
@@ -39,17 +39,17 @@ tree_cell::rvalue1 (int)
 {
   octave_value retval;
 
   octave_idx_type nr = length ();
   octave_idx_type nc = -1;
 
   Cell val;
 
-  int i = 0;
+  octave_idx_type i = 0;
 
   for (iterator p = begin (); p != end (); p++)
     {
       tree_argument_list *elt = *p;
 
       octave_value_list row = elt->convert_to_const_vector ();
 
       if (nr == 1)
@@ -60,29 +60,36 @@ tree_cell::rvalue1 (int)
           nc = row.length ();
 
           val = Cell (nr, nc);
         }
       else
         {
           octave_idx_type this_nc = row.length ();
 
-          if (nc != this_nc)
+          if (this_nc != nc)
             {
-              ::error ("number of columns must match");
-              return retval;
+              if (this_nc == 0)
+                continue;  // blank line
+              else
+                {
+                  ::error ("number of columns must match");
+                  return retval;
+                }
             }
         }
 
       for (octave_idx_type j = 0; j < nc; j++)
         val(i,j) = row(j);
 
       i++;
     }
 
+  if (i < nr)
+    val.resize (dim_vector (i, nc));  // there were blank rows
   retval = val;
 
   return retval;
 }
 
 octave_value_list
 tree_cell::rvalue (int nargout)
 {
diff --git a/test/parser.tst b/test/parser.tst
--- a/test/parser.tst
+++ b/test/parser.tst
@@ -14,25 +14,34 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## Tests for parser problems belong in this file.
 ## We need many more tests here!
 
+## Test cell construction operator {}
 %!assert ({1 2 {3 4}}, {1,2,{3,4}})
 %!assert ({1, 2 {3 4}}, {1,2,{3,4}})
 %!assert ({1 2, {3 4}}, {1,2,{3,4}})
 %!assert ({1 2 {3, 4}}, {1,2,{3,4}})
 %!assert ({1, 2, {3 4}}, {1,2,{3,4}})
 %!assert ({1 2,{3 4}}, {1,2,{3,4}})
 %!assert ({1 2,{3,4}}, {1,2,{3,4}})
 %!assert ({1,2,{3 4}}, {1,2,{3,4}})
 
+## bug #43113 using null comma-separated list in constructor
+%!test
+%! z = cell (1,2,3,0,5);
+%! assert ({1, z{:}, 2}, {1, 2});
+%! assert ({1; z{:}; 2}, {1; 2});
+%! assert ({1 2; z{:}; 3 4}, {1, 2; 3 4});
+%! assert ({1 2; 5 z{:} 6; 3 4}, {1, 2; 5 6; 3 4});
+
 ## Tests for operator precedence as documented in section 8.8 of manual
 ## There are 13 levels of precedence from "parentheses and indexing" (highest)
 ## down to "statement operators" (lowest).
 ##
 ## Level 13 (parentheses and indexing)
 ## Overrides all other levels
 %!test
 %! a.b = 1;
