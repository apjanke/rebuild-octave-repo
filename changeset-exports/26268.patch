# HG changeset patch
# User Rik <rik@octave.org>
# Date 1545264092 28800
#      Wed Dec 19 16:01:32 2018 -0800
# Node ID 6dd232798997a2256b2d95ed1b9125e8420f910b
# Parent  298c30063b2fc60c26341dbc60071001ca7f4772
maint: Remove useless ';' from end of for, if, while, etc. statements.

* circshift.m, sortrows.m, setappdata.m, krylov.m, edit.m, fact.m,
odemergeopts.m, load_packages_and_dependencies.m, hidden.m, whitebg.m, area.m,
comet.m, comet3.m, __stem__.m, __actual_axis_position__.m,
__gnuplot_draw_axes__.m, subplot.m, ppjumps.m, ppval.m, arch_fit.m,
autoreg_matrix.m, fftfilt.m, periodogram.m, betaincinv.m, cosint.m,
discrete_cdf.m, discrete_inv.m, iqr.m:
Remove useless ';' from end of for, if, while, etc. statements.

diff --git a/scripts/general/circshift.m b/scripts/general/circshift.m
--- a/scripts/general/circshift.m
+++ b/scripts/general/circshift.m
@@ -86,17 +86,17 @@ function y = circshift (x, n, dim)
 
   if (! isvector (n) || length (n) > nd)
     error ("circshift: N must be a vector, no longer than the number of dimensions in X");
   elseif (any (n != fix (n)))
     error ("circshift: all values of N must be integers");
   endif
 
   idx = repmat ({':'}, 1, nd);
-  for i = 1:length (n);
+  for i = 1:length (n)
     b = n(i);
     d = sz(i);
     if (b > 0)
       b = rem (b, d);
       idx{i} = [d-b+1:d, 1:d-b];
     elseif (b < 0)
       b = rem (abs (b), d);
       idx{i} = [b+1:d, 1:b];
diff --git a/scripts/general/sortrows.m b/scripts/general/sortrows.m
--- a/scripts/general/sortrows.m
+++ b/scripts/general/sortrows.m
@@ -109,17 +109,17 @@ function i = sort_rows_idx_generic (defa
 
   ## Since sort is 'stable' the order of identical elements will be
   ## preserved, so by traversing the sort indices in reverse order we
   ## will make sure that identical elements in index i are subsorted by
   ## index j.
   indices = flipud (indices);
   mode = flipud (mode');
   i = [1:rows(m)]';
-  for j = 1:length (indices);
+  for j = 1:length (indices)
     M = m(i, indices(j));
     if (iscell (M) && ! iscellstr (M))
       M = cell2mat (M);
     endif
     [~, idx] = sort (M, mode{j});
     i = i(idx);
   endfor
 
diff --git a/scripts/gui/setappdata.m b/scripts/gui/setappdata.m
--- a/scripts/gui/setappdata.m
+++ b/scripts/gui/setappdata.m
@@ -54,19 +54,19 @@ function setappdata (h, varargin)
       error ("setappdata: only 3 arguments possible when NAME is a cellstr");
     elseif (! iscell (varargin{2}))
       varargin{2} = varargin(2);  # convert to cell
     endif
     names = varargin{1};
     values = varargin{2};
     n_names = numel (names);
     n_value = numel (values);
-    if (n_value == 1 && n_names > 1);
+    if (n_value == 1 && n_names > 1)
       values = repmat (values, [1, n_names]);
-    elseif (n_names != n_value);
+    elseif (n_names != n_value)
       error ("setappdata: number of NAME and VALUE arguments must match");
     endif
     varargin = cell (1, 2*numel (names));
     varargin(1:2:end) = names;
     varargin(2:2:end) = values;
 
   elseif (! all (cellfun ("isclass", varargin(1:2:end), "char")))
     error ("setappdata: NAME must be a string or cellstr");
diff --git a/scripts/linear-algebra/krylov.m b/scripts/linear-algebra/krylov.m
--- a/scripts/linear-algebra/krylov.m
+++ b/scripts/linear-algebra/krylov.m
@@ -216,17 +216,17 @@ function [Uret, H, nu] = krylov (A, V, k
       H(i,nu-columns(V)+(1:columns(V))) = V(pivot_vec(i),:);
     endfor
 
   endwhile
 
   ## Back out complete U matrix.
   ## back out U matrix.
   j1 = columns (U);
-  for i = j1:-1:1;
+  for i = j1:-1:1
     idx = pivot_vec(i:na);
     hv = U(idx,i);
     av = alpha(i);
     U(:,i) = zeros (na, 1);
     U(idx(1),i) = 1;
     U(idx,i:j1) = U(idx,i:j1)-av*hv*(hv'*U(idx,i:j1));
   endfor
 
diff --git a/scripts/miscellaneous/edit.m b/scripts/miscellaneous/edit.m
--- a/scripts/miscellaneous/edit.m
+++ b/scripts/miscellaneous/edit.m
@@ -327,17 +327,17 @@ function retval = edit (varargin)
         endif
         do_edit (FUNCTION.EDITOR, fileandpath, FUNCTION.MODE);
         return;
       endif
     endif
 
     ## If editing a new file, prompt for creation if GUI is running
     if (isguirunning ())
-      if (! __octave_link_edit_file__ (file, "prompt"));
+      if (! __octave_link_edit_file__ (file, "prompt"))
         return;
       endif
     endif
 
     ## If editing a new file that is neither an m-file nor an oct-file,
     ## just edit it.
     ## If in gui-mode, create it before or editor would prompt again.
     fileandpath = file;
diff --git a/scripts/miscellaneous/fact.m b/scripts/miscellaneous/fact.m
--- a/scripts/miscellaneous/fact.m
+++ b/scripts/miscellaneous/fact.m
@@ -269,17 +269,17 @@ endfunction
 
 function out = wordwrap (w)
 
   ncol = terminal_size ()(2);
   wc = ostrsplit (w, " ");
   out = "\n";
   i = 1;
   numwords = numel (wc);
-  while (i <= numwords);
+  while (i <= numwords)
     line = wc{i};
     while (i < numwords
            && length (newline = [line " " wc{i+1}]) < ncol)
       line = newline;
       i += 1;
     endwhile
     out = [out, line, "\n"];
     i += 1;
diff --git a/scripts/ode/private/odemergeopts.m b/scripts/ode/private/odemergeopts.m
--- a/scripts/ode/private/odemergeopts.m
+++ b/scripts/ode/private/odemergeopts.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 function options = odemergeopts (caller, useroptions, options, classes,
                                  attributes);
 
-  for [value, key] = options;
+  for [value, key] = options
 
     if (isfield (useroptions, key) && ! isempty (useroptions.(key)))
 
       if (! strcmp (classes.(key), "char"))
         validateattributes (useroptions.(key), classes.(key),
                             attributes.(key), caller, key);
 
       elseif (ischar (useroptions.(key)))
diff --git a/scripts/pkg/private/load_packages_and_dependencies.m b/scripts/pkg/private/load_packages_and_dependencies.m
--- a/scripts/pkg/private/load_packages_and_dependencies.m
+++ b/scripts/pkg/private/load_packages_and_dependencies.m
@@ -23,17 +23,17 @@
 ## @end deftypefn
 
 function load_packages_and_dependencies (idx, handle_deps, installed_pkgs_lst,
                                          global_install)
 
   idx = load_package_dirs (idx, [], handle_deps, installed_pkgs_lst);
   dirs = {};
   execpath = EXEC_PATH ();
-  for i = idx;
+  for i = idx
     ndir = installed_pkgs_lst{i}.dir;
     dirs{end+1} = ndir;
     if (isfolder (fullfile (dirs{end}, "bin")))
       execpath = [execpath pathsep() fullfile(dirs{end}, "bin")];
     endif
     tmpdir = getarchdir (installed_pkgs_lst{i});
     if (isfolder (tmpdir))
       dirs{end + 1} = tmpdir;
diff --git a/scripts/plot/appearance/hidden.m b/scripts/plot/appearance/hidden.m
--- a/scripts/plot/appearance/hidden.m
+++ b/scripts/plot/appearance/hidden.m
@@ -46,17 +46,17 @@ function state = hidden (mode = "toggle"
   elseif (nargin == 1)
     if (! ischar (mode))
       error ("hidden: MODE must be a string");
     elseif (! any (strcmpi (mode, {"on", "off"})))
       error ('hidden: MODE must be "on" or "off"');
     endif
   endif
 
-  for h = (get (gca (), "children")).';
+  for h = (get (gca (), "children")).'
     [htype, htag] = get (h, {"type", "tag"}){:};
     if (strcmp (htype, "surface") || strcmp (htag, "trimesh"))
       fc = get (h, "facecolor");
       if ((! ischar (fc) && is_white (fc))
           || (ischar (fc) && strcmp (fc, "none")))
         switch (mode)
           case "on"
             set (h, "facecolor", "w");
diff --git a/scripts/plot/appearance/whitebg.m b/scripts/plot/appearance/whitebg.m
--- a/scripts/plot/appearance/whitebg.m
+++ b/scripts/plot/appearance/whitebg.m
@@ -114,17 +114,17 @@ function whitebg (varargin)
     ## before the legend axes object.
     hlist = sort (findobj (fig));
 
     for h = hlist'
       props = get (h);
       fields = fieldnames (props);
       ## Find all fields with the word color in them and invert.
       idx = find (! cellfun ("isempty", regexp (fields, 'color$')));
-      for field = fields(idx)';
+      for field = fields(idx)'
         c = props.(field{1});
         if (! ischar (c) && columns (c) == 3)
           set (h, field{1}, 1 - c);
         endif
       endfor
     endfor
 
   else  # 2nd argument such as a color or "none"
@@ -145,17 +145,17 @@ function whitebg (varargin)
       bg = rgb2hsv (get (fig, "color"));
       ## List of children without the figure and axes objects already changed
       hlist = setdiff (findobj (fig), hlist);
       for h = hlist'
         props = get (h);
         fields = fieldnames (props);
         ## Find all fields with the word color in them and adjust HSV.
         idx = find (! cellfun ("isempty", regexp (fields, 'color$')));
-        for field = fields(idx)';
+        for field = fields(idx)'
           c = props.(field{1});
           if (! ischar (c) && columns (c) == 3)
             set (h, field{1}, calc_contrast_color (bg, c));
           endif
         endfor
       endfor
 
     else
diff --git a/scripts/plot/draw/area.m b/scripts/plot/draw/area.m
--- a/scripts/plot/draw/area.m
+++ b/scripts/plot/draw/area.m
@@ -132,17 +132,17 @@ function h = area (varargin)
 
 endfunction
 
 function retval = __area__ (ax, x, y, bv, varargin)
 
   y0 = bv * ones (1, rows (y));
   y0 = zeros (1, rows (y));
   retval = [];
-  for i = 1: columns (y);
+  for i = 1: columns (y)
 
     lc = __next_line_color__ ();
 
     ## Must occur after __next_line_color__ in order to work correctly.
     hg = hggroup ();
     retval = [retval; hg];
     args = __add_datasource__ ("area", hg, {"x", "y"}, varargin{:});
 
diff --git a/scripts/plot/draw/comet.m b/scripts/plot/draw/comet.m
--- a/scripts/plot/draw/comet.m
+++ b/scripts/plot/draw/comet.m
@@ -68,17 +68,17 @@ function comet (varargin)
     num = numel (y);
     dn = round (num/10);
 
     hl = plot (x(1), y(1), "color", "r", "marker", "none",
                x(1), y(1), "color", "g", "marker", "none",
                x(1), y(1), "color", "b", "marker", "o");
     axis (limits);  # set manual limits to speed up plotting
 
-    for n = 2:(num+dn);
+    for n = 2:(num+dn)
       m = n - dn;
       m = max ([m, 1]);
       k = min ([n, num]);
       set (hl(1), "xdata", x(1:m), "ydata", y(1:m));
       set (hl(2), "xdata", x(m:k), "ydata", y(m:k));
       set (hl(3), "xdata", x(k),   "ydata", y(k));
       drawnow ();
       pause (p);
diff --git a/scripts/plot/draw/comet3.m b/scripts/plot/draw/comet3.m
--- a/scripts/plot/draw/comet3.m
+++ b/scripts/plot/draw/comet3.m
@@ -71,17 +71,17 @@ function comet3 (varargin)
     num = numel (y);
     dn = round (num/10);
 
     hl = plot3 (x(1), y(1), z(1), "color", "r", "marker", "none",
                 x(1), y(1), z(1), "color", "g", "marker", "none",
                 x(1), y(1), z(1), "color", "b", "marker", "o");
     axis (limits);  # set manual limits to speed up plotting
 
-    for n = 2:(num+dn);
+    for n = 2:(num+dn)
       m = n - dn;
       m = max ([m, 1]);
       k = min ([n, num]);
       set (hl(1), "xdata", x(1:m), "ydata", y(1:m), "zdata", z(1:m));
       set (hl(2), "xdata", x(m:k), "ydata", y(m:k), "zdata", z(m:k));
       set (hl(3), "xdata", x(k)  , "ydata", y(k)  , "zdata", z(k));
       drawnow ();
       pause (p);
diff --git a/scripts/plot/draw/private/__stem__.m b/scripts/plot/draw/private/__stem__.m
--- a/scripts/plot/draw/private/__stem__.m
+++ b/scripts/plot/draw/private/__stem__.m
@@ -442,17 +442,17 @@ function update_data (h, ~)
   y = get (h, "ydata");
   z = get (h, "zdata");
 
   if (! isempty (z) && size_equal (x, y, z))
     sz = min ([size(x); size(y); size(z)]);
     x = x(1:sz(1),1:sz(2));
     y = y(1:sz(1),1:sz(2));
     z = z(1:sz(1),1:sz(2));
-  elseif (numel (x) != numel (y));
+  elseif (numel (x) != numel (y))
     sz = min ([size(x); size(y)]);
     x = x(1:sz(1),1:sz(2));
     y = y(1:sz(1),1:sz(2));
   endif
   bl = get (h, "basevalue");
   nx = numel (x);
   x = x(:)';
   xt = [x; x; NaN(1, nx)](:);
diff --git a/scripts/plot/util/__actual_axis_position__.m b/scripts/plot/util/__actual_axis_position__.m
--- a/scripts/plot/util/__actual_axis_position__.m
+++ b/scripts/plot/util/__actual_axis_position__.m
@@ -63,17 +63,17 @@ function pos = __actual_axis_position__ 
       ## FIXME: This works for "axis square", but has not been
       ##        thoroughly tested for other aspect ratios.
       aspect_ratio_2d = [max(axis_obj.plotboxaspectratio(1:2)), ...
                              axis_obj.plotboxaspectratio(3)/sqrt(2)];
     endif
     orig_aspect_ratio_2d = pos_in_pixels(3:4);
     rel_aspect_ratio_2d = aspect_ratio_2d ./ orig_aspect_ratio_2d;
     rel_aspect_ratio_2d ./= max (rel_aspect_ratio_2d);
-    if (rel_aspect_ratio_2d(1) < rel_aspect_ratio_2d(2));
+    if (rel_aspect_ratio_2d(1) < rel_aspect_ratio_2d(2))
       dx = (1.0 - rel_aspect_ratio_2d(1)) * pos_in_pixels(3);
       pos_in_pixels += dx*[0.5, 0.0, -1.0, 0.0];
     elseif (rel_aspect_ratio_2d(1) > rel_aspect_ratio_2d(2))
       dy = (1.0 - rel_aspect_ratio_2d(2)) * pos_in_pixels(4);
       pos_in_pixels += dy*[0.0, 0.5, 0.0, -1.0];
     endif
     pos = pos_in_pixels ./ fig_position([3, 4, 3, 4]);
   elseif (strcmp (get (axis_obj.parent, "__graphics_toolkit__"), "gnuplot")
diff --git a/scripts/plot/util/private/__gnuplot_draw_axes__.m b/scripts/plot/util/private/__gnuplot_draw_axes__.m
--- a/scripts/plot/util/private/__gnuplot_draw_axes__.m
+++ b/scripts/plot/util/private/__gnuplot_draw_axes__.m
@@ -1845,17 +1845,17 @@ function idx = do_border_tick_3d (obj, p
     fputs (plot_stream, "set border 0x15;\n");
     mirrorstr = "nomirror";
   endif
 
   tick ('x', obj.xcolor, obj.tickdir, mirrorstr);
   tick ('y', obj.ycolor, obj.tickdir, mirrorstr);
   tick ('z', obj.zcolor, obj.tickdir, mirrorstr);
 
-  function tick (axischar, color, tickdir, mirrorstr);
+  function tick (axischar, color, tickdir, mirrorstr)
     if (isnumeric (color))
       if (length (color) == 3)
         colorspec = sprintf ('rgb "#%02x%02x%02x"', round (255*color));
       else
         colorspec = sprintf ("palatte %d", round (color));
       endif
     else
       colorspec = sprintf ('"%s"', color);
diff --git a/scripts/plot/util/subplot.m b/scripts/plot/util/subplot.m
--- a/scripts/plot/util/subplot.m
+++ b/scripts/plot/util/subplot.m
@@ -431,17 +431,17 @@ function subplot_align (h, d, rmupdate =
         return
       endif
 
       ## Reset outerpositions to their default value
       opos = getappdata (hsubplots, "__subplotouterposition__");
       if (iscell (opos))
         opos = cell2mat (opos);
       endif
-      for ii = 1:numel (hsubplots);
+      for ii = 1:numel (hsubplots)
         set (hsubplots(ii), "outerposition", opos(ii,:), ...
              "activepositionproperty", "position");
       endfor
 
       ## Compare current positions to default and compute the new ones
       curpos = get (hsubplots, "position");
       if (iscell (curpos))
         curpos = cell2mat (curpos);
diff --git a/scripts/polynomial/ppjumps.m b/scripts/polynomial/ppjumps.m
--- a/scripts/polynomial/ppjumps.m
+++ b/scripts/polynomial/ppjumps.m
@@ -45,17 +45,17 @@ function jumps = ppjumps (pp)
   dx = reshape (dx, [d, n-1]);
   dx = shiftdim (dx, nd - 1);
 
   ## Use Horner scheme.
   if (k>1)
     llim = shiftdim (reshape (P(1:(n-1) * prod (d), 1), [d, n-1]), nd - 1);
   endif
 
-  for i = 2 : k;
+  for i = 2 : k
     llim .*= dx;
     llim += shiftdim (reshape (P(1:(n-1) * prod (d), i), [d, n-1]), nd - 1);
   endfor
 
   rlim = shiftdim (ppval (pp, x(2:end-1)), nd - 1);
   jumps = shiftdim (rlim - llim, 1);
 
 endfunction
diff --git a/scripts/polynomial/ppval.m b/scripts/polynomial/ppval.m
--- a/scripts/polynomial/ppval.m
+++ b/scripts/polynomial/ppval.m
@@ -75,17 +75,17 @@ function yi = ppval (pp, xi)
 
   ## Use Horner scheme.
   if (k > 1)
     yi = shiftdim (reshape (Pidx(1,:), dimvec), ndv - 1);
   else
     yi = shiftdim (reshape (Pidx, dimvec), ndv - 1);
   endif
 
-  for i = 2 : k;
+  for i = 2 : k
     yi .*= dx;
     yi += shiftdim (reshape (Pidx(i,:), dimvec), ndv - 1);
   endfor
 
   ## Adjust shape.
   if ((numel (xi) > 1) || (length (d) == 1))
     yi = reshape (shiftdim (yi, 1), dimvec);
   endif
diff --git a/scripts/signal/arch_fit.m b/scripts/signal/arch_fit.m
--- a/scripts/signal/arch_fit.m
+++ b/scripts/signal/arch_fit.m
@@ -86,25 +86,25 @@ function [a, b] = arch_fit (y, x, p, ite
         iter = 50;
       endif
     endif
   endif
 
   esq = e.^2;
   Z = autoreg_matrix (esq, p);
 
-  for i = 1 : iter;
+  for i = 1 : iter
     h   = Z * a;
     tmp = esq ./ h.^2 - 1 ./ h;
     s   = 1 ./ h(1:T-p);
-    for j = 1 : p;
+    for j = 1 : p
       s -= a(j+1) * tmp(j+1:T-p+j);
     endfor
     r = 1 ./ h(1:T-p);
-    for j = 1:p;
+    for j = 1:p
       r += 2 * h(j+1:T-p+j).^2 .* esq(1:T-p);
     endfor
     r = sqrt (r);
     X_tilde = x(1:T-p, :) .* (r * ones (1,k));
     e_tilde = e(1:T-p) .*s ./ r;
     delta_b = inv (X_tilde' * X_tilde) * X_tilde' * e_tilde;
     b  += gamma * delta_b;
     e   = y - x * b;
diff --git a/scripts/signal/autoreg_matrix.m b/scripts/signal/autoreg_matrix.m
--- a/scripts/signal/autoreg_matrix.m
+++ b/scripts/signal/autoreg_matrix.m
@@ -39,17 +39,17 @@ function X = autoreg_matrix (y, k)
 
   if (! (isvector (y)))
     error ("autoreg_matrix: Y must be a vector");
   endif
 
   T = length (y);
   y = reshape (y, T, 1);
   X = ones (T, k+1);
-  for j = 1 : k;
+  for j = 1 : k
     X(:, j+1) = [(zeros (j, 1)); y(1:T-j)];
   endfor
 
 endfunction
 
 
 %!test
 %! K = 4;
diff --git a/scripts/signal/fftfilt.m b/scripts/signal/fftfilt.m
--- a/scripts/signal/fftfilt.m
+++ b/scripts/signal/fftfilt.m
@@ -80,17 +80,17 @@ function y = fftfilt (b, x, n)
       error ("fftfilt: N has to be a scalar");
     endif
     n = 2 ^ nextpow2 (max ([n, l_b]));
     L = n - l_b + 1;
     B = fft (b, n);
     B = B(:, ones (c_x,1));
     R = ceil (r_x / L);
     y = zeros (r_x, c_x);
-    for r = 1:R;
+    for r = 1:R
       lo = (r - 1) * L + 1;
       hi = min (r * L, r_x);
       tmp = zeros (n, c_x);
       tmp(1:(hi-lo+1),:) = x(lo:hi,:);
       tmp = ifft (fft (tmp) .* B);
       hi  = min (lo+n-1, r_x);
       y(lo:hi,:) = y(lo:hi,:) + tmp(1:(hi-lo+1),:);
     endfor
diff --git a/scripts/signal/periodogram.m b/scripts/signal/periodogram.m
--- a/scripts/signal/periodogram.m
+++ b/scripts/signal/periodogram.m
@@ -146,17 +146,17 @@ function [pxx, f] = periodogram (x, vara
     if (rr)
       x = [x(:); zeros(nfft-rr, 1)];
     endif
     x = sum (reshape (x, nfft, []), 2);
   endif
 
   if (! isempty (window))
     n = sumsq (window);
-  endif;
+  endif
   Pxx = (abs (fft (x, nfft))) .^ 2 / n;
 
   if (use_w_freq)
     Pxx /= 2*pi;
   else
     Pxx /= fs;
   endif
 
diff --git a/scripts/specfun/betaincinv.m b/scripts/specfun/betaincinv.m
--- a/scripts/specfun/betaincinv.m
+++ b/scripts/specfun/betaincinv.m
@@ -156,34 +156,34 @@ function x = betaincinv (y, a, b, tail =
   ## Special values have been already computed.
   todo = (y != 0) & (y != 1);
 
   ## We will invert the lower version for p < 0.5 and the upper otherwise.
   i_low = (p < 0.5);
   i_upp = (! i_low);
 
   idx = todo & i_low;
-  if (any (idx));
+  if (any (idx))
     n = nnz (idx);
     ## Function and derivative of the lower version.
     F = @(x, a, b, y) y - betainc (x, a, b);
     JF = @(x, a, b) - real (exp ((a-1) .* log (x) + (b-1) .* log1p (-x) + ...
                             gammaln (a+b) - gammaln (a) - gammaln (b)));
 
     ## Compute the initial guess with a bisection method of 10 steps.
     x0 = bisection_method (F, zeros (n,1), ones (n,1), ...
                            a(i_low), b(i_low), p(i_low), 10);
 
     ## Use Newton's method to iteratively find solution.
     x(i_low) = newton_method (F, JF, x0, a(i_low), b(i_low), p(i_low), ...
                               tol, maxit);
   endif
 
   idx = todo & i_upp;
-  if (any (idx));
+  if (any (idx))
     n = nnz (idx);
     ## Function and derivative of the upper version.
     F = @(x, a, b, y) y - betainc (x, a, b, "upper");
     JF = @(x, a, b) real (exp ((a-1) .* log (x) + (b-1) .* log1p (-x) + ...
                           gammaln (a+b) - gammaln (a) - gammaln (b)));
 
     ## Compute the initial guess with a bisection method of 10 steps.
     x0 = bisection_method (F, zeros (n,1), ones (n,1), ...
diff --git a/scripts/specfun/cosint.m b/scripts/specfun/cosint.m
--- a/scripts/specfun/cosint.m
+++ b/scripts/specfun/cosint.m
@@ -135,17 +135,17 @@ function y = cosint (x)
   end
   ssum = - xx .^ 2 / 4; # First term of the series expansion
   ## FIXME: This is way more precision than a double value can hold.
   gma = 0.57721566490153286060651209008; # Euler gamma constant
   yy = gma + log (complex (xx)) + ssum;  # log(complex(...) handles signed zero
   flag_sum = true (nnz (todo), 1);
   it = 0;
   maxit = 300;
-  while (any (flag_sum) && (++it < maxit));
+  while (any (flag_sum) && (++it < maxit))
     ssum .*= - xx .^ 2 * (2 * it) / ((2 * it + 2) ^ 2 * (2 * it + 1));
     yy(flag_sum) += ssum (flag_sum);
     flag_sum = (abs (ssum) >= tol);
   endwhile
   y(todo) = yy;
 
   ## Clean up values which are purely real
   flag_neg_zero_imag = (real (x) < 0) & (imag (x) == 0) & signbit (imag (x));
diff --git a/scripts/statistics/discrete_cdf.m b/scripts/statistics/discrete_cdf.m
--- a/scripts/statistics/discrete_cdf.m
+++ b/scripts/statistics/discrete_cdf.m
@@ -37,17 +37,17 @@ function cdf = discrete_cdf (x, v, p)
   elseif (! isvector (p) || (length (p) != length (v)))
     error ("discrete_cdf: P must be a vector with length (V) elements");
   elseif (! (all (p >= 0) && any (p)))
     error ("discrete_cdf: P must be a nonzero, non-negative vector");
   endif
 
   p = p(:) / sum (p);   # Reshape and normalize probability vector
 
-  if (isa (x, "single") || isa (v, "single") || isa (p, "single"));
+  if (isa (x, "single") || isa (v, "single") || isa (p, "single"))
     cdf = NaN (size (x), "single");
   else
     cdf = NaN (size (x));
   endif
 
   k = ! isnan (x);
   [vs, vi] = sort (v);
   cdf(k) = [0 ; cumsum(p(vi))](lookup (vs, x(k)) + 1);
diff --git a/scripts/statistics/discrete_inv.m b/scripts/statistics/discrete_inv.m
--- a/scripts/statistics/discrete_inv.m
+++ b/scripts/statistics/discrete_inv.m
@@ -38,25 +38,25 @@ function inv = discrete_inv (x, v, p)
   elseif (! isvector (p) || (length (p) != length (v)))
     error ("discrete_inv: P must be a vector with length (V) elements");
   elseif (any (isnan (p)))
     error ("discrete_rnd: P must not have any NaN elements");
   elseif (! (all (p >= 0) && any (p)))
     error ("discrete_inv: P must be a nonzero, non-negative vector");
   endif
 
-  if (isa (x, "single") || isa (v, "single") || isa (p, "single"));
+  if (isa (x, "single") || isa (v, "single") || isa (p, "single"))
     inv = NaN (size (x), "single");
   else
     inv = NaN (size (x));
   endif
 
   ## FIXME: This isn't elegant.  But cumsum and lookup together produce
   ## different results when called with a single or a double.
-  if (isa (p, "single"));
+  if (isa (p, "single"))
     p = double (p);
   endif
 
   [v, idx] = sort (v);
   p = cumsum (p(idx)(:)) / sum (p);  # Reshape and normalize probability vector
 
   k = (x == 0);
   inv(k) = v(1);
diff --git a/scripts/statistics/iqr.m b/scripts/statistics/iqr.m
--- a/scripts/statistics/iqr.m
+++ b/scripts/statistics/iqr.m
@@ -63,17 +63,17 @@ function y = iqr (x, dim)
   n = sz(dim);
   sz(dim) = 1;
   if (isa (x, "single"))
     y = zeros (sz, "single");
   else
     y = zeros (sz);
   endif
   stride = prod (sz(1:dim-1));
-  for i = 1 : nel / n;
+  for i = 1 : nel / n
     offset = i;
     offset2 = 0;
     while (offset > stride)
       offset -= stride;
       offset2 += 1;
     endwhile
     offset += offset2 * stride * n;
     rng = [0 : n-1] * stride + offset;
