# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1552337144 0
#      Mon Mar 11 20:45:44 2019 +0000
# Node ID e201cf0c736028bcaf565e71dee213ea53c50051
# Parent  a2aed4b49be36c13be033d82d5595f8b1bde7a40
# Parent  7a6366dbe77e877bd48135b929dbb0051572fae1
maint: Merge stable to default.

diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -763,17 +763,16 @@ namespace QtHandles
 
     gh_manager::auto_lock lock;
 
     figure::properties& fp = properties<figure> ();
     fp.set___device_pixel_ratio__ (screen->devicePixelRatio ());
 
     connect (window, SIGNAL (screenChanged (QScreen*)),
              this, SLOT (screenChanged (QScreen*)));
-
 #endif
   }
 
   void
   Figure::screenChanged (QScreen* screen)
   {
 #if defined (HAVE_QSCREEN_DEVICEPIXELRATIO)
     gh_manager::auto_lock lock;
@@ -784,16 +783,18 @@ namespace QtHandles
     if (old_dpr != new_dpr)
       {
         fp.set___device_pixel_ratio__ (new_dpr);
 
         // For some obscure reason, changing the __device_pixel_ratio__ property
         // from the GUI thread does not necessarily trigger a redraw. Force it.
         redraw ();
       }
+#else
+    octave_unused_parameter (screen);
 #endif
   }
 
   void
   Figure::enableMouseTracking (void)
   {
     // Enable mouse tracking on every widgets
     m_container->setMouseTracking (true);
diff --git a/libgui/graphics/module.mk b/libgui/graphics/module.mk
--- a/libgui/graphics/module.mk
+++ b/libgui/graphics/module.mk
@@ -126,32 +126,34 @@ TEMPLATE_SRC = \
 nodist_%canon_reldir%___init_qt___la_SOURCES = $(__init_qt___MOC)
 
 %canon_reldir%___init_qt___la_CPPFLAGS = \
   $(AM_CPPFLAGS) \
   $(FT2_CPPFLAGS) \
   $(FONTCONFIG_CPPFLAGS) \
   $(HDF5_CPPFLAGS) \
   @OCTGUI_DLL_DEFS@ \
-  @QT_CPPFLAGS@ \
+  @QT_OPENGL_CPPFLAGS@ \
   -Ilibgui/graphics -I$(srcdir)/libgui/graphics \
   -Isrc -I$(srcdir)/libgui/src \
   -Iliboctave \
   -I$(srcdir)/liboctave/array \
   -Iliboctave/numeric -I$(srcdir)/liboctave/numeric \
   -Iliboctave/operators -I$(srcdir)/liboctave/operators \
   -I$(srcdir)/liboctave/system \
   -I$(srcdir)/liboctave/util \
   -Ilibinterp -I$(srcdir)/libinterp \
   -Ilibinterp/parse-tree -I$(srcdir)/libinterp/parse-tree \
   -Ilibinterp/corefcn -I$(srcdir)/libinterp/corefcn \
   -I$(srcdir)/libinterp/octave-value
 
 %canon_reldir%___init_qt___la_LDFLAGS = \
-  -avoid-version -module $(NO_UNDEFINED_LDFLAG) $(WARN_LDFLAGS)
+  -avoid-version -module $(NO_UNDEFINED_LDFLAG) \
+  $(QT_OPENGL_LDFLAGS) \
+  $(WARN_LDFLAGS)
 
 DLD_LIBOCTGUI_LIBADD = $(OCT_GUI_LINK_DEPS)
 
 %canon_reldir%___init_qt___la_LIBADD = \
   $(DLD_LIBOCTGUI_LIBADD) \
   $(QT_OPENGL_LIBS) \
   $(OPENGL_LIBS)
 
diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -493,32 +493,35 @@ namespace octave
 #endif
           }
         else
           {
             std::transform (m_mfile_encoding.begin (),
                             m_mfile_encoding.end (),
                             m_mfile_encoding.begin (), ::tolower);
 
-            std::string codepage = (m_mfile_encoding.compare ("system") == 0)
+            std::string encoding = (m_mfile_encoding.compare ("system") == 0)
               ? octave_locale_charset_wrapper () : m_mfile_encoding;
 
-            // Check for valid codepage.
+            // Check for valid encoding name.
             void *codec
-              = octave_iconv_open_wrapper (codepage.c_str (), "utf-8");
+              = octave_iconv_open_wrapper (encoding.c_str (), "utf-8");
 
-            if (errno == EINVAL)
+            if (codec == reinterpret_cast<void *> (-1))
               {
                 m_mfile_encoding = saved_encoding;
-
-                error ("__mfile_encoding__: conversion from codepage '%s' not supported",
-                       codepage.c_str ());
+                if (errno == EINVAL)
+                  error ("__mfile_encoding__: conversion from encoding '%s' "
+                         "not supported", encoding.c_str ());
+                else
+                  error ("__mfile_encoding__: error %d opening encoding '%s'.",
+                         errno, encoding.c_str ());
               }
-
-            octave_iconv_close_wrapper (codec);
+            else
+              octave_iconv_close_wrapper (codec);
           }
 
       }
 
     // Synchronize the related gui preference for editor encoding
     octave::feval ("__octave_link_gui_preference__",
                    ovl ("editor/default_encoding", m_mfile_encoding));
 
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -1815,17 +1815,17 @@ dnl
 AC_DEFUN([OCTAVE_CHECK_QT_OPENGL_OFFSCREEN_OK], [
   dnl Normally the language and compiler flags would be set and restored
   dnl inside of the AC_CACHE_CHECK body.  Because we also need to check for
   dnl Qt header files associated with the compilation test, set and restore
   dnl these values outside of the AC_CACHE_CHECK for this macro only.
   AC_LANG_PUSH(C++)
   ac_octave_save_CPPFLAGS="$CPPFLAGS"
   ac_octave_save_CXXFLAGS="$CXXFLAGS"
-  CPPFLAGS="$QT_CPPFLAGS $CXXPICFLAG $CPPFLAGS"
+  CPPFLAGS="$QT_OPENGL_CPPFLAGS $CXXPICFLAG $CPPFLAGS"
   CXXFLAGS="$CXXPICFLAG $CXXFLAGS"
   AC_CHECK_HEADERS([QOffscreenSurface])
   AC_CACHE_CHECK([whether Qt supports full offscreen OpenGL rendering],
     [octave_cv_qt_opengl_os_ok],
     [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
          #if HAVE_WINDOWS_H
          #  include <windows.h>
          #endif
@@ -1869,17 +1869,17 @@ dnl
 AC_DEFUN([OCTAVE_CHECK_QT_OPENGL_OK], [
   dnl Normally the language and compiler flags would be set and restored
   dnl inside of the AC_CACHE_CHECK body.  Because we also need to check for
   dnl Qt header files associated with the compilation test, set and restore
   dnl these values outside of the AC_CACHE_CHECK for this macro only.
   AC_LANG_PUSH(C++)
   ac_octave_save_CPPFLAGS="$CPPFLAGS"
   ac_octave_save_CXXFLAGS="$CXXFLAGS"
-  CPPFLAGS="$QT_CPPFLAGS $CXXPICFLAG $CPPFLAGS"
+  CPPFLAGS="$QT_OPENGL_CPPFLAGS $CXXPICFLAG $CPPFLAGS"
   CXXFLAGS="$CXXPICFLAG $CXXFLAGS"
   AC_CHECK_HEADERS([QOpenGLWidget QGLWidget QGLFunctions_1_1])
   AC_CACHE_CHECK([whether Qt works with OpenGL and GLU],
     [octave_cv_qt_opengl_ok],
     [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
          #if HAVE_WINDOWS_H
          #  include <windows.h>
          #endif
@@ -2004,24 +2004,27 @@ AC_DEFUN([OCTAVE_CHECK_QT_VERSION], [AC_
     fi
   done
 
   if test $build_qt_gui = yes; then
     ## Retrieve Qt compilation and linker flags
     QT_CPPFLAGS="$($PKG_CONFIG --cflags-only-I $QT_MODULES | $SED -e 's/^ *$//')"
     QT_LDFLAGS="$($PKG_CONFIG --libs-only-L $QT_MODULES | $SED -e 's/^ *$//')"
     QT_LIBS="$($PKG_CONFIG --libs-only-l $QT_MODULES | $SED -e 's/^ *$//')"
+    QT_OPENGL_CPPFLAGS="$($PKG_CONFIG --cflags-only-I $QT_OPENGL_MODULE | $SED -e 's/^ *$//')"
+    QT_OPENGL_LDFLAGS="$($PKG_CONFIG --libs-only-L $QT_OPENGL_MODULE | $SED -e 's/^ *$//')"
     QT_OPENGL_LIBS="$($PKG_CONFIG --libs-only-l $QT_OPENGL_MODULE | $SED -e 's/^ *$//')"
 
     case $host_os in
       *darwin*)
         ## Qt might be installed in framework
         if test -z "$QT_LIBS"; then
           QT_LDFLAGS="`$PKG_CONFIG --libs-only-other $QT_MODULES | tr ' ' '\n' | $GREP -e '-F' | uniq | tr '\n' ' '`"
           QT_LIBS="`$PKG_CONFIG --libs-only-other $QT_MODULES | tr ' ' '\n' | $GREP -v -e '-F' | uniq | tr '\n' ' '`"
+          QT_OPENGL_LDFLAGS="`$PKG_CONFIG --libs-only-other $QT_OPENGL_MODULE | tr ' ' '\n' | $GREP -e '-F' | uniq | tr '\n' ' '`"
           QT_OPENGL_LIBS="`$PKG_CONFIG --libs-only-other $QT_OPENGL_MODULE | tr ' ' '\n' | $GREP -v -e '-F' | uniq | tr '\n' ' '`"
           ## Enabling link_all_deps works around libtool's imperfect handling
           ## of the -F flag
           AM_CONDITIONAL([AMCOND_LINK_ALL_DEPS],
                          [test $link_all_deps = yes || test -n "$QT_LDFLAGS"])
         fi
       ;;
     esac
@@ -2168,16 +2171,18 @@ AC_DEFUN([OCTAVE_CHECK_QT_VERSION], [AC_
   AC_SUBST(UICFLAGS)
   AC_SUBST(RCCFLAGS)
   AC_SUBST(LRELEASEFLAGS)
   AC_SUBST(QCOLLECTIONGENERATORFLAGS)
   AC_SUBST(QHELPGENERATORFLAGS)
   AC_SUBST(QT_CPPFLAGS)
   AC_SUBST(QT_LDFLAGS)
   AC_SUBST(QT_LIBS)
+  AC_SUBST(QT_OPENGL_CPPFLAGS)
+  AC_SUBST(QT_OPENGL_LDFLAGS)
   AC_SUBST(QT_OPENGL_LIBS)
 ])
 dnl
 dnl Check if the default Fortran INTEGER is 64 bits wide.
 dnl If cross-compiling, assume 4 bytes unless the cache value
 dnl is already set.
 dnl
 AC_DEFUN([OCTAVE_CHECK_SIZEOF_FORTRAN_INTEGER], [
