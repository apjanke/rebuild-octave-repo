# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1546205298 28800
#      Sun Dec 30 13:28:18 2018 -0800
# Branch stable
# Node ID 6e698f4606db8e807c9c76a2cda94208fe45d768
# Parent  26be3dc2900f1fe0f9fee19acdc155a04e35e0db
rewrite eval_string wrappers to silence deprecation warnings (bug #55266)

* oct-parse.yy, parse.h (eval_string): Rewrite eval_string deprecation wrapper
functions from Octave 4.4 to use octave::interpreter::eval_string.

diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -5397,16 +5397,33 @@ namespace octave
     if (*lst)
       {
         delete *lst;
         *lst = nullptr;
       }
   }
 }
 
+octave_value_list
+eval_string (const std::string& str, bool silent, int& parse_status,
+             int nargout)
+{
+  octave::interpreter& interp = octave::__get_interpreter__ ("eval_string");
+
+  return interp.eval_string (str, silent, parse_status, nargout);
+}
+
+octave_value
+eval_string (const std::string& str, bool silent, int& parse_status)
+{
+  octave::interpreter& interp = octave::__get_interpreter__ ("eval_string");
+
+  return interp.eval_string (str, silent, parse_status);
+}
+
 DEFMETHOD (eval, interp, args, nargout,
            doc: /* -*- texinfo -*-
 @deftypefn  {} {} eval (@var{try})
 @deftypefnx {} {} eval (@var{try}, @var{catch})
 Parse the string @var{try} and evaluate it as if it were an Octave
 program.
 
 If execution fails, evaluate the optional string @var{catch}.
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -587,16 +587,25 @@ namespace octave
   OCTAVE_DEPRECATED (5, "use 'octave::interpreter::eval_string' instead")
   extern OCTINTERP_API octave_value
   eval_string (const std::string&, bool silent, int& parse_status);
 
   extern OCTINTERP_API void
   cleanup_statement_list (tree_statement_list **lst);
 }
 
+OCTAVE_DEPRECATED (4.4, "use 'octave::interpreter::eval_string' instead")
+extern OCTINTERP_API octave_value_list
+eval_string (const std::string& str, bool silent, int& parse_status,
+             int nargout);
+
+OCTAVE_DEPRECATED (4.4, "use 'octave::interpreter::eval_string' instead")
+extern OCTINTERP_API octave_value
+eval_string (const std::string& str, bool silent, int& parse_status);
+
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
 OCTAVE_DEPRECATED (4.4, "use 'octave::get_help_from_file' instead")
 static inline std::string
 get_help_from_file (const std::string& nm, bool& symbol_found,
                     std::string& file)
 {
   return octave::get_help_from_file (nm, symbol_found, file);
@@ -660,31 +669,16 @@ feval (octave_function *fcn,
 
 OCTAVE_DEPRECATED (4.4, "use 'octave::feval' instead")
 static inline octave_value_list
 feval (const octave_value_list& args, int nargout = 0)
 {
   return octave::feval (args, nargout);
 }
 
-OCTAVE_DEPRECATED (4.4, "use 'octave::eval_string' instead")
-static inline octave_value_list
-eval_string (const std::string& str, bool silent, int& parse_status,
-             int nargout)
-{
-  return octave::eval_string (str, silent, parse_status, nargout);
-}
-
-OCTAVE_DEPRECATED (4.4, "use 'octave::eval_string' instead")
-static inline octave_value
-eval_string (const std::string& str, bool silent, int& parse_status)
-{
-  return octave::eval_string (str, silent, parse_status);
-}
-
 OCTAVE_DEPRECATED (4.4, "use 'octave::cleanup_statement_list' instead")
 static inline void
 cleanup_statement_list (octave::tree_statement_list **lst)
 {
   octave::cleanup_statement_list (lst);
 }
 
 #endif
