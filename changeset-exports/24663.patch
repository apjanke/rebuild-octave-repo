# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1517503772 -3600
#      Thu Feb 01 17:49:32 2018 +0100
# Node ID ca416267c65fb243838f1b1ed74915c857964caa
# Parent  276eca875721b5b4ae0079952c5ca24adde7ac22
oct-shlib: move common property to base class.

* oct-shlib.cc, oct-shlib.h: Move property "search_all_loaded" that was defined
separately in each child class to the base class "dynlib_rep".

diff --git a/liboctave/util/oct-shlib.cc b/liboctave/util/oct-shlib.cc
--- a/liboctave/util/oct-shlib.cc
+++ b/liboctave/util/oct-shlib.cc
@@ -185,23 +185,20 @@ namespace octave
     bool is_open (void) const
     {
       return (search_all_loaded || library != nullptr);
     }
 
   private:
 
     void *library;
-
-    bool search_all_loaded;
   };
 
   octave_dlopen_shlib::octave_dlopen_shlib (const std::string& f)
-    : dynamic_library::dynlib_rep (f), library (nullptr),
-      search_all_loaded (false)
+    : dynamic_library::dynlib_rep (f), library (nullptr)
   {
     int flags = 0;
 
     // Use RTLD_NOW to resolve all symbols before dlopen returns.
     // By using this option, dlopen will detect errors and Octave
     // won't exit if there are unresolved symbols in the file we are
     // loading, and we may even get a useful diagnostic.
 #  if defined (RTLD_NOW)
@@ -284,18 +281,16 @@ namespace octave
     void * search (const std::string& name,
                    dynamic_library::name_mangler mangler = 0);
 
     bool is_open (void) const { return (search_all_loaded || library != 0); }
 
   private:
 
     shl_t library;
-
-    bool search_all_loaded;
   };
 
   octave_shl_load_shlib::octave_shl_load_shlib (const std::string& f)
     : dynamic_library::dynlib_rep (f), library (0), search_all_loaded (false)
   {
     file = f;
 
     if (file.empty())
@@ -377,17 +372,17 @@ namespace octave
 
   static void
   set_dll_directory (const std::string& dir = "")
   {
     SetDllDirectory (dir.empty () ? 0 : dir.c_str ());
   }
 
   octave_w32_shlib::octave_w32_shlib (const std::string& f)
-    : dynamic_library::dynlib_rep (f), handle (0), search_all_loaded (false)
+    : dynamic_library::dynlib_rep (f), handle (0)
   {
     if (f.empty())
       {
         search_all_loaded = true;
         return;
       }
 
     std::string dir = sys::file_ops::dirname (f);
@@ -459,17 +454,17 @@ namespace octave
         lib_num = bytes_all_libs / size_lib;
         h_libs = static_cast<HMODULE *> (realloc (h_libs, bytes_all_libs));
         got_libs = EnumProcessModules (proc, h_libs, bytes_all_libs,
                                        &bytes_all_libs);
       }
 
      if (got_libs)
       {
-        for (int i = 0; i < (bytes_all_libs / size_lib); i++)
+        for (size_t i = 0; i < (bytes_all_libs / size_lib); i++)
           {
               // Check for function in library.
               function = reinterpret_cast<void *>
                            (GetProcAddress (h_libs[i], sym_name.c_str ()));
 
               if (function)
                 break;
           }
@@ -482,17 +477,17 @@ namespace octave
   }
 
   void *
   octave_w32_shlib::search (const std::string& name,
                             dynamic_library::name_mangler mangler)
   {
     void *function = nullptr;
 
-    if (! is_open ())
+    if (! search_all_loaded && ! is_open ())
       (*current_liboctave_error_handler)
         ("shared library %s is not open", file.c_str ());
 
     std::string sym_name = name;
 
     if (mangler)
       sym_name = mangler (name);
 
@@ -530,18 +525,16 @@ namespace octave
     void close (void);
 
     bool is_open (void) const { return (search_all_loaded || handle != 0); }
 
   private:
 
     NSObjectFileImage img;
     NSModule handle;
-
-    bool search_all_loaded;
   };
 
   octave_dyld_shlib::octave_dyld_shlib (const std::string& f)
     : dynamic_library::dynlib_rep (f), handle (0)
   {
     if (f.empty ())
       (*current_liboctave_error_handler)
         ("global search is not implemented for DYLD_API");
diff --git a/liboctave/util/oct-shlib.h b/liboctave/util/oct-shlib.h
--- a/liboctave/util/oct-shlib.h
+++ b/liboctave/util/oct-shlib.h
@@ -43,17 +43,19 @@ namespace octave
 
     typedef std::string (*name_mangler) (const std::string&);
 
     class dynlib_rep
     {
     public:
 
       dynlib_rep (void)
-        : count (1), file (), tm_loaded (time_t ()), fcn_names () { }
+        : count (1), search_all_loaded (false), file (), tm_loaded (time_t ()),
+          fcn_names ()
+      { }
 
     protected:
 
       dynlib_rep (const std::string& f);
 
     public:
 
       virtual ~dynlib_rep (void)
@@ -88,16 +90,17 @@ namespace octave
 
       bool remove_fcn_name (const std::string&);
 
       void clear_fcn_names (void) { fcn_names.clear (); }
 
     public:
 
       refcount<int> count;
+      bool search_all_loaded;
 
     protected:
 
       void fake_reload (void);
 
       std::string file;
       sys::time tm_loaded;
 
