# HG changeset patch
# User Rik <rik@octave.org>
# Date 1515267796 28800
#      Sat Jan 06 11:43:16 2018 -0800
# Node ID 22a2bc91cc7f28ae9240376357bd9ddb7122c68f
# Parent  194eb4bd202b769cc8b3af7a13d1b809782fa9cf
Add more BIST tests for linspace.

* data.cc (Flinspace): Change error message to refer to variables START,END
which are used in documentation.  Add BIST test for the spacing between
values created by linspace.  Add test for corner case of START=-0, END=0.
Add variable names to expected message for %!error tests.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -5109,17 +5109,17 @@ only a single value (@var{n} = 1) is req
   octave_value arg_2 = args(1);
 
   dim_vector sz1 = arg_1.dims ();
   bool isvector1 = sz1.ndims () == 2 && (sz1(0) == 1 || sz1(1) == 1);
   dim_vector sz2 = arg_2.dims ();
   bool isvector2 = sz2.ndims () == 2 && (sz2(0) == 1 || sz2(1) == 1);
 
   if (! isvector1 || ! isvector2)
-    error ("linspace: A, B must be scalars or vectors");
+    error ("linspace: START, END must be scalars or vectors");
 
   octave_value retval;
 
   if (arg_1.is_single_type () || arg_2.is_single_type ())
     {
       if (arg_1.iscomplex () || arg_2.iscomplex ())
         retval = do_linspace<FloatComplexMatrix> (arg_1, arg_2, npoints);
       else
@@ -5137,26 +5137,29 @@ only a single value (@var{n} = 1) is req
 }
 
 /*
 %!test
 %! x1 = linspace (1, 2);
 %! x2 = linspace (1, 2, 10);
 %! x3 = linspace (1, -2, 10);
 %! assert (size (x1) == [1, 100] && x1(1) == 1 && x1(100) == 2);
+%! assert (x(2) - x(1), (2 - 1)/ (100 - 1));
 %! assert (size (x2) == [1, 10] && x2(1) == 1 && x2(10) == 2);
+%! assert (x(2) - x(1), (2 - 1)/ (10 - 1));
 %! assert (size (x3) == [1, 10] && x3(1) == 1 && x3(10) == -2);
+%! assert (x(2) - x(1), (1 - -2)/ (10 - 1));
 
 ## Test complex values
 %!test
 %! exp = [1+0i, 2-1.25i, 3-2.5i, 4-3.75i, 5-5i];
 %! obs = linspace (1, 5-5i, 5);
 %! assert (obs, exp);
 
-## Test support for vectors in BASE and LIMIT
+## Test support for vectors in START and END
 %!assert (linspace ([1 2 3], [7 8 9]),
 %!        [linspace(1, 7); linspace(2, 8); linspace(3, 9)], 10*eps)
 %!assert (linspace ([1 2 3]', [7 8 9]'),
 %!        [linspace(1, 7); linspace(2, 8); linspace(3, 9)], 10*eps)
 %!assert (linspace ([1 2 3], 9),
 %!        [linspace(1, 9); linspace(2, 9); linspace(3, 9)], 10*eps)
 %!assert (linspace ([1 2 3]', 9),
 %!        [linspace(1, 9); linspace(2, 9); linspace(3, 9)], 10*eps)
@@ -5175,23 +5178,24 @@ only a single value (@var{n} = 1) is req
 %!assert (linspace (10, 20, 2), [10 20])
 %!assert (linspace (10, 20, 1), [20])
 %!assert (linspace (10, 20, 0), zeros (1, 0))
 %!assert (linspace (10, 20, -1), zeros (1, 0))
 %!assert (numel (linspace (0, 1, 2+eps)), 2)
 %!assert (numel (linspace (0, 1, 2-eps)), 1)
 %!assert (linspace (10, 20, 2.1), [10 20])
 %!assert (linspace (10, 20, 2.9), [10 20])
+%!assert (1 ./ linspace (-0, 0, 4), [-Inf, Inf, Inf, Inf]) 
 
 %!error linspace ()
 %!error linspace (1, 2, 3, 4)
 %!error <N must be a scalar> linspace (1, 2, [3, 4])
-%!error <must be scalars or vectors> linspace (ones (2,2), 2, 3)
-%!error <must be scalars or vectors> linspace (2, ones (2,2), 3)
-%!error <must be scalars or vectors> linspace (1, [], 3)
+%!error <START, END must be scalars or vectors> linspace (ones (2,2), 2, 3)
+%!error <START, END must be scalars or vectors> linspace (2, ones (2,2), 3)
+%!error <START, END must be scalars or vectors> linspace (1, [], 3)
 */
 
 // FIXME: should accept dimensions as separate args for N-D
 // arrays as well as 1-D and 2-D arrays.
 
 DEFUN (resize, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} resize (@var{x}, @var{m})
