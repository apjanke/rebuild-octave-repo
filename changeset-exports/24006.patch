# HG changeset patch
# User Rik <rik@octave.org>
# Date 1504634632 25200
#      Tue Sep 05 11:03:52 2017 -0700
# Node ID d21de523dbceb9fd5d4cf70f337fd4d2da85d519
# Parent  ce4fc86e8e77e64ec8441b463b4a085df0a59e31
Write WAV files of 32-bits in FLOAT format rather than PCM_32 (bug #45490).
Write 24 Bits Per Sample files as PCM_32, not PCM_24, for Matlab compatibility.
Add support for 64-bit samples in DOUBLE format.

* audioread.cc (Faudiowrite): Recode input validation to detect WAV output with
floating point input and 32-bit output and use SF_FLOAT_FORMAT.  Change decode
for 24 BPS to SF_PCM_32.  Add extra if test for 64 BPS and decode to
SF_DOUBLE_FORMAT.  Add FIXME note about incomplete input validation of
SampleRate.  Add input validation that Quality value is a scalar.
Add BIST tests for input validation.

diff --git a/libinterp/dldfcn/audioread.cc b/libinterp/dldfcn/audioread.cc
--- a/libinterp/dldfcn/audioread.cc
+++ b/libinterp/dldfcn/audioread.cc
@@ -290,16 +290,18 @@ Comment.
     scale = std::pow (2.0, 15);
   else if (args(1).is_int32_type ())
     scale = std::pow (2.0, 31);
   else if (args(1).isinteger ())
     err_wrong_type_arg ("audiowrite", args(1));
 
   Matrix audio = args(1).matrix_value ();
 
+  // FIXME: SampleRate is supposed to be a positive scalar greater than 0
+  //        Need check for that, and possibly convert to uint.
   int samplerate = args(2).int_value ();
 
   std::string ext;
   size_t dotpos = filename.find_last_of ('.');
   if (dotpos != std::string::npos)
     ext = filename.substr (dotpos + 1);
   std::transform (ext.begin (), ext.end (), ext.begin (), ::tolower);
 
@@ -367,32 +369,43 @@ Comment.
               if ((info.format & SF_FORMAT_TYPEMASK) == SF_FORMAT_WAV)
                 info.format |= SF_FORMAT_PCM_U8;
               else
                 info.format |= SF_FORMAT_PCM_S8;
             }
           else if (bits == 16)
             info.format |= SF_FORMAT_PCM_16;
           else if (bits == 24)
-            info.format |= SF_FORMAT_PCM_24;
+            info.format |= SF_FORMAT_PCM_32;
           else if (bits == 32)
-            info.format |= SF_FORMAT_PCM_32;
+            {
+              if ((info.format & SF_FORMAT_TYPEMASK) == SF_FORMAT_WAV
+                  && args(1).isfloat ())
+                info.format |= SF_FORMAT_FLOAT;
+              else
+                info.format |= SF_FORMAT_PCM_32;
+            }
+          else if (bits == 64)
+            info.format |= SF_FORMAT_DOUBLE;
           else
             error ("audiowrite: wrong number of bits specified");
         }
       else if (keyword == "bitrate")
         warning_with_id ("Octave:audiowrite:unused-parameter",
                          "audiowrite: 'BitRate' accepted for Matlab "
                          "compatibility, but is ignored");
       else if (keyword == "quality")
         {
-          double value = value_arg.xdouble_value ("audiowrite: Quality value must be a scalar");
+          if (! value_arg.is_scalar_type ())
+            error ("audiowrite: Quality value must be a scalar");
+
+          double value = value_arg.xdouble_value ("audiowrite: Quality value must be a numeric scalar between 0 and 100");
 
           if (octave::math::isnan (value) || value < 0 || value > 100)
-            error ("audiowrite: Quality must be a number between 0 and 100");
+            error ("audiowrite: Quality value must be a number between 0 and 100");
 
           quality = value / 100;
         }
       else if (keyword == "title")
         title = value_arg.string_value ();
       else if (keyword == "artist")
         artist = value_arg.string_value ();
       else if (keyword == "comment")
@@ -452,16 +465,30 @@ Comment.
   octave_unused_parameter (args);
 
   err_disabled_feature ("audiowrite",
                         "reading and writing sound files through libsndfile");
 
 #endif
 }
 
+/*
+## Test input validation
+%!testif HAVE_SNDFILE
+%! fail ("audiowrite (1, 1, 8e3)", "FILENAME must be a string");
+%! fail ("audiowrite ('foo', int64 (1), 8e3)", "wrong type argument 'int64 scalar'");
+%! fail ("audiowrite ('foo', 1, 8e3, 'bitspersample')", "invalid number of arguments");
+%! fail ("audiowrite ('foo', 1, 8e3, 'bitspersample', 48)", "wrong number of bits specified");
+%! fail ("audiowrite ('foo', 1, 8e3, 'quality', [2 3 4])", "Quality value must be a scalar");
+%! fail ("audiowrite ('foo', 1, 8e3, 'quality', NaN)", "Quality value must be .* between 0 and 100");
+%! fail ("audiowrite ('foo', 1, 8e3, 'quality', -1)", "Quality value must be .* between 0 and 100");
+%! fail ("audiowrite ('foo', 1, 8e3, 'quality', 101)", "Quality value must be .* between 0 and 100");
+%! fail ("audiowrite ('foo', 1, 8e3, 'foo', 'bar')", "unrecognized option: 'foo'");
+*/
+
 DEFUN_DLD (audioinfo, args, ,
            doc: /* -*- texinfo -*-
 @deftypefn {} {@var{info} =} audioinfo (@var{filename})
 Return information about an audio file specified by @var{filename}.
 
 The output @var{info} is a structure containing the following fields:
 
 @table @samp
