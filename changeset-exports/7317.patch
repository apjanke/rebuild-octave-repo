# HG changeset patch
# User jwe
# Date 1197654214 0
#      Fri Dec 14 17:43:34 2007 +0000
# Node ID 11c5f1ee553e891940417310ae9c49b5c2f17c83
# Parent  fac781a4078de17755248ab40e184ad287b0262e
[project @ 2007-12-14 17:42:55 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,15 @@
 2007-12-14  David Bateman  <dbateman@free.fr>
 
+	* plot/contour3.m, plot/__contour__.m: Handle linespec.
+	* plot/contour.m: Doc fix.
+	* plot/__go_draw_axes__.m (case "patch"): Include "lt" in lt string.
+	Include linetype in withclause.
+
 	* plot/__go_draw_axes__.m (__calc_dimensions__): New function.
 	Use it to determine dimensions.  Consolidate all 3-d settings.
 
 2007-12-13  John W. Eaton  <jwe@octave.org>
 
 	* image/imshow.m: Turn axis visibility off.
 	Don't scale true color images.
 	* image/image.m: Set axis layer property to "top".
diff --git a/scripts/plot/__contour__.m b/scripts/plot/__contour__.m
--- a/scripts/plot/__contour__.m
+++ b/scripts/plot/__contour__.m
@@ -18,21 +18,38 @@
 
 ## Undocumented internal function.
 
 function [c, h] = __contour__ (varargin)
 
   ax = varargin{1};
   z = varargin{2};
 
+  linespec.linestyle = "-";
+  linespec.color = "flat";
+  for i = 3 : nargin
+    arg = varargin {i};
+    if ((ischar (arg) || iscell (arg)))
+      [linespec, valid] = __pltopt__ ("quiver", arg, false);
+      if (isempty (linespec.color))
+	linespec.color = "flat";
+      endif
+      if (valid)
+	have_line_spec = true;
+	varargin(i) = [];
+	break;
+      endif
+    endif
+  endfor
+
   if (ischar (z))
     if (strcmp (z, "none"))
       z = NaN;
     elseif (strcmp (z, "base"))
-      if (nargin == 1)
+      if (nargin < 3)
 	z = varargin{1};
       else
 	z = varargin{3};
       endif
       z = 2 * (min (z(:)) - max (z(:)));
     elseif (! strcmp (z, "level"))
       error ("unrecognized z argument");
     endif
@@ -50,20 +67,23 @@ function [c, h] = __contour__ (varargin)
     if (all (c(:,i1+1) == c(:,i1+clen)))
       p = c(:, i1+1:i1+clen-1);
     else
       p = [c(:, i1+1:i1+clen), NaN(2, 1)];
     endif
 
     if (isnan (z))
       h = [h; patch(ax, p(1,:), p(2,:), "facecolor", "none", 
-		    "edgecolor", "flat", "cdata", clev)];
+		    "edgecolor", linespec.color, "linestyle", 
+		    linespec.linestyle, "cdata", clev)];
     elseif (!ischar(z))
       h = [h; patch(ax, p(1,:), p(2,:), z * ones (1, columns (p)), "facecolor",
-		    "none", "edgecolor", "flat", "cdata", clev)];
+		    "none", "edgecolor", linespec.color, 
+		    "linestyle", linespec.linestyle, "cdata", clev)];
     else
       h = [h; patch(ax, p(1,:), p(2,:), clev * ones (1, columns (p)),
-		    "facecolor", "none", "edgecolor", "flat", "cdata", clev)];
+		    "facecolor", "none", "edgecolor", linespec.color, 
+		    "linestyle", linespec.linestyle, "cdata", clev)];
     endif
     i1 += clen+1;
   endwhile
   
 endfunction
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -661,23 +661,23 @@ function __go_draw_axes__ (h, plot_strea
 	       endif
              else
 	       color = [0, 0, 0];
              endif
 
 	     if (isfield (obj, "linestyle"))
 	       switch (obj.linestyle)
 		 case "-"
-		   lt = "1";
+		   lt = "lt 1";
 		 case "--"
-		   lt = "2";
+		   lt = "lt 2";
 		 case ":"
-		   lt = "3";
+		   lt = "lt 3";
 		 case "-."
-		   lt = "6";
+		   lt = "lt 6";
 		 case "none"
 		   lt = "";
 		 otherwise
 		   lt = "";
 	       endswitch
 	     else
 	       lt = "";
 	     endif
@@ -751,18 +751,18 @@ function __go_draw_axes__ (h, plot_strea
 
 	     if (have_newer_gnuplot)
 	       if (mono)
 		 colorspec = "";
 	       else
 		 colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
 				      round (255*color));
 	       endif
-	       withclause{data_idx} = sprintf ("with %s %s %s %s",
-					       style, pt, ps, colorspec);
+	       withclause{data_idx} = sprintf ("with %s %s %s %s %s",
+					       style, pt, lt, ps, colorspec);
 	     else
 	       if (isequal (color, [0,0,0]))
 		 typ = -1;
 	       elseif (isequal (color, [1,0,0]))
 		 typ = 1;
 	       elseif (isequal (color, [0,1,0]))
 		 typ = 2;
 	       elseif (isequal (color, [0,0,1]))
diff --git a/scripts/plot/contour.m b/scripts/plot/contour.m
--- a/scripts/plot/contour.m
+++ b/scripts/plot/contour.m
@@ -13,36 +13,41 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{c} =} contour (@var{z})
-## @deftypefnx {Function File} {@var{c} =} contour (@var{z}, @var{vn})
-## @deftypefnx {Function File} {@var{c} =} contour (@var{x}, @var{y}, @var{z})
-## @deftypefnx {Function File} {@var{c} =} contour (@var{x}, @var{y}, @var{z}, @var{vn})
-## @deftypefnx {Function File} {@var{c} =} contour (@var{h}, @dots{})
+## @deftypefn {Function File} {} contour (@var{z})
+## @deftypefnx {Function File} {} contour (@var{z}, @var{vn})
+## @deftypefnx {Function File} {} contour (@var{x}, @var{y}, @var{z})
+## @deftypefnx {Function File} {} contour (@var{x}, @var{y}, @var{z}, @var{vn})
+## @deftypefnx {Function File} {} contour (@dots{}, @var{style})
+## @deftypefnx {Function File} {} contour (@var{h}, @dots{})
 ## @deftypefnx {Function File} {[@var{c}, @var{h}] =} contour (@dots{})
 ## Plot level curves (contour lines) of the matrix @var{z}, using the
 ## contour matrix @var{c} computed by @code{contourc} from the same
 ## arguments; see the latter for their interpretation.  The set of
 ## contour levels, @var{c}, is only returned if requested.  For example:
 ##
 ## @example
 ## @group
 ## x = 0:2;
 ## y = x;
 ## z = x' * y;
 ## contour (x, y, z, 2:3)
 ## @end group
 ## @end example
 ##
+## The style to use for the plot can be defined with a line style @var{style}
+## in a similar manner to the line styles used with the @code{plot} command.
+## Any markers defined by @var{style} are ignored.
+##
 ## The optional input and output argument @var{h} allows an axis handle to 
 ## be passed to @code{contour} and the handles to the contour objects to be
 ## returned.
 ## @seealso{contourc, patch, plot}
 ## @end deftypefn
 
 ## Author: shaia
 
diff --git a/scripts/plot/contour3.m b/scripts/plot/contour3.m
--- a/scripts/plot/contour3.m
+++ b/scripts/plot/contour3.m
@@ -12,37 +12,42 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{c} =} contour3 (@var{z})
-## @deftypefnx {Function File} {@var{c} =} contour3 (@var{z}, @var{vn})
-## @deftypefnx {Function File} {@var{c} =} contour3 (@var{x}, @var{y}, @var{z})
-## @deftypefnx {Function File} {@var{c} =} contour3 (@var{x}, @var{y}, @var{z}, @var{vn})
-## @deftypefnx {Function File} {@var{c} =} contour3 (@var{h}, @dots{})
+## @deftypefn {Function File} {} contour3 (@var{z})
+## @deftypefnx {Function File} {} contour3 (@var{z}, @var{vn})
+## @deftypefnx {Function File} {} contour3 (@var{x}, @var{y}, @var{z})
+## @deftypefnx {Function File} {} contour3 (@var{x}, @var{y}, @var{z}, @var{vn})
+## @deftypefnx {Function File} {} contour3 (@dots{}, @var{style})
+## @deftypefnx {Function File} {} contour3 (@var{h}, @dots{})
 ## @deftypefnx {Function File} {[@var{c}, @var{h}] =} contour3 (@dots{})
 ## Plot level curves (contour lines) of the matrix @var{z}, using the
 ## contour matrix @var{c} computed by @code{contourc} from the same
 ## arguments; see the latter for their interpretation.  The contours are
 ## ploted at the Z level corresponding to their contour. The set of
 ## contour levels, @var{c}, is only returned if requested.  For example:
 ##
 ## @example
 ## @group
 ## contour3 (peaks (19));
 ## hold on
 ## surface (peaks (19), 'FaceColor', 'none', 'EdgeColor', 'black')
 ## colormap hot
 ## @end group
 ## @end example
 ##
+## The style to use for the plot can be defined with a line style @var{style}
+## in a similar manner to the line styles used with the @code{plot} command.
+## Any markers defined by @var{style} are ignored.
+##
 ## The optional input and output argument @var{h} allows an axis handle to 
 ## be passed to @code{contour} and the handles to the contour objects to be
 ## returned.
 ## @seealso{contourc, patch, plot}
 ## @end deftypefn
 
 function [c, h] = contour3 (varargin)
 
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -2700,17 +2700,17 @@ patch::properties::get (const caseless_s
   else if (name.compare ("faces"))
     retval = faces;
   else if (name.compare ("vertices"))
     retval = vertices;
   else if (name.compare ("facecolor"))
     retval = facecolor;
   else if (name.compare ("facealpha"))
     retval = facealpha;
-  else if (name.compare ("egdecolor"))
+  else if (name.compare ("edgecolor"))
     retval = edgecolor;
   else if (name.compare ("linestyle"))
     retval = linestyle;
   else if (name.compare ("linewidth"))
     retval = linewidth;
   else if (name.compare ("marker"))
     retval = marker;
   else if (name.compare ("markeredgecolor"))
