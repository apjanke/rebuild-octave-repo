# HG changeset patch
# User Rik <rik@octave.org>
# Date 1523810520 25200
#      Sun Apr 15 09:42:00 2018 -0700
# Branch stable
# Node ID 75eea4768e248aec6a8c5cff2952cd31eca31c04
# Parent  0bc58956aa402486082f1ddb80b802f92d004026
Add BIST tests for colloc input validation (bug #53653)


* colloc.cc: Add '#include <algorithm>" to list of includes.
* colloc.cc (Fcolloc): Use std::transform to make optional string argument
lower case.  Change input parsing to directly look for strings "r","right",
"l", "left".  Change error message about incorrect number of roots to be
clearer.  Add BIST tests for input validation.

diff --git a/libinterp/corefcn/colloc.cc b/libinterp/corefcn/colloc.cc
--- a/libinterp/corefcn/colloc.cc
+++ b/libinterp/corefcn/colloc.cc
@@ -19,16 +19,17 @@ along with Octave; see the file COPYING.
 <https://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <algorithm>
 #include <string>
 
 #include "CollocWt.h"
 #include "lo-mappers.h"
 
 #include "defun.h"
 #include "error.h"
 #include "ovl.h"
@@ -62,28 +63,29 @@ Reference: @nospell{J. Villadsen}, @nosp
   octave_idx_type ntot = ncol;
   octave_idx_type left = 0;
   octave_idx_type right = 0;
 
   for (int i = 1; i < nargin; i++)
     {
       std::string s = args(i).xstring_value ("colloc: optional arguments must be strings");
 
-      if ((s.length () == 1 && (s[0] == 'R' || s[0] == 'r')) || s == "right")
+      std::transform (s.begin (), s.end (), s.begin (), ::tolower);
+
+      if (s == "r" || s == "right")
         right = 1;
-      else if ((s.length () == 1 && (s[0] == 'L' || s[0] == 'l'))
-               || s == "left")
+      else if (s == "l" || s == "left")
         left = 1;
       else
         error (R"(colloc: string argument must be "left" or "right")");
     }
 
   ntot += left + right;
   if (ntot < 1)
-    error ("colloc: the total number of roots must be positive");
+    error (R"("colloc: the total number of roots (N + "left" + "right") must be >= 1)");
 
   CollocWt wts (ncol, left, right);
 
   ColumnVector r = wts.roots ();
   Matrix A = wts.first ();
   Matrix B = wts.second ();
   ColumnVector q = wts.quad_weights ();
 
@@ -92,9 +94,19 @@ Reference: @nospell{J. Villadsen}, @nosp
 
 /*
 
 %!assert (colloc (1), 0.5)
 %!assert (colloc (1, "left"), [0; 0.5])
 %!assert (colloc (1, "right"), [0.5; 1])
 %!assert (colloc (1, "left", "right"), [0; 0.5; 1])
 
+## Test input validation
+%!error colloc ()
+%!error colloc (1,2,3,4)
+%!error <N must be a scalar> colloc (ones (2,2))
+%!error <N cannot be NaN> colloc (NaN)
+%!error <N must be positive> colloc (-1)
+%!error <optional arguments must be strings> colloc (1, 1)
+%!error <string argument must be "left" or "right"> colloc (1, "foobar")
+%!error <total number of roots .* must be .= 1> colloc (0)
+
 */
