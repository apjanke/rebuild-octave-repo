# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1519919676 -3600
#      Thu Mar 01 16:54:36 2018 +0100
# Branch stable
# Node ID ed8090ee632c5a8974e302edb3c22805eacc736a
# Parent  e3ec480f36e41cabb72feff6d0c33aa7fcaf3e6e
Make only one iterative refinement after solving sparse systems (bug #53140).

* CSparse.cc (fsolve): Set UMFPACK_IRSTEP to 1.

* dSparse.cc (fsolve): Set UMFPACK_IRSTEP to 1.

* sparse.txi: Document it.

diff --git a/doc/interpreter/sparse.txi b/doc/interpreter/sparse.txi
--- a/doc/interpreter/sparse.txi
+++ b/doc/interpreter/sparse.txi
@@ -783,18 +783,18 @@ or backward substitution, and goto 8
 @item If the matrix is an upper triangular matrix with column permutations
 or lower triangular matrix with row permutations, perform a sparse forward
 or backward substitution, and goto 8
 
 @item If the matrix is square, Hermitian with a real positive diagonal, attempt
 sparse Cholesky@tie{}factorization using @sc{cholmod}.
 
 @item If the sparse Cholesky@tie{}factorization failed or the matrix is not
-Hermitian with a real positive diagonal, and the matrix is square, factorize
-using @sc{umfpack}.
+Hermitian with a real positive diagonal, and the matrix is square, factorize,
+solve, and perform one refinement iteration using @sc{umfpack}.
 
 @item If the matrix is not square, or any of the previous solvers flags
 a singular or near singular matrix, find a minimum norm solution using
 @sc{cxsparse}@footnote{The @sc{cholmod}, @sc{umfpack} and @sc{cxsparse}
 packages were written by Tim Davis and are available at
 @url{http://www.cise.ufl.edu/research/sparse/}}.
 @end enumerate
 
diff --git a/liboctave/array/CSparse.cc b/liboctave/array/CSparse.cc
--- a/liboctave/array/CSparse.cc
+++ b/liboctave/array/CSparse.cc
@@ -5803,16 +5803,18 @@ SparseComplexMatrix::fsolve (MatrixType&
         {
 #if defined (HAVE_UMFPACK)
           Matrix Control, Info;
           void *Numeric = factorize (err, rcond, Control, Info,
                                      sing_handler, calc_cond);
 
           if (err == 0)
             {
+              // one iterative refinement instead of the default two in UMFPACK
+              Control (UMFPACK_IRSTEP) = 1;
               octave_idx_type b_nr = b.rows ();
               octave_idx_type b_nc = b.cols ();
               int status = 0;
               double *control = Control.fortran_vec ();
               double *info = Info.fortran_vec ();
               const octave_idx_type *Ap = cidx ();
               const octave_idx_type *Ai = ridx ();
               const Complex *Ax = data ();
@@ -6069,16 +6071,18 @@ SparseComplexMatrix::fsolve (MatrixType&
         {
 #if defined (HAVE_UMFPACK)
           Matrix Control, Info;
           void *Numeric = factorize (err, rcond, Control, Info,
                                      sing_handler, calc_cond);
 
           if (err == 0)
             {
+              // one iterative refinement instead of the default two in UMFPACK
+              Control (UMFPACK_IRSTEP) = 1;
               octave_idx_type b_nr = b.rows ();
               octave_idx_type b_nc = b.cols ();
               int status = 0;
               double *control = Control.fortran_vec ();
               double *info = Info.fortran_vec ();
               const octave_idx_type *Ap = cidx ();
               const octave_idx_type *Ai = ridx ();
               const Complex *Ax = data ();
@@ -6354,16 +6358,18 @@ SparseComplexMatrix::fsolve (MatrixType&
         {
 #if defined (HAVE_UMFPACK)
           Matrix Control, Info;
           void *Numeric = factorize (err, rcond, Control, Info,
                                      sing_handler, calc_cond);
 
           if (err == 0)
             {
+              // one iterative refinement instead of the default two in UMFPACK
+              Control (UMFPACK_IRSTEP) = 1;
               octave_idx_type b_nr = b.rows ();
               octave_idx_type b_nc = b.cols ();
               int status = 0;
               double *control = Control.fortran_vec ();
               double *info = Info.fortran_vec ();
               const octave_idx_type *Ap = cidx ();
               const octave_idx_type *Ai = ridx ();
               const Complex *Ax = data ();
@@ -6599,16 +6605,18 @@ SparseComplexMatrix::fsolve (MatrixType&
         {
 #if defined (HAVE_UMFPACK)
           Matrix Control, Info;
           void *Numeric = factorize (err, rcond, Control, Info,
                                      sing_handler, calc_cond);
 
           if (err == 0)
             {
+              // one iterative refinement instead of the default two in UMFPACK
+              Control (UMFPACK_IRSTEP) = 1;
               octave_idx_type b_nr = b.rows ();
               octave_idx_type b_nc = b.cols ();
               int status = 0;
               double *control = Control.fortran_vec ();
               double *info = Info.fortran_vec ();
               const octave_idx_type *Ap = cidx ();
               const octave_idx_type *Ai = ridx ();
               const Complex *Ax = data ();
diff --git a/liboctave/array/dSparse.cc b/liboctave/array/dSparse.cc
--- a/liboctave/array/dSparse.cc
+++ b/liboctave/array/dSparse.cc
@@ -5855,16 +5855,18 @@ SparseMatrix::fsolve (MatrixType& mattyp
         {
 #if defined (HAVE_UMFPACK)
           Matrix Control, Info;
           void *Numeric =
             factorize (err, rcond, Control, Info, sing_handler, calc_cond);
 
           if (err == 0)
             {
+              // one iterative refinement instead of the default two in UMFPACK
+              Control (UMFPACK_IRSTEP) = 1;
               const double *Bx = b.fortran_vec ();
               retval.resize (b.rows (), b.cols ());
               double *result = retval.fortran_vec ();
               octave_idx_type b_nr = b.rows ();
               octave_idx_type b_nc = b.cols ();
               int status = 0;
               double *control = Control.fortran_vec ();
               double *info = Info.fortran_vec ();
@@ -6092,16 +6094,18 @@ SparseMatrix::fsolve (MatrixType& mattyp
         {
 #if defined (HAVE_UMFPACK)
           Matrix Control, Info;
           void *Numeric = factorize (err, rcond, Control, Info,
                                      sing_handler, calc_cond);
 
           if (err == 0)
             {
+              // one iterative refinement instead of the default two in UMFPACK
+              Control (UMFPACK_IRSTEP) = 1;
               octave_idx_type b_nr = b.rows ();
               octave_idx_type b_nc = b.cols ();
               int status = 0;
               double *control = Control.fortran_vec ();
               double *info = Info.fortran_vec ();
               const octave_idx_type *Ap = cidx ();
               const octave_idx_type *Ai = ridx ();
               const double *Ax = data ();
@@ -6348,16 +6352,18 @@ SparseMatrix::fsolve (MatrixType& mattyp
         {
 #if defined (HAVE_UMFPACK)
           Matrix Control, Info;
           void *Numeric = factorize (err, rcond, Control, Info,
                                      sing_handler, calc_cond);
 
           if (err == 0)
             {
+              // one iterative refinement instead of the default two in UMFPACK
+              Control (UMFPACK_IRSTEP) = 1;
               octave_idx_type b_nr = b.rows ();
               octave_idx_type b_nc = b.cols ();
               int status = 0;
               double *control = Control.fortran_vec ();
               double *info = Info.fortran_vec ();
               const octave_idx_type *Ap = cidx ();
               const octave_idx_type *Ai = ridx ();
               const double *Ax = data ();
@@ -6607,16 +6613,18 @@ SparseMatrix::fsolve (MatrixType& mattyp
         {
 #if defined (HAVE_UMFPACK)
           Matrix Control, Info;
           void *Numeric = factorize (err, rcond, Control, Info,
                                      sing_handler, calc_cond);
 
           if (err == 0)
             {
+              // one iterative refinement instead of the default two in UMFPACK
+              Control (UMFPACK_IRSTEP) = 1;
               octave_idx_type b_nr = b.rows ();
               octave_idx_type b_nc = b.cols ();
               int status = 0;
               double *control = Control.fortran_vec ();
               double *info = Info.fortran_vec ();
               const octave_idx_type *Ap = cidx ();
               const octave_idx_type *Ai = ridx ();
               const double *Ax = data ();
