# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1235463688 -3600
#      Tue Feb 24 09:21:28 2009 +0100
# Node ID d6de39523f03250fd3ce2d0be24733580959cf56
# Parent  538184c540a9aff2267d64ceae949f80aeb56899
improve the diag & perm matrices text

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2009-02-23  Jaroslav Hajek  <highegg@gmail.com>
+
+	* interpreter/diagperm.txi: Use TeX alternatives in some
+	formulas, improve examples, delete superfluous defs.
+
 2009-02-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* interpreter/diagperm.txi: New file.
 	* interpreter/octave.texi: Reference it.
 	* intepreter/Makefile.in: Include it.
 	* interpreter/matrix.txi: Move @DOCSTRING(diag) to diagperm.txi.
 
 
diff --git a/doc/interpreter/diagperm.txi b/doc/interpreter/diagperm.txi
--- a/doc/interpreter/diagperm.txi
+++ b/doc/interpreter/diagperm.txi
@@ -11,48 +11,55 @@
 @c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 @c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 @c for more details.
 @c 
 @c You should have received a copy of the GNU General Public License
 @c along with Octave; see the file COPYING.  If not, see
 @c <http://www.gnu.org/licenses/>.
 
-@ifhtml
-@set htmltex
-@end ifhtml
-@iftex
-@set htmltex
-@end iftex
-
 @node Diagonal and Permutation Matrices 
 @chapter Diagonal and Permutation Matrices
 
 @menu
 * Basic Usage::          Creation and Manipulation of Diagonal and Permutation Matrices
 * Matrix Algebra::   	 Linear Algebra with Diagonal and Permutation Matrices
 * Function Support::     Functions That Are Aware of These Matrices
 * Example Codes::        Some Examples of Usage
 * Zeros Treatment::      The Differences in Treatment of Zero Elements
 @end menu
 
 @node Basic Usage
 @section The Creation and Manipulation of Diagonal and Permutation Matrices
 
 A diagonal matrix is defined as a matrix that has zero entries outside the main diagonal;
-that is, @code{D(i,j) == 0} if @code{i != j}.
+that is, 
+@iftex
+$D_{ij} = 0$ if $i \neq j$
+@end iftex
+@ifnottex
+@code{D(i,j) == 0} if @code{i != j}.
+@end ifnottex
 Most often, square diagonal matrices are considered; however, the definition can equally
 be applied to nonsquare matrices, in which case we usually speak of a rectangular diagonal 
 matrix. For more information, see @url{http://en.wikipedia.org/wiki/Diagonal_matrix}.
 
 A permutation matrix is defined as a square matrix that has a single element equal to unity
 in each row and each column; all other elements are zero. That is, there exists a 
-permutation (vector) @code{p} such that @code{P(i,j) == 1} if @code{j == p(i)} and
-@code{P(i,j) == 0} otherwise.  For more information, see 
-@url{http://en.wikipedia.org/wiki/Permutation_matrix}.
+permutation (vector) 
+@iftex
+$p$ such that $P_{ij}=1$ if $j = p_i$ and
+$P_{ij}=0$ otherwise.  
+@end iftex
+@ifnottex
+@code{p} such that @code{P(i,j) == 1} if @code{j == p(i)} and 
+@code{P(i,j) == 0} otherwise.  
+@end ifnottex
+
+For more information, see @url{http://en.wikipedia.org/wiki/Permutation_matrix}.
 
 Octave provides special treatment of real and complex rectangular diagonal matrices,
 as well as permutation matrices. They are stored as special objects, using efficient 
 storage and algorithms, facilitating writing both readable and efficient matrix algebra
 expressions in the Octave language.
 
 @menu
 * Creating Diagonal Matrices::
@@ -69,37 +76,41 @@ will create a square diagonal matrix wit
 by the elements of @var{v}, and size equal to the length of @var{v}.
 @code{diag (@var{v}, m, n)} can be used to construct a rectangular diagonal matrix.
 The result of these expressions will be a special diagonal matrix object, rather
 than a general matrix object.
 
 Some other built-in functions can also return diagonal matrices. Examples include
 @dfn{balance} or @dfn{inv}.
 
-@DOCSTRING(diag)
-
 @node Creating Permutation Matrices
 @subsection Creating Permutation Matrices
 
 For creating permutation matrices, Octave does not introduce a new function, but
-rather overrides an existing syntax. That is, if @var{q} is a permutation vector
-of length @var{n}, the expression
+rather overrides an existing syntax: permutation matrices can be conveniently
+created by indexing an identity matrix by permutation vectors.
+That is, if @var{q} is a permutation vector of length @var{n}, the expression
 @example
   @var{P} = eye (@var{n}) (:, @var{q});
 @end example
 will create a permutation matrix - a special matrix object.
 @example
 eye (@var{n}) (@var{q}, :) 
 @end example
-will also work (a row permutation matrix), as well as 
+will also work (and create a row permutation matrix), as well as 
 @example
 eye (@var{n}) (@var{q1}, @var{q2}).
 @end example
-Note that the identity, @code{eye (@var{n})}, is a diagonal matrix by definition,
-but should work in any place where a permutation matrix is requested.
+
+Mathematically, an identity matrix is both diagonal and permutation matrix.
+In Octave, @code{eye (@var{n})} returns a diagonal matrix, because a matrix
+can only have one class. You can convert this diagonal matrix to a permutation
+matrix by indexing it by an identity permutation, as shown above.
+This is a special property of the identity matrix; indexing other diagonal
+matrices generall produces a full matrix.
 
 Some other built-in functions can also return permutation matrices. Examples include
 @dfn{inv} or @dfn{lu}.
 
 @node Explicit and Implicit Conversions
 @subsection Explicit and Implicit Conversions
 
 The diagonal and permutation matrices are special objects in their own right. A number
@@ -136,19 +147,24 @@ are treated specially when performed on 
 
 @node Expressions Involving Diagonal Matrices
 @subsection Expressions Involving Diagonal Matrices
 
 Assume @var{D} is a diagonal matrix. If @var{M} is a full matrix,
 then @code{@var{D}*@var{M}} will scale the rows of @var{M}. That means,
 if @code{@var{S} = @var{D}*@var{M}}, then for each pair of indices
 i,j it holds 
+@iftex
+$$S_{ij} = D_{ii} M_{ij}$$
+@end iftex
+@ifnottex
 @example
 S(i,j) = D(i,i) * M(i,j).
 @end example
+@end ifnottex
 Similarly, @code{M*D} will do a column scaling.
 
 The matrix @var{D} may also be rectangular, m-by-n where @code{m != n}.
 If @code{m < n}, then the expression @code{D*M} is equivalent to
 @example
 D(:,1:m) * M(1:m,:),
 @end example
 i.e. trailing @code{n-m} rows of @var{M} are ignored. If @code{m > n}, 
@@ -290,25 +306,28 @@ This is how you normalize columns of a m
 The following expression is a way to efficiently calculate the sign of a
 permutation, given by a permutation vector @var{p}. It will also work
 in earlier versions of Octave, but slowly.
 @example
   det (eye (length (p))(p, :))
 @end example
 
 Finally, here's how you solve a linear system @code{A*x = b} 
-with Tikhonov regularization using SVD (a skeleton only):
+with Tikhonov regularization (ridge regression) using SVD (a skeleton only):
 @example
   m = rows (A); n = columns (A);
   [U, S, V] = svd (A);
   ## determine the regularization factor alpha
-  ## ...
-  ## and solve
+  ## alpha = ...
+  ## transform to orthogonal basis
   x = U'*b;
-  x = (S + alpha*eye (m, n)) \ x; ## this will be very efficient
+  ## Use the standard formula, replacing A with S. We work with 
+  ## diagonal matrices, so this will be plausibly efficient.
+  x = (S'*S + alpha^2 * eye (n)) \ (S' * x);
+  ## transform to solution basis
   x = V*x;
 @end example
 
 @node Zeros Treatment
 @section The Differences in Treatment of Zero Elements
 
 Making diagonal and permutation matrices special matrix objects in their own
 right and the consequent usage of smarter algorithms for certain operations
diff --git a/doc/interpreter/matrix.txi b/doc/interpreter/matrix.txi
--- a/doc/interpreter/matrix.txi
+++ b/doc/interpreter/matrix.txi
@@ -146,16 +146,18 @@ a (i, :)
 
 @DOCSTRING(vec)
 
 @DOCSTRING(vech)
 
 @anchor{doc-postpad}
 @DOCSTRING(prepad)
 
+@DOCSTRING(diag)
+
 @DOCSTRING(blkdiag)
 
 @node Applying a Function to an Array
 @section Applying a Function to an Array
 
 @DOCSTRING(arrayfun)
 
 @DOCSTRING(bsxfun)
