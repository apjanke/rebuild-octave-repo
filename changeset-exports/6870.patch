# HG changeset patch
# User jwe
# Date 1189109908 0
#      Thu Sep 06 20:18:28 2007 +0000
# Node ID e2e5425905ac1b667d167fc82150db826ab3c0d5
# Parent  f9c893831e681b98c320f0b3f5e864bc1e4ad2d9
[project @ 2007-09-06 20:18:20 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2007-09-06  John W. Eaton  <jwe@octave.org>
+
+	* configure.in: Avoid broken strptime function on Cygwin systems.
+
 2007-09-01  David Bateman  <dbateman@free.fr>
 
 	* configure.in: AC_SUBST and check the variable TEXINFO_QHULL.
 	* Makeconf.in: Use it.
 
 2007-08-24  David Bateman  <dbateman@free.fr>
 
 	* configure.in: Extra Qhull bits.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.573 $)
+AC_REVISION($Revision: 1.574 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 OCTAVE_HOST_TYPE
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
@@ -1448,17 +1448,17 @@ case "$canonical_host_type" in
     ## for this.
   ;;
   *)
     AC_CHECK_FUNCS(strftime)
   ;;
 esac
 
 case "$canonical_host_type" in
-  *-apple-darwin*)
+  *-apple-darwin* | *-*-cygwin*)
     ## The weekday function, which uses strptime, is broken because
     ## strptime is apparently not setting wday correctly for formats
     ## like "%d-%m-%Y", so use our version.  We could use an actual
     ## configure test for this.
   ;;
   *)
     AC_CHECK_FUNCS(strptime)
   ;;
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2007-09-06  John W. Eaton  <jwe@octave.org>
+
+	* plot/drawnow.m (drawnow): New arg, debug_file.
+	(init_plot_stream): Split from open_plot_stream.
+	* plot/print.m: Accept -debug=FILE argument.
+
 2007-09-06  David Bateman  <dbateman@free.fr>
 
         * general/celldisp.m: New function.
         * general/Makefile.in (SOURCES): Add celldisp.m.
         * miscellaneous/swapbytes.m: New function.
         * miscellaneous/gzip.m: New function.
         * miscellaneous/Makefile.in (SOURCES): Add swapbytes.m and gzip.m.
 
diff --git a/scripts/plot/drawnow.m b/scripts/plot/drawnow.m
--- a/scripts/plot/drawnow.m
+++ b/scripts/plot/drawnow.m
@@ -19,39 +19,48 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} drawnow ()
 ## Display the current graphics.
 ## @end deftypefn
 
 ## Author: jwe
 
-function drawnow (term, file)
+function drawnow (term, file, debug_file)
 
   persistent drawnow_executing = 0;
 
   unwind_protect
 
     ## If this is a recursive call, do nothing.
     if (++drawnow_executing > 1)
       return;
     endif
 
-    if (nargin == 2)
+    if (nargin == 2 || nargin == 3)
       h = get (0, "currentfigure");
       if (h)
 	f = get (h);
 	plot_stream = [];
+	fid = [];
 	unwind_protect
 	  plot_stream = open_gnuplot_stream ([], term, file);
 	  __go_draw_figure__ (f, plot_stream);
+	  if (nargin == 3)
+	    fid = fopen (debug_file, "wb");
+	    init_plot_stream (fid, [], term, file);
+	    __go_draw_figure__ (f, fid);
+	  endif
 	unwind_protect_cleanup
 	  if (! isempty (plot_stream))
 	    pclose (plot_stream);
 	  endif
+	  if (! isempty (fid))
+	    fclose (fid);
+	  endif
 	end_unwind_protect
       else
 	error ("drawnow: nothing to draw");
       endif
     elseif (nargin == 0)
       for h = __go_figure_handles__ ()
 	if (! (isnan (h) || h == 0))
 	  f = get (h);
@@ -79,17 +88,17 @@ function drawnow (term, file)
 
     drawnow_executing--;
     __request_drawnow__ (false);
 
   end_unwind_protect
 
 endfunction
 
-function plot_stream = open_gnuplot_stream (h, term, file)
+function plot_stream = open_gnuplot_stream (h, varargin)
 
   ## If drawnow is cleared, it is possible to register __go_close_all__
   ## more than once, but that is not fatal.
   persistent __go_close_all_registered__;
 
   cmd = gnuplot_binary ();
 
   plot_stream = popen (cmd, "w");
@@ -97,58 +106,68 @@ function plot_stream = open_gnuplot_stre
   if (plot_stream < 0)
     error ("drawnow: failed to open connection to gnuplot");
   else
 
     if (! isempty (h))
       set (h, "__plot_stream__", plot_stream);
     endif
 
-    if (nargin == 3)
-      fprintf (plot_stream, "set terminal %s;\n", term);
-      fprintf (plot_stream, "set output \"%s\";\n", file);
-    else
-
-      ## Guess the terminal type.
-      term = getenv ("GNUTERM");
-      if (isempty (term))
-	if (! isempty (getenv ("DISPLAY")))
-          term = "x11";
-	elseif (! isunix ())
-          term = "windows";
-	else
-	  ## This should really be checking for os x before setting
-	  ## the terminal type to aqua, but nobody will notice because
-	  ## every other unix will be using x11 and windows will be
-	  ## using windows.  Those diehards still running octave from
-	  ## a linux console know how to set the GNUTERM variable.
-          term = "aqua";
-	endif
-      endif
-
-      ## If no 'h' (why not?) then open the terminal as Figure 0.
-      if (isempty (h))
-        h = 0;
-      endif
-
-      if (strcmp (term, "x11"))
-        fprintf (plot_stream, "set terminal x11 title \"Figure %d\"\n", h);
-      elseif (strcmp (term, "aqua"))
-        ## Aqua doesn't understand the 'title' option despite what the
-        ## gnuplot 4.2 documentation says.
-        fprintf (plot_stream, "set terminal aqua %d\n", h);
-      elseif (strcmp (term, "wxt"))
-        fprintf (plot_stream, "set terminal wxt title \"Figure %d\"\n", h);
-      endif
-      ## gnuplot will pick up the GNUTERM environment variable itself
-      ## so no need to set the terminal type if not also setting the
-      ## figure title.
-
-    endif
+    init_plot_stream (plot_stream, h, varargin{:})
 
     if (isempty (__go_close_all_registered__))
       atexit ("__go_close_all__");
       __go_close_all_registered__ = true;
     endif
 
   endif
 
 endfunction
+
+function init_plot_stream (plot_stream, h, term, file)
+
+  if (nargin == 4)
+    if (! isempty (term))
+      fprintf (plot_stream, "set terminal %s;\n", term);
+    endif
+    if (! isempty (file))
+      fprintf (plot_stream, "set output \"%s\";\n", file);
+    endif
+  else
+
+    ## Guess the terminal type.
+    term = getenv ("GNUTERM");
+    if (isempty (term))
+      if (! isempty (getenv ("DISPLAY")))
+	term = "x11";
+      elseif (! isunix ())
+	term = "windows";
+      else
+	## This should really be checking for os x before setting
+	## the terminal type to aqua, but nobody will notice because
+	## every other unix will be using x11 and windows will be
+	## using windows.  Those diehards still running octave from
+	## a linux console know how to set the GNUTERM variable.
+	term = "aqua";
+      endif
+    endif
+
+    ## If no 'h' (why not?) then open the terminal as Figure 0.
+    if (isempty (h))
+      h = 0;
+    endif
+
+    if (strcmp (term, "x11"))
+      fprintf (plot_stream, "set terminal x11 title \"Figure %d\"\n", h);
+    elseif (strcmp (term, "aqua"))
+      ## Aqua doesn't understand the 'title' option despite what the
+      ## gnuplot 4.2 documentation says.
+      fprintf (plot_stream, "set terminal aqua %d\n", h);
+    elseif (strcmp (term, "wxt"))
+      fprintf (plot_stream, "set terminal wxt title \"Figure %d\"\n", h);
+    endif
+    ## gnuplot will pick up the GNUTERM environment variable itself
+    ## so no need to set the terminal type if not also setting the
+    ## figure title.
+
+  endif
+
+endfunction
diff --git a/scripts/plot/print.m b/scripts/plot/print.m
--- a/scripts/plot/print.m
+++ b/scripts/plot/print.m
@@ -114,34 +114,41 @@ function print (varargin)
   orientation = orient ();
   use_color = 0; # 0=default, -1=mono, +1=color
   force_solid = 0; # 0=default, -1=dashed, +1=solid
   fontsize = "";
   font = "";
   name = "";
   devopt = "";
   printer = "";
+  debug = false;
+  debug_file = "octave-print-commands.log"
 
   for i = 1:nargin
     arg = varargin{i};
     if (ischar (arg))
       if (strcmp (arg, "-color"))
 	use_color = 1;
       elseif (strcmp (arg, "-mono"))
 	use_color = -1;
       elseif (strcmp (arg, "-solid"))
         force_solid = 1;
       elseif (strcmp (arg, "-dashed"))
         force_solid = -1;
       elseif (strcmp (arg, "-portrait"))
 	orientation = "portrait";
       elseif (strcmp (arg, "-landscape"))
 	orientation = "landscape";
+      elseif (strncmp (arg, "-debug", 6))
+	debug = true;
+	if (length (arg) > 7)
+	  debug_file = arg(7:end);
+	endif
       elseif (length (arg) > 2 && arg(1:2) == "-d")
-	devopt = arg(3:length(arg));
+	devopt = arg(3:end);
       elseif (length (arg) > 2 && arg(1:2) == "-P")
 	printer = arg;
       elseif (length (arg) > 2 && arg(1:2) == "-F")
 	idx = rindex(arg, ":");
 	if (idx)
 	  font = arg(3:idx-1);
 	  fontsize = arg(idx+1:length(arg));
 	else
@@ -327,17 +334,21 @@ function print (varargin)
 
     new_terminal = "png large";
 
   elseif (strcmp (dev, "dxf") || strcmp (dev, "mf") || strcmp (dev, "hpgl"))
     ## AutoCad DXF, METAFONT, HPGL
     new_terminal = dev;
   endif
 
-  drawnow (new_terminal, name);
+  if (debug)
+    drawnow (new_terminal, name, debug_file);
+  else
+    drawnow (new_terminal, name);
+  endif
 
   if (! isempty (convertname))
     command = sprintf ("convert '%s' '%s'", name, convertname);
     [errcode, output] = system (command);
     unlink (name);
     if (errcode)
       error ("print: could not convert");
     endif
