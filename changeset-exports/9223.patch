# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1242821611 -7200
#      Wed May 20 14:13:31 2009 +0200
# Node ID 902a4597dce8cac64f8dca117454f7c5be3bc0f9
# Parent  7bd406e12e4ded29ea4281627a29cf6734e6e691
use Array<void *> in ov-typeinfo.h

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,26 @@
+2009-05-20  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-typeinfo.h
+	(octave_value_typeinfo::unary_class_ops,
+	octave_value_typeinfo::unary_ops,
+	octave_value_typeinfo::non_const_unary_ops,
+	octave_value_typeinfo::binary_class_ops,
+	octave_value_typeinfo::binary_ops,
+	octave_value_typeinfo::compound_binary_class_ops,
+	octave_value_typeinfo::compound_binary_ops,
+	octave_value_typeinfo::cat_ops,
+	octave_value_typeinfo::assign_ops,
+	octave_value_typeinfo::assignany_ops,
+	octave_value_typeinfo::pref_assign_conv,
+	octave_value_typeinfo::type_conv_ops,
+	octave_value_typeinfo::widening_ops): Declare as Array<void *>.
+	* ov-typeinfo.cc: Reflect changes.
+
 2009-05-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* toplev.h (octave_exit_func): New typedef.
 	(octave_exit): Change to octave_exit_func.
 	
 2009-05-20  Jaroslav Hajek  <highegg@gmail.com>
 	
 	* ov-typeinfo.cc: Don't include oct-obj.h.
diff --git a/src/ov-typeinfo.cc b/src/ov-typeinfo.cc
--- a/src/ov-typeinfo.cc
+++ b/src/ov-typeinfo.cc
@@ -35,48 +35,16 @@ octave_value_typeinfo::init_tab_sz (16);
 
 octave_value_typeinfo *
 octave_value_typeinfo::instance (0);
 
 #include <Array.h>
 #include <Array2.h>
 #include <Array3.h>
 
-#include <Array.cc>
-
-NO_INSTANTIATE_ARRAY_SORT (octave_value_typeinfo::unary_op_fcn);
-INSTANTIATE_ARRAY (octave_value_typeinfo::unary_op_fcn, );
-template class Array2<octave_value_typeinfo::unary_op_fcn>;
-
-NO_INSTANTIATE_ARRAY_SORT (octave_value_typeinfo::non_const_unary_op_fcn);
-INSTANTIATE_ARRAY (octave_value_typeinfo::non_const_unary_op_fcn, );
-template class Array2<octave_value_typeinfo::non_const_unary_op_fcn>;
-
-NO_INSTANTIATE_ARRAY_SORT (octave_value_typeinfo::binary_op_fcn);
-INSTANTIATE_ARRAY (octave_value_typeinfo::binary_op_fcn, );
-template class Array2<octave_value_typeinfo::binary_op_fcn>;
-template class Array3<octave_value_typeinfo::binary_op_fcn>;
-
-NO_INSTANTIATE_ARRAY_SORT (octave_value_typeinfo::cat_op_fcn);
-INSTANTIATE_ARRAY (octave_value_typeinfo::cat_op_fcn, );
-template class Array2<octave_value_typeinfo::cat_op_fcn>;
-
-NO_INSTANTIATE_ARRAY_SORT (octave_value_typeinfo::assign_op_fcn);
-INSTANTIATE_ARRAY (octave_value_typeinfo::assign_op_fcn, );
-template class Array2<octave_value_typeinfo::assign_op_fcn>;
-template class Array3<octave_value_typeinfo::assign_op_fcn>;
-
-NO_INSTANTIATE_ARRAY_SORT (octave_value_typeinfo::assignany_op_fcn);
-INSTANTIATE_ARRAY (octave_value_typeinfo::assignany_op_fcn, );
-template class Array2<octave_value_typeinfo::assignany_op_fcn>;
-
-NO_INSTANTIATE_ARRAY_SORT (octave_base_value::type_conv_fcn);
-INSTANTIATE_ARRAY (octave_base_value::type_conv_fcn, );
-template class Array2<octave_base_value::type_conv_fcn>;
-
 bool
 octave_value_typeinfo::instance_ok (void)
 {
   bool retval = true;
   if (! instance)
     instance = new octave_value_typeinfo ();
 
   if (! instance)
@@ -224,42 +192,38 @@ octave_value_typeinfo::do_register_type 
   if (i == len)
     {
       len *= 2;
 
       types.resize (len, std::string ());
 
       vals.resize (len, octave_value ());
 
-      unary_ops.resize (static_cast<int> (octave_value::num_unary_ops),
-			len, static_cast<octave_value_typeinfo::unary_op_fcn> (0));
+      unary_ops.resize (static_cast<int> (octave_value::num_unary_ops), len, 0);
 
       non_const_unary_ops.resize
-	(static_cast<int> (octave_value::num_unary_ops),
-	 len, static_cast<octave_value_typeinfo::non_const_unary_op_fcn> (0));
+	(static_cast<int> (octave_value::num_unary_ops), len, 0);
 
       binary_ops.resize (static_cast<int> (octave_value::num_binary_ops),
-			 len, len, static_cast<octave_value_typeinfo::binary_op_fcn> (0));
+			 len, len, 0);
 
       compound_binary_ops.resize (static_cast<int> (octave_value::num_compound_binary_ops),
-                                  len, len, static_cast<octave_value_typeinfo::binary_op_fcn> (0));
+                                  len, len, 0);
 
-      cat_ops.resize (len, len, static_cast<octave_value_typeinfo::cat_op_fcn> (0));
+      cat_ops.resize (len, len, 0);
 
-      assign_ops.resize (static_cast<int> (octave_value::num_assign_ops),
-			 len, len, static_cast<octave_value_typeinfo::assign_op_fcn> (0));
+      assign_ops.resize (static_cast<int> (octave_value::num_assign_ops), len, len, 0);
 
-      assignany_ops.resize (static_cast<int> (octave_value::num_assign_ops),
-			    len, static_cast<octave_value_typeinfo::assignany_op_fcn> (0));
+      assignany_ops.resize (static_cast<int> (octave_value::num_assign_ops), len, 0);
 
       pref_assign_conv.resize (len, len, -1);
 
-      type_conv_ops.resize (len, len, static_cast<octave_base_value::type_conv_fcn> (0));
+      type_conv_ops.resize (len, len, 0);
 
-      widening_ops.resize (len, len, static_cast<octave_base_value::type_conv_fcn> (0));
+      widening_ops.resize (len, len, 0);
     }
 
   types (i) = t_name;
 
   vals (i) = val;
 
   num_types++;
 
@@ -273,17 +237,17 @@ octave_value_typeinfo::do_register_unary
   if (lookup_unary_class_op (op))
     {
       std::string op_name = octave_value::unary_op_as_string (op);
 
       warning ("duplicate unary operator `%s' for class dispatch",
 	       op_name.c_str ());
     }
 
-  unary_class_ops.checkelem (static_cast<int> (op)) = f;
+  unary_class_ops.checkelem (static_cast<int> (op)) = reinterpret_cast<void *> (f);
 
   return false;
 }
 
 bool
 octave_value_typeinfo::do_register_unary_op (octave_value::unary_op op,
 					     int t, octave_value_typeinfo::unary_op_fcn f)
 {
@@ -291,17 +255,17 @@ octave_value_typeinfo::do_register_unary
     {
       std::string op_name = octave_value::unary_op_as_string (op);
       std::string type_name = types(t);
 
       warning ("duplicate unary operator `%s' for type `%s'",
 	       op_name.c_str (), type_name.c_str ());
     }
 
-  unary_ops.checkelem (static_cast<int> (op), t) = f;
+  unary_ops.checkelem (static_cast<int> (op), t) = reinterpret_cast<void *> (f);
 
   return false;
 }
 
 bool
 octave_value_typeinfo::do_register_non_const_unary_op
   (octave_value::unary_op op, int t, octave_value_typeinfo::non_const_unary_op_fcn f)
 {
@@ -309,34 +273,34 @@ octave_value_typeinfo::do_register_non_c
     {
       std::string op_name = octave_value::unary_op_as_string (op);
       std::string type_name = types(t);
 
       warning ("duplicate unary operator `%s' for type `%s'",
 	       op_name.c_str (), type_name.c_str ());
     }
 
-  non_const_unary_ops.checkelem (static_cast<int> (op), t) = f;
+  non_const_unary_ops.checkelem (static_cast<int> (op), t) = reinterpret_cast<void *> (f);
 
   return false;
 }
 
 bool
 octave_value_typeinfo::do_register_binary_class_op (octave_value::binary_op op,
 						    octave_value_typeinfo::binary_class_op_fcn f)
 {
   if (lookup_binary_class_op (op))
     {
       std::string op_name = octave_value::binary_op_as_string (op);
 
       warning ("duplicate binary operator `%s' for class dispatch",
 	       op_name.c_str ());
     }
 
-  binary_class_ops.checkelem (static_cast<int> (op)) = f;
+  binary_class_ops.checkelem (static_cast<int> (op)) = reinterpret_cast<void *> (f);
 
   return false;
 }
 
 bool
 octave_value_typeinfo::do_register_binary_op (octave_value::binary_op op,
 					      int t1, int t2,
 					      octave_value_typeinfo::binary_op_fcn f)
@@ -346,34 +310,34 @@ octave_value_typeinfo::do_register_binar
       std::string op_name = octave_value::binary_op_as_string (op);
       std::string t1_name = types(t1);
       std::string t2_name = types(t2);
 
       warning ("duplicate binary operator `%s' for types `%s' and `%s'",
 	       op_name.c_str (), t1_name.c_str (), t1_name.c_str ());
     }
 
-  binary_ops.checkelem (static_cast<int> (op), t1, t2) = f;
+  binary_ops.checkelem (static_cast<int> (op), t1, t2) = reinterpret_cast<void *> (f);
 
   return false;
 }
 
 bool
 octave_value_typeinfo::do_register_binary_class_op (octave_value::compound_binary_op op,
 						    octave_value_typeinfo::binary_class_op_fcn f)
 {
   if (lookup_binary_class_op (op))
     {
       std::string op_name = octave_value::binary_op_fcn_name (op);
 
       warning ("duplicate compound binary operator `%s' for class dispatch",
 	       op_name.c_str ());
     }
 
-  compound_binary_class_ops.checkelem (static_cast<int> (op)) = f;
+  compound_binary_class_ops.checkelem (static_cast<int> (op)) = reinterpret_cast<void *> (f);
 
   return false;
 }
 
 bool
 octave_value_typeinfo::do_register_binary_op (octave_value::compound_binary_op op,
 					      int t1, int t2,
 					      octave_value_typeinfo::binary_op_fcn f)
@@ -383,34 +347,34 @@ octave_value_typeinfo::do_register_binar
       std::string op_name = octave_value::binary_op_fcn_name (op);
       std::string t1_name = types(t1);
       std::string t2_name = types(t2);
 
       warning ("duplicate compound binary operator `%s' for types `%s' and `%s'",
 	       op_name.c_str (), t1_name.c_str (), t1_name.c_str ());
     }
 
-  compound_binary_ops.checkelem (static_cast<int> (op), t1, t2) = f;
+  compound_binary_ops.checkelem (static_cast<int> (op), t1, t2) = reinterpret_cast<void *> (f);
 
   return false;
 }
 
 bool
 octave_value_typeinfo::do_register_cat_op (int t1, int t2, octave_value_typeinfo::cat_op_fcn f)
 {
   if (lookup_cat_op (t1, t2))
     {
       std::string t1_name = types(t1);
       std::string t2_name = types(t2);
 
       warning ("duplicate concatenation operator for types `%s' and `%s'",
 	       t1_name.c_str (), t1_name.c_str ());
     }
 
-  cat_ops.checkelem (t1, t2) = f;
+  cat_ops.checkelem (t1, t2) = reinterpret_cast<void *> (f);
 
   return false;
 }
 
 bool
 octave_value_typeinfo::do_register_assign_op (octave_value::assign_op op,
 					      int t_lhs, int t_rhs,
 					      octave_value_typeinfo::assign_op_fcn f)
@@ -420,17 +384,17 @@ octave_value_typeinfo::do_register_assig
       std::string op_name = octave_value::assign_op_as_string (op);
       std::string t_lhs_name = types(t_lhs);
       std::string t_rhs_name = types(t_rhs);
 
       warning ("duplicate assignment operator `%s' for types `%s' and `%s'",
 	       op_name.c_str (), t_lhs_name.c_str (), t_rhs_name.c_str ());
     }
 
-  assign_ops.checkelem (static_cast<int> (op), t_lhs, t_rhs) = f;
+  assign_ops.checkelem (static_cast<int> (op), t_lhs, t_rhs) = reinterpret_cast<void *> (f);
 
   return false;
 }
 
 bool
 octave_value_typeinfo::do_register_assignany_op (octave_value::assign_op op,
 						 int t_lhs, octave_value_typeinfo::assignany_op_fcn f)
 {
@@ -438,17 +402,17 @@ octave_value_typeinfo::do_register_assig
     {
       std::string op_name = octave_value::assign_op_as_string (op);
       std::string t_lhs_name = types(t_lhs);
 
       warning ("duplicate assignment operator `%s' for types `%s'",
 	       op_name.c_str (), t_lhs_name.c_str ());
     }
 
-  assignany_ops.checkelem (static_cast<int> (op), t_lhs) = f;
+  assignany_ops.checkelem (static_cast<int> (op), t_lhs) = reinterpret_cast<void *> (f);
 
   return false;
 }
 
 bool
 octave_value_typeinfo::do_register_pref_assign_conv (int t_lhs, int t_rhs,
 						     int t_result) 
 {
@@ -474,17 +438,17 @@ octave_value_typeinfo::do_register_type_
     {
       std::string t_name = types(t);
       std::string t_result_name = types(t_result);
 
       warning ("overriding type conversion op for `%s' to `%s'",
 	       t_name.c_str (), t_result_name.c_str ());
     }
 
-  type_conv_ops.checkelem (t, t_result) = f;
+  type_conv_ops.checkelem (t, t_result) = reinterpret_cast<void *> (f);
 
   return false;
 }
 
 bool
 octave_value_typeinfo::do_register_widening_op
   (int t, int t_result, octave_base_value::type_conv_fcn f)
 {
@@ -492,17 +456,17 @@ octave_value_typeinfo::do_register_widen
     {
       std::string t_name = types(t);
       std::string t_result_name = types(t_result);
 
       warning ("overriding widening op for `%s' to `%s'",
 	       t_name.c_str (), t_result_name.c_str ());
     }
 
-  widening_ops.checkelem (t, t_result) = f;
+  widening_ops.checkelem (t, t_result) = reinterpret_cast<void *> (f);
 
   return false;
 }
 
 octave_value
 octave_value_typeinfo::do_lookup_type (const std::string& nm)
 {
   octave_value retval;
@@ -518,94 +482,106 @@ octave_value_typeinfo::do_lookup_type (c
     }
 
   return retval;
 }
 
 octave_value_typeinfo::unary_class_op_fcn
 octave_value_typeinfo::do_lookup_unary_class_op (octave_value::unary_op op)
 {
-  return unary_class_ops.checkelem (static_cast<int> (op));
+  void *f = unary_class_ops.checkelem (static_cast<int> (op));
+  return reinterpret_cast<octave_value_typeinfo::unary_class_op_fcn> (f);
 }
 
 octave_value_typeinfo::unary_op_fcn
 octave_value_typeinfo::do_lookup_unary_op (octave_value::unary_op op, int t)
 {
-  return unary_ops.checkelem (static_cast<int> (op), t);
+  void *f = unary_ops.checkelem (static_cast<int> (op), t);
+  return reinterpret_cast<octave_value_typeinfo::unary_op_fcn> (f);
 }
 
 octave_value_typeinfo::non_const_unary_op_fcn
 octave_value_typeinfo::do_lookup_non_const_unary_op
   (octave_value::unary_op op, int t)
 {
-  return non_const_unary_ops.checkelem (static_cast<int> (op), t);
+  void *f = non_const_unary_ops.checkelem (static_cast<int> (op), t);
+  return reinterpret_cast<octave_value_typeinfo::non_const_unary_op_fcn> (f);
 }
 
 octave_value_typeinfo::binary_class_op_fcn
 octave_value_typeinfo::do_lookup_binary_class_op (octave_value::binary_op op)
 {
-  return binary_class_ops.checkelem (static_cast<int> (op));
+  void *f = binary_class_ops.checkelem (static_cast<int> (op));
+  return reinterpret_cast<octave_value_typeinfo::binary_class_op_fcn> (f);
 }
 
 octave_value_typeinfo::binary_op_fcn
 octave_value_typeinfo::do_lookup_binary_op (octave_value::binary_op op,
 					    int t1, int t2)
 {
-  return binary_ops.checkelem (static_cast<int> (op), t1, t2);
+  void *f = binary_ops.checkelem (static_cast<int> (op), t1, t2);
+  return reinterpret_cast<octave_value_typeinfo::binary_op_fcn> (f);
 }
 
 octave_value_typeinfo::binary_class_op_fcn
 octave_value_typeinfo::do_lookup_binary_class_op (octave_value::compound_binary_op op)
 {
-  return compound_binary_class_ops.checkelem (static_cast<int> (op));
+  void *f = compound_binary_class_ops.checkelem (static_cast<int> (op));
+  return reinterpret_cast<octave_value_typeinfo::binary_class_op_fcn> (f);
 }
 
 octave_value_typeinfo::binary_op_fcn
 octave_value_typeinfo::do_lookup_binary_op (octave_value::compound_binary_op op,
 					    int t1, int t2)
 {
-  return compound_binary_ops.checkelem (static_cast<int> (op), t1, t2);
+  void *f = compound_binary_ops.checkelem (static_cast<int> (op), t1, t2);
+  return reinterpret_cast<octave_value_typeinfo::binary_op_fcn> (f);
 }
 
 octave_value_typeinfo::cat_op_fcn
 octave_value_typeinfo::do_lookup_cat_op (int t1, int t2)
 {
-  return cat_ops.checkelem (t1, t2);
+  void *f = cat_ops.checkelem (t1, t2);
+  return reinterpret_cast<octave_value_typeinfo::cat_op_fcn> (f);
 }
 
 octave_value_typeinfo::assign_op_fcn
 octave_value_typeinfo::do_lookup_assign_op (octave_value::assign_op op,
 					    int t_lhs, int t_rhs)
 {
-  return assign_ops.checkelem (static_cast<int> (op), t_lhs, t_rhs);
+  void *f = assign_ops.checkelem (static_cast<int> (op), t_lhs, t_rhs);
+  return reinterpret_cast<octave_value_typeinfo::assign_op_fcn> (f);
 }
 
 octave_value_typeinfo::assignany_op_fcn
 octave_value_typeinfo::do_lookup_assignany_op (octave_value::assign_op op,
 					       int t_lhs)
 {
-  return assignany_ops.checkelem (static_cast<int> (op), t_lhs);
+  void *f = assignany_ops.checkelem (static_cast<int> (op), t_lhs);
+  return reinterpret_cast<octave_value_typeinfo::assignany_op_fcn> (f);
 }
 
 int
 octave_value_typeinfo::do_lookup_pref_assign_conv (int t_lhs, int t_rhs)
 {
   return pref_assign_conv.checkelem (t_lhs, t_rhs);
 }
 
 octave_base_value::type_conv_fcn
 octave_value_typeinfo::do_lookup_type_conv_op (int t, int t_result)
 {
-  return type_conv_ops.checkelem (t, t_result);
+  void *f = type_conv_ops.checkelem (t, t_result);
+  return reinterpret_cast<octave_base_value::type_conv_fcn> (f);
 }
 
 octave_base_value::type_conv_fcn
 octave_value_typeinfo::do_lookup_widening_op (int t, int t_result)
 {
-  return widening_ops.checkelem (t, t_result);
+  void *f = widening_ops.checkelem (t, t_result);
+  return reinterpret_cast<octave_base_value::type_conv_fcn> (f);
 }
 
 string_vector
 octave_value_typeinfo::do_installed_type_names (void)
 {
   string_vector retval (num_types);
 
   for (int i = 0;i < num_types; i++)
diff --git a/src/ov-typeinfo.h b/src/ov-typeinfo.h
--- a/src/ov-typeinfo.h
+++ b/src/ov-typeinfo.h
@@ -215,41 +215,41 @@ private:
   static octave_value_typeinfo *instance;
 
   int num_types;
 
   Array<std::string> types;
 
   Array<octave_value> vals;
 
-  Array<unary_class_op_fcn> unary_class_ops;
+  Array<void *> unary_class_ops;
 
-  Array2<unary_op_fcn> unary_ops;
+  Array2<void *> unary_ops;
 
-  Array2<non_const_unary_op_fcn> non_const_unary_ops;
+  Array2<void *> non_const_unary_ops;
 
-  Array<binary_class_op_fcn> binary_class_ops;
+  Array<void *> binary_class_ops;
 
-  Array3<binary_op_fcn> binary_ops;
+  Array3<void *> binary_ops;
 
-  Array<binary_class_op_fcn> compound_binary_class_ops;
+  Array<void *> compound_binary_class_ops;
 
-  Array3<binary_op_fcn> compound_binary_ops;
+  Array3<void *> compound_binary_ops;
 
-  Array2<cat_op_fcn> cat_ops;
+  Array2<void *> cat_ops;
 
-  Array3<assign_op_fcn> assign_ops;
+  Array3<void *> assign_ops;
 
-  Array2<assignany_op_fcn> assignany_ops;
+  Array2<void *> assignany_ops;
 
   Array2<int> pref_assign_conv;
 
-  Array2<octave_base_value::type_conv_fcn> type_conv_ops;
+  Array2<void *> type_conv_ops;
 
-  Array2<octave_base_value::type_conv_fcn> widening_ops;
+  Array2<void *> widening_ops;
 
   int do_register_type (const std::string&, const std::string&,
 			const octave_value&);
 
   bool do_register_unary_class_op (octave_value::unary_op, unary_class_op_fcn);
 
   bool do_register_unary_op (octave_value::unary_op, int, unary_op_fcn);
 
