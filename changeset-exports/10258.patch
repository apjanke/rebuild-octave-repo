# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1265228873 18000
#      Wed Feb 03 15:27:53 2010 -0500
# Node ID e317791645c4cb2abbd6ab514040e89a4efc379c
# Parent  cd550069240e8fcb9dcabc9a75bd04c23459b2dd
64-bit fixes

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2384,18 +2384,19 @@ Array<T>::nth_element (const idx_vector&
 
       if (ku == ns)
           lsort.nth_element (buf, ns, lo, up);
       else if (mode == ASCENDING)
         lsort.nth_element (buf, ku, lo, std::min (ku, up));
       else
         {
           octave_idx_type nnan = ns - ku;
-          lsort.nth_element (buf, ku, std::max (lo - nnan, 0),
-                             std::max (up - nnan, 0));
+          octave_idx_type zero = 0;
+          lsort.nth_element (buf, ku, std::max (lo - nnan, zero),
+                             std::max (up - nnan, zero));
           std::rotate (buf, buf + ku, buf + ns);
         }
 
       if (stride == 1)
         {
           for (octave_idx_type i = 0; i < nn; i++)
             v[i] = buf[lo + i];
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,20 @@
+2010-02-03  John W. Eaton  <jwe@octave.org>
+
+	* dbleSVD.cc (SVD::init): Ensure args to std::max are the same type.
+	* CmplxSVD.cc (ComplexSVD::init): Likewise.
+	* floatSVD.cc (FloatSVD::init): Likewise.
+	* fCmplxSVD.cc (FloatComplexSVD::init): Likewise.
+	* idx-vector.cc (idx_range_rep): Likewise.
+	* Array.cc (Array<T>::nth_element): Likewise.
+
+	* lo-specfun.cc (null_dims): Delete unused static variable.
+	(betainc): Call dim_vector (0, 0), not dim_vector (0).
+
 2010-02-03  John W. Eaton  <jwe@octave.org>
 
 	* file-ops.h (octave_canonicalize_file_name): Rename from
 	file_ops::canonicalize_file_name.
 
 2010-02-03  John W. Eaton  <jwe@octave.org>
 
 	* file-ops.cc (canonicalize_file_name):
diff --git a/liboctave/CmplxSVD.cc b/liboctave/CmplxSVD.cc
--- a/liboctave/CmplxSVD.cc
+++ b/liboctave/CmplxSVD.cc
@@ -136,17 +136,18 @@ ComplexSVD::init (const ComplexMatrix& a
   Array<double> rwork (lrwork);
 
   // Ask ZGESVD what the dimension of WORK should be.
 
   octave_idx_type lwork = -1;
 
   Array<Complex> work (1);
 
-  octave_idx_type m1 = std::max (m, 1), nrow_vt1 = std::max (nrow_vt, 1);
+  octave_idx_type one = 1;
+  octave_idx_type m1 = std::max (m, one), nrow_vt1 = std::max (nrow_vt, one);
 
   F77_XFCN (zgesvd, ZGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
 			     F77_CONST_CHAR_ARG2 (&jobv, 1),
 			     m, n, tmp_data, m1, s_vec, u, m1, vt,
 			     nrow_vt1, work.fortran_vec (), lwork,
 			     rwork.fortran_vec (), info
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
diff --git a/liboctave/dbleSVD.cc b/liboctave/dbleSVD.cc
--- a/liboctave/dbleSVD.cc
+++ b/liboctave/dbleSVD.cc
@@ -132,17 +132,18 @@ SVD::init (const Matrix& a, SVD::type sv
   double *vt = right_sm.fortran_vec ();
 
   // Ask DGESVD what the dimension of WORK should be.
 
   octave_idx_type lwork = -1;
 
   Array<double> work (1);
 
-  octave_idx_type m1 = std::max (m, 1), nrow_vt1 = std::max (nrow_vt, 1);
+  octave_idx_type one = 1;
+  octave_idx_type m1 = std::max (m, one), nrow_vt1 = std::max (nrow_vt, one);
 
   F77_XFCN (dgesvd, DGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
 			     F77_CONST_CHAR_ARG2 (&jobv, 1),
 			     m, n, tmp_data, m1, s_vec, u, m1, vt,
 			     nrow_vt1, work.fortran_vec (), lwork, info
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
 
diff --git a/liboctave/fCmplxSVD.cc b/liboctave/fCmplxSVD.cc
--- a/liboctave/fCmplxSVD.cc
+++ b/liboctave/fCmplxSVD.cc
@@ -136,17 +136,18 @@ FloatComplexSVD::init (const FloatComple
   Array<float> rwork (lrwork);
 
   // Ask ZGESVD what the dimension of WORK should be.
 
   octave_idx_type lwork = -1;
 
   Array<FloatComplex> work (1);
 
-  octave_idx_type m1 = std::max (m, 1), nrow_vt1 = std::max (nrow_vt, 1);
+  octave_idx_type one = 1;
+  octave_idx_type m1 = std::max (m, one), nrow_vt1 = std::max (nrow_vt, one);
 
   F77_XFCN (cgesvd, CGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
 			     F77_CONST_CHAR_ARG2 (&jobv, 1),
 			     m, n, tmp_data, m1, s_vec, u, m1, vt,
 			     nrow_vt1, work.fortran_vec (), lwork,
 			     rwork.fortran_vec (), info
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
diff --git a/liboctave/floatSVD.cc b/liboctave/floatSVD.cc
--- a/liboctave/floatSVD.cc
+++ b/liboctave/floatSVD.cc
@@ -132,17 +132,18 @@ FloatSVD::init (const FloatMatrix& a, SV
   float *vt = right_sm.fortran_vec ();
 
   // Ask DGESVD what the dimension of WORK should be.
 
   octave_idx_type lwork = -1;
 
   Array<float> work (1);
 
-  octave_idx_type m1 = std::max (m, 1), nrow_vt1 = std::max (nrow_vt, 1);
+  octave_idx_type one = 1;
+  octave_idx_type m1 = std::max (m, one), nrow_vt1 = std::max (nrow_vt, one);
 
   F77_XFCN (sgesvd, SGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
 			     F77_CONST_CHAR_ARG2 (&jobv, 1),
 			     m, n, tmp_data, m1, s_vec, u, m1, vt,
 			     nrow_vt1, work.fortran_vec (), lwork, info
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
 
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -88,19 +88,20 @@ idx_vector::idx_colon_rep::checkelem (oc
 std::ostream& 
 idx_vector::idx_colon_rep::print (std::ostream& os) const
 {
   return os << ":";
 }
 
 DEFINE_OCTAVE_ALLOCATOR(idx_vector::idx_range_rep);
 
-idx_vector::idx_range_rep::idx_range_rep (octave_idx_type _start, octave_idx_type _limit,
+idx_vector::idx_range_rep::idx_range_rep (octave_idx_type _start,
+                                          octave_idx_type _limit,
                                           octave_idx_type _step)
- : start(_start), len (_step ? std::max((_limit - _start) / _step, 0) : -1), step (_step)
+  : start(_start), len (_step ? std::max((_limit - _start) / _step, static_cast<octave_idx_type> (0)) : -1), step (_step)
 {
   if (len < 0)
     {
       gripe_invalid_range ();
       err = true;
     }
   else if (start < 0 || (step < 0 && start + (len-1)*step < 0))
     {
diff --git a/liboctave/lo-specfun.cc b/liboctave/lo-specfun.cc
--- a/liboctave/lo-specfun.cc
+++ b/liboctave/lo-specfun.cc
@@ -2090,18 +2090,16 @@ static void
 gripe_betainc_nonconformant (octave_idx_type r1, octave_idx_type c1, octave_idx_type r2, octave_idx_type c2, octave_idx_type r3,
 			     octave_idx_type c3)
 {
   (*current_liboctave_error_handler)
    ("betainc: nonconformant arguments (x is %dx%d, a is %dx%d, b is %dx%d)",
      r1, c1, r2, c2, r3, c3);
 }
 
-static dim_vector null_dims (0);
-
 static void
 gripe_betainc_nonconformant (const dim_vector& d1, const dim_vector& d2,
 			     const dim_vector& d3)
 {
   std::string d1_str = d1.str ();
   std::string d2_str = d2.str ();
   std::string d3_str = d3.str ();
 
@@ -2212,17 +2210,17 @@ betainc (double x, const NDArray& a, con
       octave_idx_type nel = dv.numel ();
 
       retval.resize (dv);
 
       for (octave_idx_type i = 0; i < nel; i++)
 	retval (i) = betainc (x, a(i), b(i));
     }
   else
-    gripe_betainc_nonconformant (dim_vector (0), dv, b.dims ());
+    gripe_betainc_nonconformant (dim_vector (0, 0), dv, b.dims ());
   
   return retval;
 }
 
 
 Matrix
 betainc (const Matrix& x, double a, double b)
 {
@@ -2341,17 +2339,17 @@ betainc (const NDArray& x, double a, con
       octave_idx_type nel = dv.numel ();
 
       retval.resize (dv);
 
       for (octave_idx_type i = 0; i < nel; i++)
 	retval (i) = betainc (x(i), a, b(i));
     }
   else
-    gripe_betainc_nonconformant (dv, dim_vector (0), b.dims ());
+    gripe_betainc_nonconformant (dv, dim_vector (0, 0), b.dims ());
   
   return retval;
 }
 
 NDArray
 betainc (const NDArray& x, const NDArray& a, double b)
 {
   NDArray retval;
@@ -2362,17 +2360,17 @@ betainc (const NDArray& x, const NDArray
       octave_idx_type nel = dv.numel ();
 
       retval.resize (dv);
 
       for (octave_idx_type i = 0; i < nel; i++)
 	retval (i) = betainc (x(i), a(i), b);
     }
   else
-    gripe_betainc_nonconformant (dv, a.dims (), dim_vector (0));
+    gripe_betainc_nonconformant (dv, a.dims (), dim_vector (0, 0));
   
   return retval;
 }
 
 NDArray
 betainc (const NDArray& x, const NDArray& a, const NDArray& b)
 {
   NDArray retval;
@@ -2495,17 +2493,17 @@ betainc (float x, const FloatNDArray& a,
       octave_idx_type nel = dv.numel ();
 
       retval.resize (dv);
 
       for (octave_idx_type i = 0; i < nel; i++)
 	retval (i) = betainc (x, a(i), b(i));
     }
   else
-    gripe_betainc_nonconformant (dim_vector (0), dv, b.dims ());
+    gripe_betainc_nonconformant (dim_vector (0, 0), dv, b.dims ());
   
   return retval;
 }
 
 
 FloatMatrix
 betainc (const FloatMatrix& x, float a, float b)
 {
@@ -2624,17 +2622,17 @@ betainc (const FloatNDArray& x, float a,
       octave_idx_type nel = dv.numel ();
 
       retval.resize (dv);
 
       for (octave_idx_type i = 0; i < nel; i++)
 	retval (i) = betainc (x(i), a, b(i));
     }
   else
-    gripe_betainc_nonconformant (dv, dim_vector (0), b.dims ());
+    gripe_betainc_nonconformant (dv, dim_vector (0, 0), b.dims ());
   
   return retval;
 }
 
 FloatNDArray
 betainc (const FloatNDArray& x, const FloatNDArray& a, float b)
 {
   FloatNDArray retval;
@@ -2645,17 +2643,17 @@ betainc (const FloatNDArray& x, const Fl
       octave_idx_type nel = dv.numel ();
 
       retval.resize (dv);
 
       for (octave_idx_type i = 0; i < nel; i++)
 	retval (i) = betainc (x(i), a(i), b);
     }
   else
-    gripe_betainc_nonconformant (dv, a.dims (), dim_vector (0));
+    gripe_betainc_nonconformant (dv, a.dims (), dim_vector (0, 0));
   
   return retval;
 }
 
 FloatNDArray
 betainc (const FloatNDArray& x, const FloatNDArray& a, const FloatNDArray& b)
 {
   FloatNDArray retval;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,26 @@
+2010-02-03  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/sub2ind.cc (get_dim_vector):
+	Eliminate unnecessary cast.
+
+	* DLD-FUNCTIONS/qr.cc (Fqrinsert, Fqrdelete):
+	Avoid type mismatch errors with octave_idx_type.
+
+	* oct-stream.cc (scanf_format_list::add_elt_to_list):
+	NUM_ELTS arg is octave_idx_type, not int.
+
+	* ov-struct.cc (octave_struct::load_ascii): Ensure args to
+	std::max are the same type.
+	* DLD-FUNCTIONS/lookup.cc (do_numeric_lookup): Likewise.
+	* DLD-FUNCTIONS/sub2ind.cc (get_dim_vector): Likewise.
+	* DLD-FUNCTIONS/strfind.cc (qs_search): Likewise, for std::min.
+	* DLD-FUNCTIONS/tril.cc (do_tril, do_triu): Likewise.
+
 2010-02-03  John W. Eaton  <jwe@octave.org>
 
 	* utils.cc (octave_vsnprintf): Assume we have vsnprintf with
 	semantics that match the version provided by gnulib.
 
 	* DLD-FUNCTIONS/convhulln.cc (Fconvhulln):
 	Use std::sstream instead of fixed-length buffer and snprintf.
 
diff --git a/src/DLD-FUNCTIONS/lookup.cc b/src/DLD-FUNCTIONS/lookup.cc
--- a/src/DLD-FUNCTIONS/lookup.cc
+++ b/src/DLD-FUNCTIONS/lookup.cc
@@ -139,26 +139,28 @@ do_numeric_lookup (const ArrayT& array, 
               octave_idx_type j = idx.xelem (i);
               ridx.xelem (i) = (j != 0 && values(i) == array(j-1)) ? j : 0;
             }
         }
       else if (left_inf && right_inf)
         {
           for (octave_idx_type i = 0; i < nval; i++)
             {
+              octave_idx_type one = 1;
               octave_idx_type j = idx.xelem (i);
-              ridx.xelem (i) = std::min (std::max (1, j), n-1);
+              ridx.xelem (i) = std::min (std::max (one, j), n-1);
             }
         }
       else if (left_inf)
         {
+          octave_idx_type one = 1;
           for (octave_idx_type i = 0; i < nval; i++)
             {
               octave_idx_type j = idx.xelem (i);
-              ridx.xelem (i) = std::max (1, j);
+              ridx.xelem (i) = std::max (one, j);
             }
         }
       else if (right_inf)
         {
           for (octave_idx_type i = 0; i < nval; i++)
             {
               octave_idx_type j = idx.xelem (i);
               ridx.xelem (i) = std::min (j, n-1);
diff --git a/src/DLD-FUNCTIONS/qr.cc b/src/DLD-FUNCTIONS/qr.cc
--- a/src/DLD-FUNCTIONS/qr.cc
+++ b/src/DLD-FUNCTIONS/qr.cc
@@ -998,52 +998,54 @@ If @var{orient} is @code{\"row\"}, full 
         if (check_qr_dims (argq, argr, col) 
             && (col || argx.rows () == 1))
           {
             if (check_index (argj, col))
               {
                 MArray<octave_idx_type> j
                   = argj.octave_idx_type_vector_value ();
 
+                octave_idx_type one = 1;
+
                 if (argq.is_real_type () 
                     && argr.is_real_type () 
                     && argx.is_real_type ())
                   {
                     // real case
                     if (argq.is_single_type () 
                         || argr.is_single_type () 
                         || argx.is_single_type ())
                       {
                         FloatMatrix Q = argq.float_matrix_value ();
                         FloatMatrix R = argr.float_matrix_value ();
                         FloatMatrix x = argx.float_matrix_value ();
 
                         FloatQR fact (Q, R);
 
                         if (col) 
-                          fact.insert_col (x, j-1);
+                          fact.insert_col (x, j-one);
                         else 
-                          fact.insert_row (x.row (0), j(0)-1);
+                          fact.insert_row (x.row (0), j(0)-one);
 
                         retval(1) = get_qr_r (fact);
                         retval(0) = fact.Q ();
 
                       }
                     else
                       {
                         Matrix Q = argq.matrix_value ();
                         Matrix R = argr.matrix_value ();
                         Matrix x = argx.matrix_value ();
 
                         QR fact (Q, R);
 
                         if (col) 
-                          fact.insert_col (x, j-1);
+                          fact.insert_col (x, j-one);
                         else 
-                          fact.insert_row (x.row (0), j(0)-1);
+                          fact.insert_row (x.row (0), j(0)-one);
 
                         retval(1) = get_qr_r (fact);
                         retval(0) = fact.Q ();
 
                       }
                   }
                 else
                   {
@@ -1054,35 +1056,35 @@ If @var{orient} is @code{\"row\"}, full 
                       {
                         FloatComplexMatrix Q = argq.float_complex_matrix_value ();
                         FloatComplexMatrix R = argr.float_complex_matrix_value ();
                         FloatComplexMatrix x = argx.float_complex_matrix_value ();
 
                         FloatComplexQR fact (Q, R);
 
                         if (col) 
-                          fact.insert_col (x, j-1);
+                          fact.insert_col (x, j-one);
                         else 
-                          fact.insert_row (x.row (0), j(0)-1);
+                          fact.insert_row (x.row (0), j(0)-one);
 
                         retval(1) = get_qr_r (fact);
                         retval(0) = fact.Q ();
                       }
                     else
                       {
                         ComplexMatrix Q = argq.complex_matrix_value ();
                         ComplexMatrix R = argr.complex_matrix_value ();
                         ComplexMatrix x = argx.complex_matrix_value ();
 
                         ComplexQR fact (Q, R);
 
                         if (col) 
-                          fact.insert_col (x, j-1);
+                          fact.insert_col (x, j-one);
                         else 
-                          fact.insert_row (x.row (0), j(0)-1);
+                          fact.insert_row (x.row (0), j(0)-one);
 
                         retval(1) = get_qr_r (fact);
                         retval(0) = fact.Q ();
                       }
                   }
 
               }
             else
@@ -1212,47 +1214,49 @@ If @var{orient} is @code{\"row\"}, full 
       if (col || orient == "row")
         if (check_qr_dims (argq, argr, col))
           {
             if (check_index (argj, col))
               {
                 MArray<octave_idx_type> j
                   = argj.octave_idx_type_vector_value ();
 
+                octave_idx_type one = 1;
+
                 if (argq.is_real_type ()
                     && argr.is_real_type ())
                   {
                     // real case
                     if (argq.is_single_type ()
                         || argr.is_single_type ())
                       {
                         FloatMatrix Q = argq.float_matrix_value ();
                         FloatMatrix R = argr.float_matrix_value ();
 
                         FloatQR fact (Q, R);
 
                         if (col) 
-                          fact.delete_col (j-1);
+                          fact.delete_col (j-one);
                         else 
-                          fact.delete_row (j(0)-1);
+                          fact.delete_row (j(0)-one);
 
                         retval(1) = get_qr_r (fact);
                         retval(0) = fact.Q ();
                       }
                     else
                       {
                         Matrix Q = argq.matrix_value ();
                         Matrix R = argr.matrix_value ();
 
                         QR fact (Q, R);
 
                         if (col) 
-                          fact.delete_col (j-1);
+                          fact.delete_col (j-one);
                         else 
-                          fact.delete_row (j(0)-1);
+                          fact.delete_row (j(0)-one);
 
                         retval(1) = get_qr_r (fact);
                         retval(0) = fact.Q ();
                       }
                   }
                 else
                   {
                     // complex case
@@ -1260,34 +1264,34 @@ If @var{orient} is @code{\"row\"}, full 
                         || argr.is_single_type ())
                       {
                         FloatComplexMatrix Q = argq.float_complex_matrix_value ();
                         FloatComplexMatrix R = argr.float_complex_matrix_value ();
 
                         FloatComplexQR fact (Q, R);
 
                         if (col) 
-                          fact.delete_col (j-1);
+                          fact.delete_col (j-one);
                         else 
-                          fact.delete_row (j(0)-1);
+                          fact.delete_row (j(0)-one);
 
                         retval(1) = get_qr_r (fact);
                         retval(0) = fact.Q ();
                       }
                     else
                       {
                         ComplexMatrix Q = argq.complex_matrix_value ();
                         ComplexMatrix R = argr.complex_matrix_value ();
 
                         ComplexQR fact (Q, R);
 
                         if (col) 
-                          fact.delete_col (j-1);
+                          fact.delete_col (j-one);
                         else 
-                          fact.delete_row (j(0)-1);
+                          fact.delete_row (j(0)-one);
 
                         retval(1) = get_qr_r (fact);
                         retval(0) = fact.Q ();
                       }
                   }
               }
             else
               error ("qrdelete: invalid index");
diff --git a/src/DLD-FUNCTIONS/strfind.cc b/src/DLD-FUNCTIONS/strfind.cc
--- a/src/DLD-FUNCTIONS/strfind.cc
+++ b/src/DLD-FUNCTIONS/strfind.cc
@@ -127,17 +127,18 @@ qs_search (const Array<char>& needle,
             }
         }
 
       if (j == n - m && std::equal (x, x + m, y + j))
         accum.push_back (j);
     }
 
   octave_idx_type nmatch = accum.size ();
-  Array<octave_idx_type> result (dim_vector (std::min (1, nmatch), nmatch));
+  octave_idx_type one = 1;
+  Array<octave_idx_type> result (dim_vector (std::min (one, nmatch), nmatch));
   octave_idx_type k = 0;
   for (std::deque<octave_idx_type>::const_iterator iter = accum.begin (); 
        iter != accum.end (); iter++)
     {
       result.xelem (k++) = *iter;
     }
 
   return result;
diff --git a/src/DLD-FUNCTIONS/sub2ind.cc b/src/DLD-FUNCTIONS/sub2ind.cc
--- a/src/DLD-FUNCTIONS/sub2ind.cc
+++ b/src/DLD-FUNCTIONS/sub2ind.cc
@@ -28,32 +28,31 @@ along with Octave; see the file COPYING.
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 
 
 static dim_vector 
-get_dim_vector (const octave_value& val,
-                const char *name)
+get_dim_vector (const octave_value& val, const char *name)
 {
   RowVector dimsv = val.row_vector_value (false, true);
   dim_vector dv;
   octave_idx_type n = dimsv.length ();
 
   if (n < 1)
     error ("%s: dimension vector must not be empty", name);
   else
     {
-      dv.resize (std::max (n, 2));
+      dv.resize (std::max (n, static_cast<octave_idx_type> (2)));
       dv(1) = 1;
       for (octave_idx_type i = 0; i < n; i++)
         {
-          octave_idx_type ii = static_cast<int> (dimsv(i));
+          octave_idx_type ii = dimsv(i);
           if (ii == dimsv(i) && ii >= 0)
             dv(i) = ii;
           else
             {
               error ("%s: dimension vector must contain integers", name);
               break;
             }
         }
diff --git a/src/DLD-FUNCTIONS/tril.cc b/src/DLD-FUNCTIONS/tril.cc
--- a/src/DLD-FUNCTIONS/tril.cc
+++ b/src/DLD-FUNCTIONS/tril.cc
@@ -37,80 +37,82 @@ along with Octave; see the file COPYING.
 
 // The bulk of the work.
 template <class T>
 static Array<T> 
 do_tril (const Array<T>& a, octave_idx_type k, bool pack)
 {
   octave_idx_type nr = a.rows (), nc = a.columns ();
   const T *avec = a.fortran_vec ();
+  octave_idx_type zero = 0;
 
   if (pack)
     {
-      octave_idx_type j1 = std::min (std::max (0, k), nc); 
-      octave_idx_type j2 = std::min (std::max (0, nr + k), nc);
+      octave_idx_type j1 = std::min (std::max (zero, k), nc); 
+      octave_idx_type j2 = std::min (std::max (zero, nr + k), nc);
       octave_idx_type n = j1 * nr + ((j2 - j1) * (nr-(j1-k) + nr-(j2-1-k))) / 2;
       Array<T> r (n);
       T *rvec = r.fortran_vec ();
       for (octave_idx_type j = 0; j < nc; j++)
         {
-          octave_idx_type ii = std::min (std::max (0, j - k), nr);
+          octave_idx_type ii = std::min (std::max (zero, j - k), nr);
           rvec = std::copy (avec + ii, avec + nr, rvec);
           avec += nr;
         }
 
       return r;
     }
   else
     {
       Array<T> r (a.dims ());
       T *rvec = r.fortran_vec ();
       for (octave_idx_type j = 0; j < nc; j++)
         {
-          octave_idx_type ii = std::min (std::max (0, j - k), nr);
+          octave_idx_type ii = std::min (std::max (zero, j - k), nr);
           std::fill (rvec, rvec + ii, T());
           std::copy (avec + ii, avec + nr, rvec + ii);
           avec += nr;
           rvec += nr;
         }
 
       return r;
     }
 }
 
 template <class T>
 static Array<T> 
 do_triu (const Array<T>& a, octave_idx_type k, bool pack)
 {
   octave_idx_type nr = a.rows (), nc = a.columns ();
   const T *avec = a.fortran_vec ();
+  octave_idx_type zero = 0;
 
   if (pack)
     {
-      octave_idx_type j1 = std::min (std::max (0, k), nc); 
-      octave_idx_type j2 = std::min (std::max (0, nr + k), nc);
+      octave_idx_type j1 = std::min (std::max (zero, k), nc); 
+      octave_idx_type j2 = std::min (std::max (zero, nr + k), nc);
       octave_idx_type n = ((j2 - j1) * ((j1+1-k) + (j2-k))) / 2 + (nc - j2) * nr;
       Array<T> r (n);
       T *rvec = r.fortran_vec ();
       for (octave_idx_type j = 0; j < nc; j++)
         {
-          octave_idx_type ii = std::min (std::max (0, j + 1 - k), nr);
+          octave_idx_type ii = std::min (std::max (zero, j + 1 - k), nr);
           rvec = std::copy (avec, avec + ii, rvec);
           avec += nr;
         }
 
       return r;
     }
   else
     {
       NoAlias<Array<T> > r (a.dims ());
       T *rvec = r.fortran_vec ();
       for (octave_idx_type j = 0; j < nc; j++)
         {
-          octave_idx_type ii = std::min (std::max (0, j + 1 - k), nr);
+          octave_idx_type ii = std::min (std::max (zero, j + 1 - k), nr);
           std::copy (avec, avec + ii, rvec);
           std::fill (rvec + ii, rvec + nr, T());
           avec += nr;
           rvec += nr;
         }
 
       return r;
     }
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -241,17 +241,17 @@ scanf_format_list::~scanf_format_list (v
     {
       scanf_format_elt *elt = list(i);
       delete elt;
     }	
 }
 
 void
 scanf_format_list::add_elt_to_list (int width, bool discard, char type,
-				    char modifier, int& num_elts,
+				    char modifier, octave_idx_type& num_elts,
 				    const std::string& char_class)
 {
   if (buf)
     {
       std::string text = buf->str ();
 
       if (! text.empty ())
 	{
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -1331,17 +1331,17 @@ octave_struct::load_ascii (std::istream&
   keywords[1] = "length";
 
   std::string kw;
 
   if (extract_keyword (is, keywords, kw, len, true))
     {
       if (kw == keywords[0])
         {
-          int mdims = std::max (len, 2);
+          int mdims = std::max (static_cast<int> (len), 2);
           dv.resize (mdims);
           for (int i = 0; i < mdims; i++)
             is >> dv(i);
 
           success = extract_keyword (is, keywords[1], len);
         }
     }
   else
