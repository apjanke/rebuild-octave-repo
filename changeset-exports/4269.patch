# HG changeset patch
# User jwe
# Date 1041617693 0
#      Fri Jan 03 18:14:53 2003 +0000
# Node ID 5b075bd78a91ba2e85d8d15009af5ab26ba8fc2a
# Parent  363d406ec86cf1b5bc95aef34eb18c733aea6bdb
[project @ 2003-01-03 18:13:14 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,12 +1,19 @@
-2003-01-03  John W Eaton  <eatonj@sun-68.cae.wisc.edu>
+2003-01-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* symtab.cc (symbol_table::rename): Explicitly convert C string to
+	std::string so type of second arg of ?: matches third.
+	(symbol_table::lookup): Likewise.
 
 	* mappers.cc: Remove std:: qualifiers from C library names.
 
+	* pr-output.cc: Replace std:: qualifiers on pow with STD_QUAL.
+	(STD_QUAL): New macro.
+
 2003-01-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-exp.h (tree_expression::has_magic_end): New pure virtual function.
 	* pt-id.h (tree_identifier::has_magic_end): New function.
 	* pt-colon.h (tree_colon_expression::has_magic_end): Likewise.
 	* pt-idx.h (tree_index_expression::has_magic_end): Likewise.
 	* pt-const.h (tree_constant::has_magic_end): Likewise.
 	* pt-unop.h (tree_unary_expression::has_magic_end): Likewise.
diff --git a/src/cutils.c b/src/cutils.c
--- a/src/cutils.c
+++ b/src/cutils.c
@@ -114,24 +114,24 @@ octave_strcasecmp (const char *s1, const
 }
 
 int
 octave_strncasecmp (const char *s1, const char *s2, size_t n)
 {
   return strncasecmp (s1, s2, n);
 }
 
-// XXX FIXME XXX -- we really need a configure test for this.
+/* XXX FIXME XXX -- we really need a configure test for this.  */
 
 #if defined __GNUC__ && __GNUC__ >= 3
 #define HAVE_C99_VSNPRINTF 1
 #endif
 
-// We manage storage.  User should not free it, and its contents are
-// only valid until next call to vsnprintf.
+/* We manage storage.  User should not free it, and its contents are
+   only valid until next call to vsnprintf.  */
 
 char *
 octave_vsnprintf (const char *fmt, va_list args)
 {
   static size_t size = 100;
 
   static char *buf = 0;
 
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -51,16 +51,22 @@ Software Foundation, 59 Temple Place - S
 #include "oct-obj.h"
 #include "oct-stream.h"
 #include "pager.h"
 #include "pr-output.h"
 #include "sysdep.h"
 #include "utils.h"
 #include "variables.h"
 
+#if defined (__GNUG__)
+#define STD_QUAL std::
+#else
+#define STD_QUAL
+#endif
+
 // TRUE means use a scaled fixed point format for `format long' and
 // `format short'.
 static bool Vfixed_point_format;
 
 // The maximum field width for a number printed by the default output
 // routines.
 static int Voutput_max_field_width;
 
@@ -494,17 +500,17 @@ set_format (const Matrix& m, int& fw, do
   double min_abs = pr_min_internal (m_abs);
 
   int x_max = max_abs == 0.0
     ? 0 : static_cast<int> (floor (log10 (max_abs) + 1.0));
 
   int x_min = min_abs == 0.0
     ? 0 : static_cast<int> (floor (log10 (min_abs) + 1.0));
 
-  scale = (x_max == 0 || int_or_inf_or_nan) ? 1.0 : std::pow (10.0, x_max - 1);
+  scale = (x_max == 0 || int_or_inf_or_nan) ? 1.0 : STD_QUAL pow (10.0, x_max - 1);
 
   set_real_matrix_format (sign, x_max, x_min, inf_or_nan,
 			  int_or_inf_or_nan, fw);
 }
 
 static inline void
 set_format (const Matrix& m)
 {
@@ -845,17 +851,17 @@ set_format (const ComplexMatrix& cm, int
     ? 0 : static_cast<int> (floor (log10 (i_max_abs) + 1.0));
 
   int i_x_min = i_min_abs == 0.0
     ? 0 : static_cast<int> (floor (log10 (i_min_abs) + 1.0));
 
   int x_max = r_x_max > i_x_max ? r_x_max : i_x_max;
   int x_min = r_x_min > i_x_min ? r_x_min : i_x_min;
 
-  scale = (x_max == 0 || int_or_inf_or_nan) ? 1.0 : std::pow (10.0, x_max - 1);
+  scale = (x_max == 0 || int_or_inf_or_nan) ? 1.0 : STD_QUAL pow (10.0, x_max - 1);
 
   set_complex_matrix_format (sign, x_max, x_min, r_x_max, r_x_min,
 			     inf_or_nan, int_or_inf_or_nan, r_fw, i_fw);
 }
 
 static inline void
 set_format (const ComplexMatrix& cm)
 {
@@ -986,17 +992,17 @@ set_format (const Range& r, int& fw, dou
   double min_abs = r_min < 0.0 ? -r_min : r_min;
 
   int x_max = max_abs == 0.0
     ? 0 : static_cast<int> (floor (log10 (max_abs) + 1.0));
 
   int x_min = min_abs == 0.0
     ? 0 : static_cast<int> (floor (log10 (min_abs) + 1.0));
 
-  scale = (x_max == 0 || all_ints) ? 1.0 : std::pow (10.0, x_max - 1);
+  scale = (x_max == 0 || all_ints) ? 1.0 : STD_QUAL pow (10.0, x_max - 1);
 
   set_range_format (sign, x_max, x_min, all_ints, fw);
 }
 
 static inline void
 set_format (const Range& r)
 {
   int fw;
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -468,17 +468,17 @@ symbol_record::read_only_error (const ch
 
 // A symbol table.
 
 symbol_record *
 symbol_table::lookup (const std::string& nm, bool insert, bool warn)
 {
   if (Vdebug_symtab_lookups)
     {
-      std::cerr << (table_name.empty () ? "???" : table_name)
+      std::cerr << (table_name.empty () ? std::string ("???") : table_name)
 		<< " symtab::lookup ["
 		<< (insert ? "I" : "-")
 		<< (warn ? "W" : "-")
 		<< "] \"" << nm << "\"\n";
     }
 
   unsigned int index = hash (nm);
 
@@ -506,17 +506,17 @@ symbol_table::lookup (const std::string&
   return 0;
 }
 
 void
 symbol_table::rename (const std::string& old_name, const std::string& new_name)
 {
   if (Vdebug_symtab_lookups)
     {
-      std::cerr << (table_name.empty () ? "???" : table_name)
+      std::cerr << (table_name.empty () ? std::string ("???") : table_name)
 		<< " symtab::rename "
 		<< "\"" << old_name << "\""
 		<< " to "
 		<< "\"" << new_name << "\"\n";
     }
 
   unsigned int index = hash (old_name);
 
