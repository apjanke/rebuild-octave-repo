# HG changeset patch
# User jwe
# Date 1029625201 0
#      Sat Aug 17 23:00:01 2002 +0000
# Node ID ac132116db8697725e034e8b066215f2337f4183
# Parent  1fb249b4d1bbfcf315afac3b36f450a7ed094955
[project @ 2002-08-17 23:00:00 by jwe]

diff --git a/liboctave/Array-idx.h b/liboctave/Array-idx.h
--- a/liboctave/Array-idx.h
+++ b/liboctave/Array-idx.h
@@ -160,17 +160,17 @@ Array<T>::maybe_delete_elements (idx_vec
 		      new_data[ii] = elem (i);
 		      ii++;
 		    }
 		}
 
 	      if (--rep->count <= 0)
 		delete rep;
 
-	      rep = new ArrayRep (new_data, new_len);
+	      rep = new typename Array<T>::ArrayRep (new_data, new_len);
 
 	      set_max_indices (1);
 	    }
 	  else
 	    (*current_liboctave_error_handler)
 	      ("A(idx) = []: index out of range");
 	}
     }
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -43,17 +43,17 @@ Software Foundation, 59 Temple Place - S
 #include "lo-error.h"
 
 // One dimensional array class.  Handles the reference counting for
 // all the derived classes.
 
 template <class T>
 Array<T>::Array (int n, const T& val)
 {
-  rep = new ArrayRep (n);
+  rep = new typename Array<T>::ArrayRep (n);
 
   for (int i = 0; i < n; i++)
     rep->data[i] = val;
 
 #ifdef HEAVYWEIGHT_INDEXING
   max_indices = 1;
   idx_count = 0;
   idx = 0;
@@ -100,21 +100,21 @@ Array<T>::resize (int n)
     {
       (*current_liboctave_error_handler) ("can't resize to negative dimension");
       return;
     }
 
   if (n == length ())
     return;
 
-  ArrayRep *old_rep = rep;
+  typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
   int old_len = length ();
 
-  rep = new ArrayRep (n);
+  rep = new typename Array<T>::ArrayRep (n);
 
   if (old_data && old_len > 0)
     {
       int min_len = old_len < n ? old_len : n;
 
       for (int i = 0; i < min_len; i++)
 	xelem (i) = old_data[i];
     }
@@ -131,21 +131,21 @@ Array<T>::resize (int n, const T& val)
     {
       (*current_liboctave_error_handler) ("can't resize to negative dimension");
       return;
     }
 
   if (n == length ())
     return;
 
-  ArrayRep *old_rep = rep;
+  typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
   int old_len = length ();
 
-  rep = new ArrayRep (n);
+  rep = new typename Array<T>::ArrayRep (n);
 
   int min_len = old_len < n ? old_len : n;
 
   if (old_data && old_len > 0)
     {
       for (int i = 0; i < min_len; i++)
 	xelem (i) = old_data[i];
     }
@@ -159,17 +159,17 @@ Array<T>::resize (int n, const T& val)
 
 template <class T>
 T *
 Array<T>::fortran_vec (void)
 {
   if (rep->count > 1)
     {
       --rep->count;
-      rep = new ArrayRep (*rep);
+      rep = new typename Array<T>::ArrayRep (*rep);
     }
   return rep->data;
 }
 template <class T>
 T
 Array<T>::range_error (const char *fcn, int n) const
 {
   (*current_liboctave_error_handler) ("%s (%d): range error", fcn, n);
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -103,45 +103,45 @@ protected:
 #ifdef HEAVYWEIGHT_INDEXING
   idx_vector *idx;
   int max_indices;
   int idx_count;
 #endif
 
 protected:
 
-  ArrayRep *rep;
+  typename Array<T>::ArrayRep *rep;
 
   Array (T *d, int l)
     {
-      rep = new ArrayRep (d, l);
+      rep = new typename Array<T>::ArrayRep (d, l);
 
 #ifdef HEAVYWEIGHT_INDEXING
       idx = 0;
       max_indices = 1;
       idx_count = 0;
 #endif
     }
 
 public:
 
   Array (void)
     {
-      rep = new ArrayRep ();
+      rep = new typename Array<T>::ArrayRep ();
 
 #ifdef HEAVYWEIGHT_INDEXING
       idx = 0;
       max_indices = 1;
       idx_count = 0;
 #endif
     }
 
   explicit Array (int n)
     {
-      rep = new ArrayRep (n);
+      rep = new typename Array<T>::ArrayRep (n);
 
 #ifdef HEAVYWEIGHT_INDEXING
       idx = 0;
       max_indices = 1;
       idx_count = 0;
 #endif
     }
 
diff --git a/liboctave/Array2-idx.h b/liboctave/Array2-idx.h
--- a/liboctave/Array2-idx.h
+++ b/liboctave/Array2-idx.h
@@ -276,17 +276,17 @@ Array2<T>::maybe_delete_elements (idx_ve
 
 		  ii++;
 		}
 	    }
 
 	  if (--rep->count <= 0)
 	    delete rep;
 
-	  rep = new Array<T>::ArrayRep (new_data, new_n);
+	  rep = new typename Array<T>::ArrayRep (new_data, new_n);
 
 	  if (nr == 1)
 	    {
 	      d1 = 1;
 	      d2 = new_n;
 	    }
 	  else
 	    {
@@ -390,17 +390,17 @@ Array2<T>::maybe_delete_elements (idx_ve
 				new_data[nr*jj+i] = elem (i, j);
 			      jj++;
 			    }
 			}
 
 		      if (--rep->count <= 0)
 			delete rep;
 
-		      rep = new Array<T>::ArrayRep (new_data, nr * new_nc);
+		      rep = new typename Array<T>::ArrayRep (new_data, nr * new_nc);
 
 		      d2 = new_nc;
 
 		      set_max_indices (2);
 		    }
 		  else
 		    (*current_liboctave_error_handler)
 		      ("A(idx) = []: index out of range");
@@ -454,17 +454,17 @@ Array2<T>::maybe_delete_elements (idx_ve
 				new_data[new_nr*j+ii] = elem (i, j);
 			      ii++;
 			    }
 			}
 
 		      if (--rep->count <= 0)
 			delete rep;
 
-		      rep = new Array<T>::ArrayRep (new_data, new_nr * nc);
+		      rep = new typename Array<T>::ArrayRep (new_data, new_nr * nc);
 
 		      d1 = new_nr;
 
 		      set_max_indices (2);
 		    }
 		  else
 		    (*current_liboctave_error_handler)
 		      ("A(idx) = []: index out of range");
diff --git a/liboctave/Array2.cc b/liboctave/Array2.cc
--- a/liboctave/Array2.cc
+++ b/liboctave/Array2.cc
@@ -124,17 +124,17 @@ Array2<T>::resize (int r, int c)
 
   typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_len = length ();
 
-  rep = new Array<T>::ArrayRep (get_size (r, c));
+  rep = new typename Array<T>::ArrayRep (get_size (r, c));
 
   d1 = r;
   d2 = c;
 
   if (old_data && old_len > 0)
     {
       int min_r = old_d1 < r ? old_d1 : r;
       int min_c = old_d2 < c ? old_d2 : c;
@@ -164,17 +164,17 @@ Array2<T>::resize (int r, int c, const T
 
   typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_len = length ();
 
-  rep = new Array<T>::ArrayRep (get_size (r, c));
+  rep = new typename Array<T>::ArrayRep (get_size (r, c));
 
   d1 = r;
   d2 = c;
 
   int min_r = old_d1 < r ? old_d1 : r;
   int min_c = old_d2 < c ? old_d2 : c;
 
   if (old_data && old_len > 0)
diff --git a/liboctave/Array3.cc b/liboctave/Array3.cc
--- a/liboctave/Array3.cc
+++ b/liboctave/Array3.cc
@@ -63,17 +63,17 @@ Array3<T>::resize (int r, int c, int p)
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_d3 = dim3 ();
   int old_len = length ();
 
   int ts = get_size (get_size (r, c), p);
 
-  rep = new Array<T>::ArrayRep (ts);
+  rep = new typename Array<T>::ArrayRep (ts);
 
   d1 = r;
   d2 = c;
   d3 = p;
 
   if (old_data && old_len > 0)
     {
       int min_r = old_d1 < r ? old_d1 : r;
@@ -110,17 +110,17 @@ Array3<T>::resize (int r, int c, int p, 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_d3 = dim3 ();
 
   int old_len = length ();
 
   int ts = get_size (get_size (r, c), p);
 
-  rep = new Array<T>::ArrayRep (ts);
+  rep = new typename Array<T>::ArrayRep (ts);
 
   d1 = r;
   d2 = c;
   d3 = p;
 
   int min_r = old_d1 < r ? old_d1 : r;
   int min_c = old_d2 < c ? old_d2 : c;
   int min_p = old_d3 < p ? old_d3 : p;
diff --git a/liboctave/ArrayN.cc b/liboctave/ArrayN.cc
--- a/liboctave/ArrayN.cc
+++ b/liboctave/ArrayN.cc
@@ -225,17 +225,17 @@ ArrayN<T>::resize (const Array<int>& dim
     }
 
   if (no_change)
     return;
 
   typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
 
-  rep = new Array<T>::ArrayRep (get_size (dims));
+  rep = new typename Array<T>::ArrayRep (get_size (dims));
 
   Array<int> old_dimensions = dimensions;
 
   int old_len = length ();
 
   dimensions = dims;
 
   Array<int> arr_idx (dimensions.length (), 0);
@@ -282,17 +282,17 @@ ArrayN<T>::resize (const Array<int>& dim
   if (no_change)
     return;
 
   typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
 
   int len = get_size (dims);
 
-  rep = new Array<T>::ArrayRep (len);
+  rep = new typename Array<T>::ArrayRep (len);
 
   Array<int> old_dimensions = dimensions;
 
   int old_len = length ();
 
   dimensions = dims;
 
   Array<int> arr_idx (dimensions.length (), 0);
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,12 +1,12 @@
 2002-08-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
-	* Array2-idx.h, DiagArray2.cc, Array2.cc, Array3.cc, ArrayN.cc:
-	Try to avoid implicit typename warnings from g++-3.2.
+	* Array.h, Array2-idx.h, DiagArray2.cc, Array2.cc, Array3.cc,
+	ArrayN.cc: Add typename where needed.
 
 	* DASPK.cc: Include lo-sstream.h and use macros instead of using
 	strstream classes directly.
 	* DASRT.cc: Likewise.
 	* DASSL.cc: Likewise.
 	* LSODE.cc: Likewise.
 	* ODESSA.cc: Likewise.
 
diff --git a/liboctave/DiagArray2.cc b/liboctave/DiagArray2.cc
--- a/liboctave/DiagArray2.cc
+++ b/liboctave/DiagArray2.cc
@@ -135,17 +135,17 @@ DiagArray2<T>::resize (int r, int c)
     return;
 
   typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
   int old_len = length ();
 
   int new_len = r < c ? r : c;
 
-  rep = new Array<T>::ArrayRep (new_len);
+  rep = new typename Array<T>::ArrayRep (new_len);
 
   nr = r;
   nc = c;
 
   if (old_data && old_len > 0)
     {
       int min_len = old_len < new_len ? old_len : new_len;
 
@@ -171,17 +171,17 @@ DiagArray2<T>::resize (int r, int c, con
     return;
 
   typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
   int old_len = length ();
 
   int new_len = r < c ? r : c;
 
-  rep = new Array<T>::ArrayRep (new_len);
+  rep = new typename Array<T>::ArrayRep (new_len);
 
   nr = r;
   nc = c;
 
   int min_len = old_len < new_len ? old_len : new_len;
 
   if (old_data && old_len > 0)
     {
