# HG changeset patch
# User jwe
# Date 1063385164 0
#      Fri Sep 12 16:46:04 2003 +0000
# Node ID 24af46b4ce84dfb12bdfb04686169065bd3a770c
# Parent  59eaa51e43d37b8a3e687f60f951678079fc3347
[project @ 2003-09-12 16:46:04 by jwe]

diff --git a/liboctave/NDArray.cc b/liboctave/NDArray.cc
deleted file mode 100644
--- a/liboctave/NDArray.cc
+++ /dev/null
@@ -1,84 +0,0 @@
-//N-D Array  manipulations.
-/*
-
-Copyright (C) 1996, 1997 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 2, or (at your option) any
-later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, write to the Free
-Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-
-*/
-
-#if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
-#pragma implementation
-#endif
-
-#ifdef HAVE_CONFIG_H
-#include <config.h>
-#endif
-
-#include "NDArray.h"
-#include "mx-base.h"
-#include "lo-ieee.h"
-
-bool
-NDArray::any_element_is_negative (bool neg_zero) const
-{
-  int n = length (); 
-  if (neg_zero)
-    {
-      for (int i = 0; i < n; i++)
-	if (lo_ieee_signbit (Array<double>::elem (i)))
-	  return true;
-    }
-  else
-    {
-      for (int i = 0; i < n; i++)
-	if (Array<double>::elem (i) < 0)
-	  return true;
-    }
- 
- return false;
-}
-
-bool
-NDArray::all_integers (double& max_val, double& min_val) const
-{
-  int n = length ();
-
-  if (n > 0)
-    {
-      max_val = Array<double>::elem (0);
-      min_val = Array<double>::elem (0);
-    }
-  else 
-    return false;
-
-  for (int i = 0; i < n; i++)
-    {
-      double val = Array<double>::elem (0);
-      
-      if (val > max_val)
-	max_val = val;
-
-      if (val < min_val)
-	min_val = val;
-
-      if (D_NINT (val) != val)
-	return false;
-    }
-
-  return true;
-}
diff --git a/liboctave/NDArray.h b/liboctave/NDArray.h
deleted file mode 100644
--- a/liboctave/NDArray.h
+++ /dev/null
@@ -1,82 +0,0 @@
-/*
-
-Copyright (C) 1996, 1997 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 2, or (at your option) any
-later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, write to the Free
-Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-
-*/
-
-#if !defined (octave_NDArray_int_h)
-#define octave_NDArray_int_h 1
-
-#if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
-#pragma interface
-#endif
-
-#include "MArrayN.h"
-//#include "mx-base.h"
-
-#include "mx-defs.h"
-#include "mx-op-defs.h"
-
-#include "data-conv.h"
-#include "mach-info.h"
-
-class NDArray : public MArrayN<double>
-{
- public:
-  
-  NDArray (void) : MArrayN<double> () { }
-
-  NDArray (Array<int>& dims) : MArrayN<double> (dims) { }
-
-  NDArray (Array<int>& dims, double val) : MArrayN<double> (dims, val) { }
-  
-  NDArray (const NDArray& a): MArrayN<double> (a) { }
-
-  NDArray (const MArrayN<double>& a) : MArrayN<double> (a) { }
-
-  NDArray (const Matrix& m) : MArrayN<double> (m) { }
-
-  NDArray (const ArrayN<double>& a) : MArrayN<double> (a) { }
-
-  //NDArray (const Array<double>& a) : MArrayN<double> (a) { }
-
-  NDArray& operator = (const NDArray& a)
-    {
-      MArrayN<double>::operator = (a);
-      return *this;
-    }
-
-  // i/o
-
-  // friend std::ostream& operator << (std::ostream& os, const NDArray& a);
-  // friend std::istream& operator >> (std::istream& is, NDArray& a);
-
-  static double resize_fill_value (void) { return 0; }
-
-  bool any_element_is_negative (bool = false) const;
-  bool all_integers (double& max_val, double& min_val) const;
-
- private:
-
-  NDArray (double *d, Array<int>& dims) : MArrayN<double> (d, dims) { }
-};
-
-MARRAY_FORWARD_DEFS (MArrayN, NDArray, double)
-
-#endif
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
new file mode 100644
--- /dev/null
+++ b/liboctave/dNDArray.cc
@@ -0,0 +1,84 @@
+//N-D Array  manipulations.
+/*
+
+Copyright (C) 1996, 1997 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
+#pragma implementation
+#endif
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "NDArray.h"
+#include "mx-base.h"
+#include "lo-ieee.h"
+
+bool
+NDArray::any_element_is_negative (bool neg_zero) const
+{
+  int n = length (); 
+  if (neg_zero)
+    {
+      for (int i = 0; i < n; i++)
+	if (lo_ieee_signbit (Array<double>::elem (i)))
+	  return true;
+    }
+  else
+    {
+      for (int i = 0; i < n; i++)
+	if (Array<double>::elem (i) < 0)
+	  return true;
+    }
+ 
+ return false;
+}
+
+bool
+NDArray::all_integers (double& max_val, double& min_val) const
+{
+  int n = length ();
+
+  if (n > 0)
+    {
+      max_val = Array<double>::elem (0);
+      min_val = Array<double>::elem (0);
+    }
+  else 
+    return false;
+
+  for (int i = 0; i < n; i++)
+    {
+      double val = Array<double>::elem (0);
+      
+      if (val > max_val)
+	max_val = val;
+
+      if (val < min_val)
+	min_val = val;
+
+      if (D_NINT (val) != val)
+	return false;
+    }
+
+  return true;
+}
diff --git a/liboctave/dNDArray.h b/liboctave/dNDArray.h
new file mode 100644
--- /dev/null
+++ b/liboctave/dNDArray.h
@@ -0,0 +1,82 @@
+/*
+
+Copyright (C) 1996, 1997 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#if !defined (octave_NDArray_int_h)
+#define octave_NDArray_int_h 1
+
+#if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
+#pragma interface
+#endif
+
+#include "MArrayN.h"
+//#include "mx-base.h"
+
+#include "mx-defs.h"
+#include "mx-op-defs.h"
+
+#include "data-conv.h"
+#include "mach-info.h"
+
+class NDArray : public MArrayN<double>
+{
+ public:
+  
+  NDArray (void) : MArrayN<double> () { }
+
+  NDArray (Array<int>& dims) : MArrayN<double> (dims) { }
+
+  NDArray (Array<int>& dims, double val) : MArrayN<double> (dims, val) { }
+  
+  NDArray (const NDArray& a): MArrayN<double> (a) { }
+
+  NDArray (const MArrayN<double>& a) : MArrayN<double> (a) { }
+
+  NDArray (const Matrix& m) : MArrayN<double> (m) { }
+
+  NDArray (const ArrayN<double>& a) : MArrayN<double> (a) { }
+
+  //NDArray (const Array<double>& a) : MArrayN<double> (a) { }
+
+  NDArray& operator = (const NDArray& a)
+    {
+      MArrayN<double>::operator = (a);
+      return *this;
+    }
+
+  // i/o
+
+  // friend std::ostream& operator << (std::ostream& os, const NDArray& a);
+  // friend std::istream& operator >> (std::istream& is, NDArray& a);
+
+  static double resize_fill_value (void) { return 0; }
+
+  bool any_element_is_negative (bool = false) const;
+  bool all_integers (double& max_val, double& min_val) const;
+
+ private:
+
+  NDArray (double *d, Array<int>& dims) : MArrayN<double> (d, dims) { }
+};
+
+MARRAY_FORWARD_DEFS (MArrayN, NDArray, double)
+
+#endif
