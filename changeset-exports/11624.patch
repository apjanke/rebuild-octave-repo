# HG changeset patch
# User jwe
# Date 1201549241 0
#      Mon Jan 28 19:40:41 2008 +0000
# Branch release-3-0-x
# Node ID 81f0e11253e9f303a02e974981d128f810c27419
# Parent  d00dcbc03a4cfecd267d42d0d7a76b11abd2480a
[3-0-0-branch @ 2008-01-28 19:38:13 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2008-01-28  David Bateman  <dbateman@free.fr>
+
+	* ov-mapper.cc (SPARSE_MAPPER_LOOP_2): Use data method instead of
+	elem in the case where F(0) is non-zero.
+
+	* DLD-FUNCTIONS/sort.cc (ascending_compare, descending_compare):
+	Always instantiate the specialized double versions of these
+	functions so that the NaN values are correctly sorted in the
+	Sparse<double> sort.
+
 2008-01-24  Pascal Dupuis  <Pascal.Dupuis@worldonline.be>
 
 	* mxarray.h.in: Include <cstring>.
 
 2008-01-14  John W. Eaton  <jwe@octave.org>
 
 	* load-path.cc (load_path::do_initialize): Start with sys_path empty.
 	(maybe_add_path_elts): Omit path_sep_str if path is empty.
diff --git a/src/DLD-FUNCTIONS/sort.cc b/src/DLD-FUNCTIONS/sort.cc
--- a/src/DLD-FUNCTIONS/sort.cc
+++ b/src/DLD-FUNCTIONS/sort.cc
@@ -737,16 +737,37 @@ mx_sort_indexed (ArrayN<double> &m, int 
   retval(1) = idx;
   retval(0) = m;
 
   return retval;
 }
 
 #else
 
+template class octave_sort<double>;
+template class vec_index<double>;
+template class octave_sort<vec_index<double> *>;
+
+#if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
+static octave_value_list
+mx_sort (ArrayN<double> &m, int dim, sortmode mode);
+
+static octave_value_list
+mx_sort_indexed (ArrayN<double> &m, int dim, sortmode mode);
+#endif
+#endif
+
+#if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
+static octave_value_list
+mx_sort_sparse (Sparse<double> &m, int dim, sortmode mode);
+
+static octave_value_list
+mx_sort_sparse_indexed (Sparse<double> &m, int dim, sortmode mode);
+#endif
+
 template <>
 bool
 ascending_compare (double a, double b)
 {
   return (xisnan (b) || (a < b));
 }
 
 template <>
@@ -765,37 +786,16 @@ descending_compare (double a, double b)
 
 template <>
 bool
 descending_compare (vec_index<double> *a, vec_index<double> *b)
 {
   return (xisnan (a->vec) || (a->vec > b->vec));
 }
 
-template class octave_sort<double>;
-template class vec_index<double>;
-template class octave_sort<vec_index<double> *>;
-
-#if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
-static octave_value_list
-mx_sort (ArrayN<double> &m, int dim, sortmode mode);
-
-static octave_value_list
-mx_sort_indexed (ArrayN<double> &m, int dim, sortmode mode);
-#endif
-#endif
-
-#if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
-static octave_value_list
-mx_sort_sparse (Sparse<double> &m, int dim, sortmode mode);
-
-static octave_value_list
-mx_sort_sparse_indexed (Sparse<double> &m, int dim, sortmode mode);
-#endif
-
 // std::abs(Inf) returns NaN!!
 static inline double
 xabs (const Complex& x)
 {
   return (xisinf (x.real ()) || xisinf (x.imag ())) ? octave_Inf : abs (x);
 }
 
 template <>
diff --git a/src/ov-mapper.cc b/src/ov-mapper.cc
--- a/src/ov-mapper.cc
+++ b/src/ov-mapper.cc
@@ -1,12 +1,12 @@
 /*
 
 Copyright (C) 1996, 1997, 1998, 1999, 2000, 2002, 2003, 2004, 2005,
-              2006, 2007 John W. Eaton
+              2006, 2007, 2008 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
 
@@ -154,17 +154,18 @@ any_element_greater_than (const SparseMa
 	  octave_idx_type nc = M.cols (); \
 	  \
 	  T result (nr, nc, f_zero); \
 	  \
 	  for (octave_idx_type j = 0; j < nc; j++) \
 	    for (octave_idx_type i = M.cidx(j); i < M.cidx (j+1); i++) \
 	      { \
 		OCTAVE_QUIT; \
-	        result.elem (M.ridx (i), j) = CONV (F (M.data(i))); \
+		/* Use data instead of elem for better performance.  */ \
+		result.data (M.ridx (i) + j * nr) = CONV (F (M.data(i))); \
 		\
 		if (error_state) \
 		  return retval; \
 	      } \
 	  \
 	  result.maybe_compress (true);	\
           retval = R; \
 	} \
