# HG changeset patch
# User Julien Bect <julien.bect@supelec.fr>
# Date 1376895098 -7200
#      Mon Aug 19 08:51:38 2013 +0200
# Node ID 247126168d237ccb7e79c65f651c122982b0f724
# Parent  0020995f297744860df92509489ba138bbdb60e7
Don't remove globals when 'clear' called without arguments (bug #39790).

* NEWS: Announce change.

* variables.cc (Fclear): Do not clear the global workspace when called without
arguments (matches Matlab behavior).  Rewrite documentation.  Add a BIST test.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -72,16 +72,22 @@ Summary of important user-visible change
 
           Option     |  New Default   |  Old Default
       ------------------------------------------------
         FinDiffType  |   "forward"    |   "central"
         MaxFunEvals  | 100*length(x0) |     Inf
         TolX         |     1e-6       |     1e-7
         TolFun       |     1e-6       |     1e-7
 
+ ** Using "clear" with no arguments now removes only local variables
+    from the current workspace.  Global variables will no longer be
+    visible, but they continue to exist in the global workspace and
+    possibly other workspaces such as the base workspace.
+    This change was made for Matlab compatibility.
+
  ** Figure graphic objects have a new property "Number" which is
     read-only and will return the handle (number) of the figure.
     However, if the property "IntegerHandle" has been set to "off" then
     the property will return an empty matrix ([]).
 
  ** Patch and surface graphic objects now use the "FaceNormals" property
     for flat lighting.
 
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -1183,97 +1183,102 @@ do_matlab_compatible_clear (octave::symb
     {                                           \
       if (cond)                                 \
         print_usage ();                         \
     }                                           \
   while (0)
 
 DEFMETHOD (clear, interp, args, ,
            doc: /* -*- texinfo -*-
-@deftypefn {} {} clear [options] pattern @dots{}
-Delete the names matching the given patterns from the symbol table.
+@deftypefn  {} {} clear
+@deftypefnx {} {} clear @var{pattern} @dots{}
+@deftypefnx {} {} clear @var{options} @var{pattern} @dots{}
+Delete the names matching the given @var{pattern}s from the symbol table.
 
-The pattern may contain the following special characters:
+The @var{pattern} may contain the following special characters:
 
 @table @code
 @item ?
 Match any single character.
 
 @item *
 Match zero or more characters.
 
 @item [ @var{list} ]
-Match the list of characters specified by @var{list}.  If the first
-character is @code{!} or @code{^}, match all characters except those
-specified by @var{list}.  For example, the pattern @samp{[a-zA-Z]} will
-match all lowercase and uppercase alphabetic characters.
+Match the list of characters specified by @var{list}.  If the first character
+is @code{!} or @code{^}, match all characters except those specified by
+@var{list}.  For example, the pattern @code{[a-zA-Z]} will match all lowercase
+and uppercase alphabetic characters.
 @end table
 
 For example, the command
 
 @example
 clear foo b*r
 @end example
 
 @noindent
-clears the name @code{foo} and all names that begin with the letter
-@code{b} and end with the letter @code{r}.
-
-If @code{clear} is called without any arguments, all user-defined
-variables (local and global) are cleared from the symbol table.
+clears the name @code{foo} and all names that begin with the letter @code{b}
+and end with the letter @code{r}.
 
-If @code{clear} is called with at least one argument, only the visible
-names matching the arguments are cleared.  For example, suppose you have
-defined a function @code{foo}, and then hidden it by performing the
-assignment @code{foo = 2}.  Executing the command @kbd{clear foo} once
-will clear the variable definition and restore the definition of
-@code{foo} as a function.  Executing @kbd{clear foo} a second time will
-clear the function definition.
+If @code{clear} is called without any arguments, all user-defined variables
+are cleared from the current workspace (i.e., local variables).  Any global
+variables present will no longer be visible in the current workspace, but they
+will continue to exist in the global workspace.  Functions are unaffected by
+this form of @code{clear}.
 
 The following options are available in both long and short form
 
 @table @code
-@item -all, -a
-Clear all local and global user-defined variables and all functions from the
+@item all, -all, -a
+Clear all local and global user-defined variables, and all functions from the
 symbol table.
 
 @item -exclusive, -x
-Clear the variables that don't match the following pattern.
+Clear variables that do @strong{not} match the following pattern.
 
-@item -functions, -f
-Clear the function names and the built-in symbols names.
+@item functions, -functions, -f
+Clear function names from the function symbol table.
 
-@item -global, -g
-Clear global symbol names.
+@item global, -global, -g
+Clear global variable names.
 
-@item -variables, -v
+@item variables, -variables, -v
 Clear local variable names.
 
-@item -classes, -c
-Clears the class structure table and clears all objects.
+@item classes, -classes, -c
+Clear the class structure table and all objects.
 
 @item -regexp, -r
-The arguments are treated as regular expressions as any variables that
-match will be cleared.
+The @var{pattern} arguments are treated as regular expressions and any matches
+will be cleared.
 @end table
 
-With the exception of @code{exclusive}, all long options can be used
-without the dash as well.
+With the exception of @option{-exclusive} and @option{-regexp}, all long
+options can be used without the dash as well.
+
+Programming Note: The command @code{clear @var{name}} only clears the variable
+@var{name} when both a variable and a (shadowed) function named @var{name}
+are currently defined.  For example, suppose you have defined a function
+@code{foo}, and then hidden it by performing the assignment @code{foo = 2}.
+Executing the command @code{clear foo} once will clear the variable
+definition and restore the definition of @code{foo} as a function.
+Executing @code{clear foo} a second time will clear the function definition.
+
 @seealso{who, whos, exist}
 @end deftypefn */)
 {
   octave::symbol_table& symtab = interp.get_symbol_table ();
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("clear");
 
   if (argc == 1)
     {
-      do_clear_globals (symtab, argv, argc, true);
       do_clear_variables (symtab, argv, argc, true);
 
       octave_link::clear_workspace ();
     }
   else
     {
       int idx = 0;
 
@@ -1385,16 +1390,26 @@ without the dash as well.
                 }
             }
         }
     }
 
   return ovl ();
 }
 
+/*
+%!test
+%! global x
+%! x = 3;
+%! clear
+%! assert (! exist ("x", "var"));  # x is not in the current workspace anymore
+%! global x                        # but still lives in the global workspace
+%! assert (exist ("x", "var"));
+*/
+
 static std::string Vmissing_function_hook = "__unimplemented__";
 
 DEFUN (missing_function_hook, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{val} =} missing_function_hook ()
 @deftypefnx {} {@var{old_val} =} missing_function_hook (@var{new_val})
 @deftypefnx {} {} missing_function_hook (@var{new_val}, "local")
 Query or set the internal variable that specifies the function to call when
