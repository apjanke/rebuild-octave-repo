# HG changeset patch
# User jwe
# Date 863724153 0
#      Thu May 15 19:22:33 1997 +0000
# Node ID ae2471c4e5c0b580d8291c98307a685961e36927
# Parent  f2be17e6f1ea7239176f539a788e721a538fafc6
[project @ 1997-05-15 19:22:05 by jwe]

diff --git a/src/pt-indir.cc b/src/pt-indir.cc
--- a/src/pt-indir.cc
+++ b/src/pt-indir.cc
@@ -56,23 +56,23 @@ tree_indirect_ref::name (void) const
 }
 
 octave_value_list
 tree_indirect_ref::rvalue (int nargout)
 {
   octave_value_list retval;
 
   if (nargout > 1)
-    error ("%s, %s", __FILE__, __LINE__);
+    error ("invalid number of output arguments for structure reference");
   else
     {
       octave_value_list tmp = expr->rvalue (nargout);
 
       if (tmp.empty ())
-	error ("%s, %s", __FILE__, __LINE__);
+	eval_error ();
       else
 	{
 	  octave_value val = tmp(0).do_struct_elt_index_op (nm);
 
 	  if (print_result () && nargout == 0 && val.is_defined ())
 	    val.print_with_name (octave_stdout, name ());
 
 	  retval = val;
@@ -107,13 +107,21 @@ tree_indirect_ref::lvalue (void)
 }
 
 void
 tree_indirect_ref::accept (tree_walker& tw)
 {
   tw.visit_indirect_ref (*this);
 }
 
+void
+tree_indirect_ref::eval_error (void) const
+{
+  if (error_state > 0)
+    ::error ("evaluating structure reference operator near line %d, column %d",
+	     oper () . c_str (), line (), column ());
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/pt-indir.h b/src/pt-indir.h
--- a/src/pt-indir.h
+++ b/src/pt-indir.h
@@ -77,16 +77,18 @@ public:
 
 private:
 
   // The LHS of this structure reference.
   tree_expression *expr;
 
   // The sub-element name.
   string nm;
+
+  void eval_error (void) const;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -53,16 +53,17 @@ Software Foundation, 59 Temple Place - S
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "load-save.h"
 #include "oct-obj.h"
 #include "pt-cmd.h"
 #include "pt-exp.h"
+#include "pt-misc.h"
 #include "pt-plot.h"
 #include "pt-walk.h"
 #include "sighandlers.h"
 #include "sysdep.h"
 #include "utils.h"
 #include "variables.h"
 
 // If TRUE, a replot command is issued automatically each time a plot
@@ -401,34 +402,36 @@ plot_range::~plot_range (void)
 
 void
 plot_range::print (ostrstream& plot_buf)
 {
   plot_buf << " [";
 
   if (lower)
     {
-      octave_value lower_val = lower->eval ();
+      octave_value lower_val = lower->rvalue ();
+
       if (error_state)
 	{
 	  ::error ("evaluating lower bound of plot range");
 	  return;
 	}
       else
 	{
 	  double lo = lower_val.double_value ();
 	  plot_buf << lo;
 	}
     }
 
   plot_buf << ":";
 
   if (upper)
     {
-      octave_value upper_val = upper->eval ();
+      octave_value upper_val = upper->rvalue ();
+
       if (error_state)
 	{
 	  ::error ("evaluating upper bound of plot range");
 	  return;
 	}
       else
 	{
 	  double hi = upper_val.double_value ();
@@ -459,17 +462,18 @@ subplot_using::eval (int ndim, int n_max
 
   if (qual_count > 0)
     val.resize (qual_count);
 
   for (int i = 0; i < qual_count; i++)
     {
       if (x[i])
 	{
-	  octave_value tmp = x[i]->eval ();
+	  octave_value tmp = x[i]->rvalue ();
+
 	  if (error_state)
 	    {
 	      ::error ("evaluating plot using command");
 	      return -1;
 	    }
 
 	  double val_tmp;
 	  if (tmp.is_defined ())
@@ -556,17 +560,18 @@ int
 subplot_style::print (ostrstream& plot_buf)
 {
   if (! sp_style.empty ())
     {
       plot_buf << " " << GPLOT_CMD_WITH << " " << sp_style;
 
       if (sp_linetype)
 	{
-	  octave_value tmp = sp_linetype->eval ();
+	  octave_value tmp = sp_linetype->rvalue ();
+
 	  if (! error_state && tmp.is_defined ())
 	    {
 	      double val = tmp.double_value ();
 	      if (xisnan (val))
 		{
 		  ::error ("NaN is invalid a plotting line style");
 		  return -1;
 		}
@@ -577,17 +582,18 @@ subplot_style::print (ostrstream& plot_b
 	    {
 	      ::error ("evaluating plot style command");
 	      return -1;
 	    }
 	}
 
       if (sp_pointtype)
 	{
-	  octave_value tmp = sp_pointtype->eval ();
+	  octave_value tmp = sp_pointtype->rvalue ();
+
 	  if (! error_state && tmp.is_defined ())
 	    {
 	      double val = tmp.double_value ();
 	      if (xisnan (val))
 		{
 		  ::error ("NaN is invalid a plotting point style");
 		  return -1;
 		}
@@ -682,17 +688,17 @@ subplot::extract_plot_data (int ndim, oc
   return retval;
 }
 
 int
 subplot::handle_plot_data (int ndim, ostrstream& plot_buf)
 {
   if (sp_plot_data)
     {
-      octave_value data = sp_plot_data->eval ();
+      octave_value data = sp_plot_data->rvalue ();
 
       if (! error_state && data.is_defined ())
 	{
 	  string file;
 
 	  if (data.is_string ())
 	    {
 	      // Should really try to look at data file to determine
@@ -774,17 +780,18 @@ subplot::print (int ndim, ostrstream& pl
 {
   int status = handle_plot_data (ndim, plot_buf);
 
   if (status < 0)
     return -1;
 
   if (sp_title_clause)
     {
-      octave_value tmp = sp_title_clause->eval ();
+      octave_value tmp = sp_title_clause->rvalue ();
+
       if (! error_state && tmp.is_string ())
 	plot_buf << " " << GPLOT_CMD_TITLE << " "
 	  << '"' << tmp.string_value () << '"';
       else
 	{
 	  warning ("line title must be a string");
 	  plot_buf << " " << GPLOT_CMD_TITLE << " "
 	    << '"' << "line " << plot_line_count << '"';
