# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498535683 14400
#      Mon Jun 26 23:54:43 2017 -0400
# Node ID 4c597585ff522f72210f12cba52c69e71132a224
# Parent  c495549e9a948a4ef72b7f0aed29acb5e1e54c84
move Vmax_recursion_depth and Vsilent_functions to tree_evaluator class

* pt-eval.h, pt-eval.cc (tree_evaluator::m_max_recursion_depth,
tree_evaluator::m_silent_functions): New variables.
(tree_evaluator::max_recursion_depth,
tree_evaluator::silent_functions): New functions.
(Vmax_recursion_depth, Vsilent_functions): Delete.
(Fsilent_functions): Access silent_functions through tree_evaluator.
(Fmax_recursion_depth): Likewise, for max_recursion_depth.
(tree_evaluator::statement_printing_enabled): No longer static.
Change all uses.
* ov-usr-fcn.cc (octave_user_script::call,
octave_user_function::call): Access max_recursion_depth through
tree_evaluator.
* oct-parse.in.yy (source_file): Likewise.

diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -123,17 +123,17 @@ octave_user_script::call (octave::tree_e
   if (args.length () != 0 || nargout != 0)
     error ("invalid call to script %s", file_name.c_str ());
 
   if (cmd_list)
     {
       frame.protect_var (call_depth);
       call_depth++;
 
-      if (call_depth >= Vmax_recursion_depth)
+      if (call_depth >= tw.max_recursion_depth ())
         error ("max_recursion_depth exceeded");
 
       octave::call_stack& cs
         = octave::__get_call_stack__ ("octave_user_script::call");
 
       cs.push (this);
 
       frame.add_method (cs, &octave::call_stack::pop);
@@ -451,17 +451,17 @@ octave_user_function::call (octave::tree
     return retval;
 #endif
 
   octave::unwind_protect frame;
 
   frame.protect_var (call_depth);
   call_depth++;
 
-  if (call_depth >= Vmax_recursion_depth)
+  if (call_depth >= tw.max_recursion_depth ())
     error ("max_recursion_depth exceeded");
 
   // Save old and set current symbol table context, for
   // eval_undefined_error().
 
   octave::call_stack& cs
     = octave::__get_call_stack__ ("octave_user_function::call");
 
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4859,17 +4859,19 @@ namespace octave
 
     if (source_call_depth.find (file_full_name) == source_call_depth.end ())
       source_call_depth[file_full_name] = -1;
 
     frame.protect_var (source_call_depth[file_full_name]);
 
     source_call_depth[file_full_name]++;
 
-    if (source_call_depth[file_full_name] >= Vmax_recursion_depth)
+    tree_evaluator& tw = __get_evaluator__ ("source_file");
+
+    if (source_call_depth[file_full_name] >= tw.max_recursion_depth ())
       error ("max_recursion_depth exceeded");
 
     if (! context.empty ())
       {
         call_stack& cs = __get_call_stack__ ("source_file");
 
         if (context == "caller")
           cs.goto_caller_frame ();
@@ -4941,18 +4943,16 @@ namespace octave
       error ("source: %s is not a script", full_name.c_str ());
 
     if (verbose)
       {
         std::cout << "executing commands from " << full_name << " ... ";
         std::cout.flush ();
       }
 
-    tree_evaluator& tw = __get_evaluator__ ("source");
-
     octave_user_script *script = ov_code.user_script_value ();
 
     script->call (tw, 0);
 
     if (verbose)
       std::cout << "done." << std::endl;
   }
 }
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -49,24 +49,16 @@ along with Octave; see the file COPYING.
 #include "pt-tm-const.h"
 #include "symtab.h"
 #include "unwind-prot.h"
 #include "variables.h"
 
 //FIXME: This should be part of tree_evaluator
 #include "pt-jit.h"
 
-// Maximum nesting level for functions, scripts, or sourced files called
-// recursively.
-int Vmax_recursion_depth = 256;
-
-// If TRUE, turn off printing of results in functions (as if a
-// semicolon has been appended to each statement).
-static bool Vsilent_functions = false;
-
 namespace octave
 {
   int tree_evaluator::dbstep_flag = 0;
 
   size_t tree_evaluator::current_frame = 0;
 
   bool tree_evaluator::debug_mode = false;
 
@@ -404,31 +396,31 @@ namespace octave
   {
     if (debug_mode)
       do_breakpoint (cmd.is_breakpoint (true));
 
     if (in_loop_command)
       tree_continue_command::continuing = 1;
   }
 
+  bool
+  tree_evaluator::statement_printing_enabled (void)
+  {
+    return ! (m_silent_functions && (statement_context == function
+                                     || statement_context == script));
+  }
+
   void
   tree_evaluator::reset_debug_state (void)
   {
     debug_mode = bp_table::have_breakpoints () || Vdebugging;
 
     dbstep_flag = 0;
   }
 
-  bool
-  tree_evaluator::statement_printing_enabled (void)
-  {
-    return ! (Vsilent_functions && (statement_context == function
-                                    || statement_context == script));
-  }
-
   Matrix
   tree_evaluator::ignored_fcn_outputs (void) const
   {
     Matrix retval;
 
     if (m_lvalue_list_stack.empty ())
       return retval;
 
@@ -1012,17 +1004,17 @@ namespace octave
         if (fcn && ! (expr.is_postfix_indexed ()
                       && fcn->accepts_postfix_index (expr.postfix_index ())))
           {
             retval = fcn->call (*this, nargout);
           }
         else
           {
             if (expr.print_result () && nargout == 0
-                && tree_evaluator::statement_printing_enabled ())
+                && statement_printing_enabled ())
               {
                 octave_value_list args = ovl (val);
                 args.stash_name_tags (string_vector (expr.name ()));
                 feval ("display", args);
               }
 
             retval = val;
           }
@@ -1798,18 +1790,17 @@ namespace octave
                     if (! ult.is_black_hole ())
                       error ("element number %d undefined in return list", k+1);
 
                     k++;
                     continue;
                   }
               }
 
-            if (expr.print_result ()
-                && tree_evaluator::statement_printing_enabled ())
+            if (expr.print_result () && statement_printing_enabled ())
               {
                 // We clear any index here so that we can get
                 // the new value of the referenced object below,
                 // instead of the indexed value (which should be
                 // the same as the right hand side value).
 
                 ult.clear_index ();
 
@@ -2049,18 +2040,17 @@ namespace octave
 
             ult.assign (etype, rhs_val);
 
             if (etype == octave_value::op_asn_eq)
               val = rhs_val;
             else
               val = ult.value ();
 
-            if (expr.print_result ()
-                && tree_evaluator::statement_printing_enabled ())
+            if (expr.print_result () && statement_printing_enabled ())
               {
                 // We clear any index here so that we can
                 // get the new value of the referenced
                 // object below, instead of the indexed
                 // value (which should be the same as the
                 // right hand side value).
 
                 ult.clear_index ();
@@ -2716,67 +2706,86 @@ namespace octave
   {
     std::list<octave_lvalue> retval;
 
     for (tree_expression *elt : *lhs)
       retval.push_back (elt->lvalue (this));
 
     return retval;
   }
+
+  octave_value
+  tree_evaluator::max_recursion_depth (const octave_value_list& args,
+                                       int nargout)
+  {
+    return set_internal_variable (m_max_recursion_depth, args, nargout,
+                                  "max_recursion_depth", 0);
+  }
+
+  octave_value
+  tree_evaluator::silent_functions (const octave_value_list& args, int nargout)
+  {
+    return set_internal_variable (m_silent_functions, args, nargout,
+                                  "silent_functions");
+  }
 }
 
-DEFUN (max_recursion_depth, args, nargout,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (max_recursion_depth, interp, args, nargout,
+           doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{val} =} max_recursion_depth ()
 @deftypefnx {} {@var{old_val} =} max_recursion_depth (@var{new_val})
 @deftypefnx {} {} max_recursion_depth (@var{new_val}, "local")
 Query or set the internal limit on the number of times a function may
 be called recursively.
 
 If the limit is exceeded, an error message is printed and control returns to
 the top level.
 
 When called from inside a function with the @qcode{"local"} option, the
 variable is changed locally for the function and any subroutines it calls.
 The original variable value is restored when exiting the function.
 @end deftypefn */)
 {
-  return SET_INTERNAL_VARIABLE (max_recursion_depth);
+  octave::tree_evaluator& tw = interp.get_evaluator ();
+
+  return tw.max_recursion_depth (args, nargout);
 }
 
 /*
 %!test
 %! orig_val = max_recursion_depth ();
 %! old_val = max_recursion_depth (2*orig_val);
 %! assert (orig_val, old_val);
 %! assert (max_recursion_depth (), 2*orig_val);
 %! max_recursion_depth (orig_val);
 %! assert (max_recursion_depth (), orig_val);
 
 %!error (max_recursion_depth (1, 2))
 */
 
-DEFUN (silent_functions, args, nargout,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (silent_functions, interp, args, nargout,
+           doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{val} =} silent_functions ()
 @deftypefnx {} {@var{old_val} =} silent_functions (@var{new_val})
 @deftypefnx {} {} silent_functions (@var{new_val}, "local")
 Query or set the internal variable that controls whether internal
 output from a function is suppressed.
 
 If this option is disabled, Octave will display the results produced by
 evaluating expressions within a function body that are not terminated with
 a semicolon.
 
 When called from inside a function with the @qcode{"local"} option, the
 variable is changed locally for the function and any subroutines it calls.
 The original variable value is restored when exiting the function.
 @end deftypefn */)
 {
-  return SET_INTERNAL_VARIABLE (silent_functions);
+  octave::tree_evaluator& tw = interp.get_evaluator ();
+
+  return tw.silent_functions (args, nargout);
 }
 
 /*
 %!test
 %! orig_val = silent_functions ();
 %! old_val = silent_functions (! orig_val);
 %! assert (orig_val, old_val);
 %! assert (silent_functions (), ! orig_val);
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -99,18 +99,19 @@ namespace octave
     private:
 
       std::stack<T> m_stack;
     };
 
     typedef void (*decl_elt_init_fcn) (tree_decl_elt&);
 
     tree_evaluator (interpreter& interp)
-      : m_value_stack (), m_lvalue_list_stack (), m_nargout_stack (),
-        m_call_stack (interp), m_interpreter (interp)
+      : m_interpreter (interp), m_value_stack (), m_lvalue_list_stack (),
+        m_nargout_stack (), m_call_stack (interp),
+        m_max_recursion_depth (256), m_silent_functions (false)
     { }
 
     // No copying!
 
     tree_evaluator (const tree_evaluator&) = delete;
 
     tree_evaluator& operator = (const tree_evaluator&) = delete;
 
@@ -206,19 +207,19 @@ namespace octave
 
     void visit_unwind_protect_command (tree_unwind_protect_command&);
 
     void visit_while_command (tree_while_command&);
     void visit_do_until_command (tree_do_until_command&);
 
     void bind_ans (const octave_value& val, bool print);
 
-    static void reset_debug_state (void);
+    bool statement_printing_enabled (void);
 
-    static bool statement_printing_enabled (void);
+    static void reset_debug_state (void);
 
     // If > 0, stop executing at the (N-1)th stopping point, counting
     //         from the the current execution point in the current frame.
     //
     // If < 0, stop executing at the next possible stopping point.
     static int dbstep_flag;
 
     // The number of the stack frame we are currently debugging.
@@ -291,16 +292,40 @@ namespace octave
 
     bool eval_decl_elt (tree_decl_elt *elt);
 
     bool switch_case_label_matches (tree_switch_case *expr,
                                     const octave_value& val);
 
     call_stack& get_call_stack (void) { return m_call_stack; }
 
+    int max_recursion_depth (void) const { return m_max_recursion_depth; }
+
+    int max_recursion_depth (int n)
+    {
+      int val = m_max_recursion_depth;
+      m_max_recursion_depth = n;
+      return val;
+    }
+
+    octave_value
+    max_recursion_depth (const octave_value_list& args, int nargout);
+
+    bool silent_functions (void) const { return m_silent_functions; }
+
+    bool silent_functions (bool b)
+    {
+      int val = m_silent_functions;
+      m_silent_functions = b;
+      return val;
+    }
+
+    octave_value
+    silent_functions (const octave_value_list& args, int nargout);
+
   private:
 
     void do_breakpoint (tree_statement& stmt) const;
 
     void do_breakpoint (bool is_breakpoint,
                         bool is_end_of_fcn_or_script = false) const;
 
     virtual octave_value
@@ -310,32 +335,36 @@ namespace octave
 
     octave_value_list
     make_value_list (tree_argument_list *args,
                      const string_vector& arg_nm,
                      const octave_value *object, bool rvalue = true);
 
     std::list<octave_lvalue> make_lvalue_list (tree_argument_list *);
 
+    interpreter& m_interpreter;
+
     value_stack<octave_value_list> m_value_stack;
 
     value_stack<const std::list<octave_lvalue>*> m_lvalue_list_stack;
 
     value_stack<int> m_nargout_stack;
 
     call_stack m_call_stack;
 
-    interpreter& m_interpreter;
+    // Maximum nesting level for functions, scripts, or sourced files
+    // called recursively.
+    int m_max_recursion_depth;
+
+    // If TRUE, turn off printing of results in functions (as if a
+    // semicolon has been appended to each statement).
+    bool m_silent_functions;
   };
 }
 
-// Maximum nesting level for functions, scripts, or sourced files called
-// recursively.
-extern int Vmax_recursion_depth;
-
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
 OCTAVE_DEPRECATED (4.4, "use 'octave::tree_evaluator' instead")
 typedef octave::tree_evaluator tree_evaluator;
 
 #endif
 
 #endif
