# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1499286459 14400
#      Wed Jul 05 16:27:39 2017 -0400
# Branch stable
# Node ID 0056bcaeb01ceeb0e8c56d6c137fc68ad6bffc9c
# Parent  22ff14feb26eb23eeeca55545a385319102d5599
make strncmp case sensitive again (bug #51384)

* oct-string.cc (octave::string::strncmp): Use str_data_cmp, not
str_data_cmpi.  From Thierry Rascle <thierr26@free.fr>.
* strfns.cc: New tests.

diff --git a/libinterp/corefcn/strfns.cc b/libinterp/corefcn/strfns.cc
--- a/libinterp/corefcn/strfns.cc
+++ b/libinterp/corefcn/strfns.cc
@@ -593,16 +593,17 @@ This is just the opposite of the corresp
 %!assert (strcmp ({y; y}, {""}), [true; true])
 %!assert (strcmp ("", {y; y}), [true; true])
 %!assert (strcmp ({""}, {y; y}), [true; true])
 %!assert (strcmp ({"foo"}, y), [false; false])
 %!assert (strcmp ({"foo"}, y), [false; false])
 %!assert (strcmp (y, {"foo"}), [false; false])
 %!assert (strcmp (y, {"foo"}), [false; false])
 %!assert (strcmp ("foobar", "foobar"), true)
+%!assert (strcmp ("foobar", "fooBar"), false)
 %!assert (strcmp ("fooba", "foobar"), false)
 
 %!error strcmp ()
 %!error strcmp ("foo", "bar", 3)
 */
 
 DEFUN (strncmp, args, ,
        doc: /* -*- texinfo -*-
@@ -646,16 +647,17 @@ This is just the opposite of the corresp
                                octave::string::strncmp,
                                octave::string::strncmp));
   else
     error ("strncmp: N must be greater than 0");
 }
 
 /*
 %!assert (strncmp ("abce", "abc", 3), true)
+%!assert (strncmp ("abce", "aBc", 3), false)
 %!assert (strncmp (100, 100, 1), false)
 %!assert (strncmp ("abce", {"abcd", "bca", "abc"}, 3), logical ([1, 0, 1]))
 %!assert (strncmp ("abc",  {"abcd", "bca", "abc"}, 4), logical ([0, 0, 0]))
 %!assert (strncmp ({"abcd", "bca", "abc"},"abce", 3), logical ([1, 0, 1]))
 %!assert (strncmp ({"abcd", "bca", "abc"},{"abcd", "bca", "abe"}, 3), logical ([1, 1, 0]))
 %!assert (strncmp ("abc", {"abcd", 10}, 2), logical ([1, 0]))
 
 %!error strncmp ()
diff --git a/liboctave/util/oct-string.cc b/liboctave/util/oct-string.cc
--- a/liboctave/util/oct-string.cc
+++ b/liboctave/util/oct-string.cc
@@ -142,26 +142,26 @@ octave::string::strcmpi (const T& str_a,
 
 
 template<typename T>
 bool
 octave::string::strncmp (const T& str_a, const T& str_b,
                          const typename T::size_type n)
 {
   return (numel (str_a) >= n && numel (str_b) >= n
-          && str_data_cmpi<T> (str_a.data (), str_b.data (), n));
+          && str_data_cmp<T> (str_a.data (), str_b.data (), n));
 }
 
 template<typename T>
 bool
 octave::string::strncmp (const T& str_a, const typename T::value_type* str_b,
                          const typename T::size_type n)
 {
   return (numel (str_a) >= n && strlen<T> (str_b) >= n
-          && str_data_cmpi<T> (str_a.data (), str_b, n));
+          && str_data_cmp<T> (str_a.data (), str_b, n));
 }
 
 
 template<typename T>
 bool
 octave::string::strncmpi (const T& str_a, const T& str_b,
                           const typename T::size_type n)
 {
