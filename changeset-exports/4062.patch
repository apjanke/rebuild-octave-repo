# HG changeset patch
# User jwe
# Date 1032795485 0
#      Mon Sep 23 15:38:05 2002 +0000
# Node ID 86e4baa8141088aa4f41e89b085eeaa1eeb58b1e
# Parent  6e86256e9c54d3efea9382a690019518f3987c39
[project @ 2002-09-23 15:38:05 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2002-09-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in: Fix typedefs used in AH_BOTTOM.
+
 2002-09-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in (AH_BOTTOM): If using g++, define
 	USE_PRAGMA_INTERFACE_IMPLEMENTATION.
 
 2002-08-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Check for sstream.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.365 $)
+AC_REVISION($Revision: 1.366 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -1241,29 +1241,29 @@ AH_BOTTOM([
 #endif
 
 #if defined(HAVE_F2C) && !defined(F77_FUNC)
 #  define F77_FUNC(x,X) x ## _
 #  define F77_FUNC_(x,X) x ## __
 #endif
 
 #if !defined(HAVE_DEV_T)
-typedef dev_t short
+typedef short dev_t
 #endif
 
 #if !defined(HAVE_INO_T)
-typedef ino_t unsigned long
+typedef unsigned long ino_t
 #endif
 
 #if !defined(HAVE_NLINK_T)
-typedef nlink_t short
+typedef short nlink_t
 #endif
 
 #if !defined(HAVE_SIGSET_T)
-typedef sigset_t int
+typedef int sigset_t
 #endif
 ])
 
 ### Do the substitutions in all the Makefiles.
 
 AC_CONFIG_FILES([Makefile octMakefile Makeconf install-octave \
   test/Makefile dlfcn/Makefile \
   doc/Makefile doc/faq/Makefile doc/interpreter/Makefile \
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,22 @@
+2002-09-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* cmd-edit.cc (do_decode_prompt_string): Cope with possibility
+	that geteuid doesn't exist.
+
+	* LP.h: Rename LP class to octave_LP.
+	LPsolve.h: Change all uses.
+
+	* file-ops.cc, oct-passwd.cc oct-syscalls.cc oct-group.cc: Remove
+	incorrect token-pasting op.
+
+	* statdefs.h [! S_ISLNK]: undef HAVE_LSTAT instead of trying to
+	define lstat.
+
 2002-09-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array.cc, Array.h, Array2.cc, Array2.h, Array3.cc, Array3.h,
 	ArrayN.cc, ArrayN.h, Bounds.cc, Bounds.h, CColVector.cc,
 	CColVector.h, CDiagMatrix.cc, CDiagMatrix.h, CMatrix.cc,
 	CMatrix.h, CRowVector.cc, CRowVector.h, CmplxAEPBAL.cc,
 	CmplxAEPBAL.h, CmplxCHOL.cc, CmplxCHOL.h, CmplxDET.cc, CmplxDET.h,
 	CmplxHESS.cc, CmplxHESS.h, CmplxLU.cc, CmplxLU.h, CmplxQR.cc,
diff --git a/liboctave/LP.h b/liboctave/LP.h
--- a/liboctave/LP.h
+++ b/liboctave/LP.h
@@ -24,52 +24,52 @@ Software Foundation, 59 Temple Place - S
 #define octave_LP_h 1
 
 #include "dColVector.h"
 #include "Bounds.h"
 #include "LinConst.h"
 #include "base-min.h"
 
 class
-LP : public base_minimizer
+octave_LP : public base_minimizer
 {
 public:
 
-  LP (void)
+  octave_LP (void)
     : base_minimizer (), c (), bnds (), lc () { }
 
-  LP (const ColumnVector& c_arg)
+  octave_LP (const ColumnVector& c_arg)
     : base_minimizer (), c (c_arg), bnds (), lc () { }
 
-  LP (const ColumnVector& c_arg, const Bounds& b)
+  octave_LP (const ColumnVector& c_arg, const Bounds& b)
     : base_minimizer (), c (c_arg), bnds (b), lc () { }
 
-  LP (const ColumnVector& c_arg, const Bounds& b, const LinConst& l)
+  octave_LP (const ColumnVector& c_arg, const Bounds& b, const LinConst& l)
     : base_minimizer (), c (c_arg), bnds (b), lc (l) { }
 
-  LP (const ColumnVector& c_arg, const LinConst& l)
+  octave_LP (const ColumnVector& c_arg, const LinConst& l)
     : base_minimizer (), c (c_arg), bnds (), lc (l) { }
 
-  LP (const LP& a)
+  octave_LP (const octave_LP& a)
     : base_minimizer (a), c (a.c), bnds (a.bnds), lc (a.lc) { }
 
-  LP& operator = (const LP& a)
+  octave_LP& operator = (const octave_LP& a)
     {
       if (this != &a)
 	{
 	  base_minimizer::operator = (a);
 
 	  c = a.c;
 	  bnds = a.bnds;
 	  lc = a.lc;
 	}
       return *this;
     }
 
-  ~LP (void) { }
+  ~octave_LP (void) { }
 
   ColumnVector linear_obj_coeff (void) const { return c; }
 
   Bounds bounds (void) const { return bnds; }
 
   LinConst linear_constraints (void) const { return lc; }
 
 protected:
diff --git a/liboctave/LPsolve.h b/liboctave/LPsolve.h
--- a/liboctave/LPsolve.h
+++ b/liboctave/LPsolve.h
@@ -27,42 +27,42 @@ Software Foundation, 59 Temple Place - S
 #pragma interface
 #endif
 
 class ColumnVector;
 
 #include "LP.h"
 
 class
-LPsolve : public LP
+LPsolve : public octave_LP
 {
 public:
 
   LPsolve (void)
-    : LP () { }
+    : octave_LP () { }
 
   LPsolve (const ColumnVector& c)
-    : LP (c) { }
+    : octave_LP (c) { }
 
   LPsolve (const ColumnVector& c, const Bounds& b)
-    : LP (c, b) { }
+    : octave_LP (c, b) { }
 
   LPsolve (const ColumnVector& c, const Bounds& b, const LinConst& lc)
-    : LP (c, b, lc) { }
+    : octave_LP (c, b, lc) { }
 
   LPsolve (const ColumnVector& c, const LinConst& lc)
-    : LP (c, lc) { }
+    : octave_LP (c, lc) { }
 
   LPsolve (const LPsolve& a)
-    : LP (a) { }
+    : octave_LP (a) { }
 
   LPsolve& operator = (const LPsolve& a)
     {
       if (this != &a)
-	LP::operator = (a);
+	octave_LP::operator = (a);
 
       return *this;
     }
 
   ~LPsolve (void) { }
 
   ColumnVector do_minimize (double& objf, int& inform, ColumnVector& lambda);
 };
diff --git a/liboctave/cmd-edit.cc b/liboctave/cmd-edit.cc
--- a/liboctave/cmd-edit.cc
+++ b/liboctave/cmd-edit.cc
@@ -923,17 +923,21 @@ command_editor::do_decode_prompt_string 
 		  strcpy (number_buffer, "!");
 		temp = number_buffer;
 
 		goto add_string;
 	      }
 
 	    case '$':
 	      {
+#if defined (HAVE_GETEUID)
 		temp = (::geteuid () == 0 ? "#" : "$");
+#else
+		temp = "$";
+#endif
 
 		goto add_string;
 	      }
 
 #if defined (USE_READLINE)
 	    case '[':
 	    case ']':
 	      {
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -42,17 +42,17 @@ Software Foundation, 59 Temple Place - S
 #include "file-ops.h"
 #include "oct-env.h"
 #include "oct-passwd.h"
 #include "pathlen.h"
 #include "statdefs.h"
 #include "str-vec.h"
 
 #define NOT_SUPPORTED(nm) \
-  nm ## ": not supported on this system"
+  nm ": not supported on this system"
 
 // We provide a replacement for mkdir().
 
 int
 file_ops::mkdir (const std::string& name, mode_t mode)
 {
   std::string msg;
   return mkdir (name, mode, msg);
diff --git a/liboctave/lo-specfun.cc b/liboctave/lo-specfun.cc
--- a/liboctave/lo-specfun.cc
+++ b/liboctave/lo-specfun.cc
@@ -33,56 +33,56 @@ Software Foundation, 59 Temple Place - S
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-specfun.h"
 #include "mx-inlines.cc"
 
 extern "C"
 {
   int F77_FUNC (zbesj, ZBESJ) (const double&, const double&,
-			      const double&, const int&, const int&,
-			      double*, double*, int&, int&);
+			       const double&, const int&, const int&,
+			       double*, double*, int&, int&);
 
   int F77_FUNC (zbesy, ZBESY) (const double&, const double&,
-			      const double&, const int&, const int&,
-			      double*, double*, int&,
-			      double*, double*, int&);
+			       const double&, const int&, const int&,
+			       double*, double*, int&,
+			       double*, double*, int&);
 
   int F77_FUNC (zbesi, ZBESI) (const double&, const double&,
-			      const double&, const int&, const int&,
-			      double*, double*, int&, int&);
+			       const double&, const int&, const int&,
+			       double*, double*, int&, int&);
 
   int F77_FUNC (zbesk, ZBESK) (const double&, const double&,
-			      const double&, const int&, const int&,
-			      double*, double*, int&, int&);
+			       const double&, const int&, const int&,
+			       double*, double*, int&, int&);
 
   int F77_FUNC (zbesh, ZBESH) (const double&, const double&,
-			      const double&, const int&, const int&,
-			      const int&, double*, double*, int&, int&);
+			       const double&, const int&, const int&,
+			       const int&, double*, double*, int&, int&);
 
   int F77_FUNC (zairy, ZAIRY) (const double&, const double&,
-			      const int&, const int&,
-			      double&, double&, int&, int&);
+			       const int&, const int&,
+			       double&, double&, int&, int&);
 
   int F77_FUNC (zbiry, ZBIRY) (const double&, const double&,
-			      const int&, const int&,
-			      double&, double&, int&);
+			       const int&, const int&,
+			       double&, double&, int&);
 
   int F77_FUNC (xdacosh, XDACOSH) (const double&, double&);
 
   int F77_FUNC (xdasinh, XDASINH) (const double&, double&);
 
   int F77_FUNC (xdatanh, XDATANH) (const double&, double&);
 
   int F77_FUNC (xderf, XDERF) (const double&, double&);
 
   int F77_FUNC (xderfc, XDERFC) (const double&, double&);
 
   int F77_FUNC (xdbetai, XDBETAI) (const double&, const double&,
-				  const double&, double&);
+				   const double&, double&);
 
   int F77_FUNC (xdgamma, XDGAMMA) (const double&, double&);
 
   int F77_FUNC (xgammainc, XGAMMAINC) (const double&, const double&, double&);
 
   int F77_FUNC (dlgams, DLGAMS) (const double&, double&, double&);
 }
 
diff --git a/liboctave/oct-group.cc b/liboctave/oct-group.cc
--- a/liboctave/oct-group.cc
+++ b/liboctave/oct-group.cc
@@ -32,17 +32,17 @@ Software Foundation, 59 Temple Place - S
 #include <grp.h>
 #endif
 
 #include "lo-error.h"
 #include "oct-group.h"
 #include "str-vec.h"
 
 #define NOT_SUPPORTED(nm) \
-  nm ## ": not supported on this system"
+  nm ": not supported on this system"
 
 std::string
 octave_group::name (void) const
 {
   if (! ok ())
     gripe_invalid ();
 
   return gr_name;
diff --git a/liboctave/oct-passwd.cc b/liboctave/oct-passwd.cc
--- a/liboctave/oct-passwd.cc
+++ b/liboctave/oct-passwd.cc
@@ -31,17 +31,17 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_PWD_H
 #include <pwd.h>
 #endif
 
 #include "lo-error.h"
 #include "oct-passwd.h"
 
 #define NOT_SUPPORTED(nm) \
-  nm ## ": not supported on this system"
+  nm ": not supported on this system"
 
 std::string
 octave_passwd::name (void) const
 {
   if (! ok ())
     gripe_invalid ();
 
   return pw_name;
diff --git a/liboctave/oct-syscalls.cc b/liboctave/oct-syscalls.cc
--- a/liboctave/oct-syscalls.cc
+++ b/liboctave/oct-syscalls.cc
@@ -40,17 +40,17 @@ Software Foundation, 59 Temple Place - S
 #include <fcntl.h>
 #endif
 
 #include "oct-syscalls.h"
 #include "str-vec.h"
 #include "syswait.h"
 
 #define NOT_SUPPORTED(nm) \
-  nm ## ": not supported on this system"
+  nm ": not supported on this system"
 
 int
 octave_syscalls::dup2 (int old_fd, int new_fd)
 {
   std::string msg;
   return dup2 (old_fd, new_fd, msg);
 }
 
diff --git a/liboctave/statdefs.h b/liboctave/statdefs.h
--- a/liboctave/statdefs.h
+++ b/liboctave/statdefs.h
@@ -61,17 +61,17 @@ Software Foundation, 59 Temple Place - S
 #define S_ISMPB(m) (((m) & S_IFMT) == S_IFMPB)
 #define S_ISMPC(m) (((m) & S_IFMT) == S_IFMPC)
 #endif
 #if !defined(S_ISNWK) && defined(S_IFNWK) /* HP/UX */
 #define S_ISNWK(m) (((m) & S_IFMT) == S_IFNWK)
 #endif
 
 #ifndef S_ISLNK
-#define lstat stat
+#undef HAVE_LSTAT
 #endif
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C ***
 ;;; End: ***
