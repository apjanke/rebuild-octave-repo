# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1340306941 -7200
#      Thu Jun 21 21:29:01 2012 +0200
# Branch gui
# Node ID e3ae0850b10512893088da512d2cb9e9ebc96d9c
# Parent  85daba52b2d4966ea6547bb9c93050b0c1b947b0
Fixed integrating debug menu in the editor window.

* file-editor-interface.h: Removed methods for enabling/disabling debug mode.
* file-editor-tab.cc: Renamed variable to meet coding style standards.
* file-editor: Added get for the editors debug menu.
* main-window: Added the same actions in the main windows as well the editors debug menu.

diff --git a/gui/src/m-editor/file-editor-interface.h b/gui/src/m-editor/file-editor-interface.h
--- a/gui/src/m-editor/file-editor-interface.h
+++ b/gui/src/m-editor/file-editor-interface.h
@@ -14,16 +14,17 @@
  * You should have received a copy of the GNU General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef FILEEDITORINTERFACE_H
 #define FILEEDITORINTERFACE_H
 
 #include <QDockWidget>
+#include <QMenu>
 
 class QTerminal;
 class main_window;
 
 class file_editor_interface : public QDockWidget
 {
   Q_OBJECT
 
@@ -34,24 +35,24 @@ class file_editor_interface : public QDo
       setObjectName ("FileEditor");
       _terminal = terminal;
       _main_window = mainWindow;
 
       connect (this, SIGNAL (visibilityChanged (bool)), this, SLOT (handle_visibility_changed (bool)));
     }
 
     virtual ~file_editor_interface () { }
+
+    virtual QMenu *debug_menu () = 0;
+
   public slots:
     virtual void request_new_file () = 0;
     virtual void request_open_file () = 0;
     virtual void request_open_file (QString fileName) = 0;
 
-    virtual void handle_entered_debug_mode () = 0;
-    virtual void handle_quit_debug_mode () = 0;
-
   signals:
       void active_changed (bool active);
 
   protected:
     QTerminal* _terminal;
     main_window* _main_window;
 
     void closeEvent (QCloseEvent *event)
diff --git a/gui/src/m-editor/file-editor-tab.cc b/gui/src/m-editor/file-editor-tab.cc
--- a/gui/src/m-editor/file-editor-tab.cc
+++ b/gui/src/m-editor/file-editor-tab.cc
@@ -93,17 +93,17 @@ bool
 file_editor_tab::copy_available ()
 {
   return _copy_available;
 }
 
 void
 file_editor_tab::closeEvent (QCloseEvent *event)
 {
-  if (_file_editor->mainWindow ()->is_closing ())
+  if (_file_editor->get_main_window ()->is_closing ())
     {
       // close whole application: save file or not if modified
       check_file_modified ("Closing Octave", 0); // no cancel possible
       event->accept ();
     }
   else
     {
       // ignore close event if file is not saved and user cancels closing this window
diff --git a/gui/src/m-editor/file-editor.cc b/gui/src/m-editor/file-editor.cc
--- a/gui/src/m-editor/file-editor.cc
+++ b/gui/src/m-editor/file-editor.cc
@@ -20,23 +20,23 @@
 #include <QApplication>
 #include <QFile>
 #include <QFont>
 #include <QFileDialog>
 #include <QMessageBox>
 #include <QStyle>
 #include <QTextStream>
 
-file_editor::file_editor (QTerminal *terminal, main_window *mainWindow)
-  : file_editor_interface(terminal, mainWindow)
+file_editor::file_editor (QTerminal *terminal, main_window *m)
+  : file_editor_interface(terminal, m)
 {
   construct ();
 
   _terminal = terminal;
-  _main_window = mainWindow;
+  _main_window = m;
   setVisible (false);
 }
 
 file_editor::~file_editor ()
 {
 }
 
 lexer_octave_gui *
@@ -47,21 +47,27 @@ file_editor::lexer ()
 
 QTerminal *
 file_editor::terminal ()
 {
   return _terminal;
 }
 
 main_window *
-file_editor::mainWindow ()
+file_editor::get_main_window ()
 {
   return _main_window;
 }
 
+QMenu *
+file_editor::debug_menu ()
+{
+  return _debug_menu;
+}
+
 void
 file_editor::request_new_file ()
 {
   file_editor_tab *fileEditorTab = new file_editor_tab (this);
   if (fileEditorTab)
     {
       add_file_editor_tab (fileEditorTab);
       fileEditorTab->new_file ();
@@ -95,28 +101,16 @@ file_editor::request_open_file (QString 
   if (fileEditorTab)
     {
       add_file_editor_tab (fileEditorTab);
       fileEditorTab->load_file (fileName);
     }
 }
 
 void
-file_editor::handle_entered_debug_mode ()
-{
-
-}
-
-void
-file_editor::handle_quit_debug_mode ()
-{
-
-}
-
-void
 file_editor::request_undo ()
 {
   file_editor_tab *activeFileEditorTab = active_editor_tab ();
   if (activeFileEditorTab)
     activeFileEditorTab->undo ();
 }
 
 void
@@ -348,17 +342,17 @@ file_editor::construct ()
   redo_action->setShortcut                      (QKeySequence::Redo);
   redo_action->setShortcutContext               (Qt::WindowShortcut);
   _copy_action->setShortcut                     (QKeySequence::Copy);
   _copy_action->setShortcutContext              (Qt::WindowShortcut);
   _cut_action->setShortcut                      (QKeySequence::Cut);
   _cut_action->setShortcutContext               (Qt::WindowShortcut);
   paste_action->setShortcut                     (QKeySequence::Paste);
   paste_action->setShortcutContext              (Qt::WindowShortcut);
-  run_action->setShortcut                       (Qt::SHIFT + Qt::Key_F5);
+  run_action->setShortcut                       (Qt::SHIFT + Qt::Key_R);
   run_action->setShortcutContext                (Qt::WindowShortcut);
   next_bookmark_action->setShortcut             (Qt::Key_F2);
   next_bookmark_action->setShortcutContext      (Qt::WindowShortcut);
   previous_bookmark_action->setShortcut         (Qt::SHIFT + Qt::Key_F2);
   previous_bookmark_action->setShortcutContext  (Qt::WindowShortcut);
   toggle_bookmark_action->setShortcut           (Qt::Key_F7);
   toggle_bookmark_action->setShortcutContext    (Qt::WindowShortcut);
   comment_selection_action->setShortcut         (Qt::CTRL + Qt::Key_R);
@@ -402,27 +396,16 @@ file_editor::construct ()
   editMenu->addSeparator ();
   editMenu->addAction (toggle_bookmark_action);
   editMenu->addAction (next_bookmark_action);
   editMenu->addAction (previous_bookmark_action);
   editMenu->addAction (remove_bookmark_action);
   _menu_bar->addMenu (editMenu);
 
   _debug_menu = new QMenu (tr ("&Debug"), _menu_bar);
-  QAction * debug_continue = _debug_menu->addAction (tr ("Continue"));
-  debug_continue->setShortcut (Qt::Key_F5);
-  QAction * debug_step_into = _debug_menu->addAction (tr ("Step into"));
-  debug_step_into->setShortcut (Qt::Key_F9);
-  QAction * debug_step_over = _debug_menu->addAction (tr ("Next"));
-  debug_step_over->setShortcut (Qt::Key_F10);
-  QAction * debug_step_out = _debug_menu->addAction (tr ("Step out"));
-  debug_step_out->setShortcut (Qt::Key_F11);
-  _debug_menu->addSeparator ();
-  QAction * debug_quit = _debug_menu->addAction (tr ("Quit"));
-  debug_quit->setShortcut (Qt::Key_Escape);
   _menu_bar->addMenu (_debug_menu);
 
   QMenu *runMenu = new QMenu (tr ("&Run"), _menu_bar);
   runMenu->addAction (run_action);
   _menu_bar->addMenu (runMenu);
 
   QVBoxLayout *layout = new QVBoxLayout ();
   layout->addWidget (_menu_bar);
diff --git a/gui/src/m-editor/file-editor.h b/gui/src/m-editor/file-editor.h
--- a/gui/src/m-editor/file-editor.h
+++ b/gui/src/m-editor/file-editor.h
@@ -41,32 +41,31 @@ enum MARKER
     MARKER_BREAKPOINT
   };
 
 class file_editor : public file_editor_interface
 {
 Q_OBJECT
 
 public:
-  file_editor (QTerminal *terminal, main_window *mainWindow);
+  file_editor (QTerminal *terminal, main_window *m);
   ~file_editor ();
   void loadFile (QString fileName);
 
   lexer_octave_gui *lexer ();
   QTerminal *       terminal ();
-  main_window *     mainWindow ();
+  main_window *     get_main_window ();
+
+  QMenu *           debug_menu();
 
 public slots:
   void request_new_file ();
   void request_open_file ();
   void request_open_file (QString fileName);
 
-  void handle_entered_debug_mode ();
-  void handle_quit_debug_mode ();
-
   void request_undo ();
   void request_redo ();
   void request_copy ();
   void request_cut ();
   void request_paste ();
   void request_save_file ();
   void request_save_file_as ();
   void request_run_file ();
diff --git a/gui/src/main-window.cc b/gui/src/main-window.cc
--- a/gui/src/main-window.cc
+++ b/gui/src/main-window.cc
@@ -202,26 +202,32 @@ main_window::current_working_directory_u
       ->post_event (new octave_change_directory_event (*this, ".."));
 
 }
 
 void
 main_window::handle_entered_debug_mode ()
 {
   setWindowTitle ("Octave (Debugging)");
-  _file_editor->handle_entered_debug_mode ();
-  _debug_menu->setEnabled (true);
+  _debug_continue->setEnabled (true);
+  _debug_step_into->setEnabled (true);
+  _debug_step_over->setEnabled (true);
+  _debug_step_out->setEnabled (true);
+  _debug_quit->setEnabled (true);
 }
 
 void
 main_window::handle_quit_debug_mode ()
 {
   setWindowTitle ("Octave");
-  _file_editor->handle_quit_debug_mode ();
-  _debug_menu->setEnabled (false);
+  _debug_continue->setEnabled (false);
+  _debug_step_into->setEnabled (false);
+  _debug_step_over->setEnabled (false);
+  _debug_step_out->setEnabled (false);
+  _debug_quit->setEnabled (false);
 }
 
 void
 main_window::debug_continue ()
 {
   octave_link::instance ()
       ->post_event (new octave_debug_continue_event (*this));
 }
@@ -393,29 +399,43 @@ main_window::construct ()
       = edit_menu->addAction (QIcon(":/actions/icons/undo.png"), tr ("Undo"));
   undo_action->setShortcut (QKeySequence::Undo);
 
   QAction *redo_action
       = edit_menu->addAction (QIcon(":/actions/icons/redo.png"), tr ("Redo"));
   redo_action->setShortcut (QKeySequence::Redo);
 
   _debug_menu = menuBar ()->addMenu (tr ("De&bug"));
-  QAction * debug_continue = _debug_menu->addAction (tr ("Continue"));
-  debug_continue->setShortcut (Qt::Key_F5);
-  QAction * debug_step_into = _debug_menu->addAction (tr ("Step into"));
-  debug_step_into->setShortcut (Qt::Key_F9);
-  QAction * debug_step_over = _debug_menu->addAction (tr ("Next"));
-  debug_step_over->setShortcut (Qt::Key_F10);
-  QAction * debug_step_out = _debug_menu->addAction (tr ("Step out"));
-  debug_step_out->setShortcut (Qt::Key_F11);
+
+  _debug_continue = _debug_menu->addAction (tr ("Continue"));
+  _debug_continue->setEnabled (false);
+  _file_editor->debug_menu ()->addAction (_debug_continue);
+  _debug_continue->setShortcut (Qt::Key_F5);
+
+  _debug_step_into = _debug_menu->addAction (tr ("Step into"));
+  _debug_step_into->setEnabled (false);
+  _file_editor->debug_menu ()->addAction (_debug_step_into);
+  _debug_step_into->setShortcut (Qt::Key_F9);
+
+  _debug_step_over = _debug_menu->addAction (tr ("Next"));
+  _debug_step_over->setEnabled (false);
+  _file_editor->debug_menu ()->addAction (_debug_step_over);
+  _debug_step_over->setShortcut (Qt::Key_F10);
+
+  _debug_step_out = _debug_menu->addAction (tr ("Step out"));
+  _debug_step_out->setEnabled (false);
+  _file_editor->debug_menu ()->addAction (_debug_step_over);
+  _debug_step_out->setShortcut (Qt::Key_F11);
+
   _debug_menu->addSeparator ();
-  QAction * debug_quit = _debug_menu->addAction (tr ("Quit"));
-  debug_quit->setShortcut (Qt::Key_Escape);
-  _debug_menu->setEnabled (false);
 
+  _debug_quit = _debug_menu->addAction (tr ("Quit"));
+  _debug_quit->setEnabled (false);
+  _file_editor->debug_menu ()->addAction (_debug_quit);
+  _debug_quit->setShortcut (Qt::Key_Escape);
 
   //QMenu *parallelMenu = menuBar ()->addMenu (tr ("&Parallel"));
 
   QMenu *   desktop_menu = menuBar ()->addMenu (tr ("&Desktop"));
   QAction * load_workspace_action       = desktop_menu->addAction (tr ("Load workspace"));
   QAction * save_workspace_action       = desktop_menu->addAction (tr ("Save workspace"));
   QAction * clear_workspace_action      = desktop_menu->addAction (tr ("Clear workspace"));
 
@@ -519,25 +539,25 @@ main_window::construct ()
   connect (_current_directory_up_tool_button, SIGNAL (clicked ()),
            this,                        SLOT   (current_working_directory_up()));
   connect (copy_action,                 SIGNAL (triggered()),
            _terminal,                   SLOT   (copyClipboard ()));
   connect (paste_action,                SIGNAL (triggered()),
            _terminal,                   SLOT   (pasteClipboard ()));
   connect (_current_directory_combo_box, SIGNAL (activated (QString)),
            this,                        SLOT (change_current_working_directory (QString)));
-  connect (debug_continue,              SIGNAL (triggered ()),
+  connect (_debug_continue,             SIGNAL (triggered ()),
            this,                        SLOT (debug_continue ()));
-  connect (debug_step_into,             SIGNAL (triggered ()),
+  connect (_debug_step_into,            SIGNAL (triggered ()),
            this,                        SLOT (debug_step_into ()));
-  connect (debug_step_over,             SIGNAL (triggered ()),
+  connect (_debug_step_over,            SIGNAL (triggered ()),
            this,                        SLOT (debug_step_over ()));
-  connect (debug_step_out,              SIGNAL (triggered ()),
+  connect (_debug_step_out,             SIGNAL (triggered ()),
            this,                        SLOT (debug_step_out ()));
-  connect (debug_quit,                  SIGNAL (triggered ()),
+  connect (_debug_quit,                 SIGNAL (triggered ()),
            this,                        SLOT (debug_quit ()));
 
   setWindowTitle ("Octave");
   setDockOptions(QMainWindow::AnimatedDocks | QMainWindow::AllowNestedDocks | QMainWindow::AllowTabbedDocks);
   addDockWidget (Qt::LeftDockWidgetArea, _workspace_view);
   addDockWidget (Qt::LeftDockWidgetArea, _history_dock_widget);
   addDockWidget (Qt::RightDockWidgetArea, _files_dock_widget);
   addDockWidget (Qt::RightDockWidgetArea, _file_editor);
diff --git a/gui/src/main-window.h b/gui/src/main-window.h
--- a/gui/src/main-window.h
+++ b/gui/src/main-window.h
@@ -111,16 +111,22 @@ private:
   void construct ();
   void establish_octave_link ();
 
   QTerminal *               _terminal;
   file_editor_interface *   _file_editor;
   QMenu *                   _debug_menu;
   QTimer                    _update_performance_information_timer;
 
+  QAction *                 _debug_continue;
+  QAction *                 _debug_step_into;
+  QAction *                 _debug_step_over;
+  QAction *                 _debug_step_out;
+  QAction *                 _debug_quit;
+
   // Dock widgets.
   workspace_view *          _workspace_view;
   history_dock_widget *     _history_dock_widget;
   files_dock_widget *       _files_dock_widget;
   terminal_dock_widget *    _terminal_dock_widget;
 
   // Toolbars.
   QStatusBar *              _status_bar;
