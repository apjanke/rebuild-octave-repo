# HG changeset patch
# User jwe
# Date 1045777119 0
#      Thu Feb 20 21:38:39 2003 +0000
# Node ID d39de791ef9c8c62db8430a324cf047dca5b100a
# Parent  4e23bfdd61726468962a8d6db1b865856c86ebf2
[project @ 2003-02-20 21:38:39 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,11 +1,20 @@
 2003-02-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* debug.cc (get_user_function): Use dynamic_cast, not static_cast.
+
+	* ov-usr-fcn.cc (octave_user_function::traceback_error): Now const.
+
 	* ov.cc (octave_value (const octave_fcn_handle&)): New constructor.
+	(octave_value::fcn_handle_value): New virtual function.
+	* ov-base.cc (octave_value::fcn_handle_value): Provide default.
+	* ov-usr-fcn.cc (octave_user_function::stash_fcn_file_name): New
+	arg, nm.  Change all callers.
+	* ov-fcn.h (octave_function::is_nested_function): New virtual function.
 	* parse.y (get_feval_args): New function.
 	(feval (octave_function *, const octave_value_list&, int)): Likewise.
 	(feval (const octave_value_list&, int)): Allow the first arg to be
 	a function handle as well as a string.
 	* variables.cc (load_function): New function.
 	* pt-walk.h, pt-pr-code.h, pt-pr-code.cc, pt-check.h, pt-check.cc,
 	pt-bp.h, pt-bp.cc: Handle new tree_fcn_handle class.
 	* pt-all.h: Include pt-fcn-handle.h.
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -55,26 +55,26 @@ get_user_function (std::string str = "")
 
   if (str.compare (""))
     {
       symbol_record *ptr = curr_sym_tab->lookup (str);
 
       if (ptr && ptr->is_user_function ())
 	{
 	  octave_value tmp = ptr->def ();
-	  dbg_fcn = static_cast<octave_user_function *> (tmp.function_value ());
+	  dbg_fcn = dynamic_cast<octave_user_function *> (tmp.function_value ());
 	}
       else
 	{
 	  symbol_record *ptr = lookup_by_name (str, false);
 	
 	  if (ptr && ptr->is_user_function ())
 	    {
 	      octave_value tmp = ptr->def ();
-	      dbg_fcn = static_cast<octave_user_function *> (tmp.function_value ());
+	      dbg_fcn = dynamic_cast<octave_user_function *> (tmp.function_value ());
 	    }
 	}
     }
   else if (curr_function)
     dbg_fcn = curr_function;
 
   return dbg_fcn;
 }
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -398,20 +398,20 @@ octave_base_value::function_value (bool 
   octave_function *retval = 0;
 
   if (! silent)
     gripe_wrong_type_arg ("octave_base_value::function_value()",
 			  type_name ());
   return retval;
 }
 
-octave_fcn_handle
+octave_fcn_handle *
 octave_base_value::fcn_handle_value (bool silent)
 {
-  octave_fcn_handle retval;
+  octave_fcn_handle *retval = 0;
 
   if (! silent)
     gripe_wrong_type_arg ("octave_base_value::fcn_handle_value()",
 			  type_name ());
   return retval;
 }
 
 octave_value_list
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -206,17 +206,17 @@ public:
   string_vector map_keys (void) const;
 
   octave_stream stream_value (void) const;
 
   int stream_number (void) const;
 
   octave_function *function_value (bool silent);
 
-  octave_fcn_handle fcn_handle_value (bool silent);
+  octave_fcn_handle *fcn_handle_value (bool silent);
 
   octave_value_list list_value (void) const;
 
   bool bool_value (void) const;
 
   boolMatrix bool_matrix_value (void) const;
 
   octave_value convert_to_str (void) const;
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -80,27 +80,27 @@ DEFUN (functions, args, ,
 Return a struct containing information about the function handle\n\
 @var{fcn_handle}.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     {
-      octave_fcn_handle fh = args(0).fcn_handle_value ();
+      octave_fcn_handle *fh = args(0).fcn_handle_value ();
 
       if (! error_state)
 	{
-	  octave_function *fcn = fh.function_value (true);
+	  octave_function *fcn = fh ? fh->function_value (true) : 0;
 
 	  if (fcn)
 	    {
 	      Octave_map m;
 
-	      m ["function"](0) = fh.name ();
+	      m ["function"](0) = fh->name ();
 
 	      if (fcn->is_nested_function ())
 		m ["type"](0) = "subfunction";
 	      else
 		m ["type"](0) = "simple";
 
 	      std::string nm = fcn->fcn_file_name ();
 
@@ -129,22 +129,22 @@ DEFUN (func2str, args, ,
 Return a string containing the name of the function referenced by\n\
 the function handle @var{fcn_handle}.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     {
-      octave_fcn_handle fh = args(0).fcn_handle_value ();
+      octave_fcn_handle *fh = args(0).fcn_handle_value ();
 
-      if (! error_state)
-	retval = fh.name ();
+      if (! error_state && fh)
+	retval = fh->name ();
       else
-	error ("func2str: expecting function handle as first argument");
+	error ("func2str: expecting valid function handle as first argument");
     }
   else
     print_usage ("func2str");
 
   return retval;
 }
 
 DEFUN (str2func, args, ,
diff --git a/src/ov-fcn-handle.h b/src/ov-fcn-handle.h
--- a/src/ov-fcn-handle.h
+++ b/src/ov-fcn-handle.h
@@ -38,18 +38,17 @@ Software Foundation, 59 Temple Place - S
 
 // Function handles.
 
 class
 octave_fcn_handle : public octave_base_value
 {
 public:
 
-  octave_fcn_handle (octave_function *f = 0,
-		     const std::string& n = std::string ())
+  octave_fcn_handle (octave_function *f, const std::string& n)
     : fcn (f), nm (n) { }
 
   octave_fcn_handle (const octave_fcn_handle& fh)
     : fcn (fh.fcn), nm (fh.nm) { }
 
   octave_fcn_handle& operator = (const octave_fcn_handle& fh)
     {
       if (this != &fh)
@@ -62,17 +61,17 @@ public:
     }
 
   ~octave_fcn_handle (void) { }
 
   bool is_defined (void) const { return fcn; }
 
   octave_function *function_value (bool) { return fcn; }
 
-  octave_fcn_handle fcn_handle_value (bool) { return *this; }
+  octave_fcn_handle *fcn_handle_value (bool) { return this; }
 
   bool print_as_scalar (void) const { return true; }
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   std::string name (void) const { return nm; }
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -511,17 +511,17 @@ octave_user_function::do_multi_index_op 
 
  abort:
   unwind_protect::run_frame ("func_eval");
 
   return retval;
 }
 
 void
-octave_user_function::traceback_error (void)
+octave_user_function::traceback_error (void) const
 {
   if (error_state >= 0)
     error_state = -1;
 
   if (fcn_name.empty ())
     {
       if (file_name.empty ())
 	::error ("called from `?unknown?'");
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -76,54 +76,47 @@ public:
   void mark_fcn_file_up_to_date (const octave_time& t) { t_checked = t; }
 
   void stash_fcn_file_time (const octave_time& t)
     {
       t_parsed = t;
       mark_fcn_file_up_to_date (t);
     }
 
-  void stash_symtab_ptr (symbol_record *sr)
-    { symtab_entry = sr; }
+  void stash_symtab_ptr (symbol_record *sr) { symtab_entry = sr; }
 
-  std::string fcn_file_name (void) const
-    { return file_name; }
+  std::string fcn_file_name (void) const { return file_name; }
 
-  octave_time time_parsed (void) const
-    { return t_parsed; }
+  octave_time time_parsed (void) const { return t_parsed; }
 
-  octave_time time_checked (void) const
-    { return t_checked; }
+  octave_time time_checked (void) const { return t_checked; }
 
   void mark_as_system_fcn_file (void);
 
-  bool is_system_fcn_file (void) const
-    { return system_fcn_file; }
+  bool is_system_fcn_file (void) const { return system_fcn_file; }
 
   bool takes_varargs (void) const;
 
-  void octave_va_start (void)
-    { curr_va_arg_number = num_named_args; }
+  void octave_va_start (void) { curr_va_arg_number = num_named_args; }
 
   octave_value octave_va_arg (void);
 
   octave_value_list octave_all_va_args (void);
 
   bool takes_var_return (void) const;
 
   void octave_vr_val (const octave_value& val);
 
   void varargout_to_vr_val (void);
 
   bool has_varargout (void) const;
 
   void stash_function_name (const std::string& s);
 
-  std::string function_name (void)
-    { return fcn_name; }
+  std::string function_name (void) const { return fcn_name; }
 
   void mark_as_nested_function (void) { nested_function = true; }
 
   bool is_nested_function (void) const { return nested_function; }
 
   void save_args_passed (const octave_value_list& args)
     {
       if (call_depth > 1)
@@ -152,17 +145,17 @@ public:
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     int nargout);
 
   octave_value_list
   do_multi_index_op (int nargout, const octave_value_list& args);
 
-  void traceback_error (void);
+  void traceback_error (void) const;
 
   tree_parameter_list *parameter_list (void) { return param_list; }
 
   tree_parameter_list *return_list (void) { return ret_list; }
 
   tree_statement_list *body (void) { return cmd_list; }
 
   octave_comment_list *leading_comment (void) { return lead_comm; }
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -796,17 +796,17 @@ octave_value::stream_number (void) const
 }
 
 octave_function *
 octave_value::function_value (bool silent)
 {
   return rep->function_value (silent);
 }
 
-octave_fcn_handle
+octave_fcn_handle *
 octave_value::fcn_handle_value (bool silent)
 {
   return rep->fcn_handle_value (silent);
 }
 
 octave_value_list
 octave_value::list_value (void) const
 {
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -479,17 +479,17 @@ public:
     { return rep->map_keys (); }
 
   virtual octave_stream stream_value (void) const;
 
   virtual int stream_number (void) const;
 
   virtual octave_function *function_value (bool silent = false);
 
-  virtual octave_fcn_handle fcn_handle_value (bool silent = false);
+  virtual octave_fcn_handle *fcn_handle_value (bool silent = false);
 
   virtual octave_value_list list_value (void) const;
 
   virtual bool bool_value (void) const
     { return rep->bool_value (); }
 
   virtual boolMatrix bool_matrix_value (void) const
     { return rep->bool_matrix_value (); }
