# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1359428161 18000
#      Mon Jan 28 21:56:01 2013 -0500
# Branch classdef
# Node ID 14aa0b5a980c9c4a4731b355d2ec4ce0acbd19de
# Parent  cdeb6eb656be552464b1242d199b52dcc2b23214
Abstract the meta-protocol layer to use it for other meta objects.

* libinterp/octave-value/ov-classdef.h (class cdef_meta_object_rep,
class cdef_meta_object): New classes.
(cdef_object_rep::is_class, cdef_object_rep::is_method,
cdef_object_rep::is_property, cdef_object_rep::is_package): Moved to
cdef_meta_object_rep.
(cdef_object::is_class, cdef_object::is_method, cdef_object::is_property,
cdef_object::is_package): Moved to cdef_meta_object.
(cdef_object_rep::is_handle_object, cdef_object_rep::is_value_object,
cdef_object_rep::is_meta_object): New virtual methods.
(cdef_object::is_handle_object, cdef_object::is_value_object,
cdef_object::is_meta_object): New methods.
(handle_cdef_object::is_handle_object): New method.
(value_cdef_object::is_value_object): Likewise.
(class cdef_class, class cdef_property, class_cdef_method,
class cdef_package): Inherit from cdef_meta_object.
(class cdef_class::cdef_class_rep, class cdef_property::cdef_property_rep,
class cdef_method::cdef_method_rep, class cdef_package::cdef_package_rep):
Inherit from cdef_meta_object_rep.
(cdef_class::cdef_class_rep::meta_subsref): Renamed from subsref_meta.
(cdef_class::cdef_class_rep::meta_release,
cdef_class::cdef_class_rep::meta_is_postfix_index_handled): New method, moved
from octave_classdef_proxy.
(cdef_class::operator=(const cdef_object&)): Remove method.
(cdef_class::subsref_meta): Remove method, replaced by
cdef_meta_object::meta_subsref.
(cdef_method::cdef_method(const cdef_method&)): Fix signature of copy
constructor, was using "const cdef_property&".
(cdef_package::cdef_package(const cdef_package&)): Add copy constructor.

* libinterp/octave-value/ov-classdef.cc (class octave_classdef_meta): Renamed
from octave_classdef_proxy.
(octave_classdef_meta::meta_subsref): Method renamed from subsref_meta.
(octave_classdef_meta::meta_subsref, octave_classdef_meta::octave_classdef_meta,
octave_classdef_meta::is_postfix_index_handled): Forward calls to
cdef_meta_object.
(cdef_class::cdef_class_rep::meta_subsref): Renamed from subsref_meta.
(cdef_class::cdef_class_rep::meta_release): New method.
(cdef_class::get_method_function): Use renamed class octave_classdef_meta.
(cdef_class::cdef_class_rep::cdef_class_rep): Inherit from cdef_meta_object_rep.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -827,63 +827,60 @@ octave_classdef::undef_subsasgn (const s
   else
     return octave_base_value::undef_subsasgn (type, idx, rhs);
 
   return octave_value ();
 }
 
 //----------------------------------------------------------------------------
 
-class octave_classdef_proxy : public octave_function
+class octave_classdef_meta : public octave_function
 {
 public:
-  octave_classdef_proxy (const cdef_class& _klass)
-    : klass (_klass) { }
-
-  ~octave_classdef_proxy (void)
-    {
-      // This means the class has been cleared from the symbol table.
-      all_classes.erase (klass.get_name ());
-    }
+  octave_classdef_meta (const cdef_meta_object& obj)
+    : object (obj) { }
+
+  ~octave_classdef_meta (void)
+    { object.meta_release (); }
 
   octave_function* function_value (bool = false) { return this; }
 
   octave_value_list
   subsref (const std::string& type,
            const std::list<octave_value_list>& idx,
            int nargout)
-    { return klass.subsref_meta (type, idx, nargout); }
+    { return object.meta_subsref (type, idx, nargout); }
 
   octave_value
   subsref (const std::string& type,
            const std::list<octave_value_list>& idx)
     {
       octave_value_list retval;
 
       retval = subsref (type, idx, 1);
 
       return (retval.length () > 0 ? retval(0) : octave_value ());
     }
 
   octave_value_list
   do_multi_index_op (int nargout, const octave_value_list& idx)
     {
-      // Emulate constructor
+      // Emulate ()-type meta subsref
 
       std::list<octave_value_list> l (1, idx);
       std::string type ("(");
 
       return subsref (type, l, nargout);
     }
 
   bool is_postfix_index_handled (char type) const
-    { return (type == '(' || type == '.'); }
+    { return object.meta_is_postfix_index_handled (type); }
 
 private:
-  cdef_class klass;
+  cdef_meta_object object;
 };
 
 //----------------------------------------------------------------------------
 
 class octave_classdef_superclass_ref : public octave_function
 {
 public:
   octave_classdef_superclass_ref (const octave_value_list& a)
@@ -1402,17 +1399,17 @@ handle_cdef_object::~handle_cdef_object 
 
 value_cdef_object::~value_cdef_object (void)
 {
   gnulib::printf ("deleting %s object (value)\n",
                   get_class ().get_name ().c_str ());
 }
 
 cdef_class::cdef_class_rep::cdef_class_rep (const std::list<cdef_class>& superclasses)
-     : handle_cdef_object (), member_count (0), handle_class (false),
+     : cdef_meta_object_rep (), member_count (0), handle_class (false),
        object_count (0), meta (false)
 {
   put ("SuperClasses", to_ov (superclasses));
   implicit_ctor_list = superclasses;
 }
 
 cdef_method
 cdef_class::cdef_class_rep::find_method (const std::string& nm, bool local)
@@ -1912,17 +1909,17 @@ cdef_class::cdef_class_rep::delete_objec
       cdef_class cls = lookup_class (super_classes(i));
 
       if (!error_state)
 	cls.delete_object (obj);
     }
 }
 
 octave_value_list
-cdef_class::cdef_class_rep::subsref_meta (const std::string& type,
+cdef_class::cdef_class_rep::meta_subsref (const std::string& type,
                                           const std::list<octave_value_list>& idx,
                                           int nargout)
 {
   size_t skip = 1;
 
   octave_value_list retval;
 
   switch (type[0])
@@ -1997,16 +1994,22 @@ cdef_class::cdef_class_rep::subsref_meta
       if (type.length () > skip && idx.size () > skip && ! retval.empty ())
 	retval = retval(0).next_subsref (nargout, type, idx, skip);
     }
 
   return retval;
 }
 
 void
+cdef_class::cdef_class_rep::meta_release (void)
+{
+  all_classes.erase (get_name ());
+}
+
+void
 cdef_class::cdef_class_rep::initialize_object (cdef_object& obj)
 {
   // Populate the object with default property values
 
   std::list<cdef_class> super_classes = lookup_classes (get ("SuperClasses").cell_value ());
 
   if (! error_state)
     {
@@ -2395,17 +2398,17 @@ cdef_class::make_meta_class (tree_classd
     }
 
   return retval;
 }
 
 octave_function*
 cdef_class::get_method_function (const std::string& /* nm */)
 {
-  octave_classdef_proxy* p = new octave_classdef_proxy (*this);
+  octave_classdef_meta* p = new octave_classdef_meta (*this);
 
   return p;
 }
 
 octave_value
 cdef_property::cdef_property_rep::get_value (const cdef_object& obj,
                                              bool do_check_access,
                                              const std::string& who)
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -78,23 +78,21 @@ public:
   virtual cdef_object_rep* make_array (void) const
     {
       gripe_invalid_object ("make_array");
       return new cdef_object_rep ();
     }
 
   virtual bool is_array (void) const { return false; }
 
-  virtual bool is_class (void) const { return false; }
-
-  virtual bool is_property (void) const { return false; }
+  virtual bool is_value_object (void) const { return false; }
 
-  virtual bool is_method (void) const { return false; }
+  virtual bool is_handle_object (void) const { return false; }
 
-  virtual bool is_package (void) const { return false; }
+  virtual bool is_meta_object (void) const { return false; }
 
   virtual Array<cdef_object> array_value (void) const
     {
       gripe_invalid_object ("array_value");
       return Array<cdef_object> ();
     }
 
   virtual void put (const std::string&, const octave_value&)
@@ -235,23 +233,21 @@ public:
   cdef_object make_array (void) const
     { return cdef_object (rep->make_array ()); }
 
   cdef_object copy (void) const
     { return cdef_object (rep->copy ()); }
 
   bool is_array (void) const { return rep->is_array (); }
 
-  bool is_class (void) const { return rep->is_class (); }
-
-  bool is_property (void) const { return rep->is_property (); }
+  bool is_value_object (void) const { return rep->is_value_object (); }
 
-  bool is_method (void) const { return rep->is_method (); }
+  bool is_handle_object (void) const { return rep->is_handle_object (); }
 
-  bool is_package (void) const { return rep->is_package (); }
+  bool is_meta_object (void) const { return rep->is_meta_object (); }
 
   Array<cdef_object> array_value (void) const { return rep->array_value (); }
 
   void put (const std::string& pname, const octave_value& val)
     { rep->put (pname, val); }
 
   octave_value get (const std::string& pname) const
     { return rep->get (pname); }
@@ -468,16 +464,18 @@ public:
       return obj;
     }
 
   cdef_object_rep* copy (void) const
     { return new handle_cdef_object (*this); }
 
   bool is_valid (void) const { return true; }
 
+  bool is_handle_object (void) const { return true; }
+
 protected:
   // Restricted copying!
   handle_cdef_object (const handle_cdef_object& obj)
     : cdef_object_scalar (obj) { }
 
 private:
   // No assignment
   handle_cdef_object& operator = (const handle_cdef_object&);
@@ -494,36 +492,129 @@ public:
 
   cdef_object_rep* clone (void) const
     { return new value_cdef_object (*this); }
 
   cdef_object_rep* copy (void) const { return clone (); }
 
   bool is_valid (void) const { return true; }
 
+  bool is_value_object (void) const { return true; }
+
 private:
   // Private copying!
   value_cdef_object (const value_cdef_object& obj)
     : cdef_object_scalar (obj) { }
 
   // No assignment!
   value_cdef_object& operator = (const value_cdef_object&);
 };
 
 class
-cdef_class : public cdef_object
+cdef_meta_object_rep : public handle_cdef_object
+{
+public:
+  cdef_meta_object_rep (void)
+    : handle_cdef_object () { }
+
+  ~cdef_meta_object_rep (void) { }
+
+  cdef_object_rep* copy (void) const
+    { return new cdef_meta_object_rep (*this); }
+
+  bool is_meta_object (void) const { return true; }
+
+  virtual bool is_class (void) const { return false; }
+
+  virtual bool is_property (void) const { return false; }
+
+  virtual bool is_method (void) const { return false; }
+
+  virtual bool is_package (void) const { return false; }
+  
+  virtual octave_value_list
+  meta_subsref (const std::string& /* type */,
+                const std::list<octave_value_list>& /* idx */,
+                int /* nargout */)
+    {
+      ::error ("subsref: invalid meta object");
+      return octave_value_list ();
+    }
+
+  virtual void meta_release (void) { }
+
+  virtual bool meta_is_postfix_index_handled (char /* type */) const
+    { return false; }
+
+protected:
+  // Restricted copying!
+  cdef_meta_object_rep (const cdef_meta_object_rep& obj)
+    : handle_cdef_object (obj) { }
+
+private:
+  // No assignment!
+  cdef_meta_object_rep& operator = (const cdef_meta_object_rep&);
+};
+
+class
+cdef_meta_object : public cdef_object
+{
+public:
+  cdef_meta_object (void)
+    : cdef_object () { }
+
+  cdef_meta_object (const cdef_meta_object& obj)
+    : cdef_object (obj) { }
+
+  cdef_meta_object (cdef_meta_object_rep *r)
+    : cdef_object (r) { }
+
+  // Object consistency is checked in sub-classes.
+  cdef_meta_object (const cdef_object& obj)
+    : cdef_object (obj) { }
+
+  ~cdef_meta_object (void) { }
+
+  bool is_class (void) const { return get_rep ()->is_class (); }
+
+  bool is_property (void) const { return get_rep ()->is_property (); }
+
+  bool is_method (void) const { return get_rep ()->is_method (); }
+
+  bool is_package (void) const { return get_rep ()->is_package (); }
+
+  octave_value_list
+  meta_subsref (const std::string& type,
+                const std::list<octave_value_list>& idx, int nargout)
+    { return get_rep ()->meta_subsref (type, idx, nargout); }
+
+  void meta_release (void) { get_rep ()->meta_release (); }
+
+  bool meta_is_postfix_index_handled (char type) const
+    { return get_rep ()->meta_is_postfix_index_handled (type); }
+
+private:
+  cdef_meta_object_rep* get_rep (void)
+    { return dynamic_cast<cdef_meta_object_rep *> (cdef_object::get_rep ()); }
+  
+  const cdef_meta_object_rep* get_rep (void) const
+    { return dynamic_cast<const cdef_meta_object_rep *> (cdef_object::get_rep ()); }
+};
+
+class
+cdef_class : public cdef_meta_object
 {
 private:
 
   class
-  cdef_class_rep : public handle_cdef_object
+  cdef_class_rep : public cdef_meta_object_rep
   {
   public:
     cdef_class_rep (void)
-	: handle_cdef_object (), member_count (0), handle_class (false),
+	: cdef_meta_object_rep (), member_count (0), handle_class (false),
           object_count (0), meta (false) { }
 
     cdef_class_rep (const std::list<cdef_class>& superclasses);
 
     cdef_object_rep* copy (void) const { return new cdef_class_rep (*this); }
 
     bool is_class (void) const { return true; }
 
@@ -552,19 +643,24 @@ private:
 
     void set_directory (const std::string& dir) { directory = dir; }
 
     std::string get_directory (void) const { return directory; }
 
     void delete_object (cdef_object obj);
 
     octave_value_list
-    subsref_meta (const std::string& type,
+    meta_subsref (const std::string& type,
                   const std::list<octave_value_list>& idx, int nargout);
 
+    void meta_release (void);
+
+    bool meta_is_postfix_index_handled (char type) const
+      { return (type == '(' || type == '.'); }
+
     octave_value construct (const octave_value_list& args);
 
     cdef_object construct_object (const octave_value_list& args);
 
     void initialize_object (cdef_object& obj);
 
     void run_constructor (cdef_object& obj, const octave_value_list& args);
 
@@ -646,63 +742,52 @@ private:
     // Utility iterator typedef's.
     typedef std::map<std::string,cdef_method>::iterator method_iterator;
     typedef std::map<std::string,cdef_method>::const_iterator method_const_iterator;
     typedef std::map<std::string,cdef_property>::iterator property_iterator;
     typedef std::map<std::string,cdef_property>::const_iterator property_const_iterator;
 
   private:
     cdef_class_rep (const cdef_class_rep& c)
-      : handle_cdef_object (c), directory (c.directory),
+      : cdef_meta_object_rep (c), directory (c.directory),
         method_map (c.method_map), property_map (c.property_map),
         member_count (c.member_count), handle_class (c.handle_class),
         implicit_ctor_list (c.implicit_ctor_list),
         object_count (c.object_count), meta (c.meta) { }
   };
 
 public:
   // Create and invalid class object
   cdef_class (void)
-      : cdef_object () { }
+      : cdef_meta_object () { }
 
   cdef_class (const std::string& nm,
               const std::list<cdef_class>& superclasses)
-      : cdef_object (new cdef_class_rep (superclasses))
+      : cdef_meta_object (new cdef_class_rep (superclasses))
     { get_rep ()->set_name (nm); }
 
   cdef_class (const cdef_class& cls)
-      : cdef_object (cls) { }
+      : cdef_meta_object (cls) { }
 
   cdef_class (const cdef_object& obj)
-      : cdef_object (obj)
+      : cdef_meta_object (obj)
     {
       // This should never happen...
       if (! is_class ())
 	error ("internal error: invalid assignment from %s to meta.class object",
 	       class_name ().c_str ());
     }
 
   cdef_class& operator = (const cdef_class& cls)
     {
       cdef_object::operator= (cls);
 
       return *this;
     }
 
-  cdef_class& operator = (const cdef_object& obj)
-    {
-      if (obj.is_class ())
-	cdef_object::operator= (obj);
-      else
-	error ("internal error: invalid assignment from %s to meta.class object",
-	       class_name ().c_str ());
-
-      return *this;
-    }
-
   cdef_method find_method (const std::string& nm, bool local = false);
 
   void install_method (const cdef_method& meth)
     { get_rep ()->install_method (meth); }
 
   Cell get_methods (void) { return get_rep ()->get_methods (); }
 
   cdef_property find_property (const std::string& nm);
@@ -728,21 +813,16 @@ public:
     { return get_rep ()->get_name (); }
 
   bool is_builtin (void) const
     { return get_directory ().empty (); }
 
   void delete_object (cdef_object obj)
     { get_rep ()->delete_object (obj); }
 
-  octave_value_list subsref_meta (const std::string& type,
-                                  const std::list<octave_value_list>& idx,
-                                  int nargout)
-    { return get_rep ()->subsref_meta (type, idx, nargout); }
-
   static cdef_class make_meta_class (tree_classdef* t);
 
   octave_function* get_method_function (const std::string& nm);
 
   octave_function* get_constructor_function (void)
     { return get_method_function (get_name ()); }
 
   octave_value construct (const octave_value_list& args)
@@ -806,28 +886,28 @@ operator != (const cdef_class& clsa, con
 { return ! (clsa == clsb); }
 
 // This is only to be able to use cdef_class as map keys.
 inline bool
 operator < (const cdef_class& clsa, const cdef_class& clsb)
 { return clsa.get_rep () < clsb.get_rep (); }
 
 class
-cdef_property : public cdef_object
+cdef_property : public cdef_meta_object
 {
   friend class cdef_class;
 
 private:
 
   class
-  cdef_property_rep : public handle_cdef_object
+  cdef_property_rep : public cdef_meta_object_rep
   {
   public:
     cdef_property_rep (void)
-	: handle_cdef_object () { }
+	: cdef_meta_object_rep () { }
 
     cdef_object_rep* copy (void) const { return new cdef_property_rep (*this); }
 
     bool is_property (void) const { return true; }
 
     std::string get_name (void) const { return get("Name").string_value (); }
 
     void set_name (const std::string& nm) { put ("Name", nm); }
@@ -846,39 +926,39 @@ private:
                     const std::string& who = std::string ());
 
     bool check_get_access (void) const;
 
     bool check_set_access (void) const;
 
   private:
     cdef_property_rep (const cdef_property_rep& p)
-      : handle_cdef_object (p) { }
+      : cdef_meta_object_rep (p) { }
 
     bool is_recursive_set (const cdef_object& obj) const;
 
     cdef_property wrap (void)
       {
         refcount++;
         return cdef_property (this);
       }
   };
 
 public:
-  cdef_property (void) : cdef_object () { }
+  cdef_property (void) : cdef_meta_object () { }
 
   cdef_property (const std::string& nm)
-      : cdef_object (new cdef_property_rep ())
+      : cdef_meta_object (new cdef_property_rep ())
     { get_rep ()->set_name (nm); }
 
   cdef_property (const cdef_property& prop)
-      : cdef_object (prop) { }
+      : cdef_meta_object (prop) { }
 
   cdef_property (const cdef_object& obj)
-      : cdef_object (obj)
+      : cdef_meta_object (obj)
     {
       // This should never happen...
       if (! is_property ())
 	error ("internal error: invalid assignment from %s to meta.property object",
 	       class_name ().c_str ());
     }
 
   cdef_property& operator = (const cdef_property& prop)
@@ -915,27 +995,27 @@ private:
   cdef_property_rep* get_rep (void)
     { return dynamic_cast<cdef_property_rep *> (cdef_object::get_rep ()); }
   
   const cdef_property_rep* get_rep (void) const
     { return dynamic_cast<const cdef_property_rep *> (cdef_object::get_rep ()); }
 };
 
 class
-cdef_method : public cdef_object
+cdef_method : public cdef_meta_object
 {
   friend class cdef_class;
 
 private:
 
   class
-  cdef_method_rep : public handle_cdef_object
+  cdef_method_rep : public cdef_meta_object_rep
   {
   public:
-    cdef_method_rep (void) : handle_cdef_object () { }
+    cdef_method_rep (void) : cdef_meta_object_rep () { }
 
     cdef_object_rep* copy (void) const { return new cdef_method_rep(*this); }
 
     bool is_method (void) const { return true; }
 
     std::string get_name (void) const { return get("Name").string_value (); }
 
     void set_name (const std::string& nm) { put ("Name", nm); }
@@ -956,42 +1036,42 @@ private:
 			       const octave_value_list& args, int nargout,
                                bool do_check_access = true,
                                const std::string& who = std::string ());
 
     bool is_constructor (void) const;
 
   private:
     cdef_method_rep (const cdef_method_rep& m)
-      : handle_cdef_object (m), function (m.function) { }
+      : cdef_meta_object_rep (m), function (m.function) { }
 
     void check_method (void);
 
     cdef_method wrap (void)
       {
         refcount++;
         return cdef_method (this);
       }
 
   private:
     octave_value function;
   };
 
 public:
-  cdef_method (void) : cdef_object () { }
+  cdef_method (void) : cdef_meta_object () { }
 
   cdef_method (const std::string& nm)
-      : cdef_object (new cdef_method_rep ())
+      : cdef_meta_object (new cdef_method_rep ())
     { get_rep ()->set_name (nm); }
 
-  cdef_method (const cdef_property& prop)
-      : cdef_object (prop) { }
+  cdef_method (const cdef_method& meth)
+      : cdef_meta_object (meth) { }
 
   cdef_method (const cdef_object& obj)
-      : cdef_object (obj)
+      : cdef_meta_object (obj)
     {
       // This should never happen...
       if (! is_method ())
 	error ("internal error: invalid assignment from %s to meta.method object",
 	       class_name ().c_str ());
     }
 
   cdef_method& operator = (const cdef_method& meth)
@@ -1107,27 +1187,27 @@ inline cdef_method
 cdef_class::find_method (const std::string& nm, bool local)
 { return get_rep ()->find_method (nm, local); }
 
 inline cdef_property
 cdef_class::find_property (const std::string& nm)
 { return get_rep ()->find_property (nm); }
 
 class
-cdef_package : public cdef_object
+cdef_package : public cdef_meta_object
 {
   friend class cdef_class;
 
 private:
 
   class
-  cdef_package_rep : public handle_cdef_object
+  cdef_package_rep : public cdef_meta_object_rep
   {
   public:
-    cdef_package_rep (void) : handle_cdef_object (), member_count (0) { }
+    cdef_package_rep (void) : cdef_meta_object_rep (), member_count (0) { }
 
     cdef_object_rep* copy (void) const { return new cdef_package_rep (*this); }
 
     bool is_package (void) const { return true; }
 
     std::string get_name (void) const { return get("Name").string_value (); }
 
     void set_name (const std::string& nm) { put ("Name", nm); }
@@ -1174,30 +1254,33 @@ private:
     typedef std::map<std::string, cdef_class>::const_iterator class_const_iterator;
     typedef std::map<std::string, octave_value>::iterator function_iterator;
     typedef std::map<std::string, octave_value>::const_iterator function_const_iterator;
     typedef std::map<std::string, cdef_package>::iterator package_iterator;
     typedef std::map<std::string, cdef_package>::const_iterator package_const_iterator;
 
   private:
     cdef_package_rep (const cdef_package_rep& p)
-      : handle_cdef_object (p), class_map (p.class_map),
+      : cdef_meta_object_rep (p), class_map (p.class_map),
         function_map (p.function_map), package_map (p.package_map),
         member_count (p.member_count) { }
   };
 
 public:
-  cdef_package (void) : cdef_object () { }
+  cdef_package (void) : cdef_meta_object () { }
 
   cdef_package (const std::string& nm)
-      : cdef_object (new cdef_package_rep ())
+      : cdef_meta_object (new cdef_package_rep ())
     { get_rep ()->set_name (nm); }
 
+  cdef_package (const cdef_package& pack)
+    : cdef_meta_object (pack) { }
+
   cdef_package (const cdef_object& obj)
-      : cdef_object (obj)
+      : cdef_meta_object (obj)
     {
       // This should never happen...
       if (! is_package ())
 	error ("internal error: invalid assignment from %s to meta.package object",
 	       class_name ().c_str ());
     }
 
   cdef_package& operator = (const cdef_package& pack)
