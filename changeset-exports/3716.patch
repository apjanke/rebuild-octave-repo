# HG changeset patch
# User jwe
# Date 968302744 0
#      Thu Sep 07 04:59:04 2000 +0000
# Node ID 08fe5f74c7d42435d0207fb57c3772d8df782abe
# Parent  e5ff21d2bac6cfe8c2b61b36db56e6f7589e4fac
[project @ 2000-09-07 04:59:03 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,28 @@
+2000-09-06  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* utils.cc (FERRNO): New function (currently commented out).
+
+	* c-file-ptr-stream.cc (c_file_ptr_buf::close): Call flush here.
+	(c_file_ptr_buf::~c_file_ptr_buf): Not here.
+	* c-file-ptr-stream.h (c_fie_ptr_buf::close_fcn): New typedef.
+	(c_file_ptr_buf::cf): New data member.  Add default constructor arg.
+	(class c_file_ptr_buf): Derive from filebuf, not streambuf.
+	(i_c_file_ptr_stream, o_c_file_ptr_stream): Handle close function here.
+	* oct-procstrm.cc (octave_iprocstream, octave_oprocstream): Likewise.
+	(octave_iprocstream::do_close, octave_oprocstream::do_close): Delete.
+	* oct-stdstrm.cc (octave_base_stdiostream::~octave_base_stdiostream):
+	Don't do anything.
+	(octave_istdiostream::create): Handle close function here.
+	(octave_istdiostream::octave_istdiostream): Likewise.
+	(octave_ostdiostream::create): Likewise.
+	(octave_ostdiostream::octave_ostdiostream): Likewise.
+	(class octave_base_stdiostream): Don't cache FILE pointer here.
+
 2000-09-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* syscalls.cc (Ffcntl): Don't assume that the file id passed in is
 	the same as the underlying system file id.
 
 2000-08-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* parse.y: Use octave_time, not time.
diff --git a/src/c-file-ptr-stream.cc b/src/c-file-ptr-stream.cc
--- a/src/c-file-ptr-stream.cc
+++ b/src/c-file-ptr-stream.cc
@@ -39,18 +39,16 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifndef SEEK_END
 #define SEEK_END 2
 #endif
 
 c_file_ptr_buf::~c_file_ptr_buf (void)
 {
-  flush ();
-
   close ();
 }
 
 // XXX FIXME XXX -- I'm sure there is room for improvement here...
 
 int
 c_file_ptr_buf::overflow (int c)
 {
@@ -153,19 +151,21 @@ c_file_ptr_buf::flush (void)
   return f ? fflush (f) : EOF;
 }
 
 int
 c_file_ptr_buf::close (void)
 {
   int retval = -1;
 
+  flush ();
+
   if (f)
     {
-      retval = fclose (f);
+      retval = cf (f);
       f = 0;
     }
 
   return retval;
 }
 
 void
 i_c_file_ptr_stream::close (void)
diff --git a/src/c-file-ptr-stream.h b/src/c-file-ptr-stream.h
--- a/src/c-file-ptr-stream.h
+++ b/src/c-file-ptr-stream.h
@@ -26,23 +26,26 @@ Software Foundation, 59 Temple Place - S
 #ifdef __GNUG__
 #pragma interface
 #endif
 
 #include <iostream>
 #include <stdio.h>
 
 class
-c_file_ptr_buf : public std::streambuf
+c_file_ptr_buf : public std::filebuf
 {
 public:
 
+  typedef int (*close_fcn) (FILE *);
+
   FILE* stdiofile (void) const { return f; }
 
-  c_file_ptr_buf (FILE *f_arg) : std::streambuf (), f (f_arg) { }
+  c_file_ptr_buf (FILE *f_arg, close_fcn cf_arg = ::fclose)
+    : std::filebuf (f_arg ? fileno (f_arg) : -1), f (f_arg), cf (cf_arg) { }
 
   ~c_file_ptr_buf (void);
 
   int overflow (int);
 
   int underflow (void);
 
   int uflow (void);
@@ -63,25 +66,27 @@ public:
 
   int flush (void);
 
   int close (void);
 
 protected:
 
   FILE *f;
+
+  close_fcn cf;
 };
 
 class
 i_c_file_ptr_stream : public std::istream
 {
 public:
 
-  i_c_file_ptr_stream (FILE* f)
-    : std::istream (), buf (new c_file_ptr_buf (f)) { init (buf); }
+  i_c_file_ptr_stream (FILE* f, c_file_ptr_buf::close_fcn cf = ::fclose)
+    : std::istream (), buf (new c_file_ptr_buf (f, cf)) { init (buf); }
 
   ~i_c_file_ptr_stream (void) { delete buf; buf = 0; }
 
   c_file_ptr_buf *rdbuf (void) { return buf; }
 
   void close (void);
 
 private:
@@ -89,18 +94,18 @@ private:
   c_file_ptr_buf *buf;
 };
 
 class
 o_c_file_ptr_stream : public std::ostream
 {
 public:
 
-  o_c_file_ptr_stream (FILE* f)
-    : std::ostream (), buf (new c_file_ptr_buf (f)) { init (buf); }
+  o_c_file_ptr_stream (FILE* f, c_file_ptr_buf::close_fcn cf = ::fclose)
+    : std::ostream (), buf (new c_file_ptr_buf (f, cf)) { init (buf); }
 
   ~o_c_file_ptr_stream (void) { delete buf; buf = 0; }
 
   c_file_ptr_buf *rdbuf (void) { return buf; }
 
   void close (void);
 
 private:
diff --git a/src/oct-prcstrm.cc b/src/oct-prcstrm.cc
--- a/src/oct-prcstrm.cc
+++ b/src/oct-prcstrm.cc
@@ -33,75 +33,43 @@ octave_iprocstream::create (const std::s
 			    oct_mach_info::float_format flt_fmt)
 {
   return octave_stream (new octave_iprocstream (n, arg_md, flt_fmt));
 }
 
 octave_iprocstream::octave_iprocstream (const std::string& n,
 					std::ios::openmode arg_md,
 					oct_mach_info::float_format flt_fmt)
-  : octave_istdiostream (n, 0, arg_md, flt_fmt)
+  : octave_istdiostream (n, ::popen (n.c_str (), "r"), ::pclose,
+			 arg_md, flt_fmt)
 {
-  fp = popen (n.c_str (), "r");
-
-  if (fp)
-    {
-      delete is;
-      is = new i_c_file_ptr_stream (fp);
-    }
 }
 
 octave_iprocstream::~octave_iprocstream (void)
 {
   do_close ();
 }
 
-void
-octave_iprocstream::do_close (void)
-{
-  if (fp)
-    {
-      pclose (fp);
-      fp = 0;
-    }
-}
-
 octave_stream
 octave_oprocstream::create (const std::string& n, std::ios::openmode arg_md,
 			    oct_mach_info::float_format flt_fmt)
 {
   return octave_stream (new octave_oprocstream (n, arg_md, flt_fmt));
 }
 
 octave_oprocstream::octave_oprocstream (const std::string& n,
 					std::ios::openmode arg_md,
 					oct_mach_info::float_format flt_fmt)
-  : octave_ostdiostream (n, 0, arg_md, flt_fmt)
+  : octave_ostdiostream (n, ::popen (n.c_str (), "w"), ::pclose,
+			 arg_md, flt_fmt)
 {
-  fp = popen (n.c_str (), "w");
-
-  if (fp)
-    {
-      delete os;
-      os = new o_c_file_ptr_stream (fp);
-    }
 }
 
 octave_oprocstream::~octave_oprocstream (void)
 {
   do_close ();
 }
 
-void
-octave_oprocstream::do_close (void)
-{
-  if (fp)
-    {
-      pclose (fp);
-      fp = 0;
-    }
-}
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/oct-prcstrm.h b/src/oct-prcstrm.h
--- a/src/oct-prcstrm.h
+++ b/src/oct-prcstrm.h
@@ -37,18 +37,16 @@ public:
 		      std::ios::openmode arg_md = std::ios::in,
 		      oct_mach_info::float_format flt_fmt =
 		      oct_mach_info::native);
 
   static octave_stream
   create (const std::string& n, std::ios::openmode arg_md = std::ios::in,
 	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
 
-  void do_close (void);
-
 protected:
 
   ~octave_iprocstream (void);
 
 private:
 
   // No copying!
 
@@ -66,18 +64,16 @@ public:
 		      std::ios::openmode arg_md = std::ios::out,
 		      oct_mach_info::float_format flt_fmt =
 		      oct_mach_info::native);
 
   static octave_stream
   create (const std::string& n, std::ios::openmode arg_md = std::ios::out,
 	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
 
-  void do_close (void);
-
 protected:
 
   ~octave_oprocstream (void);
 
 private:
 
   // No copying!
 
diff --git a/src/oct-stdstrm.cc b/src/oct-stdstrm.cc
--- a/src/oct-stdstrm.cc
+++ b/src/oct-stdstrm.cc
@@ -23,25 +23,16 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cstdio>
 
 #include "oct-stdstrm.h"
 
-octave_base_stdiostream::~octave_base_stdiostream (void)
-{
-  if (fp)
-    {
-      fclose (fp);
-      fp = 0;
-    }
-}
-
 // Position a stream at OFFSET relative to ORIGIN.
 
 int
 octave_base_stdiostream::seek (std::streamoff offset, std::ios::seek_dir origin)
 {
   int retval = -1;
 
   if (! bad ())
@@ -80,58 +71,62 @@ octave_base_stdiostream::tell (void) con
 	}
     }
 
   return retval;
 }
 
 octave_stream
 octave_istdiostream::create (const std::string& n, FILE *f,
+			     c_file_ptr_buf::close_fcn cf,
 			     std::ios::openmode arg_md,
 			     oct_mach_info::float_format flt_fmt)
 {
-  return octave_stream (new octave_istdiostream (n, f, arg_md, flt_fmt));
+  return octave_stream (new octave_istdiostream (n, f, cf, arg_md, flt_fmt));
 }
 
 octave_istdiostream::octave_istdiostream (const std::string& n, FILE *f,
+					  c_file_ptr_buf::close_fcn cf,
 					  std::ios::openmode arg_md,
 					  oct_mach_info::float_format flt_fmt)
-  : octave_base_stdiostream (n, f, arg_md, flt_fmt), is (0)
+  : octave_base_stdiostream (n, arg_md, flt_fmt), is (0)
 {
   if (f)
-    is = new i_c_file_ptr_stream (f);
+    is = new i_c_file_ptr_stream (f, cf);
 }
 
 octave_istdiostream::~octave_istdiostream (void)
 {
   delete is;
 }
 
 void
 octave_istdiostream::do_close (void)
 {
   if (is)
     is->close ();
 }
 
 octave_stream
 octave_ostdiostream::create (const std::string& n, FILE *f,
+			     c_file_ptr_buf::close_fcn cf = ::fclose,
 			     std::ios::openmode arg_md,
 			     oct_mach_info::float_format flt_fmt)
 {
-  return octave_stream (new octave_ostdiostream (n, f, arg_md, flt_fmt));
+  return octave_stream (new octave_ostdiostream (n, f, cf, arg_md, flt_fmt));
 }
 
 octave_ostdiostream::octave_ostdiostream (const std::string& n, FILE *f,
+					  c_file_ptr_buf::close_fcn cf,
 					  std::ios::openmode arg_md,
 					  oct_mach_info::float_format flt_fmt)
-  : octave_base_stdiostream (n, f, arg_md, flt_fmt), os (0)
+  : octave_base_stdiostream (n, arg_md, flt_fmt), os (0)
 {
   if (f)
-    os = new o_c_file_ptr_stream (f);
+    os = new o_c_file_ptr_stream (f, cf);
 }
 
 octave_ostdiostream::~octave_ostdiostream (void)
 {
   delete os;
 }
 
 void
diff --git a/src/oct-stdstrm.h b/src/oct-stdstrm.h
--- a/src/oct-stdstrm.h
+++ b/src/oct-stdstrm.h
@@ -27,20 +27,20 @@ Software Foundation, 59 Temple Place - S
 #include "c-file-ptr-stream.h"
 
 class
 octave_base_stdiostream : public octave_base_stream
 {
 public:
 
   octave_base_stdiostream
-    (const std::string& n, FILE *f,
+    (const std::string& n,
      std::ios::openmode arg_md = std::ios::in|std::ios::out,
      oct_mach_info::float_format flt_fmt = oct_mach_info::native)
-    : octave_base_stream (arg_md, flt_fmt), nm (n), fp (f) { }
+    : octave_base_stream (arg_md, flt_fmt), nm (n) { }
 
   // Position a stream at OFFSET relative to ORIGIN.
 
   int seek (std::streamoff offset, std::ios::seek_dir origin);
 
   // Return current stream position.
 
   long tell (void) const;
@@ -54,39 +54,39 @@ public:
   virtual bool bad (void) const = 0;
 
   virtual void clear (void) = 0;
 
 protected:
 
   std::string nm;
 
-  FILE *fp;
-
-  ~octave_base_stdiostream (void);
+  ~octave_base_stdiostream (void) { }
 
   // No copying!
 
   octave_base_stdiostream (const octave_base_stdiostream&);
 
   octave_base_stdiostream& operator = (const octave_base_stdiostream&);
 };
 
 class
 octave_istdiostream : public octave_base_stdiostream
 {
 public:
 
   octave_istdiostream (const std::string& n, FILE *f = 0,
+		       c_file_ptr_buf::close_fcn cf = ::fclose,
 		       std::ios::openmode arg_md = std::ios::in,
 		       oct_mach_info::float_format flt_fmt =
 		       oct_mach_info::native);
 
   static octave_stream
   create (const std::string& n, FILE *f = 0,
+	  c_file_ptr_buf::close_fcn cf = ::fclose,
 	  std::ios::openmode arg_md = std::ios::in,
 	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const { return is ? is->eof () : true; }
 
   std::istream *input_stream (void) { return is; }
@@ -123,22 +123,24 @@ private:
 };
 
 class
 octave_ostdiostream : public octave_base_stdiostream
 {
 public:
 
   octave_ostdiostream (const std::string& n, FILE *f = 0,
+		       c_file_ptr_buf::close_fcn cf = ::fclose,
 		       std::ios::openmode arg_md = std::ios::out,
 		       oct_mach_info::float_format flt_fmt =
 		       oct_mach_info::native);
 
   static octave_stream
   create (const std::string& n, FILE *f = 0,
+	  c_file_ptr_buf::close_fcn cf = ::fclose,
 	  std::ios::openmode arg_md = std::ios::out,
 	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const { return os ? os->eof () : true; }
 
   std::istream *input_stream (void) { return 0; }
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -889,16 +889,17 @@ octave_base_stream::file_number (void)
   if (name () == "stderr")
     return 2;
 
   int retval = -1;
 
   std::istream *is = input_stream ();
   std::ostream *os = output_stream ();
 
+  // XXX FIXME XXX -- there must be a better way...
   int i_fid = is ? ((std::filebuf *) (is->rdbuf ()))->fd () : -1;
   int o_fid = os ? ((std::filebuf *) (os->rdbuf ()))->fd () : -1;
 
   if (i_fid >= 0)
     {
       if (o_fid >= 0)
 	retval = (i_fid == o_fid) ? i_fid : -1;
       else
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -19,16 +19,17 @@ along with Octave; see the file COPYING.
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <cerrno>
 #include <climits>
 #include <cstring>
 
 #include <fstream>
 #include <iostream>
 #include <strstream>
 #include <string>
 
@@ -561,16 +562,39 @@ representation.\n\
 	error ("undo_string_escapes: argument must be a string");
     }
   else
     print_usage ("undo_string_escapes");
 
   return retval;
 }
 
+#if 0
+
+// Octave could use some way to access the value of ERRNO, but this is
+// probably not the best interface, so don't depend on it...
+
+DEFUN (ERRNO, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {@var{system_error_number}} errno ()\n\
+Return the current value of the system-dependent variable errno.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 0)
+    retval = static_cast<double> (errno);
+  else
+    print_usage ("errno");
+
+  return retval;
+}
+
+#endif
+
 static void
 warn_old_style_preference (bool val, const std::string& sval)
 {
   warning
     ("preference of \"%s\" is obsolete -- use numeric value of %d instead",
      sval.c_str (), (val ? 1 : 0));
 }
 
