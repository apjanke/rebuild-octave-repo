# HG changeset patch
# User jwe
# Date 849812819 0
#      Thu Dec 05 19:06:59 1996 +0000
# Node ID 8b0911d576bf5ffa7cb8d777f8f9091af43f5747
# Parent  0c978e147a3affb7dae10aa1b0c0eb8d24ba7a71
[project @ 1996-12-05 19:06:58 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -1411,17 +1411,19 @@ ComplexMatrix::lssolve (const ComplexMat
 	for (int i = 0; i < m; i++)
 	  result.elem (i, j) = b.elem (i, j);
 
       Complex *presult = result.fortran_vec ();
 
       int len_s = m < n ? m : n;
       Array<double> s (len_s);
       double *ps = s.fortran_vec ();
+
       double rcond = -1.0;
+
       int lwork;
       if (m < n)
 	lwork = 2*m + (nrhs > n ? nrhs : n);
       else
 	lwork = 2*n + (nrhs > m ? nrhs : m);
 
       Array<Complex> work (lwork);
       Complex *pwork = work.fortran_vec ();
@@ -1434,17 +1436,17 @@ ComplexMatrix::lssolve (const ComplexMat
       F77_XFCN (zgelss, ZGELSS, (m, n, nrhs, tmp_data, m, presult,
 				 nrr, ps, rcond, rank, pwork, lwork,
 				 prwork, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in zgelss");
       else
 	{
-	  ComplexMatrix retval (n, nrhs);
+	  retval.resize (n, nrhs);
 	  for (int j = 0; j < nrhs; j++)
 	    for (int i = 0; i < n; i++)
 	      retval.elem (i, j) = result.elem (i, j);
 	}
     }
 
   return retval;
 }
@@ -1514,17 +1516,17 @@ ComplexMatrix::lssolve (const ComplexCol
       F77_XFCN (zgelss, ZGELSS, (m, n, nrhs, tmp_data, m, presult,
 				 nrr, ps, rcond, rank, pwork, lwork,
 				 prwork, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in zgelss");
       else
 	{
-	  ComplexColumnVector retval (n);
+	  retval.resize (n);
 	  for (int i = 0; i < n; i++)
 	    retval.elem (i) = result.elem (i);
 	}
     }
 
   return retval;
 }
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+Thu Dec  5 13:05:18 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* CMatrix.cc (lssolve): Don't redeclare retval, resize it.
+
 Wed Dec  4 12:24:24 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dMatrix.cc (Qzval): Don't try to use same memory three times.
 	Create result using Complex constructor, not multiplication.
 	Order elements as they are returned from Eispack.
 
 Mon Dec  2 00:26:41 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+Tue Dec  3 23:47:09 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* op-str-str.cc (eq, ne): Handle operations with scalars.
+
 Thu Nov 21 12:30:36 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-str-mat.h (octave_char_matrix_str): Provide transpose and
 	hermitian operators.
 	* ov-ch-mat.h (octave_char_matrix): Likewise.
 
 Wed Nov 20 00:35:57 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/op-str-str.cc b/src/op-str-str.cc
--- a/src/op-str-str.cc
+++ b/src/op-str-str.cc
@@ -37,26 +37,72 @@ Software Foundation, 59 Temple Place - S
 // string by string ops.
 
 static octave_value
 eq (const octave_value& a1, const octave_value& a2)
 {
   CAST_BINOP_ARGS (const octave_char_matrix_str&,
 		   const octave_char_matrix_str&);
 
-  return octave_value (v1.char_matrix_value () == v2.char_matrix_value ());
+  charMatrix cm1 = v1.char_matrix_value ();
+  charMatrix cm2 = v2.char_matrix_value ();
+
+  if (cm1.rows () == 1 && cm1.columns () == 1)
+    {
+      if (cm2.rows () == 1 && cm2.columns () == 1)
+	return octave_value (cm1 (0, 0) == cm2 (0, 0));
+      else
+	SC_MX_BOOL_OP (char, c, cm1 (0, 0), \
+		       charMatrix, m, cm2, \
+		       c == m (i, j));
+    }
+  else
+    {
+      if (cm2.rows () == 1 && cm2.columns () == 1)
+	MX_SC_BOOL_OP (charMatrix, m, cm1, \
+		       char, c, cm2 (0, 0), \
+		       c == m (i, j));
+      else
+	MX_MX_BOOL_OP (charMatrix, m1, cm1, \
+		       charMatrix, m2, cm2, \
+		       m1 (i, j) == m2 (i, j), \
+		       "==", 1.0);
+    }
 }
 
 static octave_value
 ne (const octave_value& a1, const octave_value& a2)
 {
   CAST_BINOP_ARGS (const octave_char_matrix_str&,
 		   const octave_char_matrix_str&);
 
-  return octave_value (v1.char_matrix_value () != v2.char_matrix_value ());
+  charMatrix cm1 = v1.char_matrix_value ();
+  charMatrix cm2 = v2.char_matrix_value ();
+
+  if (cm1.rows () == 1 && cm1.columns () == 1)
+    {
+      if (cm2.rows () == 1 && cm2.columns () == 1)
+	return octave_value (cm1 (0, 0) != cm2 (0, 0));
+      else
+	SC_MX_BOOL_OP (char, c, cm1 (0, 0), \
+		       charMatrix, m, cm2, \
+		       c != m (i, j));
+    }
+  else
+    {
+      if (cm2.rows () == 1 && cm2.columns () == 1)
+	MX_SC_BOOL_OP (charMatrix, m, cm1, \
+		       char, c, cm2 (0, 0), \
+		       c != m (i, j));
+      else
+	MX_MX_BOOL_OP (charMatrix, m1, cm1, \
+		       charMatrix, m2, cm2, \
+		       m1 (i, j) != m2 (i, j), \
+		       "!=", 1.0);
+    }
 }
 
 static octave_value
 assign (octave_value& a1, const octave_value_list& idx,
 	const octave_value& a2)
 {
   CAST_BINOP_ARGS (octave_char_matrix_str&, const octave_char_matrix_str&);
 
diff --git a/src/qzval.cc b/src/qzval.cc
--- a/src/qzval.cc
+++ b/src/qzval.cc
@@ -48,17 +48,22 @@ A and B must be real matrices.")
     {
       octave_value arg_a = args(0);
       octave_value arg_b = args(1);
 
       Matrix a = arg_a.matrix_value ();
       Matrix b = arg_b.matrix_value ();
 
       if (! error_state)
-	retval = Qzval (a, b);
+	{
+	  ComplexColumnVector tmp = Qzval (a, b);
+
+	  if (! error_state)
+	    retval = tmp;
+	}
     }
   else
     print_usage ("qzval");
 
   return retval;
 }
 
 /*
