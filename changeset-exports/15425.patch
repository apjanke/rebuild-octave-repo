# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1348132133 18000
#      Thu Sep 20 04:08:53 2012 -0500
# Node ID 8ae34ffe5c1b14f4cde7b21fb089a82404292d20
# Parent  7b69cd89868cbbc31b7d8cccf0e8757837470d26
Retain QsciAPIs lexer_api as part of lexer_octave_gui object (bug #37359)

This way, it may be deleted upon deconstruction and not cause
segmentation fault at startup

* file-editor-tab.cc, file-editor-tab.h
  (file_editor_tab::update_tracked_file): Delete.
  (file_editor_tab::set_file_name): Rather than clear whole list, just
  subtract out the old file name then add the new name.
  (file_editor_tab::load_file): Remove update_tracked_file, it's part
  of set_file_name. (file_editor_tab::file_has_changed): Remove
  update_tracked_file, it's part of set_file_name.
  (file_editor_tab::save_file): Move file close before set_file_name
  so watcher doesn't notice. Remove inelegant code that solved this by
  clearing watcher files.

* lexer-octave-gui.cc, file-editor-tab.cc
  (file_editor_tab::update_lexer, lexer_octave_gui::lexer_octave_gui,
  lexer_octave_gui : public QsciLexer): Move all the lexer preparatory
  code to the constructor so that lexer_api can be retained as part of
  object. (lexer_octave_gui::~lexer_octave_gui): Make destructor
  non-virtual and delete lexer_gui when done.

* octave-gui.cc, main-window-h, main-window.cc, file-editor.cc
  (octave_start_gui, file_editor::construct): Move read_settings from
  constructor to after construction in octave_start_gui so that no
  signal occur referencing a partially constructed object.

* file-editor.cc (file_editor::construct): Tidy code.

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -140,19 +140,25 @@ file_editor_tab::closeEvent (QCloseEvent
           e->accept();
         }
     }
 }
 
 void
 file_editor_tab::set_file_name (const QString& fileName)
 {
+  // update tracked file
+  QStringList trackedFiles = _file_system_watcher.files ();
+  if (!trackedFiles.isEmpty ())
+    _file_system_watcher.removePath (_file_name);
+  _file_system_watcher.addPath (fileName);
   _file_name = fileName;
+
+  // update lexer after _file_name change
   update_lexer ();
-  update_tracked_file ();
 }
 
 void
 file_editor_tab::handle_margin_clicked(int margin, int line,
                                        Qt::KeyboardModifiers state)
 {
   if (margin == 1)
     {
@@ -183,41 +189,16 @@ void
 file_editor_tab::update_lexer ()
 {
   QsciLexer *lexer =  _edit_area->lexer ();
   delete lexer;
 
   if (_file_name.endsWith (".m") || _file_name.endsWith (".M"))
     {
       lexer = new lexer_octave_gui ();
-
-      // The API info that is used for auto completion
-      // TODO: Where to store a file with API info (raw or prepared?)?
-      // TODO: Also provide infos on octave-forge functions?
-      // TODO: Also provide infos on function parameters?
-      // By now, use the keywords-list from syntax highlighting
-
-      QsciAPIs *lexer_api = new QsciAPIs (lexer);
-
-      QString keyword;
-      QStringList keywordList;
-
-      // get whole string with all keywords
-      keyword = lexer->keywords (1);
-      // split into single strings
-      keywordList = keyword.split (QRegExp ("\\s+"));
-
-      int i;
-      for (i = 0; i < keywordList.size (); i++)
-        {
-          // add single strings to the API
-          lexer_api->add (keywordList.at (i));
-        }
-      // prepare API info ... this make take some time
-      lexer_api->prepare ();
     }
   else if (_file_name.endsWith (".c")
            || _file_name.endsWith (".cc")
            || _file_name.endsWith (".cpp")
            || _file_name.endsWith (".cxx")
            || _file_name.endsWith (".c++")
            || _file_name.endsWith (".h")
            || _file_name.endsWith (".hh")
@@ -360,34 +341,23 @@ file_editor_tab::update_window_title (bo
 
 void
 file_editor_tab::handle_copy_available(bool enableCopy)
 {
   _copy_available = enableCopy;
   emit editor_state_changed ();
 }
 
-void
-file_editor_tab::update_tracked_file ()
-{
-  QStringList trackedFiles = _file_system_watcher.files ();
-  if (!trackedFiles.isEmpty ())
-    _file_system_watcher.removePaths (trackedFiles);
-
-  if (_file_name != UNNAMED_FILE)
-    _file_system_watcher.addPath (_file_name);
-}
-
 int
 file_editor_tab::check_file_modified (const QString& msg, int cancelButton)
 {
   int decision = QMessageBox::Yes;
   if (_edit_area->isModified ())
     {
-      // file is modified but not saved, aks user what to do
+      // file is modified but not saved, ask user what to do
       decision = QMessageBox::warning (this,
                                        msg,
                                        tr ("The file %1\n"
                                            "has been modified. Do you want to save the changes?").
                                        arg (_file_name),
                                        QMessageBox::Save,
                                        QMessageBox::Discard, cancelButton );
       if (decision == QMessageBox::Save)
@@ -585,19 +555,16 @@ file_editor_tab::load_file(const QString
     }
 
   QTextStream in (&file);
   QApplication::setOverrideCursor (Qt::WaitCursor);
   _edit_area->setText (in.readAll ());
   QApplication::restoreOverrideCursor ();
 
   set_file_name (fileName);
-  update_tracked_file ();
-
-
   update_window_title (false); // window title (no modification)
   _edit_area->setModified (false); // loaded file is not modified yet
 
   return true;
 }
 
 void
 file_editor_tab::new_file ()
@@ -622,47 +589,40 @@ bool
 file_editor_tab::save_file (const QString& saveFileName)
 {
   // it is a new file with the name "<unnamed>" -> call saveFielAs
   if (saveFileName == UNNAMED_FILE || saveFileName.isEmpty ())
     {
       return save_file_as();
     }
 
-  QStringList watched_files = _file_system_watcher.files();
-  if (!watched_files.isEmpty ())
-    _file_system_watcher.removePaths(watched_files);
-
   // open the file for writing
   QFile file (saveFileName);
   if (!file.open (QFile::WriteOnly))
     {
       QMessageBox::warning (this, tr ("Octave Editor"),
                             tr ("Could not open file %1 for write:\n%2.").
                             arg (saveFileName).arg (file.errorString ()));
-      _file_system_watcher.addPaths (watched_files);
       return false;
     }
 
   // save the contents into the file
   QTextStream out (&file);
   QApplication::setOverrideCursor (Qt::WaitCursor);
   out << _edit_area->text ();
   QApplication::restoreOverrideCursor ();
+  file.close();
 
-  // save file name for later use
-  _file_name = saveFileName;
+  // save file name after closing file otherwise tracker will notice file change
+  set_file_name (saveFileName);
   // set the window title to actual file name (not modified)
   update_window_title (false);
   // files is save -> not modified
   _edit_area->setModified (false);
-  file.close();
 
-  if (!watched_files.isEmpty ())
-    _file_system_watcher.addPaths (watched_files);
   return true;
 }
 
 bool
 file_editor_tab::save_file_as ()
 {
   QString saveFileName(_file_name);
   QFileDialog fileDialog(this);
@@ -755,17 +715,16 @@ file_editor_tab::file_has_changed (const
                               QMessageBox::Close);
       if (decision == QMessageBox::Save)
         {
           if (!save_file_as ())
             {
               set_file_name (UNNAMED_FILE);
               update_window_title (true); // window title (no modification)
               set_modified (true);
-              update_tracked_file ();
             }
         }
       else
         {
           emit close_request ();
         }
     }
 }
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -95,17 +95,16 @@ private:
     std::string function_name;
     int line;
   };
 
   void update_lexer ();
   void request_add_breakpoint (int line);
   void request_remove_breakpoint (int line);
 
-  void update_tracked_file ();
   int check_file_modified (const QString& msg, int cancelButton);
   void do_comment_selected_text (bool comment);
 
   void run_file_callback (void);
   void add_breakpoint_callback (const bp_info& info);
   void remove_breakpoint_callback (const bp_info& info);
   void remove_all_breakpoints_callback (const bp_info& info);
 
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -589,18 +589,18 @@ file_editor::construct ()
   setWindowTitle ("Octave Editor");
 
   //restore previous session
   QSettings *settings = resource_manager::get_settings ();
   if (settings->value ("editor/restoreSession",true).toBool ())
     {
       QStringList sessionFileNames = settings->value("editor/savedSessionTabs", QStringList()).toStringList ();
 
-      for (int n=0;n<sessionFileNames.count();++n)
-        request_open_file(sessionFileNames.at(n), true);
+      for (int n=0; n < sessionFileNames.count (); ++n)
+        request_open_file (sessionFileNames.at (n), true);
     }
 }
 
 void
 file_editor::add_file_editor_tab (file_editor_tab *f)
 {
   _tab_widget->addTab (f, "");
   connect (f, SIGNAL (file_name_changed(QString)),
diff --git a/libgui/src/m-editor/lexer-octave-gui.cc b/libgui/src/m-editor/lexer-octave-gui.cc
--- a/libgui/src/m-editor/lexer-octave-gui.cc
+++ b/libgui/src/m-editor/lexer-octave-gui.cc
@@ -29,20 +29,47 @@ along with Octave; see the file COPYING.
 #include <qfont.h>
 
 // -----------------------------------------------------
 // Some basic functions
 // -----------------------------------------------------
 lexer_octave_gui::lexer_octave_gui (QObject *p)
   : QsciLexer (p)
 {
+  // The API info that is used for auto completion
+  // TODO: Where to store a file with API info (raw or prepared?)?
+  // TODO: Also provide infos on octave-forge functions?
+  // TODO: Also provide infos on function parameters?
+  // By now, use the keywords-list from syntax highlighting
+
+  QString keyword;
+  QStringList keywordList;
+
+  // get whole string with all keywords
+  keyword = this->keywords (1);
+  // split into single strings
+  keywordList = keyword.split (QRegExp ("\\s+"));
+
+  lexer_api = new QsciAPIs (this);
+  if (lexer_api)
+    {
+      for (int i = 0; i < keywordList.size (); i++)
+        {
+          // add single strings to the API
+          lexer_api->add (keywordList.at (i));
+        }
+      // prepare API info ... this may take some time
+      lexer_api->prepare ();
+    }
 }
 
 lexer_octave_gui::~lexer_octave_gui()
 {
+  if (lexer_api)
+    delete lexer_api;
 }
 
 const char *lexer_octave_gui::language() const
 {
   return "Octave";  // return the name of the language
 }
 
 const char *lexer_octave_gui::lexer() const
diff --git a/libgui/src/m-editor/lexer-octave-gui.h b/libgui/src/m-editor/lexer-octave-gui.h
--- a/libgui/src/m-editor/lexer-octave-gui.h
+++ b/libgui/src/m-editor/lexer-octave-gui.h
@@ -22,17 +22,17 @@ along with Octave; see the file COPYING.
 
 #ifndef LEXEROCTAVE_H
 #define LEXEROCTAVE_H
 
 #include "resource-manager.h"
 #include <QObject>
 #include <Qsci/qsciglobal.h>
 #include <Qsci/qscilexer.h>
-
+#include <Qsci/qsciapis.h>
 
 class lexer_octave_gui : public QsciLexer
 {
   Q_OBJECT
 
   public:
   // the used styles
   enum
@@ -44,22 +44,23 @@ class lexer_octave_gui : public QsciLexe
       Keyword = 4,
       SingleQuotedString = 5,
       Operator = 6,
       Identifier = 7,
       DoubleQuotedString = 8
     };
 
   lexer_octave_gui (QObject *parent = 0);
-  virtual ~lexer_octave_gui ();
+  ~lexer_octave_gui ();
   const char *language () const;
   const char *lexer () const;
   QColor defaultColor (int style) const;
   QFont defaultFont (int style) const;
   const char *keywords (int set) const;
   QString description (int style) const;
 
 private:
   lexer_octave_gui (const lexer_octave_gui &);
   lexer_octave_gui &operator= (const lexer_octave_gui &);
+  QsciAPIs *lexer_api;
 };
 
 #endif
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -855,17 +855,16 @@ main_window::construct ()
   setDockOptions(QMainWindow::AnimatedDocks | QMainWindow::AllowNestedDocks | QMainWindow::AllowTabbedDocks);
   addDockWidget (Qt::LeftDockWidgetArea, _workspace_view);
   addDockWidget (Qt::LeftDockWidgetArea, _history_dock_widget);
   addDockWidget (Qt::RightDockWidgetArea, _files_dock_widget);
   addDockWidget (Qt::RightDockWidgetArea, _file_editor);
   addDockWidget (Qt::BottomDockWidgetArea, _terminal_dock_widget);
   addDockWidget (Qt::RightDockWidgetArea, _documentation_dock_widget);
   setStatusBar (_status_bar);
-  read_settings ();
 
   _octave_qt_event_listener = new octave_qt_event_listener ();
   octave_link::register_event_listener (_octave_qt_event_listener);
 
   connect (_octave_qt_event_listener,
            SIGNAL (current_directory_has_changed_signal (QString)),
            this,
            SLOT (current_working_directory_has_changed (QString)));
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -109,20 +109,21 @@ public slots:
   void handle_entered_debug_mode ();
   void handle_quit_debug_mode ();
   void debug_continue ();
   void debug_step_into ();
   void debug_step_over ();
   void debug_step_out ();
   void debug_quit ();
 
+  void read_settings ();
+  void write_settings ();
+
 protected:
   void closeEvent (QCloseEvent * closeEvent);
-  void read_settings ();
-  void write_settings ();
 
 private:
   void construct ();
   void establish_octave_link ();
 
   void save_workspace_callback (const std::string& file);
 
   void load_workspace_callback (const std::string& file);
diff --git a/libgui/src/octave-gui.cc b/libgui/src/octave-gui.cc
--- a/libgui/src/octave-gui.cc
+++ b/libgui/src/octave-gui.cc
@@ -105,15 +105,16 @@ octave_start_gui (int argc, char *argv[]
           QString translatorFile = resource_manager::find_translator_file (language);
           QTranslator translator;
           translator.load (translatorFile);
           application.installTranslator (&translator);
 
           resource_manager::update_network_settings ();
 
           main_window w;
+          w.read_settings ();  // Get the widget settings after construction and before showing
           w.show ();
           w.focus_command_window ();
 
           return application.exec ();
         }
     }
 }
