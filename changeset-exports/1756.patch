# HG changeset patch
# User jwe
# Date 822286517 0
#      Mon Jan 22 04:55:17 1996 +0000
# Node ID 1af643fa00e37f4ed555754a9508f1893267eb92
# Parent  3a9462b655f175364261d27d5ce2a4029ad589a2
[project @ 1996-01-22 04:55:17 by jwe]

diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #define HEAVYWEIGHT_INDEXING 1
 
 #include <cassert>
+#include <cstdlib>
 
 #include "lo-error.h"
 
 class idx_vector;
 
 // Classes we declare.
 
 template <class T> class Array;
@@ -81,16 +82,21 @@ private:
 
     ~ArrayRep (void) { delete [] data; }
 
     int length (void) const { return len; }
 
     T& elem (int n) { return data[n]; }
 
     T elem (int n) const { return data[n]; }
+
+    void qsort (int (*compare) (const void *, const void *))
+      {
+	::qsort (data, len, sizeof (T), compare);
+      }
   };
 
 #ifdef HEAVYWEIGHT_INDEXING
   idx_vector *idx;
   int max_indices;
   int idx_count;
 #endif
 
@@ -177,16 +183,27 @@ public:
 
   void resize (int n);
   void resize (int n, const T& val);
 
   const T *data (void) const { return rep->data; }
 
   T *fortran_vec (void);
 
+  void qsort (int (*compare) (const void *, const void *))
+    {
+      if (rep->count > 1)
+	{
+	  --rep->count;
+	  rep = new ArrayRep (*rep);
+	}
+
+      rep->qsort (compare);
+    }
+
 #ifdef HEAVYWEIGHT_INDEXING
   void set_max_indices (int mi) { max_indices = mi; }
 
   void clear_index (void);
 
   void set_index (const idx_vector& i);
 
   int index_count (void) const { return idx_count; }
diff --git a/liboctave/CmplxSCHUR.cc b/liboctave/CmplxSCHUR.cc
--- a/liboctave/CmplxSCHUR.cc
+++ b/liboctave/CmplxSCHUR.cc
@@ -53,30 +53,33 @@ complex_select_ana (const Complex& a)
 
 static int
 complex_select_dig (const Complex& a)
 {
   return (abs (a) < 1.0);
 }
 
 int
-ComplexSCHUR::init (const ComplexMatrix& a, const char *ord)
+ComplexSCHUR::init (const ComplexMatrix& a, const string& ord)
 {
   int a_nr = a.rows ();
   int a_nc = a.cols ();
   if (a_nr != a_nc)
     {
       (*current_liboctave_error_handler)
 	("ComplexSCHUR requires square matrix");
       return -1;
     }
 
   char *jobvs = "V";
   char *sort;
-  if (*ord == 'A' || *ord == 'D' || *ord == 'a' || *ord == 'd')
+
+  char ord_char = ord.empty () ? 'U' : ord[0];
+
+  if (ord_char == 'A' || ord_char == 'D' || ord_char == 'a' || ord_char == 'd')
      sort = "S";
    else
      sort = "N";
 
   char *sense = "N";
 
   int n = a_nc;
   int lwork = 8 * n;
@@ -85,33 +88,33 @@ ComplexSCHUR::init (const ComplexMatrix&
   double rconde;
   double rcondv;
 
   double *rwork = new double [n];
 
   // bwork is not referenced for non-ordered Schur.
 
   int *bwork = 0;
-  if (*ord == 'A' || *ord == 'D' || *ord == 'a' || *ord == 'd')
+  if (ord_char == 'A' || ord_char == 'D' || ord_char == 'a' || ord_char == 'd')
     bwork = new int [n];
 
   Complex *s = dup (a.data (), a.length ());
 
   Complex *work = new Complex [lwork];
   Complex *q = new Complex [n*n];
   Complex *w = new Complex [n];
 
-  if (*ord == 'A' || *ord == 'a')
+  if (ord_char == 'A' || ord_char == 'a')
     {
       F77_FCN (zgeesx, ZGEESX) (jobvs, sort, complex_select_ana,
 				sense, n, s, n, sdim, w, q, n, rconde,
 				rcondv, work, lwork, rwork, bwork,
 				info, 1L, 1L);
     }
-  else if (*ord == 'D' || *ord == 'd')
+  else if (ord_char == 'D' || ord_char == 'd')
     {
       F77_FCN (zgeesx, ZGEESX) (jobvs, sort, complex_select_dig,
 				sense, n, s, n, sdim, w, q, n, rconde,
 				rcondv, work, lwork, rwork, bwork,
 				info, 1L, 1L);
     }
   else
     {
diff --git a/liboctave/CmplxSCHUR.h b/liboctave/CmplxSCHUR.h
--- a/liboctave/CmplxSCHUR.h
+++ b/liboctave/CmplxSCHUR.h
@@ -25,32 +25,34 @@ Software Foundation, 59 Temple Place - S
 #define octave_ComplexSCHUR_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
+#include <string>
+
 #include "CMatrix.h"
 
 class ComplexSCHUR
 {
 friend class ComplexMatrix;
 
 public:
 
   ComplexSCHUR (void) { }
 
-  ComplexSCHUR (const ComplexMatrix& a, const char *ord)
+  ComplexSCHUR (const ComplexMatrix& a, const string& ord)
     {
       init (a,ord);
     }
 
-  ComplexSCHUR (const ComplexMatrix& a, const char *ord, int& info)
+  ComplexSCHUR (const ComplexMatrix& a, const string& ord, int& info)
     {
       info = init (a,ord);
     }
 
   ComplexSCHUR (const ComplexSCHUR& a)
     {
       schur_mat = a.schur_mat;
       unitary_mat = a.unitary_mat;
@@ -73,17 +75,17 @@ public:
     {
       return unitary_mat;
     }
 
   friend ostream& operator << (ostream& os, const ComplexSCHUR& a);
 
 private:
 
-  int init (const ComplexMatrix& a, const char *ord);
+  int init (const ComplexMatrix& a, const string& ord);
 
   ComplexMatrix schur_mat;
   ComplexMatrix unitary_mat;
 };
 
 #endif
 
 /*
diff --git a/liboctave/dbleSCHUR.cc b/liboctave/dbleSCHUR.cc
--- a/liboctave/dbleSCHUR.cc
+++ b/liboctave/dbleSCHUR.cc
@@ -55,30 +55,32 @@ select_ana (const double& a, const doubl
 
 static int
 select_dig (const double& a, const double& b)
 {
   return (hypot (a, b) < 1.0);
 }
 
 int
-SCHUR::init (const Matrix& a, const char *ord)
+SCHUR::init (const Matrix& a, const string& ord)
 {
   int a_nr = a.rows ();
   int a_nc = a.cols ();
   if (a_nr != a_nc)
     {
       (*current_liboctave_error_handler) ("SCHUR requires square matrix");
       return -1;
     }
 
   char *jobvs = "V";
   char *sort;
 
-  if (*ord == 'A' || *ord == 'D' || *ord == 'a' || *ord == 'd')
+  char ord_char = ord.empty () ? 'U' : ord[0];
+
+  if (ord_char == 'A' || ord_char == 'D' || ord_char == 'a' || ord_char == 'd')
     sort = "S";
   else
     sort = "N";
 
   char *sense = "N";
 
   int n = a_nc;
   int lwork = 8 * n;
@@ -94,30 +96,30 @@ SCHUR::init (const Matrix& a, const char
   double *wi = new double [n];
   double *q = new double [n*n];
   double *work = new double [lwork];
 
   // These are not referenced for the non-ordered Schur routine.
 
   int *iwork = 0;
   int *bwork = 0;
-  if (*ord == 'A' || *ord == 'D' || *ord == 'a' || *ord == 'd')
+  if (ord_char == 'A' || ord_char == 'D' || ord_char == 'a' || ord_char == 'd')
     {
       iwork = new int [liwork];
       bwork = new int [n];
     }
 
-  if (*ord == 'A' || *ord == 'a')
+  if (ord_char == 'A' || ord_char == 'a')
     {
       F77_FCN (dgeesx, DGEESX) (jobvs, sort, select_ana, sense, n, s,
 				n, sdim, wr, wi, q, n, rconde, rcondv,
 				work, lwork, iwork, liwork, bwork,
 				info, 1L, 1L);
     }
-  else if (*ord == 'D' || *ord == 'd')
+  else if (ord_char == 'D' || ord_char == 'd')
     {
       F77_FCN (dgeesx, DGEESX) (jobvs, sort, select_dig, sense, n, s,
 				n, sdim, wr, wi, q, n, rconde, rcondv,
 				work, lwork, iwork, liwork, bwork,
 				info, 1L, 1L);
       
     }
   else
diff --git a/liboctave/dbleSCHUR.h b/liboctave/dbleSCHUR.h
--- a/liboctave/dbleSCHUR.h
+++ b/liboctave/dbleSCHUR.h
@@ -25,29 +25,31 @@ Software Foundation, 59 Temple Place - S
 #define octave_SCHUR_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
+#include <string>
+
 #include "dMatrix.h"
 
 class SCHUR
 {
 friend class Matrix;
 
 public:
 
   SCHUR (void) { }
 
-  SCHUR (const Matrix& a, const char *ord) { init (a, ord); }
+  SCHUR (const Matrix& a, const string& ord) { init (a, ord); }
 
-  SCHUR (const Matrix& a, const char *ord, int& info)
+  SCHUR (const Matrix& a, const string& ord, int& info)
     {
       info = init (a, ord);
     }
 
   SCHUR (const SCHUR& a)
     {
       schur_mat = a.schur_mat;
       unitary_mat = a.unitary_mat;
@@ -64,17 +66,17 @@ public:
   Matrix schur_matrix (void) const { return schur_mat; }
 
   Matrix unitary_matrix (void) const { return unitary_mat; }
 
   friend ostream& operator << (ostream& os, const SCHUR& a);
 
 private:
 
-  int init (const Matrix& a, const char *ord);
+  int init (const Matrix& a, const string& ord);
 
   Matrix schur_mat;
   Matrix unitary_mat;
 };
 
 #endif
 
 /*
