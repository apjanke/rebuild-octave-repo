# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1340891203 -7200
#      Thu Jun 28 15:46:43 2012 +0200
# Branch gui
# Node ID 61c80e9326a834e8bc2117645e9451af1820f6ce
# Parent  2de56de8953ade0cb4de751b29c9e0064a76a3b3
Clearing the command history works.

* history-dockwidget: Added method to clear the model.
* main-window: Added new slot to clear the history.
* octave-event.h: Created new event to delete the command history.

diff --git a/gui/src/history-dockwidget.cc b/gui/src/history-dockwidget.cc
--- a/gui/src/history-dockwidget.cc
+++ b/gui/src/history-dockwidget.cc
@@ -126,13 +126,19 @@ history_dock_widget::handle_visibility_c
 void
 history_dock_widget::request_history_model_update ()
 {
   octave_link::instance ()
       ->post_event (new octave_update_history_event (*this));
 }
 
 void
+history_dock_widget::reset_model ()
+{
+  _history_model->setStringList (QStringList ());
+}
+
+void
 history_dock_widget::closeEvent (QCloseEvent *event)
 {
   emit active_changed (false);
   QDockWidget::closeEvent (event);
 }
diff --git a/gui/src/history-dockwidget.h b/gui/src/history-dockwidget.h
--- a/gui/src/history-dockwidget.h
+++ b/gui/src/history-dockwidget.h
@@ -35,16 +35,17 @@ public:
   history_dock_widget (QWidget *parent = 0);
 
   void event_accepted (octave_event *e);
   void event_reject (octave_event *e);
 
 public slots:
   void handle_visibility_changed (bool visible);
   void request_history_model_update ();
+  void reset_model ();
 
 signals:
   void information (QString message);
   void command_double_clicked (QString command);
   /** Custom signal that tells if a user has clicked away that dock widget. */
   void active_changed (bool active);
 protected:
   void closeEvent (QCloseEvent *event);
diff --git a/gui/src/main-window.cc b/gui/src/main-window.cc
--- a/gui/src/main-window.cc
+++ b/gui/src/main-window.cc
@@ -40,16 +40,21 @@ main_window::main_window (QWidget * pare
 
 main_window::~main_window ()
 {
 }
 
 void
 main_window::event_accepted (octave_event *e)
 {
+  if (dynamic_cast<octave_clear_history_event*> (e))
+    {
+      // After clearing the history, we need to reset the model.
+      _history_dock_widget->reset_model ();
+    }
   delete e;
 }
 
 void
 main_window::event_reject (octave_event *e)
 {
   delete e;
 }
@@ -100,16 +105,23 @@ main_window::handle_load_workspace_reque
 void
 main_window::handle_clear_workspace_request ()
 {
   octave_link::instance ()
       ->post_event (new octave_clear_workspace_event (*this));
 }
 
 void
+main_window::handle_clear_history_request()
+{
+  octave_link::instance ()
+      ->post_event (new octave_clear_history_event (*this));
+}
+
+void
 main_window::handle_command_double_clicked (QString command)
 {
   _terminal->sendText(command);
   _terminal->setFocus ();
 }
 
 void
 main_window::open_bug_tracker_page ()
@@ -550,17 +562,16 @@ main_window::construct ()
   find_files_action->setEnabled (false); // TODO: Make this work.
   edit_menu->addSeparator ();
 
   QAction *clear_command_window_action
       = edit_menu->addAction (tr ("Clear Command Window"));
   clear_command_window_action->setEnabled (false); // TODO: Make this work.
   QAction *clear_command_history
       = edit_menu->addAction(tr ("Clear Command History"));
-  clear_command_history->setEnabled (false); // TODO: Make this work.
   QAction * clear_workspace_action
       = edit_menu->addAction (tr ("Clear Workspace"));
 
   _debug_menu = menuBar ()->addMenu (tr ("De&bug"));
 
   _debug_continue = _debug_menu->addAction (tr ("Continue"));
   _debug_continue->setEnabled (false);
   _file_editor->debug_menu ()->addAction (_debug_continue);
@@ -736,16 +747,19 @@ main_window::construct ()
            this,                        SLOT (debug_step_into ()));
   connect (_debug_step_over,            SIGNAL (triggered ()),
            this,                        SLOT (debug_step_over ()));
   connect (_debug_step_out,             SIGNAL (triggered ()),
            this,                        SLOT (debug_step_out ()));
   connect (_debug_quit,                 SIGNAL (triggered ()),
            this,                        SLOT (debug_quit ()));
 
+  connect (clear_command_history,       SIGNAL (triggered ()),
+           this,                        SLOT (handle_clear_history_request ()));
+
   setWindowTitle ("Octave");
   setDockOptions(QMainWindow::AnimatedDocks | QMainWindow::AllowNestedDocks | QMainWindow::AllowTabbedDocks);
   addDockWidget (Qt::LeftDockWidgetArea, _workspace_view);
   addDockWidget (Qt::LeftDockWidgetArea, _history_dock_widget);
   addDockWidget (Qt::RightDockWidgetArea, _files_dock_widget);
   addDockWidget (Qt::RightDockWidgetArea, _file_editor);
   addDockWidget (Qt::BottomDockWidgetArea, _terminal_dock_widget);
   setStatusBar (_status_bar);
diff --git a/gui/src/main-window.h b/gui/src/main-window.h
--- a/gui/src/main-window.h
+++ b/gui/src/main-window.h
@@ -71,16 +71,17 @@ Q_OBJECT public:
 signals:
   void settings_changed ();
 
 public slots:
   void report_status_message (QString statusMessage);
   void handle_save_workspace_request ();
   void handle_load_workspace_request ();
   void handle_clear_workspace_request ();
+  void handle_clear_history_request ();
   void handle_command_double_clicked (QString command);
   void new_file ();
   void open_file ();
   void open_bug_tracker_page ();
   void open_agora_page ();
   void open_octave_forge_page ();
   void process_settings_dialog_request ();
   void show_about_octave ();
diff --git a/gui/src/octave-adapter/octave-event.h b/gui/src/octave-adapter/octave-event.h
--- a/gui/src/octave-adapter/octave-event.h
+++ b/gui/src/octave-adapter/octave-event.h
@@ -22,16 +22,17 @@
 #include "octave-event-observer.h"
 #include "octave/config.h"
 #include "symtab.h"
 #include "oct-env.h"
 #include "pt-eval.h"
 #include "toplev.h"
 #include "parse.h"
 #include "debug.h"
+#include "cmd-hist.h"
 
 #include <readline/readline.h>
 
 /**
   * \class octave_event
   * \brief Base class for an octave event.
   * In order to make communication with octave threadsafe, comunication is
   * implemented via events. An application may create events and post them,
@@ -226,16 +227,34 @@ class octave_save_workspace_event : publ
       call_octave_function ("save", args);
       return true;
     }
 
   private:
     std::string _file;
 };
 
+class octave_clear_history_event : public octave_event
+{
+  public:
+    /** Creates a new octave_clear_history_event. */
+    octave_clear_history_event (octave_event_observer& o)
+      : octave_event (o)
+    { }
+
+    bool perform ()
+    {
+      int i;
+      while ((i = command_history::length ()) > 0) {
+          command_history::remove (i - 1);
+        }
+      return true;
+    }
+};
+
 class octave_debug_step_into_event : public octave_event
 {
   public:
     /** Creates a new octave_debug_step_into_event. */
     octave_debug_step_into_event (octave_event_observer& o)
       : octave_event (o) { }
 
     bool perform ()
