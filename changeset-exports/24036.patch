# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1505346134 25200
#      Wed Sep 13 16:42:14 2017 -0700
# Node ID 2932a325930c5d4d2a5ea518f18739a46bedbd68
# Parent  bc0aa7e18c96fa22d167535af08e272399233275
make tests that alter the load path safer (bug #51994)

* run.m: Add unwind_protect block to %!tests to clean up temporary files and
restore the load path safely using path() instead of rmpath().
* bug-38691.tst: Likewise.

diff --git a/scripts/miscellaneous/run.m b/scripts/miscellaneous/run.m
--- a/scripts/miscellaneous/run.m
+++ b/scripts/miscellaneous/run.m
@@ -90,46 +90,53 @@ function run (script)
 endfunction
 
 
 ## Test script file execution
 %!test
 %! clear A  # the variable "A" should be set by the script
 %! assert (exist ("A"), 0);
 %! tmp_dir = tempname ();
-%! mkdir (tmp_dir);
 %! test_script = fullfile (tmp_dir, "test_script.m");
-%! fid = fopen (test_script, "w");
-%! fprintf (fid, "A = 1337;\n");
-%! fclose (fid);
-%! run (test_script);
-%! unlink (test_script);
-%! rmdir (tmp_dir);
-%! assert (exist ("A", "var"), 1);
-%! assert (A, 1337);
+%! unwind_protect
+%!   mkdir (tmp_dir);
+%!   fid = fopen (test_script, "w");
+%!   fprintf (fid, "A = 1337;\n");
+%!   fclose (fid);
+%!   run (test_script);
+%!   assert (exist ("A", "var"), 1);
+%!   assert (A, 1337);
+%! unwind_protect_cleanup
+%!   unlink (test_script);
+%!   rmdir (tmp_dir);
+%! end_unwind_protect
 
 ## Test function file execution
 %!test
+%! path_orig = path ();
 %! tmp_dir = tempname ();
-%! mkdir (tmp_dir);
 %! test_function = fullfile (tmp_dir, "tf.m");
-%! fid = fopen (test_function, "w");
-%! fprintf (fid, "function tf ()\n");
-%! fprintf (fid, "  addpath ('%s');\n", tmp_dir);
-%! fprintf (fid, "endfunction\n");
-%! fclose (fid);
-%! ## Check if temporary directory is on the loadpath.
-%! ## Function 'dir_in_loadpath' is broken for this use case, so code a test.
-%! dirs = strsplit (path (), pathsep ());
-%! tstval1 = any (strcmp (tmp_dir, dirs));
-%! run (test_function);
-%! dirs = strsplit (path (), pathsep ());
-%! tstval2 = any (strcmp (tmp_dir, dirs));
-%! unlink (test_function);
-%! rmdir (tmp_dir);
-%! rmpath (tmp_dir);
-%! assert (tstval1, false);
-%! assert (tstval2, true);
+%! unwind_protect
+%!   mkdir (tmp_dir);
+%!   fid = fopen (test_function, "w");
+%!   fprintf (fid, "function tf ()\n");
+%!   fprintf (fid, "  addpath ('%s');\n", tmp_dir);
+%!   fprintf (fid, "endfunction\n");
+%!   fclose (fid);
+%!   ## Check if temporary directory is on the loadpath.
+%!   ## Function 'dir_in_loadpath' is broken for this use case, so code a test.
+%!   dirs = strsplit (path (), pathsep ());
+%!   tstval1 = any (strcmp (tmp_dir, dirs));
+%!   run (test_function);
+%!   dirs = strsplit (path (), pathsep ());
+%!   tstval2 = any (strcmp (tmp_dir, dirs));
+%!   assert (tstval1, false);
+%!   assert (tstval2, true);
+%! unwind_protect_cleanup
+%!   unlink (test_function);
+%!   rmdir (tmp_dir);
+%!   path (path_orig);
+%! end_unwind_protect
 
 ## Test input validation
 %!error run ()
 %!error run ("a", "b")
 %!error <SCRIPT must exist> run ("__A_very_#unlikely#_file_name__")
diff --git a/test/bug-38691/bug-38691.tst b/test/bug-38691/bug-38691.tst
--- a/test/bug-38691/bug-38691.tst
+++ b/test/bug-38691/bug-38691.tst
@@ -12,25 +12,25 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 %!test
+%! path_orig = path ();
 %! unwind_protect
 %!   addpath dir1;
 %!   [d1_r, d1_f1, d1_f2, d1_f3] = func1 (0);
 %!   addpath dir2;
 %!   [d2_r, d2_f1, d2_f2, d2_f3] = func1 (0);
 %!   assert (d1_r, 0);
 %!   assert (d2_r, 1);
 %!   assert (d1_f1, "dir1/func1");
 %!   assert (d1_f2, "dir1/func2");
 %!   assert (d1_f3, "dir1/func3");
 %!   assert (d2_f1, "dir2/func1");
 %!   assert (d2_f2, "dir2/func2");
 %!   assert (d2_f3, "dir2/func3");
 %! unwind_protect_cleanup
-%!   rmpath dir1;
-%!   rmpath dir2;
+%!   path (path_orig);
 %! end_unwind_protect
