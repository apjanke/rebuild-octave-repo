# HG changeset patch
# User Carlo de Falco <cdf@users.sourceforge.net>
# Date 1387820333 -3600
#      Mon Dec 23 18:38:53 2013 +0100
# Node ID c9b4d3177de3b8059cbd63d12780ee9c91d06bb8
# Parent  d6aaf821cf8f699b98c006de5becb6e8cd37ed24
Don't count expected failures as passed tests.

* test.m: count expected failures separately from passed tests

* __run_test_suite__.m: report expected failures and skipped
  tests during progress

diff --git a/scripts/testfun/__run_test_suite__.m b/scripts/testfun/__run_test_suite__.m
--- a/scripts/testfun/__run_test_suite__.m
+++ b/scripts/testfun/__run_test_suite__.m
@@ -61,17 +61,17 @@ function __run_test_suite__ (fcndirs, fi
     for i = 1:length (fixedtestdirs)
       [p, n, xf, sk] = run_test_dir (fid, fixedtestdirs{i});
       dp += p;
       dn += n;
       dxf += xf;
       dsk += sk;
     endfor
     puts ("\nSummary:\n\n");
-    nfail = dn - dp;
+    nfail = dn - dp - dxf;
     printf ("  PASS    %6d\n", dp);
     printf ("  FAIL    %6d\n", nfail);
     if (dxf > 0)
       printf ("  XFAIL   %6d\n", dxf);
     endif
     if (dsk > 0)
       printf ("  SKIPPED %6d\n", dsk);
     endif
@@ -111,26 +111,32 @@ function __run_test_suite__ (fcndirs, fi
   catch
     page_screen_output (pso);
     warning (warn_state.state, "quiet");
     disp (lasterr ());
   end_try_catch
 endfunction
 
 function print_test_file_name (nm)
-  filler = repmat (".", 1, 55-length (nm));
+  filler = repmat (".", 1, 52-length (nm));
   printf ("  %s %s", nm, filler);
 endfunction
 
-function print_pass_fail (n, p)
-  if (n > 0)
+function print_pass_fail (p, n, xf, sk)
+  if ((n + sk) > 0)
     printf (" PASS %4d/%-4d", p, n);
-    nfail = n - p;
+    nfail = n - p - xf;
     if (nfail > 0)
-      printf (" FAIL %d", nfail);
+      printf (" FAIL  %-4d", nfail);
+    endif    
+    if (sk > 0)
+      printf (" (SKIP  %-4d)", sk);
+    endif
+    if (xf > 0)
+      printf (" (XFAIL %-4d)", xf);
     endif
   endif
   puts ("\n");
 endfunction
 
 function retval = has_functions (f)
   n = length (f);
   if (n > 3 && strcmpi (f((end-2):end), ".cc"))
@@ -185,17 +191,17 @@ function [dp, dn, dxf, dsk] = run_test_d
     for i = 1:length (lst)
       nm = lst(i).name;
       if (length (nm) > 4 && strcmpi (nm((end-3):end), ".tst"))
         p = n = xf = sk = 0;
         ffnm = fullfile (d, nm);
         if (has_tests (ffnm))
           print_test_file_name (nm);
           [p, n, xf, sk] = test (nm, "quiet", fid);
-          print_pass_fail (n, p);
+          print_pass_fail (p, n, xf, sk);
           files_with_tests(end+1) = ffnm;
         else
           files_with_no_tests(end+1) = ffnm;
         endif
         dp += p;
         dn += n;
         dxf += xf;
         dsk += sk;
@@ -236,17 +242,17 @@ function [dp, dn, dxf, dsk] = run_test_s
                 || strcmpi (nm((end-3):end), ".tst"))))
       p = n = xf = 0;
       ## Only run if it contains %!test, %!assert, %!error, %!fail, or %!warning
       if (has_tests (f))
         tmp = strrep (f, [topsrcdir, filesep], "");
         tmp = strrep (tmp, [topbuilddir, filesep], "");
         print_test_file_name (tmp);
         [p, n, xf, sk] = test (f, "quiet", fid);
-        print_pass_fail (n, p);
+        print_pass_fail (p, n, xf, sk);
         dp += p;
         dn += n;
         dxf += xf;
         dsk += sk;
         files_with_tests(end+1) = f;
       else
         ## To reduce the list length, only mark .cc files that contain
         ## DEFUN definitions.
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -260,16 +260,17 @@ function [__ret1, __ret2, __ret3, __ret4
     else
       __type = __block(1:__idx(1)-1);
       __code = __block(__idx(1):length (__block));
     endif
 
     ## Assume the block will succeed.
     __success = 1;
     __msg = [];
+    __isxtest = 0;
 
 ### DEMO
 
     ## If in __grabdemo mode, then don't process any other block type.
     ## So that the other block types don't have to worry about
     ## this __grabdemo mode, the demo block processor grabs all block
     ## types and skips those which aren't demo blocks.
 
@@ -487,20 +488,27 @@ function [__ret1, __ret2, __ret3, __ret4
         __xskip++;
         __istest = 0;
         __code = ""; # Skip the code.
         __msg = sprintf ("%sskipped test\n", __signal_skip);
       endif
 
 ### TEST
 
-    elseif (strcmp (__type, "test") || strcmp (__type, "xtest"))
+    elseif (strcmp (__type, "test"))
       __istest = 1;
       ## Code will be evaluated below.
 
+### XTEST
+
+    elseif (strcmp (__type, "xtest"))
+      __istest = 0;
+      __isxtest = 1;
+      ## Code will be evaluated below.
+
 ### Comment block.
 
     elseif (strcmp (__block(1:1), "#"))
       __istest = 0;
       __code = ""; # skip the code
 
 ### Unknown block.
 
@@ -524,16 +532,17 @@ function [__ret1, __ret2, __ret3, __ret4
         else
           error (["Functions embedded in %!test blocks are not allowed.\n", ...
                   "Use the %!function/%!endfunction syntax instead to define shared functions for testing.\n"]);
         endif
       catch
         if (strcmp (__type, "xtest"))
            __msg = sprintf ("%sknown failure\n%s", __signal_fail, lasterr ());
            __xfail++;
+           __success = 0;
         else
            __msg = sprintf ("%stest failed\n%s", __signal_fail, lasterr ());
            __success = 0;
         endif
         if (isempty (lasterr ()))
           error ("empty error text, probably Ctrl-C --- aborting");
         endif
       end_try_catch
@@ -553,31 +562,31 @@ function [__ret1, __ret2, __ret3, __ret4
       ## Show the variable context.
       if (! strcmp (__type, "error") && ! strcmp (__type, "testif")
           && ! all (__shared == " "))
         fputs (__fid, "shared variables ");
         eval (sprintf ("fdisp(__fid,bundle(%s));", __shared));
         fflush (__fid);
       endif
     endif
-    if (__success == 0)
+    if (__success == 0 && !__isxtest)
       __all_success = 0;
       ## Stop after one error if not in batch mode.
       if (! __batch)
         if (nargout > 0)
           __ret1 = __ret2 = 0;
         endif
         if (__close_fid)
           fclose (__fid);
         endif
         return;
       endif
     endif
-    __tests += __istest;
-    __successes += __success * __istest;
+    __tests += (__istest || __isxtest);
+    __successes += __success * (__istest || __isxtest);
   endfor
   ## Clear any test functions created
   eval (__clear, "");
 
   if (nargout == 0)
     if (__tests || __xfail || __xskip)
       if (__xfail)
         printf ("PASSES %d out of %d test%s (%d expected failure%s)\n",
