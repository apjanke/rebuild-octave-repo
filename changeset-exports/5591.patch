# HG changeset patch
# User dbateman
# Date 1136928034 0
#      Tue Jan 10 21:20:34 2006 +0000
# Node ID e7e45fe274f1908687cc62a684c95a9c27df9379
# Parent  1ad66ea35fe513079308c4475e7ad6349da4b5b1
[project @ 2006-01-10 21:20:34 by dbateman]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2006-01-10  David Bateman  <dbateman@free.fr>
+
+	* DLD-FUNCTIONS/sparse.cc (sparse_find): Use Sparse<T>::nonzero() 
+	rather than Sparse<T>::nnz(), due to possibility of overallocation
+	of memory.
+
 2005-12-14  John W. Eaton  <jwe@octave.org>
 
 	* oct-stream.cc (octave_stream::invalid_stream_error): Delete.
 	* oct-stream.h (octave_stream::stream_ok): Don't fail with error.
 
 2005-12-14  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/regexp.cc: New file.
diff --git a/src/DLD-FUNCTIONS/sparse.cc b/src/DLD-FUNCTIONS/sparse.cc
--- a/src/DLD-FUNCTIONS/sparse.cc
+++ b/src/DLD-FUNCTIONS/sparse.cc
@@ -509,17 +509,17 @@ but in general they will give the same r
 
   return retval;
 }
 
 static octave_value_list
 sparse_find (const SparseMatrix& v)
 {
   octave_value_list retval;
-  octave_idx_type nnz = v.nnz ();
+  octave_idx_type nnz = v.nonzero ();
   dim_vector dv = v.dims ();
   octave_idx_type nr = dv(0);
   octave_idx_type nc = dv (1);
 
   ColumnVector I (nnz), J (nnz);
   ColumnVector S (nnz);
 
   for (octave_idx_type i = 0, cx = 0; i < nc; i++) 
@@ -550,17 +550,17 @@ sparse_find (const SparseMatrix& v)
   retval(4)= (double) nc;
   return retval;
 }
 
 static octave_value_list
 sparse_find (const SparseComplexMatrix& v)
 {
   octave_value_list retval;
-  octave_idx_type nnz = v.nnz ();
+  octave_idx_type nnz = v.nonzero ();
   dim_vector dv = v.dims ();
   octave_idx_type nr = dv(0);
   octave_idx_type nc = dv (1);
 
   ColumnVector I (nnz), J (nnz);
   ComplexColumnVector S (nnz);
 
   for (octave_idx_type i = 0, cx = 0; i < nc; i++) 
@@ -591,17 +591,17 @@ sparse_find (const SparseComplexMatrix& 
   retval(4)= (double) nc;
   return retval;
 }
 
 static octave_value_list
 sparse_find (const SparseBoolMatrix& v)
 {
   octave_value_list retval;
-  octave_idx_type nnz = v.nnz ();
+  octave_idx_type nnz = v.nonzero ();
   dim_vector dv = v.dims ();
   octave_idx_type nr = dv(0);
   octave_idx_type nc = dv (1);
 
   ColumnVector I (nnz), J (nnz);
   ColumnVector S (nnz);
 
   for (octave_idx_type i = 0, cx = 0; i < nc; i++) 
