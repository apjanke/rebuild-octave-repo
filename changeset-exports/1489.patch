# HG changeset patch
# User jwe
# Date 812266706 0
#      Thu Sep 28 05:38:26 1995 +0000
# Node ID 3e705c864019b00e1c74f88a1e0b0a8b77849aaa
# Parent  89c5874780671e738fc9f065521a5b384262583b
[project @ 1995-09-28 05:38:26 by jwe]

diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -502,17 +502,21 @@ is printed.")
 
       if (error_state)
 	{
 	  status = -1;
 	  gripe_wrong_type_arg ("readdir", args(0));
 	}
       else
 	{
-	  DIR *dir = opendir (dirname);
+	  char *tmp = tilde_expand (dirname);
+
+	  DIR *dir = opendir (tmp);
+
+	  free (tmp);
 
 	  if (dir)
 	    {
 	      int count = 0;
 	      while (readdir (dir))
 		count++;
 
 	      rewinddir (dir);
@@ -574,20 +578,29 @@ otherwise prints an error message.")
   int status = 0;
 
   if (args.length () == 1)
     {
       const char *dirname = args(0).string_value ();
 
       if (error_state)
 	gripe_wrong_type_arg ("mkdir", args(0));
-      else if (mkdir (dirname, 0777) < 0)
+      else
 	{
-	  status = -1;
-	  error ("%s", strerror (errno));
+	  char *tmp = tilde_expand (dirname);
+
+	  int mkdir_retval = mkdir (tmp, 0777);
+
+	  free (tmp);
+
+	  if (mkdir_retval < 0)
+	    {
+	      status = -1;
+	      error ("%s", strerror (errno));
+	    }
 	}
     }
   else
     print_usage ("mkdir");
 
   if (status == 0)
     retval (0) = (double) status;
 
@@ -605,20 +618,29 @@ otherwise prints an error message.")
   int status = 0;
 
   if (args.length () == 1)
     {
       const char *dirname = args(0).string_value ();
 
       if (error_state)
 	gripe_wrong_type_arg ("rmdir", args(0));
-      else if (rmdir (dirname) < 0)
+      else
 	{
-	  status = -1;
-	  error ("%s", strerror (errno));
+	  char *tmp = tilde_expand (dirname);
+
+	  int rmdir_retval = rmdir (tmp);
+
+	  free (tmp);
+
+	  if (rmdir_retval < 0)
+	    {
+	      status = -1;
+	      error ("%s", strerror (errno));
+	    }
 	}
     }
   else
     print_usage ("rmdir");
 
   if (status == 0)
     retval (0) = (double) status;
 
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -35,84 +35,104 @@ Software Foundation, 59 Temple Place - S
 #include "pager.h"
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "utils.h"
 
 // Current error state.
 int error_state = 0;
 
-// XXX FIXME XXX
-int suppress_octave_error_messages = 0;
+// Tell the error handler whether to print messages, or just store
+// them for later.  Used for handling errors in eval() and
+// the `unwind_protect' statement.
+int buffer_error_messages;
+
+// The message buffer
+ostrstream *error_message_buffer = 0;
 
 static void
 verror (const char *name, const char *fmt, va_list args)
 {
   flush_output_to_pager ();
 
   int to_beep_or_not_to_beep = user_pref.beep_on_error && ! error_state;
 
-  if (to_beep_or_not_to_beep)
-    cerr << "\a";
-  if (name)
-    cerr << name << ": ";
-  cerr.vform (fmt, args);
-  cerr << endl;
-
   ostrstream output_buf;
 
   if (to_beep_or_not_to_beep)
     output_buf << "\a";
   if (name)
     output_buf << name << ": ";
   output_buf.vform (fmt, args);
   output_buf << endl << ends;
 
   char *msg = output_buf.str ();
 
-  maybe_write_to_diary_file (msg);
+  if (buffer_error_messages)
+    {
+      char *ptr = msg;
+
+      if (! error_message_buffer)
+	{
+	  error_message_buffer = new ostrstream;
+
+	  // XXX FIXME XXX -- this is ugly, but it prevents
+	  //
+	  //   eval ("error (\"msg\")", "error (__error_text__)");
+	  //
+	  // from printing `error: ' twice.  Assumes that the NAME we
+	  // have been given doesn't contain `:'.
+
+	  ptr = strchr (msg, ':') + 2;
+	  ptr = ptr ? ptr : msg;	  
+	}
+
+      *error_message_buffer << ptr;
+    }
+  else
+    {
+      maybe_write_to_diary_file (msg);
+      cerr << msg;
+    }
 
   delete [] msg;
 }
 
 // Note that we don't actually print any message if the error string
 // is just "" or "\n".  This allows error ("") and error ("\n") to
 // just set the error state.
 
 static void
 error_1 (const char *name, const char *fmt, va_list args)
 {
   if (error_state != -2)
     {
-      if (! suppress_octave_error_messages)
+      if (fmt)
 	{
-	  if (fmt)
+	  if (*fmt)
 	    {
-	      if (*fmt)
+	      int len = strlen (fmt);
+	      if (fmt[len - 1] == '\n')
 		{
-		  int len = strlen (fmt);
-		  if (fmt[len - 1] == '\n')
+		  if (len > 1)
 		    {
-		      if (len > 1)
-			{
-			  char *tmp_fmt = strsave (fmt);
-			  tmp_fmt[len - 1] = '\0';
-			  verror (name, tmp_fmt, args);
-			  delete [] tmp_fmt;
-			}
+		      char *tmp_fmt = strsave (fmt);
+		      tmp_fmt[len - 1] = '\0';
+		      verror (name, tmp_fmt, args);
+		      delete [] tmp_fmt;
+		    }
 
-		      error_state = -2;
-		    }
-		  else
-		    verror (name, fmt, args);
+		  error_state = -2;
 		}
+	      else
+		verror (name, fmt, args);
 	    }
-	  else
-	    panic ("error_1: invalid format");
 	}
+      else
+	panic ("error_1: invalid format");
 
       if (! error_state)
 	error_state = 1;
     }
 }
 
 void
 message (const char *name, const char *fmt, ...)
@@ -167,104 +187,89 @@ panic (const char *fmt, ...)
 
   va_list args;
   va_start (args, fmt);
   verror ("panic", fmt, args);
   va_end (args);
   abort ();
 }
 
-DEFUN ("error", Ferror, Serror, 10,
-  "error (MESSAGE): print MESSAGE and set the error state.\n\
-This should eventually take us up to the top level, possibly\n\
-printing traceback messages as we go.\n\
-\n\
-If MESSAGE ends in a newline character, traceback messages are not\n\
-printed.") 
+typedef void (*error_fun)(const char *, ...);
+
+extern Octave_object Fsprintf (const Octave_object&, int);
+
+static Octave_object
+handle_message (error_fun f, const char *msg, const Octave_object& args)
 {
   Octave_object retval;
 
-  const char *msg = "unspecified error";
-
   int nargin = args.length ();
 
-  if (nargin == 1 && args(0).is_defined ())
+  tree_constant arg = ((nargin > 1) ? Fsprintf (args, 1) : args) (0);
+
+  if (arg.is_defined ())
     {
-      if (args(0).is_string ())
+      if (arg.is_string ())
 	{
-	  msg = args(0).string_value ();
+	  msg = arg.string_value ();
 
 	  if (! msg)
 	    return retval;
 	}
-      else if (args(0).is_empty ())
+      else if (arg.is_empty ())
 	return retval;
     }
 
-  error (msg);
+// Ugh.
+
+  int len = strlen (msg);
+  if (msg[len - 1] == '\n')
+    {
+      if (len > 1)
+	{
+	  char *tmp_msg = strsave (msg);
+	  tmp_msg[len - 1] = '\0';
+	  f ("%s\n", tmp_msg);
+	  delete [] tmp_msg;
+	}
+    }
+  else
+    f ("%s", msg);
 
   return retval;
 }
 
-DEFUN ("warning", Fwarning, Swarning, 10,
-  "warning (MESSAGE): print a warning MESSAGE.\n\
+DEFUN ("error", Ferror, Serror, 10,
+  "error (FMT, ...): print message according to FMT and set error state.\n\
 \n\
-See also: error")
+This should eventually take us up to the top level, possibly\n\
+printing traceback messages as we go.\n\
+\n\
+If MESSAGE ends in a newline character, traceback messages are not\n\
+printed.\n\
+\n\
+See also: printf") 
 {
-  Octave_object retval;
-
-  const char *msg = "unspecified warning";
-
-  int nargin = args.length ();
+  return handle_message (error, "unspecified error", args);
+}
 
-  if (nargin == 1 && args(0).is_defined ())
-    {
-      if (args(0).is_string ())
-	{
-	  msg = args(0).string_value ();
-
-	  if (! msg || ! *msg)
-	    return retval;
-	}
-      else if (args(0).is_empty ())
-	return retval;
-    }
-
-  warning (msg);
-
-  return retval;
+DEFUN ("warning", Fwarning, Swarning, 10,
+  "warning (FMT, ...): print a warning message according to FMT.\n\
+\n\
+See also: error, printf")
+{
+  return handle_message (warning, "unspecified warning", args);
 }
 
 DEFUN ("usage", Fusage, Susage, 10,
-  "usage (MESSAGE): print a usage MESSAGE.\n\
+  "usage (FMT, ...): print a usage message according to FMT.\n\
 \n\
-See also: error")
+See also: error, printf")
 {
-  Octave_object retval;
-
-  const char *msg = "unknown";
-
-  int nargin = args.length ();
-
-  if (nargin == 1 && args(0).is_defined ())
-    {
-      if (args(0).is_string ())
-	{
-	  msg = args(0).string_value ();
-
-	  if (! msg || ! *msg)
-	    return retval;
-	}
-      else if (args(0).is_empty ())
-	return retval;
-    }
-
-  usage (msg);
-
-  return retval;
+  return handle_message (usage, "unknown", args);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/error.h b/src/error.h
--- a/src/error.h
+++ b/src/error.h
@@ -19,32 +19,39 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_error_h)
 #define octave_error_h 1
 
+class ostrstream;
+
 #define panic_impossible() \
   panic ("impossible state reached in file `%s' at line %d", \
 	 __FILE__, __LINE__)
 
 extern void message (const char *name, const char *fmt, ...);
 extern void usage (const char *fmt, ...);
 extern void warning (const char *fmt, ...);
 extern void error (const char *fmt, ...);
 extern void parse_error (const char *fmt, ...);
 extern void panic (const char *fmt, ...) NORETURN;
 
 // Current error state.
 extern int error_state;
 
-// XXX FIXME XXX
-extern int suppress_octave_error_messages;
+// Tell the error handler whether to print messages, or just store
+// them for later.  Used for handling errors in eval() and
+// the `unwind_protect' statement.
+extern int buffer_error_messages;
+
+// The message buffer
+extern ostrstream *error_message_buffer;
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -190,28 +190,34 @@ transpose, *not* the complex conjugate t
 static help_list keywords[] =
 {
   { "all_va_args",
     "Pass all unnamed arguments to another function call.", },
 
   { "break",
     "Exit the innermost enclosing while or for loop.", },
 
+  { "catch",
+    "begin the cleanup part of a try-catch block", },
+
   { "continue",
     "Jump to the end of the innermost enclosing while or for loop.", },
 
   { "else",
     "Alternate action for an if block.", },
 
   { "elseif",
     "Alternate conditional test for an if block.", },
 
   { "end",
     "Mark the end of any for, if, while, or function block.", },
 
+  { "end_try_catch",
+    "Mark the end of an try-catch block.", }, 
+
   { "end_unwind_protect",
     "Mark the end of an unwind_protect block.", }, 
 
   { "endfor",
     "Mark the end of a for loop.", },
 
   { "endfunction",
     "Mark the end of a function.", },
@@ -238,16 +244,19 @@ static help_list keywords[] =
     "Produce 3-D plots using gnuplot-like command syntax.", },
 
   { "if",
     "Begin an if block.", },
 
   { "return",
     "Return from a function.", },
 
+  { "try",
+    "Begin a try-catch block.", }, 
+
   { "unwind_protect",
     "Begin an unwind_protect block.", }, 
 
   { "unwind_protect_cleanup",
     "Begin the cleanup section of an unwind_protect block.", }, 
 
   { "while",
     "Begin a while loop.", },
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1087,16 +1087,35 @@ is_keyword (char *s)
       return CLEANUP;
     }
   else if (strcmp ("end_unwind_protect", s) == 0)
     {
       end_found = 1;
       yylval.tok_val = new token (token::unwind_protect_end, l, c);
       token_stack.push (yylval.tok_val);
     }
+  else if (strcmp ("try", s) == 0)
+    {
+      promptflag--;
+      yylval.tok_val = new token (l, c);
+      token_stack.push (yylval.tok_val);
+      return TRY;
+    }
+  else if (strcmp ("catch", s) == 0)
+    {
+      yylval.tok_val = new token (l, c);
+      token_stack.push (yylval.tok_val);
+      return CATCH;
+    }
+  else if (strcmp ("end_try_catch", s) == 0)
+    {
+      end_found = 1;
+      yylval.tok_val = new token (token::try_catch_end, l, c);
+      token_stack.push (yylval.tok_val);
+    }
   else if (strcmp ("all_va_args", s) == 0)
     {
       yylval.tok_val = new token (l, c);
       token_stack.push (yylval.tok_val);
       return ALL_VA_ARGS;
     }
 
   if (end_found)
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -974,28 +974,37 @@ string CATCH.")
   int nargin = args.length ();
 
   if (nargin > 0)
     {
       begin_unwind_frame ("Feval");
 
       if (nargin > 1)
 	{
-	  unwind_protect_int (suppress_octave_error_messages);
-	  suppress_octave_error_messages = 1;
+	  unwind_protect_int (buffer_error_messages);
+	  buffer_error_messages = 1;
 	}
 
       int parse_status = 0;
 
       retval = eval_string (args(0), parse_status, nargout);
 
       if (nargin > 1 && (parse_status != 0 || error_state))
 	{
 	  error_state = 0;
+
+	  // Set up for letting the user print any messages from
+	  // errors that occurred in the first part of this eval().
+
+	  buffer_error_messages = 0;
+	  bind_global_error_variable ();
+	  add_unwind_protect (clear_global_error_variable, 0);
+
 	  eval_string (args(1), parse_status, nargout);
+
 	  retval = Octave_object ();
 	}
 
       run_unwind_frame ("Feval");
     }
   else
     print_usage ("eval");
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -218,16 +218,17 @@ static tree_index_expression *make_index
 %token <tok_val> PLUS_PLUS MINUS_MINUS POW EPOW
 %token <tok_val> NUM IMAG_NUM
 %token <tok_val> NAME SCREW
 %token <tok_val> END
 %token <tok_val> PLOT
 %token <tok_val> TEXT STYLE
 %token <tok_val> FOR WHILE IF ELSEIF ELSE BREAK CONTINUE FUNC_RET
 %token <tok_val> UNWIND CLEANUP
+%token <tok_val> TRY CATCH
 %token <tok_val> GLOBAL
 %token <tok_val> TEXT_ID
 
 // Other tokens.
 %token LEXICAL_ERROR
 %token FCN SCREW_TWO
 %token ELLIPSIS
 %token ALL_VA_ARGS
@@ -607,16 +608,24 @@ command		: plot_command
 		| UNWIND optsep opt_list CLEANUP optsep opt_list END
 		  {
 		    if (check_end ($7, token::unwind_protect_end))
 		      ABORT_PARSE;
 
 		    $$ = new tree_unwind_protect_command ($3, $6, $1->line (),
 							  $1->column ());
 		  }
+		| TRY optsep opt_list CATCH optsep opt_list END
+		  {
+		    if (check_end ($7, token::try_catch_end))
+		      ABORT_PARSE;
+
+		    $$ = new tree_try_catch_command ($3, $6, $1->line (),
+						     $1->column ());
+		  }
 		| WHILE expression optsep opt_list END
 		  {
 		    maybe_warn_assign_as_truth_value ($2);
 		    if (check_end ($5, token::while_end))
 		      ABORT_PARSE;
 		    looping--;
 		    $$ = new tree_while_command ($2, $4, $1->line (),
 						 $1->column ());
@@ -1313,16 +1322,24 @@ check_end (token *tok, token::end_tok_ty
 	case token::function_end:
 	  end_error ("function", ettype, l, c);
 	  break;
 
 	case token::if_end:
 	  end_error ("if", ettype, l, c);
 	  break;
 
+	case token::try_catch_end:
+	  end_error ("try", ettype, l, c);
+	  break;
+
+	case token::unwind_protect_end:
+	  end_error ("unwind_protect", ettype, l, c);
+	  break;
+
 	case token::while_end:
 	  end_error ("while", ettype, l, c);
 	  break;
 
 	default:
 	  panic_impossible ();
 	  break;
 	}
diff --git a/src/pt-cmd.cc b/src/pt-cmd.cc
--- a/src/pt-cmd.cc
+++ b/src/pt-cmd.cc
@@ -633,16 +633,133 @@ tree_if_command::print_code (ostream& os
 
   print_code_indent (os);
 
   os << "endif";
 }
 
 // Simple exception handling.
 
+tree_try_catch_command::~tree_try_catch_command (void)
+{
+  delete try_code;
+  delete catch_code;
+}
+
+static void
+do_catch_code (void *ptr)
+{
+  tree_statement_list *list = (tree_statement_list *) ptr;
+
+  // Set up for letting the user print any messages from errors that
+  // occurred in the body of the try_catch statement.
+
+  buffer_error_messages = 0;
+  bind_global_error_variable ();
+  add_unwind_protect (clear_global_error_variable, 0);
+
+  // Similarly, if we have seen a return or break statement, allow all
+  // the catch code to run before returning or handling the break.
+  // We don't have to worry about continue statements because they can
+  // only occur in loops.
+
+  unwind_protect_int (returning);
+  returning = 0;
+
+  unwind_protect_int (breaking);
+  breaking = 0;
+
+  if (list)
+    list->eval (1);
+
+  // This is the one for breaking.  (The unwind_protects are popped
+  // off the stack in the reverse of the order they are pushed on).
+
+  // XXX FIXME XXX -- inside a try-catch, should break work like
+  // a return, or just jump to the end of the try_catch block?
+  // The following code makes it just jump to the end of the block.
+
+  run_unwind_protect ();
+  if (breaking)
+    breaking--;
+
+  // This is the one for returning.
+
+  if (returning)
+    discard_unwind_protect ();
+  else
+    run_unwind_protect ();
+
+  run_unwind_protect ();
+}
+
+void
+tree_try_catch_command::eval (void)
+{
+  begin_unwind_frame ("tree_try_catch::eval");
+
+  add_unwind_protect (do_catch_code, catch_code);
+
+  if (catch_code)
+    {
+      unwind_protect_int (buffer_error_messages);
+      buffer_error_messages = 1;
+    }
+
+  if (try_code)
+    try_code->eval (1);
+
+  if (catch_code && error_state)
+    {
+      error_state = 0;
+      run_unwind_frame ("tree_try_catch::eval");
+    }
+  else
+    {
+      error_state = 0;
+      discard_unwind_frame ("tree_try_catch::eval");
+    }
+}
+
+void
+tree_try_catch_command::print_code (ostream& os)
+{
+  print_code_indent (os);
+
+  os << "try_catch";
+
+  print_code_new_line (os);
+
+  if (try_code)
+    {
+      increment_indent_level ();
+      try_code->print_code (os);
+      decrement_indent_level ();
+    }
+
+  print_code_indent (os);
+
+  os << "catch_code";
+
+  print_code_new_line (os);
+
+  if (catch_code)
+    {
+      increment_indent_level ();
+      catch_code->print_code (os);
+      decrement_indent_level ();
+    }
+
+  print_code_indent (os);
+
+  os << "end_try_catch";
+}
+
+// Simple exception handling.
+
 tree_unwind_protect_command::~tree_unwind_protect_command (void)
 {
   delete unwind_protect_code;
   delete cleanup_code;
 }
 
 static void
 do_unwind_protect_cleanup_code (void *ptr)
@@ -697,33 +814,22 @@ do_unwind_protect_cleanup_code (void *pt
     discard_unwind_protect ();
   else
     run_unwind_protect ();
 }
 
 void
 tree_unwind_protect_command::eval (void)
 {
-  begin_unwind_frame ("tree_unwind_protect::eval");
-
   add_unwind_protect (do_unwind_protect_cleanup_code, cleanup_code);
 
-  if (cleanup_code)
-    {
-      unwind_protect_int (suppress_octave_error_messages);
-      suppress_octave_error_messages = 1;
-    }
-
   if (unwind_protect_code)
     unwind_protect_code->eval (1);
 
-  if (cleanup_code && error_state)
-    error_state = 0;
-
-  run_unwind_frame ("tree_unwind_protect::eval");
+  run_unwind_protect ();
 }
 
 void
 tree_unwind_protect_command::print_code (ostream& os)
 {
   print_code_indent (os);
 
   os << "unwind_protect";
diff --git a/src/pt-cmd.h b/src/pt-cmd.h
--- a/src/pt-cmd.h
+++ b/src/pt-cmd.h
@@ -42,16 +42,17 @@ class tree_return_list;
 class tree_constant;
 class symbol_record;
 
 class tree_command;
 class tree_global_command;
 class tree_while_command;
 class tree_for_command;
 class tree_if_command;
+class tree_try_catch_command;
 class tree_unwind_protect_command;
 class tree_break_command;
 class tree_continue_command;
 class tree_return_command;
 
 #include "tree-base.h"
 
 // A base class for commands.
@@ -238,16 +239,48 @@ public:
 
   void print_code (ostream& os);
 
 private:
   tree_statement_list *unwind_protect_code;
   tree_statement_list *cleanup_code;
 };
 
+// Simple exception handling.
+
+class
+tree_try_catch_command : public tree_command
+{
+public:
+  tree_try_catch_command (int l = -1, int c = -1) : tree_command (l, c)
+    {
+      try_code = 0;
+      catch_code = 0;
+    }
+
+  tree_try_catch_command (tree_statement_list *tc,
+			       tree_statement_list *cc,
+			       int l = -1, int c = -1)
+    : tree_command (l, c)
+      {
+	try_code = tc;
+	catch_code = cc;
+      }
+
+  ~tree_try_catch_command (void);
+
+  void eval (void);
+
+  void print_code (ostream& os);
+
+private:
+  tree_statement_list *try_code;
+  tree_statement_list *catch_code;
+};
+
 // Break.
 
 class
 tree_break_command : public tree_command
 {
 public:
   tree_break_command (int l = -1, int c = -1) : tree_command (l, c) { }
 
diff --git a/src/token.h b/src/token.h
--- a/src/token.h
+++ b/src/token.h
@@ -46,16 +46,17 @@ public:
 
   enum end_tok_type
     {
       simple_end,
       for_end,
       function_end,
       if_end,
       while_end,
+      try_catch_end,
       unwind_protect_end,
     };
 
   enum plot_tok_type
     {
       replot = 1,
       two_dee = 2,
       three_dee = 3,
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1474,16 +1474,41 @@ bind_ans (const tree_constant& val, int 
   // tree_simple_assignment_expression along with a flag to not delete
   // it seems to create a memory leak.  Hmm.
 
   tree_simple_assignment_expression tmp_ass (ans_id, tmp, 0, 1);
 
   tmp_ass.eval (print);
 }
 
+void
+bind_global_error_variable (void)
+{
+  *error_message_buffer << ends;
+
+  char *error_text = error_message_buffer->str ();
+
+  bind_builtin_variable ("__error_text__", error_text, 1);
+
+  delete [] error_text;
+
+  delete error_message_buffer;
+
+  error_message_buffer = 0;
+}
+
+void
+clear_global_error_variable (void *)
+{
+  delete error_message_buffer;
+  error_message_buffer = 0;
+
+  bind_builtin_variable ("__error_text__", "", 1);
+}
+
 // Give a global variable a definition.  This will insert the symbol
 // in the global table if necessary.
 
 // How is this different than install_builtin_variable?  Are both
 // functions needed?
 
 void
 bind_builtin_variable (const char *varname, tree_constant *val,
@@ -1600,16 +1625,23 @@ install_builtin_variables (void)
 	  beep_on_error,
     "if true, beep before printing error messages");
 
   DEFVAR ("completion_append_char", SBV_completion_append_char, " ",
 	  0, sv_completion_append_char,
     "the string to append after successful command-line completion\n\
 attempts");
 
+  DEFCONST ("error_text", SBV_current_error_text, "", 0, 0,
+    "the text of error messages that would have been printed in the
+body of the most recent unwind_protect statement or the TRY part of\n\
+the most recent eval() command.  Outside of unwind_protect and\n\
+eval(), or if no error has ocurred within them, the value of\n\
+__error_text__ is guaranteed to be the empty string.");
+
   DEFVAR ("default_return_value", SBV_default_return_value, Matrix (),
 	  0, 0,
     "the default for value for unitialized variables returned from\n\
 functions.  Only used if the variable initialize_return_values is\n\
 set to \"true\".");
 
   DEFVAR ("default_save_format", SBV_default_save_format, "ascii",
 	  0, sv_default_save_format,
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -103,16 +103,20 @@ extern void alias_builtin (const char *a
 
 #if 0
 extern void bind_nargin_and_nargout (symbol_table *sym_tab,
 				     int nargin, int nargout);
 #endif
 
 extern void bind_ans (const tree_constant& val, int print);
 
+extern void bind_global_error_variable (void);
+
+extern void clear_global_error_variable (void *);
+
 extern void bind_builtin_variable (const char *, tree_constant *,
 				   int protect = 0, int eternal = 0,
 				   sv_Function f = (sv_Function) 0,
 				   const char *help = 0);
 
 extern void bind_builtin_variable (const char *, const tree_constant&,
 				   int protect = 0, int eternal = 0,
 				   sv_Function f = (sv_Function) 0,
