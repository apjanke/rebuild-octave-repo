# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1351021287 14400
#      Tue Oct 23 15:41:27 2012 -0400
# Node ID 427020b2ceaf1e63bd72209771fa3e68173e7fce
# Parent  17b04c4c268d973967bf921b9389751f543a3604
# Parent  3c5553180dd15662bef68600236810272c7e6faf
Merge in Erik's changes

diff --git a/libgui/src/documentation-dockwidget.cc b/libgui/src/documentation-dockwidget.cc
--- a/libgui/src/documentation-dockwidget.cc
+++ b/libgui/src/documentation-dockwidget.cc
@@ -25,20 +25,23 @@ along with Octave; see the file COPYING.
 #endif
 
 #include "documentation-dockwidget.h"
 
 documentation_dock_widget::documentation_dock_widget (QWidget *p)
   : QDockWidget (p)
 {
   setObjectName ("DocumentationDockWidget");
+  setWindowIcon (QIcon(":/actions/icons/logo.png"));
   setWindowTitle (tr ("Documentation"));
 
   connect (this, SIGNAL (visibilityChanged (bool)),
            this, SLOT (handle_visibility_changed (bool)));
+  // topLevelChanged is emitted when floating property changes (floating = true)
+  connect (this, SIGNAL (topLevelChanged(bool)), this, SLOT(top_level_changed(bool)));
 
   _webinfo = new webinfo (this);
   setWidget (_webinfo);
 }
 
 void
 documentation_dock_widget::handle_visibility_changed (bool visible)
 {
@@ -47,8 +50,19 @@ documentation_dock_widget::handle_visibi
 }
 
 void
 documentation_dock_widget::closeEvent (QCloseEvent *e)
 {
   emit active_changed (false);
   QDockWidget::closeEvent (e);
 }
+
+// slot for signal that is emitted when floating property changes
+void
+documentation_dock_widget::top_level_changed (bool floating)
+{
+  if(floating)
+    {
+      setWindowFlags(Qt::Window);  // make a window from the widget when floating
+      show();                      // make it visible again since setWindowFlags hides it
+    }
+}
diff --git a/libgui/src/documentation-dockwidget.h b/libgui/src/documentation-dockwidget.h
--- a/libgui/src/documentation-dockwidget.h
+++ b/libgui/src/documentation-dockwidget.h
@@ -31,16 +31,18 @@ class documentation_dock_widget : public
 {
   Q_OBJECT
   public:
   documentation_dock_widget (QWidget *parent = 0);
 
 public slots:
   /** Slot to steer changing visibility from outside. */
   void handle_visibility_changed (bool visible);
+  /** Slot when floating property changes */
+  void top_level_changed (bool floating);
 
 signals:
   /** Custom signal that tells if a user has clicked away that dock widget. */
   void active_changed (bool active);
 
 protected:
   void closeEvent (QCloseEvent *event);
 
diff --git a/libgui/src/files-dockwidget.cc b/libgui/src/files-dockwidget.cc
--- a/libgui/src/files-dockwidget.cc
+++ b/libgui/src/files-dockwidget.cc
@@ -34,16 +34,17 @@ along with Octave; see the file COPYING.
 #include <QProcess>
 #include <QDebug>
 #include <QHeaderView>
 
 files_dock_widget::files_dock_widget (QWidget *p)
   : QDockWidget (p)
 {
   setObjectName ("FilesDockWidget");
+  setWindowIcon (QIcon(":/actions/icons/logo.png"));
   setWindowTitle (tr ("Current Directory"));
   setWidget (new QWidget (this));
 
   // Create a toolbar
   _navigation_tool_bar = new QToolBar ("", widget ());
   _navigation_tool_bar->setAllowedAreas (Qt::TopToolBarArea);
   _navigation_tool_bar->setMovable (false);
   _navigation_tool_bar->setIconSize (QSize (20, 20));
@@ -110,16 +111,18 @@ files_dock_widget::files_dock_widget (QW
            this, SLOT (handle_directory_entered ()));
 
   QCompleter *
     completer = new QCompleter (_file_system_model, this);
   _current_directory->setCompleter (completer);
 
   connect (this, SIGNAL (visibilityChanged (bool)),
            this, SLOT (handle_visibility_changed (bool)));
+  // topLevelChanged is emitted when floating property changes (floating = true)
+  connect (this, SIGNAL (topLevelChanged(bool)), this, SLOT(top_level_changed(bool)));
 
   setFocusProxy (_current_directory);
 }
 
 files_dock_widget::~files_dock_widget ()
 {
   QSettings *settings = resource_manager::get_settings ();
   int sort_column = _file_tree_view->header ()->sortIndicatorSection ();
@@ -209,8 +212,19 @@ files_dock_widget::handle_visibility_cha
 }
 
 void
 files_dock_widget::closeEvent (QCloseEvent *e)
 {
   emit active_changed (false);
   QDockWidget::closeEvent (e);
 }
+
+// slot for signal that is emitted when floating property changes
+void
+files_dock_widget::top_level_changed (bool floating)
+{
+  if(floating)
+    {
+      setWindowFlags(Qt::Window);  // make a window from the widget when floating
+      show();                      // make it visible again since setWindowFlags hides it
+    }
+}
diff --git a/libgui/src/files-dockwidget.h b/libgui/src/files-dockwidget.h
--- a/libgui/src/files-dockwidget.h
+++ b/libgui/src/files-dockwidget.h
@@ -66,16 +66,19 @@ public slots:
   void display_directory (const QString& directory);
 
   /** Tells the widget to react on changed settings. */
   void notice_settings ();
 
   /** Slot to steer changing visibility from outside. */
   void handle_visibility_changed (bool visible);
 
+  /** Slot when floating property changes */
+  void top_level_changed (bool floating);
+
 signals:
   /** Emitted, whenever the user requested to open a file. */
   void open_file (const QString& fileName);
 
   /** Emitted, whenever the currently displayed directory changed. */
   void displayed_directory_changed (const QString& directory);
 
   /** Custom signal that tells if a user has clicke away that dock widget. */
diff --git a/libgui/src/history-dockwidget.cc b/libgui/src/history-dockwidget.cc
--- a/libgui/src/history-dockwidget.cc
+++ b/libgui/src/history-dockwidget.cc
@@ -56,16 +56,17 @@ history_dock_widget::construct ()
   _history_list_view->setSelectionMode (QAbstractItemView::ExtendedSelection);
   _history_list_view->setContextMenuPolicy(Qt::CustomContextMenu);
   connect(_history_list_view, SIGNAL(customContextMenuRequested(const QPoint &)), this, SLOT(ctxMenu(const QPoint &)));
 
   _filter_line_edit = new QLineEdit (this);
   _filter_line_edit->setStatusTip (tr ("Enter text to filter the command history."));
   QVBoxLayout *vbox_layout = new QVBoxLayout ();
 
+  setWindowIcon (QIcon(":/actions/icons/logo.png"));
   setWindowTitle (tr ("Command History"));
   setWidget (new QWidget ());
 
   vbox_layout->addWidget (_history_list_view);
   vbox_layout->addWidget (_filter_line_edit);
   vbox_layout->setMargin (2);
 
   widget ()->setLayout (vbox_layout);
@@ -80,16 +81,19 @@ history_dock_widget::construct ()
            this,
            SLOT (handle_double_click (QModelIndex)));
 
   connect (this,
            SIGNAL (visibilityChanged (bool)),
            this,
            SLOT (handle_visibility_changed (bool)));
 
+  // topLevelChanged is emitted when floating property changes (floating = true)
+  connect (this, SIGNAL (topLevelChanged(bool)), this, SLOT(top_level_changed(bool)));
+
   _update_history_model_timer.setInterval (200);
   _update_history_model_timer.setSingleShot (true);
 
   connect (&_update_history_model_timer,
            SIGNAL (timeout ()),
            this,
            SLOT (request_history_model_update ()));
 
@@ -158,16 +162,27 @@ history_dock_widget::reset_model ()
 
 void
 history_dock_widget::closeEvent (QCloseEvent *e)
 {
   emit active_changed (false);
   QDockWidget::closeEvent (e);
 }
 
+// slot for signal that is emitted when floating property changes
+void
+history_dock_widget::top_level_changed (bool floating)
+{
+  if(floating)
+    {
+      setWindowFlags(Qt::Window);  // make a window from the widget when floating
+      show();                      // make it visible again since setWindowFlags hides it
+    }
+}
+
 void
 history_dock_widget::update_history_callback (void)
 {
   static bool scroll_window = false;
 
   // Determine the client's (our) history length and the one of the server.
   int clientHistoryLength = _history_model->rowCount ();
   int serverHistoryLength = command_history::length ();
diff --git a/libgui/src/history-dockwidget.h b/libgui/src/history-dockwidget.h
--- a/libgui/src/history-dockwidget.h
+++ b/libgui/src/history-dockwidget.h
@@ -35,16 +35,18 @@ class history_dock_widget : public QDock
   Q_OBJECT
   public:
   history_dock_widget (QWidget *parent = 0);
 
 public slots:
   void handle_visibility_changed (bool visible);
   void request_history_model_update ();
   void reset_model ();
+  /** Slot when floating property changes */
+  void top_level_changed (bool floating);
 
 signals:
   void information (const QString& message);
 
   /** Emitted, whenever the user double-clicked a command in the history. */
   void command_double_clicked (const QString& command);
 
   /** Custom signal that tells if a user has clicked away that dock widget. */
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -347,16 +347,27 @@ file_editor::handle_tab_close_request ()
   if (fileEditorTab)
     if (fileEditorTab->close ())
       {
         _tab_widget->removeTab (_tab_widget->indexOf (fileEditorTab));
         delete fileEditorTab;
       }
 }
 
+// slot for signal that is emitted when floating property changes
+void
+file_editor::top_level_changed (bool floating)
+{
+  if(floating)
+    {
+      setWindowFlags(Qt::Window);  // make a window from the widget when floating
+      show();                      // make it visible again since setWindowFlag hides it
+    }
+}
+
 void
 file_editor::active_tab_changed (int)
 {
   handle_editor_state_changed ();
 }
 
 void
 file_editor::handle_editor_state_changed ()
@@ -577,21 +588,22 @@ file_editor::construct ()
   connect (uncomment_selection_action,
            SIGNAL (triggered ()), this, SLOT (request_uncomment_selected_text ()));
   connect (find_action,
            SIGNAL (triggered ()), this, SLOT (request_find ()));
   connect (_tab_widget,
            SIGNAL (tabCloseRequested (int)), this, SLOT (handle_tab_close_request (int)));
   connect (_tab_widget,
            SIGNAL (currentChanged(int)), this, SLOT (active_tab_changed (int)));
+  // topLevelChanged is emitted when floating property changes (floating = true)
+  connect (this, SIGNAL (topLevelChanged(bool)), this, SLOT(top_level_changed(bool)));
 
   resize (500, 400);
-  setWindowIcon (QIcon::fromTheme ("accessories-text-editor",
-                                   editor_style->standardIcon (QStyle::SP_FileIcon)));
-  setWindowTitle ("Octave Editor");
+  setWindowIcon (QIcon(":/actions/icons/logo.png"));
+  setWindowTitle ("Editor");
 
   //restore previous session
   QSettings *settings = resource_manager::get_settings ();
   if (settings->value ("editor/restoreSession",true).toBool ())
     {
       QStringList sessionFileNames = settings->value("editor/savedSessionTabs", QStringList()).toStringList ();
 
       for (int n=0; n < sessionFileNames.count (); ++n)
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -88,16 +88,18 @@ public slots:
   void request_uncomment_selected_text ();
   void request_find ();
 
   void handle_file_name_changed (const QString& fileName);
   void handle_tab_close_request (int index);
   void handle_tab_close_request ();
   void active_tab_changed (int index);
   void handle_editor_state_changed ();
+  /** Slot when floating property changes */
+  void top_level_changed (bool floating);
 
   /** Tells the editor to react on changed settings. */
   void notice_settings ();
 
 private:
   void construct ();
   void add_file_editor_tab(file_editor_tab *f);
   file_editor_tab *active_editor_tab();
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -392,25 +392,30 @@ void
 main_window::read_settings ()
 {
   QSettings *settings = resource_manager::get_settings ();
 
   // FIXME -- what should happen if settings is 0?
 
   restoreState (settings->value ("MainWindow/windowState").toByteArray ());
   settings->beginGroup ("DockWidgets");
-  // restoring the geometry of all widgets
+  // restoring the geometry of all dock-widgets
   foreach (QObject *obj, children ())
     {
       QString name = obj->objectName ();
-      if (obj->isWidgetType () && ! name.isEmpty ())
+      if (obj->inherits("QDockWidget") && ! name.isEmpty ())
         {
-          QWidget *widget = qobject_cast<QWidget *> (obj);
+          QDockWidget *widget = qobject_cast<QDockWidget *> (obj);
           QVariant val = settings->value (name);
           widget->restoreGeometry (val.toByteArray ());
+          bool floating = settings->value (name+"Floating",false).toBool ();
+          bool visible = settings->value (name+"Visible",true).toBool ();
+          if (floating)
+            widget->setWindowFlags (Qt::Window); // if floating, make window from widget
+          widget->setVisible (visible);          // make widget visible if desired (setWindowFlags hides widget)
         }
     }
   settings->endGroup();
   restoreGeometry (settings->value ("MainWindow/geometry").toByteArray ());
   // restore the list of the last directories
   QStringList curr_dirs = settings->value ("MainWindow/current_directory_list").toStringList ();
   for (int i=0; i < curr_dirs.size (); i++)
     {
@@ -422,30 +427,35 @@ main_window::read_settings ()
 void
 main_window::write_settings ()
 {
   QSettings *settings = resource_manager::get_settings ();
 
   // FIXME -- what should happen if settings is 0?
 
   settings->setValue ("MainWindow/geometry", saveGeometry ());
-  settings->setValue ("MainWindow/windowState", saveState ());
   settings->beginGroup ("DockWidgets");
   // saving the geometry of all widgets
   foreach (QObject *obj, children())
     {
       QString name = obj->objectName ();
-      if (obj->isWidgetType () && ! name.isEmpty ())
+      if (obj->inherits ("QDockWidget") && ! name.isEmpty ())
         {
-          QWidget *widget = qobject_cast<QWidget *>(obj);
+          QDockWidget *widget = qobject_cast<QDockWidget *> (obj);
           settings->setValue (name, widget->saveGeometry ());
-        }
+          bool floating = widget->isFloating ();
+          bool visible = widget->isVisible ();
+          settings->setValue (name+"Floating",floating);  // store floating state
+          settings->setValue (name+"Visible",visible);    // store visibility
+          if (floating)
+            widget->setWindowFlags(Qt::Widget); // if floating, recover the widget state such that the widget's
+        }                                       // state is correctly saved by the saveSate () below
     }
-
   settings->endGroup();
+  settings->setValue ("MainWindow/windowState", saveState ());
   // write the list of recent used directories
   QStringList curr_dirs;
   for (int i=0; i<_current_directory_combo_box->count (); i++)
     {
       curr_dirs.append (_current_directory_combo_box->itemText (i));
     }
   settings->setValue ("MainWindow/current_directory_list",curr_dirs);
   settings->sync ();
diff --git a/libgui/src/terminal-dockwidget.cc b/libgui/src/terminal-dockwidget.cc
--- a/libgui/src/terminal-dockwidget.cc
+++ b/libgui/src/terminal-dockwidget.cc
@@ -25,13 +25,27 @@ along with Octave; see the file COPYING.
 #endif
 
 #include "terminal-dockwidget.h"
 
 terminal_dock_widget::terminal_dock_widget (QTerminal *terminal, QWidget *p)
   : QDockWidget (p)
 {
   setObjectName ("TerminalDockWidget");
+  setWindowIcon (QIcon(":/actions/icons/logo.png"));
   setWindowTitle (tr ("Command Window"));
   setWidget (terminal);
 
   connect (this, SIGNAL (visibilityChanged (bool)), this, SLOT (handle_visibility_changed (bool)));
+  // topLevelChanged is emitted when floating property changes (floating = true)
+  connect (this, SIGNAL (topLevelChanged(bool)), this, SLOT(top_level_changed(bool)));
 }
+
+// slot for signal that is emitted when floating property changes
+void
+terminal_dock_widget::top_level_changed (bool floating)
+{
+  if(floating)
+    {
+      setWindowFlags(Qt::Window);  // make a window from the widget when floating
+      show();                      // make it visible again since setWindowFlags hides it
+    }
+}
diff --git a/libgui/src/terminal-dockwidget.h b/libgui/src/terminal-dockwidget.h
--- a/libgui/src/terminal-dockwidget.h
+++ b/libgui/src/terminal-dockwidget.h
@@ -36,11 +36,13 @@ signals:
   void active_changed (bool active);
 
 public slots:
   void handle_visibility_changed (bool visible)
   {
     if (visible)
       emit active_changed (true);
   }
+  /** Slot when floating property changes */
+  void top_level_changed (bool floating);
 };
 
 #endif // TERMINALDOCKWIDGET_H
diff --git a/libgui/src/workspace-view.cc b/libgui/src/workspace-view.cc
--- a/libgui/src/workspace-view.cc
+++ b/libgui/src/workspace-view.cc
@@ -30,16 +30,17 @@ along with Octave; see the file COPYING.
 #include <QHBoxLayout>
 #include <QVBoxLayout>
 #include <QPushButton>
 
 workspace_view::workspace_view (QWidget *p)
   : QDockWidget (p)
 {
   setObjectName ("WorkspaceView");
+  setWindowIcon (QIcon(":/actions/icons/logo.png"));
   setWindowTitle (tr ("Workspace"));
 
   // Create a new workspace model.
   _workspace_model = new workspace_model ();
 
   _workspace_tree_view = new QTreeView (this);            // Create a new tree view.
   _workspace_tree_view->setHeaderHidden (false);          // Do not show header columns.
   _workspace_tree_view->setAlternatingRowColors (true);   // Activate alternating row colors.
@@ -83,16 +84,19 @@ workspace_view::workspace_view (QWidget 
   connect (_workspace_tree_view, SIGNAL (collapsed (QModelIndex)),
            this, SLOT (collapse_requested (QModelIndex)));
   connect (_workspace_tree_view, SIGNAL (expanded (QModelIndex)),
            this, SLOT (expand_requested (QModelIndex)));
 
   connect (_workspace_tree_view, SIGNAL (doubleClicked (QModelIndex)),
            this, SLOT (item_double_clicked (QModelIndex)));
 
+  // topLevelChanged is emitted when floating property changes (floating = true)
+  connect (this, SIGNAL (topLevelChanged(bool)), this, SLOT(top_level_changed(bool)));
+
 }
 
 workspace_view::~workspace_view ()
 {
   QSettings *settings = resource_manager::get_settings ();
 
   // FIXME -- what should happen if settings is 0?
 
@@ -210,8 +214,19 @@ workspace_view::item_double_clicked (QMo
 }
 
 void
 workspace_view::closeEvent (QCloseEvent *e)
 {
   emit active_changed (false);
   QDockWidget::closeEvent (e);
 }
+
+// slot for signal that is emitted when floating property changes
+void
+workspace_view::top_level_changed (bool floating)
+{
+  if(floating)
+    {
+      setWindowFlags(Qt::Window);  // make a window from the widget when floating
+      show();                      // make it visible again since setWindowFlags hides it
+    }
+}
diff --git a/libgui/src/workspace-view.h b/libgui/src/workspace-view.h
--- a/libgui/src/workspace-view.h
+++ b/libgui/src/workspace-view.h
@@ -34,16 +34,18 @@ class workspace_view : public QDockWidge
   Q_OBJECT
   public:
   workspace_view (QWidget * parent = 0);
   ~workspace_view ();
 
 public slots:
   void handle_visibility_changed (bool visible);
   void model_changed ();
+  /** Slot when floating property changes */
+  void top_level_changed (bool floating);
 
 signals:
   /** Custom signal that tells if a user has clicke away that dock widget. */
   void active_changed (bool active);
 
 protected:
   void closeEvent (QCloseEvent *event);
 
