# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1251402189 14400
#      Thu Aug 27 15:43:09 2009 -0400
# Node ID bdcfb756d721d173e387cebc1724237f656e98da
# Parent  3d0d2bda3a0fccfe99d04b64e7488daa6d81a56f
improve error messages for ambiguous graphics property names

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-08-27  John W. Eaton  <jwe@octave.org>
+
+	* str-vec.cc, str-vec.h (string_vector::string_vector (const
+	std::set<std::string>&)): New constructor.
+
 2009-08-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* mx-inlines.cc (DEFCMPLXCMOP): Remove.
 	* oct-cmplx.h (operator <, operator >): Remove definitions.
 	(DEF_COMPLEXR_COMP): New macro. Instantiate for <, >, <=, >=.
 	* mx-op-defs.h (MM_CMP_OP, MS_CMP_OP, SM_CMP_OP,
 	NDND_CMP_OP, NDS_CMP_OP, SND_CMP_OP): Replace by one-liners. Remove
 	unused parameters.
diff --git a/liboctave/str-vec.cc b/liboctave/str-vec.cc
--- a/liboctave/str-vec.cc
+++ b/liboctave/str-vec.cc
@@ -35,31 +35,49 @@ 90, 91, 95, 1996 Free Software Foundatio
 
 #include <iostream>
 #include <string>
 
 #include "cmd-edit.h"
 #include "lo-utils.h"
 #include "str-vec.h"
 
+// FIXME -- isn't there some STL trick that could be used to make this
+// work for all STL containers of std::string objects?
+
 string_vector::string_vector (const std::list<std::string>& lst)
   : Array<std::string> ()
 {
   size_t n = lst.size ();
 
   resize (n);
 
   octave_idx_type i = 0;
 
   for (std::list<std::string>::const_iterator p = lst.begin ();
        p != lst.end ();
        p++)
     elem(i++) = *p;
 }
 
+string_vector::string_vector (const std::set<std::string>& lst)
+  : Array<std::string> ()
+{
+  size_t n = lst.size ();
+
+  resize (n);
+
+  octave_idx_type i = 0;
+
+  for (std::set<std::string>::const_iterator p = lst.begin ();
+       p != lst.end ();
+       p++)
+    elem(i++) = *p;
+}
+
 // Create a string vector from a NULL terminated list of C strings.
 
 string_vector::string_vector (const char * const *s)
   : Array<std::string> ()
 {
   octave_idx_type n = 0;
 
   const char * const *t = s;
diff --git a/liboctave/str-vec.h b/liboctave/str-vec.h
--- a/liboctave/str-vec.h
+++ b/liboctave/str-vec.h
@@ -21,16 +21,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if !defined (octave_str_vec_h)
 #define octave_str_vec_h 1
 
 #include <iosfwd>
 #include <list>
+#include <set>
 #include <string>
 
 #include "Array.h"
 
 class
 OCTAVE_API
 string_vector : public Array<std::string>
 {
@@ -43,16 +44,18 @@ public:
   string_vector (const char *s) : Array<std::string> (1, s) { }
 
   string_vector (const std::string& s) : Array<std::string> (1, s) { }
 
   string_vector (const string_vector& s) : Array<std::string> (s) { }
 
   string_vector (const std::list<std::string>& lst);
 
+  string_vector (const std::set<std::string>& lst);
+
   string_vector (const char * const *s);
 
   string_vector (const char * const *s, octave_idx_type n);
 
   string_vector& operator = (const string_vector& s)
   {
     if (this != &s)
       Array<std::string>::operator = (s);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2009-08-27  John W. Eaton  <jwe@octave.org>
+
+	* graphics.cc (validate_property_name): New static function.
+	(base_properties::dynamic_property_names): New function.
+	* graphicffs.h.in (base_properties::dynamic_property_names):
+	Provide decl.
+	* genprops.awk: Generate all_property_names functions.  Use
+	all_property_names as needed to avoid duplication elsewhere.
+	Call validate_property_name in set/get functions.
+
 2009-08-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-class.cc (get_current_method_class): Simplify.
 	(octave_class::in_class_method): Don't rely on multiple copies of
 	methods. Don't declare as const.
 	(octave_class::octave_class (const Octave_map&, const std::string&, 
 	const octave_value_list&)):
 	Call symbol_table::add_to_parent_map instead.
diff --git a/src/genprops.awk b/src/genprops.awk
--- a/src/genprops.awk
+++ b/src/genprops.awk
@@ -254,19 +254,19 @@ function emit_common_declarations ()
 
 function emit_declarations ()
 {
   if (class_name && ! base)
     emit_common_declarations();
 
   printf ("public:\n\n");
   if (base)
-    printf ("\n  static bool has_property (const std::string& pname, const std::string& cname);\n\n");
+    printf ("\n  static std::set<std::string> all_property_names (const std::string& cname);\n\n  static bool has_property (const std::string& pname, const std::string& cname);\n\n");
   else
-    printf ("\n  static bool has_property (const std::string& pname);\n\n");
+    printf ("\n  static std::set<std::string> all_property_names (void);\n\n  static bool has_property (const std::string& pname);\n\n");
 
   if (idx > 0)
     print (base ? "protected:\n" : "private:\n");
 
   for (i = 1; i <= idx; i++)
     printf ("  %s%s %s;\n", mutable[i] ? "mutable " : "", type[i], name[i]);
 
   if (idx > 0)
@@ -428,16 +428,19 @@ function emit_source ()
     ## set method
 
     if (base)
       printf ("void\nbase_properties::set (const caseless_str& pname, const std::string& cname, const octave_value& val)\n{\n") >> filename;
     else
       printf ("void\n%s::properties::set (const caseless_str& pname, const octave_value& val)\n{\n",
               class_name) >> filename;
 
+    if (! base)
+      printf ("  const std::set<std::string>& pnames = all_property_names ();\n\n  validate_property_name (\"get\", pnames, pname);\n\n  if (error_state)\n    return;\n\n") >> filename;
+
     first = 1;
 
     for (i = 1; i <= idx; i++)
     {
       if (! readonly[i])
       {
         printf ("  %sif (pname.compare (\"%s\"))\n    set_%s (val);\n",
                 (first == 0 ? "else " : ""), name[i], name[i]) >> filename;
@@ -469,26 +472,29 @@ function emit_source ()
         printf ("  if (all)\n    m.assign (\"%s\", get_%s ()%s);\n", name[i], name[i],
                 (type[i] == "handle_property" || type[i] == "graphics_handle" ? ".as_octave_value ()" : "")) >> filename;
       else
         printf ("  m.assign (\"%s\", get_%s ()%s);\n", name[i], name[i],
                 (type[i] == "handle_property" || type[i] == "graphics_handle" ? ".as_octave_value ()" : "")) >> filename;
     }
 
     printf ("\n  return m;\n}\n\n") >> filename;
-    
+
     ## get "one" method
 
     if (base)
       printf ("octave_value\nbase_properties::get (const caseless_str& pname) const\n{\n") >> filename;
     else
       printf ("octave_value\n%s::properties::get (const caseless_str& pname) const\n{\n",
               class_name) >> filename;
     printf ("  octave_value retval;\n\n") >> filename;
 
+    if (! base)
+      printf ("  const std::set<std::string>& pnames = all_property_names ();\n\n  validate_property_name (\"get\", pnames, pname);\n\n  if (error_state)\n    return retval;\n\n") >> filename;
+
     for (i = 1; i<= idx; i++)
     {
       printf ("  %sif (pname.compare (\"%s\"))\n",
               (i > 1 ? "else " : ""), name[i]) >> filename;
       printf ("    retval = get_%s ()%s;\n", name[i],
               (type[i] == "handle_property" || type[i] == "graphics_handle" ? ".as_octave_value ()" : "")) >> filename;
     }
 
@@ -501,16 +507,19 @@ function emit_source ()
     ## get_property method
 
     if (base)
       printf ("property\nbase_properties::get_property (const caseless_str& pname)\n{\n") >> filename;
     else
       printf ("property\n%s::properties::get_property (const caseless_str& pname)\n{\n",
               class_name) >> filename;
 
+    if (! base)
+      printf ("  const std::set<std::string>& pnames = all_property_names ();\n\n  validate_property_name (\"get\", pnames, pname);\n\n  if (error_state)\n    return property ();\n\n") >> filename;
+
     for (i = 1; i<= idx; i++)
     {
       if (ptype[i])
       {
         printf ("  %sif (pname.compare (\"%s\"))\n",
                 (i > 1 ? "else " : ""), name[i]) >> filename;
         printf ("    return property (&%s, true);\n", name[i]) >> filename;
       }
@@ -562,27 +571,34 @@ function emit_source ()
 
     ## go_name static field
 
     if (! base)
       printf ("std::string %s::properties::go_name (\"%s\");\n\n",
               class_name, object_name) >> filename;
 
     if (base)
-      printf ("bool base_properties::has_property (const std::string& pname, const std::string& cname") >> filename;
+      printf ("std::set<std::string>\nbase_properties::all_property_names (const std::string& cname") >> filename;
     else
-    printf ("bool %s::properties::has_property (const std::string& pname", class_name) >> filename;
-    printf (")\n{\n  static std::set<std::string> all_properties;\n\n  static bool initialized = false;\n\n  if (! initialized)\n    {\n") >> filename;
+      printf ("std::set<std::string>\n%s::properties::all_property_names (void", class_name) >> filename;
+    printf (")\n{\n  static std::set<std::string> all_pnames;\n\n  static bool initialized = false;\n\n  if (! initialized)\n    {\n") >> filename;
     for (i = 1; i <= idx; i++)
-      printf ("      all_properties.insert (\"%s\");\n", name[i]) >> filename;
+      printf ("      all_pnames.insert (\"%s\");\n", name[i]) >> filename;
     printf ("\n      initialized = true;\n    }\n\n") >> filename;
     if (base)
-	printf ("  return all_properties.find (pname) != all_properties.end () || has_dynamic_property (pname, cname);\n}\n\n") >> filename;
+      printf ("  std::set<std::string> retval = all_pnames;\n  std::set<std::string> dyn_props = dynamic_property_names (cname);\n  retval.insert (dyn_props.begin(), dyn_props.end ());\n  return retval;\n}\n\n") >> filename;
     else
-      printf ("  return all_properties.find (pname) != all_properties.end () || base_properties::has_property (pname, \"%s\");\n}\n\n", class_name) >> filename;
+      printf ("  std::set<std::string> retval = all_pnames;\n  std::set<std::string> base_props = base_properties::all_property_names (\"%s\");\n  retval.insert (base_props.begin (), base_props.end ());\n  return retval;\n}\n\n", class_name) >> filename;
+
+    if (base)
+      printf ("bool\nbase_properties::has_property (const std::string& pname, const std::string& cname)\n{\n  std::set<std::string> pnames = all_property_names (cname);\n\n") >> filename;
+    else
+      printf ("bool\n%s::properties::has_property (const std::string& pname)\n{\n  std::set<std::string> pnames = all_property_names ();\n\n", class_name) >> filename;
+
+    printf ("  return pnames.find (pname) != pnames.end ();\n}\n\n") >> filename;
   }
 }
 
 BEGIN {
   filename = "graphics-props.cc";
   printf ("// DO NOT EDIT!  Generated automatically by genprops.awk.\n\n");
   printf ("// DO NOT EDIT!  Generated automatically by genprops.awk.\n\n") > filename;
   pcount = 0;
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -56,16 +56,59 @@ along with Octave; see the file COPYING.
 static octave_value xget (const graphics_handle& h, const caseless_str& name);
 
 static void
 gripe_set_invalid (const std::string& pname)
 {
   error ("set: invalid value for %s property", pname.c_str ());
 }
 
+static void
+validate_property_name (const std::string& who,
+			const std::set<std::string>& pnames,
+			const caseless_str& pname)
+{
+  size_t len = pname.length ();
+  std::set<std::string> matches;
+
+  for (std::set<std::string>::const_iterator p = pnames.begin ();
+       p != pnames.end (); p++)
+    {
+      if (pname.compare (*p, len))
+	matches.insert (*p);
+    }
+
+  size_t num_matches = matches.size ();
+
+  if (num_matches == 0)
+    {
+      error ("%s: unknown property %s", who.c_str (), pname.c_str ());
+    }
+  else if (num_matches > 1)
+    {
+      string_vector sv (matches);
+
+      std::ostringstream os;
+
+      sv.list_in_columns (os);
+
+      std::string match_list = os.str ();
+
+      error ("%s: ambiguous property name %s; possible matches:\n\n%s",
+	     who.c_str (), pname.c_str (), match_list.c_str ());
+    }
+  else if (num_matches == 1 && ! pname.compare (*(matches.begin ())))
+    {
+      std::string possible_match = *(matches.begin ());
+
+      error ("%s: instead of %s, did you mean %s?",
+	     who.c_str (), pname.c_str (), possible_match.c_str ());
+    }
+}
+
 static Matrix
 jet_colormap (void)
 {
   Matrix cmap (64, 3, 0.0);
 
   for (octave_idx_type i = 0; i < 64; i++)
     {
       // This is the jet colormap.  It would be nice to be able
@@ -1737,27 +1780,27 @@ base_properties::get_dynamic (bool all) 
     if (all || ! it->second.is_hidden ())
       m.assign (it->second.get_name (), it->second.get ());
 
   return m;
 }
 
 std::map<std::string, std::set<std::string> > base_properties::all_dynamic_properties;
 
+std::set<std::string>
+base_properties::dynamic_property_names (const std::string& cname)
+{
+  return all_dynamic_properties[cname];
+}
+
 bool
 base_properties::has_dynamic_property (const std::string& pname,
 				       const std::string& cname)
 {
-  // FIXME -- we need to maintain a static map of class names to sets
-  // of dynamic property names, then look up the set for the given
-  // cname, then see if the set contains the given pname.  Doing that
-  // implies changes to set_dynamic, I think.  Where is set_dynamic
-  // ever used?
-
-  std::set<std::string>& dynprops = all_dynamic_properties[cname];
+  const std::set<std::string>& dynprops = dynamic_property_names (cname);
 
   return dynprops.find (pname) != dynprops.end ();
 }
 
 void
 base_properties::set_dynamic (const caseless_str& pname,
 			      const std::string& cname,
 			      const octave_value& val)
@@ -5532,20 +5575,17 @@ get_property_from_handle (double handle,
 			  const std::string& func)
 {
   gh_manager::autolock guard;
 
   graphics_object obj = gh_manager::get_object (handle);
   octave_value retval;
 
   if (obj)
-    {
-      caseless_str p = std::string (property);
-      retval = obj.get (p);
-    }
+    retval = obj.get (caseless_str (property));
   else
     error ("%s: invalid handle (= %g)", func.c_str(), handle);
 
   return retval;
 }
 
 bool
 set_property_in_handle (double handle, const std::string& property,
@@ -5553,19 +5593,19 @@ set_property_in_handle (double handle, c
 {
   gh_manager::autolock guard;
 
   graphics_object obj = gh_manager::get_object (handle);
   int ret = false;
 
   if (obj)
     {
-      caseless_str p = std::string (property);
-      obj.set (p, arg);
-      if (!error_state)
+      obj.set (caseless_str (property), arg);
+
+      if (! error_state)
 	ret = true;
     }
   else
     error ("%s: invalid handle (= %g)", func.c_str(), handle);
 
   return ret;
 }
 
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -1727,16 +1727,18 @@ public:
 
   bool is_handle_visible (void) const
   {
     return ! handlevisibility.is ("off");
   }
 
   static std::map<std::string, std::set<std::string> > all_dynamic_properties;
  
+  static std::set<std::string> dynamic_property_names (const std::string& cname);
+
   static bool has_dynamic_property (const std::string& pname,
 				    const std::string& cname);
 
 protected:
   void set_dynamic (const caseless_str& pname, const std::string& cname,
 		    const octave_value& val);
 
   octave_value get_dynamic (const caseless_str& pname) const;
