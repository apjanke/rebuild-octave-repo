# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1242387283 -7200
#      Fri May 15 13:34:43 2009 +0200
# Node ID 4b2147b25e8d2a0c7de6a6a9716e63258afb9be0
# Parent  472f0e22aa60ca0dc2313b3d55452aa6d43e2b8a
clean up Array instantiation mess in oct-stream.cc

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-05-15  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-stream.cc: Don't instantiate Array2<read_fptr>.
+	(octave_stream::read): Make read_fptr_table a static 2d array.
+	(FILL_TABLE_ROW): Update.
+
 2009-05-12  Jaroslav Hajek  <highegg@gmail.com>
 
 	* data.cc (F__accumarray_sum__): Optimize the constant range case.
 
 2009-05-11  John W. Eaton  <jwe@octave.org>
 
 	* sparse-xdiv.cc (do_rightdiv_sm_dm, do_leftdiv_dm_sm):
 	Avoid apparent MSVC bug with typedef.
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -25,25 +25,22 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 #include <cassert>
 #include <cctype>
 #include <cstring>
 
 #include <iomanip>
+#include <iostream>
 #include <fstream>
 #include <sstream>
 #include <string>
 
 #include <Array.h>
-#include <Array2.h>
-#include <Array3.h>
-
-#include <Array.cc>
 
 #include "byte-swap.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "str-vec.h"
 #include "quit.h"
 
@@ -3265,51 +3262,51 @@ INSTANTIATE_DO_READ (uint64NDArray);
 INSTANTIATE_DO_READ (FloatNDArray);
 INSTANTIATE_DO_READ (NDArray);
 INSTANTIATE_DO_READ (charNDArray);
 INSTANTIATE_DO_READ (boolNDArray);
 
 typedef octave_value (*read_fptr) (octave_stream&, octave_idx_type, octave_idx_type, octave_idx_type, octave_idx_type, bool, bool,
 				   oct_mach_info::float_format ffmt, octave_idx_type&);
 
-NO_INSTANTIATE_ARRAY_SORT (read_fptr);
-INSTANTIATE_ARRAY (read_fptr,);
-template class Array2<read_fptr>;
-
 #define FILL_TABLE_ROW(R, VAL_T) \
-  read_fptr_table(R,oct_data_conv::dt_int8) = do_read<VAL_T, octave_int8>; \
-  read_fptr_table(R,oct_data_conv::dt_uint8) = do_read<VAL_T, octave_uint8>; \
-  read_fptr_table(R,oct_data_conv::dt_int16) = do_read<VAL_T, octave_int16>; \
-  read_fptr_table(R,oct_data_conv::dt_uint16) = do_read<VAL_T, octave_uint16>; \
-  read_fptr_table(R,oct_data_conv::dt_int32) = do_read<VAL_T, octave_int32>; \
-  read_fptr_table(R,oct_data_conv::dt_uint32) = do_read<VAL_T, octave_uint32>; \
-  read_fptr_table(R,oct_data_conv::dt_int64) = do_read<VAL_T, octave_int64>; \
-  read_fptr_table(R,oct_data_conv::dt_uint64) = do_read<VAL_T, octave_uint64>; \
-  read_fptr_table(R,oct_data_conv::dt_single) = do_read<VAL_T, float>; \
-  read_fptr_table(R,oct_data_conv::dt_double) = do_read<VAL_T, double>; \
-  read_fptr_table(R,oct_data_conv::dt_char) = do_read<VAL_T, char>; \
-  read_fptr_table(R,oct_data_conv::dt_schar) = do_read<VAL_T, signed char>; \
-  read_fptr_table(R,oct_data_conv::dt_uchar) = do_read<VAL_T, unsigned char>; \
-  read_fptr_table(R,oct_data_conv::dt_logical) = do_read<VAL_T, unsigned char>
+  read_fptr_table[R][oct_data_conv::dt_int8] = do_read<VAL_T, octave_int8>; \
+  read_fptr_table[R][oct_data_conv::dt_uint8] = do_read<VAL_T, octave_uint8>; \
+  read_fptr_table[R][oct_data_conv::dt_int16] = do_read<VAL_T, octave_int16>; \
+  read_fptr_table[R][oct_data_conv::dt_uint16] = do_read<VAL_T, octave_uint16>; \
+  read_fptr_table[R][oct_data_conv::dt_int32] = do_read<VAL_T, octave_int32>; \
+  read_fptr_table[R][oct_data_conv::dt_uint32] = do_read<VAL_T, octave_uint32>; \
+  read_fptr_table[R][oct_data_conv::dt_int64] = do_read<VAL_T, octave_int64>; \
+  read_fptr_table[R][oct_data_conv::dt_uint64] = do_read<VAL_T, octave_uint64>; \
+  read_fptr_table[R][oct_data_conv::dt_single] = do_read<VAL_T, float>; \
+  read_fptr_table[R][oct_data_conv::dt_double] = do_read<VAL_T, double>; \
+  read_fptr_table[R][oct_data_conv::dt_char] = do_read<VAL_T, char>; \
+  read_fptr_table[R][oct_data_conv::dt_schar] = do_read<VAL_T, signed char>; \
+  read_fptr_table[R][oct_data_conv::dt_uchar] = do_read<VAL_T, unsigned char>; \
+  read_fptr_table[R][oct_data_conv::dt_logical] = do_read<VAL_T, unsigned char>
 
 octave_value
 octave_stream::read (const Array<double>& size, octave_idx_type block_size,
 		     oct_data_conv::data_type input_type,
 		     oct_data_conv::data_type output_type,
 		     octave_idx_type skip, oct_mach_info::float_format ffmt,
 		     octave_idx_type& char_count)
 {
   static bool initialized = false;
 
   // Table function pointers for return types x read types.
 
-  static Array2<read_fptr> read_fptr_table (oct_data_conv::dt_unknown, 14, 0);
+  static read_fptr read_fptr_table[oct_data_conv::dt_unknown][14];
 
   if (! initialized)
     {
+      for (int i = 0; i < oct_data_conv::dt_unknown; i++)
+        for (int j = 0; j < 14; j++)
+          read_fptr_table[i][j] = 0;
+
       FILL_TABLE_ROW (oct_data_conv::dt_int8, int8NDArray);
       FILL_TABLE_ROW (oct_data_conv::dt_uint8, uint8NDArray);
       FILL_TABLE_ROW (oct_data_conv::dt_int16, int16NDArray);
       FILL_TABLE_ROW (oct_data_conv::dt_uint16, uint16NDArray);
       FILL_TABLE_ROW (oct_data_conv::dt_int32, int32NDArray);
       FILL_TABLE_ROW (oct_data_conv::dt_uint32, uint32NDArray);
       FILL_TABLE_ROW (oct_data_conv::dt_int64, int64NDArray);
       FILL_TABLE_ROW (oct_data_conv::dt_uint64, uint64NDArray);
@@ -3346,17 +3343,17 @@ octave_stream::read (const Array<double>
 	{
 	  if (nr == 0 || nc == 0)
 	    retval = Matrix (nr, nc);
 	  else
 	    {
 	      if (ffmt == oct_mach_info::flt_fmt_unknown)
 		ffmt = float_format ();
 
-	      read_fptr fcn = read_fptr_table (output_type, input_type);
+	      read_fptr fcn = read_fptr_table[output_type][input_type];
 
 	      bool do_float_fmt_conv = ((input_type == oct_data_conv::dt_double
 					 || input_type == oct_data_conv::dt_single)
 					&& ffmt != float_format ());
 
 	      bool do_NA_conv = (output_type == oct_data_conv::dt_double);
 
 	      if (fcn)
