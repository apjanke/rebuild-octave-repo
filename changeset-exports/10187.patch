# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1264180341 18000
#      Fri Jan 22 12:12:21 2010 -0500
# Node ID a44d15813a39c4ff94b79ffbfd135ccf4e08a8fd
# Parent  095a1e670e68d0496d751fcfafcd39419b336c33
don't skip literal text elements in scanf formats

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,31 @@
+2010-01-22  John W. Eaton  <jwe@octave.org>
+
+	* oct-stream.cc (octave_base_stream::do_scanf): Don't skip
+	whitespace, literal text, and %% elements at the end of the
+	format spec.  Correctly process formats containing only literal text.
+	(scanf_format_list::finish_conversion): Don't increment nconv
+	for literal % characters.
+	(scanf_format_list::length, scanf_format_list::num_conversions):
+	Return octave_idx_type, not int.
+	(scanf_format_list::nconv, scanf_format_list::curr_idx):
+	Now octave_idx_type, not int.  Change all uses.
+	(printf_format_list::length): Return octave_idx_type, not int.
+	(scanf_format_list::nconv, scanf_format_list::curr_idx):
+	Now octave_idx_type, not int.  Change all uses.
+	(scanf_format_list::add_elt_to_list,
+	scanf_format_list::process_conversion,
+	scanf_format_list::finish_conversion,
+	printf_format_list::add_elt_to_list,
+	printf_format_list::process_conversion,
+	printf_format_list::finish_conversion):
+	Use size_t instead of int as appropriate.
+	* oct-stream.h: Update decls.
+
 2010-01-22  John W. Eaton  <jwe@octave.org>
 
 	* debug.cc (Fdbcont, Fdbquit): Call reset_debug_state.
 	(Fdbquit): Set Vdebugging to false.
 	* input.cc (Fkeyboard): Set tree_evaluator::debug_state to true.
 	Set tree_evaluator::current_frame to the initial stack frame
 	that is active for debugging commands.
 	* pt-eval.cc (tree_evaluator::reset_debug_state): New function.
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -152,21 +152,21 @@ get_size (const Array<double>& size, oct
       if (! error_state && dnc >= 0.0)
 	nc = get_size (dnc, who);
     }
 }
 
 scanf_format_list::scanf_format_list (const std::string& s)
   : nconv (0), curr_idx (0), list (16), buf (0)
 {
-  int num_elts = 0;
-
-  int n = s.length ();
-
-  int i = 0;
+  octave_idx_type num_elts = 0;
+
+  size_t n = s.length ();
+
+  size_t i = 0;
 
   int width = 0;
   bool discard = false;
   char modifier = '\0';
   char type = '\0';
 
   bool have_more = true;
 
@@ -178,16 +178,17 @@ scanf_format_list::scanf_format_list (co
 	buf = new std::ostringstream ();
 
       if (s[i] == '%')
 	{
 	  // Process percent-escape conversion type.
 
 	  process_conversion (s, i, n, width, discard, type, modifier,
 			      num_elts);
+
 	  have_more = (buf != 0);
 	}
       else if (isspace (s[i]))
 	{
 	  type = scanf_format_elt::whitespace_conversion;
 
 	  width = 0;
 	  discard = false;
@@ -300,19 +301,20 @@ expand_char_class (const std::string& s)
 	    retval += c;
 	}
     }
 
   return retval;
 }
 
 void
-scanf_format_list::process_conversion (const std::string& s, int& i, int n,
-				       int& width, bool& discard, char& type,
-				       char& modifier, int& num_elts)
+scanf_format_list::process_conversion (const std::string& s, size_t& i,
+                                       size_t n, int& width, bool& discard,
+                                       char& type, char& modifier,
+                                       octave_idx_type& num_elts)
 {
   width = 0;
   discard = false;
   modifier = '\0';
   type = '\0';
 
   *buf << s[i++];
 
@@ -402,26 +404,27 @@ scanf_format_list::process_conversion (c
       if (nconv < 0)
 	break;
     }
 
   nconv = -1;
 }
 
 int
-scanf_format_list::finish_conversion (const std::string& s, int& i, int n,
-				      int& width, bool discard, char& type,
-				      char modifier, int& num_elts)
+scanf_format_list::finish_conversion (const std::string& s, size_t& i,
+                                      size_t n, int& width, bool discard,
+                                      char& type, char modifier,
+                                      octave_idx_type& num_elts)
 {
   int retval = 0;
 
   std::string char_class;
 
-  int beg_idx = -1;
-  int end_idx = -1;
+  size_t beg_idx = std::string::npos;
+  size_t end_idx = std::string::npos;
 
   if (s[i] == '%')
     {
       type = '%';
       *buf << s[i++];
     }
   else
     {
@@ -461,38 +464,38 @@ scanf_format_list::finish_conversion (co
 	      *buf << s[i++];
 	    }
 
 	  if (s[i-1] != ']')
 	    retval = nconv = -1;
 	}
       else
 	*buf << s[i++];
+
+      nconv++;
     }
 
-  nconv++;
-
-  if (nconv > 0)
+  if (nconv >= 0)
     {
-      if (beg_idx >= 0 && end_idx >= 0)
+      if (beg_idx != std::string::npos && end_idx != std::string::npos)
 	char_class = expand_char_class (s.substr (beg_idx,
 						  end_idx - beg_idx + 1));
 
       add_elt_to_list (width, discard, type, modifier, num_elts, char_class);
     }
 
   return retval;
 }
 
 void
 scanf_format_list::printme (void) const
 {
-  int n = list.length ();
-
-  for (int i = 0; i < n; i++)
+  octave_idx_type n = list.length ();
+
+  for (octave_idx_type i = 0; i < n; i++)
     {
       scanf_format_elt *elt = list(i);
 
       std::cerr
 	<< "width:      " << elt->width << "\n"
 	<< "discard:    " << elt->discard << "\n"
 	<< "type:       ";
 
@@ -508,21 +511,21 @@ scanf_format_list::printme (void) const
 	<< "char_class: `" << undo_string_escapes (elt->char_class) << "'\n"
 	<< "text:       `" << undo_string_escapes (elt->text) << "'\n\n";
     }
 }
 
 bool
 scanf_format_list::all_character_conversions (void)
 {
-  int n = list.length ();
+  octave_idx_type n = list.length ();
 
   if (n > 0)
     {
-      for (int i = 0; i < n; i++)
+      for (octave_idx_type i = 0; i < n; i++)
 	{
 	  scanf_format_elt *elt = list(i);
 
 	  switch (elt->type)
 	    {
 	    case 'c': case 's': case '%': case '[': case '^':
 	    case scanf_format_elt::literal_conversion:
 	    case scanf_format_elt::whitespace_conversion:
@@ -538,21 +541,21 @@ scanf_format_list::all_character_convers
     }
   else
     return false;
 }
 
 bool
 scanf_format_list::all_numeric_conversions (void)
 {
-  int n = list.length ();
+  octave_idx_type n = list.length ();
 
   if (n > 0)
     {
-      for (int i = 0; i < n; i++)
+      for (octave_idx_type i = 0; i < n; i++)
 	{
 	  scanf_format_elt *elt = list(i);
 
 	  switch (elt->type)
 	    {
 	    case 'd': case 'i': case 'o': case 'u': case 'x':
 	    case 'e': case 'f': case 'g':
 	      break;
@@ -569,21 +572,21 @@ scanf_format_list::all_numeric_conversio
     return false;
 }
 
 // Ugh again.
 
 printf_format_list::printf_format_list (const std::string& s)
   : nconv (0), curr_idx (0), list (16), buf (0)
 {
-  int num_elts = 0;
-
-  int n = s.length ();
-
-  int i = 0;
+  octave_idx_type num_elts = 0;
+
+  size_t n = s.length ();
+
+  size_t i = 0;
 
   int args = 0;
   std::string flags;
   int fw = 0;
   int prec = 0;
   char modifier = '\0';
   char type = '\0';
 
@@ -655,29 +658,29 @@ printf_format_list::printf_format_list (
       list.resize (num_elts);
 
       delete buf;
     }
 }
 
 printf_format_list::~printf_format_list (void)
 {
-  int n = list.length ();
-
-  for (int i = 0; i < n; i++)
+  octave_idx_type n = list.length ();
+
+  for (octave_idx_type i = 0; i < n; i++)
     {
       printf_format_elt *elt = list(i);
       delete elt;
     }	
 }
 
 void
 printf_format_list::add_elt_to_list (int args, const std::string& flags,
 				     int fw, int prec, char type,
-				     char modifier, int& num_elts)
+				     char modifier, octave_idx_type& num_elts)
 {
   if (buf)
     {
       std::string text = buf->str ();
 
       if (! text.empty ())
 	{
 	  printf_format_elt *elt
@@ -692,18 +695,18 @@ printf_format_list::add_elt_to_list (int
 
       delete buf;
       buf = 0;
     }
 }
 
 void
 printf_format_list::process_conversion
-  (const std::string& s, int& i, int n, int& args, std::string& flags,
-   int& fw, int& prec, char& modifier, char& type, int& num_elts)
+  (const std::string& s, size_t& i, size_t n, int& args, std::string& flags,
+   int& fw, int& prec, char& modifier, char& type, octave_idx_type& num_elts)
 {
   args = 0;
   flags = "";
   fw = 0;
   prec = 0;
   modifier = '\0';
   type = '\0';
 
@@ -795,18 +798,18 @@ printf_format_list::process_conversion
   if (i < n)
     finish_conversion (s, i, args, flags, fw, prec, modifier, type, num_elts);
   else
     nconv = -1;
 }
 
 void
 printf_format_list::finish_conversion
-  (const std::string& s, int& i, int args, const std::string& flags,
-   int fw, int prec, char modifier, char& type, int& num_elts)
+  (const std::string& s, size_t& i, int args, const std::string& flags,
+   int fw, int prec, char modifier, char& type, octave_idx_type& num_elts)
 
 {
   switch (s[i])
     {
     case 'd': case 'i': case 'o': case 'x': case 'X':
     case 'u': case 'c':
       if (modifier == 'L')
 	{
@@ -1712,17 +1715,17 @@ octave_base_stream::do_scanf (scanf_form
       ::error ("%s: unable to read from stdin while running interactively",
 	       who.c_str ());
 	     
       return retval;
     }
 
   conversion_count = 0;
 
-  int nconv = fmt_list.num_conversions ();
+  octave_idx_type nconv = fmt_list.num_conversions ();
 
   octave_idx_type data_index = 0;
 
   if (nr == 0 || nc == 0)
     {
       if (one_elt_size_spec)
 	nc = 0;
 
@@ -1799,23 +1802,30 @@ octave_base_stream::do_scanf (scanf_form
   if (isp)
     {
       std::istream& is = *isp;
 
       const scanf_format_elt *elt = fmt_list.first ();
 
       std::ios::fmtflags flags = is.flags ();
 
+      octave_idx_type trips = 0;
+
+      octave_idx_type num_fmt_elts = fmt_list.length ();
+
       for (;;)
 	{
 	  octave_quit ();
 
 	  if (elt)
 	    {
-	      if (max_conv > 0 && conversion_count == max_conv)
+	      if (! (elt->type == scanf_format_elt::whitespace_conversion
+                     || elt->type == scanf_format_elt::literal_conversion
+                     || elt->type == '%')
+                  && max_conv > 0 && conversion_count == max_conv)
 		{
 		  if (all_char_conv && one_elt_size_spec)
 		    {
 		      final_nr = 1;
 		      final_nc = data_index;
 		    }
 		  else
 		    {
@@ -2042,17 +2052,33 @@ octave_base_stream::do_scanf (scanf_form
 		}
 	    }
 	  else
 	    {
 	      error ("%s: internal format error", who.c_str ());
 	      break;
 	    }
 
-	  elt = fmt_list.next (nconv > 0);
+          if (nconv == 0 && ++trips == num_fmt_elts)
+            {
+              if (all_char_conv && one_elt_size_spec)
+                {
+                  final_nr = 1;
+                  final_nc = data_index;
+                }
+              else
+                {
+                  final_nr = nr;
+                  final_nc = (data_index - 1) / nr + 1;
+                }
+
+              break;
+            }
+          else
+            elt = fmt_list.next (nconv > 0);
 	}
     }
 
   if (ok ())
     {
       mval.resize (final_nr, final_nc, 0.0);
 
       retval = mval;
@@ -2257,25 +2283,25 @@ octave_base_stream::oscanf (const std::s
   std::istream *isp = input_stream ();
 
   if (isp)
     {
       std::istream& is = *isp;
 
       scanf_format_list fmt_list (fmt);
 
-      int nconv = fmt_list.num_conversions ();
+      octave_idx_type nconv = fmt_list.num_conversions ();
 
       if (nconv == -1)
 	::error ("%s: invalid format specified", who.c_str ());
       else
 	{
 	  is.clear ();
 
-	  int len = fmt_list.length ();
+	  octave_idx_type len = fmt_list.length ();
 
 	  retval.resize (nconv+1, Matrix ());
 
 	  const scanf_format_elt *elt = fmt_list.first ();
 
 	  int num_values = 0;
 
 	  bool quit = false;
@@ -2601,17 +2627,17 @@ do_printf_conv (std::ostream&, const cha
 
 int
 octave_base_stream::do_printf (printf_format_list& fmt_list,
 			       const octave_value_list& args,
 			       const std::string& who)
 {
   int retval = 0;
 
-  int nconv = fmt_list.num_conversions ();
+  octave_idx_type nconv = fmt_list.num_conversions ();
 
   std::ostream *osp = output_stream ();
 
   if (osp)
     {
       std::ostream& os = *osp;
 
       const printf_format_elt *elt = fmt_list.first ();
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -103,24 +103,24 @@ OCTINTERP_API
 scanf_format_list
 {
 public:
 
   scanf_format_list (const std::string& fmt = std::string ());
 
   ~scanf_format_list (void);
 
-  int num_conversions (void) { return nconv; }
+  octave_idx_type num_conversions (void) { return nconv; }
 
   // The length can be different than the number of conversions.
   // For example, "x %d y %d z" has 2 conversions but the length of
   // the list is 3 because of the characters that appear after the
   // last conversion.
 
-  int length (void) { return list.length (); }
+  octave_idx_type length (void) { return list.length (); }
 
   const scanf_format_elt *first (void)
     {
       curr_idx = 0;
       return current ();
     }
 
   const scanf_format_elt *current (void) const
@@ -149,38 +149,38 @@ public:
   bool all_character_conversions (void);
 
   bool all_numeric_conversions (void);
 
 private:
 
   // Number of conversions specified by this format string, or -1 if
   // invalid conversions have been found.
-  int nconv;
+  octave_idx_type nconv;
 
   // Index to current element;
-  int curr_idx;
+  octave_idx_type curr_idx;
 
   // List of format elements.
   Array<scanf_format_elt*> list;
 
   // Temporary buffer.
   std::ostringstream *buf;
 
   void add_elt_to_list (int width, bool discard, char type, char modifier,
-			int& num_elts,
+			octave_idx_type& num_elts,
 			const std::string& char_class = std::string ()); 
 
-  void process_conversion (const std::string& s, int& i, int n, int& width,
-			   bool& discard, char& type, char& modifier,
-			   int& num_elts);
+  void process_conversion (const std::string& s, size_t& i, size_t n,
+                           int& width, bool& discard, char& type,
+                           char& modifier, octave_idx_type& num_elts);
 
-  int finish_conversion (const std::string& s, int& i, int n, int& width,
-			 bool discard, char& type, char modifier,
-			 int& num_elts);
+  int finish_conversion (const std::string& s, size_t& i, size_t n,
+                         int& width, bool discard, char& type,
+                         char modifier, octave_idx_type& num_elts);
   // No copying!
 
   scanf_format_list (const scanf_format_list&);
 
   scanf_format_list& operator = (const scanf_format_list&);
 };
 
 class
@@ -244,17 +244,17 @@ OCTINTERP_API
 printf_format_list
 {
 public:
 
   printf_format_list (const std::string& fmt = std::string ());
 
   ~printf_format_list (void);
 
-  int num_conversions (void) { return nconv; }
+  octave_idx_type num_conversions (void) { return nconv; }
 
   const printf_format_elt *first (void)
     {
       curr_idx = 0;
       return current ();
     }
 
   const printf_format_elt *current (void) const
@@ -282,39 +282,40 @@ public:
   bool ok (void) const { return (nconv >= 0); }
 
   operator bool () const { return ok (); }
 
 private:
 
   // Number of conversions specified by this format string, or -1 if
   // invalid conversions have been found.
-  int nconv;
+  octave_idx_type nconv;
 
   // Index to current element;
-  int curr_idx;
+  octave_idx_type curr_idx;
 
   // List of format elements.
   Array<printf_format_elt*> list;
 
   // Temporary buffer.
   std::ostringstream *buf;
 
   void add_elt_to_list (int args, const std::string& flags, int fw,
 			int prec, char type, char modifier,
- 			int& num_elts);
+ 			octave_idx_type& num_elts);
  
-  void process_conversion (const std::string& s, int& i, int n,
+  void process_conversion (const std::string& s, size_t& i, size_t n,
 			   int& args, std::string& flags, int& fw,
 			   int& prec, char& modifier, char& type,
-			   int& num_elts); 
+			   octave_idx_type& num_elts); 
  
-  void finish_conversion (const std::string& s, int& i, int args,
+  void finish_conversion (const std::string& s, size_t& i, int args,
 			  const std::string& flags, int fw, int prec,
-			  char modifier, char& type, int& num_elts);
+			  char modifier, char& type,
+                          octave_idx_type& num_elts);
 
   // No copying!
 
   printf_format_list (const printf_format_list&);
 
   printf_format_list& operator = (const printf_format_list&);
 };
 
