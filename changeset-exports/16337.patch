# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363730603 14400
#      Tue Mar 19 18:03:23 2013 -0400
# Node ID 6bfd8dbd7d3c47236fc064d3d70e2d843d19a96a
# Parent  0ce49f9fb1713c74bc988b7aa7a4b9707de5ef95
don't swallow statements that follow comment lines (bug #38549)

* lex.h, lex.ll (finish_comment): Delete second arg,
looking_at_continuation.  Never unput '\n'.  Change all callers.
(<LINE_COMMENT_START>{S}*{CCHAR}.*{NL}): Unput '\n' here if looking at
end of line comment.

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -521,18 +521,17 @@ public:
   int is_keyword_token (const std::string& s);
 
   bool whitespace_is_significant (void);
 
   void handle_number (void);
 
   void handle_continuation (void);
 
-  void finish_comment (octave_comment_elt::comment_type typ,
-                       bool looking_at_continuation = false);
+  void finish_comment (octave_comment_elt::comment_type typ);
 
   bool have_continuation (bool trailing_comments_ok = true);
 
   bool have_ellipsis_continuation (bool trailing_comments_ok = true);
 
   int handle_string (char delim);
 
   int handle_close_bracket (int bracket_type);
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -532,16 +532,19 @@ ANY_INCLUDING_NL (.|{NL})
     if (! full_line_comment)
       {
         if (have_space)
           curr_lexer->mark_previous_token_trailing_space ();
 
         curr_lexer->finish_comment (octave_comment_elt::end_of_line);
 
         curr_lexer->pop_start_state ();
+
+        curr_lexer->xunput ('\n');
+        curr_lexer->input_line_number--;
       }
   }
 
 %{
 // End of a block of full-line comments.
 %}
 
 <LINE_COMMENT_START>{ANY_INCLUDING_NL} {
@@ -2111,49 +2114,41 @@ octave_base_lexer::handle_continuation (
       else
         break;
     }
 
   if (have_comment)
     {
       comment_text = &yytxt[offset];
 
-      finish_comment (octave_comment_elt::end_of_line, true);
+      finish_comment (octave_comment_elt::end_of_line);
     }
 
   decrement_promptflag ();
   input_line_number++;
   current_input_column = 1;
 }
 
 void
-octave_base_lexer::finish_comment (octave_comment_elt::comment_type typ,
-                                   bool looking_at_continuation)
+octave_base_lexer::finish_comment (octave_comment_elt::comment_type typ)
 {
   bool copyright = looks_like_copyright (comment_text);
 
   if (nesting_level.none () && help_text.empty ()
     && ! comment_text.empty () && ! copyright)
     help_text = comment_text;
 
   if (copyright)
     typ = octave_comment_elt::copyright;
 
   octave_comment_buffer::append (comment_text, typ);
 
   comment_text = "";
 
   at_beginning_of_statement = true;
-
-  if (! looking_at_continuation)
-    {
-      xunput ('\n');
-      // Adjust for newline that was not really in the input stream.
-      input_line_number--;
-    }
 }
 
 // We have seen a backslash and need to find out if it should be
 // treated as a continuation character.  If so, this eats it, up to
 // and including the new line character.
 //
 // Match whitespace only, followed by a comment character or newline.
 // Once a comment character is found, discard all input until newline.
