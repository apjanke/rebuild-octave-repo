# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1357677312 -3600
#      Tue Jan 08 21:35:12 2013 +0100
# Node ID 85f9aca30c76a2281f7bc174b4844bb3ec830616
# Parent  8e38eac05230dcc75f235218f34ca29912394a40
gui: reorganized handling of different icons for dock widgets

* main-window.cc(notice-settings): icon set is stored with its short name
instead of a number; if no valid value is read from the settings, no special
icons are set for the widgets
* settings-dialog.cc(settings_dialog): changes for short names of icons;
set radio buttom of no special icon per default (if settings value is not value)
if value from settings file is invalid;
* settings-dialog.cc(write_changes settings): changes for short names of icons
* resource-manager.h: remove enum declaration for icon sets

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -195,69 +195,85 @@ main_window::process_settings_dialog_req
   if (change_settings == QDialog::Accepted)
     {
       settingsDialog->write_changed_settings ();
       emit settings_changed ();
     }
   delete settingsDialog;
 }
 
+
 void
 main_window::notice_settings ()
 {
-  // FIXME -- was this supposed to be configurable in some way?  If so,
-  // maybe it should be moved back to resource-manager.{h,cc}, but not
-  // as a static variable.
-  static const char *WIDGET_ICON_SET_PREFIX[] =
-    {
-      ":/actions/icons/logo.png",
-      ":/actions/icons/graphic_logo_",
-      ":/actions/icons/letter_logo_"
-    };
-
-  // Set terminal font:
   QSettings *settings = resource_manager::get_settings ();
 
   // FIXME -- what should happen if settings is 0?
 
+  // Set terminal font:
   QFont term_font = QFont();
   term_font.setFamily(settings->value("terminal/fontName").toString());
   term_font.setPointSize(settings->value("terminal/fontSize").toInt ());
   _terminal->setTerminalFont (term_font);
 
   QString cursorType = settings->value ("terminal/cursorType").toString ();
   bool cursorBlinking = settings->value ("terminal/cursorBlinking").toBool ();
   if (cursorType == "ibeam")
     _terminal->setCursorType(QTerminalInterface::IBeamCursor, cursorBlinking);
   else if (cursorType == "block")
     _terminal->setCursorType(QTerminalInterface::BlockCursor, cursorBlinking);
   else if (cursorType == "underline")
     _terminal->setCursorType(QTerminalInterface::UnderlineCursor,
                              cursorBlinking);
 
   // the widget's icons (when floating)
-  int icon_set = settings->value ("DockWidgets/widget_icon_set",0).toInt ();
-  QString icon_prefix = QString (WIDGET_ICON_SET_PREFIX[icon_set]);
+  QString icon_set = settings->value ("DockWidgets/widget_icon_set","NONE").
+                                      toString ();
+  static struct
+    {
+      QString name;
+      QString path;
+    }
+  widget_icon_data[] =
+    { // array of possible icon sets (name, path (complete for NONE))
+      // the first entry here is the default!
+      {"NONE",    ":/actions/icons/logo.png"},
+      {"GRAPHIC", ":/actions/icons/graphic_logo_"},
+      {"LETTER",  ":/actions/icons/letter_logo_"},
+      {"", ""} // end marker has empty name
+    };
+  int count = 0;
+  int icon_set_found = 0; // default
+  while (!widget_icon_data[count].name.isEmpty ())
+    { // while not end of data
+      if (widget_icon_data[count].name == icon_set)
+        { // data of desired icon set found
+          icon_set_found = count;
+          break;
+        }
+      count++;
+    }
   QString icon;
   foreach (QObject *obj, children ())
     {
       QString name = obj->objectName ();
       if (obj->inherits("QDockWidget") && ! name.isEmpty ())
         { // if children is a dockwidget with a name
           QDockWidget *widget = qobject_cast<QDockWidget *> (obj);
-          icon = icon_prefix;  // prefix or octave-logo
-          if (icon_set)        // > 0 : each widget has individual icon
-            icon = icon + name + QString(".png");
+          icon = widget_icon_data[icon_set_found].path; // prefix or octave-logo
+          if (widget_icon_data[icon_set_found].name != "NONE")
+            icon = icon + name + ".png"; // add widget name and ext.
           widget->setWindowIcon (QIcon (icon));
         }
     }
 
   resource_manager::update_network_settings ();
 }
 
+
 void
 main_window::prepare_for_quit ()
 {
   write_settings ();
 }
 
 void
 main_window::reset_windows ()
diff --git a/libgui/src/resource-manager.h b/libgui/src/resource-manager.h
--- a/libgui/src/resource-manager.h
+++ b/libgui/src/resource-manager.h
@@ -23,23 +23,16 @@ along with Octave; see the file COPYING.
 #ifndef RESOURCEMANAGER_H
 #define RESOURCEMANAGER_H
 
 #include <QDesktopServices>
 #include <QIcon>
 #include <QMap>
 #include <QSettings>
 
-// constants for the widget's icons
-enum widget_icon_set
-  {
-    NO_ICON_SET = 0,
-    GRAPHIC_ICON_SET,
-    LETTER_ICON_SET
-  };
 
 class resource_manager
 {
 protected:
 
   resource_manager (void);
 
 public:
@@ -109,11 +102,12 @@ private:
 
   void do_reload_settings (void);
 
   void do_set_settings (const QString& file);
 
   void do_update_network_settings (void);
 
   bool do_is_first_run (void);
+
 };
 
 #endif // RESOURCEMANAGER_H
diff --git a/libgui/src/settings-dialog.cc b/libgui/src/settings-dialog.cc
--- a/libgui/src/settings-dialog.cc
+++ b/libgui/src/settings-dialog.cc
@@ -33,20 +33,22 @@ settings_dialog::settings_dialog (QWidge
   QDialog (p), ui (new Ui::settings_dialog)
 {
   ui->setupUi (this);
 
   QSettings *settings = resource_manager::get_settings ();
 
   // FIXME -- what should happen if settings is 0?
 
-  int widget_icon_set = settings->value ("DockWidgets/widget_icon_set",0).toInt ();
-  ui->general_icon_octave-> setChecked (NO_ICON_SET == widget_icon_set);
-  ui->general_icon_graphic-> setChecked (GRAPHIC_ICON_SET == widget_icon_set);
-  ui->general_icon_letter-> setChecked (LETTER_ICON_SET == widget_icon_set);
+  QString widget_icon_set =
+      settings->value ("DockWidgets/widget_icon_set","NONE").toString ();
+  ui->general_icon_octave-> setChecked (true);  // the default (if invalid set)
+  ui->general_icon_octave-> setChecked (widget_icon_set == "NONE");
+  ui->general_icon_graphic-> setChecked (widget_icon_set == "GRAPHIC");
+  ui->general_icon_letter-> setChecked (widget_icon_set == "LETTER");
 
   ui->useCustomFileEditor->setChecked (settings->value ("useCustomFileEditor").toBool ());
   ui->customFileEditor->setText (settings->value ("customFileEditor").toString ());
   ui->editor_showLineNumbers->setChecked (settings->value ("editor/showLineNumbers",true).toBool () );
   ui->editor_highlightCurrentLine->setChecked (settings->value ("editor/highlightCurrentLine",true).toBool () );
   ui->editor_codeCompletion->setChecked (settings->value ("editor/codeCompletion",true).toBool () );
   ui->editor_fontName->setCurrentFont (QFont (settings->value ("editor/fontName","Courier").toString()) );
   ui->editor_fontSize->setValue (settings->value ("editor/fontSize",10).toInt ());
@@ -100,21 +102,21 @@ settings_dialog::~settings_dialog ()
 
 void
 settings_dialog::write_changed_settings ()
 {
   QSettings *settings = resource_manager::get_settings ();
 
   // FIXME -- what should happen if settings is 0?
 
-  int widget_icon_set = NO_ICON_SET;
+  QString widget_icon_set = "NONE";
   if (ui->general_icon_letter->isChecked ())
-    widget_icon_set = LETTER_ICON_SET;
+    widget_icon_set = "LETTER";
   else if (ui->general_icon_graphic->isChecked ())
-    widget_icon_set = GRAPHIC_ICON_SET;
+    widget_icon_set = "GRAPHIC";
   settings->setValue ("DockWidgets/widget_icon_set",widget_icon_set);
   settings->setValue ("useCustomFileEditor", ui->useCustomFileEditor->isChecked ());
   settings->setValue ("customFileEditor", ui->customFileEditor->text ());
   settings->setValue ("editor/showLineNumbers", ui->editor_showLineNumbers->isChecked ());
   settings->setValue ("editor/highlightCurrentLine", ui->editor_highlightCurrentLine->isChecked ());
   settings->setValue ("editor/codeCompletion", ui->editor_codeCompletion->isChecked ());
   settings->setValue ("editor/fontName", ui->editor_fontName->currentFont().family());
   settings->setValue ("editor/fontSize", ui->editor_fontSize->value());
