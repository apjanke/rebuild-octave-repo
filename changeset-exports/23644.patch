# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1497888157 14400
#      Mon Jun 19 12:02:37 2017 -0400
# Node ID 3177e276e60f00b57a4ca4bed8a5c5c4dd3073d9
# Parent  3dc16b35ba2c14ba49b20085cc1281020bad1656
avoid inifite recursion in symbol table glob and regexp functions

* symtab.h (symbol_table::glob_variables,
symbol_table::regexp_variables): Avoid infinite recursion error from
previous change.

diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -1378,37 +1378,43 @@ public:
 
     return retval;
   }
 
   std::list<symbol_record> glob_variables (const string_vector& patterns)
   {
     std::list<symbol_record> retval;
 
+    if (! m_current_scope)
+      return retval;
+
     size_t len = patterns.numel ();
 
     for (size_t i = 0; i < len; i++)
       {
-        std::list<symbol_record> tmp = glob_variables (patterns[i]);
+        std::list<symbol_record> tmp = m_current_scope->glob (patterns[i]);
 
         retval.insert (retval.begin (), tmp.begin (), tmp.end ());
       }
 
     return retval;
   }
 
   std::list<symbol_record> regexp_variables (const string_vector& patterns)
   {
     std::list<symbol_record> retval;
 
+    if (! m_current_scope)
+      return retval;
+
     size_t len = patterns.numel ();
 
     for (size_t i = 0; i < len; i++)
       {
-        std::list<symbol_record> tmp = regexp_variables (patterns[i]);
+        std::list<symbol_record> tmp = m_current_scope->regexp (patterns[i]);
 
         retval.insert (retval.begin (), tmp.begin (), tmp.end ());
       }
 
     return retval;
   }
 
   std::list<std::string> user_function_names (void)
