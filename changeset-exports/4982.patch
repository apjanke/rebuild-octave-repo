# HG changeset patch
# User jwe
# Date 1094824098 0
#      Fri Sep 10 13:48:18 2004 +0000
# Node ID c0866f89c43db7498db390498faa6bbd0de9025e
# Parent  0e7d04102ccfeb2eee5d739710ba3371137c6a79
[project @ 2004-09-10 13:48:18 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2004-09-10  David Bateman  <dbateman@free.fr>
+
+	* ov-intx.h (OCTAVE_VALUE_INT_MATRIX_T::double_value,
+	OCTAVE_VALUE_INT_MATRIX_T::scalar_value,
+	OCTAVE_VALUE_INT_SCALAR_T::double_value,
+	OCTAVE_VALUE_INT_SCALAR_T::scalar_value): New functions.
+
 2004-09-10  John W. Eaton  <jwe@octave.org>
 
 	* ov-base-scalar.h (octave_base_scalar::clone,
 	octave_base_scalar::empty_clone): New functions.
 
 2004-09-09  John W. Eaton  <jwe@octave.org>
 
 	* pt-pr-code.h (tree_print_code::newline): New optional arg, alt_nl.
diff --git a/src/ov-intx.h b/src/ov-intx.h
--- a/src/ov-intx.h
+++ b/src/ov-intx.h
@@ -30,16 +30,17 @@ Software Foundation, 59 Temple Place - S
 #include "so-array.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "oct-stream.h"
 #include "ov-base.h"
 #include "ov-base-int.h"
 #include "ov-typeinfo.h"
+#include "gripes.h"
 
 class
 OCTAVE_VALUE_INT_MATRIX_T
   : public octave_base_int_matrix<OCTAVE_INT_NDARRAY_T>
 {
 public:
 
   OCTAVE_VALUE_INT_MATRIX_T (void)
@@ -57,16 +58,42 @@ public:
   octave_value *
   empty_clone (void) const
     { return new OCTAVE_VALUE_INT_MATRIX_T (); }
 
   OCTAVE_INT_NDARRAY_T
   OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION (void) const
     { return matrix; }
 
+  double
+  double_value (bool = false) const
+    {
+      double retval = lo_ieee_nan_value ();
+
+      if (numel () > 0)
+	{
+	  // XXX FIXME XXX -- is warn_fortran_indexing the right variable here?
+	  if (Vwarn_fortran_indexing)
+	    gripe_implicit_conversion (type_name (), "real scalar");
+
+	  retval = double (matrix (0, 0));
+	}
+      else
+	gripe_invalid_conversion (type_name (), "real scalar");
+
+      return retval;
+      
+    }
+
+  double
+  scalar_value (bool = false) const
+    {
+      return double_value ();
+    }
+
   NDArray
   array_value (bool = false) const
     { 
       NDArray retval (matrix.dims ()); 
       int nel = matrix.numel ();
       for (int i = 0; i < nel; i++)
         retval(i) = double (matrix(i));
       return retval;
@@ -150,16 +177,28 @@ public:
 
   OCTAVE_INT_NDARRAY_T
   OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION (void) const
     { return OCTAVE_INT_NDARRAY_T (dim_vector (1, 1), scalar); }
 
   octave_value resize (const dim_vector& dv) const
     { OCTAVE_INT_NDARRAY_T retval (dv); if (dv.numel()) retval(0) = scalar; return retval; }
 
+  double
+  double_value (bool = false) const
+    {
+      return double (scalar);
+    }
+
+  double
+  scalar_value (bool = false) const
+    {
+      return double (scalar);
+    }
+
   NDArray
   array_value (bool = false) const
     { 
       NDArray retval (dim_vector (1,1)); 
       retval(0) = double (scalar);
       return retval;
     }
 
