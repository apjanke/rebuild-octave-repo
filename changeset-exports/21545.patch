# HG changeset patch
# User Rik <rik@octave.org>
# Date 1459116924 25200
#      Sun Mar 27 15:15:24 2016 -0700
# Node ID a81c9a0a05e34f551644c8c0ee6b02352790d38e
# Parent  30bf9a4d467ac38df300b5092ab6078a3dea86ac
doc: Correct typos in lu documentation.

* lu.cc: Change 'spare' to 'sparse'.  Cuddle parentheses for indexing.

diff --git a/libinterp/corefcn/lu.cc b/libinterp/corefcn/lu.cc
--- a/libinterp/corefcn/lu.cc
+++ b/libinterp/corefcn/lu.cc
@@ -64,18 +64,18 @@ DEFUN (lu, args, nargout,
 @deftypefnx {} {[@var{L}, @var{U}, @var{P}, @var{Q}] =} lu (@var{S})\n\
 @deftypefnx {} {[@var{L}, @var{U}, @var{P}, @var{Q}, @var{R}] =} lu (@var{S})\n\
 @deftypefnx {} {[@dots{}] =} lu (@var{S}, @var{thres})\n\
 @deftypefnx {} {@var{y} =} lu (@dots{})\n\
 @deftypefnx {} {[@dots{}] =} lu (@dots{}, \"vector\")\n\
 @cindex LU decomposition\n\
 Compute the LU@tie{}decomposition of @var{A}.\n\
 \n\
-If @var{A} is full subroutines from @sc{lapack} are used and if @var{A} is\n\
-sparse then @sc{umfpack} is used.\n\
+If @var{A} is full then subroutines from @sc{lapack} are used, and if\n\
+@var{A} is sparse then @sc{umfpack} is used.\n\
 \n\
 The result is returned in a permuted form, according to the optional return\n\
 value @var{P}.  For example, given the matrix @code{a = [1, 2; 3, 4]},\n\
 \n\
 @example\n\
 [l, u, p] = lu (@var{a})\n\
 @end example\n\
 \n\
@@ -98,17 +98,17 @@ p =\n\
 \n\
   0  1\n\
   1  0\n\
 @end group\n\
 @end example\n\
 \n\
 The matrix is not required to be square.\n\
 \n\
-When called with two or three output arguments and a spare input matrix,\n\
+When called with two or three output arguments and a sparse input matrix,\n\
 @code{lu} does not attempt to perform sparsity preserving column\n\
 permutations.  Called with a fourth output argument, the sparsity\n\
 preserving column transformation @var{Q} is returned, such that\n\
 @code{@var{P} * @var{A} * @var{Q} = @var{L} * @var{U}}.\n\
 \n\
 Called with a fifth output argument and a sparse input matrix,\n\
 @code{lu} attempts to use a scaling factor @var{R} on the input matrix\n\
 such that\n\
@@ -120,18 +120,18 @@ threshold can be given.  @var{thres} can
 it defines the @sc{umfpack} pivoting tolerance for both symmetric and\n\
 unsymmetric cases.  If @var{thres} is a 2-element vector, then the first\n\
 element defines the pivoting tolerance for the unsymmetric @sc{umfpack}\n\
 pivoting strategy and the second for the symmetric strategy.  By default,\n\
 the values defined by @code{spparms} are used ([0.1, 0.001]).\n\
 \n\
 Given the string argument @qcode{\"vector\"}, @code{lu} returns the values\n\
 of @var{P} and @var{Q} as vector values, such that for full matrix,\n\
-@code{@var{A} (@var{P},:) = @var{L} * @var{U}}, and @code{@var{R}(@var{P},:)\n\
-* @var{A} (:, @var{Q}) = @var{L} * @var{U}}.\n\
+@code{@var{A}(@var{P},:) = @var{L} * @var{U}}, and @code{@var{R}(@var{P},:)\n\
+* @var{A}(:,@var{Q}) = @var{L} * @var{U}}.\n\
 \n\
 With two output arguments, returns the permuted forms of the upper and\n\
 lower triangular matrices, such that @code{@var{A} = @var{L} * @var{U}}.\n\
 With one output argument @var{y}, then the matrix returned by the @sc{lapack}\n\
 routines is returned.  If the input matrix is sparse then the matrix @var{L}\n\
 is embedded into @var{U} to give a return value similar to the full case.\n\
 For both full and sparse matrices, @code{lu} loses the permutation\n\
 information.\n\
