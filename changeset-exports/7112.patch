# HG changeset patch
# User dbateman
# Date 1194395052 0
#      Wed Nov 07 00:24:12 2007 +0000
# Node ID f90a8188c9c28de1aeee6788ed987442af786b66
# Parent  9c73ef1819c7718b6d1cb45fd9e1ddfc0481ca23
[project @ 2007-11-07 00:24:11 by dbateman]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2007-11-06  David Bateman  <dbateman@free.fr>
+
+	* plot/hist.m: Pass any additional arguments to bar for
+	treatment. Create a default x value that is always a vector.
+
 2007-11-06  Thomas Treichl  <Thomas.Treichl@gmx.net>
 
 	* pkg/pkg.m.m: Check for environment variables CC, CXX, AR, RANLIB
 	when calling ./configure and add quotes to preserve spaces.
 
 2007-11-06  Kai Habel  <kai.habel@gmx.de>
 
 	* plot/pcolor.m, plot/shading.m, plot/surf.m, plot/surface.m:
@@ -13,17 +18,17 @@ 2007-11-06  Kai Habel  <kai.habel@gmx.de
 
 	* image/colormap.m: Also return current colormap if nargout and
 	nargin are both 0.
 
 2007-11-05  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* startup/inputrc: Delete key bindings starting with \340 code.
 
-2007-11-06  David Bateman  <dbateman@free.fr>
+2007-11-05  David Bateman  <dbateman@free.fr>
 
 	* linear-algebra/__norm__.m: Scale frobenius norm by infinity norm
 	to avoid issues of over- and underflow.  From Rolf Fabian
 	<Rolf.Fabian@gmx.de>.
 
 2007-11-02  Olli Saarela  <Olli.Saarela@kcl.fi>
 
 	* time/asctime.m, general/structfun.m: Fix broken @examples in
diff --git a/scripts/plot/hist.m b/scripts/plot/hist.m
--- a/scripts/plot/hist.m
+++ b/scripts/plot/hist.m
@@ -38,41 +38,43 @@
 ##
 ## With two output arguments, produce the values @var{nn} and @var{xx} such
 ## that @code{bar (@var{xx}, @var{nn})} will plot the histogram.
 ## @seealso{bar}
 ## @end deftypefn
 
 ## Author: jwe
 
-function [nn, xx] = hist (y, x, norm)
+function [nn, xx] = hist (y, varargin)
 
-  if (nargin < 1 || nargin > 3)
+  if (nargin < 1)
     print_usage ();
   endif
 
   arg_is_vector = isvector (y);
 
   if (rows (y) == 1)
     y = y(:);
   endif
 
   if (isreal (y))
-    max_val = max (y);
-    min_val = min (y);
+    max_val = max (y(:));
+    min_val = min (y(:));
   else
     error ("hist: first argument must be a vector");
   endif
 
-  if (nargin == 1)
+  iarg = 1;
+  if (nargin == 1 || ischar (varargin{iarg}))
     n = 10;
     x = [0.5:n]'/n;
     x = x * (max_val - min_val) + ones(size(x)) * min_val;
   else
     ## nargin is either 2 or 3
+    x = varargin {iarg++};
     if (isscalar (x))
       n = x;
       if (n <= 0)
         error ("hist: number of bins must be positive");
       endif
       x = [0.5:n]'/n;
       x = x * (max_val - min_val) + ones(size(x)) * min_val;
     elseif (isreal (x))
@@ -108,31 +110,34 @@ function [nn, xx] = hist (y, x, norm)
     t1 = zeros (1, columns (y));
     t2 = reshape (chist(idx > len), size (cutoff));
     t3 = chist(end,:) - sum (isnan (y));
     chist = [t1; t2; t3];
   endif
 
   freq = diff (chist);
 
-  if (nargin == 3)
+  if (nargin > 2 && !ischar (varargin{iarg}))
     ## Normalise the histogram.
+    norm = varargin{iarg++};
     freq = freq / rows (y) * norm;
   endif
 
   if (nargout > 0)
     if (arg_is_vector)
       nn = freq';
       xx = x';
     else
       nn = freq;
       xx = x;
     endif
+  elseif (size (freq, 2) != 1)
+    bar (x, freq, 0.8, varargin{iarg:end});
   else
-    bar (x, freq, 1.0);
+    bar (x, freq, 1.0, varargin{iarg:end});
   endif
 
 endfunction
 
 %!test
 %!  [nn,xx]=hist([1:4],3);
 %!  assert(xx, [1.5,2.5,3.5]);
 %!  assert(nn, [2,1,1]);
@@ -141,17 +146,17 @@ endfunction
 %!  assert(xx, [1.5,2.5,3.5]);
 %!  assert(nn, [2,1,1]);
 %!test
 %!  [nn,xx]=hist([1 1 1 NaN NaN NaN 2 2 3],[1 2 3]);
 %!  assert(xx, [1,2,3]);
 %!  assert(nn, [3,2,1]);
 %!test
 %!  [nn,xx]=hist([[1:4]',[1:4]'],3);
-%!  assert(xx, [[1.5,2.5,3.5]',[1.5,2.5,3.5]']);
+%!  assert(xx, [1.5;2.5;3.5]);
 %!  assert(nn, [[2,1,1]',[2,1,1]']);
 %!assert(hist(1,1),1);
 %!test
 %!  for n = [10, 30, 100, 1000]
 %!    assert( sum(hist([1:n], n)), n );
 %!    assert( sum(hist([1:n], [2:n-1])), n);
 %!    assert( sum(hist([1:n], [1:n])), n );
 %!    assert( sum(hist([1:n], 29)), n);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -4,16 +4,18 @@ 2007-11-06  Kai Habel  <kai.habel@gmx.de
 	cdata, facecolor, facealpha, edgecolor, linestyle,
 	linewidth, marker, markeredgecolor, markerfacecolor, markersize.
 	* graphics.cc (surface::properties::properties,
 	surface::properties::set, surface::properties::get,
 	surface::properties::factory_defaults): Handle new properities.
 
 2007-11-06  David Bateman  <dbateman@free.fr>
 
+	* data.cc (DATA_REDUCTION): Handle the 'native' and 'double'
+	arguments of the Fsum function.
 	* OPERATORS/op-bm-bm.cc (matrix_to_bool_matrix,
 	scalar_to_bool_matrix): New type conversion functions.
 	(install_bm_bm_ops): Install new type conversions functions.
 
 2007-11-06  Michael Goffioul <michael.goffioul@gmail.com>
 
 	* toplev.cc (Fsystem) [__WIN32__ && ! __CYGWIN__]:
 	Quote the complete command.
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -365,16 +365,122 @@ sign as @var{x}.  If @var{y} is zero, th
 	error ("fmod: nonconformant matrices");
     }
   else
     print_usage ();
 
   return retval;
 }
 
+#define NATIVE_REDUCTION_1(FCN, TYPE, DIM) \
+  (arg.is_ ## TYPE ## _type ()) \
+    { \
+      TYPE ## NDArray tmp = arg. TYPE ##_array_value (); \
+      \
+      if (! error_state) \
+        retval = tmp.FCN (DIM); \
+    }
+
+#define NATIVE_REDUCTION(FCN) \
+ \
+  octave_value retval; \
+ \
+  int nargin = args.length (); \
+ \
+  bool isnative = false; \
+  \
+  if (nargin > 1 && args(nargin - 1).is_string ()) \
+    { \
+      std::string str = args(nargin - 1).string_value (); \
+      \
+      if (! error_state) \
+	{ \
+	  if (str == "native") \
+	    isnative = true; \
+	  else if (str != "double") /* Ignore double as no single type */ \
+	    error ("sum: unrecognized string argument"); \
+          nargin --; \
+	} \
+    } \
+  \
+  if (nargin == 1 || nargin == 2) \
+    { \
+      octave_value arg = args(0); \
+ \
+      int dim = (nargin == 1 ? -1 : args(1).int_value (true) - 1); \
+ \
+      if (! error_state) \
+	{ \
+	  if (dim >= -1) \
+	    { \
+              if (isnative) \
+                { \
+                  if NATIVE_REDUCTION_1 (FCN, uint8, dim) \
+                  else if NATIVE_REDUCTION_1 (FCN, uint16, dim) \
+                  else if NATIVE_REDUCTION_1 (FCN, uint32, dim) \
+                  else if NATIVE_REDUCTION_1 (FCN, uint64, dim) \
+                  else if NATIVE_REDUCTION_1 (FCN, int8, dim) \
+                  else if NATIVE_REDUCTION_1 (FCN, int16, dim) \
+                  else if NATIVE_REDUCTION_1 (FCN, int32, dim) \
+                  else if NATIVE_REDUCTION_1 (FCN, int64, dim) \
+                  else if NATIVE_REDUCTION_1 (FCN, bool, dim) \
+                  else if (arg.is_char_matrix ()) \
+                    { \
+                       error (#FCN, ": invalid char type"); \
+                    } \
+	          else if (arg.is_complex_type ()) \
+		    { \
+		      ComplexNDArray tmp = arg.complex_array_value (); \
+                      \
+		      if (! error_state) \
+		        retval = tmp.FCN (dim); \
+		    } \
+	          else if (arg.is_real_type ()) \
+		    { \
+		      NDArray tmp = arg.array_value (); \
+                      \
+		      if (! error_state) \
+		        retval = tmp.FCN (dim); \
+		    } \
+                  else \
+		    { \
+		      gripe_wrong_type_arg (#FCN, arg); \
+		      return retval; \
+		    } \
+                } \
+	      else if (arg.is_real_type ()) \
+		{ \
+		  NDArray tmp = arg.array_value (); \
+                  \
+		  if (! error_state) \
+		    retval = tmp.FCN (dim); \
+		} \
+	      else if (arg.is_complex_type ()) \
+		{ \
+		  ComplexNDArray tmp = arg.complex_array_value (); \
+                  \
+		  if (! error_state) \
+		    retval = tmp.FCN (dim); \
+		} \
+	      else \
+		{ \
+		  gripe_wrong_type_arg (#FCN, arg); \
+		  return retval; \
+		} \
+	    } \
+	  else \
+	    error (#FCN ": invalid dimension argument = %d", dim + 1); \
+	} \
+      \
+    } \
+  else \
+    print_usage (); \
+ \
+  return retval
+
 #define DATA_REDUCTION(FCN) \
  \
   octave_value retval; \
  \
   int nargin = args.length (); \
  \
   if (nargin == 1 || nargin == 2) \
     { \
@@ -1208,26 +1314,47 @@ Return the number of columns of @var{a}.
     print_usage ();
 
   return retval;
 }
 
 DEFUN (sum, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} sum (@var{x}, @var{dim})\n\
+@deftypefnx {Built-in Function} {} sum (@dots{}, 'native')\n\
 Sum of elements along dimension @var{dim}.  If @var{dim} is\n\
 omitted, it defaults to 1 (column-wise sum).\n\
 \n\
 As a special case, if @var{x} is a vector and @var{dim} is omitted,\n\
 return the sum of the elements.\n\
+\n\
+If the optional argument 'native' is given, then the sum is performed\n\
+in the same type as the original argument, rather than in the default\n\
+double type. For example\n\
+\n\
+@example\n\
+sum ([true, true])\n\
+  @result{} 2\n\
+sum ([true, true], 'native')\n\
+  @result{} true\n\
+@end example\n\
 @end deftypefn")
 {
-  DATA_REDUCTION (sum);
+  NATIVE_REDUCTION (sum);
 }
 
+/*
+
+%!assert (sum([true,true]), 2)
+%!assert (sum([true,true],'native'), true)
+%!assert (sum(int8([127,10,-20])), 117);
+%!assert (sum(int8([127,10,-20]),'native'), int8(107));
+
+*/
+
 DEFUN (sumsq, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} sumsq (@var{x}, @var{dim})\n\
 Sum of squares of elements along dimension @var{dim}.  If @var{dim}\n\
 is omitted, it defaults to 1 (column-wise sum of squares).\n\
 \n\
 As a special case, if @var{x} is a vector and @var{dim} is omitted,\n\
 return the sum of squares of the elements.\n\
