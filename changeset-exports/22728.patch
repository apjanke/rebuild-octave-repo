# HG changeset patch
# User Rik <rik@octave.org>
# Date 1478477895 28800
#      Sun Nov 06 16:18:15 2016 -0800
# Node ID ed99654ec281748daf6b711b1e8d66c3aff7184f
# Parent  dd2f547c21a0408b15b7aca13029b17696c0f4f3
# Parent  125391edc71b4f5cf19cb34774b17266899fbaac
maint: Periodic merge of stable to default.

diff --git a/build-aux/mk-opts.pl b/build-aux/mk-opts.pl
--- a/build-aux/mk-opts.pl
+++ b/build-aux/mk-opts.pl
@@ -908,17 +908,17 @@ DEFUN ($OPT_FCN_NAME, args, ,
        doc: /* -*- texinfo -*-
 \@deftypefn  {} {} $OPT_FCN_NAME ()
 \@deftypefnx {} {val =} $OPT_FCN_NAME (\@var{opt})
 \@deftypefnx {} {} $OPT_FCN_NAME (\@var{opt}, \@var{val})
 $DOC_STRING
 
 Options include
 
-\@table \@code
+\@table \@asis
 _END_EMIT_OPTIONS_FUNCTION_HDR_
 # FIXME: Add extra newline above
 
   for (my $i = 0; $i < $OPT_NUM; $i++)
     {
       print '@item @qcode{"', $NAME[$i], '"}', "\n";
       print $DOC_ITEM[$i] if $DOC_ITEM[$i];
     }
diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -2598,17 +2598,17 @@ end-of-file condition.
 
   return ovl (os.eof () ? 1.0 : 0.0);
 }
 
 DEFUNX ("ferror", Fferror, args, ,
         doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{msg} =} ferror (@var{fid})
 @deftypefnx {} {[@var{msg}, @var{err}] =} ferror (@var{fid})
-@deftypefnx {} {[@var{dots}] =} ferror (@var{fid}, "clear")
+@deftypefnx {} {[@dots{}] =} ferror (@var{fid}, "clear")
 Query the error status of the stream specified by file descriptor @var{fid}
 
 If an error condition exists then return a string @var{msg} describing the
 error.  Otherwise, return an empty string @qcode{""}.
 
 The second input @qcode{"clear"} is optional.  If supplied, the error
 state on the stream will be cleared.
 
@@ -2646,17 +2646,17 @@ whether the next operation will result i
 DEFUNX ("popen", Fpopen, args, ,
         doc: /* -*- texinfo -*-
 @deftypefn {} {@var{fid} =} popen (@var{command}, @var{mode})
 Start a process and create a pipe.
 
 The name of the command to run is given by @var{command}.  The argument
 @var{mode} may be
 
-@table @code
+@table @asis
 @item @qcode{"r"}
 The pipe will be connected to the standard output of the process, and
 open for reading.
 
 @item @qcode{"w"}
 The pipe will be connected to the standard input of the process, and
 open for writing.
 @end table
diff --git a/scripts/general/interp2.m b/scripts/general/interp2.m
--- a/scripts/general/interp2.m
+++ b/scripts/general/interp2.m
@@ -216,21 +216,27 @@ function ZI = interp2 (varargin)
       d = Z(2:zr, 2:zc) - a - b - c;
 
       ## scale XI, YI values to a 1-spaced grid
       Xsc = (XI - X(xidx)) ./ (diff (X)(xidx));
       Ysc = (YI - Y(yidx)) ./ (diff (Y)(yidx));
 
       ## Get 2D index.
       idx = sub2ind (size (a), yidx, xidx);
-      ## We can dispose of the 1D indices at this point to save memory.
+      ## Dispose of the 1D indices at this point to save memory.
       clear xidx yidx;
 
-      ## apply plane equation
-      ZI = a(idx) + b(idx).*Xsc + c(idx).*Ysc + d(idx).*Xsc.*Ysc;
+      ## Apply plane equation
+      ## Handle case where idx and coefficients are both vectors and resulting
+      ## coeff(idx) follows orientation of coeff, rather than that of idx.
+      forient = @(x) reshape (x, size (idx));
+      ZI =   forient (a(idx))        ...
+           + forient (b(idx)) .* Xsc ...
+           + forient (c(idx)) .* Ysc ...
+           + forient (d(idx)) .* Xsc.*Ysc;
 
     elseif (strcmp (method, "nearest"))
       ii = (XI - X(xidx) >= X(xidx + 1) - XI);
       jj = (YI - Y(yidx) >= Y(yidx + 1) - YI);
       idx = sub2ind (size (Z), yidx+jj, xidx+ii);
       ZI = Z(idx);
 
     elseif (strcmp (method, "pchip") || strcmp (method, "cubic"))
@@ -522,32 +528,34 @@ endfunction
 %! yi = [3,8]';
 %! assert (interp2 (x,y,orig, xi, yi), [NA,NA;NA,NA]);
 %! assert (interp2 (x,y,orig, xi, yi,"linear", 0), [0,0;0,0]);
 %! assert (interp2 (x,y,orig, xi, yi,"linear", 2), [2,2;2,2]);
 %! assert (interp2 (x,y,orig, xi, yi,"spline", 2), [2,2;2,2]);
 %! assert (interp2 (x,y,orig, xi, yi,"linear", 0+1i), [0+1i,0+1i;0+1i,0+1i]);
 %! assert (interp2 (x,y,orig, xi, yi,"spline"), [27,43;512,528]);
 
-
 %!test  # for values at boundaries
 %! A = [1,2;3,4];
 %! x = [0,1];
 %! y = [2,3]';
 %! assert (interp2 (x,y,A,x,y,"linear"), A);
 %! assert (interp2 (x,y,A,x,y,"nearest"), A);
 
 %!test  # for Matlab-compatible rounding for 'nearest'
 %! X = meshgrid (1:4);
 %! assert (interp2 (X, 2.5, 2.5, "nearest"), 3);
 
 ## re-order monotonically decreasing
 %!assert <41838> (interp2 ([1 2 3], [3 2 1], magic (3), 2.5, 3), 3.5)
 %!assert <41838> (interp2 ([3 2 1], [1 2 3], magic (3), 1.5, 1), 3.5)
 
+## Linear interpretation with vector XI doesn't lead to matrix output
+%!assert <49506> (interp2 ([2 3], [2 3 4], [1 2; 3 4; 5 6], [2 3], 3, "linear"), [3 4])
+
 %!shared z, zout, tol
 %! z = [1 3 5; 3 5 7; 5 7 9];
 %! zout = [1 2 3 4 5; 2 3 4 5 6; 3 4 5 6 7; 4 5 6 7 8; 5 6 7 8 9];
 %! tol = 2 * eps;
 %!
 %!assert (interp2 (z), zout, tol)
 %!assert (interp2 (z, "linear"), zout, tol)
 %!assert (interp2 (z, "pchip"), zout, tol)
