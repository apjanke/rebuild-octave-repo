# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1511520663 -3600
#      Fri Nov 24 11:51:03 2017 +0100
# Node ID 0c1417a8d9d0eb63a72e6f33c7901445a82de267
# Parent  c8b06355e7efeb5f7bbfe2fd05c818bbd80e1644
eigs should return NaNs for unconverged eigenpairs (bug #49523).

* eigs-base.cc (EigsRealSymmetric*): set to NaN unconverged eigenvalues and
eigenvectors.
* eigs-base.cc (EigsRealNonSymmetric*): set to NaN or NaN+1i*NaN unconverged
eigenvalues and eigenvectors.
* eigs-base.cc (EigsComplex*): set to NaN+1i*NaN unconverged eigenvalues and
eigenvectors.

* eigs.m: Add BIST tests for unconverged eigenvalues.

diff --git a/liboctave/numeric/eigs-base.cc b/liboctave/numeric/eigs-base.cc
--- a/liboctave/numeric/eigs-base.cc
+++ b/liboctave/numeric/eigs-base.cc
@@ -856,37 +856,45 @@ EigsRealSymmetricMatrix (const M& m, con
      F77_CHAR_ARG_LEN(2));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler)
       ("eigs: unrecoverable exception encountered in dseupd");
 
   if (info2 == 0)
     {
-      F77_INT k2 = k / 2;
+      for (F77_INT i = ip(4); i < k; i++)
+        d[i] = octave::numeric_limits<double>::NaN ();
+      F77_INT k2 = ip(4) / 2;
       if (typ != "SM" && typ != "BE" && ! (typ == "SA" && rvec))
         {
           for (F77_INT i = 0; i < k2; i++)
             {
               double dtmp = d[i];
-              d[i] = d[k - i - 1];
-              d[k - i - 1] = dtmp;
+              d[i] = d[ip(4) - i - 1];
+              d[ip(4) - i - 1] = dtmp;
             }
         }
 
       if (rvec)
         {
+          for (F77_INT i = ip(4); i < k; i++)
+            {
+              F77_INT off1 = i * n;
+              for (F77_INT j = 0; j < n; j++)
+                z[off1 + j] = octave::numeric_limits<double>::NaN ();
+            }
           if (typ != "SM" && typ != "BE" && typ != "SA")
             {
               OCTAVE_LOCAL_BUFFER (double, dtmp, n);
 
               for (F77_INT i = 0; i < k2; i++)
                 {
                   F77_INT off1 = i * n;
-                  F77_INT off2 = (k - i - 1) * n;
+                  F77_INT off2 = (ip(4) - i - 1) * n;
 
                   if (off1 == off2)
                     continue;
 
                   for (F77_INT j = 0; j < n; j++)
                     dtmp[j] = z[off1 + j];
 
                   for (F77_INT j = 0; j < n; j++)
@@ -1165,32 +1173,40 @@ EigsRealSymmetricMatrixShift (const M& m
      F77_CHAR_ARG_LEN(1) F77_CHAR_ARG_LEN(1) F77_CHAR_ARG_LEN(2));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler)
       ("eigs: unrecoverable exception encountered in dseupd");
 
   if (info2 == 0)
     {
-      F77_INT k2 = k / 2;
+      for (F77_INT i = ip(4); i < k; i++)
+        d[i] = octave::numeric_limits<double>::NaN ();
+      F77_INT k2 = ip(4) / 2;
       for (F77_INT i = 0; i < k2; i++)
         {
           double dtmp = d[i];
-          d[i] = d[k - i - 1];
-          d[k - i - 1] = dtmp;
+          d[i] = d[ip(4) - i - 1];
+          d[ip(4) - i - 1] = dtmp;
         }
 
       if (rvec)
         {
           OCTAVE_LOCAL_BUFFER (double, dtmp, n);
 
+          for (F77_INT i = ip(4); i < k; i++)
+            {
+              F77_INT off1 = i * n;
+              for (F77_INT j = 0; j < n; j++)
+                z[off1 + j] = octave::numeric_limits<double>::NaN ();
+            }
           for (F77_INT i = 0; i < k2; i++)
             {
               F77_INT off1 = i * n;
-              F77_INT off2 = (k - i - 1) * n;
+              F77_INT off2 = (ip(4) - i - 1) * n;
 
               if (off1 == off2)
                 continue;
 
               for (F77_INT j = 0; j < n; j++)
                 dtmp[j] = z[off1 + j];
 
               for (F77_INT j = 0; j < n; j++)
@@ -1413,37 +1429,45 @@ EigsRealSymmetricFunc (EigsFunc fun, oct
      F77_CHAR_ARG_LEN(1) F77_CHAR_ARG_LEN(1) F77_CHAR_ARG_LEN(2));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler)
       ("eigs: unrecoverable exception encountered in dseupd");
 
   if (info2 == 0)
     {
-      F77_INT k2 = k / 2;
+      for (F77_INT i = ip(4); i < k; i++)
+        d[i] = octave::numeric_limits<double>::NaN ();
+      F77_INT k2 = ip(4) / 2;
       if (typ != "SM" && typ != "BE")
         {
           for (F77_INT i = 0; i < k2; i++)
             {
               double dtmp = d[i];
-              d[i] = d[k - i - 1];
-              d[k - i - 1] = dtmp;
+              d[i] = d[ip(4) - i - 1];
+              d[ip(4) - i - 1] = dtmp;
             }
         }
 
       if (rvec)
         {
+          for (F77_INT i = ip(4); i < k; i++)
+            {
+              F77_INT off1 = i * n;
+              for (F77_INT j = 0; j < n; j++)
+                z[off1 + j] = octave::numeric_limits<double>::NaN ();
+            }
           if (typ != "SM" && typ != "BE")
             {
               OCTAVE_LOCAL_BUFFER (double, dtmp, n);
 
               for (F77_INT i = 0; i < k2; i++)
                 {
                   F77_INT off1 = i * n;
-                  F77_INT off2 = (k - i - 1) * n;
+                  F77_INT off2 = (ip(4) - i - 1) * n;
 
                   if (off1 == off2)
                     continue;
 
                   for (F77_INT j = 0; j < n; j++)
                     dtmp[j] = z[off1 + j];
 
                   for (F77_INT j = 0; j < n; j++)
@@ -1723,60 +1747,93 @@ EigsRealNonSymmetricMatrix (const M& m, 
   if (! rvec && ip(4) > k)
     k = ip(4);
 
   eig_val.resize (k);
   Complex *d = eig_val.fortran_vec ();
 
   if (info2 == 0)
     {
-      for (F77_INT i = 0; i < k; i++)
-        d[i] = Complex (dr[i], di[i]);
-
+      bool have_cplx_eig = false;
+      for (F77_INT i = 0; i < ip(4); i++)
+        {
+          if (di[i] == 0)
+            d[i] = Complex (dr[i], 0.);
+          else
+            {
+              have_cplx_eig = true;
+              d[i] = Complex (dr[i], di[i]);
+            }
+        }
+      if (have_cplx_eig)
+        {
+          for (F77_INT i = ip(4); i < k; i++)
+            d[i] = Complex (octave::numeric_limits<double>::NaN (),
+                            octave::numeric_limits<double>::NaN ());
+        }
+      else
+        {
+          for (F77_INT i = ip(4); i < k; i++)
+            d[i] = Complex (octave::numeric_limits<double>::NaN (), 0.);
+        }
       if (! rvec)
         {
           // ARPACK seems to give the eigenvalues in reversed order
-          F77_INT k2 = k / 2;
+          F77_INT k2 = ip(4) / 2;
           for (F77_INT i = 0; i < k2; i++)
             {
               Complex dtmp = d[i];
-              d[i] = d[k - i - 1];
-              d[k - i - 1] = dtmp;
+              d[i] = d[ip(4) - i - 1];
+              d[ip(4) - i - 1] = dtmp;
             }
         }
       else
         {
           // When eigenvectors required, ARPACK seems to give the right order
           eig_vec.resize (n, k);
           F77_INT i = 0;
-          while (i < k)
+          while (i < ip(4))
             {
               F77_INT off1 = i * n;
               F77_INT off2 = (i+1) * n;
               if (std::imag (eig_val(i)) == 0)
                 {
                   for (F77_INT j = 0; j < n; j++)
                     eig_vec(j,i) =
-                      Complex (z[j+off1],0.);
+                      Complex (z[j+off1], 0.);
                   i++;
                 }
               else
                 {
                   for (F77_INT j = 0; j < n; j++)
                     {
                       eig_vec(j,i) =
                         Complex (z[j+off1],z[j+off2]);
-                      if (i < k - 1)
+                      if (i < ip(4) - 1)
                         eig_vec(j,i+1) =
                           Complex (z[j+off1],-z[j+off2]);
                     }
                   i+=2;
                 }
             }
-
+          if (have_cplx_eig)
+            {
+              for (F77_INT i = ip(4); i < k; i++)
+                for (F77_INT j = 0; j < n; j++)
+                  eig_vec(j,i) =
+                    Complex (octave::numeric_limits<double>::NaN (),
+                             octave::numeric_limits<double>::NaN ());
+            }
+          else
+            {
+              for (F77_INT i = ip(4); i < k; i++)
+                for (F77_INT j = 0; j < n; j++)
+                  eig_vec(j,i) =
+                    Complex (octave::numeric_limits<double>::NaN (), 0.);
+            }
           if (note3)
             eig_vec = utsolve (bt, permB, eig_vec);
         }
       if (k0 < k)
         {
           eig_val.resize (k0);
           eig_vec.resize (n, k0);
         }
@@ -2071,59 +2128,94 @@ EigsRealNonSymmetricMatrixShift (const M
   if (! rvec && ip(4) > k)
     k = ip(4);
 
   eig_val.resize (k);
   Complex *d = eig_val.fortran_vec ();
 
   if (info2 == 0)
     {
-      for (F77_INT i = 0; i < k; i++)
-        d[i] = Complex (dr[i], di[i]);
+      bool have_cplx_eig = false;
+      for (F77_INT i = 0; i < ip(4); i++)
+        {
+          if (di[i] == 0.)
+            d[i] = Complex (dr[i], 0.);
+          else
+            {
+              have_cplx_eig = true;
+              d[i] = Complex (dr[i], di[i]);
+            }
+        }
+      if (have_cplx_eig)
+        {
+          for (F77_INT i = ip(4); i < k; i++)
+            d[i] = Complex (octave::numeric_limits<double>::NaN (),
+                            octave::numeric_limits<double>::NaN ());
+        }
+      else
+        {
+          for (F77_INT i = ip(4); i < k; i++)
+            d[i] = Complex (octave::numeric_limits<double>::NaN (), 0.);
+        }
 
       if (! rvec)
         {
           // ARPACK seems to give the eigenvalues in reversed order
-          F77_INT k2 = k / 2;
+          F77_INT k2 = ip(4) / 2;
           for (F77_INT i = 0; i < k2; i++)
             {
               Complex dtmp = d[i];
-              d[i] = d[k - i - 1];
-              d[k - i - 1] = dtmp;
+              d[i] = d[ip(4) - i - 1];
+              d[ip(4) - i - 1] = dtmp;
             }
         }
       else
         {
           // When eigenvectors required, ARPACK seems to give the right order
           eig_vec.resize (n, k);
           F77_INT i = 0;
-          while (i < k)
+          while (i < ip(4))
             {
               F77_INT off1 = i * n;
               F77_INT off2 = (i+1) * n;
               if (std::imag (eig_val(i)) == 0)
                 {
                   for (F77_INT j = 0; j < n; j++)
                     eig_vec(j,i) =
-                      Complex (z[j+off1],0.);
+                      Complex (z[j+off1], 0.);
                   i++;
                 }
               else
                 {
                   for (F77_INT j = 0; j < n; j++)
                     {
                       eig_vec(j,i) =
                         Complex (z[j+off1],z[j+off2]);
-                      if (i < k - 1)
+                      if (i < ip(4) - 1)
                         eig_vec(j,i+1) =
                           Complex (z[j+off1],-z[j+off2]);
                     }
                   i+=2;
                 }
             }
+          if (have_cplx_eig)
+            {
+              for (F77_INT i = ip(4); i < k; i++)
+                for (F77_INT j = 0; j < n; j++)
+                  eig_vec(j,i) =
+                    Complex (octave::numeric_limits<double>::NaN (),
+                             octave::numeric_limits<double>::NaN ());
+            }
+          else
+            {
+              for (F77_INT i = ip(4); i < k; i++)
+                for (F77_INT j = 0; j < n; j++)
+                  eig_vec(j,i) =
+                    Complex (octave::numeric_limits<double>::NaN (), 0.);
+            }
         }
       if (k0 < k)
         {
           eig_val.resize (k0);
           eig_vec.resize (n, k0);
         }
     }
   else
@@ -2362,59 +2454,95 @@ EigsRealNonSymmetricFunc (EigsFunc fun, 
   if (! rvec && ip(4) > k)
     k = ip(4);
 
   eig_val.resize (k);
   Complex *d = eig_val.fortran_vec ();
 
   if (info2 == 0)
     {
-      for (F77_INT i = 0; i < k; i++)
-        d[i] = Complex (dr[i], di[i]);
+      bool have_cplx_eig = false;
+      for (F77_INT i = 0; i < ip(4); i++)
+        {
+          if (di[i] == 0.)
+            d[i] = Complex (dr[i], 0.);
+          else
+            {
+              have_cplx_eig = true;
+              d[i] = Complex (dr[i], di[i]);
+            }
+        }
+      if (have_cplx_eig)
+        {
+          for (F77_INT i = ip(4); i < k; i++)
+            d[i] = Complex (octave::numeric_limits<double>::NaN (),
+                            octave::numeric_limits<double>::NaN ());
+        }
+      else
+        {
+          for (F77_INT i = ip(4); i < k; i++)
+            d[i] = Complex (octave::numeric_limits<double>::NaN (), 0.);
+        }
+
 
       if (! rvec)
         {
           // ARPACK seems to give the eigenvalues in reversed order
-          octave_idx_type k2 = k / 2;
+          octave_idx_type k2 = ip(4) / 2;
           for (F77_INT i = 0; i < k2; i++)
             {
               Complex dtmp = d[i];
-              d[i] = d[k - i - 1];
-              d[k - i - 1] = dtmp;
+              d[i] = d[ip(4) - i - 1];
+              d[ip(4) - i - 1] = dtmp;
             }
         }
       else
         {
           // ARPACK seems to give the eigenvalues in reversed order
           eig_vec.resize (n, k);
           F77_INT i = 0;
-          while (i < k)
+          while (i < ip(4))
             {
               F77_INT off1 = i * n;
               F77_INT off2 = (i+1) * n;
               if (std::imag (eig_val(i)) == 0)
                 {
                   for (F77_INT j = 0; j < n; j++)
                     eig_vec(j,i) =
-                      Complex (z[j+off1],0.);
+                      Complex (z[j+off1], 0.);
                   i++;
                 }
               else
                 {
                   for (F77_INT j = 0; j < n; j++)
                     {
                       eig_vec(j,i) =
                         Complex (z[j+off1],z[j+off2]);
-                      if (i < k - 1)
+                      if (i < ip(4) - 1)
                         eig_vec(j,i+1) =
                           Complex (z[j+off1],-z[j+off2]);
                     }
                   i+=2;
                 }
             }
+          if (have_cplx_eig)
+            {
+              for (F77_INT i = ip(4); i < k; i++)
+                for (F77_INT j = 0; j < n; j++)
+                  eig_vec(j,i) =
+                    Complex (octave::numeric_limits<double>::NaN (),
+                             octave::numeric_limits<double>::NaN ());
+            }
+          else
+            {
+              for (F77_INT i = ip(4); i < k; i++)
+                for (F77_INT j = 0; j < n; j++)
+                  eig_vec(j,i) =
+                    Complex (octave::numeric_limits<double>::NaN (), 0.);
+            }
         }
       if (k0 < k)
         {
           eig_val.resize (k0);
           eig_vec.resize (n, k0);
         }
     }
   else
@@ -2673,33 +2801,45 @@ EigsComplexNonSymmetricMatrix (const M& 
      info2 F77_CHAR_ARG_LEN(1) F77_CHAR_ARG_LEN(1) F77_CHAR_ARG_LEN(2));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler)
       ("eigs: unrecoverable exception encountered in zneupd");
 
   if (info2 == 0)
     {
-      F77_INT k2 = k / 2;
+      for (F77_INT i = ip(4); i < k; i++)
+        d[i] = Complex (octave::numeric_limits<double>::NaN (),
+                        octave::numeric_limits<double>::NaN ());
+
+      F77_INT k2 = ip(4) / 2;
       for (F77_INT i = 0; i < k2; i++)
         {
           Complex ctmp = d[i];
-          d[i] = d[k - i - 1];
-          d[k - i - 1] = ctmp;
+          d[i] = d[ip(4) - i - 1];
+          d[ip(4) - i - 1] = ctmp;
         }
       eig_val.resize (k);
 
       if (rvec)
         {
           OCTAVE_LOCAL_BUFFER (Complex, ctmp, n);
 
+          for (F77_INT i = ip(4); i < k; i++)
+            {
+              F77_INT off1 = i * n;
+              for (F77_INT j = 0; j < n; j++)
+                z[off1 + j] = Complex (octave::numeric_limits<double>::NaN (),
+                                       octave::numeric_limits<double>::NaN ());
+            }
+
           for (F77_INT i = 0; i < k2; i++)
             {
               F77_INT off1 = i * n;
-              F77_INT off2 = (k - i - 1) * n;
+              F77_INT off2 = (ip(4) - i - 1) * n;
 
               if (off1 == off2)
                 continue;
 
               for (F77_INT j = 0; j < n; j++)
                 ctmp[j] = z[off1 + j];
 
               for (F77_INT j = 0; j < n; j++)
@@ -2992,33 +3132,45 @@ EigsComplexNonSymmetricMatrixShift (cons
      info2 F77_CHAR_ARG_LEN(1) F77_CHAR_ARG_LEN(1) F77_CHAR_ARG_LEN(2));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler)
       ("eigs: unrecoverable exception encountered in zneupd");
 
   if (info2 == 0)
     {
-      F77_INT k2 = k / 2;
+      for (F77_INT i = ip(4); i < k; i++)
+        d[i] = Complex (octave::numeric_limits<double>::NaN (),
+                        octave::numeric_limits<double>::NaN ());
+
+      F77_INT k2 = ip(4) / 2;
       for (F77_INT i = 0; i < k2; i++)
         {
           Complex ctmp = d[i];
-          d[i] = d[k - i - 1];
-          d[k - i - 1] = ctmp;
+          d[i] = d[ip(4) - i - 1];
+          d[ip(4) - i - 1] = ctmp;
         }
       eig_val.resize (k);
 
       if (rvec)
         {
           OCTAVE_LOCAL_BUFFER (Complex, ctmp, n);
 
+          for (F77_INT i = ip(4); i < k; i++)
+            {
+              F77_INT off1 = i * n;
+              for (F77_INT j = 0; j < n; j++)
+                z[off1 + j] = Complex (octave::numeric_limits<double>::NaN (),
+                                       octave::numeric_limits<double>::NaN ());
+            }
+
           for (F77_INT i = 0; i < k2; i++)
             {
               F77_INT off1 = i * n;
-              F77_INT off2 = (k - i - 1) * n;
+              F77_INT off2 = (ip(4) - i - 1) * n;
 
               if (off1 == off2)
                 continue;
 
               for (F77_INT j = 0; j < n; j++)
                 ctmp[j] = z[off1 + j];
 
               for (F77_INT j = 0; j < n; j++)
@@ -3255,33 +3407,45 @@ EigsComplexNonSymmetricFunc (EigsComplex
      info2 F77_CHAR_ARG_LEN(1) F77_CHAR_ARG_LEN(1) F77_CHAR_ARG_LEN(2));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler)
       ("eigs: unrecoverable exception encountered in zneupd");
 
   if (info2 == 0)
     {
-      F77_INT k2 = k / 2;
+      for (F77_INT i = ip(4); i < k; i++)
+        d[i] = Complex (octave::numeric_limits<double>::NaN (),
+                        octave::numeric_limits<double>::NaN ());
+
+      F77_INT k2 = ip(4) / 2;
       for (F77_INT i = 0; i < k2; i++)
         {
           Complex ctmp = d[i];
-          d[i] = d[k - i - 1];
-          d[k - i - 1] = ctmp;
+          d[i] = d[ip(4) - i - 1];
+          d[ip(4) - i - 1] = ctmp;
         }
       eig_val.resize (k);
 
       if (rvec)
         {
           OCTAVE_LOCAL_BUFFER (Complex, ctmp, n);
 
+          for (F77_INT i = ip(4); i < k; i++)
+            {
+              F77_INT off1 = i * n;
+              for (F77_INT j = 0; j < n; j++)
+                z[off1 + j] = Complex (octave::numeric_limits<double>::NaN (),
+                                       octave::numeric_limits<double>::NaN ());
+            }
+
           for (F77_INT i = 0; i < k2; i++)
             {
               F77_INT off1 = i * n;
-              F77_INT off2 = (k - i - 1) * n;
+              F77_INT off2 = (ip(4) - i - 1) * n;
 
               if (off1 == off2)
                 continue;
 
               for (F77_INT j = 0; j < n; j++)
                 ctmp[j] = z[off1 + j];
 
               for (F77_INT j = 0; j < n; j++)
diff --git a/scripts/sparse/eigs.m b/scripts/sparse/eigs.m
--- a/scripts/sparse/eigs.m
+++ b/scripts/sparse/eigs.m
@@ -1324,8 +1324,107 @@ endfunction
 
 %!assert (eigs (diag (1:5), 5, "sa"), [1;2;3;4;5])
 %!assert (eigs (diag (1:5), 5, "la"), [5;4;3;2;1])
 %!assert (eigs (diag (1:5), 3, "be"), [1;4;5])
 %!error
 %! A = rand (10);
 %! opts.v0 = ones (8, 1);
 %! eigs (A, 4, "sm", opts);
+%!testif HAVE_ARPACK
+%! A = toeplitz ([-2, 1, zeros(1, 8)]);
+%! A = kron (A, eye (10)) + kron (eye (10), A);
+%! opts.v0 = (1:100)';
+%! opts.maxit = 3;
+%! warning ("off", "all")
+%! d = eigs (A, 4, "lm", opts);
+%! assert (d(2:4), [NaN; NaN; NaN])
+%!testif HAVE_ARPACK
+%! A = toeplitz ([-2, 1, zeros(1, 8)]);
+%! A = kron (A, eye (10)) + kron (eye (10), A);
+%! opts.v0 = (1:100)';
+%! opts.maxit = 1;
+%! warning ("off", "all")
+%! d = eigs (A, 4, "sm", opts);
+%! assert (d(4), NaN)
+%!testif HAVE_ARPACK
+%! A = toeplitz ([-2, 1, zeros(1, 8)]);
+%! A = kron (A, eye (10)) + kron (eye (10), A);
+%! Afun = @(x) A * x;
+%! opts.v0 = (1:100)';
+%! opts.maxit = 3;
+%! opts.issym = true;
+%! warning ("off", "all")
+%! d = eigs (Afun, 100, 4, "sm", opts);
+%! assert (d(2:4), [NaN; NaN; NaN])
+%!testif HAVE_ARPACK
+%! A = toeplitz ([-2, 1, zeros(1, 8)]);
+%! A = kron (A, eye (10)) + kron (eye (10), A);
+%! A(1, 2) = 10;
+%! opts.v0 = (1:100)';
+%! opts.maxit = 5;
+%! warning ("off", "all")
+%! d = eigs (A, 4, "lm", opts);
+%! assert (d(3:4), [NaN; NaN])
+%!testif HAVE_ARPACK
+%! A = toeplitz ([0, 1, zeros(1, 8)], [0, -1, zeros(1, 8)]);
+%! A = kron (A, eye (10)) + kron (eye (10), A);
+%! opts.v0 = (1:100)';
+%! opts.maxit = 5;
+%! warning ("off", "all")
+%! d = eigs (A, 4, "lm", opts);
+%! assert (d(3:4), [NaN+1i*NaN; NaN+1i*NaN])
+%!testif HAVE_ARPACK
+%! A = magic (100);
+%! opts.v0 = (1:100)';
+%! opts.maxit = 1;
+%! warning ("off", "all")
+%! d = eigs (A, 4, "lm", opts);
+%! assert (d(4), NaN)
+%!testif HAVE_ARPACK
+%! A = toeplitz ([0, 1, zeros(1, 8)], [0, -1, zeros(1, 8)]);
+%! A(1, 1) = 1;
+%! A = kron (A, eye (10)) + kron (eye (10), A);
+%! opts.v0 = (1:100)';
+%! opts.maxit = 1;
+%! warning ("off", "all")
+%! d = eigs (A, 4, "sm", opts);
+%! assert (d(3:4), [NaN; NaN])
+%! assert (imag (d(3:4)), [0; 0])
+%!testif HAVE_ARPACK
+%! A = magic (100) / 100 + eye (100);
+%! opts.v0 = (1:100)';
+%! opts.maxit = 1;
+%! warning ("off", "all")
+%! d = eigs (A, 4, "sm", opts);
+%! assert (d(3:4), [NaN+1i*NaN; NaN+1i*NaN])
+%!testif HAVE_ARPACK
+%! A = toeplitz ([0, 1, zeros(1, 8)], [0, -1, zeros(1, 8)]);
+%! A = kron (A, eye (10)) + kron (eye (10), A);
+%! Afun = @(x) A * x;
+%! opts.v0 = (1:100)';
+%! opts.maxit = 5;
+%! warning ("off", "all")
+%! d = eigs (Afun, 100, 4, "lm", opts);
+%! assert (d(3:4), [NaN+1i*NaN; NaN+1i*NaN])
+%!testif HAVE_ARPACK
+%! A = 1i * magic (100);
+%! opts.v0 = (1:100)';
+%! opts.maxit = 1;
+%! warning ("off", "all")
+%! d = eigs (A, 4, "lm", opts);
+%! assert (d(4), NaN+1i*NaN)
+%!testif HAVE_ARPACK
+%! A = 1i * magic (100) / 100 + eye (100);
+%! opts.v0 = (1:100)';
+%! opts.maxit = 1;
+%! warning ("off", "all")
+%! d = eigs (A, 4, "sm", opts);
+%! assert (d(2:4), [NaN+1i*NaN; NaN+1i*NaN; NaN+1i*NaN])
+%!testif HAVE_ARPACK
+%! A = 1i * magic (100);
+%! Afun = @(x) A * x;
+%! opts.v0 = (1:100)';
+%! opts.maxit = 1;
+%! opts.isreal = false;
+%! warning ("off", "all")
+%! d = eigs (Afun, 100, 4, "lm", opts);
+%! assert (d(4), NaN+1i*NaN)
