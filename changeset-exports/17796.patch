# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1383078586 14400
#      Tue Oct 29 16:29:46 2013 -0400
# Node ID 6b51f5f44aea5e039864c034ccc34d771a6c061a
# Parent  0a8c35ae5ce142ba87ffbda5e7f526371c3da6d7
find symbols in proper scope when debugging (bug #40397)

* lex.h (lexical_feedback::symbol_table_context::init_scope):
Delete member variable and all uses.
(lexical_feedback::symbol_table_context::pop): Assert that the context
is not empty before popping.
(lexical_feedback::symbol_table_context::push): Use default argument.
(lexical_feedback::symbol_table_context::curr_scope): If empty, return
symbol_table::current_scope, not the initial scope in effect when the
object is created.
* oct-parse.in.yy (octave_base_parser::make_anon_fcn_handle,
octave_base_parser::recover_from_parsing_function):
Don't check for empty lexer.symtab_context here.

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -44,57 +44,47 @@ lexical_feedback
 public:
 
   // Track symbol table information when parsing functions.
 
   class symbol_table_context
   {
   public:
 
-    symbol_table_context (void)
-      : frame_stack (), init_scope (symbol_table::current_scope ())
-    {
-      push (init_scope);
-    }
+    symbol_table_context (void) : frame_stack () { }
 
     void clear (void)
     {
       while (! frame_stack.empty ())
         frame_stack.pop ();
-
-      push (init_scope);
     }
 
     bool empty (void) const { return frame_stack.empty (); }
 
     void pop (void)
     {
+      if (empty ())
+        panic_impossible ();
+
       frame_stack.pop ();
     }
 
-    void push (symbol_table::scope_id scope)
+    void push (symbol_table::scope_id scope = symbol_table::current_scope ())
     {
       frame_stack.push (scope);
     }
 
-    void push (void)
-    {
-      push (symbol_table::current_scope ());
-    }
-
     symbol_table::scope_id curr_scope (void) const
     {
-      return frame_stack.top ();
+      return empty () ? symbol_table::current_scope () : frame_stack.top ();
     }
 
   private:
 
     std::stack<symbol_table::scope_id> frame_stack;
-
-    symbol_table::scope_id init_scope;
   };
 
   // Track nesting of square brackets, curly braces, and parentheses.
 
   class bbp_nesting_level
   {
   private:
 
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -2069,19 +2069,16 @@ octave_base_parser::make_anon_fcn_handle
   // FIXME -- need to get these from the location of the @ symbol.
   int l = lexer.input_line_number;
   int c = lexer.current_input_column;
 
   tree_parameter_list *ret_list = 0;
 
   symbol_table::scope_id fcn_scope = lexer.symtab_context.curr_scope ();
 
-  if (lexer.symtab_context.empty ())
-    panic_impossible ();
-
   lexer.symtab_context.pop ();
 
   stmt->set_print_flag (false);
 
   tree_statement_list *body = new tree_statement_list (stmt);
 
   body->mark_as_anon_function_body ();
 
@@ -2985,19 +2982,16 @@ octave_base_parser::finish_function (tre
     }
 
   return retval;
 }
 
 void
 octave_base_parser::recover_from_parsing_function (void)
 {
-  if (lexer.symtab_context.empty ())
-    panic_impossible ();
-
   lexer.symtab_context.pop ();
 
   if (lexer.reading_fcn_file && curr_fcn_depth == 1
       && ! parsing_subfunctions)
     parsing_subfunctions = true;
 
   curr_fcn_depth--;
   function_scopes.pop_back ();
