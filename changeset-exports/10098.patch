# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1263416818 -3600
#      Wed Jan 13 22:06:58 2010 +0100
# Node ID d3451c1496f846fad0f520cabba0bd0bb2f29bdf
# Parent  462fa695a565624426e343c6d04094d56a067071
allow the general case in Array<T>::compute_index

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -163,33 +163,28 @@ Array<T>::squeeze (void) const
 
   return retval;
 }
 
 template <class T>
 octave_idx_type
 Array<T>::compute_index (const Array<octave_idx_type>& ra_idx) const
 {
-  octave_idx_type retval = -1;
-
-  int n = dimensions.length ();
-
-  if (n > 0 && n == ra_idx.length ())
+  octave_idx_type retval = 0;
+
+  int n = dimensions.length (), ni = ra_idx.length ();
+
+  while (ni > n)
+    retval += ra_idx(--ni);
+
+  while (ni > 0)
     {
-      retval = ra_idx(--n);
-
-      while (--n >= 0)
-	{
-	  retval *= dimensions(n);
-	  retval += ra_idx(n);
-	}
+      retval *= dimensions(--ni);
+      retval += ra_idx(ni);
     }
-  else
-    (*current_liboctave_error_handler)
-      ("Array<T>::compute_index: invalid ra_idxing operation");
 
   return retval;
 }
 
 template <class T>
 T&
 Array<T>::range_error (const char *fcn, octave_idx_type n) const
 {
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2010-01-13  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.cc (Array<T>::compute_index): Generalize to the case of
+	unequal lengths.
+
 2010-01-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dim-vector.h (dim_vector::chop_trailing_singletons): Only uniquify
 	if really needed.
 	* Array.h (Array<T>::Array (T*, const dim_vector&)): Call
 	chop_trailing_singletons.
 	(Array<T>::Array (const Array<T>&, const dim_vector&,
 	octave_idx_type...)): Ditto.
