# HG changeset patch
# User jwe
# Date 832898502 0
#      Fri May 24 00:41:42 1996 +0000
# Node ID 4028b7c799274c943b0373a343eee9d7a610a361
# Parent  68c75296c582a623397275a1528d391e0bd1d423
[project @ 1996-05-24 00:39:30 by jwe]

diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -403,16 +403,34 @@ xisupper (int c)
 }
 
 int
 xisxdigit (int c)
 {
   return isxdigit (c);
 }
 
+int
+xtoascii (int c)
+{
+  return toascii (c);
+}
+
+int
+xtolower (int c)
+{
+  return tolower (c);
+}
+
+int
+xtoupper (int c)
+{
+  return toupper (c);
+}
+
 void
 install_mapper_functions (void)
 {
   DEFUN_MAPPER (abs, 0, fabs, abs, 0, 0.0, 0.0, 0,
     "abs (X): compute abs (X) for each element of X");
 
   DEFUN_MAPPER (acos, 0, acos, 0, acos, -1.0, 1.0, 1,
     "acos (X): compute acos (X) for each element of X");
@@ -544,16 +562,25 @@ install_mapper_functions (void)
     "sqrt (X): compute sqrt (X) for each element of X");
 
   DEFUN_MAPPER (tan, 0, tan, 0, tan, 0.0, 0.0, 0,
     "tan (X): compute tan (X) for each element of X");
 
   DEFUN_MAPPER (tanh, 0, tanh, 0, tanh, 0.0, 0.0, 0,
     "tanh (X): compute tanh (X) for each element of X");
 
+  DEFUN_MAPPER (toascii, xtoascii, 0, 0, 0, 0.0, 0.0, 1,
+    "toascii (STRING): return ASCII representation of STRING in a matrix");
+
+  DEFUN_MAPPER (tolower, xtolower, 0, 0, 0, 0.0, 0.0, 2,
+    "tolower (STRING): convert upper case characters to lower case in STRING");
+
+  DEFUN_MAPPER (toupper, xtoupper, 0, 0, 0, 0.0, 0.0, 2,
+    "toupper (STRING): convert lower case characters to upper case in STRING");
+
   DEFALIAS (gammaln, lgamma);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/pt-fvc.cc b/src/pt-fvc.cc
--- a/src/pt-fvc.cc
+++ b/src/pt-fvc.cc
@@ -653,39 +653,76 @@ apply_mapper_fcn (const octave_value& ar
 	{
 	  charMatrix chm = tmp.char_matrix_value ();
 
 	  if (! error_state)
 	    {
 	      int nr = chm.rows ();
 	      int nc = chm.cols ();
 
-	      Matrix result (nr, nc);
+	      switch (m_fcn.flag)
+		{
+		case 0:
+		  {
+		    Matrix result (nr, nc);
+
+		    // islapha and friends can return any nonzero value
+		    // to mean true, but we want to return 1 or 0 only.
 
-	      // islapha and friends can return any nonzero value to
-	      // mean true.
+		    for (int j = 0; j < nc; j++)
+		      for (int i = 0; i < nr; i++)
+			result.elem (i, j)
+			  = (*m_fcn.ch_mapper) (chm.elem (i, j)) ? 1 : 0;
+
+		    retval = result;
+		  }
+		  break;
+
+		case 1:
+		  {
+		    Matrix result (nr, nc);
 
-	      for (int j = 0; j < nc; j++)
-		for (int i = 0; i < nr; i++)
-		  result.elem (i, j)
-		    = (*m_fcn.ch_mapper) (chm.elem (i, j)) ? 1 : 0;
+		    for (int j = 0; j < nc; j++)
+		      for (int i = 0; i < nr; i++)
+			result.elem (i, j)
+			  = (*m_fcn.ch_mapper) (chm.elem (i, j));
+
+		    retval = result;
+		  }
+		  break;
+
+		case 2:
+		  {
+		    charMatrix result (nr, nc);
 
-	      retval = result;
+		    for (int j = 0; j < nc; j++)
+		      for (int i = 0; i < nr; i++)
+			result.elem (i, j)
+			  = (*m_fcn.ch_mapper) (chm.elem (i, j));
+
+		    retval = octave_value (result, true);
+		  }
+		  break;
+
+		default:
+		  panic_impossible ();
+		  break;
+		}
 	    }
 	}
     }
   else
     {
       if (arg.is_real_type ())
 	{
 	  if (arg.is_scalar_type ())
 	    {
 	      double d = arg.double_value ();
 
-	      if (m_fcn.can_return_complex_for_real_arg
+	      if (m_fcn.flag
 		  && (d < m_fcn.lower_limit || d > m_fcn.upper_limit))
 		{
 		  if (m_fcn.c_c_mapper)
 		    retval = m_fcn.c_c_mapper (Complex (d));
 		  else
 		    error ("%s: unable to handle real arguments",
 			   m_fcn.name.c_str ());
 		}
@@ -697,17 +734,17 @@ apply_mapper_fcn (const octave_value& ar
 	    }
 	  else
 	    {
 	      Matrix m = arg.matrix_value ();
 
 	      if (error_state)
 		return retval;
 
-	      if (m_fcn.can_return_complex_for_real_arg
+	      if (m_fcn.flag
 		  && (any_element_less_than (m, m_fcn.lower_limit)
 		      || any_element_greater_than (m, m_fcn.upper_limit)))
 		{
 		  if (m_fcn.c_c_mapper)
 		    retval = map (m_fcn.c_c_mapper, ComplexMatrix (m));
 		  else
 		    error ("%s: unable to handle real arguments",
 			   m_fcn.name.c_str ());
diff --git a/src/strfns.cc b/src/strfns.cc
--- a/src/strfns.cc
+++ b/src/strfns.cc
@@ -61,39 +61,13 @@ DEFUN (setstr, args, ,
   if (nargin == 1 && args(0).is_defined ())
     retval = args(0).convert_to_str ();
   else
     print_usage ("setstr");
 
   return retval;
 }
 
-DEFUN (toascii, args, ,
-  "toascii (STRING): return ASCII representation of STRING in a matrix")
-{
-  octave_value_list retval;
-
-  int nargin = args.length ();
-
-  if (nargin == 1)
-    {
-      octave_value arg = args(0);
-
-      if (arg.is_string ())
-	{
-	  charMatrix chm = args(0).all_strings ();
-
-	  retval = Matrix (chm);
-	}
-      else
-	gripe_wrong_type_arg ("toascii", arg);
-    }
-  else
-    print_usage ("toascii");
-
-  return retval;
-}
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
