# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1323458233 28800
#      Fri Dec 09 11:17:13 2011 -0800
# Node ID de90542b7afc6f987e9fec8a1e94998bbb1678a6
# Parent  e3bed294b11776b0ba6f6b670af35b841955c7c9
Return retval(1) before retval(0) to avoid re-sizing call on retval.

* balance.cc, getgrent.cc, getpwent.cc, spparms.cc, sqrtm.cc, urlwrite.cc,
data.cc, dirfns.cc, graphics.cc, oct-stream.cc, syscalls.cc:
Return retval(1) before retval(0) to avoid re-sizing call on retval.

diff --git a/src/DLD-FUNCTIONS/balance.cc b/src/DLD-FUNCTIONS/balance.cc
--- a/src/DLD-FUNCTIONS/balance.cc
+++ b/src/DLD-FUNCTIONS/balance.cc
@@ -164,18 +164,18 @@ Generalized eigenvalue problem balancing
               else if (nargout == 2)
                 {
                   retval(1) = result.balanced_matrix ();
                   retval(0) = result.balancing_matrix ();
                 }
               else
                 {
                   retval(2) = result.balanced_matrix ();
+                  retval(1) = result.permuting_vector ();
                   retval(0) = result.scaling_vector ();
-                  retval(1) = result.permuting_vector ();
                 }
 
             }
           else
             {
               FloatAEPBALANCE result (faa, noperm, noscal);
 
               if (nargout == 0 || nargout == 1)
@@ -183,18 +183,18 @@ Generalized eigenvalue problem balancing
               else if (nargout == 2)
                 {
                   retval(1) = result.balanced_matrix ();
                   retval(0) = result.balancing_matrix ();
                 }
               else
                 {
                   retval(2) = result.balanced_matrix ();
+                  retval(1) = result.permuting_vector ();
                   retval(0) = result.scaling_vector ();
-                  retval(1) = result.permuting_vector ();
                 }
             }
         }
       else
         {
           if (complex_case)
             {
               ComplexAEPBALANCE result (caa, noperm, noscal);
@@ -204,36 +204,36 @@ Generalized eigenvalue problem balancing
               else if (nargout == 2)
                 {
                   retval(1) = result.balanced_matrix ();
                   retval(0) = result.balancing_matrix ();
                 }
               else
                 {
                   retval(2) = result.balanced_matrix ();
+                  retval(1) = result.permuting_vector ();
                   retval(0) = result.scaling_vector ();
-                  retval(1) = result.permuting_vector ();
                 }
             }
           else
             {
               AEPBALANCE result (aa, noperm, noscal);
 
               if (nargout == 0 || nargout == 1)
                 retval(0) = result.balanced_matrix ();
               else if (nargout == 2)
                 {
                   retval(1) = result.balanced_matrix ();
                   retval(0) = result.balancing_matrix ();
                 }
               else
                 {
                   retval(2) = result.balanced_matrix ();
+                  retval(1) = result.permuting_vector ();
                   retval(0) = result.scaling_vector ();
-                  retval(1) = result.permuting_vector ();
                 }
             }
         }
     }
   else
     {
       std::string bal_job;
       if (nargout == 1)
diff --git a/src/DLD-FUNCTIONS/getgrent.cc b/src/DLD-FUNCTIONS/getgrent.cc
--- a/src/DLD-FUNCTIONS/getgrent.cc
+++ b/src/DLD-FUNCTIONS/getgrent.cc
@@ -75,18 +75,18 @@ Once the end of data has been reached, @
   retval(0) = 0;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       std::string msg;
 
+      retval(1) = msg;
       retval(0) = mk_gr_map (octave_group::getgrent (msg));
-      retval(1) = msg;
     }
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN_DLD (getgrgid, args, ,
@@ -111,18 +111,18 @@ Return the first entry from the group da
       if (! error_state)
         {
           if (D_NINT (dval) == dval)
             {
               gid_t gid = static_cast<gid_t> (dval);
 
               std::string msg;
 
+              retval(1) = msg;
               retval(0) = mk_gr_map (octave_group::getgrgid (gid, msg));
-              retval(1) = msg;
             }
           else
             error ("getgrgid: GID must be an integer");
         }
     }
   else
     print_usage ();
 
@@ -147,18 +147,18 @@ Return the first entry from the group da
   if (nargin == 1)
     {
       std::string s = args(0).string_value ();
 
       if (! error_state)
         {
           std::string msg;
 
+          retval(1) = msg;
           retval(0) = mk_gr_map (octave_group::getgrnam (s.c_str (), msg));
-          retval(1) = msg;
         }
     }
   else
     print_usage ();
 
   return retval;
 }
 
@@ -174,18 +174,18 @@ Return the internal pointer to the begin
   retval(0) = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       std::string msg;
 
+      retval(1) = msg;
       retval(0) = static_cast<double> (octave_group::setgrent (msg));
-      retval(1) = msg;
     }
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN_DLD (endgrent, args, ,
@@ -200,16 +200,16 @@ Close the group database.\n\
   retval(0) = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       std::string msg;
 
+      retval(1) = msg;
       retval(0) = static_cast<double> (octave_group::endgrent (msg));
-      retval(1) = msg;
     }
   else
     print_usage ();
 
   return retval;
 }
diff --git a/src/DLD-FUNCTIONS/getpwent.cc b/src/DLD-FUNCTIONS/getpwent.cc
--- a/src/DLD-FUNCTIONS/getpwent.cc
+++ b/src/DLD-FUNCTIONS/getpwent.cc
@@ -79,18 +79,18 @@ opening it if necessary.  Once the end o
   retval(0) = 0;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       std::string msg;
 
+      retval(1) = msg;
       retval(0) = mk_pw_map (octave_passwd::getpwent (msg));
-      retval(1) = msg;
     }
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN_DLD (getpwuid, args, ,
@@ -115,18 +115,18 @@ database, @code{getpwuid} returns 0.\n\
       if (! error_state)
         {
           if (D_NINT (dval) == dval)
             {
               uid_t uid = static_cast<uid_t> (dval);
 
               std::string msg;
 
+              retval(1) = msg;
               retval(0) = mk_pw_map (octave_passwd::getpwuid (uid, msg));
-              retval(1) = msg;
             }
           else
             error ("getpwuid: UID must be an integer");
         }
     }
   else
     print_usage ();
 
@@ -151,18 +151,18 @@ database, @code{getpwname} returns 0.\n\
   if (nargin == 1)
     {
       std::string s = args(0).string_value ();
 
       if (! error_state)
         {
           std::string msg;
 
+          retval(1) = msg;
           retval(0) = mk_pw_map (octave_passwd::getpwnam (s, msg));
-          retval(1) = msg;
         }
     }
   else
     print_usage ();
 
   return retval;
 }
 
@@ -178,18 +178,18 @@ Return the internal pointer to the begin
   retval(0) = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       std::string msg;
 
+      retval(1) = msg;
       retval(0) = static_cast<double> (octave_passwd::setpwent (msg));
-      retval(1) = msg;
     }
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN_DLD (endpwent, args, ,
@@ -204,16 +204,16 @@ Close the password database.\n\
   retval(0) = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       std::string msg;
 
+      retval(1) = msg;
       retval(0) = static_cast<double> (octave_passwd::endpwent (msg));
-      retval(1) = msg;
     }
   else
     print_usage ();
 
   return retval;
 }
diff --git a/src/DLD-FUNCTIONS/spparms.cc b/src/DLD-FUNCTIONS/spparms.cc
--- a/src/DLD-FUNCTIONS/spparms.cc
+++ b/src/DLD-FUNCTIONS/spparms.cc
@@ -108,18 +108,18 @@ time.\n\
   if (nargin == 0)
     {
       if (nargout == 0)
         octave_sparse_params::print_info (octave_stdout, "");
       else if (nargout == 1)
         retval(0) =  octave_sparse_params::get_vals ();
       else if (nargout == 2)
         {
+          retval (1) = octave_sparse_params::get_vals ();
           retval (0) = octave_sparse_params::get_keys ();
-          retval (1) = octave_sparse_params::get_vals ();
         }
       else
         error ("spparms: too many output arguments");
     }
   else if (nargin == 1)
     {
       if (args(0).is_string ())
         {
diff --git a/src/DLD-FUNCTIONS/sqrtm.cc b/src/DLD-FUNCTIONS/sqrtm.cc
--- a/src/DLD-FUNCTIONS/sqrtm.cc
+++ b/src/DLD-FUNCTIONS/sqrtm.cc
@@ -227,16 +227,22 @@ Mathematics, Manchester, England, Januar
   octave_idx_type nc = arg.columns ();
 
   if (n != nc || arg.ndims () > 2)
     {
       gripe_square_matrix_required ("sqrtm");
       return retval;
     }
 
+  if (nargout > 1)
+    {
+      retval.resize (1, 2);
+      retval(2) = -1.0;
+    }
+
   if (arg.is_diag_matrix ())
     // sqrtm of a diagonal matrix is just sqrt.
     retval(0) = arg.sqrt ();
   else if (arg.is_single_type ())
     retval(0) = do_sqrtm<FloatMatrix, FloatComplexMatrix, FloatComplexSCHUR> (arg);
   else if (arg.is_numeric_type ())
     retval(0) = do_sqrtm<Matrix, ComplexMatrix, ComplexSCHUR> (arg);
 
diff --git a/src/DLD-FUNCTIONS/urlwrite.cc b/src/DLD-FUNCTIONS/urlwrite.cc
--- a/src/DLD-FUNCTIONS/urlwrite.cc
+++ b/src/DLD-FUNCTIONS/urlwrite.cc
@@ -940,20 +940,20 @@ s = urlread (\"http://www.google.com/sea
 
   std::ostringstream buf;
 
   bool ok;
   curl_handle curl = curl_handle (url, method, param, buf, ok);
 
   if (nargout > 0)
     {
-      retval(0) = buf.str ();
-      retval(1) = ok;
       // Return empty string if no error occured.
       retval(2) = ok ? "" : curl.lasterror ();
+      retval(1) = ok;
+      retval(0) = buf.str ();
     }
 
   if (nargout < 2 && ! ok)
     error ("urlread: curl: %s", curl.lasterror().c_str());
 
 #else
   error ("urlread: not available in this version of Octave");
 #endif
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -5969,16 +5969,18 @@ ordered lists.\n\
         {
           error ("sort: DIM must be a valid dimension");
           return retval;
         }
     }
 
   if (return_idx)
     {
+      retval.resize (2);
+
       Array<octave_idx_type> sidx;
 
       retval (0) = arg.sort (sidx, dim, smode);
       retval (1) = idx_vector (sidx, dv(dim)); // No checking, the extent is known.
     }
   else
     retval(0) = arg.sort (dim, smode);
 
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -182,18 +182,18 @@ system-dependent error message.\n\
         gripe_wrong_type_arg ("readdir", args(0));
       else
         {
           dir_entry dir (dirname);
 
           if (dir)
             {
               string_vector dirlist = dir.read ();
+              retval(1) = 0.0;
               retval(0) = Cell (dirlist.sort ());
-              retval(1) = 0.0;
             }
           else
             {
               retval(2) = dir.error ();
             }
         }
     }
   else
@@ -482,22 +482,20 @@ system-dependent error message.\n\
         gripe_wrong_type_arg ("readlink", args(0));
       else
         {
           std::string result;
           std::string msg;
 
           int status = octave_readlink (symlink, result, msg);
 
-          retval(0) = result;
-
-          retval(1) = status;
-
           if (status < 0)
             retval(2) = msg;
+          retval(1) = status;
+          retval(0) = result;
         }
     }
   else
     print_usage ();
 
   return retval;
 }
 
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -279,17 +279,18 @@ default_axes_tick (void)
   m(4) = 0.8;
   m(5) = 1.0;
   return m;
 }
 
 static Matrix
 default_axes_ticklength (void)
 {
-  Matrix m (1, 2, 0.01);
+  Matrix m (1, 2, 0.0);
+  m(0) = 0.01;
   m(1) = 0.025;
   return m;
 }
 
 static Matrix
 default_figure_position (void)
 {
   Matrix m (1, 4, 0.0);
@@ -346,17 +347,18 @@ default_control_sliderstep (void)
 
 static Matrix
 default_panel_position (void)
 {
   Matrix retval (1, 4, 0.0);
 
   retval(0) = 0;
   retval(1) = 0;
-  retval(2) = retval(3) = 0.5;
+  retval(2) = 0.5;
+  retval(3) = 0.5;
 
   return retval;
 }
 
 static double
 convert_font_size (double font_size, const caseless_str& from_units,
                    const caseless_str& to_units, double parent_height = 0)
 {
@@ -5722,18 +5724,18 @@ axes::properties::get_axis_limits (doubl
           // Prevent round-off from cropping ticks
           min_val = std::min (min_val, tick_sep * min_tick);
           max_val = std::max (max_val, tick_sep * max_tick);
         }
     }
 
   retval.resize (1, 2);
 
+  retval(1) = max_val;
   retval(0) = min_val;
-  retval(1) = max_val;
 
   return retval;
 }
 
 void
 axes::properties::calc_ticks_and_lims (array_property& lims,
                                        array_property& ticks,
                                        array_property& mticks,
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -4176,19 +4176,19 @@ octave_stream_list::do_get_info (int fid
   string_vector retval;
 
   octave_stream os = do_lookup (fid);
 
   if (os.is_valid ())
     {
       retval.resize (3);
 
-      retval(0) = os.name ();
+      retval(2) = oct_mach_info::float_format_as_string (os.float_format ());
       retval(1) = octave_stream::mode_as_string (os.mode ());
-      retval(2) = oct_mach_info::float_format_as_string (os.float_format ());
+      retval(0) = os.name ();
     }
   else
     ::error ("invalid file id = %d", fid);
 
   return retval;
 }
 
 string_vector
diff --git a/src/syscalls.cc b/src/syscalls.cc
--- a/src/syscalls.cc
+++ b/src/syscalls.cc
@@ -140,18 +140,18 @@ system-dependent error message.\n\
               int i_new = new_stream.file_number ();
 
               if (i_old >= 0 && i_new >= 0)
                 {
                   std::string msg;
 
                   int status = octave_syscalls::dup2 (i_old, i_new, msg);
 
+                  retval(1) = msg;
                   retval(0) = status;
-                  retval(1) = msg;
                 }
             }
         }
       else
         error ("dup2: invalid stream");
     }
   else
     print_usage ();
@@ -219,18 +219,18 @@ error message.\n\
             }
 
           if (! error_state)
             {
               std::string msg;
 
               int status = octave_syscalls::execvp (exec_file, exec_args, msg);
 
+              retval(1) = msg;
               retval(0) = status;
-              retval(1) = msg;
             }
         }
       else
         error ("exec: FILE must be a string");
     }
   else
     print_usage ();
 
@@ -342,19 +342,19 @@ exit status, it will linger until Octave
                       octave_stream is = octave_stdiostream::create (nm, ifile,
                           std::ios::in);
 
                       octave_stream os = octave_stdiostream::create (nm, ofile,
                           std::ios::out);
 
                       Cell file_ids (1, 2);
 
-                      retval(0) = octave_stream_list::insert (os);
+                      retval(2) = pid;
                       retval(1) = octave_stream_list::insert (is);
-                                          retval(2) = pid;
+                      retval(0) = octave_stream_list::insert (os);
                     }
                                   else
                     error (msg.c_str ());
                 }
             }
           else
             error ("popen2: arguments must be character strings");
         }
@@ -491,18 +491,18 @@ system-dependent error message.\n\
               if (fid < 0)
                 error ("fcntl: invalid file id");
               else
                 {
                   std::string msg;
 
                   int status = octave_fcntl (fid, req, arg, msg);
 
+                  retval(1) = msg;
                   retval(0) = status;
-                  retval(1) = msg;
                 }
             }
         }
       else
         error ("fcntl: FID, REQUEST, and ARG must be integers");
     }
   else
     print_usage ();
@@ -541,18 +541,18 @@ action.  A system dependent error messag
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       std::string msg;
 
       pid_t pid = octave_syscalls::fork (msg);
 
+      retval(1) = msg;
       retval(0) = pid;
-      retval(1) = msg;
     }
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUNX ("getpgrp", Fgetpgrp, args, ,
@@ -567,18 +567,18 @@ Return the process group id of the curre
   retval(0) = -1;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       std::string msg;
 
+      retval(1) = msg;
       retval(0) = octave_syscalls::getpgrp (msg);
-      retval(1) = msg;
     }
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUNX ("getpid", Fgetpid, args, ,
@@ -860,20 +860,19 @@ system-dependent error message.\n\
           std::string nm;
 
           octave_stream is = octave_stdiostream::create (nm, ifile,
                                                          std::ios::in);
 
           octave_stream os = octave_stdiostream::create (nm, ofile,
                                                          std::ios::out);
 
+          retval(2) = status;
           retval(1) = octave_stream_list::insert (os);
           retval(0) = octave_stream_list::insert (is);
-
-          retval(2) = status;
         }
     }
   else
     print_usage ();
 
   return retval;
 }
 
@@ -1265,18 +1264,18 @@ system-dependent error message.\n\
       if (args(0).is_string ())
         {
           std::string name = args(0).string_value ();
 
           std::string msg;
 
           int status = octave_unlink (name, msg);
 
+          retval(1) = msg;
           retval(0) = status;
-          retval(1) = msg;
         }
       else
         error ("unlink: FILE must be a string");
     }
   else
     print_usage ();
 
   return retval;
@@ -1349,19 +1348,19 @@ information about the subprocess that ex
           if (! error_state)
             {
               std::string msg;
 
               int status = 0;
 
               pid_t result = octave_syscalls::waitpid (pid, &status, options, msg);
 
-              retval(0) = result;
+              retval(2) = msg;
               retval(1) = status;
-              retval(2) = msg;
+              retval(0) = result;
             }
           else
             error ("waitpid: OPTIONS must be an integer");
         }
       else
         error ("waitpid: PID must be an integer value");
     }
   else
