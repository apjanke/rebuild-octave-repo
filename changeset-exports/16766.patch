# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1371551941 14400
#      Tue Jun 18 06:39:01 2013 -0400
# Node ID 7268845c0a1eec55c84afef7270440897ff8d58d
# Parent  80b9a9e1c9650edd33d90ca3e04d324358e08c45
avoid backquote in error messages, some uses in doc strings

* libinterp/corefcn/quadcc.cc, libinterp/interpfcn/file-io.cc,
libinterp/octave-value/ov-java.cc, scripts/image/colormap.m,
scripts/image/rgbplot.m, scripts/miscellaneous/xor.m,
scripts/plot/print.m, scripts/special-matrix/gallery.m,
scripts/statistics/base/quantile.m, scripts/strings/strsplit.m:
Use ' instead of ` in error messages.
Don't use sprintf unnecessarily in error messages.
Use @code or @samp instead of `' in doc strings.

diff --git a/libinterp/corefcn/quadcc.cc b/libinterp/corefcn/quadcc.cc
--- a/libinterp/corefcn/quadcc.cc
+++ b/libinterp/corefcn/quadcc.cc
@@ -1490,17 +1490,17 @@ containing the name of the function to e
 The function @var{f} must be vectorized and must return a vector of output\n\
 values if given a vector of input values.  For example,\n\
 \n\
 @example\n\
 f = @@(x) x .* sin (1./x) .* sqrt (abs (1 - x));\n\
 @end example\n\
 \n\
 @noindent\n\
-which uses the element-by-element `dot' form for all operators.\n\
+which uses the element-by-element ``dot'' form for all operators.\n\
 \n\
 @var{a} and @var{b} are the lower and upper limits of integration.  Either\n\
 or both limits may be infinite.  @code{quadcc} handles an inifinite limit\n\
 by substituting the variable of integration with @code{x = tan (pi/2*u)}.\n\
 \n\
 The optional argument @var{tol} defines the relative tolerance used to stop\n\
 the integration procedure.  The default value is @math{1e^{-6}}.\n\
 \n\
diff --git a/libinterp/interpfcn/file-io.cc b/libinterp/interpfcn/file-io.cc
--- a/libinterp/interpfcn/file-io.cc
+++ b/libinterp/interpfcn/file-io.cc
@@ -1134,17 +1134,17 @@ A string is returned if @var{template} s
 conversions.\n\
 \n\
 The number of items successfully read is returned in @var{count}.\n\
 \n\
 If an error occurs, @var{errmsg} contains a system-dependent error message.\n\
 \n\
 In the second form, read from @var{fid} according to @var{template},\n\
 with each conversion specifier in @var{template} corresponding to a\n\
-single scalar return value.  This form is more `C-like', and also\n\
+single scalar return value.  This form is more ``C-like'', and also\n\
 compatible with previous versions of Octave.  The number of successful\n\
 conversions is returned in @var{count}\n\
 @ifclear OCTAVE_MANUAL\n\
 \n\
 See the Formatted Input section of the GNU Octave manual for a\n\
 complete description of the syntax of the template string.\n\
 @end ifclear\n\
 @seealso{fgets, fgetl, fread, scanf, sscanf, fopen}\n\
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1316,17 +1316,17 @@ unbox (JNIEnv* jni_env, const octave_val
           jni_env->SetIntArrayRegion (jintArray (v), 0, m.length (), reinterpret_cast<jint *> (m.fortran_vec ()));
           jmethodID mID = jni_env->GetMethodID (mcls, "<init>", "([I[I)V");
           jobj = jni_env->NewObject (jclass (mcls), mID, jintArray (v), jintArray (iv));
           jcls = jni_env->GetObjectClass (jobj);
         }
       else
         {
           found = 0;
-          error ("cannot convert matrix of type `%s'", val.class_name ().c_str ());
+          error ("cannot convert matrix of type '%s'", val.class_name ().c_str ());
         }
     }
   else if (val.is_cellstr ())
     {
       Cell cellStr = val.cell_value ();
       jclass_ref scls (jni_env, jni_env->FindClass ("java/lang/String"));
       jobjectArray array = jni_env->NewObjectArray (cellStr.length (), scls, 0);
       for (int i = 0; i < cellStr.length (); i++)
diff --git a/scripts/image/colormap.m b/scripts/image/colormap.m
--- a/scripts/image/colormap.m
+++ b/scripts/image/colormap.m
@@ -30,18 +30,18 @@
 ## colormap should be an @var{n} row by 3 column matrix.  The columns
 ## contain red, green, and blue intensities respectively.  All entries
 ## must be between 0 and 1 inclusive.  The new colormap is returned.
 ##
 ## @code{colormap ("default")} restores the default colormap (the
 ## @code{jet} map with 64 entries).  The default colormap is returned.
 ##
 ## @code{colormap ("list")} returns a cell array with all the available
-## colormaps.  The options `register' and `unregister' will add or remove the
-## colormap @var{name} to it.
+## colormaps.  The options @code{"register"} and @code{"unregister"}
+## will add or remove the colormap @var{name} to it.
 ##
 ## With no arguments, @code{colormap} returns the current color map.
 ## @seealso{jet}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
diff --git a/scripts/image/rgbplot.m b/scripts/image/rgbplot.m
--- a/scripts/image/rgbplot.m
+++ b/scripts/image/rgbplot.m
@@ -60,17 +60,17 @@ function h = rgbplot (cmap, style = "pro
     case "profile"
       htmp = plot (cmap(:,1),"r", cmap(:,2),"g", cmap(:,3),"b");
       set (gca, 'ytick', 0:0.1:1);
     case "composite"
       htmp = image (1:rows(cmap));
       set (gca, 'ytick', []);
       colormap (cmap);
     otherwise
-      error ("rgbplot: unknown style `%s'", style);
+      error ("rgbplot: unknown style '%s'", style);
   endswitch
   xlabel ("color index");
 
   if (nargout > 0)
     h = htmp;
   endif
 
 endfunction
@@ -83,10 +83,10 @@ endfunction
 %! subplot (1, 2, 2);
 %! rgbplot (ocean, "composite");
 
 %% Test input validation
 %!error rgbplot ()
 %!error rgbplot (1,2)
 %!error <CMAP must be a valid colormap> rgbplot ({0 1 0})
 %!error <STYLE must be a string> rgbplot ([0 1 0], 2)
-%!error <unknown style `nostyle'> rgbplot ([0 1 0], "nostyle")
+%!error <unknown style 'nostyle'> rgbplot ([0 1 0], "nostyle")
 
diff --git a/scripts/miscellaneous/xor.m b/scripts/miscellaneous/xor.m
--- a/scripts/miscellaneous/xor.m
+++ b/scripts/miscellaneous/xor.m
@@ -13,17 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Mapping Function} {@var{z} =} xor (@var{x}, @var{y})
-## Return the `exclusive or' of the entries of @var{x} and @var{y}.
+## Return the @dfn{exclusive or} of the entries of @var{x} and @var{y}.
 ## For boolean expressions @var{x} and @var{y},
 ## @code{xor (@var{x}, @var{y})} is true if and only if one of @var{x} or
 ## @var{y} is true.  Otherwise, for @var{x} and @var{y} both true or both
 ## false, @code{xor} returns false.
 ##
 ## The truth table for the xor operation is
 ##
 ## @multitable @columnfractions 0.44 .03 .05 .03 0.44
diff --git a/scripts/plot/print.m b/scripts/plot/print.m
--- a/scripts/plot/print.m
+++ b/scripts/plot/print.m
@@ -194,17 +194,17 @@
 ##
 ##   @item ppm
 ##     Portable Pixel Map file format
 ##
 ##   @item pdfwrite
 ##     Produces pdf output from eps
 ##   @end table
 ##
-##   For a complete list, type `system ("gs -h")' to see what formats
+##   For a complete list, type @samp{system ("gs -h")} to see what formats
 ## and devices are available.
 ##
 ##   When Ghostscript output is sent to a printer the size is determined
 ## by the figure's "papersize" property.  When the output
 ## is sent to a file the size is determined by the plot box defined by
 ## the figure's "paperposition" property.
 ##
 ## @item -append
diff --git a/scripts/special-matrix/gallery.m b/scripts/special-matrix/gallery.m
--- a/scripts/special-matrix/gallery.m
+++ b/scripts/special-matrix/gallery.m
@@ -527,17 +527,17 @@ function C = chebspec (n, k = 0)
     error ("gallery: K must be a scalar for chebspec matrix.");
   endif
 
   ## k = 1 case obtained from k = 0 case with one bigger n.
   switch (k)
     case (0), # do nothing
     case (1), n = n + 1;
     otherwise
-      error ("gallery: unknown K `%d' for chebspec matrix.", k);
+      error ("gallery: unknown K '%d' for chebspec matrix.", k);
   endswitch
 
   n = n-1;
   C = zeros (n+1);
 
   one    = ones (n+1, 1);
   x      = cos ((0:n)' * (pi/n));
   d      = ones (n+1, 1);
@@ -834,17 +834,17 @@ function A = condex (n, k = 4, theta = 1
     ## Third col is special vector b in SONEST
     x(:, 3) = (-1).^[0:n-1]' .* ( 1 + [0:n-1]'/(n-1) );
 
     Q = orth (x);  #  Q*Q' is now the orthogonal projector onto span(e(1),e,b)).
     P = eye (n) - Q*Q';
     A = eye (n) + theta*P;
 
   else
-    error ("gallery: unknown estimator K `%d' for condex matrix.", k);
+    error ("gallery: unknown estimator K '%d' for condex matrix.", k);
   endif
 
   ## Pad out with identity as necessary.
   m = columns (A);
   if (m < n)
     for i = n:-1:m+1
       A(i,i) = 1;
     endfor
@@ -994,17 +994,17 @@ function A = dramadah (n, k = 1)
     case (3)  # Lower Hessenberg
       c = ones (n, 1);
       for i= 2:2:n
         c(i) = 0;
       endfor
       A = toeplitz (c, [1 1 zeros(1,n-2)]);
 
     otherwise
-      error ("gallery: unknown K `%d' for dramadah matrix.", k);
+      error ("gallery: unknown K '%d' for dramadah matrix.", k);
   endswitch
 endfunction
 
 function A = fiedler (c)
   ## FIEDLER  Fiedler matrix - symmetric.
   ##          A = FIEDLER(C), where C is an n-vector, is the n-by-n symmetric
   ##          matrix with elements ABS(C(i)-C(j)).
   ##          Special case: if C is a scalar, then A = FIEDLER(1:C)
@@ -1822,17 +1822,17 @@ function Q = orthog (n, k = 1)
       Q = cos (m);
 
     case (-2)
       ## zeros of T(n)
       m = (0:n-1)'*(.5:n-.5) * (pi/n);
       Q = cos (m);
 
     otherwise
-      error ("gallery: unknown K `%d' for orthog matrix.", k);
+      error ("gallery: unknown K '%d' for orthog matrix.", k);
   endswitch
 endfunction
 
 function A = parter (n)
   ## PARTER    Parter matrix - a Toeplitz matrix with singular values near PI.
   ##           PARTER(N) is the matrix with (i,j) element 1/(i-j+0.5).
   ##           It is a Cauchy matrix and a Toeplitz matrix.
   ##
@@ -2001,17 +2001,17 @@ function A = rando (n, k = 1)
   m = n(1);
   n = n(end);
 
   switch (k)
     case (1), A =   floor (  rand(m, n) + 0.5);     # {0, 1}
     case (2), A = 2*floor (  rand(m, n) + 0.5) -1;  # {-1, 1}
     case (3), A =   round (3*rand(m, n) - 1.5);     # {-1, 0, 1}
     otherwise
-      error ("gallery: unknown K `%d' for smoke matrix.", k);
+      error ("gallery: unknown K '%d' for smoke matrix.", k);
   endswitch
 
 endfunction
 
 function A = randsvd (n, kappa = sqrt (1/eps), mode = 3, kl = n-1, ku = kl)
   ## RANDSVD  Random matrix with pre-assigned singular values.
   ##       RANDSVD(N, KAPPA, MODE, KL, KU) is a (banded) random matrix of order N
   ##       with COND(A) = KAPPA and singular values from the distribution MODE.
@@ -2092,17 +2092,17 @@ function A = randsvd (n, kappa = sqrt (1
       sigma  = factor.^[0:p-1];
     case (4)
       sigma = ones (p, 1) - (0:p-1)'/(p-1)*(1-1/kappa);
     case (5)
       ## In this case cond (A) <= kappa.
       rand ("uniform");
       sigma = exp (-rand (p, 1) * log (kappa));
     otherwise
-      error ("gallery: unknown MODE `%d' for randsvd matrix.", mode);
+      error ("gallery: unknown MODE '%d' for randsvd matrix.", mode);
   endswitch
 
   ##  Convert to diagonal matrix of singular values.
   if (mode < 0)
     sigma = sigma (p:-1:1);
   end
   sigma = diag (sigma);
 
@@ -2611,17 +2611,17 @@ function [A, b] = wilk (n)
 
   elseif (n == 21)
     ## Wilkinson (1965), p.308.
     E = diag (ones (n-1, 1), 1);
     m = (n-1)/2;
     A = diag (abs (-m:m)) + E + E';
 
   else
-    error ("gallery: unknown N `%d' for wilk matrix.", n);
+    error ("gallery: unknown N '%d' for wilk matrix.", n);
   endif
 endfunction
 
 ## NOTE: bandred is part of the Test Matrix Toolbox and is used by randsvd()
 function A = bandred (A, kl, ku)
   ## BANDRED  Band reduction by two-sided unitary transformations.
   ##          B = BANDRED(A, KL, KU) is a matrix unitarily equivalent to A
   ##          with lower bandwidth KL and upper bandwidth KU
diff --git a/scripts/statistics/base/quantile.m b/scripts/statistics/base/quantile.m
--- a/scripts/statistics/base/quantile.m
+++ b/scripts/statistics/base/quantile.m
@@ -303,18 +303,17 @@ endfunction
 %!error quantile (1, 1, 3)
 %!error quantile ((1:5)', 0.5, 1, 0)
 %!error quantile ((1:5)', 0.5, 1, 10)
 
 ## For the cumulative probability values in @var{p}, compute the
 ## quantiles, @var{q} (the inverse of the cdf), for the sample, @var{x}.
 ##
 ## The optional input, @var{method}, refers to nine methods available in R
-## (http://www.r-project.org/). The default is @var{method} = 7. For more
-## detail, see `help quantile'.
+## (http://www.r-project.org/). The default is @var{method} = 7.
 ## @seealso{prctile, quantile, statistics}
 
 ## Author: Ben Abbott <bpabbott@mac.com>
 ## Vectorized version: Jaroslav Hajek <highegg@gmail.com>
 ## Description: Quantile function of empirical samples
 
 function inv = __quantile__ (x, p, method = 5)
 
diff --git a/scripts/strings/strsplit.m b/scripts/strings/strsplit.m
--- a/scripts/strings/strsplit.m
+++ b/scripts/strings/strsplit.m
@@ -147,17 +147,17 @@ function [result, matches] = strsplit (s
     endif
   endif
   fields = fieldnames (args);
   for n = 1:2:numel(params)
     if (any (strcmpi (params{n}, fields)))
       args.(lower(params{n})) = params{n+1};
     elseif (ischar (varargin{n}))
       error ("strsplit:invalid_parameter_name",
-        sprintf ("strsplit: Invalid parameter name, `%s'", varargin{n}))
+             "strsplit: invalid parameter name, '%s'", varargin{n});
     else
       print_usage ();
     endif
   endfor
 
   if (strcmpi (args.delimitertype, "default"))
     args.delimitertype = "simple";
   endif
@@ -202,18 +202,18 @@ function [result, matches] = strsplit (s
       del = sprintf ('%s|', del{:});
       del(end) = [];
     endif
     if (args.collapsedelimiters)
       del = ["(", del, ")+"];
     endif
     [result, ~, ~, ~, matches] = regexp (str, del, "split");
   else
-    error ("strsplit:invalid_delimitertype", 
-      sprintf ("strsplit: Invalid DELIMITERTYPE"))
+    error ("strsplit:invalid_delimitertype",
+           "strsplit: Invalid DELIMITERTYPE");
   endif
 endfunction
 
 %!shared str
 %! str = "The rain in Spain stays mainly in the plain.";
 % Split on all whitespace.
 %!assert (strsplit (str), {"The", "rain", "in", "Spain", "stays", ...
 %! "mainly", "in", "the", "plain."})
