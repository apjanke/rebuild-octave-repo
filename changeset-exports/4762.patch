# HG changeset patch
# User jwe
# Date 1076908043 0
#      Mon Feb 16 05:07:23 2004 +0000
# Node ID bec345670e563b7f1c950d66752b3ce28eee7ebf
# Parent  c62b067609f8d7a61507c5a91ebce77966a96a71
[project @ 2004-02-16 05:07:23 by jwe]

diff --git a/liboctave/Array-C.cc b/liboctave/Array-C.cc
--- a/liboctave/Array-C.cc
+++ b/liboctave/Array-C.cc
@@ -28,16 +28,18 @@ Software Foundation, 59 Temple Place - S
 
 #include "oct-cmplx.h"
 
 #include "Array.h"
 #include "Array.cc"
 
 INSTANTIATE_ARRAY_AND_ASSIGN (Complex);
 
+INSTANTIATE_CAT (Complex);
+
 INSTANTIATE_ARRAY_ASSIGN (Complex, double);
 INSTANTIATE_ARRAY_ASSIGN (Complex, int);
 INSTANTIATE_ARRAY_ASSIGN (Complex, short);
 INSTANTIATE_ARRAY_ASSIGN (Complex, char);
 
 #include "Array2.h"
 
 template class Array2<Complex>;
diff --git a/liboctave/Array-ch.cc b/liboctave/Array-ch.cc
--- a/liboctave/Array-ch.cc
+++ b/liboctave/Array-ch.cc
@@ -26,16 +26,18 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Arrays of char values.
 
 #include "Array.h"
 #include "Array.cc"
 
 INSTANTIATE_ARRAY_AND_ASSIGN (char);
 
+INSTANTIATE_CAT (char);
+
 #include "Array2.h"
 
 template class Array2<char>;
 
 #include "ArrayN.h"
 #include "ArrayN.cc"
 
 template class ArrayN<char>;
diff --git a/liboctave/Array-d.cc b/liboctave/Array-d.cc
--- a/liboctave/Array-d.cc
+++ b/liboctave/Array-d.cc
@@ -26,16 +26,18 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Arrays of double values.
 
 #include "Array.h"
 #include "Array.cc"
 
 INSTANTIATE_ARRAY_AND_ASSIGN (double);
 
+INSTANTIATE_CAT (double);
+
 INSTANTIATE_ARRAY_ASSIGN (double, int);
 INSTANTIATE_ARRAY_ASSIGN (double, short);
 INSTANTIATE_ARRAY_ASSIGN (double, char);
 
 #include "Array2.h"
 
 template class Array2<double>;
 
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2994,16 +2994,48 @@ assignN (Array<LT>& lhs, const Array<RT>
   lhs.chop_trailing_singletons ();
 
   lhs.clear_index ();
 
   return retval;
 }
 
 template <class T>
+bool 
+cat_ra (Array<T>& ra_cat, const Array<T>& ra_arg, int dim, int add_dim)
+{
+  bool retval = false;
+  
+  dim_vector dv = ra_arg.dims ();
+  
+  Array<int> ra_idx (dv.length (), 0);
+  
+  for (int i = 0; i < ra_arg.length (); i++)
+    {
+      if (i != 0)
+	increment_index (ra_idx, dv);
+      
+      Array<int> ra_idx2 = ra_idx;
+      
+      if (dim >= ra_idx2.length ())
+	{
+	  ra_idx2.resize_and_fill (dim + 1, 0);
+	  
+	  retval = true;
+	}
+      
+      ra_idx2(dim) = ra_idx2(dim) + add_dim;
+
+      ra_cat(ra_idx2) = ra_arg(ra_idx);
+    }
+
+  return retval;
+}
+
+template <class T>
 void
 Array<T>::print_info (std::ostream& os, const std::string& prefix) const
 {
   os << prefix << "rep address: " << rep << "\n"
      << prefix << "rep->len:    " << rep->len << "\n"
      << prefix << "rep->data:   " << static_cast<void *> (rep->data) << "\n"
      << prefix << "rep->count:  " << rep->count << "\n";
 
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -518,16 +518,20 @@ public:
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 };
 
 // NOTE: these functions should be friends of the Array<T> class and
 // Array<T>::dimensions should be protected, not public, but we can't
 // do that because of bugs in gcc prior to 3.3.
 
+template <class T>
+bool 
+cat_ra (Array<T>& ra_cat, const Array<T>& ra_arg, int dim, int add_dim);
+
 template <class LT, class RT>
 /* friend */ int
 assign (Array<LT>& lhs, const Array<RT>& rhs, const LT& rfv);
 
 template <class LT, class RT>
 /* friend */ int
 assign1 (Array<LT>& lhs, const Array<RT>& rhs, const LT& rfv);
 
@@ -548,19 +552,24 @@ assign (Array<LT>& lhs, const Array<RT>&
 
 #define INSTANTIATE_ARRAY_ASSIGN(LT, RT) \
   template int assign (Array<LT>&, const Array<RT>&, const LT&); \
   template int assign1 (Array<LT>&, const Array<RT>&, const LT&); \
   template int assign2 (Array<LT>&, const Array<RT>&, const LT&); \
   template int assignN (Array<LT>&, const Array<RT>&, const LT&); \
   template int assign (Array<LT>&, const Array<RT>&)
 
+
 #define INSTANTIATE_ARRAY(T) \
   template class Array<T>; \
-  template T resize_fill_value (const T&)
+  template T resize_fill_value (const T&); \
+
+#define INSTANTIATE_CAT(T) \
+  template bool cat_ra (Array<T>& ra_cat, const Array<T>& ra_arg, \
+                        int dim, int add_dim)
 
 #define INSTANTIATE_ARRAY_AND_ASSIGN(T) \
   INSTANTIATE_ARRAY (T); \
   INSTANTIATE_ARRAY_ASSIGN (T, T)
 
 #endif
 
 /*
diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -227,17 +227,17 @@ ComplexNDArray::sumsq (int dim) const
 
 ComplexNDArray 
 ComplexNDArray::sum (int dim) const
 {
   MX_ND_COMPLEX_OP_REDUCTION (+= elem (iter_idx), Complex (0, 0));
 }
 
 bool
-ComplexNDArray::cat (ComplexNDArray& cat_arr, int dim, int add_dim) const
+ComplexNDArray::cat (const ComplexNDArray& ra_arg, int dim, int add_dim)
 {
   MX_ND_CAT;
 }
 
 NDArray
 ComplexNDArray::abs (void) const
 {
   NDArray retval (dims ());
diff --git a/liboctave/CNDArray.h b/liboctave/CNDArray.h
--- a/liboctave/CNDArray.h
+++ b/liboctave/CNDArray.h
@@ -82,17 +82,17 @@ public:
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
 
   ComplexNDArray cumprod (int dim = -1) const;
   ComplexNDArray cumsum (int dim = -1) const;
   ComplexNDArray prod (int dim = -1) const;
   ComplexNDArray sum (int dim = -1) const;
   ComplexNDArray sumsq (int dim = -1) const;
-  bool cat (ComplexNDArray& cat_array, int dim, int add_dim) const;
+  bool cat (const ComplexNDArray& ra_arg, int dim, int add_dim);
 
   NDArray abs (void) const;
 
   ComplexMatrix matrix_value (void) const;
 
   ComplexNDArray squeeze (void) const { return ArrayN<Complex>::squeeze (); }
 
   static void increment_index (Array<int>& ra_idx,
diff --git a/liboctave/chNDArray.cc b/liboctave/chNDArray.cc
--- a/liboctave/chNDArray.cc
+++ b/liboctave/chNDArray.cc
@@ -44,17 +44,17 @@ charNDArray::all (int dim) const
 
 boolNDArray
 charNDArray::any (int dim) const
 {
   MX_ND_ANY_ALL_REDUCTION (MX_ND_ANY_EVAL (elem (iter_idx) != ' '), false);
 }
 
 bool
-charNDArray::cat (charNDArray& cat_arr, int dim, int add_dim) const
+charNDArray::cat (const charNDArray& ra_arg, int dim, int add_dim)
 {
   MX_ND_CAT;  
 }
 
 charMatrix
 charNDArray::matrix_value (void) const
 {
   charMatrix retval;
diff --git a/liboctave/chNDArray.h b/liboctave/chNDArray.h
--- a/liboctave/chNDArray.h
+++ b/liboctave/chNDArray.h
@@ -66,17 +66,17 @@ public:
       MArrayN<char>::operator = (a);
       return *this;
     }
 
   // XXX FIXME XXX -- this is not quite the right thing.
 
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
-  bool cat (charNDArray& cat_array, int dim, int add_dim) const;
+  bool cat (const charNDArray& ra_arg, int dim, int add_dim);
  
   charMatrix matrix_value (void) const;
 
   charNDArray squeeze (void) const { return ArrayN<char>::squeeze (); }
 
   static void increment_index (Array<int>& ra_idx,
 			       const dim_vector& dimensions,
 			       int start_dimension = 0);
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -208,19 +208,20 @@ NDArray::sumsq (int dim) const
 
 NDArray 
 NDArray::sum (int dim) const
 {
   MX_ND_REAL_OP_REDUCTION (+= elem (iter_idx), 0);
 }
 
 bool
-NDArray::cat (NDArray& cat_arr, int dim, int add_dim) const
+NDArray::cat (const NDArray& ra_arg, int dim, int add_dim)
 {
-  MX_ND_CAT;
+  //  MX_ND_CAT;
+  return ::cat_ra (*this, ra_arg, dim, add_dim);
 }
 
 NDArray
 real (const ComplexNDArray& a)
 {
   int a_len = a.length ();
   NDArray retval;
   if (a_len > 0)
diff --git a/liboctave/dNDArray.h b/liboctave/dNDArray.h
--- a/liboctave/dNDArray.h
+++ b/liboctave/dNDArray.h
@@ -81,17 +81,17 @@ public:
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
 
   NDArray cumprod (int dim = -1) const;
   NDArray cumsum (int dim = -1) const;
   NDArray prod (int dim = -1) const;
   NDArray sum (int dim = -1) const;  
   NDArray sumsq (int dim = -1) const;
-  bool cat (NDArray& cat_array, int dim, int add_dim) const;
+  bool cat (const NDArray& ra_arg, int dim, int add_dim);
      
   NDArray abs (void) const;
 
   friend NDArray real (const ComplexNDArray& a);
   friend NDArray imag (const ComplexNDArray& a);
 
   Matrix matrix_value (void) const;
 
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -605,37 +605,37 @@ OP_DUP_FCN (conj, mx_inline_conj_dup, Co
       increment_index (iter_idx, dv); \
     } \
 \
   return retval
 
 #define MX_ND_CAT \
  bool retval = false;\
  \
-  dim_vector dv = dims (); \
+  dim_vector dv = ra_arg.dims (); \
  \
    Array<int> ra_idx (dv.length (), 0); \
  \
-   for (int i = 0; i < length (); i++) \
+   for (int i = 0; i < ra_arg.length (); i++) \
      { \
        if (i != 0) \
 	 increment_index (ra_idx, dv, 0); \
  \
        Array<int> ra_idx2 = ra_idx; \
  \
        if (dim >= ra_idx2.length ()) \
 	 { \
 	   ra_idx2.resize_and_fill (dim + 1, 0); \
  \
 	   retval = true; \
 	 } \
  \
        ra_idx2.elem (dim) = ra_idx2.elem (dim) + add_dim; \
  \
-       cat_arr.elem (ra_idx2) =  elem (ra_idx); \
+       elem (ra_idx2) =  ra_arg.elem (ra_idx); \
      } \
  \
    return retval
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2004-02-15  Petter Risholm  <risholm@stud.ntnu.no>
+
+	* ov-cell.cc (Fstruct2cell): New function.
+
 2004-02-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (OCTINTERP_LINK_DEPS, OCT_LINK_DEPS): Always define.
 
 	* oct-conf.h.in: Add OCTAVE_CONF_DL_LD, OCTAVE_CONF_DL_LDFLAGS,
 	and OCTAVE_CONF_MKOCTFILE_DL_LDFLAGS.
 	Delete OCTAVE_CONF_MKOCTFILE_SH_LDFLAGS.
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -803,50 +803,50 @@ do_cat (const octave_value_list& args)
 	  
 	  if (t == REAL)
 	    {
 	      if (tmp.is_complex_type ())
 		{
 		  cat_cx = ComplexNDArray (cat_re);
 		  
 		  extended_dims =
-		    tmp.complex_array_value ().cat (cat_cx, dim, curr_add_dims);
+		    cat_cx.cat (tmp.complex_array_value (), dim, curr_add_dims);
 		  
 		  t = COMPLEX;
 		}
 	      else if (tmp.is_string ())
 		{
 		  // This is a hack to be able to convert a dNDArray
 		  // to a chNDArray.
 		  cat_ch = charNDArray (octave_value (cat_re).char_array_value ());
 		  
 		  extended_dims =
-		    tmp.char_array_value ().cat (cat_ch, dim, curr_add_dims);
+		    cat_ch.cat (tmp.char_array_value (), dim, curr_add_dims);
 		  
 		  t = CHAR;
 		}
 	      else
 		extended_dims = 
-		  tmp.array_value().cat (cat_re, dim, curr_add_dims);
+		  cat_re.cat (tmp.array_value(), dim, curr_add_dims);
 	    }
 	  else if (t == COMPLEX)
 	    {
 	      extended_dims = 
-		tmp.complex_array_value ().cat (cat_cx, dim, curr_add_dims);
+		cat_cx.cat (tmp.complex_array_value (), dim, curr_add_dims);
 	    }
 	  else if (t == CHAR)
 	    {
 	      if (tmp.is_complex_type ())
 		{
 		  error ("cannot convert complex type to character type");
 		  return retval;
 		}
 	      else
 		extended_dims =
-		  tmp.char_array_value ().cat (cat_ch, dim, curr_add_dims);
+		  cat_ch.cat (tmp.char_array_value (), dim, curr_add_dims);
 	    }
 	  
 	  if (error_state) return retval; // Wrong conversion in the last if statement
 
 	  // Keep track of how many dimensions have been added
 	  if (extended_dims)
 	    curr_add_dims++;
 	  else
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -39,16 +39,17 @@ Software Foundation, 59 Temple Place - S
 #include "ov-cell.h"
 #include "oct-obj.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "ov-base-mat.h"
 #include "ov-base-mat.cc"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
+#include "Array-util.h"
 
 #include "byte-swap.h"
 #include "ls-oct-ascii.h"
 #include "ls-oct-binary.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
 
 template class octave_base_matrix<Cell>;
@@ -1005,13 +1006,93 @@ character string\n\
 	retval = false;
     }
   else
     print_usage ("iscellstr");
 
   return retval;
 }
 
+DEFUN (struct2cell, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} struct2cell (@var{S})\n\
+Create a new cell array from the objects stored in the struct object.\n\
+If F is the number of fields in the structure, the resulting cell array will\n\
+have a dimension vector corresponding to [F size(S)].\n\
+\n\
+@end deftypefn\n\
+@seealso{cell2struct, fieldnames}")
+{
+  octave_value retval;
+  
+  int nargin = args.length ();
+  
+  if (nargin == 1)
+    {
+      Octave_map m = args(0).map_value();
+      
+      if (! error_state)
+	{
+	  dim_vector m_dv = m.dims ();
+	  
+	  string_vector keys = m.keys ();
+	  
+	  int fields_numel = keys.length ();
+	  
+	  // The resulting dim_vector should have dimensions:
+	  // [numel(fields) size(struct)]
+	  dim_vector result_dv;
+	  result_dv.resize (m_dv.length () + 1); //Add 1 for the fields
+	  
+	  result_dv(0) = fields_numel;	 
+
+	  for (int i = 1; i < result_dv.length (); i++)
+	    result_dv(i) = m_dv(i-1);
+	  
+	  // Squeeze to be sure that a (3,1) vector doesn't
+	  // get turned into a (3,3,1) vector.
+	  result_dv = result_dv.squeeze (); 
+	  
+	  Cell c (result_dv);
+	  
+	  // Use ra_idx both for counting and for assignments,
+	  // so ra_idx(0) will both contain fields_numel for 
+	  // each call to increment_index and j for each assignment.
+	  Array<int> ra_idx (result_dv.length (), 0);
+	  ra_idx(0) = fields_numel;	  
+
+	  for (int i = 0; i < m_dv.numel (); i++)
+	    {
+	      for (int j = 0; j < fields_numel; j++)
+		{
+		  ra_idx(0) = j;
+		  
+		  Cell c_tmp = m.contents (keys(j));
+		  
+		  if (c_tmp.length () > 1) // Is a cell
+		    c(ra_idx) = c_tmp;
+		  else if (c_tmp.length () == 1) // Get octave_value
+		    c(ra_idx) = c_tmp(0);
+		  else // c.tmp.length () == 0, Create empty Cell
+		    c(ra_idx) = Cell();
+		  
+		  ra_idx(0) = fields_numel;
+		}
+
+	      increment_index(ra_idx, result_dv);	      
+	    }
+
+	  retval = c;
+	}
+      else
+	error ("struct2cell: expecting argument to be a cell array");
+    }
+  else
+    print_usage ("struct2cell");
+  
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
