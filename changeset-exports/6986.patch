# HG changeset patch
# User jwe
# Date 1191951780 0
#      Tue Oct 09 17:43:00 2007 +0000
# Node ID 4ad04ff722d76956e71fabf237e417ba6edbe795
# Parent  cf2f6090147a36bae22132be42f1eff2b4d6e294
[project @ 2007-10-09 17:43:00 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,15 +1,16 @@
 2007-10-09  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/urlwrite.cc (Furlwrite, Furlread) [! HAVE_CURL]:
 	Throw error instead of returning empty string hiding error message
 	in third return value.
 	(progress_func): Delete.
 	(Furlread): Don't set progress callback for curl.
+	(write_data, form_query_string, urlget): Now static.
 
 2007-10-08  David Bateman  <dbateman@free.fr>
 
 	*  input.cc (quoting_filename): Function to add a leading quote to
 	a string if needed.
 	(accept_line): Function to check if a string needs a closing quote
 	before calling the rl_newline function.
 	(initialize_command_input): Initialize completer_quote_characters,
diff --git a/src/DLD-FUNCTIONS/urlwrite.cc b/src/DLD-FUNCTIONS/urlwrite.cc
--- a/src/DLD-FUNCTIONS/urlwrite.cc
+++ b/src/DLD-FUNCTIONS/urlwrite.cc
@@ -44,28 +44,28 @@ 02110-1301, USA.
 #if defined (HAVE_CURL)
 
 #include <curl/curl.h>
 #include <curl/types.h>
 #include <curl/easy.h>
 
 // Write callback function for curl.
 
-int
+static int
 write_data (void *buffer, size_t size, size_t nmemb, void *streamp)
 {
   // *stream is actually an ostream object.
   std::ostream& stream = *(static_cast<std::ostream*> (streamp));
   stream.write (static_cast<const char*> (buffer), size*nmemb);
   return (stream.fail () ? 0 : size * nmemb);
 }
 
 // Form the query string based on param.
 
-std::string
+static std::string
 form_query_string (CURL *curl, const Cell& param)
 {
   std::ostringstream query;
 
   for (int i = 0; i < param.numel (); i += 2)
     {
       std::string name = param(i).string_value ();
       std::string text = param(i+1).string_value ();
@@ -85,17 +85,17 @@ form_query_string (CURL *curl, const Cel
 
   query.flush ();
 
   return query.str ();
 }
 
 // curl front-end
 
-CURLcode
+static CURLcode
 urlget (const std::string& url, const std::string& method,
 	const Cell& param, std::ostream& stream)
 {
   CURL *curl;
 
   curl_global_init(CURL_GLOBAL_DEFAULT);
 
   curl = curl_easy_init();
@@ -114,19 +114,17 @@ urlget (const std::string& url, const st
       curl_easy_setopt (curl, CURLOPT_URL, query_string.c_str ());
     }
   else if (method == "post")
     {
       curl_easy_setopt (curl, CURLOPT_URL, url.c_str ());
       curl_easy_setopt (curl, CURLOPT_POSTFIELDS, query_string.c_str ());
     }
   else
-    {
-      curl_easy_setopt (curl, CURLOPT_URL,url.c_str());
-    }
+    curl_easy_setopt (curl, CURLOPT_URL,url.c_str());
 
   // Define our callback to get called when there's data to be written.
   curl_easy_setopt (curl, CURLOPT_WRITEFUNCTION, write_data);
 
   // Set a pointer to our struct to pass to the callback.
   curl_easy_setopt (curl, CURLOPT_WRITEDATA, static_cast<void*> (&stream));
 
   // Follow redirects.
@@ -134,19 +132,19 @@ urlget (const std::string& url, const st
 
   curl_easy_setopt (curl, CURLOPT_NOPROGRESS, false);
   curl_easy_setopt (curl, CURLOPT_PROGRESSDATA, url.c_str ());
   curl_easy_setopt (curl, CURLOPT_FAILONERROR, true);
 
   // Switch on full protocol/debug output
   // curl_easy_setopt(curl, CURLOPT_VERBOSE, true);
 
-  CURLcode res = curl_easy_perform(curl);
+  CURLcode res = curl_easy_perform (curl);
 
-  // always cleanup
+  // Always cleanup.
   curl_easy_cleanup (curl);
 
   curl_global_cleanup ();
 
   return res;
 }
 
 #endif
@@ -251,38 +249,32 @@ urlwrite (\"http://www.google.com/search
 
       if (param.numel () % 2 == 1 )
 	{
 	  error ("urlwrite: number of elements in param must be even");
 	  return retval;
 	}
     }
 
-  // create and open file stream
+  std::ofstream ofile (filename.c_str(), std::ios::out | std::ios::binary);
 
-  std::ofstream stream (filename.c_str(), std::ios::out | std::ios::binary);
-
-  if (! stream.is_open ())
+  if (! ofile.is_open ())
     {
       error ("urlwrite: unable to open file");
       return retval;
     }
 
-  CURLcode res = urlget (url, method, param, stream);
+  CURLcode res = urlget (url, method, param, ofile);
 
-  // close the local file
-  stream.close ();
+  ofile.close ();
 
   if (nargout > 0)
     {
-      // FIXME: urlwrite should return full file path
       retval(0) = octave_env::make_absolute (filename, octave_env::getcwd ());
-      //      retval(0) = filename;
       retval(1) = res == CURLE_OK;
-      // return empty string if no error occured
       retval(2) = std::string (res == CURLE_OK ? "" : curl_easy_strerror (res));
     }
 
   if (nargout < 2 && res != CURLE_OK)
     error ("urlwrite: curl: %s", curl_easy_strerror (res));
 
 #else
   error ("urlwrite: not available in this version of Octave");
@@ -380,26 +372,25 @@ s = urlread (\"http://www.google.com/sea
 
       if (param.numel () % 2 == 1 )
 	{
 	  error ("urlread: number of elements in param must be even");
 	  return retval;
 	}
     }
 
-  // string stream for output
-  std::ostringstream stream;
+  std::ostringstream buf;
 
-  CURLcode res = urlget (url, method, param, stream);
+  CURLcode res = urlget (url, method, param, buf);
 
   if (nargout > 0)
     {
-      retval(0) = stream.str ();
+      retval(0) = buf.str ();
       retval(1) = res == CURLE_OK;
-      // return empty string if no error occured
+      // Return empty string if no error occured.
       retval(2) = std::string (res == CURLE_OK ? "" : curl_easy_strerror (res));
     }
 
   if (nargout < 2 && res != CURLE_OK)
     error ("urlread: curl: %s", curl_easy_strerror (res));
 
 #else
   error ("urlread: not available in this version of Octave");
