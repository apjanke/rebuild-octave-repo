# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1315361716 18000
#      Tue Sep 06 21:15:16 2011 -0500
# Node ID 969ed305dde593e141fbb8ea15ce760c4c47af0c
# Parent  ebb42fb2da04b484ae757171aa20936beafa26bb
Remove all blank lines with "format compact"
* pr-output.h (Vcompact_format): New global variable.
* pr-output.cc (Vcompact_format): No longer a static variable.
(pr_scale_header, pr_col_num_header, octave_print_internal): Use
Vcompact_format to eliminate some newlines. (Vformat): Document this change.
* ov-base.cc (octave_base_value::print_name_tag,
octave_base_value::print_with_name): Use Vcompact_format variable to
omit newlines.
* ov-class.cc (octave_class::print_name_tag): Ditto.
* ov-range.cc (octave_range::print_name_tag): Ditto.
* ov-struct.cc (octave_scalar_struct::print_raw): Ditto.

diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -45,16 +45,17 @@ along with Octave; see the file COPYING.
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-range.h"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "ov-str-mat.h"
 #include "ov-fcn-handle.h"
 #include "parse.h"
+#include "pr-output.h"
 #include "utils.h"
 #include "variables.h"
 
 builtin_type_t btyp_mixed_numeric (builtin_type_t x, builtin_type_t y)
 {
   builtin_type_t retval = btyp_unknown;
 
   if (x == btyp_bool)
@@ -414,33 +415,35 @@ octave_base_value::print_name_tag (std::
   indent (os);
 
   if (print_as_scalar ())
     os << name << " = ";
   else
     {
       os << name << " =";
       newline (os);
-      newline (os);
+      if (! Vcompact_format)
+        newline (os);
+
       retval = true;
     }
 
   return retval;
 }
 
 void
 octave_base_value::print_with_name (std::ostream& output_buf,
                                     const std::string& name,
                                     bool print_padding)
 {
   bool pad_after = print_name_tag (output_buf, name);
 
   print (output_buf);
 
-  if (print_padding && pad_after)
+  if (print_padding  && pad_after && ! Vcompact_format)
     newline (output_buf);
 }
 
 void
 octave_base_value::print_info (std::ostream& os,
                                const std::string& /* prefix */) const
 {
   os << "no info for type: " << type_name () << "\n";
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -1015,17 +1015,18 @@ octave_class::print_raw (std::ostream& o
 bool
 octave_class::print_name_tag (std::ostream& os, const std::string& name) const
 {
   bool retval = false;
 
   indent (os);
   os << name << " =";
   newline (os);
-  newline (os);
+  if (! Vcompact_format)
+    newline (os);
 
   return retval;
 }
 
 void
 octave_class::print_with_name (std::ostream& os, const std::string& name,
                                bool)
 {
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -365,17 +365,19 @@ octave_range::print_name_tag (std::ostre
   indent (os);
 
   if (n == 0 || n == 1)
     os << name << " = ";
   else
     {
       os << name << " =";
       newline (os);
-      newline (os);
+      if (! Vcompact_format)
+        newline (os);
+
       retval = true;
     }
 
   return retval;
 }
 
 // Skip white space and comments on stream IS.
 
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -1330,21 +1330,24 @@ octave_scalar_struct::print_raw (std::os
   if (Vstruct_levels_to_print >= 0)
     {
       bool max_depth_reached = Vstruct_levels_to_print-- == 0;
 
       bool print_fieldnames_only = max_depth_reached;
 
       increment_indent_level ();
 
-      newline (os);
+      if (! Vcompact_format)
+        newline (os);
+
       indent (os);
       os << "scalar structure containing the fields:";
       newline (os);
-      newline (os);
+      if (! Vcompact_format)
+        newline (os);
 
       increment_indent_level ();
 
       string_vector key_list = map.fieldnames ();
 
       for (octave_idx_type i = 0; i < key_list.length (); i++)
         {
           std::string key = key_list[i];
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -98,17 +98,17 @@ static bool bank_format = false;
 
 // TRUE means print data in hexadecimal format.
 static int hex_format = 0;
 
 // TRUE means print data in binary-bit-pattern format.
 static int bit_format = 0;
 
 // TRUE means don't put newlines around the column number headers.
-static bool compact_format = false;
+bool Vcompact_format = false;
 
 // TRUE means use an e format.
 static bool print_e = false;
 
 // TRUE means use a g format.
 static bool print_g = false;
 
 // TRUE means print E instead of e for exponent field.
@@ -1653,47 +1653,47 @@ pr_scale_header (std::ostream& os, doubl
     {
       os << "  "
          << std::setw (8) << std::setprecision (1)
          << std::setiosflags (std::ios::scientific|std::ios::left)
          << scale
          << std::resetiosflags (std::ios::scientific|std::ios::left)
          << " *\n";
 
-      if (! compact_format)
+      if (! Vcompact_format)
         os << "\n";
     }
 }
 
 static void
 pr_col_num_header (std::ostream& os, octave_idx_type total_width, int max_width,
                    octave_idx_type lim, octave_idx_type col, int extra_indent)
 {
   if (total_width > max_width && Vsplit_long_rows)
     {
       if (col != 0)
         {
-          if (compact_format)
+          if (Vcompact_format)
             os << "\n";
           else
             os << "\n\n";
         }
 
       octave_idx_type num_cols = lim - col;
 
       os << std::setw (extra_indent) << "";
 
       if (num_cols == 1)
         os << " Column " << col + 1 << ":\n";
       else if (num_cols == 2)
         os << " Columns " << col + 1 << " and " << lim << ":\n";
       else
         os << " Columns " << col + 1 << " through " << lim << ":\n";
 
-      if (! compact_format)
+      if (! Vcompact_format)
         os << "\n";
     }
 }
 
 template <class T>
 /* static */ inline void
 pr_plus_format (std::ostream& os, const T& val)
 {
@@ -1951,17 +1951,20 @@ octave_print_internal (std::ostream& os,
                   os << " ]";
               else
                 os << " ...\n";
             }
           os << ")";
         }
       else
         {
-          os << "Diagonal Matrix\n\n";
+          os << "Diagonal Matrix\n";
+          if (! Vcompact_format)
+            os << "\n";
+
           pr_scale_header (os, scale);
 
           // kluge. Get the true width of a number.
           int zero_fw;
 
             {
               std::ostringstream tmp_oss;
               pr_float (tmp_oss, 0.0, fw, scale);
@@ -2364,17 +2367,20 @@ octave_print_internal (std::ostream& os,
                   os << " ]";
               else
                 os << " ...\n";
             }
           os << ")";
         }
       else
         {
-          os << "Diagonal Matrix\n\n";
+          os << "Diagonal Matrix\n";
+          if (! Vcompact_format)
+            os << "\n";
+
           pr_scale_header (os, scale);
 
           // kluge. Get the true width of a number.
           int zero_fw;
 
             {
               std::ostringstream tmp_oss;
               pr_complex (tmp_oss, Complex (0.0), r_fw, i_fw, scale);
@@ -2509,17 +2515,19 @@ octave_print_internal (std::ostream& os,
               else
                 os << " ...\n";
             }
           if (! colp) os << ", :";
           os << ")";
         }
       else
         {
-          os << "Permutation Matrix\n\n";
+          os << "Permutation Matrix\n";
+          if (! Vcompact_format)
+            os << "\n";
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
               octave_idx_type lim = col + inc < nc ? col + inc : nc;
 
               pr_col_num_header (os, total_width, max_width, lim, col,
                                  extra_indent);
 
@@ -2904,17 +2912,19 @@ octave_print_internal (std::ostream& os,
           Array<std::string> page (nda.index (idx), dim_vector (nr, nc));
 
           // FIXME -- need to do some more work to put these
           // in neatly aligned columns...
 
           octave_idx_type n_rows = page.rows ();
           octave_idx_type n_cols = page.cols ();
 
-          os << nm << " =\n\n";
+          os << nm << " =\n";
+          if (! Vcompact_format)
+            os << "\n";
 
           for (octave_idx_type ii = 0; ii < n_rows; ii++)
             {
               for (octave_idx_type jj = 0; jj < n_cols; jj++)
                 os << "  " << page(ii,jj);
 
               os << "\n";
             }
@@ -3152,17 +3162,19 @@ octave_print_internal_template (std::ost
                   if (k < ndims - 1)
                     buf << ",";
                   else
                     buf << ")";
                 }
 
               nm += buf.str ();
 
-              os << nm << " =\n\n";
+              os << nm << " =\n";
+              if (! Vcompact_format)
+                os << "\n";
             }
 
           Array<idx_vector> idx (dim_vector (ndims, 1));
 
           idx(0) = idx_vector (':');
           idx(1) = idx_vector (':');
 
           for (int k = 2; k < ndims; k++)
@@ -3257,17 +3269,19 @@ octave_print_internal_template (std::ost
                   if (k < ndims - 1)
                     buf << ",";
                   else
                     buf << ")";
                 }
 
               nm += buf.str ();
 
-              os << nm << " =\n\n";
+              os << nm << " =\n";
+              if (! Vcompact_format)
+                os << "\n";
             }
 
           Array<idx_vector> idx (dim_vector (ndims, 1));
 
           idx(0) = idx_vector (':');
           idx(1) = idx_vector (':');
 
           for (int k = 2; k < ndims; k++)
@@ -3539,17 +3553,17 @@ static void
 init_format_state (void)
 {
   free_format = false;
   plus_format = false;
   rat_format = false;
   bank_format = false;
   hex_format = 0;
   bit_format = 0;
-  compact_format = false;
+  Vcompact_format = false;
   print_e = false;
   print_big_e = false;
   print_g = false;
   print_eng = false;
 }
 
 static void
 set_output_prec_and_fw (int prec, int fw)
@@ -3714,21 +3728,21 @@ set_format_style (int argc, const string
         }
       else if (arg == "none")
         {
           init_format_state ();
           free_format = true;
         }
       else if (arg == "compact")
         {
-          compact_format = true;
+          Vcompact_format = true;
         }
       else if (arg == "loose")
         {
-          compact_format = false;
+          Vcompact_format = false;
         }
       else
         error ("format: unrecognized format state `%s'", arg.c_str ());
     }
   else
     {
       init_format_state ();
       set_output_prec_and_fw (5, 10);
@@ -3890,22 +3904,22 @@ as the ratio of small integers.\n\
 For example, with the @samp{rat} format,\n\
 @code{pi} is displayed as @code{355/113}.\n\
 @end table\n\
 \n\
 The following two options affect the display of all matrices.\n\
 \n\
 @table @code\n\
 @item compact\n\
-Remove extra blank space around column number labels producing more compact\n\
-output with more data per page.\n\
+Remove blank lines around column number labels and between\n\
+matrices producing more compact output with more data per page.\n\
 \n\
 @item loose\n\
-Insert blank lines above and below column number labels to produce a more\n\
-readable output with less data per page.  (default).\n\
+Insert blank lines above and below column number labels and between matrices\n\
+to produce a more readable output with less data per page.  (default).\n\
 @end table\n\
 @seealso{fixed_point_format, output_max_field_width, output_precision, split_long_rows, rats}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
diff --git a/src/pr-output.h b/src/pr-output.h
--- a/src/pr-output.h
+++ b/src/pr-output.h
@@ -251,9 +251,12 @@ octave_print_internal (std::ostream& os,
                        bool pr_as_read_syntax = false,
                        int extra_indent = 0,
                        bool pr_as_string = false);
 
 // TRUE means that the dimensions of empty objects should be printed
 // like this: x = [](2x0).
 extern bool Vprint_empty_dimensions;
 
+// TRUE means don't put empty lines in output
+extern bool Vcompact_format;
+
 #endif
