# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365792707 14400
#      Fri Apr 12 14:51:47 2013 -0400
# Node ID 49b059bf27c73d99f7102805c7cc59c41a7059c8
# Parent  c1ff738d606d38a5bc2ce02db70a30911a16543b
allow loading files from file browser

* files-dock-widget.h, files-dock-widget.cc
(files_dock_widget::contextmenu_requested): Create menu item for
loading files.
(files_dock_widget::contextmenu_load): New function.
(files_dock_widget::load_file_signal): New signal.
* main-window.h, main-window.cc (main_window::construct): Connect
file_browser_window::load_file_signal to
main_window::handle_load_workspace_request.
(main_window::load_workspace_callback): Update workspace after
loading file.
(main_window::handle_load_workspace_request): New argument for passing
file name.

diff --git a/libgui/src/files-dock-widget.cc b/libgui/src/files-dock-widget.cc
--- a/libgui/src/files-dock-widget.cc
+++ b/libgui/src/files-dock-widget.cc
@@ -278,16 +278,17 @@ files_dock_widget::contextmenu_requested
   QModelIndex index = _file_tree_view->indexAt (mpos);
   //QAbstractItemModel *m = _file_tree_view->model ();
 
   if (index.isValid())
     { 
       QFileInfo info = _file_system_model->fileInfo(index);
 
       menu.addAction(tr("Open"), this, SLOT(contextmenu_open(bool)));
+      menu.addAction(tr("Load Data"), this, SLOT(contextmenu_load(bool)));
       menu.addSeparator();
       menu.addAction(tr("Rename"), this, SLOT(contextmenu_rename(bool)));
       menu.addAction(tr("Delete"), this, SLOT(contextmenu_delete(bool)));
 
       if(info.isDir())
         {
           menu.addSeparator();
           menu.addAction(tr("New File"), this, SLOT(contextmenu_newfile(bool)));
@@ -308,16 +309,32 @@ files_dock_widget::contextmenu_open (boo
 
   for( QModelIndexList::iterator it = rows.begin (); it != rows.end (); it++)
     {
       item_double_clicked(*it);
     }
 }
 
 void 
+files_dock_widget::contextmenu_load (bool)
+{
+  QItemSelectionModel *m = _file_tree_view->selectionModel ();
+  QModelIndexList rows = m->selectedRows ();
+
+  if (rows.size () > 0)
+    {
+      QModelIndex index = rows[0];
+
+      QFileInfo info = _file_system_model->fileInfo(index);
+
+      emit load_file_signal (info.fileName ());
+    }
+}
+
+void 
 files_dock_widget::contextmenu_rename (bool)
 {
   QItemSelectionModel *m = _file_tree_view->selectionModel ();
   QModelIndexList rows = m->selectedRows ();
   if(rows.size() > 0)
     {
       QModelIndex index = rows[0];
 
diff --git a/libgui/src/files-dock-widget.h b/libgui/src/files-dock-widget.h
--- a/libgui/src/files-dock-widget.h
+++ b/libgui/src/files-dock-widget.h
@@ -80,29 +80,33 @@ public slots:
   void notice_settings (const QSettings *settings);
 
 private slots:
   /** context menu wanted */
   void contextmenu_requested (const QPoint& pos);
 
   /* context menu actions */
   void contextmenu_open (bool);
+  void contextmenu_load (bool);
   void contextmenu_rename (bool);
   void contextmenu_delete (bool);
   void contextmenu_newfile (bool);
   void contextmenu_newdir (bool);
 
 signals:
 
   /** Emitted, whenever the user requested to open a file. */
   void open_file (const QString& fileName);
 
   /** Emitted, whenever the currently displayed directory changed. */
   void displayed_directory_changed (const QString& dir);
 
+  /** Emitted, whenever the user requested to load a file. */
+  void load_file_signal (const QString& fileName);
+
 private:
 
   // TODO: Add toolbar with buttons for navigating the path, creating dirs, etc
 
   /** set a new directory or open a file **/
   void display_directory (const QString& dir, bool set_octave_dir = true);
 
   /** Variables for the actions **/
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -129,24 +129,26 @@ main_window::handle_save_workspace_reque
     QFileDialog::getSaveFileName (this, tr ("Save Workspace As"),
                                   resource_manager::get_home_path ());
   if (!selectedFile.isEmpty ())
     octave_link::post_event (this, &main_window::save_workspace_callback,
                              selectedFile.toStdString ());
 }
 
 void
-main_window::handle_load_workspace_request (void)
+main_window::handle_load_workspace_request (const QString& file_arg)
 {
-  QString selectedFile =
-    QFileDialog::getOpenFileName (this, tr ("Load Workspace"),
-                                  resource_manager::get_home_path ());
-  if (!selectedFile.isEmpty ())
+  QString file = file_arg;
+
+  if (file.isEmpty ())
+    file = QFileDialog::getOpenFileName (this, tr ("Load Workspace"),
+                                         resource_manager::get_home_path ());
+  if (! file.isEmpty ())
     octave_link::post_event (this, &main_window::load_workspace_callback,
-                             selectedFile.toStdString ());
+                             file.toStdString ());
 }
 
 void
 main_window::handle_clear_workspace_request (void)
 {
   octave_link::post_event (this, &main_window::clear_workspace_callback);
 }
 
@@ -557,16 +559,19 @@ main_window::construct (void)
   construct_tool_bar ();
 
   connect (qApp, SIGNAL (aboutToQuit ()),
            this, SLOT (prepare_to_exit ()));
 
   connect (this, SIGNAL (settings_changed (const QSettings *)),
            this, SLOT (notice_settings (const QSettings *)));
 
+  connect (file_browser_window, SIGNAL (load_file_signal (const QString&)),
+           this, SLOT (handle_load_workspace_request (const QString&)));
+
   setWindowTitle ("Octave");
 
   setDockOptions (QMainWindow::AnimatedDocks
                   | QMainWindow::AllowNestedDocks
                   | QMainWindow::AllowTabbedDocks);
 
   addDockWidget (Qt::RightDockWidgetArea, command_window);
   addDockWidget (Qt::RightDockWidgetArea, doc_browser_window);
@@ -1192,16 +1197,18 @@ main_window::save_workspace_callback (co
 {
   Fsave (ovl (file));
 }
 
 void
 main_window::load_workspace_callback (const std::string& file)
 {
   Fload (ovl (file));
+
+  octave_link::set_workspace (true, symbol_table::workspace_info ());
 }
 
 void
 main_window::clear_workspace_callback (void)
 {
   Fclear ();
 }
 
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -76,17 +76,17 @@ signals:
   void settings_changed (const QSettings *);
   void relay_command_signal (const QString&);
   void new_file_signal (const QString&);
   void open_file_signal (const QString&);
 
 public slots:
   void report_status_message (const QString& statusMessage);
   void handle_save_workspace_request (void);
-  void handle_load_workspace_request (void);
+  void handle_load_workspace_request (const QString& file = QString ());
   void handle_clear_workspace_request (void);
   void handle_clear_history_request (void);
   void handle_rename_variable_request (const QString& old_name,
                                        const QString& new_name);
   void new_file (const QString& commands = QString ());
   void open_file (const QString& file_name = QString ());
   void open_online_documentation_page (void);
   void open_bug_tracker_page (void);
