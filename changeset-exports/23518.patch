# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1495224078 14400
#      Fri May 19 16:01:18 2017 -0400
# Node ID 8744d4ed8fb4eab0e4e6b534bc930126136884dc
# Parent  1bc8f1f50b54a56a0c79109878dec7eb861841ec
provide DEFMETHOD macros

Allow a reference to the interpreter object to be passed to built-in
interpreter functions.

* find-defun-files.sh: Adjust regexp pattern for finding built-in
functions.

* mk-builtins.pl: Handle DEFMETHOD variants of built-in function macros.

* defun-int.h, defun.cc (install_builtin_function):
New overloads for methods.

* defun-int.h (FORWARD_DECLARE_METHODX, FORWARD_DECLARE_METHOD,
DECLARE_METHODX, DECLARE_METHOD, DECLARE_STATIC_METHODX,
DECLARE_STATIC_METHOD): New macros.

* defun.h (DEFMETHOD, DEFMETHODX, DEFCONSTMETHOD): New macros.

* libinterp/gendoc.pl: Likewise.

* ov-builtin.h, ov-builtin.cc (octave_builtin::meth): New typedef.
(octave_builtin::m): New data member.
(octave_builtin::method): New function.
(octave_builtin::octave_builtin, octave_builtin::call):
Handle methods.

* ov-dld-fcn.h, ov-dld-fcn.cc (octave_dld_function::create,
octave_dld_function::octave_dld_function): Handle methods.

diff --git a/build-aux/find-defun-files.sh b/build-aux/find-defun-files.sh
--- a/build-aux/find-defun-files.sh
+++ b/build-aux/find-defun-files.sh
@@ -22,17 +22,17 @@ set -e
 
 SED=${SED:-sed}
 EGREP=${EGREP:-egrep}
 
 # Some stupid egreps don't like empty elements in alternation patterns,
 # so we have to repeat ourselves because some stupid egreps don't like
 # empty elements in alternation patterns.
 
-DEFUN_PATTERN="^[ \t]*DEF(CONSTFUN|UN|UN_DLD|UNX|UNX_DLD)[ \t]*\\("
+DEFUN_PATTERN="^[ \t]*DEF(CONSTFUN|METHOD|METHOD_DLD|METHODX|METHODX_DLD|UN|UN_DLD|UNX|UNX_DLD)[ \t]*\\("
 
 srcdir="$1"
 if [ "$1" ]; then
   shift
 fi
 
 for arg
 do
diff --git a/build-aux/mk-builtins.pl b/build-aux/mk-builtins.pl
--- a/build-aux/mk-builtins.pl
+++ b/build-aux/mk-builtins.pl
@@ -66,16 +66,21 @@ if ($make_header)
 
 #if ! defined (octave_builtin_defun_decls_h)
 #define octave_builtin_defun_decls_h 1
 
 #include \"octave-config.h\"
 
 #include \"ovl.h\"
 
+namespace octave
+{
+  class interpreter;
+}
+
 ";
 
   while ($file = shift (@ARGV))
   {
     if (! -f $file)
     {
       $file = "$srcdir/$file";
     }
@@ -83,43 +88,57 @@ if ($make_header)
     ## Generate a list of function names to declare.  We could do
     ## this in one step, but this way keeps the sed patterns a
     ## bit smaller.
 
     open($fh, "<", $file) || die "mk-builtins.pl: failed to open file $file\n";
 
     while (<$fh>)
     {
-      if (/^[ \t]*DEF(CONSTFUN|UN)[ \t]*\( *([^ ,]*).*$/)
+      if (/^[ \t]*DEF(CONSTFUN|CONSTMETHOD|METHOD|UN)[ \t]*\( *([^ ,]*).*$/)
       {
         $name = "F$2";
+        $is_method = ($1 eq "METHOD" || $1 eq "CONSTMETHOD");
       }
-      elsif (/^[ \t]*DEFUNX[ \t]*\( *"[^"]*" *, *([^ ,]*).*$/)
+      elsif (/^[ \t]*DEF(METHOD|UN)X[ \t]*\( *"[^"]*" *, *([^ ,]*).*$/)
       {
-        $name = $1;
+        $name = $2;
+        $is_method = ($1 eq "METHOD");
       }
       elsif ($defun_dld_are_built_in)
       {
-        if (/^[ \t]*DEFUN_DLD[ \t]*\( *([^ ,]*).*$/)
+        if (/^[ \t]*DEF(METHOD|UN)_DLD[ \t]*\( *([^ ,]*).*$/)
         {
-          $name = "F$1";
+          $name = "F$2";
+          $is_method = ($1 eq "METHOD");
         }
-        elsif (/^[ \t]*DEFUNX_DLD[ \t]*\( *"[^"]*" *, *([^ ,]*).*$/)
+        elsif (/^[ \t]*DEF(METHOD|UN)X_DLD[ \t]*\( *"[^"]*" *, *([^ ,]*).*$/)
         {
-          $name = "$1";
+          $name = "$2";
+          $is_method = ($1 eq "METHOD");
         }
       }
 
       if ($name)
       {
-        print "extern OCTINTERP_API octave_value_list
+        if ($is_method)
+        {
+          print "extern OCTINTERP_API octave_value_list
+$name (octave::interpreter&, const octave_value_list& = octave_value_list (), int = 0);
+";
+        }
+        else
+        {
+          print "extern OCTINTERP_API octave_value_list
 $name (const octave_value_list& = octave_value_list (), int = 0);
+";
+        }
 
-";
         $name = "";
+        $is_method = 0;
       }
     }
   }
 
   print "#endif\n";
 }
 elsif ($make_source)
 {
@@ -177,54 +196,54 @@ static void
     $fname = "";
     $name = "";
     $alias = "";
 
     %dispatch_map = ();
 
     while ($line = <$fh>)
     {
-      if ($line =~ /^ *DEFUN *\( *([^ ,]*) *,.*$/)
+      if ($line =~ /^ *DEF(METHOD|UN) *\( *([^ ,]*) *,.*$/)
       {
         $type = "fun";
-        $fname = "F$1";
-        $name = "$1";
+        $fname = "F$2";
+        $name = "$2";
       }
-      elsif ($line =~ /^ *DEFUNX *\( *"([^"]*)" *, *([^ ,]*) *,.*$/)
+      elsif ($line =~ /^ *DEF(METHOD|UN)X *\( *"([^"]*)" *, *([^ ,]*) *,.*$/)
       {
         $type = "fun";
-        $fname = "$2";
-        $name = "$1";
+        $fname = "$3";
+        $name = "$2";
       }
-      elsif ($line =~ /^ *DEFCONSTFUN *\( *([^ ,]*) *,.*$/)
+      elsif ($line =~ /^ *DEFCONST(FUN|METHOD) *\( *([^ ,]*) *,.*$/)
       {
         $type = "fun";
-        $fname = "F$1";
-        $name = "$1";
+        $fname = "F$2";
+        $name = "$2";
         $const = 1;
       }
       elsif ($line =~ /^ *DEFALIAS *\( *([^ ,]*) *, *([^ )]*) *\).*$/)
       {
         $type = "alias";
         $alias = "$1";
         $name = "$2";
       }
       elsif ($defun_dld_are_built_in)
       {
-        if ($line =~ /^ *DEFUN_DLD *\( *([^ ,]*) *,.*$/)
+        if ($line =~ /^ *DEF(METHOD|UN)_DLD *\( *([^ ,]*) *,.*$/)
         {
           $type = "fun";
-          $fname = "F$1";
-          $name = "$1";
+          $fname = "F$2";
+          $name = "$2";
         }
-        elsif ($line =~ /^ *DEFUNX_DLD *\( *"([^"]*)" *, *([^ ,]*) *,.*$/)
+        elsif ($line =~ /^ *DEF(METHOD|UN)X_DLD *\( *"([^"]*)" *, *([^ ,]*) *,.*$/)
         {
           $type = "fun";
-          $fname = "$2";
-          $name = "$1";
+          $fname = "$3";
+          $name = "$2";
         }
       }
 
       if ($type eq "fun")
       {
         if (($line = <$fh>) =~ /^ *classes:/)
         {
           $line =~ s/\s*classes:\s*//;
diff --git a/libinterp/corefcn/defun-int.h b/libinterp/corefcn/defun-int.h
--- a/libinterp/corefcn/defun-int.h
+++ b/libinterp/corefcn/defun-int.h
@@ -27,35 +27,50 @@ along with Octave; see the file COPYING.
 
 #include <string>
 
 #include "ov-builtin.h"
 #include "ov-dld-fcn.h"
 #include "symtab.h"
 #include "version.h"
 
+namespace octave
+{
+  class interpreter;
+}
+
 class octave_value;
 
 extern OCTINTERP_API void print_usage (void);
 extern OCTINTERP_API void print_usage (const std::string&);
 
 extern OCTINTERP_API void check_version (const std::string& version,
                                          const std::string& fcn);
 
 extern OCTINTERP_API void
 install_builtin_function (octave_builtin::fcn f, const std::string& name,
                           const std::string& file, const std::string& doc,
                           bool can_hide_function = true);
 
 extern OCTINTERP_API void
+install_builtin_function (octave_builtin::meth m, const std::string& name,
+                          const std::string& file, const std::string& doc,
+                          bool can_hide_function = true);
+
+extern OCTINTERP_API void
 install_dld_function (octave_dld_function::fcn f, const std::string& name,
                       const octave::dynamic_library& shl, const std::string& doc,
                       bool relative = false);
 
 extern OCTINTERP_API void
+install_dld_function (octave_dld_function::meth m, const std::string& name,
+                      const octave::dynamic_library& shl, const std::string& doc,
+                      bool relative = false);
+
+extern OCTINTERP_API void
 install_mex_function (void *fptr, bool fmex, const std::string& name,
                       const octave::dynamic_library& shl, bool relative = false);
 
 extern OCTINTERP_API void
 alias_builtin (const std::string& alias, const std::string& name);
 
 extern OCTINTERP_API void
 install_builtin_dispatch (const std::string& name, const std::string& klass);
@@ -96,32 +111,55 @@ defun_isargout (int, int);
 
 extern OCTINTERP_API void
 defun_isargout (int, int, bool *);
 
 #define FORWARD_DECLARE_FUNX(name)              \
   extern OCTAVE_EXPORT octave_value_list        \
   name (const octave_value_list&, int)
 
+#define FORWARD_DECLARE_METHODX(name)                           \
+  extern OCTAVE_EXPORT octave_value_list                        \
+  name (octave::interpreter&, const octave_value_list&, int)
+
 #define FORWARD_DECLARE_FUN(name)               \
   FORWARD_DECLARE_FUNX (F ## name)
 
+#define FORWARD_DECLARE_METHOD(name)            \
+  FORWARD_DECLARE_METHODX (F ## name)
+
 #define DECLARE_FUNX(name, args_name, nargout_name)             \
   OCTAVE_EXPORT octave_value_list                               \
   name (const octave_value_list& args_name, int nargout_name)
 
+#define DECLARE_METHODX(name, interp_name, args_name, nargout_name)     \
+  OCTAVE_EXPORT octave_value_list                                       \
+  name (octave::interpreter& interp_name,                               \
+        const octave_value_list& args_name, int nargout_name)
+
 #define DECLARE_FUN(name, args_name, nargout_name)      \
   DECLARE_FUNX (F ## name, args_name, nargout_name)
 
+#define DECLARE_METHOD(name, interp_name, args_name, nargout_name)      \
+  DECLARE_METHODX (F ## name, interp_name, args_name, nargout_name)
+
 #define DECLARE_STATIC_FUNX(name, args_name, nargout_name)      \
   static octave_value_list                                      \
   name (const octave_value_list& args_name, int nargout_name)
 
+#define DECLARE_STATIC_METHODX(name, interp_name, args_name, nargout_name) \
+  static octave_value_list                                              \
+  name (octave::interpreter& interp_name,                               \
+        const octave_value_list& args_name, int nargout_name)
+
 #define DECLARE_STATIC_FUN(name, args_name, nargout_name)       \
-  DECLARE_FUNX (F ## name, args_name, nargout_name)
+  DECLARE_STATIC_FUNX (F ## name, args_name, nargout_name)
+
+#define DECLARE_STATIC_METHOD(name, interp_name, args_name, nargout_name) \
+  DECLARE_STATIC_METHODX (F ## name, interp_name, args_name, nargout_name)
 
 // Define the code that will be used to insert the new function into
 // the symbol table.  We look for this name instead of the actual
 // function so that we can easily install the doc std::string too.
 
 typedef bool (*octave_dld_fcn_installer) (const octave::dynamic_library&, bool relative);
 
 typedef octave_function *
diff --git a/libinterp/corefcn/defun.cc b/libinterp/corefcn/defun.cc
--- a/libinterp/corefcn/defun.cc
+++ b/libinterp/corefcn/defun.cc
@@ -87,31 +87,56 @@ install_builtin_function (octave_builtin
                           bool /* can_hide_function -- not yet implemented */)
 {
   octave_value fcn (new octave_builtin (f, name, file, doc));
 
   symbol_table::install_built_in_function (name, fcn);
 }
 
 void
+install_builtin_function (octave_builtin::meth m, const std::string& name,
+                          const std::string& file, const std::string& doc,
+                          bool /* can_hide_function -- not yet implemented */)
+{
+  octave_value fcn (new octave_builtin (m, name, file, doc));
+
+  symbol_table::install_built_in_function (name, fcn);
+}
+
+void
 install_dld_function (octave_dld_function::fcn f, const std::string& name,
                       const octave::dynamic_library& shl, const std::string& doc,
                       bool relative)
 {
   octave_dld_function *fcn = new octave_dld_function (f, shl, name, doc);
 
   if (relative)
     fcn->mark_relative ();
 
   octave_value fval (fcn);
 
   symbol_table::install_built_in_function (name, fval);
 }
 
 void
+install_dld_function (octave_dld_function::meth m, const std::string& name,
+                      const octave::dynamic_library& shl, const std::string& doc,
+                      bool relative)
+{
+  octave_dld_function *fcn = new octave_dld_function (m, shl, name, doc);
+
+  if (relative)
+    fcn->mark_relative ();
+
+  octave_value fval (fcn);
+
+  symbol_table::install_built_in_function (name, fval);
+}
+
+void
 install_mex_function (void *fptr, bool fmex, const std::string& name,
                       const octave::dynamic_library& shl, bool relative)
 {
   octave_mex_function *fcn = new octave_mex_function (fptr, fmex, shl, name);
 
   if (relative)
     fcn->mark_relative ();
 
diff --git a/libinterp/corefcn/defun.h b/libinterp/corefcn/defun.h
--- a/libinterp/corefcn/defun.h
+++ b/libinterp/corefcn/defun.h
@@ -41,27 +41,36 @@ along with Octave; see the file COPYING.
 //   nargout_name is the name of the int variable used to pass the
 //     number of output arguments this function is expected to produce.
 //
 //   doc is the simple help text for the function.
 
 #define DEFUN(name, args_name, nargout_name, doc)       \
   DECLARE_FUN (name, args_name, nargout_name)
 
+#define DEFMETHOD(name, interp_name, args_name, nargout_name, doc)      \
+  DECLARE_METHOD (name, interp_name, args_name, nargout_name)
+
 // This one can be used when 'name' cannot be used directly (if it is
 // already defined as a macro).  In that case, name is already a
 // quoted string, and the internal name of the function must be passed
 // too (the convention is to use a prefix of "F", so "foo" becomes "Ffoo").
 
 #define DEFUNX(name, fname, args_name, nargout_name, doc)       \
   DECLARE_FUNX (fname, args_name, nargout_name)
 
+#define DEFMETHODX(name, fname, interp_name, args_name, nargout_name, doc) \
+  DECLARE_METHODX (fname, interp_name, args_name, nargout_name)
+
 // This is a function with a name that can't be hidden by a variable.
 #define DEFCONSTFUN(name, args_name, nargout_name, doc) \
   DECLARE_FUN (name, args_name, nargout_name)
 
+#define DEFCONSTMETHOD(name, interp_name, args_name, nargout_name, doc) \
+  DECLARE_METHOD (name, interp_name, args_name, nargout_name)
+
 // Make alias another name for the existing function name.  This macro
 // is processed by the mkbuiltins to generate code in builtins.cc to
 // create the alias in the symbol table.
 
 #define DEFALIAS(alias, name)
 
 #endif
diff --git a/libinterp/gendoc.pl b/libinterp/gendoc.pl
--- a/libinterp/gendoc.pl
+++ b/libinterp/gendoc.pl
@@ -43,17 +43,17 @@ FILE: foreach $fname (@ARGV)
 
   open (SRC_FH, $src_fname) or die "Unable to open $src_fname";
 
   @func_list = ();
   @docstr = ();
 
   LINE: while (my $line = <SRC_FH>)
   {
-    if ($line =~ /^\s*DEF(?:CONSTFUN|UN|UN_DLD|UNX|UNX_DLD)\s*\(/)
+    if ($line =~ /^\s*DEF(?:CONSTFUN|CONSTMETHOD|METHOD|METHOD_DLD|METHODX|METHODX_DLD|UN|UN_DLD|UNX|UNX_DLD)\s*\(/)
     {
       ($func) = $line =~ /\("?(\w+)"?,/;
       unless ($func) { die "Unable to parse $src_fname at line $.\n" }
       push (@func_list, $func);
 
       ## Skip optional line that declares list of classes that this
       ## function accepts.
       $line = <SRC_FH>;
diff --git a/libinterp/octave-value/ov-builtin.cc b/libinterp/octave-value/ov-builtin.cc
--- a/libinterp/octave-value/ov-builtin.cc
+++ b/libinterp/octave-value/ov-builtin.cc
@@ -22,21 +22,22 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include "call-stack.h"
 #include "error.h"
 #include "errwarn.h"
-#include "ovl.h"
+#include "interpreter-private.h"
+#include "interpreter.h"
 #include "ov-builtin.h"
 #include "ov.h"
+#include "ovl.h"
 #include "profiler.h"
-#include "interpreter.h"
 #include "unwind-prot.h"
 
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_builtin,
                                      "built-in function",
                                      "built-in function");
 
 octave_value_list
@@ -95,17 +96,25 @@ octave_builtin::call (int nargout, const
   octave::unwind_protect frame;
 
   octave::call_stack::push (this);
 
   frame.add_fcn (octave::call_stack::pop);
 
   profile_data_accumulator::enter<octave_builtin> block (profiler, *this);
 
-  retval = (*f) (args, nargout);
+  if (f)
+    retval = (*f) (args, nargout);
+  else
+    {
+      octave::interpreter& interp
+        = octave::__get_interpreter__ ("octave_builtin::call");
+
+      retval = (*m) (interp, args, nargout);
+    }
 
   // Do not allow null values to be returned from functions.
   // FIXME: perhaps true builtins should be allowed?
 
   retval.make_storable_values ();
 
   // Fix the case of a single undefined value.
   // This happens when a compiled function uses
@@ -137,16 +146,22 @@ octave_builtin::stash_jit (jit_type& typ
 }
 
 octave_builtin::fcn
 octave_builtin::function (void) const
 {
   return f;
 }
 
+octave_builtin::meth
+octave_builtin::method (void) const
+{
+  return m;
+}
+
 void
 octave_builtin::push_dispatch_class (const std::string& dispatch_type)
 {
   dispatch_classes.insert (dispatch_type);
 }
 
 bool
 octave_builtin::handles_dispatch_class (const std::string& dispatch_type) const
diff --git a/libinterp/octave-value/ov-builtin.h b/libinterp/octave-value/ov-builtin.h
--- a/libinterp/octave-value/ov-builtin.h
+++ b/libinterp/octave-value/ov-builtin.h
@@ -31,35 +31,51 @@ along with Octave; see the file COPYING.
 
 #include "ov-fcn.h"
 #include "ov-typeinfo.h"
 
 class octave_value;
 class octave_value_list;
 class jit_type;
 
+namespace octave
+{
+  class interpreter;
+}
+
 // Builtin functions.
 
 class
 OCTINTERP_API
 octave_builtin : public octave_function
 {
 public:
 
   octave_builtin (void) : octave_function (), f (0), file (), jtype (0) { }
 
+  typedef octave_value_list (*meth) (octave::interpreter&,
+                                     const octave_value_list&, int);
+
   typedef octave_value_list (*fcn) (const octave_value_list&, int);
 
   octave_builtin (fcn ff, const std::string& nm = "",
                   const std::string& ds = "")
-    : octave_function (nm, ds), f (ff), file (), jtype (0) { }
+    : octave_function (nm, ds), f (ff), m (0), file (), jtype (0) { }
+
+  octave_builtin (meth mm, const std::string& nm = "",
+                  const std::string& ds = "")
+    : octave_function (nm, ds), f (0), m (mm), file (), jtype (0) { }
 
   octave_builtin (fcn ff, const std::string& nm, const std::string& fnm,
                   const std::string& ds)
-    : octave_function (nm, ds), f (ff), file (fnm), jtype (0) { }
+    : octave_function (nm, ds), f (ff), m (0), file (fnm), jtype (0) { }
+
+  octave_builtin (meth mm, const std::string& nm, const std::string& fnm,
+                  const std::string& ds)
+    : octave_function (nm, ds), f (0), m (mm), file (fnm), jtype (0) { }
 
   // No copying!
 
   octave_builtin (const octave_builtin& ob) = delete;
 
   octave_builtin& operator = (const octave_builtin& ob) = delete;
 
   ~octave_builtin (void) = default;
@@ -84,24 +100,27 @@ public:
   octave_value_list call (int nargout, const octave_value_list& args);
 
   jit_type * to_jit (void) const;
 
   void stash_jit (jit_type& type);
 
   fcn function (void) const;
 
+  meth method (void) const;
+
   void push_dispatch_class (const std::string& dispatch_type);
 
   bool handles_dispatch_class (const std::string& dispatch_type) const;
 
 protected:
 
   // A pointer to the actual function.
   fcn f;
+  meth m;
 
   // The name of the file where this function was defined.
   std::string file;
 
   // The types this function has been declared to handle (if any).
   std::set<std::string> dispatch_classes;
 
   // A pointer to the jit type that represents the function.
diff --git a/libinterp/octave-value/ov-dld-fcn.cc b/libinterp/octave-value/ov-dld-fcn.cc
--- a/libinterp/octave-value/ov-dld-fcn.cc
+++ b/libinterp/octave-value/ov-dld-fcn.cc
@@ -47,16 +47,30 @@ octave_dld_function::octave_dld_function
 
   std::string file_name = fcn_file_name ();
 
   system_fcn_file
     = (! file_name.empty ()
        && Voct_file_dir == file_name.substr (0, Voct_file_dir.length ()));
 }
 
+octave_dld_function::octave_dld_function
+  (octave_builtin::meth mm, const octave::dynamic_library& shl,
+   const std::string& nm, const std::string& ds)
+  : octave_builtin (mm, nm, ds), sh_lib (shl)
+{
+  mark_fcn_file_up_to_date (time_parsed ());
+
+  std::string file_name = fcn_file_name ();
+
+  system_fcn_file
+    = (! file_name.empty ()
+       && Voct_file_dir == file_name.substr (0, Voct_file_dir.length ()));
+}
+
 octave_dld_function::~octave_dld_function (void)
 {
   octave::dynamic_loader::remove_oct (my_name, sh_lib);
 }
 
 std::string
 octave_dld_function::fcn_file_name (void) const
 {
@@ -82,8 +96,16 @@ octave_dld_function::time_parsed (void) 
 
 octave_dld_function*
 octave_dld_function::create (octave_builtin::fcn ff,
                              const octave::dynamic_library& shl,
                              const std::string& nm, const std::string& ds)
 {
   return new octave_dld_function (ff, shl, nm, ds);
 }
+
+octave_dld_function*
+octave_dld_function::create (octave_builtin::meth mm,
+                             const octave::dynamic_library& shl,
+                             const std::string& nm, const std::string& ds)
+{
+  return new octave_dld_function (mm, shl, nm, ds);
+}
diff --git a/libinterp/octave-value/ov-dld-fcn.h b/libinterp/octave-value/ov-dld-fcn.h
--- a/libinterp/octave-value/ov-dld-fcn.h
+++ b/libinterp/octave-value/ov-dld-fcn.h
@@ -47,16 +47,20 @@ public:
   octave_dld_function (void)
     : sh_lib (), t_checked (), system_fcn_file ()
   { }
 
   octave_dld_function (octave_builtin::fcn ff, const octave::dynamic_library& shl,
                        const std::string& nm = "",
                        const std::string& ds = "");
 
+  octave_dld_function (octave_builtin::meth mm, const octave::dynamic_library& shl,
+                       const std::string& nm = "",
+                       const std::string& ds = "");
+
   // No copying!
 
   octave_dld_function (const octave_dld_function& fn) = delete;
 
   octave_dld_function& operator = (const octave_dld_function& fn) = delete;
 
   ~octave_dld_function (void);
 
@@ -74,16 +78,21 @@ public:
 
   bool is_dld_function (void) const { return true; }
 
   static octave_dld_function * create (octave_builtin::fcn ff,
                                        const octave::dynamic_library& shl,
                                        const std::string& nm = "",
                                        const std::string& ds = "");
 
+  static octave_dld_function * create (octave_builtin::meth mm,
+                                       const octave::dynamic_library& shl,
+                                       const std::string& nm = "",
+                                       const std::string& ds = "");
+
   octave::dynamic_library get_shlib (void) const
   { return sh_lib; }
 
 private:
 
   octave::dynamic_library sh_lib;
 
   // The time the file was last checked to see if it needs to be
