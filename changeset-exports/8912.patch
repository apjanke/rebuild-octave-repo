# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1236242279 -3600
#      Thu Mar 05 09:37:59 2009 +0100
# Node ID 57c3155754d69c8a01d2ec90fe37b5914a6f5de9
# Parent  eeed8d6498118146dfc43e9d1f2515ff0c0ff758
fix condest

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2009-03-05  Jaroslav Hajek  <highegg@gmail.com>
+
+	* linear-algebra/condest.m: Use lu rather than splu. Use relative tols
+	for tests.
+
 2009-03-05  John W. Eaton  <jwe@octave.org>
 
 	* deprecated/spdiag.m: Ensure sparse result.
 
 2009-03-05  Ben Abbott <bpabbott@mac.com>
 
 	* plot/__go_draw_axes__.m: Preserve column vector orientation for
 	the axes children while removing the axis label & title handles.
diff --git a/scripts/linear-algebra/condest.m b/scripts/linear-algebra/condest.m
--- a/scripts/linear-algebra/condest.m
+++ b/scripts/linear-algebra/condest.m
@@ -158,17 +158,17 @@ function [est, v] = condest (varargin)
   endif
 
   if (! have_t)
     t = min (n, default_t);
   endif
 
   if (! have_solve)
     if (issparse (A))
-      [L, U, P, Pc] = splu (A);
+      [L, U, P, Pc] = lu (A);
       solve = @(x) Pc' * (U \ (L \ (P * x)));
       solve_t = @(x) P' * (L' \ (U' \ (Pc * x)));
     else
       [L, U, P] = lu (A);
       solve = @(x) U \ (L \ (P*x));
       solve_t = @(x) P' * (L' \ (U' \ x));
     endif
   endif
@@ -198,33 +198,33 @@ endfunction
 ## Yes, these test bounds are really loose.  There's
 ## enough randomization to trigger odd cases with hilb().
 
 %!test
 %!  N = 6;
 %!  A = hilb (N);
 %!  cA = condest (A);
 %!  cA_test = norm (inv (A), 1) * norm (A, 1);
-%!  assert (cA, cA_test, 2^-8);
+%!  assert (cA, cA_test, -2^-8);
 
 %!test
 %!  N = 6;
 %!  A = hilb (N);
 %!  solve = @(x) A\x; solve_t = @(x) A'\x;
 %!  cA = condest (A, solve, solve_t);
 %!  cA_test = norm (inv (A), 1) * norm (A, 1);
-%!  assert (cA, cA_test, 2^-8);
+%!  assert (cA, cA_test, -2^-8);
 
 %!test
 %!  N = 6;
 %!  A = hilb (N);
 %!  apply = @(x) A*x; apply_t = @(x) A'*x;
 %!  solve = @(x) A\x; solve_t = @(x) A'\x;
 %!  cA = condest (apply, apply_t, solve, solve_t, N);
 %!  cA_test = norm (inv (A), 1) * norm (A, 1);
-%!  assert (cA, cA_test, 2^-6);
+%!  assert (cA, cA_test, -2^-6);
 
 %!test
 %!  N = 12;
 %!  A = hilb (N);
 %!  [rcondA, v] = condest (A);
 %!  x = A*v;
 %!  assert (norm(x, inf), 0, eps);
