# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1518670001 18000
#      Wed Feb 14 23:46:41 2018 -0500
# Node ID d7c3918955e66986f9820604afa5e5d4491b92be
# Parent  b784d68f7c44a1483fb33640aeca9a7a1e2eb68a
eliminate file-scope static variable in pr-output.cc

* pr-output.cc (curr_float_display_fmt): Delete file-scope static
variable and all uses.
(set_format): Delete all variants of this function.  Replace uses with
calls to make_format, and use a local variable to store result.
Pass format state to pr_float, and pr_complex functions.
(pr_float, pr_imag, pr_complex): Delete versions of these functions
that do not accept the format as an argument.

diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -356,19 +356,16 @@ operator << (std::ostream& os, const pr_
   if (fw > 0 && s.length () > static_cast<unsigned int> (fw))
     os << '*';
   else
     os << s;
 
   return os;
 }
 
-// Current format for floating point numbers.
-static float_display_format curr_float_display_fmt;
-
 static double
 pr_max_internal (const Matrix& m)
 {
   octave_idx_type nr = m.rows ();
   octave_idx_type nc = m.columns ();
 
   double result = -std::numeric_limits<double>::max ();
 
@@ -531,29 +528,16 @@ make_format (double d, int& fw)
 
   double d_abs = (d < 0.0 ? -d : d);
 
   int digits = (inf_or_nan || d_abs == 0.0) ? 0 : num_digits (d_abs);
 
   return make_real_format (digits, inf_or_nan, int_only, fw);
 }
 
-static void
-set_format (double d, int& fw)
-{
-  curr_float_display_fmt = make_format (d, fw);
-}
-
-static inline void
-set_format (double d)
-{
-  int fw;
-  set_format (d, fw);
-}
-
 static float_display_format
 make_real_matrix_format (int x_max, int x_min, bool inf_or_nan,
                          int int_or_inf_or_nan, int& fw)
 {
   float_format fmt;
 
   int prec = output_precision ();
 
@@ -695,22 +679,16 @@ make_format (const Matrix& m, int& fw, d
 
   scale = (x_max == 0 || int_or_inf_or_nan)
           ? 1.0 : std::pow (10.0, calc_scale_exp (x_max - 1));
 
   return make_real_matrix_format (x_max, x_min, inf_or_nan,
                                   int_or_inf_or_nan, fw);
 }
 
-static void
-set_format (const Matrix& m, int& fw, double& scale)
-{
-  curr_float_display_fmt = make_format (m, fw, scale);
-}
-
 static float_display_format
 make_complex_format (int x_max, int x_min, int r_x, bool inf_or_nan,
                      int int_only, int& r_fw, int& i_fw)
 {
   float_format r_fmt;
   float_format i_fmt;
 
   int prec = output_precision ();
@@ -893,32 +871,16 @@ make_format (const Complex& c, int& r_fw
       x_max = i_x;
       x_min = r_x;
     }
 
   return make_complex_format (x_max, x_min, r_x, inf_or_nan, int_only,
                               r_fw, i_fw);
 }
 
-static void
-set_format (const Complex& c, int& r_fw, int& i_fw)
-{
-  if (free_format)
-    curr_float_display_fmt = float_display_format ();
-  else
-    curr_float_display_fmt = make_format (c, r_fw, i_fw);
-}
-
-static inline void
-set_format (const Complex& c)
-{
-  int r_fw, i_fw;
-  set_format (c, r_fw, i_fw);
-}
-
 static float_display_format
 make_complex_matrix_format (int x_max, int x_min, int r_x_max,
                             int r_x_min, bool inf_or_nan,
                             int int_or_inf_or_nan, int& r_fw, int& i_fw)
 {
   float_format r_fmt;
   float_format i_fmt;
 
@@ -1116,25 +1078,16 @@ make_format (const ComplexMatrix& cm, in
   scale = (x_max == 0 || int_or_inf_or_nan)
           ? 1.0 : std::pow (10.0, calc_scale_exp (x_max - 1));
 
   return make_complex_matrix_format (x_max, x_min, r_x_max, r_x_min,
                                      inf_or_nan, int_or_inf_or_nan,
                                      r_fw, i_fw);
 }
 
-static void
-set_format (const ComplexMatrix& cm, int& r_fw, int& i_fw, double& scale)
-{
-  if (free_format)
-    curr_float_display_fmt = float_display_format ();
-  else
-    curr_float_display_fmt = make_format (cm, r_fw, i_fw, scale);
-}
-
 static float_display_format
 make_range_format (int x_max, int x_min, int all_ints, int& fw)
 {
   float_format fmt;
 
   int prec = output_precision ();
 
   int ld, rd;
@@ -1269,22 +1222,16 @@ make_format (const Range& r, int& fw, do
   int x_min = (min_abs == 0.0 ? 0 : num_digits (min_abs));
 
   scale = (x_max == 0 || all_ints)
           ? 1.0 : std::pow (10.0, calc_scale_exp (x_max - 1));
 
   return make_range_format (x_max, x_min, all_ints, fw);
 }
 
-static void
-set_format (const Range& r, int& fw, double& scale)
-{
-  curr_float_display_fmt = make_format (r, fw, scale);
-}
-
 union equiv
 {
   double d;
   unsigned char i[sizeof (double)];
 };
 
 #define PRINT_CHAR_BITS(os, c)                  \
   do                                            \
@@ -1436,34 +1383,22 @@ pr_float (std::ostream& os, const float_
 {
   if (Vfixed_point_format && ! print_g && scale != 1.0)
     d /= scale;
 
   pr_any_float (os, fmt.real_format (), d, fw);
 }
 
 static inline void
-pr_float (std::ostream& os, double d, int fw = 0, double scale = 1.0)
-{
-  pr_float (os, curr_float_display_fmt, d, fw, scale);
-}
-
-static inline void
 pr_imag_float (std::ostream& os, const float_display_format& fmt,
                double d, int fw = 0)
 {
   pr_any_float (os, fmt.imag_format (), d, fw);
 }
 
-static inline void
-pr_imag_float (std::ostream& os, double d, int fw = 0)
-{
-  pr_imag_float (os, curr_float_display_fmt, d, fw);
-}
-
 static void
 pr_complex (std::ostream& os, const float_display_format& fmt,
             const Complex& c, int r_fw = 0, int i_fw = 0, double scale = 1.0)
 {
   Complex tmp
     = (Vfixed_point_format && ! print_g && scale != 1.0) ? c / scale : c;
 
   double r = tmp.real ();
@@ -1488,23 +1423,16 @@ pr_complex (std::ostream& os, const floa
 
           pr_imag_float (os, fmt, i, i_fw);
         }
       os << 'i';
     }
 }
 
 static void
-pr_complex (std::ostream& os, const Complex& c, int r_fw = 0, int i_fw = 0,
-            double scale = 1.0)
-{
-  pr_complex (os, curr_float_display_fmt, c, r_fw, i_fw, scale);
-}
-
-static void
 print_empty_matrix (std::ostream& os, octave_idx_type nr, octave_idx_type nc,
                     bool pr_as_read_syntax)
 {
   assert (nr == 0 || nc == 0);
 
   if (pr_as_read_syntax)
     {
       if (nr == 0 && nc == 0)
@@ -1841,17 +1769,17 @@ octave_print_internal (std::ostream& os,
           if (i < nr - 1)
             os << "\n";
         }
     }
   else
     {
       int fw = 0;
       double scale = 1.0;
-      set_format (m, fw, scale);
+      float_display_format fmt = make_format (m, fw, scale);
       int column_width = fw + 2;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
       if (pr_as_read_syntax)
         max_width -= 4;
       else
         max_width -= extra_indent;
@@ -1898,17 +1826,17 @@ octave_print_internal (std::ostream& os,
                       else
                         {
                           if (j > col && j < lim)
                             os << ", ";
                           else
                             os << "  ";
                         }
 
-                      pr_float (os, m(i,j));
+                      pr_float (os, fmt, m(i,j));
                     }
 
                   col += inc;
 
                   if (col >= nc)
                     {
                       if (i == nr - 1)
                         os << " ]";
@@ -1938,17 +1866,17 @@ octave_print_internal (std::ostream& os,
                   os << std::setw (extra_indent) << "";
 
                   for (octave_idx_type j = col; j < lim; j++)
                     {
                       octave_quit ();
 
                       os << "  ";
 
-                      pr_float (os, m(i,j), fw, scale);
+                      pr_float (os, fmt, m(i,j), fw, scale);
                     }
 
                   if (i < nr - 1)
                     os << "\n";
                 }
             }
         }
     }
@@ -1977,17 +1905,17 @@ octave_print_internal (std::ostream& os,
           if (i < nr - 1)
             os << "\n";
         }
     }
   else
     {
       int fw;
       double scale = 1.0;
-      set_format (Matrix (m.diag ()), fw, scale);
+      float_display_format fmt = make_format (Matrix (m.diag ()), fw, scale);
       int column_width = fw + 2;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
       if (pr_as_read_syntax)
         max_width -= 4;
       else
         max_width -= extra_indent;
@@ -2034,17 +1962,17 @@ octave_print_internal (std::ostream& os,
                   else
                     {
                       if (j > col && j < lim)
                         os << ", ";
                       else
                         os << "  ";
                     }
 
-                  pr_float (os, m(j,j));
+                  pr_float (os, fmt, m(j,j));
                 }
 
               col += inc;
 
               if (col >= nc)
                 os << " ]";
               else
                 os << " ...\n";
@@ -2060,17 +1988,17 @@ octave_print_internal (std::ostream& os,
             os << "\n";
 
           pr_scale_header (os, scale);
 
           // kluge.  Get the true width of a number.
           int zero_fw;
           {
             std::ostringstream tmp_oss;
-            pr_float (tmp_oss, 0.0, fw, scale);
+            pr_float (tmp_oss, fmt, 0.0, fw, scale);
             zero_fw = tmp_oss.str ().length ();
           }
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
               octave_idx_type lim = (col + inc < nc ? col + inc : nc);
 
               pr_col_num_header (os, total_width, max_width, lim, col,
@@ -2082,17 +2010,17 @@ octave_print_internal (std::ostream& os,
 
                   for (octave_idx_type j = col; j < lim; j++)
                     {
                       octave_quit ();
 
                       os << "  ";
 
                       if (i == j)
-                        pr_float (os, m(i,j), fw, scale);
+                        pr_float (os, fmt, m(i,j), fw, scale);
                       else
                         os << std::setw (zero_fw) << '0';
 
                     }
 
                   if (i < nr - 1)
                     os << "\n";
                 }
@@ -2255,17 +2183,17 @@ octave_print_internal (std::ostream& os,
           if (i < nr - 1)
             os << "\n";
         }
     }
   else
     {
       int r_fw, i_fw;
       double scale = 1.0;
-      set_format (cm, r_fw, i_fw, scale);
+      float_display_format fmt = make_format (cm, r_fw, i_fw, scale);
       int column_width = i_fw + r_fw;
       column_width += (rat_format || bank_format || hex_format
                        || bit_format) ? 2 : 7;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
       if (pr_as_read_syntax)
         max_width -= 4;
@@ -2314,17 +2242,17 @@ octave_print_internal (std::ostream& os,
                       else
                         {
                           if (j > col && j < lim)
                             os << ", ";
                           else
                             os << "  ";
                         }
 
-                      pr_complex (os, cm(i,j));
+                      pr_complex (os, fmt, cm(i,j));
                     }
 
                   col += inc;
 
                   if (col >= nc)
                     {
                       if (i == nr - 1)
                         os << " ]";
@@ -2354,17 +2282,17 @@ octave_print_internal (std::ostream& os,
                   os << std::setw (extra_indent) << "";
 
                   for (octave_idx_type j = col; j < lim; j++)
                     {
                       octave_quit ();
 
                       os << "  ";
 
-                      pr_complex (os, cm(i,j), r_fw, i_fw, scale);
+                      pr_complex (os, fmt, cm(i,j), r_fw, i_fw, scale);
                     }
 
                   if (i < nr - 1)
                     os << "\n";
                 }
             }
         }
     }
@@ -2393,17 +2321,18 @@ octave_print_internal (std::ostream& os,
           if (i < nr - 1)
             os << "\n";
         }
     }
   else
     {
       int r_fw, i_fw;
       double scale = 1.0;
-      set_format (ComplexMatrix (cm.diag ()), r_fw, i_fw, scale);
+      float_display_format fmt
+        = make_format (ComplexMatrix (cm.diag ()), r_fw, i_fw, scale);
       int column_width = i_fw + r_fw;
       column_width += (rat_format || bank_format || hex_format
                        || bit_format) ? 2 : 7;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
       if (pr_as_read_syntax)
         max_width -= 4;
@@ -2452,17 +2381,17 @@ octave_print_internal (std::ostream& os,
                   else
                     {
                       if (j > col && j < lim)
                         os << ", ";
                       else
                         os << "  ";
                     }
 
-                  pr_complex (os, cm(j,j));
+                  pr_complex (os, fmt, cm(j,j));
                 }
 
               col += inc;
 
               if (col >= nc)
                 os << " ]";
               else
                 os << " ...\n";
@@ -2478,17 +2407,17 @@ octave_print_internal (std::ostream& os,
             os << "\n";
 
           pr_scale_header (os, scale);
 
           // kluge.  Get the true width of a number.
           int zero_fw;
           {
             std::ostringstream tmp_oss;
-            pr_complex (tmp_oss, Complex (0.0), r_fw, i_fw, scale);
+            pr_complex (tmp_oss, fmt, Complex (0.0), r_fw, i_fw, scale);
             zero_fw = tmp_oss.str ().length ();
           }
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
               octave_idx_type lim = (col + inc < nc ? col + inc : nc);
 
               pr_col_num_header (os, total_width, max_width, lim, col,
@@ -2500,17 +2429,17 @@ octave_print_internal (std::ostream& os,
 
                   for (octave_idx_type j = col; j < lim; j++)
                     {
                       octave_quit ();
 
                       os << "  ";
 
                       if (i == j)
-                        pr_complex (os, cm(i,j), r_fw, i_fw, scale);
+                        pr_complex (os, fmt, cm(i,j), r_fw, i_fw, scale);
                       else
                         os << std::setw (zero_fw) << '0';
                     }
 
                   if (i < nr - 1)
                     os << "\n";
                 }
             }
@@ -2737,37 +2666,37 @@ octave_print_internal (std::ostream& os,
 
           pr_plus_format (os, val);
         }
     }
   else
     {
       int fw = 0;
       double scale = 1.0;
-      set_format (r, fw, scale);
+      float_display_format fmt = make_format (r, fw, scale);
 
       if (pr_as_read_syntax)
         {
           if (free_format)
             {
               os << base << " : ";
               if (increment != 1.0)
                 os << increment << " : ";
               os << limit;
             }
           else
             {
-              pr_float (os, base, fw);
+              pr_float (os, fmt, base, fw);
               os << " : ";
               if (increment != 1.0)
                 {
-                  pr_float (os, increment, fw);
+                  pr_float (os, fmt, increment, fw);
                   os << " : ";
                 }
-              pr_float (os, limit, fw);
+              pr_float (os, fmt, limit, fw);
             }
         }
       else
         {
           octave::preserve_stream_state stream_state (os);
 
           int column_width = fw + 2;
           octave_idx_type total_width = num_elem * column_width;
@@ -2819,17 +2748,17 @@ octave_print_internal (std::ostream& os,
                       // See the comments in Range::matrix_value.
                       if ((increment > 0 && val >= limit)
                           || (increment < 0 && val <= limit))
                         val = limit;
                     }
 
                   os << "  ";
 
-                  pr_float (os, val, fw, scale);
+                  pr_float (os, fmt, val, fw, scale);
                 }
 
               col += inc;
             }
         }
     }
 }
 
