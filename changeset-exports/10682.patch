# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1275839521 -3600
#      Sun Jun 06 16:52:01 2010 +0100
# Node ID 7b4ffe27bbb40a2903be0ba71bbbf52c7649c883
# Parent  0ba9bd294421311f6d3810ba4ef391739fb8cf16
Specify template arguments explicitely [MSVC].

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2010-06-06  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* mx-op-defs.h (MNANCHK): Add matrix element type argument and use it
+	to specify template argument for mx_inline_any_nan.
+	(MS_BOOL_OP, SM_BOOL_OP, MM_BOOL_OP, NDS_BOOL_OP, SND_BOOL_OP,
+	NDND_BOOL_OP): Specify new MNANCHK argument.
+
 2010-06-04  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dim-vector.cc: New source.
 	* Makefile.am: Add it.
 	* dim-vector.h (dim_vector::chop_all_singletons, 
 	dim_vector::str, dim_vector::num_ones, dim_vector::safe_numel, 
 	dim_vector::squeeze, dim_vector::concat, dim_vector::redim):
 	Move bodies to dim_vector.cc. 
diff --git a/liboctave/mx-op-defs.h b/liboctave/mx-op-defs.h
--- a/liboctave/mx-op-defs.h
+++ b/liboctave/mx-op-defs.h
@@ -28,18 +28,18 @@ along with Octave; see the file COPYING.
 
 #include "mx-op-decl.h"
 #include "mx-inlines.cc"
 
 #define SNANCHK(s) \
   if (xisnan (s)) \
     gripe_nan_to_logical_conversion ()
 
-#define MNANCHK(m) \
-  if (do_mx_check (m, mx_inline_any_nan)) \
+#define MNANCHK(m, MT) \
+  if (do_mx_check (m, mx_inline_any_nan<MT>)) \
     gripe_nan_to_logical_conversion ()
 
 // vector by scalar operations.
 
 #define VS_BIN_OP(R, F, OP, V, S) \
   R \
   F (const V& v, const S& s) \
   { \
@@ -111,17 +111,17 @@ along with Octave; see the file COPYING.
   MS_CMP_OP (mx_el_gt, mx_inline_gt, M, S) \
   MS_CMP_OP (mx_el_eq, mx_inline_eq, M, S) \
   MS_CMP_OP (mx_el_ne, mx_inline_ne, M, S)
 
 #define MS_BOOL_OP(F, OP, M, S) \
   boolMatrix \
   F (const M& m, const S& s) \
   { \
-    MNANCHK (m); \
+    MNANCHK (m, M::element_type); \
     SNANCHK (s); \
     return do_ms_binary_op<bool, M::element_type, S> (m, s, OP); \
   }
 
 #define MS_BOOL_OPS(M, S) \
   MS_BOOL_OP (mx_el_and, mx_inline_and, M, S) \
   MS_BOOL_OP (mx_el_or,  mx_inline_or,  M, S)
 
@@ -155,17 +155,17 @@ along with Octave; see the file COPYING.
   SM_CMP_OP (mx_el_eq, mx_inline_eq, S, M) \
   SM_CMP_OP (mx_el_ne, mx_inline_ne, S, M)
 
 #define SM_BOOL_OP(F, OP, S, M) \
   boolMatrix \
   F (const S& s, const M& m) \
   { \
     SNANCHK (s); \
-    MNANCHK (m); \
+    MNANCHK (m, M::element_type); \
     return do_sm_binary_op<bool, S, M::element_type> (s, m, OP); \
   }
 
 #define SM_BOOL_OPS(S, M) \
   SM_BOOL_OP (mx_el_and, mx_inline_and, S, M) \
   SM_BOOL_OP (mx_el_or,  mx_inline_or,  S, M)
 
 // matrix by matrix operations.
@@ -197,18 +197,18 @@ along with Octave; see the file COPYING.
   MM_CMP_OP (mx_el_gt, mx_inline_gt, M1, M2) \
   MM_CMP_OP (mx_el_eq, mx_inline_eq, M1, M2) \
   MM_CMP_OP (mx_el_ne, mx_inline_ne, M1, M2)
 
 #define MM_BOOL_OP(F, OP, M1, M2) \
   boolMatrix \
   F (const M1& m1, const M2& m2) \
   { \
-    MNANCHK (m1); \
-    MNANCHK (m2); \
+    MNANCHK (m1, M1::element_type); \
+    MNANCHK (m2, M2::element_type); \
     return do_mm_binary_op<bool, M1::element_type, M2::element_type> (m1, m2, OP, #F); \
   }
 
 #define MM_BOOL_OPS(M1, M2) \
   MM_BOOL_OP (mx_el_and, mx_inline_and, M1, M2) \
   MM_BOOL_OP (mx_el_or,  mx_inline_or,  M1, M2)
 
 // N-d matrix by scalar operations.
@@ -240,17 +240,17 @@ along with Octave; see the file COPYING.
   NDS_CMP_OP (mx_el_gt, mx_inline_gt, ND, S) \
   NDS_CMP_OP (mx_el_eq, mx_inline_eq, ND, S) \
   NDS_CMP_OP (mx_el_ne, mx_inline_ne, ND, S)
 
 #define NDS_BOOL_OP(F, OP, ND, S) \
   boolNDArray \
   F (const ND& m, const S& s) \
   { \
-    MNANCHK (m); \
+    MNANCHK (m, ND::element_type); \
     SNANCHK (s); \
     return do_ms_binary_op<bool, ND::element_type, S> (m, s, OP); \
   }
 
 #define NDS_BOOL_OPS(ND, S) \
   NDS_BOOL_OP (mx_el_and,     mx_inline_and,     ND, S) \
   NDS_BOOL_OP (mx_el_or,      mx_inline_or,      ND, S) \
   NDS_BOOL_OP (mx_el_not_and, mx_inline_not_and, ND, S) \
@@ -288,17 +288,17 @@ along with Octave; see the file COPYING.
   SND_CMP_OP (mx_el_eq, mx_inline_eq, S, ND) \
   SND_CMP_OP (mx_el_ne, mx_inline_ne, S, ND)
 
 #define SND_BOOL_OP(F, OP, S, ND) \
   boolNDArray \
   F (const S& s, const ND& m) \
   { \
     SNANCHK (s); \
-    MNANCHK (m); \
+    MNANCHK (m, ND::element_type); \
     return do_sm_binary_op<bool, S, ND::element_type> (s, m, OP); \
   }
 
 #define SND_BOOL_OPS(S, ND) \
   SND_BOOL_OP (mx_el_and,     mx_inline_and,     S, ND) \
   SND_BOOL_OP (mx_el_or,      mx_inline_or,      S, ND) \
   SND_BOOL_OP (mx_el_not_and, mx_inline_not_and, S, ND) \
   SND_BOOL_OP (mx_el_not_or,  mx_inline_not_or,  S, ND) \
@@ -334,18 +334,18 @@ along with Octave; see the file COPYING.
   NDND_CMP_OP (mx_el_gt, mx_inline_gt, ND1, ND2) \
   NDND_CMP_OP (mx_el_eq, mx_inline_eq, ND1, ND2) \
   NDND_CMP_OP (mx_el_ne, mx_inline_ne, ND1, ND2)
 
 #define NDND_BOOL_OP(F, OP, ND1, ND2) \
   boolNDArray \
   F (const ND1& m1, const ND2& m2) \
   { \
-    MNANCHK (m1); \
-    MNANCHK (m2); \
+    MNANCHK (m1, ND1::element_type); \
+    MNANCHK (m2, ND2::element_type); \
     return do_mm_binary_op<bool, ND1::element_type, ND2::element_type> (m1, m2, OP, #F); \
   }
 
 #define NDND_BOOL_OPS(ND1, ND2) \
   NDND_BOOL_OP (mx_el_and,     mx_inline_and,     ND1, ND2) \
   NDND_BOOL_OP (mx_el_or,      mx_inline_or,      ND1, ND2) \
   NDND_BOOL_OP (mx_el_not_and, mx_inline_not_and, ND1, ND2) \
   NDND_BOOL_OP (mx_el_not_or,  mx_inline_not_or,  ND1, ND2) \
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-06-06  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* data.cc (Frem, Fmod): Specify template arguments of binmap
+	explicitely.
+
 2010-06-02  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/strfind.cc (Fqs_replace): Allow overlapped matches.
 	(Fstrrep): Support "overlaps" option.
 	(Fstrfind): Ditto.
 
 2010-05-28  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -536,17 +536,17 @@ agree, or if either of the arguments is 
             {
               switch (btyp0)
                 {
 #define MAKE_INT_BRANCH(X) \
                 case btyp_ ## X: \
                     { \
                     X##NDArray a0 = args(0).X##_array_value (); \
                     X##NDArray a1 = args(1).X##_array_value (); \
-                    retval = binmap<octave_##X> (a0, a1, rem, "rem"); \
+                    retval = binmap<octave_##X,octave_##X,octave_##X> (a0, a1, rem, "rem"); \
                     } \
                   break
                 MAKE_INT_BRANCH (int8);
                 MAKE_INT_BRANCH (int16);
                 MAKE_INT_BRANCH (int32);
                 MAKE_INT_BRANCH (int64);
                 MAKE_INT_BRANCH (uint8);
                 MAKE_INT_BRANCH (uint16);
@@ -668,17 +668,17 @@ either of the arguments is complex.\n\
             {
               switch (btyp0)
                 {
 #define MAKE_INT_BRANCH(X) \
                 case btyp_ ## X: \
                     { \
                     X##NDArray a0 = args(0).X##_array_value (); \
                     X##NDArray a1 = args(1).X##_array_value (); \
-                    retval = binmap<octave_##X> (a0, a1, mod, "mod"); \
+                    retval = binmap<octave_##X,octave_##X,octave_##X> (a0, a1, mod, "mod"); \
                     } \
                   break
                 MAKE_INT_BRANCH (int8);
                 MAKE_INT_BRANCH (int16);
                 MAKE_INT_BRANCH (int32);
                 MAKE_INT_BRANCH (int64);
                 MAKE_INT_BRANCH (uint8);
                 MAKE_INT_BRANCH (uint16);
