# HG changeset patch
# User jwe
# Date 1115230337 0
#      Wed May 04 18:12:17 2005 +0000
# Node ID 6ba182a85dea320e2ec15ab1e725c7501baa20cb
# Parent  a892ee7ac114b481b68acd92325e7d8eb7ddcf63
[project @ 2005-05-04 18:12:16 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2005-05-04  John W. Eaton  <jwe@octave.org>
+
+	* cmd-edit.cc (gnu_readline::do_readline): Extract const char*
+	from prompt outside of INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE block.
+
 2005-05-02  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in (LINK_DEPS): List $(UMFPACK_LIBS) ahead of $(BLAS_LIBS).
 	From Dmitri A. Sergatskov <dasergatskov@gmail.com>.
 
 2005-04-29  David Bateman  <dbateman@free.fr>
 
 	* dSparse.cc (trisolve): Diagonal passed to lapack zptsv is type
diff --git a/liboctave/cmd-edit.cc b/liboctave/cmd-edit.cc
--- a/liboctave/cmd-edit.cc
+++ b/liboctave/cmd-edit.cc
@@ -192,19 +192,21 @@ std::string
 gnu_readline::do_readline (const std::string& prompt, bool& eof)
 {
   std::string retval;
 
   eof = false;
 
   char *line = 0;
 
+  const char *p = prompt.c_str ();
+
   BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 
-  line = ::octave_rl_readline (prompt.c_str ());
+  line = ::octave_rl_readline (p);
 
   END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 
   if (line)
     {
       retval = line;
 
       free (line);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2005-05-04  John W. Eaton  <jwe@octave.org>
+
+	* ls-mat5.cc (read_mat5_binary_element): Implement reading of N-d
+	structure arrays.
+
+	* ov-struct.cc (octave_struct::load_hdf5,
+	octave_struct::load_binary, octave_struct::load_ascii): Assign
+	cell_value to map slot, not octave_value containing the cell.
+
 2005-05-02  John W. Eaton  <jwe@octave.org>
 
 	* error.cc (Flasterr): Don't access argv if an error occurs when
 	creating it.
 
 	* mkgendoc (main): Print header message.
 
 2005-05-02  Bill Denney  <denney@seas.upenn.edu>
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -710,17 +710,16 @@ read_mat5_binary_element (std::istream& 
       goto skip_ahead;
 
     case mxSTRUCT_CLASS:
       {
 	Octave_map m;
 	FOUR_BYTE_INT fn_type;
 	FOUR_BYTE_INT fn_len;
 	FOUR_BYTE_INT field_name_length;
-	int i;
 
 	// field name length subelement -- actually the maximum length
 	// of a field name.  The Matlab docs promise this will always
 	// be 32.  We read and use the actual value, on the theory
 	// that eventually someone will recognize that's a waste of
 	// space.
 	if (read_mat5_tag (is, swap, fn_type, fn_len) || fn_type != miINT32)
 	  {
@@ -737,59 +736,49 @@ read_mat5_binary_element (std::istream& 
 	// field name subelement.  The length of this subelement tells
 	// us how many fields there are.
 	if (read_mat5_tag (is, swap, fn_type, fn_len) || fn_type != miINT8)
 	  {
 	    error ("load: invalid field name subelement");
 	    goto data_read_error;
 	  }
 
-	int n_fields = fn_len/field_name_length;
+	octave_idx_type n_fields = fn_len/field_name_length;
 
 	fn_len = PAD (fn_len);
 
 	OCTAVE_LOCAL_BUFFER (char, elname, fn_len);
 
 	if (! is.read (elname, fn_len))
 	  goto data_read_error;
 
-	int n;
-	if (dims(0) == 1)
-	  n = dims(1);
-	else if (dims(1) == 1)
-	  n = dims(0);
-	else
-	  {
-	    error ("load: can only handle one-dimensional structure arrays");
-	    goto data_read_error;
-	  }
+	std::vector<Cell> elt (n_fields);
 
-	Cell field_elts (n_fields, n);
+	for (octave_idx_type i = 0; i < n_fields; i++)
+	  elt[i] = Cell (dims);
+
+	octave_idx_type n = dims.numel ();
 
 	// fields subelements
-	for (int j = 0; j < n; j++)
+	for (octave_idx_type j = 0; j < n; j++)
 	  {
-	    for (i = 0; i < n_fields; i++)
+	    for (octave_idx_type i = 0; i < n_fields; i++)
 	      {
 		octave_value fieldtc;
 		read_mat5_binary_element (is, filename, swap, global, fieldtc);
-		field_elts(i,j) = fieldtc;
+		elt[i](j) = fieldtc;
 	      }
+
 	  }
 
-	for (int j = n_fields-1; j >= 0; j--)
+	for (octave_idx_type i = 0; i < n_fields; i++)
 	  {
-	    const char *key = elname + j*field_name_length;
+	    const char *key = elname + i*field_name_length;
 
-	    Cell c (dim_vector (n, 1));
-
-	    for (int k = n-1; k >=0; k--)
-	      c(k) = field_elts(j,k);
-
-	    m.assign (key, c);
+	    m.assign (key, elt[i]);
 	  }
 
 	tc = m;
       }
       break;
 
     case mxINT8_CLASS:
       OCTAVE_MAT5_INTEGER_READ (int8NDArray);
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -1021,17 +1021,25 @@ octave_struct::load_ascii (std::istream&
 
 	      // recurse to read cell elements
 	      std::string nm
 		= read_ascii_data (is, std::string (), dummy, t2, count);
 
 	      if (!is)
 		break;
 
-	      m.assign (nm, t2);
+	      Cell tcell = t2.cell_value ();
+
+	      if (error_state)
+		{
+		  error ("load: internal error loading struct elements");
+		  return false;
+		}
+
+	      m.assign (nm, tcell);
 	    }
 
 	  if (is) 
 	    map = m;
 	  else
 	    {
 	      error ("load: failed to load structure");
 	      success = false;
@@ -1098,17 +1106,25 @@ octave_struct::load_binary (std::istream
 
 	  // recurse to read cell elements
 	  std::string nm = read_binary_data (is, swap, fmt, std::string (), 
 					     dummy, t2, doc);
 
 	  if (!is)
 	    break;
 
-	  m.assign (nm, t2);
+	  Cell tcell = t2.cell_value ();
+
+	  if (error_state)
+	    {
+	      error ("load: internal error loading struct elements");
+	      return false;
+	    }
+
+	  m.assign (nm, tcell);
 	}
 
       if (is) 
 	map = m;
       else
 	{
 	  error ("load: failed to load structure");
 	  success = false;
@@ -1174,17 +1190,25 @@ octave_struct::load_hdf5 (hid_t loc_id, 
   while (current_item < static_cast<int> (num_obj)
 	 && (retval2 = H5Giterate (loc_id, name, &current_item,
 				   hdf5_read_next_data, &dsub)) > 0)
 #else
   while ((retval2 = H5Giterate (loc_id, name, &current_item,
 				hdf5_read_next_data, &dsub)) > 0)
 #endif
     {
-      m.assign (dsub.name, dsub.tc);
+      Cell tcell = dsub.tc.cell_value ();
+
+      if (error_state)
+	{
+	  error ("load: internal error loading struct elements");
+	  return false;
+	}
+
+      m.assign (dsub.name, tcell);
 
       if (have_h5giterate_bug)
 	current_item++;  // H5Giterate returned the last index processed
     }
 
   if (retval2 >= 0)
     {
       map = m;
