# HG changeset patch
# User Rik <rik@octave.org>
# Date 1513856709 28800
#      Thu Dec 21 03:45:09 2017 -0800
# Node ID 9fbb5de78ec7ded2a248dd0a53de8fc07a0cb83b
# Parent  1df2cb3aa251cef194af670ee791a820b2c6a5bf
# Parent  f8bbaacefc33d152d9ceb7725aa6d2468deba7f3
maint: merge stable to default.

diff --git a/doc/interpreter/container.txi b/doc/interpreter/container.txi
--- a/doc/interpreter/container.txi
+++ b/doc/interpreter/container.txi
@@ -253,17 +253,17 @@ fields.  An example of the creation of a
 x(1).a = "string1";
 x(2).a = "string2";
 x(1).b = 1;
 x(2).b = 2;
 @end group
 @end example
 
 @noindent
-which creates a 2-by-1 structure array with two fields.  Another way
+which creates a 1-by-2 structure array with two fields.  Another way
 to create a structure array is with the @code{struct} function
 (@pxref{Creating Structures}).  As previously, to print the value of
 the structure array, you can type its name:
 
 @example
 @group
 x
      @result{} x =
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -307,20 +307,20 @@ cleared, you should use the @code{mlock}
 When creating simple one-shot programs it can be very convenient to
 see which variables are available at the prompt.  The function @code{who}
 and its siblings @code{whos} and @code{whos_line_format} will show
 different information about what is in memory, as the following shows.
 
 @example
 @group
 str = "A random string";
-who -variables
-     @print{} *** local user variables:
-     @print{}
-     @print{} __nargin__  str
+who
+ @print{} Variables in the current scope:
+ @print{}
+ @print{} ans  str
 @end group
 @end example
 
 @DOCSTRING(who)
 
 @DOCSTRING(whos)
 
 @DOCSTRING(whos_line_format)
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -3221,19 +3221,19 @@ DEFUN (complex, args, ,
 @deftypefn  {} {} complex (@var{x})
 @deftypefnx {} {} complex (@var{re}, @var{im})
 Return a complex value from real arguments.
 
 With 1 real argument @var{x}, return the complex result
 @w{@code{@var{x} + 0i}}.
 
 With 2 real arguments, return the complex result
-@w{@code{@var{re} + @var{im}}}.
+@w{@code{@var{re} + @var{im}i}}.
 @code{complex} can often be more convenient than expressions such as
-@w{@code{a + i*b}}.
+@w{@code{a + b*i}}.
 For example:
 
 @example
 @group
 complex ([1, 2], [3, 4])
   @result{} [ 1 + 3i   2 + 4i ]
 @end group
 @end example
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -1451,17 +1451,18 @@ your program to go on.  For example:
 @group
 warning ("foo: maybe something wrong here");
 @end group
 @end example
 
 The optional warning identifier @var{id} allows users to enable or disable
 warnings tagged by this identifier.  A message identifier is a string of the
 form @qcode{"NAMESPACE:WARNING-NAME"}.  Octave's own warnings use the
-@qcode{"Octave"} namespace (@pxref{XREFwarning_ids}).  For example:
+@qcode{"Octave"} namespace (@pxref{XREFwarning_ids,,warning_ids}).  For
+example:
 
 @example
 @group
 warning ("MyNameSpace:check-something",
          "foo: maybe something wrong here");
 @end group
 @end example
 
diff --git a/libinterp/corefcn/qz.cc b/libinterp/corefcn/qz.cc
--- a/libinterp/corefcn/qz.cc
+++ b/libinterp/corefcn/qz.cc
@@ -222,17 +222,17 @@ half-plane
 @item @qcode{"+"}
 non-negative real part: leading block has all eigenvalues in the closed right
 half-plane
 @end table
 @end table
 @end enumerate
 
 Note: @code{qz} performs permutation balancing, but not scaling
-(@pxref{XREFbalance}), which may be lead to less accurate results than
+(@pxref{XREFbalance,,balance}), which may be lead to less accurate results than
 @code{eig}.  The order of output arguments was selected for compatibility with
 @sc{matlab}.
 @seealso{eig, balance, lu, chol, hess, qr, qzhess, schur, svd}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
 #if defined (DEBUG)
diff --git a/libinterp/corefcn/strfns.cc b/libinterp/corefcn/strfns.cc
--- a/libinterp/corefcn/strfns.cc
+++ b/libinterp/corefcn/strfns.cc
@@ -63,23 +63,23 @@ character.  A range error results if an 
 
 For cell arrays, each element is concatenated separately.  Cell arrays
 converted through @code{char} can mostly be converted back with
 @code{cellstr}.  For example:
 
 @example
 @group
 char ([97, 98, 99], "", @{"98", "99", 100@}, "str1", ["ha", "lf"])
-   @result{} ["abc  "
-       "     "
-       "98   "
-       "99   "
-       "d    "
-       "str1 "
-       "half "]
+   @result{} ["abc "
+       "    "
+       "98  "
+       "99  "
+       "d   "
+       "str1"
+       "half"]
 @end group
 @end example
 @seealso{strvcat, cellstr}
 @end deftypefn */)
 {
   octave_value retval;
 
   int nargin = args.length ();
diff --git a/scripts/miscellaneous/setfield.m b/scripts/miscellaneous/setfield.m
--- a/scripts/miscellaneous/setfield.m
+++ b/scripts/miscellaneous/setfield.m
@@ -41,17 +41,17 @@
 ## @end example
 ##
 ## @noindent
 ## Note that ordinary structure syntax @code{@var{s}.foo bar = 42} cannot be
 ## used here, as the field name is not a valid Octave identifier because of
 ## the space character.  Using arbitrary strings for field names is
 ## incompatible with @sc{matlab}, and this usage will emit a warning if the
 ## warning ID @code{Octave:language-extension} is enabled.
-## @xref{XREFwarning_ids}.
+## @xref{XREFwarning_ids,,warning_ids}.
 ##
 ## With the second calling form, set a field of a structure array.  The
 ## input @var{sidx} selects an element of the structure array, @var{field}
 ## specifies the field name of the selected element, and @var{fidx} selects
 ## which element of the field (in the case of an array or cell array).
 ## The @var{sidx}, @var{field}, and @var{fidx} inputs can be repeated to
 ## address nested structure array elements.  The structure array index and
 ## field element index must be cell arrays while the field name must be a
