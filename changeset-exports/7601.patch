# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1205890368 14400
#      Tue Mar 18 21:32:48 2008 -0400
# Node ID 8a939b21786329cab992c0e1136a4c7e90d0128a
# Parent  24abf5a702d93057c7a788db2a98a624c1eb5802
Treat negative values to lgamma and beta correctly

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2008-03-18  David Bateman  <dbateman@free.fr>
+
+	* configure.in (AC_CHECK_FUNCS): Also check lgamma_r.
+
 2008-03-11  David Bateman  <dbateman@free.fr>
 
 	* run-octave.in: Fix typo.
 
 2008-02-21  John W. Eaton  <jwe@octave.org>
 
 	* examples/Makefile.in (install install-strip): Ignore errors
 	installing octave.desktop file.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -1292,21 +1292,21 @@ else
   AC_MSG_ERROR([You are required to have fnmatch.h and glob.h])
 fi
 
 ### Checks for functions and variables.
 
 AC_CHECK_FUNCS(atexit basename bcopy bzero canonicalize_file_name chmod \
   dup2 endgrent endpwent execvp fcntl fork getcwd getegid geteuid \
   getgid getgrent getgrgid getgrnam getpgrp getpid getppid getpwent \
-  getpwuid gettimeofday getuid getwd _kbhit kill lgamma link localtime_r \
-  lstat memmove mkdir mkfifo mkstemp on_exit pipe poll putenv raise \
-  readlink realpath rename resolvepath rindex rmdir round select setgrent \
-  setlocale setpwent setvbuf sigaction siglongjmp sigpending sigprocmask \
-  sigsuspend snprintf stat strcasecmp strdup strerror stricmp \
+  getpwuid gettimeofday getuid getwd _kbhit kill lgamma lgamma_r link \
+  localtime_r lstat memmove mkdir mkfifo mkstemp on_exit pipe poll putenv \
+  raise readlink realpath rename resolvepath rindex rmdir round select \
+  setgrent setlocale setpwent setvbuf sigaction siglongjmp sigpending \
+  sigprocmask sigsuspend snprintf stat strcasecmp strdup strerror stricmp \
   strncasecmp strnicmp strptime strsignal symlink tempnam tgamma umask \
   uname unlink usleep utime vfprintf vsprintf vsnprintf waitpid \
   _chmod _snprintf x_utime _utime32)
 
 case "$canonical_host_type" in
   *-*-msdosmsvc)
     ## The %T format specifier for strftime is reportedly broken,
     ## so use our version.  We could use an actual configure test
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,14 @@
 2008-03-18  David Bateman  <dbateman@free.fr>
 
+	* lo-specfun.cc (Complex xlgamma (const Complex&)): New function.
+	* lo-specfun.h (Complex xlgamma (const Complex&)): Declare it.
+	* randpoison.c (xlgamma): Use lgamma if HAVE_LGAMMA is defined.
+	
 	* dNDArray.cc (NDArray::min, NDArraymax): chop trailing singletons.
 	* CNDarray.cc (ComplexNDArray::min, CompelxNDArray::max): ditto.
 	* intNDarray.cc (intNDArray<T>::min, intNDArray<T>::max): ditto.
 	
 	* Array.cc (Array<T>::index): Don't short_freeze on index with
 	fewer dimensions than the array only if the last dimension is empty.
 
 2008-03-18  John W. Eaton  <jwe@octave.org>
diff --git a/liboctave/lo-specfun.cc b/liboctave/lo-specfun.cc
--- a/liboctave/lo-specfun.cc
+++ b/liboctave/lo-specfun.cc
@@ -191,16 +191,44 @@ xlgamma (double x)
     result = octave_Inf;
   else
     F77_XFCN (dlgams, DLGAMS, (x, result, sgngam));
 
   return result;
 #endif
 }
 
+Complex
+xlgamma (const Complex& xc)
+{
+  // Can only be called with a real value of x.
+  double x = xc.real ();
+  double result;
+
+#if defined (HAVE_LGAMMA_R)
+  int sgngam;
+  result = lgamma_r (x, &sgngam);    
+#else
+  double sgngam;
+
+  if (xisnan (x))
+    result = x;
+  else if (xisinf (x))
+    result = octave_Inf;
+  else
+    F77_XFCN (dlgams, DLGAMS, (x, result, sgngam));
+
+#endif
+
+  if (sgngam < 0)
+    return result + Complex (0., M_PI);
+  else
+    return result;
+}
+
 static inline Complex
 zbesj (const Complex& z, double alpha, int kode, octave_idx_type& ierr);
 
 static inline Complex
 zbesy (const Complex& z, double alpha, int kode, octave_idx_type& ierr);
 
 static inline Complex
 zbesi (const Complex& z, double alpha, int kode, octave_idx_type& ierr);
diff --git a/liboctave/lo-specfun.h b/liboctave/lo-specfun.h
--- a/liboctave/lo-specfun.h
+++ b/liboctave/lo-specfun.h
@@ -54,16 +54,17 @@ extern OCTAVE_API double erf (double);
 #endif
 
 #if !defined (HAVE_ERFC)
 extern OCTAVE_API double erfc (double);
 #endif
 
 extern OCTAVE_API double xgamma (double x);
 extern OCTAVE_API double xlgamma (double x);
+extern OCTAVE_API Complex xlgamma (const Complex& x);
 
 extern OCTAVE_API Complex
 besselj (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr);
 
 extern OCTAVE_API Complex
 bessely (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr);
 
 extern OCTAVE_API Complex
diff --git a/liboctave/randpoisson.c b/liboctave/randpoisson.c
--- a/liboctave/randpoisson.c
+++ b/liboctave/randpoisson.c
@@ -54,25 +54,28 @@ along with Octave; see the file COPYING.
 
 F77_RET_T
 F77_FUNC (dlgams, DLGAMS) (const double *, double *, double *);
 
 static double
 xlgamma (double x)
 {
   double result;
+#ifdef HAVE_LGAMMA
+  result = lgamma (x);
+#else
   double sgngam;
 
   if (lo_ieee_isnan (x))
     result = x;
   else if (x <= 0 || lo_ieee_isinf (x))
     result = octave_Inf;
   else
     F77_XFCN (dlgams, DLGAMS, (&x, &result, &sgngam));
-
+#endif
   return result;
 }
 
 /* ---- pprsc.c from Stadloeber's winrand --- */
 
 /* flogfak(k) = ln(k!) */
 static double 
 flogfak (double k)
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2008-03-18  Ben Abbott <bpabbott@mac.com>
+
+	* specfun/beta.m: Fix for negative inputs.
+
 2008-03-18  Michael D. Godfrey  <godfrey@isl.stanford.edu>
 
 	* plot/__go_draw_axes__.m: Use correct symbol codes.
 
 2008-03-14  Kai Habel  <kai.habel@gmx.de>
 
         * plot/__go_draw_axes__.m: Expicitly set gnuplot user
         style to default to avoid wrong mesh color in some cases.
diff --git a/scripts/specfun/beta.m b/scripts/specfun/beta.m
--- a/scripts/specfun/beta.m
+++ b/scripts/specfun/beta.m
@@ -14,17 +14,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Mapping Function} {} beta (@var{a}, @var{b})
-## Return the Beta function,
+## For real inputs, return the Beta function,
 ## @iftex
 ## @tex
 ## $$
 ##  B (a, b) = {\Gamma (a) \Gamma (b) \over \Gamma (a + b)}.
 ## $$
 ## @end tex
 ## @end iftex
 ## @ifinfo
@@ -40,24 +40,45 @@
 ## Adapted-By: jwe
 
 function retval = beta (a, b)
 
   if (nargin != 2)
     print_usage ();
   endif
 
-  retval = exp (gammaln (a) + gammaln (b) - gammaln (a+b));
+  if (any (size (a) != size (b)) && numel (a) != 1 && numel (b) != 1)
+    error ("beta: inputs have inconsistent sizes.")
+  endif
+
+  if (! isreal (a) || ! isreal (b))
+    error ("beta: inputs must be real.")
+  endif
+
+  retval = real (exp (gammaln (a) + gammaln (b) - gammaln (a+b)));
 
 endfunction
 
 %!test
 %! a=[1, 1.5, 2, 3];
 %! b=[4, 3, 2, 1];
 %! v1=beta(a,b);
 %! v2=beta(b,a);
 %! v3=gamma(a).*gamma(b)./gamma(a+b);
 %! assert(all(abs(v1-v2)<sqrt(eps)) && all(abs(v2-v3)<sqrt(eps)));
 
 %!error beta();
 
 %!error beta(1);
 
+%!assert (1, beta (1, 1))
+
+%!test
+%! a = 2:10;
+%! tol = 10 * max (a) * eps;
+%! assert (-a, beta (-1./a, 1), tol)
+%! assert (-a, beta (1, -1./a), tol)
+
+%!test
+%! a = 0.25 + (0:5) * 0.5;
+%! tol = 10 * max (a) * eps;
+%! assert (zeros (size (a)), beta (a, -a), tol)
+%! assert (zeros (size (a)), beta (-a, a), tol)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 2008-03-18  David Bateman  <dbateman@free.fr>
 
+	* ov-re-mat.cc (lgamma): Convert to a allow negative arguments.
+	* ov-re-sparse.cc (lgamma): ditto.
+	* ov-scalar.cc (lgamma): ditto.
+
 	* DLD-FUNCTIONS/minmax.cc: 64-bit indexing fix.
 
 2008-03-13  John W. Eaton  <jwe@octave.org>
 
 	* ov-usr-fcn.cc (octave_user_function::octave_user_function):
 	Handle num_named_args in initialization list instead of functinon body.
 
 	* octave.gperf: Eliminate varargin and varargout keywords.
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -720,18 +720,17 @@ Return 1 for characters that are hexadec
 
   return retval;
 }
 
 DEFUN (lgamma, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} lgamma (@var{x})\n\
 @deftypefnx {Mapping Function} {} gammaln (@var{x})\n\
-Return the natural logarithm of the absolute value of the gamma\n\
-function of @var{x}.\n\
+Return the natural logarithm of the gamma function of @var{x}.\n\
 @seealso{gamma, gammai}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).lgamma ();
   else
     print_usage ();
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -710,17 +710,17 @@ static double
 xconj (double x)
 {
   return x;
 }
 
 ARRAY_MAPPER (erf, NDArray::dmapper, ::erf)
 ARRAY_MAPPER (erfc, NDArray::dmapper, ::erfc)
 ARRAY_MAPPER (gamma, NDArray::dmapper, xgamma)
-ARRAY_MAPPER (lgamma, NDArray::dmapper, xlgamma)
+CD_ARRAY_MAPPER (lgamma, xlgamma, xlgamma, 0.0, octave_Inf)
 ARRAY_MAPPER (abs, NDArray::dmapper, ::fabs)
 ARRAY_MAPPER (acos, NDArray::dmapper, ::acos)
 CD_ARRAY_MAPPER (acosh, ::acosh, ::acosh, 1.0, octave_Inf)
 ARRAY_MAPPER (angle, NDArray::dmapper, ::arg)
 ARRAY_MAPPER (arg, NDArray::dmapper, ::arg)
 CD_ARRAY_MAPPER (asin, ::asin, ::asin, -1.0, 1.0)
 ARRAY_MAPPER (asinh, NDArray::dmapper,::asinh)
 ARRAY_MAPPER (atan, NDArray::dmapper, ::atan)
diff --git a/src/ov-re-sparse.cc b/src/ov-re-sparse.cc
--- a/src/ov-re-sparse.cc
+++ b/src/ov-re-sparse.cc
@@ -900,17 +900,17 @@ static double
 xconj (double x)
 {
   return x;
 }
 
 SPARSE_MAPPER (erf, SparseMatrix::dmapper, ::erf)
 SPARSE_MAPPER (erfc, SparseMatrix::dmapper, ::erfc)
 SPARSE_MAPPER (gamma, SparseMatrix::dmapper, xgamma)
-SPARSE_MAPPER (lgamma, SparseMatrix::dmapper, xlgamma)
+CD_SPARSE_MAPPER (lgamma, xlgamma, xlgamma, 0.0, octave_Inf)
 SPARSE_MAPPER (abs, SparseMatrix::dmapper, ::fabs)
 SPARSE_MAPPER (acos, SparseMatrix::dmapper, ::acos)
 CD_SPARSE_MAPPER (acosh, ::acosh, ::acosh, 1.0, octave_Inf)
 SPARSE_MAPPER (angle, SparseMatrix::dmapper, ::arg)
 SPARSE_MAPPER (arg, SparseMatrix::dmapper, ::arg)
 CD_SPARSE_MAPPER (asin, ::asin, ::asin, -1.0, 1.0)
 SPARSE_MAPPER (asinh, SparseMatrix::dmapper, ::asinh)
 SPARSE_MAPPER (atan, SparseMatrix::dmapper, ::atan)
diff --git a/src/ov-scalar.cc b/src/ov-scalar.cc
--- a/src/ov-scalar.cc
+++ b/src/ov-scalar.cc
@@ -305,17 +305,17 @@ static double
 xconj (double x)
 {
   return x;
 }
 
 SCALAR_MAPPER (erf, ::erf)
 SCALAR_MAPPER (erfc, ::erfc)
 SCALAR_MAPPER (gamma, xgamma)
-SCALAR_MAPPER (lgamma, xlgamma)
+CD_SCALAR_MAPPER (lgamma, xlgamma, xlgamma, 0.0, octave_Inf)
 SCALAR_MAPPER (abs, ::fabs)
 SCALAR_MAPPER (acos, ::acos)
 CD_SCALAR_MAPPER (acosh, ::acosh, ::acosh, 1.0, octave_Inf)
 SCALAR_MAPPER (angle, ::arg)
 SCALAR_MAPPER (arg, ::arg)
 CD_SCALAR_MAPPER (asin, ::asin, ::asin, -1.0, 1.0)
 SCALAR_MAPPER (asinh, ::asinh)
 SCALAR_MAPPER (atan, ::atan)
