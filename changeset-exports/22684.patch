# HG changeset patch
# User Rik <rik@octave.org>
# Date 1477616279 25200
#      Thu Oct 27 17:57:59 2016 -0700
# Branch stable
# Node ID ce0f54b63923bbd95931f005939a8b6a398a99f5
# Parent  f88de8f2725937890f87957c619ffad99fc0a222
odeplot.m: Fix typo in documentation.

* odeplot.m: 'end' -> 'done'.

diff --git a/scripts/ode/odeplot.m b/scripts/ode/odeplot.m
--- a/scripts/ode/odeplot.m
+++ b/scripts/ode/odeplot.m
@@ -61,17 +61,17 @@
 ## This function is called by an ode solver function if it was specified in
 ## the @qcode{"OutputFcn"} property of an options structure created with
 ## @code{odeset}.  The ode solver will initially call the function with the
 ## syntax @code{odeplot ([@var{tfirst}, @var{tlast}], @var{y0}, "init")}.  The
 ## function initializes internal variables, creates a new figure window, and
 ## sets the x limits of the plot.  Subsequently, at each time step during the
 ## integration the ode solver calls @code{odeplot (@var{t}, @var{y}, [])}.
 ## At the end of the solution the ode solver calls
-## @code{odeplot ([], [], "end")} so that odeplot can perform any clean-up
+## @code{odeplot ([], [], "done")} so that odeplot can perform any clean-up
 ## actions required.
 ## @seealso{odeset, odeget, ode23, ode45}
 ## @end deftypefn
 
 function stop_solve = odeplot (t, y, flag)
 
   ## No input argument checking is done for better performance
   persistent hlines num_lines told yold;
@@ -91,17 +91,17 @@ function stop_solve = odeplot (t, y, fla
     drawnow;
 
     retval = false;
 
   elseif (strcmp (flag, "init"))
     ## t is either the time slot [tstart tstop] or [t0, t1, ..., tn]
     ## y is the initial value vector for the ode solution
     idx = 1;
-    told = t(1,1);
+    told = t(1);
     yold = y(:,1);
     figure ();
     hlines = plot (told, yold, "-", "marker", ".", "markersize", 9);
     xlim ([t(1), t(end)]);  # Fix limits which also speeds up plotting
     num_lines = numel (hlines);
 
   elseif (strcmp (flag, "done"))
     ## Cleanup after ode solver has finished.
