# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1234429243 -3600
#      Thu Feb 12 10:00:43 2009 +0100
# Node ID 5abe5ae55465c7944b06d8181af40143e0c83e3a
# Parent  474f64ab905f6d7953a7d8177c96e86e5aa6d2d3
use lo-traits in oct-inttypes

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-02-12  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-inttypes.h (if_else_type): Remove
+	(octave_int_base::truncate_int): Use if_then_else.
+
 2009-02-12  John W. Eaton  <jwe@octave.org>
 
 	* lo-traits.h: New file.
 	* Makefile.in (INCLUDES): Add it to the list.
 
 	* Array.h (compare_fcn_type): New typedef.
 	* oct-sort.h (compare_fcn_type): Ditto.
 
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -25,16 +25,17 @@ along with Octave; see the file COPYING.
 #define octave_inttypes_h 1
 
 #include <climits>
 #include <cstdlib>
 
 #include <limits>
 #include <iostream>
 
+#include "lo-traits.h"
 #include "lo-math.h"
 #include "oct-types.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 
 #ifdef OCTAVE_INT_USE_LONG_DOUBLE
 inline long double xround (long double x) { return roundl (x); }
 #endif
@@ -75,33 +76,16 @@ REGISTER_INT_TYPE (int8_t);
 REGISTER_INT_TYPE (uint8_t);
 REGISTER_INT_TYPE (int16_t);
 REGISTER_INT_TYPE (uint16_t);
 REGISTER_INT_TYPE (int32_t);
 REGISTER_INT_TYPE (uint32_t);
 REGISTER_INT_TYPE (int64_t);
 REGISTER_INT_TYPE (uint64_t);
 
-// Selects one of two types, according to a static bool.  May be useful in
-// general.
-
-template<bool cond, class TT, class FT>
-class if_else_type
-{
-public:
-  typedef FT type;
-};
-
-template<class TT, class FT>
-class if_else_type<true, TT, FT>
-{
-public:
-  typedef TT type;
-};
-
 // Rationale: Comparators have a single static method, rel(), that returns the
 // result of the binary relation. They also have two static boolean fields:
 // ltval, gtval determine the value of x OP y if x < y, x > y, respectively. 
 #define REGISTER_OCTAVE_CMP_OP(NM,OP) \
   class NM \
     { \
     public: \
       static const bool ltval = (0 OP 1), gtval = (1 OP 0); \
@@ -248,18 +232,18 @@ public:
         (! s_is_signed || (t_is_signed && t_size >= s_size));
       static const bool omit_chk_max = 
         (t_size > s_size || (t_size == s_size 
          && (! t_is_signed || s_is_signed)));
       // If the check can be omitted, substitute constant false relation.
       typedef octave_int_cmp_op::cf cf;
       typedef octave_int_cmp_op::lt lt;
       typedef octave_int_cmp_op::gt gt;
-      typedef typename if_else_type<omit_chk_min, cf, lt>::type chk_min;
-      typedef typename if_else_type<omit_chk_max, cf, gt>::type chk_max;
+      typedef typename if_then_else<omit_chk_min, cf, lt>::result chk_min;
+      typedef typename if_then_else<omit_chk_max, cf, gt>::result chk_max;
 
       // Efficiency of the following depends on inlining and dead code
       // elimination, but that should be a piece of cake for most compilers.
       if (chk_min::op (value, static_cast<S> (min_val ())))
         {
           ftrunc = true;
           return min_val ();
         }
