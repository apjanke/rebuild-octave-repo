# HG changeset patch
# User jwe
# Date 997723602 0
#      Mon Aug 13 17:26:42 2001 +0000
# Node ID 562c1b1fa5f42ee8b7dd0d9562d9d17221e97e24
# Parent  92fb162eba24201c9ad374258b198b0cfe693e19
[project @ 2001-08-13 17:26:42 by jwe]

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,13 @@
+2001-08-13  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* lapack/dlasq3.f: Update from netlib.
+	* lapack/dlasq5.f: Ditto.
+
 2001-05-02  Mumit Khan  <khan@nanotech.wisc.edu>
 
 	* Makefile.in (CRUFT_DIRS): Substitute @FFT_DIR@. 
 
 2001-04-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (install): Don't use mk-libdir-link.
 
diff --git a/libcruft/lapack/dlasq3.f b/libcruft/lapack/dlasq3.f
--- a/libcruft/lapack/dlasq3.f
+++ b/libcruft/lapack/dlasq3.f
@@ -1,15 +1,15 @@
       SUBROUTINE DLASQ3( I0, N0, Z, PP, DMIN, SIGMA, DESIG, QMAX, NFAIL,
      $                   ITER, NDIV, IEEE )
 *
 *  -- LAPACK auxiliary routine (version 3.0) --
 *     Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd.,
 *     Courant Institute, Argonne National Lab, and Rice University
-*     October 31, 1999
+*     May 17, 2000
 *
 *     .. Scalar Arguments ..
       LOGICAL            IEEE
       INTEGER            I0, ITER, N0, NDIV, NFAIL, PP
       DOUBLE PRECISION   DESIG, DMIN, QMAX, SIGMA
 *     ..
 *     .. Array Arguments ..
       DOUBLE PRECISION   Z( * )
@@ -27,32 +27,32 @@
 *
 *  I0     (input) INTEGER
 *         First index.
 *
 *  N0     (input) INTEGER
 *         Last index.
 *
 *  Z      (input) DOUBLE PRECISION array, dimension ( 4*N )
-*         Z holds the qd array. 
+*         Z holds the qd array.
 *
 *  PP     (input) INTEGER
 *         PP=0 for ping, PP=1 for pong.
 *
 *  DMIN   (output) DOUBLE PRECISION
 *         Minimum value of d.
 *
 *  SIGMA  (output) DOUBLE PRECISION
 *         Sum of shifts used in current segment.
 *
 *  DESIG  (input/output) DOUBLE PRECISION
 *         Lower order part of SIGMA
 *
 *  QMAX   (input) DOUBLE PRECISION
-*         Maximum value of q.        
+*         Maximum value of q.
 *
 *  NFAIL  (output) INTEGER
 *         Number of times shift was too big.
 *
 *  ITER   (output) INTEGER
 *         Number of iterations.
 *
 *  NDIV   (output) INTEGER
@@ -70,17 +70,17 @@
       DOUBLE PRECISION   CBIAS
       PARAMETER          ( CBIAS = 1.50D0 )
       DOUBLE PRECISION   ZERO, QURTR, HALF, ONE, TWO, HUNDRD
       PARAMETER          ( ZERO = 0.0D0, QURTR = 0.250D0, HALF = 0.5D0,
      $                     ONE = 1.0D0, TWO = 2.0D0, HUNDRD = 100.0D0 )
 *     ..
 *     .. Local Scalars ..
       INTEGER            IPN4, J4, N0IN, NN, TTYPE
-      DOUBLE PRECISION   DMIN1, DMIN2, DN, DN1, DN2, EPS, S, SAFMIN, T, 
+      DOUBLE PRECISION   DMIN1, DMIN2, DN, DN1, DN2, EPS, S, SAFMIN, T,
      $                   TAU, TEMP, TOL, TOL2
 *     ..
 *     .. External Subroutines ..
       EXTERNAL           DLASQ4, DLASQ5, DLASQ6
 *     ..
 *     .. External Function ..
       DOUBLE PRECISION   DLAMCH
       EXTERNAL           DLAMCH
@@ -100,26 +100,26 @@
 *     .. Executable Statements ..
 *
       N0IN = N0
       EPS = DLAMCH( 'Precision' )
       SAFMIN = DLAMCH( 'Safe minimum' )
       TOL = EPS*HUNDRD
       TOL2 = TOL**2
 *
-*     Check for deflation. 
+*     Check for deflation.
 *
    10 CONTINUE
 *
       IF( N0.LT.I0 )
      $   RETURN
-      IF( N0.EQ.I0 ) 
+      IF( N0.EQ.I0 )
      $   GO TO 20
       NN = 4*N0 + PP
-      IF( N0.EQ.( I0+1 ) ) 
+      IF( N0.EQ.( I0+1 ) )
      $   GO TO 40
 *
 *     Check whether E(N0-1) is negligible, 1 eigenvalue.
 *
       IF( Z( NN-5 ).GT.TOL2*( SIGMA+Z( NN-3 ) ) .AND.
      $    Z( NN-2*PP-4 ).GT.TOL2*Z( NN-7 ) )
      $   GO TO 30
 *
@@ -212,86 +212,83 @@
    80    CONTINUE
 *
          CALL DLASQ5( I0, N0, Z, PP, TAU, DMIN, DMIN1, DMIN2, DN,
      $                DN1, DN2, IEEE )
 *
          NDIV = NDIV + ( N0-I0+2 )
          ITER = ITER + 1
 *
-         IF( DMIN.NE.DMIN ) THEN
-*
-*           Check for NaN: "DMIN.NE.DMIN" 
+*        Check status.
 *
-            Z( 4*N0+PP-1 ) = ZERO
-            GO TO 70
-         ELSE IF( Z( 4*N0+PP ).LE.ZERO ) THEN
+         IF( DMIN.GE.ZERO .AND. DMIN1.GT.ZERO ) THEN
 *
-*           Possible unnecessary underflow in the e's.
-*           Call safe dqd.
+*           Success.
 *
-            Z( 4*N0+PP-1 ) = ZERO
-            DMIN = ZERO
-            GO TO 70
-         ELSE IF( DMIN.EQ.ZERO .AND. DMIN1.LE.ZERO ) THEN
+            GO TO 100
 *
-*           Possible unnecessary underflow in the d's.
-*           Call safe dqd.
+         ELSE IF( DMIN.LT.ZERO .AND. DMIN1.GT.ZERO .AND.
+     $            Z( 4*( N0-1 )-PP ).LT.TOL*( SIGMA+DN1 ) .AND.
+     $            ABS( DN ).LT.TOL*SIGMA ) THEN
 *
-            Z( 4*N0+PP-1 ) = ZERO
-            GO TO 70
-         END IF
-*
-*        Check for convergence hidden by negative DN.
+*           Convergence hidden by negative DN.
 *
-         IF( DMIN.LT.ZERO .AND. DMIN1.GT.ZERO .AND. Z( 4*( N0-1 )-PP ) 
-     $       .LT.TOL*( SIGMA+DN1 ) .AND. ABS( DN ).LT.TOL*SIGMA ) THEN
             Z( 4*( N0-1 )-PP+2 ) = ZERO
-            DMIN = ABS( DMIN )
-         END IF
+            DMIN = ZERO
+            GO TO 100
+         ELSE IF( DMIN.LT.ZERO ) THEN
 *
-         IF( DMIN.LT.ZERO ) THEN
-*
-*           Failure. Select new TAU and try again.
+*           TAU too big. Select new TAU and try again.
 *
             NFAIL = NFAIL + 1
-*
-*           Failed twice. Play it safe.
+            IF( TTYPE.LT.-22 ) THEN
 *
-            IF( TTYPE.LT.-22 ) THEN
-               Z( 4*N0+PP-1 ) = ZERO
-               DMIN = ZERO
-               GO TO 70
-            END IF
+*              Failed twice. Play it safe.
 *
-            IF( DMIN1.GT.ZERO ) THEN
+               TAU = ZERO
+            ELSE IF( DMIN1.GT.ZERO ) THEN
 *
 *              Late failure. Gives excellent shift.
 *
-               TAU = ( TAU+DMIN )*( ONE-TWO*EPS ) 
-               TTYPE = TTYPE - 11 
+               TAU = ( TAU+DMIN )*( ONE-TWO*EPS )
+               TTYPE = TTYPE - 11
             ELSE
 *
 *              Early failure. Divide by 4.
 *
                TAU = QURTR*TAU
                TTYPE = TTYPE - 12
             END IF
             GO TO 80
+         ELSE IF( DMIN.NE.DMIN ) THEN
+*
+*           NaN.
+*
+            TAU = ZERO
+            GO TO 80
+         ELSE
+*
+*           Possible underflow. Play it safe.
+*
+            GO TO 90
          END IF
-      ELSE
-         CALL DLASQ6( I0, N0, Z, PP, DMIN, DMIN1, DMIN2, DN, DN1, DN2 )
-         NDIV = NDIV + ( N0-I0 )
-         ITER = ITER + 1
-         TAU = ZERO
       END IF
 *
+*     Risk of underflow.
+*
+   90 CONTINUE
+      CALL DLASQ6( I0, N0, Z, PP, DMIN, DMIN1, DMIN2, DN, DN1, DN2 )
+      NDIV = NDIV + ( N0-I0+2 )
+      ITER = ITER + 1
+      TAU = ZERO
+*
+  100 CONTINUE
       IF( TAU.LT.SIGMA ) THEN
          DESIG = DESIG + TAU
-         T = SIGMA + DESIG 
+         T = SIGMA + DESIG
          DESIG = DESIG - ( T-SIGMA )
       ELSE
          T = SIGMA + TAU
          DESIG = SIGMA - ( T-TAU ) + DESIG
       END IF
       SIGMA = T
 *
       RETURN
diff --git a/libcruft/lapack/dlasq5.f b/libcruft/lapack/dlasq5.f
--- a/libcruft/lapack/dlasq5.f
+++ b/libcruft/lapack/dlasq5.f
@@ -1,15 +1,15 @@
       SUBROUTINE DLASQ5( I0, N0, Z, PP, TAU, DMIN, DMIN1, DMIN2, DN,
      $                   DNM1, DNM2, IEEE )
 *
 *  -- LAPACK auxiliary routine (version 3.0) --
 *     Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd.,
 *     Courant Institute, Argonne National Lab, and Rice University
-*     October 31, 1999
+*     May 17, 2000
 *
 *     .. Scalar Arguments ..
       LOGICAL            IEEE
       INTEGER            I0, N0, PP
       DOUBLE PRECISION   DMIN, DMIN1, DMIN2, DN, DNM1, DNM2, TAU
 *     ..
 *     .. Array Arguments ..
       DOUBLE PRECISION   Z( * )
@@ -75,46 +75,46 @@
       INTRINSIC          MIN
 *     ..
 *     .. Executable Statements ..
 *
       IF( ( N0-I0-1 ).LE.0 )
      $   RETURN
 *
       J4 = 4*I0 + PP - 3
-      EMIN = Z( J4+4 ) 
+      EMIN = Z( J4+4 )
       D = Z( J4 ) - TAU
       DMIN = D
       DMIN1 = -Z( J4 )
 *
       IF( IEEE ) THEN
 *
 *        Code for IEEE arithmetic.
 *
          IF( PP.EQ.0 ) THEN
             DO 10 J4 = 4*I0, 4*( N0-3 ), 4
-               Z( J4-2 ) = D + Z( J4-1 ) 
+               Z( J4-2 ) = D + Z( J4-1 )
                TEMP = Z( J4+1 ) / Z( J4-2 )
                D = D*TEMP - TAU
                DMIN = MIN( DMIN, D )
                Z( J4 ) = Z( J4-1 )*TEMP
                EMIN = MIN( Z( J4 ), EMIN )
    10       CONTINUE
          ELSE
             DO 20 J4 = 4*I0, 4*( N0-3 ), 4
-               Z( J4-3 ) = D + Z( J4 ) 
+               Z( J4-3 ) = D + Z( J4 )
                TEMP = Z( J4+2 ) / Z( J4-3 )
                D = D*TEMP - TAU
                DMIN = MIN( DMIN, D )
                Z( J4-1 ) = Z( J4 )*TEMP
                EMIN = MIN( Z( J4-1 ), EMIN )
    20       CONTINUE
          END IF
 *
-*        Unroll last two steps. 
+*        Unroll last two steps.
 *
          DNM2 = D
          DMIN2 = DMIN
          J4 = 4*( N0-2 ) - PP
          J4P2 = J4 + 2*PP - 1
          Z( J4-2 ) = DNM2 + Z( J4P2 )
          Z( J4 ) = Z( J4P2+2 )*( Z( J4P2 ) / Z( J4-2 ) )
          DNM1 = Z( J4P2+2 )*( DNM2 / Z( J4-2 ) ) - TAU
@@ -129,60 +129,60 @@
          DMIN = MIN( DMIN, DN )
 *
       ELSE
 *
 *        Code for non IEEE arithmetic.
 *
          IF( PP.EQ.0 ) THEN
             DO 30 J4 = 4*I0, 4*( N0-3 ), 4
-               Z( J4-2 ) = D + Z( J4-1 ) 
-               IF( D.LE.ZERO ) THEN
+               Z( J4-2 ) = D + Z( J4-1 )
+               IF( D.LT.ZERO ) THEN
                   RETURN
-               ELSE 
+               ELSE
                   Z( J4 ) = Z( J4+1 )*( Z( J4-1 ) / Z( J4-2 ) )
                   D = Z( J4+1 )*( D / Z( J4-2 ) ) - TAU
                END IF
                DMIN = MIN( DMIN, D )
                EMIN = MIN( EMIN, Z( J4 ) )
    30       CONTINUE
          ELSE
             DO 40 J4 = 4*I0, 4*( N0-3 ), 4
-               Z( J4-3 ) = D + Z( J4 ) 
-               IF( D.LE.ZERO ) THEN
+               Z( J4-3 ) = D + Z( J4 )
+               IF( D.LT.ZERO ) THEN
                   RETURN
-               ELSE 
+               ELSE
                   Z( J4-1 ) = Z( J4+2 )*( Z( J4 ) / Z( J4-3 ) )
                   D = Z( J4+2 )*( D / Z( J4-3 ) ) - TAU
                END IF
                DMIN = MIN( DMIN, D )
                EMIN = MIN( EMIN, Z( J4-1 ) )
    40       CONTINUE
          END IF
 *
-*        Unroll last two steps. 
+*        Unroll last two steps.
 *
          DNM2 = D
          DMIN2 = DMIN
          J4 = 4*( N0-2 ) - PP
          J4P2 = J4 + 2*PP - 1
          Z( J4-2 ) = DNM2 + Z( J4P2 )
-         IF( DNM2.LE.ZERO ) THEN
+         IF( DNM2.LT.ZERO ) THEN
             RETURN
          ELSE
             Z( J4 ) = Z( J4P2+2 )*( Z( J4P2 ) / Z( J4-2 ) )
             DNM1 = Z( J4P2+2 )*( DNM2 / Z( J4-2 ) ) - TAU
          END IF
          DMIN = MIN( DMIN, DNM1 )
 *
          DMIN1 = DMIN
          J4 = J4 + 4
          J4P2 = J4 + 2*PP - 1
          Z( J4-2 ) = DNM1 + Z( J4P2 )
-         IF( DNM1.LE.ZERO ) THEN
+         IF( DNM1.LT.ZERO ) THEN
             RETURN
          ELSE
             Z( J4 ) = Z( J4P2+2 )*( Z( J4P2 ) / Z( J4-2 ) )
             DN = Z( J4P2+2 )*( DNM1 / Z( J4-2 ) ) - TAU
          END IF
          DMIN = MIN( DMIN, DN )
 *
       END IF
