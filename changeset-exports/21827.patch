# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1465224175 25200
#      Mon Jun 06 07:42:55 2016 -0700
# Node ID 2781d6efa88f381e5d3d1dffef0390345eacf638
# Parent  f3455f8ff86d14b6cb0bbf07b3eaf6348230bc23
Fix build error with --enable-64

* Array.cc (Array<T>::nth_element): Ensure arguments to std::min have
the same type.  (Array<T>::cat): Ensure arguments to std::max have the
same type.

diff --git a/liboctave/array/Array.cc b/liboctave/array/Array.cc
--- a/liboctave/array/Array.cc
+++ b/liboctave/array/Array.cc
@@ -2336,17 +2336,17 @@ Array<T>::nth_element (const idx_vector&
     dv.resize (dim+1, 1);
 
   octave_idx_type ns = dv(dim);
 
   octave_idx_type nn = n.length (ns);
 
   dv(dim) = std::min (nn, ns);
   dv.chop_trailing_singletons ();
-  dim = std::min (dv.ndims (), dim);
+  dim = std::min (dv.ndims (), static_cast<octave_idx_type> (dim));
 
   Array<T> m (dv);
 
   if (m.is_empty ())
     return m;
 
   sortmode mode = UNSORTED;
   octave_idx_type lo = 0;
@@ -2679,17 +2679,17 @@ Array<T>::cat (int dim, octave_idx_type 
     if (! (dv.*concat_rule) (array_list[i].dims (), dim))
       (*current_liboctave_error_handler) ("cat: dimension mismatch");
 
   Array<T> retval (dv);
 
   if (retval.is_empty ())
     return retval;
 
-  int nidx = std::max (dv.ndims (), dim + 1);
+  int nidx = std::max (dv.ndims (), static_cast<octave_idx_type> (dim + 1));
   Array<idx_vector> idxa (dim_vector (nidx, 1), idx_vector::colon);
   octave_idx_type l = 0;
 
   for (octave_idx_type i = 0; i < n; i++)
     {
       // NOTE: This takes some thinking, but no matter what the above rules
       // are, an empty array can always be skipped at this point, because
       // the result dimensions are already determined, and there is no way
