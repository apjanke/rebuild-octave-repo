# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1378329668 -3600
#      Wed Sep 04 22:21:08 2013 +0100
# Node ID 8508b8ae46a8aa450b129cdced79c116384031d4
# Parent  63b53ea33a8b7a3de4c087e766fc6db50644a8d8
imread: fix identification of PNG files as indexed.

* __magick_read__.cc (is_indexed): expand extra check for PNG files by
  confirming value in color_type_orig.
  (get_depth): only fix indentification as binary for depth of 8. When
  Magick reports different than 1 for binary images, seems to always
  change it for 8, not anything else different than 1.

diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -66,22 +66,27 @@ along with Octave; see the file COPYING.
 //
 //        We can't do better without having format specific code which is
 //        what we are trying to avoid by using a library such as GM. We at
 //        least create workarounds for the most common problems.
 //
 // 1) A grayscale jpeg image can report being indexed even though the
 //    JPEG format has no support for indexed images. We can at least
 //    fix this one.
+// 2) A PNG file is only an indexed image if color type orig is 3 (value comes
+//    from libpng)
 static bool
 is_indexed (const Magick::Image& img)
 {
   bool retval = false;
-
-  if (img.classType () == Magick::PseudoClass && img.magick () != "JPEG")
+  const std::string format = img.magick ();
+  if (img.classType () == Magick::PseudoClass
+      && format != "JPEG"
+      && (format != "PNG"
+          || const_cast<Magick::Image&> (img).attribute ("PNG:IHDR.color-type-orig") == "3"))
     retval = true;
 
   return retval;
 }
 
 //  The depth from depth() is not always correct for us but seems to be the
 //  best value we can get. For example, a grayscale png image with 1 bit
 //  per channel should return a depth of 1 but instead we get 8.
@@ -96,17 +101,17 @@ is_indexed (const Magick::Image& img)
 //  then we must have a binary image.
 //  Note that we can't use AllChannels it doesn't work for this.
 //  Instead of checking all of the individual channels, we check one
 //  from RGB, CMYK, grayscale, and transparency.
 static octave_idx_type
 get_depth (Magick::Image& img)
 {
   octave_idx_type depth = img.depth ();
-  if (depth != 1
+  if (depth == 8
       && img.channelDepth (Magick::RedChannel)     == 1
       && img.channelDepth (Magick::CyanChannel)    == 1
       && img.channelDepth (Magick::OpacityChannel) == 1
       && img.channelDepth (Magick::GrayChannel)    == 1)
     depth = 1;
 
   return depth;
 }
