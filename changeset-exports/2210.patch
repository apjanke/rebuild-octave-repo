# HG changeset patch
# User jwe
# Date 832164975 0
#      Wed May 15 12:56:15 1996 +0000
# Node ID a3e39f8efed2c36df1a29b65b3cc3e1d6a932d68
# Parent  859030f15706c4bbe3b00e0fe513d0b7d454cda7
[project @ 1996-05-15 12:55:55 by jwe]

diff --git a/src/pager.cc b/src/pager.cc
--- a/src/pager.cc
+++ b/src/pager.cc
@@ -75,16 +75,18 @@ static sig_handler *saved_sigint_handler
 
 static int really_flush_to_pager = 0;
 
 static int flushing_output_to_pager = 0;
 
 static void
 clear_external_pager (void)
 {
+  octave_child_list::remove (octave_pager_pid);
+
   octave_pager_pid = -1;
 
   delete external_pager;
   external_pager = 0;
 
   if (saved_sigint_handler)
     {
       octave_set_signal_handler (SIGINT, saved_sigint_handler);
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -72,16 +72,26 @@ octave_save_signal_mask (void)
 void
 octave_restore_signal_mask (void)
 {
 #if defined (HAVE_POSIX_SIGNALS)
   sigprocmask (SIG_SETMASK, &octave_signal_mask, 0);
 #endif
 }
 
+#if 0
+void
+ignore_sigchld (void)
+{
+#if defined (SIGCHLD)
+  octave_set_signal_handler (SIGCHLD, SIG_IGN);
+#endif
+}
+#endif
+
 static void
 my_friendly_exit (const char *sig_name, int sig_number)
 {
   error ("%s -- stopping myself...", sig_name);
 
   save_user_variables ();
 
   clean_up_and_exit (sig_number);
@@ -148,17 +158,17 @@ sigchld_handler (int /* sig */)
       octave_child& elt = octave_child_list::elem (i);
 
       pid_t pid = elt.pid;
 
       if (pid > 0)
 	{
 	  int status;
 
-	  if (waitpid (pid, &status, 0) > 0)
+	  if (waitpid (pid, &status, WNOHANG) > 0)
 	    {
 	      elt.pid = -1;
 
 	      octave_child::dead_child_handler f = elt.handler;
 
 	      if (f)
 		(*f) (pid, status);
 
@@ -449,17 +459,17 @@ octave_child_list::do_insert (pid_t pid,
 {
   // Insert item in first open slot, increasing size of list if
   // necessary.
 
   bool enlarge = true;
 
   for (int i = 0; i < curr_len; i++)
     {
-      octave_child tmp = list.elem (i);
+      octave_child& tmp = list.elem (i);
 
       if (tmp.pid < 0)
 	{
 	  list.elem (i) = octave_child (pid, f);
 	  enlarge = false;
 	  break;
 	}
     }
@@ -488,13 +498,44 @@ octave_child_list::insert (pid_t pid, oc
     instance = new octave_child_list ();
 
   if (instance)
     instance->do_insert (pid, f);
   else
     panic_impossible ();
 }
 
+void
+octave_child_list::do_remove (pid_t pid)
+{
+  // Mark the record for PID invalid.
+
+  bool enlarge = true;
+
+  for (int i = 0; i < curr_len; i++)
+    {
+      octave_child& tmp = list.elem (i);
+
+      if (tmp.pid == pid)
+	{
+	  tmp.pid = -1;
+	  break;
+	}
+    }
+}
+
+void
+octave_child_list::remove (pid_t pid)
+{
+  if (! instance)
+    instance = new octave_child_list ();
+
+  if (instance)
+    instance->do_remove (pid);
+  else
+    panic_impossible ();
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
