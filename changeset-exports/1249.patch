# HG changeset patch
# User jwe
# Date 797562237 0
#      Tue Apr 11 01:03:57 1995 +0000
# Node ID 86fc40576f22ef037407b13d8305de46dbbc5d82
# Parent  961d2acf5e860dbf82a445f840d9a4ef3a32d6ce
[project @ 1995-04-11 01:03:08 by jwe]

diff --git a/liboctave/acosh.c b/liboctave/acosh.c
--- a/liboctave/acosh.c
+++ b/liboctave/acosh.c
@@ -16,29 +16,29 @@ for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
-#include "config.h"
+#include <config.h>
 #endif
 
 #ifndef HAVE_ACOSH
 
 #include "f77-uscore.h"
 
-extern double F77_FCN (dacosh) (double*);
+extern double F77_FCN (dacosh) (const double&);
 
 double
 acosh (double x)
 {
-  return F77_FCN (dacosh) (&x);
+  return F77_FCN (dacosh) (x);
 }
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/src/rand.cc b/src/rand.cc
--- a/src/rand.cc
+++ b/src/rand.cc
@@ -38,28 +38,28 @@ Software Foundation, 675 Mass Ave, Cambr
 // Possible distributions of random numbers.
 enum rand_dist { uniform, normal };
 
 // Current distribution of random numbers.
 static rand_dist current_distribution = uniform;
 
 extern "C"
 {
-  int *F77_FCN (dgennor) (double*, double*, double*);
-  int *F77_FCN (dgenunf) (double*, double*, double*);
-  int *F77_FCN (setall) (int*, int*);
-  int *F77_FCN (getsd) (int*, int*);
+  int *F77_FCN (dgennor) (const double&, const double&, double&);
+  int *F77_FCN (dgenunf) (const double&, const double&, double&);
+  int *F77_FCN (setall) (const int&, const int&);
+  int *F77_FCN (getsd) (int&, int&);
 }
 
 static double
 curr_rand_seed (void)
 {
   union d2i { double d; int i[2]; };
   union d2i u;
-  F77_FCN (getsd) (&(u.i[0]), &(u.i[1]));
+  F77_FCN (getsd) (u.i[0]), u.i[1]);
   return u.d;
 }
 
 static int
 force_to_fit_range (int i, int lo, int hi)
 {
   assert (hi > lo && lo >= 0 && hi > lo);
 
@@ -76,17 +76,17 @@ force_to_fit_range (int i, int lo, int h
 static void
 set_rand_seed (double val)
 {
   union d2i { double d; int i[2]; };
   union d2i u;
   u.d = val;
   int i0 = force_to_fit_range (u.i[0], 1, 2147483563);
   int i1 = force_to_fit_range (u.i[1], 1, 2147483399);
-  F77_FCN (setall) (&i0, &i1);
+  F77_FCN (setall) (i0, i1);
 }
 
 static char *
 curr_rand_dist (void)
 {
   if (current_distribution == uniform)
     return "uniform";
   else if (current_distribution == normal)
@@ -142,17 +142,17 @@ rand (SEED, N)        -- set seed")
       int second = tm->tm_sec + 1;
 
       int s0 = tm->tm_mday * hour * minute * second;
       int s1 = hour * minute * second;
 #endif
       s0 = force_to_fit_range (s0, 1, 2147483563);
       s1 = force_to_fit_range (s1, 1, 2147483399);
 
-      F77_FCN (setall) (&s0, &s1);
+      F77_FCN (setall) (s0, s1);
       initialized = 1;
     }
 
   int n = 0;
   int m = 0;
   if (nargin == 0)
     {
       n = 1;
@@ -261,28 +261,26 @@ rand (SEED, N)        -- set seed")
       retval.resize (1, m);
     }
   else if (n > 0 && m > 0)
     {
       Matrix rand_mat (n, m);
       for (int j = 0; j < m; j++)
 	for (int i = 0; i < n; i++)
 	  {
-	    double d_zero = 0.0;
-	    double d_one = 1.0;
 	    double val;
 	    switch (current_distribution)
 	      {
 	      case uniform:
-		F77_FCN (dgenunf) (&d_zero, &d_one, &val);
+		F77_FCN (dgenunf) (0.0, 1.0, val);
 		rand_mat.elem (i, j) = val;
 		break;
 
 	      case normal:
-		F77_FCN (dgennor) (&d_zero, &d_one, &val);
+		F77_FCN (dgennor) (0.0, 1.0, val);
 		rand_mat.elem (i, j) = val;
 		break;
 
 	      default:
 		panic_impossible ();
 		break;
 	      }
 	  }
