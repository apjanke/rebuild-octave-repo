# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1535637789 14400
#      Thu Aug 30 10:03:09 2018 -0400
# Branch stable
# Node ID 1448204783788c16cd55d7b9a39b9a292d144b3f
# Parent  0d4b88086f36b64a6bc9039d5b24017f509b9974
eliminate OCTAVE_HAVE_FAST_INT_OPS macro and associated code (bug #54572)

With current compilers, there no longer seems to be a performance
advantage significant enough to justify the the trickery used in the
special case code that was used when OCTAVE_HAVE_FAST_INT_OPS was
defined.

* acinclude.m4 (OCTAVE_FAST_INT_OPS): Delete macro.
* configure.ac: Delete use.
* mk-octave-config-h.sh: Don't recognize OCTAVE_HAVE_FAST_INT_OPS.

* oct-inttypes.h, oct-inttypes.cc:
(octave_int_arith_base<T,true>::abs,
octave_int_arith_base<T,true>::minus,
octave_int_arith_base<T,true>::add,
octave_int_arith_base<T,true>::sub):
Eliminate code blocks used if OCTAVE_HAVE_FAST_INT_OPS is defined.

diff --git a/build-aux/mk-octave-config-h.sh b/build-aux/mk-octave-config-h.sh
--- a/build-aux/mk-octave-config-h.sh
+++ b/build-aux/mk-octave-config-h.sh
@@ -191,17 +191,16 @@ else
 fi
 
 echo ""
 
 $SED -n 's/#\(\(undef\|define\) OCTAVE_ENABLE_64.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) OCTAVE_ENABLE_ATOMIC_REFCOUNT.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) OCTAVE_ENABLE_BOUNDS_CHECK.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) OCTAVE_ENABLE_OPENMP.*$\)/#  \1/p' $config_h_file
-$SED -n 's/#\(\(undef\|define\) OCTAVE_HAVE_FAST_INT_OPS.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) OCTAVE_HAVE_LONG_LONG_INT.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) OCTAVE_HAVE_UNSIGNED_LONG_LONG_INT.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) OCTAVE_HAVE_OVERLOAD_CHAR_INT8_TYPES.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) OCTAVE_SIZEOF_F77_INT_TYPE.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) OCTAVE_SIZEOF_IDX_TYPE.*$\)/#  \1/p' $config_h_file
 
 echo ""
 
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1103,19 +1103,16 @@ OCTAVE_IEEE754_DATA_FORMAT
 OCTAVE_CXX_BITWISE_OP_TEMPLATES
 
 ## Can complex class set components independently?
 OCTAVE_CXX_COMPLEX_SETTERS
 
 ## Are there functions to access real/imag parts of numbers via references?
 OCTAVE_CXX_COMPLEX_REFERENCE_ACCESSORS
 
-## Check if fast integer arithmetics based on bit tricks is available.
-OCTAVE_FAST_INT_OPS
-
 ## Does the C compiler handle alloca and const correctly?
 AC_FUNC_ALLOCA
 
 ## Does the C compiler support Automake subdir-objects option?
 AM_PROG_CC_C_O
 
 ### gnulib initialization: part 2
 dnl Must take place after part 1, and after standard compiler options and
diff --git a/liboctave/util/oct-inttypes.cc b/liboctave/util/oct-inttypes.cc
--- a/liboctave/util/oct-inttypes.cc
+++ b/liboctave/util/oct-inttypes.cc
@@ -358,22 +358,22 @@ octave_int_arith_base<uint64_t, false>::
 overflow:
   return max_val ();
 }
 
 template <>
 int64_t
 octave_int_arith_base<int64_t, true>::mul_internal (int64_t x, int64_t y)
 {
-  // The signed case is far worse.  The problem is that even if neither integer
-  // fits into signed 32-bit range, the result may still be OK.  Uh oh.
+  // The signed case is far worse.  The problem is that even if neither
+  // integer fits into signed 32-bit range, the result may still be OK.
+  // Uh oh.
 
   // Essentially, what we do is compute sign, multiply absolute values
   // (as above) and impose the sign.
-  // FIXME: can we do something faster if we OCTAVE_HAVE_FAST_INT_OPS?
 
   uint64_t usx = octave_int_abs (x);
   uint64_t usy = octave_int_abs (y);
   bool positive = (x < 0) == (y < 0);
 
   // Get upper words
   uint64_t ux = usx >> 32;
   uint64_t uy = usy >> 32;
diff --git a/liboctave/util/oct-inttypes.h b/liboctave/util/oct-inttypes.h
--- a/liboctave/util/oct-inttypes.h
+++ b/liboctave/util/oct-inttypes.h
@@ -502,42 +502,16 @@ octave_int_arith_base<uint64_t, false>::
 
 // Special handler for 64-bit integer multiply.
 template <>
 OCTAVE_API uint64_t
 octave_int_arith_base<uint64_t, false>::mul_internal (uint64_t, uint64_t);
 
 #endif
 
-// Signed integer arithmetic.
-//
-// Rationale: If OCTAVE_HAVE_FAST_INT_OPS is defined, the following
-// conditions should hold:
-//
-//   1. Signed numbers are represented by twos complement (see
-//      <http://en.wikipedia.org/wiki/Two%27s_complement>)
-//
-//   2. static_cast to unsigned int counterpart works like
-//      interpreting the signed bit pattern as unsigned (and is thus
-//      zero-cost).
-//
-//   3. Signed addition and subtraction yield the same bit results as
-//      unsigned.  (We use casts to prevent optimization interference,
-//      so there is no need for things like -ftrapv).
-//
-//   4. Bit operations on signed integers work like on unsigned
-//      integers, except for the shifts.  Shifts are arithmetic.
-//
-// The above conditions are satisfied by most modern platforms.  If
-// OCTAVE_HAVE_FAST_INT_OPS is defined, bit tricks and wraparound
-// arithmetics are used to avoid conditional jumps as much as
-// possible, thus being friendly to modern pipeline processor
-// architectures.  Otherwise, we fall back to a bullet-proof code that
-// only uses assumptions guaranteed by the standard.
-
 template <typename T>
 class octave_int_arith_base<T, true> : octave_int_base<T>
 {
   // The corresponding unsigned type.
   typedef typename query_integer_type<sizeof (T), false>::type UT;
 public:
 
   // Returns 1 for negative number, 0 otherwise.
@@ -545,42 +519,26 @@ public:
   __signbit (T x)
   {
     return (x < 0) ? 1 : 0;
   }
 
   static T
   abs (T x)
   {
-#if defined (OCTAVE_HAVE_FAST_INT_OPS)
-    // This is close to how GCC does std::abs, but we can't just use std::abs,
-    // because its behavior for INT_MIN is undefined and the compiler could
-    // discard the following test.
-    T m = x >> std::numeric_limits<T>::digits;
-    T y = (x ^ m) - m;
-    if (y < 0)
-      {
-        y = octave_int_base<T>::max_val ();
-      }
-    return y;
-#else
-    // -INT_MAX is safe because C++ actually allows only three implementations
-    // of integers: sign & magnitude, ones complement and twos complement.
-    // The first test will, with modest optimizations, evaluate at compile
-    // time, and maybe eliminate the branch completely.
-    T y;
-    if (octave_int_base<T>::min_val () < -octave_int_base<T>::max_val ()
-        && x == octave_int_base<T>::min_val ())
-      {
-        y = octave_int_base<T>::max_val ();
-      }
-    else
-      y = (x < 0) ? -x : x;
-    return y;
-#endif
+    // -INT_MAX is safe because C++ actually allows only three
+    // implementations of integers: sign & magnitude, ones complement
+    // and twos complement.  The first test will, with modest
+    // optimizations, evaluate at compile time, and maybe eliminate
+    // the branch completely.
+
+    return ((octave_int_base<T>::min_val () < -octave_int_base<T>::max_val ()
+             && x == octave_int_base<T>::min_val ())
+            ? octave_int_base<T>::max_val ()
+            : ((x < 0) ? -x : x));
   }
 
   static T
   signum (T x)
   {
     // With modest optimizations, this will compile without a jump.
     return ((x > 0) ? 1 : 0) - __signbit (x);
   }
@@ -591,124 +549,52 @@ public:
 
   static T
   rshift (T x, int n) { return x >> n; }
 
   static T
   lshift (T x, int n) { return x << n; }
 
   // Minus has problems similar to abs.
+
   static T
   minus (T x)
   {
-#if defined (OCTAVE_HAVE_FAST_INT_OPS)
-    T y = -x;
-    if (y == octave_int_base<T>::min_val ())
-      {
-        --y;
-      }
-    return y;
-#else
-    T y;
-    if (octave_int_base<T>::min_val () < -octave_int_base<T>::max_val ()
-        && x == octave_int_base<T>::min_val ())
-      {
-        y = octave_int_base<T>::max_val ();
-      }
-    else
-      y = -x;
-    return y;
-#endif
+    return ((octave_int_base<T>::min_val () < -octave_int_base<T>::max_val ()
+             && x == octave_int_base<T>::min_val ())
+            ? octave_int_base<T>::max_val ()
+            : -x);
   }
 
   static T
   add (T x, T y)
   {
-#if defined (OCTAVE_HAVE_FAST_INT_OPS)
-
-    // The typecasts do nothing, but they are here to prevent an optimizing
-    // compiler from interfering.  Also, the signed operations on small types
-    // actually return int.
-    T u = static_cast<UT> (x) + static_cast<UT> (y);
-    T ux = u ^ x;
-    T uy = u ^ y;
-
-    return ((ux & uy) < 0
-            ? (u < 0
-               ? octave_int_base<T>::max_val ()
-               : octave_int_base<T>::min_val ())
-            : u);
-
-#else
+    // Avoid anything that may overflow.
 
-    // We shall carefully avoid anything that may overflow.
-    T u;
-
-    if (y < 0)
-      {
-        if (x < octave_int_base<T>::min_val () - y)
-          u = octave_int_base<T>::min_val ();
-        else
-          u = x + y;
-      }
-    else
-      {
-        if (x > octave_int_base<T>::max_val () - y)
-          u = octave_int_base<T>::max_val ();
-        else
-          u = x + y;
-      }
-
-    return u;
-
-#endif
+    return (y < 0
+            ? (x < octave_int_base<T>::min_val () - y
+               ? octave_int_base<T>::min_val ()
+               : x + y)
+            : (x > octave_int_base<T>::max_val () - y
+               ? octave_int_base<T>::max_val ()
+               : x + y));
   }
 
-  // This is very similar to addition.
   static T
   sub (T x, T y)
   {
-#if defined (OCTAVE_HAVE_FAST_INT_OPS)
-    // The typecasts do nothing, but they are here to prevent an optimizing
-    // compiler from interfering.  Also, the signed operations on small types
-    // actually return int.
-    T u = static_cast<UT> (x) - static_cast<UT> (y);
-    T ux = u ^ x;
-    T uy = u ^ ~y;
-    if ((ux & uy) < 0)
-      {
-        u = (__signbit (~u)
-             ? octave_int_base<T>::min_val ()
-             : octave_int_base<T>::max_val ());
-      }
-    return u;
-#else
-    // We shall carefully avoid anything that may overflow.
-    T u;
-    if (y < 0)
-      {
-        if (x > octave_int_base<T>::max_val () + y)
-          {
-            u = octave_int_base<T>::max_val ();
-          }
-        else
-          u = x - y;
-      }
-    else
-      {
-        if (x < octave_int_base<T>::min_val () + y)
-          {
-            u = octave_int_base<T>::min_val ();
-          }
-        else
-          u = x - y;
-      }
+    // Avoid anything that may overflow.
 
-    return u;
-#endif
+    return (y < 0
+            ? (x > octave_int_base<T>::max_val () + y
+               ? octave_int_base<T>::max_val ()
+               : x - y)
+            : (x < octave_int_base<T>::min_val () + y
+                ? octave_int_base<T>::min_val ()
+               : x - y));
   }
 
   // Multiplication is done using promotion to wider integer type.  If there is
   // no suitable promotion type, this operation *MUST* be specialized.
   static T mul (T x, T y) { return mul_internal (x, y); }
 
   static T
   mul_internal (T x, T y)
@@ -798,19 +684,16 @@ octave_external_int64_int64_mul (int64_t
 template <>
 inline int64_t
 octave_int_arith_base<int64_t, true>::mul_internal (int64_t x, int64_t y)
 {
   int64_t retval;
 
   long double p = static_cast<long double> (x) * static_cast<long double> (y);
 
-  // NOTE: We could maybe do it with a single branch if
-  // OCTAVE_HAVE_FAST_INT_OPS, but it would require one more runtime
-  // conversion, so the question is whether it would really be faster.
   if (p > static_cast<long double> (octave_int_base<int64_t>::max_val ()))
     retval = octave_int_base<int64_t>::max_val ();
   else if (p < static_cast<long double> (octave_int_base<int64_t>::min_val ()))
     retval = octave_int_base<int64_t>::min_val ();
   else
     retval = static_cast<int64_t> (p);
 
   return retval;
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -2458,95 +2458,16 @@ AC_DEFUN([OCTAVE_F77_FLAG], [
       [FFLAGS="$FFLAGS $1"
       AC_MSG_RESULT([adding $1 to FFLAGS])], [$2])
   else
     AC_MSG_RESULT([no])
     ifelse([$3], , , [$3])
   fi
 ])
 dnl
-dnl Check whether fast signed integer arithmetic using bit tricks
-dnl can be used in oct-inttypes.h.
-dnl
-dnl Defines OCTAVE_HAVE_FAST_INT_OPS if the following conditions hold:
-dnl
-dnl   1. Signed numbers are represented by twos complement (see
-dnl      <http://en.wikipedia.org/wiki/Two%27s_complement>)
-dnl
-dnl   2. static_cast to unsigned int counterpart works like
-dnl      interpreting the signed bit pattern as unsigned (and is thus
-dnl      zero-cost).
-dnl
-dnl   3. Signed addition and subtraction yield the same bit results
-dnl      as unsigned.  (We use casts to prevent optimization
-dnl      interference, so there is no need for things like -ftrapv).
-dnl
-dnl   4. Bit operations on signed integers work like on unsigned
-dnl      integers, except for the shifts.  Shifts are arithmetic.
-dnl
-AC_DEFUN([OCTAVE_FAST_INT_OPS], [
-  AC_CACHE_CHECK([whether fast integer arithmetics is usable],
-    [octave_cv_fast_int_ops],
-    [AC_LANG_PUSH(C++)
-    AC_RUN_IFELSE([AC_LANG_PROGRAM([[
-        #include <limits>
-        template<class UT, class ST>
-        static bool
-        do_test (UT, ST)
-        {
-          volatile ST s = std::numeric_limits<ST>::min () / 3;
-          volatile UT u = static_cast<UT> (s);
-          if (*(reinterpret_cast<volatile ST *> (&u)) != s) return true;
-
-          u = 0; u = ~u;
-          if (*(reinterpret_cast<volatile ST *> (&u)) != -1) return true;
-
-          ST sx, sy;
-          sx = std::numeric_limits<ST>::max () / 2 + 1;
-          sy = std::numeric_limits<ST>::max () / 2 + 2;
-          if (static_cast<ST> (static_cast<UT> (sx) + static_cast<UT> (sy))
-              != std::numeric_limits<ST>::min () + 1) return true;
-          if (static_cast<ST> (static_cast<UT> (sx) - static_cast<UT> (sy))
-              != -1) return true;
-
-          if ((sx & sy) != (static_cast<UT> (sx) & static_cast<UT> (sy)))
-            return true;
-          if ((sx | sy) != (static_cast<UT> (sx) | static_cast<UT> (sy)))
-            return true;
-          if ((sx ^ sy) != (static_cast<UT> (sx) ^ static_cast<UT> (sy)))
-            return true;
-          if ((-1 >> 1) != -1) return true;
-          return false;
-        }
-
-        #define DO_TEST(T) \
-          if (do_test (static_cast<unsigned T> (0), static_cast<signed T> (0)))\
-            return sizeof (T);
-
-        ]],[[
-
-        DO_TEST(char)
-        DO_TEST(short)
-        DO_TEST(int)
-        DO_TEST(long)
-        #if (defined(OCTAVE_HAVE_LONG_LONG_INT) && defined(OCTAVE_HAVE_UNSIGNED_LONG_LONG_INT))
-          DO_TEST(long long)
-        #endif
-      ]])],
-      octave_cv_fast_int_ops=yes,
-      octave_cv_fast_int_ops=no,
-      octave_cv_fast_int_ops=yes)
-    AC_LANG_POP(C++)
-  ])
-  if test $octave_cv_fast_int_ops = yes; then
-    AC_DEFINE(OCTAVE_HAVE_FAST_INT_OPS, 1,
-      [Define to 1 if signed integers use two's complement.])
-  fi
-])
-dnl
 dnl Check to see if the compiler and the linker can handle the flags
 dnl "-framework $1" for the given prologue $2 and the given body $3 of
 dnl a source file.  Arguments 2 and 3 optionally can also be empty.
 dnl Add options (lower case letters $1) "--with-framework-$1" and
 dnl "--without-framework-$1".  If this test is successful then perform
 dnl $4, otherwise do $5.
 dnl
 AC_DEFUN([OCTAVE_HAVE_FRAMEWORK], [
