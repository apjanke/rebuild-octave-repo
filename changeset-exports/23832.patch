# HG changeset patch
# User Piotr Held <pjheld@gmail.com>
# Date 1501543218 25200
#      Mon Jul 31 16:20:18 2017 -0700
# Node ID 3544f88a2bb5e02ffb0598e2d1e90abf47ce3c59
# Parent  a62e03d7d53a42a5390258116b376f210c35ade8
Fix reshape of octave_map with trailing singletons (bug #51634, bug #45385, bug #43650).

* oct-map.cc: Chop trailing singletons on the main dimension of retval
(retval.dimensions).  Add BIST test for the issue.

diff --git a/libinterp/corefcn/oct-map.cc b/libinterp/corefcn/oct-map.cc
--- a/libinterp/corefcn/oct-map.cc
+++ b/libinterp/corefcn/oct-map.cc
@@ -524,16 +524,20 @@ octave_map::transpose (void) const
 */
 
 octave_map
 octave_map::reshape (const dim_vector& dv) const
 {
   octave_map retval (xkeys);
   retval.dimensions = dv;
 
+  // When reshaping xvals the Array constructor chops trailing singletons,
+  // hence we need to do the same for the whole map.
+  retval.dimensions.chop_trailing_singletons ();
+
   octave_idx_type nf = nfields ();
   if (nf > 0)
     {
       retval.xvals.reserve (nf);
       for (octave_idx_type i = 0; i < nf; i++)
         retval.xvals[i] = xvals[i].reshape (dv);
     }
   else
@@ -549,16 +553,29 @@ octave_map::reshape (const dim_vector& d
   return retval;
 }
 
 /*
 ## test preservation of key order by reshape
 %!test
 %! x(1,1).d = 10;  x(4,6).a = "b";  x(2,4).f = 27;
 %! assert (fieldnames (reshape (x, 3, 8)), {"d"; "a"; "f"});
+
+## test chopping of trailing singletons
+%!test <51634>
+%! x(1,1).d = 10;  x(4,6).a = "b";  x(2,4).f = 27;
+%! reshape (x, 3, 8, 1, 1);
+
+%!test <46385>
+%! M = repmat (struct ('a', ones(100), 'b', true), 1, 2);
+%! M = repmat(M, 1, 2);
+%! assert (size (M), [1, 4]);
+
+libinterp/corefcn/oct-map.cc
+
 */
 
 void
 octave_map::resize (const dim_vector& dv, bool fill)
 {
   octave_idx_type nf = nfields ();
   if (nf > 0)
     {
