# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365792656 14400
#      Fri Apr 12 14:50:56 2013 -0400
# Node ID 45ae1038ee89cb7758385ad9fe21b281e4406298
# Parent  3781abc745407918535497112c021b25dec0583a
allow renaming of variables in workspace viewer

* main-window.h, main-window.cc
(main_window::handle_rename_variable_request): New function.
(main_window::construct_octave_qt_link): Connect
_workspace_model::rename_variable to
main_window::handle_rename_variable_request.
(main_window::rename_variable_callback): New function.
* octave-qt-link.h, octave-qt-link.cc
(octave_qt_link::do_set_workspace,
octave_qt_link::set_workspace_signal): New argument, top_level.
Change all uses.
* octave-link.h, octave-link.cc (octave_link::post_event):
Provide two-argument version.
(octave_link::set_workspace, octave_link::do_set_workspace):
New argument, top_level.  Change all uses.

* workspace-model.h, workspace-model.cc (workspace_model::flags):
Conditionally add Qt::ItemIsEditable to flags.
(workspace_model::data): Also return value for column 0 if it is
editable.
(workspace_model::setData): Handle setting new values.
(workspace_model::_top_level): New data member.
(workspace_model::set_workspace): New argument, top_level.
(workspace_model::rename_variable): New signal.
* workspace-view.h, workspace-view.cc (variable_name_editor):
New class.
(workspace_view::var_name_editor): New data member.
(workspace_view::workspace_view): Initialize it.  Set var_name_editor
as delegate for column 0.
(workspace_view::~workspace_view): Delete var_name_editor.
(workspace_view::item_double_clicked): Delete.
* symtab.h (symbol_table::rename, symbol_table::do_rename,
symbol_table::symbol_record::rename): New functions.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -34,26 +34,29 @@ along with Octave; see the file COPYING.
 #include <QStyle>
 #include <QToolBar>
 #include <QDesktopServices>
 #include <QDesktopWidget>
 #include <QFileDialog>
 #include <QMessageBox>
 #include <QIcon>
 
+#include <utility>
+
 #ifdef HAVE_QSCINTILLA
 #include "file-editor.h"
 #endif
 #include "main-window.h"
 #include "settings-dialog.h"
 
 #include "cmd-edit.h"
 
 #include "builtin-defun-decls.h"
 #include "defaults.h"
+#include "symtab.h"
 #include "version.h"
 
 static file_editor_interface *
 create_default_editor (QWidget *p)
 {
 #ifdef HAVE_QSCINTILLA
   return new file_editor (p);
 #else
@@ -143,16 +146,27 @@ main_window::handle_load_workspace_reque
 
 void
 main_window::handle_clear_workspace_request (void)
 {
   octave_link::post_event (this, &main_window::clear_workspace_callback);
 }
 
 void
+main_window::handle_rename_variable_request (const QString& old_name,
+                                             const QString& new_name)
+
+{
+  name_pair names (old_name.toStdString (), new_name.toStdString ());
+
+  octave_link::post_event (this, &main_window::rename_variable_callback,
+                           names);
+}
+
+void
 main_window::handle_clear_history_request (void)
 {
   octave_link::post_event (this, &main_window::clear_history_callback);
 }
 
 void
 main_window::handle_command_double_clicked (const QString& command)
 {
@@ -593,22 +607,24 @@ main_window::construct_octave_qt_link (v
 
   _octave_qt_link = new octave_qt_link (_octave_main_thread);
 
   connect (_octave_qt_link, SIGNAL (exit_signal (int)),
            this, SLOT (exit (int)));
 
   connect (_octave_qt_link,
            SIGNAL (set_workspace_signal
-                   (const QString&, const QStringList&, const QStringList&,
-                    const QStringList&, const QStringList&)),
+                   (bool, const QString&, const QStringList&,
+                    const QStringList&, const QStringList&,
+                    const QStringList&)),
            _workspace_model,
            SLOT (set_workspace
-                 (const QString&, const QStringList&,const QStringList&,
-                  const QStringList&, const QStringList&)));
+                 (bool, const QString&, const QStringList&,
+                  const QStringList&, const QStringList&,
+                  const QStringList&)));
 
   connect (_octave_qt_link, SIGNAL (clear_workspace_signal ()),
            _workspace_model, SLOT (clear_workspace ()));
 
   connect (_octave_qt_link, SIGNAL (change_directory_signal (QString)),
            this, SLOT (change_directory (QString)));
 
   connect (_octave_qt_link,
@@ -644,16 +660,22 @@ main_window::construct_octave_qt_link (v
            editor_window,
            SLOT (handle_insert_debugger_pointer_request (const QString&, int)));
 
   connect (_octave_qt_link,
            SIGNAL (delete_debugger_pointer_signal (const QString&, int)),
            editor_window,
            SLOT (handle_delete_debugger_pointer_request (const QString&, int)));
 
+  connect (_workspace_model,
+           SIGNAL (rename_variable (const QString&, const QString&)),
+           this,
+           SLOT (handle_rename_variable_request (const QString&,
+                                                 const QString&)));
+
   _octave_qt_link->execute_interpreter ();
 
   octave_link::connect_link (_octave_qt_link);
 }
 
 void
 main_window::construct_menu_bar (void)
 {
@@ -1179,16 +1201,28 @@ main_window::load_workspace_callback (co
 
 void
 main_window::clear_workspace_callback (void)
 {
   Fclear ();
 }
 
 void
+main_window::rename_variable_callback (const main_window::name_pair& names)
+{
+  /* bool status = */ symbol_table::rename (names.first, names.second);
+
+  // if (status)
+    octave_link::set_workspace (true, symbol_table::workspace_info ());
+
+  //  else
+  //    ; // we need an octave_link action that runs a GUI error option.
+}
+
+void
 main_window::clear_history_callback (void)
 {
   Fhistory (ovl ("-c"));
 }
 
 void
 main_window::change_directory_callback (const std::string& directory)
 {
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -59,16 +59,18 @@ along with Octave; see the file COPYING.
  * Represents the main window.
  */
 class main_window : public QMainWindow
 {
   Q_OBJECT
 
 public:
 
+  typedef std::pair <std::string, std::string> name_pair;
+
   main_window (QWidget *parent = 0);
 
   ~main_window (void);
 
   void focus_command_window (void);
 
 signals:
   void settings_changed (const QSettings *);
@@ -77,16 +79,18 @@ signals:
   void open_file_signal (const QString&);
 
 public slots:
   void report_status_message (const QString& statusMessage);
   void handle_save_workspace_request (void);
   void handle_load_workspace_request (void);
   void handle_clear_workspace_request (void);
   void handle_clear_history_request (void);
+  void handle_rename_variable_request (const QString& old_name,
+                                       const QString& new_name);
   void new_file (const QString& commands = QString ());
   void open_file (const QString& file_name = QString ());
   void open_online_documentation_page (void);
   void open_bug_tracker_page (void);
   void open_octave_forge_page (void);
   void open_agora_page (void);
   void process_settings_dialog_request (void);
   void show_about_octave (void);
@@ -145,16 +149,18 @@ private:
   void construct_tool_bar (void);
 
   void establish_octave_link (void);
 
   void save_workspace_callback (const std::string& file);
 
   void load_workspace_callback (const std::string& file);
 
+  void rename_variable_callback (const name_pair& names);
+
   void clear_workspace_callback (void);
 
   void clear_history_callback (void);
 
   void change_directory_callback (const std::string& directory);
 
   void debug_continue_callback (void);
 
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -64,17 +64,18 @@ octave_qt_link::do_edit_file (const std:
 
 void
 octave_qt_link::do_change_directory (const std::string& dir)
 {
   emit change_directory_signal (QString::fromStdString (dir));
 }
 
 void
-octave_qt_link::do_set_workspace (const std::list<workspace_element>& ws)
+octave_qt_link::do_set_workspace (bool top_level,
+                                  const std::list<workspace_element>& ws)
 {
   QString scopes;
   QStringList symbols;
   QStringList class_names;
   QStringList dimensions;
   QStringList values;
 
   for (std::list<workspace_element>::const_iterator it = ws.begin ();
@@ -82,17 +83,18 @@ octave_qt_link::do_set_workspace (const 
     {
       scopes.append (it->scope ());
       symbols.append (QString::fromStdString (it->symbol ()));
       class_names.append (QString::fromStdString (it->class_name ()));
       dimensions.append (QString::fromStdString (it->dimension ()));
       values.append (QString::fromStdString (it->value ()));
     }
 
-  emit set_workspace_signal (scopes, symbols, class_names, dimensions, values);
+  emit set_workspace_signal (top_level, scopes, symbols, class_names,
+                             dimensions, values);
 }
 
 void
 octave_qt_link::do_clear_workspace (void)
 {
   emit clear_workspace_signal ();
 }
 
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -56,17 +56,19 @@ public:
   void execute_interpreter (void);
 
   bool do_exit (int status);
 
   bool do_edit_file (const std::string& file);
 
   void do_change_directory (const std::string& dir);
 
-  void do_set_workspace (const std::list<workspace_element>& ws);
+  void do_set_workspace (bool top_level,
+                         const std::list<workspace_element>& ws);
+
   void do_clear_workspace (void);
 
   void do_set_history (const string_vector& hist);
   void do_append_history (const std::string& hist_entry);
   void do_clear_history (void);
 
   void do_pre_input_event (void);
   void do_post_input_event (void);
@@ -94,17 +96,18 @@ private:
 signals:
 
   void exit_signal (int status);
 
   void edit_file_signal (const QString& file);
 
   void change_directory_signal (const QString& dir);
 
-  void set_workspace_signal (const QString& scopes,
+  void set_workspace_signal (bool top_level,
+                             const QString& scopes,
                              const QStringList& symbols,
                              const QStringList& class_names,
                              const QStringList& dimensions,
                              const QStringList& values);
 
   void clear_workspace_signal (void);
 
   void set_history_signal (const QStringList& hist);
diff --git a/libgui/src/workspace-model.cc b/libgui/src/workspace-model.cc
--- a/libgui/src/workspace-model.cc
+++ b/libgui/src/workspace-model.cc
@@ -22,18 +22,17 @@ along with Octave; see the file COPYING.
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <QTreeWidget>
 
-#include "symtab.h"
-#include "variables.h"
+#include "utils.h"
 
 #include "workspace-model.h"
 
 workspace_model::workspace_model (QObject *p)
   : QAbstractTableModel (p)
 {
   _columnNames.append (tr ("Name"));
   _columnNames.append (tr ("Class"));
@@ -51,66 +50,107 @@ int
 workspace_model::columnCount (const QModelIndex& p) const
 {
   return _columnNames.size ();
 }
 
 Qt::ItemFlags
 workspace_model::flags (const QModelIndex& idx) const
 {
-  if (! idx.isValid ())
-    return 0;
+  Qt::ItemFlags retval = 0;
+
+  if (idx.isValid ())
+    retval |= Qt::ItemIsEnabled | Qt::ItemIsSelectable;
 
-  return Qt::ItemIsEnabled | Qt::ItemIsSelectable;
+  if (idx.column () == 0)
+    retval |= Qt::ItemIsEditable;
+
+  return retval;
 }
 
 QVariant
 workspace_model::headerData (int section, Qt::Orientation orientation,
                              int role) const
 {
   if (orientation == Qt::Horizontal && role == Qt::DisplayRole)
     return _columnNames[section];
   else
     return QVariant();
 }
 
 QVariant
 workspace_model::data (const QModelIndex& idx, int role) const
 {
-  if (!idx.isValid())
-    return QVariant();
+  QVariant retval;
 
-  if (role != Qt::DisplayRole)
-    return QVariant ();
-
-  switch (idx.column ())
+  if (idx.isValid ()
+      && (role == Qt::DisplayRole
+          || (idx.column () == 0 && role == Qt::EditRole)))
     {
-    case 0:
-      return QVariant(_symbols[idx.row()]);
+      switch (idx.column ())
+        {
+        case 0:
+          retval = QVariant (_symbols[idx.row()]);
+          break;
 
-    case 1:
-      return QVariant(_class_names[idx.row()]);
+        case 1:
+          retval = QVariant (_class_names[idx.row()]);
+          break;
 
-    case 2:
-      return QVariant(_dimensions[idx.row()]);
+        case 2:
+          retval = QVariant (_dimensions[idx.row()]);
+          break;
 
-    case 3:
-      return QVariant(_values[idx.row()]);
+        case 3:
+          retval = QVariant (_values[idx.row()]);
+          break;
+
+        default:
+          break;
+        }
     }
 
-  return QVariant ();
+  return retval;
 }
 
+bool
+workspace_model::setData (const QModelIndex& idx, const QVariant& value,
+                          int role)
+{
+  bool retval = false;
+
+  if (idx.column () == 0 && role == Qt::EditRole)
+    {
+      QString qold_name = _symbols[idx.row()];
+
+      QString qnew_name = value.toString ();
+
+      std::string new_name = qnew_name.toStdString ();
+
+      if (valid_identifier (new_name))
+        {
+          emit rename_variable (qold_name, qnew_name);
+
+          retval = true;
+        }
+    }
+
+  return retval;
+}
+
+
 void
-workspace_model::set_workspace (const QString& scopes,
+workspace_model::set_workspace (bool top_level,
+                                const QString& scopes,
                                 const QStringList& symbols,
                                 const QStringList& class_names,
                                 const QStringList& dimensions,
                                 const QStringList& values)
 {
+  _top_level = top_level;
   _scopes = scopes;
   _symbols = symbols;
   _class_names = class_names;
   _dimensions = dimensions;
   _values = values;
 
   update_table ();
 
@@ -124,16 +164,17 @@ workspace_model::clear_workspace (void)
   update_table ();
 
   emit model_changed ();
 }
 
 void
 workspace_model::clear_data (void)
 {
+  _top_level = false;
   _scopes = QString ();
   _symbols = QStringList ();
   _class_names = QStringList ();
   _dimensions = QStringList ();
   _values = QStringList ();
 }
 
 void
diff --git a/libgui/src/workspace-model.h b/libgui/src/workspace-model.h
--- a/libgui/src/workspace-model.h
+++ b/libgui/src/workspace-model.h
@@ -37,44 +37,53 @@ class workspace_model
 public:
 
   workspace_model (QObject *parent = 0);
 
   ~workspace_model (void) { }
 
   QVariant data (const QModelIndex& index, int role) const;
 
+  bool setData (const QModelIndex& index, const QVariant& value,
+                int role = Qt::EditRole);
+
   Qt::ItemFlags flags (const QModelIndex& index) const;
 
   QVariant headerData (int section, Qt::Orientation orientation,
                        int role = Qt::DisplayRole) const;
 
   int rowCount (const QModelIndex& parent = QModelIndex ()) const;
 
   int columnCount (const QModelIndex& parent = QModelIndex ()) const;
 
+  bool is_top_level (void) const { return _top_level; }
+
 public slots:
 
-  void set_workspace (const QString& scopes,
+  void set_workspace (bool top_level,
+                      const QString& scopes,
                       const QStringList& symbols,
                       const QStringList& class_names,
                       const QStringList& dimensions,
                       const QStringList& values);
 
   void clear_workspace (void);
 
 signals:
 
   void model_changed (void);
 
+  void rename_variable (const QString& old_name, const QString& new_name);
+
 private:
 
   void clear_data (void);
   void update_table (void);
 
+  bool _top_level;
   QString _scopes;
   QStringList _symbols;
   QStringList _class_names;
   QStringList _dimensions;
   QStringList _values;
 
   QStringList _columnNames;
 };
diff --git a/libgui/src/workspace-view.cc b/libgui/src/workspace-view.cc
--- a/libgui/src/workspace-view.cc
+++ b/libgui/src/workspace-view.cc
@@ -20,34 +20,95 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include "workspace-view.h"
-#include "resource-manager.h"
+#include <QMessageBox>
+#include <QLineEdit>
 #include <QHeaderView>
 #include <QHBoxLayout>
 #include <QVBoxLayout>
 #include <QPushButton>
 #include <QMenu>
 
+#include "workspace-view.h"
+#include "resource-manager.h"
+
+QWidget *
+variable_name_editor::createEditor (QWidget *p, const QStyleOptionViewItem&,
+                                    const QModelIndex& index) const
+{
+  QWidget *retval = 0;
+
+  const QAbstractItemModel *m = index.model ();
+
+  const workspace_model *wm = static_cast<const workspace_model *> (m);
+
+  if (wm->is_top_level ())
+    retval = new QLineEdit (p);
+  else
+    {
+      QMessageBox *msg_box
+        = new QMessageBox (QMessageBox::Critical,
+                           tr ("Workspace Viewer"),
+                           tr ("Only top-level symbols may be renamed.\n"),
+                           QMessageBox::Ok);
+
+      msg_box->setWindowModality (Qt::NonModal);
+      msg_box->setAttribute (Qt::WA_DeleteOnClose);
+      msg_box->show ();
+    }
+
+  return retval;
+}
+
+void
+variable_name_editor::setEditorData (QWidget *editor,
+                                     const QModelIndex& index) const
+{
+  QLineEdit *line_editor = static_cast<QLineEdit *> (editor);
+
+  const QAbstractItemModel *m = index.model ();
+
+  QVariant d =  m->data (index, Qt::EditRole);
+
+  line_editor->insert (d.toString ());
+}
+
+void
+variable_name_editor::setModelData (QWidget *editor,
+                                    QAbstractItemModel *model,
+                                    const QModelIndex& index) const
+{
+  QLineEdit *line_editor = static_cast<QLineEdit*> (editor);
+
+  model->setData (index, line_editor->text (), Qt::EditRole);
+}
+
+void
+variable_name_editor::updateEditorGeometry (QWidget *editor,
+                                            const QStyleOptionViewItem& option,
+                                            const QModelIndex&) const
+{
+  editor->setGeometry (option.rect);
+}
+
 workspace_view::workspace_view (QWidget *p)
-  : octave_dock_widget (p)
+  : octave_dock_widget (p), view (new QTableView (this)),
+    var_name_editor (new variable_name_editor (this))
 {
   setObjectName ("WorkspaceView");
   setWindowIcon (QIcon (":/actions/icons/logo.png"));
   setWindowTitle (tr ("Workspace"));
   setStatusTip (tr ("View the variables in the active workspace."));
 
-  view = new QTableView (this);
-
   view->setWordWrap (false);
   view->setContextMenuPolicy (Qt::CustomContextMenu);
 
   // Set an empty widget, so we can assign a layout to it.
   setWidget (new QWidget (this));
 
   // Create a new layout and add widgets to it.
   QVBoxLayout *vbox_layout = new QVBoxLayout ();
@@ -56,49 +117,41 @@ workspace_view::workspace_view (QWidget 
 
   // Set the empty widget to have our layout.
   widget ()->setLayout (vbox_layout);
 
   // Initialize collapse/expand state of the workspace subcategories.
 
   QSettings *settings = resource_manager::get_settings ();
 
-  // FIXME -- what should happen if settings is 0?
-
   // Initialize column order and width of the workspace
   
   view->horizontalHeader ()->restoreState (settings->value ("workspaceview/column_state").toByteArray ());
 
-  // Connect signals and slots.
+  view->setItemDelegateForColumn (0, var_name_editor);
 
-  connect (view, SIGNAL (doubleClicked (QModelIndex)),
-           this, SLOT (item_double_clicked (QModelIndex)));
+  // Connect signals and slots.
 
   connect (view, SIGNAL (customContextMenuRequested (const QPoint&)),
            this, SLOT(contextmenu_requested (const QPoint&)));
 
   connect (this, SIGNAL (command_requested (const QString&)),
            p, SLOT (handle_command_double_clicked (const QString&)));
 }
 
 workspace_view::~workspace_view (void)
 {
   QSettings *settings = resource_manager::get_settings ();
 
   settings->setValue("workspaceview/column_state",
                      view->horizontalHeader ()->saveState ());
 
   settings->sync ();
-}
 
-void
-workspace_view::item_double_clicked (QModelIndex)
-{
-  // TODO: Implement opening a dialog that allows the user to change a
-  // variable in the workspace.
+  delete var_name_editor;
 }
 
 void
 workspace_view::closeEvent (QCloseEvent *e)
 {
   emit active_changed (false);
   QDockWidget::closeEvent (e);
 }
diff --git a/libgui/src/workspace-view.h b/libgui/src/workspace-view.h
--- a/libgui/src/workspace-view.h
+++ b/libgui/src/workspace-view.h
@@ -19,56 +19,78 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if !defined (workspace_view_h)
 #define workspace_view_h 1
 
+#include <QItemDelegate>
 #include <QTableView>
 #include <QSemaphore>
 
 #include "octave-dock-widget.h"
 #include "workspace-model.h"
 
+class variable_name_editor : public QItemDelegate
+{
+  Q_OBJECT
+
+public:
+
+  variable_name_editor (QObject *p = 0) : QItemDelegate (p) { }
+
+  QWidget *createEditor (QWidget *p, const QStyleOptionViewItem& option,
+                         const QModelIndex& index) const;
+
+  void setEditorData (QWidget *editor, const QModelIndex& index) const;
+
+  void setModelData (QWidget *editor, QAbstractItemModel *model,
+                     const QModelIndex& index) const;
+
+  void updateEditorGeometry (QWidget *editor,
+                             const QStyleOptionViewItem& option,
+                             const QModelIndex&) const;
+};
+
 class workspace_view : public octave_dock_widget
 {
   Q_OBJECT
 
 public:
 
   workspace_view (QWidget *parent = 0);
 
   ~workspace_view (void);
 
 public:
 
   void setModel (workspace_model *model) { view->setModel (model); }
 
-
 signals:
 
   /** signal that user had requested a command on a variable */
   void command_requested (const QString& cmd);
 
 protected:
 
   void closeEvent (QCloseEvent *event);
 
 protected slots:
 
-  void item_double_clicked (QModelIndex index);
   void contextmenu_requested (const QPoint& pos);
 
   // context menu slots
   void handle_contextmenu_disp (void);
   void handle_contextmenu_plot (void);
   void handle_contextmenu_stem (void);
 
 private:
 
   void relay_contextmenu_command (const QString& cmdname);
 
-  QTableView * view;
+  QTableView *view;
+
+  variable_name_editor *var_name_editor;
 };
 
 #endif
diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -214,17 +214,19 @@ octave_base_reader::octave_gets (bool& e
 
   if (interactive || forced_interactive)
     {
       if (! Vdebugging)
         octave_link::exit_debugger_event ();
 
       octave_link::pre_input_event ();
 
-      octave_link::set_workspace (symbol_table::workspace_info ());
+      octave_link::set_workspace ((symbol_table::current_scope ()
+                                   == symbol_table::top_scope ()),
+                                  symbol_table::workspace_info ());
 
       // FIXME -- this call should happen any time the terminal window
       // size changes, not just prior to prompting for input.
       command_editor::reset_screen_size ();
     }
 
   bool history_skip_auto_repeated_debugging_command = false;
 
@@ -521,17 +523,19 @@ get_debug_input (const std::string& prom
 
           if (curr_debug_line > 0)
             buf << " at line " << curr_debug_line;
 
           if (have_file)
             {
               octave_link::enter_debugger_event (nm, curr_debug_line);
 
-              octave_link::set_workspace (symbol_table::workspace_info ());
+              octave_link::set_workspace ((symbol_table::current_scope ()
+                                           == symbol_table::top_scope ()),
+                                          symbol_table::workspace_info ());
 
               frame.add_fcn (execute_in_debugger_handler,
                              std::pair<std::string, int> (nm, curr_debug_line));
 
               std::string line_buf
                 = get_file_line (nm, curr_debug_line);
 
               if (! line_buf.empty ())
diff --git a/libinterp/interpfcn/octave-link.h b/libinterp/interpfcn/octave-link.h
--- a/libinterp/interpfcn/octave-link.h
+++ b/libinterp/interpfcn/octave-link.h
@@ -103,16 +103,24 @@ public:
 
   template <class T, class A>
   static void post_event (T *obj, void (T::*method) (const A&), const A& arg)
   {
     if (enabled ())
       instance->do_post_event (obj, method, arg);
   }
 
+  template <class T, class A, class B>
+  static void post_event (T *obj, void (T::*method) (const A&, const B&),
+                          const A& arg_a, const B& arg_b)
+  {
+    if (enabled ())
+      instance->do_post_event (obj, method, arg_a, arg_b);
+  }
+
   static void entered_readline_hook (void)
   {
     if (enabled ())
       instance->do_entered_readline_hook ();
   }
 
   static void finished_readline_hook (void)
   {
@@ -127,20 +135,21 @@ public:
   }
 
   static void change_directory (const std::string& dir)
   {
     if (enabled ())
       instance->do_change_directory (dir);
   }
 
-  static void set_workspace (const std::list<workspace_element>& ws)
+  static void set_workspace (bool top_level,
+                             const std::list<workspace_element>& ws)
   {
     if (enabled ())
-      instance->do_set_workspace (ws);
+      instance->do_set_workspace (top_level, ws);
   }
 
   static void clear_workspace (void)
   {
     if (enabled ())
       instance->do_clear_workspace ();
   }
 
@@ -264,17 +273,18 @@ protected:
 
   virtual bool do_exit (int status) = 0;
 
   virtual bool do_edit_file (const std::string& file) = 0;
 
   virtual void do_change_directory (const std::string& dir) = 0;
 
   virtual void
-  do_set_workspace (const std::list<workspace_element>& ws) = 0;
+  do_set_workspace (bool top_level,
+                    const std::list<workspace_element>& ws) = 0;
 
   virtual void do_clear_workspace (void) = 0;
 
   virtual void do_set_history (const string_vector& hist) = 0;
   virtual void do_append_history (const std::string& hist_entry) = 0;
   virtual void do_clear_history (void) = 0;
 
   virtual void do_pre_input_event (void) = 0;
diff --git a/libinterp/interpfcn/symtab.h b/libinterp/interpfcn/symtab.h
--- a/libinterp/interpfcn/symtab.h
+++ b/libinterp/interpfcn/symtab.h
@@ -522,16 +522,18 @@ public:
 
     symbol_record dup (scope_id new_scope) const
     {
       return symbol_record (rep->dup (new_scope));
     }
 
     const std::string& name (void) const { return rep->name; }
 
+    void rename (const std::string& new_name) { rep->name = new_name; }
+
     octave_value
     find (const octave_value_list& args = octave_value_list ()) const;
 
     void assign (const octave_value& value,
                  context_id context = xdefault_context)
     {
       rep->assign (value, context);
     }
@@ -1278,16 +1280,26 @@ public:
   {
     static symbol_record foobar;
 
     symbol_table *inst = get_instance (scope);
 
     return inst ? inst->do_insert (name) : foobar;
   }
 
+  static void rename (const std::string& old_name,
+                      const std::string& new_name,
+                      scope_id scope = xcurrent_scope)
+  {
+    symbol_table *inst = get_instance (scope);
+
+    if (inst)
+      inst->do_rename (old_name, new_name);
+  }
+
   static void assign (const std::string& name,
                       const octave_value& value = octave_value (),
                       scope_id scope = xcurrent_scope,
                       context_id context = xdefault_context,
                       bool force_add = false)
   {
     static octave_value foobar;
 
@@ -2457,16 +2469,32 @@ private:
 
             return table[name] = ret;
           }
       }
     else
       return p->second;
   }
 
+  void do_rename (const std::string& old_name, const std::string& new_name)
+  {
+    table_iterator p = table.find (old_name);
+
+    if (p != table.end ())
+      {
+        symbol_record sr = p->second;
+
+        sr.rename (new_name);
+
+        table.erase (p);
+
+        table[new_name] = sr;
+      }
+  }
+
   void do_assign (const std::string& name, const octave_value& value,
                   context_id context, bool force_add)
   {
     table_iterator p = table.find (name);
 
     if (p == table.end ())
       {
         symbol_record& sr = do_insert (name, force_add);
