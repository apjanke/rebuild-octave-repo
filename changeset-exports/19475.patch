# HG changeset patch
# User Vytautas Janƒçauskas <unaudio@gmail.com>
# Date 1378928284 -10800
#      Wed Sep 11 22:38:04 2013 +0300
# Node ID b9df6b3fd5ef84db90f14a1d4cfe0627a365f0f1
# Parent  91ee78cdba6c97bcf436ed64622a6265745f33d0
Fix includes in player and recorder class files, add instructions to build them

* module-files: lines to build player_class.cc and recorder_class.cc
* player_class.cc, recorder_class.cc: change includes to use local versions
of Octave headers, also added bits_to_format utility function

diff --git a/libinterp/dldfcn/module-files b/libinterp/dldfcn/module-files
--- a/libinterp/dldfcn/module-files
+++ b/libinterp/dldfcn/module-files
@@ -18,9 +18,11 @@ fftw.cc|$(FFTW_XCPPFLAGS)|$(FFTW_XLDFLAG
 qr.cc|$(QRUPDATE_CPPFLAGS) $(SPARSE_XCPPFLAGS)|$(QRUPDATE_LDFLAGS) $(SPARSE_XLDFLAGS)|$(QRUPDATE_LIBS) $(SPARSE_XLIBS)
 symbfact.cc|$(SPARSE_XCPPFLAGS)|$(SPARSE_XLDFLAGS)|$(SPARSE_XLIBS)
 symrcm.cc|$(SPARSE_XCPPFLAGS)|$(SPARSE_XLDFLAGS)|$(SPARSE_XLIBS)
 tsearch.cc
 urlwrite.cc|$(CURL_CPPFLAGS)|$(CURL_LDFLAGS)|$(CURL_LIBS)
 audioread.cc|$(SNDFILE_CPPFLAGS)|$(SNDFILE_LDFLAGS)|$(SNDFILE_LIBS)
 audiowrite.cc|$(SNDFILE_CPPFLAGS)|$(SNDFILE_LDFLAGS)|$(SNDFILE_LIBS)
 audioinfo.cc|$(SNDFILE_CPPFLAGS)|$(SNDFILE_LDFLAGS)|$(SNDFILE_LIBS)
-audiodevinfo.cc|$(PORTAUDIO_CPPFLAGS)|$(PORTAUDIO_LDFLAGS)|$(PORTAUDIO_LIBS)
\ No newline at end of file
+audiodevinfo.cc|$(PORTAUDIO_CPPFLAGS)|$(PORTAUDIO_LDFLAGS)|$(PORTAUDIO_LIBS)
+player_class.cc|$(PORTAUDIO_CPPFLAGS)|$(PORTAUDIO_LDFLAGS)|$(PORTAUDIO_LIBS)
+recorder_class.cc|$(PORTAUDIO_CPPFLAGS)|$(PORTAUDIO_LDFLAGS)|$(PORTAUDIO_LIBS)
\ No newline at end of file
diff --git a/libinterp/dldfcn/player_class.cc b/libinterp/dldfcn/player_class.cc
--- a/libinterp/dldfcn/player_class.cc
+++ b/libinterp/dldfcn/player_class.cc
@@ -1,17 +1,44 @@
-#include <octave/oct.h>
-#include <octave/ov.h>
-#include <octave/parse.h>
+#include "oct.h"
+#include "ov.h"
+#include "parse.h"
 #include <portaudio.h>
 #include <stdint.h>
 
-#include "common.h"
 #include "player_class.h"
 
+PaSampleFormat bits_to_format(int bits)
+{
+  if (bits == 8)
+    {
+      return paInt8;
+    }
+  else if (bits == 16)
+    {
+      return paInt16;
+    }
+  else if (bits == 24)
+    {
+      return paInt24;
+    }
+  else if (bits == 32)
+    {
+      return paInt32;
+    }
+  else if (bits == -1)
+    {
+      return paFloat32;
+    }
+  else 
+    {
+      return 0;
+    }
+}
+
 #define BUFFER_SIZE 512
 
 DEFINE_OCTAVE_ALLOCATOR (audioplayer);
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (audioplayer, "audioplayer", "audioplayer");
 
 int is_big_endian (void)
 {
   union 
diff --git a/libinterp/dldfcn/player_class.h b/libinterp/dldfcn/player_class.h
--- a/libinterp/dldfcn/player_class.h
+++ b/libinterp/dldfcn/player_class.h
@@ -1,14 +1,14 @@
 #ifndef PLAYER_CLASS_H
 #define PLAYER_CLASS_H
 
 #include <string>
-#include <octave/oct.h>
-#include <octave/ov-int32.h>
+#include "oct.h"
+#include "ov-int32.h"
 #include <portaudio.h>
 
 #include "player_class.h"
 
 enum audio_type {INT8, UINT8, INT16, DOUBLE};
 
 class audioplayer : public octave_base_value 
 {
diff --git a/libinterp/dldfcn/recorder_class.cc b/libinterp/dldfcn/recorder_class.cc
--- a/libinterp/dldfcn/recorder_class.cc
+++ b/libinterp/dldfcn/recorder_class.cc
@@ -1,18 +1,45 @@
-#include <octave/oct.h>
-#include <octave/ov.h>
-#include <octave/parse.h>
+#include "oct.h"
+#include "ov.h"
+#include "parse.h"
 #include <portaudio.h>
 #include <stdint.h>
 
-#include "common.h"
 #include "player_class.h"
 #include "recorder_class.h"
 
+PaSampleFormat bits_to_format(int bits)
+{
+  if (bits == 8)
+    {
+      return paInt8;
+    }
+  else if (bits == 16)
+    {
+      return paInt16;
+    }
+  else if (bits == 24)
+    {
+      return paInt24;
+    }
+  else if (bits == 32)
+    {
+      return paInt32;
+    }
+  else if (bits == -1)
+    {
+      return paFloat32;
+    }
+  else 
+    {
+      return 0;
+    }
+}
+
 #define BUFFER_SIZE 512
 
 DEFINE_OCTAVE_ALLOCATOR (audiorecorder);
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (audiorecorder, "audiorecorder", "audiorecorder");
 
 static int octave_record_callback (const void *input, void *output,
                                    unsigned long frames,
                                    const PaStreamCallbackTimeInfo* time,
diff --git a/libinterp/dldfcn/recorder_class.h b/libinterp/dldfcn/recorder_class.h
--- a/libinterp/dldfcn/recorder_class.h
+++ b/libinterp/dldfcn/recorder_class.h
@@ -1,15 +1,15 @@
 #ifndef RECORDER_CLASS_H
 #define RECORDER_CLASS_H
 
 #include <vector>
 
-#include <octave/oct.h>
-#include <octave/ov-int32.h>
+#include "oct.h"
+#include "ov-int32.h"
 #include <portaudio.h>
 
 #include "player_class.h"
 
 class audiorecorder : public octave_base_value 
 {
 public:
     audiorecorder();
