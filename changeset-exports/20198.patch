# HG changeset patch
# User Rik <rik@octave.org>
# Date 1431881154 25200
#      Sun May 17 09:45:54 2015 -0700
# Branch stable
# Node ID b597bd161a5f7cd0af41e06bcc15d79f38ea3315
# Parent  b0f7ee81d974350dfaed4a809f41cd3d98d8b0b7
doc: Document that mkfifo's mode argument is in decimal (bug #45054).

* dirfns.cc (Fmkdir): Document that umask is applied to the mode bits of a
newly created directory.

* file-io.cc (Ffopen): Document that umask is applied to the mode bits of a
newly created file.
* file-io.cc (Fumask): Add brief explanation of umask and UNIX permission bits.

* syscalls.cc (Fmkfifo): Document that mode is in decimal and subject to umask
processing.

diff --git a/libinterp/corefcn/dirfns.cc b/libinterp/corefcn/dirfns.cc
--- a/libinterp/corefcn/dirfns.cc
+++ b/libinterp/corefcn/dirfns.cc
@@ -225,17 +225,20 @@ Create a directory named @var{dir} in th
 \n\
 If no @var{parent} directory is specified the present working directory is\n\
 used.\n\
 \n\
 If successful, @var{status} is 1, and @var{msg}, @var{msgid} are empty\n\
 character strings ("").  Otherwise, @var{status} is 0, @var{msg} contains a\n\
 system-dependent error message, and @var{msgid} contains a unique message\n\
 identifier.\n\
-@seealso{rmdir, pwd, cd}\n\
+\n\
+When creating a directory permissions will be set to\n\
+@code{0777 - @var{umask}}.\n\
+@seealso{rmdir, pwd, cd, umask}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(2) = std::string ();
   retval(1) = std::string ();
   retval(0) = false;
 
diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -677,17 +677,20 @@ IEEE big endian format.\n\
 \n\
 @item ieee-le\n\
 IEEE little endian format.\n\
 @end table\n\
 \n\
 @noindent\n\
 however, conversions are currently only supported for @samp{native}\n\
 @samp{ieee-be}, and @samp{ieee-le} formats.\n\
-@seealso{fclose, fgets, fgetl, fscanf, fread, fputs, fdisp, fprintf, fwrite, fskipl, fseek, frewind, ftell, feof, ferror, fclear, fflush, freport}\n\
+\n\
+When opening a new file that does not yet exist, permissions will be set to\n\
+@code{0666 - @var{umask}}.\n\
+@seealso{fclose, fgets, fgetl, fscanf, fread, fputs, fdisp, fprintf, fwrite, fskipl, fseek, frewind, ftell, feof, ferror, fclear, fflush, freport, umask}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(0) = -1.0;
 
   int nargin = args.length ();
 
@@ -2234,17 +2237,23 @@ DEFUNX ("umask", Fumask, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} umask (@var{mask})\n\
 Set the permission mask for file creation.\n\
 \n\
 The parameter @var{mask} is an integer, interpreted as an octal number.\n\
 \n\
 If successful, returns the previous value of the mask (as an integer to be\n\
 interpreted as an octal number); otherwise an error message is printed.\n\
-@seealso{fopen, mkdir}\n\
+\n\
+The permission mask is a UNIX concept used when creating new objects on a\n\
+file system such as files, directories, or named FIFOs.  The object to be\n\
+created has base permissions in an octal number @var{mode} which are\n\
+modified according to the octal value of @var{mask}.  The final permissions\n\
+for the new object are @code{@var{mode} - @var{mask}}.\n\
+@seealso{fopen, mkdir, mkfifo}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int status = 0;
 
   if (args.length () == 1)
     {
diff --git a/libinterp/corefcn/syscalls.cc b/libinterp/corefcn/syscalls.cc
--- a/libinterp/corefcn/syscalls.cc
+++ b/libinterp/corefcn/syscalls.cc
@@ -816,24 +816,28 @@ The function outputs are described in th
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUNX ("mkfifo", Fmkfifo, args, ,
         "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {} mkfifo (@var{name}, @var{mode})\n\
+@deftypefn  {Built-in Function} {@var{err} =} mkfifo (@var{name}, @var{mode})\n\
 @deftypefnx {Built-in Function} {[@var{err}, @var{msg}] =} mkfifo (@var{name}, @var{mode})\n\
-Create a FIFO special file named @var{name} with file mode @var{mode}\n\
+Create a FIFO special file named @var{name} with file mode @var{mode}.\n\
+\n\
+@var{mode} is interpreted as a decimal number (@emph{not} octal) and is\n\
+subject to umask processing.  The final calculated mode is\n\
+@code{@var{mode} - @var{umask}}.\n\
 \n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
 Otherwise, @var{err} is nonzero and @var{msg} contains a system-dependent\n\
 error message.\n\
-@seealso{pipe}\n\
+@seealso{pipe, umask}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1;
 
   int nargin = args.length ();
