# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1544869891 -3600
#      Sat Dec 15 11:31:31 2018 +0100
# Branch stable
# Node ID 5535267e88ba129ce8fa4ab07ce7935be3511492
# Parent  aa47b1287d7ea50df7f269d87ceb079617d02916
Make creation and destruction of Qt widgets synchronous (bug #55526)

* Backend.cc (Backend::Backend): Use Qt::BlockingQueuedConnection for widget
  creation.
  (Backend::initialize): Unlock mutex before creating widget.
  (Backend::finalize): Unlock mutex before calling ObjectProxy::finalize

* ObjectProxy.h (ObjectProxy::sendFinalize): Remove signal.

* ObjectProxy.cc (ObjectProxy::init): Remove connection to sendFinalize.
  (ObjectProxy::finalize): Make use of single QMetaObject::invokeMethod to
  trigger the execution of the Object's slotFinalize. Run synchronously when
  the interpreter thread, in which the ObjectProxy lives, is not the GUI thread.
  (ObjectProxy::get_pixels): Remove successive calls to
  QMetaObject::invokeMethod since this should not fail anymore.

* graphics.cc: Remove unnecessary pause in uicontexmenu BIST.
  (Fdrawnow): Remove comments about unnecessary pause.

diff --git a/libgui/graphics/Backend.cc b/libgui/graphics/Backend.cc
--- a/libgui/graphics/Backend.cc
+++ b/libgui/graphics/Backend.cc
@@ -71,17 +71,18 @@ namespace QtHandles
   }
 
   Backend::Backend (void)
     : QObject (), base_graphics_toolkit ("qt")
   {
     ObjectFactory *factory = ObjectFactory::instance ();
 
     connect (this, SIGNAL (createObject (double)),
-             factory, SLOT (createObject (double)));
+             factory, SLOT (createObject (double)),
+             Qt::BlockingQueuedConnection);
   }
 
   Backend::~Backend (void)
   { }
 
   bool
   Backend::initialize (const graphics_object& go)
   {
@@ -91,16 +92,21 @@ namespace QtHandles
         || go.isa ("uibuttongroup")
         || go.isa ("uimenu")
         || go.isa ("uicontextmenu")
         || go.isa ("uitable")
         || go.isa ("uitoolbar")
         || go.isa ("uipushtool")
         || go.isa ("uitoggletool"))
       {
+        // FIXME: We need to unlock the mutex here but we have no way to know if
+        // if it was previously locked by this thread, and thus if we should
+        // re-lock it.
+        gh_manager::unlock ();
+
         Logger::debug ("Backend::initialize %s from thread %08x",
                        go.type ().c_str (), QThread::currentThreadId ());
 
         ObjectProxy *proxy = new ObjectProxy ();
         graphics_object gObj (go);
 
         OCTAVE_PTR_TYPE tmp (reinterpret_cast<OCTAVE_INTPTR_TYPE> (proxy));
         gObj.get_properties ().set (toolkitObjectProperty (go), tmp);
@@ -149,16 +155,21 @@ namespace QtHandles
         else
           proxy->update (pId);
       }
   }
 
   void
   Backend::finalize (const graphics_object& go)
   {
+    // FIXME: We need to unlock the mutex here but we have no way to know if
+    // if it was previously locked by this thread, and thus if we should
+    // re-lock it.
+    gh_manager::unlock ();
+
     Logger::debug ("Backend::finalize %s from thread %08x",
                    go.type ().c_str (), QThread::currentThreadId ());
 
     ObjectProxy *proxy = toolkitObjectProxy (go);
 
     if (proxy)
       {
         proxy->finalize ();
diff --git a/libgui/graphics/ObjectProxy.cc b/libgui/graphics/ObjectProxy.cc
--- a/libgui/graphics/ObjectProxy.cc
+++ b/libgui/graphics/ObjectProxy.cc
@@ -47,66 +47,69 @@ namespace QtHandles
   ObjectProxy::init (Object *obj)
   {
     if (obj != m_object)
       {
         if (m_object)
           {
             disconnect (this, SIGNAL (sendUpdate (int)),
                         m_object, SLOT (slotUpdate (int)));
-            disconnect (this, SIGNAL (sendFinalize (void)),
-                        m_object, SLOT (slotFinalize (void)));
             disconnect (this, SIGNAL (sendRedraw (void)),
                         m_object, SLOT (slotRedraw (void)));
             disconnect (this, SIGNAL (sendShow (void)),
                         m_object, SLOT (slotShow (void)));
             disconnect (this, SIGNAL (sendPrint (const QString&, const QString&)),
                         m_object, SLOT (slotPrint (const QString&, const QString&)));
           }
 
         m_object = obj;
 
         if (m_object)
           {
             connect (this, SIGNAL (sendUpdate (int)),
                      m_object, SLOT (slotUpdate (int)));
-            connect (this, SIGNAL (sendFinalize (void)),
-                     m_object, SLOT (slotFinalize (void)));
             connect (this, SIGNAL (sendRedraw (void)),
                      m_object, SLOT (slotRedraw (void)));
             connect (this, SIGNAL (sendShow (void)),
                      m_object, SLOT (slotShow (void)));
             connect (this, SIGNAL (sendPrint (const QString&, const QString&)),
                      m_object, SLOT (slotPrint (const QString&, const QString&)),
                      Qt::BlockingQueuedConnection);
           }
       }
   }
 
   void
   ObjectProxy::setObject (Object *obj)
   {
-    emit sendFinalize ();
+    finalize ();
     init (obj);
   }
 
   void
   ObjectProxy::update (int pId)
   {
     if (octave::thread::is_thread ())
       emit sendUpdate (pId);
     else if (m_object)
       m_object->slotUpdate (pId);
   }
 
   void
   ObjectProxy::finalize (void)
   {
-    emit sendFinalize ();
-    init (nullptr);
+    if (! m_object)
+      return;
+
+    Qt::ConnectionType t = Qt::BlockingQueuedConnection;
+
+    if (QThread::currentThread () == QCoreApplication::instance ()->thread ())
+      t = Qt::DirectConnection;
+
+    QMetaObject::invokeMethod (m_object, "slotFinalize", t);
   }
 
   void
   ObjectProxy::redraw (void)
   {
     emit sendRedraw ();
   }
 
@@ -135,28 +138,12 @@ namespace QtHandles
     Qt::ConnectionType t = Qt::BlockingQueuedConnection;
 
     if (QThread::currentThread () == QCoreApplication::instance ()->thread ())
       t = Qt::DirectConnection;
 
     QMetaObject::invokeMethod (m_object, "slotGetPixels", t,
                                Q_RETURN_ARG (uint8NDArray, retval));
 
-    // FIXME: The following may fail for obscure reasons, see bug #53328.
-    //        In absence of a solution, we retry twice before calling error().
-    if (! QMetaObject::invokeMethod (m_object, "slotGetPixels", t,
-                                     Q_RETURN_ARG (uint8NDArray, retval)))
-      {
-        octave::sleep (0.1);
-        if (! QMetaObject::invokeMethod (m_object, "slotGetPixels", t,
-                                         Q_RETURN_ARG (uint8NDArray, retval)))
-          {
-            octave::sleep (0.2);
-            if (! QMetaObject::invokeMethod (m_object, "slotGetPixels", t,
-                                             Q_RETURN_ARG (uint8NDArray, retval)))
-              error ("getframe: unable to retrieve figure pixels");
-          }
-      }
-
     return retval;
   }
 
 };
diff --git a/libgui/graphics/ObjectProxy.h b/libgui/graphics/ObjectProxy.h
--- a/libgui/graphics/ObjectProxy.h
+++ b/libgui/graphics/ObjectProxy.h
@@ -48,17 +48,16 @@ namespace QtHandles
     void print (const QString& file_cmd, const QString& term);
     uint8NDArray get_pixels (void);
 
     Object * object (void) { return m_object; }
     void setObject (Object *obj);
 
   signals:
     void sendUpdate (int pId);
-    void sendFinalize (void);
     void sendRedraw (void);
     void sendShow (void);
     void sendPrint (const QString& file_cmd, const QString& term);
 
   private:
     void init (Object *obj);
 
   private:
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -6107,17 +6107,17 @@ axes::properties::update_ticklength (voi
   ticklen(0) *= std::max (bbox(2), bbox(3));
   ticklen(1) *= std::max (bbox(2), bbox(3));
 
   xticklen = ticksign * (mode2D ? ticklen(0) : ticklen(1));
   yticklen = ticksign * (mode2D ? ticklen(0) : ticklen(1));
   zticklen = ticksign * (mode2D ? ticklen(0) : ticklen(1));
 
   double offset = get___fontsize_points__ () / 2;
-  
+
   xtickoffset = (mode2D ? std::max (0., xticklen) : std::abs (xticklen)) +
                 (xstate == AXE_HORZ_DIR ? offset*1.5 : offset);
   ytickoffset = (mode2D ? std::max (0., yticklen) : std::abs (yticklen)) +
                 (ystate == AXE_HORZ_DIR ? offset*1.5 : offset);
   ztickoffset = (mode2D ? std::max (0., zticklen) : std::abs (zticklen)) +
                 (zstate == AXE_HORZ_DIR ? offset*1.5 : offset);
 
   update_xlabel_position ();
@@ -10404,17 +10404,16 @@ uicontextmenu::~uicontextmenu (void)
 %!   hctx1 = uicontextmenu ("parent", hf);
 %!   hctx2 = uicontextmenu ("parent", hf);
 %!   set (hf, "uicontextmenu", hctx2);
 %!   set (hax, "uicontextmenu", hctx2);
 %!   assert (get (hf, "uicontextmenu"), hctx2);
 %!   assert (get (hax, "uicontextmenu"), hctx2);
 %!   assert (get (hf, "children"), [hctx2; hctx1; hax]);
 %!   delete (hctx2);
-%!   pause (.005);
 %!   assert (get (hf, "uicontextmenu"), []);
 %!   assert (get (hax, "uicontextmenu"), []);
 %!   assert (get (hf, "children"), [hctx1; hax]);
 %!   set (hf, "uicontextmenu", hctx1);
 %!   assert (get (hf, "uicontextmenu"), hctx1);
 %!   set (hf, "uicontextmenu", []);
 %!   assert (get (hf, "uicontextmenu"), []);
 %!   assert (get (hf, "children"), [hctx1; hax]);
@@ -13155,34 +13154,20 @@ undocumented.
 
           graphics_handle h = gcf ();
 
           if (! h.ok ())
             error ("drawnow: nothing to draw");
 
           graphics_object go = gh_manager::get_object (h);
 
-          // FIXME: when using qt toolkit the print_figure method
-          // returns immediately and Canvas::print doesn't have
-          // enough time to lock the mutex before we lock it here
-          // again.  We thus wait 50 ms (which may not be enough) to
-          // give it a chance: see http://octave.1599824.n4.nabble.com/Printing-issues-with-Qt-toolkit-tp4673270.html
-
           gh_manager::unlock ();
 
           go.get_toolkit ().print_figure (go, term, file, debug_file);
 
-          // FIXME: In ObjectProxy.cc ObjectProxy::init
-          // we now use connect (..., Qt::BlockingQueuedConnection)
-          // which should make the sleep unnecessary.
-          // See bug #44463 and #48519
-          // Remove it and the FIXME block above after testing.
-
-          // octave_sleep (0.05);
-
           gh_manager::lock ();
         }
     }
 
   return ovl ();
 }
 
 DEFUN (addlistener, args, ,
