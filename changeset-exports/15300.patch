# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1346859681 14400
#      Wed Sep 05 11:41:21 2012 -0400
# Node ID fd27e10b9b055c96ecdaedf15a248139cb698a93
# Parent  8bd5c490b787ba5df78a06ab2ca5281aeae4eaaa
pass QString by const reference instead of value

* files-dockwidget.cc, files-dockwidget.h, history-dockwidget.h,
file-editor-interface.h, file-editor-tab.cc, file-editor-tab.h,
file-editor.cc, file-editor.h, main-window.cc, main-window.h,
octave-qt-event-listener.h, parser.cc, parser.h, webinfo.cc,
webinfo.h, resource-manager.cc, resource-manager.h: For all functions
that take QString arguments, use "const Qstring&" instead of passing
QString by value.

diff --git a/libgui/src/files-dockwidget.cc b/libgui/src/files-dockwidget.cc
--- a/libgui/src/files-dockwidget.cc
+++ b/libgui/src/files-dockwidget.cc
@@ -114,17 +114,17 @@ void
 files_dock_widget::item_double_clicked (const QModelIndex & index)
 {
   // Retrieve the file info associated with the model index.
   QFileInfo fileInfo = _file_system_model->fileInfo (index);
   display_directory (fileInfo.absoluteFilePath ());
 }
 
 void
-files_dock_widget::set_current_directory (QString currentDirectory)
+files_dock_widget::set_current_directory (const QString& currentDirectory)
 {
   display_directory (currentDirectory);
 }
 
 void
 files_dock_widget::handle_directory_entered ()
 {
   display_directory (_current_directory->text ());
@@ -134,17 +134,17 @@ void
 files_dock_widget::do_up_directory ()
 {
   QDir dir = QDir (_file_system_model->filePath (_file_tree_view->rootIndex ()));
   dir.cdUp ();
   display_directory (dir.absolutePath ());
 }
 
 void
-files_dock_widget::display_directory (QString directory)
+files_dock_widget::display_directory (const QString& directory)
 {
   QFileInfo fileInfo (directory);
   if (fileInfo.exists ())
     {
       if (fileInfo.isDir ())
         {
           _file_tree_view->setRootIndex (_file_system_model->
                                         index (fileInfo.absoluteFilePath ()));
diff --git a/libgui/src/files-dockwidget.h b/libgui/src/files-dockwidget.h
--- a/libgui/src/files-dockwidget.h
+++ b/libgui/src/files-dockwidget.h
@@ -52,35 +52,35 @@ public:
 public slots:
   /** Slot for handling a change in directory via double click. */
   void item_double_clicked (const QModelIndex & index);
 
   /** Slot for handling the up-directory button in the toolbar. */
   void do_up_directory ();
 
   /** Sets the current directory being displayed. */
-  void set_current_directory (QString currentDirectory);
+  void set_current_directory (const QString& currentDirectory);
 
   /** Accepts user input a the line edit for the current directory. */
   void handle_directory_entered ();
 
-  void display_directory (QString directory);
+  void display_directory (const QString& directory);
 
   /** Tells the widget to react on changed settings. */
   void notice_settings ();
 
   /** Slot to steer changing visibility from outside. */
   void handle_visibility_changed (bool visible);
 
 signals:
   /** Emitted, whenever the user requested to open a file. */
-  void open_file (QString fileName);
+  void open_file (const QString& fileName);
 
   /** Emitted, whenever the currently displayed directory changed. */
-  void displayed_directory_changed (QString directory);
+  void displayed_directory_changed (const QString& directory);
 
   /** Custom signal that tells if a user has clicke away that dock widget. */
   void active_changed (bool active);
 
 protected:
   void closeEvent (QCloseEvent *event);
 
 private:
diff --git a/libgui/src/history-dockwidget.h b/libgui/src/history-dockwidget.h
--- a/libgui/src/history-dockwidget.h
+++ b/libgui/src/history-dockwidget.h
@@ -43,20 +43,20 @@ public:
   void event_reject (octave_event *e);
 
 public slots:
   void handle_visibility_changed (bool visible);
   void request_history_model_update ();
   void reset_model ();
 
 signals:
-  void information (QString message);
+  void information (const QString& message);
 
   /** Emitted, whenever the user double-clicked a command in the history. */
-  void command_double_clicked (QString command);
+  void command_double_clicked (const QString& command);
 
   /** Custom signal that tells if a user has clicked away that dock widget. */
   void active_changed (bool active);
 protected:
   void closeEvent (QCloseEvent *event);
 private slots:
   void handle_double_click (QModelIndex modelIndex);
 
diff --git a/libgui/src/m-editor/file-editor-interface.h b/libgui/src/m-editor/file-editor-interface.h
--- a/libgui/src/m-editor/file-editor-interface.h
+++ b/libgui/src/m-editor/file-editor-interface.h
@@ -52,17 +52,17 @@ class file_editor_interface : public QDo
     virtual QToolBar *toolbar () = 0;
 
     virtual void handle_entered_debug_mode () = 0;
     virtual void handle_quit_debug_mode () = 0;
 
   public slots:
     virtual void request_new_file () = 0;
     virtual void request_open_file () = 0;
-    virtual void request_open_file (QString fileName) = 0;
+    virtual void request_open_file (const QString& fileName) = 0;
 
   signals:
       void active_changed (bool active);
 
   protected:
     QTerminal* _terminal;
     main_window* _main_window;
 
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -193,17 +193,17 @@ file_editor_tab::closeEvent (QCloseEvent
       else
         {
           event->accept();
         }
     }
 }
 
 void
-file_editor_tab::set_file_name (QString fileName)
+file_editor_tab::set_file_name (const QString& fileName)
 {
   _file_name = fileName;
   update_lexer ();
   update_tracked_file ();
 }
 
 void
 file_editor_tab::handle_margin_clicked(int margin, int line,
@@ -431,17 +431,17 @@ file_editor_tab::update_tracked_file ()
   if (!trackedFiles.isEmpty ())
     _file_system_watcher.removePaths (trackedFiles);
 
   if (_file_name != UNNAMED_FILE)
     _file_system_watcher.addPath (_file_name);
 }
 
 int
-file_editor_tab::check_file_modified (QString msg, int cancelButton)
+file_editor_tab::check_file_modified (const QString& msg, int cancelButton)
 {
   int decision = QMessageBox::Yes;
   if (_edit_area->isModified ())
     {
       // file is modified but not saved, aks user what to do
       decision = QMessageBox::warning (this,
                                        msg,
                                        tr ("The file %1\n"
@@ -621,17 +621,17 @@ file_editor_tab::open_file ()
     }
   else
     {
       return false;
     }
 }
 
 void
-file_editor_tab::load_file (QString fileName)
+file_editor_tab::load_file (const QString& fileName)
 {
   if (!_file_editor->isVisible ())
     {
       _file_editor->show ();
     }
 
   QFile file (fileName);
   if (!file.open (QFile::ReadOnly))
@@ -670,17 +670,17 @@ file_editor_tab::new_file ()
 }
 
 bool file_editor_tab::save_file()
 {
   return save_file (_file_name);
 }
 
 bool
-file_editor_tab::save_file (QString saveFileName)
+file_editor_tab::save_file (const QString& saveFileName)
 {
   // it is a new file with the name "<unnamed>" -> call saveFielAs
   if (saveFileName == UNNAMED_FILE || saveFileName.isEmpty ())
     {
       return save_file_as();
     }
 
   QStringList watched_files = _file_system_watcher.files();
@@ -772,17 +772,17 @@ file_editor_tab::run_file ()
   _file_editor->terminal ()->sendText (QString ("cd \'%1\'\n%2\n")
     .arg(path).arg (function_name));
   // TODO: Sending a run event crashes for long scripts. Find out why.
   //  octave_link::instance ()
   //      ->post_event (new octave_run_file_event (*this, _file_name.toStdString ()));
 }
 
 void
-file_editor_tab::file_has_changed (QString fileName)
+file_editor_tab::file_has_changed (const QString& fileName)
 {
   Q_UNUSED (fileName);
   if (QFile::exists (_file_name))
     {
       // Prevent popping up multiple message boxes when the file has
       // been changed multiple times.
       static bool alreadyAsking = false;
       if (!alreadyAsking)
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -60,41 +60,41 @@ public slots:
   void paste ();
   void undo ();
   void redo ();
   void set_debugger_position (int line);
 
   void set_modified (bool modified = true);
 
   bool open_file ();
-  void load_file (QString fileName);
+  void load_file (const QString& fileName);
   void new_file ();
   bool save_file ();
-  bool save_file(QString saveFileName);
+  bool save_file (const QString& saveFileName);
   bool save_file_as();
   void run_file ();
 
-  void file_has_changed (QString fileName);
+  void file_has_changed (const QString& fileName);
 
 signals:
-  void file_name_changed (QString fileName);
+  void file_name_changed (const QString& fileName);
   void editor_state_changed ();
   void close_request ();
 
 protected:
   void closeEvent (QCloseEvent *event);
-  void set_file_name (QString fileName);
+  void set_file_name (const QString& fileName);
 
 private:
   void update_lexer ();
   void request_add_breakpoint (int line);
   void request_remove_breakpoint (int line);
 
   void update_tracked_file ();
-  int check_file_modified (QString msg, int cancelButton);
+  int check_file_modified (const QString& msg, int cancelButton);
   void do_comment_selected_text (bool comment);
 
   file_editor *         _file_editor;
   QsciScintilla *       _edit_area;
 
   QString               _file_name;
   QString               _file_name_short;
 
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -106,17 +106,17 @@ file_editor::request_open_file ()
         {
           // If no file was loaded, remove the tab again.
           _tab_widget->removeTab (_tab_widget->indexOf (fileEditorTab));
         }
     }
 }
 
 void
-file_editor::request_open_file (QString fileName)
+file_editor::request_open_file (const QString& fileName)
 {
   if (!isVisible ())
     {
       show ();
     }
 
   file_editor_tab *fileEditorTab = new file_editor_tab (this);
   if (fileEditorTab)
@@ -274,17 +274,17 @@ void
 file_editor::request_find ()
 {
   file_editor_tab *_active_file_editor_tab = active_editor_tab ();
   if (_active_file_editor_tab)
     _active_file_editor_tab->find ();
 }
 
 void
-file_editor::handle_file_name_changed (QString fileName)
+file_editor::handle_file_name_changed (const QString& fileName)
 {
   QObject *senderObject = sender ();
   file_editor_tab *fileEditorTab
     = dynamic_cast<file_editor_tab*> (senderObject);
   if (fileEditorTab)
     {
       for(int i = 0; i < _tab_widget->count (); i++)
         {
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -45,31 +45,31 @@ enum editor_markers
 
 class file_editor : public file_editor_interface
 {
 Q_OBJECT
 
 public:
   file_editor (QTerminal *terminal, main_window *m);
   ~file_editor ();
-  void loadFile (QString fileName);
+  void loadFile (const QString& fileName);
 
   QTerminal *       terminal ();
   main_window *     get_main_window ();
 
   QMenu *           debug_menu ();
   QToolBar *        toolbar ();
 
   void handle_entered_debug_mode ();
   void handle_quit_debug_mode ();
 
 public slots:
   void request_new_file ();
   void request_open_file ();
-  void request_open_file (QString fileName);
+  void request_open_file (const QString& fileName);
 
   void request_undo ();
   void request_redo ();
   void request_copy ();
   void request_cut ();
   void request_paste ();
   void request_save_file ();
   void request_save_file_as ();
@@ -83,17 +83,17 @@ public slots:
   void request_next_breakpoint ();
   void request_previous_breakpoint ();
   void request_remove_breakpoint ();
 
   void request_comment_selected_text ();
   void request_uncomment_selected_text ();
   void request_find ();
 
-  void handle_file_name_changed (QString fileName);
+  void handle_file_name_changed (const QString& fileName);
   void handle_tab_close_request (int index);
   void handle_tab_close_request ();
   void active_tab_changed (int index);
   void handle_editor_state_changed ();
 
 private:
   void construct ();
   void add_file_editor_tab(file_editor_tab *f);
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -80,24 +80,24 @@ main_window::new_file ()
 void
 main_window::open_file ()
 {
   _file_editor->request_open_file ();
   focus_editor ();
 }
 
 void
-main_window::open_file (QString file_name)
+main_window::open_file (const QString& file_name)
 {
   _file_editor->request_open_file (file_name);
   focus_editor ();
 }
 
 void
-main_window::report_status_message (QString statusMessage)
+main_window::report_status_message (const QString& statusMessage)
 {
   _status_bar->showMessage (statusMessage, 1000);
 }
 
 void
 main_window::handle_save_workspace_request ()
 {
   QString selectedFile =
@@ -135,17 +135,17 @@ main_window::handle_clear_workspace_requ
 void
 main_window::handle_clear_history_request()
 {
   octave_link::instance ()
       ->post_event (new octave_clear_history_event (*this));
 }
 
 void
-main_window::handle_command_double_clicked (QString command)
+main_window::handle_command_double_clicked (const QString& command)
 {
   _terminal->sendText (command);
   _terminal->setFocus ();
 }
 
 void
 main_window::open_bug_tracker_page ()
 {
@@ -211,17 +211,17 @@ main_window::prepare_for_quit ()
 
 void
 main_window::reset_windows ()
 {
   // TODO: Implement.
 }
 
 void
-main_window::current_working_directory_has_changed (QString directory)
+main_window::current_working_directory_has_changed (const QString& directory)
 {
   if (_current_directory_combo_box->count () > 31)
     {
       _current_directory_combo_box->removeItem (0);
     }
   _current_directory_combo_box->addItem (directory);
   int index = _current_directory_combo_box->findText (directory);
   _current_directory_combo_box->setCurrentIndex (index);
@@ -239,17 +239,17 @@ main_window::change_current_working_dire
     {
       octave_link::instance ()
           ->post_event (new octave_change_directory_event (*this,
                         selectedDirectory.toStdString ()));
     }
 }
 
 void
-main_window::set_current_working_directory (QString directory)
+main_window::set_current_working_directory (const QString& directory)
 {
   octave_link::instance ()
       ->post_event (new octave_change_directory_event (*this,
                     directory.toStdString ()));
 }
 
 void
 main_window::current_working_directory_up ()
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -78,36 +78,36 @@ Q_OBJECT public:
     return _files_dock_widget;
   }
   bool is_closing () { return _closing; }
 
 signals:
   void settings_changed ();
 
 public slots:
-  void report_status_message (QString statusMessage);
+  void report_status_message (const QString& statusMessage);
   void handle_save_workspace_request ();
   void handle_load_workspace_request ();
   void handle_clear_workspace_request ();
   void handle_clear_history_request ();
-  void handle_command_double_clicked (QString command);
+  void handle_command_double_clicked (const QString& command);
   void new_file ();
   void open_file ();
-  void open_file (QString file_name);
+  void open_file (const QString& file_name);
   void open_bug_tracker_page ();
   void open_agora_page ();
   void open_octave_forge_page ();
   void process_settings_dialog_request ();
   void show_about_octave ();
   void notice_settings ();
   void prepare_for_quit ();
   void reset_windows ();
-  void current_working_directory_has_changed (QString directory);
+  void current_working_directory_has_changed (const QString& directory);
   void change_current_working_directory ();
-  void set_current_working_directory (QString directory);
+  void set_current_working_directory (const QString& directory);
   void current_working_directory_up ();
 
   void focus_command_window ();
   void focus_command_history ();
   void focus_current_directory ();
   void focus_workspace ();
   void focus_editor ();
   void focus_documentation ();
diff --git a/libgui/src/octave-qt-event-listener.h b/libgui/src/octave-qt-event-listener.h
--- a/libgui/src/octave-qt-event-listener.h
+++ b/libgui/src/octave-qt-event-listener.h
@@ -36,14 +36,14 @@ class octave_qt_event_listener
 
     void current_directory_has_changed (std::string directory);
     void about_to_exit ();
 
     void entered_debug_mode ();
     void quit_debug_mode ();
 
   signals:
-    void current_directory_has_changed_signal (QString directory);
+    void current_directory_has_changed_signal (const QString& directory);
     void entered_debug_mode_signal ();
     void quit_debug_mode_signal ();
 };
 
 #endif // OCTAVEQTEVENTLISTENER_H
diff --git a/libgui/src/qtinfo/parser.cc b/libgui/src/qtinfo/parser.cc
--- a/libgui/src/qtinfo/parser.cc
+++ b/libgui/src/qtinfo/parser.cc
@@ -36,17 +36,17 @@ parser::parser(QObject *parent)
   _compressors_map.insert ("bz2",  "bzip2 -dc \"%1\"");
   _compressors_map.insert ("gz",   "gzip -dc \"%1\"");
   _compressors_map.insert ("lzma", "lzma -dc \"%1\"");
   _compressors_map.insert ("xz",   "xz -dc \"%1\"");
   _compressors_map.insert ("Z",    "gunzip -c \"%1\"");
 }
 
 void
-parser::set_info_path (QString infoPath)
+parser::set_info_path (const QString& infoPath)
 {
   this->_info_path = infoPath;
 
   _info_files.clear ();
 
   QFileInfo info (infoPath);
 
   QString path = info.absolutePath ();
@@ -95,30 +95,32 @@ parser::open_file (QFileInfo & file_info
         return NULL;
       iodevice = io;
     }
 
   return iodevice;
 }
 
 int
-parser::is_ref (QString node)
+parser::is_ref (const QString& node)
 {
   if (_ref_map.contains (node))
     {
       node_position ref = _ref_map [node];
 
       return ref.pos-_node_map [ref._node_name].pos;
     }
   return -1;
 }
 
 QString
-parser::search_node (QString node)
+parser::search_node (const QString& node_arg)
 {
+  QString node = node_arg;
+
   QFileInfo file_info;
   QString ref;
 
   if (_ref_map.contains (node))
     {
       ref = node;
       node = _ref_map [ref]._node_name;
     }
@@ -147,17 +149,17 @@ parser::search_node (QString node)
       io->close ();
       delete io;
     }
 
   return QString ();
 }
 
 QString
-parser::search_node (QString node, QIODevice *io)
+parser::search_node (const QString& node, QIODevice *io)
 {
   while (!io->atEnd ())
     {
       QString text = get_next_node (io);
       if(node == get_node_name (text))
         {
           return text;
         }
@@ -181,72 +183,72 @@ parser::get_next_node (QIODevice *io)
         {
           text.append (line);
         }
     }
   return text;
 }
 
 static QString
-get_first_line (QString text)
+get_first_line (const QString& text)
 {
   int n = text.indexOf ("\n");
 
   if (n < 0)
     {
       return QString ();
     }
 
   QString first_line = text.left (n);
   return first_line;
 }
 
 static QString
-parser_node (QString text, QString node_name)
+parser_node (const QString& text, const QString& node_name)
 {
   QString firstLine = get_first_line (text);
   QStringList nodes = firstLine.split (",");
   for (int i = 0;i < nodes.size (); i++)
     {
       QString node = nodes.at (i).trimmed ();
 
       if (node.startsWith (node_name))
         {
           return node.remove (0, node_name.size ()).trimmed ();
         }
     }
   return QString ();
 }
 
 QString
-parser::get_node_name (QString text)
+parser::get_node_name (const QString& text)
 {
   return parser_node (text, "Node:");
 }
 
 QString
-parser::get_node_up (QString text)
+parser::get_node_up (const QString& text)
 {
   return parser_node (text, "Up:");
 }
 
 QString
-parser::get_node_next (QString text)
+parser::get_node_next (const QString& text)
 {
   return parser_node (text, "Next:");
 }
 
 QString
-parser::get_node_prev (QString text)
+parser::get_node_prev (const QString& text)
 {
   return parser_node (text, "Prev:");
 }
 
 static void
-replace_links (QString &text)
+replace_links (QString& text)
 {
   QRegExp re ("(\\*[N|n]ote|\n\\*)([ |\n]+)([^:]+):([^:\\.,]*)([:,\\.])");
   int i = 0, f;
 
   while ( (i = re.indexIn (text,i)) != -1)
     {
       QString type     = re.cap (1);
       QString note     = re.cap (3);
@@ -277,47 +279,50 @@ replace_links (QString &text)
       href += re.cap (2) + "<a href='" + url_link + "'>" + note + ":" + link + re.cap (5) + "</a>";
       f = re.matchedLength ();
       text.replace (i,f,href);
       i += href.size ();
     }
 }
 
 static void
-replace_colons (QString &text)
+replace_colons (QString& text)
 {
   QRegExp re ("`([^']+)'");
   int i = 0, f;
   while ( (i = re.indexIn (text, i)) != -1)
     {
       QString t = re.cap (1);
       QString bold = "<b>`" + t + "</b>'";
 
       f = re.matchedLength ();
       text.replace (i,f,bold);
       i += bold.size ();
     }
 }
 
 static void
-info_to_html (QString &text)
+info_to_html (QString& text)
 {
   text.replace ("&", "&amp;");
   text.replace ("<", "&lt;");
   text.replace (">", "&gt;");
 
   text.replace ("\n* Menu:", "\n<b>Menu:</b>");
   text.replace ("*See also:*", "<b>See also:</b>");
   replace_colons (text);
   replace_links (text);
 }
 
 QString
-parser::node_text_to_html (QString text, int anchorPos, QString anchor)
+parser::node_text_to_html (const QString& text_arg, int anchorPos,
+                           const QString& anchor)
 {
+  QString text = text_arg;
+
   QString nodeName = get_node_name (text);
   QString nodeUp   = get_node_up (text);
   QString nodeNext = get_node_next (text);
   QString nodePrev = get_node_prev (text);
 
   if (anchorPos > -1)
     {
       QString text1 = text.left (anchorPos);
@@ -474,33 +479,33 @@ parser::seek (QIODevice *io, int pos)
   while (!io->atEnd () && pos > 0)
     {
       io->getChar (&ch);
       pos--;
     }
 }
 
 static void
-replace (QString &text, QRegExp re, QString after)
+replace (QString& text, const QRegExp& re, const QString& after)
 {
   int pos = 0;
 
   while ( (pos = re.indexIn (text, pos)) != -1)
     {
       QString cap = text.mid (pos,re.matchedLength ());
       QString a (after);
       a = a.arg (cap);
       text.remove (pos, re.matchedLength ());
       text.insert (pos, a);
       pos += a.size ();
     }
 }
 
 QString
-parser::global_search (QString text, int max_founds)
+parser::global_search (const QString& text, int max_founds)
 {
   QString results;
   QStringList words = text.split (" ",QString::SkipEmptyParts);
 
   QString re_program ("(" + words.at (0));
   for (int i = 1; i < words.size (); i++)
     {
       re_program += "|" + words.at (i);
diff --git a/libgui/src/qtinfo/parser.h b/libgui/src/qtinfo/parser.h
--- a/libgui/src/qtinfo/parser.h
+++ b/libgui/src/qtinfo/parser.h
@@ -40,30 +40,31 @@
  */
 class parser
     : public QObject
 {
   Q_OBJECT
 
 public:
   parser (QObject *parent = 0);
-  void set_info_path (QString _info_path);
+  void set_info_path (const QString& _info_path);
   QString get_info_path ();
-  QString search_node (QString node);
-  QString global_search (QString text, int maxFounds);
+  QString search_node (const QString& node);
+  QString global_search (const QString& text, int maxFounds);
 
   /** Checks if this node is reference. If node is reference, it will be returned its position
     * in text, else  it will be returned -1.
     */
-  int is_ref (QString node);
+  int is_ref (const QString& node);
 
   /**Translates text of node to Html. If anchorPos is not -1, then anchor is inserted in that
     * position.
     */
-  QString node_text_to_html (QString text, int anchorPos=-1, QString anchor=QString());
+  QString node_text_to_html (const QString& text, int anchorPos = -1,
+                             const QString& anchor = QString ());
 
 private:
   struct node_position
   {
     QString _node_name;
     int pos;
   };
 
@@ -73,22 +74,22 @@ private:
   };
 
   struct info_file_item
   {
     QFileInfo file_info;
     int real_size;
   };
 
-  QString search_node (QString node, QIODevice * io);
+  QString search_node (const QString& node, QIODevice * io);
   QString get_next_node (QIODevice * io);
-  QString get_node_name (QString text);
-  QString get_node_up (QString text);
-  QString get_node_next (QString text);
-  QString get_node_prev (QString text);
+  QString get_node_name (const QString& text);
+  QString get_node_up (const QString& text);
+  QString get_node_next (const QString& text);
+  QString get_node_prev (const QString& text);
 
   /** Parses info files and gets map of node positions.*/
   void parse_info_map();
 
   /** Open info files and uncompress them. */
   QIODevice *open_file(QFileInfo & fileInfo);
 
   /** Calculates real position of nodes.
diff --git a/libgui/src/qtinfo/webinfo.cc b/libgui/src/qtinfo/webinfo.cc
--- a/libgui/src/qtinfo/webinfo.cc
+++ b/libgui/src/qtinfo/webinfo.cc
@@ -26,17 +26,17 @@
 #include <QHBoxLayout>
 
 #include "file-ops.h"
 #include "help.h"
 #include "defaults.h"
 
 
 webinfo::webinfo (QWidget *parent)
-  :QWidget (parent)
+  : QWidget (parent)
 {
   _font_web = font ();
 
   QVBoxLayout *layout = new QVBoxLayout ();
   layout->setMargin (0);
   setLayout (layout);
 
   QHBoxLayout *hboxLayout = new QHBoxLayout ();
@@ -85,24 +85,24 @@ webinfo::webinfo (QWidget *parent)
   connect (_search_line_edit, SIGNAL (returnPressed ()), this, SLOT (search ()));
 
   resize (500, 300);
 
   set_info_path (QString::fromStdString (Vinfo_file));
 }
 
 void
-webinfo::set_info_path (QString info_path)
+webinfo::set_info_path (const QString& info_path)
 {
   _parser.set_info_path (info_path);
   load_node ("Top");
 }
 
 void
-webinfo::load_node (QString node_name)
+webinfo::load_node (const QString& node_name)
 {
   //Check if node has been already opened.
   for (int i = 0;i < _tab_bar->count (); i++)
     {
       if (node_name == _tab_bar->tabText (i))
         {
           _tab_bar->setCurrentIndex (i);
           return;
@@ -137,17 +137,17 @@ webinfo::current_tab_changed (int index)
 
   if (_text_browser->font () != _font_web)
     {
       _text_browser->setFont (_font_web);
     }
 }
 
 QTextBrowser *
-webinfo::addNewTab(QString name)
+webinfo::addNewTab (const QString& name)
 {
   _text_browser = new QTextBrowser (this);
   _text_browser->setOpenLinks (false);
   _text_browser->show ();
 
   connect (_text_browser, SIGNAL (anchorClicked (const QUrl &)), this, SLOT (link_clicked (const QUrl &)) );
   disconnect(_tab_bar, SIGNAL (currentChanged(int)), this, SLOT (current_tab_changed (int)));
 
diff --git a/libgui/src/qtinfo/webinfo.h b/libgui/src/qtinfo/webinfo.h
--- a/libgui/src/qtinfo/webinfo.h
+++ b/libgui/src/qtinfo/webinfo.h
@@ -26,21 +26,21 @@
 #include <QCheckBox>
 #include <QToolButton>
 
 class webinfo : public QWidget
 {
   Q_OBJECT
 public:
   webinfo (QWidget *parent = 0);
-  void set_info_path (QString info_path);
-  void load_node (QString node_name);
+  void set_info_path (const QString& info_path);
+  void load_node (const QString& node_name);
 
 public slots:
-  void link_clicked (const QUrl &link);
+  void link_clicked (const QUrl& link);
   void current_tab_changed (int index);
   void close_tab ();
   void search ();
   void zoom_in ();
   void zoom_out ();
 
 private:
   QTextBrowser        *_text_browser;
@@ -50,11 +50,11 @@ private:
   QLineEdit           *_search_line_edit;
   QCheckBox           *_search_check_box;
   QToolButton         *_zoom_in_button;
   QToolButton         *_zoom_out_button;
 
   parser              _parser;
   QFont               _font_web;
 
-  QTextBrowser *addNewTab (QString name);
+  QTextBrowser *addNewTab (const QString& name);
   void closeTab(int index);
 };
diff --git a/libgui/src/resource-manager.cc b/libgui/src/resource-manager.cc
--- a/libgui/src/resource-manager.cc
+++ b/libgui/src/resource-manager.cc
@@ -48,17 +48,17 @@ resource_manager::resource_manager (void
 }
 
 resource_manager::~resource_manager (void)
 {
   delete settings;
 }
 
 QString
-resource_manager::find_translator_file (QString language)
+resource_manager::find_translator_file (const QString& language)
 {
   // TODO: Quick hack to be able to test language files.
   return QString ("../languages/%1.qm").arg (language);
 }
 
 bool
 resource_manager::instance_ok (void)
 {
@@ -122,17 +122,17 @@ resource_manager::do_reload_settings (vo
    }
   else
      first_run = false;
 
   do_set_settings (settings_file);
 }
 
 void
-resource_manager::do_set_settings (QString file)
+resource_manager::do_set_settings (const QString& file)
 {
   delete settings;
   settings = new QSettings (file, QSettings::IniFormat);
 }
 
 bool
 resource_manager::do_is_first_run (void)
 {
diff --git a/libgui/src/resource-manager.h b/libgui/src/resource-manager.h
--- a/libgui/src/resource-manager.h
+++ b/libgui/src/resource-manager.h
@@ -49,23 +49,23 @@ public:
   }
 
   static void reload_settings (void)
   {
     if (instance_ok ())
       instance->do_reload_settings ();
   }
 
-  static void set_settings (QString file)
+  static void set_settings (const QString& file)
   {
     if (instance_ok ())
       instance->do_set_settings (file);
   }
 
-  static QString find_translator_file (QString language);
+  static QString find_translator_file (const QString& language);
 
   static void update_network_settings (void)
   {
     if (instance_ok ())
       instance->do_update_network_settings ();
   }
 
   static bool is_first_run (void)
@@ -96,16 +96,16 @@ private:
   bool first_run;
 
   QSettings *do_get_settings (void);
 
   QString do_get_home_path (void);
 
   void do_reload_settings (void);
 
-  void do_set_settings (QString file);
+  void do_set_settings (const QString& file);
 
   void do_update_network_settings (void);
 
   bool do_is_first_run (void);
 };
 
 #endif // RESOURCEMANAGER_H
