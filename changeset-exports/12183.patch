# HG changeset patch
# User Kai Habel <kai.habel@gmx.de>
# Date 1296147499 -3600
#      Thu Jan 27 17:58:19 2011 +0100
# Node ID b4d26c65e7e65005aea87879d6b28b111f27eb87
# Parent  99b00a9a5147a79cca6e9533fd672beed00ba27d
Allow ui file function to work if gnuplot is the selected toolkit and fltk is available

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2011-01-27  Kai Habel  <kai.habel@gmx.de>
+
+	* plot/uigetfile.m, plot/uiputfile.m, plot/uigetdir.m: Check
+	for __fltk_uigetfile__.
+
 2011-01-27  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.am (check-missing-semicolon): New rule.
 
 2011-01-26  Rik  <octave@nomad.inbox5.com>
 
 	* scripts/general/interp1.m, scripts/general/interp2.m,
 	scripts/general/interp3.m, scripts/general/interpn.m: Use em-dash
diff --git a/scripts/plot/uigetdir.m b/scripts/plot/uigetdir.m
--- a/scripts/plot/uigetdir.m
+++ b/scripts/plot/uigetdir.m
@@ -28,21 +28,21 @@
 ## Author: Kai Habel
 
 function dirname = uigetdir (init_path = pwd, dialog_name = "Choose directory?")
 
   if (nargin > 2)
     print_usage ();
   endif
 
-  if (!ischar(init_path) || !ischar(dialog_name))
+  if (!ischar (init_path) || !ischar (dialog_name))
     error ("uigetdir: INIT_PATH and DIALOG_NAME must be string arguments");
   endif
 
-  if (any (strcmp (available_graphics_toolkits (), "fltk")))
+  if (exist ("__fltk_uigetfile__") == 3)
       if (!isdir (init_path))
         init_path = fileparts (init_path);
       endif
       dirname = __fltk_uigetfile__ ("", dialog_name, init_path, [240, 120], "dir");
   else
     error ("uigetdir: fltk graphics toolkit required");
   endif
 
diff --git a/scripts/plot/uigetfile.m b/scripts/plot/uigetfile.m
--- a/scripts/plot/uigetfile.m
+++ b/scripts/plot/uigetfile.m
@@ -145,17 +145,17 @@ function [retfile, retpath, retindex] = 
           error ("uigetfile: unknown argument");
         endif
       endfor
     endif
   else
     error ("uigetfile: number of input arguments must be less than eight");
   endif
 
-  if (any (cellfun(@(x)strcmp (x, "fltk"), available_graphics_toolkits ())))
+  if (exist("__fltk_uigetfile__") == 3)
     [retfile, retpath, retindex] = __fltk_uigetfile__ (outargs{:});
   else
     error ("uigetfile: fltk graphics toolkit required");
   endif
 
 endfunction
 
 %!demo
diff --git a/scripts/plot/uiputfile.m b/scripts/plot/uiputfile.m
--- a/scripts/plot/uiputfile.m
+++ b/scripts/plot/uiputfile.m
@@ -83,17 +83,17 @@ function [retfile, retpath, retindex] = 
     if (nargin > 2)
       outargs{3} = varargin{3};
     endif
 
   else
     error ("uiputfile: number of input arguments must be less than four");
   endif
 
-  if (any (cellfun(@(x)strcmp (x, "fltk"), available_graphics_toolkits ())))
+  if (exist("__fltk_uigetfile__") == 3)
     [retfile, retpath, retindex] = __fltk_uigetfile__ (outargs{:});
   else
     error ("uiputfile: fltk graphics toolkit required");
   endif
 
 endfunction
 
 %!demo
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2011-01-27  Kai Habel  <kai.habel@gmx.de>
+
+	* DLD-FUNCTIONS/__init_fltk__.cc (__fltk_uigetfile__): Remove here.
+	* DLD-FUNCTIONS/__fltk_uigetfile__.cc: New file. 
+	* DLD-FUNCTIONS/module-files: Add __fltk_uigetfile__.cc.
+	Bug #32190.
+
 2011-01-27  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/dlmread.cc (Fdlmread): Skip leading whitespace
 	on each line.
 
 2011-01-27  John W. Eaton  <jwe@octave.org>
 
 	* ov-struct.cc (octave_struct::subsasgn,
diff --git a/src/DLD-FUNCTIONS/__fltk_uigetfile__.cc b/src/DLD-FUNCTIONS/__fltk_uigetfile__.cc
new file mode 100644
--- /dev/null
+++ b/src/DLD-FUNCTIONS/__fltk_uigetfile__.cc
@@ -0,0 +1,127 @@
+/*
+
+Copyright (C) 2010-2011 Kai Habel
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#if defined (HAVE_FLTK)
+
+#include <FL/Fl.H>
+#include <Fl/Fl_File_Chooser.H>
+#include "defun-dld.h"
+#include "file-ops.h"
+
+
+DEFUN_DLD (__fltk_uigetfile__, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} __fltk_uigetfile__ (@dots{})\n\
+Undocumented internal function.\n\
+@end deftypefn")
+{
+  
+  // Expected argument list
+  // args(0) ... FileFilter in fltk format
+  // args(1) ... Title
+  // args(2) ... Default Filename
+  // args(3) ... PostionValue [x,y]
+  // args(4) ... SelectValue "on"/"off"/"dir"/"create"
+
+  octave_value_list fargs, retval;
+
+  std::string file_filter = args(0).string_value();
+  std::string title = args(1).string_value();
+  std::string default_name = args(2).string_value();
+  Matrix pos = args(3).matrix_value();
+
+  int multi_type = Fl_File_Chooser::SINGLE;
+  std::string flabel = "Filename:";
+  
+  std::string multi = args(4).string_value();
+  if (multi == "on")
+    multi_type = Fl_File_Chooser::MULTI;
+  else if (multi == "dir")
+    {
+      multi_type = Fl_File_Chooser::DIRECTORY;
+      flabel = "Directory:";
+    }
+  else if (multi == "create")
+    multi_type = Fl_File_Chooser::CREATE;
+
+  Fl_File_Chooser::filename_label = flabel.c_str ();
+  Fl_File_Chooser *fc = new Fl_File_Chooser (default_name.c_str (), file_filter.c_str (), multi_type, title.c_str ());
+  fc->preview (0);
+
+  if (multi_type == Fl_File_Chooser::CREATE)
+    fc->ok_label ("Save");
+
+  fc->show ();
+
+  while (fc->shown ())
+    Fl::wait ();
+
+  retval(0) = octave_value(0);
+  retval(1) = octave_value(0);
+  retval(2) = octave_value(0);  
+
+  if (fc->value())
+    {
+      int file_count = fc->count ();
+      std::string fname;
+      std::string sep = file_ops::dir_sep_str ();
+      std::size_t idx;
+
+      if (file_count == 1 && multi_type != Fl_File_Chooser::DIRECTORY)
+        {
+          fname = fc->value ();
+          idx = fname.find_last_of (sep);
+          retval(0) = fname.substr (idx + 1);
+        }
+      else
+        {
+          Cell file_cell = Cell(file_count, 1);
+          for (octave_idx_type n = 1; n <= file_count; n++)
+            {
+              fname = fc->value (n);
+              idx = fname.find_last_of (sep);
+              file_cell(n - 1) = fname.substr (idx + 1);
+            }
+          retval(0) = file_cell;
+        }
+
+      if (multi_type == Fl_File_Chooser::DIRECTORY)
+        retval(0) = std::string (fc->value ());
+      else
+        {
+          retval(1) = std::string (fc->directory ()) + sep;
+          retval(2) = fc->filter_value ();
+        }
+    }
+
+  fc->hide ();
+  Fl::flush ();
+  delete fc;
+
+  return retval;
+}
+
+#endif
diff --git a/src/DLD-FUNCTIONS/__init_fltk__.cc b/src/DLD-FUNCTIONS/__init_fltk__.cc
--- a/src/DLD-FUNCTIONS/__init_fltk__.cc
+++ b/src/DLD-FUNCTIONS/__init_fltk__.cc
@@ -2031,108 +2031,10 @@ Mouse inputs have no effect.\n\
 
   if (failed)
     error ("MODE must be one of the strings: \"2D\", \"3D\", or \"None\"");
 
 
   return octave_value(mode_str);
 }
 
-DEFUN_DLD (__fltk_uigetfile__, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} __fltk_uigetfile__ (@dots{})\n\
-Undocumented internal function.\n\
-@end deftypefn")
-{
-  // This function should be called by uigetfile.m
-  // Error checking should be done in uigetfile.m!
-  //
-  // Expected argument list
-  // args(0) ... FileFilter in fltk format
-  // args(1) ... Title
-  // args(2) ... Default Filename
-  // args(3) ... PostionValue [x,y]
-  // args(4) ... SelectValue "on"/"off"/"dir"/"create"
-
-  std::string file_filter, title, default_name, multi;
-  if (args(0).is_string ())
-    file_filter = args(0).string_value();
-
-  if (args(1).is_string ())
-    title = args(1).string_value();
-
-  if (args(2).is_string ())
-    default_name = args(2).string_value();
-
-  if (args(3).is_real_matrix ())
-    Matrix pos = args(3).matrix_value();
-
-  int multi_type = Fl_File_Chooser::SINGLE;
-  std::string flabel = "Filename:";
-  if (args(4).is_string ())
-    {
-      multi = args(4).string_value();
-      if (multi == "on")
-        multi_type = Fl_File_Chooser::MULTI;
-      else if (multi == "dir")
-        {
-          multi_type = Fl_File_Chooser::DIRECTORY;
-          flabel = "Directory:";
-        }
-      else if (multi == "create")
-        multi_type = Fl_File_Chooser::CREATE;
-    }
-
-  Fl_File_Chooser::filename_label = flabel.c_str ();
-  Fl_File_Chooser *fc = new Fl_File_Chooser(default_name.c_str (), file_filter.c_str (), multi_type, title.c_str ());
-  fc->preview(0);
-
-  if (multi_type == Fl_File_Chooser::CREATE)
-    fc->ok_label("Save");
-
-  fc->show();
-  while (fc->shown ())
-        { Fl::wait (); }
-
-  octave_value_list fargs, retval;
-
-  retval(0) = octave_value(0);
-  retval(1) = octave_value(0);
-  retval(2) = octave_value(0);
-
-  if (fc->value() != NULL)
-    {
-      int file_count = fc->count ();
-      std::string fname;
-      std::string sep = file_ops::dir_sep_str ();
-      std::size_t idx;
-
-      if ((file_count == 1) && (multi_type != Fl_File_Chooser::DIRECTORY))
-        {
-          fname = fc->value ();
-          idx = fname.find_last_of(sep);
-          retval(0) = fname.substr(idx + 1);
-        }
-      else
-        {
-          Cell file_cell = Cell(file_count, 1);
-          for (octave_idx_type n = 1; n <= file_count; n++)
-            {
-              fname = fc->value (n);
-              idx = fname.find_last_of(sep);
-              file_cell(n - 1) = fname.substr(idx + 1);
-            }
-          retval(0) = file_cell;
-        }
-
-      if (multi_type == Fl_File_Chooser::DIRECTORY)
-        retval(0) = std::string(fc->value ());
-      else
-        {
-          retval(1) = std::string(fc->directory ()) + sep;
-          retval(2) = fc->filter_value();
-        }
-    }
-
-  return retval;
-}
 
 #endif
diff --git a/src/DLD-FUNCTIONS/module-files b/src/DLD-FUNCTIONS/module-files
--- a/src/DLD-FUNCTIONS/module-files
+++ b/src/DLD-FUNCTIONS/module-files
@@ -1,12 +1,13 @@
 __contourc__.cc
 __delaunayn__.cc
 __dispatch__.cc
 __dsearchn__.cc
+__fltk_uigetfile__.cc
 __glpk__.cc
 __init_fltk__.cc
 __lin_interpn__.cc
 __magick_read__.cc
 __pchip_deriv__.cc
 __qp__.cc
 __voronoi__.cc
 amd.cc
