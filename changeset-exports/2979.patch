# HG changeset patch
# User jwe
# Date 863735800 0
#      Thu May 15 22:36:40 1997 +0000
# Node ID a3556d2adec93ad22e4a62e238543594c4c01ad6
# Parent  49de012386386b383cd6d050695610a84957636e
[project @ 1997-05-15 22:35:37 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 Thu May 15 11:48:10 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* oct-lvalue.h: Rename from oct-var-ref.h.  Rename class from
+	octave_variable_reference to octave_lvalue.  Change all uses.
+	* oct-lvalue.cc: Rename from oct-var-ref.cc.
+
 	* variables.cc (bind_ans): Only bind ans and print result if value
 	is defined.
 
 	* defun.cc: New file.  Move functions for installing objects in
 	the symbol table here from variables.cc.
 
 	* oct-obj.h, oct-obj.cc: Add custom allocator, fwiw.
 
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -75,17 +75,17 @@ PT_INCLUDES := pt-base.h pt-cmd.h \
 	pt-mat.h pt-misc.h pt-plot.h pt-pr-code.h pt-walk.h 
 
 INCLUDES := BaseSLList.h Map.h SLList.h SLStack.h Stack.h defun-dld.h \
 	defun-int.h defun.h dirfns.h dynamic-ld.h error.h file-io.h \
 	fn-cache.h gripes.h help.h input.h lex.h load-save.h \
 	oct-fstrm.h oct-hist.h oct-iostrm.h \
 	oct-map.h oct-obj.h oct-prcstrm.h oct-procbuf.h \
 	oct-stdstrm.h oct-stream.h oct-strstrm.h \
-	oct-var-ref.h oct.h ops.h pager.h parse.h \
+	oct-lvalue.h oct.h ops.h pager.h parse.h \
 	pr-output.h procstream.h sighandlers.h symtab.h sysdep.h \
 	systime.h syswait.h token.h toplev.h unwind-prot.h utils.h \
 	variables.h version.h xdiv.h xpow.h $(OV_INCLUDES) $(PT_INCLUDES)
 
 TI_XSRC := Array-oc.cc Array-os.cc Array-tc.cc Map-fnc.cc \
 	Map-tc.cc SLList-expr.cc SLList-misc.cc SLList-plot.cc \
 	SLList-tc.cc SLList-tm.cc SLStack-i.cc SLStack-pc.cc \
 	SLStack-str.cc SLStack-sym.cc SLStack-tok.cc \
@@ -114,17 +114,17 @@ PT_SRC := pt-base.cc pt-cmd.cc pt-const.
 	pt-plot.cc pt-pr-code.cc 
 
 SOURCES := BaseSLList.cc Map.cc SLList.cc SLStack.cc Stack.cc \
 	data.cc defaults.cc defun.cc dirfns.cc dynamic-ld.cc \
 	error.cc file-io.cc fn-cache.cc gripes.cc help.cc input.cc \
 	lex.l load-save.cc mappers.cc oct-fstrm.cc oct-hist.cc \
 	oct-iostrm.cc oct-map.cc oct-obj.cc oct-prcstrm.cc \
 	oct-procbuf.cc oct-stdstrm.cc oct-stream.cc oct-strstrm.cc \
-	oct-var-ref.cc pager.cc parse.y pr-output.cc procstream.cc \
+	oct-lvalue.cc pager.cc parse.y pr-output.cc procstream.cc \
 	sighandlers.cc strcasecmp.c strncase.c strfns.cc \
 	strftime.c symtab.cc syscalls.cc sysdep.cc token.cc \
 	toplev.cc unwind-prot.cc utils.cc variables.cc xdiv.cc \
 	xpow.cc \
 	$(OP_SRC) $(OV_SRC) $(PT_SRC) $(TI_SRC)
 
 OBJECTS_4 := $(notdir $(SOURCES))
 OBJECTS_3 := $(patsubst %.l, %.o, $(OBJECTS_4))
diff --git a/src/oct-lvalue.cc b/src/oct-lvalue.cc
new file mode 100644
--- /dev/null
+++ b/src/oct-lvalue.cc
@@ -0,0 +1,67 @@
+/*
+
+Copyright (C) 1996, 1997 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "oct-obj.h"
+#include "oct-lvalue.h"
+#include "ov.h"
+
+void
+octave_lvalue::assign (octave_value::assign_op op, const octave_value& rhs)
+{
+  octave_value saved_val;
+
+  if (chg_fcn)
+    octave_value saved_val = *val;
+
+  if (idx.empty ())
+    {
+      if (struct_elt_name.empty ())
+	val->assign (op, rhs);
+      else
+	val->assign_struct_elt (op, struct_elt_name, rhs);
+    }
+  else
+    {
+      if (struct_elt_name.empty ())
+	val->assign (op, idx, rhs);
+      else
+	val->assign_struct_elt (op, struct_elt_name, idx, rhs);
+    }
+
+  if (chg_fcn && chg_fcn () < 0)
+    *val = saved_val;
+
+  // Clear index so subsequent value() operations will not perform an
+  // indexing operation.
+
+  idx = octave_value_list ();
+}
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/src/oct-lvalue.h b/src/oct-lvalue.h
new file mode 100644
--- /dev/null
+++ b/src/oct-lvalue.h
@@ -0,0 +1,112 @@
+/*
+
+Copyright (C) 1996, 1997 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#if !defined (octave_lvalue_h)
+#define octave_lvalue_h 1
+
+class octave_value;
+class octave_value_list;
+
+#include <string>
+
+#include "oct-obj.h"
+#include "symtab.h"
+
+class
+octave_lvalue
+{
+public:
+
+  octave_lvalue (octave_value *v = 0, symbol_record::sv_function f = 0)
+    : val (v), idx (), chg_fcn (f), struct_elt_name () { }
+
+  octave_lvalue (octave_value *v, const string& nm,
+		 symbol_record::sv_function f = 0)
+    : val (v), idx (), chg_fcn (f), struct_elt_name (nm) { }
+
+  octave_lvalue (const octave_lvalue& vr)
+    : val (vr.val), idx (vr.idx), chg_fcn (vr.chg_fcn),
+      struct_elt_name (vr.struct_elt_name) { }
+
+  octave_lvalue& operator = (const octave_lvalue& vr)
+    {
+      if (this != &vr)
+	{
+	  val = vr.val;
+	  idx = vr.idx;
+	  chg_fcn = vr.chg_fcn;
+	  struct_elt_name = vr.struct_elt_name;
+	}
+
+      return *this;
+    }
+
+  ~octave_lvalue (void) { }
+
+  bool is_defined (void) { return val->is_defined (); }
+
+  bool is_undefined (void) { return val->is_undefined (); }
+
+  bool is_map (void) { return val->is_map (); }
+
+  void define (const octave_value& v) { *val = v; }
+
+  void assign (octave_value::assign_op, const octave_value&);
+
+  octave_lvalue struct_elt_ref (const string& nm)
+    { return val->struct_elt_ref (nm); }
+
+  void index (const octave_value_list& i) { idx = i; }
+
+  void increment (void) { val->increment (); }
+
+  void decrement (void) { val->decrement (); }
+
+  octave_value value (void)
+    {
+      return struct_elt_name.empty ()
+	? (idx.empty ()
+	   ? *val
+	   : val->do_index_op (idx))
+	: (idx.empty ()
+	   ? val->do_struct_elt_index_op (struct_elt_name)
+	   : val->do_struct_elt_index_op (struct_elt_name, idx));
+    }
+
+private:
+
+  octave_value *val;
+
+  octave_value_list idx;
+
+  symbol_record::sv_function chg_fcn;
+
+  string struct_elt_name;
+};
+
+#endif
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/src/oct-var-ref.cc b/src/oct-var-ref.cc
deleted file mode 100644
--- a/src/oct-var-ref.cc
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
-
-Copyright (C) 1996, 1997 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 2, or (at your option) any
-later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, write to the Free
-Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-
-*/
-
-#ifdef HAVE_CONFIG_H
-#include <config.h>
-#endif
-
-#include "oct-obj.h"
-#include "oct-var-ref.h"
-#include "ov.h"
-
-void
-octave_variable_reference::assign (octave_value::assign_op op,
-				   const octave_value& rhs)
-{
-  octave_value saved_val;
-
-  if (chg_fcn)
-    octave_value saved_val = *val;
-
-  if (idx.empty ())
-    {
-      if (struct_elt_name.empty ())
-	val->assign (op, rhs);
-      else
-	val->assign_struct_elt (op, struct_elt_name, rhs);
-    }
-  else
-    {
-      if (struct_elt_name.empty ())
-	val->assign (op, idx, rhs);
-      else
-	val->assign_struct_elt (op, struct_elt_name, idx, rhs);
-    }
-
-  if (chg_fcn && chg_fcn () < 0)
-    *val = saved_val;
-
-  // Clear index so subsequent value() operations will not perform an
-  // indexing operation.
-
-  idx = octave_value_list ();
-}
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/src/oct-var-ref.h b/src/oct-var-ref.h
deleted file mode 100644
--- a/src/oct-var-ref.h
+++ /dev/null
@@ -1,113 +0,0 @@
-/*
-
-Copyright (C) 1996, 1997 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 2, or (at your option) any
-later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, write to the Free
-Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-
-*/
-
-#if !defined (octave_variable_reference_h)
-#define octave_variable_reference_h 1
-
-class octave_value;
-class octave_value_list;
-
-#include <string>
-
-#include "oct-obj.h"
-#include "symtab.h"
-
-class
-octave_variable_reference
-{
-public:
-
-  octave_variable_reference (octave_value *v = 0,
-			     symbol_record::sv_function f = 0)
-    : val (v), idx (), chg_fcn (f), struct_elt_name () { }
-
-  octave_variable_reference (octave_value *v, const string& nm,
-			     symbol_record::sv_function f = 0)
-    : val (v), idx (), chg_fcn (f), struct_elt_name (nm) { }
-
-  octave_variable_reference (const octave_variable_reference& vr)
-    : val (vr.val), idx (vr.idx), chg_fcn (vr.chg_fcn),
-      struct_elt_name (vr.struct_elt_name) { }
-
-  octave_variable_reference& operator = (const octave_variable_reference& vr)
-    {
-      if (this != &vr)
-	{
-	  val = vr.val;
-	  idx = vr.idx;
-	  chg_fcn = vr.chg_fcn;
-	  struct_elt_name = vr.struct_elt_name;
-	}
-
-      return *this;
-    }
-
-  ~octave_variable_reference (void) { }
-
-  bool is_defined (void) { return val->is_defined (); }
-
-  bool is_undefined (void) { return val->is_undefined (); }
-
-  bool is_map (void) { return val->is_map (); }
-
-  void define (const octave_value& v) { *val = v; }
-
-  void assign (octave_value::assign_op, const octave_value&);
-
-  octave_variable_reference struct_elt_ref (const string& nm)
-    { return val->struct_elt_ref (nm); }
-
-  void index (const octave_value_list& i) { idx = i; }
-
-  void increment (void) { val->increment (); }
-
-  void decrement (void) { val->decrement (); }
-
-  octave_value value (void)
-    {
-      return struct_elt_name.empty ()
-	? (idx.empty ()
-	   ? *val
-	   : val->do_index_op (idx))
-	: (idx.empty ()
-	   ? val->do_struct_elt_index_op (struct_elt_name)
-	   : val->do_struct_elt_index_op (struct_elt_name, idx));
-    }
-
-private:
-
-  octave_value *val;
-
-  octave_value_list idx;
-
-  symbol_record::sv_function chg_fcn;
-
-  string struct_elt_name;
-};
-
-#endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -30,17 +30,17 @@ Software Foundation, 59 Temple Place - S
 
 #include <iostream.h>
 
 #include "lo-ieee.h"
 
 #include "gripes.h"
 #include "oct-map.h"
 #include "oct-obj.h"
-#include "oct-var-ref.h"
+#include "oct-lvalue.h"
 #include "ops.h"
 #include "ov-base.h"
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-ch-mat.h"
 #include "ov-str-mat.h"
@@ -91,23 +91,23 @@ octave_value
 octave_base_value::do_struct_elt_index_op (const string&, bool)
 {
   string nm = type_name ();
   error ("can't perform structure reference operations for %s type",
 	 nm.c_str ());
   return octave_value ();
 }
 
-octave_variable_reference
+octave_lvalue
 octave_base_value::struct_elt_ref (octave_value *, const string&)
 {
   string nm = type_name ();
   error ("can't perform structure reference operations for %s type",
 	 nm.c_str ());
-  return octave_variable_reference ();
+  return octave_lvalue ();
 }
 
 octave_value
 octave_base_value::convert_to_str (void) const
 {
   gripe_wrong_type_arg ("octave_base_value::convert_to_str ()",
 			type_name ());
   return octave_value ();
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -77,18 +77,17 @@ public:
   idx_vector index_vector (void) const;
 
   octave_value
   do_struct_elt_index_op (const string& nm, const octave_value_list& idx,
 			  bool silent);
 
   octave_value do_struct_elt_index_op (const string& nm, bool silent);
 
-  octave_variable_reference
-  struct_elt_ref (octave_value *parent, const string& nm);
+  octave_lvalue struct_elt_ref (octave_value *parent, const string& nm);
 
   int rows (void) const { return -1; }
 
   int columns (void) const { return -1; }
 
   bool is_defined (void) const { return false; }
 
   bool is_real_scalar (void) const { return false; }
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -31,17 +31,17 @@ Software Foundation, 59 Temple Place - S
 #include <iostream.h>
 
 #include "lo-ieee.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 
 #include "gripes.h"
 #include "oct-obj.h"
-#include "oct-var-ref.h"
+#include "oct-lvalue.h"
 #include "ops.h"
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "pr-output.h"
 #include "variables.h"
 
 octave_allocator
 octave_matrix::allocator (sizeof (octave_matrix));
@@ -244,20 +244,20 @@ octave_matrix::do_struct_elt_index_op (c
       retval = tmp;
     }
   else if (! silent)
     error ("structure has no member `%s'", nm.c_str ());
 
   return retval;
 }
 
-octave_variable_reference
+octave_lvalue
 octave_matrix::struct_elt_ref (octave_value *parent, const string& nm)
 {
-  return octave_variable_reference (parent, nm);
+  return octave_lvalue (parent, nm);
 }
 
 bool
 octave_matrix::valid_as_scalar_index (void) const
 {
   // XXX FIXME XXX
   return false;
 }
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -95,18 +95,17 @@ public:
   idx_vector index_vector (void) const { return idx_vector (matrix); }
 
   octave_value
   do_struct_elt_index_op (const string& nm, const octave_value_list& idx,
 			  bool silent);
 
   octave_value do_struct_elt_index_op (const string& nm, bool silent);
 
-  octave_variable_reference
-  struct_elt_ref (octave_value *parent, const string& nm);
+  octave_lvalue struct_elt_ref (octave_value *parent, const string& nm);
 
   int rows (void) const { return matrix.rows (); }
   int columns (void) const { return matrix.columns (); }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -26,17 +26,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
 #include "error.h"
-#include "oct-var-ref.h"
+#include "oct-lvalue.h"
 #include "ov-struct.h"
 #include "unwind-prot.h"
 #include "variables.h"
 
 octave_allocator
 octave_struct::allocator (sizeof (octave_struct));
 
 int
@@ -63,20 +63,20 @@ octave_struct::do_struct_elt_index_op (c
   if (idx)
     retval = map.contents (idx);
   else if (! silent)
     error ("structure has no member `%s'", nm.c_str ());
 
   return retval;
 }
 
-octave_variable_reference
+octave_lvalue
 octave_struct::struct_elt_ref (octave_value *, const string& nm)
 {
-  return octave_variable_reference (&map [nm]);
+  return octave_lvalue (&map [nm]);
 }
 
 void
 octave_struct::print (ostream& os, bool) const
 {
   print_raw (os);
 }
 
diff --git a/src/ov-struct.h b/src/ov-struct.h
--- a/src/ov-struct.h
+++ b/src/ov-struct.h
@@ -74,18 +74,17 @@ public:
     { allocator.free (p, size); }
 
   octave_value
   do_struct_elt_index_op (const string& nm, const octave_value_list& idx,
 			  bool silent);
 
   octave_value do_struct_elt_index_op (const string& nm, bool silent);
 
-  octave_variable_reference
-  struct_elt_ref (octave_value *parent, const string& nm);
+  octave_lvalue struct_elt_ref (octave_value *parent, const string& nm);
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return false; }
 
   bool is_map (void) const { return true; }
 
   Octave_map map_value (void) const { return map; }
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -27,17 +27,17 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "Array-flags.h"
 #include "str-vec.h"
 
 #include "oct-obj.h"
-#include "oct-var-ref.h"
+#include "oct-lvalue.h"
 #include "ov.h"
 #include "ov-base.h"
 #include "ov-bool.h"
 #include "ov-bool-mat.h"
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
@@ -554,28 +554,28 @@ octave_value::assign_struct_elt (assign_
 				 const octave_value_list& idx,
 				 const octave_value& rhs)
 {
   make_unique ();
 
   rep->assign_struct_elt (op, elt_nm, idx, rhs);
 }
 
-octave_variable_reference
+octave_lvalue
 octave_value::struct_elt_ref (const string& nm)
 {
   return rep->struct_elt_ref (this, nm);
 }
 
-octave_variable_reference
+octave_lvalue
 octave_value::struct_elt_ref (octave_value *, const string&)
 {
   panic_impossible ();
 
-  return octave_variable_reference ();
+  return octave_lvalue ();
 }
 
 Octave_map
 octave_value::map_value (void) const
 {
   return rep->map_value ();
 }
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -38,17 +38,17 @@ class ostream;
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
 
 class Octave_map;
 class octave_stream;
 class octave_function;
 class octave_value_list;
-class octave_variable_reference;
+class octave_lvalue;
 
 // Constants.
 
 // This just provides a way to avoid infinite recursion when building
 // octave_value objects.
 
 class
 octave_xvalue
@@ -239,19 +239,19 @@ public:
   do_struct_elt_index_op (const string& nm, bool silent = false)
     { return rep->do_struct_elt_index_op (nm, silent); }
 
   virtual octave_value
   do_struct_elt_index_op (const string& nm, const octave_value_list& idx,
 			  bool silent = false)
     { return rep->do_struct_elt_index_op (nm, idx, silent); }
 
-  octave_variable_reference struct_elt_ref (const string& nm);
+  octave_lvalue struct_elt_ref (const string& nm);
 
-  virtual octave_variable_reference
+  virtual octave_lvalue
   struct_elt_ref (octave_value *parent, const string& nm);
 
   // Size.
 
   virtual int rows (void) const
     { return rep->rows (); }
 
   virtual int columns (void) const
diff --git a/src/pt-cmd.cc b/src/pt-cmd.cc
--- a/src/pt-cmd.cc
+++ b/src/pt-cmd.cc
@@ -38,17 +38,17 @@ int continuing = 0;
 
 // Nonzero means we're returning from a function.  Global because it
 // is also needed in tree-expr.cc.
 int returning = 0;
 
 #include "error.h"
 #include "gripes.h"
 #include "oct-map.h"
-#include "oct-var-ref.h"
+#include "oct-lvalue.h"
 #include "pt-cmd.h"
 #include "symtab.h"
 #include "ov.h"
 #include "pt-exp.h"
 #include "pt-id.h"
 #include "pt-indir.h"
 #include "pt-misc.h"
 #include "pt-walk.h"
@@ -97,17 +97,17 @@ do_global_init (tree_decl_elt& elt, bool
       id->link_to_global ();
 
       tree_expression *expr = elt.expression ();
 
       if (expr)
 	{
 	  octave_value init_val = expr->rvalue ();
 
-	  octave_variable_reference ult = id->lvalue ();
+	  octave_lvalue ult = id->lvalue ();
 
 	  ult.assign (octave_value::asn_eq, init_val);
 	}
     }
 }
 
 void
 tree_global_command::eval (void)
@@ -136,17 +136,17 @@ do_static_init (tree_decl_elt& elt, bool
       id->mark_as_static ();
 
       tree_expression *expr = elt.expression ();
 
       if (expr)
 	{
 	  octave_value init_val = expr->rvalue ();
 
-	  octave_variable_reference ult = id->lvalue ();
+	  octave_lvalue ult = id->lvalue ();
 
 	  ult.assign (octave_value::asn_eq, init_val);
 	}
     }
 }
 
 void
 tree_static_command::eval (void)
@@ -223,17 +223,17 @@ tree_while_command::accept (tree_walker&
 
 tree_simple_for_command::~tree_simple_for_command (void)
 {
   delete expr;
   delete list;
 }
 
 inline void
-tree_simple_for_command::do_for_loop_once (octave_variable_reference& ult,
+tree_simple_for_command::do_for_loop_once (octave_lvalue& ult,
 					   const octave_value& rhs,
 					   bool& quit)
 {
   quit = false;
 
   ult.assign (octave_value::asn_eq, rhs);
 
   if (! error_state)
@@ -278,17 +278,17 @@ tree_simple_for_command::eval (void)
   octave_value rhs = expr->rvalue ();
 
   if (error_state || rhs.is_undefined ())
     {
       eval_error ();
       return;
     }
 
-  octave_variable_reference ult = lhs->lvalue ();
+  octave_lvalue ult = lhs->lvalue ();
 
   if (error_state)
     {
       eval_error ();
       return;
     }
 
   if (rhs.is_scalar_type ())
@@ -398,18 +398,18 @@ tree_simple_for_command::accept (tree_wa
 
 tree_complex_for_command::~tree_complex_for_command (void)
 {
   delete expr;
   delete list;
 }
 
 void
-tree_complex_for_command::do_for_loop_once (octave_variable_reference &val_ref,
-					    octave_variable_reference &key_ref,
+tree_complex_for_command::do_for_loop_once (octave_lvalue &val_ref,
+					    octave_lvalue &key_ref,
 					    const octave_value& val,
 					    const octave_value& key,
 					    bool& quit)
 {
   quit = false;
 
   val_ref.assign (octave_value::asn_eq, val);
   key_ref.assign (octave_value::asn_eq, key);
@@ -447,21 +447,21 @@ tree_complex_for_command::eval (void)
   if (rhs.is_map ())
     {
       // Cycle through structure elements.  First element of id_list
       // is set to value and the second is set to the name of the
       // structure element.
 
       Pix p = lhs->first ();
       tree_expression *elt = lhs->operator () (p);
-      octave_variable_reference val_ref = elt->lvalue ();
+      octave_lvalue val_ref = elt->lvalue ();
 
       lhs->next (p);
       elt = lhs->operator () (p);
-      octave_variable_reference key_ref = elt->lvalue ();
+      octave_lvalue key_ref = elt->lvalue ();
 
       Octave_map tmp_val (rhs.map_value ());
 
       for (p = tmp_val.first (); p != 0; tmp_val.next (p))
 	{
 	  octave_value key = tmp_val.key (p);
 	  octave_value val = tmp_val.contents (p);
 
diff --git a/src/pt-cmd.h b/src/pt-cmd.h
--- a/src/pt-cmd.h
+++ b/src/pt-cmd.h
@@ -220,18 +220,18 @@ private:
   tree_expression *lhs;
 
   // Expression to evaluate.
   tree_expression *expr;
 
   // List of commands to execute.
   tree_statement_list *list;
 
-  void do_for_loop_once (octave_variable_reference &ult,
-			 const octave_value& rhs, bool& quit);
+  void do_for_loop_once (octave_lvalue &ult, const octave_value& rhs,
+			 bool& quit);
 };
 
 class
 tree_complex_for_command : public tree_command
 {
 public:
 
   tree_complex_for_command (int l = -1, int c = -1)
@@ -261,20 +261,18 @@ private:
   tree_argument_list *lhs;
 
   // Expression to evaluate.
   tree_expression *expr;
 
   // List of commands to execute.
   tree_statement_list *list;
 
-  void do_for_loop_once (octave_variable_reference &val_ref,
-			 octave_variable_reference &key_ref,
-			 const octave_value& val,
-			 const octave_value& key,
+  void do_for_loop_once (octave_lvalue &val_ref, octave_lvalue &key_ref,
+			 const octave_value& val, const octave_value& key,
 			 bool& quit);
 };
 
 // If.
 
 class
 tree_if_command : public tree_command
 {
diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -30,17 +30,17 @@ Software Foundation, 59 Temple Place - S
 
 #include <string>
 
 #include <iostream.h>
 #include <strstream.h>
 
 #include "error.h"
 #include "pager.h"
-#include "oct-var-ref.h"
+#include "oct-lvalue.h"
 #include "ov.h"
 #include "pt-exp-base.h"
 
 // Expressions.
 
 bool
 tree_expression::is_logically_true (const char *warn_for)
 {
@@ -71,21 +71,21 @@ tree_expression::rvalue (void)
 
 octave_value_list
 tree_expression::rvalue (int nargout)
 {
   ::error ("invalid rvalue function called in expression");
   return octave_value_list ();
 }
 
-octave_variable_reference
+octave_lvalue
 tree_expression::lvalue (void)
 {
   ::error ("invalid lvalue function called in expression");
-  return octave_variable_reference ();
+  return octave_lvalue ();
 }
 
 string
 tree_expression::original_text (void) const
 {
   return string ();
 }
 
diff --git a/src/pt-exp-base.h b/src/pt-exp-base.h
--- a/src/pt-exp-base.h
+++ b/src/pt-exp-base.h
@@ -25,17 +25,17 @@ Software Foundation, 59 Temple Place - S
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #include <string>
 
 class octave_value;
-class octave_variable_reference;
+class octave_lvalue;
 
 #include "pt-base.h"
 
 // A base class for expressions.
 
 class
 tree_expression : public tree
 {
@@ -75,17 +75,17 @@ public:
 
   virtual bool rvalue_ok (void) const
     { return false; }
 
   virtual octave_value rvalue (void);
 
   virtual octave_value_list rvalue (int nargout);
 
-  virtual octave_variable_reference lvalue (void);
+  virtual octave_lvalue lvalue (void);
 
   int paren_count (void) const
     { return num_parens; }
 
   bool is_postfix_indexed (void) const
     { return postfix_indexed; }
 
   bool print_result (void) const
diff --git a/src/pt-exp.cc b/src/pt-exp.cc
--- a/src/pt-exp.cc
+++ b/src/pt-exp.cc
@@ -32,17 +32,17 @@ Software Foundation, 59 Temple Place - S
 #include <strstream.h>
 
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "input.h"
 #include "oct-obj.h"
-#include "oct-var-ref.h"
+#include "oct-lvalue.h"
 #include "pager.h"
 #include "ov.h"
 #include "pt-exp.h"
 #include "pt-id.h"
 #include "pt-indir.h"
 #include "pt-misc.h"
 #include "pt-pr-code.h"
 #include "pt-walk.h"
@@ -100,17 +100,17 @@ tree_prefix_expression::rvalue (void)
 		}
 	      else
 		error ("argument to prefix operator `%s' undefined",
 		       oper () . c_str ());
 	    }
 	}
       else if (etype == increment || etype == decrement)
 	{
-	  octave_variable_reference ref = op->lvalue ();
+	  octave_lvalue ref = op->lvalue ();
 
 	  if (! error_state)
 	    {
 	      if (ref.is_defined ())
 		{
 		  if (etype == increment)
 		    ref.increment ();
 		  else
@@ -215,17 +215,17 @@ tree_postfix_expression::rvalue (void)
 		}
 	      else
 		error ("argument to postfix operator `%s' undefined",
 		       oper () . c_str ());
 	    }
 	}
       else if (etype == increment || etype == decrement)
 	{
-	  octave_variable_reference ref = op->lvalue ();
+	  octave_lvalue ref = op->lvalue ();
 
 	  if (! error_state)
 	    {
 	      if (ref.is_defined ())
 		{
 		  retval = ref.value ();
 
 		  if (etype == increment)
@@ -514,17 +514,17 @@ tree_simple_assignment::rvalue (void)
 
 	  if (rhs_val.is_undefined ())
 	    {
 	      error ("value on right hand side of assignment is undefined");
 	      eval_error ();
 	    }
 	  else
 	    {
-	      octave_variable_reference ult = lhs->lvalue ();
+	      octave_lvalue ult = lhs->lvalue ();
 
 	      if (error_state)
 		eval_error ();
 	      else
 		{
 		  ult.assign (etype, rhs_val);
 
 		  if (error_state)
@@ -784,20 +784,20 @@ tree_index_expression::rvalue (void)
   octave_value_list tmp = rvalue (1);
 
   if (! tmp.empty ())
     retval = tmp(0);
 
   return retval;
 }
 
-octave_variable_reference
+octave_lvalue
 tree_index_expression::lvalue (void)
 {
-  octave_variable_reference retval;
+  octave_lvalue retval;
 
   if (! error_state)
     {
       retval = expr->lvalue ();
 
       if (! error_state)
 	{
 	  octave_value_list args;
@@ -893,17 +893,17 @@ tree_multi_assignment::rvalue (int nargo
 	      int n = rhs_val.length ();
 
 	      for (Pix p = lhs->first (); p != 0; lhs->next (p))
 		{
 		  tree_expression *lhs_elt = lhs->operator () (p);
 
 		  if (lhs_elt)
 		    {
-		      octave_variable_reference ult = lhs_elt->lvalue ();
+		      octave_lvalue ult = lhs_elt->lvalue ();
 
 		      if (error_state)
 			eval_error ();
 		      else
 			{
 			  octave_value tmp = k < n
 			    ? rhs_val(k++) : octave_value ();
 
diff --git a/src/pt-exp.h b/src/pt-exp.h
--- a/src/pt-exp.h
+++ b/src/pt-exp.h
@@ -34,17 +34,17 @@ class tree_index_expression;
 class tree_indirect_ref;
 class tree_argument_list;
 class tree_assignment_lhs;
 
 class tree_walker;
 
 class octave_value;
 class octave_value_list;
-class octave_variable_reference;
+class octave_lvalue;
 
 #include "oct-obj.h"
 #include "pt-exp-base.h"
 
 // Unary expressions.
 
 class
 tree_unary_expression : public tree_expression
@@ -281,22 +281,20 @@ public:
   tree_expression *left_hand_side (void) { return lhs; }
 
   tree_expression *right_hand_side (void) { return rhs; }
 
   void accept (tree_walker& tw);
 
 private:
 
-  void do_assign (octave_variable_reference& ult,
-		  const octave_value_list& args,
+  void do_assign (octave_lvalue& ult, const octave_value_list& args,
 		  const octave_value& rhs_val);
 
-  void do_assign (octave_variable_reference& ult,
-		  const octave_value& rhs_val);
+  void do_assign (octave_lvalue& ult, const octave_value& rhs_val);
 
   // The left hand side of the assignment.
   tree_expression *lhs;
 
   // The right hand side of the assignment.
   tree_expression *rhs;
 
   // True if we should not delete the lhs.
@@ -378,17 +376,17 @@ public:
 
   bool rvalue_ok (void) const
     { return true; }
 
   octave_value rvalue (void);
 
   octave_value_list rvalue (int nargout);
 
-  octave_variable_reference lvalue (void);
+  octave_lvalue lvalue (void);
 
   void eval_error (void);
 
   void accept (tree_walker& tw);
 
 private:
 
   tree_expression *expr;
diff --git a/src/pt-id.cc b/src/pt-id.cc
--- a/src/pt-id.cc
+++ b/src/pt-id.cc
@@ -25,17 +25,17 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "error.h"
 #include "oct-obj.h"
-#include "oct-var-ref.h"
+#include "oct-lvalue.h"
 #include "pager.h"
 #include "pt-const.h"
 #include "pt-id.h"
 #include "pt-walk.h"
 #include "symtab.h"
 #include "utils.h"
 #include "variables.h"
 
@@ -191,17 +191,17 @@ tree_identifier::rvalue (void)
   octave_value_list tmp = rvalue (1);
 
   if (! tmp.empty ())
     retval = tmp(0);
 
   return retval;
 }
 
-octave_variable_reference
+octave_lvalue
 tree_identifier::lvalue (void)
 {
   return sym->variable_reference ();
 }
 
 void
 tree_identifier::accept (tree_walker& tw)
 {
diff --git a/src/pt-id.h b/src/pt-id.h
--- a/src/pt-id.h
+++ b/src/pt-id.h
@@ -78,17 +78,17 @@ public:
   void mark_as_static (void);
 
   void mark_as_formal_parameter (void);
 
   octave_value rvalue (void);
 
   octave_value_list rvalue (int nargout);
 
-  octave_variable_reference lvalue (void);
+  octave_lvalue lvalue (void);
 
   void eval_undefined_error (void);
 
   void accept (tree_walker& tw);
 
 private:
 
   // The symbol record that this identifier references.
diff --git a/src/pt-indir.cc b/src/pt-indir.cc
--- a/src/pt-indir.cc
+++ b/src/pt-indir.cc
@@ -27,17 +27,17 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "error.h"
 #include "gripes.h"
 #include "oct-map.h"
 #include "oct-obj.h"
-#include "oct-var-ref.h"
+#include "oct-lvalue.h"
 #include "pager.h"
 #include "pt-const.h"
 #include "pt-id.h"
 #include "pt-indir.h"
 #include "pt-walk.h"
 #include "symtab.h"
 #include "utils.h"
 #include "variables.h"
@@ -90,20 +90,20 @@ tree_indirect_ref::rvalue (void)
   octave_value_list tmp = rvalue (1);
 
   if (! tmp.empty ())
     retval = tmp(0);
 
   return retval;
 }
 
-octave_variable_reference
+octave_lvalue
 tree_indirect_ref::lvalue (void)
 {
-  octave_variable_reference tmp = expr->lvalue ();
+  octave_lvalue tmp = expr->lvalue ();
 
   if (tmp.is_undefined () || ! tmp.is_map ())
     tmp.define (Octave_map ());
 
   return tmp.struct_elt_ref (nm);
 }
 
 void
diff --git a/src/pt-indir.h b/src/pt-indir.h
--- a/src/pt-indir.h
+++ b/src/pt-indir.h
@@ -60,17 +60,17 @@ public:
 
   bool rvalue_ok (void) const
     { return true; }
 
   octave_value rvalue (void);
 
   octave_value_list rvalue (int nargout);
 
-  octave_variable_reference lvalue (void);
+  octave_lvalue lvalue (void);
 
   tree_expression *expression (void)
     { return expr; }
 
   string elt_name (void)
     { return nm; }
 
   void accept (tree_walker& tw);
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -39,17 +39,17 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "str-vec.h"
 
 #include "defun.h"
 #include "error.h"
 #include "input.h"
 #include "oct-obj.h"
-#include "oct-var-ref.h"
+#include "oct-lvalue.h"
 #include "ov-usr-fcn.h"
 #include "ov.h"
 #include "pager.h"
 #include "pt-cmd.h"
 #include "pt-const.h"
 #include "pt-exp.h"
 #include "pt-id.h"
 #include "pt-indir.h"
@@ -349,17 +349,17 @@ void
 tree_parameter_list::initialize_undefined_elements (octave_value& val)
 {
   for (Pix p = first (); p != 0; next (p))
     {
       tree_identifier *elt = this->operator () (p);
 
       if (! elt->is_defined ())
 	{
-	  octave_variable_reference tmp = elt->lvalue ();
+	  octave_lvalue tmp = elt->lvalue ();
 
 	  tmp.assign (octave_value::asn_eq, val);
 	}
     }
 }
 
 void
 tree_parameter_list::define_from_arg_vector (const octave_value_list& args)
@@ -372,17 +372,17 @@ tree_parameter_list::define_from_arg_vec
   int expected_nargin = length ();
 
   Pix p = first ();
 
   for (int i = 0; i < expected_nargin; i++)
     {
       tree_identifier *elt = this->operator () (p);
 
-      octave_variable_reference ref = elt->lvalue ();
+      octave_lvalue ref = elt->lvalue ();
 
       if (i < nargin)
 	{
 	  if (args(i).is_defined () && args(i).is_magic_colon ())
 	    {
 	      ::error ("invalid use of colon in function argument list");
 	      return;
 	    }
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -29,17 +29,17 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <cctype>
 
 #include "glob-match.h"
 #include "str-vec.h"
 
 #include "error.h"
-#include "oct-var-ref.h"
+#include "oct-lvalue.h"
 #include "ov.h"
 #include "symtab.h"
 #include "utils.h"
 #include "variables.h"
 
 // Variables and functions.
 
 symbol_def::symbol_def (void)
@@ -537,17 +537,17 @@ symbol_record::is_static (void) const
 octave_value&
 symbol_record::variable_value (void)
 {
   static octave_value foo;
 
   return is_variable () ? def () : foo;
 }
 
-octave_variable_reference
+octave_lvalue
 symbol_record::variable_reference (void)
 {
   if (is_function ())
     clear ();
 
   if (! is_defined ())
     {
       if (! (is_formal_parameter () || is_linked_to_global ()))
@@ -555,17 +555,17 @@ symbol_record::variable_reference (void)
 
       if (! is_defined ())
 	{
 	  octave_value tmp;
 	  define (tmp);
 	}
     }
 
-  return octave_variable_reference (&(def ()), sv_fcn);
+  return octave_lvalue (&(def ()), sv_fcn);
 }
 
 symbol_record *
 symbol_record::next (void) const
 {
   return next_elem;
 }
 
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -34,17 +34,17 @@ Software Foundation, 59 Temple Place - S
 #include "str-vec.h"
 
 #include "ov.h"
 
 // Must be multiple of 2.
 #define HASH_TABLE_SIZE 1024
 #define HASH_MASK (HASH_TABLE_SIZE - 1)
 
-class octave_variable_reference;
+class octave_lvalue;
 
 class string_vector;
 
 class symbol_def;
 class symbol_record;
 class symbol_record_info;
 class symbol_table;
 
@@ -180,17 +180,17 @@ public:
 
   void mark_as_linked_to_global (void);
   bool is_linked_to_global (void) const;
 
   void mark_as_static (void);
   bool is_static (void) const;
 
   octave_value& variable_value (void);
-  octave_variable_reference variable_reference (void);
+  octave_lvalue variable_reference (void);
 
   symbol_record *next (void) const;
 
   void chain (symbol_record *s);
 
   void push_context (void);
   void pop_context (void);
 
