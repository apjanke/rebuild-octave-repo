# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1341207203 -7200
#      Mon Jul 02 07:33:23 2012 +0200
# Node ID a2e3bb987929a400e1fb3d86ab4fa574be4ad3cd
# Parent  14da85a0d1c30c2beabfd47dd25bafa8549d1212
Added patches from Michael Goffioul.

diff --git a/libqterminal/unix/TerminalModel.cpp b/libqterminal/unix/TerminalModel.cpp
--- a/libqterminal/unix/TerminalModel.cpp
+++ b/libqterminal/unix/TerminalModel.cpp
@@ -280,16 +280,17 @@ void TerminalModel::updateTerminalSize()
             minColumns = (minColumns == -1) ? view->columns() : qMin( minColumns , view->columns() );
         }
     }
 
     // backend emulation must have a _terminal of at least 1 column x 1 line in size
     if ( minLines > 0 && minColumns > 0 )
     {
         _emulation->setImageSize( minLines , minColumns );
+        _kpty->setWinSize (minLines, minColumns);
         //_shellProcess->setWindowSize( minLines , minColumns );
     }
 }
 
 void TerminalModel::refresh()
 {
 }
 
diff --git a/libqterminal/unix/Vt102Emulation.cpp b/libqterminal/unix/Vt102Emulation.cpp
--- a/libqterminal/unix/Vt102Emulation.cpp
+++ b/libqterminal/unix/Vt102Emulation.cpp
@@ -28,17 +28,17 @@
 #endif
 
 // this allows konsole to be compiled without XKB and XTEST extensions
 // even though it might be available on a particular system.
 #if defined(AVOID_XKB)
 #undef HAVE_XKB
 #endif
 
-// Standard 
+// Standard
 #include <stdio.h>
 #include <unistd.h>
 #include <assert.h>
 
 // Qt
 #include <QtCore/QEvent>
 #include <QtGui/QKeyEvent>
 #include <QtCore/QByteRef>
@@ -76,17 +76,17 @@ void scrolllock_set_on();
 
 /* ------------------------------------------------------------------------- */
 /*                                                                           */
 /*                       Constructor / Destructor                            */
 /*                                                                           */
 /* ------------------------------------------------------------------------- */
 
 
-Vt102Emulation::Vt102Emulation() 
+Vt102Emulation::Vt102Emulation()
     : Emulation(),
      _titleUpdateTimer(new QTimer(this))
 {
   _titleUpdateTimer->setSingleShot(true);
 
   QObject::connect(_titleUpdateTimer , SIGNAL(timeout()) , this , SLOT(updateTitle()));
 
   initTokenizer();
@@ -96,17 +96,17 @@ Vt102Emulation::Vt102Emulation()
 Vt102Emulation::~Vt102Emulation()
 {
 }
 
 void Vt102Emulation::clearEntireScreen()
 {
   _currentScreen->clearEntireScreen();
 
-  bufferedUpdate(); 
+  bufferedUpdate();
 }
 
 void Vt102Emulation::reset()
 {
   //kDebug(1211)<<"Vt102Emulation::reset() resetToken()";
   resetToken();
   //kDebug(1211)<<"Vt102Emulation::reset() resetModes()";
   resetModes();
@@ -116,17 +116,17 @@ void Vt102Emulation::reset()
   _screen[0]->reset();
   //kDebug(1211)<<"Vt102Emulation::reset() resetCharSet()";
   resetCharset(1);
   //kDebug(1211)<<"Vt102Emulation::reset() reset _screen 1";
   _screen[1]->reset();
   //kDebug(1211)<<"Vt102Emulation::reset() setCodec()";
   setCodec(LocaleCodec);
   //kDebug(1211)<<"Vt102Emulation::reset() done";
- 
+
   bufferedUpdate();
 }
 
 /* ------------------------------------------------------------------------- */
 /*                                                                           */
 /*                     Processing the incoming byte stream                   */
 /*                                                                           */
 /* ------------------------------------------------------------------------- */
@@ -284,17 +284,17 @@ void Vt102Emulation::initTokenizer()
 #define ces(C)     (            cc < 256 &&    (tbl[  cc  ] & (C)) == (C) && !Xte)
 
 #define ESC 27
 #define CNTL(c) ((c)-'@')
 
 // process an incoming unicode character
 
 void Vt102Emulation::receiveChar(int cc)
-{ 
+{
   int i;
   if (cc == 127) return; //VT100: ignore.
 
   if (ces(    CTL))
   { // DEC HACK ALERT! Control Characters are allowed *within* esc sequences in VT100
     // This means, they do neither a resetToken nor a pushToToken. Some of them, do
     // of course. Guess this originates from a weakly layered handling of the X-on
     // X-off protocol, which comes really below this level.
@@ -360,35 +360,35 @@ void Vt102Emulation::receiveChar(int cc)
 void Vt102Emulation::XtermHack()
 { int i,arg = 0;
   for (i = 2; i < ppos && '0'<=pbuf[i] && pbuf[i]<'9' ; i++)
     arg = 10*arg + (pbuf[i]-'0');
   if (pbuf[i] != ';') { ReportErrorToken(); return; }
   QChar *str = new QChar[ppos-i-2];
   for (int j = 0; j < ppos-i-2; j++) str[j] = pbuf[i+1+j];
   QString unistr(str,ppos-i-2);
-  
+
   // arg == 1 doesn't change the title. In XTerm it only changes the icon name
   // (btw: arg=0 changes title and icon, arg=1 only icon, arg=2 only title
 //  emit changeTitle(arg,unistr);
   _pendingTitleUpdates[arg] = unistr;
   _titleUpdateTimer->start(20);
 
   delete [] str;
 }
 
 void Vt102Emulation::updateTitle()
 {
-	QListIterator<int> iter( _pendingTitleUpdates.keys() );
-	while (iter.hasNext()) {
-		int arg = iter.next();
-		emit titleChanged( arg , _pendingTitleUpdates[arg] );	
-	}
+    QListIterator<int> iter( _pendingTitleUpdates.keys() );
+    while (iter.hasNext()) {
+        int arg = iter.next();
+        emit titleChanged( arg , _pendingTitleUpdates[arg] );
+    }
 
-    _pendingTitleUpdates.clear();	
+    _pendingTitleUpdates.clear();
 }
 
 // Interpreting Codes ---------------------------------------------------------
 
 /*
    Now that the incoming character stream is properly tokenized,
    meaning is assigned to them. These are either operations of
    the current _screen, or of the emulation class itself.
@@ -511,32 +511,32 @@ switch( N )
 
     case TY_ESC_CS('+', '0') :      setCharset           (3,    '0'); break; //VT100
     case TY_ESC_CS('+', 'A') :      setCharset           (3,    'A'); break; //VT100
     case TY_ESC_CS('+', 'B') :      setCharset           (3,    'B'); break; //VT100
 
     case TY_ESC_CS('%', 'G') :      setCodec             (Utf8Codec   ); break; //LINUX
     case TY_ESC_CS('%', '@') :      setCodec             (LocaleCodec ); break; //LINUX
 
-    case TY_ESC_DE('3'      ) : /* Double height line, top half    */ 
-								_currentScreen->setLineProperty( LINE_DOUBLEWIDTH , true );
-								_currentScreen->setLineProperty( LINE_DOUBLEHEIGHT , true );
-									break;
-    case TY_ESC_DE('4'      ) : /* Double height line, bottom half */ 
-								_currentScreen->setLineProperty( LINE_DOUBLEWIDTH , true );
-								_currentScreen->setLineProperty( LINE_DOUBLEHEIGHT , true );
-									break;
+    case TY_ESC_DE('3'      ) : /* Double height line, top half    */
+                                _currentScreen->setLineProperty( LINE_DOUBLEWIDTH , true );
+                                _currentScreen->setLineProperty( LINE_DOUBLEHEIGHT , true );
+                                    break;
+    case TY_ESC_DE('4'      ) : /* Double height line, bottom half */
+                                _currentScreen->setLineProperty( LINE_DOUBLEWIDTH , true );
+                                _currentScreen->setLineProperty( LINE_DOUBLEHEIGHT , true );
+                                    break;
     case TY_ESC_DE('5'      ) : /* Single width, single height line*/
-								_currentScreen->setLineProperty( LINE_DOUBLEWIDTH , false);
-								_currentScreen->setLineProperty( LINE_DOUBLEHEIGHT , false);
-								break;
-    case TY_ESC_DE('6'      ) : /* Double width, single height line*/ 
-							    _currentScreen->setLineProperty( LINE_DOUBLEWIDTH , true);	
-								_currentScreen->setLineProperty( LINE_DOUBLEHEIGHT , false);
-								break;
+                                _currentScreen->setLineProperty( LINE_DOUBLEWIDTH , false);
+                                _currentScreen->setLineProperty( LINE_DOUBLEHEIGHT , false);
+                                break;
+    case TY_ESC_DE('6'      ) : /* Double width, single height line*/
+                                _currentScreen->setLineProperty( LINE_DOUBLEWIDTH , true);
+                                _currentScreen->setLineProperty( LINE_DOUBLEHEIGHT , false);
+                                break;
     case TY_ESC_DE('8'      ) : _currentScreen->helpAlign            (          ); break;
 
 // resize = \e[8;<row>;<col>t
     case TY_CSI_PS('t',   8) : setImageSize( q /* colums */, p /* lines */ );    break;
 
 // change tab text color : \e[28;<color>t  color: 0-16,777,215
     case TY_CSI_PS('t',   28) : emit changeTabTextColorRequest      ( p        );          break;
 
@@ -706,24 +706,24 @@ switch( N )
     case TY_CSI_PR('r',  67) : /* IGNORED: DECBKM                   */ break; //XTERM
 
     // XTerm defines the following modes:
     // SET_VT200_MOUSE             1000
     // SET_VT200_HIGHLIGHT_MOUSE   1001
     // SET_BTN_EVENT_MOUSE         1002
     // SET_ANY_EVENT_MOUSE         1003
     //
-    
+
     //Note about mouse modes:
     //There are four mouse modes which xterm-compatible terminals can support - 1000,1001,1002,1003
     //Konsole currently supports mode 1000 (basic mouse press and release) and mode 1002 (dragging the mouse).
-    //TODO:  Implementation of mouse modes 1001 (something called hilight tracking) and 
+    //TODO:  Implementation of mouse modes 1001 (something called hilight tracking) and
     //1003 (a slight variation on dragging the mouse)
     //
- 
+
     case TY_CSI_PR('h', 1000) :          setMode      (MODE_Mouse1000); break; //XTERM
     case TY_CSI_PR('l', 1000) :        resetMode      (MODE_Mouse1000); break; //XTERM
     case TY_CSI_PR('s', 1000) :         saveMode      (MODE_Mouse1000); break; //XTERM
     case TY_CSI_PR('r', 1000) :      restoreMode      (MODE_Mouse1000); break; //XTERM
 
     case TY_CSI_PR('h', 1001) : /* IGNORED: hilite mouse tracking    */ break; //XTERM
     case TY_CSI_PR('l', 1001) :        resetMode      (MODE_Mouse1001); break; //XTERM
     case TY_CSI_PR('s', 1001) : /* IGNORED: hilite mouse tracking    */ break; //XTERM
@@ -733,16 +733,17 @@ switch( N )
     case TY_CSI_PR('l', 1002) :        resetMode      (MODE_Mouse1002); break; //XTERM
     case TY_CSI_PR('s', 1002) :         saveMode      (MODE_Mouse1002); break; //XTERM
     case TY_CSI_PR('r', 1002) :      restoreMode      (MODE_Mouse1002); break; //XTERM
 
     case TY_CSI_PR('h', 1003) :          setMode      (MODE_Mouse1003); break; //XTERM
     case TY_CSI_PR('l', 1003) :        resetMode      (MODE_Mouse1003); break; //XTERM
     case TY_CSI_PR('s', 1003) :         saveMode      (MODE_Mouse1003); break; //XTERM
     case TY_CSI_PR('r', 1003) :      restoreMode      (MODE_Mouse1003); break; //XTERM
+    case TY_CSI_PR('h', 1034) : /* IGNORED: 8bitinput activation     */ break; //XTERM
 
     case TY_CSI_PR('h', 1047) :          setMode      (MODE_AppScreen); break; //XTERM
     case TY_CSI_PR('l', 1047) : _screen[1]->clearEntireScreen(); resetMode(MODE_AppScreen); break; //XTERM
     case TY_CSI_PR('s', 1047) :         saveMode      (MODE_AppScreen); break; //XTERM
     case TY_CSI_PR('r', 1047) :      restoreMode      (MODE_AppScreen); break; //XTERM
 
     //FIXME: Unitoken: save translations
     case TY_CSI_PR('h', 1048) :      saveCursor           (          ); break; //XTERM
@@ -780,29 +781,29 @@ switch( N )
     case TY_CSI_PG('c'      ) :  reportSecondaryAttributes(          ); break; //VT100
 
     default : ReportErrorToken();    break;
   };
 }
 
 void Vt102Emulation::clearScreenAndSetColumns(int columnCount)
 {
-    setImageSize(_currentScreen->getLines(),columnCount); 
+    setImageSize(_currentScreen->getLines(),columnCount);
     clearEntireScreen();
-    setDefaultMargins(); 
+    setDefaultMargins();
     _currentScreen->setCursorYX(0,0);
 }
 
 /* ------------------------------------------------------------------------- */
 /*                                                                           */
 /*                          Terminal to Host protocol                        */
 /*                                                                           */
 /* ------------------------------------------------------------------------- */
 
-/* 
+/*
    Outgoing bytes originate from several sources:
 
    - Replies to Enquieries.
    - Mouse Events
    - Keyboard Events
 */
 
 /*!
@@ -894,46 +895,46 @@ void Vt102Emulation::reportAnswerBack()
     and paste, but may be propagated from the widget
     when gui->setMouseMarks is set via setMode(MODE_Mouse1000).
 
     `x',`y' are 1-based.
     `ev' (event) indicates the button pressed (0-2)
                  or a general mouse release (3).
 
     eventType represents the kind of mouse action that occurred:
-    	0 = Mouse button press or release
-	1 = Mouse drag
+        0 = Mouse button press or release
+    1 = Mouse drag
 */
 
 void Vt102Emulation::sendMouseEvent( int cb, int cx, int cy , int eventType )
 { char tmp[20];
   if (  cx<1 || cy<1 ) return;
   // normal buttons are passed as 0x20 + button,
   // mouse wheel (buttons 4,5) as 0x5c + button
   if (cb >= 4) cb += 0x3c;
 
   //Mouse motion handling
   if ( (getMode(MODE_Mouse1002) || getMode(MODE_Mouse1003)) && eventType == 1 )
-	  cb += 0x20; //add 32 to signify motion event
+      cb += 0x20; //add 32 to signify motion event
 
   sprintf(tmp,"\033[M%c%c%c",cb+0x20,cx+0x20,cy+0x20);
   sendString(tmp);
 }
 
 // Keyboard Handling ------------------------------------------------------- --
 
 #define encodeMode(M,B) BITS(B,getMode(M))
 #define encodeStat(M,B) BITS(B,((ev->modifiers() & (M)) == (M)))
 
 void Vt102Emulation::sendText( const QString& text )
 {
   if (!text.isEmpty()) {
-    QKeyEvent event(QEvent::KeyPress, 
-                    0, 
-                    Qt::NoModifier, 
+    QKeyEvent event(QEvent::KeyPress,
+                    0,
+                    Qt::NoModifier,
                     text);
     sendKeyEvent(&event); // expose as a big fat keypress event
   }
 
 }
 
 void Vt102Emulation::sendKeyEvent( QKeyEvent* event )
 {
@@ -944,86 +945,86 @@ void Vt102Emulation::sendKeyEvent( QKeyE
     if ( getMode(MODE_NewLine)  ) states |= KeyboardTranslator::NewLineState;
     if ( getMode(MODE_Ansi)     ) states |= KeyboardTranslator::AnsiState;
     if ( getMode(MODE_AppCuKeys)) states |= KeyboardTranslator::CursorKeysState;
     if ( getMode(MODE_AppScreen)) states |= KeyboardTranslator::AlternateScreenState;
 
     // lookup key binding
     if ( _keyTranslator )
     {
-    KeyboardTranslator::Entry entry = _keyTranslator->findEntry( 
-                                                event->key() , 
+    KeyboardTranslator::Entry entry = _keyTranslator->findEntry(
+                                                event->key() ,
                                                 modifiers,
                                                 states );
 
         // send result to terminal
         QByteArray textToSend;
 
         // special handling for the Alt (aka. Meta) modifier.  pressing
         // Alt+[Character] results in Esc+[Character] being sent
         // (unless there is an entry defined for this particular combination
         //  in the keyboard modifier)
         bool wantsAltModifier = entry.modifiers() & entry.modifierMask() & Qt::AltModifier;
-		bool wantsAnyModifier = entry.state() & entry.stateMask() & KeyboardTranslator::AnyModifierState;
+        bool wantsAnyModifier = entry.state() & entry.stateMask() & KeyboardTranslator::AnyModifierState;
 
-        if ( modifiers & Qt::AltModifier && !(wantsAltModifier || wantsAnyModifier) 
+        if ( modifiers & Qt::AltModifier && !(wantsAltModifier || wantsAnyModifier)
              && !event->text().isEmpty() )
         {
             textToSend.prepend("\033");
         }
 
         if ( entry.command() != KeyboardTranslator::NoCommand )
         {
-			if (entry.command() & KeyboardTranslator::EraseCommand)
-				textToSend += getErase();
+            if (entry.command() & KeyboardTranslator::EraseCommand)
+                textToSend += getErase();
             // TODO command handling
         }
-        else if ( !entry.text().isEmpty() ) 
+        else if ( !entry.text().isEmpty() )
         {
             textToSend += _codec->fromUnicode(entry.text(true,modifiers));
         }
         else
             textToSend += _codec->fromUnicode(event->text());
 
         sendData( textToSend.constData() , textToSend.length() );
     }
     else
     {
         // print an error message to the terminal if no key translator has been
         // set
         QString translatorError =  ("No keyboard translator available.  "
                                          "The information needed to convert key presses "
-                                         "into characters to send to the terminal " 
+                                         "into characters to send to the terminal "
                                          "is missing.");
 
         reset();
         receiveData( translatorError.toAscii().constData() , translatorError.count() );
     }
 }
 
 /* ------------------------------------------------------------------------- */
 /*                                                                           */
 /*                                VT100 Charsets                             */
 /*                                                                           */
 /* ------------------------------------------------------------------------- */
 
 // Character Set Conversion ------------------------------------------------ --
 
-/* 
+/*
    The processing contains a VT100 specific code translation layer.
    It's still in use and mainly responsible for the line drawing graphics.
 
    These and some other glyphs are assigned to codes (0x5f-0xfe)
    normally occupied by the latin letters. Since this codes also
    appear within control sequences, the extra code conversion
    does not permute with the tokenizer and is placed behind it
    in the pipeline. It only applies to tokens, which represent
    plain characters.
 
-   This conversion it eventually continued in TerminalDisplay.C, since 
+   This conversion it eventually continued in TerminalDisplay.C, since
    it might involve VT100 enhanced fonts, which have these
    particular glyphs allocated in (0x00-0x1f) in their code page.
 */
 
 #define CHARSET _charset[_currentScreen==_screen[1]]
 
 // Apply current character map.
 
@@ -1068,18 +1069,18 @@ void Vt102Emulation::useCharset(int n)
 {
   CHARSET.cu_cs   = n&3;
   CHARSET.graphic = (CHARSET.charset[n&3] == '0');
   CHARSET.pound   = (CHARSET.charset[n&3] == 'A'); //This mode is obsolete
 }
 
 void Vt102Emulation::setDefaultMargins()
 {
-	_screen[0]->setDefaultMargins();
-	_screen[1]->setDefaultMargins();
+    _screen[0]->setDefaultMargins();
+    _screen[1]->setDefaultMargins();
 }
 
 void Vt102Emulation::setMargins(int t, int b)
 {
   _screen[0]->setMargins(t, b);
   _screen[1]->setMargins(t, b);
 }
 
@@ -1142,17 +1143,17 @@ void Vt102Emulation::setMode(int m)
 {
   _currParm.mode[m] = true;
   switch (m)
   {
     case MODE_Mouse1000:
     case MODE_Mouse1001:
     case MODE_Mouse1002:
     case MODE_Mouse1003:
- 	    emit programUsesMouseChanged(false); 
+        emit programUsesMouseChanged(false);
     break;
 
     case MODE_AppScreen : _screen[1]->clearSelection();
                           setScreen(1);
     break;
   }
   if (m < MODES_SCREEN || m == MODE_NewLine)
   {
@@ -1161,21 +1162,21 @@ void Vt102Emulation::setMode(int m)
   }
 }
 
 void Vt102Emulation::resetMode(int m)
 {
   _currParm.mode[m] = false;
   switch (m)
   {
-    case MODE_Mouse1000 : 
+    case MODE_Mouse1000 :
     case MODE_Mouse1001 :
     case MODE_Mouse1002 :
     case MODE_Mouse1003 :
-	    emit programUsesMouseChanged(true); 
+        emit programUsesMouseChanged(true);
     break;
 
     case MODE_AppScreen : _screen[0]->clearSelection();
                           setScreen(0);
     break;
   }
   if (m < MODES_SCREEN || m == MODE_NewLine)
   {
@@ -1186,19 +1187,19 @@ void Vt102Emulation::resetMode(int m)
 
 void Vt102Emulation::saveMode(int m)
 {
   _saveParm.mode[m] = _currParm.mode[m];
 }
 
 void Vt102Emulation::restoreMode(int m)
 {
-  if (_saveParm.mode[m]) 
-      setMode(m); 
-  else 
+  if (_saveParm.mode[m])
+      setMode(m);
+  else
       resetMode(m);
 }
 
 bool Vt102Emulation::getMode(int m)
 {
   return _currParm.mode[m];
 }
 
@@ -1239,17 +1240,17 @@ static void hexdump(int* s, int len)
       printf("%c",s[i]);
     else
       printf("\\%04x(hex)",s[i]);
   }
 }
 
 void Vt102Emulation::scan_buffer_report() {
   if (ppos == 0 || (ppos == 1 && (pbuf[0] & 0xff) >= 32)) {
-	return;
+    return;
   }
   printf("token: ");
   hexdump(pbuf,ppos);
   printf("\n");
 }
 
 /*!
 */
