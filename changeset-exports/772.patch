# HG changeset patch
# User jwe
# Date 781395141 0
#      Wed Oct 05 22:12:21 1994 +0000
# Node ID 05cd8c8b13b304615aa98bf7cead892c3e8fa3d4
# Parent  e16a175a8bb53655513a203ac6f5a5a240dd7307
[project @ 1994-10-05 22:10:27 by jwe]

diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -1374,19 +1374,19 @@ tree_prefix_expression::eval (int print)
 }
 
 char *
 tree_prefix_expression::oper (void) const
 {
   static char *op;
   switch (etype)
     {
-    case tree_expression::increment: op = "++";      break;
-    case tree_expression::decrement: op = "--";      break;
-    default:                         op = "unknown"; break;
+    case tree_expression::increment: op = "++";        break;
+    case tree_expression::decrement: op = "--";        break;
+    default:                         op = "<unknown>"; break;
     }
   return op;
 }
 
 void
 tree_prefix_expression::eval_error (void)
 {
   if (error_state > 0)
@@ -1440,19 +1440,19 @@ tree_postfix_expression::eval (int print
 }
 
 char *
 tree_postfix_expression::oper (void) const
 {
   static char *op;
   switch (etype)
     {
-    case tree_expression::increment: op = "++";      break;
-    case tree_expression::decrement: op = "--";      break;
-    default:                         op = "unknown"; break;
+    case tree_expression::increment: op = "++";        break;
+    case tree_expression::decrement: op = "--";        break;
+    default:                         op = "<unknown>"; break;
     }
   return op;
 }
 
 void
 tree_postfix_expression::eval_error (void)
 {
   if (error_state > 0)
@@ -1523,21 +1523,21 @@ tree_unary_expression::eval (int print)
 }
 
 char *
 tree_unary_expression::oper (void) const
 {
   static char *op;
   switch (etype)
     {
-    case tree_expression::not:        op = "!";       break;
-    case tree_expression::uminus:     op = "-";       break;
-    case tree_expression::hermitian:  op = "'";       break;
-    case tree_expression::transpose:  op = ".'";      break;
-    default:                          op = "unknown"; break;
+    case tree_expression::not:        op = "!";         break;
+    case tree_expression::uminus:     op = "-";         break;
+    case tree_expression::hermitian:  op = "'";         break;
+    case tree_expression::transpose:  op = ".'";        break;
+    default:                          op = "<unknown>"; break;
     }
   return op;
 }
 
 void
 tree_unary_expression::eval_error (void)
 {
   if (error_state > 0)
@@ -1567,17 +1567,19 @@ tree_unary_expression::print_code (ostre
       break;
     case tree_expression::hermitian:
     case tree_expression::transpose:
       if (op)
 	op->print_code (os);
       os << oper ();
       break;
     default:
-      panic_impossible ();
+      os << oper ();
+      if (op)
+	op->print_code (os);
       break;
     }
 
   if (in_parens)
     os << ")";
 }
 
 // Binary expressions.
@@ -1700,37 +1702,37 @@ tree_binary_expression::eval (int print)
 }
 
 char *
 tree_binary_expression::oper (void) const
 {
   static char *op;
   switch (etype)
     {
-    case tree_expression::add:        op = "+";       break;
-    case tree_expression::subtract:   op = "-";       break;
-    case tree_expression::multiply:   op = "*";       break;
-    case tree_expression::el_mul:     op = ".*";      break;
-    case tree_expression::divide:     op = "/";       break;
-    case tree_expression::el_div:     op = "./";      break;
-    case tree_expression::leftdiv:    op = "\\";      break;
-    case tree_expression::el_leftdiv: op = ".\\";     break;
-    case tree_expression::power:      op = "^";       break;
-    case tree_expression::elem_pow:   op = ".^";      break;
-    case tree_expression::cmp_lt:     op = "<";       break;
-    case tree_expression::cmp_le:     op = "<=";      break;
-    case tree_expression::cmp_eq:     op = "==";      break;
-    case tree_expression::cmp_ge:     op = ">=";      break;
-    case tree_expression::cmp_gt:     op = ">";       break;
-    case tree_expression::cmp_ne:     op = "!=";      break;
-    case tree_expression::and_and:    op = "&&";      break;
-    case tree_expression::or_or:      op = "||";      break;
-    case tree_expression::and:        op = "&";       break;
-    case tree_expression::or:         op = "|";       break;
-    default:                          op = "unknown"; break;
+    case tree_expression::add:        op = "+";         break;
+    case tree_expression::subtract:   op = "-";         break;
+    case tree_expression::multiply:   op = "*";         break;
+    case tree_expression::el_mul:     op = ".*";        break;
+    case tree_expression::divide:     op = "/";         break;
+    case tree_expression::el_div:     op = "./";        break;
+    case tree_expression::leftdiv:    op = "\\";        break;
+    case tree_expression::el_leftdiv: op = ".\\";       break;
+    case tree_expression::power:      op = "^";         break;
+    case tree_expression::elem_pow:   op = ".^";        break;
+    case tree_expression::cmp_lt:     op = "<";         break;
+    case tree_expression::cmp_le:     op = "<=";        break;
+    case tree_expression::cmp_eq:     op = "==";        break;
+    case tree_expression::cmp_ge:     op = ">=";        break;
+    case tree_expression::cmp_gt:     op = ">";         break;
+    case tree_expression::cmp_ne:     op = "!=";        break;
+    case tree_expression::and_and:    op = "&&";        break;
+    case tree_expression::or_or:      op = "||";        break;
+    case tree_expression::and:        op = "&";         break;
+    case tree_expression::or:         op = "|";         break;
+    default:                          op = "<unknown>"; break;
     }
   return op;
 }
 
 void
 tree_binary_expression::eval_error (void)
 {
   if (error_state > 0)
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -497,17 +497,17 @@ tree_if_clause::eval (void)
 
       int expr_value = 0;
 
       if (t1.is_real_scalar ())
 	expr_value = (int) t1.double_value ();
       else if (t1.is_complex_scalar ())
 	expr_value = t1.complex_value () != 0.0;
       else
-	panic_impossible ();
+	error ("if: all (all (cond)) is not a scalar");
 
       if (expr_value)
 	{
 	  if (list)
 	    list->eval (1);
 
 	  return 1;
 	}
