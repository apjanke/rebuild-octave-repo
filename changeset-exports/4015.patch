# HG changeset patch
# User jwe
# Date 1028275160 0
#      Fri Aug 02 07:59:20 2002 +0000
# Node ID 6476dd85a65ffbbe5e052a60d28f2ed7a0451715
# Parent  8eaf7182d48a02342188ce5f4af12897bddf9ddb
[project @ 2002-08-02 07:59:19 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2328,134 +2328,41 @@ ComplexMatrix::too_large_for_float (void
 	    || r_val < FLT_MIN
 	    || i_val < FLT_MIN)
 	  return true;
       }
 
   return false;
 }
 
+// XXX FIXME XXX Do these really belong here?  Maybe they should be
+// in a base class?
+
 boolMatrix
-ComplexMatrix::all (void) const
+ComplexMatrix::all (int dim) const
 {
-  int nr = rows ();
-  int nc = cols ();
-  boolMatrix retval;
-  if (nr > 0 && nc > 0)
-    {
-      if (nr == 1)
-	{
-	  retval.resize (1, 1);
-	  retval.elem (0, 0) = true;
-	  for (int j = 0; j < nc; j++)
-	    {
-	      if (elem (0, j) == 0.0)
-		{
-		  retval.elem (0, 0) = false;
-		  break;
-		}
-	    }
-	}
-      else if (nc == 1)
-	{
-	  retval.resize (1, 1);
-	  retval.elem (0, 0) = true;
-	  for (int i = 0; i < nr; i++)
-	    {
-	      if (elem (i, 0) == 0.0)
-		{
-		  retval.elem (0, 0) = false;
-		  break;
-		}
-	    }
-	}
-      else
-	{
-	  retval.resize (1, nc);
-	  for (int j = 0; j < nc; j++)
-	    {
-	      retval.elem (0, j) = true;
-	      for (int i = 0; i < nr; i++)
-		{
-		  if (elem (i, j) == 0.0)
-		    {
-		      retval.elem (0, j) = false;
-		      break;
-		    }
-		}
-	    }
-	}
-    }
-  return retval;
+  MX_ALL_OP (dim);
 }
 
 boolMatrix
-ComplexMatrix::any (void) const
+ComplexMatrix::any (int dim) const
 {
-  int nr = rows ();
-  int nc = cols ();
-  boolMatrix retval;
-  if (nr > 0 && nc > 0)
-    {
-      if (nr == 1)
-	{
-	  retval.resize (1, 1);
-	  retval.elem (0, 0) = false;
-	  for (int j = 0; j < nc; j++)
-	    {
-	      if (elem (0, j) != 0.0)
-		{
-		  retval.elem (0, 0) = true;
-		  break;
-		}
-	    }
-	}
-      else if (nc == 1)
-	{
-	  retval.resize (1, 1);
-	  retval.elem (0, 0) = false;
-	  for (int i = 0; i < nr; i++)
-	    {
-	      if (elem (i, 0) != 0.0)
-		{
-		  retval.elem (0, 0) = true;
-		  break;
-		}
-	    }
-	}
-      else
-	{
-	  retval.resize (1, nc);
-	  for (int j = 0; j < nc; j++)
-	    {
-	      retval.elem (0, j) = false;
-	      for (int i = 0; i < nr; i++)
-		{
-		  if (elem (i, j) != 0.0)
-		    {
-		      retval.elem (0, j) = true;
-		      break;
-		    }
-		}
-	    }
-	}
-    }
-  return retval;
+  MX_ANY_OP (dim);
 }
 
 ComplexMatrix
 ComplexMatrix::cumprod (int dim) const
 {
-  MX_CUMMULATIVE_OP (ComplexMatrix, Complex, *=);
+  MX_CUMULATIVE_OP (ComplexMatrix, Complex, *=);
 }
 
 ComplexMatrix
 ComplexMatrix::cumsum (int dim) const
 {
-  MX_CUMMULATIVE_OP (ComplexMatrix, Complex, +=);
+  MX_CUMULATIVE_OP (ComplexMatrix, Complex, +=);
 }
 
 ComplexMatrix
 ComplexMatrix::prod (int dim) const
 {
   MX_REDUCTION_OP (ComplexMatrix, *=, 1.0, 1.0);
 }
 
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -236,18 +236,18 @@ public:
 
   ComplexMatrix& apply (c_c_Mapper f);
 
   bool any_element_is_inf_or_nan (void) const;
   bool all_elements_are_real (void) const;
   bool all_integers (double& max_val, double& min_val) const;
   bool too_large_for_float (void) const;
 
-  boolMatrix all (void) const;
-  boolMatrix any (void) const;
+  boolMatrix all (int dim = 0) const;
+  boolMatrix any (int dim = 0) const;
 
   ComplexMatrix cumprod (int dim = 0) const;
   ComplexMatrix cumsum (int dim = 0) const;
   ComplexMatrix prod (int dim = 0) const;
   ComplexMatrix sum (int dim = 0) const;
   ComplexMatrix sumsq (int dim = 0) const;
 
   ComplexColumnVector diag (void) const;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,40 @@
+2002-08-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* mx-inlines.cc (MX_ANY_ALL_OP_ROW_CODE, MX_ANY_ALL_OP_COL_CODE):
+	New macros.
+	(MX_ANY_ALL_OP): Define MX_ANY_ALL_OP using them and
+	MX_BASE_REDUCTION_OP.
+	(MX_CUMULATIVE_OP): Fix spelling.  Change all uses.
+
 2002-08-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* chMatrix.h, chMatrix.cc (charMatrix::any, charMatrix::all):
+	Return boolMatrix, not Matrix.
+
+	* mx-inlines.cc (MX_ANY_ALL_OP, MX_ALL_OP, MX_ANY_OP): New macros.
+	* dMatrix.cc (Matrix::any): Replace guts with MX_ANY_OP.
+	(Matrix::all): Replace guts with MX_ALL_OP.
+	* CMatrix.cc (ComplexMatrix::any): Replace guts with MX_ANY_OP.
+	(ComplexMatrix::all): Replace guts with MX_ALL_OP.
+	* boolMatrix.cc (boolMatrix::any): Replace guts with MX_ANY_OP.
+	(boolMatrix::all): Replace guts with MX_ALL_OP.
+	* chMatrix.cc (charMatrix::any): Replace guts with MX_ANY_OP.
+	(charMatrix::all): Replace guts with MX_ALL_OP.
+
+	* dMatrix.h (Matrix::any): New arg, dim.
+	(Matrix::all): Likewise.
+	* CMatrix.h (ComplexMatrix::any): Likewise.
+	(ComplexMatrix::all): Likewise.
+	* boolMatrix.h (boolMatrix::any): Likewise.
+	(boolMatrix::all): Likewise.
+	* chMatrix.h (charMatrix::any): Likewise.
+	(charMatrix::all): Likewise.
+
 	* Makefile.in: Use $@-t instead of $@.t.
 
 2002-07-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-specfun.cc (gammainc): New arg, err, for scalar version.
 	Use it in matrix versions to avoid spewing multiple errors.
 	Call xgammainc instead of dgamit.
 
diff --git a/liboctave/boolMatrix.cc b/liboctave/boolMatrix.cc
--- a/liboctave/boolMatrix.cc
+++ b/liboctave/boolMatrix.cc
@@ -74,122 +74,29 @@ boolMatrix::operator ! (void) const
     for (int i = 0; i < nr; i++)
       b.elem (i, j) = ! elem (i, j);
 
   return b;
 }
 
 // other operations
 
+// XXX FIXME XXX Do these really belong here?  Maybe they should be
+// in a base class?
+
 boolMatrix
-boolMatrix::all (void) const
+boolMatrix::all (int dim) const
 {
-  int nr = rows ();
-  int nc = cols ();
-  boolMatrix retval;
-  if (nr > 0 && nc > 0)
-    {
-      if (nr == 1)
-	{
-	  retval.resize (1, 1);
-	  retval.elem (0, 0) = true;
-	  for (int j = 0; j < nc; j++)
-	    {
-	      if (! elem (0, j))
-		{
-		  retval.elem (0, 0) = false;
-		  break;
-		}
-	    }
-	}
-      else if (nc == 1)
-	{
-	  retval.resize (1, 1);
-	  retval.elem (0, 0) = true;
-	  for (int i = 0; i < nr; i++)
-	    {
-	      if (! elem (i, 0))
-		{
-		  retval.elem (0, 0) = false;
-		  break;
-		}
-	    }
-	}
-      else
-	{
-	  retval.resize (1, nc);
-	  for (int j = 0; j < nc; j++)
-	    {
-	      retval.elem (0, j) = true;
-	      for (int i = 0; i < nr; i++)
-		{
-		  if (! elem (i, j))
-		    {
-		      retval.elem (0, j) = false;
-		      break;
-		    }
-		}
-	    }
-	}
-    }
-  return retval;
+  MX_ALL_OP (dim);
 }
 
 boolMatrix
-boolMatrix::any (void) const
+boolMatrix::any (int dim) const
 {
-  int nr = rows ();
-  int nc = cols ();
-  boolMatrix retval;
-  if (nr > 0 && nc > 0)
-    {
-      if (nr == 1)
-	{
-	  retval.resize (1, 1);
-	  retval.elem (0, 0) = false;
-	  for (int j = 0; j < nc; j++)
-	    {
-	      if (elem (0, j))
-		{
-		  retval.elem (0, 0) = true;
-		  break;
-		}
-	    }
-	}
-      else if (nc == 1)
-	{
-	  retval.resize (1, 1);
-	  retval.elem (0, 0) = false;
-	  for (int i = 0; i < nr; i++)
-	    {
-	      if (elem (i, 0))
-		{
-		  retval.elem (0, 0) = true;
-		  break;
-		}
-	    }
-	}
-      else
-	{
-	  retval.resize (1, nc);
-	  for (int j = 0; j < nc; j++)
-	    {
-	      retval.elem (0, j) = false;
-	      for (int i = 0; i < nr; i++)
-		{
-		  if (elem (i, j))
-		    {
-		      retval.elem (0, j) = true;
-		      break;
-		    }
-		}
-	    }
-	}
-    }
-  return retval;
+  MX_ANY_OP (dim);
 }
 
 MM_CMP_OPS(boolMatrix, , boolMatrix, )
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/boolMatrix.h b/liboctave/boolMatrix.h
--- a/liboctave/boolMatrix.h
+++ b/liboctave/boolMatrix.h
@@ -59,18 +59,18 @@ public:
   boolMatrix& insert (const boolMatrix& a, int r, int c);
 
   // unary operations
 
   boolMatrix operator ! (void) const;
 
   // other operations
 
-  boolMatrix all (void) const;
-  boolMatrix any (void) const;
+  boolMatrix all (int dim = 0) const;
+  boolMatrix any (int dim = 0) const;
 
 #if 0
   // i/o
 
   friend std::ostream& operator << (std::ostream& os, const Matrix& a);
   friend std::istream& operator >> (std::istream& is, Matrix& a);
 #endif
 
diff --git a/liboctave/chMatrix.cc b/liboctave/chMatrix.cc
--- a/liboctave/chMatrix.cc
+++ b/liboctave/chMatrix.cc
@@ -187,124 +187,28 @@ charMatrix::extract (int r1, int c1, int
 
   for (int j = 0; j < new_c; j++)
     for (int i = 0; i < new_r; i++)
       result.elem (i, j) = elem (r1+i, c1+j);
 
   return result;
 }
 
-// XXX FIXME XXX -- these should probably return a boolMatrix type
-// instead, but that will have to wait for a future version...
+// XXX FIXME XXX Do these really belong here?  Maybe they should be
+// in a base class?
 
-Matrix
-charMatrix::all (void) const
+boolMatrix
+charMatrix::all (int dim) const
 {
-  int nr = rows ();
-  int nc = cols ();
-  Matrix retval;
-  if (nr > 0 && nc > 0)
-    {
-      if (nr == 1)
-	{
-	  retval.resize (1, 1);
-	  retval.elem (0, 0) = 1.0;
-	  for (int j = 0; j < nc; j++)
-	    {
-	      if (elem (0, j) == 0)
-		{
-		  retval.elem (0, 0) = 0.0;
-		  break;
-		}
-	    }
-	}
-      else if (nc == 1)
-	{
-	  retval.resize (1, 1);
-	  retval.elem (0, 0) = 1.0;
-	  for (int i = 0; i < nr; i++)
-	    {
-	      if (elem (i, 0) == 0)
-		{
-		  retval.elem (0, 0) = 0.0;
-		  break;
-		}
-	    }
-	}
-      else
-	{
-	  retval.resize (1, nc);
-	  for (int j = 0; j < nc; j++)
-	    {
-	      retval.elem (0, j) = 1.0;
-	      for (int i = 0; i < nr; i++)
-		{
-		  if (elem (i, j) == 0)
-		    {
-		      retval.elem (0, j) = 0.0;
-		      break;
-		    }
-		}
-	    }
-	}
-    }
-  return retval;
+  MX_ALL_OP (dim);
 }
 
-Matrix
-charMatrix::any (void) const
+boolMatrix
+charMatrix::any (int dim) const
 {
-  int nr = rows ();
-  int nc = cols ();
-  Matrix retval;
-  if (nr > 0 && nc > 0)
-    {
-      if (nr == 1)
-	{
-	  retval.resize (1, 1);
-	  retval.elem (0, 0) = 0.0;
-	  for (int j = 0; j < nc; j++)
-	    {
-	      if (elem (0, j) != 0)
-		{
-		  retval.elem (0, 0) = 1.0;
-		  break;
-		}
-	    }
-	}
-      else if (nc == 1)
-	{
-	  retval.resize (1, 1);
-	  retval.elem (0, 0) = 0.0;
-	  for (int i = 0; i < nr; i++)
-	    {
-	      if (elem (i, 0) != 0)
-		{
-		  retval.elem (0, 0) = 1.0;
-		  break;
-		}
-	    }
-	}
-      else
-	{
-	  retval.resize (1, nc);
-	  for (int j = 0; j < nc; j++)
-	    {
-	      retval.elem (0, j) = 0.0;
-	      for (int i = 0; i < nr; i++)
-		{
-		  if (elem (i, j) != 0)
-		    {
-		      retval.elem (0, j) = 1.0;
-		      break;
-		    }
-		}
-	    }
-	}
-    }
-  return retval;
+  MX_ANY_OP (dim);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/chMatrix.h b/liboctave/chMatrix.h
--- a/liboctave/chMatrix.h
+++ b/liboctave/chMatrix.h
@@ -66,18 +66,18 @@ public:
   charMatrix& insert (const charMatrix& a, int r, int c);
 
   std::string row_as_string (int, bool strip_ws = false, bool raw = false) const;
 
   // resize is the destructive equivalent for this one
 
   charMatrix extract (int r1, int c1, int r2, int c2) const;
 
-  Matrix all (void) const;
-  Matrix any (void) const;
+  boolMatrix all (int dim = 0) const;
+  boolMatrix any (int dim = 0) const;
 
 #if 0
   // i/o
 
   friend std::ostream& operator << (std::ostream& os, const Matrix& a);
   friend std::istream& operator >> (std::istream& is, Matrix& a);
 #endif
 
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -1871,138 +1871,41 @@ Matrix::too_large_for_float (void) const
 
 	if (val > FLT_MAX || val < FLT_MIN)
 	  return true;
       }
 
   return false;
 }
 
-// XXX FIXME XXX Do these really belong here?  They should maybe be
-// cleaned up a bit, no?  What about corresponding functions for the
-// Vectors?
+// XXX FIXME XXX Do these really belong here?  Maybe they should be
+// in a base class?
 
 boolMatrix
-Matrix::all (void) const
+Matrix::all (int dim) const
 {
-  int nr = rows ();
-  int nc = cols ();
-  boolMatrix retval;
-  if (nr > 0 && nc > 0)
-    {
-      if (nr == 1)
-	{
-	  retval.resize (1, 1);
-	  retval.elem (0, 0) = true;
-	  for (int j = 0; j < nc; j++)
-	    {
-	      if (elem (0, j) == 0.0)
-		{
-		  retval.elem (0, 0) = false;
-		  break;
-		}
-	    }
-	}
-      else if (nc == 1)
-	{
-	  retval.resize (1, 1);
-	  retval.elem (0, 0) = true;
-	  for (int i = 0; i < nr; i++)
-	    {
-	      if (elem (i, 0) == 0.0)
-		{
-		  retval.elem (0, 0) = false;
-		  break;
-		}
-	    }
-	}
-      else
-	{
-	  retval.resize (1, nc);
-	  for (int j = 0; j < nc; j++)
-	    {
-	      retval.elem (0, j) = true;
-	      for (int i = 0; i < nr; i++)
-		{
-		  if (elem (i, j) == 0.0)
-		    {
-		      retval.elem (0, j) = false;
-		      break;
-		    }
-		}
-	    }
-	}
-    }
-  return retval;
+  MX_ALL_OP (dim);
 }
 
 boolMatrix
-Matrix::any (void) const
+Matrix::any (int dim) const
 {
-  int nr = rows ();
-  int nc = cols ();
-  boolMatrix retval;
-  if (nr > 0 && nc > 0)
-    {
-      if (nr == 1)
-	{
-	  retval.resize (1, 1);
-	  retval.elem (0, 0) = false;
-	  for (int j = 0; j < nc; j++)
-	    {
-	      if (elem (0, j) != 0.0)
-		{
-		  retval.elem (0, 0) = true;
-		  break;
-		}
-	    }
-	}
-      else if (nc == 1)
-	{
-	  retval.resize (1, 1);
-	  retval.elem (0, 0) = false;
-	  for (int i = 0; i < nr; i++)
-	    {
-	      if (elem (i, 0) != 0.0)
-		{
-		  retval.elem (0, 0) = true;
-		  break;
-		}
-	    }
-	}
-      else
-	{
-	  retval.resize (1, nc);
-	  for (int j = 0; j < nc; j++)
-	    {
-	      retval.elem (0, j) = false;
-	      for (int i = 0; i < nr; i++)
-		{
-		  if (elem (i, j) != 0.0)
-		    {
-		      retval.elem (0, j) = true;
-		      break;
-		    }
-		}
-	    }
-	}
-    }
-  return retval;
+  MX_ANY_OP (dim);
 }
 
 Matrix
 Matrix::cumprod (int dim) const
 {
-  MX_CUMMULATIVE_OP (Matrix, double, *=);
+  MX_CUMULATIVE_OP (Matrix, double, *=);
 }
 
 Matrix
 Matrix::cumsum (int dim) const
 {
-  MX_CUMMULATIVE_OP (Matrix, double, +=);
+  MX_CUMULATIVE_OP (Matrix, double, +=);
 }
 
 Matrix
 Matrix::prod (int dim) const
 {
   MX_REDUCTION_OP (Matrix, *=, 1.0, 1.0);
 }
 
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -192,18 +192,18 @@ public:
   Matrix& apply (d_d_Mapper f);
 
   bool any_element_is_negative (void) const;
   bool any_element_is_inf_or_nan (void) const;
   bool all_elements_are_int_or_inf_or_nan (void) const;
   bool all_integers (double& max_val, double& min_val) const;
   bool too_large_for_float (void) const;
  
-  boolMatrix all (void) const;
-  boolMatrix any (void) const;
+  boolMatrix all (int dim = 0) const;
+  boolMatrix any (int dim = 0) const;
 
   Matrix cumprod (int dim = 0) const; //optional dimension argument
   Matrix cumsum (int dim = 0) const;
   Matrix prod (int dim = 0) const;
   Matrix sum (int dim = 0) const;
   Matrix sumsq (int dim = 0) const;
   Matrix abs (void) const;
 
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -224,17 +224,17 @@ OP_DUP_FCN (-, mx_inline_change_sign, do
 OP_DUP_FCN (-, mx_inline_change_sign, Complex, Complex)
 
 OP_DUP_FCN (real, mx_inline_real_dup, double,  Complex)
 OP_DUP_FCN (imag, mx_inline_imag_dup, double,  Complex)
 OP_DUP_FCN (conj, mx_inline_conj_dup, Complex, Complex)
 
 // Avoid some code duplication.  Maybe we should use templates.
 
-#define MX_CUMMULATIVE_OP(RET_TYPE, ELT_TYPE, OP) \
+#define MX_CUMULATIVE_OP(RET_TYPE, ELT_TYPE, OP) \
  \
   int nr = rows (); \
   int nc = cols (); \
  \
   RET_TYPE retval (nr, nc); \
  \
   if (nr > 0 && nc > 0) \
     { \
@@ -298,34 +298,65 @@ OP_DUP_FCN (conj, mx_inline_conj_dup, Co
 	      retval.elem (0, j) = INIT_VAL; \
 	      for (int i = 0; i < nr; i++) \
 		{ \
 		  COL_EXPR; \
 		} \
 	    } \
 	} \
     } \
-  else \
+  else if (nr == 0 && nc == 0) \
     { \
       retval.resize (1, 1); \
       retval.elem (0, 0) = MT_RESULT; \
     } \
+  else if (nr == 0 && (dim == 0 || dim == -1)) \
+    retval.resize (1, nc, MT_RESULT); \
+  else if (nc == 0 && dim == 1) \
+    retval.resize (nr, 1, MT_RESULT); \
+  else \
+    retval.resize (nr, nc); \
  \
   return retval
 
 #define MX_REDUCTION_OP_ROW_EXPR(OP) \
   retval.elem (i, 0) OP elem (i, j)
 
 #define MX_REDUCTION_OP_COL_EXPR(OP) \
   retval.elem (0, j) OP elem (i, j)
 
 #define MX_REDUCTION_OP(RET_TYPE, OP, INIT_VAL, MT_RESULT) \
   MX_BASE_REDUCTION_OP (RET_TYPE, \
 			MX_REDUCTION_OP_ROW_EXPR (OP), \
 			MX_REDUCTION_OP_COL_EXPR (OP), \
 			INIT_VAL, MT_RESULT)
+
+#define MX_ANY_ALL_OP_ROW_CODE(TEST_OP, TEST_TRUE_VAL) \
+  if (elem (i, j) TEST_OP 0.0) \
+    { \
+      retval.elem (i, 0) = TEST_TRUE_VAL; \
+      break; \
+    }
+
+#define MX_ANY_ALL_OP_COL_CODE(TEST_OP, TEST_TRUE_VAL) \
+  if (elem (i, j) TEST_OP 0.0) \
+    { \
+      retval.elem (0, j) = TEST_TRUE_VAL; \
+      break; \
+    }
+
+#define MX_ANY_ALL_OP(DIM, INIT_VAL, TEST_OP, TEST_TRUE_VAL) \
+  MX_BASE_REDUCTION_OP (boolMatrix, \
+			MX_ANY_ALL_OP_ROW_CODE (TEST_OP, TEST_TRUE_VAL), \
+			MX_ANY_ALL_OP_COL_CODE (TEST_OP, TEST_TRUE_VAL), \
+			INIT_VAL, INIT_VAL)
+
+#define MX_ALL_OP(DIM) MX_ANY_ALL_OP (DIM, true, ==, false)
+
+#define MX_ANY_OP(DIM) MX_ANY_ALL_OP (DIM, false, !=, true)
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/Cell.h b/src/Cell.h
--- a/src/Cell.h
+++ b/src/Cell.h
@@ -54,20 +54,20 @@ public:
 
   Cell (const Array<octave_value>& c, int nr, int nc)
     : Array2<octave_value> (c, nr, nc) { }
 
   Cell (const Cell& c)
     : Array2<octave_value> (c) { }
 
   // XXX FIXME XXX
-  boolMatrix all (void) const { return boolMatrix (); }
+  boolMatrix all (int dim = 0) const { return boolMatrix (); }
 
   // XXX FIXME XXX
-  boolMatrix any (void) const { return boolMatrix (); }
+  boolMatrix any (int dim = 0) const { return boolMatrix (); }
 
   // XXX FIXME XXX
   bool is_true (void) const { return false; }
 
   static octave_value resize_fill_value (void) { return octave_value (); }
 };
 
 #endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,24 @@
+2002-08-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* data.cc (ANY_ALL): New macro.
+	(Fany, Fall): Replace guts with ANY_ALL.
+
 2002-08-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* data.cc (Fall, Fany): Handle optional DIM argument.
+
+	* ov.h (octave_value::any): New arg, dim.
+	(octave_value::all): Likewise.
+	* ov-base.h (octave_base_value::any): Likewise.
+	(octave_base_value::all): Likewise.
+	* ov-base-mat.h (octave_base_matrix::any): Likewise.
+	(octave_base_matrix::all): Likewise.
+
 	* Makefile.in: Use $@-t instead of $@.t.
 	(doc-files): Use move-if-change when creating doc-files.
 
 	* error.cc (warning): Don't print warning backtrace at top level.
 
 	* ov-cell.cc (octave_cell::print_raw): Print empty dimensions too.
 	(octave_cell::print_name_tag): Don't print new line if cell is empty.
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -45,71 +45,79 @@ Software Foundation, 59 Temple Place - S
 #ifndef MIN
 #define MIN(a,b) ((a) < (b) ? (a) : (b))
 #endif
 
 #ifndef ABS
 #define ABS(x) (((x) < 0) ? (-x) : (x))
 #endif
 
+#define ANY_ALL(FCN) \
+ \
+  octave_value_list retval; \
+ \
+  int nargin = args.length (); \
+ \
+  int dim = (nargin == 1 ? -1 : args(1).int_value (true) - 1); \
+ \
+  if (! error_state) \
+    { \
+      if (dim <= 1 && dim >= -1) \
+	{ \
+	  if (nargin == 1 || nargin == 2) \
+	    retval = args(0).FCN (dim); \
+	  else \
+	    print_usage (#FCN); \
+	} \
+      else \
+	error (#FCN ": invalid dimension argument = %d", dim + 1); \
+    } \
+ \
+  return retval
+
 DEFUN (all, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} all (@var{x})\n\
+@deftypefn {Built-in Function} {} all (@var{x}, @var{dim})\n\
 The function @code{all} behaves like the function @code{any}, except\n\
 that it returns true only if all the elements of a vector, or all the\n\
-elements in a column of a matrix, are nonzero.\n\
+elements along dimension @var{dim} of a matrix, are nonzero.\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
-  int nargin = args.length ();
-
-  if (nargin == 1 && args(0).is_defined ())
-    retval = args(0).all ();
-  else
-    print_usage ("all");
-
-  return retval;
+  ANY_ALL (all);
 }
 
 DEFUN (any, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} any (@var{x})\n\
+@deftypefn {Built-in Function} {} any (@var{x}, @var{dim})\n\
 For a vector argument, return 1 if any element of the vector is\n\
 nonzero.\n\
 \n\
 For a matrix argument, return a row vector of ones and\n\
 zeros with each element indicating whether any of the elements of the\n\
 corresponding column of the matrix are nonzero.  For example,\n\
 \n\
 @example\n\
 @group\n\
 any (eye (2, 4))\n\
      @result{} [ 1, 1, 0, 0 ]\n\
 @end group\n\
 @end example\n\
 \n\
-To see if any of the elements of a matrix are nonzero, you can use a\n\
-statement like\n\
+If the optional argument @var{dim} is supplied, work along dimension\n\
+@var{dim}.  For example,\n\
 \n\
 @example\n\
-any (any (a))\n\
+@group\n\
+any (eye (2, 4), 2)\n\
+     @result{} [ 1; 1 ]\n\
+@end group\n\
 @end example\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
-  int nargin = args.length ();
-
-  if (nargin == 1 && args(0).is_defined ())
-    retval = args(0).any ();
-  else
-    print_usage ("any");
-
-  return retval;
+  ANY_ALL (any);
 }
 
 // These mapping functions may also be useful in other places, eh?
 
 typedef double (*d_dd_fcn) (double, double);
 
 static Matrix
 map_d_m (d_dd_fcn f, double x, const Matrix& y)
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -86,18 +86,18 @@ public:
   int length (void) const
   {
     int r = rows ();
     int c = columns ();
 
     return (r == 0 || c == 0) ? 0 : ((r > c) ? r : c);
   }
 
-  octave_value all (void) const { return matrix.all (); }
-  octave_value any (void) const { return matrix.any (); }
+  octave_value all (int dim) const { return matrix.all (dim); }
+  octave_value any (int dim) const { return matrix.any (dim); }
 
   bool is_matrix_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -123,19 +123,19 @@ public:
   bool is_cs_list (void) const { return false; }
 
   bool is_list (void) const { return false; }
 
   bool is_magic_colon (void) const { return false; }
 
   bool is_all_va_args (void) const { return false; }
 
-  octave_value all (void) const { return 0.0; }
+  octave_value all (int dim) const { return 0.0; }
 
-  octave_value any (void) const { return 0.0; }
+  octave_value any (int dim) const { return 0.0; }
 
   bool is_bool_type (void) const { return false; }
 
   bool is_real_type (void) const { return false; }
 
   bool is_complex_type (void) const { return false; }
 
   // Would be nice to get rid of the next four functions:
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -345,21 +345,21 @@ public:
   virtual bool is_magic_colon (void) const
     { return rep->is_magic_colon (); }
 
   virtual bool is_all_va_args (void) const
     { return rep->is_all_va_args (); }
 
   // Are any or all of the elements in this constant nonzero?
 
-  virtual octave_value all (void) const
-    { return rep->all (); }
+  virtual octave_value all (int dim = 0) const
+    { return rep->all (dim); }
 
-  virtual octave_value any (void) const
-    { return rep->any (); }
+  virtual octave_value any (int dim = 0) const
+    { return rep->any (dim); }
 
   // Other type stuff.
 
   virtual bool is_bool_type (void) const
     { return rep->is_bool_type (); }
 
   virtual bool is_real_type (void) const
     { return rep->is_real_type (); }
