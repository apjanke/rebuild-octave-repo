# HG changeset patch
# User jwe
# Date 1098227455 0
#      Tue Oct 19 23:10:55 2004 +0000
# Node ID c08cb1098afcb6f795710046edacf37380ae8aeb
# Parent  c6ef19da4b24238f6e177c8b1129708783d08b34
[project @ 2004-10-19 23:10:54 by jwe]

diff --git a/scripts/audio/lin2mu.m b/scripts/audio/lin2mu.m
--- a/scripts/audio/lin2mu.m
+++ b/scripts/audio/lin2mu.m
@@ -20,16 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} lin2mu (@var{x}, @var{n})
 ## Converts audio data from linear to mu-law.  Mu-law values use 8-bit
 ## unsigned integers.  Linear values use @var{n}-bit signed integers or 
 ## floating point values in the range -1<=@var{x}<=1 if @var{n} is 0.  
 ## If @var{n} is not specified it defaults to 0, 8 or 16 depending on 
 ## the range values in @var{x}.
 ## @end deftypefn
+##
 ## @seealso{mu2lin, loadaudio, saveaudio, playaudio, setaudio, and record}
 
 ## Author: Andreas Weingessel <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Created: 17 October 1994
 ## Adapted-By: jwe
 
 function y = lin2mu (x, bit)
 
diff --git a/scripts/audio/loadaudio.m b/scripts/audio/loadaudio.m
--- a/scripts/audio/loadaudio.m
+++ b/scripts/audio/loadaudio.m
@@ -25,16 +25,17 @@
 ## The extension @var{ext} determines how the data in the audio file is
 ## interpreted;  the extensions @file{lin} (default) and @file{raw}
 ## correspond to linear, the extensions @file{au}, @file{mu}, or @file{snd}
 ## to mu-law encoding.
 ##
 ## The argument @var{bps} can be either 8 (default) or 16, and specifies
 ## the number of bits per sample used in the audio file.
 ## @end deftypefn
+##
 ## @seealso{lin2mu, mu2lin, saveaudio, playaudio, setaudio, and record}
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Created: 10 April 1994
 ## Adapted-By: jwe
 
 function X = loadaudio (name, ext, bit)
 
diff --git a/scripts/audio/mu2lin.m b/scripts/audio/mu2lin.m
--- a/scripts/audio/mu2lin.m
+++ b/scripts/audio/mu2lin.m
@@ -19,16 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} mu2lin (@var{x}, @var{bps})
 ## Converts audio data from linear to mu-law.  Mu-law values are 8-bit
 ## unsigned integers.  Linear values use @var{n}-bit signed integers
 ## or floating point values in the range -1<=y<=1 if @var{n} is 0.  If
 ## @var{n} is not specified it defaults to 8.
 ## @end deftypefn
+##
 ## @seealso{lin2mu, loadaudio, saveaudio, playaudio, setaudio, and record}
 
 ## Author:  Andreas Weingessel <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Created: 18 October 1994
 ## Adapted-By: jwe
 
 function y = mu2lin (x, bit)
 
diff --git a/scripts/audio/playaudio.m b/scripts/audio/playaudio.m
--- a/scripts/audio/playaudio.m
+++ b/scripts/audio/playaudio.m
@@ -18,16 +18,17 @@
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} playaudio (@var{name}, @var{ext})
 ## @deftypefnx {Function File} {} playaudio (@var{x})
 ## Plays the audio file @file{@var{name}.@var{ext}} or the audio data
 ## stored in the vector @var{x}.
 ## @end deftypefn
+##
 ## @seealso{lin2mu, mu2lin, loadaudio, saveaudio, setaudio, and record}
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Created: 11 April 1994
 ## Adapted-By: jwe
 
 function playaudio (name, ext)
 
diff --git a/scripts/audio/record.m b/scripts/audio/record.m
--- a/scripts/audio/record.m
+++ b/scripts/audio/record.m
@@ -19,16 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} record (@var{sec}, @var{sampling_rate})
 ## Records @var{sec} seconds of audio input into the vector @var{x}.  The
 ## default value for @var{sampling_rate} is 8000 samples per second, or
 ## 8kHz.  The program waits until the user types @key{RET} and then
 ## immediately starts to record.
 ## @end deftypefn
+##
 ## @seealso{lin2mu, mu2lin, loadaudio, saveaudio, playaudio, and setaudio}
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Created: 19 September 1994
 ## Adapted-By: jwe
 
 function X = record (sec, sampling_rate)
 
diff --git a/scripts/audio/saveaudio.m b/scripts/audio/saveaudio.m
--- a/scripts/audio/saveaudio.m
+++ b/scripts/audio/saveaudio.m
@@ -20,16 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} saveaudio (@var{name}, @var{x}, @var{ext}, @var{bps})
 ## Saves a vector @var{x} of audio data to the file
 ## @file{@var{name}.@var{ext}}.  The optional parameters @var{ext} and
 ## @var{bps} determine the encoding and the number of bits per sample used
 ## in the audio file (see @code{loadaudio});  defaults are @file{lin} and
 ## 8, respectively.
 ## @end deftypefn
+##
 ## @seealso{lin2mu, mu2lin, loadaudio, playaudio, setaudio, and record}
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Created: 5 September 1994
 ## Adapted-By: jwe
 
 function saveaudio (name, X, ext, bit)
 
diff --git a/scripts/control/base/DEMOcontrol.m b/scripts/control/base/DEMOcontrol.m
--- a/scripts/control/base/DEMOcontrol.m
+++ b/scripts/control/base/DEMOcontrol.m
@@ -33,16 +33,17 @@
 ##   [ 5] Root locus functions
 ##   [ 6] LQG/H2/Hinfinity functions
 ##   [ 7] End
 ## @end group
 ## @end example
 ## Command examples are interactively run for users to observe the use
 ## of @acronym{OCST} functions.
 ## @end deftypefn
+##
 ## @seealso{Demo Programs: bddemo.m, frdemo.m, analdemo.m,
 ## moddmeo.m, rldemo.m}
 
 ## Author: David Clem
 ## Created: August 15, 1994
 
 function DEMOcontrol ()
 
diff --git a/scripts/control/base/__stepimp__.m b/scripts/control/base/__stepimp__.m
--- a/scripts/control/base/__stepimp__.m
+++ b/scripts/control/base/__stepimp__.m
@@ -23,16 +23,17 @@
 ## This m-file contains the ``common code'' of step and impulse.
 ##
 ## Produces a plot or the response data for system @var{sys}.
 ##
 ## Limited argument checking; ``do not attempt to do this at home''.
 ## Used internally in @command{impulse}, @command{step}. Use @command{step}
 ## or @command{impulse} instead.
 ## @end deftypefn
+##
 ## @seealso{step, impulse}
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: October 2, 1997
 ## based on lsim.m of Scottedward Hodel
 
 function [y, t] = __stepimp__ (sitype, sys, inp, tstop, n)
 
diff --git a/scripts/control/base/are.m b/scripts/control/base/are.m
--- a/scripts/control/base/are.m
+++ b/scripts/control/base/are.m
@@ -56,16 +56,17 @@
 ## @end table
 ##
 ## @strong{Method}
 ## Laub's Schur method (@acronym{IEEE} Transactions on
 ## Automatic Control, 1979) is applied to the appropriate Hamiltonian
 ## matrix.
 ##
 ## @end deftypefn
+##
 ## @seealso{balance and dare}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1993
 
 function x = are (a, b, c, opt)
 
   if (nargin == 3 || nargin == 4)
diff --git a/scripts/control/base/controldemo.m b/scripts/control/base/controldemo.m
--- a/scripts/control/base/controldemo.m
+++ b/scripts/control/base/controldemo.m
@@ -15,16 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} controldemo ()
 ## Control Systems Toolbox demo.
 ## @end deftypefn
+##
 ## @seealso{Demo programs: bddemo, frdemo, analdemo, moddmeo, rldemo}
 
 ## Author: David Clem
 ## Created: August 15, 1994
 
 function controldemo ()
   DEMOcontrol ();
 endfunction
diff --git a/scripts/control/base/damp.m b/scripts/control/base/damp.m
--- a/scripts/control/base/damp.m
+++ b/scripts/control/base/damp.m
@@ -20,16 +20,17 @@
 ## @deftypefn {Function File} {} damp (@var{p}, @var{tsam})
 ## Displays eigenvalues, natural frequencies and damping ratios
 ## of the eigenvalues of a matrix @var{p} or the @math{A} matrix of a
 ## system @var{p}, respectively.
 ## If @var{p} is a system, @var{tsam} must not be specified.
 ## If @var{p} is a matrix and @var{tsam} is specified, eigenvalues
 ## of @var{p} are assumed to be in @var{z}-domain.
 ## @end deftypefn
+##
 ## @seealso{eig}
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: September 29, 1997.
 
 function damp (p, tsam)
 
   ## assume a continuous system
diff --git a/scripts/control/base/dare.m b/scripts/control/base/dare.m
--- a/scripts/control/base/dare.m
+++ b/scripts/control/base/dare.m
@@ -66,16 +66,17 @@
 ## Generalized eigenvalue approach (Van Dooren; @acronym{SIAM} J.
 ##  Sci. Stat. Comput., Vol 2) applied  to the appropriate symplectic pencil.
 ##
 ##  See also: Ran and Rodman, @cite{Stable Hermitian Solutions of Discrete
 ##  Algebraic Riccati Equations}, Mathematics of Control, Signals and
 ##  Systems, Vol 5, no 2 (1992), pp 165--194.
 ##
 ## @end deftypefn
+##
 ## @seealso{balance and are}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1993
 ## Adapted-By: jwe
 
 function x = dare (a, b, q, r, opt)
 
diff --git a/scripts/control/base/impulse.m b/scripts/control/base/impulse.m
--- a/scripts/control/base/impulse.m
+++ b/scripts/control/base/impulse.m
@@ -41,16 +41,17 @@
 ## @strong{Outputs}
 ## @table @var
 ## @item y
 ## Values of the impulse response.
 ## @item t
 ## Times of the impulse response.
 ## @end table
 ## @end deftypefn
+##
 ## @seealso{step, __stepimp__}
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: October 2, 1997
 ## based on lsim.m of Scottedward Hodel
 ## modified by
 
 function [y, t] = impulse (sys, inp, tstop, n)
diff --git a/scripts/control/base/lqg.m b/scripts/control/base/lqg.m
--- a/scripts/control/base/lqg.m
+++ b/scripts/control/base/lqg.m
@@ -56,16 +56,17 @@
 ## @item    q1
 ## Solution of estimation algebraic Riccati equation.
 ## @item    ee
 ## Estimator poles.
 ## @item    es
 ## Controller poles.
 ## @end table
 ## @end deftypefn
+##
 ## @seealso{h2syn, lqe, and lqr}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1995
 ## revised for new system format August 1996
 
 function [K, Q1, P1, Ee, Er] = lqg (sys, Sigw, Sigv, Q, R, input_list)
 
diff --git a/scripts/control/base/step.m b/scripts/control/base/step.m
--- a/scripts/control/base/step.m
+++ b/scripts/control/base/step.m
@@ -43,16 +43,17 @@
 ## @item y
 ## Values of the step response.
 ## @item t
 ## Times of the step response.
 ## @end table
 ##
 ## When invoked with the output parameter @var{y} the plot is not displayed.
 ## @end deftypefn
+##
 ## @seealso{impulse and __stepimp__}
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: September 30, 1997
 ## based on lsim.m of Scottedward Hodel
 
 function [y, t] = step (sys, inp, tstop, n)
 
diff --git a/scripts/control/system/abcddim.m b/scripts/control/system/abcddim.m
--- a/scripts/control/system/abcddim.m
+++ b/scripts/control/system/abcddim.m
@@ -54,16 +54,17 @@
 ## The number of system outputs.
 ## @end table
 ##
 ## Otherwise @code{abcddim} returns @var{n} = @var{m} = @var{p} = @minus{}1.
 ##
 ## Note: n = 0 (pure gain block) is returned without warning.
 ##
 ## @end deftypefn
+##
 ## @seealso{is_abcd}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1993.
 ## a s hodel: modified to accept pure-gain systems aug 1996
 
 function [n, m, p] = abcddim (a, b, c, d)
 
diff --git a/scripts/control/system/is_abcd.m b/scripts/control/system/is_abcd.m
--- a/scripts/control/system/is_abcd.m
+++ b/scripts/control/system/is_abcd.m
@@ -18,16 +18,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{retval} =} is_abcd (@var{a}, @var{b}, @var{c}, @var{d})
 ##  Returns @var{retval} = 1 if the dimensions of @var{a}, @var{b},
 ##  @var{c}, @var{d} are compatible, otherwise @var{retval} = 0 with an
 ##  appropriate diagnostic message printed to the screen.  The matrices
 ##  @var{b}, @var{c}, or @var{d} may be omitted.
 ## @end deftypefn
+##
 ## @seealso{abcddim}
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: November 4, 1997
 ## based on is_controllable.m of Scottedward Hodel
 
 function retval = is_abcd (a, b, c, d)
 
diff --git a/scripts/control/system/is_controllable.m b/scripts/control/system/is_controllable.m
--- a/scripts/control/system/is_controllable.m
+++ b/scripts/control/system/is_controllable.m
@@ -48,16 +48,17 @@
 ## Krylov subspace
 ## @example
 ## span ([b,a*b,...,a^@{n-1@}*b]).
 ## @end example
 ## The Arnoldi iteration is executed with @code{krylov} if the system
 ## has a single input; otherwise a block Arnoldi iteration is performed
 ## with @code{krylovb}.
 ## @end deftypefn
+##
 ## @seealso{size, rows, columns, length, ismatrix, isscalar, isvector
 ## is_observable, is_stabilizable, is_detectable, krylov, and krylovb}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1993
 ## Updated by A. S. Hodel (scotte@eng.auburn.edu) Aubust, 1995 to use krylovb
 ## Updated by John Ingram (ingraje@eng.auburn.edu) July, 1996 for packed systems
 
diff --git a/scripts/control/system/is_detectable.m b/scripts/control/system/is_detectable.m
--- a/scripts/control/system/is_detectable.m
+++ b/scripts/control/system/is_detectable.m
@@ -25,16 +25,17 @@
 ## detectable, 0 if not, and -1 if the system has unobservable modes at the
 ## imaginary axis (unit circle for discrete-time systems).
 ##
 ## @strong{See} @command{is_stabilizable} for detailed description of
 ## arguments and computational method.
 ##
 ##
 ## @end deftypefn
+##
 ## @seealso{is_stabilizable, size, rows, columns, length, ismatrix,
 ## isscalar, and isvector}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1993
 ## Updated by John Ingram (ingraje@eng.auburn.edu) July 1996.
 
 function [retval, U] = is_detectable (a, c, tol, dflg)
diff --git a/scripts/control/system/is_observable.m b/scripts/control/system/is_observable.m
--- a/scripts/control/system/is_observable.m
+++ b/scripts/control/system/is_observable.m
@@ -24,16 +24,17 @@
 ## Default: tol = @code{tol = 10*norm(a,'fro')*eps}
 ##
 ## Returns 1 if the system @var{sys} or the pair (@var{a}, @var{c}) is
 ## observable, 0 if not.
 ##
 ## See @command{is_controllable} for detailed description of arguments
 ## and default values.
 ## @end deftypefn
+##
 ## @seealso{size, rows, columns, length, ismatrix, isscalar, and isvector}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1993
 ## Updated by John Ingram (ingraje@eng.auburn.edu) July 1996.
 
 function [retval, U] = is_observable (a, c, tol)
 
diff --git a/scripts/control/system/is_stabilizable.m b/scripts/control/system/is_stabilizable.m
--- a/scripts/control/system/is_stabilizable.m
+++ b/scripts/control/system/is_stabilizable.m
@@ -30,16 +30,17 @@
 ## @var{dflg}$\neq$0
 ## @end tex
 ## @end iftex
 ## @ifinfo 
 ## @var{dflg}!=0
 ## @end ifinfo
 ## assume that discrete-time matrices (a,b) are supplied.
 ## @end deftypefn
+##
 ## @seealso{size, rows, columns, length, ismatrix, isscalar, isvector
 ## is_observable, is_stabilizable, is_detectable}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1993
 ## Updated by A. S. Hodel (scotte@eng.auburn.edu) Aubust, 1995 to use krylovb
 ## Updated by John Ingram (ingraje@eng.auburn.edu) July, 1996 to accept systems
 
diff --git a/scripts/control/system/is_stable.m b/scripts/control/system/is_stable.m
--- a/scripts/control/system/is_stable.m
+++ b/scripts/control/system/is_stable.m
@@ -32,16 +32,17 @@
 ## @item @var{dflg} != 0
 ## stable if eig(a) is in the unit circle
 ##
 ## @item @var{dflg} == 0
 ## stable if eig(a) is in the open LHP (default)
 ## @end table
 ## @end table
 ## @end deftypefn
+##
 ## @seealso{size, rows, columns, length, ismatrix, isscalar, isvector
 ## is_observable, is_stabilizable, is_detectable, krylov, and krylovb}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1993
 ## Updated by John Ingram (ingraje@eng.auburn.edu) July, 1996 for systems
 ## Updated to simpler form by a.s.hodel 1998
 
diff --git a/scripts/control/system/jet707.m b/scripts/control/system/jet707.m
--- a/scripts/control/system/jet707.m
+++ b/scripts/control/system/jet707.m
@@ -30,16 +30,17 @@
 ## @end ifinfo
 ##
 ## System inputs: (1) thrust and (2) elevator angle.
 ##
 ## System outputs:  (1) airspeed and (2) pitch angle.
 ##
 ## @strong{Reference}: R. Brockhaus: @cite{Flugregelung} (Flight Control), Springer, 1994.
 ## @end deftypefn
+##
 ## @seealso{ord2}
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: September 28, 1997
 
 function outsys = jet707 ()
 
   if (nargin != 0)
diff --git a/scripts/control/system/sys2fir.m b/scripts/control/system/sys2fir.m
--- a/scripts/control/system/sys2fir.m
+++ b/scripts/control/system/sys2fir.m
@@ -17,16 +17,17 @@
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{c}, @var{tsam}, @var{input}, @var{output}] =} sys2fir (@var{sys})
 ##
 ## Extract @acronym{FIR} data from system data structure; see @command{fir2sys} for
 ## parameter descriptions.
 ## @end deftypefn
+##
 ## @seealso{fir2sys}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: July 1996
 
 function [c, tsam, inname, outname] = sys2fir (sys)
 
   ## let sys2tf do most of the work
diff --git a/scripts/control/system/sysdimensions.m b/scripts/control/system/sysdimensions.m
--- a/scripts/control/system/sysdimensions.m
+++ b/scripts/control/system/sysdimensions.m
@@ -58,16 +58,17 @@
 ## @item  p
 ##  number of system outputs
 ## @item  yd
 ##  binary vector; @var{yd}(@var{ii}) is nonzero if output @var{ii} is
 ## discrete.
 ## @math{yd(ii) = 0} if output @var{ii} is continous
 ## @end table
 ## @end deftypefn
+##
 ## @seealso{sysgetsignals and sysgettsam}
 
 function [n, nz, m, p, yd] = sysdimensions (sys, opt)
 
   if(nargout > 5 | nargin < 1 | nargin > 2)
     usage("[n,nz,m,p[,yd]] = sysdimensions(sys{,opt})");
   elseif(!isstruct(sys))
     usage("[n,nz,m,p] = sysdimensions(sys)");
diff --git a/scripts/control/system/sysupdate.m b/scripts/control/system/sysupdate.m
--- a/scripts/control/system/sysupdate.m
+++ b/scripts/control/system/sysupdate.m
@@ -43,16 +43,17 @@
 ## @item retsys
 ## Contains union of data in sys and requested data.
 ## If requested data in @var{sys} is already up to date then @var{retsys}=@var{sys}.
 ## @end table
 ##
 ## Conversion to @command{tf} or @command{zp} exits with an error if the system is
 ## mixed continuous/digital.
 ## @end deftypefn
+##
 ## @seealso{tf, ss, zp, sysout, sys2ss, sys2tf, and sys2zp}
 
 ## Author: John Ingram <ingraje@eng.auburn.edu>
 ## Created: July 9, 1996
 
 function sys = sysupdate (sys, opt)
 
   ## check for correct number of inputs
diff --git a/scripts/control/system/tfout.m b/scripts/control/system/tfout.m
--- a/scripts/control/system/tfout.m
+++ b/scripts/control/system/tfout.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} tfout (@var{num}, @var{denom}, @var{x})
 ## Print formatted transfer function @math{n(s)/d(s)} to the screen.
 ## @var{x} defaults to the string @code{"s"}
 ## @end deftypefn
+##
 ## @seealso{polyval, polyvalm, poly, roots, conv, deconv, residue,
 ## filter, polyderiv, polyinteg, and polyout}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: June 1995
 
 function tfout (num, denom, x)
 
diff --git a/scripts/control/system/ugain.m b/scripts/control/system/ugain.m
--- a/scripts/control/system/ugain.m
+++ b/scripts/control/system/ugain.m
@@ -19,16 +19,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} ugain (@var{n})
 ## Creates a system with unity gain, no states.
 ## This trivial system is sometimes needed to create arbitrary
 ## complex systems from simple systems with @command{buildssic}.
 ## Watch out if you are forming sampled systems since @command{ugain}
 ## does not contain a sampling period.
 ## @end deftypefn
+##
 ## @seealso{hinfdemo and jet707}
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: April 1998
 
 function outsys = ugain (n)
 
   if (nargin != 1 || nargout > 1)
diff --git a/scripts/control/system/zpout.m b/scripts/control/system/zpout.m
--- a/scripts/control/system/zpout.m
+++ b/scripts/control/system/zpout.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} zpout (@var{zer}, @var{pol}, @var{k}, @var{x})
 ## print formatted zero-pole form to the screen.
 ## @var{x} defaults to the string @code{"s"}
 ## @end deftypefn
+##
 ## @seealso{polyval, polyvalm, poly, roots, conv, deconv, residue,
 ## filter, polyderiv, polyinteg, and polyout}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: June 1995
 
 function zpout (zer, pol, k, x)
 
diff --git a/scripts/elfun/lcm.m b/scripts/elfun/lcm.m
--- a/scripts/elfun/lcm.m
+++ b/scripts/elfun/lcm.m
@@ -27,19 +27,20 @@
 ## @end example
 ##
 ## @noindent
 ## is the same as
 ##
 ## @example
 ## lcm ([a1, ..., ak]).
 ## @end example
+##
+## All elements must be the same size or scalar.
 ## @end deftypefn
 ##
-## All elements must be the same size or scalar.
 ## @seealso{gcd, min, max, ceil, and floor}
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Created: 16 September 1994
 ## Adapted-By: jwe
 
 function l = lcm (varargin)
 
diff --git a/scripts/finance/irr.m b/scripts/finance/irr.m
--- a/scripts/finance/irr.m
+++ b/scripts/finance/irr.m
@@ -19,16 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} irr (@var{p}, @var{i})
 ## Return the internal rate of return of a series of payments @var{p}
 ## from an initial investment @var{i} (i.e., the solution of
 ## @code{npv (r, p) = i}.  If the second argument is omitted, a value of
 ## 0 is used.
 ## @end deftypefn
+##
 ## @seealso{npv, pv, and rate}
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description: Internal rate of return of an investment
 
 function r = irr (p, i)
 
   if (nargin == 1)
diff --git a/scripts/finance/nper.m b/scripts/finance/nper.m
--- a/scripts/finance/nper.m
+++ b/scripts/finance/nper.m
@@ -27,16 +27,17 @@
 ##
 ## The optional argument @var{method} may be used to specify whether
 ## payments are made at the end (@var{"e"}, default) or at the beginning
 ## (@var{"b"}) of each period.
 ##
 ## Note that the rate @var{r} is specified as a fraction (i.e., 0.05,
 ## not 5 percent).
 ## @end deftypefn
+##
 ## @seealso{pv, pmt, rate, and npv}
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description: Number of payments needed for amortizing a loan
 
 function n = nper (r, p, a, l, m)
 
   if ((nargin < 3) || (nargin > 5))
diff --git a/scripts/finance/npv.m b/scripts/finance/npv.m
--- a/scripts/finance/npv.m
+++ b/scripts/finance/npv.m
@@ -26,16 +26,17 @@
 ## length as @var{p}.
 ##
 ## The optional argument @var{i} may be used to specify an initial
 ## investment.
 ##
 ## Note that the rate @var{r} is specified as a fraction (i.e., 0.05,
 ## not 5 percent).
 ## @end deftypefn
+##
 ## @seealso{irr and pv}
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description: Net present value of a series of payments
 
 function v = npv (r, p, i)
 
   if ((nargin < 2) || (nargin > 3))
diff --git a/scripts/finance/pmt.m b/scripts/finance/pmt.m
--- a/scripts/finance/pmt.m
+++ b/scripts/finance/pmt.m
@@ -24,16 +24,17 @@
 ##
 ## The optional argument @var{l} may be used to specify a terminal
 ## lump-sum payment.
 ##
 ## The optional argument @var{method} may be used to specify whether
 ## payments are made at the end (@var{"e"}, default) or at the beginning
 ## (@var{"b"}) of each period.
 ## @end deftypefn
+##
 ## @seealso{pv, nper, and rate}
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description: Amount of periodic payment needed to amortize a loan
 
 function p = pmt (r, n, a, l, m)
 
   if (nargin < 3 || nargin > 5)
diff --git a/scripts/finance/pv.m b/scripts/finance/pv.m
--- a/scripts/finance/pv.m
+++ b/scripts/finance/pv.m
@@ -27,16 +27,17 @@
 ##
 ## The optional argument @var{method} may be used to specify whether
 ## payments are made at the end (@code{"e"}, default) or at the
 ## beginning (@code{"b"}) of each period.
 ##
 ## Note that the rate @var{r} is specified as a fraction (i.e., 0.05,
 ## not 5 percent).
 ## @end deftypefn
+##
 ## @seealso{pmt, nper, rate, and npv}
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description: Present value of an investment
 
 function v = pv (r, n, p, l, m)
 
   if ((nargin < 3) || (nargin > 5))
diff --git a/scripts/finance/rate.m b/scripts/finance/rate.m
--- a/scripts/finance/rate.m
+++ b/scripts/finance/rate.m
@@ -24,16 +24,17 @@
 ##
 ## The optional argument @var{l} may be used to specify an additional
 ## lump-sum payment made at the end of @var{n} periods.
 ##
 ## The optional string argument @var{method} may be used to specify
 ## whether payments are made at the end (@code{"e"}, default) or at the
 ## beginning (@code{"b"}) of each period.
 ## @end deftypefn
+##
 ## @seealso{pv, pmt, nper, and npv}
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description: Rate of return of an investment
 
 function r = rate (n, p, v, l, m)
 
   if ((nargin < 3) || (nargin > 5))
diff --git a/scripts/general/bitcmp.m b/scripts/general/bitcmp.m
--- a/scripts/general/bitcmp.m
+++ b/scripts/general/bitcmp.m
@@ -22,19 +22,19 @@
 ## @example
 ## bitcmp(7,4)
 ## @result{} 8
 ## dec2bin(11)
 ## @result{} 1011
 ## dec2bin(bitcmp(11))
 ## @result{} 11111111111111111111111111110100
 ## @end example
+## @end deftypefn
 ##
 ## @seealso{bitand,bitor,bitxor,bitset,bitget,bitcmp,bitshift,bitmax}
-## @end deftypefn
 
 ## Liberally based of the version by Kai Habel from octave-forge
 
 function X = bitcmp (A, n)
   
   if (nargin < 1 || nargin > 2)
     usage ("bitcmp (A, n)");
   endif
diff --git a/scripts/general/bitget.m b/scripts/general/bitget.m
--- a/scripts/general/bitget.m
+++ b/scripts/general/bitget.m
@@ -18,18 +18,19 @@
 ## @deftypefn {Function File} {@var{X} =} bitget (@var{a},@var{n})
 ## Return the status of bit(s) @var{n} of unsigned integers in @var{a}
 ## the lowest significant bit is @var{n} = 1.
 ##
 ## @example
 ## bitget (100, 8:-1:1)
 ## @result{} 0  1  1  0  0  1  0  0 
 ## @end example
+## @end deftypefn
+##
 ## @seealso{bitand, bitor, bitxor, bitset, bitcmp, bitshift, bitmax}
-## @end deftypefn
 
 ## Liberally based of the version by Kai Habel from octave-forge
 
 function X = bitget (A, n)
 
   if (nargin != 2)
     usage ("bitget (A, n)");
   endif
diff --git a/scripts/general/bitset.m b/scripts/general/bitset.m
--- a/scripts/general/bitset.m
+++ b/scripts/general/bitset.m
@@ -20,19 +20,19 @@
 ## Set or reset bit(s) @var{n} of unsigned integers in @var{a}.
 ## @var{v} = 0 resets and @var{v} = 1 sets the bits.
 ## The lowest significant bit is: @var{n} = 1
 ##
 ## @example
 ## dec2bin (bitset (10, 1))
 ## @result{} 1011
 ## @end example
+## @end deftypefn
 ##
 ## @seealso{bitand, bitor, bitxor, bitget, bitcmp, bitshift, bitmax}
-## @end deftypefn
 
 ## Liberally based of the version by Kai Habel from octave-forge
 
 function X = bitset (A, n, value)
 
   if (nargin < 2 || nargin > 3)
     usage ("bitset (A, n, v)");
   endif
diff --git a/scripts/general/cart2pol.m b/scripts/general/cart2pol.m
--- a/scripts/general/cart2pol.m
+++ b/scripts/general/cart2pol.m
@@ -20,16 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} [@var{theta}, @var{r}] = cart2pol (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} [@var{theta}, @var{r}, @var{z}] = cart2pol (@var{x}, @var{y}, @var{z})
 ## Transform cartesian to polar or cylindrical coordinates.
 ## @var{x}, @var{y} (and @var{z}) must be of same shape.
 ## @var{theta} describes the angle relative to the x - axis.
 ## @var{r} is the distance to the z - axis (0, 0, z).
 ## @end deftypefn
+##
 ## @seealso{pol2cart, cart2sph, sph2cart}
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 ## Adapted-by: jwe
 
 function [Theta, R, Z] = cart2pol (X, Y, Z)
 
   if (nargin < 2 || nargin > 3)
diff --git a/scripts/general/cart2sph.m b/scripts/general/cart2sph.m
--- a/scripts/general/cart2sph.m
+++ b/scripts/general/cart2sph.m
@@ -20,16 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} [@var{theta}, @var{phi}, @var{r}] = cart2sph (@var{x}, @var{y}, @var{z})
 ## Transform cartesian to spherical coordinates.
 ## @var{x}, @var{y} and @var{z} must be of same shape.
 ## @var{theta} describes the angle relative to the x - axis.
 ## @var{phi} is the angle relative to the xy - plane.
 ## @var{r} is the distance to the origin (0, 0, 0).
 ## @end deftypefn
+##
 ## @seealso{pol2cart, cart2pol, sph2cart}
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 ## Adapted-by: jwe
 
 function [Theta, Phi, R] = cart2sph (X, Y, Z)
 
   if (nargin != 3)
diff --git a/scripts/general/circshift.m b/scripts/general/circshift.m
--- a/scripts/general/circshift.m
+++ b/scripts/general/circshift.m
@@ -39,16 +39,17 @@
 ##     4, 5, 6
 ## circshift (x, [0,1])
 ## @result{}  3, 1, 2
 ##     6, 4, 5
 ##     9, 7, 8
 ## @end group
 ## @end example
 ## @end deftypefn
+##
 ## @seealso {permute, ipermute, shiftdim}
 
 function y = circshift (x, n)
 
   if (nargin == 2)
     nd = ndims (x);
     sz = size (x);
 
diff --git a/scripts/general/columns.m b/scripts/general/columns.m
--- a/scripts/general/columns.m
+++ b/scripts/general/columns.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} columns (@var{a})
 ## Return the number of columns of @var{a}.
 ## @end deftypefn
+##
 ## @seealso{size, rows, length, isscalar, isvector, and ismatrix}
 
 ## Author: jwe
 
 function nc = columns (x)
 
   if (nargin != 1)
     usage ("columns (x)");
diff --git a/scripts/general/flipdim.m b/scripts/general/flipdim.m
--- a/scripts/general/flipdim.m
+++ b/scripts/general/flipdim.m
@@ -25,16 +25,17 @@
 ## @example
 ## @group
 ## flipdim ([1, 2; 3, 4], 2)
 ##      @result{}  2  1
 ##          4  3
 ## @end group
 ## @end example
 ## @end deftypefn
+##
 ## @seealso{fliplr, flipud, rot90 and rotdim}
 
 ## Author: David Bateman
 
 function y = flipdim (x, dim)
 
   if (nargin != 1 && nargin != 2)
     usage ("flipdim (x, dim)");
diff --git a/scripts/general/fliplr.m b/scripts/general/fliplr.m
--- a/scripts/general/fliplr.m
+++ b/scripts/general/fliplr.m
@@ -24,21 +24,21 @@
 ##
 ## @example
 ## @group
 ## fliplr ([1, 2; 3, 4])
 ##      @result{}  2  1
 ##          4  3
 ## @end group
 ## @end example
+##
+## Note that @code{fliplr} only workw with 2-D arrays.  To flip N-d arrays
+## use @code{flipdim} instead.
 ## @end deftypefn
 ##
-## Due to the difficult of define which axis about which to flip the 
-## matrix @code{fliplr} only work with 2-D arrays. To flip N-D arrays
-## use @code{flipdim} instead.
 ## @seealso{flipud, flipdim, rot90 and rotdim}
 
 ## Author: jwe
 
 function y = fliplr (x)
 
   if (nargin != 1)
     usage ("fliplr (x)");
diff --git a/scripts/general/flipud.m b/scripts/general/flipud.m
--- a/scripts/general/flipud.m
+++ b/scripts/general/flipud.m
@@ -29,16 +29,17 @@
 ##          1  2
 ## @end group
 ## @end example
 ##
 ## Due to the difficulty of defining which axis about which to flip the 
 ## matrix @code{flipud} only work with 2-d arrays.  To flip N-d arrays
 ## use @code{flipdim} instead.
 ## @end deftypefn
+##
 ## @seealso{fliplr, flipdim, rot90 and rotdim}
 
 ## Author: jwe
 
 function y = flipud (x)
 
   if (nargin != 1)
     usage ("flipud (x)");
diff --git a/scripts/general/ind2sub.m b/scripts/general/ind2sub.m
--- a/scripts/general/ind2sub.m
+++ b/scripts/general/ind2sub.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{s1}, @var{s2}, @dots{}, @var{sN}] =} ind2sub (@var{dims}, @var{ind})
 ## Convert a linear index into subscripts.
 ## @end deftypefn
+##
 ## @seealso{sub2ind}
 
 ## Author: Paul Kienzle <pkienzle@kienzle.powernet.co.uk>
 ## Adapted-by: jwe
 
 function varargout = ind2sub (dims, ind)
 
   if (nargin == 2)
diff --git a/scripts/general/int2str.m b/scripts/general/int2str.m
--- a/scripts/general/int2str.m
+++ b/scripts/general/int2str.m
@@ -20,16 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} int2str (@var{n})
 ## @deftypefnx {Function File} {} num2str (@var{x}, @var{precision})
 ## @deftypefnx {Function File} {} num2str (@var{x}, @var{format})
 ## Convert a number to a string.  These functions are not very flexible,
 ## but are provided for compatibility with @sc{Matlab}.  For better control
 ## over the results, use @code{sprintf} (@pxref{Formatted Output}).
 ## @end deftypefn
+##
 ## @seealso{sprintf and num2str}
 
 ## Author: jwe
 
 function retval = int2str (x)
 
   if (nargin == 1)
     x = round (real(x));
diff --git a/scripts/general/isdefinite.m b/scripts/general/isdefinite.m
--- a/scripts/general/isdefinite.m
+++ b/scripts/general/isdefinite.m
@@ -19,16 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isdefinite (@var{x}, @var{tol})
 ## Return 1 if @var{x} is symmetric positive definite within the
 ## tolerance specified by @var{tol} or 0 if @var{x} is symmetric
 ## positive semidefinite.  Otherwise, return -1.  If @var{tol}
 ## is omitted, use a tolerance equal to 100 times the machine precision.  
 ## @end deftypefn
+##
 ## @seealso{issymmetric}
 
 ## Author: Gabriele Pannocchia <g.pannocchia@ing.unipi.it>
 ## Created: November 2003
 ## Adapted-By: jwe
 
 function retval = isdefinite (x, tol)
 
diff --git a/scripts/general/isscalar.m b/scripts/general/isscalar.m
--- a/scripts/general/isscalar.m
+++ b/scripts/general/isscalar.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isscalar (@var{a})
 ## Return 1 if @var{a} is a scalar.  Otherwise, return 0.
 ## @end deftypefn
+##
 ## @seealso{size, rows, columns, length, isscalar, and ismatrix}
 
 ## Author: jwe
 
 function retval = isscalar (x)
 
   retval = 0;
 
diff --git a/scripts/general/issquare.m b/scripts/general/issquare.m
--- a/scripts/general/issquare.m
+++ b/scripts/general/issquare.m
@@ -17,16 +17,17 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} issquare (@var{x})
 ## If @var{x} is a square matrix, then return the dimension of @var{x}.
 ## Otherwise, return 0.
 ## @end deftypefn
+##
 ## @seealso{size, rows, columns, length, ismatrix, isscalar, and isvector}
 
 ## Author: A. S. Hodel <scotte@eng.auburn.edu>
 ## Created: August 1993
 ## Adapted-By: jwe
 
 function retval = issquare (x)
 
diff --git a/scripts/general/issymmetric.m b/scripts/general/issymmetric.m
--- a/scripts/general/issymmetric.m
+++ b/scripts/general/issymmetric.m
@@ -18,16 +18,17 @@
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} issymmetric (@var{x}, @var{tol})
 ## If @var{x} is symmetric within the tolerance specified by @var{tol},
 ## then return the dimension of @var{x}.  Otherwise, return 0.  If
 ## @var{tol} is omitted, use a tolerance equal to the machine precision.
 ## @end deftypefn
+##
 ## @seealso{size, rows, columns, length, ismatrix, isscalar,
 ## issquare, and isvector}
 
 ## Author: A. S. Hodel <scotte@eng.auburn.edu>
 ## Created: August 1993
 ## Adapted-By: jwe
 
 function retval = issymmetric (x,tol)
diff --git a/scripts/general/isvector.m b/scripts/general/isvector.m
--- a/scripts/general/isvector.m
+++ b/scripts/general/isvector.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isvector (@var{a})
 ## Return 1 if @var{a} is a vector.  Otherwise, return 0.
 ## @end deftypefn
+##
 ## @seealso{size, rows, columns, length, isscalar, and ismatrix}
 
 ## Author: jwe
 
 function retval = isvector (x)
 
   retval = 0;
 
diff --git a/scripts/general/logspace.m b/scripts/general/logspace.m
--- a/scripts/general/logspace.m
+++ b/scripts/general/logspace.m
@@ -54,16 +54,17 @@
 ## $10^{base}$ and $10^{\pi}$,
 ## @end tex
 ## @end iftex
 ## @ifinfo
 ## 10^base and 10^pi,
 ## @end ifinfo
 ## in order to  be compatible with the corresponding @sc{Matlab} function.
 ## @end deftypefn
+##
 ## @seealso{linspace}
 
 ## Author: jwe
 
 function retval = logspace (x1, x2, n)
 
   if (nargin == 2)
     npoints = 50;
diff --git a/scripts/general/mod.m b/scripts/general/mod.m
--- a/scripts/general/mod.m
+++ b/scripts/general/mod.m
@@ -27,16 +27,17 @@
 ##
 ## Note that this handles negative numbers correctly:
 ## @code{mod (-1, 3)} is 2, not -1 as @code{rem (-1, 3)} returns.
 ## Also, @code{mod (@var{x}, 0)} returns @var{x}.
 ##
 ## An error message is printed if the dimensions of the arguments do not
 ## agree, or if either of the arguments is complex.
 ## @end deftypefn
+##
 ## @seealso{rem, round}
 
 ## Author: Paul Kienzle <pkienzle@kienzle.powernet.co.uk>
 ## Modified by: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Adapted by: jwe
 
 function r = mod (x, y)
 
diff --git a/scripts/general/nextpow2.m b/scripts/general/nextpow2.m
--- a/scripts/general/nextpow2.m
+++ b/scripts/general/nextpow2.m
@@ -26,16 +26,17 @@
 ## @end tex
 ## @end iftex
 ## @ifinfo
 ##  2^n >= abs (x).
 ## @end ifinfo
 ##
 ## If @var{x} is a vector, return @code{nextpow2 (length (@var{x}))}.
 ## @end deftypefn
+##
 ## @seealso{pow2}
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Created: 7 October 1994
 ## Adapted-By: jwe
 
 function n = nextpow2 (x)
 
diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -20,16 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} int2str (@var{n})
 ## @deftypefnx {Function File} {} num2str (@var{x}, @var{precision})
 ## @deftypefnx {Function File} {} num2str (@var{x}, @var{format})
 ## Convert a number to a string.  These functions are not very flexible,
 ## but are provided for compatibility with @sc{Matlab}.  For better control
 ## over the results, use @code{sprintf} (@pxref{Formatted Output}).
 ## @end deftypefn
+##
 ## @seealso{sprintf and int2str}
 
 ## Author: jwe
 
 function retval = num2str (x, arg)
 
   if (nargin != 1 && nargin != 2)
     usage ("num2str (x) or num2str (x, precision) or num2str (x, fmt)");
diff --git a/scripts/general/perror.m b/scripts/general/perror.m
--- a/scripts/general/perror.m
+++ b/scripts/general/perror.m
@@ -19,16 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} perror (@var{name}, @var{num})
 ## Print the error message for function @var{name} corresponding to the
 ## error number @var{num}.  This function is intended to be used to print
 ## useful error messages for those functions that return numeric error
 ## codes.
 ## @end deftypefn
+##
 ## @seealso{strerror}
 
 ## Author: jwe
 
 function perror (name, err)
 
   if (nargin != 2)
     usage ("perror (name, err)");
diff --git a/scripts/general/pol2cart.m b/scripts/general/pol2cart.m
--- a/scripts/general/pol2cart.m
+++ b/scripts/general/pol2cart.m
@@ -20,16 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} [@var{x}, @var{y}] = pol2cart (@var{theta}, @var{r})
 ## @deftypefnx {Function File} {} [@var{x}, @var{y}, @var{z}] = pol2cart (@var{theta}, @var{r}, @var{z})
 ## Transform polar or cylindrical to cartesian coordinates.
 ## @var{theta}, @var{r} (and @var{z}) must be of same shape.
 ## @var{theta} describes the angle relative to the x - axis.
 ## @var{r} is the distance to the z - axis (0, 0, z).
 ## @end deftypefn
+##
 ## @seealso{cart2pol, cart2sph, sph2cart}
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 ## Adapted-by: jwe
 
 function [X, Y, Z] = pol2cart (Theta, R, Z)
 
   if (nargin < 2 || nargin > 3)
diff --git a/scripts/general/rem.m b/scripts/general/rem.m
--- a/scripts/general/rem.m
+++ b/scripts/general/rem.m
@@ -24,16 +24,17 @@
 ##
 ## @example
 ## x - y .* fix (x ./ y)
 ## @end example
 ##
 ## An error message is printed if the dimensions of the arguments do not
 ## agree, or if either of the arguments is complex.
 ## @end deftypefn
+##
 ## @seealso{mod, round}
 
 ## Author: jwe
 
 function r = rem (x, y)
 
   if (nargin != 2)
     usage ("rem (x, y)");
diff --git a/scripts/general/rot90.m b/scripts/general/rot90.m
--- a/scripts/general/rot90.m
+++ b/scripts/general/rot90.m
@@ -46,16 +46,17 @@
 ## rot90 ([1, 2; 3, 4], 7)
 ## @end group
 ## @end example
 ##
 ## Due to the difficulty of defining an axis about which to rotate the 
 ## matrix @code{rot90} only work with 2-D arrays.  To rotate N-d arrays
 ## use @code{rotdim} instead.
 ## @end deftypefn
+##
 ## @seealso{rotdim, flipud, fliplr and flipdim}
 
 ## Author: jwe
 
 function y = rot90 (x, k)
 
   if (nargin == 1 || nargin == 2)
     if (nargin < 2)
diff --git a/scripts/general/rotdim.m b/scripts/general/rotdim.m
--- a/scripts/general/rotdim.m
+++ b/scripts/general/rotdim.m
@@ -47,16 +47,17 @@
 ## rot90 ([1, 2; 3, 4], -1, [1, 2])
 ## @equiv{}
 ## rot90 ([1, 2; 3, 4], 3, [1, 2])
 ## @equiv{}
 ## rot90 ([1, 2; 3, 4], 7, [1, 2])
 ## @end group
 ## @end example
 ## @end deftypefn
+##
 ## @seealso{rot90, flipud, fliplr and flipdim}
 
 function y = rotdim (x, k, plane)
   
   if (nargin < 1 || nargin > 3)
     usage ("rotdim (x, k, plane)");
   endif
 
diff --git a/scripts/general/rows.m b/scripts/general/rows.m
--- a/scripts/general/rows.m
+++ b/scripts/general/rows.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} rows (@var{a})
 ## Return the number of rows of @var{a}.
 ## @end deftypefn
+##
 ## @seealso{size, columns, length, isscalar, isvector, and ismatrix}
 
 ## Author: jwe
 
 function nr = rows (x)
 
   if (nargin != 1)
     usage ("rows (x)");
diff --git a/scripts/general/shiftdim.m b/scripts/general/shiftdim.m
--- a/scripts/general/shiftdim.m
+++ b/scripts/general/shiftdim.m
@@ -41,16 +41,17 @@
 ## size (shiftdim (x, 1))
 ##      @result{} [1, 1, 2, 3]
 ## [b, ns] = shiftdim (x);
 ##      @result{} b =  [1, 1, 1; 1, 1, 1]
 ##      @result{} ns = 1
 ## @end group
 ## @end example
 ## @end deftypefn
+##
 ## @seealso {reshape, permute, ipermute, circshift, squeeze}
 
 function [y, ns]  = shiftdim (x, n)
 
   if (nargin == 1)
     ## Find the first singleton dimension.
     nd = ndims (x);
     orig_dims = size (x);
diff --git a/scripts/general/sph2cart.m b/scripts/general/sph2cart.m
--- a/scripts/general/sph2cart.m
+++ b/scripts/general/sph2cart.m
@@ -20,16 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} [@var{x}, @var{y}, @var{z}] = sph2cart (@var{theta}, @var{phi}, @var{r})
 ## Transform spherical to cartesian coordinates.
 ## @var{x}, @var{y} and @var{z} must be of same shape.
 ## @var{theta} describes the angle relative to the x-axis.
 ## @var{phi} is the angle relative to the xy-plane.
 ## @var{r} is the distance to the origin (0, 0, 0).
 ## @end deftypefn
+##
 ## @seealso{pol2cart, cart2pol, cart2sph}
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 ## Adapted-by: jwe
 
 function [X, Y, Z] = sph2cart (Theta, Phi, R)
 
   if (nargin != 3)
diff --git a/scripts/general/sub2ind.m b/scripts/general/sub2ind.m
--- a/scripts/general/sub2ind.m
+++ b/scripts/general/sub2ind.m
@@ -17,16 +17,17 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{ind} =} sub2ind (@var{dims}, @var{i}, @var{j})
 ## @deftypefnx {Function File} {@var{ind} =} sub2ind (@var{dims}, @var{s1}, @var{s2}, @dots{}, @var{sN})
 ## Convert subscripts into a linear index.
 ## @end deftypefn
+##
 ## @seealso{ind2sub}
 
 ## Author: Paul Kienzle <pkienzle@kienzle.powernet.co.uk>
 ## Adapted-by: jwe
 
 function ind = sub2ind (dims, varargin)
 
   if (nargin > 1)
diff --git a/scripts/general/tril.m b/scripts/general/tril.m
--- a/scripts/general/tril.m
+++ b/scripts/general/tril.m
@@ -55,16 +55,17 @@
 ## @group
 ## tril (ones (3), 1)
 ##      @result{}  1  1  0
 ##          1  1  1
 ##          1  1  1
 ## @end group
 ## @end example
 ## @end deftypefn
+##
 ## @seealso{triu and diag}
 
 ## Author: jwe
 
 function retval = tril (x, k)
 
   if (nargin > 0)
     [nr, nc] = size (x);
diff --git a/scripts/image/hsv2rgb.m b/scripts/image/hsv2rgb.m
--- a/scripts/image/hsv2rgb.m
+++ b/scripts/image/hsv2rgb.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} @var{rgb_map} = hsv2rgb (@var{hsv_map})
 ## Transform a colormap from the hsv space to the rgb space. 
 ## @end deftypefn
+##
 ## @seealso{rgb2hsv}
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 ## Adapted-by: jwe
 
 function rgb_map = hsv2rgb (hsv_map)
 
 ## each color value x=(r,g,b) is calculated with
diff --git a/scripts/image/image.m b/scripts/image/image.m
--- a/scripts/image/image.m
+++ b/scripts/image/image.m
@@ -26,16 +26,17 @@
 ## scaled to fit within 600x350 (to a max of 4).
 ##
 ## It first tries to use @code{display} from @code{ImageMagick} then
 ## @code{xv} and then @code{xloadimage}.
 ##
 ## The axis values corresponding to the matrix elements are specified in
 ## @var{x} and @var{y}. At present they are ignored.
 ## @end deftypefn
+##
 ## @seealso{imshow, imagesc, and colormap}
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
 function image (x, y, A, zoom)
 
diff --git a/scripts/image/imagesc.m b/scripts/image/imagesc.m
--- a/scripts/image/imagesc.m
+++ b/scripts/image/imagesc.m
@@ -30,16 +30,17 @@
 ## given, then that range maps into the full range of the colormap rather 
 ## than the minimum and maximum values of @var{A}.
 ##
 ## The axis values corresponding to the matrix elements are specified in
 ## @var{x} and @var{y}, either as pairs giving the minimum and maximum
 ## values for the respective axes, or as values for each row and column
 ## of the matrix @var{A}.  At present they are ignored.
 ## @end deftypefn
+##
 ## @seealso{image and imshow}
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
 function ret = imagesc (x, y, A, zoom, limits)
 
diff --git a/scripts/image/ind2gray.m b/scripts/image/ind2gray.m
--- a/scripts/image/ind2gray.m
+++ b/scripts/image/ind2gray.m
@@ -18,16 +18,17 @@
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} ind2gray (@var{x}, @var{map})
 ## Convert an Octave indexed image to a gray scale intensity image.
 ## If @var{map} is omitted, the current colormap is used to determine the
 ## intensities.
 ## @end deftypefn
+##
 ## @seealso{gray2ind, rgb2ntsc, image, and colormap}
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
 function Y = ind2gray (X, map)
 
diff --git a/scripts/image/ind2rgb.m b/scripts/image/ind2rgb.m
--- a/scripts/image/ind2rgb.m
+++ b/scripts/image/ind2rgb.m
@@ -17,16 +17,17 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{r}, @var{g}, @var{b}] =} ind2rgb (@var{x}, @var{map})
 ## Convert an indexed image to red, green, and blue color components.
 ## If @var{map} is omitted, the current colormap is used for the conversion.
 ## @end deftypefn
+##
 ## @seealso{rgb2ind, image, imshow, ind2gray, and gray2ind}
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
 function [R, G, B] = ind2rgb (X, map)
 
diff --git a/scripts/image/loadimage.m b/scripts/image/loadimage.m
--- a/scripts/image/loadimage.m
+++ b/scripts/image/loadimage.m
@@ -17,16 +17,17 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{x}, @var{map}] =} loadimage (@var{file})
 ## Load an image file and it's associated color map from the specified
 ## @var{file}.  The image must be stored in Octave's image format.
 ## @end deftypefn
+##
 ## @seealso{saveimage, load, and save}
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
 function [img_retval, map_retval] = loadimage (filename)
 
diff --git a/scripts/image/rgb2hsv.m b/scripts/image/rgb2hsv.m
--- a/scripts/image/rgb2hsv.m
+++ b/scripts/image/rgb2hsv.m
@@ -23,16 +23,17 @@
 ##
 ## A color n the RGB space consists of the red, green and blue intensities.
 ##
 ## In the HSV space each color is represented by their hue, saturation
 ## and value (brightness).  Value gives the amount of light in the color.
 ## Hue describes the dominant wavelegth. 
 ## Saturation is the amount of Hue mixed into the color. 
 ## @end deftypefn
+##
 ## @seealso{hsv2rgb}
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 ## Adapted-by: jwe
 
 function hsval = rgb2hsv (rgb)
 
   if (nargin != 1)
diff --git a/scripts/image/rgb2ind.m b/scripts/image/rgb2ind.m
--- a/scripts/image/rgb2ind.m
+++ b/scripts/image/rgb2ind.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{x}, @var{map}] =} rgb2ind (@var{r}, @var{g}, @var{b})
 ## Convert and RGB image to an Octave indexed image.
 ## @end deftypefn
+##
 ## @seealso{ind2rgb and rgb2ntsc}
 
 ## Bugs: The color map may have duplicate entries.
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
diff --git a/scripts/image/saveimage.m b/scripts/image/saveimage.m
--- a/scripts/image/saveimage.m
+++ b/scripts/image/saveimage.m
@@ -38,26 +38,27 @@
 ## saved along with the image.
 ##
 ## Note: if the colormap contains only two entries and these entries are
 ## black and white, the bitmap ppm and PostScript formats are used.  If the
 ## image is a gray scale image (the entries within each row of the colormap
 ## are equal) the gray scale ppm and PostScript image formats are used,
 ## otherwise the full color formats are used.
 ## @end deftypefn
+##
+## @seealso{loadimage, save, load, and colormap}
 
 ## The conversion to PostScript is based on pbmtolps.c, which was
 ## written by
 ##
 ##   George Phillips <phillips@cs.ubc.ca>
 ##   Department of Computer Science
 ##   University of British Columbia
 ##
 ## and is part of the portable bitmap utilities,
-## @seealso{loadimage, save, load, and colormap}
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
 ## Rewritten by jwe to avoid using octoppm and pbm routines so that
 ## people who don't have the the pbm stuff installed can still use this
 ## function.
diff --git a/scripts/io/beep.m b/scripts/io/beep.m
--- a/scripts/io/beep.m
+++ b/scripts/io/beep.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} puts (@var{string})
 ## Produce a beep from the speaker (or visual bell).
 ## @end deftypefn
+##
 ## @seealso{puts, fputs, printf and fprintf}
 
 ## Author: jwe
 
 function beep ()
 
   if (nargin == 0)
     puts ("\a");
diff --git a/scripts/linear-algebra/cond.m b/scripts/linear-algebra/cond.m
--- a/scripts/linear-algebra/cond.m
+++ b/scripts/linear-algebra/cond.m
@@ -18,16 +18,17 @@
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cond (@var{a})
 ## Compute the (two-norm) condition number of a matrix. @code{cond (a)} is
 ## defined as @code{norm (a) * norm (inv (a))}, and is computed via a
 ## singular value decomposition.
 ## @end deftypefn
+##
 ## @seealso{norm, svd, and rank}
 
 ## Author: jwe
 
 function retval = cond (a)
 
   if (nargin == 1)
     if (ndims (a) > 2)
diff --git a/scripts/linear-algebra/norm.m b/scripts/linear-algebra/norm.m
--- a/scripts/linear-algebra/norm.m
+++ b/scripts/linear-algebra/norm.m
@@ -48,16 +48,17 @@
 ##
 ## @item @var{p} = @code{-Inf}
 ## @code{min (abs (@var{a}))}.
 ##
 ## @item other
 ## p-norm of @var{a}, @code{(sum (abs (@var{a}) .^ @var{p})) ^ (1/@var{p})}.
 ## @end table
 ## @end deftypefn
+##
 ## @seealso{cond and svd}
 
 ## Author: jwe
 
 function retval = norm (x, p)
 
   if (nargin < 1 || nargin > 2)
     usage ("norm (x, p)");
diff --git a/scripts/miscellaneous/comma.m b/scripts/miscellaneous/comma.m
--- a/scripts/miscellaneous/comma.m
+++ b/scripts/miscellaneous/comma.m
@@ -16,9 +16,10 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deffn {Operator} ,
 ## Array index, function argument, or command separator.
 ## @end deffn
+##
 ## @seealso{semicolon}
diff --git a/scripts/miscellaneous/dir.m b/scripts/miscellaneous/dir.m
--- a/scripts/miscellaneous/dir.m
+++ b/scripts/miscellaneous/dir.m
@@ -35,16 +35,17 @@
 ##
 ## @noindent
 ## in which @code{statinfo} is the structure returned from @code{stat}.
 ##
 ## If @var{directory} is not a directory, return information about the
 ## named file.
 ## @var{filename}.
 ## @end deftypefn
+##
 ## @seealso{stat}
 
 ## Author: jwe
 
 ## XXX FIXME XXX -- this is quite slow for large directories, so perhaps
 ## it should be converted to C++.
 
 function retval = dir (file)
diff --git a/scripts/miscellaneous/etime.m b/scripts/miscellaneous/etime.m
--- a/scripts/miscellaneous/etime.m
+++ b/scripts/miscellaneous/etime.m
@@ -27,16 +27,17 @@
 ## # many computations later...
 ## elapsed_time = etime (clock (), t0);
 ## @end example
 ##
 ## @noindent
 ## will set the variable @code{elapsed_time} to the number of seconds since
 ## the variable @code{t0} was set.
 ## @end deftypefn
+##
 ## @seealso{tic, toc, clock, and cputime}
 
 ## Author: jwe
 
 function secs = etime (t1, t0)
 
   if (nargin != 2)
     usage ("etime (t1, t0)");
diff --git a/scripts/miscellaneous/menu.m b/scripts/miscellaneous/menu.m
--- a/scripts/miscellaneous/menu.m
+++ b/scripts/miscellaneous/menu.m
@@ -21,16 +21,17 @@
 ## @deftypefn {Function File} {} menu (@var{title}, @var{opt1}, @dots{})
 ## Print a title string followed by a series of options.  Each option will
 ## be printed along with a number.  The return value is the number of the
 ## option selected by the user.  This function is useful for interactive
 ## programs.  There is no limit to the number of options that may be passed
 ## in, but it may be confusing to present more than will fit easily on one
 ## screen.
 ## @end deftypefn
+##
 ## @seealso{disp, printf, and input}
 
 ## Author: jwe
 
 function num = menu (t, varargin)
 
   if (nargin < 2)
     usage ("menu (title, opt1, ...)");
diff --git a/scripts/miscellaneous/semicolon.m b/scripts/miscellaneous/semicolon.m
--- a/scripts/miscellaneous/semicolon.m
+++ b/scripts/miscellaneous/semicolon.m
@@ -16,9 +16,10 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deffn {Operator} ;
 ## Array row or command separator.
 ## @end deffn
+##
 ## @seealso{comma}
diff --git a/scripts/miscellaneous/texas_lotto.m b/scripts/miscellaneous/texas_lotto.m
--- a/scripts/miscellaneous/texas_lotto.m
+++ b/scripts/miscellaneous/texas_lotto.m
@@ -17,16 +17,17 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} texas_lotto ()
 ## Pick 6 unique numbers between 1 and 50 that are guaranteed to win
 ## the Texas Lotto.
 ## @end deftypefn
+##
 ## @seealso{rand}
 
 ## Author: jwe
 
 function picks = texas_lotto ()
 
   if (nargin != 0)
     warning ("win_texas_lotto: ignoring extra arguments");
diff --git a/scripts/miscellaneous/unix.m b/scripts/miscellaneous/unix.m
--- a/scripts/miscellaneous/unix.m
+++ b/scripts/miscellaneous/unix.m
@@ -21,16 +21,17 @@
 ## @deftypefn {Function File} {[@var{status}, @var{text}]} unix (@var{command})
 ## @deftypefnx {Function File} {[@var{status}, @var{text}]} unix (@var{command}, "-echo")
 ## Execute a system command if running under a Unix-like operating
 ## system, otherwise do nothing.  Return the exit status of the program
 ## in @var{status} and any output sent to the standard output in
 ## @var{text}.  If the optional second argument @code{"-echo"} is given,
 ## then also send the output from the command to the standard output.
 ## @end deftypefn
+##
 ## @seealso{isunix, ispc, system}
 
 ## Author: octave-forge ???
 ## Adapted by: jwe
 
 function [status, text] = unix (cmd, echo_arg)
 
   if (nargin < 1 || nargin > 2)
diff --git a/scripts/plot/__errcomm__.m b/scripts/plot/__errcomm__.m
--- a/scripts/plot/__errcomm__.m
+++ b/scripts/plot/__errcomm__.m
@@ -18,16 +18,17 @@
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __errcomm__ (@var{args})
 ## Common argument handling code for all error plots (errorbar, loglogerr,
 ## semilogyerr, semilogxerr).
 ##
 ## @end deftypefn
+##
 ## @seealso{errorbar, semilogxerr, semilogyerr, loglogerr, __pltopt__}
 
 ## Created: 20.02.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
 function __errcomm__ (caller, varargin)
 
diff --git a/scripts/plot/__errplot__.m b/scripts/plot/__errplot__.m
--- a/scripts/plot/__errplot__.m
+++ b/scripts/plot/__errplot__.m
@@ -21,16 +21,17 @@
 ## @deftypefn {Function File} {} __errplot__ (@var{args})
 ## Really plot errorbar plots. User interface in function errorbar.
 ##
 ## @example
 ## __errplot__ (@var{arg1}, @var{arg2}, ..., @var{fmt})
 ## @end example
 ##
 ## @end deftypefn
+##
 ## @seealso{semilogx, semilogy, loglog, polar, mesh, contour, __pltopt__
 ## bar, stairs, errorbar, gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Created: 18.7.2000
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
 function __errplot__ (fstr,a1,a2,a3,a4,a5,a6)
diff --git a/scripts/plot/__pltopt1__.m b/scripts/plot/__pltopt1__.m
--- a/scripts/plot/__pltopt1__.m
+++ b/scripts/plot/__pltopt1__.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __pltopt1__ (@var{caller}, @var{opt})
 ## Really decode plot option strings.
 ## @end deftypefn
+##
 ## @seealso{__pltopt__}
 
 ## Author: Rick Niles <niles@axp745.gsfc.nasa.gov>
 ## Adapted-By: jwe
 ## Maintainer: jwe
 
 function fmt = __pltopt1__ (caller, opt)
 
diff --git a/scripts/plot/__pltopt__.m b/scripts/plot/__pltopt__.m
--- a/scripts/plot/__pltopt__.m
+++ b/scripts/plot/__pltopt__.m
@@ -99,16 +99,17 @@
 ##   1    red       green       solid           "o"         "+"
 ##   2    green     blue        long dash       "+"         "x"
 ##   3    blue      red         short dash     square       "*"
 ##   4    magenta   magenta     dotted          "x"        open square
 ##   5    cyan      cyan        dot long dash  triangle    filled square
 ##   6    brown     yellow      dot short dash  "*"         "o"
 ## @end example
 ## @end deftypefn
+##
 ## @seealso{__pltopt1__}
 
 ## Author: jwe
 
 function fmt = __pltopt__ (caller, opt)
 
   if (! isstr (opt))
     usage ("__pltopt__ (caller, opt)");
diff --git a/scripts/plot/bar.m b/scripts/plot/bar.m
--- a/scripts/plot/bar.m
+++ b/scripts/plot/bar.m
@@ -37,16 +37,17 @@
 ## @example
 ## [xb, yb] = bar (x, y);
 ## plot (xb, yb);
 ## @end example
 ##
 ## @noindent
 ## are equivalent.
 ## @end deftypefn
+##
 ## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ## stairs, gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Author: jwe
 
 function [xb, yb] = bar (x, y)
 
   if (nargin == 1)
diff --git a/scripts/plot/contour.m b/scripts/plot/contour.m
--- a/scripts/plot/contour.m
+++ b/scripts/plot/contour.m
@@ -19,16 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} contour (@var{z}, @var{n})
 ## @deftypefnx {Function File} {} contour (@var{x}, @var{y}, @var{z}, @var{n})
 ## Make a contour plot of the three-dimensional surface described by
 ## @var{z}.  Someone needs to improve @code{gnuplot}'s contour routines
 ## before this will be very useful.
 ## @end deftypefn
+##
 ## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ## bar, stairs, gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Author: jwe
 
 function contour (x, y, z, n)
 
   ## XXX FIXME XXX -- these plot states should really just be set
diff --git a/scripts/plot/errorbar.m b/scripts/plot/errorbar.m
--- a/scripts/plot/errorbar.m
+++ b/scripts/plot/errorbar.m
@@ -98,16 +98,17 @@
 ## errorbar(@var{x}, @var{y}, @var{lx}, @var{ux}, @var{ly}, @var{uy}, "~>")
 ## @end example
 ##
 ## xyerrorbar plot of @var{y} versus @var{x} where @var{x} errorbars
 ## are drawn from @var{x}-@var{lx} to @var{x}+@var{ux} and @var{y} errorbars
 ## from @var{y}-@var{ly} to @var{y}+@var{uy}.
 ##
 ## @end deftypefn
+##
 ## @seealso{semilogx, semilogy, loglog, polar, mesh, contour, __pltopt__,
 ## bar, stairs, gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Created: 18.7.2000
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
 function errorbar (varargin)
diff --git a/scripts/plot/grid.m b/scripts/plot/grid.m
--- a/scripts/plot/grid.m
+++ b/scripts/plot/grid.m
@@ -18,16 +18,17 @@
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} grid (@var{arg})
 ## For two-dimensional plotting, force the display of a grid on the plot.
 ## The argument may be either @code{"on"} or @code{"off"}.  If it is
 ## omitted, @code{"on"} is assumed.
 ## @end deftypefn
+##
 ## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ## bar, stairs, gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Author: jwe
 
 ## PKG_ADD: mark_as_command grid
 
 function grid (x)
diff --git a/scripts/plot/hist.m b/scripts/plot/hist.m
--- a/scripts/plot/hist.m
+++ b/scripts/plot/hist.m
@@ -34,16 +34,17 @@
 ## If third argument is provided, the histogram is normalised such that
 ## the sum of the bars is equal to @var{norm}.
 ##
 ## Extreme values are lumped in the first and last bins.
 ##
 ## With two output arguments, produce the values @var{nn} and @var{xx} such
 ## that @code{bar (@var{xx}, @var{nn})} will plot the histogram.
 ## @end deftypefn
+##
 ## @seealso{bar}
 
 ## Author: jwe
 
 function [nn, xx] = hist (y, x, norm)
 
   if (nargin < 1 || nargin > 3)
     usage ("[nn, xx] = hist (y, x, norm)");
diff --git a/scripts/plot/loglog.m b/scripts/plot/loglog.m
--- a/scripts/plot/loglog.m
+++ b/scripts/plot/loglog.m
@@ -18,16 +18,17 @@
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} loglog (@var{args})
 ## Make a two-dimensional plot using log scales for both axes.  See the
 ## description of @code{plot} for a description of the arguments that
 ## @code{loglog} will accept.
 ## @end deftypefn
+##
 ## @seealso{plot, semilogy, loglog, polar, mesh, contour, bar, stairs,
 ## gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Author: jwe
 
 function loglog (varargin)
 
   ## XXX FIXME XXX -- these plot states should really just be set
diff --git a/scripts/plot/loglogerr.m b/scripts/plot/loglogerr.m
--- a/scripts/plot/loglogerr.m
+++ b/scripts/plot/loglogerr.m
@@ -29,16 +29,17 @@
 ##
 ## @noindent
 ## which produces a double logarithm plot of @var{y} versus @var{x} 
 ## with errors in the @var{y}-scale defined by @var{ey} and the plot
 ## format defined by @var{fmt}. See errorbar for available formats and 
 ## additional information.
 ##
 ## @end deftypefn
+##
 ## @seealso{errorbar, semilogxerr, semilogyerr, polar, mesh, contour, 
 ## __pltopt__, bar, stairs, gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Created: 20.2.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
 function loglogerr (varargin)
diff --git a/scripts/plot/mesh.m b/scripts/plot/mesh.m
--- a/scripts/plot/mesh.m
+++ b/scripts/plot/mesh.m
@@ -21,16 +21,17 @@
 ## @deftypefn {Function File} {} mesh (@var{x}, @var{y}, @var{z})
 ## Plot a mesh given matrices @var{x}, and @var{y} from @code{meshdom} and
 ## a matrix @var{z} corresponding to the @var{x} and @var{y} coordinates of
 ## the mesh.  If @var{x} and @var{y} are vectors, then a typical vertex
 ## is (@var{x}(j), @var{y}(i), @var{z}(i,j)).  Thus, columns of @var{z}
 ## correspond to different @var{x} values and rows of @var{z} correspond
 ## to different @var{y} values.
 ## @end deftypefn
+##
 ## @seealso{plot, semilogx, semilogy, loglog, polar, meshgrid, meshdom,
 ## contour, bar, stairs, gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Author: jwe
 
 function mesh (x, y, z)
 
   ## XXX FIXME XXX -- the plot states should really just be set
diff --git a/scripts/plot/meshgrid.m b/scripts/plot/meshgrid.m
--- a/scripts/plot/meshgrid.m
+++ b/scripts/plot/meshgrid.m
@@ -19,16 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{xx}, @var{yy}] =} meshgrid (@var{x}, @var{y})
 ## @deftypefnx {Function File} {[@var{xx}, @var{yy}] =} meshgrid (@var{x})
 ## Given vectors of @var{x} and @var{y} coordinates, return two matrices corresponding
 ## to the @var{x} and @var{y} coordinates of a mesh.  The rows of @var{xx} are copies of @var{x},
 ## and the columns of @var{yy} are copies of @var{y}.
 ## @end deftypefn
+##
 ## @seealso{sombrero, plot, semilogx, semilogy, loglog, polar, mesh, meshdom, contour,
 ## bar, stairs, gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Author: jwe
 
 function [xx, yy] = meshgrid (x, y)
 
   if (nargin == 1)
diff --git a/scripts/plot/plot.m b/scripts/plot/plot.m
--- a/scripts/plot/plot.m
+++ b/scripts/plot/plot.m
@@ -158,16 +158,17 @@
 ## @example
 ## t = 0:0.1:6.3;
 ## plot (t, cos(t), "-;cos(t);", t, sin(t), "+3;sin(t);");
 ## @end example
 ##
 ## This will plot the cosine and sine functions and label them accordingly
 ## in the key.
 ## @end deftypefn
+##
 ## @seealso{semilogx, semilogy, loglog, polar, mesh, contour, __pltopt__
 ## bar, stairs, errorbar, gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Author: jwe
 
 function plot (varargin)
 
   ## XXX FIXME XXX -- these plot states should really just be set
diff --git a/scripts/plot/polar.m b/scripts/plot/polar.m
--- a/scripts/plot/polar.m
+++ b/scripts/plot/polar.m
@@ -19,16 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} polar (@var{theta}, @var{rho}, @var{fmt})
 ## Make a two-dimensional plot given polar the coordinates @var{theta} and
 ## @var{rho}.
 ##
 ## The optional third argument specifies the line type.
 ## @end deftypefn
+##
 ## @seealso{plot, semilogx, semilogy, loglog, mesh, contour, bar,
 ## stairs, gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Author: jwe
 
 function polar (x1, x2, fmt)
 
   ## XXX FIXME XXX -- these plot states should really just be set
diff --git a/scripts/plot/semilogx.m b/scripts/plot/semilogx.m
--- a/scripts/plot/semilogx.m
+++ b/scripts/plot/semilogx.m
@@ -18,16 +18,17 @@
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} semilogx (@var{args})
 ## Make a two-dimensional plot using a log scale for the @var{x} axis.  See
 ## the description of @code{plot} for a description of the arguments
 ## that @code{semilogx} will accept.
 ## @end deftypefn
+##
 ## @seealso{plot, semilogy, loglog, polar, mesh, contour, bar, stairs,
 ## gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Author: jwe
 
 function semilogx (varargin)
 
   ## XXX FIXME XXX -- these plot states should really just be set
diff --git a/scripts/plot/semilogxerr.m b/scripts/plot/semilogxerr.m
--- a/scripts/plot/semilogxerr.m
+++ b/scripts/plot/semilogxerr.m
@@ -29,16 +29,17 @@
 ##
 ## @noindent
 ## which produces a semi-logarithm plot of @var{y} versus @var{x}
 ## with errors in the @var{y}-scale defined by @var{ey} and the plot
 ## format defined by @var{fmt}. See errorbar for available formats and 
 ## additional information.
 ##
 ## @end deftypefn
+##
 ## @seealso{errorbar, loglogerr semilogyerr, polar, mesh, contour, __pltopt__, 
 ## bar, stairs, gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Created: 20.2.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
 function semilogxerr (varargin)
diff --git a/scripts/plot/semilogy.m b/scripts/plot/semilogy.m
--- a/scripts/plot/semilogy.m
+++ b/scripts/plot/semilogy.m
@@ -18,16 +18,17 @@
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} semilogy (@var{args})
 ## Make a two-dimensional plot using a log scale for the @var{y} axis.  See
 ## the description of @code{plot} for a description of the arguments
 ## that @code{semilogy} will accept.
 ## @end deftypefn
+##
 ## @seealso{plot, semilogx, loglog, polar, mesh, contour, bar, stairs,
 ## gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Author: jwe
 
 function semilogy (varargin)
 
   ## XXX FIXME XXX -- these plot states should really just be set
diff --git a/scripts/plot/semilogyerr.m b/scripts/plot/semilogyerr.m
--- a/scripts/plot/semilogyerr.m
+++ b/scripts/plot/semilogyerr.m
@@ -29,16 +29,17 @@
 ##
 ## @noindent
 ## which produces a semi-logarithm plot of @var{y} versus @var{x}
 ## with errors in the @var{y}-scale defined by @var{ey} and the plot
 ## format defined by @var{fmt}. See errorbar for available formats and 
 ## additional information.
 ##
 ## @end deftypefn
+##
 ## @seealso{errorbar, loglogerr semilogxerr, polar, mesh, contour, __pltopt__, 
 ## bar, stairs, gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Created: 20.2.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
 function semilogyerr (varargin)
diff --git a/scripts/plot/shg.m b/scripts/plot/shg.m
--- a/scripts/plot/shg.m
+++ b/scripts/plot/shg.m
@@ -19,16 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} shg
 ##
 ## Show the graph window.  Currently, this is the same as executing
 ## replot without any arguments.
 ##
 ## @end deftypefn
+##
 ## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ## bar, stairs, gplot, gsplot, replot, xlabel, and ylabel}
 
 ## Author: jwe
 
 function shg ()
 
   if (nargin != 0)
diff --git a/scripts/plot/stairs.m b/scripts/plot/stairs.m
--- a/scripts/plot/stairs.m
+++ b/scripts/plot/stairs.m
@@ -37,16 +37,17 @@
 ## @example
 ## [xs, ys] = stairs (x, y);
 ## plot (xs, ys);
 ## @end example
 ##
 ## @noindent
 ## are equivalent.
 ## @end deftypefn
+##
 ## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ## bar, gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Author: jwe
 
 function [xs, ys] = stairs (x, y)
 
 
diff --git a/scripts/plot/title.m b/scripts/plot/title.m
--- a/scripts/plot/title.m
+++ b/scripts/plot/title.m
@@ -17,16 +17,17 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} title (@var{string})
 ## Specify a title for a plot.  If you already have a plot displayed, use
 ## the command @code{replot} to redisplay it with the new title.
 ## @end deftypefn
+##
 ## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ## bar, stairs, gplot, gsplot, replot, xlabel, and ylabel}
 
 ## Author: jwe
 
 function h = title (text)
 
   if (nargin != 1)
diff --git a/scripts/plot/xlabel.m b/scripts/plot/xlabel.m
--- a/scripts/plot/xlabel.m
+++ b/scripts/plot/xlabel.m
@@ -20,16 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} xlabel (@var{string})
 ## @deftypefnx {Function File} {} ylabel (@var{string})
 ## @deftypefnx {Function File} {} zlabel (@var{string})
 ## Specify x, y, and z axis labels for the plot.  If you already have a plot
 ## displayed, use the command @code{replot} to redisplay it with the new
 ## labels.
 ## @end deftypefn
+##
 ## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ## bar, stairs, gplot, gsplot, replot, ylabel, and title}
 
 ## Author: jwe
 
 function h = xlabel (varargin)
 
   ## XXX FIXME XXX -- eventually, we will return a graphics handle.  For
diff --git a/scripts/polynomial/compan.m b/scripts/polynomial/compan.m
--- a/scripts/polynomial/compan.m
+++ b/scripts/polynomial/compan.m
@@ -47,16 +47,17 @@
 ##     |       .            .           .    .             .      |
 ##     |_      0            0      ...       1             0     _|
 ## @end smallexample
 ## @end ifinfo
 ##
 ## The eigenvalues of the companion matrix are equal to the roots of the
 ## polynomial.
 ## @end deftypefn
+##
 ## @seealso{poly, roots, residue, conv, deconv, polyval, polyderiv, and
 ## polyinteg}
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 ## Adapted-By: jwe
 
 function A = compan (c)
diff --git a/scripts/polynomial/conv.m b/scripts/polynomial/conv.m
--- a/scripts/polynomial/conv.m
+++ b/scripts/polynomial/conv.m
@@ -21,16 +21,17 @@
 ## @deftypefn {Function File} {} conv (@var{a}, @var{b})
 ## Convolve two vectors.
 ##
 ## @code{y = conv (a, b)} returns a vector of length equal to
 ## @code{length (a) + length (b) - 1}.
 ## If @var{a} and @var{b} are polynomial coefficient vectors, @code{conv}
 ## returns the coefficients of the product polynomial.
 ## @end deftypefn
+##
 ## @seealso{deconv, poly, roots, residue, polyval, polyderiv, and polyinteg}
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 ## Adapted-By: jwe
 
 function y = conv (a, b)
 
diff --git a/scripts/polynomial/deconv.m b/scripts/polynomial/deconv.m
--- a/scripts/polynomial/deconv.m
+++ b/scripts/polynomial/deconv.m
@@ -23,16 +23,17 @@
 ##
 ## @code{[b, r] = deconv (y, a)} solves for @var{b} and @var{r} such that
 ## @code{y = conv (a, b) + r}.
 ##
 ## If @var{y} and @var{a} are polynomial coefficient vectors, @var{b} will
 ## contain the coefficients of the polynomial quotient and @var{r} will be
 ## a remander polynomial of lowest order.
 ## @end deftypefn
+##
 ## @seealso{conv, poly, roots, residue, polyval, polyderiv, and polyinteg}
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 ## Adapted-By: jwe
 
 function [b, r] = deconv (y, a)
 
diff --git a/scripts/polynomial/polyderiv.m b/scripts/polynomial/polyderiv.m
--- a/scripts/polynomial/polyderiv.m
+++ b/scripts/polynomial/polyderiv.m
@@ -17,16 +17,17 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} polyderiv (@var{c})
 ## Return the coefficients of the derivative of the polynomial whose
 ## coefficients are given by vector @var{c}.
 ## @end deftypefn
+##
 ## @seealso{poly, polyinteg, polyreduce, roots, conv, deconv, residue,
 ## filter, polyval, and polyvalm}
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 ## Adapted-By: jwe
 
 function q = polyderiv (p)
diff --git a/scripts/polynomial/polyinteg.m b/scripts/polynomial/polyinteg.m
--- a/scripts/polynomial/polyinteg.m
+++ b/scripts/polynomial/polyinteg.m
@@ -19,16 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} polyinteg (@var{c})
 ## Return the coefficients of the integral of the polynomial whose
 ## coefficients are represented by the vector @var{c}.
 ##
 ## The constant of integration is set to zero.
 ## @end deftypefn
+##
 ## @seealso{poly, polyderiv, polyreduce, roots, conv, deconv, residue,
 ## filter, polyval, and polyvalm}
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 ## Adapted-By: jwe
 
 function p = polyinteg (p)
diff --git a/scripts/polynomial/polyout.m b/scripts/polynomial/polyout.m
--- a/scripts/polynomial/polyout.m
+++ b/scripts/polynomial/polyout.m
@@ -28,16 +28,17 @@
 ## @example
 ##    c(x) = c(1) * x^n + ... + c(n) x + c(n+1)
 ## @end example
 ## @end ifinfo
 ##  and return it as a string or write it to the screen (if
 ##  @var{nargout} is zero).
 ##  @var{x} defaults to the string @code{"s"}.
 ## @end deftypefn
+##
 ## @seealso{polyval, polyvalm, poly, roots, conv, deconv, residue,
 ## filter, polyderiv, and polyinteg}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: May 1995
 ## Nov 1998: Correctly handles complex coefficients
 
 function y = polyout (c, x)
diff --git a/scripts/polynomial/polyreduce.m b/scripts/polynomial/polyreduce.m
--- a/scripts/polynomial/polyreduce.m
+++ b/scripts/polynomial/polyreduce.m
@@ -17,16 +17,17 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} polyreduce (@var{c})
 ## Reduces a polynomial coefficient vector to a minimum number of terms by
 ## stripping off any leading zeros.
 ## @end deftypefn
+##
 ## @seealso{poly, roots, conv, deconv, residue, filter, polyval,
 ## polyvalm, polyderiv, and polyinteg}
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 ## Adapted-By: jwe
 
 function p = polyreduce (p)
diff --git a/scripts/polynomial/polyval.m b/scripts/polynomial/polyval.m
--- a/scripts/polynomial/polyval.m
+++ b/scripts/polynomial/polyval.m
@@ -22,16 +22,17 @@
 ## Evaluate a polynomial.
 ##
 ## @code{polyval (@var{c}, @var{x})} will evaluate the polynomial at the
 ## specified value of @var{x}.
 ##
 ## If @var{x} is a vector or matrix, the polynomial is evaluated at each of
 ## the elements of @var{x}.
 ## @end deftypefn
+##
 ## @seealso{polyvalm, poly, roots, conv, deconv, residue, filter,
 ## polyderiv, and polyinteg}
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 ## Adapted-By: jwe
 
 function y = polyval (c, x)
diff --git a/scripts/polynomial/polyvalm.m b/scripts/polynomial/polyvalm.m
--- a/scripts/polynomial/polyvalm.m
+++ b/scripts/polynomial/polyvalm.m
@@ -22,16 +22,17 @@
 ## Evaluate a polynomial in the matrix sense.
 ##
 ## @code{polyvalm (@var{c}, @var{x})} will evaluate the polynomial in the
 ## matrix sense, i.e. matrix multiplication is used instead of element by
 ## element multiplication as is used in polyval.
 ##
 ## The argument @var{x} must be a square matrix.
 ## @end deftypefn
+##
 ## @seealso{polyval, poly, roots, conv, deconv, residue, filter,
 ## polyderiv, and polyinteg}
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 ## Adapted-By: jwe
 
 function y = polyvalm (c, x)
diff --git a/scripts/polynomial/residue.m b/scripts/polynomial/residue.m
--- a/scripts/polynomial/residue.m
+++ b/scripts/polynomial/residue.m
@@ -95,16 +95,17 @@
 ##
 ## @example
 ##         s^2 + s + 1       -2        7        3
 ##    ------------------- = ----- + ------- + -----
 ##    s^3 - 5s^2 + 8s - 4   (s-2)   (s-2)^2   (s-1)
 ## @end example
 ## @end ifinfo
 ## @end deftypefn
+##
 ## @seealso{poly, roots, conv, deconv, polyval, polyderiv, and polyinteg}
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 ## Adapted-By: jwe
 
 function [r, p, k, e] = residue (b, a, toler)
 
diff --git a/scripts/set/complement.m b/scripts/set/complement.m
--- a/scripts/set/complement.m
+++ b/scripts/set/complement.m
@@ -24,16 +24,17 @@
 ##
 ## @example
 ## @group
 ## complement ([ 1, 2, 3 ], [ 2, 3, 5 ])
 ##      @result{} 5
 ## @end group
 ## @end example
 ## @end deftypefn
+##
 ## @seealso{create_set, union, and intersection}
 
 ## Author: jwe
 
 function y = complement (a, b)
 
   if (nargin != 2)
     usage ("complement(a,b)");
diff --git a/scripts/set/create_set.m b/scripts/set/create_set.m
--- a/scripts/set/create_set.m
+++ b/scripts/set/create_set.m
@@ -24,16 +24,17 @@
 ##
 ## @example
 ## @group
 ## create_set ([ 1, 2; 3, 4; 4, 2 ])
 ##      @result{} [ 1, 2, 3, 4 ]
 ## @end group
 ## @end example
 ## @end deftypefn
+##
 ## @seealso{union, intersection, and complement}
 
 ## Author: jwe
 
 function y = create_set(x)
 
   if (nargin != 1)
     usage ("create_set(x)");
diff --git a/scripts/set/intersection.m b/scripts/set/intersection.m
--- a/scripts/set/intersection.m
+++ b/scripts/set/intersection.m
@@ -24,16 +24,17 @@
 ##
 ## @example
 ## @group
 ## intersection ([ 1, 2, 3 ], [ 2, 3, 5 ])
 ##      @result{} [ 2, 3 ]
 ## @end group
 ## @end example
 ## @end deftypefn
+##
 ## @seealso{create_set, union, and complement}
 
 ## Author: jwe
 
 function y = intersection(a,b)
 
   if (nargin != 2)
     usage ("intersection(a,b)");
diff --git a/scripts/set/union.m b/scripts/set/union.m
--- a/scripts/set/union.m
+++ b/scripts/set/union.m
@@ -24,16 +24,17 @@
 ##
 ## @example
 ## @group
 ## union ([ 1, 2, 4 ], [ 2, 3, 5 ])
 ##      @result{} [ 1, 2, 3, 4, 5 ]
 ## @end group
 ## @end example
 ## @end deftypefn
+##
 ## @seealso{create_set, intersection, and complement}
 
 ## Author: jwe
 
 function y = union(a,b)
 
   if (nargin != 2)
     usage ("union(a,b)");
diff --git a/scripts/specfun/erfinv.m b/scripts/specfun/erfinv.m
--- a/scripts/specfun/erfinv.m
+++ b/scripts/specfun/erfinv.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Mapping Function} {} erfinv (@var{z})
 ## Computes the inverse of the error function.
 ## @end deftypefn
+##
 ## @seealso{erf and erfc}
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Created: 27 September 1994
 ## Adapted-By: jwe
 
 function [y, iterations] = erfinv (x)
 
diff --git a/scripts/specfun/log2.m b/scripts/specfun/log2.m
--- a/scripts/specfun/log2.m
+++ b/scripts/specfun/log2.m
@@ -26,16 +26,17 @@
 ## @tex
 ##  $1/2 <= |f| < 1$ and $x = f \cdot 2^e$.
 ## @end tex
 ## @end iftex
 ## @ifinfo
 ##  1/2 <= abs(f) < 1 and x = f * 2^e.
 ## @end ifinfo
 ## @end deftypefn
+##
 ## @seealso{log, log10, logspace, and exp}
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Created: 17 October 1994
 ## Adapted-By: jwe
 
 function [f, e] = log2 (x)
 
diff --git a/scripts/specfun/pow2.m b/scripts/specfun/pow2.m
--- a/scripts/specfun/pow2.m
+++ b/scripts/specfun/pow2.m
@@ -34,16 +34,17 @@
 ## @tex
 ##  $f \cdot 2^e$.
 ## @end tex
 ## @end iftex
 ## @ifinfo
 ##  f .* (2 .^ e).
 ## @end ifinfo
 ## @end deftypefn
+##
 ## @seealso{nextpow2}
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Created: 17 October 1994
 ## Adapted-By: jwe
 
 function y = pow2 (f, e)
 
diff --git a/scripts/special-matrix/hankel.m b/scripts/special-matrix/hankel.m
--- a/scripts/special-matrix/hankel.m
+++ b/scripts/special-matrix/hankel.m
@@ -39,16 +39,17 @@
 ## @example
 ## @group
 ## H(i,j) = c(i+j-1),  i+j-1 <= m;
 ## H(i,j) = r(i+j-m),  otherwise
 ## @end group
 ## @end example
 ## @end ifinfo
 ## @end deftypefn
+##
 ## @seealso{vander, sylvester_matrix, hilb, invhilb, and toeplitz}
 
 ## Author: jwe
 
 function retval = hankel (c, r)
 
   if (nargin == 1)
     r = zeros (size (c));
diff --git a/scripts/special-matrix/hilb.m b/scripts/special-matrix/hilb.m
--- a/scripts/special-matrix/hilb.m
+++ b/scripts/special-matrix/hilb.m
@@ -38,16 +38,17 @@
 ## @end iftex
 ## @ifinfo
 ##
 ## @example
 ## H (i, j) = 1 / (i + j - 1)
 ## @end example
 ## @end ifinfo
 ## @end deftypefn
+##
 ## @seealso{hankel, vander, sylvester_matrix, invhilb, and toeplitz}
 
 ## Author: jwe
 
 function retval = hilb (n)
 
 
   if (nargin != 1)
diff --git a/scripts/special-matrix/invhilb.m b/scripts/special-matrix/invhilb.m
--- a/scripts/special-matrix/invhilb.m
+++ b/scripts/special-matrix/invhilb.m
@@ -58,16 +58,17 @@
 ## be derived more directly via the theory of Cauchy matrices: 
 ## see J. W. Demmel, Applied Numerical Linear Algebra, page 92.
 ##
 ## Compare this with the numerical calculation of @code{inverse (hilb (n))},
 ## which suffers from the ill-conditioning of the Hilbert matrix, and the
 ## finite precision of your computer's floating point arithmetic.
 ##
 ## @end deftypefn
+##
 ## @seealso{hankel, vander, sylvester_matrix, hilb, and toeplitz}
 
 ## Author: Dirk Laurie <dirk@siegfried.wisk.sun.ac.za>
 
 function retval = invhilb (n)
 
   if (nargin != 1)
     usage ("invhilb (n)");
diff --git a/scripts/special-matrix/sylvester_matrix.m b/scripts/special-matrix/sylvester_matrix.m
--- a/scripts/special-matrix/sylvester_matrix.m
+++ b/scripts/special-matrix/sylvester_matrix.m
@@ -24,16 +24,17 @@
 ## @tex
 ## $n = 2^k$.
 ## @end tex
 ## @end iftex
 ## @ifinfo
 ## n = 2^k.
 ## @end ifinfo
 ## @end deftypefn
+##
 ## @seealso{hankel, vander, hilb, invhilb, and toeplitz}
 
 ## Author: jwe
 
 function retval = sylvester_matrix (k)
 
   if (nargin != 1)
     usage ("sylvester_matrix (n)");
diff --git a/scripts/special-matrix/toeplitz.m b/scripts/special-matrix/toeplitz.m
--- a/scripts/special-matrix/toeplitz.m
+++ b/scripts/special-matrix/toeplitz.m
@@ -47,16 +47,17 @@
 ##  .     ,      ,   .      .
 ##  .     ,      ,     .    .
 ##  .     ,      ,       .  .
 ## c(n) c(n-1) c(n-2) ...  c(0)
 ## @end group
 ## @end example
 ## @end ifinfo
 ## @end deftypefn
+##
 ## @seealso{hankel, vander, sylvester_matrix, hilb, and invhib}
 
 ## Author: jwe
 
 function retval = toeplitz (c, r)
 
   if (nargin == 1)
     r = c;
diff --git a/scripts/special-matrix/vander.m b/scripts/special-matrix/vander.m
--- a/scripts/special-matrix/vander.m
+++ b/scripts/special-matrix/vander.m
@@ -41,16 +41,17 @@
 ##     .     .      .      .    .
 ##     .       .    .      .    .
 ##     .         .  .      .    .
 ## c(n)^(n-1) ... c(n)^2  c(n)  1
 ## @end group
 ## @end example
 ## @end ifinfo
 ## @end deftypefn
+##
 ## @seealso{hankel, sylvester_matrix, hilb, invhilb, and toeplitz}
 
 ## Author: jwe
 
 function retval = vander (c)
 
   if (nargin != 1)
     usage ("vander (c)");
diff --git a/scripts/statistics/base/median.m b/scripts/statistics/base/median.m
--- a/scripts/statistics/base/median.m
+++ b/scripts/statistics/base/median.m
@@ -38,16 +38,17 @@
 ## median(x) =
 ##             (x(N/2) + x((N/2)+1))/2,  N even
 ## @end group
 ## @end example
 ## @end ifinfo
 ## If @var{x} is a matrix, compute the median value for each
 ## column and return them in a row vector.
 ## @end deftypefn
+##
 ## @seealso{std and mean}
 
 ## Author: jwe
 
 function retval = median (a, dim)
 
   if (nargin != 1 && nargin != 2)
     usage ("median (a, dim)");
diff --git a/scripts/statistics/base/std.m b/scripts/statistics/base/std.m
--- a/scripts/statistics/base/std.m
+++ b/scripts/statistics/base/std.m
@@ -51,16 +51,17 @@
 ## @item 1:
 ##   normalizes with N, this provides the square root of the second moment around 
 ##   the mean
 ## @end table
 ##
 ## The third argument @var{dim} determines the dimension along which the standard
 ## deviation is calculated.
 ## @end deftypefn
+##
 ## @seealso{mean and median}
 
 ## Author: jwe
 
 function retval = std (a, opt, dim)
 
   if (nargin < 1 || nargin > 3)
     usage ("std (a, opt, dim)");
diff --git a/scripts/strings/base2dec.m b/scripts/strings/base2dec.m
--- a/scripts/strings/base2dec.m
+++ b/scripts/strings/base2dec.m
@@ -37,16 +37,17 @@
 ## symbol.
 ##
 ## @example
 ## base2dec ("yyyzx", "xyz")
 ##      @result{} 123
 ## @end example
 ##
 ## @end deftypefn
+##
 ## @seealso{dec2base, dec2bin, bin2dec, hex2dec, dec2hex}
 
 ## Author: Daniel Calvelo <dcalvelo@yahoo.com>
 ## Adapted-by: Paul Kienzle <pkienzle@kienzle.powernet.co.uk>
 
 function out = base2dec (d, base)
 
   if (nargin != 2)
diff --git a/scripts/strings/isletter.m b/scripts/strings/isletter.m
--- a/scripts/strings/isletter.m
+++ b/scripts/strings/isletter.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isletter (@var{s})
 ## Returns true if @var{s} is a letter false otherwise.
 ## @end deftypefn
+##
 ## @seealso{isalpha}
 
 ## Author: jwe
 
 function retval = isletter (s)
 
   if (nargin != 1)
     usage ("isletter (s)");
diff --git a/scripts/strings/lower.m b/scripts/strings/lower.m
--- a/scripts/strings/lower.m
+++ b/scripts/strings/lower.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} lower (@var{s})
 ## Transform all letters in the string @var{s} to lower case.
 ## @end deftypefn
+##
 ## @seealso{tolower}
 
 ## Author: jwe
 
 function retval = lower (s)
 
   if (nargin != 1)
     usage ("lower (s)");
diff --git a/scripts/strings/upper.m b/scripts/strings/upper.m
--- a/scripts/strings/upper.m
+++ b/scripts/strings/upper.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} upper (@var{s})
 ## Transform all letters in the string @var{s} to upper case.
 ## @end deftypefn
+##
 ## @seealso{toupper}
 
 ## Author: jwe
 
 function retval = upper (s)
 
   if (nargin != 1)
     usage ("upper (s)");
