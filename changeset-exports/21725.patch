# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1463594458 25200
#      Wed May 18 11:00:58 2016 -0700
# Node ID 78e0b187904b510f1edcbcfe84bbc9879d258be5
# Parent  aba2e6293dd8311b457e52b552318f52f301cae7
Call @class/logical method for objects in conditional expressions (bug #43097)

* ov-class.{cc,h} (octave_class::is_true): New method, dispatch call to
@class/logical if defined.

diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -831,16 +831,34 @@ octave_class::byte_size (void) const
       octave_value val = octave_value (map.contents (p));
 
       retval += val.byte_size ();
     }
 
   return retval;
 }
 
+bool
+octave_class::is_true (void) const
+{
+  bool retval = false;
+
+  octave_value meth = symbol_table::find_method ("logical", class_name ());
+
+  if (meth.is_defined ())
+    {
+      octave_value in = new octave_class (*this);
+
+      octave_value_list tmp = feval (meth.function_value (), in, 1);
+      retval = tmp(0).is_true ();
+    }
+
+  return retval;
+}
+
 string_vector
 octave_class::map_keys (void) const
 {
   err_wrong_type_arg ("octave_class::map_keys()", type_name ());
 }
 
 octave_base_value *
 octave_class::find_parent_class (const std::string& parent_class_name)
diff --git a/libinterp/octave-value/ov-class.h b/libinterp/octave-value/ov-class.h
--- a/libinterp/octave-value/ov-class.h
+++ b/libinterp/octave-value/ov-class.h
@@ -149,16 +149,18 @@ public:
   }
 
   bool is_defined (void) const { return true; }
 
   bool is_map (void) const { return false; }
 
   bool is_object (void) const { return true; }
 
+  bool is_true (void) const;
+
   octave_map map_value (void) const { return map; }
 
   string_vector map_keys (void) const;
 
   std::list<std::string> parent_class_name_list (void) const
   { return parent_list; }
 
   string_vector parent_class_names (void) const
