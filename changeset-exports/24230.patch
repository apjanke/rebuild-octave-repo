# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1491211027 -7200
#      Mon Apr 03 11:17:07 2017 +0200
# Node ID 0350da83c04915075c533d8af8bdc9b606eb3a8d
# Parent  97e628756971e9bd545b1085668ba138975f8524
Use [L,U,P,Q,R] (sparse) and [L,U,P] (full) factorizations in eigs-base.cc.

* eigs-base.cc (LuAminusSigmaB): Use [L,U,P,Q,R] (sparse) and [L,U,P] (full)
factorizations.

diff --git a/liboctave/numeric/eigs-base.cc b/liboctave/numeric/eigs-base.cc
--- a/liboctave/numeric/eigs-base.cc
+++ b/liboctave/numeric/eigs-base.cc
@@ -60,17 +60,18 @@ template <typename M, typename SM>
 static octave_idx_type
 lusolve (const SM& L, const SM& U, M& m)
 {
   octave_idx_type err = 0;
   double rcond;
   MatrixType utyp (MatrixType::Upper);
 
   // Sparse L is lower triangular, Dense L is permuted lower triangular!!!
-  m = L.solve (m, err, rcond, nullptr);
+  MatrixType ltyp (MatrixType::Lower);
+  m = L.solve (ltyp, m, err, rcond, nullptr);
   if (err)
     return err;
 
   m = U.solve (utyp, m, err, rcond, nullptr);
 
   return err;
 }
 
@@ -263,22 +264,23 @@ make_cholb (SparseComplexMatrix& b, Spar
       return true;
     }
 }
 
 static bool
 LuAminusSigmaB (const SparseMatrix& m, const SparseMatrix& b,
                 bool cholB, const ColumnVector& permB, double sigma,
                 SparseMatrix& L, SparseMatrix& U, octave_idx_type *P,
-                octave_idx_type *Q)
+                octave_idx_type *Q, ColumnVector &r)
 {
   bool have_b = ! b.isempty ();
   octave_idx_type n = m.rows ();
 
-  // Caclulate LU decomposition of 'A - sigma * B'
+  // Calculate LU decomposition of 'M = A - sigma * B'
+  // P * (R \ M) * Q = L * U
   SparseMatrix AminusSigmaB (m);
 
   if (have_b)
     {
       if (cholB)
         {
           if (permB.numel ())
             {
@@ -312,20 +314,24 @@ LuAminusSigmaB (const SparseMatrix& m, c
           sigmat.xdata (i) = sigma;
           sigmat.xridx (i) = i;
           sigmat.xcidx (i+1) = i + 1;
         }
 
       AminusSigmaB -= sigmat;
     }
 
-  octave::math::sparse_lu<SparseMatrix> fact (AminusSigmaB);
+  octave::math::sparse_lu<SparseMatrix> fact (AminusSigmaB, Matrix (), true);
 
   L = fact.L ();
   U = fact.U ();
+  SparseMatrix R = fact.R ();
+  for (octave_idx_type i = 0; i < n; i++)
+    r(i) = R.xdata(i);
+
   const octave_idx_type *P2 = fact.row_perm ();
   const octave_idx_type *Q2 = fact.col_perm ();
 
   for (octave_idx_type j = 0; j < n; j++)
     {
       P[j] = P2[j];
       Q[j] = Q2[j];
     }
@@ -354,23 +360,24 @@ LuAminusSigmaB (const SparseMatrix& m, c
     warn_convergence ();
 
   return true;
 }
 
 static bool
 LuAminusSigmaB (const Matrix& m, const Matrix& b,
                 bool cholB, const ColumnVector& permB, double sigma,
-                Matrix& L, Matrix& U, octave_idx_type *P,
-                octave_idx_type *Q)
+                Matrix& L, Matrix& U, octave_idx_type *P, octave_idx_type *Q,
+                ColumnVector &r)
 {
   bool have_b = ! b.isempty ();
   octave_idx_type n = m.cols ();
 
-  // Caclulate LU decomposition of 'A - sigma * B'
+  // Calculate LU decomposition of 'M = A - sigma * B'
+  // P * M = L * U
   Matrix AminusSigmaB (m);
 
   if (have_b)
     {
       if (cholB)
         {
           Matrix tmp = sigma * b.transpose () * b;
           const double *pB = permB.fortran_vec ();
@@ -396,20 +403,26 @@ LuAminusSigmaB (const Matrix& m, const M
       double *p = AminusSigmaB.fortran_vec ();
 
       for (octave_idx_type i = 0; i < n; i++)
         p[i*(n+1)] -= sigma;
     }
 
   octave::math::lu<Matrix> fact (AminusSigmaB);
 
-  L = fact.P ().transpose () * fact.L ();
+  L = fact. L ();
   U = fact.U ();
+  ColumnVector P2 = fact.P_vec();
+
   for (octave_idx_type j = 0; j < n; j++)
-    P[j] = Q[j] = j;
+    {
+      Q[j] = j;
+      P[j] = P2(j) - 1;
+      r(j) = 1.;
+    }
 
   // Test condition number of LU decomposition
   double minU = octave::numeric_limits<double>::NaN ();
   double maxU = octave::numeric_limits<double>::NaN ();
   for (octave_idx_type j = 0; j < n; j++)
     {
       double d = std::abs (U.xelem (j,j));
       if (octave::math::isnan (minU) || d < minU)
@@ -427,22 +440,23 @@ LuAminusSigmaB (const Matrix& m, const M
 
   return true;
 }
 
 static bool
 LuAminusSigmaB (const SparseComplexMatrix& m, const SparseComplexMatrix& b,
                 bool cholB, const ColumnVector& permB, Complex sigma,
                 SparseComplexMatrix& L, SparseComplexMatrix& U,
-                octave_idx_type *P, octave_idx_type *Q)
+                octave_idx_type *P, octave_idx_type *Q, ColumnVector &r)
 {
   bool have_b = ! b.isempty ();
   octave_idx_type n = m.rows ();
 
-  // Caclulate LU decomposition of 'A - sigma * B'
+  // Calculate LU decomposition of 'M = A - sigma * B'
+  // P * (R \ M) * Q = L * U
   SparseComplexMatrix AminusSigmaB (m);
 
   if (have_b)
     {
       if (cholB)
         {
           if (permB.numel ())
             {
@@ -476,20 +490,25 @@ LuAminusSigmaB (const SparseComplexMatri
           sigmat.xdata (i) = sigma;
           sigmat.xridx (i) = i;
           sigmat.xcidx (i+1) = i + 1;
         }
 
       AminusSigmaB -= sigmat;
     }
 
-  octave::math::sparse_lu<SparseComplexMatrix> fact (AminusSigmaB);
+  octave::math::sparse_lu<SparseComplexMatrix> fact (AminusSigmaB, Matrix(),
+                                                     true);
 
   L = fact.L ();
   U = fact.U ();
+  SparseMatrix R = fact.R ();
+  for (octave_idx_type i = 0; i < n; i++)
+    r(i) = R.xdata(i);
+
   const octave_idx_type *P2 = fact.row_perm ();
   const octave_idx_type *Q2 = fact.col_perm ();
 
   for (octave_idx_type j = 0; j < n; j++)
     {
       P[j] = P2[j];
       Q[j] = Q2[j];
     }
@@ -519,22 +538,23 @@ LuAminusSigmaB (const SparseComplexMatri
 
   return true;
 }
 
 static bool
 LuAminusSigmaB (const ComplexMatrix& m, const ComplexMatrix& b,
                 bool cholB, const ColumnVector& permB, Complex sigma,
                 ComplexMatrix& L, ComplexMatrix& U, octave_idx_type *P,
-                octave_idx_type *Q)
+                octave_idx_type *Q, ColumnVector &r)
 {
   bool have_b = ! b.isempty ();
   octave_idx_type n = m.cols ();
 
-  // Caclulate LU decomposition of 'A - sigma * B'
+  // Calculate LU decomposition of 'M = A - sigma * B'
+  // P * M = L * U
   ComplexMatrix AminusSigmaB (m);
 
   if (have_b)
     {
       if (cholB)
         {
           ComplexMatrix tmp = sigma * b.hermitian () * b;
           const double *pB = permB.fortran_vec ();
@@ -560,20 +580,26 @@ LuAminusSigmaB (const ComplexMatrix& m, 
       Complex *p = AminusSigmaB.fortran_vec ();
 
       for (octave_idx_type i = 0; i < n; i++)
         p[i*(n+1)] -= sigma;
     }
 
   octave::math::lu<ComplexMatrix> fact (AminusSigmaB);
 
-  L = fact.P ().transpose () * fact.L ();
+  L = fact.L ();
   U = fact.U ();
+  ColumnVector P2 = fact.P_vec ();
+
   for (octave_idx_type j = 0; j < n; j++)
-    P[j] = Q[j] = j;
+    {
+      Q[j] = j;
+      P[j] = P2(j) - 1;
+      r(j) = 1.;
+    }
 
   // Test condition number of LU decomposition
   double minU = octave::numeric_limits<double>::NaN ();
   double maxU = octave::numeric_limits<double>::NaN ();
   for (octave_idx_type j = 0; j < n; j++)
     {
       double d = std::abs (U.xelem (j,j));
       if (octave::math::isnan (minU) || d < minU)
@@ -974,21 +1000,22 @@ EigsRealSymmetricMatrixShift (const M& m
   // ip(7) to ip(10) return values
 
   Array<F77_INT> iptr (dim_vector (14, 1));
   F77_INT *ipntr = iptr.fortran_vec ();
 
   F77_INT ido = 0;
   int iter = 0;
   M L, U;
+  ColumnVector r(n);
 
   OCTAVE_LOCAL_BUFFER (octave_idx_type, P, (have_b ? b.rows () : m.rows ()));
   OCTAVE_LOCAL_BUFFER (octave_idx_type, Q, (have_b ? b.cols () : m.cols ()));
 
-  if (! LuAminusSigmaB (m, b, cholB, permB, sigma, L, U, P, Q))
+  if (! LuAminusSigmaB (m, b, cholB, permB, sigma, L, U, P, Q, r))
     return -1;
 
   F77_INT lwork = p * (p + 8);
 
   OCTAVE_LOCAL_BUFFER (double, v, n * p);
   OCTAVE_LOCAL_BUFFER (double, workl, lwork);
   OCTAVE_LOCAL_BUFFER (double, workd, 3 * n);
   double *presid = resid.fortran_vec ();
@@ -1038,49 +1065,49 @@ EigsRealSymmetricMatrixShift (const M& m
                 {
                   OCTAVE_LOCAL_BUFFER (double, dtmp, n);
 
                   vector_product (b, workd+iptr(0)-1, dtmp);
 
                   Matrix tmp (n, 1);
 
                   for (F77_INT i = 0; i < n; i++)
-                    tmp(i,0) = dtmp[P[i]];
+                    tmp(i,0) = dtmp[P[i]] / r(P[i]);
 
                   lusolve (L, U, tmp);
 
                   double *ip2 = workd+iptr(1)-1;
                   for (F77_INT i = 0; i < n; i++)
                     ip2[Q[i]] = tmp(i,0);
                 }
               else if (ido == 2)
                 vector_product (b, workd+iptr(0)-1, workd+iptr(1)-1);
               else
                 {
                   double *ip2 = workd+iptr(2)-1;
                   Matrix tmp (n, 1);
 
                   for (F77_INT i = 0; i < n; i++)
-                    tmp(i,0) = ip2[P[i]];
+                    tmp(i,0) = ip2[P[i]] / r(P[i]);
 
                   lusolve (L, U, tmp);
 
                   ip2 = workd+iptr(1)-1;
                   for (F77_INT i = 0; i < n; i++)
                     ip2[Q[i]] = tmp(i,0);
                 }
             }
           else
             {
               // ido cannot be 2 for non-generalized problems (see dsaupd2).
               double *ip2 = workd+iptr(0)-1;
               Matrix tmp (n, 1);
 
               for (F77_INT i = 0; i < n; i++)
-                tmp(i,0) = ip2[P[i]];
+                tmp(i,0) = ip2[P[i]] / r(P[i]);
 
               lusolve (L, U, tmp);
 
               ip2 = workd+iptr(1)-1;
               for (F77_INT i = 0; i < n; i++)
                 ip2[Q[i]] = tmp(i,0);
             }
         }
@@ -1828,21 +1855,22 @@ EigsRealNonSymmetricMatrixShift (const M
   // ip(7) to ip(10) return values
 
   Array<F77_INT> iptr (dim_vector (14, 1));
   F77_INT *ipntr = iptr.fortran_vec ();
 
   F77_INT ido = 0;
   int iter = 0;
   M L, U;
+  ColumnVector r(n);
 
   OCTAVE_LOCAL_BUFFER (octave_idx_type, P, (have_b ? b.rows () : m.rows ()));
   OCTAVE_LOCAL_BUFFER (octave_idx_type, Q, (have_b ? b.cols () : m.cols ()));
 
-  if (! LuAminusSigmaB (m, b, cholB, permB, sigmar, L, U, P, Q))
+  if (! LuAminusSigmaB (m, b, cholB, permB, sigmar, L, U, P, Q, r))
     return -1;
 
   F77_INT lwork = 3 * p * (p + 2);
 
   OCTAVE_LOCAL_BUFFER (double, v, n * (p + 1));
   OCTAVE_LOCAL_BUFFER (double, workl, lwork + 1);
   OCTAVE_LOCAL_BUFFER (double, workd, 3 * n + 1);
   double *presid = resid.fortran_vec ();
@@ -1895,49 +1923,49 @@ EigsRealNonSymmetricMatrixShift (const M
                 {
                   OCTAVE_LOCAL_BUFFER (double, dtmp, n);
 
                   vector_product (b, workd+iptr(0)-1, dtmp);
 
                   Matrix tmp (n, 1);
 
                   for (F77_INT i = 0; i < n; i++)
-                    tmp(i,0) = dtmp[P[i]];
+                    tmp(i,0) = dtmp[P[i]] / r(P[i]);
 
                   lusolve (L, U, tmp);
 
                   double *ip2 = workd+iptr(1)-1;
                   for (F77_INT i = 0; i < n; i++)
                     ip2[Q[i]] = tmp(i,0);
                 }
               else if (ido == 2)
                 vector_product (b, workd+iptr(0)-1, workd+iptr(1)-1);
               else
                 {
                   double *ip2 = workd+iptr(2)-1;
                   Matrix tmp (n, 1);
 
                   for (F77_INT i = 0; i < n; i++)
-                    tmp(i,0) = ip2[P[i]];
+                    tmp(i,0) = ip2[P[i]] / r(P[i]);
 
                   lusolve (L, U, tmp);
 
                   ip2 = workd+iptr(1)-1;
                   for (F77_INT i = 0; i < n; i++)
                     ip2[Q[i]] = tmp(i,0);
                 }
             }
           else
             {
               // ido cannot be 2 for non-generalized problems (see dnaupd2).
               double *ip2 = workd+iptr(0)-1;
               Matrix tmp (n, 1);
 
               for (F77_INT i = 0; i < n; i++)
-                tmp(i,0) = ip2[P[i]];
+                tmp(i,0) = ip2[P[i]] / r(P[i]);
 
               lusolve (L, U, tmp);
 
               ip2 = workd+iptr(1)-1;
               for (F77_INT i = 0; i < n; i++)
                 ip2[Q[i]] = tmp(i,0);
             }
         }
@@ -2734,21 +2762,22 @@ EigsComplexNonSymmetricMatrixShift (cons
   // ip(7) to ip(10) return values
 
   Array<F77_INT> iptr (dim_vector (14, 1));
   F77_INT *ipntr = iptr.fortran_vec ();
 
   F77_INT ido = 0;
   int iter = 0;
   M L, U;
+  ColumnVector r(n);
 
   OCTAVE_LOCAL_BUFFER (octave_idx_type, P, (have_b ? b.rows () : m.rows ()));
   OCTAVE_LOCAL_BUFFER (octave_idx_type, Q, (have_b ? b.cols () : m.cols ()));
 
-  if (! LuAminusSigmaB (m, b, cholB, permB, sigma, L, U, P, Q))
+  if (! LuAminusSigmaB (m, b, cholB, permB, sigma, L, U, P, Q, r))
     return -1;
 
   F77_INT lwork = p * (3 * p + 5);
 
   OCTAVE_LOCAL_BUFFER (Complex, v, n * p);
   OCTAVE_LOCAL_BUFFER (Complex, workl, lwork);
   OCTAVE_LOCAL_BUFFER (Complex, workd, 3 * n);
   OCTAVE_LOCAL_BUFFER (double, rwork, p);
@@ -2800,49 +2829,49 @@ EigsComplexNonSymmetricMatrixShift (cons
                 {
                   OCTAVE_LOCAL_BUFFER (Complex, ctmp, n);
 
                   vector_product (b, workd+iptr(0)-1, ctmp);
 
                   ComplexMatrix tmp (n, 1);
 
                   for (F77_INT i = 0; i < n; i++)
-                    tmp(i,0) = ctmp[P[i]];
+                    tmp(i,0) = ctmp[P[i]] / r(P[i]);
 
                   lusolve (L, U, tmp);
 
                   Complex *ip2 = workd+iptr(1)-1;
                   for (F77_INT i = 0; i < n; i++)
                     ip2[Q[i]] = tmp(i,0);
                 }
               else if (ido == 2)
                 vector_product (b, workd + iptr(0) - 1, workd + iptr(1) - 1);
               else
                 {
                   Complex *ip2 = workd+iptr(2)-1;
                   ComplexMatrix tmp (n, 1);
 
                   for (F77_INT i = 0; i < n; i++)
-                    tmp(i,0) = ip2[P[i]];
+                    tmp(i,0) = ip2[P[i]] / r(P[i]);
 
                   lusolve (L, U, tmp);
 
                   ip2 = workd+iptr(1)-1;
                   for (F77_INT i = 0; i < n; i++)
                     ip2[Q[i]] = tmp(i,0);
                 }
             }
           else
             {
               // ido cannot be 2 for non-generalized problems (see znaup2).
               Complex *ip2 = workd+iptr(0)-1;
               ComplexMatrix tmp (n, 1);
 
               for (F77_INT i = 0; i < n; i++)
-                tmp(i,0) = ip2[P[i]];
+                tmp(i,0) = ip2[P[i]] / r(P[i]);
 
               lusolve (L, U, tmp);
 
               ip2 = workd+iptr(1)-1;
               for (F77_INT i = 0; i < n; i++)
                 ip2[Q[i]] = tmp(i,0);
             }
         }
