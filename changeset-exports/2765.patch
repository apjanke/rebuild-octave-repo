# HG changeset patch
# User jwe
# Date 857184783 0
#      Sat Mar 01 02:53:03 1997 +0000
# Node ID c44d1e4cd35bb8fbd49e3e6a65a2db8ec64a4d84
# Parent  2c0f259cf83d690f85c21bcd456398bcd8791976
[project @ 1997-03-01 02:53:03 by jwe]

diff --git a/doc/interpreter/grammar.texi b/doc/interpreter/grammar.texi
--- a/doc/interpreter/grammar.texi
+++ b/doc/interpreter/grammar.texi
@@ -20,26 +20,28 @@ Octave's language.
 
 The following identifiers are keywords, and may not be used as variable
 or function names:
 
 @example
 @group
 all_va_args             endwhile
 break                   for
-catch                   function
-continue                global
-else                    gplot
-elseif                  gsplot
-end                     if
+case                    function
+catch                   global
+continue                gplot
+else                    gsplot
+elseif                  if
+end                     otherwise
 end_try_catch           return
-end_unwind_protect      try
-endfor                  unwind_protect
-endfunction             unwind_protect_cleanup
-endif                   while
+end_unwind_protect      switch
+endfor                  try
+endfunction             unwind_protect
+endif                   unwind_protect_cleanup
+endswitch               while
 @end group
 @end example
 
 The following command-like functions are also speical.  They may be used
 as simple variable names, but not as formal parameters for functions, or
 as the names of structure variables.  Failed assignments leave them
 undefined (you can recover the orginal definition as a function using
 clear).
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -255,16 +255,17 @@ Calling Functions
 Boolean Expressions
 
 * Element-by-element Boolean Operators::  
 * Short-circuit Boolean Operators::  
 
 Statements
 
 * The if Statement::            
+* The switch Statement::            
 * The while Statement::         
 * The for Statement::           
 * The break Statement::         
 * The continue Statement::      
 * The unwind_protect Statement::  
 * The try Statement::           
 * Continuation Lines::          
 
diff --git a/doc/interpreter/stmt.texi b/doc/interpreter/stmt.texi
--- a/doc/interpreter/stmt.texi
+++ b/doc/interpreter/stmt.texi
@@ -28,26 +28,27 @@ them, Octave is able to provide better d
 missing end tokens.
 
 The list of statements contained between keywords like @code{if} or
 @code{while} and the corresponding end statement is called the
 @dfn{body} of a control statement.
 
 @menu
 * The if Statement::            
+* The switch Statement::        
 * The while Statement::         
 * The for Statement::           
 * The break Statement::         
 * The continue Statement::      
 * The unwind_protect Statement::  
 * The try Statement::           
 * Continuation Lines::          
 @end menu
 
-@node The if Statement, The while Statement, Statements, Statements
+@node The if Statement, The switch Statement, Statements, Statements
 @section The @code{if} Statement
 @cindex @code{if} statement
 @cindex @code{else} statement
 @cindex @code{elseif} statement
 @cindex @code{endif} statement
 
 The @code{if} statement is Octave's decision-making statement.  There
 are three basic forms of an @code{if} statement.  In its simplest form,
@@ -248,17 +249,114 @@ while ((c = getc()))
 @noindent
 will prevent the warning from being printed for this statement, while
 allowing Octave to warn about other assignments used in conditional
 contexts.
 
 The default value of @code{warn_assign_as_truth_value} is 1.
 @end defvr
 
-@node The while Statement, The for Statement, The if Statement, Statements
+@node The switch Statement, The while Statement, The if Statement, Statements
+@section The @code{switch} Statement
+@cindex @code{switch} statement
+@cindex @code{case} statement
+@cindex @code{otherwise} statement
+@cindex @code{endswitch} statement
+
+The @code{switch} statement was introduced in Octave 2.0.5.  It should
+be considered experimental, and details of the implementation may change
+slightly in future versions of Octave.  If you have comments or would
+like to share your experiences in trying to use this new command in real
+programs, please send them to
+@email{octave-maintainers@@bevo.che.wisc.edu}.  (But if you think you've
+found a bug, please report it to @email{bug-octave@@bevo.che.wisc.edu}.
+
+The general form of the @code{switch} statement is
+
+@example
+@group
+switch @var{expression}
+  case @var{label}
+    @var{command_list}
+  case @var{label}
+    @var{command_list}
+  @dots{}
+
+  otherwise
+    @var{command_list}
+endswitch
+@end group
+@end example
+
+@itemize @bullet
+@item
+The identifiers @code{switch}, @code{case}, @code{otherwise}, and
+@code{endswitch} are now keywords. 
+
+@item
+The @var{label} may be any expression.
+
+@item
+Duplicate @var{label} values are not detected.  The @var{command_list}
+corresponding to the first match will be executed.
+
+@item
+You must have at least one @code{case @var{label} @var{command_list}}
+clause.
+
+@item
+The @code{otherwise @var{command_list}} clause is optional.
+
+@item
+As with all other specific @code{end} keywords, @code{endswitch} may be
+replaced by @code{end}, but you can get better diagnostics if you use
+the specific forms.
+
+@item
+Cases are exclusive, so they don't `fall through' as do the cases
+in the switch statement of the C language.
+
+@item
+The @var{command_list} elements are not optional.  Making the list
+optional would have meant requiring a separator between the label and
+the command list.  Otherwise, things like
+
+@example
+@group
+switch (foo)
+  case (1) -2
+  @dots{}
+@end group
+@end example
+
+@noindent
+would produce surprising results, as would
+
+@example
+@group
+switch (foo)
+  case (1)
+  case (2)
+    doit ();
+  @dots{}
+@end group
+@end example
+
+@noindent
+particularly for C programmers.
+
+@item
+The implementation is simple-minded and currently offers no real
+performance improvement over an equivalent @code{if} block, even if all
+the labels are integer constants.  Perhaps a future variation on this
+could detect all constant integer labels and improve performance by
+using a jump table.
+@end itemize
+
+@node The while Statement, The for Statement, The switch Statement, Statements
 @section The @code{while} Statement
 @cindex @code{while} statement
 @cindex @code{endwhile} statement
 @cindex loop
 @cindex body of a loop
 
 In programming, a @dfn{loop} means a part of a program that is (or at least can
 be) executed two or more times in succession.
