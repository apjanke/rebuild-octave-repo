# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1251661699 -7200
#      Sun Aug 30 21:48:19 2009 +0200
# Node ID 319e2ab9b8aec61b60424b98dc2746492f66a902
# Parent  5ab448e3febe368b8b75d632e50597250ebeafc7
warn about the complex comparison ops

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,36 @@
+2009-08-30  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ops.h (DEFCMPLXCMPOP_OP, DEFNDCMPLXCMPOP_FN): New macros.
+	* gripes.cc (gripe_warn_complex_cmp): New function.
+	* gripes.h: declare it.
+
+	* OPERATORS/op-cm-cm.cc: Call the new macros.
+	* OPERATORS/op-cm-cs.cc: Ditto.
+	* OPERATORS/op-cm-m.cc: Ditto.
+	* OPERATORS/op-cm-s.cc: Ditto.
+	* OPERATORS/op-cs-cm.cc: Ditto.
+	* OPERATORS/op-cs-cs.cc: Ditto.
+	* OPERATORS/op-cs-m.cc: Ditto.
+	* OPERATORS/op-fcm-fcm.cc: Ditto.
+	* OPERATORS/op-fcm-fcs.cc: Ditto.
+	* OPERATORS/op-fcm-fm.cc: Ditto.
+	* OPERATORS/op-fcm-fs.cc: Ditto.
+	* OPERATORS/op-fcs-fcm.cc: Ditto.
+	* OPERATORS/op-fcs-fcs.cc: Ditto.
+	* OPERATORS/op-fcs-fm.cc: Ditto.
+	* OPERATORS/op-fm-fcm.cc: Ditto.
+	* OPERATORS/op-fm-fcs.cc: Ditto.
+	* OPERATORS/op-fs-fcm.cc: Ditto.
+	* OPERATORS/op-m-cm.cc: Ditto.
+	* OPERATORS/op-m-cs.cc: Ditto.
+	* OPERATORS/op-s-cm.cc: Ditto.
+
+
 2009-08-30  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ops.h (BOOL_OP1, BOOL_OP2, BOOL_OP3, SC_MX_BOOL_OP, MX_SC_BOOL_OP,
 	MX_MX_BOOL_OP): Remove.
 
 2009-08-28  John W. Eaton  <jwe@octave.org>
 
 	* genprops.awk: Generate static member functions has_core_property
diff --git a/src/OPERATORS/op-cm-cm.cc b/src/OPERATORS/op-cm-cm.cc
--- a/src/OPERATORS/op-cm-cm.cc
+++ b/src/OPERATORS/op-cm-cm.cc
@@ -131,22 +131,22 @@ DEFBINOP (herm_mul, complex_matrix, comp
 
 DEFBINOP (mul_herm, complex_matrix, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_complex_matrix&);
   return octave_value(xgemm (false, false, v1.complex_matrix_value (), 
                              true, true, v2.complex_matrix_value ()));
 }
 
-DEFNDBINOP_FN (lt, complex_matrix, complex_matrix, complex_array, complex_array, mx_el_lt)
-DEFNDBINOP_FN (le, complex_matrix, complex_matrix, complex_array, complex_array, mx_el_le)
-DEFNDBINOP_FN (eq, complex_matrix, complex_matrix, complex_array, complex_array, mx_el_eq)
-DEFNDBINOP_FN (ge, complex_matrix, complex_matrix, complex_array, complex_array, mx_el_ge)
-DEFNDBINOP_FN (gt, complex_matrix, complex_matrix, complex_array, complex_array, mx_el_gt)
-DEFNDBINOP_FN (ne, complex_matrix, complex_matrix, complex_array, complex_array, mx_el_ne)
+DEFNDCMPLXCMPOP_FN (lt, complex_matrix, complex_matrix, complex_array, complex_array, mx_el_lt)
+DEFNDCMPLXCMPOP_FN (le, complex_matrix, complex_matrix, complex_array, complex_array, mx_el_le)
+DEFNDCMPLXCMPOP_FN (eq, complex_matrix, complex_matrix, complex_array, complex_array, mx_el_eq)
+DEFNDCMPLXCMPOP_FN (ge, complex_matrix, complex_matrix, complex_array, complex_array, mx_el_ge)
+DEFNDCMPLXCMPOP_FN (gt, complex_matrix, complex_matrix, complex_array, complex_array, mx_el_gt)
+DEFNDCMPLXCMPOP_FN (ne, complex_matrix, complex_matrix, complex_array, complex_array, mx_el_ne)
 
 DEFNDBINOP_FN (el_mul, complex_matrix, complex_matrix, complex_array, complex_array, product)
 DEFNDBINOP_FN (el_div, complex_matrix, complex_matrix, complex_array, complex_array, quotient)
 DEFNDBINOP_FN (el_pow, complex_matrix, complex_matrix, complex_array, complex_array, elem_xpow)
 
 DEFBINOP (el_ldiv, complex_matrix, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_complex_matrix&);
diff --git a/src/OPERATORS/op-cm-cs.cc b/src/OPERATORS/op-cm-cs.cc
--- a/src/OPERATORS/op-cm-cs.cc
+++ b/src/OPERATORS/op-cm-cs.cc
@@ -64,22 +64,22 @@ DEFBINOP (ldiv, complex_matrix, complex)
   ComplexMatrix m2 = v2.complex_matrix_value ();
   MatrixType typ = v1.matrix_type ();
 
   ComplexMatrix ret = xleftdiv (m1, m2, typ);
   v1.matrix_type (typ);
   return ret;
 }
 
-DEFNDBINOP_FN (lt, complex_matrix, complex, complex_array, complex, mx_el_lt)
-DEFNDBINOP_FN (le, complex_matrix, complex, complex_array, complex, mx_el_le)
-DEFNDBINOP_FN (eq, complex_matrix, complex, complex_array, complex, mx_el_eq)
-DEFNDBINOP_FN (ge, complex_matrix, complex, complex_array, complex, mx_el_ge)
-DEFNDBINOP_FN (gt, complex_matrix, complex, complex_array, complex, mx_el_gt)
-DEFNDBINOP_FN (ne, complex_matrix, complex, complex_array, complex, mx_el_ne)
+DEFNDCMPLXCMPOP_FN (lt, complex_matrix, complex, complex_array, complex, mx_el_lt)
+DEFNDCMPLXCMPOP_FN (le, complex_matrix, complex, complex_array, complex, mx_el_le)
+DEFNDCMPLXCMPOP_FN (eq, complex_matrix, complex, complex_array, complex, mx_el_eq)
+DEFNDCMPLXCMPOP_FN (ge, complex_matrix, complex, complex_array, complex, mx_el_ge)
+DEFNDCMPLXCMPOP_FN (gt, complex_matrix, complex, complex_array, complex, mx_el_gt)
+DEFNDCMPLXCMPOP_FN (ne, complex_matrix, complex, complex_array, complex, mx_el_ne)
 
 DEFNDBINOP_OP (el_mul, complex_matrix, complex, complex_array, complex, *)
 
 DEFBINOP (el_div, complex_matrix, complex)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_complex&);
 
   Complex d = v2.complex_value ();
diff --git a/src/OPERATORS/op-cm-m.cc b/src/OPERATORS/op-cm-m.cc
--- a/src/OPERATORS/op-cm-m.cc
+++ b/src/OPERATORS/op-cm-m.cc
@@ -73,22 +73,22 @@ DEFBINOP (ldiv, complex_matrix, matrix)
   
   ComplexMatrix ret = xleftdiv (v1.complex_matrix_value (), 
 				v2.matrix_value (), typ);
 
   v1.matrix_type (typ);
   return ret;
 }
 
-DEFNDBINOP_FN (lt, complex_matrix, matrix, complex_array, array, mx_el_lt)
-DEFNDBINOP_FN (le, complex_matrix, matrix, complex_array, array, mx_el_le)
-DEFNDBINOP_FN (eq, complex_matrix, matrix, complex_array, array, mx_el_eq)
-DEFNDBINOP_FN (ge, complex_matrix, matrix, complex_array, array, mx_el_ge)
-DEFNDBINOP_FN (gt, complex_matrix, matrix, complex_array, array, mx_el_gt)
-DEFNDBINOP_FN (ne, complex_matrix, matrix, complex_array, array, mx_el_ne)
+DEFNDCMPLXCMPOP_FN (lt, complex_matrix, matrix, complex_array, array, mx_el_lt)
+DEFNDCMPLXCMPOP_FN (le, complex_matrix, matrix, complex_array, array, mx_el_le)
+DEFNDCMPLXCMPOP_FN (eq, complex_matrix, matrix, complex_array, array, mx_el_eq)
+DEFNDCMPLXCMPOP_FN (ge, complex_matrix, matrix, complex_array, array, mx_el_ge)
+DEFNDCMPLXCMPOP_FN (gt, complex_matrix, matrix, complex_array, array, mx_el_gt)
+DEFNDCMPLXCMPOP_FN (ne, complex_matrix, matrix, complex_array, array, mx_el_ne)
 
 DEFNDBINOP_FN (el_mul, complex_matrix, matrix, complex_array, array, product)
 DEFNDBINOP_FN (el_div, complex_matrix, matrix, complex_array, array, quotient)
 DEFNDBINOP_FN (el_pow, complex_matrix, matrix, complex_array, array, elem_xpow)
 
 DEFBINOP (el_ldiv, complex_matrix, matrix)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_matrix&);
diff --git a/src/OPERATORS/op-cm-s.cc b/src/OPERATORS/op-cm-s.cc
--- a/src/OPERATORS/op-cm-s.cc
+++ b/src/OPERATORS/op-cm-s.cc
@@ -68,22 +68,22 @@ DEFBINOP (ldiv, complex_matrix, scalar)
   MatrixType typ = v1.matrix_type ();
 
   ComplexMatrix ret = xleftdiv (m1, m2, typ);
 
   v1.matrix_type (typ);
   return ret;
 }
 
-DEFNDBINOP_FN (lt, complex_matrix, scalar, complex_array, scalar, mx_el_lt)
-DEFNDBINOP_FN (le, complex_matrix, scalar, complex_array, scalar, mx_el_le)
-DEFNDBINOP_FN (eq, complex_matrix, scalar, complex_array, scalar, mx_el_eq)
-DEFNDBINOP_FN (ge, complex_matrix, scalar, complex_array, scalar, mx_el_ge)
-DEFNDBINOP_FN (gt, complex_matrix, scalar, complex_array, scalar, mx_el_gt)
-DEFNDBINOP_FN (ne, complex_matrix, scalar, complex_array, scalar, mx_el_ne)
+DEFNDCMPLXCMPOP_FN (lt, complex_matrix, scalar, complex_array, scalar, mx_el_lt)
+DEFNDCMPLXCMPOP_FN (le, complex_matrix, scalar, complex_array, scalar, mx_el_le)
+DEFNDCMPLXCMPOP_FN (eq, complex_matrix, scalar, complex_array, scalar, mx_el_eq)
+DEFNDCMPLXCMPOP_FN (ge, complex_matrix, scalar, complex_array, scalar, mx_el_ge)
+DEFNDCMPLXCMPOP_FN (gt, complex_matrix, scalar, complex_array, scalar, mx_el_gt)
+DEFNDCMPLXCMPOP_FN (ne, complex_matrix, scalar, complex_array, scalar, mx_el_ne)
 
 DEFNDBINOP_OP (el_mul, complex_matrix, scalar, complex_array, scalar, *)
 
 DEFBINOP (el_div, complex_matrix, scalar)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_scalar&);
 
   double d = v2.double_value ();
diff --git a/src/OPERATORS/op-cs-cm.cc b/src/OPERATORS/op-cs-cm.cc
--- a/src/OPERATORS/op-cs-cm.cc
+++ b/src/OPERATORS/op-cs-cm.cc
@@ -64,22 +64,22 @@ DEFBINOP (ldiv, complex, complex_matrix)
   Complex d = v1.complex_value ();
 
   if (d == 0.0)
     gripe_divide_by_zero ();
 
   return octave_value (v2.complex_array_value () / d);
 }
 
-DEFNDBINOP_FN (lt, complex, complex_matrix, complex, complex_array, mx_el_lt)
-DEFNDBINOP_FN (le, complex, complex_matrix, complex, complex_array, mx_el_le)
-DEFNDBINOP_FN (eq, complex, complex_matrix, complex, complex_array, mx_el_eq)
-DEFNDBINOP_FN (ge, complex, complex_matrix, complex, complex_array, mx_el_ge)
-DEFNDBINOP_FN (gt, complex, complex_matrix, complex, complex_array, mx_el_gt)
-DEFNDBINOP_FN (ne, complex, complex_matrix, complex, complex_array, mx_el_ne)
+DEFNDCMPLXCMPOP_FN (lt, complex, complex_matrix, complex, complex_array, mx_el_lt)
+DEFNDCMPLXCMPOP_FN (le, complex, complex_matrix, complex, complex_array, mx_el_le)
+DEFNDCMPLXCMPOP_FN (eq, complex, complex_matrix, complex, complex_array, mx_el_eq)
+DEFNDCMPLXCMPOP_FN (ge, complex, complex_matrix, complex, complex_array, mx_el_ge)
+DEFNDCMPLXCMPOP_FN (gt, complex, complex_matrix, complex, complex_array, mx_el_gt)
+DEFNDCMPLXCMPOP_FN (ne, complex, complex_matrix, complex, complex_array, mx_el_ne)
 
 DEFNDBINOP_OP (el_mul, complex, complex_matrix, complex, complex_array, *)
 DEFNDBINOP_FN (el_div, complex, complex_matrix, complex, complex_array, x_el_div)
 DEFNDBINOP_FN (el_pow, complex, complex_matrix, complex, complex_array, elem_xpow)
 
 DEFBINOP (el_ldiv, complex, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_complex&, const octave_complex_matrix&);
diff --git a/src/OPERATORS/op-cs-cs.cc b/src/OPERATORS/op-cs-cs.cc
--- a/src/OPERATORS/op-cs-cs.cc
+++ b/src/OPERATORS/op-cs-cs.cc
@@ -91,22 +91,22 @@ DEFBINOP (ldiv, complex, complex)
   Complex d = v1.complex_value ();
 
   if (d == 0.0)
     gripe_divide_by_zero ();
 
   return octave_value (v2.complex_value () / d);
 }
 
-DEFBINOP_OP (lt, complex, complex, <)
-DEFBINOP_OP (le, complex, complex, <=)
-DEFBINOP_OP (eq, complex, complex, ==)
-DEFBINOP_OP (ge, complex, complex, >=)
-DEFBINOP_OP (gt, complex, complex, >)
-DEFBINOP_OP (ne, complex, complex, !=)
+DEFCMPLXCMPOP_OP (lt, complex, complex, <)
+DEFCMPLXCMPOP_OP (le, complex, complex, <=)
+DEFCMPLXCMPOP_OP (eq, complex, complex, ==)
+DEFCMPLXCMPOP_OP (ge, complex, complex, >=)
+DEFCMPLXCMPOP_OP (gt, complex, complex, >)
+DEFCMPLXCMPOP_OP (ne, complex, complex, !=)
 
 DEFBINOP_OP (el_mul, complex, complex, *)
 
 DEFBINOP (el_div, complex, complex)
 {
   CAST_BINOP_ARGS (const octave_complex&, const octave_complex&);
 
   Complex d = v2.complex_value ();
diff --git a/src/OPERATORS/op-cs-m.cc b/src/OPERATORS/op-cs-m.cc
--- a/src/OPERATORS/op-cs-m.cc
+++ b/src/OPERATORS/op-cs-m.cc
@@ -70,22 +70,22 @@ DEFBINOP (ldiv, complex, matrix)
   Complex d = v1.complex_value ();
 
   if (d == 0.0)
     gripe_divide_by_zero ();
 
   return octave_value (v2.array_value () / d);
 }
 
-DEFNDBINOP_FN (lt, complex, matrix, complex, array, mx_el_lt)
-DEFNDBINOP_FN (le, complex, matrix, complex, array, mx_el_le)
-DEFNDBINOP_FN (eq, complex, matrix, complex, array, mx_el_eq)
-DEFNDBINOP_FN (ge, complex, matrix, complex, array, mx_el_ge)
-DEFNDBINOP_FN (gt, complex, matrix, complex, array, mx_el_gt)
-DEFNDBINOP_FN (ne, complex, matrix, complex, array, mx_el_ne)
+DEFNDCMPLXCMPOP_FN (lt, complex, matrix, complex, array, mx_el_lt)
+DEFNDCMPLXCMPOP_FN (le, complex, matrix, complex, array, mx_el_le)
+DEFNDCMPLXCMPOP_FN (eq, complex, matrix, complex, array, mx_el_eq)
+DEFNDCMPLXCMPOP_FN (ge, complex, matrix, complex, array, mx_el_ge)
+DEFNDCMPLXCMPOP_FN (gt, complex, matrix, complex, array, mx_el_gt)
+DEFNDCMPLXCMPOP_FN (ne, complex, matrix, complex, array, mx_el_ne)
 
 DEFNDBINOP_OP (el_mul, complex, matrix, complex, array, *)
 DEFNDBINOP_FN (el_div, complex, matrix, complex, array, x_el_div)
 DEFNDBINOP_FN (el_pow, complex, matrix, complex, array, elem_xpow)
 
 DEFBINOP (el_ldiv, complex, matrix)
 {
   CAST_BINOP_ARGS (const octave_complex&, const octave_matrix&);
diff --git a/src/OPERATORS/op-fcm-fcm.cc b/src/OPERATORS/op-fcm-fcm.cc
--- a/src/OPERATORS/op-fcm-fcm.cc
+++ b/src/OPERATORS/op-fcm-fcm.cc
@@ -135,27 +135,27 @@ DEFBINOP (herm_mul, float_complex_matrix
 
 DEFBINOP (mul_herm, float_complex_matrix, float_complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_float_complex_matrix&, const octave_float_complex_matrix&);
   return octave_value(xgemm (false, false, v1.float_complex_matrix_value (), 
                              true, true, v2.float_complex_matrix_value ()));
 }
 
-DEFNDBINOP_FN (lt, float_complex_matrix, float_complex_matrix, 
+DEFNDCMPLXCMPOP_FN (lt, float_complex_matrix, float_complex_matrix, 
 	       float_complex_array, float_complex_array, mx_el_lt)
-DEFNDBINOP_FN (le, float_complex_matrix, float_complex_matrix, 
+DEFNDCMPLXCMPOP_FN (le, float_complex_matrix, float_complex_matrix, 
 	       float_complex_array, float_complex_array, mx_el_le)
-DEFNDBINOP_FN (eq, float_complex_matrix, float_complex_matrix, 
+DEFNDCMPLXCMPOP_FN (eq, float_complex_matrix, float_complex_matrix, 
 	       float_complex_array, float_complex_array, mx_el_eq)
-DEFNDBINOP_FN (ge, float_complex_matrix, float_complex_matrix, 
+DEFNDCMPLXCMPOP_FN (ge, float_complex_matrix, float_complex_matrix, 
 	       float_complex_array, float_complex_array, mx_el_ge)
-DEFNDBINOP_FN (gt, float_complex_matrix, float_complex_matrix, 
+DEFNDCMPLXCMPOP_FN (gt, float_complex_matrix, float_complex_matrix, 
 	       float_complex_array, float_complex_array, mx_el_gt)
-DEFNDBINOP_FN (ne, float_complex_matrix, float_complex_matrix, 
+DEFNDCMPLXCMPOP_FN (ne, float_complex_matrix, float_complex_matrix, 
 	       float_complex_array, float_complex_array, mx_el_ne)
 
 DEFNDBINOP_FN (el_mul, float_complex_matrix, float_complex_matrix, 
 	       float_complex_array, float_complex_array, product)
 DEFNDBINOP_FN (el_div, float_complex_matrix, float_complex_matrix, 
 	       float_complex_array, float_complex_array, quotient)
 DEFNDBINOP_FN (el_pow, float_complex_matrix, float_complex_matrix, 
 	       float_complex_array, float_complex_array, elem_xpow)
diff --git a/src/OPERATORS/op-fcm-fcs.cc b/src/OPERATORS/op-fcm-fcs.cc
--- a/src/OPERATORS/op-fcm-fcs.cc
+++ b/src/OPERATORS/op-fcm-fcs.cc
@@ -70,27 +70,27 @@ DEFBINOP (ldiv, float_complex_matrix, fl
   FloatComplexMatrix m2 = v2.float_complex_matrix_value ();
   MatrixType typ = v1.matrix_type ();
 
   FloatComplexMatrix ret = xleftdiv (m1, m2, typ);
   v1.matrix_type (typ);
   return ret;
 }
 
-DEFNDBINOP_FN (lt, float_complex_matrix, float_complex, 
+DEFNDCMPLXCMPOP_FN (lt, float_complex_matrix, float_complex, 
 	       float_complex_array, float_complex, mx_el_lt)
-DEFNDBINOP_FN (le, float_complex_matrix, float_complex, 
+DEFNDCMPLXCMPOP_FN (le, float_complex_matrix, float_complex, 
 	       float_complex_array, float_complex, mx_el_le)
-DEFNDBINOP_FN (eq, float_complex_matrix, float_complex, 
+DEFNDCMPLXCMPOP_FN (eq, float_complex_matrix, float_complex, 
 	       float_complex_array, float_complex, mx_el_eq)
-DEFNDBINOP_FN (ge, float_complex_matrix, float_complex, 
+DEFNDCMPLXCMPOP_FN (ge, float_complex_matrix, float_complex, 
 	       float_complex_array, float_complex, mx_el_ge)
-DEFNDBINOP_FN (gt, float_complex_matrix, float_complex, 
+DEFNDCMPLXCMPOP_FN (gt, float_complex_matrix, float_complex, 
 	       float_complex_array, float_complex, mx_el_gt)
-DEFNDBINOP_FN (ne, float_complex_matrix, float_complex, 
+DEFNDCMPLXCMPOP_FN (ne, float_complex_matrix, float_complex, 
 	       float_complex_array, float_complex, mx_el_ne)
 
 DEFNDBINOP_OP (el_mul, float_complex_matrix, float_complex, 
 	       float_complex_array, float_complex, *)
 
 DEFBINOP (el_div, float_complex_matrix, float_complex)
 {
   CAST_BINOP_ARGS (const octave_float_complex_matrix&, 
diff --git a/src/OPERATORS/op-fcm-fm.cc b/src/OPERATORS/op-fcm-fm.cc
--- a/src/OPERATORS/op-fcm-fm.cc
+++ b/src/OPERATORS/op-fcm-fm.cc
@@ -77,27 +77,27 @@ DEFBINOP (ldiv, float_complex_matrix, fl
   
   FloatComplexMatrix ret = xleftdiv (v1.float_complex_matrix_value (), 
 				     v2.float_matrix_value (), typ);
 
   v1.matrix_type (typ);
   return ret;
 }
 
-DEFNDBINOP_FN (lt, float_complex_matrix, float_matrix, 
+DEFNDCMPLXCMPOP_FN (lt, float_complex_matrix, float_matrix, 
 	       float_complex_array, float_array, mx_el_lt)
-DEFNDBINOP_FN (le, float_complex_matrix, float_matrix, 
+DEFNDCMPLXCMPOP_FN (le, float_complex_matrix, float_matrix, 
 	       float_complex_array, float_array, mx_el_le)
-DEFNDBINOP_FN (eq, float_complex_matrix, float_matrix, 
+DEFNDCMPLXCMPOP_FN (eq, float_complex_matrix, float_matrix, 
 	       float_complex_array, float_array, mx_el_eq)
-DEFNDBINOP_FN (ge, float_complex_matrix, float_matrix, 
+DEFNDCMPLXCMPOP_FN (ge, float_complex_matrix, float_matrix, 
 	       float_complex_array, float_array, mx_el_ge)
-DEFNDBINOP_FN (gt, float_complex_matrix, float_matrix, 
+DEFNDCMPLXCMPOP_FN (gt, float_complex_matrix, float_matrix, 
 	       float_complex_array, float_array, mx_el_gt)
-DEFNDBINOP_FN (ne, float_complex_matrix, float_matrix, 
+DEFNDCMPLXCMPOP_FN (ne, float_complex_matrix, float_matrix, 
 	       float_complex_array, float_array, mx_el_ne)
 
 DEFNDBINOP_FN (el_mul, float_complex_matrix, float_matrix, 
 	       float_complex_array, float_array, product)
 DEFNDBINOP_FN (el_div, float_complex_matrix, float_matrix, 
 	       float_complex_array, float_array, quotient)
 DEFNDBINOP_FN (el_pow, float_complex_matrix, float_matrix, 
 	       float_complex_array, float_array, elem_xpow)
diff --git a/src/OPERATORS/op-fcm-fs.cc b/src/OPERATORS/op-fcm-fs.cc
--- a/src/OPERATORS/op-fcm-fs.cc
+++ b/src/OPERATORS/op-fcm-fs.cc
@@ -70,27 +70,27 @@ DEFBINOP (ldiv, float_complex_matrix, fl
   MatrixType typ = v1.matrix_type ();
 
   FloatComplexMatrix ret = xleftdiv (m1, m2, typ);
 
   v1.matrix_type (typ);
   return ret;
 }
 
-DEFNDBINOP_FN (lt, float_complex_matrix, float_scalar, float_complex_array, 
+DEFNDCMPLXCMPOP_FN (lt, float_complex_matrix, float_scalar, float_complex_array, 
 	       float_scalar, mx_el_lt)
-DEFNDBINOP_FN (le, float_complex_matrix, float_scalar, float_complex_array, 
+DEFNDCMPLXCMPOP_FN (le, float_complex_matrix, float_scalar, float_complex_array, 
 	       float_scalar, mx_el_le)
-DEFNDBINOP_FN (eq, float_complex_matrix, float_scalar, float_complex_array, 
+DEFNDCMPLXCMPOP_FN (eq, float_complex_matrix, float_scalar, float_complex_array, 
 	       float_scalar, mx_el_eq)
-DEFNDBINOP_FN (ge, float_complex_matrix, float_scalar, float_complex_array, 
+DEFNDCMPLXCMPOP_FN (ge, float_complex_matrix, float_scalar, float_complex_array, 
 	       float_scalar, mx_el_ge)
-DEFNDBINOP_FN (gt, float_complex_matrix, float_scalar, float_complex_array, 
+DEFNDCMPLXCMPOP_FN (gt, float_complex_matrix, float_scalar, float_complex_array, 
 	       float_scalar, mx_el_gt)
-DEFNDBINOP_FN (ne, float_complex_matrix, float_scalar, float_complex_array, 
+DEFNDCMPLXCMPOP_FN (ne, float_complex_matrix, float_scalar, float_complex_array, 
 	       float_scalar, mx_el_ne)
 
 DEFNDBINOP_OP (el_mul, float_complex_matrix, float_scalar, float_complex_array, 
 	       float_scalar, *)
 
 DEFBINOP (el_div, float_complex_matrix, float)
 {
   CAST_BINOP_ARGS (const octave_float_complex_matrix&, const octave_float_scalar&);
diff --git a/src/OPERATORS/op-fcs-fcm.cc b/src/OPERATORS/op-fcs-fcm.cc
--- a/src/OPERATORS/op-fcs-fcm.cc
+++ b/src/OPERATORS/op-fcs-fcm.cc
@@ -66,27 +66,27 @@ DEFBINOP (ldiv, float_complex, float_com
   FloatComplex d = v1.float_complex_value ();
 
   if (d == static_cast<float>(0.0))
     gripe_divide_by_zero ();
 
   return octave_value (v2.float_complex_array_value () / d);
 }
 
-DEFNDBINOP_FN (lt, float_complex, float_complex_matrix, float_complex, 
+DEFNDCMPLXCMPOP_FN (lt, float_complex, float_complex_matrix, float_complex, 
 	       float_complex_array, mx_el_lt)
-DEFNDBINOP_FN (le, float_complex, float_complex_matrix, float_complex, 
+DEFNDCMPLXCMPOP_FN (le, float_complex, float_complex_matrix, float_complex, 
 	       float_complex_array, mx_el_le)
-DEFNDBINOP_FN (eq, float_complex, float_complex_matrix, float_complex, 
+DEFNDCMPLXCMPOP_FN (eq, float_complex, float_complex_matrix, float_complex, 
 	       float_complex_array, mx_el_eq)
-DEFNDBINOP_FN (ge, float_complex, float_complex_matrix, float_complex, 
+DEFNDCMPLXCMPOP_FN (ge, float_complex, float_complex_matrix, float_complex, 
 	       float_complex_array, mx_el_ge)
-DEFNDBINOP_FN (gt, float_complex, float_complex_matrix, float_complex, 
+DEFNDCMPLXCMPOP_FN (gt, float_complex, float_complex_matrix, float_complex, 
 	       float_complex_array, mx_el_gt)
-DEFNDBINOP_FN (ne, float_complex, float_complex_matrix, float_complex, 
+DEFNDCMPLXCMPOP_FN (ne, float_complex, float_complex_matrix, float_complex, 
 	       float_complex_array, mx_el_ne)
 
 DEFNDBINOP_OP (el_mul, float_complex, float_complex_matrix, float_complex, 
 	       float_complex_array, *)
 DEFNDBINOP_FN (el_div, float_complex, float_complex_matrix, float_complex, 
 	       float_complex_array, x_el_div)
 DEFNDBINOP_FN (el_pow, float_complex, float_complex_matrix, float_complex, 
 	       float_complex_array, elem_xpow)
diff --git a/src/OPERATORS/op-fcs-fcs.cc b/src/OPERATORS/op-fcs-fcs.cc
--- a/src/OPERATORS/op-fcs-fcs.cc
+++ b/src/OPERATORS/op-fcs-fcs.cc
@@ -89,22 +89,22 @@ DEFBINOP (ldiv, float_complex, float_com
   FloatComplex d = v1.float_complex_value ();
 
   if (d == static_cast<float>(0.0))
     gripe_divide_by_zero ();
 
   return octave_value (v2.float_complex_value () / d);
 }
 
-DEFBINOP_OP (lt, float_complex, float_complex, <)
-DEFBINOP_OP (le, float_complex, float_complex, <=)
-DEFBINOP_OP (eq, float_complex, float_complex, ==)
-DEFBINOP_OP (ge, float_complex, float_complex, >=)
-DEFBINOP_OP (gt, float_complex, float_complex, >)
-DEFBINOP_OP (ne, float_complex, float_complex, !=)
+DEFCMPLXCMPOP_OP (lt, float_complex, float_complex, <)
+DEFCMPLXCMPOP_OP (le, float_complex, float_complex, <=)
+DEFCMPLXCMPOP_OP (eq, float_complex, float_complex, ==)
+DEFCMPLXCMPOP_OP (ge, float_complex, float_complex, >=)
+DEFCMPLXCMPOP_OP (gt, float_complex, float_complex, >)
+DEFCMPLXCMPOP_OP (ne, float_complex, float_complex, !=)
 
 DEFBINOP_OP (el_mul, float_complex, float_complex, *)
 
 DEFBINOP (el_div, float_complex, float_complex)
 {
   CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_complex&);
 
   FloatComplex d = v2.float_complex_value ();
diff --git a/src/OPERATORS/op-fcs-fm.cc b/src/OPERATORS/op-fcs-fm.cc
--- a/src/OPERATORS/op-fcs-fm.cc
+++ b/src/OPERATORS/op-fcs-fm.cc
@@ -73,27 +73,27 @@ DEFBINOP (ldiv, float_complex, float_mat
   FloatComplex d = v1.float_complex_value ();
 
   if (d == static_cast<float>(0.0))
     gripe_divide_by_zero ();
 
   return octave_value (v2.float_array_value () / d);
 }
 
-DEFNDBINOP_FN (lt, float_complex, float_matrix, float_complex, 
+DEFNDCMPLXCMPOP_FN (lt, float_complex, float_matrix, float_complex, 
 	       float_array, mx_el_lt)
-DEFNDBINOP_FN (le, float_complex, float_matrix, float_complex, 
+DEFNDCMPLXCMPOP_FN (le, float_complex, float_matrix, float_complex, 
 	       float_array, mx_el_le)
-DEFNDBINOP_FN (eq, float_complex, float_matrix, float_complex, 
+DEFNDCMPLXCMPOP_FN (eq, float_complex, float_matrix, float_complex, 
 	       float_array, mx_el_eq)
-DEFNDBINOP_FN (ge, float_complex, float_matrix, float_complex, 
+DEFNDCMPLXCMPOP_FN (ge, float_complex, float_matrix, float_complex, 
 	       float_array, mx_el_ge)
-DEFNDBINOP_FN (gt, float_complex, float_matrix, float_complex, 
+DEFNDCMPLXCMPOP_FN (gt, float_complex, float_matrix, float_complex, 
 	       float_array, mx_el_gt)
-DEFNDBINOP_FN (ne, float_complex, float_matrix, float_complex, 
+DEFNDCMPLXCMPOP_FN (ne, float_complex, float_matrix, float_complex, 
 	       float_array, mx_el_ne)
 
 DEFNDBINOP_OP (el_mul, float_complex, float_matrix, float_complex, 
 	       float_array, *)
 DEFNDBINOP_FN (el_div, float_complex, float_matrix, float_complex, 
 	       float_array, x_el_div)
 DEFNDBINOP_FN (el_pow, float_complex, float_matrix, float_complex, 
 	       float_array, elem_xpow)
diff --git a/src/OPERATORS/op-fm-fcm.cc b/src/OPERATORS/op-fm-fcm.cc
--- a/src/OPERATORS/op-fm-fcm.cc
+++ b/src/OPERATORS/op-fm-fcm.cc
@@ -78,27 +78,27 @@ DEFBINOP (ldiv, float_matrix, float_comp
   
   FloatComplexMatrix ret = xleftdiv (v1.float_matrix_value (), 
 				v2.float_complex_matrix_value (), typ);
 
   v1.matrix_type (typ);
   return ret;
 }
 
-DEFNDBINOP_FN (lt, float_matrix, float_complex_matrix, float_array, 
+DEFNDCMPLXCMPOP_FN (lt, float_matrix, float_complex_matrix, float_array, 
 	       float_complex_array, mx_el_lt)
-DEFNDBINOP_FN (le, float_matrix, float_complex_matrix, float_array, 
+DEFNDCMPLXCMPOP_FN (le, float_matrix, float_complex_matrix, float_array, 
 	       float_complex_array, mx_el_le)
-DEFNDBINOP_FN (eq, float_matrix, float_complex_matrix, float_array, 
+DEFNDCMPLXCMPOP_FN (eq, float_matrix, float_complex_matrix, float_array, 
 	       float_complex_array, mx_el_eq)
-DEFNDBINOP_FN (ge, float_matrix, float_complex_matrix, float_array, 
+DEFNDCMPLXCMPOP_FN (ge, float_matrix, float_complex_matrix, float_array, 
 	       float_complex_array, mx_el_ge)
-DEFNDBINOP_FN (gt, float_matrix, float_complex_matrix, float_array, 
+DEFNDCMPLXCMPOP_FN (gt, float_matrix, float_complex_matrix, float_array, 
 	       float_complex_array, mx_el_gt)
-DEFNDBINOP_FN (ne, float_matrix, float_complex_matrix, float_array, 
+DEFNDCMPLXCMPOP_FN (ne, float_matrix, float_complex_matrix, float_array, 
 	       float_complex_array, mx_el_ne)
 
 DEFNDBINOP_FN (el_mul, float_matrix, float_complex_matrix, float_array, 
 	       float_complex_array, product)
 DEFNDBINOP_FN (el_div, float_matrix, float_complex_matrix, float_array, 
 	       float_complex_array, quotient)
 DEFNDBINOP_FN (el_pow, float_matrix, float_complex_matrix, float_array, 
 	       float_complex_array, elem_xpow)
diff --git a/src/OPERATORS/op-fm-fcs.cc b/src/OPERATORS/op-fm-fcs.cc
--- a/src/OPERATORS/op-fm-fcs.cc
+++ b/src/OPERATORS/op-fm-fcs.cc
@@ -73,27 +73,27 @@ DEFBINOP (ldiv, float_matrix, float_comp
   MatrixType typ = v1.matrix_type ();
 
   FloatComplexMatrix ret = xleftdiv (m1, m2, typ);
 
   v1.matrix_type (typ);
   return ret;
 }
 
-DEFNDBINOP_FN (lt, float_matrix, float_complex, float_array, 
+DEFNDCMPLXCMPOP_FN (lt, float_matrix, float_complex, float_array, 
 	       float_complex, mx_el_lt)
-DEFNDBINOP_FN (le, float_matrix, float_complex, float_array, 
+DEFNDCMPLXCMPOP_FN (le, float_matrix, float_complex, float_array, 
 	       float_complex, mx_el_le)
-DEFNDBINOP_FN (eq, float_matrix, float_complex, float_array, 
+DEFNDCMPLXCMPOP_FN (eq, float_matrix, float_complex, float_array, 
 	       float_complex, mx_el_eq)
-DEFNDBINOP_FN (ge, float_matrix, float_complex, float_array, 
+DEFNDCMPLXCMPOP_FN (ge, float_matrix, float_complex, float_array, 
 	       float_complex, mx_el_ge)
-DEFNDBINOP_FN (gt, float_matrix, float_complex, float_array, 
+DEFNDCMPLXCMPOP_FN (gt, float_matrix, float_complex, float_array, 
 	       float_complex, mx_el_gt)
-DEFNDBINOP_FN (ne, float_matrix, float_complex, float_array, 
+DEFNDCMPLXCMPOP_FN (ne, float_matrix, float_complex, float_array, 
 	       float_complex, mx_el_ne)
 
 DEFNDBINOP_OP (el_mul, float_matrix, float_complex, float_array, 
 	       float_complex, *)
 
 DEFBINOP (el_div, float_matrix, float_complex)
 {
   CAST_BINOP_ARGS (const octave_float_matrix&, const octave_float_complex&);
diff --git a/src/OPERATORS/op-fs-fcm.cc b/src/OPERATORS/op-fs-fcm.cc
--- a/src/OPERATORS/op-fs-fcm.cc
+++ b/src/OPERATORS/op-fs-fcm.cc
@@ -77,27 +77,27 @@ DEFBINOP (ldiv, float_scalar, float_comp
   float d = v1.float_value ();
 
   if (d == 0.0)
     gripe_divide_by_zero ();
 
   return octave_value (v2.float_complex_array_value () / d);
 }
 
-DEFNDBINOP_FN (lt, float_scalar, float_complex_matrix, float_scalar, 
+DEFNDCMPLXCMPOP_FN (lt, float_scalar, float_complex_matrix, float_scalar, 
 	       float_complex_array, mx_el_lt)
-DEFNDBINOP_FN (le, float_scalar, float_complex_matrix, float_scalar, 
+DEFNDCMPLXCMPOP_FN (le, float_scalar, float_complex_matrix, float_scalar, 
 	       float_complex_array, mx_el_le)
-DEFNDBINOP_FN (eq, float_scalar, float_complex_matrix, float_scalar, 
+DEFNDCMPLXCMPOP_FN (eq, float_scalar, float_complex_matrix, float_scalar, 
 	       float_complex_array, mx_el_eq)
-DEFNDBINOP_FN (ge, float_scalar, float_complex_matrix, float_scalar, 
+DEFNDCMPLXCMPOP_FN (ge, float_scalar, float_complex_matrix, float_scalar, 
 	       float_complex_array, mx_el_ge)
-DEFNDBINOP_FN (gt, float_scalar, float_complex_matrix, float_scalar, 
+DEFNDCMPLXCMPOP_FN (gt, float_scalar, float_complex_matrix, float_scalar, 
 	       float_complex_array, mx_el_gt)
-DEFNDBINOP_FN (ne, float_scalar, float_complex_matrix, float_scalar, 
+DEFNDCMPLXCMPOP_FN (ne, float_scalar, float_complex_matrix, float_scalar, 
 	       float_complex_array, mx_el_ne)
 
 DEFNDBINOP_OP (el_mul, float_scalar, float_complex_matrix, float_scalar, 
 	       float_complex_array, *)
 DEFNDBINOP_FN (el_div, float_scalar, float_complex_matrix, float_scalar, 
 	       float_complex_array, x_el_div)
 DEFNDBINOP_FN (el_pow, float_scalar, float_complex_matrix, float_scalar, 
 	       float_complex_array, elem_xpow)
diff --git a/src/OPERATORS/op-m-cm.cc b/src/OPERATORS/op-m-cm.cc
--- a/src/OPERATORS/op-m-cm.cc
+++ b/src/OPERATORS/op-m-cm.cc
@@ -74,22 +74,22 @@ DEFBINOP (ldiv, matrix, complex_matrix)
   
   ComplexMatrix ret = xleftdiv (v1.matrix_value (), 
 				v2.complex_matrix_value (), typ);
 
   v1.matrix_type (typ);
   return ret;
 }
 
-DEFNDBINOP_FN (lt, matrix, complex_matrix, array, complex_array, mx_el_lt)
-DEFNDBINOP_FN (le, matrix, complex_matrix, array, complex_array, mx_el_le)
-DEFNDBINOP_FN (eq, matrix, complex_matrix, array, complex_array, mx_el_eq)
-DEFNDBINOP_FN (ge, matrix, complex_matrix, array, complex_array, mx_el_ge)
-DEFNDBINOP_FN (gt, matrix, complex_matrix, array, complex_array, mx_el_gt)
-DEFNDBINOP_FN (ne, matrix, complex_matrix, array, complex_array, mx_el_ne)
+DEFNDCMPLXCMPOP_FN (lt, matrix, complex_matrix, array, complex_array, mx_el_lt)
+DEFNDCMPLXCMPOP_FN (le, matrix, complex_matrix, array, complex_array, mx_el_le)
+DEFNDCMPLXCMPOP_FN (eq, matrix, complex_matrix, array, complex_array, mx_el_eq)
+DEFNDCMPLXCMPOP_FN (ge, matrix, complex_matrix, array, complex_array, mx_el_ge)
+DEFNDCMPLXCMPOP_FN (gt, matrix, complex_matrix, array, complex_array, mx_el_gt)
+DEFNDCMPLXCMPOP_FN (ne, matrix, complex_matrix, array, complex_array, mx_el_ne)
 
 DEFNDBINOP_FN (el_mul, matrix, complex_matrix, array, complex_array, product)
 DEFNDBINOP_FN (el_div, matrix, complex_matrix, array, complex_array, quotient)
 DEFNDBINOP_FN (el_pow, matrix, complex_matrix, array, complex_array, elem_xpow)
 
 DEFBINOP (el_ldiv, matrix, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_matrix&, const octave_complex_matrix&);
diff --git a/src/OPERATORS/op-m-cs.cc b/src/OPERATORS/op-m-cs.cc
--- a/src/OPERATORS/op-m-cs.cc
+++ b/src/OPERATORS/op-m-cs.cc
@@ -72,22 +72,22 @@ DEFBINOP (ldiv, matrix, complex)
   MatrixType typ = v1.matrix_type ();
 
   ComplexMatrix ret = xleftdiv (m1, m2, typ);
 
   v1.matrix_type (typ);
   return ret;
 }
 
-DEFNDBINOP_FN (lt, matrix, complex, array, complex, mx_el_lt)
-DEFNDBINOP_FN (le, matrix, complex, array, complex, mx_el_le)
-DEFNDBINOP_FN (eq, matrix, complex, array, complex, mx_el_eq)
-DEFNDBINOP_FN (ge, matrix, complex, array, complex, mx_el_ge)
-DEFNDBINOP_FN (gt, matrix, complex, array, complex, mx_el_gt)
-DEFNDBINOP_FN (ne, matrix, complex, array, complex, mx_el_ne)
+DEFNDCMPLXCMPOP_FN (lt, matrix, complex, array, complex, mx_el_lt)
+DEFNDCMPLXCMPOP_FN (le, matrix, complex, array, complex, mx_el_le)
+DEFNDCMPLXCMPOP_FN (eq, matrix, complex, array, complex, mx_el_eq)
+DEFNDCMPLXCMPOP_FN (ge, matrix, complex, array, complex, mx_el_ge)
+DEFNDCMPLXCMPOP_FN (gt, matrix, complex, array, complex, mx_el_gt)
+DEFNDCMPLXCMPOP_FN (ne, matrix, complex, array, complex, mx_el_ne)
 
 DEFNDBINOP_OP (el_mul, matrix, complex, array, complex, *)
 
 DEFBINOP (el_div, matrix, complex)
 {
   CAST_BINOP_ARGS (const octave_matrix&, const octave_complex&);
 
   Complex d = v2.complex_value ();
diff --git a/src/OPERATORS/op-s-cm.cc b/src/OPERATORS/op-s-cm.cc
--- a/src/OPERATORS/op-s-cm.cc
+++ b/src/OPERATORS/op-s-cm.cc
@@ -72,22 +72,22 @@ DEFBINOP (ldiv, scalar, complex_matrix)
   double d = v1.double_value ();
 
   if (d == 0.0)
     gripe_divide_by_zero ();
 
   return octave_value (v2.complex_array_value () / d);
 }
 
-DEFNDBINOP_FN (lt, scalar, complex_matrix, scalar, complex_array, mx_el_lt)
-DEFNDBINOP_FN (le, scalar, complex_matrix, scalar, complex_array, mx_el_le)
-DEFNDBINOP_FN (eq, scalar, complex_matrix, scalar, complex_array, mx_el_eq)
-DEFNDBINOP_FN (ge, scalar, complex_matrix, scalar, complex_array, mx_el_ge)
-DEFNDBINOP_FN (gt, scalar, complex_matrix, scalar, complex_array, mx_el_gt)
-DEFNDBINOP_FN (ne, scalar, complex_matrix, scalar, complex_array, mx_el_ne)
+DEFNDCMPLXCMPOP_FN (lt, scalar, complex_matrix, scalar, complex_array, mx_el_lt)
+DEFNDCMPLXCMPOP_FN (le, scalar, complex_matrix, scalar, complex_array, mx_el_le)
+DEFNDCMPLXCMPOP_FN (eq, scalar, complex_matrix, scalar, complex_array, mx_el_eq)
+DEFNDCMPLXCMPOP_FN (ge, scalar, complex_matrix, scalar, complex_array, mx_el_ge)
+DEFNDCMPLXCMPOP_FN (gt, scalar, complex_matrix, scalar, complex_array, mx_el_gt)
+DEFNDCMPLXCMPOP_FN (ne, scalar, complex_matrix, scalar, complex_array, mx_el_ne)
 
 DEFNDBINOP_OP (el_mul, scalar, complex_matrix, scalar, complex_array, *)
 DEFNDBINOP_FN (el_div, scalar, complex_matrix, scalar, complex_array, x_el_div)
 DEFNDBINOP_FN (el_pow, scalar, complex_matrix, scalar, complex_array, elem_xpow)
 
 DEFBINOP (el_ldiv, scalar, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_scalar&, const octave_complex_matrix&);
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -1401,16 +1401,17 @@ initialize_default_warning_state (void)
   disable_warning ("Octave:single-quote-string");
   disable_warning ("Octave:str-to-num");
   disable_warning ("Octave:string-concat");
   disable_warning ("Octave:variable-switch-label");
   disable_warning ("Octave:int-convert-nan");
   disable_warning ("Octave:int-convert-non-int-val");
   disable_warning ("Octave:int-convert-overflow");
   disable_warning ("Octave:int-math-overflow");
+  disable_warning ("Octave:complex-cmp-ops");
 }
 
 DEFUN (lasterror, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{err} =} lasterror (@var{err})\n\
 @deftypefnx {Built-in Function} {} lasterror ('reset')\n\
 Returns or sets the last error message.  Called without any arguments\n\
 returns a structure containing the last error message, as well as other\n\
diff --git a/src/gripes.cc b/src/gripes.cc
--- a/src/gripes.cc
+++ b/src/gripes.cc
@@ -266,13 +266,20 @@ gripe_invalid_inquiry_subscript (void)
 }
 
 void
 gripe_indexed_cs_list (void)
 {
   error ("a cs-list cannot be further indexed");
 }
 
+void
+gripe_warn_complex_cmp (void)
+{
+  warning_with_id ("Octave:matlab-incompatible",
+                   "potential Matlab compatibility problem: comparing complex numbers");
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/gripes.h b/src/gripes.h
--- a/src/gripes.h
+++ b/src/gripes.h
@@ -135,15 +135,18 @@ extern OCTINTERP_API void
 gripe_library_execution_error (void);
 
 extern OCTINTERP_API void
 gripe_invalid_inquiry_subscript (void);
 
 extern OCTINTERP_API void
 gripe_indexed_cs_list (void);
 
+extern OCTINTERP_API void
+gripe_warn_complex_cmp (void);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ops.h b/src/ops.h
--- a/src/ops.h
+++ b/src/ops.h
@@ -282,16 +282,25 @@ extern void install_ops (void);
 #define DEFBINOP_OP(name, t1, t2, op) \
   BINOPDECL (name, a1, a2) \
   { \
     CAST_BINOP_ARGS (const CONCAT2(octave_, t1)&, const CONCAT2(octave_, t2)&); \
     return octave_value \
       (v1.CONCAT2(t1, _value) () op v2.CONCAT2(t2, _value) ()); \
   }
 
+#define DEFCMPLXCMPOP_OP(name, t1, t2, op) \
+  BINOPDECL (name, a1, a2) \
+  { \
+    CAST_BINOP_ARGS (const CONCAT2(octave_, t1)&, const CONCAT2(octave_, t2)&); \
+    gripe_warn_complex_cmp (); \
+    return octave_value \
+      (v1.CONCAT2(t1, _value) () op v2.CONCAT2(t2, _value) ()); \
+  }
+
 #define DEFSCALARBOOLOP_OP(name, t1, t2, op) \
   BINOPDECL (name, a1, a2) \
   { \
     CAST_BINOP_ARGS (const CONCAT2(octave_, t1)&, const CONCAT2(octave_, t2)&); \
     if (xisnan (v1.CONCAT2(t1, _value) ()) || xisnan (v2.CONCAT2(t2, _value) ())) \
       { \
         error ("invalid conversion from NaN to logical"); \
         return octave_value (); \
@@ -320,16 +329,23 @@ extern void install_ops (void);
 
 #define DEFNDBINOP_FN(name, t1, t2, e1, e2, f) \
   BINOPDECL (name, a1, a2) \
   { \
     CAST_BINOP_ARGS (const CONCAT2(octave_, t1)&, const CONCAT2(octave_, t2)&); \
     return octave_value (f (v1.CONCAT2(e1, _value) (), v2.CONCAT2(e2, _value) ())); \
   }
 
+#define DEFNDCMPLXCMPOP_FN(name, t1, t2, e1, e2, f) \
+  BINOPDECL (name, a1, a2) \
+  { \
+    CAST_BINOP_ARGS (const CONCAT2(octave_, t1)&, const CONCAT2(octave_, t2)&); \
+    return octave_value (f (v1.CONCAT2(e1, _value) (), v2.CONCAT2(e2, _value) ())); \
+  }
+
 #define BINOP_NONCONFORMANT(msg) \
   gripe_nonconformant (msg, \
 		       a1.rows (), a1.columns (), \
 		       a2.rows (), a2.columns ()); \
   return octave_value ()
 
 #define CATOPDECL(name, a1, a2)	\
   static octave_value \
