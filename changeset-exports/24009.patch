# HG changeset patch
# User Rik <rik@octave.org>
# Date 1504651420 25200
#      Tue Sep 05 15:43:40 2017 -0700
# Node ID eef8c31ffe97c8325b585d2708d2877c369a6e9f
# Parent  6e7bb85e32b800e259daa2b4c7fe612fbd156063
Document that the shell for system() differs between OS (bug #49825).

* toplev.cc (Fsystem): Change example code to run on Windows or UNIX reliably.
Document that the shell for system() differs between OS.

diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -183,25 +183,29 @@ or
 printf ("%s\n", nthargout (2, "system", "cmd"));
 @end example
 
 The @code{system} function can return two values.  The first is the
 exit status of the command and the second is any output from the
 command that was written to the standard output stream.  For example,
 
 @example
-[status, output] = system ("echo foo; exit 2");
+[status, output] = system ("echo foo & exit 2");
 @end example
 
 @noindent
 will set the variable @code{output} to the string @samp{foo}, and the
 variable @code{status} to the integer @samp{2}.
 
 For commands run asynchronously, @var{status} is the process id of the
 command shell that is started to run the command.
+
+The shell used for executing commands varies with operating system and is
+typically @file{/bin/sh} for UNIX systems and @file{cmd.exe} for Windows
+systems.
 @seealso{unix, dos}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin == 0 || nargin > 3)
     print_usage ();
 
