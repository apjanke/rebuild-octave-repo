# HG changeset patch
# User Rik <rik@octave.org>
# Date 1399478983 25200
#      Wed May 07 09:09:43 2014 -0700
# Node ID 3bffa847d215f31020b29c5fb45870b33612b697
# Parent  9fbb254c09e62d3ed359f4a81e9d92579d92917a
maint: Use space after variable name and before equals sign.

* ov-bool-sparse.cc (octave_sparse_bool_matrix::save_binary): Use "itmp = ..."
rather than "itmp= ..."

ov-cx-sparse.cc (octave_sparse_complex_matrix::save_binary): Use "itmp = ..."
rather than "itmp= ..."

ov-re-sparse.cc (octave_sparse_matrix::save_binary): Use "itmp = ..."
rather than "itmp= ..."

diff --git a/libinterp/octave-value/ov-bool-sparse.cc b/libinterp/octave-value/ov-bool-sparse.cc
--- a/libinterp/octave-value/ov-bool-sparse.cc
+++ b/libinterp/octave-value/ov-bool-sparse.cc
@@ -220,26 +220,26 @@ octave_sparse_bool_matrix::save_binary (
   matrix.maybe_compress ();
 
   int nr = d(0);
   int nc = d(1);
   int nz = nnz ();
 
   int32_t itmp;
   // Use negative value for ndims to be consistent with other formats
-  itmp= -2;
+  itmp = -2;
   os.write (reinterpret_cast<char *> (&itmp), 4);
 
-  itmp= nr;
+  itmp = nr;
   os.write (reinterpret_cast<char *> (&itmp), 4);
 
-  itmp= nc;
+  itmp = nc;
   os.write (reinterpret_cast<char *> (&itmp), 4);
 
-  itmp= nz;
+  itmp = nz;
   os.write (reinterpret_cast<char *> (&itmp), 4);
 
   // add one to the printed indices to go from
   // zero-based to one-based arrays
   for (int i = 0; i < nc+1; i++)
     {
       octave_quit ();
       itmp = matrix.cidx (i);
diff --git a/libinterp/octave-value/ov-cx-sparse.cc b/libinterp/octave-value/ov-cx-sparse.cc
--- a/libinterp/octave-value/ov-cx-sparse.cc
+++ b/libinterp/octave-value/ov-cx-sparse.cc
@@ -236,26 +236,26 @@ octave_sparse_complex_matrix::save_binar
   matrix.maybe_compress ();
 
   int nr = d(0);
   int nc = d(1);
   int nz = nnz ();
 
   int32_t itmp;
   // Use negative value for ndims to be consistent with other formats
-  itmp= -2;
+  itmp = -2;
   os.write (reinterpret_cast<char *> (&itmp), 4);
 
-  itmp= nr;
+  itmp = nr;
   os.write (reinterpret_cast<char *> (&itmp), 4);
 
-  itmp= nc;
+  itmp = nc;
   os.write (reinterpret_cast<char *> (&itmp), 4);
 
-  itmp= nz;
+  itmp = nz;
   os.write (reinterpret_cast<char *> (&itmp), 4);
 
   save_type st = LS_DOUBLE;
   if (save_as_floats)
     {
       if (matrix.too_large_for_float ())
         {
           warning ("save: some values too large to save as floats --");
diff --git a/libinterp/octave-value/ov-re-sparse.cc b/libinterp/octave-value/ov-re-sparse.cc
--- a/libinterp/octave-value/ov-re-sparse.cc
+++ b/libinterp/octave-value/ov-re-sparse.cc
@@ -269,26 +269,26 @@ octave_sparse_matrix::save_binary (std::
   matrix.maybe_compress ();
 
   int nr = d(0);
   int nc = d(1);
   int nz = nnz ();
 
   int32_t itmp;
   // Use negative value for ndims to be consistent with other formats
-  itmp= -2;
+  itmp = -2;
   os.write (reinterpret_cast<char *> (&itmp), 4);
 
-  itmp= nr;
+  itmp = nr;
   os.write (reinterpret_cast<char *> (&itmp), 4);
 
-  itmp= nc;
+  itmp = nc;
   os.write (reinterpret_cast<char *> (&itmp), 4);
 
-  itmp= nz;
+  itmp = nz;
   os.write (reinterpret_cast<char *> (&itmp), 4);
 
   save_type st = LS_DOUBLE;
   if (save_as_floats)
     {
       if (matrix.too_large_for_float ())
         {
           warning ("save: some values too large to save as floats --");
