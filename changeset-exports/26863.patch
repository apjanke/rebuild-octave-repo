# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1552013392 0
#      Fri Mar 08 02:49:52 2019 +0000
# Node ID c589db954a4e58b86f84ff878235dcf44a787c16
# Parent  ea4a36fd48b697ccd88f314714f3b0acf7dae16b
new functions for getting a functicon from an octave_value object

These functions will replace extract_function.  We need to have
something similar but that returns an octave_value object that
contains an octave_fcn_handle object, not a bare pointer to an
octave_function object.

* interpreter-private.h, interpreter-private.cc (get_function_handle):
New functions.

diff --git a/libinterp/corefcn/interpreter-private.cc b/libinterp/corefcn/interpreter-private.cc
--- a/libinterp/corefcn/interpreter-private.cc
+++ b/libinterp/corefcn/interpreter-private.cc
@@ -19,31 +19,34 @@ along with Octave; see the file COPYING.
 <https://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <list>
 #include <string>
 
 #include "bp-table.h"
 #include "call-stack.h"
 #include "cdef-manager.h"
 #include "child-list.h"
 #include "error.h"
 #include "gtk-manager.h"
 #include "help.h"
 #include "input.h"
 #include "interpreter-private.h"
 #include "interpreter.h"
 #include "load-path.h"
 #include "load-save.h"
 #include "oct-hist.h"
+#include "ov.h"
+#include "ov-fcn-inline.h"
 #include "pager.h"
 #include "symtab.h"
 
 namespace octave
 {
   interpreter& __get_interpreter__ (const std::string& who)
   {
     interpreter *interp = interpreter::the_interpreter ();
@@ -173,9 +176,50 @@ namespace octave
   }
 
   gtk_manager& __get_gtk_manager__ (const std::string& who)
   {
     interpreter& interp = __get_interpreter__ (who);
 
     return interp.get_gtk_manager ();
   }
+
+  octave_value
+  get_function_handle (octave::interpreter& interp, const octave_value& arg,
+                       const std::string& parameter_name)
+  {
+    std::list<std::string> parameter_names;
+    parameter_names.push_back (parameter_name);
+    return get_function_handle (interp, arg, parameter_names);
+  }
+
+  octave_value
+  get_function_handle (octave::interpreter& interp, const octave_value& arg,
+                       const std::list<std::string>& parameter_names)
+  {
+    if (arg.is_function_handle () || arg.is_inline_function ())
+      return arg;
+    else if (arg.is_string ())
+      {
+        std::string fstr = arg.string_value ();
+
+        if (fstr.empty ())
+          return octave_value ();
+
+        octave::symbol_table& symtab = interp.get_symbol_table ();
+
+        octave_value fcn = symtab.find_function (fstr);
+
+        if (fcn.is_defined ())
+          return fcn;
+
+        fcn = octave_value (new octave_fcn_inline (fstr, parameter_names));
+
+        if (fcn.is_defined ())
+          warning_with_id ("Octave:function-from-text",
+                           "get_function_handle: passing function body as text is discouraged; use an anonymous function instead");
+
+        return fcn;
+      }
+
+    return octave_value ();
+  }
 }
diff --git a/libinterp/corefcn/interpreter-private.h b/libinterp/corefcn/interpreter-private.h
--- a/libinterp/corefcn/interpreter-private.h
+++ b/libinterp/corefcn/interpreter-private.h
@@ -20,16 +20,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_interpreter_private_h)
 #define octave_interpreter_private_h 1
 
 #include "octave-config.h"
 
+#include <list>
 #include <string>
 
 #include "symtab.h"
 
 namespace octave
 {
   class bp_table;
   class call_stack;
@@ -77,11 +78,29 @@ namespace octave
 
   extern call_stack& __get_call_stack__ (const std::string& who);
 
   extern child_list& __get_child_list__ (const std::string& who);
 
   extern cdef_manager& __get_cdef_manager__ (const std::string& who);
 
   extern gtk_manager& __get_gtk_manager__ (const std::string& who);
+
+
+  // Functions that could be methods in the interpreter class but maybe
+  // shouldn't be exposed as part of the public interface.
+
+  // Convert octave_value object ARG to be a function handle object.  It
+  // may be a function handle, inline function, the name of a function,
+  // or the text of an inline function that has the given argument names
+  // PARAMETER_NAMES.  The latter form is deprecated.
+
+  octave_value
+  get_function_handle (octave::interpreter& interp, const octave_value& arg,
+                       const std::string& parameter_name);
+
+  octave_value
+  get_function_handle (octave::interpreter& interp, const octave_value& arg,
+                       const std::list<std::string>& parameter_names
+                         = std::list<std::string> ());
 }
 
 #endif
