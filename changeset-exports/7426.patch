# HG changeset patch
# User jwe
# Date 1201554479 0
#      Mon Jan 28 21:07:59 2008 +0000
# Node ID b9df9abdffbbc7f4b1d7b5c7787c1c7a03d0a83b
# Parent  fe4a43e1d1d38bafc10032e6a6041bdbb3fdbfee
[project @ 2008-01-28 21:07:58 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2008-01-28  John W. Eaton  <jwe@octave.org>
+
+	* oct-stream.cc (BEGIN_CHAR_CLASS_CONVERSION): Handle width properly.
+	(OCTAVE_SCAN) [__GNUG__ && ! CXX_ISO_COMPLIANT_LIBRARY]:
+	Delete special case.
+
 2008-01-25  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/rand.cc (Frandp): Relax relative error on randp
 	tests.
 
 2008-01-25  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* graphics.h.in (base_properties::get_backend,
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -1035,22 +1035,16 @@ octave_base_stream::getl (octave_idx_typ
 }
 
 std::string
 octave_base_stream::gets (octave_idx_type max_len, bool& err, const std::string& who)
 {
   return do_gets (max_len, err, false, who);
 }
 
-#if defined (__GNUG__) && ! defined (CXX_ISO_COMPLIANT_LIBRARY)
-
-#define OCTAVE_SCAN(is, fmt, arg) is.scan ((fmt).text, arg)
-
-#else
-
 #define OCTAVE_SCAN(is, fmt, arg) octave_scan (is, fmt, arg)
 
 template <class T>
 std::istream&
 octave_scan_1 (std::istream& is, const scanf_format_elt& fmt, T* valptr)
 {
   T& ref = *valptr;
 
@@ -1335,18 +1329,16 @@ octave_scan<> (std::istream& is, const s
     default:
       panic_impossible ();
       break;
     }
 
   return is;
 }
 
-#endif
-
 template <class T>
 void
 do_scanf_conv (std::istream& is, const scanf_format_elt& fmt,
 	       T valptr, Matrix& mval, double *data, octave_idx_type& idx,
 	       octave_idx_type& conversion_count, octave_idx_type nr, octave_idx_type max_size,
 	       bool discard) 
 {
   OCTAVE_SCAN (is, fmt, valptr);
@@ -1543,55 +1535,47 @@ do_scanf_conv (std::istream&, const scan
 // This format must match a nonempty sequence of characters.
 #define BEGIN_CHAR_CLASS_CONVERSION() \
   int width = elt->width; \
  \
   std::string tmp; \
  \
   do \
     { \
-      if (width) \
-	{ \
-	  char *tbuf = new char[width+1]; \
+      if (! width) \
+	width = INT_MAX;
+
+      std::ostringstream buf; \
+ \
+      std::string char_class = elt->char_class; \
  \
-	  OCTAVE_SCAN (is, *elt, tbuf); \
+      int c = EOF; \
  \
-	  tbuf[width] = '\0'; \
-          tmp = tbuf; \
-          delete [] tbuf; \
+      if (elt->type == '[') \
+        { \
+	  int chars_read = 0; \
+	  while (is && chars_read++ < width && (c = is.get ()) != EOF \
+	         && char_class.find (c) != NPOS) \
+	    buf << static_cast<char> (c); \
 	} \
       else \
 	{ \
-	  std::ostringstream buf; \
- \
-	  std::string char_class = elt->char_class; \
- \
-	  int c = EOF; \
+	  int chars_read = 0; \
+	  while (is && chars_read++ < width && (c = is.get ()) != EOF \
+	         && char_class.find (c) == NPOS) \
+	    buf << static_cast<char> (c); \
+	} \
  \
-	  if (elt->type == '[') \
-	    { \
-	      while (is && (c = is.get ()) != EOF \
-		     && char_class.find (c) != NPOS) \
-		buf << static_cast<char> (c);	     \
-	    } \
-	  else \
-	    { \
-	      while (is && (c = is.get ()) != EOF \
-		     && char_class.find (c) == NPOS) \
-		buf << static_cast<char> (c);		     \
-	    } \
+      if (width == INT_MAX && c != EOF) \
+	is.putback (c); \
  \
-	  if (c != EOF) \
-	    is.putback (c); \
+      tmp = buf.str (); \
  \
-	  tmp = buf.str (); \
- \
-	  if (tmp.empty ()) \
-	    is.setstate (std::ios::failbit); \
-	} \
+      if (tmp.empty ()) \
+        is.setstate (std::ios::failbit); \
     } \
   while (0)
 
 #define FINISH_CHARACTER_CONVERSION() \
   do \
     { \
       width = tmp.length (); \
  \
