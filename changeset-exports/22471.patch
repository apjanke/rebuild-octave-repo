# HG changeset patch
# User Rik <rik@octave.org>
# Date 1473712772 25200
#      Mon Sep 12 13:39:32 2016 -0700
# Node ID 667d353d1ab82df675db29159742652511bfc115
# Parent  9d4cb0cf9cd2cb7aeef5f76ba1645e9b5fd9d1f3
Clean up MEX API prototypes to match Matlab.
Return int, rather than void, from mxSetDimensions.
Return const mwSize *, rather than unconst version, from mxGetDimensions.
Re-order switch statements to have most probable cases first.

* mexproto.h (mxGetDimensions): Change prototype to return const mwSize *.
* mexproto.h (mxSetDimensions): Change prototype to return int.

* mxarray.in.h: Expand comment on why Octave uses OCTAVE_IDX_TYPE for all size
and pointer types.
* mxarray.in.h (mxArray_base::set_dimensions): Return int rather than void.
* mxarray.in.h (mxArray::set_dimensions): Return int rather than void.  Use
DO_MUTABLE_METHOD, not DO_VOID_MUTABLE_METHOD, due to prototype change.

* mex.cc (mxArray_octave_value::set_dimensions): Return int rather than void.
Always return 0, success.
* mex.cc (mxArray_octave_value::get_classid): Re-order if/else if tree to put
more probable cases first.
* mex.cc (mxArray_octave_value::get_element_size): Reorder switch statement
to have most probable cases first.
* mex.cc (mxArray_matlab::set_dimensions): Return int rather than void.
Return failure (1) if malloc does not succeed.
* mex.cc (mxArray_matlab::get_class_name): Reorder switch statement to have
most probable cases first.
* mex.cc (mxArray_number::get_double): Reorder switch statement to have
most probable cases first.
* mex.cc (mxArray_number::as_octave_value): Reorder switch statement to have
most probable cases first.
* mex.cc (mxGetDimensions): Return const mwSize *.
* mex.cc (mxSetDimensions): Return int rather than void.
* mex.cc (mxGetChars): Return NULL if input mxArray is not of type mxChar (done
for Matlab compatibility.).

diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -291,19 +291,21 @@ public:
 
     return ndims;
   }
 
   void set_m (mwSize /*m*/) { request_mutation (); }
 
   void set_n (mwSize /*n*/) { request_mutation (); }
 
-  void set_dimensions (mwSize * /*dims_arg*/, mwSize /*ndims_arg*/)
+  int set_dimensions (mwSize * /*dims_arg*/, mwSize /*ndims_arg*/)
   {
     request_mutation ();
+
+    return 0; 
   }
 
   mwSize get_number_of_elements (void) const { return val.numel (); }
 
   int is_empty (void) const { return val.is_empty (); }
 
   bool is_scalar (void) const
   {
@@ -314,46 +316,46 @@ public:
   }  
 
   mxClassID get_class_id (void) const
   {
     id = mxUNKNOWN_CLASS;
 
     std::string cn = val.class_name ();
 
-    if (cn == "cell")
+    if (cn == "double")
+      id = mxDOUBLE_CLASS;
+    else if (cn == "single")
+      id = mxSINGLE_CLASS;
+    else if (cn == "char")
+      id = mxCHAR_CLASS;
+    else if (cn == "logical")
+      id = mxLOGICAL_CLASS;
+    else if (cn == "cell")
       id = mxCELL_CLASS;
     else if (cn == "struct")
       id = mxSTRUCT_CLASS;
-    else if (cn == "logical")
-      id = mxLOGICAL_CLASS;
-    else if (cn == "char")
-      id = mxCHAR_CLASS;
-    else if (cn == "double")
-      id = mxDOUBLE_CLASS;
-    else if (cn == "single")
-      id = mxSINGLE_CLASS;
+    else if (cn == "function_handle")
+      id = mxFUNCTION_CLASS;
     else if (cn == "int8")
       id = mxINT8_CLASS;
     else if (cn == "uint8")
       id = mxUINT8_CLASS;
     else if (cn == "int16")
       id = mxINT16_CLASS;
     else if (cn == "uint16")
       id = mxUINT16_CLASS;
     else if (cn == "int32")
       id = mxINT32_CLASS;
     else if (cn == "uint32")
       id = mxUINT32_CLASS;
     else if (cn == "int64")
       id = mxINT64_CLASS;
     else if (cn == "uint64")
       id = mxUINT64_CLASS;
-    else if (cn == "function_handle")
-      id = mxFUNCTION_CLASS;
 
     return id;
   }
 
   const char *get_class_name (void) const
   {
     if (! class_name)
       {
@@ -371,16 +373,17 @@ public:
   {
     request_mutation ();
     return 0;
   }
 
   // Not allowed.
   void set_cell (mwIndex /*idx*/, mxArray * /*val*/) { request_mutation (); }
 
+  // FIXME: For sparse arrays, this should return the first non-zero value.
   double get_scalar (void) const { return val.scalar_value (true); }
 
   void *get_data (void) const
   {
     void *retval = val.mex_get_data ();
 
     if (retval)
       maybe_mark_foreign (retval);
@@ -486,17 +489,17 @@ public:
         retval = 0;
       }
 
     return retval;
   }
 
   char *array_to_string (void) const
   {
-    // FIXME: this is suposed to handle multi-byte character strings.
+    // FIXME: this is supposed to handle multi-byte character strings.
 
     char *buf = 0;
 
     if (val.is_string ())
       {
         mwSize nel = get_number_of_elements ();
 
         buf = static_cast<char *> (mxArray::malloc (nel + 1));
@@ -527,31 +530,33 @@ public:
 
   size_t get_element_size (void) const
   {
     // Force id to be cached.
     get_class_id ();
 
     switch (id)
       {
+      case mxDOUBLE_CLASS: return sizeof (double);
+      case mxSINGLE_CLASS: return sizeof (float);
+      case mxCHAR_CLASS: return sizeof (mxChar);
+      case mxLOGICAL_CLASS: return sizeof (mxLogical);
       case mxCELL_CLASS: return sizeof (mxArray *);
       case mxSTRUCT_CLASS: return sizeof (mxArray *);
-      case mxLOGICAL_CLASS: return sizeof (mxLogical);
-      case mxCHAR_CLASS: return sizeof (mxChar);
-      case mxDOUBLE_CLASS: return sizeof (double);
-      case mxSINGLE_CLASS: return sizeof (float);
+      case mxFUNCTION_CLASS: return 0;
       case mxINT8_CLASS: return 1;
       case mxUINT8_CLASS: return 1;
       case mxINT16_CLASS: return 2;
       case mxUINT16_CLASS: return 2;
       case mxINT32_CLASS: return 4;
       case mxUINT32_CLASS: return 4;
       case mxINT64_CLASS: return 8;
       case mxUINT64_CLASS: return 8;
-      case mxFUNCTION_CLASS: return 0;
+      // FIXME: user-defined objects need their own class ID.
+      //        What should they return, size of pointer?
       default: return 0;
       }
   }
 
   bool mutation_needed (void) const { return mutate_flag; }
 
   void request_mutation (void) const
   {
@@ -738,26 +743,40 @@ public:
   mwSize *get_dimensions (void) const { return dims; }
 
   mwSize get_number_of_dimensions (void) const { return ndims; }
 
   void set_m (mwSize m) { dims[0] = m; }
 
   void set_n (mwSize n) { dims[1] = n; }
 
-  void set_dimensions (mwSize *dims_arg, mwSize ndims_arg)
+  int set_dimensions (mwSize *dims_arg, mwSize ndims_arg)
   {
     ndims = ndims_arg;
 
     mxFree (dims);
-    dims = (ndims > 0 ? static_cast<mwSize *>
-                          (mxArray::malloc (ndims * sizeof (mwSize)))
-                      : 0);
-    for (int i = 0; i < ndims; i++)
-      dims[i] = dims_arg[i];
+
+    if (ndims > 0)
+      {
+        dims
+          = static_cast<mwSize *> (mxArray::malloc (ndims * sizeof (mwSize)));
+        
+        if (dims == NULL)
+          return 1;
+
+        for (int i = 0; i < ndims; i++)
+          dims[i] = dims_arg[i];
+
+        return 0;
+      }
+    else
+      {
+        dims = 0;
+        return 0;
+      }
   }
 
   mwSize get_number_of_elements (void) const
   {
     mwSize retval = dims[0];
 
     for (mwIndex i = 1; i < ndims; i++)
       retval *= dims[i];
@@ -773,31 +792,33 @@ public:
   }
 
   mxClassID get_class_id (void) const { return id; }
 
   const char *get_class_name (void) const
   {
     switch (id)
       {
+      case mxDOUBLE_CLASS: return "double";
+      case mxSINGLE_CLASS: return "single";
+      case mxCHAR_CLASS: return "char";
+      case mxLOGICAL_CLASS: return "logical";
       case mxCELL_CLASS: return "cell";
       case mxSTRUCT_CLASS: return "struct";
-      case mxLOGICAL_CLASS: return "logical";
-      case mxCHAR_CLASS: return "char";
-      case mxDOUBLE_CLASS: return "double";
-      case mxSINGLE_CLASS: return "single";
+      case mxFUNCTION_CLASS: return "function_handle";
       case mxINT8_CLASS: return "int8";
       case mxUINT8_CLASS: return "uint8";
       case mxINT16_CLASS: return "int16";
       case mxUINT16_CLASS: return "uint16";
       case mxINT32_CLASS: return "int32";
       case mxUINT32_CLASS: return "uint32";
       case mxINT64_CLASS: return "int64";
       case mxUINT64_CLASS: return "uint64";
-      case mxFUNCTION_CLASS: return "function_handle";
+      case mxUNKNOWN_CLASS: return "unknown";
+      // FIXME: should return the classname of user-defined objects
       default: return "unknown";
       }
   }
 
   void set_class_name (const char *name_arg)
   {
     mxFree (class_name);
     class_name = static_cast<char *> (mxArray::malloc (strlen (name_arg) + 1));
@@ -934,16 +955,18 @@ public:
       case mxUINT8_CLASS: return 1;
       case mxINT16_CLASS: return 2;
       case mxUINT16_CLASS: return 2;
       case mxINT32_CLASS: return 4;
       case mxUINT32_CLASS: return 4;
       case mxINT64_CLASS: return 8;
       case mxUINT64_CLASS: return 8;
       case mxFUNCTION_CLASS: return 0;
+      // FIXME: user-defined objects need their own class ID.
+      //        What should they return, size of pointer?
       default: return 0;
       }
   }
 
 protected:
 
   mxArray_matlab (const mxArray_matlab& val)
     : mxArray_base (val), class_name (mxArray::strsave (val.class_name)),
@@ -1103,30 +1126,30 @@ public:
   int is_complex (void) const { return pi != 0; }
 
   double get_scalar (void) const
   {
     double retval = 0;
 
     switch (get_class_id ())
       {
-      case mxLOGICAL_CLASS:
-        retval = *(static_cast<bool *> (pr));
+      case mxDOUBLE_CLASS:
+        retval = *(static_cast<double *> (pr));
+        break;
+
+      case mxSINGLE_CLASS:
+        retval = *(static_cast<float *> (pr));
         break;
 
       case mxCHAR_CLASS:
         retval = *(static_cast<mxChar *> (pr));
         break;
 
-      case mxSINGLE_CLASS:
-        retval = *(static_cast<float *> (pr));
-        break;
-
-      case mxDOUBLE_CLASS:
-        retval = *(static_cast<double *> (pr));
+      case mxLOGICAL_CLASS:
+        retval = *(static_cast<bool *> (pr));
         break;
 
       case mxINT8_CLASS:
         retval = *(static_cast<int8_t *> (pr));
         break;
 
       case mxUINT8_CLASS:
         retval = *(static_cast<uint8_t *> (pr));
@@ -1194,17 +1217,17 @@ public:
         buf[nel] = 0;
       }
 
     return retval;
   }
 
   char *array_to_string (void) const
   {
-    // FIXME: this is suposed to handle multi-byte character strings.
+    // FIXME: this is supposed to handle multi-byte character strings.
 
     mwSize nel = get_number_of_elements ();
 
     char *buf = static_cast<char *> (mxArray::malloc (nel + 1));
 
     if (buf)
       {
         mxChar *ptr = static_cast<mxChar *> (pr);
@@ -1221,34 +1244,46 @@ public:
   octave_value as_octave_value (void) const
   {
     octave_value retval;
 
     dim_vector dv = dims_to_dim_vector ();
 
     switch (get_class_id ())
       {
-      case mxLOGICAL_CLASS:
-        retval = int_to_ov<mxLogical, boolNDArray, bool> (dv);
-        break;
-
-      case mxCHAR_CLASS:
+      case mxDOUBLE_CLASS:
         {
           mwSize nel = get_number_of_elements ();
 
-          mxChar *ppr = static_cast<mxChar *> (pr);
-
-          charNDArray val (dv);
-
-          char *ptr = val.fortran_vec ();
-
-          for (mwIndex i = 0; i < nel; i++)
-            ptr[i] = static_cast<char> (ppr[i]);
-
-          retval = val;
+          double *ppr = static_cast<double *> (pr);
+
+          if (pi)
+            {
+              ComplexNDArray val (dv);
+
+              Complex *ptr = val.fortran_vec ();
+
+              double *ppi = static_cast<double *> (pi);
+
+              for (mwIndex i = 0; i < nel; i++)
+                ptr[i] = Complex (ppr[i], ppi[i]);
+
+              retval = val;
+            }
+          else
+            {
+              NDArray val (dv);
+
+              double *ptr = val.fortran_vec ();
+
+              for (mwIndex i = 0; i < nel; i++)
+                ptr[i] = ppr[i];
+
+              retval = val;
+            }
         }
         break;
 
       case mxSINGLE_CLASS:
         {
           mwSize nel = get_number_of_elements ();
 
           float *ppr = static_cast<float *> (pr);
@@ -1275,49 +1310,37 @@ public:
               for (mwIndex i = 0; i < nel; i++)
                 ptr[i] = ppr[i];
 
               retval = val;
             }
         }
         break;
 
-      case mxDOUBLE_CLASS:
+      case mxCHAR_CLASS:
         {
           mwSize nel = get_number_of_elements ();
 
-          double *ppr = static_cast<double *> (pr);
-
-          if (pi)
-            {
-              ComplexNDArray val (dv);
-
-              Complex *ptr = val.fortran_vec ();
-
-              double *ppi = static_cast<double *> (pi);
-
-              for (mwIndex i = 0; i < nel; i++)
-                ptr[i] = Complex (ppr[i], ppi[i]);
-
-              retval = val;
-            }
-          else
-            {
-              NDArray val (dv);
-
-              double *ptr = val.fortran_vec ();
-
-              for (mwIndex i = 0; i < nel; i++)
-                ptr[i] = ppr[i];
-
-              retval = val;
-            }
+          mxChar *ppr = static_cast<mxChar *> (pr);
+
+          charNDArray val (dv);
+
+          char *ptr = val.fortran_vec ();
+
+          for (mwIndex i = 0; i < nel; i++)
+            ptr[i] = static_cast<char> (ppr[i]);
+
+          retval = val;
         }
         break;
 
+      case mxLOGICAL_CLASS:
+        retval = int_to_ov<mxLogical, boolNDArray, bool> (dv);
+        break;
+
       case mxINT8_CLASS:
         retval = int_to_ov<int8_t, int8NDArray, octave_int8> (dv);
         break;
 
       case mxUINT8_CLASS:
         retval = int_to_ov<uint8_t, uint8NDArray, octave_uint8> (dv);
         break;
 
@@ -1454,40 +1477,16 @@ public:
   octave_value as_octave_value (void) const
   {
     octave_value retval;
 
     dim_vector dv = dims_to_dim_vector ();
 
     switch (get_class_id ())
       {
-      case mxLOGICAL_CLASS:
-        {
-          bool *ppr = static_cast<bool *> (pr);
-
-          SparseBoolMatrix val (get_m (), get_n (),
-                                static_cast<octave_idx_type> (nzmax));
-
-          for (mwIndex i = 0; i < nzmax; i++)
-            {
-              val.xdata (i) = ppr[i];
-              val.xridx (i) = ir[i];
-            }
-
-          for (mwIndex i = 0; i < get_n () + 1; i++)
-            val.xcidx (i) = jc[i];
-
-          retval = val;
-        }
-        break;
-
-      case mxSINGLE_CLASS:
-        error ("single precision sparse data type not supported");
-        break;
-
       case mxDOUBLE_CLASS:
         {
           if (pi)
             {
               double *ppr = static_cast<double *> (pr);
               double *ppi = static_cast<double *> (pi);
 
               SparseComplexMatrix val (get_m (), get_n (),
@@ -1520,16 +1519,40 @@ public:
               for (mwIndex i = 0; i < get_n () + 1; i++)
                 val.xcidx (i) = jc[i];
 
               retval = val;
             }
         }
         break;
 
+      case mxLOGICAL_CLASS:
+        {
+          bool *ppr = static_cast<bool *> (pr);
+
+          SparseBoolMatrix val (get_m (), get_n (),
+                                static_cast<octave_idx_type> (nzmax));
+
+          for (mwIndex i = 0; i < nzmax; i++)
+            {
+              val.xdata (i) = ppr[i];
+              val.xridx (i) = ir[i];
+            }
+
+          for (mwIndex i = 0; i < get_n () + 1; i++)
+            val.xcidx (i) = jc[i];
+
+          retval = val;
+        }
+        break;
+
+      case mxSINGLE_CLASS:
+        error ("single precision sparse data type not supported");
+        break;
+
       default:
         panic_impossible ();
       }
 
     return retval;
   }
 
 private:
@@ -2754,17 +2777,17 @@ mxGetM (const mxArray *ptr)
 }
 
 size_t
 mxGetN (const mxArray *ptr)
 {
   return ptr->get_n ();
 }
 
-mwSize *
+const mwSize *
 mxGetDimensions (const mxArray *ptr)
 {
   return ptr->get_dimensions ();
 }
 
 mwSize
 mxGetNumberOfDimensions (const mxArray *ptr)
 {
@@ -2785,47 +2808,52 @@ mxSetM (mxArray *ptr, mwSize m)
 }
 
 void
 mxSetN (mxArray *ptr, mwSize n)
 {
   ptr->set_n (n);
 }
 
-void
+int
 mxSetDimensions (mxArray *ptr, const mwSize *dims, mwSize ndims)
 {
-  ptr->set_dimensions (static_cast<mwSize *>
-                       (maybe_unmark (const_cast<mwSize *> (dims))),
-                       ndims);
+  return (ptr->set_dimensions (static_cast<mwSize *>
+                               (maybe_unmark (const_cast<mwSize *> (dims))),
+                               ndims));
 }
 
 // Data extractors.
 double *
 mxGetPr (const mxArray *ptr)
 {
   return static_cast<double *> (ptr->get_data ());
 }
 
 double *
 mxGetPi (const mxArray *ptr)
 {
   return static_cast<double *> (ptr->get_imag_data ());
 }
 
+// FIXME: For sparse arrays, mxGetScalar should return the first non-zero
+// element, rather than just the first element.
 double
 mxGetScalar (const mxArray *ptr)
 {
   return ptr->get_scalar ();
 }
 
 mxChar *
 mxGetChars (const mxArray *ptr)
 {
-  return static_cast<mxChar *> (ptr->get_data ());
+  if (mxIsChar (ptr))
+    return static_cast<mxChar *> (ptr->get_data ());
+  else
+    return NULL;
 }
 
 mxLogical *
 mxGetLogicals (const mxArray *ptr)
 {
   return static_cast<mxLogical *> (ptr->get_data ());
 }
 
diff --git a/libinterp/corefcn/mexproto.h b/libinterp/corefcn/mexproto.h
--- a/libinterp/corefcn/mexproto.h
+++ b/libinterp/corefcn/mexproto.h
@@ -189,16 +189,17 @@ extern OCTINTERP_API mxArray *mxDuplicat
 extern OCTINTERP_API void mxDestroyArray (mxArray *v);
 
 /* Type Predicates.  */
 extern OCTINTERP_API bool mxIsCell (const mxArray *ptr);
 extern OCTINTERP_API bool mxIsChar (const mxArray *ptr);
 extern OCTINTERP_API bool mxIsClass (const mxArray *ptr, const char *name);
 extern OCTINTERP_API bool mxIsComplex (const mxArray *ptr);
 extern OCTINTERP_API bool mxIsDouble (const mxArray *ptr);
+/* Matlab seems to have deprecated IsFunctionHandle, but it seems useful */
 extern OCTINTERP_API bool mxIsFunctionHandle (const mxArray *ptr);
 extern OCTINTERP_API bool mxIsInt16 (const mxArray *ptr);
 extern OCTINTERP_API bool mxIsInt32 (const mxArray *ptr);
 extern OCTINTERP_API bool mxIsInt64 (const mxArray *ptr);
 extern OCTINTERP_API bool mxIsInt8 (const mxArray *ptr);
 extern OCTINTERP_API bool mxIsLogical (const mxArray *ptr);
 extern OCTINTERP_API bool mxIsNumeric (const mxArray *ptr);
 extern OCTINTERP_API bool mxIsSingle (const mxArray *ptr);
@@ -220,25 +221,25 @@ extern OCTINTERP_API bool mxIsEmpty (con
 extern OCTINTERP_API bool mxIsScalar (const mxArray *ptr);
 
 /* Just plain odd thing to ask of a value.  */
 extern OCTINTERP_API bool mxIsFromGlobalWS (const mxArray *ptr);
 
 /* Dimension extractors.  */
 extern OCTINTERP_API size_t mxGetM (const mxArray *ptr);
 extern OCTINTERP_API size_t mxGetN (const mxArray *ptr);
-extern OCTINTERP_API mwSize *mxGetDimensions (const mxArray *ptr);
+extern OCTINTERP_API const mwSize *mxGetDimensions (const mxArray *ptr);
 extern OCTINTERP_API mwSize mxGetNumberOfDimensions (const mxArray *ptr);
 extern OCTINTERP_API size_t mxGetNumberOfElements (const mxArray *ptr);
 
 /* Dimension setters.  */
 extern OCTINTERP_API void mxSetM (mxArray *ptr, mwSize M);
 extern OCTINTERP_API void mxSetN (mxArray *ptr, mwSize N);
-extern OCTINTERP_API void mxSetDimensions (mxArray *ptr, const mwSize *dims,
-                                           mwSize ndims);
+extern OCTINTERP_API int mxSetDimensions (mxArray *ptr, const mwSize *dims,
+                                          mwSize ndims);
 
 /* Data extractors.  */
 extern OCTINTERP_API double *mxGetPi (const mxArray *ptr);
 extern OCTINTERP_API double *mxGetPr (const mxArray *ptr);
 extern OCTINTERP_API double mxGetScalar (const mxArray *ptr);
 extern OCTINTERP_API mxChar *mxGetChars (const mxArray *ptr);
 extern OCTINTERP_API mxLogical *mxGetLogicals (const mxArray *ptr);
 extern OCTINTERP_API void *mxGetData (const mxArray *ptr);
@@ -291,18 +292,19 @@ extern OCTINTERP_API const char *mxGetFi
                                                          int key_num);
 extern OCTINTERP_API int mxGetFieldNumber (const mxArray *ptr, const char *key);
 
 extern OCTINTERP_API int mxGetString (const mxArray *ptr, char *buf,
                                       mwSize buflen);
 extern OCTINTERP_API char *mxArrayToString (const mxArray *ptr);
 
 /* Miscellaneous.  */
-extern OCTINTERP_API mwIndex
-mxCalcSingleSubscript (const mxArray *ptr, mwSize nsubs, mwIndex *subs);
+extern OCTINTERP_API mwIndex mxCalcSingleSubscript (const mxArray *ptr,
+                                                    mwSize nsubs,
+                                                    mwIndex *subs);
 
 extern OCTINTERP_API size_t mxGetElementSize (const mxArray *ptr);
 
 #if defined (MEX_DEBUG)
 
 #  define mxAssert(expr, msg)                                           \
   do                                                                    \
     {                                                                   \
diff --git a/libinterp/corefcn/mxarray.in.h b/libinterp/corefcn/mxarray.in.h
--- a/libinterp/corefcn/mxarray.in.h
+++ b/libinterp/corefcn/mxarray.in.h
@@ -46,23 +46,16 @@ SUCH DAMAGE.
 
 #if ! defined (octave_mxarray_h)
 #define octave_mxarray_h 1
 
 #include "octave-config.h"
 
 typedef enum
 {
-  mxREAL = 0,
-  mxCOMPLEX = 1
-}
-mxComplexity;
-
-typedef enum
-{
   mxUNKNOWN_CLASS = 0,
   mxCELL_CLASS,
   mxSTRUCT_CLASS,
   mxLOGICAL_CLASS,
   mxCHAR_CLASS,
   mxVOID_CLASS,
   mxDOUBLE_CLASS,
   mxSINGLE_CLASS,
@@ -73,26 +66,34 @@ typedef enum
   mxINT32_CLASS,
   mxUINT32_CLASS,
   mxINT64_CLASS,
   mxUINT64_CLASS,
   mxFUNCTION_CLASS
 }
 mxClassID;
 
-typedef unsigned char mxLogical;
+typedef enum
+{
+  mxREAL = 0,
+  mxCOMPLEX = 1
+}
+mxComplexity;
 
 /* Matlab uses a wide char (uint16) internally, but Octave uses plain char. */
 /* typedef Uint16 mxChar; */
 typedef char mxChar;
 
+typedef unsigned char mxLogical;
+
 /*
- * FIXME: Mathworks says these should be size_t on 64-bit system and when
- * mex is used with the -largearraydims flag, but why do that?  Its better
- * to conform to the same indexing as the rest of Octave.
+ * FIXME: Mathworks says mwSize, mwIndex should be int generally.
+ * But on 64-bit systems, or when mex -largeArrayDims is used, it is size_t.
+ * mwSignedIndex is supposed to be ptrdiff_t.  All of this is confusing.
+ * Its better to conform to the same indexing as the rest of Octave.
  */
 typedef %OCTAVE_IDX_TYPE% mwSize;
 typedef %OCTAVE_IDX_TYPE% mwIndex;
 typedef %OCTAVE_IDX_TYPE% mwSignedIndex;
 
 #if ! defined (MXARRAY_TYPEDEFS_ONLY)
 
 #include <cstring>
@@ -203,17 +204,17 @@ public:
   virtual mwSize *get_dimensions (void) const = 0;
 
   virtual mwSize get_number_of_dimensions (void) const = 0;
 
   virtual void set_m (mwSize m) = 0;
 
   virtual void set_n (mwSize n) = 0;
 
-  virtual void set_dimensions (mwSize *dims_arg, mwSize ndims_arg) = 0;
+  virtual int set_dimensions (mwSize *dims_arg, mwSize ndims_arg) = 0;
 
   virtual mwSize get_number_of_elements (void) const = 0;
 
   virtual int is_empty (void) const = 0;
 
   virtual bool is_scalar (void) const = 0;
 
   virtual mxClassID get_class_id (void) const = 0;
@@ -411,18 +412,18 @@ public:
 
   mwSize get_number_of_dimensions (void) const
   { return rep->get_number_of_dimensions (); }
 
   void set_m (mwSize m) { DO_VOID_MUTABLE_METHOD (set_m (m)); }
 
   void set_n (mwSize n) { DO_VOID_MUTABLE_METHOD (set_n (n)); }
 
-  void set_dimensions (mwSize *dims_arg, mwSize ndims_arg)
-  { DO_VOID_MUTABLE_METHOD (set_dimensions (dims_arg, ndims_arg)); }
+  int set_dimensions (mwSize *dims_arg, mwSize ndims_arg)
+  { DO_MUTABLE_METHOD (int, set_dimensions (dims_arg, ndims_arg)); }
 
   mwSize get_number_of_elements (void) const
   { return rep->get_number_of_elements (); }
 
   int is_empty (void) const { return get_number_of_elements () == 0; }
 
   bool is_scalar (void) const { return rep->is_scalar (); }
 
