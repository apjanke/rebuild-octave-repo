# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1236943130 -3600
#      Fri Mar 13 12:18:50 2009 +0100
# Node ID 967a692ddfe249db30f5ec6ff430795dbcfe9a57
# Parent  b37a6c27c23f9d6185e853195bbda9226b4e1d34
fix range arithmetics

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2009-03-13  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Range.h (Range::Range (double, double, octave_idx_type)): Remove
+	constructor body.
+	* Range.cc: Move it here. Check for invalid range op results.
+	(all operators): Validate cache for invalid range op results.
+
 2009-03-10  Jason Riedy  <jason@acm.org>
 
 	* sparse-base-lu.cc (Pr_mat): New member function.  Return the row
 	permutation as a PermMatrix.
 	(Pc_mat): New member function.  Return the col permutation as a
 	PermMatrix.
 
 	* sparse-base-lu.h (sparse_base_lu): Declare Pc_mat and Pr_mat
diff --git a/liboctave/Range.cc b/liboctave/Range.cc
--- a/liboctave/Range.cc
+++ b/liboctave/Range.cc
@@ -31,32 +31,40 @@ along with Octave; see the file COPYING.
 #include <limits>
 
 #include "Range.h"
 #include "lo-error.h"
 #include "lo-mappers.h"
 #include "lo-math.h"
 #include "lo-utils.h"
 
+Range::Range (double b, double i, octave_idx_type n)
+  : rng_base (b), rng_limit (b + n * i), rng_inc (i), 
+  rng_nelem (n), cache ()
+{
+  if (! xfinite (b) || ! xfinite (i))
+    rng_nelem = -2;
+}
+
 bool
 Range::all_elements_are_ints (void) const
 {
   // If the base and increment are ints, the final value in the range
   // will also be an integer, even if the limit is not. If there is one
   // or fewer elements only the base needs to be an integer
 
   return (! (xisnan (rng_base) || xisnan (rng_inc))
 	  && (NINTbig (rng_base) == rng_base || rng_nelem < 1)
 	  && (NINTbig (rng_inc) == rng_inc || rng_nelem <= 1));
 }
 
 Matrix
 Range::matrix_value (void) const
 {
-  if (rng_nelem > 0 && cache.rows () == 0)
+  if (rng_nelem > 0 && cache.nelem () == 0)
     {
       cache.resize (1, rng_nelem);
       double b = rng_base;
       double increment = rng_inc;
       for (octave_idx_type i = 0; i < rng_nelem; i++)
 	cache(i) = b + i * increment;
 
       // On some machines (x86 with extended precision floating point
@@ -176,45 +184,17 @@ Range::sort_internal (Array<octave_idx_t
   for (octave_idx_type i = 0; i < nel; i++, tmp += stp)
     psidx[i] = tmp;
 
 }
 
 Matrix 
 Range::diag (octave_idx_type k) const
 {
-  octave_idx_type nnr = 1;
-  octave_idx_type nnc = nelem ();
-  Matrix d;
-
-  if  (nnr != 0)
-    {
-      octave_idx_type roff = 0;
-      octave_idx_type coff = 0;
-      if (k > 0)
-	{
-	  roff = 0;
-	  coff = k;
-	}
-      else if (k < 0)
-	{
-	  roff = -k;
-	  coff = 0;
-	}
-
-      // Force cached matrix to be created
-      matrix_value ();
-
-      octave_idx_type n = nnc + std::abs (k);
-      d = Matrix (n, n, Matrix::resize_fill_value ());
-      for (octave_idx_type i = 0; i < nnc; i++)
-	d.xelem (i+roff, i+coff) = cache.xelem (i);
-    }
-
-  return d;
+  return matrix_value ().diag (k);
 }
 
 Range
 Range::sort (octave_idx_type dim, sortmode mode) const
 {
   Range retval = *this;
 
   if (dim == 1)
@@ -300,42 +280,66 @@ operator >> (std::istream& is, Range& a)
 Range
 operator - (const Range& r)
 {
   return Range (-r.base (), -r.inc (), r.nelem ());
 }
 
 Range operator + (double x, const Range& r)
 {
-  return Range (x + r.base (), r.inc (), r.nelem ());
+  Range result (x + r.base (), r.inc (), r.nelem ());
+  if (result.rng_nelem < 0)
+    result.cache = x + r.matrix_value ();
+
+  return result;
 }
 
 Range operator + (const Range& r, double x)
 {
-  return Range (r.base () + x, r.inc (), r.nelem ());
+  Range result (r.base () + x, r.inc (), r.nelem ());
+  if (result.rng_nelem < 0)
+    result.cache = r.matrix_value () + x;
+
+  return result;
 }
 
 Range operator - (double x, const Range& r)
 {
-  return Range (x - r.base (), -r.inc (), r.nelem ());
+  Range result (x - r.base (), -r.inc (), r.nelem ());
+  if (result.rng_nelem < 0)
+    result.cache = x - r.matrix_value ();
+
+  return result;
 }
 
 Range operator - (const Range& r, double x)
 {
-  return Range (r.base () - x, r.inc (), r.nelem ());
+  Range result (r.base () - x, r.inc (), r.nelem ());
+  if (result.rng_nelem < 0)
+    result.cache = r.matrix_value () - x;
+
+  return result;
 }
 
 Range operator * (double x, const Range& r)
 {
-  return Range (x * r.base (), x * r.inc (), r.nelem ());
+  Range result (x * r.base (), x * r.inc (), r.nelem ());
+  if (result.rng_nelem < 0)
+    result.cache = x * r.matrix_value ();
+
+  return result;
 }
 
 Range operator * (const Range& r, double x)
 {
-  return Range (r.base () * x, r.inc () * x, r.nelem ());
+  Range result (r.base () * x, r.inc () * x, r.nelem ());
+  if (result.rng_nelem < 0)
+    result.cache = r.matrix_value () * x;
+
+  return result;
 }
 
 
 // C  See Knuth, Art Of Computer Programming, Vol. 1, Problem 1.2.4-5.
 // C
 // C===Tolerant FLOOR function.
 // C
 // C    X  -  is given as a Double Precision argument to be operated on.
diff --git a/liboctave/Range.h b/liboctave/Range.h
--- a/liboctave/Range.h
+++ b/liboctave/Range.h
@@ -35,30 +35,28 @@ Range
 {
  public:
 
   Range (void)
     : rng_base (0), rng_limit (0), rng_inc (0), rng_nelem (0), cache (1, 0) { }
 
   Range (const Range& r)
     : rng_base (r.rng_base), rng_limit (r.rng_limit), rng_inc (r.rng_inc),
-      rng_nelem (r.rng_nelem), cache () { }
+      rng_nelem (r.rng_nelem), cache (r.cache) { }
 
   Range (double b, double l)
     : rng_base (b), rng_limit (l), rng_inc (1),
       rng_nelem (nelem_internal ()), cache () { }
 
   Range (double b, double l, double i)
     : rng_base (b), rng_limit (l), rng_inc (i),
       rng_nelem (nelem_internal ()), cache () { }
 
   // For operators' usage (to preserve element count).
-  Range (double b, double i, octave_idx_type n)
-    : rng_base (b), rng_limit (b + n * i), rng_inc (i), 
-      rng_nelem (n), cache () { }
+  Range (double b, double i, octave_idx_type n);
 
   double base (void) const { return rng_base; }
   double limit (void) const { return rng_limit; }
   double inc (void) const { return rng_inc; }
   octave_idx_type nelem (void) const { return rng_nelem; }
 
   bool all_elements_are_ints (void) const;
 
@@ -104,31 +102,40 @@ Range
 	rng_inc = i;
 	clear_cache ();
       }
   }
 
   friend OCTAVE_API std::ostream& operator << (std::ostream& os, const Range& r);
   friend OCTAVE_API std::istream& operator >> (std::istream& is, Range& r);
 
+  friend OCTAVE_API Range operator - (const Range& r);
+  friend OCTAVE_API Range operator + (double x, const Range& r);
+  friend OCTAVE_API Range operator + (const Range& r, double x);
+  friend OCTAVE_API Range operator - (double x, const Range& r);
+  friend OCTAVE_API Range operator - (const Range& r, double x);
+  friend OCTAVE_API Range operator * (double x, const Range& r);
+  friend OCTAVE_API Range operator * (const Range& r, double x);
+
   void print_range (void);
 
  private:
 
   double rng_base;
   double rng_limit;
   double rng_inc;
 
   octave_idx_type rng_nelem;
 
   mutable Matrix cache;
 
   octave_idx_type nelem_internal (void) const;
 
   void clear_cache (void) const { cache.resize (0, 0); }
+
 };
 
 extern OCTAVE_API Range operator - (const Range& r);
 
 extern OCTAVE_API Range operator + (double x, const Range& r);
 
 extern OCTAVE_API Range operator + (const Range& r, double x);
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-03-13  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-range.h (octave_range::octave_range (const Range&)): Allow
+	constructing from invalid range op result.
+	* ov-range.cc (octave_range::try_narrowing_conversion): Validate
+	invalid range op results.
+
 2009-03-10  Jason Riedy  <jason@acm.org>
 
 	* DLD-FUNCTIONS/lu.cc (lu): Call fact.Pr_mat () and fact.Pc_mat ()
 	to return permutation matrices in the sparse case.
 
 2009-03-12  John W. Eaton  <jwe@octave.org>
 
 	* ls-mat-ascii.cc (get_mat_data_input_line): If we are looking at
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -72,16 +72,20 @@ octave_range::try_narrowing_conversion (
     case 1:
       retval = new octave_scalar (range.base ());
       break;
 
     case 0:
       retval = new octave_matrix (Matrix (1, 0));
       break;
 
+    case -2:
+      retval = new octave_matrix (range.matrix_value ());
+      break;
+
     default:
       break;
     }
 
   return retval;
 }
 
 octave_value
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -63,17 +63,17 @@ public:
       {
 	if (range.nelem () < 0)
 	  ::error ("invalid range");
       }
 
   octave_range (const Range& r)
     : octave_base_value (), range (r)
       {
-	if (range.nelem () < 0)
+	if (range.nelem () < 0 && range.nelem () != -2)
 	  ::error ("invalid range");
       }
 
   octave_range (const octave_range& r)
     : octave_base_value (), range (r.range) { }
 
   ~octave_range (void) { }
 
