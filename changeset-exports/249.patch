# HG changeset patch
# User jwe
# Date 755204211 0
#      Mon Dec 06 18:56:51 1993 +0000
# Node ID 0a1644ef9a0ad85e8512407e4f116b301950678d
# Parent  5ba769d183b92989d5d09a81653218588899c187
[project @ 1993-12-06 18:56:13 by jwe]

diff --git a/info/Makefile.in b/info/Makefile.in
--- a/info/Makefile.in
+++ b/info/Makefile.in
@@ -41,17 +41,17 @@ SHELL = /bin/sh
 #### End of system configuration section. ####
 
 SOURCES = dir.c display.c echo_area.c filesys.c info-utils.c info.c \
 	infodoc.c infomap.c m-x.c nodes.c search.c session.c \
 	signals.c terminal.c tilde.c window.c xmalloc.c	indices.c \
 	makedoc.c nodemenu.c footnotes.c dribble.c variables.c gc.c \
 	error.c
 
-INCLUDES = display.h doc.h echo_area.h filesys.h general.h getopt.h \
+INCLUDES = display.h doc.h echo_area.h filesys.h general.h \
 	info-utils.h info.h infomap.h nodes.h search.h session.h \
 	signals.h termdep.h terminal.h tilde.h indices.h window.h \
 	footnotes.h dribble.h variables.h gc.h
 
 TEXI = info-stnd.texi info.texi userdoc.texi
 
 DISTFILES = Makefile.in README NEWS info.1 \
 	  $(SOURCES) $(INCLUDES) $(TEXINFO)
@@ -70,17 +70,17 @@ CMDFILES = $(srcdir)/session.c $(srcdir)
 	   $(srcdir)/m-x.c $(srcdir)/indices.c $(srcdir)/nodemenu.c \
 	   $(srcdir)/footnotes.c $(srcdir)/variables.c
 
 # The name of the program which builds documentation structure from CMDFILES.
 MAKEDOC_OBJECTS = makedoc.o xmalloc.o
 MAKEDOC_SOURCE = makedoc.c xmalloc.c
 
 .c.o:
-	$(CC) -c $(CPPFLAGS) $(LDEFS) -I$(common) $(ALL_CFLAGS) $<
+	$(CC) -c $(CPPFLAGS) $(LDEFS) -I$(common) $(UGLY_ALL_CFLAGS) $<
 
 all: ../libinfo.a # info.info info-stnd.info
 .PHONY: all
 
 sub-all: all
 .PHONY: sub-all
 
 install: all
diff --git a/info/info.h b/info/info.h
--- a/info/info.h
+++ b/info/info.h
@@ -81,16 +81,17 @@ extern char *version_string ();
 #define CANT_FIND_POINT	"Point doesn't appear within this window's node!"
 #define CANT_KILL_LAST	"Cannot delete the last window."
 #define NO_MENU_NODE	"No menu in this node."
 #define NO_FOOT_NODE	"No footnotes in this node."
 #define NO_XREF_NODE	"No cross references in this node."
 #define NO_POINTER	"No \"%s\" pointer for this node."
 #define UNKNOWN_COMMAND	"Unknown Info command `%c'.  `?' for help."
 #define TERM_TOO_DUMB	"Terminal type \"%s\" is not smart enough to run Info."
+#define TERM_TOO_SMALL	"%d row by %d column terminal too small to run Info."
 #define AT_NODE_BOTTOM	"You are already at the last page of this node."
 #define AT_NODE_TOP	"You are already at the first page of this node."
 #define ONE_WINDOW	"Only one window."
 #define WIN_TOO_SMALL	"Resulting window would be too small."
 #define CANT_MAKE_HELP	\
 "There isn't enough room to make a help window.  Please delete a window."
 
 #endif /* !_INFO_H_ */
diff --git a/info/session.c b/info/session.c
--- a/info/session.c
+++ b/info/session.c
@@ -55,19 +55,19 @@ INFO_WINDOW **info_windows = (INFO_WINDO
 
 /* Where to add the next window, if we need to add one. */
 static int info_windows_index = 0;
 
 /* Number of slots allocated to INFO_WINDOWS. */
 static int info_windows_slots = 0;
 
 void remember_window_and_node (), forget_window_and_nodes ();
-void initialize_info_session (), info_session ();
-void display_startup_message_and_start ();
+void display_startup_message_and_start (), info_session ();
 void finish_info_session ();
+int initialize_info_session ();
 
 /* Begin an info session finding the nodes specified by FILENAME and NODENAMES.
    For each loaded node, create a new window.  Always split the largest of the
    available windows. */
 void
 begin_multiple_window_info_session (filename, nodenames)
      char *filename;
      char **nodenames;
@@ -253,51 +253,61 @@ info_read_and_dispatch ()
     }
 }
 
 /* Found in signals.c */
 extern void initialize_info_signal_handler ();
 
 /* Initialize the first info session by starting the terminal, window,
    and display systems. */
-void
+int
 initialize_info_session (node, clear_screen)
      NODE *node;
      int clear_screen;
 {
   char *getenv (), *term_name;
 
   term_name = getenv ("TERM");
   terminal_initialize_terminal (term_name);
 
   if (terminal_is_dumb_p)
     {
       if (!term_name)
 	term_name = "dumb";
 
       info_error (TERM_TOO_DUMB, term_name);
-      exit (1);
+      return -1;
     }
+
+  if (screenwidth < 4 || screenheight < 4)
+    {
+      info_error (TERM_TOO_SMALL, screenheight, screenwidth);
+      return -1;
+    }
+
   if (clear_screen)
     terminal_clear_screen ();
+
   initialize_info_keymaps ();
   window_initialize_windows (screenwidth, screenheight);
   initialize_info_signal_handler ();
   display_initialize_display (screenwidth, screenheight);
   info_set_node_of_window (active_window, node);
 
   /* Tell the window system how to notify us when a window needs to be
      asynchronously deleted (e.g., user resizes window very small). */
   window_deletion_notifier = forget_window_and_nodes;
 
   /* If input has not been redirected yet, make it come from STDIN. */
   if (!info_input_stream)
     info_input_stream = stdin;
 
   info_windows_initialized_p = 1;
+
+  return 0;
 }
 
 /* Tell Info that input is coming from the file FILENAME. */
 void
 info_set_input_from_file (filename)
      char *filename;
 {
   FILE *stream;
diff --git a/src/t-builtins.cc b/src/t-builtins.cc
--- a/src/t-builtins.cc
+++ b/src/t-builtins.cc
@@ -439,19 +439,19 @@ try_info (const char *string, int force 
 
   if (! initial_node)
     {
       warning ("can't find info file!\n");
       status = -1;
     }
   else
     {
-      initialize_info_session (initial_node, 0);
+      status = initialize_info_session (initial_node, 0);
 
-      if (force || index_entry_exists (windows, string))
+      if (status == 0 && (force || index_entry_exists (windows, string)))
 	{
 	  terminal_clear_screen ();
 
 	  terminal_prep_terminal ();
 
 	  display_update_display (windows);
 
 	  info_last_executed_command = (VFunction *)NULL;
