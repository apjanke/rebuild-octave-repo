# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363026792 14400
#      Mon Mar 11 14:33:12 2013 -0400
# Branch classdef
# Node ID 3c265e4dba6d3503988868e085520aa2b89932c7
# Parent  4cf2c4ae8df57c770a3a1497853a85d0c163f57d
# Parent  c5e5f6ccac5dbbbfee0619c46f0afbe23d35741e
maint: periodic merge of default to classdef

diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -46,18 +46,16 @@ object) relevant global values before an
 %s COMMAND_START
 %s MATRIX_START
 
 %x INPUT_FILE_START
 
 %x BLOCK_COMMENT_START
 %x LINE_COMMENT_START
 
-%x KLUGE
-
 %{
 
 #include <cctype>
 #include <cstring>
 
 #include <iostream>
 #include <set>
 #include <sstream>
@@ -248,22 +246,16 @@ ANY_INCLUDING_NL (.|{NL})
       {
         int tok = curr_lexer->previous_token_value ();
 
         if (! (tok == ';' || tok == '[' || tok == '{'))
           curr_lexer->xunput (';');
       }
   }
 
-<KLUGE>@ {
-    curr_lexer->lexer_debug ("<KLUGE>@");
-    curr_lexer->pop_start_state ();
-    return curr_lexer->count_token (CHOOSE_ASSIGNMENT);
-  }
-
 %{
 // For this and the next two rules, we're looking at ']', and we
 // need to know if the next token is '=' or '=='.
 //
 // It would have been so much easier if the delimiters were simply
 // different for the expression on the left hand side of the equals
 // operator.
 //
@@ -797,34 +789,34 @@ ANY_INCLUDING_NL (.|{NL})
         return curr_lexer->count_token_internal (retval);
       }
   }
 
 %{
 // Other operators.
 %}
 
-":"     { return curr_lexer->handle_op (":", ':'); }
-".+"    { return curr_lexer->handle_incompatible_op (".+", EPLUS); }
-".-"    { return curr_lexer->handle_incompatible_op (".-", EMINUS); }
-".*"    { return curr_lexer->handle_op (".*", EMUL); }
-"./"    { return curr_lexer->handle_op ("./", EDIV); }
-".\\"   { return curr_lexer->handle_op (".\\", ELEFTDIV); }
-".^"    { return curr_lexer->handle_op (".^", EPOW); }
-".**"   { return curr_lexer->handle_incompatible_op (".**", EPOW); }
-"<="    { return curr_lexer->handle_op ("<=", EXPR_LE); }
-"=="    { return curr_lexer->handle_op ("==", EXPR_EQ); }
-"~="    { return curr_lexer->handle_op ("~=", EXPR_NE); }
-"!="    { return curr_lexer->handle_incompatible_op ("!=", EXPR_NE); }
-">="    { return curr_lexer->handle_op (">=", EXPR_GE); }
-"&"     { return curr_lexer->handle_op ("&", EXPR_AND); }
-"|"     { return curr_lexer->handle_op ("|", EXPR_OR); }
-"<"     { return curr_lexer->handle_op ("<", EXPR_LT); }
-">"     { return curr_lexer->handle_op (">", EXPR_GT); }
-"*"     { return curr_lexer->handle_op ("*", '*'); }
+":"   { return curr_lexer->handle_op (":", ':'); }
+".+"  { return curr_lexer->handle_incompatible_op (".+", EPLUS); }
+".-"  { return curr_lexer->handle_incompatible_op (".-", EMINUS); }
+".*"  { return curr_lexer->handle_op (".*", EMUL); }
+"./"  { return curr_lexer->handle_op ("./", EDIV); }
+".\\" { return curr_lexer->handle_op (".\\", ELEFTDIV); }
+".^"  { return curr_lexer->handle_op (".^", EPOW); }
+".**" { return curr_lexer->handle_incompatible_op (".**", EPOW); }
+"<="  { return curr_lexer->handle_op ("<=", EXPR_LE); }
+"=="  { return curr_lexer->handle_op ("==", EXPR_EQ); }
+"~="  { return curr_lexer->handle_op ("~=", EXPR_NE); }
+"!="  { return curr_lexer->handle_incompatible_op ("!=", EXPR_NE); }
+">="  { return curr_lexer->handle_op (">=", EXPR_GE); }
+"&"   { return curr_lexer->handle_op ("&", EXPR_AND); }
+"|"   { return curr_lexer->handle_op ("|", EXPR_OR); }
+"<"   { return curr_lexer->handle_op ("<", EXPR_LT); }
+">"   { return curr_lexer->handle_op (">", EXPR_GT); }
+"*"   { return curr_lexer->handle_op ("*", '*'); }
 
 "/" {
     int prev_tok = curr_lexer->previous_token_value ();
     bool space_before = curr_lexer->space_follows_previous_token ();
     int c = curr_lexer->text_yyinput ();
     curr_lexer->xunput (c);
     bool space_after = (c == ' ' || c == '\t');
 
@@ -833,23 +825,23 @@ ANY_INCLUDING_NL (.|{NL})
       {
         yyless (0);
         curr_lexer->push_start_state (COMMAND_START);
       }
     else
       return curr_lexer->handle_op ("/", '/');
   }
 
-"\\"    { return curr_lexer->handle_op ("\\", LEFTDIV); }
-"^"     { return curr_lexer->handle_op ("^", POW); }
-"**"    { return curr_lexer->handle_incompatible_op ("**", POW); }
-"&&"    { return curr_lexer->handle_op ("&&", EXPR_AND_AND); }
-"||"    { return curr_lexer->handle_op ("||", EXPR_OR_OR); }
-"<<"    { return curr_lexer->handle_incompatible_op ("<<", LSHIFT); }
-">>"    { return curr_lexer->handle_incompatible_op (">>", RSHIFT); }
+"\\" { return curr_lexer->handle_op ("\\", LEFTDIV); }
+"^"  { return curr_lexer->handle_op ("^", POW); }
+"**" { return curr_lexer->handle_incompatible_op ("**", POW); }
+"&&" { return curr_lexer->handle_op ("&&", EXPR_AND_AND); }
+"||" { return curr_lexer->handle_op ("||", EXPR_OR_OR); }
+"<<" { return curr_lexer->handle_incompatible_op ("<<", LSHIFT); }
+">>" { return curr_lexer->handle_incompatible_op (">>", RSHIFT); }
 
 ";" {
     bool at_beginning_of_statement
       = (! (curr_lexer->whitespace_is_significant ()
             || curr_lexer->looking_at_object_index.front ()));
 
     return curr_lexer->handle_op (";", ';', true, at_beginning_of_statement);
   }
@@ -1025,243 +1017,35 @@ ANY_INCLUDING_NL (.|{NL})
 
     return curr_lexer->handle_token ('.');
   }
 
 %{
 // = and op= operators.
 %}
 
-"=" {
-    int tok = curr_lexer->handle_assign_op ("=", '=');
-    if (tok < 0)
-      {
-        yyless (0);
-        curr_lexer->xunput ('@');
-        curr_lexer->push_start_state (KLUGE);
-      }
-    else
-      return tok;
-  }
-
-"+=" {
-    int tok = curr_lexer->handle_incompatible_assign_op ("+=", ADD_EQ);
-    if (tok < 0)
-      {
-        yyless (0);
-        curr_lexer->xunput ('@');
-        curr_lexer->push_start_state (KLUGE);
-      }
-    else
-      return tok;
-  }
-
-"-=" {
-    int tok = curr_lexer->handle_incompatible_assign_op ("-=", SUB_EQ);
-    if (tok < 0)
-      {
-        yyless (0);
-        curr_lexer->xunput ('@');
-        curr_lexer->push_start_state (KLUGE);
-      }
-    else
-      return tok;
-  }
-
-"*=" {
-    int tok = curr_lexer->handle_incompatible_assign_op ("*=", MUL_EQ);
-    if (tok < 0)
-      {
-        yyless (0);
-        curr_lexer->xunput ('@');
-        curr_lexer->push_start_state (KLUGE);
-      }
-    else
-      return tok;
-  }
-
-"/=" {
-    int tok = curr_lexer->handle_incompatible_assign_op ("/=", DIV_EQ);
-    if (tok < 0)
-      {
-        yyless (0);
-        curr_lexer->xunput ('@');
-        curr_lexer->push_start_state (KLUGE);
-      }
-    else
-      return tok;
-  }
-
-"\\=" {
-    int tok = curr_lexer->handle_incompatible_assign_op ("\\=", LEFTDIV_EQ);
-    if (tok < 0)
-      {
-        yyless (0);
-        curr_lexer->xunput ('@');
-        curr_lexer->push_start_state (KLUGE);
-      }
-    else
-      return tok;
-  }
-
-".+=" {
-    int tok = curr_lexer->handle_incompatible_assign_op (".+=", ADD_EQ);
-    if (tok < 0)
-      {
-        yyless (0);
-        curr_lexer->xunput ('@');
-        curr_lexer->push_start_state (KLUGE);
-      }
-    else
-      return tok;
-  }
-
-".-=" {
-    int tok = curr_lexer->handle_incompatible_assign_op (".-=", SUB_EQ);
-    if (tok < 0)
-      {
-        yyless (0);
-        curr_lexer->xunput ('@');
-        curr_lexer->push_start_state (KLUGE);
-      }
-    else
-      return tok;
-  }
-
-".*=" {
-    int tok = curr_lexer->handle_incompatible_assign_op (".*=", EMUL_EQ);
-    if (tok < 0)
-      {
-        yyless (0);
-        curr_lexer->xunput ('@');
-        curr_lexer->push_start_state (KLUGE);
-      }
-    else
-      return tok;
-  }
-
-"./=" {
-    int tok = curr_lexer->handle_incompatible_assign_op ("./=", EDIV_EQ);
-    if (tok < 0)
-      {
-        yyless (0);
-        curr_lexer->xunput ('@');
-        curr_lexer->push_start_state (KLUGE);
-      }
-    else
-      return tok;
-  }
-
-".\\=" {
-    int tok = curr_lexer->handle_incompatible_assign_op (".\\=", ELEFTDIV_EQ);
-    if (tok < 0)
-      {
-        yyless (0);
-        curr_lexer->xunput ('@');
-        curr_lexer->push_start_state (KLUGE);
-      }
-    else
-      return tok;
-  }
-
-"^=" {
-    int tok = curr_lexer->handle_incompatible_assign_op ("^=", POW_EQ);
-    if (tok < 0)
-      {
-        yyless (0);
-        curr_lexer->xunput ('@');
-        curr_lexer->push_start_state (KLUGE);
-      }
-    else
-      return tok;
-  }
-
-"**=" {
-    int tok = curr_lexer->handle_incompatible_assign_op ("^=", POW_EQ);
-    if (tok < 0)
-      {
-        yyless (0);
-        curr_lexer->xunput ('@');
-        curr_lexer->push_start_state (KLUGE);
-      }
-    else
-      return tok;
-  }
-
-".^=" {
-    int tok = curr_lexer->handle_incompatible_assign_op (".^=", EPOW_EQ);
-    if (tok < 0)
-      {
-        yyless (0);
-        curr_lexer->xunput ('@');
-        curr_lexer->push_start_state (KLUGE);
-      }
-    else
-      return tok;
-  }
-
-".**=" {
-    int tok = curr_lexer->handle_incompatible_assign_op (".^=", EPOW_EQ);
-    if (tok < 0)
-      {
-        yyless (0);
-        curr_lexer->xunput ('@');
-        curr_lexer->push_start_state (KLUGE);
-      }
-    else
-      return tok;
-  }
-
-"&=" {
-    int tok = curr_lexer->handle_incompatible_assign_op ("&=", AND_EQ);
-    if (tok < 0)
-      {
-        yyless (0);
-        curr_lexer->xunput ('@');
-        curr_lexer->push_start_state (KLUGE);
-      }
-    else
-      return tok;
-  }
-
-"|=" {
-    int tok = curr_lexer->handle_incompatible_assign_op ("|=", OR_EQ);
-    if (tok < 0)
-      {
-        yyless (0);
-        curr_lexer->xunput ('@');
-        curr_lexer->push_start_state (KLUGE);
-      }
-    else
-      return tok;
-  }
-
-"<<=" {
-    int tok = curr_lexer->handle_incompatible_assign_op ("<<=", LSHIFT_EQ);
-    if (tok < 0)
-      {
-        yyless (0);
-        curr_lexer->xunput ('@');
-        curr_lexer->push_start_state (KLUGE);
-      }
-    else
-      return tok;
-  }
-
-">>=" {
-    int tok = curr_lexer->handle_incompatible_assign_op (">>=", RSHIFT_EQ);
-    if (tok < 0)
-      {
-        yyless (0);
-        curr_lexer->xunput ('@');
-        curr_lexer->push_start_state (KLUGE);
-      }
-    else
-      return tok;
-  }
+"="    { return curr_lexer->handle_op ("=", '='); }
+"+="   { return curr_lexer->handle_incompatible_op ("+=", ADD_EQ); }
+"-="   { return curr_lexer->handle_incompatible_op ("-=", SUB_EQ); }
+"*="   { return curr_lexer->handle_incompatible_op ("*=", MUL_EQ); }
+"/="   { return curr_lexer->handle_incompatible_op ("/=", DIV_EQ); }
+"\\="  { return curr_lexer->handle_incompatible_op ("\\=", LEFTDIV_EQ); }
+".+="  { return curr_lexer->handle_incompatible_op (".+=", ADD_EQ); }
+".-="  { return curr_lexer->handle_incompatible_op (".-=", SUB_EQ); }
+".*="  { return curr_lexer->handle_incompatible_op (".*=", EMUL_EQ); }
+"./="  { return curr_lexer->handle_incompatible_op ("./=", EDIV_EQ); }
+".\\=" { return curr_lexer->handle_incompatible_op (".\\=", ELEFTDIV_EQ); }
+"^="   { return curr_lexer->handle_incompatible_op ("^=", POW_EQ); }
+"**="  { return curr_lexer->handle_incompatible_op ("^=", POW_EQ); }
+".^="  { return curr_lexer->handle_incompatible_op (".^=", EPOW_EQ); }
+".**=" { return curr_lexer->handle_incompatible_op (".^=", EPOW_EQ); }
+"&="   { return curr_lexer->handle_incompatible_op ("&=", AND_EQ); }
+"|="   { return curr_lexer->handle_incompatible_op ("|=", OR_EQ); }
+"<<="  { return curr_lexer->handle_incompatible_op ("<<=", LSHIFT_EQ); }
+">>="  { return curr_lexer->handle_incompatible_op (">>=", RSHIFT_EQ); }
 
 "{" {
     curr_lexer->lexer_debug ("{");
 
     bool unput_comma = false;
 
     if (curr_lexer->whitespace_is_significant ()
         && curr_lexer->space_follows_previous_token ())
@@ -3036,58 +2820,16 @@ octave_lexer::handle_identifier (void)
         {
           current_input_column += flex_yyleng ();
           looking_for_object_index = false;
         }
 
       return kw_token;
     }
 
-  // See if we have a plot keyword (title, using, with, or clear).
-
-  int c1 = text_yyinput ();
-
-  bool next_tok_is_eq = false;
-  if (c1 == '=')
-    {
-      int c2 = text_yyinput ();
-      xunput (c2);
-
-      if (c2 != '=')
-        next_tok_is_eq = true;
-    }
-
-  xunput (c1);
-
-  // Kluge alert.
-  //
-  // If we are looking at a text style function, set up to gobble its
-  // arguments.
-  //
-  // If the following token is '=', or if we are parsing a function
-  // return list or function parameter list, or if we are looking at
-  // something like [ab,cd] = foo (), force the symbol to be inserted
-  // as a variable in the current symbol table.
-
-  if (! is_variable (tok))
-    {
-      if (next_tok_is_eq
-          || looking_at_decl_list
-          || looking_at_return_list
-          || (looking_at_parameter_list
-              && ! looking_at_initializer_expression))
-        {
-          symbol_table::force_variable (tok);
-        }
-      else if (looking_at_matrix_or_assign_lhs)
-        {
-          pending_local_variables.insert (tok);
-        }
-    }
-
   // Find the token in the symbol table.  Beware the magic
   // transformation of the end keyword...
 
   if (tok == "end")
     tok = "__end__";
 
   token *tok_val = new token (NAME, &(symbol_table::insert (tok)),
                               input_line_number, current_input_column);
@@ -3303,17 +3045,16 @@ octave_lexer::display_token (int tok)
     case TRY: std::cerr << "TRY\n"; break;
     case CATCH: std::cerr << "CATCH\n"; break;
     case GLOBAL: std::cerr << "GLOBAL\n"; break;
     case PERSISTENT: std::cerr << "PERSISTENT\n"; break;
     case FCN_HANDLE: std::cerr << "FCN_HANDLE\n"; break;
     case END_OF_INPUT: std::cerr << "END_OF_INPUT\n\n"; break;
     case LEXICAL_ERROR: std::cerr << "LEXICAL_ERROR\n\n"; break;
     case FCN: std::cerr << "FCN\n"; break;
-    case CHOOSE_ASSIGNMENT: std::cerr << "CHOOSE_ASSIGNMENT\n"; break;
     case INPUT_FILE: std::cerr << "INPUT_FILE\n"; break;
     case SUPERCLASSREF: std::cerr << "SUPERCLASSREF\n"; break;
     case METAQUERY: std::cerr << "METAQUERY\n"; break;
     case GET: std::cerr << "GET\n"; break;
     case SET: std::cerr << "SET\n"; break;
     case PROPERTIES: std::cerr << "PROPERTIES\n"; break;
     case METHODS: std::cerr << "METHODS\n"; break;
     case EVENTS: std::cerr << "EVENTS\n"; break;
@@ -3411,20 +3152,16 @@ octave_lexer::display_start_state (void)
     case BLOCK_COMMENT_START:
       std::cerr << "BLOCK_COMMENT_START" << std::endl;
       break;
 
     case LINE_COMMENT_START:
       std::cerr << "LINE_COMMENT_START" << std::endl;
       break;
 
-    case KLUGE:
-      std::cerr << "KLUGE" << std::endl;
-      break;
-
     default:
       std::cerr << "UNKNOWN START STATE!" << std::endl;
       break;
     }
 }
 
 int
 octave_lexer::handle_op (const char *pattern, int tok, bool convert,
@@ -3483,34 +3220,16 @@ octave_lexer::handle_incompatible_unary_
 {
   lexer_debug (pattern);
 
   return maybe_unput_comma_before_unary_op (tok)
     ? -1 : handle_op_internal (pattern, tok, convert, bos, qit, false);
 }
 
 int
-octave_lexer::handle_assign_op (const char *pattern, int tok)
-{
-  lexer_debug (pattern);
-
-  return (previous_token_value_is (']') && looking_at_matrix_or_assign_lhs)
-    ? -1 : handle_op_internal (pattern, tok, false, false, false, true);
-}
-
-int
-octave_lexer::handle_incompatible_assign_op (const char *pattern, int tok)
-{
-  lexer_debug (pattern);
-
-  return (previous_token_value_is (']') && looking_at_matrix_or_assign_lhs)
-    ? -1 : handle_op_internal (pattern, tok, false, false, false, false);
-}
-
-int
 octave_lexer::handle_op_internal (const char *pattern, int tok, bool convert,
                                   bool bos, bool qit, bool compat)
 {
   if (! compat)
     gripe_matlab_incompatible_operator (flex_yytext ());
 
   push_token (new token (tok, input_line_number, current_input_column));
 
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -248,17 +248,16 @@ make_statement (T *arg)
 %token <tok_val> METAQUERY
 %token <tok_val> SUPERCLASSREF
 %token <tok_val> GET SET
 
 // Other tokens.
 %token END_OF_INPUT LEXICAL_ERROR
 %token FCN INPUT_FILE
 // %token VARARGIN VARARGOUT
-%token CHOOSE_ASSIGNMENT
 
 // Nonterminals we construct.
 %type <comment_type> stash_comment function_beg
 %type <tok_type> classdef_beg
 %type <sep_type> sep_no_nl opt_sep_no_nl nl opt_nl sep opt_sep
 %type <tree_type> input
 %type <tree_constant_type> string constant magic_colon
 %type <tree_anon_fcn_handle_type> anon_fcn_handle
@@ -705,31 +704,29 @@ simple_expr     : colon_expr
                 | simple_expr EXPR_AND_AND simple_expr
                   { $$ = curr_parser.make_boolean_op (EXPR_AND_AND, $1, $2, $3); }
                 | simple_expr EXPR_OR_OR simple_expr
                   { $$ = curr_parser.make_boolean_op (EXPR_OR_OR, $1, $2, $3); }
                 ;
 
 assign_lhs      : simple_expr
                   {
-                    $$ = new tree_argument_list ($1);
-                    $$->mark_as_simple_assign_lhs ();
-                  }
-                | matrix CHOOSE_ASSIGNMENT
-                  {
-                    tree_matrix *tmp = dynamic_cast<tree_matrix *> ($1);
-                    $$ = tmp->front ();
-                    curr_lexer->looking_at_matrix_or_assign_lhs = false;
-                    for (std::set<std::string>::const_iterator p = curr_lexer->pending_local_variables.begin ();
-                         p != curr_lexer->pending_local_variables.end ();
-                         p++)
+                    $$ = curr_parser.validate_matrix_for_assignment ($1);
+
+                    if ($$)
                       {
-                        symbol_table::force_variable (*p);
+                        curr_lexer->looking_at_matrix_or_assign_lhs = false;
+                        curr_lexer->pending_local_variables.clear ();
                       }
-                    curr_lexer->pending_local_variables.clear ();
+                    else
+                      {
+                        // validate_matrix_for_assignment deleted $1
+                        // for us.
+                        ABORT_PARSE;
+                      }
                   }
                 ;
 
 assign_expr     : assign_lhs '=' expression
                   { $$ = curr_parser.make_assign_op ('=', $1, $2, $3); }
                 | assign_lhs ADD_EQ expression
                   { $$ = curr_parser.make_assign_op (ADD_EQ, $1, $2, $3); }
                 | assign_lhs SUB_EQ expression
@@ -756,17 +753,30 @@ assign_expr     : assign_lhs '=' express
                   { $$ = curr_parser.make_assign_op (EPOW_EQ, $1, $2, $3); }
                 | assign_lhs AND_EQ expression
                   { $$ = curr_parser.make_assign_op (AND_EQ, $1, $2, $3); }
                 | assign_lhs OR_EQ expression
                   { $$ = curr_parser.make_assign_op (OR_EQ, $1, $2, $3); }
                 ;
 
 expression      : simple_expr
-                  { $$ = $1; }
+                  {
+                    if ($1 && ($1->is_matrix () || $1->is_cell ()))
+                      {
+                        if (curr_parser.validate_array_list ($1))
+                          $$ = $1;
+                        else
+                          {
+                            delete $1;
+                            ABORT_PARSE;
+                          }
+                      }
+                    else
+                      $$ = $1;
+                  }
                 | assign_expr
                   { $$ = $1; }
                 | anon_fcn_handle
                   { $$ = $1; }
                 ;
 
 // ================================================
 // Commands, declarations, and function definitions
@@ -3191,22 +3201,74 @@ octave_parser::make_decl_command (int to
     default:
       panic_impossible ();
       break;
     }
 
   return retval;
 }
 
+bool
+octave_parser::validate_array_list (tree_expression *e)
+{
+  bool retval = true;
+
+  tree_array_list *al = dynamic_cast<tree_array_list *> (e);
+
+  for (tree_array_list::iterator i = al->begin (); i != al->end (); i++)
+    {
+      tree_argument_list *row = *i;
+
+      if (row && row->has_magic_tilde ())
+        {
+          retval = false;
+          if (e->is_matrix ())
+             bison_error ("invalid use of tilde (~) in matrix expression");
+           else
+             bison_error ("invalid use of tilde (~) in cell expression");
+          break;
+        }
+    }
+
+  return retval;
+}
+
 tree_argument_list *
-octave_parser::validate_matrix_row (tree_argument_list *row)
+octave_parser::validate_matrix_for_assignment (tree_expression *e)
 {
-  if (row && row->has_magic_tilde ())
-    bison_error ("invalid use of tilde (~) in matrix expression");
-  return row;
+  tree_argument_list *retval = 0;
+
+  if (e->is_constant ())
+    {
+      bison_error ("invalid empty LHS in [] = ... assignment");
+      delete e;
+    }
+  else if (e->is_matrix ())
+    {
+      tree_matrix *mat = dynamic_cast<tree_matrix *> (e);
+
+      if (mat && mat->size () == 1)
+        {
+          retval = mat->front ();
+          mat->pop_front ();
+          delete e;
+        }
+      else
+        {
+          bison_error ("invalid LHS in '[LHS] = ...' assignment");
+          delete e;
+        }
+    }
+  else
+    {
+      retval = new tree_argument_list (e);
+      retval->mark_as_simple_assign_lhs ();
+    }
+
+  return retval;
 }
 
 // Finish building an array_list.
 
 tree_expression *
 octave_parser::finish_array_list (tree_array_list *array_list)
 {
   tree_expression *retval = array_list;
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -377,18 +377,21 @@ public:
   // Make an indirect reference expression with dynamic field name.
   tree_index_expression *
   make_indirect_ref (tree_expression *expr, tree_expression *field);
 
   // Make a declaration command.
   tree_decl_command *
   make_decl_command (int tok, token *tok_val, tree_decl_init_list *lst);
 
-  // Validate argument list forming a matrix or cell row.
-  tree_argument_list *validate_matrix_row (tree_argument_list *row);
+  // Validate matrix or cell
+  bool validate_array_list (tree_expression *e);
+
+  // Validate matrix object used in "[lhs] = ..." assignments.
+  tree_argument_list *validate_matrix_for_assignment (tree_expression *e);
 
   // Finish building an array_list (common action for finish_matrix
   // and finish_cell).
   tree_expression *finish_array_list (tree_array_list *a);
 
   // Finish building a matrix list.
   tree_expression *finish_matrix (tree_matrix *m);
 
diff --git a/libinterp/parse-tree/pt-array-list.h b/libinterp/parse-tree/pt-array-list.h
--- a/libinterp/parse-tree/pt-array-list.h
+++ b/libinterp/parse-tree/pt-array-list.h
@@ -31,16 +31,19 @@ along with Octave; see the file COPYING.
 // Base class for cell arrays and matrices.
 
 class
 tree_array_list : public tree_expression,
                   public octave_base_list<tree_argument_list *>
 {
 public:
 
+  typedef octave_base_list<tree_argument_list *>::iterator iterator;
+  typedef octave_base_list<tree_argument_list *>::const_iterator const_iterator;
+
   tree_array_list (tree_argument_list *row = 0, int l = -1, int c = -1)
     : tree_expression (l, c), octave_base_list<tree_argument_list *> ()
   {
     if (row)
       append (row);
   }
 
   ~tree_array_list (void);
diff --git a/libinterp/parse-tree/pt-cell.h b/libinterp/parse-tree/pt-cell.h
--- a/libinterp/parse-tree/pt-cell.h
+++ b/libinterp/parse-tree/pt-cell.h
@@ -42,16 +42,18 @@ tree_cell : public tree_array_list
 public:
 
   tree_cell (tree_argument_list *row = 0, int l = -1, int c = -1)
     : tree_array_list (row, l, c)
   { }
 
   ~tree_cell (void) { }
 
+  bool is_cell (void) const { return true; }
+
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue1 (int nargout = 1);
 
   octave_value_list rvalue (int);
 
   tree_expression *dup (symbol_table::scope_id scope,
                         symbol_table::context_id context) const;
diff --git a/libinterp/parse-tree/pt-exp.h b/libinterp/parse-tree/pt-exp.h
--- a/libinterp/parse-tree/pt-exp.h
+++ b/libinterp/parse-tree/pt-exp.h
@@ -47,17 +47,19 @@ public:
 
   virtual bool has_magic_end (void) const = 0;
 
   virtual tree_expression *dup (symbol_table::scope_id,
                                 symbol_table::context_id context) const = 0;
 
   virtual bool is_constant (void) const { return false; }
 
-  virtual bool is_matrix_constant (void) const { return false; }
+  virtual bool is_matrix (void) const { return false; }
+
+  virtual bool is_cell (void) const { return false; }
 
   virtual bool is_identifier (void) const { return false; }
 
   virtual bool is_index_expression (void) const { return false; }
 
   virtual bool is_assignment_expression (void) const { return false; }
 
   virtual bool is_prefix_expression (void) const { return false; }
diff --git a/libinterp/parse-tree/pt-mat.h b/libinterp/parse-tree/pt-mat.h
--- a/libinterp/parse-tree/pt-mat.h
+++ b/libinterp/parse-tree/pt-mat.h
@@ -45,16 +45,18 @@ tree_matrix : public tree_array_list
 public:
 
   tree_matrix (tree_argument_list *row = 0, int l = -1, int c = -1)
     : tree_array_list (row, l, c)
   { }
 
   ~tree_matrix (void) { }
 
+  bool is_matrix (void) const { return true; }
+
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue1 (int nargout = 1);
 
   octave_value_list rvalue (int nargout);
 
   tree_expression *dup (symbol_table::scope_id scope,
                         symbol_table::context_id context) const;
