# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1470817680 -7200
#      Wed Aug 10 10:28:00 2016 +0200
# Node ID 54dc5062879e3d58161d82c62cec4480c9994552
# Parent  d6948923dc9b54506e99c19a39eccf8b236deb63
deblank.m: Matlab compatible behavior for empty input (bug #48725)

diff --git a/scripts/strings/deblank.m b/scripts/strings/deblank.m
--- a/scripts/strings/deblank.m
+++ b/scripts/strings/deblank.m
@@ -1,9 +1,9 @@
-## Copyright (C) 1996-2015 Kurt Hornik
+## Copyright (C) 1996-2016 Kurt Hornik
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -42,49 +42,61 @@
 ## Adapted-By: jwe
 
 function s = deblank (s)
 
   if (nargin != 1)
     print_usage ();
   endif
 
-  if (ischar (s))
+  if (isempty (s))
+
+    ## Return empty objects unchanged (Matlab compatibility)
+
+  elseif (ischar (s))
 
+    ## Find indices of non-whitespace characters.  If s is a
+    ## char matrix, the indices are in column major order.
     k = find (! isspace (s) & s != "\0");
-    if (isempty (s) || isempty (k))
+    if (isempty (k))
+      ## Even if s was a char matrix! (Matlab compatibility)
       s = "";
     else
       s = s(:,1:ceil (max (k) / rows (s)));
     endif
 
   elseif (iscell (s))
 
     char_idx = cellfun ("isclass", s, "char");
     cell_idx = cellfun ("isclass", s, "cell");
-    if (! all (char_idx | cell_idx))
+    empty_idx = cellfun ("isempty", s);
+    if (! all (char_idx | cell_idx | empty_idx))
       error ("deblank: S argument must be a string or cellstring");
     endif
 
     ## Divide work load.  Recursive cellfun deblank call is slow
     ## and avoided where possible.
     s(char_idx) = regexprep (s(char_idx), "[\\s\v\\0]+$", '');
     s(cell_idx) = cellfun ("deblank", s(cell_idx), "UniformOutput", false);
 
   else
     error ("deblank: S argument must be a string or cellstring");
   endif
 
 endfunction
 
 
 %!assert (deblank (" f o o \0"), " f o o")
+%!assert (deblank (" \t f o o \t \0"), " \t f o o")
+%!assert (deblank ([" abc   "; "   def   "]), [" abc  " ; "   def"])
+%!assert (deblank (["   "; "   "]), "")
 %!assert (deblank ('   '), '')
 %!assert (deblank ("   "), "")
 %!assert (deblank (""), "")
+%!assert (deblank ([]), [])
 %!assert (deblank ({}), {})
+%!assert (deblank ({[]}), {[]})
+%!assert (deblank ({[], []}), {[], []})
 %!assert (deblank ({" abc   ", {"   def   "}}), {" abc", {"   def"}})
 
 %!error <Invalid call to deblank> deblank ()
 %!error <Invalid call to deblank> deblank ("foo", "bar")
 %!error <argument must be a string> deblank (1)
-%!error <argument must be a string> deblank ({[]})
-
