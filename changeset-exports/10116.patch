# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1263552595 -3600
#      Fri Jan 15 11:49:55 2010 +0100
# Node ID fecebef27388ac05d0ce2ff20759e26176dc5168
# Parent  ed49cef7e005d213369bf65582a8589ae4998b36
improve concatenation code using templates instead of macros

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2010-01-15  Jaroslav Hajek  <highegg@gmail.com>
+
+	* pt-mat.cc (SINGLE_TYPE_CONCAT, DO_SINGLE_TYPE_CONCAT,
+	DO_SINGLE_TYPE_CONCAT_NO_MUTATE): Remove macros.
+	(single_type_concat, do_single_type_concat,
+	do_single_type_concat_no_mutate): New template funcs.
+	(tree_matrix::rvalue1): Call them here.
+
 2010-01-14  Jaroslav Hajek  <highegg@gmail.com>
 
 	* strfns.cc (do_strcmp_fun, 
 	strcmp_array_op, strcmp_str_op,
 	strcmpi_array_op, strcmpi_str_op,
 	strncmp_array_op, strncmp_str_op,
 	strncmpi_array_op, strncmpi_str_op): New functions.
 	(Fstrcmp, Fstrncmp): Reimplement using do_strcmp_fun.
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -719,76 +719,76 @@ tree_matrix::rvalue (int nargout)
 void
 maybe_warn_string_concat (bool all_dq_strings_p, bool all_sq_strings_p)
 {
   if (! (all_dq_strings_p || all_sq_strings_p))
     warning_with_id ("Octave:string-concat",
 		     "concatenation of different character string types may have unintended consequences");
 }
 
-#define SINGLE_TYPE_CONCAT(TYPE, EXTRACTOR) \
-  do \
-    { \
-      int dv_len = dv.length (); \
-      Array<octave_idx_type> ra_idx (dv_len > 1 ? dv_len : 2, 0); \
- \
-      for (tm_const::iterator p = tmp.begin (); p != tmp.end (); p++) \
-	{ \
-          OCTAVE_QUIT; \
- \
-	  tm_row_const row = *p; \
- \
-	  for (tm_row_const::iterator q = row.begin (); \
-	       q != row.end (); \
-	       q++) \
-	    { \
-	      OCTAVE_QUIT; \
- \
-	      TYPE ra = q->EXTRACTOR (); \
- \
-	      if (! error_state) \
-		{ \
-		  result.insert (ra, ra_idx); \
- \
-		  if (! error_state) \
-		    ra_idx(1) += ra.columns (); \
-		  else \
-		    goto done; \
-		} \
-	      else \
-		goto done; \
-	    } \
- \
-	  ra_idx(0) += row.rows (); \
-	  ra_idx(1) = 0; \
-	} \
-    } \
- while (0)
+template<class TYPE>
+static void 
+single_type_concat (TYPE& result,
+                    tm_const& tmp)
+{
+  octave_idx_type r = 0, c = 0;
+
+  for (tm_const::iterator p = tmp.begin (); p != tmp.end (); p++)
+    {
+      tm_row_const row = *p;
+
+      for (tm_row_const::iterator q = row.begin ();
+           q != row.end ();
+           q++)
+        {
+          OCTAVE_QUIT;
+
+          TYPE ra = octave_value_extract<TYPE> (*q);
+
+          if (! error_state)
+            {
+              result.insert (ra, r, c);
 
-#define DO_SINGLE_TYPE_CONCAT(TYPE, EXTRACTOR) \
-  do \
-    { \
-      TYPE result (dv); \
- \
-      SINGLE_TYPE_CONCAT (TYPE, EXTRACTOR); \
- \
-      retval = result; \
-    } \
-  while (0)
+              if (! error_state)
+                c += ra.columns ();
+              else
+                return;
+            }
+          else
+            return;
+        }
+
+      r += row.rows ();
+      c = 0;
+    }
+}
 
-#define DO_SINGLE_TYPE_CONCAT_NO_MUTATE(TYPE, EXTRACTOR, OV_TYPE) \
-  do \
-    { \
-      TYPE result (dv); \
- \
-      SINGLE_TYPE_CONCAT (TYPE, EXTRACTOR); \
- \
-      retval = octave_value (new OV_TYPE (result)); \
-    } \
-  while (0)
+template<class TYPE>
+static octave_value 
+do_single_type_concat (const dim_vector& dv,
+                       tm_const& tmp)
+{
+  TYPE result (dv);
+
+  single_type_concat (result, tmp);
+
+  return result;
+}
+
+template<class TYPE, class OV_TYPE>
+static octave_value 
+do_single_type_concat_no_mutate (const dim_vector& dv,
+                                 tm_const& tmp)
+{
+  TYPE result (dv);
+
+  single_type_concat (result, tmp);
+
+  return new OV_TYPE (result);
+}
 
 octave_value
 tree_matrix::rvalue1 (int)
 {
   octave_value retval = Matrix ();
 
   bool all_strings_p = false;
   bool all_sq_strings_p = false;
@@ -880,76 +880,73 @@ tree_matrix::rvalue1 (int)
 		::error ("cat not find overloaded vertcat function");
 	    }
 	}
       else if (result_type == "double")
 	{
 	  if (any_sparse_p)
 	    {	    
 	      if (all_real_p)
-		DO_SINGLE_TYPE_CONCAT (SparseMatrix, sparse_matrix_value);
+		retval = do_single_type_concat<SparseMatrix> (dv, tmp);
 	      else
-		DO_SINGLE_TYPE_CONCAT_NO_MUTATE (SparseComplexMatrix,
-						 sparse_complex_matrix_value,
-						 octave_sparse_complex_matrix);
+                retval = do_single_type_concat_no_mutate<SparseComplexMatrix,
+                                octave_sparse_complex_matrix> (dv, tmp);
 	    }
 	  else
 	    {
 	      if (all_real_p)
-		DO_SINGLE_TYPE_CONCAT (NDArray, array_value);
+		retval = do_single_type_concat<NDArray> (dv, tmp);
 	      else
-		DO_SINGLE_TYPE_CONCAT_NO_MUTATE (ComplexNDArray,
-						 complex_array_value,
-						 octave_complex_matrix);
+                retval = do_single_type_concat_no_mutate<ComplexNDArray,
+                                octave_complex_matrix> (dv, tmp);
 	    }
 	}
       else if (result_type == "single")
 	{
 	  if (all_real_p)
-	    DO_SINGLE_TYPE_CONCAT (FloatNDArray, float_array_value);
+	    retval = do_single_type_concat<FloatNDArray> (dv, tmp);
 	  else
-	    DO_SINGLE_TYPE_CONCAT_NO_MUTATE (FloatComplexNDArray,
-					     float_complex_array_value,
-					     octave_float_complex_matrix);
+            retval = do_single_type_concat_no_mutate<FloatComplexNDArray,
+                        octave_float_complex_matrix> (dv, tmp);
 	}
       else if (result_type == "char")
 	{
 	  char type = all_dq_strings_p ? '"' : '\'';
 
 	  maybe_warn_string_concat (all_dq_strings_p, all_sq_strings_p);
 
 	  charNDArray result (dv, Vstring_fill_char);
 
-	  SINGLE_TYPE_CONCAT (charNDArray, char_array_value);
+          single_type_concat (result, tmp);
 
 	  retval = octave_value (result, type);
 	}
       else if (result_type == "logical")
 	{
 	  if (any_sparse_p)
-	    DO_SINGLE_TYPE_CONCAT (SparseBoolMatrix, sparse_bool_matrix_value);
+	    retval = do_single_type_concat<SparseBoolMatrix> (dv, tmp);
 	  else
-	    DO_SINGLE_TYPE_CONCAT (boolNDArray, bool_array_value);
+	    retval = do_single_type_concat<boolNDArray> (dv, tmp);
 	}
       else if (result_type == "int8")
-	DO_SINGLE_TYPE_CONCAT (int8NDArray, int8_array_value);
+	retval = do_single_type_concat<int8NDArray> (dv, tmp);
       else if (result_type == "int16")
-	DO_SINGLE_TYPE_CONCAT (int16NDArray, int16_array_value);
+	retval = do_single_type_concat<int16NDArray> (dv, tmp);
       else if (result_type == "int32")
-	DO_SINGLE_TYPE_CONCAT (int32NDArray, int32_array_value);
+	retval = do_single_type_concat<int32NDArray> (dv, tmp);
       else if (result_type == "int64")
-	DO_SINGLE_TYPE_CONCAT (int64NDArray, int64_array_value);
+	retval = do_single_type_concat<int64NDArray> (dv, tmp);
       else if (result_type == "uint8")
-	DO_SINGLE_TYPE_CONCAT (uint8NDArray, uint8_array_value);
+	retval = do_single_type_concat<uint8NDArray> (dv, tmp);
       else if (result_type == "uint16")
-	DO_SINGLE_TYPE_CONCAT (uint16NDArray, uint16_array_value);
+	retval = do_single_type_concat<uint16NDArray> (dv, tmp);
       else if (result_type == "uint32")
-	DO_SINGLE_TYPE_CONCAT (uint32NDArray, uint32_array_value);
+	retval = do_single_type_concat<uint32NDArray> (dv, tmp);
       else if (result_type == "uint64")
-	DO_SINGLE_TYPE_CONCAT (uint64NDArray, uint64_array_value);
+	retval = do_single_type_concat<uint64NDArray> (dv, tmp);
       else
 	{
 	  // The line below might seem crazy, since we take a copy of
 	  // the first argument, resize it to be empty and then resize
 	  // it to be full. This is done since it means that there is
 	  // no recopying of data, as would happen if we used a single
 	  // resize.  It should be noted that resize operation is also
 	  // significantly slower than the do_cat_op function, so it
