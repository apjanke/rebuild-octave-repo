# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1495053064 14400
#      Wed May 17 16:31:04 2017 -0400
# Node ID 6a2fed2d39ac0067a76f56cca32c6c2e4dff40e6
# Parent  c6714ae1c06c74ba214fe0221627b38356b2a524
improve some function names

* ov-classdef.cc, ov-classdef.h, ov-fcn.h, pt-eval.cc: Rename
  is_postfix_index_handled to accepts_postfix_index.  Rename
  meta_is_postfix_index_handled to meta_accepts_postfix_index.  Change
  all uses.

* ov-fcn.h (octave_function::accepts_postfix_index): Don't accept '{'.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1026,18 +1026,18 @@ public:
     // Emulate ()-type meta subsref
 
     std::list<octave_value_list> l (1, idx);
     std::string type ("(");
 
     return subsref (type, l, nargout);
   }
 
-  bool is_postfix_index_handled (char type) const
-  { return object.meta_is_postfix_index_handled (type); }
+  bool accepts_postfix_index (char type) const
+  { return object.meta_accepts_postfix_index (type); }
 
   bool
   is_classdef_constructor (const std::string& cname = "") const
   {
     bool retval = false;
 
     if (object.is_class ())
       {
@@ -3305,17 +3305,17 @@ cdef_package::cdef_package_rep::meta_sub
 
             // NOTE: the case where the package query is the last
             // part of this subsref index is handled in the parse
             // tree, because there is some logic to handle magic
             // "end" that makes it impossible to execute the
             // function call at this stage.
 
             if (type.size () > 1
-                && ! fcn->is_postfix_index_handled (type[1]))
+                && ! fcn->accepts_postfix_index (type[1]))
               {
                 octave_value_list tmp_args;
 
                 retval = octave::feval (o, tmp_args, nargout);
               }
             else
               retval(0) = o;
 
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -544,17 +544,17 @@ public:
                 const std::list<octave_value_list>& /* idx */,
                 int /* nargout */)
   {
     error ("subsref: invalid meta object");
   }
 
   virtual void meta_release (void) { }
 
-  virtual bool meta_is_postfix_index_handled (char /* type */) const
+  virtual bool meta_accepts_postfix_index (char /* type */) const
   { return false; }
 
 protected:
   // Restricted copying!
   cdef_meta_object_rep (const cdef_meta_object_rep& obj)
     : handle_cdef_object (obj) { }
 
 private:
@@ -591,18 +591,18 @@ public:
 
   octave_value_list
   meta_subsref (const std::string& type,
                 const std::list<octave_value_list>& idx, int nargout)
   { return get_rep ()->meta_subsref (type, idx, nargout); }
 
   void meta_release (void) { get_rep ()->meta_release (); }
 
-  bool meta_is_postfix_index_handled (char type) const
-  { return get_rep ()->meta_is_postfix_index_handled (type); }
+  bool meta_accepts_postfix_index (char type) const
+  { return get_rep ()->meta_accepts_postfix_index (type); }
 
 private:
   cdef_meta_object_rep * get_rep (void)
   { return dynamic_cast<cdef_meta_object_rep *> (cdef_object::get_rep ()); }
 
   const cdef_meta_object_rep * get_rep (void) const
   { return dynamic_cast<const cdef_meta_object_rep *> (cdef_object::get_rep ()); }
 };
@@ -660,17 +660,17 @@ private:
     void delete_object (cdef_object obj);
 
     octave_value_list
     meta_subsref (const std::string& type,
                   const std::list<octave_value_list>& idx, int nargout);
 
     void meta_release (void);
 
-    bool meta_is_postfix_index_handled (char type) const
+    bool meta_accepts_postfix_index (char type) const
     { return (type == '(' || type == '.'); }
 
     octave_value construct (const octave_value_list& args);
 
     cdef_object construct_object (const octave_value_list& args);
 
     void initialize_object (cdef_object& obj);
 
@@ -1081,17 +1081,17 @@ private:
                                const std::string& who = "");
 
     bool is_constructor (void) const;
 
     octave_value_list
     meta_subsref (const std::string& type,
                   const std::list<octave_value_list>& idx, int nargout);
 
-    bool meta_is_postfix_index_handled (char type) const
+    bool meta_accepts_postfix_index (char type) const
     { return (type == '(' || type == '.'); }
 
   private:
     cdef_method_rep (const cdef_method_rep& m)
       : cdef_meta_object_rep (m), function (m.function),
         dispatch_type (m.dispatch_type)
     { }
 
@@ -1305,17 +1305,17 @@ private:
     }
 
     octave_value_list
     meta_subsref (const std::string& type,
                   const std::list<octave_value_list>& idx, int nargout);
 
     void meta_release (void);
 
-    bool meta_is_postfix_index_handled (char type) const
+    bool meta_accepts_postfix_index (char type) const
     { return (type == '.'); }
 
     octave_value find (const std::string& nm);
 
   private:
     std::string full_name;
     std::map<std::string, cdef_class> class_map;
     std::map<std::string, octave_value> function_map;
diff --git a/libinterp/octave-value/ov-fcn.h b/libinterp/octave-value/ov-fcn.h
--- a/libinterp/octave-value/ov-fcn.h
+++ b/libinterp/octave-value/ov-fcn.h
@@ -190,18 +190,18 @@ public:
   void document (const std::string& ds) { doc = ds; }
 
   std::string doc_string (void) const { return doc; }
 
   virtual void unload (void) { }
 
   virtual void accept (octave::tree_walker&) { }
 
-  virtual bool is_postfix_index_handled (char type) const
-  { return (type == '(' || type == '{'); }
+  virtual bool accepts_postfix_index (char type) const
+  { return (type == '('); }
 
   virtual octave_value_list
   call (int nargout = 0,
         const octave_value_list& args = octave_value_list ()) = 0;
 
 protected:
 
   octave_function (const std::string& nm,
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -972,17 +972,17 @@ namespace octave
         octave_function *fcn = nullptr;
 
         if (val.is_function ())
           fcn = val.function_value (true);
 
         int nargout = m_nargout_stack.top ();
 
         if (fcn && ! (expr.is_postfix_indexed ()
-                      && fcn->is_postfix_index_handled (expr.postfix_index ())))
+                      && fcn->accepts_postfix_index (expr.postfix_index ())))
           {
             retval = fcn->call (nargout);
           }
         else
           {
             if (expr.print_result () && nargout == 0
                 && octave::tree_evaluator::statement_printing_enabled ())
               {
@@ -1192,17 +1192,17 @@ namespace octave
 
                     if (tmp.is_cs_list ())
                       err_indexed_cs_list ();
 
                     if (tmp.is_function ())
                       {
                         octave_function *fcn = tmp.function_value (true);
 
-                        if (fcn && ! fcn->is_postfix_index_handled (type[i]))
+                        if (fcn && ! fcn->accepts_postfix_index (type[i]))
                           {
                             tmp_list = fcn->call (1);
 
                             tmp = (tmp_list.length ()
                                    ? tmp_list(0) : octave_value ());
 
                             if (tmp.is_cs_list ())
                               err_indexed_cs_list ();
@@ -1733,17 +1733,17 @@ namespace octave
         // The return object is a function.  We may need to re-index it
         // using the same logic as for identifier.  This is primarily
         // used for superclass references in classdef.
 
         octave_value val = retval(0);
         octave_function *f = val.function_value (true);
 
         if (f && ! (expr.is_postfix_indexed ()
-                    && f->is_postfix_index_handled (expr.postfix_index ())))
+                    && f->accepts_postfix_index (expr.postfix_index ())))
           {
             retval = f->call (nargout);
           }
       }
 
     m_value_stack.push (retval);
   }
 
