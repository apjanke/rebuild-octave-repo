# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1287691920 14400
#      Thu Oct 21 16:12:00 2010 -0400
# Node ID 0de5cc44e69068f9d7ac6705bcc3a47c1c7d22f7
# Parent  9cb5c0b7b43b386718442c6dc7c639c48567d2c8
use gripe functions for NaN to logical and NaN to character conversions more consistently

diff --git a/liboctave/Array-util.cc b/liboctave/Array-util.cc
--- a/liboctave/Array-util.cc
+++ b/liboctave/Array-util.cc
@@ -656,17 +656,25 @@ const char *error_id_nonconformant_args 
 
 const char *error_id_index_out_of_bounds = "Octave:index-out-of-bounds";
 
 const char *error_id_invalid_index = "Octave:invalid-index";
 
 void
 gripe_nan_to_logical_conversion (void)
 {
-  (*current_liboctave_error_handler) ("invalid conversion of NaN to logical");
+  (*current_liboctave_error_handler)
+    ("invalid conversion from NaN to logical");
+}
+
+void
+gripe_nan_to_character_conversion (void)
+{
+  (*current_liboctave_error_handler)
+    ("invalid conversion from NaN to character");
 }
 
 void
 gripe_nonconformant (const char *op, int op1_len, int op2_len)
 {
   const char *err_id = error_id_nonconformant_args;
 
   (*current_liboctave_error_with_id_handler)
diff --git a/liboctave/Array-util.h b/liboctave/Array-util.h
--- a/liboctave/Array-util.h
+++ b/liboctave/Array-util.h
@@ -107,16 +107,18 @@ extern int OCTAVE_API permute_vector_com
 extern OCTAVE_API const char *error_id_nonconformant_args;
 
 extern OCTAVE_API const char *error_id_index_out_of_bounds;
 
 extern OCTAVE_API const char *error_id_invalid_index;
 
 extern void OCTAVE_API gripe_nan_to_logical_conversion (void);
 
+extern void OCTAVE_API gripe_nan_to_character_conversion (void);
+
 extern void OCTAVE_API gripe_nonconformant (const char *op, int op1_len, int op2_len);
 
 extern void OCTAVE_API gripe_nonconformant (const char *op, int op1_nr, int op1_nc,
                                  int op2_nr, int op2_nc);
 
 
 extern void OCTAVE_API gripe_nonconformant (const char *op, const dim_vector& op1_dims,
                                             const dim_vector& op2_dims);
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2010-10-21  John W. Eaton  <jwe@octave.org>
+
+	* Array-util.cc (gripe_nan_to_character_conversion): New function.
+	* Array-util.h: Provide decl.
+
 2010-10-19  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.am (INCS): Add caseless-str.h to the list.
 
 2010-10-01  John W. Eaton  <jwe@octave.org>
 
 	* caseless-str.h: New file, extracted from src/graphics.h.in.
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2010-10-21  John W. Eaton  <jwe@octave.org>
+
+	* ov-float.cc, ov-flt-re-mat.cc, ov-re-mat.cc, ov-re-sparse.cc,
+	ov-scalar.cc: Use gripe_nan_to_character_conversion.
+
+	* ops.h, ov-base-mat.cc, ov-base-scalar.cc, ov-complex.h,
+	ov-cx-mat.cc, ov-cx-sparse.cc, ov-float.h, ov-flt-complex.h,
+	ov-flt-cx-mat.cc, ov-flt-re-mat.cc, ov-range.cc, ov-re-mat.cc,
+	ov-re-sparse.cc, ov-scalar.h: Use gripe_nan_to_logical_conversion.
+
 2010-10-20  John W. Eaton  <jwe@octave.org>
 
 	* toplev.cc (Fsystem): Allow optional RETURN_OUTPUT and TYPE
 	arguments to be specified independently.  Update doc string.
 
 2010-10-18  John W. Eaton  <jwe@octave.org>
 
 	* load-path.cc (load_path::do_find_first_of,
diff --git a/src/ops.h b/src/ops.h
--- a/src/ops.h
+++ b/src/ops.h
@@ -298,17 +298,17 @@ extern void install_ops (void);
   }
 
 #define DEFSCALARBOOLOP_OP(name, t1, t2, op) \
   BINOPDECL (name, a1, a2) \
   { \
     CAST_BINOP_ARGS (const CONCAT2(octave_, t1)&, const CONCAT2(octave_, t2)&); \
     if (xisnan (v1.CONCAT2(t1, _value) ()) || xisnan (v2.CONCAT2(t2, _value) ())) \
       { \
-        error ("invalid conversion from NaN to logical"); \
+        gripe_nan_to_logical_conversion (); \
         return octave_value (); \
       } \
     else \
       return octave_value \
         (v1.CONCAT2(t1, _value) () op v2.CONCAT2(t2, _value) ()); \
   }
 
 #define DEFNDBINOP_OP(name, t1, t2, e1, e2, op) \
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -408,17 +408,17 @@ octave_base_matrix<MT>::is_true (void) c
   dim_vector dv = matrix.dims ();
   int nel = dv.numel ();
 
   if (nel > 0)
     {
       MT t1 (matrix.reshape (dim_vector (nel, 1)));
 
       if (t1.any_element_is_nan ())
-        error ("invalid conversion from NaN to logical");
+        gripe_nan_to_logical_conversion ();
       else
         {
           boolNDArray t2 = t1.all ();
 
           retval = t2(0);
         }
     }
 
diff --git a/src/ov-base-scalar.cc b/src/ov-base-scalar.cc
--- a/src/ov-base-scalar.cc
+++ b/src/ov-base-scalar.cc
@@ -123,17 +123,17 @@ octave_base_scalar<ST>::diag (octave_idx
 
 template <class ST>
 bool
 octave_base_scalar<ST>::is_true (void) const
 {
   bool retval = false;
 
   if (xisnan (scalar))
-    error ("invalid conversion from NaN to logical");
+    gripe_nan_to_logical_conversion ();
   else
     retval = (scalar != ST ());
 
   return retval;
 }
 
 template <class ST>
 void
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -133,27 +133,27 @@ public:
 
   ComplexNDArray complex_array_value (bool = false) const;
 
   FloatComplexNDArray float_complex_array_value (bool = false) const;
 
   bool bool_value (bool warn = false) const
   {
     if (xisnan (scalar))
-      error ("invalid conversion from NaN to logical");
+      gripe_nan_to_logical_conversion ();
     else if (warn && scalar != 0.0 && scalar != 1.0)
       gripe_logical_conversion ();
 
     return scalar != 0.0;
   }
 
   boolNDArray bool_array_value (bool warn = false) const
   {
     if (xisnan (scalar))
-      error ("invalid conversion from NaN to logical");
+      gripe_nan_to_logical_conversion ();
     else if (warn && scalar != 0.0 && scalar != 1.0)
       gripe_logical_conversion ();
 
     return boolNDArray (dim_vector (1, 1), scalar != 0.0);
   }
 
   void increment (void) { scalar += 1.0; }
 
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -221,17 +221,17 @@ octave_complex_matrix::float_complex_mat
 {
   return FloatComplexMatrix (matrix.matrix_value ());
 }
 
 boolNDArray
 octave_complex_matrix::bool_array_value (bool warn) const
 {
   if (matrix.any_element_is_nan ())
-    error ("invalid conversion from NaN to logical");
+    gripe_nan_to_logical_conversion ();
   else if (warn && (! matrix.all_elements_are_real () 
                     || real (matrix).any_element_not_one_or_zero ()))
     gripe_logical_conversion ();
 
   return mx_el_ne (matrix, Complex (0.0));
 }
   
 charNDArray
diff --git a/src/ov-cx-sparse.cc b/src/ov-cx-sparse.cc
--- a/src/ov-cx-sparse.cc
+++ b/src/ov-cx-sparse.cc
@@ -210,17 +210,17 @@ octave_sparse_complex_matrix::sparse_mat
 
   return retval;
 }
 
 SparseBoolMatrix 
 octave_sparse_complex_matrix::sparse_bool_matrix_value (bool warn) const
 {
   if (matrix.any_element_is_nan ())
-    error ("invalid conversion from NaN to logical");
+    gripe_nan_to_logical_conversion ();
   else if (warn && (! matrix.all_elements_are_real () 
                     || real (matrix).any_element_not_one_or_zero ()))
     gripe_logical_conversion ();
 
   return mx_el_ne (matrix, Complex (0.0));
 }
 
 bool 
diff --git a/src/ov-float.cc b/src/ov-float.cc
--- a/src/ov-float.cc
+++ b/src/ov-float.cc
@@ -99,17 +99,17 @@ octave_float_scalar::resize (const dim_v
 }
 
 octave_value
 octave_float_scalar::convert_to_str_internal (bool, bool, char type) const
 {
   octave_value retval;
 
   if (xisnan (scalar))
-    ::error ("invalid conversion from NaN to character");
+    gripe_nan_to_character_conversion ();
   else
     {
       int ival = NINT (scalar);
 
       if (ival < 0 || ival > UCHAR_MAX)
         {
           // FIXME -- is there something better we could do?
 
diff --git a/src/ov-float.h b/src/ov-float.h
--- a/src/ov-float.h
+++ b/src/ov-float.h
@@ -190,27 +190,27 @@ public:
     charNDArray retval (dim_vector (1, 1));
     retval(0) = static_cast<char> (scalar);
     return retval;
   }
 
   bool bool_value (bool warn = false) const
   {
     if (xisnan (scalar))
-      error ("invalid conversion from NaN to logical");
+      gripe_nan_to_logical_conversion ();
     else if (warn && scalar != 0 && scalar != 1)
       gripe_logical_conversion ();
 
     return scalar;
   }
 
   boolNDArray bool_array_value (bool warn = false) const
   {
     if (xisnan (scalar))
-      error ("invalid conversion from NaN to logical");
+      gripe_nan_to_logical_conversion ();
     else if (warn && scalar != 0 && scalar != 1)
       gripe_logical_conversion ();
 
     return boolNDArray (dim_vector (1, 1), scalar);
   }
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
diff --git a/src/ov-flt-complex.h b/src/ov-flt-complex.h
--- a/src/ov-flt-complex.h
+++ b/src/ov-flt-complex.h
@@ -131,27 +131,27 @@ public:
 
   ComplexNDArray complex_array_value (bool = false) const;
 
   FloatComplexNDArray float_complex_array_value (bool = false) const;
 
   bool bool_value (bool warn = false) const
   {
     if (xisnan (scalar))
-      error ("invalid conversion from NaN to logical");
+      gripe_nan_to_logical_conversion ();
     else if (warn && scalar != 0.0f && scalar != 1.0f)
       gripe_logical_conversion ();
 
     return scalar != 0.0f;
   }
 
   boolNDArray bool_array_value (bool warn = false) const
   {
     if (xisnan (scalar))
-      error ("invalid conversion from NaN to logical");
+      gripe_nan_to_logical_conversion ();
     else if (warn && scalar != 0.0f && scalar != 1.0f)
       gripe_logical_conversion ();
 
     return boolNDArray (dim_vector (1, 1), scalar != 1.0f);
   }
 
   void increment (void) { scalar += 1.0; }
 
diff --git a/src/ov-flt-cx-mat.cc b/src/ov-flt-cx-mat.cc
--- a/src/ov-flt-cx-mat.cc
+++ b/src/ov-flt-cx-mat.cc
@@ -210,17 +210,17 @@ octave_float_complex_matrix::float_compl
 {
   return FloatComplexMatrix (matrix.matrix_value ());
 }
 
 boolNDArray
 octave_float_complex_matrix::bool_array_value (bool warn) const
 {
   if (matrix.any_element_is_nan ())
-    error ("invalid conversion from NaN to logical");
+    gripe_nan_to_logical_conversion ();
   else if (warn && (! matrix.all_elements_are_real () 
                     || real (matrix).any_element_not_one_or_zero ()))
     gripe_logical_conversion ();
 
   return mx_el_ne (matrix, FloatComplex (0.0));
 }
   
 charNDArray
diff --git a/src/ov-flt-re-mat.cc b/src/ov-flt-re-mat.cc
--- a/src/ov-flt-re-mat.cc
+++ b/src/ov-flt-re-mat.cc
@@ -211,17 +211,17 @@ octave_float_matrix::array_value (bool) 
 { 
   return NDArray (matrix); 
 }
 
 boolNDArray
 octave_float_matrix::bool_array_value (bool warn) const
 {
   if (matrix.any_element_is_nan ())
-    error ("invalid conversion from NaN to logical");
+    gripe_nan_to_logical_conversion ();
   else if (warn && matrix.any_element_not_one_or_zero ())
     gripe_logical_conversion ();
 
   return boolNDArray (matrix);
 }
   
 charNDArray
 octave_float_matrix::char_array_value (bool) const
@@ -278,17 +278,17 @@ octave_float_matrix::convert_to_str_inte
   for (octave_idx_type i = 0; i < nel; i++)
     {
       octave_quit ();
 
       float d = matrix (i);
 
       if (xisnan (d))
         {
-          ::error ("invalid conversion from NaN to character");
+          gripe_nan_to_character_conversion ();
           return retval;
         }
       else
         {
           int ival = NINT (d);
 
           if (ival < 0 || ival > UCHAR_MAX)
             {
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -312,17 +312,17 @@ octave_range::float_complex_value (bool)
 }
 
 boolNDArray
 octave_range::bool_array_value (bool warn) const
 {
   Matrix m = range.matrix_value ();
 
   if (m.any_element_is_nan ())
-    error ("invalid conversion from NaN to logical");
+    gripe_nan_to_logical_conversion ();
   else if (warn && m.any_element_not_one_or_zero ())
     gripe_logical_conversion ();
 
   return boolNDArray (m);
 }
 
 octave_value 
 octave_range::resize (const dim_vector& dv, bool fill) const
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -220,17 +220,17 @@ octave_matrix::float_complex_array_value
 {
   return FloatComplexNDArray (matrix);
 }
 
 boolNDArray
 octave_matrix::bool_array_value (bool warn) const
 {
   if (matrix.any_element_is_nan ())
-    error ("invalid conversion from NaN to logical");
+    gripe_nan_to_logical_conversion ();
   else if (warn && matrix.any_element_not_one_or_zero ())
     gripe_logical_conversion ();
 
   return boolNDArray (matrix);
 }
   
 charNDArray
 octave_matrix::char_array_value (bool) const
@@ -380,17 +380,17 @@ octave_matrix::convert_to_str_internal (
   for (octave_idx_type i = 0; i < nel; i++)
     {
       octave_quit ();
 
       double d = matrix (i);
 
       if (xisnan (d))
         {
-          ::error ("invalid conversion from NaN to character");
+          gripe_nan_to_character_conversion ();
           return retval;
         }
       else
         {
           int ival = NINT (d);
 
           if (ival < 0 || ival > UCHAR_MAX)
             {
diff --git a/src/ov-re-sparse.cc b/src/ov-re-sparse.cc
--- a/src/ov-re-sparse.cc
+++ b/src/ov-re-sparse.cc
@@ -140,17 +140,17 @@ octave_sparse_matrix::matrix_value (bool
 }
 
 boolNDArray
 octave_sparse_matrix::bool_array_value (bool warn) const
 {
   NDArray m = matrix.matrix_value ();
 
   if (m.any_element_is_nan ())
-    error ("invalid conversion from NaN to logical");
+    gripe_nan_to_logical_conversion ();
   else if (warn && m.any_element_not_one_or_zero ())
     gripe_logical_conversion ();
 
   return boolNDArray (m);
 }
 
 charNDArray
 octave_sparse_matrix::char_array_value (bool) const
@@ -183,17 +183,17 @@ octave_sparse_matrix::array_value (bool)
 {
   return NDArray (matrix.matrix_value ());
 }
 
 SparseBoolMatrix 
 octave_sparse_matrix::sparse_bool_matrix_value (bool warn) const
 {
   if (matrix.any_element_is_nan ())
-    error ("invalid conversion from NaN to logical");
+    gripe_nan_to_logical_conversion ();
   else if (warn && matrix.any_element_not_one_or_zero ())
     gripe_logical_conversion ();
 
   return mx_el_ne (matrix, 0.0);
 }
 
 octave_value
 octave_sparse_matrix::convert_to_str_internal (bool, bool, char type) const
@@ -220,17 +220,17 @@ octave_sparse_matrix::convert_to_str_int
              i < matrix.cidx(j+1); i++)
           {
             octave_quit ();
 
             double d = matrix.data (i);
 
               if (xisnan (d))
                 {
-                  ::error ("invalid conversion from NaN to character");
+                  gripe_nan_to_character_conversion ();
                   return retval;
                 }
               else
                 {
                   int ival = NINT (d);
 
                   if (ival < 0 || ival > UCHAR_MAX)
                     {
diff --git a/src/ov-scalar.cc b/src/ov-scalar.cc
--- a/src/ov-scalar.cc
+++ b/src/ov-scalar.cc
@@ -114,17 +114,17 @@ octave_scalar::resize (const dim_vector&
 }
 
 octave_value
 octave_scalar::convert_to_str_internal (bool, bool, char type) const
 {
   octave_value retval;
 
   if (xisnan (scalar))
-    ::error ("invalid conversion from NaN to character");
+    gripe_nan_to_character_conversion ();
   else
     {
       int ival = NINT (scalar);
 
       if (ival < 0 || ival > UCHAR_MAX)
         {
           // FIXME -- is there something better we could do?
 
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -191,27 +191,27 @@ public:
     charNDArray retval (dim_vector (1, 1));
     retval(0) = static_cast<char> (scalar);
     return retval;
   }
 
   bool bool_value (bool warn = false) const
   {
     if (xisnan (scalar))
-      error ("invalid conversion from NaN to logical");
+      gripe_nan_to_logical_conversion ();
     else if (warn && scalar != 0 && scalar != 1)
       gripe_logical_conversion ();
 
     return scalar;
   }
 
   boolNDArray bool_array_value (bool warn = false) const
   {
     if (xisnan (scalar))
-      error ("invalid conversion from NaN to logical");
+      gripe_nan_to_logical_conversion ();
     else if (warn && scalar != 0 && scalar != 1)
       gripe_logical_conversion ();
 
     return boolNDArray (dim_vector (1, 1), scalar);
   }
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
