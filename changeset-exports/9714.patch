# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1255341012 -7200
#      Mon Oct 12 11:50:12 2009 +0200
# Node ID 0407883e1a330fcab1e8ca612ccca41a7ea1c8bb
# Parent  7918eb15040c8e44aad6596fc284e52448125390
support nocompute option to matrix_type

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-10-12  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/matrix_type.cc (Fmatrix_type): Support 'nocompute'
+	option.
+
 2009-10-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/lu.cc (Fluupdate): New DEFUN_DLD.
 	(check_lu_dims): New helper func.
 
 2009-10-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* data.cc (Flength): Simplify.
diff --git a/src/DLD-FUNCTIONS/matrix_type.cc b/src/DLD-FUNCTIONS/matrix_type.cc
--- a/src/DLD-FUNCTIONS/matrix_type.cc
+++ b/src/DLD-FUNCTIONS/matrix_type.cc
@@ -34,26 +34,30 @@ along with Octave; see the file COPYING.
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 #include "MatrixType.h"
 #include "oct-locbuf.h"
 
 DEFUN_DLD (matrix_type, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{type} =} matrix_type (@var{a})\n\
+@deftypefnx {Loadable Function} {@var{type} =} matrix_type (@var{a}, 'nocompute')\n\
 @deftypefnx {Loadable Function} {@var{a} =} matrix_type (@var{a}, @var{type})\n\
 @deftypefnx {Loadable Function} {@var{a} =} matrix_type (@var{a}, 'upper', @var{perm})\n\
 @deftypefnx {Loadable Function} {@var{a} =} matrix_type (@var{a}, 'lower', @var{perm})\n\
 @deftypefnx {Loadable Function} {@var{a} =} matrix_type (@var{a}, 'banded', @var{nl}, @var{nu})\n\
 Identify the matrix type or mark a matrix as a particular type.  This allows rapid\n\
 for solutions of linear equations involving @var{a} to be performed.  Called with a\n\
 single argument, @code{matrix_type} returns the type of the matrix and caches it for\n\
 future use.  Called with more than one argument, @code{matrix_type} allows the type\n\
 of the matrix to be defined.\n\
 \n\
+If the option 'nocompute' is given, the function will not attempt to guess the type if it is\n\
+still unknown. This is useful for debugging purposes.\n\
+\n\
 The possible matrix types depend on whether the matrix is full or sparse, and can be\n\
 one of the following\n\
 \n\
 @table @asis\n\
 @item 'unknown'\n\
 Remove any previously cached matrix type, and mark type as unknown\n\
 \n\
 @item 'full'\n\
@@ -112,49 +116,56 @@ classification of the matrix.\n\
   octave_value retval;
 
   if (nargin == 0)
     print_usage ();
   else if (nargin > 4)
     error ("matrix_type: incorrect number of arguments");
   else
     {
+      bool autocomp = true;
+      if (nargin == 2 && args(1).is_string () && args(1).string_value () == "nocompute")
+        {
+          nargin = 1;
+          autocomp = false;
+        }
+
       if (args(0).is_scalar_type())
 	{
 	  if (nargin == 1)
-	    retval = octave_value ("Full");
+	    retval = octave_value ("Diagonal");
 	  else
 	    retval = args(0);
 	}
       else if (args(0).is_sparse_type ())
 	{
 	  if (nargin == 1)
 	    {
 	      MatrixType mattyp;
 
 	      if (args(0).is_complex_type ()) 
 		{
 		  mattyp = args(0).matrix_type ();
 
-		  if (mattyp.is_unknown ())
+		  if (mattyp.is_unknown () && autocomp )
 		    {
 		      SparseComplexMatrix m = 
 			args(0).sparse_complex_matrix_value ();
 		      if (!error_state)
 			{
 			  mattyp = MatrixType (m);
 			  args(0).matrix_type (mattyp);
 			}
 		    }
 		}
 	      else
 		{
 		  mattyp = args(0).matrix_type ();
 
-		  if (mattyp.is_unknown ())
+		  if (mattyp.is_unknown () && autocomp)
 		    {
 		      SparseMatrix m = args(0).sparse_matrix_value ();
 		      if (!error_state)
 			{
 			  mattyp = MatrixType (m);
 			  args(0).matrix_type (mattyp);
 			}
 		    }
@@ -189,17 +200,16 @@ classification of the matrix.\n\
 		  if (args(0).rows() == args(0).columns())
 		    retval = octave_value ("Singular");
 		  else
 		    retval = octave_value ("Rectangular");
 		}
 	      else if (typ == MatrixType::Full)
 		retval = octave_value ("Full");
 	      else
-		// This should never happen!!!
 		retval = octave_value ("Unknown");
 	    }
 	  else
 	    {
 	      // Ok, we're changing the matrix type
 	      std::string str_typ = args(1).string_value ();
 
 	      // FIXME -- why do I have to explicitly call the constructor?
@@ -315,17 +325,17 @@ classification of the matrix.\n\
 	  if (nargin == 1)
 	    {
 	      MatrixType mattyp;
 
 	      if (args(0).is_complex_type ())
 		{
 		  mattyp = args(0).matrix_type ();
 
-		  if (mattyp.is_unknown ())
+		  if (mattyp.is_unknown () && autocomp)
 		    {
 		      if (args(0).is_single_type ())
 			{
 			  FloatComplexMatrix m = args(0).float_complex_matrix_value ();
 			  if (!error_state)
 			    {
 			      mattyp = MatrixType (m);
 			      args(0).matrix_type (mattyp);
@@ -341,17 +351,17 @@ classification of the matrix.\n\
 			    }
 			}
 		    }
 		}
 	      else
 		{
 		  mattyp = args(0).matrix_type ();
 
-		  if (mattyp.is_unknown ())
+		  if (mattyp.is_unknown () && autocomp)
 		    {
 		      if (args(0).is_single_type ())
 			{
 			  FloatMatrix m = args(0).float_matrix_value ();
 			  if (!error_state)
 			    {
 			      mattyp = MatrixType (m);
 			      args(0).matrix_type (mattyp);
@@ -386,17 +396,16 @@ classification of the matrix.\n\
 		  if (args(0).rows() == args(0).columns())
 		    retval = octave_value ("Singular");
 		  else
 		    retval = octave_value ("Rectangular");
 		}
 	      else if (typ == MatrixType::Full)
 		retval = octave_value ("Full");
 	      else
-		// This should never happen!!!
 		retval = octave_value ("Unknown");
 	    }
 	  else
 	    {
 	      // Ok, we're changing the matrix type
 	      std::string str_typ = args(1).string_value ();
 
 	      // FIXME -- why do I have to explicitly call the constructor?
