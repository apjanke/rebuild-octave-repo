# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1244521990 -7200
#      Tue Jun 09 06:33:10 2009 +0200
# Branch release-3-2-x
# Node ID 28d4a6acbf0ace4a41f48563d3c0310991706984
# Parent  5b967e2c319a7a6367f2ee6cf8fa67182b99142b
properly clear global variables

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-06-08  Jaroslav Hajek  <highegg@gmail.com>
+
+	* symtab.h (symbol_table::do_clear_global,
+	symbol_table::do_clear_global_pattern): Properly erase from both local
+	and global table.
+
 2009-06-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* variables.cc (Fclear): Clear also globals when called without
 	arguments.
 
 2009-06-07  Jaroslav Hajek  <highegg@gmail.com>
 
 	* graphics.cc (color_property::do_set): Allow a wider range of types.
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -2138,25 +2138,24 @@ private:
   {
     table_iterator p = table.find (name);
 
     if (p != table.end ())
       {
 	symbol_record& sr = p->second;
 
 	if (sr.is_global ())
-	  {
-	    global_table_iterator q = global_table.find (name);
-
-	    if (q != global_table.end ())
-	      global_table.erase (q);
-
-	    sr.unmark_global ();
-	  }
+          sr.unmark_global ();
       }
+
+    global_table_iterator q = global_table.find (name);
+
+    if (q != global_table.end ())
+      global_table.erase (q);
+
   }
 
   void do_clear_variable (const std::string& name)
   {
     table_iterator p = table.find (name);
 
     if (p != table.end ())
       p->second.clear ();
@@ -2165,29 +2164,28 @@ private:
   void do_clear_global_pattern (const std::string& pat)
   {
     glob_match pattern (pat);
 
     for (table_iterator p = table.begin (); p != table.end (); p++)
       {
 	symbol_record& sr = p->second;
 
-	if (sr.is_global ())
-	  {
-	    if (pattern.match (sr.name ()))
-	      {
-		global_table_iterator q = global_table.find (sr.name ());
-
-		if (q != global_table.end ())
-		  global_table.erase (q);
-
-		sr.unmark_global ();
-	      }
-	  }
+	if (sr.is_global () && pattern.match (sr.name ()))
+          sr.unmark_global ();
       }
+
+    for (global_table_iterator q = global_table.begin (); 
+         q != global_table.end (); q++)
+      {
+	if (pattern.match (q->first))
+          global_table.erase (q);
+      }
+
+
   }
 
   void do_clear_variable_pattern (const std::string& pat)
   {
     glob_match pattern (pat);
 
     for (table_iterator p = table.begin (); p != table.end (); p++)
       {
