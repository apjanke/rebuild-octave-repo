# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1232402010 18000
#      Mon Jan 19 16:53:30 2009 -0500
# Node ID 75e6ab1867610020d56acfd8f9cc7a84d9ad31c5
# Parent  0eb83938c8bc97f8657d7a4de1a88f10bcbc8b6e
lexer debugging functions

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2009-01-19  John W. Eaton  <jwe@octave.org>
+
+	* lex.l (lexer_debug_flag): New static variable.
+	(F__lexer_debug_flag__): New function.
+	(LEXER_DEBUG): New macro.  Use it in all patterns.
+	(DISPLAY_TOK_AND_RETURN): Also display token if lexer_debug_flag
+	is set.
+	(process_comment): Display comment if lexer_debug_flag is set.
+	(display_character, display_state, lexer_debug): New static functions.
+	(xunput): Display character if lexer_debug_flag is set.
+
 2009-01-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov.h: Describe usage of storable_value and make_storable_value.
 	* ov.cc: Remove FIXME comment.
 
 2009-01-15  John W. Eaton  <jwe@octave.org>
 
 	* data.cc (Freshape): Include mismatched dimensions in error message.
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -113,16 +113,22 @@ along with Octave; see the file COPYING.
   while (0)
 
 #define DISPLAY_TOK_AND_RETURN(tok) \
   do \
     { \
       int tok_val = tok; \
       if (Vdisplay_tokens) \
         display_token (tok_val); \
+      if (lexer_debug_flag) \
+        { \
+	  std::cerr << "R: "; \
+          display_token (tok_val); \
+	  std::cerr << std::endl;  \
+	} \
       return tok_val; \
     } \
   while (0)
 
 #define COUNT_TOK_AND_RETURN(tok) \
   do \
     { \
       Vtoken_count++; \
@@ -165,16 +171,24 @@ along with Octave; see the file COPYING.
 #define XBIN_OP_RETURN(tok, convert) \
   do \
     { \
 	gripe_matlab_incompatible_operator (yytext); \
         BIN_OP_RETURN (tok, convert); \
     } \
   while (0)
 
+#define LEXER_DEBUG(pattern) \
+  do \
+    { \
+      if (lexer_debug_flag) \
+        lexer_debug (pattern, yytext); \
+    } \
+  while (0)
+
 // TRUE means that we have encountered EOF on the input stream.
 bool parser_end_of_input = false;
 
 // Flags that need to be shared between the lexer and parser.
 lexical_feedback lexer_flags;
 
 // Stack to hold tokens so that we can delete them when the parser is
 // reset and avoid growing forever just because we are stashing some
@@ -248,16 +262,19 @@ static bracket_brace_paren_nesting_level
 static bool Vdisplay_tokens = false;
 
 static unsigned int Vtoken_count = 0;
 
 // The start state that was in effect when the beginning of a block
 // comment was noticed.
 static int block_comment_nesting_level = 0;
 
+// Internal variable for lexer debugging state.
+static bool lexer_debug_flag = false;
+
 // Forward declarations for functions defined at the bottom of this
 // file.
 
 static int text_yyinput (void);
 static void xunput (char c, char *buf);
 static void fixup_column_count (char *s);
 static void do_comma_insert_check (void);
 static int is_keyword_token (const std::string& s);
@@ -280,16 +297,17 @@ static yum_yum eat_whitespace (void);
 static yum_yum eat_continuation (void);
 static void maybe_warn_separator_insert (char sep);
 static void gripe_single_quote_string (void);
 static void gripe_matlab_incompatible (const std::string& msg);
 static void maybe_gripe_matlab_incompatible_comment (char c);
 static void gripe_matlab_incompatible_continuation (void);
 static void gripe_matlab_incompatible_operator (const std::string& op);
 static void display_token (int tok);
+static void lexer_debug (const char *pattern, const char *text);
 
 %}
 
 D	[0-9]
 S	[ \t]
 NL	((\n)|(\r)|(\r\n))
 SNL	({S}|{NL})
 EL	(\.\.\.)
@@ -303,69 +321,83 @@ NOT	((\~)|(\!))
 POW     ((\*\*)|(\^))
 EPOW    (\.{POW})
 IDENT	([_$a-zA-Z][_$a-zA-Z0-9]*)
 EXPON	([DdEe][+-]?{D}+)
 NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EXPON}?)|(0[xX][0-9a-fA-F]+))
 %%
 
 <SCRIPT_FILE_BEGIN>. {
+    LEXER_DEBUG ("<SCRIPT_FILE_BEGIN>.");
+
     BEGIN (INITIAL);
     xunput (yytext[0], yytext);
     COUNT_TOK_AND_RETURN (SCRIPT);
   }
 
 <NESTED_FUNCTION_END>. {
+    LEXER_DEBUG ("<NESTED_FUNCTION_END>.");
+
     BEGIN (NESTED_FUNCTION_BEGIN);
     xunput (yytext[0], yytext);
     COUNT_TOK_AND_RETURN (';');
   }
 
 <NESTED_FUNCTION_BEGIN>. {
+    LEXER_DEBUG ("<NESTED_FUNCTION_BEGIN>.");
+
     BEGIN (INITIAL);
     xunput (yytext[0], yytext);
     prep_for_nested_function ();
     COUNT_TOK_AND_RETURN (FCN);
   }
 
 %{
 // Help and other command-style functions are a pain in the ass.  This
 // stuff needs to be simplified.  May require some changes in the
 // parser too.
 %}
 
 <COMMAND_START>{NL} {
+    LEXER_DEBUG ("<COMMAND_START>{NL}");
+
     BEGIN (INITIAL);
     input_line_number++;
     current_input_column = 1;
     lexer_flags.quote_is_transpose = false;
     lexer_flags.convert_spaces_to_comma = true;
     lexer_flags.doing_rawcommand = false;
     COUNT_TOK_AND_RETURN ('\n');
   }
 
 <COMMAND_START>[\;\,] {
+    LEXER_DEBUG ("<COMMAND_START>[\\;\\,]");
+
     if (lexer_flags.doing_rawcommand)
       TOK_PUSH_AND_RETURN (yytext, SQ_STRING);
 
     BEGIN (INITIAL);
 
     if (strcmp (yytext, ",") == 0)
       TOK_RETURN (',');
     else
       TOK_RETURN (';');
   }
 
 <COMMAND_START>[\"\'] {
+    LEXER_DEBUG ("<COMMAND_START>[\\\"\\']");
+
     current_input_column++;
     int tok = handle_string (yytext[0], true);
     COUNT_TOK_AND_RETURN (tok);
   }
 
 <COMMAND_START>[^#% \t\r\n\;\,\"\'][^ \t\r\n\;\,]*{S}* {
+    LEXER_DEBUG ("<COMMAND_START>[^#% \\t\\r\\n\\;\\,\\\"\\'][^ \\t\\r\\n\\;\\,]*{S}*");
+
     std::string tok = strip_trailing_whitespace (yytext);
     TOK_PUSH_AND_RETURN (tok, SQ_STRING);
   }
 
 %{
 // For this and the next two rules, we're looking at ']', and we
 // need to know if the next token is `=' or `=='.
 //
@@ -375,32 +407,36 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 //
 // It's also a pain in the ass to decide whether to insert a comma
 // after seeing a ']' character...
 
 // FIXME -- we need to handle block comments here.
 %}
 
 <MATRIX_START>{SNLCMT}*\]{S}* {
+    LEXER_DEBUG ("<MATRIX_START>{SNLCMT}*\\]{S}*");
+
     scan_for_comments (yytext);
     fixup_column_count (yytext);
     int c = yytext[yyleng-1];
     int cont_is_spc = eat_continuation ();
     bool spc_gobbled = (cont_is_spc || c == ' ' || c == '\t');
     int tok_to_return = handle_close_bracket (spc_gobbled, ']');
     if (spc_gobbled)
       yyunput (' ', yytext);
     COUNT_TOK_AND_RETURN (tok_to_return);
   }
 
 %{
 // FIXME -- we need to handle block comments here.
 %}
 
 <MATRIX_START>{SNLCMT}*\}{S}* {
+    LEXER_DEBUG ("<MATRIX_START>{SNLCMT}*\\}{S}*");
+
     scan_for_comments (yytext);
     fixup_column_count (yytext);
     int c = yytext[yyleng-1];
     int cont_is_spc = eat_continuation ();
     bool spc_gobbled = (cont_is_spc || c == ' ' || c == '\t');
     int tok_to_return = handle_close_bracket (spc_gobbled, '}');
     if (spc_gobbled)
       yyunput (' ', yytext);
@@ -409,16 +445,18 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 
 %{
 // Commas are element separators in matrix constants.  If we don't
 // check for continuations here we can end up inserting too many
 // commas.
 %}
 
 <MATRIX_START>{S}*\,{S}* {
+    LEXER_DEBUG ("<MATRIX_START>{S}*\\,{S}*");
+
     current_input_column += yyleng;
 
     int tmp = eat_continuation ();
 
     lexer_flags.quote_is_transpose = false;
     lexer_flags.convert_spaces_to_comma = true;
 
     if ((tmp & ATE_NEWLINE) == ATE_NEWLINE)
@@ -434,16 +472,18 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 %{
 // In some cases, spaces in matrix constants can turn into commas.
 // If commas are required, spaces are not important in matrix
 // constants so we just eat them.  If we don't check for continuations
 // here we can end up inserting too many commas.
 %}
 
 <MATRIX_START>{S}+ {
+    LEXER_DEBUG ("<MATRIX_START>{S}+");
+
     current_input_column += yyleng;
 
     int tmp = eat_continuation ();
     bool bin_op = next_token_is_bin_op (true);
     bool postfix_un_op = next_token_is_postfix_unary_op (true);
     bool sep_op = next_token_is_sep_op ();
 
     if (! (postfix_un_op || bin_op || sep_op)
@@ -470,16 +510,18 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 // Semicolons are handled as row seprators in matrix constants.  If we
 // don't eat whitespace here we can end up inserting too many
 // semicolons.
 
 // FIXME -- we need to handle block comments here.
 %}
 
 <MATRIX_START>{SNLCMT}*;{SNLCMT}* {
+    LEXER_DEBUG ("<MATRIX_START>{SNLCMT}*;{SNLCMT}*");
+
     scan_for_comments (yytext);
     fixup_column_count (yytext);
     eat_whitespace ();
     lexer_flags.quote_is_transpose = false;
     lexer_flags.convert_spaces_to_comma = true;
     COUNT_TOK_AND_RETURN (';');
   }
 
@@ -488,16 +530,18 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 // don't eat whitespace here we can end up inserting too many
 // semicolons.
 
 // FIXME -- we need to handle block comments here.
 %}
 
 <MATRIX_START>{S}*{COMMENT}{SNLCMT}* |
 <MATRIX_START>{S}*{NL}{SNLCMT}* {
+    LEXER_DEBUG ("<MATRIX_START>{S}*{COMMENT}{SNLCMT}*|<MATRIX_START>{S}*{NL}{SNLCMT}*");
+
     scan_for_comments (yytext);
     fixup_column_count (yytext);
     eat_whitespace ();
 
     lexer_flags.quote_is_transpose = false;
     lexer_flags.convert_spaces_to_comma = true;
 
     if (nesting_level.none ())
@@ -507,16 +551,18 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
       {
 	maybe_warn_separator_insert (';');
 
 	COUNT_TOK_AND_RETURN (';');
       }
   }
 
 \[{S}* {
+    LEXER_DEBUG ("\\[{S}*");
+
     nesting_level.bracket ();
 
     current_input_column += yyleng;
     lexer_flags.quote_is_transpose = false;
     lexer_flags.convert_spaces_to_comma = true;
 
     if (lexer_flags.defining_func && ! lexer_flags.parsed_function_name)
       lexer_flags.looking_at_return_list = true;
@@ -527,37 +573,42 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     eat_whitespace ();
 
     lexer_flags.bracketflag++;
     BEGIN (MATRIX_START);
     COUNT_TOK_AND_RETURN ('[');
   }
 
 \] {
+    LEXER_DEBUG ("\\]");
+
     nesting_level.remove ();
 
     TOK_RETURN (']');
   }
 
 %{
 // Imaginary numbers.
 %}
 
 {NUMBER}{Im} {
+    LEXER_DEBUG ("{NUMBER}{Im}");
+
     handle_number ();
     COUNT_TOK_AND_RETURN (IMAG_NUM);
   }
 
 %{
 // Real numbers.  Don't grab the `.' part of a dot operator as part of
 // the constant.
 %}
 
-{D}+/\.[\*/\\^'] |
+{D}+/\.[\*/\\^\'] |
 {NUMBER} {
+    LEXER_DEBUG ("{D}+/\\.[\\*/\\^\\']|{NUMBER}");
     handle_number ();
     COUNT_TOK_AND_RETURN (NUM);
   }
 
 %{
 // Eat whitespace.  Whitespace inside matrix constants is handled by
 // the <MATRIX_START> start state code above.
 %}
@@ -567,29 +618,33 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
   }
 
 %{
 // Continuation lines.  Allow comments after continuations.
 %}
 
 {CONT}{S}*{NL} |
 {CONT}{S}*{COMMENT} {
+    LEXER_DEBUG ("{CONT}{S}*{NL}|{CONT}{S}*{COMMENT}");
+
     if (yytext[0] == '\\')
       gripe_matlab_incompatible_continuation ();
     scan_for_comments (yytext);
     promptflag--;
     input_line_number++;
     current_input_column = 1;
   }
 
 %{
 // End of file.
 %}
 
 <<EOF>> {
+    LEXER_DEBUG ("<<EOF>>");
+
     if (block_comment_nesting_level != 0)
       {
 	warning ("block comment open at end of input");
 
 	if ((reading_fcn_file || reading_script_file)
 	    && ! curr_fcn_file_name.empty ())
 	  warning ("near line %d of file `%s.m'",
 		   input_line_number, curr_fcn_file_name.c_str ());
@@ -599,41 +654,47 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
   }
 
 %{
 // Identifiers.  Truncate the token at the first space or tab but
 // don't write directly on yytext.
 %}
 
 {IDENT}{S}* {
+    LEXER_DEBUG ("{IDENT}{S}*");
+
     int id_tok = handle_identifier ();
 
     if (id_tok >= 0)
       COUNT_TOK_AND_RETURN (id_tok);
   }
 
 %{
 // Function handles.
 %}
 
 "@" {
+    LEXER_DEBUG ("@");
+
     current_input_column++;
     lexer_flags.quote_is_transpose = false;
     lexer_flags.convert_spaces_to_comma = false;
     lexer_flags.looking_at_function_handle++;
     COUNT_TOK_AND_RETURN ('@');
   }
 
 %{
 // A new line character.  New line characters inside matrix constants
 // are handled by the <MATRIX_START> start state code above.  If closest
 // nesting is inside parentheses, don't return a row separator.
 %}
 
 {NL} {
+    LEXER_DEBUG ("{NL}");
+
     input_line_number++;
     current_input_column = 1;
     lexer_flags.quote_is_transpose = false;
     lexer_flags.convert_spaces_to_comma = true;
     if (nesting_level.none ())
       COUNT_TOK_AND_RETURN ('\n');
     else if (nesting_level.is_paren ())
       gripe_matlab_incompatible ("bare newline inside parentheses");
@@ -642,16 +703,18 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
   }
 
 %{
 // Single quote can either be the beginning of a string or a transpose
 // operator. 
 %}
 
 "'" {
+    LEXER_DEBUG ("'");
+
     current_input_column++;
     lexer_flags.convert_spaces_to_comma = true;
 
     if (lexer_flags.quote_is_transpose)
       {
 	do_comma_insert_check ();
 	COUNT_TOK_AND_RETURN (QUOTE);
       }
@@ -662,159 +725,177 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
       }
   }
 
 %{
 // Double quotes always begin strings.
 %}
 
 \" {
+    LEXER_DEBUG ("\"");
+
     current_input_column++;
     int tok = handle_string ('"');
     COUNT_TOK_AND_RETURN (tok);
 }
 
 %{
 // Gobble comments.  If closest nesting is inside parentheses, don't
 // return a new line.
 %} 
 
 {CCHAR} {
+    LEXER_DEBUG ("{CCHAR}");
+
     xunput (yytext[0], yytext);
 
     bool eof = false;
     int tok = process_comment (false, eof);
 
     if (eof)
       TOK_RETURN (END_OF_INPUT);
     else if (tok > 0)
       COUNT_TOK_AND_RETURN (tok);
   }
 
 %{
 // Block comments.
 %}
 
 ^{S}*{CCHAR}\{{S}*{NL} {
+    LEXER_DEBUG ("^{S}*{CCHAR}\\{{S}*{NL}");
+
     input_line_number++;
     current_input_column = 1;
     block_comment_nesting_level++;
     promptflag--;
     bool eof = false;
     process_comment (true, eof);
   }
 
 %{
 // Other operators.
 %}
 
-":"     { BIN_OP_RETURN (':', false); }
-
-".+"	{ XBIN_OP_RETURN (EPLUS, false); }
-".-"	{ XBIN_OP_RETURN (EMINUS, false); }
-".*"	{ BIN_OP_RETURN (EMUL, false); }
-"./"	{ BIN_OP_RETURN (EDIV, false); }
-".\\"	{ BIN_OP_RETURN (ELEFTDIV, false); }
-".^"	{ BIN_OP_RETURN (EPOW, false); }
-".**"	{ XBIN_OP_RETURN (EPOW, false); }
-".'"	{ do_comma_insert_check (); BIN_OP_RETURN (TRANSPOSE, true); }
-"++"	{ do_comma_insert_check (); XBIN_OP_RETURN (PLUS_PLUS, true); }
-"--"	{ do_comma_insert_check (); XBIN_OP_RETURN (MINUS_MINUS, true); }
-"<="	{ BIN_OP_RETURN (EXPR_LE, false); }
-"=="	{ BIN_OP_RETURN (EXPR_EQ, false); }
-"~="	{ BIN_OP_RETURN (EXPR_NE, false); }
-"!="	{ XBIN_OP_RETURN (EXPR_NE, false); }
-">="	{ BIN_OP_RETURN (EXPR_GE, false); }
-"&"	{ BIN_OP_RETURN (EXPR_AND, false); }
-"|"	{ BIN_OP_RETURN (EXPR_OR, false); }
-"<"	{ BIN_OP_RETURN (EXPR_LT, false); }
-">"	{ BIN_OP_RETURN (EXPR_GT, false); }
-"+"     { BIN_OP_RETURN ('+', false); }
-"-"     { BIN_OP_RETURN ('-', false); }
-"*"	{ BIN_OP_RETURN ('*', false); }
-"/"	{ BIN_OP_RETURN ('/', false); }
-"\\"	{ BIN_OP_RETURN (LEFTDIV, false); }
-";"	{ BIN_OP_RETURN (';', true); }
-","	{ BIN_OP_RETURN (',', true); }
-"^"	{ BIN_OP_RETURN (POW, false); }
-"**"	{ XBIN_OP_RETURN (POW, false); }
-"="	{ BIN_OP_RETURN ('=', true); }
-"&&"	{ BIN_OP_RETURN (EXPR_AND_AND, false); }
-"||"	{ BIN_OP_RETURN (EXPR_OR_OR, false); }
-"<<"	{ XBIN_OP_RETURN (LSHIFT, false); }
-">>"	{ XBIN_OP_RETURN (RSHIFT, false); }
+":"     { LEXER_DEBUG (":"); BIN_OP_RETURN (':', false); }
+
+".+"	{ LEXER_DEBUG (".+"); XBIN_OP_RETURN (EPLUS, false); }
+".-"	{ LEXER_DEBUG (".-"); XBIN_OP_RETURN (EMINUS, false); }
+".*"	{ LEXER_DEBUG (".*"); BIN_OP_RETURN (EMUL, false); }
+"./"	{ LEXER_DEBUG ("./"); BIN_OP_RETURN (EDIV, false); }
+".\\"	{ LEXER_DEBUG (".\\"); BIN_OP_RETURN (ELEFTDIV, false); }
+".^"	{ LEXER_DEBUG (".^"); BIN_OP_RETURN (EPOW, false); }
+".**"	{ LEXER_DEBUG (".**"); XBIN_OP_RETURN (EPOW, false); }
+".'"	{ LEXER_DEBUG (".'"); do_comma_insert_check (); BIN_OP_RETURN (TRANSPOSE, true); }
+"++"	{ LEXER_DEBUG ("++"); do_comma_insert_check (); XBIN_OP_RETURN (PLUS_PLUS, true); }
+"--"	{ LEXER_DEBUG ("--"); do_comma_insert_check (); XBIN_OP_RETURN (MINUS_MINUS, true); }
+"<="	{ LEXER_DEBUG ("<="); BIN_OP_RETURN (EXPR_LE, false); }
+"=="	{ LEXER_DEBUG ("=="); BIN_OP_RETURN (EXPR_EQ, false); }
+"~="	{ LEXER_DEBUG ("~="); BIN_OP_RETURN (EXPR_NE, false); }
+"!="	{ LEXER_DEBUG ("!="); XBIN_OP_RETURN (EXPR_NE, false); }
+">="	{ LEXER_DEBUG (">="); BIN_OP_RETURN (EXPR_GE, false); }
+"&"	{ LEXER_DEBUG ("&"); BIN_OP_RETURN (EXPR_AND, false); }
+"|"	{ LEXER_DEBUG ("|"); BIN_OP_RETURN (EXPR_OR, false); }
+"<"	{ LEXER_DEBUG ("<"); BIN_OP_RETURN (EXPR_LT, false); }
+">"	{ LEXER_DEBUG (">"); BIN_OP_RETURN (EXPR_GT, false); }
+"+"     { LEXER_DEBUG ("+"); BIN_OP_RETURN ('+', false); }
+"-"     { LEXER_DEBUG ("-"); BIN_OP_RETURN ('-', false); }
+"*"	{ LEXER_DEBUG ("*"); BIN_OP_RETURN ('*', false); }
+"/"	{ LEXER_DEBUG ("/"); BIN_OP_RETURN ('/', false); }
+"\\"	{ LEXER_DEBUG ("\\"); BIN_OP_RETURN (LEFTDIV, false); }
+";"	{ LEXER_DEBUG (";"); BIN_OP_RETURN (';', true); }
+","	{ LEXER_DEBUG (","); BIN_OP_RETURN (',', true); }
+"^"	{ LEXER_DEBUG ("^"); BIN_OP_RETURN (POW, false); }
+"**"	{ LEXER_DEBUG ("**"); XBIN_OP_RETURN (POW, false); }
+"="	{ LEXER_DEBUG ("="); BIN_OP_RETURN ('=', true); }
+"&&"	{ LEXER_DEBUG ("&&"); BIN_OP_RETURN (EXPR_AND_AND, false); }
+"||"	{ LEXER_DEBUG ("||"); BIN_OP_RETURN (EXPR_OR_OR, false); }
+"<<"	{ LEXER_DEBUG ("<<"); XBIN_OP_RETURN (LSHIFT, false); }
+">>"	{ LEXER_DEBUG (">>"); XBIN_OP_RETURN (RSHIFT, false); }
 
 {NOT} {
+    LEXER_DEBUG ("{NOT}");
+
     if (yytext[0] == '~')
       BIN_OP_RETURN (EXPR_NOT, false);
     else
       XBIN_OP_RETURN (EXPR_NOT, false);
   }
 
 "(" {
+    LEXER_DEBUG ("(");
+
     lexer_flags.looking_at_indirect_ref = false;
     nesting_level.paren ();
     promptflag--;
     TOK_RETURN ('(');
   }
 
 ")" {
+    LEXER_DEBUG (")");
+
     nesting_level.remove ();
     current_input_column++;
     lexer_flags.quote_is_transpose = true;
     lexer_flags.convert_spaces_to_comma = nesting_level.is_bracket_or_brace ();
     do_comma_insert_check ();
     COUNT_TOK_AND_RETURN (')');
   }
 
-"."     { TOK_RETURN ('.'); }
-
-"+="	{ XBIN_OP_RETURN (ADD_EQ, false); }
-"-="	{ XBIN_OP_RETURN (SUB_EQ, false); }
-"*="	{ XBIN_OP_RETURN (MUL_EQ, false); }
-"/="	{ XBIN_OP_RETURN (DIV_EQ, false); }
-"\\="	{ XBIN_OP_RETURN (LEFTDIV_EQ, false); }
-".+="	{ XBIN_OP_RETURN (ADD_EQ, false); }
-".-="	{ XBIN_OP_RETURN (SUB_EQ, false); }
-".*="	{ XBIN_OP_RETURN (EMUL_EQ, false); }
-"./="	{ XBIN_OP_RETURN (EDIV_EQ, false); }
-".\\="	{ XBIN_OP_RETURN (ELEFTDIV_EQ, false); }
-{POW}=  { XBIN_OP_RETURN (POW_EQ, false); }
-{EPOW}= { XBIN_OP_RETURN (EPOW_EQ, false); }
-"&="	{ XBIN_OP_RETURN (AND_EQ, false); }
-"|="	{ XBIN_OP_RETURN (OR_EQ, false); }
-"<<="	{ XBIN_OP_RETURN (LSHIFT_EQ, false); }
-">>="	{ XBIN_OP_RETURN (RSHIFT_EQ, false); }
+"."     { LEXER_DEBUG ("."); TOK_RETURN ('.'); }
+
+"+="	{ LEXER_DEBUG ("+="); XBIN_OP_RETURN (ADD_EQ, false); }
+"-="	{ LEXER_DEBUG ("-="); XBIN_OP_RETURN (SUB_EQ, false); }
+"*="	{ LEXER_DEBUG ("*="); XBIN_OP_RETURN (MUL_EQ, false); }
+"/="	{ LEXER_DEBUG ("/="); XBIN_OP_RETURN (DIV_EQ, false); }
+"\\="	{ LEXER_DEBUG ("\\="); XBIN_OP_RETURN (LEFTDIV_EQ, false); }
+".+="	{ LEXER_DEBUG (".+="); XBIN_OP_RETURN (ADD_EQ, false); }
+".-="	{ LEXER_DEBUG (".-="); XBIN_OP_RETURN (SUB_EQ, false); }
+".*="	{ LEXER_DEBUG (".*="); XBIN_OP_RETURN (EMUL_EQ, false); }
+"./="	{ LEXER_DEBUG ("./="); XBIN_OP_RETURN (EDIV_EQ, false); }
+".\\="	{ LEXER_DEBUG (".\\="); XBIN_OP_RETURN (ELEFTDIV_EQ, false); }
+{POW}=  { LEXER_DEBUG ("{POW}="); XBIN_OP_RETURN (POW_EQ, false); }
+{EPOW}= { LEXER_DEBUG ("{EPOW}="); XBIN_OP_RETURN (EPOW_EQ, false); }
+"&="	{ LEXER_DEBUG ("&="); XBIN_OP_RETURN (AND_EQ, false); }
+"|="	{ LEXER_DEBUG ("|="); XBIN_OP_RETURN (OR_EQ, false); }
+"<<="	{ LEXER_DEBUG ("<<="); XBIN_OP_RETURN (LSHIFT_EQ, false); }
+">>="	{ LEXER_DEBUG (">>="); XBIN_OP_RETURN (RSHIFT_EQ, false); }
 
 \{{S}* {
+    LEXER_DEBUG ("\\{{S}*");
+
     nesting_level.brace ();
 
     current_input_column += yyleng;
     lexer_flags.quote_is_transpose = false;
     lexer_flags.convert_spaces_to_comma = true;
 
     promptflag--;
     eat_whitespace ();
 
     lexer_flags.braceflag++;
     BEGIN (MATRIX_START);
     COUNT_TOK_AND_RETURN ('{');
   }
 
 "}" {
+    LEXER_DEBUG ("}");
+
     nesting_level.remove ();
 
     TOK_RETURN ('}');
   }
 
 %{
 // Unrecognized input is a lexical error.
 %}
 
 . {
+    LEXER_DEBUG (".");
+
     // EOF happens here if we are parsing nested functions.
 
     xunput (yytext[0], yytext);
 
     int c = text_yyinput ();
 
     if (c != EOF)
       {
@@ -931,18 +1012,170 @@ text_yyinput (void)
 
   if (c == '\n')
     input_line_number++;
 
   return c;
 }
 
 static void
+display_character (char c)
+{
+  if (isgraph (c))
+    std::cerr << c;
+  else
+    switch (c)
+      {
+      case 0:
+	std::cerr << "NUL";
+	break;
+
+      case 1:
+	std::cerr << "SOH";
+	break;
+
+      case 2:
+	std::cerr << "STX";
+	break;
+
+      case 3:
+	std::cerr << "ETX";
+	break;
+
+      case 4:
+	std::cerr << "EOT";
+	break;
+
+      case 5:
+	std::cerr << "ENQ";
+	break;
+
+      case 6:
+	std::cerr << "ACK";
+	break;
+
+      case 7:
+	std::cerr << "\\a";
+	break;
+
+      case 8:
+	std::cerr << "\\b";
+	break;
+
+      case 9:
+	std::cerr << "\\t";
+	break;
+
+      case 10:
+	std::cerr << "\\n";
+	break;
+
+      case 11:
+	std::cerr << "\\v";
+	break;
+
+      case 12:
+	std::cerr << "\\f";
+	break;
+
+      case 13:
+	std::cerr << "\\r";
+	break;
+
+      case 14:
+	std::cerr << "SO";
+	break;
+
+      case 15:
+	std::cerr << "SI";
+	break;
+
+      case 16:
+	std::cerr << "DLE";
+	break;
+
+      case 17:
+	std::cerr << "DC1";
+	break;
+
+      case 18:
+	std::cerr << "DC2";
+	break;
+
+      case 19:
+	std::cerr << "DC3";
+	break;
+
+      case 20:
+	std::cerr << "DC4";
+	break;
+
+      case 21:
+	std::cerr << "NAK";
+	break;
+
+      case 22:
+	std::cerr << "SYN";
+	break;
+
+      case 23:
+	std::cerr << "ETB";
+	break;
+
+      case 24:
+	std::cerr << "CAN";
+	break;
+
+      case 25:
+	std::cerr << "EM";
+	break;
+
+      case 26:
+	std::cerr << "SUB";
+	break;
+
+      case 27:
+	std::cerr << "ESC";
+	break;
+
+      case 28:
+	std::cerr << "FS";
+	break;
+
+      case 29:
+	std::cerr << "GS";
+	break;
+
+      case 30:
+	std::cerr << "RS";
+	break;
+
+      case 31:
+	std::cerr << "US";
+	break;
+
+      case 32:
+	std::cerr << "SPACE";
+	break;
+
+      case 127:
+	std::cerr << "DEL";
+	break;
+      }
+}
+static void
 xunput (char c, char *buf)
 {
+  if (lexer_debug_flag)
+    {
+      std::cerr << "U: ";
+      display_character (c);
+      std::cerr << std::endl;
+    }
+
   if (c == '\n')
     input_line_number--;
 
   yyunput (c, buf);
 }
 
 // If we read some newlines, we need figure out what column we're
 // really looking at.
@@ -1501,16 +1734,19 @@ process_comment (bool start_in_block, bo
 
   // process_comment is only supposed to be called when we are not
   // initially looking at a block comment.
 
   std::string txt = start_in_block
     ? grab_block_comment (flex_reader, eof)
     : grab_comment_block (flex_reader, false, eof);
 
+  if (lexer_debug_flag)
+    std::cerr << "C: " txt << std::endl;
+
   if (help_txt.empty () && nesting_level.none ())
     {
       if (! help_buf.empty ())
 	help_buf.pop ();
 
       help_buf.push (txt);
     }
 
@@ -2822,16 +3058,64 @@ display_token (int tok)
 	  std::cerr << static_cast<char> (tok) << "\n";
 	else
 	  std::cerr << "UNKNOWN(" << tok << ")\n";
       }
       break;
     }
 }
 
+static void
+display_state (void)
+{
+  std::cerr << "S: ";
+
+  switch (YY_START)
+    {
+    case INITIAL:
+      std::cerr << "INITIAL" << std::endl;
+      break;
+
+    case COMMAND_START:
+      std::cerr << "COMMAND_START" << std::endl;
+      break;
+
+    case MATRIX_START:
+      std::cerr << "MATRIX_START" << std::endl;
+      break;
+
+    case SCRIPT_FILE_BEGIN:
+      std::cerr << "SCRIPT_FILE_BEGIN" << std::endl;
+      break;
+
+    case NESTED_FUNCTION_END:
+      std::cerr << "NESTED_FUNCTION_END" << std::endl;
+      break;
+
+    case NESTED_FUNCTION_BEGIN:
+      std::cerr << "NESTED_FUNCTION_BEGIN" << std::endl;
+      break;
+
+    default:
+      std::cerr << "UNKNOWN START STATE!" << std::endl;
+      break;
+    }
+}
+
+static void
+lexer_debug (const char *pattern, const char *text)
+{
+  std::cerr << std::endl;
+
+  display_state ();
+
+  std::cerr << "P: " << pattern << std::endl;
+  std::cerr << "T: " << text << std::endl;
+}
+
 DEFUN (__display_tokens__, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __display_tokens__\n\
 Query or set the internal variable that determines whether Octave's\n\
 lexer displays tokens as they are read.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (display_tokens);
@@ -2841,13 +3125,24 @@ DEFUN (__token_count__, , ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __token_count__\n\
 Number of language tokens processed since Octave startup.\n\
 @end deftypefn")
 {
   return octave_value (Vtoken_count);
 }
 
+DEFUN (__lexer_debug_flag__, args, nargout,
+  "Undocumented internal function.")
+{
+  octave_value retval;
+
+  retval = set_internal_variable (lexer_debug_flag, args, nargout,
+           			  "__lexer_debug_flag__");
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
