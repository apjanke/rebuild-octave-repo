# HG changeset patch
# User Ben Abbott  <bpabbott@mac.com>
# Date 1370494781 -28800
#      Thu Jun 06 12:59:41 2013 +0800
# Node ID 5cf7369a74cb1389a50dc1d2357f9bffa2bc1b88
# Parent  3ce3579405f8b9ed9efb700d6c1b864569007fd4
Update legend box when the fontsize changes.

* scripts/plot/legend.m: Use the legend fontsize property when creating text
objects. Update the legend when the fontsize property changes.  Modify demo.
Bug # 38265.

diff --git a/scripts/plot/legend.m b/scripts/plot/legend.m
--- a/scripts/plot/legend.m
+++ b/scripts/plot/legend.m
@@ -588,32 +588,33 @@ function [hlegend2, hobjects2, hplot2, t
                           "visible", ifelse (strcmp (box, "on"), "on", "off"),
                           "activepositionproperty", "position",
                           "fontsize", ca_fontsize);
         else
           addprops = false;
           axes (hlegend);
           delete (get (hlegend, "children"));
         endif
+        fontsize = get (hlegend, "fontsize");
         ## Add text label to the axis first, checking their extents
         nentries = numel (hplots);
         texthandle = [];
         maxwidth = 0;
         maxheight = 0;
         for k = 1 : nentries
           if (strcmp (textpos, "right"))
             texthandle = [texthandle, text(0, 0, text_strings{k},
                                            "horizontalalignment", "left",
                                            "userdata", hplots(k),
-                                           "fontsize", ca_fontsize)];
+                                           "fontsize", fontsize)];
           else
             texthandle = [texthandle, text(0, 0, text_strings{k},
                                            "horizontalalignment", "right",
                                            "userdata", hplots(k),
-                                           "fontsize", ca_fontsize)];
+                                           "fontsize", fontsize)];
           endif
           units = get (texthandle(end), "units");
           unwind_protect
             set (texthandle(end), "units", "points");
             extents = get (texthandle(end), "extent");
             maxwidth = max (maxwidth, extents(3));
             maxheight = max (maxheight, extents(4));
           unwind_protect_cleanup
@@ -869,17 +870,17 @@ function [hlegend2, hobjects2, hplot2, t
                "orientation", orientation, "textposition", textpos);
         else
           set (hlegend, "location", position, "orientation", orientation,
                "textposition", textpos);
         endif
         if (addprops)
           addlistener (hlegend, "edgecolor", @updatelegendtext);
           addlistener (hlegend, "textcolor", @updatelegendtext);
-          addlistener (hlegend, "fontsize", @updatelegendtext);
+          addlistener (hlegend, "fontsize", @updatelegend);
           addlistener (hlegend, "interpreter", @updatelegendtext);
           addlistener (hlegend, "location", @updatelegend);
           addlistener (hlegend, "orientation", @updatelegend);
           addlistener (hlegend, "string", @updatelegend);
           addlistener (hlegend, "textposition", @updatelegend);
         endif
       unwind_protect_cleanup
         set (fig, "currentaxes", curaxes);
@@ -1061,21 +1062,21 @@ function updateline (h, d, hlegend, line
             "marker", marker, "markeredgecolor", get (h, "markeredgecolor"),
             "markerfacecolor", get (h, "markerfacecolor"),
             "markersize", get (h, "markersize"), "linestyle", "none",
             "userdata", h, "parent", hlegend);
     endif
   endif
 endfunction
 
-
 %!demo
 %! plot (rand (2));
 %! title ('legend called with cellstr and string inputs for labels');
-%! legend ({'foo'}, 'bar');
+%! h = legend ({'foo'}, 'bar');
+%! set (h, 'fontsize', 20)
 
 %!demo
 %! plot (rand (3));
 %! title ('legend() without inputs creates default labels');
 %! legend ();
 
 %!demo
 %! clf;
