# HG changeset patch
# User Rik <rik@octave.org>
# Date 1511474262 28800
#      Thu Nov 23 13:57:42 2017 -0800
# Node ID 1523c409b2d496663a58ef26ae6863a9b68785dd
# Parent  9a1b193ddd01c4057173bfd478a1f5272feb37ee
# Parent  117107eed917a700eb82e4bb8a17dd6f2743652d
maint: merge stable to default.

diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -364,18 +364,18 @@ octave_qt_link::do_debug_cd_or_addpath_e
   QString qfile = QString::fromStdString (file);
   QString msg
     = (addpath_option
        ? tr ("The file %1 does not exist in the load path.  To run or debug the function you are editing, you must either change to the directory %2 or add that directory to the load path.").arg (qfile).arg (qdir)
        : tr ("The file %1 is shadowed by a file with the same name in the load path. To run or debug the function you are editing, change to the directory %2.").arg (qfile).arg (qdir));
 
   QString title = tr ("Change Directory or Add Directory to Load Path");
 
-  QString cd_txt = tr ("Change Directory");
-  QString addpath_txt = tr ("Add Directory to Load Path");
+  QString cd_txt = tr ("&Change Directory");
+  QString addpath_txt = tr ("&Add Directory to Load Path");
   QString cancel_txt = tr ("Cancel");
 
   QStringList btn;
   QStringList role;
   btn << cd_txt;
   role << "YesRole";
   if (addpath_option)
     {
diff --git a/libgui/src/workspace-view.cc b/libgui/src/workspace-view.cc
--- a/libgui/src/workspace-view.cc
+++ b/libgui/src/workspace-view.cc
@@ -238,16 +238,18 @@ workspace_view::save_settings (void)
 
   QStringList mru;
   for (int i = 0; i < m_filter->count (); i++)
     mru.append (m_filter->itemText (i));
   settings->setValue ("workspaceview/mru_list", mru);
 
   settings->sync ();
 
+  octave_dock_widget::save_settings ();
+
   if (m_sig_mapper)
     delete m_sig_mapper;
 }
 
 void
 workspace_view::closeEvent (QCloseEvent *e)
 {
   emit active_changed (false);
diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -704,16 +704,38 @@ ComplexMatrix::row (octave_idx_type i) c
 }
 
 ComplexColumnVector
 ComplexMatrix::column (octave_idx_type i) const
 {
   return index (idx_vector::colon, idx_vector (i));
 }
 
+// Local function to calculate the 1-norm.
+static
+double
+norm1 (const ComplexMatrix& a)
+{
+  ColumnVector colsum = a.abs ().sum ().row (0);
+  double anorm = -octave::numeric_limits<double>::Inf ();
+
+  for (octave_idx_type i = 0; i < colsum.numel (); i++)
+    {
+      if (octave::math::isnan (colsum.xelem (i)))
+        {
+          anorm = octave::numeric_limits<double>::NaN ();
+          break;
+        }
+      else
+        anorm = std::max (anorm, colsum.xelem (i));
+    }
+
+  return anorm;
+}
+
 ComplexMatrix
 ComplexMatrix::inverse (void) const
 {
   octave_idx_type info;
   double rcon;
   MatrixType mattype (*this);
   return inverse (mattype, info, rcon, 0, 0);
 }
@@ -842,19 +864,18 @@ ComplexMatrix::finverse (MatrixType& mat
   lwork = static_cast<F77_INT> (std::real (z(0)));
   lwork = (lwork < 2 * nc ? 2 * nc : lwork);
   z.resize (dim_vector (lwork, 1));
   Complex *pz = z.fortran_vec ();
 
   info = 0;
   tmp_info = 0;
 
-  // Calculate (always, see bug #45577) the norm of the matrix, for later use.
-  double anorm =
-    retval.abs ().sum ().row (static_cast<octave_idx_type>(0)).max ();
+  // Calculate norm of the matrix (always, see bug #45577) for later use.
+  double anorm = norm1 (retval);
 
   // Work around bug #45577, LAPACK crashes Octave if norm is NaN
   // and bug #46330, segfault with matrices containing Inf & NaN
   if (octave::math::isnan (anorm) || octave::math::isinf (anorm))
     info = -1;
   else
     {
       F77_XFCN (zgetrf, ZGETRF, (nc, nc, F77_DBLE_CMPLX_ARG (tmp_data), nr, pipvt,
@@ -1370,17 +1391,18 @@ ComplexMatrix::determinant (MatrixType& 
         retval *= elem (i,i);
     }
   else if (typ == MatrixType::Hermitian)
     {
       ComplexMatrix atmp = *this;
       Complex *tmp_data = atmp.fortran_vec ();
 
       double anorm = 0;
-      if (calc_cond) anorm = xnorm (*this, 1);
+      if (calc_cond)
+        anorm = norm1 (*this);
 
       F77_INT tmp_info = 0;
 
       char job = 'L';
       F77_XFCN (zpotrf, ZPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                  F77_DBLE_CMPLX_ARG (tmp_data), nr, tmp_info
                                  F77_CHAR_ARG_LEN (1)));
 
@@ -1423,18 +1445,18 @@ ComplexMatrix::determinant (MatrixType& 
       Array<F77_INT> ipvt (dim_vector (nr, 1));
       F77_INT *pipvt = ipvt.fortran_vec ();
 
       ComplexMatrix atmp = *this;
       Complex *tmp_data = atmp.fortran_vec ();
 
       info = 0;
 
-      // Calculate (always, see bug #45577) the norm of the matrix, for later use.
-      double anorm = xnorm (*this, 1);
+      // Calculate norm of the matrix (always, see bug #45577) for later use.
+      double anorm = norm1 (*this);
 
       F77_INT tmp_info = 0;
 
       // Work around bug #45577, LAPACK crashes Octave if norm is NaN
       if (octave::math::isnan (anorm))
         info = -1;
       else
         {
@@ -1579,18 +1601,17 @@ ComplexMatrix::rcond (MatrixType& mattyp
           if (typ == MatrixType::Hermitian)
             {
               F77_INT info = 0;
               char job = 'L';
 
               ComplexMatrix atmp = *this;
               Complex *tmp_data = atmp.fortran_vec ();
 
-              anorm = atmp.abs().sum().
-                      row(static_cast<octave_idx_type>(0)).max();
+              anorm = norm1 (atmp);
 
               F77_XFCN (zpotrf, ZPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                          F77_DBLE_CMPLX_ARG (tmp_data), nr, info
                                          F77_CHAR_ARG_LEN (1)));
 
               if (info != 0)
                 {
                   rcon = 0.0;
@@ -1621,18 +1642,17 @@ ComplexMatrix::rcond (MatrixType& mattyp
 
               ComplexMatrix atmp = *this;
               Complex *tmp_data = atmp.fortran_vec ();
 
               Array<F77_INT> ipvt (dim_vector (nr, 1));
               F77_INT *pipvt = ipvt.fortran_vec ();
 
               if (anorm < 0.)
-                anorm = atmp.abs ().sum ().
-                        row(static_cast<octave_idx_type>(0)).max ();
+                anorm = norm1 (atmp);
 
               Array<Complex> z (dim_vector (2 * nc, 1));
               Complex *pz = z.fortran_vec ();
               Array<double> rz (dim_vector (2 * nc, 1));
               double *prz = rz.fortran_vec ();
 
               // Work around bug #45577, LAPACK crashes Octave if norm is NaN
               if (octave::math::isnan (anorm))
@@ -1892,17 +1912,17 @@ ComplexMatrix::fsolve (MatrixType& matty
       if (typ == MatrixType::Hermitian)
         {
           info = 0;
           char job = 'L';
 
           ComplexMatrix atmp = *this;
           Complex *tmp_data = atmp.fortran_vec ();
 
-          anorm = atmp.abs().sum().row(static_cast<octave_idx_type>(0)).max();
+          anorm = norm1 (atmp);
 
           F77_INT tmp_info = 0;
 
           F77_XFCN (zpotrf, ZPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                      F77_DBLE_CMPLX_ARG (tmp_data), nr, tmp_info
                                      F77_CHAR_ARG_LEN (1)));
 
           info = tmp_info;
@@ -1980,18 +2000,17 @@ ComplexMatrix::fsolve (MatrixType& matty
 
           Array<Complex> z (dim_vector (2 * nc, 1));
           Complex *pz = z.fortran_vec ();
           Array<double> rz (dim_vector (2 * nc, 1));
           double *prz = rz.fortran_vec ();
 
           // Calculate the norm of the matrix, for later use.
           if (anorm < 0.)
-            anorm = atmp.abs ().sum ().row (static_cast<octave_idx_type>(0))
-                    .max ();
+            anorm = norm1 (atmp);
 
           F77_INT tmp_info = 0;
 
           // Work around bug #45577, LAPACK crashes Octave if norm is NaN
           // and bug #46330, segfault with matrices containing Inf & NaN
           if (octave::math::isnan (anorm) || octave::math::isinf (anorm))
             info = -2;
           else
@@ -2548,17 +2567,17 @@ ComplexMatrix::lssolve (const ComplexMat
 
           if (std::real (work(0)) < lworkaround)
             work(0) = lworkaround;
         }
 
       lwork = static_cast<F77_INT> (std::real (work(0)));
       work.resize (dim_vector (lwork, 1));
 
-      anorm = xnorm (*this, 1);
+      anorm = norm1 (*this);
 
       if (octave::math::isinf (anorm) || octave::math::isnan (anorm))
         {
           rcon = 0.0;
           octave::warn_singular_matrix ();
           retval = Matrix (n, b_nc, 0.0);
         }
       else
diff --git a/liboctave/array/dMatrix.cc b/liboctave/array/dMatrix.cc
--- a/liboctave/array/dMatrix.cc
+++ b/liboctave/array/dMatrix.cc
@@ -418,16 +418,38 @@ Matrix::row (octave_idx_type i) const
 }
 
 ColumnVector
 Matrix::column (octave_idx_type i) const
 {
   return index (idx_vector::colon, idx_vector (i));
 }
 
+// Local function to calculate the 1-norm.
+static
+double
+norm1 (const Matrix& a)
+{
+  ColumnVector colsum = a.abs ().sum ().row (0);
+  double anorm = -octave::numeric_limits<double>::Inf ();
+
+  for (octave_idx_type i = 0; i < colsum.numel (); i++)
+    {
+      if (octave::math::isnan (colsum.xelem (i)))
+        {
+          anorm = octave::numeric_limits<double>::NaN ();
+          break;
+        }
+      else
+        anorm = std::max (anorm, colsum.xelem (i));
+    }
+
+  return anorm;
+}
+
 Matrix
 Matrix::inverse (void) const
 {
   octave_idx_type info;
   double rcon;
   MatrixType mattype (*this);
   return inverse (mattype, info, rcon, 0, 0);
 }
@@ -557,18 +579,17 @@ Matrix::finverse (MatrixType& mattype, o
   double *pz = z.fortran_vec ();
 
   info = 0;
   tmp_info = 0;
 
   // Calculate the norm of the matrix, for later use.
   double anorm = 0;
   if (calc_cond)
-    anorm = retval.abs ().sum ().row (static_cast<octave_idx_type>(0))
-            .max ();
+    anorm = norm1 (retval);
 
   F77_XFCN (dgetrf, DGETRF, (nc, nc, tmp_data, nr, pipvt, tmp_info));
 
   info = tmp_info;
 
   // Throw away extra info LAPACK gives so as to not change output.
   rcon = 0.0;
   if (info != 0)
@@ -1043,19 +1064,18 @@ Matrix::determinant (MatrixType& mattype
   F77_INT nr = octave::to_f77_int (rows ());
   F77_INT nc = octave::to_f77_int (cols ());
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
 
   volatile int typ = mattype.type ();
 
-  // Even though the matrix is marked as singular (Rectangular), we may
-  // still get a useful number from the LU factorization, because it always
-  // completes.
+  // Even though the matrix is marked as singular (Rectangular), we may still
+  // get a useful number from the LU factorization, because it always completes.
 
   if (typ == MatrixType::Unknown)
     typ = mattype.type (*this);
   else if (typ == MatrixType::Rectangular)
     typ = MatrixType::Full;
 
   if (typ == MatrixType::Lower || typ == MatrixType::Upper)
     {
@@ -1063,17 +1083,18 @@ Matrix::determinant (MatrixType& mattype
         retval *= elem (i,i);
     }
   else if (typ == MatrixType::Hermitian)
     {
       Matrix atmp = *this;
       double *tmp_data = atmp.fortran_vec ();
 
       double anorm = 0;
-      if (calc_cond) anorm = xnorm (*this, 1);
+      if (calc_cond)
+        anorm = norm1 (*this);
 
       F77_INT tmp_info = 0;
 
       char job = 'L';
       F77_XFCN (dpotrf, DPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                  tmp_data, nr, tmp_info
                                  F77_CHAR_ARG_LEN (1)));
 
@@ -1119,17 +1140,18 @@ Matrix::determinant (MatrixType& mattype
       Matrix atmp = *this;
       double *tmp_data = atmp.fortran_vec ();
 
       info = 0;
       F77_INT tmp_info = 0;
 
       // Calculate the norm of the matrix, for later use.
       double anorm = 0;
-      if (calc_cond) anorm = xnorm (*this, 1);
+      if (calc_cond)
+        anorm = norm1 (*this);
 
       F77_XFCN (dgetrf, DGETRF, (nr, nr, tmp_data, nr, pipvt, tmp_info));
 
       info = tmp_info;
 
       // Throw away extra info LAPACK gives so as to not change output.
       rcon = 0.0;
       if (info != 0)
@@ -1265,18 +1287,17 @@ Matrix::rcond (MatrixType& mattype) cons
           if (typ == MatrixType::Hermitian)
             {
               F77_INT info = 0;
               char job = 'L';
 
               Matrix atmp = *this;
               double *tmp_data = atmp.fortran_vec ();
 
-              anorm = atmp.abs().sum().
-                      row(static_cast<octave_idx_type>(0)).max();
+              anorm = norm1 (atmp);
 
               F77_XFCN (dpotrf, DPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                          tmp_data, nr, info
                                          F77_CHAR_ARG_LEN (1)));
 
               if (info != 0)
                 {
                   rcon = 0.0;
@@ -1306,18 +1327,17 @@ Matrix::rcond (MatrixType& mattype) cons
 
               Matrix atmp = *this;
               double *tmp_data = atmp.fortran_vec ();
 
               Array<F77_INT> ipvt (dim_vector (nr, 1));
               F77_INT *pipvt = ipvt.fortran_vec ();
 
               if (anorm < 0.)
-                anorm = atmp.abs ().sum ().
-                        row(static_cast<octave_idx_type>(0)).max ();
+                anorm = norm1 (atmp);
 
               Array<double> z (dim_vector (4 * nc, 1));
               double *pz = z.fortran_vec ();
               Array<F77_INT> iz (dim_vector (nc, 1));
               F77_INT *piz = iz.fortran_vec ();
 
               F77_XFCN (dgetrf, DGETRF, (nr, nr, tmp_data, nr, pipvt, info));
 
@@ -1566,17 +1586,17 @@ Matrix::fsolve (MatrixType& mattype, con
       if (typ == MatrixType::Hermitian)
         {
           info = 0;
           char job = 'L';
 
           Matrix atmp = *this;
           double *tmp_data = atmp.fortran_vec ();
 
-          anorm = atmp.abs().sum().row(static_cast<octave_idx_type>(0)).max();
+          anorm = norm1 (atmp);
 
           F77_INT tmp_info = 0;
 
           F77_XFCN (dpotrf, DPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                      tmp_data, nr, tmp_info
                                      F77_CHAR_ARG_LEN (1)));
 
           info = tmp_info;
@@ -1651,17 +1671,17 @@ Matrix::fsolve (MatrixType& mattype, con
 
           Array<F77_INT> ipvt (dim_vector (nr, 1));
           F77_INT *pipvt = ipvt.fortran_vec ();
 
           Matrix atmp = *this;
           double *tmp_data = atmp.fortran_vec ();
 
           if (anorm < 0.)
-            anorm = atmp.abs().sum().row(static_cast<octave_idx_type>(0)).max();
+            anorm = norm1 (atmp);
 
           Array<double> z (dim_vector (4 * nc, 1));
           double *pz = z.fortran_vec ();
           Array<F77_INT> iz (dim_vector (nc, 1));
           F77_INT *piz = iz.fortran_vec ();
 
           F77_INT tmp_info = 0;
 
@@ -2199,17 +2219,17 @@ Matrix::lssolve (const Matrix& b, octave
 
           if (work(0) < lworkaround)
             work(0) = lworkaround;
         }
 
       lwork = static_cast<F77_INT> (work(0));
       work.resize (dim_vector (lwork, 1));
 
-      anorm = xnorm (*this, 1);
+      anorm = norm1 (*this);
 
       if (octave::math::isinf (anorm) || octave::math::isnan (anorm))
         {
           rcon = 0.0;
           octave::warn_singular_matrix ();
           retval = Matrix (n, b_nc, 0.0);
         }
       else
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -707,16 +707,38 @@ FloatComplexMatrix::row (octave_idx_type
 }
 
 FloatComplexColumnVector
 FloatComplexMatrix::column (octave_idx_type i) const
 {
   return index (idx_vector::colon, idx_vector (i));
 }
 
+// Local function to calculate the 1-norm.
+static
+float
+norm1 (const FloatComplexMatrix& a)
+{
+  FloatColumnVector colsum = a.abs ().sum ().row (0);
+  float anorm = -octave::numeric_limits<float>::Inf ();
+
+  for (octave_idx_type i = 0; i < colsum.numel (); i++)
+    {
+      if (octave::math::isnan (colsum.xelem (i)))
+        {
+          anorm = octave::numeric_limits<float>::NaN ();
+          break;
+        }
+      else
+        anorm = std::max (anorm, colsum.xelem (i));
+    }
+
+  return anorm;
+}
+
 FloatComplexMatrix
 FloatComplexMatrix::inverse (void) const
 {
   octave_idx_type info;
   float rcon;
   MatrixType mattype (*this);
   return inverse (mattype, info, rcon, 0, 0);
 }
@@ -845,19 +867,18 @@ FloatComplexMatrix::finverse (MatrixType
   lwork = static_cast<F77_INT> (std::real (z(0)));
   lwork = (lwork < 2 * nc ? 2 * nc : lwork);
   z.resize (dim_vector (lwork, 1));
   FloatComplex *pz = z.fortran_vec ();
 
   info = 0;
   tmp_info = 0;
 
-  // Calculate (always, see bug #45577) the norm of the matrix, for later use.
-  float anorm =
-    retval.abs ().sum ().row (static_cast<octave_idx_type>(0)).max ();
+  // Calculate norm of the matrix (always, see bug #45577) for later use.
+  float anorm = norm1 (retval);
 
   // Work around bug #45577, LAPACK crashes Octave if norm is NaN
   // and bug #46330, segfault with matrices containing Inf & NaN
   if (octave::math::isnan (anorm) || octave::math::isinf (anorm))
     info = -1;
   else
     {
       F77_XFCN (cgetrf, CGETRF, (nc, nc, F77_CMPLX_ARG (tmp_data), nr, pipvt, tmp_info));
@@ -1370,17 +1391,18 @@ FloatComplexMatrix::determinant (MatrixT
         retval *= elem (i,i);
     }
   else if (typ == MatrixType::Hermitian)
     {
       FloatComplexMatrix atmp = *this;
       FloatComplex *tmp_data = atmp.fortran_vec ();
 
       float anorm = 0;
-      if (calc_cond) anorm = xnorm (*this, 1);
+      if (calc_cond)
+        anorm = norm1 (*this);
 
       F77_INT tmp_info = 0;
 
       char job = 'L';
       F77_XFCN (cpotrf, CPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                  F77_CMPLX_ARG (tmp_data), nr, tmp_info
                                  F77_CHAR_ARG_LEN (1)));
 
@@ -1423,18 +1445,18 @@ FloatComplexMatrix::determinant (MatrixT
       Array<F77_INT> ipvt (dim_vector (nr, 1));
       F77_INT *pipvt = ipvt.fortran_vec ();
 
       FloatComplexMatrix atmp = *this;
       FloatComplex *tmp_data = atmp.fortran_vec ();
 
       info = 0;
 
-      // Calculate (always, see bug #45577) the norm of the matrix, for later use.
-      float anorm = xnorm (*this, 1);
+      // Calculate norm of the matrix (always, see bug #45577) for later use.
+      float anorm = norm1 (*this);
 
       F77_INT tmp_info = 0;
 
       // Work around bug #45577, LAPACK crashes Octave if norm is NaN
       if (octave::math::isnan (anorm))
         info = -1;
       else
         {
@@ -1578,18 +1600,17 @@ FloatComplexMatrix::rcond (MatrixType& m
           if (typ == MatrixType::Hermitian)
             {
               F77_INT info = 0;
               char job = 'L';
 
               FloatComplexMatrix atmp = *this;
               FloatComplex *tmp_data = atmp.fortran_vec ();
 
-              anorm = atmp.abs().sum().
-                      row(static_cast<octave_idx_type>(0)).max();
+              anorm = norm1 (atmp);
 
               F77_XFCN (cpotrf, CPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                          F77_CMPLX_ARG (tmp_data), nr, info
                                          F77_CHAR_ARG_LEN (1)));
 
               if (info != 0)
                 {
                   rcon = 0.0;
@@ -1620,18 +1641,17 @@ FloatComplexMatrix::rcond (MatrixType& m
 
               FloatComplexMatrix atmp = *this;
               FloatComplex *tmp_data = atmp.fortran_vec ();
 
               Array<F77_INT> ipvt (dim_vector (nr, 1));
               F77_INT *pipvt = ipvt.fortran_vec ();
 
               if (anorm < 0.)
-                anorm = atmp.abs ().sum ().
-                        row(static_cast<octave_idx_type>(0)).max ();
+                anorm = norm1 (atmp);
 
               Array<FloatComplex> z (dim_vector (2 * nc, 1));
               FloatComplex *pz = z.fortran_vec ();
               Array<float> rz (dim_vector (2 * nc, 1));
               float *prz = rz.fortran_vec ();
 
               // Work around bug #45577, LAPACK crashes Octave if norm is NaN
               if (octave::math::isnan (anorm))
@@ -1898,17 +1918,17 @@ FloatComplexMatrix::fsolve (MatrixType& 
       if (typ == MatrixType::Hermitian)
         {
           info = 0;
           char job = 'L';
 
           FloatComplexMatrix atmp = *this;
           FloatComplex *tmp_data = atmp.fortran_vec ();
 
-          anorm = atmp.abs().sum().row(static_cast<octave_idx_type>(0)).max();
+          anorm = norm1 (atmp);
 
           F77_INT tmp_info = 0;
 
           F77_XFCN (cpotrf, CPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                      F77_CMPLX_ARG (tmp_data), nr, tmp_info
                                      F77_CHAR_ARG_LEN (1)));
 
           info = tmp_info;
@@ -1986,18 +2006,17 @@ FloatComplexMatrix::fsolve (MatrixType& 
 
           Array<FloatComplex> z (dim_vector (2 * nc, 1));
           FloatComplex *pz = z.fortran_vec ();
           Array<float> rz (dim_vector (2 * nc, 1));
           float *prz = rz.fortran_vec ();
 
           // Calculate the norm of the matrix, for later use.
           if (anorm < 0.)
-            anorm = atmp.abs ().sum ().row (static_cast<octave_idx_type>(0))
-                    .max ();
+            anorm = norm1 (atmp);
 
           F77_INT tmp_info = 0;
 
           // Work around bug #45577, LAPACK crashes Octave if norm is NaN
           // and bug #46330, segfault with matrices containing Inf & NaN
           if (octave::math::isnan (anorm) || octave::math::isinf (anorm))
             info = -2;
           else
@@ -2569,17 +2588,17 @@ FloatComplexMatrix::lssolve (const Float
 
           if (std::real (work(0)) < lworkaround)
             work(0) = lworkaround;
         }
 
       lwork = static_cast<F77_INT> (std::real (work(0)));
       work.resize (dim_vector (lwork, 1));
 
-      anorm = xnorm (*this, 1);
+      anorm = norm1 (*this);
 
       if (octave::math::isinf (anorm) || octave::math::isnan (anorm))
         {
           rcon = 0.0;
           octave::warn_singular_matrix ();
           retval = Matrix (n, b_nc, 0.0);
         }
       else
diff --git a/liboctave/array/fMatrix.cc b/liboctave/array/fMatrix.cc
--- a/liboctave/array/fMatrix.cc
+++ b/liboctave/array/fMatrix.cc
@@ -424,16 +424,38 @@ FloatMatrix::row (octave_idx_type i) con
 }
 
 FloatColumnVector
 FloatMatrix::column (octave_idx_type i) const
 {
   return index (idx_vector::colon, idx_vector (i));
 }
 
+// Local function to calculate the 1-norm.
+static
+float
+norm1 (const FloatMatrix& a)
+{
+  FloatColumnVector colsum = a.abs ().sum ().row (0);
+  float anorm = -octave::numeric_limits<float>::Inf ();
+
+  for (octave_idx_type i = 0; i < colsum.numel (); i++)
+    {
+      if (octave::math::isnan (colsum.xelem (i)))
+        {
+          anorm = octave::numeric_limits<float>::NaN ();
+          break;
+        }
+      else
+        anorm = std::max (anorm, colsum.xelem (i));
+    }
+
+  return anorm;
+}
+
 FloatMatrix
 FloatMatrix::inverse (void) const
 {
   octave_idx_type info;
   float rcon;
   MatrixType mattype (*this);
   return inverse (mattype, info, rcon, 0, 0);
 }
@@ -563,18 +585,17 @@ FloatMatrix::finverse (MatrixType& matty
   float *pz = z.fortran_vec ();
 
   info = 0;
   tmp_info = 0;
 
   // Calculate the norm of the matrix, for later use.
   float anorm = 0;
   if (calc_cond)
-    anorm = retval.abs ().sum ().row (static_cast<octave_idx_type>(0))
-            .max ();
+    anorm = norm1 (retval);
 
   F77_XFCN (sgetrf, SGETRF, (nc, nc, tmp_data, nr, pipvt, tmp_info));
 
   info = tmp_info;
 
   // Throw away extra info LAPACK gives so as to not change output.
   rcon = 0.0;
   if (info != 0)
@@ -1069,17 +1090,18 @@ FloatMatrix::determinant (MatrixType& ma
         retval *= elem (i,i);
     }
   else if (typ == MatrixType::Hermitian)
     {
       FloatMatrix atmp = *this;
       float *tmp_data = atmp.fortran_vec ();
 
       float anorm = 0;
-      if (calc_cond) anorm = xnorm (*this, 1);
+      if (calc_cond)
+        anorm = norm1 (*this);
 
       F77_INT tmp_info = 0;
 
       char job = 'L';
       F77_XFCN (spotrf, SPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                  tmp_data, nr, tmp_info
                                  F77_CHAR_ARG_LEN (1)));
 
@@ -1125,17 +1147,18 @@ FloatMatrix::determinant (MatrixType& ma
       FloatMatrix atmp = *this;
       float *tmp_data = atmp.fortran_vec ();
 
       info = 0;
       F77_INT tmp_info = 0;
 
       // Calculate the norm of the matrix, for later use.
       float anorm = 0;
-      if (calc_cond) anorm = xnorm (*this, 1);
+      if (calc_cond)
+        anorm = norm1 (*this);
 
       F77_XFCN (sgetrf, SGETRF, (nr, nr, tmp_data, nr, pipvt, tmp_info));
 
       info = tmp_info;
 
       // Throw away extra info LAPACK gives so as to not change output.
       rcon = 0.0;
       if (info != 0)
@@ -1271,18 +1294,17 @@ FloatMatrix::rcond (MatrixType& mattype)
           if (typ == MatrixType::Hermitian)
             {
               F77_INT info = 0;
               char job = 'L';
 
               FloatMatrix atmp = *this;
               float *tmp_data = atmp.fortran_vec ();
 
-              anorm = atmp.abs().sum().
-                      row(static_cast<octave_idx_type>(0)).max();
+              anorm = norm1 (atmp);
 
               F77_XFCN (spotrf, SPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                          tmp_data, nr, info
                                          F77_CHAR_ARG_LEN (1)));
 
               if (info != 0)
                 {
                   rcon = 0.0;
@@ -1312,18 +1334,17 @@ FloatMatrix::rcond (MatrixType& mattype)
 
               FloatMatrix atmp = *this;
               float *tmp_data = atmp.fortran_vec ();
 
               Array<F77_INT> ipvt (dim_vector (nr, 1));
               F77_INT *pipvt = ipvt.fortran_vec ();
 
               if (anorm < 0.)
-                anorm = atmp.abs ().sum ().
-                        row(static_cast<octave_idx_type>(0)).max ();
+                anorm = norm1 (atmp);
 
               Array<float> z (dim_vector (4 * nc, 1));
               float *pz = z.fortran_vec ();
               Array<F77_INT> iz (dim_vector (nc, 1));
               F77_INT *piz = iz.fortran_vec ();
 
               F77_XFCN (sgetrf, SGETRF, (nr, nr, tmp_data, nr, pipvt, info));
 
@@ -1587,17 +1608,17 @@ FloatMatrix::fsolve (MatrixType& mattype
       if (typ == MatrixType::Hermitian)
         {
           info = 0;
           char job = 'L';
 
           FloatMatrix atmp = *this;
           float *tmp_data = atmp.fortran_vec ();
 
-          anorm = atmp.abs().sum().row(static_cast<octave_idx_type>(0)).max();
+          anorm = norm1 (atmp);
 
           F77_INT tmp_info = 0;
 
           F77_XFCN (spotrf, SPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                      tmp_data, nr, tmp_info
                                      F77_CHAR_ARG_LEN (1)));
 
           info = tmp_info;
@@ -1668,18 +1689,18 @@ FloatMatrix::fsolve (MatrixType& mattype
           info = 0;
 
           Array<F77_INT> ipvt (dim_vector (nr, 1));
           F77_INT *pipvt = ipvt.fortran_vec ();
 
           FloatMatrix atmp = *this;
           float *tmp_data = atmp.fortran_vec ();
 
-          if (anorm < 0.)
-            anorm = atmp.abs().sum().row(static_cast<octave_idx_type>(0)).max();
+          if (anorm < 0.0)
+            anorm = norm1 (atmp);
 
           Array<float> z (dim_vector (4 * nc, 1));
           float *pz = z.fortran_vec ();
           Array<F77_INT> iz (dim_vector (nc, 1));
           F77_INT *piz = iz.fortran_vec ();
 
           F77_INT tmp_info = 0;
 
@@ -2093,16 +2114,17 @@ FloatMatrix::lssolve (const FloatMatrix&
 FloatMatrix
 FloatMatrix::lssolve (const FloatMatrix& b, octave_idx_type& info,
                       octave_idx_type& rank) const
 {
   float rcon;
   return lssolve (b, info, rank, rcon);
 }
 
+
 FloatMatrix
 FloatMatrix::lssolve (const FloatMatrix& b, octave_idx_type& info,
                       octave_idx_type& rank, float& rcon) const
 {
   FloatMatrix retval;
 
   F77_INT nrhs = octave::to_f77_int (b.cols ());
 
@@ -2222,17 +2244,17 @@ FloatMatrix::lssolve (const FloatMatrix&
 
           if (work(0) < lworkaround)
             work(0) = lworkaround;
         }
 
       lwork = static_cast<F77_INT> (work(0));
       work.resize (dim_vector (lwork, 1));
 
-      anorm = xnorm (*this, 1);
+      anorm = norm1 (*this);
 
       if (octave::math::isinf (anorm) || octave::math::isnan (anorm))
         {
           rcon = 0.0;
           octave::warn_singular_matrix ();
           retval = Matrix (n, b_nc, 0.0);
         }
       else
