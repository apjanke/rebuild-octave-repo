# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1444244485 -7200
#      Wed Oct 07 21:01:25 2015 +0200
# Node ID 734d446560a836afa1b275391427dbc520030e30
# Parent  f61c67865d9fe1d09b3d46766c8c962e8d00c352
possibility to hide filters in history and workspace view (bug#45428)

* history_dock_widget.cc(construct): use settings file for show/hide the filter;
  (~history_dock_widget): save current filter state to settings file;
  (ctxMenu): add menu entry for showing/hiding the filter;
  (handle_contextmenu_filter): slot for the new menu entry

* history-dock-widget.h: new slot for new menu entry, new class variables for
  filter and show/hide-state

* workspace-view.cc(workspace_view): use settings file for show/hide the filter;
  (~workspace_view): save current filter state to settings file;
  (contextmenu_requested): add menu entry for showing/hiding the filter;
  (handle_contextmenu_filter): slot for the new menu entry

* workspace-view.h: new slot for new menu entry, new class variables for
  filter and show/hide-state

diff --git a/libgui/src/history-dock-widget.cc b/libgui/src/history-dock-widget.cc
--- a/libgui/src/history-dock-widget.cc
+++ b/libgui/src/history-dock-widget.cc
@@ -89,31 +89,39 @@ history_dock_widget::construct ()
   QLabel *filter_label = new QLabel (tr ("Filter"));
 
   _filter_checkbox = new QCheckBox ();
 
   setWindowIcon (QIcon (":/actions/icons/logo.png"));
   set_title (tr ("Command History"));
   setWidget (new QWidget ());
 
-  QVBoxLayout *vbox_layout = new QVBoxLayout ();
-  QHBoxLayout *hbox_layout = new QHBoxLayout ();
-  hbox_layout->addWidget (filter_label);
-  hbox_layout->addWidget (_filter_checkbox);
-  hbox_layout->addWidget (_filter);
-  vbox_layout->addLayout (hbox_layout);
-  vbox_layout->addWidget (_history_list_view);
-  vbox_layout->setMargin (2);
+  _filter_widget = new QWidget (this);
+  QHBoxLayout *filter_layout = new QHBoxLayout ();
+  filter_layout->addWidget (filter_label);
+  filter_layout->addWidget (_filter_checkbox);
+  filter_layout->addWidget (_filter);
+  filter_layout->setMargin(0);
+  _filter_widget->setLayout (filter_layout);
 
-  widget ()->setLayout (vbox_layout);
+  QVBoxLayout *hist_layout = new QVBoxLayout ();
+  hist_layout->addWidget (_filter_widget);
+  hist_layout->addWidget (_history_list_view);
+
+  hist_layout->setMargin (2);
+  widget ()->setLayout (hist_layout);
 
   setFocusProxy (_filter->lineEdit ());
 
   // Init state of the filter
   QSettings *settings = resource_manager::get_settings ();
+
+  _filter_shown = settings->value ("history_dock_widget/filter_shown",true).toBool();
+  _filter_widget->setVisible (_filter_shown);
+
   _filter->addItems (settings->value ("history_dock_widget/mru_list").toStringList ());
 
   bool filter_state =
             settings->value ("history_dock_widget/filter_active", false).toBool ();
   _filter_checkbox->setChecked (filter_state);
   filter_activate (filter_state);
 
   // Connect signals and slots
@@ -137,16 +145,17 @@ history_dock_widget::construct ()
 }
 
 history_dock_widget::~history_dock_widget ()
 {
   QSettings *settings = resource_manager::get_settings ();
 
   settings->setValue ("history_dock_widget/filter_active",
                       _filter_checkbox->isChecked ());
+  settings->setValue ("history_dock_widget/filter_shown", _filter_shown);
 
   QStringList mru;
   for (int i = 0; i < _filter->count (); i++)
     mru.append (_filter->itemText (i));
   settings->setValue ("history_dock_widget/mru_list", mru);
 
   settings->sync ();
 }
@@ -186,18 +195,25 @@ void history_dock_widget::ctxMenu (const
     {
       menu.addAction (resource_manager::icon ("edit-copy"),
                   tr ("Copy"), this, SLOT (handle_contextmenu_copy (bool)));
       menu.addAction (tr ("Evaluate"), this,
                   SLOT (handle_contextmenu_evaluate (bool)));
       menu.addAction (resource_manager::icon ("document-new"),
                   tr ("Create script"), this,
                   SLOT (handle_contextmenu_create_script (bool)));
-      menu.exec (_history_list_view->mapToGlobal (xpos));
     }
+  if (_filter_shown)
+    menu.addAction (tr ("Hide filter"), this,
+                    SLOT (handle_contextmenu_filter ()));
+  else
+    menu.addAction (tr ("Show filter"), this,
+                    SLOT (handle_contextmenu_filter ()));
+
+  menu.exec (_history_list_view->mapToGlobal (xpos));
 }
 
 void history_dock_widget::handle_contextmenu_copy (bool)
 {
   QString text;
   QItemSelectionModel *selectionModel = _history_list_view->selectionModel ();
   QModelIndexList rows = selectionModel->selectedRows ();
   QModelIndexList::iterator it;
@@ -245,16 +261,22 @@ history_dock_widget::handle_contextmenu_
           prev_valid_row = true;
         }
     }
 
   if (text.length () > 0)
     emit command_create_script (text);
 }
 
+void
+history_dock_widget::handle_contextmenu_filter (void)
+{
+  _filter_shown = not _filter_shown;
+  _filter_widget->setVisible (_filter_shown);
+}
 
 void
 history_dock_widget::handle_double_click (QModelIndex modelIndex)
 {
   emit command_double_clicked (modelIndex.data ().toString ());
 }
 
 void
diff --git a/libgui/src/history-dock-widget.h b/libgui/src/history-dock-widget.h
--- a/libgui/src/history-dock-widget.h
+++ b/libgui/src/history-dock-widget.h
@@ -62,16 +62,17 @@ private slots:
 
   void update_filter_history ();
   void filter_activate (bool enable);
 
   void handle_double_click (QModelIndex modelIndex);
   void handle_contextmenu_copy (bool flag);
   void handle_contextmenu_evaluate (bool flag);
   void handle_contextmenu_create_script (bool flag);
+  void handle_contextmenu_filter (void);
   void ctxMenu (const QPoint &pos);
 
   void copyClipboard ();
   void pasteClipboard ();
   void selectAll ();
 
 private:
 
@@ -79,12 +80,14 @@ private:
   QListView *_history_list_view;
   QSortFilterProxyModel _sort_filter_proxy_model;
 
   /** Stores the current history_model. */
   QStringListModel *_history_model;
 
   QCheckBox *_filter_checkbox;
   QComboBox *_filter;
+  QWidget *_filter_widget;
+  bool _filter_shown;
   enum { MaxFilterHistory = 10 };
 };
 
 #endif // HISTORYDOCKWIDGET_H
diff --git a/libgui/src/workspace-view.cc b/libgui/src/workspace-view.cc
--- a/libgui/src/workspace-view.cc
+++ b/libgui/src/workspace-view.cc
@@ -70,33 +70,42 @@ workspace_view::workspace_view (QWidget 
   view->setShowGrid (false);
   (view->verticalHeader) ()->hide ();
   view->setAlternatingRowColors (true);
   view_previous_row_count = 0;
 
   // Set an empty widget, so we can assign a layout to it.
   setWidget (new QWidget (this));
 
-  // Create a new layout and add widgets to it.
-  QVBoxLayout *vbox_layout = new QVBoxLayout ();
-  QHBoxLayout *hbox_layout = new QHBoxLayout ();
-  hbox_layout->addWidget (filter_label);
-  hbox_layout->addWidget (_filter_checkbox);
-  hbox_layout->addWidget (_filter);
-  vbox_layout->addLayout (hbox_layout);
-  vbox_layout->addWidget (view);
-  vbox_layout->setMargin (2);
+  // Create the layouts
+  _filter_widget = new QWidget (this);
+  QHBoxLayout *filter_layout = new QHBoxLayout ();
+
+  filter_layout->addWidget (filter_label);
+  filter_layout->addWidget (_filter_checkbox);
+  filter_layout->addWidget (_filter);
+  filter_layout->setMargin(0);
+  _filter_widget->setLayout (filter_layout);
+
+  QVBoxLayout *ws_layout = new QVBoxLayout ();
+  ws_layout->addWidget (_filter_widget);
+  ws_layout->addWidget (view);
+
+  QSettings *settings = resource_manager::get_settings ();
+
+  _filter_shown = settings->value ("workspaceview/filter_shown",true).toBool();
+  _filter_widget->setVisible (_filter_shown);
+
+  ws_layout->setMargin (2);
 
   // Set the empty widget to have our layout.
-  widget ()->setLayout (vbox_layout);
+  widget ()->setLayout (ws_layout);
 
   // Initialize collapse/expand state of the workspace subcategories.
 
-  QSettings *settings = resource_manager::get_settings ();
-
   //enable sorting (setting column and order after model was set)
   view->setSortingEnabled (true);
   // Initialize column order and width of the workspace
   view->horizontalHeader ()->restoreState (
     settings->value ("workspaceview/column_state").toByteArray ());
   // Set header properties for sorting
   view->horizontalHeader ()->setClickable (true);
   view->horizontalHeader ()->setMovable (true);
@@ -124,33 +133,33 @@ workspace_view::workspace_view (QWidget 
   connect (_filter->lineEdit (), SIGNAL (editingFinished ()),
            this, SLOT (update_filter_history ()));
 
   connect (view, SIGNAL (customContextMenuRequested (const QPoint&)),
            this, SLOT (contextmenu_requested (const QPoint&)));
 
   connect (this, SIGNAL (command_requested (const QString&)),
            p, SLOT (execute_command_in_terminal (const QString&)));
-
 }
 
 workspace_view::~workspace_view (void)
 {
   QSettings *settings = resource_manager::get_settings ();
 
   settings->setValue ("workspaceview/column_state",
                       view->horizontalHeader ()->saveState ());
 
   int sort_column = view->horizontalHeader ()->sortIndicatorSection ();
   Qt::SortOrder sort_order = view->horizontalHeader ()->sortIndicatorOrder ();
   settings->setValue ("workspaceview/sort_by_column", sort_column);
   settings->setValue ("workspaceview/sort_order", sort_order);
 
   settings->setValue ("workspaceview/filter_active",
                       _filter_checkbox->isChecked ());
+  settings->setValue ("workspaceview/filter_shown", _filter_shown);
 
   QStringList mru;
   for (int i = 0; i < _filter->count (); i++)
     mru.append (_filter->itemText (i));
   settings->setValue ("workspaceview/mru_list", mru);
 
   settings->sync ();
 }
@@ -258,18 +267,28 @@ workspace_view::contextmenu_requested (c
                       SLOT (handle_contextmenu_disp ()));
 
       menu.addAction ("plot (" + var_name + ")", this,
                       SLOT (handle_contextmenu_plot ()));
 
       menu.addAction ("stem (" + var_name + ")", this,
                       SLOT (handle_contextmenu_stem ()));
 
-      menu.exec (view->mapToGlobal (qpos));
+      menu.addSeparator ();
+
     }
+
+  if (_filter_shown)
+    menu.addAction (tr ("Hide filter"), this,
+                    SLOT (handle_contextmenu_filter ()));
+  else
+    menu.addAction (tr ("Show filter"), this,
+                    SLOT (handle_contextmenu_filter ()));
+
+  menu.exec (view->mapToGlobal (qpos));
 }
 
 void
 workspace_view::handle_contextmenu_copy (void)
 {
   QModelIndex index = view->currentIndex ();
 
   if (index.isValid ())
@@ -354,16 +373,23 @@ workspace_view::relay_contextmenu_comman
     {
       QString var_name = get_var_name (index);
 
       emit command_requested (cmdname + " (" + var_name + ");");
     }
 }
 
 void
+workspace_view::handle_contextmenu_filter (void)
+{
+  _filter_shown = not _filter_shown;
+  _filter_widget->setVisible (_filter_shown);
+}
+
+void
 workspace_view::handle_model_changed (void)
 {
 //  view->resizeRowsToContents ();
   // Just modify those rows that have been added rather than go through
   // the whole list.  For-loop test will handle when number of rows reduced.
   QFontMetrics fm = view->fontMetrics ();
   int row_height =  fm.height ();
   int new_row_count = _filter_model.rowCount ();
diff --git a/libgui/src/workspace-view.h b/libgui/src/workspace-view.h
--- a/libgui/src/workspace-view.h
+++ b/libgui/src/workspace-view.h
@@ -65,16 +65,17 @@ protected slots:
 
   // context menu slots
   void handle_contextmenu_copy (void);
   void handle_contextmenu_copy_value (void);
   void handle_contextmenu_rename (void);
   void handle_contextmenu_disp (void);
   void handle_contextmenu_plot (void);
   void handle_contextmenu_stem (void);
+  void handle_contextmenu_filter (void);
 
   void handle_model_changed (void);
 
   void copyClipboard ();
   void selectAll ();
 
   void filter_update (const QString& expression);
   void filter_activate (bool enable);
@@ -87,12 +88,15 @@ private:
   QString get_var_name (QModelIndex index);
   QTableView *view;
   int view_previous_row_count;
   workspace_model *_model;
 
   QSortFilterProxyModel _filter_model;
   QCheckBox *_filter_checkbox;
   QComboBox *_filter;
+  QWidget *_filter_widget;
+  bool _filter_shown;
+
   enum { MaxFilterHistory = 10 };
 };
 
 #endif
