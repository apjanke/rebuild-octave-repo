# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1460484687 -3600
#      Tue Apr 12 19:11:27 2016 +0100
# Node ID 32cd60419b618ecbab701a8a69b75b1b17981019
# Parent  9ccd64201b4db4fbe35b362d6f321a74756845f9
pkg: add support for [a-z.+-~] characters on package version number string.

* pkg/private/get_description.m: currently pkg enforces a x.y.z (major,
minor, and patch) numeric style for the string representing a package
version.  In addition, it will silently append a ".0" if the string is
missing the patch version which causes weird errors for downstream
packagers.  However, there seems to be no reason in the code for this
limitation which prevents 'x.y.z+' or 'x.y.z-rcN'.  A real limitation we
will have is that version string will be used in the package filepath.
This change just expands the valid characters for the version string.
It does not change the requirement when installing packages with the
-forge option though (but Octave forge packages only have the x.y.z
version string anyway).

diff --git a/scripts/pkg/private/get_description.m b/scripts/pkg/private/get_description.m
--- a/scripts/pkg/private/get_description.m
+++ b/scripts/pkg/private/get_description.m
@@ -64,42 +64,30 @@ function desc = get_description (filenam
   ## Make sure all is okay.
   needed_fields = {"name", "version", "date", "title", ...
                    "author", "maintainer", "description"};
   for f = needed_fields
     if (! isfield (desc, f{1}))
       error ("description is missing needed field %s", f{1});
     endif
   endfor
-  desc.version = fix_version (desc.version);
+
+  if (! is_valid_pkg_version_string (desc.version))
+    error ("invalid version string '%s'", desc.version);
+  endif
+
   if (isfield (desc, "depends"))
     desc.depends = fix_depends (desc.depends);
   else
     desc.depends = "";
   endif
   desc.name = tolower (desc.name);
 endfunction
 
 
-## Make sure the version string v is a valid x.y.z version string
-## Examples: "0.1" => "0.1.0", "monkey" => error(...).
-function out = fix_version (v)
-  if (regexp (v, '^\d+(\.\d+){1,2}$') == 1)
-    parts = ostrsplit (v, '.', true);
-    if (numel (parts) == 2)
-      out = [v ".0"];
-    else
-      out = v;
-    endif
-  else
-    error ("bad version string: %s", v);
-  endif
-endfunction
-
-
 ## Make sure the depends field is of the right format.
 ## This function returns a cell of structures with the following fields:
 ##   package, version, operator
 function deps_cell = fix_depends (depends)
   deps = strtrim (ostrsplit (tolower (depends), ","));
   deps_cell = cell (1, length (deps));
   dep_pat = ...
   '\s*(?<name>[-\w]+)\s*(\(\s*(?<op>[<>=]+)\s*(?<ver>\d+\.\d+(\.\d+)*)\s*\))*\s*';
@@ -114,26 +102,38 @@ function deps_cell = fix_depends (depend
       package = tolower (strtrim (nm.name));
       ## Does the dependency specify a version
       ## Example: package(>= version).
       if (! isempty (nm.ver))
         operator = nm.op;
         if (! any (strcmp (operator, {">", ">=", "<=", "<", "=="})))
           error ("unsupported operator: %s", operator);
         endif
-        version = fix_version (nm.ver);
+        if (! is_valid_pkg_version_string (nm.ver))
+          error ("invalid dependency version string '%s'", nm.ver);
+        endif
+      else
         ## If no version is specified for the dependency
         ## we say that the version should be greater than
         ## or equal to "0.0.0".
-      else
         package = tolower (strtrim (dep));
         operator = ">=";
-        version = "0.0.0";
+        nm.ver  = "0.0.0";
       endif
       deps_cell{i} = struct ("package", package,
                              "operator", operator,
-                             "version", version);
+                             "version", nm.ver);
     else
       error ("incorrect syntax for dependency '%s' in the DESCRIPTION file\n",
              dep);
     endif
   endfor
 endfunction
+
+function [valid] = is_valid_pkg_version_string (str)
+  ## We are limiting ourselves to this set of characters because the
+  ## version will appear on the filepath.  The portable character, according
+  ## to http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_278
+  ## is [A-Za-z0-9\.\_\-].  However, this is very limited.  We expand this
+  ## set with the characters supported by Debian with the exception of ":"
+  ## (we do not support ":" (colon) because that's the Octave path separator.
+  valid = numel (regexp (str, '[^0-9a-zA-Z\.\+\-\~]')) == 0;
+endfunction
