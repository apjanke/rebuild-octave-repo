# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1239873649 -7200
#      Thu Apr 16 11:20:49 2009 +0200
# Node ID 5780b3b8042522090399b53185af7674d41dff91
# Parent  8ab1e6f63cdc98fbb95b279ecab51ee581b6f3ea
optimize toeplitz for sparse args

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-04-16  Marco Caliari <marco.caliari@univr.it>
+
+	* toeplitz.m: Treat separately the sparse case.
+
 2009-04-14  Thomas Treichl  <Thomas.Treichl@gmx.net>
 
 	* plot/__marching_cube__.m: Add help text.
 	* plot/isonormals.m: Add help text and tests.
 
 2009-04-14  David Bateman  <dbateman@free.fr>
 
 	* plot/__patch__.m: Set default facecolor to [0,1,0].
diff --git a/scripts/special-matrix/toeplitz.m b/scripts/special-matrix/toeplitz.m
--- a/scripts/special-matrix/toeplitz.m
+++ b/scripts/special-matrix/toeplitz.m
@@ -86,25 +86,38 @@ function retval = toeplitz (c, r)
   ## Hermitian-symmetric matrix (actually, this will really only be
   ## Hermitian-symmetric if the first element of the vector is real).
 
   if (nargin == 1 && iscomplex (c))
     c = conj (c);
     c(1) = conj (c(1));
   endif
 
-  ## Concatenate data into a single column vector.
-  data = [r(end:-1:2)(:); c(:)];
+  if (issparse(c) && issparse(r))
+    c = c(:).';
+    r = r(:).';
+    cidx = find(c);
+    ridx = find(r);
+
+    ## Ignore the first element in r.
+    ridx = ridx(ridx > 1);
 
-  ## Get slices.
-  slices = cellslices (data, nc:-1:1, nc+nr-1:-1:nr);
+    ## Form matrix.
+    retval = spdiags(repmat(c(cidx),nr,1),1-cidx,nr,nc)+...
+	spdiags(repmat(r(ridx),nr,1),ridx-1,nr,nc);
+  else  
+    ## Concatenate data into a single column vector.
+    data = [r(end:-1:2)(:); c(:)];
 
-  ## Form matrix.
-  retval = horzcat (slices{:});
+    ## Get slices.
+    slices = cellslices (data, nc:-1:1, nc+nr-1:-1:nr);
 
+    ## Form matrix.
+    retval = horzcat (slices{:});
+  endif
 endfunction
 
 %!assert((toeplitz (1) == 1
 %! && toeplitz ([1, 2, 3], [1; -3; -5]) == [1, -3, -5; 2, 1, -3; 3, 2, 1]
 %! && toeplitz ([1, 2, 3], [1; -3i; -5i]) == [1, -3i, -5i; 2, 1, -3i; 3, 2, 1]));
 
 %!error toeplitz ([1, 2; 3, 4], 1);
 
