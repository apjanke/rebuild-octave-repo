# HG changeset patch
# User jwe
# Date 1041624042 0
#      Fri Jan 03 20:00:42 2003 +0000
# Node ID d9f281027014275704b3d89a429c594d8b6f6a73
# Parent  fd406afe8a10ef58b39eec5eb29a8b5bf055789c
[project @ 2003-01-03 19:58:12 by jwe]

diff --git a/liboctave/ArrayN-idx.h b/liboctave/ArrayN-idx.h
--- a/liboctave/ArrayN-idx.h
+++ b/liboctave/ArrayN-idx.h
@@ -37,98 +37,98 @@ ArrayN<T>
 ArrayN<T>::value (void)
 {
   ArrayN<T> retval;
 
   int n_idx = index_count ();
 
   if (n_idx > 1)
     {
-      Array<idx_vector> idx (n_idx);
+      Array<idx_vector> ra_idx (n_idx);
 
       idx_vector *tmp = get_idx ();
 
       for (int i = 0; i < n_idx; i++)
-	idx(i) = tmp[i];
+	ra_idx(i) = tmp[i];
 
-      return index (idx);
+      return index (ra_idx);
     }
   else if (n_idx == 1)
     {
       idx_vector *tmp = get_idx ();
 
-      idx_vector idx = tmp[0];
+      idx_vector ra_idx = tmp[0];
 
-      return index (idx);
+      return index (ra_idx);
     }
   else
     (*current_liboctave_error_handler)
       ("invalid number of indices for array expression");
 
   clear_index ();
 
   return retval;
 }
 
 template <class T>
 ArrayN<T>
-ArrayN<T>::index (idx_vector& idx, int resize_ok,
+ArrayN<T>::index (idx_vector& ra_idx, int resize_ok,
 		  const T& resize_fill_value) const
 {
   ArrayN<T> retval;
   assert (0);
   return retval;
 }
 
 static inline Array<int>
-freeze (Array<idx_vector>& idx, const Array<int>& dimensions, int resize_ok)
+freeze (Array<idx_vector>& ra_idx, const Array<int>& dimensions, int resize_ok)
 {
   Array<int> retval;
 
-  int n = idx.length ();
+  int n = ra_idx.length ();
 
   assert (n == dimensions.length ());
 
   retval.resize (n);
 
   for (int i = 0; i < n; i++)
-    retval(i) = idx(i).freeze (dimensions(i), "XXX FIXME XXX", resize_ok);
+    retval(i) = ra_idx(i).freeze (dimensions(i), "XXX FIXME XXX", resize_ok);
 
   return retval;
 }
 
 static inline bool
-all_ok (const Array<idx_vector>& idx)
+all_ok (const Array<idx_vector>& ra_idx)
 {
   bool retval = true;
 
-  int n = idx.length ();
+  int n = ra_idx.length ();
 
   for (int i = 0; i < n; i++)
     {
-      if (! idx(i))
+      if (! ra_idx(i))
 	{
 	  retval = false;
 	  break;
 	}
     }
 
   return retval;
 }
 
 static inline bool
-any_orig_empty (const Array<idx_vector>& idx)
+any_orig_empty (const Array<idx_vector>& ra_idx)
 {
   bool retval = false;
 
-  int n = idx.length ();
+  int n = ra_idx.length ();
 
   for (int i = 0; i < n; i++)
     {
-      if (idx(i).orig_empty ())
+      if (ra_idx(i).orig_empty ())
 	{
 	  retval = true;
 	  break;
 	}
     }
 
   return retval;
 }
@@ -157,79 +157,79 @@ get_zero_len_size (const Array<int>& fro
 		   const Array<int>& dimensions)
 {
   Array<int> retval;
   assert (0);
   return retval;
 }
 
 static inline bool
-all_colon_equiv (const Array<idx_vector>& idx,
+all_colon_equiv (const Array<idx_vector>& ra_idx,
 		 const Array<int>& frozen_lengths)
 {
   bool retval = true;
 
-  int idx_n = idx.length ();
+  int idx_n = ra_idx.length ();
 
   int n = frozen_lengths.length ();
 
   assert (idx_n == n);
 
   for (int i = 0; i < n; i++)
     {
-      if (! idx(i).is_colon_equiv (frozen_lengths(i)))
+      if (! ra_idx(i).is_colon_equiv (frozen_lengths(i)))
 	{
 	  retval = false;
 	  break;
 	}
     }
 
   return retval;
 }
 
 static Array<int>
-get_elt_idx (const Array<idx_vector>& idx, const Array<int>& result_idx)
+get_elt_idx (const Array<idx_vector>& ra_idx, const Array<int>& result_idx)
 {
-  int n = idx.length ();
+  int n = ra_idx.length ();
 
   Array<int> retval (n);
 
   for (int i = 0; i < n; i++)
-    retval(i) = idx(result_idx(i));
+    retval(i) = ra_idx(result_idx(i));
 
   return retval;
 }
 
 template <class T>
 ArrayN<T>
-ArrayN<T>::index (Array<idx_vector>& arr_idx, int resize_ok,
+ArrayN<T>::index (Array<idx_vector>& ra_idx, int resize_ok,
 		  const T& resize_fill_value) const
 {
   ArrayN<T> retval;
 
   int n_dims = dimensions.length ();
 
-  Array<int> frozen_lengths = freeze (arr_idx, dimensions, resize_ok);
+  Array<int> frozen_lengths = freeze (ra_idx, dimensions, resize_ok);
 
   if (frozen_lengths.length () == n_dims)
     {
-      if (all_ok (arr_idx))
+      if (all_ok (ra_idx))
 	{
-	  if (any_orig_empty (arr_idx))
+	  if (any_orig_empty (ra_idx))
 	    {
 	      retval.resize (frozen_lengths);
 	    }
 	  else if (any_zero_len (frozen_lengths))
 	    {
 	      Array<int> new_size = get_zero_len_size (frozen_lengths,
 						       dimensions);
 
 	      retval.resize (new_size);
 	    }
-	  else if (all_colon_equiv (arr_idx, frozen_lengths))
+	  else if (all_colon_equiv (ra_idx, frozen_lengths))
 	    {
 	      retval = *this;
 	    }
 	  else
 	    {
 #if 0
 	      retval.resize (frozen_lengths);
 
diff --git a/liboctave/ArrayN.cc b/liboctave/ArrayN.cc
--- a/liboctave/ArrayN.cc
+++ b/liboctave/ArrayN.cc
@@ -41,45 +41,45 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "lo-error.h"
 
 // N-dimensional array class.
 
 template <class T>
 int
-ArrayN<T>::compute_index (const Array<int>& arr_idx) const
+ArrayN<T>::compute_index (const Array<int>& ra_idx) const
 {
   int retval = -1;
 
   int n = dimensions.length ();
 
-  if (n > 0 && n == arr_idx.length ())
+  if (n > 0 && n == ra_idx.length ())
     {
-      retval = arr_idx(--n);
+      retval = ra_idx(--n);
 
       while (--n >= 0)
 	{
 	  retval *= dimensions(n);
-	  retval += arr_idx(n);
+	  retval += ra_idx(n);
 	}
     }
   else
     (*current_liboctave_error_handler)
-      ("ArrayN<T>::compute_index: invalid arr_idxing operation");
+      ("ArrayN<T>::compute_index: invalid ra_idxing operation");
 
   return retval;
 }
 
 // A guess (should be quite conservative).
 #define MALLOC_OVERHEAD 1024
 
 template <class T>
 int
-ArrayN<T>::get_size (const Array<int>& arr_idx)
+ArrayN<T>::get_size (const Array<int>& ra_idx)
 {
   // XXX KLUGE XXX
 
   // If an allocation of an array with r * c elements of type T
   // would cause an overflow in the allocator when computing the
   // size of the allocation, then return a value which, although
   // not equivalent to the actual request, should be too large for
   // most current hardware, but not so large to cause the
@@ -92,114 +92,114 @@ ArrayN<T>::get_size (const Array<int>& a
 
   // This value should be an integer.  If we return this value and
   // things work the way we expect, we should be paying a visit to
   // new_handler in no time flat.
   static int max_items = static_cast<int> (ldexp (dl, nl));
 
   int retval = max_items;
 
-  int n = arr_idx.length ();
+  int n = ra_idx.length ();
 
   int nt = 0;
   double dt = 1;
 
   for (int i = 0; i < n; i++)
     {
-      int narr_idx;
-      double darr_idx = frexp (static_cast<double> (arr_idx(i)), &narr_idx);
+      int nra_idx;
+      double dra_idx = frexp (static_cast<double> (ra_idx(i)), &nra_idx);
 
-      nt += narr_idx;
-      dt *= darr_idx;
+      nt += nra_idx;
+      dt *= dra_idx;
     }
 
   if (dt <= 0.5)
     {
       nt--;
       dt *= 2;
 
       if (dt <= 0.5)
 	nt--;
     }
 
   if (nt < nl || (nt == nl && dt < dl))
     {
       retval = 1;
 
       for (int i = 0; i < n; i++)
-	retval *= arr_idx(i);
+	retval *= ra_idx(i);
     }
 
   return retval;
 }
 
 #undef MALLOC_OVERHEAD
 
 template <class T>
 T
-ArrayN<T>::range_error (const char *fcn, const Array<int>& arr_idx) const
+ArrayN<T>::range_error (const char *fcn, const Array<int>& ra_idx) const
 {
   // XXX FIXME XXX -- report index values too!
 
   (*current_liboctave_error_handler) ("range error in ArrayN");
 
   return T ();
 }
 
 template <class T>
 T&
-ArrayN<T>::range_error (const char *fcn, const Array<int>& arr_idx)
+ArrayN<T>::range_error (const char *fcn, const Array<int>& ra_idx)
 {
   // XXX FIXME XXX -- report index values too!
 
   (*current_liboctave_error_handler) ("range error in ArrayN");
 
   static T foo;
   return foo;
 }
 
 static inline bool
-index_in_bounds (const Array<int>& arr_idx, const Array<int>& dimensions)
+index_in_bounds (const Array<int>& ra_idx, const Array<int>& dimensions)
 {
   bool retval = true;
 
-  int n = arr_idx.length ();
+  int n = ra_idx.length ();
 
   if (n == dimensions.length ())
     {
       for (int i = 0; i < n; i++)
 	{
-	  if (arr_idx(i) < 0 || arr_idx(i) >= dimensions (i))
+	  if (ra_idx(i) < 0 || ra_idx(i) >= dimensions (i))
 	    {
 	      retval = false;
 	      break;
 	    }
 	}
     }
   else
     retval = false;
 
   return retval;
 }
 
 static inline void
-increment_index (Array<int>& arr_idx, const Array<int>& dimensions)
+increment_index (Array<int>& ra_idx, const Array<int>& dimensions)
 {
-  arr_idx(0)++;
+  ra_idx(0)++;
 
-  int n = arr_idx.length () - 1;
+  int n = ra_idx.length () - 1;
 
   for (int i = 0; i < n; i++)
     {
-      if (arr_idx(i) < dimensions(i))
+      if (ra_idx(i) < dimensions(i))
 	break;
       else
 	{
-	  arr_idx(i) = 0;
-	  arr_idx(i+1)++;
+	  ra_idx(i) = 0;
+	  ra_idx(i+1)++;
 	}
     }
 }
 
 template <class T>
 void
 ArrayN<T>::resize (const Array<int>& dims)
 {
@@ -235,24 +235,24 @@ ArrayN<T>::resize (const Array<int>& dim
   rep = new typename Array<T>::ArrayRep (get_size (dims));
 
   Array<int> old_dimensions = dimensions;
 
   int old_len = length ();
 
   dimensions = dims;
 
-  Array<int> arr_idx (dimensions.length (), 0);
+  Array<int> ra_idx (dimensions.length (), 0);
 
   for (int i = 0; i < old_len; i++)
     {
-      if (index_in_bounds (arr_idx, dimensions))
-	xelem (arr_idx) = old_data[i];
+      if (index_in_bounds (ra_idx, dimensions))
+	xelem (ra_idx) = old_data[i];
 
-      increment_index (arr_idx, dimensions);
+      increment_index (ra_idx, dimensions);
     }
 
   if (--old_rep->count <= 0)
     delete old_rep;
 }
 
 template <class T>
 void
@@ -292,46 +292,46 @@ ArrayN<T>::resize (const Array<int>& dim
   rep = new typename Array<T>::ArrayRep (len);
 
   Array<int> old_dimensions = dimensions;
 
   int old_len = length ();
 
   dimensions = dims;
 
-  Array<int> arr_idx (dimensions.length (), 0);
+  Array<int> ra_idx (dimensions.length (), 0);
 
   for (int i = 0; i < len; i++)
     rep->elem (i) = val;
 
   for (int i = 0; i < old_len; i++)
     {
-      if (index_in_bounds (arr_idx, dimensions))
-	xelem (arr_idx) = old_data[i];
+      if (index_in_bounds (ra_idx, dimensions))
+	xelem (ra_idx) = old_data[i];
 
-      increment_index (arr_idx, dimensions);
+      increment_index (ra_idx, dimensions);
     }
 
   if (--old_rep->count <= 0)
     delete old_rep;
 }
 
 template <class T>
 ArrayN<T>&
-ArrayN<T>::insert (const ArrayN<T>& a, const Array<int>& arr_idx)
+ArrayN<T>::insert (const ArrayN<T>& a, const Array<int>& ra_idx)
 {
-  int n = arr_idx.length ();
+  int n = ra_idx.length ();
 
   if (n == dimensions.length ())
     {
       Array<int> a_dims = a.dims ();
 
       for (int i = 0; i < n; i++)
 	{
-	  if (arr_idx(i) < 0 || arr_idx(i) + a_dims(i) > dimensions(i))
+	  if (ra_idx(i) < 0 || ra_idx(i) + a_dims(i) > dimensions(i))
 	    {
 	      (*current_liboctave_error_handler)
 		("ArrayN<T>::insert: range error for insert");
 	      return *this;
 	    }
 	}
 
 #if 0
diff --git a/liboctave/ArrayN.h b/liboctave/ArrayN.h
--- a/liboctave/ArrayN.h
+++ b/liboctave/ArrayN.h
@@ -99,95 +99,95 @@ public:
 	{
 	  Array<T>::operator = (a);
 	  dimensions = a.dimensions;
 	}
 
       return *this;
     }
 
-  int compute_index (const Array<int>& idx) const;
+  int compute_index (const Array<int>& ra_idx) const;
 
   Array<int> dims (void) const { return dimensions; }
 
-  T range_error (const char *fcn, const Array<int>& idx) const;
-  T& range_error (const char *fcn, const Array<int>& idx);
+  T range_error (const char *fcn, const Array<int>& ra_idx) const;
+  T& range_error (const char *fcn, const Array<int>& ra_idx);
 
   // No checking of any kind, ever.
 
-  T& xelem (const Array<int>& idx)
-    { return Array<T>::xelem (compute_index (idx)); }
+  T& xelem (const Array<int>& ra_idx)
+    { return Array<T>::xelem (compute_index (ra_idx)); }
 
-  T xelem (const Array<int>& idx) const
-    { return Array<T>::xelem (compute_index (idx)); }
+  T xelem (const Array<int>& ra_idx) const
+    { return Array<T>::xelem (compute_index (ra_idx)); }
 
   // Note that the following element selection methods don't use
   // xelem() because they need to make use of the code in
   // Array<T>::elem() that checks the reference count.
 
-  T& checkelem (const Array<int>& idx)
+  T& checkelem (const Array<int>& ra_idx)
     {
-      int i = compute_index (idx);
+      int i = compute_index (ra_idx);
 
       if (i < 0)
-	return range_error ("ArrayN<T>::checkelem", idx);
+	return range_error ("ArrayN<T>::checkelem", ra_idx);
       else
 	return Array<T>::elem (i);
     }
 
-  T& elem (const Array<int>& idx)
+  T& elem (const Array<int>& ra_idx)
     {
-      int i = compute_index (idx);
+      int i = compute_index (ra_idx);
 
       return Array<T>::elem (i);
     }
 
 #if defined (BOUNDS_CHECKING)
-  T& operator () (const Array<int>& idx) { return checkelem (idx); }
+  T& operator () (const Array<int>& ra_idx) { return checkelem (ra_idx); }
 #else
-  T& operator () (const Array<int>& idx) { return elem (idx); }
+  T& operator () (const Array<int>& ra_idx) { return elem (ra_idx); }
 #endif
 
-  T checkelem (const Array<int>& idx) const
+  T checkelem (const Array<int>& ra_idx) const
     {
-      int i = compute_index (idx);
+      int i = compute_index (ra_idx);
 
       if (i < 0)
-	return range_error ("ArrayN<T>::checkelem", idx);
+	return range_error ("ArrayN<T>::checkelem", ra_idx);
       else
 	return Array<T>::elem (i);
     }
 
-  T elem (const Array<int>& idx) const
+  T elem (const Array<int>& ra_idx) const
     {
-      int i = compute_index (idx);
+      int i = compute_index (ra_idx);
 
       return Array<T>::elem (i);
     }
 
 #if defined (BOUNDS_CHECKING)
-  T operator () (const Array<int>& idx) const { return checkelem (idx); }
+  T operator () (const Array<int>& ra_idx) const { return checkelem (ra_idx); }
 #else
-  T operator () (const Array<int>& idx) const { return elem (idx); }
+  T operator () (const Array<int>& ra_idx) const { return elem (ra_idx); }
 #endif
 
   void resize (const Array<int>& dims);
   void resize (const Array<int>& dims, const T& val);
 
   ArrayN<T>& insert (const ArrayN<T>& a, const Array<int>& dims);
 
 #ifdef HEAVYWEIGHT_INDEXING
-  void maybe_delete_elements (Array<idx_vector>& idx);
+  void maybe_delete_elements (Array<idx_vector>& ra_idx);
 
   ArrayN<T> value (void);
 
-  ArrayN<T> index (idx_vector& idx, int resize_ok = 0,
+  ArrayN<T> index (idx_vector& ra_idx, int resize_ok = 0,
 		   const T& rfv = Array<T>::resize_fill_value ()) const;
 
-  ArrayN<T> index (Array<idx_vector>& idx, int resize_ok = 0,
+  ArrayN<T> index (Array<idx_vector>& ra_idx, int resize_ok = 0,
 		   const T& rfv = Array<T>::resize_fill_value ()) const;
 
 #endif
 };
 
 template <class LT, class RT>
 int
 assign (ArrayN<LT>& lhs, const ArrayN<RT>& rhs, const LT& resize_fill_value);
