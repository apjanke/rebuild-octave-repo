# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1504028416 25200
#      Tue Aug 29 10:40:16 2017 -0700
# Node ID df726a12c75778dc2c021f82056abad212fde12a
# Parent  b833c7334308dd4e17bb1c071c1c2784214a915a
datevec: fix parsing of date strings during daylight saving transition (bug #36954)

* datevec.m (__date_str2vec__): Set TZ to UTC0 temporarily to ignore local
time zone settings when parsing date strings.  Add %!tests.

diff --git a/scripts/time/datevec.m b/scripts/time/datevec.m
--- a/scripts/time/datevec.m
+++ b/scripts/time/datevec.m
@@ -245,48 +245,62 @@ function [f, rY, ry, fy, fm, fd, fh, fmi
   fh = index (f, "%H") || index (f, "%I");
   fmi = index (f, "%M");
   fs = index (f, "%S");
 
 endfunction
 
 function [found, y, m, d, h, mi, s] = __date_str2vec__ (ds, p, f, rY, ry, fy, fm, fd, fh, fmi, fs)
 
-  idx = strfind (f, "FFF");
-  if (! isempty (idx))
-    ## Kludge to handle FFF millisecond format since strptime does not.
+  ## Local time zone is irrelevant, and potentially dangerous, when using
+  ## strptime to simply convert a string into a broken down struct tm.
+  ## Set and restore TZ so time is parsed exactly as-is. See bug #36954.
+  TZ_orig = getenv ("TZ");
+  unwind_protect
+    setenv ("TZ", "UTC0");
 
-    ## Find location of FFF in ds.
-    ## Might not match idx because of things like yyyy -> %y.
-    [~, nc] = strptime (ds, f(1:idx-1));
+    idx = strfind (f, "FFF");
+    if (! isempty (idx))
+      ## Kludge to handle FFF millisecond format since strptime does not.
 
-    msec = ds(nc:min (nc+2,end)); # pull 3-digit fractional seconds.
-    msec_idx = find (! isdigit (msec), 1);
+      ## Find location of FFF in ds.
+      ## Might not match idx because of things like yyyy -> %y.
+      [~, nc] = strptime (ds, f(1:idx-1));
+
+      msec = ds(nc:min (nc+2,end)); # pull 3-digit fractional seconds.
+      msec_idx = find (! isdigit (msec), 1);
 
-    if (! isempty (msec_idx))  # non-digits in msec
-      msec = msec(1:msec_idx-1);
-      msec(end+1:3) = "0";     # pad msec with trailing zeros
-      ds = [ds(1:(nc-1)), msec, ds((nc-1)+msec_idx:end)];  # zero pad ds
-    elseif (numel (msec) < 3)  # less than three digits in msec
-      m_len = numel (msec);
-      msec(end+1:3) = "0";     # pad msec with trailing zeros
-      ds = [ds(1:(nc-1)), msec, ds(nc+m_len:end)];  # zero pad ds as well
-    endif
+      if (! isempty (msec_idx))  # non-digits in msec
+        msec = msec(1:msec_idx-1);
+        msec(end+1:3) = "0";     # pad msec with trailing zeros
+        ds = [ds(1:(nc-1)), msec, ds((nc-1)+msec_idx:end)];  # zero pad ds
+      elseif (numel (msec) < 3)  # less than three digits in msec
+        m_len = numel (msec);
+        msec(end+1:3) = "0";     # pad msec with trailing zeros
+        ds = [ds(1:(nc-1)), msec, ds(nc+m_len:end)];  # zero pad ds as well
+      endif
+
+      ## replace FFF with digits to guarantee match in strptime.
+      f(idx:idx+2) = msec;
 
-    ## replace FFF with digits to guarantee match in strptime.
-    f(idx:idx+2) = msec;
+      if (nc > 0)
+        [tm, nc] = strptime (ds, f);
+        tm.usec = 1000 * str2double (msec);
+      endif
 
-    if (nc > 0)
+    else
       [tm, nc] = strptime (ds, f);
-      tm.usec = 1000 * str2double (msec);
     endif
-
-  else
-    [tm, nc] = strptime (ds, f);
-  endif
+  unwind_protect_cleanup
+    if (isempty (TZ_orig))
+      unsetenv ("TZ");
+    else
+      setenv ("TZ", TZ_orig);
+    endif
+  end_unwind_protect
 
   if (nc == columns (ds) + 1)
     found = true;
     y = tm.year + 1900; m = tm.mon + 1; d = tm.mday;
     h = tm.hour; mi = tm.min; s = tm.sec + tm.usec / 1e6;
     if (rY < ry)
       if (y > 1999)
         y -= 2000;
@@ -369,13 +383,45 @@ endfunction
 ## Other tests
 %!assert (datenum (datevec ([-1e4:1e4])), [-1e4:1e4]')
 %!test
 %! t = linspace (-2e5, 2e5, 10993);
 %! assert (all (abs (datenum (datevec (t)) - t') < 1e-5));
 %!assert (double (datevec (int64 (datenum ([2014 6 1])))), datevec (datenum ([2014 6 1])))
 %!assert (double (datevec (int64 (datenum ([2014 6 18])))), datevec (datenum ([2014 6 18])))
 
+## Test parsing of date strings that fall within daylight saving transition
+%!testif ; isunix () <*36954>
+%! zones = { "UTC0"                                 ...
+%!           "EST+5EDT,M3.2.0/2,M11.1.0/2"          ... America/New_York
+%!           "CET-1CEST,M3.5.0/2,M10.5.0/2"         ... Europe/Berlin
+%!           "CLT+4CLST,M8.2.0/0,M5.2.0/0"          ... America/Santiago
+%!           "LHST-10:30LHDT-11,M10.1.0/2,M4.1.0/2" ... Australia/Lord_Howe
+%!           ":America/Caracas"                     ...
+%!         };
+%! TZ_orig = getenv ("TZ");
+%! unwind_protect
+%!   for i = 1:numel (zones)
+%!     setenv ("TZ", zones{i});
+%!     ## These specific times were chosen to test conversion during the loss
+%!     ## of some amount of local time at the start of daylight saving time in
+%!     ## each of the zones listed above.  We test all in each time zone to be
+%!     ## exhaustive, even though each is problematic for only one of the zones.
+%!     assert (datevec ("2017-03-12 02:15:00"), [2017  3 12 2 15 0]);
+%!     assert (datevec ("2017-03-26 02:15:00"), [2017  3 26 2 15 0]);
+%!     assert (datevec ("2017-08-13 00:15:00"), [2017  8 13 0 15 0]);
+%!     assert (datevec ("2017-10-01 02:15:00"), [2017 10  1 2 15 0]);
+%!     ## This tests a one-time loss of 30 minutes in Venezuela's local time
+%!     assert (datevec ("2016-05-01 02:40:00"), [2016  5  1 2 40 0]);
+%!   endfor
+%! unwind_protect_cleanup
+%!   if (isempty (TZ_orig))
+%!     unsetenv ("TZ");
+%!   else
+%!     setenv ("TZ", TZ_orig);
+%!   endif
+%! end_unwind_protect
+
 ## Test input validation
 %!error datevec ()
 %!error datevec (1,2,3,4)
 %!error <none of the standard formats match> datevec ("foobar")
 %!error <DATE not parsed correctly with given format> datevec ("foobar", "%d")
