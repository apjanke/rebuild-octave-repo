# HG changeset patch
# User jwe
# Date 824100369 0
#      Mon Feb 12 04:46:09 1996 +0000
# Node ID 126ebfbf3f99eaf633f1ec3fd5b31a55cd5cc6d4
# Parent  4872b6022e6f4b2a2dc2258db1881e29e1d104c5
[project @ 1996-02-12 04:46:09 by jwe]

diff --git a/liboctave/CollocWt.cc b/liboctave/CollocWt.cc
--- a/liboctave/CollocWt.cc
+++ b/liboctave/CollocWt.cc
@@ -99,70 +99,72 @@ CollocWt::init (void)
   if (nt < 0)
     {
       error ("total number of collocation points less than zero");
       return;
     }
   else if (nt == 0)
     return;
 
-  double *dif1 = new double [nt];
-  double *dif2 = new double [nt];
-  double *dif3 = new double [nt];
-  double *vect = new double [nt];
+  Array<double> dif1 (nt);
+  double *pdif1 = dif1.fortran_vec ();
+
+  Array<double> dif2 (nt);
+  double *pdif2 = dif2.fortran_vec ();
+
+  Array<double> dif3 (nt);
+  double *pdif3 = dif3.fortran_vec ();
+
+  Array<double> vect (nt);
+  double *pvect = vect.fortran_vec ();
 
   r.resize (nt);
   q.resize (nt);
   A.resize (nt, nt);
   B.resize (nt, nt);
 
   double *pr = r.fortran_vec ();
 
   // Compute roots.
 
   F77_FCN (jcobi, JCOBI) (nt, n, inc_left, inc_right, Alpha, Beta,
-			  dif1, dif2, dif3, pr);
+			  pdif1, pdif2, pdif3, pr);
 
   int id;
 
   // First derivative weights.
 
   id = 1;
   for (int i = 1; i <= nt; i++)
     {
-      F77_FCN (dfopr, DFOPR) (nt, n, inc_left, inc_right, i, id, dif1,
-			      dif2, dif3, pr, vect); 
+      F77_FCN (dfopr, DFOPR) (nt, n, inc_left, inc_right, i, id, pdif1,
+			      pdif2, pdif3, pr, pvect); 
 
       for (int j = 0; j < nt; j++)
-	A (i-1, j) = vect[j];
+	A (i-1, j) = vect.elem (j);
     }
 
   // Second derivative weights.
 
   id = 2;
   for (int i = 1; i <= nt; i++)
     {
-      F77_FCN (dfopr, DFOPR) (nt, n, inc_left, inc_right, i, id, dif1,
-			      dif2, dif3, pr, vect); 
+      F77_FCN (dfopr, DFOPR) (nt, n, inc_left, inc_right, i, id, pdif1,
+			      pdif2, pdif3, pr, pvect); 
 
       for (int j = 0; j < nt; j++)
-	B (i-1, j) = vect[j];
+	B (i-1, j) = vect.elem (j);
     }
 
   // Gaussian quadrature weights.
 
   id = 3;
   double *pq = q.fortran_vec ();
-  F77_FCN (dfopr, DFOPR) (nt, n, inc_left, inc_right, id, id, dif1,
-			  dif2, dif3, pr, pq);
-
-  delete [] dif1;
-  delete [] dif2;
-  delete [] dif3;
-  delete [] vect;
+  F77_FCN (dfopr, DFOPR) (nt, n, inc_left, inc_right, id, id, pdif1,
+			  pdif2, pdif3, pr, pq);
 
   initialized = 1;
 }
 
 ostream&
 operator << (ostream& os, const CollocWt& a)
 {
   if (a.left_included ())
