# HG changeset patch
# User jwe
# Date 796688498 0
#      Fri Mar 31 22:21:38 1995 +0000
# Node ID 4f1bfa351b992306cccb64f60a7c8a276d47ad18
# Parent  1352ecca2d91f72c95fc22de263dd8c160f7fafb
[project @ 1995-03-31 22:16:54 by jwe]

diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -21,21 +21,23 @@ Software Foundation, 675 Mass Ave, Cambr
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
+#include <strstream.h>
 
 #include "tree-const.h"
+#include "user-prefs.h"
+#include "pager.h"
 #include "error.h"
 #include "gripes.h"
-#include "user-prefs.h"
 #include "oct-map.h"
 
 // The following three variables could be made static members of the
 // tree_constant class.
 
 // Pointer to the blocks of memory we manage.
 static tree_constant *newlist = 0;
 
@@ -129,16 +131,25 @@ tree_constant::lookup_map_element (SLLis
 
       if (! p)
 	retval = tmp;
     }
 
   return retval;
 }
 
+void
+tree_constant::print (void)
+{
+  ostrstream output_buf;
+  print (output_buf);
+  output_buf << ends;
+  maybe_page_output (output_buf);
+}
+
 // Simple structure assignment.
 
 void
 tree_constant::make_unique (void)
 {
   if (rep->count > 1)
     {
       --rep->count;
@@ -246,16 +257,35 @@ tree_constant::print_code (ostream& os)
 
   if (rep)
     rep->print_code (os);
 
   if (in_parens)
     os << ")";
 }
 
+int
+print_as_scalar (const tree_constant& val)
+{
+  int nr = val.rows ();
+  int nc = val.columns ();
+  return (val.is_scalar_type ()
+	  || val.is_string ()
+	  || (val.is_matrix_type ()
+	      && ((nr == 1 && nc == 1)
+		  || nr == 0
+		  || nc == 0)));
+}
+
+int
+print_as_structure (const tree_constant& val)
+{
+  return val.is_map ();
+}
+
 // Construct return vector of empty matrices.  Return empty matrices
 // and/or gripe when appropriate.
 
 Octave_object
 vector_of_empties (int nargout, const char *fcn_name)
 {
   Octave_object retval;
 
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -319,26 +319,29 @@ public:
 	  --rep->count;
 	  rep = new tree_constant_rep (*rep);
 	  rep->count = 1;
 	}
 
       rep->bump_value (et);
     }
 
+  void print (void);
+  void print (ostream& os) { rep->print (os); }
+
 // Evaluate this constant, possibly converting complex to real, or
 // matrix to scalar, etc.
 
-  tree_constant eval (int print)
+  tree_constant eval (int print_result)
     {
       if (! is_scalar_type ())
 	rep->maybe_mutate ();
 
-      if (print)
-	rep->print ();
+      if (print_result)
+	print ();
 
       return *this;
     }
 
   Octave_object eval (int print, int nargout, const Octave_object& args)
     {
       Octave_object retval;
 
@@ -426,16 +429,20 @@ private:
       if (is_numeric_type () || is_range () || is_all_va_args ()
 	  || is_magic_colon ())
 	return *this;
       else
 	return rep->make_numeric ();
     }
 };
 
+extern int print_as_scalar (const tree_constant& val);
+
+extern int print_as_structure (const tree_constant& val);
+
 // XXX FIXME XXX -- this is not used very much now.  Perhaps it can be
 // eliminated.
 extern Octave_object vector_of_empties (int nargout, const char *fcn_name);
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -109,53 +109,46 @@ any_element_greater_than (const Matrix& 
   int nc = a.columns ();
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       if (a.elem (i, j) > val)
 	return 1;
   return 0;
 }
 
-static int
-print_as_scalar (const tree_constant& val)
-{
-  int nr = val.rows ();
-  int nc = val.columns ();
-  return (val.is_scalar_type ()
-	  || val.is_string ()
-	  || (val.is_matrix_type ()
-	      && ((nr == 1 && nc == 1)
-		  || nr == 0
-		  || nc == 0)));
-}
-
 static void
-print_constant (tree_constant& tc, char *name)
+print_constant (tree_constant& tc, char *name, int print_padding = 1)
 {
   int pad_after = 0;
   if (user_pref.print_answer_id_name)
     {
       if (print_as_scalar (tc))
 	{
 	  ostrstream output_buf;
 	  output_buf << name << " = " << ends;
 	  maybe_page_output (output_buf);
 	}
+      else if (print_as_structure (tc))
+	{
+	  ostrstream output_buf;
+	  output_buf << name << " = {\n" << ends;
+	  maybe_page_output (output_buf);
+	}
       else
 	{
 	  pad_after = 1;
 	  ostrstream output_buf;
 	  output_buf << name << " =\n\n" << ends;
 	  maybe_page_output (output_buf);
 	}
     }
 
   tc.eval (1);
 
-  if (pad_after)
+  if (print_padding && pad_after)
     {
       ostrstream output_buf;
       output_buf << "\n" << ends;
       maybe_page_output (output_buf);
     }
 }
 
 // Make sure that all arguments have values.
@@ -1937,45 +1930,19 @@ tree_simple_assignment_expression::eval 
 		  retval = lhs->assign (rhs_val, args);
 		  if (error_state)
 		    eval_error ();
 		}
 	    }
 	}
     }
 
-  if (! error_state && retval.is_defined ())
-    {
-      int pad_after = 0;
-      if (print && user_pref.print_answer_id_name)
-	{
-	  if (print_as_scalar (retval))
-	    {
-	      ostrstream output_buf;
-	      output_buf << lhs->name () << " = " << ends;
-	      maybe_page_output (output_buf);
-	    }
-	  else
-	    {
-	      pad_after = 1;
-	      ostrstream output_buf;
-	      output_buf << lhs->name () << " =\n\n" << ends;
-	      maybe_page_output (output_buf);
-	    }
-	}
-
-      retval.eval (print);
-
-      if (print && pad_after)
-	{
-	  ostrstream output_buf;
-	  output_buf << "\n" << ends;
-	  maybe_page_output (output_buf);
-	}
-    }
+  if (! error_state && print && retval.is_defined ()
+      && user_pref.print_answer_id_name) 
+    print_constant (retval, lhs->name ());
 
   return retval;
 }
 
 void
 tree_simple_assignment_expression::eval_error (void)
 {
   if (error_state > 0)
@@ -2094,41 +2061,22 @@ tree_multi_assignment_expression::eval (
 	      results(i) = tmp_expr.eval (0); // May change
 
 	      if (error_state)
 		break;
 
 	      if (print && pad_after)
 		{
 		  ostrstream output_buf;
-		  output_buf << "\n" << '\0';
+		  output_buf << "\n" << ends;
 		  maybe_page_output (output_buf);
 		}
 
 	      if (print && user_pref.print_answer_id_name)
-		{
-		  char *tmp_nm = lhs_expr->name ();
-		  
-		  if (print_as_scalar (results(i)))
-		    {
-		      ostrstream output_buf;
-		      output_buf << tmp_nm << " = " << '\0';
-		      maybe_page_output (output_buf);
-		      last_was_scalar_type = 1;
-		    }
-		  else
-		    {
-		      ostrstream output_buf;
-		      output_buf << tmp_nm << " =\n\n" << '\0';
-		      maybe_page_output (output_buf);
-		      last_was_scalar_type = 0;
-		    }
-		}
-
-	      results(i).eval (print);
+		print_constant (results(i), lhs_expr->name (), 0);
 
 	      pad_after++;
 	      i++;
 	    }
 	  else
 	    {
 	      tree_simple_assignment_expression tmp_expr
 		(lhs_expr, 0, 1, 0, ma_line, ma_column);
@@ -2143,17 +2091,17 @@ tree_multi_assignment_expression::eval (
 
 	      break;
 	    }
 	}
 
       if (print && pad_after)
 	{
 	  ostrstream output_buf;
-	  output_buf << "\n" << '\0';
+	  output_buf << "\n" << ends;
 	  maybe_page_output (output_buf);
 	}
     }
 
   return results;
 }
 
 void
diff --git a/src/tc-rep.cc b/src/tc-rep.cc
--- a/src/tc-rep.cc
+++ b/src/tc-rep.cc
@@ -24,45 +24,47 @@ Software Foundation, 675 Mass Ave, Cambr
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <ctype.h>
 #include <string.h>
 #include <fstream.h>
 #include <iostream.h>
-#include <strstream.h>
 
 #include "mx-base.h"
 #include "Range.h"
 
 #include "arith-ops.h"
 #include "variables.h"
 #include "sysdep.h"
 #include "error.h"
 #include "gripes.h"
 #include "user-prefs.h"
 #include "utils.h"
-#include "pager.h"
 #include "pr-output.h"
 #include "tree-const.h"
 #include "idx-vector.h"
+#include "unwind-prot.h"
 #include "oct-map.h"
 
 #include "tc-inlines.h"
 
 // The following three variables could be made static members of the
 // TC_REP class.
 
 // Pointer to the blocks of memory we manage.
 static TC_REP *newlist = 0;
 
 // Multiplier for allocating new blocks.
 static const int newlist_grow_size = 128;
 
+// Indentation level for structures.
+static int structure_indent_level = 0;
+
 static int
 any_element_is_complex (const ComplexMatrix& a)
 {
   int nr = a.rows ();
   int nc = a.columns ();
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       if (imag (a.elem (i, j)) != 0.0)
@@ -1724,23 +1726,21 @@ TC_REP::maybe_mutate (void)
       break;
 
     default:
       break;
     }
 }
 
 void
-TC_REP::print (void)
+TC_REP::print (ostream& output_buf)
 {
   if (error_state)
     return;
 
-  ostrstream output_buf;
-
   switch (type_tag)
     {
     case scalar_constant:
       octave_print_internal (output_buf, scalar);
       break;
 
     case matrix_constant:
       octave_print_internal (output_buf, *matrix);
@@ -1759,40 +1759,61 @@ TC_REP::print (void)
       break;
 
     case range_constant:
       octave_print_internal (output_buf, *range);
       break;
 
     case map_constant:
       {
-	output_buf << "<structure";
-	int first = 1;
-	for (Pix p = a_map->first (); p != 0; a_map->next (p))
+// XXX FIXME XXX -- would be nice to print the output in some standard
+// order.  Maybe all substructures first, maybe alphabetize entries,
+// etc.
+	begin_unwind_frame ("TC_REP_print");
+
+	unwind_protect_int (structure_indent_level);
+	unwind_protect_int (user_pref.struct_levels_to_print);
+
+	structure_indent_level += 2;
+
+	if (user_pref.struct_levels_to_print > 0)
 	  {
-	    if (first)
+	    user_pref.struct_levels_to_print--;
+
+	    for (Pix p = a_map->first (); p != 0; a_map->next (p))
 	      {
-		output_buf << ":";
-		first = 0;
+		const char *key = a_map->key (p);
+		tree_constant val = a_map->contents (p);
+
+		output_buf.form ("%*s%s = ", structure_indent_level,
+				 "", key);
+
+		if (print_as_structure (val))
+		  output_buf << "{\n";
+		else if (! print_as_scalar (val))
+		  output_buf << "\n";
+
+		val.print (output_buf);
 	      }
-	    output_buf << " " << a_map->key (p);
+
+	    output_buf.form ("%*s%s", structure_indent_level, "", "}\n");
 	  }
-	output_buf << ">\n";
+	else
+	  output_buf << "<structure>\n";
+
+	run_unwind_frame ("TC_REP_print");
       }
       break;
 
     case unknown_constant:
     case magic_colon:
     case all_va_args:
       panic_impossible ();
       break;
     }
-
-  output_buf << ends;
-  maybe_page_output (output_buf);
 }
 
 void
 TC_REP::print_code (ostream& os)
 {
   switch (type_tag)
     {
     case scalar_constant:
