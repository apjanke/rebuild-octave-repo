# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1468600979 14400
#      Fri Jul 15 12:42:59 2016 -0400
# Node ID 5f91c1e89a98eae42da9028d99044fcb8383ee35
# Parent  d3b6d0e108a39f099d3e83076277b039dfb348af
avoid possible crash in exist function (bug #36067)

* variables.cc (Fexist): Check for command line functions before other
types of functions.  Check for built-in functions last.  Instead of
using symbol_table::find, which may load .mex or .oct file or parse
functions files, use symbol_table::is_built_in_function name to check
for built-in functions and symbol_table::find_cmdline_function to
check for built-in functions.
(safe_symbol_exist): Delete unused function.

diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -361,36 +361,16 @@ isglobal ("x")
 %! global x;
 %! assert (isglobal ("x"), true);
 
 %!error isglobal ()
 %!error isglobal ("a", "b")
 %!error isglobal (1)
 */
 
-static octave_value
-safe_symbol_lookup (const std::string& symbol_name)
-{
-  octave_value retval;
-
-  octave::unwind_protect frame;
-  interpreter_try (frame);
-
-  try
-    {
-      retval = symbol_table::find (symbol_name);
-    }
-  catch (const octave_execution_exception&)
-    {
-      recover_from_exception ();
-    }
-
-  return retval;
-}
-
 int
 symbol_exist (const std::string& name, const std::string& type)
 {
   if (is_keyword (name))
     return 0;
 
   bool search_any = type == "any";
   bool search_var = type == "var";
@@ -415,31 +395,23 @@ symbol_exist (const std::string& name, c
 
       if (search_var)
         return 0;
     }
 
   // We shouldn't need to look in the global symbol table, since any name
   // that is visible in the current scope will be in the local symbol table.
 
-  octave_value val;
-
-  if (search_any || search_builtin)
+  // Command line function which Matlab does not support
+  if (search_any)
     {
-      // FIXME: safe_symbol_lookup will attempt unsafe load of .oct/.mex file.
-      // This can cause a segfault.  To catch this would require temporarily
-      // diverting the SIGSEGV exception handler and then restoring it.
-      // See bug #36067.
-      val = safe_symbol_lookup (name);
-
-      if (val.is_defined () && val.is_builtin_function ())
-        return 5;
-
-      if (search_builtin)
-        return 0;
+      octave_value val = symbol_table::find_cmdline_function (name);
+
+      if (val.is_defined ())
+        return 103;
     }
 
   if (search_any || search_file || search_dir)
     {
       std::string file_name = lookup_autoload (name);
 
       if (file_name.empty ())
         file_name = load_path::find_fcn (name);
@@ -483,19 +455,24 @@ symbol_exist (const std::string& name, c
           else if (search_dir && fs.is_dir ())
             return 7;
         }
 
       if (search_file || search_dir)
         return 0;
     }
 
-  // Command line function which Matlab does not support
-  if (search_any && val.is_defined () && val.is_user_function ())
-    return 103;
+  if (search_any || search_builtin)
+    {
+      if (symbol_table::is_built_in_function_name (name))
+        return 5;
+
+      if (search_builtin)
+        return 0;
+    }
 
   return 0;
 }
 
 #define GET_IDX(LEN) \
   static_cast<int> ((LEN-1) * static_cast<double> (rand ()) / RAND_MAX)
 
 std::string
