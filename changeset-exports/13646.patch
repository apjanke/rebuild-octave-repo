# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1314115605 -7200
#      Tue Aug 23 18:06:45 2011 +0200
# Node ID 2e1f54803758409d94bcf9f2329d88c81cc75f94
# Parent  484a487f39991f3c6a6a27488d38075fc7e4d7a7
Lowered size limits for subwindows.

diff --git a/gui/src/MainWindow.cpp b/gui/src/MainWindow.cpp
--- a/gui/src/MainWindow.cpp
+++ b/gui/src/MainWindow.cpp
@@ -291,43 +291,43 @@ MainWindow::construct ()
   m_centralMdiArea->addSubWindow (m_octaveTerminalSubWindow, Qt::WindowTitleHint | Qt::WindowMinMaxButtonsHint);
 
   m_octaveTerminalSubWindow->setObjectName ("OctaveTerminalSubWindow");
   m_octaveTerminalSubWindow->setWindowTitle (tr ("Terminal"));
   m_octaveTerminalSubWindow
       ->setWindowIcon (ResourceManager::instance ()->icon (ResourceManager::Terminal));
   m_octaveTerminalSubWindow->setFocusProxy (m_octaveTerminal);
   m_octaveTerminalSubWindow->setStatusTip (tr ("Enter your commands into the Octave terminal."));
-  m_octaveTerminalSubWindow->setMinimumSize (670, 300);
+  m_octaveTerminalSubWindow->setMinimumSize (300, 300);
 
   // Documentation subwindow.
   m_documentationWidgetSubWindow = new NonClosableMdiSubWindow (this);
   m_documentationWidgetSubWindow->setWidget (m_documentationWidget);
   m_centralMdiArea->addSubWindow (m_documentationWidgetSubWindow, Qt::WindowTitleHint | Qt::WindowMinMaxButtonsHint);
 
   m_documentationWidgetSubWindow->setObjectName ("DocumentationWidgetSubWindow");
   m_documentationWidgetSubWindow->setWindowTitle (tr ("Documentation"));
   m_documentationWidgetSubWindow
       ->setWindowIcon (ResourceManager::instance ()->icon (ResourceManager::Documentation));
   m_documentationWidgetSubWindow->setFocusProxy (m_documentationWidget);
   m_documentationWidgetSubWindow->setStatusTip (tr ("Browse the Octave documentation for help."));
-  m_documentationWidgetSubWindow->setMinimumSize (670, 300);
+  m_documentationWidgetSubWindow->setMinimumSize (300, 300);
 
   // Chat subwindow.
   m_ircWidgetSubWindow = new NonClosableMdiSubWindow (this);
   m_ircWidgetSubWindow->setWidget (m_ircWidget);
   m_centralMdiArea->addSubWindow (m_ircWidgetSubWindow, Qt::WindowTitleHint | Qt::WindowMinMaxButtonsHint);
 
   m_ircWidgetSubWindow->setObjectName ("ChatWidgetSubWindow");
   m_ircWidgetSubWindow->setWindowTitle (tr ("Chat"));
   m_ircWidgetSubWindow
       ->setWindowIcon (ResourceManager::instance ()->icon (ResourceManager::Chat));
   m_ircWidgetSubWindow->setStatusTip(tr ("Instantly chat with other Octave users for help."));
   m_ircWidgetSubWindow->setFocusProxy (m_ircWidget);
-  m_ircWidgetSubWindow->setMinimumSize (670, 300);
+  m_ircWidgetSubWindow->setMinimumSize (300, 300);
   connect (m_ircWidget, SIGNAL (unreadMessages (bool)), this, SLOT (handleUnreadMessages (bool)));
 
   m_lexer = NULL;  // initialise the empty lexer for the edtiors
 
   QMenu *controlMenu = menuBar ()->addMenu (tr ("Octave"));
   QAction *settingsAction = controlMenu->addAction (tr ("Settings"));
   controlMenu->addSeparator ();
   QAction *exitAction = controlMenu->addAction (tr ("Exit"));
diff --git a/gui/src/terminal/LinuxTerminalEmulation.cpp b/gui/src/terminal/LinuxTerminalEmulation.cpp
--- a/gui/src/terminal/LinuxTerminalEmulation.cpp
+++ b/gui/src/terminal/LinuxTerminalEmulation.cpp
@@ -9,24 +9,23 @@ LinuxTerminalEmulation::LinuxTerminalEmu
       assert (0);
     }
   dup2 (fds, STDIN_FILENO);
   dup2 (fds, STDOUT_FILENO);
   dup2 (fds, STDERR_FILENO);
 
   m_pty = new KPtyDevice ();
   m_pty->open (fdm);
-  //m_pty->setPtyChannels (KPtyProcess::AllChannels);
   connect (m_pty, SIGNAL(readyRead ()),
            this, SLOT (handleReadyRead ()));
 }
 
 LinuxTerminalEmulation::~LinuxTerminalEmulation ()
 {
-  //m_pty->terminate ();
+  m_pty->close ();
 }
 
 void LinuxTerminalEmulation::processKeyEvent (QKeyEvent *keyEvent)
 {
   switch (keyEvent->key ())
     {
       case Qt::Key_PageUp:
       //if (verticalScrollBar ())
diff --git a/gui/src/terminal/kpty.cpp b/gui/src/terminal/kpty.cpp
--- a/gui/src/terminal/kpty.cpp
+++ b/gui/src/terminal/kpty.cpp
@@ -18,36 +18,20 @@
 
    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
 */
 
 #include "kpty_p.h"
-
-#include <sys/types.h>
-#include <sys/ioctl.h>#include <sys/time.h>
-#include <sys/resource.h>
-#include <sys/stat.h>
-#include <sys/param.h>
-
-#include <errno.h>
 #include <fcntl.h>
-#include <time.h>
-#include <stdlib.h>
 #include <stdio.h>
-#include <string.h>
-#include <unistd.h>
-#include <grp.h>
-
 #include <pty.h>
-#define _UTMPX_COMPAT
 #include <utmp.h>
-#include <utmpx.h>
 
 /* for HP-UX (some versions) the extern C is needed, and for other
    platforms it doesn't hurt */
 extern "C"
 {
 #include <termios.h>
 }
 
diff --git a/gui/src/terminal/kptydevice.cpp b/gui/src/terminal/kptydevice.cpp
--- a/gui/src/terminal/kptydevice.cpp
+++ b/gui/src/terminal/kptydevice.cpp
@@ -79,17 +79,16 @@ KPtyDevicePrivate::_k_canRead ()
 	  return false;
 	}
       readBuffer.unreserve (available - readBytes);	// *should* be a no-op
     }
 
   if (!readBytes)
     {
       readNotifier->setEnabled (false);
-      emit q->readEof ();
       return false;
     }
   else
     {
       if (!emittedReadyRead)
 	{
 	  emittedReadyRead = true;
 	  emit q->readyRead ();
@@ -313,30 +312,16 @@ KPtyDevice::bytesAvailable () const
 
 qint64
 KPtyDevice::bytesToWrite () const
 {
   Q_D (const KPtyDevice);
   return d->writeBuffer.size ();
 }
 
-void
-KPtyDevice::setSuspended (bool suspended)
-{
-  Q_D (KPtyDevice);
-  d->readNotifier->setEnabled (!suspended);
-}
-
-bool
-KPtyDevice::isSuspended () const
-{
-  Q_D (const KPtyDevice);
-  return !d->readNotifier->isEnabled ();
-}
-
 // protected
 qint64
 KPtyDevice::readData (char *data, qint64 maxlen)
 {
   Q_D (KPtyDevice);
   return d->readBuffer.read (data, (int) qMin < qint64 > (maxlen, KMAXINT));
 }
 
diff --git a/gui/src/terminal/kptydevice.h b/gui/src/terminal/kptydevice.h
--- a/gui/src/terminal/kptydevice.h
+++ b/gui/src/terminal/kptydevice.h
@@ -77,41 +77,16 @@ Q_OBJECT Q_DECLARE_PRIVATE_MI (KPtyDevic
   bool open (int fd, OpenMode mode = ReadWrite | Unbuffered);
 
     /**
      * Close the pty master/slave pair.
      */
   virtual void close ();
 
     /**
-     * Sets whether the KPtyDevice monitors the pty for incoming data.
-     *
-     * When the KPtyDevice is suspended, it will no longer attempt to buffer
-     * data that becomes available from the pty and it will not emit any
-     * signals.
-     *
-     * Do not use on closed ptys.
-     * After a call to open(), the pty is not suspended. If you need to
-     * ensure that no data is read, call this function before the main loop
-     * is entered again (i.e., immediately after opening the pty).
-     */
-  void setSuspended (bool suspended);
-
-    /**
-     * Returns true if the KPtyDevice is not monitoring the pty for incoming
-     * data.
-     *
-     * Do not use on closed ptys.
-     *
-     * See setSuspended()
-     */
-  bool isSuspended () const;
-
-
-    /**
      * @reimp
      */
   bool canReadLine () const;
 
     /**
      * @reimp
      */
   bool atEnd () const;
@@ -121,24 +96,16 @@ Q_OBJECT Q_DECLARE_PRIVATE_MI (KPtyDevic
      */
   qint64 bytesAvailable () const;
 
     /**
      * @reimp
      */
   qint64 bytesToWrite () const;
 
-signals:
-    /**
-     * Emitted when EOF is read from the PTY.
-     *
-     * Data may still remain in the buffers.
-     */
-  void readEof ();
-
 protected:
   virtual qint64 readData (char *data, qint64 maxSize);
   virtual qint64 readLineData (char *data, qint64 maxSize);
   virtual qint64 writeData (const char *data, qint64 maxSize);
 
 private:
   Q_PRIVATE_SLOT (d_func (), bool _k_canRead ())
   Q_PRIVATE_SLOT (d_func (), bool _k_canWrite ())};
