# HG changeset patch
# User jwe
# Date 945293281 0
#      Wed Dec 15 21:28:01 1999 +0000
# Node ID ebf69eb3d07d57d2924e041d9c766e20c48f1887
# Parent  d931332a73dcd8ac5503a49fe601907d4c90cef4
[project @ 1999-12-15 21:27:56 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,36 @@
+1999-12-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* control/zp2sys.m: Don't save and restore implicit_str_to_num_ok.
+	* control/zpout.m: Ditto.
+	* control/tfout.m: Ditto.
+	* control/tf2sys.m: Ditto.
+	* control/syssub.m: Ditto.
+	* control/syssetsignals.m: Ditto.
+	* control/sysout.m: Ditto.
+	* control/sysmult.m: Ditto.
+	* control/sysgroup.m: Ditto.
+	* control/sysdup.m: Ditto.
+	* control/sysdisc.m: Ditto.
+	* control/syscont.m: Ditto.
+	* control/sysconnect.m: Ditto.
+	* control/sysappend.m: Ditto.
+	* control/sysadd.m: Ditto.
+	* control/ss2sys.m: Ditto.
+	* control/nyquist.m: Ditto.
+	* control/lqg.m: Ditto.
+	* control/fir2sys.m: Ditto.
+	* control/dmr2d.m: Ditto.
+	* control/dezero.m: Ditto.
+	* control/d2c.m: Ditto.
+	* control/c2d.m: Ditto.
+	* control/bddemo.m: Ditto.
+	* control/pzmap.m: Ditto.
+
 1999-12-08  Daniel Calvelo <dcalvelo@pharion.univ-lille2.fr>
 
 	* signal/spectral_adf.m: Fix typo.
 
 1999-11-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* linear-algebra/cond.m: Texinfoize doc string.
 	* linear-algebra/kron.m: Ditto.
diff --git a/scripts/control/bddemo.m b/scripts/control/bddemo.m
--- a/scripts/control/bddemo.m
+++ b/scripts/control/bddemo.m
@@ -21,19 +21,17 @@
 ##  Octave Controls toolbox demo: Block Diagram Manipulations demo
 ## @end deftypefn
  
 function bddemo()
 
   ## Written by David Clem August 15, 1994
   ## Modified by A S Hodel Summer-Fall 1996
 
-  str_sav = implicit_str_to_num_ok;
   sav_page = page_screen_output;
-  implicit_str_to_num_ok = 1;
   page_screen_output = 1;
 
   while (1)
     clc
     k=0;
     while(k > 14 || k < 1)
       k = menu("Octave Block Diagram Manipulations Demo", ...
   	"sysadd/syssub: F(s) = G(s) +/- H(s)", ...
@@ -533,23 +531,18 @@ function bddemo()
           disp("         +          --------    --------");
           disp("  r(t) ---> (+) --->| K(s) |--->| P(s) | ----> y(t)");
           disp("            -^      --------    --------  |");
           disp("             |                            |");
           disp("             ------------------------------");
           disp(" ")
       disp("Step 1: We've already created systems P and K.  Create a sum ")
       disp("block as follows:")
-      implicit_str_to_num_ok = "warn";
       cmd = "S = ss2sys([],[],[],[1 -1],0,0,0,[],list(""r(t)"",""y(t)""),""e(t)"");";
       run_cmd
-      implicit_str_to_num_ok = 1;
-      disp("You may avoid the string conversion warning by setting the ")
-      disp("Octave global variables implicit_str_to_num_ok = 1");
-      disp(" ");
       disp("(You may wish to look at help ss2sys to see what the above does)");
       disp("S=")
       sysout(S)
       disp("notice that this is just a gain block that outputs e = r - y")
       prompt
       disp("Step 2: series connections of P, K, and S")
       cmd = "PKS = sysmult(P,sysmult(K,S));";
       run_cmd
diff --git a/scripts/control/c2d.m b/scripts/control/c2d.m
--- a/scripts/control/c2d.m
+++ b/scripts/control/c2d.m
@@ -67,19 +67,16 @@
 ## @end deftypefn
 
 function dsys = c2d (sys, opt, T)
 
   ## Written by R.B. Tenison (btenison@eng.auburn.edu)
   ## October 1993
   ## Updated by John Ingram for system data structure August 1996
 
-  save_val = implicit_str_to_num_ok;	# save for later
-  implicit_str_to_num_ok = 1;
-
   ## parse input arguments
   if(nargin < 1 | nargin > 3)
     usage("dsys=c2d(sys[,T])");
   elseif (!is_struct(sys))
     error("sys must be a system data structure");
   elseif (nargin == 1)
     opt = "ex";
   elseif (nargin == 2 & !isstr(opt) )
@@ -164,11 +161,9 @@ function dsys = c2d (sys, opt, T)
       D = d + (c*iab);
       stnamed = strappend(stname,"_d");
       dsys = ss2sys(A,B,C,D,T,0,rows(A),stnamed,inname,outname);
     endif
   else
     error(["Bad option=",opt])
   endif
   
-  implicit_str_to_num_ok = save_val;	# restore value
-
 endfunction
diff --git a/scripts/control/d2c.m b/scripts/control/d2c.m
--- a/scripts/control/d2c.m
+++ b/scripts/control/d2c.m
@@ -57,19 +57,16 @@
 
  
 function csys = d2c(sys,opt)
 
   ## Written by R. Bruce Tenison August 23, 1994
   ## Updated by John Ingram for system data structure  August 1996
   ## SYS_INTERNAL accesses members of system data structure
 
-  save_val = implicit_str_to_num_ok;	# save for later
-  implicit_str_to_num_ok = 1;
-
   if( (nargin != 1) & (nargin != 2) )
     usage("csys = d2c(sys[,tol]), csys = d2c(sys,opt)");
   elseif (!is_struct(sys))
     error("sys must be in system data structure");
   elseif(nargin == 1)
     opt = "log";
     tol = 1e-12;
   elseif(isstr(opt))   # all remaining cases are for nargin == 2
@@ -217,10 +214,9 @@ function csys = d2c(sys,opt)
     ## update names
     nn = sysdimensions(sys);
     for ii = (nn+1):na
       strval = sprintf("%s_c",sysgetsignals(csys,"st",ii,1));
       csys = syssetsignals(csys,"st",strval,ii);
     endfor
   endif
 
-  implicit_str_to_num_ok = save_val;	# restore value
 endfunction
diff --git a/scripts/control/dezero.m b/scripts/control/dezero.m
--- a/scripts/control/dezero.m
+++ b/scripts/control/dezero.m
@@ -31,32 +31,27 @@ function t = dezero (s)
 
   ## delete the next line if you're stubbornly going to use dezero.
   error("dezero is no longer supported.");
 
   if (nargin != 1)
     usage ("dezero (s)");
   elseif (isstr (s))
 
-    save_val = implicit_str_to_num_ok;
-    implicit_str_to_num_ok = 1;
-
     [nr, nc] = size (s);
     len = nr * nc;
 
     if (len == 0)
       t = s;
     else
 
       s = reshape (s, 1, len);
 
       ## need to remove zeros first, then call deblank
       s = 1*s;
       t = deblank(setstr(s(find(s != 0) )));
     endif
 
-    implicit_str_to_num_ok = save_val;
-
   else
     error ("dezero: expecting string argument");
   endif
 
 endfunction
diff --git a/scripts/control/dmr2d.m b/scripts/control/dmr2d.m
--- a/scripts/control/dmr2d.m
+++ b/scripts/control/dmr2d.m
@@ -69,19 +69,16 @@
 ## @strong{WARNING} Not thoroughly tested yet; especially when @var{cuflg} == 0.
 ## 
 ## @end deftypefn
 
 function [dsys,fidx] = dmr2d (sys, idx, sprefix, Ts2,cuflg)
 
   ## Adapted from c2d by a.s.hodel@eng.auburn.edu
 
-  save_val = implicit_str_to_num_ok;	# save for later
-  implicit_str_to_num_ok = 1;
-
   ## parse input arguments
   if(nargin != 4 | nargout > 2)
     usage("[dsys,fidx] = dmr2d (sys, idx, sprefix, Ts2 {,cuflg})");
 
   elseif (!is_struct(sys))
     error("sys must be in system data structure form");
 
   elseif(!is_digital(sys))
@@ -253,11 +250,9 @@ function [dsys,fidx] = dmr2d (sys, idx, 
 
   da = da(pvi,pvi);
   db = db(pvi,:);
   stname = stname(pvi,:);
 
   ## construct new system and return
   dsys = ss2sys(da,db,dc,dd,Ts2,0,nz,stname,inname,outname,find(yd == 1));
 
-  implicit_str_to_num_ok = save_val;	# restore value
-
 endfunction
diff --git a/scripts/control/fir2sys.m b/scripts/control/fir2sys.m
--- a/scripts/control/fir2sys.m
+++ b/scripts/control/fir2sys.m
@@ -69,19 +69,16 @@
  
 function sys = fir2sys (num,tsam,inname,outname)
 
   ## Written by R. Bruce Tenison  July 29, 1994
   ## Name changed to TF2SYS July 1995
   ## updated for new system data structure format July 1996
   ## adapted from tf2sys july 1996
 
-  save_val = implicit_str_to_num_ok;
-  implicit_str_to_num_ok = 1;
-
   ## Test for the correct number of input arguments
   if (nargin < 1 | nargin > 4)
     usage('sys=fir2sys(num[,tsam,inname,outname])');
   endif
 
   ## let tf2sys do the argument checking
   den = [1,zeros(1,length(num)-1)];
 
@@ -92,10 +89,9 @@ function sys = fir2sys (num,tsam,inname,
   ## Set name of input
   if(nargin < 3)  inname = sysdefioname(1,"u");        endif
 
   ## Set name of output
   if(nargin < 4)  outname = sysdefioname(1,"y"); 	endif
 
   sys = tf2sys(num,den,tsam,inname,outname);
   
-  implicit_str_to_num_ok = save_val;
 endfunction
diff --git a/scripts/control/lqg.m b/scripts/control/lqg.m
--- a/scripts/control/lqg.m
+++ b/scripts/control/lqg.m
@@ -61,19 +61,16 @@
 
 ## See also:  h2syn, lqe, lqr
 
 function [K,Q1,P1,Ee,Er] = lqg(sys,Sigw,Sigv,Q,R,input_list)
 
   ## Written by A. S. Hodel August 1995; revised for new system format
   ## August 1996
 
-  sav_val = implicit_str_to_num_ok;
-  implicit_str_to_num_ok = 1;
-
   if ( (nargin < 5) | (nargin > 6))
     usage("[K,Q1,P1,Ee,Er] = lqg(sys,Sigw, Sigv,Q,R{,input_list})");
 
   elseif(!is_struct(sys) )
     error("sys must be in system data structure");
   endif
 
   DIG = is_digital(sys);
@@ -142,10 +139,9 @@ function [K,Q1,P1,Ee,Er] = lqg(sys,Sigw,
   inname1 = strappend(outname,"_K");
 
   if(DIG)
     K = ss2sys(Ac,Bc,Cc,Dc,tsam,n,nz,stname1,inname1,outname1,1:rows(Cc));
   else
     K = ss2sys(Ac,Bc,Cc,Dc,tsam,n,nz,stname,inname1,outname1);
   endif
 
-  implicit_str_to_num_ok = sav_val;
 endfunction
diff --git a/scripts/control/nyquist.m b/scripts/control/nyquist.m
--- a/scripts/control/nyquist.m
+++ b/scripts/control/nyquist.m
@@ -92,19 +92,16 @@ function [realp,imagp,w] = nyquist(sys,w
   ## Revised by John Ingram July 1996 for system format
 
   ## Both bode and nyquist share the same introduction, so the common
   ## parts are in a file called bodquist.m.  It contains the part that
   ## finds the number of arguments, determines whether or not the system
   ## is SISO, andd computes the frequency response.  Only the way the
   ## response is plotted is different between the two functions.
 
-  save_val = implicit_str_to_num_ok;	# save for later
-  implicit_str_to_num_ok = 1;
-
   ## check number of input arguments given
   if (nargin < 1 | nargin > 5)
     usage("[realp,imagp,w] = nyquist(sys[,w,outputs,inputs,atol])");
   endif
   if(nargin < 2)
     w = [];
   endif
   if(nargin < 3)
@@ -201,11 +198,9 @@ function [realp,imagp,w] = nyquist(sys,w
 
      endif
     endwhile
     w = [];
     realp=[];
     imagp=[];
   endif
 
-  implicit_str_to_num_ok = save_val;	# restore value
-
 endfunction
diff --git a/scripts/control/pzmap.m b/scripts/control/pzmap.m
--- a/scripts/control/pzmap.m
+++ b/scripts/control/pzmap.m
@@ -25,20 +25,18 @@
 ## @strong{Outputs}
 ## if omitted, the poles and zeros are plotted on the screen.
 ##           otherwise, pol, zer are returned as the system poles and zeros.
 ##           (see sys2zp for a preferable function call)
 ## @end deftypefn
  
 function [zer,pol]=pzmap(sys)
 
-  save_val = implicit_str_to_num_ok;	# save for later
   save_emp = empty_list_elements_ok;
 
-  implicit_str_to_num_ok = 1;
   empty_list_elements_ok = 1;
 
   if(nargin != 1)
     usage("pzmap(sys) or [zer,pol] = pzmap(sys)"); 
   elseif (!is_struct(sys));
     error("sys must be in system format");
   endif
 
@@ -78,12 +76,11 @@ function [zer,pol]=pzmap(sys)
   elseif(length(pol) == 0)
     plot(zerdata(:,1), zerdata(:,2),"@31 ;zeros (no poles);");
   else
     plot(zerdata(:,1), zerdata(:,2),"@31 ;zeros;", ...
       poldata(:,1), poldata(:,2),"@12 ;poles;");
   endif
   replot
 
-  implicit_str_to_num_ok = save_val;	# restore value
   empty_list_elements_ok = save_emp;
 
 endfunction
diff --git a/scripts/control/ss2sys.m b/scripts/control/ss2sys.m
--- a/scripts/control/ss2sys.m
+++ b/scripts/control/ss2sys.m
@@ -186,19 +186,16 @@
 ## since none were given.
 ## 
 ## @end deftypefn
 
 function  retsys = ss2sys  (a,b,c,d,tsam,n,nz,stname,inname,outname,outlist)
 
   ## Written by John Ingram (ingraje@eng.auburn.edu)  July 20, 1996
 
-  save_val = implicit_str_to_num_ok;	# save for later
-  implicit_str_to_num_ok = 1;
-
   ## Test for correct number of inputs
   if ((nargin < 3) | (nargin > 11))
     usage("retsys = ss2sys  (a,b,c{,d,tsam,n,nz,stname,inname,outname,outlist})");
   endif
 
   ## verify A, B, C, D arguments
   ## If D is not specified, set it to a zero matrix of appriate dimension.
   if (nargin == 3)          d = zeros(rows(c) , columns(b));
@@ -288,10 +285,9 @@ function  retsys = ss2sys  (a,b,c,d,tsam
   if(nargin < 11)
     retsys = syssetsignals(retsys,"yd",ones(1,p)*(tsam > 0));
   else
     if(!isempty(outlist)) 
       retsys = syssetsignals(retsys,"yd",ones(size(outlist)),outlist);
     endif
   endif
 
-  implicit_str_to_num_ok = save_val;	## restore value
 endfunction
diff --git a/scripts/control/sysadd.m b/scripts/control/sysadd.m
--- a/scripts/control/sysadd.m
+++ b/scripts/control/sysadd.m
@@ -39,19 +39,16 @@
 ## @end example
 ## @end deftypefn
  
 function sys = sysadd(...)
 
   ## Written by John Ingram July 1996
   ## Updated for variable number of arguments July 1999 A. S. Hodel
 
-  save_val = implicit_str_to_num_ok;	# save for later
-  implicit_str_to_num_ok = 1;
-
   if(nargin < 1)
     usage("sysadd: sys = sysysadd(Gsys{,Hsys, ...})");
   endif
 
   ## collect all arguments
   arglist = list();
   va_start();
   for kk=1:nargin
@@ -110,10 +107,11 @@ function sys = sysadd(...)
   
   else
     ## multiple systems (or a single system); combine together one by one
     sys = nth(arglist,1);
     for kk=2:length(arglist)
       sys = sysadd(sys,nth(arglist,kk));
     endfor
   endif
+
 endfunction
 
diff --git a/scripts/control/sysappend.m b/scripts/control/sysappend.m
--- a/scripts/control/sysappend.m
+++ b/scripts/control/sysappend.m
@@ -73,20 +73,19 @@
 ## @end itemize
 ## 
 ## @end deftypefn
 
 function retsys = sysappend(sys,b,c,d,outname,inname,yd)
 
   ## written by John Ingram August 1996
   
-  sav_implicit_str_to_num_ok = implicit_str_to_num_ok;	# save for later
   sav_empty_list_elements_ok = empty_list_elements_ok;
 
-  empty_list_elements_ok = 1;                implicit_str_to_num_ok = 1;
+  empty_list_elements_ok = 1;
   
   ## check input arguments
   if ( (nargin < 2) | (nargin > 7) | (!is_struct(sys)))
     usage("retsys = sysappend(sys,b,c[,d,outname,inname,yd]) ");
   elseif(!is_struct(sys))
     error("sys must be a system data structure");
   endif
   
@@ -182,12 +181,11 @@ function retsys = sysappend(sys,b,c,d,ou
 
   ## Splice in original D matrix  
   if(Am & Ap)          d(1:Ap, 1:Am) = Ad;       endif
   Ad = d;
   
   ## construct return system
   retsys = ss2sys(Aa,Ab,Ac,Ad,Ats,Ann,Anz,Ast,Ain,Aout,find(Ayd == 1));
   
-  implicit_str_to_num_ok = sav_implicit_str_to_num_ok;	# restore value
   empty_list_elements_ok = sav_empty_list_elements_ok;
 
 endfunction
diff --git a/scripts/control/sysconnect.m b/scripts/control/sysconnect.m
--- a/scripts/control/sysconnect.m
+++ b/scripts/control/sysconnect.m
@@ -63,19 +63,16 @@
 ## 
 ## @end deftypefn
 
 function sys = sysconnect(sys,output_list,input_list,order,tol)
 
   ## A. S. Hodel August 1995
   ## modified by John Ingram July 1996
 
-  save_val = implicit_str_to_num_ok;	# save for later
-  implicit_str_to_num_ok = 1;
-
   if( (nargin < 3) | (nargin > 5) )
     usage("retsys = sysconnect(sys,output_list,input_list[,order,tol])");
   endif
 
   ## check order
   if(nargin <= 3)
     order = 0;
   elseif( (order != 0) & (order != 1) )
@@ -269,11 +266,9 @@ function sys = sysconnect(sys,output_lis
     sys = syssetsignals(sys,"in",strval,idx);
   endfor
   
   ## maintain original system type if it was SISO
   if    (strcmp(sysgettype(sys),"tf") )       sysupdate(sys,'tf');
   elseif(strcmp(sysgettype(sys),"zp") )       sysupdate(sys,'zp');
   endif
 
-  implicit_str_to_num_ok = save_val;	# restore value  
-
 endfunction
diff --git a/scripts/control/syscont.m b/scripts/control/syscont.m
--- a/scripts/control/syscont.m
+++ b/scripts/control/syscont.m
@@ -35,19 +35,18 @@
 ## @end table
 ## 
 ## @end deftypefn
  
 function [csys,Acd,Ccd] = syscont(sys)
 
   ## Written by John Ingram August 1996
 
-  save_val = implicit_str_to_num_ok;	# save for later
   save_empty = empty_list_elements_ok;
-  empty_list_elements_ok = implicit_str_to_num_ok = 1;
+  empty_list_elements_ok = 1;
 
   if (nargin != 1)
     usage("[csys,Acd,Ccd,Dcd] = syscont(sys)");
   elseif (!is_struct(sys))
     error("sys must be in system data structure form");
   endif
 
   sys = sysupdate(sys,"ss");
@@ -78,12 +77,11 @@ function [csys,Acd,Ccd] = syscont(sys)
   endif
   outname = sys_outname(y_c);
   Dcc = sys_d(y_c,:);
   Ccd = sys_c(y_c,st_d);
   inname = sys_inname;
   
   csys = ss2sys(Acc,Bcc,Ccc,Dcc,0,sys_n,0,stname,inname,outname);
 
-  implicit_str_to_num_ok = save_val;	# restore value
   empty_list_elements_ok = save_empty;
  
 endfunction
diff --git a/scripts/control/sysdisc.m b/scripts/control/sysdisc.m
--- a/scripts/control/sysdisc.m
+++ b/scripts/control/sysdisc.m
@@ -40,19 +40,18 @@ function [dsys,Adc,Cdc] = sysdisc(sys)
   ## inputs: sys = system data structure
   ## outputs:
   ##    dsys: purely discrete portion of sys (returned empty if there is
   ##          no purely discrete path from inputs to outputs)
   ##    Adc, Cdc: connections from continuous states to discrete states/discrete
   ##    outputs, respectively.
   ##
 
-  save_val = implicit_str_to_num_ok;	# save for later
   save_empty = empty_list_elements_ok;
-  empty_list_elements_ok = implicit_str_to_num_ok = 1;
+  empty_list_elements_ok = 1;
 
 
   if (nargin != 1)
     usage("[dsys,Adc,Cdc] = sysdisc(sys)");
   elseif (!is_struct(sys))
     error("sys must be in system data structure form");
   endif
 
@@ -98,12 +97,12 @@ function [dsys,Adc,Cdc] = sysdisc(sys)
 
   if(!isempty(outname))
     tsam = sysgettsam(sys);
     [nc,nz] = sysdimensions(sys);
     dsys = ss2sys(Add,Bdd,Cdd,Ddd,tsam,0,nz,stname,inname,outname,outlist);
   else
     dsys=[];
   endif
-  implicit_str_to_num_ok = save_val;	# restore value
+
   empty_list_elements_ok = save_empty;
 
 endfunction
diff --git a/scripts/control/sysdup.m b/scripts/control/sysdup.m
--- a/scripts/control/sysdup.m
+++ b/scripts/control/sysdup.m
@@ -51,19 +51,16 @@
 ## 
 ## @end deftypefn
 
 function retsys = sysdup(Asys,output_list,input_list)
 
   ## A. S. Hodel August 1995
   ## modified by John Ingram July 1996
 
-  save_val = implicit_str_to_num_ok;	# save for later
-  implicit_str_to_num_ok = 1;
-
   if( nargin != 3)
     usage("retsys = sysdup(Asys,output_list,input_list)");
   endif
 
   if( !is_struct(Asys))
     error("Asys must be a system data structure (see ss2sys, tf2sys, or zp2sys)")
   endif
 
@@ -114,11 +111,9 @@ function retsys = sysdup(Asys,output_lis
   for jj=(pp+1):(pp+length(output_list))
     onum = output_list(jj-pp);
     strval = sprintf("%s(dup)",sysgetsignals(retsys,"out",onum,1) );
     retsys = syssetsignals(retsys,"out",strval,jj);
     dflg = sysgetsignals(retsys,"yd",onum);
     retsys = syssetsignals(retsys,"yd",dflg,jj);
   endfor
 
-  implicit_str_to_num_ok = save_val;	# restore value
-
 endfunction
diff --git a/scripts/control/sysgroup.m b/scripts/control/sysgroup.m
--- a/scripts/control/sysgroup.m
+++ b/scripts/control/sysgroup.m
@@ -47,19 +47,16 @@
 ## @end deftypefn
  
 function sys = sysgroup(...)
 
   ## A. S. Hodel August 1995
   ## modified by John Ingram July 1996
   ## A. S. Hodel: modified for variable number of arguments 1999
 
-  save_val = implicit_str_to_num_ok;	# save for later
-  implicit_str_to_num_ok = 1;
-
   save_emp = empty_list_elements_ok;
   empty_list_elements_ok = 1;
 
     
   if(nargin < 1)
     usage("sys = sysgroup(Asys{,Bsys,...})");
   endif
 
@@ -144,12 +141,11 @@ function sys = sysgroup(...)
     ## multiple systems (or a single system); combine together one by one
     sys = nth(arglist,1);
     for kk=2:length(arglist)
       printf("sysgroup: kk=%d\n",kk);
       sys = sysgroup(sys,nth(arglist,kk));
     endfor
   endif
   
-  implicit_str_to_num_ok = save_val;	# restore value  
   empty_list_elements_ok = save_emp;
     
 endfunction
diff --git a/scripts/control/sysmult.m b/scripts/control/sysmult.m
--- a/scripts/control/sysmult.m
+++ b/scripts/control/sysmult.m
@@ -32,19 +32,16 @@
 ## does not recognize discrete inputs).
 ## @end deftypefn
 
 function sys = sysmult(...)
 
   ## Written by John Ingram July 1996
   ## updated for variable number of arguments by A. S. Hodel July 1999
 
-  save_val = implicit_str_to_num_ok;	# save for later
-  implicit_str_to_num_ok = 1;
-
   if(nargin < 1)
     usage("sysmult: sys = sysmult(Asys{,Bsys,...})");
   endif
 
   ## collect all arguments
   arglist = list();
   va_start();
   for kk=1:nargin
@@ -106,11 +103,11 @@ function sys = sysmult(...)
 
   else
     ## multiple systems (or a single system); combine together one by one
     sys = nth(arglist,1);
     for kk=2:length(arglist)
       sys = sysmult(sys,nth(arglist,kk));
     endfor
   endif
-  implicit_str_to_num_ok = save_val;	# restore value  
+
 endfunction  
   
diff --git a/scripts/control/sysout.m b/scripts/control/sysout.m
--- a/scripts/control/sysout.m
+++ b/scripts/control/sysout.m
@@ -38,20 +38,16 @@
 ## @end table
 ## @end table
 ## @end deftypefn
  
 function retsys = sysout(sys,opt)
 
   ## Written by A S Hodel: 1995-1996
 
-  ## save for restoring at end of routine
-  save_val = implicit_str_to_num_ok;
-  implicit_str_to_num_ok = 1;
-
   if( (nargin < 1) || (nargin > 2) )
     usage("sysout(sys[,opt])");
   endif
 
   if(isempty(sys))
     retsys = sys;
     warning("sysout: empty system")
     return;
@@ -145,11 +141,10 @@ function retsys = sysout(sys,opt)
     if(dmat)       disp(dd);         endif
   endif
 
   if(nargout >= 1)
     retsys = sys;
   endif 
 
   ## restore global variable
-  implicit_str_to_num_ok = save_val;
 
 endfunction
diff --git a/scripts/control/syssetsignals.m b/scripts/control/syssetsignals.m
--- a/scripts/control/syssetsignals.m
+++ b/scripts/control/syssetsignals.m
@@ -85,19 +85,16 @@
 ## @end example
 ## 
 ## @end deftypefn
 
 function retsys = syssetsignals(sys,opt,names,sig_idx)
 
   ## Written by John Ingram August 1996
 
-  save_val = implicit_str_to_num_ok;	# save for later
-  implicit_str_to_num_ok = 1;
-
   if (nargin < 3 | nargin > 4)
     usage("retsys=syssetsignals(sys,opt,names{,sig_idx})");
   elseif (!is_struct(sys))
     error("sys must be a system data structure");
   elseif (isempty(opt))
     opt = "out";
   elseif( ! isstr(opt)  )
     error("opt must be a string");
@@ -222,11 +219,10 @@ function retsys = syssetsignals(sys,opt,
     sys.inname = sig_vals;
   elseif(strcmp(opt,"out"))
     sys.outname = sig_vals;
   elseif(strcmp(opt,"yd"))
     sys.yd = sig_vals;
   endif
 
   retsys = sys;
-  implicit_str_to_num_ok = save_val;	# restore value
 
 endfunction
diff --git a/scripts/control/syssub.m b/scripts/control/syssub.m
--- a/scripts/control/syssub.m
+++ b/scripts/control/syssub.m
@@ -36,19 +36,16 @@
 ## @end example
 ## @end deftypefn
  
 function sys = syssub(...)
 
   ## Written by John Ingram July 1996
   ## updated for variable numbers of input arguments by July 1999 A. S. Hodel
 
-  save_val = implicit_str_to_num_ok;	# save for later
-  implicit_str_to_num_ok = 1;
-
   if(nargin < 1)
     usage("syssub: sys = syssub(Gsys{,Hsys,...})");
   endif
 
   ## collect all arguments
   arglist = list();
   va_start();
   for kk=1:nargin
diff --git a/scripts/control/tf2sys.m b/scripts/control/tf2sys.m
--- a/scripts/control/tf2sys.m
+++ b/scripts/control/tf2sys.m
@@ -50,19 +50,16 @@
 ## @end example
 ## @end deftypefn
 
 function outsys = tf2sys(num,den,tsam,inname,outname)
   ## Written by R. Bruce Tenison  July 29, 1994
   ## Name changed to TF2SYS July 1995
   ## updated for new system data structure format July 1996
 
-  save_val = implicit_str_to_num_ok;
-  implicit_str_to_num_ok = 1;
-
   ## Test for the correct number of input arguments
   if ((nargin < 2) || (nargin > 5))
     usage('outsys=tf2sys(num,den[,tsam,inname,outname])');
     return
   endif
 
   ## check input format 
   if( ! ( (is_vector(num) || is_scalar(num)) && ...
@@ -134,10 +131,9 @@ function outsys = tf2sys(num,den,tsam,in
       if(length(outname) > 1)
         warning("tf2sys: %d output names provided; first used",length(outname));
         outname = outname(1);
       endif
       outsys = syssetsignals(outsys,"out",outname);
     endif
   endif 
 
-  implicit_str_to_num_ok = save_val;
 endfunction
diff --git a/scripts/control/tfout.m b/scripts/control/tfout.m
--- a/scripts/control/tfout.m
+++ b/scripts/control/tfout.m
@@ -23,19 +23,18 @@
 ## @end deftypefn
 
 ##  See also: polyval, polyvalm, poly, roots, conv, deconv, residue, 
 ##	filter, polyderiv, polyinteg, polyout
 
 function tfout(num,denom,x)
 ## Written by A. Scottedward Hodel (scotte@eng.auburn.edu) June 1995)
   
-  save_val = implicit_str_to_num_ok;
   save_empty = empty_list_elements_ok;
-  empty_list_elements_ok = implicit_str_to_num_ok = 1;
+  empty_list_elements_ok = 1;
   
   if (nargin < 2 ) | (nargin > 3) | (nargout != 0 ) 
     usage("tfout(num,denom[,x])");
   endif
 
   if ( (!is_vector(num)) | (!is_vector(denom)) )
     error("tfout: first two argument must be vectors");
   endif
@@ -53,11 +52,10 @@ function tfout(num,denom,x)
     y = strrep(blanks(len)," ","-");
     disp(numstring)
     disp(y)
     disp(denomstring)
   else
     error('tfout: empty transfer function')
   end
 
-  implicit_str_to_num_ok = save_val;
   empty_list_elements_ok = save_empty;
 endfunction
diff --git a/scripts/control/zp2sys.m b/scripts/control/zp2sys.m
--- a/scripts/control/zp2sys.m
+++ b/scripts/control/zp2sys.m
@@ -51,19 +51,16 @@
 ## s (s + 2) (s + 2)
 ## @end example
 ## @end deftypefn
  
 function  outsys = zp2sys (zer,pol,k,tsam,inname,outname)
 
   ## Modified by John Ingram  July 20, 1996  
 
-  save_val = implicit_str_to_num_ok;	# save for restoring later
-  implicit_str_to_num_ok = 1;
-
   ## Test for the correct number of input arguments
   if ((nargin < 3) || (nargin > 6))
     usage("outsys = zp2sys(zer,pol,k[,tsam,inname,outname])");
   endif
 
   ## check input format 
   if( ! (is_vector(zer) | isempty(zer) ) )
     error("zer must be a vector or empty");
@@ -141,10 +138,9 @@ function  outsys = zp2sys (zer,pol,k,tsa
       if(!is_list(outname))        outname = list(outname);    endif
       if(!is_signal_list(outname))
         error("outname must be a single signal name");
       endif
       outsys.outname = outname(1);
     endif
   endif 
 
-  implicit_str_to_num_ok = save_val;
 endfunction
diff --git a/scripts/control/zpout.m b/scripts/control/zpout.m
--- a/scripts/control/zpout.m
+++ b/scripts/control/zpout.m
@@ -24,22 +24,19 @@
 
 ##  See also: polyval, polyvalm, poly, roots, conv, deconv, residue, 
 ##	filter, polyderiv, polyinteg, polyout 
 
 function zpout(zer,pol,k,x)
 
   ## Written by A. Scottedward Hodel (scotte@eng.auburn.edu) June 1995)
 
-  save_val = implicit_str_to_num_ok;
   save_empty = empty_list_elements_ok;
   empty_list_elements_ok = 1;
 
-  implicit_str_to_num_ok = 1;
-
   if (nargin < 3 ) | (nargin > 4) | (nargout != 0 )
     usage("zpout(zer,pol,k[,x])");
   endif
  
   if( !(is_vector(zer) | isempty(zer)) | !(is_vector(pol) | isempty(pol)) )
     error("zer, pol must be vectors or empty");
   endif
 
@@ -100,12 +97,11 @@ function zpout(zer,pol,k,x)
     if(length(denomstring))
       disp(y)
       disp(denomstring)
     endif
   else
     error('zpout: empty transfer function')
   end
 
-  implicit_str_to_num_ok = save_val;
   empty_list_elements_ok = save_empty;
 
 endfunction
