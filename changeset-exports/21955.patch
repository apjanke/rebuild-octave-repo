# HG changeset patch
# User jcorno <jacopo.corno@gmail.com>
# Date 1466080442 -7200
#      Thu Jun 16 14:34:02 2016 +0200
# Node ID 0f3e875d9078894b72e9df3dff3517af900779e7
# Parent  6da01de4dd8aa443464dac96823bff5cd8dada84
Fix statistics on solution solving for ode45, ode23 (bug #48243).

* ode23.m: Initialize nsteps, nfailed, nfevals to correct values.

* ode45.m: Initialize nsteps, nfailed, nfevals to correct values.

* integrate_adaptive.m: Initialize cntloop, cntcycles to correct values.
Remove extra increment on cntloop.

diff --git a/scripts/ode/ode23.m b/scripts/ode/ode23.m
--- a/scripts/ode/ode23.m
+++ b/scripts/ode/ode23.m
@@ -348,19 +348,19 @@ function varargout = ode23 (fun, trange,
   if (odeopts.haveeventfunction)   # Cleanup event function handling
     ode_event_handler (odeopts.Events, solution.t(end), ...
                          solution.x(end,:)', "done", odeopts.funarguments{:});
   endif
 
   ## Print additional information if option Stats is set
   if (strcmp (odeopts.Stats, "on"))
     havestats = true;
-    nsteps    = solution.cntloop-2;              # cntloop from 2..end
-    nfailed   = (solution.cntcycles-1)-nsteps+1; # cntcycl from 1..end
-    nfevals   = 3 * (solution.cntcycles-1);      # number of ode evaluations
+    nsteps    = solution.cntloop;             # cntloop from 2..end
+    nfailed   = solution.cntcycles - nsteps;  # cntcycl from 1..end
+    nfevals   = 3 * solution.cntcycles + 1;   # number of ode evaluations
     ndecomps  = 0;  # number of LU decompositions
     npds      = 0;  # number of partial derivatives
     nlinsols  = 0;  # no. of solutions of linear systems
     ## Print cost statistics if no output argument is given
     if (nargout == 0)
       printf ("Number of successful steps: %d\n", nsteps);
       printf ("Number of failed attempts:  %d\n", nfailed);
       printf ("Number of function calls:   %d\n", nfevals);
diff --git a/scripts/ode/ode45.m b/scripts/ode/ode45.m
--- a/scripts/ode/ode45.m
+++ b/scripts/ode/ode45.m
@@ -333,19 +333,19 @@ function varargout = ode45 (fun, trange,
     ode_event_handler (odeopts.Events, solution.t(end),
                          solution.x(end,:)', "done",
                          odeopts.funarguments{:});
   endif
 
   ## Print additional information if option Stats is set
   if (strcmp (odeopts.Stats, "on"))
     havestats = true;
-    nsteps    = solution.cntloop-2;                 # cntloop from 2..end
-    nfailed   = (solution.cntcycles-1)-(nsteps)+1;  # cntcycl from 1..end
-    nfevals   = 6 * (solution.cntcycles-1) + 1;     # number of ode evaluations
+    nsteps    = solution.cntloop;             # cntloop from 2..end
+    nfailed   = solution.cntcycles - nsteps;  # cntcycl from 1..end
+    nfevals   = 6 * solution.cntcycles + 1;   # number of ode evaluations
     ndecomps  = 0;  # number of LU decompositions
     npds      = 0;  # number of partial derivatives
     nlinsols  = 0;  # no. of linear systems solutions
     ## Print cost statistics if no output argument is given
     if (nargout == 0)
       printf ("Number of successful steps: %d\n", nsteps);
       printf ("Number of failed attempts:  %d\n", nfailed);
       printf ("Number of function calls:   %d\n", nfevals);
diff --git a/scripts/ode/private/integrate_adaptive.m b/scripts/ode/private/integrate_adaptive.m
--- a/scripts/ode/private/integrate_adaptive.m
+++ b/scripts/ode/private/integrate_adaptive.m
@@ -103,18 +103,18 @@ function solution = integrate_adaptive (
     ode_event_handler (options.Events, tspan(end), x,
                          "init", options.funarguments{:});
   endif
 
   if (options.havenonnegative)
     nn = options.NonNegative;
   endif
 
-  solution.cntloop = 2;
-  solution.cntcycles = 1;
+  solution.cntloop = 0;
+  solution.cntcycles = 0;
   solution.cntsave = 2;
   solution.unhandledtermination = true;
   ireject = 0;
 
   k_vals = [];
   iout = istep = 1;
   while (dir * t_old < dir * tspan(end))
 
@@ -248,18 +248,16 @@ function solution = integrate_adaptive (
 
       endif
 
       ## move to next time-step
       t_old = t_new;
       x_old = x_new;
       k_vals = new_k_vals;
 
-      solution.cntloop += 1;
-
     else
 
       ireject += 1;
 
       ## Stop solving because, in the last 5,000 steps, no successful valid
       ## value has been found
       if (ireject >= 5_000)
         error (["integrate_adaptive: Solving was not successful. ", ...
