# HG changeset patch
# User jwe
# Date 814076501 0
#      Thu Oct 19 04:21:41 1995 +0000
# Node ID 6ddabf91bc4e056fcb41fff84617f61aa2bd240e
# Parent  b10436a98aa7eb45c58824191a2abfcd79f99164
[project @ 1995-10-19 04:21:41 by jwe]

diff --git a/src/expm.cc b/src/expm.cc
--- a/src/expm.cc
+++ b/src/expm.cc
@@ -95,92 +95,89 @@ DEFUN_DLD_BUILTIN ("expm", Fexpm, Sexpm,
     return Matrix ();
 
   if (nr != nc)
     {
       gripe_square_matrix_required ("expm");
       return retval;
     }
 
-  int i, j;
-
   char* balance_job = "B";	// variables for balancing
 
-  int sqpow;		// power for scaling and squaring
-  double inf_norm;	// norm of preconditioned matrix
-  int minus_one_j;	// used in computing pade approx
-
   if (arg.is_real_type ())
     {
       // Compute the exponential.
 
       Matrix m = arg.matrix_value ();
 
       if (error_state)
 	return retval;
 
       double trshift = 0;		// trace shift value
 
       // Preconditioning step 1: trace normalization.
 
-      for (i = 0; i < nc; i++)
+      for (int i = 0; i < nc; i++)
 	trshift += m.elem (i, i);
+
       trshift /= nc;
-      for (i = 0; i < nc; i++)
+
+      for (int i = 0; i < nc; i++)
 	m.elem (i, i) -= trshift;
 
       // Preconditioning step 2: balancing.
 
       AEPBALANCE mbal (m, balance_job);
       m = mbal.balanced_matrix ();
       Matrix d = mbal.balancing_matrix ();
 
       // Preconditioning step 3: scaling.
 
       ColumnVector work(nc);
-      inf_norm = F77_FCN (dlange, DLANGE) ("I", nc, nc,
-					   m.fortran_vec (), nc,
-					   work.fortran_vec ());
+      double inf_norm
+	= F77_FCN (dlange, DLANGE) ("I", nc, nc, m.fortran_vec (),nc,
+				    work.fortran_vec ());
 
-      sqpow = (int) (inf_norm > 0.0
-		     ? (1.0 + log (inf_norm) / log (2.0))
-		     : 0.0);
+      int sqpow = (int) (inf_norm > 0.0
+			 ? (1.0 + log (inf_norm) / log (2.0))
+			 : 0.0);
 
       // Check whether we need to square at all.
 
       if (sqpow < 0)
 	sqpow = 0;
 
       if (sqpow > 0)
 	{
-	  for (inf_norm = 1.0, i = 0; i < sqpow; i++)
-	    inf_norm *= 2.0;
+	  double scale_factor = 1.0;
+	  for (int i = 0; i < sqpow; i++)
+	    scale_factor *= 2.0;
 
-	  m = m / inf_norm;
+	  m = m / scale_factor;
 	}
 
       // npp, dpp: pade' approx polynomial matrices.
 
       Matrix npp (nc, nc, 0.0);
       Matrix dpp = npp;
 
       // Now powers a^8 ... a^1.
 
-      minus_one_j = -1;
-      for (j = 7; j >= 0; j--)
+      int minus_one_j = -1;
+      for (int j = 7; j >= 0; j--)
 	{
 	  npp = m * npp + m * padec[j];
 	  dpp = m * dpp + m * (minus_one_j * padec[j]);
 	  minus_one_j *= -1;
 	}
 
       // Zero power.
 
       dpp = -dpp;
-      for(j = 0; j < nc; j++)
+      for(int j = 0; j < nc; j++)
 	{
 	  npp.elem (j, j) += 1.0;
 	  dpp.elem (j, j) += 1.0;
 	}
 
       // Compute pade approximation = inverse (dpp) * npp.
 
       Matrix result = dpp.solve (npp);
@@ -213,71 +210,74 @@ DEFUN_DLD_BUILTIN ("expm", Fexpm, Sexpm,
 
       if (error_state)
 	return retval;
 
       Complex trshift = 0.0;		// trace shift value
 
       // Preconditioning step 1: trace normalization.
 
-      for (i = 0; i < nc; i++)
+      for (int i = 0; i < nc; i++)
 	trshift += m.elem (i, i);
+
       trshift /= nc;
-      for (i = 0; i < nc; i++)
+
+      for (int i = 0; i < nc; i++)
 	m.elem (i, i) -= trshift;
 
       // Preconditioning step 2: eigenvalue balancing.
 
       ComplexAEPBALANCE mbal (m, balance_job);
       m = mbal.balanced_matrix ();
       ComplexMatrix d = mbal.balancing_matrix ();
 
       // Preconditioning step 3: scaling.
 
       ColumnVector work (nc);
-      inf_norm = F77_FCN (zlange, ZLANGE) ("I", nc, nc,
-					   m.fortran_vec (), nc,
-					   work.fortran_vec ());
+      double inf_norm
+	= F77_FCN (zlange, ZLANGE) ("I", nc, nc, m.fortran_vec (), nc,
+				    work.fortran_vec ());
 
-      sqpow = (int) (inf_norm > 0.0
-		     ? (1.0 + log (inf_norm) / log (2.0))
-		     : 0.0);
+      int sqpow = (int) (inf_norm > 0.0
+			 ? (1.0 + log (inf_norm) / log (2.0))
+			 : 0.0);
 
       // Check whether we need to square at all.
 
       if (sqpow < 0)
 	sqpow = 0;
 
       if (sqpow > 0)
 	{
-	  for (inf_norm = 1.0, i = 0; i < sqpow; i++)
-	    inf_norm *= 2.0;
+	  double scale_factor = 1.0;
+	  for (int i = 0; i < sqpow; i++)
+	    scale_factor *= 2.0;
 
-	  m = m / inf_norm;
+	  m = m / scale_factor;
 	}
 
       // npp, dpp: pade' approx polynomial matrices.
 
       ComplexMatrix npp (nc, nc, 0.0);
       ComplexMatrix dpp = npp;
 
       // Now powers a^8 ... a^1.
 
-      minus_one_j = -1;
-      for (j = 7; j >= 0; j--)
+      int minus_one_j = -1;
+      for (int j = 7; j >= 0; j--)
 	{
 	  npp = m * npp + m * padec[j];
 	  dpp = m * dpp + m * (minus_one_j * padec[j]);
 	  minus_one_j *= -1;
 	}
 
       // Zero power.
 
       dpp = -dpp;
-      for (j = 0; j < nc; j++)
+      for (int j = 0; j < nc; j++)
 	{
 	  npp.elem (j, j) += 1.0;
 	  dpp.elem (j, j) += 1.0;
 	}
 
       // Compute pade approximation = inverse (dpp) * npp.
 
       ComplexMatrix result = dpp.solve (npp);
