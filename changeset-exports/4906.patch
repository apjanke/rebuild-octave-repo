# HG changeset patch
# User jwe
# Date 1087989111 0
#      Wed Jun 23 11:11:51 2004 +0000
# Node ID 6754342ef7ade9a06154760fe66c9f58be6783dc
# Parent  f7a337f3fd9e5aba1a3242708e39aeb3a1943343
[project @ 2004-06-23 11:11:50 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2004-06-22  David Bateman  <dbateman@free.fr>
+
+	* configure.in: Use -Wl,-Bsymbolic for MKOCTFILE_DL_LDFLAGS on
+	GNU/Linux systems but not for SH_LDFLAGS.
+    
 2004-04-22  John W. Eaton  <jwe@octave.org>
 
 	* configure.in: Add -Wl,-Bsymbolic to SH_LDFLAGS for GNU/Linux
 	systems.  From Fredrik Lingvall <Fredrik.Lingvall@signal.uu.se>.
 
 	* mkoctfile.in: Allow -Wx,option style options to be passed to the
 	compiler.  From Al Niessner <Al.Niessner@jpl.nasa.gov>.
 
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.453 $)
+AC_REVISION($Revision: 1.454 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -693,17 +693,17 @@ case "$canonical_host_type" in
     SHLLIB=dll.a
     SHLBIN=dll
     SH_LDFLAGS="-shared -Wl,--export-all-symbols -Wl,--enable-auto-import"
     SHLLINKEXT=.dll
     SONAME_FLAGS='-Wl,--out-implib=$@.a'
     library_path_var=PATH
   ;;
   *-*-linux* | *-*-gnu*)
-    SH_LDFLAGS="-shared -Wl,-Bsymbolic"
+    MKOCTFILE_DL_LDFLAGS="-shared -Wl,-Bsymbolic"
     SONAME_FLAGS='-Wl,-soname -Wl,$@'
     RLD_FLAG='-Wl,-rpath -Wl,$(octlibdir)'
   ;;
   i[[3456]]86-*-sco3.2v5*)
     SONAME_FLAGS='-Wl,-h -Wl,$@'
     RLD_FLAG=
     SH_LDFLAGS=-G
   ;;
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -29,17 +29,18 @@ MATRIX_INC := Array.h Array2.h Array3.h 
 	mx-defs.h mx-ext.h CColVector.h CDiagMatrix.h CMatrix.h \
 	CNDArray.h CRowVector.h CmplxAEPBAL.h CmplxCHOL.h \
 	CmplxDET.h CmplxHESS.h CmplxLU.h CmplxQR.h CmplxQRP.h \
 	CmplxSCHUR.h CmplxSVD.h EIG.h boolMatrix.h boolNDArray.h \
 	chMatrix.h chNDArray.h dColVector.h dDiagMatrix.h dMatrix.h \
 	dNDArray.h dRowVector.h dbleAEPBAL.h dbleCHOL.h dbleDET.h \
 	dbleHESS.h dbleLU.h dbleQR.h dbleQRP.h dbleSCHUR.h dbleSVD.h \
 	int8NDArray.h uint8NDArray.h int16NDArray.h uint16NDArray.h \
-	int32NDArray.h uint32NDArray.h int64NDArray.h uint64NDArray.h 
+	int32NDArray.h uint32NDArray.h int64NDArray.h uint64NDArray.h \
+	intNDArray.h
 
 MX_OP_INC := $(shell $(AWK) -f $(srcdir)/mk-ops.awk prefix=mx list_h_files=1 $(srcdir)/mx-ops)
 
 VX_OP_INC := $(shell $(AWK) -f $(srcdir)/mk-ops.awk prefix=vx list_h_files=1 $(srcdir)/vx-ops)
 
 OPTS_INC_DATA := DASPK-opts.in DASRT-opts.in DASSL-opts.in \
 	LSODE-opts.in NLEqn-opts.in ODESSA-opts.in Quad-opts.in
 
@@ -50,21 +51,21 @@ INCLUDES := Bounds.h CollocWt.h DAE.h DA
 	LinConst.h LP.h LPsolve.h LSODE.h NLConst.h NLEqn.h \
 	NLFunc.h NLP.h ODE.h ODEFunc.h ODES.h ODESFunc.h \
 	ODESSA.h Objective.h QP.h Quad.h Range.h base-dae.h \
 	base-de.h base-min.h byte-swap.h cmd-edit.h cmd-hist.h \
 	data-conv.h dir-ops.h file-ops.h file-stat.h getopt.h \
 	glob-match.h idx-vector.h kpse-xfns.h \
 	lo-ieee.h lo-mappers.h lo-specfun.h lo-sstream.h \
 	lo-sysdep.h lo-utils.h mach-info.h oct-alloc.h oct-cmplx.h \
-	oct-env.h oct-fftw.h oct-getopt.h oct-group.h oct-passwd.h \
-	oct-rand.h oct-rl-edit.h oct-rl-hist.h oct-shlib.h oct-sort.h \
-	oct-syscalls.h oct-time.h pathlen.h pathsearch.h \
-	prog-args.h so-array.h statdefs.h str-vec.h sun-utils.h sysdir.h \
-	systime.h syswait.h \
+	oct-env.h oct-fftw.h oct-getopt.h oct-group.h oct-inttypes.h \
+	oct-passwd.h oct-rand.h oct-rl-edit.h oct-rl-hist.h \
+	oct-shlib.h oct-sort.h oct-syscalls.h oct-time.h pathlen.h \
+	pathsearch.h prog-args.h so-array.h statdefs.h str-vec.h \
+	sun-utils.h sysdir.h systime.h syswait.h \
 	$(OPTS_INC) \
 	$(MATRIX_INC) \
 	$(MX_OP_INC) \
 	$(VX_OP_INC)
 
 TEMPLATE_SRC := Array.cc ArrayN.cc DiagArray2.cc \
 	MArray.cc MArray2.cc MArrayN.cc MDiagArray2.cc \
 	base-lu.cc oct-sort.cc
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -175,19 +175,19 @@ public:
   }
 
   ~octave_int (void) { }
   
   T value (void) const { return ival; }
 
   bool operator ! (void) const { return ! ival; }
 
-  T operator + (void) const { return ival; }
+  octave_int<T> operator + (void) const { return *this; }
 
-  T operator - (void) const
+  octave_int<T> operator - (void) const
   {
     return std::numeric_limits<T>::is_signed ? -ival : 0;
   }
 
   operator double (void) const { return static_cast<double> (value ()); }
 
   octave_int<T>& operator += (const octave_int<T>& x)
   {
@@ -200,16 +200,19 @@ public:
   octave_int<T>& operator -= (const octave_int<T>& x)
   {
     double t = static_cast<double> (value ());
     double tx = static_cast<double> (x.value ());
     ival = OCTAVE_INT_FIT_TO_RANGE (t - tx, T);
     return *this;
   }
 
+  octave_int<T> min (void) const { return std::numeric_limits<T>::min (); }
+  octave_int<T> max (void) const { return std::numeric_limits<T>::max (); }
+
 private:
 
   T ival;
 };
 
 template <class T>
 std::ostream&
 operator << (std::ostream& os, const octave_int<T>& ival)
@@ -243,31 +246,56 @@ typedef octave_int<octave_uint64_t> octa
   template <class T1, class T2> \
   octave_int<typename octave_int_binop_traits<T1, T2>::TR> \
   operator OP (const octave_int<T1>& x, const octave_int<T2>& y) \
   { \
     double tx = static_cast<double> (x.value ()); \
     double ty = static_cast<double> (y.value ()); \
     double r = tx OP ty; \
     return OCTAVE_INT_FIT_TO_RANGE2 (r, T1, T2); \
-  } \
+  }
 
 OCTAVE_INT_BIN_OP(+)
 OCTAVE_INT_BIN_OP(-)
 OCTAVE_INT_BIN_OP(*)
 OCTAVE_INT_BIN_OP(/)
 
+#define OCTAVE_INT_BITCMP_OP(OP) \
+ \
+  template <class T> \
+  octave_int<T> \
+  operator OP (const octave_int<T>& x, const octave_int<T>& y) \
+  { \
+    return x.value () OP y.value (); \
+  }
+
+OCTAVE_INT_BITCMP_OP (&)
+OCTAVE_INT_BITCMP_OP (|)
+OCTAVE_INT_BITCMP_OP (^)
+
+#define OCTAVE_INT_BITSHIFT_OP(OP) \
+ \
+  template <class T1, class T2> \
+  octave_int<T1> \
+  operator OP (const octave_int<T1>& x, const T2& y) \
+  { \
+    return x.value () OP y; \
+  }
+
+OCTAVE_INT_BITSHIFT_OP (<<)
+OCTAVE_INT_BITSHIFT_OP (>>)
+
 #define OCTAVE_INT_CMP_OP(OP) \
  \
   template <class T1, class T2> \
   bool \
   operator OP (const octave_int<T1>& x, const octave_int<T2>& y) \
   { \
     return x.value () OP y.value (); \
-  } \
+  }
 
 OCTAVE_INT_CMP_OP (<)
 OCTAVE_INT_CMP_OP (<=)
 OCTAVE_INT_CMP_OP (>=)
 OCTAVE_INT_CMP_OP (>)
 OCTAVE_INT_CMP_OP (==)
 OCTAVE_INT_CMP_OP (!=)
 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2004-06-22  Etienne Grossmann  <etienne@cs.uky.edu>
+
+	* general/ind2sub.m: Doc fix.
+
 2004-06-08  John W. Eaton  <jwe@octave.org>
 
 	* statistics/tests/kolmogorov_smirnov_test.m: Use func2str to
 	convert function handle to string for eval.
 
 2004-06-04  Paul Kienzle  <pkienzle@users.sf.net>
 
 	* plot/errorbar.m: Remove debugging output.
diff --git a/scripts/general/ind2sub.m b/scripts/general/ind2sub.m
--- a/scripts/general/ind2sub.m
+++ b/scripts/general/ind2sub.m
@@ -13,17 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{s1}, @var{s2}, @dots{}, @var{sN}] =} sub2ind (@var{dims}, @var{ind})
+## @deftypefn {Function File} {[@var{s1}, @var{s2}, @dots{}, @var{sN}] =} ind2sub (@var{dims}, @var{ind})
 ## Convert a linear index into subscripts.
 ## @end deftypefn
 ## @seealso{sub2ind}
 
 ## Author: Paul Kienzle <pkienzle@kienzle.powernet.co.uk>
 ## Adapted-by: jwe
 
 function varargout = ind2sub (dims, ind)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2004-06-17  John W. Eaton  <jwe@octave.org>
+
+	* bitfcns.cc (bitfcns): New file.
+	* Makefile.in (DIST_SRC): Add it to the list.
+
 2004-06-16  John W. Eaton  <jwe@octave.org>
 
 	* OPERATORS/op-int.h: New file.
 	* OPERATORS/op-i16-i16.cc, OPERATORS/op-i8-i8.cc,
 	OPERATORS/op-ui32-ui32.cc, OPERATORS/op-i32-i32.cc,
 	OPERATORS/op-int-conv.cc, OPERATORS/op-ui64-ui64.cc,
 	OPERATORS/op-i64-i64.cc, OPERATORS/op-ui16-ui16.cc,
 	OPERATORS/op-ui8-ui8.cc: Use new macros from op-int.h.
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -131,17 +131,17 @@ OV_SRC := ov-base.cc ov-base-mat.cc ov-b
 	$(OV_INTTYPE_SRC)
 
 PT_SRC := pt.cc pt-arg-list.cc pt-assign.cc pt-bp.cc pt-binop.cc \
 	pt-cell.cc pt-check.cc pt-cmd.cc pt-colon.cc pt-const.cc \
 	pt-decl.cc pt-except.cc pt-exp.cc pt-fcn-handle.cc pt-id.cc \
 	pt-idx.cc pt-jump.cc pt-loop.cc pt-mat.cc pt-misc.cc \
 	pt-plot.cc pt-pr-code.cc pt-select.cc pt-stmt.cc pt-unop.cc
 
-DIST_SRC := Cell.cc c-file-ptr-stream.cc comment-list.cc \
+DIST_SRC := Cell.cc bitfcns.cc c-file-ptr-stream.cc comment-list.cc \
 	cutils.c data.cc debug.cc defaults.cc defun.cc dirfns.cc \
 	dynamic-ld.cc error.cc file-io.cc fn-cache.cc gripes.cc \
 	help.cc input.cc lex.l load-save.cc ls-hdf5.cc \
 	ls-mat-ascii.cc ls-mat4.cc ls-mat5.cc ls-oct-ascii.cc \
 	ls-oct-binary.cc ls-utils.cc main.c mappers.cc matherr.c \
 	oct-fstrm.cc oct-hist.cc oct-iostrm.cc oct-map.cc \
 	oct-obj.cc oct-prcstrm.cc oct-procbuf.cc oct-stdstrm.cc \
 	oct-stream.cc oct-strstrm.cc oct-lvalue.cc pager.cc \
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -404,16 +404,80 @@ charNDArray
 octave_base_value::char_array_value (bool) const
 {
   charNDArray retval;
   gripe_wrong_type_arg ("octave_base_value::char_array_value()",
 			type_name ());
   return retval;
 }
 
+int8NDArray
+octave_base_value::int8_array_value (void) const
+{
+  int8NDArray retval;
+  gripe_wrong_type_arg ("octave_base_value::int8_array_value()",
+			type_name ());
+}
+
+int16NDArray
+octave_base_value::int16_array_value (void) const
+{
+  int16NDArray retval;
+  gripe_wrong_type_arg ("octave_base_value::int16_array_value()",
+			type_name ());
+}
+
+int32NDArray
+octave_base_value::int32_array_value (void) const
+{
+  int32NDArray retval;
+  gripe_wrong_type_arg ("octave_base_value::int32_array_value()",
+			type_name ());
+}
+
+int64NDArray
+octave_base_value::int64_array_value (void) const
+{
+  int64NDArray retval;
+  gripe_wrong_type_arg ("octave_base_value::int64_array_value()",
+			type_name ());
+}
+
+uint8NDArray
+octave_base_value::uint8_array_value (void) const
+{
+  uint8NDArray retval;
+  gripe_wrong_type_arg ("octave_base_value::uint8_array_value()",
+			type_name ());
+}
+
+uint16NDArray
+octave_base_value::uint16_array_value (void) const
+{
+  uint16NDArray retval;
+  gripe_wrong_type_arg ("octave_base_value::uint16_array_value()",
+			type_name ());
+}
+
+uint32NDArray
+octave_base_value::uint32_array_value (void) const
+{
+  uint32NDArray retval;
+  gripe_wrong_type_arg ("octave_base_value::uint32_array_value()",
+			type_name ());
+}
+
+uint64NDArray
+octave_base_value::uint64_array_value (void) const
+{
+  uint64NDArray retval;
+  gripe_wrong_type_arg ("octave_base_value::uint64_array_value()",
+			type_name ());
+}
+
 string_vector
 octave_base_value::all_strings (bool pad, bool force) const
 {
   string_vector retval;
 
   octave_value tmp = convert_to_str (pad, force);
 
   if (! error_state)
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -211,16 +211,32 @@ public:
   boolMatrix bool_matrix_value (void) const;
 
   boolNDArray bool_array_value (void) const;
 
   charMatrix char_matrix_value (bool force = false) const;
 
   charNDArray char_array_value (bool = false) const;
 
+  int8NDArray int8_array_value (void) const;
+
+  int16NDArray int16_array_value (void) const;
+
+  int32NDArray int32_array_value (void) const;
+
+  int64NDArray int64_array_value (void) const;
+
+  uint8NDArray uint8_array_value (void) const;
+
+  uint16NDArray uint16_array_value (void) const;
+
+  uint32NDArray uint32_array_value (void) const;
+
+  uint64NDArray uint64_array_value (void) const;
+
   string_vector all_strings (bool pad = false, bool force = false) const;
 
   std::string string_value (bool force = false) const;
 
   Range range_value (void) const;
 
   Octave_map map_value (void) const;
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -552,16 +552,40 @@ public:
     { return rep->bool_array_value (); }
 
   virtual charMatrix char_matrix_value (bool frc_str_conv = false) const
     { return rep->char_matrix_value (frc_str_conv); }
 
   virtual charNDArray char_array_value (bool frc_str_conv = false) const
     { return rep->char_array_value (frc_str_conv); }
 
+  virtual int8NDArray int8_array_value (void) const
+    { return rep->int8_array_value (); }
+
+  virtual int16NDArray int16_array_value (void) const
+    { return rep->int16_array_value (); }
+
+  virtual int32NDArray int32_array_value (void) const
+    { return rep->int32_array_value (); }
+
+  virtual int64NDArray int64_array_value (void) const
+    { return rep->int64_array_value (); }
+
+  virtual uint8NDArray uint8_array_value (void) const
+    { return rep->uint8_array_value (); }
+
+  virtual uint16NDArray uint16_array_value (void) const
+    { return rep->uint16_array_value (); }
+
+  virtual uint32NDArray uint32_array_value (void) const
+    { return rep->uint32_array_value (); }
+
+  virtual uint64NDArray uint64_array_value (void) const
+    { return rep->uint64_array_value (); }
+
   virtual string_vector all_strings (bool pad = false,
 				     bool force = false) const
     { return rep->all_strings (pad, force); }
 
   virtual std::string string_value (bool force = false) const
     { return rep->string_value (force); }
 
   virtual Range range_value (void) const
