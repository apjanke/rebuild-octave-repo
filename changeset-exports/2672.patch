# HG changeset patch
# User jwe
# Date 855866088 0
#      Thu Feb 13 20:34:48 1997 +0000
# Node ID e93b4c32457b9c369933cc82f24c7abcce5caa57
# Parent  69552b5a81ab48c9c834cb8272671cd62107d150
[project @ 1997-02-13 20:34:48 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,16 @@
 Thu Feb 13 03:02:08 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* data.cc (map_d_m, map_m_d, map_m_m): Rename from map.
+	(Fatan2): Use new function names.
+
+	* pt-fvc.cc (apply_mapper_fcn): Use member function map() instead
+	of friend function.
+
 	* gripes.cc (gripe_wrong_type_arg (const char*, const string&)):
 	New function.
 
 Wed Feb 12 17:27:53 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* syscalls.cc (symbols_of_syscalls): Add O_ASYNC and O_SYNC.
 
 Mon Feb 10 01:22:27 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -94,47 +94,47 @@ DEFUN (any, args, ,
   return retval;
 }
 
 // These mapping functions may also be useful in other places, eh?
 
 typedef double (*d_dd_fcn) (double, double);
 
 static Matrix
-map (d_dd_fcn f, double x, const Matrix& y)
+map_d_m (d_dd_fcn f, double x, const Matrix& y)
 {
   int nr = y.rows ();
   int nc = y.columns ();
 
   Matrix retval (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       retval (i, j) = f (x, y (i, j));
 
   return retval;
 }
 
 static Matrix
-map (d_dd_fcn f, const Matrix& x, double y)
+map_m_d (d_dd_fcn f, const Matrix& x, double y)
 {
   int nr = x.rows ();
   int nc = x.columns ();
 
   Matrix retval (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       retval (i, j) = f (x (i, j), y);
 
   return retval;
 }
 
 static Matrix
-map (d_dd_fcn f, const Matrix& x, const Matrix& y)
+map_m_m (d_dd_fcn f, const Matrix& x, const Matrix& y)
 {
   int x_nr = x.rows ();
   int x_nc = x.columns ();
 
   int y_nr = y.rows ();
   int y_nc = y.columns ();
 
   assert (x_nr == y_nr && x_nc == y_nc);
@@ -193,41 +193,41 @@ DEFUN (atan2, args, ,
 	{
 	  double y = arg_y.double_value ();
 
 	  if (! error_state)
 	    {
 	      Matrix x = arg_x.matrix_value ();
 
 	      if (! error_state)
-		retval = map (atan2, y, x);
+		retval = map_d_m (atan2, y, x);
 	    }
 	}
       else if (x_is_scalar)
 	{
 	  Matrix y = arg_y.matrix_value ();
 
 	  if (! error_state)
 	    {
 	      double x = arg_x.double_value ();
 
 	      if (! error_state)
-		retval = map (atan2, y, x);
+		retval = map_m_d (atan2, y, x);
 	    }
 	}
       else if (y_nr == x_nr && y_nc == x_nc)
 	{
 	  Matrix y = arg_y.matrix_value ();
 
 	  if (! error_state)
 	    {
 	      Matrix x = arg_x.matrix_value ();
 
 	      if (! error_state)
-		retval = map (atan2, y, x);
+		retval = map_m_m (atan2, y, x);
 	    }
 	}
       else
 	error ("atan2: nonconformant matrices");
     }
   else
     print_usage ("atan2");
 
diff --git a/src/pt-fvc.cc b/src/pt-fvc.cc
--- a/src/pt-fvc.cc
+++ b/src/pt-fvc.cc
@@ -703,23 +703,26 @@ apply_mapper_fcn (const octave_value& ar
 	      if (error_state)
 		return retval;
 
 	      if (m_fcn.flag
 		  && (any_element_less_than (m, m_fcn.lower_limit)
 		      || any_element_greater_than (m, m_fcn.upper_limit)))
 		{
 		  if (m_fcn.c_c_mapper)
-		    retval = map (m_fcn.c_c_mapper, ComplexMatrix (m));
+		    {
+		      ComplexMatrix cm (m);
+		      retval = cm.map (m_fcn.c_c_mapper);
+		    }
 		  else
 		    error ("%s: unable to handle real arguments",
 			   m_fcn.name.c_str ());
 		}
 	      else if (m_fcn.d_d_mapper)
-		retval = map (m_fcn.d_d_mapper, m);
+		retval = m.map (m_fcn.d_d_mapper);
 	      else
 		error ("%s: unable to handle real arguments",
 		       m_fcn.name.c_str ());
 	    }
 	}
       else if (arg.is_complex_type ())
 	{
 	  if (arg.is_scalar_type ())
@@ -737,19 +740,19 @@ apply_mapper_fcn (const octave_value& ar
 	  else
 	    {
 	      ComplexMatrix cm = arg.complex_matrix_value ();
 
 	      if (error_state)
 		return retval;
 
 	      if (m_fcn.d_c_mapper)
-		retval = map (m_fcn.d_c_mapper, cm);
+		retval = cm.map (m_fcn.d_c_mapper);
 	      else if (m_fcn.c_c_mapper)
-		retval = map (m_fcn.c_c_mapper, cm);
+		retval = cm.map (m_fcn.c_c_mapper);
 	      else
 		error ("%s: unable to handle complex arguments",
 		       m_fcn.name.c_str ());
 	    }
 	}
       else
 	gripe_wrong_type_arg ("mapper", arg);
     }
