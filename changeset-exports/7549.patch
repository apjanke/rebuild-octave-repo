# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1204658332 18000
#      Tue Mar 04 14:18:52 2008 -0500
# Node ID ff9c2bb7abc71200337983e7626c3ab440dbecdb
# Parent  9cbf1e2011a3db20aa66b159c7ab3d92c10a4c83
workaround to enable compiling with Intel C++ 10.1

diff --git a/liboctave/Array-C.cc b/liboctave/Array-C.cc
--- a/liboctave/Array-C.cc
+++ b/liboctave/Array-C.cc
@@ -26,17 +26,16 @@ along with Octave; see the file COPYING.
 #endif
 
 // Instantiate Arrays of Complex values.
 
 #include "oct-cmplx.h"
 
 #include "Array.h"
 #include "Array.cc"
-#include "oct-sort.cc"
 
 static double
 xabs (const Complex& x)
 {
   return (xisinf (x.real ()) || xisinf (x.imag ())) ? octave_Inf : abs (x);
 }
 
 static bool
@@ -48,16 +47,20 @@ operator < (const Complex& a, const Comp
 
 static bool
 operator > (const Complex& a, const Complex& b)
 {
   return (xisnan (a) || (xabs (a) > xabs (b))
 	  || ((xabs (a) == xabs (b)) && (arg (a) > arg (b))));
 }
 
+// This file must be included after the < and > operators are
+// defined to avoid errors with the Intel C++ compiler.
+#include "oct-sort.cc"
+
 template <>
 bool
 ascending_compare (Complex a, Complex b)
 {
   return (xisnan (b) || (xabs (a) < xabs (b))
 	  || ((xabs (a) == xabs (b)) && (arg (a) < arg (b))));
 }
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2008-03-04  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array-C.cc, Sparse-C.cc: Include oct-sort.cc after definitions
+	of < and > operators.
+
 2008-03-03  David Bateman  <dbateman@free.fr>
 
 	* Sparse.cc (assign1, assign1): Take care of repeated index
 	values. Adapt the test code to check for these cases.
 
 2008-03-03  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dMatrix.cc (Matrix::lssolve): Also avoid dgelsd lwork query bug
diff --git a/liboctave/Sparse-C.cc b/liboctave/Sparse-C.cc
--- a/liboctave/Sparse-C.cc
+++ b/liboctave/Sparse-C.cc
@@ -28,17 +28,16 @@ along with Octave; see the file COPYING.
 // Instantiate Sparse matrix of complex values.
 
 #include "oct-cmplx.h"
 #include "lo-mappers.h"
 #include "lo-ieee.h"
 #include "Sparse.h"
 #include "Sparse.cc"
 
-#include "oct-sort.cc"
 
 static double
 xabs (const Complex& x)
 {
   return (xisinf (x.real ()) || xisinf (x.imag ())) ? octave_Inf : abs (x);
 }
 
 static bool
@@ -50,16 +49,20 @@ operator < (const Complex& a, const Comp
 
 static bool
 operator > (const Complex& a, const Complex& b)
 {
   return (xisnan (a) || (xabs (a) > xabs (b))
 	  || ((xabs (a) == xabs (b)) && (arg (a) > arg (b))));
 }
 
+// This file must be included after the < and > operators are
+// defined to avoid errors with the Intel C++ compiler.
+#include "oct-sort.cc"
+
 template <>
 bool
 sparse_ascending_compare (Complex a, Complex b)
 {
   return (xisnan (b) || (xabs (a) < xabs (b))
 	  || ((xabs (a) == xabs (b)) && (arg (a) < arg (b))));
 }
 
