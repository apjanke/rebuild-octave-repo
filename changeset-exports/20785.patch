# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1449093253 18000
#      Wed Dec 02 16:54:13 2015 -0500
# Node ID b6f2909e7f94e8d60260c2e64385c662668c7e25
# Parent  52f6921dde09cf1901909f29611eaefe9c214e4d
always throw exception after debugging with debug_on_error

* quit.h (octave_execution_exception::set_stack_trace (void)):
New overloaded function.
* error.h, error.cc (maybe_enter_debugger): Rename from
debug_or_throw_exception.  Just handle debugging.  Display stack trace
from exception object instead of calling pr_where.  If stack trace is
printed, clear stack trace info from exception object.  Pass object as
non-const reference.
(usage_1, error_1): Throw execption after call to maybe_enter_debugger.
Pass exception object by non-const reference.
(verror, error): Pass exception object by non-const reference.
* gripes.h, gripes.cc (gripe_user_supplied_eval,
gripe_wrong_type_arg): Pass exception object by non-const reference.

* __qp__.cc, daspk.cc, dasrt.cc, dassl.cc, data.cc, file-io.cc,
graphics.cc, graphics.in.h, lsode.cc, oct-handle.h, oct-map.cc,
quad.cc, rand.cc, toplev.cc, __eigs__.cc, ov-base.cc, ov.cc,
oct-parse.in.yy: Catch octave_execution_exception as non-const
reference as needed.

diff --git a/libinterp/corefcn/__qp__.cc b/libinterp/corefcn/__qp__.cc
--- a/libinterp/corefcn/__qp__.cc
+++ b/libinterp/corefcn/__qp__.cc
@@ -137,17 +137,17 @@ qp (const Matrix& H, const ColumnVector&
   // Computing the ???
 
   EIG eigH;
 
   try
     {
       eigH = EIG (H);
     }
-  catch (const octave_execution_exception& e)
+  catch (octave_execution_exception& e)
     {
       error (e, "qp: failed to compute eigenvalues of H");
     }
 
   ColumnVector eigenvalH = real (eigH.eigenvalues ());
   Matrix eigenvecH = real (eigH.eigenvectors ());
   double minReal = eigenvalH.min ();
   octave_idx_type indminR = 0;
@@ -285,17 +285,17 @@ qp (const Matrix& H, const ColumnVector&
               // Searching for the most negative curvature.
 
               EIG eigrH;
 
               try
                 {
                   eigrH = EIG (rH);
                 }
-              catch (const octave_execution_exception& e)
+              catch (octave_execution_exception& e)
                 {
                   error (e, "qp: failed to compute eigenvalues of rH");
                 }
 
               ColumnVector eigenvalrH = real (eigrH.eigenvalues ());
               Matrix eigenvecrH = real (eigrH.eigenvectors ());
               double mRrH = eigenvalrH.min ();
               indminR = 0;
diff --git a/libinterp/corefcn/daspk.cc b/libinterp/corefcn/daspk.cc
--- a/libinterp/corefcn/daspk.cc
+++ b/libinterp/corefcn/daspk.cc
@@ -74,17 +74,17 @@ daspk_user_function (const ColumnVector&
   if (daspk_fcn)
     {
       octave_value_list tmp;
 
       try
         {
           tmp = daspk_fcn->do_multi_index_op (1, args);
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           gripe_user_supplied_eval (e, "daspk");
         }
 
       int tlen = tmp.length ();
       if (tlen > 0 && tmp(0).is_defined ())
         {
           if (! warned_fcn_imaginary && tmp(0).is_complex_type ())
@@ -126,17 +126,17 @@ daspk_user_jacobian (const ColumnVector&
   if (daspk_jac)
     {
       octave_value_list tmp;
 
       try
         {
           tmp = daspk_jac->do_multi_index_op (1, args);
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           gripe_user_supplied_eval (e, "daspk");
         }
 
       int tlen = tmp.length ();
       if (tlen > 0 && tmp(0).is_defined ())
         {
           if (! warned_jac_imaginary && tmp(0).is_complex_type ())
diff --git a/libinterp/corefcn/dasrt.cc b/libinterp/corefcn/dasrt.cc
--- a/libinterp/corefcn/dasrt.cc
+++ b/libinterp/corefcn/dasrt.cc
@@ -74,17 +74,17 @@ dasrt_user_f (const ColumnVector& x, con
   if (dasrt_f)
     {
       octave_value_list tmp;
 
       try
         {
           tmp = dasrt_f->do_multi_index_op (1, args);
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           gripe_user_supplied_eval (e, "dasrt");
         }
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
         {
           if (! warned_fcn_imaginary && tmp(0).is_complex_type ())
             {
@@ -117,17 +117,17 @@ dasrt_user_cf (const ColumnVector& x, do
   if (dasrt_cf)
     {
       octave_value_list tmp;
 
       try
         {
           tmp = dasrt_cf->do_multi_index_op (1, args);
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           gripe_user_supplied_eval (e, "dasrt");
         }
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
         {
           if (! warned_cf_imaginary && tmp(0).is_complex_type ())
             {
@@ -165,17 +165,17 @@ dasrt_user_j (const ColumnVector& x, con
   if (dasrt_j)
     {
       octave_value_list tmp;
 
       try
         {
           tmp = dasrt_j->do_multi_index_op (1, args);
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           gripe_user_supplied_eval (e, "dasrt");
         }
 
       int tlen = tmp.length ();
       if (tlen > 0 && tmp(0).is_defined ())
         {
           if (! warned_jac_imaginary && tmp(0).is_complex_type ())
diff --git a/libinterp/corefcn/dassl.cc b/libinterp/corefcn/dassl.cc
--- a/libinterp/corefcn/dassl.cc
+++ b/libinterp/corefcn/dassl.cc
@@ -74,17 +74,17 @@ dassl_user_function (const ColumnVector&
   if (dassl_fcn)
     {
       octave_value_list tmp;
 
       try
         {
           tmp = dassl_fcn->do_multi_index_op (1, args);
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           gripe_user_supplied_eval (e, "dassl");
         }
 
       int tlen = tmp.length ();
       if (tlen > 0 && tmp(0).is_defined ())
         {
           if (! warned_fcn_imaginary && tmp(0).is_complex_type ())
@@ -126,17 +126,17 @@ dassl_user_jacobian (const ColumnVector&
   if (dassl_jac)
     {
       octave_value_list tmp;
 
       try
         {
           tmp = dassl_jac->do_multi_index_op (1, args);
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           gripe_user_supplied_eval (e, "dassl");
         }
 
       int tlen = tmp.length ();
       if (tlen > 0 && tmp(0).is_defined ())
         {
           if (! warned_jac_imaginary && tmp(0).is_complex_type ())
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -1805,17 +1805,17 @@ attempt_type_conversion (const octave_va
   if (fcn.is_defined ())
     {
       octave_value_list result;
 
       try
         {
           result = fcn.do_multi_index_op (1, octave_value_list (1, ov));
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           error (e, "conversion from %s to %s failed", dtype.c_str (),
                  cname.c_str ());
         }
 
       if (result.length () > 0)
         retval = result(0);
       else
@@ -1832,17 +1832,17 @@ attempt_type_conversion (const octave_va
       if (fcn.is_defined ())
         {
           octave_value_list result;
 
           try
             {
               result = fcn.do_multi_index_op (1, octave_value_list (1, ov));
             }
-          catch (const octave_execution_exception& e)
+          catch (octave_execution_exception& e)
             {
               error (e, "%s constructor failed for %s argument", dtype.c_str (),
                      cname.c_str ());
             }
 
           if (result.length () > 0)
             retval = result(0);
           else
@@ -1872,17 +1872,17 @@ do_class_concat (const octave_value_list
       // Have method for dominant type.  Call it and let it handle conversions.
 
       octave_value_list tmp2;
 
       try
         {
           tmp2 = fcn.do_multi_index_op (1, ovl);
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           error (e, "%s/%s method failed", dtype.c_str (), cattype.c_str ());
         }
 
       if (tmp2.length () > 0)
         retval = tmp2(0);
       else
         error ("%s/%s method did not return a value", dtype.c_str (),
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -292,37 +292,44 @@ make_execution_exception (const char *wh
   octave_execution_exception retval;
 
   retval.set_stack_trace (buf.str ());
 
   return retval;
 }
 
 static void
-debug_or_throw_exception (const octave_execution_exception& e,
-                          bool show_stack_trace = false)
+maybe_enter_debugger (octave_execution_exception& e,
+                      bool show_stack_trace = false)
 {
   if ((interactive || forced_interactive)
       && Vdebug_on_error && octave_call_stack::caller_user_code ())
     {
       unwind_protect frame;
       frame.protect_var (Vdebug_on_error);
       Vdebug_on_error = false;
 
       tree_evaluator::debug_mode = true;
 
       tree_evaluator::current_frame = octave_call_stack::current_frame ();
 
       if (show_stack_trace)
-        pr_where (std::cerr, "error");
+        {
+          std::string stack_trace = e.info ();
+
+          if (! stack_trace.empty ())
+            {
+              std::cerr << stack_trace;
+
+              e.set_stack_trace ();
+            }
+        }
 
       do_keyboard (octave_value_list ());
     }
-  else
-    throw e;
 }
 
 // Warning messages are never buffered.
 
 static void
 vwarning (const char *name, const char *id, const char *fmt, va_list args)
 {
   if (discard_warning_messages)
@@ -384,28 +391,32 @@ message_with_id (const char *name, const
 {
   va_list args;
   va_start (args, fmt);
   vmessage_with_id (name, id, fmt, args);
   va_end (args);
 }
 
 static void
-usage_1 (const octave_execution_exception& e, const char *id,
+usage_1 (octave_execution_exception& e, const char *id,
          const char *fmt, va_list args)
 {
   verror (true, std::cerr, "usage", id, fmt, args);
 
-  debug_or_throw_exception (e);
+  maybe_enter_debugger (e);
+
+  throw e;
 }
 
 static void
 usage_1 (const char *id, const char *fmt, va_list args)
 {
-  usage_1 (make_execution_exception ("usage"), id, fmt, args);
+  octave_execution_exception e = make_execution_exception ("usage");
+
+  usage_1 (e, id, fmt, args);
 }
 
 void
 vusage (const char *fmt, va_list args)
 {
   usage_1 ("", fmt, args);
 }
 
@@ -429,17 +440,17 @@ usage_with_id (const char *id, const cha
 {
   va_list args;
   va_start (args, fmt);
   vusage_with_id (id, fmt, args);
   va_end (args);
 }
 
 static void
-error_1 (const octave_execution_exception& e, std::ostream& os,
+error_1 (octave_execution_exception& e, std::ostream& os,
          const char *name, const char *id, const char *fmt,
          va_list args, bool with_cfn = false)
 {
   bool show_stack_trace = false;
 
   if (fmt)
     {
       if (*fmt)
@@ -468,25 +479,28 @@ error_1 (const octave_execution_exceptio
                     show_stack_trace = true;
                 }
             }
         }
     }
   else
     panic ("error_1: invalid format");
 
-  debug_or_throw_exception (e, show_stack_trace);
+  maybe_enter_debugger (e, show_stack_trace);
+
+  throw e;
 }
 
 static void
 error_1 (std::ostream& os, const char *name, const char *id,
          const char *fmt, va_list args, bool with_cfn = false)
 {
-  error_1 (make_execution_exception ("error"), os, name, id, fmt,
-           args, with_cfn);
+  octave_execution_exception e = make_execution_exception ("error");
+
+  error_1 (e, os, name, id, fmt, args, with_cfn);
 }
 
 void
 verror (const char *fmt, va_list args)
 {
   error_1 (std::cerr, "error", "", fmt, args);
 }
 
@@ -495,23 +509,23 @@ error (const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   verror (fmt, args);
   va_end (args);
 }
 
 void
-verror (const octave_execution_exception& e, const char *fmt, va_list args)
+verror (octave_execution_exception& e, const char *fmt, va_list args)
 {
   error_1 (e, std::cerr, "error", "", fmt, args);
 }
 
 void
-error (const octave_execution_exception& e, const char *fmt, ...)
+error (octave_execution_exception& e, const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   verror (e, fmt, args);
   va_end (args);
 }
 
 void
diff --git a/libinterp/corefcn/error.h b/libinterp/corefcn/error.h
--- a/libinterp/corefcn/error.h
+++ b/libinterp/corefcn/error.h
@@ -47,19 +47,19 @@ extern OCTINTERP_API void vusage (const 
 extern OCTINTERP_API void usage (const char *fmt, ...);
 
 extern OCTINTERP_API void vwarning (const char *fmt, va_list args);
 extern OCTINTERP_API void warning (const char *fmt, ...);
 
 extern OCTINTERP_API void verror (const char *fmt, va_list args);
 extern OCTINTERP_API void error (const char *fmt, ...);
 
-extern OCTINTERP_API void verror (const octave_execution_exception&,
+extern OCTINTERP_API void verror (octave_execution_exception&,
                                   const char *fmt, va_list args);
-extern OCTINTERP_API void error (const octave_execution_exception&,
+extern OCTINTERP_API void error (octave_execution_exception&,
                                  const char *fmt, ...);
 
 extern OCTINTERP_API void verror_with_cfn (const char *fmt, va_list args);
 extern OCTINTERP_API void error_with_cfn (const char *fmt, ...);
 
 extern OCTINTERP_API void vparse_error (const char *fmt, va_list args);
 extern OCTINTERP_API void parse_error (const char *fmt, ...);
 
diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -1324,28 +1324,28 @@ do_fread (octave_stream& os, const octav
   oct_data_conv::data_type input_type;
   oct_data_conv::data_type output_type;
 
   try
     {
       oct_data_conv::string_to_data_type (prec, block_size,
                                           input_type, output_type);
     }
-  catch (const octave_execution_exception& e)
+  catch (octave_execution_exception& e)
     {
       error (e, "fread: invalid PRECISION specified");
     }
 
   int skip = 0;
 
   try
     {
       skip = skip_arg.int_value (true);
     }
-  catch (const octave_execution_exception& e)
+  catch (octave_execution_exception& e)
     {
       error (e, "fread: SKIP must be an integer");
     }
 
   std::string arch = arch_arg.xstring_value ("fread: ARCH architecture type must be a string");
 
   oct_mach_info::float_format flt_fmt
     = oct_mach_info::string_to_float_format (arch);
@@ -1582,28 +1582,28 @@ do_fwrite (octave_stream& os, const octa
 
   int block_size = 1;
   oct_data_conv::data_type output_type;
 
   try
     {
       oct_data_conv::string_to_data_type (prec, block_size, output_type);
     }
-  catch (const octave_execution_exception& e)
+  catch (octave_execution_exception& e)
     {
       error (e, "fwrite: invalid PRECISION specified");
     }
 
   int skip = 0;
 
   try
     {
       skip = skip_arg.int_value (true);
     }
-  catch (const octave_execution_exception& e)
+  catch (octave_execution_exception& e)
     {
       error (e, "fwrite: SKIP must be an integer");
     }
 
   std::string arch = arch_arg.xstring_value ("fwrite: ARCH architecture type must be a string");
 
   oct_mach_info::float_format flt_fmt
     = oct_mach_info::string_to_float_format (arch);
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -1299,17 +1299,17 @@ color_property::do_set (const octave_val
 
                   if (current_type != color_t || col != color_val)
                     {
                       color_val = col;
                       current_type = color_t;
                       return true;
                     }
                 }
-              catch (const octave_execution_exception& e)
+              catch (octave_execution_exception& e)
                 {
                   error (e, "invalid value for color property \"%s\" (value = %s)",
                          get_name ().c_str (), s.c_str ());
                 }
             }
         }
       else
         error ("invalid value for color property \"%s\"",
@@ -2898,17 +2898,17 @@ base_properties::set_from_list (base_gra
            q++)
         {
           std::string pname = q->first;
 
           try
             {
               bgo.set (pname, q->second);
             }
-          catch (const octave_execution_exception& e)
+          catch (octave_execution_exception& e)
             {
               error (e, "error setting default property %s", pname.c_str ());
             }
         }
     }
 }
 
 /*
@@ -10229,17 +10229,17 @@ make_graphics_object (const std::string&
       graphics_handle h;
 
       try
         {
           h = gh_manager::make_graphics_handle (go_name, parent,
                                                 integer_figure_handle,
                                                 false, false);
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           error (e, "__go%s__: unable to create graphics handle",
                  go_name.c_str ());
         }
 
       adopt (parent, h);
 
       xset (h, xargs);
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -801,17 +801,17 @@ protected:
     else
       {
         NDArray nda;
 
         try
           {
             nda = val.array_value ();
           }
-        catch (const octave_execution_exception& e)
+        catch (octave_execution_exception& e)
           {
             error (e, "set: invalid string property value for \"%s\"",
                    get_name ().c_str ());
           }
 
         octave_idx_type nel = nda.numel ();
 
         value.resize (nel);
@@ -1695,17 +1695,17 @@ protected:
   bool do_set (const octave_value& val)
   {
     Matrix new_kids;
 
     try
       {
         new_kids = val.matrix_value ();
       }
-    catch (const octave_execution_exception& e)
+    catch (octave_execution_exception& e)
       {
         error (e, "set: children must be an array of graphics handles");
       }
 
     octave_idx_type nel = new_kids.numel ();
 
     const Matrix new_kids_column = new_kids.reshape (dim_vector (nel, 1));
 
diff --git a/libinterp/corefcn/gripes.cc b/libinterp/corefcn/gripes.cc
--- a/libinterp/corefcn/gripes.cc
+++ b/libinterp/corefcn/gripes.cc
@@ -87,17 +87,17 @@ void
 gripe_user_supplied_eval (const char *name)
 {
   octave_execution_exception e;
 
   gripe_user_supplied_eval (e, name);
 }
 
 void
-gripe_user_supplied_eval (const octave_execution_exception& e,
+gripe_user_supplied_eval (octave_execution_exception& e,
                           const char *name)
 {
   error (e, "%s: evaluation of user-supplied function failed", name);
 }
 
 void
 gripe_user_returned_invalid (const char *name)
 {
@@ -144,17 +144,17 @@ void
 gripe_wrong_type_arg (const char *name, const char *s, bool is_error)
 {
   octave_execution_exception e;
 
   gripe_wrong_type_arg (e, name, s, is_error);
 }
 
 void
-gripe_wrong_type_arg (const octave_execution_exception& e,
+gripe_wrong_type_arg (octave_execution_exception& e,
                       const char *name, const char *s, bool is_error)
 {
   if (is_error)
     error (e, "%s: wrong type argument '%s'", name, s);
   else
     warning ("%s: wrong type argument '%s'", name, s);
 }
 
@@ -162,33 +162,33 @@ void
 gripe_wrong_type_arg (const char *name, const std::string& s, bool is_error)
 {
   octave_execution_exception e;
 
   gripe_wrong_type_arg (e, name, s.c_str (), is_error);
 }
 
 void
-gripe_wrong_type_arg (const octave_execution_exception& e,
+gripe_wrong_type_arg (octave_execution_exception& e,
                       const char *name, const std::string& s, bool is_error)
 {
   gripe_wrong_type_arg (e, name, s.c_str (), is_error);
 }
 
 void
 gripe_wrong_type_arg (const char *name, const octave_value& tc,
                       bool is_error)
 {
   octave_execution_exception e;
 
   gripe_wrong_type_arg (e, name, tc, is_error);
 }
 
 void
-gripe_wrong_type_arg (const octave_execution_exception& e,
+gripe_wrong_type_arg (octave_execution_exception& e,
                       const char *name, const octave_value& tc,
                       bool is_error)
 {
   std::string type = tc.type_name ();
 
   gripe_wrong_type_arg (e, name, type, is_error);
 }
 
@@ -197,33 +197,33 @@ gripe_wrong_type_arg (const std::string&
                       bool is_error)
 {
   octave_execution_exception e;
 
   gripe_wrong_type_arg (e, name, tc, is_error);
 }
 
 void
-gripe_wrong_type_arg (const octave_execution_exception& e,
+gripe_wrong_type_arg (octave_execution_exception& e,
                       const std::string& name, const octave_value& tc,
                       bool is_error)
 {
   gripe_wrong_type_arg (e, name.c_str (), tc, is_error);
 }
 
 void
 gripe_wrong_type_arg (const char *s, bool is_error)
 {
   octave_execution_exception e;
 
   gripe_wrong_type_arg (e, s, is_error);
 }
 
 void
-gripe_wrong_type_arg (const octave_execution_exception& e,
+gripe_wrong_type_arg (octave_execution_exception& e,
                       const char *s, bool is_error)
 {
   if (is_error)
     error (e, "wrong type argument '%s'", s);
   else
     warning ("wrong type argument '%s'", s);
 }
 
@@ -231,32 +231,32 @@ void
 gripe_wrong_type_arg (const std::string& s, bool is_error)
 {
   octave_execution_exception e;
 
   gripe_wrong_type_arg (e, s, is_error);
 }
 
 void
-gripe_wrong_type_arg (const octave_execution_exception& e,
+gripe_wrong_type_arg (octave_execution_exception& e,
                       const std::string& s, bool is_error)
 {
   gripe_wrong_type_arg (e, s.c_str (), is_error);
 }
 
 void
 gripe_wrong_type_arg (const octave_value& tc, bool is_error)
 {
   octave_execution_exception e;
 
   gripe_wrong_type_arg (e, tc, is_error);
 }
 
 void
-gripe_wrong_type_arg (const octave_execution_exception& e,
+gripe_wrong_type_arg (octave_execution_exception& e,
                       const octave_value& tc, bool is_error)
 {
   std::string type = tc.type_name ();
 
   gripe_wrong_type_arg (e, type, is_error);
 }
 
 void
diff --git a/libinterp/corefcn/gripes.h b/libinterp/corefcn/gripes.h
--- a/libinterp/corefcn/gripes.h
+++ b/libinterp/corefcn/gripes.h
@@ -54,17 +54,17 @@ gripe_empty_arg (const char *name, bool 
 
 extern OCTINTERP_API void
 gripe_square_matrix_required (const char *name);
 
 extern OCTINTERP_API void
 gripe_user_supplied_eval (const char *name);
 
 extern OCTINTERP_API void
-gripe_user_supplied_eval (const octave_execution_exception& e,
+gripe_user_supplied_eval (octave_execution_exception& e,
                           const char *name);
 
 extern OCTINTERP_API void
 gripe_user_returned_invalid (const char *name);
 
 extern OCTINTERP_API void
 gripe_invalid_conversion (const std::string& from, const std::string& to);
 
@@ -83,66 +83,66 @@ gripe_unrecognized_data_fmt (const char 
 extern OCTINTERP_API void
 gripe_data_conversion (const char *from, const char *to);
 
 extern OCTINTERP_API void
 gripe_wrong_type_arg (const char *name, const char *s,
                       bool is_error = true);
 
 extern OCTINTERP_API void
-gripe_wrong_type_arg (const octave_execution_exception& e,
+gripe_wrong_type_arg (octave_execution_exception& e,
                       const char *name, const char *s,
                       bool is_error = true);
 
 extern OCTINTERP_API void
 gripe_wrong_type_arg (const char *name, const std::string& s,
                       bool is_error = true);
 
 extern OCTINTERP_API void
-gripe_wrong_type_arg (const octave_execution_exception& e,
+gripe_wrong_type_arg (octave_execution_exception& e,
                       const char *name, const std::string& s,
                       bool is_error = true);
 
 extern OCTINTERP_API void
 gripe_wrong_type_arg (const char *name, const octave_value& tc,
                       bool is_error = true);
 
 extern OCTINTERP_API void
-gripe_wrong_type_arg (const octave_execution_exception& e,
+gripe_wrong_type_arg (octave_execution_exception& e,
                       const char *name, const octave_value& tc,
                       bool is_error = true);
 
 extern OCTINTERP_API void
 gripe_wrong_type_arg (const std::string& name, const octave_value& tc,
                       bool is_error = true);
 
 extern OCTINTERP_API void
-gripe_wrong_type_arg (const octave_execution_exception& e,
+gripe_wrong_type_arg (octave_execution_exception& e,
                       const std::string& name, const octave_value& tc,
                       bool is_error = true);
 
 extern OCTINTERP_API void
 gripe_wrong_type_arg (const char *s, bool is_error = true);
 
 extern OCTINTERP_API void
-gripe_wrong_type_arg (const octave_execution_exception& e,
+gripe_wrong_type_arg (octave_execution_exception& e,
                       const char *s, bool is_error = true);
 
 extern OCTINTERP_API void
 gripe_wrong_type_arg (const std::string& s, bool is_error = true);
 
 extern OCTINTERP_API void
-gripe_wrong_type_arg (const octave_execution_exception& e,
+gripe_wrong_type_arg (octave_execution_exception& e,
                       const std::string& s, bool is_error = true);
 
 extern OCTINTERP_API void
 gripe_wrong_type_arg (const octave_value& tc, bool is_error = true);
 
 extern OCTINTERP_API void
-gripe_wrong_type_arg (const octave_execution_exception& e,
+gripe_wrong_type_arg (octave_execution_exception& e,
                       const octave_value& tc, bool is_error = true);
 
 extern OCTINTERP_API void
 gripe_wrong_type_arg_for_unary_op (const octave_value& op);
 
 extern OCTINTERP_API void
 gripe_wrong_type_arg_for_binary_op (const octave_value& op);
 
diff --git a/libinterp/corefcn/lsode.cc b/libinterp/corefcn/lsode.cc
--- a/libinterp/corefcn/lsode.cc
+++ b/libinterp/corefcn/lsode.cc
@@ -71,17 +71,17 @@ lsode_user_function (const ColumnVector&
   if (lsode_fcn)
     {
       octave_value_list tmp;
 
       try
         {
           tmp = lsode_fcn->do_multi_index_op (1, args);
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           gripe_user_supplied_eval (e, "lsode");
         }
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
         {
           if (! warned_fcn_imaginary && tmp(0).is_complex_type ())
             {
@@ -113,17 +113,17 @@ lsode_user_jacobian (const ColumnVector&
   if (lsode_jac)
     {
       octave_value_list tmp;
 
       try
         {
           tmp = lsode_jac->do_multi_index_op (1, args);
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           gripe_user_supplied_eval (e, "lsode");
         }
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
         {
           if (! warned_jac_imaginary && tmp(0).is_complex_type ())
             {
diff --git a/libinterp/corefcn/oct-handle.h b/libinterp/corefcn/oct-handle.h
--- a/libinterp/corefcn/oct-handle.h
+++ b/libinterp/corefcn/oct-handle.h
@@ -41,17 +41,17 @@ public:
     if (a.is_empty ())
       /* do nothing */;
     else
       {
         try
           {
             val = a.double_value ();
           }
-        catch (const octave_execution_exception& e)
+        catch (octave_execution_exception& e)
           {
             error (e, "invalid handle");
           }
       }
   }
 
   octave_handle (int a) : val (a) { }
 
diff --git a/libinterp/corefcn/oct-map.cc b/libinterp/corefcn/oct-map.cc
--- a/libinterp/corefcn/oct-map.cc
+++ b/libinterp/corefcn/oct-map.cc
@@ -645,17 +645,17 @@ permute_to_correct_order (octave_idx_typ
         {
           if (i == idx)
             continue;
 
           permute_to_correct_order1 (map_list[idx], map_list[i],
                                      new_map_list[i], perm);
         }
     }
-  catch (const octave_execution_exception& e)
+  catch (octave_execution_exception& e)
     {
       error (e, "cat: field names mismatch in concatenating structs");
     }
 }
 
 
 octave_map
 octave_map::cat (int dim, octave_idx_type n, const octave_scalar_map *map_list)
@@ -996,17 +996,17 @@ octave_map::assign (const idx_vector& i,
     {
       Array<octave_idx_type> perm;
       octave_map rhs1;
 
       try
         {
           rhs1 = rhs.orderfields (*this, perm);
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           error (e, "incompatible fields in struct assignment");
         }
 
       assert (rhs1.xkeys.is_same (xkeys));
       assign (i, rhs1);
     }
 }
@@ -1044,17 +1044,17 @@ octave_map::assign (const idx_vector& i,
     {
       Array<octave_idx_type> perm;
       octave_map rhs1;
 
       try
         {
           rhs1 = rhs.orderfields (*this, perm);
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           error (e, "incompatible fields in struct assignment");
         }
 
       assert (rhs1.xkeys.is_same (xkeys));
       assign (i, j, rhs1);
     }
 }
@@ -1092,17 +1092,17 @@ octave_map::assign (const Array<idx_vect
     {
       Array<octave_idx_type> perm;
       octave_map rhs1;
 
       try
         {
           rhs1 = rhs.orderfields (*this, perm);
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           error (e, "incompatible fields in struct assignment");
         }
 
       assert (rhs1.xkeys.is_same (xkeys));
       assign (ia, rhs1);
     }
 }
diff --git a/libinterp/corefcn/quad.cc b/libinterp/corefcn/quad.cc
--- a/libinterp/corefcn/quad.cc
+++ b/libinterp/corefcn/quad.cc
@@ -68,17 +68,17 @@ quad_user_function (double x)
   if (quad_fcn)
     {
       octave_value_list tmp;
 
       try
         {
           tmp = quad_fcn->do_multi_index_op (1, args);
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           gripe_user_supplied_eval (e, "quad");
         }
 
       if (tmp.length () && tmp(0).is_defined ())
         {
           if (! warned_imaginary && tmp(0).is_complex_type ())
             {
@@ -106,17 +106,17 @@ quad_float_user_function (float x)
   if (quad_fcn)
     {
       octave_value_list tmp;
 
       try
         {
           tmp = quad_fcn->do_multi_index_op (1, args);
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           gripe_user_supplied_eval (e, "quad");
         }
 
       if (tmp.length () && tmp(0).is_defined ())
         {
           if (! warned_imaginary && tmp(0).is_complex_type ())
             {
diff --git a/libinterp/corefcn/rand.cc b/libinterp/corefcn/rand.cc
--- a/libinterp/corefcn/rand.cc
+++ b/libinterp/corefcn/rand.cc
@@ -209,17 +209,17 @@ do_rand (const octave_value_list& args, 
         else if (tmp.is_matrix_type ())
           {
             Array<int> iv;
 
             try
               {
                 iv = tmp.int_vector_value (true);
               }
-            catch (const octave_execution_exception& e)
+            catch (octave_execution_exception& e)
               {
                 error (e, "%s: dimensions must be a scalar or array of integers", fcn);
               }
 
             octave_idx_type len = iv.numel ();
 
             dims.resize (len);
 
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -1051,17 +1051,17 @@ command shell that is started to run the
         }
 
       if (nargin > 1)
         {
           try
             {
               return_output = args(1).is_true ();
             }
-          catch (const octave_execution_exception& e)
+          catch (octave_execution_exception& e)
             {
               error (e, "system: RETURN_OUTPUT must be boolean value true or false");
             }
         }
 
       if (return_output && type == et_async)
         {
           error ("system: can't return output from commands run asynchronously");
diff --git a/libinterp/dldfcn/__eigs__.cc b/libinterp/dldfcn/__eigs__.cc
--- a/libinterp/dldfcn/__eigs__.cc
+++ b/libinterp/dldfcn/__eigs__.cc
@@ -57,17 +57,17 @@ eigs_func (const ColumnVector &x, int &e
   if (eigs_fcn)
     {
       octave_value_list tmp;
 
       try
         {
           tmp = eigs_fcn->do_multi_index_op (1, args);
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           gripe_user_supplied_eval (e, "eigs");
         }
 
       if (tmp.length () && tmp(0).is_defined ())
         {
           if (! warned_imaginary && tmp(0).is_complex_type ())
             {
@@ -97,17 +97,17 @@ eigs_complex_func (const ComplexColumnVe
   if (eigs_fcn)
     {
       octave_value_list tmp;
 
       try
         {
           tmp = eigs_fcn->do_multi_index_op (1, args);
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           gripe_user_supplied_eval (e, "eigs");
         }
 
       if (tmp.length () && tmp(0).is_defined ())
         {
           retval = tmp(0).complex_vector_value ("eigs: evaluation of user-supplied function failed");
         }
diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -459,17 +459,17 @@ octave_base_value::print_info (std::ostr
     T retval = 0; \
  \
     double d = 0.0; \
  \
     try \
       { \
         d = double_value (frc_str_conv); \
       } \
-    catch (const octave_execution_exception& e) \
+    catch (octave_execution_exception& e) \
       { \
         gripe_wrong_type_arg (e, "octave_base_value::" #F "_value ()", type_name ()); \
       } \
  \
     if (require_int && D_NINT (d) != d) \
       error_with_cfn ("conversion of %g to " #T " value failed", d); \
     else if (d < std::numeric_limits<T>::min ()) \
       retval = std::numeric_limits<T>::min (); \
@@ -497,17 +497,17 @@ int
 octave_base_value::nint_value (bool frc_str_conv) const
 {
   double d = 0.0;
 
   try
     {
       d = double_value (frc_str_conv);
     }
-  catch (const octave_execution_exception& e)
+  catch (octave_execution_exception& e)
     {
       gripe_wrong_type_arg (e, "octave_base_value::nint_value ()", type_name ());
     }
 
   if (xisnan (d))
     error ("conversion of NaN to integer value failed");
 
   return static_cast<int> (::fix (d));
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -1868,17 +1868,17 @@ octave_value::float_complex_vector_value
   octave_value::NAME (const char *fmt, ...) const \
   { \
     TYPE retval; \
  \
     try \
       { \
         retval = FCN (); \
       } \
-    catch (const octave_execution_exception& e) \
+    catch (octave_execution_exception& e) \
       { \
         if (fmt) \
           { \
             va_list args; \
             va_start (args, fmt); \
             verror (e, fmt, args); \
             va_end (args); \
           } \
@@ -2469,37 +2469,37 @@ do_colon_op (const octave_value& base, c
       bool dq_str = (base.is_dq_string () || limit.is_dq_string ());
 
       Matrix m_base, m_limit, m_increment;
 
       try
         {
           m_base = base.matrix_value (true);
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           error (e, "invalid base value in colon expression");
         }
 
       try
         {
           m_limit = limit.matrix_value (true);
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           error (e, "invalid limit value in colon expression");
         }
 
       try
         {
           m_increment = (increment.is_defined ()
                          ? increment.matrix_value (true)
                          : Matrix (1, 1, 1.0));
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           error (e, "invalid increment value in colon expression");
         }
 
       bool base_empty = m_base.is_empty ();
       bool limit_empty = m_limit.is_empty ();
       bool increment_empty = m_increment.is_empty ();
 
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4503,17 +4503,17 @@ source_file (const std::string& file_nam
 
   octave_function *fcn = 0;
 
   try
     {
       fcn = parse_fcn_file (file_full_name, file_name, "", "",
                             require_file, true, false, false, warn_for);
     }
-  catch (const octave_execution_exception& e)
+  catch (octave_execution_exception& e)
     {
       error (e, "source: error sourcing file '%s'", file_full_name.c_str ());
     }
 
   if (fcn && fcn->is_user_script ())
     {
       octave_value_list args;
 
@@ -4643,17 +4643,17 @@ feval (const std::string& name, const oc
   if (fcn.is_defined ())
     retval = fcn.do_multi_index_op (nargout, args);
   else
     {
       try
         {
           maybe_missing_function_hook (name);
         }
-      catch (const octave_execution_exception& e)
+      catch (octave_execution_exception& e)
         {
           error (e, "feval: function '%s' not found", name.c_str ());
         }
     }
 
   return retval;
 }
 
diff --git a/liboctave/cruft/misc/quit.h b/liboctave/cruft/misc/quit.h
--- a/liboctave/cruft/misc/quit.h
+++ b/liboctave/cruft/misc/quit.h
@@ -93,22 +93,28 @@ public:
 
   ~octave_execution_exception (void) { }
 
   virtual void set_stack_trace (const std::string& st)
   {
     m_stack_trace = st;
   }
 
+  virtual void set_stack_trace (void)
+  {
+    m_stack_trace = "";
+  }
+
   virtual std::string info (void) const
   {
     return m_stack_trace;
   }
 
 private:
+
   std::string m_stack_trace;
 };
 
 class
 octave_interrupt_exception
 {
 };
 #endif
