# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1471124369 14400
#      Sat Aug 13 17:39:29 2016 -0400
# Node ID 0f9ab4f1f4b301fce8c97890e94d17e6f2bdebc5
# Parent  26109cce022e586f57331f39f58900fe8cec3eeb
new function __dump_typeinfo__

* ov-typeinfo.h, ov-typeinfo.cc (F__dump_typeinfo__): New function.
(octave_value_typeinfo::do_installed_type_names): Now const.
(as_bool_nd_array, as_nd_array): New static functions.
(octave_value_typeinfo::unary_ops_map,
octave_value_typeinfo::non_const_unary_ops_map,
octave_value_typeinfo::binary_ops_map,
octave_value_typeinfo::compound_binary_ops_map,
octave_value_typeinfo::assign_ops_map,
octave_value_typeinfo::assignany_ops_map,
octave_value_typeinfo::do_installed_type_info,
octave_value_typeinfo::installed_type_info): New member functions.

diff --git a/libinterp/octave-value/ov-typeinfo.cc b/libinterp/octave-value/ov-typeinfo.cc
--- a/libinterp/octave-value/ov-typeinfo.cc
+++ b/libinterp/octave-value/ov-typeinfo.cc
@@ -590,17 +590,17 @@ octave_value_typeinfo::do_lookup_type_co
 octave_base_value::type_conv_fcn
 octave_value_typeinfo::do_lookup_widening_op (int t, int t_result)
 {
   void *f = widening_ops.checkelem (t, t_result);
   return reinterpret_cast<octave_base_value::type_conv_fcn> (f);
 }
 
 string_vector
-octave_value_typeinfo::do_installed_type_names (void)
+octave_value_typeinfo::do_installed_type_names (void) const
 {
   string_vector retval (num_types);
 
   for (int i = 0; i < num_types; i++)
     retval(i) = types(i);
 
   return retval;
 }
@@ -718,8 +718,209 @@ currently installed data types.
 
 %!testif HAVE_JAVA
 %! x = javaObject ("java.lang.StringBuffer");
 %! assert (typeinfo (x), "octave_java");
 
 ## Test input validation
 %!error typeinfo ("foo", 1)
 */
+
+static boolNDArray
+as_bool_nd_array (const Array<void *>& x)
+{
+  boolNDArray retval (x.dims ());
+
+  for (octave_idx_type i = 0; i < x.numel (); i++)
+    retval.xelem (i) = x(i);
+
+  return retval;
+}
+
+octave_scalar_map
+octave_value_typeinfo::unary_ops_map (void) const
+{
+  octave_scalar_map retval;
+
+  int len = std::min (non_const_unary_ops.columns (), num_types);
+
+  dim_vector tab_dims (1, len);
+
+  for (int j = 0; j < octave_value::num_unary_ops; j++)
+    {
+      boolNDArray tab (tab_dims);
+
+      for (int i = 0; i < len; i++)
+        tab.xelem (i) = (unary_ops(j,i) != 0);
+
+      octave_value::unary_op op_id = static_cast<octave_value::unary_op> (j);
+
+      retval.setfield (octave_value::unary_op_as_string (op_id), tab);
+    }
+
+  return retval;
+}
+
+octave_scalar_map
+octave_value_typeinfo::non_const_unary_ops_map (void) const
+{
+  octave_scalar_map retval;
+
+  int len = std::min (non_const_unary_ops.columns (), num_types);
+
+  dim_vector tab_dims (1, len);
+
+  for (int j = 0; j < octave_value::num_unary_ops; j++)
+    {
+      boolNDArray tab (tab_dims);
+
+      for (int i = 0; i < len; i++)
+        tab.xelem (i) = (non_const_unary_ops(j,i) != 0);
+
+      octave_value::unary_op op_id = static_cast<octave_value::unary_op> (j);
+
+      retval.setfield (octave_value::unary_op_as_string (op_id), tab);
+    }
+
+  return retval;
+}
+
+octave_scalar_map
+octave_value_typeinfo::binary_ops_map (void) const
+{
+  octave_scalar_map retval;
+
+  int len = std::min (binary_ops.columns (), num_types);
+
+  dim_vector tab_dims (len, len);
+
+  for (int k = 0; k < octave_value::num_binary_ops; k++)
+    {
+      boolNDArray tab (tab_dims);
+
+      for (int j = 0; j < len; j++)
+        for (int i = 0; i < len; i++)
+          tab.xelem (j,i) = (binary_ops(k,j,i) != 0);
+
+      octave_value::binary_op op_id = static_cast<octave_value::binary_op> (k);
+
+      retval.setfield (octave_value::binary_op_as_string (op_id), tab);
+    }
+
+  return retval;
+}
+
+octave_scalar_map
+octave_value_typeinfo::compound_binary_ops_map (void) const
+{
+  octave_scalar_map retval;
+
+  int len = std::min (compound_binary_ops.columns (), num_types);
+
+  dim_vector tab_dims (len, len);
+
+  for (int k = 0; k < octave_value::num_compound_binary_ops; k++)
+    {
+      boolNDArray tab (tab_dims);
+
+      for (int j = 0; j < len; j++)
+        for (int i = 0; i < len; i++)
+          tab.xelem (j,i) = (compound_binary_ops(k,j,i) != 0);
+
+      octave_value::compound_binary_op op_id = static_cast<octave_value::compound_binary_op> (k);
+
+      retval.setfield (octave_value::binary_op_fcn_name (op_id), tab);
+    }
+
+  return retval;
+}
+
+octave_scalar_map
+octave_value_typeinfo::assign_ops_map (void) const
+{
+  octave_scalar_map retval;
+
+  int len = std::min (assign_ops.columns (), num_types);
+
+  dim_vector tab_dims (len, len);
+
+  for (int k = 0; k < octave_value::num_assign_ops; k++)
+    {
+      boolNDArray tab (tab_dims);
+
+      for (int j = 0; j < len; j++)
+        for (int i = 0; i < len; i++)
+          tab.xelem (j,i) = (assign_ops(k,j,i) != 0);
+
+      octave_value::assign_op op_id = static_cast<octave_value::assign_op> (k);
+
+      retval.setfield (octave_value::assign_op_as_string (op_id), tab);
+    }
+
+  return retval;
+}
+
+octave_scalar_map
+octave_value_typeinfo::assignany_ops_map (void) const
+{
+  octave_scalar_map retval;
+
+  int len = std::min (assignany_ops.columns (), num_types);
+
+  dim_vector tab_dims (1, len);
+
+  for (int j = 0; j < octave_value::num_assign_ops; j++)
+    {
+      boolNDArray tab (tab_dims);
+
+      for (int i = 0; i < len; i++)
+        tab.xelem (i) = (assignany_ops(j,i) != 0);
+
+      octave_value::assign_op op_id = static_cast<octave_value::assign_op> (j);
+
+      retval.setfield (octave_value::assign_op_as_string (op_id), tab);
+    }
+
+  return retval;
+}
+
+static NDArray
+as_nd_array (const Array<int>& x)
+{
+  NDArray retval (x.dims ());
+
+  for (int i = 0; i < x.numel (); i++)
+    retval.xelem(i) = x(i);
+
+  return retval;
+}
+
+octave_scalar_map
+octave_value_typeinfo::do_installed_type_info (void) const
+{
+  octave_scalar_map retval;
+
+  retval.setfield ("types", octave_value (Cell (do_installed_type_names ())));
+  retval.setfield ("unary_ops", unary_ops_map ());
+  retval.setfield ("non_const_unary_ops", non_const_unary_ops_map ());
+  retval.setfield ("binary_ops", binary_ops_map ());
+  retval.setfield ("compound_unary_ops", compound_binary_ops_map ());
+  retval.setfield ("cat_ops", as_bool_nd_array (cat_ops));
+  retval.setfield ("assign_ops", assign_ops_map ());
+  retval.setfield ("assignany_ops", assignany_ops_map ());
+  retval.setfield ("pref_assign_conv", as_nd_array (pref_assign_conv));
+  retval.setfield ("type_conv_ops", as_bool_nd_array (type_conv_ops));
+  retval.setfield ("widening_ops", as_bool_nd_array (widening_ops));
+
+  return retval;
+}
+
+DEFUN (__dump_typeinfo__, args, ,
+       doc: /* -*- texinfo -*-
+@deftypefn {} {} __dump_typeinfo__ ()
+Undocumented internal function.
+@end deftypefn */)
+{
+  if (args.length () > 0)
+    print_usage ();
+
+  return ovl (octave_value_typeinfo::installed_type_info ());
+}
diff --git a/libinterp/octave-value/ov-typeinfo.h b/libinterp/octave-value/ov-typeinfo.h
--- a/libinterp/octave-value/ov-typeinfo.h
+++ b/libinterp/octave-value/ov-typeinfo.h
@@ -24,16 +24,17 @@ along with Octave; see the file COPYING.
 #define octave_ov_typeinfo_h 1
 
 #include "octave-config.h"
 
 #include <string>
 
 #include "Array.h"
 
+#include "oct-map.h"
 #include "ov.h"
 
 class string_vector;
 
 class
 OCTINTERP_API
 octave_value_typeinfo
 {
@@ -186,16 +187,21 @@ public:
     return instance->do_lookup_widening_op (t, t_result);
   }
 
   static string_vector installed_type_names (void)
   {
     return instance->do_installed_type_names ();
   }
 
+  static octave_scalar_map installed_type_info (void)
+  {
+    return instance->do_installed_type_info ();
+  }
+
 protected:
 
   octave_value_typeinfo (void)
     : num_types (0), types (dim_vector (init_tab_sz, 1), ""),
       vals (dim_vector (init_tab_sz, 1)),
       unary_class_ops (dim_vector (octave_value::num_unary_ops, 1), 0),
       unary_ops (dim_vector (octave_value::num_unary_ops, init_tab_sz), 0),
       non_const_unary_ops (dim_vector (octave_value::num_unary_ops, init_tab_sz), 0),
@@ -313,17 +319,26 @@ private:
   assignany_op_fcn do_lookup_assignany_op (octave_value::assign_op, int);
 
   int do_lookup_pref_assign_conv (int, int);
 
   octave_base_value::type_conv_fcn do_lookup_type_conv_op (int, int);
 
   octave_base_value::type_conv_fcn do_lookup_widening_op (int, int);
 
-  string_vector do_installed_type_names (void);
+  string_vector do_installed_type_names (void) const;
+
+  octave_scalar_map do_installed_type_info (void) const;
+
+  octave_scalar_map unary_ops_map (void) const;
+  octave_scalar_map non_const_unary_ops_map (void) const;
+  octave_scalar_map binary_ops_map (void) const;
+  octave_scalar_map compound_binary_ops_map (void) const;
+  octave_scalar_map assign_ops_map (void) const;
+  octave_scalar_map assignany_ops_map (void) const;
 
   // No copying!
 
   octave_value_typeinfo (const octave_value_typeinfo&);
 
   octave_value_typeinfo& operator = (const octave_value_typeinfo&);
 };
 
