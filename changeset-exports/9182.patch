# HG changeset patch
# User Robert T. Short <octave@phaselockedsystems.com>
# Date 1241547103 14400
#      Tue May 05 14:11:43 2009 -0400
# Node ID 23af5910e5f52174a69f2b95a427ff5fe33305f9
# Parent  86ae7e50dc5dea037d4121988f04b42b1c54990e
make load work for derived classses

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2009-05-05  Robert T. Short  <octave@phaselockedsystems.com>
+
+	* file-ops.h (file_ops::tail) New function.
+
 2009-05-05  Carsten Clark  <tantumquantum+gnuoctave@gmail.com>
 
 	* Quad.cc (user_function): Use access_double and assign_double on
 	SPARC only, not on all Sun systems.
 	* sun-utils.h: Likewise, define these functions on SPARC only.
 
 2009-05-05  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/liboctave/file-ops.h b/liboctave/file-ops.h
--- a/liboctave/file-ops.h
+++ b/liboctave/file-ops.h
@@ -104,16 +104,29 @@ public:
     return static_members::dir_sep_str ();
   }
 
   static std::string dir_sep_chars (void)
   {
     return static_members::dir_sep_chars ();
   }
 
+  // Return the tail member of a path.
+  static std::string tail (std::string path)
+  {
+    size_t ipos = path.find_last_of (dir_sep_chars ());
+
+    if (ipos != std::string::npos)
+      ipos++;
+    else
+      ipos = 0;
+
+    return path.substr (ipos);
+  }
+
 private:
 
   // Use a singleton class for these data members instead of just
   // making them static members of the dir_path class so that we can
   // ensure proper initialization.
 
   class static_members
   {
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2009-05-05  Robert T. Short  <octave@phaselockedsystems.com>
+
+	* ov-class.h, ov-class.cc (octave_class::reconstruct_parents):
+	New function.
+	* ov-class.cc (octave_class::load_binary, octave_class::load_hdf5):
+	Contstruct parent list.
+	(get_current_method_class): Clean up method class extraction.
+
 2009-05-05  John W. Eaton  <jwe@octave.org>
 
 	* graphics.cc (array_property::validate): Require object to be any
 	numeric type, not necessarily a double precision value.
 
 	* variables.cc (set_internal_variable): Pass NM in call to error.
 
 2009-05-04  Peter O'Gorman  <pogma@thewrittenword.com>
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -453,17 +453,16 @@ public:
   virtual string_vector map_keys (void) const;
 
   virtual size_t nparents (void) const;
 
   virtual std::list<std::string> parent_class_name_list (void) const;
 
   virtual string_vector parent_class_names (void) const;
 
-  // FIXME -- should this warn if called for a non-class type?
   virtual octave_base_value *find_parent_class (const std::string&)
     { return 0; }
 
   virtual octave_function *function_value (bool silent = false);
 
   virtual const octave_function *function_value (bool silent = false) const;
 
   virtual octave_user_function *user_function_value (bool silent = false);
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -28,16 +28,17 @@ along with Octave; see the file COPYING.
 
 #include "Array-util.h"
 #include "byte-swap.h"
 #include "oct-locbuf.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
+#include "file-ops.h"
 #include "gripes.h"
 #include "load-path.h"
 #include "ls-hdf5.h"
 #include "ls-oct-ascii.h"
 #include "ls-oct-binary.h"
 #include "ls-utils.h"
 #include "oct-lvalue.h"
 #include "ov-class.h"
@@ -93,25 +94,23 @@ octave_class::octave_class (const Octave
     load_path::add_to_parent_map (id, parent_list);
 }
 
 static std::string
 get_current_method_class (void)
 {
   std::string retval;
 
-  // FIXME -- is there a better way to do this?
   octave_function *fcn = octave_call_stack::current ();
 
   std::string my_dir = fcn->dir_name ();
 
-  size_t ipos = my_dir.find_last_of ("@");
+  std::string method_class = file_ops::tail (my_dir);
 
-  if (ipos != std::string::npos)
-    retval = my_dir.substr (ipos+1);
+  retval = method_class.substr (1);
 
   return retval;
 }
 
 static void
 gripe_invalid_index (void)
 {
   error ("invalid index for class");
@@ -809,22 +808,81 @@ octave_class::print_with_name (std::ostr
       arg_names[0] = name;
 
       args.stash_name_tags (arg_names);
 
       feval (fcn.function_value (), args);
     }
 }
 
+//  Load/save does not provide enough information to reconstruct the
+//  class inheritance structure.  reconstruct_parents () attempts to
+//  do so.  If successful, a "true" value is returned.
+//
+//  Note that we don't check the loaded object structure against the
+//  class structure here so the user's loadobj method has a chance
+//  to do its magic.
+bool
+octave_class::reconstruct_parents (void)
+{
+  bool retval = true, might_have_inheritance = false;
+  std::string dbgstr = "dork";
+
+  // First, check to see if there might be an issue with inheritance.
+  for (Octave_map::const_iterator p = map.begin (); p != map.end (); p++)
+    {
+      std::string  key = map.key (p);
+      Cell         val = map.contents (p);
+      if ( val(0).is_object() )
+	{
+	  dbgstr = "blork";
+	  if( key == val(0).class_name() )
+	    {
+	      might_have_inheritance = true;
+	      dbgstr = "cork";
+	      break;
+	    }
+	}
+    }
+  
+  if (might_have_inheritance)
+    {
+      octave_class::exemplar_const_iterator it
+	= octave_class::exemplar_map.find (c_name);
+
+      if (it == octave_class::exemplar_map.end ())
+	retval = false;
+      else
+	{
+	  octave_class::exemplar_info exmplr = it->second;
+	  parent_list = exmplr.parents ();
+	  for (std::list<std::string>::iterator pit = parent_list.begin ();
+	       pit != parent_list.end ();
+	       pit++)
+	    {
+	      dbgstr = *pit;
+	      bool dbgbool = map.contains (*pit);
+	      if (!dbgbool)
+		{
+		  retval = false;
+		  break;
+		}
+	    }
+	}
+    }
+
+  return retval;
+}
+
 bool
 octave_class::save_ascii (std::ostream& os)
 {
   os << "# classname: " << class_name () << "\n";
   Octave_map m;
-  if (load_path::find_method (class_name (), "saveobj") != std::string())
+  if (load_path::find_method (class_name (), "saveobj") != std::string ())
     {
       octave_value in = new octave_class (*this);
       octave_value_list tmp = feval ("saveobj", in, 1);
       if (! error_state)
 	m = tmp(0).map_value ();
       else
 	return false;
     }
@@ -868,17 +926,17 @@ octave_class::load_ascii (std::istream& 
 		{
 		  octave_value t2;
 		  bool dummy;
 
 		  // recurse to read cell elements
 		  std::string nm
 		    = read_ascii_data (is, std::string (), dummy, t2, j);
 
-		  if (!is)
+		  if (! is)
 		    break;
 
 		  Cell tcell = t2.is_cell () ? t2.cell_value () : Cell (t2);
 
 		  if (error_state)
 		    {
 		      error ("load: internal error loading class elements");
 		      return false;
@@ -887,18 +945,18 @@ octave_class::load_ascii (std::istream& 
 		  m.assign (nm, tcell);
 		}
 
 	      if (is) 
 		{
 		  map = m;
 		  c_name = classname;
 
-		  if (load_path::find_method (classname, "loadobj") != 
-		      std::string())
+		  if (load_path::find_method (classname, "loadobj")
+		      != std::string ())
 		    {
 		      octave_value in = new octave_class (*this);
 		      octave_value_list tmp = feval ("loadobj", in, 1);
 
 		      if (! error_state)
 			map = tmp(0).map_value ();
 		      else
 			success = false;
@@ -937,17 +995,17 @@ bool
 octave_class::save_binary (std::ostream& os, bool& save_as_floats)
 {
   int32_t classname_len = class_name().length ();
 
   os.write (reinterpret_cast<char *> (&classname_len), 4);
   os << class_name ();
 
   Octave_map m;
-  if (load_path::find_method (class_name (), "saveobj") != std::string())
+  if (load_path::find_method (class_name (), "saveobj") != std::string ())
     {
       octave_value in = new octave_class (*this);
       octave_value_list tmp = feval ("saveobj", in, 1);
       if (! error_state)
 	m = tmp(0).map_value ();
       else
 	return false;
     }
@@ -1010,17 +1068,17 @@ octave_class::load_binary (std::istream&
 	  octave_value t2;
 	  bool dummy;
 	  std::string doc;
 
 	  // recurse to read cell elements
 	  std::string nm = read_binary_data (is, swap, fmt, std::string (), 
 					     dummy, t2, doc);
 
-	  if (!is)
+	  if (! is)
 	    break;
 
 	  Cell tcell = t2.is_cell () ? t2.cell_value () : Cell (t2);
  
 	  if (error_state)
 	    {
 	      error ("load: internal error loading class elements");
 	      return false;
@@ -1028,25 +1086,30 @@ octave_class::load_binary (std::istream&
 
 	  m.assign (nm, tcell);
 	}
 
       if (is) 
 	{
 	  map = m;
 
-	  if (load_path::find_method (class_name(), "loadobj") != std::string())
+	  if (! reconstruct_parents ())
+	    error ("load: unable to reconstruct object inheritance");
+	  else
 	    {
-	      octave_value in = new octave_class (*this);
-	      octave_value_list tmp = feval ("loadobj", in, 1);
+	      if (load_path::find_method (c_name, "loadobj") != std::string ())
+		{
+		  octave_value in = new octave_class (*this);
+		  octave_value_list tmp = feval ("loadobj", in, 1);
 
-	      if (! error_state)
-		map = tmp(0).map_value ();
-	      else
-		success = false;
+		  if (! error_state)
+		    map = tmp(0).map_value ();
+		  else
+		    success = false;
+		}
 	    }
 	}
       else
 	{
 	  error ("load: failed to load class");
 	  success = false;
 	}
     }
@@ -1091,17 +1154,17 @@ octave_class::save_hdf5 (hid_t loc_id, c
   if (class_hid < 0 || H5Dwrite (class_hid, type_hid, H5S_ALL, H5S_ALL, 
 				    H5P_DEFAULT, c_name.c_str ()) < 0)
     goto error_cleanup;
 
   data_hid = H5Gcreate (group_hid, "value", 0);
   if (data_hid < 0)
     goto error_cleanup;
 
-  if (load_path::find_method (class_name (), "saveobj") != std::string())
+  if (load_path::find_method (class_name (), "saveobj") != std::string ())
     {
       octave_value in = new octave_class (*this);
       octave_value_list tmp = feval ("saveobj", in, 1);
       if (! error_state)
 	m = tmp(0).map_value ();
       else
 	goto error_cleanup;
     }
@@ -1248,31 +1311,36 @@ octave_class::load_hdf5 (hid_t loc_id, c
       if (have_h5giterate_bug)
 	current_item++;  // H5Giterate returned the last index processed
     }
 
   if (retval2 >= 0)
     {
       map = m;
 
-      if (load_path::find_method (class_name(), "loadobj") != std::string())
+      if (!reconstruct_parents ())
+	error ("load: unable to reconstruct object inheritance");
+      else
 	{
-	  octave_value in = new octave_class (*this);
-	  octave_value_list tmp = feval ("loadobj", in, 1);
+	  if (load_path::find_method (c_name, "loadobj") != std::string ())
+	    {
+	      octave_value in = new octave_class (*this);
+	      octave_value_list tmp = feval ("loadobj", in, 1);
 
-	  if (! error_state)
-	    {
-	      map = tmp(0).map_value ();
-	      retval = true;
+	      if (! error_state)
+		{
+		  map = tmp(0).map_value ();
+		  retval = true;
+		}
+	      else
+		retval = false;
 	    }
 	  else
-	    retval = false;
+	    retval = true;
 	}
-      else
-	retval = true;
     }
   
  error_cleanup:
   if (data_hid > 0)
     H5Dclose (data_hid);
 
   if (data_hid > 0)
     H5Gclose (group_hid);
diff --git a/src/ov-class.h b/src/ov-class.h
--- a/src/ov-class.h
+++ b/src/ov-class.h
@@ -139,16 +139,18 @@ public:
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
   void print_with_name (std::ostream& os, const std::string& name, 
 			bool print_padding = true) const;
 
+  bool reconstruct_parents (void);
+
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
