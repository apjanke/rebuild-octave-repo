# HG changeset patch
# User Rik <rik@octave.org>
# Date 1463771019 25200
#      Fri May 20 12:03:39 2016 -0700
# Node ID c94fde6d7c270078c20f1973c406e85b2dc82e26
# Parent  30d58f5cc7d09a57c2b46afdbca7fb4734ea11e8
polyval.m: Standardize error messages and add input validation BIST tests.

* polyval.m: Standardize error messages and add input validation BIST tests.

diff --git a/scripts/polynomial/polyval.m b/scripts/polynomial/polyval.m
--- a/scripts/polynomial/polyval.m
+++ b/scripts/polynomial/polyval.m
@@ -51,20 +51,20 @@ function [y, dy] = polyval (p, x, s = []
 
   if (isempty (x))
     y = x;
     return;
   elseif (isempty (p))
     y = zeros (size (x));
     return;
   elseif (! isvector (p))
-    error ("polyval: first argument must be a vector");
+    error ("polyval: P must be a vector");
   endif
 
-  if (nargin > 3)
+  if (nargin == 4)
     x = (x - mu(1)) / mu(2);
   endif
 
   n = length (p) - 1;
   y = p(1) * ones (size (x));
   for i = 2:n+1
     y = y .* x + p(i);
   endfor
@@ -78,43 +78,41 @@ function [y, dy] = polyval (p, x, s = []
     ## This is because finv (0.5, n, n) = 1.0 for any n.
     try
       k = numel (x);
       A = (x(:) * ones (1, n+1)) .^ (ones (k, 1) * (n:-1:0));
       dy = sqrt (1 + sumsq (A/s.R, 2)) * s.normr / sqrt (s.df);
       dy = reshape (dy, size (x));
     catch
       if (isempty (s))
-        error ("polyval: third input is required.");
+        error ("polyval: S input is required for DY output argument");
       elseif (isstruct (s)
               && all (ismember ({"R", "normr", "df"}, fieldnames (s))))
         error (lasterr ());
       elseif (isstruct (s))
-        error ("polyval: third input is missing the required fields.");
+        error ("polyval: S input is missing required fields");
       else
-        error ("polyval: third input is not a structure.");
+        error ("polyval: S input must be a structure");
       endif
     end_try_catch
   endif
 
 endfunction
 
 
-%!fail ("polyval ([1,0;0,1],0:10)")
-
 %!test
 %! r = 0:10:50;
 %! p = poly (r);
 %! p = p / max (abs (p));
 %! x = linspace (0,50,11);
 %! y = polyval (p,x) + 0.25*sin (100*x);
 %! [pf, s] = polyfit (x, y, numel (r));
 %! [y1, delta] = polyval (pf, x, s);
 %! expected = [0.37235, 0.35854, 0.32231, 0.32448, 0.31328, ...
-%!    0.32036, 0.31328, 0.32448, 0.32231, 0.35854, 0.37235];
+%!             0.32036, 0.31328, 0.32448, 0.32231, 0.35854, 0.37235];
 %! assert (delta, expected, 0.00001);
 
 %!test
 %! x = 10 + (-2:2);
 %! y = [0, 0, 1, 0, 2];
 %! p = polyfit (x, y, numel (x) - 1);
 %! [pn, s, mu] = polyfit (x, y, numel (x) - 1);
 %! y1 = polyval (p, x);
@@ -150,8 +148,19 @@ endfunction
 %! y = ones (size (x));
 %! assert (y, polyval (p,x), eps);
 %! x = reshape (x, [1, 1, 5, 2]);
 
 %!assert (zeros (1, 10), polyval ([], 1:10))
 %!assert ([], polyval (1, []))
 %!assert ([], polyval ([], []))
 %!assert (zeros (0, 1), polyval (1, zeros (0,1)))
+
+## Test input validation
+%!error polyval ()
+%!error polyval (1)
+%!error polyval (1,2,3,4,5)
+%!error <P must be a vector> polyval ([1,0;0,1],0:10)
+%!error <S input is required> [y, dy] = polyval (1, 1, [])
+%!error <S input is missing required fields>
+%!  [y, dy] = polyval (1, 1, struct ("T", 0, "normr", 1, "df", 2))
+%!error <S input must be a structure> [y, dy] = polyval (1, 1, 2)
+
