# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1491419247 14400
#      Wed Apr 05 15:07:27 2017 -0400
# Node ID 778fdffc09dfb36e0c2a8118b96b0cde6c159844
# Parent  5ea6c6d0c2dbc0914604b03a0fae43c1fe84b5cf
deprecate "octave_value (octave_value_list, bool)" constructor

* ov.h, ov.cc (octave_value::octave_value (octave_value_list, bool)):
Deprecate.  Change all uses.

diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -145,17 +145,20 @@ octave_cell::subsref (const std::string&
       {
         octave_value tmp = do_index_op (idx.front ());
 
         Cell tcell = tmp.cell_value ();
 
         if (tcell.numel () == 1)
           retval(0) = tcell(0,0);
         else
-          retval = octave_value (octave_value_list (tcell), true);
+          {
+            // Return a comma-separated list.
+            retval = octave_value (octave_value_list (tcell));
+          }
       }
       break;
 
     case '.':
       {
         std::string nm = type_name ();
         error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
       }
@@ -194,17 +197,20 @@ octave_cell::subsref (const std::string&
       {
         octave_value tmp = do_index_op (idx.front (), auto_add);
 
         const Cell tcell = tmp.cell_value ();
 
         if (tcell.numel () == 1)
           retval = tcell(0,0);
         else
-          retval = octave_value (octave_value_list (tcell), true);
+          {
+            // Return a comma-separated list.
+            retval = octave_value (octave_value_list (tcell));
+          }
       }
       break;
 
     case '.':
       {
         std::string nm = type_name ();
         error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
       }
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -449,21 +449,21 @@ octave_class::subsref (const std::string
               // Set up a proper nargout for the subsref call by calling numel.
               octave_value_list tmp;
               if (type[0] != '.') tmp = idx.front ();
               true_nargout = numel (tmp);
             }
 
           retval = octave::feval (meth.function_value (), args, true_nargout);
 
-          // Since we're handling subsref, return the list in the first value
-          // if it has more than one element, to be able to pass through
-          // rvalue1 calls.
+          // Since we're handling subsref, if the list has more than one
+          // element, return it as a comma-separated list so that we can
+          // pass it to rvalue1.
           if (retval.length () > 1)
-            retval = octave_value (retval, true);
+            retval = octave_value (retval);
         }
       else
         {
           if (type.length () == 1 && type[0] == '(')
             retval(0) = octave_value (map.index (idx.front ()), c_name,
                                       parent_list);
           else
             err_invalid_index1 ();
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -1123,16 +1123,20 @@ octave_value::octave_value (const octave
                             const std::list<std::string>& plist)
   : rep (new octave_class (m, id, plist))
 { }
 
 octave_value::octave_value (const octave_value_list& l, bool)
   : rep (new octave_cs_list (l))
 { }
 
+octave_value::octave_value (const octave_value_list& l)
+  : rep (new octave_cs_list (l))
+{ }
+
 octave_value::octave_value (octave_value::magic_colon)
   : rep (new octave_magic_colon ())
 { }
 
 octave_value::octave_value (octave_base_value *new_rep, bool borrow)
   : rep (new_rep)
 {
   if (borrow)
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -287,17 +287,22 @@ public:
   octave_value (double base, double limit, double inc);
   octave_value (const Range& r, bool force_range = false);
   octave_value (const octave_map& m);
   octave_value (const octave_scalar_map& m);
   octave_value (const octave_map& m, const std::string& id,
                 const std::list<std::string>& plist);
   octave_value (const octave_scalar_map& m, const std::string& id,
                 const std::list<std::string>& plist);
-  octave_value (const octave_value_list& m, bool = false);
+
+  OCTAVE_DEPRECATED ("note: second argument is always ignored; use octave_value (const octave_value_list&) instead")
+  octave_value (const octave_value_list& m, bool);
+
+  octave_value (const octave_value_list& m);
+
   octave_value (octave_value::magic_colon);
 
   octave_value (octave_base_value *new_rep, bool borrow = false);
 
   OCTAVE_DEPRECATED ("note: in the future there will be no way to directly set reference count")
   octave_value (octave_base_value *new_rep, int xcount);
 
   // Copy constructor.
diff --git a/libinterp/parse-tree/pt-assign.cc b/libinterp/parse-tree/pt-assign.cc
--- a/libinterp/parse-tree/pt-assign.cc
+++ b/libinterp/parse-tree/pt-assign.cc
@@ -258,21 +258,23 @@ namespace octave
                     std::list<octave_value_list> idx;
                     idx.push_back (octave_value_list (octave_value (1)));
                     ult.set_index ("{", idx);
                   }
 
                 if (k + nel > n)
                   error ("some elements undefined in return list");
 
-                // This won't do a copy.
+                // This element of the return list expects a
+                // comma-separated list of values.  Slicing avoids
+                // copying.
+
                 octave_value_list ovl = rhs_val.slice (k, nel);
 
-                ult.assign (octave_value::op_asn_eq,
-                            octave_value (ovl, true));
+                ult.assign (octave_value::op_asn_eq, octave_value (ovl));
 
                 retval_list.push_back (ovl);
 
                 k += nel;
               }
             else
               {
                 if (k < n)
