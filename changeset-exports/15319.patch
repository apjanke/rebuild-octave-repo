# HG changeset patch
# User Rik <rik@octave.org>
# Date 1346959102 25200
#      Thu Sep 06 12:18:22 2012 -0700
# Node ID daf74ce2afdc99e1ff42a4e5b9cecce871b6ac90
# Parent  117966ca93be6e432c9c0b9e6b7b94502523cfae
m4/acinclude.m4: Use more consistent m4 quoting of arguments to macros.

* m4/acinclude.m4: Use more consistent m4 quoting of arguments to macros.

diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -78,22 +78,22 @@ AC_DEFUN([OCTAVE_CC_FLAG], [
     CFLAGS="$CFLAGS $1"
     AC_LINK_IFELSE([AC_LANG_PROGRAM([], [])],
       [eval "octave_cv_cc_flag_$ac_safe=yes"],
       [eval "octave_cv_cc_flag_$ac_safe=no"])
     CFLAGS="$XCFLAGS"
     AC_LANG_POP(C)
   ])
   if eval "test \"`echo '$octave_cv_cc_flag_'$ac_safe`\" = yes"; then
-    AC_MSG_RESULT(yes)
+    AC_MSG_RESULT([yes])
     ifelse([$2], , 
       [CFLAGS="$CFLAGS $1"
       AC_MSG_RESULT([adding $1 to CFLAGS])], [$2])
   else
-    AC_MSG_RESULT(no)
+    AC_MSG_RESULT([no])
     ifelse([$3], , , [$3])
   fi
 ])
 dnl
 dnl Check whether a math mapper function is available in <cmath>.
 dnl Will define HAVE_CMATH_FUNC if there is a double variant and
 dnl HAVE_CMATH_FUNCF if there is a float variant.
 dnl Currently capable of checking for functions with single 
@@ -312,17 +312,17 @@ AC_DEFUN([OCTAVE_CHECK_LIB], [
   m4_set_add([summary_warning_list], [warn_$1])
 
   if test -n "$m4_toupper([$1])_LIBS"; then
     octave_check_lib_save_CPPFLAGS="$CPPFLAGS"
     CPPFLAGS="$m4_toupper([$1])_CPPFLAGS $CPPFLAGS"
     m4_ifnblank([$6], [AC_LANG_PUSH($6)])
     octave_$1_check_for_lib=false
     m4_ifblank([$4], [octave_$1_check_for_lib=true],
-               [AC_CHECK_HEADERS($4, [octave_$1_check_for_lib=true; break])])
+               [AC_CHECK_HEADERS([$4], [octave_$1_check_for_lib=true; break])])
     if $octave_$1_check_for_lib; then
       octave_check_lib_save_LDFLAGS="$LDFLAGS"
       LDFLAGS="$m4_toupper([$1])_LDFLAGS $LDFLAGS"
       octave_check_lib_save_LIBS="$LIBS"
       LIBS="$m4_toupper([$1])_LIBS $LIBS"
       octave_$1_ok=no
       AC_MSG_CHECKING([for $5 in $m4_toupper([$1])_LIBS])
       AC_LINK_IFELSE([AC_LANG_CALL([], [$5])],
@@ -561,17 +561,17 @@ AC_DEFUN([OCTAVE_CHECK_LIB_OPENGL], [
     AC_DEFINE(HAVE_FRAMEWORK_OPENGL, 1,
       [Define to 1 if framework OPENGL is available.])
     OPENGL_LIBS="-Wl,-framework -Wl,OpenGL"
     AC_MSG_NOTICE([adding -Wl,-framework -Wl,OpenGL to OPENGL_LIBS])
     OCTAVE_CHECK_FUNC_GLUTESSCALLBACK_THREEDOTS
   else
     case $canonical_host_type in
       *-*-mingw32* | *-*-msdosmsvc)
-        AC_CHECK_HEADERS(windows.h)
+        AC_CHECK_HEADERS([windows.h])
       ;;
     esac
     have_opengl_incs=no
     AC_CHECK_HEADERS([GL/gl.h OpenGL/gl.h],
       [AC_CHECK_HEADERS([GL/glu.h OpenGL/glu.h],
         [have_opengl_incs=yes; break], [], [
 #ifdef HAVE_WINDOWS_H
 #include <windows.h>
@@ -600,24 +600,24 @@ AC_DEFUN([OCTAVE_CHECK_LIB_OPENGL], [
             # include <OpenGL/gl.h>
             #endif
             ]], [[ 
             glEnable(GL_SMOOTH);
             ]])], [OPENGL_LIBS="-lopengl32 -lglu32"])
 
           LIBS="$save_LIBS"
           if test "x$OPENGL_LIBS" != "x"; then
-            AC_MSG_RESULT(yes)
+            AC_MSG_RESULT([yes])
           else
-            AC_MSG_RESULT(no)
+            AC_MSG_RESULT([no])
           fi
           ;;
         *)
           ## Non-Mac, Non-Windows systems use this check
-          AC_CHECK_LIB(GL, [glEnable], [OPENGL_LIBS="-lGL -lGLU"])
+          AC_CHECK_LIB([GL], [glEnable], [OPENGL_LIBS="-lGL -lGLU"])
           ;;
       esac
     fi
   fi
   AC_SUBST(OPENGL_LIBS)
 ])
 dnl
 dnl Check whether Qhull works (does not crash).
@@ -974,22 +974,22 @@ AC_DEFUN([OCTAVE_CXX_FLAG], [
     CXXFLAGS="$CXXFLAGS $1"
     AC_LINK_IFELSE([AC_LANG_PROGRAM([], [])],
       eval "octave_cv_cxx_flag_$ac_safe=yes",
       eval "octave_cv_cxx_flag_$ac_safe=no")
     CXXFLAGS="$XCXXFLAGS"
     AC_LANG_POP(C++)
   ])
   if eval "test \"`echo '$octave_cv_cxx_flag_'$ac_safe`\" = yes"; then
-    AC_MSG_RESULT(yes)
+    AC_MSG_RESULT([yes])
     ifelse([$2], ,
       [CXXFLAGS="$CXXFLAGS $1"
       AC_MSG_RESULT([adding $1 to CXXFLAGS])], [$2])
   else
-    AC_MSG_RESULT(no)
+    AC_MSG_RESULT([no])
     ifelse([$3], , , [$3])
   fi
 ])
 dnl
 dnl Check if the C++ library is ISO compliant.
 dnl FIXME: This is obviously very simplistic, and trivially fooled.
 dnl
 AC_DEFUN([OCTAVE_CXX_ISO_COMPLIANT_LIBRARY], [
@@ -1088,29 +1088,29 @@ AC_DEFUN([OCTAVE_CXX_PLACEMENT_DELETE], 
 ])
 dnl
 dnl Allow the user disable support for command line editing using GNU
 dnl readline.
 dnl
 AC_DEFUN([OCTAVE_ENABLE_READLINE], [
   USE_READLINE=true
   READLINE_LIBS=
-  AC_ARG_ENABLE(readline,
+  AC_ARG_ENABLE([readline],
     [AS_HELP_STRING([--disable-readline],
       [use readline library])],
     [if test "$enableval" = no; then
        USE_READLINE=false
        warn_readline="command editing and history features require GNU Readline"
      fi])
   if $USE_READLINE; then
     dnl RHEL 5 and older systems require termlib set before enabling readline
     AC_REQUIRE([OCTAVE_CHECK_LIB_TERMLIB])
     save_LIBS="$LIBS"
     LIBS="$TERM_LIBS"
-    AC_CHECK_LIB(readline, rl_set_keyboard_input_timeout,
+    AC_CHECK_LIB([readline], [rl_set_keyboard_input_timeout],
       [READLINE_LIBS="-lreadline"
       AC_DEFINE(USE_READLINE, 1, [Define to 1 to use the readline library.])
       ],
       [AC_MSG_WARN([I need GNU Readline 4.2 or later])
       AC_MSG_ERROR([this is fatal unless you specify --disable-readline])
     ])
     LIBS="$save_LIBS"
   fi
@@ -1120,33 +1120,33 @@ dnl
 dnl Check if Fortran compiler handles FLAG command line option.  If
 dnl two arguments are specified, execute the second arg as shell
 dnl commands.  Otherwise, add FLAG to FFLAGS if the compiler accepts
 dnl the flag.
 dnl
 AC_DEFUN([OCTAVE_F77_FLAG], [
   ac_safe=`echo "$1" | sed 'y%./+-:=%__p___%'`
   AC_MSG_CHECKING([whether ${F77-g77} accepts $1])
-  AC_CACHE_VAL(octave_cv_f77_flag_$ac_safe, [
+  AC_CACHE_VAL([octave_cv_f77_flag_$ac_safe], [
     AC_LANG_PUSH(Fortran 77)
     XFFLAGS="$FFLAGS"
     FFLAGS="$FFLAGS $1"
     AC_LINK_IFELSE([AC_LANG_PROGRAM([], [])],
       eval "octave_cv_f77_flag_$ac_safe=yes",
       eval "octave_cv_f77_flag_$ac_safe=no")
     FFLAGS="$XFFLAGS"
     AC_LANG_POP(Fortran 77)
   ])
   if eval "test \"`echo '$octave_cv_f77_flag_'$ac_safe`\" = yes"; then
-    AC_MSG_RESULT(yes)
+    AC_MSG_RESULT([yes])
     ifelse([$2], ,
       [FFLAGS="$FFLAGS $1"
       AC_MSG_RESULT([adding $1 to FFLAGS])], [$2])
   else
-    AC_MSG_RESULT(no)
+    AC_MSG_RESULT([no])
     ifelse([$3], , , [$3])
   fi
 ])
 dnl
 dnl Check whether fast signed integer arithmetics using bit tricks
 dnl can be used in oct-inttypes.h.  Defines HAVE_FAST_INT_OPS if
 dnl the following conditions hold:
 dnl 1. Signed numbers are represented by twos complement
@@ -1234,29 +1234,29 @@ AC_DEFUN([OCTAVE_HAVE_FRAMEWORK], [
     AC_LANG_PUSH(C++)
     AC_LINK_IFELSE([AC_LANG_PROGRAM([$2], [$3])],
       eval "octave_cv_framework_$1=yes",
       eval "octave_cv_framework_$1=no")
     AC_LANG_POP(C++)
     LDFLAGS="$XLDFLAGS"
   ])
   if test "$octave_cv_framework_$1" = "yes"; then
-    AC_MSG_RESULT(yes)
+    AC_MSG_RESULT([yes])
     AC_ARG_WITH(framework-m4_tolower($1),
       [AS_HELP_STRING([--without-framework-m4_tolower($1)], 
         [don't use framework $1])],
          with_have_framework=$withval, with_have_framework=yes)
     if test "$with_have_framework" = "yes"; then
       [$4]
     else
       AC_MSG_NOTICE([framework rejected by --without-framework-m4_tolower($1)])
       [$5]
     fi
   else
-    AC_MSG_RESULT(no)
+    AC_MSG_RESULT([no])
     [$5]
   fi
 ])
 dnl
 dnl Figure out the hardware-vendor-os info.
 dnl
 dnl Hanging '])' in AC_MSG_WARN is for adding newline to output
 dnl
@@ -1478,17 +1478,17 @@ AC_DEFUN([OCTAVE_PROG_PAGER], [
   else
     octave_possible_pagers="less more page pg"
     case "$canonical_host_type" in
       *-*-cygwin* | *-*-mingw32* | *-*-msdosmsvc)
         octave_possible_pagers="$octave_possible_pagers more.com"
       ;;
     esac
 
-    AC_CHECK_PROGS(DEFAULT_PAGER, $octave_possible_pagers, [])
+    AC_CHECK_PROGS(DEFAULT_PAGER, [$octave_possible_pagers], [])
     if test -z "$DEFAULT_PAGER"; then
       warn_less="I couldn't find \`less', \`more', \`page', or \`pg'"
       OCTAVE_CONFIGURE_WARNING([warn_less])
     fi
   fi
 ])
 dnl
 dnl Find Perl program.
@@ -1625,17 +1625,17 @@ AC_DEFUN([OCTAVE_SET_DEFAULT], [
 ])
 dnl
 dnl Check for UMFPACK separately split complex matrix and RHS.
 dnl
 dnl Macro assumes that the check for umfpack has already been performed.
 dnl
 AC_DEFUN([OCTAVE_UMFPACK_SEPARATE_SPLIT], [
   AC_MSG_CHECKING([for UMFPACK separate complex matrix and rhs split])
-  AC_CACHE_VAL(octave_cv_umfpack_separate_split,
+  AC_CACHE_VAL([octave_cv_umfpack_separate_split],
     [AC_RUN_IFELSE([AC_LANG_SOURCE([[
         #include <stdlib.h>
         #if defined (HAVE_SUITESPARSE_UMFPACK_H)
         # include <suitesparse/umfpack.h>
         #elif defined (HAVE_UFSPARSE_UMFPACK_H)
         # include <ufsparse/umfpack.h>
         #elif defined (HAVE_UMFPACK_UMFPACK_H)
         # include <umfpack/umfpack.h>
