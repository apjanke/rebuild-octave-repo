# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1382132684 -7200
#      Fri Oct 18 23:44:44 2013 +0200
# Node ID 8a54a481ecb5ee9709202b9d9d3abda2c6724980
# Parent  79d6af38b96fc3a6a7177aec9dd98280f199a0c0
Massive speed improvement in sparse min/max functions for calls like
'max(s,[],2)' (bug #40268)

* dSparse.cc (SparseMatrix SparseMatrix::max (Array<octave_idx-type>&, int)) :
  Remove triple loop by using a local buffer
  (SparseMatrix SparseMatrix::min (Array<octave_idx-type>&, int)) : ditto

* CSparse.cc (SparseComplexMatrix SparseComplexMatrix::max (
  Array<octave_idx-type>&, int)) : Remove triple loop by using a local buffer
  (SparseComplexMatrix SparseComplexMatrix::min (Array<octave_idx-type>&,
  int)) : ditto

diff --git a/liboctave/array/CSparse.cc b/liboctave/array/CSparse.cc
--- a/liboctave/array/CSparse.cc
+++ b/liboctave/array/CSparse.cc
@@ -337,39 +337,29 @@ SparseComplexMatrix::max (Array<octave_i
     }
   else
     {
       idx_arg.resize (dim_vector (nr, nc == 0 ? 0 : 1), 0);
 
       if (nr == 0 || nc == 0 || dim >= dv.length ())
         return SparseComplexMatrix (nr, nc == 0 ? 0 : 1);
 
-
-      idx_arg.resize (dim_vector (nr, 1), 0);
-
-      for (octave_idx_type i = cidx (0); i < cidx (1); i++)
-        idx_arg.elem (ridx (i)) = -1;
+      OCTAVE_LOCAL_BUFFER (octave_idx_type, found, nr);
+
+      for (octave_idx_type i = 0; i < nr; i++)
+        found [i] = 0;
 
       for (octave_idx_type j = 0; j < nc; j++)
-        for (octave_idx_type i = 0; i < nr; i++)
-          {
-            if (idx_arg.elem (i) != -1)
-              continue;
-            bool found = false;
-            for (octave_idx_type k = cidx (j); k < cidx (j+1); k++)
-              if (ridx (k) == i)
-                {
-                  found = true;
-                  break;
-                }
-
-            if (!found)
-              idx_arg.elem (i) = j;
-
-          }
+        for (octave_idx_type i = cidx(j); i < cidx(j+1); i++)
+          if (found [ridx (i)] == -j)
+            found [ridx (i)] = -j - 1;
+      
+      for (octave_idx_type i = 0; i < nr; i++)
+        if (found [i] > -nc && found [i] < 0)
+          idx_arg.elem (i) = -found [i];
 
       for (octave_idx_type j = 0; j < nc; j++)
         {
           for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
             {
               octave_idx_type ir = ridx (i);
               octave_idx_type ix = idx_arg.elem (ir);
               Complex tmp = data (i);
@@ -504,36 +494,29 @@ SparseComplexMatrix::min (Array<octave_i
     }
   else
     {
       idx_arg.resize (dim_vector (nr, nc == 0 ? 0 : 1), 0);
 
       if (nr == 0 || nc == 0 || dim >= dv.length ())
         return SparseComplexMatrix (nr, nc == 0 ? 0 : 1);
 
-      for (octave_idx_type i = cidx (0); i < cidx (1); i++)
-        idx_arg.elem (ridx (i)) = -1;
+      OCTAVE_LOCAL_BUFFER (octave_idx_type, found, nr);
+
+      for (octave_idx_type i = 0; i < nr; i++)
+        found [i] = 0;
 
       for (octave_idx_type j = 0; j < nc; j++)
-        for (octave_idx_type i = 0; i < nr; i++)
-          {
-            if (idx_arg.elem (i) != -1)
-              continue;
-            bool found = false;
-            for (octave_idx_type k = cidx (j); k < cidx (j+1); k++)
-              if (ridx (k) == i)
-                {
-                  found = true;
-                  break;
-                }
-
-            if (!found)
-              idx_arg.elem (i) = j;
-
-          }
+        for (octave_idx_type i = cidx(j); i < cidx(j+1); i++)
+          if (found [ridx (i)] == -j)
+            found [ridx (i)] = -j - 1;
+      
+      for (octave_idx_type i = 0; i < nr; i++)
+        if (found [i] > -nc && found [i] < 0)
+          idx_arg.elem (i) = -found [i];
 
       for (octave_idx_type j = 0; j < nc; j++)
         {
           for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
             {
               octave_idx_type ir = ridx (i);
               octave_idx_type ix = idx_arg.elem (ir);
               Complex tmp = data (i);
@@ -577,16 +560,24 @@ SparseComplexMatrix::min (Array<octave_i
 
   return result;
 }
 
 /*
 
 %!assert (max (max (speye (65536) * 1i)), sparse (1i)) 
 %!assert (min (min (speye (65536) * 1i)), sparse (0)) 
+%!assert (size (max (sparse (8, 0), [], 1)), [1, 0]) 
+%!assert (size (max (sparse (8, 0), [], 2)), [8, 0]) 
+%!assert (size (max (sparse (0, 8), [], 1)), [0, 8]) 
+%!assert (size (max (sparse (0, 8), [], 2)), [0, 1]) 
+%!assert (size (min (sparse (8, 0), [], 1)), [1, 0]) 
+%!assert (size (min (sparse (8, 0), [], 2)), [8, 0]) 
+%!assert (size (min (sparse (0, 8), [], 1)), [0, 8]) 
+%!assert (size (min (sparse (0, 8), [], 2)), [0, 1]) 
 
 */
 
 ComplexRowVector
 SparseComplexMatrix::row (octave_idx_type i) const
 {
   octave_idx_type nc = columns ();
   ComplexRowVector retval (nc, 0);
diff --git a/liboctave/array/dSparse.cc b/liboctave/array/dSparse.cc
--- a/liboctave/array/dSparse.cc
+++ b/liboctave/array/dSparse.cc
@@ -348,36 +348,29 @@ SparseMatrix::max (Array<octave_idx_type
     }
   else
     {
       idx_arg.resize (dim_vector (nr, nc == 0 ? 0 : 1), 0);
 
       if (nr == 0 || nc == 0 || dim >= dv.length ())
         return SparseMatrix (nr, nc == 0 ? 0 : 1);
 
-      for (octave_idx_type i = cidx (0); i < cidx (1); i++)
-        idx_arg.elem (ridx (i)) = -1;
+      OCTAVE_LOCAL_BUFFER (octave_idx_type, found, nr);
+
+      for (octave_idx_type i = 0; i < nr; i++)
+        found [i] = 0;
 
       for (octave_idx_type j = 0; j < nc; j++)
-        for (octave_idx_type i = 0; i < nr; i++)
-          {
-            if (idx_arg.elem (i) != -1)
-              continue;
-            bool found = false;
-            for (octave_idx_type k = cidx (j); k < cidx (j+1); k++)
-              if (ridx (k) == i)
-                {
-                  found = true;
-                  break;
-                }
-
-            if (!found)
-              idx_arg.elem (i) = j;
-
-          }
+        for (octave_idx_type i = cidx(j); i < cidx(j+1); i++)
+          if (found [ridx (i)] == -j)
+            found [ridx (i)] = -j - 1;
+      
+      for (octave_idx_type i = 0; i < nr; i++)
+        if (found [i] > -nc && found [i] < 0)
+          idx_arg.elem (i) = -found [i];
 
       for (octave_idx_type j = 0; j < nc; j++)
         {
           for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
             {
               octave_idx_type ir = ridx (i);
               octave_idx_type ix = idx_arg.elem (ir);
               double tmp = data (i);
@@ -506,36 +499,29 @@ SparseMatrix::min (Array<octave_idx_type
     }
   else
     {
       idx_arg.resize (dim_vector (nr, nc == 0 ? 0 : 1), 0);
 
       if (nr == 0 || nc == 0 || dim >= dv.length ())
         return SparseMatrix (nr, nc == 0 ? 0 : 1);
 
-      for (octave_idx_type i = cidx (0); i < cidx (1); i++)
-        idx_arg.elem (ridx (i)) = -1;
+      OCTAVE_LOCAL_BUFFER (octave_idx_type, found, nr);
+
+      for (octave_idx_type i = 0; i < nr; i++)
+        found [i] = 0;
 
       for (octave_idx_type j = 0; j < nc; j++)
-        for (octave_idx_type i = 0; i < nr; i++)
-          {
-            if (idx_arg.elem (i) != -1)
-              continue;
-            bool found = false;
-            for (octave_idx_type k = cidx (j); k < cidx (j+1); k++)
-              if (ridx (k) == i)
-                {
-                  found = true;
-                  break;
-                }
-
-            if (!found)
-              idx_arg.elem (i) = j;
-
-          }
+        for (octave_idx_type i = cidx(j); i < cidx(j+1); i++)
+          if (found [ridx (i)] == -j)
+            found [ridx (i)] = -j - 1;
+      
+      for (octave_idx_type i = 0; i < nr; i++)
+        if (found [i] > -nc && found [i] < 0)
+          idx_arg.elem (i) = -found [i];
 
       for (octave_idx_type j = 0; j < nc; j++)
         {
           for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
             {
               octave_idx_type ir = ridx (i);
               octave_idx_type ix = idx_arg.elem (ir);
               double tmp = data (i);
@@ -579,16 +565,24 @@ SparseMatrix::min (Array<octave_idx_type
 
   return result;
 }
 
 /*
 
 %!assert (max (max (speye (65536))), sparse (1)) 
 %!assert (min (min (speye (65536))), sparse (0)) 
+%!assert (size (max (sparse (8, 0), [], 1)), [1, 0]) 
+%!assert (size (max (sparse (8, 0), [], 2)), [8, 0]) 
+%!assert (size (max (sparse (0, 8), [], 1)), [0, 8]) 
+%!assert (size (max (sparse (0, 8), [], 2)), [0, 1]) 
+%!assert (size (min (sparse (8, 0), [], 1)), [1, 0]) 
+%!assert (size (min (sparse (8, 0), [], 2)), [8, 0]) 
+%!assert (size (min (sparse (0, 8), [], 1)), [0, 8]) 
+%!assert (size (min (sparse (0, 8), [], 2)), [0, 1]) 
 
 */
 
 RowVector
 SparseMatrix::row (octave_idx_type i) const
 {
   octave_idx_type nc = columns ();
   RowVector retval (nc, 0);
