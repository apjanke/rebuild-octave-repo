# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1362870594 18000
#      Sat Mar 09 18:09:54 2013 -0500
# Branch classdef
# Node ID 90dfd98a915a1a73ad2c935387fcc4ab187b4f3e
# Parent  d8c0f46efaf09701dc7e8e4ef7461d99a9d3bb70
# Parent  38bd5ae8463b254038e5a06cc6cd5db7bdbedf2e
maint: periodic merge of default to classdef

diff --git a/libinterp/parse-tree/module.mk b/libinterp/parse-tree/module.mk
--- a/libinterp/parse-tree/module.mk
+++ b/libinterp/parse-tree/module.mk
@@ -16,16 +16,17 @@ PARSER_SRC = \
 ##        library and using per-library rules.  Or we can just live
 ##        with the extra warnings about old-sytle-casts. (09/18/2012)
 #lex.lo lex.o oct-parse.lo oct-parse.o: \
 #  AM_CXXFLAGS := $(filter-out -Wold-style-cast, $(AM_CXXFLAGS))
 
 PARSE_TREE_INC = \
   parse-tree/pt-all.h \
   parse-tree/pt-arg-list.h \
+  parse-tree/pt-array-list.h \
   parse-tree/pt-assign.h \
   parse-tree/pt-binop.h \
   parse-tree/pt-bp.h \
   parse-tree/pt-cbinop.h \
   parse-tree/pt-cell.h \
   parse-tree/pt-check.h \
   parse-tree/pt-classdef.h \
   parse-tree/pt-cmd.h \
@@ -49,16 +50,17 @@ PARSE_TREE_INC = \
   parse-tree/pt-unop.h \
   parse-tree/pt-walk.h \
   parse-tree/pt.h \
   parse-tree/token.h \
   $(PARSER_INC)
 
 PARSE_TREE_SRC = \
   parse-tree/pt-arg-list.cc \
+  parse-tree/pt-array-list.cc \
   parse-tree/pt-assign.cc \
   parse-tree/pt-binop.cc \
   parse-tree/pt-bp.cc \
   parse-tree/pt-cbinop.cc \
   parse-tree/pt-cell.cc \
   parse-tree/pt-check.cc \
   parse-tree/pt-classdef.cc \
   parse-tree/pt-cmd.cc \
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -253,17 +253,18 @@ make_statement (T *arg)
 %token END_OF_INPUT LEXICAL_ERROR
 %token FCN INPUT_FILE
 // %token VARARGIN VARARGOUT
 %token CLOSE_BRACE
 
 // Nonterminals we construct.
 %type <comment_type> stash_comment function_beg
 %type <tok_type> classdef_beg
-%type <sep_type> sep_no_nl opt_sep_no_nl nl opt_nl sep opt_sep opt_comma
+%type <sep_type> sep_no_nl opt_sep_no_nl nl opt_nl sep opt_sep
+%type <sep_type> opt_comma opt_semi
 %type <tree_type> input
 %type <tree_constant_type> string constant magic_colon
 %type <tree_anon_fcn_handle_type> anon_fcn_handle
 %type <tree_fcn_handle_type> fcn_handle
 %type <tree_matrix_type> matrix_rows matrix_rows1
 %type <tree_cell_type> cell_rows cell_rows1
 %type <tree_expression_type> matrix cell
 %type <tree_expression_type> primary_expr oper_expr
@@ -488,19 +489,17 @@ matrix          : '[' ']'
                 | '[' matrix_rows ']'
                   {
                     $$ = curr_parser.finish_matrix ($2);
                     curr_lexer->looking_at_matrix_or_assign_lhs = false;
                     curr_lexer->pending_local_variables.clear ();
                   }
                 ;
 
-matrix_rows     : matrix_rows1
-                  { $$ = $1; }
-                | matrix_rows1 ';'      // Ignore trailing semicolon.
+matrix_rows     : matrix_rows1 opt_semi
                   { $$ = $1; }
                 ;
 
 matrix_rows1    : cell_or_matrix_row
                   { $$ = new tree_matrix ($1); }
                 | matrix_rows1 ';' cell_or_matrix_row
                   {
                     $1->append ($3);
@@ -511,35 +510,31 @@ matrix_rows1    : cell_or_matrix_row
 cell            : '{' '}'
                   { $$ = new tree_constant (octave_value (Cell ())); }
                 | '{' ';' '}'
                   { $$ = new tree_constant (octave_value (Cell ())); }
                 | '{' cell_rows '}'
                   { $$ = curr_parser.finish_cell ($2); }
                 ;
 
-cell_rows       : cell_rows1
-                  { $$ = $1; }
-                | cell_rows1 ';'        // Ignore trailing semicolon.
+cell_rows       : cell_rows1 opt_semi
                   { $$ = $1; }
                 ;
 
 cell_rows1      : cell_or_matrix_row
                   { $$ = new tree_cell ($1); }
                 | cell_rows1 ';' cell_or_matrix_row
                   {
                     $1->append ($3);
                     $$ = $1;
                   }
                 ;
 
 cell_or_matrix_row
-                : arg_list
-                  { $$ = curr_parser.validate_matrix_row ($1); }
-                | arg_list ','  // Ignore trailing comma.
+                : arg_list opt_comma
                   { $$ = curr_parser.validate_matrix_row ($1); }
                 ;
 
 fcn_handle      : '@' FCN_HANDLE
                   {
                     $$ = curr_parser.make_fcn_handle ($2);
                     curr_lexer->looking_at_function_handle--;
                   }
@@ -1544,16 +1539,22 @@ opt_sep         : // empty
                 ;
 
 opt_comma       : // empty
                   { $$ = 0; }
                 | ','
                   { $$ = ','; }
                 ;
 
+opt_semi        : // empty
+                  { $$ = 0; }
+                | ';'
+                  { $$ = ';'; }
+                ;
+
 %%
 
 // Generic error messages.
 
 #undef curr_lexer
 
 static void
 yyerror (octave_parser& curr_parser, const char *s)
@@ -3215,66 +3216,75 @@ octave_parser::make_decl_command (int to
 tree_argument_list *
 octave_parser::validate_matrix_row (tree_argument_list *row)
 {
   if (row && row->has_magic_tilde ())
     bison_error ("invalid use of tilde (~) in matrix expression");
   return row;
 }
 
-// Finish building a matrix list.
+// Finish building an array_list.
 
 tree_expression *
-octave_parser::finish_matrix (tree_matrix *m)
+octave_parser::finish_array_list (tree_array_list *array_list)
 {
-  tree_expression *retval = m;
+  tree_expression *retval = array_list;
 
   unwind_protect frame;
 
   frame.protect_var (error_state);
   frame.protect_var (warning_state);
 
   frame.protect_var (discard_error_messages);
   frame.protect_var (discard_warning_messages);
 
   discard_error_messages = true;
   discard_warning_messages = true;
 
-  if (m->all_elements_are_constant ())
+  if (array_list->all_elements_are_constant ())
     {
-      octave_value tmp = m->rvalue1 ();
+      octave_value tmp = array_list->rvalue1 ();
 
       if (! (error_state || warning_state))
         {
           tree_constant *tc_retval
-            = new tree_constant (tmp, m->line (), m->column ());
+            = new tree_constant (tmp, array_list->line (),
+                                 array_list->column ());
 
           std::ostringstream buf;
 
           tree_print_code tpc (buf);
 
-          m->accept (tpc);
+          array_list->accept (tpc);
 
           tc_retval->stash_original_text (buf.str ());
 
-          delete m;
+          delete array_list;
 
           retval = tc_retval;
         }
     }
 
   return retval;
 }
 
+// Finish building a matrix list.
+
+tree_expression *
+octave_parser::finish_matrix (tree_matrix *m)
+{
+  return finish_array_list (m);
+}
+
 // Finish building a cell list.
 
 tree_expression *
 octave_parser::finish_cell (tree_cell *c)
 {
-  return finish_matrix (c);
+  return finish_array_list (c);
 }
 
 void
 octave_parser::maybe_warn_missing_semi (tree_statement_list *t)
 {
   if (curr_fcn_depth > 0)
     {
       tree_statement *tmp = t->back ();
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -36,16 +36,17 @@ along with Octave; see the file COPYING.
 #include "token.h"
 
 class octave_comment_list;
 class octave_function;
 class octave_user_function;
 class tree;
 class tree_anon_fcn_handle;
 class tree_argument_list;
+class tree_array_list;
 class tree_cell;
 class tree_classdef;
 class tree_classdef_attribute_list;
 class tree_classdef_body;
 class tree_classdef_enum_block;
 class tree_classdef_enum_list;
 class tree_classdef_events_block;
 class tree_classdef_events_list;
@@ -379,16 +380,20 @@ public:
 
   // Make a declaration command.
   tree_decl_command *
   make_decl_command (int tok, token *tok_val, tree_decl_init_list *lst);
 
   // Validate argument list forming a matrix or cell row.
   tree_argument_list *validate_matrix_row (tree_argument_list *row);
 
+  // Finish building an array_list (common action for finish_matrix
+  // and finish_cell).
+  tree_expression *finish_array_list (tree_array_list *a);
+
   // Finish building a matrix list.
   tree_expression *finish_matrix (tree_matrix *m);
 
   // Finish building a cell list.
   tree_expression *finish_cell (tree_cell *c);
 
   // Maybe print a warning.  Duh.
   void maybe_warn_missing_semi (tree_statement_list *);
diff --git a/libinterp/parse-tree/pt-arg-list.h b/libinterp/parse-tree/pt-arg-list.h
--- a/libinterp/parse-tree/pt-arg-list.h
+++ b/libinterp/parse-tree/pt-arg-list.h
@@ -28,16 +28,17 @@ along with Octave; see the file COPYING.
 class octave_value_list;
 class octave_lvalue;
 class tree_expression;
 class tree_walker;
 
 #include "str-vec.h"
 
 #include "base-list.h"
+#include "symtab.h"
 
 // Argument lists.  Used to hold the list of expressions that are the
 // arguments in a function call or index expression.
 
 class
 tree_argument_list : public octave_base_list<tree_expression *>
 {
 public:
diff --git a/libinterp/parse-tree/pt-array-list.cc b/libinterp/parse-tree/pt-array-list.cc
new file mode 100644
--- /dev/null
+++ b/libinterp/parse-tree/pt-array-list.cc
@@ -0,0 +1,108 @@
+/*
+
+Copyright (C) 2013 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <iostream>
+
+#include "error.h"
+#include "pt-array-list.h"
+
+tree_array_list::~tree_array_list (void)
+{
+  while (! empty ())
+    {
+      iterator p = begin ();
+      delete *p;
+      erase (p);
+    }
+}
+
+bool
+tree_array_list::all_elements_are_constant (void) const
+{
+  for (const_iterator p = begin (); p != end (); p++)
+    {
+      octave_quit ();
+
+      tree_argument_list *elt = *p;
+
+      if (! elt->all_elements_are_constant ())
+        return false;
+    }
+
+  return true;
+}
+
+bool
+tree_array_list::has_magic_end (void) const
+{
+  for (const_iterator p = begin (); p != end (); p++)
+    {
+      octave_quit ();
+
+      tree_argument_list *elt = *p;
+
+      if (elt && elt->has_magic_end ())
+        return true;
+    }
+
+  return false;
+}
+
+void
+tree_array_list::copy_base (const tree_array_list& array_list)
+{
+  tree_expression::copy_base (array_list);
+}
+
+void
+tree_array_list::copy_base (const tree_array_list& array_list,
+                            symbol_table::scope_id scope,
+                            symbol_table::context_id context)
+{
+  for (const_iterator p = array_list.begin (); p != array_list.end (); p++)
+    {
+      const tree_argument_list *elt = *p;
+
+      append (elt ? elt->dup (scope, context) : 0);
+    }
+
+  copy_base (*this);
+}
+
+tree_expression *
+tree_array_list::dup (symbol_table::scope_id scope,
+                      symbol_table::context_id context) const
+{
+  panic_impossible ();
+  return 0;
+}
+
+void
+tree_array_list::accept (tree_walker&)
+{
+  panic_impossible ();
+}
+
diff --git a/libinterp/parse-tree/pt-array-list.h b/libinterp/parse-tree/pt-array-list.h
new file mode 100644
--- /dev/null
+++ b/libinterp/parse-tree/pt-array-list.h
@@ -0,0 +1,72 @@
+/*
+
+Copyright (C) 2013 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if !defined (octave_tree_array_list_h)
+#define octave_tree_array_list_h 1
+
+#include "base-list.h"
+#include "pt-arg-list.h"
+#include "pt-exp.h"
+#include "symtab.h"
+
+// Base class for cell arrays and matrices.
+
+class
+tree_array_list : public tree_expression,
+                  public octave_base_list<tree_argument_list *>
+{
+public:
+
+  tree_array_list (tree_argument_list *row = 0, int l = -1, int c = -1)
+    : tree_expression (l, c), octave_base_list<tree_argument_list *> ()
+  {
+    if (row)
+      append (row);
+  }
+
+  ~tree_array_list (void);
+
+  bool all_elements_are_constant (void) const;
+
+  bool has_magic_end (void) const;
+
+  void copy_base (const tree_array_list& array_list);
+
+  void copy_base (const tree_array_list& array_list,
+                  symbol_table::scope_id scope,
+                  symbol_table::context_id context);
+
+  tree_expression *dup (symbol_table::scope_id scope,
+                        symbol_table::context_id context) const;
+
+  void accept (tree_walker& tw);
+
+private:
+
+  // No copying!
+
+  tree_array_list (const tree_array_list&);
+
+  tree_array_list& operator = (const tree_array_list&);
+};
+
+#endif
diff --git a/libinterp/parse-tree/pt-cell.cc b/libinterp/parse-tree/pt-cell.cc
--- a/libinterp/parse-tree/pt-cell.cc
+++ b/libinterp/parse-tree/pt-cell.cc
@@ -22,27 +22,22 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
 
 #include "Cell.h"
-#include "defun.h"
-#include "error.h"
 #include "oct-obj.h"
 #include "pt-arg-list.h"
-#include "pt-bp.h"
 #include "pt-exp.h"
 #include "pt-cell.h"
 #include "pt-walk.h"
-#include "utils.h"
 #include "ov.h"
-#include "variables.h"
 
 octave_value
 tree_cell::rvalue1 (int)
 {
   octave_value retval;
 
   octave_idx_type nr = length ();
   octave_idx_type nc = -1;
@@ -102,24 +97,17 @@ tree_cell::rvalue (int nargout)
 }
 
 tree_expression *
 tree_cell::dup (symbol_table::scope_id scope,
                 symbol_table::context_id context) const
 {
   tree_cell *new_cell = new tree_cell (0, line (), column ());
 
-  for (const_iterator p = begin (); p != end (); p++)
-    {
-      const tree_argument_list *elt = *p;
-
-      new_cell->append (elt ? elt->dup (scope, context) : 0);
-    }
-
-  new_cell->copy_base (*this);
+  new_cell->copy_base (*this, scope, context);
 
   return new_cell;
 }
 
 void
 tree_cell::accept (tree_walker& tw)
 {
   tw.visit_cell (*this);
diff --git a/libinterp/parse-tree/pt-cell.h b/libinterp/parse-tree/pt-cell.h
--- a/libinterp/parse-tree/pt-cell.h
+++ b/libinterp/parse-tree/pt-cell.h
@@ -32,22 +32,23 @@ class tree_argument_list;
 class tree_walker;
 
 #include "pt-mat.h"
 #include "symtab.h"
 
 // General cells.
 
 class
-tree_cell : public tree_matrix
+tree_cell : public tree_array_list
 {
 public:
 
   tree_cell (tree_argument_list *row = 0, int l = -1, int c = -1)
-    : tree_matrix (row, l, c) { }
+    : tree_array_list (row, l, c)
+  { }
 
   ~tree_cell (void) { }
 
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue1 (int nargout = 1);
 
   octave_value_list rvalue (int);
diff --git a/libinterp/parse-tree/pt-mat.cc b/libinterp/parse-tree/pt-mat.cc
--- a/libinterp/parse-tree/pt-mat.cc
+++ b/libinterp/parse-tree/pt-mat.cc
@@ -650,58 +650,16 @@ tm_const::init (const tree_matrix& tm)
               return;
             }
         }
     }
 
   ok = ! error_state;
 }
 
-tree_matrix::~tree_matrix (void)
-{
-  while (! empty ())
-    {
-      iterator p = begin ();
-      delete *p;
-      erase (p);
-    }
-}
-
-bool
-tree_matrix::has_magic_end (void) const
-{
-  for (const_iterator p = begin (); p != end (); p++)
-    {
-      octave_quit ();
-
-      tree_argument_list *elt = *p;
-
-      if (elt && elt->has_magic_end ())
-        return true;
-    }
-
-  return false;
-}
-
-bool
-tree_matrix::all_elements_are_constant (void) const
-{
-  for (const_iterator p = begin (); p != end (); p++)
-    {
-      octave_quit ();
-
-      tree_argument_list *elt = *p;
-
-      if (! elt->all_elements_are_constant ())
-        return false;
-    }
-
-  return true;
-}
-
 octave_value_list
 tree_matrix::rvalue (int nargout)
 {
   octave_value_list retval;
 
   if (nargout > 1)
     error ("invalid number of output arguments for matrix list");
   else
@@ -1169,24 +1127,17 @@ done:
 }
 
 tree_expression *
 tree_matrix::dup (symbol_table::scope_id scope,
                   symbol_table::context_id context) const
 {
   tree_matrix *new_matrix = new tree_matrix (0, line (), column ());
 
-  for (const_iterator p = begin (); p != end (); p++)
-    {
-      const tree_argument_list *elt = *p;
-
-      new_matrix->append (elt ? elt->dup (scope, context) : 0);
-    }
-
-  new_matrix->copy_base (*this);
+  new_matrix->copy_base (*this, scope, context);
 
   return new_matrix;
 }
 
 void
 tree_matrix::accept (tree_walker& tw)
 {
   tw.visit_matrix (*this);
diff --git a/libinterp/parse-tree/pt-mat.h b/libinterp/parse-tree/pt-mat.h
--- a/libinterp/parse-tree/pt-mat.h
+++ b/libinterp/parse-tree/pt-mat.h
@@ -27,40 +27,33 @@ along with Octave; see the file COPYING.
 
 class octave_value;
 class octave_value_list;
 class tree_argument_list;
 
 class tree_walker;
 
 #include "base-list.h"
+#include "pt-array-list.h"
 #include "pt-exp.h"
 #include "symtab.h"
 
 // General matrices.  This allows us to construct matrices from
 // other matrices, variables, and functions.
 
 class
-tree_matrix : public tree_expression,
-              public octave_base_list<tree_argument_list *>
+tree_matrix : public tree_array_list
 {
 public:
 
   tree_matrix (tree_argument_list *row = 0, int l = -1, int c = -1)
-    : tree_expression (l, c)
-  {
-    if (row)
-      append (row);
-  }
+    : tree_array_list (row, l, c)
+  { }
 
-  ~tree_matrix (void);
-
-  bool has_magic_end (void) const;
-
-  bool all_elements_are_constant (void) const;
+  ~tree_matrix (void) { }
 
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue1 (int nargout = 1);
 
   octave_value_list rvalue (int nargout);
 
   tree_expression *dup (symbol_table::scope_id scope,
diff --git a/liboctave/util/base-list.h b/liboctave/util/base-list.h
--- a/liboctave/util/base-list.h
+++ b/liboctave/util/base-list.h
@@ -18,16 +18,18 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if !defined (octave_base_list_h)
 #define octave_base_list_h 1
 
+#include <cstdlib>
+
 #include <list>
 
 template <typename elt_type>
 class
 octave_base_list
 {
 public:
 
