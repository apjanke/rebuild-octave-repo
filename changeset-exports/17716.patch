# HG changeset patch
# User Doug Stewart <doug.dastew@gmail.com>
# Date 1354892613 18000
#      Fri Dec 07 10:03:33 2012 -0500
# Node ID e48f5a52e838efe1f7caceb6610c83d4d61541b0
# Parent  8dd280b64de1857c965b41db68cc6890367fb3d6
factor.m: Warn when the input is too large to calculate reliable answer.

* scripts/specfun/factor.m: After factorization, test that product of
calculated factors equals original input.  Add note to docstring about
limitation to inputs less than bitmax().  Add %!error input validation.

diff --git a/scripts/specfun/factor.m b/scripts/specfun/factor.m
--- a/scripts/specfun/factor.m
+++ b/scripts/specfun/factor.m
@@ -15,24 +15,27 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{p} =} factor (@var{q})
 ## @deftypefnx {Function File} {[@var{p}, @var{n}] =} factor (@var{q})
 ##
-## Return prime factorization of @var{q}.  That is,
+## Return the prime factorization of @var{q}.  That is,
 ## @code{prod (@var{p}) == @var{q}} and every element of @var{p} is a prime
 ## number.  If @code{@var{q} == 1}, return 1.
 ##
 ## With two output arguments, return the unique primes @var{p} and
 ## their multiplicities.  That is, @code{prod (@var{p} .^ @var{n}) ==
 ## @var{q}}.
-## @seealso{gcd, lcm}
+## 
+## Implementation Note: The input @var{q} must not be greater than
+## @code{bitmax} (9.0072e+15) in order to factor correctly.
+## @seealso{gcd, lcm, isprime}
 ## @end deftypefn
 
 ## Author: Paul Kienzle
 
 ## 2002-01-28 Paul Kienzle
 ## * remove recursion; only check existing primes for multiplicity > 1
 ## * return multiplicity as suggested by Dirk Laurie
 ## * add error handling
@@ -49,35 +52,45 @@ function [x, n] = factor (q)
 
   ## Special case of no primes less than sqrt(q).
   if (q < 4)
     x = q;
     n = 1;
     return;
   endif
 
+  q = double (q);  # For the time being, calcs rely on double precision var.
+  qorig = q;
   x = [];
   ## There is at most one prime greater than sqrt(q), and if it exists,
   ## it has multiplicity 1, so no need to consider any factors greater
   ## than sqrt(q) directly. [If there were two factors p1, p2 > sqrt(q),
   ## then q >= p1*p2 > sqrt(q)*sqrt(q) == q. Contradiction.]
   p = primes (sqrt (q));
   while (q > 1)
     ## Find prime factors in remaining q.
-    p = p (rem (q, p) == 0);
+    p = p(rem (q, p) == 0);
     if (isempty (p))
       ## Can't be reduced further, so q must itself be a prime.
       p = q;
     endif
     x = [x, p];
     ## Reduce q.
-    q = q / prod (p);
+    q /= prod (p);
   endwhile
   x = sort (x);
 
+  ## Verify algorithm was succesful
+  q = prod (x);
+  if (q != qorig)
+    error ("factor: Input Q too large to factor");
+  elseif (q > bitmax)
+    warning ("factor: Input Q too large.  Answer is unreliable");
+  endif
+
   ## Determine muliplicity.
   if (nargout > 1)
     idx = find ([0, x] != [x, 0]);
     x = x(idx(1:length (idx)-1));
     n = diff (idx);
   endif
 
 endfunction
@@ -89,8 +102,13 @@ endfunction
 %!   p = factor (i);
 %!   assert (prod (p), i);
 %!   assert (all (isprime (p)));
 %!   [p,n] = factor (i);
 %!   assert (prod (p.^n), i);
 %!   assert (all ([0,p] != [p,0]));
 %! endfor
 
+%% Test input validation
+%!error factor ()
+%!error <Q must be a scalar integer> factor ([1,2])
+%!error <Q must be a scalar integer> factor (1.5)
+
