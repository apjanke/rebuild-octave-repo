# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1553729527 0
#      Wed Mar 27 23:32:07 2019 +0000
# Node ID ab5bfee22d18af7d8fd3c30c5c68fde388a83521
# Parent  734901c8979e99b70b68bced64ad3baf92f8447c
maint: Strip trailing whitespace from source files.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -29,17 +29,17 @@ Summary of important user-visible change
   argument to print) by default.  This makes more sense for EPS
   files which are normally embedded within other documents, and is
   Matlab compatible.  If necessary use the `"-loose"` option to
   reproduce figures as they appeared in previous versions of Octave.
 
 - The following print devices are no more officially supported: cdr, corel,
   aifm, ill, cgm, hpgl, mf and dxf.  A warning will be thrown when using
   those devices and the actual code for supporting those formats will eventually
-  be removed from a future version of Octave. 
+  be removed from a future version of Octave.
 
 ### Matlab compatibility
 
 - The interpreter now supports handles to nested functions.
 
 - The graphics properties `"LineWidth"` and `"MarkerSize"` are now
   measured in points, *not* pixels.  Compared to previous versions
   of Octave, some lines and markers will appear 4/3 larger.
diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -562,17 +562,17 @@ namespace QtHandles
               currentObj = graphics_object ();
           }
 
         // Make selected axes current
         bool valid_axes = axesObj.valid_object ()
           && axesObj.get_properties ().handlevisibility_is ("on")
           && axesObj.get_properties ().get_tag () != "legend"
           && axesObj.get_properties ().get_tag () != "colorbar";
-        
+
         if (valid_axes)
           Utils::properties<figure> (figObj)
             .set_currentaxes (axesObj.get_handle ().as_octave_value ());
 
         Figure *fig = dynamic_cast<Figure *> (Backend::toolkitObject (figObj));
 
         MouseMode newMouseMode = NoMode;
 
diff --git a/libgui/graphics/ToolBarButton.cc b/libgui/graphics/ToolBarButton.cc
--- a/libgui/graphics/ToolBarButton.cc
+++ b/libgui/graphics/ToolBarButton.cc
@@ -40,29 +40,29 @@ namespace QtHandles
   {
     typename T::properties& tp = properties<T> ();
 
     action->setToolTip (Utils::fromStdString (tp.get_tooltipstring ()));
     action->setVisible (tp.is_visible ());
 
     // Get the icon data from cdata or as a named icon
     QImage img = Utils::makeImageFromCData (tp.get_cdata (), 32, 32);
-    
+
     if (img.width () == 0)
       {
         QIcon ico;
         std::string name = tp.get___named_icon__ ();
         if (! name.empty ())
           ico = octave::resource_manager::icon (QString::fromStdString (name));
 
         action->setIcon (ico);
       }
-    else   
+    else
       action->setIcon (QIcon (QPixmap::fromImage (img)));
-    
+
     if (tp.is_separator ())
       {
         m_separator = new QAction (action);
         m_separator->setSeparator (true);
         m_separator->setVisible (tp.is_visible ());
       }
     action->setEnabled (tp.is_enable ());
 
@@ -95,25 +95,24 @@ namespace QtHandles
       case T::properties::ID_TOOLTIPSTRING:
         action->setToolTip (Utils::fromStdString (tp.get_tooltipstring ()));
         break;
 
       case T::properties::ID_CDATA:
         {
           // Get the icon data from cdata or as a named icon
           QImage img = Utils::makeImageFromCData (tp.get_cdata (), 32, 32);
-          
+
           if (img.width () == 0)
             {
               QIcon ico;
               std::string name = tp.get___named_icon__ ();
               if (! name.empty ())
                 ico = octave::resource_manager::icon (QString::fromStdString (name));
               action->setIcon (ico);
-          
             }
           else
             action->setIcon (QIcon (QPixmap::fromImage (img)));
         }
         break;
 
       case T::properties::ID_SEPARATOR:
         if (tp.is_separator ())
diff --git a/libinterp/corefcn/__qp__.cc b/libinterp/corefcn/__qp__.cc
--- a/libinterp/corefcn/__qp__.cc
+++ b/libinterp/corefcn/__qp__.cc
@@ -498,17 +498,17 @@ Undocumented internal function.
   const Matrix H         (args(1).matrix_value ());
   const ColumnVector q   (args(2).vector_value ());
   const Matrix Aeq       (args(3).matrix_value ());
   const ColumnVector beq (args(4).vector_value ());
   const Matrix Ain       (args(5).matrix_value ());
   const ColumnVector bin (args(6).vector_value ());
   const int maxit        (args(7).int_value ());
   const double rtol      (args(8).double_value());
-    
+
   int iter = 0;
 
   // Copy the initial guess into the working variable
   ColumnVector x = x0;
 
   // Reordering the Lagrange multipliers
   ColumnVector lambda;
 
diff --git a/libinterp/corefcn/ft-text-renderer.cc b/libinterp/corefcn/ft-text-renderer.cc
--- a/libinterp/corefcn/ft-text-renderer.cc
+++ b/libinterp/corefcn/ft-text-renderer.cc
@@ -534,17 +534,17 @@ namespace octave
     FT_Pos m_ymin;
     FT_Pos m_ymax;
 
     // Difference between the advance and the actual extent of the latest glyph
     FT_Pos m_deltax;
 
     // Used for computing the distance between lines.
     double m_max_fontsize;
-    
+
     // Anti-aliasing.
     bool m_antialias;
 
   };
 
   void
   ft_text_renderer::set_font (const std::string& name, const std::string& weight,
                               const std::string& angle, double size)
@@ -710,20 +710,20 @@ namespace octave
   }
   bool is_opaque (const FT_GlyphSlot &glyph, const int x, const int y)
   {
     // Borrowed from https://stackoverflow.com/questions/14800827/
     //    indexing-pixels-in-a-monochrome-freetype-glyph-buffer
     int pitch = std::abs (glyph->bitmap.pitch);
     unsigned char *row = &glyph->bitmap.buffer[pitch * y];
     char cvalue = row[x >> 3];
-    
+
     return ((cvalue & (128 >> (x & 7))) != 0);
   }
-  
+
   FT_UInt
   ft_text_renderer::process_character (FT_ULong code, FT_UInt previous)
   {
     FT_Face face = font.get_face ();
     FT_UInt glyph_index = 0;
 
     if (face)
       {
@@ -793,17 +793,17 @@ namespace octave
 
                     for (int r = 0; static_cast<unsigned int> (r) < bitmap.rows; r++)
                       for (int c = 0; static_cast<unsigned int> (c) < bitmap.width; c++)
                         {
                           unsigned char pix
                             = (m_antialias
                                ? bitmap.buffer[r*bitmap.width+c]
                                : (is_opaque (face->glyph, c, r) ? 255 : 0));
-                          
+
                           if (x0+c < 0 || x0+c >= pixels.dim2 ()
                               || y0-r < 0 || y0-r >= pixels.dim3 ())
                             {
                               // ::warning ("ft_text_renderer: x %d,  y %d",
                               //            x0+c, y0-r);
                             }
                           else if (pixels(3, x0+c, y0-r).value () == 0)
                             {
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -201,20 +201,20 @@ namespace octave
           {
             if (! warned)
               {
                 warning ("opengl_texture::create: the opengl library in use "
                          "doesn't support images with either dimension larger "
                          "than %d. Not rendering.", max_size);
                 warned = true;
               }
-            
+
             return opengl_texture (glfcns);
           }
-        
+
         GLuint id;
         bool ok = true;
 
         tw = next_power_of_2 (w);
         th = next_power_of_2 (h);
 
         glfcns.glGenTextures (1, &id);
         glfcns.glBindTexture (GL_TEXTURE_2D, id);
diff --git a/libinterp/corefcn/gl-render.h b/libinterp/corefcn/gl-render.h
--- a/libinterp/corefcn/gl-render.h
+++ b/libinterp/corefcn/gl-render.h
@@ -210,17 +210,17 @@ namespace octave
   protected:
 
     opengl_functions& m_glfcns;
 
     // axis limits in model scaled coordinate
     double xmin, xmax;
     double ymin, ymax;
     double zmin, zmax;
-    
+
     // Factor used for translating Octave pixels to actual device pixels
     double m_devpixratio;
 
     // axes transformation data
     graphics_xform xform;
 
   private:
 
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -9440,17 +9440,17 @@ bool is_coplanar (const Matrix &cov)
   return ev.min () <= tol * ev.max ();
 }
 
 std::list<octave_idx_type>
 coplanar_partition (const Matrix &vert, const Matrix &idx,
                     octave_idx_type nc, octave_idx_type jj)
 {
   std::list<octave_idx_type> coplanar_ends;
-  
+
   Matrix plane_pivot = Matrix (1, 3, 0.0);
   for (octave_idx_type i = 0; i < 3; i++)
     plane_pivot(0,i) = vert(idx(0,jj)-1,i);
 
   Matrix fc = Matrix (0, 3, 0.0);  // face corner vertex coordinates
   Matrix fa = Matrix (1, 3, 0.0);  // for append face corner
   Matrix coor_cov = Matrix (3, 3, 0.0);
 
diff --git a/libinterp/corefcn/oct-stream.h b/libinterp/corefcn/oct-stream.h
--- a/libinterp/corefcn/oct-stream.h
+++ b/libinterp/corefcn/oct-stream.h
@@ -363,17 +363,17 @@ namespace octave
 
     std::string name (void) const;
 
     int mode (void) const;
 
     mach_info::float_format float_format (void) const;
 
     static std::string mode_as_string (int mode);
-    
+
     std::string encoding (void)
     {
       return rep ? rep->encoding () : std::string ();
     }
 
     std::istream * input_stream (void)
     {
       return rep ? rep->input_stream () : nullptr;
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -316,23 +316,23 @@ namespace octave
     return (fs_file1 && fs_file2
             && fs_file1.ino () == fs_file2.ino ()
             && fs_file1.dev () == fs_file2.dev ());
 
 #endif
   }
 
   // Return TRUE if NAME refers to an existing drive letter or UNC share
-  
+
   bool drive_or_unc_share (const std::string& name)
   {
 #if defined (OCTAVE_USE_WINDOWS_API)
     size_t len = name.length ();
     bool candidate = false;
-    if (len > 1 && isalpha(name[0]) && name[1]==':' 
+    if (len > 1 && isalpha(name[0]) && name[1]==':'
          && (len == 2 || (len == 3 && name[2] == '\\')))
       candidate = true;
     if (len > 4 && name[0] == '\\' && name[1] == '\\')
       {
         // It starts with two slashes.  Find the next slash.
         size_t next_slash = name.find ("\\", 3);
         if (next_slash != -1 && len > next_slash+1)
           {
@@ -365,17 +365,17 @@ namespace octave
 #else
 
     octave_unused_parameter (name);
 
     return false;
 
 #endif
   }
-  
+
   void sysdep_init (void)
   {
     // Use a function from libgomp to force loading of OpenMP library.
     // Otherwise, a dynamically loaded library making use of OpenMP such
     // as GraphicsMagick will segfault on exit (bug #41699).
 #if defined (HAVE_OMP_GET_NUM_THREADS)
     omp_get_num_threads ();
 #endif
diff --git a/libinterp/corefcn/text-renderer.h b/libinterp/corefcn/text-renderer.h
--- a/libinterp/corefcn/text-renderer.h
+++ b/libinterp/corefcn/text-renderer.h
@@ -58,17 +58,17 @@ namespace octave
     bool ok (void) const;
 
     Matrix get_extent (text_element *elt, double rotation = 0.0);
 
     Matrix get_extent (const std::string& txt, double rotation = 0.0,
                        const caseless_str& interpreter = "tex");
 
     void set_anti_aliasing (bool val);
-    
+
     void set_font (const std::string& name, const std::string& weight,
                    const std::string& angle, double size);
 
     void set_color (const Matrix& c);
 
     void text_to_pixels (const std::string& txt,
                          uint8NDArray& pxls, Matrix& bbox,
                          int halign, int valign, double rotation = 0.0,
diff --git a/scripts/optimization/qp.m b/scripts/optimization/qp.m
--- a/scripts/optimization/qp.m
+++ b/scripts/optimization/qp.m
@@ -405,17 +405,17 @@ function [x, obj, INFO, lambda] = qp (x0
         ## xbar is feasible.  We use it a starting point.
         x0 = xbar;
       endif
     else
       ## xbar is feasible.  We use it a starting point.
       x0 = xbar;
     endif
   endif
-  
+
   if (info == 0)
     ## The initial (or computed) guess is feasible.  Call the solver.
     [x, lambda, info, iter] = __qp__ (x0, H, q, A, b, Ain, bin, maxit, rtol);
   else
     iter = 0;
     x = x0;
     lambda = [];
   endif
diff --git a/scripts/plot/draw/lightangle.m b/scripts/plot/draw/lightangle.m
--- a/scripts/plot/draw/lightangle.m
+++ b/scripts/plot/draw/lightangle.m
@@ -82,17 +82,17 @@ function varargout = lightangle (varargi
 
   if (nargin == 1)
     pos = get (hl, "Position");
     [az, el] = cart2sph (pos(1), pos(2), pos(3));
     az = rad2deg (az) + 90;  # see view.m
     el = rad2deg (el);
     varargout = { az, el };
     return;
-  endif  
+  endif
 
   if (! isscalar (az) || ! isnumeric (az)
       || ! isscalar (el) || ! isnumeric (el))
     error ("lightangle: AZ and EL must be numeric scalars");
   endif
 
   if (! isempty (hl))
     hax = ancestor (hl, "axes");
@@ -108,17 +108,17 @@ function varargout = lightangle (varargi
 
   pos = get (hl, "Position");
 
   az = deg2rad (az - 90);
   el = deg2rad (el);
 
   if (strcmp (get (hl, "Style"), "local"))
     pos -= get (hax, "CameraTarget");
-  endif 
+  endif
 
   pos = sph2cart (az, el, norm (pos));
 
   if (strcmp (get (hl, "Style"), "local"))
     pos += get (hax, "CameraTarget");
   endif
 
   set (hl, "Position", pos);
@@ -156,12 +156,12 @@ endfunction
 
 ## Test input validation
 %!error <Invalid call> lightangle ()
 %!error <Invalid call> lightangle (1, 2, 3, 4)
 %!error <Invalid call> [a, b] = lightangle (45, 30)
 %!error <Invalid call> [a, b, c] = lightangle (45, 30)
 %!error <HL must be a handle to a light object> lightangle (0)
 %!error <H must be a handle to an axes or light object> lightangle (0, 90, 45)
-%!error <AZ and EL must be numeric scalars> lightangle ([1 2], 0) 
-%!error <AZ and EL must be numeric scalars> lightangle ({1}, 0) 
-%!error <AZ and EL must be numeric scalars> lightangle (0, [1 2]) 
-%!error <AZ and EL must be numeric scalars> lightangle (0, {1}) 
+%!error <AZ and EL must be numeric scalars> lightangle ([1 2], 0)
+%!error <AZ and EL must be numeric scalars> lightangle ({1}, 0)
+%!error <AZ and EL must be numeric scalars> lightangle (0, [1 2])
+%!error <AZ and EL must be numeric scalars> lightangle (0, {1})
diff --git a/scripts/plot/util/private/__add_default_menu__.m b/scripts/plot/util/private/__add_default_menu__.m
--- a/scripts/plot/util/private/__add_default_menu__.m
+++ b/scripts/plot/util/private/__add_default_menu__.m
@@ -155,17 +155,17 @@ endfunction
 function toggle_visibility_cb (hf, ~, hmenu, htb)
   menu_state = ifelse (strcmp (get (hf, "menubar"), "figure"), "on", "off");
   toolbar_state = "on";
   if (strcmp (get (hf, "toolbar"), "auto"))
     toolbar_state = menu_state;
   elseif (strcmp (get (hf, "toolbar"), "none"))
     toolbar_state = "off";
   endif
-  
+
   set (hmenu, "visible", menu_state);
   set (htb, "visible", toolbar_state);
 endfunction
 
 function open_cb (h, e)
   [filename, filedir] = uigetfile ({"*.ofig", "Octave Figure File"}, ...
                                    "Open Figure");
   if (filename != 0)
diff --git a/test/deprecate-props.tst b/test/deprecate-props.tst
--- a/test/deprecate-props.tst
+++ b/test/deprecate-props.tst
@@ -28,17 +28,17 @@
 %!      error ("Please remove '%s' from allowed values for %s property %s",
 %!             val, get (h, "type"), prop);
 %!    endif
 %!  endif
 %!endfunction
 
 ## text/uicontrol/uipanel/uibuttongroup/uitable  "oblique" value for
 ## "fontangle" property was deprecated in 5.0, remove from version 7:
-##   * remove "oblique" options in graphics.in.h, QtHandlesUtils.cc, 
+##   * remove "oblique" options in graphics.in.h, QtHandlesUtils.cc,
 ##     and ft-text-renderer.cc
 ##   * remove warnings from update_fontangle in graphics.in.h
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   ht = text ();
 %!   testprop (ht, "fontangle", "7.0", "oblique");
 %!   hui = uicontrol ();
