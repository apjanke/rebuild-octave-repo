# HG changeset patch
# User Rik <rik@octave.org>
# Date 1549557573 28800
#      Thu Feb 07 08:39:33 2019 -0800
# Node ID f2bb4f2093b9b06644a4ce1994e8d614f8bb9aae
# Parent  4b4881ff0dc9b711008909dfc53b9abb711c813f
Fix print_usage() messages in subfunctions (bug #55599).


* print_usage.m: Use different variable name "fullname", rather than
"fullpath".

* gradient.m, reducepatch.m, quantile.m: Call
print_usage ("parent_function_name") so that errors in subfunction (with no
docs) report the usage notes for the overall function.

diff --git a/scripts/general/gradient.m b/scripts/general/gradient.m
--- a/scripts/general/gradient.m
+++ b/scripts/general/gradient.m
@@ -94,17 +94,17 @@ function varargout = matrix_gradient (m,
 
   nd = ndims (m);
   sz = size (m);
   if (length (sz) > 1)
     tmp = sz(1); sz(1) = sz(2); sz(2) = tmp;
   endif
 
   if (nargin > 2 && nargin != nd + 1)
-    print_usage ();
+    print_usage ("gradient");
   endif
 
   ## cell d stores a spacing vector for each dimension
   d = cell (1, nd);
   if (nargin == 1)
     ## no spacing given - assume 1.0 for all dimensions
     for i = 1:nd
       d{i} = ones (sz(i) - 1, 1);
diff --git a/scripts/help/print_usage.m b/scripts/help/print_usage.m
--- a/scripts/help/print_usage.m
+++ b/scripts/help/print_usage.m
@@ -32,19 +32,19 @@ function print_usage (name)
   ## Handle input
   if (nargin == 0)
     ## Determine the name of the calling function
     if (numel (x) > 1)
       name = x(2).name;
     else
       error ("Octave:invalid-context", "print_usage: invalid function\n");
     endif
-    fullpath = evalin ("caller", 'mfilename ("fullpath")');
-    if (strcmp (fullpath(end-length(name)+1:end), name))
-      fullname = [fullpath ".m"];
+    fullname = evalin ("caller", 'mfilename ("fullpath")');
+    if (strcmp (fullname(end-length(name)+1:end), name))
+      fullname = [fullname ".m"];
     endif
   elseif (! ischar (name))
     error ("Octave:invalid-input-arg",
            "print_usage: input argument must be a string");
   else
     fullname = name;
   endif
 
diff --git a/scripts/plot/draw/reducepatch.m b/scripts/plot/draw/reducepatch.m
--- a/scripts/plot/draw/reducepatch.m
+++ b/scripts/plot/draw/reducepatch.m
@@ -192,17 +192,17 @@ function [faces, vertices, max_faces, pa
     if (nargin - num_string_inputs > 1 && ismatrix (varargin{2}))
       vertices = varargin{2};
       i_fv = 2;
     else
       error (["reducepatch: If first argument is a matrix containing ", ...
              "FACES, second argument must be a matrix containing VERTICES"]);
     endif
   else
-    print_usage ();
+    print_usage ("reducepatch");
   endif
 
   ## get reduction_factor
   if (nargin - num_string_inputs > i_fv)
     reduction_factor = varargin{i_fv + 1};
     if (! isscalar (reduction_factor) || reduction_factor <= 0)
       error ("reducepatch: REDUCTION_FACTOR must be a positive scalar");
     endif
diff --git a/scripts/statistics/quantile.m b/scripts/statistics/quantile.m
--- a/scripts/statistics/quantile.m
+++ b/scripts/statistics/quantile.m
@@ -401,17 +401,17 @@ endfunction
 
 ## Author: Ben Abbott <bpabbott@mac.com>
 ## Vectorized version: Jaroslav Hajek <highegg@gmail.com>
 ## Description: Quantile function of empirical samples
 
 function inv = __quantile__ (x, p, method = 5)
 
   if (nargin < 2 || nargin > 3)
-    print_usage ();
+    print_usage ("quantile");
   endif
 
   if (isinteger (x) || islogical (x))
     x = double (x);
   endif
 
   ## set shape of quantiles to column vector.
   p = p(:);
