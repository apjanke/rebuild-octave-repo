# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1453767391 18000
#      Mon Jan 25 19:16:31 2016 -0500
# Node ID e06e600f396a82512ef5a0313e1bc28e35c9d880
# Parent  538b57866b908a5f2115a54af0446fd14d91c59a
eliminate use of USE_64_BIT_IDX_T

* common.mk (do_subst_config_vals, do_subst_cross_config_vals):
Don't substitute OCTAVE_CONF_USE_64_BIT_IDX_T.
* toplev.cc (octave_config_info): Set USE_64_BIT_IDX_T from
OCTAVE_CONF_ENABLE_64.
* oct-conf.in.h (OCTAVE_CONF_USE_64_BIT_IDX_T): Delete macro.
* oct-hdf5.h, amd.cc, ccolamd.cc, colamd.cc, dmperm.cc, symbfact.cc,
ov.cc, CSparse.cc, CSparse.h, MArray-i.cc, dSparse.cc, dSparse.h,
SparseCmplxQR.h, SparseQR.h, sparse-base-chol.cc,
lo-array-errwarn.cc, lo-array-gripes.cc, oct-sparse.h, acinclude.m4,
oct-conf-post.in.h, computer.m:
Use ENABLE_64 instead of USE_64_BIT_IDX_T.

diff --git a/build-aux/common.mk b/build-aux/common.mk
--- a/build-aux/common.mk
+++ b/build-aux/common.mk
@@ -311,17 +311,16 @@ X11_INCFLAGS = @X11_INCFLAGS@
 X11_LIBS = @X11_LIBS@
 
 Z_CPPFLAGS = @Z_CPPFLAGS@
 Z_LDFLAGS = @Z_LDFLAGS@
 Z_LIBS = @Z_LIBS@
 
 # Miscellaneous
 
-USE_64_BIT_IDX_T = @USE_64_BIT_IDX_T@
 OCTAVE_IDX_TYPE = @OCTAVE_IDX_TYPE@
 
 if AMCOND_ADDRESS_SANITIZER_ENABLED
   ADDRESS_SANITIZER_OPTIONS="symbolize=1"
 endif
 
 # The arguments passed to configure.
 config_opts = @config_opts@
@@ -661,17 +660,16 @@ define do_subst_config_vals
     -e "s|%OCTAVE_CONF_SH_LD%|\"${SH_LD}\"|" \
     -e "s|%OCTAVE_CONF_SH_LDFLAGS%|\"${SH_LDFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_SONAME_FLAGS%|\"${SONAME_FLAGS}\"|" \
     -e "s|%OCTAVE_CONF_STATIC_LIBS%|\"${STATIC_LIBS}\"|" \
     -e "s|%OCTAVE_CONF_TERM_LIBS%|\"${TERM_LIBS}\"|" \
     -e "s|%OCTAVE_CONF_UMFPACK_CPPFLAGS%|\"${UMFPACK_CPPFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_UMFPACK_LDFLAGS%|\"${UMFPACK_LDFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_UMFPACK_LIBS%|\"${UMFPACK_LIBS}\"|" \
-    -e "s|%OCTAVE_CONF_USE_64_BIT_IDX_T%|\"${USE_64_BIT_IDX_T}\"|" \
     -e "s|%OCTAVE_CONF_VERSION%|\"${version}\"|" \
     -e "s|%OCTAVE_CONF_WARN_CFLAGS%|\"${WARN_CFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_WARN_CXXFLAGS%|\"${WARN_CXXFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_X11_INCFLAGS%|\"${X11_INCFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_X11_LIBS%|\"${X11_LIBS}\"|" \
     -e "s|%OCTAVE_CONF_XTRA_CFLAGS%|\"${XTRA_CFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_XTRA_CXXFLAGS%|\"${XTRA_CXXFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_YACC%|\"${YACC}\"|" \
@@ -836,17 +834,16 @@ define do_subst_cross_config_vals
     -e "s|%OCTAVE_CONF_SH_LD%|\"${SH_LD}\"|" \
     -e "s|%OCTAVE_CONF_SH_LDFLAGS%|\"${SH_LDFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_SONAME_FLAGS%|\"${SONAME_FLAGS}\"|" \
     -e "s|%OCTAVE_CONF_STATIC_LIBS%|\"${STATIC_LIBS}\"|" \
     -e "s|%OCTAVE_CONF_TERM_LIBS%|\"${TERM_LIBS}\"|" \
     -e "s|%OCTAVE_CONF_UMFPACK_CPPFLAGS%|\"${UMFPACK_CPPFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_UMFPACK_LDFLAGS%|\"${UMFPACK_LDFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_UMFPACK_LIBS%|\"${UMFPACK_LIBS}\"|" \
-    -e "s|%OCTAVE_CONF_USE_64_BIT_IDX_T%|\"${USE_64_BIT_IDX_T}\"|" \
     -e "s|%OCTAVE_CONF_VERSION%|\"${version}\"|" \
     -e "s|%OCTAVE_CONF_WARN_CFLAGS%|\"${WARN_CFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_WARN_CXXFLAGS%|\"${WARN_CXXFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_X11_INCFLAGS%|\"${X11_INCFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_X11_LIBS%|\"${X11_LIBS}\"|" \
     -e "s|%OCTAVE_CONF_XTRA_CFLAGS%|\"${XTRA_CFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_XTRA_CXXFLAGS%|\"${XTRA_CXXFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_YACC%|\"${YACC}\"|" \
diff --git a/libinterp/corefcn/oct-hdf5.h b/libinterp/corefcn/oct-hdf5.h
--- a/libinterp/corefcn/oct-hdf5.h
+++ b/libinterp/corefcn/oct-hdf5.h
@@ -26,17 +26,17 @@ along with Octave; see the file COPYING.
 #if defined (HAVE_HDF5)
 
 #if defined (HAVE_HDF5_H)
 #include <hdf5.h>
 #endif
 
 #include "oct-hdf5-types.h"
 
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
 #define H5T_NATIVE_IDX H5T_NATIVE_INT64
 #else
 #define H5T_NATIVE_IDX H5T_NATIVE_INT
 #endif
 
 #endif
 
 #endif
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -1385,17 +1385,17 @@ specified option.\n\
     { false, "SH_LD", OCTAVE_CONF_SH_LD },
     { false, "SH_LDFLAGS", OCTAVE_CONF_SH_LDFLAGS },
     { false, "SONAME_FLAGS", OCTAVE_CONF_SONAME_FLAGS },
     { false, "STATIC_LIBS", OCTAVE_CONF_STATIC_LIBS },
     { false, "TERM_LIBS", OCTAVE_CONF_TERM_LIBS },
     { false, "UMFPACK_CPPFLAGS", OCTAVE_CONF_UMFPACK_CPPFLAGS },
     { false, "UMFPACK_LDFLAGS", OCTAVE_CONF_UMFPACK_LDFLAGS },
     { false, "UMFPACK_LIBS", OCTAVE_CONF_UMFPACK_LIBS },
-    { false, "USE_64_BIT_IDX_T", OCTAVE_CONF_USE_64_BIT_IDX_T },
+    { false, "USE_64_BIT_IDX_T", OCTAVE_CONF_ENABLE_64 },
     { false, "WARN_CFLAGS", OCTAVE_CONF_WARN_CFLAGS },
     { false, "WARN_CXXFLAGS", OCTAVE_CONF_WARN_CXXFLAGS },
     { false, "X11_INCFLAGS", OCTAVE_CONF_X11_INCFLAGS },
     { false, "X11_LIBS", OCTAVE_CONF_X11_LIBS },
     { false, "XTRA_CFLAGS", OCTAVE_CONF_XTRA_CFLAGS },
     { false, "XTRA_CXXFLAGS", OCTAVE_CONF_XTRA_CXXFLAGS },
     { false, "YACC", OCTAVE_CONF_YACC },
     { false, "YFLAGS", OCTAVE_CONF_YFLAGS },
diff --git a/libinterp/dldfcn/amd.cc b/libinterp/dldfcn/amd.cc
--- a/libinterp/dldfcn/amd.cc
+++ b/libinterp/dldfcn/amd.cc
@@ -40,17 +40,17 @@ along with Octave; see the file COPYING.
 
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 #include "oct-map.h"
 
 #include "oct-sparse.h"
 #include "oct-locbuf.h"
 
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
 #define AMD_NAME(name) amd_l ## name
 #else
 #define AMD_NAME(name) amd ## name
 #endif
 
 DEFUN_DLD (amd, args, nargout,
            "-*- texinfo -*-\n\
 @deftypefn  {} {@var{p} =} amd (@var{S})\n\
diff --git a/libinterp/dldfcn/ccolamd.cc b/libinterp/dldfcn/ccolamd.cc
--- a/libinterp/dldfcn/ccolamd.cc
+++ b/libinterp/dldfcn/ccolamd.cc
@@ -39,17 +39,17 @@ along with Octave; see the file COPYING.
 #include "ov-re-mat.h"
 
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 
 #include "oct-sparse.h"
 #include "oct-locbuf.h"
 
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
 # define CCOLAMD_NAME(name) ccolamd_l ## name
 # define CSYMAMD_NAME(name) csymamd_l ## name
 #else
 # define CCOLAMD_NAME(name) ccolamd ## name
 # define CSYMAMD_NAME(name) csymamd ## name
 #endif
 
 DEFUN_DLD (ccolamd, args, nargout,
diff --git a/libinterp/dldfcn/colamd.cc b/libinterp/dldfcn/colamd.cc
--- a/libinterp/dldfcn/colamd.cc
+++ b/libinterp/dldfcn/colamd.cc
@@ -40,17 +40,17 @@ along with Octave; see the file COPYING.
 #include "ov-re-mat.h"
 
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 
 #include "oct-sparse.h"
 #include "oct-locbuf.h"
 
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
 # define COLAMD_NAME(name) colamd_l ## name
 # define SYMAMD_NAME(name) symamd_l ## name
 #else
 # define COLAMD_NAME(name) colamd ## name
 # define SYMAMD_NAME(name) symamd ## name
 #endif
 
 // The symmetric column elimination tree code take from the Davis LDL code.
diff --git a/libinterp/dldfcn/dmperm.cc b/libinterp/dldfcn/dmperm.cc
--- a/libinterp/dldfcn/dmperm.cc
+++ b/libinterp/dldfcn/dmperm.cc
@@ -32,17 +32,17 @@ along with Octave; see the file COPYING.
 #include "utils.h"
 
 #include "oct-sparse.h"
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 #include "SparseQR.h"
 #include "SparseCmplxQR.h"
 
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
 # define CXSPARSE_NAME(name) cs_dl ## name
 #else
 # define CXSPARSE_NAME(name) cs_di ## name
 #endif
 
 static RowVector
 put_int (octave_idx_type *p, octave_idx_type n)
 {
diff --git a/libinterp/dldfcn/symbfact.cc b/libinterp/dldfcn/symbfact.cc
--- a/libinterp/dldfcn/symbfact.cc
+++ b/libinterp/dldfcn/symbfact.cc
@@ -126,17 +126,17 @@ factorization as determined by @var{typ}
   SUITESPARSE_ASSIGN_FPTR2 (hypot_func, cm->hypotenuse, hypot);
 
   double dummy;
   cholmod_sparse Astore;
   cholmod_sparse *A = &Astore;
   A->packed = true;
   A->sorted = true;
   A->nz = 0;
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
   A->itype = CHOLMOD_LONG;
 #else
   A->itype = CHOLMOD_INT;
 #endif
   A->dtype = CHOLMOD_DOUBLE;
   A->stype = 1;
   A->x = &dummy;
 
diff --git a/libinterp/oct-conf.in.h b/libinterp/oct-conf.in.h
--- a/libinterp/oct-conf.in.h
+++ b/libinterp/oct-conf.in.h
@@ -601,20 +601,16 @@ along with Octave; see the file COPYING.
 #ifndef OCTAVE_CONF_UMFPACK_LDFLAGS
 #define OCTAVE_CONF_UMFPACK_LDFLAGS %OCTAVE_CONF_UMFPACK_LDFLAGS%
 #endif
 
 #ifndef OCTAVE_CONF_UMFPACK_LIBS
 #define OCTAVE_CONF_UMFPACK_LIBS %OCTAVE_CONF_UMFPACK_LIBS%
 #endif
 
-#ifndef OCTAVE_CONF_USE_64_BIT_IDX_T
-#define OCTAVE_CONF_USE_64_BIT_IDX_T %OCTAVE_CONF_USE_64_BIT_IDX_T%
-#endif
-
 #ifndef OCTAVE_CONF_WARN_CFLAGS
 #define OCTAVE_CONF_WARN_CFLAGS %OCTAVE_CONF_WARN_CFLAGS%
 #endif
 
 #ifndef OCTAVE_CONF_WARN_CXXFLAGS
 #define OCTAVE_CONF_WARN_CXXFLAGS %OCTAVE_CONF_WARN_CXXFLAGS%
 #endif
 
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -1516,17 +1516,17 @@ octave_value::is_equal (const octave_val
 }
 
 // Define the idx_type_value function here instead of in ov.h to avoid
 // needing definitions for the SIZEOF_X macros in ov.h.
 
 octave_idx_type
 octave_value::idx_type_value (bool req_int, bool frc_str_conv) const
 {
-#if defined (USE_64_BIT_IDX_T)
+#if defined (ENABLE_64)
   return int64_value (req_int, frc_str_conv);
 #else
   return int_value (req_int, frc_str_conv);
 #endif
 }
 
 Cell
 octave_value::cell_value (void) const
diff --git a/liboctave/array/CSparse.cc b/liboctave/array/CSparse.cc
--- a/liboctave/array/CSparse.cc
+++ b/liboctave/array/CSparse.cc
@@ -5596,17 +5596,17 @@ SparseComplexMatrix::fsolve (MatrixType 
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_COMPLEX;
 
@@ -5842,17 +5842,17 @@ SparseComplexMatrix::fsolve (MatrixType 
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_COMPLEX;
 
@@ -5866,17 +5866,17 @@ SparseComplexMatrix::fsolve (MatrixType 
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->p = b.cidx ();
           B->i = b.ridx ();
           B->nzmax = b.nnz ();
           B->packed = true;
           B->sorted = true;
           B->nz = 0;
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
           B->itype = CHOLMOD_LONG;
 #else
           B->itype = CHOLMOD_INT;
 #endif
           B->dtype = CHOLMOD_DOUBLE;
           B->stype = 0;
           B->xtype = CHOLMOD_REAL;
 
@@ -6136,17 +6136,17 @@ SparseComplexMatrix::fsolve (MatrixType 
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_COMPLEX;
 
@@ -6361,17 +6361,17 @@ SparseComplexMatrix::fsolve (MatrixType 
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_COMPLEX;
 
@@ -6385,17 +6385,17 @@ SparseComplexMatrix::fsolve (MatrixType 
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->p = b.cidx ();
           B->i = b.ridx ();
           B->nzmax = b.nnz ();
           B->packed = true;
           B->sorted = true;
           B->nz = 0;
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
           B->itype = CHOLMOD_LONG;
 #else
           B->itype = CHOLMOD_INT;
 #endif
           B->dtype = CHOLMOD_DOUBLE;
           B->stype = 0;
           B->xtype = CHOLMOD_COMPLEX;
 
diff --git a/liboctave/array/CSparse.h b/liboctave/array/CSparse.h
--- a/liboctave/array/CSparse.h
+++ b/liboctave/array/CSparse.h
@@ -541,15 +541,15 @@ SPARSE_SMS_BOOL_OP_DECLS (SparseComplexM
 SPARSE_SSM_CMP_OP_DECLS (Complex, SparseComplexMatrix, OCTAVE_API)
 SPARSE_SSM_BOOL_OP_DECLS (Complex, SparseComplexMatrix, OCTAVE_API)
 
 SPARSE_SMSM_CMP_OP_DECLS (SparseComplexMatrix, SparseComplexMatrix, OCTAVE_API)
 SPARSE_SMSM_BOOL_OP_DECLS (SparseComplexMatrix, SparseComplexMatrix, OCTAVE_API)
 
 SPARSE_FORWARD_DEFS (MSparse, SparseComplexMatrix, ComplexMatrix, Complex)
 
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
 #define UMFPACK_ZNAME(name) umfpack_zl_ ## name
 #else
 #define UMFPACK_ZNAME(name) umfpack_zi_ ## name
 #endif
 
 #endif
diff --git a/liboctave/array/MArray-i.cc b/liboctave/array/MArray-i.cc
--- a/liboctave/array/MArray-i.cc
+++ b/liboctave/array/MArray-i.cc
@@ -27,29 +27,29 @@ along with Octave; see the file COPYING.
 #include "oct-inttypes.h"
 
 // Instantiate MArrays of int values.
 
 #include "MArray.h"
 #include "MArray.cc"
 
 template class OCTAVE_API MArray<int>;
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
 template class OCTAVE_API MArray<int64_t>;
 #endif
 
 // Explicit instantiation, as this seems to be required by weird compilers
 // like MSVC. This should be harmless on other compilers.
 template int xmin<int> (int, int);
 template int xmax<int> (int, int);
 template long xmin<long> (long, long);
 template long xmax<long> (long, long);
 
 INSTANTIATE_MARRAY_FRIENDS (int, OCTAVE_API)
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
 INSTANTIATE_MARRAY_FRIENDS (int64_t, OCTAVE_API)
 #endif
 
 template class OCTAVE_API MArray<octave_int8>;
 template class OCTAVE_API MArray<octave_int16>;
 template class OCTAVE_API MArray<octave_int32>;
 template class OCTAVE_API MArray<octave_int64>;
 
diff --git a/liboctave/array/dSparse.cc b/liboctave/array/dSparse.cc
--- a/liboctave/array/dSparse.cc
+++ b/liboctave/array/dSparse.cc
@@ -5789,17 +5789,17 @@ SparseMatrix::fsolve (MatrixType &mattyp
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_REAL;
 
@@ -6009,17 +6009,17 @@ SparseMatrix::fsolve (MatrixType &mattyp
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_REAL;
 
@@ -6033,17 +6033,17 @@ SparseMatrix::fsolve (MatrixType &mattyp
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->p = b.cidx ();
           B->i = b.ridx ();
           B->nzmax = b.nnz ();
           B->packed = true;
           B->sorted = true;
           B->nz = 0;
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
           B->itype = CHOLMOD_LONG;
 #else
           B->itype = CHOLMOD_INT;
 #endif
           B->dtype = CHOLMOD_DOUBLE;
           B->stype = 0;
           B->xtype = CHOLMOD_REAL;
 
@@ -6274,17 +6274,17 @@ SparseMatrix::fsolve (MatrixType &mattyp
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_REAL;
 
@@ -6511,17 +6511,17 @@ SparseMatrix::fsolve (MatrixType &mattyp
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_REAL;
 
@@ -6535,17 +6535,17 @@ SparseMatrix::fsolve (MatrixType &mattyp
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->p = b.cidx ();
           B->i = b.ridx ();
           B->nzmax = b.nnz ();
           B->packed = true;
           B->sorted = true;
           B->nz = 0;
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
           B->itype = CHOLMOD_LONG;
 #else
           B->itype = CHOLMOD_INT;
 #endif
           B->dtype = CHOLMOD_DOUBLE;
           B->stype = 0;
           B->xtype = CHOLMOD_COMPLEX;
 
diff --git a/liboctave/array/dSparse.h b/liboctave/array/dSparse.h
--- a/liboctave/array/dSparse.h
+++ b/liboctave/array/dSparse.h
@@ -498,15 +498,15 @@ SPARSE_SMS_BOOL_OP_DECLS (SparseMatrix, 
 SPARSE_SSM_CMP_OP_DECLS (double, SparseMatrix, OCTAVE_API)
 SPARSE_SSM_BOOL_OP_DECLS (double, SparseMatrix, OCTAVE_API)
 
 SPARSE_SMSM_CMP_OP_DECLS (SparseMatrix, SparseMatrix, OCTAVE_API)
 SPARSE_SMSM_BOOL_OP_DECLS (SparseMatrix, SparseMatrix, OCTAVE_API)
 
 SPARSE_FORWARD_DEFS (MSparse, SparseMatrix, Matrix, double)
 
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
 #define UMFPACK_DNAME(name) umfpack_dl_ ## name
 #else
 #define UMFPACK_DNAME(name) umfpack_di_ ## name
 #endif
 
 #endif
diff --git a/liboctave/numeric/SparseCmplxQR.h b/liboctave/numeric/SparseCmplxQR.h
--- a/liboctave/numeric/SparseCmplxQR.h
+++ b/liboctave/numeric/SparseCmplxQR.h
@@ -26,17 +26,17 @@ along with Octave; see the file COPYING.
 #include <iosfwd>
 
 #include "dMatrix.h"
 #include "CMatrix.h"
 #include "dSparse.h"
 #include "CSparse.h"
 #include "oct-sparse.h"
 
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
 #define CXSPARSE_ZNAME(name) cs_cl ## name
 #else
 #define CXSPARSE_ZNAME(name) cs_ci ## name
 #endif
 
 class
 OCTAVE_API
 SparseComplexQR
diff --git a/liboctave/numeric/SparseQR.h b/liboctave/numeric/SparseQR.h
--- a/liboctave/numeric/SparseQR.h
+++ b/liboctave/numeric/SparseQR.h
@@ -26,17 +26,17 @@ along with Octave; see the file COPYING.
 #include <iosfwd>
 
 #include "dMatrix.h"
 #include "CMatrix.h"
 #include "dSparse.h"
 #include "CSparse.h"
 #include "oct-sparse.h"
 
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
 #define CXSPARSE_DNAME(name) cs_dl ## name
 #else
 #define CXSPARSE_DNAME(name) cs_di ## name
 #endif
 
 class
 OCTAVE_API
 SparseQR
diff --git a/liboctave/numeric/sparse-base-chol.cc b/liboctave/numeric/sparse-base-chol.cc
--- a/liboctave/numeric/sparse-base-chol.cc
+++ b/liboctave/numeric/sparse-base-chol.cc
@@ -127,17 +127,17 @@ sparse_base_chol<chol_type, chol_elt, p_
   ac->ncol = a_nc;
 
   ac->p = a.cidx ();
   ac->i = a.ridx ();
   ac->nzmax = a.nnz ();
   ac->packed = true;
   ac->sorted = true;
   ac->nz = 0;
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
   ac->itype = CHOLMOD_LONG;
 #else
   ac->itype = CHOLMOD_INT;
 #endif
   ac->dtype = CHOLMOD_DOUBLE;
   ac->stype = 1;
 #ifdef OCTAVE_CHOLMOD_TYPE
   ac->xtype = OCTAVE_CHOLMOD_TYPE;
diff --git a/liboctave/util/lo-array-errwarn.cc b/liboctave/util/lo-array-errwarn.cc
--- a/liboctave/util/lo-array-errwarn.cc
+++ b/liboctave/util/lo-array-errwarn.cc
@@ -167,17 +167,17 @@ public:
 
   invalid_index (const std::string& value, octave_idx_type ndim,
                  octave_idx_type dimen)
     : index_exception (value, ndim, dimen)
   { }
 
   std::string details (void) const
   {
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
     return "subscripts must be either integers 1 to (2^63)-1 or logicals";
 #else
     return "subscripts must be either integers 1 to (2^31)-1 or logicals";
 #endif
   }
 
   // ID of error to throw
   const char *err_id (void) const
diff --git a/liboctave/util/lo-array-gripes.cc b/liboctave/util/lo-array-gripes.cc
--- a/liboctave/util/lo-array-gripes.cc
+++ b/liboctave/util/lo-array-gripes.cc
@@ -111,17 +111,17 @@ public:
 
   invalid_index (const std::string& value, octave_idx_type ndim,
                  octave_idx_type dimen)
     : index_exception (value, ndim, dimen)
   { }
 
   std::string details (void) const
   {
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
     return "subscripts must be either integers 1 to (2^63)-1 or logicals";
 #else
     return "subscripts must be either integers 1 to (2^31)-1 or logicals";
 #endif
   }
 
   // ID of error to throw
   const char *err_id (void) const
diff --git a/liboctave/util/oct-sparse.h b/liboctave/util/oct-sparse.h
--- a/liboctave/util/oct-sparse.h
+++ b/liboctave/util/oct-sparse.h
@@ -82,17 +82,17 @@ along with Octave; see the file COPYING.
 #elif defined (HAVE_CS_H)
 #include <cs.h>
 #endif
 
 #if (defined (HAVE_SUITESPARSE_CHOLMOD_H) \
      || defined (HAVE_UFSPARSE_CHOLMOD_H) \
      || defined (HAVE_CHOLMOD_CHOLMOD_H) \
      || defined (HAVE_CHOLMOD_H))
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
 #define CHOLMOD_NAME(name) cholmod_l_ ## name
 #else
 #define CHOLMOD_NAME(name) cholmod_ ## name
 #endif
 #endif
 
 // Cope with new suitesparse versions
 //
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -1225,17 +1225,17 @@ AC_DEFUN([OCTAVE_CHECK_SIZEOF_FORTRAN_IN
       [mv conftest.$ac_objext fintsize.$ac_objext
       ac_octave_save_LIBS="$LIBS"
       LIBS="fintsize.$ac_objext $[]_AC_LANG_PREFIX[]LIBS"
       AC_LANG_PUSH(C)
       AC_RUN_IFELSE([AC_LANG_PROGRAM([[
           #include <assert.h>
           #include <stdint.h>
           ]], [[
-          #ifdef USE_64_BIT_IDX_T
+          #ifdef ENABLE_64
             typedef int64_t octave_idx_type;
           #else
             typedef int octave_idx_type;
           #endif
           octave_idx_type n = 2;
           octave_idx_type in[2];
           octave_idx_type out[2];
           in[0] = 13;
@@ -2402,17 +2402,17 @@ AC_DEFUN([OCTAVE_UMFPACK_SEPARATE_SPLIT]
         # include <suitesparse/umfpack.h>
         #elif defined (HAVE_UFSPARSE_UMFPACK_H)
         # include <ufsparse/umfpack.h>
         #elif defined (HAVE_UMFPACK_UMFPACK_H)
         # include <umfpack/umfpack.h>
         #elif defined (HAVE_UMFPACK_H)
         # include <umfpack.h>
         #endif
-        #ifdef USE_64_BIT_IDX_T
+        #ifdef ENABLE_64
         typedef uint64_t idx_type;
         #define UMFPACK_NAME(name) umfpack_zl_ ## name
         #else
         typedef int idx_type;
         #define UMFPACK_NAME(name) umfpack_zi_ ## name
         #endif
         idx_type n = 5;
         idx_type Ap[] = {0, 2, 5, 9, 10, 12};
diff --git a/oct-conf-post.in.h b/oct-conf-post.in.h
--- a/oct-conf-post.in.h
+++ b/oct-conf-post.in.h
@@ -102,17 +102,17 @@ typedef unsigned long ino_t;
 #if defined (_UNICOS)
 #define F77_USES_CRAY_CALLING_CONVENTION
 #endif
 
 #if 0
 #define F77_USES_VISUAL_FORTRAN_CALLING_CONVENTION
 #endif
 
-#ifdef USE_64_BIT_IDX_T
+#if defined (ENABLE_64)
 #define SIZEOF_OCTAVE_IDX_TYPE SIZEOF_INT64_T
 #else
 #define SIZEOF_OCTAVE_IDX_TYPE SIZEOF_INT
 #endif
 
 /* To be able to use long doubles for 64-bit mixed arithmetics, we need
    them at least 80 bits wide and we need roundl declared in math.h.
    FIXME: Maybe substitute this by a more precise check in the future?  */
diff --git a/scripts/miscellaneous/computer.m b/scripts/miscellaneous/computer.m
--- a/scripts/miscellaneous/computer.m
+++ b/scripts/miscellaneous/computer.m
@@ -66,17 +66,17 @@ function [c, maxsize, endian] = computer
       msg = "Hi Dave, I'm a HAL-9000";
     endif
 
     if (nargout == 0)
       disp (msg);
     else
       c = msg;
       if (isargout (2))
-        if (strcmp (octave_config_info ("USE_64_BIT_IDX_T"), "true"))
+        if (strcmp (octave_config_info ("ENABLE_64"), "true"))
           maxsize = 2^63-1;
         else
           maxsize = 2^31-1;
         endif
       endif
       if (isargout (3))
         if (octave_config_info ("words_big_endian"))
           endian = "B";
