# HG changeset patch
# User jwe
# Date 1155881213 0
#      Fri Aug 18 06:06:53 2006 +0000
# Node ID 5a3a716c257d2ced924ba5eea7a29676681d71bf
# Parent  0c8ac963ae6928c4c9709e9c5a9ddefdfc03683b
[project @ 2006-08-18 06:06:53 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2006-08-18  John W. Eaton  <jwe@octave.org>
+
+	* load-save.h (enum load_save_format): New element, LS_MAT_ASCII_LONG.
+	* load-save.cc (Fload, Fsave): Make -ascii Matlab compatible.
+	(do_save): Handle LS_MAT_ASCII.
+	* ls-mat-ascii.cc (save_mat_ascii_data): New function.
+	* ls-mat-ascii.h: Provide decl.
+
 2006-08-17  John W. Eaton  <jwe@octave.org>
 
 	* ls-mat5.cc (save_mat5_element_length): Correctly compute element
 	length for character data.  Handle N-d character data
 	(save_mat5_binary_element): Handle N-d character data.
 
 2006-08-16  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -644,22 +644,20 @@ Valid options for @code{load} are listed
 \n\
 @table @code\n\
 @item -force\n\
 The @samp{-force} option is accepted but ignored for backward\n\
 compatiability. Octave now overwrites variables currently in memory with\n\
 the same name as those found in the file.\n\
 \n\
 @item -ascii\n\
-Force Octave to assume the file is in Octave's text format.\n\
-\n\
-@strong{WARNING: the meaning of this option will change in a future\n\
-version of Octave to be compatible with @sc{Matlab}.  To keep the\n\
-meaning of your code the same across this change, use the @code{-text}\n\
-option instead.}\n\
+Force Octave to assume the file contains columns of numbers in text format\n\
+without any header or other information.  Data in the file will be loaded\n\
+as a single numeric matrix with the name of the variable derived from the\n\
+name of the file.\n\
 \n\
 @item -binary\n\
 Force Octave to assume the file is in Octave's binary format.\n\
 \n\
 @item -mat\n\
 @itemx -mat-binary\n\
 @itemx -6\n\
 @itemx -v6\n\
@@ -727,22 +725,17 @@ Force Octave to assume the file is in Oc
 	  list_only = true;
 	}
       else if (argv[i] == "-verbose" || argv[i] == "-v")
 	{
 	  verbose = true;
 	}
       else if (argv[i] == "-ascii" || argv[i] == "-a")
 	{
-	  warning ("the meaning of this option will change in a future");
-	  warning ("version of Octave to be compatible with Matlab.");
-	  warning ("To keep the meaning of your code the same across");
-	  warning ("this change, use the -text option instead.");
-
-	  format = LS_ASCII;
+	  format = LS_MAT_ASCII;
 	}
       else if (argv[i] == "-binary" || argv[i] == "-b")
 	{
 	  format = LS_BINARY;
 	}
       else if (argv[i] == "-mat-binary" || argv[i] == "-mat" || argv[i] == "-m"
 	       || argv[i] == "-6" || argv[i] == "-v6")
 	{
@@ -1002,16 +995,22 @@ do_save (std::ostream& os, const octave_
     case LS_ASCII:
       save_ascii_data (os, tc, name, infnan_warned, false, global, 0);
       break;
 
     case LS_BINARY:
       save_binary_data (os, tc, name, help, global, save_as_floats);
       break;
 
+    case LS_MAT_ASCII:
+    case LS_MAT_ASCII_LONG:
+      if (! save_mat_ascii_data (os, tc, fmt == LS_MAT_ASCII ? 8 : 16))
+	warning ("save: unable to save %s in ASCII format", name.c_str ());
+      break;
+
     case LS_MAT_BINARY:
       save_mat_binary_data (os, tc, name);
       break;
 
 #ifdef HAVE_HDF5
     case LS_HDF5:
       save_hdf5_data (os, tc, name, help, global, save_as_floats);
       break;
@@ -1091,22 +1090,17 @@ parse_save_options (const string_vector 
   for (i = start_arg; i < argc; i++)
     {
       if (argv[i] == "-append")
 	{
 	  append = true;
 	}
       else if (argv[i] == "-ascii" || argv[i] == "-a")
 	{
-	  warning ("the meaning of this option will change in a future");
-	  warning ("version of Octave to be compatible with Matlab.");
-	  warning ("To keep the meaning of your code the same across");
-	  warning ("this change, use the -text option instead.");
-
-	  format = LS_ASCII;
+	  format = LS_MAT_ASCII;
 	}
       else if (argv[i] == "-text" || argv[i] == "-t")
 	{
 	  format = LS_ASCII;
 	}
       else if (argv[i] == "-binary" || argv[i] == "-b")
 	{
 	  format = LS_BINARY;
@@ -1456,22 +1450,17 @@ save (\"-text\", \"file.txt\", \"a\")\n\
 @end example\n\
 \n\
 @noindent\n\
 then the @var{options}, @var{file}, and variable name arguments\n\
 (@var{vname1}, @dots{}) must be specified as character strings.\n\
 \n\
 @table @code\n\
 @item -ascii\n\
-Save the data in Octave's text data format.\n\
-\n\
-@strong{WARNING: the meaning of this option will change in a future\n\
-version of Octave to be compatible with @sc{Matlab}.  To keep the\n\
-meaning of your code the same across this change, use the @code{-text}\n\
-option instead.}\n\
+Save a single matrix in a text file.\n\
 \n\
 @item -binary\n\
 Save the data in Octave's binary data format.\n\
 \n\
 @item -float-binary\n\
 Save the data in Octave's binary data format but only using single\n\
 precision.  You should use this format only if you know that all the\n\
 values to be saved can be represented in single precision.\n\
diff --git a/src/load-save.h b/src/load-save.h
--- a/src/load-save.h
+++ b/src/load-save.h
@@ -30,16 +30,17 @@ 02110-1301, USA.
 
 class octave_value;
 
 enum load_save_format
   {
     LS_ASCII,
     LS_BINARY,
     LS_MAT_ASCII,
+    LS_MAT_ASCII_LONG,
     LS_MAT_BINARY,
     LS_MAT5_BINARY,
     LS_MAT7_BINARY,
 #ifdef HAVE_HDF5
     LS_HDF5,
 #endif /* HAVE_HDF5 */
     LS_UNKNOWN
   };
diff --git a/src/ls-mat-ascii.cc b/src/ls-mat-ascii.cc
--- a/src/ls-mat-ascii.cc
+++ b/src/ls-mat-ascii.cc
@@ -323,14 +323,42 @@ read_mat_ascii_data (std::istream& is, c
     }
   else
     error ("load: unable to convert filename `%s' to valid identifier",
 	   filename.c_str ());
 
   return retval;
 }
 
+bool
+save_mat_ascii_data (std::ostream& os, const octave_value& val,
+		     int precision)
+{
+  bool success = true;
+
+  long old_precision = os.precision ();
+  os.precision (precision);
+
+  if (val.is_complex_type ())
+    warning ("save: omitting imaginary part for ASCII file");
+
+  Matrix m = val.matrix_value (true);
+
+  if (error_state)
+    {
+      success = false;
+
+      error_state = 0;
+    }
+  else
+    os << m;
+
+  os.precision (old_precision);
+
+  return (os && success);
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
 
diff --git a/src/ls-mat-ascii.h b/src/ls-mat-ascii.h
--- a/src/ls-mat-ascii.h
+++ b/src/ls-mat-ascii.h
@@ -23,16 +23,20 @@ 02110-1301, USA.
 
 #if !defined (octave_ls_mat_ascii_h)
 #define octave_ls_mat_ascii_h 1
 
 extern std::string
 read_mat_ascii_data (std::istream& is, const std::string& filename,
 		     octave_value& tc);
 
+extern bool
+save_mat_ascii_data (std::ostream& os, const octave_value& val_arg,
+		     int precision);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
 
