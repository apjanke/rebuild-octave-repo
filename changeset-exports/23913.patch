# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1502739708 14400
#      Mon Aug 14 15:41:48 2017 -0400
# Node ID 062ce545b21e573a36983ecb0d34a22d21b9e3f8
# Parent  21c2fabd6ed28708ca79e5a626fe4df2960c9ed5
mark octave_value from octave_value_list constructor explicit

* ov.h (octave_value (const octave_value_list&)): Tag with explicit.

* graphics.cc (get_property_from_handle): Return single octave_value,
not octave_value_list packaged as octave_value.

* pt-eval.cc (tree_evaluator::echo): Return octave_value(), not ovl().

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -11607,17 +11607,17 @@ get_property_from_handle (double handle,
 {
   gh_manager::auto_lock guard;
 
   graphics_object go = gh_manager::get_object (handle);
 
   if (! go)
     error ("%s: invalid handle (= %g)", func.c_str (), handle);
 
-  return ovl (go.get (caseless_str (property)));
+  return go.get (caseless_str (property));
 }
 
 bool
 set_property_in_handle (double handle, const std::string& property,
                         const octave_value& arg, const std::string& func)
 {
   gh_manager::auto_lock guard;
 
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -284,17 +284,19 @@ public:
   octave_value (const octave_map& m, const std::string& id,
                 const std::list<std::string>& plist);
   octave_value (const octave_scalar_map& m, const std::string& id,
                 const std::list<std::string>& plist);
 
   OCTAVE_DEPRECATED (4.4, "note: second argument is always ignored; use octave_value (const octave_value_list&) instead")
   octave_value (const octave_value_list& m, bool);
 
-  octave_value (const octave_value_list& m);
+  // This one is explicit because it can cause some trouble to
+  // accidentally create a cs-list when one was not intended.
+  explicit octave_value (const octave_value_list& m);
 
   octave_value (octave_value::magic_colon);
 
   octave_value (octave_base_value *new_rep, bool borrow = false);
 
   // Copy constructor.
 
   octave_value (const octave_value& a)
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -3097,17 +3097,17 @@ namespace octave
       default:
         print_usage ();
         break;
       }
 
     if (cleanup_pushed)
       maybe_set_echo_state ();
 
-    return ovl ();
+    return octave_value ();
   }
 
   octave_value
   tree_evaluator::PS4 (const octave_value_list& args, int nargout)
   {
     return set_internal_variable (m_PS4, args, nargout, "PS4");
   }
 
