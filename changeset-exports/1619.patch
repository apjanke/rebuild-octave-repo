# HG changeset patch
# User jwe
# Date 815483241 0
#      Sat Nov 04 11:07:21 1995 +0000
# Node ID 1a35c8c913497d65aa47caa94c75b8a80baf4b3b
# Parent  9c1fca4bd859707e979f1263a13f9ad75e5e8377
[project @ 1995-11-04 11:07:21 by jwe]

diff --git a/liboctave/Array-idx.h b/liboctave/Array-idx.h
--- a/liboctave/Array-idx.h
+++ b/liboctave/Array-idx.h
@@ -16,16 +16,17 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
+#include "error.h"
 #include "idx-vector.h"
 #include "lo-error.h"
 
 #if defined (OCTAVE_SOURCE)
 extern int& dfi_flag;
 extern int& pcv_flag;
 extern int& pzo_flag;
 extern int& rre_flag;
@@ -33,38 +34,43 @@ extern int& rre_flag;
 extern int dfi_flag;
 extern int pcv_flag;
 extern int pzo_flag;
 extern int rre_flag;
 #endif
 
 template <class T>
 void
-ArrayRep<T>::clear_index (void)
+Array<T>::clear_index (void)
 {
+  cerr << "clearing index for " << this << "\n";
+
   delete [] idx;
   idx = 0;
   idx_count = 0;
 }
 
 template <class T>
 void
-ArrayRep<T>::set_index (const idx_vector& i)
+Array<T>::set_index (const idx_vector& i)
 {
+  cerr << "setting index for " << this << "\n";
+
   if (! idx)
     idx = new idx_vector [max_indices];
 
   if (idx_count < max_indices)
     {
       idx[idx_count++] = i;
     }
   else
     {
       (*current_liboctave_error_handler)
 	("invalid number of indices specified");
+
       clear_index ();
     }
 }
 
 template <class T>
 Array<T>
 Array<T>::value (void)
 {
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -44,53 +44,33 @@ Software Foundation, 59 Temple Place - S
 
 // The real representation of all arrays.
 
 template <class T>
 ArrayRep<T>::ArrayRep (int n)
 {
   len = n;
   data = new T [len];
-
-#ifdef HEAVYWEIGHT_INDEXING
-  idx = 0;
-  max_indices = 0;
-  idx_count = 0;
-#endif
 }
 
 template <class T>
 ArrayRep<T>::ArrayRep (const ArrayRep<T>& a)
 {
   len = a.len;
   count = a.count;
 
   data = new T [len];
   for (int i = 0; i < len; i++)
     data[i] = a.data[i];
-
-#ifdef HEAVYWEIGHT_INDEXING
-  max_indices = a.max_indices;
-  idx_count = a.idx_count;
-  if (a.idx)
-    {
-      idx_vector *idx = new idx_vector [max_indices];
-      for (int i = 0; i < max_indices; i++)
-	idx[i] = a.idx[i];
-    }
-  else
-    idx = 0;
-#endif
 }
 
 template <class T>
 ArrayRep<T>::~ArrayRep (void)
 {
   delete [] data;
-  delete [] idx;
 }
 
 template <class T>
 T&
 ArrayRep<T>::elem (int n)
 {
   return data[n];
 }
@@ -104,33 +84,59 @@ ArrayRep<T>::elem (int n) const
 
 // One dimensional array class.  Handles the reference counting for
 // all the derived classes.
 
 template <class T>
 Array<T>::Array (int n, const T& val)
 {
   rep = new ArrayRep<T> (n);
+
   rep->count = 1;
+
   for (int i = 0; i < n; i++)
     rep->data[i] = val;
+
+#ifdef HEAVYWEIGHT_INDEXING
+  max_indices = 1;
+  idx_count = 0;
+  idx = 0;
+#endif
+}
+
+template <class T>
+Array<T>::~Array (void)
+{
+  if (--rep->count <= 0)
+    delete rep;
+
+#ifdef HEAVYWEIGHT_INDEXING
+  delete [] idx;
+#endif
 }
 
 template <class T>
 Array<T>&
 Array<T>::operator = (const Array<T>& a)
 {
   if (this != &a)
     {
       if (--rep->count <= 0)
 	delete rep;
 
       rep = a.rep;
       rep->count++;
     }
+
+#ifdef HEAVYWEIGHT_INDEXING
+  max_indices = 1;
+  idx_count = 0;
+  idx = 0;
+#endif
+
   return *this;
 }
 
 template <class T>
 T&
 Array<T>::checkelem (int n)
 {
   if (n < 0 || n >= rep->length ())
@@ -185,18 +191,16 @@ Array<T>::resize (int n)
 
   ArrayRep<T> *old_rep = rep;
   const T *old_data = data ();
   int old_len = length ();
 
   rep = new ArrayRep<T> (n);
   rep->count = 1;
 
-  SET_MAX_INDICES (1);
-
   if (old_data && old_len > 0)
     {
       int min_len = old_len < n ? old_len : n;
 
       for (int i = 0; i < min_len; i++)
 	xelem (i) = old_data[i];
     }
 
@@ -219,18 +223,16 @@ Array<T>::resize (int n, const T& val)
 
   ArrayRep<T> *old_rep = rep;
   const T *old_data = data ();
   int old_len = length ();
 
   rep = new ArrayRep<T> (n);
   rep->count = 1;
 
-  SET_MAX_INDICES (1);
-
   int min_len = old_len < n ? old_len : n;
 
   if (old_data && old_len > 0)
     {
       for (int i = 0; i < min_len; i++)
 	xelem (i) = old_data[i];
     }
 
@@ -322,18 +324,16 @@ Array2<T>::resize (int r, int c)
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_len = length ();
 
   rep = new ArrayRep<T> (r*c);
   rep->count = 1;
 
-  SET_MAX_INDICES (2);
-
   d1 = r;
   d2 = c;
 
   if (old_data && old_len > 0)
     {
       int min_r = old_d1 < r ? old_d1 : r;
       int min_c = old_d2 < c ? old_d2 : c;
 
@@ -363,18 +363,16 @@ Array2<T>::resize (int r, int c, const T
   const T *old_data = data ();
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_len = length ();
 
   rep = new ArrayRep<T> (r*c);
   rep->count = 1;
 
-  SET_MAX_INDICES (2);
-
   d1 = r;
   d2 = c;
 
   int min_r = old_d1 < r ? old_d1 : r;
   int min_c = old_d2 < c ? old_d2 : c;
 
   if (old_data && old_len > 0)
     {
@@ -578,18 +576,16 @@ DiagArray<T>::resize (int r, int c)
   const T *old_data = data ();
   int old_len = length ();
 
   int new_len = r < c ? r : c;
 
   rep = new ArrayRep<T> (new_len);
   rep->count = 1;
 
-  SET_MAX_INDICES (2);
-
   nr = r;
   nc = c;
 
   if (old_data && old_len > 0)
     {
       int min_len = old_len < new_len ? old_len : new_len;
 
       for (int i = 0; i < min_len; i++)
@@ -617,18 +613,16 @@ DiagArray<T>::resize (int r, int c, cons
   const T *old_data = data ();
   int old_len = length ();
 
   int new_len = r < c ? r : c;
 
   rep = new ArrayRep<T> (new_len);
   rep->count = 1;
 
-  SET_MAX_INDICES (2);
-
   nr = r;
   nc = c;
 
   int min_len = old_len < new_len ? old_len : new_len;
 
   if (old_data && old_len > 0)
     {
       for (int i = 0; i < min_len; i++)
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -42,22 +42,16 @@ template <class T> class ArrayRep;
 template <class T> class Array;
 template <class T> class Array2;
 template <class T> class Array3;
 
 #ifndef NO_DIAG_ARRAY
 template <class T> class DiagArray;
 #endif
 
-#ifdef HEAVYWEIGHT_INDEXING
-#define SET_MAX_INDICES(n) set_max_indices (n)
-#else
-#define SET_MAX_INDICES(n)
-#endif
-
 // The real representation of all arrays.
 
 template <class T>
 class ArrayRep
 {
   // Rethink resize()?
 
   friend class Array<T>;
@@ -69,121 +63,116 @@ class ArrayRep
 #endif
 
 private:
 
   T *data;
   int count;
   int len;
 
-#ifdef HEAVYWEIGHT_INDEXING
-  idx_vector *idx;
-  int max_indices;
-  int idx_count;
-#endif
-
 protected:
 
   ArrayRep (T *d, int l)
     {
       data = d;
       len = l;
-
-#ifdef HEAVYWEIGHT_INDEXING
-      idx = 0;
-      max_indices = 0;
-      idx_count = 0;
-#endif
     }
 
 public:
 
   ArrayRep (void)
     {
       data = 0;
       len = 0;
-
-#ifdef HEAVYWEIGHT_INDEXING
-      idx = 0;
-      max_indices = 0;
-      idx_count = 0;
-#endif
     }
 
   ArrayRep (int n);
 
   ArrayRep (const ArrayRep<T>& a);
 
   ~ArrayRep (void);
 
   int length (void) const { return len; }
 
   T& elem (int n);
 
   T elem (int n) const;
-
-#ifdef HEAVYWEIGHT_INDEXING
-  void set_max_indices (int mi) { max_indices = mi; }
-
-  void clear_index (void);
-
-  void set_index (const idx_vector& i);
-
-  int index_count (void) const { return idx_count; }
-
-  idx_vector *get_idx (void) const { return idx; }
-#endif
 };
 
 // One dimensional array class.  Handles the reference counting for
 // all the derived classes.
 
 template <class T>
 class Array
 {
+private:
+
+#ifdef HEAVYWEIGHT_INDEXING
+  idx_vector *idx;
+  int max_indices;
+  int idx_count;
+#endif
+
 protected:
 
   ArrayRep<T> *rep;
 
   Array (T *d, int l)
     {
       rep = new ArrayRep<T> (d, l);
       rep->count = 1;
-      set_max_indices (1);
+
+#ifdef HEAVYWEIGHT_INDEXING
+      idx = 0;
+      max_indices = 1;
+      idx_count = 0;
+#endif
     }
 
 public:
 
   Array (void)
     {
       rep = new ArrayRep<T> ();
       rep->count = 1;
-      set_max_indices (1);
+
+#ifdef HEAVYWEIGHT_INDEXING
+      idx = 0;
+      max_indices = 1;
+      idx_count = 0;
+#endif
     }
 
   Array (int n)
     {
       rep = new ArrayRep<T> (n);
       rep->count = 1;
-      set_max_indices (1);
+
+#ifdef HEAVYWEIGHT_INDEXING
+      idx = 0;
+      max_indices = 1;
+      idx_count = 0;
+#endif
     }
 
   Array (int n, const T& val);
 
   Array (const Array<T>& a)
     {
       rep = a.rep;
       rep->count++;
+
+#ifdef HEAVYWEIGHT_INDEXING
+      max_indices = a.max_indices;
+      idx_count = 0;
+      idx = 0;
+#endif
     }
 
-  ~Array (void)
-    {
-      if (--rep->count <= 0)
-	delete rep;
-    }
+  ~Array (void);
 
   Array<T>& operator = (const Array<T>& a);
 
   int capacity (void) const { return rep->length (); }
   int length (void) const { return rep->length (); }
 
   T& elem (int n)
     {
@@ -210,25 +199,25 @@ public:
   void resize (int n);
   void resize (int n, const T& val);
 
   const T *data (void) const { return rep->data; }
 
   T *fortran_vec (void);
 
 #ifdef HEAVYWEIGHT_INDEXING
-  void set_max_indices (int mi) { rep->set_max_indices (mi); }
+  void set_max_indices (int mi) { max_indices = mi; }
 
-  void clear_index (void) { rep->clear_index (); }
+  void clear_index (void);
 
-  void set_index (const idx_vector& i) { rep->set_index (i); }
+  void set_index (const idx_vector& i);
 
-  int index_count (void) const { return rep->index_count (); }
+  int index_count (void) const { return idx_count; }
 
-  idx_vector *get_idx (void) const { return rep->get_idx (); }
+  idx_vector *get_idx (void) const { return idx; }
 
   void maybe_delete_elements (idx_vector& i);
 
   Array<T> value (void);
 #endif
 };
 
 template <class LT, class RT>
