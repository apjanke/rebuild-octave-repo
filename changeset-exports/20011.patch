# HG changeset patch
# User John Donoghue
# Date 1427918435 14400
#      Wed Apr 01 16:00:35 2015 -0400
# Node ID 2535b9ffa2fc4973537091f6df53d84c336f1406
# Parent  b08c13ed4a8c96822cd6530df76e135f10f767aa
Qt EditControl: do callback always on return pressed (Bug #44690)

* libgui/graphics/TextEdit.h
  (returnPressed): new signal

* libgui/graphics/TextEdit.cpp
  (TextEdit::keyPressEvent): emit returnPressed instread of editingFinished

* libgui/graphics/EditControl.cc
  (EditControl::returnPressed): new function
  (EditControl::EditControl): connect edit control returnPressed to our returnPressed.

diff --git a/libgui/graphics/EditControl.cc b/libgui/graphics/EditControl.cc
--- a/libgui/graphics/EditControl.cc
+++ b/libgui/graphics/EditControl.cc
@@ -77,16 +77,18 @@ EditControl::init (QLineEdit* edit, bool
   edit->setText (Utils::fromStdString (up.get_string_string ()));
   edit->setAlignment (Utils::fromHVAlign (up.get_horizontalalignment (),
                                           up.get_verticalalignment ()));
 
   connect (edit, SIGNAL (textEdited (const QString&)),
            SLOT (textChanged (void)));
   connect (edit, SIGNAL (editingFinished (void)),
            SLOT (editingFinished (void)));
+  connect (edit, SIGNAL (returnPressed (void)),
+           SLOT (returnPressed (void)));
 }
 
 EditControl::EditControl (const graphics_object& go, TextEdit* edit)
   : BaseControl (go, edit), m_multiLine (true), m_textChanged (false)
 {
   init (edit);
 }
 
@@ -104,16 +106,18 @@ EditControl::init (TextEdit* edit, bool 
   edit->setAcceptRichText (false);
   // FIXME: support string_vector
   edit->setPlainText (Utils::fromStdString (up.get_string_string ()));
 
   connect (edit, SIGNAL (textChanged (void)),
            SLOT (textChanged (void)));
   connect (edit, SIGNAL (editingFinished (void)),
            SLOT (editingFinished (void)));
+  connect (edit, SIGNAL (returnPressed (void)),
+           SLOT (returnPressed (void)));
 }
 
 EditControl::~EditControl (void)
 {
 }
 
 void
 EditControl::initCommon (QWidget*)
@@ -209,16 +213,34 @@ EditControl::updateMultiLine (int pId)
 }
 
 void
 EditControl::textChanged (void)
 {
   m_textChanged = true;
 }
 
+void 
+EditControl::returnPressed (void)
+{
+  QString txt = (m_multiLine
+                 ? qWidget<TextEdit> ()->toPlainText ()
+                 : qWidget<QLineEdit> ()->text ());
+
+  if (m_textChanged)
+    {
+      gh_manager::post_set (m_handle, "string", Utils::toStdString (txt), false);
+
+      m_textChanged = false;
+    }
+
+  if (txt.length () > 0)
+    gh_manager::post_callback (m_handle, "callback");
+}
+
 void
 EditControl::editingFinished (void)
 {
   if (m_textChanged)
     {
       QString txt = (m_multiLine
                      ? qWidget<TextEdit> ()->toPlainText ()
                      : qWidget<QLineEdit> ()->text ());
diff --git a/libgui/graphics/EditControl.h b/libgui/graphics/EditControl.h
--- a/libgui/graphics/EditControl.h
+++ b/libgui/graphics/EditControl.h
@@ -52,16 +52,17 @@ private:
   void init (TextEdit* edit, bool callBase = false);
   void initCommon (QWidget* widget);
   bool updateSingleLine (int pId);
   bool updateMultiLine (int pId);
 
 private slots:
   void textChanged (void);
   void editingFinished (void);
+  void returnPressed (void);
 
 private:
   bool m_multiLine;
   bool m_textChanged;
 };
 
 }; // namespace QtHandles
 
diff --git a/libgui/graphics/TextEdit.cc b/libgui/graphics/TextEdit.cc
--- a/libgui/graphics/TextEdit.cc
+++ b/libgui/graphics/TextEdit.cc
@@ -42,12 +42,12 @@ TextEdit::focusOutEvent (QFocusEvent* xe
 void
 TextEdit::keyPressEvent (QKeyEvent* xevent)
 {
   QTextEdit::keyPressEvent (xevent);
 
   if ((xevent->key () == Qt::Key_Return
        || xevent->key () == Qt::Key_Enter)
       && xevent->modifiers () == Qt::ControlModifier)
-    emit editingFinished ();
+    emit returnPressed ();
 }
 
 }; // namespace QtHandles
diff --git a/libgui/graphics/TextEdit.h b/libgui/graphics/TextEdit.h
--- a/libgui/graphics/TextEdit.h
+++ b/libgui/graphics/TextEdit.h
@@ -33,16 +33,17 @@ class TextEdit : public QTextEdit
   Q_OBJECT
 
 public:
   TextEdit (QWidget* xparent) : QTextEdit(xparent) { }
   ~TextEdit (void) { }
 
 signals:
   void editingFinished (void);
+  void returnPressed (void);
 
 protected:
   void focusOutEvent (QFocusEvent* event);
   void keyPressEvent (QKeyEvent* event);
 };
 
 }; // namespace QtHandles
 
