# HG changeset patch
# User Andreas Weber <andy.weber.aw@gmail.com>
# Date 1408389939 -7200
#      Mon Aug 18 21:25:39 2014 +0200
# Node ID 0ee9daa71273a454e65dbcb004d7b8a8477e50c1
# Parent  f27140dd13a6d4d21da6d44c18ebefc969e720a8
Fix axes property "currentpoint" for FLTK, extend documentation

* plot.txi: Modify documentation for axes property currentpoint

* __init_fltk__.cc: Add implementation of currentpoint for 3D plots
  and fix arrangement of x and y coordinates.

* __fltk_ginput__.m: Fix x and y index of currentpoint to reflect
  bugfix in __init_fltk__.cc

diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -1666,20 +1666,24 @@ Either @qcode{"manual"} or @qcode{"auto"
 
 @item color
 
 @item colororder
 
 @item createfcn
 
 @item currentpoint
-Holds the coordinates of the point over which the mouse pointer was when
-the mouse button was pressed.  If a mouse callback function is defined,
-@qcode{"currentpoint"} holds the coordinates of the point over which the
-mouse pointer is when the function gets called.
+An 2-by-3 matrix @code{[xf, yf, zf; xb, yb, zb]} which holds the
+coordinates of the point over which the mouse pointer was when the
+mouse button was pressed in axes data units.  If a mouse callback
+function is defined, @qcode{"currentpoint"} holds the pointer
+coordinates at the time the mouse button was pressed.  For 3D plots,
+the first row of the returned matrix specifies the point nearest to
+the current camera position and the second rows the furthest point.
+The two points forms a line which is perpendicular to the screen.
 
 @item dataaspectratio
 A two-element vector specifying the relative height and width of the
 data displayed in the axes.  Setting @code{dataaspectratio} to @samp{1,
 2]} causes the length of one unit as displayed on the y-axis to be the
 same as the length of 2 units on the x-axis.  Setting
 @code{dataaspectratio} also forces the @code{dataaspectratiomode}
 property to be set to @qcode{"manual"}.
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -1143,29 +1143,35 @@ private:
         root_figure::properties& rp =
           dynamic_cast<root_figure::properties&> (robj.get_properties ());
         rp.set_currentfigure (fp.get___myhandle__ ().value ());
       }
   }
 
   void set_axes_currentpoint (graphics_object ax, int px, int py)
   {
-    if (ax.valid_object ())
+    if (ax.valid_object () && ax.isa ("axes"))
       {
         axes::properties& ap =
           dynamic_cast<axes::properties&> (ax.get_properties ());
 
-        double xx, yy;
-        pixel2pos (ax, px, py, xx, yy);
+        Matrix x_zlim = ap.get_transform_zlim ();
+        Matrix pos (2, 3, 0.0);
 
-        Matrix pos (2,3,0);
-        pos(0,0) = xx;
-        pos(1,0) = yy;
-        pos(0,1) = xx;
-        pos(1,1) = yy;
+        // front point (nearest to the viewer)
+        ColumnVector tmp = ap.get_transform ().untransform (px, py, x_zlim(0));
+        pos(0,0) = tmp(0);
+        pos(0,1) = tmp(1);
+        pos(0,2) = tmp(2);
+
+        // back point (furthest from the viewer)
+        tmp = ap.get_transform ().untransform (px, py, x_zlim(1));
+        pos(1,0) = tmp(0);
+        pos(1,1) = tmp(1);
+        pos(1,2) = tmp(2);
 
         ap.set_currentpoint (pos);
         fp.set_currentaxes (ap.get___myhandle__ ().value ());
       }
   }
 
   int menu_dy ()
   {
diff --git a/scripts/plot/util/private/__fltk_ginput__.m b/scripts/plot/util/private/__fltk_ginput__.m
--- a/scripts/plot/util/private/__fltk_ginput__.m
+++ b/scripts/plot/util/private/__fltk_ginput__.m
@@ -73,22 +73,22 @@ function [x, y, n, button] = ginput_accu
     ## The end due to Enter.
     n = -1;
  endif
 
 endfunction
 
 function ginput_buttondownfcn (src, button)
   point = get (src, "currentpoint");
-  ginput_accumulator (1, point(1,1), point(2,1), button);
+  ginput_accumulator (1, point(1,1), point(1,2), button);
 endfunction
 
 function ginput_keypressfcn (src, evt)
   point = get (gca, "currentpoint");
   key = evt.Key;
   if (key == "return")
     ## Enter key stops ginput.
     ginput_accumulator (2, NaN, NaN, NaN);
   else
-    ginput_accumulator (1, point(1,1), point(2,1), uint8 (key(1)));
+    ginput_accumulator (1, point(1,1), point(1,2), uint8 (key(1)));
   endif
 endfunction
 
