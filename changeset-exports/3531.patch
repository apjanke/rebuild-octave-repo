# HG changeset patch
# User jwe
# Date 949491212 0
#      Wed Feb 02 11:33:32 2000 +0000
# Node ID 97cf542676e1ea41f71ce20c578795490a47f572
# Parent  7a23cbae0393d8bb933c67d5b6518b04a5b14627
[project @ 2000-02-02 11:30:40 by jwe]

diff --git a/src/DLD-FUNCTIONS/qz.cc b/src/DLD-FUNCTIONS/qz.cc
--- a/src/DLD-FUNCTIONS/qz.cc
+++ b/src/DLD-FUNCTIONS/qz.cc
@@ -146,17 +146,17 @@ fin (const int& lsize, const double& alp
   int retval;
 
   if (lsize == 1)
     retval = (fabs (alpha) < fabs (beta) ? 1 : -1);
   else
     retval = (fabs (p) < 1 ? 1 : -1);
 
 #ifdef DEBUG
-  cout << "qz: fin: retval=" << retval << endl;
+  std::cout << "qz: fin: retval=" << retval << endl;
 #endif
 
   return retval;
 }
 
 static int
 folhp (const int& lsize, const double& alpha,
        const double& beta, const double& s, const double&)
@@ -235,32 +235,32 @@ Note: qz performs permutation balancing,
 \n\
 See also: balance, dare, eig, schur\n\
 @end deftypefn")
 {
   octave_value_list retval;
   int nargin = args.length ();
 
 #ifdef DEBUG
-  cout << "qz: nargin = " << nargin << ", nargout = " << nargout << endl;
+  std::cout << "qz: nargin = " << nargin << ", nargout = " << nargout << endl;
 #endif
 
   if (nargin < 2 || nargin > 3 || nargout > 7)
     {
       print_usage ("qz");
       return retval;
     }
   else if (nargin == 3 && (nargout < 3 || nargout > 4))
     {
       error ("qz: invalid number of output arguments for form [3] call");
       return retval;
     }
 
 #ifdef DEBUG
-  cout << "qz: determine ordering option" << endl;
+  std::cout << "qz: determine ordering option" << endl;
 #endif
 
   // Determine ordering option
   std::string ord_job;
   static double safmin;
 
   if (nargin == 2)
     ord_job = "N";
@@ -282,46 +282,46 @@ See also: balance, dare, eig, schur\n\
 	  error ("qz: invalid order option");
 	  return retval;
 	}
 
       // overflow constant required by dlag2
       F77_FCN (xdlamch, XDLAMCH) ("S", safmin, 1L);
 
 #ifdef DEBUG_EIG
-      cout << "qz: initial value of safmin=" << setiosflags (ios::scientific)
+      std::cout << "qz: initial value of safmin=" << setiosflags (ios::scientific)
 	   << safmin << endl;
 #endif
 
       // some machines (e.g., DEC alpha) get safmin = 0;
       // for these, use eps instead to avoid problems in dlag2
       if (safmin == 0)
 	{
 #ifdef DEBUG_EIG
-	  cout << "qz: DANGER WILL ROBINSON: safmin is 0!" << endl;
+	  std::cout << "qz: DANGER WILL ROBINSON: safmin is 0!" << endl;
 #endif
 
 	  F77_FCN (xdlamch, XDLAMCH) ("E", safmin, 1L);
 
 #ifdef DEBUG_EIG
-	  cout << "qz: safmin set to " << setiosflags (ios::scientific)
+	  std::cout << "qz: safmin set to " << setiosflags (ios::scientific)
 	       << safmin << endl;
 #endif
 	}
     }
 
 #ifdef DEBUG
-  cout << "qz: check argument 1" << endl;
+  std::cout << "qz: check argument 1" << endl;
 #endif
 
   // Argument 1: check if it's o.k. dimensioned
   int nn = args(0).rows ();
 
 #ifdef DEBUG
-  cout << "argument 1 dimensions: (" << nn << "," << args(0).columns () << ")"
+  std::cout << "argument 1 dimensions: (" << nn << "," << args(0).columns () << ")"
        << endl;
 #endif
 
   int arg_is_empty = empty_arg ("qz", nn, args(0).columns ());
 
   if (arg_is_empty < 0)
     {
       gripe_empty_arg ("qz: parameter 1", 0);
@@ -346,17 +346,17 @@ See also: balance, dare, eig, schur\n\
     caa = args(0).complex_matrix_value ();
   else
     aa = args(0).matrix_value ();
 
   if (error_state)
     return retval;
 
 #ifdef DEBUG
-  cout << "qz: check argument 2" << endl;
+  std::cout << "qz: check argument 2" << endl;
 #endif
 
   // Extract argument 2 (bb, or cbb if complex)
   if ((nn != args(1).columns ()) || (nn != args(1).rows ()))
     {
       gripe_nonconformant ();
       return retval;
     }
@@ -407,17 +407,17 @@ See also: balance, dare, eig, schur\n\
     {
       error ("Complex case not implemented yet");
       return retval;
     }
   else
     {
 #ifdef DEBUG
       if (compq == 'V')
-	cout << "qz: performing balancing; QQ=" << endl << QQ << endl;
+	std::cout << "qz: performing balancing; QQ=" << endl << QQ << endl;
 #endif
 
       F77_XFCN (dggbal, DGGBAL,
 		(&bal_job,  nn, aa.fortran_vec(), nn, bb.fortran_vec(),
 		 nn, ilo, ihi, lscale.fortran_vec(),
 		 rscale.fortran_vec(), work.fortran_vec(), info, 1L));
 
       if (f77_exception_encountered)
@@ -435,17 +435,17 @@ See also: balance, dare, eig, schur\n\
     {
       F77_XFCN (dggbak, DGGBAK,
 		(&bal_job, "L", nn, ilo, ihi, lscale.fortran_vec(),
 		 rscale.fortran_vec(), nn, QQ.fortran_vec(),
 		 nn, info, 1L, 1L));
 
 #ifdef DEBUG
       if (compq == 'V')
-	cout << "qz: balancing done; QQ=" << endl << QQ << endl;
+	std::cout << "qz: balancing done; QQ=" << endl << QQ << endl;
 #endif
 
     if (f77_exception_encountered)
       {
 	error ("unrecoverable error in qz (bal-L)");
 	return retval;
       }
   }
@@ -455,17 +455,17 @@ See also: balance, dare, eig, schur\n\
     {
       F77_XFCN (dggbak, DGGBAK, (&bal_job, "R",
 				 nn, ilo, ihi, lscale.fortran_vec(),
 				 rscale.fortran_vec(), nn, ZZ.fortran_vec(),
 				 nn, info, 1L, 1L));
 
 #ifdef DEBUG
       if (compz == 'V')
-	cout << "qz: balancing done; ZZ=" << endl << ZZ << endl;
+	std::cout << "qz: balancing done; ZZ=" << endl << ZZ << endl;
 #endif
 
       if (f77_exception_encountered)
 	{
 	  error ("unrecoverable error in qz (bal-R)");
 	  return retval;
 	}
     }
@@ -489,51 +489,51 @@ See also: balance, dare, eig, schur\n\
 	CZ = ZZ;
 
       error ("complex case not done yet");
       return retval;
     }
   else  	// real matrices case
     {
 #ifdef DEBUG
-      cout << "qz: peforming qr decomposition of bb" << endl;
+      std::cout << "qz: peforming qr decomposition of bb" << endl;
 #endif
 
       // compute the QR factorization of bb
       QR bqr (bb);
 
 #ifdef DEBUG
-      cout << "qz: qr (bb) done; now peforming qz decomposition" << endl;
+      std::cout << "qz: qr (bb) done; now peforming qz decomposition" << endl;
 #endif
 
       bb = bqr.R ();
 
 #ifdef DEBUG
-      cout << "qz: extracted bb" << endl;
+      std::cout << "qz: extracted bb" << endl;
 #endif
 
       aa = (bqr.Q ()).transpose ()*aa;
 
 #ifdef DEBUG
-      cout << "qz: updated aa " << endl;
-      cout << "bqr.Q () = " << endl << bqr.Q () << endl;
+      std::cout << "qz: updated aa " << endl;
+      std::cout << "bqr.Q () = " << endl << bqr.Q () << endl;
 
       if (compq == 'V')
-	cout << "QQ =" << QQ << endl;
+	std::cout << "QQ =" << QQ << endl;
 #endif
 
       if (compq == 'V')
 	QQ = QQ*bqr.Q ();
 
 #ifdef DEBUG
-      cout << "qz: precursors done..." << endl;
+      std::cout << "qz: precursors done..." << endl;
 #endif
 
 #ifdef DEBUG
-      cout << "qz: compq = " << compq << ", compz = " << compz << endl;
+      std::cout << "qz: compq = " << compq << ", compz = " << compz << endl;
 #endif
 
       // reduce  to generalized hessenberg form
       F77_XFCN (dgghrd, DGGHRD,
 		(&compq, &compz, nn, ilo, ihi, aa.fortran_vec(),
 		 nn, bb.fortran_vec(), nn, QQ.fortran_vec(), nn,
 		 ZZ.fortran_vec(), nn, info, 1L, 1L));
 
@@ -569,17 +569,17 @@ See also: balance, dare, eig, schur\n\
 	{
 	  // probably not needed, but better be safe
 	  error ("qz: cannot re-order complex qz decomposition.");
 	  return retval;
 	}
       else
 	{
 #ifdef DEBUG_SORT
-	  cout << "qz: ordering eigenvalues: ord_job = " << ord_job[0] << endl;
+	  std::cout << "qz: ordering eigenvalues: ord_job = " << ord_job[0] << endl;
 #endif
 
 	  // declared static to avoid vfork/long jump compiler complaints
 	  static sort_function sort_test;
 	  sort_test = NULL;
 
 	  switch (ord_job[0])
 	    {
@@ -611,110 +611,110 @@ See also: balance, dare, eig, schur\n\
 
 	  F77_XFCN (xdlange, XDLANGE,
 		    ("I", nn, nn, aa.fortran_vec (), nn,
 		     work.fortran_vec (), inf_norm));
 
 	  double eps = DBL_EPSILON*inf_norm*nn;
 
 #ifdef DEBUG_SORT
-	  cout << "qz: calling dsubsp: aa=" << endl;
-	  octave_print_internal (cout, aa, 0);
-	  cout << endl << "bb="  << endl;
-	  octave_print_internal (cout, bb, 0);
+	  std::cout << "qz: calling dsubsp: aa=" << endl;
+	  octave_print_internal (std::cout, aa, 0);
+	  std::cout << endl << "bb="  << endl;
+	  octave_print_internal (std::cout, bb, 0);
 	  if (compz == 'V')
 	    {
-	      cout << endl << "ZZ="  << endl;
-	      octave_print_internal (cout, ZZ, 0);
+	      std::cout << endl << "ZZ="  << endl;
+	      octave_print_internal (std::cout, ZZ, 0);
 	    }
-	  cout << endl;
-	  cout << "alphar = " << endl;
-	  octave_print_internal (cout, (Matrix) alphar, 0);
-	  cout << endl << "alphai = " << endl;
-	  octave_print_internal (cout, (Matrix) alphai, 0);
-	  cout << endl << "beta = " << endl;
-	  octave_print_internal (cout, (Matrix) betar, 0);
-	  cout << endl;
+	  std::cout << endl;
+	  std::cout << "alphar = " << endl;
+	  octave_print_internal (std::cout, (Matrix) alphar, 0);
+	  std::cout << endl << "alphai = " << endl;
+	  octave_print_internal (std::cout, (Matrix) alphai, 0);
+	  std::cout << endl << "beta = " << endl;
+	  octave_print_internal (std::cout, (Matrix) betar, 0);
+	  std::cout << endl;
 #endif
 
 	  F77_XFCN (dsubsp, DSUBSP,
 		    (nn, nn, aa.fortran_vec(), bb.fortran_vec(),
 		     ZZ.fortran_vec(), sort_test, eps, ndim, fail, ind));
 
 #ifdef DEBUG
-	  cout << "qz: back from dsubsp: aa=" << endl;
-	  octave_print_internal (cout, aa, 0);
-	  cout << endl << "bb="  << endl;
-	  octave_print_internal (cout, bb, 0);
+	  std::cout << "qz: back from dsubsp: aa=" << endl;
+	  octave_print_internal (std::cout, aa, 0);
+	  std::cout << endl << "bb="  << endl;
+	  octave_print_internal (std::cout, bb, 0);
 	  if (compz == 'V')
 	    {
-	      cout << endl << "ZZ="  << endl;
-	      octave_print_internal (cout, ZZ, 0);
+	      std::cout << endl << "ZZ="  << endl;
+	      octave_print_internal (std::cout, ZZ, 0);
 	    }
-	  cout << endl;
+	  std::cout << endl;
 #endif
 
 	  // manually update alphar, alphai, betar
 	  static int jj;
 
 	  jj=0;
 	  while (jj < nn)
 	    {
 #ifdef DEBUG_EIG
-	      cout << "computing gen eig #" << jj << endl;
+	      std::cout << "computing gen eig #" << jj << endl;
 #endif
 
 	      static int zcnt;	// number of zeros in this block
 
 	      if (jj == (nn-1))
 		zcnt = 1;
 	      else if (aa(jj+1,jj) == 0)
 		zcnt = 1;
 	      else zcnt = 2;
 
 	      if (zcnt == 1)  // real zero
 		{
 #ifdef DEBUG_EIG
-		  cout << "  single gen eig:" << endl;
-		  cout << "  alphar(" << jj << ") = " << aa(jj,jj) << endl;
-		  cout << "  betar( " << jj << ") = " << bb(jj,jj) << endl;
-		  cout << "  alphai(" << jj << ") = 0" << endl;
+		  std::cout << "  single gen eig:" << endl;
+		  std::cout << "  alphar(" << jj << ") = " << aa(jj,jj) << endl;
+		  std::cout << "  betar( " << jj << ") = " << bb(jj,jj) << endl;
+		  std::cout << "  alphai(" << jj << ") = 0" << endl;
 #endif
 
 		  alphar(jj) = aa(jj,jj);
 		  alphai(jj) = 0;
 		  betar(jj) = bb(jj,jj);
 		}
 	      else
 		{
 		  // complex conjugate pair
 #ifdef DEBUG_EIG
-		  cout << "qz: calling dlag2:" << endl;
-		  cout << "safmin="
+		  std::cout << "qz: calling dlag2:" << endl;
+		  std::cout << "safmin="
 		       << setiosflags (ios::scientific) << safmin << endl;
 
 		  for (int idr = jj; idr <= jj+1; idr++)
 		    {
 		      for (int idc = jj; idc <= jj+1; idc++)
 			{
-			  cout << "aa(" << idr << "," << idc << ")="
+			  std::cout << "aa(" << idr << "," << idc << ")="
 			       << aa(idr,idc) << endl;
-			  cout << "bb(" << idr << "," << idc << ")="
+			  std::cout << "bb(" << idr << "," << idc << ")="
 			       << bb(idr,idc) << endl;
 			}
 		    }
 #endif
 
 		  double scale1, scale2, wr1, wr2, wi;
 		  F77_XFCN (dlag2, DLAG2,
 			    (&aa(jj,jj), nn, &bb(jj,jj), nn, safmin,
 			     scale1, scale2, wr1, wr2, wi));
 
 #ifdef DEBUG_EIG
-		  cout << "dlag2 returns: scale1=" << scale1
+		  std::cout << "dlag2 returns: scale1=" << scale1
 		       << "\tscale2=" << scale2 << endl
 		       << "\twr1=" << wr1 << "\twr2=" << wr2
 		       << "\twi=" << wi << endl;
 #endif
 
 		  // just to be safe, check if it's a real pair
 		  if (wi == 0)
 		    {
@@ -733,35 +733,35 @@ See also: balance, dare, eig, schur\n\
 		    }
 		}
 
 	      // advance past this block
 	      jj += zcnt;
 	    }
 
 #ifdef DEBUG_SORT
-	  cout << "qz: back from dsubsp: aa=" << endl;
-	  octave_print_internal (cout, aa, 0);
-	  cout << endl << "bb="  << endl;
-	  octave_print_internal (cout, bb, 0);
+	  std::cout << "qz: back from dsubsp: aa=" << endl;
+	  octave_print_internal (std::cout, aa, 0);
+	  std::cout << endl << "bb="  << endl;
+	  octave_print_internal (std::cout, bb, 0);
 
 	  if (compz == 'V')
 	    {
-	      cout << endl << "ZZ="  << endl;
-	      octave_print_internal (cout, ZZ, 0);
+	      std::cout << endl << "ZZ="  << endl;
+	      octave_print_internal (std::cout, ZZ, 0);
 	    }
-	  cout << endl << "qz: ndim=" << ndim << endl
+	  std::cout << endl << "qz: ndim=" << ndim << endl
 	       << "fail=" << fail << endl;
-	  cout << "alphar = " << endl;
-	  octave_print_internal (cout, (Matrix) alphar, 0);
-	  cout << endl << "alphai = " << endl;
-	  octave_print_internal (cout, (Matrix) alphai, 0);
-	  cout << endl << "beta = " << endl;
-	  octave_print_internal (cout, (Matrix) betar, 0);
-	  cout << endl;
+	  std::cout << "alphar = " << endl;
+	  octave_print_internal (std::cout, (Matrix) alphar, 0);
+	  std::cout << endl << "alphai = " << endl;
+	  octave_print_internal (std::cout, (Matrix) alphai, 0);
+	  std::cout << endl << "beta = " << endl;
+	  octave_print_internal (std::cout, (Matrix) betar, 0);
+	  std::cout << endl;
 #endif
 	}
     }
 
   // compute  generalized eigenvalues?
   ComplexColumnVector gev;
 
   if (nargout < 2 || nargout == 7 || (nargin == 3 && nargout == 4))
@@ -769,17 +769,17 @@ See also: balance, dare, eig, schur\n\
       if (complex_case)
 	{
 	  error ("complex case not yet implemented");
 	  return retval;
 	}
       else
 	{
 #ifdef DEBUG
-	  cout << "qz: computing generalized eigenvalues" << endl;
+	  std::cout << "qz: computing generalized eigenvalues" << endl;
 #endif
 
 	  // return finite generalized eigenvalues
 	  int cnt = 0;
 
 	  for (int ii = 0; ii < nn; ii++)
 	    if (betar(ii) != 0)
 	      cnt++;
@@ -804,17 +804,17 @@ See also: balance, dare, eig, schur\n\
       if (complex_case)
 	{
 	  error ("complex type not yet implemented");
 	  return retval;
 	}
       else
 	{
 #ifdef DEBUG
-	  cout << "qz: computing  generalized eigenvectors" << endl;
+	  std::cout << "qz: computing  generalized eigenvectors" << endl;
 #endif
 
 	  VL = QQ;
 	  VR = ZZ;
 
 	  F77_XFCN (dtgevc, DTGEVC,
 		    (&side, &howmny, select, nn, aa.fortran_vec(),
 		     nn, bb.fortran_vec(), nn, VL.fortran_vec(), nn,
@@ -884,58 +884,58 @@ See also: balance, dare, eig, schur\n\
 
     case 5:	// return eigenvectors
       retval(4) = CVR;
 
     case 4:
       if (nargin == 3)
 	{
 #ifdef DEBUG
-	  cout << "qz: sort: retval(3) = gev = " << endl;
-	  octave_print_internal (cout, gev);
-	  cout << endl;
+	  std::cout << "qz: sort: retval(3) = gev = " << endl;
+	  octave_print_internal (std::cout, gev);
+	  std::cout << endl;
 #endif
 	  retval(3) = gev;
 	}
       else
 	retval(3) = ZZ;
 
     case 3:
       if (nargin == 3)
 	retval(2) = ZZ;
       else
 	retval(2) = QQ;
 
     case 2:
 #ifdef DEBUG
-      cout << "qz: retval (1) = bb = " << endl;
-      octave_print_internal (cout, bb, 0);
-      cout << endl << "qz: retval(0) = aa = " <<endl;
-      octave_print_internal (cout, aa, 0);
-      cout << endl;
+      std::cout << "qz: retval (1) = bb = " << endl;
+      octave_print_internal (std::cout, bb, 0);
+      std::cout << endl << "qz: retval(0) = aa = " <<endl;
+      octave_print_internal (std::cout, aa, 0);
+      std::cout << endl;
 #endif
       retval(1) = bb;
       retval(0) = aa;
       break;
 
     case 1:
     case 0:
 #ifdef DEBUG
-      cout << "qz: retval(0) = gev = " << gev << endl;
+      std::cout << "qz: retval(0) = gev = " << gev << endl;
 #endif
       retval(0) = gev;
       break;
 
     default:
       error ("qz: too many return arguments.");
       break;
   }
 
 #ifdef DEBUG
-  cout << "qz: exiting (at long last)" << endl;
+  std::cout << "qz: exiting (at long last)" << endl;
 #endif
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/Map.cc b/src/Map.cc
--- a/src/Map.cc
+++ b/src/Map.cc
@@ -99,17 +99,17 @@ Map<C>::contains (const std::string& ite
 {
   return seek (item) != 0;
 }
 
 template <class C>
 void
 Map<C>::error (const std::string& msg) const
 {
-  cerr << "Map: " << msg << "\n";
+  std::cerr << "Map: " << msg << "\n";
 }
 
 // CHMap class.
 
 // The nodes are linked together serially via a version of a trick
 // used in some vtables: odd pointers are actually links to the next
 // table entry.  Not terrible, but not wonderful either.
 
diff --git a/src/Stack.cc b/src/Stack.cc
--- a/src/Stack.cc
+++ b/src/Stack.cc
@@ -31,16 +31,16 @@ Software Foundation, 59 Temple Place - S
 #include <iostream>
 
 #include "Stack.h"
 
 template <class T>
 void
 Stack<T>::error (const char *msg)
 {
-  cerr << msg;
+  std::cerr << msg;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -68,17 +68,21 @@ Software Foundation, 59 Temple Place - S
 static int
 octave_change_to_directory (const std::string& newdir)
 {
   int cd_ok = octave_env::chdir (newdir);
 
   if (cd_ok)
     do_external_plotter_cd (newdir);
   else
-    error ("%s: %s", newdir.c_str (), strerror (errno));
+    {
+      using namespace std;
+
+      error ("%s: %s", newdir.c_str (), strerror (errno));
+    }
 
   return cd_ok;
 }
 
 DEFUN_TEXT (cd, args, ,
   "-*- texinfo -*-\n\
 @deffn {Command} cd dir\n\
 @deffnx {Command} chdir dir\n\
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -64,24 +64,24 @@ vwarning (const char *name, const char *
 {
   flush_octave_stdout ();
 
   std::ostrstream output_buf;
 
   if (name)
     {
       octave_diary << name << ": ";
-      cerr << name << ": ";
+      std::cerr << name << ": ";
     }
 
   octave_diary.vform (fmt, args);
-  cerr.vform (fmt, args);
+  std::cerr.vform (fmt, args);
 
   octave_diary << endl;
-  cerr << endl;
+  std::cerr << endl;
 }
 
 static void
 verror (const char *name, const char *fmt, va_list args)
 {
   flush_octave_stdout ();
 
   bool to_beep_or_not_to_beep_p = Vbeep_on_error && ! error_state;
@@ -123,17 +123,17 @@ verror (const char *name, const char *fm
 	    ptr = msg;
 	}
 
       *error_message_buffer << ptr;
     }
   else
     {
       octave_diary << msg;
-      cerr << msg;
+      std::cerr << msg;
     }
 
   delete [] msg;
 }
 
 // Note that we don't actually print any message if the error string
 // is just "" or "\n".  This allows error ("") and error ("\n") to
 // just set the error state.
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -68,25 +68,25 @@ Software Foundation, 59 Temple Place - S
 
 static octave_value stdin_file;
 static octave_value stdout_file;
 static octave_value stderr_file;
 
 void
 initialize_file_io (void)
 {
-  octave_stream stdin_stream = octave_istream::create (&cin, "stdin");
+  octave_stream stdin_stream = octave_istream::create (&std::cin, "stdin");
 
-  // This uses octave_stdout (see pager.h), not cout so that Octave's
+  // This uses octave_stdout (see pager.h), not std::cout so that Octave's
   // standard output stream will pass through the pager.
 
   octave_stream stdout_stream
     = octave_ostream::create (&octave_stdout, "stdout");
 
-  octave_stream stderr_stream = octave_ostream::create (&cerr, "stderr");
+  octave_stream stderr_stream = octave_ostream::create (&std::cerr, "stderr");
 
   stdin_file = octave_stream_list::insert (stdin_stream);
   stdout_file = octave_stream_list::insert (stdout_stream);
   stderr_file = octave_stream_list::insert (stderr_stream);
 }
 
 void
 close_files (void)
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -1798,21 +1798,21 @@ Force Octave to assume the file is in @s
 
   if (argv[i] == "-")
     {
       i++;
 
       if (format != LS_UNKNOWN)
 	{
 	  // XXX FIXME XXX -- if we have already seen EOF on a
-	  // previous call, how do we fix up the state of cin so that
-	  // we can get additional input?  I'm afraid that we can't
-	  // fix this using cin only.
-
-	  retval = do_load (cin, orig_fname, force, format, flt_fmt,
+	  // previous call, how do we fix up the state of std::cin so
+	  // that we can get additional input?  I'm afraid that we
+	  // can't fix this using std::cin only.
+
+	  retval = do_load (std::cin, orig_fname, force, format, flt_fmt,
 			    list_only, swap, verbose, argv, i, argc,
 			    nargout);
 	}
       else
 	error ("load: must specify file format if reading from stdin");
     }
   else
     {
diff --git a/src/oct-fstrm.cc b/src/oct-fstrm.cc
--- a/src/oct-fstrm.cc
+++ b/src/oct-fstrm.cc
@@ -43,17 +43,21 @@ octave_fstream::octave_fstream (const st
   : octave_base_stream (md, flt_fmt), nm (nm_arg)
 {
   // Override default protection of 0664 so that umask will appear to
   // do the right thing.
 
   fs.open (nm.c_str (), md, 0666);
 
   if (! fs)
-    error (strerror (errno));
+    {
+      using namespace std;
+
+      error (strerror (errno));
+    }
 }
 
 // Position a stream at OFFSET relative to ORIGIN.
 
 int
 octave_fstream::seek (streamoff offset, ios::seek_dir origin)
 {
   int retval = -1;
diff --git a/src/oct-procbuf.cc b/src/oct-procbuf.cc
--- a/src/oct-procbuf.cc
+++ b/src/oct-procbuf.cc
@@ -157,21 +157,25 @@ octave_procbuf::sys_close (void)
 	  status = 0;
 	  break;
 	}
     }
 
   if (status < 0 || ::close (fd ()) < 0)
     return -1;
 
-  do
-    {
-      wait_pid = ::waitpid (proc_pid, &wstatus, 0);
-    }
-  while (wait_pid == -1 && errno == EINTR);
+  {
+    using namespace std;
+
+    do
+      {
+	wait_pid = ::waitpid (proc_pid, &wstatus, 0);
+      }
+    while (wait_pid == -1 && errno == EINTR);
+  }
 
   if (wait_pid == -1)
     return -1;
 
   return wstatus;
 
 #else
 
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -489,30 +489,32 @@ void
 scanf_format_list::printme (void) const
 {
   int n = list.length ();
 
   for (int i = 0; i < n; i++)
     {
       scanf_format_elt *elt = list(i);
 
-      cerr << "width:      " << elt->width << "\n"
-	   << "discard:    " << elt->discard << "\n"
-	   << "type:       ";
+      std::cerr
+	<< "width:      " << elt->width << "\n"
+	<< "discard:    " << elt->discard << "\n"
+	<< "type:       ";
 
       if (elt->type == scanf_format_elt::literal_conversion)
-	cerr << "literal text\n";
+	std::cerr << "literal text\n";
       else if (elt->type == scanf_format_elt::whitespace_conversion)
-	cerr << "whitespace\n";
+	std::cerr << "whitespace\n";
       else
-	cerr << elt->type << "\n";
-
-      cerr << "modifier:   " << elt->modifier << "\n"
-	   << "char_class: `" << undo_string_escapes (elt->char_class) << "'\n"
-	   << "text:       `" << undo_string_escapes (elt->text) << "'\n\n";
+	std::cerr << elt->type << "\n";
+
+      std::cerr
+	<< "modifier:   " << elt->modifier << "\n"
+	<< "char_class: `" << undo_string_escapes (elt->char_class) << "'\n"
+	<< "text:       `" << undo_string_escapes (elt->text) << "'\n\n";
     }
 }
 
 bool
 scanf_format_list::all_character_conversions (void)
 {
   int n = list.length ();
 
@@ -811,20 +813,20 @@ void
 printf_format_list::printme (void) const
 {
   int n = list.length ();
 
   for (int i = 0; i < n; i++)
     {
       printf_format_elt *elt = list(i);
 
-      cerr << elt->args<< "\t"
-	   << elt->type << "\t"
-	   << elt->modifier << "\t"
-	   << undo_string_escapes (elt->text) << "\n";
+      std::cerr << elt->args<< "\t"
+		<< elt->type << "\t"
+		<< elt->modifier << "\t"
+		<< undo_string_escapes (elt->text) << "\n";
     }
 }
 
 int
 octave_base_stream::file_number (void)
 {
   // Kluge alert!
 
@@ -2985,17 +2987,18 @@ octave_stream_list::do_lookup (const oct
   return retval;
 }
 
 int
 octave_stream_list::do_remove (int fid, const std::string& who)
 {
   int retval = -1;
 
-  // Can't remove stdin (cin), stdout (cout), or stderr (cerr).
+  // Can't remove stdin (std::cin), stdout (std::cout), or stderr
+  // (std::cerr).
 
   if (fid > 2 && fid < curr_len)
     {
       octave_stream os = list(fid);
 
       if (os.is_valid ())
 	{
 	  os.close ();
@@ -3147,17 +3150,18 @@ int
 octave_stream_list::do_get_file_number (const octave_value& fid) const
 {
   int retval = -1;
 
   if (fid.is_string ())
     {
       std::string nm = fid.string_value ();
 
-      // stdin (cin), stdout (cout), and stderr (cerr) are unnamed.
+      // stdin (std::cin), stdout (std::cout), and stderr (std::cerr)
+      // are unnamed.
 
       for (int i = 3; i < curr_len; i++)
 	{
 	  octave_stream os = list(i);
 
 	  if (os && os.name () == nm)
 	    {
 	      retval = i;
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -259,17 +259,17 @@ execute_startup_files (void)
   unwind_protect::run_frame ("execute_startup_files");
 }
 
 // Usage message with extra help.
 
 static void
 verbose_usage (void)
 {
-  cout << OCTAVE_NAME_VERSION_AND_COPYRIGHT "\n\
+  std::cout << OCTAVE_NAME_VERSION_AND_COPYRIGHT "\n\
 \n\
 Usage: octave [options]\n\
 \n\
 Options:\n\
 \n\
   --debug, -d             Enter parser debugging mode.\n\
   --echo-commands, -x     Echo commands as they are executed.\n\
   --exec-path PATH        Set path for executing subprograms.\n\
@@ -298,24 +298,24 @@ Please report bugs to the mailing list `
   exit (0);
 }
 
 // Terse usage messsage.
 
 static void
 usage (void)
 {
-  cerr << "usage: " << usage_string << "\n";
+  std::cerr << "usage: " << usage_string << "\n";
   exit (1);
 }
 
 static void
 print_version_and_exit (void)
 {
-  cout << OCTAVE_NAME_AND_VERSION << "\n";
+  std::cout << OCTAVE_NAME_AND_VERSION << "\n";
   exit (0);
 }
 
 static void
 initialize_error_handlers ()
 {
   set_liboctave_error_handler (error);
   set_liboctave_warning_handler (warning);
@@ -484,27 +484,27 @@ main (int argc, char **argv)
 #endif
 
   // These can come after command line args since none of them set any
   // defaults that might be changed by command line options.
 
   initialize_command_input ();
 
   if (! inhibit_startup_message)
-    cout << OCTAVE_STARTUP_MESSAGE "\n" << endl;
+    std::cout << OCTAVE_STARTUP_MESSAGE "\n" << endl;
 
   if (traditional)
     maximum_braindamage ();
 
   execute_startup_files ();
 
   command_history::read (false);
 
   if (! inhibit_startup_message && reading_startup_message_printed)
-    cout << endl;
+    std::cout << endl;
 
   // Avoid counting commands executed from startup files.
 
   command_editor::reset_current_command_number (1);
 
   // If there is an extra argument, see if it names a file to read.
   // Additional arguments are taken as command line options for the
   // script.
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -512,18 +512,18 @@ octave_value::octave_value (octave_value
   : rep (new_rep)
 {
   rep->count = 1;
 }
 
 octave_value::~octave_value (void)
 {
 #if defined (MDEBUG)
-  cerr << "~octave_value: rep: " << rep
-       << " rep->count: " << rep->count << "\n";
+  std::cerr << "~octave_value: rep: " << rep
+	    << " rep->count: " << rep->count << "\n";
 #endif
 
   if (rep && --rep->count == 0)
     {
       delete rep;
       rep = 0;
     }
 }
diff --git a/src/pager.cc b/src/pager.cc
--- a/src/pager.cc
+++ b/src/pager.cc
@@ -103,32 +103,32 @@ pager_death_handler (pid_t pid, int stat
 {
   if (pid > 0)
     {
       if (WIFEXITED (status) || WIFSIGNALLED (status))
 	{
 	  // Avoid warning() or error(), since that will put us back in
 	  // the pager, which would be bad news.
 
-	  cerr << "warning: connection to external pager (pid = "
+	  std::cerr << "warning: connection to external pager (pid = "
 	       << pid << ") lost --\n"
 	       << "warning: attempting to finish pending computations...\n";
 	}
     }
 }
 
 static void
 do_sync (const char *msg, int len, bool bypass_pager)
 {
   if (msg && len > 0)
     {
       if (bypass_pager)
 	{
-	  cout.write (msg, len);
-	  cout.flush ();
+	  std::cout.write (msg, len);
+	  std::cout.flush ();
 	}
       else
 	{
 	  if (! external_pager)
 	    {
 	      std::string pgr = Vpager_binary;
 
 	      if (! pgr.empty ())
@@ -173,18 +173,18 @@ do_sync (const char *msg, int len, bool 
 		    {
 		      octave_set_interrupt_handler (saved_interrupt_handler);
 		      interrupt_handler_saved = false;
 		    }
 		}
 	    }
 	  else
 	    {
-	      cout.write (msg, len);
-	      cout.flush ();
+	      std::cout.write (msg, len);
+	      std::cout.flush ();
 	    }
 	}
     }
 }
 
 // Assume our terminal wraps long lines.
 
 static bool
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -2729,25 +2729,25 @@ parse_and_execute (const std::string& s,
       unwind_protect_int (input_line_number);
       unwind_protect_int (current_input_column);
 
       input_line_number = 0;
       current_input_column = 1;
 
       if (verbose)
 	{
-	  cout << "reading commands from " << s << " ... ";
+	  std::cout << "reading commands from " << s << " ... ";
 	  reading_startup_message_printed = true;
-	  cout.flush ();
+	  std::cout.flush ();
 	}
 
       parse_and_execute (f);
 
       if (verbose)
-	cout << "done." << endl;
+	std::cout << "done." << endl;
     }
   else if (warn_for)
     error ("%s: unable to open file `%s'", warn_for, s.c_str ());
 
   unwind_protect::run_frame ("parse_and_execute_2");
 }
 
 static bool
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -308,17 +308,17 @@ tree_plot_command::eval (void)
       if (error_state || status < 0)
 	return;
     }
 
   plot_buf << Vgnuplot_command_end << ends;
 
   // Just testing...
   //  char *message = plot_buf.str ();
-  //  cout << "[*]" << message << "[*]\n";
+  //  std::cout << "[*]" << message << "[*]\n";
 
   if (parametric_plot && ndim == 2)
     {
       warning ("can't make 2D parametric plot -- setting noparametric...");
       send_to_plot_stream ("set noparametric\n");
       char *message = plot_buf.str ();
       send_to_plot_stream (message);
       delete [] message;
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -118,25 +118,25 @@ my_friendly_exit (const char *sig_name, 
   static bool been_there_done_that = false;
 
   if (been_there_done_that)
     {
 #if defined (SIGABRT)
       octave_set_signal_handler (SIGABRT, SIG_DFL);
 #endif
 
-      cerr << "error: attempted clean up apparently failed -- aborting...\n";
+      std::cerr << "error: attempted clean up apparently failed -- aborting...\n";
 
       abort ();
     }
   else
     {
       been_there_done_that = true;
 
-      cerr << "error: " << sig_name << " -- stopping myself...\n";
+      std::cerr << "error: " << sig_name << " -- stopping myself...\n";
 
       save_user_variables ();
 
       if (sig_number < 0)
 	exit (1);
       else
 	{
 	  octave_set_signal_handler (sig_number, SIG_DFL);
@@ -146,17 +146,17 @@ my_friendly_exit (const char *sig_name, 
     }
 }
 
 // I know, not really a signal handler.
 
 static void
 octave_new_handler (void)
 {
-  cerr << "error: memory exhausted -- trying to return to prompt\n";
+  std::cerr << "error: memory exhausted -- trying to return to prompt\n";
 
   if (can_interrupt)
     {
       jump_to_top_level ();
       panic_impossible ();
     }
   else
     my_friendly_exit ("operator new", OCTAVE_MEMORY_EXHAUSTED_ERROR);
@@ -251,17 +251,17 @@ sigchld_handler (int /* sig */)
 #if defined (__alpha__)
 static RETSIGTYPE
 sigfpe_handler (int /* sig */)
 {
   MAYBE_ACK_SIGNAL (SIGFPE);
 
   MAYBE_REINSTALL_SIGHANDLER (SIGFPE, sigfpe_handler);
 
-  cerr << "error: floating point exception -- trying to return to prompt\n";
+  std::cerr << "error: floating point exception -- trying to return to prompt\n";
 
   if (can_interrupt)
     {
       jump_to_top_level ();
       panic_impossible ();
     }
 
   SIGHANDLER_RETURN (0);
@@ -313,17 +313,17 @@ sigint_handler (int)
 static RETSIGTYPE
 sigpipe_handler (int /* sig */)
 {
   MAYBE_ACK_SIGNAL (SIGPIPE);
 
   MAYBE_REINSTALL_SIGHANDLER (SIGPIPE, sigpipe_handler);
 
   if (pipe_handler_error_count++ == 0)
-    cerr << "warning: broken pipe\n";
+    std::cerr << "warning: broken pipe\n";
 
   // Don't loop forever on account of this.
 
   if (pipe_handler_error_count  > 100)
     jump_to_top_level ();
 
   SIGHANDLER_RETURN (0);
 }
diff --git a/src/syscalls.cc b/src/syscalls.cc
--- a/src/syscalls.cc
+++ b/src/syscalls.cc
@@ -24,17 +24,16 @@ Software Foundation, 59 Temple Place - S
 // the following functions:
 //
 //   mkfifo  unlink  waitpid
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include <cerrno>
 #include <cstdio>
 #include <cstring>
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -308,17 +308,17 @@ LOSE! LOSE!
 
 // Read one character from the terminal.
 
 int
 kbhit (void)
 {
   int c;
   raw_mode (1);
-  c = cin.get ();
+  c = std::cin.get ();
   raw_mode (0);
   return c;
 }
 
 DEFUN (clc, , ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} clc ()\n\
 @deftypefnx {Built-in Function} {} home ()\n\
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -94,17 +94,17 @@ main_loop (void)
   // Allow the user to interrupt us without exiting.
 
   octave_save_signal_mask ();
 
   if (setjmp (toplevel) != 0)
     {
       raw_mode (0);
 
-      cout << "\n";
+      std::cout << "\n";
 
       octave_restore_signal_mask ();
     }
 
   can_interrupt = true;
 
   octave_catch_interrupts ();
 
@@ -531,17 +531,17 @@ do_octave_atexit (void)
 
       close_files ();
 
       cleanup_tmp_files ();
 
       flush_octave_stdout ();
 
       if (!quitting_gracefully && (interactive || forced_interactive))
-	cout << "\n";
+	std::cout << "\n";
     }
 }
 
 DEFUN (atexit, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} atexit (@var{fcn})\n\
 Register a function to be called when Octave exits.  For example,\n\
 \n\
@@ -685,26 +685,26 @@ void *
   p = malloc (sz);
   while (p == 0)
     {
       (*__new_handler) ();
       p = malloc (sz);
     }
 
   if (debug_new_delete)
-    cout << "__builtin_new: " << p << endl;
+    std::cout << "__builtin_new: " << p << endl;
 
   return p;
 }
 
 void
 __builtin_delete (void *ptr)
 {
   if (debug_new_delete)
-    cout << "__builtin_delete: " << ptr << endl;
+    std::cout << "__builtin_delete: " << ptr << endl;
 
   if (ptr)
     free (ptr);
 }
 
 #endif
 
 void
