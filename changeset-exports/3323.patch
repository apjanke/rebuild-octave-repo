# HG changeset patch
# User jwe
# Date 940990910 0
#      Wed Oct 27 02:21:50 1999 +0000
# Node ID 511caaa5e98eba34d64f3f4b6e5265775425f45a
# Parent  8c6b4de3bdc89757d2af0b90889c5c68042a780a
[project @ 1999-10-27 02:21:46 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,15 @@
+1999-10-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* emacs/README: New file.
+	* emacs/Makefile.in (DISTFILES, BINDISTFILES): Add it to the lists.
+
+	* emacs/Makefile.in: Don't distribute .elc files.
+
 1999-10-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Check for select and poll.  Also check for poll.h
 	and sys/poll.h.
 
 1999-10-19  Geoff Jacobsen <geoffj@casquet.inet.net.nz>
 
 	* autogen.sh: New file.
diff --git a/emacs/Makefile.in b/emacs/Makefile.in
--- a/emacs/Makefile.in
+++ b/emacs/Makefile.in
@@ -16,24 +16,21 @@ include $(TOPDIR)/Makeconf
 
 INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_DATA = @INSTALL_DATA@
 
 EL_FILES = octave-hlp.el octave-inf.el octave-mod.el
 
-ELC_FILES = octave-hlp.elc octave-inf.elc octave-mod.elc
-
 SOURCES = $(EL_FILES) otags
 
-DISTFILES = Makefile.in $(EL_FILES) $(ELC_FILES) otags NEWS TODO
+DISTFILES = Makefile.in $(EL_FILES) otags NEWS TODO README
 
-BINDISTFILES = \
-	$(addprefix $(srcdir)/, $(EL_FILES) $(ELC_FILES) otags NEWS TODO)
+BINDISTFILES = $(addprefix $(srcdir)/, $(EL_FILES) otags NEWS TODO README)
 
 all:
 .PHONY: all
 
 install install-strip:
 	$(INSTALL_SCRIPT) otags $(bindir)/otags
 .PHONY: install install-strip
 
diff --git a/emacs/octave-hlp.el b/emacs/octave-hlp.el
--- a/emacs/octave-hlp.el
+++ b/emacs/octave-hlp.el
@@ -1,11 +1,11 @@
-;; octave-hlp.el --- getting help on Octave symbols using info
+;;; octave-hlp.el --- getting help on Octave symbols using info
 
-;;; Copyright (C) 1997 Free Software Foundation, Inc.
+;; Copyright (C) 1997 Free Software Foundation, Inc.
 
 ;; Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
 ;; Author: John Eaton <jwe@bevo.che.wisc.edu>
 ;; Maintainer: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
 ;; Keywords: languages
 
 ;; This file is part of GNU Emacs.
 
diff --git a/emacs/octave-inf.el b/emacs/octave-inf.el
--- a/emacs/octave-inf.el
+++ b/emacs/octave-inf.el
@@ -366,9 +366,8 @@ directory and makes this the current buf
   (inferior-octave-send-list-and-digest '("pwd\n"))
   (cd (car inferior-octave-output-list)))
 
 ;;; provide ourself
 
 (provide 'octave-inf)
 
 ;;; octave-inf.el ends here
-
diff --git a/emacs/octave-mod.el b/emacs/octave-mod.el
--- a/emacs/octave-mod.el
+++ b/emacs/octave-mod.el
@@ -35,16 +35,17 @@
 
 ;; The file octave-inf.el contains code for interacting with an inferior
 ;; Octave process using comint.
 
 ;; See the documentation of `octave-mode', `octave-help' and
 ;; `run-octave' for further information on usage and customization.
 
 ;;; Code:
+(require 'custom)
 
 (defgroup octave nil
   "Major mode for editing Octave source files."
   :group 'languages)
 
 (defvar inferior-octave-output-list nil)
 (defvar inferior-octave-output-string nil)
 (defvar inferior-octave-receive-in-progress nil)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,33 @@
 1999-10-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* DLD-FUNCTIONS/lsode.cc (Flsode): Be sure to call
+	unwind_protect::run_frame before returning.
+	* DLD-FUNCTIONS/quad.cc (Fquad): Likewise.
+	* DLD-FUNCTIONS/fsolve.cc (Ffsolve): Likewise.
+	* DLD-FUNCTIONS/dassl.cc (Fdassl): Likewise.
+
+	* load-save.cc (read_mat_ascii_data): When reading from
+	tmp_stream, check its state, not the state of is.
+
+	* defun-dld.h (INSTALL_DLD_FCN, INSTALL_DLD_FCNS): New macros.
+	* DLD-FUNCTIONS/dassl.cc: Use them.
+	* DLD-FUNCTIONS/lsode.cc: Ditto.
+	* DLD-FUNCTIONS/fsolve.cc: Ditto.
+	* DLD-FUNCTIONS/quad.cc: Ditto.
+	* DLD-FUNCTIONS/time.cc: Ditto.
+	* DLD-FUNCTIONS/besselj.cc: Ditto.
+	* DLD-FUNCTIONS/getgrent.cc: Ditto.
+	* DLD-FUNCTIONS/getpwent.cc: Ditto.
+	* DLD-FUNCTIONS/inv.cc: Ditto.
+	* DLD-FUNCTIONS/log.cc: Ditto.
+	* DLD-FUNCTIONS/minmax.cc: Ditto.
+	* DLD-FUNCTIONS/rand.cc: Ditto.
+
 	* data.cc (Flinspace): Let linspace functions handle errors.
 
 	* mkgendoc (print_doc_string): Handle quoted names.
 
 	* file-io.cc (symbols_of_file_io): Use DEFCONSTX for SEEK_SET,
 	SEEK_CUR, and SEEK_END.
 
 	* defun.h (DEFCONST): Just pass name, defn, and doc to
@@ -37,18 +60,19 @@ 1999-10-23  Ben Sapp <bsapp@nua.lampf.la
 	* data.cc (Fis_matrix): Texinfoize doc string.  * ov.cc
 	(Vpropagate_empty_matrices): Ditto.  * pr-output.cc
 	(Vfixed_point_format, Voutput_max_field_width, Voutput_precision,
 	Vprint_empty_dimensions, Vsplit_long_rows): Ditto.  * pt-mat.cc:cd
 	(Vempty_list_elements_ok): Ditto.
 
 1999-10-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
-	* ov-usr-fcn.cc (octave_user_function::do_index_op): If call_depth
-	is exceeded, call unwind_protect::run_frame before returning.
+	* ov-usr-fcn.cc (octave_user_function::do_index_op): If
+	Vmax_recursion_depth is exceeded, call unwind_protect::run_frame
+	before returning.
 
 1999-10-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* cutils.c (do_octave_usleep): Handle useconds > 1e6.
 
 	* variables.h (is_valid_function): Provide default values for the
 	string argument.
 
diff --git a/src/DLD-FUNCTIONS/besselj.cc b/src/DLD-FUNCTIONS/besselj.cc
--- a/src/DLD-FUNCTIONS/besselj.cc
+++ b/src/DLD-FUNCTIONS/besselj.cc
@@ -506,14 +506,20 @@ the same size as the result.\n\
 	}
     }
   else
     print_usage ("airy");
 
   return retval;
 }
 
+INSTALL_DLD_FCNS (INSTALL_DLD_FCN (besselj);
+		  INSTALL_DLD_FCN (bessely);
+		  INSTALL_DLD_FCN (besseli);
+		  INSTALL_DLD_FCN (besselk);
+		  INSTALL_DLD_FCN (besselh);
+		  INSTALL_DLD_FCN (airy);)
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
-
diff --git a/src/DLD-FUNCTIONS/dassl.cc b/src/DLD-FUNCTIONS/dassl.cc
--- a/src/DLD-FUNCTIONS/dassl.cc
+++ b/src/DLD-FUNCTIONS/dassl.cc
@@ -103,16 +103,40 @@ dassl_user_function (const ColumnVector&
 	}
       else
 	gripe_user_supplied_eval ("dassl");
     }
 
   return retval;
 }
 
+#define DASSL_ABORT() \
+  do \
+    { \
+      unwind_protect::run_frame ("Fdassl"); \
+      return retval; \
+    } \
+  while (0)
+
+#define DASSL_ABORT1(msg) \
+  do \
+    { \
+      ::error ("dassl: " ## msg); \
+      DASSL_ABORT (); \
+    } \
+  while (0)
+
+#define DASSL_ABORT2(fmt, arg) \
+  do \
+    { \
+      ::error ("dassl: " ## fmt, arg); \
+      DASSL_ABORT (); \
+    } \
+  while (0)
+
 DEFUN_DLD (dassl, args, ,
   "dassl (\"function_name\", x_0, xdot_0, t_out)\n\
 dassl (F, X_0, XDOT_0, T_OUT, T_CRIT)\n\
 \n\
 The first argument is the name of the function to call to\n\
 compute the vector of residuals.  It must have the form\n\
 \n\
   res = f (x, xdot, t)\n\
@@ -122,77 +146,59 @@ where x, xdot, and res are vectors, and 
   octave_value_list retval;
 
   unwind_protect::begin_frame ("Fdassl");
 
   unwind_protect_int (call_depth);
   call_depth++;
 
   if (call_depth > 1)
-    {
-      error ("dassl: invalid recursive call");
-      return retval;
-    }
+    DASSL_ABORT1 ("invalid recursive call");
 
   int nargin = args.length ();
 
   if (nargin > 3 && nargin < 6)
     {
       dassl_fcn = extract_function
 	(args(0), "dassl", "__dassl_fcn__",
 	 "function res = __dassl_fcn__ (x, xdot, t) res = ",
 	 "; endfunction");
 
       if (! dassl_fcn)
-	return retval;
+	DASSL_ABORT ();
 
       ColumnVector state = args(1).vector_value ();
 
       if (error_state)
-	{
-	  error ("dassl: expecting state vector as second argument");
-	  return retval;
-	}
+	DASSL_ABORT1 ("expecting state vector as second argument");
 
       ColumnVector deriv = args(2).vector_value ();
 
       if (error_state)
-	{
-	  error ("dassl: expecting derivative vector as third argument");
-	  return retval;
-	}
+	DASSL_ABORT1 ("expecting derivative vector as third argument");
 
       ColumnVector out_times = args(3).vector_value ();
 
       if (error_state)
-	{
-	  error ("dassl: expecting output time vector as fourth argument");
-	  return retval;
-	}
+	DASSL_ABORT1 ("expecting output time vector as fourth argument");
 
       ColumnVector crit_times;
       int crit_times_set = 0;
       if (nargin > 4)
 	{
 	  crit_times = args(4).vector_value ();
 
 	  if (error_state)
-	    {
-	      error ("dassl: expecting critical time vector as fifth argument");
-	      return retval;
-	    }
+	    DASSL_ABORT1 ("expecting critical time vector as fifth argument");
 
 	  crit_times_set = 1;
 	}
 
       if (state.capacity () != deriv.capacity ())
-	{
-	  error ("dassl: x and xdot must have the same size");
-	  return retval;
-	}
+	DASSL_ABORT1 ("x and xdot must have the same size");
 
       double tzero = out_times (0);
 
       DAEFunc func (dassl_user_function);
       DASSL dae (state, deriv, tzero, func);
       dae.copy (dassl_opts);
 
       Matrix output;
@@ -380,29 +386,16 @@ to the shortest match.")
 	}
     }
 
   print_usage ("dassl_options");
 
   return retval;
 }
 
-#define DLD_INSTALLER_FCN() \
-  bool \
-  FSoctave_install_dld_functions (void)
-
-#define INSTALL_DLD_FCN(name) \
-  if (! FS ## name ()) \
-    return false
-
-DLD_INSTALLER_FCN ()
-{
-  INSTALL_DLD_FCN (dassl);
-  INSTALL_DLD_FCN (dassl_options);
-
-  return true;
-}
+INSTALL_DLD_FCNS (INSTALL_DLD_FCN (dassl);
+		  INSTALL_DLD_FCN (dassl_options);)
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/DLD-FUNCTIONS/fsolve.cc b/src/DLD-FUNCTIONS/fsolve.cc
--- a/src/DLD-FUNCTIONS/fsolve.cc
+++ b/src/DLD-FUNCTIONS/fsolve.cc
@@ -119,16 +119,40 @@ fsolve_user_function (const ColumnVector
 	}
       else
 	gripe_user_supplied_eval ("fsolve");
     }
 
   return retval;
 }
 
+#define FSOLVE_ABORT() \
+  do \
+    { \
+      unwind_protect::run_frame ("Ffsolve"); \
+      return retval; \
+    } \
+  while (0)
+
+#define FSOLVE_ABORT1(msg) \
+  do \
+    { \
+      ::error ("fsolve: " ## msg); \
+      FSOLVE_ABORT (); \
+    } \
+  while (0)
+
+#define FSOLVE_ABORT2(fmt, arg) \
+  do \
+    { \
+      ::error ("fsolve: " ## fmt, arg); \
+      FSOLVE_ABORT (); \
+    } \
+  while (0)
+
 DEFUN_DLD (fsolve, args, nargout,
   "Solve nonlinear equations using Minpack.  Usage:\n\
 \n\
   [X, INFO] = fsolve (F, X0)\n\
 \n\
 Where the first argument is the name of the  function to call to\n\
 compute the vector of function values.  It must have the form\n\
 \n\
@@ -139,38 +163,32 @@ where y and x are vectors.")
   octave_value_list retval;
 
   unwind_protect::begin_frame ("Ffsolve");
 
   unwind_protect_int (call_depth);
   call_depth++;
 
   if (call_depth > 1)
-    {
-      error ("fsolve: invalid recursive call");
-      return retval;
-    }
+    FSOLVE_ABORT1 ("invalid recursive call");
 
   int nargin = args.length ();
 
   if (nargin == 2 && nargout < 4)
     {
       fsolve_fcn = extract_function (args(0), "fsolve", "__fsolve_fcn__",
 				    "function y = __fsolve_fcn__ (x) y = ",
 				    "; endfunction");
       if (! fsolve_fcn)
-	return retval;
+	FSOLVE_ABORT ();
 
       ColumnVector x = args(1).vector_value ();
 
       if (error_state)
-	{
-	  error ("fsolve: expecting vector as second argument");
-	  return retval;
-	}
+	FSOLVE_ABORT1 ("expecting vector as second argument");
 
       if (nargin > 2)
 	warning ("fsolve: ignoring extra arguments");
 
       if (nargout > 2)
 	warning ("fsolve: can't compute path output yet");
 
       NLFunc foo_fcn (fsolve_user_function);
@@ -339,29 +357,16 @@ to the shortest match.")
 	}
     }
 
   print_usage ("fsolve_options");
 
   return retval;
 }
 
-#define DLD_INSTALLER_FCN() \
-  bool \
-  FSoctave_install_dld_functions (void)
-
-#define INSTALL_DLD_FCN(name) \
-  if (! FS ## name ()) \
-    return false
-
-DLD_INSTALLER_FCN ()
-{
-  INSTALL_DLD_FCN (fsolve);
-  INSTALL_DLD_FCN (fsolve_options);
-
-  return true;
-}
+INSTALL_DLD_FCNS (INSTALL_DLD_FCN (fsolve);
+		  INSTALL_DLD_FCN (fsolve_options);)
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/DLD-FUNCTIONS/getgrent.cc b/src/DLD-FUNCTIONS/getgrent.cc
--- a/src/DLD-FUNCTIONS/getgrent.cc
+++ b/src/DLD-FUNCTIONS/getgrent.cc
@@ -211,13 +211,19 @@ Close the group database.\n\
       retval(1) = msg;
     }
   else
     print_usage ("endgrent");
 
   return retval;
 }
 
+INSTALL_DLD_FCNS (INSTALL_DLD_FCN (getgrent);
+		  INSTALL_DLD_FCN (getgrgid);
+		  INSTALL_DLD_FCN (getgrnam);
+		  INSTALL_DLD_FCN (setgrent);
+		  INSTALL_DLD_FCN (endgrent);)
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/DLD-FUNCTIONS/getpwent.cc b/src/DLD-FUNCTIONS/getpwent.cc
--- a/src/DLD-FUNCTIONS/getpwent.cc
+++ b/src/DLD-FUNCTIONS/getpwent.cc
@@ -215,13 +215,19 @@ Close the password database.\n\
       retval(1) = msg;
     }
   else
     print_usage ("endpwent");
 
   return retval;
 }
 
+INSTALL_DLD_FCNS (INSTALL_DLD_FCN (getpwent);
+		  INSTALL_DLD_FCN (getpwuid);
+		  INSTALL_DLD_FCN (getpwnam);
+		  INSTALL_DLD_FCN (setpwent);
+		  INSTALL_DLD_FCN (endpwent);)
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/DLD-FUNCTIONS/inv.cc b/src/DLD-FUNCTIONS/inv.cc
--- a/src/DLD-FUNCTIONS/inv.cc
+++ b/src/DLD-FUNCTIONS/inv.cc
@@ -106,13 +106,16 @@ DEFUN_DLD (inv, args, ,
 // dynamic linking.
 
 DEFUN_DLD (inverse, args, nargout,
   "inverse (X): inverse of a square matrix")
 {
   return Finv (args, nargout);
 }
 
+INSTALL_DLD_FCNS (INSTALL_DLD_FCN (inv);
+		  INSTALL_DLD_FCN (inverse);)
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/DLD-FUNCTIONS/log.cc b/src/DLD-FUNCTIONS/log.cc
--- a/src/DLD-FUNCTIONS/log.cc
+++ b/src/DLD-FUNCTIONS/log.cc
@@ -254,13 +254,16 @@ DEFUN_DLD (sqrtm, args, ,
   else
     {
       gripe_wrong_type_arg ("sqrtm", arg);
     }
 
   return retval;
 }
 
+INSTALL_DLD_FCNS (INSTALL_DLD_FCN (logm);
+		  INSTALL_DLD_FCN (sqrtm);)
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/DLD-FUNCTIONS/lsode.cc b/src/DLD-FUNCTIONS/lsode.cc
--- a/src/DLD-FUNCTIONS/lsode.cc
+++ b/src/DLD-FUNCTIONS/lsode.cc
@@ -127,16 +127,40 @@ lsode_user_jacobian (const ColumnVector&
 	}
       else
 	gripe_user_supplied_eval ("lsode");
     }
 
   return retval;
 }
 
+#define LSODE_ABORT() \
+  do \
+    { \
+      unwind_protect::run_frame ("Flsode"); \
+      return retval; \
+    } \
+  while (0)
+ 
+#define LSODE_ABORT1(msg) \
+  do \
+    { \
+      ::error ("lsode: " ## msg); \
+      LSODE_ABORT (); \
+    } \
+  while (0)
+
+#define LSODE_ABORT2(fmt, arg) \
+  do \
+    { \
+      ::error ("lsode: " ## fmt, arg); \
+      LSODE_ABORT (); \
+    } \
+  while (0)
+
 DEFUN_DLD (lsode, args, nargout,
   "lsode (F, X0, T_OUT, T_CRIT)\n\
 \n\
 The first argument is the name of the function to call to\n\
 compute the vector of right hand sides.  It must have the form\n\
 \n\
   xdot = f (x, t)\n\
 \n\
@@ -145,20 +169,17 @@ where xdot and x are vectors and t is a 
   octave_value_list retval;
 
   unwind_protect::begin_frame ("Flsode");
 
   unwind_protect_int (call_depth);
   call_depth++;
 
   if (call_depth > 1)
-    {
-      error ("lsode: invalid recursive call");
-      return retval;
-    }
+    LSODE_ABORT1 ("invalid recursive call");
 
   int nargin = args.length ();
 
   if (nargin > 2 && nargin < 5 && nargout < 2)
     {
       octave_value f_arg = args(0);
 
       switch (f_arg.rows ())
@@ -191,51 +212,42 @@ where xdot and x are vectors and t is a 
 		    if (! lsode_jac)
 		      lsode_fcn = 0;
 		  }
 	      }
 	  }
 	  break;
 
 	default:
-	  error ("lsode: first arg should be a string or 2-element string array");
-	  break;
+	  LSODE_ABORT1
+	    ("first arg should be a string or 2-element string array");
 	}
 
       if (error_state || ! lsode_fcn)
-	return retval;
+	LSODE_ABORT ();
 
       ColumnVector state = args(1).vector_value ();
 
       if (error_state)
-	{
-	  error ("lsode: expecting state vector as second argument");
-	  return retval;
-	}
+	LSODE_ABORT1 ("expecting state vector as second argument");
 
       ColumnVector out_times = args(2).vector_value ();
 
       if (error_state)
-	{
-	  error ("lsode: expecting output time vector as third argument");
-	  return retval;
-	}
+	LSODE_ABORT1 ("expecting output time vector as third argument");
 
       ColumnVector crit_times;
 
       int crit_times_set = 0;
       if (nargin > 3)
 	{
 	  crit_times = args(3).vector_value ();
 
 	  if (error_state)
-	    {
-	      error ("lsode: expecting critical time vector as fourth argument");
-	      return retval;
-	    }
+	    LSODE_ABORT1 ("expecting critical time vector as fourth argument");
 
 	  crit_times_set = 1;
 	}
 
       double tzero = out_times (0);
       int nsteps = out_times.capacity ();
 
       ODEFunc func (lsode_user_function);
@@ -475,29 +487,16 @@ to the shortest match.")
 	}
     }
 
   print_usage ("lsode_options");
 
   return retval;
 }
 
-#define DLD_INSTALLER_FCN() \
-  bool \
-  FSoctave_install_dld_functions (void)
-
-#define INSTALL_DLD_FCN(name) \
-  if (! FS ## name ()) \
-    return false
-
-DLD_INSTALLER_FCN ()
-{
-  INSTALL_DLD_FCN (lsode);
-  INSTALL_DLD_FCN (lsode_options);
-
-  return true;
-}
+INSTALL_DLD_FCNS (INSTALL_DLD_FCN (lsode);
+		  INSTALL_DLD_FCN (lsode_options);)
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/DLD-FUNCTIONS/minmax.cc b/src/DLD-FUNCTIONS/minmax.cc
--- a/src/DLD-FUNCTIONS/minmax.cc
+++ b/src/DLD-FUNCTIONS/minmax.cc
@@ -696,13 +696,16 @@ DEFUN_DLD (max, args, nargout,
 	}
     }
   else
     panic_impossible ();
 
   return retval;
 }
 
+INSTALL_DLD_FCNS (INSTALL_DLD_FCN (min);
+		  INSTALL_DLD_FCN (max);)
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/DLD-FUNCTIONS/quad.cc b/src/DLD-FUNCTIONS/quad.cc
--- a/src/DLD-FUNCTIONS/quad.cc
+++ b/src/DLD-FUNCTIONS/quad.cc
@@ -87,16 +87,40 @@ quad_user_function (double x)
 	  quad_integration_error = 1;  // XXX FIXME XXX
 	  gripe_user_supplied_eval ("quad");
 	}
     }
 
   return retval;
 }
 
+#define QUAD_ABORT() \
+  do \
+    { \
+      unwind_protect::run_frame ("Fquad"); \
+      return retval; \
+    } \
+  while (0)
+
+#define QUAD_ABORT1(msg) \
+  do \
+    { \
+      ::error ("quad: " ## msg); \
+      QUAD_ABORT (); \
+    } \
+  while (0)
+
+#define QUAD_ABORT2(fmt, arg) \
+  do \
+    { \
+      ::error ("quad: " ## fmt, arg); \
+      QUAD_ABORT (); \
+    } \
+  while (0)
+
 DEFUN_DLD (quad, args, nargout,
   "[V, IER, NFUN] = quad (F, A, B [, TOL] [, SING])\n\
 \n\
 Where the first argument is the name of the  function to call to\n\
 compute the value of the integrand.  It must have the form\n\
 \n\
   y = f (x)\n\
 \n\
@@ -116,46 +140,37 @@ integrand is singular.")
   octave_value_list retval;
 
   unwind_protect::begin_frame ("Fquad");
 
   unwind_protect_int (call_depth);
   call_depth++;
 
   if (call_depth > 1)
-    {
-      error ("quad: invalid recursive call");
-      return retval;
-    }
+    QUAD_ABORT1 ("invalid recursive call");
 
   int nargin = args.length ();
 
   if (nargin > 2 && nargin < 6 && nargout < 5)
     {
       quad_fcn = extract_function (args(0), "quad", "__quad_fcn__",
 				   "function y = __quad_fcn__ (x) y = ",
 				   "; endfunction");
       if (! quad_fcn)
-	return retval;
+	QUAD_ABORT ();
 
       double a = args(1).double_value ();
 
       if (error_state)
-	{
-	  error ("quad: expecting second argument to be a scalar");
-	  return retval;
-	}
+	QUAD_ABORT1 ("expecting second argument to be a scalar");
 
       double b = args(2).double_value ();
 
       if (error_state)
-	{
-	  error ("quad: expecting third argument to be a scalar");
-	  return retval;
-	}
+	QUAD_ABORT1 ("expecting third argument to be a scalar");
 
       int indefinite = 0;
       IndefQuad::IntegralType indef_type = IndefQuad::doubly_infinite;
       double bound = 0.0;
       if (xisinf (a) && xisinf (b))
 	{
 	  indefinite = 1;
 	  indef_type = IndefQuad::doubly_infinite;
@@ -181,52 +196,42 @@ integrand is singular.")
       double reltol = 1e-6;
       ColumnVector tol (2);
       ColumnVector sing;
       int have_sing = 0;
       switch (nargin)
 	{
 	case 5:
 	  if (indefinite)
-	    {
-	      error("quad: singularities not allowed on infinite intervals");
-	      return retval;
-	    }
+	    QUAD_ABORT1 ("singularities not allowed on infinite intervals");
 
 	  have_sing = 1;
 
 	  sing = args(4).vector_value ();
 
 	  if (error_state)
-	    {
-	      error ("quad: expecting vector of singularities as fourth argument");
-	      return retval;
-	    }
+	    QUAD_ABORT1 ("expecting vector of singularities as fourth argument");
 
 	case 4:
 	  tol = args(3).vector_value ();
 
 	  if (error_state)
-	    {
-	      error ("quad: expecting vector of tolerances as fifth argument");
-	      return retval;
-	    }
+	    QUAD_ABORT1 ("expecting vector of tolerances as fifth argument");
 
 	  switch (tol.capacity ())
 	    {
 	    case 2:
 	      reltol = tol (1);
 
 	    case 1:
 	      abstol = tol (0);
 	      break;
 
 	    default:
-	      error ("quad: expecting tol to contain no more than two values");
-	      return retval;
+	      QUAD_ABORT1 ("expecting tol to contain no more than two values");
 	    }
 
 	case 3:
 	  if (indefinite)
 	    {
 	      IndefQuad iq (quad_user_function, bound, indef_type, abstol, reltol);
 	      iq.set_options (quad_opts);
 	      val = iq.integrate (ier, nfun, abserr);
@@ -254,20 +259,17 @@ integrand is singular.")
 	}
 
       retval(3) = abserr;
       retval(2) = static_cast<double> (nfun);
       retval(1) = static_cast<double> (ier);
       retval(0) = val;
     }
   else
-    {
-      print_usage ("quad");
-      return retval;
-    }
+    print_usage ("quad");
 
   unwind_protect::run_frame ("Fquad");
 
   return retval;
 }
 
 typedef void (Quad_options::*d_set_opt_mf) (double);
 typedef double (Quad_options::*d_get_opt_mf) (void);
@@ -412,29 +414,16 @@ to the shortest match.")
 	}
     }
 
   print_usage ("quad_options");
 
   return retval;
 }
 
-#define DLD_INSTALLER_FCN() \
-  bool \
-  FSoctave_install_dld_functions (void)
-
-#define INSTALL_DLD_FCN(name) \
-  if (! FS ## name ()) \
-    return false
-
-DLD_INSTALLER_FCN ()
-{
-  INSTALL_DLD_FCN (quad);
-  INSTALL_DLD_FCN (quad_options);
-
-  return true;
-}
+INSTALL_DLD_FCNS (INSTALL_DLD_FCN (quad);
+		  INSTALL_DLD_FCN (quad_options);)
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/DLD-FUNCTIONS/rand.cc b/src/DLD-FUNCTIONS/rand.cc
--- a/src/DLD-FUNCTIONS/rand.cc
+++ b/src/DLD-FUNCTIONS/rand.cc
@@ -403,13 +403,16 @@ See also: rand")
       retval = do_rand (args, nargin);
 
       unwind_protect::run_frame ("randn");
     }
 
   return retval;
 }
 
+INSTALL_DLD_FCNS (INSTALL_DLD_FCN (rand);
+		  INSTALL_DLD_FCN (randn);)
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/DLD-FUNCTIONS/time.cc b/src/DLD-FUNCTIONS/time.cc
--- a/src/DLD-FUNCTIONS/time.cc
+++ b/src/DLD-FUNCTIONS/time.cc
@@ -391,13 +391,19 @@ Year (1970-).\n\
 	error ("strftime: expecting format string as first argument");
     }
   else
     print_usage ("strftime");
 
   return retval;
 }
 
+INSTALL_DLD_FCNS (INSTALL_DLD_FCN (time);
+		  INSTALL_DLD_FCN (gmtime);
+		  INSTALL_DLD_FCN (localtime);
+		  INSTALL_DLD_FCN (mktime);
+		  INSTALL_DLD_FCN (strftime);)
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/defun-dld.h b/src/defun-dld.h
--- a/src/defun-dld.h
+++ b/src/defun-dld.h
@@ -50,16 +50,36 @@ Software Foundation, 59 Temple Place - S
 
 #else
 
 #define DEFUN_DLD(name, args_name, nargout_name, doc) \
   DECLARE_FUN (name, args_name, nargout_name); \
   DEFINE_FUN_INSTALLER_FUN (name, doc) \
   DECLARE_FUN (name, args_name, nargout_name)
 
+#if (defined (OCTAVE_LITE) && defined (WITH_DYNAMIC_LINKING))
+
+#define INSTALL_DLD_FCNS(body) \
+  bool \
+  FSoctave_install_dld_functions (void) \
+  { \
+    body \
+    return true; \
+  }
+
+#else
+
+#define INSTALL_DLD_FCNS(body)
+
+#endif
+
+#define INSTALL_DLD_FCN(name) \
+  if (! FS ## name ()) \
+    return false
+
 #endif
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -1091,26 +1091,31 @@ read_mat_ascii_data (istream& is, const 
 		{
 		  string buf = get_mat_data_input_line (is);
 
 		  istrstream tmp_stream (buf.c_str ());
 
 		  for (int j = 0; j < nc; j++)
 		    {
 		      tmp_stream >> d;
-		      if (is)
+
+		      if (tmp_stream)
 			tmp.elem (i, j) = d;
 		      else
-			goto done;
+			{
+			  error ("load: failed to read matrix from file `%s'",
+				 filename.c_str ());
+
+			  return name;
+			}
+
 		    }
 		}
 	    }
 
-	done:
-
 	  if (is)
 	    {
 	      tc = tmp;
 
 	      name = strsave (varname.c_str ());
 	    }
 	  else
 	    error ("load: failed to read matrix from file `%s'",
