# HG changeset patch
# User Rik <rik@octave.org>
# Date 1348945064 25200
#      Sat Sep 29 11:57:44 2012 -0700
# Node ID 4d960b078272060550a98f506f6dfff300f2e808
# Parent  219479b461b8705b0724664c12fa426f775ee100
build: Remove unnecessary AC_CHECK_FUNCS calls.

* configure.ac: Remove unnecessary AC_CHECK_FUNCS calls.
Segregate some AC_CHECK_FUNCS calls to only be tested when building GUI.
Segregate some AC_CHECK_FUNCS calls to only be tested on certain platforms.

* __magick_read__.cc: Shorten comment to less than 80 characters.

* ov-ch-mat.cc: Add workaround for toascii if function is not available.

* lo-mappers.cc: Use log2f and exp2f if they are available.  Otherwise,
fall back to double versions log2 and exp2 or other workaround.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -873,16 +873,19 @@ PKG_CHECK_EXISTS([$magick++], [
       ])
     if test $octave_cv_func_magick_colorrgb = yes; then
       warn_magick=
     fi
   ])
   AC_LANG_POP(C++)
   CPPFLAGS="$save_CPPFLAGS"
   LIBS="$save_LIBS"
+
+  AC_CHECK_FUNCS([setlocale], [],
+                 [warn_magick="$magick++ requires setlocale function.  The imread function for reading image files will not be fully functional."])
 ])
 
 if test -z "$warn_magick"; then
   AC_DEFINE(HAVE_MAGICK, 1,
     [Define to 1 if Graphics/ImageMagick++ is available.])
 else
   MAGICK_CPPFLAGS=
   MAGICK_LDFLAGS=
@@ -1908,28 +1911,34 @@ AM_PROG_CC_C_O
 ### gnulib initialization: part 2
 ### After all include and path modifications have taken place
 ### and at the same priority level as function checks.
 
 gl_INIT
 
 ### Checks for functions and variables.
 
+dnl These checks define/undefine HAVE_FUNCNAME in config.h.
+dnl Code tests HAVE_FUNCNAME and either uses function or provides workaround.
 dnl Use multiple AC_CHECKs to avoid line continuations '\' in list
-AC_CHECK_FUNCS([basename canonicalize_file_name chmod dup2])
+AC_CHECK_FUNCS([canonicalize_file_name dup2])
 AC_CHECK_FUNCS([endgrent endpwent execvp expm1 expm1f fork])
 AC_CHECK_FUNCS([getegid geteuid getgid getgrent getgrgid getgrnam])
-AC_CHECK_FUNCS([getpgrp getpid getppid getpwent getpwuid getuid getwd])
-AC_CHECK_FUNCS([isascii kill lgamma lgammaf lgamma_r lgammaf_r])
-AC_CHECK_FUNCS([localtime_r log1p log1pf mkstemp modf pipe pow putenv])
-AC_CHECK_FUNCS([realpath resolvepath rindex roundl select setgrent])
-AC_CHECK_FUNCS([setlocale setpwent setvbuf siglongjmp])
-AC_CHECK_FUNCS([sqrt strsignal tempnam tgammaf umask])
-AC_CHECK_FUNCS([uname utime x_utime waitpid])
-AC_CHECK_FUNCS([_chmod _kbhit _utime32])
+AC_CHECK_FUNCS([getpgrp getpid getppid getpwent getpwuid getuid])
+AC_CHECK_FUNCS([kill lgamma lgammaf lgamma_r lgammaf_r])
+AC_CHECK_FUNCS([log1p log1pf pipe])
+AC_CHECK_FUNCS([realpath resolvepath roundl])
+AC_CHECK_FUNCS([select setgrent setpwent siglongjmp strsignal])
+AC_CHECK_FUNCS([tempnam tgammaf toascii])
+AC_CHECK_FUNCS([umask uname waitpid])
+AC_CHECK_FUNCS([_kbhit])
+
+dnl There are no workarounds in the code for missing these functions.
+AC_CHECK_FUNCS([modf pow putenv sqrt sqrtf], [],
+               [AC_MSG_ERROR([Missing function required to build Octave])])
 
 ## exp2, round, tgamma function checks
 AC_LANG_PUSH(C++)
 AC_CHECK_DECLS([exp2, round, tgamma], [], [], [[#include <cmath>]])
 AC_CHECK_FUNCS([exp2 round tgamma])
 AH_VERBATIM([Z_FUNCS_AND_DECLS], [
 #if defined (__cplusplus)
 extern "C" {
@@ -2032,16 +2041,24 @@ case $canonical_host_type in
         int x = M_LN2;]])],
       [AC_MSG_RESULT([no])],
       [AC_DEFINE(_USE_MATH_DEFINES, 1,
         [Define to 1 if your system needs to define math constants like M_LN2.])
         AC_MSG_RESULT([yes])])
   ;;
 esac
 
+## Windows-specific use of functions
+case $canonical_host_type in
+  *-*-mingw* | *-*-msdosmsvc*)
+    AC_CHECK_FUNCS([setvbuf], [],
+                   [AC_MSG_ERROR([Missing function required to build Octave])])
+    ;;
+esac
+
 ## Cygwin kluge for getrusage.
 AC_CHECK_FUNCS([getrusage])
 case $canonical_host_type in
   *-*-cygwin*)
     AC_DEFINE(RUSAGE_TIMES_ONLY, 1,
       [Define to 1 if your struct rusage only has time information.])
   ;;
 esac
@@ -2265,26 +2282,31 @@ if test $build_gui = true; then
   if test $octave_cv_lib_qscintilla = no; then
     AC_MSG_ERROR([Qscintilla library is required to build the GUI])
   fi
 
   ## Check for Qt functions which have changed their API over time
   OCTAVE_CHECK_FUNC_FINDFIRST_MODERN
   OCTAVE_CHECK_FUNC_SETPLACEHOLDERTEXT
 
+  AC_CHECK_FUNCS([setlocale], [],
+                 [AC_MSG_ERROR([Missing function required to build GUI])])
+
   case $canonical_host_type in
     *-*-mingw* | *-*-msdosmsvc*)
       win32_terminal=yes
+      AC_CHECK_FUNCS([setvbuf], [],
+                     [AC_MSG_ERROR([Missing function required to build GUI])])
       ;;
     *)
       AC_CHECK_HEADERS([pty.h libutil.h util.h])
       AC_SEARCH_LIBS([openpty], [util],
         [AC_DEFINE(HAVE_OPENPTY, [], [Define whether openpty exists])])
-      AC_CHECK_FUNCS([chown ftruncate mmap munmap], [],
-                     [AC_MSG_ERROR([Missing function required by GUI])])
+      AC_CHECK_FUNCS([chmod chown ftruncate mmap munmap], [],
+                     [AC_MSG_ERROR([Missing function required to build GUI])])
       ;;
   esac
 else
   ## GUI disabled.  Eliminate building GUIDIR directory
   GUIDIR=
 fi
 AM_CONDITIONAL([AMCOND_BUILD_GUI], [test $build_gui = true])
 AM_CONDITIONAL([WIN32_TERMINAL], [test $win32_terminal = yes])
diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -376,17 +376,17 @@ static void
 maybe_initialize_magick (void)
 {
 #ifdef HAVE_MAGICK
 
   static bool initialized = false;
 
   if (! initialized)
     {
-      // Save the locale as GraphicsMagick might change this (depending on version)
+      // Save locale as GraphicsMagick might change this (depending on version)
       const char *static_locale = setlocale (LC_ALL, NULL);
       const std::string locale (static_locale);
 
       std::string program_name = octave_env::get_program_invocation_name ();
 
       Magick::InitializeMagick (program_name.c_str ());
 
       // Restore locale from before GraphicsMagick initialisation
diff --git a/libinterp/octave-value/ov-ch-mat.cc b/libinterp/octave-value/ov-ch-mat.cc
--- a/libinterp/octave-value/ov-ch-mat.cc
+++ b/libinterp/octave-value/ov-ch-mat.cc
@@ -147,27 +147,33 @@ octave_char_matrix::as_mxArray (void) co
   const char *p = matrix.data ();
 
   for (mwIndex i = 0; i < nel; i++)
     pr[i] = p[i];
 
   return retval;
 }
 
-// The C++ standard guarantees cctype defines functions, not macros (and hence macros *CAN'T*
-// be defined if only cctype is included)
-// so there's no need to f*ck around. The exceptions are isascii and toascii,
-// which are not C++.
+// The C++ standard guarantees cctype defines functions, not macros
+// (and hence macros *CAN'T* be defined if only cctype is included)
+// so there's no need to f*ck around.
+// The exceptions are isascii and toascii, which are not C++.
 // Oddly enough, all those character functions are int (*) (int), even
-// in C++. Wicked!
+// in C++.  Wicked!
 static inline int xisascii (int c)
 { return isascii (c); }
 
 static inline int xtoascii (int c)
-{ return toascii (c); }
+{
+#ifdef HAVE_TOASCII
+  return toascii (c);
+#else
+  return (c & 0x7F);
+#endif
+}
 
 octave_value
 octave_char_matrix::map (unary_mapper_t umap) const
 {
   switch (umap)
     {
 #define STRING_MAPPER(UMAP,FCN,TYPE) \
     case umap_ ## UMAP: \
diff --git a/liboctave/numeric/lo-mappers.cc b/liboctave/numeric/lo-mappers.cc
--- a/liboctave/numeric/lo-mappers.cc
+++ b/liboctave/numeric/lo-mappers.cc
@@ -312,17 +312,19 @@ signum (float x)
     tmp = 1.0;
 
   return xisnan (x) ? octave_Float_NaN : tmp;
 }
 
 float
 xlog2 (float x)
 {
-#if defined (HAVE_LOG2)
+#if defined (HAVE_LOG2F)
+  return log2f (x);
+#elif defined (HAVE_LOG2)
   return log2 (x);
 #else
 #if defined (M_LN2)
   static float ln2 = M_LN2;
 #else
   static float ln2 = log2 (2);
 #endif
 
@@ -340,17 +342,19 @@ xlog2 (const FloatComplex& x)
 #endif
 
   return std::log (x) / ln2;
 }
 
 float
 xexp2 (float x)
 {
-#if defined (HAVE_EXP2)
+#if defined (HAVE_EXP2F)
+  return exp2f (x);
+#elif defined (HAVE_EXP2)
   return exp2 (x);
 #else
 #if defined (M_LN2)
   static float ln2 = M_LN2;
 #else
   static float ln2 = log2 (2);
 #endif
 
