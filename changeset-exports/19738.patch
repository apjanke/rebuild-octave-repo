# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1424208652 18000
#      Tue Feb 17 16:30:52 2015 -0500
# Node ID 9155bab86647ac9d2e617d2b4e1c65deddd882e7
# Parent  8c2b30cb60013a6d46b93714b9cba323daccb238
use 0.0f style constants instead of static_cast<float> (0.0)

* data.cc, det.cc, op-fcm-fcs.cc, op-fcs-fcm.cc, op-fcs-fcs.cc,
op-fcs-fm.cc, op-fcs-fs.cc, op-fm-fcs.cc, op-fs-fcs.cc,
fCDiagMatrix.cc, lo-mappers.cc, mx-ops: Use 0.0f style constants
instead of static_cast<float> (0.0).

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -4663,17 +4663,17 @@ either @qcode{\"double\"} or @qcode{\"si
                   if (xisnan (val) || xisinf (val))
                     epsval(i) = lo_ieee_nan_value ();
                   else if (val < std::numeric_limits<float>::min ())
                     epsval(i) = powf (2.0, -149e0);
                   else
                     {
                       int expon;
                       gnulib::frexpf (val, &expon);
-                      epsval(i) = std::pow (static_cast <float> (2.0),
+                      epsval(i) = std::pow (2.0f,
                                             static_cast <float> (expon - 24));
                     }
                 }
               retval = epsval;
             }
         }
       else
         {
diff --git a/libinterp/corefcn/det.cc b/libinterp/corefcn/det.cc
--- a/libinterp/corefcn/det.cc
+++ b/libinterp/corefcn/det.cc
@@ -152,17 +152,17 @@ For that, use any of the condition numbe
           // singular matrices.
           FloatMatrix m = arg.float_matrix_value ();
           if (! error_state)
             {
               MAYBE_CAST (rep, octave_float_matrix);
               MatrixType mtype = rep ? rep -> matrix_type () : MatrixType ();
               FloatDET det = m.determinant (mtype, info, rcond);
               retval(1) = rcond;
-              retval(0) = info == -1 ? static_cast<float>(0.0) : det.value ();
+              retval(0) = info == -1 ? 0.0f : det.value ();
               if (rep) rep->matrix_type (mtype);
             }
         }
       else if (arg.is_complex_type ())
         {
           octave_idx_type info;
           float rcond = 0.0;
           // Always compute rcond, so we can detect numerically
diff --git a/libinterp/operators/op-fcm-fcs.cc b/libinterp/operators/op-fcm-fcs.cc
--- a/libinterp/operators/op-fcm-fcs.cc
+++ b/libinterp/operators/op-fcm-fcs.cc
@@ -47,17 +47,17 @@ DEFNDBINOP_OP (mul, float_complex_matrix
 
 DEFBINOP (div, float_complex_matrix, float_complex)
 {
   CAST_BINOP_ARGS (const octave_float_complex_matrix&,
                    const octave_float_complex&);
 
   FloatComplex d = v2.float_complex_value ();
 
-  if (d == static_cast<float>(0.0))
+  if (d == 0.0f)
     gripe_divide_by_zero ();
 
   return octave_value (v1.float_complex_array_value () / d);
 }
 
 DEFBINOP_FN (pow, float_complex_matrix, float_complex, xpow)
 
 DEFBINOP (ldiv, float_complex_matrix, float_complex)
@@ -92,17 +92,17 @@ DEFNDBINOP_OP (el_mul, float_complex_mat
 
 DEFBINOP (el_div, float_complex_matrix, float_complex)
 {
   CAST_BINOP_ARGS (const octave_float_complex_matrix&,
                    const octave_float_complex&);
 
   FloatComplex d = v2.float_complex_value ();
 
-  if (d == static_cast<float>(0.0))
+  if (d == 0.0f)
     gripe_divide_by_zero ();
 
   return octave_value (v1.float_complex_array_value () / d);
 }
 
 DEFNDBINOP_FN (el_pow, float_complex_matrix, float_complex,
                float_complex_array, float_complex, elem_xpow)
 
diff --git a/libinterp/operators/op-fcs-fcm.cc b/libinterp/operators/op-fcs-fcm.cc
--- a/libinterp/operators/op-fcs-fcm.cc
+++ b/libinterp/operators/op-fcs-fcm.cc
@@ -64,17 +64,17 @@ DEFBINOP_FN (pow, float_complex, float_c
 
 DEFBINOP (ldiv, float_complex, float_complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_float_complex&,
                    const octave_float_complex_matrix&);
 
   FloatComplex d = v1.float_complex_value ();
 
-  if (d == static_cast<float>(0.0))
+  if (d == 0.0f)
     gripe_divide_by_zero ();
 
   return octave_value (v2.float_complex_array_value () / d);
 }
 
 DEFNDCMPLXCMPOP_FN (lt, float_complex, float_complex_matrix, float_complex,
                     float_complex_array, mx_el_lt)
 DEFNDCMPLXCMPOP_FN (le, float_complex, float_complex_matrix, float_complex,
@@ -97,17 +97,17 @@ DEFNDBINOP_FN (el_pow, float_complex, fl
 
 DEFBINOP (el_ldiv, float_complex, float_complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_float_complex&,
                    const octave_float_complex_matrix&);
 
   FloatComplex d = v1.float_complex_value ();
 
-  if (d == static_cast<float>(0.0))
+  if (d == 0.0f)
     gripe_divide_by_zero ();
 
   return octave_value (v2.float_complex_array_value () / d);
 }
 
 DEFNDBINOP_FN (el_and, float_complex, float_complex_matrix, float_complex,
                float_complex_array, mx_el_and)
 DEFNDBINOP_FN (el_or,  float_complex, float_complex_matrix, float_complex,
diff --git a/libinterp/operators/op-fcs-fcs.cc b/libinterp/operators/op-fcs-fcs.cc
--- a/libinterp/operators/op-fcs-fcs.cc
+++ b/libinterp/operators/op-fcs-fcs.cc
@@ -68,31 +68,31 @@ DEFBINOP_OP (sub, float_complex, float_c
 DEFBINOP_OP (mul, float_complex, float_complex, *)
 
 DEFBINOP (div, float_complex, float_complex)
 {
   CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_complex&);
 
   FloatComplex d = v2.float_complex_value ();
 
-  if (d == static_cast<float>(0.0))
+  if (d == 0.0f)
     gripe_divide_by_zero ();
 
   return octave_value (v1.float_complex_value () / d);
 }
 
 DEFBINOP_FN (pow, float_complex, float_complex, xpow)
 
 DEFBINOP (ldiv, float_complex, float_complex)
 {
   CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_complex&);
 
   FloatComplex d = v1.float_complex_value ();
 
-  if (d == static_cast<float>(0.0))
+  if (d == 0.0f)
     gripe_divide_by_zero ();
 
   return octave_value (v2.float_complex_value () / d);
 }
 
 DEFCMPLXCMPOP_OP (lt, float_complex, float_complex, <)
 DEFCMPLXCMPOP_OP (le, float_complex, float_complex, <=)
 DEFCMPLXCMPOP_OP (eq, float_complex, float_complex, ==)
@@ -103,50 +103,50 @@ DEFCMPLXCMPOP_OP (ne, float_complex, flo
 DEFBINOP_OP (el_mul, float_complex, float_complex, *)
 
 DEFBINOP (el_div, float_complex, float_complex)
 {
   CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_complex&);
 
   FloatComplex d = v2.float_complex_value ();
 
-  if (d == static_cast<float>(0.0))
+  if (d == 0.0f)
     gripe_divide_by_zero ();
 
   return octave_value (v1.float_complex_value () / d);
 }
 
 DEFBINOP_FN (el_pow, float_complex, float_complex, xpow)
 
 DEFBINOP (el_ldiv, float_complex, float_complex)
 {
   CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_complex&);
 
   FloatComplex d = v1.float_complex_value ();
 
-  if (d == static_cast<float>(0.0))
+  if (d == 0.0f)
     gripe_divide_by_zero ();
 
   return octave_value (v2.float_complex_value () / d);
 }
 
 DEFBINOP (el_and, float_complex, float_complex)
 {
   CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_complex&);
 
-  return (v1.float_complex_value () != static_cast<float>(0.0) &&
-          v2.float_complex_value () != static_cast<float>(0.0));
+  return (v1.float_complex_value () != 0.0f
+          && v2.float_complex_value () != 0.0f);
 }
 
 DEFBINOP (el_or, float_complex, float_complex)
 {
   CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_complex&);
 
-  return (v1.float_complex_value () != static_cast<float>(0.0) ||
-          v2.float_complex_value () != static_cast<float>(0.0));
+  return (v1.float_complex_value () != 0.0f
+          || v2.float_complex_value () != 0.0f);
 }
 
 DEFNDCATOP_FN (fcs_fcs, float_complex, float_complex, float_complex_array,
                float_complex_array, concat)
 
 DEFNDCATOP_FN (cs_fcs, complex, float_complex, float_complex_array,
                float_complex_array, concat)
 
diff --git a/libinterp/operators/op-fcs-fm.cc b/libinterp/operators/op-fcs-fm.cc
--- a/libinterp/operators/op-fcs-fm.cc
+++ b/libinterp/operators/op-fcs-fm.cc
@@ -64,17 +64,17 @@ DEFBINOP (div, float_complex, float_matr
 DEFBINOP_FN (pow, float_complex, float_matrix, xpow)
 
 DEFBINOP (ldiv, float_complex, float_matrix)
 {
   CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_matrix&);
 
   FloatComplex d = v1.float_complex_value ();
 
-  if (d == static_cast<float>(0.0))
+  if (d == 0.0f)
     gripe_divide_by_zero ();
 
   return octave_value (v2.float_array_value () / d);
 }
 
 DEFNDCMPLXCMPOP_FN (lt, float_complex, float_matrix, float_complex,
                     float_array, mx_el_lt)
 DEFNDCMPLXCMPOP_FN (le, float_complex, float_matrix, float_complex,
@@ -96,17 +96,17 @@ DEFNDBINOP_FN (el_pow, float_complex, fl
                float_array, elem_xpow)
 
 DEFBINOP (el_ldiv, float_complex, float_matrix)
 {
   CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_matrix&);
 
   FloatComplex d = v1.float_complex_value ();
 
-  if (d == static_cast<float>(0.0))
+  if (d == 0.0f)
     gripe_divide_by_zero ();
 
   return octave_value (v2.float_array_value () / d);
 }
 
 DEFNDBINOP_FN (el_and, float_complex, float_matrix, float_complex,
                float_array, mx_el_and)
 DEFNDBINOP_FN (el_or,  float_complex, float_matrix, float_complex,
diff --git a/libinterp/operators/op-fcs-fs.cc b/libinterp/operators/op-fcs-fs.cc
--- a/libinterp/operators/op-fcs-fs.cc
+++ b/libinterp/operators/op-fcs-fs.cc
@@ -59,17 +59,17 @@ DEFBINOP (div, float_complex, float)
 DEFBINOP_FN (pow, float_complex, float_scalar, xpow)
 
 DEFBINOP (ldiv, float_complex, float)
 {
   CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_scalar&);
 
   FloatComplex d = v1.float_complex_value ();
 
-  if (d == static_cast<float>(0.0))
+  if (d == 0.0f)
     gripe_divide_by_zero ();
 
   return octave_value (v2.float_value () / d);
 }
 
 DEFCMPLXCMPOP_OP (lt, float_complex, float_scalar, <)
 DEFCMPLXCMPOP_OP (le, float_complex, float_scalar, <=)
 DEFCMPLXCMPOP_OP (eq, float_complex, float_scalar, ==)
@@ -94,36 +94,34 @@ DEFBINOP (el_div, float_complex, float)
 DEFBINOP_FN (el_pow, float_complex, float_scalar, xpow)
 
 DEFBINOP (el_ldiv, float_complex, float)
 {
   CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_scalar&);
 
   FloatComplex d = v1.float_complex_value ();
 
-  if (d == static_cast<float>(0.0))
+  if (d == 0.0f)
     gripe_divide_by_zero ();
 
   return octave_value (v2.float_value () / d);
 }
 
 DEFBINOP (el_and, float_complex, float)
 {
   CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_scalar&);
 
-  return (v1.float_complex_value () != static_cast<float>(0.0) &&
-          v2.float_value ());
+  return (v1.float_complex_value () != 0.0f && v2.float_value ());
 }
 
 DEFBINOP (el_or, float_complex, float)
 {
   CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_scalar&);
 
-  return (v1.float_complex_value () != static_cast<float>(0.0) ||
-          v2.float_value ());
+  return (v1.float_complex_value () != 0.0f || v2.float_value ());
 }
 
 DEFNDCATOP_FN (fcs_fs, float_complex, float_scalar, float_complex_array,
                float_array, concat)
 
 DEFNDCATOP_FN (cs_fs, complex, float_scalar, float_complex_array,
                float_array, concat)
 
diff --git a/libinterp/operators/op-fm-fcs.cc b/libinterp/operators/op-fm-fcs.cc
--- a/libinterp/operators/op-fm-fcs.cc
+++ b/libinterp/operators/op-fm-fcs.cc
@@ -50,17 +50,17 @@ DEFNDBINOP_OP (sub, float_matrix, float_
 DEFNDBINOP_OP (mul, float_matrix, float_complex, float_array, float_complex, *)
 
 DEFBINOP (div, float_matrix, float_complex)
 {
   CAST_BINOP_ARGS (const octave_float_matrix&, const octave_float_complex&);
 
   FloatComplex d = v2.float_complex_value ();
 
-  if (d == static_cast<float>(0.0))
+  if (d == 0.0f)
     gripe_divide_by_zero ();
 
   return octave_value (v1.float_array_value () / d);
 }
 
 DEFBINOP_FN (pow, float_matrix, float_complex, xpow)
 
 DEFBINOP (ldiv, float_matrix, float_complex)
@@ -94,17 +94,17 @@ DEFNDBINOP_OP (el_mul, float_matrix, flo
                float_complex, *)
 
 DEFBINOP (el_div, float_matrix, float_complex)
 {
   CAST_BINOP_ARGS (const octave_float_matrix&, const octave_float_complex&);
 
   FloatComplex d = v2.float_complex_value ();
 
-  if (d == static_cast<float>(0.0))
+  if (d == 0.0f)
     gripe_divide_by_zero ();
 
   return octave_value (v1.float_array_value () / d);
 }
 
 DEFNDBINOP_FN (el_pow, float_matrix, float_complex, float_array,
                float_complex, elem_xpow)
 
diff --git a/libinterp/operators/op-fs-fcs.cc b/libinterp/operators/op-fs-fcs.cc
--- a/libinterp/operators/op-fs-fcs.cc
+++ b/libinterp/operators/op-fs-fcs.cc
@@ -45,17 +45,17 @@ DEFBINOP_OP (sub, float_scalar, float_co
 DEFBINOP_OP (mul, float_scalar, float_complex, *)
 
 DEFBINOP (div, float_scalar, float_complex)
 {
   CAST_BINOP_ARGS (const octave_float_scalar&, const octave_float_complex&);
 
   FloatComplex d = v2.float_complex_value ();
 
-  if (d == static_cast<float>(0.0))
+  if (d == 0.0f)
     gripe_divide_by_zero ();
 
   return octave_value (v1.float_value () / d);
 }
 
 DEFBINOP_FN (pow, float_scalar, float_complex, xpow)
 
 DEFBINOP (ldiv, float_scalar, float_complex)
@@ -80,17 +80,17 @@ DEFCMPLXCMPOP_OP (ne, float_scalar, floa
 DEFBINOP_OP (el_mul, float_scalar, float_complex, *)
 
 DEFBINOP (el_div, float_scalar, float_complex)
 {
   CAST_BINOP_ARGS (const octave_float_scalar&, const octave_float_complex&);
 
   FloatComplex d = v2.float_complex_value ();
 
-  if (d == static_cast<float>(0.0))
+  if (d == 0.0f)
     gripe_divide_by_zero ();
 
   return octave_value (v1.float_value () / d);
 }
 
 DEFBINOP_FN (el_pow, float_scalar, float_complex, xpow)
 
 DEFBINOP (el_ldiv, float_scalar, float_complex)
@@ -105,27 +105,25 @@ DEFBINOP (el_ldiv, float_scalar, float_c
   return octave_value (v2.float_complex_value () / d);
 }
 
 DEFBINOP (el_and, float_scalar, float_complex)
 {
   CAST_BINOP_ARGS (const octave_float_scalar&, const octave_float_complex&);
 
   return octave_value (v1.float_scalar_value ()
-                       && (v2.float_complex_value ()
-                            != static_cast<float>(0.0)));
+                       && (v2.float_complex_value () != 0.0f));
 }
 
 DEFBINOP (el_or, float_scalar, float_complex)
 {
   CAST_BINOP_ARGS (const octave_float_scalar&, const octave_float_complex&);
 
   return octave_value (v1.float_scalar_value ()
-                       || (v2.float_complex_value ()
-                            != static_cast<float>(0.0)));
+                       || (v2.float_complex_value () != 0.0f));
 }
 
 DEFNDCATOP_FN (fs_fcs, float_scalar, float_complex, float_array,
                float_complex_array, concat)
 
 DEFNDCATOP_FN (s_fcs, scalar, float_complex, float_array,
                float_complex_array, concat)
 
diff --git a/liboctave/array/fCDiagMatrix.cc b/liboctave/array/fCDiagMatrix.cc
--- a/liboctave/array/fCDiagMatrix.cc
+++ b/liboctave/array/fCDiagMatrix.cc
@@ -369,23 +369,23 @@ FloatComplexDiagMatrix::inverse (octave_
       return FloatComplexDiagMatrix ();
     }
 
   FloatComplexDiagMatrix retval (r, c);
 
   info = 0;
   for (octave_idx_type i = 0; i < length (); i++)
     {
-      if (elem (i, i) == static_cast<float> (0.0))
+      if (elem (i, i) == 0.0f)
         {
           info = -1;
           return *this;
         }
       else
-        retval.elem (i, i) = static_cast<float> (1.0) / elem (i, i);
+        retval.elem (i, i) = 1.0f / elem (i, i);
     }
 
   return retval;
 }
 
 FloatComplexDiagMatrix
 FloatComplexDiagMatrix::pseudo_inverse (float tol) const
 {
diff --git a/liboctave/numeric/lo-mappers.cc b/liboctave/numeric/lo-mappers.cc
--- a/liboctave/numeric/lo-mappers.cc
+++ b/liboctave/numeric/lo-mappers.cc
@@ -456,32 +456,31 @@ asin (const FloatComplex& x)
     tmp = 1.0f - x*x;
 
   return -i * log (i*x + sqrt (tmp));
 }
 
 FloatComplex
 asinh (const FloatComplex& x)
 {
-  return log (x + sqrt (x*x + static_cast<float>(1.0)));
+  return log (x + sqrt (x*x + 1.0f));
 }
 
 FloatComplex
 atan (const FloatComplex& x)
 {
   static FloatComplex i (0, 1);
 
-  return i * log ((i + x) / (i - x)) / static_cast<float>(2.0);
+  return i * log ((i + x) / (i - x)) / 2.0f;
 }
 
 FloatComplex
 atanh (const FloatComplex& x)
 {
-  return log ((static_cast<float>(1.0) + x) / (static_cast<float>
-              (1.0) - x)) / static_cast<float>(2.0);
+  return log ((1.0f + x) / (static_cast<float> (1.0) - x)) / 2.0f;
 }
 
 // complex -> bool mappers.
 
 bool
 octave_is_NA (const FloatComplex& x)
 {
   return (octave_is_NA (real (x)) || octave_is_NA (imag (x)));
diff --git a/liboctave/operators/mx-ops b/liboctave/operators/mx-ops
--- a/liboctave/operators/mx-ops
+++ b/liboctave/operators/mx-ops
@@ -44,24 +44,24 @@ bnda boolNDArray ND boolNDArray.h YES fa
 cdm ComplexDiagMatrix DM CDiagMatrix.h YES 0.0
 cm ComplexMatrix M CMatrix.h YES 0.0
 cnda ComplexNDArray ND CNDArray.h YES 0.0
 cs Complex S oct-cmplx.h NO 0.0
 dm DiagMatrix DM dDiagMatrix.h YES 0.0
 m Matrix M dMatrix.h YES 0.0
 nda NDArray ND dNDArray.h YES 0.0
 s double S NONE NO 0.0
-fcdm FloatComplexDiagMatrix DM fCDiagMatrix.h YES static_cast<float>(0.0)
-fcm FloatComplexMatrix M fCMatrix.h YES static_cast<float>(0.0)
-fcnda FloatComplexNDArray ND fCNDArray.h YES static_cast<float>(0.0)
-fcs FloatComplex S oct-cmplx.h NO static_cast<float>(0.0)
-fdm FloatDiagMatrix DM fDiagMatrix.h YES static_cast<float>(0.0)
-fm FloatMatrix M fMatrix.h YES static_cast<float>(0.0)
-fnda FloatNDArray ND fNDArray.h YES static_cast<float>(0.0)
-fs float S NONE NO static_cast<float>(0.0)
+fcdm FloatComplexDiagMatrix DM fCDiagMatrix.h YES 0.0f
+fcm FloatComplexMatrix M fCMatrix.h YES 0.0f
+fcnda FloatComplexNDArray ND fCNDArray.h YES 0.0f
+fcs FloatComplex S oct-cmplx.h NO 0.0f
+fdm FloatDiagMatrix DM fDiagMatrix.h YES 0.0f
+fm FloatMatrix M fMatrix.h YES 0.0f
+fnda FloatNDArray ND fNDArray.h YES 0.0f
+fs float S NONE NO 0.0f
 i8 octave_int8 S oct-inttypes.h YES octave_int8::zero int8_t
 ui8 octave_uint8 S oct-inttypes.h YES octave_uint8::zero uint8_t
 i16 octave_int16 S oct-inttypes.h YES octave_int16::zero int16_t
 ui16 octave_uint16 S oct-inttypes.h YES octave_uint16::zero uint16_t
 i32 octave_int32 S oct-inttypes.h YES octave_int32::zero int32_t
 ui32 octave_uint32 S oct-inttypes.h YES octave_uint32::zero uint32_t
 i64 octave_int64 S oct-inttypes.h YES octave_int64::zero int64_t
 ui64 octave_uint64 S oct-inttypes.h YES octave_uint64::zero uint64_t
