# HG changeset patch
# User Juan Pablo Carbajal <ajuanpi+dev@gmail.com>
# Date 1351406173 -3600
#      Sun Oct 28 07:36:13 2012 +0100
# Node ID 79083c78eac9c0f53e6de5bddb761c390ebbe2cf
# Parent  de751531e548edf58de7660f9826e23d8449d097
quadgk.m: adding id to warnings and errors. switching divide-by-zero warning off locally.

diff --git a/scripts/general/quadgk.m b/scripts/general/quadgk.m
--- a/scripts/general/quadgk.m
+++ b/scripts/general/quadgk.m
@@ -144,17 +144,18 @@ function [q, err] = quadgk (f, a, b, var
         if (!isempty (varargin{1}))
           abstol = varargin{1};
           reltol = 0;
         endif
         if (nargin > 4)
           trace = varargin{2};
         endif
         if (nargin > 5)
-          error ("quadgk: can not pass additional arguments to user function");
+          error ("Octave:Invalid-fun-call",
+                  "quadgk: can not pass additional arguments to user function");
         endif
       else
         idx = 1;
         while (idx < nargin - 3)
           if (ischar (varargin{idx}))
             str = varargin{idx++};
             if (strcmpi (str, "reltol"))
               reltol = varargin{idx++};
@@ -165,24 +166,27 @@ function [q, err] = quadgk (f, a, b, var
               if (isreal (waypoints))
                 waypoints (waypoints < a | waypoints > b) = [];
               endif
             elseif (strcmpi (str, "maxintervalcount"))
               maxint = varargin{idx++};
             elseif (strcmpi (str, "trace"))
               trace = varargin{idx++};
             else
-              error ("quadgk: unknown property %s", str);
+              error ("Octave:invalid-input-arg",
+                                            "quadgk: unknown property %s", str);
             endif
           else
-            error ("quadgk: expecting property to be a string");
+            error ("Octave:invalid-input-arg",
+                                   "quadgk: expecting property to be a string");
           endif
         endwhile
         if (idx != nargin - 2)
-          error ("quadgk: expecting properties in pairs");
+          error ("Octave:Invalid-fun-call",
+                                       "quadgk: expecting properties in pairs");
         endif
       endif
     endif
 
     ## Convert function given as a string to a function handle
     if (ischar (f))
       f = @(x) feval (f, x);
     endif
@@ -292,18 +296,22 @@ function [q, err] = quadgk (f, a, b, var
 
     ## Split interval into at least 10 subinterval with a 15 point
     ## Gauss-Kronrod rule giving a minimum of 150 function evaluations
     while (length (subs) < 11)
       subs = [subs' ; subs(1:end-1)' + diff(subs') ./ 2, NaN](:)(1 : end - 1);
     endwhile
     subs = [subs(1:end-1), subs(2:end)];
 
-    warn_state = warning ("query", "Octave:divide-by-zero");
+    # Not needed anmoyre
+    #warn_state = warning ("query", "Octave:divide-by-zero");
+    # Set divide-by-zero warning off locally
+    warning ("off", "Octave:divide-by-zero", "local");
 
+    warn_msg   = "Octave:quadgk:warning-termination";
     unwind_protect
       ## Singularity will cause divide by zero warnings
       warning ("off", "Octave:divide-by-zero");
 
       ## Initial evaluation of the integrand on the subintervals
       [q_subs, q_errs] = __quadgk_eval__ (f, subs);
       q0 = sum (q_subs);
       err0 = sum (q_errs);
@@ -322,17 +330,17 @@ function [q, err] = quadgk (f, a, b, var
         if (any (abs (diff (trans (subs), [], 2) / h0) < 100 * myeps))
           q = q0;
           err = err0;
           break;
         endif
 
         ## Quit if any evaluations are not finite (Inf or NaN)
         if (any (! isfinite (q_subs)))
-          warning ("quadgk: non finite integrand encountered");
+          warning (warn_msg, "quadgk: non finite integrand encountered");
           q = q0;
           err = err0;
           break;
         endif
 
         tol = max (abstol, reltol .* abs (q0));
 
         ## If the global error estimate is meet exit
@@ -367,33 +375,40 @@ function [q, err] = quadgk (f, a, b, var
 
         ## Split remaining subintervals in two
         mid = (subs(:,2) + subs(:,1)) ./ 2;
         subs = [subs(:,1), mid; mid, subs(:,2)];
 
         ## If the maximum subinterval count is met accept remaining
         ## subinterval and exit
         if (rows (subs) > maxint)
-          warning ("quadgk: maximum interval count (%d) met", maxint);
+          warning (warn_msg,
+                             "quadgk: maximum interval count (%d) met", maxint);
           q += sum (q_subs);
           err += sum (q_errs);
           break;
         endif
 
         ## Evaluation of the integrand on the remaining subintervals
         [q_subs, q_errs] = __quadgk_eval__ (f, subs);
       endwhile
 
       if (err > max (abstol, reltol * abs (q)))
-        warning ("quadgk: Error tolerance not met. Estimated error %g", err);
+        warning (warn_msg,
+                    "quadgk: Error tolerance not met. Estimated error %g", err);
       endif
     unwind_protect_cleanup
+
+      # not needed aynomre, used local off of warnings
+      %{
       if (strcmp (warn_state.state, "on"))
         warning ("on", "Octave:divide-by-zero");
       endif
+      %}
+
     end_unwind_protect
   endif
 endfunction
 
 function [q, err] = __quadgk_eval__ (f, subs)
   ## A (15,7) point pair of Gauss-Konrod quadrature rules. The abscissa
   ## and weights are copied directly from dqk15w.f from quadpack
 
@@ -455,9 +470,8 @@ endfunction
 %!assert (quadgk (@(z) log (z),1+1i,1+1i, "WayPoints", [1-1i, -1,-1i, -1+1i]), -pi * 1i, 1e-6)
 
 %!assert (quadgk (@(x) exp (-x .^ 2),-Inf,Inf), sqrt (pi), 1e-6)
 %!assert (quadgk (@(x) exp (-x .^ 2),-Inf,0), sqrt (pi)/2, 1e-6)
 
 %error (quadgk (@sin))
 %error (quadgk (@sin, -pi))
 %error (quadgk (@sin, -pi, pi, "DummyArg"))
-
