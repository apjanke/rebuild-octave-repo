# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1506006943 14400
#      Thu Sep 21 11:15:43 2017 -0400
# Node ID 5b88383b9a69a37e36b3a2417aaeed02d88cec77
# Parent  d9b0d8ae734f6a074cdf7d6b0849b861a4af5c17
install local functions after classdef parse is complete (bug #52080)

* parse.h, oct-parse.in.yy (base_parser::finish_classdef_file):
New function.
(file): Use it to install classdef object and local functions.
(base_parser::finish_function): Don't install classdef file local
functions here.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -1480,24 +1480,22 @@ file            : begin_file opt_nl opt_
                       }
 
                     $$ = nullptr;
                   }
                 | begin_file opt_nl classdef parsing_local_fcns opt_sep opt_fcn_list END_OF_INPUT
                   {
                     YYUSE ($2);
                     YYUSE ($5);
-                    YYUSE ($6);
 
                     // Unused symbol table context.
                     delete lexer.symtab_context.curr_scope ();
                     lexer.symtab_context.pop ();
 
-                    if (lexer.reading_classdef_file)
-                      parser.m_classdef_object = $3;
+                    parser.finish_classdef_file ($3, $6);
 
                     $$ = nullptr;
                   }
                 ;
 
 // ===================
 // Function definition
 // ===================
@@ -3440,20 +3438,16 @@ namespace octave
       {
         std::string nm = fcn->name ();
         std::string file = fcn->fcn_file_name ();
 
         std::string tmp = nm;
         if (! file.empty ())
           tmp += ": " + file;
 
-        symbol_table& symtab
-          = __get_symbol_table__ ("base_parser::finish_function");
-
-
         symbol_table::scope *fcn_scope = fcn->scope ();
         fcn_scope->cache_name (tmp);
 
         if (lc)
           fcn->stash_leading_comment (lc);
 
         fcn->define_ret_list (ret_list);
 
@@ -3473,19 +3467,16 @@ namespace octave
               {
                 fcn->mark_as_subfunction ();
                 m_subfunction_names.push_back (nm);
 
                 m_primary_fcn_scope->install_subfunction (nm, ov_fcn);
                }
           }
 
-        if (m_parsing_local_functions && m_curr_fcn_depth == 1)
-          symtab.install_local_function (nm, octave_value (fcn), file);
-
         if (m_curr_fcn_depth == 1)
           fcn_scope->update_nest ();
 
         if (! m_lexer.reading_fcn_file && m_curr_fcn_depth == 1)
           {
             // We are either reading a script file or defining a function
             // at the command line, so this definition creates a
             // tree_function object that is placed in the parse tree.
@@ -3817,16 +3808,47 @@ namespace octave
       fcn->stash_leading_comment (cl);
 
     int l = fcn->beginning_line ();
     int c = fcn->beginning_column ();
 
     return new tree_function_def (fcn, l, c);
   }
 
+  void
+  base_parser::finish_classdef_file (tree_classdef *cls,
+                                     tree_statement_list *local_fcns)
+  {
+    if (m_lexer.reading_classdef_file)
+      m_classdef_object = cls;
+
+    if (local_fcns)
+      {
+        symbol_table& symtab
+          = __get_symbol_table__ ("base_parser::finish_classdef_file");
+
+        for (tree_statement *elt : *local_fcns)
+          {
+            tree_command *cmd = elt->command ();
+
+            tree_function_def *fcn_def
+              = dynamic_cast<tree_function_def *> (cmd);
+
+            octave_value ov_fcn = fcn_def->function ();
+            octave_function *fcn = ov_fcn.function_value ();
+            std::string nm = fcn->name ();
+            std::string file = fcn->fcn_file_name ();
+
+            symtab.install_local_function (nm, ov_fcn, file);
+          }
+
+        delete local_fcns;
+      }
+  }
+
   // Make an index expression.
 
   tree_index_expression *
   base_parser::make_index_expression (tree_expression *expr,
                                       tree_argument_list *args,
                                       char type)
   {
     tree_index_expression *retval = nullptr;
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -345,16 +345,20 @@ namespace octave
     start_classdef_external_method (tree_identifier *id,
                                     tree_parameter_list *pl);
 
     tree_function_def *
     finish_classdef_external_method (octave_user_function *fcn,
                                      tree_parameter_list *ret_list,
                                      comment_list *cl);
 
+    void
+    finish_classdef_file (tree_classdef *cls,
+                          tree_statement_list *local_fcns);
+
     // Make an index expression.
     tree_index_expression *
     make_index_expression (tree_expression *expr,
                            tree_argument_list *args, char type);
 
     // Make an indirect reference expression.
     tree_index_expression *
     make_indirect_ref (tree_expression *expr, const std::string&);
