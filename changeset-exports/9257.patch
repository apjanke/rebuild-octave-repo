# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1243289051 14400
#      Mon May 25 18:04:11 2009 -0400
# Node ID ab952265ad061ceda8c277c85a9fcdab2858848c
# Parent  5c05996ee4acdcd7adc980afb33c2983b2159232
__go_draw_axes__.m: Properly render TeX symbols for x11.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2009-05-25  Ben Abbott <bpabbott@mac.com>
+
+	* plot/__go_draw_axes__.m: Properly render TeX symbols for x11, when
+	using the anonymous fontname="*".
+
 2009-05-24 Benjamin Lindner <lindnerb@users.sourceforge.net>
 
 	* plot/gnuplot_drawnow.m: single-quote output name to allow backslash
 	characters as filesep under windows
 	* plot/print.m: Support ps->pdf using ghostscript under windows, check
 	for %GSC% environment variable.
 
 2009-05-24 Benjamin Lindner <lindnerb@users.sourceforge.net>
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -31,16 +31,17 @@ function __go_draw_axes__ (h, plot_strea
     unwind_protect
       set (0, "showhiddenhandles", "on");
       axis_obj = __get__ (h);
     unwind_protect_cleanup
       set (0, "showhiddenhandles", showhiddenhandles);
     end_unwind_protect
 
     parent_figure_obj = get (axis_obj.parent);
+    gnuplot_term = __gnuplot_get_var__ (axis_obj.parent, "GPVAL_TERM");
 
     ## Set to false for plotyy axes.
     if (strcmp (axis_obj.tag, "plotyy"))
       ymirror = false;
     else
       ymirror = true;
     endif
 
@@ -90,17 +91,17 @@ function __go_draw_axes__ (h, plot_strea
     fputs (plot_stream, "unset x2tics;\n");
 
     if (! isempty (axis_obj.title))
       t = get (axis_obj.title);
       if (isempty (t.string))
 	fputs (plot_stream, "unset title;\n");
       else
 	[tt, f, s] = __maybe_munge_text__ (enhanced, t, "string");
-	fontspec = create_fontspec (f, s);
+	fontspec = create_fontspec (f, s, gnuplot_term);
 	fprintf (plot_stream, "set title \"%s\" %s %s",
 		 undo_string_escapes (tt), fontspec,
 		 __do_enhanced_option__ (enhanced, t));
 	if (nd == 3 && __gnuplot_has_feature__ ("screen_coordinates_for_{lrtb}margin"))
 	  fprintf (plot_stream, " offset screen 0, screen %.3f;\n", pos(4)/5);
 	else
 	  fprintf (plot_stream, ";\n");
 	endif
@@ -111,17 +112,17 @@ function __go_draw_axes__ (h, plot_strea
       t = get (axis_obj.xlabel);
       angle = t.rotation;
       colorspec = get_text_colorspec (axis_obj.xcolor, mono);
       if (isempty (t.string))
 	fprintf (plot_stream, "unset xlabel;\n");
 	fprintf (plot_stream, "unset x2label;\n");
       else
 	[tt, f, s] = __maybe_munge_text__ (enhanced, t, "string");
-	fontspec = create_fontspec (f, s);
+	fontspec = create_fontspec (f, s, gnuplot_term);
 	if (strcmpi (axis_obj.xaxislocation, "top"))
 	  fprintf (plot_stream, "set x2label \"%s\" %s %s %s",
 		   undo_string_escapes (tt), colorspec, fontspec,
 		   __do_enhanced_option__ (enhanced, t));
 	else
 	  fprintf (plot_stream, "set xlabel \"%s\" %s %s %s",
 		   undo_string_escapes (tt), colorspec, fontspec,
 		   __do_enhanced_option__ (enhanced, t));
@@ -139,17 +140,17 @@ function __go_draw_axes__ (h, plot_strea
       t = get (axis_obj.ylabel);
       angle = t.rotation;
       colorspec = get_text_colorspec (axis_obj.ycolor, mono);
       if (isempty (t.string))
 	fprintf (plot_stream, "unset ylabel;\n");
 	fprintf (plot_stream, "unset y2label;\n");
       else
 	[tt, f, s] = __maybe_munge_text__ (enhanced, t, "string");
-	fontspec = create_fontspec (f, s);
+	fontspec = create_fontspec (f, s, gnuplot_term);
 	if (strcmpi (axis_obj.yaxislocation, "right"))
 	  fprintf (plot_stream, "set y2label \"%s\" %s %s %s",
 		   undo_string_escapes (tt), colorspec, fontspec,
 		   __do_enhanced_option__ (enhanced, t));
 	else
 	  fprintf (plot_stream, "set ylabel \"%s\" %s %s %s",
 		   undo_string_escapes (tt), colorspec, fontspec,
 		   __do_enhanced_option__ (enhanced, t));
@@ -166,17 +167,17 @@ function __go_draw_axes__ (h, plot_strea
     if (! isempty (axis_obj.zlabel))
       t = get (axis_obj.zlabel);
       angle = t.rotation;
       colorspec = get_text_colorspec (axis_obj.zcolor, mono);
       if (isempty (t.string))
 	fputs (plot_stream, "unset zlabel;\n");
       else
 	[tt, f, s] = __maybe_munge_text__ (enhanced, t, "string");
-	fontspec = create_fontspec (f, s);
+	fontspec = create_fontspec (f, s, gnuplot_term);
 	fprintf (plot_stream, "set zlabel \"%s\" %s %s %s",
 		 undo_string_escapes (tt), colorspec, fontspec,
 		 __do_enhanced_option__ (enhanced, t));
 	fprintf (plot_stream, " rotate by %f;\n", angle);
       endif
     endif
 
     if (strcmpi (axis_obj.xaxislocation, "top"))
@@ -253,17 +254,17 @@ function __go_draw_axes__ (h, plot_strea
       fputs (plot_stream, "set grid front;\n");
     else
       fputs (plot_stream, "set grid layerdefault;\n");
     endif
     if (! have_grid)
       fputs (plot_stream, "unset grid;\n");
     endif
 
-    do_tics (axis_obj, plot_stream, ymirror, mono);
+    do_tics (axis_obj, plot_stream, ymirror, mono, gnuplot_term);
 
     xlogscale = strcmpi (axis_obj.xscale, "log");
     if (xlogscale)
       fprintf (plot_stream, "set logscale %s;\n", xaxisloc);
     else
       fprintf (plot_stream, "unset logscale %s;\n", xaxisloc);
     endif
 
@@ -987,17 +988,17 @@ function __go_draw_axes__ (h, plot_strea
                            obj.facealpha);
                 endif
               endif
             endif
 	  endif
 
 	case "text"
 	  [label, f, s] = __maybe_munge_text__ (enhanced, obj, "string");
-	  fontspec = create_fontspec (f, s);
+	  fontspec = create_fontspec (f, s, gnuplot_term);
 	  lpos = obj.position;
 	  halign = obj.horizontalalignment;
 	  angle = obj.rotation;
           units = obj.units;
 	  color = obj.color;
           if (strcmpi (units, "normalized"))
             units = "graph";
           else
@@ -1205,17 +1206,17 @@ function __go_draw_axes__ (h, plot_strea
 	  pos = "";
 	  warning ("legend: 'Best' not yet implemented for location specifier.\n");
 	  ## Least conflict with data in plot.
 	  ## Least unused space outside plot.
 	otherwise
 	  pos = "";
       endswitch
       if (__gnuplot_has_feature__ ("key_has_font_properties"))
-        fontspec = create_fontspec (axis_obj.fontname, axis_obj.fontsize);
+        fontspec = create_fontspec (axis_obj.fontname, axis_obj.fontsize, gnuplot_term);
       else
 	fontspec = "";
       endif
       fprintf (plot_stream, "set key %s %s %s %s %s;\n", inout, pos, box,
                reverse, fontspec);
     else
       fputs (plot_stream, "unset key;\n");
     endif
@@ -1318,18 +1319,18 @@ function __go_draw_axes__ (h, plot_strea
     fflush (plot_stream);
 
   else
     print_usage ();
   endif
 
 endfunction
 
-function fontspec = create_fontspec (f, s)
-  if (strcmp (f, "*"))
+function fontspec = create_fontspec (f, s, gp_term)
+  if (strcmp (f, "*") && ! strcmp (gp_term, "x11"))
     fontspec = sprintf ("font \",%d\"", s);
   else
     fontspec = sprintf ("font \"%s,%d\"", f, s);
   endif
 endfunction
 
 function [style, typ, with] = do_linestyle_command (obj, idx, mono,
 						    plot_stream, errbars = "")
@@ -1511,24 +1512,24 @@ function __gnuplot_write_data__ (plot_st
 	  fwrite (plot_stream, data(j:j+2,:), "float64");
 	endfor
       endif
     endif
   endif
 
 endfunction
 
-function do_tics (obj, plot_stream, ymirror, mono)
+function do_tics (obj, plot_stream, ymirror, mono, gnuplot_term)
 
   obj.xticklabel = ticklabel_to_cell (obj.xticklabel);
   obj.yticklabel = ticklabel_to_cell (obj.yticklabel);
   obj.zticklabel = ticklabel_to_cell (obj.zticklabel);
 
   [fontname, fontsize] = get_fontname_and_size (obj);
-  fontspec = create_fontspec (fontname, fontsize);
+  fontspec = create_fontspec (fontname, fontsize, gnuplot_term);
 
   ## A Gnuplot tic scale of 69 is equivalent to Octave's 0.5.
   ticklength = sprintf ("scale %4.1f", (69/0.5)*obj.ticklength(1));
 
   if (strcmpi (obj.xaxislocation, "top"))
     do_tics_1 (obj.xtickmode, obj.xtick, obj.xminortick, obj.xticklabelmode,
 	       obj.xticklabel, obj.xcolor, "x2", plot_stream, true, mono,
 	       "border", obj.tickdir, ticklength, fontname, fontspec,
