# HG changeset patch
# User John Donoghue <john.donoghue@ieee.org>
# Date 1369446340 14400
#      Fri May 24 21:45:40 2013 -0400
# Node ID d4bcb38ad0560096bb9c009fa6f4fdfb2a73c775
# Parent  bf1de4943a5d6723ab655ab5b58907da53e8842d
Added find files context menu to files-dock-widget

* libgui/src/files-dock-widget.cc, libgui/src/files-dock-widget.h
  (files_dock_widget::files_dock_widget): added Find Files popdown menu.
  (files_dock_widget::contextmenu_requested): Added Find Files context menu item.
  (files_dock_widget::contextmenu_findfiles): New function.
  (files_dock_widget::popdownmenu_findfiles): New function.
  (files_dock_widget::process_find_files): New function.
  (files_dock_widget::find_files_signal): New signal.

* libgui/src/main-window.cc:
  (main_window::construct): Connected files_dock_widget::find_files_signal to main_window::find_files signal.

diff --git a/libgui/src/files-dock-widget.cc b/libgui/src/files-dock-widget.cc
--- a/libgui/src/files-dock-widget.cc
+++ b/libgui/src/files-dock-widget.cc
@@ -114,16 +114,19 @@ files_dock_widget::files_dock_widget (QW
   popdown_button->setPopupMode(QToolButton::InstantPopup);
   popdown_button->setDefaultAction(new QAction(QIcon(":/actions/icons/gear.png"),"", _navigation_tool_bar));
 
   popdown_menu->addSeparator();
   popdown_menu->addAction (QIcon (":/actions/icons/search.png"),
                            tr ("Search directory"),
                            this, SLOT (popdownmenu_search_dir (bool)));
   popdown_menu->addSeparator();
+  popdown_menu->addAction( tr ("Find Files ..."),
+                          this, SLOT(popdownmenu_findfiles(bool)));
+  popdown_menu->addSeparator();
   popdown_menu->addAction(QIcon(":/actions/icons/filenew.png"),
                           tr ("New File"),
                           this, SLOT(popdownmenu_newfile(bool)));
   popdown_menu->addAction(QIcon(":/actions/icons/folder_new.png"),
                           tr ("New Directory"),
                           this, SLOT(popdownmenu_newdir(bool)));
 
   _navigation_tool_bar->addWidget (_current_directory);
@@ -354,16 +357,18 @@ files_dock_widget::contextmenu_requested
         menu.addAction (tr("Load Data"), this, SLOT(contextmenu_load(bool)));
 
       if (info.isDir ())
         {
           menu.addSeparator ();
           menu.addAction (QIcon (":/actions/icons/ok.png"),
                           tr ("Set Current Directory"),
                           this, SLOT (contextmenu_setcurrentdir (bool)));
+          menu.addSeparator ();
+          menu.addAction (tr ("Find Files ..."), this, SLOT(contextmenu_findfiles(bool)));
         }
 
       menu.addSeparator();
       menu.addAction (tr ("Rename"), this, SLOT(contextmenu_rename(bool)));
       menu.addAction (QIcon(":/actions/icons/editdelete.png"), tr("Delete"),
                       this, SLOT(contextmenu_delete(bool)));
 
       if (info.isDir())
@@ -571,16 +576,35 @@ files_dock_widget::contextmenu_setcurren
 
       if(info.isDir())
         {
           process_set_current_dir(info.absoluteFilePath ());
         }
     }
 }
 
+void 
+files_dock_widget::contextmenu_findfiles (bool)
+{
+  QItemSelectionModel *m = _file_tree_view->selectionModel ();
+  QModelIndexList rows = m->selectedRows ();
+
+  if(rows.size() > 0)
+    {
+      QModelIndex index = rows[0];
+
+      QFileInfo info = _file_system_model->fileInfo(index);
+
+      if(info.isDir())
+        {
+          process_find_files(info.absoluteFilePath ());
+        }
+    }
+}
+
 void
 files_dock_widget::notice_settings (const QSettings *settings)
 {
   // Qsettings pointer is checked before emitting.
 
   int icon_size = settings->value ("toolbar_icon_size",24).toInt ();
   if (icon_size > 16)
     icon_size = icon_size - 4;
@@ -610,16 +634,22 @@ void
 files_dock_widget::popdownmenu_search_dir (bool)
 {
   QString dir
     = QFileDialog::getExistingDirectory (this, tr ("Set directory of file browser"));
   process_set_current_dir (dir);
 }
 
 void
+files_dock_widget::popdownmenu_findfiles (bool)
+{
+      process_find_files(_file_system_model->rootPath());
+}
+
+void
 files_dock_widget::popdownmenu_newdir (bool)
 {
       process_new_dir(_file_system_model->rootPath());
 }
 
 void
 files_dock_widget::popdownmenu_newfile (bool)
 {
@@ -657,8 +687,14 @@ files_dock_widget::process_new_dir (cons
       _file_system_model->revert();
     }
 }
 
 void files_dock_widget::process_set_current_dir(const QString & dir)
 {
   emit displayed_directory_changed (dir);
 }
+
+void files_dock_widget::process_find_files(const QString & dir)
+{
+  emit find_files_signal(dir);
+}
+
diff --git a/libgui/src/files-dock-widget.h b/libgui/src/files-dock-widget.h
--- a/libgui/src/files-dock-widget.h
+++ b/libgui/src/files-dock-widget.h
@@ -89,40 +89,46 @@ private slots:
   void contextmenu_copy_selection (bool);
   void contextmenu_run (bool);
   void contextmenu_load (bool);
   void contextmenu_rename (bool);
   void contextmenu_delete (bool);
   void contextmenu_newfile (bool);
   void contextmenu_newdir (bool);
   void contextmenu_setcurrentdir (bool);
+  void contextmenu_findfiles (bool);
 
   /* popdown menu options */
   void popdownmenu_newfile(bool);
   void popdownmenu_newdir(bool);
   void popdownmenu_search_dir (bool);
+  void popdownmenu_findfiles (bool);
 
 signals:
 
   /** Emitted, whenever the user requested to open a file. */
   void open_file (const QString& fileName);
 
   /** Emitted, whenever the currently displayed directory changed. */
   void displayed_directory_changed (const QString& dir);
 
   /** Emitted, whenever the user requested to load a file. */
   void load_file_signal (const QString& fileName);
 
   /** Emitted, whenever the user requested to run a file. */
   void run_file_signal (const QFileInfo& info);
 
+  /** Emitted, whenever wants to search for a file . */
+  void find_files_signal (const QString &startdir);
+
 private:
   void process_new_file(const QString &parent_name);
   void process_new_dir(const QString &parent_name);
   void process_set_current_dir(const QString &parent_name);
+  void process_find_files(const QString &dir_name);
 
   /** set a new directory or open a file **/
   void display_directory (const QString& dir, bool set_octave_dir = true);
 
   void open_item_in_app (const QModelIndex& index);
 
   /** Variables for the actions **/
   QToolBar *        _navigation_tool_bar;
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -791,16 +791,19 @@ main_window::construct (void)
            this, SLOT (prepare_to_exit ()));
 
   connect (this, SIGNAL (settings_changed (const QSettings *)),
            this, SLOT (notice_settings (const QSettings *)));
 
   connect (file_browser_window, SIGNAL (load_file_signal (const QString&)),
            this, SLOT (handle_load_workspace_request (const QString&)));
 
+  connect (file_browser_window, SIGNAL (find_files_signal (const QString&)),
+           this, SLOT (find_files (const QString&)));
+
   connect_uiwidget_links ();
 
   setWindowTitle ("Octave");
 
   setDockOptions (QMainWindow::AnimatedDocks
                   | QMainWindow::AllowNestedDocks
                   | QMainWindow::AllowTabbedDocks);
 
