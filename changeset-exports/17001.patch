# HG changeset patch
# User Olaf Till <i7tiol@t-online.de>
# Date 1372699750 -7200
#      Mon Jul 01 19:29:10 2013 +0200
# Node ID 234519448e7614961c2bc759134b1acf4cf3e03f
# Parent  45165d6c47384e03c6535c1c8955c4dd1eb612fa
make cell2mat.m more efficient for large arrays (bug #39387).

* cell2mat.m: Correct sort order of dimensions to descending. Use
  single cat() call in special case of only scalar elements.

diff --git a/scripts/general/cell2mat.m b/scripts/general/cell2mat.m
--- a/scripts/general/cell2mat.m
+++ b/scripts/general/cell2mat.m
@@ -48,37 +48,43 @@ function m = cell2mat (c)
     valid |= cellfun ("isclass", c, "char");
     validc = cellfun ("isclass", c, "cell");
     valids = cellfun ("isclass", c, "struct");
 
     if (! all (valid(:)) && ! all (validc(:)) && ! all (valids(:)))
       error ("cell2mat: wrong type elements or mixed cells, structs and matrices");
     endif
 
-    ## The goal is to minimize the total number of cat() calls.
-    ## The dimensions can be concatenated along in arbitrary order.
-    ## The numbers of concatenations are:
-    ## n / d1
-    ## n / (d1 * d2)
-    ## n / (d1 * d2 * d3)
-    ## etc.
-    ## This is minimized if d1 >= d2 >= d3...
+    sc = size (c);
+    if (all (cellfun ("numel", c)(:) == 1))
+      m = reshape (cat (1, c{:}), sc);
+    else
+
+      ## The goal is to minimize the total number of cat() calls.
+      ## The dimensions can be concatenated along in arbitrary order.
+      ## The numbers of concatenations are:
+      ## n / d1
+      ## n / (d1 * d2)
+      ## n / (d1 * d2 * d3)
+      ## etc.
+      ## This is minimized if d1 >= d2 >= d3...
 
-    sc = size (c);
-    nd = ndims (c);
-    [~, isc] = sort (sc);
-    for idim = isc
-      if (sc(idim) == 1)
-        continue;
-      endif
-      xdim = [1:idim-1, idim+1:nd];
-      cc = num2cell (c, xdim);
-      c = cellfun ("cat", {idim}, cc{:}, "uniformoutput", false);
-    endfor
-    m = c{1};
+      nd = ndims (c);
+      [~, isc] = sort (sc, "descend");
+      for idim = isc
+        if (sc(idim) == 1)
+          continue;
+        endif
+        xdim = [1:idim-1, idim+1:nd];
+        cc = num2cell (c, xdim);
+        c = cellfun ("cat", {idim}, cc{:}, "uniformoutput", false);
+      endfor
+      m = c{1};
+
+    endif
   endif
 
 endfunction
 
 
 %!demo
 %! C = {[1], [2 3 4]; [5; 9], [6 7 8; 10 11 12]};
 %! cell2mat (C)
