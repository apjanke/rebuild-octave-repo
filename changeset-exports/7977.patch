# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1217235046 -7200
#      Mon Jul 28 10:50:46 2008 +0200
# Node ID 065c28e1c3687d02425f1cbe39e32d32d9d9e33a
# Parent  736124a4fa3d2fdaf9c97dd5be26c6ab35f8b349
Modify Fcellfun to directly access the error message/id rather than use a call to Flasterr

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2008-07-28  David Bateman  <dbateman@free.fr>
+
+	* error.cc (last_error_id, last_error_message, last_warning_id,
+	last_warning_message): New functions to return the error/warning
+	message and id without exposing the internal values.
+	* error.h  (last_error_id, last_error_message, last_warning_id,
+	last_warning_message): Declare them.
+	* DLD-FUNCTIONS/cellfun.cc (Fcellfun): Use them to pass the error
+	to the ErrorHandler function.
+	
 2008-07-28  John W. Eaton  <jwe@octave.org>
 
 	* error.cc (Flasterror, Flasterr): Unwind-protect error_state.
 
 	* DLD-FUNCTIONS/__magick_read__.cc (F__magick_write__, write_image):
 	New functions.
 
 2008-07-25  John W. Eaton  <jwe@octave.org>
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -33,19 +33,16 @@ along with Octave; see the file COPYING.
 #include "Cell.h"
 #include "oct-map.h"
 #include "defun-dld.h"
 #include "parse.h"
 #include "variables.h"
 #include "ov-colon.h"
 #include "unwind-prot.h"
 
-extern octave_value_list 
-Flasterr (const octave_value_list& args_name, int nargout_name);
-
 DEFUN_DLD (cellfun, args, nargout,
   " -*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} cellfun (@var{name}, @var{c})\n\
 @deftypefnx {Loadable Function} {} cellfun (\"size\", @var{c}, @var{k})\n\
 @deftypefnx {Loadable Function} {} cellfun (\"isclass\", @var{c}, @var{class})\n\
 @deftypefnx {Loadable Function} {} cellfun (@var{func}, @var{c})\n\
 @deftypefnx {Loadable Function} {} cellfun (@var{func}, @var{c}, @var{d})\n\
 @deftypefnx {Loadable Function} {[@var{a}, @var{b}] =} cellfun (@dots{})\n\
@@ -359,23 +356,20 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
 		{
 		  for (int j = 0; j < nargin-offset; j++)
 		    inputlist(j) = inputs[j](count);
 
 		  octave_value_list tmp = feval (func, inputlist, nargout);
 
 		  if (error_state && have_error_handler)
 		    {
-		      octave_value_list errtmp = 
-			Flasterr (octave_value_list (), 2);
-
 		      Octave_map msg;
-		      msg.assign ("identifier", errtmp(1));
-		      msg.assign ("message", errtmp(0));
-		      msg.assign ("index", octave_value(double (count)));
+		      msg.assign ("identifier", last_error_id ());
+		      msg.assign ("message", last_error_message ());
+		      msg.assign ("index", octave_value(double (count + static_cast<octave_idx_type>(1))));
 		      octave_value_list errlist = inputlist;
 		      errlist.prepend (msg);
 		      buffer_error_messages--;
 		      error_state = 0;
 		      tmp = feval (error_handler, errlist, nargout);
 		      buffer_error_messages++;
 
 		      if (error_state)
@@ -438,23 +432,20 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
 		{
 		  for (int j = 0; j < nargin-offset; j++)
 		    inputlist(j) = inputs[j](count);
 
 		  octave_value_list tmp = feval (func, inputlist, nargout);
 
 		  if (error_state && have_error_handler)
 		    {
-		      octave_value_list errtmp = 
-			Flasterr (octave_value_list (), 2);
-
 		      Octave_map msg;
-		      msg.assign ("identifier", errtmp(1));
-		      msg.assign ("message", errtmp(0));
-		      msg.assign ("index", octave_value(double (count)));
+		      msg.assign ("identifier", last_error_id ());
+		      msg.assign ("message", last_error_message ());
+		      msg.assign ("index", octave_value(double (count + static_cast<octave_idx_type>(1))));
 		      octave_value_list errlist = inputlist;
 		      errlist.prepend (msg);
 		      buffer_error_messages--;
 		      error_state = 0;
 		      tmp = feval (error_handler, errlist, nargout);
 		      buffer_error_messages++;
 
 		      if (error_state)
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -1735,13 +1735,37 @@ DEFUN (debug_on_warning, args, nargout,
 @deftypefnx {Built-in Function} {@var{old_val} =} debug_on_warning (@var{new_val})\n\
 Query or set the internal variable that controls whether Octave will try\n\
 to enter the debugger when a warning is encountered.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (debug_on_warning);
 }
 
+std::string
+last_error_message (void)
+{
+  return Vlast_error_message;
+}
+
+std::string
+last_error_id (void)
+{
+  return Vlast_error_id;
+}
+
+std::string
+last_warning_message (void)
+{
+  return Vlast_warning_message;
+}
+
+std::string
+last_warning_id (void)
+{
+  return Vlast_warning_id;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/error.h b/src/error.h
--- a/src/error.h
+++ b/src/error.h
@@ -109,15 +109,21 @@ extern OCTINTERP_API int warning_state;
 extern OCTINTERP_API int buffer_error_messages;
 
 // TRUE means error messages are turned off.
 extern OCTINTERP_API bool discard_error_messages;
 
 // TRUE means warning messages are turned off.
 extern OCTINTERP_API bool discard_warning_messages;
 
+// Helper functions to pass last error and warning messages and ids
+extern OCTINTERP_API std::string last_error_message (void);
+extern OCTINTERP_API std::string last_error_id (void);
+extern OCTINTERP_API std::string last_warning_message (void);
+extern OCTINTERP_API std::string last_warning_id (void);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
