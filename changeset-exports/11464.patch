# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1294601635 18000
#      Sun Jan 09 14:33:55 2011 -0500
# Node ID 21b5284fa78d9c4de17c5a8276612d8677755217
# Parent  ae96756561d07efb485187fdfa965d18d4026c1b
avoid error when parsing nested functions

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2011-01-09  John W. Eaton  <jwe@octave.org>
+
+	* lex.h, lex.ll, oct-parse.yy (lexer_flags::parsed_function_name):
+	Declare to be std::stack<bool> instead of bool.  Change all uses.
+	Bug #32083.
+
 2011-01-08  Konstantinos Poulios  <logari81@googlemail.com>
 
 	* gl-render.cc (opengl_renderer::draw_axes): Revert positionmode
 	to auto after automatic positioning of titles. Bug #32074.
 
 2011-01-08  David Grundberg  <individ@acc.umu.se>
 
 	* ov-fcn.h (is_subfunction): Rename from is_nested_function.
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -20,16 +20,17 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if !defined (octave_lex_h)
 #define octave_lex_h 1
 
 #include <list>
+#include <stack>
 
 // FIXME -- these input buffer things should be members of a
 // parser input stream class.
 
 typedef struct yy_buffer_state *YY_BUFFER_STATE;
 
 // Associate a buffer with a new file to read.
 extern OCTINTERP_API YY_BUFFER_STATE create_buffer (FILE *f);
@@ -112,19 +113,20 @@ public:
 
   // GAG.  Stupid kludge so that [[1,2][3,4]] will work.
   bool do_comma_insert;
 
   // TRUE means we're looking at an indirect reference to a
   // structure element.
   bool looking_at_indirect_ref;
 
-  // TRUE means that we've already seen the name of this function.
-  // Should only matter if current_function_level > 0
-  bool parsed_function_name;
+  // If the top of the stack is TRUE, then we've already seen the name
+  // of the current function.  Should only matter if
+  // current_function_level > 0
+  std::stack<bool> parsed_function_name;
 
   // TRUE means we are parsing a class method in function or classdef file.
   bool parsing_class_method;
 
   // TRUE means we are parsing a class method declaration line in a
   // classdef file and can accept a property get or set method name.
   // For example, "get.PropertyName" is recognized as a function name.
   bool maybe_classdef_get_set_method;
diff --git a/src/lex.ll b/src/lex.ll
--- a/src/lex.ll
+++ b/src/lex.ll
@@ -612,17 +612,18 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
     lexer_flags.looking_at_object_index.push_front (false);
 
     current_input_column += yyleng;
     lexer_flags.quote_is_transpose = false;
     lexer_flags.convert_spaces_to_comma = true;
     lexer_flags.looking_for_object_index = false;
     lexer_flags.at_beginning_of_statement = false;
 
-    if (lexer_flags.defining_func && ! lexer_flags.parsed_function_name)
+    if (lexer_flags.defining_func
+        && ! lexer_flags.parsed_function_name.top ())
       lexer_flags.looking_at_return_list = true;
     else
       lexer_flags.looking_at_matrix_or_assign_lhs = true;
 
     promptflag--;
     eat_whitespace ();
 
     lexer_flags.bracketflag++;
@@ -1465,17 +1466,17 @@ is_keyword_token (const std::string& s)
         case until_kw:
           break;
 
         case end_kw:
           if (! reading_classdef_file
               && (inside_any_object_index ()
                   || (lexer_flags.defining_func
                       && ! (lexer_flags.looking_at_return_list
-                            || lexer_flags.parsed_function_name))))
+                            || lexer_flags.parsed_function_name.top ()))))
             return 0;
 
           yylval.tok_val = new token (token::simple_end, l, c);
           lexer_flags.at_beginning_of_statement = true;
           break;
 
         case end_try_catch_kw:
           yylval.tok_val = new token (token::try_catch_end, l, c);
@@ -1576,17 +1577,17 @@ is_keyword_token (const std::string& s)
           // 'classdef' is always a keyword.
           promptflag--;
           break;          
 
         case function_kw:
           promptflag--;
 
           lexer_flags.defining_func++;
-          lexer_flags.parsed_function_name = false;
+          lexer_flags.parsed_function_name.push (false);
 
           if (! (reading_fcn_file || reading_script_file
                  || reading_classdef_file))
             input_line_number = 1;
           break;
 
         case magic_file_kw:
           {
@@ -3328,17 +3329,21 @@ lexical_feedback::init (void)
   // Not initially defining a cell array list.
   braceflag = 0;
 
   // Not initially inside a loop or if statement.
   looping = 0;
 
   // Not initially defining a function.
   defining_func = 0;
-  parsed_function_name = false;
+
+  // Not parsing an object index.
+  while (! parsed_function_name.empty ())
+    parsed_function_name.pop ();
+
   parsing_class_method = false;
   
   // Not initially defining a class with classdef.
   maybe_classdef_get_set_method = false;
   parsing_classdef = false;
 
   // Not initiallly looking at a function handle.
   looking_at_function_handle = 0;
diff --git a/src/oct-parse.yy b/src/oct-parse.yy
--- a/src/oct-parse.yy
+++ b/src/oct-parse.yy
@@ -1372,17 +1372,17 @@ function        : function_beg function1
                     recover_from_parsing_function ();
                   }
                 ;
 
 fcn_name        : identifier
                   {
                     std::string id_name = $1->name ();
 
-                    lexer_flags.parsed_function_name = true;
+                    lexer_flags.parsed_function_name.top () = true;
                     lexer_flags.maybe_classdef_get_set_method = false;
             
                     $$ = $1;
                   }
                 | GET '.' identifier
                   {
                     lexer_flags.maybe_classdef_get_set_method = false;
                     $$ = $3;
@@ -2993,17 +2993,17 @@ recover_from_parsing_function (void)
 
   if (reading_fcn_file && current_function_depth == 1
       && ! parsing_subfunctions)
     parsing_subfunctions = true;
 
   current_function_depth--;
 
   lexer_flags.defining_func--;
-  lexer_flags.parsed_function_name = false;
+  lexer_flags.parsed_function_name.pop ();
   lexer_flags.looking_at_return_list = false;
   lexer_flags.looking_at_parameter_list = false;
 }
 
 // Make an index expression.
 
 static tree_index_expression *
 make_index_expression (tree_expression *expr, tree_argument_list *args,
