# HG changeset patch
# User Rik <rik@octave.org>
# Date 1523936604 25200
#      Mon Apr 16 20:43:24 2018 -0700
# Node ID 617fe022e96579a251115bfaf2f48f2933584b16
# Parent  cac96fd5310daa63a72180319c00349ad63cc9b8
factor.m: Return output factors of same class as input for Matlab compatibility.

* factor.m: Add note to docstring about output being of the same type as input.
New variable cls to store class of input variable q.  Call feval (cls, pf) to
convert pf to original class of input.  Add BIST tests.

diff --git a/scripts/specfun/factor.m b/scripts/specfun/factor.m
--- a/scripts/specfun/factor.m
+++ b/scripts/specfun/factor.m
@@ -18,34 +18,29 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {@var{pf} =} factor (@var{q})
 ## @deftypefnx {} {[@var{pf}, @var{n}] =} factor (@var{q})
 ## Return the prime factorization of @var{q}.
 ##
 ## The prime factorization is defined as @code{prod (@var{pf}) == @var{q}}
 ## where every element of @var{pf} is a prime number.  If @code{@var{q} == 1},
-## return 1.
+## return 1.  The output @var{pf} is of the same numeric class as the input.
 ##
 ## With two output arguments, return the unique prime factors @var{pf} and
 ## their multiplicities.  That is,
 ## @code{prod (@var{pf} .^ @var{n}) == @var{q}}.
 ##
-## Implementation Note: The input @var{q} must be less than
-## @code{flintmax} (9.0072e+15) in order to factor correctly.
+## Implementation Note: The input @var{q} must be less than @code{flintmax}
+## (9.0072e+15) in order to factor correctly.
 ## @seealso{gcd, lcm, isprime, primes}
 ## @end deftypefn
 
 ## Author: Paul Kienzle
 
-## 2002-01-28 Paul Kienzle
-## * remove recursion; only check existing primes for multiplicity > 1
-## * return multiplicity as suggested by Dirk Laurie
-## * add error handling
-
 function [pf, n] = factor (q)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   if (! isscalar (q) || ! isreal (q) || q < 0 || q != fix (q))
     error ("factor: Q must be a real non-negative integer");
@@ -53,17 +48,18 @@ function [pf, n] = factor (q)
 
   ## Special case of no primes less than sqrt(q).
   if (q < 4)
     pf = q;
     n = 1;
     return;
   endif
 
-  q = double (q);  # For the time being, calcs rely on double precision var.
+  cls = class (q); # store class
+  q = double (q);  # internal algorithm relies on numbers being doubles.
   qorig = q;
   pf = [];
   ## There is at most one prime greater than sqrt(q), and if it exists,
   ## it has multiplicity 1, so no need to consider any factors greater
   ## than sqrt(q) directly.  [If there were two factors p1, p2 > sqrt(q),
   ## then q >= p1*p2 > sqrt(q)*sqrt(q) == q.  Contradiction.]
   p = primes (sqrt (q));
   while (q > 1)
@@ -74,44 +70,54 @@ function [pf, n] = factor (q)
       p = q;
     endif
     pf = [pf, p];
     ## Reduce q.
     q /= prod (p);
   endwhile
   pf = sort (pf);
 
-  ## Verify algorithm was succesful
+  ## Verify algorithm was successful
   q = prod (pf);
   if (q != qorig)
     error ("factor: Q too large to factor");
   elseif (q >= flintmax ())
     warning ("factor: Q too large.  Answer is unreliable");
   endif
 
   ## Determine multiplicity.
   if (nargout > 1)
     idx = find ([0, pf] != [pf, 0]);
     pf = pf(idx(1:length (idx)-1));
     n = diff (idx);
   endif
 
+ ## Restore class of input
+ pf = feval (cls, pf); 
+
 endfunction
 
 
 %!assert (factor (1), 1)
 %!test
 %! for i = 2:20
 %!   pf = factor (i);
 %!   assert (prod (pf), i);
 %!   assert (all (isprime (pf)));
 %!   [pf, n] = factor (i);
 %!   assert (prod (pf.^n), i);
 %!   assert (all ([0,pf] != [pf,0]));
 %! endfor
 
+%!assert (factor (uint8 (8)), uint8 ([2 2 2]))
+%!assert (factor (single (8)), single ([2 2 2]))
+%!test
+%! [pf, n] = factor (int16 (8));
+%! assert (pf, int16 (2));
+%! assert (n, double (3));
+
 ## Test input validation
 %!error factor ()
 %!error factor (1,2)
 %!error <Q must be a real non-negative integer> factor (6i)
 %!error <Q must be a real non-negative integer> factor ([1,2])
 %!error <Q must be a real non-negative integer> factor (1.5)
 %!error <Q must be a real non-negative integer> factor (-20)
