# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1379028062 14400
#      Thu Sep 12 19:21:02 2013 -0400
# Node ID 3856298f1ff8283034758c5edbd37f350ddc43ef
# Parent  e89e86e1a5518c11058930fec5e907e60e31251b
eliminate unimplemented vax and cray floating point formats

* mach-info.h



* test/io.tst: Delete vaxd, vaxg, and cray from list of architectures
in fopen test.

# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1379028062 14400
#      Thu Sep 12 19:21:02 2013 -0400
# Node ID ea2763020ac1aa15ad0d43d787b61ff3b8469209
# Parent  e89e86e1a5518c11058930fec5e907e60e31251b
eliminate unimplemented vax and cray floating point formats

* mach-info.h (oct_mach_info::float_format): Delete flt_fmt_vaxd,
flt_fmt_vaxg, and flt_fmt_cray enum values.

* ls-mat4.cc (float_format_to_mopt_digit, mopt_digit_to_float_format):
Delete cases for vaxd, vaxg, and cray floating point formats.
* lo-ieee.cc (octave_ieee_init): Likewise.
* mach-info.cc (get_float_format,
oct_mach_info::string_to_float_format,
oct_mach_info::float_format_as_string): Likewise.

* oct-stream.cc: Delete explicit template instantiation for do_write.
(octave_stream::write, do_read): Delete checks for vaxd and vaxg
floating point formats.

* pr-output.cc (pr_any_float): Don't check for cray or unknonwn float
formats.

* data-conv.cc (VAX_D_double_to_IEEE_little_double,
VAX_G_double_to_IEEE_little_double, Cray_to_IEEE_little_double,
IEEE_big_float_to_IEEE_little_float, VAX_D_float_to_IEEE_little_float,
VAX_G_float_to_IEEE_little_float, Cray_to_IEEE_little_float,
IEEE_little_double_to_IEEE_big_double,
VAX_D_double_to_IEEE_big_double, VAX_G_double_to_IEEE_big_double,
Cray_to_IEEE_big_double, IEEE_little_float_to_IEEE_big_float,
VAX_D_float_to_IEEE_big_float, VAX_G_float_to_IEEE_big_float,
Cray_to_IEEE_big_float, IEEE_little_double_to_VAX_D_double,
IEEE_big_double_to_VAX_D_double, VAX_G_double_to_VAX_D_double,
Cray_to_VAX_D_double, IEEE_little_float_to_VAX_D_float,
IEEE_big_float_to_VAX_D_float, VAX_G_float_to_VAX_D_float,
Cray_to_VAX_D_float, IEEE_little_double_to_VAX_G_double,
IEEE_big_double_to_VAX_G_double, VAX_D_double_to_VAX_G_double,
Cray_to_VAX_G_double, IEEE_little_float_to_VAX_G_float,
IEEE_big_float_to_VAX_G_float, VAX_D_float_to_VAX_G_float,
Cray_to_VAX_G_float): Delete.
(do_double_format_conversion): Eliminate unimplemented vaxd, vaxg, and
cray conversions.

* file-io.cc (Ffopen, Ffread): Fix doc strings.

diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -665,25 +665,16 @@ for the file.  Valid values for @var{arc
 @item native\n\
 The format of the current machine (this is the default).\n\
 \n\
 @item ieee-be\n\
 IEEE big endian format.\n\
 \n\
 @item ieee-le\n\
 IEEE little endian format.\n\
-\n\
-@item vaxd\n\
-VAX D floating format.\n\
-\n\
-@item vaxg\n\
-VAX G floating format.\n\
-\n\
-@item cray\n\
-Cray floating format.\n\
 @end table\n\
 \n\
 @noindent\n\
 however, conversions are currently only supported for @samp{native}\n\
 @samp{ieee-be}, and @samp{ieee-le} formats.\n\
 @seealso{fclose, fgets, fgetl, fscanf, fread, fputs, fdisp, fprintf, fwrite, fskipl, fseek, frewind, ftell, feof, ferror, fclear, fflush, freport}\n\
 @end deftypefn")
 {
@@ -1558,25 +1549,16 @@ for the file.  Valid values are\n\
 @item @qcode{\"native\"}\n\
 The format of the current machine.\n\
 \n\
 @item \"ieee-be\"\n\
 IEEE big endian.\n\
 \n\
 @item \"ieee-le\"\n\
 IEEE little endian.\n\
-\n\
-@item @qcode{\"vaxd\"}\n\
-VAX D floating format.\n\
-\n\
-@item @qcode{\"vaxg\"}\n\
-VAX G floating format.\n\
-\n\
-@item @qcode{\"cray\"}\n\
-Cray floating format.\n\
 @end table\n\
 \n\
 @noindent\n\
 Conversions are currently only supported for @qcode{\"ieee-be\"} and\n\
 @qcode{\"ieee-le\"} formats.\n\
 \n\
 The data read from the file is returned in @var{val}, and the number of\n\
 values read is returned in @code{count}\n\
diff --git a/libinterp/corefcn/ls-mat4.cc b/libinterp/corefcn/ls-mat4.cc
--- a/libinterp/corefcn/ls-mat4.cc
+++ b/libinterp/corefcn/ls-mat4.cc
@@ -189,27 +189,18 @@ mopt_digit_to_float_format (int mach)
       flt_fmt = oct_mach_info::flt_fmt_ieee_little_endian;
       break;
 
     case 1:
       flt_fmt = oct_mach_info::flt_fmt_ieee_big_endian;
       break;
 
     case 2:
-      flt_fmt = oct_mach_info::flt_fmt_vax_d;
-      break;
-
     case 3:
-      flt_fmt = oct_mach_info::flt_fmt_vax_g;
-      break;
-
     case 4:
-      flt_fmt = oct_mach_info::flt_fmt_cray;
-      break;
-
     default:
       flt_fmt = oct_mach_info::flt_fmt_unknown;
       break;
     }
 
   return flt_fmt;
 }
 
@@ -223,28 +214,16 @@ float_format_to_mopt_digit (oct_mach_inf
     case oct_mach_info::flt_fmt_ieee_little_endian:
       retval = 0;
       break;
 
     case oct_mach_info::flt_fmt_ieee_big_endian:
       retval = 1;
       break;
 
-    case oct_mach_info::flt_fmt_vax_d:
-      retval = 2;
-      break;
-
-    case oct_mach_info::flt_fmt_vax_g:
-      retval = 3;
-      break;
-
-    case oct_mach_info::flt_fmt_cray:
-      retval = 4;
-      break;
-
     default:
       break;
     }
 
   return retval;
 }
 
 // Extract one value (scalar, matrix, string, etc.) from stream IS and
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -3074,24 +3074,20 @@ do_read (octave_stream& strm, octave_idx
     }
   else
     {
       nda.resize (dim_vector (32, 1), elt_zero);
       dat = nda.fortran_vec ();
       max_size = 32;
     }
 
-  // FIXME -- byte order for Cray?
-
   bool swap = false;
 
   if (oct_mach_info::words_big_endian ())
-    swap = (from_flt_fmt == oct_mach_info::flt_fmt_ieee_little_endian
-            || from_flt_fmt == oct_mach_info::flt_fmt_vax_g
-            || from_flt_fmt == oct_mach_info::flt_fmt_vax_g);
+    swap = (from_flt_fmt == oct_mach_info::flt_fmt_ieee_little_endian);
   else
     swap = (from_flt_fmt == oct_mach_info::flt_fmt_ieee_big_endian);
 
   union
   {
     char buf[sizeof (typename strip_template_param<octave_int, READ_T>::type)];
     typename strip_template_param<octave_int, READ_T>::type val;
   } u;
@@ -3490,48 +3486,16 @@ do_write (std::ostream& os, const T& val
       (*current_liboctave_error_handler)
         ("write: invalid type specification");
       break;
     }
 
   return retval;
 }
 
-template bool
-do_write (std::ostream&, const octave_int8&, oct_data_conv::data_type,
-          oct_mach_info::float_format, bool, bool);
-
-template bool
-do_write (std::ostream&, const octave_uint8&, oct_data_conv::data_type,
-          oct_mach_info::float_format, bool, bool);
-
-template bool
-do_write (std::ostream&, const octave_int16&, oct_data_conv::data_type,
-          oct_mach_info::float_format, bool, bool);
-
-template bool
-do_write (std::ostream&, const octave_uint16&, oct_data_conv::data_type,
-          oct_mach_info::float_format, bool, bool);
-
-template bool
-do_write (std::ostream&, const octave_int32&, oct_data_conv::data_type,
-          oct_mach_info::float_format, bool, bool);
-
-template bool
-do_write (std::ostream&, const octave_uint32&, oct_data_conv::data_type,
-          oct_mach_info::float_format, bool, bool);
-
-template bool
-do_write (std::ostream&, const octave_int64&, oct_data_conv::data_type,
-          oct_mach_info::float_format, bool, bool);
-
-template bool
-do_write (std::ostream&, const octave_uint64&, oct_data_conv::data_type,
-          oct_mach_info::float_format, bool, bool);
-
 template <class T>
 octave_idx_type
 octave_stream::write (const Array<T>& data, octave_idx_type block_size,
                       oct_data_conv::data_type output_type,
                       octave_idx_type skip, oct_mach_info::float_format flt_fmt)
 {
   octave_idx_type retval = -1;
 
@@ -3543,24 +3507,20 @@ octave_stream::write (const Array<T>& da
 
   octave_idx_type n = data.length ();
 
   oct_mach_info::float_format native_flt_fmt
     = oct_mach_info::float_format ();
 
   bool do_float_conversion = (flt_fmt != native_flt_fmt);
 
-  // FIXME -- byte order for Cray?
-
   bool swap = false;
 
   if (oct_mach_info::words_big_endian ())
-    swap = (flt_fmt == oct_mach_info::flt_fmt_ieee_little_endian
-            || flt_fmt == oct_mach_info::flt_fmt_vax_g
-            || flt_fmt == oct_mach_info::flt_fmt_vax_g);
+    swap = (flt_fmt == oct_mach_info::flt_fmt_ieee_little_endian);
   else
     swap = (flt_fmt == oct_mach_info::flt_fmt_ieee_big_endian);
 
   for (octave_idx_type i = 0; i < n; i++)
     {
       std::ostream *osp = output_stream ();
 
       if (osp)
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -1454,35 +1454,30 @@ pr_any_float (const float_format *fmt, s
       if (hex_format)
         {
           equiv tmp;
           tmp.d = d;
 
           // Unless explicitly asked for, always print in big-endian
           // format.
 
-          // FIXME -- is it correct to swap bytes for VAX
-          // formats and not for Cray?
-
           // FIXME -- will bad things happen if we are
           // interrupted before resetting the format flags and fill
           // character?
 
           oct_mach_info::float_format flt_fmt =
             oct_mach_info::native_float_format ();
 
           char ofill = os.fill ('0');
 
           std::ios::fmtflags oflags
             = os.flags (std::ios::right | std::ios::hex);
 
           if (hex_format > 1
-              || flt_fmt == oct_mach_info::flt_fmt_ieee_big_endian
-              || flt_fmt == oct_mach_info::flt_fmt_cray
-              || flt_fmt == oct_mach_info::flt_fmt_unknown)
+              || flt_fmt == oct_mach_info::flt_fmt_ieee_big_endian)
             {
               for (size_t i = 0; i < sizeof (double); i++)
                 os << std::setw (2) << static_cast<int> (tmp.i[i]);
             }
           else
             {
               for (int i = sizeof (double) - 1; i >= 0; i--)
                 os << std::setw (2) << static_cast<int> (tmp.i[i]);
@@ -1491,25 +1486,20 @@ pr_any_float (const float_format *fmt, s
           os.fill (ofill);
           os.setf (oflags);
         }
       else if (bit_format)
         {
           equiv tmp;
           tmp.d = d;
 
-          // FIXME -- is it correct to swap bytes for VAX
-          // formats and not for Cray?
-
           oct_mach_info::float_format flt_fmt =
             oct_mach_info::native_float_format ();
 
-          if (flt_fmt == oct_mach_info::flt_fmt_ieee_big_endian
-              || flt_fmt == oct_mach_info::flt_fmt_cray
-              || flt_fmt == oct_mach_info::flt_fmt_unknown)
+          if (flt_fmt == oct_mach_info::flt_fmt_ieee_big_endian)
             {
               for (size_t i = 0; i < sizeof (double); i++)
                 PRINT_CHAR_BITS (os, tmp.i[i]);
             }
           else
             {
               if (bit_format > 1)
                 {
diff --git a/liboctave/system/mach-info.cc b/liboctave/system/mach-info.cc
--- a/liboctave/system/mach-info.cc
+++ b/liboctave/system/mach-info.cc
@@ -70,50 +70,30 @@ equiv_compare (const equiv *std, const e
   return 1;
 }
 
 static oct_mach_info::float_format
 get_float_format (void)
 {
   oct_mach_info::float_format retval = oct_mach_info::flt_fmt_unknown;
 
-#if defined (CRAY)
-
-  // FIXME -- this should be determined automatically.
-
-  native_float_fmt = oct_mach_info::flt_fmt_cray;
-
-#else
-
   float_params fp[5];
 
   INIT_FLT_PAR (fp[0], oct_mach_info::flt_fmt_ieee_big_endian,
                    1048576,  0,
                 2146435071, -1,
                 1017118720,  0,
                 1018167296,  0);
 
   INIT_FLT_PAR (fp[1], oct_mach_info::flt_fmt_ieee_little_endian,
                  0,    1048576,
                 -1, 2146435071,
                  0, 1017118720,
                  0, 1018167296);
 
-  INIT_FLT_PAR (fp[2], oct_mach_info::flt_fmt_vax_d,
-                   128,  0,
-                -32769, -1,
-                  9344,  0,
-                  9344,  0);
-
-  INIT_FLT_PAR (fp[3], oct_mach_info::flt_fmt_vax_g,
-                    16,  0,
-                -32769, -1,
-                 15552,  0,
-                 15552,  0);
-
   INIT_FLT_PAR (fp[4], oct_mach_info::flt_fmt_unknown,
                 0, 0,
                 0, 0,
                 0, 0,
                 0, 0);
 
   equiv mach_fp_par[4];
 
@@ -128,18 +108,16 @@ get_float_format (void)
       if (equiv_compare (fp[i].fp_par, mach_fp_par, 4))
         {
           retval = fp[i].fp_fmt;
           break;
         }
     }
   while (fp[++i].fp_fmt != oct_mach_info::flt_fmt_unknown);
 
-#endif
-
   return retval;
 }
 
 static bool
 ten_little_endians (void)
 {
   // Are we little or big endian?  From Harbison & Steele.
 
@@ -209,22 +187,16 @@ oct_mach_info::string_to_float_format (c
   oct_mach_info::float_format retval = oct_mach_info::flt_fmt_unknown;
 
   if (s == "native" || s == "n")
     retval = oct_mach_info::native_float_format ();
   else if (s == "ieee-be" || s == "b")
     retval = oct_mach_info::flt_fmt_ieee_big_endian;
   else if (s == "ieee-le" || s == "l")
     retval = oct_mach_info::flt_fmt_ieee_little_endian;
-  else if (s == "vaxd" || s == "d")
-    retval = oct_mach_info::flt_fmt_vax_d;
-  else if (s == "vaxg" || s == "g")
-    retval = oct_mach_info::flt_fmt_vax_g;
-  else if (s == "cray" || s == "c")
-    retval = oct_mach_info::flt_fmt_cray;
   else if (s == "unknown")
     retval = oct_mach_info::flt_fmt_unknown;
   else
     (*current_liboctave_error_handler)
       ("invalid architecture type specified");
 
   return retval;
 }
@@ -239,26 +211,14 @@ oct_mach_info::float_format_as_string (f
     case flt_fmt_ieee_big_endian:
       retval = "ieee-be";
       break;
 
     case flt_fmt_ieee_little_endian:
       retval = "ieee-le";
       break;
 
-    case flt_fmt_vax_d:
-      retval = "vaxd";
-      break;
-
-    case flt_fmt_vax_g:
-      retval = "vaxg";
-      break;
-
-    case flt_fmt_cray:
-      retval = "cray";
-      break;
-
     default:
       break;
     }
 
   return retval;
 }
diff --git a/liboctave/system/mach-info.h b/liboctave/system/mach-info.h
--- a/liboctave/system/mach-info.h
+++ b/liboctave/system/mach-info.h
@@ -35,19 +35,16 @@ protected:
 
 public:
 
   enum float_format
     {
       flt_fmt_unknown,
       flt_fmt_ieee_little_endian,
       flt_fmt_ieee_big_endian,
-      flt_fmt_vax_d,
-      flt_fmt_vax_g,
-      flt_fmt_cray
     };
 
   static bool instance_ok (void);
 
   static float_format native_float_format (void);
 
   static bool words_big_endian (void);
 
diff --git a/liboctave/util/data-conv.cc b/liboctave/util/data-conv.cc
--- a/liboctave/util/data-conv.cc
+++ b/liboctave/util/data-conv.cc
@@ -540,201 +540,33 @@ gripe_data_conversion (const char *from,
 
 static void
 IEEE_big_double_to_IEEE_little_double (void *d, octave_idx_type len)
 {
   swap_bytes<8> (d, len);
 }
 
 static void
-VAX_D_double_to_IEEE_little_double (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("VAX D float", "IEEE little endian format");
-}
-
-static void
-VAX_G_double_to_IEEE_little_double (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("VAX G float", "IEEE little endian format");
-}
-
-static void
-Cray_to_IEEE_little_double (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("Cray", "IEEE little endian format");
-}
-
-static void
 IEEE_big_float_to_IEEE_little_float (void *d, octave_idx_type len)
 {
   swap_bytes<4> (d, len);
 }
 
 static void
-VAX_D_float_to_IEEE_little_float (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("VAX D float", "IEEE little endian format");
-}
-
-static void
-VAX_G_float_to_IEEE_little_float (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("VAX G float", "IEEE little endian format");
-}
-
-static void
-Cray_to_IEEE_little_float (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("Cray", "IEEE little endian format");
-}
-
-static void
 IEEE_little_double_to_IEEE_big_double (void *d, octave_idx_type len)
 {
   swap_bytes<8> (d, len);
 }
 
 static void
-VAX_D_double_to_IEEE_big_double (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("VAX D float", "IEEE big endian format");
-}
-
-static void
-VAX_G_double_to_IEEE_big_double (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("VAX G float", "IEEE big endian format");
-}
-
-static void
-Cray_to_IEEE_big_double (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("Cray", "IEEE big endian format");
-}
-
-static void
 IEEE_little_float_to_IEEE_big_float (void *d, octave_idx_type len)
 {
   swap_bytes<4> (d, len);
 }
 
-static void
-VAX_D_float_to_IEEE_big_float (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("VAX D float", "IEEE big endian format");
-}
-
-static void
-VAX_G_float_to_IEEE_big_float (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("VAX G float", "IEEE big endian format");
-}
-
-static void
-Cray_to_IEEE_big_float (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("Cray", "IEEE big endian format");
-}
-
-static void
-IEEE_little_double_to_VAX_D_double (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("IEEE little endian", "VAX D");
-}
-
-static void
-IEEE_big_double_to_VAX_D_double (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("IEEE big endian", "VAX D");
-}
-
-static void
-VAX_G_double_to_VAX_D_double (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("VAX G float", "VAX D");
-}
-
-static void
-Cray_to_VAX_D_double (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("Cray", "VAX D");
-}
-
-static void
-IEEE_little_float_to_VAX_D_float (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("IEEE little endian", "VAX D");
-}
-
-static void
-IEEE_big_float_to_VAX_D_float (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("IEEE big endian", "VAX D");
-}
-
-static void
-VAX_G_float_to_VAX_D_float (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("VAX G float", "VAX D");
-}
-
-static void
-Cray_to_VAX_D_float (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("Cray", "VAX D");
-}
-
-static void
-IEEE_little_double_to_VAX_G_double (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("IEEE little endian", "VAX G");
-}
-
-static void
-IEEE_big_double_to_VAX_G_double (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("IEEE big endian", "VAX G");
-}
-
-static void
-VAX_D_double_to_VAX_G_double (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("VAX D float", "VAX G");
-}
-
-static void
-Cray_to_VAX_G_double (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("VAX G float", "VAX G");
-}
-
-static void
-IEEE_little_float_to_VAX_G_float (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("IEEE little endian", "VAX G");
-}
-
-static void
-IEEE_big_float_to_VAX_G_float (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("IEEE big endian", "VAX G");
-}
-
-static void
-VAX_D_float_to_VAX_G_float (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("VAX D float", "VAX G");
-}
-
-static void
-Cray_to_VAX_G_float (void * /* d */, octave_idx_type /* len */)
-{
-  gripe_data_conversion ("VAX G float", "VAX G");
-}
-
 void
 do_double_format_conversion (void *data, octave_idx_type len,
                              oct_mach_info::float_format from_fmt,
                              oct_mach_info::float_format to_fmt)
 {
   switch (to_fmt)
     {
     case oct_mach_info::flt_fmt_ieee_little_endian:
@@ -742,112 +574,32 @@ do_double_format_conversion (void *data,
         {
         case oct_mach_info::flt_fmt_ieee_little_endian:
           break;
 
         case oct_mach_info::flt_fmt_ieee_big_endian:
           IEEE_big_double_to_IEEE_little_double (data, len);
           break;
 
-        case oct_mach_info::flt_fmt_vax_d:
-          VAX_D_double_to_IEEE_little_double (data, len);
-          break;
-
-        case oct_mach_info::flt_fmt_vax_g:
-          VAX_G_double_to_IEEE_little_double (data, len);
-          break;
-
-        case oct_mach_info::flt_fmt_cray:
-          Cray_to_IEEE_little_double (data, len);
-          break;
-
         default:
           gripe_unrecognized_float_fmt ();
           break;
         }
       break;
 
     case oct_mach_info::flt_fmt_ieee_big_endian:
       switch (from_fmt)
         {
         case oct_mach_info::flt_fmt_ieee_little_endian:
           IEEE_little_double_to_IEEE_big_double (data, len);
           break;
 
         case oct_mach_info::flt_fmt_ieee_big_endian:
           break;
 
-        case oct_mach_info::flt_fmt_vax_d:
-          VAX_D_double_to_IEEE_big_double (data, len);
-          break;
-
-        case oct_mach_info::flt_fmt_vax_g:
-          VAX_G_double_to_IEEE_big_double (data, len);
-          break;
-
-        case oct_mach_info::flt_fmt_cray:
-          Cray_to_IEEE_big_double (data, len);
-          break;
-
-        default:
-          gripe_unrecognized_float_fmt ();
-          break;
-        }
-      break;
-
-    case oct_mach_info::flt_fmt_vax_d:
-      switch (from_fmt)
-        {
-        case oct_mach_info::flt_fmt_ieee_little_endian:
-          IEEE_little_double_to_VAX_D_double (data, len);
-          break;
-
-        case oct_mach_info::flt_fmt_ieee_big_endian:
-          IEEE_big_double_to_VAX_D_double (data, len);
-          break;
-
-        case oct_mach_info::flt_fmt_vax_d:
-          break;
-
-        case oct_mach_info::flt_fmt_vax_g:
-          VAX_G_double_to_VAX_D_double (data, len);
-          break;
-
-        case oct_mach_info::flt_fmt_cray:
-          Cray_to_VAX_D_double (data, len);
-          break;
-
-        default:
-          gripe_unrecognized_float_fmt ();
-          break;
-        }
-      break;
-
-    case oct_mach_info::flt_fmt_vax_g:
-      switch (from_fmt)
-        {
-        case oct_mach_info::flt_fmt_ieee_little_endian:
-          IEEE_little_double_to_VAX_G_double (data, len);
-          break;
-
-        case oct_mach_info::flt_fmt_ieee_big_endian:
-          IEEE_big_double_to_VAX_G_double (data, len);
-          break;
-
-        case oct_mach_info::flt_fmt_vax_d:
-          VAX_D_double_to_VAX_G_double (data, len);
-          break;
-
-        case oct_mach_info::flt_fmt_vax_g:
-          break;
-
-        case oct_mach_info::flt_fmt_cray:
-          Cray_to_VAX_G_double (data, len);
-          break;
-
         default:
           gripe_unrecognized_float_fmt ();
           break;
         }
       break;
 
     default:
       (*current_liboctave_error_handler)
@@ -869,112 +621,32 @@ do_float_format_conversion (void *data, 
         {
         case oct_mach_info::flt_fmt_ieee_little_endian:
           break;
 
         case oct_mach_info::flt_fmt_ieee_big_endian:
           IEEE_big_float_to_IEEE_little_float (data, len);
           break;
 
-        case oct_mach_info::flt_fmt_vax_d:
-          VAX_D_float_to_IEEE_little_float (data, len);
-          break;
-
-        case oct_mach_info::flt_fmt_vax_g:
-          VAX_G_float_to_IEEE_little_float (data, len);
-          break;
-
-        case oct_mach_info::flt_fmt_cray:
-          Cray_to_IEEE_little_float (data, len);
-          break;
-
         default:
           gripe_unrecognized_float_fmt ();
           break;
         }
       break;
 
     case oct_mach_info::flt_fmt_ieee_big_endian:
       switch (from_fmt)
         {
         case oct_mach_info::flt_fmt_ieee_little_endian:
           IEEE_little_float_to_IEEE_big_float (data, len);
           break;
 
         case oct_mach_info::flt_fmt_ieee_big_endian:
           break;
 
-        case oct_mach_info::flt_fmt_vax_d:
-          VAX_D_float_to_IEEE_big_float (data, len);
-          break;
-
-        case oct_mach_info::flt_fmt_vax_g:
-          VAX_G_float_to_IEEE_big_float (data, len);
-          break;
-
-        case oct_mach_info::flt_fmt_cray:
-          Cray_to_IEEE_big_float (data, len);
-          break;
-
-        default:
-          gripe_unrecognized_float_fmt ();
-          break;
-        }
-      break;
-
-    case oct_mach_info::flt_fmt_vax_d:
-      switch (from_fmt)
-        {
-        case oct_mach_info::flt_fmt_ieee_little_endian:
-          IEEE_little_float_to_VAX_D_float (data, len);
-          break;
-
-        case oct_mach_info::flt_fmt_ieee_big_endian:
-          IEEE_big_float_to_VAX_D_float (data, len);
-          break;
-
-        case oct_mach_info::flt_fmt_vax_d:
-          break;
-
-        case oct_mach_info::flt_fmt_vax_g:
-          VAX_G_float_to_VAX_D_float (data, len);
-          break;
-
-        case oct_mach_info::flt_fmt_cray:
-          Cray_to_VAX_D_float (data, len);
-          break;
-
-        default:
-          gripe_unrecognized_float_fmt ();
-          break;
-        }
-      break;
-
-    case oct_mach_info::flt_fmt_vax_g:
-      switch (from_fmt)
-        {
-        case oct_mach_info::flt_fmt_ieee_little_endian:
-          IEEE_little_float_to_VAX_G_float (data, len);
-          break;
-
-        case oct_mach_info::flt_fmt_ieee_big_endian:
-          IEEE_big_float_to_VAX_G_float (data, len);
-          break;
-
-        case oct_mach_info::flt_fmt_vax_d:
-          VAX_D_float_to_VAX_G_float (data, len);
-          break;
-
-        case oct_mach_info::flt_fmt_vax_g:
-          break;
-
-        case oct_mach_info::flt_fmt_cray:
-          Cray_to_VAX_G_float (data, len);
-          break;
-
         default:
           gripe_unrecognized_float_fmt ();
           break;
         }
       break;
 
     default:
       (*current_liboctave_error_handler)
diff --git a/liboctave/util/lo-ieee.cc b/liboctave/util/lo-ieee.cc
--- a/liboctave/util/lo-ieee.cc
+++ b/liboctave/util/lo-ieee.cc
@@ -68,19 +68,16 @@ octave_ieee_init (void)
         octave_NA = t.value;
 
         lo_ieee_float tf;
         tf.word = LO_IEEE_NA_FLOAT;
         octave_Float_NA = tf.value;
       }
       break;
 
-    case oct_mach_info::flt_fmt_cray:
-    case oct_mach_info::flt_fmt_vax_d:
-    case oct_mach_info::flt_fmt_vax_g:
     default:
       // If the format is unknown, then you will probably not have a
       // useful system, so we will abort here.  Anyone wishing to
       // experiment with building Octave on a system without IEEE
       // floating point should be capable of removing this check and
       // the configure test.
       (*current_liboctave_error_handler)
         ("lo_ieee_init: floating point format is not IEEE!  Maybe DLAMCH is miscompiled, or you are using some strange system without IEEE floating point math?");
diff --git a/test/io.tst b/test/io.tst
--- a/test/io.tst
+++ b/test/io.tst
@@ -314,17 +314,17 @@
 %!assert (sprintf ("%-6.2f", nan), "NaN   ")
 %!assert (sprintf ("%-+6.2f", NA), "+NA   ")
 %!assert (sprintf ("%-6.2f", NA), "NA    ")
 
 %!error <Invalid call to sprintf> sprintf ()
 %!error <format TEMPLATE must be a string> sprintf (1)
 
 %!test
-%! arch_list = {"native"; "ieee-le"; "ieee-be"; "vaxd"; "vaxg"; "cray"};
+%! arch_list = {"native"; "ieee-le"; "ieee-be"};
 %! warning ("off", "Octave:fopen-mode");
 %! status = 1;
 %!
 %! for i = 1:6
 %!   arch = arch_list{i};
 %!   for j = 1:4
 %!     if (j == 1)
 %!       mode_list = {"w"; "r"; "a"};
