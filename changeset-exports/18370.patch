# HG changeset patch
# User Rik <rik@octave.org>
# Date 1390587297 28800
#      Fri Jan 24 10:14:57 2014 -0800
# Branch stable
# Node ID 7994d3ce6e8e5df43ae0a2269f803667b9998baf
# Parent  4b32677b6229c3228249444f3aad56b9ff9a827d
assert.m: Fix regression and accept more than 3 arguments for certain cases (bug #41332).

* assert.m: Accept more than 3 arguments when one of the arguments is a format
string for error() and the extra arguments are passed on.  Add %!tests to
verify this works.

diff --git a/scripts/testfun/assert.m b/scripts/testfun/assert.m
--- a/scripts/testfun/assert.m
+++ b/scripts/testfun/assert.m
@@ -51,17 +51,17 @@
 ## its dimensions must agree with those of @var{observed} and @var{expected}
 ## and tests are performed on an element-wise basis.
 ## @end table
 ## @seealso{test, fail, error}
 ## @end deftypefn
 
 function assert (cond, varargin)
 
-  if (nargin == 0 || nargin > 3)
+  if (nargin == 0)
     print_usage ();
   endif
 
   persistent call_depth = -1;
   persistent errmsg;
 
   call_depth++;
 
@@ -79,18 +79,20 @@ function assert (cond, varargin)
       else
         error (varargin{:});
       endif
     endif
   else
     expected = varargin{1};
     if (nargin < 3)
       tol = 0;
+    elseif (nargin == 3)
+      tol = varargin{2};
     else
-      tol = varargin{2};
+      print_usage ();
     endif
 
     ## Add to list as the errors accumulate.  If empty at end then no errors.
     err.index = {};
     err.observed = {};
     err.expected = {};
     err.reason = {};
 
@@ -391,16 +393,18 @@ endfunction
 %!assert (1)
 %!error assert (0)
 %!assert (ones (3,1))
 %!assert (ones (1,3))
 %!assert (ones (3,4))
 %!error assert ([1,0,1])
 %!error assert ([1;1;0])
 %!error assert ([1,0;1,1])
+%!error <2-part error> assert (false, "%s %s", "2-part", "error")
+%!error <2-part error> assert (false, "TST:msg_id", "%s %s", "2-part", "error")
 
 ## scalars
 %!error <Dimensions don't match> assert (3, [3,3])
 %!error <Dimensions don't match> assert (3, [3,3; 3,3])
 %!error <Dimensions don't match> assert ([3,3; 3,3], 3)
 %!assert (3, 3)
 %!error <Abs err 1 exceeds tol> assert (3, 4)
 %!assert (3+eps, 3, eps)
