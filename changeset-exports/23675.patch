# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498133950 14400
#      Thu Jun 22 08:19:10 2017 -0400
# Node ID f71c0195b19d0be7f700fad93d85d88be0947e1b
# Parent  81b141d265a3f277aa9bc270dffb5bc61cccf75c
move octave_preserve_stream_state to octave namespace

* octave-preserve-stream-state.h (preserve_stream_state): Move inside
octave namespace and rename from octave_preserve_stream_state.
Change all uses.

diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -868,17 +868,17 @@ do_dbstack (octave::interpreter& interp,
 
   if (nargout == 0)
     {
       octave_map stk = cs.backtrace (nskip, curr_frame);
       octave_idx_type nframes_to_display = stk.numel ();
 
       if (nframes_to_display > 0)
         {
-          octave_preserve_stream_state stream_state (os);
+          octave::preserve_stream_state stream_state (os);
 
           os << "stopped in:\n\n";
 
           Cell names = stk.contents ("name");
           Cell files = stk.contents ("file");
           Cell lines = stk.contents ("line");
 
           bool show_top_level = true;
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -281,17 +281,17 @@ public:
 
   pr_engineering_float (const float_format& f_arg, double val_arg)
     : f (f_arg), val (val_arg) { }
 };
 
 std::ostream&
 operator << (std::ostream& os, const pr_engineering_float& pef)
 {
-  octave_preserve_stream_state stream_state (os);
+  octave::preserve_stream_state stream_state (os);
 
   if (pef.f.fw >= 0)
     os << std::setw (pef.f.fw - pef.f.ex);
 
   if (pef.f.prec >= 0)
     os << std::setprecision (pef.f.prec);
 
   os.flags (static_cast<std::ios::fmtflags>
@@ -324,17 +324,17 @@ public:
 
   pr_formatted_float (const float_format& f_arg, double val_arg)
     : f (f_arg), val (val_arg) { }
 };
 
 std::ostream&
 operator << (std::ostream& os, const pr_formatted_float& pff)
 {
-  octave_preserve_stream_state stream_state (os);
+  octave::preserve_stream_state stream_state (os);
 
   if (pff.f.fw >= 0)
     os << std::setw (pff.f.fw);
 
   if (pff.f.prec >= 0)
     os << std::setprecision (pff.f.prec);
 
   os.flags (static_cast<std::ios::fmtflags>
@@ -464,17 +464,17 @@ public:
 
   pr_rational_float (const float_format& f_arg, double val_arg)
     : f (f_arg), val (val_arg) { }
 };
 
 std::ostream&
 operator << (std::ostream& os, const pr_rational_float& prf)
 {
-  octave_preserve_stream_state stream_state (os);
+  octave::preserve_stream_state stream_state (os);
 
   int fw = (rat_string_len > 0 ? rat_string_len : prf.f.fw);
   std::string s = rational_approx (prf.val, fw);
 
   if (fw >= 0)
     os << std::setw (fw);
 
   os.flags (static_cast<std::ios::fmtflags>
@@ -1439,17 +1439,17 @@ pr_any_float (const float_format *fmt, s
       // Unless explicitly asked for, always print in big-endian format
       // for hex and bit formats.
       //
       //   {bit,hex}_format == 1: print big-endian
       //   {bit,hex}_format == 2: print native
 
       if (hex_format)
         {
-          octave_preserve_stream_state stream_state (os);
+          octave::preserve_stream_state stream_state (os);
 
           equiv tmp;
           tmp.d = d;
 
           // Unless explicitly asked for, always print in big-endian format.
 
           // FIXME: will bad things happen if we are
           // interrupted before resetting the format flags and fill
@@ -1497,43 +1497,43 @@ pr_any_float (const float_format *fmt, s
                 {
                   for (int i = sizeof (double) - 1; i >= 0; i--)
                     PRINT_CHAR_BITS (os, tmp.i[i]);
                 }
             }
         }
       else if (octave::math::isna (d))
         {
-          octave_preserve_stream_state stream_state (os);
+          octave::preserve_stream_state stream_state (os);
 
           if (fw > 0)
             os << std::setw (fw) << "NA";
           else
             os << "NA";
         }
       else if (rat_format)
         os << pr_rational_float (*fmt, d);
       else if (octave::math::isinf (d))
         {
-          octave_preserve_stream_state stream_state (os);
+          octave::preserve_stream_state stream_state (os);
 
           const char *s;
           if (d < 0.0)
             s = "-Inf";
           else
             s = "Inf";
 
           if (fw > 0)
             os << std::setw (fw) << s;
           else
             os << s;
         }
       else if (octave::math::isnan (d))
         {
-          octave_preserve_stream_state stream_state (os);
+          octave::preserve_stream_state stream_state (os);
 
           if (fw > 0)
             os << std::setw (fw) << "NaN";
           else
             os << "NaN";
         }
       else if (print_eng)
         os << pr_engineering_float (*fmt, d);
@@ -1631,17 +1631,17 @@ print_empty_nd_array (std::ostream& os, 
     }
 }
 
 static void
 pr_scale_header (std::ostream& os, double scale)
 {
   if (Vfixed_point_format && ! print_g && scale != 1.0)
     {
-      octave_preserve_stream_state stream_state (os);
+      octave::preserve_stream_state stream_state (os);
 
       os << "  "
          << std::setw (8) << std::setprecision (1)
          << std::setiosflags (std::ios::scientific | std::ios::left)
          << scale
          << " *\n";
 
       if (! Vcompact_format)
@@ -1650,17 +1650,17 @@ pr_scale_header (std::ostream& os, doubl
 }
 
 static void
 pr_col_num_header (std::ostream& os, octave_idx_type total_width, int max_width,
                    octave_idx_type lim, octave_idx_type col, int extra_indent)
 {
   if (total_width > max_width && Vsplit_long_rows)
     {
-      octave_preserve_stream_state stream_state (os);
+      octave::preserve_stream_state stream_state (os);
 
       if (col != 0)
         {
           if (Vcompact_format)
             os << "\n";
           else
             os << "\n\n";
         }
@@ -1816,17 +1816,17 @@ octave_print_internal (std::ostream& os,
                     }
                   else
                     os << " ...\n";
                 }
             }
         }
       else
         {
-          octave_preserve_stream_state stream_state (os);
+          octave::preserve_stream_state stream_state (os);
 
           pr_scale_header (os, scale);
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
               octave_idx_type lim = (col +inc < nc ? col + inc : nc);
 
               pr_col_num_header (os, total_width, max_width, lim, col,
@@ -1947,17 +1947,17 @@ octave_print_internal (std::ostream& os,
                 os << " ]";
               else
                 os << " ...\n";
             }
           os << ")";
         }
       else
         {
-          octave_preserve_stream_state stream_state (os);
+          octave::preserve_stream_state stream_state (os);
 
           os << "Diagonal Matrix\n";
           if (! Vcompact_format)
             os << "\n";
 
           pr_scale_header (os, scale);
 
           // kluge.  Get the true width of a number.
@@ -2234,17 +2234,17 @@ octave_print_internal (std::ostream& os,
                     }
                   else
                     os << " ...\n";
                 }
             }
         }
       else
         {
-          octave_preserve_stream_state stream_state (os);
+          octave::preserve_stream_state stream_state (os);
 
           pr_scale_header (os, scale);
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
               octave_idx_type lim = (col +inc < nc ? col + inc : nc);
 
               pr_col_num_header (os, total_width, max_width, lim, col,
@@ -2367,17 +2367,17 @@ octave_print_internal (std::ostream& os,
                 os << " ]";
               else
                 os << " ...\n";
             }
           os << ")";
         }
       else
         {
-          octave_preserve_stream_state stream_state (os);
+          octave::preserve_stream_state stream_state (os);
 
           os << "Diagonal Matrix\n";
           if (! Vcompact_format)
             os << "\n";
 
           pr_scale_header (os, scale);
 
           // kluge.  Get the true width of a number.
@@ -2515,17 +2515,17 @@ octave_print_internal (std::ostream& os,
                 os << " ]";
               else
                 os << " ...\n";
             }
           os << ")";
         }
       else
         {
-          octave_preserve_stream_state stream_state (os);
+          octave::preserve_stream_state stream_state (os);
 
           os << "Permutation Matrix\n";
           if (! Vcompact_format)
             os << "\n";
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
               octave_idx_type lim = (col +inc < nc ? col + inc : nc);
@@ -2683,17 +2683,17 @@ octave_print_internal (std::ostream& os,
                   pr_float (os, increment, fw);
                   os << " : ";
                 }
               pr_float (os, limit, fw);
             }
         }
       else
         {
-          octave_preserve_stream_state stream_state (os);
+          octave::preserve_stream_state stream_state (os);
 
           int column_width = fw + 2;
           octave_idx_type total_width = num_elem * column_width;
           octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
           if (free_format)
             {
               os << r;
@@ -2980,17 +2980,17 @@ pr_int (std::ostream& os, const T& d, in
   // Unless explicitly asked for, always print in big-endian
   // format for hex and bit formats.
   //
   //   {bit,hex}_format == 1: print big-endian
   //   {bit,hex}_format == 2: print native
 
   if (hex_format)
     {
-      octave_preserve_stream_state stream_state (os);
+      octave::preserve_stream_state stream_state (os);
 
       os.flags (std::ios::right | std::ios::hex);
 
       if (hex_format > 1 || octave::mach_info::words_big_endian ())
         {
           for (size_t i = 0; i < sz; i++)
             os << std::setw (2) << static_cast<int> (tmpi[i]);
         }
@@ -3018,17 +3018,17 @@ pr_int (std::ostream& os, const T& d, in
             {
               for (int i = sz - 1; i >= 0; i--)
                 PRINT_CHAR_BITS (os, tmpi[i]);
             }
         }
     }
   else
     {
-      octave_preserve_stream_state stream_state (os);
+      octave::preserve_stream_state stream_state (os);
 
       os << std::setw (fw)
          << typename octave_print_conv<T>::print_conv_type (d);
 
       if (bank_format)
         os << ".00";
     }
 }
@@ -3314,17 +3314,17 @@ octave_print_internal_template (std::ost
                   os << "\n";
                 }
 
               if (pr_as_read_syntax)
                 os << "]";
             }
           else
             {
-              octave_preserve_stream_state stream_state (os);
+              octave::preserve_stream_state stream_state (os);
 
               octave_idx_type n_rows = page.rows ();
               octave_idx_type n_cols = page.cols ();
 
               for (octave_idx_type col = 0; col < n_cols; col += inc)
                 {
                   octave_idx_type lim = (col +inc < n_cols ? col + inc
                                                            : n_cols);
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -1065,17 +1065,17 @@ whos_parameter
 
 static void
 print_descriptor (std::ostream& os, std::list<whos_parameter> params)
 {
   // This method prints a line of information on a given symbol
   std::list<whos_parameter>::iterator i = params.begin ();
   std::ostringstream param_buf;
 
-  octave_preserve_stream_state stream_state (os);
+  octave::preserve_stream_state stream_state (os);
 
   while (i != params.end ())
     {
       whos_parameter param = *i;
 
       if (param.command != '\0')
         {
           // Do the actual printing
@@ -1203,17 +1203,17 @@ private:
 
     void display_line (std::ostream& os,
                        const std::list<whos_parameter>& params) const
     {
       std::string dims_str = get_dims_str (varval);
 
       std::list<whos_parameter>::const_iterator i = params.begin ();
 
-      octave_preserve_stream_state stream_state (os);
+      octave::preserve_stream_state stream_state (os);
 
       while (i != params.end ())
         {
           whos_parameter param = *i;
 
           if (param.command != '\0')
             {
               // Do the actual printing.
diff --git a/libinterp/octave-value/ov-base-sparse.cc b/libinterp/octave-value/ov-base-sparse.cc
--- a/libinterp/octave-value/ov-base-sparse.cc
+++ b/libinterp/octave-value/ov-base-sparse.cc
@@ -345,17 +345,17 @@ octave_base_sparse<T>::print_info (std::
   matrix.print_info (os, prefix);
 }
 
 template <typename T>
 void
 octave_base_sparse<T>::print_raw (std::ostream& os,
                                   bool pr_as_read_syntax) const
 {
-  octave_preserve_stream_state stream_state (os);
+  octave::preserve_stream_state stream_state (os);
 
   octave_idx_type nr = matrix.rows ();
   octave_idx_type nc = matrix.cols ();
   octave_idx_type nz = nnz ();
 
   // FIXME: this should probably all be handled by a
   // separate octave_print_internal function that can handle format
   // compact, loose, etc.
diff --git a/liboctave/util/octave-preserve-stream-state.h b/liboctave/util/octave-preserve-stream-state.h
--- a/liboctave/util/octave-preserve-stream-state.h
+++ b/liboctave/util/octave-preserve-stream-state.h
@@ -22,36 +22,39 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_octave_preserve_stream_state_h)
 #define octave_octave_preserve_stream_state_h 1
 
 #include "octave-config.h"
 
 #include <ios>
 
-class
-octave_preserve_stream_state
+namespace octave
 {
-public:
-
-  octave_preserve_stream_state (std::ios& s)
-    : stream (s), oflags (s.flags ()), oprecision (s.precision ()),
-      owidth (s.width ()), ofill (s.fill ())
-  { }
-
-  ~octave_preserve_stream_state (void)
+  class
+  preserve_stream_state
   {
-    stream.flags (oflags);
-    stream.precision (oprecision);
-    stream.width (owidth);
-    stream.fill (ofill);
-  }
+  public:
+
+    preserve_stream_state (std::ios& s)
+      : stream (s), oflags (s.flags ()), oprecision (s.precision ()),
+        owidth (s.width ()), ofill (s.fill ())
+    { }
 
-private:
+    ~preserve_stream_state (void)
+    {
+      stream.flags (oflags);
+      stream.precision (oprecision);
+      stream.width (owidth);
+      stream.fill (ofill);
+    }
 
-  std::ios& stream;
-  std::ios::fmtflags oflags;
-  std::streamsize oprecision;
-  int owidth;
-  char ofill;
-};
+  private:
+
+    std::ios& stream;
+    std::ios::fmtflags oflags;
+    std::streamsize oprecision;
+    int owidth;
+    char ofill;
+  };
+}
 
 #endif
