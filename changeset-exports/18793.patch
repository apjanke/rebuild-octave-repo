# HG changeset patch
# User Rik <rik@octave.org>
# Date 1401732295 25200
#      Mon Jun 02 11:04:55 2014 -0700
# Branch gui-release
# Node ID 332450e56698d8969d1cb7e193721e06c0288534
# Parent  99d63a2e221b705761d831c2f142de763c4291ce
Fix compilation warning about use of '&' versus '&&' in find.cc.

* find.cc (find_nonzero_elem_idx): Fix compilation warning about use of '&'
versus '&&' in find.cc.

diff --git a/libinterp/corefcn/find.cc b/libinterp/corefcn/find.cc
--- a/libinterp/corefcn/find.cc
+++ b/libinterp/corefcn/find.cc
@@ -178,17 +178,17 @@ find_nonzero_elem_idx (const Sparse<T>& 
             if (cx == count)
               break;
           }
     }
   else
     {
       // No items found.  Fixup return dimensions for Matlab compatibility.
       // The behavior to match is documented in Array.cc (Array<T>::find).
-      if ((nr == 0 && nc == 0) || nr == 1 & nc == 1)
+      if ((nr == 0 && nc == 0) || (nr == 1 && nc == 1))
         {
           idx.resize (0, 0);
 
           i_idx.resize (0, 0);
           j_idx.resize (0, 0);
 
           val.resize (dim_vector (0, 0));
         }
@@ -289,22 +289,23 @@ find_nonzero_elem_idx (const PermMatrix&
               i_idx(koff) = static_cast<double> (1+i);
               j_idx(koff) = static_cast<double> (1+j);
               idx(koff) = j * nc + i + 1;
             }
         }
     }
   else
     {
-      // FIXME: Is this case even possible?  A scalar permutation matrix seems to devolve
-      //        to a scalar full matrix, at least from the Octave command line.  Perhaps
-      //        this function could be called internally from C++ with such a matrix.
+      // FIXME: Is this case even possible?  A scalar permutation matrix seems
+      // to devolve to a scalar full matrix, at least from the Octave command
+      // line.  Perhaps this function could be called internally from C++ with
+      // such a matrix.
       // No items found.  Fixup return dimensions for Matlab compatibility.
       // The behavior to match is documented in Array.cc (Array<T>::find).
-      if ((nr == 0 && nc == 0) || nr == 1 & nc == 1)
+      if ((nr == 0 && nc == 0) || (nr == 1 && nc == 1))
         {
           idx.resize (0, 0);
 
           i_idx.resize (0, 0);
           j_idx.resize (0, 0);
 
           val.resize (dim_vector (0, 0));
         }
