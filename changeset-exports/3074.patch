# HG changeset patch
# User jwe
# Date 869772944 0
#      Thu Jul 24 19:35:44 1997 +0000
# Node ID 42975c59d2a08f376b586e9530803a3fae62ba1e
# Parent  132c83a7b706a0c5ecc67da8d169f3af0cb28644
[project @ 1997-07-24 19:33:35 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+Thu Jul 17 13:31:08 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* aclocal.m4 (OCTAVE_FLIBS): Only accept an ld_run_path that is
+	absolute.
+
 Wed Jul  9 19:27:38 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Also check for getwd.
 
 Tue Jul  8 17:47:11 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* aclocal.m4 (OCTAVE_FLIBS): Avoid grabbing an argument starting
 	with a - as an option for another argument.
diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -80,27 +80,28 @@ dnl
 xlf_p=`echo $foutput | grep xlfentry`
 if test -n "$xlf_p"; then
   foutput=`echo $foutput | sed 's/,/ /g'`
 fi
 dnl
 ld_run_path=`echo $foutput | \
   sed -n -e 's/^.*LD_RUN_PATH *= *\([^ ]*\).*/\1/p'`
 dnl
-dnl We are only supposed to find this on Solaris systems, and this
-dnl substitution is probably only going to work with gcc on those
-dnl systems...
+dnl We are only supposed to find this on Solaris systems...
+dnl Uh, the run path should be absolute, shouldn't it?
 dnl
-if test -n "$ld_run_path"; then
-  if test "$ac_cv_prog_gcc" = yes; then
-    ld_run_path="-Xlinker -R -Xlinker $ld_run_path"
-  else
-    ld_run_path="-R $ld_run_path"
-  fi
-fi
+case "$ld_run_path" in
+  /*)
+    if test "$ac_cv_prog_gcc" = yes; then
+      ld_run_path="-Xlinker -R -Xlinker $ld_run_path"
+    else
+      ld_run_path="-R $ld_run_path"
+    fi
+  ;;
+esac
 dnl
 flibs=
 lflags=
 dnl
 dnl If want_arg is set, we know we want the arg to be added to the list,
 dnl so we don't have to examine it.
 dnl
 want_arg=
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+Thu Jul 24 14:32:48 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* file-ops.cc (tilde_expand_word): Fix off-by-one error.
+
 Wed Jul  9 19:40:23 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-sysdep.cc (octave_getcwd): If getwd is available, use it.
 	Call error handler if we can't find the current directory.
 
 Mon Jul  7 21:14:41 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-mappers.cc (xisnan (double)): Return only 1 or 0.
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -343,20 +343,17 @@ tilde_expand_word (const string& filenam
   string dirname;
 
   if (file_ops::tilde_expansion_preexpansion_hook)
     {
       string expansion
 	= file_ops::tilde_expansion_preexpansion_hook (username);
 
       if (! expansion.empty ())
-	{
-	  dirname = expansion + filename.substr (user_len);
-	  return dirname;
-	}
+	return expansion + filename.substr (user_len+1);
     }
 
   // No preexpansion hook, or the preexpansion hook failed.  Look in the
   // password database.
 
   octave_passwd pw = octave_passwd::getpwnam (username);
 
   if (! pw)
@@ -365,27 +362,27 @@ tilde_expand_word (const string& filenam
       // and we couldn't find a standard expansion, then let them try.
 
       if (file_ops::tilde_expansion_failure_hook)
 	{
 	  string expansion
 	    = file_ops::tilde_expansion_failure_hook (username);
 
 	  if (! expansion.empty ())
-	    dirname = expansion + filename.substr (user_len);
+	    dirname = expansion + filename.substr (user_len+1);
 	}
 
       // If we don't have a failure hook, or if the failure hook did not
       // expand the tilde, return a copy of what we were passed.
 
       if (dirname.length () == 0)
 	dirname = filename;
     }
   else
-    dirname = pw.dir () + filename.substr (user_len);
+    dirname = pw.dir () + filename.substr (user_len+1);
 
   return dirname;
 }
 
 // If NAME has a leading ~ or ~user, Unix-style, expand it to the
 // user's home directory.  If no ~, or no <pwd.h>, just return NAME.
 
 string
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+Thu Jul 17 13:06:48 1997  Klaus Gebhardt <gebhardt@crunch.ikp.physik.th-darmstadt.de>
+
+	* DLD-FUNCTIONS/rand.cc (Frand): Use F77_XFCN to call getsd,
+	setsd, setall, setcgn, dgenunf, and dgennor since they can call
+	XSTOPX.
+
 Mon Jul 14 12:54:23 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dynamic-ld.cc (octave_dynamic_loader::load_fcn_from_dot_oct_file):
 	If first attempt to load function fails, prepend and underscore
 	and try again.
 
 	* Makefile.in (install-inc): If defaults.h, oct-conf.h, or
 	oct-gperf.h don't exist in the current directory, look in $(srcdir).
diff --git a/src/DLD-FUNCTIONS/rand.cc b/src/DLD-FUNCTIONS/rand.cc
--- a/src/DLD-FUNCTIONS/rand.cc
+++ b/src/DLD-FUNCTIONS/rand.cc
@@ -66,17 +66,17 @@ extern "C"
   int *F77_FCN (setcgn, SETCGN) (const int&);
 }
 
 static double
 curr_rand_seed (void)
 {
   union d2i { double d; int i[2]; };
   union d2i u;
-  F77_FCN (getsd, GETSD) (u.i[0], u.i[1]);
+  F77_XFCN (getsd, GETSD, (u.i[0], u.i[1]));
   return u.d;
 }
 
 static int
 force_to_fit_range (int i, int lo, int hi)
 {
   assert (hi > lo && lo >= 0 && hi > lo);
 
@@ -93,17 +93,17 @@ force_to_fit_range (int i, int lo, int h
 static void
 set_rand_seed (double val)
 {
   union d2i { double d; int i[2]; };
   union d2i u;
   u.d = val;
   int i0 = force_to_fit_range (u.i[0], 1, 2147483563);
   int i1 = force_to_fit_range (u.i[1], 1, 2147483399);
-  F77_FCN (setsd, SETSD) (i0, i1);
+  F77_XFCN (setsd, SETSD, (i0, i1));
 }
 
 static char *
 curr_rand_dist (void)
 {
   if (current_distribution == uniform_dist)
     return "uniform";
   else if (current_distribution == normal_dist)
@@ -134,17 +134,17 @@ do_initialization (void)
   int second = tm->tm_sec + 1;
 
   int s0 = tm->tm_mday * hour * minute * second;
   int s1 = hour * minute * second;
 
   s0 = force_to_fit_range (s0, 1, 2147483563);
   s1 = force_to_fit_range (s1, 1, 2147483399);
 
-  F77_FCN (setall, SETALL) (s0, s1);
+  F77_XFCN (setall, SETALL, (s0, s1));
 
   initialized = 1;
 }
 
 static octave_value_list
 do_rand (const octave_value_list& args, int nargin)
 {
   octave_value_list retval;
@@ -174,23 +174,23 @@ do_rand (const octave_value_list& args, 
 	  else if (s_arg == "seed")
 	    {
 	      retval(0) = curr_rand_seed ();
 	    }
 	  else if (s_arg == "uniform")
 	    {
 	      current_distribution = uniform_dist;
 
-	      F77_FCN (setcgn, SETCGN) (uniform_dist);
+	      F77_XFCN (setcgn, SETCGN, (uniform_dist));
 	    }
 	  else if (s_arg == "normal")
 	    {
 	      current_distribution = normal_dist;
 
-	      F77_FCN (setcgn, SETCGN) (normal_dist);
+	      F77_XFCN (setcgn, SETCGN, (normal_dist));
 	    }
 	  else
 	    error ("rand: unrecognized string argument");
 	}
       else if (tmp.is_scalar_type ())
 	{
 	  double dval = tmp.double_value ();
 
@@ -296,22 +296,22 @@ do_rand (const octave_value_list& args, 
       Matrix rand_mat (n, m);
       for (int j = 0; j < m; j++)
 	for (int i = 0; i < n; i++)
 	  {
 	    double val;
 	    switch (current_distribution)
 	      {
 	      case uniform_dist:
-		F77_FCN (dgenunf, DGENUNF) (0.0, 1.0, val);
+		F77_XFCN (dgenunf, DGENUNF, (0.0, 1.0, val));
 		rand_mat (i, j) = val;
 		break;
 
 	      case normal_dist:
-		F77_FCN (dgennor, DGENNOR) (0.0, 1.0, val);
+		F77_XFCN (dgennor, DGENNOR, (0.0, 1.0, val));
 		rand_mat (i, j) = val;
 		break;
 
 	      default:
 		panic_impossible ();
 		break;
 	      }
 	  }
@@ -350,17 +350,17 @@ See also: randn")
     }
 
   return retval;
 }
 
 static void
 reset_rand_generator (void *)
 {
-  F77_FCN (setcgn, SETCGN) (current_distribution);
+  F77_XFCN (setcgn, SETCGN, (current_distribution));
 }
 
 DEFUN_DLD (randn, args, nargout,
   "randn            -- generate a random value from a normal distribution\n\
 \n\
 randn (N)        -- generate N x N matrix\n\
 randn (size (A)) -- generate matrix the size of A\n\
 randn (N, M)     -- generate N x M matrix\n\
@@ -387,17 +387,17 @@ See also: rand")
       // (i.e. current_distribution will be reset before calling
       // reset_rand_generator()).
 
       unwind_protect::add (reset_rand_generator, 0);
       unwind_protect_int (current_distribution);
 
       current_distribution = normal_dist;
 
-      F77_FCN (setcgn, SETCGN) (normal_dist);
+      F77_XFCN (setcgn, SETCGN, (normal_dist));
 
       retval = do_rand (args, nargin);
 
       unwind_protect::run_frame ("randn");
     }
 
   return retval;
 }
