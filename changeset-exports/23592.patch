# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497412274 25200
#      Tue Jun 13 20:51:14 2017 -0700
# Node ID 80e3bfb7bd5ad64c98e5192480dcd06de60359d6
# Parent  a990b6d740c49e7e1860d94ba165265c14966115
maint: Deprecate is_vector and replace with isvector.

* Array.h (is_vector): Use OCTAVE_DEPRECATED macro around function.
* Array.h (isvector): New function.

* dim-vector.h (is_vector): Use OCTAVE_DEPRECATED macro around function.
* dim-vector.h (isvector): New function.

* idx-vector.h (is_vector): Use OCTAVE_DEPRECATED macro around function.
* idx-vector.h (isvector): New function.

* cellfun.cc, data.cc, dot.cc, filter.cc, utils.cc, ov-class.cc, ov-java.cc,
Array-util.cc, Array-util.h, Array.cc, Range.cc, Sparse.cc, idx-vector.cc,
oct-string.cc: Replace instances of is_vector with isvector.

diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -2192,17 +2192,17 @@ template <typename NDA>
 static Cell
 do_cellslices_nda (const NDA& array,
                    const Array<octave_idx_type>& lb,
                    const Array<octave_idx_type>& ub,
                    int dim = -1)
 {
   octave_idx_type n = lb.numel ();
   Cell retval (1, n);
-  if (array.is_vector () && (dim == -1
+  if (array.isvector () && (dim == -1
                              || (dim == 0 && array.columns () == 1)
                              || (dim == 1 && array.rows () == 1)))
     {
       for (octave_idx_type i = 0; i < n; i++)
         retval(i) = array.index (idx_vector (lb(i) - 1, ub(i)));
     }
   else
     {
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -6775,17 +6775,17 @@ This function does not support sparse ma
 
       if (arg.ndims () != 2)
         error ("issorted: A must be a 2-D object");
 
       retval = arg.is_sorted_rows (smode) != UNSORTED;
     }
   else
     {
-      if (! arg.dims ().is_vector ())
+      if (! arg.dims ().isvector ())
         error ("issorted: needs a vector");
 
       retval = args(0).issorted (smode) != UNSORTED;
     }
 
   return retval;
 }
 
diff --git a/libinterp/corefcn/dot.cc b/libinterp/corefcn/dot.cc
--- a/libinterp/corefcn/dot.cc
+++ b/libinterp/corefcn/dot.cc
@@ -93,17 +93,17 @@ but avoids forming a temporary array and
   octave_value argy = args(1);
 
   if (! argx.isnumeric () || ! argy.isnumeric ())
     error ("dot: X and Y must be numeric");
 
   dim_vector dimx = argx.dims ();
   dim_vector dimy = argy.dims ();
   bool match = dimx == dimy;
-  if (! match && nargin == 2 && dimx.is_vector () && dimy.is_vector ())
+  if (! match && nargin == 2 && dimx.isvector () && dimy.isvector ())
     {
       // Change to column vectors.
       dimx = dimx.redim (1);
       argx = argx.reshape (dimx);
       dimy = dimy.redim (1);
       argy = argy.reshape (dimy);
       match = dimx == dimy;
     }
diff --git a/libinterp/corefcn/filter.cc b/libinterp/corefcn/filter.cc
--- a/libinterp/corefcn/filter.cc
+++ b/libinterp/corefcn/filter.cc
@@ -383,17 +383,17 @@ H(z) = ---------------------
               si_dims(0) = si_len;
 
               si.resize (si_dims, 0.0);
             }
           else
             {
               si = args(3).xfloat_complex_array_value (x_si_errmsg);
 
-              if (si.is_vector () && x.is_vector ())
+              if (si.isvector () && x.isvector ())
                 si = si.reshape (dim_vector (si.numel (), 1));
             }
 
           FloatComplexNDArray y (filter (b, a, x, si, dim));
 
           retval = ovl (y, si);
         }
       else
@@ -418,17 +418,17 @@ H(z) = ---------------------
               si_dims(0) = si_len;
 
               si.resize (si_dims, 0.0);
             }
           else
             {
               si = args(3).xcomplex_array_value (x_si_errmsg);
 
-              if (si.is_vector () && x.is_vector ())
+              if (si.isvector () && x.isvector ())
                 si = si.reshape (dim_vector (si.numel (), 1));
             }
 
           ComplexNDArray y (filter (b, a, x, si, dim));
 
           retval = ovl (y, si);
         }
     }
@@ -456,17 +456,17 @@ H(z) = ---------------------
               si_dims(0) = si_len;
 
               si.resize (si_dims, 0.0);
             }
           else
             {
               si = args(3).xfloat_array_value (x_si_errmsg);
 
-              if (si.is_vector () && x.is_vector ())
+              if (si.isvector () && x.isvector ())
                 si = si.reshape (dim_vector (si.numel (), 1));
             }
 
           FloatNDArray y (filter (b, a, x, si, dim));
 
           retval = ovl (y, si);
         }
       else
@@ -491,17 +491,17 @@ H(z) = ---------------------
               si_dims(0) = si_len;
 
               si.resize (si_dims, 0.0);
             }
           else
             {
               si = args(3).xarray_value (x_si_errmsg);
 
-              if (si.is_vector () && x.is_vector ())
+              if (si.isvector () && x.isvector ())
                 si = si.reshape (dim_vector (si.numel (), 1));
             }
 
           NDArray y (filter (b, a, x, si, dim));
 
           retval = ovl (y, si);
         }
     }
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -1142,17 +1142,17 @@ check_dimensions (dim_vector& dim, const
 
 void
 get_dimensions (const octave_value& a, const char *warn_for,
                 dim_vector& dim)
 {
   // We support dimensions to be specified by any vector, even if it's a
   // vector of dimensions 0x1, 1x0, 1x1x0, or 1x1x6.  If the vector ends
   // up being empty, the final dimensions end up being 0x0.
-  if (! a.dims ().is_vector ())
+  if (! a.dims ().isvector ())
     error ("%s (A): use %s (size (A)) instead", warn_for, warn_for);
 
   const Array<octave_idx_type> v = a.octave_idx_type_vector_value ();
   const octave_idx_type n = v.numel ();
 
   dim.resize (n); // even if n < 2, resize sets it back to 2
   if (n == 0)
     {
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -299,17 +299,17 @@ octave_class::size (void)
 
   if (meth.is_defined ())
     {
       count++;
       octave_value_list args (1, octave_value (this));
 
       octave_value_list lv = octave::feval (meth.function_value (), args, 1);
       if (lv.length () <= 0
-          || ! lv(0).is_matrix_type () || ! lv(0).dims ().is_vector ())
+          || ! lv(0).is_matrix_type () || ! lv(0).dims ().isvector ())
         error ("@%s/size: invalid return value", class_name ().c_str ());
 
       retval = lv(0).matrix_value ();
     }
   else
     {
       dim_vector dv = dims ();
 
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1516,17 +1516,17 @@ unbox (JNIEnv *jni_env, const octave_val
           jstring_ref jstr (jni_env, jni_env->NewStringUTF
                             (str_arr(i).c_str ()));
           jni_env->SetObjectArrayElement (array, i, jstr);
         }
 
       jobj = array;
       jcls = jni_env->GetObjectClass (jobj);
     }
-  else if (val.numel () > 1 && val.dims ().is_vector ())
+  else if (val.numel () > 1 && val.dims ().isvector ())
     {
       // FIXME: Is there any way to avoid code duplication here without
       // using a macro?
 
 #define UNBOX_PRIMITIVE_ARRAY(METHOD_T, OCTAVE_T, JAVA_T, JAVA_T_CAP) \
   do \
     { \
       const OCTAVE_T ## NDArray v = val.METHOD_T ## array_value (); \
diff --git a/liboctave/array/Array-util.cc b/liboctave/array/Array-util.cc
--- a/liboctave/array/Array-util.cc
+++ b/liboctave/array/Array-util.cc
@@ -130,17 +130,17 @@ is_scalar (const dim_vector& dim)
               break;
             }
         }
     }
   return retval;
 }
 
 bool
-is_vector (const dim_vector& dim)
+isvector (const dim_vector& dim)
 {
   int m = 0;
   int n = dim.ndims ();
 
   if (n == 0)
     m = 2;
   else
     {
diff --git a/liboctave/array/Array-util.h b/liboctave/array/Array-util.h
--- a/liboctave/array/Array-util.h
+++ b/liboctave/array/Array-util.h
@@ -38,17 +38,17 @@ extern OCTAVE_API void increment_index (
 extern OCTAVE_API octave_idx_type get_scalar_idx (Array<octave_idx_type>& idx,
                                                   dim_vector& dims);
 
 extern OCTAVE_API octave_idx_type num_ones (const Array<octave_idx_type>&
                                             ra_idx);
 
 extern OCTAVE_API bool is_scalar (const dim_vector& dim);
 
-extern OCTAVE_API bool is_vector (const dim_vector& dim);
+extern OCTAVE_API bool isvector (const dim_vector& dim);
 
 extern OCTAVE_API bool any_ones (const Array<octave_idx_type>& arr);
 
 // These four compute a linear index for given dimensions, throwing
 // exceptions on invalid indices.
 extern OCTAVE_API octave_idx_type
 compute_index (octave_idx_type n, const dim_vector& dims);
 
diff --git a/liboctave/array/Array.cc b/liboctave/array/Array.cc
--- a/liboctave/array/Array.cc
+++ b/liboctave/array/Array.cc
@@ -1395,17 +1395,17 @@ Array<T>::delete_elements (const idx_vec
     }
   else if (i.length (n) != 0)
     {
       if (i.extent (n) != n)
         octave::err_del_index_out_of_range (true, i.extent (n), n);
 
       octave_idx_type l, u;
       bool col_vec = ndims () == 2 && columns () == 1 && rows () != 1;
-      if (i.is_scalar () && i(0) == n-1 && dimensions.is_vector ())
+      if (i.is_scalar () && i(0) == n-1 && dimensions.isvector ())
         {
           // Stack "pop" operation.
           resize1 (n-1);
         }
       else if (i.is_cont_range (n, l, u))
         {
           // Special case deleting a contiguous range.
           octave_idx_type m = n + l - u;
diff --git a/liboctave/array/Array.h b/liboctave/array/Array.h
--- a/liboctave/array/Array.h
+++ b/liboctave/array/Array.h
@@ -559,17 +559,21 @@ public:
   bool is_square (void) const { return (dim1 () == dim2 ()); }
 
   bool isempty (void) const { return numel () == 0; }
 
   OCTAVE_DEPRECATED ("use 'isempty' instead")
   bool is_empty (void) const
   { return isempty (); }
 
-  bool is_vector (void) const { return dimensions.is_vector (); }
+  bool isvector (void) const { return dimensions.isvector (); }
+
+  OCTAVE_DEPRECATED ("use 'isvector' instead")
+  bool is_vector (void) const
+  { return isvector (); }
 
   bool is_nd_vector (void) const { return dimensions.is_nd_vector (); }
 
   Array<T> transpose (void) const;
   Array<T> hermitian (T (*fcn) (const T&) = 0) const;
 
   const T * data (void) const { return slice_data; }
 
diff --git a/liboctave/array/Range.cc b/liboctave/array/Range.cc
--- a/liboctave/array/Range.cc
+++ b/liboctave/array/Range.cc
@@ -134,17 +134,17 @@ Range::index (const idx_vector& i) const
     {
       if (i.extent (n) != n)
         octave::err_index_out_of_range (1, 1, i.extent (n), n); // throws
 
       dim_vector rd = i.orig_dimensions ();
       octave_idx_type il = i.length (n);
 
       // taken from Array.cc.
-      if (n != 1 && rd.is_vector ())
+      if (n != 1 && rd.isvector ())
         rd = dim_vector (1, il);
 
       retval.clear (rd);
 
       // idx_vector loop across all values in i,
       // executing __rangeidx_helper (i) for each i
       i.loop (n, __rangeidx_helper (retval.fortran_vec (),
                                     rng_base, rng_inc, rng_limit, rng_numel));
diff --git a/liboctave/array/Sparse.cc b/liboctave/array/Sparse.cc
--- a/liboctave/array/Sparse.cc
+++ b/liboctave/array/Sparse.cc
@@ -1451,17 +1451,17 @@ Sparse<T>::index (const idx_vector& idx,
           octave_idx_type ui = lblookup (ridx (), nz, ub);
           // Copy data and adjust indices.
           octave_idx_type nz_new = ui - li;
           retval = Sparse<T> (ub - lb, 1, nz_new);
           std::copy_n (data () + li, nz_new, retval.data ());
           mx_inline_sub (nz_new, retval.xridx (), ridx () + li, lb);
           retval.xcidx (1) = nz_new;
         }
-      else if (idx.is_permutation (nel) && idx.is_vector ())
+      else if (idx.is_permutation (nel) && idx.isvector ())
         {
           if (idx.is_range () && idx.increment () == -1)
             {
               retval = Sparse<T> (nr, 1, nz);
 
               for (octave_idx_type j = 0; j < nz; j++)
                 retval.ridx (j) = nr - ridx (nz - j - 1) - 1;
 
@@ -1649,17 +1649,17 @@ Sparse<T>::index (const idx_vector& idx_
               octave_idx_type lj = retval.xcidx (j);
               octave_idx_type nzj = retval.xcidx (j+1) - lj;
 
               std::copy_n (data () + ljj, nzj, retval.data () + lj);
               std::copy_n (ridx () + ljj, nzj, retval.ridx () + lj);
             }
         }
     }
-  else if (nc == 1 && idx_j.is_colon_equiv (nc) && idx_i.is_vector ())
+  else if (nc == 1 && idx_j.is_colon_equiv (nc) && idx_i.isvector ())
     {
       // It's actually vector indexing.  The 1D index is specialized for that.
       retval = index (idx_i);
 
       // If nr == 1 then the vector indexing will return a column vector!!
       if (nr == 1)
         retval.transpose ();
     }
@@ -2152,17 +2152,17 @@ Sparse<T>::assign (const idx_vector& idx
                       octave_idx_type k = tmp.cidx (i);
                       std::copy_n (tmp.data () + k, u - l, xdata () + l);
                       std::copy_n (tmp.ridx () + k, u - l, xridx () + l);
                     }
                 }
 
             }
         }
-      else if (nc == 1 && idx_j.is_colon_equiv (nc) && idx_i.is_vector ())
+      else if (nc == 1 && idx_j.is_colon_equiv (nc) && idx_i.isvector ())
         {
           // It's just vector indexing.  The 1D assign is specialized for that.
           assign (idx_i, rhs);
         }
       else if (idx_j.is_colon ())
         {
           if (idx_i.is_permutation (nr))
             {
diff --git a/liboctave/array/dim-vector.h b/liboctave/array/dim-vector.h
--- a/liboctave/array/dim-vector.h
+++ b/liboctave/array/dim-vector.h
@@ -418,21 +418,25 @@ public:
   dim_vector as_row (void) const
   {
     if (ndims () == 2 && xelem (0) == 1)
       return *this;
     else
       return dim_vector (1, numel ());
   }
 
-  bool is_vector (void) const
+  bool isvector (void) const
   {
     return (ndims () == 2 && (xelem (0) == 1 || xelem (1) == 1));
   }
 
+  OCTAVE_DEPRECATED ("use 'isvector' instead")
+  bool is_vector (void) const
+  { return isvector (); }
+
   bool is_nd_vector (void) const
   {
     int num_non_one = 0;
 
     for (int i = 0; i < ndims (); i++)
       {
         if (xelem (i) != 1)
           {
diff --git a/liboctave/array/idx-vector.cc b/liboctave/array/idx-vector.cc
--- a/liboctave/array/idx-vector.cc
+++ b/liboctave/array/idx-vector.cc
@@ -1268,19 +1268,19 @@ void idx_vector::unconvert (idx_class_ty
 
 Array<octave_idx_type>
 idx_vector::as_array (void) const
 {
   return rep->as_array ();
 }
 
 bool
-idx_vector::is_vector (void) const
+idx_vector::isvector (void) const
 {
-  return idx_class () != class_vector || orig_dimensions ().is_vector ();
+  return idx_class () != class_vector || orig_dimensions ().isvector ();
 }
 
 octave_idx_type
 idx_vector::freeze (octave_idx_type z_len, const char *, bool resize_ok)
 {
   if (! resize_ok && extent (z_len) > z_len)
     {
       (*current_liboctave_error_handler)
diff --git a/liboctave/array/idx-vector.h b/liboctave/array/idx-vector.h
--- a/liboctave/array/idx-vector.h
+++ b/liboctave/array/idx-vector.h
@@ -1016,17 +1016,21 @@ public:
                   Array<double>& array, Array<bool>& mask) const;
 
   Array<octave_idx_type> as_array (void) const;
 
   // Raw pointer to index array.  This is non-const because it may be
   // necessary to mutate the index.
   const octave_idx_type * raw (void);
 
-  bool is_vector (void) const;
+  bool isvector (void) const;
+
+  OCTAVE_DEPRECATED ("use 'isvector' instead")
+  bool is_vector (void) const
+  { return isvector (); }
 
   // FIXME: these are here for compatibility.  They should be removed
   // when no longer in use.
 
   octave_idx_type elem (octave_idx_type n) const
   { return (*this) (n); }
 
   bool is_colon_equiv (octave_idx_type n, int) const
diff --git a/liboctave/util/oct-string.cc b/liboctave/util/oct-string.cc
--- a/liboctave/util/oct-string.cc
+++ b/liboctave/util/oct-string.cc
@@ -97,17 +97,17 @@ sizes_cmp (const T& str_a, const typenam
 {
   return str_a.size () == strlen<T> (str_b);
 }
 
 template <>
 bool
 sizes_cmp (const Array<char>& str_a, const char *str_b)
 {
-  return (str_a.is_vector () && str_a.rows () == 1
+  return (str_a.isvector () && str_a.rows () == 1
           && str_a.numel () == strlen<Array<char>> (str_b));
 }
 
 
 template<typename T>
 bool
 octave::string::strcmp (const T& str_a, const T& str_b)
 {
