# HG changeset patch
# User jwe
# Date 941661676 0
#      Wed Nov 03 20:41:16 1999 +0000
# Node ID 5187390bfde6409fa16f4f519ae6f57bae7ad5a4
# Parent  15cddaacbc2d734004ebd52201d693233fce6025
[project @ 1999-11-03 20:41:16 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+1999-11-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dbleSCHUR.cc (SCHUR::init): IWORK is always referenced by dgeesx.
+	Don't forget to pass length of third string argument to dgeesx.
+
+	* CmplxSCHUR.cc (ComplexSCHUR::init): Don't forget to pass length
+	of third string argument to zgeesx.
+
 1999-11-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DiagArray2.cc (DiagArray2<T>::operator () (int, int)):
 	On errors, simply return `T ()'.
 	(DiagArray2<T>::checkelem (int, int)): Likewise.
 
 1999-11-02  A. Scottedward Hodel <a.s.hodel@eng.auburn.edu>
 
diff --git a/liboctave/CmplxSCHUR.cc b/liboctave/CmplxSCHUR.cc
--- a/liboctave/CmplxSCHUR.cc
+++ b/liboctave/CmplxSCHUR.cc
@@ -35,17 +35,17 @@ Software Foundation, 59 Temple Place - S
 extern "C"
 {
   int F77_FCN (zgeesx, ZGEESX) (const char*, const char*,
 				ComplexSCHUR::select_function,
 				const char*, const int&, Complex*,
 				const int&, int&, Complex*, Complex*,
 				const int&, double&, double&,
 				Complex*, const int&, double*, int*,
-				int&, long, long);
+				int&, long, long, long);
 }
 
 static int
 select_ana (const Complex& a)
 {
   return a.real () < 0.0;
 }
 
@@ -63,16 +63,19 @@ ComplexSCHUR::init (const ComplexMatrix&
 
   if (a_nr != a_nc)
     {
       (*current_liboctave_error_handler)
 	("ComplexSCHUR requires square matrix");
       return -1;
     }
 
+  // Workspace requirements may need to be fixed if any of the
+  // following change.
+
   char jobvs = 'V';
   char sense = 'N';
   char sort = 'N';
 
   char ord_char = ord.empty () ? 'U' : ord[0];
 
   if (ord_char == 'A' || ord_char == 'D' || ord_char == 'a' || ord_char == 'd')
     sort = 'S';
@@ -101,28 +104,23 @@ ComplexSCHUR::init (const ComplexMatrix&
   double *prwork = rwork.fortran_vec ();
 
   Array<Complex> w (n);
   Complex *pw = w.fortran_vec ();
 
   Array<Complex> work (lwork);
   Complex *pwork = work.fortran_vec ();
 
-  // bwork is not referenced for non-ordered Schur.
-
-  Array<int> bwork;
-
-  if (ord_char == 'A' || ord_char == 'D' || ord_char == 'a' || ord_char == 'd')
-    bwork.resize (n);
-
+  // BWORK is not referenced for non-ordered Schur.
+  Array<int> bwork ((ord_char == 'N' || ord_char == 'n') ? 0 : n);
   int *pbwork = bwork.fortran_vec ();
 
   F77_XFCN (zgeesx, ZGEESX, (&jobvs, &sort, selector, &sense, n, s, n,
 			     sdim, pw, q, n, rconde, rcondv, pwork,
-			     lwork, prwork, pbwork, info, 1L, 1L));
+			     lwork, prwork, pbwork, info, 1L, 1L, 1L));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("unrecoverable error in zgeesx");
 
   return info;
 }
 
 /*
diff --git a/liboctave/dbleSCHUR.cc b/liboctave/dbleSCHUR.cc
--- a/liboctave/dbleSCHUR.cc
+++ b/liboctave/dbleSCHUR.cc
@@ -37,17 +37,17 @@ Software Foundation, 59 Temple Place - S
 extern "C"
 {
   int F77_FCN (dgeesx, DGEESX) (const char*, const char*,
 				SCHUR::select_function, const char*,
 				const int&, double*, const int&,
 				int&, double*, double*, double*,
 				const int&, double&, double&, double*,
 				const int&, int*, const int&, int*,
-				int&, long, long);
+				int&, long, long, long);
 }
 
 static int
 select_ana (const double& a, const double&)
 {
    return (a < 0.0);
 }
 
@@ -64,16 +64,19 @@ SCHUR::init (const Matrix& a, const stri
   int a_nc = a.cols ();
 
   if (a_nr != a_nc)
     {
       (*current_liboctave_error_handler) ("SCHUR requires square matrix");
       return -1;
     }
 
+  // Workspace requirements may need to be fixed if any of the
+  // following change.
+
   char jobvs = 'V';
   char sense = 'N';
   char sort = 'N';
 
   char ord_char = ord.empty () ? 'U' : ord[0];
 
   if (ord_char == 'A' || ord_char == 'D' || ord_char == 'a' || ord_char == 'd')
     sort = 'S';
@@ -103,35 +106,27 @@ SCHUR::init (const Matrix& a, const stri
   double *pwr = wr.fortran_vec ();
 
   Array<double> wi (n);
   double *pwi = wi.fortran_vec ();
 
   Array<double> work (lwork);
   double *pwork = work.fortran_vec ();
 
-  // These are not referenced for the non-ordered Schur routine.
-
-  Array<int> bwork;
-  Array<int> iwork;
+  // BWORK is not referenced for the non-ordered Schur routine.
+  Array<int> bwork ((ord_char == 'N' || ord_char == 'n') ? 0 : n);
+  int *pbwork = bwork.fortran_vec ();
 
-  if (ord_char == 'A' || ord_char == 'D' || ord_char == 'a' || ord_char == 'd')
-    {
-      bwork.resize (n);
-      iwork.resize (liwork);
-    }
-
-  int *pbwork = bwork.fortran_vec ();
+  Array<int> iwork (liwork);
   int *piwork = iwork.fortran_vec ();
 
-
   F77_XFCN (dgeesx, DGEESX, (&jobvs, &sort, selector, &sense, n, s,
 			     n, sdim, pwr, pwi, q, n, rconde, rcondv,
 			     pwork, lwork, piwork, liwork, pbwork,
-			     info, 1L, 1L));
+			     info, 1L, 1L, 1L));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("unrecoverable error in dgeesx");
 
   return info;
 }
 
 ostream&
