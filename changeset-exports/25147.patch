# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1523113151 14400
#      Sat Apr 07 10:59:11 2018 -0400
# Node ID 5960fd1b56f13c85d4505970173162bade49cd6e
# Parent  a01a899e47c0b405e2dfd215c42d9e85500674ed
remove C++ functions, classes, and typdefs deprecated in version 4.2

* error.cc, error.h, gl2ps-print.h, mxarray.in.h, sighandlers.h,
utils.cc, utils.h, lo-mappers.h, lo-specfun.h, dir-ops.h, file-ops.h,
file-stat.h, lo-sysdep.h, oct-env.h, oct-group.h, oct-passwd.h,
oct-syscalls.h, oct-time.h, oct-uname.h, cmd-edit.h, cmd-hist.h,
lo-array-errwarn.h, lo-regexp.h, oct-glob.h, oct-inttypes.h,
oct-shlib.h, pathsearch.h, quit.h, unwind-prot.h, url-transfer.h):
Delete functions, classes, and typedefs deprecated in version 4.2.

* quit.cc (octave_throw_exit_exception): Throw octave::exit_exception,
not octave_exit_exception.

* gripes.h, gripes.cc: Delete.
* libinterp/corefcn/module.mk: Update

* lo-array-gripes.h, lo-array-gripes.cc: Delete.
* liboctave/util/module.mk: Update.

diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -473,31 +473,16 @@ void
 usage_1 (const char *id, const char *fmt, va_list args)
 {
   octave::execution_exception e = make_execution_exception ("usage");
 
   usage_1 (e, id, fmt, args);
 }
 
 void
-vusage (const char *fmt, va_list args)
-{
-  usage_1 ("", fmt, args);
-}
-
-void
-usage (const char *fmt, ...)
-{
-  va_list args;
-  va_start (args, fmt);
-  usage_1 ("", fmt, args);
-  va_end (args);
-}
-
-void
 vusage_with_id (const char *id, const char *fmt, va_list args)
 {
   usage_1 (id, fmt, args);
 }
 
 void
 usage_with_id (const char *id, const char *fmt, ...)
 {
diff --git a/libinterp/corefcn/error.h b/libinterp/corefcn/error.h
--- a/libinterp/corefcn/error.h
+++ b/libinterp/corefcn/error.h
@@ -47,24 +47,16 @@ extern OCTINTERP_API int warning_enabled
 extern OCTINTERP_API octave::execution_exception
 make_execution_exception (const char *who);
 
 extern OCTINTERP_API void
 vmessage (const char *name, const char *fmt, va_list args);
 
 extern OCTINTERP_API void message (const char *name, const char *fmt, ...);
 
-OCTAVE_DEPRECATED (4.2, "use 'print_usage' or 'verror' instead")
-OCTAVE_NORETURN OCTINTERP_API extern
-void vusage (const char *fmt, va_list args);
-
-OCTAVE_DEPRECATED (4.2, "use 'print_usage' or 'error' instead")
-OCTAVE_NORETURN OCTINTERP_API extern
-void usage (const char *fmt, ...);
-
 extern OCTINTERP_API void vwarning (const char *fmt, va_list args);
 extern OCTINTERP_API void warning (const char *fmt, ...);
 
 OCTAVE_NORETURN OCTINTERP_API extern
 void verror (const char *fmt, va_list args);
 
 OCTAVE_NORETURN OCTINTERP_API extern
 void error (const char *fmt, ...);
diff --git a/libinterp/corefcn/gl2ps-print.h b/libinterp/corefcn/gl2ps-print.h
--- a/libinterp/corefcn/gl2ps-print.h
+++ b/libinterp/corefcn/gl2ps-print.h
@@ -31,21 +31,9 @@ along with Octave; see the file COPYING.
 
 namespace octave
 {
   extern OCTINTERP_API void
   gl2ps_print (const graphics_object& fig, const std::string& stream,
                const std::string& term);
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::gl2ps_print' instead")
-inline void
-gl2ps_print (const graphics_object& fig, const std::string& stream,
-             const std::string& term)
-{
-  return octave::gl2ps_print (fig, stream, term);
-}
-
 #endif
-
-#endif
diff --git a/libinterp/corefcn/gripes.cc b/libinterp/corefcn/gripes.cc
deleted file mode 100644
--- a/libinterp/corefcn/gripes.cc
+++ /dev/null
@@ -1,467 +0,0 @@
-/*
-
-Copyright (C) 1993-2018 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software: you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-Octave is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<https://www.gnu.org/licenses/>.
-
-*/
-
-// FIXME: All gripe_XXX functions deprecated in 4.2.  Remove file in 4.6
-
-#if defined (HAVE_CONFIG_H)
-#  include "config.h"
-#endif
-
-#include "defun.h"
-#include "error.h"
-#include "gripes.h"
-#include "ovl.h"
-#include "utils.h"
-
-////////////////////////////////////////////////////////////////////////////////
-// Alphabetized list of gripes.
-////////////////////////////////////////////////////////////////////////////////
-
-void
-gripe_2_or_3_dim_plot (void)
-{
-  error ("plot: can only plot in 2 or 3 dimensions");
-}
-
-void
-gripe_data_conversion (const char *from, const char *to)
-{
-  error ("unable to convert from %s to %s format", from, to);
-}
-
-void
-gripe_data_file_in_path (const std::string& fcn, const std::string& file)
-{
-  warning_with_id ("Octave:data-file-in-path",
-                   "%s: '%s' found by searching load path",
-                   fcn.c_str (), file.c_str ());
-}
-
-void
-gripe_disabled_feature (const std::string& fcn, const std::string& feature,
-                        const std::string& pkg /*="Octave"*/)
-{
-  error ("%s: support for %s was unavailable or disabled when %s was built",
-         fcn.c_str (), feature.c_str (), pkg.c_str ());
-}
-
-void
-gripe_divide_by_zero (void)
-{
-  warning_with_id ("Octave:divide-by-zero", "division by zero");
-}
-
-void
-gripe_empty_arg (const char *name, bool is_error)
-{
-  if (is_error)
-    error ("%s: empty matrix is invalid as an argument", name);
-  else
-    warning ("%s: argument is empty matrix", name);
-}
-
-void
-gripe_implicit_conversion (const char *id, const char *from, const char *to)
-{
-  warning_with_id (id, "implicit conversion from %s to %s", from, to);
-}
-
-void
-gripe_implicit_conversion (const std::string& id,
-                           const std::string& from, const std::string& to)
-{
-  warning_with_id (id.c_str (),
-                   "implicit conversion from %s to %s",
-                   from.c_str (), to.c_str ());
-}
-
-void
-gripe_indexed_cs_list (void)
-{
-  error ("a cs-list cannot be further indexed");
-}
-
-void
-gripe_invalid_conversion (const std::string& from, const std::string& to)
-{
-  error ("invalid conversion from %s to %s", from.c_str (), to.c_str ());
-}
-
-void
-gripe_invalid_inquiry_subscript (void)
-{
-  error ("invalid dimension inquiry of a non-existent value");
-}
-
-void
-gripe_invalid_value_specified (const char *name)
-{
-  warning ("invalid value specified for '%s'", name);
-}
-
-void
-gripe_logical_conversion (void)
-{
-  warning_with_id ("Octave:logical-conversion",
-                   "value not equal to 1 or 0 converted to logical 1");
-}
-
-void
-gripe_nonbraced_cs_list_assignment (void)
-{
-  error ("invalid assignment to cs-list outside multiple assignment");
-}
-
-void
-gripe_nonconformant (void)
-{
-  error ("nonconformant matrices");
-}
-
-void
-gripe_nonconformant (octave_idx_type r1, octave_idx_type c1,
-                     octave_idx_type r2, octave_idx_type c2)
-{
-  error ("nonconformant matrices (op1 is %dx%d, op2 is %dx%d)",
-         r1, c1, r2, c2);
-}
-
-void
-gripe_not_implemented (const char *fcn)
-{
-  error ("%s: not implemented", fcn);
-}
-
-// FIXME: Deprecated in 4.2, remove in 4.6
-void
-gripe_not_supported (const char *fcn)
-{
-  error ("%s: not supported on this system", fcn);
-}
-
-void
-gripe_range_invalid (void)
-{
-  error ("range constant used in invalid context");
-}
-
-void
-gripe_square_matrix_required (const char *name)
-{
-  error ("%s: argument must be a square matrix", name);
-}
-
-void
-gripe_string_invalid (void)
-{
-  error ("std::string constant used in invalid context");
-}
-
-void
-gripe_unrecognized_data_fmt (const char *warn_for)
-{
-  error ("%s: unrecognized data format requested", warn_for);
-}
-
-void
-gripe_unrecognized_float_fmt (void)
-{
-  error ("unrecognized floating point format requested");
-}
-
-void
-gripe_user_returned_invalid (const char *name)
-{
-  error ("%s: user-supplied function returned invalid value", name);
-}
-
-void
-gripe_user_supplied_eval (const char *name)
-{
-  octave::execution_exception e;
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic push
-#  pragma GCC diagnostic ignored "-Wdeprecated-declarations"
-#endif
-
-  gripe_user_supplied_eval (e, name);
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic pop
-#endif
-}
-
-void
-gripe_user_supplied_eval (octave::execution_exception& e,
-                          const char *name)
-{
-  error (e, "%s: evaluation of user-supplied function failed", name);
-}
-
-void
-gripe_warn_complex_cmp (void)
-{
-  warning_with_id ("Octave:language-extension",
-                   "comparing complex numbers is not supported in Matlab");
-}
-
-void
-gripe_wrong_type_arg (const char *name, const char *s, bool is_error)
-{
-  octave::execution_exception e;
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic push
-#  pragma GCC diagnostic ignored "-Wdeprecated-declarations"
-#endif
-
-  gripe_wrong_type_arg (e, name, s, is_error);
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic pop
-#endif
-}
-
-void
-gripe_wrong_type_arg (octave::execution_exception& e,
-                      const char *name, const char *s, bool is_error)
-{
-  if (is_error)
-    error (e, "%s: wrong type argument '%s'", name, s);
-  else
-    warning ("%s: wrong type argument '%s'", name, s);
-}
-
-void
-gripe_wrong_type_arg (const char *name, const std::string& s, bool is_error)
-{
-  octave::execution_exception e;
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic push
-#  pragma GCC diagnostic ignored "-Wdeprecated-declarations"
-#endif
-
-  gripe_wrong_type_arg (e, name, s.c_str (), is_error);
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic pop
-#endif
-}
-
-void
-gripe_wrong_type_arg (octave::execution_exception& e,
-                      const char *name, const std::string& s, bool is_error)
-{
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic push
-#  pragma GCC diagnostic ignored "-Wdeprecated-declarations"
-#endif
-
-  gripe_wrong_type_arg (e, name, s.c_str (), is_error);
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic pop
-#endif
-}
-
-void
-gripe_wrong_type_arg (const char *name, const octave_value& tc,
-                      bool is_error)
-{
-  octave::execution_exception e;
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic push
-#  pragma GCC diagnostic ignored "-Wdeprecated-declarations"
-#endif
-
-  gripe_wrong_type_arg (e, name, tc, is_error);
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic pop
-#endif
-}
-
-void
-gripe_wrong_type_arg (octave::execution_exception& e,
-                      const char *name, const octave_value& tc,
-                      bool is_error)
-{
-  std::string type = tc.type_name ();
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic push
-#  pragma GCC diagnostic ignored "-Wdeprecated-declarations"
-#endif
-
-  gripe_wrong_type_arg (e, name, type, is_error);
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic pop
-#endif
-}
-
-void
-gripe_wrong_type_arg (const std::string& name, const octave_value& tc,
-                      bool is_error)
-{
-  octave::execution_exception e;
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic push
-#  pragma GCC diagnostic ignored "-Wdeprecated-declarations"
-#endif
-
-  gripe_wrong_type_arg (e, name, tc, is_error);
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic pop
-#endif
-}
-
-void
-gripe_wrong_type_arg (octave::execution_exception& e,
-                      const std::string& name, const octave_value& tc,
-                      bool is_error)
-{
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic push
-#  pragma GCC diagnostic ignored "-Wdeprecated-declarations"
-#endif
-
-  gripe_wrong_type_arg (e, name.c_str (), tc, is_error);
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic pop
-#endif
-}
-
-void
-gripe_wrong_type_arg (const char *s, bool is_error)
-{
-  octave::execution_exception e;
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic push
-#  pragma GCC diagnostic ignored "-Wdeprecated-declarations"
-#endif
-
-  gripe_wrong_type_arg (e, s, is_error);
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic pop
-#endif
-}
-
-void
-gripe_wrong_type_arg (octave::execution_exception& e,
-                      const char *s, bool is_error)
-{
-  if (is_error)
-    error (e, "wrong type argument '%s'", s);
-  else
-    warning ("wrong type argument '%s'", s);
-}
-
-void
-gripe_wrong_type_arg (const std::string& s, bool is_error)
-{
-  octave::execution_exception e;
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic push
-#  pragma GCC diagnostic ignored "-Wdeprecated-declarations"
-#endif
-
-  gripe_wrong_type_arg (e, s, is_error);
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic pop
-#endif
-}
-
-void
-gripe_wrong_type_arg (octave::execution_exception& e,
-                      const std::string& s, bool is_error)
-{
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic push
-#  pragma GCC diagnostic ignored "-Wdeprecated-declarations"
-#endif
-
-  gripe_wrong_type_arg (e, s.c_str (), is_error);
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic pop
-#endif
-}
-
-void
-gripe_wrong_type_arg (const octave_value& tc, bool is_error)
-{
-  octave::execution_exception e;
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic push
-#  pragma GCC diagnostic ignored "-Wdeprecated-declarations"
-#endif
-
-  gripe_wrong_type_arg (e, tc, is_error);
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic pop
-#endif
-}
-
-void
-gripe_wrong_type_arg (octave::execution_exception& e,
-                      const octave_value& tc, bool is_error)
-{
-  std::string type = tc.type_name ();
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic push
-#  pragma GCC diagnostic ignored "-Wdeprecated-declarations"
-#endif
-
-  gripe_wrong_type_arg (e, type, is_error);
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic pop
-#endif
-}
-
-void
-gripe_wrong_type_arg_for_binary_op (const octave_value& op)
-{
-  std::string type = op.type_name ();
-  error ("invalid operand '%s' for binary operator", type.c_str ());
-}
-
-void
-gripe_wrong_type_arg_for_unary_op (const octave_value& op)
-{
-  std::string type = op.type_name ();
-  error ("invalid operand '%s' for unary operator", type.c_str ());
-}
diff --git a/libinterp/corefcn/gripes.h b/libinterp/corefcn/gripes.h
deleted file mode 100644
--- a/libinterp/corefcn/gripes.h
+++ /dev/null
@@ -1,235 +0,0 @@
-/*
-
-Copyright (C) 1993-2018 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software: you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-Octave is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<https://www.gnu.org/licenses/>.
-
-*/
-
-// FIXME: All gripe_XXX functions deprecated in 4.2.  Remove file in 4.6
-#if ! defined (octave_gripes_h)
-#define octave_gripes_h 1
-
-#include "octave-config.h"
-
-#include <string>
-
-#include "lo-array-gripes.h"
-
-class octave_value;
-namespace octave
-{
-  class execution_exception;
-}
-
-////////////////////////////////////////////////////////////////////////////////
-// Alphabetized list of gripes.
-////////////////////////////////////////////////////////////////////////////////
-
-OCTAVE_DEPRECATED (4.2, "use 'err_2_or_3_dim_plot' instead")
-OCTAVE_NORETURN OCTINTERP_API extern void
-gripe_2_or_3_dim_plot (void);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_data_conversion' instead")
-OCTAVE_NORETURN OCTINTERP_API extern void
-gripe_data_conversion (const char *from, const char *to);
-
-OCTAVE_DEPRECATED (4.2, "use 'warn_data_file_in_path' instead")
-OCTINTERP_API extern void
-gripe_data_file_in_path (const std::string& fcn, const std::string& file);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_disabled_feature' or 'warn_disabled_feature' instead")
-OCTAVE_NORETURN OCTINTERP_API extern void
-gripe_disabled_feature (const std::string& fcn,
-                        const std::string& feature,
-                        const std::string& pkg="Octave");
-
-OCTAVE_DEPRECATED (4.2, "use 'warn_divide_by_zero' instead")
-OCTINTERP_API extern void
-gripe_divide_by_zero (void);
-
-OCTAVE_DEPRECATED (4.2, "use 'warn_empty_arg' instead")
-OCTINTERP_API extern void
-gripe_empty_arg (const char *name, bool is_error);
-
-OCTAVE_DEPRECATED (4.2, "use 'warn_implicit_conversion' instead")
-OCTINTERP_API extern void
-gripe_implicit_conversion (const char *id, const char *from, const char *to);
-
-OCTAVE_DEPRECATED (4.2, "use 'warn_implicit_conversion' instead")
-OCTINTERP_API extern void
-gripe_implicit_conversion (const std::string& id, const std::string& from,
-                           const std::string& to);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_indexed_cs_list' instead")
-OCTAVE_NORETURN OCTINTERP_API extern void
-gripe_indexed_cs_list (void);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_invalid_conversion' instead")
-OCTAVE_NORETURN OCTINTERP_API extern void
-gripe_invalid_conversion (const std::string& from, const std::string& to);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_invalid_inquiry_subscript' instead")
-OCTAVE_NORETURN OCTINTERP_API extern void
-gripe_invalid_inquiry_subscript (void);
-
-OCTAVE_DEPRECATED (4.2, "use 'warn_invalid_value_specified' instead")
-OCTINTERP_API extern void
-gripe_invalid_value_specified (const char *name);
-
-OCTAVE_DEPRECATED (4.2, "use 'warn_logical_conversion' instead")
-OCTINTERP_API extern void
-gripe_logical_conversion (void);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_nonbraced_cs_list_assignment' instead")
-OCTAVE_NORETURN OCTINTERP_API extern void
-gripe_nonbraced_cs_list_assignment (void);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_nonconformant' instead")
-OCTAVE_NORETURN OCTINTERP_API extern void
-gripe_nonconformant (void);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_nonconformant' instead")
-OCTAVE_NORETURN OCTINTERP_API extern void
-gripe_nonconformant (octave_idx_type r1, octave_idx_type c1,
-                     octave_idx_type r2, octave_idx_type c2);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_not_implemented' instead")
-OCTAVE_NORETURN OCTINTERP_API extern void
-gripe_not_implemented (const char *);
-
-// FIXME: Deprecated in 4.2, remove in 4.6
-OCTAVE_DEPRECATED (4.2, "use 'err_disabled_feature' or 'warn_disabled_feature' instead")
-OCTAVE_NORETURN OCTINTERP_API extern void
-gripe_not_supported (const char *);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_range_invalid' instead")
-OCTAVE_NORETURN OCTINTERP_API extern void
-gripe_range_invalid (void);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_square_matrix_required' instead")
-OCTAVE_NORETURN OCTINTERP_API extern void
-gripe_square_matrix_required (const char *name);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_string_invalid' instead")
-OCTAVE_NORETURN OCTINTERP_API extern void
-gripe_string_invalid (void);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_unrecognized_data_fmt' instead")
-OCTAVE_NORETURN OCTINTERP_API extern void
-gripe_unrecognized_data_fmt (const char *warn_for);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_unrecognized_float_fmt' instead")
-OCTAVE_NORETURN OCTINTERP_API extern void
-gripe_unrecognized_float_fmt (void);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_user_returned_invalid' instead")
-OCTAVE_NORETURN OCTINTERP_API extern void
-gripe_user_returned_invalid (const char *name);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_user_supplied_eval' instead")
-OCTAVE_NORETURN OCTINTERP_API extern void
-gripe_user_supplied_eval (const char *name);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_user_supplied_eval' instead")
-OCTAVE_NORETURN OCTINTERP_API extern void
-gripe_user_supplied_eval (octave::execution_exception& e, const char *name);
-
-OCTAVE_DEPRECATED (4.2, "use 'warn_complex_cmp' instead")
-OCTINTERP_API extern void
-gripe_warn_complex_cmp (void);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
-OCTINTERP_API extern void
-gripe_wrong_type_arg (const char *name, const char *s,
-                      bool is_error = true);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
-OCTINTERP_API extern void
-gripe_wrong_type_arg (octave::execution_exception& e,
-                      const char *name, const char *s,
-                      bool is_error = true);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
-OCTINTERP_API extern void
-gripe_wrong_type_arg (const char *name, const std::string& s,
-                      bool is_error = true);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
-OCTINTERP_API extern void
-gripe_wrong_type_arg (octave::execution_exception& e,
-                      const char *name, const std::string& s,
-                      bool is_error = true);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' or 'warn_wrong_type_arg' instead")
-OCTINTERP_API extern void
-gripe_wrong_type_arg (const char *name, const octave_value& tc,
-                      bool is_error = true);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
-OCTINTERP_API extern void
-gripe_wrong_type_arg (octave::execution_exception& e,
-                      const char *name, const octave_value& tc,
-                      bool is_error = true);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
-OCTINTERP_API extern void
-gripe_wrong_type_arg (const std::string& name, const octave_value& tc,
-                      bool is_error = true);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
-OCTINTERP_API extern void
-gripe_wrong_type_arg (octave::execution_exception& e,
-                      const std::string& name, const octave_value& tc,
-                      bool is_error = true);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
-OCTINTERP_API extern void
-gripe_wrong_type_arg (const char *s, bool is_error = true);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
-OCTINTERP_API extern void
-gripe_wrong_type_arg (octave::execution_exception& e, const char *s,
-                      bool is_error = true);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
-OCTINTERP_API extern void
-gripe_wrong_type_arg (const std::string& s, bool is_error = true);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
-OCTINTERP_API extern void
-gripe_wrong_type_arg (octave::execution_exception& e, const std::string& s,
-                      bool is_error = true);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
-OCTINTERP_API extern void
-gripe_wrong_type_arg (const octave_value& tc, bool is_error = true);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
-OCTINTERP_API extern void
-gripe_wrong_type_arg (octave::execution_exception& e, const octave_value& tc,
-                      bool is_error = true);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg_for_binary_op' instead")
-OCTAVE_NORETURN OCTINTERP_API extern void
-gripe_wrong_type_arg_for_binary_op (const octave_value& op);
-
-OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg_for_unary_op' instead")
-OCTAVE_NORETURN OCTINTERP_API extern void
-gripe_wrong_type_arg_for_unary_op (const octave_value& op);
-
-#endif
diff --git a/libinterp/corefcn/module.mk b/libinterp/corefcn/module.mk
--- a/libinterp/corefcn/module.mk
+++ b/libinterp/corefcn/module.mk
@@ -36,17 +36,16 @@ COREFCN_INC = \
   %reldir%/event-queue.h \
   %reldir%/fcn-info.h \
   %reldir%/file-io.h \
   %reldir%/ft-text-renderer.h \
   %reldir%/gl-render.h \
   %reldir%/gl2ps-print.h \
   %reldir%/graphics-handle.h \
   %reldir%/graphics-toolkit.h \
-  %reldir%/gripes.h \
   %reldir%/gtk-manager.h \
   %reldir%/help.h \
   %reldir%/hook-fcn.h \
   %reldir%/input.h \
   %reldir%/interpreter.h \
   %reldir%/load-path.h \
   %reldir%/load-save.h \
   %reldir%/ls-ascii-helper.h \
@@ -161,17 +160,16 @@ COREFCN_SRC = \
   %reldir%/getgrent.cc \
   %reldir%/getpwent.cc \
   %reldir%/getrusage.cc \
   %reldir%/givens.cc \
   %reldir%/gl-render.cc \
   %reldir%/gl2ps-print.cc \
   %reldir%/graphics-toolkit.cc \
   %reldir%/graphics.cc \
-  %reldir%/gripes.cc \
   %reldir%/gsvd.cc \
   %reldir%/gtk-manager.cc \
   %reldir%/hash.cc \
   %reldir%/help.cc \
   %reldir%/hess.cc \
   %reldir%/hex2num.cc \
   %reldir%/hook-fcn.cc \
   %reldir%/input.cc \
diff --git a/libinterp/corefcn/mxarray.in.h b/libinterp/corefcn/mxarray.in.h
--- a/libinterp/corefcn/mxarray.in.h
+++ b/libinterp/corefcn/mxarray.in.h
@@ -298,22 +298,16 @@ public:
   virtual mxArray * mutate (void) const { return nullptr; }
 
   virtual octave_value as_octave_value (void) const = 0;
 
 protected:
 
   mxArray_base (const mxArray_base&) { }
 
-  OCTAVE_DEPRECATED (4.2, "use 'err_invalid_type' instead")
-  void invalid_type_error (void) const
-  {
-    error ("invalid type for operation");
-  }
-
   OCTAVE_NORETURN void err_invalid_type (void) const
   {
     error ("invalid type for operation");
   }
 };
 
 // The main interface class.  The representation can be based on an
 // octave_value object or a separate object that tries to reproduce
diff --git a/libinterp/corefcn/sighandlers.h b/libinterp/corefcn/sighandlers.h
--- a/libinterp/corefcn/sighandlers.h
+++ b/libinterp/corefcn/sighandlers.h
@@ -75,65 +75,9 @@ namespace octave
   extern OCTINTERP_API interrupt_handler
   set_interrupt_handler (const volatile interrupt_handler& h,
                          bool restart_syscalls = true);
 
   // TRUE means we should try to enter the debugger on SIGINT.
   extern OCTINTERP_API bool Vdebug_on_interrupt;
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::interrupt_handler' instead")
-typedef octave::interrupt_handler octave_interrupt_handler;
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sig_handler' instead")
-typedef octave::sig_handler octave_sig_handler;
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::pipe_handler_error_count' instead")
-static auto& pipe_handler_error_count = octave::pipe_handler_error_count;
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::can_interrupt' instead")
-static auto& can_interrupt = octave::can_interrupt;
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::set_signal_handler' instead")
-inline octave::sig_handler *
-octave_set_signal_handler (int sig, octave::sig_handler *handler,
-                           bool restart_syscalls = true)
-{
-  return octave::set_signal_handler (sig, handler, restart_syscalls);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::set_signal_handler' instead")
-inline octave::sig_handler *
-octave_set_signal_handler (const char *signame, octave::sig_handler *handler,
-                           bool restart_syscalls = true)
-{
-  return octave::set_signal_handler (signame, handler, restart_syscalls);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::set_signal_handler' instead")
-const auto install_signal_handlers = octave::install_signal_handlers;
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::respond_to_pending_signals' instead")
-const auto octave_signal_handler = octave::respond_to_pending_signals;
-
-namespace octave
-{
-  OCTAVE_DEPRECATED (4.4, "use 'octave::respond_to_pending_signals' instead")
-  const auto signal_handler = respond_to_pending_signals;
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::interrupt_handler' instead")
-const auto octave_catch_interrupts = octave::catch_interrupts;
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::ignore_interrupts' instead")
-const auto octave_ignore_interrupts = octave::ignore_interrupts;
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::set_interrupt_handler' instead")
-const auto octave_set_interrupt_handler = octave::set_interrupt_handler;
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::Vdebug_on_interrupt' instead")
-static auto& Vdebug_on_interrupt = octave::Vdebug_on_interrupt;
-
 #endif
-
-#endif
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -230,22 +230,16 @@ keyword_almost_match (const char * const
 done:
 
   delete [] kw;
   delete [] to_match;
 
   return status;
 }
 
-int
-empty_arg (const char * /* name */, octave_idx_type nr, octave_idx_type nc)
-{
-  return (nr == 0 || nc == 0);
-}
-
 // See if the given file is in the path.
 
 std::string
 search_path_for_file (const std::string& path, const string_vector& names)
 {
   octave::directory_path p (path);
 
   return octave::sys::env::make_absolute (p.find_first_of (names.std_list ()));
@@ -534,90 +528,16 @@ contents_file_in_path (const std::string
 
       if (fs.exists ())
         retval = octave::sys::env::make_absolute (tcontents);
     }
 
   return retval;
 }
 
-// Deprecated in 4.2, remove in 4.6.
-// See if there is a .oct file in the path.
-// If so, return the full path to the file.
-
-std::string
-oct_file_in_path (const std::string& name)
-{
-  std::string retval;
-
-  int len = name.length ();
-
-  if (len > 0)
-    {
-      if (octave::sys::env::absolute_pathname (name))
-        {
-          octave::sys::file_stat fs (name);
-
-          if (fs.exists ())
-            retval = name;
-        }
-      else if (len > 4 && name.find (".oct", len-5))
-        {
-          octave::load_path& lp = octave::__get_load_path__ ("oct_file_in_path");
-
-          retval = lp.find_oct_file (name.substr (0, len-4));
-        }
-      else
-        {
-          octave::load_path& lp = octave::__get_load_path__ ("oct_file_in_path");
-
-          retval = lp.find_oct_file (name);
-        }
-    }
-
-  return retval;
-}
-
-// Deprecated in 4.2, remove in 4.6.
-// See if there is a .mex file in the path.
-// If so, return the full path to the file.
-
-std::string
-mex_file_in_path (const std::string& name)
-{
-  std::string retval;
-
-  int len = name.length ();
-
-  if (len > 0)
-    {
-      if (octave::sys::env::absolute_pathname (name))
-        {
-          octave::sys::file_stat fs (name);
-
-          if (fs.exists ())
-            retval = name;
-        }
-      else if (len > 4 && name.find (".mex", len-5))
-        {
-          octave::load_path& lp = octave::__get_load_path__ ("mex_file_in_path");
-
-          retval = lp.find_mex_file (name.substr (0, len-4));
-        }
-      else
-        {
-          octave::load_path& lp = octave::__get_load_path__ ("mex_file_in_path");
-
-          retval = lp.find_mex_file (name);
-        }
-    }
-
-  return retval;
-}
-
 // Replace backslash escapes in a string with the real values.
 
 std::string
 do_string_escapes (const std::string& s)
 {
   std::string retval;
 
   size_t i = 0;
diff --git a/libinterp/corefcn/utils.h b/libinterp/corefcn/utils.h
--- a/libinterp/corefcn/utils.h
+++ b/libinterp/corefcn/utils.h
@@ -49,20 +49,16 @@ extern OCTINTERP_API int almost_match (c
                                        int min_match_len = 1,
                                        int case_sens = 1);
 
 extern OCTINTERP_API int
 keyword_almost_match (const char * const *std, int *min_len,
                       const std::string& s, int min_toks_to_match,
                       int max_toks);
 
-OCTAVE_DEPRECATED (4.2, "use 'octave_value::isempty' instead")
-extern OCTINTERP_API int empty_arg (const char *name, octave_idx_type nr,
-                                    octave_idx_type nc);
-
 extern OCTINTERP_API std::string
 search_path_for_file (const std::string&, const string_vector&);
 
 extern OCTINTERP_API string_vector
 search_path_for_all_files (const std::string&, const string_vector&);
 
 extern OCTINTERP_API std::string
 file_in_path (const std::string&, const std::string&);
@@ -71,22 +67,16 @@ extern OCTINTERP_API std::string
 find_data_file_in_load_path  (const std::string& fcn,
                               const std::string& file,
                               bool require_regular_file = false);
 
 extern OCTINTERP_API std::string contents_file_in_path (const std::string&);
 
 extern OCTINTERP_API std::string fcn_file_in_path (const std::string&);
 
-OCTAVE_DEPRECATED (4.2, "use 'load_path::find_oct_file' instead")
-extern OCTINTERP_API std::string oct_file_in_path (const std::string&);
-
-OCTAVE_DEPRECATED (4.2, "use 'load_path::find_mex_file' instead")
-extern OCTINTERP_API std::string mex_file_in_path (const std::string&);
-
 extern OCTINTERP_API std::string do_string_escapes (const std::string& s);
 
 extern OCTINTERP_API const char * undo_string_escape (char c);
 
 extern OCTINTERP_API std::string undo_string_escapes (const std::string& s);
 
 extern OCTINTERP_API void
 check_dimensions (dim_vector& dim, const char *warnfor);
diff --git a/liboctave/numeric/lo-mappers.h b/liboctave/numeric/lo-mappers.h
--- a/liboctave/numeric/lo-mappers.h
+++ b/liboctave/numeric/lo-mappers.h
@@ -476,447 +476,24 @@ namespace octave
 
     extern OCTAVE_API Complex rc_sqrt (double);
     extern OCTAVE_API FloatComplex rc_sqrt (float);
   }
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::isna' instead")
-inline bool octave_is_NA (double x) { return octave::math::isna (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::isna' instead")
-inline bool octave_is_NA (float x) { return octave::math::isna (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::isna' instead")
-inline bool octave_is_NA (const Complex& x) { return octave::math::isna (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::isna' instead")
-inline bool octave_is_NA (const FloatComplex& x)
-{
-  return octave::math::isna (x);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::acos' instead")
-inline Complex acos (const Complex& x) { return octave::math::acos (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::acos' instead")
-inline FloatComplex acos (const FloatComplex& x)
-{
-  return octave::math::acos (x);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::asin' instead")
-inline Complex asin (const Complex& x) { return octave::math::asin (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::asin' instead")
-inline FloatComplex asin (const FloatComplex& x)
-{
-  return octave::math::asin (x);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::atan' instead")
-inline Complex atan (const Complex& x) { return octave::math::atan (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::atan' instead")
-inline FloatComplex atan (const FloatComplex& x)
-{
-  return octave::math::atan (x);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'std::arg' instead")
-inline double arg (double x) { return std::arg (x); }
-OCTAVE_DEPRECATED (4.2, "use 'std::arg' instead")
-inline float arg (float x) { return std::arg (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::conj' instead")
-inline double conj (double x) { return x; }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::conj' instead")
-inline float conj (float x) { return x; }
-
-OCTAVE_DEPRECATED (4.2, "use 'std::imag' instead")
-inline double imag (double x) { return std::imag (x); }
-OCTAVE_DEPRECATED (4.2, "use 'std::imag' instead")
-inline float imag (float x) { return std::imag (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'std::real' instead")
-inline double real (double x) { return std::real (x); }
-OCTAVE_DEPRECATED (4.2, "use 'std::real' instead")
-inline float real (float x) { return std::real (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::log2' instead")
-inline double xlog2 (double x) { return octave::math::log2 (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::log2' instead")
-inline float xlog2 (float x) { return octave::math::log2 (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::log2' instead")
-inline Complex xlog2 (const Complex& x) { return octave::math::log2 (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::log2' instead")
-inline FloatComplex xlog2 (const FloatComplex& x)
-{
-  return octave::math::log2 (x);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::log2' instead")
-inline double xlog2 (double x, int& exp)
-{
-  return octave::math::log2 (x, exp);
-}
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::log2' instead")
-inline float xlog2 (float x, int& exp) { return octave::math::log2 (x, exp); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::log2' instead")
-inline Complex xlog2 (const Complex& x, int& exp)
-{
-  return octave::math::log2 (x, exp);
-}
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::log2' instead")
-inline FloatComplex xlog2 (const FloatComplex& x, int& exp)
-{
-  return octave::math::log2 (x, exp);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::exp2' instead")
-inline double xexp2 (double x) { return octave::math::exp2 (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::exp2' instead")
-inline float xexp2 (float x) { return octave::math::exp2 (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'std::ceil' instead")
-inline double xceil (double x) { return std::ceil (x); }
-OCTAVE_DEPRECATED (4.2, "use 'std::ceil' instead")
-inline float xceil (float x) { return std::ceil (x); }
-
-template <typename T>
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::ceil' instead")
-std::complex<T>
-ceil (const std::complex<T>& x)
-{
-  return octave::math::ceil (x);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::copysign' instead")
-inline double xcopysign (double x, double y)
-{
-  return octave::math::copysign (x, y);
-}
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::copysign' instead")
-inline float xcopysign (float x, float y)
-{
-  return octave::math::copysign (x, y);
-}
-
-template <typename T>
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::signbit' instead")
-T
-xsignbit (T x)
-{
-  return octave::math::signbit (x);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::negative_sign' instead")
-inline bool xnegative_sign (double x)
-{
-  return octave::math::negative_sign (x);
-}
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::negative_sign' instead")
-inline bool xnegative_sign (float x)
-{
-  return octave::math::negative_sign (x);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::positive_sign' instead")
-inline bool xpositive_sign (double x)
-{
-  return octave::math::positive_sign (x);
-}
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::positive_sign' instead")
-inline bool xpositive_sign (float x)
-{
-  return octave::math::positive_sign (x);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::signum' instead")
-inline double signum (double x) { return octave::math::signum (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::signum' instead")
-inline float signum (float x) { return octave::math::signum (x); }
-
-template <typename T>
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::signum' instead")
-std::complex<T>
-signum (const std::complex<T>& x)
-{
-  return octave::math::signum (x);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'std::trunc' instead")
-inline double xtrunc (double x) { return std::trunc (x); }
-OCTAVE_DEPRECATED (4.2, "use 'std::trunc' instead")
-inline float xtrunc (float x) { return std::trunc (x); }
-
-template <typename T>
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::trunc' instead")
-std::complex<T>
-xtrunc (const std::complex<T>& x)
-{
-  return octave::math::trunc (x);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::fix' instead")
-inline double fix (double x) { return octave::math::fix (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::fix' instead")
-inline float fix (float x) { return octave::math::fix (x); }
-
-template <typename T>
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::fix' instead")
-std::complex<T>
-fix (const std::complex<T>& x)
-{
-  return octave::math::fix (x);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'std::floor' instead")
-inline double xfloor (double x) { return std::floor (x); }
-OCTAVE_DEPRECATED (4.2, "use 'std::floor' instead")
-inline float xfloor (float x) { return std::floor (x); }
-
-template <typename T>
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::floor' instead")
-std::complex<T>
-floor (const std::complex<T>& x)
-{
-  return octave::math::floor (x);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::round' instead")
-inline double xround (double x) { return octave::math::round (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::round' instead")
-inline float xround (float x) { return octave::math::round (x); }
-
-template <typename T>
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::round' instead")
-std::complex<T>
-xround (const std::complex<T>& x)
-{
-  return octave::math::round (x);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::roundb' instead")
-inline double xroundb (double x) { return octave::math::roundb (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::roundb' instead")
-inline float xroundb (float x) { return octave::math::roundb (x); }
-
-template <typename T>
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::roundb' instead")
-std::complex<T>
-xroundb (const std::complex<T>& x)
-{
-  return octave::math::roundb (x);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::isnan' instead")
-inline bool xisnan (bool x) { return octave::math::isnan (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::isnan' instead")
-inline bool xisnan (char x) { return octave::math::isnan (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::isnan' instead")
-inline bool xisnan (double x) { return octave::math::isnan (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::isnan' instead")
-inline bool xisnan (float x) { return octave::math::isnan (x); }
-
-template <typename T>
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::isnan' instead")
-bool
-xisnan (const std::complex<T>& x)
-{
-  return octave::math::isnan (x);
-}
-
 OCTAVE_DEPRECATED (4.4, "use 'octave::math::isfinite' instead")
 inline bool xfinite (double x) { return octave::math::isfinite (x); }
 OCTAVE_DEPRECATED (4.4, "use 'octave::math::isfinite' instead")
 inline bool xfinite (float x) { return octave::math::isfinite (x); }
 
 template <typename T>
 OCTAVE_DEPRECATED (4.4, "use 'octave::math::isfinite' instead")
 bool
 xfinite (const std::complex<T>& x)
 {
   return octave::math::isfinite (x);
 }
 
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::isinf' instead")
-inline bool xisinf (double x) { return octave::math::isinf (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::isinf' instead")
-inline bool xisinf (float x) { return octave::math::isinf (x); }
-
-template <typename T>
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::isinf' instead")
-bool
-xisinf (const std::complex<T>& x)
-{
-  return octave::math::isinf (x);
-}
-
-// Some useful tests, that are commonly repeated.
-// Test for a finite integer.
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::isinteger' instead")
-inline bool
-xisinteger (double x)
-{
-  return octave::math::isinteger (x);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::isinteger' instead")
-inline bool
-xisinteger (float x)
-{
-  return octave::math::isinteger (x);
-}
-
-template <typename T>
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::x_nint' instead")
-T
-X_NINT (T x)
-{
-  return octave::math::x_nint (x);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::x_nint (x)' instead")
-inline double D_NINT (double x) { return octave::math::x_nint (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::x_nint (x)' instead")
-inline float F_NINT (float x) { return octave::math::x_nint (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::nint_big' instead")
-inline octave_idx_type NINTbig (double x) { return octave::math::nint_big (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::nint_big' instead")
-inline octave_idx_type NINTbig (float x) { return octave::math::nint_big (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::nint' instead")
-inline int NINT (double x) { return octave::math::nint (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::nint' instead")
-inline int NINT (float x) { return octave::math::nint (x); }
-
-template <typename T>
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::mod' instead")
-T
-xmod (T x, T y)
-{
-  return octave::math::mod (x, y);
-}
-
-template <typename T>
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rem' instead")
-T
-xrem (T x, T y)
-{
-  return octave::math::rem (x, y);
-}
-
-template <typename T>
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::min' instead")
-T
-xmin (T x, T y)
-{
-  return octave::math::min (x, y);
-}
-
-template <typename T>
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::max' instead")
-T
-xmax (T x, T y)
-{
-  return octave::math::max (x, y);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::min' instead")
-inline double
-xmin (double x, double y)
-{
-  return octave::math::min (x, y);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::max' instead")
-inline double
-xmax (double x, double y)
-{
-  return octave::math::max (x, y);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::min' instead")
-inline float
-xmin (float x, float y)
-{
-  return octave::math::min (x, y);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::max' instead")
-inline float
-xmax (float x, float y)
-{
-  return octave::math::max (x, y);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::min' instead")
-inline Complex
-xmin (const Complex& x, const Complex& y)
-{
-  return octave::math::min (x, y);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::max' instead")
-inline Complex
-xmax (const Complex& x, const Complex& y)
-{
-  return octave::math::max (x, y);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::min' instead")
-inline OCTAVE_API FloatComplex
-xmin (const FloatComplex& x, const FloatComplex& y)
-{
-  return octave::math::min (x, y);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::max' instead")
-inline FloatComplex
-xmax (const FloatComplex& x, const FloatComplex& y)
-{
-  return octave::math::max (x, y);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_acos' instead")
-inline Complex rc_acos (double x) { return octave::math::rc_acos (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_acos' instead")
-inline FloatComplex rc_acos (float x) { return octave::math::rc_acos (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_acosh' instead")
-inline Complex rc_acosh (double x) { return octave::math::rc_acosh (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_acosh' instead")
-inline FloatComplex rc_acosh (float x) { return octave::math::rc_acosh (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_asin' instead")
-inline Complex rc_asin (double x) { return octave::math::rc_asin (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_asin' instead")
-inline FloatComplex rc_asin (float x) { return octave::math::rc_asin (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_atanh' instead")
-inline Complex rc_atanh (double x) { return octave::math::rc_atanh (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_atanh' instead")
-inline FloatComplex rc_atanh (float x) { return octave::math::rc_atanh (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log' instead")
-inline Complex rc_log (double x) { return octave::math::rc_log (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log' instead")
-inline FloatComplex rc_log (float x) { return octave::math::rc_log (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log2' instead")
-inline Complex rc_log2 (double x) { return octave::math::rc_log2 (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log2' instead")
-inline FloatComplex rc_log2 (float x) { return octave::math::rc_log2 (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log10' instead")
-inline Complex rc_log10 (double x) { return octave::math::rc_log10 (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log10' instead")
-inline FloatComplex rc_log10 (float x) { return octave::math::rc_log10 (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_sqrt' instead")
-inline Complex rc_sqrt (double x) { return octave::math::rc_sqrt (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_sqrt' instead")
-inline FloatComplex rc_sqrt (float x) { return octave::math::rc_sqrt (x); }
-
 #endif
 
 #endif
diff --git a/liboctave/numeric/lo-specfun.h b/liboctave/numeric/lo-specfun.h
--- a/liboctave/numeric/lo-specfun.h
+++ b/liboctave/numeric/lo-specfun.h
@@ -392,489 +392,9 @@ namespace octave
     extern OCTAVE_API Complex rc_lgamma (double x);
     extern OCTAVE_API FloatComplex rc_lgamma (float x);
 
     extern OCTAVE_API Complex rc_log1p (double x);
     extern OCTAVE_API FloatComplex rc_log1p (float x);
   }
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::acosh' instead")
-inline double xacosh (double x) { return octave::math::acosh (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::acosh' instead")
-inline float xacosh (float x) { return octave::math::acosh (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::acosh' instead")
-inline Complex xacosh (const Complex& x) { return octave::math::acosh (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::acosh' instead")
-inline FloatComplex xacosh (const FloatComplex& x) { return octave::math::acosh (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::asinh' instead")
-inline double xasinh (double x) { return octave::math::asinh (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::asinh' instead")
-inline float xasinh (float x) { return octave::math::asinh (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::asinh' instead")
-inline Complex xasinh (const Complex& x) { return octave::math::asinh (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::asinh' instead")
-inline FloatComplex xasinh (const FloatComplex& x) { return octave::math::asinh (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::atanh' instead")
-inline double xatanh (double x) { return octave::math::atanh (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::atanh' instead")
-inline float xatanh (float x) { return octave::math::atanh (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::atanh' instead")
-inline Complex xatanh (const Complex& x) { return octave::math::atanh (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::atanh' instead")
-inline FloatComplex xatanh (const FloatComplex& x) { return octave::math::atanh (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::erf' instead")
-inline double xerf (double x) { return octave::math::erf (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::erf' instead")
-inline float xerf (float x) { return octave::math::erf (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::erf' instead")
-inline Complex xerf (const Complex& x) { return octave::math::erf (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::erf' instead")
-inline FloatComplex xerf (const FloatComplex& x) { return octave::math::erf (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfc' instead")
-inline double xerfc (double x) { return octave::math::erfc (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfc' instead")
-inline float xerfc (float x) { return octave::math::erfc (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfc' instead")
-inline Complex xerfc (const Complex& x) { return octave::math::erfc (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfc' instead")
-inline FloatComplex xerfc (const FloatComplex& x) { return octave::math::erfc (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::expm1' instead")
-inline double xexpm1 (double x) { return octave::math::expm1 (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::expm1' instead")
-inline Complex xexpm1 (const Complex& x) { return octave::math::expm1 (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::expm1' instead")
-inline float xexpm1 (float x) { return octave::math::expm1 (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::expm1' instead")
-inline FloatComplex xexpm1 (const FloatComplex& x) { return octave::math::expm1 (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::log1p' instead")
-inline double xlog1p (double x) { return octave::math::log1p (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::log1p' instead")
-inline Complex xlog1p (const Complex& x) { return octave::math::log1p (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::log1p' instead")
-inline float xlog1p (float x) { return octave::math::log1p (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::log1p' instead")
-inline FloatComplex xlog1p (const FloatComplex& x) { return octave::math::log1p (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::cbrt' instead")
-inline double xcbrt (double x) { return octave::math::cbrt (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::cbrt' instead")
-inline float xcbrt (float x) { return octave::math::cbrt (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::gamma' instead")
-inline double xgamma (double x) { return octave::math::gamma (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::lgamma' instead")
-inline double xlgamma (double x) { return octave::math::lgamma (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_lgamma' instead")
-inline Complex rc_lgamma (double x) { return octave::math::rc_lgamma (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::gamma' instead")
-inline float xgamma (float x) { return octave::math::gamma (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::lgamma' instead")
-inline float xlgamma (float x) { return octave::math::lgamma (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_lgamma' instead")
-inline FloatComplex rc_lgamma (float x) { return octave::math::rc_lgamma (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
-inline Complex besselj (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr) { return octave::math::besselj (alpha, x, scaled, ierr); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
-inline Complex bessely (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr) { return octave::math::bessely (alpha, x, scaled, ierr); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
-inline Complex besseli (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr) { return octave::math::besseli (alpha, x, scaled, ierr); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
-inline Complex besselk (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr) { return octave::math::besselk (alpha, x, scaled, ierr); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
-inline Complex besselh1 (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr) { return octave::math::besselh1 (alpha, x, scaled, ierr); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
-inline Complex besselh2 (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr) { return octave::math::besselh2 (alpha, x, scaled, ierr); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
-extern OCTAVE_API ComplexMatrix besselj (double alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
-extern OCTAVE_API ComplexMatrix bessely (double alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
-extern OCTAVE_API ComplexMatrix besseli (double alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
-extern OCTAVE_API ComplexMatrix besselk (double alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
-extern OCTAVE_API ComplexMatrix besselh1 (double alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
-extern OCTAVE_API ComplexMatrix besselh2 (double alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
-extern OCTAVE_API ComplexMatrix besselj (const Matrix& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
-extern OCTAVE_API ComplexMatrix bessely (const Matrix& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
-extern OCTAVE_API ComplexMatrix besseli (const Matrix& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
-extern OCTAVE_API ComplexMatrix besselk (const Matrix& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
-extern OCTAVE_API ComplexMatrix besselh1 (const Matrix& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
-extern OCTAVE_API ComplexMatrix besselh2 (const Matrix& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
-extern OCTAVE_API ComplexMatrix besselj (const Matrix& alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
-extern OCTAVE_API ComplexMatrix bessely (const Matrix& alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
-extern OCTAVE_API ComplexMatrix besseli (const Matrix& alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
-extern OCTAVE_API ComplexMatrix besselk (const Matrix& alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
-extern OCTAVE_API ComplexMatrix besselh1 (const Matrix& alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
-extern OCTAVE_API ComplexMatrix besselh2 (const Matrix& alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
-extern OCTAVE_API ComplexNDArray besselj (double alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
-extern OCTAVE_API ComplexNDArray bessely (double alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
-extern OCTAVE_API ComplexNDArray besseli (double alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
-extern OCTAVE_API ComplexNDArray besselk (double alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
-extern OCTAVE_API ComplexNDArray besselh1 (double alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
-extern OCTAVE_API ComplexNDArray besselh2 (double alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
-extern OCTAVE_API ComplexNDArray besselj (const NDArray& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
-extern OCTAVE_API ComplexNDArray bessely (const NDArray& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
-extern OCTAVE_API ComplexNDArray besseli (const NDArray& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
-extern OCTAVE_API ComplexNDArray besselk (const NDArray& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
-extern OCTAVE_API ComplexNDArray besselh1 (const NDArray& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
-extern OCTAVE_API ComplexNDArray besselh2 (const NDArray& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
-extern OCTAVE_API ComplexNDArray besselj (const NDArray& alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
-extern OCTAVE_API ComplexNDArray bessely (const NDArray& alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
-extern OCTAVE_API ComplexNDArray besseli (const NDArray& alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
-extern OCTAVE_API ComplexNDArray besselk (const NDArray& alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
-extern OCTAVE_API ComplexNDArray besselh1 (const NDArray& alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
-extern OCTAVE_API ComplexNDArray besselh2 (const NDArray& alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
-extern OCTAVE_API ComplexMatrix besselj (const RowVector& alpha, const ComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
-extern OCTAVE_API ComplexMatrix bessely (const RowVector& alpha, const ComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
-extern OCTAVE_API ComplexMatrix besseli (const RowVector& alpha, const ComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
-extern OCTAVE_API ComplexMatrix besselk (const RowVector& alpha, const ComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
-extern OCTAVE_API ComplexMatrix besselh1 (const RowVector& alpha, const ComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
-extern OCTAVE_API ComplexMatrix besselh2 (const RowVector& alpha, const ComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
-inline FloatComplex besselj (float alpha, const FloatComplex& x, bool scaled, octave_idx_type& ierr) { return octave::math::besselj (alpha, x, scaled, ierr); }
-OCTAVE_DEPRECATED (4.2, "use 'octavh::bessely' instead")
-inline FloatComplex bessely (float alpha, const FloatComplex& x, bool scaled, octave_idx_type& ierr) { return octave::math::bessely (alpha, x, scaled, ierr); }
-OCTAVE_DEPRECATED (4.2, "use 'octavh::besseli' instead")
-inline FloatComplex besseli (float alpha, const FloatComplex& x, bool scaled, octave_idx_type& ierr) { return octave::math::besseli (alpha, x, scaled, ierr); }
-OCTAVE_DEPRECATED (4.2, "use 'octavh::besselk' instead")
-inline FloatComplex besselk (float alpha, const FloatComplex& x, bool scaled, octave_idx_type& ierr) { return octave::math::besselk (alpha, x, scaled, ierr); }
-OCTAVE_DEPRECATED (4.2, "use 'octavh::besselh1' instead")
-inline FloatComplex besselh1 (float alpha, const FloatComplex& x, bool scaled, octave_idx_type& ierr) { return octave::math::besselh1 (alpha, x, scaled, ierr); }
-OCTAVE_DEPRECATED (4.2, "use 'octavh::besselh2' instead")
-inline FloatComplex besselh2 (float alpha, const FloatComplex& x, bool scaled, octave_idx_type& ierr) { return octave::math::besselh2 (alpha, x, scaled, ierr); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
-extern OCTAVE_API FloatComplexMatrix besselj (float alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
-extern OCTAVE_API FloatComplexMatrix bessely (float alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
-extern OCTAVE_API FloatComplexMatrix besseli (float alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
-extern OCTAVE_API FloatComplexMatrix besselk (float alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
-extern OCTAVE_API FloatComplexMatrix besselh1 (float alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
-extern OCTAVE_API FloatComplexMatrix besselh2 (float alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
-extern OCTAVE_API FloatComplexMatrix besselj (const FloatMatrix& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
-extern OCTAVE_API FloatComplexMatrix bessely (const FloatMatrix& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
-extern OCTAVE_API FloatComplexMatrix besseli (const FloatMatrix& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
-extern OCTAVE_API FloatComplexMatrix besselk (const FloatMatrix& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
-extern OCTAVE_API FloatComplexMatrix besselh1 (const FloatMatrix& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
-extern OCTAVE_API FloatComplexMatrix besselh2 (const FloatMatrix& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
-extern OCTAVE_API FloatComplexMatrix besselj (const FloatMatrix& alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
-extern OCTAVE_API FloatComplexMatrix bessely (const FloatMatrix& alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
-extern OCTAVE_API FloatComplexMatrix besseli (const FloatMatrix& alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
-extern OCTAVE_API FloatComplexMatrix besselk (const FloatMatrix& alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
-extern OCTAVE_API FloatComplexMatrix besselh1 (const FloatMatrix& alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
-extern OCTAVE_API FloatComplexMatrix besselh2 (const FloatMatrix& alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
-extern OCTAVE_API FloatComplexNDArray besselj (float alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
-extern OCTAVE_API FloatComplexNDArray bessely (float alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
-extern OCTAVE_API FloatComplexNDArray besseli (float alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
-extern OCTAVE_API FloatComplexNDArray besselk (float alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
-extern OCTAVE_API FloatComplexNDArray besselh1 (float alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
-extern OCTAVE_API FloatComplexNDArray besselh2 (float alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
-extern OCTAVE_API FloatComplexNDArray besselj (const FloatNDArray& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
-extern OCTAVE_API FloatComplexNDArray bessely (const FloatNDArray& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
-extern OCTAVE_API FloatComplexNDArray besseli (const FloatNDArray& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
-extern OCTAVE_API FloatComplexNDArray besselk (const FloatNDArray& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
-extern OCTAVE_API FloatComplexNDArray besselh1 (const FloatNDArray& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
-extern OCTAVE_API FloatComplexNDArray besselh2 (const FloatNDArray& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
-extern OCTAVE_API FloatComplexNDArray besselj (const FloatNDArray& alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
-extern OCTAVE_API FloatComplexNDArray bessely (const FloatNDArray& alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
-extern OCTAVE_API FloatComplexNDArray besseli (const FloatNDArray& alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
-extern OCTAVE_API FloatComplexNDArray besselk (const FloatNDArray& alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
-extern OCTAVE_API FloatComplexNDArray besselh1 (const FloatNDArray& alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
-extern OCTAVE_API FloatComplexNDArray besselh2 (const FloatNDArray& alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
-extern OCTAVE_API FloatComplexMatrix besselj (const FloatRowVector& alpha, const FloatComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
-extern OCTAVE_API FloatComplexMatrix bessely (const FloatRowVector& alpha, const FloatComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
-extern OCTAVE_API FloatComplexMatrix besseli (const FloatRowVector& alpha, const FloatComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
-extern OCTAVE_API FloatComplexMatrix besselk (const FloatRowVector& alpha, const FloatComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
-extern OCTAVE_API FloatComplexMatrix besselh1 (const FloatRowVector& alpha, const FloatComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
-extern OCTAVE_API FloatComplexMatrix besselh2 (const FloatRowVector& alpha, const FloatComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::airy' instead")
-inline Complex airy (const Complex& z, bool deriv, bool scaled, octave_idx_type& ierr) { return octave::math::airy (z, deriv, scaled, ierr); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::biry' instead")
-inline Complex biry (const Complex& z, bool deriv, bool scaled, octave_idx_type& ierr) { return octave::math::biry (z, deriv, scaled, ierr); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::airy' instead")
-extern OCTAVE_API ComplexMatrix airy (const ComplexMatrix& z, bool deriv, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::biry' instead")
-extern OCTAVE_API ComplexMatrix biry (const ComplexMatrix& z, bool deriv, bool scaled, Array<octave_idx_type>& ierr);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::airy' instead")
-extern OCTAVE_API ComplexNDArray airy (const ComplexNDArray& z, bool deriv, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::biry' instead")
-extern OCTAVE_API ComplexNDArray biry (const ComplexNDArray& z, bool deriv, bool scaled, Array<octave_idx_type>& ierr);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::airy' instead")
-inline FloatComplex airy (const FloatComplex& z, bool deriv, bool scaled, octave_idx_type& ierr) { return octave::math::airy (z, deriv, scaled, ierr); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::biry' instead")
-inline FloatComplex biry (const FloatComplex& z, bool deriv, bool scaled, octave_idx_type& ierr) { return octave::math::biry (z, deriv, scaled, ierr); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::airy' instead")
-extern OCTAVE_API FloatComplexMatrix airy (const FloatComplexMatrix& z, bool deriv, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::biry' instead")
-extern OCTAVE_API FloatComplexMatrix biry (const FloatComplexMatrix& z, bool deriv, bool scaled, Array<octave_idx_type>& ierr);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::airy' instead")
-extern OCTAVE_API FloatComplexNDArray airy (const FloatComplexNDArray& z, bool deriv, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::biry' instead")
-extern OCTAVE_API FloatComplexNDArray biry (const FloatComplexNDArray& z, bool deriv, bool scaled, Array<octave_idx_type>& ierr);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::gammainc' instead")
-inline double gammainc (double x, double a, bool& err) { return octave::math::gammainc (x, a, err); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::gammainc' instead")
-inline double gammainc (double x, double a) { return octave::math::gammainc (x, a); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::gammainc' instead")
-extern OCTAVE_API Matrix gammainc (double x, const Matrix& a);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::gammainc' instead")
-extern OCTAVE_API Matrix gammainc (const Matrix& x, double a);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::gammainc' instead")
-extern OCTAVE_API Matrix gammainc (const Matrix& x, const Matrix& a);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::gammainc' instead")
-extern OCTAVE_API NDArray gammainc (double x, const NDArray& a);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::gammainc' instead")
-extern OCTAVE_API NDArray gammainc (const NDArray& x, double a);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log1p' instead")
-extern OCTAVE_API NDArray gammainc (const NDArray& x, const NDArray& a);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::gammainc' instead")
-inline float gammainc (float x, float a, bool& err) { return octave::math::gammainc (x, a, err); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::gammainc' instead")
-inline float gammainc (float x, float a) { return octave::math::gammainc (x, a); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log1p' instead")
-extern OCTAVE_API FloatMatrix gammainc (float x, const FloatMatrix& a);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log1p' instead")
-extern OCTAVE_API FloatMatrix gammainc (const FloatMatrix& x, float a);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log1p' instead")
-extern OCTAVE_API FloatMatrix gammainc (const FloatMatrix& x, const FloatMatrix& a);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log1p' instead")
-extern OCTAVE_API FloatNDArray gammainc (float x, const FloatNDArray& a);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log1p' instead")
-extern OCTAVE_API FloatNDArray gammainc (const FloatNDArray& x, float a);
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log1p' instead")
-extern OCTAVE_API FloatNDArray gammainc (const FloatNDArray& x, const FloatNDArray& a);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log1p' instead")
-inline Complex rc_log1p (double x) { return octave::math::rc_log1p (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log1p' instead")
-inline FloatComplex rc_log1p (float x) { return octave::math::rc_log1p (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfinv' instead")
-inline double erfinv (double x) { return octave::math::erfinv (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfinv' instead")
-inline float erfinv (float x) { return octave::math::erfinv (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfcinv' instead")
-inline double erfcinv (double x) { return octave::math::erfcinv (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfcinv' instead")
-inline float erfcinv (float x) { return octave::math::erfcinv (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfcx' instead")
-inline float erfcx (float x) { return octave::math::erfcx (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfcx' instead")
-inline double erfcx (double x) { return octave::math::erfcx (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfcx' instead")
-inline Complex erfcx (const Complex& x) { return octave::math::erfcx (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfcx' instead")
-inline FloatComplex erfcx (const FloatComplex& x) { return octave::math::erfcx (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfi' instead")
-inline float erfi (float x) { return octave::math::erfi (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfi' instead")
-inline double erfi (double x) { return octave::math::erfi (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfi' instead")
-inline Complex erfi (const Complex& x) { return octave::math::erfi (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfi' instead")
-inline FloatComplex erfi (const FloatComplex& x) { return octave::math::erfi (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::dawson' instead")
-inline float dawson (float x) { return octave::math::dawson (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::dawson' instead")
-inline double dawson (double x) { return octave::math::dawson (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::dawson' instead")
-inline Complex dawson (const Complex& x) { return octave::math::dawson (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::dawson' instead")
-inline FloatComplex dawson (const FloatComplex& x) { return octave::math::dawson (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::ellipj' instead")
-inline void ellipj (double u, double m, double& sn, double& cn, double& dn, double& err) { octave::math::ellipj (u, m, sn, cn, dn, err); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::ellipj' instead")
-inline void ellipj (const Complex& u, double m, Complex& sn, Complex& cn, Complex& dn, double& err) { octave::math::ellipj (u, m, sn, cn, dn, err); }
-
-//! Digamma function.
-//!
-//! Only defined for double and float.
-template <typename T>
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::psi' instead")
-T
-psi (T z);
-
-template <>
-inline double
-psi (double z)
-{
-  return octave::math::psi (z);
-}
-
-template <>
-inline float
-psi (float z)
-{
-  return octave::math::psi (z);
-}
-
-//! Digamma function for complex input.
-//!
-//! Only defined for double and float.
-template <typename T>
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::psi' instead")
-std::complex<T>
-psi (const std::complex<T>& z);
-
-template <>
-inline std::complex<double>
-psi (const std::complex<double>& z)
-{
-  return octave::math::psi (z);
-}
-
-template <>
-inline std::complex<float>
-psi (const std::complex<float>& z)
-{
-  return octave::math::psi (z);
-}
-
-//! Polygamma function.
-//!
-//! Only defined for double and float.
-//! @param n must be non-negative.  If zero, the digamma function is computed.
-//! @param z must be real and non-negative.
-template <typename T>
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::psi' instead")
-T
-psi (octave_idx_type n, T z);
-
-template<>
-inline double
-psi (octave_idx_type n, double z)
-{
-  return octave::math::psi (n, z);
-}
-
-template<>
-inline float
-psi (octave_idx_type n, float z)
-{
-  return octave::math::psi (n, z);
-}
-
 #endif
-
-#endif
diff --git a/liboctave/system/dir-ops.h b/liboctave/system/dir-ops.h
--- a/liboctave/system/dir-ops.h
+++ b/liboctave/system/dir-ops.h
@@ -92,16 +92,9 @@ namespace octave
       bool fail;
 
       // If a failure occurs, this contains the system error text.
       std::string errmsg;
     };
   }
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::dir_entry' instead")
-typedef octave::sys::dir_entry dir_entry;
-
 #endif
-
-#endif
diff --git a/liboctave/system/file-ops.h b/liboctave/system/file-ops.h
--- a/liboctave/system/file-ops.h
+++ b/liboctave/system/file-ops.h
@@ -176,177 +176,9 @@ namespace octave
     extern OCTAVE_API std::string
     canonicalize_file_name (const std::string&);
 
     extern OCTAVE_API std::string
     canonicalize_file_name (const std::string&, std::string&);
   }
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::mkdir' instead")
-inline int
-octave_mkdir (const std::string& nm, mode_t md)
-{
-  return octave::sys::mkdir (nm, md);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::mkdir' instead")
-inline int
-octave_mkdir (const std::string& nm, mode_t md, std::string& msg)
-{
-  return octave::sys::mkdir (nm, md, msg);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::mkfifo' instead")
-inline int
-octave_mkfifo (const std::string& nm, mode_t md)
-{
-  return octave::sys::mkfifo (nm, md);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::mkfifo' instead")
-inline int
-octave_mkfifo (const std::string& nm, mode_t md, std::string& msg)
-{
-  return octave::sys::mkfifo (nm, md, msg);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::link' instead")
-inline int
-octave_link (const std::string& old_name, const std::string& new_name)
-{
-  return octave::sys::link (old_name, new_name);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::link' instead")
-inline int
-octave_link (const std::string& old_name, const std::string& new_name,
-             std::string& msg)
-{
-  return octave::sys::link (old_name, new_name, msg);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::symlink' instead")
-inline int
-octave_symlink (const std::string& old_name, const std::string& new_name)
-{
-  return octave::sys::symlink (old_name, new_name);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::symlink' instead")
-inline int
-octave_symlink (const std::string& old_name, const std::string& new_name,
-                std::string& msg)
-{
-  return octave::sys::symlink (old_name, new_name, msg);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::readlink' instead")
-inline int
-octave_readlink (const std::string& path, std::string& result)
-{
-  return octave::sys::readlink (path, result);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::readlink' instead")
-inline int
-octave_readlink (const std::string& path, std::string& result, std::string& msg)
-{
-  return octave::sys::readlink (path, result, msg);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::rename' instead")
-inline int
-octave_rename (const std::string& from, const std::string& to)
-{
-  return octave::sys::rename (from, to);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::rename' instead")
-inline int
-octave_rename (const std::string& from, const std::string& to, std::string& msg)
-{
-  return octave::sys::rename (from, to, msg);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::rmdir' instead")
-inline int
-octave_rmdir (const std::string& nm)
-{
-  return octave::sys::rmdir (nm);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::rmdir' instead")
-inline int
-octave_rmdir (const std::string& nm, std::string& msg)
-{
-  return octave::sys::rmdir (nm, msg);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::recursive_rmdir' instead")
-inline int
-octave_recursive_rmdir (const std::string& nm)
-{
-  return octave::sys::recursive_rmdir (nm);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::recursive_rmdir' instead")
-inline int
-octave_recursive_rmdir (const std::string& nm, std::string& msg)
-{
-  return octave::sys::recursive_rmdir (nm, msg);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::umask' instead")
-inline int
-octave_umask (mode_t md)
-{
-  return octave::sys::umask (md);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::unlink' instead")
-inline int
-octave_unlink (const std::string& nm)
-{
-  return octave::sys::unlink (nm);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::unlink' instead")
-inline int
-octave_unlink (const std::string& nm, std::string& msg)
-{
-  return octave::sys::unlink (nm, msg);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::tempnam' instead")
-inline std::string
-octave_tempnam (const std::string& dir, const std::string& pfx)
-{
-  return octave::sys::tempnam (dir, pfx);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::tempnam' instead")
-inline std::string
-octave_tempnam (const std::string& dir, const std::string& pfx,
-                std::string& msg)
-{
-  return octave::sys::tempnam (dir, pfx, msg);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::canonicalize_file_name' instead")
-inline std::string
-octave_canonicalize_file_name (const std::string& nm)
-{
-  return octave::sys::canonicalize_file_name (nm);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::canonicalize_file_name' instead")
-inline std::string
-octave_canonicalize_file_name (const std::string& nm, std::string& msg)
-{
-  return octave::sys::canonicalize_file_name (nm, msg);
-}
-
 #endif
-
-#endif
diff --git a/liboctave/system/file-stat.h b/liboctave/system/file-stat.h
--- a/liboctave/system/file-stat.h
+++ b/liboctave/system/file-stat.h
@@ -317,22 +317,9 @@ namespace octave
       // Open file descriptor.
       int fid;
 
       void update_internal (bool force = false);
     };
   }
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::base_file_stat' instead")
-typedef octave::sys::base_file_stat base_file_stat;
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::file_stat' instead")
-typedef octave::sys::file_stat file_stat;
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::file_fstat' instead")
-typedef octave::sys::file_fstat file_fstat;
-
 #endif
-
-#endif
diff --git a/liboctave/system/lo-sysdep.h b/liboctave/system/lo-sysdep.h
--- a/liboctave/system/lo-sysdep.h
+++ b/liboctave/system/lo-sysdep.h
@@ -38,19 +38,9 @@ namespace octave
   namespace sys
   {
     extern std::string getcwd (void);
 
     extern int chdir (const std::string&);
   }
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::getcwd' instead")
-const auto octave_getcwd = octave::sys::getcwd;
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::chdir' instead")
-const auto octave_chdir = octave::sys::chdir;
-
 #endif
-
-#endif
diff --git a/liboctave/system/oct-env.h b/liboctave/system/oct-env.h
--- a/liboctave/system/oct-env.h
+++ b/liboctave/system/oct-env.h
@@ -145,16 +145,9 @@ namespace octave
 
       mutable std::string user_name;
 
       mutable std::string host_name;
     };
   }
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::env' instead")
-typedef octave::sys::env octave_env;
-
 #endif
-
-#endif
diff --git a/liboctave/system/oct-group.h b/liboctave/system/oct-group.h
--- a/liboctave/system/oct-group.h
+++ b/liboctave/system/oct-group.h
@@ -110,16 +110,9 @@ namespace octave
 
       // This is how we will create an group object from a pointer
       // to a struct group.
       group (void *p, std::string& msg);
     };
   }
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::group' instead")
-typedef octave::sys::group octave_group;
-
 #endif
-
-#endif
diff --git a/liboctave/system/oct-passwd.h b/liboctave/system/oct-passwd.h
--- a/liboctave/system/oct-passwd.h
+++ b/liboctave/system/oct-passwd.h
@@ -130,16 +130,9 @@ namespace octave
 
       // This is how we will create a password object from a pointer
       // to a struct passwd.
       password (void *p, std::string& msg);
     };
   }
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::password' instead")
-typedef octave::sys::password octave_passwd;
-
 #endif
-
-#endif
diff --git a/liboctave/system/oct-syscalls.h b/liboctave/system/oct-syscalls.h
--- a/liboctave/system/oct-syscalls.h
+++ b/liboctave/system/oct-syscalls.h
@@ -98,38 +98,9 @@ namespace octave
     popen2 (const std::string&, const string_vector&, bool, int *,
             std::string&);
 
     extern OCTAVE_API int fcntl (int, int, long);
     extern OCTAVE_API int fcntl (int, int, long, std::string&);
   }
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::popen2' instead")
-inline pid_t
-octave_popen2 (const std::string& cmd, const string_vector& args,
-               bool sync_mode, int *filedes)
-{
-  return octave::sys::popen2 (cmd, args, sync_mode, filedes);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::popen2' instead")
-inline pid_t
-popen2 (const std::string& cmd, const string_vector& args,
-        bool sync_mode, int *filedes, std::string& msg)
-{
-  return octave::sys::popen2 (cmd, args, sync_mode, filedes, msg);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::popen2' instead")
-inline pid_t
-popen2 (const std::string& cmd, const string_vector& args,
-        bool sync_mode, int *filedes, std::string& msg,
-        bool &/*interactive*/)
-{
-  return octave::sys::popen2 (cmd, args, sync_mode, filedes, msg);
-}
-
 #endif
-
-#endif
diff --git a/liboctave/system/oct-time.h b/liboctave/system/oct-time.h
--- a/liboctave/system/oct-time.h
+++ b/liboctave/system/oct-time.h
@@ -531,28 +531,9 @@ namespace octave
       long m_msgrcv;
       long m_nsignals;
       long m_nvcsw;
       long m_nivcsw;
     };
   }
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::time' instead")
-typedef octave::sys::time octave_time;
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::base_tm' instead")
-typedef octave::sys::base_tm octave_base_tm;
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::localtime' instead")
-typedef octave::sys::localtime octave_localtime;
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::gmtime' instead")
-typedef octave::sys::gmtime octave_gmtime;
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::strptime' instead")
-typedef octave::sys::strptime octave_strptime;
-
 #endif
-
-#endif
diff --git a/liboctave/system/oct-uname.h b/liboctave/system/oct-uname.h
--- a/liboctave/system/oct-uname.h
+++ b/liboctave/system/oct-uname.h
@@ -89,16 +89,9 @@ namespace octave
       std::string msg;
       int err;
 
       void init (void);
     };
   }
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::uname' instead")
-typedef octave::sys::uname octave_uname;
-
 #endif
-
-#endif
diff --git a/liboctave/util/cmd-edit.h b/liboctave/util/cmd-edit.h
--- a/liboctave/util/cmd-edit.h
+++ b/liboctave/util/cmd-edit.h
@@ -366,16 +366,9 @@ namespace octave
     int command_number;
 
     bool interrupted;
 
     std::string initial_input;
   };
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::command_editor' instead")
-typedef octave::command_editor command_editor;
-
 #endif
-
-#endif
diff --git a/liboctave/util/cmd-hist.h b/liboctave/util/cmd-hist.h
--- a/liboctave/util/cmd-hist.h
+++ b/liboctave/util/cmd-hist.h
@@ -228,16 +228,9 @@ namespace octave
     // The default history file.
     std::string xfile;
 
     // The number of lines of history to save.
     int xsize;
   };
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::command_history' instead")
-typedef octave::command_history command_history;
-
 #endif
-
-#endif
diff --git a/liboctave/util/lo-array-errwarn.h b/liboctave/util/lo-array-errwarn.h
--- a/liboctave/util/lo-array-errwarn.h
+++ b/liboctave/util/lo-array-errwarn.h
@@ -152,116 +152,9 @@ namespace octave
 
   OCTAVE_NORETURN OCTAVE_API extern void
   err_invalid_resize (void);
 
   OCTAVE_API extern void
   warn_singular_matrix (double rcond = 0.0);
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_nan_to_logical_conversion' instead")
-OCTAVE_NORETURN inline void
-err_nan_to_logical_conversion (void)
-{
-  octave::err_nan_to_logical_conversion ();
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_nan_to_character_conversion' instead")
-OCTAVE_NORETURN inline void
-err_nan_to_character_conversion (void)
-{
-  octave::err_nan_to_character_conversion ();
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_nonconformant' instead")
-OCTAVE_NORETURN inline void
-err_nonconformant (const char *op, octave_idx_type op1_len,
-                   octave_idx_type op2_len)
-{
-  octave::err_nonconformant (op, op1_len, op2_len);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_nonconformant' instead")
-OCTAVE_NORETURN inline void
-err_nonconformant (const char *op,
-                   octave_idx_type op1_nr, octave_idx_type op1_nc,
-                   octave_idx_type op2_nr, octave_idx_type op2_nc)
-{
-  octave::err_nonconformant (op, op1_nr, op1_nc, op2_nr, op2_nc);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_nonconformant' instead")
-OCTAVE_NORETURN inline void
-err_nonconformant (const char *op,
-                   const dim_vector& op1_dims, const dim_vector& op2_dims)
-{
-  octave::err_nonconformant (op, op1_dims, op2_dims);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_index_out_of_range' instead")
-OCTAVE_NORETURN inline void
-err_index_out_of_range (int nd, int dim, octave_idx_type iext,
-                        octave_idx_type ext, const dim_vector& d)
-{
-  octave::err_index_out_of_range (nd, dim, iext, ext, d);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_index_out_of_range' instead")
-OCTAVE_NORETURN inline void
-err_index_out_of_range (int nd, int dim, octave_idx_type iext,
-                        octave_idx_type ext)
-{
-  octave::err_index_out_of_range (nd, dim, iext, ext);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_del_index_out_of_range' instead")
-OCTAVE_NORETURN inline void
-err_del_index_out_of_range (bool is1d, octave_idx_type iext,
-                            octave_idx_type ext)
-{
-  octave::err_del_index_out_of_range (is1d, iext, ext);
-}
-
-OCTAVE_NORETURN inline void
-err_invalid_index (double n, octave_idx_type nd = 0,
-                   octave_idx_type dim = 0,
-                   const std::string& var = "")
-{
-  octave::err_invalid_index (n, nd, dim, var);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_invalid_index' instead")
-OCTAVE_NORETURN inline void
-err_invalid_index (octave_idx_type n, octave_idx_type nd = 0,
-                   octave_idx_type dim = 0,
-                   const std::string& var = "")
-{
-  octave::err_invalid_index (n, nd, dim, var);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_invalid_index' instead")
-OCTAVE_NORETURN inline void
-err_invalid_index (const std::string& idx, octave_idx_type nd = 0,
-                   octave_idx_type dim = 0,
-                   const std::string& var = "")
-{
-  octave::err_invalid_index (idx, nd, dim, var);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_invalid_resize' instead")
-OCTAVE_NORETURN inline void
-err_invalid_resize (void)
-{
-  octave::err_invalid_resize ();
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::warn_singular_matrix' instead")
-inline void
-warn_singular_matrix (double rcond = 0.0)
-{
-  return octave::warn_singular_matrix (rcond);
-}
-
 #endif
-
-#endif
diff --git a/liboctave/util/lo-array-gripes.cc b/liboctave/util/lo-array-gripes.cc
deleted file mode 100644
--- a/liboctave/util/lo-array-gripes.cc
+++ /dev/null
@@ -1,298 +0,0 @@
-/*
-
-Copyright (C) 2003-2018 John W. Eaton
-Copyright (C) 2009 VZLU Prague
-
-This file is part of Octave.
-
-Octave is free software: you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-Octave is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<https://www.gnu.org/licenses/>.
-
-*/
-
-// FIXME: All gripe_XXX functions deprecated in 4.2.  Remove file in 4.6
-
-#if defined (HAVE_CONFIG_H)
-#  include "config.h"
-#endif
-
-#include <sstream>
-
-#include "lo-array-gripes.h"
-#include "lo-error.h"
-
-// Text constants used to shorten code below.
-static const char *error_id_nonconformant_args = "Octave:nonconformant-args";
-
-static const char *error_id_index_out_of_bounds = "Octave:index-out-of-bounds";
-
-static const char *error_id_invalid_index = "Octave:invalid-index";
-
-static const char *warning_id_nearly_singular_matrix =
-  "Octave:nearly-singular-matrix";
-
-static const char *warning_id_singular_matrix = "Octave:singular-matrix";
-
-void
-gripe_nan_to_logical_conversion (void)
-{
-  (*current_liboctave_error_handler)
-    ("invalid conversion from NaN to logical");
-}
-
-void
-gripe_nan_to_character_conversion (void)
-{
-  (*current_liboctave_error_handler)
-    ("invalid conversion from NaN to character");
-}
-
-void
-gripe_nonconformant (const char *op, octave_idx_type op1_len,
-                     octave_idx_type op2_len)
-{
-  const char *err_id = error_id_nonconformant_args;
-
-  (*current_liboctave_error_with_id_handler)
-    (err_id, "%s: nonconformant arguments (op1 len: %d, op2 len: %d)",
-     op, op1_len, op2_len);
-}
-
-void
-gripe_nonconformant (const char *op,
-                     octave_idx_type op1_nr, octave_idx_type op1_nc,
-                     octave_idx_type op2_nr, octave_idx_type op2_nc)
-{
-  const char *err_id = error_id_nonconformant_args;
-
-  (*current_liboctave_error_with_id_handler)
-    (err_id, "%s: nonconformant arguments (op1 is %dx%d, op2 is %dx%d)",
-     op, op1_nr, op1_nc, op2_nr, op2_nc);
-}
-
-void
-gripe_nonconformant (const char *op, const dim_vector& op1_dims,
-                     const dim_vector& op2_dims)
-{
-  const char *err_id = error_id_nonconformant_args;
-
-  std::string op1_dims_str = op1_dims.str ();
-  std::string op2_dims_str = op2_dims.str ();
-
-  (*current_liboctave_error_with_id_handler)
-    (err_id, "%s: nonconformant arguments (op1 is %s, op2 is %s)",
-     op, op1_dims_str.c_str (), op2_dims_str.c_str ());
-}
-
-void
-gripe_del_index_out_of_range (bool is1d, octave_idx_type idx,
-                              octave_idx_type ext)
-{
-  const char *err_id = error_id_index_out_of_bounds;
-
-  (*current_liboctave_error_with_id_handler)
-    (err_id, "A(%s) = []: index out of bounds: value %d out of bound %d",
-     is1d ? "I" : "..,I,..", idx, ext);
-}
-
-namespace octave
-{
-  class invalid_index : public index_exception
-  {
-  public:
-
-    invalid_index (const std::string& value, octave_idx_type ndim,
-                   octave_idx_type dimen)
-      : index_exception (value, ndim, dimen)
-    { }
-
-    std::string details (void) const
-    {
-#if defined (OCTAVE_ENABLE_64)
-      return "subscripts must be either integers 1 to (2^63)-1 or logicals";
-#else
-      return "subscripts must be either integers 1 to (2^31)-1 or logicals";
-#endif
-    }
-
-    // ID of error to throw
-    const char * err_id (void) const
-    {
-      return error_id_invalid_index;
-    }
-  };
-}
-
-// Complain if an index is negative, fractional, or too big.
-
-void
-gripe_invalid_index (const std::string& idx, octave_idx_type nd,
-                     octave_idx_type dim, const std::string&)
-{
-  octave::invalid_index e (idx, nd, dim);
-
-  throw e;
-}
-
-void
-gripe_invalid_index (octave_idx_type n, octave_idx_type nd,
-                     octave_idx_type dim, const std::string& var)
-{
-  std::ostringstream buf;
-  buf << n + 1;
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic push
-#  pragma GCC diagnostic ignored "-Wdeprecated-declarations"
-#endif
-
-  gripe_invalid_index (buf.str (), nd, dim, var);
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic pop
-#endif
-}
-
-void
-gripe_invalid_index (double n, octave_idx_type nd, octave_idx_type dim,
-                     const std::string& var)
-{
-  std::ostringstream buf;
-  buf << n + 1;
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic push
-#  pragma GCC diagnostic ignored "-Wdeprecated-declarations"
-#endif
-
-  gripe_invalid_index (buf.str (), nd, dim, var);
-
-#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
-#  pragma GCC diagnostic pop
-#endif
-}
-
-namespace octave
-{
-  // Gripe and exception for read access beyond the bounds of an array.
-
-  class out_of_range : public index_exception
-  {
-  public:
-
-    out_of_range (const std::string& value, octave_idx_type nd_in,
-                  octave_idx_type dim_in)
-      : index_exception (value, nd_in, dim_in), extent (0)
-    { }
-
-    std::string details (void) const
-    {
-      std::string expl;
-
-      if (nd >= size.ndims ())   // if not an index slice
-        {
-          if (var != "")
-            expl = "but " + var + " has size ";
-          else
-            expl = "but object has size ";
-
-          expl = expl + size.str ('x');
-        }
-      else
-        {
-          std::ostringstream buf;
-          buf << extent;
-          expl = "out of bound " + buf.str ();
-        }
-
-      return expl;
-    }
-
-    // ID of error to throw.
-    const char * err_id (void) const
-    {
-      return error_id_index_out_of_bounds;
-    }
-
-    void set_size (const dim_vector& size_in) { size = size_in; }
-
-    void set_extent (octave_idx_type ext) { extent = ext; }
-
-  private:
-
-    // Dimension of object being accessed.
-    dim_vector size;
-
-    // Length of dimension being accessed.
-    octave_idx_type extent;
-  };
-}
-
-// Complain of an index that is out of range, but we don't know matrix size
-void
-gripe_index_out_of_range (int nd, int dim, octave_idx_type idx,
-                          octave_idx_type ext)
-{
-  std::ostringstream buf;
-  buf << idx;
-  octave::out_of_range e (buf.str (), nd, dim);
-
-  e.set_extent (ext);
-  // ??? Make details method give extent not size.
-  e.set_size (dim_vector (1, 1, 1, 1, 1, 1,1));
-
-  throw e;
-}
-
-// Complain of an index that is out of range
-void
-gripe_index_out_of_range (int nd, int dim, octave_idx_type idx,
-                          octave_idx_type ext, const dim_vector& d)
-{
-  std::ostringstream buf;
-  buf << idx;
-  octave::out_of_range e (buf.str (), nd, dim);
-
-  e.set_extent (ext);
-  e.set_size (d);
-
-  throw e;
-}
-
-void
-gripe_invalid_resize (void)
-{
-  (*current_liboctave_error_with_id_handler)
-    ("Octave:invalid-resize",
-     "Invalid resizing operation or ambiguous assignment to an out-of-bounds array element");
-}
-
-void
-gripe_singular_matrix (double rcond)
-{
-  if (rcond == 0.0)
-    {
-      (*current_liboctave_warning_with_id_handler)
-        (warning_id_singular_matrix,
-         "matrix singular to machine precision");
-    }
-  else
-    {
-      (*current_liboctave_warning_with_id_handler)
-        (warning_id_nearly_singular_matrix,
-         "matrix singular to machine precision, rcond = %g", rcond);
-    }
-}
-
-/* Tests in test/index.tst */
diff --git a/liboctave/util/lo-array-gripes.h b/liboctave/util/lo-array-gripes.h
deleted file mode 100644
--- a/liboctave/util/lo-array-gripes.h
+++ /dev/null
@@ -1,101 +0,0 @@
-/*
-
-Copyright (C) 2000-2018 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software: you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-Octave is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<https://www.gnu.org/licenses/>.
-
-*/
-
-// FIXME: All gripe_XXX functions deprecated in 4.2.  Remove file in 4.6
-
-#if ! defined (octave_lo_array_gripes_h)
-#define octave_lo_array_gripes_h 1
-
-#include "octave-config.h"
-
-#include "lo-array-errwarn.h"
-#include "dim-vector.h"
-#include "quit.h"
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_nan_to_logical_conversion' instead")
-OCTAVE_NORETURN OCTAVE_API extern void
-gripe_nan_to_logical_conversion (void);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_nan_to_character_conversion' instead")
-OCTAVE_NORETURN OCTAVE_API extern void
-gripe_nan_to_character_conversion (void);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_nonconformant' instead")
-OCTAVE_NORETURN OCTAVE_API extern void
-gripe_nonconformant (const char *op,
-                     octave_idx_type op1_len,
-                     octave_idx_type op2_len);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_nonconformant' instead")
-OCTAVE_NORETURN OCTAVE_API extern void
-gripe_nonconformant (const char *op,
-                     octave_idx_type op1_nr, octave_idx_type op1_nc,
-                     octave_idx_type op2_nr, octave_idx_type op2_nc);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_nonconformant' instead")
-OCTAVE_NORETURN OCTAVE_API extern void
-gripe_nonconformant (const char *op, const dim_vector& op1_dims,
-                     const dim_vector& op2_dims);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_index_out_of_range' instead")
-OCTAVE_NORETURN OCTAVE_API extern void
-gripe_index_out_of_range (int nd, int dim,
-                          octave_idx_type iext, octave_idx_type ext,
-                          const dim_vector& d);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_index_out_of_range' instead")
-OCTAVE_NORETURN OCTAVE_API extern void
-gripe_index_out_of_range (int nd, int dim,
-                          octave_idx_type iext, octave_idx_type ext);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_del_index_out_of_range' instead")
-OCTAVE_NORETURN OCTAVE_API extern void
-gripe_del_index_out_of_range (bool is1d, octave_idx_type iext,
-                              octave_idx_type ext);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_invalid_index' instead")
-OCTAVE_NORETURN OCTAVE_API extern void
-gripe_invalid_index (double, octave_idx_type nd = 0,
-                     octave_idx_type dim = 0,
-                     const std::string& var = "");
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_invalid_index' instead")
-OCTAVE_NORETURN OCTAVE_API extern void
-gripe_invalid_index (octave_idx_type n, octave_idx_type nd = 0,
-                     octave_idx_type dim = 0,
-                     const std::string& var = "");
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_invalid_index' instead")
-OCTAVE_NORETURN OCTAVE_API extern void
-gripe_invalid_index (const std::string& idx, octave_idx_type nd = 0,
-                     octave_idx_type dim = 0,
-                     const std::string& var = "");
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_invalid_resize' instead")
-OCTAVE_NORETURN OCTAVE_API extern void
-gripe_invalid_resize (void);
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::err_singular_matrix' instead")
-OCTAVE_API extern void
-gripe_singular_matrix (double rcond = 0.0);
-
-#endif
diff --git a/liboctave/util/lo-regexp.h b/liboctave/util/lo-regexp.h
--- a/liboctave/util/lo-regexp.h
+++ b/liboctave/util/lo-regexp.h
@@ -282,57 +282,9 @@ namespace octave
     std::string who;
 
     void free (void);
 
     void compile_internal (void);
   };
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::regexp' instead")
-typedef octave::regexp regexp;
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::regexp::match' instead")
-inline regexp::match_data
-regexp_match (const std::string& pat,
-              const std::string& buffer,
-              const regexp::opts& opt = regexp::opts (),
-              const std::string& who = "regexp")
-{
-  return octave::regexp::match (pat, buffer, opt, who);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::regexp::is_match' instead")
-inline bool
-is_regexp_match (const std::string& pat,
-                 const std::string& buffer,
-                 const regexp::opts& opt = regexp::opts (),
-                 const std::string& who = "regexp")
-{
-  return octave::regexp::is_match (pat, buffer, opt, who);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::regexp::is_match' instead")
-inline Array<bool>
-is_regexp_match (const std::string& pat,
-                 const string_vector& buffer,
-                 const regexp::opts& opt = regexp::opts (),
-                 const std::string& who = "regexp")
-{
-  return octave::regexp::is_match (pat, buffer, opt, who);
-}
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::regexp::replace' instead")
-inline std::string
-regexp_replace (const std::string& pat,
-                const std::string& buffer,
-                const std::string& replacement,
-                const regexp::opts& opt = regexp::opts (),
-                const std::string& who = "regexp")
-{
-  return octave::regexp::replace (pat, buffer, replacement, opt, who);
-}
-
 #endif
-
-#endif
diff --git a/liboctave/util/module.mk b/liboctave/util/module.mk
--- a/liboctave/util/module.mk
+++ b/liboctave/util/module.mk
@@ -5,17 +5,16 @@ UTIL_INC = \
   %reldir%/caseless-str.h \
   %reldir%/cmd-edit.h \
   %reldir%/cmd-hist.h \
   %reldir%/data-conv.h \
   %reldir%/file-info.h \
   %reldir%/functor.h \
   %reldir%/glob-match.h \
   %reldir%/lo-array-errwarn.h \
-  %reldir%/lo-array-gripes.h \
   %reldir%/lo-cutils.h \
   %reldir%/lo-hash.h \
   %reldir%/lo-ieee.h \
   %reldir%/lo-regexp.h \
   %reldir%/lo-traits.h \
   %reldir%/lo-utils.h \
   %reldir%/f77-fcn.h \
   %reldir%/lo-error.h \
@@ -66,17 +65,16 @@ UTIL_C_SRC = \
 UTIL_SRC = \
   %reldir%/cmd-edit.cc \
   %reldir%/cmd-hist.cc \
   %reldir%/data-conv.cc \
   %reldir%/file-info.cc \
   %reldir%/glob-match.cc \
   %reldir%/kpse.cc \
   %reldir%/lo-array-errwarn.cc \
-  %reldir%/lo-array-gripes.cc \
   %reldir%/lo-hash.cc \
   %reldir%/lo-ieee.cc \
   %reldir%/lo-regexp.cc \
   %reldir%/lo-utils.cc \
   %reldir%/quit.cc \
   %reldir%/oct-base64.cc \
   %reldir%/oct-glob.cc \
   %reldir%/oct-inttypes.cc \
diff --git a/liboctave/util/oct-glob.h b/liboctave/util/oct-glob.h
--- a/liboctave/util/oct-glob.h
+++ b/liboctave/util/oct-glob.h
@@ -38,19 +38,9 @@ namespace octave
     extern string_vector
     glob (const string_vector&);
 
     extern string_vector
     windows_glob (const string_vector&);
   }
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::fnmatch' instead")
-const auto octave_fnmatch = octave::sys::fnmatch;
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::sys::glob' instead")
-const auto octave_glob = octave::sys::glob;
-
 #endif
-
-#endif
diff --git a/liboctave/util/oct-inttypes.h b/liboctave/util/oct-inttypes.h
--- a/liboctave/util/oct-inttypes.h
+++ b/liboctave/util/oct-inttypes.h
@@ -54,26 +54,16 @@ namespace octave
   namespace math
   {
     inline long double round (long double x) { return std::roundl (x); }
 
     inline long double isnan (long double x) { return isnan (static_cast<double> (x)); }
   }
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::round' instead")
-inline long double xround (long double x) { return octave::math::round (x); }
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::isnan' instead")
-inline bool xisnan (long double x) { return octave::math::isnan (x); }
-
-#endif
-
 #endif
 
 // FIXME: we define this by our own because some compilers, such as
 // MSVC, do not provide std::abs (int64_t) and std::abs (uint64_t).  In
 // the future, it should go away in favor of std::abs.
 template <typename T>
 inline T octave_int_abs (T x) { return (x >= 0 ? x : -x); }
 
@@ -989,28 +979,16 @@ namespace octave
     bool
     isnan (const octave_int<T>&)
     {
       return false;
     }
   }
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-template <typename T>
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::isnan' instead")
-bool
-xisnan (const octave_int<T>& x)
-{
-  return octave::math::isnan (x);
-}
-
-#endif
-
 // FIXME: can/should any of these be inline?
 
 template <typename T>
 extern OCTAVE_API octave_int<T>
 pow (const octave_int<T>&, const octave_int<T>&);
 
 template <typename T>
 extern OCTAVE_API octave_int<T>
diff --git a/liboctave/util/oct-shlib.h b/liboctave/util/oct-shlib.h
--- a/liboctave/util/oct-shlib.h
+++ b/liboctave/util/oct-shlib.h
@@ -197,16 +197,9 @@ namespace octave
     { return rep->time_loaded (); }
 
   private:
 
     dynlib_rep *rep;
   };
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::dynamic_library' instead")
-typedef octave::dynamic_library octave_shlib;
-
 #endif
-
-#endif
diff --git a/liboctave/util/pathsearch.h b/liboctave/util/pathsearch.h
--- a/liboctave/util/pathsearch.h
+++ b/liboctave/util/pathsearch.h
@@ -98,16 +98,9 @@ namespace octave
 
     // The elements of the list.
     std::list<std::string> m_path_elements;
 
     void init (void);
   };
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::directory_path' instead")
-typedef octave::directory_path dir_path;
-
 #endif
-
-#endif
diff --git a/liboctave/util/quit.cc b/liboctave/util/quit.cc
--- a/liboctave/util/quit.cc
+++ b/liboctave/util/quit.cc
@@ -89,17 +89,17 @@ octave_throw_exit_exception (int exit_st
 {
   octave_exception_state = octave_quit_exception;
 
 #if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
 #  pragma GCC diagnostic push
 #  pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 #endif
 
-  throw octave_exit_exception (exit_status, safe_to_return);
+  throw octave::exit_exception (exit_status, safe_to_return);
 
 #if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
 #  pragma GCC diagnostic pop
 #endif
 }
 
 void
 octave_rethrow_exception (void)
diff --git a/liboctave/util/quit.h b/liboctave/util/quit.h
--- a/liboctave/util/quit.h
+++ b/liboctave/util/quit.h
@@ -116,25 +116,16 @@ namespace octave
   };
 
   class
   interrupt_exception
   {
   };
 }
 
-OCTAVE_DEPRECATED (4.2, "use 'octave::execution_exception' instead")
-typedef octave::execution_exception octave_execution_exception;
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::exit_exception' instead")
-typedef octave::exit_exception octave_exit_exception;
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::interrupt_exception' instead")
-typedef octave::interrupt_exception octave_interrupt_exception;
-
 #endif
 
 enum octave_exception
 {
   octave_no_exception = 0,
   octave_exec_exception = 1,
   octave_alloc_exception = 3,
   octave_quit_exception = 4
diff --git a/liboctave/util/unwind-prot.h b/liboctave/util/unwind-prot.h
--- a/liboctave/util/unwind-prot.h
+++ b/liboctave/util/unwind-prot.h
@@ -124,19 +124,9 @@ namespace octave
             {
               warn_unhandled_exception ();
             }
         }
     }
   };
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::unwind_protect' instead")
-typedef octave::unwind_protect unwind_protect;
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::unwind_protect_safe' instead")
-typedef octave::unwind_protect_safe unwind_protect_safe;
-
 #endif
-
-#endif
diff --git a/liboctave/util/url-transfer.h b/liboctave/util/url-transfer.h
--- a/liboctave/util/url-transfer.h
+++ b/liboctave/util/url-transfer.h
@@ -264,19 +264,9 @@ namespace octave
     }
 
   private:
 
     std::shared_ptr<base_url_transfer> rep;
   };
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::base_url_transfer' instead")
-typedef octave::base_url_transfer base_url_transfer;
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::url_transfer' instead")
-typedef octave::url_transfer url_transfer;
-
 #endif
-
-#endif
