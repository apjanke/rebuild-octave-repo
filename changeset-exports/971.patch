# HG changeset patch
# User jwe
# Date 787245022 0
#      Mon Dec 12 15:10:22 1994 +0000
# Node ID fe71abb4345784cc62d01eb9512ddd4e24e4dd7e
# Parent  9382316a8a017de6c9553f30a69ef3476c395149
[project @ 1994-12-12 15:10:22 by jwe]

diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -104,16 +104,17 @@ static int is_plot_keyword (char *s);
 static int is_keyword (char *s);
 static char *plot_style_token (char *s);
 static symbol_record *lookup_identifier (char *s);
 static void grab_help_text (void);
 static int match_any (char c, char *s);
 static int next_token_is_bin_op (int spc_prev, char *yytext);
 static int next_token_is_postfix_unary_op (int spc_prev, char *yytext);
 static char *strip_trailing_whitespace (char *s);
+static int handle_close_brace (char *yytext);
 static int handle_identifier (char *s, int next_tok_is_eq);
 
 %}
 
 D	[0-9]
 S	[ \t]
 NL	[\n]
 SNL	[ \t\n]
@@ -303,95 +304,29 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 	cant_be_identifier = 1;
 	convert_spaces_to_comma = 1;
 	current_input_column += yyleng;
       }
     return TEXT;
   }
 
 %{
-// It's also a pain in the ass to decide whether to insert a comma
-// after seeing a ']' character...
-//
 // For this and the next two rules, we're looking at ']', and we
-// need to know if the next token is '='.
-//
-// All this so we can handle the bogus syntax 
-//
-//   [x,y]                % an expression by itself
-//   [x,y] = expression   % assignment to a list of identifiers
-//   [x,y] == expression  % test for equality
+// need to know if the next token is `=' or `=='.
 //
 // It would have been so much easier if the delimiters were simply
 // different for the expression on the left hand side of the equals
 // operator.
+//
+// It's also a pain in the ass to decide whether to insert a comma
+// after seeing a ']' character...
 %}
 
 <MATRIX>{SNL}*\]{S}* {
-    fixup_column_count (yytext);
-
-    if (! in_brace_or_paren.empty ())
-      {
-	in_brace_or_paren.pop ();
-	braceflag--;
-      }
-
-    if (braceflag == 0)
-      {
-	if (! defining_func)
-	  promptflag++;
-	BEGIN 0;
-      }
-     
-    int c1 = yyinput ();
-
-    if (c1 == '=')
-      {
-	quote_is_transpose = 0;
-	cant_be_identifier = 0;
-	convert_spaces_to_comma = 1;
-
-	int c2 = yyinput ();
-        unput (c2);
-	unput (c1);
-
-	if (c2 != '=' && maybe_screwed_again)
-	  return SCREW_TWO;
-	else
-	  return ']';
-      }
-    else
-      {
-	unput (c1);
-
-	if (braceflag && user_pref.commas_in_literal_matrix != 2)
-	  {
-	    int c0 = yytext[yyleng-1];
-	    int spc_prev = (c0 == ' ' || c0 == '\t');
-	    int bin_op = next_token_is_bin_op (spc_prev, yytext);
-	    int postfix_un_op = next_token_is_postfix_unary_op
-	      (spc_prev, yytext);
-
-	    int other_op = match_any (c1, ",;\n]");
-
-	    if (! (postfix_un_op || bin_op || other_op
-		   || in_brace_or_paren.empty ())
-		&& in_brace_or_paren.top ()
-		&& convert_spaces_to_comma)
-	      {
-		unput (',');
-		return ']';
-	      }
-	  }
-      }
-
-    quote_is_transpose = 1;
-    cant_be_identifier = 0;
-    convert_spaces_to_comma = 1;
-    return ']';
+  return handle_close_brace (yytext);
   }
 
 %{
 // Commas are element separators in matrix constants.
 %}
 
 <MATRIX>{S}*\,{S}* {
     TOK_RETURN (',');
@@ -585,18 +520,24 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 	do_comma_insert_check ();
 	return QUOTE;
       }
     else
       BEGIN STRING;
   }
 
 %{
-// Colon operator is handled differently if we are in the range part
-// of a plot command.
+// Double quotes always begin strings.
+%}
+
+\"		{ BEGIN DQSTRING; }
+
+%{
+// The colon operator is handled differently if we are in the range
+// part of a plot command.
 %}
 
 ":" {
     if (plotting && (in_plot_range || in_plot_using))
       BIN_OP_RETURN (COLON, 1);
     else
       BIN_OP_RETURN (':', 0);
   }
@@ -624,17 +565,16 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     convert_spaces_to_comma = 1;
     return '\n';
   }
 
 %{
 // Other operators.
 %}
 
-\"		{ BEGIN DQSTRING; }
 ".*"		{ BIN_OP_RETURN (EMUL, 0); }
 "./"		{ BIN_OP_RETURN (EDIV, 0); }
 ".\\"		{ BIN_OP_RETURN (ELEFTDIV, 0); }
 {EPOW}		{ BIN_OP_RETURN (EPOW, 0); }
 ".'"		{ do_comma_insert_check (); BIN_OP_RETURN (TRANSPOSE, 1); }
 "++"		{ do_comma_insert_check (); BIN_OP_RETURN (PLUS_PLUS, 1); }
 "--"		{ do_comma_insert_check (); BIN_OP_RETURN (MINUS_MINUS, 1); }
 "<="		{ BIN_OP_RETURN (EXPR_LE, 0); }
@@ -1468,16 +1408,82 @@ strip_trailing_whitespace (char *s)
 
   t = strchr (retval, '\t');
   if (t)
     *t = '\0';
 
   return retval;
 }
 
+static int
+handle_close_brace (char *yytext)
+{
+  fixup_column_count (yytext);
+
+  if (! in_brace_or_paren.empty ())
+    {
+      in_brace_or_paren.pop ();
+      braceflag--;
+    }
+
+  if (braceflag == 0)
+    {
+      if (! defining_func)
+	promptflag++;
+      BEGIN 0;
+    }
+     
+  int c1 = yyinput ();
+
+  if (c1 == '=')
+    {
+      quote_is_transpose = 0;
+      cant_be_identifier = 0;
+      convert_spaces_to_comma = 1;
+
+      int c2 = yyinput ();
+      unput (c2);
+      unput (c1);
+
+      if (c2 != '=' && maybe_screwed_again)
+	return SCREW_TWO;
+      else
+	return ']';
+    }
+  else
+    {
+      unput (c1);
+
+      if (braceflag && user_pref.commas_in_literal_matrix != 2)
+	{
+	  int c0 = yytext[yyleng-1];
+	  int spc_prev = (c0 == ' ' || c0 == '\t');
+	  int bin_op = next_token_is_bin_op (spc_prev, yytext);
+	  int postfix_un_op = next_token_is_postfix_unary_op
+	    (spc_prev, yytext);
+
+	  int other_op = match_any (c1, ",;\n]");
+
+	  if (! (postfix_un_op || bin_op || other_op
+		 || in_brace_or_paren.empty ())
+	      && in_brace_or_paren.top ()
+	      && convert_spaces_to_comma)
+	    {
+	      unput (',');
+	      return ']';
+	    }
+	}
+    }
+
+  quote_is_transpose = 1;
+  cant_be_identifier = 0;
+  convert_spaces_to_comma = 1;
+  return ']';
+}
+
 // Figure out exactly what kind of token to return when we have seen
 // an identifier.  Handles keywords.
 
 static int
 handle_identifier (char *tok, int next_tok_is_eq)
 {
 // It is almost always an error for an identifier to be followed
 // directly by another identifier.  Special cases are handled below.
