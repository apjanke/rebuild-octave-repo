# HG changeset patch
# User Rik <rik@octave.org>
# Date 1459544169 25200
#      Fri Apr 01 13:56:09 2016 -0700
# Node ID bc9aa534bc29908ef768138c1a9e3ec9accc4965
# Parent  ae4d7dfea337ca2af6216cf72758ef899fb9adf6
maint: Clean up BIST tests so they don't produce warnings.

* data.cc (Fhorzcat): Temporarily disable "num-to-str" warning for BIST tests.

* luinc.cc (__luinc__): Move BIST tests to luinc.m.

* luinc.m: Add BIST tests for luinc.

* regexp.cc (Fregexp): Temporarily disable "regexp-lookbehind-limit" for BIST
tests.

* sqrtm.cc (Fsqrtm): Temporarily disable "sqrtm:SingularMatrix" for BIST tests.

* __eigs__.cc, __init_fltk__.cc, __init_gnuplot__.cc: Add 'assert (1)'
BIST test to mark internal functions as tested.

* ov-range.cc (Fallow_noninteger_range_as_index: Temporarily disable
"deprecated-syntax" for BIST tests.

* quadv.m: Temporarily disable "divide-by-zero" warning for BIST tests.

* imfinfo.m: Temporarily disable "GraphicsMagic-Quantum-Depth" for BIST tests.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -2141,158 +2141,180 @@ new matrices.  For example:\n\
 @seealso{cat, vertcat}\n\
 @end deftypefn")
 {
   return do_cat (args, -2, "horzcat");
 }
 
 /*
 ## Test concatenation with all zero matrices
-%!assert (horzcat ("", 65*ones (1,10)), "AAAAAAAAAA")
-%!assert (horzcat (65*ones (1,10), ""), "AAAAAAAAAA")
+%!test
+%! warning ("off", "Octave:num-to-str", "local");
+%! assert (horzcat ("", 65*ones (1,10)), "AAAAAAAAAA");
+%! assert (horzcat (65*ones (1,10), ""), "AAAAAAAAAA");
 
 %!assert (class (horzcat (int64 (1), int64 (1))), "int64")
 %!assert (class (horzcat (int64 (1), int32 (1))), "int64")
 %!assert (class (horzcat (int64 (1), int16 (1))), "int64")
 %!assert (class (horzcat (int64 (1), int8 (1))), "int64")
 %!assert (class (horzcat (int64 (1), uint64 (1))), "int64")
 %!assert (class (horzcat (int64 (1), uint32 (1))), "int64")
 %!assert (class (horzcat (int64 (1), uint16 (1))), "int64")
 %!assert (class (horzcat (int64 (1), uint8 (1))), "int64")
 %!assert (class (horzcat (int64 (1), single (1))), "int64")
 %!assert (class (horzcat (int64 (1), double (1))), "int64")
 %!assert (class (horzcat (int64 (1), cell (1))), "cell")
 %!assert (class (horzcat (int64 (1), true)), "int64")
-%!assert (class (horzcat (int64 (1), "a")), "char")
+%!test
+%! warning ("off", "Octave:num-to-str", "local");
+%! assert (class (horzcat (int64 (1), "a")), "char");
 
 %!assert (class (horzcat (int32 (1), int64 (1))), "int32")
 %!assert (class (horzcat (int32 (1), int32 (1))), "int32")
 %!assert (class (horzcat (int32 (1), int16 (1))), "int32")
 %!assert (class (horzcat (int32 (1), int8 (1))), "int32")
 %!assert (class (horzcat (int32 (1), uint64 (1))), "int32")
 %!assert (class (horzcat (int32 (1), uint32 (1))), "int32")
 %!assert (class (horzcat (int32 (1), uint16 (1))), "int32")
 %!assert (class (horzcat (int32 (1), uint8 (1))), "int32")
 %!assert (class (horzcat (int32 (1), single (1))), "int32")
 %!assert (class (horzcat (int32 (1), double (1))), "int32")
 %!assert (class (horzcat (int32 (1), cell (1))), "cell")
 %!assert (class (horzcat (int32 (1), true)), "int32")
-%!assert (class (horzcat (int32 (1), "a")), "char")
+%!test
+%! warning ("off", "Octave:num-to-str", "local");
+%! assert (class (horzcat (int32 (1), "a")), "char");
 
 %!assert (class (horzcat (int16 (1), int64 (1))), "int16")
 %!assert (class (horzcat (int16 (1), int32 (1))), "int16")
 %!assert (class (horzcat (int16 (1), int16 (1))), "int16")
 %!assert (class (horzcat (int16 (1), int8 (1))), "int16")
 %!assert (class (horzcat (int16 (1), uint64 (1))), "int16")
 %!assert (class (horzcat (int16 (1), uint32 (1))), "int16")
 %!assert (class (horzcat (int16 (1), uint16 (1))), "int16")
 %!assert (class (horzcat (int16 (1), uint8 (1))), "int16")
 %!assert (class (horzcat (int16 (1), single (1))), "int16")
 %!assert (class (horzcat (int16 (1), double (1))), "int16")
 %!assert (class (horzcat (int16 (1), cell (1))), "cell")
 %!assert (class (horzcat (int16 (1), true)), "int16")
-%!assert (class (horzcat (int16 (1), "a")), "char")
+%!test
+%! warning ("off", "Octave:num-to-str", "local");
+%! assert (class (horzcat (int16 (1), "a")), "char");
 
 %!assert (class (horzcat (int8 (1), int64 (1))), "int8")
 %!assert (class (horzcat (int8 (1), int32 (1))), "int8")
 %!assert (class (horzcat (int8 (1), int16 (1))), "int8")
 %!assert (class (horzcat (int8 (1), int8 (1))), "int8")
 %!assert (class (horzcat (int8 (1), uint64 (1))), "int8")
 %!assert (class (horzcat (int8 (1), uint32 (1))), "int8")
 %!assert (class (horzcat (int8 (1), uint16 (1))), "int8")
 %!assert (class (horzcat (int8 (1), uint8 (1))), "int8")
 %!assert (class (horzcat (int8 (1), single (1))), "int8")
 %!assert (class (horzcat (int8 (1), double (1))), "int8")
 %!assert (class (horzcat (int8 (1), cell (1))), "cell")
 %!assert (class (horzcat (int8 (1), true)), "int8")
-%!assert (class (horzcat (int8 (1), "a")), "char")
+%!test
+%! warning ("off", "Octave:num-to-str", "local");
+%! assert (class (horzcat (int8 (1), "a")), "char");
 
 %!assert (class (horzcat (uint64 (1), int64 (1))), "uint64")
 %!assert (class (horzcat (uint64 (1), int32 (1))), "uint64")
 %!assert (class (horzcat (uint64 (1), int16 (1))), "uint64")
 %!assert (class (horzcat (uint64 (1), int8 (1))), "uint64")
 %!assert (class (horzcat (uint64 (1), uint64 (1))), "uint64")
 %!assert (class (horzcat (uint64 (1), uint32 (1))), "uint64")
 %!assert (class (horzcat (uint64 (1), uint16 (1))), "uint64")
 %!assert (class (horzcat (uint64 (1), uint8 (1))), "uint64")
 %!assert (class (horzcat (uint64 (1), single (1))), "uint64")
 %!assert (class (horzcat (uint64 (1), double (1))), "uint64")
 %!assert (class (horzcat (uint64 (1), cell (1))), "cell")
 %!assert (class (horzcat (uint64 (1), true)), "uint64")
-%!assert (class (horzcat (uint64 (1), "a")), "char")
+%!test
+%! warning ("off", "Octave:num-to-str", "local");
+%! assert (class (horzcat (uint64 (1), "a")), "char");
 
 %!assert (class (horzcat (uint32 (1), int64 (1))), "uint32")
 %!assert (class (horzcat (uint32 (1), int32 (1))), "uint32")
 %!assert (class (horzcat (uint32 (1), int16 (1))), "uint32")
 %!assert (class (horzcat (uint32 (1), int8 (1))), "uint32")
 %!assert (class (horzcat (uint32 (1), uint64 (1))), "uint32")
 %!assert (class (horzcat (uint32 (1), uint32 (1))), "uint32")
 %!assert (class (horzcat (uint32 (1), uint16 (1))), "uint32")
 %!assert (class (horzcat (uint32 (1), uint8 (1))), "uint32")
 %!assert (class (horzcat (uint32 (1), single (1))), "uint32")
 %!assert (class (horzcat (uint32 (1), double (1))), "uint32")
 %!assert (class (horzcat (uint32 (1), cell (1))), "cell")
 %!assert (class (horzcat (uint32 (1), true)), "uint32")
-%!assert (class (horzcat (uint32 (1), "a")), "char")
+%!test
+%! warning ("off", "Octave:num-to-str", "local");
+%! assert (class (horzcat (uint32 (1), "a")), "char");
 
 %!assert (class (horzcat (uint16 (1), int64 (1))), "uint16")
 %!assert (class (horzcat (uint16 (1), int32 (1))), "uint16")
 %!assert (class (horzcat (uint16 (1), int16 (1))), "uint16")
 %!assert (class (horzcat (uint16 (1), int8 (1))), "uint16")
 %!assert (class (horzcat (uint16 (1), uint64 (1))), "uint16")
 %!assert (class (horzcat (uint16 (1), uint32 (1))), "uint16")
 %!assert (class (horzcat (uint16 (1), uint16 (1))), "uint16")
 %!assert (class (horzcat (uint16 (1), uint8 (1))), "uint16")
 %!assert (class (horzcat (uint16 (1), single (1))), "uint16")
 %!assert (class (horzcat (uint16 (1), double (1))), "uint16")
 %!assert (class (horzcat (uint16 (1), cell (1))), "cell")
 %!assert (class (horzcat (uint16 (1), true)), "uint16")
-%!assert (class (horzcat (uint16 (1), "a")), "char")
+%!test
+%! warning ("off", "Octave:num-to-str", "local");
+%! assert (class (horzcat (uint16 (1), "a")), "char");
 
 %!assert (class (horzcat (uint8 (1), int64 (1))), "uint8")
 %!assert (class (horzcat (uint8 (1), int32 (1))), "uint8")
 %!assert (class (horzcat (uint8 (1), int16 (1))), "uint8")
 %!assert (class (horzcat (uint8 (1), int8 (1))), "uint8")
 %!assert (class (horzcat (uint8 (1), uint64 (1))), "uint8")
 %!assert (class (horzcat (uint8 (1), uint32 (1))), "uint8")
 %!assert (class (horzcat (uint8 (1), uint16 (1))), "uint8")
 %!assert (class (horzcat (uint8 (1), uint8 (1))), "uint8")
 %!assert (class (horzcat (uint8 (1), single (1))), "uint8")
 %!assert (class (horzcat (uint8 (1), double (1))), "uint8")
 %!assert (class (horzcat (uint8 (1), cell (1))), "cell")
 %!assert (class (horzcat (uint8 (1), true)), "uint8")
-%!assert (class (horzcat (uint8 (1), "a")), "char")
+%!test
+%! warning ("off", "Octave:num-to-str", "local");
+%! assert (class (horzcat (uint8 (1), "a")), "char");
 
 %!assert (class (horzcat (single (1), int64 (1))), "int64")
 %!assert (class (horzcat (single (1), int32 (1))), "int32")
 %!assert (class (horzcat (single (1), int16 (1))), "int16")
 %!assert (class (horzcat (single (1), int8 (1))), "int8")
 %!assert (class (horzcat (single (1), uint64 (1))), "uint64")
 %!assert (class (horzcat (single (1), uint32 (1))), "uint32")
 %!assert (class (horzcat (single (1), uint16 (1))), "uint16")
 %!assert (class (horzcat (single (1), uint8 (1))), "uint8")
 %!assert (class (horzcat (single (1), single (1))), "single")
 %!assert (class (horzcat (single (1), double (1))), "single")
 %!assert (class (horzcat (single (1), cell (1))), "cell")
 %!assert (class (horzcat (single (1), true)), "single")
-%!assert (class (horzcat (single (1), "a")), "char")
+%!test
+%! warning ("off", "Octave:num-to-str", "local");
+%! assert (class (horzcat (single (1), "a")), "char");
 
 %!assert (class (horzcat (double (1), int64 (1))), "int64")
 %!assert (class (horzcat (double (1), int32 (1))), "int32")
 %!assert (class (horzcat (double (1), int16 (1))), "int16")
 %!assert (class (horzcat (double (1), int8 (1))), "int8")
 %!assert (class (horzcat (double (1), uint64 (1))), "uint64")
 %!assert (class (horzcat (double (1), uint32 (1))), "uint32")
 %!assert (class (horzcat (double (1), uint16 (1))), "uint16")
 %!assert (class (horzcat (double (1), uint8 (1))), "uint8")
 %!assert (class (horzcat (double (1), single (1))), "single")
 %!assert (class (horzcat (double (1), double (1))), "double")
 %!assert (class (horzcat (double (1), cell (1))), "cell")
 %!assert (class (horzcat (double (1), true)), "double")
-%!assert (class (horzcat (double (1), "a")), "char")
+%!test
+%! warning ("off", "Octave:num-to-str", "local");
+%! assert (class (horzcat (double (1), "a")), "char");
 
 %!assert (class (horzcat (cell (1), int64 (1))), "cell")
 %!assert (class (horzcat (cell (1), int32 (1))), "cell")
 %!assert (class (horzcat (cell (1), int16 (1))), "cell")
 %!assert (class (horzcat (cell (1), int8 (1))), "cell")
 %!assert (class (horzcat (cell (1), uint64 (1))), "cell")
 %!assert (class (horzcat (cell (1), uint32 (1))), "cell")
 %!assert (class (horzcat (cell (1), uint16 (1))), "cell")
@@ -2310,31 +2332,35 @@ new matrices.  For example:\n\
 %!assert (class (horzcat (true, uint64 (1))), "uint64")
 %!assert (class (horzcat (true, uint32 (1))), "uint32")
 %!assert (class (horzcat (true, uint16 (1))), "uint16")
 %!assert (class (horzcat (true, uint8 (1))), "uint8")
 %!assert (class (horzcat (true, single (1))), "single")
 %!assert (class (horzcat (true, double (1))), "double")
 %!assert (class (horzcat (true, cell (1))), "cell")
 %!assert (class (horzcat (true, true)), "logical")
-%!assert (class (horzcat (true, "a")), "char")
-
-%!assert (class (horzcat ("a", int64 (1))), "char")
-%!assert (class (horzcat ("a", int32 (1))), "char")
-%!assert (class (horzcat ("a", int16 (1))), "char")
-%!assert (class (horzcat ("a", int8 (1))), "char")
-%!assert (class (horzcat ("a", int64 (1))), "char")
-%!assert (class (horzcat ("a", int32 (1))), "char")
-%!assert (class (horzcat ("a", int16 (1))), "char")
-%!assert (class (horzcat ("a", int8 (1))), "char")
-%!assert (class (horzcat ("a", single (1))), "char")
-%!assert (class (horzcat ("a", double (1))), "char")
-%!assert (class (horzcat ("a", cell (1))), "cell")
-%!assert (class (horzcat ("a", true)), "char")
-%!assert (class (horzcat ("a", "a")), "char")
+%!test
+%! warning ("off", "Octave:num-to-str", "local");
+%! assert (class (horzcat (true, "a")), "char");
+
+%!test
+%! warning ("off", "Octave:num-to-str", "local");
+%! assert (class (horzcat ("a", int64 (1))), "char");
+%! assert (class (horzcat ("a", int32 (1))), "char");
+%! assert (class (horzcat ("a", int16 (1))), "char");
+%! assert (class (horzcat ("a", int8 (1))), "char");
+%! assert (class (horzcat ("a", int64 (1))), "char");
+%! assert (class (horzcat ("a", int32 (1))), "char");
+%! assert (class (horzcat ("a", int16 (1))), "char");
+%! assert (class (horzcat ("a", int8 (1))), "char");
+%! assert (class (horzcat ("a", single (1))), "char");
+%! assert (class (horzcat ("a", double (1))), "char");
+%! assert (class (horzcat ("a", cell (1))), "cell");
+%! assert (class (horzcat ("a", true)), "char");
+%! assert (class (horzcat ("a", "a")), "char");
 
 %!assert (class (horzcat (cell (1), struct ("foo", "bar"))), "cell")
 
 %!error horzcat (struct ("foo", "bar"), cell (1))
 */
 
 DEFUN (vertcat, args, ,
        "-*- texinfo -*-\n\
diff --git a/libinterp/corefcn/luinc.cc b/libinterp/corefcn/luinc.cc
--- a/libinterp/corefcn/luinc.cc
+++ b/libinterp/corefcn/luinc.cc
@@ -327,25 +327,8 @@ values of @var{p} @var{q} as vector valu
           }
           break;
         }
     }
 
   return retval;
 }
 
-/*
-%!testif HAVE_UMFPACK
-%! a = sparse ([1,2,0,0;0,1,2,0;1e-14,0,3,0;0,0,0,1]);
-%! [l,u] = luinc (a, 1e-10);
-%! assert (l*u, sparse ([1,2,0,0;0,1,2,0;0,0,3,0;0,0,0,1]), 1e-10);
-%! opts.droptol = 1e-10;
-%! [l,u] = luinc (a, opts);
-%! assert (l*u, sparse ([1,2,0,0;0,1,2,0;0,0,3,0;0,0,0,1]), 1e-10);
-
-%!testif HAVE_UMFPACK
-%! a = sparse ([1i,2,0,0;0,1,2,0;1e-14,0,3,0;0,0,0,1]);
-%! [l,u] = luinc (a, 1e-10);
-%! assert (l*u, sparse ([1i,2,0,0;0,1,2,0;0,0,3,0;0,0,0,1]), 1e-10);
-%! opts.droptol = 1e-10;
-%! [l,u] = luinc (a, opts);
-%! assert (l*u, sparse ([1i,2,0,0;0,1,2,0;0,0,3,0;0,0,0,1]), 1e-10);
-*/
diff --git a/libinterp/corefcn/regexp.cc b/libinterp/corefcn/regexp.cc
--- a/libinterp/corefcn/regexp.cc
+++ b/libinterp/corefcn/regexp.cc
@@ -1490,13 +1490,15 @@ function.\n\
 %!assert (regexprep ("abc", "(b)", "$1.."), "ab..c")
 
 ## Test cell array arguments
 %!assert (regexprep ("abc", {"b","a"}, "?"), "??c")
 %!assert (regexprep ({"abc","cba"}, "b", "?"), {"a?c","c?a"})
 %!assert (regexprep ({"abc","cba"}, {"b","a"}, {"?","!"}), {"!?c","c?!"})
 
 # Nasty lookbehind expression
-%!assert (regexprep ('x^(-1)+y(-1)+z(-1)=0', '(?<=[a-z]+)\(\-[1-9]*\)', '_minus1'),'x^(-1)+y_minus1+z_minus1=0')
+%!test
+%! warning ("off", "Octave:regexp-lookbehind-limit", "local");
+%! assert (regexprep ('x^(-1)+y(-1)+z(-1)=0', '(?<=[a-z]+)\(\-[1-9]*\)', '_minus1'),'x^(-1)+y_minus1+z_minus1=0');
 
 %!assert (regexprep ("\n", '\n', "X"), "X")
 %!assert (regexprep ("\n", "\n", "X"), "X")
 */
diff --git a/libinterp/corefcn/sqrtm.cc b/libinterp/corefcn/sqrtm.cc
--- a/libinterp/corefcn/sqrtm.cc
+++ b/libinterp/corefcn/sqrtm.cc
@@ -253,16 +253,17 @@ Mathematics, Manchester, England, Januar
   return retval;
 }
 
 /*
 %!assert (sqrtm (2*ones (2)), ones (2), 3*eps)
 
 ## The following two tests are from the reference in the docstring above.
 %!test
+%! warning ("off", "Octave:sqrtm:SingularMatrix", "local");
 %! x = [0 1; 0 0];
 %! assert (any (isnan (sqrtm (x))(:)));
 
 %!test
 %! x = eye (4);  x(2,2) = x(3,3) = 2^-26;  x(1,4) = 1;
 %! z = eye (4);  z(2,2) = z(3,3) = 2^-13;  z(1,4) = 0.5;
 %! [y, err] = sqrtm (x);
 %! assert (y, z);
diff --git a/libinterp/dldfcn/__eigs__.cc b/libinterp/dldfcn/__eigs__.cc
--- a/libinterp/dldfcn/__eigs__.cc
+++ b/libinterp/dldfcn/__eigs__.cc
@@ -556,8 +556,13 @@ Undocumented internal function.\n\
     clear_function (fcn_name);
 
   return retval;
 
 #else
   err_disabled_feature ("eigs", "ARPACK");
 #endif
 }
+
+/*
+## No test needed for internal helper function.
+%!assert (1)
+*/
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -1,11 +1,10 @@
 /*
 
-
 Copyright (C) 2007-2015 Shai Ayal
 Copyright (C) 2014-2015 Andreas Weber
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
@@ -2434,8 +2433,13 @@ Undocumented internal function.\n\
     }
 
   return ovl ();
 
 #else
   err_disabled_feature ("__init_fltk__", "OpenGL and FLTK");
 #endif
 }
+
+/*
+## No test needed for internal helper function.
+%!assert (1)
+*/
diff --git a/libinterp/dldfcn/__init_gnuplot__.cc b/libinterp/dldfcn/__init_gnuplot__.cc
--- a/libinterp/dldfcn/__init_gnuplot__.cc
+++ b/libinterp/dldfcn/__init_gnuplot__.cc
@@ -1,9 +1,9 @@
-/*
+/*, , 
 
 Copyright (C) 2007-2015 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
@@ -222,8 +222,12 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
   retval = have_gnuplot_binary ();
 
   return retval;
 }
 
+/*
+## No test needed for internal helper function.
+%!assert (1)
+*/
diff --git a/libinterp/octave-value/ov-range.cc b/libinterp/octave-value/ov-range.cc
--- a/libinterp/octave-value/ov-range.cc
+++ b/libinterp/octave-value/ov-range.cc
@@ -721,16 +721,17 @@ The original variable value is restored 
     }
 
   return SET_INTERNAL_VARIABLE (allow_noninteger_range_as_index);
 }
 
 /*
 %!test
 %! x = 0:10;
+%! warning ("off", "Octave:deprecated-function", "local");
 %! save = allow_noninteger_range_as_index ();
 %! warn_state = warning ("query", "Octave:noninteger-range-as-index");
 %! unwind_protect
 %!   allow_noninteger_range_as_index (false);
 %!   fail ("x(2.1:5)");
 %!   assert (x(2:5), 1:4);
 %!   allow_noninteger_range_as_index (true);
 %!   warning ("off", "Octave:noninteger-range-as-index");
diff --git a/scripts/deprecated/luinc.m b/scripts/deprecated/luinc.m
--- a/scripts/deprecated/luinc.m
+++ b/scripts/deprecated/luinc.m
@@ -87,8 +87,25 @@ function [L, U, P, Q] = luinc (varargin)
     warning ("Octave:deprecated-function",
              "luinc is obsolete and will be removed from a future version of Octave, please use ilu or ichol instead");
   endif
 
   [L, U, P, Q] = __luinc__ (varargin{:});
 
 endfunction
 
+
+%!testif HAVE_UMFPACK
+%! a = sparse ([1,2,0,0;0,1,2,0;1e-14,0,3,0;0,0,0,1]);
+%! [l,u] = luinc (a, 1e-10);
+%! assert (l*u, sparse ([1,2,0,0;0,1,2,0;0,0,3,0;0,0,0,1]), 1e-10);
+%! opts.droptol = 1e-10;
+%! [l,u] = luinc (a, opts);
+%! assert (l*u, sparse ([1,2,0,0;0,1,2,0;0,0,3,0;0,0,0,1]), 1e-10);
+
+%!testif HAVE_UMFPACK
+%! a = sparse ([1i,2,0,0;0,1,2,0;1e-14,0,3,0;0,0,0,1]);
+%! [l,u] = luinc (a, 1e-10);
+%! assert (l*u, sparse ([1i,2,0,0;0,1,2,0;0,0,3,0;0,0,0,1]), 1e-10);
+%! opts.droptol = 1e-10;
+%! [l,u] = luinc (a, opts);
+%! assert (l*u, sparse ([1i,2,0,0;0,1,2,0;0,0,3,0;0,0,0,1]), 1e-10);
+
diff --git a/scripts/general/quadv.m b/scripts/general/quadv.m
--- a/scripts/general/quadv.m
+++ b/scripts/general/quadv.m
@@ -148,23 +148,27 @@ function [q, nfun, hmin] = simpsonstp (f
 
 endfunction
 
 
 %!assert (quadv (@sin, 0, 2*pi), 0, 1e-5)
 %!assert (quadv (@sin, 0, pi), 2, 1e-5)
 
 ## Test weak singularities at the edge
-%!assert (quadv (@(x) 1 ./ sqrt (x), 0, 1), 2, 1e-5)
+%!test
+%! warning ("off", "Octave:divide-by-zero", "local");
+%! assert (quadv (@(x) 1 ./ sqrt (x), 0, 1), 2, 1e-5);
 
 ## Test vector-valued functions
 %!assert (quadv (@(x) [(sin (x)), (sin (2 * x))], 0, pi), [2, 0], 1e-5)
 
 ## Test matrix-valued functions
-%!assert (quadv (@(x) [ x, x, x; x, 1./sqrt(x), x; x, x, x ], 0, 1),
-%!        [0.5, 0.5, 0.5; 0.5, 2, 0.5; 0.5, 0.5, 0.5], 1e-5)
+%!test
+%! warning ("off", "Octave:divide-by-zero", "local");
+%! assert (quadv (@(x) [ x, x, x; x, 1./sqrt(x), x; x, x, x ], 0, 1),
+%!         [0.5, 0.5, 0.5; 0.5, 2, 0.5; 0.5, 0.5, 0.5], 1e-5);
 
 ## Test input validation
 %!error quadv ()
 %!error quadv (@sin)
 %!error quadv (@sin,1)
 %!error <TOL must be a scalar> quadv (@sin,0,1, ones (2,2))
 
diff --git a/scripts/image/imfinfo.m b/scripts/image/imfinfo.m
--- a/scripts/image/imfinfo.m
+++ b/scripts/image/imfinfo.m
@@ -154,19 +154,20 @@ function info = imfinfo (filename, varar
   elseif (! ischar (filename))
     error ("imfinfo: FILENAME must be a string");
   elseif (nargin > 1 && ! ischar (ext))
     error ("imfinfo: EXT must be a string");
   endif
   info = imageIO ("imfinfo", @__imfinfo__, "info", filename, varargin{:});
 endfunction
 
-## This test is the same as the similar one in imread. imfinfo must check
-## if file exists before calling __imfinfo_. This test confirm this.
+## This test is the same as the similar one in imread.  imfinfo must check
+## if file exists before calling __imfinfo_.  This BIST test confirms this.
 %!testif HAVE_MAGICK
+%! warning ("off", "Octave:GraphicsMagic-Quantum-Depth", "local");
 %! fmt = fmt_ori = imformats ("jpg");
 %! fmt.info = @true;
 %! error_thrown = false;
 %! imformats ("update", "jpg", fmt);
 %! unwind_protect
 %!   try
 %!     imread ("I sure hope this file does not exist.jpg");
 %!   catch
