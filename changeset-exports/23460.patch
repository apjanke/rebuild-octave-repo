# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1493759882 14400
#      Tue May 02 17:18:02 2017 -0400
# Node ID b605146ed2ed4f01d32506c8d00477b06353b060
# Parent  ddcbf10c8c394d382935bad6da9f9ca1a2badad8
do sysdep init and init global vars in app, not interpreter (bug #50880)

* libinterp/corefcn/interpreter.cc (interpreter::interpreter):
Move calls to systep_init and install_defaults from here to
application initialization.

* libgui/octave-gui.cc (gui_application::gui_application):
Call systep_init and install_defaults here.

* libinterp/octave.cc (application::init):
Call systep_init and install_defaults here.

diff --git a/libgui/src/octave-gui.cc b/libgui/src/octave-gui.cc
--- a/libgui/src/octave-gui.cc
+++ b/libgui/src/octave-gui.cc
@@ -39,16 +39,17 @@ along with Octave; see the file COPYING.
 #  include <sys/ioctl.h>
 #endif
 
 #include "lo-utils.h"
 #include "oct-env.h"
 #include "oct-syscalls.h"
 
 #include "builtin-defun-decls.h"
+#include "defaults.h"
 #include "display.h"
 #if defined (HAVE_QT_GRAPHICS)
 #  include "__init_qt__.h"
 #endif
 #include "octave.h"
 #include "sysdep.h"
 #include "unistd-wrappers.h"
 
@@ -66,16 +67,27 @@ static void
 message_handler (QtMsgType, const char *)
 #else
 message_handler (QtMsgType, const QMessageLogContext &, const QString &)
 #endif
 { }
 
 namespace octave
 {
+  gui_application::gui_application (int argc, char **argv)
+    : application (argc, argv), m_argc (argc), m_argv (argv),
+      m_gui_running (false)
+  {
+    // This should probably happen early.
+    sysdep_init ();
+
+    // Need to have global Vfoo variables defined early.
+    install_defaults ();
+  }
+
   bool gui_application::start_gui_p (void) const
   {
     if (m_options.no_window_system ())
       return false;
 
     std::string err_msg;
     if (! display_info::display_available (err_msg))
       {
diff --git a/libgui/src/octave-gui.h b/libgui/src/octave-gui.h
--- a/libgui/src/octave-gui.h
+++ b/libgui/src/octave-gui.h
@@ -26,20 +26,17 @@ along with Octave; see the file COPYING.
 #include "octave.h"
 
 namespace octave
 {
   class OCTGUI_API gui_application : public application
   {
   public:
 
-    gui_application (int argc, char **argv)
-      : application (argc, argv), m_argc (argc), m_argv (argv),
-        m_gui_running (false)
-    { }
+    gui_application (int argc, char **argv);
 
     // No copying, at least not yet.
 
     gui_application (const gui_application&) = delete;
 
     gui_application& operator = (const gui_application&) = delete;
 
     // Should we start the GUI or fall back to the CLI?
diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -371,22 +371,16 @@ namespace octave
     : m_app_context (app_context), m_evaluator (new tree_evaluator (this)),
       m_load_path (), m_interactive (false), m_read_site_files (true),
       m_read_init_files (m_app_context != 0), m_verbose (false),
       m_inhibit_startup_message (false), m_load_path_initialized (false),
       m_history_initialized (false), m_initialized (false)
   {
     current_evaluator = m_evaluator;
 
-    // This should probably happen early.
-    sysdep_init ();
-
-    // Need to have global Vfoo variables defined early.
-    install_defaults ();
-
     // Matlab uses "C" locale for LC_NUMERIC class regardless of local setting
     setlocale (LC_NUMERIC, "C");
     setlocale (LC_TIME, "C");
     octave::sys::env::putenv ("LC_NUMERIC", "C");
     octave::sys::env::putenv ("LC_TIME", "C");
 
     // Initialize the default floating point unit control state.
     octave_set_default_fpucw ();
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -425,16 +425,22 @@ namespace octave
         warning ("--eval \"CODE\" and script file are mutually exclusive options");
 
         octave_print_terse_usage_and_exit ();
       }
 
     m_is_octave_program = ((m_have_script_file || m_have_eval_option_code)
                            && ! m_options.persist ()
                            && ! m_options.traditional ());
+
+    // This should probably happen early.
+    sysdep_init ();
+
+    // Need to have global Vfoo variables defined early.
+    install_defaults ();
   }
 
   int cli_application::execute (void)
   {
     create_interpreter ();
 
     int status = execute_interpreter ();
 
