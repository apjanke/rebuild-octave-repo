# HG changeset patch
# User Rik <rik@octave.org>
# Date 1453352265 28800
#      Wed Jan 20 20:57:45 2016 -0800
# Node ID f5b17eb2508bb73d7ac004b8d58a1340bf1ea082
# Parent  499b851fbfae0a9aab199f36ca99fa187be8bc57
maint: Remove unused variables.

* data.cc (Fissorted): Remove "octave_value mode_arg".

* error.cc (Ferror): Remove "octave_value_list tmp".

* gl2ps-renderer.cc (gl2ps_renderer::draw_text): Comment out "Matrix bbox".

* graphics.cc (base_properties::get_dynamic): Remove "octave_value retval".
* graphics.cc (Faddproperty): Remove "octave_value retval".

* regexp.cc (octregexprep): Remove "octave_value retval".

* sparse-xpow.cc (elem_xpow): Remove "Complex tmp".

* symtab.cc (symbol_table::fcn_info::fcn_info_rep::find_autoload):
Remove "octave_value retval".

* urlwrite.cc (__ftp_mode__): Remove "octave_value retval".

* xpow.cc (xpow (const DiagMatrix& a, double b)): Remove "octave_value retval".

* symrcm.cc (Fsymrcm): Remove "octave_value retval".

* ov-cell.cc (Fcellstr): Remove "octave_value retval".

* ov-classdef.cc (cdef_object::map_value): Remove "octave_value pvalue".

* ov-struct.cc (octave_scalar_struct::load_binary): Remove "dim_vector dv (1, 1)"
* ov-struct.cc (Fstruct): Remove "Cell fields"

ov.cc (octave_value::assign): Remove "octave_value retval".

* pt-classdef.cc (tree_classdef_body::~tree_classdef_body): Remove
 "octave_value retval".

* pt-eval.cc (tree_evaluator::visit_statement_list): Comment out
"static octave_value_list empty_list".

* DASRT.cc (DASRT::integrate): Remove "DASRT_result retval".

* sparse-base-chol.cc (sparse_base_chol<>): Remove "chol_type ret".

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -6760,18 +6760,16 @@ This function does not support sparse ma
     print_usage ();
 
   bool by_rows = false;
 
   sortmode smode = ASCENDING;
 
   if (nargin > 1)
     {
-      octave_value mode_arg;
-
       if (nargin == 3)
         smode = get_sort_mode_option (args(2));
 
       std::string tmp = args(1).xstring_value ("issorted: second argument must be a string");
       if (tmp == "rows")
         by_rows = true;
       else
         smode = get_sort_mode_option (args(1));
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -1167,18 +1167,16 @@ disable escape sequence expansion use a 
   bool have_fmt = false;
 
   if (nargin == 1 && args(0).is_map ())
     {
       // empty struct is not an error.  return and resume calling function.
       if (args(0).is_empty ())
         return retval;
 
-      octave_value_list tmp;
-
       octave_scalar_map m = args(0).scalar_map_value ();
 
       // empty struct is not an error.  return and resume calling function.
       if (m.nfields () == 0)
         return retval;
 
       if (m.contains ("message"))
         {
diff --git a/libinterp/corefcn/gl2ps-renderer.cc b/libinterp/corefcn/gl2ps-renderer.cc
--- a/libinterp/corefcn/gl2ps-renderer.cc
+++ b/libinterp/corefcn/gl2ps-renderer.cc
@@ -611,18 +611,18 @@ gl2ps_renderer::draw_text (const text::p
   if (props.verticalalignment_is ("top"))
     valign = 2;
   else if (props.verticalalignment_is ("baseline"))
     valign = 3;
   else if (props.verticalalignment_is ("middle"))
     valign = 1;
 
   // FIXME: handle margin and surrounding box
+  // Matrix bbox;
 
-  Matrix bbox;
   const Matrix pos = get_transform ().scale (props.get_data_position ());
   std::string str = props.get_string ().string_vector_value ().join ("\n");
 
   render_text (str, pos(0), pos(1), pos.numel () > 2 ? pos(2) : 0.0,
                halign, valign, props.get_rotation ());
 }
 
 static void
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -2898,18 +2898,16 @@ base_properties::set_from_list (base_gra
 %!   set(0, "defaultfigureunits", "remove");
 %!   set(0, "defaultfigureposition", "remove");
 %! end_unwind_protect
 */
 
 octave_value
 base_properties::get_dynamic (const caseless_str& pname) const
 {
-  octave_value retval;
-
   std::map<caseless_str, property, cmp_caseless_str>::const_iterator it =
     all_props.find (pname);
 
   if (it == all_props.end ())
     error ("get: unknown property \"%s\"", pname.c_str ());
 
   return it->second.get ();
 }
@@ -11036,18 +11034,16 @@ addproperty (\"my_style\", gcf, \"lineli
 @end group\n\
 @end example\n\
 \n\
 @seealso{addlistener, hggroup}\n\
 @end deftypefn")
 {
   gh_manager::auto_lock guard;
 
-  octave_value retval;
-
   if (args.length () < 3)
     print_usage ();
 
   std::string name = args(0).xstring_value ("addproperty: NAME must be a string");
 
   double h = args(1).xdouble_value ("addproperty: invalid handle H");
 
   graphics_handle gh = gh_manager::lookup (h);
diff --git a/libinterp/corefcn/regexp.cc b/libinterp/corefcn/regexp.cc
--- a/libinterp/corefcn/regexp.cc
+++ b/libinterp/corefcn/regexp.cc
@@ -1285,18 +1285,16 @@ for details on the syntax of the search 
 
 %!assert (regexpi ("\n", '\n'), 1);
 %!assert (regexpi ("\n", "\n"), 1);
 */
 
 static octave_value
 octregexprep (const octave_value_list &args, const std::string &who)
 {
-  octave_value retval;
-
   int nargin = args.length ();
 
   // Make sure we have string, pattern, replacement
   const std::string buffer = args(0).string_value ();
 
   std::string pattern = args(1).string_value ();
 
   // Matlab compatibility.
diff --git a/libinterp/corefcn/sparse-xpow.cc b/libinterp/corefcn/sparse-xpow.cc
--- a/libinterp/corefcn/sparse-xpow.cc
+++ b/libinterp/corefcn/sparse-xpow.cc
@@ -665,17 +665,16 @@ elem_xpow (const SparseComplexMatrix& a,
 
   SparseComplexMatrix result (nr, nc, Complex (1.0, 0.0));
   for (octave_idx_type j = 0; j < nc; j++)
     {
       for (octave_idx_type i = a.cidx (j); i < a.cidx (j+1); i++)
         {
           octave_quit ();
           double btmp = b(a.ridx (i), j);
-          Complex tmp;
 
           if (xisint (btmp))
             result.xelem (a.ridx (i), j) = std::pow (a.data (i),
                                               static_cast<int> (btmp));
           else
             result.xelem (a.ridx (i), j) = std::pow (a.data (i), btmp);
         }
     }
diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -1037,18 +1037,16 @@ symbol_table::fcn_info::fcn_info_rep::fi
     }
 
   return retval;
 }
 
 octave_value
 symbol_table::fcn_info::fcn_info_rep::find_autoload (void)
 {
-  octave_value retval;
-
   // Autoloaded function.
 
   if (autoload_function.is_defined ())
     out_of_date_check (autoload_function);
 
   if (! autoload_function.is_defined ())
     {
       std::string file_name = lookup_autoload (name);
diff --git a/libinterp/corefcn/urlwrite.cc b/libinterp/corefcn/urlwrite.cc
--- a/libinterp/corefcn/urlwrite.cc
+++ b/libinterp/corefcn/urlwrite.cc
@@ -693,18 +693,16 @@ DEFUN (__ftp_mode__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} __ftp_mode__ (@var{handle})\n\
 Undocumented internal function\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     error ("__ftp_mode__: incorrect number of arguments");
 
-  octave_value retval;
-
   url_transfer curl = ch_manager::get_object (args(0));
 
   if (! curl.is_valid ())
     error ("__ftp_binary__: invalid ftp handle");
 
   return ovl (curl.is_ascii () ? "ascii" : "binary");
 }
 
diff --git a/libinterp/corefcn/xpow.cc b/libinterp/corefcn/xpow.cc
--- a/libinterp/corefcn/xpow.cc
+++ b/libinterp/corefcn/xpow.cc
@@ -304,17 +304,16 @@ xpow (const DiagMatrix& a, double b)
 
   return retval;
 }
 
 // -*- 5p -*-
 octave_value
 xpow (const PermMatrix& a, double b)
 {
-  octave_value retval;
   int btmp = static_cast<int> (b);
   if (btmp == b)
     return a.power (btmp);
   else
     return xpow (Matrix (a), b);
 }
 
 // -*- 6 -*-
diff --git a/libinterp/dldfcn/symrcm.cc b/libinterp/dldfcn/symrcm.cc
--- a/libinterp/dldfcn/symrcm.cc
+++ b/libinterp/dldfcn/symrcm.cc
@@ -435,18 +435,16 @@ Positive Definite Systems}, Prentice Hal
 Mathematics, ISBN 0-13-165274-5, 1981.\n\
 \n\
 @seealso{colperm, colamd, symamd}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
 
-  octave_value retval;
-
   octave_value arg = args(0);
 
   // the parameter of the matrix is converted into a sparse matrix
   //(if necessary)
   octave_idx_type *cidx;
   octave_idx_type *ridx;
   SparseMatrix Ar;
   SparseComplexMatrix Ac;
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -1261,18 +1261,16 @@ spaces in a row are deleted before conve
 \n\
 To convert back from a cellstr to a character array use @code{char}.\n\
 @seealso{cell, char}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
 
-  octave_value retval;
-
   octave_value_list tmp = Fiscellstr (args, 1);
 
   if (tmp(0).is_true ())
     return ovl (args(0));
   else
     {
       string_vector s = args(0).xstring_vector_value ("cellstr: argument STRING must be a 2-D character array");
 
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1254,18 +1254,16 @@ cdef_object::map_value (void) const
     {
       std::map<std::string, cdef_property> props;
 
       props = cls.get_property_map (cdef_class::property_all);
 
       for (std::map<std::string, cdef_property>::iterator it = props.begin ();
            it != props.end (); ++it)
         {
-          octave_value pvalue;
-
           if (is_array ())
             {
               Array<cdef_object> a_obj = array_value ();
 
               Cell cvalue (a_obj.dims ());
 
               for (octave_idx_type i = 0; i < a_obj.numel (); i++)
                 cvalue (i) = it->second.get_value (a_obj(i), false);
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -1429,18 +1429,16 @@ octave_scalar_struct::load_binary (std::
 {
   bool success = true;
   int32_t len;
   if (! is.read (reinterpret_cast<char *> (&len), 4))
     return false;
   if (swap)
     swap_bytes<4> (&len);
 
-  dim_vector dv (1, 1);
-
   if (len > 0)
     {
       octave_scalar_map m;
 
       for (octave_idx_type j = 0; j < len; j++)
         {
           octave_value t2;
           bool dummy;
@@ -1694,18 +1692,16 @@ produces a struct @strong{array}.\n\
       retval = args(0).map_value ();
 
       return retval;
     }
 
   if ((nargin == 1 || nargin == 2)
       && args(0).is_empty () && args(0).is_real_matrix ())
     {
-      Cell fields;
-
       if (nargin == 2)
         {
           Array<std::string> cstr = args(1).xcellstr_value ("struct: second argument should be a cell array of field names");
 
           retval = octave_map (args(0).dims (), cstr);
         }
       else
         retval = octave_map (args(0).dims ());
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -1407,18 +1407,16 @@ octave_value::undef_subsasgn (const std:
   return rep->undef_subsasgn (type, idx, rhs);
 }
 
 octave_value&
 octave_value::assign (assign_op op, const std::string& type,
                       const std::list<octave_value_list>& idx,
                       const octave_value& rhs)
 {
-  octave_value retval;
-
   make_unique ();
 
   octave_value t_rhs = rhs;
 
   if (op != op_asn_eq)
     {
       if (! is_defined ())
         error ("in computed assignment A(index) OP= X, A must be defined first");
diff --git a/libinterp/parse-tree/pt-classdef.cc b/libinterp/parse-tree/pt-classdef.cc
--- a/libinterp/parse-tree/pt-classdef.cc
+++ b/libinterp/parse-tree/pt-classdef.cc
@@ -230,17 +230,16 @@ tree_classdef_body::~tree_classdef_body 
     }
 }
 
 // Classdef
 
 octave_function*
 tree_classdef::make_meta_class (bool is_at_folder)
 {
-  octave_value retval;
   cdef_class cls = cdef_class::make_meta_class (this, is_at_folder);
 
   if (cls.ok ())
     return cls.get_constructor_function ();
 
   return 0;
 }
 
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -726,17 +726,18 @@ tree_evaluator::visit_statement (tree_st
                          "out of memory or dimension too large for Octave's index type");
         }
     }
 }
 
 void
 tree_evaluator::visit_statement_list (tree_statement_list& lst)
 {
-  static octave_value_list empty_list;
+  // FIXME: commented out along with else clause below. 
+  // static octave_value_list empty_list;
 
   tree_statement_list::iterator p = lst.begin ();
 
   if (p != lst.end ())
     {
       while (true)
         {
           tree_statement *elt = *p++;
diff --git a/liboctave/numeric/DASRT.cc b/liboctave/numeric/DASRT.cc
--- a/liboctave/numeric/DASRT.cc
+++ b/liboctave/numeric/DASRT.cc
@@ -148,18 +148,16 @@ ddasrt_g (const octave_idx_type& neq, co
   END_INTERRUPT_WITH_EXCEPTIONS;
 
   return 0;
 }
 
 void
 DASRT::integrate (double tout)
 {
-  DASRT_result retval;
-
   // I suppose this is the safe thing to do.  If this is the first
   // call, or if anything about the problem has changed, we should
   // start completely fresh.
 
   if (! initialized || restart
       || DAEFunc::reset || DAERTFunc::reset || DASRT_options::reset)
     {
       integration_error = false;
diff --git a/liboctave/numeric/sparse-base-chol.cc b/liboctave/numeric/sparse-base-chol.cc
--- a/liboctave/numeric/sparse-base-chol.cc
+++ b/liboctave/numeric/sparse-base-chol.cc
@@ -271,17 +271,16 @@ template <class chol_type, class chol_el
 chol_type
 sparse_base_chol<chol_type, chol_elt, p_type>::inverse (void) const
 {
   chol_type retval;
 #ifdef HAVE_CHOLMOD
   cholmod_sparse *m = rep->L ();
   octave_idx_type n = m->ncol;
   ColumnVector perms = rep->perm ();
-  chol_type ret;
   double rcond2;
   octave_idx_type info;
   MatrixType mattype (MatrixType::Upper);
   chol_type linv = L ().hermitian ().inverse (mattype, info, rcond2, 1, 0);
 
   if (perms.numel () == n)
     {
       p_type Qc = Q ();
