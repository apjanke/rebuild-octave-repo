# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1377675715 -3600
#      Wed Aug 28 08:41:55 2013 +0100
# Node ID 583306fe7e4fc72adcd1143079361c6431f74c46
# Parent  f8ee0ed7f1b848ba0797d142675668dc5df1df76
Fix reading of images with height or width of 1 pixel.

* __magick_read__.cc (calculate_region): this function uses an octave range
  from the options which is set in the Octave language with the colon
  operator. However, when there's only one element, the colon operator
  actually is of type scalar.

diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -39,25 +39,46 @@ along with Octave; see the file COPYING.
 
 #include "gripes.h"
 
 #ifdef HAVE_MAGICK
 
 #include <Magick++.h>
 #include <clocale>
 
+// We need this in case one of the sides of the image being read has
+// width 1. In those cases, the type will come as scalar instead of range
+// since that's the behaviour of the colon operator (1:1:1 will be a scalar,
+// not a range).
+static Range
+get_region_range (const octave_value& region)
+{
+  Range output;
+  if (region.is_range ())
+    output = region.range_value ();
+  else if (region.is_scalar_type ())
+    {
+      double value = region.scalar_value ();
+      output = Range (value, value);
+    }
+  else
+    error ("__magick_read__: unknow datatype for Region option");
+
+  return output;
+}
+
 static std::map<std::string, octave_idx_type>
 calculate_region (const octave_scalar_map& options)
 {
   std::map<std::string, octave_idx_type> region;
   const Cell pixel_region = options.getfield ("region").cell_value ();
 
   // Subtract 1 to account for 0 indexing.
-  const Range rows     = pixel_region (0).range_value ();
-  const Range cols     = pixel_region (1).range_value ();
+  const Range rows     = get_region_range (pixel_region (0));
+  const Range cols     = get_region_range (pixel_region (1));
   region["row_start"]  = rows.base () -1;
   region["col_start"]  = cols.base () -1;
   region["row_end"]    = rows.max ()  -1;
   region["col_end"]    = cols.max ()  -1;
 
   // Length of the area to load into the Image Pixel Cache.  We use max and
   // min to account for cases where last element of range is the range limit.
   region["row_cache"] = region["row_end"] - region["row_start"] +1;
