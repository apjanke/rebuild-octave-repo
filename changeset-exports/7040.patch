# HG changeset patch
# User jwe
# Date 1192818259 0
#      Fri Oct 19 18:24:19 2007 +0000
# Node ID 1f16da18d85d9bd468b91cd566e85d147de46903
# Parent  258dd5c9bfe0b290e0e81ebf6e5eb18ae496e0c1
[project @ 2007-10-19 18:24:19 by jwe]

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2007-10-19  David Bateman  <dbateman@free.fr>
+
+	* refcard/refcard.tex: Update for 3.0.
+
 2007-10-15  Søren Hauberg  <hauberg@gmail.com>
 
 	* interpreter/preface.txi, interpreter/basics.txi,
 	interpreter/strings.txi, interpreter/container.txi,
 	interpreter/var.txi, interpreter/expr.txi, interpreter/errors.txi,
 	interpreter/io.txi, interpreter/func.txi, interpreter/package.txi:
 	Make text fit on pages when using smallbook.
 
diff --git a/doc/refcard/refcard.tex b/doc/refcard/refcard.tex
--- a/doc/refcard/refcard.tex
+++ b/doc/refcard/refcard.tex
@@ -45,18 +45,18 @@
 %
 %   -- Andreas Vogel (av@ssw.de)
 %
 % NOTE ON INTENTIONAL OMISSIONS: This reference card includes many
 % Octave commands, but due to space constraints there are some things
 % I chose to omit.  In general, not all synonyms for commands are
 % covered, nor all variations of a command.
 
-\def\octaveversion{1.1.1}
-\def\refcardedition{1.1}
+\def\octaveversion{3.0.0}
+\def\refcardedition{2.0}
 
 % ------------------
 % multicolumn format
 % ------------------
 
 % Declarations (these must come first)
 
 \newdimen\totalwidth
@@ -373,30 +373,32 @@
 % The actual text of the reference card
 % -------------------------------------
 
 {\vbbf Octave Quick Reference}\hfil{\smrm Octave Version \octaveversion}\qquad
 
 \sec Starting Octave;
 octave&start interactive Octave session\cr
 octave {\it file}&run Octave on commands in {\it file}\cr
+octave --eval {\it code}&Evaluate {\it code} using Octave\cr
 octave --help&describe command line options\cr
 \endsec
 
 \sec Stopping Octave;
 quit {\rm or} exit&exit Octave\cr
 INTERRUPT&({\it e.g.} \ctl{c}) terminate current command and return to
   top-level prompt\cr
 \endsec
 
 \sec Getting Help;
 help&list all commands and built-in variables\cr
 help {\it command}&briefly describe {\it command}\cr
-help -i&use Info to browse Octave manual\cr
-help -i {\it command}&search for {\it command\/} in Octave manual\cr
+doc&use Info to browse Octave manual\cr
+doc {\it command}&search for {\it command} in Octave manual\cr
+lookfor {\it str}&search for {\it command} based on {\it str}\cr
 \endsec
 
 \sec Motion in Info;
 SPC {\rm or} C-v&scroll forward one screenful\cr
 DEL {\rm or} M-v&scroll backward one screenful\cr
 C-l&redraw the display\cr
 \endsec
 
@@ -443,17 +445,16 @@ M-t&transpose words at the point\cr
 % M-l&lowercase the current word\cr
 % M-c&capitalize the current word\cr
 \endsec
 
 \vfill
 \line{\smrm \opt{ } surround optional arguments
   \hfill ... show one or more arguments}
 \vskip0.25\baselineskip
-\centerline{\smrm Copyright 1996, 1997 John W. Eaton\qquad Permissions on back}
 \eject
 
 \sec Killing and Yanking;
 C-k&kill to the end of the line\cr
 C-y&yank the most recently killed text\cr
 M-d&kill to the end of the current word\cr
 M-DEL&kill the word behind the cursor\cr
 M-y&rotate the kill ring and yank the new top\cr
@@ -500,38 +501,64 @@ getenv ({\it string})&return value of na
 system ({\it cmd})&execute arbitrary shell command string\cr
 \endsec
 
 \sec Matrices;
 \omit\vbox{\rm\vskip0.25ex
   Square brackets delimit literal matrices.  Commas separate elements
   on the same row.  Semicolons separate rows.  Commas may be replaced
   by spaces, and semicolons may be replaced by one or more newlines.
-  Elements of a matrix may be arbitrary   expressions, provided that
+  Elements of a matrix may be arbitrary expressions, assuming
   all the dimensions agree.\vskip0.75ex}\span\cr
 [ {\it x}, {\it y}, ... ]&enter a row vector\cr
 [ {\it x}; {\it y}; ... ]&enter a column vector\cr
 [ {\it w}, {\it x}; {\it y}, {\it z} ]&enter a 2$\times$2 matrix\cr
 \endsec
 
+\sec Multi-dimensional Arrays;
+\omit\vbox{\rm\vskip0.25ex
+  Multi-dimensional arrays may be created with the {\it cat} or
+  {\it reshape} commands from two-dimensional sub-matrices.
+  \vskip0.75ex}\span\cr
+squeeze ({\it arr})&remove singleton dimensions of the array.\cr
+ndims ({\it arr})&number of dimensions in the array.\cr
+permute ({\it arr}, {\it p})&permute the dimensions of an array.\cr
+ipermute ({\it arr}, {\it p})&array inverse permutation.\cr
+\endsec
+
+\vfill\eject
+
+\sec ;
+shiftdim ({\it arr}, {\it s})&rotate the array dimensions.\cr
+circshift ({\it arr}, {\it s})&rotate the array elements.\cr
+\endsec
+
+\sec Sparse Matrices;
+sparse (...)&create a sparse matrix.\cr
+speye ({\it n)}&create sparse identify matrix.\cr
+sprand ({\it n}, {\it m}, {\it d})&sparse rand matrix of density {\it d}.\cr
+spdiags (...)&sparse generalization of {\it diag}.\cr
+nnz ({\it s})&No. non-zero elements in sparse matrix.\cr
+\endsec
+
 \sec Ranges;
 {\it base} : {\it limit}\cr
 {\it base} : {\it incr} : {\it limit}\cr
 \omit\hfill\vbox{\hsize=\idnwid\rm\vskip0.75ex
   Specify a range of values beginning with {\it base\/} with no elements
   greater than {\it limit}.  If it is omitted, the default value of
   {\it incr\/} is 1.  Negative increments are permitted.}\span\cr
 \endsec
 
-\vfill\eject
-
 \sec Strings and Common Escape Sequences;
 \omit\vbox{\rm\vskip0.5ex
   A {\it string constant\/} consists of a sequence of characters
-  enclosed in either double-quote or single-quote marks.\vskip0.75ex}\span\cr
+  enclosed in either double-quote or single-quote marks. Strings
+  in double-quotes allow the use of the escape sequences below.
+  \vskip0.75ex}\span\cr
 \char'134\char'134&a literal backslash\cr
 \char'134 "&a literal double-quote character\cr
 \char'134 '&a literal single-quote character\cr
 \char'134 n&newline, ASCII code 10\cr
 \char'134 t&horizontal tab, ASCII code 9\cr
 \endsec
 
 \sec Index Expressions;
@@ -541,36 +568,51 @@ system ({\it cmd})&execute arbitrary she
 \quad {\it scalar}&select row (column) corresponding to {\it scalar}\cr
 \quad {\it vector}&select rows (columns) corresponding to the elements
   of {\it vector}\cr
 \quad {\it range}&select rows (columns) corresponding to the elements
   of {\it range}\cr
 \quad :&select all rows (columns)\cr
 \endsec
 
-\sec Global Variables;
+\sec Global and Persistent Variables;
 global {\it var1} ...&Declare variables global.\cr
-\omit\hfill\vbox{\hsize=\idnwid\rm\vskip0.25ex
+global {\it var1} = {\it val}&Declare variable global. Set intial value.\cr
+persistent {\it var1}&Declare a variable as static to a function.\cr
+persistent {\it var1} = {\it val}&Declare a variable as static to a 
+  function and set its initial value.\cr
+\omit\hfill\vbox{\rm\vskip0.25ex
   Global variables may be accessed inside the body of a function
   without having to be passed in the function parameter list provided
-  they are also declared global within the function.}\span\cr
+  they are declared global when used.}\span\cr
 \endsec
 
 \sec Selected Built-in Functions;
 EDITOR&editor to use with {\tt edit\_history}\cr
 Inf, NaN&IEEE infinity, NaN\cr
+NA&Missing value\cr
 PAGER&program to use to paginate output\cr
 ans&last result not explicitly assigned\cr
 eps&machine precision\cr
 pi&$\pi$\cr
+1i&$\sqrt{-1}$\cr
 realmax&maximum representable value\cr
 realmin&minimum representable value\cr
 \endsec
 
-\vfill\eject
+\vfill
+\centerline{\smrm Copyright 1996, 1997, 2007 John W. Eaton\qquad Permissions on back}
+\eject
+
+\sec Assignment Expressions;
+{\it var} = {\it expr}&assign expression to variable\cr
+{\it var} ({\it idx}) = {\it expr}&assign expression to indexed variable\cr
+{\it var} ({\it idx}) = []&delete the indexed elements.\cr
+{\it var} $\{${\it idx}$\}$ = {\it expr}&assign elements of a cell array.\cr
+\endsec
 
 \sec Arithmetic and Increment Operators;
 {\it x} + {\it y}&addition\cr
 {\it x} - {\it y}&subtraction\cr
 {\it x} * {\it y}&matrix multiplication\cr
 {\it x} .* {\it y}&element by element multiplication\cr
 {\it x} / {\it y}&right division, conceptually equivalent to
   {\tt (inverse~(y')~*~x')'}\cr
@@ -579,27 +621,22 @@ realmin&minimum representable value\cr
   {\tt inverse~(x)~*~y}\cr
 {\it x} .\char'134{} {\it y}&element by element left division\cr
 {\it x} \char'136{} {\it y}&power operator\cr
 {\it x} .\char'136{} {\it y}&element by element power operator\cr
 - {\it x}&negation\cr
 + {\it x}&unary plus (a no-op)\cr
 {\it x} '&complex conjugate transpose\cr
 {\it x} .'&transpose\cr
-++ {\it x}\quad{\rm(}-- {\it x}{\rm)}&increment (decrement) {\it x},
+++ {\it x}\quad{\rm(}-- {\it x}{\rm)}&increment (decrement),
   return {\it new\/} value\cr
-{\it x} ++\quad{\rm(}{\it x} --{\rm)}&increment (decrement) {\it x},
+{\it x} ++\quad{\rm(}{\it x} --{\rm)}&increment (decrement),
   return {\it old\/} value\cr
 \endsec
 
-\sec Assignment Expressions;
-{\it var} = {\it expr}&assign expression to variable\cr
-{\it var} ({\it idx}) = {\it expr}&assign expression to indexed variable\cr
-\endsec
-
 \sec Comparison and Boolean Operators;
 \omit \vbox{\rm\vskip0.75ex
   These operators work on an element-by-element basis.  Both arguments
   are always evaluated.\vskip0.75ex}\span\cr
 {\it x} < {\it y}&true if {\it x\/} is less than {\it y}\cr
 {\it x} <= {\it y}&true if {\it x\/} is less than or equal to {\it y}\cr
 {\it x} == {\it y}&true if {\it x\/} is equal to {\it y}\cr
 {\it x} >= {\it y}&true if {\it x\/} is greater than or equal to {\it y}\cr
@@ -607,43 +644,59 @@ realmin&minimum representable value\cr
 {\it x} != {\it y}&true if {\it x\/} is not equal to {\it y}\cr
 {\it x} \& {\it y}&true if both {\it x\/} and {\it y\/} are true\cr
 {\it x} | {\it y}&true if at least one of {\it x\/} or {\it y\/} is true\cr 
 ! {\it bool}&true if {\it bool\/} is false\cr
 \endsec
 
 \sec Short-circuit Boolean Operators;
 \omit \vbox{\rm\vskip0.75ex
-  Operators evaluate left-to-right, expecting scalar operands.
-  Operands are only evaluated if necessary, stopping once overall
-  truth value can be determined.  Operands are converted to scalars by
-  applying the {\tt all} function.\vskip0.75ex}\span\cr   
+  Operators evaluate left-to-right. Operands are only evaluated if 
+  necessary, stopping once overall truth value can be determined.  
+  Operands are converted to scalars using the {\tt all} 
+  function.\vskip0.75ex}\span\cr   
 {\it x} \&\& {\it y}&true if both {\it x\/} and {\it y\/} are true\cr
 {\it x} || {\it y}&true if at least one of {\it x\/} or {\it y\/} is true\cr
 \endsec
 
 \sec Operator Precedence;
 \omit \vbox{\rm\vskip0.5ex
-  Here is a table of the operators in Octave, in order of increasing
+  Table of Octave operators, in order of increasing
   precedence.\vskip0.75ex}\span\cr
 ;\ \ ,&statement separators\cr
 =&assignment, groups left to right\cr
 ||\ \ \&\&&logical ``or'' and ``and''\cr
 |\ \ \&&element-wise ``or'' and ``and''\cr
 < <= == >= > !=&relational operators\cr
 :&colon\cr
 +\ \ -&addition and subtraction\cr
 * / \char'134\ \ .*\ \ ./\ \ .\char'134&multiplication and division\cr
 '\ \ .'&transpose\cr
 +\ \ -\ \ ++\ \ --\ \ !&unary minus, increment, logical ``not''\cr
 \char'136\ \ .\char'136&exponentiation\cr
 \endsec
 
 \vfill\eject
 
+\sec Paths and Packages;
+path&display the current Octave cunction path.\cr
+pathdef&display the default path.\cr
+addpath({\it dir})&add a directory to the path.\cr
+EXEC\_PATH&manipulate the Octave executable path.\cr
+pkg list&display installed packages.\cr
+pkg load {\it pack}&Load an installed package.\cr
+\endsec
+
+\sec Cells and Structures;
+{\it{var}}.{\it{field}} = ...&set a field of a structure.\cr
+{\it{var}}$\{${\it{idx}}$\}$ = ...&set an element of a cell array.\cr
+cellfun({\it f}, {\it c})&apply a function to elements of cell array.\cr
+fieldnames({\it s})&returns the fields of a structure.\cr
+\endsec
+
 \widesec Statements;
 for {\it identifier} = {\it expr} {\it stmt-list} endfor\cr
 \hfill\vbox{\hsize=\idnwid\rm\vskip0.25ex
   Execute {\it stmt-list} once for each column of {\it expr}.  The
   variable {\it identifier} is set to the value of the current column
   during each iteration.}\cr\cr
 while ({\it condition}) {\it stmt-list} endwhile\cr
 \hfill\vbox{\hsize=\idnwid\rm\vskip0.25ex
@@ -666,57 +719,95 @@ if ({\it condition}) {\it if-body} \opt{
   condition that is true, otherwise execute {\it else-body}.}\cr
 \hfill\vbox{\hsize=\idnwid\rm\vskip0.25ex
   Any number of {\tt elseif} clauses may appear in an {\tt if}
   statement.}\cr\cr
 unwind\_protect {\it body} unwind\_protect\_cleanup {\it cleanup} end\cr
 \hfill\vbox{\hsize=\idnwid\rm\vskip0.25ex
   Execute {\it body}.  Execute {\it cleanup} no matter how control
 exits {\it body}.}\cr
+try {\it body} catch {\it cleanup} end\cr
+\hfill\vbox{\hsize=\idnwid\rm\vskip0.25ex
+  Execute {\it body}. Execute {\it cleanup} if {\it body} fails.}\cr
+\endsec
+
+\altsec Strings;
+strcmp ({\it s}, {\it t})&compare strings\cr
+strcat ({\it s}, {\it t}, ...)&concatenate strings\cr
+regexp ({\it str}, {\it pat})&strings matching regular expression\cr
+regexprep ({\it str}, {\it pat}, {\it rep})&Match and replace sub-strings\cr
 \endsec
 
 \widesec Defining Functions;
 function \opt{{\it ret-list}} {\it function-name}
   \opt{\hskip0.2em({\it arg-list})\hskip0.2em}\cr
 \quad{\it function-body}\cr
 endfunction\cr\cr
 {\rm {\it ret-list\/} may be a single identifier or a comma-separated
   list of identifiers delimited by square-brackets.\vskip0.75ex}\cr
 {\rm {\it arg-list\/} is a comma-separated list of identifiers and may
   be empty.}\cr
 \endsec
 
+\vfill\eject
+
+\sec Function Handles;
+@{\it{func}}& Define a function handle to {\it func}.\cr
+@({\it var1}, ...) {\it expr}&Define an anonymous function handle.\cr
+str2func ({\it str})&Create a function handle from a string.\cr
+functions ({\it handle})&Return information about a function handle.\cr
+func2str ({\it handle})&Return a string representation of a
+function handle.\cr
+{\it handle} ({\it arg1}, ...)&Evaluate a function handle.\cr
+feval ({\it func}, {\it arg1}, ...)&Evaluate a function handle or
+  string, passing remaining args to {\it func}\cr
+\omit\vbox{\rm\vskip0.25ex
+  Anonymous function handles take a copy of the variables in the
+  current workspace.\vskip0.75ex}\span\cr
+\endsec
+
+\sec Miscellaneous Functions;
+eval ({\it str})&evaluate {\it str} as a command\cr
+error ({\it message})&print message and return to top level\cr
+warning ({\it message})&print a warning message\cr
+clear {\it pattern}&clear variables matching pattern\cr
+exist ({\it str})&check existence of variable or function\cr
+who, whos&list current variables\cr
+whos {\it var}&details of the varibale {\it var}\cr
+\endsec
+
 \sec Basic Matrix Manipulations;
 rows ({\it a})&return number of rows of {\it a}\cr
 columns ({\it a})&return number of columns of {\it a}\cr
 all ({\it a})&check if all elements of {\it a\/} nonzero\cr
 any ({\it a})&check if any elements of {\it a\/} nonzero\cr
+\endsec
+
+\sec ;
 find ({\it a})&return indices of nonzero elements\cr
 sort ({\it a})&order elements in each column of {\it a}\cr
 sum ({\it a})&sum elements in columns of {\it a}\cr
 prod ({\it a})&product of elements in columns of {\it a}\cr
 min ({\it args})&find minimum values\cr
 max ({\it args})&find maximum values\cr
 rem ({\it x}, {\it y})&find remainder of {\it x}/{\it y}\cr
 reshape ({\it a}, {\it m}, {\it n})&reformat {\it a} to be {\it m} by
-  {\it n}\cr\cr
+  {\it n}\cr
 diag ({\it v}, {\it k})&create diagonal matrices\cr
 linspace ({\it b}, {\it l}, {\it n})&create vector of linearly-spaced
   elements\cr
 logspace ({\it b}, {\it l}, {\it n})&create vector of log-spaced
   elements\cr
 eye ({\it n}, {\it m})&create {\it n\/} by {\it m\/} identity matrix\cr
 ones ({\it n}, {\it m})&create {\it n\/} by {\it m\/} matrix of ones\cr
 zeros ({\it n}, {\it m})&create {\it n\/} by {\it m\/} matrix of zeros\cr
 rand ({\it n}, {\it m})&create {\it n\/} by {\it m\/} matrix of random
   values\cr 
 \endsec
 
-\vfill\eject
-
 % sin({\it a}) cos({\it a}) tan({\it a})&trigonometric functions\cr
 % asin({\it a}) acos({\it a}) atan({\it a})&inverse trigonometric functions\cr
 % sinh({\it a}) cosh({\it a}) tanh({\it a})&hyperbolic trig functions\cr
 % asinh({\it a}) acosh({\it a}) atanh({\it a})&inverse hyperbolic trig
 % functions\cr\cr 
 
 \sec Linear Algebra;
 chol ({\it a})&Cholesky factorization\cr
@@ -724,39 +815,52 @@ det ({\it a})&compute the determinant of
 eig ({\it a})&eigenvalues and eigenvectors\cr
 expm ({\it a})&compute the exponential of a matrix\cr
 hess ({\it a})&compute Hessenberg decomposition\cr
 inverse ({\it a})&invert a square matrix\cr
 norm ({\it a}, {\it p})&compute the {\it p}-norm of a matrix\cr
 pinv ({\it a})&compute pseudoinverse of {\it a}\cr
 qr ({\it a})&compute the QR factorization of a matrix\cr
 rank ({\it a})&matrix rank\cr
+sprank ({\it a})&structrual matrix rank\cr
 schur ({\it a})&Schur decomposition of a matrix\cr
 svd ({\it a})&singular value decomposition\cr
 syl ({\it a}, {\it b}, {\it c})&solve the Sylvester equation\cr
 \endsec
 
+\vfill\eject
+
 \sec Equations, ODEs, DAEs, Quadrature;
 *fsolve&solve nonlinear algebraic equations\cr
 *lsode&integrate nonlinear ODEs\cr
 *dassl&integrate nonlinear DAEs\cr
-*quad&integrate nonlinear functions\cr\cr
+*quad&integrate nonlinear functions\cr
 perror ({\it nm}, {\it code})&for functions that return numeric
   codes, print error message for named function and given error
   code\cr\cr
 \omit \vbox{\rm
   {\tt *} See the on-line or printed manual for the complete list of
   arguments for these functions.}\span\cr
 \endsec
 
+% \altsec Sets;
+% create\_set ({\it a}, {\it b})&create row vector of unique values\cr
+% complement ({\it a}, {\it b})&elements of {\it b} not in {\it a}\cr
+% intersection ({\it a}, {\it b})&intersection of sets {\it a} and {\it b}\cr
+% union ({\it a}, {\it b})&union of sets {\it a} and {\it b}\cr
+% \endsec
+
 \sec Signal Processing;
-fft ({\it a})&Fast Fourier Transform using FFTPACK\cr
-ifft ({\it a})&inverse FFT using FFTPACK\cr
+fft ({\it a})&Fast Fourier Transform using FFTW\cr
+ifft ({\it a})&inverse FFT using FFTW\cr
 freqz ({\it args})&FIR filter frequency response\cr
-sinc ({\it x})&returns {\tt sin ($\pi$ x)/($\pi$ x)}\cr
+filter ({\it a}, {\it b}, {\it x})&filter by transfer function\cr
+conv ({\it a}, {\it b})&convolve two vectors\cr
+hamming ({\it n})&return Hamming window coefficents\cr
+hanning ({\it n})&return Hanning window coefficents\cr
 \endsec
 
 \altsec Image Processing;
 colormap ({\it map})&set the current colormap\cr
 gray2ind ({\it i}, {\it n})&convert gray scale to Octave image\cr
 image ({\it img}, {\it zoom})&display an Octave image matrix\cr
 imagesc ({\it img}, {\it zoom})&display scaled matrix as image\cr
 imshow ({\it img}, {\it map})&display Octave image\cr
@@ -765,30 +869,16 @@ imshow ({\it r}, {\it g}, {\it b})&displ
 ind2gray ({\it img}, {\it map})&convert Octave image to gray scale\cr
 ind2rgb ({\it img}, {\it map})&convert indexed image to RGB\cr
 loadimage ({\it file})&load an image file\cr
 rgb2ind ({\it r}, {\it g}, {\it b})&convert RGB to Octave image\cr
 \omit\tt saveimage ({\it file}, {\it img}, {\it fmt}, {\it map})\quad\rm
 save a matrix to {\it file}\span\cr
 \endsec
 
-\altsec Sets;
-create\_set ({\it a}, {\it b})&create row vector of unique values\cr
-complement ({\it a}, {\it b})&elements of {\it b} not in {\it a}\cr
-intersection ({\it a}, {\it b})&intersection of sets {\it a} and {\it b}\cr
-union ({\it a}, {\it b})&union of sets {\it a} and {\it b}\cr
-\endsec
-
-\altsec Strings;
-strcmp ({\it s}, {\it t})&compare strings\cr
-strcat ({\it s}, {\it t}, ...)&concatenate strings\cr
-\endsec
-
-\vfill\eject
-
 \altsec C-style Input and Output;
 fopen ({\it name}, {\it mode})&open file {\it name}\cr
 fclose ({\it file})&close {\it file}\cr
 printf ({\it fmt}, ...)&formatted output to {\tt stdout}\cr
 fprintf ({\it file}, {\it fmt}, ...)&formatted output to {\it file}\cr
 sprintf ({\it fmt}, ...)&formatted output to string\cr
 scanf ({\it fmt})&formatted input from {\tt stdin}\cr
 fscanf ({\it file}, {\it fmt})&formatted input from {\it file}\cr
@@ -808,25 +898,17 @@ feof ({\it file})&determine if pointer i
 \endsec
 
 \sec Other Input and Output functions;
 save {\it file} {\it var} ...&save variables in {\it file}\cr
 load {\it file}&load variables from {\it file}\cr
 disp ({\it var})&display value of {\it var} to screen\cr
 \endsec
 
-\sec Miscellaneous Functions;
-eval ({\it str})&evaluate {\it str} as a command\cr
-feval ({\it str}, ...)&evaluate function named by {\it str},
-  passing remaining args to called function\cr\cr
-error ({\it message})&print message and return to top level\cr\cr
-clear {\it pattern}&clear variables matching pattern\cr
-exist ({\it str})&check existence of variable or function\cr
-who&list current variables\cr
-\endsec
+\vfill\eject
 
 \sec Polynomials;
 compan ({\it p})&companion matrix\cr
 conv ({\it a}, {\it b})&convolution\cr
 deconv ({\it a}, {\it b})&deconvolve two vectors\cr
 poly ({\it a})&create polynomial from a matrix\cr
 polyderiv ({\it p})&derivative of polynomial\cr
 polyreduce ({\it p})&integral of polynomial\cr
@@ -841,46 +923,48 @@ ratio {\it a}/{\it b}\cr
 corrcoef ({\it x}, {\it y})&correlation coefficient\cr
 cov ({\it x}, {\it y})&covariance\cr
 mean ({\it a})&mean value\cr
 median ({\it a})&median value\cr
 std ({\it a})&standard deviation\cr
 var ({\it a})&variance\cr
 \endsec
 
-\vfill\eject
-
 \sec Plotting Functions;
 plot ({\it args})&2D plot with linear axes\cr
 plot3 ({\it args})&3D plot with linear axes\cr
 line ({\it args})&2D or 3D line\cr
+patch ({\it args})&2D patch\cr
 semilogx ({\it args})&2D plot with logarithmic x-axis\cr
 semilogy ({\it args})&2D plot with logarithmic y-axis\cr
 loglog ({\it args})&2D plot with logarithmic axes\cr
 bar ({\it args})&plot bar charts\cr
 stairs ({\it x}, {\it y})&plot stairsteps\cr
-hist ({\it y}, {\it x})&plot histograms\cr\cr
-title ({\it string})&set plot title\cr\cr
+stem ({\it x}, {it y})&plot a stem graph\cr
+hist ({\it y}, {\it x})&plot histograms\cr
+contour ({\it x}, {\it y}, {\it z})&contour plot\cr
+title ({\it string})&set plot title\cr
 axis ({\it limits})&set axis ranges\cr
 xlabel ({\it string})&set x-axis label\cr
 ylabel ({\it string})&set y-axis label\cr
 zlabel ({\it string})&set z-axis label\cr
+text ({\it x}, {\it y}, {\it str})&add text to a plot\cr
 legend ({\it string})&set label in plot key\cr
 grid \opt{on$|$off}&set grid state\cr
 hold \opt{on$|$off}&set hold state\cr
-ishold&return 1 if hold is on, 0 otherwise\cr\cr
+ishold&return 1 if hold is on, 0 otherwise\cr
 mesh ({\it x}, {\it y}, {\it z})&plot 3D surface\cr
-meshdom ({\it x}, {\it y})&create mesh coordinate matrices\cr
+meshgrid ({\it x}, {\it y})&create mesh coordinate matrices\cr
 \endsec
 
 \vskip 0pt plus 2fill
 \hrule width \hsize
 \par\vskip10pt
 {\smrm\parskip=6pt
-Edition \refcardedition for Octave Version \octaveversion.  Copyright
+Edition \refcardedition\ for Octave Version \octaveversion.  Copyright
 1996, 2007, John W. Eaton
 (jwe@bevo.che.wisc.edu).  The author assumes no responsibility for any
 errors on this card.
 
 This card may be freely distributed under the terms of the GNU
 General Public License.
 
 \TeX{} Macros for this card by Roland Pesch (pesch@cygnus.com),
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2007-10-19  John W. Eaton  <jwe@octave.org>
+
+	* plot/subplot.m: Doc fix.
+
 2007-10-19  David Bateman  <dbateman@free.fr>
 
 	* plot/__bar__.m: Call newplot as needed.
 
 2007-10-17  Carlo de Falco  <kingcrimson@tiscali.it>
 
 	* plot/print.m: Handle -textspecial and -textnormal flags for fig
 	output.
diff --git a/scripts/plot/print.m b/scripts/plot/print.m
--- a/scripts/plot/print.m
+++ b/scripts/plot/print.m
@@ -68,19 +68,19 @@
 ##   @itemx corel
 ##     CorelDraw
 ##   @item dxf
 ##     AutoCAD
 ##   @item emf
 ##     Microsoft Enhanced Metafile
 ##   @item fig
 ##     XFig.  If this format is selected the additional options
-##     @code{-textspecial} or @{-textnormal} can be used to control
+##     @code{-textspecial} or @code{-textnormal} can be used to control
 ##     whether the special flag should be set for the text in the figure
-##     (default is @{-textnormal}). 
+##     (default is @code{-textnormal}). 
 ##   @item hpgl
 ##     HP plotter language
 ##   @item mf
 ##     Metafont
 ##   @item png
 ##     Portable network graphics
 ##   @item pbm
 ##     PBMplus
diff --git a/scripts/plot/subplot.m b/scripts/plot/subplot.m
--- a/scripts/plot/subplot.m
+++ b/scripts/plot/subplot.m
@@ -32,32 +32,32 @@
 ##
 ## For example, a plot with 2 by 3 grid will have plot indices running as
 ## follows:
 ## @iftex
 ## @tex
 ## \vskip 10pt
 ## \hfil\vbox{\offinterlineskip\hrule
 ## \halign{\vrule#&&\qquad\hfil#\hfil\qquad\vrule\cr
-## height13pt&1&2&3&4\cr height12pt&&&&\cr\noalign{\hrule}
-## height13pt&5&6&7&8\cr height12pt&&&&\cr\noalign{\hrule}}}
+## height13pt&1&2&3\cr height12pt&&&&\cr\noalign{\hrule}
+## height13pt&4&5&6\cr height12pt&&&&\cr\noalign{\hrule}}}
 ## \hfil
 ## \vskip 10pt
 ## @end tex
 ## @end iftex
 ## @ifinfo
 ## @display
 ## @group
 ## @example
 ##
-## +-----+-----+-----+-----+
-## |  1  |  2  |  3  |  4  |
-## +-----+-----+-----+-----+
-## |  5  |  6  |  7  |  8  |
-## +-----+-----+-----+-----+
+## +-----+-----+-----+
+## |  1  |  2  |  3  |
+## +-----+-----+-----+
+## |  4  |  5  |  6  |
+## +-----+-----+-----+
 ## @end example
 ## @end group
 ## @end display
 ## @end ifinfo
 ## @seealso{plot}
 ## @end deftypefn
 
 ## Author: Vinayak Dutt <Dutt.Vinayak@mayo.EDU>
diff --git a/scripts/time/datevec.m b/scripts/time/datevec.m
--- a/scripts/time/datevec.m
+++ b/scripts/time/datevec.m
@@ -240,16 +240,17 @@ function [found, y, m, d, h, mi, s] = __
     f = strrep (f, "PM", "%p");
     f = strrep (f, "AM", "%p");
   else
     f = strrep (f, "HH", "%H");
   endif
   f = strrep (f, "MM", "%M");
   f = strrep (f, "SS", "%S");
 
+  ds, f
   [tm, nc] = strptime (ds, f);
 
   if (nc == length (ds) + 1)
     y = tm.year + 1900; m = tm.mon + 1; d = tm.mday;
     h = tm.hour; mi = tm.min; s = tm.sec + tm.usec / 1e6;
     found = true;
     rY = rindex (f, "%Y");
     ry = rindex (f, "%y");
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2007-10-19  John W. Eaton  <jwe@octave.org>
+
+	* pt-idx.cc (tree_index_expression::lvalue): Correctly compute
+	number of elements in lvalue expression when last indexing
+	element is ".".
+
+	* ov-cell.cc (octave_cell::subsasgn): If RHS is cs-list, don't
+	fail if shape of LHS is different.
+	* ov-struct.cc (octave_struct::subsasgn): Likewise.
+
 2007-10-19  Olli Saarela  <Olli.Saarela@kcl.fi>
 
 	* help.cc (Flookfor): Call print_usage instead of usage.
 	* DLD-FUNCTIONS/cellfun.cc (Fmat2cell): Likewise.
 
 2007-10-17  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/spchol.cc (Fsymbfact): Delete special code for METIS.
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -247,19 +247,22 @@ octave_cell::subsasgn (const std::string
 	case '{':
 	  {
 	    octave_value_list i = idx.front ();
 
 	    if (t_rhs.is_cs_list ())
 	      {
 		Cell tmp_cell = Cell (t_rhs.list_value ());
 
-		// FIXME -- shouldn't care if the dimensions of the
-		// RHS don't match the dimensions of the subscripted
-		// LHS.
+		// The shape of the RHS is irrelevant, we just want
+		// the number of elements to agree and to preserve the
+		// shape of the left hand side of the assignment.
+
+		if (numel () == tmp_cell.numel ())
+		  tmp_cell = tmp_cell.reshape (dims ());
 
 		octave_base_matrix<Cell>::assign (i, tmp_cell);
 	      }
 	    else
 	      octave_base_matrix<Cell>::assign (i, Cell (t_rhs));
 
 	    if (! error_state)
 	      {
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -362,19 +362,22 @@ octave_struct::subsasgn (const std::stri
 	    assert (key_idx.length () == 1);
 
 	    std::string key = key_idx(0).string_value ();
 
 	    if (t_rhs.is_cs_list ())
 	      {
 		Cell tmp_cell = Cell (t_rhs.list_value ());
 
-		// FIXME -- shouldn't care if the dimensions of the
-		// RHS don't match the dimensions of the subscriped
-		// LHS.
+		// The shape of the RHS is irrelevant, we just want
+		// the number of elements to agree and to preserve the
+		// shape of the left hand side of the assignment.
+
+		if (numel () == tmp_cell.numel ())
+		  tmp_cell = tmp_cell.reshape (dims ());
 
 		map.assign (key, tmp_cell);
 	      }
 	    else
 	      map.assign (key, t_rhs);
 
 	    if (! error_state)
 	      {
diff --git a/src/pt-idx.cc b/src/pt-idx.cc
--- a/src/pt-idx.cc
+++ b/src/pt-idx.cc
@@ -483,17 +483,28 @@ tree_index_expression::lvalue (void)
 		    idx.push_back (tidx);
 
 		    if (i == n-1)
 		      {
 			// Last indexing element.  Will this result in a
 			// comma-separated list?
 
 			if (first_retval_object.is_map ())
-			  retval.numel (first_retval_object.numel ());
+			  {
+			    octave_value_list tmp_list
+			      = first_retval_object.subsref (type, idx, 1);
+
+			    if (! error_state)
+			      {
+				octave_value val = tmp_list(0);
+
+				retval.numel (val.is_cs_list ()
+					      ? val.numel () : 1);
+			      }
+			  }
 		      }
 		  }
 		else
 		  eval_error ();
 	      }
 	      break;
 
 	    default:
