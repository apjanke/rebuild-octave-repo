# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1254736421 -7200
#      Mon Oct 05 11:53:41 2009 +0200
# Node ID 1c19877799d3718634e3e619907abf9880809c37
# Parent  126b49caba0d465920967308b2e89ef27af89666
improve error reports for computed assignment

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-10-05  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov.cc (octave_value::assign): Do not gripe "assignment failed" if
+	already griped about the binary operation.
+
 2009-10-05  Jaroslav Hajek  <highegg@gmail.com>
 
 	* pt-idx.cc (tree_index_expression::rvalue): When evaluating index
 	chain, split on chaining ()() and (){}.
 
 2009-10-05  Jaroslav Hajek  <highegg@gmail.com>
 
 	* pt-misc.cc (tree_argument_list::convert_to_const_vector):
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1274,22 +1274,22 @@ octave_value::assign (assign_op op, cons
     {
       if (type[0] == '.' && ! (is_map () || is_object ()))
 	{
 	  octave_value tmp = Octave_map ();
 	  retval = tmp.subsasgn (type, idx, t_rhs);
 	}
       else
 	retval = subsasgn (type, idx, t_rhs);
+
+      if (error_state)
+        gripe_assign_failed_or_no_method (assign_op_as_string (op_asn_eq),
+                                          type_name (), rhs.type_name ());
     }
 
-  if (error_state)
-    gripe_assign_failed_or_no_method (assign_op_as_string (op),
-				      type_name (), rhs.type_name ());
-
   return retval;
 }
 
 const octave_value&
 octave_value::assign (assign_op op, const octave_value& rhs)
 {
   if (op == op_asn_eq)
     // Regularize a null matrix if stored into a variable.
@@ -1327,20 +1327,16 @@ octave_value::assign (assign_op op, cons
           if (! error_state)
             {
               octave_value t = do_binary_op (binop, *this, rhs);
 
               if (! error_state)
                 operator = (t);
             }
         }
-
-      if (error_state)
-	gripe_assign_failed_or_no_method (assign_op_as_string (op),
-					  type_name (), rhs.type_name ());
     }
 
   return *this;
 }
 
 octave_idx_type
 octave_value::length (void) const
 {
