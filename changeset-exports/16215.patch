# HG changeset patch
# User Rik <rik@octave.org>
# Date 1362679333 28800
#      Thu Mar 07 10:02:13 2013 -0800
# Node ID 6fe6ac8bbfdb0e3f1a926de723f5b07453dc911a
# Parent  b1283d4c06c25dfa8d479364f396515a4b36ea53
test: Remove trailing spaces from ends of lines in test/ directory.

* test/bug-31371.tst, test/bug-36025/@testclass/testclass.m,
test/build-sparse-tests.sh,
test/classes/@CPrecedenceTester2/CPrecedenceTester2.m,
test/classes/@CPrecedenceTester3/CPrecedenceTester3.m,
test/classes/@Cork/click.m, test/classes/@Dork/Dork.m,
test/classes/@Dork/display.m, test/classes/@Dork/gack.m,
test/classes/@Gork/cork.m, test/classes/@Gork/gark.m,
test/classes/@Gork/subsasgn.m, test/classes/@Pork/Pork.m,
test/classes/@Pork/gurk.m, test/classes/@Snork/gick.m,
test/classes/@Spork/geek.m, test/error.tst, test/func.tst, test/index.tst,
test/io.tst, test/line-continue.tst, test/prefer.tst, test/switch.tst,
test/system.tst, test/try.tst: Remove trailing spaces from
ends of lines in test/ directory.

diff --git a/test/bug-31371.tst b/test/bug-31371.tst
--- a/test/bug-31371.tst
+++ b/test/bug-31371.tst
@@ -1,41 +1,41 @@
 %!test
 %! % Work around MATLAB bug where f(x)(y) is invalid syntax
 %! % (This bug does not apply to Octave)
 %!
 %! C = @(fcn,x) fcn(x);
 %! C2 = @(fcn,x,y) fcn(x,y);
-%! 
+%!
 %! % Church Booleans
 %! T = @(t,f) t;
 %! F = @(t,f) f;
-%! 
+%!
 %! % Church Numerals
 %! Zero  = @(fcn,x) x;
 %! One   = @(fcn,x) fcn(x);
 %! Two   = @(fcn,x) fcn(fcn(x));
 %! Three = @(fcn,x) fcn(fcn(fcn(x)));
 %! Four  = @(fcn,x) fcn(fcn(fcn(fcn(x))));
-%! 
+%!
 %! % Arithmetic Operations
 %! Inc = @(a) @(f,x) f(a(f,x)); % Increment
 %! Add = @(a,b) @(f,x) a(f,b(f,x));
 %! Mult = @(a,b) @(f,x) a(@(x) b(f,x),x);
 %! Dec = @(a) @(f,x) C(a(@(g) @(h) h(g(f)), @(u) x), @(u) u); % Decrement
 %! Sub = @(a,b) b(Dec, a);
-%! 
+%!
 %! % Renderer - Convert church numeral to "real" number
 %! Render = @(n) n(@(n) n+1,0);
-%! 
+%!
 %! % Predicates
 %! Iszero = @(n) n(@(x) F, T);
-%! 
+%!
 %! % Y combinator implements recursion
 %! Ycomb = @(f) C(@(g) f(@(x) C(g(g), x)), ...
 %!                @(g) f(@(x) C(g(g), x)));
 %!
 %! Factorial = Ycomb(@(f) @(n) C(C2(Iszero(n), ...
 %!                   @(d) One, @(d) Mult(n, f(Dec(n)))),0));
-%! 
+%!
 %! assert (Render (Factorial (Two)), 2)
 %! assert (Render (Factorial (Three)), 6)
 %! assert (Render (Factorial (Four)), 24)
diff --git a/test/bug-36025/@testclass/testclass.m b/test/bug-36025/@testclass/testclass.m
--- a/test/bug-36025/@testclass/testclass.m
+++ b/test/bug-36025/@testclass/testclass.m
@@ -1,4 +1,4 @@
 function m = testclass (x,y)
-  m = struct ('x',x,'y',y); 
-  m = class (m,"testclass"); 
+  m = struct ('x',x,'y',y);
+  m = class (m,"testclass");
 endfunction
diff --git a/test/build-sparse-tests.sh b/test/build-sparse-tests.sh
--- a/test/build-sparse-tests.sh
+++ b/test/build-sparse-tests.sh
@@ -14,74 +14,74 @@
 # FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 # for more details.
 # 
 # You should have received a copy of the GNU General Public License
 # along with Octave; see the file COPYING.  If not, see
 # <http://www.gnu.org/licenses/>.
 
 # Some tests are commented out because they are known to be broken!
-# Search for "# fails"   
+# Search for "# fails"
 
 # ./build_sparse_tests.sh preset
 #    creates sparse.tst with preset tests.
 #    Use "test sparse.tst" from octave to run the tests.
 #
 # ./build_sparse_tests.sh random
 #    Creates sprandom.tst with randomly generated matrices.
 #    Use "test sprandom.tst" from octave to run the tests.
 
 # build_sparse_tests.sh generates tests for real and complex sparse matrices.
 # Also, we want to run both fixed tests with known outputs (quick tests)
 # and longer tests with unknown outputs (thorough tests).  This requires
 # two sets of tests -- one which uses preset matrices and another which
 # uses randomly generated matrices.
 #
 # The tests are mostly identical for each case but the code is different,
-# so it is important that the tests be run on all cases.  Because our test 
+# so it is important that the tests be run on all cases.  Because our test
 # harness doesn't have support for looping or macros (it is only needed
 # for new data types), but sh does, we use sh to generate inline versions of
 # the tests for each case.
 #
 # Our 'macros' use shared variables as parameters.  This allows us to
-# for example define A complex and include all the unary ops tests, 
+# for example define A complex and include all the unary ops tests,
 # then set A=real(A) and include all the unary ops tests.  Thus the
 # same tests work for real and complex.  For binary tests it is even
 # more complicated because we want full X sparse, sparse X full and
 # sparse X sparse tested.
 #
 # We use the following macros:
 #
 #    gen_section
 #        place a separator in the test file
 #    gen_function
 #        define the function definion
 #    helper gen_specific
 #        specific tests such as error handling and null input
 #    helper gen_eat_zeros
 #        make sure sparse-scalar ops which generate 0 work
 #    gen_specific_tests
-#        specific and eat zeros tests 
+#        specific and eat zeros tests
 #    helper gen_ordering_tests
 #        ordered comparison operators for real valued tests
 #    helper gen_sparsesparse_ordering_tests
 #        ordered comparison operators for real valued sparse-sparse tests
 #    helper gen_elementop_tests
 #        element-wise matrix binary operators, including scalar-matrix ops.
 #        horizontal/vertical concatenation are here as well.
 #    helper gen_sparsesparse_elementop_tests
 #        element-wise matrix binary operators, for sparse-sparse ops.
 #        horizontal/vertical concatenation are here as well.
 #    helper gen_divop_tests
-#        left and right matrix division operators of rectangular matrices. 
+#        left and right matrix division operators of rectangular matrices.
 #        Needs QR solvers
 #    helper gen_square_divop_tests
-#        left and right matrix division operators of square matrices. 
+#        left and right matrix division operators of square matrices.
 #    helper gen_matrixop_tests
-#        rectangular matrix binary operators: * 
+#        rectangular matrix binary operators: *
 #    helper gen_matrixdiag_tests
 #        Tests extract of diag and creation of diagonal matrices using
 #        diag and spdiags functions
 #    helper gen_matrixreshape_tests
 #        Test the reshape function on sparse matrices
 #    helper print_mapper_test
 #        sub-helper function of gen_mapper_tests to print individual tests
 #    helper gen_mapper_tests
@@ -141,17 +141,17 @@ cat >>$TESTS <<EOF
 EOF
 }
 
 
 # =======================================================
 # Specific preset tests
 
 # =======================================================
-# If a sparse operation yields zeros, then those elements 
+# If a sparse operation yields zeros, then those elements
 # of the returned sparse matrix should be eaten.
 gen_eat_zeros() {
 cat >>$TESTS <<EOF
 %% Make sure newly introduced zeros get eaten
 %!assert (nnz (sparse ([bf,bf,1]).^realmax), 1)
 %!assert (nnz (sparse ([1,bf,bf]).^realmax), 1)
 %!assert (nnz (sparse ([bf,bf,bf]).^realmax), 0)
 
@@ -400,17 +400,17 @@ gen_matrixdiag_tests() {
 %!assert (diag (as(:)), sparse (diag (af(:))))
 %!assert (diag (as(:),1), sparse (diag (af(:),1)))
 %!assert (diag (as(:),-1), sparse (diag (af(:),-1)))
 %!assert (diag (as(:)'), sparse (diag (af(:)')))
 %!assert (diag (as(:)',1), sparse (diag (af(:)',1)))
 %!assert (diag (as(:)',-1), sparse (diag (af(:)',-1)))
 %!assert (spdiags (as,[0,1]), [diag(af,0), diag(af,1)])
 %!test
-%! [tb,tc] = spdiags (as); 
+%! [tb,tc] = spdiags (as);
 %! assert (spdiags (tb,tc,sparse (zeros (size (as)))), as);
 %! assert (spdiags (tb,tc,size (as,1),size (as,2)), as);
 
 EOF
 }
 
 # test matrix reshape operations
 gen_matrixreshape_tests() {
@@ -632,17 +632,17 @@ EOF
 gen_square_tests() {
 # The \ and / operator tests on square matrices
     gen_square_divop_tests
 
     cat >>$TESTS <<EOF
 %!testif HAVE_UMFPACK
 %! assert(det(bs+speye(size(bs))), det(bf+eye(size(bf))), 100*eps*abs(det(bf+eye(size(bf)))))
 
-%!testif HAVE_UMFPACK 
+%!testif HAVE_UMFPACK
 %! [l,u] = lu (sparse ([1,1;1,1]));
 %! assert (l*u, [1,1;1,1], 10*eps);
 
 %!testif HAVE_UMFPACK
 %! [l,u] = lu (sparse ([1,1;1,1+i]));
 %! assert (l, sparse ([1,2,2],[1,1,2],1), 10*eps);
 %! assert (u, sparse ([1,1,2],[1,2,2],[1,1,1i]), 10*eps);
 
@@ -696,17 +696,17 @@ gen_square_tests() {
 EOF
 }
 
 # Cholesky tests
 gen_cholesky_tests() {
     cat >>$TESTS <<EOF
 %!testif HAVE_CHOLMOD
 %! assert (chol (bs)'*chol (bs), bs, 1e-10);
-%!testif HAVE_CHOLMOD 
+%!testif HAVE_CHOLMOD
 %! assert (chol (bs,'lower')*chol (bs,'lower')', bs, 1e-10);
 %!testif HAVE_CHOLMOD
 %! assert (chol (bs,'lower'), chol (bs)', 1e-10);
 
 %!testif HAVE_CHOLMOD   # Return Partial Cholesky factorization
 %! [RS,PS] = chol (bs);
 %! assert (RS'*RS, bs, 1e-10);
 %! assert (PS, 0);
@@ -1021,32 +1021,32 @@ cat >>$TESTS <<EOF
 
 EOF
 
 cat >>$TESTS <<EOF
 %% QR solver tests
 
 %!function f (a, sz, feps)
 %! b = randn (sz);
-%! x = a \ b; 
+%! x = a \ b;
 %! assert (a * x, b, feps);
 %! b = randn (sz) + 1i*randn (sz);
-%! x = a \ b;  
+%! x = a \ b;
 %! assert (a * x, b, feps);
 %! b = sprandn (sz(1),sz(2),0.2);
 %! x = a \ b;
 %! assert (sparse (a * x), b, feps);
 %! b = sprandn (sz(1),sz(2),0.2) + 1i*sprandn (sz(1),sz(2),0.2);
-%! x = a \ b; 
+%! x = a \ b;
 %! assert (sparse (a * x), b, feps);
 %!endfunction
 %!testif HAVE_UMFPACK
 %! a = alpha*sprandn (10,11,0.2) + speye (10,11);
 %! f (a,[10,2],1e-10);
-%! ## Test this by forcing matrix_type, as can't get a certain 
+%! ## Test this by forcing matrix_type, as can't get a certain
 %! ## result for over-determined systems.
 %! a = alpha*sprandn (10,10,0.2) + speye (10,10);
 %! matrix_type (a, "Singular");
 %! f (a,[10,2],1e-10);
 
 %% Rectanguar solver tests that don't use QR
 
 %!test
@@ -1144,17 +1144,17 @@ EOF
 # Putting it all together: defining the combined tests
 
 
 # initial function
 gen_function
 gen_section
 
 # specific tests
-if $preset; then 
+if $preset; then
     gen_specific_tests
     gen_section
 fi
 
 # scalar operations
 echo '%!shared as,af,bs,bf' >> $TESTS
 if $preset; then
     echo '%!test af=[1+1i,2-1i,0,0;0,0,0,3+2i;0,0,0,4];' >> $TESTS
diff --git a/test/classes/@CPrecedenceTester2/CPrecedenceTester2.m b/test/classes/@CPrecedenceTester2/CPrecedenceTester2.m
--- a/test/classes/@CPrecedenceTester2/CPrecedenceTester2.m
+++ b/test/classes/@CPrecedenceTester2/CPrecedenceTester2.m
@@ -1,15 +1,15 @@
 function x = CPrecedenceTester2 (flag)
 
   x = struct ('useless_data', pi^2);
   x = class (x, 'CPrecedenceTester2');
 
-  switch flag,
-    case 1, % CPrecedencetester2 > Snork
+  switch flag
+    case 1  % CPrecedencetester2 > Snork
       superiorto ('Snork');
-    case 2, % CPrecedencetester2 < Snork
+    case 2  % CPrecedencetester2 < Snork
       inferiorto ('Snork');
-    otherwise,
+    otherwise
       error ('Incorrect value for argument flag: %d', flag);
   end
 
 end
diff --git a/test/classes/@CPrecedenceTester3/CPrecedenceTester3.m b/test/classes/@CPrecedenceTester3/CPrecedenceTester3.m
--- a/test/classes/@CPrecedenceTester3/CPrecedenceTester3.m
+++ b/test/classes/@CPrecedenceTester3/CPrecedenceTester3.m
@@ -1,15 +1,15 @@
 function x = CPrecedenceTester3 (flag)
 
   x = struct ('useless_data', pi^3);
   x = class (x, 'CPrecedenceTester3');
 
-  switch flag,
-    case 1, % CPrecedencetester3 > Snork
+  switch flag
+    case 1  % CPrecedencetester3 > Snork
       superiorto ('Snork');
-    case 2, % CPrecedencetester3 < Snork
+    case 2  % CPrecedencetester3 < Snork
       inferiorto ('Snork');
-    otherwise,
+    otherwise
       error ('Incorrect value for argument flag: %d', flag);
   end
 
 end
diff --git a/test/classes/@Cork/click.m b/test/classes/@Cork/click.m
--- a/test/classes/@Cork/click.m
+++ b/test/classes/@Cork/click.m
@@ -1,10 +1,10 @@
 function out = click (in, val)
 
-  if (nargin == 1) 
+  if (nargin == 1)
     out = in.click;
   else
     in.click = val;
     out = in;
   end
 
 end
diff --git a/test/classes/@Dork/Dork.m b/test/classes/@Dork/Dork.m
--- a/test/classes/@Dork/Dork.m
+++ b/test/classes/@Dork/Dork.m
@@ -8,11 +8,11 @@ function s = Dork (gick, gack)
       s0 = Snork ();
     elseif (nargin == 1)
       s0 = Snork (gick);
     else
       s0 = Snork (gick);
       s.gack = gack;
     end
     s = class (s, 'Dork', s0);
-   end 
+   end
 
 end
diff --git a/test/classes/@Dork/display.m b/test/classes/@Dork/display.m
--- a/test/classes/@Dork/display.m
+++ b/test/classes/@Dork/display.m
@@ -1,9 +1,9 @@
-function display (s) 
+function display (s)
 %  Display the critical info for an amplifier
 
    gick = get (s, 'gick');
    disp ([inputname(1),'.gick = ']);
    disp (' ');
    disp (gick);
    disp (' ');
    disp ([inputname(1),'.gack = ']);
diff --git a/test/classes/@Dork/gack.m b/test/classes/@Dork/gack.m
--- a/test/classes/@Dork/gack.m
+++ b/test/classes/@Dork/gack.m
@@ -1,10 +1,10 @@
 function out = gack (in, val)
 
-  if (nargin == 1) 
+  if (nargin == 1)
     out = in.gack;
   else
     in.gack = val;
     out = in;
   end
 
 end
diff --git a/test/classes/@Gork/cork.m b/test/classes/@Gork/cork.m
--- a/test/classes/@Gork/cork.m
+++ b/test/classes/@Gork/cork.m
@@ -1,10 +1,10 @@
 function out = cork (in, val)
 
-  if (nargin == 1) 
+  if (nargin == 1)
     out = in.Cork;
   else
     in.Cork = val;
     out = in;
   end
 
 end
diff --git a/test/classes/@Gork/gark.m b/test/classes/@Gork/gark.m
--- a/test/classes/@Gork/gark.m
+++ b/test/classes/@Gork/gark.m
@@ -1,10 +1,10 @@
 function out = gark (in, val)
 
-  if (nargin == 1) 
+  if (nargin == 1)
     out = in.gark;
   else
     in.gark = val;
     out = in;
   end
 
 end
diff --git a/test/classes/@Gork/subsasgn.m b/test/classes/@Gork/subsasgn.m
--- a/test/classes/@Gork/subsasgn.m
+++ b/test/classes/@Gork/subsasgn.m
@@ -1,10 +1,10 @@
 function g = subsasgn (g, s, x)
 
   switch s.type
   case '.'
     switch s.subs
     case 'gyrk'
-      g.gyrk = x; 
+      g.gyrk = x;
   end
 
 end
diff --git a/test/classes/@Pork/Pork.m b/test/classes/@Pork/Pork.m
--- a/test/classes/@Pork/Pork.m
+++ b/test/classes/@Pork/Pork.m
@@ -8,12 +8,12 @@ function s = Pork (geek, gurk)
       s0 = Spork ();
     elseif (nargin == 1)
       s0 = Spork (geek);
     else
       s0 = Spork (geek);
       s.gurk = gurk;
     end
     s = class (s, 'Pork', s0);
-   end 
+   end
    superiorto ('Dork');
 
 end
diff --git a/test/classes/@Pork/gurk.m b/test/classes/@Pork/gurk.m
--- a/test/classes/@Pork/gurk.m
+++ b/test/classes/@Pork/gurk.m
@@ -1,10 +1,10 @@
 function out = gurk (in, val)
 
-  if (nargin == 1) 
+  if (nargin == 1)
     out = in.gurk;
   else
     in.gurk = val;
     out = in;
   end
 
 end
diff --git a/test/classes/@Snork/gick.m b/test/classes/@Snork/gick.m
--- a/test/classes/@Snork/gick.m
+++ b/test/classes/@Snork/gick.m
@@ -1,10 +1,10 @@
 function out = gick (in, val)
 
-  if (nargin == 1) 
+  if (nargin == 1)
     out = in.gick;
   else
     in.gick = val;
     out = in;
   end
 
 end
diff --git a/test/classes/@Spork/geek.m b/test/classes/@Spork/geek.m
--- a/test/classes/@Spork/geek.m
+++ b/test/classes/@Spork/geek.m
@@ -1,10 +1,10 @@
 function out = geek (in, val)
 
-  if (nargin == 1) 
+  if (nargin == 1)
     out = in.geek;
   else
     in.geek = val;
     out = in;
   end
 
 end
diff --git a/test/error.tst b/test/error.tst
--- a/test/error.tst
+++ b/test/error.tst
@@ -14,30 +14,30 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## Test %!error usage
 
 %% test/octave.test/error/error-1.m
-%!function g () 
+%!function g ()
 %!  error ("foo");
 %!endfunction
-%!function f () 
-%!  g (); 
+%!function f ()
+%!  g ();
 %!endfunction
 %!error <foo> f ()
 
 %% test/octave.test/error/error-2.m
-%!function g () 
+%!function g ()
 %!  error ("foo\n");
 %!endfunction
-%!function f () 
-%!  g 
+%!function f ()
+%!  g
 %!endfunction
 %!error <foo> f ()
 
 %% test/octave.test/error/error-3.m
 %!error error ()
 
 %% test/octave.test/error/error-4.m
 %!error <foo> error ("foo\n")
@@ -63,30 +63,30 @@
 %! warning ("off", "backtrace");
 %! st.state = "off";
 %! assert (warning ("query", "backtrace"), st);
 %! warning (ws.state, "backtrace");
 
 ## Test usage() function
 
 %% test/octave.test/error/usage-1.m
-%!function g () 
+%!function g ()
 %!  usage ("foo");
 %!endfunction
-%!function f () 
-%!  g (); 
+%!function f ()
+%!  g ();
 %!endfunction
 %!error <foo> f ()
 
 %% test/octave.test/error/usage-2.m
-%!function g () 
+%!function g ()
 %!  usage ("foo");
 %!endfunction
-%!function f () 
-%!  g 
+%!function f ()
+%!  g
 %!endfunction
 %!error <foo> f ()
 
 %% test/octave.test/error/usage-3.m
 %!error usage ()
 
 %% test/octave.test/error/usage-4.m
 %!error <foo> usage ("foo\n")
diff --git a/test/func.tst b/test/func.tst
--- a/test/func.tst
+++ b/test/func.tst
@@ -11,18 +11,18 @@
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
-## This piece of test code ensures that all operations which work on 
-## dimensions alone (squeeze, triu, etc.) work for all objects and 
+## This piece of test code ensures that all operations which work on
+## dimensions alone (squeeze, triu, etc.) work for all objects and
 ## preserve type. Even if the object is an empty matrix. This code is
 ## not to check that the function itself returns teh correct result,
 ## just that the results are consistent for all types.
 
 %!function __fntestfunc__ (fn, mn, varargin)
 %!  typ = {"double", "complex", "logical", "sparse", "complex sparse", ...
 %!         "logical sparse", "int8", "int16", "int32", "int64", "uint8", ...
 %!         "uint16", "uint32", "uint64", "char", "cell", "struct", ...
diff --git a/test/index.tst b/test/index.tst
--- a/test/index.tst
+++ b/test/index.tst
@@ -155,17 +155,17 @@
 %! assert (b, reshape (a, [1,2,2]));
 
 %!test
 %! a(1,1:4,2) = reshape (1:4, [1,1,4]);
 %! b(:,:,2) = 1:4;
 %! assert (a, b);
 
 %!test
-%! a(:,:,:) = 1:4; 
+%! a(:,:,:) = 1:4;
 %! assert (a, [1:4]);
 
 %!test
 %! a(:,:,1) = 1:4;;
 %! assert (a, [1:4]);
 
 %!test
 %! a(:,:,1) = [1:4]';
diff --git a/test/io.tst b/test/io.tst
--- a/test/io.tst
+++ b/test/io.tst
@@ -11,17 +11,17 @@
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
-## FIXME -- we should skip (or mark as an expected failure) the test for
+## FIXME: we should skip (or mark as an expected failure) the test for
 ## saving sparse matrices to MAT files when using 64-bit indexing since
 ## that is not implemented yet.
 
 %% test/octave.test/io/load-save.m
 %!function [ret, files] = testls (input)
 %!  ## flag a1 global so as to test the storage of global flags
 %!  global a1;
 %!
@@ -114,21 +114,21 @@
 %!        endif
 %!      endif
 %!
 %!      assert ([a7], [b7], tol);
 %!
 %!      if (! isequal (a8, b8))
 %!        error ("failed: %s struct", file);
 %!      endif
-%!      
+%!
 %!      if (! isequal (a9, b9))
 %!        error ("failed: %s cell", file);
 %!      endif
-%!      
+%!
 %!      if (! isequal (a10, b10))
 %!        error ("failed: %s string", file);
 %!      endif
 %!
 %!      if (! isequal (a11, b11))
 %!        error ("failed: %s int8", file);
 %!      endif
 %!
@@ -166,43 +166,43 @@
 %!      ## Test for global flags
 %!      if (! isglobal ("a1") || isglobal ("a2") || isglobal ("a3")
 %!          || isglobal ("a4") || isglobal ("a5") || isglobal ("a6")
 %!          || isglobal ("a7") || isglobal ("a8") || isglobal ("a9")
 %!          || isglobal ("a10") || isglobal ("a11") || isglobal ("a12")
 %!          || isglobal ("a13") || isglobal ("a14") || isglobal ("a15")
 %!          || isglobal ("a16") || isglobal ("a17") || isglobal ("a18")
 %!          || isglobal ("a19") || isglobal ("a20"))
-%!        error ("failed: %s global test", file); 
+%!        error ("failed: %s global test", file);
 %!      endif
 %!    endfor
 %!  endif
 %!
 %!  ret = 1;
 %!endfunction
 
 %!test
-%! 
+%!
 %! [save_status, save_files] = testls (0);
 %! [load_status, load_files] = testls (1);
-%! 
+%!
 %! for f = [save_files, load_files]
 %!   unlink (f{1});
 %! endfor
-%! 
+%!
 %! assert (save_status && load_status);
 
 %!test
-%! 
+%!
 %! STR.scalar_fld = 1;
 %! STR.matrix_fld = [1.1,2;3,4];
 %! STR.string_fld = "Octave";
 %! STR.struct_fld.x = 0;
 %! STR.struct_fld.y = 1;
-%! 
+%!
 %! save struct.dat -struct STR;
 %! STR = load ("struct.dat");
 %!
 %! assert (STR.scalar_fld == 1 && ...
 %!         STR.matrix_fld == [1.1,2;3,4] && ...
 %!         STR.string_fld == "Octave" && ...
 %!         STR.struct_fld.x == 0 && ...
 %!         STR.struct_fld.y == 1 );
@@ -277,17 +277,17 @@
 %! assert (msg, "");
 %! assert (pos, 6);
 
 %% test/octave.test/io/sscanf-1.m
 %!test
 %! [a, b, c] = sscanf ("1.2 3 foo", "%f%d%s", "C");
 %! [v1, c1, m1] = sscanf ("1 2 3 4 5 6", "%d");
 %! [v2, c2, m2] = sscanf ("1 2 bar 3 4 5 6", "%d");
-%! 
+%!
 %! assert ((a == 1.2 && b == 3 && c == "foo"
 %! && v1 == [1; 2; 3; 4; 5; 6] && c1 == 6 && ischar (m1)
 %! && v2 == [1; 2] && c2 == 2 && ischar (m2)));
 
 %% test/octave.test/io/sscanf-2.m
 %!error <Invalid call to sscanf> sscanf ()
 
 %% test/octave.test/io/sscanf-3.m
@@ -319,31 +319,31 @@
 %!error printf (1)
 
 %% test/octave.test/io/printf-3.m
 %!error <Invalid call to printf> printf ()
 
 %% test/octave.test/io/sprintf-1.m
 %!test
 %! [s, msg, status] = sprintf ("%s: %d\n", "test", 1);
-%! 
+%!
 %! assert (s == "test: 1\n" && ischar (msg) && status == 8);
 
 %% test/octave.test/io/sprintf-2.m
 %!error sprintf (1)
 
 %% test/octave.test/io/sprintf-3.m
 %!error <Invalid call to sprintf> sprintf ()
 
 %% test/octave.test/io/fopen-1.m
 %!test
 %! arch_list = ["native"; "ieee-le"; "ieee-be"; "vaxd"; "vaxg"; "cray"];
-%! 
+%!
 %! status = 1;
-%! 
+%!
 %! for i = 1:6
 %!   arch = deblank (arch_list (i,:));
 %!   for j = 1:6
 %!     if (j == 1)
 %!       mode_list = ["w"; "r"; "a"];
 %!     elseif (j == 2)
 %!       mode_list = ["w+"; "r+"; "a+"];
 %!     endif
@@ -381,17 +381,17 @@
 %!     if (status == 0)
 %!       break;
 %!     endif
 %!   endfor
 %!   if (status == 0)
 %!     break;
 %!   endif
 %! endfor
-%! 
+%!
 %! assert (status == 1);
 
 %% test/octave.test/io/fopen-2.m
 %!test
 %! s.a = 1;
 %! fail ("fopen (s)");
 
 %% test/octave.test/io/fopen-3.m
@@ -428,40 +428,40 @@
 %% test/octave.test/io/binary-io-1.m
 %!test
 %! type_list = ["char"; "char*1"; "integer*1"; "int8";
 %! "schar"; "signed char"; "uchar"; "unsigned char";
 %! "short"; "ushort"; "unsigned short"; "int";
 %! "uint"; "unsigned int"; "long"; "ulong"; "unsigned long";
 %! "float"; "float32"; "real*4"; "double"; "float64";
 %! "real*8"; "int16"; "integer*2"; "int32"; "integer*4"];
-%! 
+%!
 %! n = rows (type_list);
 %! nm = tmpnam ();
 %! id = fopen (nm, "wb");
 %! if (id > 0)
 %!   for i = 1:n
 %!     fwrite (id, i, deblank (type_list(i,:)));
 %!   endfor
 %!
 %!   fclose (id);
-%!   
+%!
 %!   id = fopen (nm, "rb");
 %!   if (id > 0)
 %!     x = zeros (1, n);
 %!     for i = 1:n
 %!       x(i) = fread (id, [1, 1], deblank (type_list(i,:)));
 %!     endfor
-%!     
+%!
 %!     if (x == 1:n)
 %!       __printf_assert__ ("ok\n");
 %!     endif
 %!   endif
 %! endif
-%! 
+%!
 %! unlink (nm);
 %! assert (__prog_output_assert__ ("ok"));
 
 %% test/octave.test/io/file-pos-1.m
 %!test
 %! nm = tmpnam ();
 %! id = fopen (nm, "wb");
 %! if (id > 0)
diff --git a/test/line-continue.tst b/test/line-continue.tst
--- a/test/line-continue.tst
+++ b/test/line-continue.tst
@@ -25,17 +25,17 @@
 %! y = [a... # comments here ok
 %! b];
 %! assert (y, x);
 
 %!test
 %! x = [1;2];
 %! y = [a... # comments here ok
 %! ;\
-%! 
+%!
 %! b];
 %! assert (y, x);
 
 %!assert (1 + ...
 %! 2 - \# comments here ok
 %! 3 / ... # comments here ok
 %! -1,6);
 
@@ -53,19 +53,19 @@
 
 %!test
 %!assert (1 == 1
 %! && 2 == 2
 %! || 3 == 5);
 
 %!test
 %! x = [1, ...
-%! 
+%!
 %! ...
-%! 
+%!
 %! 2];
 %! y = [1;2];
 %! assert (y, x);
 
 %!test
 %! x = [1 ,...
 %! 2];
 %! y = [1,2];
diff --git a/test/prefer.tst b/test/prefer.tst
--- a/test/prefer.tst
+++ b/test/prefer.tst
@@ -90,24 +90,24 @@
 %! warning ("on", "Ocave:imag-to-real");
 %! fail ("eye (1+i)", "warning");
 %! warning (wir.state, "Ocave:imag-to-real");
 
 %% test/octave.test/prefer/prefer-17.m
 %!test
 %! wrre = warning ("query", "Octave:resize-on-range-error");
 %! warning ("off", "Octave:resize-on-range-error");
-%! clear a; 
-%! a(2) = 1; a(3) = 2; 
+%! clear a;
+%! a(2) = 1; a(3) = 2;
 %! assert (all (a == [0,1,2]));
 %! warning (wrre.state, "Octave:resize-on-range-error");
 
 %% test/octave.test/prefer/prefer-18.m
 %!test
-%! clear a; 
+%! clear a;
 %! a(1) = 1; a(2) = 2;
 %! assert (all (a == [1,2]));
 
 %% test/octave.test/prefer/prefer-21.m
 %!test
 %! ped = print_empty_dimensions ();
 %! print_empty_dimensions (0);
 %! a = cell (1, 1);
@@ -152,29 +152,29 @@
 %! nm = tmpnam ();
 %! save ("-text", nm, "x");
 %! clear x;
 %! load (nm);
 %! unlink (nm);
 %! assert (x, 3.1416);
 %! save_precision (sp);
 
-%% FIXME: How to capture standard output for comparison? 
+%% FIXME: How to capture standard output for comparison?
 %% test/octave.test/prefer/prefer-29.m
 %!function f ()
 %! 1
 %!endfunction
 %!#test
 %! sf = silent_functions ();
 %! silent_functions (0);
 %! f
 %! assert (??);
 %! silent_functions (sf);
 
-%% FIXME Same problem as above!!!
+%% FIXME: Same problem as above!!!
 %% test/octave.test/prefer/prefer-30.m
 %!function f ()
 %! 1
 %!endfunction
 %!#test
 %! sf = silent_functions ();
 %! silent_functions (1);
 %! f
diff --git a/test/switch.tst b/test/switch.tst
--- a/test/switch.tst
+++ b/test/switch.tst
@@ -16,76 +16,76 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 %% test/octave.test/switch/switch-1.m
 %!test
 %! a = 1;
 %! b = 2;
 %! c = 3;
-%! 
+%!
 %! switch 0 case 1 x = a; case 2 x = b; otherwise x = c; endswitch
 %! switch 1 case 1 y = a; case 2 y = b; otherwise y = c; endswitch
 %! switch 2 case 1 z = a; case 2 z = b; otherwise z = c; endswitch
 %! switch 3 case 1 p = a; case 2 p = b; otherwise p = c; endswitch
-%! 
+%!
 %! assert (x == c && y == a && z == b && p == c);
 
 %% test/octave.test/switch/switch-2.m
 %!test
 %! a = 1;
 %! b = 2;
 %! c = 3;
-%! 
+%!
 %! x = zeros (1, 4);
-%! 
+%!
 %! k = 1;
-%! 
+%!
 %! for i = 0:3
 %! switch (i)
 %!   case a
 %!    x(k) = a;
 %!   case b
 %!    x(k) = b;
 %!   otherwise
 %!    x(k) = c;
 %!   endswitch
 %!   k++;
 %! endfor
-%! 
+%!
 %! assert (all (x == [3, 1, 2, 3]));
 
 %% test/octave.test/switch/switch-3.m
 %!test
 %! a = 1;
 %! b = 2;
 %! c = 3;
-%! 
+%!
 %! x = zeros (1, 4);
-%! 
+%!
 %! k = 1;
-%! 
+%!
 %! for i = 0:3
 %!   switch (i)
 %!   case a
 %!    x(k) = a;
 %!   endswitch
 %!   k++;
 %! endfor
-%! 
+%!
 %! assert (all (x == [0, 1, 0, 0]));
 
 %!test
 %! a = 1;
 %!
 %! switch 1
 %! otherwise
 %!   a = 2;
 %! endswitch
-%! 
+%!
 %! assert (a == 2);
 
 
 %% test/octave.test/switch/switch-4.m
 %!error <syntax error> eval ("switch endswitch")
 
 %% test/octave.test/switch/switch-5.m
 %!error <syntax error> eval ("switch case endswitch")
diff --git a/test/system.tst b/test/system.tst
--- a/test/system.tst
+++ b/test/system.tst
@@ -150,24 +150,24 @@
 %% test/octave.test/system/umask-1.m
 %!test
 %! orig_umask = umask (0);
 %! nm = tmpnam ();
 %! id = fopen (nm, "wb");
 %! s1 = stat (nm);
 %! fclose (id);
 %! unlink (nm);
-%! 
+%!
 %! umask (777);
 %! nm = tmpnam ();
 %! id = fopen (nm, "wb");
 %! s2 = stat (nm);
 %! fclose (id);
 %! unlink (nm);
-%! 
+%!
 %! assert (deblank (s1.modestr), "-rw-rw-rw-");
 %! assert (deblank (s2.modestr), "----------");
 %! # Restore original umask value
 %! umask (orig_umask);
 
 %% test/octave.test/system/umask-2.m
 %!error <Invalid call to umask> umask ()
 
@@ -367,61 +367,61 @@
 %!error cd (1)
 
 %% test/octave.test/system/pwd-1.m
 %!assert (ischar (pwd ()))
 
 %% test/octave.test/system/getpwent-1.m
 %!testif HAVE_GETPWENT
 %! s = getpwent ();
-%! endpwent (); 
+%! endpwent ();
 %! assert ((isstruct (s)
 %! && isfield (s, "name")
 %! && isfield (s, "passwd")
 %! && isfield (s, "uid")
 %! && isfield (s, "gid")
 %! && isfield (s, "gecos")
 %! && isfield (s, "dir")
 %! && isfield (s, "shell")));
 
 %% test/octave.test/system/getpwent-2.m
 %!error <Invalid call to getpwent> getpwent (1)
 
 %% test/octave.test/system/getpwuid-1.m
 %!testif HAVE_GETPWUID
 %! x = getpwent ();
 %! y = getpwuid (x.uid);
-%! endpwent (); 
+%! endpwent ();
 %! assert (strcmp (x.name, y.name) && x.uid == y.uid && x.gid == y.gid);
 
 %% test/octave.test/system/getpwuid-2.m
 %!error <Invalid call to getpwuid> getpwuid ()
 
 %% test/octave.test/system/getpwuid-3.m
 %!error <Invalid call to getpwuid> getpwuid (1, 2)
 
 %% test/octave.test/system/getpwnam-1.m
 %!testif HAVE_GETPWNAM
 %! x = getpwent ();
 %! y = getpwnam (x.name);
-%! endpwent (); 
+%! endpwent ();
 %! assert (strcmp (x.name, y.name) && x.uid == y.uid && x.gid == y.gid);
 
 %% test/octave.test/system/getpwnam-2.m
 %!error <Invalid call to getpwnam> getpwnam ()
 
 %% test/octave.test/system/getpwnam-3.m
 %!error <Invalid call to getpwnam> getpwnam ("foo", 1)
 
 %% test/octave.test/system/setpwent-1.m
 %!testif HAVE_SETPWENT
 %! x = getpwent ();
 %! setpwent ();
 %! y = getpwent ();
-%! endpwent (); 
+%! endpwent ();
 %! assert (strcmp (x.name, y.name) && x.uid == y.uid && x.gid == y.gid);
 
 %% test/octave.test/system/setpwent-2.m
 %!error <Invalid call to setpwent> setpwent (1)
 
 %% test/octave.test/system/endpwent-1.m
 %!error <Invalid call to endpwent> endpwent (1)
 
diff --git a/test/try.tst b/test/try.tst
--- a/test/try.tst
+++ b/test/try.tst
@@ -63,17 +63,17 @@
 %!   a;
 %!   error ("Shoudn't get here");
 %! catch
 %!   assert (lasterr()(1:13), "'a' undefined");
 %! end_try_catch
 %! assert (lasterr()(1:13), "'a' undefined");
 
 %% test/octave.test/try/try-6.m
-%!test 
+%!test
 %! try
 %!   error ("user-defined error");
 %! catch
 %!   assert (lasterr, "user-defined error");
 %! end_try_catch
 
 %% test/octave.test/try/try-7.m
 %!function ms = mangle (s)
