# HG changeset patch
# User jwe
# Date 1067613105 0
#      Fri Oct 31 15:11:45 2003 +0000
# Node ID db5a24d54915e8674623d03e3c363b05f94a6e26
# Parent  f99c430316cdeea360d2034f94918b08bacd5fd5
[project @ 2003-10-31 15:11:45 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,16 @@
 2003-10-31  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* ov-cell.cc (octave_cell::subsref): When indexing with '{', quit
+	early if an error occurs in do_index_op.
+
+	* ov.cc (octave_value::next_subsref): Don't do anything if
+	error_state is true.
+
 	* cutils.c (octave_usleep) [HAVE_SELECT]: Introduce new local
 	scope for declaration of delay.
 	[HAVE_POLL]: Likewise, for delay and pfd.
 
 	* ov-base.cc (octave_base_value::bool_array_value):
 	Function takes no args.
 	* ov-base.h: Likewise, for decl.
 	* ov-bool-mat.h (boolNDArray::bool_array_value): Likewise.
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -62,33 +62,36 @@ octave_cell::subsref (const std::string&
     case '(':
       retval = do_index_op (idx.front ());
       break;
 
     case '{':
       {
 	octave_value tmp = do_index_op (idx.front ());
 
-	Cell tcell = tmp.cell_value ();
-
-	if (tcell.length () == 1)
-	  retval = tcell(0,0);
-	else
+	if (! error_state)
 	  {
-	    int nr = tcell.rows ();
-	    int nc = tcell.columns ();
-	    octave_value_list lst (nr * nc, octave_value ());
-	    int k = 0;
-	    for (int j = 0; j < nc; j++)
-	      for (int i = 0; i < nr; i++)
-		{
-		  OCTAVE_QUIT;
-		  lst(k++) = tcell(i,j);
-		}
-	    retval = octave_value (lst, true);
+	    Cell tcell = tmp.cell_value ();
+
+	    if (tcell.length () == 1)
+	      retval = tcell(0,0);
+	    else
+	      {
+		int nr = tcell.rows ();
+		int nc = tcell.columns ();
+		octave_value_list lst (nr * nc, octave_value ());
+		int k = 0;
+		for (int j = 0; j < nc; j++)
+		  for (int i = 0; i < nr; i++)
+		    {
+		      OCTAVE_QUIT;
+		      lst(k++) = tcell(i,j);
+		    }
+		retval = octave_value (lst, true);
+	      }
 	  }
       }
       break;
 
     case '.':
       {
 	std::string nm = type_name ();
 	error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -685,17 +685,17 @@ octave_value::subsref (const std::string
     return rep->subsref (type, idx, nargout);
 }
 
 octave_value
 octave_value::next_subsref (const std::string& type,
 			    const std::list<octave_value_list>& idx,
 			    size_t skip) 
 {
-  if (idx.size () > skip)
+  if (! error_state && idx.size () > skip)
     {
       std::list<octave_value_list> new_idx (idx);
       for (size_t i = 0; i < skip; i++)
 	new_idx.erase (new_idx.begin ());
       return subsref (type.substr (skip), new_idx);
     }
   else
     return *this;
