# HG changeset patch
# User Rik <rik@octave.org>
# Date 1473607253 25200
#      Sun Sep 11 08:20:53 2016 -0700
# Node ID 6149f6b34cbcceb16e994bb4434e3782515c8eb1
# Parent  1d2960b5efe6debb292cd380dee1775726cfa3b7
Change all mxIs* functions in MEX API to return bool rather than int.

* bootstrap.conf: Add stdbool to the list of gnulib modules needed.

* mex.h: Remove CPP code to typedef int to bool when bool does not exist.

* mexproto.h: #include <stdbool.h> when using a C compiler.
Change all prototypes of mxIs* functions to return bool.

* mex.cc: Change all implementations of mxIs* functions to return bool.

diff --git a/bootstrap.conf b/bootstrap.conf
--- a/bootstrap.conf
+++ b/bootstrap.conf
@@ -66,16 +66,17 @@ gnulib_modules="
   readdir
   rmdir
   select
   sigaction
   signal
   sigprocmask
   stat
   std-gnu11
+  stdbool
   stddef
   stdio
   strdup
   strerror
   strftime
   strptime
   strsignal
   symlink
diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -2389,29 +2389,29 @@ mxArray_cell::set_cell (mwIndex idx, mxA
 }
 
 // ------------------------------------------------------------------
 
 // C interface to mxArray objects:
 
 // Floating point predicates.
 
-int
+bool
 mxIsFinite (const double v)
 {
   return lo_ieee_finite (v) != 0;
 }
 
-int
+bool
 mxIsInf (const double v)
 {
   return lo_ieee_isinf (v) != 0;
 }
 
-int
+bool
 mxIsNaN (const double v)
 {
   return lo_ieee_isnan (v) != 0;
 }
 
 double
 mxGetEps (void)
 {
@@ -2590,160 +2590,160 @@ mxDuplicateArray (const mxArray *ptr)
 void
 mxDestroyArray (mxArray *ptr)
 {
   if (! (mex_context && mex_context->free_value (ptr)))
     delete ptr;
 }
 
 // Type Predicates.
-int
+bool
 mxIsCell (const mxArray *ptr)
 {
   return ptr->is_cell ();
 }
 
-int
+bool
 mxIsChar (const mxArray *ptr)
 {
   return ptr->is_char ();
 }
 
-int
+bool
 mxIsClass (const mxArray *ptr, const char *name)
 {
   return ptr->is_class (name);
 }
 
-int
+bool
 mxIsComplex (const mxArray *ptr)
 {
   return ptr->is_complex ();
 }
 
-int
+bool
 mxIsDouble (const mxArray *ptr)
 {
   return ptr->is_double ();
 }
 
-int
+bool
 mxIsFunctionHandle (const mxArray *ptr)
 {
   return ptr->is_function_handle ();
 }
 
-int
+bool
 mxIsInt16 (const mxArray *ptr)
 {
   return ptr->is_int16 ();
 }
 
-int
+bool
 mxIsInt32 (const mxArray *ptr)
 {
   return ptr->is_int32 ();
 }
 
-int
+bool
 mxIsInt64 (const mxArray *ptr)
 {
   return ptr->is_int64 ();
 }
 
-int
+bool
 mxIsInt8 (const mxArray *ptr)
 {
   return ptr->is_int8 ();
 }
 
-int
+bool
 mxIsLogical (const mxArray *ptr)
 {
   return ptr->is_logical ();
 }
 
-int
+bool
 mxIsNumeric (const mxArray *ptr)
 {
   return ptr->is_numeric ();
 }
 
-int
+bool
 mxIsSingle (const mxArray *ptr)
 {
   return ptr->is_single ();
 }
 
-int
+bool
 mxIsSparse (const mxArray *ptr)
 {
   return ptr->is_sparse ();
 }
 
-int
+bool
 mxIsStruct (const mxArray *ptr)
 {
   return ptr->is_struct ();
 }
 
-int
+bool
 mxIsUint16 (const mxArray *ptr)
 {
   return ptr->is_uint16 ();
 }
 
-int
+bool
 mxIsUint32 (const mxArray *ptr)
 {
   return ptr->is_uint32 ();
 }
 
-int
+bool
 mxIsUint64 (const mxArray *ptr)
 {
   return ptr->is_uint64 ();
 }
 
-int
+bool
 mxIsUint8 (const mxArray *ptr)
 {
   return ptr->is_uint8 ();
 }
 
 // Odd type+size predicate.
-int
+bool
 mxIsLogicalScalar (const mxArray *ptr)
 {
   return ptr->is_logical_scalar ();
 }
 
 // Odd type+size+value predicate.
-int
+bool
 mxIsLogicalScalarTrue (const mxArray *ptr)
 {
   return ptr->is_logical_scalar_true ();
 }
 
 // Size predicate.
-int
+bool
 mxIsEmpty (const mxArray *ptr)
 {
   return ptr->is_empty ();
 }
 
 bool
 mxIsScalar (const mxArray *ptr)
 {
   return ptr->is_scalar ();
 }
 
 // FIXME: Just plain odd thing to ask of a value.
 // Still, Octave is incompatible because it does not implement this.
-int
+bool
 mxIsFromGlobalWS (const mxArray * /*ptr*/)
 {
   mexErrMsgTxt ("mxIsFromGlobalWS() is unimplemented");
 
   return 0;
 }
 
 // Dimension extractors.
diff --git a/libinterp/corefcn/mex.h b/libinterp/corefcn/mex.h
--- a/libinterp/corefcn/mex.h
+++ b/libinterp/corefcn/mex.h
@@ -49,28 +49,16 @@ SUCH DAMAGE.
 #define octave_mex_h 1
 
 #include "octave-config.h"
 
 #define HAVE_OCTAVE
 
 typedef void mxArray;
 
-#if ! defined (__cplusplus) && ! defined (__bool_true_false_are_defined)
-#  if ! defined (bool)
-typedef int bool;
-#  endif
-#  if ! defined (true)
-#    define true 1
-#  endif
-#  if ! defined (false)
-#    define false 0
-#  endif
-#endif
-
 /* -V4 stuff */
 #if defined (V4)
 #  define Matrix mxArray
 #  define REAL mxREAL
 #endif
 
 #define mxMAXNAME 64
 
diff --git a/libinterp/corefcn/mexproto.h b/libinterp/corefcn/mexproto.h
--- a/libinterp/corefcn/mexproto.h
+++ b/libinterp/corefcn/mexproto.h
@@ -50,16 +50,17 @@ SUCH DAMAGE.
 
 #include "octave-config.h"
 
 #if defined (__cplusplus)
 #  include <cstdlib>
 extern "C" {
 #else
 #  include <stdlib.h>
+#  include <stdbool.h>
 #endif
 
 /* The definition of OCTINTERP_API is normally provided by Octave's
    config.h file.  This is provided for the case of mex.h included by
    user programs that don't use Octave's config.h.  */
 #if ! defined (OCTINTERP_API)
 #  if defined (_MSC_VER)
 #    define OCTINTERP_API __declspec(dllimport)
@@ -118,19 +119,19 @@ extern OCTINTERP_API void mexLock (void)
 extern OCTINTERP_API void mexUnlock (void);
 
 extern OCTINTERP_API int mexIsGlobal (const mxArray *ptr);
 extern OCTINTERP_API int mexIsLocked (void);
 
 extern OCTINTERP_API int mexAtExit (void (*f) (void));
 
 /* Floating point predicates.  */
-extern OCTINTERP_API int mxIsFinite (double v);
-extern OCTINTERP_API int mxIsInf (double v);
-extern OCTINTERP_API int mxIsNaN (double v);
+extern OCTINTERP_API bool mxIsFinite (double v);
+extern OCTINTERP_API bool mxIsInf (double v);
+extern OCTINTERP_API bool mxIsNaN (double v);
 
 /* Floating point values.  */
 extern OCTINTERP_API double mxGetEps (void);
 extern OCTINTERP_API double mxGetInf (void);
 extern OCTINTERP_API double mxGetNaN (void);
 
 /* Memory management.  */
 extern OCTINTERP_API void *mxCalloc (size_t n, size_t size);
@@ -183,48 +184,48 @@ extern OCTINTERP_API mxArray *mxCreateSt
 
 /* Copy constructor.  */
 extern OCTINTERP_API mxArray *mxDuplicateArray (const mxArray *v);
 
 /* Destructor.  */
 extern OCTINTERP_API void mxDestroyArray (mxArray *v);
 
 /* Type Predicates.  */
-extern OCTINTERP_API int mxIsCell (const mxArray *ptr);
-extern OCTINTERP_API int mxIsChar (const mxArray *ptr);
-extern OCTINTERP_API int mxIsClass (const mxArray *ptr, const char *name);
-extern OCTINTERP_API int mxIsComplex (const mxArray *ptr);
-extern OCTINTERP_API int mxIsDouble (const mxArray *ptr);
-extern OCTINTERP_API int mxIsFunctionHandle (const mxArray *ptr);
-extern OCTINTERP_API int mxIsInt16 (const mxArray *ptr);
-extern OCTINTERP_API int mxIsInt32 (const mxArray *ptr);
-extern OCTINTERP_API int mxIsInt64 (const mxArray *ptr);
-extern OCTINTERP_API int mxIsInt8 (const mxArray *ptr);
-extern OCTINTERP_API int mxIsLogical (const mxArray *ptr);
-extern OCTINTERP_API int mxIsNumeric (const mxArray *ptr);
-extern OCTINTERP_API int mxIsSingle (const mxArray *ptr);
-extern OCTINTERP_API int mxIsSparse (const mxArray *ptr);
-extern OCTINTERP_API int mxIsStruct (const mxArray *ptr);
-extern OCTINTERP_API int mxIsUint16 (const mxArray *ptr);
-extern OCTINTERP_API int mxIsUint32 (const mxArray *ptr);
-extern OCTINTERP_API int mxIsUint64 (const mxArray *ptr);
-extern OCTINTERP_API int mxIsUint8 (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsCell (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsChar (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsClass (const mxArray *ptr, const char *name);
+extern OCTINTERP_API bool mxIsComplex (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsDouble (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsFunctionHandle (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsInt16 (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsInt32 (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsInt64 (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsInt8 (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsLogical (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsNumeric (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsSingle (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsSparse (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsStruct (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsUint16 (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsUint32 (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsUint64 (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsUint8 (const mxArray *ptr);
 
 /* Odd type+size predicate.  */
-extern OCTINTERP_API int mxIsLogicalScalar (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsLogicalScalar (const mxArray *ptr);
 
 /* Odd type+size+value predicate.  */
-extern OCTINTERP_API int mxIsLogicalScalarTrue (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsLogicalScalarTrue (const mxArray *ptr);
 
 /* Size predicates.  */
-extern OCTINTERP_API int mxIsEmpty (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsEmpty (const mxArray *ptr);
 extern OCTINTERP_API bool mxIsScalar (const mxArray *ptr);
 
 /* Just plain odd thing to ask of a value.  */
-extern OCTINTERP_API int mxIsFromGlobalWS (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsFromGlobalWS (const mxArray *ptr);
 
 /* Dimension extractors.  */
 extern OCTINTERP_API size_t mxGetM (const mxArray *ptr);
 extern OCTINTERP_API size_t mxGetN (const mxArray *ptr);
 extern OCTINTERP_API mwSize *mxGetDimensions (const mxArray *ptr);
 extern OCTINTERP_API mwSize mxGetNumberOfDimensions (const mxArray *ptr);
 extern OCTINTERP_API size_t mxGetNumberOfElements (const mxArray *ptr);
 
