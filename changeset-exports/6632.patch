# HG changeset patch
# User jwe
# Date 1179339686 0
#      Wed May 16 18:21:26 2007 +0000
# Node ID fc235391e58ff08d39d852b90469094f5b562f07
# Parent  1b8daf8c03978394db36dd2be1050ec848eaf82a
[project @ 2007-05-16 18:21:26 by jwe]

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2007-05-16  Søren Hauberg  <hauberg@gmail.com>
+
+	* interpreter/expr.txi: Imrove docs.
+
 2007-05-14  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/basics.txi, interpreter/data.txi,
 	interpreter/intro.txi, interpreter/numbers.txi,
 	interpreter/octave.texi, interpreter/preface.txi: Doc fixes.
 
 2007-04-18  Søren Hauberg  <hauberg@gmail.com>
 
diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -665,32 +665,41 @@ are often sufficient for performing most
 it is sometimes desirable to stop evaluating a boolean expression as
 soon as the overall truth value can be determined.  Octave's
 @dfn{short-circuit} boolean operators work this way.
 
 @table @code
 @item @var{boolean1} && @var{boolean2}
 @opindex &&
 The expression @var{boolean1} is evaluated and converted to a scalar
-using the equivalent of the operation @code{all (all (@var{boolean1}))}.
+using the equivalent of the operation @code{all (@var{boolean1}(:))}.
 If it is false, the result of the overall expression is 0.  If it is
 true, the expression @var{boolean2} is evaluated and converted to a
-scalar using the equivalent of the operation @code{all (all
-(@var{boolean1}))}.  If it is true, the result of the overall expression
+scalar using the equivalent of the operation @code{all
+(@var{boolean1}(:))}.  If it is true, the result of the overall expression
 is 1.  Otherwise, the result of the overall expression is 0.
 
+@strong{Warning:} there is one exception to the rule of evaluating
+@code{all (@var{boolean1}(:))}, which is when @code{boolean1} is the
+empty matrix. The truth value of an empty matrix is always @code{false}
+so @code{[] && true} evaluates to @code{false} even though
+@code{all ([])} is @code{true}.
+
 @item @var{boolean1} || @var{boolean2}
 @opindex ||
 The expression @var{boolean1} is evaluated and converted to a scalar
-using the equivalent of the operation @code{all (all (@var{boolean1}))}.
+using the equivalent of the operation @code{all (@var{boolean1}(:))}.
 If it is true, the result of the overall expression is 1.  If it is
 false, the expression @var{boolean2} is evaluated and converted to a
-scalar using the equivalent of the operation @code{all (all
-(@var{boolean1}))}.  If it is true, the result of the overall expression
+scalar using the equivalent of the operation @code{all
+(@var{boolean1}(:))}.  If it is true, the result of the overall expression
 is 1.  Otherwise, the result of the overall expression is 0.
+
+@strong{Warning:} the truth value of an empty matrix is always @code{false},
+see the previous list item for details.
 @end table
 
 The fact that both operands may not be evaluated before determining the
 overall truth value of the expression can be important.  For example, in
 the expression
 
 @example
 a && b++
@@ -720,16 +729,17 @@ short-circuit feature, it would be neces
 @group
 function f (a, b, c)
   if (nargin > 2)
     if (isstr (c))
       @dots{}
 @end group
 @end example
 
+@noindent
 Writing
 
 @example
 @group
 function f (a, b, c)
   if (nargin > 2 & isstr (c))
     @dots{}
 @end group
@@ -752,16 +762,17 @@ operands for the operator @samp{&}.
 An @dfn{assignment} is an expression that stores a new value into a
 variable.  For example, the following expression assigns the value 1 to
 the variable @code{z}:
 
 @example
 z = 1
 @end example
 
+@noindent
 After this expression is executed, the variable @code{z} has the value 1.
 Whatever old value @code{z} had before the assignment is forgotten.
 The @samp{=} sign is called an @dfn{assignment operator}.
 
 Assignments can store string values also.  For example, the following
 expression would store the value @code{"this food is good"} in the
 variable @code{message}:
 
@@ -874,38 +885,41 @@ b = s
 c = v
 @end group
 @end example
 
 In expressions like this, the number of values in each part of the
 expression need not match.  For example, the expression
 
 @example
-[a, b, c, d] = [u, s, v] = svd (a)
-@end example
-
-@noindent
-is equivalent to the expression above, except that the value of the
-variable @samp{d} is left unchanged, and the expression
-
-@example
 [a, b] = [u, s, v] = svd (a)
 @end example
 
 @noindent
 is equivalent to 
 
 @example
 @group
 [u, s, v] = svd (a)
 a = u
 b = s
 @end group
 @end example
 
+@noindent
+The number of values on the left side of the expression can, however,
+not exceed the number of values on the right side. For example, the
+following will produce an error.
+
+@example
+[a, b, c, d] = [u, s, v] = svd (a)
+     @print{} error: element number 4 undefined in return list
+        error: evaluating assignment expression near line 8, column 15
+@end example
+
 You can use an assignment anywhere an expression is called for.  For
 example, it is valid to write @code{x != (y = 1)} to set @code{y} to 1
 and then test whether @code{x} equals 1.  But this style tends to make
 programs hard to read.  Except in a one-shot program, you should rewrite
 it to get rid of such nesting of assignments.  This is never very hard.
 
 @DOCSTRING(subsasgn)
 
@@ -957,22 +971,16 @@ This expression causes the variable @var
 value of the expression is the @emph{old} value of @var{x}.
 
 @item @var{x}--
 @opindex @code{--}
 This expression causes the variable @var{x} to be decremented.  The
 value of the expression is the @emph{old} value of @var{x}.
 @end table
 
-It is not currently possible to increment index expressions.  For
-example, you might expect that the expression @code{@var{v}(4)++} would
-increment the fourth element of the vector @var{v}, but instead it
-results in a parse error.  This problem may be fixed in a future
-release of Octave.
-
 @node Operator Precedence
 @section Operator Precedence
 @cindex operator precedence
 
 @dfn{Operator precedence} determines how operators are grouped, when
 different operators appear close by in one expression.  For example,
 @samp{*} has higher precedence than @samp{+}.  Thus, the expression
 @code{a + b * c} means to multiply @code{b} and @code{c}, and then add
