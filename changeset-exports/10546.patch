# HG changeset patch
# User Rik <code@nomad.inbox5.com>
# Date 1272041903 25200
#      Fri Apr 23 09:58:23 2010 -0700
# Node ID f5b8b28917a2a6045df6f43115c9a5d75cee41d4
# Parent  ffe28cdc6fe25e9bbcfc7d0c668832b0ceb2ccc2
Eliminate compile warning about explicit braces

warning: suggest explicit braces to avoid ambiguous 'else'

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-04-23  Rik <octave@nomad.inbox5.com>
+
+	* DLD-FUNCTIONS/regexp.cc.: eliminate compile warning 
+   warning: suggest explicit braces to avoid ambiguous 'else'
+
 2010-04-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base-scalar.h (octave_base_scalar::reshape,
 	octave_base_scalar::permute): Remove implementations.
 	* ov-base-scalar.cc (octave_base_scalar::reshape,
 	octave_base_scalar::permute): Provide correct implementations here.
 
 2010-04-23  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/DLD-FUNCTIONS/regexp.cc b/src/DLD-FUNCTIONS/regexp.cc
--- a/src/DLD-FUNCTIONS/regexp.cc
+++ b/src/DLD-FUNCTIONS/regexp.cc
@@ -454,28 +454,29 @@ octregexp_list (const octave_value_list 
                 return 0;
               }
 
               Cell cell_t (dim_vector(1,pos_match));
               string_vector named_tokens(nnames);
               int pos_offset = 0;
               pos_match = 0;
               for (int i = 1; i < matches; i++)
-                if (ovector[2*i] >= 0 && ovector[2*i+1] > 0)
+                if (ovector[2*i] >= 0 && ovector[2*i+1] > 0) {
                   if (i == 1 || ovector[2*i] != ovector[2*i-2]
                       || ovector[2*i-1] != ovector[2*i+1])
                     {
                       if (namecount > 0)
                         named_tokens(named_idx(i-pos_offset-1)) = 
                           std::string(*(listptr+nidx[i-pos_offset-1]));    
                       cell_t(pos_match++) = 
                         std::string(*(listptr+i));
                     }
                   else
                     pos_offset++;
+                }
 
               m =  std::string(*listptr);
               t = cell_t;
 
               pcre_free_substring_list(listptr);
 
               regexp_elem new_elem (named_tokens, t, m, te, s, e);
               lst.push_back (new_elem);
