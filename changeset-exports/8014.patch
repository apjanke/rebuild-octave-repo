# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1218052244 14400
#      Wed Aug 06 15:50:44 2008 -0400
# Node ID 44d206ae68c9b7448bc6bbdaf57da15761d6b2e5
# Parent  b3e667f1ab4ca5064c6a4bac2957f4ed0de0780b
improve fsolve compatibility

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -7,16 +7,21 @@ Summary of important user-visible change
 
  ** Eliminate the functions for direct access to gnuplot from Octave.
     The functions __gnuplot_plot__, __gnuplot_set__, __gnuplot_raw__,
      __gnuplot_show__, __gnuplot_replot__, __gnuplot_splot__,
      __gnuplot_save_data__  and __gnuplot_send_inline_data__ have been
     removed from Octave. These function were incompatible with the high
     level graphics handle code.
 
+ ** The fsolve function now accepts an option structure argument (see
+    also the optimset function).
+    The INFO values returned from fsolve have changed to be compatible
+    with Matlab's fsolve function.
+
  ** Object Oriented Programming
 
     TO BE WRITTEN
 
  ** Block comments
     Commented code can be between matching "%{" and "%}" markers, even
     if the commented code spans several line. This allows blocks code
     to be commented, without needing to comment each line. For
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,15 @@
 2008-08-06  John W. Eaton  <jwe@octave.org>
 
+	* DLD-FUNCTIONS/fsolve.cc (hybrd_info_to_fsolve_info):
+	Update INFO values to be compatible with Matlab's current fsolve.
+	(make_unimplemented_options, override_options): New functions.
+	(Ffsolve): Handle optimset options.  Update doc string.
+
 	* ov-usr-fcn.cc (octave_user_function::do_multi_index_op,
 	octave_user_script::do_multi_index_op):
 	Call octave_call_stack::backtrace_error_message.
 	* toplev.h (octave_call_stack::do_pop): Don't call
 	backtrace_error_message here.
 	* toplev.cc, toplev.h (octave_call_stack::do_backtrace_error_message):
 	Rename from octave_call_stack::backtrace_error_message.
 	* toplev.h (octave_call_stack::backtrace_error_message):
diff --git a/src/DLD-FUNCTIONS/fsolve.cc b/src/DLD-FUNCTIONS/fsolve.cc
--- a/src/DLD-FUNCTIONS/fsolve.cc
+++ b/src/DLD-FUNCTIONS/fsolve.cc
@@ -20,28 +20,31 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <algorithm>
+#include <set>
 #include <string>
 
 #include <iomanip>
 #include <iostream>
 #include <sstream>
 
 #include "dNDArray.h"
 #include "NLEqn.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
+#include "oct-map.h"
 #include "oct-obj.h"
 #include "ov-fcn.h"
 #include "ov-cell.h"
 #include "pager.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
@@ -64,39 +67,33 @@ static bool warned_jac_imaginary = false
 static int call_depth = 0;
 
 octave_idx_type
 hybrd_info_to_fsolve_info (octave_idx_type info)
 {
   switch (info)
     {
     case -1:
-      break;
-
-    case 0:
-      info = -2;
-      break;
-
     case 1:
       break;
 
     case 2:
-      info = 4;
+      info = 0;
       break;
 
     case 3:
     case 4:
     case 5:
-      info = 3;
+      info = -2;
       break;
 
     default:
       {
 	std::ostringstream buf;
-	buf << "fsolve: unrecognized value of INFO from MINPACK (= "
+	buf << "fsolve: unexpected value of INFO from MINPACK (= "
 	    << info << ")";
 	std::string msg = buf.str ();
 	warning (msg.c_str ());
       }
       break;
     }
 
   return info;
@@ -196,16 +193,108 @@ fsolve_user_jacobian (const ColumnVector
 	}
       else
 	gripe_user_supplied_eval ("fsolve");
     }
 
   return retval;
 }
 
+static std::set<std::string>
+make_unimplemented_options (void)
+{
+  static bool initialized = false;
+
+  static std::set<std::string> options;
+
+  if (! initialized)
+    {
+      initialized = true;
+
+      options.insert ("largescale");
+      options.insert ("derivativecheck");
+      options.insert ("diagnostics");
+      options.insert ("diffmaxchange");
+      options.insert ("diffminchange");
+      options.insert ("display");
+      options.insert ("funvalcheck");
+      options.insert ("jacobian");
+      options.insert ("maxfunevals");
+      options.insert ("maxiter");
+      options.insert ("outputfcn");
+      options.insert ("plotfcns");
+      options.insert ("tolfun");
+      options.insert ("tolx");
+      options.insert ("typicalx");
+      options.insert ("jacobmult");
+      options.insert ("jacobpattern");
+      options.insert ("maxpcgiter");
+      options.insert ("precondbandwidth");
+      options.insert ("tolpcg");
+      options.insert ("nonleqnalgorithm");
+      options.insert ("linesearchtype");
+    }
+
+  return options;
+}
+
+static void
+override_options (NLEqn_options& opts, const Octave_map& option_map)
+{
+  string_vector keys = option_map.keys ();
+
+  for (octave_idx_type i = 0; i < keys.length (); i++)
+    {
+      std::string key = keys(i);
+      std::transform (key.begin (), key.end (), key.begin (), tolower);
+
+      if (key == "tolx")
+	{
+	  Cell c = option_map.contents (key);
+
+	  if (c.numel () == 1)
+	    {
+	      octave_value val = c(0);
+
+	      if (! val.is_empty ())
+		{
+		  double dval = val.double_value ();
+
+		  if (! error_state)
+		    opts.set_tolerance (dval);
+		  else
+		    gripe_wrong_type_arg ("fsolve", val);
+		}
+	    }
+	  else
+	    error ("fsolve: invalid value for %s option", key.c_str ());
+	}
+      else
+	{
+	  static std::set<std::string> unimplemented_options
+	    = make_unimplemented_options ();
+
+	  if (unimplemented_options.find (key) != unimplemented_options.end ())
+	    {
+	      Cell c = option_map.contents (key);
+
+	      if (c.numel () == 1)
+		{
+		  octave_value val = c(0);
+
+		  if (! val.is_empty ())
+		    warning_with_id ("Octave:fsolve-unimplemented option",
+				     "fsolve: option `%s' not implemented",
+				     key.c_str ());
+		}
+	    }
+	}
+    }
+}
+
 #define FSOLVE_ABORT() \
   do \
     { \
       unwind_protect::run_frame ("Ffsolve"); \
       return retval; \
     } \
   while (0)
 
@@ -222,37 +311,35 @@ fsolve_user_jacobian (const ColumnVector
     { \
       ::error ("fsolve: " fmt, arg); \
       FSOLVE_ABORT (); \
     } \
   while (0)
 
 DEFUN_DLD (fsolve, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {[@var{x}, @var{fval}, @var{info}] =} fsolve (@var{fcn}, @var{x0})\n\
+@deftypefn {Loadable Function} {[@var{x}, @var{fval}, @var{info}] =} fsolve (@var{fcn}, @var{x0}, @var{options})\n\
 Given @var{fcn}, the name of a function of the form @code{f (@var{x})}\n\
 and an initial starting point @var{x0}, @code{fsolve} solves the set of\n\
 equations such that @code{f(@var{x}) == 0}.\n\
 \n\
 On return, @var{fval} contains the value of the function @var{fcn}\n\
 evaluated at @var{x}, and @var{info} may be one of the following values:\n\
 \n\
 @table @asis\n\
 \n\
-@item -2\n\
-Invalid input parameters.\n\
+@item 1\n\
+Algorithm converged with relative error between two consecutive iterates\n\
+less than or equal to the specified tolerance (see @code{fsolve_options}).\n\
+@item 0\n\
+Iteration limit exceeded.\n\
 @item -1\n\
 Error in user-supplied function.\n\
-@item 1\n\
-Relative error between two consecutive iterates is at most the\n\
-specified tolerance (see @code{fsolve_options}).\n\
-@item 3\n\
+@item -2\n\
 Algorithm failed to converge.\n\
-@item 4\n\
-Limit on number of function calls reached.\n\
 @end table\n\
 \n\
 If @var{fcn} is a two-element string array, or a two element cell array\n\
 containing either the function name or inline or function handle. The\n\
 first element names the function @math{f} described above, and the second\n\
 element names a function of the form @code{j (@var{x})} to compute the\n\
 Jacobian matrix with elements\n\
 @tex\n\
@@ -264,16 +351,21 @@ Jacobian matrix with elements\n\
            df_i\n\
 jac(i,j) = ----\n\
            dx_j\n\
 @end example\n\
 @end ifinfo\n\
 \n\
 You can use the function @code{fsolve_options} to set optional\n\
 parameters for @code{fsolve}.\n\
+\n\
+If the optional argument @var{options} is provided, it is expected to\n\
+be a structure of the form returned by @code{optimset}.  Options\n\
+specified in this structure override any set globally by\n\
+@code{optimset, fsolve_options}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   warned_fcn_imaginary = false;
   warned_jac_imaginary = false;
 
   unwind_protect::begin_frame ("Ffsolve");
@@ -281,17 +373,17 @@ parameters for @code{fsolve}.\n\
   unwind_protect_int (call_depth);
   call_depth++;
 
   if (call_depth > 1)
     FSOLVE_ABORT1 ("invalid recursive call");
 
   int nargin = args.length ();
 
-  if (nargin == 2 && nargout < 4)
+  if ((nargin == 2 || nargin == 3) && nargout < 4)
     {
       std::string fcn_name, fname, jac_name, jname;
       fsolve_fcn = 0;
       fsolve_jac = 0;
 
       octave_value f_arg = args(0);
 
       if (f_arg.is_cell ())
@@ -334,17 +426,17 @@ parameters for @code{fsolve}.\n\
 			}
 		    }
 		}
 	    }
 	  else
 	    FSOLVE_ABORT1 ("incorrect number of elements in cell array");
 	}
 
-      if (!fsolve_fcn && ! f_arg.is_cell())
+      if (! fsolve_fcn && ! f_arg.is_cell())
 	{
 	  if (f_arg.is_function_handle () || f_arg.is_inline_function ())
 	    fsolve_fcn = f_arg.function_value ();
 	  else
 	    {
 	      switch (f_arg.rows ())
 		{
 		case 1:
@@ -390,17 +482,17 @@ parameters for @code{fsolve}.\n\
 				fsolve_fcn = 0;
 			      }
 			  }
 		      }
 		  }
 		}
 	    }
 	}
-
+      
       if (error_state || ! fsolve_fcn)
 	FSOLVE_ABORT ();
 
       NDArray xa = args(1).array_value ();
       x_dims = xa.dims ();
       ColumnVector x (xa);
 
       if (error_state)
@@ -412,36 +504,52 @@ parameters for @code{fsolve}.\n\
       if (nargout > 3)
 	warning ("fsolve: can't compute path output yet");
 
       NLFunc nleqn_fcn (fsolve_user_function);
       if (fsolve_jac)
 	nleqn_fcn.set_jacobian_function (fsolve_user_jacobian);
 
       NLEqn nleqn (x, nleqn_fcn);
-      nleqn.set_options (fsolve_opts);
 
-      octave_idx_type info;
-      ColumnVector soln = nleqn.solve (info);
+      NLEqn_options local_fsolve_opts (fsolve_opts);
 
-      if (fcn_name.length())
-	clear_function (fcn_name);
-      if (jac_name.length())
-	clear_function (jac_name);
+      if (nargin > 2)
+	{
+	  Octave_map option_map = args(2).map_value ();
+
+	  if (! error_state)
+	    override_options (local_fsolve_opts, option_map);
+	  else
+	    error ("fsolve: expecting optimset structure as third argument");
+	}
 
       if (! error_state)
 	{
-	  retval(2) = static_cast<double> (hybrd_info_to_fsolve_info (info));
-	  retval(1) = nleqn.function_value ();
-	  retval(0) = NDArray (ArrayN<double> (soln.reshape (x_dims)));
+	  nleqn.set_options (local_fsolve_opts);
+
+	  octave_idx_type info;
+	  ColumnVector soln = nleqn.solve (info);
+
+	  if (fcn_name.length())
+	    clear_function (fcn_name);
+	  if (jac_name.length())
+	    clear_function (jac_name);
 
-	  if (! nleqn.solution_ok () && nargout < 2)
+	  if (! error_state)
 	    {
-	      std::string msg = nleqn.error_message ();
-	      error ("fsolve: %s", msg.c_str ());
+	      retval(2) = static_cast<double> (hybrd_info_to_fsolve_info (info));
+	      retval(1) = nleqn.function_value ();
+	      retval(0) = NDArray (ArrayN<double> (soln.reshape (x_dims)));
+
+	      if (! nleqn.solution_ok () && nargout < 2)
+		{
+		  std::string msg = nleqn.error_message ();
+		  error ("fsolve: %s", msg.c_str ());
+		}
 	    }
 	}
     }
   else
     print_usage ();
 
   unwind_protect::run_frame ("Ffsolve");
 
@@ -458,17 +566,17 @@ parameters for @code{fsolve}.\n\
 %!  retval(2) = 3*x + 2**y -z**3 + 1;
 %!  retval(3) = x + y + z - 5;
 %!test
 %! x_opt = [ 0.599054;
 %! 2.395931;
 %! 2.005014 ];
 %! tol = 1.0e-5;
 %! [x, fval, info] = fsolve ("f", [ 0.5; 2.0; 2.5 ]);
-%! info_bad = (info != 1);
+%! info_bad = (info <= 0);
 %! solution_bad = sum (abs (x - x_opt) > tol);
 %! value_bad = sum (abs (fval) > tol);
 %! if (info_bad)
 %!   printf_assert ("info bad\n");
 %! else
 %!   printf_assert ("info good\n");
 %! endif
 %! if (solution_bad)
@@ -492,17 +600,17 @@ parameters for @code{fsolve}.\n\
 %!  retval(1) = 3*x + 4*y + exp (z + w) - 1.007;
 %!  retval(2) = 6*x - 4*y + exp (3*z + w) - 11;
 %!  retval(3) = x^4 - 4*y^2 + 6*z - 8*w - 20;
 %!  retval(4) = x^2 + 2*y^3 + z - w - 4;
 %!test
 %! x_opt = [ -0.767297326653401, 0.590671081117440, 1.47190018629642, -1.52719341133957 ];
 %! tol = 1.0e-5;
 %! [x, fval, info] = fsolve ("f", [-1, 1, 2, -1]);
-%! info_bad = (info != 1);
+%! info_bad = (info <= 0);
 %! solution_bad = sum (abs (x - x_opt) > tol);
 %! value_bad = sum (abs (fval) > tol);
 %! if (info_bad)
 %!   printf_assert ("info bad\n");
 %! else
 %!   printf_assert ("info good\n");
 %! endif
 %! if (solution_bad)
