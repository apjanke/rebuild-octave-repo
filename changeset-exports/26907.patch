# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1552542155 0
#      Thu Mar 14 05:42:35 2019 +0000
# Node ID 1d3730539776362f32d9da47c8c93ba867e032c3
# Parent  db59dabf1685822d691ab5abfff99b5c9a995e29
use octave_value instead of pointer to octave_function in __ode15__

* __ode15__.cc: In all functions that use user-defined functions
(function handles, inline functions, function names), use octave_value
objects instead of pointers to octave_function objects.

diff --git a/libinterp/dldfcn/__ode15__.cc b/libinterp/dldfcn/__ode15__.cc
--- a/libinterp/dldfcn/__ode15__.cc
+++ b/libinterp/dldfcn/__ode15__.cc
@@ -131,79 +131,79 @@ namespace octave
 {
   class IDA
   {
   public:
 
     typedef
     ColumnVector (*DAERHSFuncIDA) (const ColumnVector& x,
                                    const ColumnVector& xdot,
-                                   realtype t, octave_function *idaf);
+                                   realtype t, const octave_value& idaf);
 
     typedef
     Matrix (*DAEJacFuncDense) (const ColumnVector& x,
                                const ColumnVector& xdot, realtype t,
-                               realtype cj, octave_function *idaj);
+                               realtype cj, const octave_value& idaj);
 
     typedef
     SparseMatrix (*DAEJacFuncSparse) (const ColumnVector& x,
                                       const ColumnVector& xdot,
                                       realtype t, realtype cj,
-                                      octave_function *idaj);
+                                      const octave_value& idaj);
 
     typedef
     Matrix (*DAEJacCellDense) (Matrix *dfdy, Matrix *dfdyp,
                                realtype cj);
 
     typedef
     SparseMatrix (*DAEJacCellSparse) (SparseMatrix *dfdy,
                                       SparseMatrix *dfdyp, realtype cj);
 
     //Default
     IDA (void)
       : t0 (0.0), y0 (), yp0 (), havejac (false), havejacfun (false),
-        havejacsparse (false), mem (nullptr), num (), ida_fun (nullptr),
-        ida_jac (nullptr), dfdy (nullptr), dfdyp (nullptr), spdfdy (nullptr),
+        havejacsparse (false), mem (nullptr), num (), ida_fun (),
+        ida_jac (), dfdy (nullptr), dfdyp (nullptr), spdfdy (nullptr),
         spdfdyp (nullptr), fun (nullptr), jacfun (nullptr), jacspfun (nullptr),
         jacdcell (nullptr), jacspcell (nullptr),
         sunJacMatrix (nullptr), sunLinearSolver (nullptr)
     { }
 
 
     IDA (realtype t, ColumnVector y, ColumnVector yp,
-         octave_function *ida_fcn, DAERHSFuncIDA daefun)
+         const octave_value& ida_fcn, DAERHSFuncIDA daefun)
       : t0 (t), y0 (y), yp0 (yp), havejac (false), havejacfun (false),
         havejacsparse (false), mem (nullptr), num (), ida_fun (ida_fcn),
-        ida_jac (nullptr), dfdy (nullptr), dfdyp (nullptr), spdfdy (nullptr),
+        ida_jac (), dfdy (nullptr), dfdyp (nullptr), spdfdy (nullptr),
         spdfdyp (nullptr), fun (daefun), jacfun (nullptr), jacspfun (nullptr),
         jacdcell (nullptr), jacspcell (nullptr),
         sunJacMatrix (nullptr), sunLinearSolver (nullptr)
     { }
 
 
     ~IDA (void)
     {
       IDAFree (&mem);
       SUNLinSolFree(sunLinearSolver);
       SUNMatDestroy(sunJacMatrix);
     }
 
     IDA&
-    set_jacobian (octave_function *jac, DAEJacFuncDense j)
+    set_jacobian (const octave_value& jac, DAEJacFuncDense j)
     {
       jacfun = j;
       ida_jac = jac;
       havejac = true;
       havejacfun = true;
       havejacsparse = false;
       return *this;
     }
 
     IDA&
-    set_jacobian (octave_function *jac, DAEJacFuncSparse j)
+    set_jacobian (const octave_value& jac, DAEJacFuncSparse j)
     {
       jacspfun = j;
       ida_jac = jac;
       havejac = true;
       havejacfun = true;
       havejacsparse = true;
       return *this;
     }
@@ -289,61 +289,61 @@ namespace octave
 
     void set_maxstep (realtype maxstep);
 
     void set_initialstep (realtype initialstep);
 
     bool
     interpolate (int& cont, Matrix& output, ColumnVector& tout,
                  int refine, realtype tend, bool haveoutputfcn,
-                 bool haveoutputsel, octave_function *output_fcn,
+                 bool haveoutputsel, const octave_value& output_fcn,
                  ColumnVector& outputsel, bool haveeventfunction,
-                 octave_function *event_fcn, ColumnVector& te,
+                 const octave_value& event_fcn, ColumnVector& te,
                  Matrix& ye, ColumnVector& ie, ColumnVector& oldval,
                  ColumnVector& oldisterminal, ColumnVector& olddir,
                  int& temp, ColumnVector& yold);
 
     bool
-    outputfun (octave_function *output_fcn, bool haveoutputsel,
+    outputfun (const octave_value& output_fcn, bool haveoutputsel,
                const ColumnVector& output, realtype tout, realtype tend,
                ColumnVector& outputsel, const std::string& flag);
 
 
     bool
-    event (octave_function *event_fcn,
+    event (const octave_value& event_fcn,
            ColumnVector& te, Matrix& ye, ColumnVector& ie,
            realtype tsol, const ColumnVector& y, const std::string& flag,
            const ColumnVector& yp, ColumnVector& oldval,
            ColumnVector& oldisterminal, ColumnVector& olddir,
            int cont, int& temp, realtype told, ColumnVector& yold);
 
     void set_maxorder (int maxorder);
 
     octave_value_list
     integrate (const int numt, const ColumnVector& tt,
                const ColumnVector& y0, const ColumnVector& yp0,
                const int refine, bool haverefine, bool haveoutputfcn,
-               octave_function *output_fcn, bool haveoutputsel,
+               const octave_value& output_fcn, bool haveoutputsel,
                ColumnVector& outputsel, bool haveeventfunction,
-               octave_function *event_fcn);
+               const octave_value& event_fcn);
 
     void print_stat (void);
 
   private:
 
     realtype t0;
     ColumnVector y0;
     ColumnVector yp0;
     bool havejac;
     bool havejacfun;
     bool havejacsparse;
     void *mem;
     int num;
-    octave_function *ida_fun;
-    octave_function *ida_jac;
+    octave_value ida_fun;
+    octave_value ida_jac;
     Matrix *dfdy;
     Matrix *dfdyp;
     SparseMatrix *spdfdy;
     SparseMatrix *spdfdyp;
     DAERHSFuncIDA fun;
     DAEJacFuncDense jacfun;
     DAEJacFuncSparse jacspfun;
     DAEJacCellDense jacdcell;
@@ -561,19 +561,19 @@ namespace octave
     if (IDASStolerances (mem, reltol, abstol) != 0)
       error ("IDA: Tolerance not set");
   }
 
   octave_value_list
   IDA::integrate (const int numt, const ColumnVector& tspan,
                   const ColumnVector& y, const ColumnVector& yp,
                   const int refine, bool haverefine, bool haveoutputfcn,
-                  octave_function *output_fcn, bool haveoutputsel,
+                  const octave_value& output_fcn, bool haveoutputsel,
                   ColumnVector& outputsel, bool haveeventfunction,
-                  octave_function *event_fcn)
+                  const octave_value& event_fcn)
   {
     // Set up output
     ColumnVector tout, yout (num), ypout (num), ysel (outputsel.numel ());
     ColumnVector ie, te, oldval, oldisterminal, olddir;
     Matrix output, ye;
     int cont = 0, temp = 0;
     bool status = 0;
     std::string string = "";
@@ -724,17 +724,17 @@ namespace octave
                                  outputsel, "done");
 
       }
 
     return ovl (tout, output, te, ye, ie);
   }
 
   bool
-  IDA::event (octave_function *event_fcn,
+  IDA::event (const octave_value& event_fcn,
               ColumnVector& te, Matrix& ye, ColumnVector& ie,
               realtype tsol, const ColumnVector& y, const std::string& flag,
               const ColumnVector& yp, ColumnVector& oldval,
               ColumnVector& oldisterminal, ColumnVector& olddir, int cont,
               int& temp, realtype told, ColumnVector& yold)
   {
     bool status = 0;
 
@@ -826,19 +826,19 @@ namespace octave
       }
 
     return status;
   }
 
   bool
   IDA::interpolate (int& cont, Matrix& output, ColumnVector& tout,
                     int refine, realtype tend, bool haveoutputfcn,
-                    bool haveoutputsel, octave_function *output_fcn,
+                    bool haveoutputsel, const octave_value& output_fcn,
                     ColumnVector& outputsel, bool haveeventfunction,
-                    octave_function *event_fcn, ColumnVector& te,
+                    const octave_value& event_fcn, ColumnVector& te,
                     Matrix& ye, ColumnVector& ie, ColumnVector& oldval,
                     ColumnVector& oldisterminal, ColumnVector& olddir,
                     int& temp, ColumnVector& yold)
   {
     realtype h = 0, tcur = 0;
     bool status = 0;
 
     N_Vector dky = N_VNew_Serial (num);
@@ -892,17 +892,17 @@ namespace octave
       }
 
     N_VDestroy_Serial (dky);
 
     return status;
   }
 
   bool
-  IDA::outputfun (octave_function *output_fcn, bool haveoutputsel,
+  IDA::outputfun (const octave_value& output_fcn, bool haveoutputsel,
                   const ColumnVector& yout, realtype tsol,
                   realtype tend, ColumnVector& outputsel,
                   const std::string& flag)
   {
     bool status = 0;
 
     octave_value_list output;
     output(2) = flag;
@@ -983,17 +983,17 @@ namespace octave
     octave_stdout << nrevals << " function evaluations\n";
     // octave_stdout << " partial derivatives\n";
     // octave_stdout << " LU decompositions\n";
     // octave_stdout << " solutions of linear systems\n";
   }
 
   ColumnVector
   ida_user_function (const ColumnVector& x, const ColumnVector& xdot,
-                     double t, octave_function *ida_fc)
+                     double t, const octave_value& ida_fc)
   {
     octave_value_list tmp;
 
     try
       {
         tmp = feval (ida_fc, ovl (t, x, xdot), 1);
       }
     catch (execution_exception& e)
@@ -1001,17 +1001,17 @@ namespace octave
         err_user_supplied_eval (e, "__ode15__");
       }
 
     return tmp(0).vector_value ();
   }
 
   Matrix
   ida_dense_jac (const ColumnVector& x, const ColumnVector& xdot,
-                 double t, double cj, octave_function *ida_jc)
+                 double t, double cj, const octave_value& ida_jc)
   {
     octave_value_list tmp;
 
     try
       {
         tmp = feval (ida_jc, ovl (t, x, xdot), 2);
       }
     catch (execution_exception& e)
@@ -1019,17 +1019,17 @@ namespace octave
         err_user_supplied_eval (e, "__ode15__");
       }
 
     return tmp(0).matrix_value () + cj * tmp(1).matrix_value ();
   }
 
   SparseMatrix
   ida_sparse_jac (const ColumnVector& x, const ColumnVector& xdot,
-                  double t, double cj, octave_function *ida_jc)
+                  double t, double cj, const octave_value& ida_jc)
   {
     octave_value_list tmp;
 
     try
       {
         tmp = feval (ida_jc, ovl (t, x, xdot), 2);
       }
     catch (execution_exception& e)
@@ -1049,17 +1049,17 @@ namespace octave
   SparseMatrix
   ida_sparse_cell_jac (SparseMatrix *spdfdy, SparseMatrix *spdfdyp,
                        double cj)
   {
     return (*spdfdy) + cj * (*spdfdyp);
   }
 
   octave_value_list
-  do_ode15 (octave_function *ida_fcn,
+  do_ode15 (const octave_value& ida_fcn,
             const ColumnVector& tspan,
             const int numt,
             const realtype t0,
             const ColumnVector& y0,
             const ColumnVector& yp0,
             const octave_scalar_map& options)
   {
     octave_value_list retval;
@@ -1071,24 +1071,24 @@ namespace octave
     bool havejac = options.getfield ("havejac").bool_value ();
 
     bool havejacsparse = options.getfield ("havejacsparse").bool_value ();
 
     bool havejacfun = options.getfield ("havejacfun").bool_value ();
 
     Matrix ida_dfdy, ida_dfdyp, *dfdy, *dfdyp;
     SparseMatrix ida_spdfdy, ida_spdfdyp, *spdfdy, *spdfdyp;
-    octave_function *ida_jac;
+    octave_value ida_jac;
     Cell jaccell;
 
     if (havejac)
       {
         if (havejacfun)
           {
-            ida_jac = options.getfield ("Jacobian").function_value ();
+            ida_jac = options.getfield ("Jacobian");
 
             if (havejacsparse)
               dae.set_jacobian (ida_jac, ida_sparse_jac);
             else
               dae.set_jacobian (ida_jac, ida_dense_jac);
           }
         else
           {
@@ -1152,40 +1152,40 @@ namespace octave
 
     dae.set_maxorder (maxorder);
 
     //Set Refine
     const int refine = options.getfield("Refine").int_value ();
 
     bool haverefine = (refine > 1);
 
-    octave_function *output_fcn = nullptr;
+    octave_value output_fcn;
     ColumnVector outputsel;
 
     // OutputFcn
     bool haveoutputfunction
       = options.getfield("haveoutputfunction").bool_value ();
 
     if (haveoutputfunction)
-      output_fcn = options.getfield("OutputFcn").function_value ();
+      output_fcn = options.getfield("OutputFcn");
 
     // OutputSel
     bool haveoutputsel = options.getfield("haveoutputselection").bool_value ();
 
     if (haveoutputsel)
       outputsel = options.getfield("OutputSel").vector_value ();
 
-    octave_function *event_fcn = nullptr;
+    octave_value event_fcn;
 
     // Events
     bool haveeventfunction
       = options.getfield("haveeventfunction").bool_value ();
 
     if (haveeventfunction)
-      event_fcn = options.getfield("Events").function_value ();
+      event_fcn = options.getfield("Events");
 
     // Set up linear solver
     dae.set_up (y0);
 
     // Integrate
     retval = dae.integrate (numt, tspan, y0, yp0, refine,
                             haverefine, haveoutputfunction,
                             output_fcn, haveoutputsel, outputsel,
@@ -1214,23 +1214,21 @@ Undocumented internal function.
 
   // Check number of parameters
   int nargin = args.length ();
 
   if (nargin != 5)
     print_usage ();
 
   // Check odefun
-  octave_value f_arg = args(0);
+  octave_value ida_fcn = args(0);
 
-  if (! f_arg.is_function_handle ())
+  if (! ida_fcn.is_function_handle ())
     error ("__ode15__: odefun must be a function handle");
 
-  octave_function *ida_fcn = f_arg.function_value ();
-
   // Check input tspan
   ColumnVector tspan
     = args(1).xvector_value ("__ode15__: TRANGE must be a vector of numbers");
 
   int numt = tspan.numel ();
 
   realtype t0 = tspan (0);
 
