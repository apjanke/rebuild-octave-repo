# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1548792547 -3600
#      Tue Jan 29 21:09:07 2019 +0100
# Branch stable
# Node ID c942659a57e63a1c50f6b8b5a76b4b9363d64d75
# Parent  b6e65db78f0c24668f96d298d73a85da2c3bd982
Support opening handles to files with non-ASCII characters on Windows.

* file-io.cc (do_stream_open): Use wrapper for fopen.

diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -48,16 +48,17 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_ZLIB_H)
 #  include <zlib.h>
 #endif
 
 #include "file-ops.h"
 #include "file-stat.h"
 #include "lo-ieee.h"
+#include "lo-sysdep.h"
 #include "mkostemp-wrapper.h"
 #include "oct-env.h"
 #include "oct-locbuf.h"
 #include "tmpfile-wrapper.h"
 #include "unistd-wrappers.h"
 
 #include "builtin-defun-decls.h"
 #include "defun.h"
@@ -426,34 +427,34 @@ do_stream_open (const std::string& name,
   if (! (md & std::ios::out))
     fname = octave::find_data_file_in_load_path ("fopen", fname);
 
   if (! fs.is_dir ())
     {
 #if defined (HAVE_ZLIB)
       if (use_zlib)
         {
-          FILE *fptr = std::fopen (fname.c_str (), mode.c_str ());
+          FILE *fptr = octave::sys::fopen (fname.c_str (), mode.c_str ());
 
           if (fptr)
             {
               int fd = fileno (fptr);
 
               gzFile gzf = ::gzdopen (fd, mode.c_str ());
 
               retval = octave_zstdiostream::create (fname, gzf, fd,
                                                     md, flt_fmt);
             }
           else
             retval.error (std::strerror (errno));
         }
       else
 #endif
         {
-          FILE *fptr = std::fopen (fname.c_str (), mode.c_str ());
+          FILE *fptr = octave::sys::fopen (fname.c_str (), mode.c_str ());
 
           retval = octave_stdiostream::create (fname, fptr, md,
                                                flt_fmt);
 
           if (! fptr)
             retval.error (std::strerror (errno));
         }
 
