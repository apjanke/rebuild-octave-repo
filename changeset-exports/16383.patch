# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1364442141 14400
#      Wed Mar 27 23:42:21 2013 -0400
# Node ID 3cacd597464dc8279b729442bcf3a7bc006da5c1
# Parent  389b09a914e264bbac1d4dacc9c9536265eee079
improve naming of debug pointer update callbacks and signals

* file-editor-interface.h
(file_editor_interface::handle_update_debug_pointer_request):
Rename from file_editor_interface::handle_dbstop_request.  Change all
uses.
* file-editor.h, file-editor.cc
(file_editor::handle_update_debug_pointer_request):
Rename from file_editor::handle_dbstop_request.  Change all uses.
* main-window.h, main-window.cc
(main_window::handle_update_debug_pointer_request):
Rename from main_window::handle_dbstop_request.  Change all uses.
* octave-event-listener.h (event_listener::update_debug_pointer):
Rename from event_listener::dbstop.  Change all uses.
* octave-link.h, octave-link.cc
(octave_link::do_update_debug_pointer): Rename from
octave_link::do_dbstop.  Change all uses.
(octave_link::do_debug_input_event_hook_fcn): Rename from
octave_link::do_dbstop_event_hook_fcn.  Change all uses.
* octave-main-thread.cc (debug_input_event_hook_fcn): Rename from
dbstop_event_hook_fcn.
* octave-qt-event-listener.h, octave-qt-event-listener.cc
(octave_qt_event_listener::update_debug_pointer): Rename from
octave_qt_event_listener::dbstop.  Change all uses.
(octave_qt_event_listener::update_debug_pointer_signal): Rename from
octave_qt_event_listener::dbstop_signal.
* input.cc (debug_input_event_hook_functions): Rename from
dbstop_event_hook_functions.  Change all uses.
(Fadd_debug_input_event_hook): Rename from Fadd_dbstop_event_hook.
Change all uses.
(Fremove_debug_input_event_hook): Rename from
remove_dbstop_event_hook.  Change all uses.

diff --git a/libgui/src/m-editor/file-editor-interface.h b/libgui/src/m-editor/file-editor-interface.h
--- a/libgui/src/m-editor/file-editor-interface.h
+++ b/libgui/src/m-editor/file-editor-interface.h
@@ -41,17 +41,17 @@ class file_editor_interface : public oct
   virtual ~file_editor_interface () { }
 
   virtual QMenu *get_mru_menu ( ) = 0;
   virtual QMenu *debug_menu () = 0;
   virtual QToolBar *toolbar () = 0;
 
   virtual void handle_entered_debug_mode () = 0;
   virtual void handle_quit_debug_mode () = 0;
-  virtual void handle_dbstop_request (const QString& file, int line) = 0;
+  virtual void handle_update_debug_pointer_request (const QString& file, int line) = 0;
   virtual void set_focus () = 0;
 
 public slots:
   virtual void request_new_file () = 0;
   virtual void request_open_file () = 0;
   virtual void request_open_file (const QString& fileName, int line = -1,
                                   bool set_marker = false) = 0;
 
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -287,17 +287,17 @@ file_editor::check_conflict_save (const 
       return;
     }
 
   // Can save without conflict, have the file editor tab do so.
   emit fetab_save_file (saveFileWidget, saveFileName, remove_on_success);
 }
 
 void
-file_editor::handle_dbstop_request (const QString& file, int line)
+file_editor::handle_update_debug_pointer_request (const QString& file, int line)
 {
   request_open_file (file, line, true);
 }
 
 void
 file_editor::request_undo ()
 {
   emit fetab_undo (_tab_widget->currentWidget ());
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -124,17 +124,17 @@ public slots:
   void handle_tab_close_request (int index);
   void handle_tab_remove_request ();
   void handle_add_filename_to_list (const QString& fileName, QWidget *ID);
   void active_tab_changed (int index);
   void handle_editor_state_changed (bool enableCopy, const QString& fileName);
   void handle_mru_add_file (const QString& file_name);
   void check_conflict_save (const QString& fileName, bool remove_on_success);
 
-  void handle_dbstop_request (const QString& file, int line);
+  void handle_update_debug_pointer_request (const QString& file, int line);
 
   /** Tells the editor to react on changed settings. */
   void notice_settings ();
 
 private slots:
   void request_open_file (const QString& fileName, int line = -1, bool = false);
 
 private:
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -505,20 +505,20 @@ main_window::handle_quit_debug_mode ()
   _debug_step_out->setEnabled (false);
   _debug_quit->setEnabled (false);
 #ifdef HAVE_QSCINTILLA
   _file_editor->handle_quit_debug_mode ();
 #endif
 }
 
 void
-main_window::handle_dbstop_request (const QString& file, int line)
+main_window::handle_update_debug_pointer_request (const QString& file, int line)
 {
 #ifdef HAVE_QSCINTILLA
-  _file_editor->handle_dbstop_request (file, line);
+  _file_editor->handle_update_debug_pointer_request (file, line);
 #endif
 }
 
 void
 main_window::debug_continue ()
 {
   octave_link::post_event (this, &main_window::debug_continue_callback);
 }
@@ -1169,18 +1169,18 @@ main_window::construct ()
            SLOT(handle_entered_debug_mode ()));
 
   connect (_octave_qt_event_listener,
            SIGNAL (quit_debug_mode_signal ()),
            this,
            SLOT (handle_quit_debug_mode ()));
 
   connect (_octave_qt_event_listener,
-           SIGNAL (dbstop_signal (const QString&, int)), this,
-           SLOT (handle_dbstop_request (const QString&, int)));
+           SIGNAL (update_debug_pointer_signal (const QString&, int)), this,
+           SLOT (handle_update_debug_pointer_request (const QString&, int)));
 }
 
 void
 main_window::save_workspace_callback (const std::string& file)
 {
   Fsave (ovl (file));
 }
 
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -113,17 +113,17 @@ public slots:
   void handle_command_history_visible (bool);
   void handle_current_directory_visible (bool);
   void handle_workspace_visible (bool);
   void handle_editor_visible (bool);
   void handle_documentation_visible (bool);
 
   void handle_entered_debug_mode ();
   void handle_quit_debug_mode ();
-  void handle_dbstop_request (const QString& file, int line);
+  void handle_update_debug_pointer_request (const QString& file, int line);
   void debug_continue ();
   void debug_step_into ();
   void debug_step_over ();
   void debug_step_out ();
   void debug_quit ();
 
   void read_settings ();
   void write_settings ();
diff --git a/libgui/src/octave-adapter/octave-event-listener.h b/libgui/src/octave-adapter/octave-event-listener.h
--- a/libgui/src/octave-adapter/octave-event-listener.h
+++ b/libgui/src/octave-adapter/octave-event-listener.h
@@ -35,17 +35,17 @@ class octave_event_listener
     current_directory_has_changed (const std::string& directory) = 0;
 
     virtual void
     update_workspace (void) = 0;
 
     virtual void
     update_history (void) = 0;
 
-    virtual void dbstop (const std::string& file, int line) = 0;
+    virtual void update_debug_pointer (const std::string& file, int line) = 0;
 
     virtual void about_to_exit () = 0;
 
     virtual void entered_debug_mode () = 0;
     virtual void quit_debug_mode () = 0;
 };
 
 #endif // OCTAVEEVENTLISTENER_H
diff --git a/libgui/src/octave-adapter/octave-link.cc b/libgui/src/octave-adapter/octave-link.cc
--- a/libgui/src/octave-adapter/octave-link.cc
+++ b/libgui/src/octave-adapter/octave-link.cc
@@ -152,17 +152,17 @@ octave_link::do_update_history (void)
     {
       event_listener->update_history ();
 
       do_process_events ();
     }
 }
 
 void
-octave_link::do_dbstop (const octave_value_list& args)
+octave_link::do_update_debug_pointer (const octave_value_list& args)
 {
   if (event_listener)
     {
       if (args.length () == 1)
         {
           octave_scalar_map m = args(0).scalar_map_value ();
 
           if (! error_state)
@@ -170,17 +170,17 @@ octave_link::do_dbstop (const octave_val
               octave_value ov_file = m.getfield ("file");
               octave_value ov_line = m.getfield ("line");
 
               std::string file = ov_file.string_value ();
               int line = ov_line.int_value ();
 
               if (! error_state)
                 {
-                  event_listener->dbstop (file, line);
+                  event_listener->update_debug_pointer (file, line);
 
                   do_process_events ();
                 }
               else
                 ::error ("invalid struct in dbstop callback");
             }
           else
             ::error ("expecting struct in dbstop callback");
@@ -198,19 +198,19 @@ octave_link::do_pre_input_event_hook_fcn
 
 void
 octave_link::do_post_input_event_hook_fcn (void)
 {
   do_update_history ();
 }
 
 void
-octave_link::do_dbstop_event_hook_fcn (const octave_value_list& args)
+octave_link::do_debug_input_event_hook_fcn (const octave_value_list& args)
 {
-  do_dbstop (args);
+  do_update_debug_pointer (args);
 }
 
 bool
 octave_link::instance_ok (void)
 {
   bool retval = true;
 
   if (! instance)
diff --git a/libgui/src/octave-adapter/octave-link.h b/libgui/src/octave-adapter/octave-link.h
--- a/libgui/src/octave-adapter/octave-link.h
+++ b/libgui/src/octave-adapter/octave-link.h
@@ -129,38 +129,32 @@ public:
   }
 
   static void update_history (void)
   {
     if (instance_ok ())
       instance->do_update_history ();
   }
 
-  static void dbstop (const octave_value_list& args)
-  {
-    if (instance_ok ())
-      instance->do_dbstop (args);
-  }
-
   static void pre_input_event_hook_fcn (void)
   {
     if (instance_ok ())
       instance->do_pre_input_event_hook_fcn ();
   }
 
   static void post_input_event_hook_fcn (void)
   {
     if (instance_ok ())
       instance->do_post_input_event_hook_fcn ();
   }
 
-  static void dbstop_event_hook_fcn (const octave_value_list& args)
+  static void debug_input_event_hook_fcn (const octave_value_list& args)
   {
     if (instance_ok ())
-      instance->do_dbstop_event_hook_fcn (args);
+      instance->do_debug_input_event_hook_fcn (args);
   }
 
 private:
 
   static octave_link *instance;
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
@@ -215,16 +209,16 @@ private:
   void do_about_to_exit (void);
 
   void do_entered_readline_hook (void) { }
   void do_finished_readline_hook (void) { }
 
   std::string do_last_working_directory (void);
   void do_update_workspace (void);
   void do_update_history (void);
-  void do_dbstop (const octave_value_list& args);
+  void do_update_debug_pointer (const octave_value_list& args);
 
   void do_pre_input_event_hook_fcn (void);
   void do_post_input_event_hook_fcn (void);
-  void do_dbstop_event_hook_fcn (const octave_value_list& args);
+  void do_debug_input_event_hook_fcn (const octave_value_list& args);
 };
 
 #endif // OCTAVELINK_H
diff --git a/libgui/src/octave-adapter/octave-main-thread.cc b/libgui/src/octave-adapter/octave-main-thread.cc
--- a/libgui/src/octave-adapter/octave-main-thread.cc
+++ b/libgui/src/octave-adapter/octave-main-thread.cc
@@ -51,21 +51,21 @@ post_input_event_hook_fcn (const octave_
   octave_value_list retval;
 
   octave_link::post_input_event_hook_fcn ();
 
   return retval;
 }
 
 static octave_value_list
-dbstop_event_hook_fcn (const octave_value_list& args, int)
+debug_input_event_hook_fcn (const octave_value_list& args, int)
 {
   octave_value_list retval;
 
-  octave_link::dbstop_event_hook_fcn (args);
+  octave_link::debug_input_event_hook_fcn (args);
 
   return retval;
 }
 
 octave_main_thread::octave_main_thread () : QThread ()
 {
 }
 
@@ -83,17 +83,17 @@ octave_main_thread::run ()
   octave_value pre_fcn (new octave_builtin (pre_input_event_hook_fcn));
   octave_value pre_fcn_handle (new octave_fcn_handle (pre_fcn));
   Fadd_pre_input_event_hook (pre_fcn_handle);
 
   octave_value post_fcn (new octave_builtin (post_input_event_hook_fcn));
   octave_value post_fcn_handle (new octave_fcn_handle (post_fcn));
   Fadd_post_input_event_hook (post_fcn_handle);
 
-  octave_value dbstop_fcn (new octave_builtin (dbstop_event_hook_fcn));
-  octave_value dbstop_fcn_handle (new octave_fcn_handle (dbstop_fcn));
-  Fadd_dbstop_event_hook (dbstop_fcn_handle);
+  octave_value debug_fcn (new octave_builtin (debug_input_event_hook_fcn));
+  octave_value debug_fcn_handle (new octave_fcn_handle (debug_fcn));
+  Fadd_debug_input_event_hook (debug_fcn_handle);
 
   // Prime the history list.
   octave_link::update_history ();
 
   octave_execute_interpreter ();
 }
diff --git a/libgui/src/octave-qt-event-listener.cc b/libgui/src/octave-qt-event-listener.cc
--- a/libgui/src/octave-qt-event-listener.cc
+++ b/libgui/src/octave-qt-event-listener.cc
@@ -49,19 +49,20 @@ octave_qt_event_listener::update_workspa
 
 void
 octave_qt_event_listener::update_history (void)
 {
   emit update_history_signal ();
 }
 
 void
-octave_qt_event_listener::dbstop (const std::string& file, int line)
+octave_qt_event_listener::update_debug_pointer (const std::string& file,
+                                                int line)
 {
-  emit dbstop_signal (QString::fromStdString (file), line);
+  emit update_debug_pointer_signal (QString::fromStdString (file), line);
 }
 
 void
 octave_qt_event_listener::about_to_exit ()
 {
   qApp->quit ();
 }
 
diff --git a/libgui/src/octave-qt-event-listener.h b/libgui/src/octave-qt-event-listener.h
--- a/libgui/src/octave-qt-event-listener.h
+++ b/libgui/src/octave-qt-event-listener.h
@@ -32,24 +32,24 @@ class octave_qt_event_listener
 {
   Q_OBJECT
   public:
   octave_qt_event_listener (QObject *parent = 0);
 
   void current_directory_has_changed (const std::string& directory);
   void update_workspace (void);
   void update_history (void);
-  void dbstop (const std::string& file, int line);
+  void update_debug_pointer (const std::string& file, int line);
   void about_to_exit ();
 
   void entered_debug_mode ();
   void quit_debug_mode ();
 
 signals:
   void current_directory_has_changed_signal (const QString& directory);
   void update_workspace_signal (void);
   void update_history_signal (void);
-  void dbstop_signal (const QString& file, int line);
+  void update_debug_pointer_signal (const QString& file, int line);
   void entered_debug_mode_signal ();
   void quit_debug_mode_signal ();
 };
 
 #endif // OCTAVEQTEVENTLISTENER_H
diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -120,17 +120,17 @@ static std::string last_debugging_comman
 static bool Vgud_mode = false;
 
 // The filemarker used to separate filenames from subfunction names
 char Vfilemarker = '>';
 
 static hook_function_list pre_input_event_hook_functions;
 static hook_function_list input_event_hook_functions;
 static hook_function_list post_input_event_hook_functions;
-static hook_function_list dbstop_event_hook_functions;
+static hook_function_list debug_input_event_hook_functions;
 
 // For octave_quit.
 void
 remove_input_event_hook_functions (void)
 {
   input_event_hook_functions.clear ();
 }
 
@@ -503,17 +503,17 @@ get_debug_input (const std::string& prom
             {
               octave_scalar_map location_info_map;
 
               location_info_map.setfield ("file", nm);
               location_info_map.setfield ("line", curr_debug_line);
 
               octave_value location_info (location_info_map);
 
-              dbstop_event_hook_functions.run (location_info);
+              debug_input_event_hook_functions.run (location_info);
 
               std::string line_buf
                 = get_file_line (nm, curr_debug_line);
 
               if (! line_buf.empty ())
                 buf << "\n" << curr_debug_line << ": " << line_buf;
             }
         }
@@ -1363,20 +1363,20 @@ interactive user input.\n\
         error ("remove_post_input_event_hook: argument not valid as a hook function name or id");
     }
   else
     print_usage ();
 
   return retval;
 }
 
-DEFUN (add_dbstop_event_hook, args, ,
+DEFUN (add_debug_input_event_hook, args, ,
   "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {@var{id} =} add_dbstop_event_hook (@var{fcn})\n\
-@deftypefnx {Built-in Function} {@var{id} =} add_dbstop_event_hook (@var{fcn}, @var{data})\n\
+@deftypefn  {Built-in Function} {@var{id} =} add_debug_input_event_hook (@var{fcn})\n\
+@deftypefnx {Built-in Function} {@var{id} =} add_debug_input_event_hook (@var{fcn}, @var{data})\n\
 Add the named function or function handle @var{fcn} to the list of\n\
 functions to call when a debugger breakpoint is reached.  The function\n\
 should have the form\n\
 \n\
 @example\n\
 @var{fcn} (@var{location}, @var{data})\n\
 @end example\n\
 \n\
@@ -1389,17 +1389,17 @@ The name of the file where the breakpoin
 The line number corresponding to the breakpoint.\n\
 @end table\n\
 \n\
 If @var{data} is omitted when the hook function is added, the hook\n\
 function is called with a single argument.\n\
 \n\
 The returned identifier may be used to remove the function handle from\n\
 the list of input hook functions.\n\
-@seealso{remove_dbstop_event_hook}\n\
+@seealso{remove_debug_input_event_hook}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
@@ -1407,62 +1407,62 @@ the list of input hook functions.\n\
 
       if (nargin == 2)
         user_data = args(1);
 
       hook_function hook_fcn (args(0), user_data);
 
       if (! error_state)
         {
-          dbstop_event_hook_functions.insert (hook_fcn.id (), hook_fcn);
+          debug_input_event_hook_functions.insert (hook_fcn.id (), hook_fcn);
 
           retval = hook_fcn.id ();
         }
       else
-        error ("add_dbstop_event_hook: expecting string as first arg");
+        error ("add_debug_input_event_hook: expecting string as first arg");
     }
   else
     print_usage ();
 
   return retval;
 }
 
-DEFUN (remove_dbstop_event_hook, args, ,
+DEFUN (remove_debug_input_event_hook, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} remove_dbstop_event_hook (@var{name})\n\
-@deftypefnx {Built-in Function} {} remove_dbstop_event_hook (@var{fcn_id})\n\
+@deftypefn {Built-in Function} {} remove_debug_input_event_hook (@var{name})\n\
+@deftypefnx {Built-in Function} {} remove_debug_input_event_hook (@var{fcn_id})\n\
 Remove the named function or function handle with the given identifier\n\
 from the list of functions to call immediately after accepting\n\
 interactive user input.\n\
-@seealso{add_dbstop_event_hook}\n\
+@seealso{add_debug_input_event_hook}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
       std::string hook_fcn_id = args(0).string_value ();
 
       bool warn = (nargin < 2);
 
       if (! error_state)
         {
           hook_function_list::iterator p
-            = dbstop_event_hook_functions.find (hook_fcn_id);
+            = debug_input_event_hook_functions.find (hook_fcn_id);
 
-          if (p != dbstop_event_hook_functions.end ())
-            dbstop_event_hook_functions.erase (p);
+          if (p != debug_input_event_hook_functions.end ())
+            debug_input_event_hook_functions.erase (p);
           else if (warn)
-            warning ("remove_dbstop_event_hook: %s not found in list",
+            warning ("remove_debug_input_event_hook: %s not found in list",
                      hook_fcn_id.c_str ());
         }
       else
-        error ("remove_dbstop_event_hook: argument not valid as a hook function name or id");
+        error ("remove_debug_input_event_hook: argument not valid as a hook function name or id");
     }
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN (PS1, args, nargout,
