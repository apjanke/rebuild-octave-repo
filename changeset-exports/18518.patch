# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1393092378 18000
#      Sat Feb 22 13:06:18 2014 -0500
# Branch stable
# Node ID 0bdecd41b2dd33aff2325a0d82038aedc897b8d5
# Parent  fdd27f68b0118c097cd88bf5b84a77f2c5b7f0ea
correctly size fread result (bug #41648)

* oct-stream.cc (octave_base_stream::read): When reading to EOF, don't
add extra column to the result matrix if the number of elements found
is an exact multiple of the number of rows requested.
Avoid mixed signed/unsigned comparisons.
* io.tst: New tests.

diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -3271,17 +3271,17 @@ octave_stream::read (const Array<double>
                   char *input_buf = new char [input_buf_size];
 
                   is.read (input_buf, input_buf_size);
 
                   size_t gcount = is.gcount ();
 
                   char_count += gcount;
 
-                  size_t nel = gcount / input_elt_size;
+                  octave_idx_type nel = gcount / input_elt_size;
 
                   count += nel;
 
                   input_buf_list.push_back (input_buf);
 
                   if (is && skip != 0 && nel == block_size)
                     {
                       // Seek to skip.  If skip would move past EOF,
@@ -3292,32 +3292,37 @@ octave_stream::read (const Array<double>
                       seek (0, SEEK_END);
 
                       off_t eof_pos = tell ();
 
                       // Is it possible for this to fail to return us to
                       // the original position?
                       seek (orig_pos, SEEK_SET);
 
-                      size_t remaining = eof_pos - orig_pos;
+                      off_t remaining = eof_pos - orig_pos;
 
                       if (remaining < skip)
                         seek (0, SEEK_END);
                       else
                         seek (skip, SEEK_CUR);
 
                       if (! is)
                         break;
                     }
                 }
 
               if (read_to_eof)
                 {
                   if (nc < 0)
-                    nc = count / nr + 1;
+                    {
+                      nc = count / nr;
+
+                      if (count % nr != 0)
+                        nc ++;
+                    }
                   else
                     nr = count;
                 }
               else if (count == 0)
                 {
                   nr = 0;
                   nc = 0;
                 }
diff --git a/test/io.tst b/test/io.tst
--- a/test/io.tst
+++ b/test/io.tst
@@ -550,22 +550,54 @@
 
 %!test
 %! id = tmpfile ();
 %! fwrite (id, char (0:15));
 %! frewind (id);
 %! [data, count] = fread (id, inf, "2*uint8", 2);
 %! assert (data, [0; 1; 4; 5; 8; 9; 12; 13]);
 %! assert (count, 8);
+%! fclose (id);
+
+%!test
+%! id = tmpfile ();
+%! fwrite (id, char (0:15));
 %! frewind (id);
 %! [data, count] = fread (id, 3, "2*uint8", 3);
 %! assert (data, [0; 1; 5]);
 %! assert (count, 3);
 %! [data, count] = fread (id, 3, "2*uint8", 3);
 %! assert (data, [6; 7; 11]);
 %! assert (count, 3);
 %! [data, count] = fread (id, 3, "2*uint8", 3);
 %! assert (data, [12; 13]);
 %! assert (count, 2);
 %! [data, count] = fread (id, 3, "2*uint8", 3);
 %! assert (data, []);
 %! assert (count, 0);
 %! fclose (id);
+
+%!test
+%! id = tmpfile ();
+%! fwrite (id, char (0:15));
+%! frewind (id);
+%! [data, count] = fread (id, [1, Inf], "4*uint16", 3);
+%! assert (data, [256, 770, 1284, 1798, 3083, 3597]);
+%! assert (count, 6);
+%! fclose (id);
+
+%!test
+%! id = tmpfile ();
+%! fwrite (id, char (0:15));
+%! frewind (id);
+%! [data, count] = fread (id, [1, Inf], "4*uint16", 3);
+%! assert (data, [256, 770, 1284, 1798, 3083, 3597]);
+%! assert (count, 6);
+%! fclose (id);
+
+%!test
+%! id = tmpfile ();
+%! fwrite (id, char (0:15));
+%! frewind (id);
+%! [data, count] = fread (id, [3, Inf], "4*uint16", 3);
+%! assert (data, [256, 1798; 770, 3083; 1284, 3597]);
+%! assert (count, 6);
+%! fclose (id);
