# HG changeset patch
# User jwe
# Date 823434739 0
#      Sun Feb 04 11:52:19 1996 +0000
# Node ID 51fd6b03c3bb6a4443d69b16057dc3b4072571a5
# Parent  6822f1ccec47b144fc435bb1a342d54e820ed03f
[project @ 1996-02-04 11:47:32 by jwe]

diff --git a/liboctave/Bounds.cc b/liboctave/Bounds.cc
--- a/liboctave/Bounds.cc
+++ b/liboctave/Bounds.cc
@@ -37,29 +37,16 @@ Software Foundation, 59 Temple Place - S
 // error handling
 
 void
 Bounds::error (const char* msg)
 {
   (*current_liboctave_error_handler) ("fatal bounds error: ", msg);
 }
 
-Bounds::Bounds (const ColumnVector l, const ColumnVector u)
-{
-  if (l.capacity () != u.capacity ())
-    {
-      error ("inconsistent sizes for lower and upper bounds");
-      return;
-    }
-
-  nb = l.capacity ();
-  lb = l;
-  ub = u;
-}
-
 Bounds&
 Bounds::set_bounds (const ColumnVector l, const ColumnVector u)
 {
   if (l.capacity () != u.capacity ())
     {
       error ("inconsistent sizes for lower and upper bounds");
       return *this;
     }
diff --git a/liboctave/Bounds.h b/liboctave/Bounds.h
--- a/liboctave/Bounds.h
+++ b/liboctave/Bounds.h
@@ -1,12 +1,12 @@
 // Bounds.h                                                -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -27,58 +27,67 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
 #include "dColVector.h"
 
-class Bounds
+class
+Bounds
 {
 public:
 
-  Bounds (void) { nb = 0; }
+  Bounds (void)
+    : lb (), ub () { }
+
+  Bounds (int n)
+    : lb (n, 0.0), ub (n, 0.0) { }
 
-  Bounds (int n) : lb (nb, 0.0), ub (nb, 0.0) { nb = n; }
-
-  Bounds (const ColumnVector lb, const ColumnVector ub);
+  Bounds (const ColumnVector l, const ColumnVector u)
+    : lb (l), ub (u)
+      {
+        if (lb.capacity () != ub.capacity ())
+	  {
+	    error ("inconsistent sizes for lower and upper bounds");
+	    return;
+	  }
+      }
 
   Bounds (const Bounds& a)
-    {
-      nb = a.size ();
-      lb = a.lower_bounds ();
-      ub = a.upper_bounds ();
-    }
+    : lb (a.lb), ub (a.ub) { }
 
   Bounds& operator = (const Bounds& a)
     {
-      nb = a.size ();
-      lb = a.lower_bounds ();
-      ub = a.upper_bounds ();
-
+      if (this != &a)
+	{
+	  lb = a.lower_bounds ();
+	  ub = a.upper_bounds ();
+	}
       return *this;
     }
 
+  ~Bounds (void) { }
+
   Bounds& resize (int n)
     {
-      nb = n;
-      lb.resize (nb);
-      ub.resize (nb);
+      lb.resize (n);
+      ub.resize (n);
 
       return *this;
     }
 
   double lower_bound (int index) const { return lb.elem (index); }
   double upper_bound (int index) const { return ub.elem (index); }
 
   ColumnVector lower_bounds (void) const { return lb; }
   ColumnVector upper_bounds (void) const { return ub; }
 
-  int size (void) const { return nb; }
+  int size (void) const { return lb.capacity (); }
 
   Bounds& set_bound (int index, double low, double high)
     {
       lb.elem (index) = low;
       ub.elem (index) = high;
       return *this;
     }
 
@@ -120,22 +129,19 @@ public:
 
   friend ostream& operator << (ostream& os, const Bounds& b);
 
 protected:
 
   ColumnVector lb;
   ColumnVector ub;
 
-  int nb;
-
 private:
 
   void error (const char *msg);
-
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/CollocWt.h b/liboctave/CollocWt.h
--- a/liboctave/CollocWt.h
+++ b/liboctave/CollocWt.h
@@ -1,12 +1,12 @@
 // CollocWt.h                                                -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -28,128 +28,69 @@ Software Foundation, 59 Temple Place - S
 #pragma interface
 #endif
 
 class ostream;
 
 #include "dMatrix.h"
 #include "dColVector.h"
 
-class CollocWt
+class
+CollocWt
 {
 public:
 
   CollocWt::CollocWt (void)
-    {
-      n = 0;
-      inc_left = 0;
-      inc_right = 0;
-      lb = 0.0;
-      rb = 1.0;
-
-      Alpha = 0.0;
-      Beta = 0.0;
-
-      initialized = 0;
-    }
+    : n (0), inc_left (0), inc_right (0), lb (0.0), rb (1.0),
+      Alpha (0.0), Beta (0.0), r (), q (), A (), B (), initialized (0) { }
 
   CollocWt::CollocWt (int nc, int il, int ir)
-    {
-      n = nc;
-      inc_left = il;
-      inc_right = ir;
-      lb = 0.0;
-      rb = 1.0;
-
-      Alpha = 0.0;
-      Beta = 0.0;
-
-      initialized = 0;
-    }
+    : n (nc), inc_left (il), inc_right (ir), lb (0.0), rb (1.0),
+      Alpha (0.0), Beta (0.0), r (), q (), A (), B (), initialized (0) { }
 
   CollocWt::CollocWt (int nc, int il, int ir, double l, double r)
-    {
-      n = nc;
-      inc_left = il;
-      inc_right = ir;
-      lb = l;
-      rb = r;
-
-      Alpha = 0.0;
-      Beta = 0.0;
-
-      initialized = 0;
-    }
+    : n (nc), inc_left (il), inc_right (ir), lb (l), rb (r),
+      Alpha (0.0), Beta (0.0), r (), q (), A (), B (), initialized (0) { }
 
   CollocWt::CollocWt (int nc, double a, double b, int il, int ir)
-    {
-      n = nc;
-      inc_left = il;
-      inc_right = ir;
-      lb = 0.0;
-      rb = 1.0;
-
-      Alpha = a;
-      Beta = b;
-
-      initialized = 0;
-    }
+    : n (nc), inc_left (il), inc_right (ir), lb (0.0), rb (1.0),
+      Alpha (a), Beta (b), initialized (0) { }
 
   CollocWt::CollocWt (int nc, double a, double b, int il, int ir,
 		      double l, double r)  
-    {
-      n = nc;
-      inc_left = il;
-      inc_right = ir;
-      lb = l;
-      rb = r;
-
-      Alpha = a;
-      Beta = b;
-
-      initialized = 0;
-    }
+    : n (nc), inc_left (il), inc_right (ir), lb (l), rb (r),
+      Alpha (a), Beta (b), r (), q (), A (), B (), initialized (0) { }
 
   CollocWt::CollocWt (const CollocWt& a)
-    {
-      n = a.n;
-      inc_left = a.inc_left;
-      inc_right = a.inc_right;
-      lb = a.lb;
-      rb = a.rb;
-      r = a.r;
-      q = a.q;
-      A = a.A;
-      B = a.B;
-
-      nt = n + inc_left + inc_right;
-
-      initialized = a.initialized;
-    }
+    : n (a.n), inc_left (a.inc_left), inc_right (a.inc_right),
+      lb (a.lb), rb (a.rb), Alpha (a.Alpha), Beta (a.Beta),
+      r (a.r), q (a.q), A (a.A), B (a.B),
+      initialized (a.initialized) { } 
 
   CollocWt&
   CollocWt::operator = (const CollocWt& a)
     {
-      n = a.n;
-      inc_left = a.inc_left;
-      inc_right = a.inc_right;
-      lb = a.lb;
-      rb = a.rb;
-      r = a.r;
-      q = a.q;
-      A = a.A;
-      B = a.B;
-
-      nt = a.nt;
-
-      initialized = a.initialized;
-
+      if (this != &a)
+	{
+	  n = a.n;
+	  inc_left = a.inc_left;
+	  inc_right = a.inc_right;
+	  lb = a.lb;
+	  rb = a.rb;
+	  r = a.r;
+	  q = a.q;
+	  A = a.A;
+	  B = a.B;
+	  initialized = a.initialized;
+	}
       return *this;
     }
 
+  ~CollocWt (void) { }
+
   CollocWt& resize (int ncol)
     {
       n = ncol;
       initialized = 0;
       return *this;
     }
 
   CollocWt& add_left (void)
@@ -220,17 +161,16 @@ public:
 
   Matrix second (void) { if (!initialized) init (); return B; }
 
   friend ostream& operator << (ostream&, const CollocWt&);
 
 protected:
 
   int n;
-  int nt;
 
   int inc_left;
   int inc_right;
 
   double lb;
   double rb;
 
   double Alpha;
