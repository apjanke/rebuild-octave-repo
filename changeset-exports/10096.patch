# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1263408177 18000
#      Wed Jan 13 13:42:57 2010 -0500
# Node ID ffc5426c85a43d1db0231386115cdf15666c2cfc
# Parent  eb8ac0eed9f1c442e4a95e29d10f53f2603000c7
build_bc_overload_tests.sh: accept expected results file as argument

diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,13 @@
+2010-01-13  John W. Eaton  <jwe@octave.org>
+
+	* Makefile.am (test_bc_overloads.m): Accept expected results
+	file as argument.  Style fixes.
+
 2010-01-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* build_bc_overload_tests.sh: New shell script.
 	* build_bc_overloads_expected.m: New source (not normally used).
 	* bc_overloads_expected: New text file.
 	* Makefile.am: Build test_bc_overloads.m.
 
 2009-12-25  John W. Eaton  <jwe@octave.org>
diff --git a/test/Makefile.am b/test/Makefile.am
--- a/test/Makefile.am
+++ b/test/Makefile.am
@@ -64,17 +64,17 @@ include @Spork/module.mk
 
 check: test_sparse.m test_bc_overloads.m
 	$(top_builddir)/run-octave --norc --silent --no-history $(srcdir)/fntests.m $(srcdir)
 
 test_sparse.m: build_sparse_tests.sh
 	$(srcdir)/build_sparse_tests.sh
 
 test_bc_overloads.m: build_bc_overload_tests.sh bc_overloads_expected
-	$(srcdir)/build_bc_overload_tests.sh
+	$(srcdir)/build_bc_overload_tests.sh $(srcdir)/bc_overloads_expected
 
 EXTRA_DIST = \
   ChangeLog \
   build_sparse_tests.sh \
   build_bc_overload_tests.sh \
   bc_overloads_expected \
   build_bc_overloads_expected.m \
   $(FCN_FILES)
diff --git a/test/build_bc_overload_tests.sh b/test/build_bc_overload_tests.sh
--- a/test/build_bc_overload_tests.sh
+++ b/test/build_bc_overload_tests.sh
@@ -1,9 +1,9 @@
-#!/bin/sh
+#! /bin/sh
 
 # Copyright (C) 2010 VZLU Prague
 #
 # This file is part of Octave.
 # 
 # Octave is free software; you can redistribute it and/or modify it
 # under the terms of the GNU General Public License as published by the
 # Free Software Foundation; either version 3 of the License, or (at
@@ -13,40 +13,62 @@
 # ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 # FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 # for more details.
 # 
 # You should have received a copy of the GNU General Public License
 # along with Octave; see the file COPYING.  If not, see
 # <http://www.gnu.org/licenses/>.
 
-CLASSES="double single char logical int8 int16 int32 int64 \
-uint8 uint16 uint32 uint64 struct cell function_handle"
+CLASSES="
+  double
+  single
+  char
+  logical
+  int8
+  int16
+  int32
+  int64
+  uint8
+  uint16
+  uint32
+  uint64
+  struct
+  cell
+  function_handle
+"
 
-for class in $CLASSES ; do
-	DIR=\@$class
-	test -d $DIR || mkdir $DIR || { echo "error: could not create $DIR" ; exit ; }
-	cat > $DIR/tbcover.m <<end
+if [ $# -eq 1 ]; then
+  expected_results_file="$1"
+else
+  echo "usage: build_bc_overload_tests.sh expected-results-file" 1>&2
+  exit 1
+fi
+
+for class in $CLASSES; do
+  DIR="@$class"
+  test -d $DIR || mkdir $DIR || { echo "error: could not create $DIR"; exit; }
+  cat > $DIR/tbcover.m << EOF
 % DO NOT EDIT - generated automatically
 function s = tbcover (x, y)
   s = '$class';
-end
+EOF
 done
 
-cat > tbcover.m <<end
+cat > tbcover.m << EOF
 % DO NOT EDIT - generated automatically
 function s = tbcover (x, y)
   s = 'none';
-end
+EOF
 
 if test "$1" == "overloads_only" ; then
-	exit
+  exit
 fi
 
-cat > test_bc_overloads.m <<end
+cat > test_bc_overloads.m << EOF
 ## THIS IS AN AUTOMATICALLY GENERATED FILE --- DO NOT EDIT ---
 ## instead modify build_bc_overload_tests.sh to generate the tests that you want.
 
 %!shared ex
 %! ex.double = 1;
 %! ex.single = single(1);
 %! ex.logical = true;
 %! ex.char = 'char';
@@ -57,36 +79,36 @@ cat > test_bc_overloads.m <<end
 %! ex.uint8  = uint8 (1);
 %! ex.uint16 = uint16 (1);
 %! ex.uint32 = uint32 (1);
 %! ex.uint64 = uint64 (1);
 %! ex.cell = {};
 %! ex.struct = struct ();
 %! ex.function_handle = @numel;
 
-end
+EOF
 
-cat bc_overloads_expected |\
+cat $expected_results_file | \
 while read cl1 cl2 clr ; do
-	cat >> test_bc_overloads.m <<end
+  cat >> test_bc_overloads.m << EOF
 %% Name call
 %!assert (tbcover (ex.$cl1, ex.$cl2), "$clr")
 %% Handle call
 %!assert ((@tbcover) (ex.$cl1, ex.$cl2), "$clr")
 
-end
+EOF
 done
 
-cat >> test_bc_overloads.m <<end
+cat >> test_bc_overloads.m << EOF
 %%test handles through cellfun
 %!test
 %! f = fieldnames (ex);
 %! n = numel (f);
 %! s = c1 = c2 = cell (n);
 %! for i = 1:n
 %!   for j = 1:n
 %!     c1{i,j} = ex.(f{i});
 %!     c2{i,j} = ex.(f{j});
 %!     s{i,j} = tbcover (ex.(f{i}), ex.(f{j}));
 %!   endfor
 %! endfor
 %! assert (cellfun (@tbcover, c1, c2, "uniformoutput", false), s);
-end
+EOF
