# HG changeset patch
# User jwe
# Date 811482486 0
#      Tue Sep 19 03:48:06 1995 +0000
# Node ID 29f274b42cb1fc19cd3fa271a620e6c56ea5078e
# Parent  c194fa377970bc1d7e83096d2bcae2a303ac1b88
[project @ 1995-09-19 03:41:32 by jwe]

diff --git a/config.h.bot b/config.h.bot
--- a/config.h.bot
+++ b/config.h.bot
@@ -1,6 +1,12 @@
 
 #if defined (__GNUC__)
-#define UNUSED
+#define UNUSED /* waiting for this to work with g++ */
 #else
 #define UNUSED
 #endif
+
+#if defined __GNUC__
+#define NORETURN __attribute__ ((__noreturn__))
+#else
+#define NORETURN
+#endif
diff --git a/src/error.h b/src/error.h
--- a/src/error.h
+++ b/src/error.h
@@ -23,29 +23,24 @@ Software Foundation, 59 Temple Place - S
 
 #if !defined (octave_error_h)
 #define octave_error_h 1
 
 #define panic_impossible() \
   panic ("impossible state reached in file `%s' at line %d", \
 	 __FILE__, __LINE__)
 
-// Tell g++ that panic doesn't return;
-
-#ifdef __GNUG__
-typedef void v_fcn_cpc_x (const char *, ...);
-volatile v_fcn_cpc_x panic;
-#endif
+class string;
 
 extern void message (const char *name, const char *fmt, ...);
 extern void usage (const char *fmt, ...);
 extern void warning (const char *fmt, ...);
 extern void error (const char *fmt, ...);
 extern void parse_error (const char *fmt, ...);
-extern void panic (const char *fmt, ...);
+extern void panic (const char *fmt, ...) NORETURN;
 
 // Current error state.
 extern int error_state;
 
 // XXX FIXME XXX
 extern int suppress_octave_error_messages;
 
 #endif
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -49,16 +49,17 @@ Software Foundation, 59 Temple Place - S
 #include <fcntl.h>
 
 #include <DLList.h>
 
 #include "dMatrix.h"
 
 #include "defun.h"
 #include "error.h"
+#include "file-info.h"
 #include "file-io.h"
 #include "help.h"
 #include "input.h"
 #include "mappers.h"
 #include "oct-map.h"
 #include "octave-hist.h"
 #include "pager.h"
 #include "statdefs.h"
@@ -76,85 +77,16 @@ extern void mode_string ();
 }
 
 // keeps a count of args sent to printf or scanf
 static int fmt_arg_count = 0;
 
 // double linked list containing relevant information about open files
 static DLList <file_info> file_list;
 
-file_info::file_info (void)
-{
-  file_number = -1;
-  file_name = 0;
-  file_fptr = 0;
-  file_mode = 0;
-}
-
-file_info::file_info (int n, const char *nm, FILE *t, const char *md)
-{
-  file_number = n;
-  file_name = strsave (nm);
-  file_fptr = t;
-  file_mode = strsave (md);
-}
-
-file_info::file_info (const file_info& f)
-{
-  file_number = f.file_number;
-  file_name = strsave (f.file_name);
-  file_fptr = f.file_fptr;
-  file_mode = strsave (f.file_mode);
-}
-
-file_info&
-file_info::operator = (const file_info& f)
-{
-  if (this != & f)
-    {
-      file_number = f.file_number;
-      delete [] file_name;
-      file_name = strsave (f.file_name);
-      file_fptr = f.file_fptr;
-      delete [] file_mode;
-      file_mode = strsave (f.file_mode);
-    }
-  return *this;
-}
-
-file_info::~file_info (void)
-{
-  delete [] file_name;
-  delete [] file_mode;
-}
-
-int
-file_info::number (void) const
-{
-  return file_number;
-}
-
-const char *
-file_info::name (void) const
-{
-  return file_name;
-}
-
-FILE *
-file_info::fptr (void) const
-{
-  return file_fptr;
-}
-
-const char *
-file_info::mode (void) const
-{
-  return file_mode;
-}
-
 void
 initialize_file_io (void)
 {
   file_info octave_stdin (0, "stdin", stdin, "r");
   file_info octave_stdout (1, "stdout", stdout, "w");
   file_info octave_stderr (2, "stderr", stderr, "w");
 
   file_list.append (octave_stdin);
@@ -172,17 +104,17 @@ return_valid_file (const tree_constant& 
     {
       Pix p = file_list.first ();
       file_info file;
       int file_count = file_list.length ();
       for (int i = 0; i < file_count; i++)
 	{
 	  const char *file_name = arg.string_value ();
 	  file = file_list (p);
-	  if (strcmp (file.name (), file_name) == 0)
+	  if (file.name () == file_name)
 	    return p;
 	  file_list.next (p);
 	}
     }
   else
     {
       double file_num = arg.double_value ();
 
@@ -225,17 +157,17 @@ fopen_file_for_user (const char *name, c
       file_list.append (file);
       
       Pix p = file_list.first ();
       file_info file_from_list;
       int file_count = file_list.length ();
       for (int i = 0; i < file_count; i++)
 	{
 	  file_from_list = file_list (p);
-	  if (strcmp (file_from_list.name (), name) == 0)
+	  if (file_from_list.name () == name)
 	    return p;
 	  file_list.next (p);
 	}
     }
 
   error ("%s: unable to open file `%s'", warn_for, name);
 
   return 0;
@@ -329,17 +261,17 @@ fflush_internal (const Octave_object& ar
 
   Pix p = return_valid_file (args(0));
 
   if (! p)
     return retval;
 
   file_info file = file_list (p);
 
-  if (strcmp (file.mode (), "r") == 0)
+  if (file.mode () == "r")
     {
       warning ("can't flush an input stream");
       return retval;
     }
 
   int success = 0;
 
   if (file.number () == 1)
@@ -608,18 +540,18 @@ freport_internal (void)
   ostrstream output_buf;
 
   output_buf << "\n number  mode  name\n\n";
 
   int file_count = file_list.length ();
   for (int i = 0; i < file_count; i++)
     {
       file_info file = file_list (p);
-      output_buf.form ("%7d%6s  %s\n", file.number (), file.mode (),
-		       file.name ());
+      output_buf.form ("%7d%6s  %s\n", file.number (),
+		       file.mode ().data (), file.name ().data ());
       file_list.next (p);
     }
 
   output_buf << "\n" << ends;
   maybe_page_output (output_buf);
 
   return retval;
 }
@@ -817,17 +749,17 @@ close_files (void)
       if (p)
 	{
 	  file_info file = file_list (p);
 
 	  if (i > 2)   // do not close stdin, stdout, stderr!
 	    {
 	      int success = fclose (file.fptr ());
 	      if (success != 0)
-		error ("closing %s", file.name ());
+		error ("closing %s", file.name ().data ());
 	    }
 
 	  file_list.del (p);
 	}
       else
 	{
 	  error ("inconsistent state for internal file list!");
 	  break;
@@ -1390,17 +1322,17 @@ do_scanf (const char *type, const Octave
     {
       Pix p = file_io_get_file (args(0), "r", type);
 
       if (! p)
 	return retval;
 
       file = file_list (p);
 
-      if (strcmp (file.mode (), "w") == 0 || strcmp (file.mode (), "a") == 0)
+      if (file.mode () == "w" || file.mode () == "a")
 	{
 	  error ("%s: this file is opened for writing only", type);
 	  return retval;
 	}
 
       fptr = file.fptr ();
     }
 
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -25,24 +25,17 @@ Software Foundation, 59 Temple Place - S
 #define octave_octave_h 1
 
 #include <cstdio>
 
 class tree_statement_list;
 class tree_function;
 class Octave_str_obj;
 
-// Tell g++ that clean_up_and_exit doesn't return;
-
-#ifdef __GNUG__
-typedef void v_fcn_i (int);
-volatile v_fcn_i clean_up_and_exit;
-#endif
-
-extern void clean_up_and_exit (int);
+extern void clean_up_and_exit (int) NORETURN;
 
 extern void parse_and_execute (FILE *f, int print = 0);
 extern void parse_and_execute (char *s, int print = 0, int verbose = 0);
 
 // argv[0] for this program.
 extern char *raw_prog_name;
 
 // Cleaned-up name of this program, not including path information.
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -24,23 +24,16 @@ Software Foundation, 59 Temple Place - S
 #if !defined (octave_utils_h)
 #define octave_utils_h 1
 
 class istream;
 class ostrstream;
 class tree_constant;
 class Octave_object;
 
-// Tell g++ that jump_to_top_level doesn't return;
-
-#ifdef __GNUG__
-typedef void v_fcn_v (void);
-volatile v_fcn_v jump_to_top_level;
-#endif
-
 extern char *strsave (const char *);
 extern char *strconcat (const char *, const char *);
 
 extern void discard_until (istream&, char);
 
 #if 0
 extern char *read_until (istream&, char);
 #endif
@@ -49,17 +42,17 @@ extern char *search_path_for_file (const
 extern char *file_in_path (const char *, const char *);
 extern char *fcn_file_in_path (const char *);
 extern char *oct_file_in_path (const char *);
 
 extern char *octave_tmp_file_name (void);
 
 extern char **pathstring_to_vector (char *pathstring);
 
-extern void jump_to_top_level (void);
+extern void jump_to_top_level (void) NORETURN;
 
 extern int almost_match (const char *std, const char *s,
 			 int min_match_len = 1, int case_sens = 1);
 extern int keyword_almost_match (const char **std, int *min_len,
 				 const char *s, int min_toks_to_match,
 				 int max_toks);
 
 extern char **get_fcn_file_names (int& ffl_len, const char *dir,
