# HG changeset patch
# User jwe
# Date 1143498381 0
#      Mon Mar 27 22:26:21 2006 +0000
# Node ID 34cda7d94c08833082f31e30c0c13e6d311033f1
# Parent  7f79a99e273ec90dc6182daeb5e3822f6189ac11
[project @ 2006-03-27 22:26:18 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2006-03-27  John W. Eaton  <jwe@octave.org>
+
+	* configure.in: Downcase ac_cv_header_mach_o_dyld_h.
+	From Martin Costabel <costabel@wanadoo.fr>.
+
 2006-03-22  John W. Eaton  <jwe@octave.org>
 
 	* Makeconf.in: (TEXINFO_COLAMD, TEXINFO_CHOLMOD, TEXINFO_UMFPACK):
 	Substitute here.
 	(do-subst-texinfo-vals): New macro definition.
 
 	* configure.in: Don't substitute OCTAVE_VERSION, OCTAVE_HOSTTYPE,
 	or OCTAVE_HOME.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.503 $)
+AC_REVISION($Revision: 1.504 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -1285,17 +1285,17 @@ shl_load_api=false
 loadlibrary_api=false
 dyld_api=false
 
 if $SHARED_LIBS || $ENABLE_DYNAMIC_LINKING; then
 
   ### Check for dyld first since OS X can have a non-standard libdl	
 
   AC_CHECK_HEADER(mach-o/dyld.h)  
-  if test "$ac_cv_header_Mach_O_dyld_h" = yes; then
+  if test "$ac_cv_header_mach_o_dyld_h" = yes; then
     dyld_api=true
   else 
     AC_CHECK_LIB(dld, shl_load)
     AC_CHECK_FUNCS(shl_load shl_findsym)
     if test "$ac_cv_func_shl_load" = yes \
       && test "$ac_cv_func_shl_findsym" = yes; then
       shl_load_api=true
     else
diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2006-03-24  John W. Eaton  <jwe@octave.org>
+
+	* interpreter/images/sparseimages.m:
+	Avoid some unnecessary calculations.
+
 2006-03-22  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/sparse.txi: Undo previous change.
 	Always use @image to include image files.
 	* interpreter/Makefile.in: Eliminate stamp files.
 	(clean, mostlyclean, distclean, maintainer-clean): Now
 	double-colon targets.
 	(stamp-images): New target.
diff --git a/doc/interpreter/images/sparseimages.m b/doc/interpreter/images/sparseimages.m
--- a/doc/interpreter/images/sparseimages.m
+++ b/doc/interpreter/images/sparseimages.m
@@ -1,18 +1,18 @@
 function sparseimages(nm,typ)
   if (strcmp(typ,"txt"))
     txtimages(nm,15,typ);
   else
-    otherimages(nm,200,typ);
     if (strcmp (nm, "gplot"))
       gplotimages("gplot",typ);
-    endif
-    if (strcmp (nm, "grid"))
+    elseif (strcmp (nm, "grid"))
       femimages("grid",typ);
+    else
+      otherimages(nm,200,typ);
     endif
   endif
   ## Kluge to give gnuplot enough time to process last figure before we
   ## exit.  Otherwise, Octave will delete the temporary data files when
   ## it exits and gnuplot will fail...
   sleep (1);
 endfunction
 
@@ -42,62 +42,60 @@ function txtimages(nm,n,typ)
   a = 10*speye(n) + sparse(1:n,ceil([1:n]/2),1,n,n) + ...
       sparse(ceil([1:n]/2),1:n,1,n,n);
   if (strcmp (nm, "gplot") || strcmp (nm, "grid"))
     fid = fopen (sprintf ("%s.txt", nm), "wt");
     fputs (fid, "+---------------------------------+\n");
     fputs (fid, "| Image unavailable in text mode. |\n");
     fputs (fid, "+---------------------------------+\n");
     fclose (fid);
-  endif
-  if (strcmp (nm, "spmatrix"))
+  elseif (strcmp (nm, "spmatrix"))
     printsparse(a,strcat("spmatrix.",typ));
-  endif
-  if (!isempty(findstr(octave_config_info ("DEFS"),"HAVE_COLAMD")) &&
-      !isempty(findstr(octave_config_info ("DEFS"),"HAVE_CHOLMOD")))
-    r1 = chol(a);
-    if (strcmp (nm, "spchol"))
-      printsparse(r1,strcat("spchol.",typ));
+  else
+    if (!isempty(findstr(octave_config_info ("DEFS"),"HAVE_COLAMD")) &&
+	!isempty(findstr(octave_config_info ("DEFS"),"HAVE_CHOLMOD")))
+      if (strcmp (nm, "spchol"))
+	r1 = chol(a);
+	printsparse(r1,strcat("spchol.",typ));
+      elseif (strcmp (nm, "spcholperm"))
+	[r2,p2,q2]=chol(a);
+	printsparse(r2,strcat("spcholperm.",typ));
+      endif
+      ## printf("Text NNZ: Matrix %d, Chol %d, PermChol %d\n",nnz(a),nnz(r1),nnz(r2));
     endif
-    [r2,p2,q2]=chol(a);
-    if (strcmp (nm, "spcholperm"))
-      printsparse(r2,strcat("spcholperm.",typ));
-    endif
-    ## printf("Text NNZ: Matrix %d, Chol %d, PermChol %d\n",nnz(a),nnz(r1),nnz(r2));
   endif
 endfunction
 
 function otherimages(nm,n,typ)
   bury_output ();
   a = 10*speye(n) + sparse(1:n,ceil([1:n]/2),1,n,n) + ...
       sparse(ceil([1:n]/2),1:n,1,n,n);
-  spy(a);
-  axis("ij")
   if (strcmp (nm, "spmatrix"))
+    spy(a);
+    axis("ij")
     print(strcat("spmatrix.",typ),strcat("-d",typ))
     bury_output ();
-  endif
-  if (!isempty(findstr(octave_config_info ("DEFS"),"HAVE_COLAMD")) &&
-      !isempty(findstr(octave_config_info ("DEFS"),"HAVE_CHOLMOD")))
-    r1 = chol(a);
-    spy(r1);
-    axis("ij")
-    if (strcmp (nm, "spchol"))
-      print(strcat("spchol.",typ),strcat("-d",typ))
-      bury_output ();
-    endif
-    [r2,p2,q2]=chol(a);
-    spy(r2);
-    axis("ij")
-    if (strcmp (nm, "spcholperm"))
-      print(strcat("spcholperm.",typ),strcat("-d",typ))
-      bury_output ();
-    endif
-    ## printf("Image NNZ: Matrix %d, Chol %d, PermChol %d\n",nnz(a),nnz(r1),nnz(r2));
-    axis("xy")
+  else
+    if (!isempty(findstr(octave_config_info ("DEFS"),"HAVE_COLAMD")) &&
+	!isempty(findstr(octave_config_info ("DEFS"),"HAVE_CHOLMOD")))
+      if (strcmp (nm, "spchol"))
+	r1 = chol(a);
+	spy(r1);
+	axis("ij")
+	print(strcat("spchol.",typ),strcat("-d",typ))
+	bury_output ();
+      elseif (strcmp (nm, "spcholperm"))
+	[r2,p2,q2]=chol(a);
+	spy(r2);
+	axis("ij")
+	print(strcat("spcholperm.",typ),strcat("-d",typ))
+	bury_output ();
+      endif
+      ## printf("Image NNZ: Matrix %d, Chol %d, PermChol %d\n",nnz(a),nnz(r1),nnz(r2));
+      axis("xy")
   endif
 endfunction
 
 function printsparse(a,nm)
   fid = fopen (nm,"wt");
   for i = 1:size(a,1)
     if (rem(i,5) == 0)
       fprintf (fid,"         %2d - ", i);
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -884,37 +884,16 @@ ComplexMatrix::row (octave_idx_type i) c
 
   ComplexRowVector retval (nc);
   for (octave_idx_type j = 0; j < cols (); j++)
     retval.xelem (j) = elem (i, j);
 
   return retval;
 }
 
-ComplexRowVector
-ComplexMatrix::row (char *s) const
-{
-  if (! s)
-    {
-      (*current_liboctave_error_handler) ("invalid row selection");
-      return ComplexRowVector ();
-    }
-
-  char c = *s;
-  if (c == 'f' || c == 'F')
-    return row (static_cast<octave_idx_type>(0));
-  else if (c == 'l' || c == 'L')
-    return row (rows () - 1);
-  else
-    {
-      (*current_liboctave_error_handler) ("invalid row selection");
-      return ComplexRowVector ();
-    }
-}
-
 ComplexColumnVector
 ComplexMatrix::column (octave_idx_type i) const
 {
   octave_idx_type nr = rows ();
   if (i < 0 || i >= cols ())
     {
       (*current_liboctave_error_handler) ("invalid column selection");
       return ComplexColumnVector ();
@@ -922,37 +901,16 @@ ComplexMatrix::column (octave_idx_type i
 
   ComplexColumnVector retval (nr);
   for (octave_idx_type j = 0; j < nr; j++)
     retval.xelem (j) = elem (j, i);
 
   return retval;
 }
 
-ComplexColumnVector
-ComplexMatrix::column (char *s) const
-{
-  if (! s)
-    {
-      (*current_liboctave_error_handler) ("invalid column selection");
-      return ComplexColumnVector ();
-    }
-
-  char c = *s;
-  if (c == 'f' || c == 'F')
-    return column (static_cast<octave_idx_type>(0));
-  else if (c == 'l' || c == 'L')
-    return column (cols () - 1);
-  else
-    {
-      (*current_liboctave_error_handler) ("invalid column selection");
-      return ComplexColumnVector ();
-    }
-}
-
 ComplexMatrix
 ComplexMatrix::inverse (void) const
 {
   octave_idx_type info;
   double rcond;
   return inverse (info, rcond, 0, 0);
 }
 
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -125,20 +125,18 @@ public:
 
   ComplexMatrix extract (octave_idx_type r1, octave_idx_type c1, octave_idx_type r2, octave_idx_type c2) const;
 
   ComplexMatrix extract_n (octave_idx_type r1, octave_idx_type c1, octave_idx_type nr, octave_idx_type nc) const;
 
   // extract row or column i.
 
   ComplexRowVector row (octave_idx_type i) const;
-  ComplexRowVector row (char *s) const;
 
   ComplexColumnVector column (octave_idx_type i) const;
-  ComplexColumnVector column (char *s) const;
 
   ComplexMatrix inverse (void) const;
   ComplexMatrix inverse (octave_idx_type& info) const;
   ComplexMatrix inverse (octave_idx_type& info, double& rcond, int force = 0,
 			 int calc_cond = 1) const;
 
   ComplexMatrix pseudo_inverse (double tol = 0.0) const;
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2006-03-24  John W. Eaton  <jwe@octave.org>
+
+	* dSparse.cc (SparseMatrix::bsolve): Integer work vector is
+	Array<octave_idx_type>, so fortran_vec returns pointer to
+	octave_idx_type, not pointer to int.
+
+	* CMatrix.cc, CMatrix.h (ComplexMatrix::row (char*),
+	ComplexMatrix::column (char*)): Delete.
+	* dMatrix.cc, dMatrix.h (Matrix::row (char*),
+	Matrix::column (char*)): Delete.
+
 2006-03-21  David Bateman  <dbateman@free.fr>
 
 	* SparseQR.h: Publish externally used friends.
 	* SparseCmplxQR.h: ditto.
 
 2006-03-21  John W. Eaton  <jwe@octave.org>
 
 	* lo-specfun.cc (betainc): Use F77_XFCN instead of F77_FUNC for
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -554,37 +554,16 @@ Matrix::row (octave_idx_type i) const
 
   RowVector retval (nc);
   for (octave_idx_type j = 0; j < nc; j++)
     retval.xelem (j) = elem (i, j);
 
   return retval;
 }
 
-RowVector
-Matrix::row (char *s) const
-{
-  if (! s)
-    {
-      (*current_liboctave_error_handler) ("invalid row selection");
-      return RowVector ();
-    }
-
-  char c = *s;
-  if (c == 'f' || c == 'F')
-    return row ( static_cast<octave_idx_type>(0) );
-  else if (c == 'l' || c == 'L')
-    return row (rows () - 1);
-  else
-    {
-      (*current_liboctave_error_handler) ("invalid row selection");
-      return RowVector ();
-    }
-}
-
 ColumnVector
 Matrix::column (octave_idx_type i) const
 {
   octave_idx_type nr = rows ();
   if (i < 0 || i >= cols ())
     {
       (*current_liboctave_error_handler) ("invalid column selection");
       return ColumnVector ();
@@ -592,37 +571,16 @@ Matrix::column (octave_idx_type i) const
 
   ColumnVector retval (nr);
   for (octave_idx_type j = 0; j < nr; j++)
     retval.xelem (j) = elem (j, i);
 
   return retval;
 }
 
-ColumnVector
-Matrix::column (char *s) const
-{
-  if (! s)
-    {
-      (*current_liboctave_error_handler) ("invalid column selection");
-      return ColumnVector ();
-    }
-
-  char c = *s;
-  if (c == 'f' || c == 'F')
-    return column (static_cast<octave_idx_type> (0));
-  else if (c == 'l' || c == 'L')
-    return column (cols () - 1);
-  else
-    {
-      (*current_liboctave_error_handler) ("invalid column selection");
-      return ColumnVector ();
-    }
-}
-
 Matrix
 Matrix::inverse (void) const
 {
   octave_idx_type info;
   double rcond;
   return inverse (info, rcond, 0, 0);
 }
 
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -97,20 +97,18 @@ public:
 
   Matrix extract (octave_idx_type r1, octave_idx_type c1, octave_idx_type r2, octave_idx_type c2) const;
 
   Matrix extract_n (octave_idx_type r1, octave_idx_type c1, octave_idx_type nr, octave_idx_type nc) const;
 
   // extract row or column i.
 
   RowVector row (octave_idx_type i) const;
-  RowVector row (char *s) const;
 
   ColumnVector column (octave_idx_type i) const;
-  ColumnVector column (char *s) const;
 
   Matrix inverse (void) const;
   Matrix inverse (octave_idx_type& info) const;
   Matrix inverse (octave_idx_type& info, double& rcond, int force = 0, 
 		  int calc_cond = 1) const;
 
   Matrix pseudo_inverse (double tol = 0.0) const;
 
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -4399,17 +4399,17 @@ SparseMatrix::bsolve (SparseType &mattyp
 		} 
 	      else 
 		{
 		  if (calc_cond)
 		    {
 		      Array<double> z (3 * nr);
 		      double *pz = z.fortran_vec ();
 		      Array<octave_idx_type> iz (nr);
-		      int *piz = iz.fortran_vec ();
+		      octave_idx_type *piz = iz.fortran_vec ();
 
 		      F77_XFCN (dpbcon, DGBCON, 
 		      	(F77_CONST_CHAR_ARG2 (&job, 1),
 		      	 nr, n_lower, tmp_data, ldm,
 		      	 anorm, rcond, pz, piz, err
 		      	 F77_CHAR_ARG_LEN (1)));
 
 		      if (f77_exception_encountered)
@@ -4535,17 +4535,17 @@ SparseMatrix::bsolve (SparseType &mattyp
 	      else 
 		{
 		  if (calc_cond)
 		    {
 		      char job = '1';
 		      Array<double> z (3 * nr);
 		      double *pz = z.fortran_vec ();
 		      Array<octave_idx_type> iz (nr);
-		      int *piz = iz.fortran_vec ();
+		      octave_idx_type *piz = iz.fortran_vec ();
 
 		      F77_XFCN (dgbcon, DGBCON, 
 		      	(F77_CONST_CHAR_ARG2 (&job, 1),
 		      	 nc, n_lower, n_upper, tmp_data, ldm, pipvt,
 		      	 anorm, rcond, pz, piz, err
 		      	 F77_CHAR_ARG_LEN (1)));
 
 		      if (f77_exception_encountered)
@@ -4673,17 +4673,17 @@ SparseMatrix::bsolve (SparseType &mattyp
 		} 
 	      else 
 		{
 		  if (calc_cond)
 		    {
 		      Array<double> z (3 * nr);
 		      double *pz = z.fortran_vec ();
 		      Array<octave_idx_type> iz (nr);
-		      int *piz = iz.fortran_vec ();
+		      octave_idx_type *piz = iz.fortran_vec ();
 
 		      F77_XFCN (dpbcon, DGBCON, 
 		      	(F77_CONST_CHAR_ARG2 (&job, 1),
 		      	 nr, n_lower, tmp_data, ldm,
 		      	 anorm, rcond, pz, piz, err
 		      	 F77_CHAR_ARG_LEN (1)));
 
 		      if (f77_exception_encountered)
@@ -4846,17 +4846,17 @@ SparseMatrix::bsolve (SparseType &mattyp
 	      else 
 		{
 		  if (calc_cond)
 		    {
 		      char job = '1';
 		      Array<double> z (3 * nr);
 		      double *pz = z.fortran_vec ();
 		      Array<octave_idx_type> iz (nr);
-		      int *piz = iz.fortran_vec ();
+		      octave_idx_type *piz = iz.fortran_vec ();
 
 		      F77_XFCN (dgbcon, DGBCON, 
 		      	(F77_CONST_CHAR_ARG2 (&job, 1),
 		      	 nc, n_lower, n_upper, tmp_data, ldm, pipvt,
 		      	 anorm, rcond, pz, piz, err
 		      	 F77_CHAR_ARG_LEN (1)));
 
 		      if (f77_exception_encountered)
@@ -5026,17 +5026,17 @@ SparseMatrix::bsolve (SparseType &mattyp
 		} 
 	      else 
 		{
 		  if (calc_cond)
 		    {
 		      Array<double> z (3 * nr);
 		      double *pz = z.fortran_vec ();
 		      Array<octave_idx_type> iz (nr);
-		      int *piz = iz.fortran_vec ();
+		      octave_idx_type *piz = iz.fortran_vec ();
 
 		      F77_XFCN (dpbcon, DGBCON, 
 		      	(F77_CONST_CHAR_ARG2 (&job, 1),
 		      	 nr, n_lower, tmp_data, ldm,
 		      	 anorm, rcond, pz, piz, err
 		      	 F77_CHAR_ARG_LEN (1)));
 
 		      if (f77_exception_encountered)
@@ -5203,17 +5203,17 @@ SparseMatrix::bsolve (SparseType &mattyp
 	      else 
 		{
 		  if (calc_cond)
 		    {
 		      char job = '1';
 		      Array<double> z (3 * nr);
 		      double *pz = z.fortran_vec ();
 		      Array<octave_idx_type> iz (nr);
-		      int *piz = iz.fortran_vec ();
+		      octave_idx_type *piz = iz.fortran_vec ();
 
 		      F77_XFCN (dpbcon, DGBCON, 
 		      	(F77_CONST_CHAR_ARG2 (&job, 1),
 		      	 nr, n_lower, tmp_data, ldm,
 		      	 anorm, rcond, pz, piz, err
 		      	 F77_CHAR_ARG_LEN (1)));
 
 		      if (f77_exception_encountered)
@@ -5374,17 +5374,17 @@ SparseMatrix::bsolve (SparseType &mattyp
 		} 
 	      else 
 		{
 		  if (calc_cond)
 		    {
 		      Array<double> z (3 * nr);
 		      double *pz = z.fortran_vec ();
 		      Array<octave_idx_type> iz (nr);
-		      int *piz = iz.fortran_vec ();
+		      octave_idx_type *piz = iz.fortran_vec ();
 
 		      F77_XFCN (dpbcon, DGBCON, 
 		      	(F77_CONST_CHAR_ARG2 (&job, 1),
 		      	 nr, n_lower, tmp_data, ldm,
 		      	 anorm, rcond, pz, piz, err
 		      	 F77_CHAR_ARG_LEN (1)));
 
 		      if (f77_exception_encountered)
@@ -5581,17 +5581,17 @@ SparseMatrix::bsolve (SparseType &mattyp
 	      else 
 		{
 		  if (calc_cond)
 		    {
 		      char job = '1';
 		      Array<double> z (3 * nr);
 		      double *pz = z.fortran_vec ();
 		      Array<octave_idx_type> iz (nr);
-		      int *piz = iz.fortran_vec ();
+		      octave_idx_type *piz = iz.fortran_vec ();
 
 		      F77_XFCN (dgbcon, DGBCON, 
 		      	(F77_CONST_CHAR_ARG2 (&job, 1),
 		      	 nc, n_lower, n_upper, tmp_data, ldm, pipvt,
 		      	 anorm, rcond, pz, piz, err
 		      	 F77_CHAR_ARG_LEN (1)));
 
 		      if (f77_exception_encountered)
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,17 @@
+2006-03-27  Don Bindner  <dbindner@truman.edu>
+
+	* plot/meshgrid.m: If nargout == 3 and vectors are supplied,
+	return 3d matrices.
+
+2006-03-27  Keith Goodman  <kwgoodman@gmail.com>
+
+	* time/toc.m: Don't print "Elapsed time..." if tic has not been set.
+
 2006-03-22  John W. Eaton  <jwe@octave.org>
 
 	* plot/print.m: Don't replot after popping terminal setting.
 
 2006-03-20  John W. Eaton  <jwe@octave.org>
 
 	* miscellaneous/mkoctfile.m: Use version-specific name of
 	mkoctfile.  Use fullfile to construct file name.
diff --git a/scripts/plot/meshgrid.m b/scripts/plot/meshgrid.m
--- a/scripts/plot/meshgrid.m
+++ b/scripts/plot/meshgrid.m
@@ -16,48 +16,55 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{xx}, @var{yy}, @var{zz}] =} meshgrid (@var{x}, @var{y}, @var{z})
 ## @deftypefnx {Function File} {[@var{xx}, @var{yy}] =} meshgrid (@var{x}, @var{y})
 ## @deftypefnx {Function File} {[@var{xx}, @var{yy}] =} meshgrid (@var{x})
-## Given vectors of @var{x}, @var{y}, and @var{z} coordinates, return
-## three dimensional arrays corresponding to the @var{x}, @var{y}, and
-## @var{z} coordinates of a mesh.  Given only @var{x} and @var{y},
-## return matrices corresponding to the @var{x} and @var{y} coordinates
-## of a mesh.  The rows of @var{xx} are copies of @var{x}, and the
-## columns of @var{yy} are copies of @var{y}.  If @var{y} is omitted,
-## then it is assumed to be the same as @var{x}.
+## Given vectors of @var{x} and @var{y} and @var{z} coordinates, and
+## returning 3 arguments, return three dimensional arrays corresponding
+## to the @var{x}, @var{y}, and @var{z} coordinates of a mesh.  When
+## returning only 2 arguments, return matrices corresponding to the
+## @var{x} and @var{y} coordinates of a mesh.  The rows of @var{xx} are
+## copies of @var{x}, and the columns of @var{yy} are copies of @var{y}.
+## If @var{y} is omitted, then it is assumed to be the same as @var{x},
+## and @var{z} is assumed the same as @var{y}.
 ## @seealso{mesh, contour}
 ## @end deftypefn
 
 ## Author: jwe
 
 function [xx, yy, zz] = meshgrid (x, y, z)
 
-  if (nargin == 1)
+  if (nargin == 0 || nargin > 3)
+    usage ("[xx, yy, zz] = meshgrid (x, y, z)");
+  endif
+
+  if (nargin < 2)
     y = x;
   endif
-  if (nargin > 0 && nargin < 3)
+
+  if (nargout < 3)
     if (isvector (x) && isvector (y))
       xx = ones (length (y), 1) * x(:).';
       yy = y(:) * ones (1, length (x));
     else
       error ("meshgrid: arguments must be vectors");
     endif
-  elseif (nargin == 3)
-   if (isvector (x) && isvector (y) && isvector (z))
-      lenx = length (x);
-      leny = length (y);
-      lenz = length (z);
-      xx = repmat (ones (leny, 1) * x(:).', [1, 1, lenz]);
-      yy = repmat (y(:) * ones (1, lenx), [1, 1, lenz]);
-      zz = reshape (repmat (z(:).', lenx*leny, 1)(:), leny, lenx, lenz);
-   else
-      error ("meshgrid: arguments must be vectors");
-   endif
   else
-    usage ("[xx, yy, zz] = meshgrid (x, y, z)");
+    if (nargin < 3)
+      z = y;
+    endif
+    if (isvector (x) && isvector (y) && isvector (z))
+       lenx = length (x);
+       leny = length (y);
+       lenz = length (z);
+       xx = repmat (ones (leny, 1) * x(:).', [1, 1, lenz]);
+       yy = repmat (y(:) * ones (1, lenx), [1, 1, lenz]);
+       zz = reshape (repmat (z(:).', lenx*leny, 1)(:), leny, lenx, lenz);
+    else
+       error ("meshgrid: arguments must be vectors");
+    endif
   endif
 
 endfunction
diff --git a/scripts/time/toc.m b/scripts/time/toc.m
--- a/scripts/time/toc.m
+++ b/scripts/time/toc.m
@@ -32,17 +32,16 @@ function secs = toc ()
 
   global __tic_toc_timestamp__ = -1;
 
   if (__tic_toc_timestamp__ < 0)
     warning ("toc called before timer set");
     secs0 = [];
   else
     secs0 = etime (clock (), __tic_toc_timestamp__);
+    if (nargout != 0)
+      secs = secs0;
+    else
+      printf ("Elapsed time is %f seconds.\n", secs0);
+    endif  
   endif
-  
-  if (nargout != 0)
-    secs = secs0;
-  else
-    printf ("Elapsed time is %f seconds.\n", secs0);
-  endif  
 
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,18 @@
 2006-03-24  John W. Eaton  <jwe@octave.org>
 
+	* DLD-FUNCTIONS/spchol.cc (Fsymbfact): Use CHOLMOD_NAME to select
+	proper version of row_subtree function.
+
+	* ov-cell.cc (octave_cell::save_hdf5): Use OSSTREAM instead of
+	fixed character buffer and sprintf.
+	* ov-list.cc (octave_list::save_hdf5, octave_list::save_ascii,
+	octave_list::save_binary): Likewise.
+
 	* ov-cell.h (octave_cell::convert_to_str_internal):
 	Undo previous change for pad arg.
 	* ov-cell.cc (octave_cell::all_strings): Reinstate pad arg, pass
 	it on to all_strings.
 	* ov.h (octave_value::all_strings): Reinstate pad arg.
 	* ov-base.cc (octave_base_value::all_strings): Likewise.
 	* ov-str-mat.cc (octave_char_matrix_str::all_strings): Likewise.
 	* ov.h, ov-base.h, ov-cell.h, ov-str-mat.h: Fix all_strings decls.
diff --git a/src/DLD-FUNCTIONS/spchol.cc b/src/DLD-FUNCTIONS/spchol.cc
--- a/src/DLD-FUNCTIONS/spchol.cc
+++ b/src/DLD-FUNCTIONS/spchol.cc
@@ -602,17 +602,17 @@ factorization as determined by @var{typ}
 						       0, CHOLMOD_PATTERN, cm);
 	  octave_idx_type *Rp = static_cast<octave_idx_type *>(R->p);
 	  octave_idx_type *Ri = static_cast<octave_idx_type *>(R->i);
 
 	  // compute L one row at a time
 	  for (octave_idx_type k = 0 ; k < n ; k++)
 	    {
 	      // get the kth row of L and store in the columns of L
-	      cholmod_row_subtree (A1, A2, k, Parent, R, cm) ;
+	      CHOLMOD_NAME (row_subtree) (A1, A2, k, Parent, R, cm) ;
 	      for (octave_idx_type p = 0 ; p < Rp [1] ; p++)
 		L.xridx (W [Ri [p]]++) = k ;
 
 	      // add the diagonal entry
 	      L.xridx (W [k]++) = k ;
 	    }
 
 	  // free workspace
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -778,20 +778,22 @@ octave_cell::save_hdf5 (hid_t loc_id, co
   H5Sclose (space_hid);
 
   // Recursively add each element of the cell to this group.
 
   Cell tmp = cell_value ();
   
   for (octave_idx_type i = 0; i < dv.numel (); i++)
     {
-      char s[20];
-      sprintf (s, "_%d", i);
+      OSSTREAM buf;
+      buf << "_" << i << OSSTREAM_ENDS;
+      std::string s = OSSTREAM_STR (buf);
+      OSSTREAM_FREEZE (buf);
 
-      if (! add_hdf5_data(data_hid, tmp.elem (i), s, "", false,
+      if (! add_hdf5_data(data_hid, tmp.elem (i), s.c_str (), "", false,
 			  save_as_floats))
 	{
 	  H5Gclose (data_hid);
 	  return false;
 	}
     }
 
   H5Gclose (data_hid);
diff --git a/src/ov-list.cc b/src/ov-list.cc
--- a/src/ov-list.cc
+++ b/src/ov-list.cc
@@ -531,19 +531,23 @@ octave_list::save_ascii (std::ostream& o
 			   bool strip_nan_and_inf)
 {
   octave_value_list lst = list_value ();
   os << "# length: " << lst.length () << "\n";
 
   for (int i = 0; i < lst.length (); ++i)
     {
       // should we use lst.name_tags () to label the elements?
-      char s[20];
-      sprintf (s, "_%d", i);
-      bool b = save_ascii_data (os, lst (i), s, infnan_warned, 
+
+      OSSTREAM buf;
+      buf << "_" << i << OSSTREAM_ENDS;
+      std::string s = OSSTREAM_STR (buf);
+      OSSTREAM_FREEZE (buf);
+
+      bool b = save_ascii_data (os, lst (i), s.c_str (), infnan_warned, 
 				strip_nan_and_inf, 0, 0);
       
       if (! b)
 	return false;
     }
 
   return true;
 }
@@ -602,21 +606,25 @@ octave_list::save_binary (std::ostream& 
   octave_value_list lst = list_value ();
 
   FOUR_BYTE_INT len = lst.length();
   os.write (X_CAST (char *, &len), 4);
   
   for (int i = 0; i < lst.length (); i++)
     {
       // should we use lst.name_tags () to label the elements?
-      char s[20];
-      sprintf (s, "_%d", i);
+
+      OSSTREAM buf;
+      buf << "_" << i << OSSTREAM_ENDS;
+      std::string s = OSSTREAM_STR (buf);
+      OSSTREAM_FREEZE (buf);
 
       // Recurse to print sub-value.
-      bool b = save_binary_data (os, lst(i), s, "", 0, save_as_floats);
+      bool b = save_binary_data (os, lst(i), s.c_str (), "", 0,
+				 save_as_floats);
 	      
       if (! b)
 	return false;
     }
   
   return true;
 }
 
@@ -678,19 +686,23 @@ octave_list::save_hdf5 (hid_t loc_id, co
   if (data_hid < 0) return false;
 
   // recursively add each element of the list to this group
   octave_value_list lst = list_value ();
 
   for (octave_idx_type i = 0; i < lst.length (); ++i)
     {
       // should we use lst.name_tags () to label the elements?
-      char s[20];
-      sprintf (s, "_%d", i);
-      bool retval2 = add_hdf5_data (data_hid, lst (i), s, "",
+
+      OSSTREAM buf;
+      buf << "_" << i << OSSTREAM_ENDS;
+      std::string s = OSSTREAM_STR (buf);
+      OSSTREAM_FREEZE (buf);
+
+      bool retval2 = add_hdf5_data (data_hid, lst (i), s.c_str (), "",
 				    false, save_as_floats);
       if (! retval2)
 	break;
     }
 
   H5Gclose (data_hid);
 
   return true;
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -417,17 +417,17 @@ or\n\
 printf (\"%s\n\", system (cmd, 1));\n\
 @end example\n\
 \n\
 The @code{system} function can return two values.  The first is the\n\
 exit status of the command and the second is any output from the\n\
 command that was written to the standard output stream.  For example,\n\
 \n\
 @example\n\
-[output, status] = system (\"echo foo; exit 2\");\n\
+[status, output] = system (\"echo foo; exit 2\");\n\
 @end example\n\
 \n\
 @noindent\n\
 will set the variable @code{output} to the string @samp{foo}, and the\n\
 variable @code{status} to the integer @samp{2}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
