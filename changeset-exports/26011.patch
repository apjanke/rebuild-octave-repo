# HG changeset patch
# User Rik <rik@octave.org>
# Date 1541178190 25200
#      Fri Nov 02 10:03:10 2018 -0700
# Node ID fbc23950b00aaaa4de1aa21b9d1eb2a8b95e8090
# Parent  e3a2ef3dced92bd93780a26be12968cac80b8527
Deprecate C++ is_hghandle in favor of ishghandle for readability.

* NEWS: Announce deprecation and replacement function.

* graphics.cc (ishghandle): Three new variants which check whether input is a
graphics handle.
* graphics.cc (is_hghandle): Add OCTAVE_DEPRECATED decoration to three
functions.
* graphics.cc (set_callbackobject, set_currentfigure, set_currentaxes,
Fishghandle): Replace calls to "is_hghandle" with "ishghandle".

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -155,11 +155,21 @@ Summary of important user-visible change
 
       Object               | Property                | Value
       ---------------------|-------------------------|-------------------
       axes                 | xaxislocation           | "zero"
                            | yaxislocation           | "zero"
       patch                | normalmode              |
       surface              | normalmode              |
 
+  ** Certain C++ predicate test functions have been deprecated and
+     replaced with the same functionality under the equivalent name used
+     in the Octave programming language.  These changes make it easier
+     for new programmers familiar with Octave to understand code written
+     in C++.
+
+      Function             | Replacement
+      ---------------------|------------------
+      is_hghandle          | ishghandle
+
 ---------------------------------------------------------
 
 See NEWS.4 for old news.
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -2962,51 +2962,63 @@ gh_manager::do_close_all_figures (void)
 static void
 adopt (const graphics_handle& parent_h, const graphics_handle& h)
 {
   graphics_object parent_go = gh_manager::get_object (parent_h);
   parent_go.adopt (h);
 }
 
 static bool
-is_hghandle (const graphics_handle& h)
+ishghandle (const graphics_handle& h)
 {
   return h.ok ();
 }
 
+OCTAVE_DEPRECATED (5.0, "use 'ishghandle' instead")
+static bool is_hghandle (const graphics_handle& h)
+{ return ishghandle (h); }
+
 static bool
-is_hghandle (double val)
+ishghandle (double val)
 {
   graphics_handle h = gh_manager::lookup (val);
 
   return h.ok ();
 }
 
+OCTAVE_DEPRECATED (5.0, "use 'ishghandle' instead")
+static bool is_hghandle (double val)
+{ return ishghandle (val); }
+
 static octave_value
-is_hghandle (const octave_value& val)
+ishghandle (const octave_value& val)
 {
   octave_value retval = false;
 
-  if (val.is_real_scalar () && is_hghandle (val.double_value ()))
+  if (val.is_real_scalar () && ishghandle (val.double_value ()))
     retval = true;
   else if (val.isnumeric () && val.isreal ())
     {
       const NDArray handles = val.array_value ();
 
       boolNDArray result (handles.dims ());
 
       for (octave_idx_type i = 0; i < handles.numel (); i++)
-        result.xelem (i) = is_hghandle (handles(i));
+        result.xelem (i) = ishghandle (handles(i));
 
       retval = result;
     }
 
   return retval;
 }
 
+OCTAVE_DEPRECATED (5.0, "use 'ishghandle' instead")
+static octave_value is_hghandle (const octave_value& val)
+{ return ishghandle (val); }
+
 static bool
 is_figure (double val)
 {
   graphics_object go = gh_manager::get_object (val);
 
   return go && go.isa ("figure");
 }
 
@@ -3721,33 +3733,33 @@ root_figure::properties::set_callbackobj
         {
           val = cbo_stack.front ();
 
           cbo_stack.pop_front ();
         }
 
       callbackobject = val;
     }
-  else if (is_hghandle (val))
+  else if (ishghandle (val))
     {
       if (get_callbackobject ().ok ())
         cbo_stack.push_front (get_callbackobject ());
 
       callbackobject = val;
     }
   else
     err_set_invalid ("callbackobject");
 }
 
 void
 root_figure::properties::set_currentfigure (const octave_value& v)
 {
   graphics_handle val (v);
 
-  if (octave::math::isnan (val.value ()) || is_hghandle (val))
+  if (octave::math::isnan (val.value ()) || ishghandle (val))
     {
       currentfigure = val;
 
       if (val.ok ())
         gh_manager::push_figure (val);
     }
   else
     err_set_invalid ("currentfigure");
@@ -3911,17 +3923,17 @@ root_figure::reset_default_properties (v
 
 // ---------------------------------------------------------------------
 
 void
 figure::properties::set_currentaxes (const octave_value& val)
 {
   graphics_handle hax (val);
 
-  if (octave::math::isnan (hax.value ()) || is_hghandle (hax))
+  if (octave::math::isnan (hax.value ()) || ishghandle (hax))
     currentaxes = hax;
   else
     err_set_invalid ("currentaxes");
 }
 
 void
 figure::properties::remove_child (const graphics_handle& h)
 {
@@ -11425,17 +11437,17 @@ false where they are not.
 @seealso{isgraphics, isaxes, isfigure, ishandle}
 @end deftypefn */)
 {
   gh_manager::auto_lock guard;
 
   if (args.length () != 1)
     print_usage ();
 
-  return ovl (is_hghandle (args(0)));
+  return ovl (ishghandle (args(0)));
 }
 
 /*
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   assert (ishghandle (hf));
 %!   assert (! ishghandle (-hf));
@@ -13143,17 +13155,17 @@ In all cases, typing CTRL-C stops progra
     print_usage ();
 
   // return immediately if the graphics handle is invalid
   if (args(0).isempty ())
     return ovl ();
 
   double h = args(0).xdouble_value ("waitfor: invalid handle value");
 
-  if (! is_hghandle (h) || (h == 0 && args.length () == 1))
+  if (! ishghandle (h) || (h == 0 && args.length () == 1))
     return ovl ();
 
   caseless_str pname;
 
   octave::unwind_protect frame;
 
   static uint32_t id_counter = 0;
   uint32_t id = 0;
