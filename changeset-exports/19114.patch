# HG changeset patch
# User Markus Bergholz <markuman+octave@gmail.com>
# Date 1411251103 -7200
#      Sun Sep 21 00:11:43 2014 +0200
# Node ID c53401edf4e3483a40a9609e88d7f15ef564b14a
# Parent  72e32208ff772dc150dc34844131dc6940bb9b47
make repmat do accept more than 3 arguments (bug #38391)

diff --git a/scripts/general/repmat.m b/scripts/general/repmat.m
--- a/scripts/general/repmat.m
+++ b/scripts/general/repmat.m
@@ -1,8 +1,9 @@
+## Copyright (C) 2014 Markus Bergholz
 ## Copyright (C) 2000-2013 Paul Kienzle
 ## Copyright (C) 2008 Jaroslav Hajek
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
@@ -15,36 +16,38 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} repmat (@var{A}, @var{m})
 ## @deftypefnx {Function File} {} repmat (@var{A}, @var{m}, @var{n})
+## @deftypefnx {Function File} {} repmat (@var{A}, @var{m}, @var{n}, @var{p} @dots{})
 ## @deftypefnx {Function File} {} repmat (@var{A}, [@var{m} @var{n}])
 ## @deftypefnx {Function File} {} repmat (@var{A}, [@var{m} @var{n} @var{p} @dots{}])
 ## Form a block matrix of size @var{m} by @var{n}, with a copy of matrix
 ## @var{A} as each element.  If @var{n} is not specified, form an
 ## @var{m} by @var{m} block matrix.  For copying along more than two
 ## dimensions, specify the number of times to copy across each dimension
 ## @var{m}, @var{n}, @var{p}, @dots{}, in a vector in the second argument.
 ## @seealso{repelems}
 ## @end deftypefn
 
 ## Author: Paul Kienzle <pkienzle@kienzle.powernet.co.uk>
 ## Created: July 2000
 
-function x = repmat (A, m, n)
+function x = repmat (A, m, varargin)
 
-  if (nargin < 2 || nargin > 3)
+  if (nargin < 2)
     print_usage ();
   endif
 
   if (nargin == 3)
+    n = varargin{1};
     if (! isempty (m) && isempty (n))
       m = m(:).';
       n = 1;
     elseif (isempty (m) && ! isempty (n))
       m = n(:).';
       n = 1;
     elseif (isempty (m) && isempty (n))
       m = n = 1;
@@ -59,17 +62,25 @@ function x = repmat (A, m, n)
       endif
       if (all (size (n) > 1))
         n = n(:,1);
       endif
       m = m(:).';
       n = n(:).';
     endif
   else
-    if (isempty (m))
+    if nargin > 3
+      # input check for m and varargin
+      if isscalar(m) && all(cellfun(@(x) isscalar(x), varargin))
+        m = [m varargin{:}];
+        n = [];
+      else
+        error("repmat: All input arguments have to be scalar")
+      end
+    elseif (isempty (m))
       m = n = 1;
     elseif (isscalar (m))
       n = m;
     elseif (ndims (m) > 2)
       error ("repmat: M has more than 2 dimensions")
     elseif (all (size (m) > 1))
       m = m(:,1).';
       n = [];
@@ -145,16 +156,17 @@ endfunction
 %!shared x
 %! x = [1 2;3 4];
 %!assert (repmat (x, [1 1]), repmat (x, 1))
 %!assert (repmat (x, [3 3]), repmat (x, 3))
 %!assert (repmat (x, [1 1]), repmat (x, 1, 1))
 %!assert (repmat (x, [1 3]), repmat (x, 1, 3))
 %!assert (repmat (x, [3 1]), repmat (x, 3, 1))
 %!assert (repmat (x, [3 3]), repmat (x, 3, 3))
+%!assert (repmat (pi, [1,2,3,4]), repmat(pi,1,2,3,4))
 
 # Tests for numel==1 case:
 %!shared x, r
 %! x = [ 65 ];
 %! r = kron (ones (2,2), x);
 %!assert (r, repmat (x, [2 2]))
 %!assert (char (r), repmat (char (x), [2 2]))
 %!assert (int8 (r), repmat (int8 (x), [2 2]))
