# HG changeset patch
# User Rik <rik@octave.org>
# Date 1499871677 25200
#      Wed Jul 12 08:01:17 2017 -0700
# Node ID 102049c83e7cb4aa6ee6c2bac867d20d98671409
# Parent  b85a46745298ca28deda53410801193e3a4e3cb8
Use constexpr rather than just const to provide hint to compiler.

* lo-mappers.cc (rc_log2, rc_log10): Use constexpr for pi/ln(2) and pi/ln(10)
constants.

* lo-specfun.cc (rc_log1p): Replace const declaration for pi with M_PI which
comes from <cmath> header file.

diff --git a/liboctave/numeric/lo-mappers.cc b/liboctave/numeric/lo-mappers.cc
--- a/liboctave/numeric/lo-mappers.cc
+++ b/liboctave/numeric/lo-mappers.cc
@@ -263,39 +263,39 @@ namespace octave
     {
       return x < 0.0f ? FloatComplex (std::log (-x), static_cast<float> (M_PI))
                       : FloatComplex (std::log (x));
     }
 
     Complex
     rc_log2 (double x)
     {
-      const double PI_LN2 = 4.53236014182719380962;  // = pi / log(2)
+      constexpr double PI_LN2 = 4.53236014182719380962;  // = pi / log(2)
       return x < 0.0 ? Complex (log2 (-x), PI_LN2) : Complex (log2 (x));
     }
 
     FloatComplex
     rc_log2 (float x)
     {
-      const float PI_LN2 = 4.53236014182719380962f;  // = pi / log(2)
+      constexpr float PI_LN2 = 4.53236014182719380962f;  // = pi / log(2)
       return x < 0.0f ? FloatComplex (log2 (-x), PI_LN2)
                       : FloatComplex (log2 (x));
     }
 
     Complex
     rc_log10 (double x)
     {
-      const double PI_LN10 = 1.36437635384184134748;  // = pi / log(10)
+      constexpr double PI_LN10 = 1.36437635384184134748;  // = pi / log(10)
       return x < 0.0 ? Complex (log10 (-x), PI_LN10) : Complex (log10 (x));
     }
 
     FloatComplex
     rc_log10 (float x)
     {
-      const float PI_LN10 = 1.36437635384184134748f;  // = pi / log(10)
+      constexpr float PI_LN10 = 1.36437635384184134748f;  // = pi / log(10)
       return x < 0.0f ? FloatComplex (log10 (-x), PI_LN10)
                       : FloatComplex (log10f (x));
     }
 
     Complex
     rc_sqrt (double x)
     {
       return x < 0.0 ? Complex (0.0, std::sqrt (-x)) : Complex (std::sqrt (x));
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -3444,27 +3444,25 @@ namespace octave
       if (sgngam < 0)
         return result + FloatComplex (0., M_PI);
       else
         return result;
     }
 
     Complex rc_log1p (double x)
     {
-      const double pi = 3.14159265358979323846;
       return (x < -1.0
-              ? Complex (std::log (-(1.0 + x)), pi)
+              ? Complex (std::log (-(1.0 + x)), M_PI)
               : Complex (log1p (x)));
     }
 
     FloatComplex rc_log1p (float x)
     {
-      const float pi = 3.14159265358979323846f;
       return (x < -1.0f
-              ? FloatComplex (std::log (-(1.0f + x)), pi)
+              ? FloatComplex (std::log (-(1.0f + x)), M_PI)
               : FloatComplex (log1p (x)));
     }
   }
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
 ComplexMatrix besselj (double alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr) { return octave::math::besselj (alpha, x, scaled, ierr); }
