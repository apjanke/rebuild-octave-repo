# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1217013639 14400
#      Fri Jul 25 15:20:39 2008 -0400
# Node ID e69bca367ed704c811b1f2b08ea7f254037e8071
# Parent  5bf4e2c13ed8560de014765efd8c699eea90fbf5
DLD-FUNCTIONS/det.cc (Fdet): return calculated determinant for numerically singular matrices

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2008-07-25  John W. Eaton  <jwe@octave.org>
 
+	* DLD-FUNCTIONS/det.cc (Fdet): Return calculated determinant for
+	numerically singular matrices, not 0.
+
 	* symtab.cc (get_dispatch_type): New function.
 	(symbol_table::fcn_info::fcn_info_rep::find): Use it.
 
 	* ov-class.cc (set_class_relationship): Delete static function.
 	(Fsuperiorto, Finferiorto): Warn about precedence conflicts.
 	Call symbol_table::set_class_relationship instead of local static
 	function.
 	* symtab.h (symbol_table::class_precedence_table): New data member.
diff --git a/src/DLD-FUNCTIONS/det.cc b/src/DLD-FUNCTIONS/det.cc
--- a/src/DLD-FUNCTIONS/det.cc
+++ b/src/DLD-FUNCTIONS/det.cc
@@ -86,37 +86,31 @@ if requested.\n\
 	  float rcond = 0.0;
 	  // Always compute rcond, so we can detect numerically
 	  // singular matrices.
 	  FloatMatrix m = arg.float_matrix_value ();
 	  if (! error_state)
 	    {
 	      FloatDET det = m.determinant (info, rcond);
 	      retval(1) = rcond;
-	      volatile float xrcond = rcond;
-	      xrcond += 1.0;
-	      retval(0) = ((info == -1 || xrcond == 1.0) ? static_cast<float>(0.0) : det.value ());
+	      retval(0) = info == -1 ? static_cast<float>(0.0) : det.value ();
 	    }
 	}
       else if (arg.is_complex_type ())
 	{
 	  octave_idx_type info;
 	  float rcond = 0.0;
 	  // Always compute rcond, so we can detect numerically
 	  // singular matrices.
 	  FloatComplexMatrix m = arg.float_complex_matrix_value ();
 	  if (! error_state)
 	    {
 	      FloatComplexDET det = m.determinant (info, rcond);
 	      retval(1) = rcond;
-	      volatile float xrcond = rcond;
-	      xrcond += 1.0;
-	      retval(0) = ((info == -1 || xrcond == 1.0) 
-			   ? FloatComplex (0.0) : det.value ());
-	      
+	      retval(0) = info == -1 ? FloatComplex (0.0) : det.value ();
 	    }
 	}
     }
   else
     {
       if (arg.is_real_type ())
 	{
 	  octave_idx_type info;
@@ -125,65 +119,54 @@ if requested.\n\
 	  // singular matrices.
 	  if (arg.is_sparse_type ())
 	    {
 	      SparseMatrix m = arg.sparse_matrix_value ();
 	      if (! error_state)
 		{
 		  DET det = m.determinant (info, rcond);
 		  retval(1) = rcond;
-		  volatile double xrcond = rcond;
-		  xrcond += 1.0;
-		  retval(0) = ((info == -1 || xrcond == 1.0) ? 0.0 : det.value ());
+		  retval(0) = info == -1 ? 0.0 : det.value ();
 		}
 	    }
 	  else
 	    {
 	      Matrix m = arg.matrix_value ();
 	      if (! error_state)
 		{
 		  DET det = m.determinant (info, rcond);
 		  retval(1) = rcond;
-		  volatile double xrcond = rcond;
-		  xrcond += 1.0;
-		  retval(0) = ((info == -1 || xrcond == 1.0) ? 0.0 : det.value ());
+		  retval(0) = info == -1 ? 0.0 : det.value ();
 		}
 	    }
 	}
       else if (arg.is_complex_type ())
 	{
 	  octave_idx_type info;
 	  double rcond = 0.0;
 	  // Always compute rcond, so we can detect numerically
 	  // singular matrices.
 	  if (arg.is_sparse_type ())
 	    {
 	      SparseComplexMatrix m = arg.sparse_complex_matrix_value ();
 	      if (! error_state)
 		{
 		  ComplexDET det = m.determinant (info, rcond);
 		  retval(1) = rcond;
-		  volatile double xrcond = rcond;
-		  xrcond += 1.0;
-		  retval(0) = ((info == -1 || xrcond == 1.0) 
-			       ? Complex (0.0) : det.value ());
+		  retval(0) = info == -1 ? Complex (0.0) : det.value ();
 		}
 	    }
 	  else
 	    {
 	      ComplexMatrix m = arg.complex_matrix_value ();
 	      if (! error_state)
 		{
 		  ComplexDET det = m.determinant (info, rcond);
 		  retval(1) = rcond;
-		  volatile double xrcond = rcond;
-		  xrcond += 1.0;
-		  retval(0) = ((info == -1 || xrcond == 1.0) 
-			       ? Complex (0.0) : det.value ());
-
+		  retval(0) = info == -1 ? Complex (0.0) : det.value ();
 		}
 	    }
 	}
       else
 	gripe_wrong_type_arg ("det", arg);
     }
   return retval;
 }
