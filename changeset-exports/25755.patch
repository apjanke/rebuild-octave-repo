# HG changeset patch
# User Rik <rik@octave.org>
# Date 1533833466 25200
#      Thu Aug 09 09:51:06 2018 -0700
# Node ID ddf8a03beffb037d7fc2a0958c245b54d8171d47
# Parent  19b2e75069e252d53106567906192192bcb28034
Calculate Laplacian matrix in BIST tests without for loop.

* pcg.m, pcr.m: Calculate Laplacian matrix in BIST tests without for loop for
efficiency.

diff --git a/scripts/sparse/pcg.m b/scripts/sparse/pcg.m
--- a/scripts/sparse/pcg.m
+++ b/scripts/sparse/pcg.m
@@ -546,33 +546,33 @@ endfunction
 %! N = 10;
 %! A = -diag ([1:N]);  b = sum (A, 2);
 %! [x, flag] = pcg (A, b, [], N + 1);
 %! assert (flag, 4);
 
 %!test
 %! ## solve tridiagonal system, do not converge in default 20 iterations
 %! N = 100;
-%! A = zeros (N, N);
-%! for i = 1 : N - 1  # form 1-D Laplacian matrix
-%!   A(i:i+1, i:i+1) = [2 -1; -1 2];
-%! endfor
+%! ## Form 1-D Laplacian matrix
+%! A = 2 * eye (N,N);
+%! A(2:(N+1):end) = -1;
+%! A((N+1):(N+1):end) = -1;
 %! b = ones (N, 1);
 %! [x, flag, relres, iter, resvec, eigest] = pcg (A, b, 1e-12);
 %! assert (flag);
 %! assert (relres >= 1.0);
 
 %!warning <iteration converged too fast>
 %! ## solve tridiagonal system with "perfect" preconditioner which converges
 %! ## in one iteration, so the eigest does not work and issues a warning.
 %! N = 100;
-%! A = zeros (N, N);
-%! for i = 1 : N - 1  # form 1-D Laplacian matrix
-%!   A(i:i+1, i:i+1) = [2 -1; -1 2];
-%! endfor
+%! ## Form 1-D Laplacian matrix
+%! A = 2 * eye (N,N);
+%! A(2:(N+1):end) = -1;
+%! A((N+1):(N+1):end) = -1;
 %! b = ones (N, 1);
 %! [x, flag, relres, iter, resvec, eigest] = pcg (A, b, [], [], A, [], b);
 %! assert (flag, 0);
 %! assert (norm (b - A*x) / norm (b), 0, 1e-6);
 %!
 %! assert (isnan (eigest), isnan ([NaN, NaN]));
 
 %!test
diff --git a/scripts/sparse/pcr.m b/scripts/sparse/pcr.m
--- a/scripts/sparse/pcr.m
+++ b/scripts/sparse/pcr.m
@@ -358,20 +358,21 @@ endfunction
 %! ## and here we have cond(A) = O(N^2)
 %! ## That's the reason we need some preconditioner; here we take
 %! ## a very simple and not powerful Jacobi preconditioner,
 %! ## which is the diagonal of A.
 %!
 %! ## Note that we use here indefinite preconditioners!
 %!
 %! N = 100;
-%! A = zeros (N,N);
-%! for i=1:N-1 # form 1-D Laplacian matrix
-%!   A(i:i+1,i:i+1) = [2 -1; -1 2];
-%! endfor
+%! ## Form 1-D Laplacian matrix
+%! A = 2 * eye (N,N);
+%! A(2:(N+1):end) = -1;
+%! A((N+1):(N+1):end) = -1;
+%!
 %! A = [A, zeros(size(A)); zeros(size(A)), -A];
 %! b = rand (2*N,1);
 %! X = A \ b;  # X is the true solution
 %! maxit = 80;
 %! printf ("System condition number is %g\n", cond (A));
 %! ## No preconditioner: the convergence is very slow!
 %!
 %! [x, flag, relres, iter, resvec] = pcr (A,b,[],maxit);
@@ -411,35 +412,35 @@ endfunction
 %! assert (norm (x-X) / norm (X) < 1e-10);
 %! assert (flag, 0);
 
 %!test
 %! ## solve tridiagonal system, do not converge in default 20 iterations
 %! ## should perform max allowable default number of iterations
 %!
 %! N = 100;
-%! A = zeros (N,N);
-%! for i=1:N-1 # form 1-D Laplacian matrix
-%!   A(i:i+1,i:i+1) = [2 -1; -1 2];
-%! endfor
+%! ## Form 1-D Laplacian matrix
+%! A = 2 * eye (N,N);
+%! A(2:(N+1):end) = -1;
+%! A((N+1):(N+1):end) = -1;
 %! b = ones (N,1);
 %! X = A \ b;  # X is the true solution
 %! [x, flag, relres, iter, resvec] = pcr (A,b,1e-12);
 %! assert (flag, 1);
 %! assert (relres > 0.6);
 %! assert (iter, 20);
 
 %!test
 %! ## solve tridiagonal system with "perfect" preconditioner
 %! ## converges in one iteration
 %!
 %! N = 100;
-%! A = zeros (N,N);
-%! for i=1:N-1 # form 1-D Laplacian matrix
-%!   A(i:i+1,i:i+1) = [2 -1; -1 2];
-%! endfor
+%! ## Form 1-D Laplacian matrix
+%! A = 2 * eye (N,N);
+%! A(2:(N+1):end) = -1;
+%! A((N+1):(N+1):end) = -1;
 %! b = ones (N,1);
 %! X = A \ b;  # X is the true solution
 %! [x, flag, relres, iter] = pcr (A,b,[],[],A,b);
 %! assert (norm (x-X) / norm(X) < 1e-6);
 %! assert (relres < 1e-6);
 %! assert (flag, 0);
 %! assert (iter, 1); # should converge in one iteration
