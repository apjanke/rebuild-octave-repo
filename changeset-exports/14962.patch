# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1340149719 18000
#      Tue Jun 19 18:48:39 2012 -0500
# Node ID 90a7a2af2cd5fa978835b70ff2d11c46a156a970
# Parent  903a5ee2cdde36df2fe7205da94ce042641aa9aa
Keep track of variables after SSA construction

* src/pt-jit.cc (jit_instruction::do_construct_ssa): New function.
  (jit_convert::do_construct_ssa): Use instruction::construct_ssa.
  (jit_convert::convert_llvm::visit): Stash llvm value for jit_assign.

* src/pt-jit.h (jit_instruction::construct_ssa, jit_assign_base::short_print,
  jit_assign::infer, jit_phi::construct_ssa): New function.
  (jit_convert::do_construct_ssa): New declaration.
  (jit_assign_base::jit_assign_base): Change number of arguments.
  (jit_assign::jit_assign): Do not keep track of dest in arguments.
  (jit_assign::print): Print correct SSA form.

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -1041,16 +1041,28 @@ jit_instruction::parent_llvm (void) cons
 std::ostream&
 jit_instruction::short_print (std::ostream& os) const
 {
   if (type ())
     jit_print (os, type ()) << ": ";
   return os << "#" << mid;
 }
 
+void
+jit_instruction::do_construct_ssa (size_t start, size_t end)
+{
+  for (size_t i = start; i < end; ++i)
+    {
+      jit_value *arg = argument (i);
+      jit_variable *var = dynamic_cast<jit_variable *> (arg);
+      if (var)
+        stash_argument (i, var->top ());
+    }
+}
+
 // -------------------- jit_block --------------------
 void
 jit_block::replace_with (jit_value *value)
 {
   assert (isa<jit_block> (value));
   jit_block *block = static_cast<jit_block *> (value);
 
   jit_value::replace_with (block);
@@ -1795,19 +1807,17 @@ void
 jit_convert::visit_function_def (tree_function_def&)
 {
   fail ();
 }
 
 void
 jit_convert::visit_identifier (tree_identifier& ti)
 {
-  const jit_function& fn = jit_typeinfo::grab ();
-  jit_value *decl = get_variable (ti.name ());
-  result = block->append (create<jit_call> (fn, decl));
+  result = get_variable (ti.name ());
 }
 
 void
 jit_convert::visit_if_clause (tree_if_clause&)
 {
   fail ();
 }
 
@@ -2259,28 +2269,17 @@ jit_convert::construct_ssa (void)
 
 void
 jit_convert::do_construct_ssa (jit_block& block)
 {
   // replace variables with their current SSA value
   for (jit_block::iterator iter = block.begin (); iter != block.end (); ++iter)
     {
       jit_instruction *instr = *iter;
-      if (! isa<jit_phi> (instr))
-        {
-          for (size_t i = isa<jit_assign> (instr); i < instr->argument_count ();
-               ++i)
-            {
-              jit_value *arg = instr->argument (i);
-              jit_variable *var = dynamic_cast<jit_variable *> (arg);
-              if (var)
-                instr->stash_argument (i, var->top ());
-            }
-        }
-
+      instr->construct_ssa ();
       instr->push_variable ();
     }
 
   // finish phi nodes of successors
   for (size_t i = 0; i < block.successor_count (); ++i)
     {
       jit_block *finish = block.successor (i);
 
@@ -2674,18 +2673,20 @@ jit_convert::convert_llvm::visit (jit_er
 {
   llvm::Value *cond = jit_typeinfo::insert_error_check ();
   llvm::Value *br = builder.CreateCondBr (cond, check.successor_llvm (0),
                                           check.successor_llvm (1));
   check.stash_llvm (br);
 }
 
 void
-jit_convert::convert_llvm::visit (jit_assign&)
-{}
+jit_convert::convert_llvm::visit (jit_assign& assign)
+{
+  assign.stash_llvm (assign.src ()->to_llvm ());
+}
 
 void
 jit_convert::convert_llvm::visit (jit_argument&)
 {}
 
 llvm::Value *
 jit_convert::convert_llvm::create_call (const jit_function::overload& ol,
                                         const std::vector<jit_value *>& jargs)
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -47,17 +47,18 @@ along with Octave; see the file COPYING.
 // example,
 // a = [1 2 3]
 // b = a + a;
 // will compile to do_binary_op (a, a).
 //
 // For loops are compiled again!
 // if, elseif, and else statements compile again!
 // break and continue now work!
-// Additionally, make check passes using jit.
+//
+// NOTE: Matrix access is currently broken!
 //
 // The octave low level IR is a linear IR, it works by converting everything to
 // calls to jit_functions. This turns expressions like c = a + b into
 // c = call binary+ (a, b)
 // The jit_functions contain information about overloads for differnt types. For
 // example, if we know a and b are scalars, then c must also be a scalar.
 //
 //
@@ -996,16 +997,21 @@ public:
   // argument types which have been infered already
   const std::vector<jit_type *>& argument_types (void) const
   { return already_infered; }
 
   virtual void push_variable (void) {}
 
   virtual void pop_variable (void) {}
 
+  virtual void construct_ssa (void)
+  {
+    do_construct_ssa (0, argument_count ());
+  }
+
   virtual bool infer (void) { return false; }
 
   void remove (void);
 
   virtual std::ostream& short_print (std::ostream& os) const;
 
   jit_block *parent (void) const { return mparent; }
 
@@ -1020,16 +1026,20 @@ public:
                      std::list<jit_instruction *>::iterator alocation)
   {
     mparent = aparent;
     mlocation = alocation;
   }
 
   size_t id (void) const { return mid; }
 protected:
+
+  // Do SSA replacement on arguments in [start, end)
+  void do_construct_ssa (size_t start, size_t end);
+
   std::vector<jit_type *> already_infered;
 private:
   static size_t next_id (bool reset = false)
   {
     static size_t ret = 0;
     if (reset)
       return ret = 0;
 
@@ -1462,59 +1472,73 @@ class
 jit_assign_base : public jit_instruction
 {
 public:
   jit_assign_base (jit_variable *adest) : jit_instruction (), mdest (adest) {}
 
   jit_assign_base (jit_variable *adest, size_t npred) : jit_instruction (npred),
                                                         mdest (adest) {}
 
-  jit_assign_base (jit_variable *adest, jit_value *arg0, jit_value *arg1)
-    : jit_instruction (arg0, arg1), mdest (adest) {}
+  jit_assign_base (jit_variable *adest, jit_value *arg0)
+    : jit_instruction (arg0), mdest (adest) {}
 
   jit_variable *dest (void) const { return mdest; }
 
   virtual void push_variable (void)
   {
     mdest->push (this);
   }
 
   virtual void pop_variable (void)
   {
     mdest->pop ();
   }
+
+  virtual std::ostream& short_print (std::ostream& os) const
+  {
+    if (type ())
+      jit_print (os, type ()) << ": ";
+
+    dest ()->short_print (os);
+    return os << "#" << id ();
+  }
 private:
   jit_variable *mdest;
 };
 
 class
 jit_assign : public jit_assign_base
 {
 public:
   jit_assign (jit_variable *adest, jit_value *asrc)
-    : jit_assign_base (adest, adest, asrc) {}
+    : jit_assign_base (adest, asrc) {}
 
   jit_instruction *src (void) const
   {
-    return static_cast<jit_instruction *> (argument (1));
+    return static_cast<jit_instruction *> (argument (0));
   }
 
-  virtual void push_variable (void)
+  virtual bool infer (void)
   {
-    dest ()->push (src ());
+    jit_type *stype = src ()->type ();
+    if (stype != type())
+      {
+        stash_type (stype);
+        return true;
+      }
+
+    return false;
   }
 
   virtual std::ostream& print (std::ostream& os, size_t indent = 0) const
   {
-    return print_indent (os, indent) << *dest () << " = " << *src ();
+    return print_indent (os, indent) << *this << " = " << *src ();
   }
 
   JIT_VALUE_ACCEPT;
-private:
-  jit_variable *mdest;
 };
 
 class
 jit_phi : public jit_assign_base
 {
 public:
   jit_phi (jit_variable *adest, size_t npred)
     : jit_assign_base (adest, npred)
@@ -1538,16 +1562,18 @@ public:
   }
 
   llvm::BasicBlock *incomming_llvm (size_t i) const
   {
     jit_block *inc = incomming (i);
     return inc->branch_llvm (parent ());
   }
 
+  virtual void construct_ssa (void) {}
+
   virtual bool infer (void);
 
   virtual std::ostream& print (std::ostream& os, size_t indent = 0) const
   {
     std::stringstream ss;
     print_indent (ss, indent);
     short_print (ss) << " phi ";
     std::string ss_str = ss.str ();
@@ -1565,25 +1591,16 @@ public:
 
         if (i + 1 < argument_count ())
           os << std::endl;
       }
 
     return os;
   }
 
-  virtual std::ostream& short_print (std::ostream& os) const
-  {
-    if (type ())
-      jit_print (os, type ()) << ": ";
-
-    dest ()->short_print (os);
-    return os << "#" << id ();
-  }
-
   JIT_VALUE_ACCEPT;
 private:
   std::vector<jit_phi_incomming> mincomming;
 };
 
 class
 jit_terminator : public jit_instruction
 {
