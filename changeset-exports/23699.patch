# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498501867 14400
#      Mon Jun 26 14:31:07 2017 -0400
# Node ID b29904962d2da3b8c2ec8cd643f2f5ee23fb2b40
# Parent  3dccf83253772eaf7ff4b95d6ae42aab9ff6d5f1
deprecate some global functions that access the symbol table

* variables.h, variables.cc (clear_mex_functions, clear_function,
clear_variable, clear_symbol, lookup_function_handle,
get_global_value, set_global_value, get_top_level_value,
set_top_level_value): Deprecate.  Eliminate all uses in Octave.

diff --git a/libinterp/corefcn/daspk.cc b/libinterp/corefcn/daspk.cc
--- a/libinterp/corefcn/daspk.cc
+++ b/libinterp/corefcn/daspk.cc
@@ -149,18 +149,18 @@ daspk_user_jacobian (const ColumnVector&
 
       if (retval.isempty ())
         err_user_supplied_eval ("daspk");
     }
 
   return retval;
 }
 
-DEFUN (daspk, args, nargout,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (daspk, interp, args, nargout,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {[@var{x}, @var{xdot}, @var{istate}, @var{msg}] =} daspk (@var{fcn}, @var{x_0}, @var{xdot_0}, @var{t}, @var{t_crit})
 Solve the set of differential-algebraic equations
 @tex
 $$ 0 = f (x, \dot{x}, t) $$
 with
 $$ x(t_0) = x_0, \dot{x}(t_0) = \dot{x}_0 $$
 @end tex
 @ifnottex
@@ -265,16 +265,18 @@ parameters for @code{daspk}.
 
   octave_value_list retval (4);
 
   octave::unwind_protect frame;
 
   frame.protect_var (call_depth);
   call_depth++;
 
+  octave::symbol_table& symtab = interp.get_symbol_table ();
+
   if (call_depth > 1)
     error ("daspk: invalid recursive call");
 
   std::string fcn_name, fname, jac_name, jname;
   daspk_fcn = 0;
   daspk_jac = 0;
 
   octave_value f_arg = args(0);
@@ -309,17 +311,17 @@ parameters for @code{daspk}.
                   jname.append (jac_name);
                   jname.append (" (x, xdot, t, cj) jac = ");
                   daspk_jac = extract_function (c(1), "daspk", jac_name,
                                                 jname, "; endfunction");
 
                   if (! daspk_jac)
                     {
                       if (fcn_name.length ())
-                        clear_function (fcn_name);
+                        symtab.clear_function (fcn_name);
                       daspk_fcn = 0;
                     }
                 }
             }
         }
       else
         error ("daspk: incorrect number of elements in cell array");
     }
@@ -363,17 +365,17 @@ parameters for @code{daspk}.
                     jname.append (jac_name);
                     jname.append (" (x, xdot, t, cj) jac = ");
                     daspk_jac = extract_function (tmp(1), "daspk", jac_name,
                                                   jname, "; endfunction");
 
                     if (! daspk_jac)
                       {
                         if (fcn_name.length ())
-                          clear_function (fcn_name);
+                          symtab.clear_function (fcn_name);
                         daspk_fcn = 0;
                       }
                   }
               }
             }
         }
     }
 
@@ -411,19 +413,19 @@ parameters for @code{daspk}.
   Matrix deriv_output;
 
   if (crit_times_set)
     output = dae.integrate (out_times, deriv_output, crit_times);
   else
     output = dae.integrate (out_times, deriv_output);
 
   if (fcn_name.length ())
-    clear_function (fcn_name);
+    symtab.clear_function (fcn_name);
   if (jac_name.length ())
-    clear_function (jac_name);
+    symtab.clear_function (jac_name);
 
   std::string msg = dae.error_message ();
 
   if (dae.integration_ok ())
     {
       retval(0) = output;
       retval(1) = deriv_output;
     }
diff --git a/libinterp/corefcn/dasrt.cc b/libinterp/corefcn/dasrt.cc
--- a/libinterp/corefcn/dasrt.cc
+++ b/libinterp/corefcn/dasrt.cc
@@ -185,18 +185,18 @@ dasrt_user_j (const ColumnVector& x, con
 
       if (retval.isempty ())
         err_user_supplied_eval ("dasrt");
     }
 
   return retval;
 }
 
-DEFUN (dasrt, args, nargout,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (dasrt, interp, args, nargout,
+           doc: /* -*- texinfo -*-
 @deftypefn  {} {[@var{x}, @var{xdot}, @var{t_out}, @var{istat}, @var{msg}] =} dasrt (@var{fcn}, [], @var{x_0}, @var{xdot_0}, @var{t})
 @deftypefnx {} {@dots{} =} dasrt (@var{fcn}, @var{g}, @var{x_0}, @var{xdot_0}, @var{t})
 @deftypefnx {} {@dots{} =} dasrt (@var{fcn}, [], @var{x_0}, @var{xdot_0}, @var{t}, @var{t_crit})
 @deftypefnx {} {@dots{} =} dasrt (@var{fcn}, @var{g}, @var{x_0}, @var{xdot_0}, @var{t}, @var{t_crit})
 Solve the set of differential-algebraic equations
 @tex
 $$ 0 = f (x, \dot{x}, t) $$
 with
@@ -351,16 +351,18 @@ parameters for @code{dasrt}.
     error ("dasrt: invalid recursive call");
 
   int argp = 0;
   std::string fcn_name, fname, jac_name, jname;
   dasrt_f = 0;
   dasrt_j = 0;
   dasrt_cf = 0;
 
+  octave::symbol_table& symtab = interp.get_symbol_table ();
+
   // Check all the arguments.  Are they the right animals?
 
   // Here's where I take care of f and j in one shot:
 
   octave_value f_arg = args(0);
 
   if (f_arg.iscell ())
     {
@@ -392,17 +394,17 @@ parameters for @code{dasrt}.
                   jname.append (jac_name);
                   jname.append (" (x, xdot, t, cj) jac = ");
                   dasrt_j = extract_function (c(1), "dasrt", jac_name, jname,
                                               "; endfunction");
 
                   if (! dasrt_j)
                     {
                       if (fcn_name.length ())
-                        clear_function (fcn_name);
+                        symtab.clear_function (fcn_name);
                       dasrt_f = 0;
                     }
                 }
             }
         }
       else
         error ("dasrt: incorrect number of elements in cell array");
     }
@@ -517,19 +519,19 @@ parameters for @code{dasrt}.
   dae.set_options (dasrt_opts);
 
   if (crit_times_set)
     output = dae.integrate (out_times, crit_times);
   else
     output = dae.integrate (out_times);
 
   if (fcn_name.length ())
-    clear_function (fcn_name);
+    symtab.clear_function (fcn_name);
   if (jac_name.length ())
-    clear_function (jac_name);
+    symtab.clear_function (jac_name);
 
   std::string msg = dae.error_message ();
 
   if (dae.integration_ok ())
     {
       retval(0) = output.state ();
       retval(1) = output.deriv ();
       retval(2) = output.times ();
diff --git a/libinterp/corefcn/dassl.cc b/libinterp/corefcn/dassl.cc
--- a/libinterp/corefcn/dassl.cc
+++ b/libinterp/corefcn/dassl.cc
@@ -149,18 +149,18 @@ dassl_user_jacobian (const ColumnVector&
 
       if (retval.isempty ())
         err_user_supplied_eval ("dassl");
     }
 
   return retval;
 }
 
-DEFUN (dassl, args, nargout,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (dassl, interp, args, nargout,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {[@var{x}, @var{xdot}, @var{istate}, @var{msg}] =} dassl (@var{fcn}, @var{x_0}, @var{xdot_0}, @var{t}, @var{t_crit})
 Solve the set of differential-algebraic equations
 @tex
 $$ 0 = f (x, \dot{x}, t) $$
 with
 $$ x(t_0) = x_0, \dot{x}(t_0) = \dot{x}_0 $$
 @end tex
 @ifnottex
@@ -269,16 +269,18 @@ parameters for @code{dassl}.
   octave::unwind_protect frame;
 
   frame.protect_var (call_depth);
   call_depth++;
 
   if (call_depth > 1)
     error ("dassl: invalid recursive call");
 
+  octave::symbol_table& symtab = interp.get_symbol_table ();
+
   std::string fcn_name, fname, jac_name, jname;
   dassl_fcn = 0;
   dassl_jac = 0;
 
   octave_value f_arg = args(0);
 
   if (f_arg.iscell ())
     {
@@ -310,17 +312,17 @@ parameters for @code{dassl}.
                   jname.append (jac_name);
                   jname.append (" (x, xdot, t, cj) jac = ");
                   dassl_jac = extract_function (c(1), "dassl", jac_name,
                                                 jname, "; endfunction");
 
                   if (! dassl_jac)
                     {
                       if (fcn_name.length ())
-                        clear_function (fcn_name);
+                        symtab.clear_function (fcn_name);
                       dassl_fcn = 0;
                     }
                 }
             }
         }
       else
         error ("dassl: incorrect number of elements in cell array");
     }
@@ -365,17 +367,17 @@ parameters for @code{dassl}.
                     jname.append (" (x, xdot, t, cj) jac = ");
                     dassl_jac = extract_function (tmp(1), "dassl",
                                                   jac_name, jname,
                                                   "; endfunction");
 
                     if (! dassl_jac)
                       {
                         if (fcn_name.length ())
-                          clear_function (fcn_name);
+                          symtab.clear_function (fcn_name);
                         dassl_fcn = 0;
                       }
                   }
               }
             }
         }
     }
 
@@ -414,19 +416,19 @@ parameters for @code{dassl}.
   Matrix deriv_output;
 
   if (crit_times_set)
     output = dae.integrate (out_times, deriv_output, crit_times);
   else
     output = dae.integrate (out_times, deriv_output);
 
   if (fcn_name.length ())
-    clear_function (fcn_name);
+    symtab.clear_function (fcn_name);
   if (jac_name.length ())
-    clear_function (jac_name);
+    symtab.clear_function (jac_name);
 
   std::string msg = dae.error_message ();
 
   if (dae.integration_ok ())
     {
       retval(0) = output;
       retval(1) = deriv_output;
     }
diff --git a/libinterp/corefcn/defun-dld.h b/libinterp/corefcn/defun-dld.h
--- a/libinterp/corefcn/defun-dld.h
+++ b/libinterp/corefcn/defun-dld.h
@@ -47,9 +47,20 @@ along with Octave; see the file COPYING.
   DEFINE_FUN_INSTALLER_FUN (name, doc)                  \
   DECLARE_FUN (name, args_name, nargout_name)
 
 #define DEFUNX_DLD(name, fname, gname, args_name, nargout_name, doc)    \
   FORWARD_DECLARE_FUNX (fname);                                         \
   DEFINE_FUNX_INSTALLER_FUN (name, fname, gname, doc)                   \
   DECLARE_FUNX (fname, args_name, nargout_name)
 
+#define DEFMETHOD_DLD(name, interp_name, args_name, nargout_name, doc)  \
+  FORWARD_DECLARE_METHOD (name);                                        \
+  DEFINE_FUN_INSTALLER_FUN (name, doc)                                  \
+  DECLARE_METHOD (name, interp_name, args_name, nargout_name)
+
+#define DEFMETHODX_DLD(name, fname, gname, interp_name, args_name,      \
+                       nargout_name, doc)                               \
+  FORWARD_DECLARE_METHODX (fname);                                      \
+  DEFINE_FUNX_INSTALLER_FUN (name, fname, gname, doc)                   \
+  DECLARE_METHODX (fname, interp_name, args_name, nargout_name)
+
 #endif
diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -1114,17 +1114,17 @@ namespace octave
         OCTAVE_SAFE_CALL (feval, (fcn, octave_value_list (), 0));
 
         OCTAVE_SAFE_CALL (flush_stdout, ());
       }
 
     // Do this explicitly so that destructors for mex file objects
     // are called, so that functions registered with mexAtExit are
     // called.
-    OCTAVE_SAFE_CALL (clear_mex_functions, ());
+    OCTAVE_SAFE_CALL (m_symbol_table.clear_mex_functions, ());
 
     OCTAVE_SAFE_CALL (command_editor::restore_terminal_state, ());
 
     OCTAVE_SAFE_CALL (octave_history_write_timestamp, ());
 
     if (! command_history::ignoring_entries ())
       OCTAVE_SAFE_CALL (command_history::clean_up_and_save, ());
 
diff --git a/libinterp/corefcn/lsode.cc b/libinterp/corefcn/lsode.cc
--- a/libinterp/corefcn/lsode.cc
+++ b/libinterp/corefcn/lsode.cc
@@ -135,18 +135,18 @@ lsode_user_jacobian (const ColumnVector&
 
       if (retval.isempty ())
         err_user_supplied_eval ("lsode");
     }
 
   return retval;
 }
 
-DEFUN (lsode, args, nargout,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (lsode, interp, args, nargout,
+           doc: /* -*- texinfo -*-
 @deftypefn  {} {[@var{x}, @var{istate}, @var{msg}] =} lsode (@var{fcn}, @var{x_0}, @var{t})
 @deftypefnx {} {[@var{x}, @var{istate}, @var{msg}] =} lsode (@var{fcn}, @var{x_0}, @var{t}, @var{t_crit})
 Ordinary Differential Equation (ODE) solver.
 
 The set of differential equations to solve is
 @tex
 $$ {dx \over dt} = f (x, t) $$
 with
@@ -269,16 +269,18 @@ parameters for @code{lsode}.
   octave::unwind_protect frame;
 
   frame.protect_var (call_depth);
   call_depth++;
 
   if (call_depth > 1)
     error ("lsode: invalid recursive call");
 
+  octave::symbol_table& symtab = interp.get_symbol_table ();
+
   std::string fcn_name, fname, jac_name, jname;
   lsode_fcn = 0;
   lsode_jac = 0;
 
   octave_value f_arg = args(0);
 
   if (f_arg.iscell ())
     {
@@ -310,17 +312,17 @@ parameters for @code{lsode}.
                   jname.append (jac_name);
                   jname.append (" (x, t) jac = ");
                   lsode_jac = extract_function (c(1), "lsode", jac_name,
                                                 jname, "; endfunction");
 
                   if (! lsode_jac)
                     {
                       if (fcn_name.length ())
-                        clear_function (fcn_name);
+                        symtab.clear_function (fcn_name);
                       lsode_fcn = 0;
                     }
                 }
             }
         }
       else
         error ("lsode: incorrect number of elements in cell array");
     }
@@ -365,17 +367,17 @@ parameters for @code{lsode}.
                     jname.append (" (x, t) jac = ");
                     lsode_jac = extract_function (tmp(1), "lsode",
                                                   jac_name, jname,
                                                   "; endfunction");
 
                     if (! lsode_jac)
                       {
                         if (fcn_name.length ())
-                          clear_function (fcn_name);
+                          symtab.clear_function (fcn_name);
                         lsode_fcn = 0;
                       }
                   }
               }
               break;
 
             default:
               error ("lsode: first arg should be a string or 2-element string array");
@@ -411,19 +413,19 @@ parameters for @code{lsode}.
 
   Matrix output;
   if (crit_times_set)
     output = ode.integrate (out_times, crit_times);
   else
     output = ode.integrate (out_times);
 
   if (fcn_name.length ())
-    clear_function (fcn_name);
+    symtab.clear_function (fcn_name);
   if (jac_name.length ())
-    clear_function (jac_name);
+    symtab.clear_function (jac_name);
 
   std::string msg = ode.error_message ();
 
   octave_value_list retval (3);
 
   if (ode.integration_ok ())
     retval(0) = output;
   else if (nargout < 2)
diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -3395,17 +3395,22 @@ mexPrintf (const char *fmt, ...)
 mxArray *
 mexGetVariable (const char *space, const char *name)
 {
   mxArray *retval = nullptr;
 
   octave_value val;
 
   if (! strcmp (space, "global"))
-    val = get_global_value (name);
+    {
+      octave::symbol_table& symtab
+        = octave::__get_symbol_table__ ("mexGetVariable");
+
+      val = symtab.global_varval (name);
+    }
   else
     {
       // FIXME: should this be in variables.cc?
 
       octave::unwind_protect frame;
 
       bool caller = ! strcmp (space, "caller");
       bool base = ! strcmp (space, "base");
@@ -3461,17 +3466,22 @@ mexPutVariable (const char *space, const
 
   if (name[0] == '\0')
     name = ptr->get_name ();
 
   if (! name || name[0] == '\0')
     return 1;
 
   if (! strcmp (space, "global"))
-    set_global_value (name, mxArray::as_octave_value (ptr));
+    {
+      octave::symbol_table& symtab
+        = octave::__get_symbol_table__ ("mexPutVariable");
+
+      symtab.global_assign (name, mxArray::as_octave_value (ptr));
+    }
   else
     {
       // FIXME: should this be in variables.cc?
 
       octave::unwind_protect frame;
 
       bool caller = ! strcmp (space, "caller");
       bool base = ! strcmp (space, "base");
diff --git a/libinterp/corefcn/quad.cc b/libinterp/corefcn/quad.cc
--- a/libinterp/corefcn/quad.cc
+++ b/libinterp/corefcn/quad.cc
@@ -125,18 +125,18 @@ quad_float_user_function (float x)
         }
 
       retval = tmp(0).xfloat_value ("quad: expecting user supplied function to return numeric value");
     }
 
   return retval;
 }
 
-DEFUN (quad, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (quad, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{q} =} quad (@var{f}, @var{a}, @var{b})
 @deftypefnx {} {@var{q} =} quad (@var{f}, @var{a}, @var{b}, @var{tol})
 @deftypefnx {} {@var{q} =} quad (@var{f}, @var{a}, @var{b}, @var{tol}, @var{sing})
 @deftypefnx {} {[@var{q}, @var{ier}, @var{nfun}, @var{err}] =} quad (@dots{})
 Numerically evaluate the integral of @var{f} from @var{a} to @var{b} using
 Fortran routines from @w{@sc{quadpack}}.
 
 @var{f} is a function handle, inline function, or a string containing the
@@ -198,17 +198,18 @@ variable by routines @code{dblquad} and 
   else
     {
       fcn_name = unique_symbol_name ("__quad_fcn__");
       std::string fname = "function y = ";
       fname.append (fcn_name);
       fname.append ("(x) y = ");
       quad_fcn = extract_function (args(0), "quad", fcn_name, fname,
                                    "; endfunction");
-      frame.add_fcn (clear_function, fcn_name);
+      octave::symbol_table& symtab = interp.get_symbol_table ();
+      frame.add_method (symtab, &octave::symbol_table::clear_function, fcn_name);
     }
 
   if (! quad_fcn)
     error ("quad: FCN argument is not a valid function name or handle");
 
   octave_value_list retval;
 
   if (args(1).is_single_type () || args(2).is_single_type ())
@@ -392,19 +393,16 @@ variable by routines @code{dblquad} and 
         default:
           panic_impossible ();
           break;
         }
 
       retval = ovl (val, ier, nfun, abserr);
     }
 
-  if (fcn_name.length ())
-    clear_function (fcn_name);
-
   return retval;
 }
 
 /*
 %!function y = __f (x)
 %!  y = x + 1;
 %!endfunction
 
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -951,20 +951,38 @@ namespace octave
     octave_value
       find (const std::string& name,
             const octave_value_list& args = octave_value_list (),
             bool skip_variables = false,
             bool local_funcs = true);
 
     octave_value builtin_find (const std::string& name);
 
+    void assign (const std::string& name, const octave_value& value, bool force_add)
+    {
+      if (m_current_scope)
+        m_current_scope->assign (name, value, force_add);
+    }
+
+    void assign (const std::string& name,
+                 const octave_value& value = octave_value ())
+    {
+      if (m_current_scope)
+        m_current_scope->assign (name, value);
+    }
+
+    octave_value varval (const std::string& name)
+    {
+      return (m_current_scope
+              ? m_current_scope->varval (name) : octave_value ());
+    }
+
     void
       global_assign (const std::string& name,
                      const octave_value& value = octave_value ())
-
     {
       global_symbols_iterator p = m_global_symbols.find (name);
 
       if (p == m_global_symbols.end ())
         m_global_symbols[name] = value;
       else
         p->second = value;
     }
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -65,50 +65,16 @@ along with Octave; see the file COPYING.
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 // Defines layout for the whos/who -long command
 static std::string Vwhos_line_format
   = "  %a:4; %ln:6; %cs:16:6:1;  %rb:12;  %lc:-1;\n";
 
-void
-clear_mex_functions (void)
-{
-  octave::symbol_table& symtab = octave::__get_symbol_table__ ("clear_mex_functions");
-
-  symtab.clear_mex_functions ();
-}
-
-void
-clear_function (const std::string& nm)
-{
-  octave::symbol_table& symtab = octave::__get_symbol_table__ ("clear_function");
-
-  symtab.clear_function (nm);
-}
-
-void
-clear_variable (const std::string& nm)
-{
-  octave::symbol_table::scope *scope
-    = octave::__get_current_scope__ ("clear_variable");
-
-  if (scope)
-    scope->clear_variable (nm);
-}
-
-void
-clear_symbol (const std::string& nm)
-{
-  octave::symbol_table& symtab = octave::__get_symbol_table__ ("clear_symbol");
-
-  symtab.clear_symbol (nm);
-}
-
 // Attributes of variables and functions.
 
 // Is this octave_value a valid function?
 
 octave_function *
 is_valid_function (const std::string& fcn_name,
                    const std::string& warn_for, bool warn)
 {
@@ -692,69 +658,16 @@ them.
 %!error exist (1,2,3)
 %!warning <"class" type argument is not implemented> exist ("a", "class");
 %!error <TYPE must be a string> exist ("a", 1)
 %!error <NAME must be a string> exist (1)
 %!error <unrecognized type argument "foobar"> exist ("a", "foobar")
 
 */
 
-octave_value
-lookup_function_handle (const std::string& nm)
-{
-  octave::symbol_table::scope *scope
-    = octave::__get_current_scope__ ("lookup_function_handle");
-
-  octave_value val = scope ? scope->varval (nm) : octave_value ();
-
-  return val.is_function_handle () ? val : octave_value ();
-}
-
-octave_value
-get_global_value (const std::string& nm, bool silent)
-{
-  octave::symbol_table& symtab = octave::__get_symbol_table__ ("get_global_value");
-
-  octave_value val = symtab.global_varval (nm);
-
-  if (val.is_undefined () && ! silent)
-    error ("get_global_value: undefined symbol '%s'", nm.c_str ());
-
-  return val;
-}
-
-void
-set_global_value (const std::string& nm, const octave_value& val)
-{
-  octave::symbol_table& symtab = octave::__get_symbol_table__ ("set_global_value");
-
-  symtab.global_assign (nm, val);
-}
-
-octave_value
-get_top_level_value (const std::string& nm, bool silent)
-{
-  octave::symbol_table& symtab = octave::__get_symbol_table__ ("get_top_level_value");
-
-  octave_value val = symtab.top_level_varval (nm);
-
-  if (val.is_undefined () && ! silent)
-    error ("get_top_level_value: undefined symbol '%s'", nm.c_str ());
-
-  return val;
-}
-
-void
-set_top_level_value (const std::string& nm, const octave_value& val)
-{
-  octave::symbol_table& symtab = octave::__get_symbol_table__ ("set_top_level_value");
-
-  symtab.top_level_assign (nm, val);
-}
-
 // Variable values.
 
 static bool
 wants_local_change (const octave_value_list& args, int& nargin)
 {
   bool retval = false;
 
   if (nargin == 2)
@@ -2782,8 +2695,97 @@ The hook function is expected to be of t
 Octave will call @var{fcn} with the name of the function that requires the
 component and a string describing the missing component.  The hook function
 should return an error message to be displayed.
 @seealso{missing_function_hook}
 @end deftypefn */)
 {
   return SET_INTERNAL_VARIABLE (missing_component_hook);
 }
+
+// The following functions are deprecated.
+
+void
+clear_mex_functions (void)
+{
+  octave::symbol_table& symtab = octave::__get_symbol_table__ ("clear_mex_functions");
+
+  symtab.clear_mex_functions ();
+}
+
+void
+clear_function (const std::string& nm)
+{
+  octave::symbol_table& symtab = octave::__get_symbol_table__ ("clear_function");
+
+  symtab.clear_function (nm);
+}
+
+void
+clear_variable (const std::string& nm)
+{
+  octave::symbol_table::scope *scope
+    = octave::__get_current_scope__ ("clear_variable");
+
+  if (scope)
+    scope->clear_variable (nm);
+}
+
+void
+clear_symbol (const std::string& nm)
+{
+  octave::symbol_table& symtab = octave::__get_symbol_table__ ("clear_symbol");
+
+  symtab.clear_symbol (nm);
+}
+
+octave_value
+lookup_function_handle (const std::string& nm)
+{
+  octave::symbol_table::scope *scope
+    = octave::__get_current_scope__ ("lookup_function_handle");
+
+  octave_value val = scope ? scope->varval (nm) : octave_value ();
+
+  return val.is_function_handle () ? val : octave_value ();
+}
+
+octave_value
+get_global_value (const std::string& nm, bool silent)
+{
+  octave::symbol_table& symtab = octave::__get_symbol_table__ ("get_global_value");
+
+  octave_value val = symtab.global_varval (nm);
+
+  if (val.is_undefined () && ! silent)
+    error ("get_global_value: undefined symbol '%s'", nm.c_str ());
+
+  return val;
+}
+
+void
+set_global_value (const std::string& nm, const octave_value& val)
+{
+  octave::symbol_table& symtab = octave::__get_symbol_table__ ("set_global_value");
+
+  symtab.global_assign (nm, val);
+}
+
+octave_value
+get_top_level_value (const std::string& nm, bool silent)
+{
+  octave::symbol_table& symtab = octave::__get_symbol_table__ ("get_top_level_value");
+
+  octave_value val = symtab.top_level_varval (nm);
+
+  if (val.is_undefined () && ! silent)
+    error ("get_top_level_value: undefined symbol '%s'", nm.c_str ());
+
+  return val;
+}
+
+void
+set_top_level_value (const std::string& nm, const octave_value& val)
+{
+  octave::symbol_table& symtab = octave::__get_symbol_table__ ("set_top_level_value");
+
+  symtab.top_level_assign (nm, val);
+}
diff --git a/libinterp/corefcn/variables.h b/libinterp/corefcn/variables.h
--- a/libinterp/corefcn/variables.h
+++ b/libinterp/corefcn/variables.h
@@ -42,18 +42,16 @@ namespace octave
 #include <string>
 
 #include "lo-ieee.h"
 
 //#include "ov.h"
 #include "ov-builtin.h"
 #include "symtab.h"
 
-extern OCTINTERP_API void clear_mex_functions (void);
-
 extern OCTINTERP_API octave_function *
 is_valid_function (const octave_value&, const std::string& = "",
                    bool warn = false);
 
 extern OCTINTERP_API octave_function *
 is_valid_function (const std::string&, const std::string& = "",
                    bool warn = false);
 
@@ -71,31 +69,16 @@ generate_struct_completions (const std::
 
 extern OCTINTERP_API bool
 looks_like_struct (const std::string& text, char prev_char);
 
 extern OCTINTERP_API std::string
 unique_symbol_name (const std::string& basename);
 
 extern OCTINTERP_API octave_value
-lookup_function_handle (const std::string& nm);
-
-extern OCTINTERP_API octave_value
-get_global_value (const std::string& nm, bool silent = false);
-
-extern OCTINTERP_API void
-set_global_value (const std::string& nm, const octave_value& val);
-
-extern OCTINTERP_API octave_value
-get_top_level_value (const std::string& nm, bool silent = false);
-
-extern OCTINTERP_API void
-set_top_level_value (const std::string& nm, const octave_value& val);
-
-extern OCTINTERP_API octave_value
 set_internal_variable (bool& var, const octave_value_list& args,
                        int nargout, const char *nm);
 
 extern OCTINTERP_API octave_value
 set_internal_variable (char& var, const octave_value_list& args,
                        int nargout, const char *nm);
 
 extern OCTINTERP_API octave_value
@@ -130,26 +113,49 @@ set_internal_variable (int& var, const o
 
 #define SET_INTERNAL_VARIABLE_WITH_LIMITS(NM, MINVAL, MAXVAL)           \
   set_internal_variable (V ## NM, args, nargout, #NM, MINVAL, MAXVAL)
 
 // in the following, CHOICES must be a C string array terminated by null.
 #define SET_INTERNAL_VARIABLE_CHOICES(NM, CHOICES)              \
   set_internal_variable (V ## NM, args, nargout, #NM, CHOICES)
 
-extern OCTINTERP_API std::string builtin_string_variable (const std::string&);
-extern OCTINTERP_API int builtin_real_scalar_variable (const std::string&,
-                                                       double&);
-extern OCTINTERP_API octave_value builtin_any_variable (const std::string&);
-
 extern OCTINTERP_API void bind_ans (const octave_value& val, bool print);
 
 extern OCTINTERP_API void mlock (void);
 extern OCTINTERP_API void munlock (const std::string&);
 extern OCTINTERP_API bool mislocked (const std::string&);
 
+extern OCTINTERP_API void maybe_missing_function_hook (const std::string& name);
+
+OCTAVE_DEPRECATED (4.4, "use 'symbol_table::clear_mex_functions' instead")
+extern OCTINTERP_API void clear_mex_functions (void);
+
+OCTAVE_DEPRECATED (4.4, "use 'symbol_table::clear_function' instead")
 extern OCTINTERP_API void clear_function (const std::string& nm);
+
+OCTAVE_DEPRECATED (4.4, "use 'symbol_table::clear_variable' instead")
 extern OCTINTERP_API void clear_variable (const std::string& nm);
+
+OCTAVE_DEPRECATED (4.4, "use 'symbol_table::clear_symbol' instead")
 extern OCTINTERP_API void clear_symbol (const std::string& nm);
 
-extern OCTINTERP_API void maybe_missing_function_hook (const std::string& name);
+OCTAVE_DEPRECATED (4.4, "use 'symbol_table::varval' instead")
+extern OCTINTERP_API octave_value
+lookup_function_handle (const std::string& nm);
+
+OCTAVE_DEPRECATED (4.4, "use 'symbol_table::global_varval' instead")
+extern OCTINTERP_API octave_value
+get_global_value (const std::string& nm, bool silent = false);
+
+OCTAVE_DEPRECATED (4.4, "use 'symbol_table::global_assign' instead")
+extern OCTINTERP_API void
+set_global_value (const std::string& nm, const octave_value& val);
+
+OCTAVE_DEPRECATED (4.4, "use 'symbol_table::top_level_varval' instead")
+extern OCTINTERP_API octave_value
+get_top_level_value (const std::string& nm, bool silent = false);
+
+OCTAVE_DEPRECATED (4.4, "use 'symbol_table::top_level_assign' instead")
+extern OCTINTERP_API void
+set_top_level_value (const std::string& nm, const octave_value& val);
 
 #endif
diff --git a/libinterp/dldfcn/__eigs__.cc b/libinterp/dldfcn/__eigs__.cc
--- a/libinterp/dldfcn/__eigs__.cc
+++ b/libinterp/dldfcn/__eigs__.cc
@@ -123,18 +123,18 @@ eigs_complex_func (const ComplexColumnVe
         }
     }
 
   return retval;
 }
 
 #endif
 
-DEFUN_DLD (__eigs__, args, nargout,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__eigs__, interp, args, nargout,
+               doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{d} =} __eigs__ (@var{A})
 @deftypefnx {} {@var{d} =} __eigs__ (@var{A}, @var{k})
 @deftypefnx {} {@var{d} =} __eigs__ (@var{A}, @var{k}, @var{sigma})
 @deftypefnx {} {@var{d} =} __eigs__ (@var{A}, @var{k}, @var{sigma}, @var{opts})
 @deftypefnx {} {@var{d} =} __eigs__ (@var{A}, @var{B})
 @deftypefnx {} {@var{d} =} __eigs__ (@var{A}, @var{B}, @var{k})
 @deftypefnx {} {@var{d} =} __eigs__ (@var{A}, @var{B}, @var{k}, @var{sigma})
 @deftypefnx {} {@var{d} =} __eigs__ (@var{A}, @var{B}, @var{k}, @var{sigma}, @var{opts})
@@ -556,17 +556,21 @@ Undocumented internal function.
 
   if (nconv <= 0)
     warning ("eigs: None of the %d requested eigenvalues converged", k);
   else if (nconv < k)
     warning ("eigs: Only %d of the %d requested eigenvalues converged",
              nconv, k);
 
   if (! fcn_name.empty ())
-    clear_function (fcn_name);
+    {
+      octave::symbol_table& symtab = interp.get_symbol_table ();
+
+      symtab.clear_function (fcn_name);
+    }
 
   return retval;
 
 #else
 
   octave_unused_parameter (args);
   octave_unused_parameter (nargout);
 
