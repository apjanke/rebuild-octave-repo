# HG changeset patch
# User jwe
# Date 1199716824 0
#      Mon Jan 07 14:40:24 2008 +0000
# Node ID a1ab9dbc962245548fdc37b61a06ee427f981dea
# Parent  d1a97ad872647e5dec94227454e244bf14c28fb8
[project @ 2008-01-07 14:40:23 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2008-01-07  Michael Goffioul <michael.goffioul@gmail.com>
+
+	* ov-builtin.h (octave_builtin): Tag with OCTINTERP_API.
+	* ov-dld-fcn.h (octave_dld_function): Likewise.
+
+	* ov-dld-fcn.cc (octave_dld_function::create): New function.
+	* ov-dld-fcn.h: Provide decl.
+	* defun.h (DEFINE_FUNX_INSTALLER_FUN3): Call it instead of
+	creating a new octave_dld_function object directly.
+
 2008-01-04  John Swensen  <jpswensen@comcast.net>
 
 	* debug.cc (bp_table::do_remove_all_breakpoints_in_file):
 	Avoid calling erase on invalid bp_map iterators.
 	(bp_table::do_remove_breakpoint): Only try to delete breakpoints
 	if some exist.  Avoid calling erase on invalid bp_map iterators.
 	(parse_dbfunction_params): Return early if ARGS is empty.
 	New arg, WHO.  Change all uses.
diff --git a/src/defun-int.h b/src/defun-int.h
--- a/src/defun-int.h
+++ b/src/defun-int.h
@@ -115,17 +115,17 @@ typedef octave_function * (*octave_dld_f
   gname ## _ ## cxx_abi (const octave_shlib& shl, bool relative) \
   { \
     octave_function *retval = 0; \
  \
     check_version (OCTAVE_API_VERSION, name); \
  \
     if (! error_state) \
       { \
-	octave_dld_function *fcn = new octave_dld_function (fname, shl, name, doc); \
+	octave_dld_function *fcn = octave_dld_function::create (fname, shl, name, doc); \
  \
         if (relative) \
           fcn->mark_relative (); \
  \
         retval = fcn; \
       } \
  \
     return retval; \
diff --git a/src/ov-builtin.h b/src/ov-builtin.h
--- a/src/ov-builtin.h
+++ b/src/ov-builtin.h
@@ -30,16 +30,17 @@ along with Octave; see the file COPYING.
 #include "ov-typeinfo.h"
 
 class octave_value;
 class octave_value_list;
 
 // Builtin functions.
 
 class
+OCTINTERP_API
 octave_builtin : public octave_function
 {
 public:
 
   octave_builtin (void) { }
 
   typedef octave_value_list (*fcn) (const octave_value_list&, int);
 
diff --git a/src/ov-dld-fcn.cc b/src/ov-dld-fcn.cc
--- a/src/ov-dld-fcn.cc
+++ b/src/ov-dld-fcn.cc
@@ -67,13 +67,31 @@ octave_dld_function::fcn_file_name (void
 }
 
 octave_time
 octave_dld_function::time_parsed (void) const
 {
   return sh_lib.time_loaded ();
 }
 
+// Note: this wrapper around the octave_dld_function constructor is
+//       necessary to work around a MSVC limitation handling in
+//       virtual destructors that prevents unloading a dynamic module
+//       before *all* objects (of class using a virtual dtor) have
+//       been fully deleted; indeed, MSVC attaches auto-generated code
+//       (scalar deleting destructor) to objects created in a dynamic
+//       module, and this code will be executed in the dynamic module
+//       context at object deletion; unloading the dynamic module
+//       before objects have been deleted will make the "delete" code
+//       of objects to point to an invalid code segment.
+
+octave_dld_function*
+octave_dld_function::create (octave_builtin::fcn ff, const octave_shlib& shl,
+			     const std::string& nm, const std::string& ds)
+{
+  return new octave_dld_function (ff, shl, nm, ds);
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-dld-fcn.h b/src/ov-dld-fcn.h
--- a/src/ov-dld-fcn.h
+++ b/src/ov-dld-fcn.h
@@ -35,16 +35,17 @@ along with Octave; see the file COPYING.
 class octave_shlib;
 
 class octave_value;
 class octave_value_list;
 
 // Dynamically-linked functions.
 
 class
+OCTINTERP_API
 octave_dld_function : public octave_builtin
 {
 public:
 
   octave_dld_function (void) { }
 
   octave_dld_function (octave_builtin::fcn ff, const octave_shlib& shl,
 		       const std::string& nm = std::string (),
@@ -60,16 +61,21 @@ public:
 
   octave_time time_checked (void) const { return t_checked; }
 
   bool is_system_fcn_file (void) const { return system_fcn_file; }
 
   bool is_builtin_function (void) const { return false; }
 
   bool is_dld_function (void) const { return true; }
+  
+  static octave_dld_function* create (octave_builtin::fcn ff,
+      const octave_shlib& shl,
+      const std::string& nm = std::string (),
+      const std::string& ds = std::string ());
 
 private:
 
   octave_shlib sh_lib;
 
   // The time the file was last checked to see if it needs to be
   // parsed again.
   mutable octave_time t_checked;
