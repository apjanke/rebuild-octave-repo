# HG changeset patch
# User jwe
# Date 784006498 0
#      Sat Nov 05 03:34:58 1994 +0000
# Node ID e0bfbbf20e402ae6b426a90a4e4b82f4f3e752d9
# Parent  e6cb0493ae9945786dff8eff79ff90b356269b42
[project @ 1994-11-05 03:34:58 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -841,17 +841,17 @@ DiagArray<T>::cols (void) const
 
 template <class T>
 int
 DiagArray<T>::columns (void) const
 {
   return nc;
 }
 
-#if defined (_AIX) && defined (__GNUG__) && __GNUC__ > 1 && __GNUC_MINOR__ < 6
+#if 1
 template <class T>
 T&
 DiagArray<T>::elem (int r, int c)
 {
   static T foo (0);
   return (r == c) ? Array<T>::elem (r) : foo;
 }
 
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -228,16 +228,17 @@ public:
 
 template <class T>
 class DiagArray : public Array<T>
 {
 private:
   inline T get (int i) { return Array<T>::elem (i); }
   inline void set (const T& val, int i) { Array<T>::elem (i) = val; }
 
+#if 0
 #if ! (defined (_AIX) && defined (__GNUG__) && __GNUC__ > 1 && __GNUC_MINOR__ < 6)
   class Proxy
   {
   public:
 
     inline Proxy (DiagArray<T> *ref, int r, int c)
       : i (r), j (c), object (ref) { } 
 
@@ -278,16 +279,17 @@ private:
     int j;
 
     DiagArray<T> *object;
 
   };
 
 friend class Proxy;
 #endif
+#endif
 
 protected:
 
   int nr;
   int nc;
 
   DiagArray (T *d, int r, int c);
 
@@ -305,21 +307,17 @@ public:
 
   int dim1 (void) const;
   int dim2 (void) const;
 
   int rows (void) const;
   int cols (void) const;
   int columns (void) const;
 
-#if defined (_AIX) && defined (__GNUG__) && __GNUC__ > 1 && __GNUC_MINOR__ < 6
-  T& elem (int r, int c);
-  T& checkelem (int r, int c);
-  T& operator () (int r, int c);
-#else
+#if 0
   inline Proxy elem (int r, int c)
   {
     return Proxy (this, r, c);
   }
 
   inline Proxy checkelem (int r, int c)
   {
     if (r < 0 || c < 0 || r >= nr || c >= nc)
@@ -336,16 +334,20 @@ public:
     if (r < 0 || c < 0 || r >= nr || c >= nc)
       {
 	(*current_liboctave_error_handler) ("range error");
 	return Proxy (0, r, c);
       }
     else
       return Proxy (this, r, c);
   }
+#else
+  T& elem (int r, int c);
+  T& checkelem (int r, int c);
+  T& operator () (int r, int c);
 #endif
 
 // No checking.
   T& xelem (int r, int c);
 
   T elem (int r, int c) const;
   T checkelem (int r, int c) const;
   T operator () (int r, int c) const;
