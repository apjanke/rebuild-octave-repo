# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1541791442 -3600
#      Fri Nov 09 20:24:02 2018 +0100
# Node ID 10145b9ad883b28c7bf1ee748dc79090ce320078
# Parent  28515ed950071d2cdc6cf04a17a431d0dc085cce
Update normals when turning visibility of surface and patch on (bug #54970).

* graphics.in.h (base_properties, patch::properties, surface::properties): Add
update method for "visible" property.

diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -2373,25 +2373,27 @@ protected:
     handle_property parent fs , p
     radio_property pickableparts , "{visible}|all|none"
     bool_property selected , "off"
     bool_property selectionhighlight , "on"
     string_property tag s , ""
     string_property type frs , ty
     handle_property uicontextmenu u , graphics_handle ()
     any_property userdata , Matrix ()
-    bool_property visible , "on"
+    bool_property visible u , "on"
 
     // Octave-specific properties
     bool_property __modified__ hs , "on"
     graphics_handle __myhandle__ fhrs , mh
   END_PROPERTIES
 
   virtual void update_handlevisibility (void);
 
+  virtual void update_visible (void) { };
+
 protected:
   struct cmp_caseless_str
   {
     bool operator () (const caseless_str& a, const caseless_str& b) const
     {
       std::string a1 = a;
       std::transform (a1.begin (), a1.end (), a1.begin (), tolower);
       std::string b1 = b;
@@ -4711,24 +4713,26 @@ public:
     // See the genprops.awk script for an explanation of the
     // properties declarations.
     // Programming note: Keep property list sorted if new ones are added.
 
     BEGIN_PROPERTIES (light)
       color_property color , color_values (1, 1, 1)
       array_property position , default_light_position ()
       radio_property style , "{infinite}|local"
-      bool_property visible U , "on"
     END_PROPERTIES
 
   protected:
     void init (void)
     {
       position.add_constraint (dim_vector (1, 3));
     }
+
+  private:
+    void update_visible (void);
   };
 
 private:
   properties xproperties;
 
 public:
   light (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
@@ -4954,33 +4958,39 @@ public:
     void update_data (void);
 
     void calc_face_normals (Matrix& normals);
     void update_face_normals (bool reset, bool force = false);
     void update_vertex_normals (bool reset, bool force = false);
 
     void update_edgelighting (void)
     {
-      update_face_normals (false);
+      update_normals (false);
     }
 
     void update_facelighting (void)
     {
       update_normals (false);
     }
 
     void update_facenormalsmode (void)
     {
       update_face_normals (false);
     }
 
     void update_vertexnormalsmode (void)
     {
       update_vertex_normals (false);
     }
+
+    void update_visible (void)
+    {
+      if (is_visible ())
+        update_normals (false);
+    }
   };
 
 private:
   properties xproperties;
   property_list default_properties;
 
 public:
   patch (const graphics_handle& mh, const graphics_handle& p)
@@ -5173,16 +5183,21 @@ public:
     { update_vertex_normals (false); }
 
     void update_edgelighting (void)
     { update_normals (false); }
 
     void update_facelighting (void)
     { update_normals (false); }
 
+    void update_visible (void)
+    {
+      if (is_visible ())
+        update_normals (false);
+    }
 
   };
 
 private:
   properties xproperties;
 
 public:
   surface (const graphics_handle& mh, const graphics_handle& p)
