# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1222666339 -7200
#      Mon Sep 29 07:32:19 2008 +0200
# Branch release-3-0-x
# Node ID 5d7aa47a579766b79e594406b502ee6afc62a093
# Parent  42c40c6ebb8e0625d16ed711a9a05e5a0f734024
fix null assignment behaviour

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1607,17 +1607,17 @@ Array<T>::maybe_delete_elements (idx_vec
                   dimensions(0) = new_nr;
                 }
               else
                 (*current_liboctave_error_handler)
                   ("A(idx) = []: index out of range");
             }
 	}
     }
-  else
+  else if (! (idx_i.orig_empty () || idx_j.orig_empty ()))
     {
       (*current_liboctave_error_handler)
         ("a null assignment can have only one non-colon index");
     }
 }
 
 template <class T>
 void
@@ -1627,16 +1627,31 @@ Array<T>::maybe_delete_elements (idx_vec
 }
 
 template <class T>
 void
 Array<T>::maybe_delete_elements (Array<idx_vector>& ra_idx, const T& rfv)
 {
   octave_idx_type n_idx = ra_idx.length ();
 
+  // Special case matrices
+  if (ndims () == 2)
+    {
+      if (n_idx == 1)
+        {
+          maybe_delete_elements (ra_idx (0));
+          return;
+        }
+      else if (n_idx == 2)
+        {
+          maybe_delete_elements (ra_idx (0), ra_idx (1));
+          return;
+        }
+    }
+
   dim_vector lhs_dims = dims ();
 
   int n_lhs_dims = lhs_dims.length ();
 
   if (lhs_dims.all_zero ())
     return;
 
   if (n_idx == 1 && ra_idx(0).is_colon ())
@@ -1667,16 +1682,17 @@ Array<T>::maybe_delete_elements (Array<i
   Array<int> idx_is_colon (n_idx, 0);
 
   Array<int> idx_is_colon_equiv (n_idx, 0);
 
   // Initialization of colon arrays.
 
   for (octave_idx_type i = 0; i < n_idx; i++)
     {
+      if (ra_idx(i).orig_empty ()) return;
       idx_is_colon_equiv(i) = ra_idx(i).is_colon_equiv (lhs_dims(i), 1);
 
       idx_is_colon(i) = ra_idx(i).is_colon ();
     }
 
   bool idx_ok = true;
 
   // Check for index out of bounds.
@@ -1722,28 +1738,25 @@ Array<T>::maybe_delete_elements (Array<i
 
 	  idx_ok = false;
 	}
     }
 
   if (idx_ok)
     {
       if (n_idx > 1
-	  && (all_ones (idx_is_colon) || all_ones (idx_is_colon_equiv)))
+	  && (all_ones (idx_is_colon)))
 	{
 	  // A(:,:,:) -- we are deleting elements in all dimensions, so
 	  // the result is [](0x0x0).
 
-	  dim_vector zeros;
-	  zeros.resize (n_idx);
-
-	  for (int i = 0; i < n_idx; i++)
-	    zeros(i) = 0;
-
-	  resize (zeros, rfv);
+	  dim_vector newdim = dims ();
+          newdim(0) = 0;
+
+	  resize (newdim, rfv);
 	}
 
       else if (n_idx > 1
 	       && num_ones (idx_is_colon) == n_idx - 1
 	       && num_ones (idx_is_colon_equiv) == n_idx)
 	{
 	  // A(:,:,j) -- we are deleting elements in one dimension by
 	  // enumerating them.
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2008-09-29  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.cc (Array<T>::maybe_delete_elements_2, Array<T>::maybe_delete_elements): 
+	Ignore null assignments with empty index vectors.
+
 2008-09-19  John W. Eaton  <jwe@octave.org>
 
 	* Array.cc (assign1, assign2, assignN):
 	Clear lhs index before throwing error.
 	(Array<T>::value): Clear index before throwing error.
 
 2008-09-18  Jaroslav Hajek  <highegg@gmail.com>
 
