# HG changeset patch
# User jwe
# Date 940401900 0
#      Wed Oct 20 06:45:00 1999 +0000
# Node ID 76f6a531f5b8dbbf868acde906289b489dec6ee0
# Parent  bac635def4777807ad16ae168881ac726b7a267f
[project @ 1999-10-20 06:44:59 by jwe]

diff --git a/examples/make_int.cc b/examples/make_int.cc
--- a/examples/make_int.cc
+++ b/examples/make_int.cc
@@ -280,16 +280,29 @@ Creates an integer variable from VAL.")
   return retval;
 }
 
 DEFUN_DLD (doit, args, ,
   "doit (I)")
 {
   octave_value_list retval;
 
+  // Might be better to use
+  //
+  //  args(0).type_name () == octave_integer::static_type_id ()
+  //
+  // But there are some problems with doing that if this function is
+  // in the same shared library as the one that defines the class.
+  // In that case, at least some systems will create two static data
+  // members for t_id.  To fix that problem, we need a different way
+  // of loading multiple functions from a single shared library...
+  // (Actually, I think this will be fixed when .oct file reloading is
+  // implemented for 2.1.x.  It was done for 2.0.x, but the changes
+  // have not been carried over to the 2.1.x source tree yet.  --jwe)
+
   if (args(0).type_name () == "integer")
     {
       // At this point, we know we have a handle for an octave_integer
       // object, so we can peek at the representation and extract the
       // data.
 
       const octave_value& rep = args(0).get_rep ();
 
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -701,25 +701,26 @@ display_help_text (ostream& os, const st
       if (cols > 64)
 	cols -= 7;
 
       if (cols > 80)
 	cols = 72;
 
       ostrstream buf;
       buf << "sed 's/^[#%]+ *//' | makeinfo"
-	  << " -D VERSION=\"" << OCTAVE_VERSION << "\""
-	  << " -D OCTAVE_HOME=\"" << OCTAVE_PREFIX << "\""
-	  << " -D TARGETHOSTTYPE=\"" << CANONICAL_HOST_TYPE << "\""
+	  << " -D \"VERSION " << OCTAVE_VERSION << "\""
+	  << " -D \"OCTAVEHOME " << OCTAVE_PREFIX << "\""
+	  << " -D \"TARGETHOSTTYPE " << CANONICAL_HOST_TYPE << "\""
 	  << " --fill-column " << cols
 	  << " --no-warn"
 	  << " --no-validate"
 	  << " --no-headers"
 	  << " --force"
 	  << " --output " << tmp_file_name
+	  << " > /dev/null 2>&1"
 	  << ends;
 
       char *cmd = buf.str ();
 
       oprocstream filter (cmd);
 
       delete [] cmd;
 
