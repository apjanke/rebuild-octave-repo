# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1216756999 14400
#      Tue Jul 22 16:03:19 2008 -0400
# Node ID 9cd3ee5298a0770a9b446e91f5f3d694aad38d12
# Parent  bd3fa5ca55e64c3f73d5d00301794f99ca96b6b1
Use common rep/class pattern for graphics events

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,27 @@
+2008-07-22  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* graphics.h.in (class base_graphics_event, class graphics_event): New
+	classes (replace gh_manager::event_data).
+	(class gh_manager::event_data): Remove.
+	(gh_manager::post_function, gh_manager::do_post_function): Use
+	graphics_event::event_fcn type.
+	(gh_manager::event_queue, gh_manager::do_post_event): Use
+	graphics_event type.
+	* graphics.cc (class callback_event, class function_event, class
+	set_event): Renamed from xxx_data classes.
+	(graphics_event::create_callback_event,
+	graphics_event::create_function_event,
+	graphics_event::create_set_event): Renamed from gh_manager::xxx
+	equivalent methods, removed reference count increment.
+	(gh_manager::do_post_event): Likewise.
+	(gh_manager::do_post_event): Use graphics_event type.
+	(gh_manager::do_post_function): Use graphics_event::event_fcn type.
+
 2008-07-22  John W. Eaton  <jwe@octave.org>
 
 	* version.h (OCTAVE_VERSION): Now 3.1.51+.
 
 2008-07-21  John W. Eaton  <jwe@octave.org>
 
 	* version.h (OCTAVE_VERSION): Now 3.1.51.
 	(OCTAVE_RELEASE_DATE): Now 2008-07-21.
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -3561,124 +3561,118 @@ gh_manager::do_pop_figure (const graphic
 	{
 	  figure_list.erase (p);
 	  break;
 	}
     }
 }
 
 class
-callback_event_data : public gh_manager::event_data
+callback_event : public base_graphics_event
 {
 public:
-  callback_event_data (const graphics_handle& h, const std::string& name,
-		       const octave_value& data = Matrix ())
-      : gh_manager::event_data (0), handle (h), callback_name (name),
+  callback_event (const graphics_handle& h, const std::string& name,
+		  const octave_value& data = Matrix ())
+      : base_graphics_event (), handle (h), callback_name (name),
         callback_data (data) { }
 
   void execute (void)
     {
       gh_manager::execute_callback (handle, callback_name, callback_data);
     }
 
 private:
-  callback_event_data (void)
-      : gh_manager::event_data (0) { }
+  callback_event (void)
+      : base_graphics_event () { }
 
 private:
   graphics_handle handle;
   std::string callback_name;
   octave_value callback_data;
 };
 
 class
-function_event_data : public gh_manager::event_data
+function_event : public base_graphics_event
 {
 public:
-  function_event_data (gh_manager::event_fcn fcn, void* data = 0)
-      : gh_manager::event_data (0), function (fcn),
+  function_event (graphics_event::event_fcn fcn, void* data = 0)
+      : base_graphics_event (), function (fcn),
         function_data (data) { }
 
   void execute (void)
     {
       function (function_data);
     }
 
 private:
-  function_event_data (void)
-      : gh_manager::event_data (0) { }
+  function_event (void)
+      : base_graphics_event () { }
 
 private:
-  gh_manager::event_fcn function;
+  graphics_event::event_fcn function;
   void* function_data;
 };
 
 class
-set_event_data : public gh_manager::event_data
+set_event : public base_graphics_event
 {
 public:
-  set_event_data (const graphics_handle& h, const std::string& name,
-		  const octave_value& value)
-      : gh_manager::event_data (0), handle (h), property_name (name),
+  set_event (const graphics_handle& h, const std::string& name,
+	     const octave_value& value)
+      : base_graphics_event (), handle (h), property_name (name),
         property_value (value) { }
 
   void execute (void)
     {
       gh_manager::autolock guard;
 
       xset (handle, property_name, property_value);
     }
 
 private:
-  set_event_data (void)
-      : gh_manager::event_data (0) { }
+  set_event (void)
+      : base_graphics_event () { }
 
 private:
   graphics_handle handle;
   std::string property_name;
   octave_value property_value;
 };
 
-gh_manager::event_data
-gh_manager::event_data::create_callback_event (const graphics_handle& h,
-					       const std::string& name,
-					       const octave_value& data)
+graphics_event
+graphics_event::create_callback_event (const graphics_handle& h,
+				       const std::string& name,
+				       const octave_value& data)
 {
-  event_data e;
-
-  e.rep = new callback_event_data (h, name, data);
-
-  e.rep->refcount++;
+  graphics_event e;
+
+  e.rep = new callback_event (h, name, data);
 
   return e;
 }
 
-gh_manager::event_data
-gh_manager::event_data::create_function_event (gh_manager::event_fcn fcn,
-					       void *data)
+graphics_event
+graphics_event::create_function_event (graphics_event::event_fcn fcn,
+				       void *data)
 {
-  event_data e;
-
-  e.rep =new function_event_data (fcn, data);
-
-  e.rep->refcount++;
+  graphics_event e;
+
+  e.rep = new function_event (fcn, data);
 
   return e;
 }
 
-gh_manager::event_data
-gh_manager::event_data::create_set_event (const graphics_handle& h,
-					  const std::string& name,
-					  const octave_value& data)
+graphics_event
+graphics_event::create_set_event (const graphics_handle& h,
+				  const std::string& name,
+				  const octave_value& data)
 {
-  event_data e;
-
-  e.rep = new set_event_data (h, name, data);
-
-  e.rep->refcount++;
+  graphics_event e;
+
+  e.rep = new set_event (h, name, data);
 
   return e;
 }
 
 static void
 xset_gcbo (const graphics_handle& h)
 {
   graphics_object go = gh_manager::get_object (0);
@@ -3764,17 +3758,17 @@ gh_manager::do_execute_callback (const g
     feval (fcn, args);
   
   END_INTERRUPT_WITH_EXCEPTIONS;
 
   unwind_protect::run_frame ("execute_callback");
 }
 
 void
-gh_manager::do_post_event (const event_data& e)
+gh_manager::do_post_event (const graphics_event& e)
 {
   event_queue.push_back (e);
 
   command_editor::add_event_hook (gh_manager::process_events);
 }
 
 void
 gh_manager::do_post_callback (const graphics_handle& h, const std::string name,
@@ -3782,70 +3776,70 @@ gh_manager::do_post_callback (const grap
 {
   gh_manager::autolock guard;
 
   graphics_object go = get_object (h);
 
   if (go.valid_object ())
     {
       if (callback_objects.empty ())
-	do_post_event (event_data::create_callback_event (h, name, data));
+	do_post_event (graphics_event::create_callback_event (h, name, data));
       else
 	{
 	  const graphics_object& current = callback_objects.front ();
 
 	  if (current.get_properties ().is_interruptible ())
-	    do_post_event (event_data::create_callback_event (h, name, data));
+	    do_post_event (graphics_event::create_callback_event (h, name, data));
 	  else
 	    {
 	      caseless_str busy_action (go.get_properties ().get_busyaction ());
 
 	      if (busy_action.compare ("queue"))
-		do_post_event (event_data::create_callback_event (h, name, data));
+		do_post_event (graphics_event::create_callback_event (h, name, data));
 	      else
 		{
 		  caseless_str cname (name);
 
 		  if (cname.compare ("deletefcn")
 		      || cname.compare ("createfcn")
 		      || (go.isa ("figure")
 			  && (cname.compare ("closerequestfcn")
 			      || cname.compare ("resizefcn"))))
-		    do_post_event (event_data::create_callback_event (h, name, data));
+		    do_post_event (graphics_event::create_callback_event (h, name, data));
 		}
 	    }
 	}
     }
 }
 
 void
-gh_manager::do_post_function (event_fcn fcn, void* fcn_data)
+gh_manager::do_post_function (graphics_event::event_fcn fcn, void* fcn_data)
 {
   gh_manager::autolock guard;
 
-  do_post_event (event_data::create_function_event (fcn, fcn_data));
+  do_post_event (graphics_event::create_function_event (fcn, fcn_data));
 }
 
 void
 gh_manager::do_post_set (const graphics_handle& h, const std::string name,
 			 const octave_value& value)
 {
   gh_manager::autolock guard;
 
-  do_post_event (event_data::create_set_event (h, name, value));
+  do_post_event (graphics_event::create_set_event (h, name, value));
 }
 
 int
 gh_manager::do_process_events (bool force)
 {
-  event_data e;
+  graphics_event e;
 
   do
     {
-      e = event_data ();
+      e = graphics_event ();
 
       gh_manager::lock ();
 
       if (! event_queue.empty ())
 	{
 	  if (callback_objects.empty () || force)
 	    {
 	      e = event_queue.front ();
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -3486,26 +3486,99 @@ octave_value
 get_property_from_handle (double handle, const std::string &property,
 			  const std::string &func);
 bool
 set_property_in_handle (double handle, const std::string &property,
 			const octave_value &arg, const std::string &func);
 
 // ---------------------------------------------------------------------
 
+class graphics_event;
+
+class
+base_graphics_event
+{
+public:
+  friend class graphics_event;
+
+  base_graphics_event (void) : count (1) { }
+
+  virtual ~base_graphics_event (void) { }
+
+  virtual void execute (void) = 0;
+
+private:
+  int count;
+};
+
+class
+graphics_event
+{
+public:
+  typedef void (*event_fcn) (void*);
+
+  graphics_event (void) : rep (0) { }
+
+  graphics_event (const graphics_event& e)
+    {
+      rep = e.rep;
+      rep->count++;
+    }
+
+  ~graphics_event (void)
+    {
+      if (rep && --rep->count == 0)
+	delete rep;
+    }
+
+  graphics_event& operator = (const graphics_event& e)
+    {
+      if (rep != e.rep)
+	{
+	  if (rep && --rep->count == 0)
+	    delete rep;
+
+	  rep = e.rep;
+	  if (rep)
+	    rep->count++;
+	}
+
+      return *this;
+    }
+
+  void execute (void)
+    { if (rep) rep->execute (); }
+
+  bool ok (void) const
+    { return (rep != 0); }
+
+  static graphics_event
+      create_callback_event (const graphics_handle& h,
+			     const std::string& name,
+			     const octave_value& data = Matrix ());
+
+  static graphics_event
+      create_function_event (event_fcn fcn, void *data = 0);
+
+  static graphics_event
+      create_set_event (const graphics_handle& h,
+			const std::string& name,
+			const octave_value& value);
+private:
+  base_graphics_event *rep;
+};
+
 class OCTINTERP_API gh_manager
 {
 protected:
 
   gh_manager (void);
 
 public:
 
-  typedef void (*event_fcn) (void*);
-
   static bool instance_ok (void)
   {
     bool retval = true;
 
     if (! instance)
       instance = new gh_manager ();
 
     if (! instance)
@@ -3615,17 +3688,17 @@ public:
   static void post_callback (const graphics_handle& h,
 			     const std::string& name,
 			     const octave_value& data = Matrix ())
   {
     if (instance_ok ())
       instance->do_post_callback (h, name, data);
   }
 
-  static void post_function (event_fcn fcn, void* data = 0)
+  static void post_function (graphics_event::event_fcn fcn, void* data = 0)
   {
     if (instance_ok ())
       instance->do_post_function (fcn, data);
   }
 
   static void post_set (const graphics_handle& h,
 			const std::string& name,
 			const octave_value& value)
@@ -3654,83 +3727,16 @@ public:
 
   private:
 
     // No copying!
     autolock (const autolock&);
     autolock& operator = (const autolock&);
   };
 
-public:
-  class event_data
-    {
-      public:
-	event_data (void) : rep (0) { }
-
-	event_data (const event_data& d)
-	  {
-	    rep = d.rep;
-	    if (rep)
-	      rep->refcount++;
-	  }
-
-	virtual ~event_data (void)
-	  {
-	    if (rep && --rep->refcount == 0)
-	      {
-		delete rep;
-		rep = 0;
-	      }
-	  }
-
-	event_data& operator = (const event_data& d)
-	  {
-	    if (d.rep != rep)
-	      {
-		if (rep && --rep->refcount == 0)
-		  delete rep;
-
-		rep = d.rep;
-		if (rep)
-		  rep->refcount++;
-	      }
-
-	    return *this;
-	  }
-
-	virtual void execute (void)
-	  { if (rep) rep->execute (); }
-
-	bool ok (void) const { return (rep != 0); }
-	
-	static event_data
-	    create_callback_event (const graphics_handle& h,
-				   const std::string& name,
-				   const octave_value& data = Matrix ());
-
-	static event_data
-	    create_function_event (event_fcn fcn, void *data = 0);
-
-	static event_data
-	    create_set_event (const graphics_handle& h,
-			      const std::string& name,
-			      const octave_value& value);
-
-      protected:
-	explicit event_data (int /* dummy */)
-	    : refcount (0) { }
-
-      private:
-	union
-	  {
-	    event_data *rep;
-	    int refcount;
-	  };
-    };
-
 private:
 
   static gh_manager *instance;
 
   typedef std::map<graphics_handle, graphics_object>::iterator iterator;
   typedef std::map<graphics_handle, graphics_object>::const_iterator const_iterator;
 
   typedef std::set<graphics_handle>::iterator free_list_iterator;
@@ -3751,17 +3757,17 @@ private:
   // The allocated figure handles.  Top of the stack is most recently
   // created.
   std::list<graphics_handle> figure_list;
 
   // The lock for accessing the graphics sytsem
   octave_mutex graphics_lock;
 
   // The list of event queued by backends
-  std::list<event_data> event_queue;
+  std::list<graphics_event> event_queue;
 
   // The stack of callback objects
   std::list<graphics_object> callback_objects;
 
   graphics_handle get_handle (const std::string& go_name);
 
   void do_free (const graphics_handle& h);
 
@@ -3824,32 +3830,32 @@ private:
   void do_unlock (void) { graphics_lock.unlock (); }
 
   void do_execute_callback (const graphics_handle& h, const octave_value& cb,
 			    const octave_value& data);
 
   void do_post_callback (const graphics_handle& h, const std::string name,
 			 const octave_value& data);
 
-  void do_post_function (event_fcn fcn, void* fcn_data);
+  void do_post_function (graphics_event::event_fcn fcn, void* fcn_data);
 
   void do_post_set (const graphics_handle& h, const std::string name,
 		    const octave_value& value);
 
   int do_process_events (bool force = false);
 
   static void restore_gcbo (void*)
   {
     if (instance_ok ())
       instance->do_restore_gcbo ();
   }
 
   void do_restore_gcbo (void);
 
-  void do_post_event (const event_data& e);
+  void do_post_event (const graphics_event& e);
 };
 
 
 // This function is NOT equivalent to the scripting language function gcf.
 OCTINTERP_API graphics_handle gcf (void);
 
 // This function is NOT equivalent to the scripting language function gca.
 OCTINTERP_API graphics_handle gca (void);
