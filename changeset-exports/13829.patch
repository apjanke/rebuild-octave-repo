# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1320472974 14400
#      Sat Nov 05 02:02:54 2011 -0400
# Node ID 8e25d6d1db10aa9e3976847c56a9ccb9e7f27229
# Parent  f1b023fd098d717d5095212c0bcbc4f98355552f
ensure that complex matrix multiplication results are fully initialized

* CMatrix.cc (ComplexMatrix::xgemm): Ensure that all elements of
retval are initialized.
* fCMatrix.cc (FloatComplexMatrix::xgemm): Likewise.

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -3792,17 +3792,17 @@ xgemm (const ComplexMatrix& a, const Com
             }
 
         }
       else
         {
           octave_idx_type lda = a.rows (), tda = a.cols ();
           octave_idx_type ldb = b.rows (), tdb = b.cols ();
 
-          retval = ComplexMatrix (a_nr, b_nc);
+          retval = ComplexMatrix (a_nr, b_nc, 0.0);
           Complex *c = retval.fortran_vec ();
 
           if (b_nc == 1 && a_nr == 1)
             {
               if (cja == cjb)
                 {
                   F77_FUNC (xzdotu, XZDOTU) (a_nc, a.data (), 1, b.data (), 1, *c);
                   if (cja) *c = std::conj (*c);
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -3788,17 +3788,17 @@ xgemm (const FloatComplexMatrix& a, cons
             }
 
         }
       else
         {
           octave_idx_type lda = a.rows (), tda = a.cols ();
           octave_idx_type ldb = b.rows (), tdb = b.cols ();
 
-          retval = FloatComplexMatrix (a_nr, b_nc);
+          retval = FloatComplexMatrix (a_nr, b_nc, 0.0);
           FloatComplex *c = retval.fortran_vec ();
 
           if (b_nc == 1 && a_nr == 1)
             {
               if (cja == cjb)
                 {
                   F77_FUNC (xcdotu, XCDOTU) (a_nc, a.data (), 1, b.data (), 1, *c);
                   if (cja) *c = std::conj (*c);
