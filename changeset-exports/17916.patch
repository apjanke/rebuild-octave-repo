# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1384322568 0
#      Wed Nov 13 06:02:48 2013 +0000
# Node ID c7f089c560ccde4ae1a986810359202986f3df6d
# Parent  56d2b68384053c74712d1a75ddfd19040697c435
imread: avoid out of bounds error when reading part of multipage image file.

* __magick_read__.cc (F__magick_read__): the nFrames variable holds the total
number of frames in the file which may be different than the length of
frameidx (the indices for the frames to read) so use frameidx.nelem () in a for
loop instead of nFrames. Also, return after printing error (and no setting
error_state)

diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -765,29 +765,31 @@ use @code{imread}.\n\
             }
         }
     }
 
   // Check that all frames have the same size. We don't do this at the same
   // time we decode the image because that's done in many different places,
   // to cover the different types of images which would lead to a lot of
   // copy and paste.
-  const unsigned int nRows = imvec[frameidx(0)].rows ();
-  const unsigned int nCols = imvec[frameidx(0)].columns ();
-  for (octave_idx_type frame = 0; frame < nFrames; frame++)
-    {
-      if (nRows != imvec[frameidx(frame)].rows () ||
-          nCols != imvec[frameidx(frame)].columns ())
-        {
-          error ("imread: all frames must have the same size but frame %i is different",
-                 frameidx(frame) +1);
-          error_state = 1;
-        }
-    }
-
+  {
+    const unsigned int nRows = imvec[frameidx(0)].rows ();
+    const unsigned int nCols = imvec[frameidx(0)].columns ();
+    const octave_idx_type n = frameidx.nelem ();
+    for (octave_idx_type frame = 0; frame < n; frame++)
+      {
+        if (nRows != imvec[frameidx(frame)].rows () ||
+            nCols != imvec[frameidx(frame)].columns ())
+          {
+            error ("imread: all frames must have the same size but frame %i is different",
+                   frameidx(frame) +1);
+            return output;
+          }
+      }
+  }
 
   const octave_idx_type depth = get_depth (imvec[frameidx(0)]);
   if (is_indexed (imvec[frameidx(0)]))
     {
       if (depth <= 1)
         output = read_indexed_images<boolNDArray>   (imvec, frameidx,
                                                      nargout, options);
       else if (depth <= 8)
