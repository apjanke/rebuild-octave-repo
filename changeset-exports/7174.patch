# HG changeset patch
# User jwe
# Date 1195067772 0
#      Wed Nov 14 19:16:12 2007 +0000
# Node ID ff4a4cc863a965e15845b4f0081b5a06a2d0aa3e
# Parent  ff2ff2c09865b940e9527e536aaea4fed2a4a757
[project @ 2007-11-14 19:16:12 by jwe]

diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl               2002, 2003, 2004, 2005
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.594 $)
+AC_REVISION($Revision: 1.595 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 OCTAVE_HOST_TYPE
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
@@ -444,23 +444,21 @@ WITH_PCRE="$ac_cv_pcre_h_macros_present"
 REGEX_LIBS=
 if test $WITH_PCRE = yes; then
   AC_DEFINE(HAVE_PCRE, 1, [Define if PCRE is available.])
   if test $WITH_PCRE_CONFIG = yes; then
     REGEX_LIBS=$(pcre-config --libs)
   else
     REGEX_LIBS=-lpcre
   fi
-fi
-if test $WITH_PCRE = no; then
+else
   warn_pcre="PCRE library not found.  This will result in some loss of functionality for the regular expression matching functions."
   AC_MSG_WARN($warn_pcre)
 fi
 
-## not sure why we need to check for regex like this if pcre is defined, but it was like this when I got here ...
 AC_CHECK_FUNCS(regexec, WITH_REGEX=yes , [
   AC_CHECK_LIB(regex, regexec, WITH_REGEX=yes, WITH_REGEX=no)])
 if test $WITH_REGEX = yes ; then
   AC_DEFINE(HAVE_REGEX, 1, [Define if regex is available.])
   if test $WITH_PCRE = no ; then
     AC_CHECK_FUNCS(regexec, REGEX_LIBS= , [
       AC_CHECK_LIB(regex, regexec, REGEX_LIBS="-lregex")])
   fi
diff --git a/scripts/general/interp3.m b/scripts/general/interp3.m
--- a/scripts/general/interp3.m
+++ b/scripts/general/interp3.m
@@ -65,47 +65,48 @@ function vi = interp3 (varargin)
   method = "linear";
   extrapval = NA;
   nargs = nargin;
 
   if (nargin < 1)
     print_usage ();
   endif
 
-  if (ischar (varargin {end}))
-    method = varargin {end};
+  if (ischar (varargin{end}))
+    method = varargin{end};
     nargs = nargs - 1;
-  elseif (ischar (varargin {end - 1}))
-    if (! isnumeric (varargin {end}) || ! isscalar (varargin {end}))
+  elseif (ischar (varargin{end-1}))
+    if (! isnumeric (varargin{end}) || ! isscalar (varargin{end}))
       error ("extrapal is expected to be a numeric scalar");
     endif
-    extrapval = varargin {end};
-    method = varargin {end - 1};
+    extrapval = varargin{end};
+    method = varargin{end-1};
     nargs = nargs - 2;
   endif
 
-  if (nargs < 3 || (nargs == 4 && ! isvector (varargin {1}) && 
-      nargs == (ndims (varargin {1}) + 1)))
+  if (nargs < 3 || (nargs == 4 && ! isvector (varargin{1})
+		    && nargs == (ndims (varargin{1}) + 1)))
+    v = varargin{1};
     if (ndims (v) != 3)
       error ("expect 3-dimensional array of values");
     endif
     x = varargin (2:4);
     if (any (! cellfun (@isvector, x)))
       for i = 2 : 3
 	if (! size_equal (x{1}, x{i}) || ! size_equal (x{i}, v))
 	  error ("dimensional mismatch");
 	endif
 	x{i} = permute (x{i}, [2, 1, 3]);
       endfor
       x{1} = permute (x{1}, [2, 1, 3]);
     endif
     v = permute (v, [2, 1, 3]);
     vi = ipermute (interpn (v, x{:}, method, extrapval), [2, 1, 3]);
-  elseif (nargs == 7 && nargs == (2 * ndims (varargin {ceil (nargs / 2)})) + 1)
-    v = varargin {4};
+  elseif (nargs == 7 && nargs == (2 * ndims (varargin{ceil (nargs / 2)})) + 1)
+    v = varargin{4};
     if (ndims (v) != 3)
       error ("expect 3-dimensional array of values");
     endif
     x = varargin (1:3);
     if (any (! cellfun (@isvector, x)))
       for i = 2 : 3
 	if (! size_equal (x{1}, x{i}) || ! size_equal (x{i}, v))
 	  error ("dimensional mismatch");
@@ -120,17 +121,17 @@ function vi = interp3 (varargin)
 	if (! size_equal (y{1}, y{i}))
 	  error ("dimensional mismatch");
 	endif
 	y{i} = permute (y{i}, [2, 1, 3]);
       endfor
       y{1} = permute (y{1}, [2, 1, 3]);
     endif
     v = permute (v, [2, 1, 3]);
-    vi = ipermute (interpn (x{:}, v, y{:}, method, extrapval), [2,1,3]);
+    vi = ipermute (interpn (x{:}, v, y{:}, method, extrapval), [2, 1, 3]);
   else
     error ("wrong number or incorrectly formatted input arguments");
   endif
 endfunction
 
 %!test
 %! x = y = z = -1:1;
 %! f = @(x,y,z) x.^2 - y - z.^2;
