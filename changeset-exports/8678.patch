# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1233759901 -3600
#      Wed Feb 04 16:05:01 2009 +0100
# Node ID e2b4c19c455cda890e00299829c524e11d9e15e2
# Parent  095ae5e0a8313340f5ecb4de80e70d39abe91566
redo changeset 4238f2600a17 with fixes to sorting

diff --git a/liboctave/Array-str.cc b/liboctave/Array-str.cc
--- a/liboctave/Array-str.cc
+++ b/liboctave/Array-str.cc
@@ -19,24 +19,24 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <string>
+
 // Instantiate Arrays of strings.
 
 #include "Array.h"
 #include "Array.cc"
 #include "oct-sort.cc"
 
-#include <string>
-
 INSTANTIATE_ARRAY_SORT (std::string);
 
 INSTANTIATE_ARRAY (std::string, OCTAVE_API);
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2009-02-05  Jaroslav Hajek  <highegg@gmail.com>
+
+	* str-vec.h (string_vector::sort): Remove implementation.
+	* str-vec.cc (string_vector::sort): Move here. Use in-place sorting.
+	* Array-str.cc: Fix order of header files.
+	* oct-sort.cc (octave_sort<T>::merge_hi): std::copy ->
+	std::copy_backward where appropriate.
+
 2009-02-05  John W. Eaton  <jwe@octave.org>
 
 	* Array-util.cc (zero_dims_inquire): Eliminate unused variable MATCH.
 
 	* Sparse.cc (assign (Sparse<LT>& lhs, const Sparse<RT>& rhs)):
 	Eliminate unused variable N.
 
 	* MArray-f.cc (MArray<float>::norm (float p) const,
diff --git a/liboctave/oct-sort.cc b/liboctave/oct-sort.cc
--- a/liboctave/oct-sort.cc
+++ b/liboctave/oct-sort.cc
@@ -24,18 +24,19 @@ code I ripped-off.
 
 As required in the Python license the short description of the changes
 made are
 
 * convert the sorting code in listobject.cc into a generic class, 
   replacing PyObject* with the type of the class T.
 
 * replaced usages of malloc, free, memcpy and memmove by standard C++
-  new [], delete [] and std::copy. Note that replacing memmove by std::copy
-  is possible if the destination starts before the source.
+  new [], delete [] and std::copy and std::copy_backward. Note that replacing
+  memmove by std::copy is possible if the destination starts before the source.
+  If not, std::copy_backward needs to be used.
   
 
 The Python license is
 
   PSF LICENSE AGREEMENT FOR PYTHON 2.3
   --------------------------------------
 
   1. This LICENSE AGREEMENT is between the Python Software Foundation
@@ -728,17 +729,17 @@ octave_sort<T>::merge_hi (T *pa, octave_
 	  if (k < 0)
 	    goto Fail;
 	  k = na - k;
 	  acount = k;
 	  if (k) 
 	    {
 	      dest -= k;
 	      pa -= k;
-              std::copy (pa+1, pa+1 + k, dest+1);
+              std::copy_backward (pa+1, pa+1 + k, dest+1 + k);
 	      na -= k;
 	      if (na == 0)
 		goto Succeed;
 	    }
 	  *dest-- = *pb--;
 	  --nb;
 	  if (nb == 1)
 	    goto CopyA;
@@ -779,17 +780,17 @@ Fail:
   if (nb)
     std::copy (baseb, baseb + nb, dest-(nb-1));
   return result;
 
 CopyA:
   /* The first element of pb belongs at the front of the merge. */
   dest -= na;
   pa -= na;
-  std::copy (pa+1, pa+1 + na, dest+1);
+  std::copy_backward (pa+1, pa+1 + na, dest+1 + na);
   *dest = *pb;
 
   return 0;
 }
 
 /* Merge the two runs at stack indices i and i+1.
  * Returns 0 on success, -1 on error.
  */
diff --git a/liboctave/str-vec.cc b/liboctave/str-vec.cc
--- a/liboctave/str-vec.cc
+++ b/liboctave/str-vec.cc
@@ -79,16 +79,28 @@ string_vector::string_vector (const char
 string_vector::string_vector (const char * const *s, octave_idx_type n)
   : Array<std::string> (n)
 {
   for (octave_idx_type i = 0; i < n; i++)
     elem (i) = s[i];
 }
 
 string_vector&
+string_vector::sort (bool make_uniq)
+{
+  // Don't use Array<std::string>::sort () to allow sorting in place.
+  octave_sort<std::string> lsort;
+  lsort.sort (Array<std::string>::fortran_vec (), length ());
+
+  if (make_uniq)
+    uniq ();
+
+  return *this;
+}
+string_vector&
 string_vector::uniq (void)
 {
   octave_idx_type len = length ();
 
   if (len > 0)
     {
       octave_idx_type k = 0;
 
diff --git a/liboctave/str-vec.h b/liboctave/str-vec.h
--- a/liboctave/str-vec.h
+++ b/liboctave/str-vec.h
@@ -79,25 +79,17 @@ public:
 
     return longest;
   }
 
   std::string& operator[] (octave_idx_type i) { return Array<std::string>::elem (i); }
 
   std::string operator[] (octave_idx_type i) const { return Array<std::string>::elem (i); }
 
-  string_vector& sort (bool make_uniq = false)
-  {
-    Array<std::string>::sort ();
-
-    if (make_uniq)
-      uniq ();
-
-    return *this;
-  }
+  string_vector& sort (bool make_uniq = false);
 
   string_vector& uniq (void);
 
   string_vector& append (const std::string& s);
 
   string_vector& append (const string_vector& sv);
 
   char **c_str_vec (void) const;
