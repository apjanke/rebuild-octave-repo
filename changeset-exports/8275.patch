# HG changeset patch
# User Soren Hauberg <hauberg@gmail.com>
# Date 1225131930 14400
#      Mon Oct 27 14:25:30 2008 -0400
# Node ID aaccb13623472bdb2d467a692b1eced209d1b4b2
# Parent  967c15c5e26558980c0703d6d12937368c0b5c6d
debug.txi: typo

diff --git a/doc/interpreter/debug.txi b/doc/interpreter/debug.txi
--- a/doc/interpreter/debug.txi
+++ b/doc/interpreter/debug.txi
@@ -55,17 +55,17 @@ the functions @code{debug_on_interrupt},
 @DOCSTRING(debug_on_error)
 
 @node Leaving Debug Mode
 @section Leavinging Debug Mode
 
 To leave the debug mode, you should simply type either @code{dbcont} 
 or @code{return}.
 
-@DOCSTRING(dbcont}
+@DOCSTRING(dbcont)
 
 To quit debug mode and return directly to the prompt @code{dbquit}
 should be used instead
 
 @DOCSTRING(dbquit)
 
 Finally, typing @code{exit} or @code{quit} at the debug prompt will
 result in Octave terminating normally.
diff --git a/src/DLD-FUNCTIONS/__glpk__.cc b/src/DLD-FUNCTIONS/__glpk__.cc
--- a/src/DLD-FUNCTIONS/__glpk__.cc
+++ b/src/DLD-FUNCTIONS/__glpk__.cc
@@ -40,16 +40,17 @@ along with Octave; see the file COPYING.
 extern "C"
 {
 #if defined (HAVE_GLPK_GLPK_H)
 #include <glpk/glpk.h>
 #else
 #include <glpk.h>
 #endif
 
+#if 0
 #ifdef GLPK_PRE_4_14
 
 #ifndef _GLPLIB_H
 #include <glplib.h>
 #endif
 #ifndef lib_set_fault_hook
 #define lib_set_fault_hook lib_fault_hook
 #endif
@@ -58,16 +59,17 @@ extern "C"
 #endif
 
 #else
 
 void _glp_lib_print_hook (int (*func)(void *info, char *buf), void *info);
 void _glp_lib_fault_hook (int (*func)(void *info, char *buf), void *info);
 
 #endif
+#endif
 }
 
 #define NIntP 17
 #define NRealP 10
 
 int lpxIntParam[NIntP] = {
   0,
   1,
@@ -132,55 +134,59 @@ int RParam[NRealP] = {
   LPX_K_TMLIM,
   LPX_K_OUTDLY,
   LPX_K_TOLINT,
   LPX_K_TOLOBJ
 };
 
 static jmp_buf mark;  //-- Address for long jump to jump to
 
+#if 0
 int
 glpk_fault_hook (void * /* info */, char *msg)
 {
   error ("CRITICAL ERROR in GLPK: %s", msg);
   longjmp (mark, -1);
 }
 
 int
 glpk_print_hook (void * /* info */, char *msg)
 {
   message (0, "%s", msg);
   return 1;
 }
+#endif
 
 int
 glpk (int sense, int n, int m, double *c, int nz, int *rn, int *cn,
       double *a, double *b, char *ctype, int *freeLB, double *lb,
       int *freeUB, double *ub, int *vartype, int isMIP, int lpsolver,
       int save_pb, double *xmin, double *fmin, double *status,
       double *lambda, double *redcosts, double *time, double *mem)
 {
   int errnum;
   int typx = 0;
   int method;
 
   clock_t t_start = clock();
 
+#if 0
 #ifdef GLPK_PRE_4_14
   lib_set_fault_hook (0, glpk_fault_hook);
 #else
   _glp_lib_fault_hook (glpk_fault_hook, 0);
 #endif
 
   if (lpxIntParam[0] > 1)
 #ifdef GLPK_PRE_4_14
     lib_set_print_hook (0, glpk_print_hook);
 #else
     _glp_lib_print_hook (glpk_print_hook, 0);
 #endif
+#endif
 
   LPX *lp = lpx_create_prob ();
 
 
   //-- Set the sense of optimization
   if (sense == 1)
     lpx_set_obj_dir (lp, LPX_MIN);
   else
@@ -309,22 +315,25 @@ glpk (int sense, int n, int m, double *c
       }
      break;
 
     case 'T':
       errnum = lpx_interior(lp);
       break;
 
     default:
+      break;
+#if 0
 #ifdef GLPK_PRE_4_14
       insist (method != method);
 #else
       static char tmp[] = "method != method";
       glpk_fault_hook (0, tmp);
 #endif
+#endif
     }
 
   /*  errnum assumes the following results:
       errnum = 0 <=> No errors
       errnum = 1 <=> Iteration limit exceeded.
       errnum = 2 <=> Numerical problems with basis matrix.
   */
   if (errnum == LPX_E_OK)
