# HG changeset patch
# User Rik <rik@octave.org>
# Date 1377015935 25200
#      Tue Aug 20 09:25:35 2013 -0700
# Node ID 4d7f95eb8bfef6ef4654b618888d61b8cdf57787
# Parent  88a6f2f540adac25092eb4dab3ace9eb9b39cf7a
doc: Miscellaneous small tweaks to documentation for consistency.

* doc/interpreter/external.txi: Don't group EXAMPLEFILEs which are longer than
20 lines.

* doc/interpreter/oop.txi: Don't group EXAMPLEFILEs which are longer than
20 lines.

* doc/interpreter/octave.texi: Eliminate trailing whitespace.

* doc/interpreter/tips.txi: Eliminate trailing whitespace.

* examples/mysparse.c: Eliminate trailing whitespace.

* scripts/miscellaneous/compare_versions.m: use @qcode macro.

* scripts/plot/gnuplot_binary.in: use @qcode macro.

* scripts/statistics/tests/kruskal_wallis_test.m: use @cite macro.

diff --git a/doc/interpreter/external.txi b/doc/interpreter/external.txi
--- a/doc/interpreter/external.txi
+++ b/doc/interpreter/external.txi
@@ -352,19 +352,17 @@ Operators such an @code{+}, @code{-}, or
 majority of the matrix and array types.  In addition there are a number of
 methods that are of interest only for matrices such as @code{transpose},
 @code{hermitian}, @code{solve}, etc.
 
 The typical way to extract a matrix or array from the input arguments of
 @w{@code{DEFUN_DLD}} function is as follows
 
 @example
-@group
 @EXAMPLEFILE(addtwomatrices.cc)
-@end group
 @end example
 
 To avoid segmentation faults causing Octave to abort this function
 explicitly checks that there are sufficient arguments available before
 accessing these arguments.  It then obtains two multi-dimensional arrays
 of type @code{NDArray} and adds these together.  Note that the array_value
 method is called without using the @code{is_matrix_type} type, and instead the
 error_state is checked before returning @code{A + B}.  The reason to
@@ -479,19 +477,17 @@ retval(0) = octave_value (ch, '"');
 @subsection Cell Arrays in Oct-Files
 
 Octave's cell type is also available from within oct-files.  A cell
 array is just an array of @code{octave_value}s, and thus each element of the
 cell array can be treated just like any other @code{octave_value}.  A simple
 example is
 
 @example
-@group
 @EXAMPLEFILE(celldemo.cc)
-@end group
 @end example
 
 Note that cell arrays are used less often in standard oct-files and so
 the @file{Cell.h} header file must be explicitly included.  The rest of the
 example extracts the @code{octave_value}s one by one from the cell array and
 returns them as individual return arguments.  For example:
 
 @example
@@ -1512,19 +1508,17 @@ consecutive in any case.
 @subsection Cell Arrays with Mex-Files
 
 One can perform exactly the same operations on Cell arrays in mex-files
 as in oct-files.  An example that reduplicates the function of
 the @file{celldemo.cc} oct-file in a mex-file is given by @file{mycell.c}
 as shown below.
 
 @example
-@group
 @EXAMPLEFILE(mycell.c)
-@end group
 @end example
 
 @noindent
 The output is identical to the oct-file version as well.
 
 @example
 @group
 [b1, b2, b3] = mycell (@{1, [1, 2], "test"@})
@@ -1732,19 +1726,17 @@ within a mex-file.
 
 The libraries Octave itself uses can be utilized in standalone
 applications.  These applications then have access, for example, to the
 array and matrix classes, as well as to all of the Octave algorithms.  The
 following C++ program, uses class Matrix from @file{liboctave.a} or
 @file{liboctave.so}.
 
 @example
-@group
 @EXAMPLEFILE(standalone.cc)
-@end group
 @end example
 
 @noindent
 mkoctfile can be used to build a standalone application with a
 command like
 
 @example
 @group
@@ -1761,19 +1753,17 @@ Note that the application @code{standalo
 against the Octave libraries and any Octave support libraries.  The above
 allows the Octave math libraries to be used by an application.  It does
 not, however, allow the script files, oct-files, or builtin functions of
 Octave to be used by the application.  To do that the Octave interpreter
 needs to be initialized first.  An example of how to do this can then be
 seen in the code
 
 @example
-@group
 @EXAMPLEFILE(embedded.cc)
-@end group
 @end example
 
 @noindent
 which, as before, is compiled and run as a standalone application with
 
 @example
 @group
 $ mkoctfile --link-stand-alone embedded.cc -o embedded
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -142,64 +142,64 @@ 02110-1301--1307, USA.
 This manual documents how to run, install and port GNU Octave, as well
 as its new features and incompatibilities, and how to report bugs.
 It corresponds to GNU Octave version @value{VERSION}.
 @end ifnottex
 
 @c ------------------------------------------------------------------------
 
 @menu
-* Preface::                     
+* Preface::
 * Introduction::                A brief introduction to Octave.
-* Getting Started::             
-* Data Types::                  
-* Numeric Data Types::          
-* Strings::                     
-* Data Containers::             
-* Variables::                   
-* Expressions::                 
-* Evaluation::                  
+* Getting Started::
+* Data Types::
+* Numeric Data Types::
+* Strings::
+* Data Containers::
+* Variables::
+* Expressions::
+* Evaluation::
 * Statements::                  Looping and program flow control.
-* Functions and Scripts::       
-* Errors and Warnings::              
+* Functions and Scripts::
+* Errors and Warnings::
 * Debugging::
-* Input and Output::            
-* Plotting::                    
-* Matrix Manipulation::         
-* Arithmetic::                  
+* Input and Output::
+* Plotting::
+* Matrix Manipulation::
+* Arithmetic::
 * Linear Algebra::
 * Vectorization and Faster Code Execution::
 * Nonlinear Equations::
 * Diagonal and Permutation Matrices::
 * Sparse Matrices::
-* Numerical Integration::                  
-* Differential Equations::      
-* Optimization::                
-* Statistics::                  
-* Sets::                        
-* Polynomial Manipulations::    
+* Numerical Integration::
+* Differential Equations::
+* Optimization::
+* Statistics::
+* Sets::
+* Polynomial Manipulations::
 * Interpolation::
 * Geometry::
-* Signal Processing::           
-* Image Processing::            
-* Audio Processing::            
-* Object Oriented Programming::            
-* GUI Development::            
-* System Utilities::            
+* Signal Processing::
+* Image Processing::
+* Audio Processing::
+* Object Oriented Programming::
+* GUI Development::
+* System Utilities::
 * Java Interface:: 
 * Packages:: 
 * External Code Interface::
 * Test and Demo Functions::
-* Tips and Standards::                        
+* Tips and Standards::
 * Contributing Guidelines::
 * Obsolete Functions::
 * Trouble::                     If you have trouble installing Octave.
 * Installation::                How to configure, compile and install Octave.
-* Emacs Octave Support::                       
-* Grammar and Parser::                     
+* Emacs Octave Support::
+* Grammar and Parser::
 * Copying::                     The GNU General Public License.
 * Concept Index::               An item for each concept.
 * Function Index::              An item for each documented function.
 * Operator Index::              An item for each documented operator.
 
 @detailmenu
  --- The Detailed Node Listing ---
 
diff --git a/doc/interpreter/oop.txi b/doc/interpreter/oop.txi
--- a/doc/interpreter/oop.txi
+++ b/doc/interpreter/oop.txi
@@ -89,19 +89,17 @@ the @@polynomial directory.
 
 The constructor of the class, must have the name of the class itself
 and so in our example the constructor with have the name
 @file{@@polynomial/polynomial.m}.  Also ideally when the constructor is
 called with no arguments to should return a value object.  So for example
 our polynomial might look like
 
 @example
-@group
 @EXAMPLEFILE(@polynomial/polynomial.m)
-@end group
 @end example
 
 Note that the return value of the constructor must be the output of
 the @code{class} function called with the first argument being a
 structure and the second argument being the class name.  An example of
 the call to this constructor function is then
 
 @example
@@ -172,47 +170,41 @@ that is not terminated with a semicolon.
 then Octave will printed nothing when displaying the contents of a class.
 
 @DOCSTRING(display)
 
 @noindent
 An example of a display method for the polynomial class might be
 
 @example
-@group
 @EXAMPLEFILE(@polynomial/display.m)
-@end group
 @end example
 
 @noindent
 Note that in the display method, it makes sense to start the method
 with the line @code{fprintf ("%s =", inputname (1))} to be consistent
 with the rest of Octave and print the variable name to be displayed
 when displaying the class. 
 
 To be consistent with the Octave graphic handle classes, a class
 should also define the @code{get} and @code{set} methods.  The
 @code{get} method should accept one or two arguments, and given one
 argument of the appropriate class it should return a structure with
 all of the properties of the class.  For example:
 
 @example
-@group
 @EXAMPLEFILE(@polynomial/get.m)
-@end group
 @end example
 
 @noindent
 Similarly, the @code{set} method should taken as its first argument an
 object to modify, and then take property/value pairs to be modified. 
 
 @example
-@group
 @EXAMPLEFILE(@polynomial/set.m)
-@end group
 @end example
 
 @noindent
 Note that as Octave does not implement pass by reference, than the
 modified object is the return value of the @code{set} method and it
 must be called like
 
 @example
@@ -277,19 +269,17 @@ determined by the @code{subsref} method.
 @DOCSTRING(subsref)
 
 For example we might decide that indexing with @qcode{"()"} evaluates the
 polynomial and indexing with @qcode{"@{@}"} returns the @var{n}-th coefficient
 (of @var{n}-th power).  In this case the @code{subsref} method of our
 polynomial class might look like
 
 @example
-@group
 @EXAMPLEFILE(@polynomial/subsref.m)
-@end group
 @end example
 
 The equivalent functionality for subscripted assignments uses the 
 @code{subsasgn} method.
 
 @DOCSTRING(subsasgn)
 
 @DOCSTRING(optimize_subsasgn_calls)
@@ -642,19 +632,17 @@ 2 * polynomial ([1, 0, 1]);
 @noindent
 That mixes an object of the class @qcode{"double"} with an object of the class
 @qcode{"polynomial"}.  In this case we like to ensure that the return type of
 the above is of the type @qcode{"polynomial"} and so we use the
 @code{superiorto} function in the class constructor.  In particular our
 polynomial class constructor would be modified to be
 
 @example
-@group
 @EXAMPLEFILE(@polynomial/polynomial_superiorto.m)
-@end group
 @end example
 
 Note that user classes always have higher precedence than built-in
 Octave types.  So in fact marking our polynomial class higher than the 
 @qcode{"double"} class is in fact not necessary.
 
 When faced with two objects that have the same precedence, Octave will use the
 method of the object that appears first on the list of arguments.
@@ -687,19 +675,17 @@ octave:3> y = filter (n, 1, x);
 @end group
 @end example
 
 The equivalent class could be implemented in a class directory
 @@FIRfilter that is on the octave path.  The constructor is a file
 FIRfilter.m in the class directory.
 
 @example
-@group
 @EXAMPLEFILE(@FIRfilter/FIRfilter.m)
-@end group
 @end example
 
 As before, the leading comments provide command-line documentation for
 the class constructor.  This constructor is very similar to the
 polynomial class constructor, except that we pass a polynomial object
 as the third argument to the class function, telling octave that the
 FIRfilter class will be derived from the polynomial class.  Our FIR
 filter does not have any data fields, but we must provide a struct to
@@ -753,19 +739,17 @@ polynomial = 0.333333 + 0.333333 * X + 0
 
 We only need to define a method to actually process data with our
 filter and our class is usable.  It is also useful to provide a means
 of changing the data stored in the class.  Since the fields in the
 underlying struct are private by default, we could provide a mechanism
 to access the fields.  The @code{subsref} method may be used for both.
 
 @example
-@group
 @EXAMPLEFILE(@FIRfilter/subsref.m)
-@end group
 @end example
 
 The @qcode{"()"} case allows us to filter data using the polynomial provided
 to the constructor.
 
 @example
 @group
 octave:2> f = FIRfilter (polynomial ([1 1 1]/3));
@@ -814,14 +798,12 @@ f.polynomial = 1 + 2 * X + 3 * X ^ 2
 Defining the FIRfilter class as a child of the polynomial class
 implies that and FIRfilter object may be used any place that a
 polynomial may be used.  This is not a normal use of a filter, so that
 aggregation may be a more sensible design approach.  In this case, the
 polynomial is simply a field in the class structure.  A class
 constructor for this case might be
 
 @example
-@group
 @EXAMPLEFILE(@FIRfilter/FIRfilter_aggregation.m)
-@end group
 @end example
 
 For our example, the remaining class methods remain unchanged.
diff --git a/doc/interpreter/tips.txi b/doc/interpreter/tips.txi
--- a/doc/interpreter/tips.txi
+++ b/doc/interpreter/tips.txi
@@ -557,24 +557,25 @@ nchoosek (1:3, 2)
 @@code@{nchoosek@} works only for non-negative, integer arguments.  Use
 @@code@{bincoeff@} for non-integer and negative scalar arguments, or for
 computing many binomial coefficients at once with vector inputs
 for @@var@{n@} or @@var@{k@}.
 
 @@seealso@{bincoeff, perms@}
 @@end deftypefn
 @end example
+
 @noindent
 which demonstrates most of the concepts discussed above.
 @iftex
 This documentation string renders as
-
 @c Note: use the actual output of info below, rather than try and 
 @c reproduce it here to prevent it looking different from how it would
 @c appear with info.
+
 @example
  -- Function File: C = nchoosek (N, K)
  -- Function File: C = nchoosek (SET, K)
      Compute the binomial coefficient or all combinations of a set of
      items.
 
      If N is a scalar then calculate the binomial coefficient of N and
      K which is defined as
diff --git a/examples/mysparse.c b/examples/mysparse.c
--- a/examples/mysparse.c
+++ b/examples/mysparse.c
@@ -6,24 +6,24 @@ mexFunction (int nlhs, mxArray *plhs[],
 {
   mwSize m, n, nz;
   mxArray *v;
   mwIndex i;
   double *pr, *pi;
   double *pr2, *pi2;
   mwIndex *ir, *jc;
   mwIndex *ir2, *jc2;
-  
+
   if (nrhs != 1 || ! mxIsSparse (prhs[0]))
     mexErrMsgTxt ("ARG1 must be a sparse matrix");
 
   m = mxGetM (prhs[0]);
   n = mxGetN (prhs[0]);
   nz = mxGetNzmax (prhs[0]);
-  
+
   if (mxIsComplex (prhs[0]))
     {
       mexPrintf ("Matrix is %d-by-%d complex sparse matrix", m, n);
       mexPrintf (" with %d elements\n", nz);
 
       pr = mxGetPr (prhs[0]);
       pi = mxGetPi (prhs[0]);
       ir = mxGetIr (prhs[0]);
@@ -35,17 +35,17 @@ mexFunction (int nlhs, mxArray *plhs[],
       mexPrintf ("last non-zero element (%d, %d) = (%g, %g)\n",
                  ir[nz-1]+ 1, i, pr[nz-1], pi[nz-1]);
 
       v = mxCreateSparse (m, n, nz, mxCOMPLEX);
       pr2 = mxGetPr (v);
       pi2 = mxGetPi (v);
       ir2 = mxGetIr (v);
       jc2 = mxGetJc (v);
-      
+
       for (i = 0; i < nz; i++)
         {
           pr2[i] = 2 * pr[i];
           pi2[i] = 2 * pi[i];
           ir2[i] = ir[i];
         }
       for (i = 0; i < n + 1; i++)
         jc2[i] = jc[i];
@@ -67,17 +67,17 @@ mexFunction (int nlhs, mxArray *plhs[],
       while (jc[i] == jc[i-1] && i != 0) i--;
       mexPrintf ("last non-zero element (%d, %d) = %d\n",
                  ir[nz-1]+ 1, i, pbr[nz-1]);
 
       v = mxCreateSparseLogicalMatrix (m, n, nz);
       pbr2 = mxGetLogicals (v);
       ir2 = mxGetIr (v);
       jc2 = mxGetJc (v);
-      
+
       for (i = 0; i < nz; i++)
         {
           pbr2[i] = pbr[i];
           ir2[i] = ir[i];
         }
       for (i = 0; i < n + 1; i++)
         jc2[i] = jc[i];
 
@@ -97,17 +97,17 @@ mexFunction (int nlhs, mxArray *plhs[],
       while (jc[i] == jc[i-1] && i != 0) i--;
       mexPrintf ("last non-zero element (%d, %d) = %g\n",
                  ir[nz-1]+ 1, i, pr[nz-1]);
 
       v = mxCreateSparse (m, n, nz, mxREAL);
       pr2 = mxGetPr (v);
       ir2 = mxGetIr (v);
       jc2 = mxGetJc (v);
-      
+
       for (i = 0; i < nz; i++)
         {
           pr2[i] = 2 * pr[i];
           ir2[i] = ir[i];
         }
       for (i = 0; i < n + 1; i++)
         jc2[i] = jc[i];
 
diff --git a/scripts/miscellaneous/compare_versions.m b/scripts/miscellaneous/compare_versions.m
--- a/scripts/miscellaneous/compare_versions.m
+++ b/scripts/miscellaneous/compare_versions.m
@@ -17,61 +17,61 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} compare_versions (@var{v1}, @var{v2}, @var{operator})
 ## Compare two version strings using the given @var{operator}.
 ##
 ## This function assumes that versions @var{v1} and @var{v2} are
 ## arbitrarily long strings made of numeric and period characters
-## possibly followed by an arbitrary string (e.g., "1.2.3", "0.3",
-## "0.1.2+", or "1.2.3.4-test1").
+## possibly followed by an arbitrary string (e.g., @qcode{"1.2.3"},
+## @qcode{"0.3"}, @qcode{"0.1.2+"}, or @qcode{"1.2.3.4-test1"}).
 ##
 ## The version is first split into numeric and character portions
-## and then the parts are padded to be the same length (i.e., "1.1" would be
-## padded to be "1.1.0" when being compared with "1.1.1", and
-## separately, the character parts of the strings are padded with
-## nulls).
+## and then the parts are padded to be the same length (i.e., @qcode{"1.1"}
+## would be padded to be @qcode{"1.1.0"} when being compared with
+## @qcode{"1.1.1"}, and separately, the character parts of the strings are
+## padded with nulls).
 ##
 ## The operator can be any logical operator from the set
 ##
 ## @itemize @bullet
 ## @item
-## "=="
+## @qcode{"=="}
 ## equal
 ##
 ## @item
-## "<"
+## @qcode{"<"}
 ## less than
 ##
 ## @item
-## "<="
+## @qcode{"<="}
 ## less than or equal to
 ##
 ## @item
-## ">"
+## @qcode{">"}
 ## greater than
 ##
 ## @item
-## ">="
+## @qcode{">="}
 ## greater than or equal to
 ##
 ## @item
-## "!="
+## @qcode{"!="}
 ## not equal
 ##
 ## @item
-## "~="
+## @qcode{"~="}
 ## not equal
 ## @end itemize
 ##
-## Note that version "1.1-test2" will compare as greater than
-## "1.1-test10".  Also, since the numeric part is compared first, "a"
-## compares less than "1a" because the second string starts with a
-## numeric part even though @code{double ("a")} is greater than
+## Note that version @qcode{"1.1-test2"} will compare as greater than
+## @qcode{"1.1-test10"}.  Also, since the numeric part is compared first,
+## @qcode{"a"} compares less than @qcode{"1a"} because the second string
+## starts with a numeric part even though @code{double ("a")} is greater than
 ## @code{double ("1").}
 ## @end deftypefn
 
 ## Author: Bill Denney <denney@seas.upenn.edu>
 
 function out = compare_versions (v1, v2, operator)
 
   if (nargin != 3)
diff --git a/scripts/plot/gnuplot_binary.in b/scripts/plot/gnuplot_binary.in
--- a/scripts/plot/gnuplot_binary.in
+++ b/scripts/plot/gnuplot_binary.in
@@ -17,17 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Loadable Function} {[@var{prog}, @var{args}] =} gnuplot_binary ()
 ## @deftypefnx {Loadable Function} {[@var{old_prog}, @var{old_args}] =} gnuplot_binary (@var{new_prog}, @var{arg1}, @dots{})
 ## Query or set the name of the program invoked by the plot command
 ## when the graphics toolkit is set to "gnuplot".  Additional arguments to
 ## pass to the external plotting program may also be given.
-## The default value is @code{"gnuplot"} with no additional arguments.
+## The default value is @qcode{"gnuplot"} with no additional arguments.
 ## @xref{Installation}.
 ## @seealso{graphics_toolkit}
 ## @end deftypefn
 
 ## Author: jwe
 
 function [prog, args] = gnuplot_binary (new_prog, varargin)
 
diff --git a/scripts/statistics/tests/kruskal_wallis_test.m b/scripts/statistics/tests/kruskal_wallis_test.m
--- a/scripts/statistics/tests/kruskal_wallis_test.m
+++ b/scripts/statistics/tests/kruskal_wallis_test.m
@@ -31,19 +31,20 @@
 ## If the data contains ties (some value appears more than once)
 ## @var{k} is divided by
 ##
 ## 1 - @var{sum_ties} / (@var{n}^3 - @var{n})
 ##
 ## where @var{sum_ties} is the sum of @var{t}^2 - @var{t} over each group
 ## of ties where @var{t} is the number of ties in the group and @var{n}
 ## is the total number of values in the input data.  For more info on
-## this adjustment see "Use of Ranks in One-Criterion Variance Analysis"
-## in Journal of the American Statistical Association, Vol. 47,
-## No. 260 (Dec 1952) by William H. Kruskal and W. Allen Wallis.
+## this adjustment see William H. Kruskal and W. Allen Wallis,
+## @cite{Use of Ranks in One-Criterion Variance Analysis}, 
+## Journal of the American Statistical Association, Vol. 47,
+## No. 260 (Dec 1952).
 ##
 ## The p-value (1 minus the CDF of this distribution at @var{k}) is
 ## returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value is displayed.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
