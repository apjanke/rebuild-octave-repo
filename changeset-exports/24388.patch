# HG changeset patch
# User Rik <rik@octave.org>
# Date 1512697025 28800
#      Thu Dec 07 17:37:05 2017 -0800
# Node ID 206ef5cb8b1605cc76c5d52e52d9d9f0ac5b45a1
# Parent  268d31e7aa4f96c77a3ef1369b7bd48c168fc02e
Add titles to most plot demos.

* annotation.m, axis.m, camlookat.m, camorbit.m, campos.m, camroll.m,
camtarget.m, camup.m, camva.m, camzoom.m, grid.m, isocaps.m, isosurface.m,
pareto.m, plotmatrix.m, plotyy.m, shrinkfaces.m, slice.m, trimesh.m, triplot.m,
trisurf.m, axes.m, zoom.m: Add titles to demos.

diff --git a/scripts/plot/appearance/annotation.m b/scripts/plot/appearance/annotation.m
--- a/scripts/plot/appearance/annotation.m
+++ b/scripts/plot/appearance/annotation.m
@@ -1455,16 +1455,17 @@ endfunction
 %!   annotation ("doublearrow", [(x0(ii) - .05) (x0(ii) + .05)], ...
 %!               [y0(ii) y0(ii)], "head1style", "vback3", ...
 %!               "head2style", "vback3", ...
 %!               "head1width", 4, "head2width", 4)
 %!   h = annotation ("textarrow", [0.5 x0(ii)], [.85 y0(ii)], ...
 %!                   "linestyle", "--", "headstyle", "none");
 %! endfor
 %! set (h, "string", "Extrema", "fontsize", 15);
+%! title ("annotation() demo of TextArrows");
 
 ## test line properties
 %!test
 %! hf = figure ("visible", "off");
 %! hax = axes ();
 %! unwind_protect
 %!   h = annotation ("line", [0.2 0.7], [0.2 0.7], "linewidth", 2,
 %!                   "linestyle", "--", "color", "r");
diff --git a/scripts/plot/appearance/axis.m b/scripts/plot/appearance/axis.m
--- a/scripts/plot/appearance/axis.m
+++ b/scripts/plot/appearance/axis.m
@@ -577,82 +577,23 @@ endfunction
 %! [x,y,z] = peaks (50);
 %! x1 = max (x(:));
 %! pcolor (x-x1, y-x1/2, z);
 %! hold on;
 %! [x,y,z] = sombrero ();
 %! s = x1 / max (x(:));
 %! pcolor (s*x+x1, s*y+x1/2, 5*z);
 %! axis tight;
+%! title ('"tight" when two axes objects exist');
 
 %!demo
 %! clf;
 %! loglog (1:20, "-s");
 %! axis tight;
-
-## FIXME: These demos aren't actually of the axis function.
-##        They are demos for an axes object and belong elsewhere.
-%!demo
-%! clf;
-%! x = -10:10;
-%! plot (x,x, x,-x);
-%! set (gca, "yscale", "log");
-%! legend ({"x >= 1", "x <= 1"}, "location", "north");
-%! title ("ylim = [1, 10]");
-
-%!demo
-%! clf;
-%! x = -10:0.1:10;
-%! y = sin (x)./(1 + abs (x)) + 0.1*x - 0.4;
-%! plot (x, y);
-%! set (gca, "xaxislocation", "origin");
-%! set (gca, "yaxislocation", "origin");
-%! box off;
-%! title ({"no plot box", "xaxislocation = origin, yaxislocation = origin"});
-
-%!demo
-%! clf;
-%! x = -10:0.1:10;
-%! y = sin (x)./(1+abs (x)) + 0.1*x - 0.4;
-%! plot (x, y);
-%! set (gca, "xaxislocation", "origin");
-%! set (gca, "yaxislocation", "left");
-%! box off;
-%! title ({"no plot box", "xaxislocation = origin, yaxislocation = left"});
-
-%!demo
-%! clf;
-%! x = -10:0.1:10;
-%! y = sin (x)./(1+abs (x)) + 0.1*x - 0.4;
-%! plot (x, y);
-%! title ("no plot box");
-%! set (gca, "xaxislocation", "origin");
-%! set (gca, "yaxislocation", "right");
-%! box off;
-%! title ({"no plot box", "xaxislocation = origin, yaxislocation = right"});
-
-%!demo
-%! clf;
-%! x = -10:0.1:10;
-%! y = sin (x)./(1+abs (x)) + 0.1*x - 0.4;
-%! plot (x, y);
-%! set (gca, "xaxislocation", "bottom");
-%! set (gca, "yaxislocation", "origin");
-%! box off;
-%! title ({"no plot box", "xaxislocation = bottom, yaxislocation = origin"});
-
-%!demo
-%! clf;
-%! x = -10:0.1:10;
-%! y = sin (x)./(1+abs (x)) + 0.1*x - 0.4;
-%! plot (x, y);
-%! set (gca, "xaxislocation", "top");
-%! set (gca, "yaxislocation", "origin");
-%! box off;
-%! title ({"no plot box", "xaxislocation = top, yaxislocation = origin"});
+%! title ('"tight" on loglog plot');
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   plot (11:20, [21:24, NaN, -Inf, 27:30]);
 %!   hold on;
 %!   plot (11:20, 25.5 + rand (10));
 %!   axis tight;
diff --git a/scripts/plot/appearance/camlookat.m b/scripts/plot/appearance/camlookat.m
--- a/scripts/plot/appearance/camlookat.m
+++ b/scripts/plot/appearance/camlookat.m
@@ -154,16 +154,17 @@ endfunction
 %! [x, y, z] = peaks ();
 %! surf (x, y, z/5);
 %! hold on
 %! [x, y, z] = sphere ();
 %! s1 = surf (x/2, y/2+1.5, z/2+2);
 %! s2 = surf (x/5+0.2, y/5-2, z/5+1);
 %! axis equal
 %! axis tight
+%! title ("camlookat() demo #1");
 %! pause (1);
 %! camlookat (s1);
 %! pause (1);
 %! camlookat (s2);
 %! pause (1);
 %! camlookat ([s1 s2]);
 
 
diff --git a/scripts/plot/appearance/camorbit.m b/scripts/plot/appearance/camorbit.m
--- a/scripts/plot/appearance/camorbit.m
+++ b/scripts/plot/appearance/camorbit.m
@@ -178,16 +178,17 @@ function camorbit (varargin)
   campos (hax, pos)
 
 endfunction
 
 
 %!demo
 %! clf;
 %! peaks ();
+%! title ("camorbit() demo #1");
 %! ## rotate the camera upwards
 %! camorbit (0, 30);
 %! ## rotate the camera right
 %! camorbit (20, 0);
 
 
 %!test
 %! hf = figure ("visible", "off");
diff --git a/scripts/plot/appearance/campos.m b/scripts/plot/appearance/campos.m
--- a/scripts/plot/appearance/campos.m
+++ b/scripts/plot/appearance/campos.m
@@ -103,20 +103,21 @@ function p = campos (varargin)
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! sphere ();
+%! title ("campos() demo #1");
 %! ## where is camera located?
 %! x1 = campos ()
 %! ## move the camera upwards
-%! campos (x1 + [0 0 2])
+%! campos (x1 + [0 0 2]);
 %! x2 = campos ()
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   hax = axes ("parent", hf);
 %!   sphere (hax);
 %!   x = campos ();
diff --git a/scripts/plot/appearance/camroll.m b/scripts/plot/appearance/camroll.m
--- a/scripts/plot/appearance/camroll.m
+++ b/scripts/plot/appearance/camroll.m
@@ -89,17 +89,18 @@ function camroll (varargin)
   camup (hax, up)
 
 endfunction
 
 
 %!demo
 %! clf;
 %! peaks ();
-%! camroll (30)
+%! camroll (30);
+%! title ("camroll() demo #1");
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   sphere (10);
 %!   campos ([10 0 0]);
 %!   camroll (30);
 %!   p = camup ();
diff --git a/scripts/plot/appearance/camtarget.m b/scripts/plot/appearance/camtarget.m
--- a/scripts/plot/appearance/camtarget.m
+++ b/scripts/plot/appearance/camtarget.m
@@ -113,20 +113,21 @@ function p = camtarget (varargin)
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! sphere ();
+%! title ("camtarget() demo #1");
 %! ## where is camera pointing?
 %! x1 = camtarget ()
 %! ## point the camera upwards
-%! camtarget (x1 + [0 0 1])
+%! camtarget (x1 + [0 0 1]);
 %! x2 = camtarget ()
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   sphere ();
 %!   x = camtarget ();
 %!   camtarget ([1 2 3]);
@@ -177,12 +178,12 @@ endfunction
 %!   delete (hf);
 %! end_unwind_protect
 
 ## Test input validation
 %!error <Invalid> camtarget (1, 2)
 %!error <invalid value>
 %! hf = figure ("visible", "off");
 %! unwind_protect
-%!  camtarget ("mod")
+%!  camtarget ("mod");
 %! unwind_protect_cleanup
 %!   delete (hf);
 %! end_unwind_protect
diff --git a/scripts/plot/appearance/camup.m b/scripts/plot/appearance/camup.m
--- a/scripts/plot/appearance/camup.m
+++ b/scripts/plot/appearance/camup.m
@@ -108,20 +108,21 @@ function p = camup (varargin)
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! sphere ();
+%! title ("camup() demo #1");
 %! ## what direction is "up" for the camera?
 %! x1 = camup ()
 %! ## re-orient the camera with a new up-vector
-%! camup ([1 0 0])
+%! camup ([1 0 0]);
 %! x2 = camup ()
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   sphere ();
 %!   x = camup ();
 %!   camup ([1 2 3]);
diff --git a/scripts/plot/appearance/camva.m b/scripts/plot/appearance/camva.m
--- a/scripts/plot/appearance/camva.m
+++ b/scripts/plot/appearance/camva.m
@@ -95,20 +95,21 @@ function p = camva (varargin)
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! peaks ();
+%! title ("camva() demo #1");
 %! ## query the viewing angle
 %! a1 = camva ()
 %! ## get a close-up view by decreasing the viewing angle:
-%! camva (0.5*a1)
+%! camva (0.5*a1);
 %! a2 = camva ()
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   sphere ();
 %!   x = camva ();
 %!   camva (5);
diff --git a/scripts/plot/appearance/camzoom.m b/scripts/plot/appearance/camzoom.m
--- a/scripts/plot/appearance/camzoom.m
+++ b/scripts/plot/appearance/camzoom.m
@@ -79,16 +79,17 @@ function camzoom (varargin)
 
 endfunction
 
 
 %!demo
 %! clf;
 %! peaks ();
 %! camzoom (2);
+%! title ("camzoom() demo #1");
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   sphere ();
 %!   x = camva ();
 %!   camzoom (5);
 %!   assert (tand (x/2) / tand (camva ()/2), 5);
diff --git a/scripts/plot/appearance/grid.m b/scripts/plot/appearance/grid.m
--- a/scripts/plot/appearance/grid.m
+++ b/scripts/plot/appearance/grid.m
@@ -170,20 +170,24 @@ endfunction
 
 %!demo
 %! ## Display minor grid lines at major ticks
 %! clf;
 %! subplot (1,2,1)
 %!  plot (1:10);
 %!  set (gca, "xminorgrid", "on");
 %!  set (gca, "yminorgrid", "on");
+%!  title ({"major grid disabled",
+%!          "minor grid displayed at major ticks"}); 
 %! subplot (1,2,2)
 %!  semilogy (1:100);
 %!  set (gca, "xminorgrid", "on");
 %!  set (gca, "yminorgrid", "on");
+%!  title ({"major grid disabled",
+%!          "minor grid displayed at major ticks"}); 
 
 %!demo
 %! clf;
 %! plot3 (1:10, 1:10, 1:10);
 %! set (gca, "xtick", [0, pi/2, 4.7, 8, 10]);
 %! set (gca, "ytick", [0, 1, pi, 7.3, 10]);
 %! set (gca, "ztick", [0, exp(1), 5, 9.1, 10]);
 %! set (gca, "xminorgrid", "on");
diff --git a/scripts/plot/draw/isocaps.m b/scripts/plot/draw/isocaps.m
--- a/scripts/plot/draw/isocaps.m
+++ b/scripts/plot/draw/isocaps.m
@@ -414,17 +414,21 @@ endfunction
 %! subplot (2, 2, 3);
 %!  isocaps (xx, yy, zz, v, isoval);
 %!  view (3);
 %! ## five arguments, no output (mixed x, y, z)
 %! subplot (2, 2, 4);
 %!  isocaps (x, yy, z, v, isoval);
 %!  view (3);
 %!
-%! annotation ("textbox", [0.1 0.9 0.9 0.1], ...
+%! annotation ("textbox", [0.41 0.9 0.9 0.1], ...
+%!     "String", "isocaps() called 4 ways", ...
+%!     "HorizontalAlignment", "center", ...
+%!     "FontSize", 12);
+%! annotation ("textbox", [0.1 0.47 0.9 0.1], ...
 %!     "String", ["Apart from the first plot having a different scale, " ...
 %!     "all four plots must look the same."], ...
 %!     "HorizontalAlignment", "left", ...
 %!     "FontSize", 12);
 
 %!shared x, y, z, xx, yy, zz, val, iso
 %! x = 1:3:22;  y = -14:5:11;  z = linspace (16, 18, 4);
 %! [xx, yy, zz] = meshgrid (x, y, z);
diff --git a/scripts/plot/draw/isosurface.m b/scripts/plot/draw/isosurface.m
--- a/scripts/plot/draw/isosurface.m
+++ b/scripts/plot/draw/isosurface.m
@@ -373,17 +373,17 @@ endfunction
 
 %!demo
 %! clf;
 %! [x,y,z] = meshgrid (-2:0.5:2, -2:0.5:2, -2:0.5:2);
 %! v = x.^2 + y.^2 + z.^2;
 %! isosurface (x, y, z, v, 3);
 %! isosurface (x, y, z, v, 5);
 %! axis equal;
-%! title ("isosurfaces of two nested spheres");
+%! title ("isosurface() of two nested spheres");
 
 %!demo
 %! clf;
 %! x = 0:2;
 %! y = 0:3;
 %! z = 0:1;
 %! [xx, yy, zz] = meshgrid (x, y, z);
 %! v        = [0, 0, 0; 0, 0, 0; 0, 0, 1; 0, 0, 1];
@@ -409,17 +409,21 @@ endfunction
 %!  shading faceted;
 %!  view (110, 40);
 %! ## six arguments, no output (mixed x, y, z) and option "noshare"
 %! subplot (2, 2, 4);
 %!  fvc = isosurface (x, yy, z, v, iso, yy, "noshare");
 %!  patch (fvc);
 %!  shading faceted;
 %!  view (110, 40);
-%!  annotation ("textbox", [0.1 0.9 0.9 0.1], ...
+%!  annotation ("textbox", [0.41 0.9 0.9 0.1], ...
+%!      "String", "isosurface() called 4 ways", ...
+%!      "HorizontalAlignment", "center", ...
+%!      "FontSize", 12);
+%!  annotation ("textbox", [0.1 0.45 0.9 0.1], ...
 %!      "String", {["Apart from the first plot having a different scale, " ...
 %!                  "all four plots must look the same."],
 %!                 ["The last plot might have different colors but must " ...
 %!                  "have the same shape."]}, ...
 %!      "HorizontalAlignment", "left", ...
 %!      "FontSize", 12);
 
 %!shared x, y, z, xx, yy, zz, val, iso
diff --git a/scripts/plot/draw/pareto.m b/scripts/plot/draw/pareto.m
--- a/scripts/plot/draw/pareto.m
+++ b/scripts/plot/draw/pareto.m
@@ -117,17 +117,19 @@ endfunction
 
 
 %!demo
 %! clf;
 %! colormap (jet (64));
 %! Cheese = {"Cheddar", "Swiss", "Camembert", "Munster", "Stilton", "Blue"};
 %! Sold = [105, 30, 70, 10, 15, 20];
 %! pareto (Sold, Cheese);
+%! title ("pareto() demo #1");
 
 %!demo
 %! clf;
 %! ## Suppose that we want establish which products makes 80% of turnover.
 %! Codes = {"AB4","BD7","CF8","CC5","AD11","BB5","BB3","AD8","DF3","DE7"};
 %! Value = [2.35 7.9 2.45 1.1 0.15 13.45 5.4 2.05 0.85 1.65]';
 %! SoldUnits = [54723 41114 16939 1576091 168000 687197 120222 168195, ...
 %!              1084118 55576]';
 %! pareto (Value.*SoldUnits, Codes);
+%! title ("pareto() demo #2");
diff --git a/scripts/plot/draw/plotmatrix.m b/scripts/plot/draw/plotmatrix.m
--- a/scripts/plot/draw/plotmatrix.m
+++ b/scripts/plot/draw/plotmatrix.m
@@ -106,16 +106,17 @@ function [h, ax, bigax, p, pax] = plotma
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! plotmatrix (randn (100, 3), "g+");
+%! title ("plotmatrix() demo #1");
 
 
 function plotmatrixdelete (h, d, ax)
 
   for i = 1 : numel (ax)
     hc = ax(i);
     if (isaxes (hc) && strcmpi (get (hc, "beingdeleted"), "off"))
       parent = get (hc, "parent");
diff --git a/scripts/plot/draw/plotyy.m b/scripts/plot/draw/plotyy.m
--- a/scripts/plot/draw/plotyy.m
+++ b/scripts/plot/draw/plotyy.m
@@ -300,15 +300,17 @@ endfunction
 %! title ({"plotyy() example"; "left axis uses @plot, right axis uses @semilogy"});
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! x = linspace (-1, 1, 201);
 %! subplot (2,2,1);
 %!  plotyy (x,sin(pi*x), x,10*cos(pi*x));
+%!  title ("plotyy() in subplot");
 %! subplot (2,2,2);
 %!  surf (peaks (25));
 %! subplot (2,2,3);
 %!  contour (peaks (25));
 %! subplot (2,2,4);
 %!  plotyy (x,10*sin(2*pi*x), x,cos(2*pi*x));
+%!  title ("plotyy() in subplot");
 %!  axis square;
diff --git a/scripts/plot/draw/shrinkfaces.m b/scripts/plot/draw/shrinkfaces.m
--- a/scripts/plot/draw/shrinkfaces.m
+++ b/scripts/plot/draw/shrinkfaces.m
@@ -155,66 +155,70 @@ endfunction
 %! clf;
 %! faces = [1 2 3; 1 3 4];
 %! vertices = [0 0; 1 0; 1 1; 0 1];
 %! patch ("Faces", faces, "Vertices", vertices, "FaceColor", "none");
 %! fv = shrinkfaces (faces, vertices, 0.25);
 %! patch (fv);
 %! axis auto;   # Kludge required for Octave
 %! axis equal;
+%! title ("shrinkfaces() on triangular shapes");
 
 %!demo
 %! clf;
 %! faces = [1 2 3 4; 5 6 7 8];
 %! vertices = [0 0; 1 0; 2 1; 1 1; 2 0; 3 0; 4 1; 3.5 1];
 %! patch ("Faces", faces, "Vertices", vertices, "FaceColor", "none");
 %! fv = shrinkfaces (faces, vertices, 0.25);
 %! patch (fv);
 %! axis auto;   # Kludge required for Octave
 %! axis equal;
 %! grid on;
+%! title ("shrinkfaces() on rhomboid shapes");
 
 %!demo
 %! clf;
 %! faces = [1 2 3 4];
 %! vertices = [-1 2; 0 0; 1 2; 0 1];
 %! patch ("Faces", faces, "Vertices", vertices, "FaceColor", "none");
 %! fv = shrinkfaces (faces, vertices, 0.25);
 %! patch (fv);
 %! axis auto;   # Kludge required for Octave
 %! axis equal;
 %! grid on;
-%! title "faces which are not convex are clearly not allowed"
+%! title ("shrinkfaces() does not work on concave shapes");
 
 %!demo
 %! clf;
 %! [phi r] = meshgrid (linspace (0, 1.5*pi, 16), linspace (1, 2, 4));
 %! tri = delaunay (phi(:), r(:));
 %! v = [r(:).*sin(phi(:)) r(:).*cos(phi(:))];
 %! p = patch ("Faces", tri, "Vertices", v, "FaceColor", "none");
 %! fv = shrinkfaces (p);
 %! patch (fv);
 %! axis auto;   # Kludge required for Octave
 %! axis equal;
 %! grid on;
+%! title ("shrinkfaces() on 2-D complex shapes tesselated with triangles");
 
 %!demo
 %! clf;
 %! N = 10;  # N intervals per axis
 %! [x, y, z] = meshgrid (linspace (-4,4,N+1));
 %! val = x.^3 + y.^3 + z.^3;
 %! fv = isosurface (x, y, z, val, 3, z, "noshare");
 %!
 %! p = patch ("Faces", fv.faces, "Vertices", fv.vertices, "FaceVertexCData", ...
 %!            fv.facevertexcdata, "FaceColor", "interp", "EdgeColor", "black");
 %! axis auto;   # Kludge required for Octave
 %! axis equal;
 %! view (115, 30);
 %! drawnow;
 %! shrinkfaces (p, 0.6);
+%! title ("shrinkfaces() on 3-D complex shapes");
 
 %!shared faces, vertices, nfv, nfv2
 %! faces = [1 2 3];
 %! vertices = [0 0 0; 1 0 0; 1 1 0];
 %! nfv = shrinkfaces (faces, vertices, 0.7);
 %! nfv2 = shrinkfaces (nfv, 1/0.7);
 %!assert (isfield (nfv, "faces"))
 %!assert (isfield (nfv, "vertices"))
diff --git a/scripts/plot/draw/slice.m b/scripts/plot/draw/slice.m
--- a/scripts/plot/draw/slice.m
+++ b/scripts/plot/draw/slice.m
@@ -202,17 +202,19 @@ endfunction
 
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! [x, y, z] = meshgrid (linspace (-8, 8, 32));
 %! v = sin (sqrt (x.^2 + y.^2 + z.^2)) ./ (sqrt (x.^2 + y.^2 + z.^2));
 %! slice (x, y, z, v, [], 0, []);
+%! title ("slice() demo #1");
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! [x, y, z] = meshgrid (linspace (-8, 8, 32));
 %! v = sin (sqrt (x.^2 + y.^2 + z.^2)) ./ (sqrt (x.^2 + y.^2 + z.^2));
 %! [xi, yi] = meshgrid (linspace (-7, 7));
 %! zi = xi + yi;
 %! slice (x, y, z, v, xi, yi, zi);
+%! title ("slice() demo #2");
diff --git a/scripts/plot/draw/trimesh.m b/scripts/plot/draw/trimesh.m
--- a/scripts/plot/draw/trimesh.m
+++ b/scripts/plot/draw/trimesh.m
@@ -106,16 +106,17 @@ endfunction
 %! restore_state = onCleanup (@() rand ("state", old_state));
 %! rand ("state", 10);
 %! N = 10;
 %! x = 3 - 6 * rand (N, N);
 %! y = 3 - 6 * rand (N, N);
 %! z = peaks (x, y);
 %! tri = delaunay (x(:), y(:));
 %! trimesh (tri, x(:), y(:), z(:));
+%! title ("trimesh() plot of sparsely-sampled peaks() function");
 
 ## Test input validation
 %!error trimesh ()
 %!error trimesh (1)
 %!error trimesh (1,2)
 %!error <the numbers of colors> trimesh (1,2,3,4,[5 6])
 %!error <the numbers of colors> trimesh (1,2,3,4,[5 6]')
 %!error <the numbers of colors> trimesh ([1;1],[2;2],[3;3],[4;4], zeros (3,3))
diff --git a/scripts/plot/draw/triplot.m b/scripts/plot/draw/triplot.m
--- a/scripts/plot/draw/triplot.m
+++ b/scripts/plot/draw/triplot.m
@@ -58,8 +58,9 @@ endfunction
 %! old_state = rand ("state");
 %! restore_state = onCleanup (@() rand ("state", old_state));
 %! rand ("state", 2);
 %! N = 20;
 %! x = rand (N, 1);
 %! y = rand (N, 1);
 %! tri = delaunay (x, y);
 %! triplot (tri, x, y);
+%! title ("triplot() of random 2-D Delaunay triangulation");
diff --git a/scripts/plot/draw/trisurf.m b/scripts/plot/draw/trisurf.m
--- a/scripts/plot/draw/trisurf.m
+++ b/scripts/plot/draw/trisurf.m
@@ -96,74 +96,76 @@ endfunction
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! N = 31;
 %! [x, y] = meshgrid (1:N);
 %! tri = delaunay (x(:), y(:));
 %! z = peaks (N);
-%! h = trisurf (tri, x, y, z, "facecolor", "interp");
+%! h = trisurf (tri, x, y, z, "facecolor", "flat");
 %! axis tight;
 %! zlim auto;
-%! title (sprintf ("facecolor = %s", get (h, "facecolor")));
+%! title ({"trisurf() of peaks() function", 'facecolor = "flat"'});
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! N = 31;
 %! [x, y] = meshgrid (1:N);
 %! tri = delaunay (x(:), y(:));
 %! z = peaks (N);
-%! h = trisurf (tri, x, y, z, "facecolor", "flat");
+%! h = trisurf (tri, x, y, z, "facecolor", "interp");
 %! axis tight;
 %! zlim auto;
-%! title (sprintf ("facecolor = %s", get (h, "facecolor")));
-
-## FIXME: The demos below should each have a title
+%! title ({"trisurf() of peaks() function", 'facecolor = "interp"'});
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! old_state = rand ("state");
 %! restore_state = onCleanup (@() rand ("state", old_state));
 %! rand ("state", 10);
 %! N = 10;
 %! x = 3 - 6 * rand (N, N);
 %! y = 3 - 6 * rand (N, N);
 %! z = peaks (x, y);
 %! tri = delaunay (x(:), y(:));
 %! trisurf (tri, x(:), y(:), z(:));
+%! title ("trisurf() of sparsely-sampled triangulation of peaks()");
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! x = rand (100, 1);
 %! y = rand (100, 1);
 %! z = x.^2 + y.^2;
 %! tri = delaunay (x, y);
 %! trisurf (tri, x, y, z);
+%! title ({"trisurf() of random data", 'default "facecolor" = "flat", "edgecolor" = "black"'});
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! x = rand (100, 1);
 %! y = rand (100, 1);
 %! z = x.^2 + y.^2;
 %! tri = delaunay (x, y);
 %! trisurf (tri, x, y, z, "facecolor", "interp");
+%! title ({"trisurf() of random data", '"facecolor" = "interp"'});
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! x = rand (100, 1);
 %! y = rand (100, 1);
 %! z = x.^2 + y.^2;
 %! tri = delaunay (x, y);
-%! trisurf (tri, x, y, z, "facecolor", "interp", "edgecolor", "k");
+%! trisurf (tri, x, y, z, "facecolor", "interp", "edgecolor", "w");
+%! title ({"trisurf() of random data", '"facecolor" = "interp", "edgecolor" = "white"'});
 
 ## Test input validation
 %!error trisurf ()
 %!error trisurf (1)
 %!error trisurf (1,2)
 %!error trisurf (1,2,3)
 %!error <the numbers of colors> trisurf (1,2,3,4,[5 6])
 %!error <the numbers of colors> trisurf (1,2,3,4,[5 6]')
diff --git a/scripts/plot/util/axes.m b/scripts/plot/util/axes.m
--- a/scripts/plot/util/axes.m
+++ b/scripts/plot/util/axes.m
@@ -119,16 +119,77 @@ function restack_axes (h, cf)
     set (cf, "children", ch);
   unwind_protect_cleanup
     set (0, "showhiddenhandles", show);
   end_unwind_protect
 
 endfunction
 
 
+## FIXME: These demos actually just show how axes objects behave.
+##        They do not show how the axes() function itself works.
+%!demo
+%! clf;
+%! x = -10:10;
+%! plot (x,x, x,-x);
+%! set (gca, "yscale", "log");
+%! legend ({"x >= 1", "x <= 1"}, "location", "north");
+%! title ({"log axes discard negative data", "ylim = [1, 10]"});
+
+%!demo
+%! clf;
+%! x = -10:0.1:10;
+%! y = sin (x)./(1 + abs (x)) + 0.1*x - 0.4;
+%! plot (x, y);
+%! set (gca, "xaxislocation", "origin");
+%! set (gca, "yaxislocation", "origin");
+%! box off;
+%! title ({"no plot box", "xaxislocation = origin, yaxislocation = origin"});
+
+%!demo
+%! clf;
+%! x = -10:0.1:10;
+%! y = sin (x)./(1+abs (x)) + 0.1*x - 0.4;
+%! plot (x, y);
+%! set (gca, "xaxislocation", "origin");
+%! set (gca, "yaxislocation", "left");
+%! box off;
+%! title ({"no plot box", "xaxislocation = origin, yaxislocation = left"});
+
+%!demo
+%! clf;
+%! x = -10:0.1:10;
+%! y = sin (x)./(1+abs (x)) + 0.1*x - 0.4;
+%! plot (x, y);
+%! title ("no plot box");
+%! set (gca, "xaxislocation", "origin");
+%! set (gca, "yaxislocation", "right");
+%! box off;
+%! title ({"no plot box", "xaxislocation = origin, yaxislocation = right"});
+
+%!demo
+%! clf;
+%! x = -10:0.1:10;
+%! y = sin (x)./(1+abs (x)) + 0.1*x - 0.4;
+%! plot (x, y);
+%! set (gca, "xaxislocation", "bottom");
+%! set (gca, "yaxislocation", "origin");
+%! box off;
+%! title ({"no plot box", "xaxislocation = bottom, yaxislocation = origin"});
+
+%!demo
+%! clf;
+%! x = -10:0.1:10;
+%! y = sin (x)./(1+abs (x)) + 0.1*x - 0.4;
+%! plot (x, y);
+%! set (gca, "xaxislocation", "top");
+%! set (gca, "yaxislocation", "origin");
+%! box off;
+%! title ({"no plot box", "xaxislocation = top, yaxislocation = origin"});
+
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   hax1 = axes ();
 %!   plot (1:10, "b");
 %!   hleg1 = legend ("hax1");
 %!   hax2 = axes ();
 %!   plot (10:-1:1, "r");
diff --git a/scripts/plot/util/zoom.m b/scripts/plot/util/zoom.m
--- a/scripts/plot/util/zoom.m
+++ b/scripts/plot/util/zoom.m
@@ -175,16 +175,17 @@ function update_mouse_mode (hfig, arg)
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! sombrero ();
+%! title ("zoom() demo #1");
 %! pause (1);
 %! ## zoom in by a factor of 2
 %! zoom (2);
 %! pause (1);
 %! ## return to original zoom level
 %! zoom out;
 %! pause (1);
 %! ## zoom in by a factor of 2
