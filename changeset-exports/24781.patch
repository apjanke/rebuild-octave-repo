# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1519222625 18000
#      Wed Feb 21 09:17:05 2018 -0500
# Node ID e6f380f9b2a4b45f7557a0858d337cb288a3a972
# Parent  0d21e2a1cdfc82aeee1fa7d63efc02dbd55e24dd
use template for printing matrices in plus format

* pr-output.cc (pr_plus_format_matrix): New template.
(octave_print_internal): Where possible, use it to eliminate some
duplicate code.

diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -1780,40 +1780,48 @@ octave_print_free (std::ostream& os, con
       if (i < nr - 1)
         os << "\n";
     }
 
   if (pr_as_read_syntax)
     os << ']';
 }
 
+template <typename MT>
+static inline void
+pr_plus_format_matrix (std::ostream& os, const MT& m)
+{
+  octave_idx_type nr = m.rows ();
+  octave_idx_type nc = m.columns ();
+
+  for (octave_idx_type i = 0; i < nr; i++)
+    {
+      for (octave_idx_type j = 0; j < nc; j++)
+        {
+          octave_quit ();
+
+          pr_plus_format (os, m(i,j));
+        }
+
+      if (i < nr - 1)
+        os << "\n";
+    }
+}
+
 void
 octave_print_internal (std::ostream& os, const Matrix& m,
                        bool pr_as_read_syntax, int extra_indent)
 {
   octave_idx_type nr = m.rows ();
   octave_idx_type nc = m.columns ();
 
   if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
-    {
-      for (octave_idx_type i = 0; i < nr; i++)
-        {
-          for (octave_idx_type j = 0; j < nc; j++)
-            {
-              octave_quit ();
-
-              pr_plus_format (os, m(i,j));
-            }
-
-          if (i < nr - 1)
-            os << "\n";
-        }
-    }
+    pr_plus_format_matrix (os, m);
   else
     {
       int fw = 0;
       double scale = 1;
       float_display_format fmt = make_format (m, fw, scale);
       int column_width = fw + 2;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
@@ -1919,30 +1927,17 @@ octave_print_internal (std::ostream& os,
                        bool pr_as_read_syntax, int extra_indent)
 {
   octave_idx_type nr = m.rows ();
   octave_idx_type nc = m.columns ();
 
   if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
-    {
-      for (octave_idx_type i = 0; i < nr; i++)
-        {
-          for (octave_idx_type j = 0; j < nc; j++)
-            {
-              octave_quit ();
-
-              pr_plus_format (os, m(i,j));
-            }
-
-          if (i < nr - 1)
-            os << "\n";
-        }
-    }
+    pr_plus_format_matrix (os, m);
   else
     {
       int fw;
       double scale = 1;
       float_display_format fmt = make_format (Matrix (m.diag ()), fw, scale);
       int column_width = fw + 2;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
@@ -2190,30 +2185,17 @@ octave_print_internal (std::ostream& os,
                        bool pr_as_read_syntax, int extra_indent)
 {
   octave_idx_type nr = cm.rows ();
   octave_idx_type nc = cm.columns ();
 
   if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
-    {
-      for (octave_idx_type i = 0; i < nr; i++)
-        {
-          for (octave_idx_type j = 0; j < nc; j++)
-            {
-              octave_quit ();
-
-              pr_plus_format (os, cm(i,j));
-            }
-
-          if (i < nr - 1)
-            os << "\n";
-        }
-    }
+    pr_plus_format_matrix (os, cm);
   else
     {
       int r_fw, i_fw;
       double scale = 1;
       float_display_format fmt = make_format (cm, r_fw, i_fw, scale);
       int column_width = i_fw + r_fw;
       column_width += (rat_format || bank_format || hex_format
                        || bit_format) ? 2 : 7;
@@ -2321,30 +2303,17 @@ octave_print_internal (std::ostream& os,
                        bool pr_as_read_syntax, int extra_indent)
 {
   octave_idx_type nr = cm.rows ();
   octave_idx_type nc = cm.columns ();
 
   if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
-    {
-      for (octave_idx_type i = 0; i < nr; i++)
-        {
-          for (octave_idx_type j = 0; j < nc; j++)
-            {
-              octave_quit ();
-
-              pr_plus_format (os, cm(i,j));
-            }
-
-          if (i < nr - 1)
-            os << "\n";
-        }
-    }
+    pr_plus_format_matrix (os, cm);
   else
     {
       int r_fw, i_fw;
       double scale = 1;
       float_display_format fmt
         = make_format (ComplexMatrix (cm.diag ()), r_fw, i_fw, scale);
       int column_width = i_fw + r_fw;
       column_width += (rat_format || bank_format || hex_format
@@ -2463,30 +2432,17 @@ octave_print_internal (std::ostream& os,
                        bool pr_as_read_syntax, int extra_indent)
 {
   octave_idx_type nr = m.rows ();
   octave_idx_type nc = m.columns ();
 
   if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
-    {
-      for (octave_idx_type i = 0; i < nr; i++)
-        {
-          for (octave_idx_type j = 0; j < nc; j++)
-            {
-              octave_quit ();
-
-              pr_plus_format (os, m(i,j));
-            }
-
-          if (i < nr - 1)
-            os << "\n";
-        }
-    }
+    pr_plus_format_matrix (os, m);
   else
     {
       int fw = 2;
       int column_width = fw + 2;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
       if (pr_as_read_syntax)
@@ -2656,26 +2612,17 @@ octave_print_internal (std::ostream& os,
                        bool pr_as_read_syntax, int extra_indent)
 {
   double base = r.base ();
   double increment = r.inc ();
   double limit = r.limit ();
   octave_idx_type num_elem = r.numel ();
 
   if (plus_format && ! pr_as_read_syntax)
-    {
-      for (octave_idx_type i = 0; i < num_elem; i++)
-        {
-          octave_quit ();
-
-          double val = base + i * increment;
-
-          pr_plus_format (os, val);
-        }
-    }
+    pr_plus_format_matrix (os, r);
   else
     {
       int fw = 0;
       double scale = 1;
       float_display_format fmt = make_format (r, fw, scale);
 
       if (pr_as_read_syntax)
         {
@@ -3073,19 +3020,17 @@ pr_int (std::ostream&, const octave_uint
 
 template <typename T>
 void
 octave_print_internal_template (std::ostream& os,
                                 const float_display_format& fmt,
                                 const octave_int<T>& val, bool)
 {
   if (plus_format)
-    {
-      pr_plus_format (os, val);
-    }
+    pr_plus_format (os, val);
   else
     {
       if (free_format)
         os << typename octave_print_conv<octave_int<T>>::print_conv_type (val);
       else
         {
           float_format r_fmt = fmt.real_format ();
 
