# HG changeset patch
# User Rik <rik@octave.org>
# Date 1444709627 25200
#      Mon Oct 12 21:13:47 2015 -0700
# Node ID e54ecb33727e03de2ac4cf6b34ecd9749193a990
# Parent  93d96da9ff3e2a8d2db0ff0806d2bd26479e7c37
lo-array-gripes.cc: Remove FIXME's related to buffer size.

* lo-array-gripes.cc: Remove FIXME's related to buffer size.  Shorten sprintf
buffers from 100 to 64 characters (still well more than 19 required).
Use 'const' decorator on constant value for clarity.  Remove extra space
between variable and array bracket.

diff --git a/liboctave/util/lo-array-gripes.cc b/liboctave/util/lo-array-gripes.cc
--- a/liboctave/util/lo-array-gripes.cc
+++ b/liboctave/util/lo-array-gripes.cc
@@ -117,18 +117,17 @@ index_exception::err (void) throw ()
 // Show what was illegally accessed, e.g.,  "A(-1,_)", "A(0+1i)", "A(_,3)"
 // Show how many indices come before/after the offending one,
 // e.g., (<error>), (<error>,_), or (_,<error>,...[x5]...)
 
 std::string
 index_exception:: access (void) const
 {
   // FIXME: don't use a fixed size buffer!
-
-  int buf_len = 300;
+  const int buf_len = 300;
 
   char output [buf_len];
   char pre [buf_len];
   char post [buf_len];
 
   // dim == 0 if position not yet given, or
   // <static_cast unsigned int>(-1) if explicitly shown to be unknown
   // both are caught by this condition
@@ -223,30 +222,29 @@ gripe_invalid_index (const char *idx, oc
 
     throw e;
 }
 
 void
 gripe_invalid_index (octave_idx_type n, octave_idx_type nd,
                      octave_idx_type dim, const char *var)
 {
-  // FIXME: don't use a fixed size buffer!
-  char buf [100];
+  // Note: log10 (2^63) = 19 digits.  Use 64 for ease of memory alignment. 
+  char buf[64];
 
   sprintf (buf, "%d", n+1);
 
   gripe_invalid_index (buf, nd, dim, var);
 }
 
 void
 gripe_invalid_index (double n, octave_idx_type nd, octave_idx_type dim,
                      const char *var)
 {
-  // FIXME: don't use a fixed size buffer!
-  char buf [100];
+  char buf[64];
 
   sprintf (buf, "%g", n+1);
 
   gripe_invalid_index (buf, nd, dim, var);
 }
 
 
 // Gripe and exception for read access beyond the bounds of an array.
@@ -270,18 +268,17 @@ public:
           expl = "but " + var + " has size ";
         else
           expl = "but object has size ";
 
         expl = expl + size.str ('x');
       }
     else
       {
-        // FIXME: don't use a fixed size buffer!
-        char buf [100];
+        char buf[64];
         sprintf (buf, "%d", extent);
         expl = "out of bound " + std::string (buf);
       }
 
     return expl.c_str ();
   }
 
   // ID of error to throw.
@@ -291,42 +288,42 @@ public:
   }
 
   void set_size (const dim_vector& size_in) { size = size_in; }
 
   void set_extent (octave_idx_type ext) { extent = ext; }
 
 private:
 
-  dim_vector  size;         // dimension of object being accessed
+  dim_vector size;          // dimension of object being accessed
 
   octave_idx_type extent;   // length of dimension being accessed
 };
 
 // Complain of an index that is out of range, but we don't know matrix size
 void
 gripe_index_out_of_range (int nd, int dim, octave_idx_type idx,
                           octave_idx_type ext)
 {
-    char buf [100];
+    char buf[64];
     sprintf (buf, "%d", idx);
     out_of_range e (buf, nd, dim);
 
     e.set_extent (ext);
-    dim_vector d (1,1,1,1,1,1,1);   // make  explain()  give extent not size
+    dim_vector d (1,1,1,1,1,1,1);   // make explain() give extent not size
     e.set_size (d);
     throw e;
 }
 
 // Complain of an index that is out of range
 void
 gripe_index_out_of_range (int nd, int dim, octave_idx_type idx,
                           octave_idx_type ext, const dim_vector& d)
 {
-    char buf [100];
+    char buf[64];
     sprintf (buf, "%d", idx);
     out_of_range e (buf, nd, dim);
 
     e.set_extent (ext);
     e.set_size (d);
     throw e;
 }
 
