# HG changeset patch
# User jwe
# Date 862193402 0
#      Mon Apr 28 02:10:02 1997 +0000
# Node ID 9fd1df4b464a9005b012ac24354bd2c4e9fbc386
# Parent  aef2d43edbc25022064c9470a46eb3f8ab4cf71a
[project @ 1997-04-28 02:07:38 by jwe]

diff --git a/PROJECTS b/PROJECTS
--- a/PROJECTS
+++ b/PROJECTS
@@ -268,16 +268,22 @@ Interpreter:
       endfunction
 
     succeeds, even when implicit_str_to_num_ok is 0 at the time the
     function is parsed.
 
   * Consider making x(:) work no matter what the value of
     do_fortran_indexing.
 
+  * For indexing operations, allow `$' to indicate the last element.
+    For example, b = a (3:$, 1:$-1).  This means b is a, except for
+    its first 2 rows and last column.  Note that `$' must be able to
+    appear in arbitrarily complex expressions, so copying the the
+    current implementation of `:' won't work. 
+
   * If foo.oct and foo.m both exist in the LOADPATH, Octave will
     always find foo.oct, even if foo.m appears earlier in the list of
     directories.  This should be fixed (in the kpathsearch library) to
     find the first .oct or .m file in the path, and only prefer .oct
     over .m if both files are in the same directory.
 
   * Fix the grammar to allow structure references and index operations
     for for anonymous expressions.  For example, it should be possible
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,64 @@
+Sun Apr 27 20:17:49 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dynamic-ld.h (Octave_builtin_fcn): Delete typedef.
+	* dynamic-ld.cc: Simplify via the magic of function pointers.
+
+	* pt-fcn.h pt-fcn.cc pt-fvc.h pt-fvc.cc pt-fvc-base.h pt-fvc-base.cc:
+	Delete obsolete files.
+	* Makefile.in: Remove them from various lists.
+
+	* pt-walk.h (visit_octave_user_function): Rename from visit_function.
+	(visit_builtin): Delete.
+	* pt-pr-code.h, pt-pr-code.cc (visit_octave_user_function):
+	Rename from visit_function.
+	(visit_octave_user_function_header): Rename from visit_function_header.
+	(visit_octave_user_function_trailer): Rename from
+	visit_function_trailer.
+
+	* ov.h, ov.cc (eval): New functions.
+
+	* dassl.cc, fsolve.cc, lsode.cc, npsol.cc, qpsol.cc, quad.cc:
+	Declare user-defined functions as a pointer to an octave_symbol
+	object, not as a pointer to a tree_fvc object.
+
+	* symtab.h, symtab.cc: Use new octave_symbol class.
+	* variables.cc (install_builtin_function, install_builtin_mapper,
+	install_builtin_variable, install_builtin_variable_as_function):
+	Make work with new octave_symbol class and symbol table structure.
+
+	* variables.h: Delete declaration of builtin_function struct.
+	* defun-dld.h (DEFUN_DLD): Simplify.
+	* defun-int.h (DEFINE_FUN_STRUCT): Delete.
+	(DEFINE_FUN_STRUCT_FUN): Rewrite to not use static builtin_function
+	object.
+
+	* mappers.h: Delete declaration of builtin_mapper_function struct.
+	* mappers.cc: Declare wrapper functions static.
+	* defun.h (DEFUN_MAPPER): Simplify.
+
+	* oct-sym.h: New file.  Declare base class for Octave symbols.
+	* ov.h: Derive octave_value class from octave_symbol.
+	* oct-fcn.h, oct-fcn.cc: New files to declare and define
+	base class for functions.
+	* oct-builtin.h, oct-builtin.cc: New files to declare and define
+	class for built-in functions.
+	* oct-mapper.h, oct-mapper.cc: New files to declare and define
+	class for mapper functions.
+	* oct-usr-fcn.h, oct-usr-fcn.cc: New files to declare and define
+	base class for user-defined functions.
+	* Makefile.in: Add new files to appropriate lists.
+
+	* pt-id.h, pt-id.cc: Move tree_identifier class here.
+	* pt-fvc.h, pt-fvc.cc: From here.
+
+	* pt-indir.h, pt-indir.cc: Move tree_indirect_ref class here.
+	* pt-fvc.h, pt-fvc.cc: From here.
+
 Thu Apr 24 03:58:16 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* parse.y (magic_colon): New nonterminal.
 	(arg_list): Simplify using magic_colon.
 
 	* lex.h (class lexical_feedback): Delete maybe_screwed field.
 	New field, parsed_function name.
 	* lex.l (lexical_feedback::init): Initialize it.
diff --git a/src/dynamic-ld.cc b/src/dynamic-ld.cc
--- a/src/dynamic-ld.cc
+++ b/src/dynamic-ld.cc
@@ -45,23 +45,24 @@ extern "C"
 
 #include <defaults.h>
 #include "dirfns.h"
 #include "dynamic-ld.h"
 #include "error.h"
 #include "toplev.h"
 #include "pathsearch.h"
 #include "oct-obj.h"
+#include "oct-builtin.h"
 #include "ov.h"
 #include "utils.h"
 #include "variables.h"
 
-typedef builtin_function * (*Octave_builtin_fcn_struct_fcn)(void);
+#if defined (WITH_DYNAMIC_LINKING)
 
-#if defined (WITH_DYNAMIC_LINKING)
+typedef void * (*resolver_fcn) (const string& name, const string& file);
 
 static string
 mangle_octave_oct_file_name (const string& name)
 {
   string retval ("FS");
   retval.append (name);
   retval.append ("__Fv");
   return retval;
@@ -97,16 +98,18 @@ dl_resolve_octave_reference (const strin
 	}
     }
   else
     error ("%s: %s `%s'", dlerror (), file.c_str (), name.c_str ());
 
   return retval;
 }
 
+static resolver_fcn resolve_octave_reference = dl_resolve_octave_reference;
+
 #elif defined (WITH_SHL)
 
 static void *
 shl_resolve_octave_reference (const string& name, const string& file)
 {
   void *retval = 0;
 
   // Dynamic linking with shl_load/shl_findsym doesn't require
@@ -133,70 +136,58 @@ shl_resolve_octave_reference (const stri
 	}
     }
   else
     error ("%s: %s `%s'", strerror (errno), file.c_str (), name.c_str ());
 
   return retval;
 }
 
-#endif
+static resolver_fcn resolve_octave_reference = shl_resolve_octave_reference;
+
 #endif
 
-#if defined (WITH_DYNAMIC_LINKING)
-static void *
-resolve_octave_reference (const string& name, const string& file)
-{
-#if defined (WITH_DL)
-
-  return dl_resolve_octave_reference (name, file);
-
-#elif defined (WITH_SHL)
-
-  return shl_resolve_octave_reference (name, file);
-
-#endif
-}
-#endif
+typedef octave_builtin * (*builtin_obj_fcn) (void);
 
 int
 load_octave_oct_file (const string& name)
 {
   int retval = 0;
 
-#if defined (WITH_DYNAMIC_LINKING)
-
   string oct_file = oct_file_in_path (name);
 
   if (! oct_file.empty ())
     {
       string mangled_name = mangle_octave_oct_file_name (name);
 
-      Octave_builtin_fcn_struct_fcn f =
-	(Octave_builtin_fcn_struct_fcn) resolve_octave_reference
-	  (mangled_name, oct_file);
+      builtin_obj_fcn f
+	= (builtin_obj_fcn) resolve_octave_reference (mangled_name, oct_file);
 
       if (f)
 	{
-	  builtin_function *s = f ();
+	  octave_builtin *obj = f ();
 
-	  if (s)
+	  if (obj)
 	    {
-	      install_builtin_function (*s);
+	      install_builtin_function (obj);
 	      retval = 1;
 	    }
 	}
     }
 
+  return retval;
+}
+
 #else
 
-  (void) name;
+int
+load_octave_oct_file (const string&)
+{
+  return 0;
+}
 
 #endif
 
-  return retval;
-}
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/dynamic-ld.h b/src/dynamic-ld.h
--- a/src/dynamic-ld.h
+++ b/src/dynamic-ld.h
@@ -22,18 +22,16 @@ Software Foundation, 59 Temple Place - S
 
 #if !defined (octave_dynamic_ld_h)
 #define octave_dynamic_ld_h 1
 
 #include <string>
 
 class octave_value_list;
 
-typedef octave_value_list (*Octave_builtin_fcn)(const octave_value_list&, int);
-
 extern int load_octave_oct_file (const string& name);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -29,49 +29,30 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <cctype>
 
 #include "oct-glob.h"
 #include "str-vec.h"
 
 #include "error.h"
+#include "oct-sym.h"
+#include "oct-fcn.h"
 #include "pt-const.h"
-#include "pt-fcn.h"
-#include "pt-fvc.h"
 #include "symtab.h"
 #include "utils.h"
 #include "variables.h"
 
 // Variables and functions.
 
-symbol_def::symbol_def (void)
-{
-  init_state ();
-}
-
-symbol_def::symbol_def (tree_constant *t)
+symbol_def::symbol_def (octave_symbol *sym, unsigned int sym_type)
 {
   init_state ();
-  definition = t;
-  type = USER_VARIABLE;
-}
-
-symbol_def::symbol_def (tree_builtin *t, unsigned fcn_type)
-{
-  init_state ();
-  definition = t;
-  type = BUILTIN_FUNCTION | fcn_type;
-}
-
-symbol_def::symbol_def (tree_function *t, unsigned fcn_type)
-{
-  init_state ();
-  definition = t;
-  type = USER_FUNCTION | fcn_type;
+  definition = sym;
+  type = sym_type;
 }
 
 void
 symbol_def::init_state (void)
 {
   type = UNKNOWN;
   eternal = 0;
   read_only = 0;
@@ -133,43 +114,25 @@ symbol_def::is_builtin_function (void) c
 {
   return (type & BUILTIN_FUNCTION);
 }
 
 // XXX FIXME XXX
 bool
 symbol_def::is_map_element (const string& /* elts */) const
 {
-  return 0;
+  return false;
 }
 
 void
-symbol_def::define (tree_constant *t)
+symbol_def::define (octave_symbol *s, unsigned int sym_type)
 {
-  if (t)
-    t->maybe_mutate ();
-
-  definition = t;
-
-  if (! is_builtin_variable ())
-    type = USER_VARIABLE;
-}
+  definition = s;
 
-void
-symbol_def::define (tree_builtin *t, unsigned fcn_type)
-{
-  definition = t;
-  type = BUILTIN_FUNCTION | fcn_type;
-}
-
-void
-symbol_def::define (tree_function *t, unsigned fcn_type)
-{
-  definition = t;
-  type = USER_FUNCTION | fcn_type;
+  type = sym_type;
 }
 
 void
 symbol_def::protect (void)
 {
   read_only = 1;
 }
 
@@ -181,17 +144,17 @@ symbol_def::unprotect (void)
 }
 
 void
 symbol_def::make_eternal (void)
 {
   eternal = 1;
 }
 
-tree_fvc *
+octave_symbol *
 symbol_def::def (void) const
 {
   return definition;
 }
 
 string
 symbol_def::help (void) const
 {
@@ -253,17 +216,17 @@ string
 symbol_record::help (void) const
 {
   string retval;
   if (definition)
     retval = definition->help ();
   return retval;
 }
 
-tree_fvc *
+octave_symbol *
 symbol_record::def (void) const
 {
   return definition ? definition->def () : false;
 }
 
 void
 symbol_record::rename (const string& new_name)
 {
@@ -320,17 +283,17 @@ symbol_record::is_builtin_variable (void
 }
 
 bool
 symbol_record::is_map_element (const string& elts) const
 {
   return definition ? definition->is_map_element (elts) : false;
 }
 
-unsigned
+unsigned int
 symbol_record::type (void) const
 {
   return definition ? definition->type : false;
 }
 
 bool
 symbol_record::is_defined (void) const
 {
@@ -383,115 +346,63 @@ symbol_record::make_eternal (void)
 
 void
 symbol_record::set_sv_function (sv_Function f)
 {
   sv_fcn = f;
 }
 
 int
-symbol_record::define (tree_constant *t)
+symbol_record::define (const octave_value& v, unsigned int sym_type)
 {
-  if (is_variable () && read_only_error ("redefine"))
-    return 0;
+  int retval = 0;
 
-  tree_fvc *saved_def = 0;
-  if (! definition)
+  if (! (is_variable () && read_only_error ("redefine")))
     {
-      definition = new symbol_def ();
-      definition->count = 1;
-    }
-  else if (is_function ())
-    {
-      symbol_def *new_def = new symbol_def ();
-      push_def (new_def);
-      definition->count = 1;
-    }
-  else if (is_variable ())
-    {
-      saved_def = definition->def ();
+      octave_symbol *saved_def = 0;
+      unsigned int saved_type = symbol_def::UNKNOWN;
+
+      if (! definition)
+	{
+	  definition = new symbol_def ();
+	  definition->count = 1;
+	}
+      else if (is_function ())
+	{
+	  push_def (new symbol_def ());
+	  definition->count = 1;
+	}
+      else if (is_variable ())
+	{
+	  saved_def = definition->def ();
+	  saved_type = definition->symbol_type ();
+	}
+
+      if (saved_type == symbol_def::BUILTIN_VARIABLE)
+	sym_type = saved_type;
+
+      definition->define (new octave_value (v), sym_type);
+
+      if (sv_fcn && sv_fcn () < 0)
+	definition->define (saved_def, saved_type);
+      else
+	{
+	  retval = 1;
+
+	  delete saved_def;
+	}
     }
 
-  definition->define (t);
-
-  if (sv_fcn && sv_fcn () < 0)
-    {
-      // Would be nice to be able to avoid this cast.  XXX FIXME XXX
-
-      definition->define (static_cast<tree_constant *> (saved_def));
-      return 0;
-    }
-
-  delete saved_def;
-
-  return 1;
-}
-
-int
-symbol_record::define (const octave_value& v)
-{
-  tree_constant *t = new tree_constant (v);
-  return define (t);
+  return retval;
 }
 
 int
-symbol_record::define (tree_builtin *t, bool text_fcn)
+symbol_record::define_builtin_var (const octave_value& v)
 {
-  if (read_only_error ("redefine"))
-    return 0;
-
-  if (is_variable ())
-    {
-      symbol_def *old_def = pop_def ();
-      maybe_delete (old_def);
-    }
-
-  if (is_function ())
-    {
-      symbol_def *old_def = pop_def ();
-      maybe_delete (old_def);
-    }
-
-  unsigned fcn_type = text_fcn ? symbol_def::TEXT_FUNCTION
-    : ((t && t->is_mapper_function ()) ? symbol_def::MAPPER_FUNCTION
-       : symbol_def::UNKNOWN);
-
-  symbol_def *new_def = new symbol_def (t, fcn_type);
-  push_def (new_def);
-  definition->count = 1;
-
-  return 1;
-}
-
-int
-symbol_record::define (tree_function *t, bool text_fcn)
-{
-  if (read_only_error ("redefine"))
-    return 0;
-
-  if (is_variable ())
-    {
-      symbol_def *old_def = pop_def ();
-      maybe_delete (old_def);
-    }
-
-  if (is_function ())
-    {
-      symbol_def *old_def = pop_def ();
-      maybe_delete (old_def);
-    }
-
-  unsigned fcn_type = text_fcn ? symbol_def::TEXT_FUNCTION
-    : symbol_def::UNKNOWN;
-
-  symbol_def *new_def = new symbol_def (t, fcn_type);
-  push_def (new_def);
-  definition->count = 1;
-
-  return 1;
+  return define (v, symbol_def::BUILTIN_VARIABLE);
 }
 
 int
 symbol_record::define_as_fcn (const octave_value& v)
 {
   if (is_variable () && read_only_error ("redefine"))
     return 0;
 
@@ -502,32 +413,46 @@ symbol_record::define_as_fcn (const octa
     }
 
   if (is_function ())
     {
       symbol_def *old_def = pop_def ();
       maybe_delete (old_def);
     }
 
-  tree_constant *t = new tree_constant (v);
-  symbol_def *new_def = new symbol_def (t);
-  push_def (new_def);
+  push_def (new symbol_def (new octave_value (v),
+			    symbol_def::BUILTIN_FUNCTION));
+
   definition->count = 1;
-  definition->type = symbol_def::BUILTIN_FUNCTION;
 
   return 1;
 }
 
 int
-symbol_record::define_builtin_var (const octave_value& v)
+symbol_record::define (octave_function *f, unsigned int sym_type)
 {
-  tree_constant *t = new tree_constant (v);
-  define (t);
+  if (read_only_error ("redefine"))
+    return 0;
+
   if (is_variable ())
-    definition->type = symbol_def::BUILTIN_VARIABLE;
+    {
+      symbol_def *old_def = pop_def ();
+      maybe_delete (old_def);
+    }
+
+  if (is_function ())
+    {
+      symbol_def *old_def = pop_def ();
+      maybe_delete (old_def);
+    }
+
+  push_def (new symbol_def (f, sym_type));
+
+  definition->count = 1;
+
   return 1;
 }
 
 void
 symbol_record::document (const string& h)
 {
   if (definition)
     {
@@ -617,18 +542,18 @@ symbol_record::is_static (void) const
 
 octave_value
 symbol_record::variable_value (void) const
 {
   octave_value retval;
 
   if (is_variable ())
     {
-      tree_constant *tmp = static_cast<tree_constant *> (def ());
-      retval = tmp->value ();
+      octave_symbol *tmp = def ();
+      retval = tmp->eval ();
     }
 
   return retval;
 }
 
 octave_value&
 symbol_record::variable_reference (void)
 {
@@ -636,25 +561,24 @@ symbol_record::variable_reference (void)
     clear ();
 
   if (! is_defined ())
     {
       if (! (is_formal_parameter () || is_linked_to_global ()))
 	link_to_builtin_variable (this);
 
       if (! is_defined ())
-	{
-	  tree_constant *tmp = new tree_constant ();
-	  define (tmp);
-	}
+	define (octave_value ());
     }
 
-  tree_constant *tmp = static_cast<tree_constant *> (def ());
+  octave_value *tmp = static_cast<octave_value *> (def ());
 
-  return tmp->reference ();
+  tmp->make_unique ();
+
+  return *tmp;
 }
 
 symbol_record *
 symbol_record::next (void) const
 {
   return next_elem;
 }
 
@@ -667,17 +591,17 @@ symbol_record::chain (symbol_record *s)
 void
 symbol_record::push_context (void)
 {
   if (! is_static ())
     {
       context.push (definition);
       definition = 0;
 
-      global_link_context.push (static_cast<unsigned> (linked_to_global));
+      global_link_context.push (static_cast<unsigned int> (linked_to_global));
       linked_to_global = 0;
     }
 }
 
 void
 symbol_record::pop_context (void)
 {
   // It is possible for context to be empty if new symbols have been
@@ -757,19 +681,19 @@ symbol_record_info::symbol_record_info (
   : initialized (0), nr (-1), nc (-1), type (sr.type ()),
     hides (SR_INFO_NONE), eternal (0), read_only (0), nm (),
     const_type ()
 {
   if (sr.is_variable () && sr.is_defined ())
     {
       // Would be nice to avoid this cast.  XXX FIXME XXX
 
-      tree_constant *tmp = static_cast<tree_constant *> (sr.def ());
+      octave_symbol *tmp = sr.def ();
 
-      octave_value vtmp = tmp->value ();
+      octave_value vtmp = tmp->eval ();
 
       const_type = vtmp.type_name ();
 
       nr = vtmp.rows ();
       nc = vtmp.columns ();
 
       symbol_def *sr_def = sr.definition;
       symbol_def *hidden_def = sr_def->next_elem;
@@ -1044,35 +968,35 @@ matches_patterns (const string& name, co
   return 0;
 }
 
 // This function should probably share code with symbol_table::list.
 // XXX FIXME XXX
 
 symbol_record_info *
 symbol_table::long_list (int& count, const string_vector& pats,
-			 int npats, bool sort, unsigned type,
-			 unsigned scope) const 
+			 int npats, bool sort, unsigned int type,
+			 unsigned int scope) const 
 {
   count = 0;
   int n = size ();
   if (n == 0)
     return 0;
 
   symbol_record_info *symbols = new symbol_record_info [n+1];
   for (int i = 0; i < HASH_TABLE_SIZE; i++)
     {
       symbol_record *ptr = table[i].next ();
       while (ptr)
 	{
 	  assert (count < n);
 
-	  unsigned my_scope = ptr->is_linked_to_global () + 1; // Tricky...
+	  unsigned int my_scope = ptr->is_linked_to_global () + 1; // Tricky...
 
-	  unsigned my_type = ptr->type ();
+	  unsigned int my_type = ptr->type ();
 
 	  string my_name = ptr->name ();
 
 	  if ((type & my_type) && (scope & my_scope)
 	      && (npats == 0 || matches_patterns (my_name, pats, npats)))
 	    symbols[count++] = symbol_record_info (*ptr);
 
 	  ptr = ptr->next ();
@@ -1084,35 +1008,35 @@ symbol_table::long_list (int& count, con
     qsort (symbols, count, sizeof (symbol_record_info),
 	   symbol_record_info_cmp);
 
   return symbols;
 }
 
 string_vector
 symbol_table::list (int& count, const string_vector& pats, int npats,
-		    bool sort, unsigned type, unsigned scope) const
+		    bool sort, unsigned int type, unsigned int scope) const
 {
   count = 0;
   int n = size ();
   if (n == 0)
     return 0;
 
   string_vector symbols (n);
 
   for (int i = 0; i < HASH_TABLE_SIZE; i++)
     {
       symbol_record *ptr = table[i].next ();
       while (ptr)
 	{
 	  assert (count < n);
 
-	  unsigned my_scope = ptr->is_linked_to_global () + 1; // Tricky...
+	  unsigned int my_scope = ptr->is_linked_to_global () + 1; // Tricky...
 
-	  unsigned my_type = ptr->type ();
+	  unsigned int my_type = ptr->type ();
 
 	  string my_name = ptr->name ();
 
 	  if ((type & my_type) && (scope & my_scope)
 	      && (npats == 0 || matches_patterns (my_name, pats, npats)))
 	    symbols[count++] = ptr->name ();
 
 	  ptr = ptr->next ();
@@ -1123,35 +1047,35 @@ symbol_table::list (int& count, const st
 
   if (sort && ! symbols.empty ())
     symbols.qsort ();
 
   return symbols;
 }
 
 symbol_record **
-symbol_table::glob (int& count, const string& pat, unsigned type,
-		    unsigned scope) const
+symbol_table::glob (int& count, const string& pat, unsigned int type,
+		    unsigned int scope) const
 {
   count = 0;
   int n = size ();
   if (n == 0)
     return 0;
 
   symbol_record **symbols = new symbol_record * [n+1];
   for (int i = 0; i < HASH_TABLE_SIZE; i++)
     {
       symbol_record *ptr = table[i].next ();
       while (ptr)
 	{
 	  assert (count < n);
 
-	  unsigned my_scope = ptr->is_linked_to_global () + 1; // Tricky...
+	  unsigned int my_scope = ptr->is_linked_to_global () + 1; // Tricky...
 
-	  unsigned my_type = ptr->type ();
+	  unsigned int my_type = ptr->type ();
 
 	  glob_match pattern (pat);
 
 	  if ((type & my_type) && (scope & my_scope)
 	      && pattern.match (ptr->name ()))
 	    {
 	      symbols[count++] = ptr;
 	    }
@@ -1194,18 +1118,18 @@ symbol_table::pop_context (void)
     }
 }
 
 // Chris Torek's fave hash function.
 
 unsigned int
 symbol_table::hash (const string& str)
 {
-  unsigned h = 0;
-  for (unsigned i = 0; i < str.length (); i++)
+  unsigned int h = 0;
+  for (unsigned int i = 0; i < str.length (); i++)
     h = h * 33 + str[i];
   return h;
 }
 
 // Return nonzero if S is a valid identifier.
 
 bool
 valid_identifier (const char *s)
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -34,21 +34,18 @@ Software Foundation, 59 Temple Place - S
 #include "str-vec.h"
 
 #include "variables.h"
 
 // Must be multiple of 2.
 #define HASH_TABLE_SIZE 1024
 #define HASH_MASK (HASH_TABLE_SIZE - 1)
 
-class tree;
-class tree_fvc;
-class tree_builtin;
-class tree_constant;
-class tree_function;
+class octave_symbol;
+class octave_function;
 
 class string_vector;
 
 class symbol_def;
 class symbol_record;
 class symbol_record_info;
 class symbol_table;
 
@@ -56,66 +53,63 @@ class symbol_table;
 
 class symbol_def
 {
   friend class symbol_record;
   friend class symbol_record_info;
 
 public:
 
-  symbol_def (void);
-  symbol_def (tree_constant *t);
-  symbol_def (tree_builtin *t, unsigned fcn_type = 0);
-  symbol_def (tree_function *t, unsigned fcn_type = 0);
+  symbol_def (octave_symbol *sym = 0, unsigned int sym_type = 0);
 
   ~symbol_def (void);
 
   bool is_variable (void) const;
   bool is_function (void) const;
   bool is_text_function (void) const;
   bool is_mapper_function (void) const;
   bool is_user_variable (void) const;
   bool is_user_function (void) const;
   bool is_builtin_variable (void) const;
   bool is_builtin_function (void) const;
   bool is_map_element (const string& elts) const;
 
-  void define (tree_constant *t);
-  void define (tree_builtin *t, unsigned fcn_type = 0);
-  void define (tree_function *t, unsigned fcn_type = 0);
+  void define (octave_symbol *sym, unsigned int sym_type);
 
   void protect (void);
   void unprotect (void);
   void make_eternal (void);
 
-  tree_fvc *def (void) const;
+  octave_symbol *def (void) const;
   string help (void) const;
   void document (const string& h);
 
   enum TYPE
     {
       UNKNOWN = 0,
       USER_FUNCTION = 1,
       USER_VARIABLE = 2,
       BUILTIN_FUNCTION = 4,
       TEXT_FUNCTION = 8,
       MAPPER_FUNCTION = 16,
       BUILTIN_VARIABLE = 32
     };
 
+  unsigned int symbol_type (void) { return type; }
+
   friend maybe_delete (symbol_def *def);
 
 private:
 
-  unsigned type : 6;
-  unsigned eternal : 1;
-  unsigned read_only : 1;
+  unsigned int type : 6;
+  unsigned int eternal : 1;
+  unsigned int read_only : 1;
 
   string help_string;
-  tree_fvc *definition;
+  octave_symbol *definition;
   symbol_def *next_elem;
   int count;
 
   void init_state (void);
 
   symbol_def (const symbol_def& sd);
   symbol_def& operator = (const symbol_def& sd);
 };
@@ -130,49 +124,51 @@ symbol_record
 public:
   symbol_record (void);
   symbol_record (const string& n, symbol_record *nxt = 0);
 
   ~symbol_record (void) { }
 
   string name (void) const;
   string help (void) const; 
-  tree_fvc *def (void) const;
+  octave_symbol *def (void) const;
 
   void rename (const string& new_name);
 
   bool is_function (void) const;
   bool is_user_function (void) const;
   bool is_text_function (void) const;
   bool is_mapper_function (void) const;
   bool is_builtin_function (void) const;
   bool is_variable (void) const;
   bool is_user_variable (void) const;
   bool is_builtin_variable (void) const;
   bool is_map_element (const string& elts) const;
 
-  unsigned type (void) const;
+  unsigned int type (void) const;
 
   bool is_defined (void) const;
   bool is_read_only (void) const;
   bool is_eternal (void) const;
 
   void protect (void);
   void unprotect (void);
   void make_eternal (void);
 
   void set_sv_function (sv_Function f);
 
-  int define (tree_constant *t);
-  int define (const octave_value& v);
-  int define (tree_builtin *t, bool text_fcn = false);
-  int define (tree_function *t, bool text_fcn = false);
+  int define (const octave_value& v,
+	      unsigned int sym_type = symbol_def::USER_VARIABLE);
+
   int define_as_fcn (const octave_value& v);
+
   int define_builtin_var (const octave_value& v);
 
+  int define (octave_function *f, unsigned int sym_type);
+
   void document (const string& h);
 
   int clear (void);
 
   void alias (symbol_record *s, bool force = false);
 
   void mark_as_formal_parameter (void);
   bool is_formal_parameter (void) const;
@@ -190,29 +186,29 @@ public:
 
   void chain (symbol_record *s);
 
   void push_context (void);
   void pop_context (void);
 
 private:
 
-  unsigned formal_param : 1;
-  unsigned linked_to_global : 1;
-  unsigned tagged_static : 1;
+  unsigned int formal_param : 1;
+  unsigned int linked_to_global : 1;
+  unsigned int tagged_static : 1;
 
   string nm;
   sv_Function sv_fcn;
   symbol_def *definition;
   symbol_record *next_elem;
 
 // This should maybe be one stack with a structure containing all the
 // items we need to save for recursive calls...
   SLStack <symbol_def *> context;
-  SLStack <unsigned> global_link_context;
+  SLStack <unsigned int> global_link_context;
 
   void init_state (void);
 
   int read_only_error (const char *action);
 
   void push_def (symbol_def *sd);
   symbol_def *pop_def (void);
 
@@ -253,20 +249,20 @@ public:
       SR_INFO_BUILTIN_FUNCTION = 2
     };
 
 private:
 
   bool initialized;
   int nr;
   int nc;
-  unsigned type : 6;
-  unsigned hides : 2;
-  unsigned eternal : 1;
-  unsigned read_only : 1;
+  unsigned int type : 6;
+  unsigned int hides : 2;
+  unsigned int eternal : 1;
+  unsigned int read_only : 1;
   string nm;
   string const_type;
 };
 
 // A symbol table.
 
 #define SYMTAB_LOCAL_SCOPE 1
 #define SYMTAB_GLOBAL_SCOPE 2
@@ -298,27 +294,28 @@ public:
   void clear (bool clear_user_functions = true);
   int clear (const string& nm, bool clear_user_functions = true);
 
   int size (void) const;
 
   symbol_record_info *
   long_list (int& count, const string_vector& pats = string_vector (),
 	     int npats = 0, bool sort = false,
-	     unsigned type = SYMTAB_ALL_TYPES,
-	     unsigned scope = SYMTAB_ALL_SCOPES) const;
+	     unsigned int type = SYMTAB_ALL_TYPES,
+	     unsigned int scope = SYMTAB_ALL_SCOPES) const;
 
   string_vector
   list (int& count, const string_vector& pats = string_vector (),
-	int npats = 0, bool sort = false, unsigned type = SYMTAB_ALL_TYPES,
-	unsigned scope = SYMTAB_ALL_SCOPES) const;
+	int npats = 0, bool sort = false,
+	unsigned int type = SYMTAB_ALL_TYPES,
+	unsigned int scope = SYMTAB_ALL_SCOPES) const;
 
   symbol_record **glob (int& count, const string& pat = string ("*"),
-			unsigned type = SYMTAB_ALL_TYPES,
-			unsigned scope = SYMTAB_ALL_SCOPES) const;
+			unsigned int type = SYMTAB_ALL_TYPES,
+			unsigned int scope = SYMTAB_ALL_SCOPES) const;
 
   void push_context (void);
   void pop_context (void);
 
 private:
 
   unsigned int hash (const string& s);
 
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -74,24 +74,24 @@ LOSE! LOSE!
 #if defined (USE_READLINE)
 #include <readline/readline.h>
 #include <readline/tilde.h>
 #endif
 
 extern char *term_clrpag;
 extern "C" void _rl_output_character_function ();
 
+#include "lo-mappers.h"
 #include "mach-info.h"
 #include "oct-math.h"
 
 #include "defun.h"
 #include "error.h"
 #include "help.h"
 #include "input.h"
-#include "mappers.h"
 #include "oct-obj.h"
 #include "pathlen.h"
 #include "ov.h"
 #include "sysdep.h"
 #include "toplev.h"
 #include "utils.h"
 
 #ifndef STDIN_FILENO
