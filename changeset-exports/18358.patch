# HG changeset patch
# User Rik <rik@octave.org>
# Date 1390543282 28800
#      Thu Jan 23 22:01:22 2014 -0800
# Branch stable
# Node ID adb7c7e6a4a19ec418f58080c9b611cdd4d8b5cf
# Parent  159ddd7ce1b37e53c4b9adbdad7a2256f5dd8085
doc: Re-write bits of External Code Interface chapter.

* external.txi: Re-write bits of External Code Interface chapter.

* examples/standalonebuiltin.cc: Place std::endl on same line as text
to make code sample take up less space in the manual.

diff --git a/doc/interpreter/external.txi b/doc/interpreter/external.txi
--- a/doc/interpreter/external.txi
+++ b/doc/interpreter/external.txi
@@ -456,17 +456,17 @@ else if (args(0).is_dq_string ())
 
 Note, however, that both types of strings are represented by the
 @code{charNDArray} type, and so when assigning to an
 @code{octave_value}, the type of string should be specified.  For example:
 
 @example
 @group
 octave_value_list retval;
-charNDArray c;
+charNDArray ch;
 @dots{}
 // Create single quoted string
 retval(1) = octave_value (ch);        // default constructor is sq_string
            OR
 retval(1) = octave_value (ch, '\'');  // explicitly create sq_string
 
 // Create a double quoted string
 retval(0) = octave_value (ch, '"');
@@ -670,17 +670,18 @@ The second alternative is to create a sp
 amount of space and then fill in the values.  Both techniques have their
 advantages and disadvantages.
 
 Below is an example of creating a small sparse matrix using the first
 technique
 
 @example
 @group
-int nz = 4, nr = 3, nc = 4;
+int nz, nr, nc;
+nz = 4, nr = 3, nc = 4;
 
 ColumnVector ridx (nz);
 ColumnVector cidx (nz);
 ColumnVector data (nz);
 
 ridx(0) = 0; cidx(0) = 0; data(0) = 1; 
 ridx(1) = 0; cidx(1) = 1; data(1) = 2; 
 ridx(2) = 1; cidx(2) = 3; data(2) = 3; 
@@ -706,17 +707,18 @@ extremely memory constrained problems th
 technique for creating a sparse matrix.
 
 The alternative is to first create a sparse matrix with the desired
 number of non-zero elements and then later fill those elements in.
 Sample code:
 
 @example
 @group
-int nz = 4, nr = 3, nc = 4;
+int nz, nr, nc;
+nz = 4, nr = 3, nc = 4;
 SparseMatrix sm (nr, nc, nz);
 sm(0,0) = 1; sm(0,1) = 2; sm(1,3) = 3; sm(2,3) = 4;
 @end group
 @end example
 
 This creates the same matrix as previously.  Again, although not
 strictly necessary, it is significantly faster if the sparse matrix is
 created and the elements are added in column-major ordering.  The reason
@@ -725,17 +727,18 @@ of known elements then no element in the
 the new element to be inserted; Only the column indexes need to be updated.
 
 There are a few further points to note about this method of creating
 a sparse matrix.  First, it is possible to create a sparse matrix
 with fewer elements than are actually inserted in the matrix.  Therefore,
 
 @example
 @group
-int nz = 4, nr = 3, nc = 4;
+int nr, nc;
+nr = 3, nc = 4;
 SparseMatrix sm (nr, nc, 0);
 sm(0,0) = 1; sm(0,1) = 2; sm(1,3) = 3; sm(2,3) = 4;
 @end group
 @end example
 
 @noindent 
 is perfectly valid.  However, it is a very bad idea because as each new
 element is added to the sparse matrix the matrix needs to request more
@@ -754,17 +757,18 @@ from the matrix.  The removal of zero el
 controlled by setting the argument of the @code{maybe_compress} function
 to be @code{true}.  However, the cost of removing the zeros is high because it
 implies re-sorting the elements.  If possible, it is better
 if the user does not add the unnecessary zeros in the first place.
 An example of the use of @code{maybe_compress} is
 
 @example
 @group
-int nz = 6, nr = 3, nc = 4;
+int nz, nr, nc;
+nz = 6, nr = 3, nc = 4;
 
 SparseMatrix sm1 (nr, nc, nz);
 sm1(0,0) = 1; sm1(0,1) = 2; sm1(1,3) = 3; sm1(2,3) = 4;
 sm1.maybe_compress ();  // No zero elements were added
 
 SparseMatrix sm2 (nr, nc, nz);
 sm2(0,0) = 1; sm2(0,1) = 2; sm(0,2) = 0; sm(1,2) = 0;
 sm1(1,3) = 3; sm1(2,3) = 4;
@@ -777,17 +781,18 @@ possible as it will slow the creation of
 
 A third means of creating a sparse matrix is to work directly with
 the data in compressed row format.  An example of this technique might
 be
 
 @example
 octave_value arg;
 @dots{}
-int nz = 6, nr = 3, nc = 4;   // Assume we know the max # nz
+int nz, nr, nc;
+nz = 6, nr = 3, nc = 4;   // Assume we know the max # nz
 SparseMatrix sm (nr, nc, nz);
 Matrix m = arg.matrix_value ();
 
 int ii = 0;
 sm.cidx (0) = 0;
 for (int j = 1; j < nc; j++)
   @{
     for (int i = 0; i < nr; i++)
@@ -811,17 +816,18 @@ which is probably the most efficient mea
 Finally, it might sometimes arise that the amount of storage initially
 created is insufficient to completely store the sparse matrix.  Therefore,
 the method @code{change_capacity} exists to reallocate the sparse memory.
 The above example would then be modified as
 
 @example
 octave_value arg;
 @dots{}
-int nz = 6, nr = 3, nc = 4;   // Assume we know the max # nz
+int nz, nr, nc;
+nz = 6, nr = 3, nc = 4;   // Assume we know the max # nz
 SparseMatrix sm (nr, nc, nz);
 Matrix m = arg.matrix_value ();
 
 int ii = 0;
 sm.cidx (0) = 0;
 for (int j = 1; j < nc; j++)
   @{
     for (int i = 0; i < nr; i++)
@@ -1108,19 +1114,19 @@ specialized input validation functions o
 
 @noindent
 An example of its use is:
 
 @example
 @group
 paramdemo ([1, 2, NaN, Inf])
 @result{} Properties of input array:
-      includes Inf or NaN values
-      includes other values than 1 and 0
-      includes only int, Inf or NaN values
+     includes Inf or NaN values
+     includes other values than 1 and 0
+     includes only int, Inf or NaN values
 @end group
 @end example
 
 @node Exception and Error Handling in Oct-Files
 @subsection Exception and Error Handling in Oct-Files
 
 Another important feature of Octave is its ability to react to the user
 typing @key{Control-C} even during calculations.  This ability is based on the
@@ -1487,18 +1493,18 @@ file @file{mystring.c}, as shown below.
 @end example
 
 @noindent
 An example of its expected output is
 
 @example
 @group
 mystring (["First String"; "Second String"])
-@result{} s1 = Second String
-        First String
+@result{} Second String
+   First String
 @end group
 @end example
 
 Other functions in the mex interface for handling character strings are
 @code{mxCreateString}, @code{mxArrayToString}, and
 @code{mxCreateCharMatrixFromStrings}.  In a mex-file, a character string
 is considered to be a vector rather than a matrix.  This is perhaps an
 arbitrary distinction as the data in the mxArray for the matrix is
@@ -1598,42 +1604,32 @@ found in the file @file{mystruct.c} show
 @EXAMPLEFILE(mystruct.c)
 @end example
 
 An example of the behavior of this function within Octave is then
 
 @example
 a(1).f1 = "f11"; a(1).f2 = "f12"; 
 a(2).f1 = "f21"; a(2).f2 = "f22";
-b = mystruct (a)
-@result{} field f1(0) = f11
+b = mystruct (a);
+@result{}  field f1(0) = f11
     field f1(1) = f21
     field f2(0) = f12
     field f2(1) = f22
-    b =
-    @{
-      this =
+b
+@result{} 2x2 struct array containing the fields:
 
-      (,
-        [1] = this1
-        [2] = this2
-        [3] = this3
-        [4] = this4
-      ,)
+     this
+     that
 
-      that =
+b(3)
+@result{} scalar structure containing the fields:
 
-      (,
-        [1] = that1
-        [2] = that2
-        [3] = that3
-        [4] = that4
-      ,)
-
-    @}
+     this = this3
+     that = that3
 @end example
 
 @node Sparse Matrices with Mex-Files
 @subsection Sparse Matrices with Mex-Files
 
 The Octave format for sparse matrices is identical to the mex format in
 that it is a compressed column sparse format.  Also in both, sparse
 matrices are required to be two-dimensional.  The only difference is that
@@ -1683,16 +1679,28 @@ only contain the non-zero values of the 
 to the rows of the non-zero elements, and this is given by
 @code{mxGetIr}.  A complete example of the use of sparse matrices in
 mex-files is given by the file @file{mysparse.c} shown below.
 
 @example
 @EXAMPLEFILE(mysparse.c)
 @end example
 
+A sample usage of @code{mysparse} is
+
+@example
+@group
+sm = sparse ([1, 0; 0, pi]);
+mysparse (sm)
+@result{}
+Matrix is 2-by-2 real sparse matrix with 2 elements
+last non-zero element (2, 2) = 3.14159
+@end group
+@end example
+
 @node Calling Other Functions in Mex-Files
 @subsection Calling Other Functions in Mex-Files
 
 It is possible to call other Octave functions from within a mex-file
 using @code{mexCallMATLAB}.  An example of the use of @code{mexCallMATLAB}
 can be see in the example below.
 
 @example
diff --git a/examples/standalonebuiltin.cc b/examples/standalonebuiltin.cc
--- a/examples/standalonebuiltin.cc
+++ b/examples/standalonebuiltin.cc
@@ -1,33 +1,28 @@
 #include <iostream>
 #include <octave/oct.h>
 #include <octave/builtin-defun-decls.h>
 
 int
 main (void)
 {
-
   int n = 2;
   Matrix a_matrix = Matrix (n, n);
 
   for (octave_idx_type i = 0; i < n; i++)
     for (octave_idx_type j = 0; j < n; j++)
       a_matrix(i,j) = (i + 1) * 10 + (j + 1);
 
-  std::cout << "This is a matrix:" 
-            << std::endl 
-            << a_matrix
-            << std::endl;
+  std::cout << "This is a matrix:" << std::endl 
+            << a_matrix            << std::endl;
 
   octave_value_list in;
   in(0) = a_matrix;
 
   octave_value_list out = Fnorm (in, 1);
   double norm_of_the_matrix = out(0).double_value ();
 
-  std::cout << "This is the norm of the matrix:" 
-            << std::endl 
-            << norm_of_the_matrix
-            << std::endl;
+  std::cout << "This is the norm of the matrix:" << std::endl 
+            << norm_of_the_matrix                << std::endl;
   
   return 0;
 }
