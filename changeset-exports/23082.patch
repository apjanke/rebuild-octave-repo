# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1484932331 18000
#      Fri Jan 20 12:12:11 2017 -0500
# Branch stable
# Node ID e8d64dce0afddc6a009021e0c027b6a3675dd4ec
# Parent  be0ae04721bfb64c4f736610e428930d9c44192b
maint: strip trailing whitespace from source files.

diff --git a/doc/interpreter/external.txi b/doc/interpreter/external.txi
--- a/doc/interpreter/external.txi
+++ b/doc/interpreter/external.txi
@@ -629,17 +629,17 @@ is a great way of turning a sparse matri
 way at that since it reallocates the sparse object for each zero element in the
 matrix.
 
 A simple way of preventing the above from happening is to create a temporary
 constant version of the sparse matrix.  Note that only the container for the
 sparse matrix will be copied, while the actual representation of the data will
 be shared between the two versions of the sparse matrix; This is not a costly
 operation.  The example above, re-written to prevent sparse-to-dense
-conversion, is 
+conversion, is
 
 @example
 @group
 SparseMatrix sm;
 @dots{}
 const SparseMatrix tmp (sm);
 for (int j = 0; j < nc; j++)
   for (int i = 0; i < nr; i++)
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -6254,17 +6254,17 @@ axes::properties::update_aspectratios (v
         {
           normalized_aspectratios (pba, da, dx, dy, dz);
           plotboxaspectratio.set (pba, false);
         }
     }
 }
 
 void
-axes::properties::update_label_color (handle_property label, 
+axes::properties::update_label_color (handle_property label,
                                       color_property col)
 {
   gh_manager::get_object (label.handle_value ()).set ("color", col.get ());
 }
 
 void
 axes::properties::update_font (void)
 {
diff --git a/src/shared-fcns.h b/src/shared-fcns.h
--- a/src/shared-fcns.h
+++ b/src/shared-fcns.h
@@ -40,17 +40,17 @@ w32_get_octave_home (void)
 
   std::string bin_dir;
 
   char namebuf[MAX_PATH+1];
   if (GetModuleFileName (GetModuleHandle (NULL), namebuf, MAX_PATH))
     {
       namebuf[MAX_PATH] = '\0';
 
-      std::string exe_name = namebuf; 
+      std::string exe_name = namebuf;
       size_t pos = exe_name.rfind ("\\");
 
       if (pos != std::string::npos)
         bin_dir = exe_name.substr (0, pos + 1);
     }
 
   if (! bin_dir.empty ())
     {
