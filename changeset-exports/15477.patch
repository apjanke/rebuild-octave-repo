# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1349246612 14400
#      Wed Oct 03 02:43:32 2012 -0400
# Node ID 8b5fc510c6d6ac856a20bab5f8f1c3d2f62541f7
# Parent  7760d5eff9b2821a419a365059be58e7133707fc
don't use bind_internal_variable when handling -x option

* octave.cc (echo_executing_commands): Delete static variable.
(octave_process_command_line): Call Fecho_executing_commands
directly here for -H option.
(octave_initialize_interpreter): Don't call bind_internal_variable to
set echo_executing_commands variable here.
(octave_execute_interpreter): Call Fecho_executing_commands directly
here instead of using bind_internal_variable.

diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -141,21 +141,16 @@ static bool forced_line_editing = false;
 // If TRUE, initialize history list from saved history file.
 // (--no-history; -H)
 static bool read_history_file = true;
 
 // The value of "path" specified on the command line.
 // (--path; -p)
 static std::list<std::string> command_line_path;
 
-// Flags used to determine what commands should be echoed when they are
-// parsed and executed.
-// (--echo-commands; -x)
-static int echo_executing_commands = 0;
-
 // The file used for the doc string cache.
 // (--doc-cache-file)
 static std::string doc_cache_file;
 
 // The value for "EXEC_PATH" specified on the command line.
 // (--exec-path)
 static std::string exec_path;
 
@@ -756,18 +751,20 @@ octave_process_command_line (int argc, c
             command_line_path.push_back (optarg);
           break;
 
         case 'q':
           inhibit_startup_message = true;
           break;
 
         case 'x':
-          echo_executing_commands
-            = (ECHO_SCRIPTS | ECHO_FUNCTIONS | ECHO_CMD_LINE);
+          {
+            int val = ECHO_SCRIPTS | ECHO_FUNCTIONS | ECHO_CMD_LINE;
+            Fecho_executing_commands (octave_value (val));
+          }
           break;
 
         case 'v':
           print_version_and_exit ();
           break;
 
         case BUILT_IN_DOCSTRINGS_FILE_OPTION:
           if (optarg)
@@ -931,20 +928,16 @@ octave_initialize_interpreter (int argc,
   install_ops ();
 
   install_builtins ();
 
   for (std::list<std::string>::const_iterator it = command_line_path.begin ();
        it != command_line_path.end (); it++)
     load_path::set_command_line_path (*it);
 
-  if (echo_executing_commands)
-    bind_internal_variable ("echo_executing_commands",
-                            echo_executing_commands);
-
   if (! doc_cache_file.empty ())
     bind_internal_variable ("doc_cache_file", doc_cache_file);
 
   if (! exec_path.empty ())
     set_exec_path (exec_path);
 
   if (! image_path.empty ())
     set_image_path (image_path);
@@ -1062,17 +1055,17 @@ octave_execute_interpreter (void)
   // has forced interactive behavior.
 
   if (! interactive && forced_interactive)
     {
       command_editor::blink_matching_paren (false);
 
       // FIXME -- is this the right thing to do?
 
-      bind_internal_variable ("echo_executing_commands", ECHO_CMD_LINE);
+      Fecho_executing_commands (octave_value (ECHO_CMD_LINE));
     }
 
   if (octave_embedded)
     {
       // FIXME -- do we need to do any cleanup here before
       // returning?  If we don't, what will happen to Octave functions
       // that have been registered to execute with atexit, for example?
 
