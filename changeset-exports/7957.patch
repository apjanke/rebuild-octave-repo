# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1216668209 14400
#      Mon Jul 21 15:23:29 2008 -0400
# Node ID ba2e00a216e8baadd7e26be233813c4034611b15
# Parent  0da8455b31c17295fd37701c0b30d8f273a5b0b3
Do not use "error" in octave_base_mutex class

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2008-07-21  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* oct-mutex.h (octave_base_mutex::octave_base_mutex): Initialize
+	count to 1, not -1.
+
+	* oct-mutex.cc (octave_base_mutex::lock, octave_base_mutex::unlock):
+	Replace error calls with (*current_liboctave_error_handler).
+
 2008-07-21  John W. Eaton  <jwe@octave.org>
 
 	* regex-match.cc (regex_match::init): Initialize err to 0.
 
 2008-07-19  John W. Eaton  <jwe@octave.org>
 
 	* oct-mutex.h (class octave_base_mutex): New class.
 	(class octave_mutex): Don't use union for rep and count.
diff --git a/liboctave/oct-mutex.cc b/liboctave/oct-mutex.cc
--- a/liboctave/oct-mutex.cc
+++ b/liboctave/oct-mutex.cc
@@ -20,36 +20,36 @@ along with Octave; see the file COPYING.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "oct-mutex.h"
-#include "error.h"
+#include "lo-error.h"
 
 #if defined (HAVE_PTHREAD_H)
 #include <pthread.h>
 #endif
 
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
 #include <windows.h>
 #endif
 
 void
 octave_base_mutex::lock (void)
 {
-  error ("mutex not supported on this platform");
+  (*current_liboctave_error_handler) ("mutex not supported on this platform");
 }
 
 void
 octave_base_mutex::unlock (void)
 {
-  error ("mutex not supported on this platform");
+  (*current_liboctave_error_handler) ("mutex not supported on this platform");
 }
 
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
 
 class
 octave_w32_mutex : public octave_base_mutex
 {
 public:
diff --git a/liboctave/oct-mutex.h b/liboctave/oct-mutex.h
--- a/liboctave/oct-mutex.h
+++ b/liboctave/oct-mutex.h
@@ -26,17 +26,17 @@ along with Octave; see the file COPYING.
 class octave_mutex;
 
 class
 octave_base_mutex
 {
 public:
   friend class octave_mutex;
 
-  octave_base_mutex (void) : count (-1) { }
+  octave_base_mutex (void) : count (1) { }
 
   virtual ~octave_base_mutex (void) { }
 
   virtual void lock (void);
 
   virtual void unlock (void);
 
 private:
