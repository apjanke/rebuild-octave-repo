# HG changeset patch
# User Rik <rik@octave.org>
# Date 1480004004 28800
#      Thu Nov 24 08:13:24 2016 -0800
# Node ID 41a751b19fd29d7d13bfba7bc263b41777b2aabf
# Parent  b7bf2d6d8e5554a537902e1271b468e378dd0af6
# Parent  c3d3a81ad986b017a3461b2b4607c3d95a222e66
maint: Periodic merge of stable to default.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -5504,17 +5504,17 @@ or a range.
 
 DEFUN (norm, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} norm (@var{A})
 @deftypefnx {} {} norm (@var{A}, @var{p})
 @deftypefnx {} {} norm (@var{A}, @var{p}, @var{opt})
 Compute the p-norm of the matrix @var{A}.
 
-If the second argument is missing, @w{@code{p = 2}} is assumed.
+If the second argument is not given, @w{@code{p = 2}} is used.
 
 If @var{A} is a matrix (or sparse matrix):
 
 @table @asis
 @item @var{p} = @code{1}
 1-norm, the largest column sum of the absolute values of @var{A}.
 
 @item @var{p} = @code{2}
@@ -5541,30 +5541,30 @@ If @var{A} is a vector or a scalar:
 
 @item @var{p} = @code{-Inf}
 @code{min (abs (@var{A}))}.
 
 @item @var{p} = @qcode{"fro"}
 Frobenius norm of @var{A}, @code{sqrt (sumsq (abs (A)))}.
 
 @item @var{p} = 0
-Hamming norm - the number of nonzero elements.
+Hamming norm---the number of nonzero elements.
 
 @item other @var{p}, @code{@var{p} > 1}
 p-norm of @var{A}, @code{(sum (abs (@var{A}) .^ @var{p})) ^ (1/@var{p})}.
 
 @item other @var{p} @code{@var{p} < 1}
 the p-pseudonorm defined as above.
 @end table
 
 If @var{opt} is the value @qcode{"rows"}, treat each row as a vector and
 compute its norm.  The result is returned as a column vector.
 Similarly, if @var{opt} is @qcode{"columns"} or @qcode{"cols"} then
 compute the norms of each column and return a row vector.
-@seealso{cond, svd}
+@seealso{normest, normest1, cond, svd}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
 
   octave_value x_arg = args(0);
diff --git a/scripts/linear-algebra/condest.m b/scripts/linear-algebra/condest.m
--- a/scripts/linear-algebra/condest.m
+++ b/scripts/linear-algebra/condest.m
@@ -73,17 +73,17 @@
 ## @dots{})}.
 ##
 ## The principal output is the 1-norm condition number estimate @var{cest}.
 ##
 ## The optional second output is an approximate null vector when @var{cest} is
 ## large; it satisfies the equation
 ## @code{norm (A*v, 1) == norm (A, 1) * norm (@var{v}, 1) / @var{est}}.
 ##
-## Algorithm Note:  @code{condest} uses a randomized algorithm to approximate
+## Algorithm Note: @code{condest} uses a randomized algorithm to approximate
 ## the 1-norms.  Therefore, if consistent results are required, the
 ## @qcode{"state"} of the random generator should be fixed before invoking
 ## @code{condest}.
 ##
 ## References:
 ##
 ## @itemize
 ## @item
diff --git a/scripts/linear-algebra/normest.m b/scripts/linear-algebra/normest.m
--- a/scripts/linear-algebra/normest.m
+++ b/scripts/linear-algebra/normest.m
@@ -13,30 +13,31 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {} {@var{n} =} normest (@var{A})
-## @deftypefnx {} {@var{n} =} normest (@var{A}, @var{tol})
-## @deftypefnx {} {[@var{n}, @var{c}] =} normest (@dots{})
+## @deftypefn  {} {@var{nest} =} normest (@var{A})
+## @deftypefnx {} {@var{nest} =} normest (@var{A}, @var{tol})
+## @deftypefnx {} {[@var{nest}, @var{iter}] =} normest (@dots{})
 ## Estimate the 2-norm of the matrix @var{A} using a power series analysis.
 ##
 ## This is typically used for large matrices, where the cost of calculating
 ## @code{norm (@var{A})} is prohibitive and an approximation to the 2-norm is
 ## acceptable.
 ##
 ## @var{tol} is the tolerance to which the 2-norm is calculated.  By default
 ## @var{tol} is 1e-6.
 ##
-## The optional output @var{c} returns the number of iterations needed for
-## @code{normest} to converge.
+## The optional output @var{iter} returns the number of iterations that were
+## required for @code{normest} to converge.
+## @seealso{normest1, norm, cond, condest}
 ## @end deftypefn
 
 function [n, c] = normest (A, tol = 1e-6)
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
 
diff --git a/scripts/linear-algebra/normest1.m b/scripts/linear-algebra/normest1.m
--- a/scripts/linear-algebra/normest1.m
+++ b/scripts/linear-algebra/normest1.m
@@ -12,91 +12,91 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {} {@var{c} =} normest1 (@var{A})
-## @deftypefnx {} {@var{c} =} normest1 (@var{A}, @var{t})
-## @deftypefnx {} {@var{c} =} normest1 (@var{A}, @var{t}, @var{x0})
-## @deftypefnx {} {@var{c} =} normest1 (@var{Afun}, @var{t}, @var{x0}, @var{p1}, @var{p2}, @dots{})
-## @deftypefnx {} {[@var{c}, @var{v}] =} normest1 (@var{A}, @dots{})
-## @deftypefnx {} {[@var{c}, @var{v}, @var{w}] =} normest1 (@var{A}, @dots{})
-## @deftypefnx {} {[@var{c}, @var{v}, @var{w}, @var{it}] =} normest1 (@var{A}, @dots{})
+## @deftypefn  {} {@var{nest} =} normest1 (@var{A})
+## @deftypefnx {} {@var{nest} =} normest1 (@var{A}, @var{t})
+## @deftypefnx {} {@var{nest} =} normest1 (@var{A}, @var{t}, @var{x0})
+## @deftypefnx {} {@var{nest} =} normest1 (@var{Afun}, @var{t}, @var{x0}, @var{p1}, @var{p2}, @dots{})
+## @deftypefnx {} {[@var{nest}, @var{v}] =} normest1 (@var{A}, @dots{})
+## @deftypefnx {} {[@var{nest}, @var{v}, @var{w}] =} normest1 (@var{A}, @dots{})
+## @deftypefnx {} {[@var{nest}, @var{v}, @var{w}, @var{iter}] =} normest1 (@var{A}, @dots{})
 ## Estimate the 1-norm of the matrix @var{A} using a block algorithm.
 ##
-## For a medium size matrix @var{A}, @code{norm (@var{A}, 1)} should be
-## used instead.  For a large sparse matrix, when only an estimate of the norm
-## is needed, @code{normest1 (@var{A})} might be faster.  Moreover, it can be
-## used for the estimate of the 1-norm of a linear
-## operator @var{A} when matrix-vector products @code{@var{A} * @var{x}} and
-## @code{@var{A}' * @var{x}} can be cheaply computed.  In this case,
-## instead of the matrix @var{A}, a function
-## @code{@var{Afun} (@var{flag}, @var{x})} can be used.  It should return:
+## @code{normest1} is best for large sparse matrices where only an estimate of
+## the norm is required.  For small to medium sized matrices, consider using
+## @code{norm (@var{A}, 1)}.  In addition, @code{normest1} can be used for the
+## estimate of the 1-norm of a linear operator @var{A} when matrix-vector
+## products @code{@var{A} * @var{x}} and @code{@var{A}' * @var{x}} can be
+## cheaply computed.  In this case, instead of the matrix @var{A}, a function
+## @code{@var{Afun} (@var{flag}, @var{x})} is used; it must return:
 ##
 ## @itemize @bullet
 ## @item
 ## the dimension @var{n} of @var{A}, if @var{flag} is @qcode{"dim"}
 ##
 ## @item
 ## true if @var{A} is a real operator, if @var{flag} is @qcode{"real"}
 ##
 ## @item
 ## the result @code{@var{A} * @var{x}}, if @var{flag} is @qcode{"notransp"}
 ##
 ## @item
 ## the result @code{@var{A}' * @var{x}}, if @var{flag} is @qcode{"transp"}
 ## @end itemize
 ##
-## A typical case is @var{A} defined by @code{@var{b} ^ @var{m}},
-## in which the result @code{@var{A} * @var{x}} can be computed without
-## even forming explicitly @code{@var{b} ^ @var{m}} by:
+## A typical case is @var{A} defined by @code{@var{b} ^ @var{m}}, in which the
+## result @code{@var{A} * @var{x}} can be computed without even forming
+## explicitly @code{@var{b} ^ @var{m}} by:
 ##
 ## @example
 ## @group
 ## @var{y} = @var{x};
 ## for @var{i} = 1:@var{m}
 ##   @var{y} = @var{b} * @var{y};
 ## endfor
 ## @end group
 ## @end example
 ##
 ## The parameters @var{p1}, @var{p2}, @dots{} are arguments of
 ## @code{@var{Afun} (@var{flag}, @var{x}, @var{p1}, @var{p2}, @dots{})}.
 ##
-## The default value for @var{t} is 2. The algorithm requires
-## matrix-matrix products with sizes @var{n} x @var{n} and
-## @var{n} x @var{t}.
+## The default value for @var{t} is 2.  The algorithm requires matrix-matrix
+## products with sizes @var{n} x @var{n} and @var{n} x @var{t}.
+##
+## The initial matrix @var{x0} should have columns of unit 1-norm.  The default
+## initial matrix @var{x0} has the first column
+## @code{ones (@var{n}, 1) / @var{n}} and, if @var{t} > 1, the remaining
+## columns with random elements @code{-1 / @var{n}}, @code{1 / @var{n}},
+## divided by @var{n}.
 ##
-## The initial matrix @var{x0} should have columns of unit 1-norm.
-## The default initial matrix @var{x0} has the first column
-## @code{ones (@var{n}, 1) / @var{n}}
-## and, if @var{t} >  1, the remaining columns with random elements
-## @code{-1 / @var{n}}, @code{1 / @var{n}}, divided by @var{n}.
+## On output, @var{nest} is the desired estimate, @var{v} and @var{w}
+## are vectors such that @code{@var{w} = @var{A} * @var{v}}, with
+## @code{norm (@var{w}, 1)} = @code{@var{c} * norm (@var{v}, 1)}.  @var{iter}
+## contains in @code{@var{iter}(1)} the number of iterations (the maximum is
+## hardcoded to 5) and in @code{@var{iter}(2)} the total number of products
+## @code{@var{A} * @var{x}} or @code{@var{A}' * @var{x}} performed by the
+## algorithm.
+##
+## Algorithm Note: @code{normest1} uses random numbers during evaluation.
 ## Therefore, if consistent results are required, the @qcode{"state"} of the
 ## random generator should be fixed before invoking @code{normest1}.
 ##
-## On output, @var{c} is the desired estimate, @var{v} and @var{w}
-## vectors such that @code{@var{w} = @var{A} * @var{v}}, with
-## @code{norm (@var{w}, 1)} = @code{@var{c} * norm (@var{v}, 1)}.
-## @var{it} contains in @code{@var{it}(1)} the number of iterations
-## (the maximum number is hardcoded to 5) and in  @code{@var{it}(2)}
-## the total number of products @code{@var{A} * @var{x}} or
-## @code{@var{A}' * @var{x}} performed by the algorithm.
-##
 ## Reference: @nospell{N. J. Higham and F. Tisseur},
 ## @cite{A block algorithm for matrix 1-norm estimation, with and
 ## application to 1-norm @nospell{pseudospectra}},
 ## @nospell{SIAM J. Matrix Anal. Appl.},
 ## pp. 1185--1201, Vol 21, No. 4, 2000.
 ##
-## @seealso{normest, rand}
+## @seealso{normest, norm, cond, condest}
 ## @end deftypefn
 
 ## Ideally, we would set t and X to their default values but Matlab
 ## compatibility would require we set the default even when they are
 ## empty.
 function [est, v, w, k] = normest1 (A, t = [], x0 = [], varargin)
 
   if (nargin < 1)
