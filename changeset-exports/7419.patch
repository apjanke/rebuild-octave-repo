# HG changeset patch
# User jwe
# Date 1201249488 0
#      Fri Jan 25 08:24:48 2008 +0000
# Node ID f62fb98f1da27915b0da38809350a97eb7a3d760
# Parent  42b70df74c215113f8aadc17832276ece700bfab
[project @ 2008-01-25 08:24:48 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2008-01-25  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* graphics.h.in (base_properties::get_backend,
+	base_graphics_object::get_backend, graphics_backend::get_backend):
+	New methods for convenient access to the backend.
+	(figure::get_backend, figure::set_backend): Remove.
+	* graphics.cc (base_properties::get_backend): New method.
+	(Fdrawnow): Use graphics_object::get_backend to simplify code.
+
 2008-01-24  Pascal Dupuis  <Pascal.Dupuis@worldonline.be>
 
 	* mxarray.h.in: Include <cstring>.
 
 2008-01-22  John W. Eaton  <jwe@octave.org>
 
 	* graphics.cc (clear_drawnow_request): New function.
 	(Fdrawnow): Add it to the unwind_protect stack.
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -1144,16 +1144,27 @@ void
 base_properties::delete_children (void)
 {
   octave_idx_type n = children.numel ();
 
   for (octave_idx_type i = 0; i < n; i++)
     gh_manager::free (children(i));
 }
 
+graphics_backend
+base_properties::get_backend (void) const
+{
+  graphics_object go = gh_manager::get_object (get_parent ());
+
+  if (go)
+    return go.get_backend ();
+  else
+    return graphics_backend ();
+}
+
 // ---------------------------------------------------------------------
 
 class gnuplot_backend : public base_graphics_backend
 {
 public:
   gnuplot_backend (void)
       : base_graphics_backend ("gnuplot") { }
 
@@ -2461,19 +2472,17 @@ Undocumented internal function.\n\
 		      if (! error_state)
 			{
 			  graphics_handle h = gcf ();
 
 			  if (h.ok ())
 			    {
 			      graphics_object go = gh_manager::get_object (h);
 
-			      figure::properties& fprops = dynamic_cast<figure::properties&> (go.get_properties ());
-
-			      fprops.get_backend ()
+			      go.get_backend ()
 				.print_figure (h, term, file, mono, debug_file);
 			    }
 			  else
 			    error ("drawnow: nothing to draw");
 			}
 		      else
 			error ("drawnow: invalid debug_file, expected a string value");
 		    }
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -950,16 +950,131 @@ public:
   Octave_map as_struct (const std::string& prefix_arg) const;
 
 private:
   plist_map_type plist_map;
 };
 
 // ---------------------------------------------------------------------
 
+class graphics_backend;
+
+class base_graphics_backend
+{
+public:
+  friend class graphics_backend;
+
+public:
+  base_graphics_backend (const std::string& nm)
+      : name (nm), count (0) { }
+
+  virtual ~base_graphics_backend (void) { }
+
+  std::string get_name (void) const { return name; }
+
+  virtual bool is_valid (void) const { return false; }
+
+  virtual void close_figure (const octave_value&) const
+    { error ("close_figure: invalid graphics backend"); }
+
+  virtual void redraw_figure (const graphics_handle&) const
+    { error ("redraw_figure: invalid graphics backend"); }
+
+  virtual void print_figure (const graphics_handle&, const std::string&,
+			     const std::string&, bool,
+			     const std::string& = "") const
+    { error ("print_figure: invalid graphics backend"); }
+
+  virtual Matrix get_canvas_size (const graphics_handle&) const
+    {
+      error ("get_canvas_size: invalid graphics backend");
+      return Matrix (1, 2, 0.0);
+    }
+
+private:
+  std::string name;
+  int count;
+};
+
+class graphics_backend
+{
+public:
+  graphics_backend (void)
+      : rep (new base_graphics_backend ("unknown"))
+    {
+      rep->count++;
+    }
+
+  graphics_backend (base_graphics_backend* b)
+      : rep (b)
+    {
+      rep->count++;
+    }
+
+  graphics_backend (const graphics_backend& b)
+      : rep (b.rep)
+    {
+      rep->count++;
+    }
+
+  ~graphics_backend (void)
+    {
+      if (--rep->count == 0)
+	delete rep;
+    }
+
+  graphics_backend& operator = (const graphics_backend& b)
+    {
+      if (rep != b.rep)
+	{
+	  if (--rep->count == 0)
+	    delete rep;
+
+	  rep = b.rep;
+	  rep->count++;
+	}
+
+      return *this;
+    }
+
+  operator bool (void) const { return rep->is_valid (); }
+
+  std::string get_name (void) const { return rep->get_name (); }
+
+  void close_figure (const octave_value& pstream) const
+    { rep->close_figure (pstream); }
+
+  void redraw_figure (const graphics_handle& fh) const
+    { rep->redraw_figure (fh); }
+  
+  void print_figure (const graphics_handle& fh, const std::string& term,
+		     const std::string& file, bool mono,
+		     const std::string& debug_file = "") const
+    { rep->print_figure (fh, term, file, mono, debug_file); }
+
+  Matrix get_canvas_size (const graphics_handle& fh) const
+    { return rep->get_canvas_size (fh); }
+
+  OCTINTERP_API static graphics_backend default_backend (void);
+
+  static void register_backend (const graphics_backend& b)
+    { available_backends[b.get_name ()] = b; }
+
+  static void unregister_backend (const std::string& name)
+    { available_backends.erase (name); }
+
+private:
+  base_graphics_backend *rep;
+
+private:
+  static std::map<std::string, graphics_backend> available_backends;
+};
+
+// ---------------------------------------------------------------------
+
 class base_graphics_object;
 
 class OCTINTERP_API base_properties
 {
 public:
   base_properties (const std::string& ty = "unknown",
                    const graphics_handle& mh = graphics_handle (),
                    const graphics_handle& p = graphics_handle ())
@@ -1063,16 +1178,18 @@ public:
 
   virtual void adopt (const graphics_handle& h)
   {
     octave_idx_type n = children.numel ();
     children.resize (1, n+1);
     children(n) = h.value ();
   }
 
+  virtual graphics_backend get_backend (void) const;
+
   void set_tag (const octave_value& val) { tag = val; }
 
   void set_parent (const octave_value& val);
 
   void set_modified (const octave_value& val) { __modified__ = val; }
 
   void set_busyaction (const octave_value& val)
   {
@@ -1460,16 +1577,27 @@ public:
         : "unknown");
   }
 
   bool isa (const std::string& go_name) const
   {
     return type () == go_name;
   }
 
+  virtual graphics_backend get_backend (void) const
+  {
+    if (valid_object ())
+      return get_properties ().get_backend ();
+    else
+      {
+	error ("base_graphics_object::get_backend: invalid graphics object");
+	return graphics_backend ();
+      }
+  }
+
 protected:
   // A reference count.
   int count;
 };
 
 class OCTINTERP_API graphics_object
 {
 public:
@@ -1624,133 +1752,20 @@ public:
   }
 
   data_property get_cdata_property (void) const
   {
     const base_properties& props = get_properties ();
     return props.get_cdata_property ();
   }
 
-private:
-  base_graphics_object *rep;
-};
-
-// ---------------------------------------------------------------------
-
-class graphics_backend;
-
-class base_graphics_backend
-{
-public:
-  friend class graphics_backend;
-
-public:
-  base_graphics_backend (const std::string& nm)
-      : name (nm), count (0) { }
-
-  virtual ~base_graphics_backend (void) { }
-
-  std::string get_name (void) const { return name; }
-
-  virtual bool is_valid (void) const { return false; }
-
-  virtual void close_figure (const octave_value&) const
-    { error ("close_figure: invalid graphics backend"); }
-
-  virtual void redraw_figure (const graphics_handle&) const
-    { error ("redraw_figure: invalid graphics backend"); }
-
-  virtual void print_figure (const graphics_handle&, const std::string&,
-			     const std::string&, bool,
-			     const std::string& = "") const
-    { error ("print_figure: invalid graphics backend"); }
-
-  virtual Matrix get_canvas_size (const graphics_handle&) const
-    {
-      error ("get_canvas_size: invalid graphics backend");
-      return Matrix (1, 2, 0.0);
-    }
+  graphics_backend get_backend (void) const { return rep->get_backend (); }
 
 private:
-  std::string name;
-  int count;
-};
-
-class graphics_backend
-{
-public:
-  graphics_backend (void)
-      : rep (new base_graphics_backend ("unknown"))
-    {
-      rep->count++;
-    }
-
-  graphics_backend (base_graphics_backend* b)
-      : rep (b)
-    {
-      rep->count++;
-    }
-
-  graphics_backend (const graphics_backend& b)
-      : rep (b.rep)
-    {
-      rep->count++;
-    }
-
-  ~graphics_backend (void)
-    {
-      if (--rep->count == 0)
-	delete rep;
-    }
-
-  graphics_backend& operator = (const graphics_backend& b)
-    {
-      if (rep != b.rep)
-	{
-	  if (--rep->count == 0)
-	    delete rep;
-
-	  rep = b.rep;
-	  rep->count++;
-	}
-
-      return *this;
-    }
-
-  operator bool (void) const { return rep->is_valid (); }
-
-  std::string get_name (void) const { return rep->get_name (); }
-
-  void close_figure (const octave_value& pstream) const
-    { rep->close_figure (pstream); }
-
-  void redraw_figure (const graphics_handle& fh) const
-    { rep->redraw_figure (fh); }
-  
-  void print_figure (const graphics_handle& fh, const std::string& term,
-		     const std::string& file, bool mono,
-		     const std::string& debug_file = "") const
-    { rep->print_figure (fh, term, file, mono, debug_file); }
-
-  Matrix get_canvas_size (const graphics_handle& fh) const
-    { return rep->get_canvas_size (fh); }
-
-  OCTINTERP_API static graphics_backend default_backend (void);
-
-  static void register_backend (const graphics_backend& b)
-    { available_backends[b.get_name ()] = b; }
-
-  static void unregister_backend (const std::string& name)
-    { available_backends.erase (name); }
-
-private:
-  base_graphics_backend *rep;
-
-private:
-  static std::map<std::string, graphics_backend> available_backends;
+  base_graphics_object *rep;
 };
 
 // ---------------------------------------------------------------------
 
 class OCTINTERP_API root_figure : public base_graphics_object
 {
 public:
   class properties : public base_properties
@@ -2008,22 +2023,16 @@ public:
   }
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
 
-  graphics_backend get_backend (void) const
-    { return xproperties.get_backend (); }
-
-  void set_backend (const graphics_backend& b)
-    { xproperties.set_backend (b); }
-
 private:
   property_list default_properties;
 };
 
 // ---------------------------------------------------------------------
 
 class OCTINTERP_API axes : public base_graphics_object
 {
