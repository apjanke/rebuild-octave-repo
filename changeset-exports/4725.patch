# HG changeset patch
# User jwe
# Date 1074876171 0
#      Fri Jan 23 16:42:51 2004 +0000
# Node ID fa612b2cbfe91c067a6a0d2145b957fc32b67d0c
# Parent  bdacd0383fbd0536cc6213f3b10281f317904030
[project @ 2004-01-23 16:42:51 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2004-01-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* EIG.cc, EIG.h (EIG::init, EIG::symmetric_init, EIG::hermitian_init):
+	New arg, calc_eigenvectors.
+	* EIG.h (EIG:EIG): New optional arg, calc_eigenvectors.
+	Based on patch from David Bateman <dbateman@free.fr>.
+
 2004-01-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array.cc (Array<T>::assign2, Array<T>::assignN):
 	For X(I) = RHS, don't restrict I to fewer elements than X.
 
 	* Array.cc (Array<T>::assign2): Simplify indexing for X(I) = RHS case.
 
 2004-01-22  Petter Risholm  <risholm@stud.ntnu.no>
diff --git a/liboctave/EIG.cc b/liboctave/EIG.cc
--- a/liboctave/EIG.cc
+++ b/liboctave/EIG.cc
@@ -66,20 +66,20 @@ extern "C"
 			   F77_CONST_CHAR_ARG_DECL,
 			   const int&, Complex*, const int&, double*,
 			   Complex*, const int&, double*, int&
 			   F77_CHAR_ARG_LEN_DECL
 			   F77_CHAR_ARG_LEN_DECL);
 }
 
 int
-EIG::init (const Matrix& a)
+EIG::init (const Matrix& a, bool calc_ev)
 {
   if (a.is_symmetric ())
-    return symmetric_init (a);
+    return symmetric_init (a, calc_ev);
 
   int n = a.rows ();
 
   if (n != a.cols ())
     {
       (*current_liboctave_error_handler) ("EIG requires square matrix");
       return -1;
     }
@@ -90,85 +90,86 @@ EIG::init (const Matrix& a)
   double *tmp_data = atmp.fortran_vec ();
 
   Array<double> wr (n);
   double *pwr = wr.fortran_vec ();
 
   Array<double> wi (n);
   double *pwi = wi.fortran_vec ();
 
-  Matrix vr (n, n);
+  int nvr = calc_ev ? n : 0;
+  Matrix vr (nvr, nvr);
   double *pvr = vr.fortran_vec ();
 
   // XXX FIXME XXX -- it might be possible to choose a better value of
   // lwork that would result in more efficient computations.
 
   int lwork = 8*n;
   Array<double> work (lwork);
   double *pwork = work.fortran_vec ();
 
   double *dummy = 0;
   int idummy = 1;
 
   F77_XFCN (dgeev, DGEEV, (F77_CONST_CHAR_ARG2 ("N", 1),
-			   F77_CONST_CHAR_ARG2 ("V", 1),
+			   F77_CONST_CHAR_ARG2 (calc_ev ? "V" : "N", 1),
 			   n, tmp_data, n, pwr, pwi, dummy,
 			   idummy, pvr, n, pwork, lwork, info
 			   F77_CHAR_ARG_LEN (1)
 			   F77_CHAR_ARG_LEN (1)));
 
   if (f77_exception_encountered || info < 0)
     (*current_liboctave_error_handler) ("unrecoverable error in dgeev");
   else
     {
       if (info > 0)
 	(*current_liboctave_error_handler) ("dgeev failed to converge");
       else
 	{
 	  lambda.resize (n);
-	  v.resize (n, n);
+	  v.resize (nvr, nvr);
 
 	  for (int j = 0; j < n; j++)
 	    {
 	      if (wi.elem (j) == 0.0)
 		{
 		  lambda.elem (j) = Complex (wr.elem (j));
-		  for (int i = 0; i < n; i++)
+		  for (int i = 0; i < nvr; i++)
 		    v.elem (i, j) = vr.elem (i, j);
 		}
 	      else
 		{
 		  if (j+1 >= n)
 		    {
 		      (*current_liboctave_error_handler)
 			("EIG: internal error");
 		      return -1;
 		    }
 
 		  lambda.elem(j) = Complex (wr.elem(j), wi.elem(j));
 		  lambda.elem(j+1) = Complex (wr.elem(j+1), wi.elem(j+1));
 
-		  for (int i = 0; i < n; i++)
+		  for (int i = 0; i < nvr; i++)
 		    {
 		      double real_part = vr.elem (i, j);
 		      double imag_part = vr.elem (i, j+1);
 		      v.elem (i, j) = Complex (real_part, imag_part);
 		      v.elem (i, j+1) = Complex (real_part, -imag_part);
 		    }
 		  j++;
 		}
 	    }
 	}
     }
 
   return info;
 }
 
 int
-EIG::symmetric_init (const Matrix& a)
+EIG::symmetric_init (const Matrix& a, bool calc_ev)
 {
   int n = a.rows ();
 
   if (n != a.cols ())
     {
       (*current_liboctave_error_handler) ("EIG requires square matrix");
       return -1;
     }
@@ -183,40 +184,40 @@ EIG::symmetric_init (const Matrix& a)
 
   // XXX FIXME XXX -- it might be possible to choose a better value of
   // lwork that would result in more efficient computations.
 
   int lwork = 8*n;
   Array<double> work (lwork);
   double *pwork = work.fortran_vec ();
 
-  F77_XFCN (dsyev, DSYEV, (F77_CONST_CHAR_ARG2 ("V", 1),
+  F77_XFCN (dsyev, DSYEV, (F77_CONST_CHAR_ARG2 (calc_ev ? "V" : "N", 1),
 			   F77_CONST_CHAR_ARG2 ("U", 1),
 			   n, tmp_data, n, pwr, pwork, lwork, info
 			   F77_CHAR_ARG_LEN (1)
 			   F77_CHAR_ARG_LEN (1)));
 
   if (f77_exception_encountered || info < 0)
     (*current_liboctave_error_handler) ("unrecoverable error in dsyev");
   else if (info > 0)
     (*current_liboctave_error_handler) ("dsyev failed to converge");
   else
     {
       lambda = ComplexColumnVector (wr);
-      v = ComplexMatrix (atmp);
+      v = calc_ev ? ComplexMatrix (atmp) : ComplexMatrix ();
     }
 
   return info;
 }
 
 int
-EIG::init (const ComplexMatrix& a)
+EIG::init (const ComplexMatrix& a, bool calc_ev)
 {
   if (a.is_hermitian ())
-    return hermitian_init (a);
+    return hermitian_init (a, calc_ev);
 
   int n = a.rows ();
 
   if (n != a.cols ())
     {
       (*current_liboctave_error_handler) ("EIG requires square matrix");
       return -1;
     }
@@ -224,17 +225,18 @@ EIG::init (const ComplexMatrix& a)
   int info = 0;
 
   ComplexMatrix atmp = a;
   Complex *tmp_data = atmp.fortran_vec ();
 
   ComplexColumnVector w (n);
   Complex *pw = w.fortran_vec ();
 
-  ComplexMatrix vtmp (n, n);
+  int nvr = calc_ev ? n : 0;
+  ComplexMatrix vtmp (nvr, nvr);
   Complex *pv = vtmp.fortran_vec ();
 
   // XXX FIXME XXX -- it might be possible to choose a better value of
   // lwork that would result in more efficient computations.
 
   int lwork = 8*n;
   Array<Complex> work (lwork);
   Complex *pwork = work.fortran_vec ();
@@ -242,17 +244,17 @@ EIG::init (const ComplexMatrix& a)
   int lrwork = 2*n;
   Array<double> rwork (lrwork);
   double *prwork = rwork.fortran_vec ();
 
   Complex *dummy = 0;
   int idummy = 1;
 
   F77_XFCN (zgeev, ZGEEV, (F77_CONST_CHAR_ARG2 ("N", 1),
-			   F77_CONST_CHAR_ARG2 ("V", 1),
+			   F77_CONST_CHAR_ARG2 (calc_ev ? "V" : "N", 1),
 			   n, tmp_data, n, pw, dummy, idummy,
 			   pv, n, pwork, lwork, prwork, info
 			   F77_CHAR_ARG_LEN (1)
 			   F77_CHAR_ARG_LEN (1)));
 
   if (f77_exception_encountered || info < 0)
     (*current_liboctave_error_handler) ("unrecoverable error in zgeev");
   else if (info > 0)
@@ -262,17 +264,17 @@ EIG::init (const ComplexMatrix& a)
       lambda = w;
       v = vtmp;
     }
 
   return info;
 }
 
 int
-EIG::hermitian_init (const ComplexMatrix& a)
+EIG::hermitian_init (const ComplexMatrix& a, bool calc_ev)
 {
   int n = a.rows ();
 
   if (n != a.cols ())
     {
       (*current_liboctave_error_handler) ("EIG requires square matrix");
       return -1;
     }
@@ -291,30 +293,30 @@ EIG::hermitian_init (const ComplexMatrix
   int lwork = 8*n;
   Array<Complex> work (lwork);
   Complex *pwork = work.fortran_vec ();
 
   int lrwork = 3*n;
   Array<double> rwork (lrwork);
   double *prwork = rwork.fortran_vec ();
 
-  F77_XFCN (zheev, ZHEEV, (F77_CONST_CHAR_ARG2 ("V", 1),
+  F77_XFCN (zheev, ZHEEV, (F77_CONST_CHAR_ARG2 (calc_ev ? "V" : "N", 1),
 			   F77_CONST_CHAR_ARG2 ("U", 1),
 			   n, tmp_data, n, pwr, pwork, lwork, prwork, info
 			   F77_CHAR_ARG_LEN (1)
 			   F77_CHAR_ARG_LEN (1)));
 
   if (f77_exception_encountered || info < 0)
     (*current_liboctave_error_handler) ("unrecoverable error in zheev");
   else if (info > 0)
     (*current_liboctave_error_handler) ("zheev failed to converge");
   else
     {
       lambda = ComplexColumnVector (wr);
-      v = ComplexMatrix (atmp);
+      v = calc_ev ? ComplexMatrix (atmp) : ComplexMatrix ();
     }
 
   return info;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/EIG.h b/liboctave/EIG.h
--- a/liboctave/EIG.h
+++ b/liboctave/EIG.h
@@ -39,23 +39,27 @@ EIG
 friend class Matrix;
 friend class ComplexMatrix;
 
 public:
 
   EIG (void)
     : lambda (), v () { }
 
-  EIG (const Matrix& a) { init (a); }
+  EIG (const Matrix& a, bool calc_eigenvectors = true)
+    { init (a, calc_eigenvectors); }
 
-  EIG (const Matrix& a, int& info) { info = init (a); }
+  EIG (const Matrix& a, int& info, bool calc_eigenvectors = true)
+    { info = init (a, calc_eigenvectors); }
 
-  EIG (const ComplexMatrix& a) { init (a); }
+  EIG (const ComplexMatrix& a, bool calc_eigenvectors = true)
+    { init (a, calc_eigenvectors); }
 
-  EIG (const ComplexMatrix& a, int& info) { info = init (a); }
+  EIG (const ComplexMatrix& a, int& info, bool calc_eigenvectors = true)
+    { info = init (a, calc_eigenvectors); }
 
   EIG (const EIG& a)
     : lambda (a.lambda), v (a.v) { }
 
   EIG& operator = (const EIG& a)
     {
       if (this != &a)
 	{
@@ -73,21 +77,21 @@ public:
 
   friend std::ostream&  operator << (std::ostream& os, const EIG& a);
 
 private:
 
   ComplexColumnVector lambda;
   ComplexMatrix v;
 
-  int init (const Matrix& a);
-  int init (const ComplexMatrix& a);
+  int init (const Matrix& a, bool calc_eigenvectors);
+  int init (const ComplexMatrix& a, bool calc_eigenvectors);
 
-  int symmetric_init (const Matrix& a);
-  int hermitian_init (const ComplexMatrix& a);
+  int symmetric_init (const Matrix& a, bool calc_eigenvectors);
+  int hermitian_init (const ComplexMatrix& a, bool calc_eigenvectors);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2004-01-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* DLD-FUNCTIONS/eig.cc (Feig): Use new optional arg for EIG to
+	avoid computing eigenvectors if not requested.
+	Based on a patch from David Bateman  <dbateman@free.fr>.
+
 2004-01-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-cell.cc (all_strings): Always compute total required length
 	of retval.
 
 2004-01-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* version.h (OCTAVE_VERSION): Now 2.1.53.
diff --git a/src/DLD-FUNCTIONS/eig.cc b/src/DLD-FUNCTIONS/eig.cc
--- a/src/DLD-FUNCTIONS/eig.cc
+++ b/src/DLD-FUNCTIONS/eig.cc
@@ -76,26 +76,26 @@ Schur decomposition.\n\
 
   if (arg.is_real_type ())
     {
       tmp = arg.matrix_value ();
 
       if (error_state)
 	return retval;
       else
-	result = EIG (tmp);
+	result = EIG (tmp, nargout > 1);
     }
   else if (arg.is_complex_type ())
     {
       ctmp = arg.complex_matrix_value ();
 
       if (error_state)
 	return retval;
       else
-	result = EIG (ctmp);
+	result = EIG (ctmp, nargout > 1);
     }
   else
     {
       gripe_wrong_type_arg ("eig", tmp);
       return retval;
     }
 
   if (nargout == 0 || nargout == 1)
