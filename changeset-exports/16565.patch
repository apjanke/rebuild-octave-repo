# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1366863061 14400
#      Thu Apr 25 00:11:01 2013 -0400
# Node ID e4b94abfeb966825e759867b1bce94bcceda7c58
# Parent  aa5299a1d7700d9355e4d70fe5f60497f029ad72
use generic dialog for cd or addpath question

* dialog.h, dialog.cc (cd_or_addpath_dialog): Delete class.
(QUIWidgetCreator::get_dialog_button): Return QString, not QString*.
Change all uses.
(QUIWidgetCreator::signal_debug_cd_or_addpath): Delete.
(QUIWidgetCreator::create_debug_cd_or_addpath_dialog): Delete.
* file-editor-tab.cc (file_editor_tab::file_in_path): Also use
same_file to compare curr_dir and info.path.
* main-window.h, main-window.cc
(main_window::handle_create_debug_cd_or_addpath_dialog): Delete.
(main_window::connect_uiwidget_links): Delete connection from
uiwidget_creator::create_debug_cd_or_addpath_dialog to
main_window::handle_create_debug_cd_or_addpath_dialog.
* octave-qt-link.cc (octave_qt_link::do_debug_cd_or_addpath_error):
Use generic dialog for cd or addpath question.

diff --git a/libgui/src/dialog.cc b/libgui/src/dialog.cc
--- a/libgui/src/dialog.cc
+++ b/libgui/src/dialog.cc
@@ -398,89 +398,8 @@ InputDialog::buttonCancel_clicked (void)
 }
 
   
 void
 InputDialog::reject (void)
 {
   buttonCancel_clicked ();
 }
-
-
-cd_or_addpath_dialog::cd_or_addpath_dialog (const QString& file,
-                                            const QString& dir,
-                                            bool addpath_option)
-  : QDialog ()
-{
-  QString prompt_string
-    = (addpath_option
-       ? tr ("The file %1 does not exist in the load path.  To debug the function you are editing, you must either change to the directory %2 or add that directory to the load path.").arg(file).arg(dir)
-       : tr ("The file %1 is shadowed by a file with the same name in the load path.  To debug the function you are editing, change to the directory %2.").arg(file).arg(dir));
-
-  QLabel *label = new QLabel (prompt_string);
-  label->setFixedWidth (500);
-  label->setWordWrap (true);
-  //    QIcon *question_mark = new QIcon;
-  QHBoxLayout *horizontalLayout = new QHBoxLayout;
-  //    horizontalLayout->addWidget (question_mark);
-  horizontalLayout->addWidget (label);
-
-  QPushButton *buttonCd = new QPushButton (tr ("Change directory"));
-  QPushButton *buttonAddpath = 0;
-  if (addpath_option)
-    buttonAddpath = new QPushButton (tr ("Add directory to load path"));
-  QPushButton *buttonCancel = new QPushButton (tr ("Cancel"));
-
-  QHBoxLayout *buttonsLayout = new QHBoxLayout;
-  buttonsLayout->addStretch (1);
-  buttonsLayout->addWidget (buttonCd);
-  if (addpath_option)
-    buttonsLayout->addWidget (buttonAddpath);
-  buttonsLayout->addWidget (buttonCancel);
-
-  QVBoxLayout *mainLayout = new QVBoxLayout;
-  mainLayout->addLayout (horizontalLayout);
-  mainLayout->addSpacing (12);
-  mainLayout->addLayout (buttonsLayout);
-  setLayout (mainLayout);
-
-  setWindowTitle (tr ("Change Directory or Add Directory to Load Path"));
-
-  connect (buttonCd, SIGNAL (clicked ()),
-           this, SLOT (buttonCd_clicked ()));
-
-  if (addpath_option)
-    connect (buttonAddpath, SIGNAL (clicked ()),
-             this, SLOT (buttonAddpath_clicked ()));
-
-  connect (buttonCancel, SIGNAL (clicked ()),
-           this, SLOT (buttonCancel_clicked ()));
-
-  connect (this, SIGNAL (finished (int)),
-           &uiwidget_creator, SLOT (dialog_finished (int)));
-}
-
-void
-cd_or_addpath_dialog::buttonCd_clicked (void)
-{
-  emit finished (1);
-  done (QDialog::Accepted);
-}
-
-void
-cd_or_addpath_dialog::buttonAddpath_clicked (void)
-{
-  emit finished (2);
-  done (QDialog::Accepted);
-}
-
-void
-cd_or_addpath_dialog::buttonCancel_clicked (void)
-{
-  emit finished (-1);
-  done (QDialog::Rejected);
-}
-  
-void
-cd_or_addpath_dialog::reject (void)
-{
-  buttonCancel_clicked ();
-}
diff --git a/libgui/src/dialog.h b/libgui/src/dialog.h
--- a/libgui/src/dialog.h
+++ b/libgui/src/dialog.h
@@ -66,17 +66,17 @@ public:
     if (xicon.isEmpty ())
       xicon = "none";
 
     emit create_dialog (message, title, xicon, button, defbutton, role);
   };
 
   int get_dialog_result (void) { return dialog_result; }
 
-  const QString *get_dialog_button (void) { return &dialog_button; }
+  QString get_dialog_button (void) { return dialog_button; }
 
   bool signal_listview (const QStringList& list, const QString& mode,
                         int wd, int ht, const QList<int>& initial,
                         const QString& name, const QStringList& prompt,
                         const QString& ok_string, const QString& cancel_string)
   {
     if (list.isEmpty ())
       return false;
@@ -96,27 +96,16 @@ public:
     if (prompt.isEmpty ())
       return false;
 
     emit create_inputlayout (prompt, title, nr, nc, defaults);
 
     return true;
   };
 
-  // The debug dialog functionality may not really belong here, but it
-  // seems like the easiest thing to do at the moment.
-
-  bool signal_debug_cd_or_addpath (const QString& file, const QString& dir,
-                                   bool addpath_option)
-  {
-    emit create_debug_cd_or_addpath_dialog (file, dir, addpath_option);
-
-    return true;
-  }
-
   const QStringList *get_string_list (void) { return string_list; }
   
   void wait (void)
   {
     // Wait while the user is responding to message box.
     waitcondition.wait (&mutex);
   }
 
@@ -128,18 +117,16 @@ signals:
   void create_listview (const QStringList&, const QString&, int, int,
                         const QIntList&, const QString&, const QStringList&,
                         const QString&, const QString&);
 
   void create_inputlayout (const QStringList&, const QString&,
                            const QFloatList&, const QFloatList&,
                            const QStringList&);
 
-  void create_debug_cd_or_addpath_dialog (const QString&, const QString&, bool);
-
 public slots:
 
   void dialog_button_clicked (QAbstractButton *button);
 
   void list_select_finished (const QIntList& selected,
                              const int button_pressed);
 
   void input_finished (const QStringList& input, const int button_pressed);
@@ -235,29 +222,9 @@ public slots:
 
   void buttonOk_clicked (void);
 
   void buttonCancel_clicked (void);
 
   void reject (void);
 };
 
-class cd_or_addpath_dialog : public QDialog
-{
-  Q_OBJECT
-
-public:
-
-  cd_or_addpath_dialog (const QString& file, const QString& dir,
-                        bool addpath_option);
-
-public slots:
-
-  void buttonCd_clicked (void);
-
-  void buttonAddpath_clicked (void);
-
-  void buttonCancel_clicked (void);
-
-  void reject (void);
-};
-
 #endif
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -444,17 +444,17 @@ file_editor_tab::remove_bookmark (const 
 bool
 file_editor_tab::file_in_path (const bp_info& info)
 {
   bool ok = false;
   bool addpath_option = true;
 
   std::string curr_dir = octave_env::get_current_directory ();
 
-  if (curr_dir == info.path)
+  if (same_file (curr_dir, info.path))
     ok = true;
   else
     {
       bool dir_in_load_path = load_path::contains_canonical (info.path);
 
       std::string base_file = octave_env::base_pathname (info.file);
       std::string lp_file = load_path::find_file (base_file);
 
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -587,24 +587,16 @@ main_window::connect_uiwidget_links ()
   connect (&uiwidget_creator,
            SIGNAL (create_inputlayout (const QStringList&, const QString&,
                                        const QFloatList&, const QFloatList&,
                                        const QStringList&)),
            this,
            SLOT (handle_create_inputlayout (const QStringList&, const QString&,
                                             const QFloatList&, const QFloatList&,
                                             const QStringList&)));
-
-  connect (&uiwidget_creator,
-           SIGNAL (create_debug_cd_or_addpath_dialog (const QString&,
-                                                      const QString&, bool)),
-           this,
-           SLOT (handle_create_debug_cd_or_addpath_dialog (const QString&,
-                                                           const QString&,
-                                                           bool)));
 }
 
 // Create a message dialog with specified string, buttons and decorative
 // text.
 
 void
 main_window::handle_create_dialog (const QString& message,
                                    const QString& title,
@@ -651,29 +643,16 @@ main_window::handle_create_inputlayout (
 {
   InputDialog *input_dialog = new InputDialog (prompt, title, nr, nc,
                                                defaults);
 
   input_dialog->setAttribute (Qt::WA_DeleteOnClose);
   input_dialog->show ();
 }
 
-void
-main_window::handle_create_debug_cd_or_addpath_dialog (const QString& file,
-                                                       const QString& dir,
-                                                       bool addpath_option)
-
-{
-  cd_or_addpath_dialog *dialog
-    = new cd_or_addpath_dialog (file, dir, addpath_option);
-
-  dialog->setAttribute (Qt::WA_DeleteOnClose);
-  dialog->show ();
-}
-
 // Main subroutine of the constructor
 void
 main_window::construct (void)
 {
   _closing = false;   // flag for editor files when closed
   setWindowIcon (QIcon (":/actions/icons/logo.png"));
 
   workspace_window->setModel (_workspace_model);
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -137,19 +137,16 @@ public slots:
                                const QStringList& prompt,
                                const QString& ok_string,
                                const QString& cancel_string);
 
   void handle_create_inputlayout (const QStringList&, const QString&,
                                   const QFloatList&, const QFloatList&,
                                   const QStringList&);
 
-  void handle_create_debug_cd_or_addpath_dialog (const QString& file,
-                                                 const QString& dir,
-                                                 bool addpath_option);
   // find files dialog 
   void find_files(const QString &startdir=QDir::currentPath());
   void find_files_finished(int);
 protected:
   void closeEvent (QCloseEvent * closeEvent);
 
 private:
 
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -106,17 +106,17 @@ octave_qt_link::do_question_dialog (cons
                                   btn,
                                   QString::fromStdString (btndef),
                                   role);
 
   // Wait while the user is responding to message box.
   uiwidget_creator.wait ();
 
   // The GUI has sent a signal and the process has been awakened.
-  return uiwidget_creator.get_dialog_button ()->toStdString ();
+  return uiwidget_creator.get_dialog_button().toStdString ();
 }
 
 static QStringList
 make_qstring_list (const std::list<std::string>& lst)
 {
   QStringList retval;
 
   for (std::list<std::string>::const_iterator it = lst.begin ();
@@ -188,23 +188,57 @@ octave_qt_link::do_input_dialog (const s
   return retval;
 }
 
 int
 octave_qt_link::do_debug_cd_or_addpath_error (const std::string& file,
                                               const std::string& dir,
                                               bool addpath_option)
 {
-  uiwidget_creator.signal_debug_cd_or_addpath (QString::fromStdString (file),
-                                               QString::fromStdString (dir),
-                                               addpath_option);
+  int retval = -1;
+
+  QString qdir = QString::fromStdString (dir);
+  QString qfile = QString::fromStdString (file);
+
+  QString msg
+    = (addpath_option
+       ? tr ("The file %1 does not exist in the load path.  To debug the function you are editing, you must either change to the directory %2 or add that directory to the load path.").arg(qfile).arg(qdir)
+       : tr ("The file %1 is shadowed by a file with the same name in the load path.  To debug the function you are editing, change to the directory %2.").arg(qfile).arg(qdir));
+
+  QString title = tr ("Change Directory or Add Directory to Load Path");
+
+  QString cd_txt = tr ("Change Directory");
+  QString addpath_txt = tr ("Add Directory to Load Path");
+  QString cancel_txt = tr ("Cancel");
 
+  QStringList btn;
+  QStringList role;
+  btn << cd_txt;
+  role << "AcceptRole";
+  if (addpath_option)
+    {
+      btn << addpath_txt;
+      role << "AcceptRole";
+    }
+  btn << cancel_txt;
+  role << "AcceptRole";
+
+  uiwidget_creator.signal_dialog (msg, title, "quest", btn, cancel_txt, role);
+
+  // Wait while the user is responding to message box.
   uiwidget_creator.wait ();
 
-  return uiwidget_creator.get_dialog_result ();
+  QString result = uiwidget_creator.get_dialog_button ();
+
+  if (result == cd_txt)
+    retval = 1;
+  else if (result == addpath_txt)
+    retval = 2;
+
+  return retval;
 }
 
 void
 octave_qt_link::do_change_directory (const std::string& dir)
 {
   emit change_directory_signal (QString::fromStdString (dir));
 }
 
