# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1259130719 -3600
#      Wed Nov 25 07:31:59 2009 +0100
# Node ID c0aeedd8fb86f4bb43148221984eb2d5a53703b9
# Parent  cd53ecf0d79a6e36626ae25d0d683184dd77b2c9
improve chol Matlab compatibility

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2009-11-25  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dbleCHOL.cc (CHOL::init): Output LAPACK's info. Resize matrix if
+	nonzero. Use smarter copying.
+	* floatCHOL.cc (FloatCHOL::init): Ditto.
+	* CmplxCHOL.cc (ComplexCHOL::init): Ditto.
+	* fCmplxCHOL.cc (FloatComplexCHOL::init): Ditto.
+
 2009-11-24  Jaroslav Hajek  <highegg@gmail.com>
 
 	* MArrayN.cc (MArrayN::idx_add): New methods.
 	* MArrayN.h: Declare them.
 	* MArray.cc, MArray.h: Remove from here.
 
 2009-11-19  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/liboctave/CmplxCHOL.cc b/liboctave/CmplxCHOL.cc
--- a/liboctave/CmplxCHOL.cc
+++ b/liboctave/CmplxCHOL.cc
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 #include <vector>
 
 #include "dMatrix.h"
 #include "dRowVector.h"
 #include "CmplxCHOL.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "oct-locbuf.h"
+#include "oct-norm.h"
 #ifndef HAVE_QRUPDATE
 #include "dbleQR.h"
 #endif
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (zpotrf, ZPOTRF) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type&,
@@ -91,56 +92,53 @@ ComplexCHOL::init (const ComplexMatrix& 
       (*current_liboctave_error_handler)
 	("ComplexCHOL requires square matrix");
       return -1;
     }
 
   octave_idx_type n = a_nc;
   octave_idx_type info;
 
-  chol_mat = a;
+  chol_mat.clear (n, n);
+  for (octave_idx_type j = 0; j < n; j++)
+    {
+      for (octave_idx_type i = 0; i <= j; i++)
+        chol_mat.xelem (i, j) = a(i, j);
+      for (octave_idx_type i = j+1; i < n; i++)
+        chol_mat.xelem (i, j) = 0.0;
+    }
   Complex *h = chol_mat.fortran_vec ();
 
   // Calculate the norm of the matrix, for later use.
   double anorm = 0;
   if (calc_cond) 
-    anorm = chol_mat.abs().sum().row(static_cast<octave_idx_type>(0)).max();
+    anorm = xnorm (a, 1);
 
   F77_XFCN (zpotrf, ZPOTRF, (F77_CONST_CHAR_ARG2 ("U", 1), n, h, n, info
 			     F77_CHAR_ARG_LEN (1)));
 
   xrcond = 0.0;
-  if (info != 0)
-    info = -1;
+  if (info > 0)
+    chol_mat.resize (info - 1, info - 1);
   else if (calc_cond) 
     {
       octave_idx_type zpocon_info = 0;
 
       // Now calculate the condition number for non-singular matrix.
       Array<Complex> z (2*n);
       Complex *pz = z.fortran_vec ();
       Array<double> rz (n);
       double *prz = rz.fortran_vec ();
       F77_XFCN (zpocon, ZPOCON, (F77_CONST_CHAR_ARG2 ("U", 1), n, h,
 				 n, anorm, xrcond, pz, prz, zpocon_info
 				 F77_CHAR_ARG_LEN (1)));
 
       if (zpocon_info != 0) 
 	info = -1;
     }
-  else
-    {
-      // If someone thinks of a more graceful way of doing this (or
-      // faster for that matter :-)), please let me know!
-
-      if (n > 1)
-	for (octave_idx_type j = 0; j < a_nc; j++)
-	  for (octave_idx_type i = j+1; i < a_nr; i++)
-	    chol_mat.xelem (i, j) = 0.0;
-    }
 
   return info;
 }
 
 static ComplexMatrix
 chol2inv_internal (const ComplexMatrix& r)
 {
   ComplexMatrix retval;
diff --git a/liboctave/dbleCHOL.cc b/liboctave/dbleCHOL.cc
--- a/liboctave/dbleCHOL.cc
+++ b/liboctave/dbleCHOL.cc
@@ -28,16 +28,17 @@ along with Octave; see the file COPYING.
 
 #include <vector>
 
 #include "dRowVector.h"
 #include "dbleCHOL.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "oct-locbuf.h"
+#include "oct-norm.h"
 #ifndef HAVE_QRUPDATE
 #include "dbleQR.h"
 #endif
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (dpotrf, DPOTRF) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type&,
@@ -90,57 +91,54 @@ CHOL::init (const Matrix& a, bool calc_c
     {
       (*current_liboctave_error_handler) ("CHOL requires square matrix");
       return -1;
     }
 
   octave_idx_type n = a_nc;
   octave_idx_type info;
 
-  chol_mat = a;
+  chol_mat.clear (n, n);
+  for (octave_idx_type j = 0; j < n; j++)
+    {
+      for (octave_idx_type i = 0; i <= j; i++)
+        chol_mat.xelem (i, j) = a(i, j);
+      for (octave_idx_type i = j+1; i < n; i++)
+        chol_mat.xelem (i, j) = 0.0;
+    }
   double *h = chol_mat.fortran_vec ();
 
   // Calculate the norm of the matrix, for later use.
   double anorm = 0;
   if (calc_cond) 
-    anorm = chol_mat.abs().sum().row(static_cast<octave_idx_type>(0)).max();
+    anorm = xnorm (a, 1);
 
   F77_XFCN (dpotrf, DPOTRF, (F77_CONST_CHAR_ARG2 ("U", 1),
 			     n, h, n, info
 			     F77_CHAR_ARG_LEN (1)));
 
   xrcond = 0.0;
-  if (info != 0)
-    info = -1;
+  if (info > 0)
+    chol_mat.resize (info - 1, info - 1);
   else if (calc_cond) 
     {
       octave_idx_type dpocon_info = 0;
 
       // Now calculate the condition number for non-singular matrix.
       Array<double> z (3*n);
       double *pz = z.fortran_vec ();
       Array<octave_idx_type> iz (n);
       octave_idx_type *piz = iz.fortran_vec ();
       F77_XFCN (dpocon, DPOCON, (F77_CONST_CHAR_ARG2 ("U", 1), n, h,
 				 n, anorm, xrcond, pz, piz, dpocon_info
 				 F77_CHAR_ARG_LEN (1)));
 
       if (dpocon_info != 0) 
 	info = -1;
     }
-  else
-    {
-      // If someone thinks of a more graceful way of doing this (or
-      // faster for that matter :-)), please let me know!
-
-      if (n > 1)
-	for (octave_idx_type j = 0; j < a_nc; j++)
-	  for (octave_idx_type i = j+1; i < a_nr; i++)
-	    chol_mat.xelem (i, j) = 0.0;
-    }
 
   return info;
 }
 
 static Matrix
 chol2inv_internal (const Matrix& r)
 {
   Matrix retval;
diff --git a/liboctave/fCmplxCHOL.cc b/liboctave/fCmplxCHOL.cc
--- a/liboctave/fCmplxCHOL.cc
+++ b/liboctave/fCmplxCHOL.cc
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 #include <vector>
 
 #include "fMatrix.h"
 #include "fRowVector.h"
 #include "fCmplxCHOL.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "oct-locbuf.h"
+#include "oct-norm.h"
 #ifndef HAVE_QRUPDATE
 #include "dbleQR.h"
 #endif
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (cpotrf, CPOTRF) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type&,
@@ -91,56 +92,53 @@ FloatComplexCHOL::init (const FloatCompl
       (*current_liboctave_error_handler)
 	("FloatComplexCHOL requires square matrix");
       return -1;
     }
 
   octave_idx_type n = a_nc;
   octave_idx_type info;
 
-  chol_mat = a;
+  chol_mat.clear (n, n);
+  for (octave_idx_type j = 0; j < n; j++)
+    {
+      for (octave_idx_type i = 0; i <= j; i++)
+        chol_mat.xelem (i, j) = a(i, j);
+      for (octave_idx_type i = j+1; i < n; i++)
+        chol_mat.xelem (i, j) = 0.0f;
+    }
   FloatComplex *h = chol_mat.fortran_vec ();
 
   // Calculate the norm of the matrix, for later use.
   float anorm = 0;
   if (calc_cond) 
-    anorm = chol_mat.abs().sum().row(static_cast<octave_idx_type>(0)).max();
+    anorm = xnorm (a, 1);
 
   F77_XFCN (cpotrf, CPOTRF, (F77_CONST_CHAR_ARG2 ("U", 1), n, h, n, info
 			     F77_CHAR_ARG_LEN (1)));
 
   xrcond = 0.0;
-  if (info != 0)
-    info = -1;
+  if (info > 0)
+    chol_mat.resize (info - 1, info - 1);
   else if (calc_cond) 
     {
       octave_idx_type cpocon_info = 0;
 
       // Now calculate the condition number for non-singular matrix.
       Array<FloatComplex> z (2*n);
       FloatComplex *pz = z.fortran_vec ();
       Array<float> rz (n);
       float *prz = rz.fortran_vec ();
       F77_XFCN (cpocon, CPOCON, (F77_CONST_CHAR_ARG2 ("U", 1), n, h,
 				 n, anorm, xrcond, pz, prz, cpocon_info
 				 F77_CHAR_ARG_LEN (1)));
 
       if (cpocon_info != 0) 
 	info = -1;
     }
-  else
-    {
-      // If someone thinks of a more graceful way of doing this (or
-      // faster for that matter :-)), please let me know!
-
-      if (n > 1)
-	for (octave_idx_type j = 0; j < a_nc; j++)
-	  for (octave_idx_type i = j+1; i < a_nr; i++)
-	    chol_mat.xelem (i, j) = 0.0;
-    }
 
   return info;
 }
 
 static FloatComplexMatrix
 chol2inv_internal (const FloatComplexMatrix& r)
 {
   FloatComplexMatrix retval;
diff --git a/liboctave/floatCHOL.cc b/liboctave/floatCHOL.cc
--- a/liboctave/floatCHOL.cc
+++ b/liboctave/floatCHOL.cc
@@ -28,16 +28,17 @@ along with Octave; see the file COPYING.
 
 #include <vector>
 
 #include "fRowVector.h"
 #include "floatCHOL.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "oct-locbuf.h"
+#include "oct-norm.h"
 #ifndef HAVE_QRUPDATE
 #include "dbleQR.h"
 #endif
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (spotrf, SPOTRF) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type&,
@@ -90,57 +91,54 @@ FloatCHOL::init (const FloatMatrix& a, b
     {
       (*current_liboctave_error_handler) ("FloatCHOL requires square matrix");
       return -1;
     }
 
   octave_idx_type n = a_nc;
   octave_idx_type info;
 
-  chol_mat = a;
+  chol_mat.clear (n, n);
+  for (octave_idx_type j = 0; j < n; j++)
+    {
+      for (octave_idx_type i = 0; i <= j; i++)
+        chol_mat.xelem (i, j) = a(i, j);
+      for (octave_idx_type i = j+1; i < n; i++)
+        chol_mat.xelem (i, j) = 0.0f;
+    }
   float *h = chol_mat.fortran_vec ();
 
   // Calculate the norm of the matrix, for later use.
   float anorm = 0;
   if (calc_cond) 
-    anorm = chol_mat.abs().sum().row(static_cast<octave_idx_type>(0)).max();
+    anorm = xnorm (a, 1);
 
   F77_XFCN (spotrf, SPOTRF, (F77_CONST_CHAR_ARG2 ("U", 1),
 			     n, h, n, info
 			     F77_CHAR_ARG_LEN (1)));
 
   xrcond = 0.0;
-  if (info != 0)
-    info = -1;
+  if (info > 0)
+    chol_mat.resize (info - 1, info - 1);
   else if (calc_cond) 
     {
       octave_idx_type spocon_info = 0;
 
       // Now calculate the condition number for non-singular matrix.
       Array<float> z (3*n);
       float *pz = z.fortran_vec ();
       Array<octave_idx_type> iz (n);
       octave_idx_type *piz = iz.fortran_vec ();
       F77_XFCN (spocon, SPOCON, (F77_CONST_CHAR_ARG2 ("U", 1), n, h,
 				 n, anorm, xrcond, pz, piz, spocon_info
 				 F77_CHAR_ARG_LEN (1)));
 
       if (spocon_info != 0) 
 	info = -1;
     }
-  else
-    {
-      // If someone thinks of a more graceful way of doing this (or
-      // faster for that matter :-)), please let me know!
-
-      if (n > 1)
-	for (octave_idx_type j = 0; j < a_nc; j++)
-	  for (octave_idx_type i = j+1; i < a_nr; i++)
-	    chol_mat.xelem (i, j) = 0.0;
-    }
 
   return info;
 }
 
 static FloatMatrix
 chol2inv_internal (const FloatMatrix& r)
 {
   FloatMatrix retval;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-11-25  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/chol.cc (get_chol_l): New helper function.
+	(Fchol): Use it to set MatrixType for lower triangular factors as
+	well. Use default octave_idx_type->octave_value conversion.
+
 2009-11-24  Jaroslav Hajek  <highegg@gmail.com>
 
 	* data.cc (do_accumarray_sum): Simplify.
 
 2009-11-24  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-struct.cc (octave_struct::save_binary): Save dimensions for
 	structs.
diff --git a/src/DLD-FUNCTIONS/chol.cc b/src/DLD-FUNCTIONS/chol.cc
--- a/src/DLD-FUNCTIONS/chol.cc
+++ b/src/DLD-FUNCTIONS/chol.cc
@@ -48,16 +48,24 @@ along with Octave; see the file COPYING.
 template <class CHOLT>
 static octave_value
 get_chol_r (const CHOLT& fact)
 {
   return octave_value (fact.chol_matrix (), 
                        MatrixType (MatrixType::Upper));
 }
 
+template <class CHOLT>
+static octave_value
+get_chol_l (const CHOLT& fact)
+{
+  return octave_value (fact.chol_matrix ().transpose (), 
+                       MatrixType (MatrixType::Lower));
+}
+
 DEFUN_DLD (chol, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{r} =} chol (@var{a})\n\
 @deftypefnx {Loadable Function} {[@var{r}, @var{p}] =} chol (@var{a})\n\
 @deftypefnx {Loadable Function} {[@var{r}, @var{p}, @var{q}] =} chol (@var{s})\n\
 @deftypefnx {Loadable Function} {[@var{r}, @var{p}, @var{q}] =} chol (@var{s}, 'vector')\n\
 @deftypefnx {Loadable Function} {[@var{l}, @dots{}] =} chol (@dots{}, 'lower')\n\
 @cindex Cholesky factorization\n\
@@ -238,19 +246,19 @@ sparse matrices.\n\
 	      FloatMatrix m = arg.float_matrix_value ();
 
 	      if (! error_state)
 		{
 		  octave_idx_type info;
 		  FloatCHOL fact (m, info);
 		  if (nargout == 2 || info == 0)
 		    {
-		      retval(1) = static_cast<float> (info);
+		      retval(1) = info;
 		      if (LLt)
-			retval(0) = fact.chol_matrix ().transpose ();
+			retval(0) = get_chol_l (fact);
 		      else
 			retval(0) = get_chol_r (fact);
 		    }
 		  else
 		    error ("chol: matrix not positive definite");
 		}
 	    }
 	  else if (arg.is_complex_type ())
@@ -258,19 +266,19 @@ sparse matrices.\n\
 	      FloatComplexMatrix m = arg.float_complex_matrix_value ();
 
 	      if (! error_state)
 		{
 		  octave_idx_type info;
 		  FloatComplexCHOL fact (m, info);
 		  if (nargout == 2 || info == 0)
 		    {
-		      retval(1) = static_cast<float> (info);
+		      retval(1) = info;
 		      if (LLt)
-			retval(0) = fact.chol_matrix ().hermitian ();
+			retval(0) = get_chol_l (fact);
 		      else
 			retval(0) = get_chol_r (fact);
 		    }
 		  else
 		    error ("chol: matrix not positive definite");
 		}
 	    }
 	  else
@@ -283,19 +291,19 @@ sparse matrices.\n\
 	      Matrix m = arg.matrix_value ();
 
 	      if (! error_state)
 		{
 		  octave_idx_type info;
 		  CHOL fact (m, info);
 		  if (nargout == 2 || info == 0)
 		    {
-		      retval(1) = static_cast<double> (info);
+		      retval(1) = info;
 		      if (LLt)
-			retval(0) = fact.chol_matrix ().transpose ();
+			retval(0) = get_chol_l (fact);
 		      else
 			retval(0) = get_chol_r (fact);
 		    }
 		  else
 		    error ("chol: matrix not positive definite");
 		}
 	    }
 	  else if (arg.is_complex_type ())
@@ -303,19 +311,19 @@ sparse matrices.\n\
 	      ComplexMatrix m = arg.complex_matrix_value ();
 
 	      if (! error_state)
 		{
 		  octave_idx_type info;
 		  ComplexCHOL fact (m, info);
 		  if (nargout == 2 || info == 0)
 		    {
-		      retval(1) = static_cast<double> (info);
+		      retval(1) = info;
 		      if (LLt)
-			retval(0) = fact.chol_matrix ().hermitian ();
+			retval(0) = get_chol_l (fact);
 		      else
 			retval(0) = get_chol_r (fact);
 		    }
 		  else
 		    error ("chol: matrix not positive definite");
 		}
 	    }
 	  else
