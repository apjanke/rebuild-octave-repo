# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1266436011 18000
#      Wed Feb 17 14:46:51 2010 -0500
# Node ID 6a50aa2cdf0079ce370076a1ced219986d0441e0
# Parent  e0767a0965f1bb550d7479ddf3dd30ab73880008
never compile ranlib with 8-byte integers

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,19 @@
+2010-02-17  John W. Eaton  <jwe@octave.org>
+
+	* configure.ac: 
+
+	* acinclude.m4 (OCTAVE_CHECK_FORTRAN_INTEGER_SIZE): Save and
+	restore FFLAGS.  Temporarily add F77_INTEGER_8_FLAG to FFLAGS.
+	* common.mk (F77_INTEGER_8_FLAG): New variable.
+	(do_subst_config_vals): Substitute it.
+	* configeure.ac: Don't add -fdefault-integer-8 to FFLAGS. 
+	Substitute F77_INTEGER_8_FLAG.  Improve --enable-64 warning.
+
 2010-02-15  Jaroslav Hajek  <highegg@gmail.com>
 
 	* NEWS: Update.
 
 2010-02-10  Jaroslav Hajek  <highegg@gmail.com>
 
 	* NEWS: Update.
 
diff --git a/acinclude.m4 b/acinclude.m4
--- a/acinclude.m4
+++ b/acinclude.m4
@@ -296,16 +296,18 @@ AC_DEFUN([OCTAVE_F77_FLAG], [
     AC_MSG_RESULT(no)
     ifelse([$3], , , [$3])
   fi
 ])
 dnl
 dnl Check to see whether the default Fortran INTEGER is 64 bits wide.
 dnl
 AC_DEFUN([OCTAVE_CHECK_FORTRAN_INTEGER_SIZE], [
+  octave_fintsize_save_FFLAGS="$FFLAGS"
+  FFLAGS="$FFLAGS $F77_INTEGER_8_FLAG"
   AC_LANG_PUSH(Fortran 77)
   AC_CACHE_CHECK([whether $F77 generates correct size integers],
                  [octave_cv_fortran_integer_size],
 [AC_COMPILE_IFELSE(
 [      subroutine foo(n, in, out)
       integer n, in(n), out(n)
       integer i
       do 10 i = 1, n
@@ -334,24 +336,24 @@ AC_DEFUN([OCTAVE_CHECK_FORTRAN_INTEGER_S
   in[0] = 13;
   in[0] = 42;
   F77_FUNC(foo,FOO) (&n, &in, &out);
   assert (in[0] == out[0] && in[1] == out[1]);
 ]])],
   [octave_cv_fortran_integer_size=yes],
   [octave_cv_fortran_integer_size=no])
   AC_LANG_POP(C)dnl
-
-LIBS="$octave_fintsize_save_LIBS"
+  LIBS="$octave_fintsize_save_LIBS"
 rm -f conftest.$ac_objext fintsize.$ac_objext
 ], [
   rm -f conftest.$ac_objext
   AC_MSG_FAILURE([cannot compile a simple Fortran program])
   octave_cv_fortran_integer_size=no])])
   AC_LANG_POP(Fortran 77)
+  FFLAGS="$octave_fintsize_save_FFLAGS"
 ])
 dnl
 dnl
 dnl
 dnl OCTAVE_CHECK_LIBRARY(LIBRARY, DOC-NAME, WARN-MSG, HEADER, FUNC,
 dnl                      LANG, DOC-STRING, EXTRA-CHECK)
 AC_DEFUN([OCTAVE_CHECK_LIBRARY], [
   AC_ARG_WITH([$1-includedir],
diff --git a/common.mk b/common.mk
--- a/common.mk
+++ b/common.mk
@@ -81,16 +81,17 @@ SHLBINPRE = @SHLBINPRE@
 # Fortran compiler flags.
 
 FC = @FC@
 F77 = @F77@
 AM_FFLAGS = @FFLAGS@
 FPICFLAG = @FPICFLAG@
 ALL_FFLAGS = $(FFLAGS)
 F77_FLOAT_STORE_FLAG = @F77_FLOAT_STORE_FLAG@
+F77_INTEGER_8_FLAG = @F77_INTEGER_8_FLAG@
 
 F77_TOLOWER=@F77_TOLOWER@
 F77_APPEND_UNDERSCORE=@F77_TOLOWER@
 F77_APPEND_EXTRA_UNDERSCORE=@F77_TOLOWER@
 
 X11_INCFLAGS = @X11_INCFLAGS@
 X11_LIBS = @X11_LIBS@
 
@@ -497,16 +498,17 @@ echo "making $@ from $<"
   -e "s|%OCTAVE_CONF_DEPEND_FLAGS%|\"${DEPEND_FLAGS}\"|" \
   -e "s|%OCTAVE_CONF_DEPEND_EXTRA_SED_PATTERN%|\"${DEPEND_EXTRA_SED_PATTERN}\"|" \
   -e "s|%OCTAVE_CONF_DL_LD%|\"${DL_LD}\"|" \
   -e "s|%OCTAVE_CONF_DL_LDFLAGS%|\"${DL_LDFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_DL_LIBS%|\"${DL_LIBS}\"|" \
   -e "s|%OCTAVE_CONF_EXEEXT%|\"${EXEEXT}\"|" \
   -e "s|%OCTAVE_CONF_F77%|\"${F77}\"|" \
   -e "s|%OCTAVE_CONF_F77_FLOAT_STORE_FLAG%|\"${F77_FLOAT_STORE_FLAG}\"|" \
+  -e "s|%OCTAVE_CONF_F77_INTEGER_8_FLAG%|\"${F77_INTEGER_8_FLAG}\"|" \
   -e "s|%OCTAVE_CONF_FC%|\"${FC}\"|" \
   -e "s|%OCTAVE_CONF_FFLAGS%|\"${FFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_FFTW3_CPPFLAGS%|\"${FFTW3_CPPFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_FFTW3_LDFLAGS%|\"${FFTW3_LDFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_FFTW3_LIBS%|\"${FFTW3_LIBS}\"|" \
   -e "s|%OCTAVE_CONF_FFTW3F_CPPFLAGS%|\"${FFTW3F_CPPFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_FFTW3F_LDFLAGS%|\"${FFTW3F_LDFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_FFTW3F_LIBS%|\"${FFTW3F_LIBS}\"|" \
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -552,39 +552,49 @@ AC_SUBST(F77_APPEND_EXTRA_UNDERSCORE)
 if test -z "$F77"; then
   AC_MSG_ERROR([in order to build octave, you must have a compatible Fortran compiler or wrapper script for f2c that functions as a Fortran compiler installed and in your path.  See the file INSTALL for more information.])
 fi
 
 OCTAVE_CHECK_FORTRAN_INTEGER_SIZE
 if test "x$octave_cv_fortran_integer_size" = xno; then
   if $USE_64_BIT_IDX_T; then
     case "$F77" in
-      gfortran)
-        case "$FFLAGS" in
+      *gfortran*)
+        case "$F77_INTEGER_8_FLAG" in
           *-fdefault-integer-8*)
           ;;
           *)
-            AC_MSG_NOTICE([adding -fdefault-integer-8 to FFLAGS])
-            FFLAGS="-fdefault-integer-8 $FFLAGS"
-	    ## Invalidate the cache and try again.
-            $as_unset octave_cv_fortran_integer_size
+            case "$FFLAGS" in
+              *-fdefault-integer-8*)
+                AC_MSG_NOTICE([setting -fdefault-integer-8 in F77_INTEGER_8_FLAG instead of FFLAGS])
+                FFLAGS=`echo $FFLAGS | sed 's/-fdefault-integer-8//g'`
+                F77_INTEGER_8_FLAG="-fdefault-integer-8"
+              ;;
+              *)
+                AC_MSG_NOTICE([adding -fdefault-integer-8 to F77_INTEGER_8_FLAG])
+                F77_INTEGER_8_FLAG="-fdefault-integer-8"
+	        ## Invalidate the cache and try again.
+                $as_unset octave_cv_fortran_integer_size
+              ;;
+            esac
           ;;
         esac
       ;;
     esac
     if test -z "$octave_cv_fortran_integer_size"; then
       OCTAVE_CHECK_FORTRAN_INTEGER_SIZE
     fi
     if test "x$octave_cv_fortran_integer_size" = xno; then
-      AC_MSG_ERROR([in order to build octave with 64-bit indexing support your Fortran compiler must have a default integer size of 8 bytes.  See the file INSTALL for more information.])
+      AC_MSG_ERROR([in order to build octave with 64-bit indexing support your Fortran compiler must have an option for setting the default integer size to 8 bytes.  See the file INSTALL for more information.])
     fi
   else
-    AC_MSG_ERROR([your Fortran compiler must have default integers that are the same size as octave_idx_type ($OCTAVE_IDX_TYPE).  See the file INSTALL for more information.])
+    AC_MSG_ERROR([your Fortran compiler must have an option to make integers the same size as octave_idx_type ($OCTAVE_IDX_TYPE).  See the file INSTALL for more information.])
   fi
 fi
+AC_SUBST(F77_INTEGER_8_FLAG)
 
 FC=$F77
 AC_SUBST(FC)
 
 OCTAVE_F77_FLAG(-ffloat-store, [
 AC_MSG_RESULT([setting F77_FLOAT_STORE_FLAG to -ffloat-store])
 F77_FLOAT_STORE_FLAG=-ffloat-store
 AC_SUBST(F77_FLOAT_STORE_FLAG)
@@ -2275,20 +2285,24 @@ if test -n "$warn_64_bit"; then
   warn_msg_printed=true
 fi
 
 if $USE_64_BIT_IDX_T; then
   AC_MSG_WARN([])
   AC_MSG_WARN([You used the EXPERIMENTAL --enable-64 option.])
   AC_MSG_WARN([Are you sure that is what you want to do?])
   AC_MSG_WARN([])
-  AC_MSG_WARN([You must ensure that the Fortran compiler generates])
-  AC_MSG_WARN([code with 8 byte signed INTEGER values, and that your])
-  AC_MSG_WARN([BLAS and LAPACK libraries are compiled to use 8 byte])
-  AC_MSG_WARN([signed integers for array indexing.])
+  AC_MSG_WARN([Your Fortran compiler must have an option to generate])
+  AC_MSG_WARN([code with 8 byte signed INTEGER values.  This option])
+  AC_MSG_WARN([should be specified in the F77_INTEGER_8_FLAG variable])
+  AC_MSG_WARN([Make.  This should work automatically for gfortran.  If])
+  AC_MSG_WARN([you use another compiler, you will need to set this])
+  AC_MSG_WARN([variable on the configure command line.  You must also])
+  AC_MSG_WARN([compile the ARPACK, BLAS, LAPACK, QRUPDATE, and SuiteSparse])
+  AC_MSG_WARN([libraries to use 8 byte signed integers for array indexing.])
   AC_MSG_WARN([])
   warn_msg_printed=true
 fi
 
 native_graphics=true
 if test -n "$warn_freetype"; then
   AC_MSG_WARN([$warn_freetype])
   native_graphics=false
diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,18 @@
+2010-02-17  John W. Eaton  <jwe@octave.org>
+
+	* Makefile.am (libcruft_la_LIBADD): Include libranlib.la in the list.
+	(noinst_LTLIBRARIES, libranlib_la_SOURCES, libranlib_la_DEPENDENCIES,
+	libcruft_la_FFLAGS): New variables.
+	(ranlib.def): New target.
+	(DISTCLEANFILES): Also remove ranlib.def.
+	* ranlib/module.mk (libranlib_la_SOURCES): Rename from
+	libcruft_la_SOURCES.
+
 2010-01-20  John W. Eaton  <jwe@octave.org>
 
 	* misc/quit.cc: Untabify.
 
 2010-01-20  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.am (EXTRA_DIST): Remove STOP.patch from the list.
 
diff --git a/libcruft/Makefile.am b/libcruft/Makefile.am
--- a/libcruft/Makefile.am
+++ b/libcruft/Makefile.am
@@ -24,25 +24,33 @@ include $(top_srcdir)/common.mk
 AM_CPPFLAGS = @CPPFLAGS@ -I../libgnu -I$(top_srcdir)/libgnu
 
 AUTOMAKE_OPTIONS = subdir-objects
 
 octlib_LTLIBRARIES = libcruft.la
 
 libcruft_la_SOURCES =
 
+libcruft_la_FFLAGS = $(F77_INTEGER_8_FLAG)
+
 libcruft_la_CPPFLAGS = @CRUFT_DLL_DEFS@
 
 libcruft_la_LDFLAGS = \
   -release $(version) $(NO_UNDEFINED_LDFLAG) @XTRA_CRUFT_SH_LDFLAGS@
 
-libcruft_la_LIBADD = $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS)
+libcruft_la_LIBADD = libranlib.la $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS)
 
 libcruft_la_DEPENDENCIES = cruft.def
 
+noinst_LTLIBRARIES = libranlib.la
+
+libranlib_la_SOURCES =
+
+libranlib_la_DEPENDENCIES = ranlib.def
+
 octinclude_HEADERS =
 
 EXTRA_DIST =
 
 include amos/module.mk
 include blas-xtra/module.mk
 include daspk/module.mk
 include dasrt/module.mk
@@ -58,12 +66,17 @@ include slatec-err/module.mk
 include slatec-fn/module.mk
 include villad/module.mk
 
 cruft.def: $(libcruft_la_SOURCES) mkf77def
 	chmod a+rx mkf77def
 	./mkf77def $(srcdir) $(libcruft_la_SOURCES) > $@-t
 	mv $@-t $@
 
+ranlib.def: $(libranlib_la_SOURCES) mkf77def
+	chmod a+rx mkf77def
+	./mkf77def $(srcdir) $(libranlib_la_SOURCES) > $@-t
+	mv $@-t $@
+
 EXTRA_DIST += ChangeLog mkf77def.in
 
-DISTCLEANFILES = cruft.def
+DISTCLEANFILES = cruft.def ranlib.def
 
diff --git a/libcruft/ranlib/module.mk b/libcruft/ranlib/module.mk
--- a/libcruft/ranlib/module.mk
+++ b/libcruft/ranlib/module.mk
@@ -4,17 +4,17 @@ EXTRA_DIST += \
   ranlib/HOWTOGET \
   ranlib/README \
   ranlib/randlib.chs \
   ranlib/randlib.fdoc \
   ranlib/tstbot.for \
   ranlib/tstgmn.for \
   ranlib/tstmid.for
 
-libcruft_la_SOURCES += \
+libranlib_la_SOURCES += \
   ranlib/advnst.f \
   ranlib/genbet.f \
   ranlib/genchi.f \
   ranlib/genexp.f \
   ranlib/genf.f \
   ranlib/gengam.f \
   ranlib/genmn.f \
   ranlib/genmul.f \
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,18 @@
+2010-02-17  John W. Eaton  <jwe@octave.org>
+
+	* oct-rand.cc: Include <sdint.h>.  Change declarations of ranlib
+	functions to take int32_t instead of octave_idx_type values.
+	Change all uses.
+	(octave_rand::do_seed): Use int32_t in union, not octave_idx_type.
+	(force_to_fit_range): Args are now int32_t, not octave_idx_type.
+	(octave_rand::initialize_ranlib_generators): Use int32_t in seed
+	calculation.
+
 2010-02-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* mx-op-defs.h (MINMAX_FCNS): Generalize.
 	* mx-op-decl.h (MINMAX_DECLS): Likewise.
 
 	* int16NDArray.h, int32NDArray.h, int64NDArray.h, int8NDArray.h,
 	uint16NDArray.h, uint32NDArray.h, uint64NDArray.h, uint8NDArray.h: 
 	Update.
diff --git a/liboctave/Makefile.am b/liboctave/Makefile.am
--- a/liboctave/Makefile.am
+++ b/liboctave/Makefile.am
@@ -474,16 +474,17 @@ LIBOCT_PATHSEARCH_CXX_SOURCES = pathsear
 LIBOCT_PATHSEARCH_C_SOURCES = kpse-xfns.c
 
 LIBOCT_PATHSEARCH_SOURCES = \
 	$(LIBOCT_PATHSEARCH_C_SOURCES) $(LIBOCT_PATHSEARCH_CXX_SOURCES)
 
 LINK_DEPS = \
   $(RLD_FLAG) \
   ../libcruft/libcruft.la \
+  ../libcruft/libranlib.la \
   ../libgnu/libgnu.la \
   $(SPARSE_XLIBS) \
   $(ARPACK_LIBS) \
   $(QRUPDATE_LIBS) \
   $(FFTW_XLIBS) \
   $(LAPACK_LIBS) $(BLAS_LIBS) \
   $(READLINE_LIBS) $(TERM_LIBS) \
   $(LIBGLOB) $(REGEX_LIBS) $(DL_LIBS) \
diff --git a/liboctave/oct-rand.cc b/liboctave/oct-rand.cc
--- a/liboctave/oct-rand.cc
+++ b/liboctave/oct-rand.cc
@@ -22,16 +22,18 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <map>
 #include <vector>
 
+#include <stdint.h>
+
 #include "f77-fcn.h"
 #include "lo-ieee.h"
 #include "lo-error.h"
 #include "lo-mappers.h"
 #include "oct-rand.h"
 #include "oct-time.h"
 #include "data-conv.h"
 #include "randmtzig.h"
@@ -53,26 +55,26 @@ extern "C"
 
   F77_RET_T
   F77_FUNC (dignpoi, DIGNPOI) (const double&, double&);
 
   F77_RET_T
   F77_FUNC (dgengam, DGENGAM) (const double&, const double&, double&);
 
   F77_RET_T
-  F77_FUNC (setall, SETALL) (const octave_idx_type&, const octave_idx_type&);
+  F77_FUNC (setall, SETALL) (const int32_t&, const int32_t&);
 
   F77_RET_T
-  F77_FUNC (getsd, GETSD) (octave_idx_type&, octave_idx_type&);
+  F77_FUNC (getsd, GETSD) (int32_t&, int32_t&);
 
   F77_RET_T
-  F77_FUNC (setsd, SETSD) (const octave_idx_type&, const octave_idx_type&);
+  F77_FUNC (setsd, SETSD) (const int32_t&, const int32_t&);
 
   F77_RET_T
-  F77_FUNC (setcgn, SETCGN) (const octave_idx_type&);
+  F77_FUNC (setcgn, SETCGN) (const int32_t&);
 }
 
 octave_rand *octave_rand::instance = 0;
 
 octave_rand::octave_rand (void)
   : current_distribution (uniform_dist), use_old_generators (false),
     rand_states ()
 {
@@ -98,17 +100,17 @@ octave_rand::instance_ok (void)
     }
 
   return retval;
 }
 
 double
 octave_rand::do_seed (void)
 {
-  union d2i { double d; octave_idx_type i[2]; };
+  union d2i { double d; int32_t i[2]; };
   union d2i u;
     
   oct_mach_info::float_format ff = oct_mach_info::native_float_format ();
 
   switch (ff)
     {
     case oct_mach_info::flt_fmt_ieee_big_endian:
       F77_FUNC (getsd, GETSD) (u.i[1], u.i[0]);
@@ -116,18 +118,18 @@ octave_rand::do_seed (void)
     default:
       F77_FUNC (getsd, GETSD) (u.i[0], u.i[1]);
       break;
     }
 
   return u.d;
 }
 
-static octave_idx_type
-force_to_fit_range (octave_idx_type i, octave_idx_type lo, octave_idx_type hi)
+static int32_t
+force_to_fit_range (int32_t i, int32_t lo, int32_t hi)
 {
   assert (hi > lo && lo >= 0 && hi > lo);
 
   i = i > 0 ? i : -i;
 
   if (i < lo)
     i = lo;
   else if (i > hi)
@@ -137,17 +139,17 @@ force_to_fit_range (octave_idx_type i, o
 }
 
 void
 octave_rand::do_seed (double s)
 {
   use_old_generators = true;
 
   int i0, i1;
-  union d2i { double d; octave_idx_type i[2]; };
+  union d2i { double d; int32_t i[2]; };
   union d2i u;
   u.d = s;
 
   oct_mach_info::float_format ff = oct_mach_info::native_float_format ();
 
   switch (ff)
     {
     case oct_mach_info::flt_fmt_ieee_big_endian:
@@ -444,18 +446,18 @@ octave_rand::initialize_ranlib_generator
   octave_localtime tm;
   int stored_distribution = current_distribution;
   F77_FUNC (setcgn, SETCGN) (uniform_dist);
 
   int hour = tm.hour() + 1;
   int minute = tm.min() + 1;
   int second = tm.sec() + 1;
 
-  octave_idx_type s0 = tm.mday() * hour * minute * second;
-  octave_idx_type s1 = hour * minute * second;
+  int32_t s0 = tm.mday() * hour * minute * second;
+  int32_t s1 = hour * minute * second;
 
   s0 = force_to_fit_range (s0, 1, 2147483563);
   s1 = force_to_fit_range (s1, 1, 2147483399);
 
   F77_FUNC (setall, SETALL) (s0, s1);
   F77_FUNC (setcgn, SETCGN) (stored_distribution);
 }
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2010-02-17  John W. Eaton  <jwe@octave.org>
+
+	* Makefile.am (OCTAVE_LIBS, OCTINTERP_LINK_DEPS):
+	Include ../libcruft/libranlib.la in the list.
+	* oct-conf.h.in (OCTAVE_CONF_F77_INTEGER_8_FLAG): New macro.
+	* toplev.cc (octave_config_info): Include F77_INTEGER_8_FLAG in
+	the struct.
+
 2010-02-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/lookup.cc (do_numeric_lookup): Return an idx_vector
 	when left_inf is in effect, to enable lazy index optimization.
 
 2010-02-16  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-lazy-idx.h: New source.
diff --git a/src/Makefile.am b/src/Makefile.am
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -483,16 +483,17 @@ DEF_FILES = $(SRC_DEF_FILES) $(DLD_DYNAM
 
 $(DEF_FILES): mkdefs Makefile $(OPT_HANDLERS)
 
 if AMCOND_ENABLE_DYNAMIC_LINKING
   OCTAVE_LIBS = \
     ./liboctinterp.la \
     ../liboctave/liboctave.la \
     ../libcruft/libcruft.la \
+    ../libcruft/libranlib.la \
     ../libgnu/libgnu.la \
     $(SPARSE_XLDFLAGS) $(SPARSE_XLIBS) \
     $(ARPACK_LDFLAGS) $(ARPACK_LIBS) \
     $(QRUPDATE_LDFLAGS) $(QRUPDATE_LIBS) \
     $(FFTW_XLDFLAGS) $(FFTW_XLIBS) \
     $(LAPACK_LIBS) $(BLAS_LIBS) \
     $(GRAPHICS_LDFLAGS) $(GRAPHICS_LIBS) \
     $(FT2_LDFLAGS) $(FT2_LIBS) \
@@ -508,16 +509,17 @@ if AMCOND_ENABLE_DYNAMIC_LINKING
 else
   ## FIXME -- this list is probably not complete now.  It may not even
   ## be possible to build a statically linked copy of Octave that is
   ## fully functional.
   OCTAVE_LIBS = \
     ./liboctinterp.la \
     ../liboctave/liboctave.la \
     ../libcruft/libcruft.la \
+    ../libcruft/libranlib.la \
     ../libgnu/libgnu.la \
     $(FFTW_XLDFLAGS) $(FFTW_XLIBS)
     $(QHULL_LDFLAGS) $(QHULL_LIBS) \
     $(ARPACK_LDFLAGS) $(ARPACK_LIBS) \
     $(QRUPDATE_LDFLAGS) $(QRUPDATE_LIBS) \
     $(SPARSE_XLDFLAGS) $(SPARSE_XLIBS) \
     $(REGEX_LDFLAGS) $(REGEX_LIBS) \
     $(CURL_LDFLAGS) $(CURL_LIBS) \
@@ -534,16 +536,17 @@ else
     $(LIBS) \
     $(FLIBS)
 endif
 
 OCTINTERP_LINK_DEPS = \
   $(RLD_FLAG) \
   ../liboctave/liboctave.la \
   ../libcruft/libcruft.la \
+  ../libcruft/libranlib.la \
   ../libgnu/libgnu.la \
   $(FFTW_XLDFLAGS) $(FFTW_XLIBS) \
   $(FT2_LDFLAGS) $(FT2_LIBS) \
   $(HDF5_LDFLAGS) $(HDF5_LIBS) $(Z_LDFLAGS) $(Z_LIBS) \
   $(OPENGL_LIBS) $(X11_LIBS) $(CARBON_LIBS) \
   $(READLINE_LIBS) $(TERM_LIBS) \
   $(LIBGLOB) \
   $(LAPACK_LIBS) $(BLAS_LIBS) \
@@ -552,16 +555,17 @@ OCTINTERP_LINK_DEPS = \
 
 liboctinterp_la_LIBADD = $(OCTINTERP_LINK_DEPS)
 
 OCT_LINK_DEPS = \
   $(RLD_FLAG) $(LDFLAGS) \
   ./liboctinterp.la \
   ../liboctave/liboctave.la \
   ../libcruft/libcruft.la \
+  ../libcruft/libranlib.la \
   ../libgnu/libgnu.la
 
 bin_PROGRAMS = octave
 
 octave_SOURCES = main.c
 
 nodist_liboctinterp_la_SOURCES = \
   builtins.cc \
diff --git a/src/oct-conf.h.in b/src/oct-conf.h.in
--- a/src/oct-conf.h.in
+++ b/src/oct-conf.h.in
@@ -220,16 +220,20 @@ along with Octave; see the file COPYING.
 #ifndef OCTAVE_CONF_F77
 #define OCTAVE_CONF_F77 %OCTAVE_CONF_F77%
 #endif
 
 #ifndef OCTAVE_CONF_F77_FLOAT_STORE_FLAG
 #define OCTAVE_CONF_F77_FLOAT_STORE_FLAG %OCTAVE_CONF_F77_FLOAT_STORE_FLAG%
 #endif
 
+#ifndef OCTAVE_CONF_F77_INTEGER_8_FLAG
+#define OCTAVE_CONF_F77_INTEGER_8_FLAG %OCTAVE_CONF_F77_INTEGER_8_FLAG%
+#endif
+
 #ifndef OCTAVE_CONF_FC
 #define OCTAVE_CONF_FC %OCTAVE_CONF_FC%
 #endif
 
 #ifndef OCTAVE_CONF_FFLAGS
 #define OCTAVE_CONF_FFLAGS %OCTAVE_CONF_FFLAGS%
 #endif
 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -1224,16 +1224,17 @@ specified option.\n\
       { false, "DEFS", OCTAVE_CONF_DEFS },
       { false, "DL_LD", OCTAVE_CONF_DL_LD },
       { false, "DL_LDFLAGS", OCTAVE_CONF_DL_LDFLAGS },
       { false, "DL_LIBS", OCTAVE_CONF_DL_LIBS },
       { false, "ENABLE_DYNAMIC_LINKING", OCTAVE_CONF_ENABLE_DYNAMIC_LINKING },
       { false, "EXEEXT", OCTAVE_CONF_EXEEXT },
       { false, "F77", OCTAVE_CONF_F77 },
       { false, "F77_FLOAT_STORE_FLAG", OCTAVE_CONF_F77_FLOAT_STORE_FLAG },
+      { false, "F77_INTEGER_8_FLAG", OCTAVE_CONF_F77_INTEGER_8_FLAG },
       { false, "FC", OCTAVE_CONF_FC },
       { false, "FFLAGS", OCTAVE_CONF_FFLAGS },
       { false, "FFTW3_CPPFLAGS", OCTAVE_CONF_FFTW3_CPPFLAGS },
       { false, "FFTW3_LDFLAGS", OCTAVE_CONF_FFTW3_LDFLAGS },
       { false, "FFTW3_LIBS", OCTAVE_CONF_FFTW3_LIBS },
       { false, "FFTW3F_CPPFLAGS", OCTAVE_CONF_FFTW3F_CPPFLAGS },
       { false, "FFTW3F_LDFLAGS", OCTAVE_CONF_FFTW3F_LDFLAGS },
       { false, "FFTW3F_LIBS", OCTAVE_CONF_FFTW3F_LIBS },
