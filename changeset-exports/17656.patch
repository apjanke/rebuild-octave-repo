# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1381783754 14400
#      Mon Oct 14 16:49:14 2013 -0400
# Branch classdef
# Node ID 2b1047efc4fb7d6a5ad6e24f048cba956271f736
# Parent  d7da5afcdb22d76be2f448fa7cbaf7b59163e69b
don't leak memory when parsing classdef objects fails

* oct-parse.in.yy (octave_base_parser::make_classdef,
octave_base_parser::make_classdef_properties_block,
octave_base_parser::make_classdef_methods_block,
octave_base_parser::make_classdef_events_block,
octave_base_parser::make_classdef_enum_block):
Delete component parse tree elements on error.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -1441,17 +1441,20 @@ classdef_beg    : CLASSDEF
                   }
                 ;
 
 classdef        : classdef_beg stash_comment opt_attr_list identifier opt_superclass_list opt_sep class_body opt_sep END
                   {
                     lexer.parsing_classdef = false;
 
                     if (! ($$ = parser.make_classdef ($1, $3, $4, $5, $7, $9, $2)))
-                      ABORT_PARSE;
+                      {
+                        // make_classdef deleted $3, $4, $5, and $7.
+                        ABORT_PARSE;
+                      }
                   }
                 ;
 
 opt_attr_list   : // empty
                   { $$ = 0; }
                 | '(' attr_list ')'
                   { $$ = $2; }
                 ;
@@ -1527,18 +1530,21 @@ class_body      : properties_block
                     $$ = $1;
                   }
                 ;
 
 properties_block
                 : PROPERTIES stash_comment opt_attr_list opt_sep property_list opt_sep END
                   {
                     if (! ($$ = parser.make_classdef_properties_block
-                                              ($1, $3, $5, $7, $2)))
-                      ABORT_PARSE;
+                           ($1, $3, $5, $7, $2)))
+                      {
+                        // make_classdef_properties_block delete $3 and $5.
+                        ABORT_PARSE;
+                      }
                   }
                 ;
 
 property_list
                 : class_property
                   { $$ = new tree_classdef_property_list ($1); }
                 | property_list opt_sep class_property
                   {
@@ -1554,18 +1560,21 @@ class_property  : identifier
                     lexer.looking_at_initializer_expression = false;
                     $$ = new tree_classdef_property ($1, $4);
                   }
                 ;
 
 methods_block   : METHODS stash_comment opt_attr_list opt_sep methods_list opt_sep END
                   {
                     if (! ($$ = parser.make_classdef_methods_block
-                                              ($1, $3, $5, $7, $2)))
-                      ABORT_PARSE;
+                           ($1, $3, $5, $7, $2)))
+                      {
+                        // make_classdef_methods_block deleted $3 and $5.
+                        ABORT_PARSE;
+                      }
                   }
                 ;
 
 methods_list    : function
                   {
                     octave_value fcn;
                     if ($1)
                       fcn = $1->function ();
@@ -1582,18 +1591,21 @@ methods_list    : function
                     $1->append (fcn);
                     $$ = $1;
                   }
                 ;
 
 events_block    : EVENTS stash_comment opt_attr_list opt_sep events_list opt_sep END
                   {
                     if (! ($$ = parser.make_classdef_events_block
-                                              ($1, $3, $5, $7, $2)))
-                      ABORT_PARSE;
+                           ($1, $3, $5, $7, $2)))
+                      {
+                        // make_classdef_events_block deleted $3 and $5.
+                        ABORT_PARSE;
+                      }
                   }
                 ;
 
 events_list     : class_event
                   { $$ = new tree_classdef_events_list ($1); }
                 | events_list opt_sep class_event
                   {
                     $1->append ($3);
@@ -1603,18 +1615,21 @@ events_list     : class_event
 
 class_event     : identifier
                   { $$ = new tree_classdef_event ($1); }
                 ;
 
 enum_block      : ENUMERATION stash_comment opt_attr_list opt_sep enum_list opt_sep END
                   {
                     if (! ($$ = parser.make_classdef_enum_block
-                                              ($1, $3, $5, $7, $2)))
-                      ABORT_PARSE;
+                           ($1, $3, $5, $7, $2)))
+                      {
+                        // make_classdef_enum_block deleted $3 and $5.
+                        ABORT_PARSE;
+                      }
                   }
                 ;
 
 enum_list       : class_enum
                   { $$ = new tree_classdef_enum_list ($1); }
                 | enum_list opt_sep class_enum
                   {
                     $1->append ($3);
@@ -3127,30 +3142,34 @@ octave_base_parser::make_classdef (token
   std::string nm = lexer.fcn_file_name;
 
   size_t pos = nm.find_last_of (file_ops::dir_sep_chars ());
 
   if (pos != std::string::npos)
     nm = lexer.fcn_file_name.substr (pos+1);
 
   if (nm != cls_name)
-    {
-      bison_error ("invalid classdef definition, the class name must match the file name");
-      return retval;
-    }
-
-  if (end_token_ok (end_tok, token::classdef_end))
+    bison_error ("invalid classdef definition, the class name must match the file name");
+  else if (end_token_ok (end_tok, token::classdef_end))
     {
       octave_comment_list *tc = octave_comment_buffer::get_comment ();
 
       int l = tok_val->line ();
       int c = tok_val->column ();
 
-      retval = new tree_classdef (a, id, sc, body, lc, tc, curr_package_name,
-                                  l, c);
+      retval = new tree_classdef (a, id, sc, body, lc, tc,
+                                  curr_package_name, l, c);
+    }
+
+  if (! retval)
+    {
+      delete a;
+      delete id;
+      delete sc;
+      delete body;
     }
 
   return retval;
 }
 
 tree_classdef_properties_block *
 octave_base_parser::make_classdef_properties_block (token *tok_val,
                                                     tree_classdef_attribute_list *a,
@@ -3164,16 +3183,21 @@ octave_base_parser::make_classdef_proper
     {
       octave_comment_list *tc = octave_comment_buffer::get_comment ();
 
       int l = tok_val->line ();
       int c = tok_val->column ();
 
       retval = new tree_classdef_properties_block (a, plist, lc, tc, l, c);
     }
+  else
+    {
+      delete a;
+      delete plist;
+    }
 
   return retval;
 }
 
 tree_classdef_methods_block *
 octave_base_parser::make_classdef_methods_block (token *tok_val,
                                                  tree_classdef_attribute_list *a,
                                                  tree_classdef_methods_list *mlist,
@@ -3186,16 +3210,21 @@ octave_base_parser::make_classdef_method
     {
       octave_comment_list *tc = octave_comment_buffer::get_comment ();
 
       int l = tok_val->line ();
       int c = tok_val->column ();
 
       retval = new tree_classdef_methods_block (a, mlist, lc, tc, l, c);
     }
+  else
+    {
+      delete a;
+      delete mlist;
+    }
 
   return retval;
 }
 
 tree_classdef_events_block *
 octave_base_parser::make_classdef_events_block (token *tok_val,
                                                 tree_classdef_attribute_list *a,
                                                 tree_classdef_events_list *elist,
@@ -3208,16 +3237,21 @@ octave_base_parser::make_classdef_events
     {
       octave_comment_list *tc = octave_comment_buffer::get_comment ();
 
       int l = tok_val->line ();
       int c = tok_val->column ();
 
       retval = new tree_classdef_events_block (a, elist, lc, tc, l, c);
     }
+  else
+    {
+      delete a;
+      delete elist;
+    }
 
   return retval;
 }
 
 tree_classdef_enum_block *
 octave_base_parser::make_classdef_enum_block (token *tok_val,
                                               tree_classdef_attribute_list *a,
                                               tree_classdef_enum_list *elist,
@@ -3230,16 +3264,21 @@ octave_base_parser::make_classdef_enum_b
     {
       octave_comment_list *tc = octave_comment_buffer::get_comment ();
 
       int l = tok_val->line ();
       int c = tok_val->column ();
 
       retval = new tree_classdef_enum_block (a, elist, lc, tc, l, c);
     }
+  else
+    {
+      delete a;
+      delete elist;
+    }
 
   return retval;
 }
 
 // Make an index expression.
 
 tree_index_expression *
 octave_base_parser::make_index_expression (tree_expression *expr,
