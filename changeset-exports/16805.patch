# HG changeset patch
# User Rik <rik@octave.org>
# Date 1371922007 25200
#      Sat Jun 22 10:26:47 2013 -0700
# Node ID 2281d957cde6fbf5ea612032d772bc630801ce0c
# Parent  617a6e5a974ab8158e4cc411495b1fd6babddb93
legend.m: Tweak code for Octave coding conventions.

* scripts/plot/legend.m: Keep line length <= 80 chars.  Add ';' to
end of statements.  Use single quote (') character in demos so
that demos can be run in Matlab for visual comparison.

diff --git a/scripts/plot/legend.m b/scripts/plot/legend.m
--- a/scripts/plot/legend.m
+++ b/scripts/plot/legend.m
@@ -209,16 +209,17 @@ function [hlegend2, hobjects2, hplot2, t
     else
       break;
     endif
   endwhile
 
   ## Validate the orientation
   switch (orientation)
     case {"vertical", "horizontal", "default"}
+      ## These are all accepted orientations.
     otherwise
       error ("legend: unrecognized legend orientation");
   endswitch
 
   ## Validate the location type
   outside = false;
   inout = strfind (location, "outside");
   if (! isempty (inout))
@@ -227,17 +228,17 @@ function [hlegend2, hobjects2, hplot2, t
   else
     outside = false;
   endif
 
   switch (location)
     case {"north", "south", "east", "west", "northeast", "northwest", ...
           "southeast", "southwest", "default"}
     case "best"
-      warning ("legend: 'Best' not yet implemented for location specifier\n");
+      warning ("legend: 'best' not yet implemented for location specifier\n");
       location = "northeast";
     otherwise
       error ("legend: unrecognized legend location");
   endswitch
 
   ## Find any existing legend object on figure
   hlegend = [];
   fkids = get (fig, "children");
@@ -254,17 +255,17 @@ function [hlegend2, hobjects2, hplot2, t
 
   if (nargs == 1)
     arg = varargin{1};
     if (ischar (arg))
       if (rows (arg) == 1)
         str = tolower (strtrim (arg));
         switch (str)
           case "off"
-            delete (hlegend)
+            delete (hlegend);
             return;
           case "hide"
             show = "off";
             nargs--;
           case "show"
             if (! isempty (hlegend))
               show = "on";
             else
@@ -415,17 +416,17 @@ function [hlegend2, hobjects2, hplot2, t
           endif
         endif  # elseif hggroup
       endfor   # for loop k = 1 : nkids
     endif      # else branch of if (have_labels)
 
     if (have_labels || ! have_dname)
       k = nkids;
       if (! have_labels)
-        varargin = arrayfun (@(x) sprintf ("data%d", x), [1:nkids]', 
+        varargin = arrayfun (@(x) sprintf ("data%d", x), [1:nkids]',
                              "uniformoutput", false);
         have_labels = true;
         nargs = nkids;
       endif
       for i = 1 : nargs
         arg = varargin{i};
         if (ischar (arg))
           typ = get (kids(k), "type");
@@ -476,17 +477,17 @@ function [hlegend2, hobjects2, hplot2, t
         typ = get (kids(k), "type");
         while (k > 1
                && ! (strcmp (typ, "line") || strcmp (typ, "surface")
                      || strcmp (typ, "patch") || strcmp (typ, "hggroup")))
           typ = get (kids(--k), "type");
         endwhile
         if (! (strcmp (typ, "line") || strcmp (typ, "surface")
                || strcmp (typ, "patch") || strcmp (typ, "hggroup")))
-          break
+          break;
         endif
         if (k > 0)
           if (strcmp (get (kids(k), "type"), "hggroup"))
             hgkids = get (kids(k), "children");
             for j = 1 : length (hgkids)
               hgobj = get (hgkids(j));
               if (isfield (hgobj, "displayname")
                   && ! isempty (hgobj.displayname))
@@ -558,17 +559,17 @@ function [hlegend2, hobjects2, hplot2, t
         set (ca(1), "units", "points");
         set (ca(1), "fontunits", "points");
         if (isempty (hlegend) || ! isprop (hlegend, "unmodified_axes_position"))
           unmodified_axes_position = get (ca(1), "position");
           unmodified_axes_outerposition = get (ca(1), "outerposition");
         else
           unmodified_axes_position = get (hlegend, "unmodified_axes_position");
           unmodified_axes_outerposition = get (hlegend, ...
-            "unmodified_axes_outerposition");
+                                               "unmodified_axes_outerposition");
         endif
         ca_pos = unmodified_axes_position;
         ca_outpos = unmodified_axes_outerposition;
         ca_fontsize = get (ca(1), "fontsize");
       unwind_protect_cleanup
         set (ca(1), "units", units);
         set (ca(1), "fontunits", fontunits);
       end_unwind_protect
@@ -820,34 +821,41 @@ function [hlegend2, hobjects2, hplot2, t
                          "color", color, "linestyle", "none", "marker", marker,
                          "markeredgecolor", get (hplots (k), "markeredgecolor"),
                          "markerfacecolor", get (hplots (k), "markerfacecolor"),
                          "markersize", get (hplots (k), "markersize"),
                          "userdata", hplots (k));
               hobjects = [hobjects, l1];
             endif
 
-            addlistener (hplots(k), "color", {@updateline, hlegend, linelength});
-            addlistener (hplots(k), "linestyle", {@updateline, hlegend, linelength});
-            addlistener (hplots(k), "marker", {@updateline, hlegend, linelength});
-            addlistener (hplots(k), "markeredgecolor", {@updateline, hlegend, linelength});
-            addlistener (hplots(k), "markerfacecolor", {@updateline, hlegend, linelength});
-            addlistener (hplots(k), "markersize", {@updateline, hlegend, linelength});
-            addlistener (hplots(k), "displayname", {@updateline, hlegend, linelength});
+            addlistener (hplots(k), "color",
+                         {@updateline, hlegend, linelength});
+            addlistener (hplots(k), "linestyle",
+                         {@updateline, hlegend, linelength});
+            addlistener (hplots(k), "marker",
+                         {@updateline, hlegend, linelength});
+            addlistener (hplots(k), "markeredgecolor",
+                         {@updateline, hlegend, linelength});
+            addlistener (hplots(k), "markerfacecolor",
+                         {@updateline, hlegend, linelength});
+            addlistener (hplots(k), "markersize",
+                         {@updateline, hlegend, linelength});
+            addlistener (hplots(k), "displayname",
+                         {@updateline, hlegend, linelength});
           case "patch"
             facecolor = get (hplots(k), "facecolor");
             edgecolor = get (hplots(k), "edgecolor");
             cdata = get (hplots(k), "cdata");
             if (! strcmp (facecolor, "none") || ! strcmp (edgecolor, "none"))
               p1 = patch ("xdata", ([0, linelength, linelength, 0] +
                                    xoffset + xk * xstep) / lpos(3),
                          "ydata", (lpos(4) - yoffset -
                                    [yk-0.3, yk-0.3, yk+0.3, yk+0.3] .* ystep) / lpos(4),
-                         "facecolor", facecolor, "edgecolor", edgecolor, "cdata", cdata,
-                         "userdata", hplots(k));
+                         "facecolor", facecolor, "edgecolor", edgecolor,
+                         "cdata", cdata, "userdata", hplots(k));
               hobjects = [hobjects, p1];
             endif
           case "surface"
           endswitch
           set (texthandle (k), "position", [(txoffset + xk * xstep) / lpos(3), ...
                                             (lpos(4) - yoffset - yk * ystep) / lpos(4)]);
           if (strcmp (orientation, "vertical"))
             yk++;
@@ -870,19 +878,19 @@ function [hlegend2, hobjects2, hplot2, t
                  "handlevisibility", "off", "visible", "off", ...
                  "xliminclude", "off", "yliminclude", "off"};
         t1 = findall (ca(1), props{3:4}, "type", "text");
         if (isempty (t1))
           t1 = text (0, 0, "", props{:});
           set (t1, "deletefcn", {@deletelegend1, hlegend});
         endif
         if (isprop (hlegend, "unmodified_axes_position"))
-          set (hlegend, "unmodified_axes_position", unmodified_axes_position)
+          set (hlegend, "unmodified_axes_position", unmodified_axes_position);
           set (hlegend, "unmodified_axes_outerposition", 
-               unmodified_axes_outerposition)
+               unmodified_axes_outerposition);
         else
           addproperty ("unmodified_axes_position", hlegend,
                        "data", unmodified_axes_position);
           addproperty ("unmodified_axes_outerposition", hlegend,
                        "data", unmodified_axes_outerposition);
         endif
 
         ## Resize the axis that the legend is attached to if the
@@ -907,21 +915,22 @@ function [hlegend2, hobjects2, hplot2, t
                                             unmodified_axes_position, new_pos});
         else
           set (hlegend, "deletefcn", {@deletelegend2, ca, [], [], t1, hplots});
         endif
 
         if (addprops)
           addproperty ("edgecolor", hlegend, "color", [0, 0, 0]);
           addproperty ("textcolor", hlegend, "color", [0, 0, 0]);
-          locations = {"north", "south", "east", "west", "{northeast}", ...
-            "southeast", "northwest", "southwest", "northoutside", ...
-            "southoutside", "eastoutside", "westoutside", ...
-            "northeastoutside", "southeastoutside", "northwestoutside", ...
-            "southwestoutside"};
+          locations = {"north", "south", "east", "west", ...
+                       "northeast", "southeast", "northwest", "southwest", ...
+                       "northoutside", "southoutside", ...
+                       "eastoutside", "westoutside", ...
+                       "northeastoutside", "southeastoutside", ...
+                       "northwestoutside", "southwestoutside"};
           addproperty ("location", hlegend, "radio", strjoin (locations, "|"));
           addproperty ("orientation", hlegend, "radio",
                        "{vertical}|horizontal");
           addproperty ("string", hlegend, "any", text_strings);
           addproperty ("textposition", hlegend, "radio", "{left}|right");
         else
           set (hlegend, "string", text_strings);
         endif
@@ -955,39 +964,41 @@ function [hlegend2, hobjects2, hplot2, t
     hplot2 = hplots;
     text_strings2 = text_strings;
   endif
 
 endfunction
 
 function updatelegend (h, d)
   persistent recursive = false;
+
   if (! recursive)
     recursive = true;
     unwind_protect
       hax = getfield (get (h, "userdata"), "handle");
       [hplots, text_strings] = __getlegenddata__ (h);
       position = get (h, "unmodified_axes_position");
       outerposition = get (h, "unmodified_axes_outerposition");
       units = get (hax, "units");
-      set (hax, "units", "points")
+      set (hax, "units", "points");
       switch get (hax, "activepositionproperty")
       case "position"
-        set (hax, "outerposition", outerposition)
-        set (hax, "position", position)
+        set (hax, "outerposition", outerposition);
+        set (hax, "position", position);
       case "outerposition"
-        set (hax, "position", position)
-        set (hax, "outerposition", outerposition)
+        set (hax, "position", position);
+        set (hax, "outerposition", outerposition);
       endswitch
-      set (hax, "units", units)
+      set (hax, "units", units);
       h = legend (hax, hplots, get (h, "string"));
     unwind_protect_cleanup
       recursive = false;
     end_unwind_protect
   endif
+
 endfunction
 
 function updatelegendtext (h, d)
   hax = get (h, "userdata").handle;
   kids = get (h, "children");
   text_kids = findobj (kids, "-property", "interpreter", "type", "text");
   interpreter = get (h, "interpreter");
   textcolor = get (h, "textcolor");
@@ -1098,18 +1109,18 @@ function updateline (h, d, hlegend, line
         text_strings(i) = [];
         break;
       endif
     endfor
     legend (hplots, text_strings);
   elseif ((!isempty (displayname)
            && (! strcmp (marker, "none") || ! strcmp (linestyle, "none")))
           && isempty (lm) && isempty (ll))
-    ## An element was added to the legend. Need to recall the
-    ## legend function to recreate a new legend
+    ## An element was added to the legend.  Need to re-call the
+    ## legend function to recreate a new legend.
     [hplots, text_strings] = __getlegenddata__ (hlegend);
     hplots = [hplots, h];
     text_strings = {text_strings{:}, displayname};
     legend (hplots, text_strings);
   else
     if (! isempty (ll))
       ypos1 = get (ll,"ydata");
       xpos1 = get (ll,"xdata");
@@ -1136,85 +1147,87 @@ function updateline (h, d, hlegend, line
             "marker", marker, "markeredgecolor", get (h, "markeredgecolor"),
             "markerfacecolor", get (h, "markerfacecolor"),
             "markersize", get (h, "markersize"), "linestyle", "none",
             "userdata", h, "parent", hlegend);
     endif
   endif
 endfunction
 
+
 %!demo
-%! clf ()
+%! clf;
 %! plot (rand (2));
 %! title ('legend called with cellstr and string inputs for labels');
 %! h = legend ({'foo'}, 'bar');
 %! legend location northeastoutside
-%! set (h, 'fontsize', 20)
+%! set (h, 'fontsize', 20);
 
 %!demo
-%! clf ()
+%! clf;
 %! plot (rand (3));
 %! title ('legend() without inputs creates default labels');
 %! h = legend ();
 
 %!demo
 %! clf;
 %! x = 0:1;
 %! plot (x,x,';I am Blue;', x,2*x, x,3*x,';I am Red;');
 %! legend location northeastoutside
-%! # Placing legend inside should return axes to original size
+%! ## Placing legend inside should return axes to original size
 %! legend location northeast
 %! title ('Blue and Red keys, with Green missing');
 
 %!demo
 %! clf;
 %! plot (1:10, 1:10, 1:10, fliplr (1:10));
 %! title ('incline is blue and decline is green');
 %! legend ({'I am blue', 'I am green'}, 'location', 'east');
 %! legend hide
 %! legend show
 
 %!demo
 %! clf;
 %! plot (1:10, 1:10, 1:10, fliplr (1:10));
 %! title ('Legend with keys in horizontal orientation');
-%! legend ({'I am blue', 'I am green'}, 'location', 'east', 'orientation', 'horizontal');
-%! legend boxoff;
+%! legend ({'I am blue', 'I am green'}, ...
+%!         'location', 'east', 'orientation', 'horizontal');
+%! legend boxoff
 %! legend boxon
 
 %!demo
 %! clf;
 %! plot (1:10, 1:10, 1:10, fliplr (1:10));
 %! title ('Legend with box off');
 %! legend ({'I am blue', 'I am green'}, 'location', 'east');
-%! legend boxoff;
+%! legend boxoff
 
 %!demo
 %! clf;
 %! plot (1:10, 1:10, 1:10, fliplr (1:10));
 %! title ('Legend with text to the right of key');
 %! legend ({'I am blue', 'I am green'}, 'location', 'east');
-%! legend right;
+%! legend right
 
 %!demo
 %! clf;
 %! plot (1:10, 1:10, 1:10, fliplr (1:10));
 %! title ({'Use properties to place legend text to the right of key', ...
 %!         'Legend text color is magenta'});
 %! h = legend ({'I am blue', 'I am green'}, 'location', 'east');
 %! legend ('left');
 %! set (h, 'textposition', 'right');
 %! set (h, 'textcolor', [1 0 1]);
 
 %!demo
 %! clf;
 %! plot (1:10, 1:10, 1:10, fliplr (1:10));
 %! title ('Legend is hidden')
 %! legend ({'I am blue', 'I am green'}, 'location', 'east');
-%! legend hide;
+%! legend hide
 
 %!demo
 %! clf;
 %! x = 0:1;
 %! plot (x,x,';I am Blue;', x,2*x,';I am Green;', x,3*x,';I am Red;');
 %! title ({'Labels are embedded in call to plot', ...
 %!         'Legend is hidden and then shown'});
 %! legend boxon
@@ -1381,41 +1394,40 @@ endfunction
 %! y1 = rand (size (x));
 %! y2 = rand (size (x));
 %! [ax, h1, h2] = plotyy (x, y1, x, y2);
 %! title ('plotyy legend test #3: Blue and Green labels');
 %! legend ('Blue', 'Green', 'location', 'south');
 
 %!demo % bug 36408
 %! clf;
-%! option = "right";
-%! subplot (3,1,1)
+%! option = 'right';
+%! subplot (3,1,1);
 %! plot (rand (1,4));
-%! title ("Subplots should adjust to the legend placed outside")
-%! legend ({"1"}, "location", "northeastoutside")
-%! legend (option)
-%! subplot (3,1,2)
+%! title ('Subplots should adjust to the legend placed outside');
+%! legend ({'1'}, 'location', 'northeastoutside');
+%! legend (option);
+%! subplot (3,1,2);
 %! plot (rand (1,4));
-%! legend ({"1234567890"}, "location", "eastoutside")
-%! legend (option)
-%! subplot (3,1,3)
+%! legend ({'1234567890'}, 'location', 'eastoutside');
+%! legend (option);
+%! subplot (3,1,3);
 %! plot (rand (1,4));
-%! legend ({"12345678901234567890"}, "location", "southeastoutside")
-%! legend (option)
+%! legend ({'12345678901234567890'}, 'location', 'southeastoutside');
+%! legend (option);
 
 %!demo % bug 36408
 %! clf;
-%! option = "right";
+%! option = 'right';
 %! subplot (3,1,1)
 %! plot (rand (1,4));
-%! title ("Subplots should adjust to the legend placed outside")
-%! legend ({"1"}, "location", "northwestoutside")
-%! legend (option)
-%! subplot (3,1,2)
+%! title ('Subplots should adjust to the legend placed outside');
+%! legend ({'1'}, 'location', 'northwestoutside');
+%! legend (option);
+%! subplot (3,1,2);
 %! plot (rand (1,4));
-%! legend ({"1234567890"}, "location", "westoutside")
-%! legend (option)
-%! subplot (3,1,3)
+%! legend ({'1234567890'}, 'location', 'westoutside');
+%! legend (option);
+%! subplot (3,1,3);
 %! plot (rand (1,4));
-%! legend ({"12345678901234567890"}, "location", "southwestoutside")
-%! legend (option)
+%! legend ({'12345678901234567890'}, 'location', 'southwestoutside');
+%! legend (option);
 
-
