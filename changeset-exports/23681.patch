# HG changeset patch
# User Philip Nienhuis <prnienhuis@users.sf.net>
# Date 1498185538 25200
#      Thu Jun 22 19:38:58 2017 -0700
# Node ID 8b5bc5e5f74bdbc9462390e24cb6100d7223c78c
# Parent  ef71711f6d64aa7dbc78635636d8e81db07370f9
add unit tests creating and calling methods on some basic Java types

* ov-java.cc: Add %!tests for instantiating and calling methods on basic
Java numeric classes, Boolean class, and AWT Frame class.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -3228,16 +3228,64 @@ Return true if @var{x} is a Java object.
 %! assert (class (javaObject ("java.lang.Byte",      int8 (1))), "java.lang.Byte");
 %! assert (class (javaObject ("java.lang.Short",   uint16 (1))), "java.lang.Short");
 %! assert (class (javaObject ("java.lang.Short",    int16 (1))), "java.lang.Short");
 %! assert (class (javaObject ("java.lang.Integer", uint32 (1))), "java.lang.Integer");
 %! assert (class (javaObject ("java.lang.Integer",  int32 (1))), "java.lang.Integer");
 %! assert (class (javaObject ("java.lang.Long",    uint64 (1))), "java.lang.Long");
 %! assert (class (javaObject ("java.lang.Long",     int64 (1))), "java.lang.Long");
 
+## More checks of java numeric and boolean class instances
+%!testif HAVE_JAVA; usejava ("jvm")
+%! n = javaObject ("java.lang.Double", 1.35);
+%! assert (n.compareTo (1.0), 1);
+%! assert (n.compareTo (1.35), 0);
+%! assert (n.compareTo (10), -1);
+%! assert (n.isInfinite (), false);
+
+%!testif HAVE_JAVA; usejava ("jvm")
+%! n = javaObject ("java.lang.Float", 1.35);
+%! assert (n.compareTo (1.0), 1);
+%! assert (n.compareTo (1.35), 0);
+%! assert (n.compareTo (10), -1);
+%! assert (n.doubleValue (), 1.35, 1e7);
+
+%!testif HAVE_JAVA; usejava ("jvm")
+%! n = javaObject ("java.lang.Long", (int64 (1)));
+%! assert (n.compareTo (int64 (0)), 1);
+%! assert (n.compareTo (int64 (1)), 0);
+%! assert (n.compareTo (int64 (2)), -1);
+%! assert (n.toString (), "1");
+
+%!testif HAVE_JAVA; usejava ("jvm")
+%! n = javaObject ("java.lang.Integer", 1.35);
+%! assert (n.compareTo (0), 1);
+%! assert (n.compareTo (1), 0);
+%! assert (n.compareTo (2), -1);
+
+%!testif HAVE_JAVA; usejava ("jvm")
+%! n = javaObject ("java.lang.Short", 1.35);
+%! assert (n.compareTo (0), 1);
+%! assert (n.compareTo (1), 0);
+%! assert (n.compareTo (2), -1);
+
+%!testif HAVE_JAVA; usejava ("jvm")
+%! n = javaObject ("java.lang.Byte", int8 (17));
+%! assert (n.compareTo (int8 (20)), -3);
+%! assert (n.compareTo (int8 (10)), 7);
+%! assert (n.compareTo (int8 (17)), 0);
+
+%!testif HAVE_JAVA; usejava ("jvm")
+%! b = javaObject ("java.lang.Boolean", true);
+%! assert (b.compareTo (true), 0);
+%! assert (b.compareTo (false), 1);
+%! b = javaObject ("java.lang.Boolean", false);
+%! assert (b.compareTo (true), -1);
+%! assert (b.compareTo (false), 0);
+
 ## Test for automatic conversion of specific numeric classes
 %!testif HAVE_JAVA; usejava ("jvm") <*48013>
 %! assert (javaMethod ("valueOf", "java.lang.Byte",     int8 (1)), 1)
 %! assert (javaMethod ("valueOf", "java.lang.Short",   int16 (1)), 1)
 %! assert (javaMethod ("valueOf", "java.lang.Integer", int32 (1)), 1)
 %! assert (javaMethod ("valueOf", "java.lang.Long",    int64 (1)), 1)
 %! assert (javaMethod ("valueOf", "java.lang.Float",  single (1)), 1)
 %! assert (javaMethod ("valueOf", "java.lang.Double", double (1)), 1)
@@ -3261,9 +3309,15 @@ Return true if @var{x} is a Java object.
 %! ## same tests with Java object as part of another indexing expression
 %! a(1).s = s;
 %! assert (! a(1).s.isEmpty ())
 %! assert (a(1).s.length (), 6)
 %! assert (a(1).s.charAt (0), "O")
 %! assert (a(1).s.charAt (5), "e")
 %! assert (a(1).s.matches ("^Octave$"))
 %! assert (a(1).s.startsWith ("Oct"))
+
+## Check for basic usability of the java awt library
+%!testif HAVE_JAVA; usejava ("jvm") && usejava ("awt") && have_window_system ()
+%! frame = javaObject ("java.awt.Frame");
+%! frame.setResizable (true);
+%! assert (frame.isResizable ());
 */
