# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1385279852 18000
#      Sun Nov 24 02:57:32 2013 -0500
# Node ID a99b7d656a6cb6092720f7b28a4d82d000bf7c0a
# Parent  ac9fd501062051ee5b60e649d2be9293d5f56415
start in CLI mode if display is not available (bug #40685)

* main.in.cc (display_available): New function.
(main): Use it.  If no display is available, start in CLI mode.
* src/Makefile.am (octave_LDADD): Include $(CARBON_LIBS) and
$(X11_LIBS) in the list.

diff --git a/src/Makefile.am b/src/Makefile.am
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -58,16 +58,18 @@ OCTAVE_CORE_LIBS = \
   $(top_builddir)/liboctave/liboctave.la
 
 include ../libgui/link-deps.mk
 
 nodist_octave_SOURCES = main.cc
 
 octave_LDADD = \
   $(top_builddir)/libgnu/libgnu.la \
+  $(X11_LIBS) \
+  $(CARBON_LIBS) \
   $(GNULIB_LINK_DEPS)
 
 octave_LDFLAGS = \
   $(NO_UNDEFINED_LDFLAG) \
   $(OCTAVE_LINK_OPTS)
 
 if AMCOND_BUILD_GUI
   OCTAVE_CPPFLAGS = -DHAVE_OCTAVE_GUI
diff --git a/src/main.in.cc b/src/main.in.cc
--- a/src/main.in.cc
+++ b/src/main.in.cc
@@ -97,16 +97,85 @@ w32_get_octave_home (void)
         retval = bin_dir.substr (0, pos);
     }
 
   return retval;
 }
 
 #endif
 
+#include <cstdlib>
+
+#if defined (OCTAVE_USE_WINDOWS_API)
+#include <windows.h>
+#elif defined (HAVE_FRAMEWORK_CARBON)
+#include <Carbon/Carbon.h>
+#elif defined (HAVE_X_WINDOWS)
+#include <X11/Xlib.h>
+#endif
+
+bool
+display_available (std::string& err_msg)
+{
+  bool dpy_avail = false;
+
+  err_msg = "";
+
+#if defined (OCTAVE_USE_WINDOWS_API)
+
+  HDC hdc = GetDC (0);
+
+  if (hdc)
+    dpy_avail = true;
+  else
+    err_msg = "no graphical display found";
+
+#elif defined (HAVE_FRAMEWORK_CARBON)
+
+  CGDirectDisplayID display = CGMainDisplayID ();
+
+  if (display)
+    dpy_avail = true;
+  else
+    err_msg = "no graphical display found";
+
+#elif defined (HAVE_X_WINDOWS)
+
+  const char *display_name = getenv ("DISPLAY");
+
+  if (display_name && *display_name)
+    {
+      Display *display = XOpenDisplay (display_name);
+
+      if (display)
+        {
+          Screen *screen = DefaultScreenOfDisplay (display);
+
+          if (! screen)
+            err_msg = "X11 display has no default screen";
+
+          XCloseDisplay (display);
+
+          dpy_avail = true;
+        }
+      else
+        err_msg = "unable to open X11 DISPLAY";
+    }
+  else
+    err_msg = "X11 DISPLAY environment variable not set";
+
+#else
+
+  err_msg = "no graphical display found";
+
+#endif
+
+  return dpy_avail;
+}
+
 #if (defined (HAVE_OCTAVE_GUI) \
      && ! defined (__WIN32__) || defined (__CYGWIN__))
 
 #include <signal.h>
 #include <fcntl.h>
 
 // This is a liboctave header, but it doesn't include any other Octave
 // headers or declare any functions that are defined in liboctave.
@@ -510,21 +579,18 @@ strsave (const char *s)
   return tmp;
 }
 
 int
 main (int argc, char **argv)
 {
   int retval = 0;
 
-#if (defined (HAVE_OCTAVE_GUI) \
-     && (! defined (__WIN32__) || defined (__CYGWIN__)))
   bool start_gui = true;
   bool gui_libs = true;
-#endif
 
   std::string octave_bindir = get_octave_bindir ();
 
   std::string file = octave_bindir + dir_sep_char;
 
 #if defined (HAVE_OCTAVE_GUI)
   file += "octave-gui";
 #else
@@ -535,52 +601,70 @@ main (int argc, char **argv)
 
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
   int k = 1;
 #else
   int k = 0;
   new_argv[k++] = strsave ("octave");
 #endif
 
+  bool warn_display = true;
+
   for (int i = 1; i < argc; i++)
     {
       if (! strcmp (argv[i], "--no-gui-libs"))
         {
           // Run the version of Octave that is not linked with any GUI
           // libraries.  It may not be possible to do plotting or any
           // ui* calls, but it will be a little faster to start and
           // require less memory.  Don't pass the --no-gui-libs option
           // on as that option is not recognized by Octave.
 
-#if (defined (HAVE_OCTAVE_GUI) \
-     && ! defined (__WIN32__) || defined (__CYGWIN__))
+          start_gui = false;
           gui_libs = false;
-#endif
           file = octave_bindir + dir_sep_char + "octave-cli";
         }
       else if (! strcmp (argv[i], "--no-gui"))
         {
           // If we see this option, then we can just exec octave; we
           // don't have to create a child process and wait for it to
           // exit.  But do exec "octave", not "octave-cli", because even
           // if the --no-gui option is given, we may be asked to do some
           // plotting or ui* calls.
 
-#if (defined (HAVE_OCTAVE_GUI) \
-     && ! defined (__WIN32__) || defined (__CYGWIN__))
           start_gui = false;
-#endif
           new_argv[k++] = argv[i];
         }
+      else if (! strcmp (argv[i], "--silent") || ! strcmp (argv[i], "-q"))
+        warn_display = false;
       else
         new_argv[k++] = argv[i];
     }
 
   new_argv[k] = 0;
 
+  if (gui_libs || start_gui)
+    {
+      std::string display_check_err_msg;
+
+      if (! display_available (display_check_err_msg))
+        {
+          start_gui = false;
+          gui_libs = false;
+
+          file = octave_bindir + dir_sep_char + "octave-cli";
+
+          if (warn_display)
+            {
+              std::cerr << "octave: " << display_check_err_msg << std::endl;
+              std::cerr << "octave: disabiling GUI features" << std::endl;
+            }
+        }
+    }
+
 #if (defined (HAVE_OCTAVE_GUI) \
      && ! defined (__WIN32__) || defined (__CYGWIN__))
 
   if (gui_libs && start_gui && have_controlling_terminal ())
     {
       install_signal_handlers ();
 
       gui_pid = fork ();
