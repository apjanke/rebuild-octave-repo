# HG changeset patch
# User dbateman
# Date 1191440786 0
#      Wed Oct 03 19:46:26 2007 +0000
# Node ID 4fa8d8a804fb9ea4ca5d0c16db64ab13517e85bb
# Parent  88df962dc2961b08faa3a0b0633378ad1fb33ae8
[project @ 2007-10-03 19:46:26 by dbateman]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,18 @@
+2007-10-03  David Bateman  <dbateman@free.fr>
+
+	* pkg/pkg.m (is_architecture_dependent): New function to identify
+	if a file is architecture dependent based on a list of file
+	extensions.
+	(configure_make): Simplify the search for architecture dependent
+	files based on this function.
+	(load_pakages_and_dependencies): Also look for bin directory in
+	the architecture dependent directory.
+
 2007-10-03  John W. Eaton  <jwe@octave.org>
 
 	* miscellaneous/dir.m: Create empty struct with field names.
 	Include datenum in struct.
 	
 2007-10-02  David Bateman  <dbateman@free.fr>
 
 	* miscellaneous/ls.m: If nargout return string array of files
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -1047,16 +1047,17 @@ function configure_make (desc, packdir, 
 	printf("%s", output);
       endif
     endif
 
     ## Copy files to "inst" and "inst/arch" (this is instead of 'make install')
     files = fullfile (src, "FILES");
     instdir = fullfile (packdir, "inst");
     archdir = fullfile (packdir, "inst", getarch ());
+
     ## Get file names
     if (exist (files, "file"))
       [fid, msg] = fopen (files, "r");
       if (fid < 0)
 	error ("couldn't open %s: %s", files, msg);
       endif
       filenames = char (fread (fid))';
       fclose (fid);
@@ -1068,53 +1069,42 @@ function configure_make (desc, packdir, 
       for i = 1:length (filenames)
 	if (! all (isspace (filenames{i})))
 	  filenames{i} = fullfile (src, filenames{i});
 	else
 	  delete_idx(end+1) = i;
 	endif
       endfor
       filenames(delete_idx) = [];
-      idx1 = cellfun ("isempty", regexp (filenames, '^.*\.mex'));
-      idx2 = cellfun ("isempty", regexp (filenames, '^.*\.oct'));
-      mex = filenames;
-      mex(idx1 != 0) = [];
-      oct = filenames;
-      oct(idx2 != 0) = [];
-      archindependent = filenames;
-      archindependent(idx1 == 0 | idx2 == 0) = [];
-      archdependent = [oct, mex];
     else
       m = dir (fullfile (src, "*.m"));
       oct = dir (fullfile (src, "*.oct"));
       mex = dir (fullfile (src, "*.mex"));
       archdependent = "";
       archindependent = "";
       filenames = "";
       if (length (m) > 0)
 	filenames = sprintf (fullfile (src, "%s "), m.name);
-	archindependent = sprintf (fullfile (src, "%s "), m.name);
       endif
       if (length (oct) > 0)
 	filenames = strcat (filenames, " ", sprintf(fullfile(src, "%s "), ...
 						    oct.name));
-	archdependent = strcat (archdependent, " ", ...
-			 sprintf(fullfile(src, "%s "), oct.name));
       endif
       if (length (mex) > 0)
 	filenames = strcat (filenames, " ", sprintf(fullfile(src, "%s "), ...
 						    mex.name));
-	archdependent = strcat (archdependent, " ", ...
-			 sprintf(fullfile(src, "%s "), mex.name));
       endif
       filenames = split_by (filenames, " ");
-      archdependent = split_by (archdependent, " ");
-      archindependent = split_by (archindependent, " ");
     endif
 
+    ## Split into architecture dependent and independent files
+    idx = cellfun (@(x) is_architecture_dependent (x), filenames);
+    archdependent = filenames (idx);
+    archindependent = filenames (!idx);
+
     ## Copy the files
     if (! all (isspace (filenames)))
 	if (! exist (instdir, "dir")) 
 	  mkdir (instdir);
 	endif
 	if (! all (isspace (archindependent)))
 	  if (verbose)
 	    printf ("copyfile");
@@ -1371,16 +1361,17 @@ function copy_files (desc, packdir, glob
 
   ## Is there a doc/ directory that needs to be installed
   docdir = fullfile (packdir, "doc");
   if (exist (docdir, "dir") && ! dirempty (docdir))
     [status, output] = copyfile (docdir, desc.dir);
   endif
 
   ## Is there a bin/ directory that needs to be installed
+  ## FIXME: Need to treat architecture dependent files in bin/
   bindir = fullfile (packdir, "bin");
   if (exist (bindir, "dir") && ! dirempty (bindir))
     [status, output] = copyfile (bindir, desc.dir);
   endif
 endfunction
 
 function finish_installation (desc, packdir, global_install)
   ## Is there a post-install to call?
@@ -2022,16 +2013,19 @@ function load_packages_and_dependencies 
     ndir = installed_pkgs_lst{i}.dir;
     dirs {end + 1} = ndir;
     if (exist (fullfile (dirs{end}, "bin"), "dir"))
       execpath = strcat (fullfile(dirs{end}, "bin"), ":", execpath);
     endif
     tmpdir = getarchdir (installed_pkgs_lst {i});
     if (exist (tmpdir, "dir"))
       dirs{end + 1} = tmpdir;
+      if (exist (fullfile (dirs{end}, "bin"), "dir"))
+        execpath = strcat (fullfile(dirs{end}, "bin"), ":", execpath);
+      endif
     endif
   endfor
 
   ## Load the packages
   if (length (dirs) > 0)
     addpath (dirs{:});
   endif
 
@@ -2065,8 +2059,31 @@ function idx = load_package_dirs (lidx, 
         endif
       endif
       if (isempty (find(idx == i)))
         idx (end + 1) = i;
       endif
     endif
   endfor
 endfunction
+
+function dep = is_architecture_dependent (nm)
+  persistent archdepsuffix = {".oct",".mex",".a",".so",".so.*",".dll","dylib"};
+
+  dep = false;
+  for i = 1 : length (archdepsuffix)
+    ext = archdepsuffix {i};
+    if (ext(end) == "*")
+      isglob = true;
+      ext(end) = [];
+    else
+      isglob = false;
+    endif
+    pos = findstr (nm, ext);
+    if (pos)
+      if (! isglob &&  (length(nm) - pos(end) != length(ext) - 1))
+	continue;
+      endif
+      dep = true;
+      break;
+    endif
+  endfor
+endfunction
