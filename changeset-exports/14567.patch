# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1334678019 14400
#      Tue Apr 17 11:53:39 2012 -0400
# Branch stable
# Node ID 5bb5fcffa29d0bf1abdb668d471ec0e5f44a74ae
# Parent  aa491bd9e19b56aad9548089fd8f8a2dc1a2be24
correctly fill cell arrays for three-arg diag function calls

* data.cc (Fdiag): Special case for cell arrays so that off-diagonal
elements are filled with [].

diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1289,17 +1289,30 @@ Given a matrix argument, instead of a ve
     }
   else if (nargin == 3)
     {
       octave_value arg0 = args(0);
       if (arg0.ndims () == 2 && (args(0).rows () == 1 || args(0).columns () == 1))
         {
           octave_idx_type m = args(1).int_value (), n = args(2).int_value ();
           if (! error_state)
-            retval = arg0.diag ().resize (dim_vector (m, n), true);
+            {
+              if (arg0.is_cell ())
+                {
+                  Cell rhs = arg0.cell_value ();
+                  Cell tmp (m, n);
+
+                  for (octave_idx_type i = 0; i < rhs.numel (); i++)
+                    tmp.xelem (i, i) = rhs.xelem (i);
+
+                  retval = tmp;
+                }
+              else
+                retval = arg0.diag ().resize (dim_vector (m, n), true);
+            }
           else
             error ("diag: invalid dimensions");
         }
       else
         error ("diag: V must be a vector");
     }
   else
     print_usage ();
@@ -1338,16 +1351,19 @@ Given a matrix argument, instead of a ve
 %!assert(diag (int8([1; 2; 3]),-2), int8([0, 0, 0, 0, 0; 0, 0, 0, 0, 0; 1, 0, 0, 0, 0; 0, 2, 0, 0, 0; 0, 0, 3, 0, 0]));
 
 %!assert(diag (int8([1, 0, 0; 0, 2, 0; 0, 0, 3])), int8([1; 2; 3]));
 %!assert(diag (int8([0, 1, 0, 0; 0, 0, 2, 0; 0, 0, 0, 3; 0, 0, 0, 0]), 1), int8([1; 2; 3]));
 %!assert(diag (int8([0, 0, 0, 0; 1, 0, 0, 0; 0, 2, 0, 0; 0, 0, 3, 0]), -1), int8([1; 2; 3]));
 
 ## Test non-square size
 %!assert(diag ([1,2,3], 6, 3), [1 0 0; 0 2 0; 0 0 3; 0 0 0; 0 0 0; 0 0 0])
+%!assert (diag (1, 2, 3), [1,0,0; 0,0,0]);
+%!assert (diag ({1}, 2, 3), {1,[],[]; [],[],[]});
+%!assert (diag ({1,2}, 3, 4), {1,[],[],[]; [],2,[],[]; [],[],[],[]});
 
 %% Test input validation
 %!error <Invalid call to diag> diag ();
 %!error <Invalid call to diag> diag (1,2,3,4);
 %!error diag (ones (2), 3, 3);
 %!error diag (1:3, -4, 3);
 
  */
