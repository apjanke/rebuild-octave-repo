# HG changeset patch
# User jwe
# Date 1069741500 0
#      Tue Nov 25 06:25:00 2003 +0000
# Node ID 19bcdc6a9bb836b98f6cd346b86581e7bc9de276
# Parent  bf7272f8ba8cc230689686503874a4aa4d8d8275
[project @ 2003-11-25 06:22:02 by jwe]

diff --git a/liboctave/CmplxQR.cc b/liboctave/CmplxQR.cc
--- a/liboctave/CmplxQR.cc
+++ b/liboctave/CmplxQR.cc
@@ -122,17 +122,17 @@ ComplexQR::init (const ComplexMatrix& a,
 		r.elem (i, j) = A_fact.elem (i, j);
 	    }
 
 	  lwork = 32 * n2;
 	  work.resize (lwork);
 	  Complex *pwork2 = work.fortran_vec ();
 
 	  F77_XFCN (zungqr, ZUNGQR, (m, n2, min_mn, tmp_data, m, ptau,
-				     pwork, lwork, info));
+				     pwork2, lwork, info));
 
 	  if (f77_exception_encountered)
 	    (*current_liboctave_error_handler)
 	      ("unrecoverable error in zungqr");
 	  else
 	    {
 	      q = A_fact;
 	      q.resize (m, n2);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,27 +1,34 @@
-2003-11-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
-
 2003-11-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* version.h (OCTAVE_VERSION): Now 2.1.52.
 	(OCTAVE_API_VERSION): Now api-v3.
 
+	* DLD-FUNCTIONS/rand.cc (do_rand): Pass function name from arg
+	list in calls to error.
+
+	* ov-cs-list.cc, ov-cs-list.h (octave_cs_list::octave_cs_list):
+	Explicitly initialize base class in constructors.
+
 	* ov.h (octave_value::all_strings): Pass second arg to rep function.
 
+	* ov.h (octave_value::string_value): Pass arg to rep function.
+
 	* DLD-FUNCTIONS/dasrt.cc (dasrt_user_f): Delete unused arg names.
 	* ls-hdf5.h (hdf5_streambase::hdf5_streambase): Likewise.
 	* ls-hdf5.cc (read_hdf5_data): Likewise.
 	* ls-utils.cc (get_save_type): Likewise.
 	* parse.y (Fassignin): Likewise.
 	* utils.cc (empty_arg): Likewise.
 	* ov-usr-fcn.h (octave_user_function::subsref): Likewise.
 	* ov-base-mat.h (octave_base_matrix::subsref): Likewise.
 	* ov-mapper.h (octave_mapper::subsref): Likewise.
 	* ov-builtin.h (octave_builtin::subsref): Likewise.
+	* ov-complex.cc (octave_complex::complex_array_value): Likewise.
 	* ov-cell.h (octave_cell::subsref): Likewise.
 	* ov-base-scalar.h (octave_base_scalar::subsref): Likewise.
 	* ov-struct.h (octave_struct::subsref): Likewise.
 	* ov-range.h (octave_range::subsref): Likewise.
 	* ov-list.h (octave_list::subsref): Likewise.
 	* ov-base.cc (octave_base_value::print_info): Likewise.
 	* pt-check.cc (tree_checker::visit_subplot_axes): Likewise.
 	* pr-output.cc (octave_print_internal (std::ostream&, double, bool),
diff --git a/src/DLD-FUNCTIONS/rand.cc b/src/DLD-FUNCTIONS/rand.cc
--- a/src/DLD-FUNCTIONS/rand.cc
+++ b/src/DLD-FUNCTIONS/rand.cc
@@ -80,25 +80,25 @@ do_rand (const octave_value_list& args, 
 	      {
 		octave_rand::uniform_distribution ();
 	      }
 	    else if (s_arg == "normal")
 	      {
 		octave_rand::normal_distribution ();
 	      }
 	    else
-	      error ("rand: unrecognized string argument");
+	      error ("%s: unrecognized string argument", fcn);
 	  }
 	else if (tmp.is_scalar_type ())
 	  {
 	    double dval = tmp.double_value ();
 
 	    if (xisnan (dval))
 	      {
-		error ("rand: NaN is invalid a matrix dimension");
+		error ("%s: NaN is invalid a matrix dimension", fcn);
 	      }
 	    else
 	      {
 		dims.resize (2);
 
 		dims(0) = NINT (tmp.double_value ());
 		dims(1) = NINT (tmp.double_value ());
 
@@ -116,30 +116,31 @@ do_rand (const octave_value_list& args, 
 
 		dims.resize (n);
 
 		int base = NINT (r.base ());
 		int incr = NINT (r.inc ());
 		int lim = NINT (r.limit ());
 
 		if (base < 0 || lim < 0)
-		  error ("rand: all dimensions must be nonnegative");
+		  error ("%s: all dimensions must be nonnegative", fcn);
 		else
 		  {
 		    for (int i = 0; i < n; i++)
 		      {
 			dims(i) = base;
 			base += incr;
 		      }
 
 		    goto gen_matrix;
 		  }
 	      }
 	    else
-	      error ("rand: expecting all elements of range to be integers");
+	      error ("%s: expecting all elements of range to be integers",
+		     fcn);
 	  }
 	else if (tmp.is_matrix_type ())
 	  {
 	    Array<int> iv = tmp.int_vector_value (true);
 
 	    if (! error_state)
 	      {
 		int len = iv.length ();
@@ -147,27 +148,27 @@ do_rand (const octave_value_list& args, 
 		dims.resize (len);
 
 		for (int i = 0; i < len; i++)
 		  {
 		    int elt = iv(i);
 
 		    if (elt < 0)
 		      {
-			error ("rand: all dimensions must be nonnegative");
+			error ("%s: all dimensions must be nonnegative", fcn);
 			goto done;
 		      }
 
 		    dims(i) = iv(i);
 		  }
 
 		goto gen_matrix;
 	      }
 	    else
-	      error ("rand: expecting integer vector");
+	      error ("%s: expecting integer vector", fcn);
 	  }
 	else
 	  {
 	    gripe_wrong_type_arg ("rand", tmp);
 	    return retval;
 	  }
       }
       break;
@@ -181,29 +182,29 @@ do_rand (const octave_value_list& args, 
 	    if (tmp.string_value () == "seed")
 	      {
 		double d = args(1).double_value ();
 
 		if (! error_state)
 		  octave_rand::seed (d);
 	      }
 	    else
-	      error ("rand: unrecognized string argument");
+	      error ("%s: unrecognized string argument", fcn);
 	  }
 	else
 	  {
 	    dims.resize (nargin);
 
 	    for (int i = 0; i < nargin; i++)
 	      {
 		dims(i) = args(i).int_value ();
 
 		if (error_state)
 		  {
-		    error ("rand: expecting integer arguments");
+		    error ("%s: expecting integer arguments", fcn);
 		    goto done;
 		  }
 	      }
 
 	    goto gen_matrix;
 	  }
       }
       break;
diff --git a/src/ov-complex.cc b/src/ov-complex.cc
--- a/src/ov-complex.cc
+++ b/src/ov-complex.cc
@@ -136,17 +136,17 @@ octave_complex::complex_value (bool) con
 
 ComplexMatrix
 octave_complex::complex_matrix_value (bool) const
 {
   return ComplexMatrix (1, 1, scalar);
 }
 
 ComplexNDArray
-octave_complex::complex_array_value (bool force_conversion) const
+octave_complex::complex_array_value (bool /* force_conversion */) const
 {
   return ComplexNDArray (dim_vector (1, 1), scalar);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-cs-list.cc b/src/ov-cs-list.cc
--- a/src/ov-cs-list.cc
+++ b/src/ov-cs-list.cc
@@ -38,16 +38,17 @@ Software Foundation, 59 Temple Place - S
 #include "ov-cs-list.h"
 #include "unwind-prot.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_cs_list);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_cs_list, "cs-list", "cs-list");
 
 octave_cs_list::octave_cs_list (const Cell& c)
+  : octave_base_value (), lst ()
 {
   int n = c.length ();
 
   lst.resize (n);
 
   for (int i = 0; i < n; i++)
     lst(i) = c(i);
 }
diff --git a/src/ov-cs-list.h b/src/ov-cs-list.h
--- a/src/ov-cs-list.h
+++ b/src/ov-cs-list.h
@@ -47,25 +47,25 @@ class tree_walker;
 // Lists.
 
 class
 octave_cs_list : public octave_base_value
 {
 public:
 
   octave_cs_list (void)
-    : lst () { }
+    : octave_base_value (), lst () { }
 
   octave_cs_list (const octave_value_list& l)
-    : lst (l) { }
+    : octave_base_value (), lst (l) { }
 
   octave_cs_list (const Cell& c);
 
   octave_cs_list (const octave_cs_list& l)
-    : lst (l) { }
+    : octave_base_value (), lst (l) { }
 
   ~octave_cs_list (void) { }
 
   octave_value *clone (void) const { return new octave_cs_list (*this); }
   octave_value *empty_clone (void) const { return new octave_cs_list (); }
 
   dim_vector dims (void) const { return dim_vector (1, lst.length ()); }
 
