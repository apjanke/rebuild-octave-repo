# HG changeset patch
# User Carnë Draug <carandraug@octave.org>
# Date 1374796043 -3600
#      Fri Jul 26 00:47:23 2013 +0100
# Node ID 3db796f89695cd84a41d1634e8d617a40c961b30
# Parent  d3ebc3f9bdbffeb35b4dad502fdd49985589753f
Rename private core_imfnc functions to follow  the __fnc__ convention style.

diff --git a/scripts/image/imfinfo.m b/scripts/image/imfinfo.m
--- a/scripts/image/imfinfo.m
+++ b/scripts/image/imfinfo.m
@@ -115,10 +115,10 @@
 function info = imfinfo (varargin)
   if (nargin < 1 || nargin > 2)
     print_usage ();
   elseif (! ischar (varargin{1}))
     error ("imfinfo: FILENAME must be a string");
   elseif (nargin > 1 && ! ischar (varargin{2}))
     error ("imfinfo: EXT must be a string");
   endif
-  info = imageIO (@core_imfinfo, "info", varargin, varargin{:});
+  info = imageIO (@__imfinfo__, "info", varargin, varargin{:});
 endfunction
diff --git a/scripts/image/imformats.m b/scripts/image/imformats.m
--- a/scripts/image/imformats.m
+++ b/scripts/image/imformats.m
@@ -236,19 +236,19 @@ function formats = default_formats ()
     formats(fidx).coder = coders{fidx, 1};
     formats(fidx).ext   = coders{fidx, 2};
     formats(fidx).alpha = coders{fidx, 3};
     ## default isa is to check if the format returned by imfinfo is the coder
     formats(fidx).isa   = @(x) isa_magick (coders{fidx,1}, x);
   endfor
 
   ## the default info, read, and write functions
-  [formats.info ] = deal (@core_imfinfo);
-  [formats.read ] = deal (@core_imread);
-  [formats.write] = deal (@core_imwrite);
+  [formats.info ] = deal (@__imfinfo__);
+  [formats.read ] = deal (@__imread__);
+  [formats.write] = deal (@__imwrite__);
 
   ## fills rest of format information by checking with GraphicsMagick
   formats = __magick_formats__ (formats);
 endfunction
 
 function is_valid_format (format)
   ## the minimal list of fields required in the structure. We don't
   ## require multipage because it doesn't exist in matlab
@@ -265,17 +265,17 @@ function match = find_ext_idx (formats, 
   ##      Should this function prevent the addition of
   ##      duplicated extensions?
   match = cellfun (@(x) any (strcmp (x, ext)), {formats.ext});
 endfunction
 
 function bool = isa_magick (coder, filename)
   bool = false;
   try
-    info = core_imfinfo (filename);
+    info = __imfinfo__ (filename);
     bool = strcmp (coder, info.Format);
   end_try_catch
 endfunction
 
 ## changing the function to read
 %!testif HAVE_MAGICK
 %! fmt = imformats ("jpg");
 %! fmt.read = @(x) size (x, 2);
diff --git a/scripts/image/imread.m b/scripts/image/imread.m
--- a/scripts/image/imread.m
+++ b/scripts/image/imread.m
@@ -88,17 +88,17 @@ function varargout = imread (varargin)
   ## own is enough. And if the second argument was a parameter name instead
   ## of an extension, it is still going to be passed to the next function
   ## since we are passing the whole function input as well.
   filename = {varargin{1}};
   if (nargin > 1 && ischar (varargin {2}))
     filename{2} = varargin{2};
   endif
 
-  [varargout{1:nargout}] = imageIO (@core_imread, "read", filename, varargin{:});
+  [varargout{1:nargout}] = imageIO (@__imread__, "read", filename, varargin{:});
 endfunction
 
 %!testif HAVE_MAGICK
 %! vpng = [ ...
 %!  137,  80,  78,  71,  13,  10,  26,  10,   0,   0, ...
 %!    0,  13,  73,  72,  68,  82,   0,   0,   0,   3, ...
 %!    0,   0,   0,   3,   8,   2,   0,   0,   0, 217, ...
 %!   74,  34, 232,   0,   0,   0,   1, 115,  82,  71, ...
diff --git a/scripts/image/imwrite.m b/scripts/image/imwrite.m
--- a/scripts/image/imwrite.m
+++ b/scripts/image/imwrite.m
@@ -73,17 +73,17 @@ function imwrite (varargin)
   ## no fields, so we can't just use `isempty (fmt)'.
   if (isempty (fieldnames (fmt)))
     if (isempty (ext))
       error ("imwrite: no extension found for %s to identify the image format",
              filename);
     endif
     warning ("imwrite: unlisted image format %s (see imformats). Trying to save anyway.",
              ext);
-    core_imwrite (varargin{:});
+    __imwrite__ (varargin{:});
   else
     fmt.write (varargin{:});
   endif
 
 endfunction
 
 %% Test input validation
 %!error imwrite ()                            # Wrong # of args
diff --git a/scripts/image/module.mk b/scripts/image/module.mk
--- a/scripts/image/module.mk
+++ b/scripts/image/module.mk
@@ -1,14 +1,14 @@
 FCN_FILE_DIRS += image
 
 image_PRIVATE_FCN_FILES = \
-  image/private/core_imfinfo.m \
-  image/private/core_imread.m \
-  image/private/core_imwrite.m \
+  image/private/__imfinfo__.m \
+  image/private/__imread__.m \
+  image/private/__imwrite__.m \
   image/private/imageIO.m \
   image/private/imwrite_filename.m \
   image/private/ind2x.m
 
 image_FCN_FILES = \
   image/autumn.m \
   image/bone.m \
   image/brighten.m \
diff --git a/scripts/image/private/core_imfinfo.m b/scripts/image/private/__imfinfo__.m
rename from scripts/image/private/core_imfinfo.m
rename to scripts/image/private/__imfinfo__.m
--- a/scripts/image/private/core_imfinfo.m
+++ b/scripts/image/private/__imfinfo__.m
@@ -19,17 +19,17 @@
 
 ## This function does al the work of imfinfo. It exists here as private
 ## function so that imfinfo can use other functions if imformats is
 ## configured to. It is also needed so that imformats can create a
 ## function handle for it.
 
 ## Author: Soren Hauberg <hauberg@gmail.com>
 
-function info = core_imfinfo (filename, ext)
+function info = __imfinfo__ (filename, ext)
 
   if (nargin < 1 || nargin > 2)
     print_usage ("imfinfo");
   endif
 
   if (! ischar (filename))
     error ("imfinfo: FILENAME must be a string");
   elseif (nargin >= 2 && ! ischar (ext))
diff --git a/scripts/image/private/core_imread.m b/scripts/image/private/__imread__.m
rename from scripts/image/private/core_imread.m
rename to scripts/image/private/__imread__.m
--- a/scripts/image/private/core_imread.m
+++ b/scripts/image/private/__imread__.m
@@ -28,17 +28,17 @@
 
 ## Author: Carnë Draug <carandraug@octave.org>
 ## Author: Thomas L. Scofield <scofield@calvin.edu>
 ## Author: Kristian Rumberg <kristianrumberg@gmail.com>
 ## Author: Thomas Weber <thomas.weber.mail@gmail.com>
 ## Author: Stefan van der Walt <stefan@sun.ac.za>
 ## Author: Andy Adler
 
-function varargout = core_imread (filename, varargin)
+function varargout = __imread__ (filename, varargin)
 
   if (nargin < 1)
     print_usage ("imread");
   elseif (! ischar (filename))
     error ("imread: FILENAME must be a string");
   endif
 
   ## keep track of the varargin offset we're looking at each moment
diff --git a/scripts/image/private/core_imwrite.m b/scripts/image/private/__imwrite__.m
rename from scripts/image/private/core_imwrite.m
rename to scripts/image/private/__imwrite__.m
--- a/scripts/image/private/core_imwrite.m
+++ b/scripts/image/private/__imwrite__.m
@@ -17,17 +17,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## This function does all the work of imwrite. It exists here as private
 ## function so that imwrite can use other functions if imformats is
 ## configured to. It is also needed so that imformats can create a
 ## function handle for it.
 
-function core_imwrite (img, varargin)
+function __imwrite__ (img, varargin)
 
   if (nargin < 2 || ! (isnumeric (img) || islogical (img)))
     print_usage ("imwrite");
   endif
 
   [filename, ext, map, param_list] = imwrite_filename (varargin{:});
 
   if (rem (numel (param_list), 2) != 0)
diff --git a/scripts/image/private/imwrite_filename.m b/scripts/image/private/imwrite_filename.m
--- a/scripts/image/private/imwrite_filename.m
+++ b/scripts/image/private/imwrite_filename.m
@@ -13,19 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## The input check for imwrite needs to be done twice, once when imwrite
 ## is called the first time to find where the filename is, and a second
-## time by core_imwrite after imformats decides what function to use.
+## time by __imwrite__ after imformats decides what function to use.
 ## Because a user can, and is encouraged to, get a function handle to
-## core_imwrite, the input check is also done there.
+## __imwrite__, the input check is also done there.
 ## In addition, the input check for imwrite is not that straightforward
 ## in order to support the multiple ways the function can be called,
 ## and interpretations of Matlab documentation.
 ##
 ## Anyway, this will only do the input check until it finds the filename
 ## to be used, the only part that imwrite actually needs.
 
 function [filename, ext, cmap, options] = imwrite_filename (varargin)
