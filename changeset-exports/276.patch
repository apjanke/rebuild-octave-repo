# HG changeset patch
# User jwe
# Date 757908357 0
#      Fri Jan 07 02:05:57 1994 +0000
# Node ID 4cf3c7df0e3d6bf1c1f5c2756ce86b18ea171622
# Parent  a419f80fc9a844b408e50950bfe6027f45df90fe
[project @ 1994-01-07 02:05:57 by jwe]

diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -1269,17 +1269,17 @@ tree_constant_rep::eval (const tree_cons
     }
 
   if (retval[0].is_defined ())
     retval[0].eval (print);
   return retval;
 }
 
 int
-tree_constant_rep::save (ostream& os, int mark_as_global)
+tree_constant_rep::save (ostream& os, int mark_as_global, int precision)
 {
   switch (type_tag)
     {
     case scalar_constant:
     case matrix_constant:
     case complex_scalar_constant:
     case complex_matrix_constant:
     case string_constant:
@@ -1289,16 +1289,19 @@ tree_constant_rep::save (ostream& os, in
       else
 	os << "# type: ";
       break;
     case magic_colon:
     default:
       break;
     }
 
+  long old_precision = os.precision ();
+  os.precision (precision);
+
   switch (type_tag)
     {
     case scalar_constant:
       os << "scalar\n"
 	 << scalar << "\n";
       break;
     case matrix_constant:
       os << "matrix\n"
@@ -1330,16 +1333,19 @@ tree_constant_rep::save (ostream& os, in
 	   << range->inc () << "\n";
       }
       break;
     case magic_colon:
     default:
       panic_impossible ();
       break;
     }
+
+  os.precision (old_precision);
+
 // Really want to return 1 only if write is successful.
   return 1;
 }
 
 int
 tree_constant_rep::save_three_d (ostream& os, int parametric)
 {
   int nr = rows ();
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -442,17 +442,17 @@ public:
   tree_constant do_matrix_index (const Range& i, const Range& j) const;
   tree_constant do_matrix_index (const Range& i, constant_type j) const;
 
   tree_constant do_matrix_index (constant_type i, int j) const;
   tree_constant do_matrix_index (constant_type i, const idx_vector& j) const;
   tree_constant do_matrix_index (constant_type i, const Range& j) const;
   tree_constant do_matrix_index (constant_type i, constant_type j) const;
 
-  int save (ostream& os, int mark_as_global);
+  int save (ostream& os, int mark_as_global, int precision);
   int save_three_d (ostream& os, int parametric);
   int load (istream& is);
   constant_type load (istream& is, constant_type t);
 
   double double_value (void) const;
   Matrix matrix_value (void) const;
   Complex complex_value (void) const;
   ComplexMatrix complex_matrix_value (void) const;
@@ -676,18 +676,18 @@ public:
 	  --rep->count;
 	  rep = new tree_constant_rep (*rep);
 	  rep->count = 1;
 	}
       rep->assign (rhs, args, nargs);
       return *this;
     }
 
-  int save (ostream& os, int mark_as_global = 0)
-    { return rep->save (os, mark_as_global); }
+  int save (ostream& os, int mark_as_global = 0, int precision = 17)
+    { return rep->save (os, mark_as_global, precision); }
   int save_three_d (ostream& os, int parametric = 0)
     { return rep->save_three_d (os, parametric); }
 
   int load (istream& is) { return rep->load (is); }
   tree_constant_rep::constant_type load
     (istream& is, tree_constant_rep::constant_type t)
       { return rep->load (is, t); }
 
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -1,12 +1,12 @@
 // Symbol table classes.                              -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993 John W. Eaton
+Copyright (C) 1992, 1993, 1994 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -174,19 +174,19 @@ symbol_def::help (void) const
 void
 symbol_def::document (const char *h)
 {
   delete [] help_string;
   help_string = strsave (h);
 }
 
 int
-symbol_def::save (ostream& os, int mark_as_global)
+symbol_def::save (ostream& os, int mark_as_global, int precision)
 {
-  return definition->save (os, mark_as_global);
+  return definition->save (os, mark_as_global, precision);
 }
 
 int
 maybe_delete (symbol_def *def)
 {
   int count = 0;
   if (def != (symbol_def *) NULL)
     {
@@ -521,34 +521,35 @@ symbol_record::document (const char *h)
       definition->document (h);
 
       if (! is_defined ())
 	warning ("documenting undefined variable `%s'", nm);
     }
 }
 
 int
-symbol_record::save (ostream& os, int mark_as_global = 0)
+symbol_record::save (ostream& os, int mark_as_global = 0,
+		     int precision = 17)
 {
   int status = -1;
 
 // This is a kludge, but hey, it doesn't make sense to save them
 // anyway, does it?  Even if it did, we would just have trouble trying
 // to read NaN and Inf on lots of systems anyway...
 //
 // Should we also save the help string?  Maybe someday.
 
   if (is_read_only ())
     warning ("save: sorry, can't save read-only variable `%s'", nm);
   else if (is_function ())
     warning ("save: sorry, can't save function `%s'", nm);
   else if (is_defined ())
     {
       os << "# name: " << nm << "\n";
-      status = definition->save (os, mark_as_global);
+      status = definition->save (os, mark_as_global, precision);
     }
 
   return status;
 }
 
 int
 symbol_record::clear (void)
 {
@@ -956,42 +957,44 @@ symbol_table::clear (const char *nm, int
 	}
       ptr = ptr->next ();
     }
 
   return 0;
 }
 
 int
-symbol_table::save (ostream& os, int mark_as_global = 0)
+symbol_table::save (ostream& os, int mark_as_global = 0,
+		    int precision = 17)
 {
   int status = 0;
   int count;
   char **names = list (count, 1, symbol_def::USER_VARIABLE);
   char **ptr = names;
   if (ptr != (char **) NULL)
     {
       while (*ptr != (char *) NULL)
 	{
-	  if (save (os, *ptr, mark_as_global))
+	  if (save (os, *ptr, mark_as_global, precision))
 	    status++;
 	  delete [] *ptr++;
 	}
       delete [] names;
     }
   return status;
 }
 
 int
-symbol_table::save (ostream& os, const char *name, int mark_as_global = 0)
+symbol_table::save (ostream& os, const char *name,
+		    int mark_as_global = 0, int precision = 17)
 {
   int status = 0;
   symbol_record *sr = lookup (name, 0, 0);
   if (sr != (symbol_record *) NULL)
-    status = sr->save (os, mark_as_global);
+    status = sr->save (os, mark_as_global, precision);
   return status;
 }
 
 int
 symbol_table::size (void) const
 {
   int count = 0;
   for (int i = 0; i < HASH_TABLE_SIZE; i++)
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -1,12 +1,12 @@
 // Symbol table classes.                              -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993 John W. Eaton
+Copyright (C) 1992, 1993, 1994 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -82,17 +82,17 @@ public:
   void protect (void);
   void unprotect (void);
   void make_eternal (void);
 
   tree *def (void) const;
   char *help (void) const;
   void document (const char *h);
 
-  int save (ostream& os, int mark_as_global);
+  int save (ostream& os, int mark_as_global, int precision);
 
   enum TYPE
     {
       UNKNOWN = 0,
       USER_FUNCTION = 1,
       USER_VARIABLE = 2,
       BUILTIN_FUNCTION = 4,
       BUILTIN_VARIABLE = 8
@@ -159,17 +159,17 @@ public:
   int define (tree_constant *t);
   int define (tree_builtin *t);
   int define (tree_function *t);
   int define_as_fcn (tree_constant *t);
   int define_builtin_var (tree_constant *t);
 
   void document (const char *h);
 
-  int save (ostream& os, int mark_as_global = 0);
+  int save (ostream& os, int mark_as_global = 0, int precision = 17);
 
   int clear (void);
 
   void alias (symbol_record *s, int force = 0);
 
   void mark_as_formal_parameter (void);
   int is_formal_parameter (void) const;
 
@@ -288,18 +288,19 @@ public:
 
   symbol_table (void);
 
   symbol_record *lookup (const char *nm, int insert = 0, int warn = 0);
 
   void clear (int clear_user_functions = 1);
   int clear (const char *nm, int clear_user_functions = 1);
 
-  int save (ostream& os, int mark_as_global = 0);
-  int save (ostream& os, const char *name, int mark_as_global = 0);
+  int save (ostream& os, int mark_as_global = 0, int precision = 17);
+  int save (ostream& os, const char *name, int mark_as_global = 0,
+	    int precicion = 17);
 
   int size (void) const;
 
   symbol_record_info *long_list (int& count, int sort = 0,
 				 unsigned type = SYMTAB_ALL_TYPES,
 				 unsigned scope = SYMTAB_ALL_SCOPES) const;
 
   char **list (int& count, int sort = 0,
diff --git a/src/t-builtins.cc b/src/t-builtins.cc
--- a/src/t-builtins.cc
+++ b/src/t-builtins.cc
@@ -889,28 +889,31 @@ builtin_save (int argc, char **argv)
       char *fname = tilde_expand (*argv);
       file.open (fname);
       if (! file)
 	{
 	  error ("save: couldn't open output file `%s'", *argv);
 	  return retval;
 	}
       stream = file;
+
     }
 
+  int prec = user_pref.save_precision;
+
   if (argc == 1)
     {
       int count;
       char **vars = curr_sym_tab->list (count, 0,
 					symbol_def::USER_VARIABLE,
 					SYMTAB_ALL_SCOPES);
 
       for (int i = 0; i < count; i++)
 	curr_sym_tab->save (stream, vars[i],
-			    is_globally_visible (vars[i]));
+			    is_globally_visible (vars[i]), prec);
 
       delete [] vars;
     }
   else
     {
       while (--argc > 0)
 	{
 	  argv++;
@@ -919,27 +922,27 @@ builtin_save (int argc, char **argv)
 	  char **lvars = curr_sym_tab->list (count, 0,
 					     symbol_def::USER_VARIABLE);
 
 	  int saved_or_error = 0;
 	  int i;
 	  for (i = 0; i < count; i++)
 	    {
 	      if (fnmatch (*argv, lvars[i], __FNM_FLAGS) == 0
-		  && curr_sym_tab->save (stream, lvars[i]) != 0)
+		  && curr_sym_tab->save (stream, lvars[i], 0, prec) != 0)
 		saved_or_error++;
 	    }
 
 	  char **bvars = global_sym_tab->list (count, 0,
 					       symbol_def::BUILTIN_VARIABLE);
 
 	  for (i = 0; i < count; i++)
 	    {
 	      if (fnmatch (*argv, bvars[i], __FNM_FLAGS) == 0
-		  && global_sym_tab->save (stream, bvars[i]) != 0)
+		  && global_sym_tab->save (stream, bvars[i], 0, prec) != 0)
 		saved_or_error++;
 	    }
 
 	  delete [] lvars;
 	  delete [] bvars;
 
 	  if (! saved_or_error)
 	    warning ("save: no such variable `%s'", *argv);
