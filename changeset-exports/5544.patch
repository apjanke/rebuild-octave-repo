# HG changeset patch
# User jwe
# Date 1132598672 0
#      Mon Nov 21 18:44:32 2005 +0000
# Node ID 2286fa5f2e5dda7ed8661f7e9a3073e7dc7abe81
# Parent  4d52e637a72aa08d668d6e5a7b9c63d82bb134d6
[project @ 2005-11-21 18:44:31 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2005-11-21  John W. Eaton  <jwe@octave.org>
+
+	* pr-output.cc (pr_int): Fix thinko in byte-swapping for bit format.
+
+	* DLD-FUNCTIONS/cellfun.cc (Fcellfun):
+	Use C++ static_cast instead of C-style casts.
+
+2005-11-21  William Poetra Yoga H <williampoetra@yahoo.com>
+
+	* DLD-FUNCTIONS/cellfun.cc (Fcellfun):
+	Docstring and error message fixes.
+
 2005-11-17  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/minmax.cc (MINMAX_BODY): Don't cast arg1 to
 	const octave_complex_matrix&.
 
 2005-11-16  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in (PKG_ADD.inst): New target.
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -142,31 +142,31 @@ cellfun (\"tolower(x)\", @{\"Foo\", \"Ba
       for (int  count= 0; count < k ; count++)
         result(count) = f_args.elem(count).is_real_type ();
       retval = result;
     }
   else if (name == "length")
     {
       NDArray result (f_args.dims ());
       for (int  count= 0; count < k ; count++)
-        result(count) = double (f_args.elem(count).length ());
+        result(count) = static_cast<double> (f_args.elem(count).length ());
       retval = result;
     }
   else if (name == "ndims")
     {
       NDArray result (f_args.dims ());
       for (int count = 0; count < k ; count++)
-        result(count) = double (f_args.elem(count).ndims ());
+        result(count) = static_cast<double> (f_args.elem(count).ndims ());
       retval = result;
     }
   else if (name == "prodofsize")
     {
       NDArray result (f_args.dims ());
       for (int count = 0; count < k ; count++)
-        result(count) = double (f_args.elem(count).numel ());
+        result(count) = static_cast<double> (f_args.elem(count).numel ());
       retval = result;
     }
   else if (name == "size")
     {
       if (nargin == 3)
         {
           int d = args(2).nint_value () - 1;
 
@@ -175,17 +175,17 @@ cellfun (\"tolower(x)\", @{\"Foo\", \"Ba
 
 	  if (!error_state)
             {
               NDArray result (f_args.dims ());
               for (int count = 0; count < k ; count++)
                 {
                   dim_vector dv = f_args.elem(count).dims ();
                   if (d < dv.length ())
-	            result(count) = double (dv(d));
+	            result(count) = static_cast<double> (dv(d));
                   else
 	            result(count) = 1.0;
                 }
               retval = result;
             }
         }
       else
         error ("not enough arguments for `size'");
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -1101,16 +1101,22 @@ union equiv
     } \
   while (0)
 
 static void
 pr_any_float (const float_format *fmt, std::ostream& os, double d, int fw = 0)
 {
   if (fmt)
     {
+      // Unless explicitly asked for, always print in big-endian
+      // format for hex and bit formats.
+      //
+      //   {bit,hex}_format == 1: print big-endian
+      //   {bit,hex}_format == 2: print native
+
       if (hex_format)
 	{
 	  equiv tmp;
 	  tmp.d = d;
 
 	  // Unless explicitly asked for, always print in big-endian
 	  // format.
 
@@ -1146,19 +1152,16 @@ pr_any_float (const float_format *fmt, s
 	  os.fill (ofill);
 	  os.setf (oflags);	  
 	}
       else if (bit_format)
 	{
 	  equiv tmp;
 	  tmp.d = d;
 
-	  // Unless explicitly asked for, always print in big-endian
-	  // format.
-
 	  // XXX FIXME XXX -- is it correct to swap bytes for VAX
 	  // formats and not for Cray?
 
 	  oct_mach_info::float_format flt_fmt =
 	    oct_mach_info::native_float_format ();
 
 	  if (flt_fmt == oct_mach_info::flt_fmt_ieee_big_endian
 	      || flt_fmt == oct_mach_info::flt_fmt_cray
@@ -2120,16 +2123,22 @@ PRINT_CONV (octave_uint8, octave_uint16)
 
 template <class T>
 static inline void
 pr_int (std::ostream& os, const T& d, int fw = 0)
 {
   size_t sz = d.byte_size();
   const unsigned char * tmpi = d.iptr();
 
+  // Unless explicitly asked for, always print in big-endian
+  // format for hex and bit formats.
+  //
+  //   {bit,hex}_format == 1: print big-endian
+  //   {bit,hex}_format == 2: print native
+
   if (hex_format)
     {
       char ofill = os.fill ('0');
 
       std::ios::fmtflags oflags
 	= os.flags (std::ios::right | std::ios::hex);
 
       if (hex_format > 1 || oct_mach_info::words_big_endian ())
@@ -2143,25 +2152,33 @@ pr_int (std::ostream& os, const T& d, in
 	    os << std::setw (2) << static_cast<int> (tmpi[i]);
 	}
 
       os.fill (ofill);
       os.setf (oflags);	  
     }
   else if (bit_format)
     {
-      if (bit_format > 1 || oct_mach_info::words_big_endian ())
+      if (oct_mach_info::words_big_endian ())
 	{
 	  for (size_t i = 0; i < sz; i++)
-	    PRINT_CHAR_BITS_SWAPPED (os, tmpi[i]);
+	    PRINT_CHAR_BITS (os, tmpi[i]);
 	}
       else
 	{
-	  for (int i = sz - 1; i >= 0; i--)
-	    PRINT_CHAR_BITS (os, tmpi[i]);
+	  if (bit_format > 1)
+	    {
+	      for (size_t i = 0; i < sz; i++)
+		PRINT_CHAR_BITS_SWAPPED (os, tmpi[i]);
+	    }
+	  else
+	    {
+	      for (int i = sz - 1; i >= 0; i--)
+		PRINT_CHAR_BITS (os, tmpi[i]);
+	    }
 	}
     }
   else
     {
       os << std::setw (fw)
 	 << typename octave_print_conv<T>::print_conv_type (d);
 
       if (bank_format)
