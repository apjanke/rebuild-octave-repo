# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1382481816 14400
#      Tue Oct 22 18:43:36 2013 -0400
# Node ID f79bf671a493160c8ceb7772904f1b0f9bfb64e8
# Parent  580990c2ce0412dbc6bd8f7e71c1cccc002b9f0b
eliminate global LEXER variable

* input.h, input.cc (octave_base_reader::lexer): New member variable.
(octave_base_reader::octave_base_reader): Initialize lexer.
(octave_base_reader::octave_base_reader (const octave_base_reader&)):
Also copy pflag and lexer.
(octave_base_reader::reading_fcn_file,
octave_base_reader::reading_classdef_file,
octave_base_reader::reading_script_file): New functions.
(octave_base_reader::do_input_echo): Call reading_script file instead
of using global LEXER variable.
(get_user_input): Don't user global LEXER variable.  Only check
interactive and forced_interactive to decide whether to temporarily
set forced_interactive to true.
(octave_terminal_reader::octave_terminal_reader,
octave_file_reader::octave_file_reader,
octave_eval_string_reader::octave_eval_string_reader,
octave_input_reader::octave_input_reader):
New optional arg, lexer.
* toplev.cc (main_loop): Don't user global LEXER variable.  Eliminate
unused unwind_protect frame.
* lex.h, lex.ll (octave_base_lexer::cleanup): Delete unused function.
(octave_lexer::octave_lexer): Pass this to input_reader initializer.
* parse.h, oct-parse.in.yy (octave_base_parser::init):
Delete unneded function.
(octave_base_parser::octave_base_parser, octave_push_parser::init, octave_push_parser::octave_push_parser):
Don't call octave_base_parser::init.
(eval_string): Don't use global LEXER variable.  Eliminate unused
unwind_protect frame.

diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -142,17 +142,17 @@ set_default_prompts (void)
   VPS4 = "+ ";
 
   octave_link::set_default_prompts (VPS1, VPS2, VPS4);
 }
 
 void
 octave_base_reader::do_input_echo (const std::string& input_string) const
 {
-  int do_echo = (LEXER && LEXER->reading_script_file) ?
+  int do_echo = reading_script_file () ?
     (Vecho_executing_commands & ECHO_SCRIPTS)
       : (Vecho_executing_commands & ECHO_CMD_LINE) && ! forced_interactive;
 
   if (do_echo)
     {
       if (forced_interactive)
         {
           if (pflag > 0)
@@ -290,16 +290,34 @@ octave_base_reader::octave_gets (bool& e
   // list has been updated.
 
   if (interactive || forced_interactive)
     octave_link::post_input_event ();
 
   return retval;
 }
 
+bool
+octave_base_reader::reading_fcn_file (void) const
+{
+  return lexer ? lexer->reading_fcn_file : false;
+}
+
+bool
+octave_base_reader::reading_classdef_file (void) const
+{
+  return lexer ? lexer->reading_classdef_file : false;
+}
+
+bool
+octave_base_reader::reading_script_file (void) const
+{
+  return lexer ? lexer->reading_script_file : false;
+}
+
 // Fix things up so that input can come from the standard input.  This
 // may need to become much more complicated, which is why it's in a
 // separate function.
 
 FILE *
 get_input_from_stdin (void)
 {
   command_editor::set_input_stream (stdin);
@@ -548,29 +566,22 @@ get_debug_input (const std::string& prom
   std::string msg = buf.str ();
 
   if (! msg.empty ())
     std::cerr << msg << std::endl;
 
   frame.protect_var (VPS1);
   VPS1 = prompt;
 
-  if (! (interactive || forced_interactive)
-      || (LEXER && (LEXER->reading_fcn_file
-                    || LEXER->reading_classdef_file
-                    || LEXER->reading_script_file
-                    || LEXER->input_from_eval_string ())))
+  if (! (interactive || forced_interactive))
     {
       frame.protect_var (forced_interactive);
       forced_interactive = true;
     }
 
-  // octave_parser constructor sets this for us.
-  frame.protect_var (LEXER);
-
   octave_parser curr_parser;
 
   while (Vdebugging)
     {
       unwind_protect middle_frame;
 
       reset_error_handler ();
 
diff --git a/libinterp/corefcn/input.h b/libinterp/corefcn/input.h
--- a/libinterp/corefcn/input.h
+++ b/libinterp/corefcn/input.h
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 
 #include <string>
 
 #include "oct-time.h"
 #include "oct-obj.h"
 #include "pager.h"
 
 class octave_value;
+class octave_base_lexer;
 
 extern OCTINTERP_API FILE *get_input_from_stdin (void);
 
 // TRUE means this is an interactive shell.
 extern bool interactive;
 
 // TRUE means the user forced this shell to be interactive (-i).
 extern bool forced_interactive;
@@ -81,19 +82,23 @@ extern octave_time Vlast_prompt_time;
 
 class
 octave_base_reader
 {
 public:
 
   friend class octave_input_reader;
 
-  octave_base_reader (void) : count (1), pflag (0) { }
+  octave_base_reader (octave_base_lexer *lxr)
+    : count (1), pflag (0), lexer (lxr)
+  { }
 
-  octave_base_reader (const octave_base_reader&) : count (1) { }
+  octave_base_reader (const octave_base_reader& x)
+    : count (1), pflag (x.pflag), lexer (x.lexer)
+  { }
 
   virtual ~octave_base_reader (void) { }
 
   virtual std::string get_input (bool& eof) = 0;
 
   virtual std::string input_source (void) const { return in_src; }
 
   void reset (void) { promptflag (1); }
@@ -108,50 +113,60 @@ public:
   {
     int retval = pflag;
     pflag = n;
     return retval;
   }
 
   std::string octave_gets (bool& eof);
 
+  virtual bool reading_fcn_file (void) const;
+
+  virtual bool reading_classdef_file (void) const;
+
+  virtual bool reading_script_file (void) const;
+
 private:
 
   int count;
 
   int pflag;
 
+  octave_base_lexer *lexer;
+
   void do_input_echo (const std::string&) const;
 
   static const std::string in_src;
 };
 
 class
 octave_terminal_reader : public octave_base_reader
 {
 public:
 
-  octave_terminal_reader (void) : octave_base_reader () { }
+  octave_terminal_reader (octave_base_lexer *lxr = 0)
+    : octave_base_reader (lxr)
+  { }
 
   std::string get_input (bool& eof);
 
   std::string input_source (void) const { return in_src; }
 
 private:
 
   static const std::string in_src;
 };
 
 class
 octave_file_reader : public octave_base_reader
 {
 public:
 
-  octave_file_reader (FILE *f_arg)
-    : octave_base_reader (), file (f_arg) { }
+  octave_file_reader (FILE *f_arg, octave_base_lexer *lxr = 0)
+    : octave_base_reader (lxr), file (f_arg) { }
 
   std::string get_input (bool& eof);
 
   std::string input_source (void) const { return in_src; }
 
 private:
 
   FILE *file;
@@ -159,18 +174,19 @@ private:
   static const std::string in_src;
 };
 
 class
 octave_eval_string_reader : public octave_base_reader
 {
 public:
 
-  octave_eval_string_reader (const std::string& str)
-    : octave_base_reader (), eval_string (str)
+  octave_eval_string_reader (const std::string& str,
+                             octave_base_lexer *lxr = 0)
+    : octave_base_reader (lxr), eval_string (str)
   { }
 
   std::string get_input (bool& eof);
 
   std::string input_source (void) const { return in_src; }
 
 private:
 
@@ -178,26 +194,26 @@ private:
 
   static const std::string in_src;
 };
 
 class
 octave_input_reader
 {
 public:
-  octave_input_reader (void)
-    : rep (new octave_terminal_reader ())
+  octave_input_reader (octave_base_lexer *lxr = 0)
+    : rep (new octave_terminal_reader (lxr))
   { }
 
-  octave_input_reader (FILE *file)
-    : rep (new octave_file_reader (file))
+  octave_input_reader (FILE *file, octave_base_lexer *lxr = 0)
+    : rep (new octave_file_reader (file, lxr))
   { }
 
-  octave_input_reader (const std::string& str)
-    : rep (new octave_eval_string_reader (str))
+  octave_input_reader (const std::string& str, octave_base_lexer *lxr = 0)
+    : rep (new octave_eval_string_reader (str, lxr))
   { }
 
   octave_input_reader (const octave_input_reader& ir)
   {
     rep = ir.rep;
     rep->count++;
   }
 
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -534,34 +534,27 @@ main_loop (void)
   octave_bad_alloc_hook = 0;
 
   octave_catch_interrupts ();
 
   octave_initialized = true;
 
   // The big loop.
 
-  unwind_protect frame;
-
-  // octave_parser constructor sets this for us.
-  frame.protect_var (LEXER);
-
   octave_lexer *lxr = ((interactive || forced_interactive)
                        ? new octave_lexer ()
                        : new octave_lexer (stdin));
 
   octave_parser parser (*lxr);
 
   int retval = 0;
   do
     {
       try
         {
-          unwind_protect inner_frame;
-
           reset_error_handler ();
 
           parser.reset ();
 
           if (symbol_table::at_top_level ())
             tree_evaluator::reset_debug_state ();
 
           retval = parser.run ();
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -677,19 +677,16 @@ public:
   int handle_token (int tok, token *tok_val = 0);
 
   int count_token (int tok);
 
   int count_token_internal (int tok);
 
   int show_token (int tok);
 
-  // For unwind protect.
-  static void cleanup (octave_base_lexer *lexer) { delete lexer; }
-
 protected:
 
   std::stack<int> start_state_stack;
 
   // No copying!
 
   octave_base_lexer (const octave_base_lexer&);
 
@@ -697,25 +694,25 @@ protected:
 };
 
 class
 octave_lexer : public octave_base_lexer
 {
 public:
 
   octave_lexer (void)
-    : octave_base_lexer (), input_reader ()
+    : octave_base_lexer (), input_reader (this)
   { }
 
   octave_lexer (FILE *file)
-    : octave_base_lexer (), input_reader (file)
+    : octave_base_lexer (), input_reader (file, this)
   { }
 
   octave_lexer (const std::string& eval_string)
-    : octave_base_lexer (), input_reader (eval_string)
+    : octave_base_lexer (), input_reader (eval_string, this)
   { }
 
   void reset (void)
   {
     input_reader.reset ();
 
     octave_base_lexer::reset ();
   }
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -1639,21 +1639,16 @@ yyerror (octave_base_parser& parser, con
 
 octave_base_parser::~octave_base_parser (void)
 {
   delete stmt_list;
 
   delete &lexer;
 }
 
-void octave_base_parser::init (void)
-{
-  LEXER = &lexer;
-}
-
 void
 octave_base_parser::reset (void)
 {
   endfunction_found = false;
   autoloading = false;
   fcn_file_from_relative_lookup = false;
   parsing_subfunctions = false;
   max_fcn_depth = 0;
@@ -3419,18 +3414,16 @@ octave_push_parser::~octave_push_parser 
 {
   yypstate_delete (static_cast<yypstate *> (parser_state));
 }
 
 void
 octave_push_parser::init (void)
 {
   parser_state = yypstate_new ();
-
-  octave_base_parser::init ();
 }
 
 // Parse input from INPUT.  Pass TRUE for EOF if the end of INPUT should
 // finish the parse.
 
 int
 octave_push_parser::run (const std::string& input, bool eof)
 {
@@ -4236,32 +4229,24 @@ builtin (\"sin\", 0)\n\
 }
 
 octave_value_list
 eval_string (const std::string& eval_str, bool silent,
              int& parse_status, int nargout)
 {
   octave_value_list retval;
 
-  unwind_protect frame;
-
-  // octave_base_parser constructor sets this for us.
-  frame.protect_var (LEXER);
-
   octave_parser parser (eval_str);
 
   do
     {
       parser.reset ();
 
       parse_status = parser.run ();
 
-      // Unmark forced variables.
-      frame.run (1);
-
       if (parse_status == 0)
         {
           if (parser.stmt_list)
             {
               tree_statement *stmt = 0;
 
               if (parser.stmt_list->length () == 1
                   && (stmt = parser.stmt_list->front ())
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -133,24 +133,20 @@ public:
   octave_base_parser (octave_base_lexer& lxr)
     : endfunction_found (false),
       autoloading (false), fcn_file_from_relative_lookup (false),
       parsing_subfunctions (false), max_fcn_depth (0),
       curr_fcn_depth (0), primary_fcn_scope (-1),
       curr_class_name (), function_scopes (), primary_fcn_ptr (0),
       subfunction_names (), stmt_list (0),
       lexer (lxr)
-  {
-    init ();
-  }
+  { }
 
   ~octave_base_parser (void);
 
-  void init (void);
-
   void reset (void);
 
   // Error mesages for mismatched end tokens.
   void end_error (const char *type, token::end_tok_type ettype, int l, int c);
 
   // Check to see that end tokens are properly matched.
   bool end_token_ok (token *tok, token::end_tok_type expected);
 
