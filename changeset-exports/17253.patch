# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1376516750 18000
#      Wed Aug 14 16:45:50 2013 -0500
# Node ID e3870f594d8b9ee68fa81a53e5b58684c388ae95
# Parent  dac81d4b8ce16d7565a4113765404ffbe3c11a26
assert.m: Fix recursive calls.

* scripts/testfun/assert.m: Initialize call_depth to -1 and always increment
call_depth at start of function and decrement call_depth at end of function.
Properly indent err.

diff --git a/scripts/testfun/assert.m b/scripts/testfun/assert.m
--- a/scripts/testfun/assert.m
+++ b/scripts/testfun/assert.m
@@ -55,23 +55,22 @@
 ## @end deftypefn
 
 function assert (cond, varargin)
 
   if (nargin == 0 || nargin > 3)
     print_usage ();
   endif
 
-  persistent call_depth = 0;
+  persistent call_depth = -1;
   persistent errmsg;
 
-  if (call_depth > 0)
-    call_depth++;
-  else
-    call_depth = 0;
+  call_depth++;
+
+  if (call_depth == 0)
     errmsg = "";
   end
 
   in = deblank (argn(1,:));
   for i = 2:rows (argn)
     in = [in "," deblank(argn(i,:))];
   endfor
   in = ["(" in ")"];
@@ -128,20 +127,20 @@ function assert (cond, varargin)
         err.reason{end+1} = "Cell sizes don't match";
       else
         try
           ## Recursively compare cell arrays
           for i = 1:length (expected(:))
             assert (cond{i}, expected{i}, tol);
           endfor
         catch
-        err.index{end+1} = "{}";
-        err.observed{end+1} = "O";
-        err.expected{end+1} = "E";
-        err.reason{end+1} = "Cell configuration error";
+          err.index{end+1} = "{}";
+          err.observed{end+1} = "O";
+          err.expected{end+1} = "E";
+          err.reason{end+1} = "Cell configuration error";
         end_try_catch
       endif
 
     elseif (isstruct (expected))
       if (! isstruct (cond) || any (size (cond) != size (expected))
           || rows (fieldnames (cond)) != rows (fieldnames (expected)))
         err.index{end+1} = "{}";
         err.observed{end+1} = "O";
@@ -350,23 +349,23 @@ function assert (cond, varargin)
       if (! isempty (errmsg))
         errmsg = [errmsg "\n"];
       endif
       errmsg = [errmsg, pprint(in, err)];
     end
 
   endif
 
-  if (call_depth == 0)
+  call_depth--;
+
+  if (call_depth == -1)
     ## Last time through.  If there were any errors on any pass, raise a flag.
     if (! isempty (errmsg))
       error (errmsg);
     endif
-  else
-    call_depth--;
   endif
 
 endfunction
 
 
 ## empty input
 %!assert ([])
 %!assert (zeros (3,0), zeros (3,0))
