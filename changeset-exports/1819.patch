# HG changeset patch
# User jwe
# Date 823087860 0
#      Wed Jan 31 11:31:00 1996 +0000
# Node ID 8b8498bf8ec5b8a4a36ed8c8cd87ca1d24e68948
# Parent  947837af62acf0df0511311b1ccaccfaf0c4d725
[project @ 1996-01-31 11:29:17 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -30,17 +30,19 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <cfloat>
 
 #include <iostream.h>
 
 #include <sys/types.h> // XXX FIXME XXX
 
+#include "CmplxAEPBAL.h"
 #include "CmplxDET.h"
+#include "CmplxSCHUR.h"
 #include "CmplxSVD.h"
 #include "f77-uscore.h"
 #include "lo-error.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
 #include "oct-cmplx.h"
 
 // Fortran functions we call.
@@ -73,16 +75,30 @@ extern "C"
   // implicit double precision (a-h,o-z) statement at the beginning of
   // each subroutine.
 
   int F77_FCN (cffti, CFFTI) (const int&, Complex*);
 
   int F77_FCN (cfftf, CFFTF) (const int&, Complex*, Complex*);
 
   int F77_FCN (cfftb, CFFTB) (const int&, Complex*, Complex*);
+
+  int F77_FCN (zlartg, ZLARTG) (const Complex&, const Complex&,
+				double&, Complex&, Complex&);
+
+  int F77_FCN (ztrsyl, ZTRSYL) (const char*, const char*, const int&,
+				const int&, const int&,
+				const Complex*, const int&,
+				const Complex*, const int&, 
+				const Complex*, const int&, double&,
+				int&, long, long);
+
+  double F77_FCN (zlange, ZLANGE) (const char*, const int&,
+				   const int&, const Complex*,
+				   const int&, double*); 
 }
 
 // Complex Matrix class
 
 ComplexMatrix::ComplexMatrix (const Matrix& a)
   : MArray2<Complex> (a.rows (), a.cols ())
 {
   for (int j = 0; j < cols (); j++)
@@ -1380,16 +1396,134 @@ ComplexMatrix::lssolve (const ComplexCol
   delete [] tmp_data;
   delete [] s;
   delete [] work;
   delete [] rwork;
 
   return retval;
 }
 
+// Constants for matrix exponential calculation.
+
+static double padec [] =
+{
+  5.0000000000000000e-1,
+  1.1666666666666667e-1,
+  1.6666666666666667e-2,
+  1.6025641025641026e-3,
+  1.0683760683760684e-4,
+  4.8562548562548563e-6,
+  1.3875013875013875e-7,
+  1.9270852604185938e-9,
+};
+
+ComplexMatrix
+ComplexMatrix::expm (void) const
+{
+  ComplexMatrix retval;
+
+  ComplexMatrix m = *this;
+
+  int nc = columns ();
+
+  // trace shift value
+  Complex trshift = 0.0;
+
+  // Preconditioning step 1: trace normalization.
+
+  for (int i = 0; i < nc; i++)
+    trshift += m.elem (i, i);
+
+  trshift /= nc;
+
+  for (int i = 0; i < nc; i++)
+    m.elem (i, i) -= trshift;
+
+  // Preconditioning step 2: eigenvalue balancing.
+
+  ComplexAEPBALANCE mbal (m, "B");
+  m = mbal.balanced_matrix ();
+  ComplexMatrix d = mbal.balancing_matrix ();
+
+  // Preconditioning step 3: scaling.
+
+  ColumnVector work (nc);
+  double inf_norm
+    = F77_FCN (zlange, ZLANGE) ("I", nc, nc, m.fortran_vec (), nc,
+				work.fortran_vec ());
+
+  int sqpow = (int) (inf_norm > 0.0
+		     ? (1.0 + log (inf_norm) / log (2.0))
+		     : 0.0);
+
+  // Check whether we need to square at all.
+
+  if (sqpow < 0)
+    sqpow = 0;
+
+  if (sqpow > 0)
+    {
+      double scale_factor = 1.0;
+      for (int i = 0; i < sqpow; i++)
+	scale_factor *= 2.0;
+
+      m = m / scale_factor;
+    }
+
+  // npp, dpp: pade' approx polynomial matrices.
+
+  ComplexMatrix npp (nc, nc, 0.0);
+  ComplexMatrix dpp = npp;
+
+  // Now powers a^8 ... a^1.
+
+  int minus_one_j = -1;
+  for (int j = 7; j >= 0; j--)
+    {
+      npp = m * npp + m * padec[j];
+      dpp = m * dpp + m * (minus_one_j * padec[j]);
+      minus_one_j *= -1;
+    }
+
+  // Zero power.
+
+  dpp = -dpp;
+  for (int j = 0; j < nc; j++)
+    {
+      npp.elem (j, j) += 1.0;
+      dpp.elem (j, j) += 1.0;
+    }
+
+  // Compute pade approximation = inverse (dpp) * npp.
+
+  retval = dpp.solve (npp);
+	
+  // Reverse preconditioning step 3: repeated squaring.
+
+  while (sqpow)
+    {
+      retval = retval * retval;
+      sqpow--;
+    }
+
+  // Reverse preconditioning step 2: inverse balancing.
+  // XXX FIXME XXX -- should probably do this with Lapack calls
+  // instead of a complete matrix inversion.
+
+  retval = retval.transpose ();
+  d = d.transpose ();
+  retval = retval * d;
+  retval = d.solve (retval);
+  retval = retval.transpose ();
+
+  // Reverse preconditioning step 1: fix trace normalization.
+
+  return retval * exp (trshift);
+}
+
 // column vector by row vector -> matrix operations
 
 ComplexMatrix
 operator * (const ColumnVector& v, const ComplexRowVector& a)
 {
   ComplexColumnVector tmp (v);
   return tmp * a;
 }
@@ -3367,14 +3501,78 @@ operator >> (istream& is, ComplexMatrix&
 	    else
 	      break;
 	  }
     }
 
   return is;
 }
 
+ComplexMatrix
+Givens (const Complex& x, const Complex& y)
+{
+  double cc;
+  Complex cs, temp_r;
+ 
+  F77_FCN (zlartg, ZLARTG) (x, y, cc, cs, temp_r);
+
+  ComplexMatrix g (2, 2);
+
+  g.elem (0, 0) = cc;
+  g.elem (1, 1) = cc;
+  g.elem (0, 1) = cs;
+  g.elem (1, 0) = -conj (cs);
+
+  return g;
+}
+
+ComplexMatrix
+Sylvester (const ComplexMatrix& a, const ComplexMatrix& b,
+	   const ComplexMatrix& c)
+{
+  ComplexMatrix retval;
+
+  // XXX FIXME XXX -- need to check that a, b, and c are all the same
+  // size.
+
+  // Compute Schur decompositions
+
+  ComplexSCHUR as (a, "U");
+  ComplexSCHUR bs (b, "U");
+  
+  // Transform c to new coordinates.
+
+  ComplexMatrix ua = as.unitary_matrix ();
+  ComplexMatrix sch_a = as.schur_matrix ();
+
+  ComplexMatrix ub = bs.unitary_matrix ();
+  ComplexMatrix sch_b = bs.schur_matrix ();
+  
+  ComplexMatrix cx = ua.hermitian () * c * ub;
+
+  // Solve the sylvester equation, back-transform, and return the
+  // solution.
+
+  int a_nr = a.rows ();
+  int b_nr = b.rows ();
+
+  double scale;
+  int info;
+  
+  F77_FCN (ztrsyl, ZTRSYL) ("N", "N", 1, a_nr, b_nr,
+			    sch_a.fortran_vec (), a_nr,
+			    sch_b.fortran_vec (), b_nr,
+			    cx.fortran_vec (), a_nr, scale,
+			    info, 1L, 1L);
+
+  // XXX FIXME XXX -- check info?
+
+  retval = -ua * cx * ub.hermitian ();
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -156,16 +156,18 @@ public:
   ComplexMatrix lssolve (const ComplexMatrix& b, int& info,
 			 int& rank) const;
 
   ComplexColumnVector lssolve (const ComplexColumnVector& b) const;
   ComplexColumnVector lssolve (const ComplexColumnVector& b, int& info) const;
   ComplexColumnVector lssolve (const ComplexColumnVector& b, int& info,
 			       int& rank) const;
 
+  ComplexMatrix expm (void) const;
+
   // column vector by row vector -> matrix operations
 
   friend ComplexMatrix operator * (const ColumnVector& a,
 				   const ComplexRowVector& b);
 
   friend ComplexMatrix operator * (const ComplexColumnVector& a,
 				   const RowVector& b);
 
@@ -343,16 +345,21 @@ public:
   friend ostream& operator << (ostream& os, const ComplexMatrix& a);
   friend istream& operator >> (istream& is, ComplexMatrix& a);
 
 private:
 
   ComplexMatrix (Complex *d, int r, int c) : MArray2<Complex> (d, r, c) { }
 };
 
+ComplexMatrix Givens (const Complex&, const Complex&);
+
+ComplexMatrix Sylvester (const ComplexMatrix&, const ComplexMatrix&,
+			 const ComplexMatrix&);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -32,17 +32,19 @@ Software Foundation, 59 Temple Place - S
 #include <cfloat>
 #include <cstdio>
 #include <cstring>
 
 #include <iostream.h>
 
 #include <sys/types.h>  // XXX FIXME XXX
 
+#include "dbleAEPBAL.h"
 #include "dbleDET.h"
+#include "dbleSCHUR.h"
 #include "dbleSVD.h"
 #include "f77-uscore.h"
 #include "lo-error.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
 #include "oct-cmplx.h"
 
 // Fortran functions we call.
@@ -76,16 +78,29 @@ extern "C"
   // implicit double precision (a-h,o-z) statement at the beginning of
   // each subroutine.
 
   int F77_FCN (cffti, CFFTI) (const int&, Complex*);
 
   int F77_FCN (cfftf, CFFTF) (const int&, Complex*, Complex*);
 
   int F77_FCN (cfftb, CFFTB) (const int&, Complex*, Complex*);
+
+  int F77_FCN (dlartg, DLARTG) (const double&, const double&, double&,
+				double&, double&);
+
+  int F77_FCN (dtrsyl, DTRSYL) (const char*, const char*, const int&,
+				const int&, const int&, const double*,
+				const int&, const double*, const int&,
+				const double*, const int&, double&,
+				int&, long, long);
+
+  double F77_FCN (dlange, DLANGE) (const char*, const int&,
+				   const int&, const double*,
+				   const int&, double*); 
 }
 
 // Matrix class.
 
 Matrix::Matrix (const DiagMatrix& a)
   : MArray2<double> (a.rows (), a.cols (), 0.0)
 {
   for (int i = 0; i < a.length (); i++)
@@ -1153,16 +1168,132 @@ Matrix::lssolve (const ComplexColumnVect
 
 ComplexColumnVector
 Matrix::lssolve (const ComplexColumnVector& b, int& info, int& rank) const
 {
   ComplexMatrix tmp (*this);
   return tmp.lssolve (b, info, rank);
 }
 
+// Constants for matrix exponential calculation.
+
+static double padec [] =
+{
+  5.0000000000000000e-1,
+  1.1666666666666667e-1,
+  1.6666666666666667e-2,
+  1.6025641025641026e-3,
+  1.0683760683760684e-4,
+  4.8562548562548563e-6,
+  1.3875013875013875e-7,
+  1.9270852604185938e-9,
+};
+
+Matrix
+Matrix::expm (void) const
+{
+  Matrix retval;
+
+  Matrix m = *this;
+
+  int nc = columns ();
+
+  // trace shift value
+  double trshift = 0;
+
+  // Preconditioning step 1: trace normalization.
+
+  for (int i = 0; i < nc; i++)
+    trshift += m.elem (i, i);
+
+  trshift /= nc;
+
+  for (int i = 0; i < nc; i++)
+    m.elem (i, i) -= trshift;
+
+  // Preconditioning step 2: balancing.
+
+  AEPBALANCE mbal (m, "B");
+  m = mbal.balanced_matrix ();
+  Matrix d = mbal.balancing_matrix ();
+
+  // Preconditioning step 3: scaling.
+
+  ColumnVector work(nc);
+  double inf_norm
+    = F77_FCN (dlange, DLANGE) ("I", nc, nc, m.fortran_vec (),nc,
+				work.fortran_vec ());
+
+  int sqpow = (int) (inf_norm > 0.0
+		     ? (1.0 + log (inf_norm) / log (2.0))
+		     : 0.0);
+
+  // Check whether we need to square at all.
+
+  if (sqpow < 0)
+    sqpow = 0;
+
+  if (sqpow > 0)
+    {
+      double scale_factor = 1.0;
+      for (int i = 0; i < sqpow; i++)
+	scale_factor *= 2.0;
+
+      m = m / scale_factor;
+    }
+
+  // npp, dpp: pade' approx polynomial matrices.
+
+  Matrix npp (nc, nc, 0.0);
+  Matrix dpp = npp;
+
+  // Now powers a^8 ... a^1.
+
+  int minus_one_j = -1;
+  for (int j = 7; j >= 0; j--)
+    {
+      npp = m * npp + m * padec[j];
+      dpp = m * dpp + m * (minus_one_j * padec[j]);
+      minus_one_j *= -1;
+    }
+
+  // Zero power.
+
+  dpp = -dpp;
+  for(int j = 0; j < nc; j++)
+    {
+      npp.elem (j, j) += 1.0;
+      dpp.elem (j, j) += 1.0;
+    }
+
+  // Compute pade approximation = inverse (dpp) * npp.
+
+  retval = dpp.solve (npp);
+
+  // Reverse preconditioning step 3: repeated squaring.
+
+  while (sqpow)
+    {
+      retval = retval * retval;
+      sqpow--;
+    }
+
+  // Reverse preconditioning step 2: inverse balancing.
+
+  retval = retval.transpose();
+  d = d.transpose ();
+  retval = retval * d;
+  retval = d.solve (retval);
+  retval = retval.transpose ();
+
+  // Reverse preconditioning step 1: fix trace normalization.
+
+  return retval * exp (trshift);
+}
+
 Matrix&
 Matrix::operator += (const Matrix& a)
 {
   int nr = rows ();
   int nc = cols ();
   if (nr != a.rows () || nc != a.cols ())
     {
       (*current_liboctave_error_handler)
@@ -2352,14 +2483,77 @@ Matrix::write (FILE *fptr, const char *t
       (*current_liboctave_error_handler)
 	("fwrite: unrecognized type parameter %s", type);
       return 0;
     }
 
   return count;
 }
 
+Matrix
+Givens (double x, double y)
+{
+  double cc, s, temp_r;
+
+  F77_FCN (dlartg, DLARTG) (x, y, cc, s, temp_r);
+
+  Matrix g (2, 2);
+
+  g.elem (0, 0) = cc;
+  g.elem (1, 1) = cc;
+  g.elem (0, 1) = s;
+  g.elem (1, 0) = -s;
+
+  return g;
+}
+
+Matrix
+Sylvester (const Matrix& a, const Matrix& b, const Matrix& c)
+{
+  Matrix retval;
+
+  // XXX FIXME XXX -- need to check that a, b, and c are all the same
+  // size.
+
+  // Compute Schur decompositions.
+
+  SCHUR as (a, "U");
+  SCHUR bs (b, "U");
+  
+  // Transform c to new coordinates.
+
+  Matrix ua = as.unitary_matrix ();
+  Matrix sch_a = as.schur_matrix ();
+
+  Matrix ub = bs.unitary_matrix ();
+  Matrix sch_b = bs.schur_matrix ();
+  
+  Matrix cx = ua.transpose () * c * ub;
+  
+  // Solve the sylvester equation, back-transform, and return the
+  // solution.
+
+  int a_nr = a.rows ();
+  int b_nr = b.rows ();
+
+  double scale;
+  int info;
+
+  F77_FCN (dtrsyl, DTRSYL) ("N", "N", 1, a_nr, b_nr,
+			    sch_a.fortran_vec (), a_nr, 
+			    sch_b.fortran_vec (), b_nr,
+			    cx.fortran_vec (), a_nr, scale,
+			    info, 1L, 1L);
+
+
+  // XXX FIXME XXX -- check info?
+  
+  retval = -ua*cx*ub.transpose ();
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -152,16 +152,18 @@ public:
   ColumnVector lssolve (const ColumnVector& b, int& info) const;
   ColumnVector lssolve (const ColumnVector& b, int& info, int& rank) const;
 
   ComplexColumnVector lssolve (const ComplexColumnVector& b) const;
   ComplexColumnVector lssolve (const ComplexColumnVector& b, int& info) const;
   ComplexColumnVector lssolve (const ComplexColumnVector& b, int& info,
 			       int& rank) const;
 
+  Matrix expm (void) const;
+
   Matrix& operator += (const Matrix& a);
   Matrix& operator -= (const Matrix& a);
 
   Matrix& operator += (const DiagMatrix& a);
   Matrix& operator -= (const DiagMatrix& a);
 
   // unary operations
 
@@ -235,16 +237,20 @@ public:
   int read (FILE *fptr, const char *type);
   int write (FILE *fptr, const char *type);
 
 private:
 
   Matrix (double *d, int r, int c) : MArray2<double> (d, r, c) { }
 };
 
+Matrix Givens (double, double);
+
+Matrix Sylvester (const Matrix&, const Matrix&, const Matrix&);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/expm.cc b/src/expm.cc
--- a/src/expm.cc
+++ b/src/expm.cc
@@ -22,290 +22,71 @@ Software Foundation, 59 Temple Place - S
 */
 
 // Written by A. S. Hodel <scotte@eng.auburn.edu>
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include "CmplxAEPBAL.h"
-#include "dbleAEPBAL.h"
-#include "f77-uscore.h"
-#include "oct-math.h"
-
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "oct-obj.h"
-#include "user-prefs.h"
 #include "utils.h"
 
-extern "C"
-{
-  double F77_FCN (dlange, DLANGE) (const char*, const int&,
-				   const int&, const double*,
-				   const int&, double*); 
-
-  double F77_FCN (zlange, ZLANGE) (const char*, const int&,
-				   const int&, const Complex*,
-				   const int&, double*); 
-}
-
 DEFUN_DLD_BUILTIN ("expm", Fexpm, Sexpm, FSexpm, 10,
   "expm (X): matrix exponential, e^A")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin != 1)
     {
       print_usage ("expm");
       return retval;
     }
 
   tree_constant arg = args(0);
 
-  // Constants for matrix exponential calculation.
-
-  static double padec [] =
-    {
-      5.0000000000000000e-1,
-      1.1666666666666667e-1,
-      1.6666666666666667e-2,
-      1.6025641025641026e-3,
-      1.0683760683760684e-4,
-      4.8562548562548563e-6,
-      1.3875013875013875e-7,
-      1.9270852604185938e-9,
-    };
-
   int nr = arg.rows ();
   int nc = arg.columns ();
 
   int arg_is_empty = empty_arg ("expm", nr, nc);
 
   if (arg_is_empty < 0)
     return retval;
   if (arg_is_empty > 0)
     return Matrix ();
 
   if (nr != nc)
     {
       gripe_square_matrix_required ("expm");
       return retval;
     }
 
-  char* balance_job = "B";	// variables for balancing
-
   if (arg.is_real_type ())
     {
-      // Compute the exponential.
-
       Matrix m = arg.matrix_value ();
 
       if (error_state)
 	return retval;
-
-      double trshift = 0;		// trace shift value
-
-      // Preconditioning step 1: trace normalization.
-
-      for (int i = 0; i < nc; i++)
-	trshift += m.elem (i, i);
-
-      trshift /= nc;
-
-      for (int i = 0; i < nc; i++)
-	m.elem (i, i) -= trshift;
-
-      // Preconditioning step 2: balancing.
-
-      AEPBALANCE mbal (m, balance_job);
-      m = mbal.balanced_matrix ();
-      Matrix d = mbal.balancing_matrix ();
-
-      // Preconditioning step 3: scaling.
-
-      ColumnVector work(nc);
-      double inf_norm
-	= F77_FCN (dlange, DLANGE) ("I", nc, nc, m.fortran_vec (),nc,
-				    work.fortran_vec ());
-
-      int sqpow = (int) (inf_norm > 0.0
-			 ? (1.0 + log (inf_norm) / log (2.0))
-			 : 0.0);
-
-      // Check whether we need to square at all.
-
-      if (sqpow < 0)
-	sqpow = 0;
-
-      if (sqpow > 0)
-	{
-	  double scale_factor = 1.0;
-	  for (int i = 0; i < sqpow; i++)
-	    scale_factor *= 2.0;
-
-	  m = m / scale_factor;
-	}
-
-      // npp, dpp: pade' approx polynomial matrices.
-
-      Matrix npp (nc, nc, 0.0);
-      Matrix dpp = npp;
-
-      // Now powers a^8 ... a^1.
-
-      int minus_one_j = -1;
-      for (int j = 7; j >= 0; j--)
-	{
-	  npp = m * npp + m * padec[j];
-	  dpp = m * dpp + m * (minus_one_j * padec[j]);
-	  minus_one_j *= -1;
-	}
-
-      // Zero power.
-
-      dpp = -dpp;
-      for(int j = 0; j < nc; j++)
-	{
-	  npp.elem (j, j) += 1.0;
-	  dpp.elem (j, j) += 1.0;
-	}
-
-      // Compute pade approximation = inverse (dpp) * npp.
-
-      Matrix result = dpp.solve (npp);
-
-      // Reverse preconditioning step 3: repeated squaring.
-
-      while (sqpow)
-	{
-	  result = result * result;
-	  sqpow--;
-	}
-
-      // Reverse preconditioning step 2: inverse balancing.
-
-      result = result.transpose();
-      d = d.transpose ();
-      result = result * d;
-      result = d.solve (result);
-      result = result.transpose ();
-
-      // Reverse preconditioning step 1: fix trace normalization.
-
-      result = result * exp (trshift);
-
-      retval = result;
+      else
+	retval = m.expm ();
     }
   else if (arg.is_complex_type ())
     {
       ComplexMatrix m = arg.complex_matrix_value ();
 
       if (error_state)
 	return retval;
-
-      Complex trshift = 0.0;		// trace shift value
-
-      // Preconditioning step 1: trace normalization.
-
-      for (int i = 0; i < nc; i++)
-	trshift += m.elem (i, i);
-
-      trshift /= nc;
-
-      for (int i = 0; i < nc; i++)
-	m.elem (i, i) -= trshift;
-
-      // Preconditioning step 2: eigenvalue balancing.
-
-      ComplexAEPBALANCE mbal (m, balance_job);
-      m = mbal.balanced_matrix ();
-      ComplexMatrix d = mbal.balancing_matrix ();
-
-      // Preconditioning step 3: scaling.
-
-      ColumnVector work (nc);
-      double inf_norm
-	= F77_FCN (zlange, ZLANGE) ("I", nc, nc, m.fortran_vec (), nc,
-				    work.fortran_vec ());
-
-      int sqpow = (int) (inf_norm > 0.0
-			 ? (1.0 + log (inf_norm) / log (2.0))
-			 : 0.0);
-
-      // Check whether we need to square at all.
-
-      if (sqpow < 0)
-	sqpow = 0;
-
-      if (sqpow > 0)
-	{
-	  double scale_factor = 1.0;
-	  for (int i = 0; i < sqpow; i++)
-	    scale_factor *= 2.0;
-
-	  m = m / scale_factor;
-	}
-
-      // npp, dpp: pade' approx polynomial matrices.
-
-      ComplexMatrix npp (nc, nc, 0.0);
-      ComplexMatrix dpp = npp;
-
-      // Now powers a^8 ... a^1.
-
-      int minus_one_j = -1;
-      for (int j = 7; j >= 0; j--)
-	{
-	  npp = m * npp + m * padec[j];
-	  dpp = m * dpp + m * (minus_one_j * padec[j]);
-	  minus_one_j *= -1;
-	}
-
-      // Zero power.
-
-      dpp = -dpp;
-      for (int j = 0; j < nc; j++)
-	{
-	  npp.elem (j, j) += 1.0;
-	  dpp.elem (j, j) += 1.0;
-	}
-
-      // Compute pade approximation = inverse (dpp) * npp.
-
-      ComplexMatrix result = dpp.solve (npp);
-	
-      // Reverse preconditioning step 3: repeated squaring.
-
-      while (sqpow)
-	{
-	  result = result * result;
-	  sqpow--;
-	}
-
-      // Reverse preconditioning step 2: inverse balancing.
-      // XXX FIXME XXX -- should probably do this with Lapack calls
-      // instead of a complete matrix inversion.
-
-      result = result.transpose ();
-      d = d.transpose ();
-      result = result * d;
-      result = d.solve (result);
-      result = result.transpose ();
-
-      // Reverse preconditioning step 1: fix trace normalization.
-
-      result = result * exp (trshift);
-
-      retval = result;
+      else
+	retval = m.expm ();
     }
   else
     {
       gripe_wrong_type_arg ("expm", arg);
     }
 
   return retval;
 }
diff --git a/src/givens.cc b/src/givens.cc
--- a/src/givens.cc
+++ b/src/givens.cc
@@ -16,39 +16,26 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
-// Written by A. S. Hodel <scotte@eng.auburn.edu>
+// Originally written by A. S. Hodel <scotte@eng.auburn.edu>
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include "f77-uscore.h"
-
 #include "defun-dld.h"
 #include "error.h"
-#include "gripes.h"
 #include "help.h"
 #include "oct-obj.h"
-#include "user-prefs.h"
-
-extern "C"
-{
-  int F77_FCN (dlartg, DLARTG) (const double&, const double&, double&,
-				double&, double&);
-
-  int F77_FCN (zlartg, ZLARTG) (const Complex&, const Complex&,
-				double&, Complex&, Complex&);
-}
 
 DEFUN_DLD_BUILTIN ("givens", Fgivens, Sgivens, FSgivens, 11,
   "G = givens (X, Y)\n\
 \n\
 compute orthogonal matrix G = [c s; -conj (s) c]\n\
 such that G [x; y] = [*; 0]  (x, y scalars)\n\
 \n\
 [c, s] = givens (x, y) returns the (c, s) values themselves.")
@@ -57,130 +44,77 @@ such that G [x; y] = [*; 0]  (x, y scala
 
   int nargin = args.length ();
 
   if (nargin != 2 || nargout > 2)
     {
       print_usage ("givens");
       return retval;
     }
-
-  tree_constant arg_a = args(0);
-  tree_constant arg_b = args(1);
-
-  if (! arg_a.is_scalar_type () && arg_b.is_scalar_type ())
-    {
-      error("givens: requires two scalar arguments");
-      return retval;
-    }
-
-  Complex cx, cy;
-  double x, y;
-
-  if (arg_a.is_complex_type ())
-    {
-      cx = arg_a.complex_value ();
-
-      if (error_state)
-	return retval;
-    }
-  else 
-    {
-      x = arg_a.double_value ();
-
-      if (error_state)
-	return retval;
-
-      // Convert to complex just in case...
-
-      cx = x;
-    }
-
-  if (arg_b.is_complex_type ())
-    {
-      cy = arg_b.complex_value ();
-
-      if (error_state)
-	return retval;
-    }
   else
     {
-      y = arg_b.double_value ();
-
-      if (error_state)
-	return retval;
+      if (args(0).is_complex_type () || args(1).is_complex_type ())
+	{
+	  Complex cx = args(0).complex_value ();
+	  Complex cy = args(1).complex_value ();
 
-      // Convert to complex just in case...
-
-      cy = y;
-    }
-
-  // Now compute the rotation.
+	  if (! error_state)
+	    {
+	      ComplexMatrix result = Givens (cx, cy);
 
-  double cc;
-  if (arg_a.is_complex_type () || arg_b.is_complex_type ())
-    {
-      Complex cs, temp_r;
- 
-      F77_FCN (zlartg, ZLARTG) (cx, cy, cc, cs, temp_r);
-
-      switch (nargout)
-	{
-	case 0:
-	case 1:
-	  {
-	    ComplexMatrix g (2, 2);
-	    g.elem (0, 0) = cc;
-	    g.elem (1, 1) = cc;
-	    g.elem (0, 1) = cs;
-	    g.elem (1, 0) = -conj (cs);
-
-	    retval(0) = g;
-	  }
-	  break;
+	      if (! error_state)
+		{
+		  switch (nargout)
+		    {
+		    case 0:
+		    case 1:
+		      retval(0) = result;
+		      break;
    
-	case 2:
-	  retval(0) = cc;
-	  retval(1) = cs;
-	  break;
+		    case 2:
+		      retval(1) = result (0, 1);
+		      retval(0) = result (0, 0);
+		      break;
 
-	default:  
-	  error ("givens: invalid number of output arguments");
-	  break;
+		    default:
+		      error ("givens: invalid number of output arguments");
+		      break;
+		    }
+		}
+	    }
 	}
-    }
-  else
-    {
-      double s, temp_r;
-
-      F77_FCN (dlartg, DLARTG) (x, y, cc, s, temp_r);
-
-      switch (nargout)
+      else
 	{
-	case 0:
-	case 1:
-	  {
-	    Matrix g (2, 2);
-	    g.elem (0, 0) = cc;
-	    g.elem (1, 1) = cc;
-	    g.elem (0, 1) = s;
-	    g.elem (1, 0) = -s;
+	  double x = args(0).double_value ();
+	  double y = args(1).double_value ();
+
+	  if (! error_state)
+	    {
+	      Matrix result = Givens (x, y);
 
-	    retval(0) = g;
-	  }
-	  break;
+	      if (! error_state)
+		{
+		  switch (nargout)
+		    {
+		    case 0:
+		    case 1:
+		      retval(0) = result;
+		      break;
    
-	case 2:
-	  retval(0) = cc;
-	  retval(1) = s;
-	  break;
-   
-	default:
-	  error ("givens: invalid number of output arguments");
-	  break;
+		    case 2:
+		      retval(1) = result (0, 1);
+		      retval(0) = result (0, 0);
+		      break;
+
+		    default:
+		      error ("givens: invalid number of output arguments");
+		      break;
+		    }
+		}
+	    }
 	}
     }
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
diff --git a/src/syl.cc b/src/syl.cc
--- a/src/syl.cc
+++ b/src/syl.cc
@@ -22,44 +22,23 @@ Software Foundation, 59 Temple Place - S
 */
 
 // Written by A. S. Hodel <scotte@eng.auburn.edu>
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include "CmplxSCHUR.h"
-#include "dbleSCHUR.h"
-#include "f77-uscore.h"
-
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "oct-obj.h"
-#include "user-prefs.h"
 #include "utils.h"
 
-extern "C"
-{
-  int F77_FCN (dtrsyl, DTRSYL) (const char*, const char*, const int&,
-				const int&, const int&, const double*,
-				const int&, const double*, const int&,
-				const double*, const int&, double&,
-				int&, long, long);
- 
-  int F77_FCN (ztrsyl, ZTRSYL) (const char*, const char*, const int&,
-				const int&, const int&,
-				const Complex*, const int&,
-				const Complex*, const int&, 
-				const Complex*, const int&, double&,
-				int&, long, long);
-}
-
 DEFUN_DLD_BUILTIN ("syl", Fsyl, Ssyl, FSsyl, 11,
   "X = syl (A, B, C): solve the Sylvester equation A X + X B + C = 0")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin != 3 || nargout > 1)
@@ -121,45 +100,17 @@ DEFUN_DLD_BUILTIN ("syl", Fsyl, Ssyl, FS
 	if (error_state)
 	  return retval;
 
 	ComplexMatrix cc = arg_c.complex_matrix_value ();
 
 	if (error_state)
 	  return retval;
 
-	// Compute Schur decompositions
-
-	ComplexSCHUR as (ca, "U");
-	ComplexSCHUR bs (cb, "U");
-  
-	// Transform cc to new coordinates.
-
-	ComplexMatrix ua = as.unitary_matrix ();
-	ComplexMatrix sch_a = as.schur_matrix ();
-	ComplexMatrix ub = bs.unitary_matrix ();
-	ComplexMatrix sch_b = bs.schur_matrix ();
-  
-	ComplexMatrix cx = ua.hermitian () * cc * ub;
-  
-	// Solve the sylvester equation, back-transform, and return
-	// the solution.
-  
-	double scale;
-	int info;
-  
-	F77_FCN (ztrsyl, ZTRSYL) ("N", "N", 1, a_nr, b_nr,
-				  sch_a.fortran_vec (), a_nr,
-				  sch_b.fortran_vec (), b_nr,
-				  cx.fortran_vec (), a_nr, scale,
-				  info, 1L, 1L);
-
-	cx = -ua * cx * ub.hermitian ();
-  
-	retval = cx;
+	retval = Sylvester (ca, cb, cc);
       }
     else
       {
 	// Do everything in real arithmetic.
 
 	Matrix ca = arg_a.matrix_value ();
 
 	if (error_state)
@@ -170,48 +121,17 @@ DEFUN_DLD_BUILTIN ("syl", Fsyl, Ssyl, FS
 	if (error_state)
 	  return retval;
 
 	Matrix cc = arg_c.matrix_value ();
 
 	if (error_state)
 	  return retval;
 
-	// Compute Schur decompositions.
-
-	SCHUR as (ca, "U");
-	SCHUR bs (cb, "U");
-  
-	// Transform cc to new coordinates.
-
-	Matrix ua = as.unitary_matrix ();
-	Matrix sch_a = as.schur_matrix ();
-	Matrix ub = bs.unitary_matrix ();
-	Matrix sch_b = bs.schur_matrix ();
-  
-	Matrix cx = ua.transpose () * cc * ub;
-  
-	// Solve the sylvester equation, back-transform, and return
-	// the solution.
-  
-	double scale;
-	int info;
-
-	F77_FCN (dtrsyl, DTRSYL) ("N", "N", 1, a_nr, b_nr,
-				  sch_a.fortran_vec (), a_nr, 
-				  sch_b.fortran_vec (), b_nr,
-				  cx.fortran_vec (), a_nr, scale,
-				  info, 1L, 1L);
-
-	if (info)
-	  error ("syl: trouble in dtrsyl info = %d", info);
-  
-	cx = -ua*cx*ub.transpose ();
-  
-	retval = cx;
+	retval = Sylvester (ca, cb, cc);
       }
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
