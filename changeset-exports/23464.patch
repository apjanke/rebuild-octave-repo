# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1493407779 14400
#      Fri Apr 28 15:29:39 2017 -0400
# Branch stable
# Node ID 7eb0077e86f0d0c94ea3972b7eee0d12246fc60e
# Parent  1bc0e610e293687d58f7cb28cdffbf2ffd6e576f
show stack trace for wrong type arg errors (bug #50894)

* error.h, error.cc (make_execution_exception): Make public.
* errwarn.cc (err_user_supplied_eval, err_wrong_type_arg):
Initialize execution_exception object.

diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -330,17 +330,17 @@ pr_where (std::ostream& os, const char *
       frame.column = elt.column ();
 
       frames.push_back (frame);
     }
 
     pr_where (os, who, frames);
 }
 
-static octave::execution_exception
+octave::execution_exception
 make_execution_exception (const char *who)
 {
   std::ostringstream buf;
 
   pr_where (buf, who);
 
   octave::execution_exception retval;
 
diff --git a/libinterp/corefcn/error.h b/libinterp/corefcn/error.h
--- a/libinterp/corefcn/error.h
+++ b/libinterp/corefcn/error.h
@@ -39,16 +39,19 @@ namespace octave
 
 #define panic_impossible()                                              \
   panic ("impossible state reached in file '%s' at line %d", __FILE__, __LINE__)
 
 extern OCTINTERP_API void reset_error_handler (void);
 
 extern OCTINTERP_API int warning_enabled (const std::string& id);
 
+extern OCTINTERP_API octave::execution_exception
+make_execution_exception (const char *who);
+
 extern OCTINTERP_API void
 vmessage (const char *name, const char *fmt, va_list args);
 
 extern OCTINTERP_API void message (const char *name, const char *fmt, ...);
 
 OCTAVE_DEPRECATED ("use 'print_usage' or 'verror' instead")
 OCTAVE_NORETURN OCTINTERP_API extern
 void vusage (const char *fmt, va_list args);
diff --git a/libinterp/corefcn/errwarn.cc b/libinterp/corefcn/errwarn.cc
--- a/libinterp/corefcn/errwarn.cc
+++ b/libinterp/corefcn/errwarn.cc
@@ -136,121 +136,121 @@ void
 err_user_returned_invalid (const char *name)
 {
   error ("%s: user-supplied function returned invalid value", name);
 }
 
 void
 err_user_supplied_eval (const char *name)
 {
-  octave::execution_exception e;
+  octave::execution_exception e = make_execution_exception ("error");
 
   err_user_supplied_eval (e, name);
 }
 
 void
 err_user_supplied_eval (octave::execution_exception& e, const char *name)
 {
   error (e, "%s: evaluation of user-supplied function failed", name);
 }
 
 void
 err_wrong_type_arg (const char *name, const char *s)
 {
-  octave::execution_exception e;
+  octave::execution_exception e = make_execution_exception ("error");
 
   err_wrong_type_arg (e, name, s);
 }
 
 void
 err_wrong_type_arg (octave::execution_exception& e,
                     const char *name, const char *s)
 {
   error (e, "%s: wrong type argument '%s'", name, s);
 }
 
 void
 err_wrong_type_arg (const char *name, const std::string& s)
 {
-  octave::execution_exception e;
+  octave::execution_exception e = make_execution_exception ("error");
 
   err_wrong_type_arg (e, name, s.c_str ());
 }
 
 void
 err_wrong_type_arg (octave::execution_exception& e,
                     const char *name, const std::string& s)
 {
   err_wrong_type_arg (e, name, s.c_str ());
 }
 
 void
 err_wrong_type_arg (const char *name, const octave_value& tc)
 {
-  octave::execution_exception e;
+  octave::execution_exception e = make_execution_exception ("error");
 
   err_wrong_type_arg (e, name, tc);
 }
 
 void
 err_wrong_type_arg (octave::execution_exception& e,
                     const char *name, const octave_value& tc)
 {
   std::string type = tc.type_name ();
 
   err_wrong_type_arg (e, name, type);
 }
 
 void
 err_wrong_type_arg (const std::string& name, const octave_value& tc)
 {
-  octave::execution_exception e;
+  octave::execution_exception e = make_execution_exception ("error");
 
   err_wrong_type_arg (e, name, tc);
 }
 
 void
 err_wrong_type_arg (octave::execution_exception& e,
                     const std::string& name, const octave_value& tc)
 {
   err_wrong_type_arg (e, name.c_str (), tc);
 }
 
 void
 err_wrong_type_arg (const char *s)
 {
-  octave::execution_exception e;
+  octave::execution_exception e = make_execution_exception ("error");
 
   err_wrong_type_arg (e, s);
 }
 
 void
 err_wrong_type_arg (octave::execution_exception& e, const char *s)
 {
   error (e, "wrong type argument '%s'", s);
 }
 
 void
 err_wrong_type_arg (const std::string& s)
 {
-  octave::execution_exception e;
+  octave::execution_exception e = make_execution_exception ("error");
 
   err_wrong_type_arg (e, s);
 }
 
 void
 err_wrong_type_arg (octave::execution_exception& e, const std::string& s)
 {
   err_wrong_type_arg (e, s.c_str ());
 }
 
 void
 err_wrong_type_arg (const octave_value& tc)
 {
-  octave::execution_exception e;
+  octave::execution_exception e = make_execution_exception ("error");
 
   err_wrong_type_arg (e, tc);
 }
 
 void
 err_wrong_type_arg (octave::execution_exception& e, const octave_value& tc)
 {
   std::string type = tc.type_name ();
