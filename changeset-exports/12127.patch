# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1295700491 -3600
#      Sat Jan 22 13:48:11 2011 +0100
# Node ID b83162e8f4027a990a83b87e4b1cebf71b2df492
# Parent  85f9a5b211fdc5650ef19d4cc38a1485ad3ee143
fix nested indexed assignemnt in superclasses

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2011-01-22  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-class.cc (octave_class::subsasgn): Find appropriate unique base
+	before trying any indexed assignment.
+
 2011-01-22  Konstantinos Poulios  <logari81@googlemail.com>
 
 	* graphics.h.in, graphics.cc (xmtick, ymtick, zmtick):
 	New properties holding minor ticks positions.
 	(axes::properties::calc_ticks_and_lims): Calculation of minor ticks
 	positions.
 	* gl-render.h, gl-render.cc
 	(opengl_renderer::render_grid,	opengl_renderer::render_tickmarks,
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -568,16 +568,42 @@ octave_class::subsasgn (const std::strin
 
           else
             retval = tmp(0);
 
           return retval;
         }
     }
 
+  // Find the class in which this method resides before
+  // attempting to do the indexed assignment.
+
+  std::string method_class = get_current_method_class ();
+
+  octave_base_value *obvp = unique_parent_class (method_class);
+  if (obvp != this)
+    {
+
+      if (obvp)
+        {
+          obvp->subsasgn (type, idx, rhs);
+          if (! error_state)
+            {
+              count++;
+              retval = octave_value (this);
+            }
+          else
+            gripe_failed_assignment ();
+        }
+      else
+        error ("malformed class");
+
+      return retval;
+    }
+
   // FIXME -- this block of code is the same as the body of
   // octave_struct::subsasgn.  Maybe it could be shared instead of
   // duplicated.
 
   int n = type.length ();
 
   octave_value t_rhs = rhs;
 
@@ -761,48 +787,49 @@ octave_class::subsasgn (const std::strin
                       error ("invalid class assignment");
                   }
               }
           }
           break;
 
         case '.':
           {
-            // Find the class in which this method resides before
-            // attempting to access the requested field.
-
-            std::string method_class = get_current_method_class ();
-
-            octave_base_value *obvp = unique_parent_class (method_class);
+            octave_value_list key_idx = idx.front ();
 
-            if (obvp)
-              {
-                octave_value_list key_idx = idx.front ();
+            assert (key_idx.length () == 1);
 
-                assert (key_idx.length () == 1);
-
-                std::string key = key_idx(0).string_value ();
+            std::string key = key_idx(0).string_value ();
 
-                if (! error_state)
-                  {
-                    obvp->assign (key, t_rhs);
+            if (t_rhs.is_cs_list ())
+              {
+                Cell tmp_cell = Cell (t_rhs.list_value ());
 
-                    if (! error_state)
-                      {
-                        count++;
-                        retval = octave_value (this);
-                      }
-                    else
-                      gripe_failed_assignment ();
-                  }
-                else
-                  gripe_failed_assignment ();
+                // The shape of the RHS is irrelevant, we just want
+                // the number of elements to agree and to preserve the
+                // shape of the left hand side of the assignment.
+
+                if (numel () == tmp_cell.numel ())
+                  tmp_cell = tmp_cell.reshape (dims ());
+
+                map.setfield (key, tmp_cell);
               }
             else
-              error ("malformed class");
+              {
+                Cell tmp_cell(1, 1);
+                tmp_cell(0) = t_rhs.storable_value ();
+                map.setfield (key, tmp_cell);
+              }
+
+            if (! error_state)
+              {
+                count++;
+                retval = octave_value (this);
+              }
+            else
+              gripe_failed_assignment ();
           }
           break;
 
         case '{':
           gripe_invalid_index_type (type_name (), type[0]);
           break;
 
         default:
