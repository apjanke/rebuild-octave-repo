# HG changeset patch
# User jwe
# Date 1134420317 0
#      Mon Dec 12 20:45:17 2005 +0000
# Node ID 9fc532d861d4933b8b1ebbcf0b8ce813e697f71d
# Parent  3074a549d64455f28783591c40c9007f42ecf8bf
[project @ 2005-12-12 20:45:16 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2005-12-12  David Bateman  <dbateman@free.fr>
+
+	* OPERATORS/op-struct.cc (transpose): New function.
+	(install_struct_ops): Install it.
+
+	* oct-map.cc (Octave_map::transpose): New function.
+	* oct-map.h: Provide decl.
+
 2005-12-08  John W. Eaton  <jwe@octave.org>
 
 	* Cell.cc (Cell::column): New function.
 	* pt-loop.cc (DO_ND_LOOP): Simplify.
 	(simple_for_loop_command::eval): Correctly handle N-d numeric and
 	cell arrays when only the first dimension is 0.
 
 2005-12-07  John W. Eaton  <jwe@octave.org>
diff --git a/src/OPERATORS/op-struct.cc b/src/OPERATORS/op-struct.cc
--- a/src/OPERATORS/op-struct.cc
+++ b/src/OPERATORS/op-struct.cc
@@ -29,21 +29,37 @@ 02110-1301, USA.
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-struct.h"
 #include "ov-typeinfo.h"
 #include "ops.h"
 
 // struct ops.
 
+DEFUNOP (transpose, cell)
+{
+  CAST_UNOP_ARG (const octave_struct&);
+
+  if (v.ndims () > 2)
+    {
+      error ("transpose not defined for N-d objects");
+      return octave_value ();
+    }
+  else
+    return octave_value (v.map_value().transpose ());
+}
+
 DEFNDCATOP_FN (struct_struct, struct, struct, map, map, concat)
 
 void
 install_struct_ops (void)
 {
+  INSTALL_UNOP (op_transpose, octave_struct, transpose);
+  INSTALL_UNOP (op_hermitian, octave_struct, transpose);
+
   INSTALL_CATOP (octave_struct, octave_struct, struct_struct);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -82,16 +82,30 @@ Octave_map::keys (void) const
   octave_idx_type i = 0;
   for (const_iterator p = begin (); p != end (); p++)
     names[i++] = key (p);
 
   return names;
 }
 
 Octave_map
+Octave_map::transpose (void) const
+{
+  assert (ndims () == 2);
+  dim_vector dv = dims ();
+
+  Octave_map retval (dim_vector (dv(1), dv(0)));
+
+  for (const_iterator p = begin (); p != end (); p++)
+    retval.assign (key(p), Cell (contents(p).transpose ()));
+
+  return retval;
+}
+
+Octave_map
 Octave_map::reshape (const dim_vector& new_dims) const
 {
   Octave_map retval;
 
   if (new_dims != dims ())
     {
       for (const_iterator p = begin (); p != end (); p++)
 	retval.assign (key(p), contents(p).reshape (new_dims));
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -118,16 +118,18 @@ Octave_map
   octave_idx_type rows (void) const { return dimensions(0); }
 
   octave_idx_type columns (void) const { return dimensions(1); }
 
   dim_vector dims (void) const { return dimensions; }
 
   int ndims (void) const { return dimensions.length (); }
 
+  Octave_map transpose (void) const;
+
   Octave_map reshape (const dim_vector& new_dims) const;
 
   Octave_map resize (const dim_vector& dv) const;
 
   octave_idx_type numel (void) const;
 
   Octave_map concat (const Octave_map& rb, const Array<octave_idx_type>& ra_idx);
 
