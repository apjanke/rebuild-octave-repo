# HG changeset patch
# User jwe
# Date 945304697 0
#      Thu Dec 16 00:38:17 1999 +0000
# Node ID eb4223985ca87ddc6978fc8ebe472e8ba1113ac3
# Parent  a5288b88446f3453a719364371ab7d7ec3c7de6d
[project @ 1999-12-16 00:38:16 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -2,16 +2,17 @@ 1999-12-15  John W. Eaton  <jwe@bevo.che
 
 	* control/bddemo.m: Make it more likely to work with
 	whitespace_in_literal_matrix = "ignore".
 	* control/analdemo.m: Ditto.
 	* control/dgkfdemo.m: Ditto.
 	* control/frdemo.m: Ditto.
 	* control/sysrepdemo.m: Ditto.
 	* control/moddemo.m: Ditto.
+	* control/zp2tf.m: Ditto.
 
 	* control/dezero.m: Use toascii to convert string to ASCII value
 	instead of multiplying it by 1.
 
 	* control/zp2sys.m: Don't save and restore implicit_str_to_num_ok.
 	* control/zpout.m: Ditto.
 	* control/tfout.m: Ditto.
 	* control/tf2sys.m: Ditto.
diff --git a/scripts/control/rldemo.m b/scripts/control/rldemo.m
--- a/scripts/control/rldemo.m
+++ b/scripts/control/rldemo.m
@@ -37,49 +37,49 @@ function rldemo ()
     if (k == 1)
       clc
       help pzmap
       prompt
 
       clc
       disp("Display continuous system's open loop poles and zeros (pzmap)\n");
       disp("Example #1, Consider the following continuous transfer function:");
-      cmd = "sys1 = tf2sys([1.5 18.5 6],[1 4 155 302 5050]);";
+      cmd = "sys1 = tf2sys([1.5, 18.5, 6], [1, 4, 155, 302, 5050]);";
       disp(cmd);
       eval(cmd);
       cmd ="sysout(sys1);";
       disp(cmd);
       eval(cmd);
       disp("\nPole-zero form can be obtained as follows:");
       cmd = "sysout(sys1,""zp"");";
       disp(cmd);
       eval(cmd);     
       disp("View the system's open loop poles and zeros with the command:")
       cmd = "pzmap(sys1);";
       run_cmd
       prompt     
 
       clc
       disp("Example #2, Consider the following set of poles and zeros:");
-      cmd = "sys2 = zp2sys([-1 5 -23],[-1 -10 -7+5i -7-5i],5);";
+      cmd = "sys2 = zp2sys([-1, 5, -23],[-1, -10, -7+5i, -7-5i],5);";
       disp(cmd);
       eval(cmd);
       cmd = "sysout(sys2);";
       disp(cmd);
       eval(cmd);
       disp("\nThe pzmap command for the zp form is the same as the tf form:")
       cmd = "pzmap(sys2);";
       run_cmd;
       disp("\nThe internal representation of the system is not important;");
       disp("pzmap automatically sorts it out internally.");
       prompt;
 
       clc
       disp("Example #3, Consider the following state space system:\n");
-      cmd = "sys3=ss2sys([0 1; -10 -11], [0;1], [0 -2], 1);";
+      cmd = "sys3=ss2sys([0, 1; -10, -11], [0; 1], [0, -2], 1);";
       disp(cmd); 
       eval(cmd);
       cmd = "sysout(sys3);";
       disp(cmd); 
       eval(cmd);
       disp("\nPole-zero form can be obtained as follows:");
       cmd = "sysout(sys3,""zp"");";
       disp(cmd);
@@ -98,49 +98,49 @@ function rldemo ()
       prompt
 
       clc
       disp("\nDisplay discrete system's open loop poles and zeros (pzmap)\n");
       disp("First we must define a sampling time, as follows:\n");
       cmd = "Tsam = 1;";
       run_cmd;
       disp("Example #1, Consider the following discrete transfer function:");
-      cmd = "sys1 = tf2sys([1.05 -0.09048],[1 -2 1],Tsam);";
+      cmd = "sys1 = tf2sys([1.05, -0.09048], [1, -2, 1],Tsam);";
       disp(cmd);
       eval(cmd);
       cmd ="sysout(sys1);";
       disp(cmd);
       eval(cmd);
       disp("\nPole-zero form can be obtained as follows:");
       cmd = "sysout(sys1,""zp"");";
       disp(cmd);
       eval(cmd);     
       disp("View the system's open loop poles and zeros with the command:")
       cmd = "pzmap(sys1);";
       run_cmd
       prompt     
 
       clc
       disp("Example #2, Consider the following set of discrete poles and zeros:");
-      cmd = "sys2 = zp2sys([-0.717],[1 -0.368],3.68,Tsam);";
+      cmd = "sys2 = zp2sys(-0.717, [1, -0.368], 3.68, Tsam);";
       disp(cmd);
       eval(cmd);
       cmd = "sysout(sys2);";
       disp(cmd);
       eval(cmd);
       disp("\nThe pzmap command for the zp form is the same as the tf form:")
       cmd = "pzmap(sys2);";
       run_cmd;
       disp("\nThe internal representation of the system is not important;");
       disp("pzmap automatically sorts it out internally.");
       prompt;
 
       clc
       disp("Example #3, Consider the following discrete state space system:\n");
-      cmd = "sys3=ss2sys([1 0.0952;0 0.905], [0.00484; 0.0952], [1 0], 0, Tsam);";
+      cmd = "sys3=ss2sys([1, 0.0952; 0, 0.905], [0.00484; 0.0952], [1, 0], 0, Tsam);";
       disp(cmd); 
       eval(cmd);
       cmd = "sysout(sys3);";
       disp(cmd); 
       eval(cmd);
       disp("\nPole-zero form can be obtained as follows:");
       cmd = "sysout(sys3,""zp"");";
       disp(cmd);
@@ -156,17 +156,17 @@ function rldemo ()
     elseif (k == 3)
       clc
       help rlocus
       prompt;
 
       clc
       disp("Display root locus of a continuous SISO system (rlocus)\n")
       disp("Example #1, Consider the following continuous transfer function:");
-      cmd = "sys1 = tf2sys([1.5 18.5 6],[1 4 155 302 5050]);";
+      cmd = "sys1 = tf2sys([1.5, 18.5, 6],[1, 4, 155, 302, 5050]);";
       disp(cmd);
       eval(cmd);
       cmd ="sysout(sys1);";
       disp(cmd);
       eval(cmd);
       disp("\nPole-zero form can be obtained as follows:");
       cmd = "sysout(sys1,""zp"");";
       disp(cmd);
@@ -179,32 +179,32 @@ function rldemo ()
       disp("\nrlocus automatically selects the minimum and maximum gains based")
       disp("on the real-axis locus breakpoints.  The plot limits are chosen")
       disp("to be no more than 10 times the maximum magnitude of the open")
       disp("loop poles/zeros.");
       prompt
 
       clc
       disp("Example #2, Consider the following set of poles and zeros:");
-      cmd = "sys2 = zp2sys([],[0 -20 -2 -0.1],5);";
+      cmd = "sys2 = zp2sys([],[0, -20, -2, -0.1],5);";
       disp(cmd);
       eval(cmd);
       cmd = "sysout(sys2);";
       disp(cmd);
       eval(cmd);
       disp("\nThe rlocus command for the zp form is the same as the tf form:")
       cmd = "rlocus(sys2);";
       run_cmd;
       disp("\nThe internal representation of the system is not important;");
       disp("rlocus automatically sorts it out internally.");
       prompt;
 
       clc
       disp("Example #3, Consider the following state space system:\n");
-      cmd = "sys3=ss2sys([0 1; -10 -11], [0;1], [0 -2], 0);";
+      cmd = "sys3=ss2sys([0, 1; -10, -11], [0; 1], [0, -2], 0);";
       disp(cmd); 
       eval(cmd);
       cmd = "sysout(sys3);";
       disp(cmd); 
       eval(cmd);
       disp("\nPole-zero form can be obtained as follows:");
       cmd = "sysout(sys3,""zp"");";
       disp(cmd);
@@ -226,17 +226,17 @@ function rldemo ()
       prompt
 
       clc
       disp("Display root locus of a discrete SISO system (rlocus)\n")
       disp("First we must define a sampling time, as follows:\n");
       cmd = "Tsam = 1;";
       run_cmd;
       disp("Example #1, Consider the following discrete transfer function:");
-      cmd = "sys1 = tf2sys([1.05 -0.09048],[1 -2 1],Tsam);";
+      cmd = "sys1 = tf2sys([1.05, -0.09048],[1, -2, 1],Tsam);";
       disp(cmd);
       eval(cmd);
       cmd ="sysout(sys1);";
       disp(cmd);
       eval(cmd);
       disp("\nPole-zero form can be obtained as follows:");
       cmd = "sysout(sys1,""zp"");";
       disp(cmd);
@@ -249,34 +249,34 @@ function rldemo ()
       disp("\nrlocus automatically selects the minimum and maximum gains based")
       disp("on the real-axis locus breakpoints.  The plot limits are chosen")
       disp("to be no more than 10 times the maximum magnitude of the open")
       disp("loop poles/zeros.");
       prompt
 
       clc
       disp("Example #2, Consider the following set of discrete poles and zeros:");
-      cmd = "sys2 = zp2sys([-0.717],[1 -0.368],3.68,Tsam);";
+      cmd = "sys2 = zp2sys(-0.717, [1, -0.368], 3.68, Tsam);";
       disp(cmd);
       eval(cmd);
       cmd = "sysout(sys2);";
       disp(cmd);
       eval(cmd);
       disp("\nThe rlocus command for the zp form is the same as the tf form:")
       cmd = "rlocus(sys2);";
       run_cmd;
       disp("\nThe internal representation of the system is not important;");
       disp("rlocus automatically sorts it out internally.  Also, it does not");
       disp("matter if the system is continuous or discrete.  rlocus also sorts");
       disp("this out automatically");
       prompt;
 
       clc
       disp("Example #3, Consider the following discrete state space system:\n");
-      cmd = "sys3=ss2sys([1 0.0952;0 0.905], [0.00484; 0.0952], [1 0], 0, Tsam);";
+      cmd = "sys3=ss2sys([1, 0.0952; 0, 0.905], [0.00484; 0.0952], [1, 0], 0, Tsam);";
       disp(cmd); 
       eval(cmd);
       cmd = "sysout(sys3);";
       disp(cmd); 
       eval(cmd);
       disp("\nPole-zero form can be obtained as follows:");
       cmd = "sysout(sys3,""zp"");";
       disp(cmd);
diff --git a/scripts/control/rlocus.m b/scripts/control/rlocus.m
--- a/scripts/control/rlocus.m
+++ b/scripts/control/rlocus.m
@@ -46,17 +46,17 @@ function [rldata, k_break, rlpol, gvec, 
   ## Written by Clem and Tenison
   ## Updated by Kristi McGowan July 1996 for intelligent gain selection
   ## Updated by John Ingram July 1996 for systems
   
   if (nargin < 1) | (nargin > 4)
     usage("rlocus(sys[,inc,mink,maxk])");
   endif
   
-  [num,den] = sys2tf(sys);		# extract numerator/denom polyomials
+  [num,den] = sys2tf(sys)		# extract numerator/denom polyomials
   lnum = length(num);      lden = length(den);
   if(lden < 2)
     error(sprintf("length of derivative=%d, doesn't make sense",lden));
   elseif(lnum == 1)
     num = [0, num];     # so that derivative is shortened by one
   endif
 
   ## root locus plot axis limits
diff --git a/scripts/control/zp2tf.m b/scripts/control/zp2tf.m
--- a/scripts/control/zp2tf.m
+++ b/scripts/control/zp2tf.m
@@ -53,21 +53,21 @@ function [num, den] = zp2tf (zer, pol, k
 
   num = k;  den = 1;
 
   ## call zp2ssg2 if there are complex conjugate pairs left, otherwise
   ## construct real zeros one by one.  Repeat for poles.
 
   while(!isempty(zer))
     if( max(abs(imag(zer))) )     [poly,zer] = zp2ssg2(zer);
-    else                          poly = [1 -zer(1)];  
+    else                          poly = [1, -zer(1)];  
                                   zer = zer(2:length(zer));      endif
     num = conv(num,poly);
   endwhile
 
   while(!isempty(pol))
     if( max(abs(imag(pol))) )     [poly,pol] = zp2ssg2(pol);
-    else                          poly = [1 -pol(1)];  
+    else                          poly = [1, -pol(1)];  
                                   pol = pol(2:length(pol));      endif
     den = conv(den,poly);
   endwhile
 
 endfunction
