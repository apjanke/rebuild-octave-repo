# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1449263107 -3600
#      Fri Dec 04 22:05:07 2015 +0100
# Node ID ed770c16a3e8ca61c8b6854eedb25bb7b1235b8f
# Parent  ba2367658dc8b162ac3813b09fdb3db1a017437b
also store encoding and tab index with last editor session (bugs #46588, #45688)

* file-editor-tab.cc (file_name_query): send encoding, too

* file-editor-tab.h: signal add_filename_to_list contains encoding, toolTip

* file-editor.cc (check_closing): collect file name, ID and encoding of all
  file editor tabs and write them into the settings file;
  (request_open_file ()): reset _file_encoding to an empty string (default);
  (find_tab_widget): new structure of the editor tab map;
  (request_open_files): call request_open_file with encoding, do not reset
  _file_encoding here;
  (request_open_file (x)): encoding is new parameter, calls set_encoding ();
  (handle_insert_debugger_pointer_request): empty encoding (default);
  (handle_update_breakpoint_marker): empty encoding (default);
  (handle_add_filename_to_list): new structure of the editor tab map
  with additional entry for the encoding;
  (construct): restore session in an extra function;
  (restore_session): get file names, encodings and tab index from settings
  file, sort depending on tab index and open the files in the desired order
  with desired encodings; new parameters for add_filename_to_list signal;
  (add_file_editor_tab): connect add_filename_to_list with extra parameter
  for encoding

* file-editor.h: new structs for editor tab map and for the data of the
  stored session, new parameters for slot for adding a file to the map,
  new encoding parameter for request_open_file (QString)

* file-editor-interface.h: virtual function request_open_file with new
  parameter for encoding

diff --git a/libgui/src/m-editor/file-editor-interface.h b/libgui/src/m-editor/file-editor-interface.h
--- a/libgui/src/m-editor/file-editor-interface.h
+++ b/libgui/src/m-editor/file-editor-interface.h
@@ -66,17 +66,19 @@ public:
 
   virtual void enable_menu_shortcuts (bool enable) = 0;
 
 public slots:
   virtual void request_new_file (const QString& command = QString ()) = 0;
   virtual void request_new_script (const QString& command = QString ()) = 0;
   virtual void request_new_function (bool) = 0;
   virtual void request_open_file () = 0;
-  virtual void request_open_file (const QString& openFileName, int line = -1,
+  virtual void request_open_file (const QString& openFileName,
+                                  const QString& encoding = QString (),
+                                  int line = -1,
                                   bool debug_pointer = false,
                                   bool breakpoint_marker = false,
                                   bool insert = true) = 0;
 //signals:
 
 //protected:
 
 //protected slots:
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -2058,17 +2058,17 @@ file_editor_tab::file_name_query (const 
 {
   // A zero (null pointer) means that all file editor tabs
   // should respond, otherwise just the desired file editor tab.
   if (ID != this && ID != 0)
     return;
 
   // Unnamed files shouldn't be transmitted.
   if (!_file_name.isEmpty ())
-    emit add_filename_to_list (_file_name, this);
+    emit add_filename_to_list (_file_name, _encoding, this);
 }
 
 void
 file_editor_tab::handle_file_reload_answer (int decision)
 {
   if (decision == QMessageBox::Yes)
     {
       // reload: file is readded to the file watcher in set_file_name ()
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -130,17 +130,17 @@ public slots:
 
   void handle_context_menu_edit (const QString&);
 
 signals:
 
   void file_name_changed (const QString& fileName, const QString& toolTip);
   void editor_state_changed (bool copy_available, bool is_octave_file);
   void tab_remove_request ();
-  void add_filename_to_list (const QString&, QWidget *);
+  void add_filename_to_list (const QString&, const QString&, QWidget *);
   void mru_add_file (const QString& file_name);
   void editor_check_conflict_save (const QString& saveFileName,
                                    bool remove_on_success);
   void run_file_signal (const QFileInfo& info);
   void set_global_edit_shortcuts_signal (bool);
   void request_open_file (const QString&);
 
 protected:
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -74,26 +74,39 @@ file_editor::check_closing (void)
   // Save open files for restoring in next session; this only is possible
   QSettings *settings = resource_manager::get_settings ();
 
   // Have all file editor tabs signal what their filenames are.
   editor_tab_map.clear ();
   emit fetab_file_name_query (0);
 
   // save filenames (even if last session will not be restored next time)
+  // together with encoding and the tab index
   QStringList fetFileNames;
+  QStringList fet_encodings;
+  QStringList fet_index;
+
+  // over all open tabs
   for (editor_tab_map_const_iterator p = editor_tab_map.begin ();
        p != editor_tab_map.end (); p++)
     {
-      QString file_name = p->first;
-      if (!file_name.isEmpty ())
-        fetFileNames.append (p->first);  // do not append unnamed files
+      QString file_name = p->first;   // get file name of tab
+      if (!file_name.isEmpty ())      // do not append unnamed files
+        {
+          fetFileNames.append (file_name);
+          fet_encodings.append (editor_tab_map[file_name].encoding);
+          QString index;
+          fet_index.append (index.setNum
+             (_tab_widget->indexOf (editor_tab_map[file_name].fet_ID)));
+        }
     }
 
   settings->setValue ("editor/savedSessionTabs", fetFileNames);
+  settings->setValue ("editor/saved_session_encodings", fet_encodings);
+  settings->setValue ("editor/saved_session_tab_index", fet_index);
   settings->sync ();
 
   // Save all tabs with confirmation.
   file_editor_tab::reset_cancel ();
   emit fetab_check_modified_file ();
 
   // Close all tabs if there was no cancellation.
   if (file_editor_tab::was_cancelled ())
@@ -236,16 +249,17 @@ file_editor::request_open_file (void)
   QFrame *separator = new QFrame (fileDialog);
   separator->setFrameShape (QFrame::HLine);   // horizontal line as separator
   separator->setFrameStyle (QFrame::Sunken);
 
   // combo box for encoding
   QLabel *label_enc = new QLabel (tr ("File Encoding:"));
   QComboBox *combo_enc = new QComboBox ();
   resource_manager::combo_encoding (combo_enc);
+  _file_encoding = QString ();  // default, no special encoding
 
   // track changes in the combo boxes
   connect (combo_enc, SIGNAL (currentIndexChanged (QString)),
            this, SLOT (handle_combo_enc_current_index (QString)));
 
   // build the extra grid layout
   extra->addWidget (separator,0,0,1,3);
   extra->addWidget (label_enc,1,0);
@@ -285,17 +299,17 @@ file_editor::find_tab_widget (const QStr
 
   for (editor_tab_map_const_iterator p = editor_tab_map.begin ();
        p != editor_tab_map.end (); p++)
     {
       QString tab_file = p->first;
 
       if (same_file (file.toStdString (), tab_file.toStdString ()))
         {
-          retval = p->second;
+          retval = p->second.fet_ID;
           break;
         }
     }
 
   return retval;
 }
 
 bool
@@ -351,29 +365,29 @@ file_editor::is_editor_console_tabbed ()
       if (w_list.at (i) == console)
         return true;
     }
 
   return false;
 }
 
 // The following slot is called after files have been selected in the
-// open file dialog, possibly with a new selected encoding. After loading
-// all files, _file_encoding is reset.
+// open file dialog, possibly with a new selected encoding stored in
+// _file_encoding
 void
 file_editor::request_open_files (const QStringList& open_file_names)
 {
   for (int i = 0; i < open_file_names.count (); i++)
-    request_open_file (open_file_names.at (i));
-  _file_encoding = QString ();  // reset: no special encoding
+    request_open_file (open_file_names.at (i), _file_encoding);
 }
 
 void
-file_editor::request_open_file (const QString& openFileName, int line,
-                                bool debug_pointer,
+file_editor::request_open_file (const QString& openFileName,
+                                const QString& encoding,
+                                int line, bool debug_pointer,
                                 bool breakpoint_marker, bool insert)
 {
   if (call_custom_editor (openFileName, line))
     return;   // custom editor called
 
   if (openFileName.isEmpty ())
     {
       // This happens if edit is calles without an argument
@@ -410,17 +424,17 @@ file_editor::request_open_file (const QS
               focus ();
             }
         }
       else
         {
           file_editor_tab *fileEditorTab = new file_editor_tab ();
           if (fileEditorTab)
             {
-              fileEditorTab->set_encoding (_file_encoding);
+              fileEditorTab->set_encoding (encoding);
               QString result = fileEditorTab->load_file (openFileName);
               if (result == "")
                 {
                   // Supply empty title then have the file_editor_tab update
                   // with full or short name.
                   add_file_editor_tab (fileEditorTab, "");
                   fileEditorTab->update_window_title (false);
                   // file already loaded, add file to mru list here
@@ -597,17 +611,17 @@ file_editor::check_conflict_save (const 
   // Can save without conflict, have the file editor tab do so.
   emit fetab_save_file (saveFileWidget, saveFileName, remove_on_success);
 }
 
 void
 file_editor::handle_insert_debugger_pointer_request (const QString& file,
                                                      int line)
 {
-  request_open_file (file, line, true);
+  request_open_file (file, QString (), line, true); // default encoding
 }
 
 void
 file_editor::handle_delete_debugger_pointer_request (const QString& file,
                                                      int line)
 {
   if (! file.isEmpty ())
     {
@@ -630,17 +644,17 @@ file_editor::handle_delete_debugger_poin
     }
 }
 
 void
 file_editor::handle_update_breakpoint_marker_request (bool insert,
                                                       const QString& file,
                                                       int line)
 {
-  request_open_file (file, line, false, true, insert);
+  request_open_file (file, QString (), line, false, true, insert);
 }
 
 void
 file_editor::handle_edit_file_request (const QString& file)
 {
   request_open_file (file);
 }
 
@@ -1049,21 +1063,22 @@ file_editor::handle_tab_remove_request (
               break;
             }
         }
     }
   check_actions ();
 }
 
 void
-file_editor::handle_add_filename_to_list (const QString& fileName, QWidget *ID)
+file_editor::handle_add_filename_to_list (const QString& fileName,
+                                          const QString& encoding, QWidget *ID)
 {
   // Should we allow multiple tabs for a single file?
-
-  editor_tab_map[fileName] = ID;
+  editor_tab_map[fileName].fet_ID = ID;
+  editor_tab_map[fileName].encoding = encoding;
 }
 
 // context menu of edit area
 void
 file_editor::active_tab_changed (int index)
 {
   emit fetab_change_request (_tab_widget->widget (index));
 }
@@ -1639,32 +1654,62 @@ file_editor::construct (void)
 
   connect (this, SIGNAL (execute_command_in_terminal_signal (const QString&)),
            main_win (), SLOT (execute_command_in_terminal (const QString&)));
 
   resize (500, 400);
   setWindowIcon (QIcon (":/actions/icons/logo.png"));
   set_title (tr ("Editor"));
 
+  restore_session (settings);
+
+  check_actions ();
+}
+
+void
+file_editor::restore_session (QSettings *settings)
+{
   //restore previous session
-  if (settings->value ("editor/restoreSession", true).toBool ())
-    {
-      QStringList sessionFileNames
-        = settings->value ("editor/savedSessionTabs",
-                           QStringList ()).toStringList ();
+  if (! settings->value ("editor/restoreSession", true).toBool ())
+    return;
+
+  // get the data from the settings file
+  QStringList sessionFileNames = settings->value ("editor/savedSessionTabs",
+                                          QStringList ()).toStringList ();
+  QStringList session_encodings = settings->value ("editor/saved_session_encodings",
+                                          QStringList ()).toStringList ();
+  QStringList session_index = settings->value ("editor/saved_session_tab_index",
+                                          QStringList ()).toStringList ();
 
-      for (int n = 0; n < sessionFileNames.count (); ++n)
-        {
-          QFileInfo file = QFileInfo (sessionFileNames.at (n));
-          if (file.exists ())
-            request_open_file (sessionFileNames.at (n));
-        }
+  // fill a list of the struct and sort it (depending on index)
+  QList<session_data> s_data;
+
+  bool do_encoding = (session_encodings.count () == sessionFileNames.count ());
+  bool do_index    = (session_index.count () == sessionFileNames.count ());
+
+  for (int n = 0; n < sessionFileNames.count (); ++n)
+    {
+      QFileInfo file = QFileInfo (sessionFileNames.at (n));
+      if (! file.exists ())
+        continue;
+
+      session_data item = { QString (), sessionFileNames.at (n), QString ()};
+      if (do_index)
+        item.index = session_index.at (n);
+      if (do_encoding)
+        item.encoding = session_encodings.at (n);
+
+     s_data << item;
     }
 
-  check_actions ();
+  qSort (s_data);
+
+  // finally open the file with the desired encoding in the desired order
+  for (int n = 0; n < s_data.count (); ++n)
+    request_open_file (s_data.at (n).file_name, s_data.at (n).encoding);
 }
 
 void
 file_editor::add_file_editor_tab (file_editor_tab *f, const QString& fn)
 {
   _tab_widget->addTab (f, fn);
 
   // signals from the qscintilla edit area
@@ -1686,18 +1731,20 @@ file_editor::add_file_editor_tab (file_e
                                                  const QString&)));
 
   connect (f, SIGNAL (editor_state_changed (bool, bool)),
            this, SLOT (handle_editor_state_changed (bool, bool)));
 
   connect (f, SIGNAL (tab_remove_request ()),
            this, SLOT (handle_tab_remove_request ()));
 
-  connect (f, SIGNAL (add_filename_to_list (const QString&, QWidget*)),
-           this, SLOT (handle_add_filename_to_list (const QString&, QWidget*)));
+  connect (f, SIGNAL (add_filename_to_list (const QString&,
+                                            const QString&, QWidget*)),
+           this, SLOT (handle_add_filename_to_list (const QString&,
+                                                    const QString&, QWidget*)));
 
   connect (f, SIGNAL (editor_check_conflict_save (const QString&, bool)),
            this, SLOT (check_conflict_save (const QString&, bool)));
 
   connect (f, SIGNAL (mru_add_file (const QString&)),
            this, SLOT (handle_mru_add_file (const QString&)));
 
   connect (f, SIGNAL (run_file_signal (const QFileInfo&)),
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -51,18 +51,36 @@ public:
 };
 
 class file_editor : public file_editor_interface
 {
   Q_OBJECT
 
 public:
 
-  typedef std::map<QString, QWidget *>::iterator editor_tab_map_iterator;
-  typedef std::map<QString, QWidget *>::const_iterator editor_tab_map_const_iterator;
+  struct tab_info
+    {
+      QWidget *fet_ID;
+      QString  encoding;
+    };
+
+  typedef std::map<QString, tab_info>::iterator editor_tab_map_iterator;
+  typedef std::map<QString, tab_info>::const_iterator editor_tab_map_const_iterator;
+
+  // struct that allows to sort with respect to the tab index
+  struct session_data
+    {
+      QString index;
+      QString file_name;
+      QString encoding;
+      bool operator<(const session_data &other) const
+        {
+          return index < other.index;
+        }
+    };
 
   file_editor (QWidget *p);
   ~file_editor (void);
 
   void loadFile (const QString& fileName);
 
   QMenu *get_mru_menu (void) { return _mru_file_menu; }
   QMenu *debug_menu (void);
@@ -193,17 +211,18 @@ public slots:
 
   void request_goto_line (bool);
   void request_completion (bool);
 
   void handle_file_name_changed (const QString& fileName,
                                  const QString& toolTip);
   void handle_tab_close_request (int index);
   void handle_tab_remove_request (void);
-  void handle_add_filename_to_list (const QString& fileName, QWidget *ID);
+  void handle_add_filename_to_list (const QString& fileName,
+                                    const QString& encoding, QWidget *ID);
   void active_tab_changed (int index);
   void handle_editor_state_changed (bool enableCopy, bool is_octave_file);
   void handle_mru_add_file (const QString& file_name);
   void check_conflict_save (const QString& fileName, bool remove_on_success);
 
   void handle_insert_debugger_pointer_request (const QString& file, int line);
   void handle_delete_debugger_pointer_request (const QString& file, int line);
   void handle_update_breakpoint_marker_request (bool insert,
@@ -224,18 +243,19 @@ protected slots:
   void copyClipboard ();
   void pasteClipboard ();
   void selectAll ();
   void do_undo ();
 
 private slots:
 
   void request_open_files (const QStringList&);
-  void request_open_file (const QString& fileName, int line = -1,
-                          bool debug_pointer = false,
+  void request_open_file (const QString& fileName,
+                          const QString& encoding = QString (),
+                          int line = -1, bool debug_pointer = false,
                           bool breakpoint_marker = false, bool insert = true);
   void request_preferences (bool);
   void request_styles_preferences (bool);
   void restore_create_file_setting ();
 
   void handle_combo_enc_current_index (QString new_encoding);
 
   void show_line_numbers (bool);
@@ -268,25 +288,27 @@ private:
   void save_file_as (QWidget *fetabID = 0);
   void mru_menu_update (void);
   bool call_custom_editor (const QString& file_name = QString (), int line = -1);
 
   void toggle_preference (const QString& preference, bool def);
 
   void switch_tab (int direction, bool movetab = false);
 
+  void restore_session (QSettings *settings);
+
   bool editor_tab_has_focus ();
 
   QWidget *find_tab_widget (const QString& openFileName) const;
   QAction *add_action (QMenu *menu, const QIcon &icon, const QString &text,
                        const char *member);
 
   QMenu* m_add_menu (QMenuBar *p, QString text);
 
-  std::map<QString, QWidget *> editor_tab_map;
+  std::map<QString, tab_info> editor_tab_map;
   QHash<QMenu*, QStringList> _hash_menu_text;
 
   QString ced;
 
   QMenuBar *_menu_bar;
   QToolBar *_tool_bar;
   QMenu *_debug_menu;
 
