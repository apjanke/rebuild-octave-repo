# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1284573122 14400
#      Wed Sep 15 13:52:02 2010 -0400
# Node ID 71f38cba668d4ab8e1c81c2aa7e69ad31febea51
# Parent  71ad9c8f20f57451a50d6644020727afb10eddc6
__magick_read__.cc: eliminate some casts

diff --git a/src/DLD-FUNCTIONS/__magick_read__.cc b/src/DLD-FUNCTIONS/__magick_read__.cc
--- a/src/DLD-FUNCTIONS/__magick_read__.cc
+++ b/src/DLD-FUNCTIONS/__magick_read__.cc
@@ -530,17 +530,16 @@ function.  Instead you should use @code{
 
 #ifdef HAVE_MAGICK
 
 static void
 jpg_settings (std::vector<Magick::Image>& imvec,
               const Octave_map& options,
               bool)
 {
-  int nframes = static_cast<int>(imvec.size ());
   bool something_set = 0;
 
   // Quality setting
   octave_value result;
   Octave_map::const_iterator p;
   bool found_it = 0;
   for (p = options.begin (); p != options.end (); p++)
     if (options.key (p) == "Quality")
@@ -549,21 +548,21 @@ jpg_settings (std::vector<Magick::Image>
         result = options.contents (p).elem (0);
         break;
       }
   if (found_it && (! result.is_empty ()))
     {
       something_set = 1;
       if (result.is_real_type ())
         {
-          int qlev = static_cast<int>(result.int_value ());
+          int qlev = result.int_value ();
           if (qlev < 0 || qlev > 100)
             warning ("warning: Quality setting invalid--use default of 75");
           else
-            for (int fnum = 0; fnum < nframes; fnum++)
+            for (size_t fnum = 0; fnum < imvec.size (); fnum++)
               imvec[fnum].quality (static_cast<unsigned int>(qlev));
         }
       else
         warning ("warning: Quality setting invalid--use default of 75");
     }
 
   // Other settings go here
 
@@ -724,19 +723,18 @@ encode_uint_image (std::vector<Magick::I
       imvec.push_back (im);
     }
 }
 
 static void
 encode_map (std::vector<Magick::Image>& imvec, const NDArray& cmap)
 {
   unsigned int mapsize = cmap.dim1 ();
-  int nframes = static_cast<int>(imvec.size ());
 
-  for (int fnum = 0; fnum < nframes; fnum++)
+  for (size_t fnum = 0; fnum < imvec.size (); fnum++)
     {
       imvec[fnum].colorMapSize (mapsize);
       imvec[fnum].type (Magick::PaletteType);
     }
 
   for (unsigned int ii = 0; ii < mapsize; ii++)
     {
       Magick::ColorRGB c (cmap(ii,0), cmap(ii,1), cmap(ii,2));
@@ -806,18 +804,17 @@ write_image (const std::string& filename
       if (fmt == "jpg" || fmt == "jpeg")
         jpg_settings (imvec, options, has_map);
       else
         warning ("warning: your parameter(s) currently not supported");
     }
 
   try
     {
-      int nframes = static_cast<int>(imvec.size ());
-      for (int i = 0; i < nframes ; i++)
+      for (int i = 0; i < imvec.size (); i++)
         imvec[i].magick (fmt);
           
       Magick::writeImages (imvec.begin (), imvec.end (), filename);
     }
   catch (Magick::Warning& w)
     {
       warning ("Magick++ warning: %s", w.what ());
     }
