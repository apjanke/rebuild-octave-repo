# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1500914543 14400
#      Mon Jul 24 12:42:23 2017 -0400
# Node ID e263cf468abdea37357be99a8ff33b45079c683c
# Parent  060923d0075c2951617f97d3a2bb3e3fa4449391
use mach_info class instead of custom test for endianness

* ls-mat5.cc (read_mat5_binary_element):
Use octave::mach_info::native_float_format instead of custom test for
endainness.

diff --git a/libinterp/corefcn/ls-mat5.cc b/libinterp/corefcn/ls-mat5.cc
--- a/libinterp/corefcn/ls-mat5.cc
+++ b/libinterp/corefcn/ls-mat5.cc
@@ -487,25 +487,21 @@ read_mat5_binary_element (std::istream& 
   bool imag;
   bool isclass = false;
   bool logicalvar;
   dim_vector dims;
   enum arrayclasstype arrayclass;
   octave_idx_type nzmax;
   std::string classname;
 
-  // FIXME: Endianness determination in C++ is not easy.
-  // Until C++20 which introduces std::endian, use this hack.
-  int16_t number;
-  uint8_t raw_number[2] {0x00, 0x01}; 
-  std::memcpy (&number, raw_number, 2);
-
   // MAT files always use IEEE floating point
   octave::mach_info::float_format flt_fmt = octave::mach_info::flt_fmt_unknown;
-  if ((number == 1) ^ swap)
+  if ((octave::mach_info::native_float_format ()
+       == octave::mach_info::flt_fmt_ieee_big_endian)
+      ^ swap)
     flt_fmt = octave::mach_info::flt_fmt_ieee_big_endian;
   else
     flt_fmt = octave::mach_info::flt_fmt_ieee_little_endian;
 
   // element type, length and small data element flag
   int32_t type = 0;
   int32_t element_length;
   bool is_small_data_element;
