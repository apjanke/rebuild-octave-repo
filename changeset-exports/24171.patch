# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1508805317 14400
#      Mon Oct 23 20:35:17 2017 -0400
# Node ID 1680d425bb386ffcb4e0acd3f716c301b112ff22
# Parent  3dbd6409eeb90bbc827856959e6eba7ede77362f
also place marker in editor margin for lines matching selected word

* file-editor-tab.h, file-editor-tab.cc
(file_editor_tab::_marker_highlight_all): New data member.
(file_editor_tab::file_editor_tab): Define marker.
(file_editor_tab::update_lexer_settings): Set marker colors.
(file_editor_tab::handle_double_click):
Also set and clear margin marker.

* octave-qscintilla.h, octave-qscintilla.cc
(octave_qscintilla::clear_indicator): New argument, marker_style.
Also delete all marker_style markers.

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -238,16 +238,20 @@ file_editor_tab::file_editor_tab (const 
 
   // indicators
   _indicator_highlight_all
         = _edit_area->indicatorDefine (QsciScintilla::StraightBoxIndicator);
   if (_indicator_highlight_all == -1)
     _indicator_highlight_all = 1;
 
   _edit_area->setIndicatorDrawUnder (true, _indicator_highlight_all);
+
+  _marker_highlight_all = _edit_area->markerDefine (QsciScintilla::Minus);
+  if (_marker_highlight_all == -1)
+    _marker_highlight_all = 1;
 }
 
 file_editor_tab::~file_editor_tab (void)
 {
   // Tell all connected markers to self-destruct.
   emit remove_all_breakpoints ();
   emit remove_all_positions ();
 
@@ -798,16 +802,19 @@ file_editor_tab::update_lexer_settings (
 
   // color indicator for highlighting all occurrences:
   // applications highlight color with more transparency
   QColor hg = QApplication::palette ().color (QPalette::Highlight);
   hg.setAlphaF (0.25);
   _edit_area->setIndicatorForegroundColor (hg, _indicator_highlight_all);
   _edit_area->setIndicatorOutlineColor (hg, _indicator_highlight_all);
 
+  _edit_area->setMarkerBackgroundColor (hg, _marker_highlight_all);
+  _edit_area->setMarkerForegroundColor (hg, _marker_highlight_all);
+
   // fix line number width with respect to the font size of the lexer and
   // set the line numbers font depending on the lexers font
   if (settings->value ("editor/showLineNumbers", true).toBool ())
     {
       // Line numbers width
       auto_margin_width ();
 
       // Line numbers font
@@ -2844,17 +2851,18 @@ file_editor_tab::handle_char_added (int)
 // Slot handling a double click into the text area
 void
 file_editor_tab::handle_double_click (int, int, int modifier)
 {
   if (! modifier)
     {
       // double clicks without modifier
       // clear any existing indicators of this type
-      _edit_area->clear_indicator (_indicator_highlight_all);
+      _edit_area->clear_indicator (_indicator_highlight_all,
+                                   _marker_highlight_all);
 
       if (_highlight_all_occurrences)
         {
           // highlighting of all occurrences of the clicked word is enabled
 
           // get the resulting cursor position
           // (required if click was beyond a line ending)
           int line, col;
@@ -2893,16 +2901,19 @@ file_editor_tab::handle_double_click (in
               while (find_result_available)
                 {
                   // get cursor position after having found an occurrence
                   _edit_area->getCursorPosition (&oline, &ocol);
                   // set the indicator
                   _edit_area->fillIndicatorRange (oline, ocol - wlen,
                                                   oline, ocol,
                                                   _indicator_highlight_all);
+
+                  _edit_area->markerAdd (oline, _marker_highlight_all);
+
                   // find next occurrence
                   find_result_available = _edit_area->findNext ();
                 }
 
               // restore the visible area of the file, the cursor position,
               // and the selection
               _edit_area->setFirstVisibleLine (first_line);
               _edit_area->setCursorPosition (line, col);
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -302,13 +302,14 @@ private:
 
   int _line_break;
   bool _line_break_comments;
   int _line;
   int _col;
   bool _lines_changed;
   bool _highlight_all_occurrences;
   int _indicator_highlight_all;
+  int _marker_highlight_all;
   int m_bp_restore_count;
 
 };
 
 #endif
diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -317,22 +317,24 @@ octave_qscintilla::get_actual_word (void
   m_word_at_cursor = wordAtPoint (local_pos);
   QString lexer_name = lexer ()->lexer ();
   return ((lexer_name == "octave" || lexer_name == "matlab")
           && ! m_word_at_cursor.isEmpty ());
 }
 
 // helper function for clearing all indicators of a specific style
 void
-octave_qscintilla::clear_indicator (int indicator_style)
+octave_qscintilla::clear_indicator (int indicator_style, int marker_style)
 {
   int end_pos = text ().length ();
   int end_line, end_col;
   lineIndexFromPosition (end_pos, &end_line, &end_col);
   clearIndicatorRange (0, 0, end_line, end_col, indicator_style);
+
+  markerDeleteAll (marker_style);
 }
 
 // Function returning the true cursor position where the tab length
 // is taken into account.
 void
 octave_qscintilla::get_current_position (int *pos, int *line, int *col)
 {
   *pos = SendScintilla (QsciScintillaBase::SCI_GETCURRENTPOS);
diff --git a/libgui/src/m-editor/octave-qscintilla.h b/libgui/src/m-editor/octave-qscintilla.h
--- a/libgui/src/m-editor/octave-qscintilla.h
+++ b/libgui/src/m-editor/octave-qscintilla.h
@@ -48,17 +48,17 @@ public:
 
   virtual void contextMenuEvent (QContextMenuEvent *e);
 
   void context_help_doc (bool);
   void context_edit (void);
   void context_run (void);
   void get_global_textcursor_pos (QPoint *global_pos, QPoint *local_pos);
   bool get_actual_word (void);
-  void clear_indicator (int indicator_style);
+  void clear_indicator (int indicator_style, int marker_style);
   void get_current_position (int *pos, int *line, int *col);
   QString comment_string (void);
   int get_style (int pos = -1);
   int is_style_comment (int pos = -1);
   void smart_indent (bool do_smart_indent, int do_auto_close, int line);
 
 signals:
 
