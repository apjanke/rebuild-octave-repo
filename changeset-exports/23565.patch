# HG changeset patch
# User Rik <rik@octave.org>
# Date 1496968892 25200
#      Thu Jun 08 17:41:32 2017 -0700
# Node ID 3a730821e4a25c20776adbc2d03e3fc1db15be5f
# Parent  7049da1648c01f0201af4cc679408d2dafab36d2
doc: Peridoc grammarcheck of documentation.

* container.txi, external.txi, install.txi, oop.txi, plot.txi, testfun.txi,
eig.cc, graphics.cc, gsvd.cc, hex2num.cc, pr-output.cc, sub2ind.cc,
__ode15__.cc, Map.m, __publish_html_output__.m, __publish_latex_output__.m,
odeset.m, ode_event_handler.m, runge_kutta_45_dorpri.m, xlim.m, ylim.m, zlim.m,
hgtransform.m, eigs.m, native2unicode.m, unicode2native.m:
grammarcheck documentation.

diff --git a/doc/interpreter/container.txi b/doc/interpreter/container.txi
--- a/doc/interpreter/container.txi
+++ b/doc/interpreter/container.txi
@@ -1040,17 +1040,16 @@ printf ("%s ", c@{:@});
      @print{} GNU Octave is Free Software
 @end group
 @end example
 
 If used on the left-hand side of an assignment, a comma separated list
 generated with @code{@{@}} can be assigned to.  An example is
 
 @example
-@group
 in@{1@} = [10, 20, 30];
 in@{2@} = inf;
 in@{3@} = "last";
 in@{4@} = "first";
 out = cell (4, 1);
 [out@{1:3@}] = in@{1 : 3@};
 [out@{4:6@}] = in@{[1, 2, 4]@})
      @result{} out =
@@ -1063,17 +1062,16 @@ out = cell (4, 1);
            [3,1] = last
            [4,1] =
 
               10   20   30
 
            [5,1] = Inf
            [6,1] = first
         @}
-@end group
 @end example
 
 
 @node Comma Separated Lists Generated from Structure Arrays
 @subsection Comma Separated Lists Generated from Structure Arrays
 Structure arrays can equally be used to create comma separated
 lists.  This is done by addressing one of the fields of a structure
 array.  For example:
diff --git a/doc/interpreter/external.txi b/doc/interpreter/external.txi
--- a/doc/interpreter/external.txi
+++ b/doc/interpreter/external.txi
@@ -1973,27 +1973,29 @@ isjava (b)
 class (b)
 @result{} ans = java.math.BigDecimal
 @end group
 @end example
 
 The example above can be carried out using only Java objects:
 
 @example
+@group
 a = javaObject ("java.lang.Double", 1.001);
 b = javaObject ("java.math.BigDecimal", a);
 
 isjava (a)
 @result{} ans = 1
 class (a)
 @result{} ans = java.lang.Double
 isjava (b)
 @result{} ans = 1
 class (b)
 @result{} ans = java.math.BigDecimal
+@end group
 @end example
 
 One can see, that even a @code{java.lang.Double} is not converted to an Octave
 @code{double}, when created by @ref{XREFjavaObject,javaObject,javaObject}.
 But ambiguities might arise, if the Java classes @code{java.lang.Double} or
 @code{double} are parameters of a method (or a constructor).  In this case
 they can be converted into one another, depending on the context.
 
diff --git a/doc/interpreter/install.txi b/doc/interpreter/install.txi
--- a/doc/interpreter/install.txi
+++ b/doc/interpreter/install.txi
@@ -355,43 +355,48 @@ Install Octave in subdirectories below @
 of @var{prefix} is @file{/usr/local}.
 
 @item --srcdir=@var{dir}
 Look for Octave sources in the directory @var{dir}.
 
 @item --disable-64
 Disable using 64-bit integers for indexing arrays and use 32-bit
 integers instead.  On systems with 32-bit pointers, this option is
-always disabled.  If he configure script determines that your BLAS
+always disabled.  If the configure script determines that your @sc{blas}
 library uses 32-bit integers, then operations using the following
 libraries are limited to arrays with dimensions that are smaller than
 @math{2^{31}} elements:
 
 @itemize @bullet
 @item @sc{blas}
+
 @item @sc{lapack}
+
 @item QRUPDATE
+
 @item SuiteSparse
+
 @item @sc{arpack}
 @end itemize
 
 Additionally, the following libraries use @code{int} internally, so
 maximum problem sizes are always limited:
 
 @itemize @bullet
 @item @sc{glpk}
+
 @item Qhull
 @end itemize
 
 @xref{Compiling Octave with 64-bit Indexing}, for more details
 about building Octave with more complete support for large arrays.
 
 @item --enable-address-sanitizer-flags
-Enable compiler options @code{-fsanitize=address} and
-@code{-fomit-frame-pointer} for memory access checking.  This option is
+Enable compiler options @option{-fsanitize=address} and
+@option{-fomit-frame-pointer} for memory access checking.  This option is
 primarily used for debugging Octave.  Building Octave with this option
 has a negative impact on performance and is not recommended for general
 use.  It may also interfere with proper functioning of the GUI.
 
 @item --disable-docs
 Disable building all forms of the documentation (Info, PDF, HTML).  The
 default is to build documentation, but your system will need functioning
 Texinfo and @TeX{} installs for this to succeed.
@@ -625,34 +630,39 @@ Image files that are distributed with Oc
 @node Compiling Octave with 64-bit Indexing
 @section Compiling Octave with 64-bit Indexing
 
 Note: the following only applies to systems that have 64-bit pointers.
 Configuring Octave with @option{--enable-64} cannot magically make a
 32-bit system have a 64-bit address space.
 
 On 64-bit systems, Octave uses 64-bit integers for indexing arrays
-by default.  If he configure script determines that your BLAS
+by default.  If the configure script determines that your @sc{blas}
 library uses 32-bit integers, then operations using the following
 libraries are limited to arrays with dimensions that are smaller than
 @math{2^{31}} elements:
 
 @itemize @bullet
 @item @sc{blas}
+
 @item @sc{lapack}
+
 @item QRUPDATE
+
 @item SuiteSparse
+
 @item @sc{arpack}
 @end itemize
 
 Additionally, the following libraries use @code{int} internally, so
 maximum problem sizes are always limited:
 
 @itemize @bullet
 @item @sc{glpk}
+
 @item Qhull
 @end itemize
 
 Except for @sc{glpk} and Qhull, these libraries may also be configured
 to use 64-bit integers, but most systems do not provide packages built
 this way.  If you wish to experiment with large arrays, the following
 information may be helpful.
 
diff --git a/doc/interpreter/oop.txi b/doc/interpreter/oop.txi
--- a/doc/interpreter/oop.txi
+++ b/doc/interpreter/oop.txi
@@ -526,17 +526,17 @@ user class.
 @item @code{a != b} @tab @code{ne (a, b)} @tab Not equal to
 @item @code{a & b} @tab @code{and (a, b)} @tab Logical and
 @item @code{a | b} @tab @code{or (a, b)} @tab Logical or
 @item @code{!a} @tab @code{not (a)} @tab Logical not
 @item @code{a'} @tab @code{ctranspose (a)} @tab Complex conjugate transpose
 @item @code{a.'} @tab @code{transpose (a)} @tab Transpose
 @item @code{a:b} @tab @code{colon (a, b)} @tab Two element range
 @item @code{a:b:c} @tab @code{colon (a, b, c)} @tab Three element range
-@item @code{[a,  b]} @tab @code{horzcat (a, b)} @tab Horizontal concatenation
+@item @code{[a, b]} @tab @code{horzcat (a, b)} @tab Horizontal concatenation
 @item @code{[a; b]} @tab @code{vertcat (a, b)} @tab Vertical concatenation
 @item @code{a(s@math{_1},@dots{},s@math{_n})} @tab @code{subsref (a, s)} @tab Subscripted reference
 @item @code{a(s@math{_1},@dots{},s@math{_n}) = b} @tab @code{subsasgn (a, s, b)} @tab Subscripted assignment
 @item @code{b(a)} @tab @code{subsindex (a)} @tab Convert object to index
 @item @code{disp} @tab @code{disp (a)} @tab Object display
 @end multitable
 @caption{Available overloaded operators and their corresponding class method}
 @end float
@@ -766,17 +766,17 @@ contrast to the aforementioned classes, 
 section, @code{classdef} classes can be defined within a single m-file.  Other
 innovations of @code{classdef} classes are:
 
 @itemize @bullet
 @item
 @b{access rights} for properties and methods,
 
 @item
-@b{static methods}, i.e. methods that are independent of an object, and
+@b{static methods}, i.e., methods that are independent of an object, and
 
 @item
 the distinction between @b{value and handle classes}.
 @end itemize
 
 Several features have to be added in future versions of Octave to be fully
 compatible to @sc{matlab}.  An overview of what is missing can be found at
 @url{http://wiki.octave.org/Classdef}.
@@ -823,20 +823,22 @@ shown using the @code{polynomial} exampl
 @end group
 @end example
 
 @noindent
 An object of class @code{polynomial2} is created by calling the class
 constructor:
 
 @example
+@group
 >> p = polynomial2 ([1, 0, 1])
 @result{} p =
 
  1 + X ^ 2
+@end group
 @end example
 
 @node Properties
 @subsection Properties
 
 All class properties must be defined within @code{properties} blocks.  The
 definition of a default value for a property is optional and can be omitted.
 The default initial value for each class property is @code{[]}.
@@ -892,21 +894,20 @@ By default, in the example @var{prop4}, 
 public read and write access.
 
 @node Methods
 @subsection Methods
 
 All class methods must be defined within @code{methods} blocks.  An exception
 to this rule is described at the end of this subsection.  Those @code{methods}
 blocks can have additional attributes specifying the access rights or whether
-the methods are static, i.e. methods that can be called without creating an
+the methods are static, i.e., methods that can be called without creating an
 object of that class.
 
 @example
-@group
 classdef some_class
   methods
     function obj = some_class ()
       disp ("New instance created.");
     endfunction
 
     function disp (obj)
       disp ("Here is some_class.");
@@ -920,37 +921,38 @@ classdef some_class
   endmethods
 
   methods (Static = true)
     function c = circumference (radius)
       c = 2 * pi () .* radius;
     endfunction
   endmethods
 endclassdef
-@end group
 @end example
 
 The constructor of the class is declared in the @code{methods} block and must
 have the same name as the class and exactly one output argument which is an
 object of its class.
 
 It is also possible to overload built-in or inherited methods, like the
 @code{disp} function in the example above to tell Octave how objects of
 @code{some_class} should be displayed (@pxref{Class Methods}).
 
 In general, the first argument in a method definition is always the object that
 it is called from.  Class methods can either be called by passing the object as
 the first argument to that method or by calling the object followed by a dot
 ("@code{.}") and the method's name with subsequent arguments:
 
 @example
+@group
 >> obj = some_class ();
 New instance created.
 >> disp (obj);   # both are
 >> obj.disp ();  # equal
+@end group
 @end example
 
 In @code{some_class}, the method @code{func} is defined within a @code{methods}
 block setting the @code{Access} attribute to @var{mode}, which is one of:
 
 @table @code
 @item public
 The methods can be accessed from everywhere.
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -216,18 +216,20 @@ produces the figure shown in @ref{fig:er
 
 @DOCSTRING(loglogerr)
 
 Finally, the @code{polar} function allows you to easily plot data in
 polar coordinates.  However, the display coordinates remain rectangular
 and linear.  For example,
 
 @example
+@group
 polar (0:0.1:10*pi, 0:0.1:10*pi);
 title ("Example polar plot from 0 to 10*pi");
+@end group
 @end example
 
 @noindent
 produces the spiral plot shown in @ref{fig:polar}.
 
 @float Figure,fig:polar
 @center @image{polar,4in}
 @caption{Polar plot.}
@@ -1807,17 +1809,17 @@ endfunction
 @end group
 @end example
 
 @noindent
 where @code{hsrc} is a handle to the source of the callback, and @code{evt}
 gives some event specific data.
 
 The function can be provided as a function handle to a plain Octave function,
-as an anonymous function or as a string representing an Octvae command. The
+as an anonymous function or as a string representing an Octave command.  The
 latter syntax is not recommended since syntax errors will only occur when the
 string is evaluated.
 @xref{Function Handles Anonymous Functions Inline Functions, , Function Handles section}.
 
 This can then be associated
 with an object either at the objects creation or later with the
 @code{set} function.  For example,
 
diff --git a/doc/interpreter/testfun.txi b/doc/interpreter/testfun.txi
--- a/doc/interpreter/testfun.txi
+++ b/doc/interpreter/testfun.txi
@@ -326,32 +326,32 @@ test must_be_zero verbose
 This code generates an error
 PASSES 3 out of 4 tests (1 expected failure)
 @end group
 @end example
 
 @subsubheading Block type summary:
 
 @table @code
-@item %!test
+@item  %!test
 @itemx %!test <MESSAGE>
 Check that entire block is correct.  If @code{<MESSAGE>} is present, the
 test block is interpreted as for @code{xtest}.
 
-@item %!testif HAVE_XXX
+@item  %!testif HAVE_XXX
 @itemx %!testif HAVE_XXX, HAVE_YYY, @dots{}
 @itemx %!testif HAVE_XXX, HAVE_YYY @dots{}; RUNTIME_COND
 @itemx %!testif @dots{} <MESSAGE>
-Check block only if Octave was compiled with feature @code{HAVE_XXX}.
-@code{RUNTIME_COND} is an optional expression to evaluate to check
+Check block only if Octave was compiled with feature @w{@code{HAVE_XXX}}.
+@w{@code{RUNTIME_COND}} is an optional expression to evaluate to check
 whether some condition is met when the test is executed.  If
-@code{RUNTIME_COND} is false, the test is skipped.  If @code{<MESSAGE>}
+@w{@code{RUNTIME_COND}} is false, the test is skipped.  If @code{<MESSAGE>}
 is present, the test block is interpreted as for @code{xtest}.
 
-@item %!xtest
+@item  %!xtest
 @itemx %!xtest <MESSAGE>
 Check block, report a test failure but do not abort testing.  If
 @code{<MESSAGE>} is present, then the text of the message is displayed
 if the test fails, like this:
 
 @example
 !!!!! Known bug:  MESSAGE
 @end example
@@ -363,17 +363,17 @@ Octave bug tracker and reported as
 @example
 !!!!! Known bug: http://octave.org/testfailure/?BUG-ID
 @end example
 
 @noindent
 in which BUG-ID is the integer bug number.  The intent is to allow
 clearer documentation of known problems.
 
-@item %!error
+@item  %!error
 @itemx %!error <MESSAGE>
 @itemx %!warning
 @itemx %!warning <MESSAGE>
 Check for correct error or warning message.  If @code{<MESSAGE>} is
 supplied it is interpreted as a regular expression pattern that is
 expected to match the error or warning message.
 
 @item %!demo
@@ -387,18 +387,21 @@ Declare variables for use in multiple te
 
 @item %!function
 Define a function for use in multiple tests.
 
 @item %!endfunction
 Close a function definition.
 
 @item %!assert (x, y, tol)
+
 @item %!assert <MESSAGE> (x, y, tol)
+
 @item %!fail (CODE, PATTERN)
+
 @item %!fail <MESSAGE> (CODE, PATTERN)
 Shorthand for @code{%!test assert (x, y, tol)} or
 @code{%!test fail (CODE, PATTERN)}.  If @code{<MESSAGE>} is present, the
 test block is interpreted as for @code{xtest}.
 
 @end table
 
 @anchor{test-message-anchor}
diff --git a/libinterp/corefcn/eig.cc b/libinterp/corefcn/eig.cc
--- a/libinterp/corefcn/eig.cc
+++ b/libinterp/corefcn/eig.cc
@@ -41,51 +41,49 @@ DEFUN (eig, args, nargout,
 @deftypefnx {} {[@var{V}, @var{lambda}] =} eig (@var{A})
 @deftypefnx {} {[@var{V}, @var{lambda}] =} eig (@var{A}, @var{B})
 @deftypefnx {} {[@var{V}, @var{lambda}, @var{W}] =} eig (@var{A})
 @deftypefnx {} {[@var{V}, @var{lambda}, @var{W}] =} eig (@var{A}, @var{B})
 @deftypefnx {} {[@dots{}] =} eig (@var{A}, @var{balanceOption})
 @deftypefnx {} {[@dots{}] =} eig (@var{A}, @var{B}, @var{algorithm})
 @deftypefnx {} {[@dots{}] =} eig (@dots{}, @var{eigvalOption})
 Compute the eigenvalues (@var{lambda}) and optionally the right eigenvectors
-(@var{V}) and the left eigenvectors (@var{W}) of a matrix or a pair of
-matrices.
+(@var{V}) and the left eigenvectors (@var{W}) of a matrix or pair of matrices.
 
 The flag @var{balanceOption} can be one of:
 
 @table @asis
-@item @qcode{"balance"}
-Preliminary balancing is on. (default)
+@item @qcode{"balance"} (default)
+Preliminary balancing is on.
 
 @item @qcode{"nobalance"}
 Disables preliminary balancing.
 @end table
 
 The flag @var{eigvalOption} can be one of:
 
 @table @asis
 @item @qcode{"matrix"}
-Return the eigenvalues in a diagonal matrix. (default if 2 or 3 outputs
-are specified)
+Return the eigenvalues in a diagonal matrix.  (default if 2 or 3 outputs
+are requested)
 
 @item @qcode{"vector"}
-Return the eigenvalues in a column vector. (default if 1 output is
-specified, e.g. @var{lambda} = eig (@var{A}))
+Return the eigenvalues in a column vector.  (default if only 1 output is
+requested, e.g., @var{lambda} = eig (@var{A}))
 @end table
 
 The flag @var{algorithm} can be one of:
 
 @table @asis
 @item @qcode{"chol"}
-Uses the Cholesky factorization of B. (default if A is symmetric (Hermitian)
-and B is symmetric (Hermitian) positive definite)
+Use the Cholesky factorization of B.  (default if @var{A} is symmetric
+(Hermitian) and @var{B} is symmetric (Hermitian) positive definite)
 
 @item @qcode{"qz"}
-Uses the QZ algorithm. (When A or B are not symmetric always the
-QZ algorithm will be used)
+Use the QZ algorithm.  (used whenever @var{A} or @var{B} are not symmetric)
 @end table
 
 @multitable @columnfractions .31 .23 .23 .23
 @headitem @tab no flag @tab chol @tab qz
 @item both are symmetric
 @tab @qcode{"chol"}
 @tab @qcode{"chol"}
 @tab @qcode{"qz"}
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -12093,24 +12093,26 @@ Undocumented internal function.
       Vdrawnow_requested = true;
     }
 
   return ovl ();
 }
 
 DEFUN (__get_frame__, args, ,
        doc: /* -*- texinfo -*-
-@deftypefn {} {@var{cdata} = } __get_frame__ (@var{hfig})
-Internal function: returns the pixel cdata of figure hfig in the form of a
-height-by-width-by-3 uint8 array
+@deftypefn {} {@var{cdata} =} __get_frame__ (@var{hfig})
+Internal function.
+
+Return the pixel cdata of figure hfig in the form of a height-by-width-by-3
+uint8 array.
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
-  double h = args(0).xdouble_value ("__get_frame__: argument is not a handle");
+  double h = args(0).xdouble_value ("__get_frame__: HFIG is not a handle");
 
   graphics_object go = gh_manager::get_object (h);
   if (! go || ! go.isa ("figure"))
-    error ("__get_frame__: object is not a figure");
+    error ("__get_frame__: HFIG is not a figure");
 
   return ovl (go.get_toolkit ().get_pixels (go));
 }
diff --git a/libinterp/corefcn/gsvd.cc b/libinterp/corefcn/gsvd.cc
--- a/libinterp/corefcn/gsvd.cc
+++ b/libinterp/corefcn/gsvd.cc
@@ -113,17 +113,18 @@ Compute the generalized singular value d
 A = U*C*X'
 B = V*S*X'
 C'*C + S'*S = eye (columns (A))
 @end group
 @end example
 
 @end ifnottex
 
-The function @code{gsvd} normally returns just the vector of generalized singular values
+The function @code{gsvd} normally returns just the vector of generalized
+singular values
 @tex
 $$ \sqrt{{{diag (C^\dagger C)} \over {diag (S^\dagger S)}}} $$
 @end tex
 @ifnottex
 @code{sqrt (diag (C'*C) ./ diag (S'*S))}.
 @end ifnottex
 If asked for five return values, it also computes
 @tex
diff --git a/libinterp/corefcn/hex2num.cc b/libinterp/corefcn/hex2num.cc
--- a/libinterp/corefcn/hex2num.cc
+++ b/libinterp/corefcn/hex2num.cc
@@ -260,17 +260,17 @@ num2hex (const Array<T>& v, bool swap_by
       sv[i] = std::string (hex, nchars);
     }
 
   return Cell (v.dims (), sv);
 }
 
 DEFUN (num2hex, args, ,
        doc: /* -*- texinfo -*-
-@deftypefn {} {@var{s} =} num2hex (@var{n})
+@deftypefn  {} {@var{s} =} num2hex (@var{n})
 @deftypefnx {} {@var{s} =} num2hex (@var{n}, "cell")
 Convert a numeric array to an array of hexadecimal strings.
 
 For example:
 
 @example
 @group
 num2hex ([-1, 1, e, Inf])
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -3567,17 +3567,17 @@ Note that the output from @code{fdisp} a
 %!   expected = strrep (loose, "\n\n", "\n");
 %!   assert (expected, compact);
 %! endfor
 */
 
 DEFUN (display, args, ,
        classes: cell char double function_handle int8 int16 int32 int64 logical single struct uint8 uint16 uint32 uint64
        doc: /* -*- texinfo -*-
-@deftypefn  {} {} display (@var{obj})
+@deftypefn {} {} display (@var{obj})
 Display the contents of the object @var{obj} prepended by its name.
 
 The Octave interpreter calls the @code{display} function whenever it needs
 to present a class on-screen.  Typically, this would be a statement which
 does not end in a semicolon to suppress output.  For example:
 
 @example
 myclass (@dots{})
diff --git a/libinterp/corefcn/sub2ind.cc b/libinterp/corefcn/sub2ind.cc
--- a/libinterp/corefcn/sub2ind.cc
+++ b/libinterp/corefcn/sub2ind.cc
@@ -71,18 +71,18 @@ inputs are scalars or vectors of subscri
 The output vector @var{ind} contains the converted linear indices.
 
 Background: Array elements can be specified either by a linear index which
 starts at 1 and runs through the number of elements in the array, or they may
 be specified with subscripts for the row, column, page, etc.  The functions
 @code{ind2sub} and @code{sub2ind} interconvert between the two forms.
 
 The linear index traverses dimension 1 (rows), then dimension 2 (columns), then
-dimension 3 (pages), etc. until it has numbered all of the elements.  Consider
-the following 3-by-3 matrices:
+dimension 3 (pages), etc.@: until it has numbered all of the elements.
+Consider the following 3-by-3 matrices:
 
 @example
 @group
 [(1,1), (1,2), (1,3)]     [1, 4, 7]
 [(2,1), (2,2), (2,3)] ==> [2, 5, 8]
 [(3,1), (3,2), (3,3)]     [3, 6, 9]
 @end group
 @end example
@@ -195,18 +195,18 @@ input @var{ind} contains linear indies t
 The outputs @var{s1}, @dots{}, @var{sN} contain the converted subscripts.
 
 Background: Array elements can be specified either by a linear index which
 starts at 1 and runs through the number of elements in the array, or they may
 be specified with subscripts for the row, column, page, etc.  The functions
 @code{ind2sub} and @code{sub2ind} interconvert between the two forms.
 
 The linear index traverses dimension 1 (rows), then dimension 2 (columns), then
-dimension 3 (pages), etc. until it has numbered all of the elements.  Consider
-the following 3-by-3 matrices:
+dimension 3 (pages), etc.@: until it has numbered all of the elements.
+Consider the following 3-by-3 matrices:
 
 @example
 @group
 [1, 4, 7]     [(1,1), (1,2), (1,3)]
 [2, 5, 8] ==> [(2,1), (2,2), (2,3)]
 [3, 6, 9]     [(3,1), (3,2), (3,3)]
 @end group
 @end example
diff --git a/libinterp/dldfcn/__ode15__.cc b/libinterp/dldfcn/__ode15__.cc
--- a/libinterp/dldfcn/__ode15__.cc
+++ b/libinterp/dldfcn/__ode15__.cc
@@ -1108,17 +1108,17 @@ namespace octave
     return retval;
   }
 }
 #endif
 
 
 DEFUN_DLD (__ode15__, args, ,
            doc: /* -*- texinfo -*-
-@deftypefn  {} {@var{t}, @var{y} =} __ode15__ (@var{fun}, @var{tspan}, @var{y0}, @var{yp0}, @var{options})
+@deftypefn {} {@var{t}, @var{y} =} __ode15__ (@var{fun}, @var{tspan}, @var{y0}, @var{yp0}, @var{options})
 Undocumented internal function.
 @end deftypefn */)
 {
 
 #if defined (HAVE_SUNDIALS)
 
   // Check number of parameters
   int nargin = args.length ();
diff --git a/scripts/+containers/Map.m b/scripts/+containers/Map.m
--- a/scripts/+containers/Map.m
+++ b/scripts/+containers/Map.m
@@ -33,17 +33,17 @@
 ## Multiple string keys are entered as a cell array of strings.
 ##
 ## @var{vals} is an array of values for the map with the @emph{same} number
 ## of elements as @var{keys}.
 ##
 ## When called with no input arguments a default map is created with strings
 ## as the key type and @qcode{"any"} as the value type.
 ##
-## The @qcode{"UniformValues"} option specifies specifies whether the values of
+## The @qcode{"UniformValues"} option specifies whether the values of
 ## the map must be strictly of the same type.  If @var{is_uniform} is true, any
 ## values which would be added to the map are first validated to ensure they
 ## are of the correct type.
 ##
 ## When called with @qcode{"KeyType"} and @qcode{"ValueType"} arguments, create
 ## an empty map with the specified types.  The inputs @var{kt} and @var{vt} are
 ## the types for the keys and values of the map respectively.  Allowed values
 ## for @var{kt} are @qcode{"char"}, @qcode{"double"}, @qcode{"single"},
diff --git a/scripts/general/private/__publish_html_output__.m b/scripts/general/private/__publish_html_output__.m
--- a/scripts/general/private/__publish_html_output__.m
+++ b/scripts/general/private/__publish_html_output__.m
@@ -25,52 +25,71 @@
 ## (@samp{str}) or cell-strings (@samp{cstr}) in @var{varargin} in order
 ## to produce HTML output.
 ##
 ## @var{type} is one of
 ##
 ## @itemize @bullet
 ## @item
 ## @samp{output_file_extension} ()
+##
 ## @item
 ## @samp{header} (title_str, intro_str, toc_cstr)
+##
 ## @item
 ## @samp{footer} ()
+##
 ## @item
 ## @samp{code} (str)
+##
 ## @item
 ## @samp{code_output} (str)
+##
 ## @item
 ## @samp{section} (str)
+##
 ## @item
 ## @samp{preformatted_code} (str)
+##
 ## @item
 ## @samp{preformatted_text} (str)
+##
 ## @item
 ## @samp{bulleted_list} (cstr)
+##
 ## @item
 ## @samp{numbered_list} (cstr)
+##
 ## @item
 ## @samp{graphic} (str)
+##
 ## @item
 ## @samp{html} (str)
+##
 ## @item
 ## @samp{latex} (str)
+##
 ## @item
 ## @samp{text} (str)
+##
 ## @item
 ## @samp{bold} (str)
+##
 ## @item
 ## @samp{italic} (str)
+##
 ## @item
 ## @samp{monospaced} (str)
+##
 ## @item
 ## @samp{link} (url_str, url_str, str)
+##
 ## @item
 ## @samp{TM} ()
+##
 ## @item
 ## @samp{R} ()
 ## @end itemize
 ## @end deftypefn
 
 function outstr = __publish_html_output__ (type, varargin)
   outstr = feval (["do_" type], varargin{:});
 endfunction
diff --git a/scripts/general/private/__publish_latex_output__.m b/scripts/general/private/__publish_latex_output__.m
--- a/scripts/general/private/__publish_latex_output__.m
+++ b/scripts/general/private/__publish_latex_output__.m
@@ -18,59 +18,78 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {} {@var{outstr} =} __publish_latex_output__ (@var{type}, @var{varargin})
 ##
 ## Internal function.
 ##
 ## The first input argument @var{type} defines the required strings
 ## (@samp{str}) or cell-strings (@samp{cstr}) in @var{varargin} in order
-## to produce LaTeX output.
+## to produce @LaTeX{} output.
 ##
 ## @var{type} is one of
 ##
 ## @itemize @bullet
 ## @item
 ## @samp{output_file_extension} ()
+##
 ## @item
 ## @samp{header} (title_str, intro_str, toc_cstr)
+##
 ## @item
 ## @samp{footer} ()
+##
 ## @item
 ## @samp{code} (str)
+##
 ## @item
 ## @samp{code_output} (str)
+##
 ## @item
 ## @samp{section} (str)
+##
 ## @item
 ## @samp{preformatted_code} (str)
+##
 ## @item
 ## @samp{preformatted_text} (str)
+##
 ## @item
 ## @samp{bulleted_list} (cstr)
+##
 ## @item
 ## @samp{numbered_list} (cstr)
+##
 ## @item
 ## @samp{graphic} (str)
+##
 ## @item
 ## @samp{html} (str)
+##
 ## @item
 ## @samp{latex} (str)
+##
 ## @item
 ## @samp{text} (str)
+##
 ## @item
 ## @samp{bold} (str)
+##
 ## @item
 ## @samp{italic} (str)
+##
 ## @item
 ## @samp{monospaced} (str)
+##
 ## @item
 ## @samp{link} (url_str, url_str, str)
+##
 ## @item
 ## @samp{TM} ()
+##
 ## @item
 ## @samp{R} ()
 ## @end itemize
 ## @end deftypefn
 
 function outstr = __publish_latex_output__ (type, varargin)
   outstr = feval (["do_" type], varargin{:});
 endfunction
diff --git a/scripts/ode/odeset.m b/scripts/ode/odeset.m
--- a/scripts/ode/odeset.m
+++ b/scripts/ode/odeset.m
@@ -47,28 +47,28 @@
 ##
 ## When called with two input ODE options structures @var{oldstruct} and
 ## @var{newstruct} overwrite all values from the structure
 ## @var{oldstruct} with new values from the structure @var{newstruct}.
 ## Empty values in @var{newstruct} will not overwrite values in
 ## @var{oldstruct}.
 ##
 ## The most commonly used ODE options, which are always assigned a value
-## by @qcode{odeset}, are the following:
+## by @code{odeset}, are the following:
 ##
 ## @table @asis
 ## @item AbsTol
 ## Absolute error tolerance.
 ##
 ## @item BDF
 ## Use BDF formulas in implicit multistep methods.
 ## @emph{Note}: This option is not yet implemented.
 ##
 ## @item Events
-## Event function. An event function must have the form
+## Event function.  An event function must have the form
 ## @code{[value, isterminal, direction] = my_events_f (t, y)}
 ##
 ## @item InitialSlope
 ## Consistent initial slope vector for DAE solvers.
 ##
 ## @item InitialStep
 ## Initial time step size.
 ##
@@ -84,17 +84,17 @@
 ## If the Jacobian matrix is sparse and non-constant but maintains a
 ## constant sparsity pattern, specify the sparsity pattern.
 ##
 ## @item Mass
 ## Mass matrix, specified as a constant matrix or a function of
 ## time and state.
 ##
 ## @item MassSingular
-## Specify whether the mass matrix is singular. Accepted values include
+## Specify whether the mass matrix is singular.  Accepted values include
 ## @qcode{"yes"}, @qcode{"no"}, @qcode{"maybe"}.
 ##
 ## @item MaxOrder
 ## Maximum order of formula.
 ##
 ## @item MaxStep
 ## Maximum time step value.
 ##
@@ -103,45 +103,45 @@
 ##
 ## @item MvPattern
 ## If the mass matrix is sparse and non-constant but maintains a
 ## constant sparsity pattern, specify the sparsity pattern.
 ## @emph{Note}: This option is not yet implemented.
 ##
 ## @item NonNegative
 ## Specify elements of the state vector that are expected to remain
-## nonnegative during the simulation.
+## non-negative during the simulation.
 ##
 ## @item NormControl
 ## Control error relative to the 2-norm of the solution, rather than its
 ## absolute value.
 ##
 ## @item OutputFcn
-## Function to monitor the state during the simulation. For the form of
-## the function to use see @qcode{odeplot}.
+## Function to monitor the state during the simulation.  For the form of
+## the function to use see @code{odeplot}.
 ##
 ## @item OutputSel
 ## Indices of elements of the state vector to be passed to the output
 ## monitoring function.
 ##
 ## @item Refine
 ## Specify whether output should be returned only at the end of each
-## time step or also at intermediate time instances. The value should be
+## time step or also at intermediate time instances.  The value should be
 ## a scalar indicating the number of equally spaced time points to use
 ## within each timestep at which to return output.
 ## @emph{Note}: This option is not yet implemented.
 ##
 ## @item RelTol
 ## Relative error tolerance.
 ##
 ## @item Stats
 ## Print solver statistics after simulation.
 ##
 ## @item Vectorized
-## Specify whether @qcode{odefun} can be passed multiple values of the
+## Specify whether @code{odefun} can be passed multiple values of the
 ## state at once.
 ##
 ## @end table
 ##
 ## Field names that are not in the above list are also accepted and
 ## added to the result structure.
 ##
 ## @seealso{odeget}
diff --git a/scripts/ode/private/ode_event_handler.m b/scripts/ode/private/ode_event_handler.m
--- a/scripts/ode/private/ode_event_handler.m
+++ b/scripts/ode/private/ode_event_handler.m
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {} {@var{retval} =} ode_event_handler (@var{@@evtfun}, @var{t}, @var{y}, @var{flag}, @var{par1}, @var{par2}, @dots{})
 ##
 ## Return the solution of the event function (@var{@@evtfun}) which is
 ## specified in the form of a function handle.
-#
+##
 ## The second input argument @var{t} is a scalar double and specifies the time
 ## of the event evaluation.
 ##
 ## The third input argument @var{y} may be a column vector of type double
 ## (for ODEs and DAEs) which specifies the solutions.  Alternatives, @var{y}
 ## may be a cell array (for IDEs and DDEs) which specifies the solutions and
 ## derivatives.
 ##
diff --git a/scripts/ode/private/runge_kutta_45_dorpri.m b/scripts/ode/private/runge_kutta_45_dorpri.m
--- a/scripts/ode/private/runge_kutta_45_dorpri.m
+++ b/scripts/ode/private/runge_kutta_45_dorpri.m
@@ -14,19 +14,19 @@
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {[@var{t_next}, @var{x_next}] =} runge_kutta_45_dorpri (@var{@@fun}, @var{t}, @var{x}, @var{dt})
-## @deftypefn  {} {[@var{t_next}, @var{x_next}] =} runge_kutta_45_dorpri (@var{@@fun}, @var{t}, @var{x}, @var{dt}, @var{options})
-## @deftypefn  {} {[@var{t_next}, @var{x_next}] =} runge_kutta_45_dorpri (@var{@@fun}, @var{t}, @var{x}, @var{dt}, @var{options}, @var{k_vals})
-## @deftypefn  {} {[@var{t_next}, @var{x_next}] =} runge_kutta_45_dorpri (@var{@@fun}, @var{t}, @var{x}, @var{dt}, @var{options}, @var{k_vals}, @var{t_next})
+## @deftypefnx {} {[@var{t_next}, @var{x_next}] =} runge_kutta_45_dorpri (@var{@@fun}, @var{t}, @var{x}, @var{dt}, @var{options})
+## @deftypefnx {} {[@var{t_next}, @var{x_next}] =} runge_kutta_45_dorpri (@var{@@fun}, @var{t}, @var{x}, @var{dt}, @var{options}, @var{k_vals})
+## @deftypefnx {} {[@var{t_next}, @var{x_next}] =} runge_kutta_45_dorpri (@var{@@fun}, @var{t}, @var{x}, @var{dt}, @var{options}, @var{k_vals}, @var{t_next})
 ## @deftypefnx {} {[@var{t_next}, @var{x_next}, @var{x_est}] =} runge_kutta_45_dorpri (@dots{})
 ## @deftypefnx {} {[@var{t_next}, @var{x_next}, @var{x_est}, @var{k_vals_out}] =} runge_kutta_45_dorpri (@dots{})
 ##
 ## This function can be used to integrate a system of ODEs with a given initial
 ## condition @var{x} from @var{t} to @var{t+dt} with the Dormand-Prince method.
 ## For the definition of this method see
 ## @url{http://en.wikipedia.org/wiki/Dormand%E2%80%93Prince_method}.
 ##
diff --git a/scripts/plot/appearance/xlim.m b/scripts/plot/appearance/xlim.m
--- a/scripts/plot/appearance/xlim.m
+++ b/scripts/plot/appearance/xlim.m
@@ -23,34 +23,33 @@
 ## @deftypefnx {} {} xlim ("auto")
 ## @deftypefnx {} {} xlim ("manual")
 ## @deftypefnx {} {} xlim (@var{hax}, @dots{})
 ## Query or set the limits of the x-axis for the current plot.
 ##
 ## Called without arguments @code{xlim} returns the x-axis limits of the
 ## current plot.
 ##
-## With the input query @qcode{"mode"}, return the current x-limit
-## calculation mode which is either @qcode{"auto"} or @qcode{"manual"}.
+## With the input query @qcode{"mode"}, return the current x-limit calculation
+## mode which is either @qcode{"auto"} or @qcode{"manual"}.
 ##
 ## If passed a 2-element vector [@var{x_lo} @var{x_hi}], the limits of the
 ## x-axis are set to these values and the mode is set to @qcode{"manual"}.
 ## The special values -Inf and Inf can be used to indicate that either
 ## the lower axis limit or upper axis limit should be automatically calculated.
 ##
 ## The current plotting mode can be changed by using either @qcode{"auto"}
 ## or @qcode{"manual"} as the argument.
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on
 ## this axis rather than the current axes returned by @code{gca}.
 ##
 ## Programming Note: The @code{xlim} function operates by modifying the
 ## @qcode{"xlim"} and @qcode{"xlimmode"} properties of an axes object.  These
-## properties can be be directly inspected and altered with
-## @code{get}/@code{set}.
+## properties can be directly inspected and altered with @code{get}/@code{set}.
 ## @seealso{ylim, zlim, axis, set, get, gca}
 ## @end deftypefn
 
 function retval = xlim (varargin)
 
   ret = __axis_limits__ ("xlim", varargin{:});
 
   if (! isempty (ret))
diff --git a/scripts/plot/appearance/ylim.m b/scripts/plot/appearance/ylim.m
--- a/scripts/plot/appearance/ylim.m
+++ b/scripts/plot/appearance/ylim.m
@@ -23,34 +23,33 @@
 ## @deftypefnx {} {} ylim ("auto")
 ## @deftypefnx {} {} ylim ("manual")
 ## @deftypefnx {} {} ylim (@var{hax}, @dots{})
 ## Query or set the limits of the y-axis for the current plot.
 ##
 ## Called without arguments @code{ylim} returns the y-axis limits of the
 ## current plot.
 ##
-## With the input query @qcode{"mode"}, return the current
-## y-limit calculation mode which is either @qcode{"auto"} or @qcode{"manual"}.
+## With the input query @qcode{"mode"}, return the current y-limit calculation
+## mode which is either @qcode{"auto"} or @qcode{"manual"}.
 ##
 ## If passed a 2-element vector [@var{y_lo} @var{y_hi}], the limits of the
 ## y-axis are set to these values and the mode is set to @qcode{"manual"}.
 ## The special values -Inf and Inf can be used to indicate that either
 ## the lower axis limit or upper axis limit should be automatically calculated.
 ##
 ## The current plotting mode can be changed by using either @qcode{"auto"}
 ## or @qcode{"manual"} as the argument.
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on
 ## this axis rather than the current axes returned by @code{gca}.
 ##
 ## Programming Note: The @code{ylim} function operates by modifying the
 ## @qcode{"ylim"} and @qcode{"ylimmode"} properties of an axes object.  These
-## properties can be be directly inspected and altered with
-## @code{get}/@code{set}.
+## properties can be directly inspected and altered with @code{get}/@code{set}.
 ## @seealso{xlim, zlim, axis, set, get, gca}
 ## @end deftypefn
 
 function retval = ylim (varargin)
 
   ret = __axis_limits__ ("ylim", varargin{:});
 
   if (! isempty (ret))
diff --git a/scripts/plot/appearance/zlim.m b/scripts/plot/appearance/zlim.m
--- a/scripts/plot/appearance/zlim.m
+++ b/scripts/plot/appearance/zlim.m
@@ -23,34 +23,33 @@
 ## @deftypefnx {} {} zlim ("auto")
 ## @deftypefnx {} {} zlim ("manual")
 ## @deftypefnx {} {} zlim (@var{hax}, @dots{})
 ## Query or set the limits of the z-axis for the current plot.
 ##
 ## Called without arguments @code{zlim} returns the z-axis limits of the
 ## current plot.
 ##
-## With the input query @qcode{"mode"}, return the current
-## z-limit calculation mode which is either @qcode{"auto"} or @qcode{"manual"}.
+## With the input query @qcode{"mode"}, return the current z-limit calculation
+## mode which is either @qcode{"auto"} or @qcode{"manual"}.
 ##
 ## If passed a 2-element vector [@var{z_lo} @var{z_hi}], the limits of the
-## x-axis are set to these values and the mode is set to @qcode{"manual"}.
+## z-axis are set to these values and the mode is set to @qcode{"manual"}.
 ## The special values -Inf and Inf can be used to indicate that either
 ## the lower axis limit or upper axis limit should be automatically calculated.
 ##
 ## The current plotting mode can be changed by using either @qcode{"auto"}
 ## or @qcode{"manual"} as the argument.
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on
 ## this axis rather than the current axes returned by @code{gca}.
 ##
 ## Programming Note: The @code{zlim} function operates by modifying the
 ## @qcode{"zlim"} and @qcode{"zlimmode"} properties of an axes object.  These
-## properties can be be directly inspected and altered with
-## @code{get}/@code{set}.
+## properties can be directly inspected and altered with @code{get}/@code{set}.
 ## @seealso{xlim, ylim, axis, set, get, gca}
 ## @end deftypefn
 
 function retval = zlim (varargin)
 
   ret = __axis_limits__ ("zlim", varargin{:});
 
   if (! isempty (ret))
diff --git a/scripts/plot/util/hgtransform.m b/scripts/plot/util/hgtransform.m
--- a/scripts/plot/util/hgtransform.m
+++ b/scripts/plot/util/hgtransform.m
@@ -12,19 +12,19 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {@var{h} =} {} hgtransform ()
-## @deftypefnx {@var{h} =} {} hgtransform (@var{property}, @var{value}, @dots{})
-## @deftypefnx {@var{h} =} {} hgtransform (@var{hax}, @dots{})
+## @deftypefn  {} {@var{h} =} hgtransform ()
+## @deftypefnx {} {@var{h} =} hgtransform (@var{property}, @var{value}, @dots{})
+## @deftypefnx {} {@var{h} =} hgtransform (@var{hax}, @dots{})
 ##
 ## Create a graphics transform object.
 ##
 ## FIXME: Need to write documentation.
 ## FIXME: Add 'makehgtform' to seealso list when it is implemented.
 ## @seealso{hggroup}
 ## @end deftypefn
 
diff --git a/scripts/sparse/eigs.m b/scripts/sparse/eigs.m
--- a/scripts/sparse/eigs.m
+++ b/scripts/sparse/eigs.m
@@ -139,17 +139,17 @@
 ##
 ## @item cholB
 ## Flag if @code{chol (@var{B})} is passed rather than @var{B}.  The default is
 ## false.
 ##
 ## @item permB
 ## The permutation vector of the Cholesky@tie{}factorization of @var{B} if
 ## @code{cholB} is true.  It is obtained by @code{[R, ~, permB] =
-## chol (@var{B}, @qcode{"vector"})}. The default is @code{1:@var{n}}.
+## chol (@var{B}, @qcode{"vector"})}.  The default is @code{1:@var{n}}.
 ##
 ## @end table
 ##
 ## It is also possible to represent @var{A} by a function denoted @var{af}.
 ## @var{af} must be followed by a scalar argument @var{n} defining the length
 ## of the vector argument accepted by @var{af}.  @var{af} can be a function
 ## handle, an inline function, or a string.  When @var{af} is a string it
 ## holds the name of the function to use.
diff --git a/scripts/strings/native2unicode.m b/scripts/strings/native2unicode.m
--- a/scripts/strings/native2unicode.m
+++ b/scripts/strings/native2unicode.m
@@ -19,22 +19,22 @@
 ## -*- texinfo -*-
 ## @deftypefn  {} {@var{utf8_str} =} native2unicode (@var{native_bytes}, @var{codepage})
 ## @deftypefnx {} {@var{utf8_str} =} native2unicode (@var{native_bytes})
 ## Convert byte stream @var{native_bytes} to UTF-8 using @var{codepage}.
 ##
 ## The numbers in the vector @var{native_bytes} are rounded and clipped to
 ## integers between 0 and 255.  This byte stream is then mapped into the
 ## code page given by the string @var{codepage} and returned in the string
-## @var{utf8_str}.  Octave uses UTF-8 as its internal encoding.
-## The string @var{codepage} must be an identifier of a valid code page.
-## Examples for valid code pages are "ISO-8859-1", "Shift-JIS", or "UTF-16".
-## For a list of supported code pages, see:
-## http://www.gnu.org/software/libiconv/
-## If @var{codepage} is omitted or empty, the system default codepage is used.
+## @var{utf8_str}.  Octave uses UTF-8 as its internal encoding.  The string
+## @var{codepage} must be an identifier of a valid code page.  Examples for
+## valid code pages are @qcode{"ISO-8859-1"}, @qcode{"Shift-JIS"}, or
+## @qcode{"UTF-16"}.  For a list of supported code pages, see
+## @url{http://www.gnu.org/software/libiconv}.  If @var{codepage} is omitted
+## or empty, the system default codepage is used.
 ##
 ## If @var{native_bytes} is a string vector, it is returned as is.
 ##
 ## @seealso{unicode2native}
 ## @end deftypefn
 
 function utf8_str = native2unicode (native_bytes, codepage = "")
 
@@ -50,41 +50,42 @@ function utf8_str = native2unicode (nati
   if (! isnumeric (native_bytes) || ! isvector (native_bytes))
     error ("native2unicode: NATIVE_BYTES must be a numeric vector");
   endif
 
   if (! ischar (codepage))
     error ("native2unicode: CODEPAGE must be a string")
   endif
 
-  ## FIXME: would it be better to do this by converting to uint8?  Or to
+  ## FIXME: Would it be better to do this by converting to uint8?  Or to
   ## let __native2unicode to the clipping?  Multiple steps here means
   ## looping through the data and allocating memory multiple times.
 
   native_bytes = round (native_bytes);
   native_bytes(native_bytes < 0) = 0;
   native_bytes(native_bytes > 255) = 255;
 
   utf8_str = __native2unicode__ (native_bytes, codepage);
 
   if (iscolumn (native_bytes))
     utf8_str = utf8_str';
   endif
 
 endfunction
 
+
 ## "ЄЅІЇЈЉЊ"
 %!assert (double (native2unicode (164:170, 'ISO-8859-5')),
 %!        [208 132 208 133 208 134 208 135 208 136 208 137 208 138]);
 ## ["ЄЅІ" 0 "ЇЈЉЊ"]
 %!assert (double (native2unicode ([164:166 0 167:170], 'ISO-8859-5')),
 %!        [208 132 208 133 208 134 0 208 135 208 136 208 137 208 138]);
 
 %!assert (native2unicode ("foobar"), "foobar");
 %!assert (double (native2unicode ([0 0 120.3 0 0 122.6 0 0])),
 %!        [0 0 120 0 0 123 0 0]);
 
+%!error <Invalid call> native2unicode ()
+%!error <Invalid call> native2unicode (1, 'ISO-8859-1', 'test')
 %!error <NATIVE_BYTES must be a numeric vector> native2unicode ([1 2; 3 4])
 %!error <NATIVE_BYTES must be a numeric vector> native2unicode ({1 2 3 4})
 %!error <CODEPAGE must be a string> native2unicode (164:170, 123)
 %!error <converting from codepage 'foo' to UTF-8> native2unicode (234, 'foo')
-%!error <Invalid call> native2unicode ()
-%!error <Invalid call> native2unicode (1, 'ISO-8859-1', 'test')
diff --git a/scripts/strings/unicode2native.m b/scripts/strings/unicode2native.m
--- a/scripts/strings/unicode2native.m
+++ b/scripts/strings/unicode2native.m
@@ -17,22 +17,22 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {@var{native_bytes} =} unicode2native (@var{utf8_str}, @var{codepage})
 ## @deftypefnx {} {@var{native_bytes} =} unicode2native (@var{utf8_str})
 ## Convert UTF-8 string @var{utf8_str} to byte stream using @var{codepage}.
 ##
 ## The character vector @var{utf8_str} is converted to a byte stream
-## @var{native_bytes} using the code page given by @var{codepage}.
-## The string @var{codepage} must be an identifier of a valid code page.
-## Examples for valid code pages are "ISO-8859-1", "Shift-JIS", or "UTF-16".
-## For a list of supported code pages, see:
-## http://www.gnu.org/software/libiconv/
-## If @var{codepage} is omitted or empty, the system default codepage is used.
+## @var{native_bytes} using the code page given by @var{codepage}.  The
+## string @var{codepage} must be an identifier of a valid code page.
+## Examples for valid code pages are @qcode{"ISO-8859-1"},
+## @qcode{"Shift-JIS"}, or @qcode{"UTF-16"}.  For a list of supported code
+## pages, see @url{http://www.gnu.org/software/libiconv}.  If @var{codepage}
+## is omitted or empty, the system default codepage is used.
 ##
 ## If any of the characters cannot be mapped into the codepage @var{codepage},
 ## they are replaced with the appropriate substitution sequence for that
 ## codepage.
 ##
 ## @seealso{native2unicode}
 ## @end deftypefn
 
@@ -53,17 +53,18 @@ function native_bytes = unicode2native (
   native_bytes = __unicode2native__ (utf8_str, codepage);
 
   if (iscolumn (utf8_str))
     native_bytes = native_bytes';
   endif
 
 endfunction
 
+
 %!assert (unicode2native ("ЄЅІЇЈЉЊ", "ISO-8859-5"), uint8 (164:170));
 %!assert (unicode2native (["ЄЅІ" 0 "ЇЈЉЊ"], "ISO-8859-5"), uint8 ([164:166 0 167:170]));
 
+%!error <Invalid call> unicode2native ()
+%!error <Invalid call> unicode2native ('a', 'ISO-8859-1', 'test')
 %!error <UTF8_STR must be a character vector> unicode2native (['ab'; 'cd'])
 %!error <UTF8_STR must be a character vector> unicode2native ({1 2 3 4})
 %!error <CODEPAGE must be a string> unicode2native ('ЄЅІЇЈЉЊ', 123)
 %!error <converting from UTF-8 to codepage 'foo'> unicode2native ('a', 'foo')
-%!error <Invalid call> unicode2native ()
-%!error <Invalid call> unicode2native ('a', 'ISO-8859-1', 'test')
