# HG changeset patch
# User jwe
# Date 820984511 0
#      Sun Jan 07 03:15:11 1996 +0000
# Node ID ce16950b6b027222956169e8191c41185beb7ae1
# Parent  e4d94a757f01760e64d0f79f3f9c513e87000ff9
[project @ 1996-01-07 03:15:11 by jwe]

diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -67,31 +67,21 @@ private:
   T *data;
   int count;
   int len;
 
   ArrayRep<T>& operator = (const ArrayRep<T>& a);  
 
 protected:
 
-  ArrayRep (T *d, int l)
-    {
-      data = d;
-      len = l;
-      count = 1;
-    }
+  ArrayRep (T *d, int l) : data (d), len (l), count (1) { }
 
 public:
 
-  ArrayRep (void)
-    {
-      data = 0;
-      len = 0;
-      count = 1;
-    }
+  ArrayRep (void) : data (0), len (0), count (1) { }
 
   ArrayRep (int n);
 
   ArrayRep (const ArrayRep<T>& a);
 
   ~ArrayRep (void);
 
   int length (void) const { return len; }
@@ -290,17 +280,17 @@ public:
       set_max_indices (2);
     }
 #endif
 
   ~Array2 (void) { }
 
   Array2<T>& operator = (const Array2<T>& a)
     {
-      if (this != &a)
+      if (this != &a && rep != a.rep)
 	{
 	  Array<T>::operator = (a);
 	  d1 = a.d1;
 	  d2 = a.d2;
 	}
 
       return *this;
     }
@@ -384,17 +374,17 @@ public:
       d3 = a.d3;
       set_max_indices (3);
     }
 
   ~Array3 (void) { }
 
   Array3<T>& operator = (const Array3<T>& a)
     {
-      if (this != &a)
+      if (this != &a && rep != a.rep)
 	{
 	  Array<T>::operator = (a);
 	  d1 = a.d1;
 	  d2 = a.d2;
 	  d3 = a.d3;
 	}
 
       return *this;
