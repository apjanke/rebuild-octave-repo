# HG changeset patch
# User Rik <rik@octave.org>
# Date 1378501722 25200
#      Fri Sep 06 14:08:42 2013 -0700
# Node ID 6dbc866379e22072111a90063d5f477705a46e45
# Parent  5ca5aff90ffd6db20fd5e948929645cbca911068
Replace cellfun() occurrences with faster code where possible.

* scripts/help/doc_cache_create.m: Use built-in "isclass" rather than ischar.
Use addpath and rmpath with multiple inputs rather than cellfun.

* scripts/image/imformats.m: Use isfield with cell string list rather
than cellfun.

* scripts/image/private/__imread__.m: Use ismember to replace cellfun/strcmpi
combo.

* scripts/miscellaneous/what.m: Re-order if/elseif tree.

* scripts/pkg/private/rebuild.m: Replace cellfun with strcat call.

* scripts/plot/axis.m: Use comma-separated lists to replace cellfun.

* scripts/plot/pareto.m: Use cellstr on char array to replace cellfun.

* scripts/plot/private/__gnuplot_print__.m: Use @times, rather than
anonymous function, in cellfun call.

* scripts/plot/private/__line__.m: White space cleanup.

* scripts/plot/private/__patch__.m: Use ismember to replace cellfun/strcmpi
combo.  Use in-place '|=' operator for performance.

* scripts/plot/struct2hdl.m: Use ismember to replace cellfun/strcmp combo.

* scripts/polynomial/splinefit.m: Use built-in "isclass" rather than ischar.

* scripts/special-matrix/gallery.m: Remove anonymous functions inside cellfuns.

* scripts/strings/strsplit.m: Correct comment character to '#' from '%'.

* scripts/strings/untabify.m: Use multiple argument form of cellfun to get
rid of anonymous function.

* scripts/testfun/__run_test_suite__.m: Remove anonymous function from within
cellfun.

* scripts/ui/inputdlg.m: Use built-in "isclass" rather than ischar.

diff --git a/scripts/help/doc_cache_create.m b/scripts/help/doc_cache_create.m
--- a/scripts/help/doc_cache_create.m
+++ b/scripts/help/doc_cache_create.m
@@ -37,17 +37,17 @@ function doc_cache_create (out_file = "d
   if (! ischar (out_file))
     print_usage ();
   endif
 
   ## Generate cache
   if (isempty (directory))
     cache = gen_builtin_cache ();
   elseif (iscell (directory))
-    if (all (cellfun (@ischar, directory)))
+    if (all (cellfun ("isclass", directory, "char")))
       cache = gen_doc_cache_in_dir (directory);
     else
       error ("doc_cache_create: cell must contain only strings");
     endif
   elseif (ischar (directory))
      cache = gen_doc_cache_in_dir (directory);
   else
      error ("doc_cache_create: second input argument must be a string or a cell of strings");
@@ -90,61 +90,61 @@ function [text, first_sentence, status] 
   first_sentence = get_first_help_sentence (f);
 endfunction
 
 function cache = create_cache (list)
   cache = {};
 
   ## For each function:
   for n = 1:length (list)
-    f = list {n};
+    f = list{n};
 
     ## Get help text
     [text, format] = get_help_text (f);
 
     [text, first_sentence, status] = handle_function (f, text, format);
 
     ## Did we get the help text?
     if (status != 0)
       continue;
     endif
 
     ## Store the help text
-    cache (1, end+1) = f;
-    cache (2, end) = text;
-    cache (3, end) = first_sentence;
+    cache(1, end+1) = f;
+    cache(2, end) = text;
+    cache(3, end) = first_sentence;
   endfor
 endfunction
 
 function cache = gen_doc_cache_in_dir (directory)
 
   ## If 'directory' is not in the current path, add it so we search it
   dir_in_path = ismember (directory, ostrsplit (path (), pathsep ()));
 
   ## dirs not in path
   if (! iscell (directory))
     directory = {directory};
   endif
   dirs_notpath = {directory{!dir_in_path}};
 
   ## add them
   if (! isempty (dirs_notpath))
-    cellfun (@addpath, dirs_notpath);
+    addpath (dirs_notpath{:});
   endif
 
   ## create cache
   func = @(s_) create_cache (__list_functions__ (s_));
-  cache = cellfun (func, directory, 'UniformOutput', false);
+  cache = cellfun (func, directory, "UniformOutput", false);
 
   ## concatenate results
   cache = [cache{:}];
 
   ## remove dirs form path
   if (! isempty (dirs_notpath))
-    cellfun (@rmpath, dirs_notpath);
+    rmpath (dirs_notpath{:});
   endif
 
 endfunction
 
 function cache = gen_builtin_cache ()
   operators = __operators__ ();
   keywords = __keywords__ ();
   builtins = __builtins__ ();
diff --git a/scripts/image/imformats.m b/scripts/image/imformats.m
--- a/scripts/image/imformats.m
+++ b/scripts/image/imformats.m
@@ -255,17 +255,17 @@ function formats = default_formats ()
   ## fills rest of format information by checking with GraphicsMagick
   formats = __magick_formats__ (formats);
 endfunction
 
 function is_valid_format (format)
   ## the minimal list of fields required in the structure. We don't
   ## require multipage because it doesn't exist in matlab
   min_fields  = {"ext", "read", "isa", "write", "info", "alpha", "description"};
-  fields_mask = cellfun (@(x) isfield (format, x), min_fields);
+  fields_mask = isfield (format, min_fields);
   if (! all (fields_mask))
     error ("imformats: structure has missing field `%s'.", min_fields(! fields_mask){1});
   endif
 endfunction
 
 function match = find_ext_idx (formats, ext)
   ## FIXME: is matlab sensitive to file extensions?
   ## XXX: what should we do if there's more than one hit?
diff --git a/scripts/image/private/__imread__.m b/scripts/image/private/__imread__.m
--- a/scripts/image/private/__imread__.m
+++ b/scripts/image/private/__imread__.m
@@ -74,19 +74,19 @@ function varargout = __imread__ (filenam
     offset++;
   endif
 
   if (rem (numel (varargin) - offset + 1, 2) != 0)
     error ("imread: no pair for all arguments (odd number left over)");
   endif
 
   ## Check key/value options.
-  indexes = find (cellfun (@(x) ischar (x) ...
-                                && any (strcmpi (x, {"frames", "index"})),
-                           varargin));
+  indexes = cellfun ("isclass", varargin, "char");
+  indexes(indexes) &= ismember (varargin(indexes), {"frames", "index"});
+  indexes = find (indexes);
   if (indexes)
     options.index = varargin{indexes+1};
     if (! (is_valid_index_option (options.index)) &&
         ! (ischar (options.index) && strcmpi (options.index, "all")))
       error ("imread: value for %s must be a vector or the string `all'");
     endif
   endif
 
diff --git a/scripts/miscellaneous/what.m b/scripts/miscellaneous/what.m
--- a/scripts/miscellaneous/what.m
+++ b/scripts/miscellaneous/what.m
@@ -58,23 +58,23 @@ function ret = what (d)
     ## Ignore . and ..
     if (strcmp (n, ".") || strcmp (n, ".."))
       continue;
     else
       ## Ignore mdl and p files
       [dummy, f, e] = fileparts (n);
       if (strcmp (e, ".m"))
         w.m{end+1} = n;
-      elseif (strcmp (e, mexext ()))
-        w.mex{end+1} = n;
       elseif (strcmp (e, ".oct"))
         w.oct{end+1} = n;
+      elseif (strcmp (e, mexext ()))
+        w.mex{end+1} = n;
       elseif (strcmp (e, ".mat"))
         w.mat{end+1} = n;
-      elseif(strcmp (n(1), "@"))
+      elseif (strcmp (n(1), "@"))
         w.classes{end+1} = n;
       endif
     endif
   endfor
 
   if (nargout == 0)
     __display_filenames__ ("M-files in directory", w.path, w.m);
     __display_filenames__ ("\nMEX-files in directory", w.path, w.mex);
diff --git a/scripts/pkg/private/rebuild.m b/scripts/pkg/private/rebuild.m
--- a/scripts/pkg/private/rebuild.m
+++ b/scripts/pkg/private/rebuild.m
@@ -30,17 +30,17 @@ function descriptions = rebuild (prefix,
     endif
     ## the two first entries of dirlist are "." and ".."
     dirlist([1,2]) = [];
   else
     old_descriptions = installed_packages (list, list);
     wd = pwd ();
     unwind_protect
       cd (prefix);
-      dirlist = glob (cellfun(@(x) [x '-*'], files, 'uniformoutput', 0));
+      dirlist = glob (strcat (files, '-*'));
     unwind_protect_cleanup
       cd (wd);
     end_unwind_protect
   endif
   descriptions = {};
   for k = 1:length (dirlist)
     descfile = fullfile (prefix, dirlist{k}, "packinfo", "DESCRIPTION");
     if (verbose)
diff --git a/scripts/plot/axis.m b/scripts/plot/axis.m
--- a/scripts/plot/axis.m
+++ b/scripts/plot/axis.m
@@ -334,18 +334,18 @@ function lims = __get_tight_lims__ (ca, 
       tmp = data;
       data = cellfun (@(x) x(x>0), tmp, "uniformoutput", false);
       n = cellfun (@isempty, data);
       data(n) = cellfun (@(x) x(x<0), tmp(n), "uniformoutput", false);
     endif
     data = cellfun (@(x) x(isfinite (x)), data, "uniformoutput", false);
     data = data(! cellfun ("isempty", data));
     if (! isempty (data))
-      lims_min = min (cellfun (@(x) min (x(:)), data(:)));
-      lims_max = max (cellfun (@(x) max (x(:)), data(:)));
+      lims_min = min ([data{:}](:));
+      lims_max = max ([data{:}](:));
       lims = [lims_min, lims_max];
     else
       lims = [0, 1];
     endif
   endif
 
 endfunction
 
diff --git a/scripts/plot/pareto.m b/scripts/plot/pareto.m
--- a/scripts/plot/pareto.m
+++ b/scripts/plot/pareto.m
@@ -65,29 +65,28 @@
 function h = pareto (varargin)
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ ("pareto", varargin{:});
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
 
-  x = varargin {1}(:).';
+  x = varargin{1}(:).';
   if (nargin == 2)
-    y = varargin {2}(:).';
+    y = varargin{2}(:).';
     if (! iscell (y))
       if (ischar (y))
         y = cellstr (y);
       else
-        y = cellfun ("num2str", num2cell (y), "uniformoutput", false);
+        y = cellstr (num2str (y(:)));
       endif
     endif
   else
-    y = cellfun ("int2str", num2cell (1 : numel (x)),
-                 "uniformoutput", false);
+    y = cellstr (int2str ([1:numel(x)]'));
   endif
 
   [x, idx] = sort (x, "descend");
   y = y(idx);
   cdf = cumsum (x);
   maxcdf = max (cdf);
   cdf = cdf ./ maxcdf;
   cdf95 = cdf - 0.95;
diff --git a/scripts/plot/private/__gnuplot_print__.m b/scripts/plot/private/__gnuplot_print__.m
--- a/scripts/plot/private/__gnuplot_print__.m
+++ b/scripts/plot/private/__gnuplot_print__.m
@@ -166,17 +166,17 @@ function opts = __gnuplot_print__ (opts)
     endif
   endfor
 
 endfunction
 
 function eps_drawnow (opts, epsfile, gp_opts)
   [h, fontsize] = get_figure_text_objs (opts);
   unwind_protect
-    fontsize_2x = cellfun (@(x) 2*x, fontsize, "uniformoutput", false);
+    fontsize_2x = cellfun (@times, {2}, fontsize, "uniformoutput", false);
     set (h, {"fontsize"}, fontsize_2x);
     local_drawnow (["postscript eps " gp_opts], epsfile, opts);
   unwind_protect_cleanup
     set (h, {"fontsize"}, fontsize);
   end_unwind_protect
 endfunction
 
 function local_drawnow (term, file, opts)
diff --git a/scripts/plot/private/__line__.m b/scripts/plot/private/__line__.m
--- a/scripts/plot/private/__line__.m
+++ b/scripts/plot/private/__line__.m
@@ -108,17 +108,16 @@ function h = __line__ (p, varargin)
   mask = reshape ([false(1,3); ismat], [1, 6]);
 
   for i = 1:nlines
     tmp = data(ismat);
     if (! size_equal (tmp)
         || (nvecpts != 0 && any (nvecpts != cellfun ("size", tmp, 1))))
       error ("line: data size_mismatch");
     endif
-
     data_args(mask) = cellfun (@(x) x(:,i), data(ismat),
                                "uniformoutput", false);
 
     handles(i) = __go_line__ (p, data_args{:}, other_args{:});
 
   endfor
 
   if (nargout > 0)
diff --git a/scripts/plot/private/__patch__.m b/scripts/plot/private/__patch__.m
--- a/scripts/plot/private/__patch__.m
+++ b/scripts/plot/private/__patch__.m
@@ -205,23 +205,24 @@ function [h, failed] = __patch__ (p, var
 
     addlistener (h, "faces", @update_fvc);
     addlistener (h, "vertices", @update_fvc);
     addlistener (h, "facevertexcdata", @update_fvc);
   endif
 endfunction
 
 function args = delfields (args, flds)
-  idx = cellfun (@(x) any (strcmpi (x, flds)), args);
+  idx = cellfun ("isclass", args, "char");
+  idx(idx) = ismember (args(idx), flds);
   if (rows (idx) == 1)
-    idx = idx | [false, idx(1:end-1)];
+    idx |= [false, idx(1:end-1)];
   else
-    idx = idx | [false; idx(1:end-1)];
+    idx |= [false; idx(1:end-1)];
   endif
-  args (idx) = [];
+  args(idx) = [];
 endfunction
 
 function args = setdata (args)
   args = delfields (args, {"xdata", "ydata", "zdata", "cdata"});
   ## Remove the readonly fields as well
   args = delfields (args, {"type", "uicontextmenu"});
   nargs = length (args);
   idx = find (strcmpi (args, "faces"), 1, "last") + 1;
diff --git a/scripts/plot/struct2hdl.m b/scripts/plot/struct2hdl.m
--- a/scripts/plot/struct2hdl.m
+++ b/scripts/plot/struct2hdl.m
@@ -88,17 +88,17 @@ function [h, pout] = struct2hdl (s, p=[]
   endif
   ## read parent (last column) in p and remove it if duplicate
   par = p(2,end);
   tst = find (p(2,:) == par);
   if (numel (tst) > 1)
     p = p(1:2, 1:(tst(end)-1));
   endif
 
-  ## Place the "*mode" properties as the end to avoid having the updaters
+  ## Place the "*mode" properties at the end to avoid having the updaters
   ## change the mode to "manual" when the value is "auto".
   names = fieldnames (s.properties);
   n = strncmp (cellfun (@fliplr, names, "uniformoutput", false), "edom", 4);
   n = (n | strcmp (names, "activepositionproperty"));
   names = [names(!n); names(n)];
   if (strcmp (s.type, "axes"))
     n_pos = find (strcmp (names, "position") | strcmp (names, "outerposition"));
     if (strcmp (s.properties.activepositionproperty, "position"))
@@ -625,17 +625,17 @@ function out = valcomp (x, hdls)
     out = 0;
   endif
 endfunction
 
 function addmissingprops (h, props)
   hid = {"autopos_tag", "looseinset"};
   oldfields = fieldnames (props);
   curfields = fieldnames (get (h));
-  missing = cellfun (@(x) !any (strcmp (x, curfields)), oldfields);
+  missing = ! ismember (oldfields, curfields);
   idx = find (missing);
   for ii = 1:length (idx)
     prop = oldfields{idx(ii)};
     if (! any (strcmp (prop, hid)))
       addproperty (prop, h, "any");
     endif
   endfor
 endfunction
diff --git a/scripts/polynomial/splinefit.m b/scripts/polynomial/splinefit.m
--- a/scripts/polynomial/splinefit.m
+++ b/scripts/polynomial/splinefit.m
@@ -89,17 +89,17 @@
 ## @end group
 ## @end example
 ##
 ## @seealso{interp1, unmkpp, ppval, spline, pchip, ppder, ppint, ppjumps}
 ## @end deftypefn
 
 function pp = splinefit (x, y, breaks, varargin)
   if (nargin > 3)
-    n = cellfun (@ischar, varargin, "uniformoutput", true);
+    n = cellfun ("isclass", varargin, "char");
     varargin(n) = lower (varargin(n));
     try
       props = struct (varargin{:});
     catch
       print_usage ();
     end_try_catch
   else
     props = struct ();
diff --git a/scripts/special-matrix/gallery.m b/scripts/special-matrix/gallery.m
--- a/scripts/special-matrix/gallery.m
+++ b/scripts/special-matrix/gallery.m
@@ -2459,17 +2459,17 @@ function P = toeppen (n, a = 1, b = -10,
   ##           H. Rutishauser, On test matrices, Programmation en Mathematiques
   ##              Numeriques, Editions Centre Nat. Recherche Sci., Paris, 165,
   ##              1966, pp. 349-365.
 
   if (nargin < 1 || nargin > 6)
     error ("gallery: 1 to 6 arguments are required for toeppen matrix.");
   elseif (! isnumeric (n) || ! isscalar (n) || fix (n) != n)
     error ("gallery: N must be a numeric integer for toeppen matrix.");
-  elseif (any (cellfun (@(x) ! isnumeric (x) || ! isscalar (x), {a b c d e})))
+  elseif (any (! cellfun ("isnumeric", {a b c d e})) || any (cellfun ("numel", {a b c d e}) != 1))
     error ("gallery: A, B, C, D and E must be numeric scalars for toeppen matrix.");
   endif
 
   P = spdiags ([a*ones(n,1) b*ones(n,1) c*ones(n,1) d*ones(n,1) e*ones(n,1)],
                 -2:2, n, n);
 endfunction
 
 function T = tridiag (n, x = -1, y = 2, z = -1)
diff --git a/scripts/strings/strsplit.m b/scripts/strings/strsplit.m
--- a/scripts/strings/strsplit.m
+++ b/scripts/strings/strsplit.m
@@ -182,17 +182,17 @@ function [result, matches] = strsplit (s
   endif
 
   if (strncmpi (args.delimitertype, "simple", length_deltype))
     if (iscellstr (del))
       del = cellfun (@do_string_escapes, del, "uniformoutput", false);
     else
       del = do_string_escapes (del);
     endif
-    % This is clumsy, but needed for multi-row strings
+    ## This is clumsy, but needed for multi-row strings
     del = regexprep (del, '([^\w])', '\\$1');
   endif
 
   if (isempty (str))
     result = {str};
   elseif (strncmpi (args.delimitertype, "regularexpression", length_deltype)
           || strncmpi (args.delimitertype, "simple", length_deltype))
     if (iscellstr (del))
diff --git a/scripts/strings/untabify.m b/scripts/strings/untabify.m
--- a/scripts/strings/untabify.m
+++ b/scripts/strings/untabify.m
@@ -56,17 +56,17 @@ function s = untabify (t, tw = 8, dblank
     print_usage ();
   elseif (! (ischar (t) || iscellstr (t)))
     error ("untabify: T must be a string or cellstring");
   endif
 
   if (ischar (t))
     s = replace_tabs (t, tw);
   else
-    s = cellfun (@(str) replace_tabs (str, tw), t, "uniformoutput", false);
+    s = cellfun (@replace_tabs, t, {tw}, "uniformoutput", false);
   endif
 
   if (dblank)
     s = deblank (s);
   endif
 
 endfunction
 
diff --git a/scripts/testfun/__run_test_suite__.m b/scripts/testfun/__run_test_suite__.m
--- a/scripts/testfun/__run_test_suite__.m
+++ b/scripts/testfun/__run_test_suite__.m
@@ -252,17 +252,17 @@ function [dp, dn, dxf, dsk] = run_test_s
         files_with_no_tests(end+1) = f;
       endif
     endif
   endfor 
   ##  printf("%s%s -> passes %d of %d tests\n", ident, d, dp, dn);
 endfunction
 
 function n = num_elts_matching_pattern (lst, pat)
-  n = sum (cellfun (@(x) !isempty (x), regexp (lst, pat, 'once')));
+  n = sum (! cellfun ("isempty", regexp (lst, pat, 'once')));
 endfunction
 
 function report_files_with_no_tests (with, without, typ)
   pat = ['\' typ "$"];
   n_with = num_elts_matching_pattern (with, pat);
   n_without = num_elts_matching_pattern (without, pat);
   n_tot = n_with + n_without;
   printf ("\n%d (of %d) %s files have no tests.\n", n_without, n_tot, typ);
diff --git a/scripts/ui/inputdlg.m b/scripts/ui/inputdlg.m
--- a/scripts/ui/inputdlg.m
+++ b/scripts/ui/inputdlg.m
@@ -61,17 +61,17 @@
 function cstr = inputdlg (prompt, title = "Input Dialog", varargin)
 
   if (nargin < 1 || nargin > 4)
     print_usage ();
   endif
 
   if (iscell (prompt))
     ## Silently extract only char elements
-    prompt = prompt(cellfun ("ischar", prompt));
+    prompt = prompt(cellfun ("isclass", prompt, "char"));
   elseif (ischar (prompt))
     prompt = {prompt};
   else
     error ("inputdlg: PROMPT must be a character string or cellstr array");
   endif
 
   if (! ischar (title))
     error ("inputdlg: TITLE must be a character string");
