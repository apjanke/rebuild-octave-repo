# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1548881316 -3600
#      Wed Jan 30 21:48:36 2019 +0100
# Branch stable
# Node ID 5d1f413ff746b5ba27a4beebb4166a24d999db20
# Parent  c942659a57e63a1c50f6b8b5a76b4b9363d64d75
adapt initial window sizes to the screen resolution (bug #55498)

* main-window.cc (display_release_notes): size of release not window is
  computed based on screen size;
  (display_community_news): same for community news;
  (set_window_layout): same for the whole main window

* welcome-wizard.cc (welcome_wizard): same for the welcome wizard

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -556,20 +556,20 @@ namespace octave
         browser->document ()->adjustSize ();
 
         // center the window on the screen where octave is running
         QDesktopWidget *m_desktop = QApplication::desktop ();
         int screen = m_desktop->screenNumber (this);  // screen of the main window
         QRect screen_geo = m_desktop->availableGeometry (screen);
         int win_x = screen_geo.width ();        // width of the screen
         int win_y = screen_geo.height ();       // height of the screen
-        int reln_x = std::min (720, win_x-80);  // desired width of release notes
-        int reln_y = std::min (740, win_y-80);  // desired height of release notes
+        int reln_x = win_x*2/5;  // desired width of release notes
+        int reln_y = win_y*2/3;  // desired height of release notes
         m_release_notes_window->resize (reln_x, reln_y);  // set size
-        m_release_notes_window->move (20, 0);     // move to the top left corner
+        m_release_notes_window->move (20, 20);     // move to the top left corner
       }
 
     if (! m_release_notes_window->isVisible ())
       m_release_notes_window->show ();
     else if (m_release_notes_window->isMinimized ())
       m_release_notes_window->showNormal ();
 
     m_release_notes_window->setWindowIcon (QIcon (m_release_notes_icon));
@@ -633,18 +633,18 @@ namespace octave
         m_community_news_window->setWindowTitle (tr ("Octave Community News"));
 
         // center the window on the screen where octave is running
         QDesktopWidget *m_desktop = QApplication::desktop ();
         int screen = m_desktop->screenNumber (this);  // screen of the main window
         QRect screen_geo = m_desktop->availableGeometry (screen);
         int win_x = screen_geo.width ();        // width of the screen
         int win_y = screen_geo.height ();       // height of the screen
-        int news_x = std::min (640, win_x-80);  // desired width of news window
-        int news_y = std::min (480, win_y-80);  // desired height of news window
+        int news_x = win_x/2;  // desired width of news window
+        int news_y = win_y/2;  // desired height of news window
         m_community_news_window->resize (news_x, news_y);  // set size and center
         m_community_news_window->move ((win_x - m_community_news_window->width ())/2,
                                        (win_y - m_community_news_window->height ())/2);
       }
     else
       {
         // Window already exists, just update the browser contents
         QTextBrowser *browser
@@ -1339,16 +1339,25 @@ namespace octave
               }
           }
       }
 
     if (! settings)
       {
         restoreGeometry (mw_geometry.def.toByteArray ());
         restoreState (mw_state.def.toByteArray ());
+
+        QDesktopWidget *m_desktop = QApplication::desktop ();
+        int screen = m_desktop->screenNumber (this);  // screen of the main window
+        QRect screen_geo = m_desktop->availableGeometry (screen);
+
+        int win_x = screen_geo.width ();        // width of the screen
+        int win_y = screen_geo.height ();       // height of the screen
+
+        resize (std::max (width (), 2*win_x/3), std::max (height (), 7*win_y/8));
       }
 
     show ();
   }
 
   void main_window::write_settings (void)
   {
     QSettings *settings = resource_manager::get_settings ();
diff --git a/libgui/src/welcome-wizard.cc b/libgui/src/welcome-wizard.cc
--- a/libgui/src/welcome-wizard.cc
+++ b/libgui/src/welcome-wizard.cc
@@ -21,16 +21,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <QApplication>
+#include <QDesktopWidget>
 #include <QPushButton>
 #include <QHBoxLayout>
 #include <QVBoxLayout>
 
 #if defined (OCTAVE_USE_WINDOWS_API)
   #define WIN32_LEAN_AND_MEAN
   #include <windows.h>
 #endif
@@ -58,18 +59,28 @@ namespace octave
     m_page_ctor_list.push_back (setup_community_news::create);
     m_page_ctor_list.push_back (final_page::create);
 
     m_page_list_iterator = m_page_ctor_list.begin ();
 
     setWindowTitle (tr ("Welcome to GNU Octave"));
 
     setEnabled (true);
-    resize (600, 480);
-    setMinimumSize (QSize (600, 480));
+
+    QDesktopWidget *m_desktop = QApplication::desktop ();
+    int screen = m_desktop->screenNumber (this);  // screen of the main window
+    QRect screen_geo = m_desktop->availableGeometry (screen);
+
+    int win_x = screen_geo.width ();        // width of the screen
+    int win_y = screen_geo.height ();       // height of the screen
+    int ww_x = std::max (win_x/2, 600);    // desired width
+    int ww_y = std::max (win_y*2/3, 480);  // desired height
+
+    resize (ww_x, ww_y);
+    setMinimumSize (QSize (ww_x, ww_y));
 
     show_page ();
 
 #if defined (OCTAVE_USE_WINDOWS_API)
     // HACK to forceshow of dialog if started minimized
     ShowWindow (reinterpret_cast<HWND> (winId ()), SW_SHOWNORMAL);
 #endif
   }
