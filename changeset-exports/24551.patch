# HG changeset patch
# User Rik <rik@octave.org>
# Date 1515388299 28800
#      Sun Jan 07 21:11:39 2018 -0800
# Node ID a7b6502b5cb5a70f9561f74fb2566f8cd8e70a53
# Parent  966c3283a164413dd4bfcc650ff89e0fdd7d0942
doc: Add @ref from graphic object creation functions to list of graphic properties (bug #52816).

* uimenu.m, image.m, text.m, light.m, line.m, patch.m, surface.m, axes.m,
figure.m: Add @ref from graphic object creation functions to list of graphic
properties (bug #52816).

diff --git a/scripts/gui/uimenu.m b/scripts/gui/uimenu.m
--- a/scripts/gui/uimenu.m
+++ b/scripts/gui/uimenu.m
@@ -57,16 +57,19 @@
 ## lowest value is at the first position starting from left or top.
 ##
 ## @item @qcode{"separator"}
 ## Can be set @qcode{"on"} or @qcode{"off"}.  If enabled it draws a separator
 ## line above the current position.  It is ignored for top level entries.
 ##
 ## @end table
 ##
+## The full list of properties is documented at
+## @ref{Uimenu Properties,,Uimenu Properties}.
+##
 ## Examples:
 ##
 ## @example
 ## @group
 ## f = uimenu ("label", "&File", "accelerator", "f");
 ## e = uimenu ("label", "&Edit", "accelerator", "e");
 ## uimenu (f, "label", "Close", "accelerator", "q", ...
 ##            "callback", "close (gcf)");
diff --git a/scripts/image/image.m b/scripts/image/image.m
--- a/scripts/image/image.m
+++ b/scripts/image/image.m
@@ -48,16 +48,19 @@
 ## using, for example, @code{flipud (ydata)}.
 ##
 ## Calling Forms: The @code{image} function can be called in two forms:
 ## High-Level and Low-Level.  When invoked with normal options, the High-Level
 ## form is used which first calls @code{newplot} to prepare the graphic figure
 ## and axes.  When the only inputs to @code{image} are property/value pairs
 ## the Low-Level form is used which creates a new instance of an image object
 ## and inserts it in the current axes.
+##
+## Graphic Properties: The full list of properties is documented at
+## @ref{Image Properties,,Image Properties}.
 ## @seealso{imshow, imagesc, colormap}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
 function h = image (varargin)
diff --git a/scripts/plot/appearance/text.m b/scripts/plot/appearance/text.m
--- a/scripts/plot/appearance/text.m
+++ b/scripts/plot/appearance/text.m
@@ -28,16 +28,19 @@
 ## vectors.  Multiple strings can be specified with a character matrix or
 ## a cell array of strings.
 ##
 ## Optional property/value pairs may be used to control the appearance of the
 ## text.
 ##
 ## The optional return value @var{h} is a vector of graphics handles to the
 ## created text objects.
+##
+## Programming Note: The full list of properties is documented at
+## @ref{Text Properties,,Text Properties}.
 ## @seealso{gtext, title, xlabel, ylabel, zlabel}
 ## @end deftypefn
 
 ## Author: jwe
 
 ## Note: The following code is rigged for Matlab compatibility and is
 ##       full of hidden assumptions.  Be very wary when modifying.
 
diff --git a/scripts/plot/draw/light.m b/scripts/plot/draw/light.m
--- a/scripts/plot/draw/light.m
+++ b/scripts/plot/draw/light.m
@@ -54,16 +54,18 @@
 ## @end table
 ##
 ## If the first argument @var{hax} is an axes handle, then add the light object
 ## to this axes, rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created light
 ## object.
 ##
+## Programming Note: The full list of properties is documented at
+## @ref{Light Properties,,Light Properties}.
 ## @seealso{lighting, material, patch, surface}
 ## @end deftypefn
 
 ## Author: mmuetzel
 
 function h = light (varargin)
 
   [hax, varargin] = __plt_get_axis_arg__ ("light", varargin{:});
diff --git a/scripts/plot/draw/line.m b/scripts/plot/draw/line.m
--- a/scripts/plot/draw/line.m
+++ b/scripts/plot/draw/line.m
@@ -32,16 +32,18 @@
 ## must appear in pairs.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle (or vector of
 ## handles) to the line objects created.
 ##
+## Programming Note: The full list of properties is documented at
+## @ref{Line Properties,,Line Properties}.
 ## @seealso{image, patch, rectangle, surface, text}
 ## @end deftypefn
 
 ## Author: jwe
 
 function h = line (varargin)
 
   ## Get axis argument which may be in a 'parent' PROP/VAL pair
diff --git a/scripts/plot/draw/patch.m b/scripts/plot/draw/patch.m
--- a/scripts/plot/draw/patch.m
+++ b/scripts/plot/draw/patch.m
@@ -59,21 +59,20 @@
 ## structure @var{propstruct} with the respective field names.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created patch
 ## object.
 ##
-## Implementation Note: Patches are highly configurable objects.  To truly
-## customize them requires setting patch properties directly
-## (@pxref{Patch Properties}).  Useful patch properties include: @qcode{"cdata"},
-## @qcode{"edgecolor"}, @qcode{"facecolor"}, @qcode{"faces"},
-## @qcode{"facevertexcdata"}.
+## Programming Note: The full list of properties is documented at
+## @ref{Patch Properties,,Patch Properties}.  Useful patch properties include:
+## @qcode{"cdata"}, @qcode{"edgecolor"}, @qcode{"facecolor"}, @qcode{"faces"},
+## and @qcode{"facevertexcdata"}.
 ## @seealso{fill, get, set}
 ## @end deftypefn
 
 ## Author: jwe
 
 function h = patch (varargin)
 
   [hax, varargin] = __plt_get_axis_arg__ ("patch", varargin{:});
diff --git a/scripts/plot/draw/surface.m b/scripts/plot/draw/surface.m
--- a/scripts/plot/draw/surface.m
+++ b/scripts/plot/draw/surface.m
@@ -30,24 +30,26 @@
 ##
 ## If @var{x} and @var{y} are vectors, then a typical vertex is
 ## (@var{x}(j), @var{y}(i), @var{z}(i,j)).  Thus, columns of @var{z} correspond
 ## to different @var{x} values and rows of @var{z} correspond to different
 ## @var{y} values.  If only a single input @var{z} is given then @var{x} is
 ## taken to be @code{1:columns (@var{z})} and @var{y} is
 ## @code{1:rows (@var{z})}.
 ##
-## Any property/value input pairs are assigned to the surface object
-## (@pxref{Surface Properties}).
+## Any property/value input pairs are assigned to the surface object.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created
 ## surface object.
+##
+## Programming Note: The full list of properties is documented at
+## @ref{Surface Properties,,Surface Properties}.
 ## @seealso{surf, mesh, patch, line}
 ## @end deftypefn
 
 ## Author: jwe
 
 function h = surface (varargin)
 
   [hax, varargin] = __plt_get_axis_arg__ ("surface", varargin{:});
diff --git a/scripts/plot/util/axes.m b/scripts/plot/util/axes.m
--- a/scripts/plot/util/axes.m
+++ b/scripts/plot/util/axes.m
@@ -20,28 +20,29 @@
 ## @deftypefn  {} {} axes ()
 ## @deftypefnx {} {} axes (@var{property}, @var{value}, @dots{})
 ## @deftypefnx {} {} axes (@var{hax})
 ## @deftypefnx {} {@var{h} =} axes (@dots{})
 ## Create a Cartesian axes object and return a handle to it, or set the current
 ## axes to @var{hax}.
 ##
 ## Called without any arguments, or with @var{property}/@var{value} pairs,
-## construct a new axes.  For accepted properties and corresponding values,
-## @pxref{XREFset,,set}.
+## construct a new axes.
 ##
 ## Called with a single axes handle argument @var{hax}, the function makes
 ## @var{hax} the current axes (as returned by @code{gca}).  It also makes
 ## the figure which contains @var{hax} the current figure (as returned by
 ## @code{gcf}).  Finally, it restacks the parent object's @code{children}
 ## property so that the axes @var{hax} appears before all other axes handles
 ## in the list.  This causes @var{hax} to be displayed on top of any other axes
 ## objects (Z-order stacking).  In addition it restacks any legend or colorbar
 ## objects associated with @var{hax} so that they are also visible.
 ##
+## Programming Note: The full list of properties is documented at
+## @ref{Axes Properties,,Axes Properties}.
 ## @seealso{gca, set, get}
 ## @end deftypefn
 
 ## Author: jwe
 
 function h = axes (varargin)
 
   if (nargin == 0 || nargin > 1)
diff --git a/scripts/plot/util/figure.m b/scripts/plot/util/figure.m
--- a/scripts/plot/util/figure.m
+++ b/scripts/plot/util/figure.m
@@ -31,16 +31,19 @@
 ## a new figure with the specified number is created.  If the figure already
 ## exists then it is made visible and becomes the current figure for plotting.
 ##
 ## Multiple property-value pairs may be specified for the figure object, but
 ## they must appear in pairs.
 ##
 ## The optional return value @var{h} is a graphics handle to the created figure
 ## object.
+##
+## Programming Note: The full list of properties is documented at
+## @ref{Figure Properties,,Figure Properties}.
 ## @seealso{axes, gcf, clf, close}
 ## @end deftypefn
 
 ## Author: jwe, Bill Denney
 
 function h = figure (varargin)
 
   nargs = nargin;
