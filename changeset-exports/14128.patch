# HG changeset patch
# User Elias Pipping <pipping@exherbo.org>
# Date 1325443882 18000
#      Sun Jan 01 13:51:22 2012 -0500
# Branch stable
# Node ID 6258e5cd0f5667df95cdfd52778e119815492ddb
# Parent  b5e819930fd50d20704ad63b0530da81fddc7e0b
Use typename keyword to refer to templates

* DiagArray2.h: Disambiguate a template declaration with typename
* intNDArray.h: Ditto

diff --git a/liboctave/DiagArray2.h b/liboctave/DiagArray2.h
--- a/liboctave/DiagArray2.h
+++ b/liboctave/DiagArray2.h
@@ -38,17 +38,17 @@ template <class T>
 class
 DiagArray2 : protected Array<T>
 {
 protected:
   octave_idx_type d1, d2;
 
 public:
 
-  using Array<T>::element_type;
+  using typename Array<T>::element_type;
 
   DiagArray2 (void)
     : Array<T> (), d1 (0), d2 (0) { }
 
   DiagArray2 (octave_idx_type r, octave_idx_type c)
     : Array<T> (dim_vector (std::min (r, c), 1)), d1 (r), d2 (c) { }
 
   DiagArray2 (octave_idx_type r, octave_idx_type c, const T& val)
diff --git a/liboctave/intNDArray.h b/liboctave/intNDArray.h
--- a/liboctave/intNDArray.h
+++ b/liboctave/intNDArray.h
@@ -28,17 +28,17 @@ along with Octave; see the file COPYING.
 class NDArray;
 
 template <class T>
 class
 intNDArray : public MArray<T>
 {
 public:
 
-  using MArray<T>::element_type;
+  using typename MArray<T>::element_type;
 
   intNDArray (void) : MArray<T> () { }
 
   intNDArray (T val) : MArray<T> (dim_vector (1, 1), val) { }
 
   intNDArray (const dim_vector& dv) : MArray<T> (dv) { }
 
   intNDArray (const dim_vector& dv, T val)
