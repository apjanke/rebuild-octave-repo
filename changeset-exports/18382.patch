# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1390619849 18000
#      Fri Jan 24 22:17:29 2014 -0500
# Node ID 6e334411152245fa545e411b92be912653af5964
# Parent  b48391da83fcad3a875084dc91d89a469d541e27
Implement subsasgn overloading in classdef

* ov-classdef.cc (octave_classdef::subsasgn): Look for overloaded
method "subsasgn" when not in a class method or a builtin call.
* ov-classdef.h (to_cdef, to_cdef_ref): Turn warning into error when
the casted object is not of type "object".

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -954,19 +954,55 @@ octave_classdef::subsref (const std::str
   return retval.length () > 0 ? retval(0) : octave_value ();
 }
 
 octave_value
 octave_classdef::subsasgn (const std::string& type,
                            const std::list<octave_value_list>& idx,
                            const octave_value& rhs)
 {
-  // FIXME: should check "subsasgn" method first
-
-  return object.subsasgn (type, idx, rhs);
+  octave_value retval;
+
+  cdef_class cls = object.get_class ();
+
+  if (! in_class_method (cls) && ! called_from_builtin ())
+    {
+      cdef_method meth = cls.find_method ("subsasgn");
+
+      if (meth.ok ())
+        {
+          octave_value_list args;
+
+          args(1) = make_idx_args (type, idx, "subsasgn");
+
+          if (! error_state)
+            {
+              count++;
+              args(0) = octave_value (this);
+              args(2) = rhs;
+
+              octave_value_list retlist;
+
+              retlist = meth.execute (args, 1, true, "subsasgn");
+
+              if (! error_state)
+                {
+                  if (retlist.length () > 0)
+                    retval = retlist(0);
+                  else
+                    ::error ("overloaded method `subsasgn' did not return any value");
+                }
+            }
+        }
+    }
+
+  if (! error_state && ! retval.is_defined ())
+    retval = object.subsasgn (type, idx, rhs);
+
+  return retval;
 }
 
 octave_value
 octave_classdef::undef_subsasgn (const std::string& type,
                                  const std::list<octave_value_list>& idx,
                                  const octave_value& rhs)
 {
   if (type.length () == 1 && type[0] == '(')
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -1495,31 +1495,31 @@ to_ov (const octave_value& ov)
 
 inline cdef_object
 to_cdef (const octave_value& val)
 {
   if (val.type_name () == "object")
     return dynamic_cast<octave_classdef *> (val.internal_rep ())->get_object ();
   else
     {
-      warning ("trying to cast non-object into object");
+      error ("cannot convert `%s' into `object'", val.type_name().c_str ());
       return cdef_object ();
     }
 }
 
 inline cdef_object&
 to_cdef_ref (octave_value& val)
 {
   static cdef_object empty;
 
   if (val.type_name () == "object")
     return dynamic_cast<octave_classdef *> (val.internal_rep ())->get_object_ref ();
   else
     {
-      warning ("trying to cast non-object into object");
+      error ("cannot convert `%s' into `object'", val.type_name().c_str ());
       return empty;
     }
 }
 
 inline cdef_object
 to_cdef (const cdef_object& obj)
 { return obj; }
 
