# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1530644760 -7200
#      Tue Jul 03 21:06:00 2018 +0200
# Node ID d6050ba12c0c564ca51e509ae2ea2ae896f8f35e
# Parent  2b9a30925a9cc20e6a939fd27606f793c9a0c909
Call get_ASCII_filename for std::ifstream (bug #49118).

* debug.cc, dlmread.cc, help.cc, load-save.cc, urlwrite.cc, ov-java.cc,
fileinfo.cc, url-transfer.cc: Call get_ASCII_filename for filename argument of
std::ifstream to circumvent the wide char WinAPI.

diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -40,16 +40,17 @@ along with Octave; see the file COPYING.
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "file-ops.h"
 #include "help.h"
 #include "input.h"
 #include "interpreter-private.h"
 #include "interpreter.h"
+#include "lo-sysdep.h"
 #include "octave-preserve-stream-state.h"
 #include "ov-usr-fcn.h"
 #include "ov.h"
 #include "ovl.h"
 #include "pager.h"
 #include "parse.h"
 #include "pt-eval.h"
 #include "unwind-prot.h"
@@ -588,17 +589,17 @@ static void
 do_dbtype (std::ostream& os, const std::string& name, int start, int end)
 {
   std::string ff = fcn_file_in_path (name);
 
   if (ff.empty ())
     os << "dbtype: unknown function " << name << "\n";
   else
     {
-      std::ifstream fs (ff.c_str (), std::ios::in);
+      std::ifstream fs (octave::sys::get_ASCII_filename (ff).c_str (), std::ios::in);
 
       if (! fs)
         os << "dbtype: unable to open '" << ff << "' for reading!\n";
       else
         {
           int line = 1;
           std::string text;
 
diff --git a/libinterp/corefcn/dlmread.cc b/libinterp/corefcn/dlmread.cc
--- a/libinterp/corefcn/dlmread.cc
+++ b/libinterp/corefcn/dlmread.cc
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <cctype>
 #include <fstream>
 #include <limits>
 
 #include "file-ops.h"
 #include "lo-ieee.h"
+#include "lo-sysdep.h"
 
 #include "defun.h"
 #include "interpreter.h"
 #include "oct-stream.h"
 #include "error.h"
 #include "ovl.h"
 #include "utils.h"
 
@@ -215,17 +216,17 @@ such as text, are also replaced by the @
     {
       // Filename.
       std::string fname (args(0).string_value ());
 
       std::string tname = octave::sys::file_ops::tilde_expand (fname);
 
       tname = find_data_file_in_load_path ("dlmread", tname);
 
-      input_file.open (tname.c_str (), std::ios::in);
+      input_file.open (octave::sys::get_ASCII_filename (tname).c_str (), std::ios::in);
 
       if (! input_file)
         error ("dlmread: unable to open file '%s'", fname.c_str ());
 
       input = &input_file;
     }
   else if (args(0).is_scalar_type ())
     {
diff --git a/libinterp/corefcn/help.cc b/libinterp/corefcn/help.cc
--- a/libinterp/corefcn/help.cc
+++ b/libinterp/corefcn/help.cc
@@ -32,16 +32,17 @@ along with Octave; see the file COPYING.
 #include <istream>
 #include <map>
 #include <sstream>
 #include <string>
 
 #include "cmd-edit.h"
 #include "file-ops.h"
 #include "file-stat.h"
+#include "lo-sysdep.h"
 #include "oct-env.h"
 #include "oct-locbuf.h"
 #include "str-vec.h"
 
 #include "Cell.h"
 #include "builtin-defun-decls.h"
 #include "call-stack.h"
 #include "defaults.h"
@@ -576,18 +577,19 @@ namespace octave
     symbol_found = false;
 
     // FIXME: Should we cache the timestamp of the file and reload the
     // offsets if it changes?  Or just warn about that?  Or just ignore
     // it, and assume it won't change?
 
     if (! initialized)
       {
-        std::ifstream file (m_built_in_docstrings_file.c_str (),
-                            std::ios::in | std::ios::binary);
+        std::ifstream file (
+          octave::sys::get_ASCII_filename (m_built_in_docstrings_file).c_str (),
+          std::ios::in | std::ios::binary);
 
         if (! file)
           error ("failed to open docstrings file: %s",
                  m_built_in_docstrings_file.c_str ());
 
         // Ignore header;
         file.ignore (std::numeric_limits<std::streamsize>::max(), 0x1d);
 
@@ -659,18 +661,19 @@ namespace octave
 
     if (it != help_txt_map.end ())
       {
         txt_limits_type txt_limits = it->second;
 
         std::streampos beg = txt_limits.first;
         std::streamoff len = txt_limits.second;
 
-        std::ifstream file (m_built_in_docstrings_file.c_str (),
-                            std::ios::in | std::ios::binary);
+        std::ifstream file (
+          octave::sys::get_ASCII_filename (m_built_in_docstrings_file).c_str (),
+          std::ios::in | std::ios::binary);
 
         if (! file)
           error ("failed to open docstrings file: %s",
                  m_built_in_docstrings_file.c_str ());
 
         file.seekg (beg);
 
         size_t txt_len = len;
diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -221,17 +221,18 @@ read_binary_file_header (std::istream& i
 }
 
 #if defined (HAVE_ZLIB)
 static bool
 check_gzip_magic (const std::string& fname)
 {
   bool retval = false;
 
-  std::ifstream file (fname.c_str (), std::ios::in | std::ios::binary);
+  std::ifstream file (octave::sys::get_ASCII_filename (fname).c_str (),
+                      std::ios::in | std::ios::binary);
 
   unsigned char magic[2];
   if (file.read (reinterpret_cast<char *> (&magic[0]), 2)
       && magic[0] == 0x1f && magic[1] == 0x8b)
     retval = true;
 
   file.close ();
 
@@ -321,17 +322,18 @@ get_file_format (const std::string& fnam
 #if defined (HAVE_ZLIB)
   use_zlib = check_gzip_magic (fname);
 #else
   use_zlib = false;
 #endif
 
   if (! use_zlib)
     {
-      std::ifstream file (fname.c_str (), std::ios::in | std::ios::binary);
+      std::ifstream file (octave::sys::get_ASCII_filename (fname).c_str (),
+                          std::ios::in | std::ios::binary);
       if (file)
         {
           retval = get_file_format (file, orig_fname);
           file.close ();
         }
       else if (! quiet)
         err_file_open ("load", orig_fname);
     }
@@ -829,17 +831,18 @@ Force Octave to assume the file is in Oc
                                 flt_fmt, list_only, swap, verbose,
                                 argv, i, argc, nargout);
 
               file.close ();
             }
           else
 #endif
             {
-              std::ifstream file (fname.c_str (), mode);
+              std::ifstream file (
+                octave::sys::get_ASCII_filename (fname).c_str (), mode);
 
               if (! file)
                 error ("load: unable to open input file '%s'",
                        orig_fname.c_str ());
 
               if (format == LS_BINARY)
                 {
                   if (read_binary_file_header (file, swap, flt_fmt) < 0)
diff --git a/libinterp/corefcn/urlwrite.cc b/libinterp/corefcn/urlwrite.cc
--- a/libinterp/corefcn/urlwrite.cc
+++ b/libinterp/corefcn/urlwrite.cc
@@ -30,16 +30,17 @@ along with Octave; see the file COPYING.
 
 #include <string>
 #include <fstream>
 #include <iomanip>
 
 #include "dir-ops.h"
 #include "file-ops.h"
 #include "file-stat.h"
+#include "lo-sysdep.h"
 #include "oct-env.h"
 #include "oct-handle.h"
 #include "glob-match.h"
 #include "url-transfer.h"
 
 #include "defun.h"
 #include "error.h"
 #include "interpreter.h"
@@ -632,17 +633,18 @@ Undocumented internal function
           file_list.append (url_xfer.mput_directory ("", file));
 
           if (! url_xfer.good ())
             error ("__ftp_mput__: %s", url_xfer.lasterror ().c_str ());
         }
       else
         {
           // FIXME: Does ascii mode need to be flagged here?
-          std::ifstream ifile (file.c_str (), std::ios::in | std::ios::binary);
+          std::ifstream ifile (octave::sys::get_ASCII_filename (file).c_str (),
+                               std::ios::in | std::ios::binary);
 
           if (! ifile.is_open ())
             error ("__ftp_mput__: unable to open file");
 
           url_xfer.put (file, ifile);
 
           ifile.close ();
 
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -48,16 +48,17 @@ along with Octave; see the file COPYING.
 #include "defaults.h"
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "fpucw-wrappers.h"
 #include "load-path.h"
+#include "lo-sysdep.h"
 #include "oct-env.h"
 #include "oct-shlib.h"
 #include "ov-java.h"
 #include "parse.h"
 #include "variables.h"
 
 #if defined (HAVE_JAVA)
 #include <jni.h>
@@ -232,17 +233,17 @@ namespace octave
 
     void add (const std::string& opt)
     {
       java_opts.push_back (opt);
     }
 
     void read_java_opts (const std::string& filename)
     {
-      std::ifstream js (filename.c_str ());
+      std::ifstream js (octave::sys::get_ASCII_filename (filename).c_str ());
 
       if (! js.bad () && ! js.fail ())
         {
           std::string line;
 
           while (! js.eof () && ! js.fail ())
             {
               std::getline (js, line);
@@ -353,17 +354,17 @@ initial_java_dir (void)
 //!   `octave::directory_path::path_sep_str()`.  The returned string also
 //!   starts with that path separator.
 
 static std::string
 read_classpath_txt (const std::string& filepath)
 {
   std::string classpath;
 
-  std::ifstream fs (filepath.c_str ());
+  std::ifstream fs (octave::sys::get_ASCII_filename (filepath).c_str ());
 
   if (! fs.bad () && ! fs.fail ())
     {
       std::string line;
 
       while (! fs.eof () && ! fs.fail ())
         {
           std::getline (fs, line);
diff --git a/liboctave/util/file-info.cc b/liboctave/util/file-info.cc
--- a/liboctave/util/file-info.cc
+++ b/liboctave/util/file-info.cc
@@ -26,16 +26,17 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <deque>
 #include <fstream>
 
 #include "file-info.h"
 #include "file-stat.h"
 #include "lo-error.h"
+#include "lo-sysdep.h"
 
 namespace octave
 {
   std::string file_info::get_line (size_t line) const
   {
     std::string retval;
 
     if (line == 0)
@@ -75,17 +76,18 @@ namespace octave
 
     sys::file_stat fs (fname);
 
     if (! fs)
       (*current_liboctave_error_handler) ("no such file, '%s'", fname.c_str ());
 
     size_t sz = fs.size ();
 
-    std::ifstream file (fname.c_str (), std::ios::in | std::ios::binary);
+    std::ifstream file (octave::sys::get_ASCII_filename (fname).c_str (),
+                        std::ios::in | std::ios::binary);
 
     if (file)
       {
         std::string buf (sz+1, 0);
 
         file.read (&buf[0], sz+1);
 
         if (! file.eof ())
diff --git a/liboctave/util/url-transfer.cc b/liboctave/util/url-transfer.cc
--- a/liboctave/util/url-transfer.cc
+++ b/liboctave/util/url-transfer.cc
@@ -197,18 +197,19 @@ namespace octave
                   file_list.append (mput_directory (realdir, file));
 
                   if (! good ())
                     break;
                 }
               else
                 {
                   // FIXME: Does ascii mode need to be flagged here?
-                  std::ifstream ifile (realfile.c_str (),
-                                       std::ios::in | std::ios::binary);
+                  std::ifstream ifile (
+                    octave::sys::get_ASCII_filename (realfile).c_str (),
+                    std::ios::in | std::ios::binary);
 
                   if (! ifile.is_open ())
                     {
                       ok = false;
                       errmsg = "__ftp_mput__: unable to open file '"
                                + realfile + "'";
                       break;
                     }
