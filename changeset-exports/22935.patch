# HG changeset patch
# User Rik <rik@octave.org>
# Date 1482513976 28800
#      Fri Dec 23 09:26:16 2016 -0800
# Node ID c9344df03da5cf547476a10e5497522f9e753115
# Parent  bb452f84a299dfe7773a889c2217f66e651de57f
Allow case-insensitive option argument 'on' to ode solvers (bug #49918).

* ode15i.m, ode15s.m: Change strcmp to strcmpi for test of odeopts 'Stats.

* ode23.m, ode45.m: Change strcmp to strcmpi for tests of odeopts 'Stats' and
'NormControl'.

diff --git a/scripts/ode/ode15i.m b/scripts/ode/ode15i.m
--- a/scripts/ode/ode15i.m
+++ b/scripts/ode/ode15i.m
@@ -227,20 +227,17 @@ function varargout = ode15i (fun, trange
     error ("Octave:invalid-input-arg",
            [solver ": invalid value assigned to field 'AbsTol'");
 
   elseif (numel (options.AbsTol) == n)
     options.haveabstolvec = true;
   endif
 
   ## Stats
-  options.havestats = false;
-  if (strcmp (options.Stats, "on"))
-    options.havestats = true;
-  endif
+  options.havestats = strcmpi (options.Stats, "on");
 
   ## Don't use Refine when the output is a structure
   if (nargout == 1)
     options.Refine = 1;
   endif
 
   ## OutputFcn and OutputSel
   if (isempty (options.OutputFcn) && nargout == 0)
diff --git a/scripts/ode/ode15s.m b/scripts/ode/ode15s.m
--- a/scripts/ode/ode15s.m
+++ b/scripts/ode/ode15s.m
@@ -283,20 +283,17 @@ function varargout = ode15s (fun, trange
   if (numel (options.AbsTol) != 1 && numel (options.AbsTol) != n)
     error ("Octave:invalid-input-arg",
            [solver ": invalid value assigned to field 'AbsTol'");
   elseif (numel (options.AbsTol) == n)
     options.haveabstolvec = true;
   endif
 
   ## Stats
-  options.havestats = false;
-  if (strcmp (options.Stats, "on"))
-    options.havestats = true;
-  endif
+  options.havestats = strcmpi (options.Stats, "on");
 
   ## Don't use Refine when the output is a structure
   if (nargout == 1)
     options.Refine = 1;
   endif
 
   ## OutputFcn and OutputSel
   if (isempty (options.OutputFcn) && nargout == 0)
diff --git a/scripts/ode/ode23.m b/scripts/ode/ode23.m
--- a/scripts/ode/ode23.m
+++ b/scripts/ode/ode23.m
@@ -146,17 +146,16 @@ function varargout = ode23 (fun, trange,
       warning (lasterr);
     end_try_catch
   endif
   if (! isa (fun, "function_handle"))
     error ("Octave:invalid-input-arg",
            "ode23: FUN must be a valid function handle");
   endif
 
-
   ## Start preprocessing, have a look which options are set in odeopts,
   ## check if an invalid or unused option is set.
   [defaults, classes, attributes] = odedefaults (numel (init),
                                                  trange(1), trange(end));
 
   persistent ode23_ignore_options = ...
     {"BDF", "InitialSlope", "Jacobian", "JPattern",
      "MassSingular", "MaxOrder", "MvPattern", "Vectorized"};
@@ -189,17 +188,17 @@ function varargout = ode23 (fun, trange,
   else
     odeopts.haveoutputfunction = ! isempty (odeopts.OutputFcn);
   endif
 
   if (isempty (odeopts.InitialStep))
     odeopts.InitialStep = odeopts.direction * ...
                           starting_stepsize (order, fun, trange(1), init,
                                              odeopts.AbsTol, odeopts.RelTol,
-                                             strcmp (odeopts.NormControl, "on"),
+                                             strcmpi (odeopts.NormControl, "on"),
                                              odeopts.funarguments);
   endif
 
   if (! isempty (odeopts.Mass) && isnumeric (odeopts.Mass))
     havemasshandle = false;
     mass = odeopts.Mass;    # constant mass
   elseif (isa (odeopts.Mass, "function_handle"))
     havemasshandle = true;  # mass defined by a function handle
@@ -239,17 +238,17 @@ function varargout = ode23 (fun, trange,
     feval (odeopts.OutputFcn, [], [], "done", odeopts.funarguments{:});
   endif
   if (! isempty (odeopts.Events))   # Cleanup event function handling
     ode_event_handler (odeopts.Events, solution.t(end),
                        solution.x(end,:).', "done", odeopts.funarguments{:});
   endif
 
   ## Print additional information if option Stats is set
-  if (strcmp (odeopts.Stats, "on"))
+  if (strcmpi (odeopts.Stats, "on"))
     nsteps    = solution.cntloop;             # cntloop from 2..end
     nfailed   = solution.cntcycles - nsteps;  # cntcycl from 1..end
     nfevals   = 3 * solution.cntcycles + 1;   # number of ode evaluations
     ndecomps  = 0;  # number of LU decompositions
     npds      = 0;  # number of partial derivatives
     nlinsols  = 0;  # no. of solutions of linear systems
 
     printf ("Number of successful steps: %d\n", nsteps);
@@ -264,17 +263,17 @@ function varargout = ode23 (fun, trange,
     varargout{1}.x = solution.t.';   # Time stamps are saved in field x (row vector)
     varargout{1}.y = solution.x.';   # Results are saved in field y (row vector)
     varargout{1}.solver = solver;   # Solver name is saved in field solver
     if (! isempty (odeopts.Events))
       varargout{1}.ie = solution.event{2};  # Index info which event occurred
       varargout{1}.xe = solution.event{3};  # Time info when an event occurred
       varargout{1}.ye = solution.event{4};  # Results when an event occurred
     endif
-    if (strcmp (odeopts.Stats, "on"))
+    if (strcmpi (odeopts.Stats, "on"))
       varargout{1}.stats = struct ();
       varargout{1}.stats.nsteps   = nsteps;
       varargout{1}.stats.nfailed  = nfailed;
       varargout{1}.stats.nfevals  = nfevals;
       varargout{1}.stats.npds     = npds;
       varargout{1}.stats.ndecomps = ndecomps;
       varargout{1}.stats.nlinsols = nlinsols;
     endif
diff --git a/scripts/ode/ode45.m b/scripts/ode/ode45.m
--- a/scripts/ode/ode45.m
+++ b/scripts/ode/ode45.m
@@ -182,17 +182,17 @@ function varargout = ode45 (fun, trange,
   else
     odeopts.haveoutputfunction = ! isempty (odeopts.OutputFcn);
   endif
 
   if (isempty (odeopts.InitialStep))
     odeopts.InitialStep = odeopts.direction * ...
                           starting_stepsize (order, fun, trange(1), init,
                                              odeopts.AbsTol, odeopts.RelTol,
-                                             strcmp (odeopts.NormControl, "on"),
+                                             strcmpi (odeopts.NormControl, "on"),
                                              odeopts.funarguments);
   endif
 
   if (! isempty (odeopts.Mass) && isnumeric (odeopts.Mass))
     havemasshandle = false;
     mass = odeopts.Mass;  # constant mass
   elseif (isa (odeopts.Mass, "function_handle"))
     havemasshandle = true;    # mass defined by a function handle
@@ -232,17 +232,17 @@ function varargout = ode45 (fun, trange,
     feval (odeopts.OutputFcn, [], [], "done", odeopts.funarguments{:});
   endif
   if (! isempty (odeopts.Events))   # Cleanup event function handling
     ode_event_handler (odeopts.Events, solution.t(end),
                        solution.x(end,:).', "done", odeopts.funarguments{:});
   endif
 
   ## Print additional information if option Stats is set
-  if (strcmp (odeopts.Stats, "on"))
+  if (strcmpi (odeopts.Stats, "on"))
     nsteps    = solution.cntloop;             # cntloop from 2..end
     nfailed   = solution.cntcycles - nsteps;  # cntcycl from 1..end
     nfevals   = 6 * solution.cntcycles + 1;   # number of ode evaluations
     ndecomps  = 0;  # number of LU decompositions
     npds      = 0;  # number of partial derivatives
     nlinsols  = 0;  # no. of linear systems solutions
 
     printf ("Number of successful steps: %d\n", nsteps);
@@ -257,17 +257,17 @@ function varargout = ode45 (fun, trange,
     varargout{1}.x = solution.t.';  # Time stamps saved in field x (row vector)
     varargout{1}.y = solution.x.';  # Results are saved in field y (row vector)
     varargout{1}.solver = solver;   # Solver name is saved in field solver
     if (! isempty (odeopts.Events))
       varargout{1}.ie = solution.event{2};  # Index info which event occurred
       varargout{1}.xe = solution.event{3};  # Time info when an event occurred
       varargout{1}.ye = solution.event{4};  # Results when an event occurred
     endif
-    if (strcmp (odeopts.Stats, "on"))
+    if (strcmpi (odeopts.Stats, "on"))
       varargout{1}.stats = struct ();
       varargout{1}.stats.nsteps   = nsteps;
       varargout{1}.stats.nfailed  = nfailed;
       varargout{1}.stats.nfevals  = nfevals;
       varargout{1}.stats.npds     = npds;
       varargout{1}.stats.ndecomps = ndecomps;
       varargout{1}.stats.nlinsols = nlinsols;
     endif
