# HG changeset patch
# User jwe
# Date 1166153053 0
#      Fri Dec 15 03:24:13 2006 +0000
# Node ID 516d3071b34cf13dbc4745ac87f1edaa984698dc
# Parent  4685a6a76229756f7330024d8f307313c6823cb1
[project @ 2006-12-15 03:24:12 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,41 @@
+2006-12-14  John W. Eaton  <jwe@octave.org>
+
+	* pt-decl.cc (tree_decl_elt::eval): New function.
+	* pt-decl.h (tree_decl_elt::eval): Provide decl.
+	(tree_decl_elt::is_defined, tree_decl_elt::lvalue_ok, 
+	tree_decl_elt::mark_as_formal_parameter, tree_decl_elt::rvalue,
+	tree_decl_elt::lvalue): New functions.
+
+	* pt-misc.h (class tree_parameter_list): Derive from
+	octave_base_list<tree_decl_elt *> instead of
+	octave_base_list<tree_identifier *>.
+	(tree_parameter_list::tree_parameter_list (tree_identifier *)): Delete.
+	(tree_parameter_list::tree_parameter_list (tree_decl_elt *)):
+	New function.
+	* pt-misc.cc (tree_parameter_list::mark_as_formal_parameters,
+	tree_parameter_list::initialize_undefined_elements,
+	tree_parameter_list::undefine, tree_parameter_list::dup,
+	tree_parameter_list::convert_to_const_vector,
+	tree_parameter_list::is_defined): Handle argument list elements
+	as tree_decl_list objects instead of tree_identifier objects.
+	(tree_parameter_list::define_from_arg_vector): Likewise.
+	Always process entire list, setting default values if possible.
+	Accept ":" to mean "use default argument".
+
+	* parse.y (param_list2): Use decl2 to recognize
+	"identifier '=' expression" in addition to "identifier".
+
+	* parse.y (return_list1, make_anon_fcn_handle, finish_function):
+	Adapt to new definition of tree_parameter_list.
+	* pt-bp.cc (tree_breakpoint::visit_parameter_list): Likewise.
+	* pt-check.cc (tree_checker::visit_parameter_list): Likewise.
+	* pt-pr-code.cc (tree_print_code::visit_parameter_list): Likewise.
+
 2006-12-08  John W. Eaton  <jwe@octave.org>
 
 	* ov-intx.h (OCTAVE_VALUE_INT_MATRIX_T::array_value, 
 	OCTAVE_VALUE_INT_MATRIX_T::complex_array_value, 
 	OCTAVE_VALUE_INT_MATRIX_T::bool_array_value, 
 	OCTAVE_VALUE_INT_MATRIX_T::char_array_value):
 	Use fortran_vec to avoid expensive indexing operator.
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1160,19 +1160,19 @@ param_list1	: // empty
 		| param_list2 ',' VARARGIN
 		  {
 		    $1->mark_as_formal_parameters ();
 		    $1->mark_varargs ();
 		    $$ = $1;
 		  }
 		;
 
-param_list2	: identifier
+param_list2	: decl2
 		  { $$ = new tree_parameter_list ($1); }
-		| param_list2 ',' identifier
+		| param_list2 ',' decl2
 		  {
 		    $1->append ($3);
 		    $$ = $1;
 		  }
 		;
 
 // ===================================
 // List of function return value names
@@ -1209,20 +1209,20 @@ return_list	: return_list_beg return_lis
 		  {
 		    lexer_flags.looking_at_return_list = false;
 		    $2->mark_varargs ();
 		    $$ = $2;
 		  }
 		;
 
 return_list1	: identifier
-		  { $$ = new tree_parameter_list ($1); }
+		  { $$ = new tree_parameter_list (new tree_decl_elt ($1)); }
 		| return_list1 ',' identifier
 		  {
-		    $1->append ($3);
+		    $1->append (new tree_decl_elt ($3));
 		    $$ = $1;
 		  }
 		;
 
 return_list_end	: function_symtab ']'
 		;
 
 // ===================
@@ -1791,18 +1791,19 @@ make_anon_fcn_handle (tree_parameter_lis
 
       stmt->set_print_flag (false);
 
       // FIXME -- would like to delete old_stmt here or
       // replace expression inside it with the new expression we just
       // created so we don't have to create a new statement at all.
 
       id = new tree_identifier (sr);
-
-      ret_list = new tree_parameter_list (id);
+      tree_decl_elt *elt = new tree_decl_elt (id);
+
+      ret_list = new tree_parameter_list (elt);
     }
 
   tree_statement_list *body = new tree_statement_list (stmt);
 
   body->mark_as_function_body ();
 
   tree_anon_fcn_handle *retval
     = new tree_anon_fcn_handle (param_list, ret_list, body, fcn_sym_tab, l, c);
@@ -2580,17 +2581,19 @@ frob_function (const std::string& fname,
 }
 
 // Finish defining a function.
 
 static octave_user_function *
 finish_function (tree_identifier *id, octave_user_function *fcn,
 		 octave_comment_list *lc)
 {
-  tree_parameter_list *tpl = new tree_parameter_list (id);
+  tree_decl_elt *tmp = new tree_decl_elt (id);
+
+  tree_parameter_list *tpl = new tree_parameter_list (tmp);
 
   tpl->mark_as_formal_parameters ();
 
   fcn->stash_leading_comment (lc);
 
   return fcn->define_ret_list (tpl);
 }
 
diff --git a/src/pt-bp.cc b/src/pt-bp.cc
--- a/src/pt-bp.cc
+++ b/src/pt-bp.cc
@@ -465,17 +465,17 @@ tree_breakpoint::visit_parameter_list (t
 {
   if (found)
     return;
 
   tree_parameter_list::iterator p = lst.begin ();
 
   while (p != lst.end ())
     {
-      tree_identifier *elt = *p++;
+      tree_decl_elt *elt = *p++;
 
       if (elt)
 	elt->accept (*this);
     }
 }
 
 void
 tree_breakpoint::visit_postfix_expression (tree_postfix_expression& expr)
diff --git a/src/pt-check.cc b/src/pt-check.cc
--- a/src/pt-check.cc
+++ b/src/pt-check.cc
@@ -322,17 +322,17 @@ tree_checker::visit_fcn_handle (tree_fcn
 
 void
 tree_checker::visit_parameter_list (tree_parameter_list& lst)
 {
   tree_parameter_list::iterator p = lst.begin ();
 
   while (p != lst.end ())
     {
-      tree_identifier *elt = *p++;
+      tree_decl_elt *elt = *p++;
 
       if (elt)
 	elt->accept (*this);
     }
 }
 
 void
 tree_checker::visit_postfix_expression (tree_postfix_expression& expr)
diff --git a/src/pt-decl.cc b/src/pt-decl.cc
--- a/src/pt-decl.cc
+++ b/src/pt-decl.cc
@@ -40,16 +40,38 @@ 02110-1301, USA.
 // Declarations (global, static, etc.).
 
 tree_decl_elt::~tree_decl_elt (void)
 {
   delete id;
   delete expr;
 }
 
+bool
+tree_decl_elt::eval (void)
+{
+  bool retval = false;
+
+  if (id && expr)
+    {
+      octave_lvalue ult = id->lvalue ();
+
+      octave_value init_val = expr->rvalue ();
+
+      if (! error_state)
+	{
+	  ult.assign (octave_value::op_asn_eq, init_val);
+
+	  retval = true;
+	}
+    }
+
+  return retval;
+}
+
 tree_decl_elt *
 tree_decl_elt::dup (symbol_table *sym_tab)
 {
   return new tree_decl_elt (id ? id->dup (sym_tab) : 0,
 			    expr ? expr->dup (sym_tab) : 0);
 }
 
 void
diff --git a/src/pt-decl.h b/src/pt-decl.h
--- a/src/pt-decl.h
+++ b/src/pt-decl.h
@@ -27,33 +27,54 @@ 02110-1301, USA.
 class tree_expression;
 class tree_identifier;
 
 class tree_walker;
 
 #include <string>
 
 #include "base-list.h"
+#include "oct-lvalue.h"
 #include "pt-cmd.h"
+#include "pt-id.h"
 
 // List of expressions that make up a declaration statement.
 
 class
 tree_decl_elt
 {
 public:
 
   typedef void (*eval_fcn) (tree_decl_elt &);
 
   tree_decl_elt (tree_identifier *i = 0, tree_expression *e = 0)
     : id (i), expr (e) { }
 
   ~tree_decl_elt (void);
 
-  void eval (void);
+  bool eval (void);
+
+  bool is_defined (void) { return id ? id->is_defined () : false; }
+
+  void mark_as_formal_parameter (void)
+  {
+    if (id)
+      id->mark_as_formal_parameter ();
+  }
+
+  bool lvalue_ok (void) { return id ? id->lvalue_ok () : false; }
+
+  octave_value rvalue (void) { return id ? id->rvalue () : octave_value (); }
+
+  octave_value_list rvalue (int nargout)
+  {
+    return id ? id->rvalue (nargout) : octave_value_list ();
+  }
+
+  octave_lvalue lvalue (void) { return id ? id->lvalue () : octave_lvalue (); }
 
   tree_identifier *ident (void) { return id; }
 
   tree_expression *expression (void) { return expr; }
 
   tree_decl_elt *dup (symbol_table *sym_tab);
 
   void accept (tree_walker& tw);
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -49,17 +49,17 @@ tree_parameter_list::~tree_parameter_lis
     }
 }
 
 void
 tree_parameter_list::mark_as_formal_parameters (void)
 {
   for (iterator p = begin (); p != end (); p++)
     {
-      tree_identifier *elt = *p;
+      tree_decl_elt *elt = *p;
       elt->mark_as_formal_parameter ();
     }
 }
 
 void
 tree_parameter_list::initialize_undefined_elements (const std::string& warnfor,
 						    int nargout,
 						    const octave_value& val)
@@ -68,17 +68,17 @@ tree_parameter_list::initialize_undefine
 
   int count = 0;
 
   for (iterator p = begin (); p != end (); p++)
     {
       if (++count > nargout)
 	break;
 
-      tree_identifier *elt = *p;
+      tree_decl_elt *elt = *p;
 
       if (! elt->is_defined ())
 	{
 	  if (! warned)
 	    {
 	      warned = true;
 
 	      warning_with_id
@@ -94,54 +94,54 @@ tree_parameter_list::initialize_undefine
     }
 }
 
 void
 tree_parameter_list::define_from_arg_vector (const octave_value_list& args)
 {
   int nargin = args.length ();
 
-  if (nargin <= 0)
-    return;
-
   int expected_nargin = length ();
 
   iterator p = begin ();
 
   for (int i = 0; i < expected_nargin; i++)
     {
-      tree_identifier *elt = *p++;
+      tree_decl_elt *elt = *p++;
 
       octave_lvalue ref = elt->lvalue ();
 
       if (i < nargin)
 	{
 	  if (args(i).is_defined () && args(i).is_magic_colon ())
 	    {
-	      ::error ("invalid use of colon in function argument list");
-	      return;
+	      if (! elt->eval ())
+		{
+		  ::error ("no default value for argument %d\n", i+1);
+		  return;
+		}
 	    }
-
-	  ref.assign (octave_value::op_asn_eq, args(i));
+	  else
+	    ref.assign (octave_value::op_asn_eq, args(i));
 	}
       else
-	ref.assign (octave_value::op_asn_eq, octave_value ());
+	elt->eval ();
     }
 }
 
 void
 tree_parameter_list::undefine (void)
 {
   int len = length ();
 
   iterator p = begin ();
 
   for (int i = 0; i < len; i++)
     {
-      tree_identifier *elt = *p++;
+      tree_decl_elt *elt = *p++;
 
       octave_lvalue ref = elt->lvalue ();
 
       ref.assign (octave_value::op_asn_eq, octave_value ());
     }
 }
 
 octave_value_list
@@ -152,17 +152,17 @@ tree_parameter_list::convert_to_const_ve
   int nout = length () + vlen;
 
   octave_value_list retval (nout, octave_value ());
 
   int i = 0;
 
   for (iterator p = begin (); p != end (); p++)
     {
-      tree_identifier *elt = *p;
+      tree_decl_elt *elt = *p;
 
       retval(i++) = elt->is_defined () ? elt->rvalue () : octave_value ();
     }
 
   for (octave_idx_type j = 0; j < vlen; j++)
     retval(i++) = varargout(j);
 
   return retval;
@@ -170,17 +170,17 @@ tree_parameter_list::convert_to_const_ve
 
 bool
 tree_parameter_list::is_defined (void)
 {
   bool status = true;
 
   for (iterator p = begin (); p != end (); p++)
     {
-      tree_identifier *elt = *p;
+      tree_decl_elt *elt = *p;
 
       if (! elt->is_defined ())
 	{
 	  status = false;
 	  break;
 	}
     }
 
@@ -192,17 +192,17 @@ tree_parameter_list::dup (symbol_table *
 {
   tree_parameter_list *new_list = new tree_parameter_list ();
 
   if (takes_varargs ())
     new_list->mark_varargs ();
 
   for (iterator p = begin (); p != end (); p++)
     {
-      tree_identifier *elt = *p;
+      tree_decl_elt *elt = *p;
 
       new_list->append (elt->dup (sym_tab));
     }
 
   return new_list;
 }
 
 void
diff --git a/src/pt-misc.h b/src/pt-misc.h
--- a/src/pt-misc.h
+++ b/src/pt-misc.h
@@ -31,30 +31,31 @@ class octave_value_list;
 
 class tree_identifier;
 class tree_index_expression;
 class tree_va_return_list;
 
 class tree_walker;
 
 #include "base-list.h"
+#include "pt-decl.h"
 
 // Parameter lists.  Used to hold the list of input and output
 // parameters in a function definition.  Elements are identifiers
 // only.
 
 class
-tree_parameter_list : public octave_base_list<tree_identifier *>
+tree_parameter_list : public octave_base_list<tree_decl_elt *>
 {
 public:
 
   tree_parameter_list (void)
     : marked_for_varargs (0) { }
 
-  tree_parameter_list (tree_identifier *t)
+  tree_parameter_list (tree_decl_elt *t)
     : marked_for_varargs (0) { append (t); }
 
   ~tree_parameter_list (void);
 
   void mark_as_formal_parameters (void);
 
   void mark_varargs (void) { marked_for_varargs = 1; }
 
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -716,17 +716,17 @@ tree_print_code::visit_fcn_handle (tree_
 
 void
 tree_print_code::visit_parameter_list (tree_parameter_list& lst)
 {
   tree_parameter_list::iterator p = lst.begin ();
 
   while (p != lst.end ())
     {
-      tree_identifier *elt = *p++;
+      tree_decl_elt *elt = *p++;
 
       if (elt)
 	{
 	  elt->accept (*this);
 
 	  if (p != lst.end ())
 	    os << ", ";
 	}
