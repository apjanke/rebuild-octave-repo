# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1546446081 -3600
#      Wed Jan 02 17:21:21 2019 +0100
# Branch stable
# Node ID bf835b1d04b1756819fc8e247c2c20b529b972f8
# Parent  bdf03ab385c2212b8d82924b9220eb32e5ee83da
Don't use C++ callbacks to notify position changes from Qt figures (bug #48519)

* Figure.cc (Figure::updateBoundingBox): Use gh_manager::post_set to trigger
  the figure (outer)position change.

* graphics.h/cc (figure::properties::bbox2position): New public method.
  (figure::properties::set_boundingbox): Make use of bbox2position.
  (set_event::m_redraw_figure): New data member.
  (set_event::set_event, gh_manager::post_set): New signature including
  redraw_figure argument. Change set_event calls accordingly.
  (set_event::execute): For figure position and outerposition properties,
  directly call figure::properties::set_xxx instead of xxx::set. Redraw figure
  if necessary.

diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -290,30 +290,30 @@ namespace QtHandles
   {
     if (m_mouseModeGroup)
       {
         m_blockUpdates = true;
         m_mouseModeGroup->setMode (mouseMode ());
         m_blockUpdates = false;
       }
   }
-  
+
   void
   Figure::set_geometry (QRect r)
   {
     QMainWindow *win = qWidget<QMainWindow> ();
-    
+
     if (! m_resizable)
       {
         win->setSizePolicy (QSizePolicy::Preferred, QSizePolicy::Preferred);
         win->setFixedSize (QSize( QWIDGETSIZE_MAX, QWIDGETSIZE_MAX));
       }
 
     win->setGeometry (r);
-    
+
     if (! m_resizable)
       {
         win->setSizePolicy (QSizePolicy::Fixed, QSizePolicy::Fixed);
         win->setFixedSize(win->size ());
       }
   }
 
   Container*
@@ -323,20 +323,17 @@ namespace QtHandles
   }
 
   void
   Figure::redraw (void)
   {
     Canvas *canvas = m_container->canvas (m_handle);
 
     if (canvas)
-      {
-        canvas->redraw ();
-        //canvas->setMouseMode (RotateMode);
-      }
+      canvas->redraw ();
 
     foreach (QFrame *frame,
              qWidget<QWidget> ()->findChildren<QFrame*> ())
       {
         if (frame->objectName () == "UIPanel"
             || frame->objectName () == "UIButtonGroup")
           {
             Object *obj = Object::fromQObject (frame);
@@ -591,44 +588,25 @@ namespace QtHandles
   {
     Matrix m_bbox;
     bool m_internal;
     graphics_handle m_handle;
     Figure *m_figure;
   };
 
   void
-  Figure::updateBoundingBoxHelper (void *data)
-  {
-    gh_manager::auto_lock lock;
-
-    UpdateBoundingBoxData *d = reinterpret_cast<UpdateBoundingBoxData *> (data);
-    graphics_object go = gh_manager::get_object (d->m_handle);
-
-    if (go.valid_object ())
-      {
-        figure::properties& fp = Utils::properties<figure> (go);
-
-        fp.set_boundingbox (d->m_bbox, d->m_internal, false);
-
-        if (d->m_internal)
-          emit d->m_figure->asyncUpdate ();
-      }
-
-    delete d;
-  }
-
-  void
   Figure::updateBoundingBox (bool internal, int flags)
   {
     QWidget *win = qWidget<QWidget> ();
     Matrix bb (1, 4);
+    std::string prop;
 
     if (internal)
       {
+        prop = "position";
         QRect r = m_innerRect;
 
         if (flags & UpdateBoundingBoxPosition)
           r.moveTopLeft (win->mapToGlobal (m_container->pos ()));
         if (flags & UpdateBoundingBoxSize)
           r.setSize (m_container->size ());
 
         if (r.isValid () && r != m_innerRect)
@@ -640,16 +618,17 @@ namespace QtHandles
             bb(2) = r.width ();
             bb(3) = r.height ();
           }
         else
           return;
       }
     else
       {
+        prop = "outerposition";
         QRect r = m_outerRect;
 
         if (flags & UpdateBoundingBoxPosition)
           r.moveTopLeft (win->pos ());
         if (flags & UpdateBoundingBoxSize)
           r.setSize (win->frameGeometry ().size ());
 
         if (r.isValid () && r != m_outerRect)
@@ -660,24 +639,20 @@ namespace QtHandles
             bb(1) = r.y ();
             bb(2) = r.width ();
             bb(3) = r.height ();
           }
         else
           return;
       }
 
-    UpdateBoundingBoxData *d = new UpdateBoundingBoxData ();
+    figure::properties& fp = properties<figure> ();
 
-    d->m_bbox = bb;
-    d->m_internal = internal;
-    d->m_handle = m_handle;
-    d->m_figure = this;
-
-    gh_manager::post_function (Figure::updateBoundingBoxHelper, d);
+    gh_manager::post_set (m_handle, prop, fp.bbox2position (bb), false,
+                          prop == "position");
   }
 
   void
   Figure::close_figure_callback (void)
   {
     figure::properties& fp = properties<figure> ();
     octave_value fnum = fp.get___myhandle__ ().as_octave_value ();
 
diff --git a/libgui/graphics/Figure.h b/libgui/graphics/Figure.h
--- a/libgui/graphics/Figure.h
+++ b/libgui/graphics/Figure.h
@@ -103,18 +103,16 @@ namespace QtHandles
   private:
     void createFigureToolBarAndMenuBar (void);
     void showFigureToolBar (bool visible);
     void addCustomToolBar (QToolBar *bar, bool visible);
     void showCustomToolBar (QToolBar *bar, bool visible);
     void updateFigureToolBarAndMenuBar (void);
     void set_geometry (QRect r);
 
-    static void updateBoundingBoxHelper (void*);
-
     void close_figure_callback (void);
 
     void enableMouseTracking (void);
 
   private slots:
     void setMouseMode (MouseMode mode);
     void updateFigureHeight (int delta_h);
     void updateContainer (void);
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -4076,27 +4076,35 @@ figure::properties::get_boundingbox (boo
 
   pos(0)--;
   pos(1)--;
   pos(1) = screen_size(1) - pos(1) - pos(3);
 
   return pos;
 }
 
-void
-figure::properties::set_boundingbox (const Matrix& bb, bool internal,
-                                     bool do_notify_toolkit)
+Matrix
+figure::properties::bbox2position (const Matrix& bb) const
 {
   Matrix screen_size = screen_size_pixels ();
   Matrix pos = bb;
 
   pos(1) = screen_size(1) - pos(1) - pos(3);
   pos(1)++;
   pos(0)++;
   pos = convert_position (pos, "pixels", get_units (), screen_size);
+  return pos;
+}
+
+void
+figure::properties::set_boundingbox (const Matrix& bb, bool internal,
+                                     bool do_notify_toolkit)
+{
+  Matrix screen_size = screen_size_pixels ();
+  Matrix pos = bbox2position (bb);
 
   if (internal)
     set_position (pos, do_notify_toolkit);
   else
     set_outerposition (pos, do_notify_toolkit);
 }
 
 Matrix
@@ -11383,45 +11391,83 @@ private:
   void *function_data;
 };
 
 class
 set_event : public base_graphics_event
 {
 public:
   set_event (const graphics_handle& h, const std::string& name,
-             const octave_value& value, bool do_notify_toolkit = true)
+             const octave_value& value, bool do_notify_toolkit = true,
+             bool redraw_figure = false)
     : base_graphics_event (), handle (h), property_name (name),
-      property_value (value), notify_toolkit (do_notify_toolkit) { }
+      property_value (value), notify_toolkit (do_notify_toolkit),
+      m_redraw_figure (redraw_figure)
+  { }
 
   void execute (void)
   {
     gh_manager::auto_lock guard;
 
     graphics_object go = gh_manager::get_object (handle);
 
     if (go)
       {
         property p = go.get_properties ().get_property (property_name);
 
         if (p.ok ())
-          p.set (property_value, true, notify_toolkit);
+          {
+            // FIXME: figure position and outerposition properties set_xxx have
+            // a signature that allows passing the notify_toolkit argument.
+            // Should we change all set_xxx signatures and allow
+            // base_properties::set to accept this also? This would allow for
+            // the use of high level set_xxx instead of directly changing the
+            // property value.
+            if (go.isa ("figure") && property_name == "position")
+              {
+                figure::properties& fprops
+                  = dynamic_cast<figure::properties&> (go.get_properties ());
+                fprops.set_position (property_value, notify_toolkit);
+              }
+            else if (go.isa ("figure") && property_name == "outerposition")
+              {
+                figure::properties& fprops
+                  = dynamic_cast<figure::properties&> (go.get_properties ());
+                fprops.set_outerposition (property_value, notify_toolkit);
+              }
+            else
+              p.set (property_value, true, notify_toolkit);
+
+            if (m_redraw_figure)
+              {
+                if (! go.isa ("figure"))
+                  go = go.get_ancestor ("figure");
+
+                if (go.valid_object ())
+                  {
+                    figure::properties& fprops
+                      = dynamic_cast<figure::properties&> (go.get_properties ());
+                    fprops.get_toolkit ().redraw_figure (go);
+                  }
+              }
+          }
       }
   }
 
 private:
   set_event (void)
     : base_graphics_event (), handle (), property_name (), property_value ()
   { }
 
 private:
   graphics_handle handle;
   std::string property_name;
   octave_value property_value;
   bool notify_toolkit;
+  bool m_redraw_figure;
 };
 
 graphics_event
 graphics_event::create_callback_event (const graphics_handle& h,
                                        const std::string& name,
                                        const octave_value& data,
                                        int busyaction)
 {
@@ -11443,19 +11489,20 @@ graphics_event::create_function_event (g
 {
   return graphics_event (new function_event (fcn, data));
 }
 
 graphics_event
 graphics_event::create_set_event (const graphics_handle& h,
                                   const std::string& name,
                                   const octave_value& data,
-                                  bool notify_toolkit)
-{
-  return graphics_event (new set_event (h, name, data, notify_toolkit));
+                                  bool notify_toolkit, bool redraw_figure)
+{
+  return graphics_event (new set_event (h, name, data, notify_toolkit,
+                                        redraw_figure));
 }
 
 static void
 xset_gcbo (const graphics_handle& h)
 {
   graphics_object go = gh_manager::get_object (0);
   root_figure::properties& props =
     dynamic_cast<root_figure::properties&> (go.get_properties ());
@@ -11640,22 +11687,24 @@ gh_manager::do_post_function (graphics_e
 {
   gh_manager::auto_lock guard;
 
   do_post_event (graphics_event::create_function_event (fcn, fcn_data));
 }
 
 void
 gh_manager::do_post_set (const graphics_handle& h, const std::string& name,
-                         const octave_value& value, bool notify_toolkit)
+                         const octave_value& value, bool notify_toolkit,
+                         bool redraw_figure)
 {
   gh_manager::auto_lock guard;
 
   do_post_event (graphics_event::create_set_event (h, name, value,
-                                                   notify_toolkit));
+                                                   notify_toolkit,
+                                                   redraw_figure));
 }
 
 int
 gh_manager::do_process_events (bool force)
 {
   graphics_event e;
   bool old_Vdrawnow_requested = Vdrawnow_requested;
   bool events_executed = false;
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -3086,16 +3086,18 @@ public:
     void adopt (const graphics_handle& h);
 
     void set_position (const octave_value& val,
                        bool do_notify_toolkit = true);
 
     void set_outerposition (const octave_value& val,
                             bool do_notify_toolkit = true);
 
+    Matrix bbox2position (const Matrix& bbox) const;
+
     Matrix get_boundingbox (bool internal = false,
                             const Matrix& parent_pix_size = Matrix ()) const;
 
     void set_boundingbox (const Matrix& bb, bool internal = false,
                           bool do_notify_toolkit = true);
 
     Matrix map_from_boundingbox (double x, double y) const;
 
@@ -3884,17 +3886,17 @@ public:
     void update_tickdirmode (void) { update_ticklength (); }
 
     void update_ticklabelinterpreter (void)
     {
       update_xtick ();
       update_ytick ();
       update_ztick ();
     }
-    
+
     void update_xtick (void)
     {
       calc_ticks_and_lims (xlim, xtick, xminortickvalues, xlimmode.is ("auto"),
                            xtickmode.is ("auto"), xscale.is ("log"));
       if (xticklabelmode.is ("auto"))
         calc_ticklabels (xtick, xticklabel, xscale.is ("log"),
                          xaxislocation_is ("origin"),
                          yscale.is ("log") ? 2 :
@@ -6158,18 +6160,18 @@ public:
                          const octave_value& data = Matrix (),
                          int busyaction = base_graphics_event::QUEUE);
 
   static graphics_event
   create_function_event (event_fcn fcn, void *data = nullptr);
 
   static graphics_event
   create_set_event (const graphics_handle& h, const std::string& name,
-                    const octave_value& value,
-                    bool notify_toolkit = true);
+                    const octave_value& value, bool notify_toolkit = true,
+                    bool redraw_figure = false);
 private:
 
   std::shared_ptr <base_graphics_event> rep;
 };
 
 class OCTINTERP_API gh_manager
 {
 protected:
@@ -6352,20 +6354,21 @@ public:
 
   static void post_function (graphics_event::event_fcn fcn, void *data = nullptr)
   {
     if (instance_ok ())
       instance->do_post_function (fcn, data);
   }
 
   static void post_set (const graphics_handle& h, const std::string& name,
-                        const octave_value& value, bool notify_toolkit = true)
+                        const octave_value& value, bool notify_toolkit = true,
+                        bool redraw_figure = false)
   {
     if (instance_ok ())
-      instance->do_post_set (h, name, value, notify_toolkit);
+      instance->do_post_set (h, name, value, notify_toolkit, redraw_figure);
   }
 
   static int process_events (void)
   {
     return (instance_ok () ?  instance->do_process_events () : 0);
   }
 
   static int flush_events (void)
@@ -6547,17 +6550,18 @@ private:
                             const octave_value& data);
 
   void do_post_callback (const graphics_handle& h, const std::string& name,
                          const octave_value& data);
 
   void do_post_function (graphics_event::event_fcn fcn, void *fcn_data);
 
   void do_post_set (const graphics_handle& h, const std::string& name,
-                    const octave_value& value, bool notify_toolkit = true);
+                    const octave_value& value, bool notify_toolkit = true,
+                    bool redraw_figure = false);
 
   int do_process_events (bool force = false);
 
   void do_close_all_figures (void);
 
   static void restore_gcbo (void)
   {
     if (instance_ok ())
