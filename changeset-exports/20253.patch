# HG changeset patch
# User Rik <rik@octave.org>
# Date 1433893073 25200
#      Tue Jun 09 16:37:53 2015 -0700
# Node ID 0d94ec291ee65b11d7b71bea1111349271e50b44
# Parent  b93a155dc2005418aba962123e9eaf53379b9c7c
# Parent  7fa170cc14fec67c0ef9d96eef2ae8faca77793c
maint: Periodic merge of stable to default.

diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -396,24 +396,24 @@ zoom_direction (const graphics_object fi
 }
 
 void
 Canvas::canvasMouseMoveEvent (QMouseEvent* event)
 {
   gh_manager::auto_lock lock;
   graphics_object ax = gh_manager::get_object (m_mouseAxes);
 
-  if (m_mouseMode != NoMode && ax.valid_object ())
+  if (m_mouseMode != NoMode && (ax.valid_object () || m_mouseMode == TextMode))
     {
-      axes::properties& ap = Utils::properties<axes> (ax);
-
       switch (m_mouseMode)
         {
         case RotateMode:
           {
+            axes::properties& ap = Utils::properties<axes> (ax);
+
             ap.rotate3d (m_mouseCurrent.x (), event->x (),
                          m_mouseCurrent.y (), event->y ());
 
             // Update current mouse position
             m_mouseCurrent = event->pos ();
 
             // Force immediate redraw
             redraw (true);
@@ -423,16 +423,18 @@ Canvas::canvasMouseMoveEvent (QMouseEven
         case ZoomInMode:
         case ZoomOutMode:
           m_mouseCurrent = event->pos ();
           redraw (true);
           break;
 
         case PanMode:
           {
+            axes::properties& ap = Utils::properties<axes> (ax);
+
             graphics_object figObj (ax.get_ancestor ("figure"));
 
             std::string mode = pan_mode (figObj);
 
             ColumnVector p0 = ap.pixel2coord (m_mouseCurrent.x (),
                                               m_mouseCurrent.y ());
             ColumnVector p1 = ap.pixel2coord (event->x (),
                                               event->y ());
@@ -612,17 +614,16 @@ Canvas::canvasMousePressEvent (QMouseEve
         case TextMode:
           {
             if (event->modifiers () == Qt::NoModifier)
               {
                 switch (event->buttons ())
                   {
                   case Qt::LeftButton:
                     m_mouseAnchor = m_mouseCurrent = event->pos ();
-                    m_mouseAxes = axesObj.get_handle ();
                     m_mouseMode = newMouseMode;
                     m_rectMode = true;
                   }
               }
             redraw (false);
           }
           break;
 
@@ -789,23 +790,24 @@ Canvas::canvasMouseReleaseEvent (QMouseE
           if (w)
             {
               Matrix bb = figObj.get ("position").matrix_value ();
               bb(0) = m_mouseAnchor.x () / bb(2);
               bb(1) = 1.0 - (m_mouseAnchor.y () / bb(3));
               bb(2) = (event->x () - m_mouseAnchor.x ()) / bb(2);
               bb(3) = (m_mouseAnchor.y () - event->y ()) / bb(3);
 
-              octave_value_list props = ovl("textbox", bb);
+              octave_value_list props = ovl ("textbox", bb);
 
               annotation_dialog anno_dlg (w, props);
 
               if (anno_dlg.exec () == QDialog::Accepted)
                 {
                   props = anno_dlg.get_properties ();
+                  props.prepend (figObj.get_handle ().as_octave_value ());
 
                   octave_link::post_event (this, &Canvas::annotation_callback,
                                            props);
                 }
             }
         }
     }
   m_rectMode = false;
diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -808,35 +808,36 @@ Figure::fileSaveFigure (bool prompt)
       octave_link::post_event (this, &Figure::save_figure_callback,
                                file.toStdString ());
     }
 }
 
 void
 Figure::save_figure_callback (const std::string& file)
 {
-  Ffeval (ovl ("print", file));
+  figure::properties& fp = properties<figure> ();
+  octave_value fnum = fp.get___myhandle__ ().as_octave_value ();
+
+  Ffeval (ovl ("print", fnum, file));
 }
 
 void
 Figure::copy_figure_callback (const std::string& format)
 {
   std::string msg;
 
   std::string file = octave_tempnam ("", "oct-", msg) + "." + format;
 
   if (file.empty ())
     {
       // Report error?
       return;
     }
 
-  std::string device = "-d" + format;
-
-  Ffeval (ovl ("print", file, device));
+  save_figure_callback (file);
 
   octave_link::copy_image_to_clipboard (file);
 }
 
 void
 Figure::fileSaveFigureAs (void)
 {
   fileSaveFigure (true);
diff --git a/libgui/graphics/annotation-dialog.cc b/libgui/graphics/annotation-dialog.cc
--- a/libgui/graphics/annotation-dialog.cc
+++ b/libgui/graphics/annotation-dialog.cc
@@ -48,17 +48,18 @@ annotation_dialog::annotation_dialog (QW
 void
 annotation_dialog::init ()
 {
   ui->setupUi (this);
 
   QSettings *settings = resource_manager::get_settings ();
 
   // restore last geometry
-  restoreGeometry (settings->value("annotation/geometry").toByteArray ());
+  if (settings)
+    restoreGeometry (settings->value("annotation/geometry").toByteArray ());
 
   // connect signals
   connect (ui->button_box, SIGNAL (clicked (QAbstractButton *)),
            this, SLOT (button_clicked (QAbstractButton *)));
 
 
   connect (ui->edit_string, SIGNAL (textChanged (const QString&)),
            this, SLOT (edit_string_changed (const QString&)));
@@ -91,17 +92,18 @@ annotation_dialog::~annotation_dialog ()
 void
 annotation_dialog::button_clicked (QAbstractButton *button)
 {
   QDialogButtonBox::ButtonRole button_role = ui->button_box->buttonRole (button);
 
   QSettings *settings = resource_manager::get_settings ();
 
   // save position
-  settings->setValue ("annotation/geometry",saveGeometry ());
+  if (settings)
+    settings->setValue ("annotation/geometry",saveGeometry ());
 
   if (button_role == QDialogButtonBox::ApplyRole ||
       button_role == QDialogButtonBox::AcceptRole)
     {
       get_gui_props ();
     }
 
   if (button_role == QDialogButtonBox::RejectRole ||
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -1497,16 +1497,20 @@ main_window::construct_octave_qt_link (v
   _octave_qt_link = new octave_qt_link (this);
 
   connect (_octave_qt_link, SIGNAL (exit_app_signal (int)),
            this, SLOT (exit_app (int)));
 
   connect (_octave_qt_link, SIGNAL (confirm_shutdown_signal ()),
            this, SLOT (confirm_shutdown_octave ()));
 
+  connect (_octave_qt_link,
+           SIGNAL (copy_image_to_clipboard_signal (const QString&, bool)),
+           this, SLOT (copy_image_to_clipboard (const QString&, bool)));
+
   if (_start_gui)
     {
       connect (_octave_qt_link,
                SIGNAL (set_workspace_signal
                        (bool, bool, const QString&, const QStringList&,
                         const QStringList&, const QStringList&,
                         const QStringList&, const QIntList&)),
                _workspace_model,
@@ -1546,20 +1550,16 @@ main_window::construct_octave_qt_link (v
 
       connect (_octave_qt_link, SIGNAL (exit_debugger_signal ()),
                this, SLOT (handle_exit_debugger ()));
 
       connect (_octave_qt_link,
                SIGNAL (show_preferences_signal (void)),
                this, SLOT (process_settings_dialog_request ()));
 
-      connect (_octave_qt_link,
-               SIGNAL (copy_image_to_clipboard_signal (const QString&, bool)),
-               this, SLOT (copy_image_to_clipboard (const QString&, bool)));
-
 #ifdef HAVE_QSCINTILLA
       connect (_octave_qt_link,
                SIGNAL (edit_file_signal (const QString&)),
                editor_window,
                SLOT (handle_edit_file_request (const QString&)));
 #endif
 
       connect (_octave_qt_link,
diff --git a/libgui/src/octave-gui.cc b/libgui/src/octave-gui.cc
--- a/libgui/src/octave-gui.cc
+++ b/libgui/src/octave-gui.cc
@@ -117,45 +117,47 @@ octave_start_gui (int argc, char *argv[]
   QApplication application (argc, argv);
   QTranslator gui_tr, qt_tr, qsci_tr;
 
   // Set the codec for all strings (before wizard)
 #if ! defined (Q_OS_WIN32)
   QTextCodec::setCodecForCStrings (QTextCodec::codecForName ("UTF-8"));
 #endif
 
+  // show wizard if this is the first run
+  if (resource_manager::is_first_run ())
+    {
+      // before wizard
+      resource_manager::config_translators (&qt_tr, &qsci_tr, &gui_tr);
+      application.installTranslator (&qt_tr);
+      application.installTranslator (&gui_tr);
+      if (start_gui)
+        application.installTranslator (&qsci_tr);
+
+      welcome_wizard welcomeWizard;
+
+      if (welcomeWizard.exec () == QDialog::Rejected)
+        exit (1);
+
+      resource_manager::reload_settings ();  // install settings file
+    }
+  else
+    {
+      resource_manager::reload_settings ();  // get settings file
+
+      // after settings
+      resource_manager::config_translators (&qt_tr, &qsci_tr, &gui_tr);
+      application.installTranslator (&qt_tr);
+      application.installTranslator (&gui_tr);
+      if (start_gui)
+        application.installTranslator (&qsci_tr);
+    }
+
   if (start_gui)
     {
-      // show wizard if this is the first run
-      if (resource_manager::is_first_run ())
-        {
-          // before wizard
-          resource_manager::config_translators (&qt_tr, &qsci_tr, &gui_tr);
-          application.installTranslator (&qt_tr);
-          application.installTranslator (&qsci_tr);
-          application.installTranslator (&gui_tr);
-
-          welcome_wizard welcomeWizard;
-
-          if (welcomeWizard.exec () == QDialog::Rejected)
-            exit (1);
-
-          resource_manager::reload_settings ();  // install settings file
-        }
-      else
-        {
-          resource_manager::reload_settings ();  // get settings file
-
-          // after settings
-          resource_manager::config_translators (&qt_tr, &qsci_tr, &gui_tr);
-          application.installTranslator (&qt_tr);
-          application.installTranslator (&qsci_tr);
-          application.installTranslator (&gui_tr);
-        }
-
       // update network-settings
       resource_manager::update_network_settings ();
 
 #if ! defined (__WIN32__) || defined (__CYGWIN__)
       // If we were started from a launcher, TERM might not be
       // defined, but we provide a terminal with xterm
       // capabilities.
 
@@ -173,20 +175,20 @@ octave_start_gui (int argc, char *argv[]
       // shortcut manager
       shortcut_manager::init_data ();
     }
 
   // Create and show main window.
 
   main_window w (0, start_gui);
 
-  w.read_settings ();
-
   if (start_gui)
     {
+      w.read_settings ();
+
       w.init_terminal_size ();
 
       // Connect signals for changes in visibility not before w
       // is shown.
 
       w.connect_visibility_changed ();
 
       w.focus_command_window ();
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -2430,17 +2430,17 @@ is_nan_or_inf (const octave_value& val)
 }
 
 static bool
 ok_for_signed_int_conv (const octave_value& val)
 {
   uint64_t limit = std::numeric_limits<int64_t>::max ();
 
   if (val.is_string ())
-    return false;
+    return true;
   else if (val.is_integer_type ())
     {
       if (val.is_uint64_type ())
         {
           octave_uint64 ival = val.uint64_scalar_value ();
 
           if (ival.value () <= limit)
             return true;
@@ -2458,17 +2458,17 @@ ok_for_signed_int_conv (const octave_val
 
   return false;
 }
 
 static bool
 ok_for_unsigned_int_conv (const octave_value& val)
 {
   if (val.is_string ())
-    return false;
+    return true;
   else if (val.is_integer_type ())
     {
       // Easier than dispatching here...
 
       octave_value ov_is_ge_zero
         = do_binary_op (octave_value::op_ge, val, octave_value (0.0));
 
       return ov_is_ge_zero.is_true ();
diff --git a/libinterp/octave-value/ov-ch-mat.cc b/libinterp/octave-value/ov-ch-mat.cc
--- a/libinterp/octave-value/ov-ch-mat.cc
+++ b/libinterp/octave-value/ov-ch-mat.cc
@@ -82,16 +82,52 @@ octave_char_matrix::float_value (bool) c
       retval = static_cast<unsigned char> (matrix (0, 0));
     }
   else
     gripe_invalid_conversion ("character matrix", "real scalar");
 
   return retval;
 }
 
+octave_int64
+octave_char_matrix::int64_scalar_value () const
+{
+  octave_int64 retval = 0;
+
+  if (rows () > 0 && columns () > 0)
+    {
+      gripe_implicit_conversion ("Octave:array-to-scalar",
+                                 "character matrix", "int64 scalar");
+
+      retval = octave_int64 (matrix (0, 0));
+    }
+  else
+    gripe_invalid_conversion ("character matrix", "int64 scalar");
+
+  return retval;
+}
+
+octave_uint64
+octave_char_matrix::uint64_scalar_value () const
+{
+  octave_uint64 retval = 0;
+
+  if (rows () > 0 && columns () > 0)
+    {
+      gripe_implicit_conversion ("Octave:array-to-scalar",
+                                 "character matrix", "uint64 scalar");
+
+      retval = octave_uint64 (matrix (0, 0));
+    }
+  else
+    gripe_invalid_conversion ("character matrix", "uint64 scalar");
+
+  return retval;
+}
+
 Complex
 octave_char_matrix::complex_value (bool) const
 {
   double tmp = lo_ieee_nan_value ();
 
   Complex retval (tmp, tmp);
 
   if (rows () > 0 && columns () > 0)
diff --git a/libinterp/octave-value/ov-ch-mat.h b/libinterp/octave-value/ov-ch-mat.h
--- a/libinterp/octave-value/ov-ch-mat.h
+++ b/libinterp/octave-value/ov-ch-mat.h
@@ -31,16 +31,17 @@ along with Octave; see the file COPYING.
 
 #include "mx-base.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "ov.h"
 #include "ov-base.h"
 #include "ov-base-mat.h"
+#include "ov-int64.h"
 #include "ov-re-mat.h"
 #include "ov-typeinfo.h"
 
 class octave_value_list;
 
 class tree_walker;
 
 // Character matrix values.
@@ -100,16 +101,19 @@ public:
   float float_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
   { return double_value (frc_str_conv); }
 
   float float_scalar_value (bool frc_str_conv = false) const
   { return float_value (frc_str_conv); }
 
+  octave_int64 int64_scalar_value () const;
+  octave_uint64 uint64_scalar_value () const;
+
   Matrix matrix_value (bool = false) const
   { return Matrix (charMatrix (matrix)); }
 
   FloatMatrix float_matrix_value (bool = false) const
   { return FloatMatrix (charMatrix (matrix)); }
 
   NDArray array_value (bool = false) const
   { return NDArray (matrix); }
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1291,17 +1291,18 @@ unbox (JNIEnv* jni_env, const octave_val
           const JAVA_TYPE* jv = reinterpret_cast<const JAVA_TYPE*> (v.data ()); \
           jni_env->Set ## JAVA_TYPE_CAP ## ArrayRegion (jarr, 0, v.numel (), jv); \
           jobj = reinterpret_cast<jobject> (jarr); \
           jcls = jni_env->GetObjectClass (jobj); \
         }
 
       // Note that we do NOT handle char here because they are unboxed
       // into a String[], not into a char array
-           IF_UNBOX_PRIMITIVE_ARRAY(bool,   bool_,   bool,   jboolean, Boolean)
+           IF_UNBOX_PRIMITIVE_ARRAY(double,      ,       ,   jdouble,  Double)
+      else IF_UNBOX_PRIMITIVE_ARRAY(bool,   bool_,   bool,   jboolean, Boolean)
       else IF_UNBOX_PRIMITIVE_ARRAY(float,  float_,  Float,  jfloat,   Float)
       else IF_UNBOX_PRIMITIVE_ARRAY(int8,   int8_,   int8,   jbyte,    Byte)
       else IF_UNBOX_PRIMITIVE_ARRAY(uint8,  uint8_,  uint8,  jbyte,    Byte)
       else IF_UNBOX_PRIMITIVE_ARRAY(int16,  int16_,  int16,  jshort,   Short)
       else IF_UNBOX_PRIMITIVE_ARRAY(uint16, uint16_, uint16, jshort,   Short)
       else IF_UNBOX_PRIMITIVE_ARRAY(int32,  int32_,  int32,  jint,     Int)
       else IF_UNBOX_PRIMITIVE_ARRAY(uint32, uint32_, uint32, jint,     Int)
       else IF_UNBOX_PRIMITIVE_ARRAY(int64,  int64_,  int64,  jlong,    Long)
diff --git a/scripts/linear-algebra/linsolve.m b/scripts/linear-algebra/linsolve.m
--- a/scripts/linear-algebra/linsolve.m
+++ b/scripts/linear-algebra/linsolve.m
@@ -74,22 +74,23 @@ function [x, R] = linsolve (A, b, opts)
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
   if (! (isnumeric (A) && isnumeric (b)))
     error ("linsolve: A and B must be numeric");
   endif
 
+  trans_A = false;
+
   ## Process any opts
   if (nargin > 2)
     if (! isstruct (opts))
       error ("linsolve: OPTS must be a structure");
     endif
-    trans_A = false;
     if (isfield (opts, "TRANSA") && opts.TRANSA)
       trans_A = true;
     endif
     if (isfield (opts, "POSDEF") && opts.POSDEF)
       A = matrix_type (A, "positive definite");
     endif
     if (isfield (opts, "LT") && opts.LT)
       A = matrix_type (A, "lower");
@@ -114,16 +115,24 @@ function [x, R] = linsolve (A, b, opts)
     endif
   endif
 
 endfunction
 
 
 %!test
 %! n = 10;
+%! A = rand (n);
+%! x = rand (n, 1);
+%! b = A * x;
+%! assert (linsolve (A, b), A \ b);
+%! assert (linsolve (A, b, struct ()), A \ b);
+
+%!test
+%! n = 10;
 %! A = triu (gallery ("condex", n));
 %! x = rand (n, 1);
 %! b = A' * x;
 %! opts.UT = true;
 %! opts.TRANSA = true;
 %! assert (linsolve (A, b, opts), A' \ b);
 
 %!error linsolve ()
diff --git a/scripts/miscellaneous/run.m b/scripts/miscellaneous/run.m
--- a/scripts/miscellaneous/run.m
+++ b/scripts/miscellaneous/run.m
@@ -56,17 +56,17 @@ function run (script)
 
   if (! exist (script, "file"))
     error ("run: file SCRIPT must exist and be a valid Octave scriptfile");
   endif
 
   if (! isempty (d))
     if (exist (d, "dir"))
       startdir = pwd ();
-      d = canonicalize_file_name (d);
+      d = make_absolute_filename (d);
       unwind_protect
         cd (d);
         evalin ("caller", sprintf ("source ('%s%s');", f, ext),
                 "rethrow (lasterror ())");
       unwind_protect_cleanup
         if (strcmp (d, pwd ()))
           cd (startdir);
         endif
diff --git a/scripts/signal/fftshift.m b/scripts/signal/fftshift.m
--- a/scripts/signal/fftshift.m
+++ b/scripts/signal/fftshift.m
@@ -47,43 +47,45 @@
 ## Adapted-By: jwe
 
 function retval = fftshift (x, dim)
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
 
+  if (! (isnumeric (x) || islogical (x) || ischar (x)))
+    error ("fftshift: X must be a vector or matrix");
+  endif
+
   if (nargin == 2)
     if (! (isscalar (dim) && dim > 0 && dim == fix (dim)))
       error ("fftshift: dimension DIM must be a positive integer");
     endif
     nd = ndims (x);
     sz = size (x);
     sz2 = ceil (sz(dim) / 2);
     idx = cell ();
     idx = repmat ({':'}, nd, 1);
     idx{dim} = [sz2+1:sz(dim), 1:sz2];
     retval = x(idx{:});
   else
     if (isvector (x))
       xl = length (x);
       xx = ceil (xl/2);
       retval = x([xx+1:xl, 1:xx]);
-    elseif (ismatrix (x))
+    else
       nd = ndims (x);
       sz = size (x);
       sz2 = ceil (sz ./ 2);
       idx = cell ();
       for i = 1:nd
         idx{i} = [sz2(i)+1:sz(i), 1:sz2(i)];
       endfor
       retval = x(idx{:});
-    else
-      error ("fftshift: expecting vector or matrix argument");
     endif
   endif
 
 endfunction
 
 
 %!test
 %! x = [0:7];
@@ -125,8 +127,29 @@ endfunction
 
 %!test
 %! x = [0:3];
 %! x = [x;2*x;3*x+1;4*x+1];
 %! y = fftshift (x,2);
 %! assert (y, [[2 3 0 1];[4 6 0 2];[7 10 1 4];[9 13 1 5]]);
 %! assert (fftshift (y,2), x);
 
+%!test
+%! x = "abcdefg";
+%! y = fftshift (x);
+%! assert (y, "efgabcd");
+%! assert (fftshift (y), "bcdefga");
+
+## Test N-dimensional input (bug #45207)
+%!test
+%! x = [0:3];
+%! x = x + x' + reshape (x, [1 1 4]);
+%! y1 = [4 5 2 3; 5 6 3 4; 2 3 0 1; 3 4 1 2];
+%! y = fftshift (x);
+%! assert (y, reshape ([y1 + 2, y1 + 3, y1, y1 + 1], [4 4 4]));
+%! assert (fftshift (y), x);
+
+%% Test input validation
+%!error fftshift ()
+%!error fftshift (1, 2, 3)
+%!error fftshift (0:3, -1)
+%!error fftshift (0:3, 0:3)
+
diff --git a/scripts/signal/ifftshift.m b/scripts/signal/ifftshift.m
--- a/scripts/signal/ifftshift.m
+++ b/scripts/signal/ifftshift.m
@@ -29,48 +29,48 @@
 ## Author: Vincent Cautaerts <vincent@comf5.comm.eng.osaka-u.ac.jp>
 ## Created: July 1997
 ## Adapted-By: jwe
 ## Modified-By: Paul Kienzle, converted from fftshift
 ## Modified-By: David Bateman, add NDArray capability and option dim arg
 
 function retval = ifftshift (x, dim)
 
-  retval = 0;
-
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
 
+  if (! (isnumeric (x) || islogical (x) || ischar (x)))
+    error ("ifftshift: X must be a vector or matrix");
+  endif
+
   if (nargin == 2)
-    if (! isscalar (dim))
-      error ("ifftshift: dimension must be an integer scalar");
+    if (! (isscalar (dim) && dim > 0 && dim == fix (dim)))
+      error ("ifftshift: dimension DIM must be a positive integer");
     endif
     nd = ndims (x);
     sz = size (x);
     sz2 = floor (sz(dim) / 2);
     idx = repmat ({':'}, nd, 1);
     idx{dim} = [sz2+1:sz(dim), 1:sz2];
     retval = x(idx{:});
   else
     if (isvector (x))
       xl = length (x);
       xx = floor (xl/2);
       retval = x([xx+1:xl, 1:xx]);
-    elseif (ismatrix (x))
+    else
       nd = ndims (x);
       sz = size (x);
       sz2 = floor (sz ./ 2);
       idx = cell ();
       for i = 1:nd
         idx{i} = [sz2(i)+1:sz(i), 1:sz2(i)];
       endfor
       retval = x(idx{:});
-    else
-      error ("ifftshift: expecting vector or matrix argument");
     endif
   endif
 
 endfunction
 
 
 %!test
 %! x = [0:7];
@@ -112,8 +112,29 @@ endfunction
 
 %!test
 %! x = [0:3];
 %! x = [x;2*x;3*x+1;4*x+1];
 %! y = ifftshift (x,2);
 %! assert (y, [[2 3 0 1];[4 6 0 2];[7 10 1 4];[9 13 1 5]]);
 %! assert (ifftshift (y,2), x);
 
+%!test
+%! x = "efgabcd";
+%! y = ifftshift (x);
+%! assert (y, "abcdefg");
+%! assert (ifftshift (y), "defgabc");
+
+## Test N-dimensional input (bug #45207)
+%!test
+%! x = [0:3];
+%! x = x + x' + reshape (x, [1 1 4]);
+%! y1 = [4 5 2 3; 5 6 3 4; 2 3 0 1; 3 4 1 2];
+%! y = ifftshift (x);
+%! assert (y, reshape ([y1 + 2, y1 + 3, y1, y1 + 1], [4 4 4]));
+%! assert (ifftshift (y), x);
+
+%% Test input validation
+%!error ifftshift ()
+%!error ifftshift (1, 2, 3)
+%!error ifftshift (0:3, -1)
+%!error ifftshift (0:3, 0:3)
+
