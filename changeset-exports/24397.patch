# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1513020110 18000
#      Mon Dec 11 14:21:50 2017 -0500
# Node ID 08f19fd144f4bf27c6e5de7d26959d5ff7a7c374
# Parent  c652f26370631ef26e8b6d76ac7d0d6a3dd9bf04
don't use const reference template arguments to create var editor callbacks

Do use const reference arguments for functions, but use simple type
names for template declarations.

* variable-editor-model.h, variable-editor-model.cc
(variable_editor_model::get_data_oct,
variable_editor_model::set_data_oct): Use const reference for all
arguments.

* octave-link.h (octave_link::post_event, octave_link::do_post_event):
Use const reference for 2-, 3-, and 4-argument event methods.  Change
all uses.

* action-container.h (action_container::method_arg2_elem,
action_container::method_arg3_elem,
action_container::method_arg4_elem):
Use const reference for constructor data and function arguments.
(action_container::add_method): Use const reference arguments for 2-,
3-, and 4-arg methods.

diff --git a/libgui/src/variable-editor-model.cc b/libgui/src/variable-editor-model.cc
--- a/libgui/src/variable-editor-model.cc
+++ b/libgui/src/variable-editor-model.cc
@@ -299,8 +299,8 @@ variable_editor_model::data (const QMode
         {
           if (! m_d->is_pending (idx))
             {
-              octave_link::post_event<variable_editor_model, int, int,
-                                      const std::string&>
+              octave_link::post_event<variable_editor_model,
+                                      int, int, std::string>
                 (const_cast<variable_editor_model *> (this),
                  &variable_editor_model::get_data_oct,
                  idx.row (), idx.column (), m_d->m_name);
@@ -327,8 +327,8 @@ variable_editor_model::setData (const QM
           qDebug () << v.typeName () << " Expected String!";
           return false;
         }
-      octave_link::post_event<variable_editor_model, const std::string&,
-                              int, int, const std::string&>
+      octave_link::post_event<variable_editor_model,
+                              std::string, int, int, std::string>
         (this, &variable_editor_model::set_data_oct,
          m_d->m_name, idx.row (), idx.column (),
          v.toString ().toStdString ());
@@ -342,8 +342,7 @@ bool
 variable_editor_model::insertRows (int row, int count, const QModelIndex&)
 {
   // FIXME: cells?
-  octave_link::post_event <variable_editor_model, const std::string&,
-                           const std::string&>
+  octave_link::post_event <variable_editor_model, std::string, std::string>
     (this, &variable_editor_model::eval_oct, m_d->m_name,
      QString ("%1 = [ %1(1:%2,:) ; zeros(%3, columns(%1)) ; %1(%2+%3:end,:) ]")
      .arg (QString::fromStdString (m_d->m_name))
@@ -364,8 +363,7 @@ variable_editor_model::removeRows (int r
       return false;
     }

-  octave_link::post_event <variable_editor_model, const std::string&,
-                           const std::string&>
+  octave_link::post_event <variable_editor_model, std::string, std::string>
     (this, &variable_editor_model::eval_oct, m_d->m_name,
      QString ("%1(%2:%3, :) = []")
      .arg (QString::fromStdString (m_d->m_name))
@@ -379,8 +377,7 @@ variable_editor_model::removeRows (int r
 bool
 variable_editor_model::insertColumns (int col, int count, const QModelIndex&)
 {
-  octave_link::post_event <variable_editor_model, const std::string&,
-                           const std::string&>
+  octave_link::post_event <variable_editor_model, std::string, std::string>
     (this, &variable_editor_model::eval_oct, m_d->m_name,
      QString ("%1 = [ %1(:,1:%2) ; zeros(rows(%1), %3) %1(:,%2+%3:end) ]")
      .arg (QString::fromStdString (m_d->m_name))
@@ -401,8 +398,7 @@ variable_editor_model::removeColumns (in
       return false;
     }

-  octave_link::post_event <variable_editor_model, const std::string&,
-                           const std::string&>
+  octave_link::post_event <variable_editor_model, std::string, std::string>
     (this, &variable_editor_model::eval_oct, m_d->m_name,
      QString ("%1(:, %2:%3) = []")
      .arg (QString::fromStdString (m_d->m_name))
@@ -543,7 +539,8 @@ variable_editor_model::received_initiali
 // private

 void
-variable_editor_model::get_data_oct (int row, int col, const std::string& x)
+variable_editor_model::get_data_oct (const int& row, const int& col,
+                                     const std::string& x)
 {
   int parse_status = 0;

@@ -581,7 +578,8 @@ variable_editor_model::get_data_oct (int

 // val has to be copied!
 void
-variable_editor_model::set_data_oct (const std::string& x, int row, int col,
+variable_editor_model::set_data_oct (const std::string& x,
+                                     const int& row, const int& col,
                                      const std::string& val)
 {
   m_d->m_validity = true;

diff --git a/libgui/src/variable-editor-model.cc b/libgui/src/variable-editor-model.cc
--- a/libgui/src/variable-editor-model.cc
+++ b/libgui/src/variable-editor-model.cc
@@ -294,18 +294,18 @@ variable_editor_model::data (const QMode
   if (idx.isValid ())
     {
       if (m_d->is_set (idx))
         return m_d->data (idx, role);
       else
         {
           if (! m_d->is_pending (idx))
             {
-              octave_link::post_event<variable_editor_model, int, int,
-                                      const std::string&>
+              octave_link::post_event<variable_editor_model,
+                                      int, int, std::string>
                 (const_cast<variable_editor_model *> (this),
                  &variable_editor_model::get_data_oct,
                  idx.row (), idx.column (), m_d->m_name);
               m_d->pending (idx);
             }
           if (role == Qt::DisplayRole)
             return QVariant (QString (m_d->is_notavail (idx) ? "⌛" : "✗"));
           else
@@ -322,33 +322,32 @@ variable_editor_model::setData (const QM
 {
   if (idx.isValid () && role == Qt::EditRole)
     {
       if (v.type () != QVariant::String)
         {
           qDebug () << v.typeName () << " Expected String!";
           return false;
         }
-      octave_link::post_event<variable_editor_model, const std::string&,
-                              int, int, const std::string&>
+      octave_link::post_event<variable_editor_model,
+                              std::string, int, int, std::string>
         (this, &variable_editor_model::set_data_oct,
          m_d->m_name, idx.row (), idx.column (),
          v.toString ().toStdString ());
       return true;
     }
   else
     return false;
 }
 
 bool
 variable_editor_model::insertRows (int row, int count, const QModelIndex&)
 {
   // FIXME: cells?
-  octave_link::post_event <variable_editor_model, const std::string&,
-                           const std::string&>
+  octave_link::post_event <variable_editor_model, std::string, std::string>
     (this, &variable_editor_model::eval_oct, m_d->m_name,
      QString ("%1 = [ %1(1:%2,:) ; zeros(%3, columns(%1)) ; %1(%2+%3:end,:) ]")
      .arg (QString::fromStdString (m_d->m_name))
      .arg (row)
      .arg (count)
      .toStdString ());
 
   return true;
@@ -359,33 +358,31 @@ variable_editor_model::removeRows (int r
 {
   if (row + count > m_d->m_rows)
     {
       qDebug () << "Tried to remove too many rows " << m_d->m_rows << " "
                 << count << " (" << row << ")";
       return false;
     }
 
-  octave_link::post_event <variable_editor_model, const std::string&,
-                           const std::string&>
+  octave_link::post_event <variable_editor_model, std::string, std::string>
     (this, &variable_editor_model::eval_oct, m_d->m_name,
      QString ("%1(%2:%3, :) = []")
      .arg (QString::fromStdString (m_d->m_name))
      .arg (row)
      .arg (row + count)
      .toStdString ());
 
   return true;
 }
 
 bool
 variable_editor_model::insertColumns (int col, int count, const QModelIndex&)
 {
-  octave_link::post_event <variable_editor_model, const std::string&,
-                           const std::string&>
+  octave_link::post_event <variable_editor_model, std::string, std::string>
     (this, &variable_editor_model::eval_oct, m_d->m_name,
      QString ("%1 = [ %1(:,1:%2) ; zeros(rows(%1), %3) %1(:,%2+%3:end) ]")
      .arg (QString::fromStdString (m_d->m_name))
      .arg (col)
      .arg (count)
      .toStdString ());
 
   return true;
@@ -396,18 +393,17 @@ variable_editor_model::removeColumns (in
 {
   if (col + count > m_d->m_cols)
     {
       qDebug () << "Tried to remove too many cols " << m_d->m_cols << " "
                 << count << " (" << col << ")";
       return false;
     }
 
-  octave_link::post_event <variable_editor_model, const std::string&,
-                           const std::string&>
+  octave_link::post_event <variable_editor_model, std::string, std::string>
     (this, &variable_editor_model::eval_oct, m_d->m_name,
      QString ("%1(:, %2:%3) = []")
      .arg (QString::fromStdString (m_d->m_name))
      .arg (col)
      .arg (col + count)
      .toStdString ());
 
   return true;
@@ -538,17 +534,18 @@ variable_editor_model::received_initiali
                         .arg (cols);
   m_d->m_label->setText (description);
   m_d->m_validtext = description;
 }
 
 // private
 
 void
-variable_editor_model::get_data_oct (int row, int col, const std::string& x)
+variable_editor_model::get_data_oct (const int& row, const int& col,
+                                     const std::string& x)
 {
   int parse_status = 0;
 
   octave_value v = retrieve_variable (x, parse_status);
   //eval_string (x, true, parse_status);//retrieve_variable(x, parse_status);
   //symbol_exist(x,"var") > 0 ? eval_string (x, true, parse_status) : octave_value();
 
   if (parse_status != 0 || ! v.is_defined ())
@@ -576,17 +573,18 @@ variable_editor_model::get_data_oct (int
       emit data_ready (row, col, dat, cname, elem.rows (), elem.columns ());
     }
   else
     emit no_data (row, col);
 }
 
 // val has to be copied!
 void
-variable_editor_model::set_data_oct (const std::string& x, int row, int col,
+variable_editor_model::set_data_oct (const std::string& x,
+                                     const int& row, const int& col,
                                      const std::string& val)
 {
   m_d->m_validity = true;
   int parse_status = 0;
   // Accessing directly since
   // 1) retrieve_variable does not support writeback, and
   // 2) we can be reasonably sure that this variable exists.
   octave_value ret = octave::eval_string (val, true, parse_status);
diff --git a/libgui/src/variable-editor-model.h b/libgui/src/variable-editor-model.h
--- a/libgui/src/variable-editor-model.h
+++ b/libgui/src/variable-editor-model.h
@@ -115,19 +115,19 @@ private slots:
   void received_user_error (const QString& title, const QString& msg);
 
   void received_initialize_data (const QString& class_name,
                                  const QString& paren, int rows, int cols);
 
 private:
 
   // Get data for ov(row, col).  This must be executed in the octave thread!
-  void get_data_oct (int row, int col, const std::string& v) /*const*/;
+  void get_data_oct (const int& row, const int& col, const std::string& v) /*const*/;
 
-  void set_data_oct (const std::string& v, int row, int col,
+  void set_data_oct (const std::string& v, const int& row, const int& col,
                      const std::string& val);
 
   void init_from_oct (const std::string& x);
 
   void eval_oct (const std::string& name, const std::string& expr);
 
   octave_value retrieve_variable (const std::string& x, int& parse_status);
 
diff --git a/libinterp/corefcn/octave-link.h b/libinterp/corefcn/octave-link.h
--- a/libinterp/corefcn/octave-link.h
+++ b/libinterp/corefcn/octave-link.h
@@ -116,36 +116,37 @@ public:
   template <typename T, typename A>
   static void post_event (T *obj, void (T::*method) (const A&), const A& arg)
   {
     if (enabled ())
       instance->do_post_event (obj, method, arg);
   }
 
   template <class T, class A, class B>
-  static void post_event (T *obj, void (T::*method) (A, B),
-                          A arg_a, B arg_b)
+  static void post_event (T *obj, void (T::*method) (const A&, const B&),
+                          const A& arg_a, const B& arg_b)
   {
     if (enabled ())
       instance->do_post_event<T, A, B> (obj, method, arg_a, arg_b);
   }
 
   template <class T, class A, class B, class C>
   static void post_event (T *obj,
-                          void (T::*method) (A, B, C),
-                          A arg_a, B arg_b, C arg_c)
+                          void (T::*method) (const A&, const B&, const C&),
+                          const A& arg_a, const B& arg_b, const C& arg_c)
   {
     if (enabled ())
       instance->do_post_event<T, A, B, C> (obj, method, arg_a, arg_b, arg_c);
   }
 
   template <class T, class A, class B, class C, class D>
-  static void post_event (T *obj,
-                          void (T::*method) (A, B, C, D),
-                          A arg_a, B arg_b, C arg_c, D arg_d)
+  static void
+  post_event (T *obj,
+              void (T::*method) (const A&, const B&, const C&, const D&),
+              const A& arg_a, const B& arg_b, const C& arg_c, const D& arg_d)
   {
     if (enabled ())
       instance->do_post_event<T, A, B, C, D>
         (obj, method, arg_a, arg_b, arg_c, arg_d);
   }
 
   static void entered_readline_hook (void)
   {
@@ -462,34 +463,37 @@ protected:
 
   template <typename T, typename A>
   void do_post_event (T *obj, void (T::*method) (const A&), const A& arg)
   {
     gui_event_queue.add_method (obj, method, arg);
   }
 
   template <class T, class A, class B>
-  void do_post_event (T *obj, void (T::*method) (A, B),
-                      A arg_a, B arg_b)
+  void do_post_event (T *obj, void (T::*method) (const A&, const B&),
+                      const A& arg_a, const B& arg_b)
   {
     gui_event_queue.add_method<T, A, B>
       (obj, method, arg_a, arg_b);
   }
 
   template <class T, class A, class B, class C>
-    void do_post_event (T *obj, void (T::*method) (A, B, C),
-                      A arg_a, B arg_b, C arg_c)
+  void do_post_event (T *obj,
+                      void (T::*method) (const A&, const B&, const C&),
+                      const A& arg_a, const B& arg_b, const C& arg_c)
   {
     gui_event_queue.add_method<T, A, B, C>
       (obj, method, arg_a, arg_b, arg_c);
   }
 
   template <class T, class A, class B, class C, class D>
-  void do_post_event (T *obj, void (T::*method) (A, B, C, D),
-                      A arg_a, B arg_b, C arg_c, D arg_d)
+  void
+  do_post_event (T *obj,
+                 void (T::*method) (const A&, const B&, const C&, const D&),
+                 const A& arg_a, const B& arg_b, const C& arg_c, const D& arg_d)
   {
     gui_event_queue.add_method<T, A, B, C, D>
       (obj, method, arg_a, arg_b, arg_c, arg_d);
   }
 
   void do_entered_readline_hook (void) { }
   void do_finished_readline_hook (void) { }
 
diff --git a/liboctave/util/action-container.h b/liboctave/util/action-container.h
--- a/liboctave/util/action-container.h
+++ b/liboctave/util/action-container.h
@@ -29,16 +29,19 @@ along with Octave; see the file COPYING.
 #include <cstddef>
 
 // This class allows registering actions in a list for later
 // execution, either explicitly or when the container goes out of
 // scope.
 
 // FIXME: is there a better name for this class?
 
+// FIXME: we should probably be using std::function, std::bind, and
+// related c++11 features to implement this functionality.
+
 namespace octave
 {
   class
   action_container
   {
   public:
 
     // A generic unwind_protect element.  Knows how to run itself and
@@ -213,84 +216,84 @@ namespace octave
       A e_arg;
     };
 
     /// An element for calling a member function with two arguments
     template <class T, class A, class B>
     class method_arg2_elem : public elem
     {
     public:
-      method_arg2_elem (T *obj, void (T::*method) (A, B),
-                        A arg_a, B arg_b)
+      method_arg2_elem (T *obj, void (T::*method) (const A&, const B&),
+                        const A& arg_a, const B& arg_b)
         : e_obj (obj), e_method (method),
           e_arg_a (arg_a), e_arg_b (arg_b) { }
 
       void run (void) { (e_obj->*e_method) (e_arg_a, e_arg_b); }
 
     private:
 
       T *e_obj;
-      void (T::*e_method) (A, B);
+      void (T::*e_method) (const A&, const B&);
       A e_arg_a;
       B e_arg_b;
 
       // No copying!
 
       method_arg2_elem (const method_arg2_elem&);
 
       method_arg2_elem operator = (const method_arg2_elem&);
     };
 
     /// An element for calling a member function with three arguments
     template <class T, class A, class B, class C>
     class method_arg3_elem : public elem
     {
     public:
-      method_arg3_elem (T *obj, void (T::*method) (A, B, C),
-                        A arg_a, B arg_b, C arg_c)
+      method_arg3_elem (T *obj, void (T::*method) (const A&, const B&, const C&),
+                        const A& arg_a, const B& arg_b, const C& arg_c)
         : e_obj (obj), e_method (method),
           e_arg_a (arg_a), e_arg_b (arg_b), e_arg_c (arg_c)
       { }
 
       void run (void) { (e_obj->*e_method) (e_arg_a, e_arg_b, e_arg_c); }
 
     private:
 
       T *e_obj;
-      void (T::*e_method) (A, B, C);
+      void (T::*e_method) (const A&, const B&, const C&);
       A e_arg_a;
       B e_arg_b;
       C e_arg_c;
 
       // No copying!
 
       method_arg3_elem (const method_arg3_elem&);
 
       method_arg3_elem operator = (const method_arg3_elem&);
     };
 
     /// An element for calling a member function with three arguments
     template <class T, class A, class B, class C, class D>
     class method_arg4_elem : public elem
     {
     public:
-      method_arg4_elem (T *obj, void (T::*method) (A, B, C, D),
-                        A arg_a, B arg_b, C arg_c, D arg_d)
+      method_arg4_elem (T *obj, void (T::*method) (const A&, const B&, const C&, const D&),
+                        const A& arg_a, const B& arg_b, const C& arg_c, const D& arg_d)
         : e_obj (obj), e_method (method),
           e_arg_a (arg_a), e_arg_b (arg_b), e_arg_c (arg_c), e_arg_d (arg_d)
       { }
 
       void run (void) {
         (e_obj->*e_method) (e_arg_a, e_arg_b, e_arg_c, e_arg_d);
       }
 
     private:
 
       T *e_obj;
-      void (T::*e_method) (A, B, C, D);
+      void (T::*e_method) (const A&, const B&, const C&, const D&);
       A e_arg_a;
       B e_arg_b;
       C e_arg_c;
       D e_arg_d;
 
       // No copying!
 
       method_arg4_elem (const method_arg4_elem&);
@@ -412,36 +415,38 @@ namespace octave
     template <typename T, typename A>
     void add_method (T& obj, void (T::*method) (const A&), const A& arg)
     {
       add (new method_crefarg_elem<T, A> (obj, method, arg));
     }
 
     // Call to T::method (A, B).
     template <class T, class A, class B>
-    void add_method (T *obj, void (T::*method) (A, B),
-                     A arg_a, B arg_b)
+    void add_method (T *obj, void (T::*method) (const A&, const B&),
+                     const A& arg_a, const B& arg_b)
     {
       add (new method_arg2_elem<T, A, B> (obj, method, arg_a, arg_b));
     }
 
     // Call to T::method (A, B, C).
     template <class T, class A, class B, class C>
-    void add_method (T *obj, void (T::*method) (A, B, C),
-                     A arg_a, B arg_b, C arg_c)
+    void add_method (T *obj,
+                     void (T::*method) (const A&, const B&, const C&),
+                     const A& arg_a, const B& arg_b, const C& arg_c)
     {
       add (new method_arg3_elem<T, A, B, C> (obj, method, arg_a,
                                              arg_b, arg_c));
     }
 
     // Call to T::method (A, B, C, D).
     template <class T, class A, class B, class C, class D>
-    void add_method (T *obj, void (T::*method) (A, B, C, D),
-                     A arg_a, B arg_b,
-                     C arg_c, D arg_d)
+    void add_method (T *obj,
+                     void (T::*method) (const A&, const B&, const C&, const D&),
+                     const A& arg_a, const B& arg_b,
+                     const C& arg_c, const D& arg_d)
     {
       add (new method_arg4_elem<T, A, B, C, D> (obj, method, arg_a,
                                                 arg_b, arg_c, arg_d));
     }
 
     // Call to delete (T*).
 
     template <typename T>
