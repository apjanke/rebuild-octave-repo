# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1236954419 14400
#      Fri Mar 13 10:26:59 2009 -0400
# Node ID fde2a916b2ac6e6efe50cf38885cfc391491796c
# Parent  ddea8b06ed7c320377a2165bea9e209843d74ffe
include line and file info in parser warnings

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,25 +1,30 @@
+2009-03-13  John W. Eaton  <jwe@octave.org>
+
+	* parse.y (maybe_warn_assign_as_truth_value, make_binary_op,
+	maybe_warn_variable_switch_label, maybe_warn_associativity_change): 
+	Print file and line number info if available.
+	* lex.l (gripe_matlab_incompatible): Likewise.
+
+	* error.cc (pr_where): Use octave_call_stack::backtrace to print
+	complete stack trace at once.  Don't attempt to print code.
+	(error_2): Set error_state to 0 before calling pr_where.
+	(warning_1): Switch sense of test on symbol_table::at_top_level.
+	Call pr_where after printing primary warning message.
+
 2009-03-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-range.h (octave_range::octave_range (const Range&)): Allow
 	constructing from invalid range op result.
 	* ov-range.cc (octave_range::try_narrowing_conversion): Validate
 	invalid range op results.
 	* data.cc (fill_matrix): Return packed form (zero-step range) if
 	possible.
 
-2009-03-13  John W. Eaton  <jwe@octave.org>
-
-	* error.cc (pr_where): Use octave_call_stack::backtrace to print
-	complete stack trace at once.  Don't attempt to print code.
-	(error_2): Set error_state to 0 before calling pr_where.
-	(warning_1): Switch sense of test on symbol_table::at_top_level.
-	Call pr_where after printing primary warning message.
-
 2009-03-10  Jason Riedy  <jason@acm.org>
 
 	* DLD-FUNCTIONS/lu.cc (lu): Call fact.Pr_mat () and fact.Pc_mat ()
 	to return permutation matrices in the sparse case.
 
 2009-03-12  John W. Eaton  <jwe@octave.org>
 
 	* ls-mat-ascii.cc (get_mat_data_input_line): If we are looking at
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -3372,19 +3372,26 @@ gripe_single_quote_string (void)
     warning_with_id ("Octave:single-quote-string",
 		     "single quote delimited string near line %d of file %s",
 		     input_line_number, nm.c_str ());
 }
 
 static void
 gripe_matlab_incompatible (const std::string& msg)
 {
-  warning_with_id ("Octave:matlab-incompatible",
-		   "potential Matlab compatibility problem: %s",
-		   msg.c_str ());
+  std::string nm = curr_fcn_file_full_name;
+
+  if (nm.empty ())
+    warning_with_id ("Octave:matlab-incompatible",
+		     "potential Matlab compatibility problem: %s",
+		     msg.c_str ());
+  else
+    warning_with_id ("Octave:matlab-incompatible",
+		     "potential Matlab compatibility problem: %s near line %d offile %s",
+		     msg.c_str (), input_line_number, nm.c_str ());
 }
 
 static void
 maybe_gripe_matlab_incompatible_comment (char c)
 {
   if (c == '#')
     gripe_matlab_incompatible ("# used as comment character");
 }
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1507,30 +1507,44 @@ end_token_ok (token *tok, token::end_tok
 // test in a logical expression.
 
 static void
 maybe_warn_assign_as_truth_value (tree_expression *expr)
 {
   if (expr->is_assignment_expression ()
       && expr->paren_count () < 2)
     {
-      warning_with_id
-        ("Octave:assign-as-truth-value",
-         "suggest parenthesis around assignment used as truth value");
+      if (curr_fcn_file_full_name.empty ())
+	warning_with_id
+	  ("Octave:assign-as-truth-value",
+	   "suggest parenthesis around assignment used as truth value");
+      else
+	warning_with_id
+	  ("Octave:assign-as-truth-value",
+	   "suggest parenthesis around assignment used as truth value near line %d, column %d in file `%s'",
+	   expr->line (), expr->column (), curr_fcn_file_full_name.c_str ());
     }
 }
 
 // Maybe print a warning about switch labels that aren't constants.
 
 static void
 maybe_warn_variable_switch_label (tree_expression *expr)
 {
   if (! expr->is_constant ())
-    warning_with_id ("Octave:variable-switch-label",
-    		     "variable switch label");
+    {
+      if (curr_fcn_file_full_name.empty ())
+	warning_with_id ("Octave:variable-switch-label",
+			 "variable switch label");
+      else
+	warning_with_id
+	  ("Octave:variable-switch-label",
+	   "variable switch label near line %d, column %d in file `%s'",
+	   expr->line (), expr->column (), curr_fcn_file_full_name.c_str ());
+    }
 }
 
 static tree_expression *
 fold (tree_binary_expression *e)
 {
   tree_expression *retval = e;
 
   unwind_protect::begin_frame ("fold_binary_expression");
@@ -1812,20 +1826,28 @@ maybe_warn_associativity_change (tree_ex
 
       octave_value::binary_op op_type = e->op_type ();
 
       if (op_type == octave_value::op_pow
 	  || op_type == octave_value::op_el_pow)
 	{
 	  std::string op_str = octave_value::binary_op_as_string (op_type);
 
-	  warning_with_id
-	    ("Octave:associativity-change",
-	     "meaning may have changed due to change in associativity for %s operator", op_str.c_str ());
-        }
+	  if (curr_fcn_file_full_name.empty ())
+	    warning_with_id
+	      ("Octave:associativity-change",
+	       "meaning may have changed due to change in associativity for %s operator",
+	       op_str.c_str ());
+	  else
+	    warning_with_id
+	      ("Octave:associativity-change",
+	       "meaning may have changed due to change in associativity for %s operator near line %d, column %d in file `%s'",
+	       op_str.c_str (), op->line (), op->column (),
+	       curr_fcn_file_full_name.c_str ());
+	}
     }
 }
 
 // Build a binary expression.
 
 static tree_expression *
 make_binary_op (int op, tree_expression *op1, token *tok_val,
 		tree_expression *op2)
@@ -1915,19 +1937,28 @@ make_binary_op (int op, tree_expression 
     case EXPR_OR:
       t = octave_value::op_el_or;
       if (op2->paren_count () == 0 && op2->is_binary_expression ())
         {
 	  tree_binary_expression *e
 	    = dynamic_cast<tree_binary_expression *> (op2);
 
 	  if (e->op_type () == octave_value::op_el_and)
-	    warning_with_id
-	      ("Octave:precedence-change",
-	       "meaning may have changed due to change in precedence for & and | operators");
+	    {
+	      if (curr_fcn_file_full_name.empty ())
+		warning_with_id
+		  ("Octave:precedence-change",
+		   "meaning may have changed due to change in precedence for & and | operators");
+	      else
+		warning_with_id
+		  ("Octave:precedence-change",
+		   "meaning may have changed due to change in precedence for & and | operators near line %d, column %d in file `%s'",
+		   op2->line (), op2->column (),
+		   curr_fcn_file_full_name.c_str ());
+	    }
         }
       break;
 
     default:
       panic_impossible ();
       break;
     }
 
