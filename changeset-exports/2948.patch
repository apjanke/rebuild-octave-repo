# HG changeset patch
# User jwe
# Date 863185866 0
#      Fri May 09 13:51:06 1997 +0000
# Node ID 56be458e237f38dca092d91e0d9bac8ae79ced41
# Parent  cf676ff8b702d0d6e120f9415e2e2402cd5fd4b8
[project @ 1997-05-09 13:37:35 by jwe]

diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -39,16 +39,17 @@ Software Foundation, 59 Temple Place - S
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-ch-mat.h"
 #include "ov-str-mat.h"
 #include "ov-range.h"
 #include "ov-list.h"
+#include "variables.h"
 
 int octave_base_value::t_id = -1;
 
 const string octave_base_value::t_name ("<unknown type>");
 
 octave_value
 octave_base_value::index (const octave_value_list&) const
 {
@@ -69,24 +70,23 @@ octave_value
 octave_base_value::struct_elt_val (const string&, bool) const
 {
   string nm = type_name ();
   error ("can't perform structure reference operations for %s type",
 	 nm.c_str ());
   return octave_value ();
 }
 
-octave_value&
-octave_base_value::struct_elt_ref (const string&)
+octave_variable_reference
+octave_base_value::struct_elt_ref (octave_value *, const string&)
 {
-  static octave_value foo;
   string nm = type_name ();
   error ("can't perform structure reference operations for %s type",
 	 nm.c_str ());
-  return foo;
+  return octave_variable_reference ();
 }
 
 octave_value
 octave_base_value::convert_to_str (void) const
 {
   gripe_wrong_type_arg ("octave_base_value::convert_to_str ()",
 			type_name ());
   return octave_value ();
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -71,17 +71,18 @@ public:
     { return static_cast<octave_value *> (0); }
 
   octave_value index (const octave_value_list& idx) const;
 
   idx_vector index_vector (void) const;
 
   octave_value struct_elt_val (const string& nm, bool silent) const;
 
-  octave_value& struct_elt_ref (const string& nm);
+  octave_variable_reference
+  struct_elt_ref (octave_value *parent, const string& nm);
 
   int rows (void) const { return -1; }
 
   int columns (void) const { return -1; }
 
   bool is_defined (void) const { return false; }
 
   bool is_real_scalar (void) const { return false; }
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -35,16 +35,17 @@ Software Foundation, 59 Temple Place - S
 #include "mx-base.h"
 
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ops.h"
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "pr-output.h"
+#include "variables.h"
 
 octave_allocator
 octave_matrix::allocator (sizeof (octave_matrix));
 
 int
 octave_matrix::t_id (-1);
 
 const string
@@ -141,16 +142,115 @@ octave_matrix::assign (const octave_valu
 
     default:
       error ("invalid number of indices (%d) for indexed matrix assignment",
 	     len);
       break;
     }
 }
 
+void
+octave_matrix::assign_struct_elt (assign_op, const string& nm,
+				  const octave_value& rhs)
+{
+  octave_value retval;
+
+  Matrix m = rhs.matrix_value ();
+
+  if (! error_state)
+    {
+      int nr = -1;
+      int nc = -1;
+
+      int dim = -1;
+
+      if (m.rows () == 1 && m.cols () == 2)
+	{
+	  nr = NINT (m (0, 0));
+	  nc = NINT (m (0, 1));
+	}
+      else if (m.rows () == 2 && m.cols () == 1)
+	{
+	  nr = NINT (m (0, 0));
+	  nc = NINT (m (1, 0));
+	}
+      else if (m.rows () == 1 && m.cols () == 1)
+	{
+	  dim = NINT (m (0, 0));
+
+	  nr = matrix.rows ();
+	  nc = matrix.cols ();
+	}
+
+      if (nm == "size")
+	{
+	  if (nr >= 0 && nc >= 0)
+	    matrix.resize (nr, nc, 0.0);
+	  else
+	    error ("invalid size specification = [%d, %d] specified",
+		   nr, nc);
+	}
+      else if (nm == "rows")
+	{
+	  if (dim >= 0)
+	    matrix.resize (dim, nc, 0.0);
+	  else
+	    error ("invalid row dimension = %d specified", dim);
+	}
+      else if (nm == "cols" || nm == "columns")
+	{
+	  if (dim >= 0)
+	    matrix.resize (nr, dim, 0.0);
+	  else
+	    error ("invalid column dimension = %d specified", dim);
+	}
+    }
+}
+
+void
+octave_matrix::assign_struct_elt (assign_op, const string&,
+				  const octave_value_list&,
+				  const octave_value&)
+{
+  error ("indexed assignment for matrix properties is not implemented");
+}
+
+octave_value
+octave_matrix::struct_elt_val (const string& nm, bool silent) const
+{
+  octave_value retval;
+
+  double nr = static_cast<double> (matrix.rows ());
+  double nc = static_cast<double> (matrix.cols ());
+
+  if (nm == "rows")
+    retval = nr;
+  else if (nm == "cols" || nm == "columns")
+    retval = nc;
+  else if (nm == "size")
+    {
+      Matrix tmp (1, 2);
+
+      tmp.elem (0, 0) = nr;
+      tmp.elem (0, 1) = nc;
+
+      retval = tmp;
+    }
+  else if (! silent)
+    error ("structure has no member `%s'", nm.c_str ());
+
+  return retval;
+}
+
+octave_variable_reference
+octave_matrix::struct_elt_ref (octave_value *parent, const string& nm)
+{
+  return octave_variable_reference (parent, nm);
+}
+
 bool
 octave_matrix::valid_as_scalar_index (void) const
 {
   // XXX FIXME XXX
   return false;
 }
 
 bool
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -80,18 +80,30 @@ public:
     { allocator.free (p, size); }
 
   octave_value *try_narrowing_conversion (void);
 
   octave_value index (const octave_value_list& idx) const;
 
   void assign (const octave_value_list& idx, const Matrix& rhs);
 
+  void assign_struct_elt (assign_op, const string& elt_nm,
+			  const octave_value& rhs);
+
+  void assign_struct_elt (assign_op, const string& elt_nm,
+			  const octave_value_list& idx,
+			  const octave_value& rhs);
+
   idx_vector index_vector (void) const { return idx_vector (matrix); }
 
+  octave_value struct_elt_val (const string& nm, bool silent) const;
+
+  octave_variable_reference
+  struct_elt_ref (octave_value *parent, const string& nm);
+
   int rows (void) const { return matrix.rows (); }
   int columns (void) const { return matrix.columns (); }
 
   bool is_defined (void) const { return true; }
 
   bool is_real_matrix (void) const { return true; }
 
   octave_value all (void) const { return matrix.all (); }
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -28,16 +28,17 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
 #include "error.h"
 #include "ov-struct.h"
 #include "unwind-prot.h"
+#include "variables.h"
 
 octave_allocator
 octave_struct::allocator (sizeof (octave_struct));
 
 int
 octave_struct::t_id (-1);
 
 const string
@@ -53,20 +54,20 @@ octave_struct::struct_elt_val (const str
   if (idx)
     retval = map.contents (idx);
   else if (! silent)
     error ("structure has no member `%s'", nm.c_str ());
 
   return retval;
 }
 
-octave_value&
-octave_struct::struct_elt_ref (const string& nm)
+octave_variable_reference
+octave_struct::struct_elt_ref (octave_value *, const string& nm)
 {
-  return map [nm];
+  return octave_variable_reference (&map [nm]);
 }
 
 void
 octave_struct::print (ostream& os, bool) const
 {
   print_raw (os);
 }
 
diff --git a/src/ov-struct.h b/src/ov-struct.h
--- a/src/ov-struct.h
+++ b/src/ov-struct.h
@@ -70,17 +70,18 @@ public:
   void *operator new (size_t size)
     { return allocator.alloc (size); }
 
   void operator delete (void *p, size_t size)
     { allocator.free (p, size); }
 
   octave_value struct_elt_val (const string& nm, bool silent) const;
 
-  octave_value& struct_elt_ref (const string& nm);
+  octave_variable_reference
+  struct_elt_ref (octave_value *parent, const string& nm);
 
   bool is_defined (void) const { return true; }
 
   bool is_map (void) const { return true; }
 
   Octave_map map_value (void) const { return map; }
 
   void print (ostream& os, bool pr_as_read_syntax = false) const;
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -97,26 +97,26 @@ bool Vprefer_column_vectors;
 bool Vprint_answer_id_name;
 
 // Should operations on empty matrices return empty matrices or an
 // error?  A positive value means yes.  A negative value means yes,
 // but print a warning message.  Zero means it should be considered an
 // error.
 int Vpropagate_empty_matrices;
 
-// If TRUE, resize matrices when performing and indexed assignment and
-// the indices are outside the current bounds.
-bool Vresize_on_range_error;
-
 // How many levels of structure elements should we print?
 int Vstruct_levels_to_print;
 
 // Allow divide by zero errors to be suppressed.
 bool Vwarn_divide_by_zero;
 
+// If TRUE, resize matrices when performing and indexed assignment and
+// the indices are outside the current bounds.
+static bool Vresize_on_range_error;
+
 // XXX FIXME XXX
 
 // Octave's value type.
 
 string
 octave_value::binary_op_as_string (binary_op op)
 {
   string retval;
@@ -493,32 +493,74 @@ octave_value::assign (assign_op, const o
   return operator = (rhs);
 }
 
 octave_value&
 octave_value::assign (octave_value::assign_op op,
 		      const octave_value_list& idx,
 		      const octave_value& rhs)
 {
+  if (Vresize_on_range_error || is_defined ())
+    {
+      make_unique ();
+
+      bool assignment_ok = try_assignment (op, idx, rhs);
+
+      if (! (error_state || assignment_ok))
+	{
+	  assignment_ok = try_assignment_with_conversion (op,idx, rhs);
+
+	  if (! (error_state || assignment_ok))
+	    gripe_no_conversion (type_name (), rhs.type_name ());
+	}
+
+      if (! error_state)
+	maybe_mutate ();
+    }
+  else
+    {
+      error ("indexed assignment to previously undefined variables");
+      error ("is only possible when resize_on_range_error is true");
+    }
+
+  return *this;
+}
+
+void
+octave_value::assign_struct_elt (assign_op op, const string& elt_nm,
+				 const octave_value& rhs)
+{
   make_unique ();
 
-  bool assignment_ok = try_assignment (op, idx, rhs);
+  rep->assign_struct_elt (op, elt_nm, rhs);
+}
+
 
-  if (! (error_state || assignment_ok))
-    {
-      assignment_ok = try_assignment_with_conversion (op,idx, rhs);
+void
+octave_value::assign_struct_elt (assign_op op, const string& elt_nm,
+				 const octave_value_list& idx,
+				 const octave_value& rhs)
+{
+  make_unique ();
 
-      if (! (error_state || assignment_ok))
-	gripe_no_conversion (type_name (), rhs.type_name ());
-    }
+  rep->assign_struct_elt (op, elt_nm, idx, rhs);
+}
 
-  if (! error_state)
-    maybe_mutate ();
+octave_variable_reference
+octave_value::struct_elt_ref (const string& nm)
+{
+  return rep->struct_elt_ref (this, nm);
+}
 
-  return *this;
+octave_variable_reference
+octave_value::struct_elt_ref (octave_value *, const string&)
+{
+  panic_impossible ();
+
+  return octave_variable_reference ();
 }
 
 octave_value_list
 octave_value::eval (int, const octave_value_list& idx)
 {
   return (idx.length () > 0) ? index (idx) : *this;
 }
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -39,16 +39,17 @@ class ostream;
 #include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "oct-sym.h"
 
 class Octave_map;
 class octave_stream;
 class octave_value_list;
+class octave_variable_reference;
 
 // Constants.
 
 // This just provides a way to avoid infinite recursion when building
 // octave_value objects.
 
 class
 octave_xvalue
@@ -215,25 +216,35 @@ public:
   virtual octave_value index (const octave_value_list& idx) const
     { return rep->index (idx); }
 
   octave_value& assign (assign_op, const octave_value& rhs);
 
   octave_value& assign (assign_op, const octave_value_list& idx,
 			const octave_value& rhs);
 
+  virtual void
+  assign_struct_elt (assign_op, const string& elt_nm,
+		     const octave_value& rhs);
+
+  virtual void
+  assign_struct_elt (assign_op, const string& elt_nm,
+		     const octave_value_list& idx, const octave_value& rhs);
+
   virtual idx_vector index_vector (void) const
     { return rep->index_vector (); }
 
   virtual octave_value
   struct_elt_val (const string& nm, bool silent = false) const
     { return rep->struct_elt_val (nm, silent); }
 
-  virtual octave_value& struct_elt_ref (const string& nm)
-    { return rep->struct_elt_ref (nm); }
+  octave_variable_reference struct_elt_ref (const string& nm);
+
+  virtual octave_variable_reference
+  struct_elt_ref (octave_value *parent, const string& nm);
 
   // Size.
 
   virtual int rows (void) const
     { return rep->rows (); }
 
   virtual int columns (void) const
     { return rep->columns (); }
@@ -519,20 +530,16 @@ extern bool Vprefer_column_vectors;
 extern bool Vprint_answer_id_name;
 
 // Should operations on empty matrices return empty matrices or an
 // error?  A positive value means yes.  A negative value means yes,
 // but print a warning message.  Zero means it should be considered an
 // error.
 extern int Vpropagate_empty_matrices;
 
-// If TRUE, resize matrices when performing and indexed assignment and
-// the indices are outside the current bounds.
-extern bool Vresize_on_range_error;
-
 // How many levels of structure elements should we print?
 extern int Vstruct_levels_to_print;
 
 // Allow divide by zero errors to be suppressed.
 extern bool Vwarn_divide_by_zero;
 
 // Indentation level for structures.
 extern int struct_indent;
diff --git a/src/pt-cmd.cc b/src/pt-cmd.cc
--- a/src/pt-cmd.cc
+++ b/src/pt-cmd.cc
@@ -302,39 +302,35 @@ tree_for_command::do_for_loop_once (tree
 }
 
 inline void
 tree_for_command::do_for_loop_once (tree_identifier *ident,
 				    octave_value& rhs, bool& quit)
 {
   quit = false;
 
-  octave_variable_reference tmp (ident);
+  ident->reference () . assign (octave_value::asn_eq, rhs);
 
-  if (error_state)
+  if (! error_state)
     {
-      eval_error ();
-      return;
-    }
-
-  tmp.assign (octave_value::asn_eq, rhs);
-
-  if (list)
-    {
-      list->eval ();
+      if (list)
+	list->eval ();
 
       if (error_state)
 	{
 	  eval_error ();
 	  quit = true;
-	  return;
 	}
+      else
+	quit = quit_loop_now ();
     }
+  else
+    eval_error ();
 
-  quit = quit_loop_now ();
+  return;
 }
 
 #define DO_LOOP(val) \
   do \
     { \
       if (ident) \
 	for (int i = 0; i < steps; i++) \
 	  { \
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -73,33 +73,16 @@ public:
   void operator delete (void *p, size_t size)
     { allocator.free (p, size); }
 
   // Indexed assignment.
 
   octave_value index (const octave_value_list& idx) const
     { return val.index (idx); }
 
-  octave_value& reference (void)
-    {
-      val.make_unique ();
-      return val;
-    }
-
-  octave_value value (void) const
-    { return val; }
-
-  octave_value assign (octave_value::assign_op op,
-		       const octave_value_list& idx,
-		       const octave_value& rhs)
-    {
-      val.assign (op, idx, rhs);
-      return val;
-    }
-
   // Type.  It would be nice to eliminate the need for this.
 
   bool is_constant (void) const { return true; }
 
   void maybe_mutate (void)
     { val.maybe_mutate (); }
 
   void print (ostream& os, bool pr_as_read_syntax = false,
diff --git a/src/pt-exp.cc b/src/pt-exp.cc
--- a/src/pt-exp.cc
+++ b/src/pt-exp.cc
@@ -508,18 +508,18 @@ tree_simple_assignment_expression::left_
 }
 
 tree_identifier *
 tree_simple_assignment_expression::left_hand_side_id (void)
 {
   return lhs->ident ();
 }
 
-// ??? FIXME ??? -- should octave_variable_reference::assign return
-// the right thing for us to return?
+// ??? FIXME ??? -- should octave_value::assign return the right thing
+// for us to return?
 
 octave_value
 tree_simple_assignment_expression::eval (bool print)
 {
   octave_value retval;
 
   octave_value lhs_val;
 
@@ -536,17 +536,17 @@ tree_simple_assignment_expression::eval 
 	}
       else if (rhs_val.is_undefined ())
 	{
 	  error ("value on right hand side of assignment is undefined");
 	  eval_error ();
 	}
       else
 	{
-	  octave_variable_reference ult (lhs);
+	  octave_variable_reference ult = lhs->reference ();
 
 	  if (error_state)
 	    eval_error ();
 	  else
 	    {
 	      if (index)
 		{
 		  // Extract the arguments into a simple vector.
diff --git a/src/pt-id.cc b/src/pt-id.cc
--- a/src/pt-id.cc
+++ b/src/pt-id.cc
@@ -73,93 +73,16 @@ tree_identifier::define (const octave_va
 
 void
 tree_identifier::document (const string& s)
 {
   if (sym)
     sym->document (s);
 }
 
-octave_value
-tree_identifier::assign (octave_value::assign_op op, const octave_value& rhs)
-{
-  octave_value retval;
-
-  if (rhs.is_defined ())
-    {
-      if (! sym->is_defined ())
-	{
-	  if (! (sym->is_formal_parameter ()
-		 || sym->is_linked_to_global ()))
-	    {
-	      link_to_builtin_variable (sym);
-	    }
-	}
-      else if (sym->is_function ())
-	{
-	  sym->clear ();
-	}
-
-      // XXX FIXME XXX -- make this work for ops other than `='.
-
-      if (sym->define (rhs))
-	retval = rhs;
-    }
-
-  return retval;
-}
-
-octave_value
-tree_identifier::assign (octave_value::assign_op op,
-			 const octave_value_list& args,
-			 const octave_value& rhs)
-{
-  octave_value retval;
-
-  if (rhs.is_defined ())
-    {
-      if (! sym->is_defined ())
-	{
-	  if (! (sym->is_formal_parameter ()
-		 || sym->is_linked_to_global ()))
-	    {
-	      link_to_builtin_variable (sym);
-	    }
-	}
-      else if (sym->is_function ())
-	{
-	  sym->clear ();
-	}
-
-      if (sym->is_variable () && sym->is_defined ())
-	{
-	  sym->variable_reference () . assign (op, args, rhs);
-	}
-      else
-	{
-	  assert (! sym->is_defined ());
-
-	  if (! Vresize_on_range_error)
-	    {
-	      ::error ("indexed assignment to previously undefined variables");
-	      ::error ("is only possible when resize_on_range_error is true");
-	    }
-	  else
-	    {
-	      retval.assign (op, args, rhs);
-
-	      if (retval.is_defined ())
-		sym->define (retval);
-	    }
-	}
-    }
-
-  return retval;
-}
-
 bool
 tree_identifier::is_defined (void)
 {
   return (sym && sym->is_defined ());
 }
 
 void
 tree_identifier::increment (void)
@@ -345,17 +268,17 @@ tree_identifier::accept (tree_walker& tw
 }
 
 octave_value
 tree_identifier::value (void) const
 {
   return sym->variable_value ();
 }
 
-octave_value&
+octave_variable_reference
 tree_identifier::reference (void)
 {
   return sym->variable_reference ();
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/pt-id.h b/src/pt-id.h
--- a/src/pt-id.h
+++ b/src/pt-id.h
@@ -66,23 +66,16 @@ public:
   tree_identifier *define (octave_symbol *s, unsigned int sym_type);
 
   tree_identifier *define (octave_function *f, unsigned int sym_type);
 
   tree_identifier *define (const octave_value& v);
 
   void document (const string& s);
 
-  octave_value assign (octave_value::assign_op op,
-		       const octave_value& t);
-
-  octave_value assign (octave_value::assign_op op,
-		       const octave_value_list& args,
-		       const octave_value& t);
-
   bool is_defined (void);
 
   void increment (void);
 
   void decrement (void);
 
   octave_symbol *do_lookup (bool& script_file_executed, bool
 			    exec_script = true);
@@ -102,17 +95,17 @@ public:
   eval (bool print, int nargout, const octave_value_list& args);
 
   void eval_undefined_error (void);
 
   void accept (tree_walker& tw);
 
   octave_value value (void) const;
 
-  octave_value& reference (void);
+  octave_variable_reference reference (void);
 
 private:
 
   // The symbol record that this identifier references.
   symbol_record *sym;
 
   // True if we should consider assigning the result of evaluating
   // this identifier to the built-in variable ans.
diff --git a/src/pt-indir.cc b/src/pt-indir.cc
--- a/src/pt-indir.cc
+++ b/src/pt-indir.cc
@@ -159,43 +159,36 @@ tree_indirect_ref::value (void) const
 
       if (! error_state)
 	retval = retval.struct_elt_val (nm);
     }
 
   return retval;
 }
 
-octave_value&
+octave_variable_reference
 tree_indirect_ref::reference (void)
 {
   if (is_identifier_only ())
     return id->reference ();
   else
     {
+      octave_variable_reference tmp;
+
       if (id)
-	{
-	  octave_value& tmp = id->reference ();
-	  if (tmp.is_undefined () || ! tmp.is_map ())
-	    tmp = Octave_map ();
-	  return tmp.struct_elt_ref (nm);
-	}
+	tmp = id->reference ();
       else if (indir)
-	{
-	  octave_value& tmp = indir->reference ();
-	  if (tmp.is_undefined () || ! tmp.is_map ())
-	    tmp = Octave_map ();
-	  return tmp.struct_elt_ref (nm);
-	}
+	tmp = indir->reference ();
       else
-	{
-	  static octave_value foo;
-	  panic_impossible ();
-	  return foo;
-	}
+	panic_impossible ();
+
+      if (tmp.is_undefined ())
+	tmp.define (Octave_map ());
+
+      return tmp.struct_elt_ref (nm);
     }
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/pt-indir.h b/src/pt-indir.h
--- a/src/pt-indir.h
+++ b/src/pt-indir.h
@@ -86,17 +86,18 @@ public:
   string name (void) const;
 
   octave_value eval (bool print = false);
 
   octave_value_list
   eval (bool print, int nargout, const octave_value_list& args);
 
   octave_value value (void) const;
-  octave_value& reference (void);
+
+  octave_variable_reference reference (void);
 
   string elt_name (void)
     { return nm; }
 
   void accept (tree_walker& tw);
 
 private:
 
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -360,21 +360,19 @@ tree_parameter_list::mark_as_formal_para
 }
 
 void
 tree_parameter_list::initialize_undefined_elements (octave_value& val)
 {
   for (Pix p = first (); p != 0; next (p))
     {
       tree_identifier *elt = this->operator () (p);
+
       if (! elt->is_defined ())
-	{
-	  octave_variable_reference tmp (elt);
-	  tmp.assign (octave_value::asn_eq, val);
-	}
+	elt->reference () . assign (octave_value::asn_eq, val);
     }
 }
 
 void
 tree_parameter_list::define_from_arg_vector (const octave_value_list& args)
 {
   int nargin = args.length ();
 
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -175,17 +175,17 @@ public:
 
   void mark_as_linked_to_global (void);
   bool is_linked_to_global (void) const;
 
   void mark_as_static (void);
   bool is_static (void) const;
 
   octave_value variable_value (void) const;
-  octave_value& variable_reference (void);
+  octave_variable_reference variable_reference (void);
 
   symbol_record *next (void) const;
 
   void chain (symbol_record *s);
 
   void push_context (void);
   void pop_context (void);
 
