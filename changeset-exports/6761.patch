# HG changeset patch
# User jwe
# Date 1182956886 0
#      Wed Jun 27 15:08:06 2007 +0000
# Node ID 813172f035de3c3eec2d7af5222927d75f8d64a9
# Parent  301885c9d265ffb66323897dd17c0bc05166036c
[project @ 2007-06-27 15:08:05 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2007-06-27  Kai Habel  <kai.habel@gmx.de>
+
+	* graphics.h (color_values::color_values): Arg is now std:string
+	instead of char.  Call str2rgb, not c2rgb.
+	* graphics.h, graphics.cc: (color_values::str2rgb): Rename from
+	c2rgb.  Handle long color names, not just single char abbreviations.
+
 2007-06-27  David Bateman  <dbateman@free.fr>
 	
 	* src/load-save.cc (Fsave): Ensure header is written for non
 	existent file with "-append".
 	* src/ls-hdf5.h: First steps towards having append work for hdf5.
 	
 2007-06-26  John W. Eaton  <jwe@octave.org>
 
@@ -32,17 +39,17 @@ 2007-06-18  Søren Hauberg  <hauberg@gmail.com>
 
 2007-06-15  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* graphics.h (OCTAVE_GRAPHICS_PROPERTY_INTERNAL,
 	OCTAVE_GRAPHICS_PROPERTY, OCTAVE_GRAPHICS_MUTABLE_PROPERTY):
 	New macros. Use them to declare individual properties and define
 	accessor methods for each property in the property classes.
 
-2007-06-15  Kai Habel <kai.habel@gmx.de>
+2007-06-15  Kai Habel  <kai.habel@gmx.de>
 
 	* graphics.cc (Fget, Fset): Handle vectors of handles.
 
 2007-06-14  John W. Eaton  <jwe@octave.org>
 
 	* sysdep.cc (octave_popen, octave_pclose): New functions.
 	* sysdep.h: Provide decls.
 
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -91,80 +91,62 @@ radio_values::radio_values (const std::s
 
       possible_vals.insert (t);
 
       beg = end + 1;
     }
 }
 
 bool
-color_values::c2rgb (char c)
+color_values::str2rgb (std::string str)
 {
   double tmp_rgb[3] = {0, 0, 0};
   bool retval = true;
-
-  switch(c) 
-    {
-    case 'k':
-      break;
-
-    case 'r':
-      tmp_rgb[0] = 1;	
-      break;	
-
-    case 'g': 
-      tmp_rgb[1] = 1;
-      break;
-
-    case 'b':
-      tmp_rgb[2] = 1; 
-      break;
+  unsigned int len = str.length();
 
-    case 'c': 	
-      tmp_rgb[1] = tmp_rgb[2] = 1;
-      break;
-
-    case 'm':
-      tmp_rgb[0] = tmp_rgb[2] = 1;
-      break;
-
-    case 'y': 
-      tmp_rgb[0] = tmp_rgb[1] = 1;
-      break;
-
-    case 'w': 
-      tmp_rgb[0] = tmp_rgb[1] = tmp_rgb[2] = 1;
-      break;
-
-    default:
-      retval = false;
-    }
+  if (str.compare(0, len, "blue", 0, len) == 0)
+    tmp_rgb[2] = 1;
+  else if (str.compare(0, len, "black", 0, len) == 0 || str.compare(0, len, "w", 0, len) == 0)
+    tmp_rgb[0] = tmp_rgb[1] = tmp_rgb[2] = 0;
+  else if (str.compare(0, len, "red", 0, len) == 0)
+    tmp_rgb[0] = 1;
+  else if (str.compare(0, len, "green", 0, len) == 0)
+    tmp_rgb[1] = 1;
+  else if (str.compare(0, len, "yellow", 0, len) == 0)
+    tmp_rgb[0] = tmp_rgb[1] = 1;
+  else if (str.compare(0, len, "magenta", 0, len) == 0)
+    tmp_rgb[0] = tmp_rgb[2] = 1;
+  else if (str.compare(0, len, "cyan", 0, len) == 0)
+    tmp_rgb[1] = tmp_rgb[2] = 1;
+  else if (str.compare(0, len, "white", 0, len) == 0)
+    tmp_rgb[0] = tmp_rgb[1] = tmp_rgb[2] = 1;
+  else	
+    retval = false;
 
   if (retval)
     {
       for (int i = 0; i < 3; i++)
 	xrgb[i] = tmp_rgb[i];
     }
 
   return retval;
 }
 
-
 color_property::color_property (const octave_value& val)
   : radio_val (), current_val ()
 {
   // FIXME -- need some error checking here.
 
   if (val.is_string ())
     {
       std::string s = val.string_value ();
 
       if (! s.empty ())
 	{
-	  color_values col (s[0]);
+	  color_values col (s);
 	  if (! error_state)
 	    {
 	      color_val = col;
 	      current_type = color_t;
 	    }
 	}
       else
 	error ("invalid color specification");	  
diff --git a/src/graphics.h b/src/graphics.h
--- a/src/graphics.h
+++ b/src/graphics.h
@@ -139,19 +139,19 @@ public:
   {
     xrgb[0] = r;
     xrgb[1] = g;
     xrgb[2] = b;
 
     validate ();
   }
 
-  color_values (const char c)
+  color_values (std::string str)
   {
-    if (! c2rgb (c))
+    if (! str2rgb (str))
       error ("invalid color specification");
   }
 
   color_values (const color_values& c)
   {
     xrgb[0] = c.xrgb[0];
     xrgb[1] = c.xrgb[1];
     xrgb[2] = c.xrgb[2];
@@ -182,17 +182,17 @@ public:
 	    break;
 	  }
       }
   }
 
 private:
   double xrgb[3];
 
-  bool c2rgb (char c);
+  bool str2rgb (std::string str);
 };
 
 
 class 
 color_property
 {
 public:
   color_property (const color_values& c = color_values (),
