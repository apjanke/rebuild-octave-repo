# HG changeset patch
# User jwe
# Date 1161895804 0
#      Thu Oct 26 20:50:04 2006 +0000
# Node ID ef9569e10d8b67a199fb8ba7b0a8ef9b04e3e23c
# Parent  9e70afeb2ebf797964d36ca769cebb47ec19fa58
[project @ 2006-10-26 20:50:04 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,14 +1,21 @@
 2006-10-26  Michael Goffioul  <michael.goffioul@swing.be>
 
 	* configure.in (*-*-msdosmsvc): Set library_path_var.
+	(XTRA_CRUFT_LINK_DEPS): New variable.  Substitute it.
 
 2006-10-26  John W. Eaton  <jwe@octave.org>
 
+	* configure.in (F77_TOLOWER, F77_APPEND_UNDERSCORE,
+	F77_APPEND_EXTRA_UNDERSCORE): New variables.  Substitute them.
+	* Makeconf.in (F77_TOLOWER, F77_APPEND_UNDERSCORE,
+	F77_APPEND_EXTRA_UNDERSCORE): Substitute here.
+	(do-subst-f77-mangling): New macro.
+
 	* emacs/octave-inf.el (inferior-octave-has-built-in-variables):
 	New defvar.
 	(inferior-octave-resync-dirs): Check to see whether Octave has
 	built-in variables and set inferior-octave-has-built-in-variables.
 	Check inferior-octave-has-built-in-variables to decide whether to
 	send commands that set built-in variables or call functions to
 	change Octave's behavior.
 	Send "disp (pwd ())" to Octave instead of just "pwd".
diff --git a/Makeconf.in b/Makeconf.in
--- a/Makeconf.in
+++ b/Makeconf.in
@@ -92,16 +92,20 @@ F2CFLAGS = @F2CFLAGS@
 
 FC = @FC@
 F77 = @F77@
 FFLAGS = @FFLAGS@
 FPICFLAG = @FPICFLAG@
 ALL_FFLAGS = $(FFLAGS)
 F77_FLOAT_STORE_FLAG = @F77_FLOAT_STORE_FLAG@
 
+F77_TOLOWER=@F77_TOLOWER@
+F77_APPEND_UNDERSCORE=@F77_TOLOWER@
+F77_APPEND_EXTRA_UNDERSCORE=@F77_TOLOWER@
+
 # cc and associated flags.
 
 DLFCN_INCFLAGS = @DLFCN_INCFLAGS@
 
 # Clean up INCFLAGS a bit if we are not compiling in a separate
 # directory.
 ifeq ($(srcdir),.)
   TMP_IF_1 = -I.
@@ -567,16 +571,25 @@ echo "making $@ from $<"
   -e "s|%library_path_var%|${library_path_var}|g" \
   -e "s|%srcdir%|${srcdir}|" \
   -e "s|%top_srcdir%|${top_srcdir}|" \
   -e "s|%abs_top_srcdir%|${abs_top_srcdir}|" \
   -e "s|%builddir%|$(shell pwd)|" > $@-t
 $(top_srcdir)/move-if-change $@-t $@
 endef
 
+define do-subst-f77-mangling
+echo "making $@ from $<"
+$(SED) < $< \
+  -e "s|%F77_TOLOWER%|${F77_TOLOWER}|g" \
+  -e "s|%F77_APPEND_UNDERSCORE%|${F77_APPEND_UNDERSCORE}|" \
+  -e "s|%F77_APPEND_EXTRA_UNDERSCORE%|${F77_APPEND_EXTRA_UNDERSCORE}|" > $@-t
+$(top_srcdir)/move-if-change $@-t $@
+endef
+
 define do-mkpkgadd
 $(top_srcdir)/mkpkgadd $(srcdir) > PKG_ADD.t
 if [ -n "`cat PKG_ADD.t`" ]; then \
   mv PKG_ADD.t PKG_ADD ; \
 else \
   rm -f PKG_ADD.t ; \
 fi
 endef
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.536 $)
+AC_REVISION($Revision: 1.537 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 OCTAVE_HOST_TYPE
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
@@ -287,16 +287,22 @@ AC_SUBST(DEPEND_EXTRA_SED_PATTERN)
 
 ### On Intel systems with gcc, we may need to compile with -mieee-fp
 ### and -ffloat-store to get full support for IEEE floating point.
 ###
 ### On Alpha/OSF systems, we need -mieee.
 
 ieee_fp_flag=
 case "$canonical_host_type" in
+  ## Keep this pattern first, so that it is preferred over the
+  ## following pattern for x86.
+  *-*-msdosmsvc)
+    CXXFLAGS="$CXXFLAGS -EHs -MD"
+    CFLAGS="$CFLAGS -MD"
+  ;;
   i[[3456789]]86-*-*)
     if test "$GCC" = yes; then
       OCTAVE_CC_FLAG(-mieee-fp, [
         ieee_fp_flag=-mieee-fp
         XTRA_CFLAGS="$XTRA_CFLAGS -mieee-fp"
         AC_MSG_NOTICE([adding -mieee-fp to XTRA_CFLAGS])])
 
 ###      OCTAVE_CC_FLAG(-ffloat-store, [
@@ -342,20 +348,16 @@ case "$canonical_host_type" in
   ;;
   *ibm-aix4*)
     OCTAVE_CC_FLAG(-mminimal-toc, [
       XTRA_CFLAGS="$XTRA_CFLAGS -mminimal-toc"])
 
     OCTAVE_CXX_FLAG(-mminimal-toc, [
       XTRA_CXXFLAGS="$XTRA_CXXFLAGS -mminimal-toc"])
   ;;
-  *-*-msdosmsvc)
-    CXXFLAGS="$CXXFLAGS -EHs -MD"
-    CFLAGS="$CFLAGS -MD"
-  ;;
 esac
 
 AC_SUBST(XTRA_CFLAGS)
 AC_SUBST(XTRA_CXXFLAGS)
 
 ### Use -static if compiling on Alpha OSF/1 1.3 systems.
 
 case "$canonical_host_type" in
@@ -633,23 +635,36 @@ if test "x$FFLAGS" = x; then
 fi
 
 # the F77 variable, if set, overrides AC_PROG_F77 automatically
 AC_PROG_F77
 
 have_fortran_compiler=false
 have_f2c=false
 
+F77_TOLOWER=true
+F77_APPEND_UNDERSCORE=true
+F77_APPEND_EXTRA_UNDERSCORE=true
 if $use_f2c; then
   have_f2c=true
 else
   if test -n "$F77"; then
     AC_F77_LIBRARY_LDFLAGS
     AC_F77_DUMMY_MAIN
     AC_F77_WRAPPERS
+    case "$ac_cv_f77_mangling" in
+      "upper case") F77_TOLOWER=false ;;
+    esac
+    case "$ac_cv_f77_mangling" in
+      "no underscore") F77_APPEND_UNDERSCORE=false ;;
+    esac
+    case "$ac_cv_f77_mangling" in
+      "no extra underscore") F77_APPEND_EXTRA_UNDERSCORE=false ;;
+    esac
+
     case "$canonical_host_type" in
       i[[3456789]]86-*-*)
         if test "$ac_cv_f77_compiler_gnu" = yes; then
 	  OCTAVE_F77_FLAG(-mieee-fp)
 ###          OCTAVE_F77_FLAG(-ffloat-store)
 	fi
       ;;
       alpha*-*-*)
@@ -672,16 +687,19 @@ else
     AC_CHECK_PROG(F2C, f2c, f2c, [])
     AC_ARG_VAR(F2C, [Fortran to C translator command])
     AC_ARG_VAR(F2CFLAGS, [Fortran to C translator flags])
     if test -n "$F2C"; then
       have_f2c=true
     fi
   fi
 fi
+AC_SUBST(F77_TOLOWER)
+AC_SUBST(F77_APPEND_UNDERSCORE)
+AC_SUBST(F77_APPEND_EXTRA_UNDERSCORE)
 
 f77_rules_frag=/dev/null
 if $have_fortran_compiler; then
   f77_rules_frag=Makefrag.f77
   cat << \EOF > $f77_rules_frag
 
 %.c : %.f
 
@@ -738,16 +756,25 @@ elif $have_f2c; then
 
 EOF
 else
   AC_MSG_WARN([in order to build octave, you must have a compatible])
   AC_MSG_WARN([Fortran compiler or f2c installed and in your path.])
   AC_MSG_ERROR([See the file INSTALL for more information.])
 fi
 
+XTRA_CRUFT_LINK_DEPS=
+case "$canonical_host_type" in
+  *-*-msdosmsvc)
+    FLIBS="$FLIBS -lkernel32"
+    XTRA_CRUFT_LINK_DEPS="-Wl,-def:cruft.def"
+  ;;
+esac
+AC_SUBST(XTRA_CRUFT_LINK_DEPS)
+
 FC=$F77
 AC_SUBST(FC)
 AC_SUBST_FILE(f77_rules_frag)
 
 OCTAVE_F77_FLAG(-ffloat-store, [
 AC_MSG_RESULT([setting F77_FLOAT_STORE_FLAG to -ffloat-store])
 F77_FLOAT_STORE_FLAG=-ffloat-store
 AC_SUBST(F77_FLOAT_STORE_FLAG)
diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,39 @@
+2006-10-26  Michael Goffioul  <michael.goffioul@swing.be>
+
+	* Makefile.in (XTRA_CRUFT_LINK_DEPS): Substitute.
+	(CRUFT_DEFS): New variable.
+	(LINK_DEPS): Include $(XTRA_CRUFT_LINK_DEPS) in the list.
+	(clean, mostlyclean, distclean): Delete cruft.def.
+	(cruft.def): New target.
+	(libraries): Depend on cruft.def.
+
+2006-10-26  John W. Eaton  <jwe@octave.org>
+
+	* Makefile.in ($(CRUFT_DEFS)): Depend on $(SUBDIRS).
+	(cruft.def): Depend on $(CRUFT_DEFS).
+	(libraries): Depend on cruft.def only.
+
+	* mk77def.in: New script template
+	* Makefile.in (DISTFILES): Include mk77def.in in the list.
+	($(SUBDIRS)): Depend on mk77def.
+	(mk77def): New target.
+	(CRUFT_DEFS): New variable.
+	* Makerules.in (CRUFT_FSRC, CRUFT_CSRC, CRUFT_CXXSRC): New variables.
+	(CRUFT_SRC): Define using $(CRUFT_FSRC), $(CRUFT_CSRC), and
+	$(CRUFT_CXXSRC).
+	(CRUFT_DEFS): New variable.
+	($(CRUFT_DEFS)): Depend on $(TOPDIR)/libcruft/mkf77def.
+	(%.def : %.f): New pattern rule.  Use mkf77def script to do
+	Fortran name mangling.
+	(clean, mostlyclean, distclean): Delete $(CRUFT_DEFS).
+	(all): Depend on $(CRUFT_DEFS)
+	Partially from Michael Goffioul  <michael.goffioul@swing.be>.
+
 2006-10-25  John W. Eaton  <jwe@octave.org>
 
 	* Makerules.in (XTRA_CDEFS, XTRA_CXXDEFS): Substitute here.
 
 2006-10-23  Paul Kienzle  <pkienzle@users.sf.net>
 
 	* misc/f77-fcn.h (F77_CHAR_ARG_DEF, F77_CONST_CHAR_ARG_DEF,
 	F77_CHAR_ARG_LEN_DEF, F77_CHAR_ARG_USE, F77_CHAR_ARG_LEN_USE,
diff --git a/libcruft/Makefile.in b/libcruft/Makefile.in
--- a/libcruft/Makefile.in
+++ b/libcruft/Makefile.in
@@ -34,38 +34,45 @@ CRUFT_DIRS = amos @BLAS_DIR@ blas-xtra d
 	slatec-err slatec-fn villad
 
 SUBDIRS = $(CRUFT_DIRS)
 
 DISTSUBDIRS = $(sort $(CRUFT_DIRS) blas fftpack lapack)
 
 CLEAN_SUBDIRS = $(DISTSUBDIRS)
 
-DISTFILES = Makefile.in ChangeLog Makerules.in $(SOURCES) STOP.patch
+DISTFILES = Makefile.in ChangeLog Makerules.in $(SOURCES) \
+	STOP.patch mkf77def.in
 
-# include BLAS and FFTW just in case some of libcruft depends on them
-LINK_DEPS = $(BLAS_LIBS) $(FFTW_LIBS) $(FLIBS)
+# Include BLAS and FFTW just in case some of libcruft depends on them
+XTRA_CRUFT_LINK_DEPS = @XTRA_CRUFT_LINK_DEPS@
+LINK_DEPS = $(BLAS_LIBS) $(FFTW_LIBS) $(FLIBS) $(XTRA_CRUFT_LINK_DEPS)
 
 all: libraries
 .PHONY: all
 
-$(SUBDIRS):
+mkf77def: mkf77def.in $(TOPDIR)/Makeconf
+	@$(do-subst-f77-mangling)
+	chmod a+rx $@
+
+$(SUBDIRS): mkf77def
 	$(MAKE) -C $@ all
 .PHONY: $(SUBDIRS)
 
 # FIXME -- this should build the shared library directly from
 # a normal archive file (created from PIC code, though).
 
 MISC_OBJ := misc/machar.o misc/f77-extern.o \
 	misc/f77-fcn.o misc/lo-error.o misc/quit.o misc/cquit.o
 
 CRUFT_FSRC := $(foreach dir, $(SUBDIRS), $(wildcard $(srcdir)/$(dir)/*.f))
 CRUFT_OBJ2 := $(patsubst $(srcdir)/%, %, $(CRUFT_FSRC))
 CRUFT_OBJ1 := $(patsubst %.f, %.o, $(CRUFT_OBJ2))
 CRUFT_OBJ := $(CRUFT_OBJ1) $(MISC_OBJ)
+CRUFT_DEFS := $(patsubst %.f, %.def, $(CRUFT_OBJ2))
 
 ifeq ($(SHARED_LIBS), true)
   ifdef FPICFLAG
     CRUFT_OBJ_DIR := $(dir $(CRUFT_OBJ))
     CRUFT_OBJ_PICDIR := $(addsuffix pic/, $(CRUFT_OBJ_DIR))
     CRUFT_OBJ_NOTDIR := $(notdir $(CRUFT_OBJ))
     CRUFT_PICOBJ := $(join $(CRUFT_OBJ_PICDIR), $(CRUFT_OBJ_NOTDIR))
   else
@@ -82,17 +89,23 @@ ifeq ($(SHARED_LIBS), true)
 else
   ifeq ($(STATIC_LIBS), true)
     LIBRARIES = $(LIBPRE)cruft.$(LIBEXT)
   else
     LIBRARIES =
   endif
 endif
 
-libraries: $(SUBDIRS)
+$(CRUFT_DEFS): $(SUBDIRS)
+
+cruft.def: $(CRUFT_DEFS)
+	echo "EXPORTS" > $@
+	cat $(CRUFT_DEFS) >> $@
+
+libraries: cruft.def
 	$(MAKE) $(LIBRARIES)
 .PHONY: libraries
 
 $(LIBPRE)cruft.$(LIBEXT): $(CRUFT_OBJ)
 	rm -f $@
 	$(AR) $(ARFLAGS) $@ $^
 	$(RANLIB) $@
 
@@ -156,17 +169,17 @@ tags::
 	ctags $(SOURCES)
 
 TAGS:: $(SOURCES)
 	etags $(SOURCES)
 
 clean mostlyclean distclean::
 	rm -f $(LIBPRE)cruft.$(LIBEXT) $(CRUFT_OBJ)
 	rm -f $(LIBPRE)cruft.$(SHLEXT_VER) $(LIBPRE)cruft.$(SHLEXT)
-	rm -f cruft.def
+	rm -f $(CRUFT_DEFS) cruft.def
 
 distclean maintainer-clean::
 	rm -f Makefile Makerules so_locations
 
 maintainer-clean::
 	rm -f tags TAGS
 
 dist:
diff --git a/libcruft/Makerules.in b/libcruft/Makerules.in
--- a/libcruft/Makerules.in
+++ b/libcruft/Makerules.in
@@ -12,21 +12,23 @@
 
 XTRA_CDEFS = @XTRA_CRUFT_DEFS@
 XTRA_CXXDEFS = @XTRA_CRUFT_DEFS@
 
 SOURCES = *.f
 
 DISTFILES = Makefile.in $(SOURCES) $(SPECIAL)
 
-CRUFT_SRC = $(wildcard $(srcdir)/*.f) \
-             $(wildcard $(srcdir)/*.c) \
-             $(wildcard $(srcdir)/*.cc)
+CRUFT_FSRC = $(wildcard $(srcdir)/*.f)
+CRUFT_CSRC = $(wildcard $(srcdir)/*.c)
+CRUFT_CXXSRC = $(wildcard $(srcdir)/*.cc)
+CRUFT_SRC = $(CRUFT_FSRC) $(CRUFT_CSRC) $(CRUFT_CXXSRC)
 CRUFT_BASE = $(basename $(notdir $(CRUFT_SRC)) )
 CRUFT_OBJ = $(addsuffix .o, $(CRUFT_BASE) )
+CRUFT_DEFS = $(patsubst %.f, %.def, $(notdir $(CRUFT_FSRC)))
 
 ifeq ($(SHARED_LIBS), true)
   ifdef FPICFLAG
     CRUFT_PICOBJ := $(addprefix pic/, $(CRUFT_OBJ))
   else
     CRUFT_PICOBJ := $(CRUFT_OBJ)
   endif
 endif
@@ -35,17 +37,17 @@ CWD = $(shell pwd)
 THISDIR = $(notdir $(CWD))
 
 LIBCRUFT_OBJS = $(CRUFT_OBJ) $(SPECIAL_DEPEND)
 
 ifeq ($(STATIC_LIBS), true)
   LIBCRUFT_DEPEND := $(LIBCRUFT_OBJS)
 endif
 
-all: pic $(LIBCRUFT_DEPEND) $(CRUFT_PICOBJ) $(SPECIAL_PICDEPEND)
+all: pic $(CRUFT_DEFS) $(LIBCRUFT_DEPEND) $(CRUFT_PICOBJ) $(SPECIAL_PICDEPEND)
 	@echo "warning: run make in parent directory to update libraries"
 .PHONY: all
 
 .PRECIOUS: $(LIBCRUFT_OBJS)
 
 stmp-pic: pic
 	@if [ -f stmp-pic ]; then \
 	  true; \
@@ -59,33 +61,40 @@ pic:
 	  true; \
 	else \
 	  echo "mkdir pic"; \
 	  mkdir pic; \
 	fi
 
 $(CRUFT_PICOBJ): stmp-pic
 
+$(CRUFT_DEFS): $(TOPDIR)/libcruft/mkf77def
+
+%.def : %.f
+	@echo "making $@ from $<"
+	@$(TOPDIR)/libcruft/mkf77def < $< > $@.t
+	$(top_srcdir)/move-if-change $@.t $@
+
 install:: all
 .PHONY: install
 
 install-strip:: all
 .PHONY: install-strip
 
 uninstall::
 .PHONY: uninstall
 
 tags: $(SOURCES)
 	ctags $(SOURCES)
 
 TAGS: $(SOURCES)
 	etags $(SOURCES)
 
 clean mostlyclean distclean maintainer-clean::
-	rm -f $(MAKEDEPS) $(CRUFT_OBJ) $(CRUFT_PICOBJ)
+	rm -f $(MAKEDEPS) $(CRUFT_OBJ) $(CRUFT_PICOBJ) $(CRUFT_DEFS)
 	-rmdir pic
 	rm -f stmp-pic
 .PHONY: clean mostlyclean
 
 distclean maintainer-clean::
 	rm -f Makefile
 .PHONY: distclean
 	
diff --git a/libcruft/mkf77def.in b/libcruft/mkf77def.in
new file mode 100644
--- /dev/null
+++ b/libcruft/mkf77def.in
@@ -0,0 +1,29 @@
+#! /bin/sh
+
+SED=${SED:-'sed'}
+AWK=${AWK:-'awk'}
+
+F77_TOLOWER=%F77_APPEND_UNDERSCORE%
+F77_APPEND_UNDERSCORE=%F77_APPEND_UNDERSCORE%
+F77_APPEND_EXTRA_UNDERSCORE=%F77_APPEND_EXTRA_UNDERSCORE%
+
+if $F77_TOLOWER; then
+  case_cmd="tolower";
+else
+  case_cmd="toupper";
+fi
+
+if $F77_APPEND_UNDERSCORE; then
+  uscore="_";
+else
+  uscore="";
+fi
+
+if $F77_APPEND_EXTRA_UNDERSCORE; then
+  awkcmd="$AWK '{ if (\$0 ~ /_/) extra = \"_\"; else extra = \"\"; printf (\"%s%s%s\n\", $case_cmd (\$0), \"$uscore\", extra); }'"
+else
+  awkcmd="$AWK '{ printf (\"%s%s\n\", tolower (\$0), \"$uscore\"); }'"
+fi
+
+$SED -n -e 's/^[ \t]*\([Ff][Uu][Nn][Cc][Tt][Ii][Oo][Nn]\|[Ss][Uu][Bb][Rr][Oo][Uu][Tt][Ii][Nn][Ee]\|[Ee][Nn][Tt][Rr][Yy]\)[ \t]*\([^ \t(]*\).*$/\2/p' | \
+  eval $awkcmd
