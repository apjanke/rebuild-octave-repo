# HG changeset patch
# User jwe
# Date 911513649 0
#      Thu Nov 19 22:14:09 1998 +0000
# Node ID dae85431bade49e113914c7a597073a0a917eedd
# Parent  eba59b8c64dcaa034321ef9a1a4485a20d8f5c1f
[project @ 1998-11-19 22:14:06 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,14 @@
+Thu Nov 19 16:07:57 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* aclocal.m4 (OCTAVE_CXX_PREPENDS_UNDERSCORE): New macro.
+	* configure.in: Use it.
+	* acconfig.h: Add #undef for it.
+
 Thu Nov 12 10:42:25 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* emacs/otags: New script from Mario Storti
 	<mstorti@minerva.unl.edu.ar>.
 	* emacs/Makefile.in: Add it to the list of files to distribute and
 	install.
 
 Wed Nov 11 17:26:26 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/acconfig.h b/acconfig.h
--- a/acconfig.h
+++ b/acconfig.h
@@ -12,16 +12,19 @@
 
 /* Define if you want bounds checking on element references for
    internal array and matrix classes. */
 #undef BOUNDS_CHECKING
 
 /* Define if your compiler supports `<>' stuff for template friends. */
 #undef CXX_NEW_FRIEND_TEMPLATE_DECL
 
+/* Define if your compiler prepends underscores to external names. */
+#undef CXX_PREPENDS_UNDERSCORE
+
 /* Define if your math.h declares struct exception for matherr() */
 #undef EXCEPTION_IN_MATH
 
 /* Define if your Fortran compiler appends an underscore to external
    names. */ 
 #undef F77_APPEND_UNDERSCORE
 
 /* Define if your Fortran compiler converts external names to
diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -705,17 +705,17 @@ AC_DEFUN(OCTAVE_CC_FLAG, [
 ])
 dnl
 dnl Check to see if C++ compiler handles FLAG command line option and
 dnl add it to CXXFLAGS if it does.
 dnl
 dnl OCTAVE_CXX_FLAG
 AC_DEFUN(OCTAVE_CXX_FLAG, [
   ac_safe=`echo "$1" | sed 'y%./+-%__p_%'`
-  AC_MSG_CHECKING(whether ${CXX-c++} accepts $1)
+  AC_MSG_CHECKING(whether ${CXX-g++} accepts $1)
   AC_CACHE_VAL(octave_cv_cxx_flag_$ac_safe, [
     AC_LANG_SAVE
     AC_LANG_CPLUSPLUS
     XCXXFLAGS="$CXXFLAGS"
     CXXFLAGS="$CXXFLAGS $1"
     AC_TRY_LINK([], [],
       eval "octave_cv_cxx_flag_$ac_safe=yes",
       eval "octave_cv_cxx_flag_$ac_safe=no")
@@ -802,22 +802,65 @@ else
     AC_MSG_WARN([])
     AC_MSG_WARN([at the Octave prompt.])
   fi
 fi
 ])
 dnl
 dnl Is DejaGNU installed?
 dnl
+dnl OCTAVE_PROG_RUNTEST
 AC_DEFUN(OCTAVE_PROG_RUNTEST,
 [if test "$cross_compiling" = yes; then
   RUNTEST=runtest
   AC_MSG_RESULT(assuming $RUNTEST exists on $canonical_host_type host)
   AC_SUBST(RUNTEST)
 else
   AC_CHECK_PROG(RUNTEST, runtest, runtest, [])
   if test -z "$RUNTEST"; then
     warn_runtest="I didn't find runtest -- install DejaGNU if you want to run \`make check'"
     AC_MSG_WARN($warn_runtest)
   fi
   AC_SUBST(RUNTEST)
 fi
 ])
+dnl
+dnl Find nm.
+dnl
+dnl OCTAVE_PROG_NM
+AC_DEFUN(OCTAVE_PROG_NM,
+[if test "$cross_compiling" = yes; then
+  NM=nm
+  AC_MSG_RESULT(assuming $NM exists on $canonical_host_type host)
+  AC_SUBST(NM)
+else
+  AC_CHECK_PROG(NM, nm, nm, [])
+  AC_SUBST(NM)
+fi
+])
+dnl
+dnl See if the C++ compiler prepends an underscore to external names.
+dnl
+dnl OCTAVE_CXX_PREPENDS_UNDERSCORE
+AC_DEFUN(OCTAVE_CXX_PREPENDS_UNDERSCORE,
+[AC_MSG_CHECKING([whether ${CXX-g++} prepends an underscore to external names])
+  AC_CACHE_VAL(octave_cv_cxx_prepends_underscore,
+    [octave_cv_cxx_prepends_underscore=no
+    AC_LANG_SAVE
+    AC_LANG_CPLUSPLUS
+    cat > conftest.$ac_ext <<EOF
+bool FSmy_dld_fcn (void) { }
+EOF
+    if AC_TRY_EVAL(ac_compile); then
+      if test "`${NM-nm} conftest.o | grep _FSmy_dld_fcn`" != ""; then
+        octave_cv_cxx_prepends_underscore=yes
+      fi
+    else
+      echo "configure: failed program was:" >&AC_FD_CC
+      cat conftest.$ac_ext >&AC_FD_CC
+    fi
+    AC_LANG_RESTORE
+  ])
+  AC_MSG_RESULT($octave_cv_cxx_prepends_underscore)
+  if test $octave_cv_cxx_prepends_underscore = yes; then
+    AC_DEFINE(CXX_PREPENDS_UNDERSCORE)
+  fi
+])
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -16,17 +16,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
-AC_REVISION($Revision: 1.311 $)
+AC_REVISION($Revision: 1.312 $)
 AC_PREREQ(2.9)
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1)
 
 OCTAVE_HOST_TYPE
 
@@ -291,16 +291,18 @@ case "$canonical_host_type" in
     LD_STATIC_FLAG=-static
   ;;
 esac
 if test -n "$LD_STATIC_FLAG"; then
   AC_MSG_RESULT([defining LD_STATIC_FLAG to be $LD_STATIC_FLAG])
 fi
 AC_SUBST(LD_STATIC_FLAG)
 
+OCTAVE_CXX_PREPENDS_UNDERSCORE
+
 ### We need these before trying to find libf2c.
 
 OCTAVE_PROG_AR
 
 AC_PROG_RANLIB
 
 ### If we haven't been forced to use a particular Fortran compiler,
 ### try to find one using any one of several common Un*x Fortran
@@ -1062,16 +1064,17 @@ case "$YACC" in
   *)
     warn_bison="I didn't find bison, but it's only a problem if you need to reconstruct parse.cc"
     AC_MSG_WARN($warn_bison)
   ;;
 esac
 
 AC_PROG_LN_S
 
+OCTAVE_PROG_NM
 OCTAVE_PROG_RUNTEST
 
 AC_PROG_INSTALL
 INSTALL_SCRIPT='${INSTALL}'
 AC_SUBST(INSTALL_SCRIPT)
 
 OCTAVE_PROG_GNUPLOT
 OCTAVE_PROG_PAGER
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 Thu Nov 19 14:30:25 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* dynamic-ld.cc (octave_dynamic_loader::mangle_name):
+	Prepend underscore here.
+	(octave_dynamic_loader::load_fcn_from_dot_oct_file): Not here.
+
 	* ov-re-mat.h (octave_matrix_value): Delete experimental code for
 	handling structure references for things like .rows, .cols, etc.
 
 Wed Nov 18 01:18:46 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (VAR_FILES): Be more careful about matching.
 	(DEF_FILES): Likewise.
 
diff --git a/src/dynamic-ld.cc b/src/dynamic-ld.cc
--- a/src/dynamic-ld.cc
+++ b/src/dynamic-ld.cc
@@ -235,51 +235,37 @@ octave_dynamic_loader::load_fcn_from_dot
 
   if (! oct_file.empty ())
     {
       string mangled_name = instance->mangle_name (fcn_name);
 
       builtin_fcn_installer f
 	= instance->resolve_reference (mangled_name, oct_file);
 
-
-      // XXX FIXME XXX -- this should probably be handled correctly by
-      // mangle_octave_oct_file_name using a configure test.
-
-      // Perhaps we should always check for both forms of the name and
-      // issue a warning if they both exist?  (I still think it would
-      // be best to use some configure test to determine exactly what
-      // form of the symbol name we should be looking for...)
-
-      if (! f)
-	{
-	  string t = "_";
-
-	  mangled_name = t.append (mangled_name);
-
-	  f = instance->resolve_reference (mangled_name, oct_file);
-	}
-
       if (f)
 	retval = f ();
     }
 
   return retval;
 }
 
 octave_dynamic_loader::builtin_fcn_installer
 octave_dynamic_loader::resolve_reference (const string&, const string&)
 {
   return 0;
 }
 
 string
 octave_dynamic_loader::mangle_name (const string& name)
 {
+#if defined (CXX_PREPENDS_UNDERSCORE)
+  string retval ("_FS");
+#else
   string retval ("FS");
+#endif
   retval.append (name);
   retval.append ("__Fv");
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
