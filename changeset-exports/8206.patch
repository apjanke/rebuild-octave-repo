# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1223618544 -7200
#      Fri Oct 10 08:02:24 2008 +0200
# Node ID 0168d22e6bba2c24342079e49cc65a9a3afef693
# Parent  5bf8a57f85d5910d0468df0ba14730090a02ae5b
fix sorting of non-POD objects

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2008-10-09  Jaroslav Hajek <highegg@gmail.com>
+
+	* oct-sort.cc (octave_sort<T>::merge_getmem,
+	octave_sort<T>::merge_freemem): Replace malloc -> new [], free ->
+	delete [].
+	(octave_sort<T>::merge_lo, octave_sort<T>::merge_hi): Replace
+	std::memcpy and std::memmove with std::copy.
+
 2008-10-08  John W. Eaton  <jwe@octave.org>
 
 	* Sparse-op-defs.h (SPARSE_SMSM_BOOL_OPS): Duplicate code for scalar
 	sparse arguments rather than rely on extern function.
 
 2008-10-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-inttypes.h (octave_base_int<T>::compute_threshold): Return
diff --git a/liboctave/oct-sort.cc b/liboctave/oct-sort.cc
--- a/liboctave/oct-sort.cc
+++ b/liboctave/oct-sort.cc
@@ -1,10 +1,11 @@
 /*
 Copyright (C) 2003, 2004, 2005, 2006, 2007 David Bateman
+Copyright (C) 2008 Jaroslav Hajek
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
 
@@ -22,16 +23,21 @@ no license header. However, thanks to Ti
 code I ripped-off.
 
 As required in the Python license the short description of the changes
 made are
 
 * convert the sorting code in listobject.cc into a generic class, 
   replacing PyObject* with the type of the class T.
 
+* replaced usages of malloc, free, memcpy and memmove by standard C++
+  new [], delete [] and std::copy. Note that replacing memmove by std::copy
+  is possible if the destination starts before the source.
+  
+
 The Python license is
 
   PSF LICENSE AGREEMENT FOR PYTHON 2.3
   --------------------------------------
 
   1. This LICENSE AGREEMENT is between the Python Software Foundation
   ("PSF"), and the Individual or Organization ("Licensee") accessing and
   otherwise using Python 2.3 software in source or binary form and its
@@ -79,17 +85,17 @@ The Python license is
   Agreement.
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cassert>
-#include <cstdlib>
+#include <algorithm>
 #include <cstring>
 
 #include "lo-mappers.h"
 #include "quit.h"
 #include "oct-sort.h"
 
 #ifndef IFLT
 #define IFLT(a,b)  if (compare ? compare ((a), (b)) : ((a) < (b)))
@@ -429,18 +435,17 @@ octave_sort<T>::merge_init (void)
 /* Free all the temp memory owned by the MergeState.  This must be called
  * when you're done with a MergeState, and may be called before then if
  * you want to free the temp memory early.
  */
 template <class T>
 void
 octave_sort<T>::merge_freemem (void)
 {
-  if (ms.a)
-    free (ms.a);
+  delete [] ms.a;
   ms.alloced = 0;
   ms.a = 0;
 }
 
 static inline octave_idx_type
 roundupsize (octave_idx_type n)
 {
   unsigned int nbits = 3;
@@ -487,17 +492,17 @@ octave_sort<T>::merge_getmem (octave_idx
   if (need <= ms.alloced)
     return 0;
 
   need = roundupsize (need); 
   /* Don't realloc!  That can cost cycles to copy the old data, but
    * we don't care what's in the block.
    */
   merge_freemem ();
-  ms.a = static_cast <T *> (malloc (need * sizeof (T)));
+  ms.a = new T[need];
   if (ms.a)
     {
       ms.alloced = need;
       return 0;
     }
   merge_freemem ();	/* reset to sane state */
 
   return -1;
@@ -517,17 +522,17 @@ octave_sort<T>::merge_lo (T *pa, octave_
 {
   octave_idx_type k;
   T *dest;
   int result = -1;	/* guilty until proved innocent */
   octave_idx_type min_gallop = ms.min_gallop;
 
   if (MERGE_GETMEM (na) < 0)
     return -1;
-  std::memcpy (ms.a, pa, na * sizeof (T));
+  std::copy (pa, pa + na, ms.a);
   dest = pa;
   pa = ms.a;
 
   *dest++ = *pb++;
   --nb;
   if (nb == 0)
     goto Succeed;
   if (na == 1)
@@ -579,17 +584,17 @@ octave_sort<T>::merge_lo (T *pa, octave_
 	  min_gallop -= min_gallop > 1;
 	  ms.min_gallop = min_gallop;
 	  k = gallop_right (*pb, pa, na, 0);
 	  acount = k;
 	  if (k)
 	    {
 	      if (k < 0)
 		goto Fail;
-	      std::memcpy (dest, pa, k * sizeof (T));
+              std::copy (pa, pa + k, dest);
 	      dest += k;
 	      pa += k;
 	      na -= k;
 	      if (na == 1)
 		goto CopyB;
 	      /* na==0 is impossible now if the comparison
 	       * function is consistent, but we can't assume
 	       * that it is.
@@ -603,17 +608,17 @@ octave_sort<T>::merge_lo (T *pa, octave_
 	    goto Succeed;
 
 	  k = gallop_left (*pa, pb, nb, 0);
 	  bcount = k;
 	  if (k)
 	    {
 	      if (k < 0)
 		goto Fail;
-	      std::memmove (dest, pb, k * sizeof (T));
+              std::copy (pb, pb + k, dest);
 	      dest += k;
 	      pb += k;
 	      nb -= k;
 	      if (nb == 0)
 		goto Succeed;
 	    }
 	  *dest++ = *pa++;
 	  --na;
@@ -626,22 +631,22 @@ octave_sort<T>::merge_lo (T *pa, octave_
       ms.min_gallop = min_gallop;
     }
 
  Succeed:
   result = 0;
 
  Fail:
   if (na)
-    std::memcpy (dest, pa, na * sizeof (T));
+    std::copy (pa, pa + na, dest);
   return result;
 
  CopyB:
   /* The last element of pa belongs at the end of the merge. */
-  std::memmove (dest, pb, nb * sizeof (T));
+  std::copy (pb, pb + nb, dest);
   dest[nb] = *pa;
 
   return 0;
 }
 
 /* Merge the na elements starting at pa with the nb elements starting at pb
  * in a stable way, in-place.  na and nb must be > 0, and pa + na == pb.
  * Must also have that *pb < *pa, that pa[na-1] belongs at the end of the
@@ -657,17 +662,17 @@ octave_sort<T>::merge_hi (T *pa, octave_
   int result = -1;	/* guilty until proved innocent */
   T *basea;
   T *baseb;
   octave_idx_type min_gallop = ms.min_gallop;
 
   if (MERGE_GETMEM (nb) < 0)
     return -1;
   dest = pb + nb - 1;
-  std::memcpy (ms.a, pb, nb * sizeof (T));
+  std::copy (pb, pb + nb, ms.a);
   basea = pa;
   baseb = ms.a;
   pb = ms.a + nb - 1;
   pa += na - 1;
 
   *dest-- = *pa--;
   --na;
   if (na == 0)
@@ -723,17 +728,17 @@ octave_sort<T>::merge_hi (T *pa, octave_
 	  if (k < 0)
 	    goto Fail;
 	  k = na - k;
 	  acount = k;
 	  if (k) 
 	    {
 	      dest -= k;
 	      pa -= k;
-	      std::memmove (dest+1, pa+1, k * sizeof (T));
+              std::copy (pa+1, pa+1 + k, dest+1);
 	      na -= k;
 	      if (na == 0)
 		goto Succeed;
 	    }
 	  *dest-- = *pb--;
 	  --nb;
 	  if (nb == 1)
 	    goto CopyA;
@@ -742,17 +747,17 @@ octave_sort<T>::merge_hi (T *pa, octave_
 	  if (k < 0)
 	    goto Fail;
 	  k = nb - k;
 	  bcount = k;
 	  if (k) 
 	    {
 	      dest -= k;
 	      pb -= k;
-	      std::memcpy (dest+1, pb+1, k * sizeof (T));
+              std::copy (pb+1, pb+1 + k, dest+1);
 	      nb -= k;
 	      if (nb == 1)
 		goto CopyA;
 	      /* nb==0 is impossible now if the comparison
 	       * function is consistent, but we can't assume
 	       * that it is.
 	       */
 	      if (nb == 0)
@@ -767,24 +772,24 @@ octave_sort<T>::merge_hi (T *pa, octave_
       ms.min_gallop = min_gallop;
     }
 
 Succeed:
   result = 0;
 
 Fail:
   if (nb)
-    std::memcpy (dest-(nb-1), baseb, nb * sizeof (T));
+    std::copy (baseb, baseb + nb, dest-(nb-1));
   return result;
 
 CopyA:
   /* The first element of pb belongs at the front of the merge. */
   dest -= na;
   pa -= na;
-  std::memmove (dest+1, pa+1, na * sizeof (T));
+  std::copy (pa+1, pa+1 + na, dest+1);
   *dest = *pb;
 
   return 0;
 }
 
 /* Merge the two runs at stack indices i and i+1.
  * Returns 0 on success, -1 on error.
  */
