# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1220039324 14400
#      Fri Aug 29 15:48:44 2008 -0400
# Node ID a028a5960e1896b2ccc84507e3397829666ce0df
# Parent  595028fcf65d29758f9763bf6791ad19002a6218
Fix for hold with no figures/axes. Set prop/val pairs to hggroups rather than underlying objects. Fix for equality test in array_property

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,23 @@
+2008-08-29  David Bateman  <dbateman@free.fr>
+
+	* plot/__plt2mm__.m, plot/__plt2mv__.m, plot/__plt2ss__.m,
+	plot/__plt2sv__.m, plot/__plt2vm__.m, plot/__plt2vs__.m,
+	plot/__plt2vv__.m, plot/plot3.m, plot/__area__.m, plot/__bars__.m,
+	plot/__quiver__.m, plot/__stem__.m, plot/stairs.m :
+	Pass additional prop/val pairs to hggroup rather than underlying
+	objects. If a baseline existings specifically associate it with
+	the parent of the created hggroup to allow things like "stem(...,
+	'parent', hg)" to work correctly.
+	* plot/hold.m: If currentaxes if figure doesn't exist, create it.
+
+	* plot/plot3.m: Pass hline to __add_line_series__.
+	* plot/__add_datasource__.m: Fix off by one error.
+
 2008-08-28  David Bateman  <dbateman@free.fr>
 
 	* plot/__add_line_series__.m, plot/ishghandle.m, plot/linkprop.m,
 	plot/refresh.m, plot/refreshdata.m: New functions
 	* Makefile.in (SOURCES): Add them here.
 	
 	* plot/__area__.m, plot/__bars__.m, plot/__quiver__.m,
 	plot/__stem__.m, plot/stairs.m, plot/stem.m: Add data sources.
diff --git a/scripts/plot/__area__.m b/scripts/plot/__area__.m
--- a/scripts/plot/__area__.m
+++ b/scripts/plot/__area__.m
@@ -33,21 +33,21 @@ function retval = __area__ (ax, x, y, bv
     addproperty ("xdata", hg, "data", x1);
     addproperty ("ydata", hg, "data", y1);
 
     addlistener (hg, "xdata", @update_data);
     addlistener (hg, "ydata", @update_data);
 
     if (i == 1)
       h = patch (ax, [x1(1), x1, fliplr(x1)], [bv, y1, bv*ones(1, length(y1))],
-		 __next_line_color__ (), "parent", hg, args{:});
+		 __next_line_color__ (), "parent", hg);
     else
       y1 = y0 + y1;
       h = patch (ax, [x1(1), x1, fliplr(x1)], [y0(1), y1, fliplr(y0)],
-		 __next_line_color__ (), "parent", hg, args{:});
+		 __next_line_color__ (), "parent", hg);
     endif
 
     y0 = y1;
 
     addproperty ("basevalue", hg, "data", bv);
     addlistener (hg, "basevalue", @move_baseline); 
 
     addproperty ("edgecolor", hg, "patchedgecolor", get (h, "edgecolor"));
@@ -57,16 +57,18 @@ function retval = __area__ (ax, x, y, bv
 
     addlistener (hg, "edgecolor", @update_props);
     addlistener (hg, "linewidth", @update_props); 
     addlistener (hg, "linestyle", @update_props); 
     addlistener (hg, "facecolor", @update_props); 
 
     addproperty ("areagroup", hg, "data");
     set (retval, "areagroup", retval);
+
+    set (hg, args{:});
   endfor
 
 endfunction
 
 function update_props (h, d)
   kids = get (h, "children");
   set (kids, "edgecolor", get (h, "edgecolor"), 
        "linewidth", get (h, "linewidth"),
diff --git a/scripts/plot/__bars__.m b/scripts/plot/__bars__.m
--- a/scripts/plot/__bars__.m
+++ b/scripts/plot/__bars__.m
@@ -34,31 +34,31 @@ function tmp = __bars__ (ax, vertical, x
     if (vertical)
       if (! have_color_spec)
 	if (ycols == 1)
 	  lev = clim(1);
 	else
 	  lev = (i - 1) * (clim(2) - clim(1)) / (ycols - 1) - clim(1);
 	endif
 	h = patch(xb(:,:,i), yb(:,:,i), "FaceColor", "flat", 
-		  "cdata", lev, "parent", hg, args{:});
+		  "cdata", lev, "parent", hg);
       else
-	h = patch(xb(:,:,i), yb(:,:,i), "parent", hg, args{:});
+	h = patch(xb(:,:,i), yb(:,:,i), "parent", hg);
       endif
     else
       if (! have_color_spec)
 	if (ycols == 1)
 	  lev = clim(1)
 	else
 	  lev = (i - 1) * (clim(2) - clim(1)) / (ycols - 1) - clim(1);
 	endif
 	h = patch(yb(:,:,i), xb(:,:,i), "FaceColor", "flat", 
-		  "cdata", lev, "parent", hg, args{:});
+		  "cdata", lev, "parent", hg);
       else
-	h = patch(yb(:,:,i), xb(:,:,i), "parent", hg, args{:});
+	h = patch(yb(:,:,i), xb(:,:,i), "parent", hg);
       endif
     endif
 
     if (i == 1)
       x_axis_range = get (ax, "xlim");
       h_baseline = line (x_axis_range, [0, 0], "color", [0, 0, 0]);
       set (h_baseline, "handlevisibility", "off");
       set (h_baseline, "xliminclude", "off");
@@ -108,16 +108,20 @@ function tmp = __bars__ (ax, vertical, x
     endif
     addproperty ("ydata", hg, "data", y(:, i));
  
     addlistener (hg, "xdata", @update_data);
     addlistener (hg, "ydata", @update_data);
 
     addproperty ("bargroup", hg, "data");
     set (tmp, "bargroup", tmp);
+    set (hg, args{:});
+    if (i == 1)
+      set (h_baseline, "parent", get (hg, "parent"));
+    endif
   endfor
 
   update_xlim (ax, []);
 endfunction
 
 function update_xlim (h, d)
   kids = get (h, "children");
   xlim = get (h, "xlim");
diff --git a/scripts/plot/__plt2mm__.m b/scripts/plot/__plt2mm__.m
--- a/scripts/plot/__plt2mm__.m
+++ b/scripts/plot/__plt2mm__.m
@@ -57,19 +57,20 @@ function retval = __plt2mm__ (h, x, y, o
 
 	hg = hggroup ();
 	retval(i) = hg;
 	args = __add_datasource__ ("__plt2mm__", hg, {"x", "y", "z"}, 
 				   properties{:});
 
 	h = line (x(:,i), y(:,i), "keylabel", tkey, "color", color,
 		  "linestyle", options(i).linestyle,
-		  "marker", options(i).marker, "parent", hg, args{:});
+		  "marker", options(i).marker, "parent", hg);
 
 	__add_line_series__ (h, hg);
+	set (hg, args {:});
       endfor
     else
       error ("__plt2mm__: arguments must be a matrices");
     endif
   else
     error ("__plt2mm__: matrix dimensions must match");
   endif
 
diff --git a/scripts/plot/__plt2mv__.m b/scripts/plot/__plt2mv__.m
--- a/scripts/plot/__plt2mv__.m
+++ b/scripts/plot/__plt2mv__.m
@@ -73,17 +73,18 @@ function retval = __plt2mv__ (h, x, y, o
 
       hg = hggroup ();
       retval(i) = hg;
       args = __add_datasource__ ("__plt2mv__", hg, {"x", "y", "z"}, 
 				 properties{:});
 
       h = line (x(:,i), y, "keylabel", tkey, "color", color,
 		"linestyle", options(i).linestyle,
-		"marker", options(i).marker, "parent", hg, args{:});
+		"marker", options(i).marker, "parent", hg);
    
       __add_line_series__ (h, hg);
+      set (hg, args{:});
     endfor
   else
     error ("__plt2mv__: arguments must be a matrices");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2ss__.m b/scripts/plot/__plt2ss__.m
--- a/scripts/plot/__plt2ss__.m
+++ b/scripts/plot/__plt2ss__.m
@@ -54,16 +54,17 @@ function retval = __plt2ss__ (h, x, y, o
 
     hg = hggroup ();
     retval = hg;
     properties = __add_datasource__ ("__plt2ss__", hg, {"x", "y", "z"}, 
 				     properties{:});
 
     h = line (x, y, "keylabel", key, "color", color,
 	      "linestyle", options.linestyle,
-	      "marker", options.marker, "parent", hg, properties{:});
+	      "marker", options.marker, "parent", hg);
 
     __add_line_series__ (h, hg);
+    set (hg, properties{:});
   else
     error ("__plt2ss__: arguments must be scalars");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2sv__.m b/scripts/plot/__plt2sv__.m
--- a/scripts/plot/__plt2sv__.m
+++ b/scripts/plot/__plt2sv__.m
@@ -53,17 +53,18 @@ function retval = __plt2sv__ (h, x, y, o
 
       hg = hggroup ();
       retval(i) = hg;
       args = __add_datasource__ ("__plt2sv__", hg, {"x", "y", "z"}, 
 				 properties{:});
 
       h = line (x, y(i), "keylabel", tkey, "color", color,
 		"linestyle", options(i).linestyle,
-		"marker", options(i).marker, "parent", hg, args{:});
+		"marker", options(i).marker, "parent", hg);
 
       __add_line_series__ (h, hg);
+      set (hg, args{:});
     endfor
   else
     error ("__plt2sv__: first arg must be scalar, second arg must be vector");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2vm__.m b/scripts/plot/__plt2vm__.m
--- a/scripts/plot/__plt2vm__.m
+++ b/scripts/plot/__plt2vm__.m
@@ -73,18 +73,18 @@ function retval = __plt2vm__ (h, x, y, o
 
       hg = hggroup ();
       retval(i) = hg;
       args = __add_datasource__ ("__plt2vm__", hg, {"x", "y", "z"}, 
 				 properties{:});
 
       h = line (x, y(:,i), "keylabel", tkey, "color", color,
 		"linestyle", options(i).linestyle,
-		"marker", options(i).marker, "parent", hg, args{:});
+		"marker", options(i).marker, "parent", hg);
 
       __add_line_series__ (h, hg);
-
+      set (hg, args{:});
     endfor
   else
     error ("__plt2vm__: arguments must be a matrices");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2vs__.m b/scripts/plot/__plt2vs__.m
--- a/scripts/plot/__plt2vs__.m
+++ b/scripts/plot/__plt2vs__.m
@@ -53,17 +53,18 @@ function retval = __plt2vs__ (h, x, y, o
 
       hg = hggroup ();
       retval(i) = hg;
       args = __add_datasource__ ("__plt2vs__", hg, {"x", "y", "z"}, 
 				 properties{:});
 
       h = line (x(i), y, "keylabel", tkey, "color", color,
 		"linestyle", options(i).linestyle,
-		"marker", options(i).marker, "parent", hg, args{:});
+		"marker", options(i).marker, "parent", hg);
 
       __add_line_series__ (h, hg);
+      set (hg, args{:});
     endfor
   else
     error ("__plt2vs__: first arg must be vector, second arg must be scalar");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2vv__.m b/scripts/plot/__plt2vv__.m
--- a/scripts/plot/__plt2vv__.m
+++ b/scripts/plot/__plt2vv__.m
@@ -68,16 +68,17 @@ function retval = __plt2vv__ (h, x, y, o
 
     hg = hggroup ();
     retval = hg;
     properties = __add_datasource__ ("__plt2vv__", hg, {"x", "y", "z"}, 
 				     properties{:});
 
     h = line (x, y, "keylabel", key, "color", color,
 	      "linestyle", options.linestyle,
-	      "marker", options.marker, "parent", hg, properties{:});
+	      "marker", options.marker, "parent", hg);
 
     __add_line_series__ (h, hg);
+    set (hg, properties{:});
   else
     error ("__plt2vv__: vector lengths must match");
   endif
 
 endfunction
diff --git a/scripts/plot/__quiver__.m b/scripts/plot/__quiver__.m
--- a/scripts/plot/__quiver__.m
+++ b/scripts/plot/__quiver__.m
@@ -166,33 +166,33 @@ function hg = __quiver__ (varargin)
     endif
 
     if (have_line_spec)
       if (is3d)
 	h1 = plot3 ([x.'; xend.'; NaN(1, length (x))](:),
 		    [y.'; yend.'; NaN(1, length (y))](:),
 		    [z.'; zend.'; NaN(1, length (z))](:),
 		    "linestyle", linespec.linestyle, 
-		    "color", linespec.color, "parent", hg, args{:});
+		    "color", linespec.color, "parent", hg);
       else
 	h1 = plot ([x.'; xend.'; NaN(1, length (x))](:),
 		   [y.'; yend.'; NaN(1, length (y))](:),
 		   "linestyle", linespec.linestyle, 
-		    "color", linespec.color, "parent", hg, args{:});
+		    "color", linespec.color, "parent", hg);
       endif
     else
       if (is3d)
 	h1 = plot3 ([x.'; xend.'; NaN(1, length (x))](:),
 		    [y.'; yend.'; NaN(1, length (y))](:),
 		    [z.'; zend.'; NaN(1, length (z))](:),
-		    "parent", hg, args{:});
+		    "parent", hg);
       else
 	h1 = plot ([x.'; xend.'; NaN(1, length (x))](:),
 		   [y.'; yend.'; NaN(1, length (y))](:),
-		   "parent", hg, args{:});
+		   "parent", hg);
       endif
     endif
 
     xtmp = x + uu(:) .* (1 - arrowsize);
     ytmp = y + vv(:) .* (1 - arrowsize);
     xarrw1 = xtmp + (y - yend) * arrowsize / 3;
     xarrw2 = xtmp - (y - yend) * arrowsize / 3;
     yarrw1 = ytmp - (x - xend) * arrowsize / 3;
@@ -290,16 +290,17 @@ function hg = __quiver__ (varargin)
 
     addlistener (hg, "color", @update_props);
     addlistener (hg, "linewidth", @update_props); 
     addlistener (hg, "linestyle", @update_props); 
     addlistener (hg, "marker", @update_props); 
     addlistener (hg, "markerfacecolor", @update_props); 
     addlistener (hg, "markersize", @update_props);
 
+    set (hg, args{:});
   unwind_protect_cleanup
     set (h, "nextplot", hstate);
   end_unwind_protect
 
 endfunction
 
 function update_data (h, d)
   x = get (h, "xdata");
diff --git a/scripts/plot/__stem__.m b/scripts/plot/__stem__.m
--- a/scripts/plot/__stem__.m
+++ b/scripts/plot/__stem__.m
@@ -54,17 +54,17 @@ function h = __stem__ (have_z, varargin)
 	xt = x(:, i)';
 	xt = [xt; xt; NaN(1, nx)](:);
 	yt = y(:, i)';
 	yt = [zeros(1, nx); yt; NaN(1, nx)](:);
       endif
 
       hg  = hggroup ();
       h = [h; hg];
-      __add_datasource__ (caller, hg, {"x", "y", "z"}, varargin{:});
+      args = __add_datasource__ (caller, hg, {"x", "y", "z"}, varargin{:});
       
       if (i == 1)
 	set (ax, "nextplot", "add");
       endif
 
       if (isempty (llc))
 	lc = __next_line_color__ ();
       else
@@ -137,16 +137,21 @@ function h = __stem__ (have_z, varargin)
 	addproperty ("zdata", hg, "data", z(:, i));
       else
 	addproperty ("zdata", hg, "data", []);
       endif
 
       addlistener (hg, "xdata", @update_data);
       addlistener (hg, "ydata", @update_data);
       addlistener (hg, "zdata", @update_data);
+
+      set (hg, args{:});
+      if (i == 1 && !isempty(h_baseline))
+	set (h_baseline, "parent", get (hg, "parent"));
+      endif
     endfor
 
   unwind_protect_cleanup
     set (ax, "nextplot", hold_state);
     axes (oldax);
   end_unwind_protect
 endfunction
 
diff --git a/scripts/plot/hold.m b/scripts/plot/hold.m
--- a/scripts/plot/hold.m
+++ b/scripts/plot/hold.m
@@ -70,15 +70,18 @@ function hold (varargin)
 	print_usage ();
       endif
     endif
   else
     print_usage ();
   endif
 
   if (isfigure (h))
+    if (isempty (get (h, "currentaxes")))
+      set (h, "currentaxes", __go_axes__ (h))
+    endif
     axes_objs = findobj (h, "type", "axes");
     h = [h; axes_objs];
   endif
 
   set (h, "nextplot", hold_state);
 
 endfunction
diff --git a/scripts/plot/plot3.m b/scripts/plot/plot3.m
--- a/scripts/plot/plot3.m
+++ b/scripts/plot/plot3.m
@@ -175,19 +175,27 @@ function retval = plot3 (varargin)
       if (! isempty (key))
 	set (gca (), "key", "on");
       endif
       color = options.color;
       if (isempty (options.color))
 	color = __next_line_color__ ();
       endif
 
-      tmp(++idx) = line (x(:), y(:), z(:),  "keylabel", key, "color", color,
-			 "linestyle", options.linestyle,
-			 "marker", options.marker, properties{:});
+      hg = hggroup ();
+      tmp(++idx) = hg;
+      properties = __add_datasource__ ("plot3", hg, {"x", "y", "z"}, properties{:});
+
+      hline = line (x(:), y(:), z(:),  "keylabel", key, "color", color,
+		    "linestyle", options.linestyle,
+		    "marker", options.marker, "parent", hg);
+
+      __add_line_series__ (hline, hg);
+
+      set (hg, properties{:});
 
       x_set = 0;
       y_set = 0;
       z_set = 0;
       fmt_set = 0;
       properties = {};
     elseif (! x_set)
       x = new;
@@ -226,19 +234,21 @@ function retval = plot3 (varargin)
       endif
 
       hg = hggroup ();
       tmp(++idx) = hg;
       properties = __add_datasource__ ("plot3", hg, {"x", "y", "z"}, properties{:});
 
       hline = line (x(:), y(:), z(:),  "keylabel", key, "color", color,
 		    "linestyle", options.linestyle,
-		    "marker", options.marker, "parent", hg, properties{:});
+		    "marker", options.marker, "parent", hg);
 
-      __add_line_series__ (h, hg);
+      __add_line_series__ (hline, hg);
+
+      set (hg, properties{:});
 
       x = new;
       y_set = 0;
       z_set = 0;
       fmt_set = 0;
       properties = {};
     endif
 
@@ -296,19 +306,20 @@ function retval = plot3 (varargin)
     endif
 
     hg = hggroup ();
     tmp(++idx) = hg;
     properties = __add_datasource__ ("plot3", hg, {"x", "y", "z"}, properties{:});
 
     hline = line (x(:), y(:), z(:),  "keylabel", key, "color", color,
 		  "linestyle", options.linestyle,
-		  "marker", options.marker, "parent", hg, properties{:});
+		  "marker", options.marker, "parent", hg);
 
-    __add_line_series__ (h, hg);
+    __add_line_series__ (hline, hg);
+
   endif
 
   set (gca (), "view", [-37.5, 30]);
 
   if (nargout > 0 && idx > 0)
     retval = tmp;
   endif
 
diff --git a/scripts/plot/stairs.m b/scripts/plot/stairs.m
--- a/scripts/plot/stairs.m
+++ b/scripts/plot/stairs.m
@@ -141,29 +141,25 @@ function [h, xs, ys] = __stairs__ (doplo
     h = [];
     unwind_protect
       hold_state = get (gca (), "nextplot");
       for i = 1 : size(y, 2)
 	hg = hggroup ();
 	h = [h; hg];
 	args = __add_datasource__ ("stairs", hg, {"x", "y"}, varargin{:});
 
-	if (i == 1)
-	  set (gca (), "nextplot", "add");
-	endif
-
 	addproperty ("xdata", hg, "data", x(:,i).');
 	addproperty ("ydata", hg, "data", y(:,i).');
 
 	addlistener (hg, "xdata", @update_data);
 	addlistener (hg, "ydata", @update_data);
 
 	tmp = line (xs(:,i).', ys(:,i).', "color", __next_line_color__ (),
-		    "parent", hg, args{:});
-	
+		    "parent", hg);
+
         addproperty ("color", hg, "linecolor", get (tmp, "color"));
 	addproperty ("linewidth", hg, "linelinewidth", get (tmp, "linewidth"));
 	addproperty ("linestyle", hg, "linelinestyle", get (tmp, "linestyle"));
 
 	addproperty ("marker", hg, "linemarker", get (tmp, "marker"));
 	addproperty ("markerfacecolor", hg, "linemarkerfacecolor",
 		     get (tmp, "markerfacecolor"));
 	addproperty ("markeredgecolor", hg, "linemarkeredgecolor",
@@ -173,16 +169,18 @@ function [h, xs, ys] = __stairs__ (doplo
 
 	addlistener (hg, "color", @update_props);
 	addlistener (hg, "linewidth", @update_props); 
 	addlistener (hg, "linestyle", @update_props); 
 	addlistener (hg, "marker", @update_props); 
 	addlistener (hg, "markerfacecolor", @update_props); 
 	addlistener (hg, "markeredgecolor", @update_props); 
 	addlistener (hg, "markersize", @update_props); 
+
+	set (hg, args{:});
       endfor
     unwind_protect_cleanup
       set (gca (), "nextplot", hold_state);
     end_unwind_protect
   else
     h = 0;
   endif
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2008-08-29  David Bateman  <dbateman@free.fr>
+
+	* src/graphics.cc: Replace int by octave_idx_type in multiple
+	places.
+	(array_property::is_equal): In macro CHECK_ARRAY_EQUAL, special
+	case scalar case and keep copy of array value to avoid early
+	destruction of converted array values.
+	
 2008-08-28  David Bateman  <dbateman@free.fr>
 
 	* graphics.h.in (root_figure::properties::showhiddenhandles):
 	New property.
 
 2008-08-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/__glpk__.cc (F__glpk__): Initialize output vectors 
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -314,62 +314,62 @@ convert_cdata (const base_properties& pr
 	}
     }
 
   dv.resize (cdim);
   dv(cdim-1) = 3;
 
   NDArray a (dv);
 
-  int lda = static_cast<int> (a.numel () / 3);
-  int nc = cmap.rows ();
+  octave_idx_type lda = a.numel () / static_cast<octave_idx_type> (3);
+  octave_idx_type nc = cmap.rows ();
 
   double *av = a.fortran_vec ();
   const double *cmapv = cmap.data ();
   const double *cv = 0;
   const octave_uint8 *icv = 0;
 
   if (cdata.is_integer_type ())
     icv = cdata.uint8_array_value ().data ();
   else
     cv = cdata.array_value ().data ();
 
-  for (int i = 0; i < lda; i++)
+  for (octave_idx_type i = 0; i < lda; i++)
     {
       double x = (cv ? cv[i] : double (icv[i]));
 
       if (is_scaled)
 	x = xround ((nc - 1) * (x - clim(0)) / (clim(1) - clim(0)));
       else
 	x = xround (x - 1);
 
       if (x < 0)
 	x = 0;
       else if (x >= nc)
 	x = (nc - 1);
 
-      int idx = static_cast<int> (x);
+      octave_idx_type idx = static_cast<octave_idx_type> (x);
 
       av[i]       = cmapv[idx];
       av[i+lda]   = cmapv[idx+nc];
       av[i+2*lda] = cmapv[idx+2*nc];
     }
 
   return octave_value (a);
 }
 
 template<class T>
 static void
 get_array_limits (const Array<T>& m, double& emin, double& emax,
 		  double& eminp)
 {
   const T *data = m.data ();
-  int n = m.numel ();
-
-  for (int i = 0; i < n; i++)
+  octave_idx_type n = m.numel ();
+
+  for (octave_idx_type i = 0; i < n; i++)
     {
       double e = double (data[i]);
 
       if (! (xisinf (e) || xisnan (e)))
 	{
 	  if (e < emin)
 	    emin = e;
 
@@ -731,50 +731,61 @@ array_property::validate (const octave_v
 
 bool
 array_property::is_equal (const octave_value& v) const
 {
   if (data.type_name () == v.type_name ())
     {
       if (data.dims () == v.dims ())
 	{
-#define CHECK_ARRAY_EQUAL(T,F) \
+
+#define CHECK_ARRAY_EQUAL(T,F,A) \
 	    { \
-	      const T* d1 = data.F ().data (); \
-	      const T* d2 = v.F ().data (); \
-	      \
-	      bool flag = true; \
-	      \
-	      for (int i = 0; flag && i < data.numel (); i++) \
-		if (d1[i] != d2[i]) \
-		  flag = false; \
-	      \
-	      return flag; \
+	      if (data.numel () == 1) \
+		return data.F ## scalar_value () == \
+		  v.F ## scalar_value (); \
+	      else  \
+		{ \
+                  /* Keep copy of array_value to allow sparse/bool arrays */ \
+		  /* that are converted, to not be deallocated early */ \
+		  const A m1 = data.F ## array_value (); \
+		  const T* d1 = m1.data (); \
+		  const A m2 = v.F ## array_value (); \
+		  const T* d2 = m2.data ();\
+		  \
+		  bool flag = true; \
+		  \
+		  for (int i = 0; flag && i < data.numel (); i++) \
+		    if (d1[i] != d2[i]) \
+		      flag = false; \
+		  \
+		  return flag; \
+		} \
 	    }
 
-	  if (data.is_double_type())
-	    CHECK_ARRAY_EQUAL (double, array_value)
+	  if (data.is_double_type() || data.is_bool_type ())
+	    CHECK_ARRAY_EQUAL (double, , NDArray)
 	  else if (data.is_single_type ())
-	    CHECK_ARRAY_EQUAL (float, float_array_value)
+	    CHECK_ARRAY_EQUAL (float, float_, FloatNDArray)
 	  else if (data.is_int8_type ())
-	    CHECK_ARRAY_EQUAL (octave_int8, int8_array_value)
+	    CHECK_ARRAY_EQUAL (octave_int8, int8_, int8NDArray)
 	  else if (data.is_int16_type ())
-	    CHECK_ARRAY_EQUAL (octave_int16, int16_array_value)
+	    CHECK_ARRAY_EQUAL (octave_int16, int16_, int16NDArray)
 	  else if (data.is_int32_type ())
-	    CHECK_ARRAY_EQUAL (octave_int32, int32_array_value)
+	    CHECK_ARRAY_EQUAL (octave_int32, int32_, int32NDArray)
 	  else if (data.is_int64_type ())
-	    CHECK_ARRAY_EQUAL (octave_int64, int64_array_value)
+	    CHECK_ARRAY_EQUAL (octave_int64, int64_, int64NDArray)
 	  else if (data.is_uint8_type ())
-	    CHECK_ARRAY_EQUAL (octave_uint8, uint8_array_value)
+	    CHECK_ARRAY_EQUAL (octave_uint8, uint8_, uint8NDArray)
 	  else if (data.is_uint16_type ())
-	    CHECK_ARRAY_EQUAL (octave_uint16, uint16_array_value)
+	    CHECK_ARRAY_EQUAL (octave_uint16, uint16_, uint16NDArray)
 	  else if (data.is_uint32_type ())
-	    CHECK_ARRAY_EQUAL (octave_uint32, uint32_array_value)
+	    CHECK_ARRAY_EQUAL (octave_uint32, uint32_, uint32NDArray)
 	  else if (data.is_uint64_type ())
-	    CHECK_ARRAY_EQUAL (octave_uint64, uint64_array_value)
+	    CHECK_ARRAY_EQUAL (octave_uint64, uint64_, uint64NDArray)
 	}
     }
 
   return false;
 }
 
 void
 array_property::get_data_limits (void)
