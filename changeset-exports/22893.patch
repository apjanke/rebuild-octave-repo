# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1481745567 18000
#      Wed Dec 14 14:59:27 2016 -0500
# Node ID 5ff6716cf157069fb0aab590c3bc2376029a7bb9
# Parent  5521b8a271aeca1a6787dbe4b00dee0f5225483c
allow dispatch types to be declared for built-in functions

* mk-builtins.pl, gendoc.pl: Handle "classes: NAME ..." info in DEFUN
macros.
* defun-int.h, defun.cc (install_builtin_dispatch): New function.
symtab.h (symbol_tableinstall_built_in_dispatch,
symbol_table::fcn_info::install_built_in_dispatch,
symbol_table::fcn_info::fcn_info_rep::install_built_in_dispatch):
New functions.

* svd.cc (Fsvd): Add "classes: double single" tag prior to doc: comment.

diff --git a/build-aux/mk-builtins.pl b/build-aux/mk-builtins.pl
--- a/build-aux/mk-builtins.pl
+++ b/build-aux/mk-builtins.pl
@@ -173,61 +173,72 @@ static void
     ## install the built-in functions or function aliases.
 
     $type = "";
     $const = 0;
     $fname = "";
     $name = "";
     $alias = "";
 
-    while (<$fh>)
+    %dispatch_map = ();
+
+    while ($line = <$fh>)
     {
-      if (/^ *DEFUN *\( *([^ ,]*) *,.*$/)
+      if ($line =~ /^ *DEFUN *\( *([^ ,]*) *,.*$/)
       {
         $type = "fun";
         $fname = "F$1";
         $name = "$1";
       }
-      elsif (/^ *DEFUNX *\( *"([^"]*)" *, *([^ ,]*) *,.*$/)
+      elsif ($line =~ /^ *DEFUNX *\( *"([^"]*)" *, *([^ ,]*) *,.*$/)
       {
         $type = "fun";
         $fname = "$2";
         $name = "$1";
       }
-      elsif (/^ *DEFCONSTFUN *\( *([^ ,]*) *,.*$/)
+      elsif ($line =~ /^ *DEFCONSTFUN *\( *([^ ,]*) *,.*$/)
       {
         $type = "fun";
         $fname = "F$1";
         $name = "$1";
         $const = 1;
       }
-      elsif (/^ *DEFALIAS *\( *([^ ,]*) *, *([^ )]*) *\).*$/)
+      elsif ($line =~ /^ *DEFALIAS *\( *([^ ,]*) *, *([^ )]*) *\).*$/)
       {
         $type = "alias";
         $alias = "$1";
         $name = "$2";
       }
       elsif ($defun_dld_are_built_in)
       {
-        if (/^ *DEFUN_DLD *\( *([^ ,]*) *,.*$/)
+        if ($line =~ /^ *DEFUN_DLD *\( *([^ ,]*) *,.*$/)
         {
           $type = "fun";
           $fname = "F$1";
           $name = "$1";
         }
-        elsif (/^ *DEFUNX_DLD *\( *"([^"]*)" *, *([^ ,]*) *,.*$/)
+        elsif ($line =~ /^ *DEFUNX_DLD *\( *"([^"]*)" *, *([^ ,]*) *,.*$/)
         {
           $type = "fun";
           $fname = "$2";
           $name = "$1";
         }
       }
 
       if ($type eq "fun")
       {
+        if (($line = <$fh>) =~ /^ *classes:/)
+        {
+          $line =~ s/\s*classes:\s*//;
+          $line =~ s/\s*$//;
+          @classes = split (/\s+/, $line);
+
+          $dispatch_map{$name} = [@classes];
+        }
+
         ## We use the name appended to the "external-doc" tag to find
         ## the docstring for aliases to this function.
 
         if ($const)
         {
           print "  install_builtin_function ($fname, \"$name\", file, \"external-doc:$name\", true);\n"
         }
         else
@@ -239,21 +250,44 @@ static void
         $fname = "";
         $name = "";
         $const = 0;
       }
       elsif ($type eq "alias")
       {
         print "  alias_builtin (\"$alias\", \"$name\");\n";
 
+        ## Preserve dispatch info (if any) that we have for the
+        ## original function.
+
+        @classes = @{$dispatch_map{$name}};
+
+        if (@classes)
+        {
+          $dispatch_map{$alias} = [@classes];
+        }
+
         $type = "";
         $name = "";
         $alias = "";
       }
     }
+
+    foreach $fcn (keys %dispatch_map)
+    {
+      print "\n";
+
+      @classes =  @{$dispatch_map{$fcn}};
+
+      foreach $class (@classes)
+      {
+        print "  install_builtin_dispatch (\"$fcn\", \"$class\");\n";
+      }
+    }
+
     print "}\n";
   }
 
   print "
 void
 install_builtins (void)
 {
 ";
diff --git a/libinterp/corefcn/defun-int.h b/libinterp/corefcn/defun-int.h
--- a/libinterp/corefcn/defun-int.h
+++ b/libinterp/corefcn/defun-int.h
@@ -52,16 +52,19 @@ install_dld_function (octave_dld_functio
 
 extern OCTINTERP_API void
 install_mex_function (void *fptr, bool fmex, const std::string& name,
                       const octave::dynamic_library& shl, bool relative = false);
 
 extern OCTINTERP_API void
 alias_builtin (const std::string& alias, const std::string& name);
 
+extern OCTINTERP_API void
+install_builtin_dispatch (const std::string& name, const std::string& klass);
+
 // Gets the shlib of the currently executing DLD function, if any.
 extern OCTINTERP_API octave::dynamic_library
 get_current_shlib (void);
 
 // This is a convenience class that calls the above function automatically at
 // construction time.  When deriving new classes, you can either use it as a
 // field or as a parent (with multiple inheritance).
 
diff --git a/libinterp/corefcn/defun.cc b/libinterp/corefcn/defun.cc
--- a/libinterp/corefcn/defun.cc
+++ b/libinterp/corefcn/defun.cc
@@ -119,16 +119,22 @@ install_mex_function (void *fptr, bool f
 }
 
 void
 alias_builtin (const std::string& alias, const std::string& name)
 {
   symbol_table::alias_built_in_function (alias, name);
 }
 
+void
+install_builtin_dispatch (const std::string& name, const std::string& klass)
+{
+  symbol_table::install_built_in_dispatch (name, klass);
+}
+
 octave::dynamic_library
 get_current_shlib (void)
 {
   octave::dynamic_library retval;
 
   octave_function *curr_fcn = octave_call_stack::current ();
   if (curr_fcn)
     {
diff --git a/libinterp/corefcn/svd.cc b/libinterp/corefcn/svd.cc
--- a/libinterp/corefcn/svd.cc
+++ b/libinterp/corefcn/svd.cc
@@ -61,16 +61,17 @@ static typename octave::math::svd<T>::Dr
 svd_driver (void)
 {
   return (Vsvd_driver == "gesvd"
           ? octave::math::svd<T>::Driver::GESVD
           : octave::math::svd<T>::Driver::GESDD);
 }
 
 DEFUN (svd, args, nargout,
+       classes: double single
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{s} =} svd (@var{A})
 @deftypefnx {} {[@var{U}, @var{S}, @var{V}] =} svd (@var{A})
 @deftypefnx {} {[@var{U}, @var{S}, @var{V}] =} svd (@var{A}, "econ")
 @deftypefnx {} {[@var{U}, @var{S}, @var{V}] =} svd (@var{A}, 0)
 @cindex singular value decomposition
 Compute the singular value decomposition of @var{A}
 @tex
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -848,16 +848,31 @@ public:
         function_on_path = f;
       }
 
       void install_built_in_function (const octave_value& f)
       {
         built_in_function = f;
       }
 
+      void install_built_in_dispatch (const std::string& klass)
+      {
+        if (built_in_function.is_defined ())
+          {
+            if (class_methods.find (klass) != class_methods.end ())
+              warning ("install_built_in_dispatch: '%s' already defined for class '%s'",
+                       name.c_str (), klass.c_str ());
+            else
+              class_methods[klass] = built_in_function;
+          }
+        else
+          error ("install_built_in_dispatch: '%s' is not a built-in function",
+                 name.c_str ());
+      }
+
       template <typename T>
       void
       clear_map (std::map<T, octave_value>& map, bool force = false)
       {
         typename std::map<T, octave_value>::iterator p = map.begin ();
 
         while (p != map.end ())
           {
@@ -1075,16 +1090,21 @@ public:
       rep->install_user_function (f);
     }
 
     void install_built_in_function (const octave_value& f)
     {
       rep->install_built_in_function (f);
     }
 
+    void install_built_in_dispatch (const std::string& klass)
+    {
+      rep->install_built_in_dispatch (klass);
+    }
+
     void clear (bool force = false) { rep->clear (force); }
 
     void clear_user_function (bool force = false)
     {
       rep->clear_user_function (force);
     }
 
     void clear_autoload_function (bool force = false)
@@ -1784,16 +1804,31 @@ public:
         finfo.install_built_in_function (fcn);
 
         fcn_table[alias] = finfo;
       }
     else
       panic ("alias: '%s' is undefined", name.c_str ());
   }
 
+  static void install_built_in_dispatch (const std::string& name,
+                                         const std::string& klass)
+  {
+    fcn_table_iterator p = fcn_table.find (name);
+
+    if (p != fcn_table.end ())
+      {
+        fcn_info& finfo = p->second;
+
+        finfo.install_built_in_dispatch (klass);
+      }
+    else
+      error ("install_built_in_dispatch: '%s' is undefined", name.c_str ());
+  }
+  
   static void push_context (scope_id scope = xcurrent_scope)
   {
     if (scope == xglobal_scope || scope == xtop_scope)
       error ("invalid call to symtab::push_context");
 
     symbol_table *inst = get_instance (scope);
 
     if (inst)
diff --git a/libinterp/gendoc.pl b/libinterp/gendoc.pl
--- a/libinterp/gendoc.pl
+++ b/libinterp/gendoc.pl
@@ -41,46 +41,54 @@ FILE: foreach $fname (@ARGV)
     $src_fname = "$srcdir/$fname";
   }
 
   open (SRC_FH, $src_fname) or die "Unable to open $src_fname";
 
   @func_list = ();
   @docstr = ();
 
-  LINE: while (<SRC_FH>)
+  LINE: while (my $line = <SRC_FH>)
   {
-    if (/^\s*DEF(?:CONSTFUN|UN|UN_DLD|UNX|UNX_DLD)\s*\(/)
+    if ($line =~ /^\s*DEF(?:CONSTFUN|UN|UN_DLD|UNX|UNX_DLD)\s*\(/)
     {
-      ($func) = /\("?(\w+)"?,/;
+      ($func) = $line =~ /\("?(\w+)"?,/;
       unless ($func) { die "Unable to parse $src_fname at line $.\n" }
       push (@func_list, $func);
 
-      if (<SRC_FH> =~ m#\s*doc:\s+\Q/*\E\s+\Q-*- texinfo -*-\E\s*$#)
+      ## Skip optional line that declares list of classes that this
+      ## function accepts.
+      $line = <SRC_FH>;
+      if ($line =~ m#\s*classes:#)
+      {
+        $line = <SRC_FH>;
+      }
+
+      if ($line =~ m#\s*doc:\s+\Q/*\E\s+\Q-*- texinfo -*-\E\s*$#)
       {
         $str = "-*- texinfo -*-\n";
         $reading_docstring = 1;
       }
       else
       {
         print STDERR "gendoc.pl: undocumented function $func from $fname\n";
         push (@docstr, "Undocumented.");
       }
     }
     elsif ($reading_docstring)
     {
-      if (/^.*\s+\*\/\s*\)\s*$/)
+      if ($line =~ /^.*\s+\*\/\s*\)\s*$/)
       {
-        s#\s+\*/\s*\)\s*$##;
-        push (@docstr, $str . $_);
+        $line =~ s#\s+\*/\s*\)\s*$##;
+        push (@docstr, $str . $line);
         $reading_docstring = 0;
       }
       else
       {
-        $str .= $_;
+        $str .= $line;
       }
     }
   }
   close (SRC_FH);
 
   ## Print results in DOCSTRING format
   foreach $i (0 .. $#func_list)
   {
