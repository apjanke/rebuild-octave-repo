# HG changeset patch
# User jwe
# Date 1196405434 0
#      Fri Nov 30 06:50:34 2007 +0000
# Node ID 1f3e360c1bba0fb69db3512c6c3ee1a2435dbd7f
# Parent  a3435f7017c44cf32ff64c15cc65bc89dc51744c
[project @ 2007-11-30 06:50:34 by jwe]

diff --git a/src/genprops.awk b/src/genprops.awk
--- a/src/genprops.awk
+++ b/src/genprops.awk
@@ -104,50 +104,50 @@
 ##
 ##         set_NAMEmode ("manual");
 ##
 ##       to the type-specific set function.
 ##
 ## The 'o' and 'O' qualifiers are only useful when the the property type
 ## is something other than octave_value.
 
-function emit_decls ()
+function emit_declarations ()
 {
   if (idx > 0)
       print "private:\n";
 
   for (i = 1; i <= idx; i++)
       printf ("  %s%s %s;\n", mutable[i] ? "mutable " : "", type[i], name[i]);
 
   if (idx > 0)
       print "\npublic:\n";
 
   for (i = 1; i <= idx; i++)
   {
       if (emit_get[i])
       {
 	  printf ("  %s get_%s (void) const", type[i], name[i]);
 
-	  if (emit_get[i] == "defn")
+	  if (emit_get[i] == "definition")
 	      printf (" { return %s; }\n", name[i]);
 	  else
 	      printf (";\n");
       }
   }
 
   if (idx > 0)
       printf ("\n");
 
   for (i = 1; i <= idx; i++)
   {
       if (emit_set[i])
       {
 	  printf ("  void set_%s (const %s& val)", name[i], type[i]);
 
-	  if (emit_set[i] == "defn")
+	  if (emit_set[i] == "definition")
 	  {
 	      printf ("\n  {\n    if (! error_state)\n      {\n        %s = val;\n",
 		      name[i]);
 	      if (limits[i])
 		  printf ("        update_axis_limits (\"%s\");\n", name[i]);
 	      if (mode[i])
 		  printf ("        set_%smode (\"manual\");\n", name[i]);
 	      printf ("        mark_modified ();\n      }\n  }\n\n");
@@ -155,19 +155,19 @@ function emit_decls ()
 	  else
 	      printf (";\n");
       }
 
       if (emit_ov_set[i])
       {
 	  printf ("  void set_%s (const octave_value& val)", name[i]);
 
-	  if (emit_ov_set[i] == "defn")
+	  if (emit_ov_set[i] == "definition")
 	      printf (" { set_%s (%s (val)); }\n\n", name[i], type[i]);
-          else if (emit_ov_set[i] == "asign")
+          else if (emit_ov_set[i] == "assignment")
           {
               printf ("\n  {\n    %s tmp (%s);\n    tmp = val;\n    set_%s (tmp);\n  };\n\n",
 		      type[i], name[i], name[i], name[i]);
          }
 	  else
 	      printf (";\n");
       }
   }
@@ -182,17 +182,17 @@ BEGIN {
 
 /BEGIN_PROPERTIES/ {
     gather = 1;
     idx = 0;
     next;
 }
 
 /END_PROPERTIES/ {
-    emit_decls();
+    emit_declarations();
     gather = 0;
     next;
 }
 
 {
   if (gather)
     {
       if (NF < 2 || NF > 4)
@@ -210,22 +210,22 @@ BEGIN {
       else
 	  mutable[idx] = 0;
 
       type[idx] = $(field++);
       name[idx] = $(field++);
 
       limits[idx] = 0;
       mode[idx] = 0;
-      emit_get[idx] = "defn";
-      emit_set[idx] = "defn";
+      emit_get[idx] = "definition";
+      emit_set[idx] = "definition";
       if (type[idx] == "octave_value")
 	  emit_ov_set[idx] = "";
       else
-	  emit_ov_set[idx] = "defn";
+	  emit_ov_set[idx] = "definition";
 
       if (NF == field)
         {
 	    quals = $field;
 
 	    if (index (quals, "l"))
 		limits[idx] = 1;
 
@@ -235,31 +235,31 @@ BEGIN {
 	    ## There is a custom inline definition for the get function,
 	    ## so we don't emit anything.
 	    if (index (quals, "g"))
 		emit_get[idx] = "";
 
 	    ## There is a custom extern definition for the get function,
 	    ## but we still emit the declaration.
 	    if (index (quals, "G"))
-		emit_get[idx] = "decl";
+		emit_get[idx] = "declaration";
 
 	    ## There is a custom inline definition for the set function,
 	    ## so we don't emit anything.
 	    if (index (quals, "s"))
 		emit_set[idx] = "";
 
 	    ## There is a custom extern definition for the set function,
 	    ## but we still emit the declaration.
 	    if (index (quals, "S"))
-		emit_set[idx] = "decl";
+		emit_set[idx] = "declaration";
 
             ## emmit an asignment set function
             if (index (quals, "a"))
-                emit_ov_set[idx] = "asign";
+                emit_ov_set[idx] = "assignment";
 
 	    if (type[idx] != "octave_value")
 	    {
 		## The 'o' and 'O' qualifiers are only useful when the
 		## the property type is something other than an
 		## octave_value.
 
 		## There is a custom inline definition for the
@@ -267,16 +267,16 @@ BEGIN {
 		## don't emit anything.
 		if (index (quals, "o"))
 		    emit_ov_set[idx] = "";
 
 		## There is a custom extern definition for the
 		## octave_value version of the set function, but we
 		## still emit the declaration.
 		if (index (quals, "O"))
-		    emit_ov_set[idx] = "decl";
+		    emit_ov_set[idx] = "declaration";
 	    }
         }
 
     }
   else
       print $0;
 }
