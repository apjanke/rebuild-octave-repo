# HG changeset patch
# User jwe
# Date 1165435803 0
#      Wed Dec 06 20:10:03 2006 +0000
# Node ID cb8c62c78b42f7176bf9b96a339ed98efc07af71
# Parent  312bd357684436cc7005a6b8c0b79ddfda71f3ca
[project @ 2006-12-06 20:10:02 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2006-12-06  John W. Eaton  <jwe@octave.org>
+
+2006-12-06  Michael Goffioul  <michael.goffioul@swing.be>
+
+	* mappers.cc (install_mapper_functions): Undefine isascii before
+	the DEFUN_MAPPER for it.
+
+	* input.cc (get_user_input): Prevent out of bounds array access
+	when checking for EOL.
+
 2006-12-05  John W. Eaton  <jwe@octave.org>
 
 	* ls-oct-ascii.cc (extract_keyword): If no match and looking for
 	more, skip to end of line before trying another match.
 
 	* pt-mat.cc (tm_row_const::empty): New function.
 	(tm_const::init): Don't append anything if tmp tm_row_const object
 	is empty.
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -278,17 +278,17 @@ get_user_input (void)
       if (input_from_eval_string_pending)
 	{
 	  input_from_eval_string_pending = false;
 
 	  retval = current_eval_string;
 
 	  size_t len = retval.length ();
 
-	  if (retval[len-1] != '\n')
+	  if (len > 0 && retval[len-1] != '\n')
 	    retval.append ("\n");
 	}
     }
   else
     retval = octave_gets ();
 
   current_input_line = retval;
 
diff --git a/src/input.h b/src/input.h
--- a/src/input.h
+++ b/src/input.h
@@ -26,17 +26,16 @@ 02110-1301, USA.
 #if !defined (octave_input_h)
 #define octave_input_h 1
 
 #include <cstdio>
 
 #include <string>
 
 #include "oct-time.h"
-#include "ov-list.h"
 #include "pager.h"
 
 class octave_value;
 
 extern int octave_read (char *buf, unsigned max_size);
 extern FILE *get_input_from_file (const std::string& name, int warn = 1);
 extern FILE *get_input_from_stdin (void);
 
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -409,16 +409,20 @@ Return 1 for characters that are letters
   DEFUN_MAPPER (isalpha, xisalpha, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isalpha (@var{s})\n\
 @deftypefnx {Mapping Function} {} isletter (@var{s})\n\
 Return true for characters that are letters (@code{isupper (@var{s})}\n\
 or @code{islower (@var{s})} is true).\n\
 @end deftypefn");
 
+#ifdef isascii
+#undef isascii
+#endif
+
   DEFUN_MAPPER (isascii, xisascii, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isascii (@var{s})\n\
 Return 1 for characters that are ASCII (in the range 0 to 127 decimal).\n\
 @end deftypefn");
 
   DEFUN_MAPPER (iscntrl, xiscntrl, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
