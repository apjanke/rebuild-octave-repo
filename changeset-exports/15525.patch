# HG changeset patch
# User Rik <rik@octave.org>
# Date 1350316229 25200
#      Mon Oct 15 08:50:29 2012 -0700
# Node ID ae43fc2ddcacf2cfdc19589570e356f841d491b4
# Parent  bf466a60651f6cfc6759b87b25aacff8a874fe91
# Parent  15628a84a4faeeb676d80a4ca1a60868073de0b0
maint: Merge stable to default to pick up documentation fix for warning ids.

diff --git a/doc/interpreter/errors.txi b/doc/interpreter/errors.txi
--- a/doc/interpreter/errors.txi
+++ b/doc/interpreter/errors.txi
@@ -291,17 +291,20 @@ Since warnings aren't fatal to a running
 to catch a warning using the @code{try} statement or something similar.
 It is however possible to access the last warning as a string using the
 @code{lastwarn} function.
 
 It is also possible to assign an identification string to a warning.
 If a warning has such an ID the user can enable and disable this warning
 as will be described in the next section.  To assign an ID to a warning,
 simply call @code{warning} with two string arguments, where the first
-is the identification string, and the second is the actual warning.
+is the identification string, and the second is the actual warning.  Note
+that warning IDs are in the format "NAMESPACE:WARNING-NAME".  The namespace
+"Octave" is used for Octave's own warnings.  Any other string is available
+as a namespace for user's own warnings.
 
 @DOCSTRING(warning)
 
 @DOCSTRING(lastwarn)
 
 @node Enabling and Disabling Warnings
 @subsection Enabling and Disabling Warnings
 
@@ -310,28 +313,28 @@ are actually printed to the screen.  If 
 is called with a string argument that is either @code{"on"} or @code{"off"}
 all warnings will be enabled or disabled.
 
 It is also possible to enable and disable individual warnings through
 their string identifications.  The following code will issue a warning
 
 @example
 @group
-warning ("non-negative-variable", 
+warning ("example:non-negative-variable", 
          "'a' must be non-negative.  Setting 'a' to zero.");
 @end group
 @end example
 
 @noindent
 while the following won't issue a warning
 
 @example
 @group
-warning ("off", "non-negative-variable");
-warning ("non-negative-variable", 
+warning ("off", "example:non-negative-variable");
+warning ("example:non-negative-variable", 
          "'a' must be non-negative.  Setting 'a' to zero.");
 @end group
 @end example
 
 The functions distributed with Octave can issue one of the following
 warnings.
 
 @DOCSTRING(warning_ids)
diff --git a/libinterp/interpfcn/error.cc b/libinterp/interpfcn/error.cc
--- a/libinterp/interpfcn/error.cc
+++ b/libinterp/interpfcn/error.cc
@@ -1208,18 +1208,20 @@ Format the optional arguments under the 
 functions (@pxref{Formatted Output}) and print the resulting message\n\
 on the @code{stderr} stream.  The message is prefixed by the character\n\
 string @samp{warning: }.\n\
 You should use this function when you want to notify the user\n\
 of an unusual condition, but only when it makes sense for your program\n\
 to go on.\n\
 \n\
 The optional message identifier allows users to enable or disable\n\
-warnings tagged by @var{id}.  The special identifier @samp{\"all\"} may\n\
-be used to set the state of all warnings.\n\
+warnings tagged by @var{id}.  A message identifier is of the form\n\
+\"NAMESPACE:WARNING-NAME\".  Octave's own warnings use the \"Octave\"\n\
+namespace (@pxref{doc-warning_ids}).  The special identifier @samp{\"all\"}\n\
+may be used to set the state of all warnings.\n\
 \n\
 If the first argument is @samp{\"on\"} or @samp{\"off\"}, set the state\n\
 of a particular warning using the identifier @var{id}.  If the first\n\
 argument is @samp{\"query\"}, query the state of this warning instead.\n\
 If the identifier is omitted, a value of @samp{\"all\"} is assumed.  If\n\
 you set the state of a warning to @samp{\"error\"}, the warning named by\n\
 @var{id} is handled as if it were an error instead.  So, for example, the\n\
 following handles all warnings as errors:\n\
