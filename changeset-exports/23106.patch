# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1485557047 18000
#      Fri Jan 27 17:44:07 2017 -0500
# Node ID 1a53f9d42ec1ff77e429a7a319e357354914c142
# Parent  3b58b08d764a05ba94f4c43df43dd7c2380e355a
move OCTAVE_SAFE_CALL macro out of header file

* interpreter.h, interpreter.cc (OCTAVE_SAFE_CALL): Move to source
file from from header file.  Also ignore exit exception.

* graphics.cc (close_figure): Don't use OCTAVE_SAFE_CALL here;
gh_manager::execute_callback already catches execution exceptions.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -2735,17 +2735,17 @@ delete_graphics_objects (const NDArray v
     delete_graphics_object (vals.elem (i));
 }
 
 static void
 close_figure (const graphics_handle& h)
 {
   octave_value closerequestfcn = xget (h, "closerequestfcn");
 
-  OCTAVE_SAFE_CALL (gh_manager::execute_callback, (h, closerequestfcn));
+  gh_manager::execute_callback (h, closerequestfcn);
 }
 
 static void
 force_close_figure (const graphics_handle& h)
 {
   // Remove the deletefcn and closerequestfcn callbacks
   // and delete the object directly.
 
diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -964,16 +964,50 @@ namespace octave
     while (retval == 0);
 
     if (retval == EOF)
       retval = 0;
 
     return retval;
   }
 
+  // Call a function with exceptions handled to avoid problems with
+  // errors while shutting down.
+
+#define OCTAVE_IGNORE_EXCEPTION(E)                                      \
+  catch (E)                                                             \
+    {                                                                   \
+      recover_from_exception ();                                        \
+                                                                        \
+      std::cerr << "error: ignoring " #E " while preparing to exit"     \
+                << std::endl;                                           \
+    }
+
+#define OCTAVE_SAFE_CALL(F, ARGS)                                       \
+  do                                                                    \
+    {                                                                   \
+      try                                                               \
+        {                                                               \
+          octave::unwind_protect frame;                                 \
+                                                                        \
+          frame.protect_var (Vdebug_on_error);                          \
+          frame.protect_var (Vdebug_on_warning);                        \
+                                                                        \
+          Vdebug_on_error = false;                                      \
+          Vdebug_on_warning = false;                                    \
+                                                                        \
+          F ARGS;                                                       \
+        }                                                               \
+      OCTAVE_IGNORE_EXCEPTION (const octave::exit_exception&)           \
+      OCTAVE_IGNORE_EXCEPTION (const octave::interrupt_exception&)      \
+      OCTAVE_IGNORE_EXCEPTION (const octave::execution_exception&)      \
+      OCTAVE_IGNORE_EXCEPTION (const std::bad_alloc&)                   \
+    }                                                                   \
+  while (0)
+
   void interpreter::cleanup (void)
   {
     static bool deja_vu = false;
 
     // If we are attached to a GUI, process pending events and
     // disconnect the link.
 
     octave_link::process_events (true);
diff --git a/libinterp/corefcn/interpreter.h b/libinterp/corefcn/interpreter.h
--- a/libinterp/corefcn/interpreter.h
+++ b/libinterp/corefcn/interpreter.h
@@ -44,47 +44,16 @@ octave_remove_atexit_function (const std
 
 // TRUE means we are ready to interpret commands, but not everything
 // is ready for interactive use.
 extern OCTINTERP_API bool octave_interpreter_ready;
 
 // TRUE means we've processed all the init code and we are good to go.
 extern OCTINTERP_API bool octave_initialized;
 
-// Call a function with exceptions handled to avoid problems with
-// errors while shutting down.
-
-#define OCTAVE_IGNORE_EXCEPTION(E)                                      \
-  catch (E)                                                             \
-    {                                                                   \
-      std::cerr << "error: ignoring " #E " while preparing to exit" << std::endl; \
-      recover_from_exception ();                                        \
-    }
-
-#define OCTAVE_SAFE_CALL(F, ARGS)                                       \
-  do                                                                    \
-    {                                                                   \
-      try                                                               \
-        {                                                               \
-          octave::unwind_protect frame;                                 \
-                                                                        \
-          frame.protect_var (Vdebug_on_error);                          \
-          frame.protect_var (Vdebug_on_warning);                        \
-                                                                        \
-          Vdebug_on_error = false;                                      \
-          Vdebug_on_warning = false;                                    \
-                                                                        \
-          F ARGS;                                                       \
-        }                                                               \
-      OCTAVE_IGNORE_EXCEPTION (const octave::interrupt_exception&)       \
-        OCTAVE_IGNORE_EXCEPTION (const octave::execution_exception&)     \
-        OCTAVE_IGNORE_EXCEPTION (const std::bad_alloc&)                 \
-        }                                                               \
-  while (0)
-
 namespace octave
 {
   extern tree_evaluator *current_evaluator;
 
   // The application object contains a pointer to the current
   // interpreter and the interpreter contains a pointer back to the
   // application context so we need a forward declaration for one (or
   // both) of them...
