# HG changeset patch
# User jwe
# Date 831999642 0
#      Mon May 13 15:00:42 1996 +0000
# Node ID 0de32e6149300e2af3d736f50bed2b41e8e0669d
# Parent  977f7dd0999ca0e61aa838cab29983fb74266fa7
[project @ 1996-05-13 15:00:42 by jwe]

diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -26,27 +26,34 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 #include <strstream.h>
 
+#include "defun.h"
 #include "error.h"
 #include "oct-obj.h"
 #include "pt-const.h"
 #include "pt-exp.h"
 #include "pt-fvc.h"
 #include "pt-mat.h"
 #include "pt-misc.h"
 #include "pt-mvr.h"
 #include "pt-walk.h"
 #include "user-prefs.h"
 
+// Are empty elements in a matrix list ok?  For example, is the empty
+// matrix in an expression like `[[], 1]' ok?  A positive value means
+// yes.  A negative value means yes, but print a warning message.
+// Zero means it should be considered an error.
+static int Vempty_list_elements_ok;
+
 // General matrices.  This list type is much more work to handle than
 // constant matrices, but it allows us to construct matrices from
 // other matrices, variables, and functions.
 
 // But first, some internal classes that make our job much easier.
 
 class
 tm_row_const
@@ -148,18 +155,16 @@ private:
   tm_row_const_rep *rep;
 };
 
 void
 tm_row_const::tm_row_const_rep::init (const tree_matrix_row& mr)
 {
   all_str = true;
 
-  int empties_ok = user_pref.empty_list_elements_ok;
-
   bool first_elem = true;
 
   for (Pix p = mr.first (); p != 0; mr.next (p))
     {
       tree_expression *elt = mr (p);
 
       octave_value tmp = elt->eval (false);
 
@@ -167,19 +172,19 @@ tm_row_const::tm_row_const_rep::init (co
 	break;
       else
 	{
 	  int this_elt_nr = tmp.rows ();
 	  int this_elt_nc = tmp.columns ();
 
 	  if (this_elt_nr == 0 || this_elt_nc == 0)
 	    {
-	      if (empties_ok < 0)
+	      if (Vempty_list_elements_ok < 0)
 		warning ("empty matrix found in matrix list");
-	      else if (empties_ok == 0)
+	      else if (Vempty_list_elements_ok == 0)
 		{
 		  ::error ("empty matrix found in matrix list");
 		  break;
 		}
 	    }
 	  else
 	    {
 	      if (first_elem)
@@ -252,18 +257,16 @@ private:
   void init (const tree_matrix& tm);
 };
 
 void
 tm_const::init (const tree_matrix& tm)
 {
   all_str = true;
 
-  int empties_ok = user_pref.empty_list_elements_ok;
-
   bool first_elem = true;
 
   // Just eval and figure out if what we have is complex or all
   // strings.  We can't check columns until we know that this is a
   // numeric matrix -- collections of strings can have elements of
   // different lengths.
 
   for (Pix p = tm.first (); p != 0; tm.next (p))
@@ -292,19 +295,19 @@ tm_const::init (const tree_matrix& tm)
 	{
 	  tm_row_const elt = this->operator () (p);
 
 	  int this_elt_nr = elt.rows ();
 	  int this_elt_nc = elt.cols ();
 
 	  if (this_elt_nr == 0 || this_elt_nc == 0)
 	    {
-	      if (empties_ok < 0)
+	      if (Vempty_list_elements_ok < 0)
 		warning ("empty matrix found in matrix list");
-	      else if (empties_ok == 0)
+	      else if (Vempty_list_elements_ok == 0)
 		{
 		  ::error ("empty matrix found in matrix list");
 		  break;
 		}
 	    }
 	  else
 	    {
 	      if (first_elem)
@@ -520,13 +523,28 @@ done:
 }
 
 void
 tree_matrix::accept (tree_walker& tw)
 {
   tw.visit_matrix (*this);
 }
 
+static int
+empty_list_elements_ok (void)
+{
+  Vempty_list_elements_ok = check_preference ("empty_list_elements_ok");
+
+  return 0;
+}
+
+void
+symbols_of_pt_mat (void)
+{
+  DEFVAR (empty_list_elements_ok, "warn", 0, empty_list_elements_ok,
+    "ignore the empty element in expressions like `a = [[], 1]'");
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
