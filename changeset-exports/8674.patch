# HG changeset patch
# User Kai Habel
# Date 1233785654 18000
#      Wed Feb 04 17:14:14 2009 -0500
# Node ID 0d263850d582c55d1f5f5d3200b249972648cbab
# Parent  9e0f0a7bf858ecb49266dee36a7eb6a9cdbcc193
Fix calculation of diffuse reflectance. Calculate surface normals here now.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-02-04  Kai Habel  <kai.habel@gmx.de>
+
+	* gl-render.cc (opengl_renderer::draw (surface::properties)):
+	Normalize surface normals. Correct calculation of diffuse lighting.
+	* gl-render.cc (opengl_renderer::draw (patch::properties)):
+	Correct calculation of diffuse lighting.
+
 2009-02-04  John W. Eaton  <jwe@octave.org>
 
 	* help.cc (do_which): If NAME is not in the symbol table, look for
 	a function file in the load path.
 	(raw_help_from_file): Unwind-protect and set reading_script_file.
 
 	* pt-loop.h, pt-loop.cc (evaluating_looping_command):
 	Delete global variable and all uses.
diff --git a/src/gl-render.cc b/src/gl-render.cc
--- a/src/gl-render.cc
+++ b/src/gl-render.cc
@@ -1737,17 +1737,18 @@ opengl_renderer::draw (const surface::pr
 
   Matrix fcolor = (fc_mode == 3 ? Matrix (1, 3, 1.0) : props.get_facecolor_rgb ());
   Matrix ecolor = props.get_edgecolor_rgb ();
 
   float as = props.get_ambientstrength ();
   float ds = props.get_diffusestrength ();
   float ss = props.get_specularstrength ();
   float se = props.get_specularexponent ();
-  float cb[4] = { 0, 0, 0, 1 };
+  float cb[4] = { 0.0, 0.0, 0.0, 1.0 };
+  double d = 1.0;
 
   opengl_texture tex;
 
   int i1, i2, j1, j2;
   bool x_mat = (x.rows () == z.rows ());
   bool y_mat = (y.columns () == z.columns ());
 
   i1 = i2 = j1 = j2 = 0;
@@ -1795,21 +1796,21 @@ opengl_renderer::draw (const surface::pr
       if (props.get_facealpha_double () == 1)
 	{
 	  if (fc_mode == 0 || fc_mode == 3)
 	    {
 	      glColor3dv (fcolor.data ());
 	      if (fl_mode > 0)
 		{
 		  for (int i = 0; i < 3; i++)
-		    cb[i] = (as * fcolor(i));
+		    cb[i] = as * fcolor(i);
 		  glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
 		  for (int i = 0; i < 3; i++)
-		    cb[i] *= (ds / as);
+		    cb[i] = ds * fcolor(i);
 		  glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 		}
 	    }
 
 	  if (fl_mode > 0)
 	    glEnable (GL_LIGHTING);
 	  glShadeModel ((fc_mode == 2 || fl_mode == 2) ? GL_SMOOTH : GL_FLAT);
 	  set_polygon_offset (true, 1);
@@ -1850,22 +1851,27 @@ opengl_renderer::draw (const surface::pr
 
 		      if (fl_mode > 0)
 			{
 			  for (int k = 0; k < 3; k++)
 			    cb[k] *= as;
 			  glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 			  
 			  for (int k = 0; k < 3; k++)
-			    cb[k] *= (ds / as);
+			    cb[k] = ds * c(j-1, i-1, k);
 			  glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 			}
 		    }
-		  if (fl_mode > 0)
-		    glNormal3d (n(j-1,i-1,0), n(j-1,i-1,1), n(j-1,i-1,2));
+                  if (fl_mode > 0)
+		    {
+		      d = sqrt (n(j-1,i-1,0) * n(j-1,i-1,0)
+				+ n(j-1,i-1,1) * n(j-1,i-1,1)
+				+ n(j-1,i-1,2) * n(j-1,i-1,2));
+		      glNormal3d (n(j-1,i-1,0)/d, n(j-1,i-1,1)/d, n(j-1,i-1,2)/d);
+		    }
 		  glVertex3d (x(j1,i-1), y(j-1,i1), z(j-1,i-1));
 
 		  // Vertex 2
 		  if (fc_mode == 3)
 		    tex.tex_coord (double (i) / (zc-1), double (j-1) / (zr-1));
 		  else if (fc_mode == 2)
 		    {
 		      for (int k = 0; k < 3; k++)
@@ -1874,22 +1880,29 @@ opengl_renderer::draw (const surface::pr
 
 		      if (fl_mode > 0)
 			{
 			  for (int k = 0; k < 3; k++)
 			    cb[k] *= as;
 			  glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 			  
 			  for (int k = 0; k < 3; k++)
-			    cb[k] *= (ds / as);
+			    cb[k] = ds * c(j-1, i, k);
 			  glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 			}
 		    }
-		  if (fl_mode == 2)
-		    glNormal3d (n(j-1,i,0), n(j-1,i,1), n(j-1,i,2));
+
+                  if (fl_mode == 2)
+		    {
+		      d = sqrt (n(j-1,i,0) * n(j-1,i,0)
+				+ n(j-1,i,1) * n(j-1,i,1)
+				+ n(j-1,i,2) * n(j-1,i,2));
+		      glNormal3d (n(j-1,i,0)/d, n(j-1,i,1)/d, n(j-1,i,2)/d);
+		    }
+
 		  glVertex3d (x(j1,i), y(j-1,i2), z(j-1,i));
 		  
 		  // Vertex 3
 		  if (fc_mode == 3)
 		    tex.tex_coord (double (i) / (zc-1), double (j) / (zr-1));
 		  else if (fc_mode == 2)
 		    {
 		      for (int k = 0; k < 3; k++)
@@ -1898,46 +1911,56 @@ opengl_renderer::draw (const surface::pr
 
 		      if (fl_mode > 0)
 			{
 			  for (int k = 0; k < 3; k++)
 			    cb[k] *= as;
 			  glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 			  
 			  for (int k = 0; k < 3; k++)
-			    cb[k] *= (ds / as);
+			    cb[k] = ds * c(j, i, k);
 			  glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 			}
 		    }
 		  if (fl_mode == 2)
-		    glNormal3d (n(j,i,0), n(j,i,1), n(j,i,2));
+		    {
+		      d = sqrt (n(j,i,0) * n(j,i,0)
+				+ n(j,i,1) * n(j,i,1)
+				+ n(j,i,2) * n(j,i,2));
+		      glNormal3d (n(j,i,0)/d, n(j,i,1)/d, n(j,i,2)/d);
+		    }
 		  glVertex3d (x(j2,i), y(j,i2), z(j,i));
-		  
+
 		  // Vertex 4
 		  if (fc_mode == 3)
 		    tex.tex_coord (double (i-1) / (zc-1), double (j) / (zr-1));
 		  else if (fc_mode == 2)
 		    {
 		      for (int k = 0; k < 3; k++)
 			cb[k] = c(j, i-1, k);
 		      glColor3fv (cb);
 
 		      if (fl_mode > 0)
 			{
 			  for (int k = 0; k < 3; k++)
 			    cb[k] *= as;
 			  glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 			  
 			  for (int k = 0; k < 3; k++)
-			    cb[k] *= (ds / as);
+			    cb[k] = ds * c(j, i-1, k);
 			  glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 			}
 		    }
-		  if (fl_mode == 2)
-		    glNormal3d (n(j,i-1,0), n(j,i-1,1), n(j,i-1,2));
+                  if (fl_mode == 2)
+		    {
+		      d = sqrt (n(j,i-1,0) * n(j,i-1,0)
+				+ n(j,i-1,1) * n(j,i-1,1)
+				+ n(j,i-1,2) * n(j,i-1,2));
+		      glNormal3d (n(j,i-1,0)/d, n(j,i-1,1)/d, n(j,i-1,2)/d);
+		    }
 		  glVertex3d (x(j2,i-1), y(j,i1), z(j,i-1));
 
 		  glEnd ();
 		}
 	    }
 
 	  set_polygon_offset (false);
 	  if (fc_mode == 3)
@@ -1957,21 +1980,21 @@ opengl_renderer::draw (const surface::pr
       if (props.get_edgealpha_double () == 1)
 	{
 	  if (ec_mode == 0)
 	    {
 	      glColor3dv (ecolor.data ());
 	      if (fl_mode > 0)
 		{
 		  for (int i = 0; i < 3; i++)
-		    cb[i] = (as * ecolor(i));
+		    cb[i] = as * ecolor(i);
 		  glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
 		  for (int i = 0; i < 3; i++)
-		    cb[i] *= (ds / as);
+		    cb[i] = ds * ecolor(i);
 		  glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 		}
 	    }
 
 	  if (el_mode > 0)
 	    glEnable (GL_LIGHTING);
 	  glShadeModel ((ec_mode == 2 || el_mode == 2) ? GL_SMOOTH : GL_FLAT);
 
@@ -2012,44 +2035,54 @@ opengl_renderer::draw (const surface::pr
 
 			  if (fl_mode > 0)
 			    {
 			      for (int k = 0; k < 3; k++)
 				cb[k] *= as;
 			      glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
 			      for (int k = 0; k < 3; k++)
-				cb[k] *= (ds / as);
+				cb[k] = ds * c(j-1, i, k);
 			      glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 			    }
 			}
 		      if (el_mode > 0)
-			glNormal3d (n(j-1,i,0), n(j-1,i,1), n(j-1,i,2));
+			{
+			  d = sqrt (n(j-1,i,0) * n(j-1,i,0)
+				    + n(j-1,i,1) * n(j-1,i,1)
+				    + n(j-1,i,2) * n(j-1,i,2));
+			  glNormal3d (n(j-1,i,0)/d, n(j-1,i,1)/d, n(j-1,i,2)/d);
+			}
 		      glVertex3d (x(j1,i), y(j-1,i2), z(j-1,i));
 
 		      // Vertex 2
 		      if (ec_mode == 2)
 			{
 			  for (int k = 0; k < 3; k++)
 			    cb[k] = c(j, i, k);
 			  glColor3fv (cb);
 
 			  if (fl_mode > 0)
 			    {
 			      for (int k = 0; k < 3; k++)
 				cb[k] *= as;
 			      glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
 			      for (int k = 0; k < 3; k++)
-				cb[k] *= (ds / as);
+				cb[k] = ds * c(j, i, k);
 			      glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 			    }
 			}
 		      if (el_mode == 2)
-			glNormal3d (n(j,i,0), n(j,i,1), n(j,i,2));
+		        {
+			  d = sqrt (n(j,i,0) * n(j,i,0)
+				    + n(j,i,1) * n(j,i,1)
+				    + n(j,i,2) * n(j,i,2));
+			  glNormal3d (n(j,i,0)/d, n(j,i,1)/d, n(j,i,2)/d);
+			}
 		      glVertex3d (x(j2,i), y(j,i2), z(j,i));
 
 		      glEnd ();
 		    }
 		}
 	    }
 
 	  // Mesh along X-axis
@@ -2086,44 +2119,54 @@ opengl_renderer::draw (const surface::pr
 
 			  if (fl_mode > 0)
 			    {
 			      for (int k = 0; k < 3; k++)
 				cb[k] *= as;
 			      glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
 			      for (int k = 0; k < 3; k++)
-				cb[k] *= (ds / as);
+				cb[k] = ds * c(j, i-1, k);
 			      glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 			    }
 			}
 		      if (el_mode > 0)
-			glNormal3d (n(j,i-1,0), n(j,i-1,1), n(j,i-1,2));
+                        {
+			  d = sqrt (n(j,i-1,0) * n(j,i-1,0)
+				    + n(j,i-1,1) * n(j,i-1,1)
+				    + n(j,i-1,2) * n(j,i-1,2));
+			  glNormal3d (n(j,i-1,0)/d, n(j,i-1,1)/d, n(j,i-1,2)/d);
+			}
 		      glVertex3d (x(j2,i-1), y(j,i1), z(j,i-1));
 		      
 		      // Vertex 2
 		      if (ec_mode == 2)
 			{
 			  for (int k = 0; k < 3; k++)
 			    cb[k] = c(j, i, k);
 			  glColor3fv (cb);
 
 			  if (fl_mode > 0)
 			    {
 			      for (int k = 0; k < 3; k++)
 				cb[k] *= as;
 			      glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
 			      for (int k = 0; k < 3; k++)
-				cb[k] *= (ds / as);
+				cb[k] = ds * c(j, i, k);
 			      glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 			    }
 			}
 		      if (el_mode == 2)
-			glNormal3d (n(j,i,0), n(j,i,1), n(j,i,2));
+		        {
+			  d = sqrt (n(j,i,0) * n(j,i,0)
+				    + n(j,i,1) * n(j,i,1)
+				    + n(j,i,2) * n(j,i,2));
+			  glNormal3d (n(j,i,0)/d, n(j,i,1)/d, n(j,i,2)/d);
+			}
 		      glVertex3d (x(j2,i), y(j,i2), z(j,i));
 		      
 		      glEnd ();
 		    }
 		}
 	    }
 
 	  set_linestyle ("-");
@@ -2359,17 +2402,17 @@ opengl_renderer::draw (const patch::prop
 		{
 		  float cb[4] = { 0, 0, 0, 1 };
 
 		  for (int i = 0; i < 3; i++)
 		    cb[i] = (as * fcolor(i));
 		  glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
 		  for (int i = 0; i < 3; i++)
-		    cb[i] *= (ds / as);
+		    cb[i] = ds * fcolor(i);
 		  glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 		}
 	    }
 
 	  if (fl_mode > 0)
 	    glEnable (GL_LIGHTING);
 
 	  // FIXME: use __index__ property from patch object
@@ -2415,17 +2458,17 @@ opengl_renderer::draw (const patch::prop
 		{
 		  float cb[4] = { 0, 0, 0, 1 };
 
 		  for (int i = 0; i < 3; i++)
 		    cb[i] = (as * ecolor(i));
 		  glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
 		  for (int i = 0; i < 3; i++)
-		    cb[i] *= (ds / as);
+		    cb[i] = ds * ecolor(i);
 		  glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 		}
 	    }
 
 	  if (el_mode > 0)
 	    glEnable (GL_LIGHTING);
 
 	  set_linestyle (props.get_linestyle (), false);
