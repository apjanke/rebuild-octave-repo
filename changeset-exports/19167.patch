# HG changeset patch
# User Rik <rik@octave.org>
# Date 1411846017 25200
#      Sat Sep 27 12:26:57 2014 -0700
# Node ID 6f0290863d50cccfcb5321432f4749b2256c1ddb
# Parent  7671033039748c171177ab265d3a0757afa6d041
Add new function unsetenv from gnulib to Octave.

* NEWS: Announce new function.

* bootstrap.conf: Pull unsetenv from gnulib.

* sysdep.cc (Fgetenv): Add seealso references to setenv, unsetenv.
* sysdep.cc (Fsetenv): Rename from Fputenv.  Change DEFALIAS to be from setenv
to putenv.  Redo docstring.  Use unsetenv in BIST tests to get rid of temporary
environment variable.
* sysdep.cc (Funsetenv): New function.

* system.txi: Add unsetenv to manual.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -88,16 +88,17 @@ Summary of important user-visible change
       istril
       istriu
       javachk
       linkaxes
       lscov
       numfields
       rotate
       sylvester
+      unsetenv
       zoom
 
  ** inline() scheduled for eventual deprecation by Matlab
 
     Functions created through the use of inline are scheduled for deprecation
     by Matlab.  When this occurs Octave will continue to support inline
     functions for an indeterminate amount of time before also removing support.
     All new code should use anonymous functions in place of inline functions. 
diff --git a/bootstrap.conf b/bootstrap.conf
--- a/bootstrap.conf
+++ b/bootstrap.conf
@@ -96,16 +96,17 @@ gnulib_modules="
   time
   times
   tmpfile
   trunc
   truncf
   uname
   unistd
   unlink
+  unsetenv
   vasprintf
 "
 
 # Additional xgettext options to use.  Use "\\\newline" to break lines.
 XGETTEXT_OPTIONS=$XGETTEXT_OPTIONS'\\\
  --from-code=UTF-8\\\
  --flag=asprintf:2:c-format --flag=vasprintf:2:c-format\\\
  --flag=asnprintf:3:c-format --flag=vasnprintf:3:c-format\\\
diff --git a/doc/interpreter/system.txi b/doc/interpreter/system.txi
--- a/doc/interpreter/system.txi
+++ b/doc/interpreter/system.txi
@@ -401,17 +401,19 @@ they can be used, look at the definition
 
 @DOCSTRING(getgid)
 
 @node Environment Variables
 @section Environment Variables
 
 @DOCSTRING(getenv)
 
-@DOCSTRING(putenv)
+@DOCSTRING(setenv)
+
+@DOCSTRING(unsetenv)
 
 @node Current Working Directory
 @section Current Working Directory
 
 @DOCSTRING(cd)
 
 @DOCSTRING(ls)
 
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -550,16 +550,17 @@ DEFUN (getenv, args, ,
 Return the value of the environment variable @var{var}.  For example,\n\
 \n\
 @example\n\
 getenv (\"PATH\")\n\
 @end example\n\
 \n\
 @noindent\n\
 returns a string containing the value of your path.\n\
+@seealso{setenv, unsetenv}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
@@ -569,21 +570,30 @@ returns a string containing the value of
         retval = octave_env::getenv (name);
     }
   else
     print_usage ();
 
   return retval;
 }
 
-DEFUN (putenv, args, ,
+/*
+%!assert (ischar (getenv ("OCTAVE_HOME")))
+*/
+
+DEFUN (setenv, args, ,
        "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {} putenv (@var{var}, @var{value})\n\
-@deftypefnx {Built-in Function} {} setenv (@var{var}, @var{value})\n\
+@deftypefn  {Built-in Function} {} setenv (@var{var}, @var{value})\n\
+@deftypefnx {Built-in Function} {} setenv (@var{var})\n\
+@deftypefnx {Built-in Function} {} putenv (@dots{})\n\
 Set the value of the environment variable @var{var} to @var{value}.\n\
+\n\
+If no @var{value} is specified then the variable will be assigned the null\n\
+string.\n\
+@seealso{unsetenv, getenv}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 2 || nargin == 1)
     {
@@ -592,34 +602,69 @@ Set the value of the environment variabl
       if (! error_state)
         {
           std::string val = (nargin == 2
                              ? args(1).string_value () : std::string ());
 
           if (! error_state)
             octave_env::putenv (var, val);
           else
-            error ("putenv: VALUE must be a string");
+            error ("setenv: VALUE must be a string");
         }
       else
-        error ("putenv: VAR must be a string");
+        error ("setenv: VAR must be a string");
     }
   else
     print_usage ();
 
   return retval;
 }
 
-DEFALIAS (setenv, putenv);
+DEFALIAS (putenv, setenv);
 
 /*
-%!assert (ischar (getenv ("OCTAVE_HOME")))
 %!test
 %! setenv ("dummy_variable_that_cannot_matter", "foobar");
 %! assert (getenv ("dummy_variable_that_cannot_matter"), "foobar");
+%! unsetenv ("dummy_variable_that_cannot_matter");
+%! assert (getenv ("dummy_variable_that_cannot_matter"), "");
+*/
+
+DEFUN (unsetenv, args, ,
+       "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {@var{status} =} unsetenv (@var{var})\n\
+Delete the environment variable @var{var}.\n\
+\n\
+Return 0 if the variable was deleted, or did not exist, and -1 if an error\n\
+occurred.\n\
+@seealso{setenv, getenv}\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1)
+    {
+      const char *var = args(0).string_value ().c_str ();
+
+      if (! error_state)
+        {
+          int status = gnulib::unsetenv (var);
+          retval = status;
+        }
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
+/*
+## Test for unsetenv is in setenv test
 */
 
 // FIXME: perhaps kbhit should also be able to print a prompt?
 
 DEFUN (kbhit, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} kbhit ()\n\
 @deftypefnx {Built-in Function} {} kbhit (1)\n\
