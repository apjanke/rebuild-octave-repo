# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365281174 14400
#      Sat Apr 06 16:46:14 2013 -0400
# Node ID e3b33a7530bcf6aaf3b63e6fad4b9a7224f534f9
# Parent  4b3a4bf8569bba368c100618bf30b768e0b39f1d
improve encapsulation of history window object

* history-dockwidget.h, history-dockwidget.cc
(history_dock_widget::history_dock_widget): Set status tip here.

Connect history_dock_widget::information signal to
main_window::report_status_message.
Connect history_dock_widget::command_double_clicked signal to
main_window::handle_command_double_clicked.
(history_dock_widget::connect_visibility_changed,
history_dock_widget::focus, history_dock_widget::handle_visibility):
New functions.

* main-window.h, main-window.cc (main_window::history_window): Rename
from _history_dock_widget.  Don't use a pointer.  Change all uses.
(main_window::main_window): Initialize it here.
(main_window::~main_window): Don't delete _history_dock_widget.
(main_window::focus_history_window_signal): New signal.
(main_window::focus_history_window): Rename from
main_window::focus_command_history.  Emit focus_history_window_signal
instead of performing actions here.
(main_window::handle_command_history_visible): Delete.
(main_window::connect_visibility_changed): Call
history_window.connect_visibility_changed instead of performing
actions here.
(main_window::construct): Don't create _history_dock_widget.  Adapt
signal/slot connections for new history_window object.

diff --git a/libgui/src/history-dockwidget.cc b/libgui/src/history-dockwidget.cc
--- a/libgui/src/history-dockwidget.cc
+++ b/libgui/src/history-dockwidget.cc
@@ -29,26 +29,40 @@ along with Octave; see the file COPYING.
 #include <QVBoxLayout>
 #include <QMenu>
 
 #include "error.h"
 
 #include "cmd-hist.h"
 
 #include "history-dockwidget.h"
-#include "octave-link.h"
 
-history_dock_widget::history_dock_widget (QWidget * p)
+history_dock_widget::history_dock_widget (QWidget *p)
   : octave_dock_widget (p)
 {
   setObjectName ("HistoryDockWidget");
+  setStatusTip (tr ("Browse and search the command history."));
+
+  connect (this, SIGNAL (information (QString)),
+           p, SLOT (report_status_message (QString)));
+
+  connect (this, SIGNAL (command_double_clicked (const QString&)),
+           p, SLOT (handle_command_double_clicked (const QString&)));
+
   construct ();
 }
 
 void
+history_dock_widget::connect_visibility_changed (void)
+{
+  connect (this, SIGNAL (visibilityChanged (bool)),
+           this, SLOT (handle_visibility (bool)));
+}
+
+void
 history_dock_widget::construct ()
 {
   _history_model = new QStringListModel ();
   _sort_filter_proxy_model.setSourceModel (_history_model);
   _history_list_view = new QListView (this);
   _history_list_view->setModel (&_sort_filter_proxy_model);
   _history_list_view->setAlternatingRowColors (true);
   _history_list_view->setEditTriggers (QAbstractItemView::NoEditTriggers);
@@ -136,8 +150,26 @@ history_dock_widget::append_history (con
 }
 
 void
 history_dock_widget::clear_history (void)
 {
   _history_model->setStringList (QStringList ());
 }
 
+void
+history_dock_widget::focus (void)
+{
+  if (! isVisible ())
+    setVisible (true);
+
+  setFocus ();
+  activateWindow ();
+  raise ();
+}
+
+void
+history_dock_widget::handle_visibility (bool visible)
+{
+  if (visible && ! isFloating ())
+    focus ();
+}
+
diff --git a/libgui/src/history-dockwidget.h b/libgui/src/history-dockwidget.h
--- a/libgui/src/history-dockwidget.h
+++ b/libgui/src/history-dockwidget.h
@@ -27,37 +27,48 @@ along with Octave; see the file COPYING.
 #include <QListView>
 #include <QSortFilterProxyModel>
 #include <QStringListModel>
 #include "octave-dock-widget.h"
 
 class history_dock_widget : public octave_dock_widget
 {
   Q_OBJECT
-  public:
+
+public:
+
   history_dock_widget (QWidget *parent = 0);
 
+  void connect_visibility_changed (void);
+
 public slots:
+
   void set_history (const QStringList& hist);
   void append_history (const QString& hist_entry);
   void clear_history (void);
 
+  void focus (void);
+  void handle_visibility (bool);
+
 signals:
+
   void information (const QString& message);
 
   /** Emitted, whenever the user double-clicked a command in the history. */
   void command_double_clicked (const QString& command);
 
 private slots:
+
   void handle_double_click (QModelIndex modelIndex);
   void handle_contextmenu_copy(bool flag);
   void handle_contextmenu_evaluate(bool flag);
   void ctxMenu(const QPoint &pos);
 
 private:
+
   void construct ();
   QListView *_history_list_view;
   QLineEdit *_filter_line_edit;
   QSortFilterProxyModel _sort_filter_proxy_model;
 
   /** Stores the current history_model. */
   QStringListModel *_history_model;
 };
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -1,10 +1,11 @@
 /*
 
+Copyright (C) 2013 John W. Eaton
 Copyright (C) 2011-2012 Jacob Dawid
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
@@ -50,17 +51,17 @@ along with Octave; see the file COPYING.
 #include "toplev.h"
 #include "version.h"
 
 #include "cmd-edit.h"
 #include "cmd-hist.h"
 #include "oct-env.h"
 
 main_window::main_window (QWidget *p)
-  : QMainWindow (p), command_window (this)
+  : QMainWindow (p), command_window (this), history_window (this)
 {
   // We have to set up all our windows, before we finally launch octave.
   construct ();
 }
 
 main_window::~main_window ()
 {
   // Clean up all dynamically created objects to ensure they are
@@ -82,19 +83,16 @@ main_window::~main_window ()
     delete _status_bar;
 
   if (_documentation_dock_widget)
     delete _documentation_dock_widget;
 
   if (_files_dock_widget)
     delete _files_dock_widget;
 
-  if (_history_dock_widget)
-    delete _history_dock_widget;
-
   delete _workspace_model;
   delete _workspace_view;
 }
 
 void
 main_window::new_file ()
 {
 #ifdef HAVE_QSCINTILLA
@@ -346,26 +344,19 @@ main_window::accept_directory_line_edit 
 
 void
 main_window::focus_command_window (void)
 {
   emit focus_command_window_signal ();
 }
 
 void
-main_window::focus_command_history ()
+main_window::focus_history_window (void)
 {
-  if (!_history_dock_widget->isVisible ())
-    {
-      _history_dock_widget->setVisible (true);
-    }
-
-  _history_dock_widget->setFocus ();
-  _history_dock_widget->activateWindow ();
-  _history_dock_widget->raise ();
+  emit focus_history_window_signal ();
 }
 
 void
 main_window::focus_current_directory ()
 {
   if (!_files_dock_widget->isVisible ())
     {
       _files_dock_widget->setVisible (true);
@@ -408,24 +399,16 @@ main_window::focus_documentation ()
     }
 
   _documentation_dock_widget->setFocus ();
   _documentation_dock_widget->activateWindow ();
   _documentation_dock_widget->raise ();
 }
 
 void
-main_window::handle_command_history_visible (bool visible)
-{
-  // if changed to visible and widget is not floating
-  if (visible && !_history_dock_widget->isFloating ())
-    focus_command_history ();
-}
-
-void
 main_window::handle_current_directory_visible (bool visible)
 {
   // if changed to visible and widget is not floating
   if (visible && !_files_dock_widget->isFloating ())
     focus_current_directory ();
 }
 
 void
@@ -612,21 +595,20 @@ main_window::write_settings ()
 
 
 // Connecting the signals emitted when the visibility of a widget changes.
 // This has to be done after the window is shown (see octave-gui.cc)
 void
 main_window::connect_visibility_changed ()
 {
   command_window.connect_visibility_changed ();
+  history_window.connect_visibility_changed ();
 
   connect (_workspace_view,       SIGNAL (visibilityChanged (bool)),
            this,                  SLOT (handle_workspace_visible (bool)));
-  connect (_history_dock_widget,  SIGNAL (visibilityChanged (bool)),
-           this,                  SLOT (handle_command_history_visible (bool)));
   connect (_files_dock_widget,    SIGNAL (visibilityChanged (bool)),
            this,                  SLOT (handle_current_directory_visible (bool)));
 #ifdef HAVE_QSCINTILLA
   connect (_file_editor,          SIGNAL (visibilityChanged (bool)),
            this,                  SLOT (handle_editor_visible (bool)));
 #endif
   connect (_documentation_dock_widget,  SIGNAL (visibilityChanged (bool)),
            this,                  SLOT (handle_documentation_visible (bool)));
@@ -647,18 +629,16 @@ main_window::construct ()
   _workspace_view           = new workspace_view (this);
 
   _workspace_view->setModel (_workspace_model);
   _workspace_view->setStatusTip (tr ("View the variables in the active workspace."));
 
   connect (_workspace_model, SIGNAL (model_changed ()),
            _workspace_view, SLOT (model_changed ()));
 
-  _history_dock_widget      = new history_dock_widget (this);
-  _history_dock_widget->setStatusTip (tr ("Browse and search the command history."));
   _files_dock_widget        = new files_dock_widget (this);
   _files_dock_widget->setStatusTip (tr ("Browse your files."));
   _documentation_dock_widget= new documentation_dock_widget (this);
   _documentation_dock_widget->setStatusTip (tr ("See the documentation for help."));
   _status_bar               = new QStatusBar (this);
 
   _current_directory_line_edit = new QLineEdit (this);
   _current_directory_combo_box = new QComboBox (this);
@@ -1012,18 +992,18 @@ main_window::construct ()
            &command_window,             SLOT   (setVisible (bool)));
   connect (&command_window,             SIGNAL (active_changed (bool)),
            show_command_window_action,  SLOT   (setChecked (bool)));
   connect (show_workspace_action,       SIGNAL (toggled (bool)),
            _workspace_view,             SLOT   (setVisible (bool)));
   connect (_workspace_view,             SIGNAL (active_changed (bool)),
            show_workspace_action,       SLOT   (setChecked (bool)));
   connect (show_history_action,         SIGNAL (toggled (bool)),
-           _history_dock_widget,        SLOT   (setVisible (bool)));
-  connect (_history_dock_widget,        SIGNAL (active_changed (bool)),
+           &history_window,             SLOT   (setVisible (bool)));
+  connect (&history_window,             SIGNAL (active_changed (bool)),
            show_history_action,         SLOT   (setChecked (bool)));
   connect (show_file_browser_action,    SIGNAL (toggled (bool)),
            _files_dock_widget,          SLOT   (setVisible (bool)));
   connect (_files_dock_widget,          SIGNAL (active_changed (bool)),
            show_file_browser_action,    SLOT   (setChecked (bool)));
 #ifdef HAVE_QSCINTILLA
   connect (show_editor_action,          SIGNAL (toggled (bool)),
            _file_editor,                SLOT   (setVisible (bool)));
@@ -1065,20 +1045,16 @@ main_window::construct ()
   connect (this,                        SIGNAL (settings_changed (const QSettings *)),
            _files_dock_widget,          SLOT   (notice_settings (const QSettings *)));
   connect (this,                        SIGNAL (settings_changed (const QSettings *)),
            this,                        SLOT   (notice_settings (const QSettings *)));
   connect (_files_dock_widget,          SIGNAL (open_file (QString)),
            this,                        SLOT   (open_file (QString)));
   connect (_files_dock_widget,          SIGNAL (displayed_directory_changed(QString)),
            this,                        SLOT   (set_current_working_directory(QString)));
-  connect (_history_dock_widget,        SIGNAL (information (QString)),
-           this,                        SLOT   (report_status_message (QString)));
-  connect (_history_dock_widget,        SIGNAL (command_double_clicked (const QString&)),
-           this,                        SLOT   (handle_command_double_clicked (const QString&)));
   connect (this,                        SIGNAL (relay_command_signal (const QString&)),
            &command_window,             SLOT   (relay_command (const QString&)));
   connect (save_workspace_action,       SIGNAL (triggered ()),
            this,                        SLOT   (handle_save_workspace_request ()));
   connect (load_workspace_action,       SIGNAL (triggered ()),
            this,                        SLOT   (handle_load_workspace_request ()));
   connect (clear_workspace_action,      SIGNAL (triggered ()),
            this,                        SLOT   (handle_clear_workspace_request ()));
@@ -1114,17 +1090,17 @@ main_window::construct ()
   addDockWidget (Qt::RightDockWidgetArea, _documentation_dock_widget);
   tabifyDockWidget (&command_window, _documentation_dock_widget);
 #ifdef HAVE_QSCINTILLA
   addDockWidget (Qt::RightDockWidgetArea, _file_editor);
   tabifyDockWidget (&command_window, _file_editor);
 #endif
   addDockWidget (Qt::LeftDockWidgetArea, _files_dock_widget);
   addDockWidget (Qt::LeftDockWidgetArea, _workspace_view);
-  addDockWidget (Qt::LeftDockWidgetArea, _history_dock_widget);
+  addDockWidget (Qt::LeftDockWidgetArea, &history_window);
 
   int win_x = QApplication::desktop()->width();
   int win_y = QApplication::desktop()->height();
   if (win_x > 960)
     win_x = 960;
   if (win_y > 720)
     win_y = 720;
   setGeometry (0,0,win_x,win_y);
@@ -1142,25 +1118,25 @@ main_window::construct ()
 
   _octave_qt_link = new octave_qt_link ();
 
   connect (_octave_qt_link, SIGNAL (change_directory_signal (QString)),
            this, SLOT (change_directory (QString)));
 
   connect (_octave_qt_link,
            SIGNAL (set_history_signal (const QStringList&)),
-           _history_dock_widget, SLOT (set_history (const QStringList&)));
+           &history_window, SLOT (set_history (const QStringList&)));
 
   connect (_octave_qt_link,
            SIGNAL (append_history_signal (const QString&)),
-           _history_dock_widget, SLOT (append_history (const QString&)));
+           &history_window, SLOT (append_history (const QString&)));
 
   connect (_octave_qt_link,
            SIGNAL (clear_history_signal (void)),
-           _history_dock_widget, SLOT (clear_history (void)));
+           &history_window, SLOT (clear_history (void)));
 
   connect (_octave_qt_link, SIGNAL (enter_debugger_signal ()),
            this, SLOT (handle_enter_debugger ()));
 
   connect (_octave_qt_link, SIGNAL (exit_debugger_signal ()),
            this, SLOT (handle_exit_debugger ()));
 
   connect (_octave_qt_link,
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -1,10 +1,11 @@
 /*
 
+Copyright (C) 2013 John W. Eaton
 Copyright (C) 2011-2012 Jacob Dawid
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
@@ -15,18 +16,18 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
-#ifndef MAINWINDOW_H
-#define MAINWINDOW_H
+#if !defined (main_window_h)
+#define main_window_h 1
 
 // Qt includes
 #include <QtGui/QMainWindow>
 #include <QThread>
 #include <QTabWidget>
 #include <QMdiArea>
 #include <QStatusBar>
 #include <QToolBar>
@@ -67,16 +68,17 @@ public:
   main_window (QWidget *parent = 0);
 
   ~main_window ();
 
 signals:
   void settings_changed (const QSettings *);
   void relay_command_signal (const QString&);
   void focus_command_window_signal (void);
+  void focus_history_window_signal (void);
 
 public slots:
   void report_status_message (const QString& statusMessage);
   void handle_save_workspace_request ();
   void handle_load_workspace_request ();
   void handle_clear_workspace_request ();
   void handle_clear_history_request (void);
   void new_file ();
@@ -97,22 +99,21 @@ public slots:
   void browse_for_directory (void);
   void set_current_working_directory (const QString& dir);
   void change_directory_up (void);
   void accept_directory_line_edit (void);
 
   void handle_command_double_clicked (const QString& command);
 
   void focus_command_window (void);
-  void focus_command_history ();
+  void focus_history_window (void);
   void focus_current_directory ();
   void focus_workspace ();
   void focus_editor ();
   void focus_documentation ();
-  void handle_command_history_visible (bool);
   void handle_current_directory_visible (bool);
   void handle_workspace_visible (bool);
   void handle_editor_visible (bool);
   void handle_documentation_visible (bool);
 
   void handle_enter_debugger (void);
   void handle_exit_debugger (void);
   void debug_continue ();
@@ -151,33 +152,34 @@ private:
   void debug_step_out_callback (void);
 
   void debug_quit_callback (void);
 
   void exit_callback (void);
 
   terminal_dock_widget command_window;
 
+  history_dock_widget history_window;
+
 #ifdef HAVE_QSCINTILLA
   file_editor_interface *   _file_editor;
 #endif
   QMenu *                   _debug_menu;
 
   QAction *                 _debug_continue;
   QAction *                 _debug_step_into;
   QAction *                 _debug_step_over;
   QAction *                 _debug_step_out;
   QAction *                 _debug_quit;
 
   // Data models.
   workspace_model *         _workspace_model;
 
   // Dock widgets.
   workspace_view *          _workspace_view;
-  history_dock_widget *     _history_dock_widget;
   files_dock_widget *       _files_dock_widget;
   documentation_dock_widget*_documentation_dock_widget;
 
   // Toolbars.
   QStatusBar *              _status_bar;
   QComboBox *               _current_directory_combo_box;
   static const int        current_directory_width       = 300;
   static const int        current_directory_max_visible = 16;
