# HG changeset patch
# User Julien Bect <julien.bect@supelec.fr>
# Date 1362337166 -3600
#      Sun Mar 03 19:59:26 2013 +0100
# Node ID 1f1e248caeab0c7446d97a53598426526aac316a
# Parent  70c47da7e02b3002eeb76d3777b4f473d13ba5af
unique.m: Correctly check invalid options (bug #38460)

* unique.m: Use ismember instead of strmatch to scan varargin. Add tests.

diff --git a/scripts/set/unique.m b/scripts/set/unique.m
--- a/scripts/set/unique.m
+++ b/scripts/set/unique.m
@@ -47,19 +47,19 @@ function [y, i, j] = unique (x, varargin
   if (nargin < 1)
     print_usage ();
   endif
 
   if (nargin > 1)
     ## parse options
     if (iscellstr (varargin))
       varargin = unique (varargin);
-      optfirst = strmatch ("first", varargin, "exact") > 0;
-      optlast = strmatch ("last", varargin, "exact") > 0;
-      optrows = strmatch ("rows", varargin, "exact") > 0;
+      optfirst = ismember ("first", varargin);
+      optlast = ismember ("last", varargin);
+      optrows = ismember ("rows", varargin);
       if (optfirst && optlast)
         error ('unique: cannot specify both "last" and "first"');
       elseif (optfirst + optlast + optrows != nargin-1)
         error ("unique: invalid option");
       endif
     else
       error ("unique: options must be strings");
     endif
@@ -209,8 +209,12 @@ endfunction
 %!
 %!test
 %! A = [1,2,3;1,2,3];
 %! [a,i,j] = unique (A, "rows");
 %! assert (a, [1,2,3]);
 %! assert (A(i,:), a);
 %! assert (a(j,:), A);
 
+%!error unique({"a", "b", "c"}, "UnknownOption")
+%!error unique({"a", "b", "c"}, "UnknownOption1", "UnknownOption2")
+%!error unique({"a", "b", "c"}, "rows", "UnknownOption2")
+%!error unique({"a", "b", "c"}, "UnknownOption1", "last")
