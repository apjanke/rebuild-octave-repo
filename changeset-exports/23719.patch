# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498745922 14400
#      Thu Jun 29 10:18:42 2017 -0400
# Node ID 69a111259a2c8030f71aadca772ee545b57e953e
# Parent  251cb33c6570d55f6e870e3484e4d44637ea9705
eliminate some global variables

* environment.h, environment.cc: New files.  Move EDITOR, EXEC_PATH,
and IMAGE_PATH inside environment class from defaults.h and
defaults.cc.  Change all uses.

* libinterp/corefcn/module.mk: Update.

diff --git a/libinterp/corefcn/defaults.h b/libinterp/corefcn/defaults.h
--- a/libinterp/corefcn/defaults.h
+++ b/libinterp/corefcn/defaults.h
@@ -1,9 +1,8 @@
-// DO NOT EDIT!  Generated automatically by subst-default-vals.
 /*
 
 Copyright (C) 1993-2017 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by
@@ -94,24 +93,11 @@ namespace octave
   }
 }
 
 // FIXME: these may be changed by users.  Maybe they should be defined
 // somewhere else?
 
 extern OCTINTERP_API std::string Vbuilt_in_docstrings_file;
 
-extern OCTINTERP_API std::string VEXEC_PATH;
-
-// Name of the editor to be invoked by the edit_history command.
-extern OCTINTERP_API std::string VEDITOR;
-
-extern OCTINTERP_API std::string VIMAGE_PATH;
-
-extern OCTINTERP_API void
-set_exec_path (const std::string& path = "");
-
-extern OCTINTERP_API void
-set_image_path (const std::string& path = "");
-
 extern OCTINTERP_API void install_defaults (void);
 
 #endif
diff --git a/libinterp/corefcn/defaults.in.cc b/libinterp/corefcn/defaults.in.cc
--- a/libinterp/corefcn/defaults.in.cc
+++ b/libinterp/corefcn/defaults.in.cc
@@ -1,8 +1,9 @@
+// DO NOT EDIT!  Generated automatically by subst-default-vals.
 /*
 
 Copyright (C) 1996-2017 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by
@@ -457,85 +458,16 @@ set_default_texi_macros_file (void)
 
       std::string env_file = octave::sys::env::getenv ("OCTAVE_TEXI_MACROS_FILE");
 
       Vtexi_macros_file = (env_file.empty () ? def_file : env_file);
     }
 }
 
 static void
-set_default_editor (void)
-{
-  VEDITOR = "emacs";
-
-  std::string env_editor = octave::sys::env::getenv ("EDITOR");
-
-  if (! env_editor.empty ())
-    VEDITOR = env_editor;
-}
-
-void
-set_exec_path (const std::string& path_arg)
-{
-  std::string tpath = path_arg;
-
-  if (tpath.empty ())
-    tpath = octave::sys::env::getenv ("OCTAVE_EXEC_PATH");
-
-  if (tpath.empty ())
-    tpath = Vlocal_ver_arch_lib_dir + octave::directory_path::path_sep_str ()
-            + Vlocal_api_arch_lib_dir + octave::directory_path::path_sep_str ()
-            + Vlocal_arch_lib_dir + octave::directory_path::path_sep_str ()
-            + Varch_lib_dir + octave::directory_path::path_sep_str ()
-            + Vbin_dir;
-
-  VEXEC_PATH = tpath;
-
-  // FIXME: should we really be modifying PATH in the environment?
-  // The way things are now, Octave will ignore directories set in the
-  // PATH with calls like
-  //
-  //   setenv ("PATH", "/my/path");
-  //
-  // To fix this, I think Octave should be searching the combination of
-  // PATH and EXEC_PATH for programs that it executes instead of setting
-  // the PATH in the environment and relying on the shell to do the
-  // searching.
-
-  // This is static so that even if set_exec_path is called more than
-  // once, shell_path is the original PATH from the environment,
-  // before we start modifying it.
-  static std::string shell_path = octave::sys::env::getenv ("PATH");
-
-  if (! shell_path.empty ())
-    tpath = shell_path + octave::directory_path::path_sep_str () + tpath;
-
-  octave::sys::env::putenv ("PATH", tpath);
-}
-
-void
-set_image_path (const std::string& path)
-{
-  VIMAGE_PATH = ".";
-
-  std::string tpath = path;
-
-  if (tpath.empty ())
-    tpath = octave::sys::env::getenv ("OCTAVE_IMAGE_PATH");
-
-  if (! tpath.empty ())
-    VIMAGE_PATH += octave::directory_path::path_sep_str () + tpath;
-
-  tpath = octave::genpath (Vimage_dir, "");
-
-  if (! tpath.empty ())
-    VIMAGE_PATH += octave::directory_path::path_sep_str () + tpath;
-}
-
-static void
 set_default_doc_cache_file (void)
 {
   if (Vdoc_cache_file.empty ())
     {
       std::string def_file = prepend_octave_home (OCTAVE_DOC_CACHE_FILE);
 
       std::string env_file = octave::sys::env::getenv ("OCTAVE_DOC_CACHE_FILE");
 
@@ -565,22 +497,16 @@ install_defaults (void)
   init_defaults ();
 
   set_default_info_file ();
 
   set_default_info_prog ();
 
   set_default_texi_macros_file ();
 
-  set_default_editor ();
-
-  set_exec_path ();
-
-  set_image_path ();
-
   set_default_doc_cache_file ();
 
   set_built_in_docstrings_file ();
 }
 
 #define RETURN(VAR)                             \
   if (! initialized)                            \
     init_defaults ();                           \
@@ -640,119 +566,16 @@ namespace octave
 
     std::string local_site_defaults_file (void) { RETURN (Vlocal_site_defaults_file); }
     std::string site_defaults_file (void) { RETURN (Vsite_defaults_file); }
   }
 }
 
 #undef RETURN
 
-DEFUN (EDITOR, args, nargout,
-       doc: /* -*- texinfo -*-
-@deftypefn  {} {@var{val} =} EDITOR ()
-@deftypefnx {} {@var{old_val} =} EDITOR (@var{new_val})
-@deftypefnx {} {} EDITOR (@var{new_val}, "local")
-Query or set the internal variable that specifies the default text editor.
-
-The default value is taken from the environment variable @w{@env{EDITOR}}
-when Octave starts.  If the environment variable is not initialized,
-@w{@env{EDITOR}} will be set to @qcode{"emacs"}.
-
-When called from inside a function with the @qcode{"local"} option, the
-variable is changed locally for the function and any subroutines it calls.
-The original variable value is restored when exiting the function.
-
-@seealso{edit, edit_history}
-@end deftypefn */)
-{
-  return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (EDITOR);
-}
-
-/*
-%!test
-%! orig_val = EDITOR ();
-%! old_val = EDITOR ("X");
-%! assert (orig_val, old_val);
-%! assert (EDITOR (), "X");
-%! EDITOR (orig_val);
-%! assert (EDITOR (), orig_val);
-
-%!error (EDITOR (1, 2))
-*/
-
-DEFUN (EXEC_PATH, args, nargout,
-       doc: /* -*- texinfo -*-
-@deftypefn  {} {@var{val} =} EXEC_PATH ()
-@deftypefnx {} {@var{old_val} =} EXEC_PATH (@var{new_val})
-@deftypefnx {} {} EXEC_PATH (@var{new_val}, "local")
-Query or set the internal variable that specifies a colon separated
-list of directories to append to the shell PATH when executing external
-programs.
-
-The initial value of is taken from the environment variable
-@w{@env{OCTAVE_EXEC_PATH}}, but that value can be overridden by the command
-line argument @option{--exec-path PATH}.
-
-When called from inside a function with the @qcode{"local"} option, the
-variable is changed locally for the function and any subroutines it calls.
-The original variable value is restored when exiting the function.
-
-@seealso{IMAGE_PATH, OCTAVE_HOME, OCTAVE_EXEC_HOME}
-@end deftypefn */)
-{
-  octave_value retval = SET_NONEMPTY_INTERNAL_STRING_VARIABLE (EXEC_PATH);
-
-  if (args.length () > 0)
-    set_exec_path (VEXEC_PATH);
-
-  return retval;
-}
-
-/*
-%!test
-%! orig_val = EXEC_PATH ();
-%! old_val = EXEC_PATH ("X");
-%! assert (orig_val, old_val);
-%! assert (EXEC_PATH (), "X");
-%! EXEC_PATH (orig_val);
-%! assert (EXEC_PATH (), orig_val);
-
-%!error (EXEC_PATH (1, 2))
-*/
-
-DEFUN (IMAGE_PATH, args, nargout,
-       doc: /* -*- texinfo -*-
-@deftypefn  {} {@var{val} =} IMAGE_PATH ()
-@deftypefnx {} {@var{old_val} =} IMAGE_PATH (@var{new_val})
-@deftypefnx {} {} IMAGE_PATH (@var{new_val}, "local")
-Query or set the internal variable that specifies a colon separated
-list of directories in which to search for image files.
-
-When called from inside a function with the @qcode{"local"} option, the
-variable is changed locally for the function and any subroutines it calls.
-The original variable value is restored when exiting the function.
-
-@seealso{EXEC_PATH, OCTAVE_HOME, OCTAVE_EXEC_HOME}
-@end deftypefn */)
-{
-  return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (IMAGE_PATH);
-}
-
-/*
-%!test
-%! orig_val = IMAGE_PATH ();
-%! old_val = IMAGE_PATH ("X");
-%! assert (orig_val, old_val);
-%! assert (IMAGE_PATH (), "X");
-%! IMAGE_PATH (orig_val);
-%! assert (IMAGE_PATH (), orig_val);
-
-%!error (IMAGE_PATH (1, 2))
-*/
-
 DEFUN (OCTAVE_HOME, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} OCTAVE_HOME ()
 Return the name of the top-level Octave installation directory.
 OCTAVE_HOME corresponds to the configuration variable @var{prefix}.
 @seealso{EXEC_PATH, IMAGE_PATH, OCTAVE_EXEC_HOME}
 @end deftypefn */)
 {
diff --git a/libinterp/corefcn/environment.cc b/libinterp/corefcn/environment.cc
new file mode 100644
--- /dev/null
+++ b/libinterp/corefcn/environment.cc
@@ -0,0 +1,256 @@
+/*
+
+Copyright (C) 2017 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3 of the License, or
+(at your option) any later version.
+
+Octave is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include <string>
+
+#include "dir-ops.h"
+#include "oct-env.h"
+#include "file-stat.h"
+#include "pathsearch.h"
+#include "str-vec.h"
+
+#include "defaults.h"
+#include "defun.h"
+#include "environment.h"
+#include "interpreter.h"
+#include "variables.h"
+
+static void append_to_shell_path (const std::string& exec_path)
+{
+  // FIXME: should there be a way to remove a previous setting from
+  // PATH?
+
+  if (exec_path.empty ())
+    return;
+
+  // FIXME: should we really be modifying PATH in the environment?
+
+  std::string shell_path = octave::sys::env::getenv ("PATH");
+
+  if (shell_path.empty ())
+    octave::sys::env::putenv ("PATH", exec_path);
+  else
+    {
+      // If PATH doesn't already have exec_path, append it.
+      // FIXME: should we search for the elements individually, and
+      // only append those that are missing?
+
+    std::string path_sep = octave::directory_path::path_sep_str ();
+
+    if (shell_path.find (exec_path) == std::string::npos)
+        octave::sys::env::putenv ("PATH", shell_path + path_sep + exec_path);
+    }
+}
+
+namespace octave
+{
+  octave_value
+  environment::editor (const octave_value_list& args, int nargout)
+  {
+    return set_internal_variable (m_editor, args, nargout, "EDITOR", false);
+  }
+
+
+  octave_value
+  environment::exec_path (const octave_value_list& args, int nargout)
+  {
+    octave_value retval
+      = set_internal_variable (m_exec_path, args, nargout, "EXEC_PATH", false);
+
+    append_to_shell_path (m_exec_path);
+
+    return retval;
+  }
+
+  std::string environment::exec_path (const std::string& path)
+  {
+    std::string old_val = set (m_exec_path, path);
+
+    append_to_shell_path (m_exec_path);
+
+    return old_val;
+  }
+
+  octave_value
+  environment::image_path (const octave_value_list& args, int nargout)
+  {
+    return set_internal_variable (m_image_path, args, nargout, "IMAGE_PATH",
+                                  false);
+  }
+
+  std::string environment::init_editor (void)
+  {
+    std::string retval = "emacs";
+
+    std::string env_editor = octave::sys::env::getenv ("EDITOR");
+
+    if (! env_editor.empty ())
+      retval = env_editor;
+
+    return retval;
+  }
+
+  std::string environment::init_exec_path (void)
+  {
+    std::string exec_path = octave::sys::env::getenv ("OCTAVE_EXEC_PATH");
+
+    std::string path_sep = octave::directory_path::path_sep_str ();
+
+    if (exec_path.empty ())
+      exec_path = (config::local_ver_arch_lib_dir () + path_sep
+                   + config::local_api_arch_lib_dir () + path_sep
+                   + config::local_arch_lib_dir () + path_sep
+                   + config::arch_lib_dir () + path_sep
+                   + config::bin_dir ());
+
+    append_to_shell_path (exec_path);
+
+    return exec_path;
+  }
+
+  std::string environment::init_image_path (void)
+  {
+    std::string image_path = ".";
+
+    std::string path_sep = octave::directory_path::path_sep_str ();
+
+    std::string env_path = octave::sys::env::getenv ("OCTAVE_IMAGE_PATH");
+
+    if (! env_path.empty ())
+      image_path += path_sep + env_path;
+
+    std::string gen_path = octave::genpath (config::image_dir (), "");
+
+    if (! gen_path.empty ())
+      image_path += path_sep + gen_path;
+
+    return image_path;
+  }
+}
+
+DEFMETHOD (EDITOR, interp, args, nargout,
+           doc: /* -*- texinfo -*-
+@deftypefn  {} {@var{val} =} EDITOR ()
+@deftypefnx {} {@var{old_val} =} EDITOR (@var{new_val})
+@deftypefnx {} {} EDITOR (@var{new_val}, "local")
+Query or set the internal variable that specifies the default text editor.
+
+The default value is taken from the environment variable @w{@env{EDITOR}}
+when Octave starts.  If the environment variable is not initialized,
+@w{@env{EDITOR}} will be set to @qcode{"emacs"}.
+
+When called from inside a function with the @qcode{"local"} option, the
+variable is changed locally for the function and any subroutines it calls.
+The original variable value is restored when exiting the function.
+
+@seealso{edit, edit_history}
+@end deftypefn */)
+{
+  octave::environment& env = interp.get_environment ();
+
+  return env.editor (args, nargout);
+}
+
+/*
+%!test
+%! orig_val = EDITOR ();
+%! old_val = EDITOR ("X");
+%! assert (orig_val, old_val);
+%! assert (EDITOR (), "X");
+%! EDITOR (orig_val);
+%! assert (EDITOR (), orig_val);
+
+%!error (EDITOR (1, 2))
+*/
+
+DEFMETHOD (EXEC_PATH, interp, args, nargout,
+           doc: /* -*- texinfo -*-
+@deftypefn  {} {@var{val} =} EXEC_PATH ()
+@deftypefnx {} {@var{old_val} =} EXEC_PATH (@var{new_val})
+@deftypefnx {} {} EXEC_PATH (@var{new_val}, "local")
+Query or set the internal variable that specifies a colon separated
+list of directories to append to the shell PATH when executing external
+programs.
+
+The initial value of is taken from the environment variable
+@w{@env{OCTAVE_EXEC_PATH}}, but that value can be overridden by the command
+line argument @option{--exec-path PATH}.
+
+When called from inside a function with the @qcode{"local"} option, the
+variable is changed locally for the function and any subroutines it calls.
+The original variable value is restored when exiting the function.
+
+@seealso{IMAGE_PATH, OCTAVE_HOME, OCTAVE_EXEC_HOME}
+@end deftypefn */)
+{
+  octave::environment& env = interp.get_environment ();
+
+  return env.exec_path (args, nargout);
+}
+
+/*
+%!test
+%! orig_val = EXEC_PATH ();
+%! old_val = EXEC_PATH ("X");
+%! assert (orig_val, old_val);
+%! assert (EXEC_PATH (), "X");
+%! EXEC_PATH (orig_val);
+%! assert (EXEC_PATH (), orig_val);
+
+%!error (EXEC_PATH (1, 2))
+*/
+
+DEFMETHOD (IMAGE_PATH, interp, args, nargout,
+           doc: /* -*- texinfo -*-
+@deftypefn  {} {@var{val} =} IMAGE_PATH ()
+@deftypefnx {} {@var{old_val} =} IMAGE_PATH (@var{new_val})
+@deftypefnx {} {} IMAGE_PATH (@var{new_val}, "local")
+Query or set the internal variable that specifies a colon separated
+list of directories in which to search for image files.
+
+When called from inside a function with the @qcode{"local"} option, the
+variable is changed locally for the function and any subroutines it calls.
+The original variable value is restored when exiting the function.
+
+@seealso{EXEC_PATH, OCTAVE_HOME, OCTAVE_EXEC_HOME}
+@end deftypefn */)
+{
+  octave::environment& env = interp.get_environment ();
+
+  return env.image_path (args, nargout);
+}
+
+/*
+%!test
+%! orig_val = IMAGE_PATH ();
+%! old_val = IMAGE_PATH ("X");
+%! assert (orig_val, old_val);
+%! assert (IMAGE_PATH (), "X");
+%! IMAGE_PATH (orig_val);
+%! assert (IMAGE_PATH (), orig_val);
+
+%!error (IMAGE_PATH (1, 2))
+*/
diff --git a/libinterp/corefcn/environment.h b/libinterp/corefcn/environment.h
new file mode 100644
--- /dev/null
+++ b/libinterp/corefcn/environment.h
@@ -0,0 +1,92 @@
+/*
+
+Copyright (C) 2017 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3 of the License, or
+(at your option) any later version.
+
+Octave is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_environment_h)
+#define octave_environment_h 1
+
+#include "octave-config.h"
+
+#include <string>
+
+class octave_value;
+class octave_value_list;
+
+namespace octave
+{
+  class environment
+  {
+  public:
+
+    environment (void)
+      : m_editor (init_editor ()),
+        m_exec_path (init_exec_path ()),
+        m_image_path (init_image_path ())
+    { }
+
+    octave_value editor (const octave_value_list& args, int nargout);
+
+    std::string editor (void) const { return m_editor; }
+
+    std::string editor (const std::string& ed)
+    {
+      return set (m_editor, ed);
+    }
+
+    octave_value exec_path (const octave_value_list& args, int nargout);
+
+    std::string exec_path (void) const { return m_exec_path; }
+
+    std::string exec_path (const std::string& path);
+
+    octave_value image_path (const octave_value_list& args, int nargout);
+
+    std::string image_path (void) const { return m_image_path; }
+
+    std::string image_path (const std::string& path)
+    {
+      return set (m_image_path, path);
+    }
+
+  private:
+
+    std::string m_editor;
+
+    std::string m_exec_path;
+
+    std::string m_image_path;
+
+    static std::string init_editor (void);
+
+    static std::string init_exec_path (void);
+
+    static std::string init_image_path (void);
+
+    std::string set (std::string& var, const std::string& new_val)
+    {
+      std::string old_val = var;
+      var = new_val;
+      return old_val;
+    }
+  };
+}
+
+#endif
diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -369,16 +369,17 @@ execute_pkg_add (const std::string& dir)
 namespace octave
 {
   // Create an interpreter object and perform initialization up to the
   // point of setting reading command history and setting the load
   // path.
 
   interpreter::interpreter (application *app_context)
     : m_app_context (app_context),
+      m_environment (),
       m_dynamic_loader (*this),
       m_load_path (),
       m_symbol_table (),
       m_evaluator (*this),
       m_cdef_manager (*this),
       m_interactive (false),
       m_read_site_files (true),
       m_read_init_files (m_app_context != 0),
@@ -463,21 +464,21 @@ namespace octave
 
         std::list<std::string> command_line_path = options.command_line_path ();
 
         for (const auto& pth : command_line_path)
           m_load_path.set_command_line_path (pth);
 
         std::string exec_path = options.exec_path ();
         if (! exec_path.empty ())
-          set_exec_path (exec_path);
+          m_environment.exec_path (exec_path);
 
         std::string image_path = options.image_path ();
         if (! image_path.empty ())
-          set_image_path (image_path);
+          m_environment.image_path (image_path);
 
         if (options.no_window_system ())
           display_info::no_window_system ();
 
         // Is input coming from a terminal?  If so, we are probably
         // interactive.
 
         // If stdin is not a tty, then we are reading commands from a
diff --git a/libinterp/corefcn/interpreter.h b/libinterp/corefcn/interpreter.h
--- a/libinterp/corefcn/interpreter.h
+++ b/libinterp/corefcn/interpreter.h
@@ -26,16 +26,17 @@ along with Octave; see the file COPYING.
 #include "octave-config.h"
 
 #include <string>
 
 #include "quit.h"
 #include "str-vec.h"
 
 #include "dynamic-ld.h"
+#include "environment.h"
 #include "load-path.h"
 #include "ov-classdef.h"
 #include "pt-eval.h"
 #include "symtab.h"
 
 extern OCTINTERP_API bool quit_allowed;
 
 // TRUE means we are ready to interpret commands, but not everything
@@ -132,16 +133,21 @@ namespace octave
       m_inhibit_startup_message = flag;
     }
 
     bool initialized (void) const
     {
       return m_initialized;
     }
 
+    environment& get_environment (void)
+    {
+      return m_environment;
+    }
+
     dynamic_loader& get_dynamic_loader (void)
     {
       return m_dynamic_loader;
     }
 
     load_path& get_load_path (void)
     {
       return m_load_path;
@@ -195,16 +201,18 @@ namespace octave
     int execute_command_line_file (void);
 
     int main_loop (void);
 
     void cleanup (void);
 
     application *m_app_context;
 
+    environment m_environment;
+
     dynamic_loader m_dynamic_loader;
 
     load_path m_load_path;
 
     symbol_table m_symbol_table;
 
     tree_evaluator m_evaluator;
 
diff --git a/libinterp/corefcn/module.mk b/libinterp/corefcn/module.mk
--- a/libinterp/corefcn/module.mk
+++ b/libinterp/corefcn/module.mk
@@ -26,16 +26,17 @@ COREFCN_INC = \
   %reldir%/data.h \
   %reldir%/defaults.h \
   %reldir%/defun-dld.h \
   %reldir%/defun-int.h \
   %reldir%/defun.h \
   %reldir%/dirfns.h \
   %reldir%/display.h \
   %reldir%/dynamic-ld.h \
+  %reldir%/environment.h \
   %reldir%/error.h \
   %reldir%/errwarn.h \
   %reldir%/event-queue.h \
   %reldir%/file-io.h \
   %reldir%/ft-text-renderer.h \
   %reldir%/gl-render.h \
   %reldir%/gl2ps-print.h \
   %reldir%/gripes.h \
@@ -133,16 +134,17 @@ COREFCN_SRC = \
   %reldir%/det.cc \
   %reldir%/dirfns.cc \
   %reldir%/display.cc \
   %reldir%/dlmread.cc \
   %reldir%/dot.cc \
   %reldir%/dynamic-ld.cc \
   %reldir%/eig.cc \
   %reldir%/ellipj.cc \
+  %reldir%/environment.cc \
   %reldir%/error.cc \
   %reldir%/errwarn.cc \
   %reldir%/event-queue.cc \
   %reldir%/fft.cc \
   %reldir%/fft2.cc \
   %reldir%/fftn.cc \
   %reldir%/file-io.cc \
   %reldir%/filter.cc \
diff --git a/libinterp/corefcn/oct-hist.cc b/libinterp/corefcn/oct-hist.cc
--- a/libinterp/corefcn/oct-hist.cc
+++ b/libinterp/corefcn/oct-hist.cc
@@ -435,26 +435,27 @@ mk_tmp_hist_file (const octave_value_lis
 
 static void
 unlink_cleanup (const char *file)
 {
   octave_unlink_wrapper (file);
 }
 
 static void
-do_edit_history (const octave_value_list& args)
+do_edit_history (octave::interpreter& interp, const octave_value_list& args)
 {
   std::string name = mk_tmp_hist_file (args, false, "edit_history");
 
   if (name.empty ())
     return;
 
   // Call up our favorite editor on the file of commands.
 
-  std::string cmd = VEDITOR;
+  octave::environment& env = interp.get_environment ();
+  std::string cmd = env.editor ();
   cmd.append (" \"" + name + "\"");
 
   // Ignore interrupts while we are off editing commands.  Should we
   // maybe avoid using system()?
 
   volatile octave::interrupt_handler old_interrupt_handler
     = octave::ignore_interrupts ();
 
@@ -546,18 +547,18 @@ octave_history_write_timestamp (void)
 
   std::string timestamp = now.strftime (Vhistory_timestamp_format_string);
 
   if (! timestamp.empty ())
     if (octave::command_history::add (timestamp))
       octave_link::append_history (timestamp);
 }
 
-DEFUN (edit_history, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (edit_history, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn  {} {} edit_history
 @deftypefnx {} {} edit_history @var{cmd_number}
 @deftypefnx {} {} edit_history @var{first} @var{last}
 Edit the history list using the editor named by the variable @env{EDITOR}.
 
 The commands to be edited are first copied to a temporary file.  When you
 exit the editor, Octave executes the commands that remain in the file.  It
 is often more convenient to use @code{edit_history} to define functions
@@ -584,17 +585,17 @@ When using ranges, specifying a larger n
 last command reverses the list of commands before they are placed in the
 buffer to be edited.
 @seealso{run_history, history}
 @end deftypefn */)
 {
   if (args.length () > 2)
     print_usage ();
 
-  do_edit_history (args);
+  do_edit_history (interp, args);
 
   return ovl ();
 }
 
 DEFUN (history, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} history
 @deftypefnx {} {} history @var{opt1} @dots{}
