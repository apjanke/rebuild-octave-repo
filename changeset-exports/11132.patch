# HG changeset patch
# User Gunnar Farneback <gunnar@lysator.liu.se>
# Date 1287688544 -7200
#      Thu Oct 21 21:15:44 2010 +0200
# Node ID 6ed521ed2d6ac878872c5cd59d5b92ef5745428d
# Parent  953bb56af5984b725366b25801cd9082b7687adc
Stop converting single valued output from mex files to doubles.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -12,16 +12,22 @@ 2010-10-21  John W. Eaton  <jwe@octave.o
 	ov-flt-cx-mat.cc, ov-flt-re-mat.cc, ov-range.cc, ov-re-mat.cc,
 	ov-re-sparse.cc, ov-scalar.h: Use gripe_nan_to_logical_conversion.
 
 2010-10-20  John W. Eaton  <jwe@octave.org>
 
 	* toplev.cc (Fsystem): Allow optional RETURN_OUTPUT and TYPE
 	arguments to be specified independently.  Update doc string.
 
+2010-10-21  Gunnar Farneback  <gunnar@lysator.liu.se>
+
+	* mex.cc (mxArray_number::as_octave_value): Convert single
+	matlab array to single octave array instead of to double octave
+	array.
+
 2010-10-18  John W. Eaton  <jwe@octave.org>
 
 	* load-path.cc (load_path::do_find_first_of,
 	load_path::do_find_all_first_of): Also search path for relative
 	filenames.
 
 2010-10-17  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/mex.cc b/src/mex.cc
--- a/src/mex.cc
+++ b/src/mex.cc
@@ -1356,32 +1356,32 @@ protected:
       case mxSINGLE_CLASS:
         {
           mwSize nel = get_number_of_elements ();
 
           float *ppr = static_cast<float *> (pr);
 
           if (pi)
             {
-              ComplexNDArray val (dv);
-
-              Complex *ptr = val.fortran_vec ();
+              FloatComplexNDArray val (dv);
+
+              FloatComplex *ptr = val.fortran_vec ();
 
               float *ppi = static_cast<float *> (pi);
 
               for (mwIndex i = 0; i < nel; i++)
-                ptr[i] = Complex (ppr[i], ppi[i]);
+                ptr[i] = FloatComplex (ppr[i], ppi[i]);
 
               retval = val;
             }
           else
             {
-              NDArray val (dv);
-
-              double *ptr = val.fortran_vec ();
+              FloatNDArray val (dv);
+
+              float *ptr = val.fortran_vec ();
 
               for (mwIndex i = 0; i < nel; i++)
                 ptr[i] = ppr[i];
 
               retval = val;
             }
         }
         break;
