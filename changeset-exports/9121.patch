# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1239781249 -7200
#      Wed Apr 15 09:40:49 2009 +0200
# Node ID bb62bc406ea72c371d1ceacfe7c8f6584e82d403
# Parent  7d903c71470edc813addd6ed50a57c9bd447013e
reuse fast blocked transpose implementation from rec_permute_helper in Array<T>::transpose

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -497,17 +497,18 @@ public:
       use_blk = top >= 1 && stride[1] == 1 && stride[0] == dim[1];
 
     }
 
   ~rec_permute_helper (void) { delete [] dim; }
 
   // Helper method for fast blocked transpose.
   template <class T>
-  T *blk_trans (const T *src, T *dest, octave_idx_type nr, octave_idx_type nc) const
+  static T *
+  blk_trans (const T *src, T *dest, octave_idx_type nr, octave_idx_type nc)
     {
       static const octave_idx_type m = 8;
       OCTAVE_LOCAL_BUFFER (T, blk, m*m);
       for (octave_idx_type kr = 0; kr < nr; kr += m)
         for (octave_idx_type kc = 0; kc < nc; kc += m)
           {
             octave_idx_type lr = std::min (m, nr - kr);
             octave_idx_type lc = std::min (m, nc - kc);
@@ -1824,50 +1825,19 @@ Array<T>::transpose (void) const
 
   octave_idx_type nr = dim1 ();
   octave_idx_type nc = dim2 ();
 
   if (nr >= 8 && nc >= 8)
     {
       Array<T> result (dim_vector (nc, nr));
 
-      // Blocked transpose to attempt to avoid cache misses.
-
-      // Don't use OCTAVE_LOCAL_BUFFER here as it doesn't work with bool
-      // on some compilers.
-      T buf[64];
-
-      octave_idx_type ii = 0, jj;
-      for (jj = 0; jj < (nc - 8 + 1); jj += 8)
-	{
-	  for (ii = 0; ii < (nr - 8 + 1); ii += 8)
-	    {
-	      // Copy to buffer
-	      for (octave_idx_type j = jj, k = 0, idxj = jj * nr; 
-		   j < jj + 8; j++, idxj += nr)
-		for (octave_idx_type i = ii; i < ii + 8; i++)
-		  buf[k++] = xelem (i + idxj);
-
-	      // Copy from buffer
-	      for (octave_idx_type i = ii, idxi = ii * nc; i < ii + 8; 
-		   i++, idxi += nc)
-		for (octave_idx_type j = jj, k = i - ii; j < jj + 8; 
-		     j++, k+=8)
-		  result.xelem (j + idxi) = buf[k];
-	    }
-
-	  if (ii < nr)
-	    for (octave_idx_type j = jj; j < jj + 8; j++)
-	      for (octave_idx_type i = ii; i < nr; i++)
-		result.xelem (j, i) = xelem (i, j);
-	} 
-
-      for (octave_idx_type j = jj; j < nc; j++)
-	for (octave_idx_type i = 0; i < nr; i++)
-	  result.xelem (j, i) = xelem (i, j);
+      // Reuse the implementation used for permuting.
+
+      rec_permute_helper::blk_trans (data (), result.fortran_vec (), nr, nc);
 
       return result;
     }
   else if (nr > 1 && nc > 1)
     {
       Array<T> result (dim_vector (nc, nr));
 
       for (octave_idx_type j = 0; j < nc; j++)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-04-15  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.cc (rec_permute_helper::blk_trans): Declare as static.
+	(Array<T>::transpose): Reuse it.
+
 2009-04-04  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.cc (Array<T>::make_unique): Don't economize when unique.
 	(Array<T>::resize_fill (octave_idx_type, const T&)): Optimize push &
 	pop operations.
 	(Array<T>::delete_elements (const idx_vector&)): Do pop operation
 	using resize.
 
