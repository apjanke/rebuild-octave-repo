# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1250507352 -7200
#      Mon Aug 17 13:09:12 2009 +0200
# Node ID 8e50093346616d2c220db44639d4c86d0eac6fd4
# Parent  ec066ba012c845b0a0ea6ca021ab14078618df83
partially revert e79470be3ecb

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2009-08-17  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-struct.h, ov-struct.cc: Revert to e08d72bb988e.
+	* ov-class.h, ov-class.cc: Partially revert to e08d72bb988e.
+	(octave_class::subsasgn): Cut&paste code from octave_struct::subsasgn
+	for the nested dot indexing.
+	* ov-usr-fcn.cc (Voptimize_subasgn_calls): Default to true.
+
 2009-08-13  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/fft.cc, DLD-FUNCTIONS/fft2.cc,
 	DLD-FUNCTIONS/fftn.cc, DLD-FUNCTIONS/fftw.cc: Update for new FFTW
 	defines.
 
 	* Makefile.in (amd.oct, colamd.oct, dmperm.oct, symcrm.oct,
 	qr.oct, fft.oct, fft2.oct, fftn.oct, fftw.oct): Add
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -63,17 +63,17 @@ void
 octave_class::register_type (void)
 {
   t_id = octave_value_typeinfo::register_type
     (octave_class::t_name, "<unknown>", octave_value (new octave_class ()));
 }
 
 octave_class::octave_class (const Octave_map& m, const std::string& id, 
 			    const octave_value_list& parents)
-  : octave_struct (m), c_name (id), obsolete_copies (0)
+  : octave_base_value (), map (m), c_name (id), obsolete_copies (0)
 {
   octave_idx_type n = parents.length ();
 
   for (octave_idx_type idx = 0; idx < n; idx++)
     {
       octave_value parent = parents(idx);
 
       if (! parent.is_object ())
@@ -133,16 +133,34 @@ get_current_method_class (void)
 }
 
 static void
 gripe_invalid_index (void)
 {
   error ("invalid index for class");
 }
 
+static void
+gripe_invalid_index_for_assignment (void)
+{
+  error ("invalid index for class assignment");
+}
+
+static void
+gripe_invalid_index_type (const std::string& nm, char t)
+{
+  error ("%s cannot be indexed with %c", nm.c_str (), t);
+}
+
+static void
+gripe_failed_assignment (void)
+{
+  error ("assignment to class element failed");
+}
+
 static inline octave_value_list
 sanitize (const octave_value_list& ovl)
 {
   octave_value_list retval = ovl;
 
   for (octave_idx_type i = 0; i < ovl.length (); i++)
     {
       if (retval(i).is_magic_colon ())
@@ -366,17 +384,78 @@ octave_class::numel (const octave_value_
 octave_value_list
 octave_class::subsref (const std::string& type,
 		       const std::list<octave_value_list>& idx,
 		       int nargout)
 {
   octave_value_list retval;
 
   if (in_class_method () || called_from_builtin ())
-    retval = octave_struct::subsref (type, idx, nargout);
+    {
+      // FIXME -- this block of code is the same as the body of
+      // octave_struct::subsref.  Maybe it could be shared instead of
+      // duplicated.
+
+      int skip = 1;
+
+      switch (type[0])
+	{
+	case '(':
+	  {
+	    if (type.length () > 1 && type[1] == '.')
+	      {
+		std::list<octave_value_list>::const_iterator p = idx.begin ();
+		octave_value_list key_idx = *++p;
+
+		Cell tmp = dotref (key_idx);
+
+		if (! error_state)
+		  {
+		    Cell t = tmp.index (idx.front ());
+
+		    retval(0) = (t.length () == 1) ? t(0) : octave_value (t, true);
+
+		    // We handled two index elements, so tell
+		    // next_subsref to skip both of them.
+
+		    skip++;
+		  }
+	      }
+	    else
+	      retval(0) = octave_value (map.index (idx.front ()),
+					class_name ());
+	  }
+	  break;
+
+	case '.':
+	  {
+	    if (map.numel() > 0)
+	      {
+		Cell t = dotref (idx.front ());
+
+		retval(0) = (t.length () == 1) ? t(0) : octave_value (t, true);
+	      }
+	  }
+	  break;
+
+	case '{':
+	  gripe_invalid_index_type (type_name (), type[0]);
+	  break;
+
+	default:
+	  panic_impossible ();
+	}
+
+      // FIXME -- perhaps there should be an
+      // octave_value_list::next_subsref member function?  See also
+      // octave_user_function::subsref.
+
+      if (idx.size () > 1)
+	retval = retval(0).next_subsref (nargout, type, idx, skip);
+    }
   else
     {
       octave_value meth = symbol_table::find_method ("subsref", class_name ());
 
       if (meth.is_defined ())
 	{
 	  octave_value_list args;
 
@@ -417,86 +496,47 @@ octave_class::subsref (const std::string
 	  else
 	    gripe_invalid_index ();
 	}
     }
 
   return retval;
 }
 
-octave_value 
-octave_class::subsref (const std::string& type,
-                       const std::list<octave_value_list>& idx,
-                       bool auto_add)
-{
-  if (in_class_method () || called_from_builtin ())
-    return octave_struct::subsref (type, idx, auto_add);
-  else
-    return subsref (type, idx);
-
-}
-
-void
-octave_class::gripe_failed_assignment (void)
-{
-  error ("assignment to class element failed");
-}
-
-octave_value 
-octave_class::dotasgn (const octave_value_list& idx, const octave_value& rhs)
+octave_value
+octave_class::numeric_conv (const Cell& val, const std::string& type)
 {
   octave_value retval;
 
-  // Find the class in which this method resides before 
-  // attempting to access the requested field.
-
-  std::string method_class = get_current_method_class ();
-
-  octave_base_value *obvp = find_parent_class (method_class);
-
-  if (obvp)
+  if (val.length () == 1)
     {
-      assert (idx.length () == 1);
-
-      std::string key = idx(0).string_value ();
+      retval = val(0);
 
-      if (! error_state)
-        {
-          obvp->assign (key, rhs);
-
-          if (! error_state)
-            {
-              count++;
-              retval = octave_value (this);
-            }
-          else
-            gripe_failed_assignment ();
-        }
-      else
-        gripe_failed_assignment ();
+      if (type.length () > 0 && type[0] == '.' && ! retval.is_map ())
+	retval = Octave_map ();
     }
   else
-    error ("malformed class");
+    gripe_invalid_index_for_assignment ();
 
   return retval;
 }
 
 octave_value
 octave_class::subsasgn (const std::string& type,
 			const std::list<octave_value_list>& idx,
 			const octave_value& rhs)
 {
+  octave_value retval;
+
   if (! (in_class_method () || called_from_builtin ()))
     {
       octave_value meth = symbol_table::find_method ("subsasgn", class_name ());
 
       if (meth.is_defined ())
 	{
-          octave_value retval;
-
 	  octave_value_list args;
 
           if (rhs.is_cs_list ())
             {
               octave_value_list lrhs = rhs.list_value ();
               args.resize (2 + lrhs.length ());
               for (octave_idx_type i = 0; i < lrhs.length (); i++)
                 args(2+i) = lrhs(i);
@@ -549,17 +589,256 @@ octave_class::subsasgn (const std::strin
 
 	  else
 	    retval = tmp(0);
 
 	  return retval;
 	}
     }
 
-  return octave_struct::subsasgn (type, idx, rhs);
+  // FIXME -- this block of code is the same as the body of
+  // octave_struct::subsasgn.  Maybe it could be shared instead of
+  // duplicated.
+
+  int n = type.length ();
+
+  octave_value t_rhs = rhs;
+
+  if (n > 1 && ! (type.length () == 2 && type[0] == '(' && type[1] == '.'))
+    {
+      switch (type[0])
+	{
+	case '(':
+	  {
+	    if (type.length () > 1 && type[1] == '.')
+	      {
+		std::list<octave_value_list>::const_iterator p = idx.begin ();
+		octave_value_list t_idx = *p;
+
+		octave_value_list key_idx = *++p;
+
+		assert (key_idx.length () == 1);
+
+		std::string key = key_idx(0).string_value ();
+
+		if (! error_state)
+		  {
+		    octave_value u;
+
+		    if (! map.contains (key))
+		      u = octave_value::empty_conv (type.substr (2), rhs);
+		    else
+		      {
+			Cell map_val = map.contents (key);
+
+			Cell map_elt = map_val.index (idx.front (), true);
+
+			u = numeric_conv (map_elt, type.substr (2));
+		      }
+
+		    if (! error_state)
+		      {
+			std::list<octave_value_list> next_idx (idx);
+
+			// We handled two index elements, so subsasgn to
+			// needs to skip both of them.
+
+			next_idx.erase (next_idx.begin ());
+			next_idx.erase (next_idx.begin ());
+
+			u.make_unique ();
+
+			t_rhs = u.subsasgn (type.substr (2), next_idx, rhs);
+		      }
+		  }
+		else
+		  gripe_invalid_index_for_assignment ();
+	      }
+	    else
+	      gripe_invalid_index_for_assignment ();
+	  }
+	  break;
+
+	case '.':
+	  {
+	    octave_value_list key_idx = idx.front ();
+
+	    assert (key_idx.length () == 1);
+
+	    std::string key = key_idx(0).string_value ();
+
+            std::list<octave_value_list> next_idx (idx);
+
+            next_idx.erase (next_idx.begin ());
+
+            std::string next_type = type.substr (1);
+
+            Cell tmpc (1, 1);
+            Octave_map::iterator pkey = map.seek (key);
+            if (pkey != map.end ())
+              {
+                pkey->second.make_unique ();
+                tmpc = pkey->second;
+              }
+
+            // FIXME: better code reuse?
+            if (! error_state)
+              {
+                if (tmpc.numel () == 1)
+                  {
+                    octave_value& tmp = tmpc(0);
+
+                    if (! tmp.is_defined () || tmp.is_zero_by_zero ())
+                      {
+                        tmp = octave_value::empty_conv (next_type, rhs);
+                        tmp.make_unique (); // probably a no-op.
+                      }
+                    else
+                      // optimization: ignore the copy still stored inside our map.
+                      tmp.make_unique (1);
+
+                    if (! error_state)
+                      t_rhs = tmp.subsasgn (next_type, next_idx, rhs);
+                  }
+                else
+                  gripe_indexed_cs_list ();
+              }
+	  }
+	  break;
+
+	case '{':
+	  gripe_invalid_index_type (type_name (), type[0]);
+	  break;
+
+	default:
+	  panic_impossible ();
+	}
+    }
+
+  if (! error_state)
+    {
+      switch (type[0])
+	{
+	case '(':
+	  {
+	    if (n > 1 && type[1] == '.')
+	      {
+		std::list<octave_value_list>::const_iterator p = idx.begin ();
+		octave_value_list key_idx = *++p;
+
+		assert (key_idx.length () == 1);
+
+		std::string key = key_idx(0).string_value ();
+
+		if (! error_state)
+		  {
+		    map.assign (idx.front (), key, t_rhs);
+
+		    if (! error_state)
+		      {
+			count++;
+			retval = octave_value (this);
+		      }
+		    else
+		      gripe_failed_assignment ();
+		  }
+		else
+		  gripe_failed_assignment ();
+	      }
+	    else
+	      {
+		if (t_rhs.is_object () || t_rhs.is_map ())
+		  {
+		    Octave_map rhs_map = t_rhs.map_value ();
+
+		    if (! error_state)
+		      {
+			map.assign (idx.front (), rhs_map);
+
+			if (! error_state)
+			  {
+			    count++;
+			    retval = octave_value (this);
+			  }
+			else
+			  gripe_failed_assignment ();
+		      }
+		    else
+		      error ("invalid class assignment");
+		  }
+		else
+		  {
+		    if (t_rhs.is_empty ())
+		      {
+			map.maybe_delete_elements (idx.front());
+
+			if (! error_state)
+			  {
+			    count++;
+			    retval = octave_value (this);
+			  }
+			else
+			  gripe_failed_assignment ();
+		      }
+		    else
+		      error ("invalid class assignment");
+		  }
+	      }
+	  }
+	  break;
+
+	case '.':
+	  {
+	    // Find the class in which this method resides before 
+	    // attempting to access the requested field.
+
+	    std::string method_class = get_current_method_class ();
+
+	    octave_base_value *obvp = find_parent_class (method_class);
+
+	    if (obvp)
+	      {
+		octave_value_list key_idx = idx.front ();
+
+		assert (key_idx.length () == 1);
+
+		std::string key = key_idx(0).string_value ();
+
+		if (! error_state)
+		  {
+		    obvp->assign (key, t_rhs);
+
+		    if (! error_state)
+		      {
+			count++;
+			retval = octave_value (this);
+		      }
+		    else
+		      gripe_failed_assignment ();
+		  }
+		else
+		  gripe_failed_assignment ();
+	      }
+	    else
+	      error ("malformed class");
+	  }
+	  break;
+
+	case '{':
+	  gripe_invalid_index_type (type_name (), type[0]);
+	  break;
+
+	default:
+	  panic_impossible ();
+	}
+    }
+  else
+    gripe_failed_assignment ();
+
+  return retval;
 }
 
 idx_vector
 octave_class::index_vector (void) const
 {
   idx_vector retval;
 
   octave_value meth = symbol_table::find_method ("subsindex", class_name ());
@@ -586,16 +865,35 @@ octave_class::index_vector (void) const
     }
   else
     error ("no subsindex method defined for class %s",
 	   class_name().c_str ());
 
   return retval;
 }
 
+size_t
+octave_class::byte_size (void) const
+{
+  // Neglect the size of the fieldnames.
+
+  size_t retval = 0;
+
+  for (Octave_map::const_iterator p = map.begin (); p != map.end (); p++)
+    {
+      std::string key = map.key (p);
+
+      octave_value val = octave_value (map.contents (p));
+
+      retval += val.byte_size ();
+    }
+
+  return retval;
+}
+
 string_vector
 octave_class::map_keys (void) const
 {
   string_vector retval;
   gripe_wrong_type_arg ("octave_class::map_keys()", type_name ());
   return retval;
 }
 
diff --git a/src/ov-class.h b/src/ov-class.h
--- a/src/ov-class.h
+++ b/src/ov-class.h
@@ -1,12 +1,11 @@
 /*
 
 Copyright (C) 2007, 2008, 2009 John W. Eaton
-Copyright (C) 2009 VZLU Prague
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
 
@@ -31,39 +30,38 @@ along with Octave; see the file COPYING.
 
 #include "mx-base.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "oct-alloc.h"
 #include "oct-map.h"
 #include "ov-base.h"
-#include "ov-struct.h"
 #include "ov-typeinfo.h"
 
 class octave_value_list;
 
 class tree_walker;
 
 // Data structures.
 
 class
-octave_class : public octave_struct
+octave_class : public octave_base_value
 {
 public:
 
   octave_class (void)
-    : octave_struct (), obsolete_copies (0) { }
+    : octave_base_value (), obsolete_copies (0)  { }
 
   octave_class (const Octave_map& m, const std::string& id)
-    : octave_struct (m), c_name (id), obsolete_copies (0) { }
+    : octave_base_value (), map (m), c_name (id), obsolete_copies (0) { }
 
   octave_class (const octave_class& s)
-    : octave_struct (s), c_name (s.c_name),
-      parent_list (s.parent_list), obsolete_copies (0) { }
+    : octave_base_value (s), map (s.map), c_name (s.c_name),
+      parent_list (s.parent_list), obsolete_copies (0)  { }
 
   octave_class (const Octave_map& m, const std::string& id, 
                 const octave_value_list& parents);
 
   ~octave_class (void) { }
 
   octave_base_value *clone (void) const { return new octave_class (*this); }
 
@@ -71,54 +69,73 @@ public:
 
   octave_base_value *empty_clone (void) const
   {
     return new octave_class (Octave_map (map.keys ()), class_name ());
   }
 
   Cell dotref (const octave_value_list& idx);
 
-  octave_value dotasgn (const octave_value_list& idx, const octave_value& rhs);
-
   Matrix size (void);
 
   octave_idx_type numel (const octave_value_list&); 
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx)
     {
       octave_value_list tmp = subsref (type, idx, 1);
       return tmp.length () > 0 ? tmp(0) : octave_value ();
     }
 
-  octave_value subsref (const std::string& type,
-			const std::list<octave_value_list>& idx,
-                        bool auto_add);
-
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     int nargout);
 
+  static octave_value numeric_conv (const Cell& val,
+				    const std::string& type);
+
   void assign(const std::string& k, const octave_value& rhs)
   { map.assign (k, rhs); };
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   idx_vector index_vector (void) const;
 
   dim_vector dims (void) const { return map.dims (); }
 
+  size_t byte_size (void) const;
+
+  // This is the number of elements in each field.  The total number
+  // of elements is numel () * nfields ().
+  octave_idx_type numel (void) const
+  {
+    dim_vector dv = dims ();
+    return dv.numel ();
+  }
+
+  octave_idx_type nfields (void) const { return map.nfields (); }
+
   size_t nparents (void) const { return parent_list.size (); }
 
+  octave_value reshape (const dim_vector& new_dims) const
+    { return map.reshape (new_dims); }
+
+  octave_value resize (const dim_vector& dv, bool = false) const
+    { Octave_map tmap = map; tmap.resize (dv); return tmap; }
+
+  bool is_defined (void) const { return true; }
+
   bool is_map (void) const { return false; }
 
   bool is_object (void) const { return true; }
 
+  Octave_map map_value (void) const { return map; }
+
   string_vector map_keys (void) const;
 
   std::list<std::string> parent_class_name_list (void) const
     { return parent_list; }
 
   string_vector parent_class_names (void) const
     { return string_vector (parent_list); }
 
@@ -151,21 +168,19 @@ public:
 #if defined (HAVE_HDF5)
   bool save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats);
 
   bool load_hdf5 (hid_t loc_id, const char *name, bool have_h5giterate_bug);
 #endif
 
   mxArray *as_mxArray (void) const;
 
-protected:
+private:
 
-  void gripe_failed_assignment (void);
-
-private:
+  Octave_map map;
 
   DECLARE_OCTAVE_ALLOCATOR
 
 public:
   int type_id (void) const { return t_id; }
   std::string type_name (void) const { return t_name; }
   std::string class_name (void) const { return c_name; }
 
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -88,18 +88,18 @@ gripe_invalid_index_for_assignment (void
 }
 
 static void
 gripe_invalid_index_type (const std::string& nm, char t)
 {
   error ("%s cannot be indexed with %c", nm.c_str (), t);
 }
 
-void
-octave_struct::gripe_failed_assignment (void)
+static void
+gripe_failed_assignment (void)
 {
   error ("assignment to structure element failed");
 }
 
 octave_value_list
 octave_struct::subsref (const std::string& type,
 			const std::list<octave_value_list>& idx,
 			int nargout)
@@ -249,53 +249,16 @@ octave_struct::numeric_conv (const octav
     retval = Octave_map ();
   else
     retval = val;
 
   return retval;
 }
 
 octave_value
-octave_struct::dotasgn (const octave_value_list& idx, const octave_value& rhs)
-{
-  octave_value retval;
-
-  assert (idx.length () == 1);
-
-  std::string key = idx(0).string_value ();
-
-  if (rhs.is_cs_list ())
-    {
-      Cell tmp_cell = Cell (rhs.list_value ());
-
-      // The shape of the RHS is irrelevant, we just want
-      // the number of elements to agree and to preserve the
-      // shape of the left hand side of the assignment.
-
-      if (numel () == tmp_cell.numel ())
-        tmp_cell = tmp_cell.reshape (dims ());
-
-      map.assign (key, tmp_cell);
-    }
-  else
-    // Regularize a null matrix if stored into a struct component.
-    map.assign (key, rhs.storable_value ());
-
-  if (! error_state)
-    {
-      count++;
-      retval = octave_value (this);
-    }
-  else
-    gripe_failed_assignment ();
-
-  return retval;
-}
-
-octave_value
 octave_struct::subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs)
 {
   octave_value retval;
 
   int n = type.length ();
 
@@ -488,18 +451,17 @@ octave_struct::subsasgn (const std::stri
                           error ("invalid assignment to cs-list outside multiple assignment.");
                       }
 		  }
 		else
 		  gripe_failed_assignment ();
 	      }
 	    else
 	      {
-		if (t_rhs.is_map()
-                    || (is_object () && t_rhs.is_object ()))
+		if (t_rhs.is_map())
 		  {
 		    Octave_map rhs_map = t_rhs.map_value ();
 
 		    if (! error_state)
 		      {
 			map.assign (idx.front (), rhs_map);
 
 			if (! error_state)
@@ -531,17 +493,46 @@ octave_struct::subsasgn (const std::stri
 		      error ("invalid structure assignment");
 		  }
 	      }
 	  }
 	  break;
 
 	case '.':
 	  {
-            retval = dotasgn (idx.front (), t_rhs);
+	    octave_value_list key_idx = idx.front ();
+
+	    assert (key_idx.length () == 1);
+
+	    std::string key = key_idx(0).string_value ();
+
+	    if (t_rhs.is_cs_list ())
+	      {
+		Cell tmp_cell = Cell (t_rhs.list_value ());
+
+		// The shape of the RHS is irrelevant, we just want
+		// the number of elements to agree and to preserve the
+		// shape of the left hand side of the assignment.
+
+		if (numel () == tmp_cell.numel ())
+		  tmp_cell = tmp_cell.reshape (dims ());
+
+		map.assign (key, tmp_cell);
+	      }
+	    else
+              // Regularize a null matrix if stored into a struct component.
+	      map.assign (key, t_rhs.storable_value ());
+
+	    if (! error_state)
+	      {
+		count++;
+		retval = octave_value (this);
+	      }
+	    else
+	      gripe_failed_assignment ();
 	  }
 	  break;
 
 	case '{':
 	  gripe_invalid_index_type (type_name (), type[0]);
 	  break;
 
 	default:
diff --git a/src/ov-struct.h b/src/ov-struct.h
--- a/src/ov-struct.h
+++ b/src/ov-struct.h
@@ -58,23 +58,17 @@ public:
   octave_struct (const octave_struct& s)
     : octave_base_value (), map (s.map) { }
 
   ~octave_struct (void) { }
 
   octave_base_value *clone (void) const { return new octave_struct (*this); }
   octave_base_value *empty_clone (void) const { return new octave_struct (); }
 
-  virtual Cell dotref (const octave_value_list& idx)
-    { return dotref (idx, false); }
-
-  Cell dotref (const octave_value_list& idx, bool auto_add);
-
-  virtual octave_value dotasgn (const octave_value_list& idx,
-                                const octave_value& rhs);
+  Cell dotref (const octave_value_list& idx, bool auto_add = false);
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx)
     {
       octave_value_list tmp = subsref (type, idx, 1);
       return tmp.length () > 0 ? tmp(0) : octave_value ();
     }
 
@@ -150,18 +144,16 @@ public:
 
   bool load_hdf5 (hid_t loc_id, const char *name, bool have_h5giterate_bug);
 #endif
 
   mxArray *as_mxArray (void) const;
 
 protected:
 
-  virtual void gripe_failed_assignment (void);
-
   // The associative array used to manage the structure data.
   Octave_map map;
 
 private:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -48,17 +48,17 @@ along with Octave; see the file COPYING.
 #include "utils.h"
 #include "parse.h"
 #include "variables.h"
 
 // Maximum nesting level for functions called recursively.
 static int Vmax_recursion_depth = 256;
 
 // Whether to optimize subsasgn method calls.
-static bool Voptimize_subsasgn_calls = false;
+static bool Voptimize_subsasgn_calls = true;
 
 // User defined scripts.
 
 DEFINE_OCTAVE_ALLOCATOR (octave_user_script);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_user_script,
 				     "user-defined script",
 				     "user-defined script");
