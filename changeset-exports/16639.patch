# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1368386594 14400
#      Sun May 12 15:23:14 2013 -0400
# Node ID ba808cd9d86cdb03e46de36117a9a50297436408
# Parent  3c2e457eeb72988e3559539956297611e97ba3c7
simplify QTerminal inheritance scheme

* Qterminal.h, Qterminal.cc: Merge QTerminalInterface class into
QTerminal.
(QTerminal::create): New function.
(QTerminal::Qterminal): Now protected.
* QUnixTerminal.h, QUnixTerminal.cpp, QWinTerminal.h,
QWinTerminal.cpp: Derive from QTerminal, not QTerminalInterface.
* QTerminalInterface.h: Delete.
* libgui/qterminal-module.mk: Update file lists.
* terminal-dock-widget.cc
(terminal_dock_widget::terminal_dock_widget): Use QTerminal::create to
create terminal object.

diff --git a/libgui/qterminal-module.mk b/libgui/qterminal-module.mk
--- a/libgui/qterminal-module.mk
+++ b/libgui/qterminal-module.mk
@@ -1,14 +1,13 @@
 EXTRA_DIST += \
   qterminal-module.mk
 
 noinst_HEADERS += \
   qterminal/libqterminal/QTerminal.h \
-  qterminal/libqterminal/QTerminalInterface.h \
   qterminal/libqterminal/win32/QTerminalColors.h \
   qterminal/libqterminal/win32/QWinTerminalImpl.h \
   qterminal/libqterminal/unix/BlockArray.h \
   qterminal/libqterminal/unix/Character.h \
   qterminal/libqterminal/unix/CharacterColor.h \
   qterminal/libqterminal/unix/Emulation.h \
   qterminal/libqterminal/unix/ExtendedDefaultTranslator.h \
   qterminal/libqterminal/unix/Filter.h \
@@ -23,18 +22,17 @@ noinst_HEADERS += \
   qterminal/libqterminal/unix/ScreenWindow.h \
   qterminal/libqterminal/unix/TerminalCharacterDecoder.h \
   qterminal/libqterminal/unix/Vt102Emulation.h \
   qterminal/libqterminal/unix/SelfListener.h \
   qterminal/libqterminal/unix/TerminalModel.h \
   qterminal/libqterminal/unix/TerminalView.h
 
 qterminal_libqterminal_la_MOC = \
-  qterminal/libqterminal/moc-QTerminal.cc \
-  qterminal/libqterminal/moc-QTerminalInterface.cc
+  qterminal/libqterminal/moc-QTerminal.cc
 
 nodist_qterminal_libqterminal_la_SOURCES = $(qterminal_libqterminal_la_MOC)
 
 qterminal_libqterminal_la_CPPFLAGS = \
   $(AM_CPPFLAGS) \
   @QT_CPPFLAGS@ \
   -I$(srcdir)/qterminal/libqterminal
 
diff --git a/libgui/qterminal/libqterminal/QTerminal.cc b/libgui/qterminal/libqterminal/QTerminal.cc
--- a/libgui/qterminal/libqterminal/QTerminal.cc
+++ b/libgui/qterminal/libqterminal/QTerminal.cc
@@ -17,35 +17,51 @@ GNU General Public License for more deta
 
 You should have received a copy of the GNU General Public License
 along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 
 */
 
 #include "QTerminal.h"
 
+#if defined (Q_OS_WIN32)
+# include "win32/QWinTerminalImpl.h"
+#else
+# include "unix/QUnixTerminalImpl.h"
+#endif
+
+QTerminal *
+QTerminal::create (QWidget *xparent)
+{
+#if defined (Q_OS_WIN32)
+  return new QWinTerminalImpl (xparent);
+#else
+  return new QUnixTerminalImpl (xparent);
+#endif
+}
+
 void
 QTerminal::notice_settings (const QSettings *settings)
 {
   // QSettings pointer is checked before emitting.
 
   // Set terminal font:
   QFont term_font = QFont();
   term_font.setFamily(settings->value("terminal/fontName","Courier New").toString());
   term_font.setPointSize(settings->value("terminal/fontSize",10).toInt ());
   setTerminalFont (term_font);
 
   QString cursorType = settings->value ("terminal/cursorType","ibeam").toString ();
   bool cursorBlinking = settings->value ("terminal/cursorBlinking",true).toBool ();
   if (cursorType == "ibeam")
-    setCursorType(QTerminalInterface::IBeamCursor, cursorBlinking);
+    setCursorType(QTerminal::IBeamCursor, cursorBlinking);
   else if (cursorType == "block")
-    setCursorType(QTerminalInterface::BlockCursor, cursorBlinking);
+    setCursorType(QTerminal::BlockCursor, cursorBlinking);
   else if (cursorType == "underline")
-    setCursorType(QTerminalInterface::UnderlineCursor, cursorBlinking);
+    setCursorType(QTerminal::UnderlineCursor, cursorBlinking);
 
   bool cursorUseForegroundColor
     = settings->value ("terminal/cursorUseForegroundColor",true).toBool ();
 
   // FIXME -- we shouldn't duplicate this information here and in the
   // resource manager.
   QList<QColor> default_colors;
 
diff --git a/libgui/qterminal/libqterminal/QTerminal.h b/libgui/qterminal/libqterminal/QTerminal.h
--- a/libgui/qterminal/libqterminal/QTerminal.h
+++ b/libgui/qterminal/libqterminal/QTerminal.h
@@ -20,38 +20,91 @@ along with Foobar.  If not, see <http://
 
 */
 
 #ifndef QTERMINAL_H
 #define QTERMINAL_H
 
 #include <QSettings>
 #include <QtGlobal>
+#include <QWidget>
+#include <QColor>
+#include <QMenu>
 
-#ifdef Q_OS_WIN32
-    #include "win32/QWinTerminalImpl.h"
-    class QTerminal : public QWinTerminalImpl
+class QTerminal : public QWidget
+{
+  Q_OBJECT
+
+public:
+
+  static QTerminal *create (QWidget *xparent = 0);
+
+  virtual ~QTerminal (void) { }
+
+  virtual void setTerminalFont(const QFont& font) = 0;
+
+  virtual void setSize(int h, int v) = 0;
+
+  virtual void sendText(const QString& text) = 0;
+
+  enum CursorType
     {
-        Q_OBJECT
-    public:
-        QTerminal(QWidget *xparent = 0)
-            : QWinTerminalImpl(xparent) { }
-        ~QTerminal() { }
-
-    public slots:
-        void notice_settings (const QSettings *settings);
+      UnderlineCursor,
+      BlockCursor,
+      IBeamCursor
     };
-#else
-    #include "unix/QUnixTerminalImpl.h"
-    class QTerminal : public QUnixTerminalImpl
-    {
-        Q_OBJECT
-    public:
-        QTerminal(QWidget *xparent = 0)
-            : QUnixTerminalImpl(xparent) { }
-        ~QTerminal() { }
+
+  virtual void setCursorType (CursorType type, bool blinking)
+  {
+    // Provide empty default impl in order to avoid conflicts with the
+    // win impl.
+
+    Q_UNUSED (type);
+    Q_UNUSED (blinking);
+  }
+
+  virtual void setBackgroundColor (const QColor& color) = 0;
+
+  virtual void setForegroundColor (const QColor& color) = 0;
+
+  virtual void setSelectionColor (const QColor& color) = 0;
+
+  virtual void setCursorColor (bool useForegroundColor,
+                               const QColor& color) = 0;
+
+public slots:
+
+  virtual void copyClipboard (void) = 0;
+
+  virtual void pasteClipboard (void) = 0;
 
-    public slots:
-        void notice_settings (const QSettings *settings);
-    };
-#endif
+  virtual void handleCustomContextMenuRequested (const QPoint& at)
+  {
+    _contextMenu->move (mapToGlobal (at));
+    _contextMenu->show ();
+  }
+
+  void notice_settings (const QSettings *settings);
+
+protected:
+
+  QTerminal (QWidget *xparent = 0) : QWidget (xparent)
+  {
+    connect (this, SIGNAL (customContextMenuRequested (QPoint)),
+             this, SLOT (handleCustomContextMenuRequested (QPoint)));
+
+    setContextMenuPolicy (Qt::CustomContextMenu);
+
+    _contextMenu = new QMenu (this);
+
+    QAction *copyAction  = _contextMenu->addAction ("Copy");
+    QAction *pasteAction = _contextMenu->addAction ("Paste");
+
+    connect (copyAction, SIGNAL (triggered()), this, SLOT (copyClipboard()));
+    connect (pasteAction, SIGNAL (triggered()), this, SLOT (pasteClipboard()));
+  }
+
+private:
+
+    QMenu *_contextMenu;
+};
 
 #endif // QTERMINAL_H
diff --git a/libgui/qterminal/libqterminal/QTerminalInterface.h b/libgui/qterminal/libqterminal/QTerminalInterface.h
deleted file mode 100644
--- a/libgui/qterminal/libqterminal/QTerminalInterface.h
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
-
-Copyright (C) 2012 Michael Goffioul.
-Copyright (C) 2012 Jacob Dawid.
-
-This file is part of QTerminal.
-
-Foobar is free software: you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-QTerminal is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
-
-*/
-
-#ifndef QTERMINALINTERFACE_H
-#define QTERMINALINTERFACE_H
-
-#include <QWidget>
-#include <QColor>
-#include <QMenu>
-
-class QTerminalInterface : public QWidget
-{
-    Q_OBJECT
-public:
-    QTerminalInterface(QWidget *xparent = 0) : QWidget(xparent) {
-      connect (this, SIGNAL(customContextMenuRequested(QPoint)),
-               this, SLOT(handleCustomContextMenuRequested(QPoint)));
-
-      setContextMenuPolicy (Qt::CustomContextMenu);
-
-      _contextMenu = new QMenu (this);
-      QAction *copyAction  = _contextMenu->addAction ("Copy");
-      QAction *pasteAction = _contextMenu->addAction ("Paste");
-
-      connect (copyAction, SIGNAL (triggered()), this, SLOT (copyClipboard()));
-      connect (pasteAction, SIGNAL (triggered()), this, SLOT (pasteClipboard()));
-    }
-    virtual ~QTerminalInterface() { }
-
-    virtual void setTerminalFont(const QFont& font) = 0;
-    virtual void setSize(int h, int v) = 0;
-    virtual void sendText(const QString& text) = 0;
-
-    enum CursorType {
-      UnderlineCursor,
-      BlockCursor,
-      IBeamCursor
-    };
-
-    virtual void setCursorType(CursorType type, bool blinking) {
-        // Provide empty default impl in order to avoid conflicts with the win impl.
-        Q_UNUSED(type);
-        Q_UNUSED(blinking);
-    }
-
-    virtual void setBackgroundColor (const QColor& color) = 0;
-    virtual void setForegroundColor (const QColor& color) = 0;
-    virtual void setSelectionColor (const QColor& color) = 0;
-    virtual void setCursorColor (bool useForegroundColor,
-                                 const QColor& color) = 0;
-
- public slots:
-    virtual void copyClipboard() = 0;
-    virtual void pasteClipboard() = 0;
-
-    virtual void handleCustomContextMenuRequested(QPoint at) {
-      _contextMenu->move (mapToGlobal(at));
-      _contextMenu->show ();
-    }
-
-private:
-    QMenu *_contextMenu;
-};
-
-#endif // QTERMINALINTERFACE_H
diff --git a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
@@ -20,17 +20,17 @@
 #include <QDebug>
 
 #include "unix/QUnixTerminalImpl.h"
 #include "unix/kpty.h"
 
 #include <termios.h>
 
 QUnixTerminalImpl::QUnixTerminalImpl(QWidget *parent)
-    : QTerminalInterface(parent) {
+    : QTerminal(parent) {
     setMinimumSize(300, 200);
     initialize();
 }
 
 void QUnixTerminalImpl::initialize()
 {
     m_terminalView = new TerminalView(this);
     m_terminalView->setKeyboardCursorShape(TerminalView::UnderlineCursor);
diff --git a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h
--- a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h
+++ b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h
@@ -20,19 +20,19 @@
 
 #ifndef Q_UNIXTERMINALIMPL
 #define Q_UNIXTERMINALIMPL
 
 #include <QtGui>
 #include "unix/kpty.h"
 #include "unix/TerminalModel.h"
 #include "unix/TerminalView.h"
-#include "QTerminalInterface.h"
+#include "QTerminal.h"
 
-class QUnixTerminalImpl : public QTerminalInterface
+class QUnixTerminalImpl : public QTerminal
 {
     Q_OBJECT
 
     int fdstderr;
 
 public:
     QUnixTerminalImpl(QWidget *parent = 0);
     virtual ~QUnixTerminalImpl();
diff --git a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
@@ -1152,24 +1152,24 @@ QConsolePrivate::cursorRect (void)
   return QRect ((m_cursorPos.x () - m_consoleRect.x ()) * cw,
                 (m_cursorPos.y () - m_consoleRect.y ()) * ch,
                 cw, ch);
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 QWinTerminalImpl::QWinTerminalImpl (QWidget* parent)
-    : QTerminalInterface (parent), d (new QConsolePrivate (this))
+    : QTerminal (parent), d (new QConsolePrivate (this))
 {
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 QWinTerminalImpl::QWinTerminalImpl (const QString& cmd, QWidget* parent)
-    : QTerminalInterface (parent), d (new QConsolePrivate (this, cmd))
+    : QTerminal (parent), d (new QConsolePrivate (this, cmd))
 {
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 QWinTerminalImpl::~QWinTerminalImpl (void)
 {
   delete d;
diff --git a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h
--- a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h
+++ b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h
@@ -18,32 +18,32 @@ You should have received a copy of the G
 along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 
 */
 
 #ifndef __QConsole_h__
 #define __QConsole_h__ 1
 
 #include <QWidget>
-#include "QTerminalInterface.h"
+#include "QTerminal.h"
 class QFocusEvent;
 class QKeyEvent;
 class QPainter;
 class QPaintEvent;
 class QResizeEvent;
 class QWheelEvent;
 class QPoint;
 
 class QConsolePrivate;
 class QConsoleThread;
 class QConsoleView;
 
 //////////////////////////////////////////////////////////////////////////////
 
-class QWinTerminalImpl : public QTerminalInterface
+class QWinTerminalImpl : public QTerminal
 {
   Q_OBJECT
   friend class QConsolePrivate;
   friend class QConsoleThread;
   friend class QConsoleView;
 
 public:
   QWinTerminalImpl (QWidget* parent = 0);
diff --git a/libgui/src/terminal-dock-widget.cc b/libgui/src/terminal-dock-widget.cc
--- a/libgui/src/terminal-dock-widget.cc
+++ b/libgui/src/terminal-dock-widget.cc
@@ -23,17 +23,17 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "terminal-dock-widget.h"
 
 terminal_dock_widget::terminal_dock_widget (QWidget *p)
-  : octave_dock_widget (p), terminal (new QTerminal (p))
+  : octave_dock_widget (p), terminal (QTerminal::create (p))
 {
   terminal->setObjectName ("OctaveTerminal");
   terminal->setFocusPolicy (Qt::StrongFocus);
 
   setObjectName ("TerminalDockWidget");
   setWindowIcon (QIcon(":/actions/icons/logo.png"));
   setWindowTitle (tr ("Command Window"));
   setWidget (terminal);
