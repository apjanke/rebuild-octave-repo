# HG changeset patch
# User Rik <rik@octave.org>
# Date 1479046566 28800
#      Sun Nov 13 06:16:06 2016 -0800
# Node ID c38eb3b082848e37c541141e11a6d073d32e1666
# Parent  50fa2d6563269b708e805f135403b2c3d7add901
ppplot.m, qqplot.m: Add @seealso section.  Add BIST tests for input validation..

* ppplot.m, qqplot.m: Add @seealso section.  Add BIST tests for input validation..

diff --git a/scripts/statistics/base/ppplot.m b/scripts/statistics/base/ppplot.m
--- a/scripts/statistics/base/ppplot.m
+++ b/scripts/statistics/base/ppplot.m
@@ -39,16 +39,17 @@
 ## ppplot (x, "uniform", 2, 4)
 ## @end example
 ##
 ## @noindent
 ## @var{dist} can be any string for which a function @var{dist_cdf} that
 ## calculates the CDF of distribution @var{dist} exists.
 ##
 ## If no output is requested then the data are plotted immediately.
+## @seealso{qqplot}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Perform a PP-plot (probability plot)
 
 function [p, y] = ppplot (x, dist, varargin)
 
   if (nargin < 1)
@@ -59,19 +60,22 @@ function [p, y] = ppplot (x, dist, varar
     error ("ppplot: X must be a vector");
   endif
 
   s = sort (x);
   n = length (x);
   p = ((1 : n)' - 0.5) / n;
   if (nargin == 1)
     F = @stdnormal_cdf;
+  else if (! ischar (dist))
+    error ("ppplot: DIST must me a string");
   else
-    F = str2func (sprintf ("%scdf", dist));
+    F = str2func ([dist "cdf"]);
   endif;
+
   if (nargin <= 2)
     y = feval (F, s);
   else
     y = feval (F, s, varargin{:});
   endif
 
   if (nargout == 0)
     plot (p, y);
@@ -79,9 +83,10 @@ function [p, y] = ppplot (x, dist, varar
   endif
 
 endfunction
 
 
 ## Test input validation
 %!error ppplot ()
 %!error ppplot (ones (2,2))
+%!error <DIST must be a string> ppplot (1, 2)
 
diff --git a/scripts/statistics/base/qqplot.m b/scripts/statistics/base/qqplot.m
--- a/scripts/statistics/base/qqplot.m
+++ b/scripts/statistics/base/qqplot.m
@@ -46,16 +46,17 @@
 ## @end example
 ##
 ## @noindent
 ## @var{dist} can be any string for which a function @var{distinv} or
 ## @var{dist_inv} exists that calculates the inverse CDF of distribution
 ## @var{dist}.
 ##
 ## If no output arguments are given, the data are plotted directly.
+## @seealso{ppplot}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Perform a QQ-plot (quantile plot)
 
 function [qout, sout] = qqplot (x, dist, varargin)
 
   if (nargin < 1)
@@ -106,8 +107,15 @@ function [qout, sout] = qqplot (x, dist,
     ylabel ("sample points");
   else
     qout = q;
     sout = s;
   endif
 
 endfunction
 
+
+## Test input validation
+%!error qqplot ()
+%!error <X must be a numeric> qqplot ({1})
+%!error <X must be a .* vector> qqplot (ones (2,2))
+%!error <no inverse CDF found> qqplot (1, "foobar")
+
