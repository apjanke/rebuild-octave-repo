# HG changeset patch
# User jwe
# Date 822892248 0
#      Mon Jan 29 05:10:48 1996 +0000
# Node ID 1881b2a7d1e28f08da668d15c146878641642037
# Parent  e1ea9bba802a9094da08907f7657baa5ee98a475
[project @ 1996-01-29 05:10:48 by jwe]

diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -1371,17 +1371,17 @@ do_scanf (const char *type, const Octave
 	  // streams to flush.  The list could be created with a
 	  // function like iostream's tie().
 
 	  flush_output_to_pager ();
 
 	  xstring = gnu_readline ("");
 
 	  if (xstring && *xstring)
-	    maybe_save_history (xstring);
+	    octave_command_history.add (xstring);
 	}
       else
 	{
 	  xstring_str = args(0).string_value ();
 	  xstring = xstring_str.c_str ();
 	}
 
       tmp_file = octave_tmp_file_name ();
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -340,17 +340,17 @@ decode_prompt_string (const string& s)
 		temp = number_buffer;
 
 		goto add_string;
 	      }
 
 	    case '!':
 	      {
 		char number_buffer[128];
-		int num = current_history_number ();
+		int num = octave_command_history.current_number ();
 		if (num > 0)
                   sprintf (number_buffer, "%d", num);
 		else
 		  strcpy (number_buffer, "!");
 		temp = number_buffer;
 
 		goto add_string;
 	      }
@@ -472,17 +472,18 @@ octave_gets (void)
     }
   else
     octave_gets_line = gnu_readline ("");
 
   current_input_line = string (octave_gets_line);
 
   if (octave_gets_line && *octave_gets_line)
     {
-      maybe_save_history (octave_gets_line);
+      if (! input_from_startup_file)
+	octave_command_history.add (octave_gets_line);
 
       maybe_write_to_diary_file (octave_gets_line);
 
       do_input_echo (octave_gets_line);
     }
 
   maybe_write_to_diary_file ("\n");
   
@@ -1008,17 +1009,18 @@ get_user_input (const Octave_object& arg
  again:
 
   flush_output_to_pager ();
 
   char *input_buf = gnu_readline (prompt.c_str ());
 
   if (input_buf)
     {
-      maybe_save_history (input_buf);
+      if (! input_from_startup_file)
+	octave_command_history.add (input_buf);
 
       int len = strlen (input_buf);
 
       if (len < 1)
 	{
 	  if (debug)
 	    goto again;
 	  else
diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -41,44 +41,37 @@ Software Foundation, Inc.
 #include <fstream.h>
 #include <strstream.h>
 
 #ifdef HAVE_UNISTD_H
 #include <sys/types.h>
 #include <unistd.h>
 #endif
 
-#include <fcntl.h>
-
-#include <readline/history.h>
-
+#include "cmd-hist.h"
 #include "str-vec.h"
 
 #include "defun.h"
 #include "error.h"
-#include "file-ops.h"
 #include "input.h"
 #include "oct-hist.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "sighandlers.h"
 #include "sysdep.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "user-prefs.h"
 #include "utils.h"
 
 // Nonzero means input is coming from temporary history file.
 int input_from_tmp_history_file = 0;
 
-// The number of hisory lines we read from the history file.
-static int history_lines_in_file = 0;
-
-// The number of history lines we've saved so far.
-static int history_lines_this_session = 0;
+// Guess what?
+command_history octave_command_history;
 
 // Get some default values, possibly reading them from the
 // environment.
 
 int
 default_history_size (void)
 {
   int size = 1024;
@@ -116,192 +109,104 @@ default_history_file (void)
 	file = home_directory.append ("/.octave_hist");
       else
 	file = ".octave_hist";
     }
 
   return file;
 }
 
-// Prime the history list.
-
-void
-initialize_history (void)
-{
-  string file = oct_tilde_expand (user_pref.history_file);
-
-  read_history (file.c_str ());
-
-  using_history ();
-
-  history_lines_in_file = where_history ();
-}
-
-void
-clean_up_history (void)
-{
-  stifle_history (user_pref.history_size);
-
-  string file = oct_tilde_expand (user_pref.history_file);
-
-  if (user_pref.saving_history)
-    write_history (file.c_str ());
-}
-
-void
-maybe_save_history (const string& s)
-{
-  if (user_pref.saving_history && ! input_from_startup_file)
-    {
-      add_history (s.c_str ());
-      history_lines_this_session++;
-    }
-}
-
 // Display, save, or load history.  Stolen and modified from bash.
 //
 // Arg of -w FILENAME means write file, arg of -r FILENAME
 // means read file, arg of -q means don't number lines.  Arg of N
 // means only display that many items. 
 
 static void
 do_history (int argc, const string_vector& argv)
 {
-  HIST_ENTRY **hlist;
-
   int numbered_output = 1;
 
   int i;
   for (i = 1; i < argc; i++)
     {
       if (argv[i][0] == '-' && argv[i].length () == 2
 	  && (argv[i][1] == 'r' || argv[i][1] == 'w'
 	      || argv[i][1] == 'a' || argv[i][1] == 'n'))
 	{
-	  int result = 0;
-
 	  string file;
 
 	  if (i < argc - 1)
-	    file = oct_tilde_expand (argv[i+1]);
-	  else
-	    file = oct_tilde_expand (user_pref.history_file);
+	    {
+	      file = oct_tilde_expand (argv[i+1]);
+	      octave_command_history.set_file (file);
+	    }
 
 	  switch (argv[i][1])
 	    {
 	    case 'a':		// Append `new' lines to file.
-	      {
-		if (history_lines_this_session)
-		  {
-		    if (history_lines_this_session < where_history ())
-		      {
-			// Create file if it doesn't already exist.
-
-			file_stat fs (file);
-
-			if (! fs)
-			  {
-			    int tem;
-
-			    tem = open (file.c_str (), O_CREAT, 0666);
-			    close (tem);
-			  }
-
-			result
-			  = append_history (history_lines_this_session,
-					    file.c_str ());
-
-			history_lines_in_file += history_lines_this_session;
-			history_lines_this_session = 0;
-		      }
-		  }
-	      }
+	      octave_command_history.append ();
 	      break;
 
 	    case 'w':		// Write entire history.
-	      result = write_history (file.c_str ());
+	      octave_command_history.write ();
 	      break;
 
 	    case 'r':		// Read entire file.
-	      result = read_history (file.c_str ());
+	      octave_command_history.read ();
 	      break;
 
 	    case 'n':		// Read `new' history from file.
-
-	      // Read all of the lines in the file that we haven't
-	      // already read.
-
-	      using_history ();
-	      result = read_history_range (file.c_str (),
-					   history_lines_in_file, -1);
-	      using_history ();
-	      history_lines_in_file = where_history ();
+	      octave_command_history.read_range ();
 	      break;
 	    }
 	  return;
 	}
       else if (argv[i] == "-q")
 	numbered_output = 0;
       else if (argv[i] == "--")
 	{
 	  i++;
 	  break;
 	}
       else
 	break;
     }
 
-  int limited = 0;
-  int limit = 0;
+  int limit = -1;
 
   if (i < argc)
     {
-      limited = 1;
       if (sscanf (argv[i].c_str (), "%d", &limit) != 1)
         {
 	  if (argv[i][0] == '-')
 	    error ("history: unrecognized option `%s'", argv[i].c_str ());
 	  else
 	    error ("history: bad non-numeric arg `%s'", argv[i].c_str ());
+
 	  return;
         }
-    }
-
-  hlist = history_list ();
-
-  if (hlist)
-    {
-      int i = 0;
-
-      for (i = 0; hlist[i]; i++)
-	; // Do nothing.
 
       if (limit < 0)
 	limit = -limit;
+    }
 
-      if (!limited)
-	i = 0;
-      else
-	if ((i -= limit) < 0)
-	  i = 0;
+  string_vector hlist = octave_command_history.list (limit, numbered_output);
 
+  int len = hlist.length ();
+
+  if (len > 0)
+    {
       ostrstream output_buf;
 
-      while (hlist[i])
-	{
-//	  QUIT;  // in bash: (interrupt_state) throw_to_top_level ();
-
-	  if (numbered_output)
-	    output_buf.form ("%5d%c", i + history_base,
-			     hlist[i]->data ? '*' : ' '); 
-	  output_buf << hlist[i]->line << "\n";
-	  i++;
-	}
+      for (i = 0; i < len; i++)
+	output_buf << hlist[i] << "\n";
 
       output_buf << ends;
+
       maybe_page_output (output_buf);
     }
 }
 
 // Read the edited history lines from STREAM and return them
 // one at a time.  This can read unlimited length lines.  The
 //  caller should free the storage.
 
@@ -352,105 +257,86 @@ edit_history_readline (fstream& stream)
 
   line[lindex++] = '\n';
   line[lindex++] = '\0';
   return line;
 }
 
 // Use `command' to replace the last entry in the history list, which,
 // by this time, is `run_history blah...'.  The intent is that the
-// new command become the history entry, and that `fc' should never
+// new command becomes the history entry, and that `fc' should never
 // appear in the history list.  This way you can do `run_history' to
 // your heart's content.
 
 static void
-edit_history_repl_hist (char *command)
+edit_history_repl_hist (const string& command)
 {
-  if (! command || ! *command)
-    return;
-
-  HIST_ENTRY **hlist = history_list ();
-
-  if (! hlist)
-    return;
+  if (! command.empty ())
+    {
+      string_vector hlist = octave_command_history.list ();
 
-  int i = 0;
-
-  for (i = 0; hlist[i]; i++)
-    ; // Count 'em.
-  i--;
+      int len = hlist.length ();
 
-  // History_get () takes a parameter that should be offset by history_base.
-
-  // Don't free this.
-  HIST_ENTRY *histent = history_get (history_base + i);
-  if (! histent)
-    return;
+      if (len > 0)
+	{
+	  int i = len - 1;
 
-  char *data = 0;
-  if (histent->data)
-    {
-      int len = strlen (histent->data);
-      data = (char *) malloc (len);
-      strcpy (data, histent->data);
-    }
+	  string histent = octave_command_history.get_entry (i);
 
-  int n = strlen (command);
+	  if (! histent.empty ())
+	    {
+	      string cmd = command;
 
-  if (command[n - 1] == '\n')
-    command[n - 1] = '\0';
+	      int cmd_len = cmd.length ();
 
-  if (command && *command)
-    {
-      HIST_ENTRY *discard = replace_history_entry (i, command, data);
-      if (discard)
-	{
-	  if (discard->line)
-	    free (discard->line);
+	      if (cmd[cmd_len - 1] == '\n')
+		cmd.resize (cmd_len - 1);
 
-	  free ((char *) discard);
+	      if (! cmd.empty ())
+		octave_command_history.replace_entry (i, cmd);
+	    }
 	}
     }
 }
 
 static void
-edit_history_add_hist (char *line)
+edit_history_add_hist (const string& line)
 {
-  if (line)
+  if (! line.empty ())
     {
-      int len = strlen (line);
-      if (len > 0 && line[len-1] == '\n')
-	line[len-1] = '\0';
+      string tmp = line;
 
-      if (line[0] != '\0')
-	add_history (line);
+      int len = tmp.length ();
+	
+      if (len > 0 && tmp[len-1] == '\n')
+	tmp.resize (len - 1);
+
+      if (! tmp.empty ())
+	octave_command_history.add (tmp);
     }
 }
 
-#define histline(i) (hlist[(i)]->line)
-
 static string
 mk_tmp_hist_file (int argc, const string_vector& argv,
 		  int insert_curr, char *warn_for) 
 {
-  HIST_ENTRY **hlist;
-
-  hlist = history_list ();
+  string retval;
 
-  int hist_count = 0;
+  string_vector hlist = octave_command_history.list ();
 
-  while (hlist[hist_count++])
-    ; // Find the number of items in the history list.
+  int hist_count = hlist.length ();
 
   // The current command line is already part of the history list by
   // the time we get to this point.  Delete it from the list.
 
   hist_count -= 2;
+
   if (! insert_curr)
-    remove_history (hist_count);
+    octave_command_history.remove (hist_count);
+
   hist_count--;
 
   // If no numbers have been specified, the default is to edit the
   // last command in the history list.
 
   int hist_end = hist_count;
   int hist_beg = hist_count;
   int reverse = 0;
@@ -479,23 +365,23 @@ mk_tmp_hist_file (int argc, const string
 	  hist_end = hist_beg;
 	}
     }
 
   if (hist_beg < 0 || hist_end < 0 || hist_beg > hist_count
       || hist_end > hist_count)
     {
       error ("%s: history specification out of range", warn_for);
-      return 0;
+      return retval;
     }
 
   if (usage_error)
     {
       usage ("%s [first] [last]", warn_for);
-      return 0;
+      return retval;
     }
 
   if (hist_end < hist_beg)
     {
       int t = hist_end;
       hist_end = hist_beg;
       hist_beg = t;
       reverse = 1;
@@ -504,28 +390,28 @@ mk_tmp_hist_file (int argc, const string
   string name = octave_tmp_file_name ();
 
   fstream file (name.c_str (), ios::out);
 
   if (! file)
     {
       error ("%s: couldn't open temporary file `%s'", warn_for,
 	     name.c_str ());
-      return 0;
+      return retval;
     }
 
   if (reverse)
     {
       for (int i = hist_end; i >= hist_beg; i--)
-	file << histline (i) << "\n";
+	file << hlist[i] << "\n";
     }
   else
     {
       for (int i = hist_beg; i <= hist_end; i++)
-	file << histline (i) << "\n";
+	file << hlist[i] << "\n";
     }
 
   file.close ();
 
   return name;
 }
 
 static void
@@ -533,27 +419,27 @@ do_edit_history (int argc, const string_
 {
   string name = mk_tmp_hist_file (argc, argv, 0, "edit_history");
 
   if (name.empty ())
     return;
 
   // Call up our favorite editor on the file of commands.
 
-  ostrstream buf;
-  buf << user_pref.editor << " " << name << ends;
-  char *cmd = buf.str ();
+  string cmd = user_pref.editor;
+  cmd.append (" ");
+  cmd.append (name);
 
   // Ignore interrupts while we are off editing commands.  Should we
   // maybe avoid using system()?
 
   volatile sig_handler *saved_sigint_handler
     = octave_set_signal_handler (SIGINT, SIG_IGN);
 
-  system (cmd);
+  system (cmd.c_str ());
 
   octave_set_signal_handler (SIGINT, saved_sigint_handler);
 
   // Write the commands to the history file since parse_and_execute
   // disables command line history while it executes.
 
   fstream file (name.c_str (), ios::in);
 
@@ -602,47 +488,36 @@ do_edit_history (int argc, const string_
 static void
 do_run_history (int argc, const string_vector& argv)
 {
   string name = mk_tmp_hist_file (argc, argv, 1, "run_history");
 
   if (name.empty ())
     return;
 
-  // Turn on command echo, so the output from this will make better
+  // Turn on command echo so the output from this will make better
   // sense.
 
   begin_unwind_frame ("do_run_history");
   unwind_protect_int (user_pref.echo_executing_commands);
   unwind_protect_int (input_from_tmp_history_file);
   user_pref.echo_executing_commands = ECHO_CMD_LINE;
   input_from_tmp_history_file = 1;
 
   parse_and_execute (name, 1);
 
   run_unwind_frame ("do_run_history");
 
-  // Delete the temporary file.  Should probably be done with an
-  // unwind_protect.
+  // Delete the temporary file.
+
+  // XXX FIXME XXX -- should probably be done using an unwind_protect.
 
   unlink (name.c_str ());
 }
 
-int
-current_history_number (void)
-{
-  using_history ();
-
-  if (user_pref.history_size > 0)
-    return history_base + where_history ();
-  else
-    return -1;
-
-}
-
 DEFUN_TEXT ("edit_history", Fedit_history, Sedit_history, 10,
   "edit_history [first] [last]\n\
 \n\
 edit commands from the history list")
 {
   Octave_object retval;
 
   int argc = args.length () + 1;
diff --git a/src/oct-hist.h b/src/oct-hist.h
--- a/src/oct-hist.h
+++ b/src/oct-hist.h
@@ -21,22 +21,23 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 #if !defined (octave_octave_hist_h)
 #define octave_octave_hist_h 1
 
 #include <string>
 
+#include "cmd-hist.h"
+
 extern int default_history_size (void);
 extern string default_history_file (void);
-extern void initialize_history (void);
-extern void clean_up_history (void);
-extern void maybe_save_history (const string& s);
-extern int current_history_number (void);
+
+// Guess what?
+extern command_history octave_command_history;
 
 // Nonzero means input is coming from temporary history file.
 extern int input_from_tmp_history_file;
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -498,17 +498,17 @@ main (int argc, char **argv)
     maximum_braindamage ();
 
   bind_builtin_variable ("echo_executing_commands",
 			 (double) echo_commands);
 
   if (read_init_files)
     execute_startup_files ();
 
-  initialize_history ();
+  octave_command_history.read ();
 
   if (! inhibit_startup_message && reading_startup_message_printed)
     cout << endl;
 
   // Avoid counting commands executed from startup files.
 
   current_command_number = 1;
 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -256,17 +256,17 @@ script file but without requiring the fi
 
 // Fix up things before exiting.
 
 void
 clean_up_and_exit (int retval)
 {
   raw_mode (0);
 
-  clean_up_history ();
+  octave_command_history.clean_up_and_save ();
 
   close_plot_stream ();
 
   close_diary_file ();
 
   close_files ();
 
   cleanup_tmp_files ();
diff --git a/src/user-prefs.cc b/src/user-prefs.cc
--- a/src/user-prefs.cc
+++ b/src/user-prefs.cc
@@ -27,16 +27,18 @@ Software Foundation, 59 Temple Place - S
 
 #include <cstdio>
 #include <cstdlib>
 #include <cstring>
 
 #include "error.h"
 #include "gripes.h"
 #include "mappers.h"
+#include "oct-hist.h"
+#include "sysdep.h"
 #include "user-prefs.h"
 #include "utils.h"
 #include "variables.h"
 
 // The list of user preferences.  Values change when global variables
 // change, so we don't have to do a variable look up every time we
 // need to check a preference.
 user_preferences user_pref;
@@ -241,16 +243,17 @@ history_size (void)
   double val;
   if (builtin_real_scalar_variable ("history_size", val)
       && ! xisnan (val))
     {
       int ival = NINT (val);
       if (ival >= 0 && (double) ival == val)
 	{
 	  user_pref.history_size = ival;
+	  octave_command_history.set_size (ival);
 	  return 0;
 	}
     }
   gripe_invalid_value_specified ("history_size");
   return -1;
 }
 
 
@@ -432,17 +435,17 @@ return_last_computed_value (void)
 
 
 // Should we save command history?
 
 int
 saving_history (void)
 {
   user_pref.saving_history = check_preference ("saving_history");
-
+  octave_command_history.ignore_entries (! user_pref.saving_history);
   return 0;
 }
 
 
 // Suppress printing results in called functions.
 
 int
 silent_functions (void)
@@ -865,17 +868,20 @@ sv_history_file (void)
   string s = builtin_string_variable ("history_file");
 
   if (s.empty ())
     {
       gripe_invalid_value_specified ("history_file");
       status = -1;
     }
   else
-    user_pref.history_file = s;
+    {
+      user_pref.history_file = s;
+      octave_command_history.set_file (oct_tilde_expand (s));
+    }
 
   return status;
 }
 
 int
 sv_imagepath (void)
 {
   int status = 0;
