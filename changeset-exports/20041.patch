# HG changeset patch
# User Rik <rik@octave.org>
# Date 1428466702 25200
#      Tue Apr 07 21:18:22 2015 -0700
# Node ID dbf2418a46dd099078ec34fb11ca026017110c89
# Parent  055ad6fbc910fcd3adcc502756f48cc6677ac004
Document expansion of escape sequences in single quotes (bug #44745).

* io.txi: Note that all *printf functions expand escape sequences.

* error.cc (Ferror, Fwarning): Note that escape sequences are expanded.

* file-io.cc (Fprintf, Ffprintf, Fsprintf): Note that escape sequences are
expanded.

* regexp.cc (Fregexp, Fregexprep): Note that escape sequences are expanded.

diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -387,16 +387,20 @@ the line @samp{Free Software is needed f
 
 This section describes how to call @code{printf} and related functions.
 
 The following functions are available for formatted output.  They are
 modeled after the C language functions of the same name, but they
 interpret the format template differently in order to improve the
 performance of printing vector and matrix values.
 
+Implementation Note: For compatability with @sc{matlab}, escape sequences in
+the template string (e.g., @qcode{"\n"} => newline) are expanded even
+when the template string is defined with single quotes.
+
 @DOCSTRING(printf)
 
 @DOCSTRING(fprintf)
 
 @DOCSTRING(sprintf)
 
 The @code{printf} function can be used to print any number of arguments.
 The template string argument you supply in a call provides
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -1088,21 +1088,21 @@ endif\n\
 error (err_msg);\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
 which will only stop execution if an error has been found.\n\
 \n\
 Implementation Note: For compatibility with @sc{matlab}, escape\n\
-sequences (e.g., \"\\n\" => newline) are processed in @var{template}\n\
-regardless of whether @var{template} has been defined within single quotes\n\
-as long as there are two or more input arguments.\n\
-Use a second backslash to stop interpolation of the escape sequence (e.g.,\n\
-\"\\\\n\") or use the @code{regexptranslate} function.\n\
+sequences in @var{template} (e.g., \"\\n\" => newline) are processed\n\
+regardless of whether @var{template} has been defined with single quotes,\n\
+as long as there are two or more input arguments.  To disable escape sequence\n\
+expansion use a second backslash before the sequence (e.g., \"\\\\n\") or\n\
+use the @code{regexptranslate} function.\n\
 @seealso{warning, lasterror}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   octave_value_list nargs = args;
@@ -1387,21 +1387,21 @@ and the third argument is @qcode{\"local
 will be set temporarily, until the end of the current function.\n\
 Changes to warning states that are set locally affect the current\n\
 function and all functions called from the current scope.  The\n\
 previous warning state is restored on return from the current\n\
 function.  The @qcode{\"local\"} option is ignored if used in the top-level\n\
 workspace.\n\
 \n\
 Implementation Note: For compatibility with @sc{matlab}, escape\n\
-sequences (e.g., \"\\n\" => newline) are processed in @var{template}\n\
-regardless of whether @var{template} has been defined within single quotes\n\
-as long as there are two or more input arguments.\n\
-Use a second backslash to stop interpolation of the escape sequence (e.g.,\n\
-\"\\\\n\") or use the @code{regexptranslate} function.\n\
+sequences in @var{template} (e.g., \"\\n\" => newline) are processed\n\
+regardless of whether @var{template} has been defined with single quotes,\n\
+as long as there are two or more input arguments.  To disable escape sequence\n\
+expansion use a second backslash before the sequence (e.g., \"\\\\n\") or\n\
+use the @code{regexptranslate} function.\n\
 @seealso{warning_ids, lastwarn, error}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
   int argc = nargin + 1;
 
diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -883,16 +883,20 @@ DEFUN (fprintf, args, nargout,
 @deftypefnx {Built-in Function} {@var{numbytes} =} fprintf (@dots{})\n\
 This function is equivalent to @code{printf}, except that the output is\n\
 written to the file descriptor @var{fid} instead of @code{stdout}.\n\
 \n\
 If @var{fid} is omitted, the output is written to @code{stdout} making the\n\
 function exactly equivalent to @code{printf}.\n\
 \n\
 The optional output returns the number of bytes written to the file.\n\
+\n\
+Implementation Note: For compatability with @sc{matlab}, escape sequences in\n\
+the template string (e.g., @qcode{\"\\\\n\"} => newline) are expanded even\n\
+when the template string is defined with single quotes.\n\
 @seealso{fputs, fdisp, fwrite, fscanf, printf, sprintf, fopen}\n\
 @end deftypefn")
 {
   static std::string who = "fprintf";
 
   octave_value retval;
 
   int result = -1;
@@ -949,16 +953,20 @@ DEFUN (printf, args, nargout,
 Print optional arguments under the control of the template string\n\
 @var{template} to the stream @code{stdout} and return the number of\n\
 characters printed.\n\
 @ifclear OCTAVE_MANUAL\n\
 \n\
 See the Formatted Output section of the GNU Octave manual for a\n\
 complete description of the syntax of the template string.\n\
 @end ifclear\n\
+\n\
+Implementation Note: For compatability with @sc{matlab}, escape sequences in\n\
+the template string (e.g., @qcode{\"\\\\n\"} => newline) are expanded even\n\
+when the template string is defined with single quotes.\n\
 @seealso{fprintf, sprintf, scanf}\n\
 @end deftypefn")
 {
   static std::string who = "printf";
 
   octave_value retval;
 
   int result = -1;
@@ -1054,16 +1062,20 @@ Return a non-negative number on success 
 DEFUN (sprintf, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} sprintf (@var{template}, @dots{})\n\
 This is like @code{printf}, except that the output is returned as a\n\
 string.  Unlike the C library function, which requires you to provide a\n\
 suitably sized string as an argument, Octave's @code{sprintf} function\n\
 returns the string, automatically sized to hold all of the items\n\
 converted.\n\
+\n\
+Implementation Note: For compatability with @sc{matlab}, escape sequences in\n\
+the template string (e.g., @qcode{\"\\\\n\"} => newline) are expanded even\n\
+when the template string is defined with single quotes.\n\
 @seealso{printf, fprintf, sscanf}\n\
 @end deftypefn")
 {
   static std::string who = "sprintf";
 
   octave_value_list retval;
 
   int nargin = args.length ();
diff --git a/libinterp/corefcn/regexp.cc b/libinterp/corefcn/regexp.cc
--- a/libinterp/corefcn/regexp.cc
+++ b/libinterp/corefcn/regexp.cc
@@ -672,21 +672,21 @@ Match the beginning of a word\n\
 \n\
 @item \\>\n\
 Match the end of a word\n\
 \n\
 @item \\B\n\
 Match within a word\n\
 @end table\n\
 \n\
-Implementation Note: For compatibility with @sc{matlab}, ordinary escape\n\
-sequences (e.g., @qcode{\"\\n\"} => newline) are processed in @var{pat}\n\
-regardless of whether @var{pat} has been defined within single quotes.  Use\n\
-a second backslash to stop interpolation of the escape sequence (e.g.,\n\
-\"\\\\n\") or use the @code{regexptranslate} function.\n\
+Implementation Note: For compatibility with @sc{matlab}, escape sequences\n\
+in @var{pat} (e.g., @qcode{\"\\\\n\"} => newline) are expanded even when\n\
+@var{pat} has been defined with single quotes.  To disable expansion use\n\
+a second backslash before the escape sequence (e.g., \"\\\\n\") or use the\n\
+@code{regexptranslate} function.\n\
 \n\
 The outputs of @code{regexp} default to the order given below\n\
 \n\
 @table @var\n\
 @item s\n\
 The start indices of each matching substring\n\
 \n\
 @item e\n\
@@ -1304,21 +1304,21 @@ Options in addition to those of @code{re
 @item once\n\
 Replace only the first occurrence of @var{pat} in the result.\n\
 \n\
 @item warnings\n\
 This option is present for compatibility but is ignored.\n\
 \n\
 @end table\n\
 \n\
-Implementation Note: For compatibility with @sc{matlab}, ordinary escape\n\
-sequences (e.g., @qcode{\"\\n\"} => newline) are processed in both @var{pat}\n\
-and @var{repstr} regardless of whether they were defined within single\n\
-quotes.  Use a second backslash to stop interpolation of the escape sequence\n\
-(e.g., \"\\\\n\") or use the @code{regexptranslate} function.\n\
+Implementation Note: For compatibility with @sc{matlab}, escape sequences\n\
+in @var{pat} (e.g., @qcode{\"\\\\n\"} => newline) are expanded even when\n\
+@var{pat} has been defined with single quotes.  To disable expansion use\n\
+a second backslash before the escape sequence (e.g., \"\\\\n\") or use the\n\
+@code{regexptranslate} function.\n\
 @seealso{regexp, regexpi, strrep}\n\
 @end deftypefn")
 {
   octave_value_list retval;
   int nargin = args.length ();
 
   if (nargin < 3)
     {
