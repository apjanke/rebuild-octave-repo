# HG changeset patch
# User jwe
# Date 754882219 0
#      Fri Dec 03 01:30:19 1993 +0000
# Node ID d66cc97f77a97d510c87cc087f12a66d661286a8
# Parent  5b2f4a58254bc2678d48ae8a04346ec9206bc862
[project @ 1993-12-03 01:30:19 by jwe]

diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -240,17 +240,17 @@ names (help_list *lst, int& count)
   ptr = lst;
   int i = 0;
   while (ptr->name != (char *) NULL)
     {
       name_list[i++] = strsave (ptr->name);
       ptr++;
     }
 
-  name_list[count] = (char *) NULL;
+  name_list[i] = (char *) NULL;
   return name_list;
 }
 
 help_list *
 operator_help (void)
 {
   return operators;
 }
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -298,27 +298,36 @@ command_generator (char *text, int state
   static char **name_list = (char **) NULL;
 
   if (state == 0)
     {
       list_index = 0;
       len = strlen (text);
 
       if (name_list != (char **) NULL)
-	delete [] name_list;
+	{
+	  char **ptr = name_list;
+	  while (ptr && *ptr)
+	    delete [] *ptr++;
+	  delete [] name_list;
+	}
 
       name_list = make_name_list ();
     }
 
   char *name;
   while ((name = name_list[list_index]) != (char *) NULL)
     {
       list_index++;
       if (strncmp (name, text, len) == 0)
-	return name;
+	{
+	  char *buf = xmalloc (1 + strlen (name));
+	  strcpy (buf, name);
+	  return buf;
+	}
     }
 
   return (char *) NULL;
 }
 
 char **
 command_completer (char *text, int start, int end)
 {
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -975,18 +975,17 @@ symbol_table::save (ostream& os, int mar
   char **names = list (count, 1, symbol_def::USER_VARIABLE);
   char **ptr = names;
   if (ptr != (char **) NULL)
     {
       while (*ptr != (char *) NULL)
 	{
 	  if (save (os, *ptr, mark_as_global))
 	    status++;
-
-	  ptr++;
+	  delete [] *ptr++;
 	}
       delete [] names;
     }
   return status;
 }
 
 int
 symbol_table::save (ostream& os, const char *name, int mark_as_global = 0)
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -357,27 +357,21 @@ pathstring_to_vector (char *pathstring)
 	  while (*ptr != '\0')
 	    {
 	      if (*ptr == ':')
 		nelem++;
 	      ptr++;
 	    }
 	}
 
-// Why do I have to do this?
-
       char **foo = path;
       while (foo && *foo)
-	{
-	  delete [] *foo;
-	  *foo = (char *) NULL;
-	  foo++;
-	}
-      
+	delete [] *foo++;
       delete [] path;
+
       path = new char * [nelem+1];
       path[nelem] = (char *) NULL;
 
       int i = 0;
       char *ptr = tmp_path;
       while (i < nelem)
 	{
 	  char *end = strchr (ptr, ':');
@@ -1308,21 +1302,27 @@ get_m_file_names (int& num, const char *
 	      retval[i] = strsave (entry->d_name);
 	      if (no_suffix)
 		retval[i][len-2] = '\0';
 
 	      i++;
 
 	      if (i == num_max - 1)
 		{
+// Reallocate the array.  Only copy pointers, not the strings they
+// point to, then only delete the original array of pointers, and not
+// the strings they point to.
+
 		  num_max += 256;
 		  char **tmp = new char * [num_max];
 		  for (int j = 0; j < i; j++)
 		    tmp[j] = retval[j];
 
+		  delete [] retval;
+
 		  retval = tmp;
 		}
 	    }
 	}
       closedir (dirp);
     }
 
   retval[i] = (char *) NULL;
@@ -1345,21 +1345,27 @@ get_m_file_names (int& num, int no_suffi
     {
       while (*ptr != (char *) NULL)
 	{
 	  int tmp_num;
 	  char **names = get_m_file_names (tmp_num, *ptr, no_suffix);
 
 	  if (i + tmp_num >= num_max - 1)
 	    {
+// Reallocate the array.  Only copy pointers, not the strings they
+// point to, then only delete the original array of pointers, and not
+// the strings they point to.
+
 	      num_max += 1024;
 	      char **tmp = new char * [num_max];
 	      for (int j = 0; j < i; j++)
 		tmp[j] = retval[j];
 
+	      delete [] retval;
+
 	      retval = tmp;
 	    }
 
 	  int k = 0;
 	  while (k < tmp_num)
 	    retval[i++] = names[k++];
 
 	  ptr++;
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -689,43 +689,50 @@ make_name_list (void)
   int mfl_len = 0;
 
   char **key = (char **) NULL;
   char **glb = (char **) NULL;
   char **top = (char **) NULL;
   char **lcl = (char **) NULL;
   char **mfl = (char **) NULL;
 
+// Each of these functions returns a new vector of pointers to new
+// strings.
+
   key = names (keyword_help (), key_len);
   glb = global_sym_tab->list (glb_len);
   top = top_level_sym_tab->list (top_len);
   if (top_level_sym_tab != curr_sym_tab)
     lcl = curr_sym_tab->list (lcl_len);
   mfl = get_m_file_names (mfl_len, 1);
 
   int total_len = key_len + glb_len + top_len + lcl_len + mfl_len;
 
   char **list = new char * [total_len+1];
   
+// Put all the symbols in one big list.  Only copy pointers, not the
+// strings they point to, then only delete the original array of
+// pointers, and not the strings they point to.
+
   int j = 0;
   int i = 0;
   for (i = 0; i < key_len; i++)
-    list[j++] = strsave (key[i]);
+    list[j++] = key[i];
 
   for (i = 0; i < glb_len; i++)
-    list[j++] = strsave (glb[i]);
+    list[j++] = glb[i];
 
   for (i = 0; i < top_len; i++)
-    list[j++] = strsave (top[i]);
+    list[j++] = top[i];
 
   for (i = 0; i < lcl_len; i++)
-    list[j++] = strsave (lcl[i]);
+    list[j++] = lcl[i];
 
   for (i = 0; i < mfl_len; i++)
-    list[j++] = strsave (mfl[i]);
+    list[j++] = mfl[i];
 
   list[j] = (char *) NULL;
 
   delete [] key;
   delete [] glb;
   delete [] top;
   delete [] lcl;
   delete [] mfl;
