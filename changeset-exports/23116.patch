# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1479247815 -3600
#      Tue Nov 15 23:10:15 2016 +0100
# Node ID 868daa374c4980355cd1daf24ababe0a5b419e18
# Parent  94c97f219f5ce0d062a1cd31734ebef1b6265188
Improve support of "(xy)axislocation" "origin" (bug #48562).

* graphics.cc, graphics.in.h (calc_ticklabels): Omit tick labels that are
obstructed by axes.  Position correctly on logarithmic axes.

* gl-render.cc (opengl_renderer::draw_axes_[xy]_grid): Swap ticks and
labels when origin crosses the middle of the plot.  Draw axis at border
if origin is outside of axis limits.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -1207,18 +1207,20 @@ namespace octave
 #if defined (HAVE_OPENGL)
 
     if (! props.is_visible ())
       return;
 
     bool xySym = props.get_xySym ();
     bool layer2Dtop = props.get_layer2Dtop ();
     bool is2d = props.get_is2D ();
-    bool isXOrigin = props.xaxislocation_is ("origin");
-    bool isYOrigin = props.yaxislocation_is ("origin");
+    bool isXOrigin = props.xaxislocation_is ("origin")
+                       && ! props.yscale_is ("log");
+    bool isYOrigin = props.yaxislocation_is ("origin")
+                       && ! props.xscale_is ("log");
     bool boxFull = (props.get_boxstyle () == "full");
     double linewidth = props.get_linewidth ();
     double xPlane = props.get_xPlane ();
     double yPlane = props.get_yPlane ();
     double zPlane = props.get_zPlane ();
     double xPlaneN = props.get_xPlaneN ();
     double yPlaneN = props.get_yPlaneN ();
     double zPlaneN = props.get_zPlaneN ();
@@ -1359,16 +1361,18 @@ namespace octave
         bool xyzSym = props.get_xyzSym ();
         bool nearhoriz = props.get_nearhoriz ();
         double xticklen = props.get_xticklen ();
         double xtickoffset = props.get_xtickoffset ();
         double fy = props.get_fy ();
         double fz = props.get_fz ();
         double x_min = props.get_x_min ();
         double x_max = props.get_x_max ();
+        double y_min = props.get_y_min ();
+        double y_max = props.get_y_max ();
         double yPlane = props.get_yPlane ();
         double yPlaneN = props.get_yPlaneN ();
         double ypTick = props.get_ypTick ();
         double ypTickN = props.get_ypTickN ();
         double zPlane = props.get_zPlane ();
         double zPlaneN = props.get_zPlaneN ();
         double zpTick = props.get_zpTick ();
         double zpTickN = props.get_zpTickN ();
@@ -1381,17 +1385,19 @@ namespace octave
         Matrix gridcolor = props.get_gridcolor_rgb ();
         Matrix minorgridcolor = props.get_minorgridcolor_rgb ();
         double gridalpha = props.get_gridalpha ();
         double minorgridalpha = props.get_minorgridalpha ();
         bool do_xgrid = (props.is_xgrid () && (gridstyle != "none"));
         bool do_xminorgrid = (props.is_xminorgrid ()
                               && (minorgridstyle != "none"));
         bool do_xminortick = props.is_xminortick ();
-        bool is_origin = props.xaxislocation_is ("origin") && props.get_is2D ();
+        bool is_origin = props.xaxislocation_is ("origin") && props.get_is2D ()
+                         && ! props.yscale_is ("log");
+        bool is_origin_low = is_origin && (y_min + y_max) < 0;
         Matrix xticks = xform.xscale (props.get_xtick ().matrix_value ());
         Matrix xmticks = xform.xscale (props.get_xminortickvalues ().matrix_value ());
         string_vector xticklabels = props.get_xticklabel ().string_vector_value ();
         int wmax = 0;
         int hmax = 0;
         bool tick_along_z = nearhoriz || octave::math::isinf (fy);
         bool mirror = props.is_box () && xstate != AXE_ANY_DIR;
 
@@ -1427,73 +1433,83 @@ namespace octave
                        gridstyle, gridcolor, gridalpha,
                        xticks, x_min, x_max,
                        yPlane, yPlaneN, layer2Dtop ? zPlaneN : zPlane, zPlaneN,
                        0, (zstate != AXE_DEPTH_DIR));
 
         set_color (props.get_xcolor_rgb ());
 
         // axis line
+        double y_axis_pos = 0.;
         if (is_origin)
           {
+            y_axis_pos = octave::math::max (octave::math::min (0., y_max),
+                                            y_min);
             glBegin (GL_LINES);
-            glVertex3d (x_min, 0, zpTick);
-            glVertex3d (x_max, 0, zpTick);
+            set_color (props.get_ycolor_rgb ());
+            glVertex3d (x_min, y_axis_pos, zpTick);
+            glVertex3d (x_max, y_axis_pos, zpTick);
             glEnd ();
           }
 
         // minor tick marks
         if (do_xminortick)
           {
             if (tick_along_z)
               render_tickmarks (xmticks, x_min, x_max,
-                                (is_origin ? 0. : ypTick), ypTick,
+                                is_origin ? y_axis_pos : ypTick, ypTick,
                                 zpTick, zpTickN, 0., 0.,
+                                (is_origin_low ? -1. : 1.) * 
                                 octave::math::signum (zpTick-zpTickN)*fz*xticklen/2,
-                                0, mirror);
+                                0, ! is_origin && mirror);
             else
               render_tickmarks (xmticks, x_min, x_max,
-                                (is_origin ? 0. : ypTick), ypTickN,
+                                is_origin ? y_axis_pos : ypTick, ypTickN,
                                 zpTick, zpTick, 0.,
+                                (is_origin_low ? -1. : 1.) * 
                                 octave::math::signum (ypTick-ypTickN)*fy*xticklen/2,
-                                0., 0, mirror);
+                                0., 0, ! is_origin && mirror);
           }
 
         // tick marks
         if (tick_along_z)
-          {
-            render_tickmarks (xticks, x_min, x_max,
-                              (is_origin ? 0. : ypTick), ypTick,
-                              zpTick, zpTickN, 0., 0.,
-                              octave::math::signum (zpTick-zpTickN)*fz*xticklen,
-                              0, mirror);
-          }
+          render_tickmarks (xticks, x_min, x_max,
+                            is_origin ? y_axis_pos : ypTick, ypTick,
+                            zpTick, zpTickN, 0., 0.,
+                            (is_origin_low ? -1. : 1.) * 
+                            octave::math::signum (zpTick-zpTickN)*fz*xticklen,
+                            0, ! is_origin && mirror);
         else
-          {
-            render_tickmarks (xticks, x_min, x_max,
-                              (is_origin ? 0. : ypTick), ypTickN,
-                              zpTick, zpTick, 0.,
-                              octave::math::signum (ypTick-ypTickN)*fy*xticklen,
-                              0., 0, mirror);
-          }
+          render_tickmarks (xticks, x_min, x_max,
+                            is_origin ? y_axis_pos : ypTick, ypTickN,
+                            zpTick, zpTick, 0.,
+                            (is_origin_low ? -1. : 1.) * 
+                            octave::math::signum (ypTick-ypTickN)*fy*xticklen,
+                            0., 0, ! is_origin && mirror);
 
         // tick texts
         if (xticklabels.numel () > 0)
           {
-            int halign = (xstate == AXE_HORZ_DIR ? 1 : (xyzSym ? 0 : 2));
-            int valign = (xstate == AXE_VERT_DIR ? 1 : (x2Dtop ? 0 : 2));
+            int halign = (xstate == AXE_HORZ_DIR ? 1 :
+                          (xyzSym || is_origin_low ? 0 : 2));
+            int valign = (xstate == AXE_VERT_DIR ? 1 :
+                          (x2Dtop || is_origin_low ? 0 : 2));
 
             if (tick_along_z)
               render_ticktexts (xticks, xticklabels, x_min, x_max,
-                                (is_origin ? 0. : ypTick),
-                                zpTick+octave::math::signum (zpTick-zpTickN)*fz*xtickoffset,
+                                is_origin ? y_axis_pos : ypTick,
+                                zpTick +
+                                (is_origin_low ? -1. : 1.) * 
+                                octave::math::signum (zpTick-zpTickN)*fz*xtickoffset,
                                 0, halign, valign, wmax, hmax);
             else
               render_ticktexts (xticks, xticklabels, x_min, x_max,
-                                (is_origin ? 0. : ypTick) + octave::math::signum (ypTick-ypTickN)*fy*xtickoffset,
+                                (is_origin ? y_axis_pos : ypTick) +
+                                (is_origin_low ?  -1. : 1.) *
+                                octave::math::signum (ypTick-ypTickN)*fy*xtickoffset,
                                 zpTick, 0, halign, valign, wmax, hmax);
           }
 
         gh_manager::get_object (props.get_xlabel ()).set ("visible", "on");
       }
     else
       gh_manager::get_object (props.get_xlabel ()).set ("visible", "off");
 
@@ -1528,16 +1544,18 @@ namespace octave
         double fx = props.get_fx ();
         double fz = props.get_fz ();
         double xPlane = props.get_xPlane ();
         double xPlaneN = props.get_xPlaneN ();
         double xpTick = props.get_xpTick ();
         double xpTickN = props.get_xpTickN ();
         double y_min = props.get_y_min ();
         double y_max = props.get_y_max ();
+        double x_min = props.get_x_min ();
+        double x_max = props.get_x_max ();
         double zPlane = props.get_zPlane ();
         double zPlaneN = props.get_zPlaneN ();
         double zpTick = props.get_zpTick ();
         double zpTickN = props.get_zpTickN ();
 
         // Y grid
 
         double linewidth = props.get_linewidth ();
@@ -1546,17 +1564,19 @@ namespace octave
         Matrix gridcolor = props.get_gridcolor_rgb ();
         Matrix minorgridcolor = props.get_minorgridcolor_rgb ();
         double gridalpha = props.get_gridalpha ();
         double minorgridalpha = props.get_minorgridalpha ();
         bool do_ygrid = (props.is_ygrid () && (gridstyle != "none"));
         bool do_yminorgrid = (props.is_yminorgrid ()
                               && (minorgridstyle != "none"));
         bool do_yminortick = props.is_yminortick ();
-        bool is_origin = props.yaxislocation_is ("origin") && props.get_is2D ();
+        bool is_origin = props.yaxislocation_is ("origin") && props.get_is2D ()
+                         && ! props.xscale_is ("log");
+        bool is_origin_low = is_origin && (x_min + x_max) < 0;
         Matrix yticks = xform.yscale (props.get_ytick ().matrix_value ());
         Matrix ymticks = xform.yscale (props.get_yminortickvalues ().matrix_value ());
         string_vector yticklabels = props.get_yticklabel ().string_vector_value ();
         int wmax = 0;
         int hmax = 0;
         bool tick_along_z = nearhoriz || octave::math::isinf (fx);
         bool mirror = props.is_box () && ystate != AXE_ANY_DIR
                       && (! props.has_property ("__plotyy_axes__"));
@@ -1593,70 +1613,83 @@ namespace octave
                        gridstyle, gridcolor, gridalpha,
                        yticks, y_min, y_max,
                        xPlane, xPlaneN, layer2Dtop ? zPlaneN : zPlane, zPlaneN,
                        1, (zstate != AXE_DEPTH_DIR));
 
         set_color (props.get_ycolor_rgb ());
 
         // axis line
+        double x_axis_pos = 0.;
         if (is_origin)
           {
+            x_axis_pos = octave::math::max (octave::math::min (0., x_max),
+                                            x_min);
             glBegin (GL_LINES);
-            glVertex3d (0., y_min, zpTick);
-            glVertex3d (0., y_max, zpTick);
+            set_color (props.get_ycolor_rgb ());
+            glVertex3d (x_axis_pos, y_min, zpTick);
+            glVertex3d (x_axis_pos, y_max, zpTick);
             glEnd ();
           }
 
         // minor tick marks
         if (do_yminortick)
           {
             if (tick_along_z)
               render_tickmarks (ymticks, y_min, y_max,
-                                (is_origin ? 0. : xpTick), xpTick,
+                                is_origin ? x_axis_pos : xpTick, xpTick,
                                 zpTick, zpTickN, 0., 0.,
+                                (is_origin_low ? -1. : 1.) * 
                                 octave::math::signum (zpTick-zpTickN)*fz*yticklen/2,
-                                1, mirror);
+                                1, ! is_origin && mirror);
             else
               render_tickmarks (ymticks, y_min, y_max,
-                                (is_origin ? 0. : xpTick), xpTickN,
+                                is_origin ? x_axis_pos : xpTick, xpTickN,
                                 zpTick, zpTick,
+                                (is_origin_low ? -1. : 1.) * 
                                 octave::math::signum (xpTick-xpTickN)*fx*yticklen/2,
-                                0., 0., 1, mirror);
+                                0., 0., 1, ! is_origin && mirror);
           }
 
         // tick marks
         if (tick_along_z)
           render_tickmarks (yticks, y_min, y_max,
-                            (is_origin ? 0. : xpTick), xpTick,
+                            is_origin ? x_axis_pos : xpTick, xpTick,
                             zpTick, zpTickN, 0., 0.,
+                            (is_origin_low ? -1. : 1.) * 
                             octave::math::signum (zpTick-zpTickN)*fz*yticklen,
-                            1, mirror);
+                            1, ! is_origin && mirror);
         else
           render_tickmarks (yticks, y_min, y_max,
-                            (is_origin ? 0. : xpTick), xpTickN,
+                            is_origin ? x_axis_pos : xpTick, xpTickN,
                             zpTick, zpTick,
+                            (is_origin_low ? -1. : 1.) * 
                             octave::math::signum (xPlaneN-xPlane)*fx*yticklen,
-                            0., 0., 1, mirror);
+                            0., 0., 1, ! is_origin && mirror);
 
         // tick texts
         if (yticklabels.numel () > 0)
           {
-            int halign = (ystate == AXE_HORZ_DIR
-                          ? 1 : (! xyzSym || y2Dright ? 0 : 2));
-            int valign = (ystate == AXE_VERT_DIR ? 1 : 2);
+            int halign = (ystate == AXE_HORZ_DIR ? 1 :
+                          (! xyzSym || y2Dright || is_origin_low ? 0 : 2));
+            int valign = (ystate == AXE_VERT_DIR ? 1 :
+                          (is_origin_low ? 0 : 2));
 
             if (tick_along_z)
               render_ticktexts (yticks, yticklabels, y_min, y_max,
-                                (is_origin ? 0. : xpTick),
-                                zpTick+octave::math::signum (zpTick-zpTickN)*fz*ytickoffset,
+                                is_origin ? x_axis_pos : xpTick,
+                                zpTick +
+                                (is_origin_low ? -1. : 1.) * 
+                                octave::math::signum (zpTick-zpTickN)*fz*ytickoffset,
                                 1, halign, valign, wmax, hmax);
             else
               render_ticktexts (yticks, yticklabels, y_min, y_max,
-                                (is_origin ? 0. : xpTick) + octave::math::signum (xpTick-xpTickN)*fx*ytickoffset,
+                                (is_origin ? x_axis_pos : xpTick) +
+                                (is_origin_low ?  -1. : 1.) *
+                                octave::math::signum (xpTick-xpTickN)*fx*ytickoffset,
                                 zpTick, 1, halign, valign, wmax, hmax);
           }
 
         gh_manager::get_object (props.get_ylabel ()).set ("visible", "on");
       }
     else
       gh_manager::get_object (props.get_ylabel ()).set ("visible", "off");
 
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -4558,19 +4558,25 @@ axes::properties::init (void)
   update_font ();
 
   x_zlim.resize (1, 2);
 
   sx = "linear";
   sy = "linear";
   sz = "linear";
 
-  calc_ticklabels (xtick, xticklabel, xscale.is ("log"));
-  calc_ticklabels (ytick, yticklabel, yscale.is ("log"));
-  calc_ticklabels (ztick, zticklabel, zscale.is ("log"));
+  calc_ticklabels (xtick, xticklabel, xscale.is ("log"),
+                   xaxislocation_is ("origin"),
+                   yscale.is ("log") ? 2 : (yaxislocation_is ("origin") ? 0 :
+                   (yaxislocation_is ("left") ? -1 : 1)), xlim);
+  calc_ticklabels (ytick, yticklabel, yscale.is ("log"),
+                   yaxislocation_is ("origin"),
+                   xscale.is ("log") ? 2 : (xaxislocation_is ("origin") ? 0 :
+                   (xaxislocation_is ("bottom") ? -1 : 1)), ylim);
+  calc_ticklabels (ztick, zticklabel, zscale.is ("log"), false, 2, zlim);
 
   xset (xlabel.handle_value (), "handlevisibility", "off");
   xset (ylabel.handle_value (), "handlevisibility", "off");
   xset (zlabel.handle_value (), "handlevisibility", "off");
   xset (title.handle_value (), "handlevisibility", "off");
 
   xset (xlabel.handle_value (), "horizontalalignment", "center");
   xset (xlabel.handle_value (), "horizontalalignmentmode", "auto");
@@ -5688,24 +5694,30 @@ axes::properties::update_axes_layout (vo
   zpTickN = (zSign ? zPlaneN : zPlane);
 
   // 2D mode
   x2Dtop = false;
   y2Dright = false;
   layer2Dtop = false;
   if (xstate == AXE_HORZ_DIR && ystate == AXE_VERT_DIR)
     {
-      if (xaxislocation_is ("top"))
+      Matrix ylimits = get_ylim ().matrix_value ();
+      if (xaxislocation_is ("top") ||
+          (yscale_is ("log") && xaxislocation_is ("origin")
+           && (ylimits(1) < 0.)))
         {
           std::swap (yPlane, yPlaneN);
           x2Dtop = true;
         }
       ypTick = yPlaneN;
       ypTickN = yPlane;
-      if (yaxislocation_is ("right"))
+      Matrix xlimits = get_xlim ().matrix_value ();
+      if (yaxislocation_is ("right") || 
+          (xscale_is ("log") && yaxislocation_is ("origin")
+           && (xlimits(1) < 0.)))
         {
           std::swap (xPlane, xPlaneN);
           y2Dright = true;
         }
       xpTick = xPlaneN;
       xpTickN = xPlane;
       if (layer_is ("top"))
         {
@@ -7144,38 +7156,72 @@ axes::properties::calc_ticks_and_lims (a
 %!   assert (tics, [5 6 7 8]);
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 */
 
 void
 axes::properties::calc_ticklabels (const array_property& ticks,
-                                   any_property& labels, bool logscale)
+                                   any_property& labels, bool logscale,
+                                   const bool is_origin,
+                                   const int other_axislocation,
+                                   const array_property& axis_lims)
 {
   Matrix values = ticks.get ().matrix_value ();
+  Matrix lims = axis_lims.get ().matrix_value ();
   Cell c (values.dims ());
   std::ostringstream os;
 
+  // omit tick labels depending on location of other axis
+  ColumnVector omit_ticks (3, octave::numeric_limits<double>::NaN ());
+  if (get_is2D () && is_origin)
+    {
+      if (other_axislocation == 0)
+        {
+          omit_ticks(0) = octave::math::max (octave::math::min (0., lims(1)),
+                                             lims(0));
+        }
+      else if (other_axislocation == 1)
+        omit_ticks(0) = lims(1);
+      else if (other_axislocation == -1)
+        omit_ticks(0) = lims(0);
+      if (is_box ())
+        {
+          omit_ticks(1) = lims(0);
+          omit_ticks(2) = lims(1);
+        }
+    }
+
   if (logscale)
     {
       double significand;
       double exponent;
       double exp_max = 0.0;
       double exp_min = 0.0;
 
       for (int i = 0; i < values.numel (); i++)
         {
           double exp = std::log10 (values(i));
           exp_min = std::min (exp_min, exp);
           exp_max = std::max (exp_max, exp);
         }
 
       for (int i = 0; i < values.numel (); i++)
         {
+          bool omit_tick = false;
+          for (int i_omit = 0; i_omit < omit_ticks.numel (); i_omit++)
+            if (values(i) == omit_ticks(i_omit))
+              omit_tick = true;
+          if (omit_tick)
+            {
+              c(i) = "";
+              continue;
+            }
+
           if (values(i) < 0.0)
             exponent = std::floor (std::log10 (-values(i)));
           else
             exponent = std::floor (std::log10 (values(i)));
           significand = values(i) * std::pow (10., -exponent);
 
           os.str ("");
           if ((std::abs (significand) - 1) >
@@ -7196,19 +7242,28 @@ axes::properties::calc_ticklabels (const
           os << exponent << "}";
           c(i) = os.str ();
         }
     }
   else
     {
       for (int i = 0; i < values.numel (); i++)
         {
-          os.str ("");
-          os << values(i);
-          c(i) = os.str ();
+          bool omit_tick = false;
+          for (int i_omit = 0; i_omit < omit_ticks.numel (); i_omit++)
+            if (values(i) == omit_ticks(i_omit))
+              omit_tick = true;
+          if (omit_tick)
+            c(i) = "";
+          else
+            {
+              os.str ("");
+              os << values(i);
+              c(i) = os.str ();
+            }
         }
     }
 
   labels = c;
 }
 
 Matrix
 axes::properties::get_ticklabel_extents (const Matrix& ticks,
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -1562,17 +1562,18 @@ public:
   }
 
   handle_property& operator = (const graphics_handle& h)
   {
     set (octave_value (h.value ()));
     return *this;
   }
 
-  void invalidate (void) { current_val = octave::numeric_limits<double>::NaN (); }
+  void invalidate (void)
+  { current_val = octave::numeric_limits<double>::NaN (); }
 
   base_property* clone (void) const { return new handle_property (*this); }
 
   void add_constraint (const std::string& type)
   { type_constraints.insert (type); }
 
 protected:
   OCTINTERP_API bool do_set (const octave_value& v);
@@ -3845,17 +3846,17 @@ public:
 
     // Programming note: Keep property list sorted if new ones are added.
 
     BEGIN_PROPERTIES (axes)
       radio_property activepositionproperty , "{outerposition}|position"
       row_vector_property alim m , default_lim ()
       radio_property alimmode , "{auto}|manual"
       color_property ambientlightcolor , color_values (1, 1, 1)
-      bool_property box , "off"
+      bool_property box u , "off"
       radio_property boxstyle , "{back}|full"
       row_vector_property cameraposition m , Matrix (1, 3, 0.0)
       radio_property camerapositionmode , "{auto}|manual"
       row_vector_property cameratarget m , Matrix (1, 3, 0.0)
       radio_property cameratargetmode , "{auto}|manual"
       row_vector_property cameraupvector m , Matrix (1, 3, 0.0)
       radio_property cameraupvectormode , "{auto}|manual"
       double_property cameraviewangle m , 6.6086
@@ -4025,69 +4026,118 @@ public:
 
     void update_view (void) { sync_positions (); }
     void update_dataaspectratio (void) { sync_positions (); }
     void update_dataaspectratiomode (void) { sync_positions (); }
     void update_plotboxaspectratio (void) { sync_positions (); }
     void update_plotboxaspectratiomode (void) { sync_positions (); }
 
     void update_layer (void) { update_axes_layout (); }
+    void update_box (void)
+    {
+      calc_ticklabels (xtick, xticklabel, xscale.is ("log"),
+                       xaxislocation_is ("origin"),
+                       yscale.is ("log") ? 2 :
+                         (yaxislocation_is ("origin") ? 0 :
+                           (yaxislocation_is ("left") ? -1 : 1)),
+                       xlim);
+      calc_ticklabels (ytick, yticklabel, yscale.is ("log"),
+                       yaxislocation_is ("origin"),
+                       xscale.is ("log") ? 2 :
+                         (xaxislocation_is ("origin") ? 0 :
+                           (xaxislocation_is ("bottom") ? -1 : 1)),
+                       ylim);
+    }
     void update_yaxislocation (void)
     {
       // FIXME: Remove warning with "zero" in 4.6
       if (yaxislocation_is ("zero"))
         warning_with_id ("Octave:deprecated-property",
                          "Setting 'yaxislocation' to 'zero' is deprecated, "
                          "set to 'origin' instead.");
       sync_positions ();
       update_axes_layout ();
+      calc_ticklabels (xtick, xticklabel, xscale.is ("log"),
+                       xaxislocation_is ("origin"),
+                       yscale.is ("log") ? 2 :
+                         (yaxislocation_is ("origin") ? 0 :
+                           (yaxislocation_is ("left") ? -1 : 1)),
+                       xlim);
+      calc_ticklabels (ytick, yticklabel, yscale.is ("log"),
+                       yaxislocation_is ("origin"),
+                       xscale.is ("log") ? 2 :
+                         (xaxislocation_is ("origin") ? 0 :
+                           (xaxislocation_is ("bottom") ? -1 : 1)),
+                       ylim);
       update_ylabel_position ();
     }
     void update_xaxislocation (void)
     {
       // FIXME: Remove warning with "zero" in 4.6
       if (xaxislocation_is ("zero"))
         warning_with_id ("Octave:deprecated-property",
                          "Setting 'xaxislocation' to 'zero' is deprecated, "
                          "set to 'origin' instead.");
       sync_positions ();
       update_axes_layout ();
+      calc_ticklabels (xtick, xticklabel, xscale.is ("log"),
+                       xaxislocation_is ("origin"),
+                       yscale.is ("log") ? 2 :
+                         (yaxislocation_is ("origin") ? 0 :
+                           (yaxislocation_is ("left") ? -1 : 1)),
+                       xlim);
+      calc_ticklabels (ytick, yticklabel, yscale.is ("log"),
+                       yaxislocation_is ("origin"),
+                       xscale.is ("log") ? 2 :
+                         (xaxislocation_is ("origin") ? 0 :
+                           (xaxislocation_is ("bottom") ? -1 : 1)),
+                       ylim);
       update_xlabel_position ();
     }
 
     void update_xdir (void) { update_camera (); update_axes_layout (); }
     void update_ydir (void) { update_camera (); update_axes_layout (); }
     void update_zdir (void) { update_camera (); update_axes_layout (); }
 
     void update_ticklength (void);
     void update_tickdir (void) { update_ticklength (); }
     void update_tickdirmode (void) { update_ticklength (); }
 
     void update_xtick (void)
     {
       calc_ticks_and_lims (xlim, xtick, xminortickvalues, xlimmode.is ("auto"),
                            xtickmode.is ("auto"), xscale.is ("log"));
       if (xticklabelmode.is ("auto"))
-        calc_ticklabels (xtick, xticklabel, xscale.is ("log"));
+        calc_ticklabels (xtick, xticklabel, xscale.is ("log"),
+                         xaxislocation_is ("origin"),
+                         yscale.is ("log") ? 2 :
+                           (yaxislocation_is ("origin") ? 0 :
+                             (yaxislocation_is ("left") ? -1 : 1)),
+                         xlim);
       sync_positions ();
     }
     void update_ytick (void)
     {
       calc_ticks_and_lims (ylim, ytick, yminortickvalues, ylimmode.is ("auto"),
                            ytickmode.is ("auto"), yscale.is ("log"));
       if (yticklabelmode.is ("auto"))
-        calc_ticklabels (ytick, yticklabel, yscale.is ("log"));
+        calc_ticklabels (ytick, yticklabel, yscale.is ("log"),
+                         yaxislocation_is ("origin"),
+                         xscale.is ("log") ? 2 :
+                           (xaxislocation_is ("origin") ? 0 :
+                             (xaxislocation_is ("bottom") ? -1 : 1)),
+                         ylim);
       sync_positions ();
     }
     void update_ztick (void)
     {
       calc_ticks_and_lims (zlim, ztick, zminortickvalues, zlimmode.is ("auto"),
                            ztickmode.is ("auto"), zscale.is ("log"));
       if (zticklabelmode.is ("auto"))
-        calc_ticklabels (ztick, zticklabel, zscale.is ("log"));
+        calc_ticklabels (ztick, zticklabel, zscale.is ("log"), false, 2, zlim);
       sync_positions ();
     }
 
     void update_xtickmode (void)
     {
       if (xtickmode.is ("auto"))
         update_xtick ();
     }
@@ -4100,27 +4150,37 @@ public:
     {
       if (ztickmode.is ("auto"))
         update_ztick ();
     }
 
     void update_xticklabelmode (void)
     {
       if (xticklabelmode.is ("auto"))
-        calc_ticklabels (xtick, xticklabel, xscale.is ("log"));
+        calc_ticklabels (xtick, xticklabel, xscale.is ("log"),
+                         xaxislocation_is ("origin"),
+                         yscale.is ("log") ? 2 :
+                           (yaxislocation_is ("origin") ? 0 :
+                             (yaxislocation_is ("left") ? -1 : 1)),
+                         xlim);
     }
     void update_yticklabelmode (void)
     {
       if (yticklabelmode.is ("auto"))
-        calc_ticklabels (ytick, yticklabel, yscale.is ("log"));
+        calc_ticklabels (ytick, yticklabel, yscale.is ("log"),
+                         yaxislocation_is ("origin"),
+                         xscale.is ("log") ? 2 :
+                           (xaxislocation_is ("origin") ? 0 :
+                             (xaxislocation_is ("bottom") ? -1 : 1)),
+                         ylim);
     }
     void update_zticklabelmode (void)
     {
       if (zticklabelmode.is ("auto"))
-        calc_ticklabels (ztick, zticklabel, zscale.is ("log"));
+        calc_ticklabels (ztick, zticklabel, zscale.is ("log"), false, 2, zlim);
     }
 
     void update_font (std::string prop = "");
     void update_fontname (void)
     {
       update_font ("fontname");
       sync_positions ();
     }
@@ -4238,17 +4298,19 @@ public:
       update_transform ();
     }
 
     double calc_tick_sep (double minval, double maxval);
     void calc_ticks_and_lims (array_property& lims, array_property& ticks,
                               array_property& mticks, bool limmode_is_auto,
                               bool tickmode_is_auto, bool is_logscale);
     void calc_ticklabels (const array_property& ticks, any_property& labels,
-                          bool is_logscale);
+                          bool is_logscale, const bool is_origin,
+                          const int other_axislocation,
+                          const array_property& axis_lims);
     Matrix get_ticklabel_extents (const Matrix& ticks,
                                   const string_vector& ticklabels,
                                   const Matrix& limits);
 
     void fix_limits (array_property& lims)
     {
       if (lims.get ().is_empty ())
         return;
@@ -4275,45 +4337,55 @@ public:
                             double min_pos, double max_neg,
                             bool logscale);
 
     void update_xlim ()
     {
       calc_ticks_and_lims (xlim, xtick, xminortickvalues, xlimmode.is ("auto"),
                            xtickmode.is ("auto"), xscale.is ("log"));
       if (xticklabelmode.is ("auto"))
-        calc_ticklabels (xtick, xticklabel, xscale.is ("log"));
+        calc_ticklabels (xtick, xticklabel, xscale.is ("log"),
+                         xaxislocation.is ("origin"),
+                         yscale.is ("log") ? 2 :
+                           (yaxislocation_is ("origin") ? 0 :
+                             (yaxislocation_is ("left") ? -1 : 1)),
+                         xlim);
 
       fix_limits (xlim);
 
       update_xscale ();
 
       update_axes_layout ();
     }
 
     void update_ylim (void)
     {
       calc_ticks_and_lims (ylim, ytick, yminortickvalues, ylimmode.is ("auto"),
                            ytickmode.is ("auto"), yscale.is ("log"));
       if (yticklabelmode.is ("auto"))
-        calc_ticklabels (ytick, yticklabel, yscale.is ("log"));
+        calc_ticklabels (ytick, yticklabel, yscale.is ("log"),
+                         yaxislocation_is ("origin"),
+                         xscale.is ("log") ? 2 :
+                           (xaxislocation_is ("origin") ? 0 :
+                             (xaxislocation_is ("bottom") ? -1 : 1)),
+                         ylim);
 
       fix_limits (ylim);
 
       update_yscale ();
 
       update_axes_layout ();
     }
 
     void update_zlim (void)
     {
       calc_ticks_and_lims (zlim, ztick, zminortickvalues, zlimmode.is ("auto"),
                            ztickmode.is ("auto"), zscale.is ("log"));
       if (zticklabelmode.is ("auto"))
-        calc_ticklabels (ztick, zticklabel, zscale.is ("log"));
+        calc_ticklabels (ztick, zticklabel, zscale.is ("log"), false, 2, zlim);
 
       fix_limits (zlim);
 
       update_zscale ();
 
       update_axes_layout ();
     }
 
@@ -4600,27 +4672,28 @@ public:
 
   private:
     void update_position (void)
     {
       Matrix pos = get_data_position ();
       Matrix lim;
 
       lim = Matrix (1, 3, pos(0));
-      lim(2) = (lim(2) <= 0 ? octave::numeric_limits<double>::Inf () : lim(2));
+      lim(2) = lim(2) <= 0 ? octave::numeric_limits<double>::Inf () : lim(2);
       set_xlim (lim);
 
       lim = Matrix (1, 3, pos(1));
-      lim(2) = (lim(2) <= 0 ? octave::numeric_limits<double>::Inf () : lim(2));
+      lim(2) = lim(2) <= 0 ? octave::numeric_limits<double>::Inf () : lim(2);
       set_ylim (lim);
 
       if (pos.numel () == 3)
         {
           lim = Matrix (1, 3, pos(2));
-          lim(2) = (lim(2) <= 0 ? octave::numeric_limits<double>::Inf () : lim(2));
+          lim(2) = lim(2) <= 0 ? octave::numeric_limits<double>::Inf ()
+                               : lim(2);
           set_zliminclude ("on");
           set_zlim (lim);
         }
       else
         set_zliminclude ("off");
     }
 
     void update_text_extent (void);
