# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1316968164 -7200
#      Sun Sep 25 18:29:24 2011 +0200
# Node ID f27573828e9242e13216ceebc0bf689f05b48699
# Parent  6cf48511e73598b1954801ee3230b702ed2221b9
Properly implemented shutdown of callback thread.

diff --git a/gui/src/HistoryDockWidget.h b/gui/src/HistoryDockWidget.h
--- a/gui/src/HistoryDockWidget.h
+++ b/gui/src/HistoryDockWidget.h
@@ -34,17 +34,17 @@ public:
 public slots:
   /** Tells the widget to notice settings that are probably new. */
   void noticeSettings ();
   void handleVisibilityChanged (bool visible);
 
 signals:
   void information (QString message);
   void commandDoubleClicked (QString command);
-  /** Custom signal that tells if a user has clicke away that dock widget. */
+  /** Custom signal that tells if a user has clicked away that dock widget. */
   void activeChanged (bool active);
 protected:
   void closeEvent (QCloseEvent *event);
 private slots:
   void handleDoubleClick (QModelIndex modelIndex);
 
 private:
   void construct ();
diff --git a/gui/src/backend/OctaveCallbackThread.cpp b/gui/src/backend/OctaveCallbackThread.cpp
--- a/gui/src/backend/OctaveCallbackThread.cpp
+++ b/gui/src/backend/OctaveCallbackThread.cpp
@@ -13,22 +13,38 @@
  *
  * You should have received a copy of the GNU Affero General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
 #include "OctaveCallbackThread.h"
 #include "MainWindow.h"
 
-OctaveCallbackThread::OctaveCallbackThread (QObject * parent):QThread (parent)
+OctaveCallbackThread::OctaveCallbackThread (QObject * parent)
+  : QThread (parent)
 {
+  m_runningSemaphore = new QSemaphore(1);
+  m_running = true;
+}
+
+void
+OctaveCallbackThread::halt ()
+{
+  m_runningSemaphore->acquire ();
+  m_running = false;
+  m_runningSemaphore->release ();
 }
 
 void
 OctaveCallbackThread::run ()
 {
-  while (1)
+  bool running = true;
+  while (running)
     {
       OctaveLink::instance ()->fetchSymbolTable ();
       OctaveLink::instance ()->updateHistoryModel ();
       usleep (500000);
+
+      m_runningSemaphore->acquire ();
+      running = m_running;
+      m_runningSemaphore->release ();
     }
 }
diff --git a/gui/src/backend/OctaveCallbackThread.h b/gui/src/backend/OctaveCallbackThread.h
--- a/gui/src/backend/OctaveCallbackThread.h
+++ b/gui/src/backend/OctaveCallbackThread.h
@@ -14,20 +14,24 @@
  * You should have received a copy of the GNU Affero General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef OCTAVECALLBACKTHREAD_H
 #define OCTAVECALLBACKTHREAD_H
 
 #include <QThread>
+#include <QSemaphore>
 
 class OctaveCallbackThread:public QThread
 {
   Q_OBJECT
 public:
+  void halt();
   OctaveCallbackThread (QObject * parent);
 protected:
   void run ();
-
+private:
+  QSemaphore *m_runningSemaphore;
+  bool m_running;
 };
 
 #endif // OCTAVECALLBACKTHREAD_H
diff --git a/gui/src/backend/OctaveLink.cpp b/gui/src/backend/OctaveLink.cpp
--- a/gui/src/backend/OctaveLink.cpp
+++ b/gui/src/backend/OctaveLink.cpp
@@ -86,27 +86,31 @@ OctaveLink::octaveValueAsQString (Octave
     {
       return QString ("<Type not recognized>");
     }
 }
 
 void
 OctaveLink::launchOctave ()
 {
+  // Create both threads.
   m_octaveMainThread = new OctaveMainThread (this);
-  m_octaveMainThread->start ();
+  m_octaveCallbackThread = new OctaveCallbackThread (this);
 
-  m_octaveCallbackThread = new OctaveCallbackThread (this);
+  // Launch the second as soon as the first ist ready.
   connect (m_octaveMainThread, SIGNAL(ready()), m_octaveCallbackThread, SLOT(start()));
+
+  // Start the first one.
+  m_octaveMainThread->start ();
 }
 
 void
 OctaveLink::terminateOctave ()
 {
-  m_octaveCallbackThread->terminate ();
+  m_octaveCallbackThread->halt();
   m_octaveCallbackThread->wait ();
 
   m_octaveMainThread->terminate ();
   //m_octaveMainThread->wait();
 }
 
 void
 OctaveLink::fetchSymbolTable ()
