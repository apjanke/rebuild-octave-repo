# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1266559596 -3600
#      Fri Feb 19 07:06:36 2010 +0100
# Node ID 7c97da90fc8fe5b755162001c753f7ee3e6b0fb4
# Parent  1603dfe72933232303305213b95eb000fe828483
check for discontinuities in fzero

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2010-02-19  Rik <octave@nomad.inbox5.com>
+
+	* optimization/fzero.m: Add test for discontinuity at the end.
+
 2010-02-18  John W. Eaton  <jwe@octave.org>
 
 	* image/imfinfo.m: Don't handle file time stamp here.
 
 2010-02-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* statistics/base/center.m: Convert integer inputs to doubles.
 
diff --git a/scripts/optimization/fzero.m b/scripts/optimization/fzero.m
--- a/scripts/optimization/fzero.m
+++ b/scripts/optimization/fzero.m
@@ -33,16 +33,18 @@
 ##
 ## @itemize
 ## @item 1
 ## The algorithm converged to a solution.
 ## @item 0
 ## Maximum number of iterations or function evaluations has been exhausted.
 ## @item -1
 ## The algorithm has been terminated from user output function.
+## @item -5
+## The algorithm may have converged to a singular point.
 ## @end itemize
 ## @seealso{optimset, fsolve} 
 ## @end deftypefn
 
 ## This is essentially the ACM algorithm 748: Enclosing Zeros of
 ## Continuous Functions due to Alefeld, Potra and Shi, ACM Transactions
 ## on Mathematical Software, Vol. 21, No. 3, September 1995. Although
 ## the workflow should be the same, the structure of the algorithm has
@@ -128,16 +130,18 @@ function [x, fval, info, output] = fzero
     fa = fb;
     fb = fu;
   endif
 
   if (! (sign (fa) * sign (fb) <= 0))
     error ("fzero:bracket", "fzero: not a valid initial bracketing");
   endif
 
+  slope0 = (fb - fa) / (b - a);
+
   itype = 1;
 
   if (abs (fa) < abs (fb))
     u = a; fu = fa;
   else
     u = b; fu = fb;
   endif
 
@@ -276,16 +280,23 @@ function [x, fval, info, output] = fzero
     if (itype == 5 && (b - a) <= mba)
       itype = 2;
     endif
     if (itype == 2)
       mba = mu * (b - a);
     endif
   endwhile
 
+  ## Check solution for a singularity by examining slope
+  if (info == 1)
+    if ((b - a) != 0 && abs ((fb - fa)/(b - a) / slope0) > max (1e6, 0.5/tolx))
+      info = -5;
+    endif
+  endif
+
   output.iterations = niter;
   output.funcCount = nfev;
   output.bracket = [a, b];
   output.bracketf = [fa, fb];
 
 endfunction
 
 ## An assistant function that evaluates a function handle and checks for
