# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1383106708 14400
#      Wed Oct 30 00:18:28 2013 -0400
# Node ID 0b81d65d3c49315f0e37a8e808d1ed36f28d01fc
# Parent  56d09eba7c3b81275a0fa8401b44a5f31cfa1737
only fork and exec when starting gui

* main.in.cc (main): Reverse sense of test.  Switch test to check
gui_libs instead of cli_only.

diff --git a/src/main.in.cc b/src/main.in.cc
--- a/src/main.in.cc
+++ b/src/main.in.cc
@@ -393,17 +393,17 @@ strsave (const char *s)
 
 int
 main (int argc, char **argv)
 {
   int retval = 0;
 
 #if defined (HAVE_OCTAVE_GUI)
   bool start_gui = true;
-  bool cli_only = false;
+  bool gui_libs = true;
 #endif
 
   std::string octave_bindir = get_octave_bindir ();
 
   std::string file = octave_bindir + dir_sep_char;
 
 #if defined (HAVE_OCTAVE_GUI)
   file += "octave-gui";
@@ -422,17 +422,17 @@ main (int argc, char **argv)
         {
           // Run the version of Octave that is not linked with any GUI
           // libraries.  It may not be possible to do plotting or any
           // ui* calls, but it will be a little faster to start and
           // require less memory.  Don't pass the --no-gui-libs option
           // on as that option is not recognized by Octave.
 
 #if defined (HAVE_OCTAVE_GUI)
-          cli_only = true;
+          gui_libs = false;
 #endif
           file = octave_bindir + dir_sep_char + "octave-cli";
         }
       else if (! strcmp (argv[i], "--no-gui"))
         {
           // If we see this option, then we can just exec octave; we
           // don't have to create a child process and wait for it to
           // exit.  But do exec "octave", not "octave-cli", because even
@@ -451,21 +451,17 @@ main (int argc, char **argv)
   new_argv[k] = 0;
 
 #if ! defined (HAVE_OCTAVE_GUI) || defined (__WIN32__) || defined (__CYGWIN__)
 
   retval = octave_exec (file, new_argv);
 
 #else
 
-  if (cli_only || (! start_gui && ! have_controlling_terminal ()))
-    {
-      retval = octave_exec (file, new_argv);
-    }
-  else
+  if (gui_libs && start_gui && have_controlling_terminal ())
     {
       install_signal_handlers ();
 
       gui_pid = fork ();
 
       if (gui_pid < 0)
         {
           std::cerr << "octave: fork failed!" << std::endl;
@@ -500,16 +496,18 @@ main (int argc, char **argv)
                 {
                   retval = WIFEXITED (status) ? WEXITSTATUS (status) : 127;
 
                   break;
                 }
             }
         }
     }
+  else
+    retval = octave_exec (file, new_argv);
 
 #endif
 
   return retval;
 }
 
 /*!
 @mainpage Source code documentation for GNU Octave
