# HG changeset patch
# User jwe
# Date 832051430 0
#      Tue May 14 05:23:50 1996 +0000
# Node ID c0ec4630bd31edd80f7f365ffde0c196a5dd0673
# Parent  d01936305d994f8b993e2f1d91d7eade33b14668
[project @ 1996-05-14 05:23:50 by jwe]

diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -328,16 +328,91 @@ tan (const Complex& x)
 
 Complex
 tanh (const Complex& x)
 {
   Complex retval = sinh (x) / cosh (x);
   return retval;
 }
 
+// XXX FIXME XXX -- perhaps this could be avoided by determining
+// whether the is* functions are actually functions or just macros.
+
+int
+xisalnum (int c)
+{
+  return isalnum (c);
+}
+
+int
+xisalpha (int c)
+{
+  return isalpha (c);
+}
+
+int
+xisascii (int c)
+{
+  return isascii (c);
+}
+
+int
+xiscntrl (int c)
+{
+  return iscntrl (c);
+}
+
+int
+xisdigit (int c)
+{
+  return isdigit (c);
+}
+
+int
+xisgraph (int c)
+{
+  return isgraph (c);
+}
+
+int
+xislower (int c)
+{
+  return islower (c);
+}
+
+int
+xisprint (int c)
+{
+  return isprint (c);
+}
+
+int
+xispunct (int c)
+{
+  return ispunct (c);
+}
+
+int
+xisspace (int c)
+{
+  return isspace (c);
+}
+
+int
+xisupper (int c)
+{
+  return isupper (c);
+}
+
+int
+xisxdigit (int c)
+{
+  return isxdigit (c);
+}
+
 void
 install_mapper_functions (void)
 {
   DEFUN_MAPPER (abs, 0, fabs, abs, 0, 0.0, 0.0, 0,
     "abs (X): compute abs (X) for each element of X");
 
   DEFUN_MAPPER (acos, 0, acos, 0, acos, -1.0, 1.0, 1,
     "acos (X): compute acos (X) for each element of X");
@@ -394,56 +469,56 @@ install_mapper_functions (void)
     "floor (X): round elements of X toward -Inf");
 
   DEFUN_MAPPER (gamma, 0, xgamma, 0, 0, 0.0, 0.0, 0,
     "gamma (X): compute gamma (X) for each element of X");
 
   DEFUN_MAPPER (imag, 0, imag, imag, 0, 0.0, 0.0, 0,
     "imag (X): return imaginary part for each elements of X");
 
-  DEFUN_MAPPER (isalnum, isalnum, 0, 0, 0, 0.0, 0.0, 0,
+  DEFUN_MAPPER (isalnum, xisalnum, 0, 0, 0, 0.0, 0.0, 0,
     "isalnum (X): ");
 
-  DEFUN_MAPPER (isalpha, isalpha, 0, 0, 0, 0.0, 0.0, 0,
+  DEFUN_MAPPER (isalpha, xisalpha, 0, 0, 0, 0.0, 0.0, 0,
     "isalpha (X): ");
 
-  DEFUN_MAPPER (isascii, isascii, 0, 0, 0, 0.0, 0.0, 0,
+  DEFUN_MAPPER (isascii, xisascii, 0, 0, 0, 0.0, 0.0, 0,
     "isascii (X): ");
 
-  DEFUN_MAPPER (iscntrl, iscntrl, 0, 0, 0, 0.0, 0.0, 0,
+  DEFUN_MAPPER (iscntrl, xiscntrl, 0, 0, 0, 0.0, 0.0, 0,
     "iscntrl (X): ");
 
-  DEFUN_MAPPER (isdigit, isdigit, 0, 0, 0, 0.0, 0.0, 0,
+  DEFUN_MAPPER (isdigit, xisdigit, 0, 0, 0, 0.0, 0.0, 0,
     "isdigit (X): ");
 
   DEFUN_MAPPER (isinf, 0, xisinf, xisinf, 0, 0.0, 0.0, 0,
     "isinf (X): return 1 for elements of X infinite");
 
-  DEFUN_MAPPER (isgraph, isgraph, 0, 0, 0, 0.0, 0.0, 0,
+  DEFUN_MAPPER (isgraph, xisgraph, 0, 0, 0, 0.0, 0.0, 0,
     "isgraph (X): ");
 
-  DEFUN_MAPPER (islower, islower, 0, 0, 0, 0.0, 0.0, 0,
+  DEFUN_MAPPER (islower, xislower, 0, 0, 0, 0.0, 0.0, 0,
     "islower (X): ");
 
   DEFUN_MAPPER (isnan, 0, xisnan, xisnan, 0, 0.0, 0.0, 0,
     "isnan (X): return 1 where elements of X are NaNs");
 
-  DEFUN_MAPPER (isprint, isprint, 0, 0, 0, 0.0, 0.0, 0,
+  DEFUN_MAPPER (isprint, xisprint, 0, 0, 0, 0.0, 0.0, 0,
     "isprint (X): ");
 
-  DEFUN_MAPPER (ispunct, ispunct, 0, 0, 0, 0.0, 0.0, 0,
+  DEFUN_MAPPER (ispunct, xispunct, 0, 0, 0, 0.0, 0.0, 0,
     "ispunct (X): ");
 
-  DEFUN_MAPPER (isspace, isspace, 0, 0, 0, 0.0, 0.0, 0,
+  DEFUN_MAPPER (isspace, xisspace, 0, 0, 0, 0.0, 0.0, 0,
     "isspace (X): ");
 
-  DEFUN_MAPPER (isupper, isupper, 0, 0, 0, 0.0, 0.0, 0,
+  DEFUN_MAPPER (isupper, xisupper, 0, 0, 0, 0.0, 0.0, 0,
     "isupper (X): ");
 
-  DEFUN_MAPPER (isxdigit, isxdigit, 0, 0, 0, 0.0, 0.0, 0,
+  DEFUN_MAPPER (isxdigit, xisxdigit, 0, 0, 0, 0.0, 0.0, 0,
     "isxdigit (X): ");
 
   DEFUN_MAPPER (lgamma, 0, xlgamma, 0, 0, 0.0, 0.0, 0,
     "lgamma (X): compute log gamma (X) for each element of X");
 
   DEFUN_MAPPER (log, 0, log, 0, log, 0.0, DBL_MAX, 1,
     "log (X): compute log (X) for each element of X");
 
