# HG changeset patch
# User Ed Meyer <eem2314@gmail.com>
# Date 1365041048 25200
#      Wed Apr 03 19:04:08 2013 -0700
# Node ID 1df815271885ac4880bd7b6d0aa0d0e208ac8567
# Parent  ad070b353e592631e1b8707cf905f6061ae13071
allow various types of int for names like ML

diff --git a/libinterp/interp-core/ls-mat5.cc b/libinterp/interp-core/ls-mat5.cc
--- a/libinterp/interp-core/ls-mat5.cc
+++ b/libinterp/interp-core/ls-mat5.cc
@@ -77,16 +77,17 @@ along with Octave; see the file COPYING.
 #include "parse.h"
 #include "defaults.h"
 
 #ifdef HAVE_ZLIB
 #include <zlib.h>
 #endif
 
 #define PAD(l) (((l) > 0 && (l) <= 4) ? 4 : (((l)+7)/8)*8)
+#define INT8(l) ((l) == miINT8 || (l) == miUINT8 || (l) == miUTF8)
 
 
 // The subsystem data block
 static octave_value subsys_ov;
 
 // FIXME -- the following enum values should be the same as the
 // mxClassID values in mexproto.h, but it seems they have also changed
 // over time.  What is the correct way to handle this and maintain
@@ -669,17 +670,17 @@ read_mat5_binary_element (std::istream& 
   else
     {
       // Why did mathworks decide to not have dims for a workspace!!!
       dims.resize (2);
       dims(0) = 1;
       dims(1) = 1;
     }
 
-  if (read_mat5_tag (is, swap, type, len) || type != miINT8)
+  if (read_mat5_tag (is, swap, type, len) || !INT8(type))
     {
       error ("load: invalid array name subelement");
       goto early_read_error;
     }
 
   {
     OCTAVE_LOCAL_BUFFER (char, name, len+1);
 
@@ -1054,17 +1055,17 @@ read_mat5_binary_element (std::istream& 
         Octave_map m (dim_vector (1, 1));
         int n_fields = 2;
         string_vector field (n_fields);
 
         for (int i = 0; i < n_fields; i++)
           {
             int32_t fn_type;
             int32_t fn_len;
-            if (read_mat5_tag (is, swap, fn_type, fn_len) || fn_type != miINT8)
+            if (read_mat5_tag (is, swap, fn_type, fn_len) || !INT8(fn_type))
               {
                 error ("load: invalid field name subelement");
                 goto data_read_error;
               }
 
             OCTAVE_LOCAL_BUFFER (char, elname, fn_len + 1);
 
             std::streampos tmp_pos = is.tellg ();
@@ -1115,17 +1116,17 @@ read_mat5_binary_element (std::istream& 
         tc = m;
       }
       break;
 
     case MAT_FILE_OBJECT_CLASS:
       {
         isclass = true;
 
-        if (read_mat5_tag (is, swap, type, len) || type != miINT8)
+        if (read_mat5_tag (is, swap, type, len) || !INT8(type))
           {
             error ("load: invalid class name");
             goto skip_ahead;
           }
 
         {
           OCTAVE_LOCAL_BUFFER (char, name, len+1);
 
@@ -1165,17 +1166,17 @@ read_mat5_binary_element (std::istream& 
         if (! is.read (reinterpret_cast<char *> (&field_name_length), fn_len ))
           goto data_read_error;
 
         if (swap)
           swap_bytes<4> (&field_name_length);
 
         // field name subelement.  The length of this subelement tells
         // us how many fields there are.
-        if (read_mat5_tag (is, swap, fn_type, fn_len) || fn_type != miINT8)
+        if (read_mat5_tag (is, swap, fn_type, fn_len) || !INT8(fn_type))
           {
             error ("load: invalid field name subelement");
             goto data_read_error;
           }
 
         octave_idx_type n_fields = fn_len/field_name_length;
 
         if (n_fields > 0)
