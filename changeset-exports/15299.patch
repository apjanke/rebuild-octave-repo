# HG changeset patch
# User Rik <rik@octave.org>
# Date 1346858077 25200
#      Wed Sep 05 08:14:37 2012 -0700
# Node ID 8bd5c490b787ba5df78a06ab2ca5281aeae4eaaa
# Parent  704ab1b4c369f28f5f7295375b953945fb1624f0
Fix mex compilation with subdirs on Windows platforms (bug #37122)

* mkoctfile.in.cc (basename): Fix basename routine which was returning basedir,
not basename.

diff --git a/src/mkoctfile.in.cc b/src/mkoctfile.in.cc
--- a/src/mkoctfile.in.cc
+++ b/src/mkoctfile.in.cc
@@ -20,16 +20,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #include <config.h>
 #endif
 
 #include <string>
+#include <cstring>
 #include <map>
 #include <list>
 #include <algorithm>
 #include <iostream>
 #include <fstream>
 #include <vector>
 #include <cstdlib>
 
@@ -314,17 +315,17 @@ static string help_msg =
 "                            DEPEND_FLAGS              OCTAVE_LINK_OPTS\n"
 "                            DL_LD                     OCT_LINK_DEPS\n"   
 "                            DL_LDFLAGS                OCT_LINK_OPTS\n"   
 "                            EXEEXT                    RDYNAMIC_FLAG\n"   
 "                            F77                       READLINE_LIBS\n"   
 "                            F77_INTEGER_8_FLAG        SED\n"             
 "                            FFLAGS                    XTRA_CFLAGS\n"     
 "                            FFTW3_LDFLAGS             XTRA_CXXFLAGS\n"   
-"                            FFTW3_LIBS                                   
+"                            FFTW3_LIBS\n"      
 "                            FFTW3F_LDFLAGS\n"
 "                            FFTW3F_LIBS\n"
 "\n"
 "  --link-stand-alone      Link a stand-alone executable file.\n"
 "\n"
 "  --mex                   Assume we are creating a MEX file.  Set the\n"
 "                          default output extension to \".mex\".\n"
 "\n"
@@ -347,31 +348,33 @@ static string help_msg =
 #ifdef _MSC_VER
 "                            .lib  library file\n"
 #endif
 "\n";
 
 static string
 basename (const string& s, bool strip_path = false)
 {
+  string retval;
   size_t pos = s.rfind ('.');
-  string retval;
 
   if (pos == string::npos)
     retval = s;
   else
     retval = s.substr (0, pos);
+
   if (strip_path)
     {
       size_t p1 = retval.rfind ('/'), p2 = retval.rfind ('\\');
       pos = (p1 != string::npos && p2 != string::npos
              ? max (p1, p2) : (p2 != string::npos ? p2 : p1));
       if (pos != string::npos)
-        retval = retval.substr (0, pos);
+        retval = retval.substr (++pos, string::npos);
     }
+
   return retval;
 }
 
 inline bool
 starts_with (const string& s, const string& prefix)
 {
   return (s.length () >= prefix.length () && s.find (prefix) == 0);
 }
