# HG changeset patch
# User jwe
# Date 863058530 0
#      Thu May 08 02:28:50 1997 +0000
# Node ID 026f342c2019a267327a93d2ebbc4e5748c8195e
# Parent  b779a5b8aed42aa083dcd6fab3c4a1cad6137948
[project @ 1997-05-08 02:20:57 by jwe]

diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -24,16 +24,17 @@ Software Foundation, 59 Temple Place - S
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "Array-flags.h"
+#include "str-vec.h"
 
 #include "ov.h"
 #include "ov-base.h"
 #include "ov-bool.h"
 #include "ov-bool-mat.h"
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "ov-complex.h"
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -32,18 +32,19 @@ Software Foundation, 59 Temple Place - S
 #include <string>
 
 class ostream;
 
 #include "Range.h"
 #include "idx-vector.h"
 #include "mx-base.h"
 #include "oct-alloc.h"
+#include "str-vec.h"
+
 #include "oct-sym.h"
-#include "str-vec.h"
 
 class Octave_map;
 class octave_stream;
 class octave_value_list;
 
 // Constants.
 
 // This just provides a way to avoid infinite recursion when building
diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -44,16 +44,26 @@ void
 tree_constant::print (ostream& os, bool pr_as_read_syntax, bool pr_orig_text)
 {
   if (pr_orig_text && ! orig_text.empty ())
     os << orig_text;
   else
     val.print (os, pr_as_read_syntax);
 }
 
+void
+tree_constant::print_raw (ostream& os, bool pr_as_read_syntax,
+			  bool pr_orig_text) 
+{
+  if (pr_orig_text && ! orig_text.empty ())
+    os << orig_text;
+  else
+    val.print_raw (os, pr_as_read_syntax);
+}
+
 octave_value
 tree_constant::eval (bool print_result)
 {
   if (print_result)
     val.print (octave_stdout);
 
   return val;
 }
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -100,19 +100,23 @@ public:
   bool is_constant (void) const { return true; }
 
   void maybe_mutate (void)
     { val.maybe_mutate (); }
 
   void print (ostream& os, bool pr_as_read_syntax = false,
 	      bool pr_orig_txt = true);
 
+  void print_raw (ostream& os, bool pr_as_read_syntax = false,
+		  bool pr_orig_txt = true);
+
   octave_value eval (bool print = false);
 
-  octave_value_list eval (bool, int, const octave_value_list&);
+  octave_value_list
+  eval (bool print, int nargout, const octave_value_list& args);
 
   // Store the original text corresponding to this constant for later
   // pretty printing.
 
   void stash_original_text (const string& s)
     { orig_text = s; }
 
   string original_text (void) const
diff --git a/src/pt-indir.h b/src/pt-indir.h
--- a/src/pt-indir.h
+++ b/src/pt-indir.h
@@ -26,16 +26,18 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
 #include <string>
 
+class octave_value;
+class octave_value_list;
 class tree_identifier;
 class tree_walker;
 
 #include "pt-mvr-base.h"
 
 // Indirect references to values (structure references).
 
 class
@@ -80,18 +82,18 @@ public:
     { preserve_indir = true; }
 
   void mark_for_possible_ans_assign (void);
 
   string name (void) const;
 
   octave_value eval (bool print = false);
 
-  octave_value_list eval (bool print, int nargout,
-			  const octave_value_list& args);
+  octave_value_list
+  eval (bool print, int nargout, const octave_value_list& args);
 
   octave_value value (void) const;
   octave_value& reference (void);
 
   string elt_name (void)
     { return nm; }
 
   void accept (tree_walker& tw);
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -24,24 +24,27 @@ Software Foundation, 59 Temple Place - S
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
+#include <strstream.h>
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
+#include "str-vec.h"
+
 #include "defun.h"
 #include "error.h"
 #include "input.h"
 #include "oct-obj.h"
 #include "oct-usr-fcn.h"
 #include "ov.h"
 #include "pager.h"
 #include "pt-cmd.h"
@@ -293,16 +296,47 @@ tree_argument_list::convert_to_const_vec
 	}
     }
 
   args.resize (j);
 
   return args;
 }
 
+string_vector
+tree_argument_list::get_arg_names (void) const
+{
+  int len = length ();
+
+  string_vector retval (len);
+
+  int k = 0;
+
+  for (Pix p = first (); p; next (p))
+    {
+      tree_expression *elt = this->operator () (p);
+
+      strstream str_buf;
+
+      tree_print_code pc_buf (str_buf);
+
+      elt->accept (pc_buf);
+
+      str_buf << ends;
+
+      const char *s = str_buf.str ();
+
+      retval(k++) = s;
+
+      delete [] s;
+    }
+
+  return retval;
+}
+
 void
 tree_argument_list::accept (tree_walker& tw)
 {
   tw.visit_argument_list (*this);
 }
 
 // Parameter lists.
 
diff --git a/src/pt-misc.h b/src/pt-misc.h
--- a/src/pt-misc.h
+++ b/src/pt-misc.h
@@ -24,16 +24,18 @@ Software Foundation, 59 Temple Place - S
 #define octave_tree_misc_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
+class string_vector;
+
 class octave_value_list;
 class octave_value;
 class tree_command;
 class tree_expression;
 class tree_simple_assignment_expression;
 class tree_index_expression;
 class tree_identifier;
 class symbol_record;
@@ -164,16 +166,18 @@ public:
 
   tree_argument_list (tree_expression *t)
     : SLList<tree_expression *> () { append (t); }
 
   ~tree_argument_list (void);
 
   octave_value_list convert_to_const_vector (void);
 
+  string_vector get_arg_names (void) const;
+
   void accept (tree_walker& tw);
 };
 
 // Parameter lists.  Used to hold the list of input and output
 // parameters in a function definition.  Elements are identifiers
 // only.
 
 class
diff --git a/src/pt-mvr-base.cc b/src/pt-mvr-base.cc
--- a/src/pt-mvr-base.cc
+++ b/src/pt-mvr-base.cc
@@ -24,16 +24,17 @@ Software Foundation, 59 Temple Place - S
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "error.h"
+#include "oct-obj.h"
 #include "ov.h"
 #include "pt-mvr-base.h"
 
 // A base class for objects that can be return multiple values
 
 octave_value
 tree_multi_val_ret::eval (bool /* print */)
 {
diff --git a/src/pt-mvr-base.h b/src/pt-mvr-base.h
--- a/src/pt-mvr-base.h
+++ b/src/pt-mvr-base.h
@@ -47,18 +47,18 @@ public:
 
   ~tree_multi_val_ret (void) { }
 
   bool is_multi_val_ret_expression (void) const
     { return true; }
 
   octave_value eval (bool print = false);
 
-  virtual octave_value_list eval (bool print, int nargout,
-			      const octave_value_list& args) = 0;
+  virtual octave_value_list
+  eval (bool print, int nargout, const octave_value_list& args) = 0;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-mvr.cc b/src/pt-mvr.cc
--- a/src/pt-mvr.cc
+++ b/src/pt-mvr.cc
@@ -25,16 +25,18 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
+#include "str-vec.h"
+
 #include "error.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "pt-const.h"
 #include "pt-exp.h"
 #include "pt-id.h"
 #include "pt-indir.h"
 #include "pt-misc.h"
@@ -61,54 +63,53 @@ all_args_defined (const octave_value_lis
 
 octave_value
 tree_oct_obj::eval (bool /* print */)
 {
   return values(0);
 }
 
 octave_value_list
-tree_oct_obj::eval (bool /* print */, int /* nargout */,
-		    const octave_value_list& /* args */)
+tree_oct_obj::eval (bool, int, const octave_value_list&)
 {
   return values;
 }
 
 void
 tree_oct_obj::accept (tree_walker& tw)
 {
   tw.visit_oct_obj (*this);
 }
 
 // Index expressions.
 
 tree_index_expression::tree_index_expression
   (tree_identifier *i, int l = -1, int c = -1)
-    : tree_multi_val_ret (l, c)
-      {
-	id = new tree_indirect_ref (i);
-	list = 0;
-      }
+    : tree_multi_val_ret (l, c), id (new tree_indirect_ref (i)),
+      list (0), arg_nm ()
+{
+}
 
 tree_index_expression::tree_index_expression
   (tree_identifier *i, tree_argument_list *lst, int l = -1, int c = -1)
-    : tree_multi_val_ret (l, c)
-      {
-	id = new tree_indirect_ref (i);
-	list = lst;
-      }
+    : tree_multi_val_ret (l, c), id (new tree_indirect_ref (i)),
+      list (lst), arg_nm ()
+{
+  if (list)
+    arg_nm = list->get_arg_names ();
+}
 
 tree_index_expression::~tree_index_expression (void)
 {
   delete id;
   delete list;
 }
 
 string
-tree_index_expression::name (void)
+tree_index_expression::name (void) const
 {
   return id->name ();
 }
 
 void
 tree_index_expression::mark_for_possible_ans_assign (void)
 {
   if (id)
@@ -125,16 +126,18 @@ tree_index_expression::eval (bool print)
 
   if (list)
     {
       // Extract the arguments into a simple vector.  Don't pass null
       // args.
 
       octave_value_list args = list->convert_to_const_vector ();
 
+      args.stash_name_tags (arg_nm);
+
       if (error_state)
 	eval_error ();
       else
 	{
 	  if (error_state)
 	    eval_error ();
 	  else
 	    {
@@ -162,18 +165,17 @@ tree_index_expression::eval (bool print)
       if (error_state)
 	eval_error ();
     }
 
   return retval;
 }
 
 octave_value_list
-tree_index_expression::eval (bool print, int nargout,
-			     const octave_value_list& /* args */)
+tree_index_expression::eval (bool print, int nargout, const octave_value_list&)
 {
   octave_value_list retval;
 
   if (error_state)
     return retval;
 
   if (list)
     {
@@ -275,17 +277,17 @@ tree_multi_assignment_expression::eval (
   if (result.length () > 0)
     retval = result(0);
 
   return retval;
 }
 
 octave_value_list
 tree_multi_assignment_expression::eval (bool print, int nargout,
-					const octave_value_list& /* args */)
+					const octave_value_list&)
 {
   assert (etype == tree_expression::multi_assignment);
 
   if (error_state || ! rhs)
     return octave_value_list ();
 
   nargout = lhs->length ();
   octave_value_list tmp_args;
diff --git a/src/pt-mvr.h b/src/pt-mvr.h
--- a/src/pt-mvr.h
+++ b/src/pt-mvr.h
@@ -34,16 +34,18 @@ class tree_identifier;
 class tree_index_expression;
 class tree_indirect_ref;
 class tree_return_list;
 
 class tree_walker;
 
 #include <string>
 
+#include "str-vec.h"
+
 #include "pt-mvr-base.h"
 #include "oct-obj.h"
 
 // Used internally.
 
 class
 tree_oct_obj : public tree_multi_val_ret
 {
@@ -53,18 +55,18 @@ public:
 
   tree_oct_obj (const octave_value_list& v, int l = -1, int c = -1)
     : tree_multi_val_ret (l, c), values (v) { }
 
   ~tree_oct_obj (void) { }
 
   octave_value eval (bool print = false);
 
-  octave_value_list eval (bool print, int nargout,
-			  const octave_value_list& args);
+  octave_value_list
+  eval (bool print, int nargout, const octave_value_list& args);
 
   void accept (tree_walker& tw);
 
 private:
 
   const octave_value_list values;
 };
 
@@ -93,36 +95,39 @@ public:
   ~tree_index_expression (void);
 
   bool is_index_expression (void) const
     { return true; }
 
   tree_indirect_ref *ident (void)
     { return id; }
 
-  string name (void);
+  string name (void) const;
 
   tree_argument_list *arg_list (void)
     { return list; }
 
   void mark_for_possible_ans_assign (void);
 
   octave_value eval (bool print = false);
 
-  octave_value_list eval (bool print, int nargout, const octave_value_list& args);
+  octave_value_list
+  eval (bool print, int nargout, const octave_value_list& args);
 
   void eval_error (void);
 
   void accept (tree_walker& tw);
 
 private:
 
   tree_indirect_ref *id;
 
   tree_argument_list *list;
+
+  string_vector arg_nm;
 };
 
 // Multi-valued assignment expressions.
 
 class
 tree_multi_assignment_expression : public tree_multi_val_ret
 {
 public:
@@ -137,17 +142,18 @@ public:
 				    int l = -1, int c = -1)
     : tree_multi_val_ret (l, c, tree_expression::multi_assignment),
       preserve (plhs), lhs (lst), rhs (r) { }
 
   ~tree_multi_assignment_expression (void);
 
   octave_value eval (bool print = false);
 
-  octave_value_list eval (bool print, int nargout, const octave_value_list& args);
+  octave_value_list
+  eval (bool print, int nargout, const octave_value_list& args);
 
   bool is_assignment_expression (void) const
     { return true; }
 
   void eval_error (void);
 
   tree_return_list *left_hand_side (void) { return lhs; }
 
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -574,17 +574,17 @@ tree_print_code::visit_constant (tree_co
 {
   indent ();
 
   bool in_parens = val.is_in_parens ();
 
   if (in_parens)
     os << "(";
 
-  val.print (os, true, print_original_text);
+  val.print_raw (os, true, print_original_text);
 
   if (in_parens)
     os << ")";
 }
 
 void
 tree_print_code::visit_parameter_list (tree_parameter_list& lst)
 {
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -462,30 +462,41 @@ along with this program. If not, write t
 Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n\
 \n";
 
   return retval;
 }
 
 // XXX FIXME XXX -- this may not be the best place for these...
 
-octave_value_list
+static octave_value_list
 feval (const octave_value_list& args, int nargout)
 {
   octave_value_list retval;
 
   octave_symbol *fcn = is_valid_function (args(0), "feval", 1);
 
   if (fcn)
     {
+      string_vector arg_names = args.name_tags ();
+
       int tmp_nargin = args.length () - 1;
-      octave_value_list tmp_args;
-      tmp_args.resize (tmp_nargin);
+
+      octave_value_list tmp_args (tmp_nargin, octave_value ());
+
+      string_vector tmp_arg_names (tmp_nargin);
+
       for (int i = 0; i < tmp_nargin; i++)
-	tmp_args(i) = args(i+1);
+	{
+	  tmp_args(i) = args(i+1);
+	  tmp_arg_names(i) = arg_names(i+1);
+	}
+
+      tmp_args.stash_name_tags (tmp_arg_names);
+
       retval = fcn->eval (nargout, tmp_args);
     }
 
   return retval;
 }
 
 DEFUN (feval, args, nargout,
   "feval (NAME, ARGS, ...)\n\
@@ -788,17 +799,17 @@ SLStack<string> octave_atexit_functions;
 
 void
 do_octave_atexit (void)
 {
   while (! octave_atexit_functions.empty ())
     {
       octave_value_list fcn = octave_atexit_functions.pop ();
 
-      feval (fcn, false);
+      feval (fcn, 0);
     }
 }
 
 DEFUN (atexit, args, ,
   "atexit (NAME): register NAME as a function to call when Octave exits\n\
 \n\
 Functions are called with no arguments in the reverse of the order in\n\
 which they were registered with atexit()")
