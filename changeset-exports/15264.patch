# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1346360244 14400
#      Thu Aug 30 16:57:24 2012 -0400
# Node ID 94cdf82d4a0cba97b7b80ddfa532bcee21dde4e7
# Parent  2136343014d56ddd5d6f997a678ceffe76eb4bf1
don't overload meaning of info in Sparse Cholesky factorization functions

* chol.cc (Fchol): New variable, force.  Always pass natural
and force to SparseCHOL and SparseComplexCHOL constructors.
* SparsedbleCHOL.h, SparsedbleCHOL.cc (SparseCHOL::SparseCHOL):
New arg, force.  Pass it to sparse_base_chol constructor.
* SparseCmplxCHOL.h, SparseCmplxCHOL.cc
(SparseComplexCHOL::SparseComplexCHOL): Likewise.
* sparse-base-chol.h (sparse_base_chol<>::sparse_base_chol_rep::init):
* sparse-base-chol.h, sparse-base-chol.cc
(sparse_base_chol<>::sparse_base_chol_rep::init): Replace nargout
argument with force.  Check force, not nargout > 1.
* sparse-base-chol.h
(sparse_base_chol::sparse_base_chol_rep::sparse_base_chol_rep):
New arg, force.  Pass it to init.
(sparse_base_chol::sparse_base_chol): New arg force.  Pass it to rep
constructor.

diff --git a/libinterp/dldfcn/chol.cc b/libinterp/dldfcn/chol.cc
--- a/libinterp/dldfcn/chol.cc
+++ b/libinterp/dldfcn/chol.cc
@@ -175,35 +175,38 @@ sparse matrices.\n\
     }
 
   if (! error_state)
     {
       octave_value arg = args(0);
 
       octave_idx_type nr = arg.rows ();
       octave_idx_type nc = arg.columns ();
-      bool natural = (nargout != 3);
 
       int arg_is_empty = empty_arg ("chol", nr, nc);
 
       if (arg_is_empty < 0)
         return retval;
       if (arg_is_empty > 0)
         return octave_value (Matrix ());
 
       if (arg.is_sparse_type ())
         {
+          octave_idx_type info;
+          bool natural = (nargout != 3);
+          bool force = nargout > 1;
+
           if (arg.is_real_type ())
             {
               SparseMatrix m = arg.sparse_matrix_value ();
 
               if (! error_state)
                 {
-                  octave_idx_type info = nargout;
-                  SparseCHOL fact (m, info, natural);
+                  SparseCHOL fact (m, info, natural, force);
+
                   if (nargout == 3)
                     {
                       if (vecout)
                         retval(2) = fact.perm ();
                       else
                         retval(2) = fact.Q ();
                     }
 
@@ -220,18 +223,17 @@ sparse matrices.\n\
                 }
             }
           else if (arg.is_complex_type ())
             {
               SparseComplexMatrix m = arg.sparse_complex_matrix_value ();
 
               if (! error_state)
                 {
-                  octave_idx_type info = nargout;
-                  SparseComplexCHOL fact (m, info, natural);
+                  SparseComplexCHOL fact (m, info, natural, force);
 
                   if (nargout == 3)
                     {
                       if (vecout)
                         retval(2) = fact.perm ();
                       else
                         retval(2) = fact.Q ();
                     }
@@ -400,38 +402,40 @@ symmetric positive definite matrix @var{
       octave_idx_type nc = arg.columns ();
 
       if (nr == 0 || nc == 0)
         retval = Matrix ();
       else
         {
           if (arg.is_sparse_type ())
             {
+              octave_idx_type info;
+
               if (arg.is_real_type ())
                 {
                   SparseMatrix m = arg.sparse_matrix_value ();
 
                   if (! error_state)
                     {
-                      octave_idx_type info;
                       SparseCHOL chol (m, info);
+
                       if (info == 0)
                         retval = chol.inverse ();
                       else
                         error ("cholinv: A must be positive definite");
                     }
                 }
               else if (arg.is_complex_type ())
                 {
                   SparseComplexMatrix m = arg.sparse_complex_matrix_value ();
 
                   if (! error_state)
                     {
-                      octave_idx_type info;
                       SparseComplexCHOL chol (m, info);
+
                       if (info == 0)
                         retval = chol.inverse ();
                       else
                         error ("cholinv: A must be positive definite");
                     }
                 }
               else
                 gripe_wrong_type_arg ("cholinv", arg);
diff --git a/liboctave/SparseCmplxCHOL.h b/liboctave/SparseCmplxCHOL.h
--- a/liboctave/SparseCmplxCHOL.h
+++ b/liboctave/SparseCmplxCHOL.h
@@ -33,24 +33,23 @@ OCTAVE_API
 SparseComplexCHOL :
   public sparse_base_chol <SparseComplexMatrix, Complex, SparseMatrix>
 {
 public:
 
   SparseComplexCHOL (void) :
     sparse_base_chol<SparseComplexMatrix, Complex, SparseMatrix> () { }
 
-  SparseComplexCHOL (const SparseComplexMatrix& a, bool natural = true) :
-    sparse_base_chol<SparseComplexMatrix, Complex, SparseMatrix>
-  (a, natural) { }
+  SparseComplexCHOL (const SparseComplexMatrix& a, bool natural = true,
+                     bool force = false) :
+    sparse_base_chol<SparseComplexMatrix, Complex, SparseMatrix> (a, natural, force) { }
 
   SparseComplexCHOL (const SparseComplexMatrix& a, octave_idx_type& info,
-                     bool natural = true) :
-    sparse_base_chol<SparseComplexMatrix, Complex, SparseMatrix>
-  (a, info, natural) { }
+                     bool natural = true, bool force = false) :
+    sparse_base_chol<SparseComplexMatrix, Complex, SparseMatrix> (a, info, natural, force) { }
 
   SparseComplexCHOL (const SparseComplexCHOL& a) :
     sparse_base_chol<SparseComplexMatrix, Complex, SparseMatrix> (a) { }
 
   ~SparseComplexCHOL (void) { }
 
   SparseComplexCHOL& operator = (const SparseComplexCHOL& a)
     {
diff --git a/liboctave/SparsedbleCHOL.h b/liboctave/SparsedbleCHOL.h
--- a/liboctave/SparsedbleCHOL.h
+++ b/liboctave/SparsedbleCHOL.h
@@ -30,22 +30,22 @@ along with Octave; see the file COPYING.
 class
 OCTAVE_API
 SparseCHOL : public sparse_base_chol <SparseMatrix, double, SparseMatrix>
 {
 public:
 
   SparseCHOL (void) : sparse_base_chol<SparseMatrix, double, SparseMatrix> () { }
 
-  SparseCHOL (const SparseMatrix& a, bool natural = true) :
-    sparse_base_chol<SparseMatrix, double, SparseMatrix> (a, natural) { }
+  SparseCHOL (const SparseMatrix& a, bool natural = true, bool force = false) :
+    sparse_base_chol<SparseMatrix, double, SparseMatrix> (a, natural, force) { }
 
   SparseCHOL (const SparseMatrix& a, octave_idx_type& info,
-              bool natural = true) :
-    sparse_base_chol<SparseMatrix, double, SparseMatrix> (a, info, natural) { }
+              bool natural = false, bool force = false) :
+    sparse_base_chol<SparseMatrix, double, SparseMatrix> (a, info, natural, force) { }
 
   SparseCHOL (const SparseCHOL& a) :
     sparse_base_chol<SparseMatrix, double, SparseMatrix> (a) { }
 
   ~SparseCHOL (void) { }
 
   SparseCHOL& operator = (const SparseCHOL& a)
     {
diff --git a/liboctave/sparse-base-chol.cc b/liboctave/sparse-base-chol.cc
--- a/liboctave/sparse-base-chol.cc
+++ b/liboctave/sparse-base-chol.cc
@@ -75,19 +75,20 @@ sparse_base_chol<chol_type, chol_elt, p_
     }
   Sp[ncol] = pdest;
 }
 #endif
 
 template <class chol_type, class chol_elt, class p_type>
 octave_idx_type
 sparse_base_chol<chol_type, chol_elt, p_type>::sparse_base_chol_rep::init
-  (const chol_type& a, bool natural, octave_idx_type nargout)
+  (const chol_type& a, bool natural, bool force)
 {
   volatile octave_idx_type info = 0;
+
 #ifdef HAVE_CHOLMOD
   octave_idx_type a_nr = a.rows ();
   octave_idx_type a_nc = a.cols ();
 
   if (a_nr != a_nc)
     {
       (*current_liboctave_error_handler)
         ("SparseCHOL requires square matrix");
@@ -165,17 +166,17 @@ sparse_base_chol<chol_type, chol_elt, p_
   BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
   Lfactor = CHOLMOD_NAME(analyze) (ac, cm);
   CHOLMOD_NAME(factorize) (ac, Lfactor, cm);
   END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 
   is_pd = cm->status == CHOLMOD_OK;
   info = (is_pd ? 0 : cm->status);
 
-  if (is_pd || nargout > 1)
+  if (is_pd || force)
     {
       BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
       cond = CHOLMOD_NAME(rcond) (Lfactor, cm);
       END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 
       minor_p = Lfactor->minor;
 
       BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
diff --git a/liboctave/sparse-base-chol.h b/liboctave/sparse-base-chol.h
--- a/liboctave/sparse-base-chol.h
+++ b/liboctave/sparse-base-chol.h
@@ -36,29 +36,29 @@ protected:
   class sparse_base_chol_rep
   {
   public:
     sparse_base_chol_rep (void)
       : count (1), Lsparse (0), Common (), is_pd (false), minor_p (0),
         perms (), cond (0)
       { }
 
-    sparse_base_chol_rep (const chol_type& a, const bool natural)
+    sparse_base_chol_rep (const chol_type& a, bool natural, bool force)
       : count (1), Lsparse (0), Common (), is_pd (false), minor_p (0),
         perms (), cond (0)
       {
-        init (a, natural);
+        init (a, natural, force);
       }
 
     sparse_base_chol_rep (const chol_type& a, octave_idx_type& info,
-                          const bool natural)
+                          bool natural, bool force)
       : count (1), Lsparse (0), Common (), is_pd (false), minor_p (0),
         perms (), cond (0)
       {
-        info = init (a, natural, info);
+        info = init (a, natural, force);
       }
 
     ~sparse_base_chol_rep (void)
       {
         if (is_pd)
           CHOLMOD_NAME (free_sparse) (&Lsparse, &Common);
       }
 
@@ -88,46 +88,44 @@ protected:
     bool is_pd;
 
     octave_idx_type minor_p;
 
     ColumnVector perms;
 
     double cond;
 
-    octave_idx_type init (const chol_type& a, bool natural = true,
-                          octave_idx_type nargout = 1);
+    octave_idx_type init (const chol_type& a, bool natural, bool force);
 
     void drop_zeros (const cholmod_sparse* S);
 
     // No copying!
 
     sparse_base_chol_rep (const sparse_base_chol_rep&);
 
     sparse_base_chol_rep& operator = (const sparse_base_chol_rep&);
   };
 #else
   class sparse_base_chol_rep
   {
   public:
     sparse_base_chol_rep (void)
       : count (1), is_pd (false), minor_p (0), perms (), cond (0) { }
 
-    sparse_base_chol_rep (const chol_type& a,
-                          const bool natural)
+    sparse_base_chol_rep (const chol_type& a, bool natural, bool force)
       : count (1), is_pd (false), minor_p (0), perms (), cond (0)
       {
-        init (a, natural);
+        init (a, natural, force);
       }
 
     sparse_base_chol_rep (const chol_type& a, octave_idx_type& info,
-                          const bool natural)
+                          bool natural, bool force)
       : count (1), is_pd (false), minor_p (0), perms (), cond (0)
       {
-        info = init (a, natural, info);
+        info = init (a, natural, force);
       }
 
     ~sparse_base_chol_rep (void) { }
 
     octave_idx_type P (void) const { return 0; }
 
     ColumnVector perm (void) const { return perms + 1; }
 
@@ -143,18 +141,17 @@ protected:
     bool is_pd;
 
     octave_idx_type minor_p;
 
     ColumnVector perms;
 
     double cond;
 
-    octave_idx_type init (const chol_type& a, bool natural = true,
-                          octave_idx_type nargout = 0);
+    octave_idx_type init (const chol_type& a, bool natural, bool force);
 
     // No copying!
 
     sparse_base_chol_rep (const sparse_base_chol_rep&);
 
     sparse_base_chol_rep& operator = (const sparse_base_chol_rep&);
   };
 #endif
@@ -164,23 +161,24 @@ protected:
 
 public:
 
   sparse_base_chol (void)
     : rep (new typename
            sparse_base_chol<chol_type, chol_elt, p_type>::sparse_base_chol_rep ())
     { }
 
-  sparse_base_chol (const chol_type& a, const bool n)
+  sparse_base_chol (const chol_type& a, bool natural, bool force)
     : rep (new typename
-           sparse_base_chol<chol_type, chol_elt, p_type>::sparse_base_chol_rep (a, n))
+           sparse_base_chol<chol_type, chol_elt, p_type>::sparse_base_chol_rep (a, natural, force))
     { }
 
-  sparse_base_chol (const chol_type& a, octave_idx_type& info, const bool n)
-    : rep (new typename sparse_base_chol<chol_type, chol_elt, p_type>::sparse_base_chol_rep (a, info, n))
+  sparse_base_chol (const chol_type& a, octave_idx_type& info,
+                    bool natural, bool force)
+    : rep (new typename sparse_base_chol<chol_type, chol_elt, p_type>::sparse_base_chol_rep (a, info, natural, force))
     { }
 
   sparse_base_chol (const sparse_base_chol<chol_type, chol_elt, p_type>& a)
     : rep (a.rep)
     { rep->count++; }
 
   virtual ~sparse_base_chol (void)
     {
