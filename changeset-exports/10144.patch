# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1263985543 -3600
#      Wed Jan 20 12:05:43 2010 +0100
# Node ID 1b883ce6670728232d59c67f4d8f49e82e2e44eb
# Parent  f3c34b518422e5675e2619bf5861a92a51c46267
avoid redundant real->complex conversions in xpow

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-01-20  Jaroslav Hajek  <highegg@gmail.com>
+
+	* xpow.cc (xpow, elem_xpow): Don't do redundant real->complex
+	conversions.
+
 2010-01-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* data.cc: Substitute OCTAVE_QUIT -> octave_quit ().
 	* input.cc: Ditto.
 	* ls-mat-ascii.cc: Ditto.
 	* oct-stream.cc: Ditto.
 	* ov-base-int.cc: Ditto.
 	* ov-base-sparse.cc: Ditto.
diff --git a/src/xpow.cc b/src/xpow.cc
--- a/src/xpow.cc
+++ b/src/xpow.cc
@@ -130,19 +130,17 @@ xpow (double a, const Matrix& b)
 
   return retval;
 }
 
 // -*- 3 -*-
 octave_value
 xpow (double a, const Complex& b)
 {
-  Complex result;
-  Complex atmp (a);
-  result = std::pow (atmp, b);
+  Complex result = std::pow (a, b);
   return result;
 }
 
 // -*- 4 -*-
 octave_value
 xpow (double a, const ComplexMatrix& b)
 {
   octave_value retval;
@@ -1147,22 +1145,21 @@ elem_xpow (double a, const NDArray& b)
   return retval;
 }
 
 // -*- 2 -*-
 octave_value
 elem_xpow (double a, const ComplexNDArray& b)
 {
   ComplexNDArray result (b.dims ());
-  Complex atmp (a);
 
   for (octave_idx_type i = 0; i < b.length (); i++)
     {
       octave_quit ();
-      result(i) = std::pow (atmp, b(i));
+      result(i) = std::pow (a, b(i));
     }
 
   return result;
 }
 
 // -*- 3 -*-
 octave_value
 elem_xpow (const NDArray& a, double b)
@@ -1269,18 +1266,17 @@ done:
   if (convert_to_complex)
     {
       ComplexNDArray complex_result (a_dims);
 
       for (octave_idx_type i = 0; i < len; i++)
 	{
 	  octave_quit ();
 	  Complex atmp (a(i));
-	  Complex btmp (b(i));
-	  complex_result(i) = std::pow (atmp, btmp);
+	  complex_result(i) = std::pow (atmp, b(i));
 	}
 
       retval = complex_result;
     }
   else
     {
       NDArray result (a_dims);
 
@@ -1300,17 +1296,17 @@ done:
 octave_value
 elem_xpow (const NDArray& a, const Complex& b)
 {
   ComplexNDArray result (a.dims ());
 
   for (octave_idx_type i = 0; i < a.length (); i++)
     {
       octave_quit ();
-      result(i) = std::pow (Complex (a(i)), b);
+      result(i) = std::pow (a(i), b);
     }
 
   return result;
 }
 
 // -*- 6 -*-
 octave_value
 elem_xpow (const NDArray& a, const ComplexNDArray& b)
@@ -1324,17 +1320,17 @@ elem_xpow (const NDArray& a, const Compl
       return octave_value ();
     }
 
   ComplexNDArray result (a_dims);
 
   for (octave_idx_type i = 0; i < a.length (); i++)
     {
       octave_quit ();
-      result(i) = std::pow (Complex (a(i)), b(i));
+      result(i) = std::pow (a(i), b(i));
     }
 
   return result;
 }
 
 // -*- 7 -*-
 octave_value
 elem_xpow (const Complex& a, const NDArray& b)
@@ -1375,17 +1371,17 @@ elem_xpow (const ComplexNDArray& a, doub
 {
   ComplexNDArray result (a.dims ());
 
   if (xisint (b))
     {
       if (b == -1)
         {
           for (octave_idx_type i = 0; i < a.length (); i++)
-            result.xelem (i) = std::conj (a(i)) / std::norm (a(i));
+            result.xelem (i) = 1.0 / a(i);
         }
       else
         {
           for (octave_idx_type i = 0; i < a.length (); i++)
             {
               octave_quit ();
               result(i) = std::pow (a(i), static_cast<int> (b));
             }
@@ -1547,19 +1543,17 @@ xpow (float a, const FloatMatrix& b)
 
   return retval;
 }
 
 // -*- 3 -*-
 octave_value
 xpow (float a, const FloatComplex& b)
 {
-  FloatComplex result;
-  FloatComplex atmp (a);
-  result = std::pow (atmp, b);
+  FloatComplex result = std::pow (a, b);
   return result;
 }
 
 // -*- 4 -*-
 octave_value
 xpow (float a, const FloatComplexMatrix& b)
 {
   octave_value retval;
@@ -2467,22 +2461,21 @@ elem_xpow (float a, const FloatNDArray& 
   return retval;
 }
 
 // -*- 2 -*-
 octave_value
 elem_xpow (float a, const FloatComplexNDArray& b)
 {
   FloatComplexNDArray result (b.dims ());
-  FloatComplex atmp (a);
 
   for (octave_idx_type i = 0; i < b.length (); i++)
     {
       octave_quit ();
-      result(i) = std::pow (atmp, b(i));
+      result(i) = std::pow (a, b(i));
     }
 
   return result;
 }
 
 // -*- 3 -*-
 octave_value
 elem_xpow (const FloatNDArray& a, float b)
@@ -2589,18 +2582,17 @@ done:
   if (convert_to_complex)
     {
       FloatComplexNDArray complex_result (a_dims);
 
       for (octave_idx_type i = 0; i < len; i++)
 	{
 	  octave_quit ();
 	  FloatComplex atmp (a(i));
-	  FloatComplex btmp (b(i));
-	  complex_result(i) = std::pow (atmp, btmp);
+	  complex_result(i) = std::pow (atmp, b(i));
 	}
 
       retval = complex_result;
     }
   else
     {
       FloatNDArray result (a_dims);
 
@@ -2620,17 +2612,17 @@ done:
 octave_value
 elem_xpow (const FloatNDArray& a, const FloatComplex& b)
 {
   FloatComplexNDArray result (a.dims ());
 
   for (octave_idx_type i = 0; i < a.length (); i++)
     {
       octave_quit ();
-      result(i) = std::pow (FloatComplex (a(i)), b);
+      result(i) = std::pow (a(i), b);
     }
 
   return result;
 }
 
 // -*- 6 -*-
 octave_value
 elem_xpow (const FloatNDArray& a, const FloatComplexNDArray& b)
@@ -2644,17 +2636,17 @@ elem_xpow (const FloatNDArray& a, const 
       return octave_value ();
     }
 
   FloatComplexNDArray result (a_dims);
 
   for (octave_idx_type i = 0; i < a.length (); i++)
     {
       octave_quit ();
-      result(i) = std::pow (FloatComplex (a(i)), b(i));
+      result(i) = std::pow (a(i), b(i));
     }
 
   return result;
 }
 
 // -*- 7 -*-
 octave_value
 elem_xpow (const FloatComplex& a, const FloatNDArray& b)
@@ -2695,17 +2687,17 @@ elem_xpow (const FloatComplexNDArray& a,
 {
   FloatComplexNDArray result (a.dims ());
 
   if (xisint (b))
     {
       if (b == -1)
         {
           for (octave_idx_type i = 0; i < a.length (); i++)
-            result.xelem (i) = std::conj (a(i)) / std::norm (a(i));
+            result.xelem (i) = 1.0f / a(i);
         }
       else
         {
           for (octave_idx_type i = 0; i < a.length (); i++)
             {
               octave_quit ();
               result(i) = std::pow (a(i), static_cast<int> (b));
             }
