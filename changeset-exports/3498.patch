# HG changeset patch
# User jwe
# Date 949288636 0
#      Mon Jan 31 03:17:16 2000 +0000
# Node ID e391aeef2b3c49a7043c0f36ce9df791d9ec1d5e
# Parent  1807b75711df9d5a1684927612e2956ff08bca65
[project @ 2000-01-31 03:17:14 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2000-01-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-time.cc: Declare strptime extern "C".
+
 2000-01-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-time.cc [! HAVE_STRPTIME]: Provide declaration.
 
 2000-01-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array2.h (Array2<T>::get_size): Now protected instead of private.
 	* Array3.h, Array3.cc: Use it in constructors and resize methods
diff --git a/liboctave/oct-time.cc b/liboctave/oct-time.cc
--- a/liboctave/oct-time.cc
+++ b/liboctave/oct-time.cc
@@ -28,17 +28,17 @@ Software Foundation, 59 Temple Place - S
 #include <cmath>
 
 #include "lo-error.h"
 #include "lo-utils.h"
 #define __USE_XOPEN
 #include "oct-time.h"
 
 #if !defined (HAVE_STRPTIME)
-extern char *strptime (const char *buf, const char *format, struct tm *tm);
+extern "C" char *strptime (const char *buf, const char *format, struct tm *tm);
 #endif
 
 octave_time::octave_time (const octave_base_tm& tm)
 {
   struct tm t;
   
   t.tm_sec = tm.sec ();
   t.tm_min = tm.min ();
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2000-01-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* image/saveimage.m: Delete some debugging code.
+
 2000-01-27  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* signal/sinc.m: Avoid reshaping.
 
 	* image/rgb2ind.m: No longer needs to reset do_fortran_indexing.
 	* image/ind2rgb.m: Ditto.
 	* image/ind2gray.m: Ditto.
 	* general/reshape.m: Ditto.  Also no longer needs to reset
diff --git a/scripts/image/saveimage.m b/scripts/image/saveimage.m
--- a/scripts/image/saveimage.m
+++ b/scripts/image/saveimage.m
@@ -163,18 +163,16 @@ function saveimage (filename, img, img_f
 
       for i = 1:img_nr
         idx = (i-1)*img_nc+1:i*img_nc;
         if (n_long > 0)
           img_row = [map(img(idx)); (zeros (8-n_long, 1))];
         else
           img_row = map(img(idx));
         endif
-        img_row
-        tmp
         if (img_nc < 8)
           for j = 1:8
             tmp(:,i) = tmp(:,i) + img_row (j) * 2^(8-j);
           endfor
         else
           for j = 1:8
             tmp(:,i) = tmp(:,i) + img_row (j:8:img_nc) * 2^(8-j);
           endfor
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2000-01-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* input.cc (input_event_hook, Finput_event_hook): New functions.
+	(hook_fcn, user_data): New static variables.
+
 2000-01-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-except.cc (do_catch_code): Don't do anything special for
 	tree_return_command::returning, or tree_break_command::breaking.
 
 	* error.cc (vwarning): New function.
 	(warning): Use it instead of calling verror.
 
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -875,16 +875,87 @@ Read the readline library initialiazatio
 	command_editor::read_init_file (file);
     }
   else
     print_usage ("read_readline_init_file");
 
   return retval;
 }
 
+static string hook_fcn;
+static octave_value user_data;
+
+static int
+input_event_hook (...)
+{
+  if (user_data.is_defined ())
+    feval (hook_fcn, user_data, 0);
+  else
+    feval (hook_fcn, octave_value_list (), 0);
+
+  return 0;
+}
+
+DEFUN (input_event_hook, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {[@var{ofcn}, @var{odata}] =} input_event_hook (@var{fcn}, @var{data})\n\
+Given the name of a function as a string and any Octave value object,\n\
+install @var{fcn} as a function to call periodically, when Octave is\n\
+waiting for input.  The function should have the form\n\
+@example\n\
+@var{fcn} (@var{data})\n\
+@end example\n\
+\n\
+If @var{data} is omitted, Octave calls the function without any\n\
+arguments.  If both @var{fcn} and @var{data} are omitted, Octave\n\
+clears the hook.  In all cases, the name of the previous hook function\n\
+and the user data are returned.\n\
+@end deftypefn")
+{
+  octave_value_list retval;
+
+  int nargin = args.length ();
+
+  if (nargin > 2)
+    print_usage ("input_event_hook");
+  else
+    {
+      octave_value tmp_user_data;
+
+      string tmp_hook_fcn;
+
+      if (nargin > 1)
+	tmp_user_data = args(1);
+
+      if (nargin > 0)
+	{
+	  tmp_hook_fcn = args(0).string_value ();
+
+	  if (error_state)
+	    {
+	      error ("input_event_hook: expecting string as first arg");
+	      return retval;
+	    }
+
+	  command_editor::set_event_hook (input_event_hook);
+	}
+
+      if (nargin == 0)
+	command_editor::set_event_hook (0);
+
+      retval(1) = user_data;
+      retval(0) = hook_fcn;
+
+      hook_fcn = tmp_hook_fcn;
+      user_data = tmp_user_data;
+    }
+
+  return retval;
+}
+
 static int
 ps1 (void)
 {
   int status = 0;
 
   Vps1 = builtin_string_variable ("PS1");
 
   return status;
