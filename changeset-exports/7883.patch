# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1213211146 14400
#      Wed Jun 11 15:05:46 2008 -0400
# Node ID 3092dd54ad95cb372e2f4e41fe86cf2d228ec51d
# Parent  4816cec8b1ca198c0d78f4142b8a99598150ac8d
fix expected output from lasterr in tests; fix fail tests in ismember.m

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,12 @@
 2008-06-11  John W. Eaton  <jwe@octave.org>
 
+	* set/ismember.m: Fix fail tests.
+
 	* general/rat.m: Properly initialize steps when all elements of
 	input array are integers.  Append spaces as necessary when
 	building  character array.
 
 2008-06-05  Jaroslav Hajek <highegg@gmail.com>
 
 	* plot/__go_draw_axes__.m: Use fprintf for formatted output.
 
diff --git a/scripts/set/ismember.m b/scripts/set/ismember.m
--- a/scripts/set/ismember.m
+++ b/scripts/set/ismember.m
@@ -236,23 +236,23 @@ function [tf, a_idx] = cell_ismember (a,
   a_idx = reshape (a_idx, size_a); 
 endfunction
 
 %!assert (ismember ({''}, {'abc', 'def'}), false);
 %!assert (ismember ('abc', {'abc', 'def'}), true);
 %!assert (isempty (ismember ([], [1, 2])), true);
 %!assert (isempty (ismember ({}, {'a', 'b'})), true);
 %!assert (ismember ('', {'abc', 'def'}), false);
-%!fail ('ismember ([], {1, 2})', 'error:.*');
-%!fail ('ismember ({[]}, {1, 2})', 'error:.*');
-%!fail ('ismember ({}, {1, 2})', 'error:.*');
-%!fail ('ismember ({1}, {''1'', ''2''})', 'error:.*');
-%!fail ('ismember (1, ''abc'')', 'error:.*');
-%!fail ('ismember ({''1''}, {''1'', ''2''},''rows'')', 'error:.*');
-%!fail ('ismember ([1 2 3], [5 4 3 1], ''rows'')', 'error:.*');
+%!fail ('ismember ([], {1, 2})');
+%!fail ('ismember ({[]}, {1, 2})');
+%!fail ('ismember ({}, {1, 2})');
+%!fail ('ismember ({1}, {''1'', ''2''})');
+%!fail ('ismember (1, ''abc'')');
+%!fail ('ismember ({''1''}, {''1'', ''2''},''rows'')');
+%!fail ('ismember ([1 2 3], [5 4 3 1], ''rows'')');
 %!assert (ismember ({'foo', 'bar'}, {'foobar'}), logical ([0, 0]));
 %!assert (ismember ({'foo'}, {'foobar'}), false);
 %!assert (ismember ({'bar'}, {'foobar'}), false);
 %!assert (ismember ({'bar'}, {'foobar', 'bar'}), true);
 %!assert (ismember ({'foo', 'bar'}, {'foobar', 'bar'}), logical ([0, 1]));
 %!assert (ismember ({'xfb', 'f', 'b'}, {'fb', 'b'}), logical ([0, 0, 1]));
 %!assert (ismember ("1", "0123456789."), true);
 
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,12 @@
+2008-06-11  John W. Eaton  <jwe@octave.org>
+
+	* test_eval-catch.m, test_try.m: Fix expected output from lasterr.
+
 2008-06-02  David Bateman  <dbateman@free.fr>
 
 	* test_arith.m: Delete and move tests close to function
 	definitions.
 	* test_func.m: Also test for single precision return values.
 
 	* test_infnan.m, test_linalg.m, test_matrix.m, test_number.m):
 	Delet and move tests close to function definitions.
diff --git a/test/test_eval-catch.m b/test/test_eval-catch.m
--- a/test/test_eval-catch.m
+++ b/test/test_eval-catch.m
@@ -32,45 +32,45 @@
 %! assert (x, 1);
 
 %% FIXME This is redundant with the changes to the above
 %% test/octave.test/eval-catch/eval-catch-4.m
 
 %% test/octave.test/eval-catch/eval-catch-5.m
 %!test
 %! eval ("clear a; a; str = '';", "str=lasterr;");
-%! assert(lasterr()(1:20),"error: `a' undefined");
-%! assert(str(1:20),"error: `a' undefined");
+%! assert(lasterr()(1:13),"`a' undefined");
+%! assert(str(1:13),"`a' undefined");
 
 %% test/octave.test/eval-catch/eval-catch-6.m
 %!test
 %! eval ("error (\"user-defined error\"); str = '';", "str = lasterr;");
-%! assert(lasterr()(1:25),"error: user-defined error");
-%! assert(str(1:25),"error: user-defined error");
+%! assert(lasterr()(1:18),"user-defined error");
+%! assert(str(1:18),"user-defined error");
 
 %% test/octave.test/eval-catch/eval-catch-7.m
 %!function ms = mangle (s)
 %!  ## Wrap angle brackets around S.
 %!  ms = cstrcat ("<", s, ">");
 %!test
 %! eval ("clear a; a; str='';", "str = mangle (lasterr);");
-%! assert(mangle(lasterr)(1:21),"<error: `a' undefined");
-%! assert(str(1:21),"<error: `a' undefined");
+%! assert(mangle(lasterr)(1:14),"<`a' undefined");
+%! assert(str(1:14),"<`a' undefined");
 
 %% test/octave.test/eval-catch/eval-catch-8.m
 %!test
 %! eval ("eval (\"clear a; a;str1='';\", \"str1=lasterr;\"); clear b; b; str2='';",
 %! "str2 = lasterr;");
-%! assert(str1(1:20),"error: `a' undefined");
-%! assert(str2(1:20),"error: `b' undefined");
+%! assert(str1(1:13),"`a' undefined");
+%! assert(str2(1:13),"`b' undefined");
 
 %% test/octave.test/eval-catch/eval-catch-9.m
 %!test
 %! eval ("clear a; a; str1='';",
 %! "eval (\"clear b; b; str2='';\", \"str2=lasterr;\"); str1=lasterr;");
-%! assert(str1(1:20),"error: `b' undefined");
-%! assert(str2(1:20),"error: `b' undefined");
+%! assert(str1(1:13),"`b' undefined");
+%! assert(str2(1:13),"`b' undefined");
 
 %% test/octave.test/eval-catch/eval-catch-10.m
 %!test
 %! eval ("eval (\"clear a; a; str='';\",\"error (cstrcat (\\\"rethrow: \\\", lasterr));str='';\");",
 %! "str=lasterr;");
-%! assert(str(1:36),"error: rethrow: error: `a' undefined");
+%! assert(str(1:22),"rethrow: `a' undefined");
diff --git a/test/test_try.m b/test/test_try.m
--- a/test/test_try.m
+++ b/test/test_try.m
@@ -60,82 +60,82 @@
 
 %% test/octave.test/try/try-5.m
 %!test
 %! try
 %!   clear a;
 %!   a;
 %!   error("Shoudn't get here");
 %! catch
-%!   assert (strcmp(lasterr()(1:20), "error: `a' undefined"))
+%!   assert (strcmp(lasterr()(1:13), "`a' undefined"))
 %! end_try_catch
-%! assert (strcmp(lasterr()(1:20), "error: `a' undefined"))
+%! assert (strcmp(lasterr()(1:13), "`a' undefined"))
 
 %% test/octave.test/try/try-6.m
 %!test 
 %! try
 %!   error ("user-defined error")
 %! catch
-%!   assert(lasterr,"error: user-defined error\n");
+%!   assert(lasterr,"user-defined error");
 %! end_try_catch
 
 %% test/octave.test/try/try-7.m
 %!function ms = mangle (s)
 %!  ## Wrap angle brackets around S.
 %!  ms = cstrcat ("<", s, ">");
 %!test
 %! try
 %!   clear a
 %!   a;
 %!   error("Shoudn't get here");
 %! catch
-%!   assert(strcmp(mangle (lasterr)(1:21),"<error: `a' undefined"))
+%!   assert(strcmp(mangle (lasterr)(1:14),"<`a' undefined"))
 %! end_try_catch
 
 
 %% test/octave.test/try/try-8.m
 %!test
 %! try
 %!   try
 %!     clear a
 %!     a;
 %!     error("Shoudn't get here");
 %!   catch
-%!     assert(strcmp(lasterr()(1:20), "error: `a' undefined"))
+%!     assert(strcmp(lasterr()(1:13), "`a' undefined"))
 %!   end_try_catch
 %!   clear b
 %!   b;
 %!   error("Shoudn't get here");
 %! catch
-%!   assert(strcmp(lasterr()(1:20), "error: `b' undefined"))
+%!   assert(strcmp(lasterr()(1:13), "`b' undefined"))
 %! end_try_catch
 
 %% test/octave.test/try/try-9.m
 %!test
 %! try
 %!   clear a
 %!   a;
 %!   error("Shoudn't get here");
 %! catch
 %!   try
-%!     assert(strcmp(lasterr()(1:20), "error: `a' undefined"))
+%!     assert(strcmp(lasterr()(1:13), "`a' undefined"))
 %!     clear b
 %!     b;
 %!     error("Shoudn't get here");
 %!   catch
-%!     assert(strcmp(lasterr()(1:20), "error: `b' undefined"))
+%!     assert(strcmp(lasterr()(1:13), "`b' undefined"))
 %!   end_try_catch
 %! end_try_catch
 
 %% test/octave.test/try/try-10.m
 %!test
 %! try
 %!   try
 %!     clear a
 %!     a;
 %!     error("Shoudn't get here");
 %!   catch
 %!     error(cstrcat("rethrow: ",lasterr));
 %!   end_try_catch
 %! catch
-%!   assert(strcmp(lasterr()(1:36), "error: rethrow: error: `a' undefined"))
+%!   assert(strcmp(lasterr()(1:22), "rethrow: `a' undefined"))
 %! end_try_catch
 
