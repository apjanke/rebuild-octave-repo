# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1542917409 -3600
#      Thu Nov 22 21:10:09 2018 +0100
# Node ID 0c7a9fa169989dd7552bfcf8062c164e43de3ce4
# Parent  4d1c6c60f6b3c002d7835d48c72bbdf0ea54038d
colamd.cc: Fix segmentation fault with etree.

* colamd.cc (symetree): Don't use value from uninitialzed buffer to index array.
* colamd.cc (Fetree): Fix typo in input check. Add some BISTs.

diff --git a/libinterp/dldfcn/colamd.cc b/libinterp/dldfcn/colamd.cc
--- a/libinterp/dldfcn/colamd.cc
+++ b/libinterp/dldfcn/colamd.cc
@@ -57,23 +57,22 @@ symetree (const octave_idx_type *ridx, c
     for (octave_idx_type k = 0 ; k < n ; k++)
       Pinv[P[k]] = k;
 
   for (octave_idx_type k = 0 ; k < n ; k++)
     {
       // L(k,:) pattern: all nodes reachable in etree from nz in A(0:k-1,k)
       Parent[k] = n ;                // parent of k is not yet known
       Flag[k] = k ;                  // mark node k as visited
-      octave_idx_type kk = (P ? P[k]  // kth original, or permuted, column
-                              : (k));
+      octave_idx_type kk = (P ? P[k] : k); // kth original, or permuted, column
       octave_idx_type p2 = cidx[kk+1];
       for (octave_idx_type p = cidx[kk] ; p < p2 ; p++)
         {
           // A (i,k) is nonzero (original or permuted A)
-          octave_idx_type i = (Pinv) ? (Pinv[ridx[p]]) : (ridx[p]);
+          octave_idx_type i = (P ? Pinv[ridx[p]] : ridx[p]);
           if (i < k)
             {
               // follow path from i to root of etree, stop at flagged node
               for ( ; Flag[i] != k ; i = Parent[i])
                 {
                   // find parent of i if not yet determined
                   if (Parent[i] == n)
                     Parent[i] = k;
@@ -670,17 +669,17 @@ permutations on the tree.
 
   octave_value_list retval (nargout == 2 ? 2 : 1);
 
   octave_idx_type n_row = 0;
   octave_idx_type n_col = 0;
   octave_idx_type *ridx = nullptr;
   octave_idx_type *cidx = nullptr;
 
-  if (args(0).issparse ())
+  if (! args(0).issparse ())
     error ("etree: S must be a sparse matrix");
 
   if (args(0).iscomplex ())
     {
       SparseComplexMatrix scm = args(0).sparse_complex_matrix_value ();
 
       n_row = scm.rows ();
       n_col = scm.cols ();
@@ -751,8 +750,19 @@ permutations on the tree.
       for (octave_idx_type i = 0; i < n_col; i++)
         postorder(i) = post[i] + 1;
 
       retval(1) = postorder;
     }
 
   return retval;
 }
+
+/*
+%!assert (etree (speye (2)), [0, 0]);
+%!assert (etree (gallery ("poisson", 16)), [2:256, 0]);
+
+%!error etree ()
+%!error etree (1, 2, 3)
+%!error <S must be a sparse matrix> etree ([1, 2; 3, 4])
+%!error <TYP must be a string> etree (speye (2), 3)
+%!error <is not square> etree (sprand (2, 4, .25))
+*/
