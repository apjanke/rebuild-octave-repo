# HG changeset patch
# User Rik <rik@octave.org>
# Date 1398445330 25200
#      Fri Apr 25 10:02:10 2014 -0700
# Node ID 5bd1ca29c5f0b563a9d859b935d35611b0a70813
# Parent  1dcc9539234cff9fb9b683135565bb4c0e2fbcf3
Clean up questionable code bits identified by clang sanitize.

* data.cc (Fnorm): in %!test, don't test with a single value which exceeds
range of single.

* find.cc (find_nonzero_elem_idx): Remove unused variable assignment to
n_to_find.

* load-save.cc (Fsave): Declare argc just before usage.

* ls-hdf5.cc (hdf5_read_next_data): Return from function immediately if type is
unrecognized.

* oct-stream.cc (octave_stream::read): Eliminate unnecessary initialization of
elts_to_read.

* octave-link.cc (F__octave_link_file_dialog__): Eliminate unnecessary
initialization of nel.

* pr-output.cc (set_real_format): Don't assign to function input variable
digits.

* str2double.cc (single_num): Initialize return value num at start of function.

* ov-complex.cc (octave_complex::double_value, octave_complex::float_value):
Eliminate unnecessary initialization of retval.

* ov-flt-complex.cc (octave_float_complex::double_value,
octave_float_complex::float_value):
Eliminate unnecessary initialization of retval.

* CSparse.cc (SparseComplexMatrix::inverse): Remove useless asignment to typ.
* CSparse.cc (SparseComplexMatrix::bsolve): Initialize anorm before using in
comparison.

* MatrixType.cc (matrix_complex_probe): Initialize typ to MatrixType::Unknown.

* dSparse.cc (SparseMatrix::inverse): Remove useless assignment to typ.
* dSparse.cc (SparseMatrix::bsolve): Initialize anorm before using in
comparison.

* lo-specfun.cc (gammainc): Remove useless assignment to err.

* data-conv.cc (oct_data_conv::string_to_data_type): Remove useless assignment
to input_is_output.

* str-vec.cc (string_vector::list_in_columns): Remove useless assignment to nc.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -5348,17 +5348,17 @@ compute the norms of each column and ret
 %!assert (norm (x,1), single (20))
 %!assert (norm (x,2), single (10))
 %!assert (norm (x,3), single (8.24257059961711), -4*eps ("single"))
 %!assert (norm (x,Inf), single (7))
 %!assert (norm (x,-Inf), single (1))
 %!assert (norm (x,"inf"), single (7))
 %!assert (norm (x,"fro"), single (10), -eps ("single"))
 %!assert (norm (x), single (10))
-%!assert (norm (single ([1e200, 1])), single (1e200))
+%!assert (norm (single ([1e38, 1])), single (1e38))
 %!assert (norm (single ([3+4i, 3-4i, sqrt(31)])), single (9), -4*eps ("single"))
 %!shared m
 %! m = single (magic (4));
 %!assert (norm (m,1), single (34))
 %!assert (norm (m,2), single (34), -eps ("single"))
 %!assert (norm (m,Inf), single (34))
 %!assert (norm (m,"inf"), single (34))
 %!shared m2, flo, fhi
diff --git a/libinterp/corefcn/find.cc b/libinterp/corefcn/find.cc
--- a/libinterp/corefcn/find.cc
+++ b/libinterp/corefcn/find.cc
@@ -234,17 +234,16 @@ find_nonzero_elem_idx (const PermMatrix&
 
   octave_idx_type nc = v.cols ();
   octave_idx_type start_nc, count;
 
   // Determine the range to search.
   if (n_to_find < 0 || n_to_find >= nc)
     {
       start_nc = 0;
-      n_to_find = nc;
       count = nc;
     }
   else if (direction > 0)
     {
       start_nc = 0;
       count = n_to_find;
     }
   else
diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -1618,18 +1618,16 @@ save -binary data a b*\n\
 @noindent\n\
 saves the variable @samp{a} and all variables beginning with @samp{b} to\n\
 the file @file{data} in Octave's binary format.\n\
 @seealso{load, save_default_options, save_header_format_string, dlmread, csvread, fread}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  int argc = args.length ();
-
   string_vector argv = args.make_argv ();
 
   if (error_state)
     return retval;
 
   // Here is where we would get the default save format if it were
   // stored in a user preference variable.
 
@@ -1643,17 +1641,17 @@ the file @file{data} in Octave's binary 
 
   // get default options
   parse_save_options (Vsave_default_options, format, append, save_as_floats,
                       use_zlib);
 
   // override from command line
   argv = parse_save_options (argv, format, append, save_as_floats,
                              use_zlib);
-  argc = argv.length ();
+  int argc = argv.length ();
   int i = 0;
 
   if (error_state)
     return retval;
 
   if (i == argc)
     {
       print_usage ();
diff --git a/libinterp/corefcn/ls-hdf5.cc b/libinterp/corefcn/ls-hdf5.cc
--- a/libinterp/corefcn/ls-hdf5.cc
+++ b/libinterp/corefcn/ls-hdf5.cc
@@ -523,16 +523,17 @@ hdf5_read_next_data (hid_t group_id, con
             d->tc = octave_value_typeinfo::lookup_type ("range");
 
           H5Tclose (complex_type);
         }
       else
         {
           warning ("load: can't read '%s' (unknown datatype)", name);
           retval = 0; // unknown datatype; skip
+          return retval;
         }
 
       // check for OCTAVE_GLOBAL attribute:
       d->global = hdf5_check_attr (data_id, "OCTAVE_GLOBAL");
 
       H5Tclose (type_id);
       H5Dclose (data_id);
 
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -3307,18 +3307,17 @@ octave_stream::read (const Array<double>
 
       count = 0;
 
       get_size (size, nr, nc, one_elt_size_spec, "fread");
 
       if (! error_state)
         {
 
-          octave_idx_type elts_to_read
-            = std::numeric_limits<octave_idx_type>::max ();
+          octave_idx_type elts_to_read;
 
           if (one_elt_size_spec)
             {
               // If NR == 0, Matlab returns [](0x0).
 
               // If NR > 0, the result will be a column vector with the given
               // number of rows.
 
@@ -3337,17 +3336,19 @@ octave_stream::read (const Array<double>
 
               // If NC < 0 we have [NR, Inf] and we'll wait to decide how big NC
               // should be.
 
               if (nr == 0 || nc == 0)
                 nr = nc = 0;
             }
 
-          // FIXME: ensure that this does not overflow.
+          // FIXME: Ensure that this does not overflow.
+          //        Maybe try comparing nr * nc computed in double with
+          //        std::numeric_limits<octave_idx_type>::max ();
 
           elts_to_read = nr * nc;
 
           bool read_to_eof = elts_to_read < 0;
 
           octave_idx_type input_buf_elts = -1;
 
           if (skip == 0)
diff --git a/libinterp/corefcn/octave-link.cc b/libinterp/corefcn/octave-link.cc
--- a/libinterp/corefcn/octave-link.cc
+++ b/libinterp/corefcn/octave-link.cc
@@ -220,17 +220,17 @@ Undocumented internal function.\n\
 
       const Array<std::string> flist = args(0).cellstr_value ();
       std::string title = args(1).string_value ();
       std::string filename = args(2).string_value ();
       Matrix pos = args(3).matrix_value ();
       std::string multi_on = args(4).string_value (); // on, off, create
       std::string pathname = args(5).string_value ();
 
-      octave_idx_type nel = flist.numel ();
+      octave_idx_type nel;
       octave_link::filter_list filter_lst;
 
       for (octave_idx_type i = 0; i < flist.rows (); i++)
         filter_lst.push_back (std::make_pair (flist(i,0),
                                               (flist.columns () > 1
                                                ? flist(i,1) : "")));
 
       if (! error_state)
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -576,23 +576,21 @@ set_real_format (int digits, bool inf_or
       rd = fw;
     }
   else
     {
       if (digits > 0)
         {
           ld = digits;
           rd = prec > digits ? prec - digits : prec;
-          digits++;
         }
       else
         {
           ld = 1;
           rd = prec > digits ? prec - digits : prec;
-          digits = -digits + 1;
         }
 
       fw = 1 + ld + 1 + rd;
       if (inf_or_nan && fw < 4)
         fw = 4;
     }
 
   if (! (rat_format || bank_format || hex_format || bit_format)
diff --git a/libinterp/corefcn/str2double.cc b/libinterp/corefcn/str2double.cc
--- a/libinterp/corefcn/str2double.cc
+++ b/libinterp/corefcn/str2double.cc
@@ -40,17 +40,17 @@ along with Octave; see the file COPYING.
 
 static inline bool
 is_imag_unit (int c)
 { return c == 'i' || c == 'j'; }
 
 static double
 single_num (std::istringstream& is)
 {
-  double num;
+  double num = 0.0;
 
   char c = is.peek ();
 
   // Skip spaces.
   while (isspace (c))
     {
       is.get ();
       c = is.peek ();
diff --git a/libinterp/octave-value/ov-complex.cc b/libinterp/octave-value/ov-complex.cc
--- a/libinterp/octave-value/ov-complex.cc
+++ b/libinterp/octave-value/ov-complex.cc
@@ -100,31 +100,31 @@ octave_complex::do_index_op (const octav
   octave_value tmp (new octave_complex_matrix (complex_matrix_value ()));
 
   return tmp.do_index_op (idx, resize_ok);
 }
 
 double
 octave_complex::double_value (bool force_conversion) const
 {
-  double retval = lo_ieee_nan_value ();
+  double retval;
 
   if (! force_conversion)
     gripe_implicit_conversion ("Octave:imag-to-real",
                                "complex scalar", "real scalar");
 
   retval = std::real (scalar);
 
   return retval;
 }
 
 float
 octave_complex::float_value (bool force_conversion) const
 {
-  float retval = lo_ieee_float_nan_value ();
+  float retval;
 
   if (! force_conversion)
     gripe_implicit_conversion ("Octave:imag-to-real",
                                "complex scalar", "real scalar");
 
   retval = std::real (scalar);
 
   return retval;
diff --git a/libinterp/octave-value/ov-flt-complex.cc b/libinterp/octave-value/ov-flt-complex.cc
--- a/libinterp/octave-value/ov-flt-complex.cc
+++ b/libinterp/octave-value/ov-flt-complex.cc
@@ -84,31 +84,31 @@ octave_float_complex::do_index_op (const
   octave_value tmp (new octave_float_complex_matrix (float_complex_matrix_value ()));
 
   return tmp.do_index_op (idx, resize_ok);
 }
 
 double
 octave_float_complex::double_value (bool force_conversion) const
 {
-  double retval = lo_ieee_nan_value ();
+  double retval;
 
   if (! force_conversion)
     gripe_implicit_conversion ("Octave:imag-to-real",
                                "complex scalar", "real scalar");
 
   retval = std::real (scalar);
 
   return retval;
 }
 
 float
 octave_float_complex::float_value (bool force_conversion) const
 {
-  float retval = lo_ieee_float_nan_value ();
+  float retval;
 
   if (! force_conversion)
     gripe_implicit_conversion ("Octave:imag-to-real",
                                "complex scalar", "real scalar");
 
   retval = std::real (scalar);
 
   return retval;
diff --git a/liboctave/array/CSparse.cc b/liboctave/array/CSparse.cc
--- a/liboctave/array/CSparse.cc
+++ b/liboctave/array/CSparse.cc
@@ -1113,17 +1113,16 @@ SparseComplexMatrix::inverse (MatrixType
                                          tinverse (tmp_typ, info, rcond2,
                                                    true, false);
               ret = Q * InvL.hermitian () * InvL * Q.transpose ();
             }
           else
             {
               // Matrix is either singular or not positive definite
               mattype.mark_as_unsymmetric ();
-              typ = MatrixType::Full;
             }
         }
 
       if (!mattype.is_hermitian ())
         {
           octave_idx_type n = rows ();
           ColumnVector Qinit(n);
           for (octave_idx_type i = 0; i < n; i++)
@@ -4524,17 +4523,17 @@ SparseComplexMatrix::bsolve (MatrixType 
                   tmp_data[ii++] = 0.;
             }
 
           for (octave_idx_type j = 0; j < nc; j++)
             for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
               m_band(ridx (i) - j + n_lower + n_upper, j) = data (i);
 
           // Calculate the norm of the matrix, for later use.
-          double anorm;
+          double anorm = 0.0;
           if (calc_cond)
             {
               for (octave_idx_type j = 0; j < nr; j++)
                 {
                   double atmp = 0.;
                   for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
                     atmp += std::abs (data (i));
                   if (atmp > anorm)
@@ -4806,17 +4805,17 @@ SparseComplexMatrix::bsolve (MatrixType 
                   tmp_data[ii++] = 0.;
             }
 
           for (octave_idx_type j = 0; j < nc; j++)
             for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
               m_band(ridx (i) - j + n_lower + n_upper, j) = data (i);
 
           // Calculate the norm of the matrix, for later use.
-          double anorm;
+          double anorm = 0.0;
           if (calc_cond)
             {
               for (octave_idx_type j = 0; j < nr; j++)
                 {
                   double atmp = 0.;
                   for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
                     atmp += std::abs (data (i));
                   if (atmp > anorm)
@@ -5091,17 +5090,17 @@ SparseComplexMatrix::bsolve (MatrixType 
                   tmp_data[ii++] = 0.;
             }
 
           for (octave_idx_type j = 0; j < nc; j++)
             for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
               m_band(ridx (i) - j + n_lower + n_upper, j) = data (i);
 
           // Calculate the norm of the matrix, for later use.
-          double anorm;
+          double anorm = 0.0;
           if (calc_cond)
             {
               for (octave_idx_type j = 0; j < nr; j++)
                 {
                   double atmp = 0.;
                   for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
                     atmp += std::abs (data (i));
                   if (atmp > anorm)
@@ -5378,17 +5377,17 @@ SparseComplexMatrix::bsolve (MatrixType 
                   tmp_data[ii++] = 0.;
             }
 
           for (octave_idx_type j = 0; j < nc; j++)
             for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
               m_band(ridx (i) - j + n_lower + n_upper, j) = data (i);
 
           // Calculate the norm of the matrix, for later use.
-          double anorm;
+          double anorm = 0.0;
           if (calc_cond)
             {
               for (octave_idx_type j = 0; j < nr; j++)
                 {
                   double atmp = 0.;
                   for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
                     atmp += std::abs (data (i));
                   if (atmp > anorm)
diff --git a/liboctave/array/MatrixType.cc b/liboctave/array/MatrixType.cc
--- a/liboctave/array/MatrixType.cc
+++ b/liboctave/array/MatrixType.cc
@@ -114,17 +114,17 @@ matrix_real_probe (const MArray<T>& a)
 
   return typ;
 }
 
 template<class T>
 MatrixType::matrix_type
 matrix_complex_probe (const MArray<std::complex<T> >& a)
 {
-  MatrixType::matrix_type typ;
+  MatrixType::matrix_type typ = MatrixType::Unknown;
   octave_idx_type nrows = a.rows ();
   octave_idx_type ncols = a.cols ();
 
   const T zero = 0;
   // get the real type
 
   if (ncols == nrows)
     {
diff --git a/liboctave/array/dSparse.cc b/liboctave/array/dSparse.cc
--- a/liboctave/array/dSparse.cc
+++ b/liboctave/array/dSparse.cc
@@ -1211,17 +1211,16 @@ SparseMatrix::inverse (MatrixType &matty
               SparseMatrix InvL = fact.L ().transpose ().tinverse (tmp_typ,
                                   info, rcond2, true, false);
               ret = Q * InvL.transpose () * InvL * Q.transpose ();
             }
           else
             {
               // Matrix is either singular or not positive definite
               mattype.mark_as_unsymmetric ();
-              typ = MatrixType::Full;
             }
         }
 
       if (!mattype.is_hermitian ())
         {
           octave_idx_type n = rows ();
           ColumnVector Qinit(n);
           for (octave_idx_type i = 0; i < n; i++)
@@ -4641,17 +4640,17 @@ SparseMatrix::bsolve (MatrixType &mattyp
                   tmp_data[ii++] = 0.;
             }
 
           for (octave_idx_type j = 0; j < nc; j++)
             for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
               m_band(ridx (i) - j + n_lower + n_upper, j) = data (i);
 
           // Calculate the norm of the matrix, for later use.
-          double anorm;
+          double anorm = 0.0;
           if (calc_cond)
             {
               for (octave_idx_type j = 0; j < nr; j++)
                 {
                   double atmp = 0.;
                   for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
                     atmp += fabs (data (i));
                   if (atmp > anorm)
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -2573,22 +2573,18 @@ betainc (const Array<float>& x, const Ar
 double
 gammainc (double x, double a, bool& err)
 {
   double retval;
 
   err = false;
 
   if (a < 0.0 || x < 0.0)
-    {
-      (*current_liboctave_error_handler)
-        ("gammainc: A and X must be non-negative");
-
-      err = true;
-    }
+    (*current_liboctave_error_handler)
+      ("gammainc: A and X must be non-negative");
   else
     F77_XFCN (xgammainc, XGAMMAINC, (a, x, retval));
 
   return retval;
 }
 
 Matrix
 gammainc (double x, const Matrix& a)
@@ -2778,22 +2774,18 @@ done:
 float
 gammainc (float x, float a, bool& err)
 {
   float retval;
 
   err = false;
 
   if (a < 0.0 || x < 0.0)
-    {
-      (*current_liboctave_error_handler)
-        ("gammainc: A and X must be non-negative");
-
-      err = true;
-    }
+    (*current_liboctave_error_handler)
+      ("gammainc: A and X must be non-negative");
   else
     F77_XFCN (xsgammainc, XSGAMMAINC, (a, x, retval));
 
   return retval;
 }
 
 FloatMatrix
 gammainc (float x, const FloatMatrix& a)
diff --git a/liboctave/util/data-conv.cc b/liboctave/util/data-conv.cc
--- a/liboctave/util/data-conv.cc
+++ b/liboctave/util/data-conv.cc
@@ -404,18 +404,16 @@ oct_data_conv::string_to_data_type (cons
   if (pos != std::string::npos)
     {
       if (s[pos+1] == '>')
         {
           std::string s1;
 
           if (input_is_output)
             {
-              input_is_output = false;
-
               s1 = s.substr (1, pos-1);
 
               (*current_liboctave_warning_handler)
                 ("warning: ignoring leading * in fread precision");
             }
           else
             s1 = s.substr (0, pos);
 
diff --git a/liboctave/util/str-vec.cc b/liboctave/util/str-vec.cc
--- a/liboctave/util/str-vec.cc
+++ b/liboctave/util/str-vec.cc
@@ -245,24 +245,20 @@ string_vector::list_in_columns (std::ost
     = ((width <= 0 ? command_editor::terminal_cols () : width)
        - prefix.length ());
 
   octave_idx_type nc = line_length / max_name_length;
   if (nc == 0)
     nc = 1;
 
   // Calculate the number of rows that will be in each column except
-  // possibly  for a short column on the right.
+  // possibly for a short column on the right.
 
   octave_idx_type nr = total_names / nc + (total_names % nc != 0);
 
-  // Recalculate columns based on rows.
-
-  nc = total_names / nr + (total_names % nr != 0);
-
   octave_idx_type count;
   for (octave_idx_type row = 0; row < nr; row++)
     {
       count = row;
       octave_idx_type pos = 0;
 
       // Print the next row.
 
