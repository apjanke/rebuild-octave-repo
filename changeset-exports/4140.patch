# HG changeset patch
# User jwe
# Date 1036119194 0
#      Fri Nov 01 02:53:14 2002 +0000
# Node ID 303b28a7a7e4d486bdbc9d311cd263b19e37aaa8
# Parent  02ca908056e9ade3dd65f491b75046087aad8c78
[project @ 2002-11-01 02:53:13 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,11 +1,27 @@
 2002-10-31  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
-	* DLD-FUNCTIONS/fsolve.cc (fsolve_user_function): Print warning if
+	* DLD-FUNCTIONS/fsolve.cc (fsolve_user_function, fsolve_user_jacobian):
+	Print warning if user returns complex value.
+	* DLD-FUNCTIONS/quad.cc (quad_user_function): Likewise.
+	* DLD-FUNCTIONS/lsode.cc (lsode_user_function, lsode_user_jacobian):
+	Likewise.
+	* DLD-FUNCTIONS/dassl.cc (dassl_user_function, dassl_user_jacobian):
+	Likewise.
+	* DLD-FUNCTIONS/dasrt.cc (dasrt_user_f, dasrt_user_cf, dasrt_user_j):
+	Likewise. 
+	* DLD-FUNCTIONS/daspk.cc (daspk_user_function, daspk_user_jacobian):
+	Likewise.
+
+	* DLD-FUNCTIONS/daspk.cc (daspk_user_jacobian): New function.
+	(Fdaspk): Handle extracting Jacobian from function argument.
+
+	* DLD-FUNCTIONS/fsolve.cc (fsolve_user_function): New function.
+	(Ffsolve): Handle extracting Jacobian from function argument.
 
 	* Makefile.in (%.oct): Depend on octave$(EXEEXT) so that octave
 	will be built before any .oct files.
 	(all): Depend on stamp-oct-links.
 	(octave$(EXEEXT)): Don't depend on stamp-oct-links.
 
 	* ov-base.cc (octave_base_value::subsasgn): Handle default numeric
 	case here.
diff --git a/src/DLD-FUNCTIONS/daspk.cc b/src/DLD-FUNCTIONS/daspk.cc
--- a/src/DLD-FUNCTIONS/daspk.cc
+++ b/src/DLD-FUNCTIONS/daspk.cc
@@ -41,16 +41,23 @@ Software Foundation, 59 Temple Place - S
 #include "utils.h"
 #include "variables.h"
 
 #include "DASPK-opts.cc"
 
 // Global pointer for user defined function required by daspk.
 static octave_function *daspk_fcn;
 
+// Global pointer for optional user defined jacobian function.
+static octave_function *daspk_jac;
+
+// Have we warned about imaginary values returned from user function?
+static bool warned_fcn_imaginary = false;
+static bool warned_jac_imaginary = false;
+
 // Is this a recursive call?
 static int call_depth = 0;
 
 ColumnVector
 daspk_user_function (const ColumnVector& x, const ColumnVector& xdot,
 		     double t, int& ires)
 {
   ColumnVector retval;
@@ -94,31 +101,107 @@ daspk_user_function (const ColumnVector&
 	{
 	  gripe_user_supplied_eval ("daspk");
 	  return retval;
 	}
 
       int tlen = tmp.length ();
       if (tlen > 0 && tmp(0).is_defined ())
 	{
+	  if (! warned_fcn_imaginary && tmp(0).is_complex_type ())
+	    {
+	      warning ("daspk: ignoring imaginary part returned from user-supplied function");
+	      warned_fcn_imaginary = true;
+	    }
+
 	  retval = ColumnVector (tmp(0).vector_value ());
 
 	  if (tlen > 1)
 	    ires = tmp(1).int_value ();
 
 	  if (error_state || retval.length () == 0)
 	    gripe_user_supplied_eval ("daspk");
 	}
       else
 	gripe_user_supplied_eval ("daspk");
     }
 
   return retval;
 }
 
+Matrix
+daspk_user_jacobian (const ColumnVector& x, const ColumnVector& xdot,
+		     double t, double cj)
+{
+  Matrix retval;
+
+  int nstates = x.capacity ();
+
+  assert (nstates == xdot.capacity ());
+
+  octave_value_list args;
+
+  args(3) = cj;
+  args(2) = t;
+
+  if (nstates > 1)
+    {
+      Matrix m1 (nstates, 1);
+      Matrix m2 (nstates, 1);
+      for (int i = 0; i < nstates; i++)
+	{
+	  m1 (i, 0) = x (i);
+	  m2 (i, 0) = xdot (i);
+	}
+      octave_value state (m1);
+      octave_value deriv (m2);
+      args(1) = deriv;
+      args(0) = state;
+    }
+  else
+    {
+      double d1 = x (0);
+      double d2 = xdot (0);
+      octave_value state (d1);
+      octave_value deriv (d2);
+      args(1) = deriv;
+      args(0) = state;
+    }
+
+  if (daspk_jac)
+    {
+      octave_value_list tmp = daspk_jac->do_multi_index_op (1, args);
+
+      if (error_state)
+	{
+	  gripe_user_supplied_eval ("daspk");
+	  return retval;
+	}
+
+      int tlen = tmp.length ();
+      if (tlen > 0 && tmp(0).is_defined ())
+	{
+	  if (! warned_jac_imaginary && tmp(0).is_complex_type ())
+	    {
+	      warning ("daspk: ignoring imaginary part returned from user-supplied jacobian function");
+	      warned_jac_imaginary = true;
+	    }
+
+	  retval = tmp(0).matrix_value ();
+
+	  if (error_state || retval.length () == 0)
+	    gripe_user_supplied_eval ("daspk");
+	}
+      else
+	gripe_user_supplied_eval ("daspk");
+    }
+
+  return retval;
+}
+
 #define DASPK_ABORT() \
   do \
     { \
       unwind_protect::run_frame ("Fdaspk"); \
       return retval; \
     } \
   while (0)
 
@@ -230,34 +313,71 @@ less than zero and @var{msg} will contai
 \n\
 You can use the function @code{daspk_options} to set optional\n\
 parameters for @code{daspk}.\n\
 @end deftypefn\n\
 @seealso{dassl}")
 {
   octave_value_list retval;
 
+  warned_fcn_imaginary = false;
+  warned_jac_imaginary = false;
+
   unwind_protect::begin_frame ("Fdaspk");
 
   unwind_protect_int (call_depth);
   call_depth++;
 
   if (call_depth > 1)
     DASPK_ABORT1 ("invalid recursive call");
 
   int nargin = args.length ();
 
   if (nargin > 3 && nargin < 6)
     {
-      daspk_fcn = extract_function
-	(args(0), "daspk", "__daspk_fcn__",
-	 "function res = __daspk_fcn__ (x, xdot, t) res = ",
-	 "; endfunction");
+      daspk_fcn = 0;
+      daspk_jac = 0;
+
+      octave_value f_arg = args(0);
+
+      switch (f_arg.rows ())
+	{
+	case 1:
+	  daspk_fcn = extract_function
+	    (args(0), "daspk", "__daspk_fcn__",
+	     "function res = __daspk_fcn__ (x, xdot, t) res = ",
+	     "; endfunction");
+	  break;
+
+	case 2:
+	  {
+	    string_vector tmp = f_arg.all_strings ();
 
-      if (! daspk_fcn)
+	    if (! error_state)
+	      {
+		daspk_fcn = extract_function
+		  (tmp(0), "daspk", "__daspk_fcn__",
+		   "function res = __daspk_fcn__ (x, xdot, t) res = ",
+		   "; endfunction");
+
+		if (daspk_fcn)
+		  {
+		    daspk_jac = extract_function
+		      (tmp(1), "daspk", "__daspk_jac__",
+		       "function jac = __daspk_jac__ (x, xdot, t, cj) jac = ",
+		       "; endfunction");
+
+		    if (! daspk_jac)
+		      daspk_fcn = 0;
+		  }
+	      }
+	  }
+	}
+
+      if (error_state || ! daspk_fcn)
 	DASPK_ABORT ();
 
       ColumnVector state = ColumnVector (args(1).vector_value ());
 
       if (error_state)
 	DASPK_ABORT1 ("expecting state vector as second argument");
 
       ColumnVector deriv (args(2).vector_value ());
@@ -283,16 +403,19 @@ parameters for @code{daspk}.\n\
 	}
 
       if (state.capacity () != deriv.capacity ())
 	DASPK_ABORT1 ("x and xdot must have the same size");
 
       double tzero = out_times (0);
 
       DAEFunc func (daspk_user_function);
+      if (daspk_jac)
+	func.set_jacobian_function (daspk_user_jacobian);
+
       DASPK dae (state, deriv, tzero, func);
       dae.set_options (daspk_opts);
 
       Matrix output;
       Matrix deriv_output;
 
       if (crit_times_set)
 	output = dae.integrate (out_times, deriv_output, crit_times);
diff --git a/src/DLD-FUNCTIONS/dasrt.cc b/src/DLD-FUNCTIONS/dasrt.cc
--- a/src/DLD-FUNCTIONS/dasrt.cc
+++ b/src/DLD-FUNCTIONS/dasrt.cc
@@ -43,16 +43,21 @@ Software Foundation, 59 Temple Place - S
 
 #include "DASRT-opts.cc"
 
 // Global pointers for user defined function required by dasrt.
 static octave_function *dasrt_f;
 static octave_function *dasrt_j;
 static octave_function *dasrt_cf;
 
+// Have we warned about imaginary values returned from user function?
+static bool warned_fcn_imaginary = false;
+static bool warned_jac_imaginary = false;
+static bool warned_cf_imaginary = false;
+
 // Is this a recursive call?
 static int call_depth = 0;
 
 static ColumnVector
 dasrt_user_f (const ColumnVector& x, const ColumnVector& xprime,
 	      double t, int& ires)
 {
   ColumnVector retval;
@@ -86,16 +91,22 @@ dasrt_user_f (const ColumnVector& x, con
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("dasrt");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
 	{
+	  if (! warned_fcn_imaginary && tmp(0).is_complex_type ())
+	    {
+	      warning ("dasrt: ignoring imaginary part returned from user-supplied function");
+	      warned_fcn_imaginary = true;
+	    }
+
 	  retval = ColumnVector (tmp(0).vector_value ());
 
 	  if (error_state || retval.length () == 0)
 	    gripe_user_supplied_eval ("dasrt");
 	}
       else
 	gripe_user_supplied_eval ("dasrt");
     }
@@ -128,16 +139,22 @@ dasrt_user_cf (const ColumnVector& x, do
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("dasrt");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
 	{
+	  if (! warned_cf_imaginary && tmp(0).is_complex_type ())
+	    {
+	      warning ("dasrt: ignoring imaginary part returned from user-supplied constraint function");
+	      warned_cf_imaginary = true;
+	    }
+
 	  retval = ColumnVector (tmp(0).vector_value ());
 
 	  if (error_state || retval.length () == 0)
 	    gripe_user_supplied_eval ("dasrt");
 	}
       else
 	gripe_user_supplied_eval ("dasrt");
     }
@@ -192,16 +209,22 @@ dasrt_user_j (const ColumnVector& x, con
 	{
 	  gripe_user_supplied_eval ("dasrt");
 	  return retval;
 	}
 
       int tlen = tmp.length ();
       if (tlen > 0 && tmp(0).is_defined ())
 	{
+	  if (! warned_jac_imaginary && tmp(0).is_complex_type ())
+	    {
+	      warning ("dasrt: ignoring imaginary part returned from user-supplied jacobian function");
+	      warned_jac_imaginary = true;
+	    }
+
 	  retval = tmp(0).matrix_value ();
 
 	  if (error_state || retval.length () == 0)
 	    gripe_user_supplied_eval ("dasrt");
 	}
       else
 	gripe_user_supplied_eval ("dasrt");
     }
@@ -361,16 +384,20 @@ less than zero and @var{msg} will contai
 \n\
 You can use the function @code{dasrt_options} to set optional\n\
 parameters for @code{dasrt}.\n\
 @end deftypefn\n\
 @seealso{daspk, dasrt, lsode, odessa}")
 {
   octave_value_list retval;
 
+  warned_fcn_imaginary = false;
+  warned_jac_imaginary = false;
+  warned_cf_imaginary = false;
+
   unwind_protect::begin_frame ("Fdasrt");
 
   unwind_protect_int (call_depth);
   call_depth++;
 
   if (call_depth > 1)
     DASRT_ABORT1 ("invalid recursive call");
 
diff --git a/src/DLD-FUNCTIONS/dassl.cc b/src/DLD-FUNCTIONS/dassl.cc
--- a/src/DLD-FUNCTIONS/dassl.cc
+++ b/src/DLD-FUNCTIONS/dassl.cc
@@ -44,16 +44,20 @@ Software Foundation, 59 Temple Place - S
 #include "DASSL-opts.cc"
 
 // Global pointer for user defined function required by dassl.
 static octave_function *dassl_fcn;
 
 // Global pointer for optional user defined jacobian function.
 static octave_function *dassl_jac;
 
+// Have we warned about imaginary values returned from user function?
+static bool warned_fcn_imaginary = false;
+static bool warned_jac_imaginary = false;
+
 // Is this a recursive call?
 static int call_depth = 0;
 
 ColumnVector
 dassl_user_function (const ColumnVector& x, const ColumnVector& xdot,
 		     double t, int& ires)
 {
   ColumnVector retval;
@@ -97,16 +101,22 @@ dassl_user_function (const ColumnVector&
 	{
 	  gripe_user_supplied_eval ("dassl");
 	  return retval;
 	}
 
       int tlen = tmp.length ();
       if (tlen > 0 && tmp(0).is_defined ())
 	{
+	  if (! warned_fcn_imaginary && tmp(0).is_complex_type ())
+	    {
+	      warning ("dassl: ignoring imaginary part returned from user-supplied function");
+	      warned_fcn_imaginary = true;
+	    }
+
 	  retval = ColumnVector (tmp(0).vector_value ());
 
 	  if (tlen > 1)
 	    ires = tmp(1).int_value ();
 
 	  if (error_state || retval.length () == 0)
 	    gripe_user_supplied_eval ("dassl");
 	}
@@ -164,16 +174,22 @@ dassl_user_jacobian (const ColumnVector&
 	{
 	  gripe_user_supplied_eval ("dassl");
 	  return retval;
 	}
 
       int tlen = tmp.length ();
       if (tlen > 0 && tmp(0).is_defined ())
 	{
+	  if (! warned_jac_imaginary && tmp(0).is_complex_type ())
+	    {
+	      warning ("dassl: ignoring imaginary part returned from user-supplied jacobian function");
+	      warned_jac_imaginary = true;
+	    }
+
 	  retval = tmp(0).matrix_value ();
 
 	  if (error_state || retval.length () == 0)
 	    gripe_user_supplied_eval ("dassl");
 	}
       else
 	gripe_user_supplied_eval ("dassl");
     }
@@ -297,16 +313,19 @@ less than zero and @var{msg} will contai
 \n\
 You can use the function @code{dassl_options} to set optional\n\
 parameters for @code{dassl}.\n\
 @end deftypefn\n\
 @seealso{daspk, dasrt, lsode, odessa}")
 {
   octave_value_list retval;
 
+  warned_fcn_imaginary = false;
+  warned_jac_imaginary = false;
+
   unwind_protect::begin_frame ("Fdassl");
 
   unwind_protect_int (call_depth);
   call_depth++;
 
   if (call_depth > 1)
     DASSL_ABORT1 ("invalid recursive call");
 
diff --git a/src/DLD-FUNCTIONS/fsolve.cc b/src/DLD-FUNCTIONS/fsolve.cc
--- a/src/DLD-FUNCTIONS/fsolve.cc
+++ b/src/DLD-FUNCTIONS/fsolve.cc
@@ -41,18 +41,22 @@ Software Foundation, 59 Temple Place - S
 #include "utils.h"
 #include "variables.h"
 
 #include "NLEqn-opts.cc"
 
 // Global pointer for user defined function required by hybrd1.
 static octave_function *fsolve_fcn;
 
+// Global pointer for optional user defined jacobian function.
+static octave_function *fsolve_jac;
+
 // Have we warned about imaginary values returned from user function?
-static bool warned_imaginary = false;
+static bool warned_fcn_imaginary = false;
+static bool warned_jac_imaginary = false;
 
 // Is this a recursive call?
 static int call_depth = 0;
 
 int
 hybrd_info_to_fsolve_info (int info)
 {
   switch (info)
@@ -86,17 +90,17 @@ hybrd_info_to_fsolve_info (int info)
   return info;
 }
 
 ColumnVector
 fsolve_user_function (const ColumnVector& x)
 {
   ColumnVector retval;
 
-  int n = x.capacity ();
+  int n = x.length ();
 
   octave_value_list args;
   args.resize (1);
 
   if (n > 1)
     {
       Matrix m (n, 1);
       for (int i = 0; i < n; i++)
@@ -112,34 +116,83 @@ fsolve_user_function (const ColumnVector
     }
 
   if (fsolve_fcn)
     {
       octave_value_list tmp = fsolve_fcn->do_multi_index_op (1, args);
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
 	{
-	  if (! warned_imaginary && tmp(0).is_complex_type ())
+	  if (! warned_fcn_imaginary && tmp(0).is_complex_type ())
 	    {
 	      warning ("fsolve: ignoring imaginary part returned from user-supplied function");
-	      warned_imaginary = true;
+	      warned_fcn_imaginary = true;
 	    }
 
 	  retval = ColumnVector (tmp(0).vector_value ());
 
 	  if (error_state || retval.length () <= 0)
 	    gripe_user_supplied_eval ("fsolve");
 	}
       else
 	gripe_user_supplied_eval ("fsolve");
     }
 
   return retval;
 }
 
+Matrix
+fsolve_user_jacobian (const ColumnVector& x)
+{
+  Matrix retval;
+
+  int n = x.length ();
+
+  octave_value_list args;
+  args.resize (1);
+
+  if (n > 1)
+    {
+      Matrix m (n, 1);
+      for (int i = 0; i < n; i++)
+	m (i, 0) = x (i);
+      octave_value vars (m);
+      args(0) = vars;
+    }
+  else
+    {
+      double d = x (0);
+      octave_value vars (d);
+      args(0) = vars;
+    }
+
+  if (fsolve_fcn)
+    {
+      octave_value_list tmp = fsolve_jac->do_multi_index_op (1, args);
+
+      if (tmp.length () > 0 && tmp(0).is_defined ())
+	{
+	  if (! warned_fcn_imaginary && tmp(0).is_complex_type ())
+	    {
+	      warning ("fsolve: ignoring imaginary part returned from user-supplied jacobian function");
+	      warned_fcn_imaginary = true;
+	    }
+
+	  retval = tmp(0).matrix_value ();
+
+	  if (error_state || retval.length () <= 0)
+	    gripe_user_supplied_eval ("fsolve");
+	}
+      else
+	gripe_user_supplied_eval ("fsolve");
+    }
+
+  return retval;
+}
+
 #define FSOLVE_ABORT() \
   do \
     { \
       unwind_protect::run_frame ("Ffsolve"); \
       return retval; \
     } \
   while (0)
 
@@ -167,48 +220,88 @@ and an initial starting point @var{x0}, 
 equations such that @code{f(@var{x}) == 0}.\n\
 \n\
 You can use the function @code{fsolve_options} to set optional\n\
 parameters for @code{fsolve}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  warned_imaginary = false;
+  warned_fcn_imaginary = false;
+  warned_jac_imaginary = false;
 
   unwind_protect::begin_frame ("Ffsolve");
 
   unwind_protect_int (call_depth);
   call_depth++;
 
   if (call_depth > 1)
     FSOLVE_ABORT1 ("invalid recursive call");
 
   int nargin = args.length ();
 
   if (nargin == 2 && nargout < 4)
     {
-      fsolve_fcn = extract_function (args(0), "fsolve", "__fsolve_fcn__",
-				    "function y = __fsolve_fcn__ (x) y = ",
-				    "; endfunction");
-      if (! fsolve_fcn)
+      fsolve_fcn = 0;
+      fsolve_jac = 0;
+
+      octave_value f_arg = args(0);
+
+      switch (f_arg.rows ())
+	{
+	case 1:
+	  fsolve_fcn = extract_function
+	    (f_arg, "fsolve", "__fsolve_fcn__",
+	     "function y = __fsolve_fcn__ (x) y = ",
+	     "; endfunction");
+	  break;
+
+	case 2:
+	  {
+	    string_vector tmp = f_arg.all_strings ();
+
+	    if (! error_state)
+	      {
+		fsolve_fcn = extract_function
+		  (tmp(0), "fsolve", "__fsolve_fcn__",
+		   "function y = __fsolve_fcn__ (x) y = ",
+		   "; endfunction");
+
+		if (fsolve_fcn)
+		  {
+		    fsolve_jac = extract_function
+		      (tmp(1), "fsolve", "__fsolve_jac__",
+		       "function jac = __fsolve_jac__ (x) jac = ",
+		       "; endfunction");
+
+		    if (! fsolve_jac)
+		      fsolve_fcn = 0;
+		  }
+	      }
+	  }
+	}
+
+      if (error_state || ! fsolve_fcn)
 	FSOLVE_ABORT ();
 
       ColumnVector x (args(1).vector_value ());
 
       if (error_state)
 	FSOLVE_ABORT1 ("expecting vector as second argument");
 
       if (nargin > 3)
 	warning ("fsolve: ignoring extra arguments");
 
       if (nargout > 3)
 	warning ("fsolve: can't compute path output yet");
 
       NLFunc nleqn_fcn (fsolve_user_function);
+      if (fsolve_jac)
+	nleqn_fcn.set_jacobian_function (fsolve_user_jacobian);
+
       NLEqn nleqn (x, nleqn_fcn);
       nleqn.set_options (fsolve_opts);
 
       int info;
       ColumnVector soln = nleqn.solve (info);
 
       if (! error_state)
 	{
diff --git a/src/DLD-FUNCTIONS/lsode.cc b/src/DLD-FUNCTIONS/lsode.cc
--- a/src/DLD-FUNCTIONS/lsode.cc
+++ b/src/DLD-FUNCTIONS/lsode.cc
@@ -46,16 +46,20 @@ Software Foundation, 59 Temple Place - S
 #include "LSODE-opts.cc"
 
 // Global pointer for user defined function required by lsode.
 static octave_function *lsode_fcn;
 
 // Global pointer for optional user defined jacobian function used by lsode.
 static octave_function *lsode_jac;
 
+// Have we warned about imaginary values returned from user function?
+static bool warned_fcn_imaginary = false;
+static bool warned_jac_imaginary = false;
+
 // Is this a recursive call?
 static int call_depth = 0;
 
 ColumnVector
 lsode_user_function (const ColumnVector& x, double t)
 {
   ColumnVector retval;
 
@@ -77,16 +81,22 @@ lsode_user_function (const ColumnVector&
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("lsode");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
 	{
+	  if (! warned_fcn_imaginary && tmp(0).is_complex_type ())
+	    {
+	      warning ("lsode: ignoring imaginary part returned from user-supplied function");
+	      warned_fcn_imaginary = true;
+	    }
+
 	  retval = ColumnVector (tmp(0).vector_value ());
 
 	  if (error_state || retval.length () == 0)
 	    gripe_user_supplied_eval ("lsode");
 	}
       else
 	gripe_user_supplied_eval ("lsode");
     }
@@ -117,16 +127,22 @@ lsode_user_jacobian (const ColumnVector&
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("lsode");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
 	{
+	  if (! warned_jac_imaginary && tmp(0).is_complex_type ())
+	    {
+	      warning ("lsode: ignoring imaginary part returned from user-supplied jacobian function");
+	      warned_jac_imaginary = true;
+	    }
+
 	  retval = tmp(0).matrix_value ();
 
 	  if (error_state || retval.length () == 0)
 	    gripe_user_supplied_eval ("lsode");
 	}
       else
 	gripe_user_supplied_eval ("lsode");
     }
@@ -263,16 +279,19 @@ other than 2 and @var{msg} will contain 
 \n\
 You can use the function @code{lsode_options} to set optional\n\
 parameters for @code{lsode}.\n\
 @end deftypefn\n\
 @seealso{daspk, dassl, dasrt, odessa}")
 {
   octave_value_list retval;
 
+  warned_fcn_imaginary = false;
+  warned_jac_imaginary = false;
+
   unwind_protect::begin_frame ("Flsode");
 
   unwind_protect_int (call_depth);
   call_depth++;
 
   if (call_depth > 1)
     LSODE_ABORT1 ("invalid recursive call");
 
diff --git a/src/DLD-FUNCTIONS/odessa.cc b/src/DLD-FUNCTIONS/odessa.cc
--- a/src/DLD-FUNCTIONS/odessa.cc
+++ b/src/DLD-FUNCTIONS/odessa.cc
@@ -46,16 +46,21 @@ Software Foundation, 59 Temple Place - S
 
 #include "ODESSA-opts.cc"
 
 // Global pointer for user defined function required by odessa.
 static octave_function *odessa_f;
 static octave_function *odessa_j;
 static octave_function *odessa_b;
 
+// Have we warned about imaginary values returned from user function?
+static bool warned_fcn_imaginary = false;
+static bool warned_jac_imaginary = false;
+static bool warned_b_imaginary = false;
+
 // Is this a recursive call?
 static int call_depth = 0;
 
 static ColumnVector
 odessa_user_f (double t, const ColumnVector& x, const ColumnVector& theta)
 {
   ColumnVector retval;
 
@@ -87,16 +92,22 @@ odessa_user_f (double t, const ColumnVec
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("odessa");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
 	{
+	  if (! warned_fcn_imaginary && tmp(0).is_complex_type ())
+	    {
+	      warning ("odessa: ignoring imaginary part returned from user-supplied function");
+	      warned_fcn_imaginary = true;
+	    }
+
 	  retval = ColumnVector (tmp(0).vector_value ());
 
 	  if (error_state || retval.length () == 0)
 	    gripe_user_supplied_eval ("odessa");
 	}
       else
 	gripe_user_supplied_eval ("odessa");
     }
@@ -138,16 +149,22 @@ odessa_user_mf (double t, const ColumnVe
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("odessa");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
 	{
+	  if (! warned_jac_imaginary && tmp(0).is_complex_type ())
+	    {
+	      warning ("odessa: ignoring imaginary part returned from user-supplied jacobian function");
+	      warned_jac_imaginary = true;
+	    }
+
 	  retval = tmp(0).matrix_value ();
 
 	  if (error_state || retval.length () == 0)
 	    gripe_user_supplied_eval ("odessa");
 	}
       else
 	gripe_user_supplied_eval ("odessa");
     }
@@ -197,16 +214,22 @@ odessa_user_b (double t, const ColumnVec
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("odessa");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
 	{
+	  if (! warned_b_imaginary && tmp(0).is_complex_type ())
+	    {
+	      warning ("odessa: ignoring imaginary part returned from user-supplied inhomogeneity function");
+	      warned_b_imaginary = true;
+	    }
+
 	  retval = ColumnVector (tmp(0).vector_value ());
 
 	  if (error_state || retval.length () == 0)
 	    gripe_user_supplied_eval ("odessa");
 	}
       else
 	gripe_user_supplied_eval ("odessa");
     }
@@ -371,16 +394,20 @@ other than 2 and @var{msg} will contain 
 \n\
 You can use the function @code{lsode_options} to set optional\n\
 parameters for @code{lsode}.\n\
 @end deftypefn\n\
 @seealso{daspk, dassl, dasrt, lsode}")
 {
   octave_value_list retval;
 
+  warned_fcn_imaginary = false;
+  warned_jac_imaginary = false;
+  warned_b_imaginary = false;
+
   unwind_protect::begin_frame ("Fodessa");
 
   unwind_protect_int (call_depth);
   call_depth++;
 
   if (call_depth > 1)
     ODESSA_ABORT1 ("invalid recursive call");
 
diff --git a/src/DLD-FUNCTIONS/quad.cc b/src/DLD-FUNCTIONS/quad.cc
--- a/src/DLD-FUNCTIONS/quad.cc
+++ b/src/DLD-FUNCTIONS/quad.cc
@@ -46,16 +46,19 @@ Software Foundation, 59 Temple Place - S
 
 #if defined (quad)
 #undef quad
 #endif
 
 // Global pointer for user defined function required by quadrature functions.
 static octave_function *quad_fcn;
 
+// Have we warned about imaginary values returned from user function?
+static bool warned_imaginary = false;
+
 // Is this a recursive call?
 static int call_depth = 0;
 
 double
 quad_user_function (double x)
 {
   double retval = 0.0;
 
@@ -70,16 +73,22 @@ quad_user_function (double x)
 	{
 	  quad_integration_error = 1;  // XXX FIXME XXX
 	  gripe_user_supplied_eval ("quad");
 	  return retval;
 	}
 
       if (tmp.length () && tmp(0).is_defined ())
 	{
+	  if (! warned_imaginary && tmp(0).is_complex_type ())
+	    {
+	      warning ("quad: ignoring imaginary part returned from user-supplied function");
+	      warned_imaginary = true;
+	    }
+
 	  retval = tmp(0).double_value ();
 
 	  if (error_state)
 	    {
 	      quad_integration_error = 1;  // XXX FIXME XXX
 	      gripe_user_supplied_eval ("quad");
 	    }
 	}
@@ -151,16 +160,18 @@ required, and @var{err} contains an esti
 solution.\n\
 \n\
 You can use the function @code{quad_options} to set optional\n\
 parameters for @code{quad}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
+  warned_imaginary = false;
+
   unwind_protect::begin_frame ("Fquad");
 
   unwind_protect_int (call_depth);
   call_depth++;
 
   if (call_depth > 1)
     QUAD_ABORT1 ("invalid recursive call");
 
