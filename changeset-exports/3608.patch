# HG changeset patch
# User jwe
# Date 953110056 0
#      Wed Mar 15 08:47:36 2000 +0000
# Node ID ccfafa1d8510448728e4601c7b405f0016f8e845
# Parent  0ecd1696605dfc62e1f879c0a1b95e092aa52998
[project @ 2000-03-15 08:47:35 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2000-03-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pr-output.cc (pr_plus_format): Rename from do_plus_format.
+	Change all callers.
+	(pr_float, pr_complex): New arg, scale.  Handle scaling here.
+	(float_format): New class for managing details of formatting
+	floats.  Use it instead of character string formats and the
+	nonstandard form() function from the GNU iostream library.
+
 2000-02-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (clean): Also delete gendoc.
 
 2000-02-18  James R. Van Zandt <jrv@vanzandt.mv.com>
 
 	* load-save.cc (Vcrash_dumps_octave_core): Fix comment for this var.
 
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -68,99 +68,194 @@ static int Voutput_precision;
 // TRUE means that the dimensions of empty matrices should be printed
 // like this: x = [](2x0).
 static bool Vprint_empty_dimensions;
 
 // TRUE means that the rows of big matrices should be split into
 // smaller slices that fit on the screen.
 static bool Vsplit_long_rows;
 
-// Current format std::string for real numbers and the real part of complex
-// numbers.
-static char *curr_real_fmt = 0;
-
-// Current format std::string for the imaginary part of complex numbers.
-static char *curr_imag_fmt = 0;
-
 // TRUE means don't do any fancy formatting.
 static bool free_format = false;
 
 // TRUE means print plus sign for nonzero, blank for zero.
 static bool plus_format = false;
 
 // TRUE means always print like dollars and cents.
 static bool bank_format = false;
 
 // TRUE means print data in hexadecimal format.
-static bool hex_format = false;
+static int hex_format = 0;
 
 // TRUE means print data in binary-bit-pattern format.
 static int bit_format = 0;
 
 // TRUE means don't put newlines around the column number headers.
 static bool compact_format = false;
 
 // TRUE means use an e format.
 static bool print_e = false;
 
 // TRUE means print E instead of e for exponent field.
 static bool print_big_e = false;
 
-// XXX FIXME XXX -- these should probably be somewhere else.
+class pr_formatted_float;
+
+class
+float_format
+{
+public:
+
+  float_format (int w = 0, int p = 0, int f = 0)
+    : fw (w), prec (p), fmt (f), up (0), sp (0) { }
+
+  float_format (const float_format& ff)
+    : fw (ff.fw), prec (ff.prec), fmt (ff.fmt), up (ff.up), sp (ff.sp) { }
+
+  float_format& operator = (const float_format& ff)
+    {
+      if (&ff != this)
+	{
+	  fw = ff.fw;
+	  prec = ff.prec;
+	  fmt = ff.fmt;
+	  up = ff.up;
+	  sp = ff.sp;
+	}
+
+      return *this;
+    }
+
+  ~float_format (void) { }
+
+  float_format& scientific (void) { fmt = std::ios::scientific; return *this; }
+  float_format& fixed (void) { fmt = std::ios::fixed; return *this; }
+  float_format& general (void) { fmt = 0; return *this; }
+
+  float_format& uppercase (void) { up = std::ios::uppercase; return *this; }
+  float_format& lowercase (void) { up = 0; return *this; }
+
+  float_format& precision (int p) { prec = p; return *this; }
+
+  float_format& width (int w) { fw = w; return *this; }
+
+  float_format& trailing_zeros (bool tz = true)
+    { sp = tz ? std::ios::showpoint : 0; return *this; }
+
+  friend std::ostream& operator << (std::ostream& os,
+				    const pr_formatted_float& pff);
+
+private:
+
+  // Field width.  Zero means as wide as necessary.
+  int fw;
+
+  // Precision.
+  int prec;
+
+  // Format.
+  int fmt;
+
+  // E or e.
+  int up;
+
+  // Show trailing zeros.
+  int sp;
+};
+
+class
+pr_formatted_float
+{
+public:
+
+  const float_format& f;
+
+  double val;
+
+  pr_formatted_float (const float_format& f_arg, double val_arg)
+    : f (f_arg), val (val_arg) { }
+};
+
+std::ostream&
+operator << (std::ostream& os, const pr_formatted_float& pff)
+{
+  if (pff.f.fw > 0)
+    os << std::setw (pff.f.fw);
+
+  if (pff.f.prec > 0)
+    os << std::setprecision (pff.f.prec);
+
+  std::ios::fmtflags oflags = os.flags (pff.f.fmt | pff.f.up | pff.f.sp);
+
+  os << pff.val;
+
+  os.flags (oflags);
+
+  return os;
+}
+
+// Current format for real numbers and the real part of complex
+// numbers.
+static float_format *curr_real_fmt = 0;
+
+// Current format for the imaginary part of complex numbers.
+static float_format *curr_imag_fmt = 0;
 
 static double
 pr_max_internal (const Matrix& m)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
   double result = -DBL_MAX;
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       {
-	double val = m (i, j);
+	double val = m(i,j);
 	if (xisinf (val) || xisnan (val))
 	  continue;
 
 	if (val > result)
 	  result = val;
       }
+
   return result;
 }
 
 static double
 pr_min_internal (const Matrix& m)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
   double result = DBL_MAX;
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       {
-	double val = m (i, j);
+	double val = m(i,j);
 	if (xisinf (val) || xisnan (val))
 	  continue;
 
 	if (val < result)
 	  result = val;
       }
+
   return result;
 }
 
 // XXX FIXME XXX -- it would be nice to share more code among these
 // functions,..
 
 static void
 set_real_format (bool sign, int digits, bool inf_or_nan, bool nan_or_int,
 		 int &fw)
 {
-  static char fmt_buf[128];
+  static float_format fmt;
 
   int prec = Voutput_precision;
 
   int ld, rd;
 
   if (bank_format)
     {
       fw = digits < 0 ? 4 : digits + 3;
@@ -215,27 +310,25 @@ set_real_format (bool sign, int digits, 
       if (digits > 100)
 	exp_field++;
 
       fw = 2 + prec + exp_field;
       if (inf_or_nan && fw < 3)
 	fw = 3;
       fw += sign;
 
+      fmt = float_format (fw, prec - 1, std::ios::scientific);
+
       if (print_big_e)
-	sprintf (fmt_buf, "%%%d.%dE", fw, prec - 1);
-      else
-	sprintf (fmt_buf, "%%%d.%de", fw, prec - 1);
+	fmt.uppercase ();
     }
   else
-    {
-      sprintf (fmt_buf, "%%%d.%df", fw, rd);
-    }
+    fmt = float_format (fw, rd, std::ios::fixed);
 
-  curr_real_fmt = &fmt_buf[0];
+  curr_real_fmt = &fmt;
 }
 
 static void
 set_format (double d, int& fw)
 {
   curr_real_fmt = 0;
   curr_imag_fmt = 0;
 
@@ -262,17 +355,17 @@ set_format (double d)
   int fw;
   set_format (d, fw);
 }
 
 static void
 set_real_matrix_format (bool sign, int x_max, int x_min,
 			bool inf_or_nan, int int_or_inf_or_nan, int& fw)
 {
-  static char fmt_buf[128];
+  static float_format fmt;
 
   int prec = Voutput_precision;
 
   int ld, rd;
 
   if (bank_format)
     {
       int digits = x_max > x_min ? x_max : x_min;
@@ -356,27 +449,25 @@ set_real_matrix_format (bool sign, int x
       if (x_max > 100 || x_min > 100)
 	exp_field++;
 
       fw = 2 + prec + exp_field;
       if (inf_or_nan && fw < 3)
 	fw = 3;
       fw += sign;
 
+      fmt = float_format (fw, prec - 1, std::ios::scientific);
+
       if (print_big_e)
-	sprintf (fmt_buf, "%%%d.%dE", fw, prec - 1);
-      else
-	sprintf (fmt_buf, "%%%d.%de", fw, prec - 1);
+	fmt.uppercase ();
     }
   else
-    {
-      sprintf (fmt_buf, "%%%d.%df", fw, rd);
-    }
+    fmt = float_format (fw, rd, std::ios::fixed);
 
-  curr_real_fmt = &fmt_buf[0];
+  curr_real_fmt = &fmt;
 }
 
 static void
 set_format (const Matrix& m, int& fw, double& scale)
 {
   curr_real_fmt = 0;
   curr_imag_fmt = 0;
 
@@ -412,18 +503,18 @@ set_format (const Matrix& m)
   double scale;
   set_format (m, fw, scale);
 }
 
 static void
 set_complex_format (bool sign, int x_max, int x_min, int r_x,
 		    bool inf_or_nan, int int_only, int& r_fw, int& i_fw)
 {
-  static char r_fmt_buf[128];
-  static char i_fmt_buf[128];
+  static float_format r_fmt;
+  static float_format i_fmt;
 
   int prec = Voutput_precision;
 
   int ld, rd;
 
   if (bank_format)
     {
       int digits = r_x;
@@ -501,35 +592,33 @@ set_complex_format (bool sign, int x_max
       if (x_max > 100 || x_min > 100)
 	exp_field++;
 
       i_fw = r_fw = 1 + prec + exp_field;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
       r_fw += sign;
 
+      r_fmt = float_format (r_fw, prec - 1, std::ios::scientific);
+      i_fmt = float_format (i_fw, prec - 1, std::ios::scientific);
+
       if (print_big_e)
 	{
-	  sprintf (r_fmt_buf, "%%%d.%dE", r_fw, prec - 1);
-	  sprintf (i_fmt_buf, "%%%d.%dE", i_fw, prec - 1);
-	}
-      else
-	{
-	  sprintf (r_fmt_buf, "%%%d.%de", r_fw, prec - 1);
-	  sprintf (i_fmt_buf, "%%%d.%de", i_fw, prec - 1);
+	  r_fmt.uppercase ();
+	  i_fmt.uppercase ();
 	}
     }
   else
     {
-      sprintf (r_fmt_buf, "%%%d.%df", r_fw, rd);
-      sprintf (i_fmt_buf, "%%%d.%df", i_fw, rd);
+      r_fmt = float_format (r_fw, rd, std::ios::fixed);
+      i_fmt = float_format (i_fw, rd, std::ios::fixed);
     }
 
-  curr_real_fmt = &r_fmt_buf[0];
-  curr_imag_fmt = &i_fmt_buf[0];
+  curr_real_fmt = &r_fmt;
+  curr_imag_fmt = &i_fmt;
 }
 
 static void
 set_format (const Complex& c, int& r_fw, int& i_fw)
 {
   curr_real_fmt = 0;
   curr_imag_fmt = 0;
 
@@ -578,18 +667,18 @@ set_format (const Complex& c)
   set_format (c, r_fw, i_fw);
 }
 
 static void
 set_complex_matrix_format (bool sign, int x_max, int x_min,
 			   int r_x_max, int r_x_min, bool inf_or_nan,
 			   int int_or_inf_or_nan, int& r_fw, int& i_fw)
 {
-  static char r_fmt_buf[128];
-  static char i_fmt_buf[128];
+  static float_format r_fmt;
+  static float_format i_fmt;
 
   int prec = Voutput_precision;
 
   int ld, rd;
 
   if (bank_format)
     {
       int digits = r_x_max > r_x_min ? r_x_max : r_x_min;
@@ -676,35 +765,33 @@ set_complex_matrix_format (bool sign, in
       if (x_max > 100 || x_min > 100)
 	exp_field++;
 
       i_fw = r_fw = 1 + prec + exp_field;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
       r_fw += sign;
 
+      r_fmt = float_format (r_fw, prec - 1, std::ios::scientific);
+      i_fmt = float_format (i_fw, prec - 1, std::ios::scientific);
+
       if (print_big_e)
 	{
-	  sprintf (r_fmt_buf, "%%%d.%dE", r_fw, prec - 1);
-	  sprintf (i_fmt_buf, "%%%d.%dE", i_fw, prec - 1);
-	}
-      else
-	{
-	  sprintf (r_fmt_buf, "%%%d.%de", r_fw, prec - 1);
-	  sprintf (i_fmt_buf, "%%%d.%de", i_fw, prec - 1);
+	  r_fmt.uppercase ();
+	  i_fmt.uppercase ();
 	}
     }
   else
     {
-      sprintf (r_fmt_buf, "%%%d.%df", r_fw, rd);
-      sprintf (i_fmt_buf, "%%%d.%df", i_fw, rd);
+      r_fmt = float_format (r_fw, rd, std::ios::fixed);
+      i_fmt = float_format (i_fw, rd, std::ios::fixed);
     }
 
-  curr_real_fmt = &r_fmt_buf[0];
-  curr_imag_fmt = &i_fmt_buf[0];
+  curr_real_fmt = &r_fmt;
+  curr_imag_fmt = &i_fmt;
 }
 
 static void
 set_format (const ComplexMatrix& cm, int& r_fw, int& i_fw, double& scale)
 {
   curr_real_fmt = 0;
   curr_imag_fmt = 0;
 
@@ -754,20 +841,19 @@ static inline void
 set_format (const ComplexMatrix& cm)
 {
   int r_fw, i_fw;
   double scale;
   set_format (cm, r_fw, i_fw, scale);
 }
 
 static void
-set_range_format (bool sign, int x_max, int x_min, int all_ints,
-		  int& fw)
+set_range_format (bool sign, int x_max, int x_min, int all_ints, int& fw)
 {
-  static char fmt_buf[128];
+  static float_format fmt;
 
   int prec = Voutput_precision;
 
   int ld, rd;
 
   if (bank_format)
     {
       int digits = x_max > x_min ? x_max : x_min;
@@ -836,27 +922,25 @@ set_range_format (bool sign, int x_max, 
 	  || (! Vfixed_point_format && fw > Voutput_max_field_width)))
     {
       int exp_field = 4;
       if (x_max > 100 || x_min > 100)
 	exp_field++;
 
       fw = sign + 2 + prec + exp_field;
 
+      fmt = float_format (fw, prec - 1, std::ios::scientific);
+
       if (print_big_e)
-	sprintf (fmt_buf, "%%%d.%dE", fw, prec - 1);
-      else
-	sprintf (fmt_buf, "%%%d.%de", fw, prec - 1);
+	fmt.uppercase ();
     }
   else
-    {
-      sprintf (fmt_buf, "%%%d.%df", fw, rd);
-    }
+    fmt = float_format (fw, rd, std::ios::fixed);
 
-  curr_real_fmt = &fmt_buf[0];
+  curr_real_fmt = &fmt;
 }
 
 static void
 set_format (const Range& r, int& fw, double& scale)
 {
   curr_real_fmt = 0;
   curr_imag_fmt = 0;
 
@@ -937,17 +1021,17 @@ union equiv
       stmp[6] = (ctmp & 0x40) ? '1' : '0'; \
       stmp[7] = (ctmp & 0x80) ? '1' : '0'; \
       stmp[8] = '\0'; \
       os << stmp; \
     } \
   while (0)
 
 static void
-pr_any_float (const char *fmt, std::ostream& os, double d, int fw = 0)
+pr_any_float (const float_format *fmt, std::ostream& os, double d, int fw = 0)
 {
 #if defined (SCO)
   // Apparently on some SCO systems NaN == -0.0 is true.  Compiler bug?
   if (d == -0.0 && ! xisnan (d))
     d = 0.0;
 #else
   if (d == -0.0)
     d = 0.0;
@@ -970,18 +1054,18 @@ pr_any_float (const char *fmt, std::ostr
 	  // interrupted before resetting the format flags and fill
 	  // character?
 
 	  oct_mach_info::float_format flt_fmt =
 	    oct_mach_info::native_float_format ();
 
 	  char ofill = os.fill ('0');
 
-	  std::ios::fmtflags oflags = os.setf (std::ios::right);
-	  os.setf (std::ios::hex, std::ios::basefield);
+	  std::ios::fmtflags oflags
+	    = os.flags (std::ios::right | std::ios::hex);
 
 	  if (hex_format > 1
 	      || flt_fmt == oct_mach_info::ieee_big_endian
 	      || flt_fmt == oct_mach_info::cray
 	      || flt_fmt == oct_mach_info::unknown)
 	    {
 	      for (size_t i = 0; i < sizeof (double); i++)
 		os << std::setw (2) << static_cast<int> (tmp.i[i]);
@@ -1046,42 +1130,50 @@ pr_any_float (const char *fmt, std::ostr
       else if (xisnan (d))
 	{
 	  if (fw > 0)
 	    os << std::setw (fw) << "NaN";
 	  else
 	    os << "NaN";
 	}
       else
-	os.form (fmt, d);
+	os << pr_formatted_float (*fmt, d);
     }
   else
     os << d;
 }
 
 static inline void
-pr_float (std::ostream& os, double d, int fw = 0)
+pr_float (std::ostream& os, double d, int fw = 0, double scale = 1.0)
 {
+  if (Vfixed_point_format && scale != 1.0)
+    d /= scale;
+
   pr_any_float (curr_real_fmt, os, d, fw);
 }
 
 static inline void
 pr_imag_float (std::ostream& os, double d, int fw = 0)
 {
   pr_any_float (curr_imag_fmt, os, d, fw);
 }
 
 static void
-pr_complex (std::ostream& os, const Complex& c, int r_fw = 0, int i_fw = 0)
+pr_complex (std::ostream& os, const Complex& c, int r_fw = 0,
+	    int i_fw = 0, double scale = 1.0)
 {
-  double r = c.real ();
+  Complex tmp = (Vfixed_point_format && scale != 1.0) ? c / scale : c;
+
+  double r = tmp.real ();
+
   pr_float (os, r, r_fw);
+
   if (! bank_format)
     {
-      double i = c.imag ();
+      double i = tmp.imag ();
       if (! (hex_format || bit_format) && i < 0)
 	{
 	  os << " - ";
 	  i = -i;
 	  pr_imag_float (os, i, i_fw);
 	}
       else
 	{
@@ -1154,62 +1246,62 @@ pr_col_num_header (std::ostream& os, int
 	os << " Columns " << col + 1 << " through " << lim << ":\n";
 
       if (! compact_format)
 	os << "\n";
     }
 }
 
 static inline void
-do_plus_format (std::ostream& os, double d)
+pr_plus_format (std::ostream& os, double d)
 {
   if (d == 0.0)
     os << " ";
   else if (d < 0.0)
     os << "-";
   else
     os << "+";
 }
 
 void
 octave_print_internal (std::ostream& os, double d, bool pr_as_read_syntax)
 {
   if (plus_format)
     {
-      do_plus_format (os, d);
+      pr_plus_format (os, d);
     }
   else
     {
       set_format (d);
       if (free_format)
 	os << d;
       else
 	pr_float (os, d);
     }
 }
 
 void
-octave_print_internal (std::ostream& os, const Matrix& m, bool pr_as_read_syntax,
-		       int extra_indent)
+octave_print_internal (std::ostream& os, const Matrix& m,
+		       bool pr_as_read_syntax, int extra_indent)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
   if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
     {
       for (int i = 0; i < nr; i++)
 	{
 	  for (int j = 0; j < nc; j++)
 	    {
 	      if (j == 0)
 		os << "  ";
 
-	      do_plus_format (os, m (i, j));
+	      pr_plus_format (os, m(i,j));
 	    }
 
 	  if (i < nr - 1)
 	    os << "\n";
 	}
     }
   else
     {
@@ -1265,17 +1357,17 @@ octave_print_internal (std::ostream& os,
 		      else
 			{
 			  if (j > col && j < lim)
 			    os << ", ";
 			  else
 			    os << "  ";
 			}
 
-		      pr_float (os, m (i, j));
+		      pr_float (os, m(i,j));
 		    }
 
 		  col += inc;
 
 		  if (col >= nc)
 		    {
 		      if (i == nr - 1)
 			os << " ]";
@@ -1301,56 +1393,53 @@ octave_print_internal (std::ostream& os,
 	      for (int i = 0; i < nr; i++)
 		{
 		  os << std::setw (extra_indent) << "";
 
 		  for (int j = col; j < lim; j++)
 		    {
 		      os << "  ";
 
-		      double tmp = (Vfixed_point_format && scale != 1.0)
-			? m(i,j) / scale : m(i,j);
-
-		      pr_float (os, tmp, fw);
+		      pr_float (os, m(i,j), fw, scale);
 		    }
 
 		  if (i < nr - 1)
 		    os << "\n";
 		}
 	    }
 	}
     }
 }
 
 static inline void
-do_plus_format (std::ostream& os, const Complex& c)
+pr_plus_format (std::ostream& os, const Complex& c)
 {
   double rp = c.real ();
   double ip = c.imag ();
 
   if (rp == 0.0)
     {
       if (ip == 0.0)
 	os << " ";
       else
 	os << "i";
     }
   else if (ip == 0.0)
-    do_plus_format (os, rp);
+    pr_plus_format (os, rp);
   else
     os << "c";
 }
 
 void
 octave_print_internal (std::ostream& os, const Complex& c,
 		       bool pr_as_read_syntax)
 {
   if (plus_format)
     {
-      do_plus_format (os, c);
+      pr_plus_format (os, c);
     }
   else
     {
       set_format (c);
       if (free_format)
 	os << c;
       else
 	pr_complex (os, c);
@@ -1370,17 +1459,17 @@ octave_print_internal (std::ostream& os,
     {
       for (int i = 0; i < nr; i++)
 	{
 	  for (int j = 0; j < nc; j++)
 	    {
 	      if (j == 0)
 		os << "  ";
 
-	      do_plus_format (os, cm (i, j));
+	      pr_plus_format (os, cm(i,j));
 	    }
 
 	  if (i < nr - 1)
 	    os << "\n";
 	}
     }
   else
     {
@@ -1437,17 +1526,17 @@ octave_print_internal (std::ostream& os,
 		      else
 			{
 			  if (j > col && j < lim)
 			    os << ", ";
 			  else
 			    os << "  ";
 			}
 
-		      pr_complex (os, cm (i, j));
+		      pr_complex (os, cm(i,j));
 		    }
 
 		  col += inc;
 
 		  if (col >= nc)
 		    {
 		      if (i == nr - 1)
 			os << " ]";
@@ -1473,20 +1562,17 @@ octave_print_internal (std::ostream& os,
 	      for (int i = 0; i < nr; i++)
 		{
 		  os << std::setw (extra_indent) << "";
 
 		  for (int j = col; j < lim; j++)
 		    {
 		      os << "  ";
 
-		      Complex tmp = (Vfixed_point_format && scale != 1.0)
-			? cm(i,j) / scale : cm(i,j);
-
-		      pr_complex (os, tmp, r_fw, i_fw);
+		      pr_complex (os, cm(i,j), r_fw, i_fw, scale);
 		    }
 
 		  if (i < nr - 1) 
 		    os << "\n";
 		}
 	    }
 	}
     }
@@ -1578,20 +1664,17 @@ octave_print_internal (std::ostream& os,
 	      os << std::setw (extra_indent) << "";
 
 	      for (int i = col; i < lim; i++)
 		{
 		  double val = base + i * increment;
 
 		  os << "  ";
 
-		  if (Vfixed_point_format && scale != 1.0)
-		    val /= scale;
-
-		  pr_float (os, val, fw);
+		  pr_float (os, val, fw, scale);
 		}
 
 	      col += inc;
 
 	      if (col < num_elem)
 		os << "\n";
 	    }
 	}
@@ -1681,17 +1764,17 @@ Note that the output from @code{disp} al
 }
 
 static void
 init_format_state (void)
 {
   free_format = false;
   plus_format = false;
   bank_format = false;
-  hex_format = false;
+  hex_format = 0;
   bit_format = 0;
   print_e = false;
   print_big_e = false;
 }
 
 static void
 set_output_prec_and_fw (int prec, int fw)
 {
@@ -1764,17 +1847,17 @@ set_format_style (int argc, const string
 	  else
 	    init_format_state ();
 
 	  set_output_prec_and_fw (15, 24);
 	}
       else if (arg == "hex")
 	{
 	  init_format_state ();
-	  hex_format = true;
+	  hex_format = 1;
 	}
       else if (arg == "native-hex")
 	{
 	  init_format_state ();
 	  hex_format = 2;
 	}
       else if (arg == "bit")
 	{
