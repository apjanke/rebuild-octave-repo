# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1411231405 14400
#      Sat Sep 20 12:43:25 2014 -0400
# Node ID 56bc1464ec597d7a658d88ce7955b829f1d24a01
# Parent  bb20384acf7b8ec554a26ba01cb9d111ceca05cc
Implement "isa" for classdef objects.

* ov.h (octave_value::is_instance_of): New method.
* ov-base.h (octave_base_value::is_instance_of): Likewise.
* ov-class.h (octave_class::is_instance_of): New method declaration.
* ov-class.cc (octave_class::is_instance_of): Implement it with
find_parent_class.
* ov-classdef.h (octave_classdef::is_instance_of): New method
declaration.
* ov-classdef.cc (octave_classdef::is_instance_of): Implement it
with lookup_class and is_superclass.

diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -578,16 +578,19 @@ public:
   virtual string_vector parent_class_names (void) const;
 
   virtual octave_base_value *find_parent_class (const std::string&)
   { return 0; }
 
   virtual octave_base_value *unique_parent_class (const std::string&)
   { return 0; }
 
+  virtual bool is_instance_of (const std::string&) const
+  { return false; }
+
   virtual octave_function *function_value (bool silent = false);
 
   virtual octave_user_function *user_function_value (bool silent = false);
 
   virtual octave_user_script *user_script_value (bool silent = false);
 
   virtual octave_user_code *user_code_value (bool silent = false);
 
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -1010,16 +1010,45 @@ octave_class::unique_parent_class (const
               break;
             }
         }
     }
 
   return retval;
 }
 
+bool
+octave_class::is_instance_of (const std::string& cls_name) const
+{
+  bool retval = false;
+
+  if (cls_name == class_name ())
+    retval = true;
+  else
+    {
+      for (std::list<std::string>::const_iterator pit = parent_list.begin ();
+           pit != parent_list.end ();
+           pit++)
+        {
+          octave_map::const_iterator smap = map.seek (*pit);
+
+          const Cell& tmp = map.contents (smap);
+
+          const octave_value& vtmp = tmp(0);
+
+          retval = vtmp.is_instance_of (cls_name);
+
+          if (retval)
+            break;
+        }
+    }
+
+  return retval;
+}
+
 string_vector
 octave_class::all_strings (bool pad) const
 {
   string_vector retval;
 
   octave_value meth = symbol_table::find_method ("char", class_name ());
 
   if (meth.is_defined ())
@@ -1957,17 +1986,17 @@ belongs to.\n\
   boolNDArray matches (cls.dims (), false);
   const octave_idx_type n = cls.numel ();
   for (octave_idx_type idx = 0; idx < n; idx++)
     {
       const std::string cl = cls(idx);
       if ((cl == "float"   && obj.is_float_type   ()) ||
           (cl == "integer" && obj.is_integer_type ()) ||
           (cl == "numeric" && obj.is_numeric_type ()) ||
-          obj.class_name () == cl || obj.find_parent_class (cl))
+          obj.class_name () == cl || obj.is_instance_of (cl))
         matches(idx) = true;
     }
   return octave_value (matches);
 }
 
 /*
 %!assert (isa ("char", "float"), false)
 %!assert (isa (logical (1), "float"), false)
diff --git a/libinterp/octave-value/ov-class.h b/libinterp/octave-value/ov-class.h
--- a/libinterp/octave-value/ov-class.h
+++ b/libinterp/octave-value/ov-class.h
@@ -162,16 +162,18 @@ public:
 
   string_vector parent_class_names (void) const
   { return string_vector (parent_list); }
 
   octave_base_value *find_parent_class (const std::string&);
 
   octave_base_value *unique_parent_class (const std::string&);
 
+  bool is_instance_of (const std::string&) const;
+
   string_vector all_strings (bool pad) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1083,16 +1083,27 @@ octave_classdef::print_with_name (std::o
 
       indent (os);
       meth.execute (args, 0, true, "display");
     }
   else
     octave_base_value::print_with_name (os, name, print_padding);
 }
 
+bool
+octave_classdef::is_instance_of (const std::string& cls_name) const
+{
+  cdef_class cls = lookup_class (cls_name, false, false);
+
+  if (cls.ok ())
+    return is_superclass (cls, object.get_class ());
+
+  return false;
+}
+
 //----------------------------------------------------------------------------
 
 class octave_classdef_meta : public octave_function
 {
 public:
   octave_classdef_meta (const cdef_meta_object& obj)
     : object (obj) { }
 
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -1417,16 +1417,18 @@ public:
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
   void print_with_name (std::ostream& os, const std::string& name,
                         bool print_padding = true);
 
+  bool is_instance_of (const std::string& cls_name) const;
+
   octave_value_list subsref (const std::string& type,
                              const std::list<octave_value_list>& idx,
                              int nargout);
 
   octave_value subsref (const std::string& type,
                         const std::list<octave_value_list>& idx)
     {
       octave_value_list retval = subsref (type, idx, 1);
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -910,16 +910,19 @@ public:
 
   string_vector parent_class_names (void) const
   { return rep->parent_class_names (); }
 
   octave_base_value *
   find_parent_class (const std::string& parent_class_name)
   { return rep->find_parent_class (parent_class_name); }
 
+  bool is_instance_of (const std::string& cls_name) const
+  { return rep->is_instance_of (cls_name); }
+
   octave_function *function_value (bool silent = false) const;
 
   octave_user_function *user_function_value (bool silent = false) const;
 
   octave_user_script *user_script_value (bool silent = false) const;
 
   octave_user_code *user_code_value (bool silent = false) const;
 
