# HG changeset patch
# User dbateman
# Date 1138708667 0
#      Tue Jan 31 11:57:47 2006 +0000
# Node ID 2c66c36d2698676ee17d0d09fa75f748f095c36c
# Parent  dfa2da0563e5e93dd6539ccdda8e56331c3c5af3
[project @ 2006-01-31 11:57:47 by dbateman]

diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.497 $)
+AC_REVISION($Revision: 1.498 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -836,17 +836,17 @@ if test "$with_ccolamd" = yes; then
     if test "$with_ccolamd" = yes; then
       AC_DEFINE(HAVE_CCOLAMD, 1, [Define if the CCOLAMD library is used.])
       warn_ccolamd=
     fi
     break])
 fi 
 
 if test -n "$warn_ccolamd"; then
-  AC_MSG_WARN($warn_colamd)
+  AC_MSG_WARN($warn_ccolamd)
 fi
 
 CHOLMOD_LIBS=
 AC_SUBST(CHOLMOD_LIBS)
 
 AC_ARG_WITH(cholmod,
   [  --without-cholmod       don't use CHOLMOD, disable some sparse functionality],
   with_cholmod=$withval, with_cholmod=yes)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,23 @@
+2006-01-21  David Bateman  <dbateman@free.fr>
+
+        * sparse-sort.cc (bool octave_sparse_sidxl_comp): 64-bit fix.
+        (bool octave_idx_vector_comp): New function.
+        (template class octave_sort<octave_idx_vector_sort *>): Instantiate
+        indexed idx_vector sorting function.
+        * sparse-sort.h (class octave_sparse_sort_idxl): 64-bit fix.
+        (class octave_idx_vector_sort): New class for indexed idx_vector
+        sorting.
+        (bool octave_idx_vector_comp): Declaration.
+        * Sparse.cc (int assign1(Sparse<LT>&, Sparse<RT>&)): Treat cases of
+        unordered LHS indexes in assignment using new octave_idx_vector_sort
+        class.
+        (int assign(Sparse<LT>&, Sparse<RT>&)): ditto.
+
 2006-01-30  John W. Eaton  <jwe@octave.org>
 
 	* so-array.h (streamoff_array::nnz): New funtion.
 	* boolNDArray.h (boolNDArray::nnz): New function.
 	* MArrayN.h (MArrayN<T>::nnz): New function.
 	* MArray.h (MArray<T>::nnz): New function.
 
 2006-01-04  David Bateman  <dbateman@free.fr>
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -1933,40 +1933,78 @@ assign1 (Sparse<LT>& lhs, const Sparse<R
       lhs.clear_index ();
       return 0;
     }
 
   octave_idx_type nr = lhs.rows ();
   octave_idx_type nc = lhs.cols ();
   octave_idx_type nz = lhs.nnz ();
 
-  octave_idx_type n = lhs_idx.freeze (lhs_len, "vector", true, liboctave_wrore_flag);
+  octave_idx_type n = lhs_idx.freeze (lhs_len, "vector", true, 
+				      liboctave_wrore_flag);
 
   if (n != 0)
     {
       octave_idx_type max_idx = lhs_idx.max () + 1;
       max_idx = max_idx < lhs_len ? lhs_len : max_idx;
 
       // Take a constant copy of lhs. This means that elem won't 
       // create missing elements.
       const Sparse<LT> c_lhs (lhs);
 
       if (rhs_len == n)
 	{
 	  octave_idx_type new_nnz = lhs.nnz ();
 
+	  OCTAVE_LOCAL_BUFFER (octave_idx_type, rhs_idx, n);
+	  if (! lhs_idx.is_colon ())
+	    {
+	      // Ok here we have to be careful with the indexing,
+	      // to treat cases like "a([3,2,1]) = b", and still 
+	      // handle the need for strict sorting of the sparse 
+	      // elements.
+	      OCTAVE_LOCAL_BUFFER (octave_idx_vector_sort *, sidx, n);
+	      OCTAVE_LOCAL_BUFFER (octave_idx_vector_sort, sidxX, n);
+
+	      for (octave_idx_type i = 0; i < n; i++)
+		{
+		  sidx[i] = &sidxX[i];
+		  sidx[i]->i = lhs_idx.elem(i);
+		  sidx[i]->idx = i;
+		}
+			  
+	      OCTAVE_QUIT;
+	      octave_sort<octave_idx_vector_sort *> 
+		sort (octave_idx_vector_comp);
+
+	      sort.sort (sidx, n);
+
+	      intNDArray<octave_idx_type> new_idx (dim_vector (n,1));
+
+	      for (octave_idx_type i = 0; i < n; i++)
+		{
+		  new_idx.xelem(i) = sidx[i]->i + 1;
+		  rhs_idx[i] = sidx[i]->idx;
+		}
+
+	      lhs_idx = idx_vector (new_idx);
+	    }
+	  else
+	    for (octave_idx_type i = 0; i < n; i++)
+	      rhs_idx[i] = i;
+
 	  // First count the number of non-zero elements
 	  for (octave_idx_type i = 0; i < n; i++)
 	    {
 	      OCTAVE_QUIT;
 
 	      octave_idx_type ii = lhs_idx.elem (i);
 	      if (ii < lhs_len && c_lhs.elem(ii) != LT ())
 		new_nnz--;
-	      if (rhs.elem(i) != RT ())
+	      if (rhs.elem(rhs_idx[i]) != RT ())
 		new_nnz++;
 	    }
 
 	  if (nr > 1)
 	    {
 	      Sparse<LT> tmp (max_idx, 1, new_nnz);
 	      tmp.cidx(0) = 0;
 	      tmp.cidx(1) = tmp.nnz ();
@@ -1987,17 +2025,17 @@ assign1 (Sparse<LT>& lhs, const Sparse<R
 		    {
 		      tmp.xdata (kk) = c_lhs.data (i);
 		      tmp.xridx (kk++) = ii;
 		      if (++i < nz)
 			ii = c_lhs.ridx(i);
 		    }
 		  else
 		    {
-		      RT rtmp = rhs.elem (j);
+		      RT rtmp = rhs.elem (rhs_idx[j]);
 		      if (rtmp != RT ())
 			{
 			  tmp.xdata (kk) = rtmp;
 			  tmp.xridx (kk++) = jj;
 			}
 
 		      if (ii == jj && i < nz)
 			if (++i < nz)
@@ -2026,52 +2064,56 @@ assign1 (Sparse<LT>& lhs, const Sparse<R
 
 	      while (j < n || i < nz)
 		{
 		  if (j == n || (i < nz && ii < jj))
 		    {
 		      while (ic <= ii)
 			tmp.xcidx (ic++) = kk;
 		      tmp.xdata (kk) = c_lhs.data (i);
+		      tmp.xridx (kk++) = 0;
 		      i++;
 		      while (ii < nc && c_lhs.cidx(ii+1) <= i)
 			ii++;
 		    }
 		  else
 		    {
 		      while (ic <= jj)
 			tmp.xcidx (ic++) = kk;
 
-		      RT rtmp = rhs.elem (j);
+		      RT rtmp = rhs.elem (rhs_idx[j]);
 		      if (rtmp != RT ())
-			tmp.xdata (kk) = rtmp;
+			{
+			  tmp.xdata (kk) = rtmp;
+			  tmp.xridx (kk++) = 0;
+			}
 		      if (ii == jj)
 			{
 			  i++;
 			  while (ii < nc && c_lhs.cidx(ii+1) <= i)
 			    ii++;
 			}
 		      j++;
 		      if (j < n)
 			jj = lhs_idx.elem(j);
 		    }
-		  tmp.xridx (kk++) = 0;
 		}
 
 	      for (octave_idx_type iidx = ic; iidx < max_idx+1; iidx++)
 		tmp.xcidx(iidx) = kk;
 
 	      lhs = tmp;
 	    }
 	}
       else if (rhs_len == 1)
 	{
 	  octave_idx_type new_nnz = lhs.nnz ();
 	  RT scalar = rhs.elem (0);
 	  bool scalar_non_zero = (scalar != RT ());
+	  lhs_idx.sort (true);
 
 	  // First count the number of non-zero elements
 	  if (scalar != RT ())
 	    new_nnz += n;
 	  for (octave_idx_type i = 0; i < n; i++)
 	    {
 	      OCTAVE_QUIT;
 
@@ -2255,22 +2297,20 @@ assign (Sparse<LT>& lhs, const Sparse<RT
   if (n_idx > 1)
     idx_j = tmp[1];
 
   if (n_idx > 0)
     idx_i = tmp[0];
 
   if (n_idx == 2)
     {
-      octave_idx_type n = idx_i.freeze (lhs_nr, "row", true, liboctave_wrore_flag);
-      idx_i.sort (true);
-
-      octave_idx_type m = idx_j.freeze (lhs_nc, "column", true, liboctave_wrore_flag);
-      idx_j.sort (true);
-
+      octave_idx_type n = idx_i.freeze (lhs_nr, "row", true, 
+					liboctave_wrore_flag);
+      octave_idx_type m = idx_j.freeze (lhs_nc, "column", true, 
+					liboctave_wrore_flag);
 
       int idx_i_is_colon = idx_i.is_colon ();
       int idx_j_is_colon = idx_j.is_colon ();
 
       if (idx_i_is_colon)
 	n = lhs_nr > 0 ? lhs_nr : rhs_nr;
 
       if (idx_j_is_colon)
@@ -2286,24 +2326,27 @@ assign (Sparse<LT>& lhs, const Sparse<RT
 	    {
 	      if (rhs_nr == 1 && rhs_nc == 1 && n >= 0 && m >= 0)
 		{
 		  // No need to do anything if either of the indices
 		  // are empty.
 
 		  if (n > 0 && m > 0)
 		    {
+		      idx_i.sort (true);
+		      idx_j.sort (true);
+
 		      octave_idx_type max_row_idx = idx_i_is_colon ? rhs_nr : 
 			idx_i.max () + 1;
 		      octave_idx_type max_col_idx = idx_j_is_colon ? rhs_nc : 
 			idx_j.max () + 1;
-		      octave_idx_type new_nr = max_row_idx > lhs_nr ? max_row_idx : 
-			lhs_nr;
-		      octave_idx_type new_nc = max_col_idx > lhs_nc ? max_col_idx : 
-			lhs_nc;
+		      octave_idx_type new_nr = max_row_idx > lhs_nr ? 
+			max_row_idx : lhs_nr;
+		      octave_idx_type new_nc = max_col_idx > lhs_nc ? 
+			max_col_idx : lhs_nc;
 		      RT scalar = rhs.elem (0, 0);
 
 		      // Count the number of non-zero terms
 		      octave_idx_type new_nnz = lhs.nnz ();
 		      for (octave_idx_type j = 0; j < m; j++)
 			{
 			  octave_idx_type jj = idx_j.elem (j);
 			  if (jj < lhs_nc)
@@ -2394,20 +2437,98 @@ assign (Sparse<LT>& lhs, const Sparse<RT
 	      else if (n == rhs_nr && m == rhs_nc)
 		{
 		  if (n > 0 && m > 0)
 		    {
 		      octave_idx_type max_row_idx = idx_i_is_colon ? rhs_nr : 
 			idx_i.max () + 1;
 		      octave_idx_type max_col_idx = idx_j_is_colon ? rhs_nc : 
 			idx_j.max () + 1;
-		      octave_idx_type new_nr = max_row_idx > lhs_nr ? max_row_idx : 
-			lhs_nr;
-		      octave_idx_type new_nc = max_col_idx > lhs_nc ? max_col_idx : 
-			lhs_nc;
+		      octave_idx_type new_nr = max_row_idx > lhs_nr ?
+			max_row_idx : lhs_nr;
+		      octave_idx_type new_nc = max_col_idx > lhs_nc ? 
+			max_col_idx : lhs_nc;
+
+		      OCTAVE_LOCAL_BUFFER (octave_idx_type, rhs_idx_i, n);
+		      if (! idx_i.is_colon ())
+			{
+			  // Ok here we have to be careful with the indexing,
+			  // to treat cases like "a([3,2,1],:) = b", and still 
+			  // handle the need for strict sorting of the sparse 
+			  // elements.
+			  OCTAVE_LOCAL_BUFFER (octave_idx_vector_sort *,
+					       sidx, n);
+			  OCTAVE_LOCAL_BUFFER (octave_idx_vector_sort,
+					       sidxX, n);
+
+			  for (octave_idx_type i = 0; i < n; i++)
+			    {
+			      sidx[i] = &sidxX[i];
+			      sidx[i]->i = idx_i.elem(i);
+			      sidx[i]->idx = i;
+			    }
+			  
+			  OCTAVE_QUIT;
+			  octave_sort<octave_idx_vector_sort *> 
+			    sort (octave_idx_vector_comp);
+
+			  sort.sort (sidx, n);
+
+			  intNDArray<octave_idx_type> new_idx (dim_vector (n,1));
+
+			  for (octave_idx_type i = 0; i < n; i++)
+			    {
+			      new_idx.xelem(i) = sidx[i]->i + 1;
+			      rhs_idx_i[i] = sidx[i]->idx;
+			    }
+
+			  idx_i = idx_vector (new_idx);
+			}
+		      else
+			for (octave_idx_type i = 0; i < n; i++)
+			  rhs_idx_i[i] = i;
+
+		      OCTAVE_LOCAL_BUFFER (octave_idx_type, rhs_idx_j, m);
+		      if (! idx_j.is_colon ())
+			{
+			  // Ok here we have to be careful with the indexing,
+			  // to treat cases like "a([3,2,1],:) = b", and still 
+			  // handle the need for strict sorting of the sparse 
+			  // elements.
+			  OCTAVE_LOCAL_BUFFER (octave_idx_vector_sort *,
+					       sidx, m);
+			  OCTAVE_LOCAL_BUFFER (octave_idx_vector_sort,
+					       sidxX, m);
+
+			  for (octave_idx_type i = 0; i < m; i++)
+			    {
+			      sidx[i] = &sidxX[i];
+			      sidx[i]->i = idx_j.elem(i);
+			      sidx[i]->idx = i;
+			    }
+			  
+			  OCTAVE_QUIT;
+			  octave_sort<octave_idx_vector_sort *> 
+			    sort (octave_idx_vector_comp);
+
+			  sort.sort (sidx, m);
+
+			  intNDArray<octave_idx_type> new_idx (dim_vector (m,1));
+
+			  for (octave_idx_type i = 0; i < m; i++)
+			    {
+			      new_idx.xelem(i) = sidx[i]->i + 1;
+			      rhs_idx_j[i] = sidx[i]->idx;
+			    }
+
+			  idx_j = idx_vector (new_idx);
+			}
+		      else
+			for (octave_idx_type i = 0; i < m; i++)
+			  rhs_idx_j[i] = i;
 
 		      // Count the number of non-zero terms
 		      octave_idx_type new_nnz = lhs.nnz ();
 		      for (octave_idx_type j = 0; j < m; j++)
 			{
 			  octave_idx_type jj = idx_j.elem (j);
 			  for (octave_idx_type i = 0; i < n; i++)
 			    {
@@ -2425,17 +2546,17 @@ assign (Sparse<LT>& lhs, const Sparse<RT
 					  if (lhs.ridx(k) == ii)
 					    new_nnz--;
 					  if (lhs.ridx(k) >= ii)
 					    break;
 					}
 				    }
 				}
 			      
-			      if (rhs.elem(i,j) != RT ())
+			      if (rhs.elem(rhs_idx_i[i],rhs_idx_j[j]) != RT ())
 				new_nnz++;
 			    }
 			}
 
 		      Sparse<LT> stmp (new_nr, new_nc, new_nnz);
 
 		      octave_idx_type jji = 0;
 		      octave_idx_type jj = idx_j.elem (jji);
@@ -2448,17 +2569,18 @@ assign (Sparse<LT>& lhs, const Sparse<RT
 			      octave_idx_type iii = 0;
 			      octave_idx_type ii = idx_i.elem (iii);
 			      for (octave_idx_type i = 0; i < new_nr; i++)
 				{
 				  OCTAVE_QUIT;
 
 				  if (iii < n && ii == i)
 				    {
-				      RT rtmp = rhs.elem (iii, jji);
+				      RT rtmp = rhs.elem (rhs_idx_i[iii], 
+							  rhs_idx_j[jji]);
 				      if (rtmp != RT ())
 					{
 					  stmp.data(kk) = rtmp;
 					  stmp.ridx(kk++) = i;
 					}
 				      if (++iii < n)
 					ii = idx_i.elem(iii);
 				    }
@@ -2524,18 +2646,18 @@ assign (Sparse<LT>& lhs, const Sparse<RT
   else if (n_idx == 1)
     {
       int lhs_is_empty = lhs_nr == 0 || lhs_nc == 0;
 
       if (lhs_is_empty || (lhs_nr == 1 && lhs_nc == 1))
 	{
 	  octave_idx_type lhs_len = lhs.length ();
 
-	  octave_idx_type n = idx_i.freeze (lhs_len, 0, true, liboctave_wrore_flag);
-	  idx_i.sort (true);
+	  octave_idx_type n = idx_i.freeze (lhs_len, 0, true, 
+					    liboctave_wrore_flag);
 
 	  if (idx_i)
 	    {
 	      if (rhs_nr == 0 && rhs_nc == 0)
 		{
 		  if (n != 0 && (lhs_nr != 0 || lhs_nc != 0))
 		    lhs.maybe_delete_elements (idx_i);
 		}
@@ -2565,31 +2687,29 @@ assign (Sparse<LT>& lhs, const Sparse<RT
 		    retval = 0;
 		}
 	    }
 	  // idx_vector::freeze() printed an error message for us.
 	}
       else if (lhs_nr == 1)
 	{
 	  idx_i.freeze (lhs_nc, "vector", true, liboctave_wrore_flag);
-	  idx_i.sort (true);
 
 	  if (idx_i)
 	    {
 	      if (rhs_nr == 0 && rhs_nc == 0)
 		lhs.maybe_delete_elements (idx_i);
 	      else if (! assign1 ((Sparse<LT>&) lhs, (Sparse<RT>&) rhs))
 		retval = 0;
 	    }
 	  // idx_vector::freeze() printed an error message for us.
 	}
       else if (lhs_nc == 1)
 	{
 	  idx_i.freeze (lhs_nr, "vector", true, liboctave_wrore_flag);
-	  idx_i.sort (true);
 
 	  if (idx_i)
 	    {
 	      if (rhs_nr == 0 && rhs_nc == 0)
 		lhs.maybe_delete_elements (idx_i);
 	      else if (! assign1 ((Sparse<LT>&) lhs, (Sparse<RT>&) rhs))
 		retval = 0;
 	    }
@@ -2603,17 +2723,16 @@ assign (Sparse<LT>& lhs, const Sparse<RT
 			&& idx_i.orig_rows () == lhs_nr
 			&& idx_i.orig_columns () == lhs_nc)))
 	    (*current_liboctave_warning_handler)
 	      ("single index used for matrix");
 
 	  octave_idx_type lhs_len = lhs.length ();
 
 	  octave_idx_type len = idx_i.freeze (lhs_nr * lhs_nc, "matrix");
-	  idx_i.sort (true);
 
 	  if (idx_i)
 	    {
 	      // Take a constant copy of lhs. This means that elem won't 
 	      // create missing elements.
 	      const Sparse<LT> c_lhs (lhs);
 
 	      if (rhs_nr == 0 && rhs_nc == 0)
@@ -2623,26 +2742,65 @@ assign (Sparse<LT>& lhs, const Sparse<RT
 		  if (! ((rhs_nr == 1 && rhs_nc == 1)
 			 || (rhs_nr == 0 || rhs_nc == 0)))
 		    (*current_liboctave_error_handler)
 		      ("A([]) = X: X must be an empty matrix or scalar");
 		}
 	      else if (len == rhs_nr * rhs_nc)
 		{
 		  octave_idx_type new_nnz = lhs_nz;
+		  OCTAVE_LOCAL_BUFFER (octave_idx_type, rhs_idx, len);
+		  
+		  if (! idx_i.is_colon ())
+		    {
+		      // Ok here we have to be careful with the indexing, to
+		      // treat cases like "a([3,2,1]) = b", and still handle
+		      // the need for strict sorting of the sparse elements.
+
+		      OCTAVE_LOCAL_BUFFER (octave_idx_vector_sort *, sidx, 
+					   len);
+		      OCTAVE_LOCAL_BUFFER (octave_idx_vector_sort, sidxX, 
+					   len);
+
+		      for (octave_idx_type i = 0; i < len; i++)
+			{
+			  sidx[i] = &sidxX[i];
+			  sidx[i]->i = idx_i.elem(i);
+			  sidx[i]->idx = i;
+			}
+
+		      OCTAVE_QUIT;
+		      octave_sort<octave_idx_vector_sort *> 
+			sort (octave_idx_vector_comp);
+
+		      sort.sort (sidx, len);
+
+		      intNDArray<octave_idx_type> new_idx (dim_vector (len,1));
+
+		      for (octave_idx_type i = 0; i < len; i++)
+			{
+			  new_idx.xelem(i) = sidx[i]->i + 1;
+			  rhs_idx[i] = sidx[i]->idx;
+			}
+
+		      idx_i = idx_vector (new_idx);
+		    }
+		  else
+		    for (octave_idx_type i = 0; i < len; i++)
+		      rhs_idx[i] = i;
 
 		  // First count the number of non-zero elements
 		  for (octave_idx_type i = 0; i < len; i++)
 		    {
 		      OCTAVE_QUIT;
 		      
 		      octave_idx_type ii = idx_i.elem (i);
 		      if (ii < lhs_len && c_lhs.elem(ii) != LT ())
 			new_nnz--;
-		      if (rhs.elem(i) != RT ())
+		      if (rhs.elem(rhs_idx[i]) != RT ())
 			new_nnz++;
 		    }
 
 		  Sparse<LT> stmp (lhs_nr, lhs_nc, new_nnz);
 
 		  octave_idx_type i = 0;
 		  octave_idx_type ii = 0;
 		  octave_idx_type ic = 0;
@@ -2674,17 +2832,17 @@ assign (Sparse<LT>& lhs, const Sparse<RT
 			    ic++;
 			  if (i < lhs_nz)
 			    ii = ic * lhs_nr + c_lhs.ridx(i);
 			}
 		      else
 			{
 			  while (kc <= jc)
 			    stmp.xcidx (kc++) = kk;
-			  RT rtmp = rhs.elem (j);
+			  RT rtmp = rhs.elem (rhs_idx[j]);
 			  if (rtmp != RT ())
 			    {
 			      stmp.xdata (kk) = rtmp;
 			      stmp.xridx (kk++) = jr;
 			    }
 			  if (ii == jj)
 			    {
 			      i++;
@@ -2699,25 +2857,25 @@ assign (Sparse<LT>& lhs, const Sparse<RT
 			      jj = idx_i.elem (j);
 			      jr = jj % lhs_nr;
 			      jc = (jj - jr) / lhs_nr;
 			    }
 			}
 		    }
 
 		  for (octave_idx_type iidx = kc; iidx < lhs_nc+1; iidx++)
-		    stmp.xcidx(iidx) = kk;
-		  
+		    stmp.xcidx(iidx) = kk; 
 
 		  lhs = stmp;
 		}
 	      else if (rhs_nr == 1 && rhs_nc == 1)
 		{
 		  RT scalar = rhs.elem (0, 0);
 		  octave_idx_type new_nnz = lhs_nz;
+		  idx_i.sort (true);
 
 		  // First count the number of non-zero elements
 		  if (scalar != RT ())
 		    new_nnz += len;
 		  for (octave_idx_type i = 0; i < len; i++)
 		    {
 		      OCTAVE_QUIT;
 		      octave_idx_type ii = idx_i.elem (i);
diff --git a/liboctave/sparse-sort.cc b/liboctave/sparse-sort.cc
--- a/liboctave/sparse-sort.cc
+++ b/liboctave/sparse-sort.cc
@@ -34,27 +34,39 @@ Boston, MA 02110-1301, USA.
 // A simple class and instantiation of the octave merge sort class
 // to sort sparse data before matrix creation. This is significantly
 // faster than using octave_qsort.
 
 bool
 octave_sparse_sidxl_comp (octave_sparse_sort_idxl* i, 
 			  octave_sparse_sort_idxl* j)
 {
-  int tmp = i->c - j->c;
+  octave_idx_type tmp = i->c - j->c;
   if (tmp < 0)
     return true;
   else if (tmp > 0)
     return false;
   return  (i->r < j->r);
 }
 
 // Instantiate the sparse sorting class
 template class octave_sort<octave_sparse_sort_idxl *>;
 
+// Need to know the original order of the sorted indexes in
+// sparse assignments, and this class does that
+bool
+octave_idx_vector_comp (octave_idx_vector_sort* i,
+			octave_idx_vector_sort* j)
+{
+  return (i->i < j->i);
+}
+
+// Instantiate the sparse index sorting class
+template class octave_sort<octave_idx_vector_sort *>;
+
 // Instantiate the sorting class of octave_idx_type, need in MUL macro
 template class octave_sort<octave_idx_type>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/sparse-sort.h b/liboctave/sparse-sort.h
--- a/liboctave/sparse-sort.h
+++ b/liboctave/sparse-sort.h
@@ -23,24 +23,35 @@ Boston, MA 02110-1301, USA.
 #if !defined (octave_sparse_sort_h)
 #define octave_sparse_sort_h
 
 #include "oct-sort.h"
 
 class
 octave_sparse_sort_idxl
 {
- public:
-  unsigned int r;
-  unsigned int c;
-  unsigned int idx; 
+public:
+  octave_idx_type r;
+  octave_idx_type c;
+  octave_idx_type idx; 
 };
 
 bool octave_sparse_sidxl_comp (octave_sparse_sort_idxl* i,
 			       octave_sparse_sort_idxl* j);
 
+class
+octave_idx_vector_sort
+{
+public:
+  octave_idx_type i;
+  octave_idx_type idx;
+};
+
+bool octave_idx_vector_comp (octave_idx_vector_sort* i,
+			     octave_idx_vector_sort* j);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2006-01-31  Kim Hansen  <kim@i9.dk>
+
+	* __glpk__.cc (F_glpk__): Fix for sparse matrices.
+
 2006-01-30  John W. Eaton  <jwe@octave.org>
 
 	* gripes.cc (gripe_wrong_type_arg (const char*, const char*, bool)):
 	New function.
 	(gripe_wrong_type_arg (const char*, const std::string&, bool)):
 	Define using const char*, const char*, bool version.
 	(gripe_wrong_type_arg (const char*, const octave_value&, bool)):
 	Define using const char*, const std::string&, bool version.
diff --git a/src/DLD-FUNCTIONS/__glpk__.cc b/src/DLD-FUNCTIONS/__glpk__.cc
--- a/src/DLD-FUNCTIONS/__glpk__.cc
+++ b/src/DLD-FUNCTIONS/__glpk__.cc
@@ -477,17 +477,17 @@ You should be using using the @code{glpk
 		  a(nz) = A(i,j);
 		}
 	    }
 	}
 
     }
   else
     {
-      SparseMatrix A (args(1).matrix_value ()); // get the sparse matrix
+      SparseMatrix A = args(1).sparse_matrix_value (); // get the sparse matrix
 
       if (error_state)
 	{
 	  error ("__glpk__: invalid value of A");
 	  return retval;
 	}
 
       mrowsA = A.rows ();
@@ -504,17 +504,17 @@ You should be using using the @code{glpk
 	}
 
       for (octave_idx_type j = 0; j < Anc; j++)
 	for (octave_idx_type i = A.cidx(j); i < A.cidx(j+1); i++)
 	  {
 	    nz++;
 	    rn(nz) = A.ridx(i) + 1;
 	    cn(nz) = j + 1;
-	    a(nz) = A(i,j);
+	    a(nz) = A.data(i);
 	  }
     }
 
   //-- 3rd Input. A column array containing the right-hand side value
   //	           for each constraint in the constraint matrix.
   Matrix B (args(2).matrix_value ());
 
   if (error_state)
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,13 @@
+2006-01-21  David Bateman  <dbateman@free.fr>
+
+        * build_sparsetest.sh: Add new un-ordered indexing, assignment and
+        deletion tests.
+
 2006-01-13  Bill Denney  <bill@givebillmoney.com>
 
 	* test_system.m: Use filesep instead of "/" where needed.
 
 2005-12-14  David Bateman  <dbateman@free.fr>
 
 	* build_sparse_tests.sh: New script to build sparse matrix tests.
 	* fntests.m: New script to run the octave test code, with "make check".
diff --git a/test/build_sparse_tests.sh b/test/build_sparse_tests.sh
--- a/test/build_sparse_tests.sh
+++ b/test/build_sparse_tests.sh
@@ -767,24 +767,52 @@ gen_select_tests() {
     cat >>$TESTS <<EOF
 %!test as=sparse(af);
 
 %% Point tests
 %!test idx=ridx(:)+rows(as)*(cidx(:)-1);
 %!assert(sparse(as(idx),true),sparse(af(idx),true));
 %!assert(as(idx),sparse(af(idx),true));
 %!assert(as(idx'),sparse(af(idx'),true));
+%!assert(as(flipud(idx(:))),sparse(af(flipud(idx(:))),true))
 %!assert(as([idx,idx]),sparse(af([idx,idx]),true));
 %!error(as(reshape([idx;idx],[1,length(idx),2])));
 
 %% Slice tests
 %!assert(as(ridx,cidx), sparse(af(ridx,cidx),true))
 %!assert(as(ridx,:), sparse(af(ridx,:),true))
 %!assert(as(:,cidx), sparse(af(:,cidx),true))
 %!assert(as(:,:), sparse(af(:,:),true))
+%!assert(as((size(as,1):-1:1),:),sparse(af((size(af,1):-1:1),:),true))
+%!assert(as(:,(size(as,2):-1:1)),sparse(af(:,(size(af,2):-1:1)),true))
+
+%% Assignment test
+%!test
+%! ts=as;ts(:,:)=ts(fliplr(1:size(as,1)),:);
+%! tf=af;tf(:,:)=tf(fliplr(1:size(af,1)),:);
+%! assert(ts,sparse(tf,true));
+%!test
+%! ts=as;ts(fliplr(1:size(as,1)),:)=ts;
+%! tf=af;tf(fliplr(1:size(af,1)),:)=tf;
+%! assert(ts,sparse(tf,true));
+%!test
+%! ts=as;ts(:,fliplr(1:size(as,2)))=ts;
+%! tf=af;tf(:,fliplr(1:size(af,2)))=tf;
+%! assert(ts,sparse(tf,true));
+%!test
+%! ts(fliplr(1:size(as,1)))=as(:,1);tf(fliplr(1:size(af,1)))=af(:,1);
+%! assert(ts,sparse(tf,true));
+
+%% Deletion tests
+%!test
+%! ts=as;ts(1,:)=[];tf=af;tf(1,:)=[];
+%! assert(ts,sparse(tf,true));
+%!test
+%! ts=as;ts(:,1)=[];tf=af;tf(:,1)=[];
+%! assert(ts,sparse(tf,true));
 
 %% Test 'end' keyword
 %!assert(as(end),af(end))
 %!assert(as(1,end), af(1,end))
 %!assert(as(end,1), af(end,1))
 %!assert(as(end,end), af(end,end))
 %!assert(as(2:end,2:end), sparse(af(2:end,2:end),true))
 %!assert(as(1:end-1,1:end-1), sparse(af(1:end-1,1:end-1),true))
