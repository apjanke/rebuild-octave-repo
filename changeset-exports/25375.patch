# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1526344919 14400
#      Mon May 14 20:41:59 2018 -0400
# Branch stable
# Node ID 2f3a66d7cf8a1e71bab6ef45ee1455922588566e
# Parent  c8f49ee7a6870ea0caddaeed4026d7f8ba7e50d4
also preserve temporaries in indexing expressions (bug #53844)

* pt-eval.cc (tree_evaluator::visit_index_expression):
Also defer deletion of base_expr_val.

diff --git a/libinterp/parse-tree/pt-arg-list.cc b/libinterp/parse-tree/pt-arg-list.cc
--- a/libinterp/parse-tree/pt-arg-list.cc
+++ b/libinterp/parse-tree/pt-arg-list.cc
@@ -258,17 +258,17 @@ namespace octave
                 args.push_back (tmp);
 
                 // Defer deletion of any temporary values until the end
                 // of the containing statement.  That way destructors
                 // for temporary classdef handle objects will be called
                 // when it is safe to do so.
                 //
                 // FIXME: We could further limit this action to classdef
-                // handle objects, but we don't currently have a
+                // handle objects, but we don't currently have an
                 // octave_value predicate for that so should add it on
                 // the default branch, not stable.
 
                 if (! is_assignment)
                   tw->defer_deletion (tmp);
               }
           }
         else
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -1365,16 +1365,26 @@ namespace octave
                   }
               }
           }
       }
 
     if (base_expr_val.is_undefined ())
       base_expr_val = evaluate (expr);
 
+    // Defer deletion of any temporary values until the end of the
+    // containing statement.  That way destructors for temporary
+    // classdef handle objects will be called when it is safe to do so.
+    //
+    // FIXME: We could further limit this action to classdef handle
+    // objects, but we don't currently have an octave_value predicate for
+    // that so should add it on the default branch, not stable.
+
+    defer_deletion (base_expr_val);
+
     // If we are indexing an object or looking at something like
     //
     //   classname.static_function (args, ...);
     //
     // then we'll just build a complete index list for one big subsref
     // call.  If the expression we are indexing is a classname then
     // base_expr_val will be an octave_classdef_meta object.  If we have
     // files in a +packagename folder, they will also be an
