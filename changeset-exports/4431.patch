# HG changeset patch
# User jwe
# Date 1055951230 0
#      Wed Jun 18 15:47:10 2003 +0000
# Node ID c4bde1d5eb984d62a2d3db9c381409e4c30f3531
# Parent  1541c3ed2c93621ee540dacd766e59cfa487aa30
[project @ 2003-06-18 15:47:09 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2003-06-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dMatrix.cc (any_element_is_negative): If new optional arg
+	neg_zero is true, also return true for negative zero.
+
 2003-06-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DASSL.cc (DASSL::do_integrate): Set liw to 21 + n, not 20 + n.
 	Handle step limit.
 	* DASSL-opts.in: New option for step limit.
 
 2003-06-16  Per Persson <persquare@mac.com>
 
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -1979,25 +1979,35 @@ Matrix::apply (d_d_Mapper f)
 
   for (int i = 0; i < length (); i++)
     d[i] = f (d[i]);
 
   return *this;
 }
 
 bool
-Matrix::any_element_is_negative (void) const
+Matrix::any_element_is_negative (bool neg_zero) const
 {
   int nr = rows ();
   int nc = cols ();
 
-  for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      if (elem (i, j) < 0.0)
-	return true;
+  if (neg_zero)
+    {
+      for (int j = 0; j < nc; j++)
+	for (int i = 0; i < nr; i++)
+	  if (lo_ieee_signbit (elem (i, j)))
+	    return true;
+    }
+  else
+    {
+      for (int j = 0; j < nc; j++)
+	for (int i = 0; i < nr; i++)
+	  if (elem (i, j) < 0)
+	    return true;
+    }
 
   return false;
 }
 
 
 bool
 Matrix::any_element_is_inf_or_nan (void) const
 {
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -189,17 +189,17 @@ public:
 
   // other operations
 
   Matrix map (d_d_Mapper f) const;
   boolMatrix map (b_d_Mapper f) const;
 
   Matrix& apply (d_d_Mapper f);
 
-  bool any_element_is_negative (void) const;
+  bool any_element_is_negative (bool = false) const;
   bool any_element_is_inf_or_nan (void) const;
   bool all_elements_are_int_or_inf_or_nan (void) const;
   bool all_integers (double& max_val, double& min_val) const;
   bool too_large_for_float (void) const;
  
   boolMatrix all (int dim = -1) const;
   boolMatrix any (int dim = -1) const;
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2003-06-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pr-output.cc (set_format (const Matrix&, int&, double&)): Ask
+	any_element_is_negative to return true for negative zero as well.
+	(set_format (const ComplexMatrix&, int&, int&, double&)): Likewise.
+
 2003-06-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* toplev.cc (main_loop): Set octave_interrupt_hook and
 	octave_bad_alloc_hook to unwind_protect::run_all here.
 	(recover_from_exception): Don't call unwind_protect::run_all here.
 
 	* pt-except.cc (do_catch_code): Return immediately if
 	octave_interrupt_immediately is nonzero.
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -478,17 +478,17 @@ static void
 set_format (const Matrix& m, int& fw, double& scale)
 {
   curr_real_fmt = 0;
   curr_imag_fmt = 0;
 
   if (free_format)
     return;
 
-  bool sign = m.any_element_is_negative ();
+  bool sign = m.any_element_is_negative (true);
 
   bool inf_or_nan = m.any_element_is_inf_or_nan ();
 
   bool int_or_inf_or_nan = m.all_elements_are_int_or_inf_or_nan ();
 
   Matrix m_abs = m.abs ();
   double max_abs = pr_max_internal (m_abs);
   double min_abs = pr_min_internal (m_abs);
@@ -815,17 +815,17 @@ set_format (const ComplexMatrix& cm, int
   curr_imag_fmt = 0;
 
   if (free_format)
     return;
 
   Matrix rp = real (cm);
   Matrix ip = imag (cm);
 
-  bool sign = rp.any_element_is_negative ();
+  bool sign = rp.any_element_is_negative (true);
 
   bool inf_or_nan = cm.any_element_is_inf_or_nan ();
 
   bool int_or_inf_or_nan = (rp.all_elements_are_int_or_inf_or_nan ()
 			    && ip.all_elements_are_int_or_inf_or_nan ());
 
   Matrix r_m_abs = rp.abs ();
   double r_max_abs = pr_max_internal (r_m_abs);
