# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1294916572 18000
#      Thu Jan 13 06:02:52 2011 -0500
# Node ID 41866901ec624bd6967a3c218e685af6c9e29fdc
# Parent  c3ad80f4ce3620daef87aac8bfa9e7685fe31499
Sparse.cc: more constructor fixes

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2011-01-13  John W. Eaton  <jwe@octave.org>
+
+	* Sparse.cc (Sparse::Sparse): Initialize all data members in
+	initialization lists.
+
 2011-01-13  John W. Eaton  <jwe@octave.org>
 
 	* Array.cc (rec_permute_helper::rec_permute_helper,
 	rec_index_helper::rec_index_helper,
 	rec_resize_helper::rec_resize_helper): Initialize all data
 	members in initialization lists.
 
 	* Array.h, Array.cc (Array::Array): Initialize slice_data and
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -168,17 +168,17 @@ template <class T>
 bool
 Sparse<T>::SparseRep::indices_ok (void) const
 {
   return sparse_indices_ok (r, c, nrows, ncols, nnz ());
 }
 
 template <class T>
 Sparse<T>::Sparse (octave_idx_type nr, octave_idx_type nc, T val)
-  : dimensions (dim_vector (nr, nc))
+  : rep (0), dimensions (dim_vector (nr, nc))
 { 
   if (val != T ())
     {
       rep = new typename Sparse<T>::SparseRep (nr, nc, nr*nc);
 
       octave_idx_type ii = 0;
       xcidx (0) = 0;
       for (octave_idx_type j = 0; j < nc; j++)
@@ -196,28 +196,28 @@ Sparse<T>::Sparse (octave_idx_type nr, o
       rep = new typename Sparse<T>::SparseRep (nr, nc, 0);
       for (octave_idx_type j = 0; j < nc+1; j++)
         xcidx(j) = 0;
     }
 }
 
 template <class T>
 Sparse<T>::Sparse (const dim_vector& dv)
-  : dimensions (dv)
+  : rep (0), dimensions (dv)
 { 
   if (dv.length() != 2)
     (*current_liboctave_error_handler)
       ("Sparse::Sparse (const dim_vector&): dimension mismatch");
   else
     rep = new typename Sparse<T>::SparseRep (dv(0), dv(1));
 }
 
 template <class T>
 Sparse<T>::Sparse (const Sparse<T>& a, const dim_vector& dv)
-  : dimensions (dv)
+  : rep (0), dimensions (dv)
 {
 
   // Work in unsigned long long to avoid overflow issues with numel
   unsigned long long a_nel = static_cast<unsigned long long>(a.rows ()) *
     static_cast<unsigned long long>(a.cols ());
   unsigned long long dv_nel = static_cast<unsigned long long>(dv (0)) *
     static_cast<unsigned long long>(dv (1));
 
@@ -254,32 +254,30 @@ Sparse<T>::Sparse (const Sparse<T>& a, c
     }
 }
 
 template <class T>
 Sparse<T>::Sparse (const Array<T>& a, const idx_vector& r, 
                    const idx_vector& c, octave_idx_type nr,
                    octave_idx_type nc, bool sum_terms,
                    octave_idx_type nzm)
-  : rep (nil_rep ()), dimensions ()
+  : rep (0), dimensions ()
 {
   if (nr < 0)
-      nr = r.extent (0);
+    nr = r.extent (0);
   else if (r.extent (nr) > nr)
     (*current_liboctave_error_handler) ("sparse: row index %d out of bound %d",
                                         r.extent (nr), nr);
 
   if (nc < 0)
-      nc = c.extent (0);
+    nc = c.extent (0);
   else if (c.extent (nc) > nc)
-    (*current_liboctave_error_handler) ("sparse: column index %d out of bound %d",
-                                        r.extent (nc), nc);
+    (*current_liboctave_error_handler)
+      ("sparse: column index %d out of bound %d", r.extent (nc), nc);
 
-  if (--rep->count == 0)
-    delete rep;
   rep = new SparseRep (nr, nc);
 
   dimensions = dim_vector (nr, nc);
 
 
   octave_idx_type n = a.numel (), rl = r.length (nr), cl = c.length (nc);
   bool a_scalar = n == 1;
   if (a_scalar)
@@ -593,17 +591,17 @@ Sparse<T>::Sparse (const Array<T>& a, co
         }
 
       maybe_compress (true);
     }
 }
 
 template <class T>
 Sparse<T>::Sparse (const Array<T>& a)
-  : dimensions (a.dims ())
+  : rep (0), dimensions (a.dims ())
 {
   if (dimensions.length () > 2)
     (*current_liboctave_error_handler)
       ("Sparse::Sparse (const Array<T>&): dimension mismatch");
   else
     {
       octave_idx_type nr = rows ();
       octave_idx_type nc = cols ();
