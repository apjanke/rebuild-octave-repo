# HG changeset patch
# User jwe
# Date 1037057148 0
#      Mon Nov 11 23:25:48 2002 +0000
# Node ID e05de825dbd6cab4432b9a8ae011456204d1bdee
# Parent  67ef87a80c492036c6f45923c01c8d41822a1b7f
[project @ 2002-11-11 23:25:48 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2002-11-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* defun-int.h (DEFUN_MAPPER_INTERNAL): Don't forget doc string
+	when creating octave_mapper object.
+
 	* sysdep.cc (BSD_init): Avoid failure if FP_X_DNML is not defined.
 
 2002-11-08  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* cutils.c: Be sure to always return buf.
 
 	Undo previous vnprintf changes.  The portable snprintf I found
 	does not handle floating point conversions...
diff --git a/src/defun-int.h b/src/defun-int.h
--- a/src/defun-int.h
+++ b/src/defun-int.h
@@ -197,17 +197,17 @@ typedef bool (*octave_dld_fcn_installer)
   install_builtin_mapper \
     (new octave_mapper \
      (X_CAST (octave_mapper::ch_mapper, ch_map), \
       X_CAST (octave_mapper::d_b_mapper, d_b_map), \
       X_CAST (octave_mapper::c_b_mapper, c_b_map), \
       X_CAST (octave_mapper::d_d_mapper, d_d_map), \
       X_CAST (octave_mapper::d_c_mapper, d_c_map), \
       X_CAST (octave_mapper::c_c_mapper, c_c_map), \
-      lo, hi, ch_map_flag, can_ret_cmplx_for_real, #name))
+      lo, hi, ch_map_flag, can_ret_cmplx_for_real, #name, doc))
 
 #endif /* ! MAKE_BUILTINS */
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -394,24 +394,24 @@ Return the imaginary part of @var{z} as 
 @end deftypefn\n\
 \n\
 @seealso{real and conj}");
 
   DEFUN_MAPPER (isalnum, xisalnum, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isalnum (@var{s})\n\
 Return 1 for characters that are letters or digits (@code{isalpha\n\
-(@var{a})} or @code{isdigit (@var{a})} is true).\n\
+(@var{s})} or @code{isdigit (@var{s})} is true).\n\
 @end deftypefn");
 
   DEFUN_MAPPER (isalpha, xisalpha, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isalpha (@var{s})\n\
-Return true for characters that are letters (@code{isupper (@var{a})}\n\
-or @code{islower (@var{})} is true).\n\
+Return true for characters that are letters (@code{isupper (@var{s})}\n\
+or @code{islower (@var{s})} is true).\n\
 @end deftypefn");
 
   DEFUN_MAPPER (isascii, xisascii, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isascii (@var{s})\n\
 Return 1 for characters that are ASCII (in the range 0 to 127 decimal).\n\
 @end deftypefn");
 
