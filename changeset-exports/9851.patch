# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1258962222 -3600
#      Mon Nov 23 08:43:42 2009 +0100
# Node ID 1fac51c5f83fbca4fbe7d26093208c01f57312d8
# Parent  85f6c386f2bb71c74cfa423697d398ef4feca36f
save dims for empty structs

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-11-23  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-struct.cc (octave_struct::save_ascii): Save dimensions for
+	structs.
+	(octave_struct::load_ascii): Load dimensions if present, 
+	use 1x1 otherwise.
+
 2009-11-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* data.cc (Fmerge): Correct query for logical masks.
 
 2009-11-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* utils.cc (dims_to_numel): Fallback to index_vector query for
 	non-numeric types.
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -1242,16 +1242,24 @@ named fields.\n\
 
 bool
 octave_struct::save_ascii (std::ostream& os)
 {
   Octave_map m = map_value ();
 
   octave_idx_type nf = m.nfields ();
 
+  const dim_vector dv = dims ();
+
+  os << "# ndims: " << dv.length () << "\n";
+
+  for (int i = 0; i < dv.length (); i++)
+    os << " " << dv (i);
+  os << "\n";
+
   os << "# length: " << nf << "\n";
 
   // Iterating over the list of keys will preserve the order of the
   // fields.
   string_vector keys = m.keys ();
 
   for (octave_idx_type i = 0; i < nf; i++)
     {
@@ -1267,23 +1275,49 @@ octave_struct::save_ascii (std::ostream&
 
   return true;
 }
 
 bool 
 octave_struct::load_ascii (std::istream& is)
 {
   octave_idx_type len = 0;
+  dim_vector dv (1, 1);
   bool success = true;
 
-  if (extract_keyword (is, "length", len) && len >= 0)
+  // KLUGE: earlier Octave versions did not save extra dimensions with struct,
+  // and as a result did not preserve dimensions for empty structs.
+  // The default dimensions were 1x1, which we want to preserve.
+  string_vector keywords(2);
+
+  keywords[0] = "ndims";
+  keywords[1] = "length";
+
+  std::string kw;
+
+  if (extract_keyword (is, keywords, kw, len, true))
+    {
+      if (kw == keywords[0])
+        {
+          int mdims = std::max (len, 2);
+          dv.resize (mdims);
+          for (int i = 0; i < mdims; i++)
+            is >> dv(i);
+
+          success = extract_keyword (is, keywords[1], len);
+        }
+    }
+  else
+    success = false;
+
+  if (success && len >= 0)
     {
       if (len > 0)
 	{
-	  Octave_map m (map);
+	  Octave_map m (dv);
 
 	  for (octave_idx_type j = 0; j < len; j++)
 	    {
 	      octave_value t2;
 	      bool dummy;
 
 	      // recurse to read cell elements
 	      std::string nm
@@ -1307,17 +1341,17 @@ octave_struct::load_ascii (std::istream&
 	    map = m;
 	  else
 	    {
 	      error ("load: failed to load structure");
 	      success = false;
 	    }
 	}
       else if (len == 0 )
-	map = Octave_map (dim_vector (1, 1));
+	map = Octave_map (dv);
       else
 	panic_impossible ();
     }
   else {
     error ("load: failed to extract number of elements in structure");
     success = false;
   }
 
