# HG changeset patch
# User jwe
# Date 831086405 0
#      Fri May 03 01:20:05 1996 +0000
# Node ID 320f5463c2012ecbe8693747d48af66547500edb
# Parent  07227f04abc5105b657f4c80fc8dd0be4fc172ee
[project @ 1996-05-03 01:19:22 by jwe]

diff --git a/liboctave/Array-idx.h b/liboctave/Array-idx.h
--- a/liboctave/Array-idx.h
+++ b/liboctave/Array-idx.h
@@ -199,16 +199,29 @@ assign (Array<LT>& lhs, const Array<RT>&
       else
 	{
 	  (*current_liboctave_error_handler)
 	    ("A(I) = X: X must be a scalar or a vector with same length as I");
 
 	  retval = 0;
 	}
     }
+  else if (idx.is_colon ())
+    {
+      if (lhs_len == 0)
+	{
+	  lhs.resize (rhs_len);
+
+	  for (int i = 0; i < rhs_len; i++)
+	    lhs.elem (i) = rhs.elem (i);
+	}
+      else
+	(*current_liboctave_error_handler)
+	  ("A(:) = X: A must be the same size as X");
+    }
   else
     {
       (*current_liboctave_error_handler)
 	("A([]) = X: X must also be an empty matrix");
 
       retval = 0;
     }
 
diff --git a/liboctave/Array2-idx.h b/liboctave/Array2-idx.h
--- a/liboctave/Array2-idx.h
+++ b/liboctave/Array2-idx.h
@@ -387,18 +387,19 @@ assign (Array2<LT>& lhs, const Array2<RT
 		  retval = 0;
 		}
 	    }
 	}
       // idx_vector::freeze() printed an error message for us.
     }
   else if (n_idx == 1)
     {
-      if (lhs_nr == 0 || lhs_nc == 0
-	  || (lhs_nr == 1 && lhs_nc == 1))
+      int lhs_is_empty = lhs_nr == 0 || lhs_nc == 0;
+
+      if (lhs_is_empty || (lhs_nr == 1 && lhs_nc == 1))
 	{
 	  idx_vector *tmp = lhs.get_idx ();
 
 	  idx_vector idx = tmp[0];
 
 	  int lhs_len = lhs.length ();
 
 	  int n = idx.freeze (lhs_len, 0, liboctave_pzo_flag,
@@ -409,41 +410,56 @@ assign (Array2<LT>& lhs, const Array2<RT
 	      if (rhs_nr == 0 && rhs_nc == 0)
 		{
 		  if (n != 0 && (lhs_nr != 0 || lhs_nc != 0))
 		    {
 		      idx_vector tmp (':');
 		      lhs.maybe_delete_elements (idx, tmp);
 		    }
 		}
+	      else if (! liboctave_dfi_flag && lhs_is_empty
+		       && idx.is_colon ()
+		       && ! (rhs_nr == 1 || rhs_nc == 1))
+		{
+		  (*current_liboctave_error_handler)
+		    ("A(:) = X: X must be a vector");
+		}
 	      else
 		{
 		  if (assign ((Array<LT>&) lhs, (Array<RT>&) rhs))
 		    {
 		      int len = lhs.length ();
 
 		      if (len > 0)
 			{
 			  int idx_nr = idx.orig_rows ();
 			  int idx_nc = idx.orig_columns ();
 
+			  // lhs_is_empty now means that lhs was
+			  // *originally* empty.
+
 			  if (liboctave_dfi_flag
 			      || (idx_nr == 1 && idx_nc == 1))
 			    {
 			      if (liboctave_pcv_flag)
 				{
 				  lhs.d1 = lhs.length ();
 				  lhs.d2 = 1;
 				}
 			      else
 				{
 				  lhs.d1 = 1;
 				  lhs.d2 = lhs.length ();
 				}
 			    }
+			  else if (lhs_is_empty && idx.is_colon ())
+			    {
+			      lhs.d1 = rhs.d1;
+			      lhs.d2 = rhs.d2;
+			    }
 			  else if (idx_nr == 1 && rhs_nr == 1)
 			    {
 			      lhs.d1 = 1;
 			      lhs.d2 = lhs.length ();
 			    }
 			  else if (idx_nc == 1 && rhs_nc == 1)
 			    {
 			      lhs.d1 = lhs.length ();
