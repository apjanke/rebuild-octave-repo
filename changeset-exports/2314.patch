# HG changeset patch
# User jwe
# Date 837143882 0
#      Fri Jul 12 03:58:02 1996 +0000
# Node ID 949ab8eba8bc1f9068fe5e9989ef8dca4fea2ab9
# Parent  5ca126254d15fa477d28628f8a1cca9df9ec00b3
[project @ 1996-07-12 03:58:02 by jwe]

diff --git a/scripts/elfun/acot.m b/scripts/elfun/acot.m
--- a/scripts/elfun/acot.m
+++ b/scripts/elfun/acot.m
@@ -14,16 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## acot (z):  compute the inverse cotangent for each element of z.
 
+## Author: jwe
+
 function w = acot (z)
 
   if (nargin != 1)
     usage ("acot (z)");
   endif
 
   w = atan (1 ./ z);
 
diff --git a/scripts/elfun/acoth.m b/scripts/elfun/acoth.m
--- a/scripts/elfun/acoth.m
+++ b/scripts/elfun/acoth.m
@@ -14,16 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## acoth (z):  compute the inverse hyperbolic cotangent for each element of z. 
 
+## Author: jwe
+
 function w = acoth (z)
 
   if (nargin != 1)
     usage ("acoth (z)");
   endif
 
   w = atanh (1 ./ z);
 
diff --git a/scripts/elfun/acsc.m b/scripts/elfun/acsc.m
--- a/scripts/elfun/acsc.m
+++ b/scripts/elfun/acsc.m
@@ -14,16 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## acsc (z):  compute the inverse cosecant for each element of z.
 
+## Author: jwe
+
 function w = acsc (z)
   
   if (nargin != 1)
     usage ("acsc (z)");
   endif
 
   w = asin (1 ./ z);
   
diff --git a/scripts/elfun/acsch.m b/scripts/elfun/acsch.m
--- a/scripts/elfun/acsch.m
+++ b/scripts/elfun/acsch.m
@@ -14,16 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## acsch (z):  compute the inverse hyperbolic cosecant for each element of z.
 
+## Author: jwe
+
 function w = acsch (z)
   
   if (nargin != 1)
     usage ("acsch (z)");
   endif
 
   w = asinh (1 ./ z);
   
diff --git a/scripts/elfun/asec.m b/scripts/elfun/asec.m
--- a/scripts/elfun/asec.m
+++ b/scripts/elfun/asec.m
@@ -14,16 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## asec (z):  compute the inverse secant for each element of z.
 
+## Author: jwe
+
 function w = asec (z)
   
   if (nargin != 1)
     usage ("asec (z)");
   endif
 
   w = acos (1 ./ z);
   
diff --git a/scripts/elfun/asech.m b/scripts/elfun/asech.m
--- a/scripts/elfun/asech.m
+++ b/scripts/elfun/asech.m
@@ -14,16 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## asech (z):  compute the inverse hyperbolic secant for each element of z.
 
+## Author: jwe
+
 function w = asech (z)
   
   if (nargin != 1)
     usage ("acosh (z)");
   endif
 
   w = acosh (1 ./ z);
   
diff --git a/scripts/elfun/cot.m b/scripts/elfun/cot.m
--- a/scripts/elfun/cot.m
+++ b/scripts/elfun/cot.m
@@ -14,16 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## cot (z):  compute the cotangent for each element of z.
 
+## Author: jwe
+
 function w = cot (z)
   
   if (nargin != 1)
     usage ("cot (z)");
   endif
 
   w = 1 ./ tan(z);
   
diff --git a/scripts/elfun/coth.m b/scripts/elfun/coth.m
--- a/scripts/elfun/coth.m
+++ b/scripts/elfun/coth.m
@@ -14,16 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## coth (z):  compute the hyperbolic cotangent for each element of z.
 
+## Author: jwe
+
 function w = coth (z)
   
   if (nargin != 1)
     usage ("coth (z)");
   endif
 
   w = 1 ./ tanh(z);
   
diff --git a/scripts/elfun/csc.m b/scripts/elfun/csc.m
--- a/scripts/elfun/csc.m
+++ b/scripts/elfun/csc.m
@@ -14,16 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## csc (z):  compute the cosecant for each element of z.
 
+## Author: jwe
+
 function w = csc (z)
   
   if (nargin != 1)
     usage ("csc (z)");
   endif
 
   w = 1 ./ sin(z);
   
diff --git a/scripts/elfun/csch.m b/scripts/elfun/csch.m
--- a/scripts/elfun/csch.m
+++ b/scripts/elfun/csch.m
@@ -14,16 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## csch (z):  compute the hyperbolic cosecant for each element of z.
 
+## Author: jwe
+
 function w = csch (z)
   
   if (nargin != 1)
     usage ("csch (z)");
   endif
 
   w = 1 ./ sinh(z);
   
diff --git a/scripts/elfun/log2.m b/scripts/elfun/log2.m
--- a/scripts/elfun/log2.m
+++ b/scripts/elfun/log2.m
@@ -14,16 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## log2 (z):  compute the logarithm base 2 for each element of z.
 
+## Author: jwe
+
 function w = log2 (z)
   
 if (nargin != 1)
     usage ("log2 (z)");
   endif
 
   w = log(z) / log(2);
   
diff --git a/scripts/elfun/sec.m b/scripts/elfun/sec.m
--- a/scripts/elfun/sec.m
+++ b/scripts/elfun/sec.m
@@ -14,16 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## sec (z): compute the secant for each element of z.
 
+## Author: jwe
+
 function w = sec (z)
   
   if (nargin != 1)
     usage ("sec (z)");
   endif
   
   w = 1 ./ cos(z);
   
diff --git a/scripts/elfun/sech.m b/scripts/elfun/sech.m
--- a/scripts/elfun/sech.m
+++ b/scripts/elfun/sech.m
@@ -14,16 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## sech (z):  compute the hyperbolic secant for each element of z.
 
+## Author: jwe
+
 function w = sech (z)
   
 if (nargin != 1)
     usage ("sech (z)");
   endif
 
   w = 1 ./ cosh(z);
   
diff --git a/scripts/general/columns.m b/scripts/general/columns.m
--- a/scripts/general/columns.m
+++ b/scripts/general/columns.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage: columns (x)
 ##
 ## Return the the number of columns in x.
 ##
 ## See also: size, rows, length, is_scalar, is_vector, is_matrix
 
+## Author: jwe
+
 function nc = columns (x)
 
   if (nargin != 1)
     usage ("columns (x)");
   endif
 
   [nr, nc] = size (x);
 
diff --git a/scripts/general/fliplr.m b/scripts/general/fliplr.m
--- a/scripts/general/fliplr.m
+++ b/scripts/general/fliplr.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage: fliplr (x)
 ##
 ## Return x with the columns swapped.
 ##
 ## See also: flipu, rot90
 
+## Author: jwe
+
 function y = fliplr (x)
 
   if (nargin != 1)
     usage ("fliplr (x)");
   endif
 
   y = x;
   nc = columns (x);
diff --git a/scripts/general/flipud.m b/scripts/general/flipud.m
--- a/scripts/general/flipud.m
+++ b/scripts/general/flipud.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage: flipud (x)
 ##
 ## Return x with the rows swapped.
 ##
 ## See also: fliplr, rot90
 
+## Author: jwe
+
 function y = flipud (x)
 
   if (nargin != 1)
     usage ("flipud (x)");
   endif
 
   y = x;
   nr = rows (x);
diff --git a/scripts/general/int2str.m b/scripts/general/int2str.m
--- a/scripts/general/int2str.m
+++ b/scripts/general/int2str.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage: int2str (x)
 ##
 ## Round x to the nearest integer and format as a string.
 ##
 ## See also: sprintf, num2str 
 
+## Author: jwe
+
 function retval = int2str (x)
 
   ## XXX FIXME XXX -- this will fail for very large values.
 
   if (nargin == 1)
     if (rows (x) == 1 && columns (x) == 1)
       retval = sprintf ("%d", round (x));
     else
diff --git a/scripts/general/is_matrix.m b/scripts/general/is_matrix.m
--- a/scripts/general/is_matrix.m
+++ b/scripts/general/is_matrix.m
@@ -19,16 +19,18 @@
 
 ## usage: is_matrix (x)
 ##
 ## Return 1 if the number of rows and columns of x are both greater
 ## than 1.
 ##
 ## See also: size, rows, columns, length, is_scalar, is_vector
 
+## Author: jwe
+
 function retval = is_matrix (x)
 
   if (nargin == 1)
     [nr, nc] = size (x);
     retval = (nr > 1 && nc > 1);
   else
     usage ("is_matrix (x)");
   endif
diff --git a/scripts/general/is_scalar.m b/scripts/general/is_scalar.m
--- a/scripts/general/is_scalar.m
+++ b/scripts/general/is_scalar.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage: is_scalar (x)
 ##
 ## Return 1 if the number of rows and columns of x are both equal to 1.
 ##
 ## See also: size, rows, columns, length, is_scalar, is_matrix
 
+## Author: jwe
+
 function retval = is_scalar (x)
 
   if (nargin == 1)
     [nr, nc] = size (x);
     retval = (nr == 1 && nc == 1);
   else
     usage ("is_scalar (x)");
   endif
diff --git a/scripts/general/is_vector.m b/scripts/general/is_vector.m
--- a/scripts/general/is_vector.m
+++ b/scripts/general/is_vector.m
@@ -19,16 +19,18 @@
 
 ## usage: is_vector (x)
 ##
 ## Return 1 if the either the number of rows (columns) of x is 1 and
 ## the number of columns (rows) is greater than one.  Otherwise, return 0. 
 ##
 ## See also: size, rows, columns, length, is_scalar, is_matrix
 
+## Author: jwe
+
 function retval = is_vector (x)
 
   if (nargin == 1)
     [nr, nc] = size (x);
     retval = ((nr == 1 && nc > 1) || (nc == 1 && nr > 1));
   else
     usage ("is_vector (x)");
   endif
diff --git a/scripts/general/isempty.m b/scripts/general/isempty.m
--- a/scripts/general/isempty.m
+++ b/scripts/general/isempty.m
@@ -16,16 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage: isempty (x)
 ##
 ## Return 1 if the argument is an empty matrix.  Otherwise, return 0.
 
+## Author: jwe
+
 function retval = isempty (var)
 
   if (nargin != 1)
     usage ("isempty (var)");
   endif
 
   retval = (rows (var) == 0 || columns (var) == 0);
 
diff --git a/scripts/general/length.m b/scripts/general/length.m
--- a/scripts/general/length.m
+++ b/scripts/general/length.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage: length (x)
 ##
 ## Return the number of rows or columns, whichever is greater.
 ##
 ## See also: size, rows, columns, is_scalar, is_vector, is_matrix
 
+## Author: jwe
+
 function len = length (x)
 
   if (nargin != 1)
     usage ("length (x)");
   endif
 
   len = max (size (x));
 
diff --git a/scripts/general/logspace.m b/scripts/general/logspace.m
--- a/scripts/general/logspace.m
+++ b/scripts/general/logspace.m
@@ -30,16 +30,18 @@
 ## 10^x1 and 10^pi.
 ##
 ## Yes, this is pretty stupid, because you could achieve the same
 ## result with logspace (x1, log10 (pi)), but Matlab does this, and
 ## claims that is useful for signal processing applications.
 ##
 ## See also: linspace
 
+## Author: jwe
+
 function retval = logspace (x1, x2, n)
 
   if (nargin == 2)
     npoints = 50;
   elseif (nargin == 3)
     if (length (n) == 1)
       npoints = fix (n);
     else
diff --git a/scripts/general/nargchk.m b/scripts/general/nargchk.m
--- a/scripts/general/nargchk.m
+++ b/scripts/general/nargchk.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage: nargchk (nargin_min, nargin_max, n)
 ##
 ## If N is in the range NARGIN_MIN to NARGIN_MAX, return the empty
 ## matrix.  Otherwise, return a message indicating whether N is too
 ## large or too small.
 
+## Author: jwe
+
 function retval = nargchk (nargin_min, nargin_max, n)
 
   if (nargin != 3)
     usage ("nargchk (nargin_min, nargin_max, n)");
   endif
 
   if (nargin_min > nargin_max)
     error  ("nargchk: nargin_min > nargin_max");
diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage: num2str (x)
 ##
 ## Format x as a string.
 ##
 ## See also: sprintf, int2str
 
+## Author: jwe
+
 function retval = num2str (x)
 
   if (nargin == 1)
     if (rows (x) == 1 && columns (x) == 1)
       retval = sprintf ("%g", x);
     else
       error ("num2str: expecting scalar argument");
     endif
diff --git a/scripts/general/perror.m b/scripts/general/perror.m
--- a/scripts/general/perror.m
+++ b/scripts/general/perror.m
@@ -23,16 +23,18 @@
 ##
 ## Messages correspond to the following subroutine versions:
 ##
 ##   npsol : 4.0
 ##   qpsol : 3.2
 ##
 ## See also: strerror
 
+## Author: jwe
+
 function perror (name, err)
 
   if (nargin != 2)
     usage ("perror (name, err)");
   else
     printf (strerror (name, err));
   endif
 
diff --git a/scripts/general/rem.m b/scripts/general/rem.m
--- a/scripts/general/rem.m
+++ b/scripts/general/rem.m
@@ -16,16 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage: rem (x, y)
 ##
 ## Return remainder (x, y).
 
+## Author: jwe
+
 function retval = rem (x, y)
 
   if (nargin != 2)
     usage ("rem (x, y)");
   endif
 
   if (any (size (x) != size (y)) && ! (is_scalar (x) || is_scalar (y)))
     error ("rem: argument sizes must agree");
diff --git a/scripts/general/reshape.m b/scripts/general/reshape.m
--- a/scripts/general/reshape.m
+++ b/scripts/general/reshape.m
@@ -19,16 +19,18 @@
 
 ## usage: reshape (a, m, n)
 ##
 ## Form an m x n matrix from the elements of a (taken in Fortran's
 ## column major ordering).
 ##
 ## See also: `:', do_fortran_indexing
 
+## Author: jwe
+
 function retval = reshape (a, m, n)
 
   if (nargin != 3)
     usage ("reshape (a, m, n)");
   else
     [nr, nc] = size (a);
     if (nr * nc == m * n)
       dfi = do_fortran_indexing;
diff --git a/scripts/general/rot90.m b/scripts/general/rot90.m
--- a/scripts/general/rot90.m
+++ b/scripts/general/rot90.m
@@ -20,16 +20,18 @@
 ## usage: rot90 (x, k)
 ##
 ## Rotate the matrix x counterclockwise k*90 degrees.
 ##
 ## If the second argument is omitted, k is taken to be 1.
 ##
 ## See also: flipud, fliplr
 
+## Author: jwe
+
 function y = rot90 (x, k)
 
   if (nargin < 2)
     k = 1;
   endif
 
   if (imag (k) != 0 || fix (k) != k)
     error ("rot90: k must be an integer");
diff --git a/scripts/general/rows.m b/scripts/general/rows.m
--- a/scripts/general/rows.m
+++ b/scripts/general/rows.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage: rows (x)
 ##
 ## Return the the number of rows in x.
 ##
 ## See also: size, columns, length, is_scalar, is_vector, is_matrix
 
+## Author: jwe
+
 function nr = rows (x)
 
   if (nargin != 1)
     usage ("rows (x)");
   endif
 
   [nr, nc] = size (x);
 
diff --git a/scripts/general/strerror.m b/scripts/general/strerror.m
--- a/scripts/general/strerror.m
+++ b/scripts/general/strerror.m
@@ -22,16 +22,18 @@
 ## Return the text of an error message for error number `err' from
 ## function "name".
 ##
 ## Messages correspond to the following subroutine versions:
 ##
 ##   npsol : 4.0
 ##   qpsol : 3.2
 
+## Author: jwe
+
 function msg = strerror (name, err)
 
   if (nargin != 2)
     usage ("strerror (name, err)");
   endif
 
   if (! isstr (name))
     error ("strerror: first argument must be a string");
diff --git a/scripts/general/tril.m b/scripts/general/tril.m
--- a/scripts/general/tril.m
+++ b/scripts/general/tril.m
@@ -19,16 +19,18 @@
 
 ## usage: triu (x, k)
 ##
 ## Return the lower triangular part of x above the k-th diagonal.  If
 ## the second argument is omitted, k = 0 is assumed.
 ##
 ## See also: triu, diag
 
+## Author: jwe
+
 function retval = tril (x, k)
 
   if (nargin > 0)
     [nr, nc] = size (x);
     retval = zeros (nr, nc);
   endif
 
   if (nargin == 1)
diff --git a/scripts/general/triu.m b/scripts/general/triu.m
--- a/scripts/general/triu.m
+++ b/scripts/general/triu.m
@@ -19,16 +19,18 @@
 
 ## usage: triu (x, k)
 ##
 ## Return the upper triangular part of x above the k-th diagonal.  If
 ## the second argument is omitted, k = 0 is assumed.
 ##
 ## See also: tril, diag
 
+## Author: jwe
+
 function retval = triu (x, k)
 
   if (nargin > 0)
     [nr, nc] = size (x);
     retval = zeros (nr, nc);
   endif
 
   if (nargin == 1)
diff --git a/scripts/io/printf.m b/scripts/io/printf.m
--- a/scripts/io/printf.m
+++ b/scripts/io/printf.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage: printf (fmt, ...)
 ##
 ## Formatted write to standard output.
 ##
 ## See also: fprintf sprintf
 
+## Author: jwe
+
 function retval = printf (fmt, ...)
 
   retval = -1;
 
   if (nargin > 0)
     retval = fprintf (stdout, fmt, all_va_args);
   else
     usage ("printf (fmt, ...)");
diff --git a/scripts/io/puts.m b/scripts/io/puts.m
--- a/scripts/io/puts.m
+++ b/scripts/io/puts.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage: puts (string)
 ##
 ## Write string to the standard output.
 ##
 ## See also: fputs, printf, fprintf
 
+## Author: jwe
+
 function retval = puts (s)
 
   retval = -1;
 
   if (nargin == 1)
     retval = fputs (stdout, s);
   else
     usage ("puts (string)");
diff --git a/scripts/linear-algebra/cond.m b/scripts/linear-algebra/cond.m
--- a/scripts/linear-algebra/cond.m
+++ b/scripts/linear-algebra/cond.m
@@ -19,16 +19,18 @@
 
 ## usage: cond (a)
 ##
 ## Return the condition number of a, computed using the singular values
 ## of a.
 ##
 ## See also: norm, svd
 
+## Author: jwe
+
 function retval = cond (a)
 
   if (nargin == 1)
     [nr, nc] = size (a);
     if (nr == 0 && nc == 0)
       if (strcmp (propagate_empty_matrices, "false"))
         error ("cond: empty matrix is invalid as argument");
       endif
diff --git a/scripts/linear-algebra/norm.m b/scripts/linear-algebra/norm.m
--- a/scripts/linear-algebra/norm.m
+++ b/scripts/linear-algebra/norm.m
@@ -38,16 +38,18 @@
 ##      Inf         max (abs (x))
 ##     -Inf         min (abs (x))
 ##     other        p-norm of x, sum (abs (x) .^ p) ^ (1/p)
 ##
 ## If the second argument is missing, p = 2 is assumed.
 ##
 ## See also: cond, svd
 
+## Author: jwe
+
 function retval = norm (x, p)
 
   if (nargin < 1 || nargin > 2)
     error ("usage: norm (x [, p])");
   endif
 
   if (isempty (x))
     retval = [];
diff --git a/scripts/linear-algebra/rank.m b/scripts/linear-algebra/rank.m
--- a/scripts/linear-algebra/rank.m
+++ b/scripts/linear-algebra/rank.m
@@ -24,16 +24,18 @@
 ##
 ## If the second argument is omitted, it is taken to be
 ##
 ##   tol =  max (size (a)) * sigma (1) * eps;
 ##
 ## where eps is machine precision and sigma is the largest singular
 ## value of a.
 
+## Author: jwe
+
 function retval = rank (A, tol)
 
   if (nargin == 1)
     sigma = svd (A);
     tolerance = max (size (A)) * sigma (1) * eps;
   elseif (nargin == 2)
     sigma = svd (A);
     tolerance = tol;
diff --git a/scripts/linear-algebra/trace.m b/scripts/linear-algebra/trace.m
--- a/scripts/linear-algebra/trace.m
+++ b/scripts/linear-algebra/trace.m
@@ -16,16 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage: trace (x)
 ##
 ## Returns the trace (the sum of the diagonal elements) of x.
 
+## Author: jwe
+
 function y = trace (x)
 
   if (nargin != 1)
     usage ("trace (x)");
   endif
 
   [nr, nc] = size (x);
   if (nr == 1 || nc == 1)
diff --git a/scripts/miscellaneous/bug_report.m b/scripts/miscellaneous/bug_report.m
--- a/scripts/miscellaneous/bug_report.m
+++ b/scripts/miscellaneous/bug_report.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage: bug_report
 ##
 ## Have Octave create a bug report template file, invoke your favorite
 ## editor, and submit the report to the bug-octave mailing list when
 ## you are finished editing.
 
+## Author: jwe
+
 function bug_report ()
 
   if (nargin != 0)
     warning ("bug_report: ignoring extra arguments");
   endif
 
   printf ("Please enter a one-line description of your bug report.\n\n");
   fflush (stdout);
diff --git a/scripts/miscellaneous/cputime.m b/scripts/miscellaneous/cputime.m
--- a/scripts/miscellaneous/cputime.m
+++ b/scripts/miscellaneous/cputime.m
@@ -16,16 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage: cputime
 ##
 ## Get CPU time statistics.
 
+## Author: jwe
+
 function [total, user, system] = cputime ()
 
   if (nargin != 0)
     warning ("cputime: ignoring extra arguments");
   endif
 
   resource_stats = getrusage ();
 
diff --git a/scripts/miscellaneous/dump_1_pref.m b/scripts/miscellaneous/dump_1_pref.m
--- a/scripts/miscellaneous/dump_1_pref.m
+++ b/scripts/miscellaneous/dump_1_pref.m
@@ -12,16 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
+## Author: jwe
+
 function dump_1_pref (file, var)
 
   if (nargin != 2)
     usage ("dump_1_pref (file, var)");
   endif
 
   eval (sprintf ("tmp = %s;", var));
 
diff --git a/scripts/miscellaneous/dump_prefs.m b/scripts/miscellaneous/dump_prefs.m
--- a/scripts/miscellaneous/dump_prefs.m
+++ b/scripts/miscellaneous/dump_prefs.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage: dump_prefs (file)
 ##
 ## Have Octave dump all the current user preference variables to FILE
 ## in a format that can be parsed by Octave later.  If FILE is omitted,
 ## the listing is printed to stdout.
 
+## Author: jwe
+
 function dump_prefs (file)
 
   if (nargin == 0)
     file = stdout;
   endif
 
   ## XXX FIXME XXX -- vectors of strings would be really useful here...
   ## XXX FIXME XXX -- maybe this should be a built-in function so that we
diff --git a/scripts/miscellaneous/etime.m b/scripts/miscellaneous/etime.m
--- a/scripts/miscellaneous/etime.m
+++ b/scripts/miscellaneous/etime.m
@@ -19,16 +19,18 @@
 
 ## usage: etime (t1, t0)
 ##
 ## Return the difference between t1 and t0 in seconds.  The arguments
 ## are expected to be vectors in the form returned by clock ().
 ##
 ## See also: tic, toc, clock, cputime
 
+## Author: jwe
+
 function secs = etime (t1, t0)
 
   if (nargin != 2)
     usage ("etime (t1, t0)");
   endif
 
   if (is_vector (t1) && length (t1) == 6 && is_vector (t0) && length (t0) == 6)
 
diff --git a/scripts/miscellaneous/flops.m b/scripts/miscellaneous/flops.m
--- a/scripts/miscellaneous/flops.m
+++ b/scripts/miscellaneous/flops.m
@@ -16,16 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage: flops
 ##
 ## Count floating point operations.
 
+## Author: jwe
+
 function retval = flops ()
 
   if (nargin > 0)
     usage ("flops ()");
   endif
 
   warning ("flops is a flop, always returning zero");
 
diff --git a/scripts/miscellaneous/is_leap_year.m b/scripts/miscellaneous/is_leap_year.m
--- a/scripts/miscellaneous/is_leap_year.m
+++ b/scripts/miscellaneous/is_leap_year.m
@@ -17,16 +17,18 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage: is_leap_year (year)
 ##
 ## Return 1 if the given year is a leap year; otherwise, return 0.
 ## With no arguments, use the current year.
 
+## Author: jwe
+
 function retval = is_leap_year (year)
 
   if (nargin > 1)
     usage ("is_leap_year (year)");
   endif
 
   if (nargin == 0)
     t = clock ();
diff --git a/scripts/miscellaneous/list_primes.m b/scripts/miscellaneous/list_primes.m
--- a/scripts/miscellaneous/list_primes.m
+++ b/scripts/miscellaneous/list_primes.m
@@ -19,16 +19,18 @@
 
 ## usage: list_primes (n)
 ##
 ## List the first n primes.  If n is unspecified, the first 30 primes
 ## are listed.
 ##
 ## The algorithm used is from page 218 of the TeXbook.
 
+## Author: jwe
+
 function retval = list_primes (n)
 
   if (nargin > 0)
     if (! is_scalar (n))
       error ("list_primes: argument must be a scalar");
     endif
   endif
 
diff --git a/scripts/miscellaneous/menu.m b/scripts/miscellaneous/menu.m
--- a/scripts/miscellaneous/menu.m
+++ b/scripts/miscellaneous/menu.m
@@ -16,16 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage: menu (title, opt1, ...)
 ##
 ## See also: disp, printf, input
 
+## Author: jwe
+
 function num = menu (t, ...)
 
   if (nargin < 2)
     usage ("menu (title, opt1, ...)");
   endif
 
   ## Force pending output to appear before the menu.
 
diff --git a/scripts/miscellaneous/popen2.m b/scripts/miscellaneous/popen2.m
--- a/scripts/miscellaneous/popen2.m
+++ b/scripts/miscellaneous/popen2.m
@@ -33,16 +33,18 @@
 ##  fputs (in, "some\n");
 ##  fputs (in, "strings\n");
 ##  fclose (in);
 ##  while (isstr (s = fgets (out)))
 ##    fputs (stdout, s);
 ##  endwhile
 ##  fclose (out);
 
+## Author: jwe
+
 function [in, out, pid] = popen2 (command, args)
 
   in = -1;
   out = -1;
   pid = -1;
 
   if (nargin == 1 || nargin == 2)
 
diff --git a/scripts/miscellaneous/texas_lotto.m b/scripts/miscellaneous/texas_lotto.m
--- a/scripts/miscellaneous/texas_lotto.m
+++ b/scripts/miscellaneous/texas_lotto.m
@@ -19,16 +19,18 @@
 
 ## usage: texas_lotto
 ##
 ## Pick 6 unique numbers between 1 and 50 that are guaranteed to win
 ## the Texas Lotto.
 ##
 ## See also: rand
 
+## Author: jwe
+
 function picks = texas_lotto ()
 
   if (nargin != 0)
     warning ("win_texas_lotto: ignoring extra arguments");
   endif
 
   picks = zeros (1,6);
   picks (1) = round (50-49*(1-rand));
diff --git a/scripts/miscellaneous/tic.m b/scripts/miscellaneous/tic.m
--- a/scripts/miscellaneous/tic.m
+++ b/scripts/miscellaneous/tic.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage: tic
 ##
 ## Set a wall-clock timer.
 ##
 ## See also: toc, clock, etime, cputime
 
+## Author: jwe
+
 function tic ()
 
   if (nargin != 0)
     warning ("tic: ignoring extra arguments");
   endif
 
   global _time_tic_called;
 
diff --git a/scripts/miscellaneous/toc.m b/scripts/miscellaneous/toc.m
--- a/scripts/miscellaneous/toc.m
+++ b/scripts/miscellaneous/toc.m
@@ -19,16 +19,18 @@
 
 ## usage: toc
 ##
 ## Return the difference between the current wall-clock time and the
 ## time that the function tic () was last called, in seconds.
 ##
 ## See also: tic, clock, etime, cputime
 
+## Author: jwe
+
 function secs = toc ()
 
   if (nargin != 0)
     warning ("toc: ignoring extra arguments");
   endif
 
   global _time_tic_called;
 
diff --git a/scripts/miscellaneous/version.m b/scripts/miscellaneous/version.m
--- a/scripts/miscellaneous/version.m
+++ b/scripts/miscellaneous/version.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage: version
 ##
 ## Return the Octave version number as a string.
 ##
 ## See also: OCTAVE_VERSION
 
+## Author: jwe
+
 function vs = version ()
 
   if (nargin != 0)
     warning ("version: ignoring extra arguments");
   endif
 
   vs = OCTAVE_VERSION;
 
diff --git a/scripts/plot/__plr1__.m b/scripts/plot/__plr1__.m
--- a/scripts/plot/__plr1__.m
+++ b/scripts/plot/__plr1__.m
@@ -12,16 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
+## Author: jwe
+
 function polar_int_1 (theta, fmt)
 
   if (nargin != 2)
     usage ("polar_int_1 (theta, fmt)");
   endif
 
   [nr, nc] = size (theta);
   if (nr == 1)
diff --git a/scripts/plot/__plr2__.m b/scripts/plot/__plr2__.m
--- a/scripts/plot/__plr2__.m
+++ b/scripts/plot/__plr2__.m
@@ -12,16 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
+## Author: jwe
+
 function polar_int_2 (theta, rho, fmt)
 
   if (nargin != 3)
     usage ("polar_int_2 (theta, rho, fmt)");
   endif
 
   if (any (imag (theta)))
     theta = real (theta);
diff --git a/scripts/plot/__plr__.m b/scripts/plot/__plr__.m
--- a/scripts/plot/__plr__.m
+++ b/scripts/plot/__plr__.m
@@ -12,16 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
+## Author: jwe
+
 function polar_int (theta, rho, fmt)
 
   if (nargin == 1)
     [nr, nc] = size (theta);
     if (nr == 1)
       theta = theta.';
       tmp = nr;
       nr = nc;
diff --git a/scripts/plot/__plt1__.m b/scripts/plot/__plt1__.m
--- a/scripts/plot/__plt1__.m
+++ b/scripts/plot/__plt1__.m
@@ -12,16 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
+## Author: jwe
+
 function plot_int_1 (x1, fmt)
 
   if (nargin < 1 || nargin > 2)
     usage ("plot_int_1 (x1, fmt)");
   endif
 
   if (nargin == 1)
     fmt = "";
diff --git a/scripts/plot/__plt2__.m b/scripts/plot/__plt2__.m
--- a/scripts/plot/__plt2__.m
+++ b/scripts/plot/__plt2__.m
@@ -12,16 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
+## Author: jwe
+
 function plot_int_2 (x1, x2, fmt)
 
   if (nargin < 2 || nargin > 3)
     usage ("plot_int_2 (x1, x2, fmt)");
   endif
 
   if (nargin == 2)
     fmt = "";
diff --git a/scripts/plot/__plt2mm__.m b/scripts/plot/__plt2mm__.m
--- a/scripts/plot/__plt2mm__.m
+++ b/scripts/plot/__plt2mm__.m
@@ -12,16 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
+## Author: jwe
+
 function plot_2_m_m (x, y, fmt)
 
   if (nargin < 2 || nargin > 3)
     msg = sprintf ("plot_2_m_m (x, y)\n");
     msg = sprintf ("%s              plot_2_m_m (x, y, fmt)", msg);
     usage (msg);
   elseif (nargin == 2)
     fmt = "";
diff --git a/scripts/plot/__plt2mv__.m b/scripts/plot/__plt2mv__.m
--- a/scripts/plot/__plt2mv__.m
+++ b/scripts/plot/__plt2mv__.m
@@ -12,16 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
+## Author: jwe
+
 function plot_2_m_v (x, y, fmt)
 
   if (nargin < 2 || nargin > 3)
     msg = sprintf ("plot_2_m_v (x, y)\n");
     msg = sprintf ("%s              plot_2_m_v (x, y, fmt)", msg);
     usage (msg);
   elseif (nargin == 2)
     fmt = "";
diff --git a/scripts/plot/__plt2ss__.m b/scripts/plot/__plt2ss__.m
--- a/scripts/plot/__plt2ss__.m
+++ b/scripts/plot/__plt2ss__.m
@@ -12,16 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
+## Author: jwe
+
 function plot_2_s_s (x, y, fmt)
 
   if (nargin < 2 || nargin > 3)
     msg = sprintf ("plot_2_s_s (x, y)");
     msg = sprintf ("%s              plot_2_s_s (x, y, fmt)", msg);
     usage (msg);
   elseif (nargin == 2)
     fmt = "";
diff --git a/scripts/plot/__plt2vm__.m b/scripts/plot/__plt2vm__.m
--- a/scripts/plot/__plt2vm__.m
+++ b/scripts/plot/__plt2vm__.m
@@ -12,16 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
+## Author: jwe
+
 function plot_2_v_m (x, y, fmt)
 
   if (nargin < 2 || nargin > 3)
     msg = sprintf ("plot_2_v_m (x, y)\n");
     msg = sprintf ("%s              plot_2_v_m (x, y, fmt)", msg);
     usage (msg);
   elseif (nargin == 2)
     fmt = "";
diff --git a/scripts/plot/__plt2vv__.m b/scripts/plot/__plt2vv__.m
--- a/scripts/plot/__plt2vv__.m
+++ b/scripts/plot/__plt2vv__.m
@@ -12,16 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
+## Author: jwe
+
 function plot_2_v_v (x, y, fmt)
 
   if (nargin < 2 || nargin > 3)
     msg = sprintf ("plot_2_v_v (x, y)\n");
     msg = sprintf ("%s              plot_2_v_v (x, y, fmt)", msg);
     usage (msg);
   elseif (nargin == 2)
     fmt = "";
diff --git a/scripts/plot/__plt__.m b/scripts/plot/__plt__.m
--- a/scripts/plot/__plt__.m
+++ b/scripts/plot/__plt__.m
@@ -12,16 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
+## Author: jwe
+
 function plot_int (caller, ...)
 
   if (nargin == 2)
 
     plot_int_1 (va_arg (), "");
 
   elseif (nargin > 2)
 
diff --git a/scripts/plot/__pltopt__.m b/scripts/plot/__pltopt__.m
--- a/scripts/plot/__pltopt__.m
+++ b/scripts/plot/__pltopt__.m
@@ -55,16 +55,18 @@
 ##     Number  Gnuplot colors     (lines)points style
 ##       1       red                 "*"
 ##       2       green               "+"
 ##       3       blue                "o"
 ##       4       magenta             "x"
 ##       5       cyan                house
 ##       6       brown               there exists
 
+## Author: jwe
+
 function fmt = plot_opt (caller, opt)
 
   set_color = 0;
   set_symbol = 0;
   set_lines = 0;
   set_dots = 0;
   set_points = 0;
   set_impulses = 0;
diff --git a/scripts/plot/axis.m b/scripts/plot/axis.m
--- a/scripts/plot/axis.m
+++ b/scripts/plot/axis.m
@@ -24,16 +24,18 @@
 ##
 ## Sets the axis limits.
 ##
 ## With no arguments, turns autoscaling on.
 ##
 ## If your plot is already drawn, then you need to REPLOT before 
 ## the new axis limits will take effect.
 
+## Author: jwe
+
 function curr_axis = axis (ax)
 
   ## This may not be correct if someone has used the gnuplot interface
   ## directly...
 
   global __current_axis__;
 
   if (! exist ("__current_axis__"))
diff --git a/scripts/plot/bar.m b/scripts/plot/bar.m
--- a/scripts/plot/bar.m
+++ b/scripts/plot/bar.m
@@ -34,16 +34,18 @@
 ##   [xb, yb] = bar (x, y);
 ##   plot (xb, yb);
 ##
 ## are equivalent.
 ##
 ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ##           stairs, gplot, gsplot, replot, xlabel, ylabel, title 
 
+## Author: jwe
+
 function [xb, yb] = bar (x, y)
 
   if (nargin == 1)
     if (is_vector (x))
       len = 3 * length (x) + 1;
       tmp_xb = tmp_yb = zeros (len, 1);
       tmp_xb(1) = 0.5;
       tmp_yb(1) = 0;
diff --git a/scripts/plot/contour.m b/scripts/plot/contour.m
--- a/scripts/plot/contour.m
+++ b/scripts/plot/contour.m
@@ -17,16 +17,18 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage: contour (z, n, x, y)
 ##
 ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title 
 
+## Author: jwe
+
 function contour (z, n, x, y)
 
 
   if (nargin == 1)
     n = 10;
   endif
 
   if (nargin == 1 || nargin == 2)
diff --git a/scripts/plot/figure.m b/scripts/plot/figure.m
--- a/scripts/plot/figure.m
+++ b/scripts/plot/figure.m
@@ -17,16 +17,18 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage: figure (n)
 ##
 ## Set the current plot window to plot window N.  This function
 ## currently requires X11 and a recent version of gnuplot.
 
+## Author: jwe
+
 function figure (n)
 
   if (nargin == 1)
     if (gnuplot_has_frames)
       if (! isempty (getenv ("DISPLAY")))
 	eval (sprintf ("set term x11 %d\n", n));
       else
 	error ("figure: requires X11 and valid DISPLAY");
diff --git a/scripts/plot/grid.m b/scripts/plot/grid.m
--- a/scripts/plot/grid.m
+++ b/scripts/plot/grid.m
@@ -21,16 +21,18 @@
 ##
 ## Turn grid lines on or off for plotting.
 ##
 ## If the argument is omitted, "on" is assumed.
 ##
 ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title 
 
+## Author: jwe
+
 function grid (x)
 
   if (nargin == 0)
     set grid;
   elseif (nargin == 1)
     if (isstr (x))
       if (strcmp ("off", x))
         set nogrid;
diff --git a/scripts/plot/hist.m b/scripts/plot/hist.m
--- a/scripts/plot/hist.m
+++ b/scripts/plot/hist.m
@@ -33,16 +33,18 @@
 ##
 ## Extreme values are lumped in the first and last bins.
 ##
 ## With two output arguments, produce the values NN and XX such that
 ## bar (XX, NN) will plot the histogram.
 ##
 ## See also: bar
 
+## Author: jwe
+
 function [nn, xx] = hist (y, x)
 
   if (nargin < 1 || nargin > 2)
     usage ("[nn, xx] = hist (y, x)");
   endif
     
   if (is_vector (y))
     max_val = max (y);
diff --git a/scripts/plot/loglog.m b/scripts/plot/loglog.m
--- a/scripts/plot/loglog.m
+++ b/scripts/plot/loglog.m
@@ -24,16 +24,18 @@
 ## Make a 2D plot of y versus x using a log scale for the x axis. 
 ##
 ## See the help message for the plot command for a description of how
 ## the arguments are interpreted. 
 ##
 ## See also: plot, semilogy, loglog, polar, mesh, contour, bar, stairs,
 ##           gplot, gsplot, replot, xlabel, ylabel, title 
 
+## Author: jwe
+
 function loglog (...)
 
   set logscale x;
   set logscale y;
   set nopolar;
 
   plot_int ("loglog", all_va_args);
 
diff --git a/scripts/plot/mesh.m b/scripts/plot/mesh.m
--- a/scripts/plot/mesh.m
+++ b/scripts/plot/mesh.m
@@ -23,16 +23,18 @@
 ## then corresponding elements represent vertices of the plot.  If x and
 ## y are vectors, then a typical vertex is (x(j), y(i), z(i,j)).  Thus,
 ## columns of z correspond to different x values and rows of z correspond
 ## to different y values.
 ##
 ## See also: plot, semilogx, semilogy, loglog, polar, meshgrid, meshdom, 
 ##           contour, bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title 
 
+## Author: jwe
+
 function mesh (x, y, z)
 
   if (nargin == 1)
     z = x;
     if (is_matrix (z))
       set hidden3d;
       set data style lines;
       set surface;
diff --git a/scripts/plot/meshdom.m b/scripts/plot/meshdom.m
--- a/scripts/plot/meshdom.m
+++ b/scripts/plot/meshdom.m
@@ -22,16 +22,18 @@
 ## Given vectors of x and y coordinates, return two matrices
 ## corresponding to the x and y coordinates of the mesh.
 ##
 ## See the file sombrero.m for an example of using mesh and meshdom.
 ##
 ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title 
 
+## Author: jwe
+
 function [xx, yy] = meshdom (x, y)
 
   if (nargin == 2)
     if (is_vector (x) && is_vector (y))
       xlen = length (x);
       ylen = length (y);
       xx = zeros (ylen, xlen);
       yy = zeros (ylen, xlen);
diff --git a/scripts/plot/meshgrid.m b/scripts/plot/meshgrid.m
--- a/scripts/plot/meshgrid.m
+++ b/scripts/plot/meshgrid.m
@@ -23,16 +23,18 @@
 ## to the x and y coordinates of a mesh.  The rows of xx are copies of x,
 ## and the columns of yy are copies of y.
 ##
 ## [xx, yy] = meshgrid (x) is an abbreviation for [xx, yy] = meshgrid (x, x).
 ##
 ## See also: plot, semilogx, semilogy, loglog, polar, mesh, meshdom, contour,
 ##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title 
 
+## Author: jwe
+
 function [xx, yy] = meshgrid (x, y)
 
   if (nargin == 1)
     y = x;
   endif
   if (nargin > 0 && nargin < 3)
     if (is_vector (x) && is_vector (y))
       xlen = length (x);
diff --git a/scripts/plot/plot.m b/scripts/plot/plot.m
--- a/scripts/plot/plot.m
+++ b/scripts/plot/plot.m
@@ -56,16 +56,18 @@
 ##
 ##   plot (b, "*")
 ##
 ##     b will be plotted with points of type "*".
 ##
 ## See also: semilogx, semilogy, loglog, polar, mesh, contour, plot_opt
 ##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title 
 
+## Author: jwe
+
 function plot (...)
 
   set nologscale;
   set nopolar;
 
   plot_int ("plot", all_va_args);
 
 endfunction
diff --git a/scripts/plot/polar.m b/scripts/plot/polar.m
--- a/scripts/plot/polar.m
+++ b/scripts/plot/polar.m
@@ -21,16 +21,18 @@
 ##
 ## Make a 2D plot given polar the coordinates theta and rho.
 ##
 ## The optional third argument specifies the line type.
 ##
 ## See also: plot, semilogx, semilogy, loglog, mesh, contour, bar,
 ##           stairs, gplot, gsplot, replot, xlabel, ylabel, title 
 
+## Author: jwe
+
 function polar (x1, x2, fmt)
 
   set nologscale;
   set nopolar;
 
   if (nargin == 3)
     if (isstr (fmt))
       fmt = plot_opt ("polar", fmt);
diff --git a/scripts/plot/semilogx.m b/scripts/plot/semilogx.m
--- a/scripts/plot/semilogx.m
+++ b/scripts/plot/semilogx.m
@@ -24,16 +24,18 @@
 ## Make a 2D plot of y versus x using a log scale for the x axis. 
 ##
 ## See the help message for the plot command for a description of how
 ## the arguments are interpreted. 
 ##
 ## See also: plot, semilogy, loglog, polar, mesh, contour, bar, stairs,
 ##           gplot, gsplot, replot, xlabel, ylabel, title 
 
+## Author: jwe
+
 function semilogx (...)
 
   set logscale x;
   set nologscale y;
   set nopolar;
 
   plot_int ("semilogx", all_va_args);
 
diff --git a/scripts/plot/semilogy.m b/scripts/plot/semilogy.m
--- a/scripts/plot/semilogy.m
+++ b/scripts/plot/semilogy.m
@@ -24,16 +24,18 @@
 ## Make a 2D plot of y versus x using a log scale for the x axis. 
 ##
 ## See the help message for the plot command for a description of how
 ## the arguments are interpreted. 
 ##
 ## See also: plot, semilogx, loglog, polar, mesh, contour, bar, stairs,
 ##           gplot, gsplot, replot, xlabel, ylabel, title 
 
+## Author: jwe
+
 function semilogy (...)
 
   set nologscale x;
   set logscale y;
   set nopolar;
 
   plot_int ("semilogy", all_va_args);
 
diff --git a/scripts/plot/shg.m b/scripts/plot/shg.m
--- a/scripts/plot/shg.m
+++ b/scripts/plot/shg.m
@@ -20,16 +20,18 @@
 ## usage: shg
 ##
 ## Show the graph window.  Currently, this is the same as executing
 ## replot without any arguments.
 ##
 ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel
 
+## Author: jwe
+
 function shg ()
 
   if (nargin != 0)
     warning ("shg: ignoring extra arguments");
   endif
 
   replot
 
diff --git a/scripts/plot/sombrero.m b/scripts/plot/sombrero.m
--- a/scripts/plot/sombrero.m
+++ b/scripts/plot/sombrero.m
@@ -19,16 +19,18 @@
 
 ## usage: sombrero (n)
 ##
 ## Draw a `sombrero' in three dimensions using n grid lines.  The
 ## function plotted is
 ##
 ##   z = sin (x^2 + y^2) / (x^2 + y^2);
 
+## Author: jwe
+
 function sombrero (n)
 
   if (nargin != 1)
     usage ("sombrero (n)");
   endif
 
   x = y = linspace (-8, 8, n)';
   [xx, yy] = meshdom (x, y);
diff --git a/scripts/plot/stairs.m b/scripts/plot/stairs.m
--- a/scripts/plot/stairs.m
+++ b/scripts/plot/stairs.m
@@ -34,16 +34,18 @@
 ##   [xs, ys] = stairs (x, y);
 ##   plot (xs, ys);
 ##
 ## are equivalent.
 ##
 ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ##           bar, gplot, gsplot, replot, xlabel, ylabel, title 
 
+## Author: jwe
+
 function [xs, ys] = stairs (x, y)
 
 
   if (nargin == 1)
     if (is_vector (x))
       len = 2 * length (x);
       tmp_xs = tmp_ys = zeros (len, 1);
       k = 0;
diff --git a/scripts/plot/title.m b/scripts/plot/title.m
--- a/scripts/plot/title.m
+++ b/scripts/plot/title.m
@@ -20,16 +20,18 @@
 ## usage: title (text)
 ##
 ## Defines a title for a plot.  The title will appear the next time a
 ## plot is displayed. 
 ##
 ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel
 
+## Author: jwe
+
 function title (text)
 
   if (nargin != 1)
     usage ("title (text)");
   endif
 
   if (isstr (text))
     command = sprintf ("set title \"%s\"", text);
diff --git a/scripts/plot/xlabel.m b/scripts/plot/xlabel.m
--- a/scripts/plot/xlabel.m
+++ b/scripts/plot/xlabel.m
@@ -20,16 +20,18 @@
 ## usage: xlabel (text)
 ##
 ## Defines a label for the x-axis of a plot.  The label will appear the
 ## next time a plot is displayed.
 ##
 ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ##           bar, stairs, gplot, gsplot, replot, ylabel, title
 
+## Author: jwe
+
 function xlabel (text)
 
   if (nargin != 1)
     usage ("xlabel (text)");
   endif
 
   if (isstr (text))
     command = sprintf ("set xlabel \"%s\"", text);
diff --git a/scripts/plot/ylabel.m b/scripts/plot/ylabel.m
--- a/scripts/plot/ylabel.m
+++ b/scripts/plot/ylabel.m
@@ -20,16 +20,18 @@
 ## usage: ylabel (text)
 ##
 ## Defines a label for the y-axis of a plot.  The label will appear the
 ## next time a plot is displayed.
 ##
 ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ##           bar, stairs, gplot, gsplot, replot, xlabel, title
 
+## Author: jwe
+
 function ylabel (text)
 
   if (nargin != 1)
     usage ("ylabel (text)");
   endif
 
   if (isstr (text))
     command = sprintf ("set ylabel \"%s\"", text);
diff --git a/scripts/polynomial/polyder.m b/scripts/polynomial/polyder.m
--- a/scripts/polynomial/polyder.m
+++ b/scripts/polynomial/polyder.m
@@ -16,16 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage: polyder (p)
 ##
 ## SEE ALSO: polyderiv
 
+## Author: jwe
+
 function q = polyder (p)
 
   if (nargin == 1)
     q = polyderiv (p);
   else
     usage ("polyder (vector)");
   endif
 
diff --git a/scripts/set/complement.m b/scripts/set/complement.m
--- a/scripts/set/complement.m
+++ b/scripts/set/complement.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage: complement (a, b)
 ##
 ## Returns the elements of set b that are not in set a.
 ##
 ## See - create_set, union, intersection
 
+## Author: jwe
+
 function y = complement (a, b)
 
   if (nargin != 2)
     usage ("complement(a,b)");
   endif
 
   if (isempty (a))
     y = create_set(b);
diff --git a/scripts/set/create_set.m b/scripts/set/create_set.m
--- a/scripts/set/create_set.m
+++ b/scripts/set/create_set.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage: create_set(x)
 ##
 ## Returns the unique elements of x, sorted in ascending order.
 ##
 ## See - union, intersection, complement
 
+## Author: jwe
+
 function y = create_set(x)
 
   if ( nargin != 1)
     usage ("create_set(x)");
   endif
 
   if(isempty(x))
     y = [];
diff --git a/scripts/set/intersection.m b/scripts/set/intersection.m
--- a/scripts/set/intersection.m
+++ b/scripts/set/intersection.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage: intersection(a,b)
 ##
 ## Returns the intersection of sets a and b.
 ##
 ## See - create_set, union, complement
 
+## Author: jwe
+
 function y = intersection(a,b)
 
   if (nargin != 2)
     usage ("intersection(a,b)");
   endif
 
   if(isempty(a) || isempty(b))
     y = [];
diff --git a/scripts/set/union.m b/scripts/set/union.m
--- a/scripts/set/union.m
+++ b/scripts/set/union.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage: union(a,b)
 ##
 ## Returns the union of sets a and b.
 ##
 ## See - create_set, intersection, complement
 
+## Author: jwe
+
 function y = union(a,b)
 
   if (nargin != 2)
     usage ("union(a,b)");
   endif
 
   if(isempty(a))
     y = create_set(b);
diff --git a/scripts/signal/freqz.m b/scripts/signal/freqz.m
--- a/scripts/signal/freqz.m
+++ b/scripts/signal/freqz.m
@@ -30,16 +30,18 @@
 ##
 ## [h,w] = resp(b,a,n)
 ##   returns the response evaluated at n angular frequencies.  For fastest
 ##   computation n should factor into a small number of small primes.
 ##
 ## [h,w] = freqz(b,a,n,"whole")
 ##   evaluates the response at n frequencies between 0 and 2*pi.
 
+## Author: jwe
+
 function [h, w] = freqz(b,...)
 
   if (nargin == 1)
     ## Response of an FIR filter.
     a = 1;
     n = 512;
     region = "half";
   elseif (nargin == 2)
diff --git a/scripts/signal/sinc.m b/scripts/signal/sinc.m
--- a/scripts/signal/sinc.m
+++ b/scripts/signal/sinc.m
@@ -16,16 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage: sinc(x)
 ##
 ##        Returns sin(pi*x)/(pi*x).
 
+## Author: jwe
+
 function result = sinc (x)
 
   ## We either need to set the do_fortran_indexing variable to "true"
   ## or use reshape to convert the input matrix to a vector, so that
   ## we can use find to determine the elements of x that equal zero.
   ## I prefer reshaping.
 
   [nr, nc] = size(x);
diff --git a/scripts/specfun/betainc.m b/scripts/specfun/betainc.m
--- a/scripts/specfun/betainc.m
+++ b/scripts/specfun/betainc.m
@@ -16,13 +16,15 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## Usage: betainc (x, a, b)
 ##
 ## See also: betai
 
+## Author: jwe
+
 function y = betainc (x, a, b)
   
   y = betai (a, b, x);
 
 endfunction
diff --git a/scripts/specfun/gammainc.m b/scripts/specfun/gammainc.m
--- a/scripts/specfun/gammainc.m
+++ b/scripts/specfun/gammainc.m
@@ -16,13 +16,15 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## Usage: gammainc (x, a)
 ##
 ## See also: gammai
 
+## Author: jwe
+
 function y = gammainc (x, a)
   
   y = gammai (a, x);
 
 endfunction
diff --git a/scripts/special-matrix/hadamard.m b/scripts/special-matrix/hadamard.m
--- a/scripts/special-matrix/hadamard.m
+++ b/scripts/special-matrix/hadamard.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage: hadamard (k)
 ##
 ## Return the Hadamard matrix of order n = 2^k.
 ##
 ## See also: hankel, vander, hilb, invhilb, toeplitz
 
+## Author: jwe
+
 function retval = hadamard (k)
 
   if (nargin != 1)
     usage ("hadamard (n)");
   endif
 
   if (k < 1)
     retval = 1;
diff --git a/scripts/special-matrix/hankel.m b/scripts/special-matrix/hankel.m
--- a/scripts/special-matrix/hankel.m
+++ b/scripts/special-matrix/hankel.m
@@ -23,16 +23,18 @@
 ## c, and (optionally) the last row r.
 ##
 ## If the second argument is omitted, zeros are inserted below the main
 ## anti-diagonal.  If the last element of c is not the same as the first 
 ## element of r, the last element of c is used.
 ##
 ## See also: vander, hadamard, hilb, invhilb, toeplitz
 
+## Author: jwe
+
 function retval = hankel (c, r)
 
   if (nargin == 1)
     r = zeros (size (c));
   elseif (nargin != 2)
     usage ("hankel (c, r)");
   endif
 
diff --git a/scripts/special-matrix/hilb.m b/scripts/special-matrix/hilb.m
--- a/scripts/special-matrix/hilb.m
+++ b/scripts/special-matrix/hilb.m
@@ -21,16 +21,18 @@
 ##
 ## Return the Hilbert matrix of order n.  The i, j element of a Hilbert
 ## matrix is defined as
 ##
 ##  H (i, j) = 1 / (i + j - 1);
 ##
 ## See also: hankel, vander, hadamard, invhilb, toeplitz
 
+## Author: jwe
+
 function retval = hilb (n)
 
 
   if (nargin != 1)
     usage ("hilb (n)");
   endif
 
   nmax = length (n);
diff --git a/scripts/special-matrix/invhilb.m b/scripts/special-matrix/invhilb.m
--- a/scripts/special-matrix/invhilb.m
+++ b/scripts/special-matrix/invhilb.m
@@ -19,16 +19,18 @@
 
 ## usage: invhilb (n)
 ##
 ## Return the inverse of a Hilbert matrix of order n.  This is slow but
 ## exact.  Compare with inv (hilb (n)).
 ##
 ## See also: hankel, vander, hadamard, hilb, toeplitz
 
+## Author: jwe
+
 function retval = invhilb (n)
 
   if (nargin != 1)
     usage ("invhilb (n)");
   endif
 
   nmax = length (n);
   if (nmax == 1)
diff --git a/scripts/special-matrix/toeplitz.m b/scripts/special-matrix/toeplitz.m
--- a/scripts/special-matrix/toeplitz.m
+++ b/scripts/special-matrix/toeplitz.m
@@ -23,16 +23,18 @@
 ## c, and (optionally) the first row r.
 ##
 ## If the second argument is omitted, the first row is taken to be the
 ## same as the first column.  If the first element of c is not the same
 ## as the first element of r, the first element of c is used.
 ##
 ## See also: hankel, vander, hadamard, hilb, invhib
 
+## Author: jwe
+
 function retval = toeplitz (c, r)
 
   if (nargin == 1)
     r = c;
   elseif (nargin != 2)
     usage ("toeplitz (c, r)");
   endif
 
diff --git a/scripts/special-matrix/vander.m b/scripts/special-matrix/vander.m
--- a/scripts/special-matrix/vander.m
+++ b/scripts/special-matrix/vander.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage: vander (c)
 ##
 ## Return the Vandermonde matrix whose next to last column is c.
 ##
 ## See also: hankel, hadamard, hilb, invhilb, toeplitz
 
+## Author: jwe
+
 function retval = vander (c)
 
   if (nargin != 1)
     usage ("vander (c)");
   endif
 
   nr = rows (c);
   nc = columns (c);
diff --git a/scripts/statistics/mean.m b/scripts/statistics/mean.m
--- a/scripts/statistics/mean.m
+++ b/scripts/statistics/mean.m
@@ -21,16 +21,18 @@
 ##
 ## For vector arguments, return the mean the values.
 ##
 ## For matrix arguments, return a row vector containing the mean for
 ## each column.
 ##
 ## See also: median, std
 
+## Author: jwe
+
 function retval = mean (a)
 
   if (nargin != 1)
     usage ("mean (a)");
   endif
 
   [nr, nc] = size (a);
   if (nr == 1 || nc == 1)
diff --git a/scripts/statistics/median.m b/scripts/statistics/median.m
--- a/scripts/statistics/median.m
+++ b/scripts/statistics/median.m
@@ -21,16 +21,18 @@
 ##
 ## For vector arguments, return the median of the values.
 ##
 ## For matrix arguments, return a row vector containing the median for
 ## each column.
 ##
 ## See also: std, mean
 
+## Author: jwe
+
 function retval = median (a)
 
   if (nargin != 1)
     usage ("median (a)");
   endif
 
   [nr, nc] = size (a);
   s = sort (a);
diff --git a/scripts/statistics/std.m b/scripts/statistics/std.m
--- a/scripts/statistics/std.m
+++ b/scripts/statistics/std.m
@@ -20,16 +20,18 @@
 ## usage: std (a)
 ##
 ## For vector arguments, std returns the standard deviation of the
 ## values.  For matrix arguments, std returns a row vector containing
 ## the standard deviation for each column.
 ##
 ## See also: mean, median
 
+## Author: jwe
+
 function retval = std (a)
 
   if (nargin != 1)
     usage ("std (a)");
   endif
 
   nr = rows (a);
   nc = columns (a);
diff --git a/scripts/strings/bin2dec.m b/scripts/strings/bin2dec.m
--- a/scripts/strings/bin2dec.m
+++ b/scripts/strings/bin2dec.m
@@ -17,16 +17,18 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage:  bin2dec (x)
 ##
 ## Returns the decimal number corresponding to the binary number in
 ## quotes.  For example, bin2dec ("1110") returns 14.
 
+## Author: jwe
+
 function y = bin2dec (x)
 
 ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
   
   if (nargin != 1)
     usage ("bin2dec (x)");
   endif
 
diff --git a/scripts/strings/blanks.m b/scripts/strings/blanks.m
--- a/scripts/strings/blanks.m
+++ b/scripts/strings/blanks.m
@@ -16,16 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage:  blanks (n)
 ##
 ## Returns a string of n blanks.
 
+## Author: jwe
+
 function s = blanks (n)
   
 ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
 
   if (nargin != 1)
     usage ("blanks (n)");
   endif
   
diff --git a/scripts/strings/deblank.m b/scripts/strings/deblank.m
--- a/scripts/strings/deblank.m
+++ b/scripts/strings/deblank.m
@@ -16,16 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage:  deblank (s)
 ##
 ## Remove trailing blanks from the string s.
 
+## Author: jwe
+
 function t = deblank (s)
   
 ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
 
   if (nargin != 1)
     usage ("deblank (s)");
   endif
   
diff --git a/scripts/strings/dec2bin.m b/scripts/strings/dec2bin.m
--- a/scripts/strings/dec2bin.m
+++ b/scripts/strings/dec2bin.m
@@ -17,16 +17,18 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage:  dec2bin (x)
 ##
 ## Returns the binary number corresponding to the nonnegative integer
 ## x.  For example, dec2bin (14) returns "1110".
 
+## Author: jwe
+
 function y = dec2bin (x)
 
   ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
   
   if (nargin != 1)
     usage ("dec2bin (x)");
   endif
 
diff --git a/scripts/strings/dec2hex.m b/scripts/strings/dec2hex.m
--- a/scripts/strings/dec2hex.m
+++ b/scripts/strings/dec2hex.m
@@ -17,16 +17,18 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage:  dec2hex (d)
 ##
 ## Returns the hex number corresponding to the decimal number d.  For
 ## example, dec2hex (2748) returns "abc". 
 
+## Author: jwe
+
 function h = dec2hex (d)
 
 ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
 
   if (nargin != 1)
     usage ("dec2hex (d)");
   endif
   
diff --git a/scripts/strings/findstr.m b/scripts/strings/findstr.m
--- a/scripts/strings/findstr.m
+++ b/scripts/strings/findstr.m
@@ -25,16 +25,18 @@
 ## If the optional argument OVERLAP is nonzero, the returned vector
 ## can include overlapping positions (this is the default).
 ##
 ## For example, 
 ##
 ##   findstr ("abababa", "aba")     =>  [1, 3, 5]
 ##   findstr ("abababa", "aba", 0)  =>  [1, 5]
 
+## Author: jwe
+
 function v = findstr (s, t, overlap)
 
   ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
 
   if (nargin < 2 || nargin > 3)
     usage ("findstr (s, t [, overlap])");
   endif
 
diff --git a/scripts/strings/hex2dec.m b/scripts/strings/hex2dec.m
--- a/scripts/strings/hex2dec.m
+++ b/scripts/strings/hex2dec.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage:  hex2dec (h)
 ##
 ## Returns the decimal number corresponding to the hex number in
 ## quotes.  For example, hex2dec ("12B") and hex2dec ("12b") both
 ## return 299.
 
+## Author: jwe
+
 function d = hex2dec (h)
 
   ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
 
   if (nargin != 1)
     usage ("hex2dec (x)");
   endif
 
diff --git a/scripts/strings/index.m b/scripts/strings/index.m
--- a/scripts/strings/index.m
+++ b/scripts/strings/index.m
@@ -19,16 +19,18 @@
 
 ## usage:  index (s, t)
 ##
 ## Returns the position of the first occurence of the string T in the
 ## string S or 0 if no occurence is found.
 ##
 ## NOTE: this function does not work for arrays of strings.
 
+## Author: jwe
+
 function n = index (s, t)
 
   ## This is patterned after the AWK function of the same name.
 
   ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
 
   if (nargin != 2)
     usage ("index (s, t)");
diff --git a/scripts/strings/rindex.m b/scripts/strings/rindex.m
--- a/scripts/strings/rindex.m
+++ b/scripts/strings/rindex.m
@@ -19,16 +19,18 @@
 
 ## usage: rindex (s, t)
 ##
 ## Returns the position of the last occurence of the string T in the
 ## string S or 0 if no occurence is found.
 ##
 ## NOTE: this function does not work for arrays of strings.
 
+## Author: jwe
+
 function n = rindex (s, t)
 
   ## This is patterned after the AWK function of the same name.
 
   ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
 
   if (nargin != 2)
     usage ("rindex (s, t)");
diff --git a/scripts/strings/split.m b/scripts/strings/split.m
--- a/scripts/strings/split.m
+++ b/scripts/strings/split.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage:  m = split (s, t)
 ##
 ## Divides the string S into pieces separated by T, and stores the
 ## pieces as the rows of M (padded with blanks to form a valid
 ## matrix).
 
+## Author: jwe
+
 function m = split (s, t)
   
 ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
 
   if (nargin != 2)
     usage ("split (s, t)");
   endif
   
diff --git a/scripts/strings/str2mat.m b/scripts/strings/str2mat.m
--- a/scripts/strings/str2mat.m
+++ b/scripts/strings/str2mat.m
@@ -17,16 +17,18 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage:  m = str2mat (s1, ...)
 ##
 ## Forms the matrix M containing the strings S1, ... as its rows.
 ## Each string is padded with blanks in order to form a valid matrix.
 
+## Author: jwe
+
 function m = str2mat (...)
   
   ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
 
   if (nargin == 0)
     usage ("str2mat (s1, ...)");
   endif
 
diff --git a/scripts/strings/strcat.m b/scripts/strings/strcat.m
--- a/scripts/strings/strcat.m
+++ b/scripts/strings/strcat.m
@@ -12,16 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
+## Author: jwe
+
 function st = strcat (s, t, ...)
 
   if (nargin > 1)
     if (isstr (s) && isstr (t))
       tmpst = [s, t];
     else
       error ("strcat: all arguments must be strings");
     endif
diff --git a/scripts/strings/strcmp.m b/scripts/strings/strcmp.m
--- a/scripts/strings/strcmp.m
+++ b/scripts/strings/strcmp.m
@@ -24,16 +24,18 @@
 ## WARNING:  Unlike the C function of the same name, this function
 ## returns 1 for equal and zero for not equal.  Why?  To be compatible
 ## with Matlab, of course. 
 ##
 ## Why doesn't this always return a scalar instead of vector with
 ## elements corresponding to the rows of the string array?  To be
 ## compatible with Matlab, of course. 
 
+## Author: jwe
+
 function status = strcmp (s1, s2)
 
   if (nargin != 2)
     usage ("strcmp (s, t)");
   endif
 
   status = 0;
   if (isstr (s1) && isstr(s2))
diff --git a/scripts/strings/substr.m b/scripts/strings/substr.m
--- a/scripts/strings/substr.m
+++ b/scripts/strings/substr.m
@@ -17,16 +17,18 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage:  substr (s, beg, len)
 ##
 ## Returns the substring of S of length LEN starting at index BEG.
 ## If LEN is missing, the substring extends to the end of S.
 
+## Author: jwe
+
 function t = substr (s, beg, len)
 
   ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
 
   if (nargin < 2 || nargin > 3)
     usage ("substr (s, beg, len)");
   endif
 
diff --git a/scripts/time/asctime.m b/scripts/time/asctime.m
--- a/scripts/time/asctime.m
+++ b/scripts/time/asctime.m
@@ -14,16 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage: asctime (TMSTRUCT)
 
+## Author: jwe
+
 function retval = asctime (t)
 
   if (nargin == 1)
     retval = strftime ("%a %b %d %H:%M:%S %Y\n", t);
   else
     usage ("asctime (TMSTRUCT)");
   endif
 
diff --git a/scripts/time/clock.m b/scripts/time/clock.m
--- a/scripts/time/clock.m
+++ b/scripts/time/clock.m
@@ -18,16 +18,18 @@
 ## 02111-1307, USA.
 
 ## usage: clock ()
 ##
 ## Return current date and time in vector with elements
 ##
 ##   [ year, month, day-of-month, hour, minute, second ]
 
+## Author: jwe
+
 function retval = clock ()
 
   tm = localtime (time ());
 
   retval = zeros (1, 6);
 
   retval(1) = tm.year + 1900;
   retval(2) = tm.mon + 1;
diff --git a/scripts/time/ctime.m b/scripts/time/ctime.m
--- a/scripts/time/ctime.m
+++ b/scripts/time/ctime.m
@@ -14,16 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage: ctime (TIME)
 
+## Author: jwe
+
 function retval = ctime (t)
 
   if (nargin == 1)
     retval = asctime (localtime (t));
   else
     usage ("ctime (TIME)");
   endif
 
diff --git a/scripts/time/date.m b/scripts/time/date.m
--- a/scripts/time/date.m
+++ b/scripts/time/date.m
@@ -16,13 +16,15 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage: date ()
 ##
 ## Return current date in a string, in the form `18-Jul-94'.
 
+## Author: jwe
+
 function retval = date ()
 
   retval = strftime ("%d-%b-%y", localtime (time ()));
 
 endfunction
