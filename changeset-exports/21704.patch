# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1456469608 -39600
#      Fri Feb 26 17:53:28 2016 +1100
# Node ID ac59b72712fd9af86afb947be735c2b06b14eb38
# Parent  4bf980861fd621e6ea7e8457923953fb8892ab83
Clearer error messages when loading buggy sparse matrix files (bug #38414)

* Sparse.h (load_sparse_matrix): Move to Sparse.cc

* Sparse.cc (load_sparse_matrix): Print element number in all errors.
  If reading fails, print the offending field.

diff --git a/liboctave/array/Sparse.cc b/liboctave/array/Sparse.cc
--- a/liboctave/array/Sparse.cc
+++ b/liboctave/array/Sparse.cc
@@ -2676,16 +2676,120 @@ Sparse<T>::array_value () const
       for (octave_idx_type j = 0, nc = cols (); j < nc; j++)
         for (octave_idx_type i = cidx (j), iu = cidx (j+1); i < iu; i++)
           retval(ridx (i), j) = data (i);
     }
 
   return retval;
 }
 
+template <typename T>
+std::istream&
+read_sparse_matrix (std::istream& is, Sparse<T>& a,
+                    T (*read_fcn) (std::istream&))
+{
+  octave_idx_type nr = a.rows ();
+  octave_idx_type nc = a.cols ();
+  octave_idx_type nz = a.nzmax ();
+
+  if (nr > 0 && nc > 0)
+    {
+      octave_idx_type itmp;
+      octave_idx_type jtmp;
+      octave_idx_type iold = 0;
+      octave_idx_type jold = 0;
+      octave_idx_type ii = 0;
+      T tmp;
+
+      a.cidx (0) = 0;
+      for (octave_idx_type i = 0; i < nz; i++)
+        {
+          itmp = 0; jtmp = 0;
+          is >> itmp;
+          itmp--;
+
+          is >> jtmp;
+          jtmp--;
+
+          if (is.fail ())
+            {
+              is.clear();
+              std::string err_field;
+              is >> err_field;
+              (*current_liboctave_error_handler)
+                ("invalid sparse matrix: element %d: "
+                 "Symbols '%s' is not an integer format",
+                 i+1, err_field.c_str ());
+            }
+
+          if (itmp < 0 || itmp >= nr)
+            {
+              is.setstate (std::ios::failbit);
+
+              (*current_liboctave_error_handler)
+                ("invalid sparse matrix: element %d: "
+                 "row index = %d out of range",
+                 i+1, itmp + 1);
+            }
+
+          if (jtmp < 0 || jtmp >= nc)
+            {
+              is.setstate (std::ios::failbit);
+
+              (*current_liboctave_error_handler)
+                ("invalid sparse matrix: element %d: "
+                 "column index = %d out of range",
+                 i+1, jtmp + 1);
+            }
+
+          if (jtmp < jold)
+            {
+              is.setstate (std::ios::failbit);
+
+              (*current_liboctave_error_handler)
+                ("invalid sparse matrix: element %d:"
+                 "column indices must appear in ascending order (%d < %d)",
+                 i+1, jtmp, jold);
+            }
+          else if (jtmp > jold)
+            {
+              for (octave_idx_type j = jold; j < jtmp; j++)
+                a.cidx (j+1) = ii;
+            }
+          else if (itmp < iold)
+            {
+              is.setstate (std::ios::failbit);
+
+              (*current_liboctave_error_handler)
+                ("invalid sparse matrix: element %d: "
+                 "row indices must appear in ascending order in each column "
+                 "(%d < %d)",
+                 i+1, iold, itmp);
+            }
+
+          iold = itmp;
+          jold = jtmp;
+
+          tmp = read_fcn (is);
+
+          if (! is)
+            return is;  // Problem, return is in error state
+
+          a.data (ii) = tmp;
+          a.ridx (ii++) = itmp;
+        }
+
+      for (octave_idx_type j = jold; j < nc; j++)
+        a.cidx (j+1) = ii;
+    }
+
+  return is;
+}
+
+
 /*
  * Tests
  *
 
 %!function x = set_slice (x, dim, slice, arg)
 %!  switch (dim)
 %!    case 11
 %!      x(slice) = 2;
@@ -2893,10 +2997,11 @@ Sparse<T>::print_info (std::ostream& os,
      << prefix << "rep->ncols:  " << rep->ncols << "\n"
      << prefix << "rep->data:   " << static_cast<void *> (rep->d) << "\n"
      << prefix << "rep->ridx:   " << static_cast<void *> (rep->r) << "\n"
      << prefix << "rep->cidx:   " << static_cast<void *> (rep->c) << "\n"
      << prefix << "rep->count:  " << rep->count << "\n";
 }
 
 #define INSTANTIATE_SPARSE(T, API) \
-  template class API Sparse<T>;
-
+  template class API Sparse<T>; \
+  template std::istream& read_sparse_matrix<T> \
+    (std::istream& is, Sparse<T>& a, T (*read_fcn) (std::istream&));
diff --git a/liboctave/array/Sparse.h b/liboctave/array/Sparse.h
--- a/liboctave/array/Sparse.h
+++ b/liboctave/array/Sparse.h
@@ -692,93 +692,11 @@ public:
   { return map<U, U (&) (const T&)> (fcn); }
 
   bool indices_ok (void) const { return rep->indices_ok (); }
 };
 
 template <typename T>
 std::istream&
 read_sparse_matrix (std::istream& is, Sparse<T>& a,
-                    T (*read_fcn) (std::istream&))
-{
-  octave_idx_type nr = a.rows ();
-  octave_idx_type nc = a.cols ();
-  octave_idx_type nz = a.nzmax ();
-
-  if (nr > 0 && nc > 0)
-    {
-      octave_idx_type itmp;
-      octave_idx_type jtmp;
-      octave_idx_type iold = 0;
-      octave_idx_type jold = 0;
-      octave_idx_type ii = 0;
-      T tmp;
-
-      a.cidx (0) = 0;
-      for (octave_idx_type i = 0; i < nz; i++)
-        {
-          itmp = 0; jtmp = 0;
-          is >> itmp;
-          itmp--;
-
-          is >> jtmp;
-          jtmp--;
-
-          if (itmp < 0 || itmp >= nr)
-            {
-              is.setstate (std::ios::failbit);
-
-              (*current_liboctave_error_handler)
-                ("invalid sparse matrix: row index = %d out of range",
-                 itmp + 1);
-            }
-
-          if (jtmp < 0 || jtmp >= nc)
-            {
-              is.setstate (std::ios::failbit);
-
-              (*current_liboctave_error_handler)
-                ("invalid sparse matrix: column index = %d out of range",
-                 jtmp + 1);
-            }
-
-          if (jtmp < jold)
-            {
-              is.setstate (std::ios::failbit);
-
-              (*current_liboctave_error_handler)
-                ("invalid sparse matrix: "
-                 "column indices must appear in ascending order");
-            }
-          else if (jtmp > jold)
-            {
-              for (octave_idx_type j = jold; j < jtmp; j++)
-                a.cidx (j+1) = ii;
-            }
-          else if (itmp < iold)
-            {
-              is.setstate (std::ios::failbit);
-
-              (*current_liboctave_error_handler)
-                ("invalid sparse matrix: "
-                 "row indices must appear in ascending order in each column");
-            }
-
-          iold = itmp;
-          jold = jtmp;
-
-          tmp = read_fcn (is);
-
-          if (! is)
-            return is;  // Problem, return is in error state
-
-          a.data (ii) = tmp;
-          a.ridx (ii++) = itmp;
-        }
-
-      for (octave_idx_type j = jold; j < nc; j++)
-        a.cidx (j+1) = ii;
-    }
-
-  return is;
-}
+                    T (*read_fcn) (std::istream&));
 
 #endif
