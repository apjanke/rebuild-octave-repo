# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1514582701 -3600
#      Fri Dec 29 22:25:01 2017 +0100
# Node ID 0a567c6489ef7c59b47519aeda63c355056f768d
# Parent  7070fab40871ac7d4cb8435266924302e45e9af8
store last comment string which was manually selected (bug #52695)

* file-editor-tab.cc (do_comment_selected_text): propose last comment string
  in the input dialog for selecting the comment string;

* octave-settings.h: add key name for new preference (last comment string)

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -75,16 +75,17 @@ along with Octave; see the file COPYING.
 #include "interpreter.h"
 #include "oct-map.h"
 #include "octave-qt-link.h"
 #include "ov-usr-fcn.h"
 #include "symtab.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "version.h"
+#include "octave-settings.h"
 
 bool file_editor_tab::_cancelled = false;
 
 //! A file_editor_tab object consists of a text area and three left margins.
 //! The first holds breakpoints, bookmarks, and the debug program counter.
 //! The second holds line numbers.  The third holds "fold" marks, to hide
 //! sections of text.
 
@@ -1467,23 +1468,28 @@ file_editor_tab::do_comment_selected_tex
   QStringList comment_str = _edit_area->comment_string (comment);
   QString used_comment_str = comment_str.at (0);
 
   if (comment)
     {
       if (input_str)
         {
           bool ok;
+          QSettings *settings = resource_manager::get_settings ();
 
           used_comment_str = QInputDialog::getText (
-              this, tr ("Comment selected text"), tr ("Comment string to use:\n"),
-              QLineEdit::Normal, comment_str.at (0), &ok);
+              this, tr ("Comment selected text"),
+              tr ("Comment string to use:\n"), QLineEdit::Normal,
+              settings->value (oct_last_comment_str, comment_str.at (0)).toString (),
+              &ok);
 
           if ((! ok) || used_comment_str.isEmpty ())
-            used_comment_str = comment_str.at (0);  // No input, use preference
+            return;  // No input, do nothing
+          else
+            settings->setValue (oct_last_comment_str, used_comment_str);  // Store last
         }
     }
   else
     {
       // Uncommenting (several strings possible)
 
       // Sort strings according their length
       QStringList comment_str_sorted (comment_str.at (0));
diff --git a/libgui/src/octave-settings.h b/libgui/src/octave-settings.h
--- a/libgui/src/octave-settings.h
+++ b/libgui/src/octave-settings.h
@@ -30,14 +30,15 @@ along with Octave; see the file COPYING.
 #include <QStringList>
 
 // Octave comment strings
 const QString oct_comment_str_old ("editor/octave_comment_string");
 const int oct_comment_str_old_d = 0;
 
 const QString oct_comment_str ("editor/oct_comment_str");
 const QString oct_uncomment_str ("editor/oct_uncomment_str");
+const QString oct_last_comment_str ("editor/oct_last_comment_str");
 const QStringList oct_comment_strings (QStringList () << "##" << "#" << "%"<< "%%" << "%!");
 const int oct_comment_strings_count = 5;
 const int oct_comment_str_d = 0;
 const int oct_uncomment_str_d = 1 + 2 + 4 + 8;
 
 #endif
