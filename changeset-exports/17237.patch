# HG changeset patch
# User Rik <rik@octave.org>
# Date 1376436929 25200
#      Tue Aug 13 16:35:29 2013 -0700
# Node ID 5f14fc8feba322f2e579e70fb931a183dd9a590f
# Parent  6a6e3f1a824c0836428765515eb405112fe96d89
graphics.cc: Restore default graphics properties after %!tests.

* libinterp/corefcn/graphics.cc: Use unwind_protect blocks to restore
properties modified on root figure.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -2200,26 +2200,29 @@ graphics_object::set_value_or_default (c
     }
   else
     rep->set (name, val);
 }
 
 /*
 ## test setting of default values
 %!test
-%! hf = figure ("visible", "off");
-%! h = plot (1:10, 10:-1:1);
-%! set (0, "defaultlinelinewidth", 20);
-%! set (h, "linewidth", "default");
-%! lw_def = get (h, "linewidth");
-%! set (h, "linewidth", "factory");
-%! lw_fac = get (h, "linewidth");
-%! close (hf);
-%! assert (lw_def, 20);
-%! assert (lw_fac, 0.5);
+%! old_lw = get (0, "defaultlinelinewidth");
+%! unwind_protect
+%!   hf = figure ("visible", "off");
+%!   h = plot (1:10, 10:-1:1);
+%!   set (0, "defaultlinelinewidth", 20);
+%!   set (h, "linewidth", "default");
+%!   assert (get (h, "linewidth"), 20);
+%!   set (h, "linewidth", "factory");
+%!   assert (get (h, "linewidth"), 0.5);
+%! unwind_protect_cleanup
+%!   close (hf);
+%!   set (0, "defaultlinelinewidth", old_lw);
+%! end_unwind_protect
 */
 
 static double
 make_handle_fraction (void)
 {
   static double maxrand = RAND_MAX + 2.0;
 
   return (rand () + 1.0) / maxrand;
@@ -3155,29 +3158,34 @@ root_figure::properties::get_boundingbox
   Matrix pos = Matrix (1, 4, 0);
   pos(2) = screen_size(0);
   pos(3) = screen_size(1);
   return pos;
 }
 
 /*
 %!test
-%! set (0, "units", "pixels");
-%! sz = get (0, "screensize") - [1, 1, 0, 0];
-%! dpi = get (0, "screenpixelsperinch");
-%! set (0, "units", "inches");
-%! assert (get (0, "screensize"), sz / dpi, 0.5 / dpi);
-%! set (0, "units", "centimeters");
-%! assert (get (0, "screensize"), sz / dpi * 2.54, 0.5 / dpi * 2.54);
-%! set (0, "units", "points");
-%! assert (get (0, "screensize"), sz / dpi * 72, 0.5 / dpi * 72);
-%! set (0, "units", "normalized");
-%! assert (get (0, "screensize"), [0.0, 0.0, 1.0, 1.0]);
-%! set (0, "units", "pixels");
-%! assert (get (0, "screensize"), sz + [1, 1, 0, 0]);
+%! old_units = get (0, "units");
+%! unwind_protect
+%!   set (0, "units", "pixels");
+%!   sz = get (0, "screensize") - [1, 1, 0, 0];
+%!   dpi = get (0, "screenpixelsperinch");
+%!   set (0, "units", "inches");
+%!   assert (get (0, "screensize"), sz / dpi, 0.5 / dpi);
+%!   set (0, "units", "centimeters");
+%!   assert (get (0, "screensize"), sz / dpi * 2.54, 0.5 / dpi * 2.54);
+%!   set (0, "units", "points");
+%!   assert (get (0, "screensize"), sz / dpi * 72, 0.5 / dpi * 72);
+%!   set (0, "units", "normalized");
+%!   assert (get (0, "screensize"), [0.0, 0.0, 1.0, 1.0]);
+%!   set (0, "units", "pixels");
+%!   assert (get (0, "screensize"), sz + [1, 1, 0, 0]);
+%! unwind_protect_cleanup
+%!   set (0, "units", old_units);
+%! end_unwind_protect
 */
 
 void
 root_figure::properties::remove_child (const graphics_handle& gh)
 {
   gh_manager::pop_figure (gh);
 
   graphics_handle cf = gh_manager::current_figure ();
@@ -3875,24 +3883,29 @@ figure::properties::update_units (const 
 {
   position.set (convert_position (get_position ().matrix_value (), old_units,
                                   get_units (), screen_size_pixels ()), false);
 }
 
 /*
 %!test
 %! hf = figure ("visible", "off");
-%! set (0, "units", "pixels");
-%! rsz = get (0, "screensize");
-%! set (gcf (), "units", "pixels");
-%! fsz = get (gcf (), "position");
-%! set (gcf (), "units", "normalized");
-%! pos = get (gcf (), "position");
-%! close (hf);
-%! assert (pos, (fsz - [1, 1, 0, 0]) ./ rsz([3, 4, 3, 4]));
+%! old_units = get (0, "units");
+%! unwind_protect
+%!   set (0, "units", "pixels");
+%!   rsz = get (0, "screensize");
+%!   set (gcf (), "units", "pixels");
+%!   fsz = get (gcf (), "position");
+%!   set (gcf (), "units", "normalized");
+%!   pos = get (gcf (), "position");
+%!   assert (pos, (fsz - [1, 1, 0, 0]) ./ rsz([3, 4, 3, 4]));
+%! unwind_protect_cleanup
+%!   close (hf);
+%!   set (0, "units", old_units);
+%! end_unwind_protect
 */
 
 std::string
 figure::properties::get_title (void) const
 {
   if (is_numbertitle ())
     {
       std::ostringstream os;
@@ -4070,29 +4083,16 @@ axes::properties::sync_positions (void)
   tinset(2) = tightpos(0)+tightpos(2)-pos(0)-pos(2);
   tinset(3) = tightpos(1)+tightpos(3)-pos(1)-pos(3);
   tightinset = tinset;
   set_units (old_units);
   update_transform ();
 }
 
 /*
-%!xtest
-%! ## Doubling up on subplots results in axes out of order
-%! hf = figure ("visible", "off");
-%! graphics_toolkit (hf, "fltk");
-%! unwind_protect
-%!   subplot(2,1,1); plot(rand(10,1)); subplot(2,1,2); plot(rand(10,1));
-%!   subplot(2,1,1); plot(rand(10,1)); subplot(2,1,2); plot(rand(10,1));
-%!   hax = findall (gcf (), "type", "axes");
-%!   positions = cell2mat (get (hax, "position"));
-%!   assert (positions(1,2) > positions(2,2))
-%! unwind_protect_cleanup
-%!   close (hf);
-%! end_unwind_protect
 %!test
 %! hf = figure ("visible", "off");
 %! graphics_toolkit (hf, "fltk");
 %! unwind_protect
 %!   subplot(2,1,1); plot(rand(10,1)); subplot(2,1,2); plot(rand(10,1));
 %!   hax = findall (gcf (), "type", "axes");
 %!   positions = cell2mat (get (hax, "position"));
 %!   outerpositions = cell2mat (get (hax, "outerposition"));
