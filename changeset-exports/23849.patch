# HG changeset patch
# User Rik <rik@octave.org>
# Date 1502298778 25200
#      Wed Aug 09 10:12:58 2017 -0700
# Node ID d139435d9193674fc382d351c0e99eafa964bcf8
# Parent  cbea10ff137e514c261f63924736b4f04c49aa23
run.m: recode BIST tests to eliminate temporary files.

* run.m: Move input validation BIST tests to end of file.  Remove unwind_protect blocks
which used variables that were not guaranteed to exist.  Use unlink to remove temporary
file before using rmdir to remove temporary directory.  Place assert statements after
temporary files have been removed.

diff --git a/scripts/miscellaneous/run.m b/scripts/miscellaneous/run.m
--- a/scripts/miscellaneous/run.m
+++ b/scripts/miscellaneous/run.m
@@ -85,53 +85,51 @@ function run (script)
     endif
     evalin ("caller", sprintf ("source ('%s');", script),
             "rethrow (lasterror ())");
   endif
 
 endfunction
 
 
+## Test script file execution
+%!test
+%! clear A  # the variable "A" should be set by the script
+%! assert (exist ("A"), 0);
+%! tmp_dir = tempname ();
+%! mkdir (tmp_dir);
+%! test_script = fullfile (tmp_dir, "test_script.m");
+%! fid = fopen (test_script, "w");
+%! fprintf (fid, "A = 1337;\n");
+%! fclose (fid);
+%! run (test_script);
+%! unlink (test_script);
+%! rmdir (tmp_dir);
+%! assert (exist ("A", "var"), 1);
+%! assert (A, 1337);
+
+## Test function file execution
+%!test
+%! tmp_dir = tempname ();
+%! mkdir (tmp_dir);
+%! test_function = fullfile (tmp_dir, "tf.m");
+%! fid = fopen (test_function, "w");
+%! fprintf (fid, "function tf ()\n");
+%! fprintf (fid, "  addpath (\"%s\");\n", tmp_dir);
+%! fprintf (fid, "endfunction\n");
+%! fclose (fid);
+%! ## Check if temporary directory is on the loadpath.
+%! ## Function 'dir_in_loadpath' is broken for this use case, so code a test.
+%! dirs = strsplit (path (), ":");
+%! tstval1 = any (strcmp (tmp_dir, dirs));
+%! run (test_function);
+%! dirs = strsplit (path (), ":");
+%! tstval2 = any (strcmp (tmp_dir, dirs));
+%! unlink (test_function);
+%! rmdir (tmp_dir);
+%! rmpath (tmp_dir);
+%! assert (tstval1, false);
+%! assert (tstval2, true);
+
 ## Test input validation
 %!error run ()
 %!error run ("a", "b")
 %!error <SCRIPT must exist> run ("__A_very_#unlikely#_file_name__")
-
-## Test script file execution
-%!test
-%! unwind_protect
-%!   clear A  # the variable "A" should be set by the script
-%!   assert (exist ("A"), 0);
-%!   tmp_dir = tempname ();
-%!   mkdir (tmp_dir);
-%!   test_script = fullfile (tmp_dir, "test_script.m");
-%!   fid = fopen (test_script, "w");
-%!   fprintf (fid, "A = 1337;\n");
-%!   fclose (fid);
-%!   run (test_script);
-%!   assert (exist ("A", "var"), 1);
-%!   assert (A, 1337);
-%! unwind_protect_cleanup
-%!   rmdir (tmp_dir);
-%! end_unwind_protect
-
-## Test function file execution
-%!test
-%! unwind_protect
-%!   tmp_dir = tempname ();
-%!   mkdir (tmp_dir);
-%!   test_function = fullfile (tmp_dir, "tf.m");
-%!   fid = fopen (test_function, "w");
-%!   fprintf (fid, "function tf ()\n");
-%!   fprintf (fid, "addpath (\"%s\");\n", tmp_dir);
-%!   fprintf (fid, "endfunction\n");
-%!   fclose (fid);
-%!   ## Check if temporary directory is on the loadpath.
-%!   ## Function `dir_in_loadpath` seems not applicable for this check.
-%!   dirs = strsplit (path (), ":");
-%!   assert (any (strcmp (tmp_dir, dirs)), false)
-%!   run (test_function);
-%!   dirs = strsplit (path (), ":");
-%!   assert (any (strcmp (tmp_dir, dirs)))
-%! unwind_protect_cleanup
-%!   rmdir (tmp_dir);
-%!   rmpath (tmp_dir);
-%! end_unwind_protect
