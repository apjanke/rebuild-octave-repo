# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1222183905 14400
#      Tue Sep 23 11:31:45 2008 -0400
# Node ID 10b63c4fd4138010b71abcaa7acc330de49d5f03
# Parent  de8b07e95d1b96a20f815b0825799d625fe8ec53
Add -file option to who/whos

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2008-09-23  David Bateman  <dbateman@free.fr>
+
+	* variables.cc (static octave_value do_who (int, const string_vector&,
+	bool, bool, std::string): Add final message argument and simple
+	treatment of the "-file" option.
+
 2008-09-22  David Bateman  <dbateman@free.fr>
 
 	* debug.cc (static octave_user_code * get_user_code 
 	(const std::string&)): Only check user code as break points can't
 	be set in builtins or oct-files.
 	(bp_table::intmap bp_table::do_remove_all_breakpoints_in_file 
 	(const std::string&, bool)): Add flag to silence the error message 
 	from this function if a user code with breakpoints is not found.
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1626,30 +1626,71 @@ public:
 
 private:
   std::list<symbol_info> lst;
 
 };
 
 static octave_value
 do_who (int argc, const string_vector& argv, bool return_list,
-	bool verbose = false)
+	bool verbose = false, std::string msg = std::string ())
 {
   octave_value retval;
 
   std::string my_name = argv[0];
 
   bool global_only = false;
   bool have_regexp = false;
 
   int i;
   for (i = 1; i < argc; i++)
     {
       if (argv[i] == "-file")
-	error ("%s: `-file' option not implemented", my_name.c_str ());
+	{
+	  // FIXME. This is an inefficient manner to implement this as the 
+	  // variables are loaded in to a temporary context and then treated.
+	  // It would be better to refecat symbol_info_list to not store the
+	  // symbol records and then use it in load-save.cc (do_load) to
+	  // implement this option there so that the variables are never 
+	  // stored at all.
+	  if (i == argc - 1)
+	    error ("whos: -file argument must be followed by a file name");
+	  else
+	    {
+	      std::string nm = argv [i + 1];
+
+	      symbol_table::scope_id tmp_scope = symbol_table::alloc_scope ();
+
+	      unwind_protect::begin_frame ("do_who_file");
+
+	      symbol_table::push_scope (tmp_scope);
+	      symbol_table::push_context ();
+	      octave_call_stack::push (0);
+
+	      unwind_protect::add (octave_call_stack::unwind_pop, 0);
+
+	      unwind_protect::add (symbol_table::clear_variables);
+
+	      feval ("load", octave_value (nm), 0);
+
+	      if (! error_state)
+		{
+		  std::string newmsg = std::string ("Variables in the file ") + 
+		    nm + ":\n\n";
+
+		  retval =  do_who (i, argv, return_list, verbose, newmsg);
+		}
+
+	      unwind_protect::run_frame ("do_who_file");
+
+	      symbol_table::erase_scope (tmp_scope);
+	    }
+
+	  return retval;
+	}
       else if (argv[i] == "-regexp")
 	have_regexp = true;
       else if (argv[i] == "global")
 	global_only = true;
       else if (argv[i][0] == '-')
 	warning ("%s: unrecognized option `%s'", my_name.c_str (),
 		 argv[i].c_str ());
       else
@@ -1758,20 +1799,23 @@ do_who (int argc, const string_vector& a
 
 	  retval = symbol_stats.map_value (caller_function_name, 1);
 	}
       else
 	retval = Cell (string_vector (symbol_names));
     }
   else if (! (symbol_stats.empty () && symbol_names.empty ()))
     {
-      if (global_only)
-	octave_stdout << "Global variables:\n\n";
+      if (msg.length () == 0)
+	if (global_only)
+	  octave_stdout << "Global variables:\n\n";
+	else
+	  octave_stdout << "Variables in the current scope:\n\n";
       else
-	octave_stdout << "Variables in the current scope:\n\n";
+	octave_stdout << msg;
 
       if (verbose)
 	symbol_stats.display (octave_stdout);
       else
 	{
 	  string_vector names (symbol_names);
 
 	  names.list_in_columns (octave_stdout);
@@ -1793,16 +1837,19 @@ may not be combined.\n\
 \n\
 @table @code\n\
 @item global\n\
 List the variables in the global scope rather than the current scope.\n\
 @item -regexp\n\
 The patterns are considered as regular expressions and will be used\n\
 for matching the variables to display. The same pattern syntax as for\n\
 the @code{regexp} function is used.\n\
+@item -file\n\
+The following argument is treated as a filename, and the variables that\n\
+are found within this file are listed.\n\
 @end table\n\
 \n\
 Valid patterns are the same as described for the @code{clear} command\n\
 above.  If no patterns are supplied, all symbols from the given category\n\
 are listed.  By default, only user defined functions and variables\n\
 visible in the local scope are displayed.\n\
 \n\
 The command @kbd{whos} is equivalent to @kbd{who -long}.\n\
