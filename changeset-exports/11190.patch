# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1288831020 25200
#      Wed Nov 03 17:37:00 2010 -0700
# Node ID b1f4bdc276b6d0aad0489f52e31a7f32ba8bd225
# Parent  a3cb42b394eb60de6094dc152593d354ca83187d
Use CamelCase for 'UniformOutput' option to cellfun.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2010-11-03  Rik  <octave@nomad.inbox5.com>
+
+	* general/accumdim.m, general/cell2mat.m, general/common_size.m,
+	  general/structfun.m, pkg/pkg.m, strings/untabify.m: Use CamelCase
+	  for 'UniformOutput' option to cellfun.
+
 2010-11-03  Rik  <octave@nomad.inbox5.com>
 
 	* scripts/plot/plotyy.m, scripts/plot/xlim.m, scripts/plot/ylim.m,
 	  scripts/plot/zlim.m: Fix typos in docstring and demo string.
 
 2010-11-03  Rik  <octave@nomad.inbox5.com>
 
 	* general/common_size.m, miscellaneous/private/__xzip__.m, 
diff --git a/scripts/general/accumdim.m b/scripts/general/accumdim.m
--- a/scripts/general/accumdim.m
+++ b/scripts/general/accumdim.m
@@ -111,19 +111,19 @@ function A = accumdim (subs, val, dim, n
   ## Collect common slices.
   szc = num2cell (sz);
   szc{dim} = diff ([0; jdx]);
   subsc = {':'}(ones (1, length (sz)));
   subsc{dim} = idx;
   val = mat2cell (val(subsc{:}), szc{:});
   ## Apply reductions. Special case min, max.
   if (func == @min || func == @max)
-    val = cellfun (func, val, {[]}, {dim}, "uniformoutput", false);
+    val = cellfun (func, val, {[]}, {dim}, "UniformOutput", false);
   else
-    val = cellfun (func, val, {dim}, "uniformoutput", false);
+    val = cellfun (func, val, {dim}, "UniformOutput", false);
   endif
   subs = subs(jdx);
 
   ## Concatenate reduced slices.
   val = cat (dim, val{:});
 
   ## Construct matrix of fillvals.
   if (fillval == 0)
diff --git a/scripts/general/cell2mat.m b/scripts/general/cell2mat.m
--- a/scripts/general/cell2mat.m
+++ b/scripts/general/cell2mat.m
@@ -65,17 +65,17 @@ function m = cell2mat (c)
     nd = ndims (c);
     [~, isc] = sort (sc);
     for idim = isc
       if (sc(idim) == 1)
         continue;
       endif
       xdim = [1:idim-1, idim+1:nd];
       cc = num2cell (c, xdim);
-      c = cellfun (@cat, {idim}, cc{:}, "uniformoutput", false);
+      c = cellfun (@cat, {idim}, cc{:}, "UniformOutput", false);
     endfor
     m = c{1};
   endif
 
 endfunction
 
 ## Tests
 %!shared C, D, E, F
diff --git a/scripts/general/common_size.m b/scripts/general/common_size.m
--- a/scripts/general/common_size.m
+++ b/scripts/general/common_size.m
@@ -67,15 +67,15 @@ function [errorcode, varargout] = common
       varargout = varargin;
     else
       errorcode = 0;
       if (nargout > 1)
         scal = !nscal;
         varargout = varargin;
         if (any (nscal))
           dims = size (varargin{find (nscal, 1)});
-          subs = arrayfun (@ones, 1, dims, "uniformoutput", false);
+          subs = arrayfun (@ones, 1, dims, "UniformOutput", false);
           varargout(scal) = cellindexmat (varargin(scal), subs{:});
         endif
       endif
     endif
   endif
 endfunction
diff --git a/scripts/general/structfun.m b/scripts/general/structfun.m
--- a/scripts/general/structfun.m
+++ b/scripts/general/structfun.m
@@ -135,11 +135,11 @@ endfunction
 %! [aa, bb] = structfun(@twoouts, s);
 %! assert(aa, c);
 %! assert(bb, d);
 
 %!test
 %! s = struct ("a", {1, 2, 3}, "b", {4, 5, 6});
 %! c = struct ("a", {2, 4, 6}, "b", {8, 10, 12});
 %! d = struct ("a", {1, 4, 9}, "b", {16, 25, 36});
-%! [aa, bb] = structfun(@twoouts, s, "uniformoutput", false);
+%! [aa, bb] = structfun(@twoouts, s, "UniformOutput", false);
 %! assert(aa, c);
 %! assert(bb, d);
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -337,18 +337,18 @@ function [local_packages, global_package
       if (length (files) == 0)
         error ("you must specify at least one filename when calling 'pkg install'");
       endif
 
       local_files = {};
       unwind_protect
 
         if (octave_forge)
-          [urls, local_files] = cellfun (@get_forge_download, files, "uniformoutput", false);
-          [files, succ] = cellfun (@urlwrite, urls, local_files, "uniformoutput", false);
+          [urls, local_files] = cellfun (@get_forge_download, files, "UniformOutput", false);
+          [files, succ] = cellfun (@urlwrite, urls, local_files, "UniformOutput", false);
           succ = [succ{:}];
           if (! all (succ))
             i = find (! succ, 1);
             error ("could not download file %s from url %s", local_files{i}, urls{i});
           endif
         endif
 
         install (files, deps, auto, prefix, archprefix, verbose, local_list, 
diff --git a/scripts/strings/untabify.m b/scripts/strings/untabify.m
--- a/scripts/strings/untabify.m
+++ b/scripts/strings/untabify.m
@@ -51,17 +51,17 @@
 ## Created: 2010-10-15
 
 function s = untabify (t, tw = 8, db = false)
 
  if (nargin > 0 && nargin < 4 && (ischar (t) || iscellstr (t)))
    if (ischar (t))
      s = replace_tabs (t, tw);
    else
-     s = cellfun (@(str) replace_tabs (str, tw), t, "uniformoutput", false);
+     s = cellfun (@(str) replace_tabs (str, tw), t, "UniformOutput", false);
    endif
    if (db)
      s = deblank (s);
    endif
  else
    print_usage ();
  endif
 
