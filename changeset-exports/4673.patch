# HG changeset patch
# User jwe
# Date 1071072714 0
#      Wed Dec 10 16:11:54 2003 +0000
# Node ID 6639c25740236f53d7ed3c3cfb30b86237b07423
# Parent  2c5adf308c84f6817ff2072b367c895dbfed876d
[project @ 2003-12-10 16:11:54 by jwe]

diff --git a/liboctave/Array-util.cc b/liboctave/Array-util.cc
--- a/liboctave/Array-util.cc
+++ b/liboctave/Array-util.cc
@@ -306,25 +306,16 @@ any_zero_len (const dim_vector& frozen_l
 	  retval = true;
 	  break;
 	}
     }
 
   return retval;
 }
 
-dim_vector
-get_zero_len_size (const dim_vector& /* frozen_lengths */,
-		   const dim_vector& /* dimensions */)
-{
-  dim_vector retval;
-  assert (0);
-  return retval;
-}
-
 bool
 all_colon_equiv (const Array<idx_vector>& ra_idx,
 		 const dim_vector& frozen_lengths)
 {
   bool retval = true;
 
   int idx_n = ra_idx.length ();
 
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1854,24 +1854,27 @@ Array<T>::indexN (idx_vector& ra_idx, in
 
       if (len == 0)
 	{
 	  if (any_zero_len (idx_orig_dims))
 	    retval = Array<T> (idx_orig_dims);
 	  else
 	    {
 	      dim_vector new_dims;
+
 	      new_dims.resize (n_dims);
 
 	      for (int i = 0; i < n_dims; i++)
 	        {
 		  if ((dims ())(i) == 1)
 		    new_dims(i) = 1;
 		}
 
+	      new_dims.chop_trailing_singletons ();
+
 	      retval = Array<T> (new_dims);
 	    }
 	}
       else
 	{
 	  if (vector_equivalent(idx_orig_dims))
 	    {
 	      // Array<int> index (n_dims, len);
@@ -1880,16 +1883,18 @@ Array<T>::indexN (idx_vector& ra_idx, in
 	      new_dims.resize (n_dims);
 
 	      for (int i = 0; i < n_dims; i++)
 	        {
 		  if ((dims ())(i) == 1)
 		    new_dims(i) = 1;
 	        }
 
+	      new_dims.chop_trailing_singletons ();
+
 	      retval = Array<T> (tmp, new_dims);
 	    }
 	  else
 	    retval = Array<T> (tmp, idx_orig_dims);
 
 	  (*current_liboctave_error_handler)
 	    ("I do not know what to do here yet!");
 	}
@@ -1912,16 +1917,18 @@ Array<T>::indexN (idx_vector& ra_idx, in
 	  if (ra_idx.one_zero_only ())
 	    {
 	      result_dims.resize (2);
 	      int ntot = ra_idx.ones_count ();
 	      result_dims(0) = ntot;
 	      result_dims(1) = (ntot > 0 ? 1 : 0);
 	    }
 
+	  result_dims.chop_trailing_singletons ();
+
 	  retval.resize (result_dims);
 
 	  int n = number_of_elements (result_dims);
 
 	  int r_dims = result_dims.length ();
 
 	  Array<int> iidx (r_dims, 0);
 
@@ -2017,56 +2024,54 @@ Array<T>::index (Array<idx_vector>& ra_i
     }
 
   dim_vector frozen_lengths = short_freeze (ra_idx, dimensions, resize_ok);
 
   if (frozen_lengths.length () <= n_dims)
     {
       if (all_ok (ra_idx))
 	{
-	  if (any_orig_empty (ra_idx))
+	  if (any_orig_empty (ra_idx) || any_zero_len (frozen_lengths))
 	    {
+	      frozen_lengths.chop_trailing_singletons ();
+
 	      retval.resize (frozen_lengths);
 	    }
-	  else if (any_zero_len (frozen_lengths))
-	    {
-	      retval.resize (get_zero_len_size (frozen_lengths, dimensions));
-	    }
 	  else if (all_colon_equiv (ra_idx, dimensions) 
 		    && frozen_lengths.length () == n_dims)
 	    {
 	      retval = *this;
 	    }
 	  else
 	    {
-	      retval.resize (frozen_lengths);
-
-	      int n = number_of_elements (frozen_lengths);
+	      dim_vector frozen_lengths_for_resize = frozen_lengths;
+
+	      frozen_lengths_for_resize.chop_trailing_singletons ();
+
+	      retval.resize (frozen_lengths_for_resize);
+
+	      int n = retval.length ();
 
 	      Array<int> result_idx (ra_idx.length (), 0);
 
 	      dim_vector this_dims = dims ();
 
 	      Array<int> elt_idx;
 
 	      for (int i = 0; i < n; i++)
 		{
 		  elt_idx = get_elt_idx (ra_idx, result_idx); 
 	
-		  int numelem_result = 
-		    get_scalar_idx (result_idx, frozen_lengths);
-
 		  int numelem_elt = get_scalar_idx (elt_idx, this_dims);
 
-		  if (numelem_result > length () || numelem_result < 0 
-		      || numelem_elt > length () || numelem_elt < 0)
+		  if (numelem_elt > length () || numelem_elt < 0)
 		    (*current_liboctave_error_handler)
-		      ("attempt to grow array along ambiguous dimension");
+		      ("invalid N-d array index");
 		  else
-		    retval.checkelem (numelem_result) = checkelem (numelem_elt);
+		    retval.elem (i) = elem (numelem_elt);
 		
 		  increment_index (result_idx, frozen_lengths);
 	
 		}
 	    }
 	}
     }
   else
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,23 @@
+2003-12-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array-util.cc (get_zero_len_size): Delete.
+	* Array.cc (Array<T>::index (Array<idx_vector>&, int, const T&)):
+	Handle zero-length result dimensions the same as empty original
+	indices.
+
+2003-12-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dim-vector.h (dim_vector::chop_trailing_singleton_dims,
+	dim_vector::dim_vector_rep::chop_trailing_singleton_dims):
+	New functions.
+	* Array.cc (ArrayN<T>::indexN): Use it.
+	(ArrayN<T>::index (Array<idx_vector>&, int, const T&)): Likewise.
+
 2003-11-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* boolNDArray.cc: Define BOOL ops.  Define mixed CMP ops.
 	* boolNDArray.h: Declare BOOL ops.  Declare mixed CMP ops.
 
 2003-11-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* mk-ops.awk: Also emit #include "Array-util.h".
diff --git a/liboctave/dim-vector.h b/liboctave/dim-vector.h
--- a/liboctave/dim-vector.h
+++ b/liboctave/dim-vector.h
@@ -106,16 +106,27 @@ protected:
     }
 
     int elem (int i) const
     {
       assert (i >= 0 && i < ndims);
       return dims[i];
     }
 
+    void chop_trailing_singletons (void)
+    {
+      for (int i = ndims - 1; i > 1; i--)
+	{
+	  if (dims[i] == 1)
+	    ndims--;
+	  else
+	    break;
+	}
+    }
+
   private:
 
     // No assignment!
 
     dim_vector_rep& operator = (const dim_vector_rep& dv);
   };
 
   dim_vector_rep *rep;
@@ -195,17 +206,16 @@ public:
 
 	rep = new dim_vector_rep (n, old_rep);
 
 	if (--old_rep->count <= 0)
 	  delete old_rep;
       }
   }
 
-
   std::string str (char sep = 'x') const
   {
     OSSTREAM buf;
 
     for (int i = 0; i < length (); i++)
       {
 	buf << elem (i);
 
@@ -282,16 +292,22 @@ public:
 
     int retval = n_dims > 0 ? elem (0) : 0;
 
     for (int i = 1; i < n_dims; i++)
       retval *= elem (i);
 
     return retval;
   }
+
+  void chop_trailing_singletons (void)
+  {
+    make_unique ();
+    rep->chop_trailing_singletons ();
+  }
 };
 
 static inline bool
 operator == (const dim_vector& a, const dim_vector& b)
 {
   bool retval = true;
 
   int a_len = a.length ();
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2003-12-10  Quentin Spencer  <qspencer@ieee.org>
+
+	* statistics/base/mean.m: Remove special case for row vectors.
+
 2003-11-19  Quentin Spencer  <qspencer@ieee.org>
 
 	* signal/freqz_plot.m: Save and restore automatic_replot too.
 
 2003-11-18  Danilo Piazzalunga  <danilopiazza@libero.it>
 
 	* statistics/base/iqr.m: Handle matrices.
 
diff --git a/scripts/statistics/base/mean.m b/scripts/statistics/base/mean.m
--- a/scripts/statistics/base/mean.m
+++ b/scripts/statistics/base/mean.m
@@ -82,20 +82,16 @@ function y = mean (x, opt1, opt2)
       dim = opt1;
     else
       usage ("mean: expecting opt to be a string");
     endif
   else
     usage ("mean (x, dim, opt) or mean (x, dim, opt)");
   endif
 
-  if (rows (x) == 1)
-    x = x.';
-  endif
-
   if (need_dim)
     t = find (size (x) != 1);
     if (isempty (t))
       dim = 1;
     else
       dim = t(1);
     endif
   endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2003-12-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* OPERATORS/op-cell.cc: Allow transpose for cell arrays.
+	* OPERATORS/op-m-m.cc, OPERATORS/op-cm-cm.cc,
+	OPERATORS/op-bm-bm.cc, OPERATORS/op-streamoff.cc,
+	OPERATORS/op-str-str.cc: Improve error message for attempt to
+	transpose N-d object.
+
 2003-11-27  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-arg-list.cc (F__end__): Handle N-d objects.
 
 2003-11-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* OPERATORS/op-b-bm.cc: New file.
 
diff --git a/src/OPERATORS/op-bm-bm.cc b/src/OPERATORS/op-bm-bm.cc
--- a/src/OPERATORS/op-bm-bm.cc
+++ b/src/OPERATORS/op-bm-bm.cc
@@ -40,17 +40,23 @@ Software Foundation, 59 Temple Place - S
 // unary bool matrix ops.
 
 DEFNDUNOP_OP (not, bool_matrix, bool_array, !)
 
 DEFUNOP (transpose, bool_matrix)
 {
   CAST_UNOP_ARG (const octave_bool_matrix&);
 
-  return octave_value (v.bool_matrix_value().transpose ());
+  if (v.ndims () > 2)
+    {
+      error ("transpose not defined for N-d objects");
+      return octave_value ();
+    }
+  else
+    return octave_value (v.bool_matrix_value().transpose ());
 }
 
 // bool matrix by bool matrix ops.
 
 DEFNDBINOP_FN (eq, bool_matrix, bool_matrix, bool_array, bool_array, mx_el_eq)
 DEFNDBINOP_FN (ne, bool_matrix, bool_matrix, bool_array, bool_array, mx_el_ne)
 
 DEFNDBINOP_FN (el_and, bool_matrix, bool_matrix, bool_array, bool_array,
diff --git a/src/OPERATORS/op-cell.cc b/src/OPERATORS/op-cell.cc
--- a/src/OPERATORS/op-cell.cc
+++ b/src/OPERATORS/op-cell.cc
@@ -34,21 +34,37 @@ Software Foundation, 59 Temple Place - S
 #include "ov-cell.h"
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "ov-typeinfo.h"
 #include "ops.h"
 
 // cell ops.
 
+DEFUNOP (transpose, cell)
+{
+  CAST_UNOP_ARG (const octave_cell&);
+
+  if (v.ndims () > 2)
+    {
+      error ("transpose not defined for N-d objects");
+      return octave_value ();
+    }
+  else
+    return octave_value (Cell (v.cell_value().transpose ()));
+}
+
 DEFASSIGNANYOP_FN (assign, cell, assign);
 
 void
 install_cell_ops (void)
 {
+  INSTALL_UNOP (op_transpose, octave_cell, transpose);
+  INSTALL_UNOP (op_hermitian, octave_cell, transpose);
+
   INSTALL_ASSIGNANYOP (op_asn_eq, octave_cell, assign);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-cm-cm.cc b/src/OPERATORS/op-cm-cm.cc
--- a/src/OPERATORS/op-cm-cm.cc
+++ b/src/OPERATORS/op-cm-cm.cc
@@ -41,24 +41,36 @@ Software Foundation, 59 Temple Place - S
 
 DEFNDUNOP_OP (not, complex_matrix, complex_array, !)
 DEFNDUNOP_OP (uminus, complex_matrix, complex_array, -)
 
 DEFUNOP (transpose, complex_matrix)
 {
   CAST_UNOP_ARG (const octave_complex_matrix&);
 
-  return octave_value (v.complex_matrix_value().transpose ());
+  if (v.ndims () > 2)
+    {
+      error ("transpose not defined for N-d objects");
+      return octave_value ();
+    }
+  else
+    return octave_value (v.complex_matrix_value().transpose ());
 }
 
 DEFUNOP (hermitian, complex_matrix)
 {
   CAST_UNOP_ARG (const octave_complex_matrix&);
 
-  return octave_value (v.complex_matrix_value().hermitian ());
+  if (v.ndims () > 2)
+    {
+      error ("complex-conjugate transpose not defined for N-d objects");
+      return octave_value ();
+    }
+  else
+    return octave_value (v.complex_matrix_value().hermitian ());
 }
 
 DEFNCUNOP_METHOD (incr, complex_matrix, increment)
 DEFNCUNOP_METHOD (decr, complex_matrix, decrement)
 
 // complex matrix by complex matrix ops.
 
 DEFNDBINOP_OP (add, complex_matrix, complex_matrix, complex_array, complex_array, +)
diff --git a/src/OPERATORS/op-m-m.cc b/src/OPERATORS/op-m-m.cc
--- a/src/OPERATORS/op-m-m.cc
+++ b/src/OPERATORS/op-m-m.cc
@@ -41,17 +41,23 @@ Software Foundation, 59 Temple Place - S
 
 DEFNDUNOP_OP (not, matrix, array, !)
 DEFNDUNOP_OP (uminus, matrix, array, -)
 
 DEFUNOP (transpose, matrix)
 {
   CAST_UNOP_ARG (const octave_matrix&);
 
-  return octave_value (v.matrix_value().transpose ());
+  if (v.ndims () > 2)
+    {
+      error ("transpose not defined for N-d objects");
+      return octave_value ();
+    }
+  else
+    return octave_value (v.matrix_value().transpose ());
 }
 
 DEFNCUNOP_METHOD (incr, matrix, increment)
 DEFNCUNOP_METHOD (decr, matrix, decrement)
 
 // matrix by matrix ops.
 
 DEFNDBINOP_OP (add, matrix, matrix, array, array, +)
diff --git a/src/OPERATORS/op-str-str.cc b/src/OPERATORS/op-str-str.cc
--- a/src/OPERATORS/op-str-str.cc
+++ b/src/OPERATORS/op-str-str.cc
@@ -36,17 +36,23 @@ Software Foundation, 59 Temple Place - S
 #include "ops.h"
 
 // string unary ops.
 
 DEFUNOP (transpose, matrix)
 {
   CAST_UNOP_ARG (const octave_char_matrix_str&);
 
-  return octave_value (v.char_matrix_value().transpose (), true);
+  if (v.ndims () > 2)
+    {
+      error ("transpose not defined for N-d objects");
+      return octave_value ();
+    }
+  else
+    return octave_value (v.char_matrix_value().transpose (), true);
 }
 
 // string by string ops.
 
 DEFBINOP (eq, char_matrix_str, char_matrix_str)
 {
   CAST_BINOP_ARGS (const octave_char_matrix_str&,
 		   const octave_char_matrix_str&);
diff --git a/src/OPERATORS/op-streamoff.cc b/src/OPERATORS/op-streamoff.cc
--- a/src/OPERATORS/op-streamoff.cc
+++ b/src/OPERATORS/op-streamoff.cc
@@ -33,17 +33,23 @@ Software Foundation, 59 Temple Place - S
 #include "ops.h"
 
 // streamoff unary ops.
 
 DEFUNOP (transpose, streamoff)
 {
   CAST_UNOP_ARG (const octave_streamoff&);
 
-  return octave_value (streamoff_array (v.streamoff_array_value().transpose ()));
+  if (v.ndims () > 2)
+    {
+      error ("transpose not defined for N-d objects");
+      return octave_value ();
+    }
+  else
+    return octave_value (streamoff_array (v.streamoff_array_value().transpose ()));
 }
 
 DEFNCUNOP_METHOD (incr, streamoff, increment)
 DEFNCUNOP_METHOD (decr, streamoff, decrement)
 
 // streamoff by streamoff ops.
 
 DEFNDBINOP_OP (add, streamoff, streamoff, streamoff_array, streamoff_array, +)
