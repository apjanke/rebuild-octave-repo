# HG changeset patch
# User ryanru@PrinceHumperdinck
# Date 1204668065 18000
#      Tue Mar 04 17:01:05 2008 -0500
# Node ID 6070c3bd69c44a75b8c5a0f72056df36cf348564
# Parent  5ed0cb9e95848b1f8ceb641dfd344cc10f80179d
Arbitrary call stack access for external debuggers changeset

diff --git a/doc/interpreter/contributors.in b/doc/interpreter/contributors.in
--- a/doc/interpreter/contributors.in
+++ b/doc/interpreter/contributors.in
@@ -155,16 +155,17 @@ Eric S. Raymond
 Balint Reczey
 Michael Reifenberger
 Jason Riedy
 Petter Risholm
 Matthew W. Roberts
 Andrew Ross
 Mark van Rossum
 Kevin Ruland
+Ryan Rusaw
 Olli Saarela
 Toni Saarela
 Juhani Saastamoinen
 Ben Sapp
 Alois Schloegl
 Michel D. Schmid
 Nicol N. Schraudolph
 Sebastian Schubert
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,29 @@
+2008-03-04  Ryan Rusaw  <rrusaw@gmail.com>
+
+	* toplev.h (octave_call_stack::element): New static function.
+	(octave_call_stack::cs): Now std::deque instead of std::list.
+
+	* pt-stmt.cc (curr_statement, curr_caller_statement): Delete.
+	* pt-stmt.h: Delete decls.
+
+	* pt-stmt.h, pt-stmt.cc (tree_statement_stack): New class.
+
+	* pt-stmt.cc (tree_statement::eval): Use tree_statement_stack
+	instead of curr_statement variable.
+
+	* ov-usr-func.cc (octave_user_function::do_multi_index_op):
+	Don't set curr_caller_statement.
+
+	* error.cc (verror, pr_where): Call tree_statement_stack::current_line
+	and tree_statement_stack::current_column instead of 
+	instead of curr_statement->line and curr_statement->column.
+	* input.cc (get_user_input): Likewise.
+
 2008-02-27  John P. Swensen  <jpswensen@gmail.com>
 
 	* debug.cc (get_user_function): Call symtab::find_function instead
 	of symtab::find_user_function.
 
 2008-02-27  John W. Eaton  <jwe@octave.org>
 
 	* oct-stream.cc (do_read): Stop reading if seek fails.
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -227,27 +227,27 @@ verror (bool save_last_error, std::ostre
       Vlast_error_id = id;
       Vlast_error_message = msg_string;
 
       Vlast_error_line = -1;
       Vlast_error_column = -1;
       Vlast_error_name = std::string ();
       Vlast_error_file = std::string ();
 
-      if (curr_statement)
+      if (tree_statement_stack::current ())
 	{
 	  octave_function *fcn
 	    = octave_call_stack::caller_user_script_or_function ();
 
 	  if (fcn)
 	    {
 	      Vlast_error_file = fcn->fcn_file_name ();
 	      Vlast_error_name = fcn->name();
-	      Vlast_error_line = curr_statement->line ();
-	      Vlast_error_column = curr_statement->column ();
+	      Vlast_error_line = tree_statement_stack::current_line ();
+	      Vlast_error_column = tree_statement_stack::current_column ();
 	    }
 	}
     }
 
   if (buffer_error_messages)
     {
       std::string tmp = msg_string;
 
@@ -417,38 +417,35 @@ pr_where_1 (const char *fmt, ...)
   va_start (args, fmt);
   pr_where_2 (fmt, args);
   va_end (args);
 }
 
 static void
 pr_where (const char *name, bool print_code = true)
 {
-  if (curr_statement)
+  if (tree_statement_stack::current ())
     {
       std::string nm;
 
       int l = -1;
       int c = -1;
 
       octave_function *fcn
 	= octave_call_stack::caller_user_script_or_function ();
 
       if (fcn)
 	{
 	  nm = fcn->fcn_file_name ();
 
 	  if (nm.empty ())
 	    nm = fcn->name ();
 
-	  if (curr_statement)
-	    {
-	      l = curr_statement->line ();
-	      c = curr_statement->column ();
-	    }
+	  l = tree_statement_stack::current_line ();
+	  c = tree_statement_stack::current_column ();
 	}
 
       if (nm.empty ())
 	{
 	  if (l > 0 && c > 0)
 	    pr_where_1 ("%s: near line %d, column %d:", name, l, c);
 	}
       else
@@ -469,17 +466,20 @@ pr_where (const char *name, bool print_c
 	  // the original source line.
 
 	  std::ostringstream output_buf;
 
 	  output_buf << std::endl;
 
 	  tree_print_code tpc (output_buf, ">>> ");
 
-	  curr_statement->accept (tpc);
+	  tree_statement *curr_stmt = tree_statement_stack::current ();
+
+	  if (curr_stmt)
+	    curr_stmt->accept (tpc);
 
 	  output_buf << std::endl;
 
 	  std::string msg = output_buf.str ();
 
 	  pr_where_1 ("%s", msg.c_str ());
 	}
     }
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -603,18 +603,17 @@ get_user_input (const octave_value_list&
 
       if (caller)
 	{
 	  nm = caller->fcn_file_name ();
 
 	  if (nm.empty ())
 	    nm = caller->name ();
 
-	  if (curr_statement)
-	    line = curr_statement->line ();
+	  line = tree_statement_stack::current_line ();
 	}
     }
 
   std::ostringstream buf;
 
   if (! nm.empty ())
     {
       if (Vgud_mode)
@@ -696,17 +695,17 @@ get_user_input (const octave_value_list&
 	      tree::break_function = octave_call_stack::current ();
 
 	      return retval;
 	    }
 	  else if (match_sans_spaces_semi ("dbnext", input_buf))
 	    {
 	      tree::break_next = true;
 
-	      tree::last_line = curr_statement->line ();
+	      tree::last_line = tree_statement_stack::current_line ();
 
 	      tree::break_function = octave_call_stack::current ();
 
 	      return retval;
 	    }
 	}
 
       if (read_as_string)
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -285,19 +285,16 @@ octave_user_function::do_multi_index_op 
       unwind_protect::add (symbol_table::pop_context);
     }
   else
     {
       // Force symbols to be undefined again when this function exits.
       unwind_protect::add (symbol_table::clear_variables);
     }
 
-  unwind_protect_ptr (curr_caller_statement);
-  curr_caller_statement = curr_statement;
-
   octave_call_stack::push (this);
 
   unwind_protect::add (octave_call_stack::unwind_pop, 0);
 
   if (! (is_nested_function () || is_inline_function ()))
     {
       unwind_protect_ptr (curr_parent_function);
       curr_parent_function = this;
diff --git a/src/pt-stmt.cc b/src/pt-stmt.cc
--- a/src/pt-stmt.cc
+++ b/src/pt-stmt.cc
@@ -40,22 +40,16 @@ along with Octave; see the file COPYING.
 #include "pt-jump.h"
 #include "pt-pr-code.h"
 #include "pt-stmt.h"
 #include "pt-walk.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
-// Pointer to the current statement being executed.
-tree_statement *curr_statement = 0;
-
-// Pointer to the current statement being executed in the calling function.
-tree_statement *curr_caller_statement = 0;
-
 // A list of commands to be executed.
 
 tree_statement::~tree_statement (void)
 {
   delete cmd;
   delete expr;
   delete comm;
 }
@@ -88,18 +82,18 @@ octave_value_list
 tree_statement::eval (bool silent, int nargout, bool in_function_body)
 {
   octave_value_list retval;
 
   bool pf = silent ? false : print_flag;
 
   if (cmd || expr)
     {
-      unwind_protect_ptr (curr_statement);
-      curr_statement = this;
+      unwind_protect::add (tree_statement_stack::unwind_pop, 0);
+      tree_statement_stack::push (this);
 
       maybe_echo_code (in_function_body);
 
       try
 	{
 	  if (cmd)
 	    cmd->eval ();
 	  else
@@ -286,13 +280,15 @@ tree_statement_list::dup (symbol_table::
 }
 
 void
 tree_statement_list::accept (tree_walker& tw)
 {
   tw.visit_statement_list (*this);
 }
 
+tree_statement_stack *tree_statement_stack::instance = 0;
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/pt-stmt.h b/src/pt-stmt.h
--- a/src/pt-stmt.h
+++ b/src/pt-stmt.h
@@ -26,16 +26,18 @@ along with Octave; see the file COPYING.
 
 class octave_value_list;
 
 class tree_command;
 class tree_expression;
 
 class tree_walker;
 
+#include <deque>
+
 #include "base-list.h"
 #include "comment-list.h"
 #include "symtab.h"
 
 // A statement is either a command to execute or an expression to
 // evaluate.
 
 class
@@ -153,21 +155,115 @@ private:
 
   // No copying!
 
   tree_statement_list (const tree_statement_list&);
 
   tree_statement_list& operator = (const tree_statement_list&);
 };
 
-// Pointer to the current statement being executed.
-extern tree_statement *curr_statement;
+class tree_statement_stack
+{
+protected:
+
+  tree_statement_stack (void) : tss () { }
+
+public:
+
+  typedef std::deque<tree_statement *>::iterator iterator ;
+
+  static bool instance_ok (void)
+  {
+    bool retval = true;
+
+    if (! instance)
+      instance = new tree_statement_stack ();
+
+    if (! instance)
+      {
+	::error ("unable to create stmt stack object!");
+
+	retval = false;
+      }
+
+    return retval;
+  }
+
+  // Current statement (top of stack).
+  static tree_statement *current (void) { return top (); }
+
+  static int current_line (void)
+  {
+    tree_statement *s = current ();
+    return s ? s->line () : -1;
+  }
+
+  static int current_column (void)
+  {
+    tree_statement *s = current ();
+    return s ? s->column () : -1;
+  }
+
+  // Statement at position N on the call stack (N == 0 is current).
+  static tree_statement *element (size_t n)
+  {
+    return instance_ok () ? instance->do_element (n) : 0;
+  }
 
-// Pointer to the current statement being executed in the calling function.
-extern tree_statement *curr_caller_statement;
+  // Caller statement
+  static tree_statement *caller (void) { return element (1); }
+
+  static void push (tree_statement *f)
+  {
+    if (instance_ok ())
+      instance->do_push (f);
+  }
+
+  static tree_statement *top (void)
+  {
+    return instance_ok () ? instance->do_top (): 0;
+  }
+
+  static void pop (void)
+  {
+    if (instance_ok ())
+      instance->do_pop ();
+  }
+  
+  // A function for popping the top of the call stack that is suitable
+  // for use as an unwind_protect handler.
+  static void unwind_pop (void *) { pop (); }
+
+  static void clear (void)
+  {
+    if (instance_ok ())
+      instance->do_clear ();
+  }
+
+private:
+
+  // The current stmt stack.
+  std::deque<tree_statement *> tss;
+
+  static tree_statement_stack *instance;
+
+  tree_statement *do_element (size_t n) { return tss.size () > n ? tss[n] : 0; }
+
+  void do_push (tree_statement *f) { tss.push_front (f); }
+
+  tree_statement *do_top (void) { return tss.empty () ? 0 : tss.front (); }
+
+  void do_pop (void)
+  {
+    if (! tss.empty ())
+      tss.pop_front ();
+  }
+
+  void do_clear (void) { tss.clear (); }
+};
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -90,30 +90,16 @@ bool octave_initialized = false;
 // Current command to execute.
 tree_statement_list *global_command = 0;
 
 // Pointer to parent function that is currently being evaluated.
 octave_function *curr_parent_function = 0;
 
 octave_call_stack *octave_call_stack::instance = 0;
 
-octave_function *
-octave_call_stack::do_caller (void)
-{
-  octave_function *retval = 0;
-
-  if (cs.size () > 1)
-    {
-      iterator p = cs.begin ();
-      retval = *++p;
-    }
-
-  return retval;
-}
-
 octave_user_script *
 octave_call_stack::do_caller_user_script (void)
 {
   octave_user_script *retval = 0;
 
   for (iterator p = cs.begin (); p != cs.end (); p++)
     {
       octave_function *f = *p;
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -21,17 +21,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if !defined (octave_toplev_h)
 #define octave_toplev_h 1
 
 #include <cstdio>
 
-#include <list>
+#include <deque>
 #include <string>
 
 class octave_value;
 class octave_value_list;
 class octave_function;
 class octave_user_script;
 class tree_statement_list;
 class charMatrix;
@@ -69,17 +69,17 @@ class
 octave_call_stack
 {
 protected:
 
   octave_call_stack (void) : cs () { }
 
 public:
 
-  typedef std::list<octave_function *>::iterator iterator ;
+  typedef std::deque<octave_function *>::iterator iterator ;
 
   static bool instance_ok (void)
   {
     bool retval = true;
 
     if (! instance)
       instance = new octave_call_stack ();
 
@@ -94,35 +94,42 @@ public:
   }
 
   // Current function (top of stack).
   static octave_function *current (void) { return top (); }
 
   // Caller function, may be built-in.
   static octave_function *caller (void)
   {
-    return instance_ok () ? instance->do_caller (): 0;
+    return element (1);
   }
 
+  // Function at location N on the call stack (N == 0 is current), may
+  // be built-in.
+  static octave_function *element (size_t n)
+  {
+    return instance_ok () ? instance->do_element (n) : 0;
+  }
+  
   // First script on the stack.
   static octave_user_script *caller_script (void)
   {
-    return instance_ok () ? instance->do_caller_user_script (): 0;
+    return instance_ok () ? instance->do_caller_user_script () : 0;
   }
 
   // First user-defined function on the stack.
   static octave_user_function *caller_user_function (void)
   {
-    return instance_ok () ? instance->do_caller_user_function (): 0;
+    return instance_ok () ? instance->do_caller_user_function () : 0;
   }
 
   // First user-defined function on the stack.
   static octave_function *caller_user_script_or_function (void)
   {
-    return instance_ok () ? instance->do_caller_user_script_or_function (): 0;
+    return instance_ok () ? instance->do_caller_user_script_or_function () : 0;
   }
 
   static void push (octave_function *f)
   {
     if (instance_ok ())
       instance->do_push (f);
   }
 
@@ -145,25 +152,25 @@ public:
   // call stack that is suitable for use as an unwind_protect handler.
   static void unwind_pop_script (void *);
 
   static void clear (void)
   {
     if (instance_ok ())
       instance->do_clear ();
   }
-  
+
 private:
 
   // The current call stack.
-  std::list<octave_function *> cs;
+  std::deque<octave_function *> cs;
 
   static octave_call_stack *instance;
 
-  octave_function *do_caller (void);
+  octave_function *do_element (size_t n) { return cs.size () > n ? cs[n] : 0; }
 
   octave_user_script *do_caller_user_script (void);
 
   octave_user_function *do_caller_user_function (void);
 
   octave_function *do_caller_user_script_or_function (void);
 
   void do_push (octave_function *f) { cs.push_front (f); }
