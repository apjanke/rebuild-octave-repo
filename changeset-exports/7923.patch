# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1215805390 14400
#      Fri Jul 11 15:43:10 2008 -0400
# Node ID c3d21b9b94b679db93ba863f721171f36b74f248
# Parent  935be827eaf8fbbb44f7eb34a5951a893e436724
eliminate octave_call_stack member functions caller_user_script and caller_user_function, and unused difference_type args

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,33 @@
 2008-07-11  John W. Eaton  <jwe@octave.org>
 
+	* toplev.cc, toplev.h (octave_call_stack::caller_user_function,
+	octave_call_stack::caller_user_script,
+	octave_call_stack::do_caller_user_function,
+	octave_call_stack::do_caller_user_script):
+	Delete functions and decls. 
+
+	* defun.cc (print_usage): Call octave_call_stack::caller_user_code,
+	not octave_call_stack::caller_user_function.
+	* debug.cc (get_user_code): Likewise.
+
+	* toplev.h (octave_call_stack::difference_type): Delete typedef.
+	* toplev.cc, toplev.h (octave_call_stack::caller_user_code_line,
+	octave_call_stack::do_caller_user_code_line, 
+	octave_call_stack::caller_user_code_column,
+	octave_call_stack::do_caller_user_code_column,
+	octave_call_stack::caller_script,
+	octave_call_stack::do_caller_script,
+	octave_call_stack::caller_user_function,
+	octave_call_stack::do_caller_user_function,
+	octave_call_stack::caller_user_code,
+	octave_call_stack::do_caller_user_code):
+	Delete unused difference_type arg.
+
 	* ov-float.h, ov-flt-re-mat.cc, ov-range.h, ov-re-mat.h,
 	ov-re-sparse.cc, ov-scalar.h: Check for NaN in bool_value and
 	bool_array_value member functions to bool.
 
 	* ops.h (DEFSCALARBOOLOP_OP): New macro.
 	* OPERATORS/op-s-s.cc, OPERATORS/op-fs-fs.cc: Use it to define
 	el_and and el_or ops.
 
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -62,17 +62,17 @@ bp_table *bp_table::instance = 0;
 // current call stack.
 
 static octave_user_code *
 get_user_code (const std::string& fname = std::string ())
 {
   octave_user_code *dbg_fcn = 0;
 
   if (fname.empty ())
-    dbg_fcn = octave_call_stack::caller_user_function ();
+    dbg_fcn = octave_call_stack::caller_user_code ();
   else
     {
       octave_value fcn = symbol_table::find_function (fname);
 
       if (fcn.is_defined ())
 	dbg_fcn = fcn.user_code_value ();
     }
 
@@ -876,20 +876,18 @@ execution to continue until the current 
 	      else if (arg == "out")
 		{
 		  Vdebugging = false;
 
 		  tree::break_next = 0;
 
 		  tree::last_line = -1;
 
-		  // Next to skip 2 here. One for the oct-file dbstep and 
-		  // another for the function we actually want to step out of.
 		  tree::break_function = 
-		    octave_call_stack::caller_user_code (2);
+		    octave_call_stack::caller_user_code (1);
 
 		  tree::last_break_function = 
 		    octave_call_stack::caller_user_code ();
 		}
 	      else
 		{
 		  int n = atoi (arg.c_str ());
 
diff --git a/src/defun.cc b/src/defun.cc
--- a/src/defun.cc
+++ b/src/defun.cc
@@ -100,17 +100,17 @@ Print the usage message for the currentl
 @code{print_usage} function is only intended to work inside a\n\
 user-defined function.\n\
 @seealso{help}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 0)
-    print_usage (octave_call_stack::caller_user_function ());
+    print_usage (octave_call_stack::caller_user_code ());
   else
     print_usage ();
 
   return retval;
 }
 
 void
 check_version (const std::string& version, const std::string& fcn)
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -107,17 +107,17 @@ int
 octave_call_stack::do_current_column (void) const
 {
   tree_statement *stmt = do_top_statement ();
 
   return stmt ? stmt->column () : -1;
 }
 
 int
-octave_call_stack::do_caller_user_code_line (difference_type q) const
+octave_call_stack::do_caller_user_code_line (void) const
 {
   int retval = -1;
 
   const_iterator p = cs.end ();
 
   while (p != cs.begin ())
     {
       const call_stack_elt& elt = *(--p);
@@ -135,17 +135,17 @@ octave_call_stack::do_caller_user_code_l
 	    }
 	}
     }
 
   return retval;
 }
 
 int
-octave_call_stack::do_caller_user_code_column (difference_type q) const
+octave_call_stack::do_caller_user_code_column (void) const
 {
   int retval = -1;
 
   const_iterator p = cs.end ();
 
   while (p != cs.begin ())
     {
       const call_stack_elt& elt = *(--p);
@@ -199,79 +199,38 @@ octave_call_stack::do_num_user_code_fram
 
   // We counted how many user frames were not the one, in reverse.
   // Now set curr_user_frame to be the index in the other direction.
   curr_user_frame = retval - curr_user_frame - 1;
 
   return retval;
 }
 
-octave_user_script *
-octave_call_stack::do_caller_user_script (difference_type q) const
-{
-  octave_user_script *retval = 0;
-
-  const_iterator p = cs.end ();
-
-  while (p != cs.begin ())
-    {
-      const call_stack_elt& elt = *(--p);
-
-      octave_function *f = elt.fcn;
-
-      if (f && f->is_user_script ())
-	{
-	  retval = dynamic_cast<octave_user_script *> (f);
-	  break;
-	}
-    }
-
-  return retval;
-}
-
-octave_user_function *
-octave_call_stack::do_caller_user_function (difference_type q) const
-{
-  octave_user_function *retval = 0;
-
-  const_iterator p = cs.end ();
-
-  while (p != cs.begin ())
-    {
-      const call_stack_elt& elt = *(--p);
-
-      octave_function *f = elt.fcn;
-
-      if (f && f->is_user_function ())
-	{
-	  retval = dynamic_cast<octave_user_function *> (f);
-	  break;
-	}
-    }
-
-  return retval;
-}
-
 octave_user_code *
-octave_call_stack::do_caller_user_code (difference_type q) const
+octave_call_stack::do_caller_user_code (size_t nskip) const
 {
   octave_user_code *retval = 0;
 
   const_iterator p = cs.end ();
 
   while (p != cs.begin ())
     {
       const call_stack_elt& elt = *(--p);
 
       octave_function *f = elt.fcn;
 
       if (f && f->is_user_code ())
 	{
-	  retval = dynamic_cast<octave_user_code *> (f);
-	  break;
+	  if (nskip > 0)
+	    nskip--;
+	  else
+	    {
+	      retval = dynamic_cast<octave_user_code *> (f);
+	      break;
+	    }
 	}
     }
 
   return retval;
 }
 
 Octave_map
 octave_call_stack::do_backtrace (size_t nskip,
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -98,18 +98,16 @@ protected:
 public:
 
   typedef std::deque<call_stack_elt>::iterator iterator;
   typedef std::deque<call_stack_elt>::const_iterator const_iterator;
 
   typedef std::deque<call_stack_elt>::reverse_iterator reverse_iterator;
   typedef std::deque<call_stack_elt>::const_reverse_iterator const_reverse_iterator;
 
-  typedef std::deque<call_stack_elt>::difference_type difference_type;
-
   static bool instance_ok (void)
   {
     bool retval = true;
 
     if (! instance)
       {
 	instance = new octave_call_stack ();
 
@@ -140,25 +138,25 @@ public:
 
   // Current column in current function.
   static int current_column (void)
   {
     return instance_ok () ? instance->do_current_column () : -1;
   }
 
   // Line in user code caller.
-  static int caller_user_code_line (difference_type q = 0)
+  static int caller_user_code_line (void)
   {
-    return instance_ok () ? instance->do_caller_user_code_line (q) : -1;
+    return instance_ok () ? instance->do_caller_user_code_line () : -1;
   }
 
   // Column in user code caller.
-  static int caller_user_code_column (difference_type q = 0)
+  static int caller_user_code_column (void)
   {
-    return instance_ok () ? instance->do_caller_user_code_column (q) : -1;
+    return instance_ok () ? instance->do_caller_user_code_column () : -1;
   }
 
   // Caller function, may be built-in.
   static octave_function *caller (void)
   {
     return element (1);
   }
 
@@ -190,32 +188,20 @@ public:
 
   // Function at location N on the call stack (N == 0 is current), may
   // be built-in.
   static octave_function *element (size_t n)
   {
     return instance_ok () ? instance->do_element (n) : 0;
   }
   
-  // First script on the stack.
-  static octave_user_script *caller_script (difference_type q = 0)
+  // First user-defined function on the stack.
+  static octave_user_code *caller_user_code (size_t nskip = 0)
   {
-    return instance_ok () ? instance->do_caller_user_script (q) : 0;
-  }
-
-  // First user-defined function on the stack.
-  static octave_user_function *caller_user_function (difference_type q = 0)
-  {
-    return instance_ok () ? instance->do_caller_user_function (q) : 0;
-  }
-
-  // First user-defined function on the stack.
-  static octave_user_code *caller_user_code (difference_type q = 0)
-  {
-    return instance_ok () ? instance->do_caller_user_code (q) : 0;
+    return instance_ok () ? instance->do_caller_user_code (nskip) : 0;
   }
 
   static void
   push (octave_function *f,
 	symbol_table::scope_id scope = symbol_table::current_scope (),
 	symbol_table::context_id context = symbol_table::current_context ())
   {
     if (instance_ok ())
@@ -291,19 +277,19 @@ private:
   size_t curr_frame;
 
   static octave_call_stack *instance;
 
   int do_current_line (void) const;
 
   int do_current_column (void) const;
 
-  int do_caller_user_code_line (difference_type q = 0) const;
+  int do_caller_user_code_line (void) const;
 
-  int do_caller_user_code_column (difference_type q = 0) const;
+  int do_caller_user_code_column (void) const;
 
   size_t do_current_frame (void) { return curr_frame; }
 
   size_t do_size (void) { return cs.size (); }
 
   size_t do_num_user_code_frames (octave_idx_type& curr_user_frame) const;
 
   symbol_table::scope_id do_current_scope (void) const
@@ -326,21 +312,17 @@ private:
       {
 	call_stack_elt& elt = cs[n];
 	retval = elt.fcn;
       }
 
     return retval;
   }
 
-  octave_user_script *do_caller_user_script (difference_type q = 0) const;
-
-  octave_user_function *do_caller_user_function (difference_type q = 0) const;
-
-  octave_user_code *do_caller_user_code (difference_type q = 0) const; 
+  octave_user_code *do_caller_user_code (size_t nskip) const; 
 
   void do_push (octave_function *f, symbol_table::scope_id scope,
 		symbol_table::context_id context)
   {
     size_t prev_frame = curr_frame;
     curr_frame = cs.size ();
     cs.push_back (call_stack_elt (f, scope, context, prev_frame));
     symbol_table::set_scope_and_context (scope, context);
