# HG changeset patch
# User jwe
# Date 949025258 0
#      Fri Jan 28 02:07:38 2000 +0000
# Node ID e5d5848370c90301b235746356125cce69495691
# Parent  8b1f46ac2b6498999a41384367fc211e3f41cc32
[project @ 2000-01-28 02:07:35 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,15 @@
+2000-01-27  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* emacs/octave-mod.el (octave-begin-keywords): Add "do".
+	(octave-end-keywords): Add "until".
+	(octave-abbrev-table): Add "u" as abbrev for "until ()"
+	(octave-block-match-alist): Add do-until.
+
 2000-01-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Don't look for the sunmath library.
 	Don't check for infinity or quiet_nan.
 
 	* emacs/octave-mod.el (octave-mode-syntax-table):
 	Undo previous change, but add a comment explaining why.
 
diff --git a/emacs/octave-mod.el b/emacs/octave-mod.el
--- a/emacs/octave-mod.el
+++ b/emacs/octave-mod.el
@@ -82,36 +82,37 @@ All Octave abbrevs start with a grave ac
     (define-abbrev octave-abbrev-table "`gp" "gplot" nil)
     (define-abbrev octave-abbrev-table "`gs" "gsplot" nil)
     (define-abbrev octave-abbrev-table "`if" "if ()" nil)
     (define-abbrev octave-abbrev-table "`o" "otherwise" nil)
     (define-abbrev octave-abbrev-table "`rp" "replot" nil)
     (define-abbrev octave-abbrev-table "`r" "return" nil)
     (define-abbrev octave-abbrev-table "`s" "switch" nil)
     (define-abbrev octave-abbrev-table "`t" "try" nil)
+    (define-abbrev octave-abbrev-table "`u" "until ()" nil)
     (define-abbrev octave-abbrev-table "`up" "unwind_protect" nil)
     (define-abbrev octave-abbrev-table "`upc" "unwind_protect_cleanup" nil)
     (define-abbrev octave-abbrev-table "`w" "while ()" nil)
     (setq abbrevs-changed ac)))
 
 (defvar octave-comment-char ?#
   "Character to start an Octave comment.")
 (defvar octave-comment-start
   (concat (make-string 1 octave-comment-char) " ")
   "String to insert to start a new Octave in-line comment.")
 (defvar octave-comment-start-skip "\\s<+\\s-*"
   "Regexp to match the start of an Octave comment up to its body.")
 
 (defvar octave-begin-keywords
-  '("for" "function" "if" "switch" "try" "unwind_protect" "while"))
+  '("do" "for" "function" "if" "switch" "try" "unwind_protect" "while"))
 (defvar octave-else-keywords
   '("case" "catch" "else" "elseif" "otherwise" "unwind_protect_cleanup"))
 (defvar octave-end-keywords
   '("end" "endfor" "endfunction" "endif" "endswitch" "end_try_catch"
-    "end_unwind_protect" "endwhile"))
+    "end_unwind_protect" "endwhile" "until"))
 
 (defvar octave-reserved-words
   (append octave-begin-keywords
 	  octave-else-keywords
 	  octave-end-keywords
 	  '("all_va_args" "break" "continue" "global" "gplot" "gsplot"
 	    "replot" "return"))
   "Reserved words in Octave.")
@@ -348,17 +349,18 @@ newline or semicolon after an else or en
   (concat "\\<\\("
 	  (mapconcat 'identity octave-end-keywords "\\|")
 	  "\\)\\>"))
 (defvar octave-block-begin-or-end-regexp
   (concat octave-block-begin-regexp "\\|" octave-block-end-regexp))
 (defvar octave-block-else-or-end-regexp
   (concat octave-block-else-regexp "\\|" octave-block-end-regexp))
 (defvar octave-block-match-alist
-  '(("for" . ("end" "endfor"))
+  '(("do" . ("until"))
+    ("for" . ("end" "endfor"))
     ("function" . ("end" "endfunction"))
     ("if" . ("else" "elseif" "end" "endif"))
     ("switch" . ("case" "otherwise" "end" "endswitch"))
     ("try" . ("catch" "end" "end_try_catch"))
     ("unwind_protect" . ("unwind_protect_cleanup" "end"
 			 "end_unwind_protect"))
     ("while" . ("end" "endwhile")))
   "Alist with Octave's matching block keywords.
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,24 +1,19 @@
 2000-01-27  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
-	* pt-walk.h (tree_walker::visit_do_while_command): New pure virtual.
-	(tree_walker::visit_do_until_command): Ditto.
-	* pt-pr-code.cc (tree_print_code::visit_do_while_command):
+	* pt-walk.h (tree_walker::visit_do_until_command): New pure virtual.
+	* pt-pr-code.cc (tree_print_code::visit_do_until_command):
 	New function.
-	(tree_print_code::visit_do_until_command): Ditto.
-	* pt-loop.h (tree_do_while_command): New class.
-	(tree_do_until_command): Ditto.
+	* pt-loop.h (tree_do_until_command): New class.
 	(tree_while_command::expr, tree_while_command::list):
 	Now protected instead of private.
-	* parse.y (make_do_while_command): New function.
-	(make_do_until_command): Ditto.
-	(loop_command): Recognize do-while and do-until statements.
+	* parse.y (make_do_until_command): New function.
+	(loop_command): Recognize do-until statement.
 	(DO, UNTIL): New tokens.
-	* Makefile.in (parse.cc): Expect 13 shift/reduce conflicts.
 
 	* input.cc (match_sans_spaces): Require non-blank part of test
 	string to match standard string exactly.
 
 2000-01-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-stream.h (scanf_format_elt::char_class): New struct elt.
 	Add arg to constructor.
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -432,17 +432,17 @@ bin-dist:
 	if [ -n "$(BINDISTLIBS)" ]; then \
 	  echo $(BINDISTLIBS) >> ../`cat ../.fname`/LIBRARIES; \
 	fi
 .PHONY: bin-dist
 
 # Special rules -- these files need special things to be defined.
 
 parse.cc : parse.y
-	@echo "expect 13 shift/reduce conflicts"
+	@echo "expect 11 shift/reduce conflicts"
 	$(YACC) $(YFLAGS) $<
 	@$(top_srcdir)/move-if-change y.tab.c $(@F)
 
 lex.cc : lex.l
 	$(LEX) $(LFLAGS) $< > $(@F)
 
 defaults.h: defaults.h.in ../Makeconf Makefile
 	@$(do-subst-default-vals)
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -181,21 +181,16 @@ static tree_command *
 make_try_command (token *try_tok, tree_statement_list *body,
 		  tree_statement_list *cleanup, token *end_tok);
 
 // Build a while command.
 static tree_command *
 make_while_command (token *while_tok, tree_expression *expr,
 		    tree_statement_list *body, token *end_tok);
 
-// Build a do-while command.
-static tree_command *
-make_do_while_command (token *do_tok, tree_statement_list *body,
-		       tree_expression *expr);
-
 // Build a do-until command.
 static tree_command *
 make_do_until_command (token *do_tok, tree_statement_list *body,
 		       tree_expression *expr);
 
 // Build a for command.
 static tree_command *
 make_for_command (token *for_tok, tree_argument_list *lhs,
@@ -954,21 +949,16 @@ default_case	: OTHERWISE opt_sep opt_lis
 // Looping
 // =======
 
 loop_command	: WHILE expression opt_sep opt_list END
 		  {
 		    if (! ($$ = make_while_command ($1, $2, $4, $5)))
 		      ABORT_PARSE;
 		  }
-		| DO opt_sep opt_list WHILE expression
-		  {
-		    if (! ($$ = make_do_while_command ($1, $3, $5)))
-		      ABORT_PARSE;
-		  }
 		| DO opt_sep opt_list UNTIL expression
 		  {
 		    if (! ($$ = make_do_until_command ($1, $3, $5)))
 		      ABORT_PARSE;
 		  }
 		| FOR assign_lhs '=' expression opt_sep opt_list END
 		  {
 		    if (! ($$ = make_for_command ($1, $2, $4, $6, $7)))
@@ -2087,38 +2077,16 @@ make_while_command (token *while_tok, tr
       int c = while_tok->column ();
 
       retval = new tree_while_command (expr, body, l, c);
     }
 
   return retval;
 }
 
-// Build a do-while command.
-
-static tree_command *
-make_do_while_command (token *do_tok, tree_statement_list *body,
-		       tree_expression *expr)
-{
-  tree_command *retval = 0;
-
-  maybe_warn_assign_as_truth_value (expr);
-
-  // We have to do this because while can also be used to begin a loop.
-  lexer_flags.looping -= 2;
-  promptflag++;
-
-  int l = do_tok->line ();
-  int c = do_tok->column ();
-
-  retval = new tree_do_while_command (expr, body, l, c);
-
-  return retval;
-}
-
 // Build a do-until command.
 
 static tree_command *
 make_do_until_command (token *do_tok, tree_statement_list *body,
 		       tree_expression *expr)
 {
   tree_command *retval = 0;
 
diff --git a/src/pt-loop.cc b/src/pt-loop.cc
--- a/src/pt-loop.cc
+++ b/src/pt-loop.cc
@@ -110,59 +110,16 @@ tree_while_command::eval_error (void)
 }
 
 void
 tree_while_command::accept (tree_walker& tw)
 {
   tw.visit_while_command (*this);
 }
 
-// Do-While
-
-void
-tree_do_while_command::eval (void)
-{
-  if (error_state)
-    return;
-
-  if (! expr)
-    panic_impossible ();
-
-  for (;;)
-    {
-      if (list)
-	{
-	  list->eval ();
-
-	  if (error_state)
-	    {
-	      eval_error ();
-	      return;
-	    }
-	}
-
-      if (quit_loop_now () || ! expr->is_logically_true ("do-while"))
-	break;
-    }
-}
-
-void
-tree_do_while_command::eval_error (void)
-{
-  if (error_state > 0)
-    ::error ("evaluating do-while command near line %d, column %d",
-	     line (), column ());
-}
-
-void
-tree_do_while_command::accept (tree_walker& tw)
-{
-  tw.visit_do_while_command (*this);
-}
-
 // Do-Until
 
 void
 tree_do_until_command::eval (void)
 {
   if (error_state)
     return;
 
diff --git a/src/pt-loop.h b/src/pt-loop.h
--- a/src/pt-loop.h
+++ b/src/pt-loop.h
@@ -79,50 +79,16 @@ private:
 
   // No copying!
 
   tree_while_command (const tree_while_command&);
 
   tree_while_command& operator = (const tree_while_command&);
 };
 
-// Do-While.
-
-class
-tree_do_while_command : public tree_while_command
-{
-public:
-
-  tree_do_while_command (int l = -1, int c = -1)
-    : tree_while_command (l, c) { }
-
-  tree_do_while_command (tree_expression *e, int l = -1, int c = -1)
-    : tree_while_command (e, l, c) { }
-
-  tree_do_while_command (tree_expression *e, tree_statement_list *lst,
-		      int l = -1, int c = -1)
-    : tree_while_command (e, lst, l, c) { }
-
-  ~tree_do_while_command (void) { }
-
-  void eval (void);
-
-  void eval_error (void);
-
-  void accept (tree_walker& tw);
-
-private:
-
-  // No copying!
-
-  tree_do_while_command (const tree_do_while_command&);
-
-  tree_do_while_command& operator = (const tree_do_while_command&);
-};
-
 // Do-Until.
 
 class
 tree_do_until_command : public tree_while_command
 {
 public:
 
   tree_do_until_command (int l = -1, int c = -1)
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -1097,46 +1097,16 @@ tree_print_code::visit_while_command (tr
     }
 
   indent ();
 
   os << "endwhile";
 }
 
 void
-tree_print_code::visit_do_while_command (tree_do_while_command& cmd)
-{
-  indent ();
-
-  os << "do";
-
-  newline ();
-
-  tree_statement_list *list = cmd.body ();
-
-  if (list)
-    {
-      increment_indent_level ();
-      list->accept (*this);
-      decrement_indent_level ();
-    }
-
-  indent ();
-
-  os << "while";
-
-  tree_expression *expr = cmd.condition ();
-
-  if (expr)
-    expr->accept (*this);
-
-  newline ();
-}
-
-void
 tree_print_code::visit_do_until_command (tree_do_until_command& cmd)
 {
   indent ();
 
   os << "do";
 
   newline ();
 
diff --git a/src/pt-pr-code.h b/src/pt-pr-code.h
--- a/src/pt-pr-code.h
+++ b/src/pt-pr-code.h
@@ -133,18 +133,16 @@ public:
   void visit_switch_command (tree_switch_command&);
 
   void visit_try_catch_command (tree_try_catch_command&);
 
   void visit_unwind_protect_command (tree_unwind_protect_command&);
 
   void visit_while_command (tree_while_command&);
 
-  void visit_do_while_command (tree_do_while_command&);
-
   void visit_do_until_command (tree_do_until_command&);
 
 private:
 
   ostream& os;
 
   string prefix;
 
diff --git a/src/pt-walk.h b/src/pt-walk.h
--- a/src/pt-walk.h
+++ b/src/pt-walk.h
@@ -63,17 +63,16 @@ class subplot;
 class subplot_axes;
 class subplot_list;
 class subplot_style;
 class subplot_using;
 class tree_try_catch_command;
 class tree_unwind_protect_command;
 class tree_while_command;
 class tree_do_until_command;
-class tree_do_while_command;
 
 class
 tree_walker
 {
 public:
 
   virtual void
   visit_argument_list (tree_argument_list&) = 0;
@@ -203,19 +202,16 @@ public:
 
   virtual void
   visit_unwind_protect_command (tree_unwind_protect_command&) = 0;
 
   virtual void
   visit_while_command (tree_while_command&) = 0;
 
   virtual void
-  visit_do_while_command (tree_do_while_command&) = 0;
-
-  virtual void
   visit_do_until_command (tree_do_until_command&) = 0;
 
 protected:
 
   tree_walker (void) { }
 
   virtual ~tree_walker (void) { }
 
